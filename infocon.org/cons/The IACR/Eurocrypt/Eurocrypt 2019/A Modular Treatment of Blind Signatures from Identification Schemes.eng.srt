1
00:00:00,030 --> 00:00:05,220
thank you for the introduction okay so

2
00:00:02,429 --> 00:00:06,750
first off what is a blind signature

3
00:00:05,220 --> 00:00:08,189
scheme so we've seen many different

4
00:00:06,750 --> 00:00:10,110
types of signature schemes in this

5
00:00:08,189 --> 00:00:12,120
session and let me explain now what a

6
00:00:10,110 --> 00:00:13,739
blind signature scheme is so in the

7
00:00:12,120 --> 00:00:16,108
context of blind signing we have a

8
00:00:13,740 --> 00:00:19,650
signer S on the left side here and it

9
00:00:16,109 --> 00:00:22,650
holds a secret key SK on the right side

10
00:00:19,650 --> 00:00:26,220
we have a user u that holds a public key

11
00:00:22,650 --> 00:00:28,890
and it holds a message and so now the

12
00:00:26,220 --> 00:00:30,779
idea is that the signer and the user are

13
00:00:28,890 --> 00:00:33,149
going to run this interactive protocol

14
00:00:30,779 --> 00:00:35,760
and at the end of the protocol the user

15
00:00:33,149 --> 00:00:39,120
is going to hold a signature Sigma on em

16
00:00:35,760 --> 00:00:44,489
that anybody can verify using the public

17
00:00:39,120 --> 00:00:47,489
key ok so note that in comparison to

18
00:00:44,489 --> 00:00:49,949
regular signing the signer here is not

19
00:00:47,489 --> 00:00:51,209
in possession of the message ok and as

20
00:00:49,950 --> 00:00:54,320
it turns out this is actually the

21
00:00:51,210 --> 00:00:56,940
crucial feature of a blind signature and

22
00:00:54,320 --> 00:00:59,489
we express this via the blindness

23
00:00:56,940 --> 00:01:02,039
condition okay so blindness says

24
00:00:59,489 --> 00:01:04,289
informally that the signer is actually

25
00:01:02,039 --> 00:01:06,000
not allowed to know what message it is

26
00:01:04,290 --> 00:01:08,189
signing this is why it's called a blind

27
00:01:06,000 --> 00:01:10,020
signature we can even make a stronger

28
00:01:08,189 --> 00:01:11,880
statement that says that if the signer

29
00:01:10,020 --> 00:01:14,360
engages in many of these runs with the

30
00:01:11,880 --> 00:01:16,259
user of this interactive protocol and

31
00:01:14,360 --> 00:01:17,790
afterwards gets to see all of the

32
00:01:16,259 --> 00:01:19,770
signatures that it created during these

33
00:01:17,790 --> 00:01:22,680
runs then it cannot link the signatures

34
00:01:19,770 --> 00:01:23,899
to the protocol instantiation in which

35
00:01:22,680 --> 00:01:26,159
they were created

36
00:01:23,900 --> 00:01:28,049
ok so this is the first security

37
00:01:26,159 --> 00:01:30,630
requirement and the second one of course

38
00:01:28,049 --> 00:01:33,509
is that you should not be able to sign a

39
00:01:30,630 --> 00:01:34,979
message without the help of s but as it

40
00:01:33,509 --> 00:01:37,500
turns out it's a bit tricky to define

41
00:01:34,979 --> 00:01:39,390
the second property so let's actually

42
00:01:37,500 --> 00:01:41,490
take a bit of a closer look here on the

43
00:01:39,390 --> 00:01:44,009
second slide what are the means so we

44
00:01:41,490 --> 00:01:46,560
formalize unforgeable 'ti in the context

45
00:01:44,009 --> 00:01:50,070
of blind signing via this one more in 4G

46
00:01:46,560 --> 00:01:52,049
bility experiment ok and here we're

47
00:01:50,070 --> 00:01:54,809
looking at an adversary on the right

48
00:01:52,049 --> 00:01:56,670
side which isn't basically taking the

49
00:01:54,810 --> 00:01:59,689
role of the user in this blind signing

50
00:01:56,670 --> 00:02:02,640
scheme and it's going to be running this

51
00:01:59,689 --> 00:02:06,000
blind signature protocol L times with

52
00:02:02,640 --> 00:02:09,479
the signer s ok and is considered

53
00:02:06,000 --> 00:02:11,940
successful in forging a signature if it

54
00:02:09,479 --> 00:02:13,980
can come up with one more signature and

55
00:02:11,940 --> 00:02:16,410
one on one more message

56
00:02:13,980 --> 00:02:17,910
then the number of signatures they could

57
00:02:16,410 --> 00:02:20,880
have seen by interacting with the signer

58
00:02:17,910 --> 00:02:21,600
so now why do we have to formalize it

59
00:02:20,880 --> 00:02:24,650
this way

60
00:02:21,600 --> 00:02:27,210
why can't we just rely on the regular

61
00:02:24,650 --> 00:02:28,710
extension and forge ability notion well

62
00:02:27,210 --> 00:02:30,660
because the signer doesn't see the

63
00:02:28,710 --> 00:02:32,220
messages that it is signing so I cannot

64
00:02:30,660 --> 00:02:34,049
check which of them is fresh in the end

65
00:02:32,220 --> 00:02:37,140
this is why we need to formalize it in

66
00:02:34,050 --> 00:02:39,720
this more complicated way ok so here's

67
00:02:37,140 --> 00:02:41,429
just some basic motivation ever blind

68
00:02:39,720 --> 00:02:44,670
signatures they were originally

69
00:02:41,430 --> 00:02:46,320
introduced by Davichi um in 1983 and

70
00:02:44,670 --> 00:02:49,049
they served as the basis of his

71
00:02:46,320 --> 00:02:52,079
anonymously cache system and so the idea

72
00:02:49,050 --> 00:02:54,060
is very simple so we have coins and

73
00:02:52,080 --> 00:02:56,120
basically the coins are blind signatures

74
00:02:54,060 --> 00:02:58,890
and the users can trade them for goods

75
00:02:56,120 --> 00:03:02,100
ok and of course only the bank here

76
00:02:58,890 --> 00:03:05,910
which is centralized should be able to

77
00:03:02,100 --> 00:03:07,890
issue these coins to the users and this

78
00:03:05,910 --> 00:03:11,190
of course is ensured by unforgeable 'ti

79
00:03:07,890 --> 00:03:13,049
of these blind signatures and now the

80
00:03:11,190 --> 00:03:15,630
second property that we would like from

81
00:03:13,050 --> 00:03:17,910
cash is sort of the physical attribute

82
00:03:15,630 --> 00:03:20,549
that cash has which is that it is

83
00:03:17,910 --> 00:03:22,470
untraceable and anonymous upon spending

84
00:03:20,550 --> 00:03:25,110
and this can be insured via the

85
00:03:22,470 --> 00:03:28,170
blindness property which basically says

86
00:03:25,110 --> 00:03:29,910
that when a coin is spent then the bank

87
00:03:28,170 --> 00:03:34,260
cannot link it back to particular

88
00:03:29,910 --> 00:03:37,950
issuing of this coin ok so here is a

89
00:03:34,260 --> 00:03:40,079
sort of an overview of the compact blind

90
00:03:37,950 --> 00:03:42,089
signature schemes that you can find in

91
00:03:40,080 --> 00:03:44,640
the literature so I should say that

92
00:03:42,090 --> 00:03:47,280
there are also blind signature schemes

93
00:03:44,640 --> 00:03:49,708
from more general complexity assumptions

94
00:03:47,280 --> 00:03:51,180
but they tend to be not as compact and

95
00:03:49,709 --> 00:03:53,730
not as efficient as the ones that I've

96
00:03:51,180 --> 00:03:56,670
gathered up here so on the left side we

97
00:03:53,730 --> 00:03:58,230
have to move blind signature schemes and

98
00:03:56,670 --> 00:04:00,420
on the positive sides they're very

99
00:03:58,230 --> 00:04:02,790
efficient and they allow to sign

100
00:04:00,420 --> 00:04:04,619
polynomially many messages for public

101
00:04:02,790 --> 00:04:07,260
key and even internet concurrent fashion

102
00:04:04,620 --> 00:04:09,989
usually but on the downside they rely on

103
00:04:07,260 --> 00:04:13,829
strong or assumptions which typically

104
00:04:09,989 --> 00:04:15,780
include one more type assumptions ok so

105
00:04:13,830 --> 00:04:17,790
and on the right hand side we have these

106
00:04:15,780 --> 00:04:19,410
three move blind signature schemes so

107
00:04:17,790 --> 00:04:21,269
there will be three interactions between

108
00:04:19,410 --> 00:04:24,419
signer improver so they're a bit less

109
00:04:21,269 --> 00:04:26,070
efficient but on the positive side they

110
00:04:24,419 --> 00:04:27,719
follow from standard assumptions such as

111
00:04:26,070 --> 00:04:30,390
are is a factoring and

112
00:04:27,720 --> 00:04:33,240
look on a downside however and this is

113
00:04:30,390 --> 00:04:35,760
much more caveat than the three moves

114
00:04:33,240 --> 00:04:38,250
here is that they only allow for a poly

115
00:04:35,760 --> 00:04:40,200
logarithmic number of signatures to be

116
00:04:38,250 --> 00:04:42,330
issued for public key and after this

117
00:04:40,200 --> 00:04:44,159
they become insecure and it turns out

118
00:04:42,330 --> 00:04:46,500
that this is actually optimal so if you

119
00:04:44,160 --> 00:04:49,140
issue more signatures then you can show

120
00:04:46,500 --> 00:04:51,390
an attack on this but it doesn't mean

121
00:04:49,140 --> 00:04:53,490
that these signatures are useless you

122
00:04:51,390 --> 00:04:56,640
can use them as building blocks for more

123
00:04:53,490 --> 00:04:59,580
complex schemes and so it still makes

124
00:04:56,640 --> 00:05:01,110
sense to consider them and this is what

125
00:04:59,580 --> 00:05:03,120
we're going to be doing in this talk so

126
00:05:01,110 --> 00:05:05,250
I'm going to focus on the schemes here

127
00:05:03,120 --> 00:05:06,780
on the right side so far they were

128
00:05:05,250 --> 00:05:09,030
mostly considered by plan shiva and

129
00:05:06,780 --> 00:05:11,520
stern in their seminal paper from 2000

130
00:05:09,030 --> 00:05:15,330
journal of cryptology so our

131
00:05:11,520 --> 00:05:18,780
contributions are so we show in our work

132
00:05:15,330 --> 00:05:20,820
how to build any such three move blind

133
00:05:18,780 --> 00:05:22,349
signature scheme from a linear hash

134
00:05:20,820 --> 00:05:23,909
function which is basically a hash

135
00:05:22,350 --> 00:05:25,410
function which has some homomorphic

136
00:05:23,910 --> 00:05:28,740
properties and I will show this in the

137
00:05:25,410 --> 00:05:31,560
next couple of slides and secondly we

138
00:05:28,740 --> 00:05:33,900
modularize and simplify the proofs from

139
00:05:31,560 --> 00:05:36,590
these works by prevents term which I've

140
00:05:33,900 --> 00:05:39,359
listed here okay so this is the road map

141
00:05:36,590 --> 00:05:41,070
so to do this we give this generic

142
00:05:39,360 --> 00:05:44,520
framework which I've sketched out here

143
00:05:41,070 --> 00:05:46,080
okay and it has two steps I'm going to

144
00:05:44,520 --> 00:05:47,880
explain the first one first and

145
00:05:46,080 --> 00:05:49,560
basically it's going to show how we go

146
00:05:47,880 --> 00:05:51,270
from a linear hash function which I'm

147
00:05:49,560 --> 00:05:53,640
not going to define to a linear

148
00:05:51,270 --> 00:05:55,530
identification scheme and the second

149
00:05:53,640 --> 00:05:58,460
step shows how to go from a linear ID

150
00:05:55,530 --> 00:06:02,849
scheme to linear blind signature scheme

151
00:05:58,460 --> 00:06:06,090
okay so first let's look at linear hash

152
00:06:02,850 --> 00:06:08,220
functions so we're going to consider a

153
00:06:06,090 --> 00:06:09,419
domain and arrange the end R and we're

154
00:06:08,220 --> 00:06:10,110
going to be assuming that there are s

155
00:06:09,419 --> 00:06:12,270
modules

156
00:06:10,110 --> 00:06:15,090
okay so they commute with this structure

157
00:06:12,270 --> 00:06:17,789
s here so we have a function that maps

158
00:06:15,090 --> 00:06:20,549
from the domain to the range and as I

159
00:06:17,790 --> 00:06:22,650
said it has this linearity property and

160
00:06:20,550 --> 00:06:26,280
what it means is that for all x and y in

161
00:06:22,650 --> 00:06:29,219
the domain of G and for all scalars s in

162
00:06:26,280 --> 00:06:32,460
this set s here we have the property

163
00:06:29,220 --> 00:06:35,250
that F evaluated on s times X plus y is

164
00:06:32,460 --> 00:06:40,979
the same as multiplying s with the image

165
00:06:35,250 --> 00:06:41,580
of f of X under F plus F of Y ok and of

166
00:06:40,979 --> 00:06:42,900
course

167
00:06:41,580 --> 00:06:44,400
they wouldn't be hash functions if they

168
00:06:42,900 --> 00:06:46,590
weren't compressing so this is also a

169
00:06:44,400 --> 00:06:50,609
requirement and they should also be

170
00:06:46,590 --> 00:06:52,530
collision resistant so now before I show

171
00:06:50,610 --> 00:06:54,600
how such a hash function directly

172
00:06:52,530 --> 00:06:57,179
implies an identification scheme let me

173
00:06:54,600 --> 00:06:59,850
actually recall quickly what an

174
00:06:57,180 --> 00:07:01,560
identification scheme is so we're going

175
00:06:59,850 --> 00:07:03,600
to consider three move identification

176
00:07:01,560 --> 00:07:05,790
schemes for this talk and here we have a

177
00:07:03,600 --> 00:07:07,560
proofer on the left hand side again the

178
00:07:05,790 --> 00:07:09,240
proofer holds a secret key and on the

179
00:07:07,560 --> 00:07:11,130
right hand side we have a verifier that

180
00:07:09,240 --> 00:07:13,080
holds a public key and the goal of this

181
00:07:11,130 --> 00:07:15,450
three move interaction is for the prover

182
00:07:13,080 --> 00:07:16,770
to prove to the verifier that indeed it

183
00:07:15,450 --> 00:07:21,240
holds the secret key matching this

184
00:07:16,770 --> 00:07:23,159
public key so it follows this structure

185
00:07:21,240 --> 00:07:25,290
of this protocol looks as follows

186
00:07:23,160 --> 00:07:27,000
in the first round the prover sends a

187
00:07:25,290 --> 00:07:28,950
commitment to the verifier then the

188
00:07:27,000 --> 00:07:31,590
verifier picks a random challenge sends

189
00:07:28,950 --> 00:07:33,780
it back and then there is a response s

190
00:07:31,590 --> 00:07:36,810
by the prover and now the verifier can

191
00:07:33,780 --> 00:07:39,479
either accept or reject this answer okay

192
00:07:36,810 --> 00:07:42,540
so this is how an identification scheme

193
00:07:39,480 --> 00:07:45,300
looks so now let's look at how such a

194
00:07:42,540 --> 00:07:47,460
linear hash function directly implies a

195
00:07:45,300 --> 00:07:51,300
three move identification scheme so how

196
00:07:47,460 --> 00:07:54,090
does it work so let's consider such a

197
00:07:51,300 --> 00:07:56,040
hash function so now the secret key will

198
00:07:54,090 --> 00:07:59,130
just be some point in the domain and of

199
00:07:56,040 --> 00:08:01,380
course the public key will be the linear

200
00:07:59,130 --> 00:08:02,730
hash function evaluated on the secret

201
00:08:01,380 --> 00:08:04,920
key okay and the goal of this

202
00:08:02,730 --> 00:08:08,490
identification is now to show that we

203
00:08:04,920 --> 00:08:11,490
know the preimage of PK under F so to do

204
00:08:08,490 --> 00:08:14,040
this you first pick a random are in the

205
00:08:11,490 --> 00:08:16,340
domain then you evaluate the function on

206
00:08:14,040 --> 00:08:18,930
R and you send over this commitment R

207
00:08:16,340 --> 00:08:22,739
then the challenge will be some random

208
00:08:18,930 --> 00:08:25,590
point in this set s send it over and

209
00:08:22,740 --> 00:08:27,720
then s is going to be computed in the

210
00:08:25,590 --> 00:08:30,929
domain as R plus C times the secret key

211
00:08:27,720 --> 00:08:33,870
you sent over this answer s and then the

212
00:08:30,930 --> 00:08:37,919
check is going to be if F evaluated on

213
00:08:33,870 --> 00:08:39,690
this answer s is the same as R plus C

214
00:08:37,919 --> 00:08:42,299
times the public key and of course

215
00:08:39,690 --> 00:08:44,160
because the linear function has this

216
00:08:42,299 --> 00:08:46,290
homomorphic property this check should

217
00:08:44,159 --> 00:08:47,880
always evaluate to true and the

218
00:08:46,290 --> 00:08:51,050
identification scheme that results in

219
00:08:47,880 --> 00:08:51,050
this way has perfect correctness

220
00:08:52,590 --> 00:08:58,200
okay so now I'm going to introduce a new

221
00:08:56,279 --> 00:09:00,420
security notion on identification

222
00:08:58,200 --> 00:09:02,430
schemes and later I will explain how

223
00:09:00,420 --> 00:09:04,380
this security notion is going to be tied

224
00:09:02,430 --> 00:09:06,089
to the one more and forge ability notion

225
00:09:04,380 --> 00:09:09,870
that I showed in the beginning of the

226
00:09:06,090 --> 00:09:11,820
talk so we call this security notion one

227
00:09:09,870 --> 00:09:14,460
more man-in-the-middle security so what

228
00:09:11,820 --> 00:09:16,650
does it mean so we consider here an

229
00:09:14,460 --> 00:09:18,210
adversary that acts as a man in the

230
00:09:16,650 --> 00:09:20,279
middle between the prover and the

231
00:09:18,210 --> 00:09:22,529
verifier so it forwards back and forth

232
00:09:20,279 --> 00:09:26,939
the communication between these two

233
00:09:22,529 --> 00:09:29,370
entities so now it gets to run L times

234
00:09:26,940 --> 00:09:30,960
this identification scheme with the

235
00:09:29,370 --> 00:09:34,080
prover here on the left-hand side and

236
00:09:30,960 --> 00:09:36,570
its goal is to close one more of these

237
00:09:34,080 --> 00:09:38,400
interactions with the verifier and so of

238
00:09:36,570 --> 00:09:42,000
course this is a very natural notion

239
00:09:38,400 --> 00:09:43,500
because for any reasonable

240
00:09:42,000 --> 00:09:46,770
identification scheme this should in

241
00:09:43,500 --> 00:09:48,450
fact the art right and if one can show

242
00:09:46,770 --> 00:09:50,370
that it lies in between the classical

243
00:09:48,450 --> 00:09:51,779
notions of impersonation but is a bit

244
00:09:50,370 --> 00:09:53,790
weaker than the classical

245
00:09:51,779 --> 00:09:59,310
man-in-the-middle notion that is often

246
00:09:53,790 --> 00:10:04,410
considered in the literature okay so now

247
00:09:59,310 --> 00:10:06,390
our main theorem says that if F this

248
00:10:04,410 --> 00:10:08,910
linear hash function is collision

249
00:10:06,390 --> 00:10:11,460
resistant then the resulting

250
00:10:08,910 --> 00:10:13,589
identification scheme which I showed you

251
00:10:11,460 --> 00:10:15,630
a couple of slides ago has this one more

252
00:10:13,589 --> 00:10:20,730
man-in-the-middle security okay so this

253
00:10:15,630 --> 00:10:22,920
is the what we show in our work so for

254
00:10:20,730 --> 00:10:25,740
this proof we need some ingredients okay

255
00:10:22,920 --> 00:10:27,300
and mostly we follow the proof of Porsha

256
00:10:25,740 --> 00:10:33,020
of understand given in their seminal

257
00:10:27,300 --> 00:10:36,060
work from Journal of cryptology mm and

258
00:10:33,020 --> 00:10:38,400
so notably this work introduces what is

259
00:10:36,060 --> 00:10:40,530
today known as the forking lemma it's a

260
00:10:38,400 --> 00:10:42,270
technique for rewinding an adversary

261
00:10:40,530 --> 00:10:43,920
running it twice and then getting two

262
00:10:42,270 --> 00:10:50,819
answers in order to solve some hard

263
00:10:43,920 --> 00:10:53,310
problem and but the original analysis it

264
00:10:50,820 --> 00:10:55,050
used well a less refined version of the

265
00:10:53,310 --> 00:10:57,300
four key lemma then later given in a

266
00:10:55,050 --> 00:10:58,920
generalized version Bible ah and Evan so

267
00:10:57,300 --> 00:11:01,260
it's a very subtle analysis and it's

268
00:10:58,920 --> 00:11:03,510
quite easy to get wrong and one of our

269
00:11:01,260 --> 00:11:07,520
goals was to simplify this complicated

270
00:11:03,510 --> 00:11:10,230
analysis and give a more modular proof

271
00:11:07,520 --> 00:11:12,660
so the main technical ingredient in

272
00:11:10,230 --> 00:11:15,630
doing so is a new forking lemma that we

273
00:11:12,660 --> 00:11:18,360
introduced in in our work and we believe

274
00:11:15,630 --> 00:11:19,890
it to be of independent interest so the

275
00:11:18,360 --> 00:11:21,720
main thing that we need to do in order

276
00:11:19,890 --> 00:11:23,550
to be able to prove this is we need to

277
00:11:21,720 --> 00:11:25,620
analyze the distribution of the

278
00:11:23,550 --> 00:11:27,870
adversary's side output so what does

279
00:11:25,620 --> 00:11:30,960
that mean well consider the very simple

280
00:11:27,870 --> 00:11:32,430
example I run an adversary twice ok so

281
00:11:30,960 --> 00:11:34,230
it's going to be successful twice but

282
00:11:32,430 --> 00:11:37,410
now I want to know the probability that

283
00:11:34,230 --> 00:11:40,110
it outputs the same signature twice ok

284
00:11:37,410 --> 00:11:42,630
and as it turns out this is something

285
00:11:40,110 --> 00:11:44,190
that we can't infer from the Bellavia

286
00:11:42,630 --> 00:11:46,439
and Nevin generalized four key lemma

287
00:11:44,190 --> 00:11:48,030
because the only thing that the forking

288
00:11:46,440 --> 00:11:50,130
lemma Babylon and Evan would tell us in

289
00:11:48,030 --> 00:11:52,050
this context is that the adversary is

290
00:11:50,130 --> 00:11:54,240
successful twice but it can help put any

291
00:11:52,050 --> 00:11:56,520
two forgeries and this is why we needed

292
00:11:54,240 --> 00:11:59,580
a more general and more refined version

293
00:11:56,520 --> 00:12:01,199
of this forking lemma and this is

294
00:11:59,580 --> 00:12:02,820
exactly the type of forking lemma that

295
00:12:01,200 --> 00:12:05,340
we introduced here and we call it the

296
00:12:02,820 --> 00:12:07,200
subset forking lemma and it actually can

297
00:12:05,340 --> 00:12:08,910
be shown to imply the forking lemma

298
00:12:07,200 --> 00:12:11,070
Babolat and Evon and as I said I think

299
00:12:08,910 --> 00:12:16,170
it might also be of independent interest

300
00:12:11,070 --> 00:12:19,710
for other works ok so this was the first

301
00:12:16,170 --> 00:12:21,689
part of our generic proof framework now

302
00:12:19,710 --> 00:12:24,150
let's look at how we go from a linear

303
00:12:21,690 --> 00:12:25,410
identification scheme to the linear

304
00:12:24,150 --> 00:12:28,680
blind signature scheme that we would

305
00:12:25,410 --> 00:12:31,350
like to have in the end ok so my

306
00:12:28,680 --> 00:12:33,150
starting point will again be this linear

307
00:12:31,350 --> 00:12:35,250
identification scheme that I introduced

308
00:12:33,150 --> 00:12:37,500
which follows directly from the linear

309
00:12:35,250 --> 00:12:40,440
hash function right so now I'm going to

310
00:12:37,500 --> 00:12:42,810
convert this into a three move line

311
00:12:40,440 --> 00:12:44,550
signature scheme so the first thing that

312
00:12:42,810 --> 00:12:47,189
we do is we replace these two entities

313
00:12:44,550 --> 00:12:49,260
here okay there were a proof or in

314
00:12:47,190 --> 00:12:51,210
verifier now they become signer and user

315
00:12:49,260 --> 00:12:53,460
ok so now of course the signer

316
00:12:51,210 --> 00:12:55,950
additionally holds also this message M

317
00:12:53,460 --> 00:12:58,740
but on the side of the proof or nothing

318
00:12:55,950 --> 00:13:01,620
changes so now going to modify the

319
00:12:58,740 --> 00:13:03,600
verifier to become the user somehow

320
00:13:01,620 --> 00:13:05,640
so the first additional step that the

321
00:13:03,600 --> 00:13:07,710
user is going to do is it's going to

322
00:13:05,640 --> 00:13:09,990
sample this alpha and beta which are

323
00:13:07,710 --> 00:13:12,390
blinding parameters it's going to use

324
00:13:09,990 --> 00:13:16,950
them to blind this commitment that it

325
00:13:12,390 --> 00:13:19,199
got from the prover so now instead of

326
00:13:16,950 --> 00:13:20,040
sampling the challenge here at random

327
00:13:19,200 --> 00:13:21,900
from the

328
00:13:20,040 --> 00:13:25,770
set s we're going to do something a bit

329
00:13:21,900 --> 00:13:27,750
more clever you're going to evaluate a

330
00:13:25,770 --> 00:13:30,780
hash function which is modeled as a

331
00:13:27,750 --> 00:13:32,490
random Oracle in our paper going to

332
00:13:30,780 --> 00:13:35,010
evaluate this on the blinded commitment

333
00:13:32,490 --> 00:13:36,450
reduce this challenge C Prime and then

334
00:13:35,010 --> 00:13:38,370
we're going to blind this challenge

335
00:13:36,450 --> 00:13:40,440
so the blinded challenge is going to be

336
00:13:38,370 --> 00:13:42,420
sent over to the signer and then the

337
00:13:40,440 --> 00:13:45,900
signer as usual computes the answer s

338
00:13:42,420 --> 00:13:47,670
the check is the same as before the

339
00:13:45,900 --> 00:13:50,750
signature will now become S Plus alpha

340
00:13:47,670 --> 00:13:54,390
and C Prime and it can be shown that

341
00:13:50,750 --> 00:13:56,460
this is the first theorem that one more

342
00:13:54,390 --> 00:13:58,080
man-in-the-middle security of the

343
00:13:56,460 --> 00:14:01,380
identification scheme that I started

344
00:13:58,080 --> 00:14:03,450
from is equivalent to one more

345
00:14:01,380 --> 00:14:05,660
unforgeable 'ti of the blind signature

346
00:14:03,450 --> 00:14:08,730
scheme that I am now ended up with here

347
00:14:05,660 --> 00:14:10,770
okay this is the main theorem for

348
00:14:08,730 --> 00:14:13,770
unforgeable ax t of this blind signature

349
00:14:10,770 --> 00:14:16,710
scheme we also have a second theorem

350
00:14:13,770 --> 00:14:19,350
which is a generalization of works by

351
00:14:16,710 --> 00:14:22,110
Shou meant and Peterson which says that

352
00:14:19,350 --> 00:14:23,580
this scheme has perfect likeness so what

353
00:14:22,110 --> 00:14:27,000
that means is that the adversary's

354
00:14:23,580 --> 00:14:29,400
advantage in linking any of the

355
00:14:27,000 --> 00:14:31,110
signatures that resolved from this

356
00:14:29,400 --> 00:14:33,390
protocol to any particular interaction

357
00:14:31,110 --> 00:14:38,160
is zero even if it has infinite

358
00:14:33,390 --> 00:14:42,020
computing power okay so here is an

359
00:14:38,160 --> 00:14:44,430
example the well-known Okamoto snore

360
00:14:42,020 --> 00:14:46,110
line signature scheme so for this

361
00:14:44,430 --> 00:14:49,620
purpose let us consider a cyclic group

362
00:14:46,110 --> 00:14:52,070
of prime order P and we have some public

363
00:14:49,620 --> 00:14:55,020
generators G 1 and G 2 with this group

364
00:14:52,070 --> 00:14:58,560
and so now we're going to consider the

365
00:14:55,020 --> 00:15:03,240
following linear function so f of r1 and

366
00:14:58,560 --> 00:15:05,939
r2 where r1 and r2 are integers and that

367
00:15:03,240 --> 00:15:08,730
P is going to be G 1 raised to the power

368
00:15:05,940 --> 00:15:12,030
of R 1 times G 2 raised to the power of

369
00:15:08,730 --> 00:15:13,950
r2 and it's very easy to see if you're

370
00:15:12,030 --> 00:15:16,770
familiar with Patterson commitments that

371
00:15:13,950 --> 00:15:18,600
this has collision resistance if the

372
00:15:16,770 --> 00:15:23,010
discrete logarithm problem is hard in

373
00:15:18,600 --> 00:15:25,470
the group G and moreover of course it's

374
00:15:23,010 --> 00:15:28,650
compressing because we map from the

375
00:15:25,470 --> 00:15:30,480
product of that P with itself to only

376
00:15:28,650 --> 00:15:33,470
this group so the order of the domain is

377
00:15:30,480 --> 00:15:35,910
larger than the order of the range

378
00:15:33,470 --> 00:15:39,210
okay so here is to scheme their results

379
00:15:35,910 --> 00:15:41,490
from this um basically it follows the

380
00:15:39,210 --> 00:15:45,210
structure that I showed you so first you

381
00:15:41,490 --> 00:15:49,200
sample these r1 r2 then you compute R by

382
00:15:45,210 --> 00:15:50,490
basically raising G 1 and G 2 to these

383
00:15:49,200 --> 00:15:52,890
two exponents here

384
00:15:50,490 --> 00:15:54,570
that's exactly just evaluating F you

385
00:15:52,890 --> 00:15:56,069
send it over you get back to challenge

386
00:15:54,570 --> 00:15:58,860
and then you compute these two answers

387
00:15:56,070 --> 00:16:02,970
here you send them and the check is

388
00:15:58,860 --> 00:16:06,540
going to be well it's going to be

389
00:16:02,970 --> 00:16:08,910
multiplying the public key with with G 1

390
00:16:06,540 --> 00:16:16,199
and G 2 raised to these two answers as 1

391
00:16:08,910 --> 00:16:19,980
and this 2 what ok and the nice thing is

392
00:16:16,200 --> 00:16:22,140
that because our framework is generic we

393
00:16:19,980 --> 00:16:24,390
have not only this instantiation but we

394
00:16:22,140 --> 00:16:26,790
also have an instantiation from RSA and

395
00:16:24,390 --> 00:16:29,400
from the factoring assumption okay and

396
00:16:26,790 --> 00:16:32,310
of course we hope that we can prove even

397
00:16:29,400 --> 00:16:36,600
more instantiations from more

398
00:16:32,310 --> 00:16:39,449
assumptions in this framework so here's

399
00:16:36,600 --> 00:16:41,610
a summary of what I talked about so we

400
00:16:39,450 --> 00:16:47,070
gave a generic framework to derive blind

401
00:16:41,610 --> 00:16:49,260
signatures from linear hash functions we

402
00:16:47,070 --> 00:16:50,940
capture several important schemes which

403
00:16:49,260 --> 00:16:56,310
include all of the schemes proven by

404
00:16:50,940 --> 00:16:58,080
crunchy values then our proofs are

405
00:16:56,310 --> 00:17:00,479
highly non tight they only admit for

406
00:16:58,080 --> 00:17:03,810
poly log many signatures but we show

407
00:17:00,480 --> 00:17:06,170
that this is optimal by generalizing an

408
00:17:03,810 --> 00:17:08,790
attack due to snorunt and vogner and

409
00:17:06,170 --> 00:17:11,459
finally we introduced this new forking

410
00:17:08,790 --> 00:17:15,510
lemma to generalize and simplify a bit

411
00:17:11,459 --> 00:17:18,209
the proof by prussia val and stem so

412
00:17:15,510 --> 00:17:20,160
here are some open questions of course

413
00:17:18,209 --> 00:17:23,880
the main open question is actually the

414
00:17:20,160 --> 00:17:26,850
second point which is to find schemes

415
00:17:23,880 --> 00:17:29,730
which admits to to sign for polynomially

416
00:17:26,849 --> 00:17:31,230
many messages per public key this has

417
00:17:29,730 --> 00:17:33,240
been open for many years but of course

418
00:17:31,230 --> 00:17:37,200
this is sort of the main goal that we

419
00:17:33,240 --> 00:17:39,720
would like to solve but somehow closer

420
00:17:37,200 --> 00:17:42,690
goal is maybe to generalize this

421
00:17:39,720 --> 00:17:44,640
framework to also include linear hash

422
00:17:42,690 --> 00:17:46,470
functions which have correctness error

423
00:17:44,640 --> 00:17:49,290
so for example

424
00:17:46,470 --> 00:17:51,360
from lattices okay or from other post

425
00:17:49,290 --> 00:17:54,000
quantum secure scheme so this would be

426
00:17:51,360 --> 00:17:57,850
uh another another immediate goal for

427
00:17:54,000 --> 00:18:05,160
the future thank you

428
00:17:57,850 --> 00:18:06,899
[Applause]

429
00:18:05,160 --> 00:18:08,910
so the rest time for questions again

430
00:18:06,900 --> 00:18:12,090
either you need to be the microphone or

431
00:18:08,910 --> 00:18:21,150
we need to repeat the question so are

432
00:18:12,090 --> 00:18:22,889
there any questions yes okay so the

433
00:18:21,150 --> 00:18:26,310
question was does this framework work

434
00:18:22,890 --> 00:18:31,680
with the swift hash function excuse me

435
00:18:26,310 --> 00:18:34,590
the answer is it's not clear because the

436
00:18:31,680 --> 00:18:35,010
resulting scheme so so why is it not

437
00:18:34,590 --> 00:18:37,110
there

438
00:18:35,010 --> 00:18:40,050
so because it's a lattice based

439
00:18:37,110 --> 00:18:42,120
assumption and we're considering blind

440
00:18:40,050 --> 00:18:43,800
signatures here what we have to do is we

441
00:18:42,120 --> 00:18:46,260
have to do this blinding trick right we

442
00:18:43,800 --> 00:18:48,870
have to add the planning parameters to

443
00:18:46,260 --> 00:18:51,330
the commitment and the challenge and so

444
00:18:48,870 --> 00:18:52,709
when you're considering lattices usually

445
00:18:51,330 --> 00:18:55,439
there is some correctness error involved

446
00:18:52,710 --> 00:18:57,000
here okay so maybe you're not in the

447
00:18:55,440 --> 00:18:59,730
correct range and then you have to redo

448
00:18:57,000 --> 00:19:01,790
it and this is something that is not

449
00:18:59,730 --> 00:19:13,920
captured in our framework so it wouldn't

450
00:19:01,790 --> 00:19:16,590
immediately follow so it's as I said oh

451
00:19:13,920 --> 00:19:18,390
sorry excuse me yeah so the question is

452
00:19:16,590 --> 00:19:20,730
where does this limitation come from

453
00:19:18,390 --> 00:19:23,790
which says that we can only sign Pali

454
00:19:20,730 --> 00:19:25,560
logarithmically many times so it's not

455
00:19:23,790 --> 00:19:27,090
an artifact of the proof but it's

456
00:19:25,560 --> 00:19:29,100
actually something so there's a concrete

457
00:19:27,090 --> 00:19:32,610
attack and it's based on K List

458
00:19:29,100 --> 00:19:34,110
techniques due to Avignon or so you can

459
00:19:32,610 --> 00:19:35,820
really attack the scheme if you do more

460
00:19:34,110 --> 00:19:45,929
than logarithmically many signatures by

461
00:19:35,820 --> 00:19:48,810
public key does that I related to that

462
00:19:45,930 --> 00:19:51,930
answer so which part of the proof kind

463
00:19:48,810 --> 00:19:54,419
of breaks down so why does it what is

464
00:19:51,930 --> 00:19:57,500
what isn't the proof that you provided

465
00:19:54,420 --> 00:20:00,000
us break down when it's over a Polliwog

466
00:19:57,500 --> 00:20:01,350
so you're asking about the

467
00:20:00,000 --> 00:20:03,990
specific point in the proof or how the

468
00:20:01,350 --> 00:20:06,330
attack works so I guess you used at some

469
00:20:03,990 --> 00:20:07,860
point that it's pulley logs so this

470
00:20:06,330 --> 00:20:10,110
proof step work yes

471
00:20:07,860 --> 00:20:11,909
so the point where it breaks down is so

472
00:20:10,110 --> 00:20:15,990
you need to upper bound the size of a

473
00:20:11,910 --> 00:20:17,490
certain set basically this is the set so

474
00:20:15,990 --> 00:20:18,630
you have to do this rewinding right and

475
00:20:17,490 --> 00:20:21,210
so you have to upper bound the

476
00:20:18,630 --> 00:20:23,970
probability that you get twice the same

477
00:20:21,210 --> 00:20:25,320
output from the forger because if you

478
00:20:23,970 --> 00:20:27,870
get twice the same output then you

479
00:20:25,320 --> 00:20:29,639
cannot you cannot solve any problems

480
00:20:27,870 --> 00:20:32,610
with this but because the challenge is

481
00:20:29,640 --> 00:20:35,160
maliciously chosen we can't control this

482
00:20:32,610 --> 00:20:38,340
fully okay so now you have to do quite

483
00:20:35,160 --> 00:20:39,960
subtle analysis of this and the work

484
00:20:38,340 --> 00:20:42,030
where it breaks down is where you have

485
00:20:39,960 --> 00:20:44,480
to fix all of the challenges that the

486
00:20:42,030 --> 00:20:48,270
adversary sends and there there will be

487
00:20:44,480 --> 00:20:50,280
L many of them ok and every one of them

488
00:20:48,270 --> 00:20:52,290
can be from a very large space and then

489
00:20:50,280 --> 00:20:56,550
we have to fix all of them and that's

490
00:20:52,290 --> 00:21:00,870
where what you really need this any

491
00:20:56,550 --> 00:21:02,050
final question if not let's thank all

492
00:21:00,870 --> 00:21:04,829
the speakers of this session again

493
00:21:02,050 --> 00:21:04,829
[Applause]

