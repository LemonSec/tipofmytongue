1
00:00:00,030 --> 00:00:06,089
yeah thank you for the introduction so

2
00:00:03,170 --> 00:00:09,120
this is joint work with Benny Applebaum

3
00:00:06,089 --> 00:00:11,340
it's Rika Bukowski and I will talk about

4
00:00:09,120 --> 00:00:14,940
the creature is complete for the wrong

5
00:00:11,340 --> 00:00:17,310
complexity of malicious NPC so in

6
00:00:14,940 --> 00:00:19,410
multi-party computation we have multiple

7
00:00:17,310 --> 00:00:21,419
parties and they have private

8
00:00:19,410 --> 00:00:24,960
communication channels between them and

9
00:00:21,420 --> 00:00:26,970
each of them has some private input and

10
00:00:24,960 --> 00:00:29,460
their goal is to mutually conclude some

11
00:00:26,970 --> 00:00:32,070
functionality F over all the inputs in

12
00:00:29,460 --> 00:00:34,380
such a way that each of them only learns

13
00:00:32,070 --> 00:00:38,190
an output without learning everything

14
00:00:34,380 --> 00:00:41,910
else anything else about the inputs now

15
00:00:38,190 --> 00:00:45,660
there are many different security

16
00:00:41,910 --> 00:00:48,120
notions that were defined for NPC so for

17
00:00:45,660 --> 00:00:50,190
example there is the semi honest setting

18
00:00:48,120 --> 00:00:52,379
where the parties must follow the

19
00:00:50,190 --> 00:00:54,059
protocol and all they can do is just

20
00:00:52,379 --> 00:00:55,860
observe all of the information that they

21
00:00:54,059 --> 00:00:58,320
get and try to learn something out of it

22
00:00:55,860 --> 00:01:01,500
and there is the malicious setting where

23
00:00:58,320 --> 00:01:03,989
they can actively are differently than

24
00:01:01,500 --> 00:01:07,260
what they supposed to do and send

25
00:01:03,989 --> 00:01:09,479
arbitrary messages and you can consider

26
00:01:07,260 --> 00:01:11,580
perfect security versus computational

27
00:01:09,479 --> 00:01:14,490
security and there are other notions

28
00:01:11,580 --> 00:01:17,820
such as the threshold and whether we

29
00:01:14,490 --> 00:01:19,860
allow abort or not and there are also

30
00:01:17,820 --> 00:01:23,429
many different sorry many different

31
00:01:19,860 --> 00:01:26,880
combinations of those settings now you

32
00:01:23,430 --> 00:01:30,259
can also measure protocols according to

33
00:01:26,880 --> 00:01:32,490
their efficiency so you can consider the

34
00:01:30,259 --> 00:01:34,320
computational complexity and the

35
00:01:32,490 --> 00:01:37,020
communication complexity of protocols

36
00:01:34,320 --> 00:01:41,520
and you can also consider the number of

37
00:01:37,020 --> 00:01:43,590
France and in many classic results that

38
00:01:41,520 --> 00:01:45,240
the number of rounds is correlated with

39
00:01:43,590 --> 00:01:49,320
the degree of the function to be

40
00:01:45,240 --> 00:01:52,350
computed so our goal in this work is to

41
00:01:49,320 --> 00:01:55,169
reduce the number of rounds in a generic

42
00:01:52,350 --> 00:01:58,979
way that is independent of the security

43
00:01:55,170 --> 00:02:01,619
notion so the high-level idea is to show

44
00:01:58,979 --> 00:02:05,610
a non-interactive reduction from any

45
00:02:01,619 --> 00:02:08,068
function to function of degree two so in

46
00:02:05,610 --> 00:02:10,649
in that way once you have a protocol

47
00:02:08,068 --> 00:02:15,079
that computes this degree to function we

48
00:02:10,649 --> 00:02:15,080
have a protocol that computes any factor

49
00:02:15,930 --> 00:02:21,280
okay so what is a non-interactive

50
00:02:18,310 --> 00:02:22,480
reduction so let's say we have this

51
00:02:21,280 --> 00:02:24,310
function that the parties want to

52
00:02:22,480 --> 00:02:26,470
compute but now we say that instead of

53
00:02:24,310 --> 00:02:28,599
communicating with each other there is

54
00:02:26,470 --> 00:02:31,689
some Oracle that computes a

55
00:02:28,599 --> 00:02:33,640
functionality age and the only thing

56
00:02:31,689 --> 00:02:36,370
that the parties can do is query wants

57
00:02:33,640 --> 00:02:39,790
this Oracle so now the reduction has a

58
00:02:36,370 --> 00:02:42,220
very specific structure so in the first

59
00:02:39,790 --> 00:02:44,890
step each party can do can do some local

60
00:02:42,220 --> 00:02:47,500
pre-processing over its input and then

61
00:02:44,890 --> 00:02:51,040
they all perform an Oracle query sending

62
00:02:47,500 --> 00:02:53,620
sending their processed inputs they all

63
00:02:51,040 --> 00:02:56,500
get a response and eventually each of

64
00:02:53,620 --> 00:03:01,780
them can do false processing and derive

65
00:02:56,500 --> 00:03:04,540
the final output now notice when we

66
00:03:01,780 --> 00:03:06,700
consider the militia setting then the

67
00:03:04,540 --> 00:03:08,048
only chance of the parties to deviate

68
00:03:06,700 --> 00:03:11,858
from the protocol is in the

69
00:03:08,049 --> 00:03:15,730
pre-processing phase so that fact will

70
00:03:11,859 --> 00:03:18,730
be important for us later and why this

71
00:03:15,730 --> 00:03:19,899
primitive is so strong because if we

72
00:03:18,730 --> 00:03:24,668
have a non-interactive

73
00:03:19,900 --> 00:03:27,400
reduction to a function H then given any

74
00:03:24,669 --> 00:03:30,310
weight to compute this functionality H

75
00:03:27,400 --> 00:03:32,409
we don't get a way to compute F in the

76
00:03:30,310 --> 00:03:35,079
same number of France so it can be

77
00:03:32,409 --> 00:03:37,269
either a protocol that computes age or

78
00:03:35,079 --> 00:03:42,879
thrusted party or even some physical

79
00:03:37,269 --> 00:03:47,290
device okay so let's go over some

80
00:03:42,879 --> 00:03:49,379
previous results so many classic

81
00:03:47,290 --> 00:03:51,790
protocols are actually implicitly

82
00:03:49,379 --> 00:03:54,280
non-interactive reductions so for

83
00:03:51,790 --> 00:03:55,989
example Yuans protocol is a

84
00:03:54,280 --> 00:03:59,739
non-interactive reduction in the two

85
00:03:55,989 --> 00:04:02,169
parties and myoma setting and in the

86
00:03:59,739 --> 00:04:05,079
multi party setting we have reductions

87
00:04:02,169 --> 00:04:08,500
to degree three functions and usually

88
00:04:05,079 --> 00:04:13,090
the they use something that is called

89
00:04:08,500 --> 00:04:15,459
randomized encoding and then a natural

90
00:04:13,090 --> 00:04:17,440
question is whether there is a reduction

91
00:04:15,459 --> 00:04:23,289
to the degree two in the multi-party

92
00:04:17,440 --> 00:04:25,810
setting so there were a few breakthrough

93
00:04:23,289 --> 00:04:28,719
results in the last year that

94
00:04:25,810 --> 00:04:31,270
the protocols that have only two rounds

95
00:04:28,720 --> 00:04:33,900
in the multi party setting but they

96
00:04:31,270 --> 00:04:36,700
don't show a general reduction so they

97
00:04:33,900 --> 00:04:40,359
face each security option

98
00:04:36,700 --> 00:04:44,110
separately and try to solve the problem

99
00:04:40,360 --> 00:04:46,270
in in the independent steps and recently

100
00:04:44,110 --> 00:04:48,970
in TCC there were two words that showed

101
00:04:46,270 --> 00:04:51,549
an underactive reduction but only in the

102
00:04:48,970 --> 00:04:53,830
semi honest setting so the natural

103
00:04:51,550 --> 00:04:55,900
follow-up question is whether there is a

104
00:04:53,830 --> 00:04:58,419
such reduction in the multi-party

105
00:04:55,900 --> 00:05:03,099
setting for a degree 2 but with

106
00:04:58,419 --> 00:05:05,049
malicious security and this is a the the

107
00:05:03,100 --> 00:05:12,970
question that we solve and our answer is

108
00:05:05,050 --> 00:05:16,240
yes ok so we do so by proving main

109
00:05:12,970 --> 00:05:19,030
theorem that we see as our main result

110
00:05:16,240 --> 00:05:23,020
so we call this the master theorem and

111
00:05:19,030 --> 00:05:25,690
it says the following so if we have a

112
00:05:23,020 --> 00:05:27,789
protocol that computes F we can use it

113
00:05:25,690 --> 00:05:31,750
in order to define a non-interactive

114
00:05:27,790 --> 00:05:35,880
reduction from F to a function of degree

115
00:05:31,750 --> 00:05:38,890
2 so what is nice about this master is

116
00:05:35,880 --> 00:05:41,320
it's not sensitive to the to the

117
00:05:38,890 --> 00:05:43,090
security setting so it preserves the

118
00:05:41,320 --> 00:05:47,050
security guarantee that will help from

119
00:05:43,090 --> 00:05:49,000
the protocol that we started from and

120
00:05:47,050 --> 00:05:51,190
the the price that you have to pay for

121
00:05:49,000 --> 00:05:53,500
that is that the the complexity grows

122
00:05:51,190 --> 00:05:57,580
exponentially with the depth of the

123
00:05:53,500 --> 00:06:01,720
protocol that we started from now you

124
00:05:57,580 --> 00:06:03,490
can plug in many protocols and try the

125
00:06:01,720 --> 00:06:08,669
master theorem on them and then as a

126
00:06:03,490 --> 00:06:10,750
corollary you get reductions so we get

127
00:06:08,669 --> 00:06:14,049
completeness theorem that says that

128
00:06:10,750 --> 00:06:16,840
every function is maliciously reducible

129
00:06:14,050 --> 00:06:18,430
to a degree two function and we can get

130
00:06:16,840 --> 00:06:21,460
it either in the information theoretic

131
00:06:18,430 --> 00:06:23,880
setting or in the computational setting

132
00:06:21,460 --> 00:06:26,560
and if we do so in their constitutional

133
00:06:23,880 --> 00:06:32,310
setting then we can save the the

134
00:06:26,560 --> 00:06:34,650
exponential growth okay so now

135
00:06:32,310 --> 00:06:36,990
finally after having this reduction we

136
00:06:34,650 --> 00:06:39,179
can use various protocol to implement

137
00:06:36,990 --> 00:06:42,150
the degree to function and then we end

138
00:06:39,180 --> 00:06:44,700
up with explicit protocols and some of

139
00:06:42,150 --> 00:06:48,620
them improve known results so in the

140
00:06:44,700 --> 00:06:51,450
last slide I will give concrete examples

141
00:06:48,620 --> 00:06:54,150
okay so now I'm gonna give the truth

142
00:06:51,450 --> 00:07:00,680
layout of the master theorem which is

143
00:06:54,150 --> 00:07:03,179
the main technical part so as I said

144
00:07:00,680 --> 00:07:05,150
most words that show a reduction to

145
00:07:03,180 --> 00:07:07,560
degree 3 is something that is called

146
00:07:05,150 --> 00:07:10,109
randomized encoding so they showed that

147
00:07:07,560 --> 00:07:11,910
if you have a function f you can compute

148
00:07:10,110 --> 00:07:15,930
an encoding of it and the encoding will

149
00:07:11,910 --> 00:07:17,970
be of degree 3 and our idea is instead

150
00:07:15,930 --> 00:07:20,700
of computing and coding on a function

151
00:07:17,970 --> 00:07:23,010
then we first look at a protocol that

152
00:07:20,700 --> 00:07:24,719
computes this function and then we

153
00:07:23,010 --> 00:07:26,880
compute something that is not exactly

154
00:07:24,720 --> 00:07:29,070
randomized encoding but it's inspired by

155
00:07:26,880 --> 00:07:31,340
it but because we know that now our

156
00:07:29,070 --> 00:07:33,990
input is not an arbitrary function but

157
00:07:31,340 --> 00:07:36,450
description of a protocol that we can

158
00:07:33,990 --> 00:07:38,910
exploit it or benefit and and and define

159
00:07:36,450 --> 00:07:41,280
the encoding in such a way that now it

160
00:07:38,910 --> 00:07:43,200
is of degree 2 instead of degree 3 and

161
00:07:41,280 --> 00:07:46,229
also that the reduction has they're

162
00:07:43,200 --> 00:07:49,650
exactly the same security guarantees of

163
00:07:46,230 --> 00:07:51,840
the protocol that we started from and I

164
00:07:49,650 --> 00:07:54,270
want to mention that the idea to start

165
00:07:51,840 --> 00:07:56,210
with the protocol and reduce its number

166
00:07:54,270 --> 00:07:58,950
of rounds is inspired by the works from

167
00:07:56,210 --> 00:08:02,810
last year approved by a band for

168
00:07:58,950 --> 00:08:09,599
modeling and they go against Universal

169
00:08:02,810 --> 00:08:13,020
ok so now the question is how how will

170
00:08:09,600 --> 00:08:14,760
we define this encoding in such a way

171
00:08:13,020 --> 00:08:18,270
that we can get degree 2 instead of

172
00:08:14,760 --> 00:08:21,210
degree 3 so the first step would be to

173
00:08:18,270 --> 00:08:24,060
take the protocol that we start and

174
00:08:21,210 --> 00:08:27,060
describe it is one large circuit so

175
00:08:24,060 --> 00:08:29,520
every local computation that each of the

176
00:08:27,060 --> 00:08:32,150
parties do can can be described by some

177
00:08:29,520 --> 00:08:35,579
secrets and then we glue them together

178
00:08:32,150 --> 00:08:37,588
and I will in a minute show how and we

179
00:08:35,580 --> 00:08:39,030
get one large circuits to describe the

180
00:08:37,589 --> 00:08:42,300
entire computation that should be done

181
00:08:39,030 --> 00:08:44,640
by all parties in the protocol so we do

182
00:08:42,299 --> 00:08:46,050
so by defining two types of gates or

183
00:08:44,640 --> 00:08:48,209
local gates

184
00:08:46,050 --> 00:08:50,939
correspond to local computations and

185
00:08:48,209 --> 00:08:53,819
then there are transmission gates that

186
00:08:50,940 --> 00:08:58,680
correspond to communication between the

187
00:08:53,820 --> 00:09:01,649
parties so by defining this structure we

188
00:08:58,680 --> 00:09:03,750
can then associate everyone with one of

189
00:09:01,649 --> 00:09:07,230
the parties so for local computation

190
00:09:03,750 --> 00:09:08,459
gates we associate off the wires with

191
00:09:07,230 --> 00:09:10,500
the party that should perform this

192
00:09:08,459 --> 00:09:13,979
computation and winter swishing gates

193
00:09:10,500 --> 00:09:15,959
the input wire is belongs to the party

194
00:09:13,980 --> 00:09:19,200
the sends the message and the output

195
00:09:15,959 --> 00:09:25,319
wires belongs to the receivers of the

196
00:09:19,200 --> 00:09:27,329
message and now the idea that we had the

197
00:09:25,320 --> 00:09:31,910
the work that showed security and the

198
00:09:27,329 --> 00:09:35,939
semi on the setting was that because now

199
00:09:31,910 --> 00:09:38,850
every gate has the property that all of

200
00:09:35,940 --> 00:09:41,640
its input wires are always associated

201
00:09:38,850 --> 00:09:44,370
with a single party then we can let that

202
00:09:41,640 --> 00:09:47,040
specific party perform some local tree

203
00:09:44,370 --> 00:09:49,380
processing and in that way we save one

204
00:09:47,040 --> 00:09:55,740
degree so then we and we ended up with

205
00:09:49,380 --> 00:09:58,589
degree two instead of degree one and now

206
00:09:55,740 --> 00:10:00,120
the problem that we had to face in this

207
00:09:58,589 --> 00:10:02,670
work in order to generalize it to the

208
00:10:00,120 --> 00:10:04,649
malicious security is how to handle at

209
00:10:02,670 --> 00:10:07,560
parties that hit in the in the

210
00:10:04,649 --> 00:10:09,810
pre-processing so a priori it's not even

211
00:10:07,560 --> 00:10:11,969
clear that when they don't do the

212
00:10:09,810 --> 00:10:14,399
pre-processing honestly they even end up

213
00:10:11,970 --> 00:10:17,760
with something that looks like some sort

214
00:10:14,399 --> 00:10:21,600
of randomized encoding but what we deal

215
00:10:17,760 --> 00:10:25,140
in this works to slightly changed the

216
00:10:21,600 --> 00:10:29,490
way the encoding is defined in such a

217
00:10:25,140 --> 00:10:31,319
way that no matter which malicious

218
00:10:29,490 --> 00:10:35,270
strategy they choose for the

219
00:10:31,320 --> 00:10:37,800
pre-processing it ends up looking like

220
00:10:35,270 --> 00:10:39,779
changing the local computation that was

221
00:10:37,800 --> 00:10:47,089
supposed to be done in that specific

222
00:10:39,779 --> 00:10:50,490
gate so in that way even if a party

223
00:10:47,089 --> 00:10:52,560
sends any arbitrary value instead of

224
00:10:50,490 --> 00:10:55,470
performing the pre-processing we can

225
00:10:52,560 --> 00:10:57,089
translate it to a malicious strategy in

226
00:10:55,470 --> 00:10:59,880
the protocol that we started from

227
00:10:57,089 --> 00:11:02,430
so we preserve the security guarantee

228
00:10:59,880 --> 00:11:09,810
of the of the protocol that we started

229
00:11:02,430 --> 00:11:16,019
from okay

230
00:11:09,810 --> 00:11:19,018
so to summarize the results we have the

231
00:11:16,019 --> 00:11:24,029
completeness theorem which we derive by

232
00:11:19,019 --> 00:11:27,120
plugging in protocols so first of all we

233
00:11:24,029 --> 00:11:32,730
get perfect security for threshold and

234
00:11:27,120 --> 00:11:35,910
over three four functions in NC one and

235
00:11:32,730 --> 00:11:37,889
we can get a sophistical security if we

236
00:11:35,910 --> 00:11:40,170
want security in there honest majority

237
00:11:37,889 --> 00:11:41,639
setting and if we want to support any

238
00:11:40,170 --> 00:11:44,579
function in P then we have a

239
00:11:41,639 --> 00:11:47,930
computational solution assuming blackbox

240
00:11:44,579 --> 00:11:55,430
one-way function for any honest majority

241
00:11:47,930 --> 00:11:57,779
and now we can use many different

242
00:11:55,430 --> 00:12:00,839
protocols to implement the degree to

243
00:11:57,779 --> 00:12:03,660
function but we give her we given the in

244
00:12:00,839 --> 00:12:07,199
the paper a few examples and we derive

245
00:12:03,660 --> 00:12:11,959
the following results so as I said in

246
00:12:07,199 --> 00:12:14,699
the work from TCC we have a semi honest

247
00:12:11,959 --> 00:12:19,589
protocol from any honest majority in two

248
00:12:14,699 --> 00:12:21,839
rounds and now in this work we have a

249
00:12:19,589 --> 00:12:24,300
protocol with malicious security with

250
00:12:21,839 --> 00:12:26,160
selective awards and the improvement

251
00:12:24,300 --> 00:12:27,990
here is now this is for any honest

252
00:12:26,160 --> 00:12:30,240
majority and there is a similar result

253
00:12:27,990 --> 00:12:35,130
in the work by unanswered all that you

254
00:12:30,240 --> 00:12:39,050
will hear about in the next talk and our

255
00:12:35,130 --> 00:12:43,529
next new contribution is the is in the

256
00:12:39,050 --> 00:12:46,109
guaranteed output delivery model so that

257
00:12:43,529 --> 00:12:48,930
we also improved the threshold to n over

258
00:12:46,110 --> 00:12:52,620
4 and we get the number of rounds to be

259
00:12:48,930 --> 00:12:55,949
3 which is optimal so for NC 1 we have

260
00:12:52,620 --> 00:12:57,810
perfect security and if we want

261
00:12:55,949 --> 00:13:02,758
polynomial functions we can do so

262
00:12:57,810 --> 00:13:04,060
assuming one with factions so yeah

263
00:13:02,759 --> 00:13:12,830
that's it

264
00:13:04,060 --> 00:13:12,829
[Applause]

