1
00:00:01,610 --> 00:00:06,230
we the slides will hold together enough

2
00:00:03,770 --> 00:00:08,270
for me to actually give this talk thank

3
00:00:06,230 --> 00:00:10,790
you for the introduction as said I'm

4
00:00:08,270 --> 00:00:13,009
Ariel Hamlin and today I will be

5
00:00:10,790 --> 00:00:15,259
presenting our work on private anonymous

6
00:00:13,009 --> 00:00:18,170
data access this is a joint work with

7
00:00:15,259 --> 00:00:21,500
Raphael Ostrovsky more Weiss and Daniel

8
00:00:18,170 --> 00:00:23,300
Wix so without further ado let's

9
00:00:21,500 --> 00:00:25,880
consider a setting where we have a

10
00:00:23,300 --> 00:00:28,279
server a single server storing some

11
00:00:25,880 --> 00:00:30,769
database in this case a medical database

12
00:00:28,279 --> 00:00:33,680
and we have a set of clients who want to

13
00:00:30,769 --> 00:00:36,110
make queries into this database to get

14
00:00:33,680 --> 00:00:38,180
information about flu symptoms

15
00:00:36,110 --> 00:00:40,370
especially given the flu symptoms we've

16
00:00:38,180 --> 00:00:43,130
had or flu season we've had here in the

17
00:00:40,370 --> 00:00:44,510
States you might have someone who is

18
00:00:43,130 --> 00:00:48,160
concerned about their headache or

19
00:00:44,510 --> 00:00:51,260
headache causes but for other clients

20
00:00:48,160 --> 00:00:54,919
they may be concerned about sort of

21
00:00:51,260 --> 00:00:56,870
their queries and their identities being

22
00:00:54,920 --> 00:01:01,190
linked to those queries so in this

23
00:00:56,870 --> 00:01:03,919
setting they want maybe both privacy for

24
00:01:01,190 --> 00:01:06,500
those queries and anonymity for their

25
00:01:03,920 --> 00:01:08,990
identity so this is the setting that we

26
00:01:06,500 --> 00:01:12,500
consider within panda essentially a

27
00:01:08,990 --> 00:01:15,020
single server with multiple clients and

28
00:01:12,500 --> 00:01:18,320
we want to be able to provide privacy

29
00:01:15,020 --> 00:01:25,880
and anonymity for the clients asking

30
00:01:18,320 --> 00:01:28,490
queries so as with all works we have an

31
00:01:25,880 --> 00:01:30,920
acronym namely private anonymous data

32
00:01:28,490 --> 00:01:32,960
access or as we like to call it panda

33
00:01:30,920 --> 00:01:35,480
because who doesn't like cute adorable

34
00:01:32,960 --> 00:01:37,250
fuzzy creatures so for the rest of the

35
00:01:35,480 --> 00:01:41,000
talk I'll be referring to our system as

36
00:01:37,250 --> 00:01:43,850
panda so without further ado what does

37
00:01:41,000 --> 00:01:47,170
panda actually consist of we have a

38
00:01:43,850 --> 00:01:50,419
setup for a protocol that takes in

39
00:01:47,170 --> 00:01:54,440
database and generates for each of our

40
00:01:50,420 --> 00:01:57,020
clients essentially a unique client key

41
00:01:54,440 --> 00:01:59,479
and gives the server and encoded

42
00:01:57,020 --> 00:02:02,960
database so in this case both the client

43
00:01:59,479 --> 00:02:05,240
and the server is our stateful we also

44
00:02:02,960 --> 00:02:08,149
support writing or sorry

45
00:02:05,240 --> 00:02:09,740
reading so a client may have a value

46
00:02:08,149 --> 00:02:12,260
that they want to read within the

47
00:02:09,740 --> 00:02:15,450
particular database using their client

48
00:02:12,260 --> 00:02:17,280
key they interact with the server and

49
00:02:15,450 --> 00:02:23,429
get the value back at that particular

50
00:02:17,280 --> 00:02:25,860
database location we also do support

51
00:02:23,430 --> 00:02:28,980
rights in panda but in this talk I will

52
00:02:25,860 --> 00:02:32,099
be talking primarily about our read-only

53
00:02:28,980 --> 00:02:34,679
Panda scheme if you're interested in

54
00:02:32,099 --> 00:02:36,420
rights we do present the sort of

55
00:02:34,680 --> 00:02:38,670
high-level work but I would encourage

56
00:02:36,420 --> 00:02:43,950
you to refer to the paper or track me

57
00:02:38,670 --> 00:02:45,629
down after this session so now that we

58
00:02:43,950 --> 00:02:48,089
sort of established the syntax let's

59
00:02:45,629 --> 00:02:51,120
talk about what we want sort of in the

60
00:02:48,090 --> 00:02:53,760
setting in this definition as I

61
00:02:51,120 --> 00:02:56,280
mentioned in our motivating example we

62
00:02:53,760 --> 00:02:59,880
want security against a server who may

63
00:02:56,280 --> 00:03:01,829
be trying to learn clients queries and

64
00:02:59,880 --> 00:03:04,079
their identities namely what we want

65
00:03:01,829 --> 00:03:06,900
privacy of access patterns against the

66
00:03:04,079 --> 00:03:09,030
server and we want anonymity of the

67
00:03:06,900 --> 00:03:11,670
clients identities meaning the server

68
00:03:09,030 --> 00:03:14,880
cannot cross correlate clients

69
00:03:11,670 --> 00:03:17,069
identities between different queries we

70
00:03:14,880 --> 00:03:18,810
want this not only against a server who

71
00:03:17,069 --> 00:03:20,819
might be observing these actions and

72
00:03:18,810 --> 00:03:22,950
interactions with the clients but also

73
00:03:20,819 --> 00:03:27,660
with a server who is allowed to collude

74
00:03:22,950 --> 00:03:30,480
with some number of clients and gain

75
00:03:27,660 --> 00:03:33,840
access to both their sort of actions and

76
00:03:30,480 --> 00:03:36,540
their secret key and we set at setup

77
00:03:33,840 --> 00:03:38,430
time an i priori bound on the number of

78
00:03:36,540 --> 00:03:40,769
clients that the server may collude with

79
00:03:38,430 --> 00:03:44,010
and we call this number T as our

80
00:03:40,769 --> 00:03:46,470
collusion that we also want a single

81
00:03:44,010 --> 00:03:48,090
server scheme so not necessarily

82
00:03:46,470 --> 00:03:50,819
something that relies on multiple

83
00:03:48,090 --> 00:03:53,310
servers especially not servers that

84
00:03:50,819 --> 00:03:55,920
don't collude and finally we want

85
00:03:53,310 --> 00:03:58,590
efficiency goals namely we want the

86
00:03:55,920 --> 00:04:00,660
client and server read or write if we're

87
00:03:58,590 --> 00:04:03,060
talking about it complexity to be

88
00:04:00,660 --> 00:04:05,940
sublinear in this collusion threshold T

89
00:04:03,060 --> 00:04:09,720
or sorry in the number of clients and

90
00:04:05,940 --> 00:04:12,599
and the database size and we want it to

91
00:04:09,720 --> 00:04:14,760
be linear in the collusion threshold so

92
00:04:12,599 --> 00:04:18,630
it's this combination of privacy and

93
00:04:14,760 --> 00:04:20,700
anonymity for with bounded collusion and

94
00:04:18,630 --> 00:04:24,060
these certain efficiency goals that we

95
00:04:20,700 --> 00:04:26,460
call the panda setting so without

96
00:04:24,060 --> 00:04:28,260
further ado this may sound fairly

97
00:04:26,460 --> 00:04:29,128
similar to some of the primitives that

98
00:04:28,260 --> 00:04:31,259
have come

99
00:04:29,129 --> 00:04:35,099
for me in this session namely oblivious

100
00:04:31,259 --> 00:04:36,869
RAM and another primitive called private

101
00:04:35,099 --> 00:04:38,669
information retrieval so I want to spend

102
00:04:36,869 --> 00:04:40,589
the next part of the talk sort of

103
00:04:38,669 --> 00:04:44,099
comparing and contrasting the Panda

104
00:04:40,589 --> 00:04:46,289
setting and whether Oh RAM and Pierre

105
00:04:44,099 --> 00:04:50,279
are things that actually work to solve

106
00:04:46,289 --> 00:04:53,938
our problem spoilers they don't so I

107
00:04:50,279 --> 00:04:56,879
think previous talked an excellent job

108
00:04:53,939 --> 00:04:59,189
motivating and explaining Oh Ram so at a

109
00:04:56,879 --> 00:05:01,800
high level we have our single server we

110
00:04:59,189 --> 00:05:05,069
have a single client who wants to make

111
00:05:01,800 --> 00:05:06,959
access paths or queries into a database

112
00:05:05,069 --> 00:05:10,309
that the server storing well hiding

113
00:05:06,959 --> 00:05:13,259
their access patterns Oh Ram itself

114
00:05:10,309 --> 00:05:15,719
there's a huge asterisks on this know up

115
00:05:13,259 --> 00:05:17,249
here but is not inherently multi-client

116
00:05:15,719 --> 00:05:18,779
there are schemes that attempt to

117
00:05:17,249 --> 00:05:21,839
support it but most of the common

118
00:05:18,779 --> 00:05:25,019
schemes do not run time is going to be

119
00:05:21,839 --> 00:05:27,689
poly log in the database size and we

120
00:05:25,019 --> 00:05:31,050
have setup assumed and the server has

121
00:05:27,689 --> 00:05:34,110
states and we're able to build a ram

122
00:05:31,050 --> 00:05:35,999
essentially from one way functions we

123
00:05:34,110 --> 00:05:38,219
also have a primitive called private

124
00:05:35,999 --> 00:05:39,959
information retrieval we're talking here

125
00:05:38,219 --> 00:05:43,050
about the single server pure

126
00:05:39,959 --> 00:05:44,999
constructions and in this again when you

127
00:05:43,050 --> 00:05:46,999
have a single server and multiple

128
00:05:44,999 --> 00:05:50,610
clients who want to be able to make

129
00:05:46,999 --> 00:05:55,679
queries and hide their sort of access

130
00:05:50,610 --> 00:05:58,289
patterns unlike a Ram peer is inherently

131
00:05:55,679 --> 00:06:01,138
multi-client namely the client does not

132
00:05:58,289 --> 00:06:03,509
need a secret queue to make a query so

133
00:06:01,139 --> 00:06:06,719
anyone can come along and sort of query

134
00:06:03,509 --> 00:06:10,279
and is not needed to be defined at setup

135
00:06:06,719 --> 00:06:13,879
time unfortunately this requires linear

136
00:06:10,279 --> 00:06:17,279
server-side work for any read accesses

137
00:06:13,879 --> 00:06:21,589
and we're able to get peer from public

138
00:06:17,279 --> 00:06:24,869
key crypto so how we compare with panda

139
00:06:21,589 --> 00:06:28,649
particularly a ram we are able to get

140
00:06:24,869 --> 00:06:32,009
multi client and unlike peer were able

141
00:06:28,649 --> 00:06:35,189
to achieve poly log performance in terms

142
00:06:32,009 --> 00:06:37,949
of our database size we do allow for

143
00:06:35,189 --> 00:06:42,139
setup and sort of States and we're able

144
00:06:37,949 --> 00:06:44,060
to construct panda schemes from fhe

145
00:06:42,139 --> 00:06:45,710
so these are common primitives that you

146
00:06:44,060 --> 00:06:47,330
might compare panda against but there's

147
00:06:45,710 --> 00:06:49,789
actually a third one that I want to talk

148
00:06:47,330 --> 00:06:52,669
about a little bit and that's deadly

149
00:06:49,790 --> 00:06:55,130
efficient pure or deep here this was

150
00:06:52,669 --> 00:06:57,919
first introduced by the malla doll in

151
00:06:55,130 --> 00:06:59,810
2000 as a multi server scheme and

152
00:06:57,919 --> 00:07:02,180
basically what it does is deep here

153
00:06:59,810 --> 00:07:04,520
allows for pre-processing unlike typical

154
00:07:02,180 --> 00:07:07,010
pure and what you get as a trade-off

155
00:07:04,520 --> 00:07:09,859
there is that you can now achieve a poly

156
00:07:07,010 --> 00:07:13,639
log runtime for server access complexity

157
00:07:09,860 --> 00:07:15,080
during reads and essentially what I want

158
00:07:13,639 --> 00:07:17,540
to compare against is the more recent

159
00:07:15,080 --> 00:07:21,050
work by caneta at all and boil at all in

160
00:07:17,540 --> 00:07:23,570
2017 that reduces the multi server DPR

161
00:07:21,050 --> 00:07:27,800
down to a single server and namely their

162
00:07:23,570 --> 00:07:30,919
public key deeper variants as with pure

163
00:07:27,800 --> 00:07:33,410
we have a single server and sort of any

164
00:07:30,919 --> 00:07:36,020
person can come along and make queries

165
00:07:33,410 --> 00:07:40,490
against this sort of database the server

166
00:07:36,020 --> 00:07:44,330
is storing we are as I said able to get

167
00:07:40,490 --> 00:07:46,160
multi-client poly log runtime we allow

168
00:07:44,330 --> 00:07:47,930
for setup and state or pure with

169
00:07:46,160 --> 00:07:50,720
pre-processing is it's also called

170
00:07:47,930 --> 00:07:53,510
however in order to achieve this we

171
00:07:50,720 --> 00:07:55,640
require or it requires new coding

172
00:07:53,510 --> 00:07:56,419
assumptions and virtual black box off

173
00:07:55,640 --> 00:07:58,520
you station

174
00:07:56,419 --> 00:08:01,640
so public key deep here does in fact

175
00:07:58,520 --> 00:08:04,490
solve our penned a problem but it does

176
00:08:01,640 --> 00:08:06,440
so with some fairly heavy assumptions or

177
00:08:04,490 --> 00:08:08,300
you know heavy-duty tools and we were

178
00:08:06,440 --> 00:08:10,969
wondering is it possible to get a

179
00:08:08,300 --> 00:08:15,680
construction that relies on sort of less

180
00:08:10,970 --> 00:08:17,450
onerous assumptions and yes because my

181
00:08:15,680 --> 00:08:20,330
talk isn't ending and I have 14 more

182
00:08:17,450 --> 00:08:22,310
minutes to talk at you guys so without

183
00:08:20,330 --> 00:08:25,190
further ado I want to go into our

184
00:08:22,310 --> 00:08:27,800
results so we're able to achieve a

185
00:08:25,190 --> 00:08:32,179
read-only Panda scheme relying only on

186
00:08:27,800 --> 00:08:35,089
fhe with TR collusion bound poly log L

187
00:08:32,179 --> 00:08:38,329
our database size client read complexity

188
00:08:35,089 --> 00:08:40,820
we also support two variants of panda

189
00:08:38,330 --> 00:08:42,440
that supports writes we have a public

190
00:08:40,820 --> 00:08:44,240
rights panda where we essentially have a

191
00:08:42,440 --> 00:08:46,700
public database that everyone writes to

192
00:08:44,240 --> 00:08:47,870
and we have a secret rights panda where

193
00:08:46,700 --> 00:08:51,200
everyone essentially has their own

194
00:08:47,870 --> 00:08:53,030
personal database I want to spend most

195
00:08:51,200 --> 00:08:55,550
of the rest of the talk talking about

196
00:08:53,030 --> 00:08:59,660
how we construct our read

197
00:08:55,550 --> 00:09:01,900
panda ski so without further ado our

198
00:08:59,660 --> 00:09:04,400
main starting idea here is the original

199
00:09:01,900 --> 00:09:07,850
multi-server de pere scheme introduced

200
00:09:04,400 --> 00:09:10,520
by bemol and in this scheme we have

201
00:09:07,850 --> 00:09:15,170
multiple servers and in fact we have que

202
00:09:10,520 --> 00:09:19,490
servers and sort of they're all involved

203
00:09:15,170 --> 00:09:21,589
and for setup we have essentially

204
00:09:19,490 --> 00:09:25,190
trusted setup that takes in a database

205
00:09:21,590 --> 00:09:27,650
and outputs and encoded database and it

206
00:09:25,190 --> 00:09:30,380
gives essentially this encoded database

207
00:09:27,650 --> 00:09:32,300
to each of the K servers it is the same

208
00:09:30,380 --> 00:09:33,980
copy there is no difference between the

209
00:09:32,300 --> 00:09:36,500
databases that each of these servers

210
00:09:33,980 --> 00:09:38,780
gets when someone wants to come along

211
00:09:36,500 --> 00:09:43,070
and make a query what they do is

212
00:09:38,780 --> 00:09:45,709
essentially send out K unique indices

213
00:09:43,070 --> 00:09:48,170
into this encoded database for codeword

214
00:09:45,710 --> 00:09:50,420
symbols that they want to read the

215
00:09:48,170 --> 00:09:52,240
servers then go ahead and return the

216
00:09:50,420 --> 00:09:54,890
codeword symbols at that particular

217
00:09:52,240 --> 00:09:57,380
location and the client is able to

218
00:09:54,890 --> 00:09:58,819
decode them and get the message symbol

219
00:09:57,380 --> 00:10:02,270
that it wanted to read at that

220
00:09:58,820 --> 00:10:04,370
particular address in the database we

221
00:10:02,270 --> 00:10:07,939
say for correctness that the client must

222
00:10:04,370 --> 00:10:10,880
issue these K queries to the server and

223
00:10:07,940 --> 00:10:13,580
we say that privacy holds in essentially

224
00:10:10,880 --> 00:10:17,450
multi server deep here if less than s of

225
00:10:13,580 --> 00:10:20,420
the server s of the servers collude and

226
00:10:17,450 --> 00:10:22,490
in that case when they have less than s

227
00:10:20,420 --> 00:10:24,560
indices that they're comparing these

228
00:10:22,490 --> 00:10:27,080
indices appear to be uniformly

229
00:10:24,560 --> 00:10:29,329
distributed so that's what when I say

230
00:10:27,080 --> 00:10:31,880
multi server deep here privacy further

231
00:10:29,330 --> 00:10:34,250
in the talk is what I'm alluding to so

232
00:10:31,880 --> 00:10:35,810
obviously if you'll remember we had a

233
00:10:34,250 --> 00:10:38,390
sort of a list of requirements that we

234
00:10:35,810 --> 00:10:40,969
wanted for for panda one of them which

235
00:10:38,390 --> 00:10:42,980
is we wanted to use only a single server

236
00:10:40,970 --> 00:10:45,590
so how do we move essentially a single

237
00:10:42,980 --> 00:10:48,380
server scheme or a multi server scheme

238
00:10:45,590 --> 00:10:51,020
to a single server and we do this by

239
00:10:48,380 --> 00:10:54,020
essentially having one server emulate

240
00:10:51,020 --> 00:10:58,250
all of our K servers as virtual machines

241
00:10:54,020 --> 00:11:00,550
or virtual servers now we're down to a

242
00:10:58,250 --> 00:11:03,650
single server but obviously in this case

243
00:11:00,550 --> 00:11:05,329
privacy is not preserved as the single

244
00:11:03,650 --> 00:11:07,400
machine is emulating all of these

245
00:11:05,330 --> 00:11:08,160
virtual servers it gets to see the

246
00:11:07,400 --> 00:11:11,639
access

247
00:11:08,160 --> 00:11:14,399
turns into these encoded database so

248
00:11:11,639 --> 00:11:18,000
when we're considering access patterns

249
00:11:14,399 --> 00:11:19,620
and the sort of wanting to hide them the

250
00:11:18,000 --> 00:11:21,810
primitive that jumps to mind that we

251
00:11:19,620 --> 00:11:25,589
want to use this might be something like

252
00:11:21,810 --> 00:11:28,160
oblivious RAM or Oh Ram and so what if

253
00:11:25,589 --> 00:11:30,660
we did instead of essentially encoding

254
00:11:28,160 --> 00:11:32,639
the same copy and sort of handing this

255
00:11:30,660 --> 00:11:34,709
out to all of our virtual servers before

256
00:11:32,639 --> 00:11:39,060
we did that we essentially put these in

257
00:11:34,709 --> 00:11:41,310
coded databases into K unique a Rams and

258
00:11:39,060 --> 00:11:44,069
each of these o Rams now would have

259
00:11:41,310 --> 00:11:46,349
their own secret key the question is now

260
00:11:44,069 --> 00:11:47,819
how do we query these our M's when a

261
00:11:46,350 --> 00:11:50,459
client wants to come along and make

262
00:11:47,819 --> 00:11:53,370
their sort of K accesses to these

263
00:11:50,459 --> 00:11:55,500
virtual servers so we now have to give

264
00:11:53,370 --> 00:12:00,149
each of the clients essentially all of

265
00:11:55,500 --> 00:12:02,250
the Oh RAM secret keys so this would

266
00:12:00,149 --> 00:12:04,470
seem to work except if we remember that

267
00:12:02,250 --> 00:12:07,259
panda allows for collusion between

268
00:12:04,470 --> 00:12:09,839
clients and servers so as soon as this

269
00:12:07,259 --> 00:12:12,209
collusion happens the server gets access

270
00:12:09,839 --> 00:12:14,430
to the client secret keys which is all

271
00:12:12,209 --> 00:12:17,579
of them and any notion of privacy

272
00:12:14,430 --> 00:12:19,199
provided by this Oh Ram is now lost so I

273
00:12:17,579 --> 00:12:19,709
even put it in a no Ram in the first

274
00:12:19,199 --> 00:12:22,589
place

275
00:12:19,709 --> 00:12:25,290
so we need to now essentially have that

276
00:12:22,589 --> 00:12:28,649
each client has some unique or unique

277
00:12:25,290 --> 00:12:30,660
secret state that is not shared with all

278
00:12:28,649 --> 00:12:32,790
of the other clients so when collusion

279
00:12:30,660 --> 00:12:38,189
happens we still have some notion of

280
00:12:32,790 --> 00:12:42,029
secrecy so what we do here is to

281
00:12:38,189 --> 00:12:44,009
introduce the idea of committees so what

282
00:12:42,029 --> 00:12:46,560
instead of getting all of the secret

283
00:12:44,009 --> 00:12:49,560
keys for the sort of a Rams instead

284
00:12:46,560 --> 00:12:52,859
clients get the keys for virtual servers

285
00:12:49,560 --> 00:12:55,949
on their assigned committee and this is

286
00:12:52,860 --> 00:12:59,819
don''t setup and they essentially get

287
00:12:55,949 --> 00:13:02,670
assigned some subset of the servers k of

288
00:12:59,819 --> 00:13:04,860
them essentially that they can now make

289
00:13:02,670 --> 00:13:07,410
their queries - so in this case in this

290
00:13:04,860 --> 00:13:11,430
example client one gets access to the

291
00:13:07,410 --> 00:13:14,250
first and case virtual server client

292
00:13:11,430 --> 00:13:17,699
number two is going to be given access

293
00:13:14,250 --> 00:13:22,240
to the first and the second virtual

294
00:13:17,699 --> 00:13:24,130
server so on and so forth as you'll note

295
00:13:22,240 --> 00:13:26,410
we actually have to use more than K

296
00:13:24,130 --> 00:13:29,470
virtual servers in this case because we

297
00:13:26,410 --> 00:13:33,279
do want some additional servers so we

298
00:13:29,470 --> 00:13:34,930
don't have sort of entire overlap on all

299
00:13:33,279 --> 00:13:36,760
of our virtual committees because we

300
00:13:34,930 --> 00:13:40,750
want those committees to be unique for

301
00:13:36,760 --> 00:13:44,050
each client so what happens now when

302
00:13:40,750 --> 00:13:45,790
collusion happens the server only gets

303
00:13:44,050 --> 00:13:48,819
the keys for the committee of the

304
00:13:45,790 --> 00:13:51,849
cluding clients which means that it only

305
00:13:48,820 --> 00:13:55,029
gets to see some accesses in plaintext

306
00:13:51,850 --> 00:13:57,160
only for those where there is an overlap

307
00:13:55,029 --> 00:14:00,339
between your committee and occluding

308
00:13:57,160 --> 00:14:03,579
clients committee so essentially we can

309
00:14:00,339 --> 00:14:04,990
say that the server because the overlap

310
00:14:03,580 --> 00:14:07,420
between your committee and the cluding

311
00:14:04,990 --> 00:14:10,270
client committees is going to be less

312
00:14:07,420 --> 00:14:12,400
than s based on how these committees are

313
00:14:10,270 --> 00:14:15,370
generated we can say that the multi

314
00:14:12,400 --> 00:14:18,000
server dear privacy still holds because

315
00:14:15,370 --> 00:14:20,170
the server only sees less than s

316
00:14:18,000 --> 00:14:22,630
accesses essentially in the plaintext

317
00:14:20,170 --> 00:14:25,990
the rest of the access patterns are now

318
00:14:22,630 --> 00:14:28,870
going to be hidden by oh Ram so privacy

319
00:14:25,990 --> 00:14:32,140
holds so we have single server we have

320
00:14:28,870 --> 00:14:35,339
privacy but if we remember in panda we

321
00:14:32,140 --> 00:14:37,870
also want anonymity for clients but now

322
00:14:35,339 --> 00:14:40,990
clients essentially have some unique

323
00:14:37,870 --> 00:14:43,990
information namely they have a unique

324
00:14:40,990 --> 00:14:46,930
committee associated with them so

325
00:14:43,990 --> 00:14:49,660
servers can tell quick sort of clients

326
00:14:46,930 --> 00:14:51,819
apart based on which virtual servers

327
00:14:49,660 --> 00:14:54,390
they access as they have been assigned

328
00:14:51,820 --> 00:14:58,120
to their committee so we lose anonymity

329
00:14:54,390 --> 00:15:00,699
so how can we fix this one could say

330
00:14:58,120 --> 00:15:03,610
well when we query the things on our

331
00:15:00,700 --> 00:15:05,620
committee we can simulate sort of random

332
00:15:03,610 --> 00:15:09,310
accesses into the Oh Rams that are not

333
00:15:05,620 --> 00:15:09,670
on our committee and the server excuse

334
00:15:09,310 --> 00:15:10,979
me

335
00:15:09,670 --> 00:15:13,660
won't be able to tell the difference

336
00:15:10,980 --> 00:15:15,400
however this comes down to the

337
00:15:13,660 --> 00:15:18,610
fundamental problem we don't actually

338
00:15:15,400 --> 00:15:20,920
know how to simulate these accesses into

339
00:15:18,610 --> 00:15:22,660
the ORM because you remember we don't

340
00:15:20,920 --> 00:15:24,880
actually have the secret keys for those

341
00:15:22,660 --> 00:15:27,969
grants and what's even worse our

342
00:15:24,880 --> 00:15:30,610
adversary the server might even in fact

343
00:15:27,970 --> 00:15:33,040
have the secret keys if it's colluding

344
00:15:30,610 --> 00:15:34,180
with a client that has that server on

345
00:15:33,040 --> 00:15:36,610
its committee

346
00:15:34,180 --> 00:15:39,250
so essentially what we need is this

347
00:15:36,610 --> 00:15:41,170
ability to make smart dummy accesses the

348
00:15:39,250 --> 00:15:43,990
ability to simulate a random access

349
00:15:41,170 --> 00:15:46,449
without the secret key and this seems a

350
00:15:43,990 --> 00:15:49,870
property that most AI Rams outside of

351
00:15:46,450 --> 00:15:53,170
trivial ones don't necessarily have so

352
00:15:49,870 --> 00:15:55,510
instead what we do is we try and get the

353
00:15:53,170 --> 00:15:57,729
next best thing we get a ram like

354
00:15:55,510 --> 00:16:01,330
behavior up to a certain number of

355
00:15:57,730 --> 00:16:03,610
queries and what we do to achieve this

356
00:16:01,330 --> 00:16:06,040
is introduced the idea of instead of

357
00:16:03,610 --> 00:16:10,240
dropping our encoded database into an

358
00:16:06,040 --> 00:16:13,260
OEM we instead simply permute it based

359
00:16:10,240 --> 00:16:18,100
on a pseudo-random permutation

360
00:16:13,260 --> 00:16:20,080
essentially so instead of each encoded

361
00:16:18,100 --> 00:16:22,060
database in these virtual servers being

362
00:16:20,080 --> 00:16:24,970
dropped in a no RAM instead it is

363
00:16:22,060 --> 00:16:27,520
uniquely permeated as defined by a

364
00:16:24,970 --> 00:16:30,660
permutation key and these keys are given

365
00:16:27,520 --> 00:16:34,750
to the clients and LU of the Oh RAM keys

366
00:16:30,660 --> 00:16:37,569
so when we want to make a query a client

367
00:16:34,750 --> 00:16:39,840
simply gets the index that it wants to

368
00:16:37,570 --> 00:16:42,460
query sort of in the unpermitted

369
00:16:39,840 --> 00:16:44,860
database it permits it according to its

370
00:16:42,460 --> 00:16:48,100
permutation key and ask those queries

371
00:16:44,860 --> 00:16:50,470
two things to the virtual servers on its

372
00:16:48,100 --> 00:16:53,500
committee for things that are not on its

373
00:16:50,470 --> 00:16:56,080
committee it simply asks for a random

374
00:16:53,500 --> 00:16:58,180
index in the encoded database because

375
00:16:56,080 --> 00:17:01,660
now it can simulate a totally random

376
00:16:58,180 --> 00:17:03,219
access and the server even if it has the

377
00:17:01,660 --> 00:17:06,369
key can't tell the difference between

378
00:17:03,220 --> 00:17:10,990
that or sort of an actual legitimate

379
00:17:06,369 --> 00:17:14,919
access so for things that are not on my

380
00:17:10,990 --> 00:17:15,790
committee I have sort of uniform queries

381
00:17:14,920 --> 00:17:18,160
by definition

382
00:17:15,790 --> 00:17:20,530
I'm just asking things randomly for

383
00:17:18,160 --> 00:17:23,820
things that are on my committee but the

384
00:17:20,530 --> 00:17:26,190
server doesn't have sort of access to it

385
00:17:23,819 --> 00:17:29,520
we say that for a certain number of

386
00:17:26,190 --> 00:17:33,520
bounded number of queries excuse me that

387
00:17:29,520 --> 00:17:35,620
essentially it gives an oem like hiding

388
00:17:33,520 --> 00:17:39,940
of access patterns thanks to a lemma

389
00:17:35,620 --> 00:17:42,100
from Kennedy atolls 2017 paper and for

390
00:17:39,940 --> 00:17:45,730
things that are on my committee and that

391
00:17:42,100 --> 00:17:47,590
the server does have the key for it is

392
00:17:45,730 --> 00:17:50,409
going to appear to be random

393
00:17:47,590 --> 00:17:52,870
based on the multi-server deep your

394
00:17:50,409 --> 00:17:56,230
privacy so we're kind of covered in all

395
00:17:52,870 --> 00:17:58,059
three of our cases so we're able to

396
00:17:56,230 --> 00:18:00,730
achieve essentially up to a certain

397
00:17:58,059 --> 00:18:04,210
number of queries and how do we move

398
00:18:00,730 --> 00:18:07,570
beyond this bount and this is where our

399
00:18:04,210 --> 00:18:12,520
reliance on fhe comes in essentially for

400
00:18:07,570 --> 00:18:14,559
every B reads where B's are bound the

401
00:18:12,520 --> 00:18:17,440
server is capable of regenerating the

402
00:18:14,559 --> 00:18:19,809
permutations on its own because instead

403
00:18:17,440 --> 00:18:23,830
of having them sort of specified by a

404
00:18:19,809 --> 00:18:28,539
sort of a pseudo-random permutation we

405
00:18:23,830 --> 00:18:30,460
have them defined by a PRF and this PRF

406
00:18:28,539 --> 00:18:31,690
key is essentially encrypted under FH

407
00:18:30,460 --> 00:18:35,669
fhe

408
00:18:31,690 --> 00:18:35,669
allowing the server to essentially

409
00:18:38,760 --> 00:18:48,070
evaluate the permutation on its own and

410
00:18:44,250 --> 00:18:50,350
refresh it for worst-case sufficiency I

411
00:18:48,070 --> 00:18:51,939
think that it's telling me that y'all

412
00:18:50,350 --> 00:18:56,230
are hungry for lunch and that I should

413
00:18:51,940 --> 00:18:58,000
hurry up but we can say that for

414
00:18:56,230 --> 00:19:00,610
efficiency we can amaura ties this

415
00:18:58,000 --> 00:19:02,649
action across our bounds or are

416
00:19:00,610 --> 00:19:06,070
essentially our epoch in order to obtain

417
00:19:02,649 --> 00:19:09,129
sort of reasonable worst-case efficiency

418
00:19:06,070 --> 00:19:15,129
so this is how we achieve unbounded read

419
00:19:09,130 --> 00:19:18,190
only panda we also have as I alluded to

420
00:19:15,130 --> 00:19:22,029
previously panda that supports writes

421
00:19:18,190 --> 00:19:24,399
namely a public rights panda with a

422
00:19:22,029 --> 00:19:26,529
public database where essentially rights

423
00:19:24,399 --> 00:19:28,840
are public so both their content and

424
00:19:26,529 --> 00:19:30,610
where you're writing it to but the

425
00:19:28,840 --> 00:19:33,340
identity of the writer is still hidden

426
00:19:30,610 --> 00:19:35,250
so we still have anonymity reads of

427
00:19:33,340 --> 00:19:38,678
course are still private and anonymous

428
00:19:35,250 --> 00:19:40,450
we also have a construction for secret

429
00:19:38,679 --> 00:19:43,360
rights panda where essentially each

430
00:19:40,450 --> 00:19:45,549
client has their own database that they

431
00:19:43,360 --> 00:19:48,279
can write to and in that database

432
00:19:45,549 --> 00:19:49,120
privacy and anonymity of rights is

433
00:19:48,279 --> 00:19:51,460
maintained

434
00:19:49,120 --> 00:19:53,830
obviously reads are also still private

435
00:19:51,460 --> 00:19:55,990
and an anonymous the cost of this

436
00:19:53,830 --> 00:19:57,189
however is that performance where we

437
00:19:55,990 --> 00:20:00,220
have database size

438
00:19:57,190 --> 00:20:00,990
namely L now scales with the total

439
00:20:00,220 --> 00:20:05,820
number of Rights

440
00:20:00,990 --> 00:20:10,520
across the entire system I that's not

441
00:20:05,820 --> 00:20:10,520
the end of my talk hello

442
00:20:12,559 --> 00:20:22,139
it really doesn't want me to show you

443
00:20:14,970 --> 00:20:25,500
guys performance numbers I'm almost at

444
00:20:22,140 --> 00:20:36,450
the end so I can finish up if we have to

445
00:20:25,500 --> 00:20:45,330
without I don't necessarily this one try

446
00:20:36,450 --> 00:20:52,190
this one enjoy beautiful seals this was

447
00:20:45,330 --> 00:20:52,189
taken that crypto in Santa Barbara so

448
00:20:54,230 --> 00:21:00,360
anyhow uh while they were fighting with

449
00:20:57,000 --> 00:21:02,160
that I'll simply sort of finish off so

450
00:21:00,360 --> 00:21:05,340
we're able to achieve public rights

451
00:21:02,160 --> 00:21:07,140
Panda with the same read complexity and

452
00:21:05,340 --> 00:21:10,860
secret rights panda with the same read

453
00:21:07,140 --> 00:21:12,210
complexity as read only panda all you

454
00:21:10,860 --> 00:21:21,570
have to do is hit I think it's just

455
00:21:12,210 --> 00:21:26,190
start and it should nope all right this

456
00:21:21,570 --> 00:21:29,370
is going to be actually my second to

457
00:21:26,190 --> 00:21:32,160
last slide so you guys will bear with me

458
00:21:29,370 --> 00:21:36,239
so client right complexity is simply

459
00:21:32,160 --> 00:21:38,730
going to be a vlog L where L is database

460
00:21:36,240 --> 00:21:41,150
size for client right complexity secret

461
00:21:38,730 --> 00:21:44,130
panda achieves the same sort of

462
00:21:41,150 --> 00:21:47,330
complexity as reads and server right

463
00:21:44,130 --> 00:21:50,429
complexity has a reliance on both the

464
00:21:47,330 --> 00:21:53,070
number of colluding clients and our

465
00:21:50,429 --> 00:21:56,250
database size and here epsilon is for

466
00:21:53,070 --> 00:21:58,678
any epsilon greater than zero so that's

467
00:21:56,250 --> 00:22:02,850
what we achieve for panda with rights in

468
00:21:58,679 --> 00:22:06,300
summary we're able to achieve a read

469
00:22:02,850 --> 00:22:09,330
only panda scheme from fhe where clients

470
00:22:06,300 --> 00:22:10,980
and server complexity is poly log and

471
00:22:09,330 --> 00:22:13,500
database size and linear in the

472
00:22:10,980 --> 00:22:14,370
collusion bounds we support two forms of

473
00:22:13,500 --> 00:22:17,909
rights

474
00:22:14,370 --> 00:22:20,580
and public and we are interested in

475
00:22:17,909 --> 00:22:23,070
pursuing the panda problem sort of in

476
00:22:20,580 --> 00:22:25,110
other directions namely it would be

477
00:22:23,070 --> 00:22:28,139
interesting to see if we can remove this

478
00:22:25,110 --> 00:22:30,770
bounded collusion aspect of Panda and

479
00:22:28,140 --> 00:22:34,020
have performance scale independent of

480
00:22:30,770 --> 00:22:36,658
sort of the number of collisions or

481
00:22:34,020 --> 00:22:39,510
corruptions and to remove this reliance

482
00:22:36,659 --> 00:22:43,049
on fhe in favor of more efficient

483
00:22:39,510 --> 00:22:44,549
primitives so thank you for sitting

484
00:22:43,049 --> 00:22:46,710
through this before lunch with all the

485
00:22:44,549 --> 00:22:49,379
technical difficulties and at this point

486
00:22:46,710 --> 00:22:56,820
I am happy to take any questions thank

487
00:22:49,380 --> 00:23:02,090
you very much any question is about

488
00:22:56,820 --> 00:23:02,090
panda yes they're adorable

