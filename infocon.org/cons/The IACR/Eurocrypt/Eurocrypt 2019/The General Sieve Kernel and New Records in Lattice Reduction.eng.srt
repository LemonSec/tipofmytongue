1
00:00:00,000 --> 00:00:05,250
alright hello everybody let's jump right

2
00:00:03,060 --> 00:00:07,140
into it this is work revolving around

3
00:00:05,250 --> 00:00:09,120
how efficiently we might find shortest

4
00:00:07,140 --> 00:00:11,370
vectors and lattices when we consider a

5
00:00:09,120 --> 00:00:13,139
particular class of algorithms called

6
00:00:11,370 --> 00:00:16,108
sibs and it's with these wonderful

7
00:00:13,139 --> 00:00:17,070
co-authors you just heard about so what

8
00:00:16,109 --> 00:00:19,140
is a lattice sieve

9
00:00:17,070 --> 00:00:21,119
it's a particular kind of algorithm that

10
00:00:19,140 --> 00:00:23,130
takes a description of a basis as a

11
00:00:21,119 --> 00:00:25,320
description of a lattice in sorry in the

12
00:00:23,130 --> 00:00:27,150
form of a basis and you go make a cup of

13
00:00:25,320 --> 00:00:29,160
tea and when you come back perhaps it's

14
00:00:27,150 --> 00:00:32,699
found for you a selection of short

15
00:00:29,160 --> 00:00:36,180
vectors in that lattice and what we mean

16
00:00:32,700 --> 00:00:38,670
by short vectors these vectors that are

17
00:00:36,180 --> 00:00:41,070
not 0 and are short in the Euclidean

18
00:00:38,670 --> 00:00:42,420
norm and outside of just liking these

19
00:00:41,070 --> 00:00:44,610
things for the shear interest of it

20
00:00:42,420 --> 00:00:47,129
these vectors are somehow a critical

21
00:00:44,610 --> 00:00:48,750
quantity when it comes to lattice crypt

22
00:00:47,129 --> 00:00:50,879
analysis and we'd like to be able to say

23
00:00:48,750 --> 00:00:52,769
reasonably concrete things about how

24
00:00:50,879 --> 00:00:56,370
easy they are tall and it hard they are

25
00:00:52,770 --> 00:00:58,800
to find in given instances and then to

26
00:00:56,370 --> 00:01:01,349
say something sort of more on a very

27
00:00:58,800 --> 00:01:02,819
high level about these algorithms in a

28
00:01:01,350 --> 00:01:05,549
dimension D lattice they require

29
00:01:02,820 --> 00:01:07,650
exponential time and memory and they're

30
00:01:05,549 --> 00:01:09,570
indeed one of a number of algorithm

31
00:01:07,650 --> 00:01:12,000
classes now which have this exponential

32
00:01:09,570 --> 00:01:15,270
time and memory in a dimension D lattice

33
00:01:12,000 --> 00:01:18,630
but really the the other competitive

34
00:01:15,270 --> 00:01:20,580
branch of the algorithmic field is the

35
00:01:18,630 --> 00:01:22,920
enumeration algorithms which have this

36
00:01:20,580 --> 00:01:25,470
super exponential time complexity but

37
00:01:22,920 --> 00:01:27,570
effectively no memory complexity and a

38
00:01:25,470 --> 00:01:29,369
question that's interested the community

39
00:01:27,570 --> 00:01:31,470
for a while now is where do these

40
00:01:29,369 --> 00:01:34,700
asymptotes kick in or maybe to say more

41
00:01:31,470 --> 00:01:38,009
explicitly for given implementations

42
00:01:34,700 --> 00:01:40,500
where does the better time complexity of

43
00:01:38,009 --> 00:01:45,329
severe sort of mean it starts performing

44
00:01:40,500 --> 00:01:47,490
faster than enumeration and so I was

45
00:01:45,329 --> 00:01:48,898
worried that I'd be the third person to

46
00:01:47,490 --> 00:01:50,369
define a lattice to you but I think they

47
00:01:48,899 --> 00:01:54,030
were all defined in different ways so

48
00:01:50,369 --> 00:01:56,040
for me I like to ask the audience

49
00:01:54,030 --> 00:01:57,600
perhaps for some linearly independent

50
00:01:56,040 --> 00:02:00,149
vectors in space and then I take that

51
00:01:57,600 --> 00:02:02,189
integer span and the points that this

52
00:02:00,149 --> 00:02:05,130
gives me the set lambda becomes my

53
00:02:02,189 --> 00:02:07,139
lattice and indeed any other set of

54
00:02:05,130 --> 00:02:09,869
linearly independent vectors that gives

55
00:02:07,140 --> 00:02:11,230
me the same span is also a basis for

56
00:02:09,869 --> 00:02:13,599
this lattice so

57
00:02:11,230 --> 00:02:15,579
this red pair these are a basis for this

58
00:02:13,599 --> 00:02:17,738
lattice is cyan pair they're also a

59
00:02:15,580 --> 00:02:19,510
basis and from the cryptanalytic

60
00:02:17,739 --> 00:02:25,200
perspective at least we have a notion of

61
00:02:19,510 --> 00:02:28,780
good and bad basis right so a good basis

62
00:02:25,200 --> 00:02:30,700
is one formed of short vectors which are

63
00:02:28,780 --> 00:02:32,680
reasonably close to orthogonal so maybe

64
00:02:30,700 --> 00:02:35,709
the red basis is good here and the blue

65
00:02:32,680 --> 00:02:37,870
basis is not and they're good because

66
00:02:35,709 --> 00:02:39,430
certain problems were interested in we

67
00:02:37,870 --> 00:02:41,620
can solve quite exactly with a good

68
00:02:39,430 --> 00:02:43,420
basis and we cannot with a bad basis or

69
00:02:41,620 --> 00:02:45,640
at least not without doing some

70
00:02:43,420 --> 00:02:46,839
significant quantity of work and one

71
00:02:45,640 --> 00:02:48,579
such problem that was mentioned in the

72
00:02:46,840 --> 00:02:50,860
previous talk is this closest vector

73
00:02:48,580 --> 00:02:52,810
problem if we take some point in ambient

74
00:02:50,860 --> 00:02:55,480
space so not one of the dots on screen

75
00:02:52,810 --> 00:02:58,420
ask what's the closest lattice vector to

76
00:02:55,480 --> 00:03:03,069
it then with the red basis you can solve

77
00:02:58,420 --> 00:03:05,079
this reasonably exactly and how might we

78
00:03:03,069 --> 00:03:06,819
go from Bad basis to good basis well if

79
00:03:05,080 --> 00:03:08,380
they contain short vectors perhaps one

80
00:03:06,819 --> 00:03:11,260
way of doing this would be to find short

81
00:03:08,380 --> 00:03:13,090
vectors and to concretize this problem

82
00:03:11,260 --> 00:03:15,190
we have on screen a definition of the

83
00:03:13,090 --> 00:03:17,470
exact shortest vector problem so I'm

84
00:03:15,190 --> 00:03:19,120
asking for a vector that's not the zero

85
00:03:17,470 --> 00:03:21,910
point and I want it to be shorter than

86
00:03:19,120 --> 00:03:24,130
or as short as every other nonzero

87
00:03:21,910 --> 00:03:25,750
vector in the lattice and I've alluded

88
00:03:24,130 --> 00:03:27,549
to earlier one way of doing this is

89
00:03:25,750 --> 00:03:31,209
through a class of algorithms which we

90
00:03:27,549 --> 00:03:35,829
call lattice sibs and so modulo a very

91
00:03:31,209 --> 00:03:38,049
large quantity of algorithmic design

92
00:03:35,829 --> 00:03:40,480
differences in the elaborate and elegant

93
00:03:38,049 --> 00:03:42,760
ways of reducing time complexity at some

94
00:03:40,480 --> 00:03:44,950
point such an algorithm has to have

95
00:03:42,760 --> 00:03:46,929
sampled from the basis exponentially

96
00:03:44,950 --> 00:03:48,339
many vectors in your lattice so this is

97
00:03:46,930 --> 00:03:51,070
where the space complexity comes from

98
00:03:48,340 --> 00:03:52,600
and it simply asks the question given a

99
00:03:51,070 --> 00:03:54,569
pair if I take there some other

100
00:03:52,600 --> 00:03:57,608
difference do I receive something

101
00:03:54,569 --> 00:04:00,069
shorter than one of the Samanas or

102
00:03:57,609 --> 00:04:01,150
difference and if I do replace it and

103
00:04:00,069 --> 00:04:02,619
once I've done this for all of the

104
00:04:01,150 --> 00:04:05,230
pair's perhaps I have a database of

105
00:04:02,620 --> 00:04:07,239
shorter vectors but it's a smaller

106
00:04:05,230 --> 00:04:09,700
database and I repeat I iterate this

107
00:04:07,239 --> 00:04:11,709
process however many times and if I

108
00:04:09,700 --> 00:04:13,208
started with enough vectors and I waited

109
00:04:11,709 --> 00:04:16,358
long enough then I solve the shortest

110
00:04:13,209 --> 00:04:19,500
vector problem okay a lot of technical

111
00:04:16,358 --> 00:04:19,500
detail is of course missing

112
00:04:19,880 --> 00:04:22,520
right and so but actually the more

113
00:04:21,440 --> 00:04:23,540
astute of you in the audience will

114
00:04:22,520 --> 00:04:25,310
perhaps notice that we solve the

115
00:04:23,540 --> 00:04:27,350
shortest vector problem and many other

116
00:04:25,310 --> 00:04:29,300
vectors appear as well and these vectors

117
00:04:27,350 --> 00:04:31,940
are much shorter than one could for

118
00:04:29,300 --> 00:04:34,940
example sample using a bad basis and

119
00:04:31,940 --> 00:04:37,760
here in sort of lives a problem because

120
00:04:34,940 --> 00:04:39,350
traditional lattice crypt analysis were

121
00:04:37,760 --> 00:04:42,020
thinking algorithms like the BK Zed

122
00:04:39,350 --> 00:04:44,330
algorithm and so on really only have a

123
00:04:42,020 --> 00:04:45,830
way of using one or some small constant

124
00:04:44,330 --> 00:04:47,390
number of short vectors at a time

125
00:04:45,830 --> 00:04:49,669
and yet this particular class of

126
00:04:47,390 --> 00:04:51,860
algorithms outputs an exponential number

127
00:04:49,670 --> 00:04:53,390
of short vectors and if we don't somehow

128
00:04:51,860 --> 00:04:55,130
come up with a way of using them perhaps

129
00:04:53,390 --> 00:04:57,800
we've wasted some work so we really want

130
00:04:55,130 --> 00:05:01,370
to be dirty hippies and be as ecological

131
00:04:57,800 --> 00:05:02,870
as possible about this and so two

132
00:05:01,370 --> 00:05:06,380
previous works which I won't speak about

133
00:05:02,870 --> 00:05:09,290
quite so much right now but both of them

134
00:05:06,380 --> 00:05:13,250
somehow sieve in a smaller dimensional

135
00:05:09,290 --> 00:05:14,990
lattice and use this work to either sort

136
00:05:13,250 --> 00:05:17,600
of solve the shortest vector problem

137
00:05:14,990 --> 00:05:19,130
exactly or somehow seed future civil

138
00:05:17,600 --> 00:05:22,880
operations and therefore make them

139
00:05:19,130 --> 00:05:24,890
quicker and this is sort of the

140
00:05:22,880 --> 00:05:28,250
intuition that we want to take from this

141
00:05:24,890 --> 00:05:30,200
we want some general framework perhaps

142
00:05:28,250 --> 00:05:32,390
of recycling information where

143
00:05:30,200 --> 00:05:34,159
information of short vectors and we want

144
00:05:32,390 --> 00:05:36,140
to recycle it between related lattices

145
00:05:34,160 --> 00:05:37,820
and we really need to go beyond this

146
00:05:36,140 --> 00:05:39,590
idea that a sieve is a box and we press

147
00:05:37,820 --> 00:05:41,480
a button and then we take a short vector

148
00:05:39,590 --> 00:05:43,190
it's really a box on wheels which

149
00:05:41,480 --> 00:05:45,260
carries a sack of short vectors on its

150
00:05:43,190 --> 00:05:47,600
back and implicitly what we're doing is

151
00:05:45,260 --> 00:05:49,370
therefore trying to see to treat one of

152
00:05:47,600 --> 00:05:51,560
these SIDS as a sort of stateful machine

153
00:05:49,370 --> 00:05:54,230
which we described a series of

154
00:05:51,560 --> 00:05:56,510
instructions on and that's one of the

155
00:05:54,230 --> 00:05:59,390
contributions of the work that I intend

156
00:05:56,510 --> 00:06:01,340
to interest you in today we come up with

157
00:05:59,390 --> 00:06:03,020
a framework for treating severe stateful

158
00:06:01,340 --> 00:06:05,330
machines and describe some instructions

159
00:06:03,020 --> 00:06:07,159
that we think are useful and then we

160
00:06:05,330 --> 00:06:08,840
implement an open source version of this

161
00:06:07,160 --> 00:06:10,580
which we encourage you to take a look at

162
00:06:08,840 --> 00:06:11,900
well really this is alive because these

163
00:06:10,580 --> 00:06:16,219
two steps happen the other way around

164
00:06:11,900 --> 00:06:17,900
but and then given those things in hand

165
00:06:16,220 --> 00:06:19,640
we decide that we want to come up with a

166
00:06:17,900 --> 00:06:22,219
variety of strategies for cryptanalytic

167
00:06:19,640 --> 00:06:24,140
tasks that somebody might be interested

168
00:06:22,220 --> 00:06:25,550
in and then having done that we're able

169
00:06:24,140 --> 00:06:27,950
to show some interesting practical

170
00:06:25,550 --> 00:06:30,110
things for example we show that in

171
00:06:27,950 --> 00:06:31,969
reasonably low dimensions the asymptote

172
00:06:30,110 --> 00:06:32,660
of the time complexity of saving kicks

173
00:06:31,970 --> 00:06:35,270
in and the

174
00:06:32,660 --> 00:06:37,070
to solve that exact variant of the

175
00:06:35,270 --> 00:06:39,109
shortest vector problem quicker than

176
00:06:37,070 --> 00:06:41,270
enumeration which is something a little

177
00:06:39,110 --> 00:06:42,920
new in our paper when I went to be

178
00:06:41,270 --> 00:06:44,539
credit so much today but we're able to

179
00:06:42,920 --> 00:06:46,490
show that this problem of solving the

180
00:06:44,540 --> 00:06:49,070
shortest vector problem is something we

181
00:06:46,490 --> 00:06:51,380
can amortize within a very useful

182
00:06:49,070 --> 00:06:55,430
lattice reduction algorithm and we go on

183
00:06:51,380 --> 00:06:57,500
to break a number of records and so may

184
00:06:55,430 --> 00:06:59,180
I introduce to you today ladies and

185
00:06:57,500 --> 00:07:04,060
gentlemen the general sitting kernel or

186
00:06:59,180 --> 00:07:07,010
as we call her Jessica and I'm going to

187
00:07:04,060 --> 00:07:08,720
perhaps try and insure it to you how one

188
00:07:07,010 --> 00:07:10,900
might use these instructions to build a

189
00:07:08,720 --> 00:07:14,420
sequence of evermore sort of subtle and

190
00:07:10,900 --> 00:07:17,239
and useful sips and to do this I'm going

191
00:07:14,420 --> 00:07:19,430
to try and use a consistent grammar and

192
00:07:17,240 --> 00:07:22,190
a little key in case you forget or more

193
00:07:19,430 --> 00:07:24,770
likely I do and so this first operation

194
00:07:22,190 --> 00:07:26,480
reset it simply it simply empties a

195
00:07:24,770 --> 00:07:29,510
database of any vectors that might be in

196
00:07:26,480 --> 00:07:31,940
there and the two subscripts they tell

197
00:07:29,510 --> 00:07:33,380
us just exactly how much of a basis of a

198
00:07:31,940 --> 00:07:35,450
lattice we're going to consider at once

199
00:07:33,380 --> 00:07:38,210
so in this simple sieve we're

200
00:07:35,450 --> 00:07:40,430
considering every basis vector and then

201
00:07:38,210 --> 00:07:42,530
F unsurprisingly might stand for sieve

202
00:07:40,430 --> 00:07:44,450
and so this is a procedure where you

203
00:07:42,530 --> 00:07:46,489
sample exponentially many of these

204
00:07:44,450 --> 00:07:49,669
vectors and then do pairwise comparisons

205
00:07:46,490 --> 00:07:51,260
and iterate it some number of times and

206
00:07:49,669 --> 00:07:53,090
then this eye instruction with a

207
00:07:51,260 --> 00:07:54,620
subscript stands for insert and when it

208
00:07:53,090 --> 00:08:00,140
has a subscript it means insert in a

209
00:07:54,620 --> 00:08:02,690
given position and so in particular why

210
00:08:00,140 --> 00:08:04,969
might we insert we've okay insertion is

211
00:08:02,690 --> 00:08:06,710
maybe a bit of misnomer but why might we

212
00:08:04,970 --> 00:08:09,320
insert we've done all this work to find

213
00:08:06,710 --> 00:08:11,450
a short factor and now we want to make a

214
00:08:09,320 --> 00:08:13,880
good basis so we want to somehow put it

215
00:08:11,450 --> 00:08:16,520
in our this short vector in our basis

216
00:08:13,880 --> 00:08:18,710
and so this is really the simplest sieve

217
00:08:16,520 --> 00:08:21,289
I think I can possibly come up with and

218
00:08:18,710 --> 00:08:23,270
then a very elegance of due to la havana

219
00:08:21,290 --> 00:08:26,210
Maya know at Purvi want to encrypt our

220
00:08:23,270 --> 00:08:28,849
last year sort of is this idea of

221
00:08:26,210 --> 00:08:31,520
Sevilla in a sub lattice and using that

222
00:08:28,850 --> 00:08:34,310
work to seed subsequent civil operations

223
00:08:31,520 --> 00:08:36,468
and making it faster and so immediately

224
00:08:34,309 --> 00:08:38,000
there's a difference right we we start

225
00:08:36,469 --> 00:08:40,370
and somehow we're only considering one

226
00:08:38,000 --> 00:08:42,440
lattice basis vector and we have this

227
00:08:40,370 --> 00:08:44,600
new instruction extend right which means

228
00:08:42,440 --> 00:08:45,810
okay sieve next time you do a sibling

229
00:08:44,600 --> 00:08:47,490
operation in

230
00:08:45,810 --> 00:08:50,760
also the next basis element to the right

231
00:08:47,490 --> 00:08:54,690
and then sieve and so this operation

232
00:08:50,760 --> 00:08:56,580
will give us short vectors but only made

233
00:08:54,690 --> 00:08:58,500
of combinations have been often we won

234
00:08:56,580 --> 00:09:02,100
and we extend right and we serve again

235
00:08:58,500 --> 00:09:04,020
but this operation of civic we're sort

236
00:09:02,100 --> 00:09:05,790
of starting not from scratch if you

237
00:09:04,020 --> 00:09:08,010
imagine the picture from one of the

238
00:09:05,790 --> 00:09:09,660
first slides we're effectively starting

239
00:09:08,010 --> 00:09:12,210
that saving procedure but we've got some

240
00:09:09,660 --> 00:09:14,819
short vectors already and you can maybe

241
00:09:12,210 --> 00:09:16,589
convince yourself that the a shorter

242
00:09:14,820 --> 00:09:18,839
vector is more likely to shorten other

243
00:09:16,589 --> 00:09:21,839
vectors and you continue this procedure

244
00:09:18,839 --> 00:09:23,880
throughout your entire basis and yes you

245
00:09:21,839 --> 00:09:25,950
still have to sieve with respect to all

246
00:09:23,880 --> 00:09:27,510
of the basis vectors but by the time you

247
00:09:25,950 --> 00:09:29,970
do this last saving operation

248
00:09:27,510 --> 00:09:32,760
well you seed it somehow with a very

249
00:09:29,970 --> 00:09:35,100
large database including short vectors

250
00:09:32,760 --> 00:09:37,230
made from all but the very final basis

251
00:09:35,100 --> 00:09:39,089
vector and while it doesn't change the

252
00:09:37,230 --> 00:09:41,910
asymptotes this gives some significant

253
00:09:39,089 --> 00:09:43,800
practical speed oats oh and then of

254
00:09:41,910 --> 00:09:45,569
course we we want to actually do

255
00:09:43,800 --> 00:09:48,990
something with this work so we insert it

256
00:09:45,570 --> 00:09:51,240
at the end and then we might move on to

257
00:09:48,990 --> 00:09:54,540
the dimensions for free sieve from ducat

258
00:09:51,240 --> 00:09:57,450
Europe last year and what this manages

259
00:09:54,540 --> 00:09:58,949
to do somehow is actually never sieve

260
00:09:57,450 --> 00:10:01,710
with respect to some of the basis

261
00:09:58,950 --> 00:10:04,860
vectors so we have this new parameter F

262
00:10:01,710 --> 00:10:08,370
which stands for free or for free or as

263
00:10:04,860 --> 00:10:10,920
you please and we actually start our

264
00:10:08,370 --> 00:10:13,980
sitting procedure somehow some way into

265
00:10:10,920 --> 00:10:16,880
the basis and as before we do this

266
00:10:13,980 --> 00:10:19,080
progressive extend right and so on and

267
00:10:16,880 --> 00:10:23,010
what's on screen is not exactly accurate

268
00:10:19,080 --> 00:10:24,690
because really these basis vectors that

269
00:10:23,010 --> 00:10:27,510
are in red that I'm considering to sieve

270
00:10:24,690 --> 00:10:30,270
over their projected orthogonal e to

271
00:10:27,510 --> 00:10:31,890
those that come before and this is sort

272
00:10:30,270 --> 00:10:35,790
of idiomatic when you think of using

273
00:10:31,890 --> 00:10:38,069
sips and things like because ed and so

274
00:10:35,790 --> 00:10:40,140
in particular the lattice vectors I have

275
00:10:38,070 --> 00:10:42,450
in my my database right now they're not

276
00:10:40,140 --> 00:10:44,069
actually lattice vectors of the lattice

277
00:10:42,450 --> 00:10:46,950
I'm considering I need to somehow lift

278
00:10:44,070 --> 00:10:48,540
them or undo these projections and we we

279
00:10:46,950 --> 00:10:51,570
have a mechanism based on by by generous

280
00:10:48,540 --> 00:10:52,680
plane for doing this and what we do and

281
00:10:51,570 --> 00:10:55,290
we've come to the end of our saving

282
00:10:52,680 --> 00:10:57,390
procedure we simply take our full

283
00:10:55,290 --> 00:10:59,160
database and we lift it now in blue I

284
00:10:57,390 --> 00:11:02,459
hope you can see that yes

285
00:10:59,160 --> 00:11:03,719
over the full database and if you sort

286
00:11:02,459 --> 00:11:05,729
of follow the mathematics in this paper

287
00:11:03,720 --> 00:11:07,770
you choose F not too large quasi linear

288
00:11:05,730 --> 00:11:09,779
and D and you do a set amount of

289
00:11:07,770 --> 00:11:11,550
pre-processing than you expect maybe to

290
00:11:09,779 --> 00:11:14,610
find the shortest vector here and then

291
00:11:11,550 --> 00:11:17,609
you insert it okay so I'm ready now to

292
00:11:14,610 --> 00:11:19,680
tell you about the workhorse of our

293
00:11:17,610 --> 00:11:21,300
lattice reduction libraries which we

294
00:11:19,680 --> 00:11:24,060
call the pump because it has a sort of

295
00:11:21,300 --> 00:11:27,599
pumping motion you pump up and down and

296
00:11:24,060 --> 00:11:31,109
do this a number of times and some

297
00:11:27,600 --> 00:11:33,089
things are immediately different so for

298
00:11:31,110 --> 00:11:35,390
example ER has magically been replaced

299
00:11:33,089 --> 00:11:38,399
by e L which stands for extend left and

300
00:11:35,390 --> 00:11:41,910
the eye has lost its subscript which is

301
00:11:38,399 --> 00:11:43,320
something I'll come to in a minute we

302
00:11:41,910 --> 00:11:45,300
have to extend left rather than right

303
00:11:43,320 --> 00:11:47,910
simply because we came up with some neat

304
00:11:45,300 --> 00:11:49,260
algorithmic trick for reducing the

305
00:11:47,910 --> 00:11:51,060
average length of vectors in our

306
00:11:49,260 --> 00:11:55,649
database and it sort of breaks extend

307
00:11:51,060 --> 00:11:57,630
right but that's not such a big deal but

308
00:11:55,649 --> 00:11:59,070
we instead sort of progressively sieve

309
00:11:57,630 --> 00:12:02,010
to the left and this extend left

310
00:11:59,070 --> 00:12:04,709
operation is implemented using of the by

311
00:12:02,010 --> 00:12:06,410
lifting technique and so yeah we're

312
00:12:04,709 --> 00:12:10,109
doing this progressive saving operation

313
00:12:06,410 --> 00:12:12,029
but now this lifting operation I was

314
00:12:10,110 --> 00:12:14,040
talking about is sort of inherent into

315
00:12:12,029 --> 00:12:16,200
the sieve and what do I mean by this I

316
00:12:14,040 --> 00:12:17,849
mean that every time in the saving

317
00:12:16,200 --> 00:12:19,709
procedure so every time we're comparing

318
00:12:17,850 --> 00:12:21,600
pairs of vectors to see if there's

319
00:12:19,709 --> 00:12:24,359
something shorter if we find something

320
00:12:21,600 --> 00:12:26,730
good we actually take the lift of that

321
00:12:24,360 --> 00:12:29,730
vector all the way to all of our bases

322
00:12:26,730 --> 00:12:32,130
and by doing so we're able to keep a

323
00:12:29,730 --> 00:12:34,709
sort of a list a candidate insert for

324
00:12:32,130 --> 00:12:36,270
each position in our basis so at any

325
00:12:34,709 --> 00:12:38,040
point in the Civil Procedure we should

326
00:12:36,270 --> 00:12:40,579
have a list of the shortest thing we

327
00:12:38,040 --> 00:12:43,230
know how to insert at a given point and

328
00:12:40,579 --> 00:12:45,569
by doing this and continuing to sieve

329
00:12:43,230 --> 00:12:47,820
progressively left by the time we

330
00:12:45,570 --> 00:12:49,709
finished our pumping up phase hopefully

331
00:12:47,820 --> 00:12:51,810
we've we've sort of lifted a great deal

332
00:12:49,709 --> 00:12:53,579
more vectors than we would have done if

333
00:12:51,810 --> 00:12:57,209
we just sipped to hear and chose to lift

334
00:12:53,579 --> 00:12:58,739
at the end of this procedure and then we

335
00:12:57,209 --> 00:13:01,920
finished pumping up and now we're going

336
00:12:58,740 --> 00:13:03,570
to pump down and I said that the I

337
00:13:01,920 --> 00:13:06,420
didn't have a subscript and this

338
00:13:03,570 --> 00:13:07,829
represents the fact that kind of

339
00:13:06,420 --> 00:13:10,199
classical lattice reduction in crypt

340
00:13:07,829 --> 00:13:12,540
analysis is very well some of it not all

341
00:13:10,199 --> 00:13:14,069
of it is very regimented in

342
00:13:12,540 --> 00:13:17,160
where it chooses to in search for

343
00:13:14,070 --> 00:13:18,930
vectors but given that we keep a sort of

344
00:13:17,160 --> 00:13:21,480
a lift of insertion candidates for

345
00:13:18,930 --> 00:13:23,189
various points in our basis we decided

346
00:13:21,480 --> 00:13:25,020
to let the sieve more organically choose

347
00:13:23,190 --> 00:13:26,940
so for example you might have a very

348
00:13:25,020 --> 00:13:28,980
good insert for b3 but only a

349
00:13:26,940 --> 00:13:31,050
particularly an impressive one would be

350
00:13:28,980 --> 00:13:33,150
naught and it doesn't seem reasonable to

351
00:13:31,050 --> 00:13:35,219
always force you to insert in a given

352
00:13:33,150 --> 00:13:36,870
position and so in particular we just

353
00:13:35,220 --> 00:13:40,170
optimize over some function and then

354
00:13:36,870 --> 00:13:42,150
choose where to insert and then we pump

355
00:13:40,170 --> 00:13:44,219
down to receive again but this sitting

356
00:13:42,150 --> 00:13:45,569
procedure because it has the lifting

357
00:13:44,220 --> 00:13:48,180
built-in it's would have potentially

358
00:13:45,570 --> 00:13:49,740
refreshes all of our inserts and we

359
00:13:48,180 --> 00:13:51,109
continue inserting and sipping down

360
00:13:49,740 --> 00:13:54,360
until we're back to where we started

361
00:13:51,110 --> 00:13:55,650
except not entirely because we're back

362
00:13:54,360 --> 00:13:56,940
to where we started except we've

363
00:13:55,650 --> 00:13:59,280
potentially made a great deal of

364
00:13:56,940 --> 00:14:00,780
insertions insertions mean in fact we're

365
00:13:59,280 --> 00:14:02,459
getting shorter which sort of means

366
00:14:00,780 --> 00:14:04,890
they're getting closer to orthogonal and

367
00:14:02,460 --> 00:14:08,400
then this lifting procedure we chose it

368
00:14:04,890 --> 00:14:09,960
because it's very good but also the more

369
00:14:08,400 --> 00:14:11,579
orthogonal the basis that you lift over

370
00:14:09,960 --> 00:14:13,860
is the shorter vectors it has a

371
00:14:11,580 --> 00:14:16,350
potential to find and if you were to

372
00:14:13,860 --> 00:14:19,320
iterate this procedure once more you

373
00:14:16,350 --> 00:14:20,910
might you wouldn't necessarily need to

374
00:14:19,320 --> 00:14:24,150
increase the dimension of your pump to

375
00:14:20,910 --> 00:14:26,790
find newer shorter vectors and so this

376
00:14:24,150 --> 00:14:28,380
is the workhorse of lattice reduction

377
00:14:26,790 --> 00:14:30,770
strategies and you could combine it in

378
00:14:28,380 --> 00:14:33,900
all kinds of wonderful and wacky ways

379
00:14:30,770 --> 00:14:36,210
but I just want to give a little

380
00:14:33,900 --> 00:14:39,510
overview of Jessica and what we did on

381
00:14:36,210 --> 00:14:42,780
an implementation side before I finish

382
00:14:39,510 --> 00:14:43,980
with some practical outcomes and so

383
00:14:42,780 --> 00:14:46,350
Jessica had three high-level design

384
00:14:43,980 --> 00:14:48,120
principles there's this desire to

385
00:14:46,350 --> 00:14:49,830
recycle short vectors between

386
00:14:48,120 --> 00:14:52,380
overlapping lattice context this is

387
00:14:49,830 --> 00:14:55,230
extend right and extend left and shrink

388
00:14:52,380 --> 00:14:57,330
left which you didn't see there's this

389
00:14:55,230 --> 00:14:59,310
idea that we should lift vectors

390
00:14:57,330 --> 00:15:00,870
throughout the civil procedure to high

391
00:14:59,310 --> 00:15:03,089
dimensional lattices and sort of keep

392
00:15:00,870 --> 00:15:05,700
the best candidate we know how to insert

393
00:15:03,090 --> 00:15:08,010
at a given basis vector and then because

394
00:15:05,700 --> 00:15:10,080
of this were able to a posteriori decide

395
00:15:08,010 --> 00:15:13,830
whether to you or whether to and where

396
00:15:10,080 --> 00:15:15,660
to insert a vector and so these are sort

397
00:15:13,830 --> 00:15:17,580
of the they're really all quite

398
00:15:15,660 --> 00:15:22,170
opportunistic and on the implementation

399
00:15:17,580 --> 00:15:24,600
side of things we implement a sort of

400
00:15:22,170 --> 00:15:26,079
single filtered level version of the

401
00:15:24,600 --> 00:15:29,730
Beck agamas Youssef and a trip

402
00:15:26,080 --> 00:15:32,320
which is a line of work that allows

403
00:15:29,730 --> 00:15:33,790
space complexity and time complexity to

404
00:15:32,320 --> 00:15:36,730
be traded off so in particular the

405
00:15:33,790 --> 00:15:38,649
triple sieve we implement in Jessica you

406
00:15:36,730 --> 00:15:41,260
can parameterize it by how much memory

407
00:15:38,649 --> 00:15:44,260
you're willing to give it and then the

408
00:15:41,260 --> 00:15:47,439
final sort of pieces of puzzle from the

409
00:15:44,260 --> 00:15:49,209
implementation side is we make use of a

410
00:15:47,440 --> 00:15:51,970
whole host of algorithmic tweets so for

411
00:15:49,209 --> 00:15:54,160
example it used to be that after

412
00:15:51,970 --> 00:15:56,290
insertion you couldn't save again and I

413
00:15:54,160 --> 00:15:59,680
think the most important of these is the

414
00:15:56,290 --> 00:16:01,449
XOR pop count trick which replaces a

415
00:15:59,680 --> 00:16:04,779
great deal of inner product calculation

416
00:16:01,450 --> 00:16:06,220
in our library so it turns out that when

417
00:16:04,779 --> 00:16:07,779
you want to compare whether the sum or

418
00:16:06,220 --> 00:16:09,220
difference of two vectors is shorter

419
00:16:07,779 --> 00:16:10,720
than one of the Samantha dear friends

420
00:16:09,220 --> 00:16:12,399
you effectively have to take an inner

421
00:16:10,720 --> 00:16:15,160
product but if you come up with a

422
00:16:12,399 --> 00:16:16,990
pre-filter such as Azure pop count

423
00:16:15,160 --> 00:16:20,860
pre-filter it allows you to avoid a lot

424
00:16:16,990 --> 00:16:22,450
of that complexity and we came up with a

425
00:16:20,860 --> 00:16:24,940
particular a nice generalized way of

426
00:16:22,450 --> 00:16:27,339
doing this but please see the paper

427
00:16:24,940 --> 00:16:29,649
because I mean this deserves much more

428
00:16:27,339 --> 00:16:33,490
time than I'm giving it and so on to

429
00:16:29,649 --> 00:16:35,890
like practical outcomes and records at

430
00:16:33,490 --> 00:16:38,440
Jessica work out in the red stars like a

431
00:16:35,890 --> 00:16:41,860
workout is obviously a sequence of ever

432
00:16:38,440 --> 00:16:46,180
more strenuous pumps and this is a thank

433
00:16:41,860 --> 00:16:48,550
you this is our sort of the thing we

434
00:16:46,180 --> 00:16:50,979
expect to solve exact SVP and the blue

435
00:16:48,550 --> 00:16:53,859
dots are because Ed was pruned

436
00:16:50,980 --> 00:16:55,870
enumeration in the FPL library which is

437
00:16:53,860 --> 00:16:57,760
I think the best publicly implemented

438
00:16:55,870 --> 00:17:01,089
sort of enumeration library and we can

439
00:16:57,760 --> 00:17:04,059
see that around dimension 70 these

440
00:17:01,089 --> 00:17:06,579
implementations cross so sort of less

441
00:17:04,059 --> 00:17:08,168
than 10 seconds and certainly in much

442
00:17:06,579 --> 00:17:11,589
lower dimensions and we're interested in

443
00:17:08,169 --> 00:17:14,860
in cryptographic purposes and then from

444
00:17:11,589 --> 00:17:16,329
exact SVP which is an exact notion of

445
00:17:14,859 --> 00:17:18,219
the shortest effect problem you have

446
00:17:16,329 --> 00:17:21,399
more sort of approximate or heuristic

447
00:17:18,220 --> 00:17:23,439
notions such as ahem is VP which is what

448
00:17:21,400 --> 00:17:26,350
one might use in practice when doing

449
00:17:23,439 --> 00:17:27,819
lattice reduction and we didn't know

450
00:17:26,349 --> 00:17:30,280
that this was going to be a damaged out

451
00:17:27,819 --> 00:17:32,649
when we submitted or maybe we did but we

452
00:17:30,280 --> 00:17:34,540
broke some Darmstadt challenges along

453
00:17:32,650 --> 00:17:37,230
the bottom access the x axis of the

454
00:17:34,540 --> 00:17:39,820
dimensions and then core hours along the

455
00:17:37,230 --> 00:17:42,360
along the y in a log scale

456
00:17:39,820 --> 00:17:47,200
and the red points again are the sort of

457
00:17:42,360 --> 00:17:50,379
Jessica workout strategies and we sort

458
00:17:47,200 --> 00:17:53,950
of went from years on hundreds of cause

459
00:17:50,380 --> 00:17:56,620
two weeks on on like 40 cause this was

460
00:17:53,950 --> 00:17:58,480
this was very pleasant and and then

461
00:17:56,620 --> 00:18:01,360
above that again as we go from exact SVP

462
00:17:58,480 --> 00:18:02,470
to a approximate notion of SVP to the

463
00:18:01,360 --> 00:18:04,750
problems on which you might actually

464
00:18:02,470 --> 00:18:06,190
basically Prague Rafi again the dancer

465
00:18:04,750 --> 00:18:08,230
at challenges for learning with errors

466
00:18:06,190 --> 00:18:10,090
were able to make some progress these

467
00:18:08,230 --> 00:18:11,950
new purple boxes are records that we are

468
00:18:10,090 --> 00:18:15,550
able to break with this sort of sibling

469
00:18:11,950 --> 00:18:17,320
based methodology and so a final word on

470
00:18:15,550 --> 00:18:18,909
the implementation because I want to

471
00:18:17,320 --> 00:18:20,710
challenge you I think far more records

472
00:18:18,910 --> 00:18:23,170
can be broken using this library and

473
00:18:20,710 --> 00:18:24,550
using these sort of ideas I don't want

474
00:18:23,170 --> 00:18:25,870
to speak for my co-authors but many of

475
00:18:24,550 --> 00:18:29,379
you can do much more intelligent things

476
00:18:25,870 --> 00:18:31,389
and I can and while all of the heavy

477
00:18:29,380 --> 00:18:33,610
operations and the optimization happened

478
00:18:31,390 --> 00:18:35,470
on the C++ layer lots of the algorithm

479
00:18:33,610 --> 00:18:37,120
design and the control and the stats

480
00:18:35,470 --> 00:18:39,820
gathering all happens on a pythonic

481
00:18:37,120 --> 00:18:43,090
layer and so really we think most people

482
00:18:39,820 --> 00:18:45,040
can jump in and start sipping away and I

483
00:18:43,090 --> 00:18:47,220
think that's more than enough for me for

484
00:18:45,040 --> 00:18:56,730
today so I'll take all of your questions

485
00:18:47,220 --> 00:19:06,940
[Applause]

486
00:18:56,730 --> 00:19:10,450
questions so when you say like you want

487
00:19:06,940 --> 00:19:12,519
to reuse seeds across lattices so what

488
00:19:10,450 --> 00:19:14,380
do you not so those two lattices or

489
00:19:12,519 --> 00:19:16,029
black three lattices should they be like

490
00:19:14,380 --> 00:19:18,309
in a particular relation between each

491
00:19:16,029 --> 00:19:21,519
other should it like be sub lattice or

492
00:19:18,309 --> 00:19:23,889
is it possible to yes or in some cases a

493
00:19:21,519 --> 00:19:26,440
sub lattices if you just can if you're

494
00:19:23,890 --> 00:19:28,720
considering the the original lattice

495
00:19:26,440 --> 00:19:31,210
basis then you consider surpluses for

496
00:19:28,720 --> 00:19:33,549
inclusion if you're doing things in the

497
00:19:31,210 --> 00:19:36,029
gram-schmidt basis which is one of the

498
00:19:33,549 --> 00:19:38,590
things we do in our library then your

499
00:19:36,029 --> 00:19:41,230
new considering projected sub lattices

500
00:19:38,590 --> 00:19:45,789
and so it's it's it's in particular it's

501
00:19:41,230 --> 00:19:47,350
easy to take a database in a high

502
00:19:45,789 --> 00:19:49,149
dimension and project down and then this

503
00:19:47,350 --> 00:19:51,250
lifting operation is sort of an anti

504
00:19:49,149 --> 00:19:53,590
projection not an inverse of course but

505
00:19:51,250 --> 00:19:55,389
an anti projection and so yeah there are

506
00:19:53,590 --> 00:19:57,519
all of the different lattices I spoke

507
00:19:55,389 --> 00:20:00,580
about and I put my hands up i explicitly

508
00:19:57,519 --> 00:20:02,830
avoided quite a lot of detail they're

509
00:20:00,580 --> 00:20:06,029
all either sub lattices or projected sub

510
00:20:02,830 --> 00:20:06,029
lattices at one another yet

511
00:20:11,590 --> 00:20:18,459
any more questions let's thank our

512
00:20:17,270 --> 00:20:21,910
speaker again

513
00:20:18,460 --> 00:20:21,910
[Applause]

