1
00:00:00,030 --> 00:00:08,219
alright thanks let me start by comparing

2
00:00:04,799 --> 00:00:10,800
I sahjhan II based public key encryption

3
00:00:08,220 --> 00:00:12,660
to diffie-hellman what both of these

4
00:00:10,800 --> 00:00:15,240
give us is non-interactive key exchange

5
00:00:12,660 --> 00:00:18,060
so the setup here is that you have Alice

6
00:00:15,240 --> 00:00:19,650
generating some public key a times GG is

7
00:00:18,060 --> 00:00:22,109
some standard that everybody knows in

8
00:00:19,650 --> 00:00:24,479
the space of public keys Alice has her

9
00:00:22,109 --> 00:00:26,430
own secret a and multiplies that by G to

10
00:00:24,480 --> 00:00:28,769
get a G and Bob does the same thing to

11
00:00:26,430 --> 00:00:30,869
make his public key be G from his own

12
00:00:28,769 --> 00:00:33,210
independently generated secret B and

13
00:00:30,869 --> 00:00:34,980
that lets them both agree on some shared

14
00:00:33,210 --> 00:00:37,739
secret which you can write in several

15
00:00:34,980 --> 00:00:40,648
ways you can say Alice takes Bob's

16
00:00:37,739 --> 00:00:42,660
public key BG and multiplies it by her

17
00:00:40,649 --> 00:00:45,239
secret a to get a times B times G which

18
00:00:42,660 --> 00:00:47,788
is the same as a times B times G which

19
00:00:45,239 --> 00:00:49,980
is the same as B times a times G which

20
00:00:47,789 --> 00:00:52,379
is the same as what Bob gets by

21
00:00:49,980 --> 00:00:54,089
multiplying his secret B times Alice's

22
00:00:52,379 --> 00:00:56,309
public key a times G so they've agreed

23
00:00:54,090 --> 00:00:58,079
on the same element of the public key

24
00:00:56,309 --> 00:01:00,930
space some shared secret which they can

25
00:00:58,079 --> 00:01:02,190
then hash and use as an AAS GCM key to

26
00:01:00,930 --> 00:01:04,890
authenticate and encrypt all their

27
00:01:02,190 --> 00:01:07,229
communications there's lots of names for

28
00:01:04,890 --> 00:01:09,270
the different mathematical equations

29
00:01:07,229 --> 00:01:10,679
that are being used here like a times B

30
00:01:09,270 --> 00:01:12,600
being B times a okay that's

31
00:01:10,680 --> 00:01:15,270
commutativity of the multiplication in

32
00:01:12,600 --> 00:01:17,610
the semigroup of secret keys which is

33
00:01:15,270 --> 00:01:19,039
maybe a group there's the associativity

34
00:01:17,610 --> 00:01:21,240
at the beginning here well sometimes

35
00:01:19,040 --> 00:01:22,530
mathematicians have so much fun coming

36
00:01:21,240 --> 00:01:24,539
up with names that they have multiple

37
00:01:22,530 --> 00:01:27,240
names for the same thing so this is when

38
00:01:24,540 --> 00:01:29,670
you're multiplying secret keys by public

39
00:01:27,240 --> 00:01:32,130
keys to get public keys then that's not

40
00:01:29,670 --> 00:01:33,990
called multiplication anymore with

41
00:01:32,130 --> 00:01:35,670
associativity it's called an action

42
00:01:33,990 --> 00:01:37,259
which just means okay you've got

43
00:01:35,670 --> 00:01:39,780
associativity when you multiply the

44
00:01:37,259 --> 00:01:41,009
secret Keys and then multiply the result

45
00:01:39,780 --> 00:01:43,590
by a public key it's the same as

46
00:01:41,009 --> 00:01:45,509
multiplying the second secret key first

47
00:01:43,590 --> 00:01:47,790
by the public key and then multiplying

48
00:01:45,509 --> 00:01:49,530
by the other secret key all right

49
00:01:47,790 --> 00:01:51,960
this gives us a shared secret between

50
00:01:49,530 --> 00:01:54,420
Alice and Bob which traditionally we do

51
00:01:51,960 --> 00:01:56,100
by maybe not the original diffie-hellman

52
00:01:54,420 --> 00:01:57,869
protocol we use elliptic curve

53
00:01:56,100 --> 00:02:00,149
diffie-hellman going back to Miller and

54
00:01:57,869 --> 00:02:01,770
Co blitz in the mid-80s and both of

55
00:02:00,149 --> 00:02:04,020
these both the original diffie-hellman

56
00:02:01,770 --> 00:02:05,700
with multiplicative groups and elliptic

57
00:02:04,020 --> 00:02:09,119
curve diffie-hellman have some

58
00:02:05,700 --> 00:02:11,150
polynomial cost in lambda to achieve a

59
00:02:09,119 --> 00:02:13,890
security level of 2 to the lambda of

60
00:02:11,150 --> 00:02:15,480
course to figure out what exactly

61
00:02:13,890 --> 00:02:17,160
polynomial is you have to start by

62
00:02:15,480 --> 00:02:18,989
saying well okay what are the attacks

63
00:02:17,160 --> 00:02:20,579
how can some attacker figure out

64
00:02:18,990 --> 00:02:23,490
something about the shared secret

65
00:02:20,580 --> 00:02:25,830
starting from the public information a G

66
00:02:23,490 --> 00:02:27,270
and B G and then once you know how fast

67
00:02:25,830 --> 00:02:28,950
the attacks are which is different

68
00:02:27,270 --> 00:02:30,240
between this is why we like elliptic

69
00:02:28,950 --> 00:02:32,160
curves is that the attacks are a lot

70
00:02:30,240 --> 00:02:33,720
harder I once you've figured out how

71
00:02:32,160 --> 00:02:35,370
fast the attacks are then you have to

72
00:02:33,720 --> 00:02:37,200
figure out the constructive side of it

73
00:02:35,370 --> 00:02:40,680
how fast are the algorithms to compute

74
00:02:37,200 --> 00:02:44,310
the action to multiply a times G to

75
00:02:40,680 --> 00:02:46,709
multiply a times B G etc if the attacks

76
00:02:44,310 --> 00:02:49,020
get better than we know then well the

77
00:02:46,709 --> 00:02:50,340
amount of key material that you might

78
00:02:49,020 --> 00:02:51,989
need the key size might go up

79
00:02:50,340 --> 00:02:54,390
dramatically it could even be totally

80
00:02:51,989 --> 00:02:55,920
broken which is why the word pre quantum

81
00:02:54,390 --> 00:02:57,988
is important here the pre quantum

82
00:02:55,920 --> 00:03:00,899
security level to to lambda gives us

83
00:02:57,989 --> 00:03:02,730
some polynomial cost in lambda but once

84
00:03:00,900 --> 00:03:05,130
you switch to post quantum cryptography

85
00:03:02,730 --> 00:03:07,410
then diffie-hellman and elliptic curve

86
00:03:05,130 --> 00:03:09,390
diffie-hellman are broken if you look at

87
00:03:07,410 --> 00:03:11,280
what Shor's algorithm needs to break

88
00:03:09,390 --> 00:03:13,890
diffie-hellman and elliptic curve

89
00:03:11,280 --> 00:03:16,140
diffie-hellman then it's basically using

90
00:03:13,890 --> 00:03:17,899
exactly the features that were used up

91
00:03:16,140 --> 00:03:20,309
at the top the commutativity of

92
00:03:17,900 --> 00:03:21,989
multiplying the secrets and the

93
00:03:20,310 --> 00:03:23,820
associativity but it's actually using a

94
00:03:21,989 --> 00:03:25,680
little bit more algebraically it's using

95
00:03:23,820 --> 00:03:27,600
that you can add public keys

96
00:03:25,680 --> 00:03:30,150
what you do ensures algorithm you set up

97
00:03:27,600 --> 00:03:33,150
some well there's some lattice of care

98
00:03:30,150 --> 00:03:38,329
say x and y such that x times g plus y

99
00:03:33,150 --> 00:03:40,500
times i a times G is 0 and that's some

100
00:03:38,329 --> 00:03:41,370
two-dimensional lattice which sure finds

101
00:03:40,500 --> 00:03:44,130
you

102
00:03:41,370 --> 00:03:45,660
elements of and well end up in what I

103
00:03:44,130 --> 00:03:47,730
just said there was a plus you can add

104
00:03:45,660 --> 00:03:49,950
elements of the public key space which

105
00:03:47,730 --> 00:03:52,048
is exactly the wedge that I saw Janee

106
00:03:49,950 --> 00:03:53,880
based crypto uses to make a post quantum

107
00:03:52,049 --> 00:03:56,579
version of the same thing at first

108
00:03:53,880 --> 00:03:58,590
glance the the story is just like the

109
00:03:56,579 --> 00:04:00,450
elliptic curve diffie-hellman story that

110
00:03:58,590 --> 00:04:02,040
well there's some constructions due to

111
00:04:00,450 --> 00:04:04,649
some people with some sort of details

112
00:04:02,040 --> 00:04:07,200
where you analyze the attack cost of the

113
00:04:04,650 --> 00:04:09,870
crs system goes back to covina and wrath

114
00:04:07,200 --> 00:04:12,600
of stevia and sobinov and then much more

115
00:04:09,870 --> 00:04:14,880
recently the seaside system went from

116
00:04:12,600 --> 00:04:16,829
asia crypt 2018 that's from while some

117
00:04:14,880 --> 00:04:21,120
of the authors of this paper but more

118
00:04:16,829 --> 00:04:22,500
people so castro can read us i and maybe

119
00:04:21,120 --> 00:04:23,789
i should say everything else i'm going

120
00:04:22,500 --> 00:04:26,370
to say is going to be the same between

121
00:04:23,789 --> 00:04:27,539
saris and seaside except for the details

122
00:04:26,370 --> 00:04:29,280
of the costs where it's

123
00:04:27,540 --> 00:04:31,860
besides I don't know a thousand million

124
00:04:29,280 --> 00:04:33,869
times faster than CRS so you definitely

125
00:04:31,860 --> 00:04:36,930
want to use seaside instead of CRS but

126
00:04:33,870 --> 00:04:38,280
the aside from that the the basic

127
00:04:36,930 --> 00:04:39,810
picture of what I'm talking about is the

128
00:04:38,280 --> 00:04:41,130
same both of these just like

129
00:04:39,810 --> 00:04:43,380
diffie-hellman elliptic curve

130
00:04:41,130 --> 00:04:46,650
diffie-hellman have some polynomial cost

131
00:04:43,380 --> 00:04:48,930
to resist all known attacks pre quantum

132
00:04:46,650 --> 00:04:51,390
and the advantage is post quantum they

133
00:04:48,930 --> 00:04:53,310
also have some polynomial cost to resist

134
00:04:51,390 --> 00:04:55,890
all known attacks that take time less

135
00:04:53,310 --> 00:04:57,450
than two to the lambda all right so this

136
00:04:55,890 --> 00:04:59,430
is one reason people are interested in

137
00:04:57,450 --> 00:05:01,890
nice OG&E based cryptography it gives us

138
00:04:59,430 --> 00:05:03,360
non interactive key exchange just like

139
00:05:01,890 --> 00:05:05,580
the original diffie-hellman but

140
00:05:03,360 --> 00:05:07,410
apparently surviving quantum computers

141
00:05:05,580 --> 00:05:09,659
there's another reason that people are

142
00:05:07,410 --> 00:05:11,610
interested in I saw Jenny based crypto

143
00:05:09,660 --> 00:05:12,960
even if they don't want non interactive

144
00:05:11,610 --> 00:05:15,180
key exchange which seems it's kind of

145
00:05:12,960 --> 00:05:17,280
hard to achieve non interactive key

146
00:05:15,180 --> 00:05:19,080
exchange post quantum we don't have very

147
00:05:17,280 --> 00:05:20,880
many proposals for that but we have a

148
00:05:19,080 --> 00:05:22,500
lot more proposals for just doing public

149
00:05:20,880 --> 00:05:24,780
key encryption and then within that

150
00:05:22,500 --> 00:05:27,990
space of public key encryption systems

151
00:05:24,780 --> 00:05:29,820
well there's a lot of interest in how

152
00:05:27,990 --> 00:05:32,460
small the public keys can be and in

153
00:05:29,820 --> 00:05:34,140
general how low the cost can be let me

154
00:05:32,460 --> 00:05:35,969
emphasize you don't need to do the work

155
00:05:34,140 --> 00:05:38,849
of coming up with non-interactive key

156
00:05:35,970 --> 00:05:41,070
exchange in order to have a public key

157
00:05:38,850 --> 00:05:43,050
encryption system for instance the best

158
00:05:41,070 --> 00:05:46,590
known example of iso geneva-based crypto

159
00:05:43,050 --> 00:05:48,180
the SI d h super singular i saw Jenny

160
00:05:46,590 --> 00:05:49,229
diffie-hellman it's kind of misleading

161
00:05:48,180 --> 00:05:51,000
because it doesn't do what

162
00:05:49,230 --> 00:05:52,380
diffie-hellman does it's it's just a

163
00:05:51,000 --> 00:05:55,920
public encryption system you need

164
00:05:52,380 --> 00:05:58,380
communication to agree on a key but okay

165
00:05:55,920 --> 00:05:59,850
it's now as a NIST submission for the

166
00:05:58,380 --> 00:06:01,620
post quantum competition it's called

167
00:05:59,850 --> 00:06:03,330
psych super singular isogen e key

168
00:06:01,620 --> 00:06:05,370
exchange this is a perfectly reasonable

169
00:06:03,330 --> 00:06:07,770
public key encryption system which is

170
00:06:05,370 --> 00:06:11,040
well known for having small public keys

171
00:06:07,770 --> 00:06:14,159
and let me compare this to various other

172
00:06:11,040 --> 00:06:15,330
options for the public key sizes that

173
00:06:14,160 --> 00:06:17,190
you might get and let's get a little

174
00:06:15,330 --> 00:06:19,050
more quantitative than just polynomial

175
00:06:17,190 --> 00:06:21,840
in lambda maybe I'll start down at the

176
00:06:19,050 --> 00:06:24,120
bottom left here so pre quantum suppose

177
00:06:21,840 --> 00:06:26,640
you want to to the lambda security where

178
00:06:24,120 --> 00:06:28,680
security here is you want every attack

179
00:06:26,640 --> 00:06:30,300
to take two to the lambda operations in

180
00:06:28,680 --> 00:06:32,370
this talk I'm not going to be precise

181
00:06:30,300 --> 00:06:33,540
about what exactly an operation is I'm

182
00:06:32,370 --> 00:06:35,790
also going to ignore things like

183
00:06:33,540 --> 00:06:37,800
communication cost so let's just say two

184
00:06:35,790 --> 00:06:39,720
to the lambdas some simple operations

185
00:06:37,800 --> 00:06:41,130
and you have to look at attack papers to

186
00:06:39,720 --> 00:06:43,020
see the details

187
00:06:41,130 --> 00:06:45,450
to curve diffie-hellman if you want

188
00:06:43,020 --> 00:06:47,240
security level 2 to the lambda you need

189
00:06:45,450 --> 00:06:49,530
something like 2 to the 2 lambda

190
00:06:47,240 --> 00:06:51,780
possible keys because there's some

191
00:06:49,530 --> 00:06:53,489
square root attack taking advantage of

192
00:06:51,780 --> 00:06:55,919
the attack against the lifted curve

193
00:06:53,490 --> 00:06:57,750
diffie-hellman exploits the well-known

194
00:06:55,920 --> 00:07:00,510
worst case 2 average case reduction for

195
00:06:57,750 --> 00:07:02,310
elliptic curve diffie-hellman and does

196
00:07:00,510 --> 00:07:04,289
that in a way that reduces your security

197
00:07:02,310 --> 00:07:06,810
level for 2 to the 2 lambda keys down to

198
00:07:04,290 --> 00:07:09,090
only 2 to the lambda security and then

199
00:07:06,810 --> 00:07:11,160
to transmit they 2 to the 2 lambda keys

200
00:07:09,090 --> 00:07:11,900
you need about 2 lambda bits to

201
00:07:11,160 --> 00:07:14,280
communicate

202
00:07:11,900 --> 00:07:16,020
unfortunately post quantum that's broken

203
00:07:14,280 --> 00:07:17,969
by Shor's algorithm but we have lots

204
00:07:16,020 --> 00:07:20,520
more options and that's what gives us

205
00:07:17,970 --> 00:07:23,070
while psych and seaside and again CRS is

206
00:07:20,520 --> 00:07:24,990
very much like seaside except for being

207
00:07:23,070 --> 00:07:28,050
quite a few orders of magnitude slower

208
00:07:24,990 --> 00:07:30,600
let me just focus on seaside seaside is

209
00:07:28,050 --> 00:07:32,430
twice as big keys as traditional

210
00:07:30,600 --> 00:07:34,920
elliptic curve diffie-hellman for the

211
00:07:32,430 --> 00:07:38,130
same security level instead of say a 256

212
00:07:34,920 --> 00:07:42,000
bit 32 byte key you need say a 64 byte

213
00:07:38,130 --> 00:07:43,830
key psych is quite a bit bigger now here

214
00:07:42,000 --> 00:07:47,280
there's two variations you can do a

215
00:07:43,830 --> 00:07:50,010
compressed psych which is only what is

216
00:07:47,280 --> 00:07:51,570
that seven have seven times bigger than

217
00:07:50,010 --> 00:07:53,460
elliptic curve diffie-hellman or seven

218
00:07:51,570 --> 00:07:56,159
halves times bigger 3.5 times bigger

219
00:07:53,460 --> 00:07:57,419
than seaside or an uncompressed version

220
00:07:56,160 --> 00:07:59,160
which I don't think is going to last

221
00:07:57,420 --> 00:08:01,650
long term because the compressed version

222
00:07:59,160 --> 00:08:04,290
is getting faster and faster if you look

223
00:08:01,650 --> 00:08:06,900
post quantum then well if you just count

224
00:08:04,290 --> 00:08:10,410
at a cost naively then psych and

225
00:08:06,900 --> 00:08:11,909
compress psych get somewhat bigger i if

226
00:08:10,410 --> 00:08:13,410
you look at elliptic curve

227
00:08:11,910 --> 00:08:15,060
diffie-hellman again that's completely

228
00:08:13,410 --> 00:08:16,800
broken and then well what about seaside

229
00:08:15,060 --> 00:08:19,080
that's somewhere in the middle because

230
00:08:16,800 --> 00:08:22,080
there's a sub exponential time attack

231
00:08:19,080 --> 00:08:25,590
against CRS and seaside this goes back

232
00:08:22,080 --> 00:08:28,469
to 2010 tchodson Joensuu carve used

233
00:08:25,590 --> 00:08:31,049
cooper burg sub exponential time hidden

234
00:08:28,470 --> 00:08:33,000
shift algorithm or reg oves follow-up

235
00:08:31,050 --> 00:08:35,760
algorithm or there's another follow-up

236
00:08:33,000 --> 00:08:37,830
algorithm by cooper burg i same Cooper

237
00:08:35,760 --> 00:08:39,210
burg but better than the first paper

238
00:08:37,830 --> 00:08:40,500
actually also better than the second

239
00:08:39,210 --> 00:08:42,450
paper I don't know how many people were

240
00:08:40,500 --> 00:08:44,520
at the quack workshop over the weekend

241
00:08:42,450 --> 00:08:46,740
but you heard that Cooper burg 2.0 is

242
00:08:44,520 --> 00:08:49,350
better than Cooper burg 1.0 and better

243
00:08:46,740 --> 00:08:51,720
than reg EV I anyway that is a sub

244
00:08:49,350 --> 00:08:53,670
exponential time attack against CRS and

245
00:08:51,720 --> 00:08:55,260
seaside which means that you need super

246
00:08:53,670 --> 00:08:56,910
linear key sizes

247
00:08:55,260 --> 00:08:58,830
in order to resist the attack and now

248
00:08:56,910 --> 00:09:00,959
you can ask natural questions of what

249
00:08:58,830 --> 00:09:03,540
exactly the superlinear is when does it

250
00:09:00,960 --> 00:09:04,950
cross beyond the 21 lambda I mean it's

251
00:09:03,540 --> 00:09:07,319
super linear so it has to be bigger than

252
00:09:04,950 --> 00:09:08,580
21 lambda at some point how big this

253
00:09:07,320 --> 00:09:10,590
lambda have to be is that of

254
00:09:08,580 --> 00:09:12,600
cryptographic interest and so this

255
00:09:10,590 --> 00:09:14,640
starts me on my list of questions if you

256
00:09:12,600 --> 00:09:18,360
have a particular value of lambda say

257
00:09:14,640 --> 00:09:21,330
you want to to the 64 quantum operations

258
00:09:18,360 --> 00:09:24,180
to break your system or even more to to

259
00:09:21,330 --> 00:09:26,430
the 96 to to the 128 quantum operations

260
00:09:24,180 --> 00:09:28,800
to break your system what key size do

261
00:09:26,430 --> 00:09:30,660
you need for seaside to achieve that

262
00:09:28,800 --> 00:09:32,189
security level and this breaks up into

263
00:09:30,660 --> 00:09:34,050
lots of separate questions because

264
00:09:32,190 --> 00:09:35,340
there's there's actually a bunch of

265
00:09:34,050 --> 00:09:37,069
different attacks and then these sub

266
00:09:35,340 --> 00:09:39,840
exponential attacks in particular

267
00:09:37,070 --> 00:09:42,920
involve quite a few layers they involve

268
00:09:39,840 --> 00:09:45,540
first of all some bunch of queries that

269
00:09:42,920 --> 00:09:47,400
if you look at how Cooper Berg's

270
00:09:45,540 --> 00:09:49,230
algorithm finds a hidden shift it's not

271
00:09:47,400 --> 00:09:51,930
as powerful as Shor's algorithm it's not

272
00:09:49,230 --> 00:09:53,910
as fast it has some rapidly increasing

273
00:09:51,930 --> 00:09:55,949
number of queries but well it doesn't

274
00:09:53,910 --> 00:09:58,110
increase as exponentially it's just sub

275
00:09:55,950 --> 00:10:00,900
exponential and what exactly is that

276
00:09:58,110 --> 00:10:03,480
number of queries well even knowing that

277
00:10:00,900 --> 00:10:04,350
Cooper Berg's 2011 paper is better than

278
00:10:03,480 --> 00:10:06,300
the previous ones

279
00:10:04,350 --> 00:10:07,620
doesn't help you figure out a concrete

280
00:10:06,300 --> 00:10:09,240
answer to this because he just does

281
00:10:07,620 --> 00:10:11,400
asymptotics and it takes a lot of work

282
00:10:09,240 --> 00:10:13,620
to figure out what exactly the the costs

283
00:10:11,400 --> 00:10:15,600
are another question when you start

284
00:10:13,620 --> 00:10:18,360
digging down into the lower levels of

285
00:10:15,600 --> 00:10:20,550
the algorithm you see that it's not

286
00:10:18,360 --> 00:10:21,960
actually convenient you don't get the

287
00:10:20,550 --> 00:10:24,959
fastest attack under reasonable

288
00:10:21,960 --> 00:10:27,150
assumptions by generating a uniform

289
00:10:24,960 --> 00:10:29,160
random element of the group of secret

290
00:10:27,150 --> 00:10:31,560
keys it's much faster to generate

291
00:10:29,160 --> 00:10:33,060
something which is not exactly uniform

292
00:10:31,560 --> 00:10:36,449
but what does that do to Cooper Burke's

293
00:10:33,060 --> 00:10:38,400
algorithm it's not clear and similarly

294
00:10:36,450 --> 00:10:40,410
the computations get significantly

295
00:10:38,400 --> 00:10:42,750
faster if you allow some errors you can

296
00:10:40,410 --> 00:10:44,040
do everything error-free but if you

297
00:10:42,750 --> 00:10:47,010
allow some errors it makes everything

298
00:10:44,040 --> 00:10:48,089
faster too I'll get a little more into

299
00:10:47,010 --> 00:10:49,980
that in a moment

300
00:10:48,090 --> 00:10:52,080
and what effect does that have on Cooper

301
00:10:49,980 --> 00:10:54,000
Berg's algorithm again not clear neither

302
00:10:52,080 --> 00:10:56,490
of these questions is what this paper is

303
00:10:54,000 --> 00:10:58,980
about this papers about the third item

304
00:10:56,490 --> 00:11:01,020
on my list which is how expensive are

305
00:10:58,980 --> 00:11:02,490
each of the queries so these algorithms

306
00:11:01,020 --> 00:11:04,620
are doing a bunch of the attack

307
00:11:02,490 --> 00:11:07,530
algorithms are doing a bunch of queries

308
00:11:04,620 --> 00:11:08,320
which means evaluate the ice ogyny

309
00:11:07,530 --> 00:11:10,839
action

310
00:11:08,320 --> 00:11:14,500
on a superposition of all the possible

311
00:11:10,839 --> 00:11:16,149
secret keys and then how expensive for

312
00:11:14,500 --> 00:11:17,230
those queries how long does it take to

313
00:11:16,149 --> 00:11:19,769
compute nice ogyny

314
00:11:17,230 --> 00:11:22,750
on a quantum computer in superposition

315
00:11:19,769 --> 00:11:26,649
over all the secret keys and this is

316
00:11:22,750 --> 00:11:29,199
something where well we have 56 page

317
00:11:26,649 --> 00:11:31,449
paper which is what I'm not going to try

318
00:11:29,199 --> 00:11:33,910
to completely tell you about in the 20

319
00:11:31,449 --> 00:11:36,099
minutes that I have I so look online on

320
00:11:33,910 --> 00:11:37,719
quantum dot I saw Jenny org to see all

321
00:11:36,100 --> 00:11:39,250
the details of that I will tell you a

322
00:11:37,720 --> 00:11:40,680
little bit about the results try to get

323
00:11:39,250 --> 00:11:43,089
you interested in reading the paper

324
00:11:40,680 --> 00:11:44,589
another question that's not addressed in

325
00:11:43,089 --> 00:11:46,930
this paper is what if you look at

326
00:11:44,589 --> 00:11:48,579
communication costs or in general you

327
00:11:46,930 --> 00:11:50,859
look at how much Hardware you're using

328
00:11:48,579 --> 00:11:52,899
and how expensive is it really to run

329
00:11:50,860 --> 00:11:53,259
that hardware for the amount of time you

330
00:11:52,899 --> 00:11:54,910
need

331
00:11:53,259 --> 00:11:56,889
which for a quantum computer means

332
00:11:54,910 --> 00:11:58,870
you're constantly doing error correction

333
00:11:56,889 --> 00:12:01,389
on all of your qubits how expensive is

334
00:11:58,870 --> 00:12:03,670
that actual quantum computation and

335
00:12:01,389 --> 00:12:07,089
that's that'll be another 50 pages to to

336
00:12:03,670 --> 00:12:09,310
figure out in detail maybe the biggest

337
00:12:07,089 --> 00:12:11,110
takeaway message that I want you to

338
00:12:09,310 --> 00:12:13,689
remember and before I get into the

339
00:12:11,110 --> 00:12:16,360
details of what kind of results we get

340
00:12:13,690 --> 00:12:18,279
is that you can check these quantum

341
00:12:16,360 --> 00:12:20,500
algorithms there's a lot of mistakes in

342
00:12:18,279 --> 00:12:22,420
the algorithms literature generally and

343
00:12:20,500 --> 00:12:24,279
maybe they pile up specially in the

344
00:12:22,420 --> 00:12:26,139
quantum algorithms literature because

345
00:12:24,279 --> 00:12:28,240
people don't have to actually verify

346
00:12:26,139 --> 00:12:30,760
their results people don't have a

347
00:12:28,240 --> 00:12:32,649
quantum computer and so they say I'm

348
00:12:30,760 --> 00:12:34,329
sorry I didn't run the algorithm I've

349
00:12:32,649 --> 00:12:35,949
just proven it's correct or maybe even

350
00:12:34,329 --> 00:12:38,739
not that it seems like it's correct and

351
00:12:35,949 --> 00:12:40,510
sorry I can't try it out I think that's

352
00:12:38,740 --> 00:12:42,819
a cheap way out there's actually a bunch

353
00:12:40,510 --> 00:12:45,370
of quantum algorithms that we can check

354
00:12:42,819 --> 00:12:47,170
very confidently on our current

355
00:12:45,370 --> 00:12:49,630
computers so what I want you to remember

356
00:12:47,170 --> 00:12:51,279
is that you can verify the cost of a

357
00:12:49,630 --> 00:12:54,639
quantum computation using your laptop

358
00:12:51,279 --> 00:12:58,089
for instance in the particular quantum

359
00:12:54,639 --> 00:13:00,040
computation that this paper is about we

360
00:12:58,089 --> 00:13:01,750
have software go again to quantum

361
00:13:00,040 --> 00:13:04,449
dodging or you can just download

362
00:13:01,750 --> 00:13:07,630
software what exactly is it doing well

363
00:13:04,449 --> 00:13:09,670
it's running at a quantum misogyny

364
00:13:07,630 --> 00:13:11,800
computation well forget the quantum it's

365
00:13:09,670 --> 00:13:14,380
running a nice arginine computation

366
00:13:11,800 --> 00:13:17,439
using a sequence of bit operations and

367
00:13:14,380 --> 00:13:19,899
xan doors and X ORS and nots and it also

368
00:13:17,439 --> 00:13:21,430
counts how many nonlinear operations and

369
00:13:19,899 --> 00:13:22,150
linear operations there are people

370
00:13:21,430 --> 00:13:23,290
usually

371
00:13:22,150 --> 00:13:25,360
with these because the costs are

372
00:13:23,290 --> 00:13:27,400
different in traditional hardware the

373
00:13:25,360 --> 00:13:29,170
linear operations are actually a little

374
00:13:27,400 --> 00:13:30,880
more expensive in quantum hardware the

375
00:13:29,170 --> 00:13:32,260
nonlinear operations are much more

376
00:13:30,880 --> 00:13:34,120
expensive but anyway all of that is

377
00:13:32,260 --> 00:13:36,340
tallied automatically by the software

378
00:13:34,120 --> 00:13:38,410
and then what does this have to do with

379
00:13:36,340 --> 00:13:40,990
a quantum computation well there's some

380
00:13:38,410 --> 00:13:43,060
standard translations which say if you

381
00:13:40,990 --> 00:13:44,680
can do bit operations for your

382
00:13:43,060 --> 00:13:48,369
computation if you have a directed

383
00:13:44,680 --> 00:13:51,400
acyclic graph of bit operations and then

384
00:13:48,370 --> 00:13:53,440
you want to do a reversible computation

385
00:13:51,400 --> 00:13:56,170
which constrains your bit operations you

386
00:13:53,440 --> 00:13:58,180
can no longer create bits and erase bits

387
00:13:56,170 --> 00:14:00,250
a reversible computation you can do

388
00:13:58,180 --> 00:14:04,599
things like take 3 bits X Y Z and

389
00:14:00,250 --> 00:14:07,720
replace them by X Y Z plus x times y so

390
00:14:04,600 --> 00:14:10,000
override Z with Z plus the like Z X or

391
00:14:07,720 --> 00:14:11,470
the end of X&Y and that's a reversible

392
00:14:10,000 --> 00:14:13,720
operation that's called the toughly

393
00:14:11,470 --> 00:14:15,130
operation and that is something that if

394
00:14:13,720 --> 00:14:16,570
you do it again you get back to the

395
00:14:15,130 --> 00:14:18,430
original input and there's a few of

396
00:14:16,570 --> 00:14:20,020
these operations where those are the

397
00:14:18,430 --> 00:14:22,120
basic operations you're allowed to use

398
00:14:20,020 --> 00:14:23,680
in a reversible circuit instead of and

399
00:14:22,120 --> 00:14:26,290
and/or an X or not and there's a

400
00:14:23,680 --> 00:14:28,630
completely generic way to take the bit

401
00:14:26,290 --> 00:14:31,540
operations and turn that into it most to

402
00:14:28,630 --> 00:14:33,460
be reversible bit operations at the cost

403
00:14:31,540 --> 00:14:34,630
of using a whole bunch of space I'll say

404
00:14:33,460 --> 00:14:36,940
a bit more about that in a moment

405
00:14:34,630 --> 00:14:39,970
once you have reversible operations then

406
00:14:36,940 --> 00:14:42,160
you automatically get a bunch of quantum

407
00:14:39,970 --> 00:14:44,770
operations to do the same computation on

408
00:14:42,160 --> 00:14:47,260
a superposition of inputs and the factor

409
00:14:44,770 --> 00:14:48,970
there is at most a factor of 7 for each

410
00:14:47,260 --> 00:14:51,670
tally gate turning into what are called

411
00:14:48,970 --> 00:14:53,920
T gates in quantum computation and you

412
00:14:51,670 --> 00:14:55,780
can also look at the cost of the linear

413
00:14:53,920 --> 00:14:57,520
operations and you get some smaller

414
00:14:55,780 --> 00:14:59,860
factor for those and you can also try to

415
00:14:57,520 --> 00:15:02,050
optimize these these you don't always

416
00:14:59,860 --> 00:15:03,490
need seven times as many t gates it's

417
00:15:02,050 --> 00:15:06,060
awfully gates you don't always need

418
00:15:03,490 --> 00:15:08,440
twice as many toefl ease as ands and ORS

419
00:15:06,060 --> 00:15:11,229
when you try to optimize these you might

420
00:15:08,440 --> 00:15:12,880
save a well two or three bits in the in

421
00:15:11,230 --> 00:15:15,130
the final runtime but we're much more

422
00:15:12,880 --> 00:15:17,620
concerned with the big picture of 40

423
00:15:15,130 --> 00:15:20,590
bits or 80 bits of or 128 bits of

424
00:15:17,620 --> 00:15:22,300
security so okay there's some limited

425
00:15:20,590 --> 00:15:23,740
factor there between the number of bit

426
00:15:22,300 --> 00:15:25,540
operations you need and the number of

427
00:15:23,740 --> 00:15:27,400
quantum gates you need there's more you

428
00:15:25,540 --> 00:15:29,230
have to verify than just the operation

429
00:15:27,400 --> 00:15:31,270
counts like maybe you care whether the

430
00:15:29,230 --> 00:15:32,710
computation actually works whether it

431
00:15:31,270 --> 00:15:35,640
computes lysogeny and that's something

432
00:15:32,710 --> 00:15:37,530
where we have some sage scripts compare

433
00:15:35,640 --> 00:15:38,580
to the output of these bid operations

434
00:15:37,530 --> 00:15:40,410
it's really helpful to have your

435
00:15:38,580 --> 00:15:42,600
computer running these computations so

436
00:15:40,410 --> 00:15:44,969
you can just try and check we also have

437
00:15:42,600 --> 00:15:46,830
some errors to speed up the computation

438
00:15:44,970 --> 00:15:48,330
we limit the computation time to the

439
00:15:46,830 --> 00:15:50,310
point where we have a noticeable number

440
00:15:48,330 --> 00:15:51,990
of errors and that's something where we

441
00:15:50,310 --> 00:15:53,699
had to do some generating function

442
00:15:51,990 --> 00:15:56,040
computations to figure out what the

443
00:15:53,700 --> 00:15:57,810
error rate should be and check that by

444
00:15:56,040 --> 00:15:59,370
pumping up the error rate to something

445
00:15:57,810 --> 00:16:00,780
we can measure by trying out the

446
00:15:59,370 --> 00:16:02,730
computation and seeing how often it

447
00:16:00,780 --> 00:16:04,560
works all right

448
00:16:02,730 --> 00:16:07,710
case study to finish things off in last

449
00:16:04,560 --> 00:16:10,949
4 minutes let me focus on Seaside 512 so

450
00:16:07,710 --> 00:16:13,490
this is with 512 bit 64 byte public keys

451
00:16:10,950 --> 00:16:15,600
how secure is this pre quantum it's

452
00:16:13,490 --> 00:16:18,660
reasonably clear that all the algorithms

453
00:16:15,600 --> 00:16:22,290
we know it's similar security to 256 bit

454
00:16:18,660 --> 00:16:24,600
elliptic curves what about with this sub

455
00:16:22,290 --> 00:16:26,520
exponential time attack well there's

456
00:16:24,600 --> 00:16:29,280
some assumptions here about what the

457
00:16:26,520 --> 00:16:32,550
group elements are that's this -5

458
00:16:29,280 --> 00:16:34,560
through 574 integers between minus 5 3 5

459
00:16:32,550 --> 00:16:37,140
and what error rate we're tolerating

460
00:16:34,560 --> 00:16:38,790
where 2 to the minus 30 to might be good

461
00:16:37,140 --> 00:16:40,319
enough for running Cupra Berg's

462
00:16:38,790 --> 00:16:42,510
algorithm probably is good enough for

463
00:16:40,320 --> 00:16:45,060
running Cooper Berg's algorithm and

464
00:16:42,510 --> 00:16:46,680
under these assumptions if you count the

465
00:16:45,060 --> 00:16:48,119
number of nonlinear bit operations

466
00:16:46,680 --> 00:16:50,459
there's another paper which

467
00:16:48,120 --> 00:16:51,900
independently had an algorithm for this

468
00:16:50,460 --> 00:16:53,430
and we counted the number of bit

469
00:16:51,900 --> 00:16:56,250
operations for that it's about 2 to the

470
00:16:53,430 --> 00:17:00,780
50 bit operations which we optimized a

471
00:16:56,250 --> 00:17:02,880
ton out of and got down to a 2 to the 40

472
00:17:00,780 --> 00:17:04,619
and then well okay with even a little

473
00:17:02,880 --> 00:17:06,569
more work our best result in the paper

474
00:17:04,619 --> 00:17:09,239
zero point seven times two to the forty

475
00:17:06,569 --> 00:17:13,500
bit operations nonlinear bit operations

476
00:17:09,240 --> 00:17:15,839
to compute one seaside 512 group action

477
00:17:13,500 --> 00:17:18,630
under these assumptions about how many

478
00:17:15,839 --> 00:17:21,929
errors we're tolerating and how big the

479
00:17:18,630 --> 00:17:24,240
inputs are all right if you translate

480
00:17:21,930 --> 00:17:25,949
that from bit operations on the laptop

481
00:17:24,240 --> 00:17:27,990
to what is the quantum computer going to

482
00:17:25,949 --> 00:17:30,810
take then there's that factor of x 2 and

483
00:17:27,990 --> 00:17:32,610
x 7 from the previous slide using a

484
00:17:30,810 --> 00:17:34,800
whole bunch of qubits I said if you have

485
00:17:32,610 --> 00:17:36,899
B but bit operations you suddenly need B

486
00:17:34,800 --> 00:17:39,060
bits which means if you start with 2 to

487
00:17:36,900 --> 00:17:41,100
the 40 bit operations you have about 2

488
00:17:39,060 --> 00:17:42,899
to the 40 bits which turned into 2 to

489
00:17:41,100 --> 00:17:44,459
the 40 cubits if you think that's a

490
00:17:42,900 --> 00:17:47,130
crazy number of qubits you're probably

491
00:17:44,460 --> 00:17:49,320
happier with you can at the expense of a

492
00:17:47,130 --> 00:17:49,860
factor of 4 in the run time you can get

493
00:17:49,320 --> 00:17:52,770
the number

494
00:17:49,860 --> 00:17:54,419
it's down to two to the twenty which is

495
00:17:52,770 --> 00:17:56,730
much more reasonable and actually even

496
00:17:54,420 --> 00:17:58,880
if you can afford to to the 40 cubits

497
00:17:56,730 --> 00:18:01,140
it's much more cost-effective to use a

498
00:17:58,880 --> 00:18:03,440
bunch of separate two to the twenty

499
00:18:01,140 --> 00:18:06,480
cubits for doing this four times as many

500
00:18:03,440 --> 00:18:08,940
operations computation if you care about

501
00:18:06,480 --> 00:18:10,830
the total gates which some of the papers

502
00:18:08,940 --> 00:18:12,420
on this look at in quantum computations

503
00:18:10,830 --> 00:18:15,090
the T gates are about a hundred times

504
00:18:12,420 --> 00:18:16,890
more expensive than the linear gates but

505
00:18:15,090 --> 00:18:18,570
we counted the total as well and it's a

506
00:18:16,890 --> 00:18:20,010
little more than they two to the forty

507
00:18:18,570 --> 00:18:22,678
five point three there it's up to two to

508
00:18:20,010 --> 00:18:24,600
the forty six point nine all right if

509
00:18:22,679 --> 00:18:26,190
you want variations in all these numbers

510
00:18:24,600 --> 00:18:27,928
of course the paper gives lots of other

511
00:18:26,190 --> 00:18:30,510
examples and all the software's you can

512
00:18:27,929 --> 00:18:32,010
try different sizes yourself what does

513
00:18:30,510 --> 00:18:34,200
this mean for the complete attack

514
00:18:32,010 --> 00:18:38,070
against Eastside 512 this is my last

515
00:18:34,200 --> 00:18:40,380
slide well one issue is how big those

516
00:18:38,070 --> 00:18:43,439
inputs have to be issues of how you can

517
00:18:40,380 --> 00:18:45,360
get a uniform group element it's hard to

518
00:18:43,440 --> 00:18:47,400
do that inside the attack at least it

519
00:18:45,360 --> 00:18:49,649
doesn't seem that the attack works if

520
00:18:47,400 --> 00:18:51,600
you just use the minus five through five

521
00:18:49,650 --> 00:18:52,980
the reason that we chose them is five

522
00:18:51,600 --> 00:18:55,379
through five is an example is that's

523
00:18:52,980 --> 00:18:57,809
what the seaside user does normally but

524
00:18:55,380 --> 00:18:59,520
the attacker doesn't seem to get a work

525
00:18:57,809 --> 00:19:01,049
in Cooper burg algorithm with that

526
00:18:59,520 --> 00:19:03,090
there's another paper from bonito and

527
00:19:01,049 --> 00:19:06,360
wrote lower which claims that you get

528
00:19:03,090 --> 00:19:08,520
about a factor of four slow down from

529
00:19:06,360 --> 00:19:10,379
dealing with us and they also claim that

530
00:19:08,520 --> 00:19:12,210
you need about two to the thirty two

531
00:19:10,380 --> 00:19:14,610
point five queries using about a billion

532
00:19:12,210 --> 00:19:17,340
two billion cubits in order to do the

533
00:19:14,610 --> 00:19:19,379
Cooper burg layer of the computation so

534
00:19:17,340 --> 00:19:20,970
two to the thirty two point five times

535
00:19:19,380 --> 00:19:22,320
two squared times the two to the forty

536
00:19:20,970 --> 00:19:25,520
six point nine from the previous slide

537
00:19:22,320 --> 00:19:28,049
gives you two to the 81.4 total gates

538
00:19:25,520 --> 00:19:28,710
assuming that the the two claims here

539
00:19:28,049 --> 00:19:31,230
are correct

540
00:19:28,710 --> 00:19:33,030
maybe those are overly optimistic or

541
00:19:31,230 --> 00:19:34,770
maybe there's some faster algorithms

542
00:19:33,030 --> 00:19:37,080
than what they were talking about this

543
00:19:34,770 --> 00:19:38,879
paper is just focusing on the the ratio

544
00:19:37,080 --> 00:19:40,649
between like how expensive is each query

545
00:19:38,880 --> 00:19:43,380
and then you also have to figure out the

546
00:19:40,650 --> 00:19:45,120
number of queries etc if you count

547
00:19:43,380 --> 00:19:46,919
communication costs then while this is

548
00:19:45,120 --> 00:19:47,879
still using a huge number of qubits and

549
00:19:46,919 --> 00:19:49,230
that's definitely going to make

550
00:19:47,880 --> 00:19:50,820
everything more expensive because you

551
00:19:49,230 --> 00:19:52,919
have to be error-correcting all those

552
00:19:50,820 --> 00:19:56,790
qubits but we did not figure that out in

553
00:19:52,919 --> 00:19:59,160
this paper finally let me comment on in

554
00:19:56,790 --> 00:20:01,860
the bow Natasha wrote lowered paper they

555
00:19:59,160 --> 00:20:03,660
say under the same assumptions that

556
00:20:01,860 --> 00:20:06,750
actually it's only two to the seventy

557
00:20:03,660 --> 00:20:09,120
Gate which comes from their being a

558
00:20:06,750 --> 00:20:11,640
thousand times too optimistic about the

559
00:20:09,120 --> 00:20:13,469
cost of doing the queries and we

560
00:20:11,640 --> 00:20:17,190
identify where the basic points of

561
00:20:13,470 --> 00:20:18,990
optimism are and save well this too to

562
00:20:17,190 --> 00:20:21,150
the 71 is not something that with any

563
00:20:18,990 --> 00:20:22,590
algorithm that we know it's possible to

564
00:20:21,150 --> 00:20:24,330
achieve of course if you come up with

565
00:20:22,590 --> 00:20:25,949
something better than maybe you can get

566
00:20:24,330 --> 00:20:27,629
the two to the eighty-one down somewhat

567
00:20:25,950 --> 00:20:29,220
below two to the eighty try to get even

568
00:20:27,630 --> 00:20:30,930
below two to the 70 maybe it's possible

569
00:20:29,220 --> 00:20:33,870
and then with your quantum computer and

570
00:20:30,930 --> 00:20:36,180
2 to the 70 qubit operations on two to

571
00:20:33,870 --> 00:20:39,179
the 31 or maybe even fewer qubits you

572
00:20:36,180 --> 00:20:41,130
can break the 64 byte public key seaside

573
00:20:39,180 --> 00:20:41,610
512 I hope I've gotten you interested in

574
00:20:41,130 --> 00:20:43,770
the paper

575
00:20:41,610 --> 00:20:45,419
if so look at quantum that I saw Jenny

576
00:20:43,770 --> 00:20:48,860
org and take a look at the details

577
00:20:45,420 --> 00:20:48,860
that's it thank you for your time

578
00:20:53,300 --> 00:21:09,060
any questions so then you mentioned that

579
00:21:07,500 --> 00:21:10,560
you didn't do the fault tolerant stuff

580
00:21:09,060 --> 00:21:12,179
when you need 50 pages for that so

581
00:21:10,560 --> 00:21:14,190
actually you don't need so much like we

582
00:21:12,180 --> 00:21:15,210
we did this for char and and so on so

583
00:21:14,190 --> 00:21:16,860
it's pretty straightforward

584
00:21:15,210 --> 00:21:18,540
if you have the gate counts and I did it

585
00:21:16,860 --> 00:21:20,250
now basically it for for you so I can

586
00:21:18,540 --> 00:21:21,720
tell you some comfort well so let me be

587
00:21:20,250 --> 00:21:23,340
clear about what the hard part is so I

588
00:21:21,720 --> 00:21:24,750
agree that it's it's reasonably well

589
00:21:23,340 --> 00:21:26,159
understood what the costs are for

590
00:21:24,750 --> 00:21:27,450
instance doing the surface code if you

591
00:21:26,160 --> 00:21:29,160
know what your error rate is at the

592
00:21:27,450 --> 00:21:31,290
lowest level the problem is that all the

593
00:21:29,160 --> 00:21:33,390
higher levels of the computation we have

594
00:21:31,290 --> 00:21:35,190
not looked at what depth we need for

595
00:21:33,390 --> 00:21:37,290
doing any of these computations so the

596
00:21:35,190 --> 00:21:39,000
ISO Janee computations have some chunks

597
00:21:37,290 --> 00:21:41,040
where we can parallelize it and some

598
00:21:39,000 --> 00:21:42,960
chunks where it seems to be that we need

599
00:21:41,040 --> 00:21:45,480
to do stuff serially and doing stuff

600
00:21:42,960 --> 00:21:47,400
serially means that well you can figure

601
00:21:45,480 --> 00:21:48,900
out with this number of qubits how long

602
00:21:47,400 --> 00:21:50,550
you have to go but it's much more than

603
00:21:48,900 --> 00:21:52,380
you want if we can find any sort of

604
00:21:50,550 --> 00:21:54,360
parallelization then it makes it much

605
00:21:52,380 --> 00:21:56,070
more effective when you do the while the

606
00:21:54,360 --> 00:21:58,080
quantum volume the area times at the

607
00:21:56,070 --> 00:22:00,330
time for your computation I agree that

608
00:21:58,080 --> 00:22:02,760
the lowest level things are increasingly

609
00:22:00,330 --> 00:22:04,860
well understood but at the higher levels

610
00:22:02,760 --> 00:22:07,320
we did not try to optimize what the

611
00:22:04,860 --> 00:22:09,629
depth is of the ice ogyny computation

612
00:22:07,320 --> 00:22:11,760
for reversible or equivalently quantum

613
00:22:09,630 --> 00:22:13,680
computation and that would be necessary

614
00:22:11,760 --> 00:22:16,320
to really understand what the cost is if

615
00:22:13,680 --> 00:22:17,430
you just do something naive and base it

616
00:22:16,320 --> 00:22:18,780
on what's understood

617
00:22:17,430 --> 00:22:23,270
levels that I think you'll be

618
00:22:18,780 --> 00:22:23,270
overestimating the security Thanks

619
00:22:26,090 --> 00:22:32,149
any other questions ok well let's thank

620
00:22:31,020 --> 00:22:36,139
the speaker again

621
00:22:32,150 --> 00:22:36,140
[Applause]

