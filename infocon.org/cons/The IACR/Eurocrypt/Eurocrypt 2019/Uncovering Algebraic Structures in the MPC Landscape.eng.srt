1
00:00:00,000 --> 00:00:05,850
um the joint work with navneet Agarwal

2
00:00:03,899 --> 00:00:09,000
and Sanatana who were undergraduate

3
00:00:05,850 --> 00:00:11,099
students at IIT Bombay so I'm talking

4
00:00:09,000 --> 00:00:13,019
about MPC or secure multi-party

5
00:00:11,099 --> 00:00:15,570
computation so let me just start by

6
00:00:13,019 --> 00:00:17,609
reminding you the setting so there are a

7
00:00:15,570 --> 00:00:20,010
bunch of parties they get they all have

8
00:00:17,609 --> 00:00:21,210
inputs and they may all want to compute

9
00:00:20,010 --> 00:00:24,090
some functions so they could all

10
00:00:21,210 --> 00:00:26,070
potentially get outputs and to compute

11
00:00:24,090 --> 00:00:28,800
this function on their inputs they run a

12
00:00:26,070 --> 00:00:30,810
protocol they talk to each other and the

13
00:00:28,800 --> 00:00:32,820
requirement is that they should learn

14
00:00:30,810 --> 00:00:34,649
nothing other than you know their own

15
00:00:32,820 --> 00:00:36,090
inputs and the outputs of the function

16
00:00:34,649 --> 00:00:39,899
right so what are else they see in the

17
00:00:36,090 --> 00:00:42,840
protocol could have been simulated it's

18
00:00:39,899 --> 00:00:45,780
a very fundamental model you know since

19
00:00:42,840 --> 00:00:47,640
80s we have cryptographers have been

20
00:00:45,780 --> 00:00:51,600
working on this we know a lot about it

21
00:00:47,640 --> 00:00:53,160
and you know one of the foundational

22
00:00:51,600 --> 00:00:55,860
questions the fundamental questions in

23
00:00:53,160 --> 00:00:57,690
about MPC is which functions admit

24
00:00:55,860 --> 00:00:59,910
secure multi-party computation protocols

25
00:00:57,690 --> 00:01:01,190
and you'd think that by now we should

26
00:00:59,910 --> 00:01:04,429
know everything about it

27
00:01:01,190 --> 00:01:06,810
unfortunately even the most basic

28
00:01:04,430 --> 00:01:09,090
setting for this problem things are wide

29
00:01:06,810 --> 00:01:12,030
open so what do I mean by the most basic

30
00:01:09,090 --> 00:01:14,250
setting information theoretic security

31
00:01:12,030 --> 00:01:16,020
with no restrictions on number of

32
00:01:14,250 --> 00:01:18,659
parties were corrupted we do of course

33
00:01:16,020 --> 00:01:20,729
know a lot of very important in a

34
00:01:18,659 --> 00:01:23,400
powerful positive results when you do

35
00:01:20,729 --> 00:01:24,990
put restrictions but I would think that

36
00:01:23,400 --> 00:01:27,930
you know this would be the most basic

37
00:01:24,990 --> 00:01:30,539
problem if if not for if you know if we

38
00:01:27,930 --> 00:01:33,659
didn't have all those positives of this

39
00:01:30,540 --> 00:01:36,270
the first thing you would think of we

40
00:01:33,659 --> 00:01:38,549
know a little bit for the setting of to

41
00:01:36,270 --> 00:01:40,500
party functions do down to party

42
00:01:38,549 --> 00:01:42,060
functions we do have a full

43
00:01:40,500 --> 00:01:44,100
characterization of what's possible and

44
00:01:42,060 --> 00:01:47,280
what's not and in this work we are

45
00:01:44,100 --> 00:01:51,539
interested in you know more than two

46
00:01:47,280 --> 00:01:52,890
parties right and we all study mostly in

47
00:01:51,540 --> 00:01:54,630
this talk I will talk about passive

48
00:01:52,890 --> 00:01:56,790
security so the honest bit curious

49
00:01:54,630 --> 00:01:58,320
adversity setting and we do have the

50
00:01:56,790 --> 00:02:03,390
source on UC security also which I'll

51
00:01:58,320 --> 00:02:08,489
mention towards the end so to understand

52
00:02:03,390 --> 00:02:10,979
the feasibility question for MPC we also

53
00:02:08,489 --> 00:02:13,590
in this work introduced some minimal or

54
00:02:10,979 --> 00:02:15,599
simple models of MPC

55
00:02:13,590 --> 00:02:17,130
for aggregating functionality so what do

56
00:02:15,599 --> 00:02:20,640
we mean by aggregating functionalities

57
00:02:17,130 --> 00:02:22,920
oh there's just one party who has output

58
00:02:20,640 --> 00:02:24,510
the aggregator and all the other parties

59
00:02:22,920 --> 00:02:27,030
have inputs and they don't have any

60
00:02:24,510 --> 00:02:30,510
outputs okay

61
00:02:27,030 --> 00:02:32,099
so simple models of MPC for this these

62
00:02:30,510 --> 00:02:34,500
kind of aggregating functionalities have

63
00:02:32,099 --> 00:02:36,450
been around for a while and one of the

64
00:02:34,500 --> 00:02:39,450
most influential works in this setting

65
00:02:36,450 --> 00:02:41,579
is by Phi geek early on an hour from the

66
00:02:39,450 --> 00:02:44,609
90s so introduces a private simultaneous

67
00:02:41,580 --> 00:02:46,830
messages model so in this model all the

68
00:02:44,610 --> 00:02:49,170
input players and a single message to

69
00:02:46,830 --> 00:02:51,090
the output player and you know it has to

70
00:02:49,170 --> 00:02:53,488
compute the output but we also want

71
00:02:51,090 --> 00:02:56,610
security so for that they allow a

72
00:02:53,489 --> 00:03:00,120
trusted party a coordinator who can a

73
00:02:56,610 --> 00:03:03,900
priori send some correlated randomness

74
00:03:00,120 --> 00:03:06,750
to the parties they also require

75
00:03:03,900 --> 00:03:09,299
security only when I mean only against

76
00:03:06,750 --> 00:03:10,440
the corruption of the output party so

77
00:03:09,299 --> 00:03:14,190
none of the input parties can be

78
00:03:10,440 --> 00:03:16,829
corrupted more recently our Mo's and his

79
00:03:14,190 --> 00:03:20,100
co-authors introduced another model

80
00:03:16,830 --> 00:03:21,750
called ni NPC where they do allow all

81
00:03:20,100 --> 00:03:25,530
parties to be corrupt any subset of

82
00:03:21,750 --> 00:03:29,989
parties could be corrupt but they make

83
00:03:25,530 --> 00:03:32,519
another restriction on the insecurities

84
00:03:29,989 --> 00:03:34,859
namely the adversary is allowed to learn

85
00:03:32,519 --> 00:03:37,880
not just the output of the function but

86
00:03:34,859 --> 00:03:40,470
the residual input the residual function

87
00:03:37,880 --> 00:03:42,359
of the inputs of the honest place that

88
00:03:40,470 --> 00:03:44,700
is to say the adversity is allowed to

89
00:03:42,359 --> 00:03:46,950
learn the output of the function on all

90
00:03:44,700 --> 00:03:49,138
possible settings of its own inputs of

91
00:03:46,950 --> 00:03:51,209
the corrupt parties inputs with the

92
00:03:49,139 --> 00:03:53,450
inputs of the honest player is fixed

93
00:03:51,209 --> 00:03:56,310
okay so you can evaluate the function on

94
00:03:53,450 --> 00:03:58,369
you know keep their own splice inputs

95
00:03:56,310 --> 00:04:01,290
fixed and run through all possible

96
00:03:58,370 --> 00:04:03,180
inputs of the corrupt players so that is

97
00:04:01,290 --> 00:04:07,230
allowed in the ideal world that's given

98
00:04:03,180 --> 00:04:09,810
as legitimate information and in either

99
00:04:07,230 --> 00:04:11,940
of these models we understand

100
00:04:09,810 --> 00:04:14,730
feasibility fully in fact every function

101
00:04:11,940 --> 00:04:17,760
can be securely computed under these in

102
00:04:14,730 --> 00:04:21,120
these models so these models are not so

103
00:04:17,760 --> 00:04:24,300
much you know trying to learn about

104
00:04:21,120 --> 00:04:26,010
feasibility question it's about asking

105
00:04:24,300 --> 00:04:27,240
questions like a computation of

106
00:04:26,010 --> 00:04:30,090
complexity

107
00:04:27,240 --> 00:04:31,740
these problems right in our case we are

108
00:04:30,090 --> 00:04:35,580
interested in the feasibility question

109
00:04:31,740 --> 00:04:38,310
of MPC so what we introduce is a new

110
00:04:35,580 --> 00:04:40,198
model called you know we do of course

111
00:04:38,310 --> 00:04:43,289
talk about MPC but we also introduce a

112
00:04:40,199 --> 00:04:45,660
new model called unassisted ni MPC or

113
00:04:43,289 --> 00:04:47,729
you and I have PC so how does it work

114
00:04:45,660 --> 00:04:50,819
it's like and I am PC but we don't have

115
00:04:47,729 --> 00:04:53,310
the coordinator and also we don't allow

116
00:04:50,819 --> 00:04:54,810
the output party the star in the outfit

117
00:04:53,310 --> 00:04:56,819
where you have removed it to say that

118
00:04:54,810 --> 00:04:58,199
their party is not allowed to learn the

119
00:04:56,819 --> 00:05:02,310
residual function so it's just like an

120
00:04:58,199 --> 00:05:04,020
MPC protocol but we do allow us to phase

121
00:05:02,310 --> 00:05:06,300
computations so there's a first phase

122
00:05:04,020 --> 00:05:08,130
before the inputs come in where the

123
00:05:06,300 --> 00:05:09,900
input players can talk to each other and

124
00:05:08,130 --> 00:05:11,580
then there is a phase when the input

125
00:05:09,900 --> 00:05:13,320
coming they just send a single message

126
00:05:11,580 --> 00:05:17,370
to the output layer okay so that is

127
00:05:13,320 --> 00:05:20,699
unassisted and I am PC our most minimal

128
00:05:17,370 --> 00:05:24,900
model is for be called uni MPC star

129
00:05:20,699 --> 00:05:27,479
where in the pre input phase model of in

130
00:05:24,900 --> 00:05:30,030
pre input phase the party sent a single

131
00:05:27,479 --> 00:05:32,460
message to each other over in a private

132
00:05:30,030 --> 00:05:34,020
channels right so it's a single message

133
00:05:32,460 --> 00:05:35,400
and then they get the inputs then they

134
00:05:34,020 --> 00:05:38,039
send a single message to the output

135
00:05:35,400 --> 00:05:40,530
player so that's our basic model so why

136
00:05:38,039 --> 00:05:43,259
are these models relevant to the study

137
00:05:40,530 --> 00:05:46,440
of feasibility question in MPC if you

138
00:05:43,259 --> 00:05:48,240
show an uni MPC Star protocol it's

139
00:05:46,440 --> 00:05:50,759
automatically you an MPC protocol which

140
00:05:48,240 --> 00:05:52,830
is automatically an MPC protocol so the

141
00:05:50,759 --> 00:05:55,169
security notion and the communication

142
00:05:52,830 --> 00:05:57,599
pattern and everything here is

143
00:05:55,169 --> 00:06:00,210
consistent with on the corruption model

144
00:05:57,599 --> 00:06:02,310
is all what is allowed in MPC right so

145
00:06:00,210 --> 00:06:04,849
protocol that's secure in either of

146
00:06:02,310 --> 00:06:08,130
these models is also an MPC protocol

147
00:06:04,849 --> 00:06:11,270
okay so now let me actually show you the

148
00:06:08,130 --> 00:06:15,150
Russell's we have before you know I

149
00:06:11,270 --> 00:06:17,549
explained them so this is the landscape

150
00:06:15,150 --> 00:06:18,750
in the sense you know every point here

151
00:06:17,550 --> 00:06:21,539
is supposed to be a function of

152
00:06:18,750 --> 00:06:23,130
functionality and we have these three

153
00:06:21,539 --> 00:06:25,289
sets right the set of functionalities

154
00:06:23,130 --> 00:06:27,090
which have and PC protocols and some

155
00:06:25,289 --> 00:06:30,030
subset of them have you and I'm PC and

156
00:06:27,090 --> 00:06:32,310
some subset have uni MPC Star protocols

157
00:06:30,030 --> 00:06:34,888
we don't fully understand what these

158
00:06:32,310 --> 00:06:36,839
sets are right even after our work you

159
00:06:34,889 --> 00:06:38,690
know it's we don't fully understand what

160
00:06:36,839 --> 00:06:41,030
we can't deliver following

161
00:06:38,690 --> 00:06:44,380
there is a class which will define you

162
00:06:41,030 --> 00:06:47,539
know in a combinatorial or algebraic way

163
00:06:44,380 --> 00:06:50,540
class of functions called CPS describe

164
00:06:47,540 --> 00:06:52,640
what CPS is in a bit and all MPC

165
00:06:50,540 --> 00:06:54,470
protocols live inside this class all

166
00:06:52,640 --> 00:06:57,680
impede all functionalities within PC

167
00:06:54,470 --> 00:07:00,170
protocols live inside this course and on

168
00:06:57,680 --> 00:07:02,600
the other hand we can sandwich all these

169
00:07:00,170 --> 00:07:05,330
classes you know within or we have

170
00:07:02,600 --> 00:07:07,970
another class the CP SS which also L

171
00:07:05,330 --> 00:07:09,919
describe in a second it's also defined

172
00:07:07,970 --> 00:07:13,030
comm unit really are also correctly and

173
00:07:09,920 --> 00:07:15,260
we show that this each class of CPS's

174
00:07:13,030 --> 00:07:17,750
functionalities do actually have you and

175
00:07:15,260 --> 00:07:19,940
i MPC star protocols right so the gap is

176
00:07:17,750 --> 00:07:24,080
between these two things there's a extra

177
00:07:19,940 --> 00:07:25,040
s that's that's confounding s and so let

178
00:07:24,080 --> 00:07:26,479
me first tell you about these two

179
00:07:25,040 --> 00:07:27,470
reserves and we have a few more things

180
00:07:26,480 --> 00:07:30,380
in the paper as you have mentioned

181
00:07:27,470 --> 00:07:32,930
towards the end okay so but first I

182
00:07:30,380 --> 00:07:35,330
should tell about CPS and CPS SR these

183
00:07:32,930 --> 00:07:37,190
are names we came up with you know if

184
00:07:35,330 --> 00:07:38,930
you have seen these things elsewhere I'd

185
00:07:37,190 --> 00:07:41,900
be happy to know there are very natural

186
00:07:38,930 --> 00:07:44,330
objects I just don't know you know I

187
00:07:41,900 --> 00:07:47,690
don't know any standard name for these

188
00:07:44,330 --> 00:07:51,460
things so what is an N M CPS a CPS

189
00:07:47,690 --> 00:07:55,340
stands for commuting permutations system

190
00:07:51,460 --> 00:07:57,320
so if you think of n as the size of the

191
00:07:55,340 --> 00:08:00,919
output alphabet and functions we'll be

192
00:07:57,320 --> 00:08:02,540
describing so n is some you know one to

193
00:08:00,919 --> 00:08:06,260
n are the possible outputs of some

194
00:08:02,540 --> 00:08:10,610
function and each of these x1 to XM are

195
00:08:06,260 --> 00:08:12,800
the input sets of M players and what

196
00:08:10,610 --> 00:08:15,919
each input is is actually just a

197
00:08:12,800 --> 00:08:18,410
permutation of these n numbers right so

198
00:08:15,919 --> 00:08:21,890
or you know each element in the input

199
00:08:18,410 --> 00:08:24,440
set each element in X I is a permutation

200
00:08:21,890 --> 00:08:27,380
on these n elements just put in another

201
00:08:24,440 --> 00:08:29,780
way X is a subset of the group of our

202
00:08:27,380 --> 00:08:35,450
permutations that's symmetric group I

203
00:08:29,780 --> 00:08:37,339
said and it's okay so far there's

204
00:08:35,450 --> 00:08:39,680
nothing commuting about it permutations

205
00:08:37,340 --> 00:08:41,960
don't usually commute the commuting part

206
00:08:39,679 --> 00:08:44,150
is a following suppose I took M

207
00:08:41,960 --> 00:08:49,400
permutations one from each of these sets

208
00:08:44,150 --> 00:08:51,890
and I applied it to and applied it to

209
00:08:49,400 --> 00:08:52,520
one one is some designated special

210
00:08:51,890 --> 00:08:54,949
element

211
00:08:52,520 --> 00:08:57,380
the output set so I can apply you know

212
00:08:54,950 --> 00:08:59,480
one or the other these M permutations on

213
00:08:57,380 --> 00:09:01,850
one I'll get some other number in the

214
00:08:59,480 --> 00:09:03,740
range 1 to n that number should be the

215
00:09:01,850 --> 00:09:06,290
same even if I applied these

216
00:09:03,740 --> 00:09:08,350
permutations in a different order so the

217
00:09:06,290 --> 00:09:10,430
row is some permutation of these M

218
00:09:08,350 --> 00:09:12,290
permutations so I apply them in a

219
00:09:10,430 --> 00:09:16,400
different order and just to illustrate

220
00:09:12,290 --> 00:09:17,810
so PI 1 PI 2 pi 3 are three permutations

221
00:09:16,400 --> 00:09:19,730
they're parallel differently because

222
00:09:17,810 --> 00:09:22,069
they are coming from different sets X 1

223
00:09:19,730 --> 00:09:23,630
X 2 X 3 and you apply them to one it's

224
00:09:22,070 --> 00:09:26,420
the same thing as if you applied them in

225
00:09:23,630 --> 00:09:27,920
a different order okay and in any of

226
00:09:26,420 --> 00:09:29,689
these six orders you apply them you'll

227
00:09:27,920 --> 00:09:31,910
get the same thing that's what the

228
00:09:29,690 --> 00:09:34,250
definition of a community permutation is

229
00:09:31,910 --> 00:09:37,040
very simple just to point out the

230
00:09:34,250 --> 00:09:40,340
commutativity is required only across

231
00:09:37,040 --> 00:09:43,670
the steps X I and also only for

232
00:09:40,340 --> 00:09:45,560
applications to at one value one as

233
00:09:43,670 --> 00:09:48,079
permutations they may not commute with

234
00:09:45,560 --> 00:09:51,319
each other but when applied to this one

235
00:09:48,080 --> 00:09:53,870
value the order doesn't matter okay so

236
00:09:51,320 --> 00:09:55,610
that is the definition and I will

237
00:09:53,870 --> 00:09:58,220
explain hopefully I'll make a little

238
00:09:55,610 --> 00:09:59,330
more sense soon but let me go ahead and

239
00:09:58,220 --> 00:10:02,330
explain Oh

240
00:09:59,330 --> 00:10:05,420
so CPS is not a function right it's a

241
00:10:02,330 --> 00:10:07,730
system as a bunch of permutations the

242
00:10:05,420 --> 00:10:10,250
function that we associate the CPS is a

243
00:10:07,730 --> 00:10:13,070
following just the inputs correspond

244
00:10:10,250 --> 00:10:15,700
inputs are these M permutations one from

245
00:10:13,070 --> 00:10:18,410
each set it's one from each party and

246
00:10:15,700 --> 00:10:21,830
the function the output of the function

247
00:10:18,410 --> 00:10:24,740
is just evaluate those M inputs on one

248
00:10:21,830 --> 00:10:29,480
that is a that's a function associated

249
00:10:24,740 --> 00:10:31,550
with the CPS and CPS's is just an extra

250
00:10:29,480 --> 00:10:34,100
requirement so there's a subgroup system

251
00:10:31,550 --> 00:10:36,670
which means each of these x i's was it

252
00:10:34,100 --> 00:10:38,930
should be actually a subgroup of the

253
00:10:36,670 --> 00:10:40,880
symmetry groups a symmetric group and

254
00:10:38,930 --> 00:10:43,219
it's a group there is a group structure

255
00:10:40,880 --> 00:10:46,850
with the composition as a group

256
00:10:43,220 --> 00:10:49,100
operation and these sets should be all

257
00:10:46,850 --> 00:10:52,490
sub groups of the set so that is a

258
00:10:49,100 --> 00:10:55,460
requirement of CP SS okay so where does

259
00:10:52,490 --> 00:10:57,590
the CPS thing come from right so let me

260
00:10:55,460 --> 00:11:00,620
explain it actually I think fairly

261
00:10:57,590 --> 00:11:03,080
intuitive so suppose somebody gave you a

262
00:11:00,620 --> 00:11:05,840
function and aggregating function f and

263
00:11:03,080 --> 00:11:08,480
they said it has an MPC protocol and

264
00:11:05,840 --> 00:11:13,280
during the secure against passive

265
00:11:08,480 --> 00:11:16,520
corruption then let's consider a

266
00:11:13,280 --> 00:11:19,220
partition of the set of M players into

267
00:11:16,520 --> 00:11:21,199
two parts so one part consists of just

268
00:11:19,220 --> 00:11:24,260
the output player which I'm calling p0

269
00:11:21,200 --> 00:11:26,960
there and one of the input players P I

270
00:11:24,260 --> 00:11:28,910
and the other set is the remaining set

271
00:11:26,960 --> 00:11:31,730
of parties now think of this is a

272
00:11:28,910 --> 00:11:34,579
two-party setting now between the set R

273
00:11:31,730 --> 00:11:37,820
and the output place so it's not easy to

274
00:11:34,580 --> 00:11:39,950
it's not hard to see that I know - if

275
00:11:37,820 --> 00:11:41,900
you have a secure protocol the only

276
00:11:39,950 --> 00:11:43,640
thing you can effectively do is the set

277
00:11:41,900 --> 00:11:45,020
of parties are they are not supposed to

278
00:11:43,640 --> 00:11:47,900
learn anything other than their own

279
00:11:45,020 --> 00:11:51,050
inputs so they have to just send off

280
00:11:47,900 --> 00:11:53,689
send out their residual function to the

281
00:11:51,050 --> 00:11:56,199
other two players okay so that they can

282
00:11:53,690 --> 00:11:59,240
evaluate their function correctly and

283
00:11:56,200 --> 00:12:02,300
you know so that is a if you have a

284
00:11:59,240 --> 00:12:04,100
secure protocol or if you have sick or

285
00:12:02,300 --> 00:12:05,959
fear any protocol in job doesn't learn

286
00:12:04,100 --> 00:12:08,240
anything then this is the only way it

287
00:12:05,960 --> 00:12:10,520
can work but on the other hand it's also

288
00:12:08,240 --> 00:12:13,010
secure protocol where these just parties

289
00:12:10,520 --> 00:12:14,569
p0p I should learn nothing what that

290
00:12:13,010 --> 00:12:17,000
means is this residual function that

291
00:12:14,570 --> 00:12:19,160
they have to learn is something we could

292
00:12:17,000 --> 00:12:22,430
have learned just from the output of the

293
00:12:19,160 --> 00:12:25,400
function in you know without just by

294
00:12:22,430 --> 00:12:29,000
learning with pis

295
00:12:25,400 --> 00:12:32,720
input it's fixed input PI I whatever

296
00:12:29,000 --> 00:12:35,240
they can learn about the input player's

297
00:12:32,720 --> 00:12:36,440
inputs of their party set R is all that

298
00:12:35,240 --> 00:12:38,090
they should learn even if they learn the

299
00:12:36,440 --> 00:12:40,730
residual function okay so the residual

300
00:12:38,090 --> 00:12:44,150
function is nothing more than what the

301
00:12:40,730 --> 00:12:48,560
input and output reveals to the set p 0

302
00:12:44,150 --> 00:12:50,930
P 1 P i okay and CPS captures exactly

303
00:12:48,560 --> 00:12:53,180
this condition it doesn't may not look

304
00:12:50,930 --> 00:12:54,380
that look like that immediately but if

305
00:12:53,180 --> 00:12:57,109
you play with it a little bit you'll see

306
00:12:54,380 --> 00:12:59,060
that CPS is exactly capturing the

307
00:12:57,110 --> 00:13:00,980
condition that the residual function is

308
00:12:59,060 --> 00:13:05,510
for free in the sense that it's already

309
00:13:00,980 --> 00:13:08,480
implied by just one input one input for

310
00:13:05,510 --> 00:13:12,020
P I and the output corresponding to that

311
00:13:08,480 --> 00:13:14,090
okay up to relabeling of inputs you know

312
00:13:12,020 --> 00:13:16,430
and outputs and one direction is very

313
00:13:14,090 --> 00:13:18,120
easy to see suppose I give you a CPS

314
00:13:16,430 --> 00:13:21,510
then it in it

315
00:13:18,120 --> 00:13:27,029
it is the case that you know so if you

316
00:13:21,510 --> 00:13:30,210
consider the function applied on PI 1 2

317
00:13:27,029 --> 00:13:33,560
pi M by commuted duty I could just apply

318
00:13:30,210 --> 00:13:36,390
PI I at the end so I apply all the other

319
00:13:33,560 --> 00:13:38,880
permutations first so I calling it PI R

320
00:13:36,390 --> 00:13:40,699
the composition of those things and so

321
00:13:38,880 --> 00:13:44,400
the function is actually is PI I

322
00:13:40,700 --> 00:13:46,710
composed and applied to PI R of 1 so PI

323
00:13:44,400 --> 00:13:49,800
R of 1 is all the information that you

324
00:13:46,710 --> 00:13:53,130
need to evaluate this function on any

325
00:13:49,800 --> 00:13:57,270
input on piight in particular so that is

326
00:13:53,130 --> 00:13:59,730
the residual function PI R f1 ok and if

327
00:13:57,270 --> 00:14:02,520
I give you PI I of PI R of 1 since PI I

328
00:13:59,730 --> 00:14:05,160
is a permutation I can compute PI R of 1

329
00:14:02,520 --> 00:14:07,020
ok so at least you know it's very easy

330
00:14:05,160 --> 00:14:08,819
to see that if I give you a CPS it does

331
00:14:07,020 --> 00:14:12,449
catch it does have this property that

332
00:14:08,820 --> 00:14:13,110
residual function is for free and the

333
00:14:12,450 --> 00:14:15,600
other way

334
00:14:13,110 --> 00:14:19,110
you know something improve you know kind

335
00:14:15,600 --> 00:14:21,750
of go over things and ensure that also

336
00:14:19,110 --> 00:14:26,730
that's one way to think of what CPS is

337
00:14:21,750 --> 00:14:29,130
doing it is at condition another way we

338
00:14:26,730 --> 00:14:31,110
could look at it there's a class we

339
00:14:29,130 --> 00:14:33,209
didn't give a name in the paper so I'm

340
00:14:31,110 --> 00:14:35,940
just calling it ni on PC without leakage

341
00:14:33,209 --> 00:14:38,010
so remember in an I am PC the output

342
00:14:35,940 --> 00:14:40,320
party was allowed to get the leakage

343
00:14:38,010 --> 00:14:42,270
read the residual function so you could

344
00:14:40,320 --> 00:14:45,510
imagine a model where everything else

345
00:14:42,270 --> 00:14:48,240
2009 PC I just remove this condition ok

346
00:14:45,510 --> 00:14:49,950
and then actually CPS is an exact

347
00:14:48,240 --> 00:14:51,720
character ization of which functions are

348
00:14:49,950 --> 00:14:53,190
securely realizable I'm not which

349
00:14:51,720 --> 00:14:55,070
functions are not I mean it is a

350
00:14:53,190 --> 00:14:59,490
characteristic of which functions are

351
00:14:55,070 --> 00:15:00,900
realizable in this model and I'll also

352
00:14:59,490 --> 00:15:03,750
mention one connection with another

353
00:15:00,900 --> 00:15:07,260
recent work of Haleiwa at all from last

354
00:15:03,750 --> 00:15:09,510
year's TCC they defined a notion called

355
00:15:07,260 --> 00:15:12,089
best possible information theoretic MPC

356
00:15:09,510 --> 00:15:16,770
which you know I don't have time to go

357
00:15:12,089 --> 00:15:18,270
into right now ok but actually the

358
00:15:16,770 --> 00:15:21,930
definition is actually very simple

359
00:15:18,270 --> 00:15:24,270
same as this ni MPC with the leakage

360
00:15:21,930 --> 00:15:27,060
allowed to the aggregator but it is

361
00:15:24,270 --> 00:15:29,550
removed the trusted coordinator okay so

362
00:15:27,060 --> 00:15:30,959
in our case we kept in this slide we are

363
00:15:29,550 --> 00:15:31,500
keeping the receipt or need to remove

364
00:15:30,959 --> 00:15:35,069
the

365
00:15:31,500 --> 00:15:38,940
if you do the other one you get this bit

366
00:15:35,070 --> 00:15:41,790
NPC so reason I mentioned is I'll show

367
00:15:38,940 --> 00:15:46,650
the connection here so to remind you

368
00:15:41,790 --> 00:15:48,329
this is our landscape which are not yet

369
00:15:46,650 --> 00:15:52,199
proven anything to you I just defined

370
00:15:48,330 --> 00:15:53,910
CPS and CPS's and we can all actually

371
00:15:52,200 --> 00:15:55,620
show that these things are a that is a

372
00:15:53,910 --> 00:15:57,300
gap okay so it's a these are two

373
00:15:55,620 --> 00:16:00,240
combinatorial classes we can show there

374
00:15:57,300 --> 00:16:02,490
are functions which are CPS's and they

375
00:16:00,240 --> 00:16:05,850
are not CP as in fact they do not embed

376
00:16:02,490 --> 00:16:11,310
into any CPS and the thing about bit MPC

377
00:16:05,850 --> 00:16:12,930
is that inside CPS residual function is

378
00:16:11,310 --> 00:16:16,680
for free so there is no distinction

379
00:16:12,930 --> 00:16:19,319
between MPC and bit MPC in that gap okay

380
00:16:16,680 --> 00:16:21,719
inside CPS rather so if there is a gap

381
00:16:19,320 --> 00:16:24,540
between cps and MPC that means that's

382
00:16:21,720 --> 00:16:27,840
also gaps that's also set of functions

383
00:16:24,540 --> 00:16:30,300
which do not have bit MPC protocols we

384
00:16:27,840 --> 00:16:32,310
don't know if this gap X's or not but

385
00:16:30,300 --> 00:16:34,319
it's an open problem where there bit MPC

386
00:16:32,310 --> 00:16:37,530
is possible for all functions or not if

387
00:16:34,320 --> 00:16:41,820
there's gap X's then it is not okay so

388
00:16:37,530 --> 00:16:44,069
now let me tell you about CPS says why

389
00:16:41,820 --> 00:16:45,660
is it inside this you and I in pieces

390
00:16:44,070 --> 00:16:49,470
start okay so that is actually a

391
00:16:45,660 --> 00:16:52,260
protocol so we are going to give you a

392
00:16:49,470 --> 00:16:54,600
uni MPC Star protocol I think it's kind

393
00:16:52,260 --> 00:16:57,720
of a huge protocol which generalizes

394
00:16:54,600 --> 00:16:59,760
this very natural and simple protocol

395
00:16:57,720 --> 00:17:02,670
for summation that you might have all

396
00:16:59,760 --> 00:17:04,980
seen so let me tell you what the

397
00:17:02,670 --> 00:17:08,550
protocol is so suppose this is your

398
00:17:04,980 --> 00:17:13,760
function defined in terms of M sub

399
00:17:08,550 --> 00:17:15,960
groups of s n of the symmetric group and

400
00:17:13,760 --> 00:17:19,829
suppose there are three parties writes m

401
00:17:15,960 --> 00:17:21,720
equal to three and before getting their

402
00:17:19,829 --> 00:17:23,429
input they are going to talk to each

403
00:17:21,720 --> 00:17:25,530
other a little bit so here's what they

404
00:17:23,430 --> 00:17:30,090
will do so each party P want P so in

405
00:17:25,530 --> 00:17:32,750
this case P one picks three elements in

406
00:17:30,090 --> 00:17:35,429
the group's g1 g2 and g3 you want each

407
00:17:32,750 --> 00:17:39,300
so that's a color that they are colored

408
00:17:35,430 --> 00:17:43,400
differently and the condition I mean

409
00:17:39,300 --> 00:17:45,290
they're paid randomly subject to the

410
00:17:43,400 --> 00:17:46,840
one is a fixed point of their

411
00:17:45,290 --> 00:17:49,580
composition so if you apply these

412
00:17:46,840 --> 00:17:51,169
permutations to one you can apply in

413
00:17:49,580 --> 00:17:53,720
whatever order that doesn't matter

414
00:17:51,170 --> 00:17:57,920
you apply to one you'll get back once

415
00:17:53,720 --> 00:18:00,140
you apply all three of them so soapy ip1

416
00:17:57,920 --> 00:18:02,720
picks such permutations in its head and

417
00:18:00,140 --> 00:18:05,810
each of these guys P 2 P 3 they do that

418
00:18:02,720 --> 00:18:08,150
independently and then they've not

419
00:18:05,810 --> 00:18:12,020
communicated yet what they will do is

420
00:18:08,150 --> 00:18:14,240
just send so all the group 1

421
00:18:12,020 --> 00:18:16,639
permutations are sent to P 1 group 2

422
00:18:14,240 --> 00:18:18,230
permutations are sent to P 2 group the

423
00:18:16,640 --> 00:18:20,540
permutations is into P 3

424
00:18:18,230 --> 00:18:22,880
that's all the communication they do

425
00:18:20,540 --> 00:18:26,330
before the input comes in then they get

426
00:18:22,880 --> 00:18:28,790
their inputs PI 1 PI 2 pi 3 they do

427
00:18:26,330 --> 00:18:32,000
secret sharing as follows and they

428
00:18:28,790 --> 00:18:35,750
compute you put they computes these

429
00:18:32,000 --> 00:18:38,330
additional you know Sigma 1 0 and so P 1

430
00:18:35,750 --> 00:18:40,070
compute Sigma 1 0 such that if you'd

431
00:18:38,330 --> 00:18:41,840
composed all of them together you'll get

432
00:18:40,070 --> 00:18:46,010
PI I and why is this possible because

433
00:18:41,840 --> 00:18:49,280
it's a group the path you know the blue

434
00:18:46,010 --> 00:18:52,460
things are living in a subgroup of SN so

435
00:18:49,280 --> 00:18:54,649
you'll be able to find this and they

436
00:18:52,460 --> 00:18:56,930
send each of them compute this and sends

437
00:18:54,650 --> 00:19:00,230
it to the aggregator the output party

438
00:18:56,930 --> 00:19:01,970
who does something somewhat strange it

439
00:19:00,230 --> 00:19:04,610
takes these permutations and applies

440
00:19:01,970 --> 00:19:09,110
them to one ok and outputs whatever

441
00:19:04,610 --> 00:19:12,080
comes out ok so let me at least tell you

442
00:19:09,110 --> 00:19:13,310
why it's correct it's a correcting the

443
00:19:12,080 --> 00:19:14,750
correct thing would have been the

444
00:19:13,310 --> 00:19:17,929
following right what you would really

445
00:19:14,750 --> 00:19:21,230
like to compute is PI 1 up 2 pi M

446
00:19:17,930 --> 00:19:24,140
applied to one where each pi is the

447
00:19:21,230 --> 00:19:26,600
composition of the Sigma eyes and a

448
00:19:24,140 --> 00:19:29,000
sigma as in a row so this is what you

449
00:19:26,600 --> 00:19:31,159
would I like to do compose all these you

450
00:19:29,000 --> 00:19:33,380
know Sigma's in the bottom row that'll

451
00:19:31,160 --> 00:19:35,720
give you PI 1 then compose them with

452
00:19:33,380 --> 00:19:37,990
these and so forth and apply all of them

453
00:19:35,720 --> 00:19:41,210
to one this is what you would like to do

454
00:19:37,990 --> 00:19:44,000
what our protocol does is there's a

455
00:19:41,210 --> 00:19:47,420
somewhat strange thing it just applied

456
00:19:44,000 --> 00:19:49,010
these things to one ok so let's try to

457
00:19:47,420 --> 00:19:50,990
make sense of it yeah we know a little

458
00:19:49,010 --> 00:19:53,660
bit about how these other things look

459
00:19:50,990 --> 00:19:56,800
and they all keep one as a fixed point

460
00:19:53,660 --> 00:19:59,860
so at least we can do this

461
00:19:56,800 --> 00:20:01,810
stuff you know saying the application

462
00:19:59,860 --> 00:20:03,790
was you know oblivious of the other

463
00:20:01,810 --> 00:20:05,889
shares you can at least write it this

464
00:20:03,790 --> 00:20:08,260
way but still that they don't look the

465
00:20:05,890 --> 00:20:09,940
same so let me just show you that they

466
00:20:08,260 --> 00:20:12,370
are actually the same because of this

467
00:20:09,940 --> 00:20:18,390
commuting permutations condition so I'm

468
00:20:12,370 --> 00:20:21,699
just going to focus on these two sets of

469
00:20:18,390 --> 00:20:23,590
columns for now okay so the order in

470
00:20:21,700 --> 00:20:25,420
which you are starting off is applying

471
00:20:23,590 --> 00:20:28,629
them in this order that's the order in

472
00:20:25,420 --> 00:20:31,240
which they are written and what do you

473
00:20:28,630 --> 00:20:33,730
do is you can bubble this green thing

474
00:20:31,240 --> 00:20:36,370
from here all the way up to here relying

475
00:20:33,730 --> 00:20:39,370
on the fact that when applied to one but

476
00:20:36,370 --> 00:20:41,800
when applied to one the order doesn't

477
00:20:39,370 --> 00:20:44,439
matter so you can bubble up that green

478
00:20:41,800 --> 00:20:46,780
thing also it's the other guy ending and

479
00:20:44,440 --> 00:20:50,050
then since they live in a subgroup you

480
00:20:46,780 --> 00:20:53,440
can put them together and you can kind

481
00:20:50,050 --> 00:20:55,570
of do this and you know bubble up things

482
00:20:53,440 --> 00:20:57,670
appropriately and you'll get this other

483
00:20:55,570 --> 00:21:00,429
order which is if you know it is the

484
00:20:57,670 --> 00:21:01,860
same as first do these two then compose

485
00:21:00,430 --> 00:21:03,820
with these two then compose atleast

486
00:21:01,860 --> 00:21:05,889
within the group you don't change the

487
00:21:03,820 --> 00:21:08,740
order but across the groups you can

488
00:21:05,890 --> 00:21:10,570
change more than around and you can work

489
00:21:08,740 --> 00:21:14,740
this out and it you know I can do it

490
00:21:10,570 --> 00:21:18,429
more cleanly it works out and it can

491
00:21:14,740 --> 00:21:19,960
also be shown to be secure okay so that

492
00:21:18,430 --> 00:21:21,970
is all but the past is security let me

493
00:21:19,960 --> 00:21:23,440
spend just a couple of slides on one

494
00:21:21,970 --> 00:21:25,780
slide on you see security

495
00:21:23,440 --> 00:21:28,090
so you see security you might have you

496
00:21:25,780 --> 00:21:29,889
know there's a myth or you might have

497
00:21:28,090 --> 00:21:31,830
heard that there's very little you can

498
00:21:29,890 --> 00:21:34,390
do right if you do not have any setups

499
00:21:31,830 --> 00:21:36,460
there's really nothing you can do

500
00:21:34,390 --> 00:21:38,920
no interesting functions you can do but

501
00:21:36,460 --> 00:21:40,840
that is for two parties if you go beyond

502
00:21:38,920 --> 00:21:43,660
two parties there are interesting

503
00:21:40,840 --> 00:21:45,280
functions you can do well there are some

504
00:21:43,660 --> 00:21:46,810
limitations you can only do either

505
00:21:45,280 --> 00:21:49,389
aggregating functions like we are

506
00:21:46,810 --> 00:21:51,550
talking about or they're kind of a dual

507
00:21:49,390 --> 00:21:52,870
disseminating functions where one party

508
00:21:51,550 --> 00:21:58,090
has input and all the other parties

509
00:21:52,870 --> 00:22:01,360
output okay and you might have seen in a

510
00:21:58,090 --> 00:22:03,459
broadcast with a bot is possible in

511
00:22:01,360 --> 00:22:06,360
there is a you see secure protocol it

512
00:22:03,460 --> 00:22:08,970
was observed by Golda's friend Linda and

513
00:22:06,360 --> 00:22:10,750
and also there are also some other

514
00:22:08,970 --> 00:22:12,970
special cases

515
00:22:10,750 --> 00:22:17,650
disseminated functions that have shown

516
00:22:12,970 --> 00:22:19,960
up our first result is that actually

517
00:22:17,650 --> 00:22:23,650
every disseminated function has a user

518
00:22:19,960 --> 00:22:25,150
secure problem not just this few so that

519
00:22:23,650 --> 00:22:27,820
is about disseminated functions how

520
00:22:25,150 --> 00:22:31,059
would aggregated functions well there

521
00:22:27,820 --> 00:22:35,049
are aggregating functions there our

522
00:22:31,059 --> 00:22:37,658
protocol doesn't work for all of CPS's

523
00:22:35,049 --> 00:22:40,030
for to get you see security but it works

524
00:22:37,659 --> 00:22:42,549
for something called complete CPS's

525
00:22:40,030 --> 00:22:45,490
complete means it's like a Latin square

526
00:22:42,549 --> 00:22:47,889
or you know where everybody has n inputs

527
00:22:45,490 --> 00:22:50,260
where n is so everybody has n

528
00:22:47,890 --> 00:22:54,789
permutations where n is a number is

529
00:22:50,260 --> 00:22:56,289
output alphabet size right and it's not

530
00:22:54,789 --> 00:22:58,210
just that functions which are complete

531
00:22:56,289 --> 00:23:00,669
CPUs even functions which embed into a

532
00:22:58,210 --> 00:23:03,280
complete CPS function plus the CPS's can

533
00:23:00,669 --> 00:23:06,549
do obviously secure protocols and that

534
00:23:03,280 --> 00:23:08,980
requires for you see security it's you

535
00:23:06,549 --> 00:23:10,929
need to show that if you restrict the

536
00:23:08,980 --> 00:23:13,169
domain to a subset you can still get

537
00:23:10,929 --> 00:23:15,340
using security so there's a protocol

538
00:23:13,169 --> 00:23:18,429
there's a new protocol needed to get

539
00:23:15,340 --> 00:23:19,289
that let me just finish off by this one

540
00:23:18,429 --> 00:23:22,570
thing

541
00:23:19,289 --> 00:23:25,059
so you see security is a nice notion you

542
00:23:22,570 --> 00:23:28,270
think of it as very strong security but

543
00:23:25,059 --> 00:23:31,000
it has some idiosyncrasies

544
00:23:28,270 --> 00:23:33,580
it doesn't always imply security against

545
00:23:31,000 --> 00:23:36,070
passive corruption okay so we go ahead

546
00:23:33,580 --> 00:23:38,530
and define and I know people have you

547
00:23:36,070 --> 00:23:40,780
know there's a it's a folklore notion I

548
00:23:38,530 --> 00:23:42,879
guess but we I don't think it has a name

549
00:23:40,780 --> 00:23:44,980
so we just call it strong security so

550
00:23:42,880 --> 00:23:46,600
strong strongly secure protocol is one

551
00:23:44,980 --> 00:23:47,770
which is you see secure and secure

552
00:23:46,600 --> 00:23:51,250
against passive corruption

553
00:23:47,770 --> 00:23:53,020
simultaneously and what we from whatever

554
00:23:51,250 --> 00:23:55,090
I said and they will feel in love

555
00:23:53,020 --> 00:23:57,490
serrations what you can see is that we

556
00:23:55,090 --> 00:23:59,230
pretty much know which functions are

557
00:23:57,490 --> 00:24:03,130
strong and PC at this point all

558
00:23:59,230 --> 00:24:06,280
discriminating functions have a gearing

559
00:24:03,130 --> 00:24:08,049
functions which are you know we have a

560
00:24:06,280 --> 00:24:10,500
necessary and sufficient condition but

561
00:24:08,049 --> 00:24:13,480
they are not the same condition and

562
00:24:10,500 --> 00:24:14,919
otherwise if it's not disseminating our

563
00:24:13,480 --> 00:24:18,100
reg rating it's not possible

564
00:24:14,919 --> 00:24:20,980
so the gap that is left us CPS functions

565
00:24:18,100 --> 00:24:24,549
which are not complete cps okay so to

566
00:24:20,980 --> 00:24:24,909
conclude and we have this new algebraic

567
00:24:24,549 --> 00:24:26,529
structure

568
00:24:24,909 --> 00:24:29,229
if you look at the paper you'll find a

569
00:24:26,529 --> 00:24:34,090
few more things you'll find some cute

570
00:24:29,229 --> 00:24:38,619
examples some open problems on and about

571
00:24:34,090 --> 00:24:40,749
the these algebraic structures and also

572
00:24:38,619 --> 00:24:42,999
we of course give connections to all

573
00:24:40,749 --> 00:24:45,460
these new models of computation as well

574
00:24:42,999 --> 00:24:50,349
as MPC itself the standard model itself

575
00:24:45,460 --> 00:24:52,570
and but you know at the end of it all

576
00:24:50,349 --> 00:24:56,279
this still the full characterization

577
00:24:52,570 --> 00:24:59,289
exact characterization remains open for

578
00:24:56,279 --> 00:25:02,139
the standard MPC model and even for some

579
00:24:59,289 --> 00:25:10,840
of the new models we have alright so

580
00:25:02,139 --> 00:25:18,560
that's all we have time for one short

581
00:25:10,840 --> 00:25:22,829
question okay so let's say a speaker

582
00:25:18,560 --> 00:25:22,829
[Applause]

