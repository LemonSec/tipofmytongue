1
00:00:00,000 --> 00:00:02,939
came in good morning everyone I'm

2
00:00:01,650 --> 00:00:04,770
Karthik naka and today I will be talking

3
00:00:02,939 --> 00:00:06,298
about a book on locality preserving

4
00:00:04,770 --> 00:00:09,139
abuse now we're joined to work with

5
00:00:06,299 --> 00:00:12,210
Gillard Gilbert truffling and Elaine

6
00:00:09,139 --> 00:00:15,509
so let me start off by quickly defining

7
00:00:12,210 --> 00:00:17,039
an oblivious Ram so in general in a

8
00:00:15,509 --> 00:00:18,960
computation you have a request sequence

9
00:00:17,039 --> 00:00:21,060
I and the request sequence will claim

10
00:00:18,960 --> 00:00:22,590
the following I want to read memory

11
00:00:21,060 --> 00:00:24,150
location a 1 followed by write something

12
00:00:22,590 --> 00:00:26,910
to memory location a 2 and so on and so

13
00:00:24,150 --> 00:00:30,380
forth and the CPU actually executes this

14
00:00:26,910 --> 00:00:32,850
access pattern and sends a response back

15
00:00:30,380 --> 00:00:34,950
the problem we are trying to solve with

16
00:00:32,850 --> 00:00:36,719
an omnibus Ram is to hide which

17
00:00:34,950 --> 00:00:39,540
addresses are accessed in this request

18
00:00:36,719 --> 00:00:40,680
sequence so we assume that you have an

19
00:00:39,540 --> 00:00:43,290
adversary which is snooping on your

20
00:00:40,680 --> 00:00:45,960
address bus but it cannot look into the

21
00:00:43,290 --> 00:00:47,070
contents of the CPU for example or the

22
00:00:45,960 --> 00:00:48,629
actual contents of the data in the

23
00:00:47,070 --> 00:00:51,629
memory for instance you can think of

24
00:00:48,629 --> 00:00:54,030
your data is being encrypted so what you

25
00:00:51,629 --> 00:00:56,730
want is to convert this logical access

26
00:00:54,030 --> 00:00:59,879
sequence into a sequence let's call it

27
00:00:56,730 --> 00:01:03,569
or MFI in such a way that the adversary

28
00:00:59,879 --> 00:01:06,119
does not learn what is so for security

29
00:01:03,570 --> 00:01:10,200
you want for any to access patterns ini

30
00:01:06,119 --> 00:01:11,670
prime of the same length that or ramify

31
00:01:10,200 --> 00:01:14,790
is indistinguishable from or Amma Phi

32
00:01:11,670 --> 00:01:17,159
prime so typically when you are trying

33
00:01:14,790 --> 00:01:19,020
to office gate these accesses you will

34
00:01:17,159 --> 00:01:21,450
end up accessing more memory locations

35
00:01:19,020 --> 00:01:24,539
than you would do in a logical sequence

36
00:01:21,450 --> 00:01:25,530
and that is why one important metric

37
00:01:24,540 --> 00:01:27,000
that you're trying to reduce is

38
00:01:25,530 --> 00:01:28,680
bandwidth or the number of memory

39
00:01:27,000 --> 00:01:34,170
locations you access for every logical

40
00:01:28,680 --> 00:01:35,970
access so separately in systems another

41
00:01:34,170 --> 00:01:39,119
notion that is very important is the

42
00:01:35,970 --> 00:01:41,759
notion of data locality so what is data

43
00:01:39,119 --> 00:01:44,009
locality if a memory location is

44
00:01:41,759 --> 00:01:46,380
accessed a nearby memory location will

45
00:01:44,009 --> 00:01:48,000
be accessed soon enough for instance if

46
00:01:46,380 --> 00:01:50,460
you are if you have a file server in

47
00:01:48,000 --> 00:01:53,579
such a way that let's say a file spans

48
00:01:50,460 --> 00:01:54,990
five blocks then if you're accessing the

49
00:01:53,579 --> 00:01:57,960
entire file after accessing the first

50
00:01:54,990 --> 00:01:59,339
block you will end up accessing the next

51
00:01:57,960 --> 00:02:01,949
five block the next four blocks as well

52
00:01:59,340 --> 00:02:04,439
and you will have a similar observation

53
00:02:01,950 --> 00:02:08,340
if for example if you have range queries

54
00:02:04,439 --> 00:02:11,160
and this notion of locality has

55
00:02:08,340 --> 00:02:13,550
motivated the design of hard disks and

56
00:02:11,160 --> 00:02:14,900
SSDs that we have today in

57
00:02:13,550 --> 00:02:17,210
that when you're accessing the first

58
00:02:14,900 --> 00:02:20,500
block that is expensive and accessing

59
00:02:17,210 --> 00:02:22,580
the subsequent nearby blocks are cheaper

60
00:02:20,500 --> 00:02:24,230
so at this point I would like to

61
00:02:22,580 --> 00:02:26,330
distinguish between this notion of

62
00:02:24,230 --> 00:02:28,519
locality which is spatial locality and

63
00:02:26,330 --> 00:02:30,950
temporal locality so temporal locality

64
00:02:28,520 --> 00:02:31,370
says if I access a memory location soon

65
00:02:30,950 --> 00:02:32,810
enough

66
00:02:31,370 --> 00:02:35,600
I will access the same memory location

67
00:02:32,810 --> 00:02:37,400
again and that has motivated design of

68
00:02:35,600 --> 00:02:39,049
memory hierarchy and caches and so on

69
00:02:37,400 --> 00:02:43,490
and so forth but over here we are only

70
00:02:39,050 --> 00:02:45,260
concerned with spatial locality so the

71
00:02:43,490 --> 00:02:47,930
problem is that with an oblivious

72
00:02:45,260 --> 00:02:50,660
serum.this this office feature of

73
00:02:47,930 --> 00:02:51,860
accesses inherently break locality so in

74
00:02:50,660 --> 00:02:53,750
an overtime scheme let's say if I'm

75
00:02:51,860 --> 00:02:55,960
accessing memory location five I end up

76
00:02:53,750 --> 00:02:59,180
accessing five and some more spurious

77
00:02:55,960 --> 00:03:02,030
memory accesses but more importantly

78
00:02:59,180 --> 00:03:05,210
after performing this axis I end up

79
00:03:02,030 --> 00:03:07,610
shuffling my data around and this such

80
00:03:05,210 --> 00:03:11,030
shuffling inherently break in early

81
00:03:07,610 --> 00:03:14,450
breaks data locality so the question we

82
00:03:11,030 --> 00:03:16,430
ask in this work is the following can we

83
00:03:14,450 --> 00:03:19,970
construct a bandwidth efficient a ramp

84
00:03:16,430 --> 00:03:22,239
that preserves data locality so this

85
00:03:19,970 --> 00:03:24,440
notion of bandwidth efficient is

86
00:03:22,239 --> 00:03:26,570
important over here but before we

87
00:03:24,440 --> 00:03:29,600
understand this question let us first

88
00:03:26,570 --> 00:03:31,340
define what I mean by locality so at a

89
00:03:29,600 --> 00:03:33,200
very high level locality is just the

90
00:03:31,340 --> 00:03:35,450
number of head seeks or the head jumps

91
00:03:33,200 --> 00:03:38,480
or the number of discontinuous regions

92
00:03:35,450 --> 00:03:41,570
that I'm going to access so if I'm

93
00:03:38,480 --> 00:03:42,980
making 100 maxes and let's say your head

94
00:03:41,570 --> 00:03:44,450
moves in the following fashion where I

95
00:03:42,980 --> 00:03:46,250
have accessed three blocks this

96
00:03:44,450 --> 00:03:48,109
contributes three to bandwidth and one

97
00:03:46,250 --> 00:03:50,570
to locality and let's say then the head

98
00:03:48,110 --> 00:03:53,239
performs a jump and what makes another

99
00:03:50,570 --> 00:03:56,260
set of accesses then correspondingly my

100
00:03:53,239 --> 00:03:59,090
locality and my bandwidth would increase

101
00:03:56,260 --> 00:04:00,980
so at a high level I'm just trying to

102
00:03:59,090 --> 00:04:05,480
reduce the number of head seeks or head

103
00:04:00,980 --> 00:04:08,030
jumps so if reducing locality was my

104
00:04:05,480 --> 00:04:10,459
only goal then the following simple

105
00:04:08,030 --> 00:04:12,920
solution would just work I'll just scan

106
00:04:10,459 --> 00:04:16,399
the entire memory and then I'll get a

107
00:04:12,920 --> 00:04:17,899
locality of one which is great but the

108
00:04:16,399 --> 00:04:20,719
problem is that your bandwidth is going

109
00:04:17,899 --> 00:04:22,640
to be very high so in that sense I'm

110
00:04:20,720 --> 00:04:24,680
trying to reduce both locality and

111
00:04:22,640 --> 00:04:27,289
bandwidth together and intuitively I am

112
00:04:24,680 --> 00:04:33,620
trying to get both of them to be pollen

113
00:04:27,290 --> 00:04:36,800
McKinnon so the first question is can I

114
00:04:33,620 --> 00:04:38,420
actually get this turns out we show a

115
00:04:36,800 --> 00:04:40,280
lower bond that you cannot have

116
00:04:38,420 --> 00:04:42,530
something like this and in general we

117
00:04:40,280 --> 00:04:44,570
show that we show a lower bond which

118
00:04:42,530 --> 00:04:48,049
says if you want sub-linear locality

119
00:04:44,570 --> 00:04:52,820
then that implies linear band well this

120
00:04:48,050 --> 00:04:55,070
is not great but the on the flip side we

121
00:04:52,820 --> 00:04:56,870
show that if you have some leakage

122
00:04:55,070 --> 00:04:59,240
perhaps something is possible so the

123
00:04:56,870 --> 00:05:01,460
next question we ask us whether we can

124
00:04:59,240 --> 00:05:03,440
construct a bandwidth efficient over AM

125
00:05:01,460 --> 00:05:06,109
scheme that preserves data locality

126
00:05:03,440 --> 00:05:09,790
while only leaking the lengths of the

127
00:05:06,110 --> 00:05:12,950
contiguous regions that are accessed and

128
00:05:09,790 --> 00:05:16,130
under such a leakage we show the first

129
00:05:12,950 --> 00:05:18,080
Aram scheme with data locality so

130
00:05:16,130 --> 00:05:21,140
specifically if your access sequence is

131
00:05:18,080 --> 00:05:24,770
making T requests in such a way that it

132
00:05:21,140 --> 00:05:26,419
spans K discontinuous regions then we

133
00:05:24,770 --> 00:05:28,340
show an over AM scheme which has a

134
00:05:26,420 --> 00:05:30,770
bandwidth which is T times poly

135
00:05:28,340 --> 00:05:32,150
logarithmic in n so if you know the

136
00:05:30,770 --> 00:05:34,880
overrun literature this is something

137
00:05:32,150 --> 00:05:36,500
similar to what all Aram schemes do but

138
00:05:34,880 --> 00:05:38,930
the main part of the result is that we

139
00:05:36,500 --> 00:05:41,180
have locality that only depends on the

140
00:05:38,930 --> 00:05:42,920
number of discontinuous regions and the

141
00:05:41,180 --> 00:05:45,620
blow up is a factor of Paulino gardna

142
00:05:42,920 --> 00:05:47,600
Canyon specifically it does not depend

143
00:05:45,620 --> 00:05:49,030
on the number of memory locations T that

144
00:05:47,600 --> 00:05:52,100
is accessed

145
00:05:49,030 --> 00:05:54,320
we achieve this while using a client

146
00:05:52,100 --> 00:05:56,870
storage by using a constant plant

147
00:05:54,320 --> 00:05:58,969
storage and interestingly for some part

148
00:05:56,870 --> 00:06:02,110
of a computation we end up using two

149
00:05:58,970 --> 00:06:04,820
disks instead of one and that is

150
00:06:02,110 --> 00:06:09,440
essential to in a scheme to achieve

151
00:06:04,820 --> 00:06:11,840
locality so and as I mentioned earlier

152
00:06:09,440 --> 00:06:15,170
we end up leaking the lengths of the K

153
00:06:11,840 --> 00:06:16,700
regions that we are accessing so in a

154
00:06:15,170 --> 00:06:18,680
nutshell we have this upper bound and

155
00:06:16,700 --> 00:06:20,240
lower bound and for the rest of this

156
00:06:18,680 --> 00:06:26,000
talk I'm going to focus on the upper

157
00:06:20,240 --> 00:06:29,180
bound result so before I explain how to

158
00:06:26,000 --> 00:06:31,610
achieve this for a standard orem let me

159
00:06:29,180 --> 00:06:34,370
simplify the problem and show it show

160
00:06:31,610 --> 00:06:35,980
how it works for a simplified scheme or

161
00:06:34,370 --> 00:06:38,480
a simplified input pardon me

162
00:06:35,980 --> 00:06:39,650
so in general my request pattern can

163
00:06:38,480 --> 00:06:41,090
look like the following I want to read

164
00:06:39,650 --> 00:06:42,710
memory locations 2 3 4

165
00:06:41,090 --> 00:06:46,880
and then write to memory location seven

166
00:06:42,710 --> 00:06:47,388
and eight so T equals 5 and K equals 2

167
00:06:46,880 --> 00:06:49,520
over here

168
00:06:47,389 --> 00:06:51,650
so the first simplification I'm going to

169
00:06:49,520 --> 00:06:54,260
make is that instead of these requests

170
00:06:51,650 --> 00:06:57,620
coming one by one I know my ranges of

171
00:06:54,260 --> 00:07:00,349
life so I'm going to read know ahead of

172
00:06:57,620 --> 00:07:02,780
time that and the accesses is going to

173
00:07:00,350 --> 00:07:05,750
be four ranges to come before and seven

174
00:07:02,780 --> 00:07:08,479
to eight and a second simplification I'm

175
00:07:05,750 --> 00:07:12,470
going to make as that I will only allow

176
00:07:08,479 --> 00:07:16,270
reads for now so let us see how we can

177
00:07:12,470 --> 00:07:20,030
achieve this for the simple scenario and

178
00:07:16,270 --> 00:07:22,940
the high-level idea is to use what we

179
00:07:20,030 --> 00:07:25,070
call read only range of ROM and the idea

180
00:07:22,940 --> 00:07:26,690
is very simple instead of storing data

181
00:07:25,070 --> 00:07:29,389
in 1 over m I'm going to store data in

182
00:07:26,690 --> 00:07:32,139
log and different neurons or am 0 to a

183
00:07:29,389 --> 00:07:35,330
ROM login or log and +1 different terms

184
00:07:32,139 --> 00:07:37,430
so over m 0 stores my primitive data

185
00:07:35,330 --> 00:07:40,310
blocks the way you would think of

186
00:07:37,430 --> 00:07:43,490
storing data in Y over on or a month

187
00:07:40,310 --> 00:07:45,200
stores n over two blocks but each block

188
00:07:43,490 --> 00:07:47,120
is now a super block which is a

189
00:07:45,200 --> 00:07:50,090
concatenation of two block to primitive

190
00:07:47,120 --> 00:07:52,100
blocks so block one is block 1 comma 2

191
00:07:50,090 --> 00:07:53,840
the second block is 3 comma 4 and and so

192
00:07:52,100 --> 00:07:56,060
on and so forth so you have n over two

193
00:07:53,840 --> 00:07:58,909
super blocks of size two and in general

194
00:07:56,060 --> 00:08:03,200
over m is has n over 2 to the I super

195
00:07:58,910 --> 00:08:05,060
blocks each of size two design so the

196
00:08:03,200 --> 00:08:06,919
important invariant that we have over

197
00:08:05,060 --> 00:08:08,389
here is that all our arms should store

198
00:08:06,919 --> 00:08:10,700
identical information so if I'm

199
00:08:08,389 --> 00:08:13,010
accessing some block I in orem 0 should

200
00:08:10,700 --> 00:08:15,110
be the same as the the primitive block I

201
00:08:13,010 --> 00:08:19,400
in any of the log inner arms or log and

202
00:08:15,110 --> 00:08:22,370
plus 1 or ops so let's say now I want to

203
00:08:19,400 --> 00:08:23,690
access a range of size 2 to the J if

204
00:08:22,370 --> 00:08:26,349
it's something smaller than 2 to the J I

205
00:08:23,690 --> 00:08:30,169
can pad it to the nearest power of 2

206
00:08:26,349 --> 00:08:32,659
the observation is very simple a range

207
00:08:30,169 --> 00:08:34,760
of size to the J is covered by two super

208
00:08:32,659 --> 00:08:37,700
blocks of size 2 the 2 to the chain and

209
00:08:34,760 --> 00:08:40,909
if you think about this for 10 seconds

210
00:08:37,700 --> 00:08:41,659
you'll realize that the system and which

211
00:08:40,909 --> 00:08:43,968
to superblocks

212
00:08:41,659 --> 00:08:48,830
I can evaluate this by some simple math

213
00:08:43,969 --> 00:08:51,740
so now if I want to access a block of

214
00:08:48,830 --> 00:08:53,260
size tilde J I'll just go to o Ramji and

215
00:08:51,740 --> 00:08:56,200
perform my axis

216
00:08:53,260 --> 00:08:58,450
so that will have a bandwidth of two to

217
00:08:56,200 --> 00:09:00,190
the J Pauline Logan the Orem has a

218
00:08:58,450 --> 00:09:02,380
blow-up of Polly Logan and each block

219
00:09:00,190 --> 00:09:04,420
has size two to the J in terms of

220
00:09:02,380 --> 00:09:06,220
locality observe that this is

221
00:09:04,420 --> 00:09:08,170
independent of two to the J because

222
00:09:06,220 --> 00:09:12,880
whenever I'm accessing these chunks they

223
00:09:08,170 --> 00:09:14,530
are of size to the J together so the

224
00:09:12,880 --> 00:09:17,740
reason why this is a read-only Aram is

225
00:09:14,530 --> 00:09:19,600
because we want this invariant which

226
00:09:17,740 --> 00:09:23,320
says all over amps should store

227
00:09:19,600 --> 00:09:26,230
identical information and if I were to

228
00:09:23,320 --> 00:09:27,880
update this array engine or MJ I need to

229
00:09:26,230 --> 00:09:30,630
do it in all of the other over amps and

230
00:09:27,880 --> 00:09:35,740
that breaks either bandwidth or locality

231
00:09:30,630 --> 00:09:37,720
so in order to support writes we use a

232
00:09:35,740 --> 00:09:40,510
size slightly generalized data structure

233
00:09:37,720 --> 00:09:43,060
which we call a range tree and a range

234
00:09:40,510 --> 00:09:45,939
tree is the following tree where again

235
00:09:43,060 --> 00:09:48,790
leaves are the primitive blocks and they

236
00:09:45,940 --> 00:09:49,900
are sorted by addresses the distinction

237
00:09:48,790 --> 00:09:53,020
from what we were doing in the last

238
00:09:49,900 --> 00:09:55,689
slide is that over here these leaves

239
00:09:53,020 --> 00:09:57,640
could contain discontinuous blocks for

240
00:09:55,690 --> 00:10:01,900
example over here it's 1 2 5 & 6 blocks

241
00:09:57,640 --> 00:10:04,510
3 & 4 are not there and every internal

242
00:10:01,900 --> 00:10:06,640
node has super blocks which are a

243
00:10:04,510 --> 00:10:08,290
concatenation of its children and they

244
00:10:06,640 --> 00:10:10,900
are again replicated and so on and so

245
00:10:08,290 --> 00:10:12,819
forth and and looking ahead each of

246
00:10:10,900 --> 00:10:18,160
these levels will be stored in different

247
00:10:12,820 --> 00:10:19,390
Durham's and in order to support so if

248
00:10:18,160 --> 00:10:21,699
you think about what we did for

249
00:10:19,390 --> 00:10:23,860
read-only in your arms it is this full

250
00:10:21,700 --> 00:10:27,010
range tree consisting of all n elements

251
00:10:23,860 --> 00:10:30,630
so if you were to support writes I'm

252
00:10:27,010 --> 00:10:33,340
going to use a hierarchy of range trees

253
00:10:30,630 --> 00:10:34,990
so we're the largest tree contains all

254
00:10:33,340 --> 00:10:37,990
of my data and then I'm going to have

255
00:10:34,990 --> 00:10:40,090
many smaller range trees and I'm going

256
00:10:37,990 --> 00:10:41,710
to maintain these two invariants the

257
00:10:40,090 --> 00:10:44,100
first invariant us the range tree

258
00:10:41,710 --> 00:10:49,180
invariant which says within a tree

259
00:10:44,100 --> 00:10:51,100
blocks are consistent that is if I'm

260
00:10:49,180 --> 00:10:53,770
looking for a primitive block it will be

261
00:10:51,100 --> 00:10:55,030
stored at all of these different heights

262
00:10:53,770 --> 00:10:58,329
and each of them will have the same

263
00:10:55,030 --> 00:11:00,189
information information and the second

264
00:10:58,330 --> 00:11:03,580
invariant that we maintain is that

265
00:11:00,190 --> 00:11:05,380
smaller trees of fresher that is across

266
00:11:03,580 --> 00:11:06,559
these ranges blocks may not be

267
00:11:05,380 --> 00:11:09,559
consistent but

268
00:11:06,559 --> 00:11:11,539
whenever I have two blocks across trees

269
00:11:09,559 --> 00:11:14,358
the smaller one will be the fresher one

270
00:11:11,539 --> 00:11:18,199
or smaller trees act as a cache or a

271
00:11:14,359 --> 00:11:20,149
stash for a larger tree so let us see

272
00:11:18,199 --> 00:11:23,029
with this data structure how we can

273
00:11:20,149 --> 00:11:26,209
perform an axis at a high level B then

274
00:11:23,029 --> 00:11:28,789
Aram each axis consists of two parts

275
00:11:26,209 --> 00:11:30,858
first I fed some data and store it on

276
00:11:28,789 --> 00:11:34,939
some contagious locations on the server

277
00:11:30,859 --> 00:11:36,979
and then I engage in a maintain or a

278
00:11:34,939 --> 00:11:38,779
rebuild process where I'm going to write

279
00:11:36,979 --> 00:11:42,409
this data back into the Orang data

280
00:11:38,779 --> 00:11:45,739
structure so let us see how to do each

281
00:11:42,409 --> 00:11:49,729
of these in power let's say I have a

282
00:11:45,739 --> 00:11:54,829
request which says read some locations

283
00:11:49,729 --> 00:11:56,839
as kamati so for range trees which have

284
00:11:54,829 --> 00:12:01,519
a root size smaller than this range all

285
00:11:56,839 --> 00:12:05,389
I'm going to do is access the root for

286
00:12:01,519 --> 00:12:07,639
range trees but that are larger and I

287
00:12:05,389 --> 00:12:10,369
now need to find two super blocks that

288
00:12:07,639 --> 00:12:12,079
store this range s comma T so earlier

289
00:12:10,369 --> 00:12:13,279
with the read-only range or and this was

290
00:12:12,079 --> 00:12:14,839
easy because I could use some simple

291
00:12:13,279 --> 00:12:16,519
math and figure out where these two to

292
00:12:14,839 --> 00:12:19,789
where these two super blocks are stored

293
00:12:16,519 --> 00:12:23,059
but now it turns out I cannot do that

294
00:12:19,789 --> 00:12:26,239
because my data need not be a set of all

295
00:12:23,059 --> 00:12:28,759
n memory locations so in order to

296
00:12:26,239 --> 00:12:31,579
actually find which two these blocks are

297
00:12:28,759 --> 00:12:34,609
we will use a separate auxiliary data

298
00:12:31,579 --> 00:12:36,409
structure which would be oblivious at a

299
00:12:34,609 --> 00:12:38,659
high level if you use if you perform

300
00:12:36,409 --> 00:12:41,329
some sort of a binary search on top of a

301
00:12:38,659 --> 00:12:44,119
know Ram that data structure should be

302
00:12:41,329 --> 00:12:47,238
sufficient to obtain these two blocks

303
00:12:44,119 --> 00:12:49,729
and then I'm going to access these

304
00:12:47,239 --> 00:12:54,399
appropriate blocks from Orange a where

305
00:12:49,729 --> 00:12:54,399
AM J where J is log of t minus s plus

306
00:12:54,429 --> 00:13:00,499
1.so and at the end of this I have data

307
00:12:58,039 --> 00:13:03,019
from each of these ramps all written to

308
00:13:00,499 --> 00:13:05,479
a server and the same log can be

309
00:13:03,019 --> 00:13:07,759
repeated multiple times and I need to

310
00:13:05,479 --> 00:13:13,129
perform some sort of deduplication to

311
00:13:07,759 --> 00:13:15,799
get freshest range s comma T so let us

312
00:13:13,129 --> 00:13:18,169
try to analyze the locality of this

313
00:13:15,799 --> 00:13:19,909
algorithm and again remember locality is

314
00:13:18,169 --> 00:13:20,420
the number of disk on teachers accesses

315
00:13:19,909 --> 00:13:24,380
or the number

316
00:13:20,420 --> 00:13:25,969
of jumps so for the first step we have

317
00:13:24,380 --> 00:13:29,329
they just making up to log and

318
00:13:25,970 --> 00:13:33,500
discontinuous accesses of size of of the

319
00:13:29,329 --> 00:13:35,300
size of the range for the second step

320
00:13:33,500 --> 00:13:37,100
for accessing the oblivious data

321
00:13:35,300 --> 00:13:39,319
structure and we are again making poly

322
00:13:37,100 --> 00:13:41,329
logarithmic accesses but this is of size

323
00:13:39,320 --> 00:13:45,649
one because all we are accessing in the

324
00:13:41,329 --> 00:13:47,930
data structure is some index for the

325
00:13:45,649 --> 00:13:50,870
next step when I'm actually performing

326
00:13:47,930 --> 00:13:52,310
this axis again I'm making poly

327
00:13:50,870 --> 00:13:55,120
logarithmic number of discontinuous

328
00:13:52,310 --> 00:13:57,018
accesses of the size of the range and

329
00:13:55,120 --> 00:13:59,750
finally in order to perform

330
00:13:57,019 --> 00:14:01,790
deduplication we'll use some sort of a

331
00:13:59,750 --> 00:14:04,490
locality of friendly oublie with certain

332
00:14:01,790 --> 00:14:07,040
so for now I'm going to punt on W sort

333
00:14:04,490 --> 00:14:10,010
I'll revisit it when we reach the

334
00:14:07,040 --> 00:14:14,060
maintain phase but for now if you would

335
00:14:10,010 --> 00:14:16,430
observe all of these points or all of

336
00:14:14,060 --> 00:14:19,219
them do not depend on the range in terms

337
00:14:16,430 --> 00:14:23,388
of locality or localities independent of

338
00:14:19,220 --> 00:14:25,130
size of the range so with that let us

339
00:14:23,389 --> 00:14:27,620
see how we can perform a maintain

340
00:14:25,130 --> 00:14:29,630
operation or a rebuild operation and the

341
00:14:27,620 --> 00:14:32,750
goal over here is to write this access

342
00:14:29,630 --> 00:14:37,130
data back into the data structure so

343
00:14:32,750 --> 00:14:38,990
updating arrange tree is hard and it is

344
00:14:37,130 --> 00:14:41,779
because we want to store consistent

345
00:14:38,990 --> 00:14:43,519
values across different heights so if

346
00:14:41,779 --> 00:14:47,000
you think of accessing the range of size

347
00:14:43,519 --> 00:14:48,980
K and now I have to update it across all

348
00:14:47,000 --> 00:14:51,440
Heights for accessing the root I'm going

349
00:14:48,980 --> 00:14:53,260
to incur a large bandwidth because I'll

350
00:14:51,440 --> 00:14:55,640
have to download the entire data and

351
00:14:53,260 --> 00:14:57,290
similarly for accessing the leaves I'm

352
00:14:55,640 --> 00:14:58,670
going to incur a large locality because

353
00:14:57,290 --> 00:15:02,930
I'm going to do it I need to do it one

354
00:14:58,670 --> 00:15:04,310
by one and the fix over here is to

355
00:15:02,930 --> 00:15:07,130
actually write in a smaller range tree

356
00:15:04,310 --> 00:15:08,899
and rebuild range trees if if you take a

357
00:15:07,130 --> 00:15:10,339
bird's eye view and see what we are

358
00:15:08,899 --> 00:15:12,500
doing over here this is something

359
00:15:10,339 --> 00:15:14,560
similar to what rebuild operations how

360
00:15:12,500 --> 00:15:19,880
rebuild operations are performed in

361
00:15:14,560 --> 00:15:21,739
hierarchical or arms in general but the

362
00:15:19,880 --> 00:15:24,740
important constraint that we need to

363
00:15:21,740 --> 00:15:26,510
maintain over here is locality so we

364
00:15:24,740 --> 00:15:28,519
require over arms that have a locality

365
00:15:26,510 --> 00:15:30,189
friendly initialization and a locality

366
00:15:28,519 --> 00:15:32,480
friendly rebuild procedure

367
00:15:30,190 --> 00:15:34,310
specifically I cannot initialize an over

368
00:15:32,480 --> 00:15:36,889
on by saying I start with an empty

369
00:15:34,310 --> 00:15:39,768
and add blocks one by one I need to do

370
00:15:36,889 --> 00:15:42,499
it as a batch and an important

371
00:15:39,769 --> 00:15:44,839
ingredient turns out is a locality

372
00:15:42,499 --> 00:15:47,899
friendly oblivious sort and over here we

373
00:15:44,839 --> 00:15:50,449
use baton exert and we show that if you

374
00:15:47,899 --> 00:15:52,759
have two disks then Botanic sort can be

375
00:15:50,449 --> 00:15:54,889
implemented with order log square and

376
00:15:52,759 --> 00:15:56,569
locality and n log square and bandwidth

377
00:15:54,889 --> 00:16:03,319
and this is where the notion of two

378
00:15:56,569 --> 00:16:05,449
disks come in in a final result all

379
00:16:03,319 --> 00:16:07,610
right so we spoke about how to do

380
00:16:05,449 --> 00:16:09,349
read-only in your arms using a very

381
00:16:07,610 --> 00:16:11,379
specific range tree how to do read and

382
00:16:09,350 --> 00:16:14,240
write using the hierarchy of range trees

383
00:16:11,379 --> 00:16:17,660
let us try to see how we can move from

384
00:16:14,240 --> 00:16:19,249
offline to online again the idea over

385
00:16:17,660 --> 00:16:22,730
here is simple

386
00:16:19,249 --> 00:16:25,670
I have requests coming one by one all

387
00:16:22,730 --> 00:16:29,329
I'll do is some sort of a predictive

388
00:16:25,670 --> 00:16:31,639
prefetching whenever I see my request

389
00:16:29,329 --> 00:16:33,589
sequence if I see that the request

390
00:16:31,639 --> 00:16:36,790
sequence is discontinuous I just access

391
00:16:33,589 --> 00:16:39,889
a block of size one on the other hand if

392
00:16:36,790 --> 00:16:43,059
requests are contagious then I'm going

393
00:16:39,889 --> 00:16:46,009
to prefetch a larger super block of

394
00:16:43,059 --> 00:16:49,069
double the size of what I did earlier so

395
00:16:46,009 --> 00:16:51,439
if I have so it just grows it's

396
00:16:49,069 --> 00:16:53,000
geometrically so if I have requests

397
00:16:51,439 --> 00:16:55,430
which are which looks like two three

398
00:16:53,000 --> 00:16:57,470
four five six for every 1 comma 4 first

399
00:16:55,430 --> 00:16:58,758
I'll access a block of size one then a

400
00:16:57,470 --> 00:17:00,620
block of size two then a block of size

401
00:16:58,759 --> 00:17:03,170
four and then I observe that localities

402
00:17:00,620 --> 00:17:04,730
not maintained when request sequence one

403
00:17:03,170 --> 00:17:08,030
who comes in and then I'll start all

404
00:17:04,730 --> 00:17:11,059
over again and as we can easily see a

405
00:17:08,030 --> 00:17:13,129
range of length L just requires up to

406
00:17:11,059 --> 00:17:15,470
log L accesses so I can move from

407
00:17:13,130 --> 00:17:18,530
offline to online by throwing in another

408
00:17:15,470 --> 00:17:24,319
log and factor in terms of both locality

409
00:17:18,530 --> 00:17:26,689
environment so to summarize here are our

410
00:17:24,319 --> 00:17:29,330
contributions I discussed the upper

411
00:17:26,689 --> 00:17:31,250
bound over here now in the presentation

412
00:17:29,330 --> 00:17:35,809
for the lower bound I would urge you to

413
00:17:31,250 --> 00:17:39,200
read our paper but before ending my talk

414
00:17:35,809 --> 00:17:41,600
I would quickly discuss whether such a

415
00:17:39,200 --> 00:17:44,630
length leakage in an over amis

416
00:17:41,600 --> 00:17:46,789
reasonable and I would first make a

417
00:17:44,630 --> 00:17:47,870
number law statement that this largely

418
00:17:46,789 --> 00:17:50,419
depends on the application

419
00:17:47,870 --> 00:17:52,158
if lengths are already public knowledge

420
00:17:50,419 --> 00:17:54,770
Ranger hands are useful and then they'll

421
00:17:52,159 --> 00:17:58,520
give you efficiency because because of

422
00:17:54,770 --> 00:18:00,889
locality however on the flip side I'll

423
00:17:58,520 --> 00:18:03,679
also mention that range or a monastic

424
00:18:00,890 --> 00:18:05,779
generalization of a regular era I can

425
00:18:03,679 --> 00:18:07,730
always turn off the locality feature by

426
00:18:05,779 --> 00:18:12,590
just not using predictive prefetching

427
00:18:07,730 --> 00:18:14,870
and finally in recently people have

428
00:18:12,590 --> 00:18:16,370
considered trying to hide the access

429
00:18:14,870 --> 00:18:18,918
pattern length using differential

430
00:18:16,370 --> 00:18:20,899
privacy perhaps something like this can

431
00:18:18,919 --> 00:18:27,679
be used over here

432
00:18:20,899 --> 00:18:30,439
to hide the length of ranges let me end

433
00:18:27,679 --> 00:18:34,010
my talk by posing some open questions

434
00:18:30,440 --> 00:18:35,360
the first open question and to me this

435
00:18:34,010 --> 00:18:37,129
is the most interesting open question is

436
00:18:35,360 --> 00:18:39,830
can we actually preserve the number of

437
00:18:37,130 --> 00:18:41,390
disks while achieving obliviousness for

438
00:18:39,830 --> 00:18:46,610
instance our solution uses two disks and

439
00:18:41,390 --> 00:18:47,809
that stems from using a bionic sort it

440
00:18:46,610 --> 00:18:49,850
turns out that there have been some

441
00:18:47,809 --> 00:18:52,990
partial progress through a subsequent

442
00:18:49,850 --> 00:18:56,059
work which was published in NDS 2019 and

443
00:18:52,990 --> 00:18:59,299
over there they assume a larger client

444
00:18:56,059 --> 00:19:01,490
storage and they are able to do this

445
00:18:59,299 --> 00:19:03,710
using a single disk and the client

446
00:19:01,490 --> 00:19:07,210
storage that they assume is the size of

447
00:19:03,710 --> 00:19:09,320
the range that you have accessed a

448
00:19:07,210 --> 00:19:12,890
second interesting open question over

449
00:19:09,320 --> 00:19:15,590
here is can we have a locality

450
00:19:12,890 --> 00:19:19,730
preserving a pram or an oblivious parent

451
00:19:15,590 --> 00:19:21,620
run and finally until now I have

452
00:19:19,730 --> 00:19:23,990
discussed everything in terms of poly

453
00:19:21,620 --> 00:19:26,178
low poly login and so an interesting

454
00:19:23,990 --> 00:19:29,179
question is can we get actual asymptotic

455
00:19:26,179 --> 00:19:32,750
efficiency in fact a previous draft of

456
00:19:29,179 --> 00:19:34,130
our own work discusses better

457
00:19:32,750 --> 00:19:37,850
asymptotics for the same scheme that I

458
00:19:34,130 --> 00:19:40,490
described and this work in in DSS 19

459
00:19:37,850 --> 00:19:43,070
also talks about the actual asymptotics

460
00:19:40,490 --> 00:19:45,620
so the interesting part of this work is

461
00:19:43,070 --> 00:19:48,230
that they use a tree based over m

462
00:19:45,620 --> 00:19:53,059
instead of a hierarchical Aram to

463
00:19:48,230 --> 00:19:55,659
achieve locality thank you and I'd be

464
00:19:53,059 --> 00:19:55,658
happy to take questions

465
00:19:59,639 --> 00:20:05,459
so yeah questions if a question please

466
00:20:02,830 --> 00:20:05,460
come to the mic

467
00:20:24,759 --> 00:20:28,680
all right thank you okay let's thank the

468
00:20:28,249 --> 00:20:32,979
speaker

469
00:20:28,680 --> 00:20:32,979
[Applause]

