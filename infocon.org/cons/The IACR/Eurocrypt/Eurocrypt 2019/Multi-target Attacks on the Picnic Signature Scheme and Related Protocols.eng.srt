1
00:00:00,030 --> 00:00:03,360
okay thank you very much a question for

2
00:00:02,009 --> 00:00:06,649
the introduction

3
00:00:03,360 --> 00:00:10,320
so this talk will indeed be about the

4
00:00:06,649 --> 00:00:13,139
picnic signature scheme so basically the

5
00:00:10,320 --> 00:00:17,070
picnic is a new signature scheme that is

6
00:00:13,139 --> 00:00:20,900
based on symmetric key algorithms and as

7
00:00:17,070 --> 00:00:24,240
such it hopefully resist attacks on

8
00:00:20,900 --> 00:00:27,090
quantum computers and in fact picnic is

9
00:00:24,240 --> 00:00:31,198
a second-round candidate in this post

10
00:00:27,090 --> 00:00:34,469
quantum standardization project ok so

11
00:00:31,199 --> 00:00:37,350
although it is based on symmetric key

12
00:00:34,469 --> 00:00:42,500
algorithms the design of picnic is kind

13
00:00:37,350 --> 00:00:46,469
of unique and it is completely different

14
00:00:42,500 --> 00:00:49,680
than the classical hash based signature

15
00:00:46,469 --> 00:00:52,170
schemes ok and because this is kind of a

16
00:00:49,680 --> 00:00:54,500
new and interesting design the hope is

17
00:00:52,170 --> 00:00:57,629
that there is a lot of room for

18
00:00:54,500 --> 00:01:01,890
optimizations in this game and this is

19
00:00:57,629 --> 00:01:05,459
work that is currently going on okay so

20
00:01:01,890 --> 00:01:07,439
the picnic team a has as you can see

21
00:01:05,459 --> 00:01:12,030
many people are coming from various

22
00:01:07,439 --> 00:01:14,548
institutions ok so in this work what we

23
00:01:12,030 --> 00:01:17,580
do is a we're going to devise a multi

24
00:01:14,549 --> 00:01:21,180
target attack on the initial version of

25
00:01:17,580 --> 00:01:24,000
picnic and the attack is a bit unusual

26
00:01:21,180 --> 00:01:26,430
in the sense that it is actually not

27
00:01:24,000 --> 00:01:28,950
evident like standard multi target

28
00:01:26,430 --> 00:01:30,810
attacks unlike standard multi target

29
00:01:28,950 --> 00:01:33,540
attacks it is not evident from the

30
00:01:30,810 --> 00:01:35,159
high-level overview of the scheme and in

31
00:01:33,540 --> 00:01:37,310
fact they're most of the stock I'm going

32
00:01:35,159 --> 00:01:41,520
to describe to you how picnic works a

33
00:01:37,310 --> 00:01:43,710
kind of detailed level because otherwise

34
00:01:41,520 --> 00:01:45,420
it's not really possible to understand

35
00:01:43,710 --> 00:01:49,369
the attack so we're going to really dive

36
00:01:45,420 --> 00:01:51,780
into the design and I think this is also

37
00:01:49,369 --> 00:01:53,430
would be kind of interesting because if

38
00:01:51,780 --> 00:01:55,259
you don't know how a picnic works and

39
00:01:53,430 --> 00:01:59,729
like I said it's a very new and

40
00:01:55,259 --> 00:02:03,149
innovative design so in this sense it's

41
00:01:59,729 --> 00:02:05,130
quite interesting and the attack like I

42
00:02:03,149 --> 00:02:07,560
said it will require kind of careful

43
00:02:05,130 --> 00:02:10,619
analysis of the internal components of

44
00:02:07,560 --> 00:02:12,480
technique and it turns out that it

45
00:02:10,619 --> 00:02:13,680
actually exploit the weak a weakness

46
00:02:12,480 --> 00:02:18,390
that exists in a

47
00:02:13,680 --> 00:02:21,569
related schemes and finally this this

48
00:02:18,390 --> 00:02:25,260
weakness was fixed and the latest

49
00:02:21,569 --> 00:02:27,298
version of picnic okay so as I said I

50
00:02:25,260 --> 00:02:29,909
will start and actually most of this

51
00:02:27,299 --> 00:02:34,769
talk will be just to explain to you how

52
00:02:29,909 --> 00:02:38,399
picnic works okay so basically picnic

53
00:02:34,769 --> 00:02:41,700
like in many signature schemes you start

54
00:02:38,400 --> 00:02:45,810
by selecting a secret key and the public

55
00:02:41,700 --> 00:02:50,760
key is just some function of the secret

56
00:02:45,810 --> 00:02:52,620
key some function f and obviously you

57
00:02:50,760 --> 00:02:55,679
don't want the public key to leak the

58
00:02:52,620 --> 00:02:58,500
secret key so this F must be hard to

59
00:02:55,680 --> 00:03:02,099
invert and in particular in picnic it is

60
00:02:58,500 --> 00:03:04,980
implemented by a block cipher okay and

61
00:03:02,099 --> 00:03:07,950
what is a signature picnic and basically

62
00:03:04,980 --> 00:03:11,939
an signature is a proof that the signer

63
00:03:07,950 --> 00:03:15,418
knows this secret key or signing key

64
00:03:11,939 --> 00:03:16,049
where m the message is embedded as a

65
00:03:15,419 --> 00:03:22,049
nonce

66
00:03:16,049 --> 00:03:25,379
in this signature so obviously this

67
00:03:22,049 --> 00:03:27,120
signature or proof cannot leak the

68
00:03:25,379 --> 00:03:29,159
secret key you don't want it to look at

69
00:03:27,120 --> 00:03:31,799
the cigarette case so it must be a zero

70
00:03:29,159 --> 00:03:34,168
knowledge proof okay so let's go into a

71
00:03:31,799 --> 00:03:35,729
bit more details what we're going to do

72
00:03:34,169 --> 00:03:38,310
is basically we're going to represent

73
00:03:35,729 --> 00:03:41,060
this function f okay we're going to

74
00:03:38,310 --> 00:03:44,430
represent it as a circuit as a boolean

75
00:03:41,060 --> 00:03:48,209
just its implementation and we're going

76
00:03:44,430 --> 00:03:51,810
to denote the secret or the secret

77
00:03:48,209 --> 00:03:56,909
signing key or the private input to the

78
00:03:51,810 --> 00:03:59,209
circuit by X with bits x1 up to xn okay

79
00:03:56,909 --> 00:04:03,679
and we're going to denote the output

80
00:03:59,209 --> 00:04:07,139
public key by Y with bits y1 up to Y M

81
00:04:03,680 --> 00:04:10,409
okay so the only thing that's unknown

82
00:04:07,139 --> 00:04:13,500
here basically in this picture is the

83
00:04:10,409 --> 00:04:16,079
input to the circuit is the X's right

84
00:04:13,500 --> 00:04:18,449
okay so now what the signer wants to do

85
00:04:16,079 --> 00:04:21,930
is to prove and zero knowledge that they

86
00:04:18,449 --> 00:04:24,960
know some X such that when plugged into

87
00:04:21,930 --> 00:04:27,360
the circuit see evaluates to the public

88
00:04:24,960 --> 00:04:30,719
value of Y okay so this is

89
00:04:27,360 --> 00:04:32,310
kind of the goal okay the main building

90
00:04:30,720 --> 00:04:35,280
block for doing this is going to be

91
00:04:32,310 --> 00:04:38,729
multi-party computation and in fact

92
00:04:35,280 --> 00:04:42,239
we're going to use an approach for

93
00:04:38,729 --> 00:04:45,438
building zero knowledge that is called

94
00:04:42,240 --> 00:04:49,159
MPC in the head by issue at all

95
00:04:45,439 --> 00:04:52,469
okay so let's go into a bit more details

96
00:04:49,159 --> 00:04:55,620
so at first I'm going to assume that the

97
00:04:52,469 --> 00:05:00,150
signing and verification process is an

98
00:04:55,620 --> 00:05:03,810
interactive process between a signer and

99
00:05:00,150 --> 00:05:06,030
a verifier okay so later we'll see how

100
00:05:03,810 --> 00:05:09,810
to remove the assumption but basically

101
00:05:06,030 --> 00:05:13,489
the prover or signer starts the process

102
00:05:09,810 --> 00:05:17,190
by choosing three random input shares

103
00:05:13,490 --> 00:05:21,690
that XOR such that their XOR is this

104
00:05:17,190 --> 00:05:23,969
secret of secret key secret signing key

105
00:05:21,690 --> 00:05:25,650
that designer knows guys know is going

106
00:05:23,969 --> 00:05:29,909
to pick them at random such that their

107
00:05:25,650 --> 00:05:32,239
XOR is equal to X okay now it's going to

108
00:05:29,909 --> 00:05:35,969
imagine in his head that there exists

109
00:05:32,240 --> 00:05:37,879
some three virtual players okay and it's

110
00:05:35,969 --> 00:05:42,589
going to give each one its corresponding

111
00:05:37,879 --> 00:05:45,479
share this W share and now it's going to

112
00:05:42,589 --> 00:05:49,469
internally run a multi-party computation

113
00:05:45,479 --> 00:05:51,529
among these three virtual players okay

114
00:05:49,469 --> 00:05:53,819
and the output basically of this

115
00:05:51,529 --> 00:05:57,740
multi-party computation is going to be

116
00:05:53,819 --> 00:06:02,039
the final shares this final W States and

117
00:05:57,740 --> 00:06:05,339
basically the property that we want

118
00:06:02,039 --> 00:06:08,068
these Wu's to fulfill is that they're

119
00:06:05,339 --> 00:06:13,069
XOR is just the output of the circuit

120
00:06:08,069 --> 00:06:16,460
which is the public and known value why

121
00:06:13,069 --> 00:06:19,860
okay and what we want of this

122
00:06:16,460 --> 00:06:21,779
multi-party computation we want

123
00:06:19,860 --> 00:06:25,199
basically to preserve the following

124
00:06:21,779 --> 00:06:27,870
privacy requirements such that F two of

125
00:06:25,199 --> 00:06:30,509
these virtual players combine their

126
00:06:27,870 --> 00:06:34,800
information then they learn nothing

127
00:06:30,509 --> 00:06:38,849
about this secret X okay so how does

128
00:06:34,800 --> 00:06:41,220
this have to happen we actually use this

129
00:06:38,849 --> 00:06:43,770
protocol to build a signature

130
00:06:41,220 --> 00:06:45,060
scheme so let's assume that the

131
00:06:43,770 --> 00:06:48,990
preferred signer

132
00:06:45,060 --> 00:06:51,330
run this amp Ren this MPC protocol okay

133
00:06:48,990 --> 00:06:53,490
and now the problem what is going to do

134
00:06:51,330 --> 00:06:55,859
is going to commit to the view of each

135
00:06:53,490 --> 00:06:59,010
player so what does that mean and

136
00:06:55,860 --> 00:07:01,110
protocol is going to hash the the input

137
00:06:59,010 --> 00:07:03,270
of this player for each player it's

138
00:07:01,110 --> 00:07:11,310
going to wash its input its randomness

139
00:07:03,270 --> 00:07:13,590
that maybe I produced it state and the

140
00:07:11,310 --> 00:07:15,300
messages that it's sent and received all

141
00:07:13,590 --> 00:07:17,489
of this is going to be called the view

142
00:07:15,300 --> 00:07:19,440
and the approver is going to commit to

143
00:07:17,490 --> 00:07:21,540
the view by a basically hashing all this

144
00:07:19,440 --> 00:07:23,910
for each player is going to hash all

145
00:07:21,540 --> 00:07:25,620
these values okay so we have these three

146
00:07:23,910 --> 00:07:28,470
commitments didn't want to send them to

147
00:07:25,620 --> 00:07:30,510
the verifier okay now the verifier

148
00:07:28,470 --> 00:07:32,640
chooses a challenge which is just a

149
00:07:30,510 --> 00:07:34,860
number one two or three and it's going

150
00:07:32,640 --> 00:07:37,080
to send it back to the proper order or

151
00:07:34,860 --> 00:07:42,080
signer and now the signer is going to

152
00:07:37,080 --> 00:07:45,419
reveal two of the views to the verifier

153
00:07:42,080 --> 00:07:49,109
of the players of the players except

154
00:07:45,419 --> 00:07:51,719
player I okay and now the verifier can

155
00:07:49,110 --> 00:07:56,070
what can we do we can check that the

156
00:07:51,720 --> 00:07:58,710
action that the NPC computation is going

157
00:07:56,070 --> 00:08:00,840
has been done correctly on these two

158
00:07:58,710 --> 00:08:03,599
players and you can also check that the

159
00:08:00,840 --> 00:08:06,780
initial commitments were computed

160
00:08:03,600 --> 00:08:09,479
correctly that the approver sent okay so

161
00:08:06,780 --> 00:08:12,719
this is basically the main these are

162
00:08:09,479 --> 00:08:16,919
basically the main ideas of the protocol

163
00:08:12,720 --> 00:08:20,970
and what does this protocol kind of bias

164
00:08:16,919 --> 00:08:22,440
what what are its properties so first of

165
00:08:20,970 --> 00:08:24,240
all it is clear that it is zero

166
00:08:22,440 --> 00:08:27,479
knowledge because the verifier gets to

167
00:08:24,240 --> 00:08:29,669
see only two out of the three views of

168
00:08:27,479 --> 00:08:31,800
the players okay and therefore by the

169
00:08:29,669 --> 00:08:35,400
properties of the npc scheming learns

170
00:08:31,800 --> 00:08:39,810
nothing about this this X right this

171
00:08:35,400 --> 00:08:41,880
input secret end okay and what about

172
00:08:39,809 --> 00:08:44,640
soundness is the proof really convincing

173
00:08:41,880 --> 00:08:47,820
well if the prover does not know X and

174
00:08:44,640 --> 00:08:50,819
tries to cheat okay and then it is easy

175
00:08:47,820 --> 00:08:54,480
to say that either either a player has

176
00:08:50,820 --> 00:08:54,930
misbehaved or two views are inconsistent

177
00:08:54,480 --> 00:08:58,680
in

178
00:08:54,930 --> 00:09:01,170
that messages received and sent and

179
00:08:58,680 --> 00:09:03,209
received are not consistent it is quite

180
00:09:01,170 --> 00:09:05,430
easy to see that the verifier can catch

181
00:09:03,210 --> 00:09:08,820
the cheating proverb with probability

182
00:09:05,430 --> 00:09:10,680
1/3 at least 1/3 okay of course this is

183
00:09:08,820 --> 00:09:12,800
a very low probability and we want to

184
00:09:10,680 --> 00:09:16,439
amplify it we just repeat the process

185
00:09:12,800 --> 00:09:23,089
say our times in particular if we choose

186
00:09:16,440 --> 00:09:23,090
R equals to 2 219 we can get sound this

187
00:09:23,240 --> 00:09:35,450
probability to be 1 minus 2 to the 128

188
00:09:27,740 --> 00:09:38,820
okay so we get very good soundness okay

189
00:09:35,450 --> 00:09:41,070
so we said that the process we described

190
00:09:38,820 --> 00:09:42,600
the process the signing process is an

191
00:09:41,070 --> 00:09:44,340
interactive process of course the

192
00:09:42,600 --> 00:09:46,560
signature is not an interactive process

193
00:09:44,340 --> 00:09:48,210
so we have to remove the interactions

194
00:09:46,560 --> 00:09:51,089
and we do it actually in the standard

195
00:09:48,210 --> 00:09:54,420
way such that the signer generates this

196
00:09:51,090 --> 00:09:56,310
random challenges that the verify should

197
00:09:54,420 --> 00:09:59,370
have been sent by the future mere

198
00:09:56,310 --> 00:10:03,030
transform so basically by hashing with

199
00:09:59,370 --> 00:10:06,290
the commitments that he produced with

200
00:10:03,030 --> 00:10:10,100
the message okay so this is the basic

201
00:10:06,290 --> 00:10:13,250
basic idea here and it is quite standard

202
00:10:10,100 --> 00:10:18,450
so to sum up a signature for Technic

203
00:10:13,250 --> 00:10:20,310
includes for each one 1 2 R it includes

204
00:10:18,450 --> 00:10:23,190
3 commitments right the three

205
00:10:20,310 --> 00:10:25,979
commitments for the players and the

206
00:10:23,190 --> 00:10:29,130
views of the full views of the two

207
00:10:25,980 --> 00:10:31,230
players that were opened right and of

208
00:10:29,130 --> 00:10:34,170
course the third player is not open

209
00:10:31,230 --> 00:10:37,140
because it will reveal the the secret

210
00:10:34,170 --> 00:10:39,510
signing key okay so this is basically a

211
00:10:37,140 --> 00:10:41,880
signature of pigley okay so now we

212
00:10:39,510 --> 00:10:44,700
actually have to look into a bit more

213
00:10:41,880 --> 00:10:47,310
details we're going to have to look into

214
00:10:44,700 --> 00:10:51,540
the actual implementation of the this

215
00:10:47,310 --> 00:10:54,660
NPC protocol okay so how is the NPC

216
00:10:51,540 --> 00:10:56,699
protocol of picnic implemented basically

217
00:10:54,660 --> 00:10:59,459
remember that we have this boolean

218
00:10:56,700 --> 00:11:02,760
circuit C okay and this boy in circuit

219
00:10:59,460 --> 00:11:04,860
has several wires and basically let's

220
00:11:02,760 --> 00:11:07,830
look at the particular wire with some

221
00:11:04,860 --> 00:11:08,790
value let's call it a okay and basically

222
00:11:07,830 --> 00:11:11,900
we have

223
00:11:08,790 --> 00:11:14,520
players and each player is going to have

224
00:11:11,900 --> 00:11:19,170
kind of a duplicate of the circuit so

225
00:11:14,520 --> 00:11:22,410
it's going to hold a wire with

226
00:11:19,170 --> 00:11:25,589
corresponding values a 1 a 2 a 3 for the

227
00:11:22,410 --> 00:11:28,110
players okay what we want to do is to

228
00:11:25,590 --> 00:11:30,360
maintain an additive secret sharing

229
00:11:28,110 --> 00:11:32,880
invariant in the sense that the XOR of

230
00:11:30,360 --> 00:11:35,640
all these to all these three values

231
00:11:32,880 --> 00:11:39,420
should be equal to the original value of

232
00:11:35,640 --> 00:11:41,069
the circuit of the circuit a ok so how

233
00:11:39,420 --> 00:11:43,740
are we going to do that we kind of need

234
00:11:41,070 --> 00:11:47,580
to propagate this invariant through the

235
00:11:43,740 --> 00:11:50,390
gates of the circuit ok so if we start

236
00:11:47,580 --> 00:11:53,070
for example by an a linear XOR gate then

237
00:11:50,390 --> 00:11:56,340
propagation from inputs to outputs are

238
00:11:53,070 --> 00:12:01,110
kind of easy because each player can

239
00:11:56,340 --> 00:12:04,410
just XOR its inputs and then this

240
00:12:01,110 --> 00:12:06,360
invariant this then your relative secret

241
00:12:04,410 --> 00:12:07,980
sharing is propagated to the output this

242
00:12:06,360 --> 00:12:11,190
is not very difficult to see

243
00:12:07,980 --> 00:12:14,070
however for and gates maintaining the

244
00:12:11,190 --> 00:12:16,320
environment is more difficult ok and

245
00:12:14,070 --> 00:12:18,690
this actually requires the players to

246
00:12:16,320 --> 00:12:22,530
communicate and to generate random bits

247
00:12:18,690 --> 00:12:24,780
ok and for this technique employ some

248
00:12:22,530 --> 00:12:26,939
NPC in the head optimizations and

249
00:12:24,780 --> 00:12:29,640
particularly remember that the prover

250
00:12:26,940 --> 00:12:32,970
actually does not really have to run an

251
00:12:29,640 --> 00:12:36,810
NPC protocol it's everything is virtual

252
00:12:32,970 --> 00:12:39,900
so actually messages don't have to be

253
00:12:36,810 --> 00:12:42,869
sent so what we're going to know is

254
00:12:39,900 --> 00:12:45,569
basically I have the output value of P I

255
00:12:42,870 --> 00:12:49,440
depend only on the inputs on its own

256
00:12:45,570 --> 00:12:50,940
inputs and the inputs of P I plus 1 ok

257
00:12:49,440 --> 00:12:53,670
so this is basically kind of the

258
00:12:50,940 --> 00:12:59,130
dependency graph among the players in

259
00:12:53,670 --> 00:13:01,800
the protocol ok so let's again go a bit

260
00:12:59,130 --> 00:13:05,550
deeper so how in particular is the end

261
00:13:01,800 --> 00:13:07,260
gate implemented ok so the players will

262
00:13:05,550 --> 00:13:09,120
basically generate random bits

263
00:13:07,260 --> 00:13:13,380
correspondingly we're going to denote

264
00:13:09,120 --> 00:13:16,350
them by r1 r2 and r3 ok and this is this

265
00:13:13,380 --> 00:13:19,740
is a right we kind of have to say how

266
00:13:16,350 --> 00:13:21,570
the players kind of propagate this this

267
00:13:19,740 --> 00:13:22,410
invariant from input to output we have

268
00:13:21,570 --> 00:13:26,519
to say what

269
00:13:22,410 --> 00:13:28,469
the computations that they do and well

270
00:13:26,519 --> 00:13:33,180
the computations are just given by these

271
00:13:28,470 --> 00:13:35,819
formulas respectively and for example

272
00:13:33,180 --> 00:13:39,469
let's assume that players the views of

273
00:13:35,819 --> 00:13:45,089
players p1 and p2 are open so now the

274
00:13:39,470 --> 00:13:47,339
verifier knows the red and green values

275
00:13:45,089 --> 00:13:50,399
so we can actually check the consistency

276
00:13:47,339 --> 00:13:55,610
for the first equation because it only

277
00:13:50,399 --> 00:13:58,920
contains a red and and the green values

278
00:13:55,610 --> 00:14:01,170
okay so finally I'm going to describe an

279
00:13:58,920 --> 00:14:03,479
additional optimization so you can see

280
00:14:01,170 --> 00:14:05,399
that at the end gates blow this go up

281
00:14:03,480 --> 00:14:07,620
the signature side because the players

282
00:14:05,399 --> 00:14:11,819
generate kind of a lot of randomness in

283
00:14:07,620 --> 00:14:13,860
the computer additional states so a

284
00:14:11,819 --> 00:14:15,899
final optimization does that play your

285
00:14:13,860 --> 00:14:18,420
eye is going to have instead of

286
00:14:15,899 --> 00:14:20,069
generating the random seeds every time

287
00:14:18,420 --> 00:14:24,420
it's going to have just a short random

288
00:14:20,069 --> 00:14:26,959
err seed and it's going to to compute

289
00:14:24,420 --> 00:14:30,089
the random bits using a pseudo-random

290
00:14:26,959 --> 00:14:31,739
generator a deterministic one okay so

291
00:14:30,089 --> 00:14:33,600
now the view of each player and the

292
00:14:31,740 --> 00:14:36,630
signature only needs to include the

293
00:14:33,600 --> 00:14:39,360
short seed instead of you know this many

294
00:14:36,630 --> 00:14:42,300
random bits okay so this kind of shrinks

295
00:14:39,360 --> 00:14:44,579
the signature size which is good okay so

296
00:14:42,300 --> 00:14:47,040
finally I'm going to get into the

297
00:14:44,579 --> 00:14:50,069
actually the multi target attack and

298
00:14:47,040 --> 00:14:53,219
let's see how how this works so let's

299
00:14:50,069 --> 00:14:57,029
start by very simple overview let's

300
00:14:53,220 --> 00:14:59,630
consider say technic variant with 128

301
00:14:57,029 --> 00:15:02,490
bits of classical security

302
00:14:59,630 --> 00:15:04,709
okay so let's assume that the attacker

303
00:15:02,490 --> 00:15:11,309
is given a certain ature that contains

304
00:15:04,709 --> 00:15:15,449
say 219 partial MPC runs okay so each of

305
00:15:11,309 --> 00:15:18,509
these runs exposes remember two of the

306
00:15:15,449 --> 00:15:22,758
three player views virtual players and

307
00:15:18,509 --> 00:15:27,209
it in particular it contains to a random

308
00:15:22,759 --> 00:15:29,699
128 bit seeds and then particular the

309
00:15:27,209 --> 00:15:33,388
third seed that of the unknown open

310
00:15:29,699 --> 00:15:36,180
player is not exposed okay and it is it

311
00:15:33,389 --> 00:15:39,450
kind of easy to see not from what

312
00:15:36,180 --> 00:15:43,050
but it's not very difficult to say that

313
00:15:39,450 --> 00:15:45,210
if this third seed is actually exposed

314
00:15:43,050 --> 00:15:48,000
and it is easy to compute the signing

315
00:15:45,210 --> 00:15:51,090
key okay so this third seed cannot be

316
00:15:48,000 --> 00:15:53,820
exposed okay so here's a very trivial

317
00:15:51,090 --> 00:15:57,600
attacted attack attempt so given some

318
00:15:53,820 --> 00:16:02,190
run out of the 219 we don't to guess

319
00:15:57,600 --> 00:16:04,620
this unknown seed okay but this has

320
00:16:02,190 --> 00:16:07,500
complexity to the dough 128 because the

321
00:16:04,620 --> 00:16:10,740
seed is 128 bits long so this is not

322
00:16:07,500 --> 00:16:14,160
very efficient this is not really a

323
00:16:10,740 --> 00:16:15,870
value attack um so let's try something

324
00:16:14,160 --> 00:16:17,910
maybe more useful we're going to try

325
00:16:15,870 --> 00:16:21,270
multi target attack and what do I mean

326
00:16:17,910 --> 00:16:23,850
by this so remember that we have 219

327
00:16:21,270 --> 00:16:26,970
runner runs available so what we're

328
00:16:23,850 --> 00:16:30,870
going to do is we're going to guess the

329
00:16:26,970 --> 00:16:38,460
seed of some unknown opened player in

330
00:16:30,870 --> 00:16:41,490
one of these 219 runs okay and this in

331
00:16:38,460 --> 00:16:43,980
this case we actually have 219 targets

332
00:16:41,490 --> 00:16:45,450
and the complexity of the attacks it

333
00:16:43,980 --> 00:16:48,000
drops proportionally

334
00:16:45,450 --> 00:16:50,610
okay so we're kind of making progress

335
00:16:48,000 --> 00:16:53,490
and we this is kind of already looks

336
00:16:50,610 --> 00:16:56,340
like an attack however there is a kind

337
00:16:53,490 --> 00:16:58,590
of a problem here because how do we

338
00:16:56,340 --> 00:17:01,260
actually detect that we guessed right

339
00:16:58,590 --> 00:17:02,790
okay how do we know that we get some say

340
00:17:01,260 --> 00:17:06,240
there how do we know that it matches

341
00:17:02,790 --> 00:17:08,909
some seed of an unopened player okay in

342
00:17:06,240 --> 00:17:10,290
fact this should be in in kind of

343
00:17:08,910 --> 00:17:13,290
intuitively it should be impossible

344
00:17:10,290 --> 00:17:15,810
because the NPC protocol should protect

345
00:17:13,290 --> 00:17:18,839
the privacy of the unopened player so

346
00:17:15,810 --> 00:17:21,030
this kind of does not seem to be

347
00:17:18,839 --> 00:17:23,399
possible however there is a small

348
00:17:21,030 --> 00:17:25,170
subtlety that kind of makes a big

349
00:17:23,400 --> 00:17:28,290
difference here and the subtleties that

350
00:17:25,170 --> 00:17:30,690
the NPC promises to protect their inputs

351
00:17:28,290 --> 00:17:33,389
of the players and not the random bits

352
00:17:30,690 --> 00:17:35,520
that they generate okay and this kind of

353
00:17:33,390 --> 00:17:39,060
subtlety makes a big difference here and

354
00:17:35,520 --> 00:17:41,960
let's see in practice how this how we

355
00:17:39,060 --> 00:17:46,169
can actually compute random bits data

356
00:17:41,960 --> 00:17:48,900
that on the unopen player generates so

357
00:17:46,170 --> 00:17:50,070
let's assume again that p1 and p2 are

358
00:17:48,900 --> 00:17:53,340
opened

359
00:17:50,070 --> 00:17:55,740
okay so we know all the red and green

360
00:17:53,340 --> 00:17:58,379
values and we want to determine the this

361
00:17:55,740 --> 00:18:01,380
art we this random bit that was produced

362
00:17:58,380 --> 00:18:03,420
by the third player so let's focus on

363
00:18:01,380 --> 00:18:05,880
the two and the second equation here

364
00:18:03,420 --> 00:18:10,110
remember we know the red and green

365
00:18:05,880 --> 00:18:11,760
values okay and and initially it seems

366
00:18:10,110 --> 00:18:13,649
like we cannot do this because there

367
00:18:11,760 --> 00:18:16,650
exist some additional green values here

368
00:18:13,650 --> 00:18:20,130
that that get in the way however let us

369
00:18:16,650 --> 00:18:22,290
assume now that a2 equals b2 equals zero

370
00:18:20,130 --> 00:18:24,300
and remember we know that when this

371
00:18:22,290 --> 00:18:26,520
occurs because we know the green values

372
00:18:24,300 --> 00:18:30,899
and in this case actually all these

373
00:18:26,520 --> 00:18:33,210
terms cancel out and we can then in this

374
00:18:30,900 --> 00:18:36,570
case we can just factor out our three as

375
00:18:33,210 --> 00:18:38,730
a simple linear combination of c2 and r2

376
00:18:36,570 --> 00:18:42,810
okay so we can actually compute with

377
00:18:38,730 --> 00:18:45,240
these random bits okay so now I can tell

378
00:18:42,810 --> 00:18:47,850
you how to actually detect this match by

379
00:18:45,240 --> 00:18:50,880
a guess seed and the seed of an unopened

380
00:18:47,850 --> 00:18:52,800
player okay we adjust for each one in

381
00:18:50,880 --> 00:18:54,990
the signature what we're going to do is

382
00:18:52,800 --> 00:18:57,840
we're going to derive the PRG bits that

383
00:18:54,990 --> 00:19:00,330
are produced by the unknown open player

384
00:18:57,840 --> 00:19:03,840
just as I have shown you in the last

385
00:19:00,330 --> 00:19:06,510
slide and we derived these strings we

386
00:19:03,840 --> 00:19:09,270
sort them in the table and now we're

387
00:19:06,510 --> 00:19:12,420
going to make a guess for the seed we

388
00:19:09,270 --> 00:19:15,180
want to compute the PRG on this side and

389
00:19:12,420 --> 00:19:17,900
we're going to search this table okay so

390
00:19:15,180 --> 00:19:20,400
this is already an efficient process and

391
00:19:17,900 --> 00:19:23,250
actually we can generalize this given

392
00:19:20,400 --> 00:19:26,420
some s signatures signed by one by one

393
00:19:23,250 --> 00:19:30,570
or by many users then the complexity

394
00:19:26,420 --> 00:19:33,870
ideally it drops proportionally because

395
00:19:30,570 --> 00:19:35,610
we again we have many targets okay

396
00:19:33,870 --> 00:19:37,709
actually in practice it turns out the

397
00:19:35,610 --> 00:19:39,719
attack is more complicated than that I

398
00:19:37,710 --> 00:19:42,000
won't have time to get into details but

399
00:19:39,720 --> 00:19:43,920
the problem basically is that remember

400
00:19:42,000 --> 00:19:47,640
in order to determine this value of r3

401
00:19:43,920 --> 00:19:50,970
for the end gates we can only do deduce

402
00:19:47,640 --> 00:19:52,560
that if a2 equals b2 equals zero but the

403
00:19:50,970 --> 00:19:54,930
view of each player on each one is

404
00:19:52,560 --> 00:19:58,560
different and this is a problem and why

405
00:19:54,930 --> 00:20:01,080
is this a problem because we actually

406
00:19:58,560 --> 00:20:03,820
can compute different PRG output bits

407
00:20:01,080 --> 00:20:05,559
for the unopen player in each one

408
00:20:03,820 --> 00:20:07,269
so we don't get these nice strings we

409
00:20:05,559 --> 00:20:09,519
got kind of the strings with unknown

410
00:20:07,269 --> 00:20:12,700
values and we cannot sort these strings

411
00:20:09,519 --> 00:20:14,889
okay and this is a problem and we kind

412
00:20:12,700 --> 00:20:18,460
of have to optimize the attack in order

413
00:20:14,889 --> 00:20:20,799
to to make this work and I'm not going I

414
00:20:18,460 --> 00:20:24,639
don't have time to to actually show you

415
00:20:20,799 --> 00:20:27,039
how this is done but basically the main

416
00:20:24,639 --> 00:20:28,600
idea here is that random bits are reused

417
00:20:27,039 --> 00:20:30,879
in the circuit and we can actually

418
00:20:28,600 --> 00:20:32,649
extract more randomness out of the

419
00:20:30,879 --> 00:20:34,478
circuit and it turns out that these

420
00:20:32,649 --> 00:20:37,619
optimizations that we do are relevant

421
00:20:34,479 --> 00:20:40,779
for maybe additional attack scenarios

422
00:20:37,619 --> 00:20:43,629
unrelated protocols again details are in

423
00:20:40,779 --> 00:20:45,599
the paper and if you look at the like

424
00:20:43,629 --> 00:20:50,349
kind of the final numbers of our attacks

425
00:20:45,599 --> 00:20:51,939
let's say on 128-bit variant of

426
00:20:50,349 --> 00:20:54,908
technically I couldn't see that the time

427
00:20:51,940 --> 00:20:56,830
is much more than 2 to the 128th and

428
00:20:54,909 --> 00:20:58,629
actually we get to improve the attack

429
00:20:56,830 --> 00:21:01,149
when in the case all these signatures

430
00:20:58,629 --> 00:21:04,059
are signed with the same key again

431
00:21:01,149 --> 00:21:06,908
details are in the paper ok and finally

432
00:21:04,059 --> 00:21:11,129
similar weaknesses turned out to exist

433
00:21:06,909 --> 00:21:14,909
in related MPC protocols and particular

434
00:21:11,129 --> 00:21:17,949
protocol presented by cats at all at CCS

435
00:21:14,909 --> 00:21:23,399
218 that was actually integrated into

436
00:21:17,950 --> 00:21:26,349
the newest version of picnic picnic 2.0

437
00:21:23,399 --> 00:21:29,049
ok so it turns out that that kind of

438
00:21:26,349 --> 00:21:31,720
this weakness this hidden weaknesses is

439
00:21:29,049 --> 00:21:33,759
not just common to picnic so how do we

440
00:21:31,720 --> 00:21:35,559
fix this the fix is actually quite

441
00:21:33,759 --> 00:21:38,049
simple I mean when you know all the

442
00:21:35,559 --> 00:21:40,149
details the fixes for example the facts

443
00:21:38,049 --> 00:21:43,629
is basically you have to solve the pure

444
00:21:40,149 --> 00:21:46,178
G so when you basically what you add the

445
00:21:43,629 --> 00:21:48,309
salt when computing the random bits and

446
00:21:46,179 --> 00:21:51,460
the pure G this kind of forces the

447
00:21:48,309 --> 00:21:53,710
attacker to choose the salt and the

448
00:21:51,460 --> 00:21:55,659
forces the attacker kind of to focus

449
00:21:53,710 --> 00:21:57,840
only on one target instead of having

450
00:21:55,659 --> 00:22:00,759
many targets each time the attacker

451
00:21:57,840 --> 00:22:03,519
evaluates this PRG has to focus only on

452
00:22:00,759 --> 00:22:06,070
one target and this basically this is

453
00:22:03,519 --> 00:22:07,869
basically the fix ok so let me conclude

454
00:22:06,070 --> 00:22:10,299
the stalks ok click as a new and

455
00:22:07,869 --> 00:22:12,820
promising false quantum signature scheme

456
00:22:10,299 --> 00:22:15,249
with a lot of room for improvements and

457
00:22:12,820 --> 00:22:17,439
we devised a multi target attack run

458
00:22:15,249 --> 00:22:19,090
technique and this is quite unusual

459
00:22:17,440 --> 00:22:21,640
you have seen it requires kind of

460
00:22:19,090 --> 00:22:24,730
careful analysis of the internal

461
00:22:21,640 --> 00:22:27,340
components of Technic and an efficient

462
00:22:24,730 --> 00:22:28,990
attack actually requires optimization so

463
00:22:27,340 --> 00:22:31,090
I think that the more the most

464
00:22:28,990 --> 00:22:34,000
high-level conclusion here is that

465
00:22:31,090 --> 00:22:36,850
picnic optimizes for practical use what

466
00:22:34,000 --> 00:22:39,850
is traditionally considered as

467
00:22:36,850 --> 00:22:42,280
theoretical photography however when you

468
00:22:39,850 --> 00:22:44,290
make these optimizations you kind of

469
00:22:42,280 --> 00:22:47,860
have to be careful in order to avoid

470
00:22:44,290 --> 00:22:56,139
these so-called real world attack thank

471
00:22:47,860 --> 00:22:57,429
you very much thank you type so we have

472
00:22:56,140 --> 00:22:59,920
time for some questions yes search

473
00:22:57,430 --> 00:23:09,850
please how to use the microphone on the

474
00:22:59,920 --> 00:23:12,130
side or I can give you mine yes is a

475
00:23:09,850 --> 00:23:16,570
sort affecting the performance of picnic

476
00:23:12,130 --> 00:23:18,640
by enlarging a signature it yes it does

477
00:23:16,570 --> 00:23:19,720
enlarge your signature but actually this

478
00:23:18,640 --> 00:23:23,680
the salt

479
00:23:19,720 --> 00:23:26,530
I mean you embed some kind of initial

480
00:23:23,680 --> 00:23:27,940
salt into the signature and then from

481
00:23:26,530 --> 00:23:30,629
this initial salt you can actually

482
00:23:27,940 --> 00:23:35,110
generate the salts for all the runs and

483
00:23:30,630 --> 00:23:38,440
in a deterministic way so the signature

484
00:23:35,110 --> 00:23:41,229
is not blown up by very much so actually

485
00:23:38,440 --> 00:23:44,740
the performance penalty for this is not

486
00:23:41,230 --> 00:23:48,220
very big so I'm wondering some of those

487
00:23:44,740 --> 00:23:49,950
optimizations were you know like using

488
00:23:48,220 --> 00:23:52,840
pseudo-random seeds in theory I guess

489
00:23:49,950 --> 00:23:54,940
you know in the MPC setting it's

490
00:23:52,840 --> 00:23:56,679
probably okay to use do that NFC's as

491
00:23:54,940 --> 00:23:59,320
long as I don't reveal my randomness so

492
00:23:56,680 --> 00:24:01,270
some of those weaknesses were they

493
00:23:59,320 --> 00:24:03,070
predicted by theory inand namely if you

494
00:24:01,270 --> 00:24:04,720
would say okay here's a random Oracle

495
00:24:03,070 --> 00:24:07,030
model here is a bound on the random

496
00:24:04,720 --> 00:24:09,220
Oracle model I can model purchase a

497
00:24:07,030 --> 00:24:11,290
random Oracle so there is a and actually

498
00:24:09,220 --> 00:24:13,690
and there was and actually a security

499
00:24:11,290 --> 00:24:16,270
proof for the initial version of picnic

500
00:24:13,690 --> 00:24:17,920
and the security proof kind of missed

501
00:24:16,270 --> 00:24:20,200
this attack because you kind of have to

502
00:24:17,920 --> 00:24:22,030
again look into the details and note

503
00:24:20,200 --> 00:24:24,190
that this attacking part is possible and

504
00:24:22,030 --> 00:24:26,170
ad kind of you know there is an

505
00:24:24,190 --> 00:24:27,970
additional bound on the adversary's

506
00:24:26,170 --> 00:24:30,310
advantage so there was kind of

507
00:24:27,970 --> 00:24:34,720
disturbing in one of the equations

508
00:24:30,310 --> 00:24:37,810
and I mean in I mean so it is easy kind

509
00:24:34,720 --> 00:24:40,720
of arrest this proof but again you are

510
00:24:37,810 --> 00:24:43,870
you kind of have to know that this is

511
00:24:40,720 --> 00:24:47,050
actually possible in order to embed this

512
00:24:43,870 --> 00:24:49,780
term correctly but at least you have to

513
00:24:47,050 --> 00:24:52,750
make sure if it's a there is a there is

514
00:24:49,780 --> 00:24:54,550
an actual proof of picnic security and

515
00:24:52,750 --> 00:24:56,140
the random Oracle model so what I'm

516
00:24:54,550 --> 00:24:58,780
saying if you're saying was a mistake in

517
00:24:56,140 --> 00:25:01,450
the proof yeah but you're saying either

518
00:24:58,780 --> 00:25:03,100
proof was done correctly and you would

519
00:25:01,450 --> 00:25:05,740
do the translation it would account for

520
00:25:03,100 --> 00:25:07,330
this guy exactly right so this in this

521
00:25:05,740 --> 00:25:09,490
case it's not like a hiccup Tim ization

522
00:25:07,330 --> 00:25:16,540
is just a mistake no no it's just a

523
00:25:09,490 --> 00:25:18,190
mistake in any more questions if not

524
00:25:16,540 --> 00:25:24,459
let's think it again thank you

525
00:25:18,190 --> 00:25:24,459
[Applause]

