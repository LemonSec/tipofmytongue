1
00:00:00,160 --> 00:00:03,120
is on the nested subset differential

2
00:00:03,120 --> 00:00:05,680
attack a practical direct attack against

3
00:00:05,680 --> 00:00:07,040
luov

4
00:00:07,040 --> 00:00:10,400
which forges a signature in 210 minutes

5
00:00:10,400 --> 00:00:13,360
um this is work by jintae ding

6
00:00:13,360 --> 00:00:14,719
joshua

7
00:00:14,719 --> 00:00:16,640
bishaka

8
00:00:16,640 --> 00:00:18,880
and joshua will give the talk

9
00:00:18,880 --> 00:00:20,480
please joshua

10
00:00:20,480 --> 00:00:24,240
share your screen and mute yourself

11
00:00:24,240 --> 00:00:26,639
okay

12
00:00:28,400 --> 00:00:31,840
sorry i was not um

13
00:00:31,840 --> 00:00:33,280
okay

14
00:00:33,280 --> 00:00:36,480
can you hear me and see my screen

15
00:00:36,480 --> 00:00:39,040
uh yes we can hear you loud and clear

16
00:00:39,040 --> 00:00:40,239
cool

17
00:00:40,239 --> 00:00:42,840
all right so i'll just begin the top

18
00:00:42,840 --> 00:00:47,039
then so in our paper can you can you go

19
00:00:47,039 --> 00:00:50,719
into full screen mode

20
00:00:51,540 --> 00:00:54,320
[Music]

21
00:00:54,320 --> 00:00:58,920
i believe it's up at the top under view

22
00:01:10,400 --> 00:01:12,799
does that do it or am i still not

23
00:01:12,799 --> 00:01:14,240
because i don't know what i look like on

24
00:01:14,240 --> 00:01:15,600
your end

25
00:01:15,600 --> 00:01:18,080
yes that's correct

26
00:01:18,080 --> 00:01:20,960
does everything good

27
00:01:21,600 --> 00:01:23,920
yes okay excellent

28
00:01:23,920 --> 00:01:26,320
all right so

29
00:01:26,320 --> 00:01:28,720
uh in our paper we introduced the nested

30
00:01:28,720 --> 00:01:30,720
subset differential attack which we call

31
00:01:30,720 --> 00:01:33,520
nsda against the signature scheme lifted

32
00:01:33,520 --> 00:01:35,680
unbalanced oil and vinegar by bruins at

33
00:01:35,680 --> 00:01:36,560
all

34
00:01:36,560 --> 00:01:39,040
nsda is an improvement to the previous

35
00:01:39,040 --> 00:01:42,399
attack subfield differential attack sda

36
00:01:42,399 --> 00:01:44,159
both of which make use of the lifting

37
00:01:44,159 --> 00:01:47,040
modification for which l u l u of v is

38
00:01:47,040 --> 00:01:49,280
named

39
00:01:49,280 --> 00:01:52,479
so l u of e is a multivariate polynomial

40
00:01:52,479 --> 00:01:54,960
scheme this means that the public key p

41
00:01:54,960 --> 00:01:57,119
is an m tuple of multivariate

42
00:01:57,119 --> 00:01:59,759
polynomials over a finite field

43
00:01:59,759 --> 00:02:02,320
and we'll say that we'll have m

44
00:02:02,320 --> 00:02:05,119
polynomials and n variables

45
00:02:05,119 --> 00:02:07,840
the private key is a way to compute p

46
00:02:07,840 --> 00:02:10,080
inverse by which we don't necessarily

47
00:02:10,080 --> 00:02:11,599
mean it's invertible but we have a way

48
00:02:11,599 --> 00:02:13,760
of finding pre images but we use that

49
00:02:13,760 --> 00:02:15,200
notation

50
00:02:15,200 --> 00:02:16,480
when you're signing the hash of a

51
00:02:16,480 --> 00:02:18,319
document it's just finding one of these

52
00:02:18,319 --> 00:02:20,560
pre images so if y is the half of a

53
00:02:20,560 --> 00:02:23,520
document the signature x is just going

54
00:02:23,520 --> 00:02:25,360
to be a pre-image of y therefore

55
00:02:25,360 --> 00:02:27,680
verification process just seeing that y

56
00:02:27,680 --> 00:02:31,280
is indeed the output of x

57
00:02:31,280 --> 00:02:33,760
now luv is based on the oil and vinegar

58
00:02:33,760 --> 00:02:35,599
signature scheme which was introduced by

59
00:02:35,599 --> 00:02:38,160
padrin in 1997

60
00:02:38,160 --> 00:02:39,760
and in that scheme

61
00:02:39,760 --> 00:02:42,239
p was the composition of two maps f and

62
00:02:42,239 --> 00:02:43,120
t

63
00:02:43,120 --> 00:02:45,760
f is quadratic it's easy to compute f

64
00:02:45,760 --> 00:02:46,800
inverse

65
00:02:46,800 --> 00:02:49,200
t is a linear invariable map it's used

66
00:02:49,200 --> 00:02:51,519
to hide the structure of f

67
00:02:51,519 --> 00:02:54,480
we then see that if those two maps have

68
00:02:54,480 --> 00:02:56,239
these properties we can find print

69
00:02:56,239 --> 00:02:59,360
images as x is the pre-image of y can be

70
00:02:59,360 --> 00:03:01,760
found by first computing f inverse of y

71
00:03:01,760 --> 00:03:02,959
is w

72
00:03:02,959 --> 00:03:06,159
and the then t inverse w is equal to x

73
00:03:06,159 --> 00:03:09,360
notice that p is also quadratic as its f

74
00:03:09,360 --> 00:03:11,840
composed of t and x is quadratic

75
00:03:11,840 --> 00:03:14,080
i won't go into any details of how euler

76
00:03:14,080 --> 00:03:16,239
vinegar works

77
00:03:16,239 --> 00:03:18,800
in here these are time

78
00:03:18,800 --> 00:03:21,440
now luv takes an oil and vinegar private

79
00:03:21,440 --> 00:03:24,480
key over a small field f2 which is the

80
00:03:24,480 --> 00:03:27,440
finite field of size two and lifts it to

81
00:03:27,440 --> 00:03:30,400
an extension field f2 vr from which it

82
00:03:30,400 --> 00:03:32,400
signs its signatures this allows more

83
00:03:32,400 --> 00:03:33,760
efficient storage of the public and

84
00:03:33,760 --> 00:03:35,599
private keys

85
00:03:35,599 --> 00:03:38,400
and that means the public key p of x has

86
00:03:38,400 --> 00:03:41,200
coefficients only in f2 so alpha beta

87
00:03:41,200 --> 00:03:44,000
gamma or an f2 but it will be a map from

88
00:03:44,000 --> 00:03:49,040
f to c r to the n to f to the r t m

89
00:03:49,840 --> 00:03:52,400
now in our attacks sda and in sda we

90
00:03:52,400 --> 00:03:54,319
rely on the quotient ring representation

91
00:03:54,319 --> 00:03:56,640
of finite fields which means that i take

92
00:03:56,640 --> 00:03:59,760
a base field f2 and an extension field f

93
00:03:59,760 --> 00:04:02,879
to the r i can represent f to the r by

94
00:04:02,879 --> 00:04:04,799
the following quotient ring

95
00:04:04,799 --> 00:04:08,000
where d divides r and g of t is an

96
00:04:08,000 --> 00:04:10,480
irreducible polynomial of degree s is

97
00:04:10,480 --> 00:04:13,200
equal to r divided by d

98
00:04:13,200 --> 00:04:14,640
elements in f2 they are can be

99
00:04:14,640 --> 00:04:17,040
represented by degree r divided by d

100
00:04:17,040 --> 00:04:19,358
minus one polynomials and this

101
00:04:19,358 --> 00:04:21,759
polynomial ring here

102
00:04:21,759 --> 00:04:23,520
now it's more efficient to solve a

103
00:04:23,520 --> 00:04:25,840
quadratic system over that intermediary

104
00:04:25,840 --> 00:04:28,400
field and over the extension so the goal

105
00:04:28,400 --> 00:04:31,360
of both sda and in sda is to tend the

106
00:04:31,360 --> 00:04:33,919
problem of solving over f to the r for

107
00:04:33,919 --> 00:04:37,440
solving over f to the d

108
00:04:37,680 --> 00:04:40,000
in the original sdi attack we looked at

109
00:04:40,000 --> 00:04:41,759
transforming the publicly by adding a

110
00:04:41,759 --> 00:04:44,000
random differentiable x prime and

111
00:04:44,000 --> 00:04:46,800
solving over f q to the d that should be

112
00:04:46,800 --> 00:04:49,280
a two instead of a q

113
00:04:49,280 --> 00:04:51,120
so we defined our new map

114
00:04:51,120 --> 00:04:54,960
p tilde of x bar is equal to p of x bar

115
00:04:54,960 --> 00:04:56,400
plus x prime

116
00:04:56,400 --> 00:04:58,560
and this separated out linear terms for

117
00:04:58,560 --> 00:05:00,720
all powers of t but kept the quadratic

118
00:05:00,720 --> 00:05:02,960
terms contained at t to the power of

119
00:05:02,960 --> 00:05:04,880
zero is equal to one this made the

120
00:05:04,880 --> 00:05:06,560
system easier to solve

121
00:05:06,560 --> 00:05:08,000
what we did is we

122
00:05:08,000 --> 00:05:10,240
decomposed the message y into the

123
00:05:10,240 --> 00:05:11,680
following sum

124
00:05:11,680 --> 00:05:13,919
we each of these are going to be vectors

125
00:05:13,919 --> 00:05:15,600
in the vector space over the

126
00:05:15,600 --> 00:05:17,919
intermediary field and we solve for the

127
00:05:17,919 --> 00:05:20,000
higher powers of t using the linear

128
00:05:20,000 --> 00:05:22,160
terms first

129
00:05:22,160 --> 00:05:25,039
and that's because p tilde of x bar

130
00:05:25,039 --> 00:05:26,880
takes the following shape or we have

131
00:05:26,880 --> 00:05:29,199
these quadratic terms

132
00:05:29,199 --> 00:05:31,360
next to t to the power of zero and a

133
00:05:31,360 --> 00:05:33,600
bunch of linear terms for all the other

134
00:05:33,600 --> 00:05:35,199
powers of t

135
00:05:35,199 --> 00:05:37,520
so we solve for the higher powers of t

136
00:05:37,520 --> 00:05:39,759
using linear terms first and then at the

137
00:05:39,759 --> 00:05:41,919
end solve for the quadratic terms and

138
00:05:41,919 --> 00:05:44,960
this is easier provided it's possible to

139
00:05:44,960 --> 00:05:47,199
do which means do we have

140
00:05:47,199 --> 00:05:50,320
sufficiently many variables

141
00:05:50,320 --> 00:05:52,560
in response the authors of luv proposed

142
00:05:52,560 --> 00:05:54,479
new parameters which in particular made

143
00:05:54,479 --> 00:05:56,400
the degree of the extension field prime

144
00:05:56,400 --> 00:05:58,880
which protects against sda there are too

145
00:05:58,880 --> 00:06:02,080
many linear equations to solve

146
00:06:02,080 --> 00:06:03,360
here's the table of the six new

147
00:06:03,360 --> 00:06:04,960
parameter sets

148
00:06:04,960 --> 00:06:07,039
our attack nsda is against the three

149
00:06:07,039 --> 00:06:09,039
cases when r is equal to seven and it

150
00:06:09,039 --> 00:06:10,960
breaks these completely

151
00:06:10,960 --> 00:06:13,919
so r is prime we are attacking these

152
00:06:13,919 --> 00:06:15,600
parameters here

153
00:06:15,600 --> 00:06:18,240
we'll note that our attacking sda does

154
00:06:18,240 --> 00:06:20,560
not defeat the other three parameter

155
00:06:20,560 --> 00:06:22,720
sets but only the ones when it's r is

156
00:06:22,720 --> 00:06:24,240
equal to seven

157
00:06:24,240 --> 00:06:26,080
so throughout here we're going to have r

158
00:06:26,080 --> 00:06:28,319
is equal to seven

159
00:06:28,319 --> 00:06:30,000
we will construct the sign integer for

160
00:06:30,000 --> 00:06:31,759
the message y piece per piece using

161
00:06:31,759 --> 00:06:33,039
differentials

162
00:06:33,039 --> 00:06:34,319
however instead of choosing the

163
00:06:34,319 --> 00:06:37,199
difference randomly like an sda then

164
00:06:37,199 --> 00:06:39,840
such solve for them one after the other

165
00:06:39,840 --> 00:06:41,680
for r is equal to seven this can be done

166
00:06:41,680 --> 00:06:43,039
in four steps

167
00:06:43,039 --> 00:06:44,720
for our attack to be efficient we want

168
00:06:44,720 --> 00:06:47,199
to always solve no more than m quadratic

169
00:06:47,199 --> 00:06:49,120
equations over f2

170
00:06:49,120 --> 00:06:51,759
at least as many variables as equations

171
00:06:51,759 --> 00:06:54,160
and we have to solve f2 because there's

172
00:06:54,160 --> 00:06:57,039
no other intermediate field t to the v

173
00:06:57,039 --> 00:06:59,360
because d can only be one because r is

174
00:06:59,360 --> 00:07:00,560
prime

175
00:07:00,560 --> 00:07:02,080
throughout x bar will be an

176
00:07:02,080 --> 00:07:06,000
indeterminate point and f2 to the n

177
00:07:06,000 --> 00:07:08,479
and we'll just introduce some notation

178
00:07:08,479 --> 00:07:11,199
here quickly and that

179
00:07:11,199 --> 00:07:14,400
we'll always truncate the um uh powers

180
00:07:14,400 --> 00:07:16,800
of t that we're dealing with which means

181
00:07:16,800 --> 00:07:19,120
if i have just an element of the finite

182
00:07:19,120 --> 00:07:22,800
field i raise this bar s over top of it

183
00:07:22,800 --> 00:07:26,400
i only go to the powers of s

184
00:07:26,400 --> 00:07:28,800
and it's similarly defined for

185
00:07:28,800 --> 00:07:33,280
polynomials and systems of polynomials

186
00:07:33,280 --> 00:07:36,319
so step one of our attack is to look at

187
00:07:36,319 --> 00:07:38,560
that zero truncation of p

188
00:07:38,560 --> 00:07:40,080
and that is just going to be by

189
00:07:40,080 --> 00:07:43,360
definition the original quadratic

190
00:07:43,360 --> 00:07:45,120
polynomials except we're now only

191
00:07:45,120 --> 00:07:47,680
considering them over f2

192
00:07:47,680 --> 00:07:49,440
and we just find the solution to this

193
00:07:49,440 --> 00:07:52,639
system over f2

194
00:07:52,639 --> 00:07:53,599
second

195
00:07:53,599 --> 00:07:56,560
we take that solution of f2 and we add

196
00:07:56,560 --> 00:07:59,759
an unknown differential x bar t

197
00:07:59,759 --> 00:08:02,319
and when you do the arithmetic

198
00:08:02,319 --> 00:08:04,400
you'll get the original y's that you

199
00:08:04,400 --> 00:08:07,520
solved beforehand plus some linear terms

200
00:08:07,520 --> 00:08:10,240
multiplied to t to the power of one

201
00:08:10,240 --> 00:08:12,400
and these are easy to solve so we're

202
00:08:12,400 --> 00:08:15,759
going to let a1 be a solution to that

203
00:08:15,759 --> 00:08:18,080
linear system

204
00:08:18,080 --> 00:08:20,240
the third step is basically exactly the

205
00:08:20,240 --> 00:08:23,039
same except now we're adding a new

206
00:08:23,039 --> 00:08:26,479
differential x bar t squared

207
00:08:26,479 --> 00:08:28,240
and this will give us linear terms for

208
00:08:28,240 --> 00:08:31,360
the t to the power of two we again let

209
00:08:31,360 --> 00:08:34,559
a2 be a solution to that system

210
00:08:34,559 --> 00:08:37,599
and then finally we just uh

211
00:08:37,599 --> 00:08:40,080
look at the system completely using this

212
00:08:40,080 --> 00:08:41,519
uh

213
00:08:41,519 --> 00:08:43,039
differential here

214
00:08:43,039 --> 00:08:45,680
and we'll have three terms for t to the

215
00:08:45,680 --> 00:08:47,839
power of 3 to the power 4 to the power 5

216
00:08:47,839 --> 00:08:49,120
which are linear

217
00:08:49,120 --> 00:08:50,000
and

218
00:08:50,000 --> 00:08:51,760
terms which are quadratic at t to the

219
00:08:51,760 --> 00:08:53,040
power 6

220
00:08:53,040 --> 00:08:54,959
which is

221
00:08:54,959 --> 00:08:56,800
r minus one which is the highest power

222
00:08:56,800 --> 00:08:57,680
of t

223
00:08:57,680 --> 00:09:00,160
for f to the seven

224
00:09:00,160 --> 00:09:02,160
to be considered

225
00:09:02,160 --> 00:09:04,000
we find the solution source s for the

226
00:09:04,000 --> 00:09:06,399
linear system first and then we attempt

227
00:09:06,399 --> 00:09:08,399
to solve the quadratic system over the

228
00:09:08,399 --> 00:09:10,320
actual solution set

229
00:09:10,320 --> 00:09:12,320
and if that is possible we will then

230
00:09:12,320 --> 00:09:15,600
have a signature for our message y

231
00:09:15,600 --> 00:09:17,360
the complexity for the level and prime

232
00:09:17,360 --> 00:09:19,120
was set is actually low enough that we

233
00:09:19,120 --> 00:09:20,880
wait to reform a practical attack

234
00:09:20,880 --> 00:09:23,120
against it we run an experimental attack

235
00:09:23,120 --> 00:09:24,480
against a public key with leveling

236
00:09:24,480 --> 00:09:26,160
parameters and we were able to forge a

237
00:09:26,160 --> 00:09:28,560
signature in 210 minutes

238
00:09:28,560 --> 00:09:30,399
for full details please refer to our

239
00:09:30,399 --> 00:09:32,160
paper

240
00:09:32,160 --> 00:09:34,560
uh thanks and we'd like to

241
00:09:34,560 --> 00:09:36,480
say our appreciation for both the taf

242
00:09:36,480 --> 00:09:40,640
fund nist and the nsf

243
00:09:40,800 --> 00:09:43,519
thank you very much

244
00:09:49,040 --> 00:09:50,640
are there any questions

245
00:09:50,640 --> 00:09:53,440
for for joshua

246
00:09:53,440 --> 00:09:56,160
here in the room

247
00:09:56,800 --> 00:09:59,120
um

248
00:09:59,839 --> 00:10:02,160
are there any questions on uh online i

249
00:10:02,160 --> 00:10:05,680
i'm not checking them

250
00:10:05,680 --> 00:10:07,600
um

251
00:10:07,600 --> 00:10:09,920
okay um

252
00:10:09,920 --> 00:10:11,760
if there's no other questions i can i

253
00:10:11,760 --> 00:10:14,320
can ask one question so um

254
00:10:14,320 --> 00:10:15,920
so you're um

255
00:10:15,920 --> 00:10:18,959
attacking um this lifting mechanism

256
00:10:18,959 --> 00:10:20,880
right

257
00:10:20,880 --> 00:10:22,720
um and um

258
00:10:22,720 --> 00:10:23,600
it's

259
00:10:23,600 --> 00:10:26,000
it's present in all parameters uh of

260
00:10:26,000 --> 00:10:29,760
this luov so so how come that um so does

261
00:10:29,760 --> 00:10:31,760
your attack not not at all give any

262
00:10:31,760 --> 00:10:33,839
improvement for the um parameters that

263
00:10:33,839 --> 00:10:34,880
you say

264
00:10:34,880 --> 00:10:37,360
you don't defeat or is the improvement

265
00:10:37,360 --> 00:10:40,000
that's not significant enough uh it let

266
00:10:40,000 --> 00:10:42,000
me i should probably share my spin again

267
00:10:42,000 --> 00:10:44,079
just to show you it does not

268
00:10:44,079 --> 00:10:46,320
because as we're adding more and more

269
00:10:46,320 --> 00:10:48,320
differentials we get more and more

270
00:10:48,320 --> 00:10:51,440
linear terms for more powers of t

271
00:10:51,440 --> 00:10:54,560
so like for r is equal to 47 we would

272
00:10:54,560 --> 00:10:56,399
just have too many linear equations to

273
00:10:56,399 --> 00:10:58,399
solve to then solve over the final

274
00:10:58,399 --> 00:11:01,440
quadratic equations

275
00:11:01,440 --> 00:11:02,480
so

276
00:11:02,480 --> 00:11:04,560
we have to does that answer the question

277
00:11:04,560 --> 00:11:05,839
or should i

278
00:11:05,839 --> 00:11:07,680
share my screen again

279
00:11:07,680 --> 00:11:09,839
no i think that answers the question

280
00:11:09,839 --> 00:11:12,640
thanks there is also a question in zoom

281
00:11:12,640 --> 00:11:15,440
chat

282
00:11:15,440 --> 00:11:17,920
okay can you can you read it out

283
00:11:17,920 --> 00:11:20,720
sure this this is from alexei uh

284
00:11:20,720 --> 00:11:23,600
uduvenko sorry if i mispronounced that

285
00:11:23,600 --> 00:11:26,000
and it is could intermediate size

286
00:11:26,000 --> 00:11:29,839
constants help or is it futile

287
00:11:29,839 --> 00:11:32,079
i'm not sure what he means by the

288
00:11:32,079 --> 00:11:34,560
question

289
00:11:35,920 --> 00:11:37,120
perhaps

290
00:11:37,120 --> 00:11:41,399
alexei could unmute themselves

291
00:11:47,200 --> 00:11:48,240
um

292
00:11:48,240 --> 00:11:49,519
or not

293
00:11:49,519 --> 00:11:50,399
okay

294
00:11:50,399 --> 00:11:53,279
in that case um i think it's time to to

295
00:11:53,279 --> 00:11:57,839
to thank joshua one more time

296
00:12:01,440 --> 00:12:06,680
and we are moving on to the next speaker

297
00:12:15,839 --> 00:12:20,200
ah one second and

298
00:12:25,839 --> 00:12:27,600
sorry

299
00:12:27,600 --> 00:12:30,480
how do i do this

300
00:12:32,160 --> 00:12:34,160
this is which one is yours

301
00:12:34,160 --> 00:12:37,399
this one

302
00:12:38,639 --> 00:12:41,040
um

303
00:12:49,600 --> 00:12:53,800
cannot go back to zoom

304
00:12:54,720 --> 00:12:56,959
okay

305
00:12:59,760 --> 00:13:01,839
um it's just the last thing i do need to

306
00:13:01,839 --> 00:13:03,279
just share this thing

307
00:13:03,279 --> 00:13:04,480
okay

308
00:13:04,480 --> 00:13:07,800
and now

309
00:13:11,920 --> 00:13:12,600
okay

310
00:13:12,600 --> 00:13:15,679
[Music]

311
00:13:17,120 --> 00:13:19,600
i believe if you go to slideshow

312
00:13:19,600 --> 00:13:22,240
yeah that's there we go

313
00:13:22,240 --> 00:13:23,440
okay

314
00:13:23,440 --> 00:13:25,600
now it should be good so the next talk

315
00:13:25,600 --> 00:13:29,760
is by uh wired buildings and it's about

316
00:13:29,760 --> 00:13:32,720
improved crypto analysis of uh uov and

317
00:13:32,720 --> 00:13:35,519
rainbow

318
00:13:35,519 --> 00:13:38,399
so yeah hello everybody so yeah i'll be

319
00:13:38,399 --> 00:13:39,600
talking about oil and vinegar and

320
00:13:39,600 --> 00:13:41,440
rainbow so what's that those are two

321
00:13:41,440 --> 00:13:43,360
multivariate signature schemes

322
00:13:43,360 --> 00:13:45,199
um the first one on the vinegar is the

323
00:13:45,199 --> 00:13:47,519
oldest one it's invented in 1997 by

324
00:13:47,519 --> 00:13:48,720
pateran

325
00:13:48,720 --> 00:13:49,920
and in the following years there were

326
00:13:49,920 --> 00:13:52,399
some cryptanalysis results then uh

327
00:13:52,399 --> 00:13:54,240
quickly those

328
00:13:54,240 --> 00:13:55,680
attacks dried up and have not really

329
00:13:55,680 --> 00:13:58,720
been any uh real improvements since then

330
00:13:58,720 --> 00:14:00,320
and the good thing about oil and vinegar

331
00:14:00,320 --> 00:14:02,320
is that it has very small signatures and

332
00:14:02,320 --> 00:14:04,480
it's very fast but the main drawback is

333
00:14:04,480 --> 00:14:06,480
that the the public keys can be quite

334
00:14:06,480 --> 00:14:08,800
large for example 60 kilobytes for a new

335
00:14:08,800 --> 00:14:10,639
security level one

336
00:14:10,639 --> 00:14:12,079
and on the right hand side we have

337
00:14:12,079 --> 00:14:15,120
rainbow which is uh basically multiple

338
00:14:15,120 --> 00:14:17,279
layers of oil and vinegar on top of each

339
00:14:17,279 --> 00:14:19,680
other it was invented in 2005 by ding

340
00:14:19,680 --> 00:14:20,800
and schmidt

341
00:14:20,800 --> 00:14:22,959
and it's a bit more complicated but also

342
00:14:22,959 --> 00:14:24,320
has a little bit

343
00:14:24,320 --> 00:14:26,160
smaller signatures

344
00:14:26,160 --> 00:14:27,440
and importantly it's one of the

345
00:14:27,440 --> 00:14:29,760
finalists of the next post quantum

346
00:14:29,760 --> 00:14:31,279
competition

347
00:14:31,279 --> 00:14:32,800
and in my work

348
00:14:32,800 --> 00:14:34,800
uh the main contribution i would say is

349
00:14:34,800 --> 00:14:37,199
that i simplified the exposition of oil

350
00:14:37,199 --> 00:14:39,600
vinegar and rainbow and because of this

351
00:14:39,600 --> 00:14:40,800
this better

352
00:14:40,800 --> 00:14:42,079
understanding of the scheme i was able

353
00:14:42,079 --> 00:14:43,680
to find some new

354
00:14:43,680 --> 00:14:46,560
more efficient key recovery attacks

355
00:14:46,560 --> 00:14:48,560
so yeah these oil vinegar and rainbow

356
00:14:48,560 --> 00:14:51,600
are are based on multivariate trap doors

357
00:14:51,600 --> 00:14:52,480
so

358
00:14:52,480 --> 00:14:54,399
particularly that means your public key

359
00:14:54,399 --> 00:14:57,440
will be a multivariate quadratic map

360
00:14:57,440 --> 00:14:59,040
that looks random so we believe that

361
00:14:59,040 --> 00:15:01,360
it's hard to to sample pre-images for

362
00:15:01,360 --> 00:15:03,120
this function

363
00:15:03,120 --> 00:15:04,399
but um

364
00:15:04,399 --> 00:15:06,399
map is actually not not random there is

365
00:15:06,399 --> 00:15:08,079
some secret information and if you know

366
00:15:08,079 --> 00:15:09,680
this information then you can

367
00:15:09,680 --> 00:15:12,320
efficiently sample pre-images and a

368
00:15:12,320 --> 00:15:14,959
signature is then just like an input s

369
00:15:14,959 --> 00:15:16,880
such that p of s is the hash of your

370
00:15:16,880 --> 00:15:18,880
message where you use some some hash

371
00:15:18,880 --> 00:15:21,519
function that outputs elements in your

372
00:15:21,519 --> 00:15:23,920
in the codomain of your your function

373
00:15:23,920 --> 00:15:25,519
so yeah the only thing you need to know

374
00:15:25,519 --> 00:15:27,519
to understand or the vinegar and rainbow

375
00:15:27,519 --> 00:15:30,399
is how these trapdoors work

376
00:15:30,399 --> 00:15:32,160
and yeah if you look at a typical

377
00:15:32,160 --> 00:15:33,920
rainbow paper for example then you will

378
00:15:33,920 --> 00:15:35,680
have an explanation

379
00:15:35,680 --> 00:15:38,160
like this and if your brain works like

380
00:15:38,160 --> 00:15:40,639
mine then you'll have a hard time

381
00:15:40,639 --> 00:15:42,000
understanding this

382
00:15:42,000 --> 00:15:43,519
and even if you convince yourself that

383
00:15:43,519 --> 00:15:45,440
this is a trapdoor then you still don't

384
00:15:45,440 --> 00:15:46,720
have the feeling that you really

385
00:15:46,720 --> 00:15:48,800
understand what's going on

386
00:15:48,800 --> 00:15:50,720
so that's what we're going to try to

387
00:15:50,720 --> 00:15:53,519
solve in the next few minutes

388
00:15:53,519 --> 00:15:55,279
but before i explain rainbow i'll

389
00:15:55,279 --> 00:15:56,880
explain oil and vinegar because it's a

390
00:15:56,880 --> 00:15:57,839
bit

391
00:15:57,839 --> 00:15:59,279
more simple

392
00:15:59,279 --> 00:16:01,759
so the trapdoor is really simple so just

393
00:16:01,759 --> 00:16:04,480
a linear subspace of your input space

394
00:16:04,480 --> 00:16:06,880
of dimension m where m is the dimension

395
00:16:06,880 --> 00:16:08,800
of your output space

396
00:16:08,800 --> 00:16:11,839
uh such that p vanishes on on o so that

397
00:16:11,839 --> 00:16:14,560
means for every vector o in this space o

398
00:16:14,560 --> 00:16:16,720
uh we have that p of o is equal to zero

399
00:16:16,720 --> 00:16:18,320
and it turns out that if you know such a

400
00:16:18,320 --> 00:16:20,560
space then sampling a pretty much is

401
00:16:20,560 --> 00:16:23,120
actually very easy

402
00:16:23,120 --> 00:16:25,040
so how do you do this you start by just

403
00:16:25,040 --> 00:16:26,959
picking a random input which of course

404
00:16:26,959 --> 00:16:29,040
will not be a pre image

405
00:16:29,040 --> 00:16:31,279
but then you can solve for some

406
00:16:31,279 --> 00:16:33,759
correction term in the soil space

407
00:16:33,759 --> 00:16:37,120
such that um yeah so that p of v plus o

408
00:16:37,120 --> 00:16:38,880
is your target

409
00:16:38,880 --> 00:16:41,600
and you can do this because um you can

410
00:16:41,600 --> 00:16:44,399
write this p of v plus o

411
00:16:44,399 --> 00:16:47,040
um as like this so this is always the

412
00:16:47,040 --> 00:16:48,480
case for a quadratic function if you

413
00:16:48,480 --> 00:16:50,720
have p of a sum then you can write it as

414
00:16:50,720 --> 00:16:52,880
p of the first term plus p of the second

415
00:16:52,880 --> 00:16:54,240
term plus

416
00:16:54,240 --> 00:16:57,199
something that's linear in v and o and

417
00:16:57,199 --> 00:16:58,639
this is something we call the

418
00:16:58,639 --> 00:17:00,240
differential of

419
00:17:00,240 --> 00:17:01,519
p

420
00:17:01,519 --> 00:17:03,680
and so in our case we can solve this

421
00:17:03,680 --> 00:17:06,799
efficiently because like p of v is just

422
00:17:06,799 --> 00:17:08,400
something fixed because we fixed the

423
00:17:08,400 --> 00:17:09,760
choice of v

424
00:17:09,760 --> 00:17:12,720
p of o is zero because p vanishes on o

425
00:17:12,720 --> 00:17:14,319
and then we're left with something

426
00:17:14,319 --> 00:17:16,240
that's linear in o so this whole

427
00:17:16,240 --> 00:17:18,720
equation is just a system of m linear

428
00:17:18,720 --> 00:17:20,880
equations in m variables so you can just

429
00:17:20,880 --> 00:17:23,199
use gaussian elimination to define a

430
00:17:23,199 --> 00:17:24,240
solution

431
00:17:24,240 --> 00:17:26,079
and in an unlikely event that there is

432
00:17:26,079 --> 00:17:28,079
no solution you just go back to step one

433
00:17:28,079 --> 00:17:30,640
and try again with it with a different

434
00:17:30,640 --> 00:17:33,280
vector v right now you just output

435
00:17:33,280 --> 00:17:36,000
people so so that's in a nutshell how

436
00:17:36,000 --> 00:17:37,840
oil and vinegar works

437
00:17:37,840 --> 00:17:40,160
um rainbow is a little bit more

438
00:17:40,160 --> 00:17:42,480
complicated so instead of one space o

439
00:17:42,480 --> 00:17:45,039
you now have this chain of spaces from

440
00:17:45,039 --> 00:17:47,919
one up to okay where k is some integer

441
00:17:47,919 --> 00:17:49,360
and you also have a chain of spaces in

442
00:17:49,360 --> 00:17:52,080
your output space going from w one up to

443
00:17:52,080 --> 00:17:54,160
w k minus one

444
00:17:54,160 --> 00:17:57,600
and uh we wanted our our trap drama p

445
00:17:57,600 --> 00:17:59,919
behaves in a nice way on these two

446
00:17:59,919 --> 00:18:03,200
chains so in particular it sends o1 to

447
00:18:03,200 --> 00:18:05,520
w1 or 2 to w2

448
00:18:05,520 --> 00:18:08,320
and so on and finally it sent okay to

449
00:18:08,320 --> 00:18:11,600
the zero vector so so it vanishes on

450
00:18:11,600 --> 00:18:14,000
okay so so you see that this is just a

451
00:18:14,000 --> 00:18:16,320
generalization of oil and vinegar if you

452
00:18:16,320 --> 00:18:18,799
put k equals one then you've got just a

453
00:18:18,799 --> 00:18:20,960
vinegar uh structure

454
00:18:20,960 --> 00:18:24,160
but on top of this property we also

455
00:18:24,160 --> 00:18:25,840
demand something else

456
00:18:25,840 --> 00:18:28,080
uh which involves this differential that

457
00:18:28,080 --> 00:18:29,600
i i

458
00:18:29,600 --> 00:18:31,679
defined earlier we want that for every

459
00:18:31,679 --> 00:18:33,440
vector x if you plug it into this

460
00:18:33,440 --> 00:18:34,640
differential

461
00:18:34,640 --> 00:18:37,760
then you get some linear map that maps o

462
00:18:37,760 --> 00:18:40,960
i into w i minus one so so if you have

463
00:18:40,960 --> 00:18:43,039
these two properties then it turns out

464
00:18:43,039 --> 00:18:45,360
you can sample pre-images

465
00:18:45,360 --> 00:18:47,120
and uh yeah the stretch is basically

466
00:18:47,120 --> 00:18:49,360
multiple steps of this oil and vinegar

467
00:18:49,360 --> 00:18:52,160
id so you start with a random vector in

468
00:18:52,160 --> 00:18:53,200
here

469
00:18:53,200 --> 00:18:55,520
and then you solve for a correction term

470
00:18:55,520 --> 00:18:58,400
in a 1 such that your correct pre-image

471
00:18:58,400 --> 00:19:01,919
up to something up to some vector in w1

472
00:19:01,919 --> 00:19:03,120
and then you're going to solve for

473
00:19:03,120 --> 00:19:05,200
correction terminal 2 such that you

474
00:19:05,200 --> 00:19:08,080
correct up to a vector in w2 and so you

475
00:19:08,080 --> 00:19:10,400
go back and forth until finally you

476
00:19:10,400 --> 00:19:12,320
solve for a correction term in an okay

477
00:19:12,320 --> 00:19:14,480
such that you have a correct

478
00:19:14,480 --> 00:19:15,280
uh

479
00:19:15,280 --> 00:19:16,960
pre-image right so and each of these

480
00:19:16,960 --> 00:19:19,440
steps is just solving a system of linear

481
00:19:19,440 --> 00:19:21,440
equations so you can do this

482
00:19:21,440 --> 00:19:23,760
very efficiently

483
00:19:23,760 --> 00:19:25,919
so that's that's how a rainbow works and

484
00:19:25,919 --> 00:19:28,000
this is i believe a much nicer

485
00:19:28,000 --> 00:19:30,480
explanation than the the standard

486
00:19:30,480 --> 00:19:32,960
explanation and this allowed me to find

487
00:19:32,960 --> 00:19:35,919
some some more efficient attacks i found

488
00:19:35,919 --> 00:19:36,640
two

489
00:19:36,640 --> 00:19:38,799
key recovery attacks the first one

490
00:19:38,799 --> 00:19:40,320
i called the intersection attack and

491
00:19:40,320 --> 00:19:42,640
applies to both uov and rainbow and the

492
00:19:42,640 --> 00:19:44,720
second one is more efficient but it only

493
00:19:44,720 --> 00:19:46,720
applies to to rainbow

494
00:19:46,720 --> 00:19:49,039
and yeah i don't have time to explain

495
00:19:49,039 --> 00:19:50,720
how the attacks work here but it's

496
00:19:50,720 --> 00:19:52,000
fairly straightforward so if you're

497
00:19:52,000 --> 00:19:53,039
interested

498
00:19:53,039 --> 00:19:56,000
please watch the video or read the paper

499
00:19:56,000 --> 00:19:58,720
so for now just focus on the complexity

500
00:19:58,720 --> 00:20:00,480
of the attacks for the parameters that

501
00:20:00,480 --> 00:20:03,039
were submitted to the niche competition

502
00:20:03,039 --> 00:20:03,840
so

503
00:20:03,840 --> 00:20:05,760
yeah in this table the first two columns

504
00:20:05,760 --> 00:20:08,000
are the the two new attacks and you see

505
00:20:08,000 --> 00:20:09,760
that they're always better than the

506
00:20:09,760 --> 00:20:12,559
previously best known attacks and in

507
00:20:12,559 --> 00:20:14,559
particular this mean record minimike

508
00:20:14,559 --> 00:20:17,520
attack is is the most efficient so for

509
00:20:17,520 --> 00:20:20,320
the new security level one parameters we

510
00:20:20,320 --> 00:20:22,159
improve on the best known attacks by 20

511
00:20:22,159 --> 00:20:26,799
bits of security and for um yeah the

512
00:20:26,799 --> 00:20:29,200
the third one it's 40 bits and for the

513
00:20:29,200 --> 00:20:32,240
for security level 5 it's 55 bits

514
00:20:32,240 --> 00:20:35,200
so so yeah it's a significant reduction

515
00:20:35,200 --> 00:20:37,679
in the security

516
00:20:37,679 --> 00:20:39,280
uh so yeah that's that's it so in

517
00:20:39,280 --> 00:20:41,760
conclusion uh in this paper i give this

518
00:20:41,760 --> 00:20:44,480
new simplified uh explanation of how oil

519
00:20:44,480 --> 00:20:46,799
and vinegar and rainbow work and using

520
00:20:46,799 --> 00:20:49,840
this uh this new insight i was able to

521
00:20:49,840 --> 00:20:52,960
find new attacks that uh significant

522
00:20:52,960 --> 00:20:56,559
significantly reduced uh the security of

523
00:20:56,559 --> 00:20:57,760
rainbow

524
00:20:57,760 --> 00:21:00,210
so yeah that's it thank you very much

525
00:21:00,210 --> 00:21:01,520
[Applause]

526
00:21:01,520 --> 00:21:03,840
thank you

527
00:21:08,960 --> 00:21:12,720
are there any questions for a ward

528
00:21:15,280 --> 00:21:17,200
you need to switch on the microphone

529
00:21:17,200 --> 00:21:20,559
thanks for the talk um i believe the uh

530
00:21:20,559 --> 00:21:22,320
authors of rainbow have acknowledged the

531
00:21:22,320 --> 00:21:25,360
attacks but said that uh they don't need

532
00:21:25,360 --> 00:21:27,520
to change parameters is this correct uh

533
00:21:27,520 --> 00:21:29,440
what's your take on this

534
00:21:29,440 --> 00:21:32,240
yeah so um

535
00:21:32,240 --> 00:21:33,440
they claim indeed that it's not

536
00:21:33,440 --> 00:21:35,600
necessary to to change their parameters

537
00:21:35,600 --> 00:21:38,159
um but they had to change to a new model

538
00:21:38,159 --> 00:21:41,520
to estimate their um the complexity so

539
00:21:41,520 --> 00:21:44,159
previously they only looked at the at

540
00:21:44,159 --> 00:21:44,960
the

541
00:21:44,960 --> 00:21:46,559
gate complexity so how many gates you

542
00:21:46,559 --> 00:21:48,480
need for the attack

543
00:21:48,480 --> 00:21:51,840
and now they switch to a model where um

544
00:21:51,840 --> 00:21:54,080
you also take into account the cost of

545
00:21:54,080 --> 00:21:55,200
accessing

546
00:21:55,200 --> 00:21:57,440
memory and yeah if you take this into

547
00:21:57,440 --> 00:21:59,120
account and of course the the

548
00:21:59,120 --> 00:22:02,000
the costs of the attacks are larger

549
00:22:02,000 --> 00:22:05,120
uh so so in that sense you can make um

550
00:22:05,120 --> 00:22:07,440
an argument that is still secure but

551
00:22:07,440 --> 00:22:08,960
that doesn't change the fact that you

552
00:22:08,960 --> 00:22:11,919
lose 20 bits of security or 40 bits or

553
00:22:11,919 --> 00:22:13,679
55 bits so

554
00:22:13,679 --> 00:22:15,919
uh yeah whether it's still secure or not

555
00:22:15,919 --> 00:22:17,600
that's kind of up

556
00:22:17,600 --> 00:22:21,039
to how you interpret the nist's rules

557
00:22:21,039 --> 00:22:22,720
that's not for me to say but the

558
00:22:22,720 --> 00:22:24,720
important thing is that however you

559
00:22:24,720 --> 00:22:27,039
measured the security the security has

560
00:22:27,039 --> 00:22:28,559
gone down by

561
00:22:28,559 --> 00:22:31,120
at least 20 bits

562
00:22:31,120 --> 00:22:34,399
thank you very much

563
00:22:35,039 --> 00:22:39,559
um is there one more quick question

564
00:22:40,320 --> 00:22:42,480
okay if not then

565
00:22:42,480 --> 00:22:45,840
let's thank guard again

566
00:22:53,360 --> 00:22:54,720
okay um

567
00:22:54,720 --> 00:22:59,600
the next speaker is uh online i believe

568
00:23:00,240 --> 00:23:01,360
yep

569
00:23:01,360 --> 00:23:02,960
let me

570
00:23:02,960 --> 00:23:04,960
try to share my screen

571
00:23:04,960 --> 00:23:08,919
yes that would be great

572
00:23:13,200 --> 00:23:15,440
yes the next talk is

573
00:23:15,440 --> 00:23:16,799
um

574
00:23:16,799 --> 00:23:19,760
oh um

575
00:23:19,760 --> 00:23:23,440
there we go okay great um the next talk

576
00:23:23,440 --> 00:23:26,400
is by uh itai di nur

577
00:23:26,400 --> 00:23:28,480
on crypto analytic applications of the

578
00:23:28,480 --> 00:23:30,159
polynomial method for solving

579
00:23:30,159 --> 00:23:34,240
multivariate equations systems over gf2

580
00:23:34,240 --> 00:23:36,080
okay thank you very much for the

581
00:23:36,080 --> 00:23:37,440
introduction

582
00:23:37,440 --> 00:23:41,039
so uh in this workout we'll consider the

583
00:23:41,039 --> 00:23:43,600
problem of uh solving uh polynomial

584
00:23:43,600 --> 00:23:46,799
systems over f2 where the input is uh

585
00:23:46,799 --> 00:23:48,799
consists of m

586
00:23:48,799 --> 00:23:52,159
polynomials in n variables

587
00:23:52,159 --> 00:23:54,240
where each polynomial has a bounded

588
00:23:54,240 --> 00:23:55,919
degree of d

589
00:23:55,919 --> 00:23:57,919
which is typically small like d equals

590
00:23:57,919 --> 00:24:00,320
two and the goal is to uh find the

591
00:24:00,320 --> 00:24:03,279
solution to the equation system which is

592
00:24:03,279 --> 00:24:05,360
basically a

593
00:24:05,360 --> 00:24:08,159
common zero for all of the polynomials

594
00:24:08,159 --> 00:24:10,240
now the problem is known to be np hard

595
00:24:10,240 --> 00:24:12,799
even for quadratic system and it is uh

596
00:24:12,799 --> 00:24:15,200
very difficult in practice

597
00:24:15,200 --> 00:24:17,360
as well it's a central problem in

598
00:24:17,360 --> 00:24:19,279
computer science and

599
00:24:19,279 --> 00:24:23,039
specifically in cryptography

600
00:24:23,039 --> 00:24:25,200
now standard techniques for uh solving

601
00:24:25,200 --> 00:24:28,880
uh polynomial systems uh are based on

602
00:24:28,880 --> 00:24:31,919
grobner bases and they are typically uh

603
00:24:31,919 --> 00:24:33,200
heuristic

604
00:24:33,200 --> 00:24:36,400
however in 2017

605
00:24:36,400 --> 00:24:37,360
vital

606
00:24:37,360 --> 00:24:39,440
presented the first uh worst case

607
00:24:39,440 --> 00:24:41,840
algorithm with exponential speed up over

608
00:24:41,840 --> 00:24:43,520
brute force

609
00:24:43,520 --> 00:24:45,919
now this algorithm is based on a

610
00:24:45,919 --> 00:24:47,960
so-called polynomial method and circuit

611
00:24:47,960 --> 00:24:50,400
complexity which was originally

612
00:24:50,400 --> 00:24:51,760
originally

613
00:24:51,760 --> 00:24:53,840
introduced for a proving circuit lower

614
00:24:53,840 --> 00:24:56,158
bounds

615
00:24:56,960 --> 00:24:59,440
now here is a high level overview of a

616
00:24:59,440 --> 00:25:01,520
few uh related works

617
00:25:01,520 --> 00:25:04,320
uh that include optimized exhaustive

618
00:25:04,320 --> 00:25:05,279
search

619
00:25:05,279 --> 00:25:06,559
and

620
00:25:06,559 --> 00:25:10,159
grommer basis related algorithms

621
00:25:10,159 --> 00:25:10,960
now

622
00:25:10,960 --> 00:25:11,760
the

623
00:25:11,760 --> 00:25:15,039
polynomial method algorithms have been

624
00:25:15,039 --> 00:25:16,960
since their introduction they have been

625
00:25:16,960 --> 00:25:19,600
improved and now they actually

626
00:25:19,600 --> 00:25:22,320
give the best known asymptotic

627
00:25:22,320 --> 00:25:24,000
complexity

628
00:25:24,000 --> 00:25:27,520
for solving polynomial systems

629
00:25:27,520 --> 00:25:28,480
however

630
00:25:28,480 --> 00:25:30,159
in this work uh

631
00:25:30,159 --> 00:25:32,159
we'll be mainly interested in the

632
00:25:32,159 --> 00:25:33,520
concrete

633
00:25:33,520 --> 00:25:36,640
uh or non-asymptotic uh complexity for

634
00:25:36,640 --> 00:25:38,640
solving f2 equations

635
00:25:38,640 --> 00:25:40,640
and this is relevant essentially for

636
00:25:40,640 --> 00:25:43,120
choosing uh parameters of concrete

637
00:25:43,120 --> 00:25:44,559
cryptosystems

638
00:25:44,559 --> 00:25:46,000
this is the

639
00:25:46,000 --> 00:25:48,080
main motivation

640
00:25:48,080 --> 00:25:50,480
unfortunately uh

641
00:25:50,480 --> 00:25:52,799
close analysis of the polynomial method

642
00:25:52,799 --> 00:25:54,799
algorithm reveals that the constants

643
00:25:54,799 --> 00:25:57,200
behind these asymptotic formulas are

644
00:25:57,200 --> 00:25:59,600
quite large and algorithms have no

645
00:25:59,600 --> 00:26:01,120
concrete uh

646
00:26:01,120 --> 00:26:04,400
cryptographic relevance

647
00:26:04,400 --> 00:26:06,559
so in this work uh what i do basically

648
00:26:06,559 --> 00:26:08,240
is i present a

649
00:26:08,240 --> 00:26:10,720
polynomial method algorithm which is

650
00:26:10,720 --> 00:26:12,640
concretely efficient for solving f2

651
00:26:12,640 --> 00:26:14,000
equations

652
00:26:14,000 --> 00:26:16,320
um unfortunately there is a caveat

653
00:26:16,320 --> 00:26:18,559
because it requires a significant amount

654
00:26:18,559 --> 00:26:20,000
of memory

655
00:26:20,000 --> 00:26:20,880
and

656
00:26:20,880 --> 00:26:23,120
this is an obstacle for obtaining a fast

657
00:26:23,120 --> 00:26:24,720
implementation of the algorithm and

658
00:26:24,720 --> 00:26:26,720
practice

659
00:26:26,720 --> 00:26:28,880
however in terms of time complexity it

660
00:26:28,880 --> 00:26:31,679
seems to be the best known algorithms

661
00:26:31,679 --> 00:26:34,480
best known algorithm for a wide range of

662
00:26:34,480 --> 00:26:36,000
parameters

663
00:26:36,000 --> 00:26:39,039
and this slide gives uh

664
00:26:39,039 --> 00:26:42,240
uh numbers for some concrete instances

665
00:26:42,240 --> 00:26:44,080
as uh as you can see

666
00:26:44,080 --> 00:26:45,840
and perhaps a bit surprisingly the

667
00:26:45,840 --> 00:26:47,760
algorithm beats uh

668
00:26:47,760 --> 00:26:50,480
uh brute force uh at least in terms of

669
00:26:50,480 --> 00:26:53,679
time complexity for a relatively large

670
00:26:53,679 --> 00:26:56,240
degree say of d equals 4

671
00:26:56,240 --> 00:26:58,559
for problem sizes that are

672
00:26:58,559 --> 00:27:02,720
actually relevant to cryptography

673
00:27:03,279 --> 00:27:05,120
so the main application of the algorithm

674
00:27:05,120 --> 00:27:07,440
is in a cryptanalysis of uh

675
00:27:07,440 --> 00:27:10,320
of picnic which is an alternate third

676
00:27:10,320 --> 00:27:13,279
round candidate in nist post quantum

677
00:27:13,279 --> 00:27:15,279
standardization project

678
00:27:15,279 --> 00:27:17,840
and it essentially uh shows that some

679
00:27:17,840 --> 00:27:20,159
instances of picnic three do not achieve

680
00:27:20,159 --> 00:27:22,880
their claimed security level and you can

681
00:27:22,880 --> 00:27:24,799
see this from the uh

682
00:27:24,799 --> 00:27:26,080
from the

683
00:27:26,080 --> 00:27:27,440
stable

684
00:27:27,440 --> 00:27:29,200
so

685
00:27:29,200 --> 00:27:31,200
essentially these two

686
00:27:31,200 --> 00:27:33,200
larger instances do not achieve their

687
00:27:33,200 --> 00:27:34,960
claim

688
00:27:34,960 --> 00:27:37,120
complexity level at least in terms of

689
00:27:37,120 --> 00:27:40,080
time complexity

690
00:27:40,960 --> 00:27:43,120
okay so let me give a very brief

691
00:27:43,120 --> 00:27:45,200
overview of the techniques i don't have

692
00:27:45,200 --> 00:27:46,960
much time but i'll give you just a

693
00:27:46,960 --> 00:27:49,679
flavor so um

694
00:27:49,679 --> 00:27:52,240
given a polynomial system e i'm going to

695
00:27:52,240 --> 00:27:53,760
uh define

696
00:27:53,760 --> 00:27:56,960
uh a polynomial f that uh

697
00:27:56,960 --> 00:27:58,159
um

698
00:27:58,159 --> 00:27:59,760
that single point on the f that

699
00:27:59,760 --> 00:28:03,760
evaluates to one only on solutions to e

700
00:28:03,760 --> 00:28:06,320
unfortunately if you define it

701
00:28:06,320 --> 00:28:08,399
correctly the polynomial

702
00:28:08,399 --> 00:28:10,240
the degree of the polynomial is too high

703
00:28:10,240 --> 00:28:13,039
to be manipulated efficiently

704
00:28:13,039 --> 00:28:14,799
therefore

705
00:28:14,799 --> 00:28:17,440
what polynomial method algorithms do is

706
00:28:17,440 --> 00:28:19,279
define a probabilistic polynomial f

707
00:28:19,279 --> 00:28:22,320
tilde that on one hand approximates this

708
00:28:22,320 --> 00:28:24,159
original polynomial f and on the other

709
00:28:24,159 --> 00:28:26,000
hand it has lower degree so it can be

710
00:28:26,000 --> 00:28:29,039
manipulated efficiently by algorithms

711
00:28:29,039 --> 00:28:31,039
so previous work essentially exploited

712
00:28:31,039 --> 00:28:32,960
the low degree of f tell to compute the

713
00:28:32,960 --> 00:28:35,679
parity of the number of solutions

714
00:28:35,679 --> 00:28:38,159
uh to the equation systems and from this

715
00:28:38,159 --> 00:28:39,840
you can actually solve e

716
00:28:39,840 --> 00:28:42,799
the equation system uh however this uh

717
00:28:42,799 --> 00:28:44,720
required uh working with many

718
00:28:44,720 --> 00:28:46,799
probabilistic polynomials and was

719
00:28:46,799 --> 00:28:49,200
inefficient uh at least in terms of a

720
00:28:49,200 --> 00:28:51,120
concrete complexity

721
00:28:51,120 --> 00:28:53,360
so one of the contributions of this work

722
00:28:53,360 --> 00:28:55,520
is a more direct and efficient way of

723
00:28:55,520 --> 00:28:57,520
solving the equation systems

724
00:28:57,520 --> 00:28:59,520
the equation system from

725
00:28:59,520 --> 00:29:02,559
parity computations

726
00:29:02,559 --> 00:29:03,840
so let me

727
00:29:03,840 --> 00:29:06,159
briefly conclude so in this work i

728
00:29:06,159 --> 00:29:07,520
divide the concretely efficient

729
00:29:07,520 --> 00:29:09,679
polynomial method algorithm for solving

730
00:29:09,679 --> 00:29:11,679
f2 equations

731
00:29:11,679 --> 00:29:13,039
the paper there are additional

732
00:29:13,039 --> 00:29:14,880
contributions such as reducing the

733
00:29:14,880 --> 00:29:17,200
memory complexity of a standard

734
00:29:17,200 --> 00:29:19,520
implementation of the algorithm by an

735
00:29:19,520 --> 00:29:22,240
exponential factor although it remains

736
00:29:22,240 --> 00:29:24,640
still remains high another

737
00:29:24,640 --> 00:29:26,799
contribution is optimizing the algorithm

738
00:29:26,799 --> 00:29:29,440
for a concrete cryptosystems

739
00:29:29,440 --> 00:29:31,679
now there are several open problems one

740
00:29:31,679 --> 00:29:34,399
of them is to optimize the algorithm for

741
00:29:34,399 --> 00:29:36,559
over over defunct systems in which you

742
00:29:36,559 --> 00:29:38,320
have many more equations than the

743
00:29:38,320 --> 00:29:39,440
variables

744
00:29:39,440 --> 00:29:42,559
and of course another open problem is to

745
00:29:42,559 --> 00:29:45,520
obtain a fast implementation

746
00:29:45,520 --> 00:29:48,080
of the algorithm in practice

747
00:29:48,080 --> 00:29:50,080
so uh thank you very much for your

748
00:29:50,080 --> 00:29:52,480
attention

749
00:29:52,559 --> 00:29:53,310
thanks to ty

750
00:29:53,310 --> 00:29:56,750
[Applause]

751
00:29:57,919 --> 00:29:59,679
okay i can already see some people are

752
00:29:59,679 --> 00:30:02,720
lining up for questions

753
00:30:05,919 --> 00:30:08,000
hi thank you for the talk uh i was

754
00:30:08,000 --> 00:30:10,080
wondering does the new algorithm include

755
00:30:10,080 --> 00:30:12,159
any um

756
00:30:12,159 --> 00:30:14,480
sub steps doing an exhaustive search

757
00:30:14,480 --> 00:30:17,120
that could imply a quantum algorithm by

758
00:30:17,120 --> 00:30:18,960
just globalizing

759
00:30:18,960 --> 00:30:21,520
some smaller component

760
00:30:21,520 --> 00:30:24,559
yes i think you can speed it up with the

761
00:30:24,559 --> 00:30:27,360
my feeling i i haven't done this uh

762
00:30:27,360 --> 00:30:29,760
computation uh

763
00:30:29,760 --> 00:30:31,919
uh formally but i think some steps can

764
00:30:31,919 --> 00:30:34,399
be optimized and i think there is a hope

765
00:30:34,399 --> 00:30:35,600
here to get

766
00:30:35,600 --> 00:30:36,799
also

767
00:30:36,799 --> 00:30:38,080
um

768
00:30:38,080 --> 00:30:40,159
faster algorithm uh

769
00:30:40,159 --> 00:30:41,679
using the

770
00:30:41,679 --> 00:30:44,000
on a quantum computer but like i said i

771
00:30:44,000 --> 00:30:46,159
haven't checked the details so

772
00:30:46,159 --> 00:30:48,080
not exactly

773
00:30:48,080 --> 00:30:52,080
sure about that thank you

774
00:30:53,520 --> 00:30:54,799
uh okay

775
00:30:54,799 --> 00:30:57,279
so thanks for the talk uh i had a rather

776
00:30:57,279 --> 00:30:58,880
technical question like directly

777
00:30:58,880 --> 00:31:00,559
concerning the paper

778
00:31:00,559 --> 00:31:02,399
so if i remember correctly you were

779
00:31:02,399 --> 00:31:04,640
defining like n1

780
00:31:04,640 --> 00:31:06,640
parity counting functions

781
00:31:06,640 --> 00:31:08,240
that from the first one you were getting

782
00:31:08,240 --> 00:31:11,200
the values of y so the n minus m1 bits

783
00:31:11,200 --> 00:31:13,039
of the

784
00:31:13,039 --> 00:31:15,760
the solution and then you were

785
00:31:15,760 --> 00:31:17,919
evaluating the rest on the value that

786
00:31:17,919 --> 00:31:19,840
you got for y in order to get the rest

787
00:31:19,840 --> 00:31:21,600
of the bits true

788
00:31:21,600 --> 00:31:22,480
so

789
00:31:22,480 --> 00:31:24,399
uh what i was wondering was that can't

790
00:31:24,399 --> 00:31:26,799
you do like some linear

791
00:31:26,799 --> 00:31:29,200
mixing of the variables in the beginning

792
00:31:29,200 --> 00:31:31,600
and instead of like doing n1

793
00:31:31,600 --> 00:31:33,760
parity countings just do the first one

794
00:31:33,760 --> 00:31:35,760
like multiple times

795
00:31:35,760 --> 00:31:38,080
and try to like solve the it's like do

796
00:31:38,080 --> 00:31:39,519
some gaussian elimination or something

797
00:31:39,519 --> 00:31:41,519
to get all the bits because minus m1 i

798
00:31:41,519 --> 00:31:45,440
remember was like way bigger than m1

799
00:31:45,440 --> 00:31:48,159
i think i think uh you cannot uh maybe

800
00:31:48,159 --> 00:31:49,760
you can do some

801
00:31:49,760 --> 00:31:52,240
uh minor tweaks here to improve the

802
00:31:52,240 --> 00:31:54,080
complexity but i don't quite see how you

803
00:31:54,080 --> 00:31:55,279
can uh

804
00:31:55,279 --> 00:31:58,559
um kind of improve this uh

805
00:31:58,559 --> 00:32:01,600
uh in a substantial way i mean uh you

806
00:32:01,600 --> 00:32:03,440
can do some linear algebra tricks and

807
00:32:03,440 --> 00:32:05,279
maybe uh

808
00:32:05,279 --> 00:32:06,159
uh

809
00:32:06,159 --> 00:32:08,000
maybe obtain slightly better concrete

810
00:32:08,000 --> 00:32:10,320
complexity in some cases but i don't i

811
00:32:10,320 --> 00:32:13,200
don't really see what you mean by uh

812
00:32:13,200 --> 00:32:16,399
substantially reducing the n minus n1 uh

813
00:32:16,399 --> 00:32:18,399
term here maybe

814
00:32:18,399 --> 00:32:20,080
you can send me a

815
00:32:20,080 --> 00:32:22,240
concrete proposal by email and i look it

816
00:32:22,240 --> 00:32:23,600
up but uh yeah

817
00:32:23,600 --> 00:32:25,760
i don't quite see how to do it

818
00:32:25,760 --> 00:32:28,799
and another question so

819
00:32:28,799 --> 00:32:30,720
i was wondering that's if i remember the

820
00:32:30,720 --> 00:32:32,799
attack only worked for like the full s

821
00:32:32,799 --> 00:32:36,159
box layer instances of low mc right

822
00:32:36,159 --> 00:32:37,919
so i was wondering if it's essentially

823
00:32:37,919 --> 00:32:39,279
you you can try to apply it for a

824
00:32:39,279 --> 00:32:41,360
partial s box but the partial s

825
00:32:41,360 --> 00:32:43,279
equivalent of more rounds so the

826
00:32:43,279 --> 00:32:45,760
algebraic degree is larger and therefore

827
00:32:45,760 --> 00:32:47,600
the attacks will be much

828
00:32:47,600 --> 00:32:49,519
less efficient

829
00:32:49,519 --> 00:32:51,279
yes true i was wondering if there is a

830
00:32:51,279 --> 00:32:53,360
trick to like have like introduce more

831
00:32:53,360 --> 00:32:56,480
equations but with lower degrees somehow

832
00:32:56,480 --> 00:32:58,799
that would somehow

833
00:32:58,799 --> 00:33:00,720
make it you can introduce more variables

834
00:33:00,720 --> 00:33:02,480
that i can see how you can do but then

835
00:33:02,480 --> 00:33:04,720
of course the complexity will uh

836
00:33:04,720 --> 00:33:07,440
increase uh proportionally and therefore

837
00:33:07,440 --> 00:33:10,559
i don't see how the algorithm

838
00:33:10,559 --> 00:33:12,399
would be uh

839
00:33:12,399 --> 00:33:15,039
valuable in this case i mean

840
00:33:15,039 --> 00:33:17,120
if you again if you have a suggestion

841
00:33:17,120 --> 00:33:20,559
i'll be happy to hear it but uh okay

842
00:33:20,559 --> 00:33:22,720
thank you

843
00:33:22,720 --> 00:33:26,960
okay um i think um

844
00:33:27,039 --> 00:33:28,559
we should probably move on to the next

845
00:33:28,559 --> 00:33:30,480
speaker so let's let's thank itai one

846
00:33:30,480 --> 00:33:33,640
more time

847
00:33:38,000 --> 00:33:38,960
um

848
00:33:38,960 --> 00:33:42,480
so the next talk is about um

849
00:33:42,480 --> 00:33:44,559
round optimal blind signatures in the

850
00:33:44,559 --> 00:33:46,080
plane model from classical and quantum

851
00:33:46,080 --> 00:33:47,760
standard assumptions

852
00:33:47,760 --> 00:33:52,960
and this this work by shuichi katsumata

853
00:33:56,060 --> 00:33:59,210
[Music]

854
00:34:03,279 --> 00:34:05,440
yes loud and clear

855
00:34:05,440 --> 00:34:07,440
okay i'm going thank you for the

856
00:34:07,440 --> 00:34:09,839
introduction i'm going to talk about the

857
00:34:09,839 --> 00:34:12,320
blind signature this is a joint work

858
00:34:12,320 --> 00:34:16,079
with huge katzmata shot yamada from ice

859
00:34:16,079 --> 00:34:18,960
and takashima from entity

860
00:34:18,960 --> 00:34:22,079
uh this is our result we proposed round

861
00:34:22,079 --> 00:34:24,719
optimal blind signature protocol

862
00:34:24,719 --> 00:34:25,760
uh

863
00:34:25,760 --> 00:34:27,679
that has uh

864
00:34:27,679 --> 00:34:30,159
three desirable properties

865
00:34:30,159 --> 00:34:31,760
first

866
00:34:31,760 --> 00:34:33,918
our protocol does not rely on any

867
00:34:33,918 --> 00:34:35,918
trusted setup

868
00:34:35,918 --> 00:34:37,119
assumption

869
00:34:37,119 --> 00:34:39,040
and second

870
00:34:39,040 --> 00:34:40,399
our protocol

871
00:34:40,399 --> 00:34:42,639
is based on standard class current

872
00:34:42,639 --> 00:34:44,639
quantum assumption

873
00:34:44,639 --> 00:34:45,219
so

874
00:34:45,219 --> 00:34:46,839
[Music]

875
00:34:46,839 --> 00:34:51,359
our talk uh was assigned to post-quantum

876
00:34:51,359 --> 00:34:53,440
cryptography but uh actually our

877
00:34:53,440 --> 00:34:55,440
protocol is not post quantum city

878
00:34:55,440 --> 00:34:58,000
because we use uh standard cluster

879
00:34:58,000 --> 00:34:59,599
assumptions

880
00:34:59,599 --> 00:35:02,320
and uh our protocol does not rely on

881
00:35:02,320 --> 00:35:05,680
complexity leveraging okay

882
00:35:05,680 --> 00:35:07,359
so first

883
00:35:07,359 --> 00:35:09,040
let me review

884
00:35:09,040 --> 00:35:10,079
the

885
00:35:10,079 --> 00:35:14,320
notion of blind signature this is the

886
00:35:14,320 --> 00:35:17,599
digital analog of

887
00:35:17,599 --> 00:35:19,440
children envelope

888
00:35:19,440 --> 00:35:21,680
with carbon copy c

889
00:35:21,680 --> 00:35:25,760
there is a signer and user a user has a

890
00:35:25,760 --> 00:35:26,960
message

891
00:35:26,960 --> 00:35:29,440
and the sender

892
00:35:29,440 --> 00:35:32,400
the user send a message

893
00:35:32,400 --> 00:35:35,359
put the message into the sealed envelope

894
00:35:35,359 --> 00:35:38,560
and send it to the signer the signer

895
00:35:38,560 --> 00:35:41,040
signed the message uh

896
00:35:41,040 --> 00:35:43,839
without opening the cd see the

897
00:35:43,839 --> 00:35:46,960
because uh the the envelope with carbon

898
00:35:46,960 --> 00:35:48,560
copies uh

899
00:35:48,560 --> 00:35:49,920
if

900
00:35:49,920 --> 00:35:53,920
the signer signed on the envelope then

901
00:35:53,920 --> 00:35:56,839
this seat has the sign

902
00:35:56,839 --> 00:36:00,480
signature so next the user opened see

903
00:36:00,480 --> 00:36:04,240
the envelope and get a signed uh message

904
00:36:04,240 --> 00:36:06,160
but this is a

905
00:36:06,160 --> 00:36:08,960
brand signature

906
00:36:09,119 --> 00:36:11,359
there are many applications of brian's

907
00:36:11,359 --> 00:36:13,119
signature

908
00:36:13,119 --> 00:36:15,119
but in particular

909
00:36:15,119 --> 00:36:18,000
brian's signature is a

910
00:36:18,000 --> 00:36:19,960
crucial building block of

911
00:36:19,960 --> 00:36:22,560
privacy-preserving cryptosystems such as

912
00:36:22,560 --> 00:36:25,599
e-cash e-boarding anonymous credentials

913
00:36:25,599 --> 00:36:27,920
direct direct anonymous statistician and

914
00:36:27,920 --> 00:36:30,079
more

915
00:36:30,079 --> 00:36:32,720
this is the seat of the art of round

916
00:36:32,720 --> 00:36:36,160
optimal blind signature

917
00:36:36,320 --> 00:36:37,920
most of them

918
00:36:37,920 --> 00:36:40,800
rely on some trusted setup assumption

919
00:36:40,800 --> 00:36:44,000
such as common reference string model

920
00:36:44,000 --> 00:36:47,680
or london locomotive

921
00:36:47,920 --> 00:36:50,880
fisher bower etta and

922
00:36:50,880 --> 00:36:55,680
he their follow-up works uh proposed the

923
00:36:55,680 --> 00:36:58,160
round optimal blind signatures uh

924
00:36:58,160 --> 00:37:01,280
without uh trusted state assumption uh

925
00:37:01,280 --> 00:37:02,400
by using

926
00:37:02,400 --> 00:37:04,960
interactive assumptions so

927
00:37:04,960 --> 00:37:07,680
those protocols are based on strong

928
00:37:07,680 --> 00:37:10,240
assumptions

929
00:37:10,480 --> 00:37:13,040
uh in fact around optimal brand

930
00:37:13,040 --> 00:37:16,240
signatures without trusted setup assam

931
00:37:16,240 --> 00:37:18,640
trusted setup from standard assumption

932
00:37:18,640 --> 00:37:21,760
is impossible under some conditions

933
00:37:21,760 --> 00:37:23,119
gaga at all

934
00:37:23,119 --> 00:37:26,800
overcome this impossible result by using

935
00:37:26,800 --> 00:37:29,680
complexity leveraging their protocol use

936
00:37:29,680 --> 00:37:33,040
compressive complexity leveraging twice

937
00:37:33,040 --> 00:37:35,760
gag and groups are also presented around

938
00:37:35,760 --> 00:37:37,680
the optimal grind signature

939
00:37:37,680 --> 00:37:40,960
protocol with uh

940
00:37:40,960 --> 00:37:44,240
by using complexity levelizing uh this

941
00:37:44,240 --> 00:37:48,000
protocol used only once but

942
00:37:48,160 --> 00:37:50,480
notable feature of this protocol is

943
00:37:50,480 --> 00:37:54,560
uh is the protocol heavily rely on the

944
00:37:54,560 --> 00:37:58,400
algebraic structure of parents

945
00:37:58,400 --> 00:38:00,000
so the our

946
00:38:00,000 --> 00:38:02,480
brain signature is the first around

947
00:38:02,480 --> 00:38:04,880
optimal blind signature without trusted

948
00:38:04,880 --> 00:38:07,440
set up assassin from standard

949
00:38:07,440 --> 00:38:10,320
from standard assumptions and we our

950
00:38:10,320 --> 00:38:12,560
protocol doesn't rely on complexity

951
00:38:12,560 --> 00:38:15,560
leveraging

952
00:38:17,119 --> 00:38:19,920
uh our portal is based on brian's

953
00:38:19,920 --> 00:38:22,480
signature protocol by gagato

954
00:38:22,480 --> 00:38:23,599
uh

955
00:38:23,599 --> 00:38:26,960
the protocol is as follows designer

956
00:38:26,960 --> 00:38:30,079
generator stand uh generator or kpi of

957
00:38:30,079 --> 00:38:32,079
standard signature

958
00:38:32,079 --> 00:38:33,440
and

959
00:38:33,440 --> 00:38:35,760
the signer and the user run the secure

960
00:38:35,760 --> 00:38:38,800
functional evaluation portal and the

961
00:38:38,800 --> 00:38:42,560
user gets a signature for the message n

962
00:38:42,560 --> 00:38:44,839
and the signer gets

963
00:38:44,839 --> 00:38:48,560
nothing so we can uh

964
00:38:48,560 --> 00:38:51,200
the user can obtain the signature for

965
00:38:51,200 --> 00:38:52,240
him

966
00:38:52,240 --> 00:38:54,000
without revealing a

967
00:38:54,000 --> 00:38:55,680
messaging

968
00:38:55,680 --> 00:38:57,280
however

969
00:38:57,280 --> 00:39:00,160
the signer might deviate from the

970
00:39:00,160 --> 00:39:02,960
protocol so uh

971
00:39:02,960 --> 00:39:05,760
we need to use zero knowledge protocol

972
00:39:05,760 --> 00:39:06,720
to

973
00:39:06,720 --> 00:39:10,799
force the sign for the protocol

974
00:39:11,760 --> 00:39:13,200
so

975
00:39:13,200 --> 00:39:16,400
by using zero knight we can uh

976
00:39:16,400 --> 00:39:18,480
prove the security of this branch energy

977
00:39:18,480 --> 00:39:21,440
protocol blindness falls from the right

978
00:39:21,440 --> 00:39:23,599
soundless of zeronites protocol and the

979
00:39:23,599 --> 00:39:25,440
receiver security of secure functional

980
00:39:25,440 --> 00:39:26,720
variation

981
00:39:26,720 --> 00:39:28,800
the unfoldability follows from zero

982
00:39:28,800 --> 00:39:30,960
knowledge and the sender security of

983
00:39:30,960 --> 00:39:33,200
secure functional evaluation

984
00:39:33,200 --> 00:39:36,640
uh however uh their protocol uh need to

985
00:39:36,640 --> 00:39:40,320
to use complexity leveraging to prove

986
00:39:40,320 --> 00:39:43,680
these two properties

987
00:39:43,680 --> 00:39:47,440
our basic idea is as follows

988
00:39:47,440 --> 00:39:50,000
using uh using complexity leveraging we

989
00:39:50,000 --> 00:39:52,640
need a super polynomial super

990
00:39:52,640 --> 00:39:54,560
preliminary city equipped system

991
00:39:54,560 --> 00:39:56,960
cryptographic cryptography

992
00:39:56,960 --> 00:40:00,400
we replaced uh super polynomial secure

993
00:40:00,400 --> 00:40:04,160
cryptography with quantumly secure one

994
00:40:04,160 --> 00:40:07,359
by using a quantum path quantum power

995
00:40:07,359 --> 00:40:09,680
for super polynomial

996
00:40:09,680 --> 00:40:10,880
reduction

997
00:40:10,880 --> 00:40:13,440
this idea was inspired by the work

998
00:40:13,440 --> 00:40:15,760
client planner

999
00:40:15,760 --> 00:40:17,040
however

1000
00:40:17,040 --> 00:40:19,040
there is one issue

1001
00:40:19,040 --> 00:40:21,920
the protocol by gargato used compressive

1002
00:40:21,920 --> 00:40:25,119
leveraging technique twice

1003
00:40:25,119 --> 00:40:26,319
the

1004
00:40:26,319 --> 00:40:29,200
quantum technique

1005
00:40:29,200 --> 00:40:31,839
only works only for complexity levels

1006
00:40:31,839 --> 00:40:34,480
only once

1007
00:40:34,560 --> 00:40:37,040
so we cannot simply

1008
00:40:37,040 --> 00:40:41,520
use the technique by client planner

1009
00:40:42,720 --> 00:40:45,599
in fact the protocol by gargant gupta

1010
00:40:45,599 --> 00:40:51,119
use compressed composition only once so

1011
00:40:51,280 --> 00:40:53,520
we can might use uh

1012
00:40:53,520 --> 00:40:56,079
the quantum technique uh for their

1013
00:40:56,079 --> 00:40:57,119
protocol

1014
00:40:57,119 --> 00:40:59,440
however their uh

1015
00:40:59,440 --> 00:41:01,520
land optimal blind signature protocol is

1016
00:41:01,520 --> 00:41:03,520
not compatible with quantum simulation

1017
00:41:03,520 --> 00:41:06,079
due to heavy use of algebraic structure

1018
00:41:06,079 --> 00:41:07,040
of

1019
00:41:07,040 --> 00:41:10,240
gross hyper system

1020
00:41:11,839 --> 00:41:14,640
to solve the problem we introduced the

1021
00:41:14,640 --> 00:41:16,560
notion of blind signature conforming

1022
00:41:16,560 --> 00:41:18,319
zero knowledge this is neurologic

1023
00:41:18,319 --> 00:41:19,760
protocol uh

1024
00:41:19,760 --> 00:41:23,280
only to to move during a protocol

1025
00:41:23,280 --> 00:41:25,359
and prove by chemoregister

1026
00:41:25,359 --> 00:41:28,079
possibly inform the public keys because

1027
00:41:28,079 --> 00:41:31,680
we use this neurologic argument for the

1028
00:41:31,680 --> 00:41:34,240
breathing block of blind signature uh

1029
00:41:34,240 --> 00:41:37,200
the prover is the user of the branded

1030
00:41:37,200 --> 00:41:38,960
signature so

1031
00:41:38,960 --> 00:41:42,560
the proof account register public key

1032
00:41:42,560 --> 00:41:44,480
and in

1033
00:41:44,480 --> 00:41:46,160
this drive

1034
00:41:46,160 --> 00:41:48,160
the simulator simulator is quantum

1035
00:41:48,160 --> 00:41:50,240
phenomenal time simulator so the

1036
00:41:50,240 --> 00:41:52,400
simulator can break plastically secure

1037
00:41:52,400 --> 00:41:55,680
crypto cryptosystem in reductions

1038
00:41:55,680 --> 00:41:56,800
so this

1039
00:41:56,800 --> 00:41:59,280
can be used instead of

1040
00:41:59,280 --> 00:42:02,160
complexity leveraging

1041
00:42:02,160 --> 00:42:03,760
to solve the

1042
00:42:03,760 --> 00:42:07,760
complexity leveraging twice program we

1043
00:42:07,760 --> 00:42:08,720
use

1044
00:42:08,720 --> 00:42:12,319
many techniques one of the key tools is

1045
00:42:12,319 --> 00:42:14,319
public key encryption with invalid key

1046
00:42:14,319 --> 00:42:16,640
statistics certifiability

1047
00:42:16,640 --> 00:42:18,560
we can prove that a public key is

1048
00:42:18,560 --> 00:42:21,200
informed for regular public key crystal

1049
00:42:21,200 --> 00:42:24,480
system by using the proof system by ahan

1050
00:42:24,480 --> 00:42:26,240
of land layer

1051
00:42:26,240 --> 00:42:27,839
we

1052
00:42:27,839 --> 00:42:31,359
carefully combined this public

1053
00:42:31,359 --> 00:42:33,280
encryption with lossy encryption and

1054
00:42:33,280 --> 00:42:36,000
that so we can overcome the

1055
00:42:36,000 --> 00:42:39,520
the complexity leveraging problem

1056
00:42:39,520 --> 00:42:41,200
please see the

1057
00:42:41,200 --> 00:42:45,439
video or paper of the detail

1058
00:42:45,760 --> 00:42:48,240
this is a summary we achieved the round

1059
00:42:48,240 --> 00:42:51,119
optimal bind signature protocol by using

1060
00:42:51,119 --> 00:42:52,800
standard class current quantum

1061
00:42:52,800 --> 00:42:54,160
assumptions

1062
00:42:54,160 --> 00:42:56,079
this protocol does not rely on any

1063
00:42:56,079 --> 00:42:58,800
trusted setup and we don't use

1064
00:42:58,800 --> 00:43:01,200
complexity leveraging technique

1065
00:43:01,200 --> 00:43:02,079
we

1066
00:43:02,079 --> 00:43:04,160
introduced the many interesting

1067
00:43:04,160 --> 00:43:06,800
techniques for this protocol

1068
00:43:06,800 --> 00:43:09,920
exactly thank you

1069
00:43:11,680 --> 00:43:14,640
thank you for the talk

1070
00:43:16,240 --> 00:43:17,599
um

1071
00:43:17,599 --> 00:43:18,480
um

1072
00:43:18,480 --> 00:43:19,920
i'm not sure

1073
00:43:19,920 --> 00:43:21,359
whether we have we have maybe time for

1074
00:43:21,359 --> 00:43:24,078
one quick question

1075
00:43:25,359 --> 00:43:26,960
maybe i will just take delivered two to

1076
00:43:26,960 --> 00:43:31,920
ask one um so basically um you need um

1077
00:43:31,920 --> 00:43:34,560
you're honest but your pro some parts of

1078
00:43:34,560 --> 00:43:36,079
your protocol to be quantum secure and

1079
00:43:36,079 --> 00:43:37,280
then um

1080
00:43:37,280 --> 00:43:39,280
you use um

1081
00:43:39,280 --> 00:43:41,200
quantum simulation to break

1082
00:43:41,200 --> 00:43:43,359
some some classical secure parts so

1083
00:43:43,359 --> 00:43:45,680
basically if you wanted quantum secure

1084
00:43:45,680 --> 00:43:47,520
quantum security for the whole protocol

1085
00:43:47,520 --> 00:43:49,040
your technique would would not be

1086
00:43:49,040 --> 00:43:50,800
applicable right

1087
00:43:50,800 --> 00:43:53,760
yeah our uh techniques does not work for

1088
00:43:53,760 --> 00:43:56,480
post-quantum secure cryptosystem uh i

1089
00:43:56,480 --> 00:43:58,480
mean i mean our brand of signature

1090
00:43:58,480 --> 00:44:00,400
protocol is not the possible secure

1091
00:44:00,400 --> 00:44:02,880
because right and basically

1092
00:44:02,880 --> 00:44:05,119
the technique is fundamentally uh not

1093
00:44:05,119 --> 00:44:06,960
suited for that right because yeah but

1094
00:44:06,960 --> 00:44:08,160
you would need the

1095
00:44:08,160 --> 00:44:10,960
breakable quantum breakable things okay

1096
00:44:10,960 --> 00:44:12,960
thanks

1097
00:44:12,960 --> 00:44:14,640
okay i think we should move on to the to

1098
00:44:14,640 --> 00:44:16,560
the next speaker thanks

1099
00:44:16,560 --> 00:44:18,400
rio

1100
00:44:18,400 --> 00:44:21,560
thank you

1101
00:44:32,319 --> 00:44:33,680
sorry

1102
00:44:33,680 --> 00:44:37,839
um no this was not what i wanted

1103
00:44:55,920 --> 00:44:57,839
and so so can you

1104
00:44:57,839 --> 00:45:03,078
open your presentation which one is it

1105
00:45:05,200 --> 00:45:07,598
okay

1106
00:45:15,520 --> 00:45:18,839
there we go

1107
00:45:28,079 --> 00:45:29,520
okay so

1108
00:45:29,520 --> 00:45:33,440
the next talk will be uh by amit agarwal

1109
00:45:33,440 --> 00:45:36,000
and it will be on post quantum secure uh

1110
00:45:36,000 --> 00:45:37,599
multi-party computation and constant

1111
00:45:37,599 --> 00:45:40,160
rounds uh you'll actually need to switch

1112
00:45:40,160 --> 00:45:42,160
around the display settings so in the

1113
00:45:42,160 --> 00:45:43,839
upper um

1114
00:45:43,839 --> 00:45:45,920
left i believe because we're seeing the

1115
00:45:45,920 --> 00:45:49,920
presenter mode uh remotely

1116
00:45:51,599 --> 00:45:53,599
this is this

1117
00:45:53,599 --> 00:45:57,520
yeah uh swap presenter view

1118
00:45:57,520 --> 00:46:02,480
okay perfect thank you okay

1119
00:46:05,599 --> 00:46:07,920
this does not work because now the

1120
00:46:07,920 --> 00:46:09,839
audience in the room sees the presenter

1121
00:46:09,839 --> 00:46:14,130
on one second oh great okay

1122
00:46:14,130 --> 00:46:17,209
[Music]

1123
00:46:17,280 --> 00:46:18,800
as you all may have gathered we are

1124
00:46:18,800 --> 00:46:22,000
still working out kinks

1125
00:46:22,880 --> 00:46:25,200
um

1126
00:46:26,240 --> 00:46:28,000
let me try and

1127
00:46:28,000 --> 00:46:31,040
share it with this

1128
00:46:36,079 --> 00:46:38,880
how does it look now

1129
00:46:38,880 --> 00:46:40,880
online

1130
00:46:40,880 --> 00:46:43,599
uh it's still loading so i think

1131
00:46:43,599 --> 00:46:46,240
give it a second

1132
00:46:46,240 --> 00:46:49,598
i'm hoping it's just a lag

1133
00:46:49,839 --> 00:46:52,720
i don't see full screen

1134
00:46:52,720 --> 00:46:56,279
i don't okay

1135
00:46:58,240 --> 00:47:01,520
it may also be under uh display settings

1136
00:47:01,520 --> 00:47:04,319
that same menu uh there was another

1137
00:47:04,319 --> 00:47:06,000
option that i believe said duplicate

1138
00:47:06,000 --> 00:47:08,000
slideshow that may also be what you need

1139
00:47:08,000 --> 00:47:10,560
to click i'm not sure oh i see okay

1140
00:47:10,560 --> 00:47:11,599
thanks

1141
00:47:11,599 --> 00:47:13,839
sure

1142
00:47:15,599 --> 00:47:17,839
so

1143
00:47:19,359 --> 00:47:21,040
thanks for your patience everyone from

1144
00:47:21,040 --> 00:47:25,200
the disembodied voice in the cloud

1145
00:47:25,200 --> 00:47:28,559
there we go sorry for the delay

1146
00:47:28,559 --> 00:47:30,960
perfect

1147
00:47:35,200 --> 00:47:36,720
hi everyone today i'll be talking about

1148
00:47:36,720 --> 00:47:38,880
my work on post quantum mpc in constant

1149
00:47:38,880 --> 00:47:41,200
rounds and this is joint work with james

1150
00:47:41,200 --> 00:47:43,280
bartosek vipal goel dakshita karana and

1151
00:47:43,280 --> 00:47:45,599
julia manohara and i would like to thank

1152
00:47:45,599 --> 00:47:47,920
james for letting me use his lights

1153
00:47:47,920 --> 00:47:48,640
so

1154
00:47:48,640 --> 00:47:50,160
let me first start with the setting of

1155
00:47:50,160 --> 00:47:51,920
mpc where we have a bunch of parties

1156
00:47:51,920 --> 00:47:53,839
each with their private inputs and they

1157
00:47:53,839 --> 00:47:55,760
want to compute some public uh circuit

1158
00:47:55,760 --> 00:47:57,520
on their private inputs and the

1159
00:47:57,520 --> 00:47:59,119
adversary might corrupt some subset of

1160
00:47:59,119 --> 00:48:00,720
these parties and the goal is that the

1161
00:48:00,720 --> 00:48:03,040
advocacy shouldn't learn anything about

1162
00:48:03,040 --> 00:48:05,359
the inputs of honest parties about apart

1163
00:48:05,359 --> 00:48:06,960
from what it can learn from the output

1164
00:48:06,960 --> 00:48:08,400
of the functionality

1165
00:48:08,400 --> 00:48:09,839
and the setting that we are interested

1166
00:48:09,839 --> 00:48:12,000
in is quantum polynomial time

1167
00:48:12,000 --> 00:48:14,160
adversaries with malicious behavior

1168
00:48:14,160 --> 00:48:15,839
dishonest majority and static

1169
00:48:15,839 --> 00:48:17,520
corruptions we note that in the

1170
00:48:17,520 --> 00:48:18,960
two-party setting there has been some

1171
00:48:18,960 --> 00:48:21,040
prior work to solve this problem in the

1172
00:48:21,040 --> 00:48:22,640
plane model but in the multi-party

1173
00:48:22,640 --> 00:48:23,920
settings this has been largely

1174
00:48:23,920 --> 00:48:26,240
unexplored

1175
00:48:26,240 --> 00:48:29,440
and the main challenge lies in uh

1176
00:48:29,440 --> 00:48:31,359
working against quantum polynomial time

1177
00:48:31,359 --> 00:48:33,040
adversaries because of the snow cloning

1178
00:48:33,040 --> 00:48:34,880
theorem it states that given an

1179
00:48:34,880 --> 00:48:36,559
arbitrary quantum state you cannot make

1180
00:48:36,559 --> 00:48:38,640
two copies of it and this creates

1181
00:48:38,640 --> 00:48:40,800
challenges in simulate simulation

1182
00:48:40,800 --> 00:48:42,319
techniques

1183
00:48:42,319 --> 00:48:43,760
so our high level approach is the

1184
00:48:43,760 --> 00:48:45,680
following so we note that there are

1185
00:48:45,680 --> 00:48:47,359
already existing constant round

1186
00:48:47,359 --> 00:48:49,839
classical mpc protocols secure against

1187
00:48:49,839 --> 00:48:51,920
classical adversaries with a trusted

1188
00:48:51,920 --> 00:48:54,720
setup and furthermore if you instantiate

1189
00:48:54,720 --> 00:48:56,559
the underlying primitives used in these

1190
00:48:56,559 --> 00:48:58,800
protocols with your post quantum analogs

1191
00:48:58,800 --> 00:49:00,240
then what you get is a post quantum

1192
00:49:00,240 --> 00:49:03,760
secure mpc but with a trusted setup

1193
00:49:03,760 --> 00:49:05,760
and this trusted setup is a common

1194
00:49:05,760 --> 00:49:07,119
random string

1195
00:49:07,119 --> 00:49:09,520
and what happens is that the simulator

1196
00:49:09,520 --> 00:49:11,760
in the security proof programs the crs

1197
00:49:11,760 --> 00:49:13,839
and hence once the programming is done

1198
00:49:13,839 --> 00:49:16,319
the simulation is entirely straight line

1199
00:49:16,319 --> 00:49:18,559
so we know that it suffices to build a

1200
00:49:18,559 --> 00:49:20,160
constant round fully submittable

1201
00:49:20,160 --> 00:49:22,319
simulatable coin flipping protocol which

1202
00:49:22,319 --> 00:49:24,160
helps us instantiate the common random

1203
00:49:24,160 --> 00:49:26,558
string

1204
00:49:26,720 --> 00:49:29,359
so let me describe the

1205
00:49:29,359 --> 00:49:30,720
setting of fully simulatable coin

1206
00:49:30,720 --> 00:49:32,800
tossing so we have a functionality which

1207
00:49:32,800 --> 00:49:34,800
is just returns a random string r to all

1208
00:49:34,800 --> 00:49:37,040
parties and a natural protocol template

1209
00:49:37,040 --> 00:49:38,720
for realizing this functionality is the

1210
00:49:38,720 --> 00:49:41,520
following so each party commits a sample

1211
00:49:41,520 --> 00:49:42,640
some random

1212
00:49:42,640 --> 00:49:44,480
string ri and sends a commitment to it

1213
00:49:44,480 --> 00:49:46,000
to all other parties

1214
00:49:46,000 --> 00:49:48,240
then each party broadcasts the opening

1215
00:49:48,240 --> 00:49:50,079
values to these commitments and proves

1216
00:49:50,079 --> 00:49:52,079
in zero knowledge that this opening

1217
00:49:52,079 --> 00:49:53,280
value is consistent with their

1218
00:49:53,280 --> 00:49:54,400
commitment

1219
00:49:54,400 --> 00:49:56,319
and if all the proofs verify each party

1220
00:49:56,319 --> 00:49:59,280
outputs the xor of all the open values

1221
00:49:59,280 --> 00:50:01,200
now in the constant round setting

1222
00:50:01,200 --> 00:50:03,200
uh we need this first round to be a

1223
00:50:03,200 --> 00:50:05,440
multi-party constant on extractable

1224
00:50:05,440 --> 00:50:07,839
commitment and the zero knowledge proofs

1225
00:50:07,839 --> 00:50:09,520
should also be multi-party constant on

1226
00:50:09,520 --> 00:50:11,119
zero knowledge groups

1227
00:50:11,119 --> 00:50:13,200
and the main challenge lies in uh

1228
00:50:13,200 --> 00:50:14,960
constructing this multi-party constant

1229
00:50:14,960 --> 00:50:17,599
on extractable commitment in the quantum

1230
00:50:17,599 --> 00:50:19,920
setting against quantum mechanisms and

1231
00:50:19,920 --> 00:50:22,400
once we have that we can uh get

1232
00:50:22,400 --> 00:50:24,000
multi-party constraint on zero knowledge

1233
00:50:24,000 --> 00:50:26,079
proofs from there on the extractable

1234
00:50:26,079 --> 00:50:27,280
commitments

1235
00:50:27,280 --> 00:50:28,960
so if we were just interested in

1236
00:50:28,960 --> 00:50:30,800
two-party setting there have been some

1237
00:50:30,800 --> 00:50:33,359
prior works which show how you can get a

1238
00:50:33,359 --> 00:50:35,280
non-rewinding no cloning extraction

1239
00:50:35,280 --> 00:50:37,359
technique and this is known in the

1240
00:50:37,359 --> 00:50:39,119
literature as a homomorphic trapdoor

1241
00:50:39,119 --> 00:50:41,680
paradigm so here we have a

1242
00:50:41,680 --> 00:50:43,280
committer and a receiver and we want to

1243
00:50:43,280 --> 00:50:44,960
create an extractable commitment where

1244
00:50:44,960 --> 00:50:47,440
extractor doesn't rewind that visit so

1245
00:50:47,440 --> 00:50:48,319
let me

1246
00:50:48,319 --> 00:50:49,920
give you a sketch of how the protocol

1247
00:50:49,920 --> 00:50:52,000
looks like so the committer samples are

1248
00:50:52,000 --> 00:50:53,760
effective

1249
00:50:53,760 --> 00:50:55,839
trap door and a lock value so this

1250
00:50:55,839 --> 00:50:58,000
protocol by the way makes use of fhe and

1251
00:50:58,000 --> 00:51:00,880
compute and compare offer station so uh

1252
00:51:00,880 --> 00:51:02,880
just keep that in mind so this is the

1253
00:51:02,880 --> 00:51:04,880
first step and then as a second step the

1254
00:51:04,880 --> 00:51:06,960
committee computes an encryption of the

1255
00:51:06,960 --> 00:51:09,520
trapdoor fh encryption of the trapdoor

1256
00:51:09,520 --> 00:51:11,040
and then it prepares this very special

1257
00:51:11,040 --> 00:51:13,280
computer and compare program which has

1258
00:51:13,280 --> 00:51:15,200
the fhe decryption circuit hard coded

1259
00:51:15,200 --> 00:51:17,839
within it and a target log value and the

1260
00:51:17,839 --> 00:51:19,599
output is the secret key and the message

1261
00:51:19,599 --> 00:51:22,720
so if inside this pro so if you feed an

1262
00:51:22,720 --> 00:51:25,040
encrypted trap door to encrypted lock to

1263
00:51:25,040 --> 00:51:27,040
this computer and compare program

1264
00:51:27,040 --> 00:51:28,800
then what you get in as the output is

1265
00:51:28,800 --> 00:51:30,640
the message and secret key otherwise you

1266
00:51:30,640 --> 00:51:32,160
get bought

1267
00:51:32,160 --> 00:51:35,200
so uh committee obfuscates this program

1268
00:51:35,200 --> 00:51:37,200
and sends over the triplet consisting of

1269
00:51:37,200 --> 00:51:39,119
public key encrypted trapdoor and offers

1270
00:51:39,119 --> 00:51:41,200
kitted program to the receiver then in

1271
00:51:41,200 --> 00:51:42,640
the second round receiver has to take a

1272
00:51:42,640 --> 00:51:45,359
guess at what the trap door is

1273
00:51:45,359 --> 00:51:46,480
and if the guess is correct the

1274
00:51:46,480 --> 00:51:48,240
commander returns the lock otherwise it

1275
00:51:48,240 --> 00:51:49,520
returns bought

1276
00:51:49,520 --> 00:51:51,520
so naturally a real world receiver

1277
00:51:51,520 --> 00:51:53,200
cannot guess what the trapdoor is in the

1278
00:51:53,200 --> 00:51:55,280
second round and therefore the lock will

1279
00:51:55,280 --> 00:51:57,680
be hidden from its view and

1280
00:51:57,680 --> 00:51:58,800
hence the

1281
00:51:58,800 --> 00:52:00,319
compute and compare program will hide

1282
00:52:00,319 --> 00:52:02,160
the message

1283
00:52:02,160 --> 00:52:04,480
now an extractor which has non-black box

1284
00:52:04,480 --> 00:52:05,440
access

1285
00:52:05,440 --> 00:52:06,960
so by the way this simulation technique

1286
00:52:06,960 --> 00:52:08,960
makes use of non-black box techniques so

1287
00:52:08,960 --> 00:52:10,800
it ha we assume that the extractor has

1288
00:52:10,800 --> 00:52:12,880
access to the code of the addresses

1289
00:52:12,880 --> 00:52:15,440
so x an extractor which has x non-black

1290
00:52:15,440 --> 00:52:17,599
box access to the committer

1291
00:52:17,599 --> 00:52:20,480
can uh get the same triplet

1292
00:52:20,480 --> 00:52:22,079
like a real world receiver it cannot

1293
00:52:22,079 --> 00:52:24,480
guess at what the trapdoor is but what

1294
00:52:24,480 --> 00:52:26,480
it can do is run the sports step of the

1295
00:52:26,480 --> 00:52:28,640
committee under the hood of

1296
00:52:28,640 --> 00:52:29,760


1297
00:52:29,760 --> 00:52:32,000
so it can just supply the encrypted trap

1298
00:52:32,000 --> 00:52:33,040
door

1299
00:52:33,040 --> 00:52:35,599
under the hood of fhe and evaluate this

1300
00:52:35,599 --> 00:52:38,880
fourth round and get out the third round

1301
00:52:38,880 --> 00:52:40,480
message which is indeed the encrypted

1302
00:52:40,480 --> 00:52:42,800
log because under the hold of fhe the

1303
00:52:42,800 --> 00:52:45,599
guess was indeed correct

1304
00:52:45,599 --> 00:52:47,680
and once it has that it can feed it into

1305
00:52:47,680 --> 00:52:49,599
the compute and compare program

1306
00:52:49,599 --> 00:52:51,280
to get out the secret key and the

1307
00:52:51,280 --> 00:52:53,200
message and now it has successfully

1308
00:52:53,200 --> 00:52:54,960
extracted the message

1309
00:52:54,960 --> 00:52:57,200
now we can try extending this technique

1310
00:52:57,200 --> 00:52:58,720
to the multi-party setting where we have

1311
00:52:58,720 --> 00:53:00,400
multiple committees which we are

1312
00:53:00,400 --> 00:53:01,599
interested in

1313
00:53:01,599 --> 00:53:03,280
but it runs into some issues so the

1314
00:53:03,280 --> 00:53:04,559
extractor gets

1315
00:53:04,559 --> 00:53:06,400
two triplets of public key encrypted

1316
00:53:06,400 --> 00:53:07,839
trapdoor and the compute and compare

1317
00:53:07,839 --> 00:53:09,040
program

1318
00:53:09,040 --> 00:53:10,319
but

1319
00:53:10,319 --> 00:53:13,359
it's unclear how to evaluate this

1320
00:53:13,359 --> 00:53:17,040
guessing step in one go

1321
00:53:18,079 --> 00:53:20,880
so the issue is basically that

1322
00:53:20,880 --> 00:53:23,119
the extractor has only one shot to

1323
00:53:23,119 --> 00:53:25,520
evaluate that was it and in one shot it

1324
00:53:25,520 --> 00:53:28,000
has to do this fhe validation but the

1325
00:53:28,000 --> 00:53:30,640
trapdoors that the extractor has are

1326
00:53:30,640 --> 00:53:32,000
encrypted under

1327
00:53:32,000 --> 00:53:34,400
independently generated public keys pk1

1328
00:53:34,400 --> 00:53:36,480
pk2

1329
00:53:36,480 --> 00:53:38,240
so it's unclear how to do this

1330
00:53:38,240 --> 00:53:41,760
homomorphic evaluation in one shot

1331
00:53:41,760 --> 00:53:43,680
so we note that there is this notion of

1332
00:53:43,680 --> 00:53:45,599
multi-key fh in the literature which is

1333
00:53:45,599 --> 00:53:47,280
a natural generalization of single

1334
00:53:47,280 --> 00:53:49,760
client effigy now here we have multiple

1335
00:53:49,760 --> 00:53:51,440
clients each with their public secret

1336
00:53:51,440 --> 00:53:53,440
keypads and their inputs they can

1337
00:53:53,440 --> 00:53:55,680
encrypt these inputs

1338
00:53:55,680 --> 00:53:57,599
using their public key send it to the

1339
00:53:57,599 --> 00:53:59,760
server server can then do a homomorphic

1340
00:53:59,760 --> 00:54:02,319
evaluation of the cipher text under the

1341
00:54:02,319 --> 00:54:04,559
joined public key of all the clients

1342
00:54:04,559 --> 00:54:06,240
and then send out cipher text to all

1343
00:54:06,240 --> 00:54:09,280
these parties ciphered these clients

1344
00:54:09,280 --> 00:54:11,440
using the secret key can locally decrypt

1345
00:54:11,440 --> 00:54:14,160
this cipher text and compute what is

1346
00:54:14,160 --> 00:54:16,079
known as a partial decryption

1347
00:54:16,079 --> 00:54:19,440
now the crucial property is that the

1348
00:54:19,440 --> 00:54:21,440
these partial decryptions add up to the

1349
00:54:21,440 --> 00:54:24,240
output of the actual function

1350
00:54:24,240 --> 00:54:26,480
so in our paper we

1351
00:54:26,480 --> 00:54:29,520
since our adversary is quantum we need a

1352
00:54:29,520 --> 00:54:31,200
multi-key fhe scheme which works for

1353
00:54:31,200 --> 00:54:33,680
quantum circuits and we construct that

1354
00:54:33,680 --> 00:54:36,160
by combining single key fhe schemes for

1355
00:54:36,160 --> 00:54:38,400
quantum circuits and multi-key fhe

1356
00:54:38,400 --> 00:54:40,160
schemes for classical circuits which are

1357
00:54:40,160 --> 00:54:42,240
already present in the literature we you

1358
00:54:42,240 --> 00:54:44,559
combine these two to create multi kfh

1359
00:54:44,559 --> 00:54:48,000
scheme for evaluating quantum circuits

1360
00:54:48,000 --> 00:54:51,119
so once we have this tool we

1361
00:54:51,119 --> 00:54:53,119
directly plug this uh

1362
00:54:53,119 --> 00:54:55,920
tool in our fhe validation step now we

1363
00:54:55,920 --> 00:54:58,079
can just replace this fhe validation

1364
00:54:58,079 --> 00:54:59,920
with a multi-key fhe validation

1365
00:54:59,920 --> 00:55:01,359
supporting evaluation of quantum

1366
00:55:01,359 --> 00:55:02,400
circuits

1367
00:55:02,400 --> 00:55:05,760
and feed in the two encrypted trapdoors

1368
00:55:05,760 --> 00:55:08,480
so now what we have is encrypted locks

1369
00:55:08,480 --> 00:55:10,480
so now we we are

1370
00:55:10,480 --> 00:55:12,480
in a better position than before but the

1371
00:55:12,480 --> 00:55:14,799
problem is not completely solved because

1372
00:55:14,799 --> 00:55:17,040
the encrypted locks are under joint

1373
00:55:17,040 --> 00:55:19,040
public keys and to make use of the

1374
00:55:19,040 --> 00:55:21,280
compute and compare program we have to

1375
00:55:21,280 --> 00:55:23,280
peel off the layers of public key i

1376
00:55:23,280 --> 00:55:25,040
won't be able to go into the details of

1377
00:55:25,040 --> 00:55:28,079
how we do that feeling but uh we make

1378
00:55:28,079 --> 00:55:29,200
use of the

1379
00:55:29,200 --> 00:55:30,960
spooky property that i mentioned earlier

1380
00:55:30,960 --> 00:55:31,839
that

1381
00:55:31,839 --> 00:55:34,160
partial decryptions add up to the output

1382
00:55:34,160 --> 00:55:36,000
of the function to peel off the public

1383
00:55:36,000 --> 00:55:38,160
key layers and then feed them into the

1384
00:55:38,160 --> 00:55:41,040
obfuscated program to finally get out

1385
00:55:41,040 --> 00:55:43,440
the secret keys both secret keys and

1386
00:55:43,440 --> 00:55:46,319
both messages m1m2

1387
00:55:46,319 --> 00:55:49,280
so i'll just um not go over the slide in

1388
00:55:49,280 --> 00:55:50,880
the interest of time

1389
00:55:50,880 --> 00:55:53,200
yeah so this helps us finally construct

1390
00:55:53,200 --> 00:55:55,200
this constant on multi-party extractable

1391
00:55:55,200 --> 00:55:57,040
commitment secure against quantum

1392
00:55:57,040 --> 00:55:58,480
adversaries

1393
00:55:58,480 --> 00:55:59,200
and

1394
00:55:59,200 --> 00:56:00,880
using existing techniques we can

1395
00:56:00,880 --> 00:56:04,079
directly use extractable commitments to

1396
00:56:04,079 --> 00:56:05,680
uh construct constant round zero

1397
00:56:05,680 --> 00:56:07,200
knowledge proofs

1398
00:56:07,200 --> 00:56:09,440
so we note that uh uh just having

1399
00:56:09,440 --> 00:56:11,040
extractable commitments doesn't solve

1400
00:56:11,040 --> 00:56:13,520
the entire issue because uh

1401
00:56:13,520 --> 00:56:15,599
an adversary might be able to mall an

1402
00:56:15,599 --> 00:56:18,000
extractable commitment so what we end up

1403
00:56:18,000 --> 00:56:20,400
also needing is uh non-malleable

1404
00:56:20,400 --> 00:56:22,799
commitments uh which are constant rounds

1405
00:56:22,799 --> 00:56:25,119
so in this paper we combine the erasure

1406
00:56:25,119 --> 00:56:27,520
channel based approach of constructing

1407
00:56:27,520 --> 00:56:30,720
constant on uh commitments

1408
00:56:30,720 --> 00:56:32,559
with tag amplification technique to

1409
00:56:32,559 --> 00:56:34,319
construct post quantum constraints on

1410
00:56:34,319 --> 00:56:36,480
non-malleable commitments

1411
00:56:36,480 --> 00:56:38,400
and we plug this into our final coin

1412
00:56:38,400 --> 00:56:40,160
tossing protocol

1413
00:56:40,160 --> 00:56:43,040
to ensure non-malibity so our final

1414
00:56:43,040 --> 00:56:44,160
results look something like the

1415
00:56:44,160 --> 00:56:46,559
following so we uh

1416
00:56:46,559 --> 00:56:48,319
show that there exists a constant on

1417
00:56:48,319 --> 00:56:50,400
classical mpc protocol so there is no

1418
00:56:50,400 --> 00:56:51,920
quantum communication happening inside

1419
00:56:51,920 --> 00:56:54,000
the protocol which is secure against

1420
00:56:54,000 --> 00:56:55,839
quantum polynomial time adversaries in

1421
00:56:55,839 --> 00:56:58,240
the plane model assuming an lwe based

1422
00:56:58,240 --> 00:57:00,400
circular security assumption and this

1423
00:57:00,400 --> 00:57:02,079
assumption is used in order to create

1424
00:57:02,079 --> 00:57:04,319
the quantum multi-key fhe scheme that i

1425
00:57:04,319 --> 00:57:06,640
talked about earlier and

1426
00:57:06,640 --> 00:57:08,720
we use that in turn to create constant

1427
00:57:08,720 --> 00:57:10,720
on parallel extractable commitment and

1428
00:57:10,720 --> 00:57:12,720
then constant on parallel zero knowledge

1429
00:57:12,720 --> 00:57:14,799
which are both secure against quantum

1430
00:57:14,799 --> 00:57:17,040
mechanics the second assumption that we

1431
00:57:17,040 --> 00:57:19,040
rely on is a mildly super polynomial

1432
00:57:19,040 --> 00:57:20,880
hardness of lw

1433
00:57:20,880 --> 00:57:21,760
uh

1434
00:57:21,760 --> 00:57:23,440
and we use that to create post quantum

1435
00:57:23,440 --> 00:57:27,640
constant or non-mileable commitments

1436
00:57:27,680 --> 00:57:29,839
thanks alice

1437
00:57:29,839 --> 00:57:32,319
thank you

1438
00:57:35,839 --> 00:57:40,119
i think we have time for one question

1439
00:57:42,079 --> 00:57:44,400
um

1440
00:57:44,400 --> 00:57:47,760
is there any questions online

1441
00:57:49,359 --> 00:57:50,160
um

1442
00:57:50,160 --> 00:57:52,559
otherwise maybe i can um i can ask one

1443
00:57:52,559 --> 00:57:55,359
question so um

1444
00:57:55,359 --> 00:57:57,359
sorry if it's not not about your work

1445
00:57:57,359 --> 00:57:59,040
but some something you you use as a

1446
00:57:59,040 --> 00:58:01,839
component um so how exactly enters the

1447
00:58:01,839 --> 00:58:04,559
um the sub exponential hardness of lwe

1448
00:58:04,559 --> 00:58:06,559
in your

1449
00:58:06,559 --> 00:58:08,079
in the protocol so how how do you make

1450
00:58:08,079 --> 00:58:09,520
use of it

1451
00:58:09,520 --> 00:58:10,240
um

1452
00:58:10,240 --> 00:58:12,319
so we assume super polynomial hardness

1453
00:58:12,319 --> 00:58:14,400
uh superpower you know

1454
00:58:14,400 --> 00:58:16,720
modulus noise are you referring to this

1455
00:58:16,720 --> 00:58:17,520
uh

1456
00:58:17,520 --> 00:58:19,200
last assumption

1457
00:58:19,200 --> 00:58:21,440
yeah there might be super polymer so we

1458
00:58:21,440 --> 00:58:23,440
need this to uh create constant on

1459
00:58:23,440 --> 00:58:26,160
normal level commitments so basically

1460
00:58:26,160 --> 00:58:28,480
we create multiple hardness levels to

1461
00:58:28,480 --> 00:58:30,319
instantiate this irregular channel based

1462
00:58:30,319 --> 00:58:31,280
approach

1463
00:58:31,280 --> 00:58:32,000
so

1464
00:58:32,000 --> 00:58:32,799
uh

1465
00:58:32,799 --> 00:58:35,440
in this work by kurana and sahai

1466
00:58:35,440 --> 00:58:38,000
so basically what happens is you create

1467
00:58:38,000 --> 00:58:40,640
an eraser channel between each uh pair

1468
00:58:40,640 --> 00:58:42,640
of players and this aeration channel is

1469
00:58:42,640 --> 00:58:44,240
created using a secure function

1470
00:58:44,240 --> 00:58:47,200
evaluation and by

1471
00:58:47,200 --> 00:58:49,599
having different levels of security of

1472
00:58:49,599 --> 00:58:52,079
each secure function evaluation you have

1473
00:58:52,079 --> 00:58:54,400
different eraser channel security levels

1474
00:58:54,400 --> 00:58:56,319
and that helps you create

1475
00:58:56,319 --> 00:58:57,920
a non-malleable

1476
00:58:57,920 --> 00:59:00,720
uh non-malleability between each

1477
00:59:00,720 --> 00:59:02,319
communication channel

1478
00:59:02,319 --> 00:59:03,520
okay

1479
00:59:03,520 --> 00:59:05,839
and yeah so that is needed in order to

1480
00:59:05,839 --> 00:59:07,599
create these

1481
00:59:07,599 --> 00:59:10,079
multiple hardness levels

1482
00:59:10,079 --> 00:59:11,520
thanks

1483
00:59:11,520 --> 00:59:12,960
um

1484
00:59:12,960 --> 00:59:15,599
okay um i think we should should write a

1485
00:59:15,599 --> 00:59:17,040
wrap up

1486
00:59:17,040 --> 00:59:18,400
let's thank all the speakers of the

1487
00:59:18,400 --> 00:59:22,040
session one more time

