1
00:00:01,360 --> 00:00:04,400
hello my name is bayou lee

2
00:00:04,400 --> 00:00:06,879
and i will be talking about our paper on

3
00:00:06,879 --> 00:00:09,599
the security of homomorphic encryption

4
00:00:09,599 --> 00:00:11,920
on approximate numbers

5
00:00:11,920 --> 00:00:14,160
this is a joint work with my advisor

6
00:00:14,160 --> 00:00:17,639
danielle mcchancho

7
00:00:18,320 --> 00:00:21,520
so here is a brief overview of this talk

8
00:00:21,520 --> 00:00:23,359
i will be first talking about passive

9
00:00:23,359 --> 00:00:25,359
security model of approximate

10
00:00:25,359 --> 00:00:27,519
homomorphic encryptions

11
00:00:27,519 --> 00:00:30,320
i will introduce a new security notion

12
00:00:30,320 --> 00:00:32,479
in the cpd security

13
00:00:32,479 --> 00:00:34,880
to formalize passive attackers against

14
00:00:34,880 --> 00:00:37,600
approximate homomorphic encryptions

15
00:00:37,600 --> 00:00:40,320
i will compare this new security notion

16
00:00:40,320 --> 00:00:44,079
with the classic in the cpa security

17
00:00:44,079 --> 00:00:46,480
i will then present a passive key

18
00:00:46,480 --> 00:00:50,320
recovery attack against the ckks scheme

19
00:00:50,320 --> 00:00:53,039
this attack is within the cpa-d security

20
00:00:53,039 --> 00:00:54,000
model

21
00:00:54,000 --> 00:00:56,800
it is both efficient and effective

22
00:00:56,800 --> 00:00:59,039
against most of the previous versions of

23
00:00:59,039 --> 00:01:02,160
the open source fhe libraries

24
00:01:02,160 --> 00:01:04,400
and i will also be talk briefly talking

25
00:01:04,400 --> 00:01:06,000
about countermeasures against this

26
00:01:06,000 --> 00:01:08,400
attack

27
00:01:09,600 --> 00:01:11,600
so this talk is about homomorphic

28
00:01:11,600 --> 00:01:14,400
encryption which is a crypto primitive

29
00:01:14,400 --> 00:01:17,840
allows you to compute unencrypted data

30
00:01:17,840 --> 00:01:19,680
essentially fhe

31
00:01:19,680 --> 00:01:24,759
makes this the small diagram commute

32
00:01:26,000 --> 00:01:28,840
fha can be extremely useful for building

33
00:01:28,840 --> 00:01:31,280
privacy-preserving protocols

34
00:01:31,280 --> 00:01:33,360
and over the last several years we have

35
00:01:33,360 --> 00:01:36,159
seen a great progress in improving the

36
00:01:36,159 --> 00:01:39,360
efficiency of the fhe schemes

37
00:01:39,360 --> 00:01:42,560
now nowadays many services are providing

38
00:01:42,560 --> 00:01:46,720
their services using the fhe technology

39
00:01:46,720 --> 00:01:50,560
and one of the schemes the ckks game has

40
00:01:50,560 --> 00:01:52,880
become a very popular and serious

41
00:01:52,880 --> 00:01:57,119
candidate in many of these applications

42
00:01:59,360 --> 00:02:02,079
so what is the cks scheme it is a

43
00:02:02,079 --> 00:02:04,560
special kind of homomorphic encryption

44
00:02:04,560 --> 00:02:07,040
scheme it is an approximate homomorphic

45
00:02:07,040 --> 00:02:08,639
encryption scheme

46
00:02:08,639 --> 00:02:10,639
what this means is that

47
00:02:10,639 --> 00:02:12,800
the decryption function on an encryption

48
00:02:12,800 --> 00:02:14,080
of x

49
00:02:14,080 --> 00:02:17,040
does not retain x exactly but it rather

50
00:02:17,040 --> 00:02:20,239
it trains something close to x

51
00:02:20,239 --> 00:02:23,040
the scheme itself is instantiated based

52
00:02:23,040 --> 00:02:25,599
on standard lwe encryption

53
00:02:25,599 --> 00:02:27,440
where the raw decryption function

54
00:02:27,440 --> 00:02:29,680
computes an inner product

55
00:02:29,680 --> 00:02:31,360
between the secret key and the

56
00:02:31,360 --> 00:02:32,720
ciphertext

57
00:02:32,720 --> 00:02:35,040
the result is a noisy encoding of the

58
00:02:35,040 --> 00:02:36,959
plaintext x

59
00:02:36,959 --> 00:02:40,720
typically with the exact fg schemes you

60
00:02:40,720 --> 00:02:42,959
would need to apply an error correction

61
00:02:42,959 --> 00:02:46,319
code to extract the plaintext x

62
00:02:46,319 --> 00:02:49,120
the ckks game considered this noise as a

63
00:02:49,120 --> 00:02:51,760
sort of approximation error it does not

64
00:02:51,760 --> 00:02:54,000
do any error correction and instead the

65
00:02:54,000 --> 00:02:56,879
ckks game decodes the entire noise

66
00:02:56,879 --> 00:03:00,000
encoding of x into x prime that is only

67
00:03:00,000 --> 00:03:03,040
approximately equal to x

68
00:03:03,040 --> 00:03:05,200
in many of the applications especially

69
00:03:05,200 --> 00:03:07,920
these numerical competitions

70
00:03:07,920 --> 00:03:10,879
approximate result is sometimes are

71
00:03:10,879 --> 00:03:12,959
already acceptable

72
00:03:12,959 --> 00:03:15,680
and on the other on the upper hand by

73
00:03:15,680 --> 00:03:18,720
not doing any error correction the ckks

74
00:03:18,720 --> 00:03:21,360
game becomes very much more efficient

75
00:03:21,360 --> 00:03:24,000
compared to the standard exact hd

76
00:03:24,000 --> 00:03:25,519
schemes

77
00:03:25,519 --> 00:03:28,239
the ckks game has been implemented in

78
00:03:28,239 --> 00:03:30,959
many of the open source fhe libraries

79
00:03:30,959 --> 00:03:33,720
and it has been used in many of the

80
00:03:33,720 --> 00:03:35,440
privacy-preserving machine learning

81
00:03:35,440 --> 00:03:38,159
applications

82
00:03:39,440 --> 00:03:42,239
for security you can show that the ckks

83
00:03:42,239 --> 00:03:45,519
scheme is in the cpa secure based on

84
00:03:45,519 --> 00:03:47,599
standard lattice assumptions

85
00:03:47,599 --> 00:03:49,760
the proof is essentially the same as

86
00:03:49,760 --> 00:03:52,959
other iwa business scheme such as bjv

87
00:03:52,959 --> 00:03:54,720
bfv

88
00:03:54,720 --> 00:03:57,200
here the indica security is typically

89
00:03:57,200 --> 00:03:59,599
considered as the standard security

90
00:03:59,599 --> 00:04:02,400
notion for passive security

91
00:04:02,400 --> 00:04:03,519
so

92
00:04:03,519 --> 00:04:06,480
at this point you may we may

93
00:04:06,480 --> 00:04:09,360
intend to conclude that the ckks game is

94
00:04:09,360 --> 00:04:10,959
passively secure

95
00:04:10,959 --> 00:04:11,920
but

96
00:04:11,920 --> 00:04:14,159
we want to ask if that's really the case

97
00:04:14,159 --> 00:04:14,959
or

98
00:04:14,959 --> 00:04:18,160
maybe the real question is

99
00:04:18,160 --> 00:04:20,959
is in the cpa a suitable model to

100
00:04:20,959 --> 00:04:25,280
consider for approximate encryptions

101
00:04:25,520 --> 00:04:28,240
well to answer that question let's look

102
00:04:28,240 --> 00:04:30,320
at from a homomorphic encryption as a

103
00:04:30,320 --> 00:04:31,680
formal object

104
00:04:31,680 --> 00:04:33,520
so formally homomorphic encryption

105
00:04:33,520 --> 00:04:36,000
scheme consists of four algorithms

106
00:04:36,000 --> 00:04:38,160
you can use the k generation algorithm

107
00:04:38,160 --> 00:04:41,360
to generate set of keys

108
00:04:41,360 --> 00:04:44,400
the party was the public key can evolve

109
00:04:44,400 --> 00:04:47,280
or can encrypt his message

110
00:04:47,280 --> 00:04:49,919
and another party who is

111
00:04:49,919 --> 00:04:51,759
with the evaluation key can

112
00:04:51,759 --> 00:04:54,720
homomorphically evaluate her circuit and

113
00:04:54,720 --> 00:04:57,840
to get another cipher text

114
00:04:57,840 --> 00:05:01,120
finally the party the secret key holders

115
00:05:01,120 --> 00:05:03,440
can decrypt the final cipher text to

116
00:05:03,440 --> 00:05:07,280
learn the final computation result

117
00:05:08,080 --> 00:05:10,240
for exact schemes the very first

118
00:05:10,240 --> 00:05:12,960
requirement is that the scheme must be

119
00:05:12,960 --> 00:05:14,160
correct

120
00:05:14,160 --> 00:05:15,360
this is

121
00:05:15,360 --> 00:05:17,680
it this essentially requires that the

122
00:05:17,680 --> 00:05:19,680
decryption of a homomorphically

123
00:05:19,680 --> 00:05:22,320
evaluated ciphertext must return

124
00:05:22,320 --> 00:05:24,960
something as if the competition is

125
00:05:24,960 --> 00:05:29,280
carried out in clear implant text

126
00:05:30,080 --> 00:05:32,639
for security we consider passive

127
00:05:32,639 --> 00:05:35,919
attackers for fhe schemes

128
00:05:35,919 --> 00:05:37,520
for example this

129
00:05:37,520 --> 00:05:40,639
the sunglasses guy in this picture

130
00:05:40,639 --> 00:05:43,280
such attacker can influence legit users

131
00:05:43,280 --> 00:05:46,080
on their choices of plain text messages

132
00:05:46,080 --> 00:05:48,160
as well as on their choices of

133
00:05:48,160 --> 00:05:50,960
homomorphic competitions

134
00:05:50,960 --> 00:05:53,600
this passive attacker can also even drop

135
00:05:53,600 --> 00:05:55,440
the communication lines to learn the

136
00:05:55,440 --> 00:05:57,199
cipher taxes

137
00:05:57,199 --> 00:05:59,840
and a very important fact is that

138
00:05:59,840 --> 00:06:02,000
this passive attacker

139
00:06:02,000 --> 00:06:04,319
is also capable of observing the final

140
00:06:04,319 --> 00:06:07,440
competition result in plain text

141
00:06:07,440 --> 00:06:10,560
for example in this picture our favorite

142
00:06:10,560 --> 00:06:13,360
heroes alice and bob communicate through

143
00:06:13,360 --> 00:06:15,520
this encrypted line

144
00:06:15,520 --> 00:06:17,840
at the end of the communication bob

145
00:06:17,840 --> 00:06:19,360
decrypts

146
00:06:19,360 --> 00:06:20,960
alice's message

147
00:06:20,960 --> 00:06:23,680
and at that point bob's behavior may

148
00:06:23,680 --> 00:06:26,479
depend on the decryption result

149
00:06:26,479 --> 00:06:28,000
and our

150
00:06:28,000 --> 00:06:29,600
and this passive attacker this

151
00:06:29,600 --> 00:06:31,759
sunglasses guy can observe bob's

152
00:06:31,759 --> 00:06:34,000
behavior to learn the final competition

153
00:06:34,000 --> 00:06:36,800
result including plain text

154
00:06:36,800 --> 00:06:40,000
so this is a very crucial fact that we

155
00:06:40,000 --> 00:06:42,479
must consider passive attackers who can

156
00:06:42,479 --> 00:06:45,120
observe the final computation result in

157
00:06:45,120 --> 00:06:48,440
plain text

158
00:06:48,960 --> 00:06:51,840
for exact schemes to formalize such a

159
00:06:51,840 --> 00:06:54,319
passive attacker we typically end up

160
00:06:54,319 --> 00:06:55,360
with the

161
00:06:55,360 --> 00:06:57,560
in the cpa security or the

162
00:06:57,560 --> 00:06:59,280
indistinguishability on the chosen

163
00:06:59,280 --> 00:07:02,639
plateaux attack

164
00:07:02,639 --> 00:07:05,360
such security can be defined by this

165
00:07:05,360 --> 00:07:07,759
industrial security game and assume

166
00:07:07,759 --> 00:07:10,080
everybody is familiar with this classic

167
00:07:10,080 --> 00:07:12,240
definition so i will skip this

168
00:07:12,240 --> 00:07:13,599
definition

169
00:07:13,599 --> 00:07:15,919
but what i really want to emphasize is

170
00:07:15,919 --> 00:07:17,120
that

171
00:07:17,120 --> 00:07:19,919
the formulation of in the cpu security

172
00:07:19,919 --> 00:07:22,400
does not consider the decryption

173
00:07:22,400 --> 00:07:24,560
function

174
00:07:24,560 --> 00:07:26,319
it only concerns about the encryption

175
00:07:26,319 --> 00:07:28,400
and evaluation function of the scheme

176
00:07:28,400 --> 00:07:30,479
and this is totally okay

177
00:07:30,479 --> 00:07:33,360
because for exact schemes the adversary

178
00:07:33,360 --> 00:07:36,400
already knows the decryption result

179
00:07:36,400 --> 00:07:39,120
due to the crackiness requirement

180
00:07:39,120 --> 00:07:41,520
but such correctness requirement is not

181
00:07:41,520 --> 00:07:43,759
satisfied by approximate encryption

182
00:07:43,759 --> 00:07:44,879
schemes

183
00:07:44,879 --> 00:07:47,520
so this brings up a question whether we

184
00:07:47,520 --> 00:07:49,759
should incorporate the decryption

185
00:07:49,759 --> 00:07:52,479
function into the security definition to

186
00:07:52,479 --> 00:07:54,800
capture all the powers of a passive

187
00:07:54,800 --> 00:07:57,280
attacker

188
00:07:57,759 --> 00:08:00,879
to do this uh we introduced a new

189
00:08:00,879 --> 00:08:03,599
security notion that in the cpd security

190
00:08:03,599 --> 00:08:06,000
or in the cpa with a special to

191
00:08:06,000 --> 00:08:08,960
corporate oracle security to formalize

192
00:08:08,960 --> 00:08:10,879
this passive attackers against

193
00:08:10,879 --> 00:08:12,639
approximate homomorphic encryption

194
00:08:12,639 --> 00:08:14,560
schemes

195
00:08:14,560 --> 00:08:17,560
this security is defined by a standard

196
00:08:17,560 --> 00:08:20,080
indistinguishability security game where

197
00:08:20,080 --> 00:08:22,879
the adversary is given access to three

198
00:08:22,879 --> 00:08:24,560
c4 oracles

199
00:08:24,560 --> 00:08:26,720
the encryption oracle the evaluation

200
00:08:26,720 --> 00:08:30,000
oracle and the special decryption oracle

201
00:08:30,000 --> 00:08:32,399
the encryption oracle is a standard left

202
00:08:32,399 --> 00:08:35,279
and red word oracle that takes a pair of

203
00:08:35,279 --> 00:08:37,599
messages from the adversary

204
00:08:37,599 --> 00:08:40,159
and it encrypts one of the message

205
00:08:40,159 --> 00:08:43,360
depending on a secret secret bid fee

206
00:08:43,360 --> 00:08:45,839
return the cipher tags to the to the

207
00:08:45,839 --> 00:08:48,880
adversary and stores both the plant tags

208
00:08:48,880 --> 00:08:51,279
may apply taxes and as well as the

209
00:08:51,279 --> 00:08:54,320
ciphertext into the state

210
00:08:54,320 --> 00:08:56,800
this evaluation article h is also

211
00:08:56,800 --> 00:08:59,120
standard it takes a circuit and the

212
00:08:59,120 --> 00:09:02,080
sequence of indexes from the adversary

213
00:09:02,080 --> 00:09:05,519
it picks the tuples index by the

214
00:09:05,519 --> 00:09:07,680
indexes in j

215
00:09:07,680 --> 00:09:08,640
and

216
00:09:08,640 --> 00:09:11,200
homomorphically evaluate the circuits on

217
00:09:11,200 --> 00:09:14,160
the separate axis indexed by j return

218
00:09:14,160 --> 00:09:16,160
the final cipher text to the to the

219
00:09:16,160 --> 00:09:18,880
adversary and stores the plaintext

220
00:09:18,880 --> 00:09:20,480
computation result

221
00:09:20,480 --> 00:09:22,800
in both left and right word as well as

222
00:09:22,800 --> 00:09:26,160
the final cipher text into the state

223
00:09:26,160 --> 00:09:29,120
the decryption oracle is very special

224
00:09:29,120 --> 00:09:31,839
it takes only an index from the

225
00:09:31,839 --> 00:09:33,680
adversary

226
00:09:33,680 --> 00:09:34,839
it picks

227
00:09:34,839 --> 00:09:37,760
the the tuple corresponding to this

228
00:09:37,760 --> 00:09:39,600
index from the state

229
00:09:39,600 --> 00:09:42,080
compare the plain text messages in this

230
00:09:42,080 --> 00:09:43,040
pair

231
00:09:43,040 --> 00:09:45,200
if these two plain text messages are

232
00:09:45,200 --> 00:09:46,080
equal

233
00:09:46,080 --> 00:09:47,920
then this decryption oracle simply

234
00:09:47,920 --> 00:09:49,680
decrypts the

235
00:09:49,680 --> 00:09:52,399
js cipher text and return the decryption

236
00:09:52,399 --> 00:09:55,279
result to the average to the adversary

237
00:09:55,279 --> 00:09:57,519
otherwise this decryption oracle just

238
00:09:57,519 --> 00:09:59,839
retain an error symbol well this is

239
00:09:59,839 --> 00:10:01,360
pretty technique

240
00:10:01,360 --> 00:10:02,480
but

241
00:10:02,480 --> 00:10:05,360
all this definition wants to do is to

242
00:10:05,360 --> 00:10:06,480
formalize

243
00:10:06,480 --> 00:10:11,519
at a passive adversary who can um

244
00:10:11,519 --> 00:10:14,399
who can encrypt and evaluate

245
00:10:14,399 --> 00:10:16,079
um

246
00:10:16,079 --> 00:10:18,399
who can encrypt messages honestly and

247
00:10:18,399 --> 00:10:21,279
who can also evaluate uh several taxes

248
00:10:21,279 --> 00:10:23,600
honestly and who can also

249
00:10:23,600 --> 00:10:25,600
access or observe the

250
00:10:25,600 --> 00:10:27,440
the decryption result on honestly

251
00:10:27,440 --> 00:10:29,440
generated separate text

252
00:10:29,440 --> 00:10:32,079
so this decryption oracle is very

253
00:10:32,079 --> 00:10:34,560
different from the decryption oracle you

254
00:10:34,560 --> 00:10:36,480
would typically see

255
00:10:36,480 --> 00:10:38,880
in active security definitions such as

256
00:10:38,880 --> 00:10:42,160
cca or says aa2 because here this

257
00:10:42,160 --> 00:10:44,560
decryption oracle can only decrypt

258
00:10:44,560 --> 00:10:46,480
several taxes that are honestly

259
00:10:46,480 --> 00:10:48,160
generated by

260
00:10:48,160 --> 00:10:49,279
the

261
00:10:49,279 --> 00:10:51,680
encryption and evaluation oracles

262
00:10:51,680 --> 00:10:54,079
it cannot decrypt the cipher text

263
00:10:54,079 --> 00:10:57,279
arbitrarily chosen bad adversary so

264
00:10:57,279 --> 00:10:59,519
this oracle does not give the adversary

265
00:10:59,519 --> 00:11:00,800
any

266
00:11:00,800 --> 00:11:05,120
any power to mount active attacks

267
00:11:06,959 --> 00:11:08,959
so with this definition the very first

268
00:11:08,959 --> 00:11:11,600
thing we want to do is do a sanity check

269
00:11:11,600 --> 00:11:14,079
we want to make sure that we don't give

270
00:11:14,079 --> 00:11:17,519
unnecessary power to the adversary well

271
00:11:17,519 --> 00:11:20,320
or formally we want to

272
00:11:20,320 --> 00:11:22,480
we we can check we can show that for

273
00:11:22,480 --> 00:11:25,440
exact uh homomorphic encryption schemes

274
00:11:25,440 --> 00:11:28,000
this new security definition the indus

275
00:11:28,000 --> 00:11:31,200
apd security is equivalent to the

276
00:11:31,200 --> 00:11:33,600
classic in the cpu security

277
00:11:33,600 --> 00:11:35,920
so we don't really give an

278
00:11:35,920 --> 00:11:40,240
any unnecessary power to the adversary

279
00:11:40,800 --> 00:11:43,040
but for approximate schemes

280
00:11:43,040 --> 00:11:45,360
we can show that this in the cpd

281
00:11:45,360 --> 00:11:48,399
security is strictly stronger than the

282
00:11:48,399 --> 00:11:51,279
classic in this api security and we will

283
00:11:51,279 --> 00:11:54,320
show this by showing a k recovery attack

284
00:11:54,320 --> 00:11:57,279
against the approximate schemes to kkks

285
00:11:57,279 --> 00:12:00,639
in the cpd model

286
00:12:00,720 --> 00:12:03,120
before i go into the details of this k

287
00:12:03,120 --> 00:12:05,920
recovery attack let me summarize the

288
00:12:05,920 --> 00:12:08,399
theoretical result we have we obtained

289
00:12:08,399 --> 00:12:10,720
in our paper

290
00:12:10,720 --> 00:12:12,560
we showed that

291
00:12:12,560 --> 00:12:15,360
for exact schemes our new security

292
00:12:15,360 --> 00:12:18,240
definition the industry security is

293
00:12:18,240 --> 00:12:20,480
equivalent to the classic in the cpa

294
00:12:20,480 --> 00:12:21,760
security

295
00:12:21,760 --> 00:12:24,399
this shows that our newest definition is

296
00:12:24,399 --> 00:12:27,200
a conservative extension of the ndcp

297
00:12:27,200 --> 00:12:29,440
security

298
00:12:29,440 --> 00:12:32,320
for approximate schemes we can show that

299
00:12:32,320 --> 00:12:34,639
there exists a strict hierarchy of

300
00:12:34,639 --> 00:12:37,279
security violence of the indicated

301
00:12:37,279 --> 00:12:39,360
security based on the number of

302
00:12:39,360 --> 00:12:41,200
decryption queries allowed by the

303
00:12:41,200 --> 00:12:42,880
anniversary

304
00:12:42,880 --> 00:12:45,279
we can show that the most the

305
00:12:45,279 --> 00:12:48,560
unrestricted in the cped security is

306
00:12:48,560 --> 00:12:50,880
separated from the queue in the cpd

307
00:12:50,880 --> 00:12:54,079
security where the adversary is allowed

308
00:12:54,079 --> 00:12:54,880
to

309
00:12:54,880 --> 00:12:56,800
to make only

310
00:12:56,800 --> 00:12:58,720
a period under the number of decryption

311
00:12:58,720 --> 00:13:00,320
quarries

312
00:13:00,320 --> 00:13:02,320
and this separation goes all the way

313
00:13:02,320 --> 00:13:04,800
down to the variant in which the

314
00:13:04,800 --> 00:13:06,880
adversary is not allowed to make any

315
00:13:06,880 --> 00:13:09,120
decryption query or the same as the

316
00:13:09,120 --> 00:13:12,959
classic in the cpa security

317
00:13:13,120 --> 00:13:16,079
we also showed that in terms of query

318
00:13:16,079 --> 00:13:17,360
orders

319
00:13:17,360 --> 00:13:19,600
the non-adaptive version of the industry

320
00:13:19,600 --> 00:13:23,120
pid security is separated from the fully

321
00:13:23,120 --> 00:13:26,000
adaptive or unrestricted in the cpid

322
00:13:26,000 --> 00:13:27,600
security

323
00:13:27,600 --> 00:13:30,000
we also defined a simulation base the

324
00:13:30,000 --> 00:13:33,600
cpa-d security and we showed that there

325
00:13:33,600 --> 00:13:36,240
also exists a strict hierarchy of

326
00:13:36,240 --> 00:13:39,360
simulation based in cpid security based

327
00:13:39,360 --> 00:13:42,880
on the number of decryption queries

328
00:13:42,880 --> 00:13:45,600
you can find the details of all this

329
00:13:45,600 --> 00:13:47,440
theoretical result in our paper on

330
00:13:47,440 --> 00:13:48,720
e-print

331
00:13:48,720 --> 00:13:51,920
so now let me present our key recovery

332
00:13:51,920 --> 00:13:54,399
attack against the ckks game

333
00:13:54,399 --> 00:13:57,120
so the ckks scheme is based on the on

334
00:13:57,120 --> 00:14:00,959
the w ring.wwe encryption and it is

335
00:14:00,959 --> 00:14:02,720
typically instantiated with a

336
00:14:02,720 --> 00:14:04,880
psychological ring of power of two

337
00:14:04,880 --> 00:14:06,720
orders

338
00:14:06,720 --> 00:14:09,360
in cks the secret key is a pair of

339
00:14:09,360 --> 00:14:10,800
polynomials

340
00:14:10,800 --> 00:14:13,360
and the ciphertext is typically also a

341
00:14:13,360 --> 00:14:14,839
pair of

342
00:14:14,839 --> 00:14:17,519
polynomials the raw decryption function

343
00:14:17,519 --> 00:14:20,639
in second case computes an inner product

344
00:14:20,639 --> 00:14:22,399
between the secret key and the

345
00:14:22,399 --> 00:14:24,480
ciphertext

346
00:14:24,480 --> 00:14:26,720
ckks applies

347
00:14:26,720 --> 00:14:28,800
a special encoding scheme based on the

348
00:14:28,800 --> 00:14:31,120
canonical inviting of the psychological

349
00:14:31,120 --> 00:14:32,079
ring

350
00:14:32,079 --> 00:14:34,079
the encoding function computes the

351
00:14:34,079 --> 00:14:36,560
inverse of the canonical in binding

352
00:14:36,560 --> 00:14:39,680
scaled it up and rounded to the nearest

353
00:14:39,680 --> 00:14:41,199
integers

354
00:14:41,199 --> 00:14:42,959
the decoding function

355
00:14:42,959 --> 00:14:45,279
first scales down a polynomial and

356
00:14:45,279 --> 00:14:47,839
applies this canonical inviting to get

357
00:14:47,839 --> 00:14:51,199
those complex vectors

358
00:14:51,680 --> 00:14:54,160
the the full encryption function and the

359
00:14:54,160 --> 00:14:56,480
full decryption function is standard as

360
00:14:56,480 --> 00:14:59,199
just a raw composition of the raw

361
00:14:59,199 --> 00:15:01,120
encryption or raw decryption function

362
00:15:01,120 --> 00:15:03,040
with the encoding or the decoding

363
00:15:03,040 --> 00:15:04,880
function

364
00:15:04,880 --> 00:15:08,560
what's really important here is that

365
00:15:08,560 --> 00:15:10,399
the decryption function the raw

366
00:15:10,399 --> 00:15:12,399
decryption function is a

367
00:15:12,399 --> 00:15:14,639
linear function in the secret key

368
00:15:14,639 --> 00:15:16,480
and the decoding function is also a

369
00:15:16,480 --> 00:15:18,880
linear function so the full decryption

370
00:15:18,880 --> 00:15:20,560
function is

371
00:15:20,560 --> 00:15:23,680
as a composition is a linear function in

372
00:15:23,680 --> 00:15:25,519
the secret key

373
00:15:25,519 --> 00:15:28,720
so this brings up to the core ideas of

374
00:15:28,720 --> 00:15:30,880
our clear recovery attack

375
00:15:30,880 --> 00:15:33,360
in this tag we consider a passive

376
00:15:33,360 --> 00:15:36,399
attackers who can observe some separate

377
00:15:36,399 --> 00:15:37,440
taxes

378
00:15:37,440 --> 00:15:40,000
and who can also observe the decrypted

379
00:15:40,000 --> 00:15:42,480
result the equivalent numbers of the

380
00:15:42,480 --> 00:15:44,720
cipher taxes

381
00:15:44,720 --> 00:15:46,800
with this information the average the

382
00:15:46,800 --> 00:15:50,000
attacker can first compute first try to

383
00:15:50,000 --> 00:15:53,040
re-encode the decrypted numbers into a

384
00:15:53,040 --> 00:15:55,040
polynomial n prime

385
00:15:55,040 --> 00:15:57,519
and then the attacker can just compute

386
00:15:57,519 --> 00:15:59,279
the inverse of the full decryption

387
00:15:59,279 --> 00:16:00,480
function

388
00:16:00,480 --> 00:16:03,600
and at the end of the attack

389
00:16:03,600 --> 00:16:05,920
the attacker may have the secret k in

390
00:16:05,920 --> 00:16:09,839
the final computation result s prime

391
00:16:09,839 --> 00:16:12,000
well this tag looks

392
00:16:12,000 --> 00:16:13,519
simple and

393
00:16:13,519 --> 00:16:16,320
very efficient but in practice there are

394
00:16:16,320 --> 00:16:18,959
some obstacles for example

395
00:16:18,959 --> 00:16:21,759
in some cases you may use a power of two

396
00:16:21,759 --> 00:16:23,199
modulus

397
00:16:23,199 --> 00:16:25,120
and in those cases

398
00:16:25,120 --> 00:16:27,440
you don't always have inverse element

399
00:16:27,440 --> 00:16:28,160
for

400
00:16:28,160 --> 00:16:31,040
arbitrary polynomial

401
00:16:31,040 --> 00:16:32,480
if that's the case

402
00:16:32,480 --> 00:16:34,639
the attacker can just collect more

403
00:16:34,639 --> 00:16:36,399
instances of the ciphertext and

404
00:16:36,399 --> 00:16:38,639
decryption result pairs

405
00:16:38,639 --> 00:16:41,839
and apply gaussian eliminations to

406
00:16:41,839 --> 00:16:44,320
obtain this effort to obtain the secret

407
00:16:44,320 --> 00:16:45,680
key

408
00:16:45,680 --> 00:16:49,360
and a more serious obstacle is due to

409
00:16:49,360 --> 00:16:50,959
competition errors

410
00:16:50,959 --> 00:16:53,199
because the encoding function is not

411
00:16:53,199 --> 00:16:55,600
strictly inverse of the decoding

412
00:16:55,600 --> 00:16:56,560
function

413
00:16:56,560 --> 00:16:59,519
and due to floating point errors

414
00:16:59,519 --> 00:17:03,360
you may the encoding function may

415
00:17:03,360 --> 00:17:05,839
there may be re-encoding errors between

416
00:17:05,839 --> 00:17:07,679
the encoding function and the decoding

417
00:17:07,679 --> 00:17:09,839
function

418
00:17:09,839 --> 00:17:10,959
once there

419
00:17:10,959 --> 00:17:13,039
if there is if

420
00:17:13,039 --> 00:17:15,679
if there exists a ring coding error

421
00:17:15,679 --> 00:17:17,760
then by computing the inverse of the

422
00:17:17,760 --> 00:17:21,520
full decryption function you will not

423
00:17:21,520 --> 00:17:24,000
necessarily get the secret key

424
00:17:24,000 --> 00:17:26,319
but if the re-encoding error is not too

425
00:17:26,319 --> 00:17:27,359
big

426
00:17:27,359 --> 00:17:29,120
the attacker can just fall back to a

427
00:17:29,120 --> 00:17:32,678
lattice attack

428
00:17:33,679 --> 00:17:36,400
all this implies is that the ckks scheme

429
00:17:36,400 --> 00:17:38,640
is not a passively secured scheme in the

430
00:17:38,640 --> 00:17:41,760
cpid model

431
00:17:42,400 --> 00:17:45,280
we implemented our attack against most

432
00:17:45,280 --> 00:17:48,160
of the open source fhe libraries

433
00:17:48,160 --> 00:17:50,880
and in our experiment we chose lattice

434
00:17:50,880 --> 00:17:52,160
parameters

435
00:17:52,160 --> 00:17:54,919
such that we can obtain at most at least

436
00:17:54,919 --> 00:17:57,919
256 bit securities under the classic in

437
00:17:57,919 --> 00:17:59,760
the cpa security

438
00:17:59,760 --> 00:18:01,679
notion

439
00:18:01,679 --> 00:18:04,080
we try to homomorphically compute

440
00:18:04,080 --> 00:18:07,039
variance of large numbers in order to

441
00:18:07,039 --> 00:18:09,840
get more floating point errors

442
00:18:09,840 --> 00:18:12,960
well this is to make our attack harder

443
00:18:12,960 --> 00:18:15,280
and also we try to homomorphically

444
00:18:15,280 --> 00:18:17,280
evaluate logistic and exponential

445
00:18:17,280 --> 00:18:18,880
functions

446
00:18:18,880 --> 00:18:21,520
and this is to try to produce bigger

447
00:18:21,520 --> 00:18:23,679
encryption noises also

448
00:18:23,679 --> 00:18:26,799
in order to make our attack harder

449
00:18:26,799 --> 00:18:29,120
in almost all our experiment we can

450
00:18:29,120 --> 00:18:32,640
successfully recover the secret key

451
00:18:32,640 --> 00:18:35,600
and we disclosed this attack to the

452
00:18:35,600 --> 00:18:38,240
library teams in october last year and

453
00:18:38,240 --> 00:18:40,160
following that there has been a very

454
00:18:40,160 --> 00:18:42,559
extensive

455
00:18:42,559 --> 00:18:45,360
discussions about this attack and

456
00:18:45,360 --> 00:18:47,600
and also mitigations

457
00:18:47,600 --> 00:18:50,240
during this process more sophisticated

458
00:18:50,240 --> 00:18:52,799
attack has been have been discovered

459
00:18:52,799 --> 00:18:55,200
and some of the heuristic mitigations

460
00:18:55,200 --> 00:18:59,440
have been implemented in those libraries

461
00:19:00,080 --> 00:19:02,160
well this mitigation is so far only

462
00:19:02,160 --> 00:19:05,120
heuristic so the question is can they

463
00:19:05,120 --> 00:19:07,200
have a proven secure

464
00:19:07,200 --> 00:19:09,919
solution to make the ckgs scheme in this

465
00:19:09,919 --> 00:19:12,080
api d secure

466
00:19:12,080 --> 00:19:14,480
the answer is yes we can just add a

467
00:19:14,480 --> 00:19:16,160
large gaussian noise during the

468
00:19:16,160 --> 00:19:18,799
decryption this is typically known as

469
00:19:18,799 --> 00:19:21,440
noise floating technique and it has been

470
00:19:21,440 --> 00:19:23,760
used in many areas for example the

471
00:19:23,760 --> 00:19:25,520
threathold encryption

472
00:19:25,520 --> 00:19:27,919
and also the circuit privacy problems of

473
00:19:27,919 --> 00:19:30,640
homomorphic encryption

474
00:19:30,640 --> 00:19:32,799
but there in practice

475
00:19:32,799 --> 00:19:35,200
noise floating has a serious drawback

476
00:19:35,200 --> 00:19:36,240
because

477
00:19:36,240 --> 00:19:39,360
it requires to add the large noise

478
00:19:39,360 --> 00:19:41,600
and this will this means that you will

479
00:19:41,600 --> 00:19:43,919
need a bigger modulus because typically

480
00:19:43,919 --> 00:19:46,640
you probably need to add about 40 bits

481
00:19:46,640 --> 00:19:49,200
of noises during decryption

482
00:19:49,200 --> 00:19:52,080
and this as a result this may require

483
00:19:52,080 --> 00:19:55,679
you to use 128 bit integers to do on the

484
00:19:55,679 --> 00:19:58,400
polynomial arithmetic

485
00:19:58,400 --> 00:20:01,200
so there's uh by doing this you

486
00:20:01,200 --> 00:20:03,440
certainly will say as

487
00:20:03,440 --> 00:20:07,280
a certain performance penalty

488
00:20:07,280 --> 00:20:09,520
so this brings up some open questions

489
00:20:09,520 --> 00:20:11,280
open problems

490
00:20:11,280 --> 00:20:12,960
the first one is

491
00:20:12,960 --> 00:20:15,520
whether we can design a more efficient

492
00:20:15,520 --> 00:20:19,039
solution to achieve in the cpud security

493
00:20:19,039 --> 00:20:20,960
for approximate homomorphic encryption

494
00:20:20,960 --> 00:20:22,240
schemes

495
00:20:22,240 --> 00:20:24,400
maybe it is very hard to achieve the

496
00:20:24,400 --> 00:20:26,880
full in the cpd security

497
00:20:26,880 --> 00:20:27,919
but

498
00:20:27,919 --> 00:20:29,039
it

499
00:20:29,039 --> 00:20:31,919
it seems maybe it's possible to design

500
00:20:31,919 --> 00:20:34,480
an efficient solution

501
00:20:34,480 --> 00:20:35,679
for

502
00:20:35,679 --> 00:20:37,520
approximate homomorphic encryption to

503
00:20:37,520 --> 00:20:40,880
achieve a limited amount a limited

504
00:20:40,880 --> 00:20:43,600
notion of in the cpid security in which

505
00:20:43,600 --> 00:20:45,919
the adversary is allowed to only make

506
00:20:45,919 --> 00:20:49,679
abundant number of decryption queries

507
00:20:49,679 --> 00:20:52,320
another very interesting direction is to

508
00:20:52,320 --> 00:20:54,960
show whether we can build efficient

509
00:20:54,960 --> 00:20:56,080
schemes

510
00:20:56,080 --> 00:21:00,240
for homomorphic approximate competitions

511
00:21:00,240 --> 00:21:02,159
with such um

512
00:21:02,159 --> 00:21:04,159
such scheme

513
00:21:04,159 --> 00:21:06,960
is to homomorphically evaluate some

514
00:21:06,960 --> 00:21:10,080
approximate operations whereas you know

515
00:21:10,080 --> 00:21:12,159
the approximate operations result in

516
00:21:12,159 --> 00:21:13,919
clear text

517
00:21:13,919 --> 00:21:16,919
deterministically

518
00:21:17,600 --> 00:21:19,919
so if that's the case because this

519
00:21:19,919 --> 00:21:24,000
operation is deterministic and

520
00:21:24,000 --> 00:21:25,200
you can just

521
00:21:25,200 --> 00:21:27,840
you can trivially improve the index api

522
00:21:27,840 --> 00:21:30,799
security as long as this game

523
00:21:30,799 --> 00:21:32,559
you can trivially improve in the cpd

524
00:21:32,559 --> 00:21:35,200
security as long as the scheme is in the

525
00:21:35,200 --> 00:21:36,880
cpa secure

526
00:21:36,880 --> 00:21:39,039
and i see that there there are some

527
00:21:39,039 --> 00:21:41,440
recent progress towards such direction

528
00:21:41,440 --> 00:21:44,080
but it looks like we still have

529
00:21:44,080 --> 00:21:46,720
still it is a still open problem to

530
00:21:46,720 --> 00:21:48,880
build efficient schemes in that

531
00:21:48,880 --> 00:21:51,360
direction

532
00:21:52,799 --> 00:21:55,919
so as a final remark i want to um to

533
00:21:55,919 --> 00:21:58,720
mention that we introduced a passive

534
00:21:58,720 --> 00:22:00,799
attack passive security model for

535
00:22:00,799 --> 00:22:02,559
approximate homomorphic encryption

536
00:22:02,559 --> 00:22:04,320
scheme in this talk

537
00:22:04,320 --> 00:22:07,039
we introduced a new security notion the

538
00:22:07,039 --> 00:22:10,320
in the cpd security and this security

539
00:22:10,320 --> 00:22:12,480
notion is equivalent to the classic in

540
00:22:12,480 --> 00:22:15,440
the cpa for exact schemes

541
00:22:15,440 --> 00:22:17,520
so it does not give

542
00:22:17,520 --> 00:22:19,280
the adversary the attacker any

543
00:22:19,280 --> 00:22:21,919
additional power for exact schemes

544
00:22:21,919 --> 00:22:24,640
but for approximate schemes

545
00:22:24,640 --> 00:22:27,440
we can show that this this new security

546
00:22:27,440 --> 00:22:29,520
is strictly stronger than the classic in

547
00:22:29,520 --> 00:22:32,640
this api security and we show that there

548
00:22:32,640 --> 00:22:35,679
there exists the strict hierarchy of

549
00:22:35,679 --> 00:22:38,320
variants of in the cpd security based on

550
00:22:38,320 --> 00:22:41,520
the decryption quarries

551
00:22:41,520 --> 00:22:44,400
we also presented a k recovery attack

552
00:22:44,400 --> 00:22:47,440
against the ckks game in this in this

553
00:22:47,440 --> 00:22:49,360
cpd model

554
00:22:49,360 --> 00:22:51,600
this attack itself is very simple and

555
00:22:51,600 --> 00:22:52,799
efficient

556
00:22:52,799 --> 00:22:55,760
and some heuristic against this attack

557
00:22:55,760 --> 00:22:57,600
of some heuristic accounting measures

558
00:22:57,600 --> 00:22:59,520
against this attack have been

559
00:22:59,520 --> 00:23:02,640
implemented in the op in many open

560
00:23:02,640 --> 00:23:04,320
source libraries

561
00:23:04,320 --> 00:23:06,480
but it may require

562
00:23:06,480 --> 00:23:09,120
some further study to say how much

563
00:23:09,120 --> 00:23:11,840
concrete security can be obtained can be

564
00:23:11,840 --> 00:23:15,520
achieved through these countermeasures

565
00:23:15,520 --> 00:23:17,840
and we can also

566
00:23:17,840 --> 00:23:20,799
achieve full body security with

567
00:23:20,799 --> 00:23:23,600
a body security with

568
00:23:23,600 --> 00:23:26,960
with the cks scheme

569
00:23:26,960 --> 00:23:28,720
but it's about

570
00:23:28,720 --> 00:23:29,520
the

571
00:23:29,520 --> 00:23:31,760
the efficient solution is still open

572
00:23:31,760 --> 00:23:34,158
problem

573
00:23:34,799 --> 00:23:36,960
so this is the end of my talk and thank

574
00:23:36,960 --> 00:23:39,120
you very much for your attention

575
00:23:39,120 --> 00:23:41,520
and you're welcome to check out our

576
00:23:41,520 --> 00:23:44,918
paper on eprint

