1
00:00:01,199 --> 00:00:02,879
welcome my talk

2
00:00:02,879 --> 00:00:05,520
i'm going to talk about round optimal

3
00:00:05,520 --> 00:00:07,359
blind signatures

4
00:00:07,359 --> 00:00:09,679
this is a joint work with switch

5
00:00:09,679 --> 00:00:11,040
katsumata

6
00:00:11,040 --> 00:00:13,280
shot yamada from ice

7
00:00:13,280 --> 00:00:17,880
and takashiyamaka from ntt

8
00:00:18,080 --> 00:00:21,520
this is a short summary of our work

9
00:00:21,520 --> 00:00:23,920
we present around optimal blind

10
00:00:23,920 --> 00:00:26,160
signature protocol

11
00:00:26,160 --> 00:00:28,480
our protocol has three desirable

12
00:00:28,480 --> 00:00:30,320
properties

13
00:00:30,320 --> 00:00:33,360
first it does not rely on any trusted

14
00:00:33,360 --> 00:00:37,280
setup such as the crs model

15
00:00:37,280 --> 00:00:39,840
second it is based on standard

16
00:00:39,840 --> 00:00:41,280
assumptions

17
00:00:41,280 --> 00:00:44,239
we use both classically and quantumly

18
00:00:44,239 --> 00:00:46,399
secure tools

19
00:00:46,399 --> 00:00:49,520
lastly it does not rely on complexity

20
00:00:49,520 --> 00:00:52,239
level aging

21
00:00:53,680 --> 00:00:59,000
first i review what is blind signature

22
00:00:59,440 --> 00:01:02,719
blind signatures are digital analog of

23
00:01:02,719 --> 00:01:06,640
sealed envelopes with carbon copy seat

24
00:01:06,640 --> 00:01:09,680
in blind signatures there are a signer

25
00:01:09,680 --> 00:01:11,680
and the user

26
00:01:11,680 --> 00:01:14,880
assigner have a public verification key

27
00:01:14,880 --> 00:01:17,759
and the secret signing key

28
00:01:17,759 --> 00:01:21,280
a user has a message

29
00:01:22,400 --> 00:01:25,600
the user puts the message into a sealed

30
00:01:25,600 --> 00:01:26,479
envelope

31
00:01:26,479 --> 00:01:29,280
with carbon copy seed and sends it to

32
00:01:29,280 --> 00:01:31,840
the signer

33
00:01:33,759 --> 00:01:37,119
the signer signs on the c envelope

34
00:01:37,119 --> 00:01:40,640
without opening it and returns it to the

35
00:01:40,640 --> 00:01:41,920
user

36
00:01:41,920 --> 00:01:44,399
that is the signer does not see the

37
00:01:44,399 --> 00:01:47,119
message n

38
00:01:47,520 --> 00:01:51,200
the user opens the envelope and get the

39
00:01:51,200 --> 00:01:55,720
signature for the message m

40
00:01:56,799 --> 00:01:59,119
blind signatures are crucial with

41
00:01:59,119 --> 00:02:02,079
building blocks of privacy preserving

42
00:02:02,079 --> 00:02:04,000
cryptosystems

43
00:02:04,000 --> 00:02:06,560
we need blind signatures to achieve

44
00:02:06,560 --> 00:02:08,720
e-cash involving

45
00:02:08,720 --> 00:02:12,120
anonymous credentials and many other

46
00:02:12,120 --> 00:02:14,080
privacy-preserving cryptographic

47
00:02:14,080 --> 00:02:16,640
protocols

48
00:02:18,959 --> 00:02:23,040
there are many blind signature protocols

49
00:02:23,040 --> 00:02:25,840
most protocols rely on trusted setups

50
00:02:25,840 --> 00:02:28,319
such as the london molecule model and

51
00:02:28,319 --> 00:02:31,839
commonly firing string model

52
00:02:32,160 --> 00:02:35,120
fish bower at r and their follow-up

53
00:02:35,120 --> 00:02:38,160
works presented blind signatures without

54
00:02:38,160 --> 00:02:39,840
trusted setup

55
00:02:39,840 --> 00:02:42,000
but they need strong interactive

56
00:02:42,000 --> 00:02:44,720
assumptions

57
00:02:45,440 --> 00:02:48,400
land optimal line signatures without

58
00:02:48,400 --> 00:02:51,040
try any trusted setup from standard

59
00:02:51,040 --> 00:02:53,360
assumptions are impossible

60
00:02:53,360 --> 00:02:55,519
but there are some conditions on the

61
00:02:55,519 --> 00:02:58,879
impossibility results

62
00:02:59,920 --> 00:03:03,120
garget all presented the first blind

63
00:03:03,120 --> 00:03:05,840
signature protocol without trusted setup

64
00:03:05,840 --> 00:03:08,400
from standard assumptions by using

65
00:03:08,400 --> 00:03:10,800
complexity leveraging

66
00:03:10,800 --> 00:03:14,800
they use complex field ledging twice

67
00:03:14,800 --> 00:03:17,680
gaga and gupta use complex stabilizing

68
00:03:17,680 --> 00:03:22,319
only once by heavily relying on pairings

69
00:03:22,319 --> 00:03:25,120
our protocol is the first protocol that

70
00:03:25,120 --> 00:03:28,959
achieves the three desired properties

71
00:03:28,959 --> 00:03:31,680
we overcome the impossibility result by

72
00:03:31,680 --> 00:03:33,120
using

73
00:03:33,120 --> 00:03:36,000
quantum power

74
00:03:38,480 --> 00:03:40,640
there are two security requirements on

75
00:03:40,640 --> 00:03:42,480
blind signatures

76
00:03:42,480 --> 00:03:45,680
one is unpleasability

77
00:03:45,680 --> 00:03:49,040
in this security game a malicious user

78
00:03:49,040 --> 00:03:51,920
runs queue signing processes with an

79
00:03:51,920 --> 00:03:55,920
honest designer and gets signatures

80
00:03:55,920 --> 00:03:58,560
if the malicious signer cannot get q

81
00:03:58,560 --> 00:04:01,200
plus one or more signatures

82
00:04:01,200 --> 00:04:05,839
then we said the protocol is unfortunate

83
00:04:07,760 --> 00:04:10,159
the other one is blindness

84
00:04:10,159 --> 00:04:12,640
in the security game a malicious sign

85
00:04:12,640 --> 00:04:15,439
generates a key pair

86
00:04:15,439 --> 00:04:18,798
an honest user chooses two messages and

87
00:04:18,798 --> 00:04:22,078
flip a random coin

88
00:04:22,320 --> 00:04:25,199
the user runs the first signing process

89
00:04:25,199 --> 00:04:29,840
with the message chosen by the coin

90
00:04:30,400 --> 00:04:31,280
then

91
00:04:31,280 --> 00:04:33,919
the user runs the second signing process

92
00:04:33,919 --> 00:04:37,198
with the other message

93
00:04:37,280 --> 00:04:40,000
the user gets two signatures and sends

94
00:04:40,000 --> 00:04:43,840
them to the smart signer

95
00:04:44,240 --> 00:04:46,960
if the malicious signer cannot correctly

96
00:04:46,960 --> 00:04:49,520
guess which signature was generated via

97
00:04:49,520 --> 00:04:52,240
the first signing process we say the

98
00:04:52,240 --> 00:04:56,520
protocol satisfies blindness

99
00:04:57,440 --> 00:04:59,120
i'm going to

100
00:04:59,120 --> 00:05:04,080
explain the basic idea of our protocol

101
00:05:05,039 --> 00:05:07,680
the starting point is a proper protocol

102
00:05:07,680 --> 00:05:09,520
by gagatow

103
00:05:09,520 --> 00:05:11,919
an overview of their protocol is as

104
00:05:11,919 --> 00:05:13,680
follows

105
00:05:13,680 --> 00:05:15,759
the signer generates a key pair of

106
00:05:15,759 --> 00:05:17,840
standard signatures

107
00:05:17,840 --> 00:05:20,160
then the signer and the user learn a

108
00:05:20,160 --> 00:05:23,280
secure function a variation protocol

109
00:05:23,280 --> 00:05:25,759
where the sign has input is assigning a

110
00:05:25,759 --> 00:05:30,000
key and the user's input is the message

111
00:05:30,000 --> 00:05:32,400
the user gets a signature and the signer

112
00:05:32,400 --> 00:05:34,400
gets nothing

113
00:05:34,400 --> 00:05:37,600
we need to prevent multiple behavior of

114
00:05:37,600 --> 00:05:40,639
the signer such as using bad randomness

115
00:05:40,639 --> 00:05:43,280
for signatures

116
00:05:43,280 --> 00:05:46,320
so we use zero knowledge to force the

117
00:05:46,320 --> 00:05:49,039
signer to follow the secure function

118
00:05:49,039 --> 00:05:52,160
evaluation protocol with the signing key

119
00:05:52,160 --> 00:05:56,080
and committed prf key

120
00:05:56,319 --> 00:05:59,039
the blindness follows from the soundness

121
00:05:59,039 --> 00:06:00,800
of zero knowledge

122
00:06:00,800 --> 00:06:03,360
and the receiver security of secure

123
00:06:03,360 --> 00:06:06,840
function evaluation

124
00:06:07,280 --> 00:06:09,759
the unfoldability follows from zero

125
00:06:09,759 --> 00:06:11,840
knowledge and the center security of

126
00:06:11,840 --> 00:06:14,319
secure function evaluation

127
00:06:14,319 --> 00:06:15,360
however

128
00:06:15,360 --> 00:06:21,240
proving that feasibility is a bit tricky

129
00:06:22,080 --> 00:06:24,080
there are a few issues improving

130
00:06:24,080 --> 00:06:26,000
unfeasibility

131
00:06:26,000 --> 00:06:28,560
first we want to prove unforgivability

132
00:06:28,560 --> 00:06:30,560
of the blind signature by using

133
00:06:30,560 --> 00:06:34,800
unfeasibility of standard signatures

134
00:06:34,800 --> 00:06:37,280
but the reduction cannot pass a message

135
00:06:37,280 --> 00:06:40,560
to its signing oracle because use cell's

136
00:06:40,560 --> 00:06:43,039
message is hidden by secure function and

137
00:06:43,039 --> 00:06:45,680
variation

138
00:06:46,160 --> 00:06:49,840
gag at all resolved this issue by using

139
00:06:49,840 --> 00:06:52,160
complex steel levellating

140
00:06:52,160 --> 00:06:55,280
that is we assume signatures with super

141
00:06:55,280 --> 00:06:58,400
polynomial time security and use super

142
00:06:58,400 --> 00:07:00,319
polynomial time reduction in the

143
00:07:00,319 --> 00:07:02,880
security proof

144
00:07:02,880 --> 00:07:05,199
then the reduction can extract the

145
00:07:05,199 --> 00:07:07,840
message by breaking the receiver

146
00:07:07,840 --> 00:07:12,800
security of secure function evaluation

147
00:07:12,800 --> 00:07:15,280
the second issue is to move the large

148
00:07:15,280 --> 00:07:17,919
argument is impossible

149
00:07:17,919 --> 00:07:21,199
we need to move xeronites to achieve a

150
00:07:21,199 --> 00:07:24,400
round optimal protocol

151
00:07:24,400 --> 00:07:26,880
path overcame the impossibility result

152
00:07:26,880 --> 00:07:29,280
by using super polynomial time

153
00:07:29,280 --> 00:07:30,960
simulators

154
00:07:30,960 --> 00:07:35,840
gag at all uses the technique bypass

155
00:07:35,919 --> 00:07:38,400
a super polynomial time reduction

156
00:07:38,400 --> 00:07:41,199
extracts the message and runs a super

157
00:07:41,199 --> 00:07:45,840
polynomial time zero knowledge simulator

158
00:07:47,759 --> 00:07:51,360
our first idea is we use quantumly

159
00:07:51,360 --> 00:07:53,599
secure cryptography instead of

160
00:07:53,599 --> 00:07:56,000
cryptography with super polynomial time

161
00:07:56,000 --> 00:07:57,759
security

162
00:07:57,759 --> 00:08:00,560
a quantum polynomial time reduction can

163
00:08:00,560 --> 00:08:03,759
break the receiver security of secure

164
00:08:03,759 --> 00:08:07,120
function evaluation and extract the

165
00:08:07,120 --> 00:08:09,039
message

166
00:08:09,039 --> 00:08:12,319
the work by tai and cloner inspired this

167
00:08:12,319 --> 00:08:14,639
idea

168
00:08:14,639 --> 00:08:16,240
however

169
00:08:16,240 --> 00:08:19,120
simply using this idea does not work

170
00:08:19,120 --> 00:08:22,479
because we need to use complexity legend

171
00:08:22,479 --> 00:08:26,400
twice in the protocol by gag at all we

172
00:08:26,400 --> 00:08:31,120
will see this issue more closely later

173
00:08:31,759 --> 00:08:34,080
you might think that we can apply the

174
00:08:34,080 --> 00:08:36,719
technique by client planner to the

175
00:08:36,719 --> 00:08:39,599
protocol by gargant gupta since we use

176
00:08:39,599 --> 00:08:42,958
complexly validating only once

177
00:08:42,958 --> 00:08:45,839
however all building blocks of their

178
00:08:45,839 --> 00:08:48,880
protocol must be pairing based since

179
00:08:48,880 --> 00:08:51,839
they use specific algebraic properties

180
00:08:51,839 --> 00:08:55,200
of the gross high proof system

181
00:08:55,200 --> 00:08:58,160
so the protocol is not compatible with

182
00:08:58,160 --> 00:09:01,519
quantum simulation

183
00:09:03,120 --> 00:09:05,920
we saw two moves right argument is a

184
00:09:05,920 --> 00:09:08,640
crucial building building block

185
00:09:08,640 --> 00:09:13,600
so we focus on this primitive hereafter

186
00:09:14,320 --> 00:09:16,399
we review the two move the large

187
00:09:16,399 --> 00:09:18,800
argument bypass

188
00:09:18,800 --> 00:09:20,640
it uses the

189
00:09:20,640 --> 00:09:23,600
well-known or proof prick

190
00:09:23,600 --> 00:09:26,800
the verifier chooses an input of one-way

191
00:09:26,800 --> 00:09:32,160
permutation f and compute an output z

192
00:09:32,800 --> 00:09:35,920
then the user sends randomness for zap

193
00:09:35,920 --> 00:09:39,760
and zee to the proverb

194
00:09:39,920 --> 00:09:42,240
zap is a public coin to

195
00:09:42,240 --> 00:09:46,000
witness indistinguishable proof

196
00:09:47,519 --> 00:09:49,839
the approval generates a dummy

197
00:09:49,839 --> 00:09:52,480
commitment and returns the commitment

198
00:09:52,480 --> 00:09:56,240
and response for that

199
00:09:58,000 --> 00:10:01,920
the statement of zap is as follows

200
00:10:01,920 --> 00:10:04,880
the statement x is true or com is a

201
00:10:04,880 --> 00:10:09,040
commitment of the preimage of z

202
00:10:09,200 --> 00:10:13,600
the latter statement is for simulation

203
00:10:14,079 --> 00:10:16,880
we construct a superpolynomial time

204
00:10:16,880 --> 00:10:18,480
stimulator for

205
00:10:18,480 --> 00:10:20,800
proving xero knowledge

206
00:10:20,800 --> 00:10:24,640
the simulator breaks f by using super

207
00:10:24,640 --> 00:10:30,000
polynomial power and get the premade y

208
00:10:30,000 --> 00:10:32,079
then the simulator generates a

209
00:10:32,079 --> 00:10:35,040
commitment of why and that proof by

210
00:10:35,040 --> 00:10:37,920
using the witness while

211
00:10:37,920 --> 00:10:39,519
the modified commitment is

212
00:10:39,519 --> 00:10:41,839
indistinguishable due to the hiding of

213
00:10:41,839 --> 00:10:43,920
commitment

214
00:10:43,920 --> 00:10:46,079
using a witness for the lattice

215
00:10:46,079 --> 00:10:48,959
statement is indistinguishable due to

216
00:10:48,959 --> 00:10:52,560
the wi property of that

217
00:10:52,560 --> 00:10:53,440
thus

218
00:10:53,440 --> 00:10:56,560
the knowledge holds

219
00:10:58,160 --> 00:10:59,040
next

220
00:10:59,040 --> 00:11:01,200
let's see soundness

221
00:11:01,200 --> 00:11:04,160
this follows from the soundness of that

222
00:11:04,160 --> 00:11:07,600
and one awareness of f

223
00:11:08,000 --> 00:11:12,560
we construct an inverter algorithm for f

224
00:11:12,560 --> 00:11:14,800
the inverter uses the

225
00:11:14,800 --> 00:11:17,440
instance z as a part of the first

226
00:11:17,440 --> 00:11:18,640
message

227
00:11:18,640 --> 00:11:21,519
and extract the pre-image from the

228
00:11:21,519 --> 00:11:24,240
commitment by using super polynomial

229
00:11:24,240 --> 00:11:26,160
power

230
00:11:26,160 --> 00:11:29,279
here note that the formal statement is

231
00:11:29,279 --> 00:11:32,800
false in the soundness setting

232
00:11:32,800 --> 00:11:35,680
the lining time of the inverter must be

233
00:11:35,680 --> 00:11:38,079
much shorter than the running time of

234
00:11:38,079 --> 00:11:42,199
the zero knowledge simulator

235
00:11:43,839 --> 00:11:46,079
in the protocol we use complexity

236
00:11:46,079 --> 00:11:47,839
leveraging twice

237
00:11:47,839 --> 00:11:50,639
so let's see the relationship among

238
00:11:50,639 --> 00:11:53,519
learning time of reductions

239
00:11:53,519 --> 00:11:56,720
the derivative simulator lands in time t

240
00:11:56,720 --> 00:12:00,160
and need to break f

241
00:12:00,160 --> 00:12:03,279
the inverter for f lands in time t prime

242
00:12:03,279 --> 00:12:07,200
and the need to break the commitment

243
00:12:07,200 --> 00:12:10,800
so there are three security levels

244
00:12:10,800 --> 00:12:13,279
using quantumly secured cryptography

245
00:12:13,279 --> 00:12:16,240
works for two security levels but not

246
00:12:16,240 --> 00:12:18,880
for three

247
00:12:20,240 --> 00:12:23,519
now let's see our design idea

248
00:12:23,519 --> 00:12:26,000
we introduce the notion of a blind

249
00:12:26,000 --> 00:12:28,000
signature conforming their knowledge

250
00:12:28,000 --> 00:12:30,560
argument in this work

251
00:12:30,560 --> 00:12:34,560
this is two move zero knowledge argument

252
00:12:34,959 --> 00:12:37,760
first we replace commitment in passes

253
00:12:37,760 --> 00:12:40,720
protocol with public key encryption

254
00:12:40,720 --> 00:12:43,600
and generates a dummy ciphertext for

255
00:12:43,600 --> 00:12:45,519
that

256
00:12:45,519 --> 00:12:48,000
the encryption key

257
00:12:48,000 --> 00:12:50,800
is given to the verifier before the

258
00:12:50,800 --> 00:12:52,720
protocol starts

259
00:12:52,720 --> 00:12:56,160
so this is not the plain model but this

260
00:12:56,160 --> 00:12:58,800
is okay since we consider the brain

261
00:12:58,800 --> 00:13:00,800
signature setting

262
00:13:00,800 --> 00:13:03,200
the prover corresponds to the signer in

263
00:13:03,200 --> 00:13:06,720
blind signature and can register the the

264
00:13:06,720 --> 00:13:09,120
encryption key as a part of signer's

265
00:13:09,120 --> 00:13:11,760
public key

266
00:13:11,760 --> 00:13:15,200
we use non-uniform security of f as gag

267
00:13:15,200 --> 00:13:18,079
at all to prove soundness

268
00:13:18,079 --> 00:13:20,639
known uniformly algorithms are two-stage

269
00:13:20,639 --> 00:13:23,279
algorithms

270
00:13:23,360 --> 00:13:26,079
after the pre-computation phase

271
00:13:26,079 --> 00:13:28,399
the algorithm computes an advanced

272
00:13:28,399 --> 00:13:33,959
string by unbounded computational power

273
00:13:34,160 --> 00:13:35,760
the online phase

274
00:13:35,760 --> 00:13:38,000
the algorithm is given a problem

275
00:13:38,000 --> 00:13:41,040
instance along with the advice and

276
00:13:41,040 --> 00:13:44,079
tries to solve the problem in polynomial

277
00:13:44,079 --> 00:13:46,319
time

278
00:13:46,720 --> 00:13:49,600
that is the inverter can get the

279
00:13:49,600 --> 00:13:52,399
decryption key as an advice in the

280
00:13:52,399 --> 00:13:55,680
non-uniform model

281
00:13:57,120 --> 00:14:00,240
the sinus public key is given before the

282
00:14:00,240 --> 00:14:03,279
protocol starts that is before the

283
00:14:03,279 --> 00:14:06,320
verification before the verifier sends z

284
00:14:06,320 --> 00:14:08,399
to the approval

285
00:14:08,399 --> 00:14:11,680
therefore we can construct a non-uniform

286
00:14:11,680 --> 00:14:14,720
reduction to f such that the decryption

287
00:14:14,720 --> 00:14:18,399
key is given as an advice and extract

288
00:14:18,399 --> 00:14:23,839
the pre-image from the ciphertext ctp

289
00:14:25,279 --> 00:14:28,399
an issue is that approver might

290
00:14:28,399 --> 00:14:31,040
maliciously generate a key pair

291
00:14:31,040 --> 00:14:31,920
if

292
00:14:31,920 --> 00:14:35,600
the public key ekp is e

293
00:14:35,600 --> 00:14:39,680
is ill-formed we cannot extract y from

294
00:14:39,680 --> 00:14:42,959
ciphertext ctp

295
00:14:42,959 --> 00:14:46,000
here the pk scheme must be quantumly

296
00:14:46,000 --> 00:14:48,639
secure since we consider quantum

297
00:14:48,639 --> 00:14:51,440
polynomial time simulators to use

298
00:14:51,440 --> 00:14:54,240
quantum power

299
00:14:54,240 --> 00:14:55,360
however

300
00:14:55,360 --> 00:14:56,720
there is

301
00:14:56,720 --> 00:15:00,320
no quantum really secure pke where we

302
00:15:00,320 --> 00:15:03,120
can efficiently recognize that a public

303
00:15:03,120 --> 00:15:06,959
key is honestly generated

304
00:15:07,279 --> 00:15:11,120
so the verifier also uses pk

305
00:15:11,120 --> 00:15:14,320
the verifier generates a key pair

306
00:15:14,320 --> 00:15:16,880
and sends the public key as a part of

307
00:15:16,880 --> 00:15:19,760
the first message

308
00:15:20,320 --> 00:15:22,399
the prover also generates a dummy

309
00:15:22,399 --> 00:15:26,800
ciphertext under verifier's public key

310
00:15:26,800 --> 00:15:30,240
the or part of the zap statement is also

311
00:15:30,240 --> 00:15:32,320
modified accordingly

312
00:15:32,320 --> 00:15:36,480
thus even if ekp is multiple generated

313
00:15:36,480 --> 00:15:41,480
we can extract y from ctd

314
00:15:41,839 --> 00:15:44,959
however this incurs another issue since

315
00:15:44,959 --> 00:15:47,680
the verifier cannot register the public

316
00:15:47,680 --> 00:15:48,639
key

317
00:15:48,639 --> 00:15:52,079
so ekv is not certified and it could

318
00:15:52,079 --> 00:15:55,800
harm zero knowledge

319
00:15:56,240 --> 00:15:59,839
to prove soundness we want to guarantee

320
00:15:59,839 --> 00:16:02,959
that we can extract the or part witness

321
00:16:02,959 --> 00:16:03,759
y

322
00:16:03,759 --> 00:16:07,040
when the prover cheats

323
00:16:07,440 --> 00:16:10,639
so we use lossy encryption and another

324
00:16:10,639 --> 00:16:13,600
zap to handle this issue

325
00:16:13,600 --> 00:16:16,079
the approver puts the first message of

326
00:16:16,079 --> 00:16:18,720
zap in the public key

327
00:16:18,720 --> 00:16:20,880
this is okay since

328
00:16:20,880 --> 00:16:24,560
the first message of zap is reusable

329
00:16:24,560 --> 00:16:26,880
the verifier generates a key pair of

330
00:16:26,880 --> 00:16:29,839
lossy encryption and sends the public

331
00:16:29,839 --> 00:16:32,880
key and the proof as a part of the first

332
00:16:32,880 --> 00:16:35,880
message

333
00:16:36,240 --> 00:16:39,279
the second sub statement is like this

334
00:16:39,279 --> 00:16:41,759
lossy encryption public key is lossy

335
00:16:41,759 --> 00:16:45,600
mode or ekp is ill-formed

336
00:16:45,600 --> 00:16:48,320
i defer explaining how to prove this

337
00:16:48,320 --> 00:16:51,320
statement

338
00:16:51,759 --> 00:16:54,320
to prove zero knowledge we use the

339
00:16:54,320 --> 00:16:56,560
formal statement

340
00:16:56,560 --> 00:16:59,120
in zero knowledge ekp is honestly

341
00:16:59,120 --> 00:17:01,519
generated since the prover is honest in

342
00:17:01,519 --> 00:17:03,600
this setting

343
00:17:03,600 --> 00:17:07,280
so ekb must be losty mode and ciphertex

344
00:17:07,280 --> 00:17:10,400
ctv gives no information and does not

345
00:17:10,400 --> 00:17:13,439
have zero knowledge

346
00:17:13,760 --> 00:17:15,679
to prove soundness

347
00:17:15,679 --> 00:17:18,640
we use the latter statement

348
00:17:18,640 --> 00:17:20,959
in this setting a multicast proverb

349
00:17:20,959 --> 00:17:23,760
generates an informed pekp

350
00:17:23,760 --> 00:17:28,480
and the formal statement could be false

351
00:17:28,720 --> 00:17:30,080
so

352
00:17:30,080 --> 00:17:31,760
we use

353
00:17:31,760 --> 00:17:34,080
the injective mode of velocity

354
00:17:34,080 --> 00:17:37,360
encryption and extract the pre-image y

355
00:17:37,360 --> 00:17:40,400
from ciphertext city v

356
00:17:40,400 --> 00:17:41,760
note that

357
00:17:41,760 --> 00:17:44,160
the injective mode and the lossy mode

358
00:17:44,160 --> 00:17:47,400
are indistinguishable

359
00:17:49,280 --> 00:17:52,160
there is a subtle final issue

360
00:17:52,160 --> 00:17:55,200
in the sound setting a reduction cannot

361
00:17:55,200 --> 00:17:58,799
decide whether the that proof from the

362
00:17:58,799 --> 00:18:01,440
malicious proverb really violates the

363
00:18:01,440 --> 00:18:04,960
soundness of that or not

364
00:18:05,760 --> 00:18:07,919
to efficiently check the winning

365
00:18:07,919 --> 00:18:11,120
condition we put as a public key

366
00:18:11,120 --> 00:18:15,840
of pk in the prover's public key

367
00:18:16,320 --> 00:18:18,480
the prover sends a ciphertext of the

368
00:18:18,480 --> 00:18:20,720
witness w as a part of the second

369
00:18:20,720 --> 00:18:23,120
message

370
00:18:24,880 --> 00:18:27,440
the statement of zap is modified and

371
00:18:27,440 --> 00:18:30,000
guarantees that the witness w is

372
00:18:30,000 --> 00:18:34,320
encrypted under the new public key

373
00:18:36,400 --> 00:18:40,400
we also use knowing form security of pk

374
00:18:40,400 --> 00:18:43,200
a non-uniform reduction can extract the

375
00:18:43,200 --> 00:18:46,080
decryption key behind the new public key

376
00:18:46,080 --> 00:18:47,760
and puts it

377
00:18:47,760 --> 00:18:50,320
on the otherwise

378
00:18:50,320 --> 00:18:52,640
so the knowing home reduction can

379
00:18:52,640 --> 00:18:55,280
efficiently check to prove a bio-less

380
00:18:55,280 --> 00:18:59,280
soundness of zap or not

381
00:19:01,120 --> 00:19:03,840
lastly we explain how to prove an

382
00:19:03,840 --> 00:19:06,559
encryption key is ill-formed

383
00:19:06,559 --> 00:19:08,960
we can achieve such a proof for regular

384
00:19:08,960 --> 00:19:11,840
pk scheme

385
00:19:11,919 --> 00:19:15,600
in legend pke a public key consists of a

386
00:19:15,600 --> 00:19:20,240
basis of lattice l and the vector v

387
00:19:20,240 --> 00:19:23,280
a secret key is the closest lattice

388
00:19:23,280 --> 00:19:25,200
point to the

389
00:19:25,200 --> 00:19:28,000
vector v

390
00:19:28,960 --> 00:19:31,760
and uniformed probability means that

391
00:19:31,760 --> 00:19:36,080
vector v is far from lattice points

392
00:19:36,080 --> 00:19:39,120
holland and leif shows that a lattice l

393
00:19:39,120 --> 00:19:39,840
and

394
00:19:39,840 --> 00:19:43,840
a vector v constitute an np language if

395
00:19:43,840 --> 00:19:47,039
v is far from lattice points

396
00:19:47,039 --> 00:19:50,320
so we can prove a public key is informed

397
00:19:50,320 --> 00:19:52,960
by that

398
00:19:52,960 --> 00:19:54,080
however

399
00:19:54,080 --> 00:19:56,720
there is a subtle issue since the

400
00:19:56,720 --> 00:20:00,400
approved system is for gaps languages

401
00:20:00,400 --> 00:20:03,520
a malicious prover may choose a public

402
00:20:03,520 --> 00:20:06,480
key that is not far from lattice points

403
00:20:06,480 --> 00:20:09,039
but not close to them

404
00:20:09,039 --> 00:20:10,159
in fact

405
00:20:10,159 --> 00:20:13,039
we can define a secret key for such a

406
00:20:13,039 --> 00:20:16,320
public key in the gray zone

407
00:20:16,320 --> 00:20:18,880
such a secret key is sufficient for

408
00:20:18,880 --> 00:20:20,720
extraction

409
00:20:20,720 --> 00:20:23,200
therefore the proof system works in our

410
00:20:23,200 --> 00:20:25,679
protocol

411
00:20:26,080 --> 00:20:29,678
let me summarize my talk

412
00:20:30,640 --> 00:20:33,200
we present around optimal blind

413
00:20:33,200 --> 00:20:36,000
signature protocol in this work

414
00:20:36,000 --> 00:20:38,640
it is based on standard classical and

415
00:20:38,640 --> 00:20:41,760
quantum assumptions and does not rely on

416
00:20:41,760 --> 00:20:44,159
any trusted setup

417
00:20:44,159 --> 00:20:46,960
in addition it does not use complexity

418
00:20:46,960 --> 00:20:49,280
leveraging

419
00:20:49,280 --> 00:20:51,679
we introduce several interesting

420
00:20:51,679 --> 00:20:55,360
techniques to achieve our protocol

421
00:20:55,360 --> 00:20:58,559
in particular we introduce the notion of

422
00:20:58,559 --> 00:21:00,400
blind signature conforming zero

423
00:21:00,400 --> 00:21:03,039
knowledge and use the quantum power in

424
00:21:03,039 --> 00:21:05,200
reductions

425
00:21:05,200 --> 00:21:07,600
we also use the proof system for

426
00:21:07,600 --> 00:21:12,559
ill-formed public keys as a crucial tool

427
00:21:13,039 --> 00:21:14,159
that's it

428
00:21:14,159 --> 00:21:17,840
thank you for watching my talk

