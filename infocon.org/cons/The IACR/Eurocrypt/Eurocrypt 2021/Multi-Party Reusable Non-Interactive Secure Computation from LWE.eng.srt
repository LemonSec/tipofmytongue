1
00:00:00,080 --> 00:00:01,520
hello everyone

2
00:00:01,520 --> 00:00:03,679
today i will talk about multi-party

3
00:00:03,679 --> 00:00:05,359
reusable non-interactive secure

4
00:00:05,359 --> 00:00:07,680
computation from lwe

5
00:00:07,680 --> 00:00:09,840
my name is ilan komargotsky and this is

6
00:00:09,840 --> 00:00:11,679
based on joint work with for brisbane

7
00:00:11,679 --> 00:00:16,239
jamuda irish jane and rachel

8
00:00:16,239 --> 00:00:18,800
the motivating scenario for the talk is

9
00:00:18,800 --> 00:00:20,800
the following setting imagine four

10
00:00:20,800 --> 00:00:23,359
parties one two three and four

11
00:00:23,359 --> 00:00:26,400
that each of them has a private input or

12
00:00:26,400 --> 00:00:30,480
private database a x1 x2 x3 and x4

13
00:00:30,480 --> 00:00:32,880
and they want to be able to perform

14
00:00:32,880 --> 00:00:35,520
joint computations on their input and

15
00:00:35,520 --> 00:00:36,880
they want to make sure that the

16
00:00:36,880 --> 00:00:39,680
computations are private

17
00:00:39,680 --> 00:00:42,320
so for instance party one two and three

18
00:00:42,320 --> 00:00:44,160
can come together and decide that we

19
00:00:44,160 --> 00:00:46,559
want to perform some study on their

20
00:00:46,559 --> 00:00:49,360
joint inputs and learn some function f

21
00:00:49,360 --> 00:00:51,840
on their respective inputs

22
00:00:51,840 --> 00:00:54,559
and we can imagine that this is done by

23
00:00:54,559 --> 00:00:57,600
a single message that is being sent from

24
00:00:57,600 --> 00:00:59,280
each of the parties

25
00:00:59,280 --> 00:01:00,399
to the

26
00:01:00,399 --> 00:01:02,320
public evaluator you can think of these

27
00:01:02,320 --> 00:01:04,640
functions of these messages or something

28
00:01:04,640 --> 00:01:05,920
as some

29
00:01:05,920 --> 00:01:08,560
magical encoding of the database

30
00:01:08,560 --> 00:01:10,400
and the encoding should not reveal any

31
00:01:10,400 --> 00:01:12,240
information beyond the output of the

32
00:01:12,240 --> 00:01:14,799
function that we want to compute

33
00:01:14,799 --> 00:01:17,600
and at some later stage we we may

34
00:01:17,600 --> 00:01:19,759
it may happen that some other subset of

35
00:01:19,759 --> 00:01:21,840
parties want to perform another

36
00:01:21,840 --> 00:01:24,400
computation on their joint inputs

37
00:01:24,400 --> 00:01:26,400
and maybe even at a later stage

38
00:01:26,400 --> 00:01:28,880
new parties join the game

39
00:01:28,880 --> 00:01:30,000
and they

40
00:01:30,000 --> 00:01:32,000
now want to compute something together

41
00:01:32,000 --> 00:01:34,079
with some other party

42
00:01:34,079 --> 00:01:36,320
so we want to support this complicated

43
00:01:36,320 --> 00:01:37,759
scenario

44
00:01:37,759 --> 00:01:40,320
and allow every subset of parties to

45
00:01:40,320 --> 00:01:42,960
perform computation on their joint

46
00:01:42,960 --> 00:01:45,439
inputs and we want to allow parties to

47
00:01:45,439 --> 00:01:48,399
join at any point in time

48
00:01:48,399 --> 00:01:50,560
so this sounds like a great thing but

49
00:01:50,560 --> 00:01:52,640
the problem is that even if we

50
00:01:52,640 --> 00:01:54,399
think about the simplest setting where

51
00:01:54,399 --> 00:01:56,640
there's only three parties and they're

52
00:01:56,640 --> 00:01:58,320
fixed

53
00:01:58,320 --> 00:02:01,439
and each of them wants to send just one

54
00:02:01,439 --> 00:02:04,000
message alpha to the evaluator then it's

55
00:02:04,000 --> 00:02:06,479
already pretty well known

56
00:02:06,479 --> 00:02:08,560
that it's impossible to achieve the

57
00:02:08,560 --> 00:02:10,959
standard definition of security

58
00:02:10,959 --> 00:02:13,680
where only the output of the function on

59
00:02:13,680 --> 00:02:16,800
the respective inputs is leaked because

60
00:02:16,800 --> 00:02:20,160
imagine that one party is malicious and

61
00:02:20,160 --> 00:02:22,800
it colludes with the evaluator

62
00:02:22,800 --> 00:02:26,160
then this party can imagine in its head

63
00:02:26,160 --> 00:02:28,720
that its input was something else some

64
00:02:28,720 --> 00:02:30,560
x1 prime

65
00:02:30,560 --> 00:02:31,519
and then

66
00:02:31,519 --> 00:02:32,560
if

67
00:02:32,560 --> 00:02:35,440
this was its input to begin with

68
00:02:35,440 --> 00:02:37,840
then given the two messages of the other

69
00:02:37,840 --> 00:02:39,840
parties it could have learned the value

70
00:02:39,840 --> 00:02:43,680
of the function f on a new set of inputs

71
00:02:43,680 --> 00:02:45,519
which includes the new input as it

72
00:02:45,519 --> 00:02:47,920
imagined x1 prime

73
00:02:47,920 --> 00:02:50,000
so this is clearly not something that we

74
00:02:50,000 --> 00:02:51,280
want to have

75
00:02:51,280 --> 00:02:54,319
and therefore we need to somehow

76
00:02:54,319 --> 00:02:56,239
add something more to the protocol in

77
00:02:56,239 --> 00:02:59,440
order to be able to guarantee security

78
00:02:59,440 --> 00:03:01,280
and the solution is actually not that

79
00:03:01,280 --> 00:03:03,760
complicated the minimal thing that is

80
00:03:03,760 --> 00:03:05,440
required

81
00:03:05,440 --> 00:03:07,519
is to somehow force

82
00:03:07,519 --> 00:03:09,120
each party to

83
00:03:09,120 --> 00:03:11,360
commit on its input before

84
00:03:11,360 --> 00:03:14,000
the beginning of the evaluation

85
00:03:14,000 --> 00:03:16,319
and intuitively this should this should

86
00:03:16,319 --> 00:03:18,720
prevent parties from imagining that

87
00:03:18,720 --> 00:03:20,879
their input was something else and

88
00:03:20,879 --> 00:03:24,000
thereby learn the value of some function

89
00:03:24,000 --> 00:03:25,599
on a new input

90
00:03:25,599 --> 00:03:28,239
so imagine that each party would before

91
00:03:28,239 --> 00:03:31,920
it starts to evaluate functions on its

92
00:03:31,920 --> 00:03:34,799
rece on the respective inputs each party

93
00:03:34,799 --> 00:03:37,360
publishes on the public bulletin board

94
00:03:37,360 --> 00:03:39,280
some encoding of its input think of it

95
00:03:39,280 --> 00:03:41,840
as a cryptographic commitment

96
00:03:41,840 --> 00:03:44,959
some hiding commitment

97
00:03:44,959 --> 00:03:46,959
so this commitment commitment is already

98
00:03:46,959 --> 00:03:49,519
published in the sky and each party can

99
00:03:49,519 --> 00:03:51,920
remember for itself some secrets that's

100
00:03:51,920 --> 00:03:54,319
associated with this commitment

101
00:03:54,319 --> 00:03:55,680
and now

102
00:03:55,680 --> 00:03:57,599
these messages that are sent to the

103
00:03:57,599 --> 00:04:00,959
public evaluator can be generated as

104
00:04:00,959 --> 00:04:02,560
functions of

105
00:04:02,560 --> 00:04:04,879
those encodings that are already written

106
00:04:04,879 --> 00:04:07,120
to the public bulletin board

107
00:04:07,120 --> 00:04:09,040
and this completely prevents

108
00:04:09,040 --> 00:04:10,720
an adversary from

109
00:04:10,720 --> 00:04:12,640
imagining that the input was something

110
00:04:12,640 --> 00:04:15,280
else now with those public commitments

111
00:04:15,280 --> 00:04:17,600
in the sky you can imagine that

112
00:04:17,600 --> 00:04:19,839
more parties who can join the protocol

113
00:04:19,839 --> 00:04:22,720
even after some of the evaluations

114
00:04:22,720 --> 00:04:24,960
have already occurred

115
00:04:24,960 --> 00:04:27,520
and this party can commit on its own

116
00:04:27,520 --> 00:04:28,560
input

117
00:04:28,560 --> 00:04:30,880
publish it on the public bulletin board

118
00:04:30,880 --> 00:04:33,440
and at that point it can readily start

119
00:04:33,440 --> 00:04:35,440
performing computations with any of the

120
00:04:35,440 --> 00:04:38,240
existing parties

121
00:04:38,240 --> 00:04:39,360
so this is

122
00:04:39,360 --> 00:04:42,000
in a very high level how multi-party

123
00:04:42,000 --> 00:04:43,520
reusable non-interactive secure

124
00:04:43,520 --> 00:04:45,280
computation works

125
00:04:45,280 --> 00:04:48,400
which we'll call shortly mrnisk

126
00:04:48,400 --> 00:04:50,639
slightly more formally an mrna's

127
00:04:50,639 --> 00:04:53,440
protocol will consist of three phases

128
00:04:53,440 --> 00:04:56,080
two of which are going to be phases

129
00:04:56,080 --> 00:04:58,320
where a message is outputted and the

130
00:04:58,320 --> 00:05:00,080
last phase is

131
00:05:00,080 --> 00:05:02,639
is just a computation phase

132
00:05:02,639 --> 00:05:04,720
so the first phase each party will

133
00:05:04,720 --> 00:05:07,199
commit on its input the commitment will

134
00:05:07,199 --> 00:05:09,680
output a public commitment that is going

135
00:05:09,680 --> 00:05:11,199
to be written to the public bulletin

136
00:05:11,199 --> 00:05:12,080
board

137
00:05:12,080 --> 00:05:14,479
and it will also output some secret

138
00:05:14,479 --> 00:05:16,960
state that is going to be used in the

139
00:05:16,960 --> 00:05:19,600
later computation phase

140
00:05:19,600 --> 00:05:21,840
in the computation phase

141
00:05:21,840 --> 00:05:24,320
the subset of parties is given a

142
00:05:24,320 --> 00:05:27,120
function f that they want to compute on

143
00:05:27,120 --> 00:05:29,680
their joint inputs

144
00:05:29,680 --> 00:05:33,039
the computation phase of each party will

145
00:05:33,039 --> 00:05:35,199
take as input the function

146
00:05:35,199 --> 00:05:37,600
the commitments on the inputs of all of

147
00:05:37,600 --> 00:05:40,479
the other parties and also its secrets

148
00:05:40,479 --> 00:05:42,800
own secret state

149
00:05:42,800 --> 00:05:44,720
this phase will output some public

150
00:05:44,720 --> 00:05:46,800
computation message

151
00:05:46,800 --> 00:05:49,360
and then then there will be a public

152
00:05:49,360 --> 00:05:52,160
function public evaluation function that

153
00:05:52,160 --> 00:05:54,320
will generate the output of the of the

154
00:05:54,320 --> 00:05:56,800
function that we want to compute

155
00:05:56,800 --> 00:05:58,880
this public evaluation function will not

156
00:05:58,880 --> 00:06:01,520
use any of the secrets of the parties

157
00:06:01,520 --> 00:06:03,199
because it can be made completely

158
00:06:03,199 --> 00:06:06,400
publicly so we will only use the public

159
00:06:06,400 --> 00:06:09,680
commitments and the messages

160
00:06:09,680 --> 00:06:11,600
the computation messages that were sent

161
00:06:11,600 --> 00:06:13,919
by each party

162
00:06:13,919 --> 00:06:14,880
and

163
00:06:14,880 --> 00:06:17,759
importantly we want correctness even for

164
00:06:17,759 --> 00:06:19,039
parties that

165
00:06:19,039 --> 00:06:21,440
join throughout the game

166
00:06:21,440 --> 00:06:23,520
even after some of the parties may have

167
00:06:23,520 --> 00:06:25,520
already performed

168
00:06:25,520 --> 00:06:27,840
several computation phases

169
00:06:27,840 --> 00:06:29,759
and therefore we also want the input

170
00:06:29,759 --> 00:06:31,199
encoding

171
00:06:31,199 --> 00:06:33,600
to be independent of the set of parties

172
00:06:33,600 --> 00:06:36,400
that exist in the system

173
00:06:36,400 --> 00:06:38,880
for security we will consider a standard

174
00:06:38,880 --> 00:06:40,479
notion of security of simulation

175
00:06:40,479 --> 00:06:42,880
security for simplicity you should

176
00:06:42,880 --> 00:06:45,600
imagine a semi honest adversary

177
00:06:45,600 --> 00:06:48,639
but our results will apply even for

178
00:06:48,639 --> 00:06:51,039
semi-malicious adversaries we will

179
00:06:51,039 --> 00:06:53,039
consider static corruptions namely the

180
00:06:53,039 --> 00:06:54,880
adversary commits on the set of

181
00:06:54,880 --> 00:06:57,840
corrupted parties ahead of time

182
00:06:57,840 --> 00:07:00,000
and we are in the setting of dishonest

183
00:07:00,000 --> 00:07:01,759
majority

184
00:07:01,759 --> 00:07:02,479
in

185
00:07:02,479 --> 00:07:04,080
in other words

186
00:07:04,080 --> 00:07:06,160
it may be a little bit more convenient

187
00:07:06,160 --> 00:07:09,440
to just think of mrnisk as a special

188
00:07:09,440 --> 00:07:12,080
type of two-round mpc

189
00:07:12,080 --> 00:07:14,880
where the first message of each party is

190
00:07:14,880 --> 00:07:17,520
reusable namely it can be reused with

191
00:07:17,520 --> 00:07:20,560
multiple round two messages and also the

192
00:07:20,560 --> 00:07:22,639
set of parties is completely dynamic

193
00:07:22,639 --> 00:07:24,639
namely the first round message

194
00:07:24,639 --> 00:07:26,560
doesn't depend on the number of parties

195
00:07:26,560 --> 00:07:28,560
there are identities or anything like

196
00:07:28,560 --> 00:07:31,560
that

197
00:07:31,599 --> 00:07:33,360
what do we know about this problem so we

198
00:07:33,360 --> 00:07:35,680
have a handful of results from various

199
00:07:35,680 --> 00:07:37,440
assumptions and various

200
00:07:37,440 --> 00:07:38,720
properties

201
00:07:38,720 --> 00:07:41,599
the very early constructions of two

202
00:07:41,599 --> 00:07:44,479
round npc protocols actually can

203
00:07:44,479 --> 00:07:46,960
actually be shown to satisfy

204
00:07:46,960 --> 00:07:49,120
the general structure of or the general

205
00:07:49,120 --> 00:07:51,360
properties of mrnisk

206
00:07:51,360 --> 00:07:53,840
but the problem is that they relied on

207
00:07:53,840 --> 00:07:56,000
somewhat strong assumptions like i o and

208
00:07:56,000 --> 00:07:58,720
witness encryption which we know how to

209
00:07:58,720 --> 00:08:00,639
instantiate based on well-founded

210
00:08:00,639 --> 00:08:03,039
assumptions but still they are highly

211
00:08:03,039 --> 00:08:05,280
inefficient and still rely on a

212
00:08:05,280 --> 00:08:07,120
collection of

213
00:08:07,120 --> 00:08:09,120
assumptions

214
00:08:09,120 --> 00:08:12,479
more modern two-round npc protocols

215
00:08:12,479 --> 00:08:15,120
for instance those based on

216
00:08:15,120 --> 00:08:18,080
multi kfhe or homomorphic signal sharing

217
00:08:18,080 --> 00:08:19,680
they

218
00:08:19,680 --> 00:08:21,440
they don't support the dynamic set of

219
00:08:21,440 --> 00:08:23,360
parties and therefore

220
00:08:23,360 --> 00:08:27,039
they do not implement an mrnisk

221
00:08:27,039 --> 00:08:29,199
the notion of mrnist was brought into

222
00:08:29,199 --> 00:08:31,680
spotlight about a year and a half ago by

223
00:08:31,680 --> 00:08:33,519
ben hamudah and lin

224
00:08:33,519 --> 00:08:35,919
who showed the first construction from a

225
00:08:35,919 --> 00:08:37,919
single standard assumption

226
00:08:37,919 --> 00:08:40,640
and they did it from sxdh and in this

227
00:08:40,640 --> 00:08:42,399
work and the

228
00:08:42,399 --> 00:08:44,560
concurrent work by an acetal that you're

229
00:08:44,560 --> 00:08:46,800
gonna hear about next that we achieve

230
00:08:46,800 --> 00:08:49,920
the mrnisk from lwe technically what we

231
00:08:49,920 --> 00:08:52,399
do is we identify a complete

232
00:08:52,399 --> 00:08:54,399
functionality for mrnas

233
00:08:54,399 --> 00:08:56,640
and we show how to implement it

234
00:08:56,640 --> 00:09:00,560
by using lwe namely we identify a

235
00:09:00,560 --> 00:09:03,279
primitive called reusable functional ot

236
00:09:03,279 --> 00:09:04,320
which is

237
00:09:04,320 --> 00:09:07,600
a very specific form of

238
00:09:07,600 --> 00:09:09,680
we show how to bootstrap this specific

239
00:09:09,680 --> 00:09:13,279
form of mrnisk to full-fledged mrnisk

240
00:09:13,279 --> 00:09:15,360
and we also show how to build

241
00:09:15,360 --> 00:09:17,120
this specific protocol specific

242
00:09:17,120 --> 00:09:19,760
functionality from lwe

243
00:09:19,760 --> 00:09:22,320
and as an application we observed that

244
00:09:22,320 --> 00:09:25,519
you can use an mrnas to basically

245
00:09:25,519 --> 00:09:29,120
thresholdize every multi-key fa gen

246
00:09:29,120 --> 00:09:31,120
by using an mrnis to implement the

247
00:09:31,120 --> 00:09:33,120
threshold decryption phase

248
00:09:33,120 --> 00:09:35,200
and as an application we obtain the

249
00:09:35,200 --> 00:09:37,360
construction of threshold multi-key fh

250
00:09:37,360 --> 00:09:38,240
scheme

251
00:09:38,240 --> 00:09:40,160
with better parameters than what was

252
00:09:40,160 --> 00:09:42,480
previously known

253
00:09:42,480 --> 00:09:44,560
or better assumptions than were than

254
00:09:44,560 --> 00:09:47,279
what was previously known

255
00:09:47,279 --> 00:09:49,600
so in order to overview the construction

256
00:09:49,600 --> 00:09:51,519
let me tell you a little bit of about

257
00:09:51,519 --> 00:09:53,519
how previous constructions worked and

258
00:09:53,519 --> 00:09:55,839
what they needed to assume

259
00:09:55,839 --> 00:09:58,480
so the first two round npc construction

260
00:09:58,480 --> 00:10:00,880
was based on obfuscation or

261
00:10:00,880 --> 00:10:03,360
distinguishability obfuscation

262
00:10:03,360 --> 00:10:06,399
and then people observed that you don't

263
00:10:06,399 --> 00:10:08,399
really need the full full power of

264
00:10:08,399 --> 00:10:10,880
obfuscation you need something much

265
00:10:10,880 --> 00:10:11,920
weaker

266
00:10:11,920 --> 00:10:14,480
you need garbled circuits and some some

267
00:10:14,480 --> 00:10:16,399
form of weakness encryption

268
00:10:16,399 --> 00:10:20,720
so gargital protocol from 2015 used for

269
00:10:20,720 --> 00:10:21,680
is

270
00:10:21,680 --> 00:10:24,640
used the witness encryption for np

271
00:10:24,640 --> 00:10:27,519
and the more recent work of benjamin lin

272
00:10:27,519 --> 00:10:29,920
they observed that you

273
00:10:29,920 --> 00:10:31,360
that you only need with this encryption

274
00:10:31,360 --> 00:10:33,920
for a particular language and they were

275
00:10:33,920 --> 00:10:36,320
able to implement this with subscription

276
00:10:36,320 --> 00:10:37,360
scheme

277
00:10:37,360 --> 00:10:40,320
from a standard assumption

278
00:10:40,320 --> 00:10:43,040
and in this work we relax the additional

279
00:10:43,040 --> 00:10:45,519
assumption on the garbolt circuits

280
00:10:45,519 --> 00:10:48,560
even further and we showed that you

281
00:10:48,560 --> 00:10:50,640
don't really need a full fledge which

282
00:10:50,640 --> 00:10:52,079
with this encryption

283
00:10:52,079 --> 00:10:53,920
but you can actually work with a

284
00:10:53,920 --> 00:10:56,320
seemingly weaker primitive

285
00:10:56,320 --> 00:11:00,160
that we call reusable functional ot

286
00:11:00,160 --> 00:11:03,680
and we implement it using lw

287
00:11:03,680 --> 00:11:06,399
let's explain a little bit better how io

288
00:11:06,399 --> 00:11:09,600
or witness encryption are used to get a

289
00:11:09,600 --> 00:11:11,200
two-round npc

290
00:11:11,200 --> 00:11:13,440
the main idea in most of these works is

291
00:11:13,440 --> 00:11:16,640
to take a general mpc protocol that

292
00:11:16,640 --> 00:11:18,720
could have l rounds

293
00:11:18,720 --> 00:11:20,720
where l is bigger than two and compress

294
00:11:20,720 --> 00:11:23,120
it to just two rounds with the following

295
00:11:23,120 --> 00:11:24,480
recipe

296
00:11:24,480 --> 00:11:26,480
in the first round you just commit your

297
00:11:26,480 --> 00:11:29,279
inputs with some commitment

298
00:11:29,279 --> 00:11:32,000
and in the second round instead of

299
00:11:32,000 --> 00:11:33,839
running the second round of the original

300
00:11:33,839 --> 00:11:35,120
protocol

301
00:11:35,120 --> 00:11:37,519
you obfuscate a circuit that essentially

302
00:11:37,519 --> 00:11:40,079
simulates what every party would have

303
00:11:40,079 --> 00:11:42,320
done in the previous protocol then we

304
00:11:42,320 --> 00:11:44,880
obfuscate a circuit that gets all of the

305
00:11:44,880 --> 00:11:46,880
previous messages

306
00:11:46,880 --> 00:11:48,480
that

307
00:11:48,480 --> 00:11:50,320
were sent in the protocol and it

308
00:11:50,320 --> 00:11:52,720
generates the next message

309
00:11:52,720 --> 00:11:55,760
that the party would have generated

310
00:11:55,760 --> 00:11:58,480
if it had seen these messages in the

311
00:11:58,480 --> 00:12:00,959
protocol

312
00:12:00,959 --> 00:12:03,120
and gls 15

313
00:12:03,120 --> 00:12:05,120
notice that you don't really need the

314
00:12:05,120 --> 00:12:07,440
full power of io you can just garble a

315
00:12:07,440 --> 00:12:08,720
circuit

316
00:12:08,720 --> 00:12:09,519
that

317
00:12:09,519 --> 00:12:11,839
does whatever you want to do namely

318
00:12:11,839 --> 00:12:14,480
simulate the code of each party and you

319
00:12:14,480 --> 00:12:16,560
only need witness encryption

320
00:12:16,560 --> 00:12:17,279
to

321
00:12:17,279 --> 00:12:21,440
intuitively to give the right labels

322
00:12:21,440 --> 00:12:24,079
to the other parties so that they could

323
00:12:24,079 --> 00:12:26,639
evaluate the karbal circuit

324
00:12:26,639 --> 00:12:27,519
so

325
00:12:27,519 --> 00:12:29,279
here's the here it is in a little bit

326
00:12:29,279 --> 00:12:30,720
more detail

327
00:12:30,720 --> 00:12:34,079
let's just assume i o for simplicity

328
00:12:34,079 --> 00:12:36,240
let's assume the original run protocol

329
00:12:36,240 --> 00:12:38,720
works as follows you compute the next

330
00:12:38,720 --> 00:12:41,040
round message given your input and

331
00:12:41,040 --> 00:12:42,720
randomness you generate the first

332
00:12:42,720 --> 00:12:43,680
message

333
00:12:43,680 --> 00:12:45,440
and then to generate the second message

334
00:12:45,440 --> 00:12:47,200
you collect all of the messages that you

335
00:12:47,200 --> 00:12:50,000
saw in round number one and you apply

336
00:12:50,000 --> 00:12:53,040
some function next on your input your

337
00:12:53,040 --> 00:12:54,880
randomness and all of the messages that

338
00:12:54,880 --> 00:12:57,360
you saw and you do this until the end of

339
00:12:57,360 --> 00:12:59,920
the protocol

340
00:12:59,920 --> 00:13:01,279
how would you

341
00:13:01,279 --> 00:13:04,480
translate this to a two-round protocol

342
00:13:04,480 --> 00:13:07,200
so the the first idea would be to

343
00:13:07,200 --> 00:13:09,360
compute the first round message that's

344
00:13:09,360 --> 00:13:11,120
easy you can do it

345
00:13:11,120 --> 00:13:13,360
but then instead of sending the second

346
00:13:13,360 --> 00:13:15,920
round message you because you you can't

347
00:13:15,920 --> 00:13:17,360
send the second round message because

348
00:13:17,360 --> 00:13:19,519
you don't have all of the inputs

349
00:13:19,519 --> 00:13:21,519
which are the first round messages of

350
00:13:21,519 --> 00:13:23,440
all of the other parties so you just

351
00:13:23,440 --> 00:13:25,120
output a circuit

352
00:13:25,120 --> 00:13:26,959
an obfuscated circuit that has your

353
00:13:26,959 --> 00:13:30,320
secrets embedded inside it gets as input

354
00:13:30,320 --> 00:13:32,480
out of the second round messages all of

355
00:13:32,480 --> 00:13:34,320
the first round messages from the other

356
00:13:34,320 --> 00:13:36,880
parties and it outputs your second round

357
00:13:36,880 --> 00:13:37,839
message

358
00:13:37,839 --> 00:13:39,839
and each party does the same thing for

359
00:13:39,839 --> 00:13:42,399
each of the rounds of the protocol

360
00:13:42,399 --> 00:13:43,839
this is clearly

361
00:13:43,839 --> 00:13:45,839
insecure because it's only a one-round

362
00:13:45,839 --> 00:13:48,959
protocol so what you actually need is to

363
00:13:48,959 --> 00:13:51,279
also have a first round where you first

364
00:13:51,279 --> 00:13:53,519
commit on your input and then you need

365
00:13:53,519 --> 00:13:55,600
to make sure that

366
00:13:55,600 --> 00:13:56,800
every

367
00:13:56,800 --> 00:13:59,040
message is also associated with the

368
00:13:59,040 --> 00:13:59,920
proof

369
00:13:59,920 --> 00:14:02,639
that things were done correctly

370
00:14:02,639 --> 00:14:05,279
and so namely now this each circuit will

371
00:14:05,279 --> 00:14:07,360
get a collection of proofs

372
00:14:07,360 --> 00:14:10,160
it will verify that these proofs were

373
00:14:10,160 --> 00:14:11,839
generated honestly

374
00:14:11,839 --> 00:14:13,920
and it will generate an extra message

375
00:14:13,920 --> 00:14:15,600
along with the proof

376
00:14:15,600 --> 00:14:18,959
for the next circuits to verify

377
00:14:18,959 --> 00:14:21,279
so this is how most of these protocols

378
00:14:21,279 --> 00:14:22,079
work

379
00:14:22,079 --> 00:14:24,240
and the question is how do you implement

380
00:14:24,240 --> 00:14:26,320
this obfuscation and how do you

381
00:14:26,320 --> 00:14:28,399
implement the zero knowledge proof

382
00:14:28,399 --> 00:14:31,760
and how do you implement the commitment

383
00:14:31,760 --> 00:14:33,839
since we are talking about a reusable

384
00:14:33,839 --> 00:14:36,320
protocol where the commitment

385
00:14:36,320 --> 00:14:38,880
from round one is reusable you actually

386
00:14:38,880 --> 00:14:40,880
want the first round message to contain

387
00:14:40,880 --> 00:14:43,760
not a single piece of randomness but

388
00:14:43,760 --> 00:14:46,240
a prf key from which you can derive as

389
00:14:46,240 --> 00:14:48,480
much randomness as you would like

390
00:14:48,480 --> 00:14:50,160
when you use it in the second round

391
00:14:50,160 --> 00:14:52,639
message

392
00:14:53,600 --> 00:14:55,839
let's try to understand what's the

393
00:14:55,839 --> 00:14:58,399
weakest primitive that we can imagine

394
00:14:58,399 --> 00:15:01,680
that suffices for construction of mrnas

395
00:15:01,680 --> 00:15:03,360
we call this primitive very usable

396
00:15:03,360 --> 00:15:07,120
functional ot and it's basically a label

397
00:15:07,120 --> 00:15:09,920
exchange functionality

398
00:15:09,920 --> 00:15:11,760
imagine two parties

399
00:15:11,760 --> 00:15:13,199
alice and bob

400
00:15:13,199 --> 00:15:15,680
where bob has already sent his message

401
00:15:15,680 --> 00:15:17,760
so it computed based on the public

402
00:15:17,760 --> 00:15:19,199
messages on all of the public

403
00:15:19,199 --> 00:15:21,519
information that was sent by now

404
00:15:21,519 --> 00:15:24,160
together with its private input x2 and

405
00:15:24,160 --> 00:15:26,959
k2 where k2 is the fear of c

406
00:15:26,959 --> 00:15:29,759
it sends a message b to the sky or to

407
00:15:29,759 --> 00:15:32,079
the as the next message and now

408
00:15:32,079 --> 00:15:34,079
everybody want to compute

409
00:15:34,079 --> 00:15:37,120
the next message of alice

410
00:15:37,120 --> 00:15:40,000
what alice will do alice will actually

411
00:15:40,000 --> 00:15:42,240
compute garbled circuit

412
00:15:42,240 --> 00:15:46,720
that takes as input bob's a message

413
00:15:46,720 --> 00:15:49,199
and it will output the second the next

414
00:15:49,199 --> 00:15:52,079
message that it would have sent given

415
00:15:52,079 --> 00:15:56,160
bob's message but alice will not

416
00:15:56,160 --> 00:15:58,160
give this circuit in the clear it will

417
00:15:58,160 --> 00:16:00,000
not use confiscation it will just use

418
00:16:00,000 --> 00:16:01,680
garbling

419
00:16:01,680 --> 00:16:04,720
and garbling outputs two sets of labels

420
00:16:04,720 --> 00:16:06,320
for the inputs

421
00:16:06,320 --> 00:16:09,120
and what we want is actually for bob to

422
00:16:09,120 --> 00:16:10,079
learn

423
00:16:10,079 --> 00:16:12,720
the right set of labels corresponding to

424
00:16:12,720 --> 00:16:15,440
its input so if b was

425
00:16:15,440 --> 00:16:18,800
at the b zero we want to learn l zero if

426
00:16:18,800 --> 00:16:22,160
b is one we want to learn l one

427
00:16:22,160 --> 00:16:23,600
but this is

428
00:16:23,600 --> 00:16:25,759
indeed the minimal functionality of the

429
00:16:25,759 --> 00:16:27,440
functionality that you need in order to

430
00:16:27,440 --> 00:16:28,959
implement

431
00:16:28,959 --> 00:16:31,519
the approach that we had with with

432
00:16:31,519 --> 00:16:34,000
garbled circuits

433
00:16:34,000 --> 00:16:35,680
and this is we call this primitive as i

434
00:16:35,680 --> 00:16:37,440
mentioned we call it reusable functional

435
00:16:37,440 --> 00:16:39,600
ot which is just a special case of

436
00:16:39,600 --> 00:16:43,440
mrnisk for two parties

437
00:16:43,440 --> 00:16:46,240
so here again is what we want we have

438
00:16:46,240 --> 00:16:49,199
two parties alice and bob

439
00:16:49,199 --> 00:16:52,480
alice's input is denoted x1 boxing the

440
00:16:52,480 --> 00:16:55,040
private input is below the x2

441
00:16:55,040 --> 00:16:58,079
and we want to output a bit and another

442
00:16:58,079 --> 00:17:00,000
string l sub b

443
00:17:00,000 --> 00:17:01,440
where

444
00:17:01,440 --> 00:17:04,880
g1 is some public function of x1 and it

445
00:17:04,880 --> 00:17:07,439
outputs two strings l0 and l1 you can

446
00:17:07,439 --> 00:17:10,079
just think of these as labels

447
00:17:10,079 --> 00:17:10,959
and

448
00:17:10,959 --> 00:17:11,760
b

449
00:17:11,760 --> 00:17:13,839
is a bit which is the output of some

450
00:17:13,839 --> 00:17:15,679
public function g2

451
00:17:15,679 --> 00:17:16,839
of

452
00:17:16,839 --> 00:17:19,760
x2 so this is what we want we want to

453
00:17:19,760 --> 00:17:21,599
compute

454
00:17:21,599 --> 00:17:23,520
and mrnisk for this specific

455
00:17:23,520 --> 00:17:24,959
functionality so this is just a

456
00:17:24,959 --> 00:17:27,919
two-party functionality

457
00:17:27,919 --> 00:17:29,520
the idea for the construction is

458
00:17:29,520 --> 00:17:31,919
actually very very simple given previous

459
00:17:31,919 --> 00:17:32,880
works

460
00:17:32,880 --> 00:17:35,600
bob will commit to x2 using the fully

461
00:17:35,600 --> 00:17:37,360
homomorphic commitment

462
00:17:37,360 --> 00:17:40,960
so it can first commit on x2 and now

463
00:17:40,960 --> 00:17:43,919
anybody can compute publicly a

464
00:17:43,919 --> 00:17:47,120
commitment to g2 of x2 namely to the bit

465
00:17:47,120 --> 00:17:48,880
b

466
00:17:48,880 --> 00:17:51,280
and what alice will do it has two

467
00:17:51,280 --> 00:17:54,960
strings l0 and l1 it will encrypt both

468
00:17:54,960 --> 00:17:56,480
of them

469
00:17:56,480 --> 00:17:59,039
a with a special encryption scheme

470
00:17:59,039 --> 00:18:02,400
that can be decrypted by whoever has a

471
00:18:02,400 --> 00:18:03,840
proof

472
00:18:03,840 --> 00:18:06,160
that the commitment

473
00:18:06,160 --> 00:18:08,400
sees sub g2

474
00:18:08,400 --> 00:18:10,720
is a commitment to the bit to the right

475
00:18:10,720 --> 00:18:14,960
bit so if b is let's say zero

476
00:18:14,960 --> 00:18:16,240
then

477
00:18:16,240 --> 00:18:18,400
whoever has a proof that the commitment

478
00:18:18,400 --> 00:18:21,280
is the commitment to zero

479
00:18:21,280 --> 00:18:23,520
for example has an opening

480
00:18:23,520 --> 00:18:24,720
then

481
00:18:24,720 --> 00:18:28,799
this person can also recover l sub zero

482
00:18:28,799 --> 00:18:31,280
bob knows a legal proof that would that

483
00:18:31,280 --> 00:18:34,160
will allow him to open elsa b the right

484
00:18:34,160 --> 00:18:35,280
l sub b

485
00:18:35,280 --> 00:18:37,600
but the problem is that an af proof will

486
00:18:37,600 --> 00:18:40,400
just contain let's say something like x2

487
00:18:40,400 --> 00:18:42,880
which essentially reveals

488
00:18:42,880 --> 00:18:44,320
bob's input

489
00:18:44,320 --> 00:18:46,240
so bob will actually need to provide a

490
00:18:46,240 --> 00:18:48,000
zero knowledge proof

491
00:18:48,000 --> 00:18:50,720
attesting to the fact that he knows that

492
00:18:50,720 --> 00:18:55,120
cg2 is a commitment to the right bit

493
00:18:55,520 --> 00:18:58,240
the way we implement it is that we first

494
00:18:58,240 --> 00:19:00,799
we implement the commitments as gsw

495
00:19:00,799 --> 00:19:02,080
commitments

496
00:19:02,080 --> 00:19:04,720
and we create this special encryption

497
00:19:04,720 --> 00:19:07,280
scheme and proof scheme

498
00:19:07,280 --> 00:19:09,760
using ideas from home commitment

499
00:19:09,760 --> 00:19:12,480
literature and the recent two-round

500
00:19:12,480 --> 00:19:15,039
statistical sender ot of

501
00:19:15,039 --> 00:19:17,039
mercureskin.link

502
00:19:17,039 --> 00:19:18,799
in slightly more detail if you remember

503
00:19:18,799 --> 00:19:21,280
the commitments look like a homomorphic

504
00:19:21,280 --> 00:19:25,360
commitment looks like ar plus x g where

505
00:19:25,360 --> 00:19:27,679
x is the b that you want to commit to

506
00:19:27,679 --> 00:19:28,799
and

507
00:19:28,799 --> 00:19:31,360
the homomorphic commitment looks like a

508
00:19:31,360 --> 00:19:34,559
times some new r that's a function of g

509
00:19:34,559 --> 00:19:35,600
2

510
00:19:35,600 --> 00:19:37,120
plus something that

511
00:19:37,120 --> 00:19:39,919
looks like one minus b times g

512
00:19:39,919 --> 00:19:42,480
and the important point is that whoever

513
00:19:42,480 --> 00:19:43,360
has

514
00:19:43,360 --> 00:19:45,760
the opening for the original commitment

515
00:19:45,760 --> 00:19:48,080
can also compute an opening for the new

516
00:19:48,080 --> 00:19:49,760
commitment

517
00:19:49,760 --> 00:19:51,760
and encryption is going to be very easy

518
00:19:51,760 --> 00:19:54,160
it's generating lwe sample

519
00:19:54,160 --> 00:19:58,160
uh with a secret sb and you mask elsa

520
00:19:58,160 --> 00:20:00,000
better with

521
00:20:00,000 --> 00:20:03,360
with essabeta with the lw secret

522
00:20:03,360 --> 00:20:05,200
and the zero knowledge proof is going to

523
00:20:05,200 --> 00:20:07,360
be just a short

524
00:20:07,360 --> 00:20:10,480
basis for a specific lattice by setting

525
00:20:10,480 --> 00:20:11,919
up the parameters

526
00:20:11,919 --> 00:20:13,760
correctly you can show that for the

527
00:20:13,760 --> 00:20:15,440
right value of b

528
00:20:15,440 --> 00:20:18,159
bob can indeed find a short basis for

529
00:20:18,159 --> 00:20:20,480
this lattice and therefore recover as a

530
00:20:20,480 --> 00:20:21,600
beta

531
00:20:21,600 --> 00:20:22,960
and if

532
00:20:22,960 --> 00:20:24,960
b is not the right value

533
00:20:24,960 --> 00:20:27,360
then the linear noisy equation is lossy

534
00:20:27,360 --> 00:20:28,640
and therefore

535
00:20:28,640 --> 00:20:31,360
most of the information about s sub beta

536
00:20:31,360 --> 00:20:33,200
is lost

537
00:20:33,200 --> 00:20:35,360
so this is in a very high level how we

538
00:20:35,360 --> 00:20:37,360
build this reusable functional ot from

539
00:20:37,360 --> 00:20:40,080
lwe

540
00:20:41,120 --> 00:20:42,960
let me conclude

541
00:20:42,960 --> 00:20:45,039
what we did is we identified the

542
00:20:45,039 --> 00:20:48,000
complete primitive for mrnas we called

543
00:20:48,000 --> 00:20:50,240
it reusable functional ot

544
00:20:50,240 --> 00:20:52,640
it's somewhat analogous to ot in

545
00:20:52,640 --> 00:20:55,200
standard secure computation

546
00:20:55,200 --> 00:20:57,280
we also were able to construct a

547
00:20:57,280 --> 00:21:00,080
reusable functionality from lwe and we

548
00:21:00,080 --> 00:21:01,679
have applications for threshold

549
00:21:01,679 --> 00:21:03,600
multi-key fpg

550
00:21:03,600 --> 00:21:04,559
one

551
00:21:04,559 --> 00:21:06,559
clear open problem is to

552
00:21:06,559 --> 00:21:08,720
build a reusable functionality from

553
00:21:08,720 --> 00:21:13,039
something like dth this is still open

554
00:21:13,039 --> 00:21:15,280
finally i wanted to mention a new work

555
00:21:15,280 --> 00:21:16,799
on imprint

556
00:21:16,799 --> 00:21:18,720
constructing the first maliciously

557
00:21:18,720 --> 00:21:19,679
secure

558
00:21:19,679 --> 00:21:22,240
emernisk this is joint work with rex

559
00:21:22,240 --> 00:21:24,640
fernando and ayush jane

560
00:21:24,640 --> 00:21:28,159
please see april if you're interested

561
00:21:28,159 --> 00:21:31,840
thank you very much for listening

