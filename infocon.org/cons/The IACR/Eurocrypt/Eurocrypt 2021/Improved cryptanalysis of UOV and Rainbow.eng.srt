1
00:00:00,640 --> 00:00:03,439
hello everyone my name is rod burles and

2
00:00:03,439 --> 00:00:04,960
i'll be talking about the improved grip

3
00:00:04,960 --> 00:00:08,720
analysis of oil and vinegar and rainbow

4
00:00:08,720 --> 00:00:10,719
so i'll start by explaining what oil

5
00:00:10,719 --> 00:00:12,480
vinegar and rainbow are

6
00:00:12,480 --> 00:00:15,120
they are multivirus signature algorithms

7
00:00:15,120 --> 00:00:17,760
and oil and vinegar was invented in 1997

8
00:00:17,760 --> 00:00:19,920
by patara and then in the following

9
00:00:19,920 --> 00:00:22,320
years there was some cryptanalysis

10
00:00:22,320 --> 00:00:23,039
but

11
00:00:23,039 --> 00:00:25,680
after a couple years the ideas dried up

12
00:00:25,680 --> 00:00:27,760
and there have not really been any

13
00:00:27,760 --> 00:00:31,279
improvements since then and vinegar is

14
00:00:31,279 --> 00:00:33,120
has quite good signature size for

15
00:00:33,120 --> 00:00:35,120
example you could have 90 byte

16
00:00:35,120 --> 00:00:38,640
signatures at this security level one

17
00:00:38,640 --> 00:00:40,879
but the public keys are quite large for

18
00:00:40,879 --> 00:00:42,840
example 240

19
00:00:42,840 --> 00:00:45,920
kilobytes and then there was a

20
00:00:45,920 --> 00:00:49,039
new signature scheme invented in 2005 by

21
00:00:49,039 --> 00:00:51,280
lincoln schmidt and this is based on the

22
00:00:51,280 --> 00:00:52,559
vinegar scheme

23
00:00:52,559 --> 00:00:54,399
in a sense it's basically multiple

24
00:00:54,399 --> 00:00:56,840
layers of oil and vinegar

25
00:00:56,840 --> 00:00:59,760
combined and this makes the scheme a

26
00:00:59,760 --> 00:01:01,680
little bit more complicated so there has

27
00:01:01,680 --> 00:01:02,640
been more

28
00:01:02,640 --> 00:01:04,479
cryptanalysis

29
00:01:04,479 --> 00:01:05,680
and

30
00:01:05,680 --> 00:01:08,000
yeah now rainbow is one of the finest in

31
00:01:08,000 --> 00:01:10,960
the nist standardization competition

32
00:01:10,960 --> 00:01:12,479
and

33
00:01:12,479 --> 00:01:13,840
it's a little bit more efficient than

34
00:01:13,840 --> 00:01:15,200
oil and vinegar for example you could

35
00:01:15,200 --> 00:01:17,439
have 70 bite signatures instead of 90

36
00:01:17,439 --> 00:01:19,439
bytes and also the public keys are a

37
00:01:19,439 --> 00:01:22,000
little bit smaller but still

38
00:01:22,000 --> 00:01:23,360
quite big

39
00:01:23,360 --> 00:01:25,840
and so in this talk i'll first tell you

40
00:01:25,840 --> 00:01:27,920
how oil and vinegar and vape will work

41
00:01:27,920 --> 00:01:29,920
and then i'll tell you about new

42
00:01:29,920 --> 00:01:32,079
improved key recovery attacks on these

43
00:01:32,079 --> 00:01:33,600
signature schemes

44
00:01:33,600 --> 00:01:35,600
okay so i said oil vinegar and rainbow

45
00:01:35,600 --> 00:01:37,840
are multivariate signature schemes and

46
00:01:37,840 --> 00:01:39,439
this means that they're based on a

47
00:01:39,439 --> 00:01:41,280
multivariate quadratic map

48
00:01:41,280 --> 00:01:43,200
and a multiplied quadratic map is just a

49
00:01:43,200 --> 00:01:45,600
sequence of homogeneous quadratic

50
00:01:45,600 --> 00:01:48,000
polynomials in a number of variables

51
00:01:48,000 --> 00:01:49,920
so this gives you

52
00:01:49,920 --> 00:01:51,360
a map from

53
00:01:51,360 --> 00:01:56,079
fq to the n to fq to the m and

54
00:01:56,079 --> 00:01:57,680
we use these maps because we believe

55
00:01:57,680 --> 00:01:59,520
they are one way

56
00:01:59,520 --> 00:02:01,200
because this uh this problem which you

57
00:02:01,200 --> 00:02:03,680
call the mq problem is is believed to be

58
00:02:03,680 --> 00:02:04,880
hard

59
00:02:04,880 --> 00:02:06,399
and it says that if i give you a

60
00:02:06,399 --> 00:02:08,800
multiplier quadratic map p and a target

61
00:02:08,800 --> 00:02:09,679
t

62
00:02:09,679 --> 00:02:12,720
in in your output space f q to m

63
00:02:12,720 --> 00:02:14,720
then finding a pre-image s such that p

64
00:02:14,720 --> 00:02:16,400
of s is equals to t

65
00:02:16,400 --> 00:02:18,160
is a hard problem

66
00:02:18,160 --> 00:02:19,120
and

67
00:02:19,120 --> 00:02:21,280
we know that this problem is np-hard and

68
00:02:21,280 --> 00:02:22,560
we also think

69
00:02:22,560 --> 00:02:24,319
that it's exponentially hard even on

70
00:02:24,319 --> 00:02:26,879
average for quantum computers so it's a

71
00:02:26,879 --> 00:02:28,879
good problem to base

72
00:02:28,879 --> 00:02:31,680
post quantum cryptography on

73
00:02:31,680 --> 00:02:33,599
and our signature schemes are based on

74
00:02:33,599 --> 00:02:35,760
trapdoor multivariate maps

75
00:02:35,760 --> 00:02:38,000
this means that p looks random so if you

76
00:02:38,000 --> 00:02:40,160
don't know any better then computing

77
00:02:40,160 --> 00:02:41,840
preimages is hard because we believe the

78
00:02:41,840 --> 00:02:44,319
mq problem is hard for random

79
00:02:44,319 --> 00:02:46,000
polynomial maps

80
00:02:46,000 --> 00:02:47,040
but

81
00:02:47,040 --> 00:02:48,400
actually there is some secret

82
00:02:48,400 --> 00:02:50,319
information and if you know the secret

83
00:02:50,319 --> 00:02:53,200
information then computing pre-images is

84
00:02:53,200 --> 00:02:54,800
actually easy

85
00:02:54,800 --> 00:02:57,120
and once you have such tribal functions

86
00:02:57,120 --> 00:02:58,720
then you can build

87
00:02:58,720 --> 00:03:00,480
signature schemes with the full domain

88
00:03:00,480 --> 00:03:01,280
hash

89
00:03:01,280 --> 00:03:03,280
approach this is also what rsa

90
00:03:03,280 --> 00:03:05,360
signatures use

91
00:03:05,360 --> 00:03:07,200
and so here the public key is just a

92
00:03:07,200 --> 00:03:08,640
description of your

93
00:03:08,640 --> 00:03:11,040
of your trapdoor function p

94
00:03:11,040 --> 00:03:12,640
the secret key is your traveler

95
00:03:12,640 --> 00:03:14,959
information and then to create a

96
00:03:14,959 --> 00:03:18,080
signature for a message m you first hash

97
00:03:18,080 --> 00:03:20,800
the message into your output space

98
00:03:20,800 --> 00:03:22,560
and then you produce a pre-image for

99
00:03:22,560 --> 00:03:25,760
this hash so your signature will just be

100
00:03:25,760 --> 00:03:28,560
an input s such that p of s is equal to

101
00:03:28,560 --> 00:03:31,519
the hash of your message

102
00:03:31,519 --> 00:03:33,200
okay so to understand oil and vinegar

103
00:03:33,200 --> 00:03:34,959
and rainbow you just need to understand

104
00:03:34,959 --> 00:03:37,200
how these trapdoors work

105
00:03:37,200 --> 00:03:39,360
but before i explain that i have to

106
00:03:39,360 --> 00:03:41,280
introduce some notation

107
00:03:41,280 --> 00:03:43,680
so we say that if p is a multivariate

108
00:03:43,680 --> 00:03:44,879
quadratic map

109
00:03:44,879 --> 00:03:46,799
then its polar form

110
00:03:46,799 --> 00:03:47,680
is

111
00:03:47,680 --> 00:03:50,400
this function p prime of two variables

112
00:03:50,400 --> 00:03:53,120
and it's justified defined as p of x

113
00:03:53,120 --> 00:03:56,159
plus y minus p of x minus p of y

114
00:03:56,159 --> 00:03:57,680
plus p of zero

115
00:03:57,680 --> 00:03:58,640
but

116
00:03:58,640 --> 00:04:02,159
here the p is homogeneous so you can

117
00:04:02,159 --> 00:04:04,080
forget about p of zero

118
00:04:04,080 --> 00:04:06,720
and then it's easy to see that p of x

119
00:04:06,720 --> 00:04:08,640
and y is symmetric

120
00:04:08,640 --> 00:04:10,720
and by linear

121
00:04:10,720 --> 00:04:12,400
so this is going to be

122
00:04:12,400 --> 00:04:13,760
useful

123
00:04:13,760 --> 00:04:15,920
and now we can explain how the vinegar

124
00:04:15,920 --> 00:04:17,519
trapdoor works

125
00:04:17,519 --> 00:04:19,600
so the trapdoor structure is actually

126
00:04:19,600 --> 00:04:22,479
very simple it's just a linear subspace

127
00:04:22,479 --> 00:04:25,840
of of your input space of dimension m

128
00:04:25,840 --> 00:04:27,600
where m is the dimension of the output

129
00:04:27,600 --> 00:04:28,560
space

130
00:04:28,560 --> 00:04:32,000
such that uh your map p vanishes on the

131
00:04:32,000 --> 00:04:34,240
space o so this means for every vector o

132
00:04:34,240 --> 00:04:36,400
in the space o p have always equal to

133
00:04:36,400 --> 00:04:37,919
zero

134
00:04:37,919 --> 00:04:39,040
um

135
00:04:39,040 --> 00:04:40,639
and yeah if you if you know such a space

136
00:04:40,639 --> 00:04:43,040
then it turns out that it's easy to

137
00:04:43,040 --> 00:04:44,800
compute three images

138
00:04:44,800 --> 00:04:46,960
how do you do that well the first step

139
00:04:46,960 --> 00:04:49,360
is to just pick a random input this is

140
00:04:49,360 --> 00:04:52,400
called the vinegar vector

141
00:04:52,400 --> 00:04:54,240
and then

142
00:04:54,240 --> 00:04:56,560
you solve for a vector o in your order

143
00:04:56,560 --> 00:04:57,440
space

144
00:04:57,440 --> 00:05:00,400
such that p of v plus o is equal to your

145
00:05:00,400 --> 00:05:01,520
target

146
00:05:01,520 --> 00:05:04,880
and this is easy because if you use

147
00:05:04,880 --> 00:05:07,759
our definition of the polar form you can

148
00:05:07,759 --> 00:05:11,199
rewrite p of v plus o as just p of v

149
00:05:11,199 --> 00:05:12,639
plus p of o

150
00:05:12,639 --> 00:05:15,280
plus the polar form of v and o

151
00:05:15,280 --> 00:05:16,080
but

152
00:05:16,080 --> 00:05:18,560
like we know p of o is zero because p

153
00:05:18,560 --> 00:05:21,039
vanishes on the space o

154
00:05:21,039 --> 00:05:23,120
so what's left is just

155
00:05:23,120 --> 00:05:24,960
p of v that's some fixed value because

156
00:05:24,960 --> 00:05:27,919
we chose a fixed value for v

157
00:05:27,919 --> 00:05:31,680
and then something that's linear in o

158
00:05:31,680 --> 00:05:33,919
so actually to solve this for o is just

159
00:05:33,919 --> 00:05:36,560
a system of m linear equations in m

160
00:05:36,560 --> 00:05:38,800
variables so you can just

161
00:05:38,800 --> 00:05:40,400
find a solution with gaussian

162
00:05:40,400 --> 00:05:42,320
elimination

163
00:05:42,320 --> 00:05:45,120
uh and if it turns out that this system

164
00:05:45,120 --> 00:05:46,960
does not have any solutions

165
00:05:46,960 --> 00:05:49,840
which is uh unlikely but it happens

166
00:05:49,840 --> 00:05:51,600
the approach probability roughly one

167
00:05:51,600 --> 00:05:52,639
over q

168
00:05:52,639 --> 00:05:54,320
then you can just pick a different

169
00:05:54,320 --> 00:05:57,440
vinegar vector and try again

170
00:05:57,440 --> 00:05:59,360
right so you just do this until you find

171
00:05:59,360 --> 00:06:01,280
a solution and then once you have a

172
00:06:01,280 --> 00:06:03,759
solution you just output

173
00:06:03,759 --> 00:06:05,520
v plus o

174
00:06:05,520 --> 00:06:07,919
okay so that's how the vinegar trap door

175
00:06:07,919 --> 00:06:09,840
works it's very simple you can explain

176
00:06:09,840 --> 00:06:11,600
it on one slide

177
00:06:11,600 --> 00:06:13,280
and if you turn it into a signature

178
00:06:13,280 --> 00:06:14,160
scheme

179
00:06:14,160 --> 00:06:15,680
then you can prove that the signature

180
00:06:15,680 --> 00:06:17,840
scheme is secure based on two

181
00:06:17,840 --> 00:06:19,280
assumptions

182
00:06:19,280 --> 00:06:22,240
first assumption is this mq problem that

183
00:06:22,240 --> 00:06:24,800
i mentioned before and this seems like a

184
00:06:24,800 --> 00:06:27,120
very plausible assumption

185
00:06:27,120 --> 00:06:29,600
and the second assumption is

186
00:06:29,600 --> 00:06:31,440
that if you generate

187
00:06:31,440 --> 00:06:33,840
your your function p that vanishes on

188
00:06:33,840 --> 00:06:35,280
some random

189
00:06:35,280 --> 00:06:36,720
space o

190
00:06:36,720 --> 00:06:39,039
then when you get this indistinguishable

191
00:06:39,039 --> 00:06:41,919
from a uniformly random map p

192
00:06:41,919 --> 00:06:45,280
and yeah this is a this is an assumption

193
00:06:45,280 --> 00:06:47,520
uh that has been analyzed since the

194
00:06:47,520 --> 00:06:49,919
invention of the vinegar scheme

195
00:06:49,919 --> 00:06:51,360
but

196
00:06:51,360 --> 00:06:53,280
yeah it's of course much more ad hoc

197
00:06:53,280 --> 00:06:55,759
than our first assumption and it's this

198
00:06:55,759 --> 00:06:57,919
assumption that we're going to try to

199
00:06:57,919 --> 00:06:59,440
attack in this

200
00:06:59,440 --> 00:07:01,520
in this paper in this work

201
00:07:01,520 --> 00:07:03,520
but before we try to break this

202
00:07:03,520 --> 00:07:05,199
assumption i'm first going to explain

203
00:07:05,199 --> 00:07:07,840
how the rainbow trap door works

204
00:07:07,840 --> 00:07:09,039
so

205
00:07:09,039 --> 00:07:10,880
with rainbow the tribal structure is a

206
00:07:10,880 --> 00:07:13,039
little bit more complicated

207
00:07:13,039 --> 00:07:15,840
so instead of just one

208
00:07:15,840 --> 00:07:18,479
one space o you now have a chain of

209
00:07:18,479 --> 00:07:19,840
subspaces

210
00:07:19,840 --> 00:07:22,639
from a one up to okay where k is some

211
00:07:22,639 --> 00:07:23,919
integer

212
00:07:23,919 --> 00:07:27,520
and also a chain of uh subspaces of the

213
00:07:27,520 --> 00:07:29,360
output space

214
00:07:29,360 --> 00:07:32,319
and then our tabler function p is chosen

215
00:07:32,319 --> 00:07:33,759
in such a way

216
00:07:33,759 --> 00:07:34,800
that it

217
00:07:34,800 --> 00:07:38,479
maps a one into w one or two into w two

218
00:07:38,479 --> 00:07:40,639
and so on

219
00:07:40,639 --> 00:07:43,039
so so yeah this property is just a

220
00:07:43,039 --> 00:07:46,240
generalization of the oil and vinegar

221
00:07:46,240 --> 00:07:49,759
trapdoor because if you put k equals one

222
00:07:49,759 --> 00:07:52,560
then there's just one

223
00:07:52,560 --> 00:07:53,599
one o

224
00:07:53,599 --> 00:07:54,560
and p

225
00:07:54,560 --> 00:07:59,280
sends o into w1 but w1 is just

226
00:07:59,280 --> 00:08:00,479
the trivial

227
00:08:00,479 --> 00:08:03,520
uh space with only the zero vector

228
00:08:03,520 --> 00:08:06,080
so this is exactly the scenario that we

229
00:08:06,080 --> 00:08:07,599
were in

230
00:08:07,599 --> 00:08:10,479
in uv so just one space and p vanishes

231
00:08:10,479 --> 00:08:12,960
on that space

232
00:08:12,960 --> 00:08:14,639
but actually there's a

233
00:08:14,639 --> 00:08:16,479
an additional property

234
00:08:16,479 --> 00:08:17,759
that we

235
00:08:17,759 --> 00:08:20,080
want and it has to do with this

236
00:08:20,080 --> 00:08:21,120
polar

237
00:08:21,120 --> 00:08:22,000
form

238
00:08:22,000 --> 00:08:24,639
p prime that we defined earlier

239
00:08:24,639 --> 00:08:27,199
and we want that p prime

240
00:08:27,199 --> 00:08:30,000
for any vector x if you plug in this x

241
00:08:30,000 --> 00:08:34,399
then you get a map from o2 into w1

242
00:08:34,399 --> 00:08:37,919
from o3 into w2 and so on so

243
00:08:37,919 --> 00:08:42,958
uh o i get sent into wi minus one

244
00:08:42,958 --> 00:08:44,959
and yeah this is an additional property

245
00:08:44,959 --> 00:08:47,279
that we need in order to make the the

246
00:08:47,279 --> 00:08:49,440
trap door work so it turns out that if

247
00:08:49,440 --> 00:08:51,200
you know this drive door structure then

248
00:08:51,200 --> 00:08:53,760
you can efficiently find pre-images for

249
00:08:53,760 --> 00:08:55,440
your map p

250
00:08:55,440 --> 00:08:56,560
and

251
00:08:56,560 --> 00:08:58,240
i'm just going to explain how to do that

252
00:08:58,240 --> 00:09:01,120
in the case that k equals 2

253
00:09:01,120 --> 00:09:04,240
because this is simpler but also because

254
00:09:04,240 --> 00:09:05,920
this is what

255
00:09:05,920 --> 00:09:08,880
the parameters for the submission

256
00:09:08,880 --> 00:09:10,399
used

257
00:09:10,399 --> 00:09:12,320
so in case k equals two you just have

258
00:09:12,320 --> 00:09:13,200
two

259
00:09:13,200 --> 00:09:15,360
o spaces so one and a two

260
00:09:15,360 --> 00:09:17,760
and there's one w space

261
00:09:17,760 --> 00:09:20,880
and uh we know that our map p sends one

262
00:09:20,880 --> 00:09:24,480
into w p vanishes on r2 and for every

263
00:09:24,480 --> 00:09:26,399
vector x uh we know that this

264
00:09:26,399 --> 00:09:30,480
differential maps or 2 into w

265
00:09:30,480 --> 00:09:32,320
right and if you know all these all

266
00:09:32,320 --> 00:09:33,440
these things

267
00:09:33,440 --> 00:09:36,000
then it's easy to

268
00:09:36,000 --> 00:09:37,680
find a pre-image

269
00:09:37,680 --> 00:09:39,839
so how do you do this well

270
00:09:39,839 --> 00:09:42,240
as in uv case again you start by just

271
00:09:42,240 --> 00:09:44,399
picking a random v

272
00:09:44,399 --> 00:09:47,360
and then we're going to solve for

273
00:09:47,360 --> 00:09:48,839
an o vector in

274
00:09:48,839 --> 00:09:51,760
one but this time we're not going to try

275
00:09:51,760 --> 00:09:54,640
to get a solution immediately we're just

276
00:09:54,640 --> 00:09:55,920
going to

277
00:09:55,920 --> 00:09:58,399
find the solution that is correct up to

278
00:09:58,399 --> 00:10:00,560
a vector in this space w

279
00:10:00,560 --> 00:10:03,839
and again using this differential this

280
00:10:03,839 --> 00:10:06,000
comes down to solving a system of linear

281
00:10:06,000 --> 00:10:07,200
equations

282
00:10:07,200 --> 00:10:09,600
and then once you have

283
00:10:09,600 --> 00:10:12,720
this solution v plus one that is correct

284
00:10:12,720 --> 00:10:15,360
up to w we're going to solve for a

285
00:10:15,360 --> 00:10:18,480
vector or two in the space of two

286
00:10:18,480 --> 00:10:21,760
that is now an exact solution

287
00:10:21,760 --> 00:10:24,880
and again you can just write this out

288
00:10:24,880 --> 00:10:26,560
you get um

289
00:10:26,560 --> 00:10:29,920
something p of v plus r1 which is fixed

290
00:10:29,920 --> 00:10:33,360
uh minus t and this is something in w

291
00:10:33,360 --> 00:10:35,519
because that's what we guaranteed in the

292
00:10:35,519 --> 00:10:36,560
first

293
00:10:36,560 --> 00:10:38,079
the first step

294
00:10:38,079 --> 00:10:40,880
then we have this p of o2 which vanishes

295
00:10:40,880 --> 00:10:43,040
because p vanishes on one two

296
00:10:43,040 --> 00:10:46,079
and then we have this this linear thing

297
00:10:46,079 --> 00:10:48,160
so again this is just a

298
00:10:48,160 --> 00:10:49,920
linear equation

299
00:10:49,920 --> 00:10:51,279
in uh

300
00:10:51,279 --> 00:10:52,959
in w

301
00:10:52,959 --> 00:10:55,440
and we have

302
00:10:55,440 --> 00:10:57,600
the dimension of w degrees of freedom

303
00:10:57,600 --> 00:11:00,480
because uh dimension of r2 is the same

304
00:11:00,480 --> 00:11:02,480
as the dimension of w

305
00:11:02,480 --> 00:11:04,480
so with large probability this will have

306
00:11:04,480 --> 00:11:06,320
solution and you can you can just find

307
00:11:06,320 --> 00:11:08,959
it with gaussian elimination

308
00:11:08,959 --> 00:11:10,240
right so

309
00:11:10,240 --> 00:11:12,000
this is rainbow with two layers and

310
00:11:12,000 --> 00:11:14,720
there's two steps of course if you had a

311
00:11:14,720 --> 00:11:16,079
longer chain

312
00:11:16,079 --> 00:11:18,560
then you need more steps to define a

313
00:11:18,560 --> 00:11:20,560
solution

314
00:11:20,560 --> 00:11:22,720
okay so at this point i've explained how

315
00:11:22,720 --> 00:11:24,800
oil and vinegar and rainbow

316
00:11:24,800 --> 00:11:28,399
work now we'll move on to attacks so

317
00:11:28,399 --> 00:11:30,000
first i'll explain

318
00:11:30,000 --> 00:11:31,600
the existing attacks against oil and

319
00:11:31,600 --> 00:11:33,760
vinegar then i'll explain a new attack

320
00:11:33,760 --> 00:11:35,360
against the other vinegar

321
00:11:35,360 --> 00:11:37,120
and then finally i'll

322
00:11:37,120 --> 00:11:39,120
very briefly summarize

323
00:11:39,120 --> 00:11:42,560
a new attack against rainbow and give

324
00:11:42,560 --> 00:11:44,320
the results of how efficient this new

325
00:11:44,320 --> 00:11:46,399
attack is

326
00:11:46,399 --> 00:11:48,000
okay so first the existing attacks

327
00:11:48,000 --> 00:11:49,600
against oil and vinegar

328
00:11:49,600 --> 00:11:51,920
so the first attack was discovered a

329
00:11:51,920 --> 00:11:54,320
year after where the vinegar was

330
00:11:54,320 --> 00:11:55,920
proposed and this attack was discovered

331
00:11:55,920 --> 00:11:58,320
by kipnis and chamir and it broke oil

332
00:11:58,320 --> 00:12:01,120
and vinegar in polynomial time

333
00:12:01,120 --> 00:12:04,320
but only in this case where n the number

334
00:12:04,320 --> 00:12:07,600
of variables is two times the number of

335
00:12:07,600 --> 00:12:09,200
equations

336
00:12:09,200 --> 00:12:10,399
and

337
00:12:10,399 --> 00:12:12,079
already in this paper they said that if

338
00:12:12,079 --> 00:12:14,800
you increase n beyond two times m then

339
00:12:14,800 --> 00:12:18,320
the scheme could still be secure

340
00:12:18,320 --> 00:12:20,800
and then a year later this attack was

341
00:12:20,800 --> 00:12:23,200
generalized to the n is larger than 2m

342
00:12:23,200 --> 00:12:26,160
case but now the attack

343
00:12:26,160 --> 00:12:28,720
has a complexity which is q to the n

344
00:12:28,720 --> 00:12:30,000
minus 2 m

345
00:12:30,000 --> 00:12:32,560
times something polynomial

346
00:12:32,560 --> 00:12:35,920
right so the attack really becomes

347
00:12:35,920 --> 00:12:38,880
inefficient very quickly once n starts

348
00:12:38,880 --> 00:12:40,880
to grow beyond

349
00:12:40,880 --> 00:12:42,560
2m

350
00:12:42,560 --> 00:12:44,800
and this is

351
00:12:44,800 --> 00:12:47,360
today before this new attack was still

352
00:12:47,360 --> 00:12:50,240
the the best attack

353
00:12:50,240 --> 00:12:52,560
so how does this kidney shamir attack

354
00:12:52,560 --> 00:12:54,560
work

355
00:12:54,560 --> 00:12:57,920
the attack is based on this observation

356
00:12:57,920 --> 00:12:59,440
so um

357
00:12:59,440 --> 00:13:02,720
remember this this polar form uh this

358
00:13:02,720 --> 00:13:03,839
this

359
00:13:03,839 --> 00:13:07,279
gave us um a lot of symmetric bilinear

360
00:13:07,279 --> 00:13:09,760
maps so of course we can represent these

361
00:13:09,760 --> 00:13:12,639
with the symmetric matrix so for each

362
00:13:12,639 --> 00:13:14,959
component of our polar form we get the

363
00:13:14,959 --> 00:13:16,480
matrix

364
00:13:16,480 --> 00:13:17,519
mi

365
00:13:17,519 --> 00:13:20,800
such that p i of x comma y is equal to x

366
00:13:20,800 --> 00:13:23,920
transpose times mi times y

367
00:13:23,920 --> 00:13:26,959
and the observation is that if our map p

368
00:13:26,959 --> 00:13:30,000
vanishes on some space o

369
00:13:30,000 --> 00:13:33,839
then this matrix mi sends o into its own

370
00:13:33,839 --> 00:13:36,079
uh complement so

371
00:13:36,079 --> 00:13:39,279
mio is orthogonal to all

372
00:13:39,279 --> 00:13:42,639
and uh yeah the proof is very easy so

373
00:13:42,639 --> 00:13:45,360
um take a vector one in o and then we

374
00:13:45,360 --> 00:13:46,639
want to prove

375
00:13:46,639 --> 00:13:49,600
that mi times one is orthogonal to o so

376
00:13:49,600 --> 00:13:50,880
as we prove this

377
00:13:50,880 --> 00:13:53,040
you take a vector or two in all

378
00:13:53,040 --> 00:13:54,959
and then uh yeah we need to prove that

379
00:13:54,959 --> 00:13:56,959
this thing is zero

380
00:13:56,959 --> 00:14:00,240
but uh yeah by definition of mi this is

381
00:14:00,240 --> 00:14:01,199
just

382
00:14:01,199 --> 00:14:03,120
this polar form

383
00:14:03,120 --> 00:14:05,360
applied to o2 and one

384
00:14:05,360 --> 00:14:06,800
but yeah if you

385
00:14:06,800 --> 00:14:08,720
apply the definition of the polar form

386
00:14:08,720 --> 00:14:10,639
this is just this

387
00:14:10,639 --> 00:14:13,279
and we know that p vanishes on the space

388
00:14:13,279 --> 00:14:14,160
o

389
00:14:14,160 --> 00:14:16,399
and a one and a two are in o

390
00:14:16,399 --> 00:14:19,120
so p i vanishes on

391
00:14:19,120 --> 00:14:23,120
one o two and also one plus o two so

392
00:14:23,120 --> 00:14:25,760
this is just uh zero

393
00:14:25,760 --> 00:14:27,120
right so

394
00:14:27,120 --> 00:14:29,199
uh the proof is very simple but still

395
00:14:29,199 --> 00:14:30,639
this is a very

396
00:14:30,639 --> 00:14:31,760
powerful

397
00:14:31,760 --> 00:14:34,560
observation that will allow us to

398
00:14:34,560 --> 00:14:35,680
to attack

399
00:14:35,680 --> 00:14:38,639
okay so how does this lead to an attack

400
00:14:38,639 --> 00:14:40,639
well we first look at the case where n

401
00:14:40,639 --> 00:14:43,360
is equal to 2 times m

402
00:14:43,360 --> 00:14:46,560
because in this case the dimension of o

403
00:14:46,560 --> 00:14:48,160
which is m

404
00:14:48,160 --> 00:14:51,040
is equal to the dimension of opera

405
00:14:51,040 --> 00:14:53,680
because the dimension of all perp is n

406
00:14:53,680 --> 00:14:55,360
minus m

407
00:14:55,360 --> 00:14:58,720
so 2m minus m is m so these spaces have

408
00:14:58,720 --> 00:15:00,639
the same dimension

409
00:15:00,639 --> 00:15:02,800
so this means that if you have two of

410
00:15:02,800 --> 00:15:05,920
these matrix matrices m1 and m2

411
00:15:05,920 --> 00:15:07,839
and they are invertible

412
00:15:07,839 --> 00:15:09,680
then like

413
00:15:09,680 --> 00:15:10,839
we know

414
00:15:10,839 --> 00:15:13,040
m1 times o

415
00:15:13,040 --> 00:15:16,720
sits inside uh operab this was the lemma

416
00:15:16,720 --> 00:15:18,240
but if they have the same dimension then

417
00:15:18,240 --> 00:15:19,839
they must be equal

418
00:15:19,839 --> 00:15:22,639
right and the same thing for m2 m2 times

419
00:15:22,639 --> 00:15:24,639
o sits inside of opert but they have the

420
00:15:24,639 --> 00:15:27,120
same dimension so they're equal

421
00:15:27,120 --> 00:15:29,600
and by this means that o is an invariant

422
00:15:29,600 --> 00:15:33,680
subspace of m2 inverse times m1

423
00:15:33,680 --> 00:15:34,480
and

424
00:15:34,480 --> 00:15:36,480
there's a polynomial time algorithm to

425
00:15:36,480 --> 00:15:40,160
find the invariant subfaces of a matrix

426
00:15:40,160 --> 00:15:42,079
and one and then two are public so you

427
00:15:42,079 --> 00:15:43,759
can just compute

428
00:15:43,759 --> 00:15:46,160
compute this invariant subspace and then

429
00:15:46,160 --> 00:15:48,800
you have your your secret keyboard

430
00:15:48,800 --> 00:15:51,199
all right so the attack is uh it's

431
00:15:51,199 --> 00:15:53,839
fairly simple once you have this this

432
00:15:53,839 --> 00:15:56,079
option okay so the case where n equals

433
00:15:56,079 --> 00:15:58,720
2m is easy and now we want to generalize

434
00:15:58,720 --> 00:16:02,079
this to larger n

435
00:16:02,160 --> 00:16:05,680
and the problem now is that m1 times o

436
00:16:05,680 --> 00:16:06,720
is

437
00:16:06,720 --> 00:16:09,199
no longer equal to m2 of o

438
00:16:09,199 --> 00:16:11,519
because our our lemma just says that

439
00:16:11,519 --> 00:16:13,759
they're both subspaces of opera

440
00:16:13,759 --> 00:16:16,720
but now opurb is is large enough that

441
00:16:16,720 --> 00:16:19,519
they don't have to be equal anymore

442
00:16:19,519 --> 00:16:21,040
right but still since they're both

443
00:16:21,040 --> 00:16:24,399
subspaces of opera which is not too big

444
00:16:24,399 --> 00:16:27,440
um m1 o and m2o are forced to have a

445
00:16:27,440 --> 00:16:29,519
large intersection

446
00:16:29,519 --> 00:16:31,519
namely an intersection of dimension at

447
00:16:31,519 --> 00:16:34,399
least 3m minus m

448
00:16:34,399 --> 00:16:37,120
and because of this um it turns out that

449
00:16:37,120 --> 00:16:40,959
this matrix m1 inverse times m2

450
00:16:40,959 --> 00:16:43,360
has eigenvectors in o with the

451
00:16:43,360 --> 00:16:45,920
reasonably large probability namely q to

452
00:16:45,920 --> 00:16:49,040
the 2m minus n

453
00:16:49,040 --> 00:16:52,000
and once you know this uh you can you

454
00:16:52,000 --> 00:16:54,079
can do the following attack

455
00:16:54,079 --> 00:16:56,639
so you just look at matrices

456
00:16:56,639 --> 00:16:58,800
of of this form you compute their

457
00:16:58,800 --> 00:17:00,320
eigenvectors

458
00:17:00,320 --> 00:17:01,839
and then

459
00:17:01,839 --> 00:17:05,039
you check if their eigenvectors are in o

460
00:17:05,039 --> 00:17:07,919
and you can do this by just evaluating p

461
00:17:07,919 --> 00:17:09,679
on these eigenvectors

462
00:17:09,679 --> 00:17:11,520
because you know

463
00:17:11,520 --> 00:17:13,760
p vanishes on o so if the vector isn't

464
00:17:13,760 --> 00:17:15,679
if your eigenvector is an o

465
00:17:15,679 --> 00:17:17,839
then and p of the eigenvector will be

466
00:17:17,839 --> 00:17:19,439
zero

467
00:17:19,439 --> 00:17:20,319
uh

468
00:17:20,319 --> 00:17:21,520
yeah so

469
00:17:21,520 --> 00:17:22,640
for every

470
00:17:22,640 --> 00:17:25,119
for every matrix that you try there's

471
00:17:25,119 --> 00:17:27,280
this probability that you find

472
00:17:27,280 --> 00:17:29,600
an eigenvector in all to just repeat

473
00:17:29,600 --> 00:17:33,520
this until you have a basis for o

474
00:17:33,520 --> 00:17:35,600
and on average you have to try q to the

475
00:17:35,600 --> 00:17:37,760
n minus two m

476
00:17:37,760 --> 00:17:39,600
matrices

477
00:17:39,600 --> 00:17:41,760
so the complexity of the attack is q to

478
00:17:41,760 --> 00:17:43,280
the n minus to m

479
00:17:43,280 --> 00:17:44,240
times

480
00:17:44,240 --> 00:17:48,960
some polynomial uh work factor

481
00:17:49,120 --> 00:17:50,880
okay so that's the state of the art of

482
00:17:50,880 --> 00:17:53,360
the attacks against oil and vinegar

483
00:17:53,360 --> 00:17:56,960
and and i'll explain the new

484
00:17:56,960 --> 00:17:58,080
okay so

485
00:17:58,080 --> 00:18:00,080
the new attack still uses this picture

486
00:18:00,080 --> 00:18:02,080
from the kidney shamir

487
00:18:02,080 --> 00:18:03,280
attack

488
00:18:03,280 --> 00:18:05,360
and now the idea is that we're going to

489
00:18:05,360 --> 00:18:07,120
fix some k

490
00:18:07,120 --> 00:18:09,200
and we're going to look for a vector x

491
00:18:09,200 --> 00:18:12,240
in an intersection of k of these

492
00:18:12,240 --> 00:18:15,840
spaces so m102 and ko

493
00:18:15,840 --> 00:18:17,520
and the way we're going to do this is

494
00:18:17,520 --> 00:18:18,960
we're going to

495
00:18:18,960 --> 00:18:22,000
uh build a system of equations and now

496
00:18:22,000 --> 00:18:24,320
we're just going to use a generic

497
00:18:24,320 --> 00:18:26,799
algorithm to find a solution of the

498
00:18:26,799 --> 00:18:29,200
system of equations

499
00:18:29,200 --> 00:18:30,559
and

500
00:18:30,559 --> 00:18:33,120
for example if we if we look at k equals

501
00:18:33,120 --> 00:18:34,720
2 so we're looking at a vector and

502
00:18:34,720 --> 00:18:37,280
intersection of two of these spaces

503
00:18:37,280 --> 00:18:40,799
then we have this system of equations

504
00:18:40,799 --> 00:18:42,240
where uh like this first set of

505
00:18:42,240 --> 00:18:43,600
equations

506
00:18:43,600 --> 00:18:48,559
uh is because like if x is in m1 times o

507
00:18:48,559 --> 00:18:52,559
then m1 inverse times x sits in o i know

508
00:18:52,559 --> 00:18:54,559
p vanishes on o so

509
00:18:54,559 --> 00:18:56,080
p of this

510
00:18:56,080 --> 00:18:57,600
is equal to zero

511
00:18:57,600 --> 00:18:59,760
and the same thing for

512
00:18:59,760 --> 00:19:02,400
p of m two inverse times x

513
00:19:02,400 --> 00:19:05,919
and if and one inverse times x and m two

514
00:19:05,919 --> 00:19:08,559
inverse times x sit in o then also the

515
00:19:08,559 --> 00:19:10,720
sum sits in o so this gives you this

516
00:19:10,720 --> 00:19:12,720
extra set of

517
00:19:12,720 --> 00:19:15,120
equations

518
00:19:15,120 --> 00:19:17,919
and uh yeah in general for general k we

519
00:19:17,919 --> 00:19:20,400
will have k plus one choose two m

520
00:19:20,400 --> 00:19:22,720
equations right because every

521
00:19:22,720 --> 00:19:26,799
uh p gives you m equations over your

522
00:19:26,799 --> 00:19:27,919
field

523
00:19:27,919 --> 00:19:30,320
and the other number of variables

524
00:19:30,320 --> 00:19:33,039
i would think it's n because x lives in

525
00:19:33,039 --> 00:19:35,520
fq to the m f q to the n

526
00:19:35,520 --> 00:19:37,200
but actually

527
00:19:37,200 --> 00:19:39,520
if you know this intersection has

528
00:19:39,520 --> 00:19:40,960
dimension d

529
00:19:40,960 --> 00:19:44,160
then you can just add d random linear

530
00:19:44,160 --> 00:19:45,280
equations

531
00:19:45,280 --> 00:19:47,520
to eliminate some variables and you know

532
00:19:47,520 --> 00:19:49,360
that with high probability you will

533
00:19:49,360 --> 00:19:50,720
still

534
00:19:50,720 --> 00:19:53,120
have a solution right so you can use

535
00:19:53,120 --> 00:19:56,000
this to reduce the number of variables

536
00:19:56,000 --> 00:19:59,280
um which makes the attack more efficient

537
00:19:59,280 --> 00:20:00,880
all right but yeah the attack will only

538
00:20:00,880 --> 00:20:03,760
work if this intersection is non-trivial

539
00:20:03,760 --> 00:20:05,039
of course

540
00:20:05,039 --> 00:20:07,760
and yeah if you do the the analysis then

541
00:20:07,760 --> 00:20:09,840
turns out that this

542
00:20:09,840 --> 00:20:11,360
intersection is guaranteed to be

543
00:20:11,360 --> 00:20:12,720
non-trivial

544
00:20:12,720 --> 00:20:15,679
if uh if this holds

545
00:20:15,679 --> 00:20:18,880
so it really depends on this ratio of n

546
00:20:18,880 --> 00:20:22,240
over m and yeah the the smaller this

547
00:20:22,240 --> 00:20:25,280
ratio is the closer to 2 it is

548
00:20:25,280 --> 00:20:27,039
the the larger

549
00:20:27,039 --> 00:20:28,159
k

550
00:20:28,159 --> 00:20:29,200
can be

551
00:20:29,200 --> 00:20:30,880
and if k is larger then we get more

552
00:20:30,880 --> 00:20:32,640
equations in the same number of

553
00:20:32,640 --> 00:20:35,520
variables so this would make

554
00:20:35,520 --> 00:20:37,360
solving the system

555
00:20:37,360 --> 00:20:39,760
much easier right so this this means

556
00:20:39,760 --> 00:20:41,520
that the closer

557
00:20:41,520 --> 00:20:44,000
n over m is equal to two the more

558
00:20:44,000 --> 00:20:46,720
efficient uh the attack will be

559
00:20:46,720 --> 00:20:49,440
okay so i'll let let's apply this uh

560
00:20:49,440 --> 00:20:50,400
attack

561
00:20:50,400 --> 00:20:53,360
to a proposed parameter set that was uh

562
00:20:53,360 --> 00:20:55,280
in the literature so

563
00:20:55,280 --> 00:20:56,799
like this one

564
00:20:56,799 --> 00:20:59,840
uh where q is two to eight you have 104

565
00:20:59,840 --> 00:21:02,880
variables and 44 equations

566
00:21:02,880 --> 00:21:04,159
so in this case

567
00:21:04,159 --> 00:21:07,520
n over m is 2.36

568
00:21:07,520 --> 00:21:09,280
which means that we can

569
00:21:09,280 --> 00:21:14,159
choose k equals 3 and still expect

570
00:21:14,159 --> 00:21:16,960
your intersection to be non-zero

571
00:21:16,960 --> 00:21:18,960
and if we do the attack with k equals

572
00:21:18,960 --> 00:21:19,840
three

573
00:21:19,840 --> 00:21:22,320
then our system has

574
00:21:22,320 --> 00:21:24,799
258 equations in

575
00:21:24,799 --> 00:21:26,960
89 variables and it turns out that you

576
00:21:26,960 --> 00:21:28,840
can solve this with just generic

577
00:21:28,840 --> 00:21:30,400
algorithms

578
00:21:30,400 --> 00:21:32,559
with a complexity of 2 to the 95

579
00:21:32,559 --> 00:21:34,240
multiplications

580
00:21:34,240 --> 00:21:37,039
and yeah this is much better than the

581
00:21:37,039 --> 00:21:39,919
expected strength of this parameter set

582
00:21:39,919 --> 00:21:42,080
because um yeah this parameter set was

583
00:21:42,080 --> 00:21:43,039
chosen

584
00:21:43,039 --> 00:21:47,360
to have 128 bits of security

585
00:21:47,360 --> 00:21:49,440
okay so now we're done with uov and

586
00:21:49,440 --> 00:21:52,159
we'll move on to rainbow

587
00:21:52,159 --> 00:21:54,000
yeah okay so

588
00:21:54,000 --> 00:21:56,320
and yeah so remember with rainbow we

589
00:21:56,320 --> 00:21:58,880
have this more complicated

590
00:21:58,880 --> 00:22:00,559
trapdoor structure and again we're going

591
00:22:00,559 --> 00:22:03,600
to focus on the case where k equals two

592
00:22:03,600 --> 00:22:07,919
so we got two o spaces and one w space

593
00:22:07,919 --> 00:22:10,840
and we're going to focus on this

594
00:22:10,840 --> 00:22:13,200
property that says that for whatever

595
00:22:13,200 --> 00:22:16,400
value x you plug into this differential

596
00:22:16,400 --> 00:22:20,000
you get a map from o2 to w because this

597
00:22:20,000 --> 00:22:23,679
will allow us to find uh find vectors in

598
00:22:23,679 --> 00:22:24,880
o2

599
00:22:24,880 --> 00:22:27,039
so we're going to look at

600
00:22:27,039 --> 00:22:30,080
these matrices so we got n matrices

601
00:22:30,080 --> 00:22:32,240
l 1 and 2 ln

602
00:22:32,240 --> 00:22:34,400
and each matrix has

603
00:22:34,400 --> 00:22:35,120
n

604
00:22:35,120 --> 00:22:37,039
rows and m columns

605
00:22:37,039 --> 00:22:39,600
because every row is an evaluation of

606
00:22:39,600 --> 00:22:42,400
our differential

607
00:22:42,400 --> 00:22:45,280
and yeah the first slot is

608
00:22:45,280 --> 00:22:47,520
e j where j is the number of your row

609
00:22:47,520 --> 00:22:50,480
and the second slot is e i where i is

610
00:22:50,480 --> 00:22:52,840
this index of the

611
00:22:52,840 --> 00:22:54,559
matrix and

612
00:22:54,559 --> 00:22:56,480
now we look at these matrices

613
00:22:56,480 --> 00:22:57,840
because

614
00:22:57,840 --> 00:23:01,840
it turns out that if y is a vector in o2

615
00:23:01,840 --> 00:23:04,400
then the rank of this

616
00:23:04,400 --> 00:23:07,200
linear combination given by y

617
00:23:07,200 --> 00:23:09,440
is is very low it's uh at most of the

618
00:23:09,440 --> 00:23:12,240
dimension of w

619
00:23:12,240 --> 00:23:14,320
um uh yeah why is this

620
00:23:14,320 --> 00:23:15,760
is very uh

621
00:23:15,760 --> 00:23:16,720
simple

622
00:23:16,720 --> 00:23:18,640
because this this differential is linear

623
00:23:18,640 --> 00:23:22,720
so these y i just go inside differential

624
00:23:22,720 --> 00:23:24,960
so you just have

625
00:23:24,960 --> 00:23:27,280
this matrix where every row

626
00:23:27,280 --> 00:23:29,440
is uh is now an

627
00:23:29,440 --> 00:23:32,159
evaluation of a differential like this

628
00:23:32,159 --> 00:23:34,799
but yeah this property of the public key

629
00:23:34,799 --> 00:23:36,720
says that for any

630
00:23:36,720 --> 00:23:40,960
value x so in particular for e1 up to en

631
00:23:40,960 --> 00:23:44,159
if the second vector is something in o2

632
00:23:44,159 --> 00:23:46,799
then it will spit out something in w

633
00:23:46,799 --> 00:23:49,200
right so every row of this matrix is a

634
00:23:49,200 --> 00:23:50,400
vector in w

635
00:23:50,400 --> 00:23:52,559
and therefore the rank of this matrix is

636
00:23:52,559 --> 00:23:56,720
at most dimension of w

637
00:23:56,720 --> 00:23:59,039
right so we're now in this

638
00:23:59,039 --> 00:24:00,320
situation

639
00:24:00,320 --> 00:24:03,360
where these matrices are public

640
00:24:03,360 --> 00:24:04,880
we know that there's some

641
00:24:04,880 --> 00:24:06,640
linear combination of them that has an

642
00:24:06,640 --> 00:24:09,039
exceptionally low rank

643
00:24:09,039 --> 00:24:11,679
so all we need to do is find this

644
00:24:11,679 --> 00:24:14,240
this linear combination

645
00:24:14,240 --> 00:24:15,120
and

646
00:24:15,120 --> 00:24:16,720
once we find one of those linear

647
00:24:16,720 --> 00:24:19,120
combination then this will give us

648
00:24:19,120 --> 00:24:22,559
this vector y which sits in

649
00:24:22,559 --> 00:24:24,000
right and so this problem where you're

650
00:24:24,000 --> 00:24:25,600
given a number of matrices and you have

651
00:24:25,600 --> 00:24:27,360
to look for a linear combination of them

652
00:24:27,360 --> 00:24:29,600
with low rank is called the min mag

653
00:24:29,600 --> 00:24:31,919
problem and this is a a well-known

654
00:24:31,919 --> 00:24:33,679
problem in multivariate quadratic

655
00:24:33,679 --> 00:24:35,840
cryptography but also in code-based

656
00:24:35,840 --> 00:24:37,520
cryptography

657
00:24:37,520 --> 00:24:39,919
and so yeah you can just use algorithms

658
00:24:39,919 --> 00:24:41,520
that have been developed to solve this

659
00:24:41,520 --> 00:24:42,400
problem

660
00:24:42,400 --> 00:24:45,279
to find uh those linear combinations

661
00:24:45,279 --> 00:24:47,840
which gives you vectors you know two

662
00:24:47,840 --> 00:24:50,000
and yeah once you know a two

663
00:24:50,000 --> 00:24:52,799
uh it's it automatically gives you w and

664
00:24:52,799 --> 00:24:54,640
then you can find a one

665
00:24:54,640 --> 00:24:58,159
so then everything um yeah everything

666
00:24:58,159 --> 00:24:59,679
is is

667
00:24:59,679 --> 00:25:01,440
quite easy so you can just recover the

668
00:25:01,440 --> 00:25:04,640
entire secret key and then you can forge

669
00:25:04,640 --> 00:25:06,640
signatures of course

670
00:25:06,640 --> 00:25:08,159
but yeah in our case we don't want to

671
00:25:08,159 --> 00:25:10,799
use a generic min rank algorithm

672
00:25:10,799 --> 00:25:13,039
because we have more information about

673
00:25:13,039 --> 00:25:15,360
this this linear combination

674
00:25:15,360 --> 00:25:17,520
right because this linear combination

675
00:25:17,520 --> 00:25:19,600
corresponds to a vector in r2

676
00:25:19,600 --> 00:25:21,360
and we know that p

677
00:25:21,360 --> 00:25:24,640
will vanish on this on this vector

678
00:25:24,640 --> 00:25:26,559
right so it turns out we can

679
00:25:26,559 --> 00:25:27,440
tweak

680
00:25:27,440 --> 00:25:29,600
the existing mean rank algorithms a

681
00:25:29,600 --> 00:25:31,360
little bit to make use of this extra

682
00:25:31,360 --> 00:25:32,480
information

683
00:25:32,480 --> 00:25:34,559
and this makes the attack uh more

684
00:25:34,559 --> 00:25:36,400
efficient

685
00:25:36,400 --> 00:25:37,760
but i'm not going to explain in this

686
00:25:37,760 --> 00:25:38,960
video how that works if you're

687
00:25:38,960 --> 00:25:41,039
interested in that you should

688
00:25:41,039 --> 00:25:42,480
look at the paper

689
00:25:42,480 --> 00:25:43,919
okay so i mentioned beginning that

690
00:25:43,919 --> 00:25:46,159
rainbow was one of the finalists in the

691
00:25:46,159 --> 00:25:47,840
nist competition

692
00:25:47,840 --> 00:25:49,120
so let's now have a look at the

693
00:25:49,120 --> 00:25:52,000
parameters that were submitted

694
00:25:52,000 --> 00:25:53,679
to this competition

695
00:25:53,679 --> 00:25:55,760
so let's

696
00:25:55,760 --> 00:25:57,679
column of the table gives you the

697
00:25:57,679 --> 00:26:00,320
complexity of this intersection attack

698
00:26:00,320 --> 00:26:02,880
that i talked about in the context of

699
00:26:02,880 --> 00:26:06,080
uov but also can be made to work against

700
00:26:06,080 --> 00:26:07,120
rainbow

701
00:26:07,120 --> 00:26:08,880
and the second column is this new min

702
00:26:08,880 --> 00:26:10,400
rank attack that i just

703
00:26:10,400 --> 00:26:12,720
talked about now

704
00:26:12,720 --> 00:26:14,559
and yeah you can see

705
00:26:14,559 --> 00:26:16,480
that for all the parameters

706
00:26:16,480 --> 00:26:18,960
either this intersection attack is the

707
00:26:18,960 --> 00:26:21,200
most efficient or this new min rank

708
00:26:21,200 --> 00:26:24,480
attack is the most efficient and so yeah

709
00:26:24,480 --> 00:26:26,400
for every parameter

710
00:26:26,400 --> 00:26:29,360
uh we improve on the best known attacks

711
00:26:29,360 --> 00:26:30,799
by quite a bit

712
00:26:30,799 --> 00:26:32,720
for example for the

713
00:26:32,720 --> 00:26:35,679
security level one parameter

714
00:26:35,679 --> 00:26:38,880
submitted for the finals we improved the

715
00:26:38,880 --> 00:26:40,880
complexity of the best known attack by

716
00:26:40,880 --> 00:26:42,080
20 bits

717
00:26:42,080 --> 00:26:44,640
and for higher security levels

718
00:26:44,640 --> 00:26:48,159
it's even 40 bits or or more

719
00:26:48,159 --> 00:26:52,080
so yeah we give quite a substantial

720
00:26:52,080 --> 00:26:54,159
improvement in the complexity of the

721
00:26:54,159 --> 00:26:55,679
attacks

722
00:26:55,679 --> 00:26:58,320
okay so we made it to the conclusion

723
00:26:58,320 --> 00:27:00,640
so i talked about oil and vinegar which

724
00:27:00,640 --> 00:27:03,279
was this elegant signature scheme

725
00:27:03,279 --> 00:27:04,480
that's

726
00:27:04,480 --> 00:27:06,159
based on this program where i give you a

727
00:27:06,159 --> 00:27:08,720
public key that vanishes on some secret

728
00:27:08,720 --> 00:27:10,960
subspace and the problem is to to find

729
00:27:10,960 --> 00:27:12,720
the secret subspace

730
00:27:12,720 --> 00:27:15,360
and um i gave a new attack

731
00:27:15,360 --> 00:27:17,600
that's based on this idea of trying to

732
00:27:17,600 --> 00:27:20,399
find a vector in some intersection and

733
00:27:20,399 --> 00:27:21,600
this new attack

734
00:27:21,600 --> 00:27:23,039
is more efficient than the previously

735
00:27:23,039 --> 00:27:24,320
known attacks

736
00:27:24,320 --> 00:27:27,520
for some parameters

737
00:27:27,520 --> 00:27:29,760
and then we also talked about rainbow

738
00:27:29,760 --> 00:27:32,159
which is one of the finalists for the

739
00:27:32,159 --> 00:27:36,159
nist post quantum cryptography project

740
00:27:36,159 --> 00:27:38,480
and i also gave a new key recovery

741
00:27:38,480 --> 00:27:40,960
attack against rainbow that was based on

742
00:27:40,960 --> 00:27:43,679
this uh this min rank problem

743
00:27:43,679 --> 00:27:45,200
and yeah the complexity of the new

744
00:27:45,200 --> 00:27:46,559
attack

745
00:27:46,559 --> 00:27:48,960
is 20 bits more

746
00:27:48,960 --> 00:27:50,000
efficient

747
00:27:50,000 --> 00:27:52,080
than the best known attacks for

748
00:27:52,080 --> 00:27:53,600
security level one

749
00:27:53,600 --> 00:27:56,559
and even even more for higher security

750
00:27:56,559 --> 00:27:58,000
levels

751
00:27:58,000 --> 00:27:59,919
so yeah that's all i wanted to say thank

752
00:27:59,919 --> 00:28:02,799
you very much

