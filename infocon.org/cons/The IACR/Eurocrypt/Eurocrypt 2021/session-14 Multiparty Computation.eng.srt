1
00:00:00,080 --> 00:00:02,640
laura's yours

2
00:00:09,040 --> 00:00:10,400
okay

3
00:00:10,400 --> 00:00:12,639
um yeah i'm gabe capchak i'm at boston

4
00:00:12,639 --> 00:00:15,120
university this is a paper titled order

5
00:00:15,120 --> 00:00:17,440
c npc for highly repetitive circuits

6
00:00:17,440 --> 00:00:19,520
this is joint work um with my co-authors

7
00:00:19,520 --> 00:00:21,359
debbie beck arisha google and john and

8
00:00:21,359 --> 00:00:22,800
uh abstract james from johns hopkins

9
00:00:22,800 --> 00:00:24,480
university

10
00:00:24,480 --> 00:00:26,880
um over the the past uh many years we've

11
00:00:26,880 --> 00:00:28,720
seen a lot of really

12
00:00:28,720 --> 00:00:30,320
impressive and efficient results in

13
00:00:30,320 --> 00:00:32,159
secure multi-party computation that have

14
00:00:32,159 --> 00:00:33,840
resulted in a number of protocols that

15
00:00:33,840 --> 00:00:35,440
are i'm actually efficient enough to

16
00:00:35,440 --> 00:00:37,040
instantiate and run

17
00:00:37,040 --> 00:00:39,360
and and have you know real applications

18
00:00:39,360 --> 00:00:41,520
um in general these protocols uh all

19
00:00:41,520 --> 00:00:44,800
have order end times c total computation

20
00:00:44,800 --> 00:00:47,120
and communication complexity um and what

21
00:00:47,120 --> 00:00:48,719
are these what are these things n is the

22
00:00:48,719 --> 00:00:50,239
number of parties that participate in

23
00:00:50,239 --> 00:00:53,280
the uh protocol and c uh is the circuit

24
00:00:53,280 --> 00:00:54,640
and so we say you know the size of c is

25
00:00:54,640 --> 00:00:56,640
the size of the circuit

26
00:00:56,640 --> 00:00:58,640
um and in general right if you have n

27
00:00:58,640 --> 00:01:00,239
times c total work that means that each

28
00:01:00,239 --> 00:01:03,120
party is doing about order c work um and

29
00:01:03,120 --> 00:01:05,360
as c gets really large the total uh

30
00:01:05,360 --> 00:01:06,640
computation that each part has to do

31
00:01:06,640 --> 00:01:08,400
starts to become too cumbersome um and

32
00:01:08,400 --> 00:01:09,600
this ultimately limits the number of

33
00:01:09,600 --> 00:01:10,799
part or the kinds of parties could

34
00:01:10,799 --> 00:01:13,600
actually participate in the protocol

35
00:01:13,600 --> 00:01:15,439
and so the the main focus of our work is

36
00:01:15,439 --> 00:01:17,439
uh seeing is it possible to do better

37
00:01:17,439 --> 00:01:19,040
than order nc

38
00:01:19,040 --> 00:01:20,080
um and there's been a little bit of

39
00:01:20,080 --> 00:01:22,720
prior work in this area so there's a

40
00:01:22,720 --> 00:01:24,240
series of works that get otilda see

41
00:01:24,240 --> 00:01:26,000
total communication and computation

42
00:01:26,000 --> 00:01:27,600
complexity and they're able to do this

43
00:01:27,600 --> 00:01:30,640
for general circuits but the tilde here

44
00:01:30,640 --> 00:01:33,280
hides a polynomial factor in log c um

45
00:01:33,280 --> 00:01:35,600
and also uh in the security parameter

46
00:01:35,600 --> 00:01:37,040
and ultimately this results in a not

47
00:01:37,040 --> 00:01:38,799
concretely efficient scheme that's never

48
00:01:38,799 --> 00:01:41,680
been implemented and never been used in

49
00:01:41,680 --> 00:01:43,280
practice

50
00:01:43,280 --> 00:01:44,560
additionally there are some works that

51
00:01:44,560 --> 00:01:47,680
also achieve order cmpc um but they're

52
00:01:47,680 --> 00:01:49,680
only work for a small subset of circuits

53
00:01:49,680 --> 00:01:52,000
a small class called cimd circuits which

54
00:01:52,000 --> 00:01:52,880
i'll

55
00:01:52,880 --> 00:01:55,119
quickly give you a picture of right now

56
00:01:55,119 --> 00:01:57,119
so cindy circuits are where you have one

57
00:01:57,119 --> 00:01:58,560
part of the circuit which has arbitrary

58
00:01:58,560 --> 00:02:00,799
topology and arbitrary gates and then

59
00:02:00,799 --> 00:02:03,119
that same mini sub-circuit is repeated

60
00:02:03,119 --> 00:02:05,200
many many times in parallel

61
00:02:05,200 --> 00:02:07,119
and in general in order to get order c

62
00:02:07,119 --> 00:02:08,959
mpc you need this kind of parallelism

63
00:02:08,959 --> 00:02:11,038
where there are about order n uh

64
00:02:11,038 --> 00:02:12,959
parallel copies of the circuit being run

65
00:02:12,959 --> 00:02:14,640
at the same time

66
00:02:14,640 --> 00:02:16,640
um and it turns out that although these

67
00:02:16,640 --> 00:02:18,879
protocols uh you know are actually quite

68
00:02:18,879 --> 00:02:20,239
efficient to instantiate nobody's

69
00:02:20,239 --> 00:02:21,520
actually implemented them or run them on

70
00:02:21,520 --> 00:02:23,760
anything maybe because uh simple cindy

71
00:02:23,760 --> 00:02:25,040
circuits are not sufficiently

72
00:02:25,040 --> 00:02:26,959
interesting in practice

73
00:02:26,959 --> 00:02:28,480
um so the main question in our work is

74
00:02:28,480 --> 00:02:30,959
can we design an order cmpc protocol for

75
00:02:30,959 --> 00:02:32,720
a larger and more interesting class of

76
00:02:32,720 --> 00:02:34,319
circuits

77
00:02:34,319 --> 00:02:36,400
so our contributions is that we give a

78
00:02:36,400 --> 00:02:38,560
uh order to see npc protocol for a class

79
00:02:38,560 --> 00:02:40,160
of circuits and functionalities we call

80
00:02:40,160 --> 00:02:41,920
highly repetitive circuits which i'll

81
00:02:41,920 --> 00:02:44,959
give you a flavor of in in just a moment

82
00:02:44,959 --> 00:02:47,040
um in our protocol we give both a semi

83
00:02:47,040 --> 00:02:49,440
honest and maliciously secure version um

84
00:02:49,440 --> 00:02:52,319
and it is secure against t is less than

85
00:02:52,319 --> 00:02:54,800
n by two minus a little bit uh static

86
00:02:54,800 --> 00:02:56,160
corruptions or that little bit is a

87
00:02:56,160 --> 00:02:57,840
performance parameter that you can uh

88
00:02:57,840 --> 00:02:59,040
tune

89
00:02:59,040 --> 00:03:00,480
uh we achieve information theoretic

90
00:03:00,480 --> 00:03:02,400
security with no security setup no setup

91
00:03:02,400 --> 00:03:04,560
assumptions sorry um and security with

92
00:03:04,560 --> 00:03:06,000
abort

93
00:03:06,000 --> 00:03:07,599
um what's really nice about our protocol

94
00:03:07,599 --> 00:03:09,519
is that when you have order cnpc you

95
00:03:09,519 --> 00:03:10,879
naturally get a sort of division of

96
00:03:10,879 --> 00:03:12,720
labor property right the total amount of

97
00:03:12,720 --> 00:03:14,319
work you're doing is kind of independent

98
00:03:14,319 --> 00:03:16,080
of the number of parties so as number of

99
00:03:16,080 --> 00:03:17,840
parties increase uh the number amount of

100
00:03:17,840 --> 00:03:19,680
work each party does actually decreases

101
00:03:19,680 --> 00:03:21,519
and this is a really lovely property

102
00:03:21,519 --> 00:03:23,200
um our protocol is actually concretely

103
00:03:23,200 --> 00:03:25,280
efficient and we implemented it and show

104
00:03:25,280 --> 00:03:27,680
that you know it is uh uh

105
00:03:27,680 --> 00:03:30,400
competitive with um modern protocols for

106
00:03:30,400 --> 00:03:32,319
even small numbers of parties but begins

107
00:03:32,319 --> 00:03:33,599
to outclass them as number of parties

108
00:03:33,599 --> 00:03:35,280
grow

109
00:03:35,280 --> 00:03:37,440
um so just to quickly give you a flavor

110
00:03:37,440 --> 00:03:38,560
for what these highly repetitive

111
00:03:38,560 --> 00:03:40,480
circuits are um we kind of start out by

112
00:03:40,480 --> 00:03:41,920
giving a notion of an a b repetitive

113
00:03:41,920 --> 00:03:43,760
circuit uh where an a b repetitive

114
00:03:43,760 --> 00:03:45,440
circuit is composed of an arbitrary

115
00:03:45,440 --> 00:03:47,680
number of blocks of width a each of

116
00:03:47,680 --> 00:03:49,440
which recurs at least b times throughout

117
00:03:49,440 --> 00:03:50,560
the circuit

118
00:03:50,560 --> 00:03:51,760
right so in the case of this circuit

119
00:03:51,760 --> 00:03:53,200
here there's a particular block

120
00:03:53,200 --> 00:03:54,879
highlighted in red here that shows up

121
00:03:54,879 --> 00:03:56,159
three different times kind of

122
00:03:56,159 --> 00:03:57,360
distributed throughout the overall

123
00:03:57,360 --> 00:04:00,239
circuit and similarly uh here's a green

124
00:04:00,239 --> 00:04:02,239
block that recurs three times and a blue

125
00:04:02,239 --> 00:04:04,239
block as well and so overall this

126
00:04:04,239 --> 00:04:06,239
example circuit that i have here is a 3

127
00:04:06,239 --> 00:04:08,959
3 repetitive circuit

128
00:04:08,959 --> 00:04:10,959
a highly repetitive circuit um is a we

129
00:04:10,959 --> 00:04:12,480
say that an a b repetitive circuit is

130
00:04:12,480 --> 00:04:14,879
highly respec repetitive with respect to

131
00:04:14,879 --> 00:04:18,000
n parties if uh both a and b scale with

132
00:04:18,000 --> 00:04:19,519
n

133
00:04:19,519 --> 00:04:20,639
we find that there are actually a lot of

134
00:04:20,639 --> 00:04:22,000
different uh

135
00:04:22,000 --> 00:04:23,680
useful and interesting applications that

136
00:04:23,680 --> 00:04:25,440
fit within this class including stuff

137
00:04:25,440 --> 00:04:27,520
like for loops and while loops that that

138
00:04:27,520 --> 00:04:29,680
kind of have see a sequential repetition

139
00:04:29,680 --> 00:04:30,960
along with machine learning training

140
00:04:30,960 --> 00:04:33,040
algorithms and cryptographic operations

141
00:04:33,040 --> 00:04:34,560
that have many repetitions like block

142
00:04:34,560 --> 00:04:37,199
ciphers and cryptographic hash functions

143
00:04:37,199 --> 00:04:39,040
i just want to quickly give you an idea

144
00:04:39,040 --> 00:04:40,240
of the flavor for how we actually

145
00:04:40,240 --> 00:04:41,600
achieve our results and i'm going to

146
00:04:41,600 --> 00:04:43,040
start by kind of going over the the

147
00:04:43,040 --> 00:04:45,040
basic otildicy or order c template from

148
00:04:45,040 --> 00:04:46,160
prior work

149
00:04:46,160 --> 00:04:47,680
so what you do is you start out with an

150
00:04:47,680 --> 00:04:49,120
efficient existing efficient

151
00:04:49,120 --> 00:04:50,639
multiplication sub protocol so for

152
00:04:50,639 --> 00:04:52,240
instance the the multiplication protocol

153
00:04:52,240 --> 00:04:55,840
in dno7 um and to quickly recap how this

154
00:04:55,840 --> 00:04:57,680
works the players are given correlated

155
00:04:57,680 --> 00:05:00,000
randomness with shares of random values

156
00:05:00,000 --> 00:05:02,080
r with respect to both degree t and

157
00:05:02,080 --> 00:05:03,840
degree 2t sharings

158
00:05:03,840 --> 00:05:05,440
and the multiplication sub protocol has

159
00:05:05,440 --> 00:05:07,520
players locally multiply their shares

160
00:05:07,520 --> 00:05:09,840
they then mask using the degree 2t share

161
00:05:09,840 --> 00:05:11,440
of the randomness and everybody sends

162
00:05:11,440 --> 00:05:13,600
their shares to a single player often

163
00:05:13,600 --> 00:05:15,440
called the leader will then reconstruct

164
00:05:15,440 --> 00:05:17,759
the value and send it back out and then

165
00:05:17,759 --> 00:05:19,360
players will kind of unmask the received

166
00:05:19,360 --> 00:05:23,039
value using their degree t shares

167
00:05:23,039 --> 00:05:25,360
they then combine this uh basic uh uh

168
00:05:25,360 --> 00:05:26,800
this multiplication sub protocol with a

169
00:05:26,800 --> 00:05:28,720
packed secret sharing scheme um and for

170
00:05:28,720 --> 00:05:29,919
those who are not familiar pack secret

171
00:05:29,919 --> 00:05:31,600
sharing is kind of a vectorized version

172
00:05:31,600 --> 00:05:32,960
of show me your secret sharing where

173
00:05:32,960 --> 00:05:34,479
you're able to apply the same operation

174
00:05:34,479 --> 00:05:36,639
to many elements all at the same time um

175
00:05:36,639 --> 00:05:38,000
and in general you're able to put you

176
00:05:38,000 --> 00:05:39,759
know order n elements inside this vector

177
00:05:39,759 --> 00:05:42,240
and operate on them simultaneously

178
00:05:42,240 --> 00:05:43,360
and so this has been the general

179
00:05:43,360 --> 00:05:45,280
template that prior workers uh has used

180
00:05:45,280 --> 00:05:48,639
in order to get below order nc

181
00:05:48,639 --> 00:05:50,400
so we follow the same basic paradigm in

182
00:05:50,400 --> 00:05:51,600
order to achieve our results in

183
00:05:51,600 --> 00:05:54,639
particular we start with uh the same uh

184
00:05:54,639 --> 00:05:56,960
nc multiplication protocol but then we

185
00:05:56,960 --> 00:05:58,880
kind of make conceptual changes to pack

186
00:05:58,880 --> 00:06:00,160
secret sharing that allow us to

187
00:06:00,160 --> 00:06:01,759
accommodate greater variations and

188
00:06:01,759 --> 00:06:03,520
structure throughout the circuit and in

189
00:06:03,520 --> 00:06:06,319
particular there's two uh two notions so

190
00:06:06,319 --> 00:06:08,319
the first um is differing operation pack

191
00:06:08,319 --> 00:06:10,400
secret sharing ah

192
00:06:10,400 --> 00:06:13,120
escape the blue box um so the idea

193
00:06:13,120 --> 00:06:14,800
differing operation pack secret sharing

194
00:06:14,800 --> 00:06:16,400
is that you're able to use uh different

195
00:06:16,400 --> 00:06:18,880
operations as you uh kind of either

196
00:06:18,880 --> 00:06:20,720
multiply or add these two vectors

197
00:06:20,720 --> 00:06:22,000
together so in the first element you

198
00:06:22,000 --> 00:06:23,199
might add the second element you might

199
00:06:23,199 --> 00:06:25,680
multiply and and so on and so forth um

200
00:06:25,680 --> 00:06:27,759
in practice we realize this by just

201
00:06:27,759 --> 00:06:29,600
actually performing both operations and

202
00:06:29,600 --> 00:06:31,039
then because the leader is able to see

203
00:06:31,039 --> 00:06:32,400
all of the reconstructed values they're

204
00:06:32,400 --> 00:06:34,160
able to select the particular values

205
00:06:34,160 --> 00:06:36,080
that they want and then share that back

206
00:06:36,080 --> 00:06:37,039
out

207
00:06:37,039 --> 00:06:38,800
in order to make this work out we do

208
00:06:38,800 --> 00:06:40,319
need some kind of special correlated

209
00:06:40,319 --> 00:06:42,160
randomness in order to get the masking

210
00:06:42,160 --> 00:06:44,800
to work properly

211
00:06:44,800 --> 00:06:46,000
additionally

212
00:06:46,000 --> 00:06:47,919
we also have a realignment procedure for

213
00:06:47,919 --> 00:06:49,759
pack secret sharing schemes the idea is

214
00:06:49,759 --> 00:06:51,199
that within a with a realignment

215
00:06:51,199 --> 00:06:52,720
procedure you're able to kind of permute

216
00:06:52,720 --> 00:06:54,720
the order of items both within a single

217
00:06:54,720 --> 00:06:56,960
vector and between vectors and again the

218
00:06:56,960 --> 00:06:58,639
the main trick here is that you can you

219
00:06:58,639 --> 00:07:00,560
have the leader who actually sees all of

220
00:07:00,560 --> 00:07:02,000
the reconstructed values do this

221
00:07:02,000 --> 00:07:03,680
permutation on their own

222
00:07:03,680 --> 00:07:05,120
and again in order to get the unmasking

223
00:07:05,120 --> 00:07:06,960
to work you need a kind of special

224
00:07:06,960 --> 00:07:09,199
correlated randomness

225
00:07:09,199 --> 00:07:10,960
so putting these two uh two things

226
00:07:10,960 --> 00:07:12,160
together this multiplication sub

227
00:07:12,160 --> 00:07:13,840
protocol along with a pac secret sharing

228
00:07:13,840 --> 00:07:16,000
scheme you end up with an order cmpc

229
00:07:16,000 --> 00:07:18,080
protocol for highly repetitive circuits

230
00:07:18,080 --> 00:07:19,360
and in particular the reason it only

231
00:07:19,360 --> 00:07:21,039
works for highly repetitive circuits is

232
00:07:21,039 --> 00:07:22,240
that in order to do this special

233
00:07:22,240 --> 00:07:24,240
correlated randomness

234
00:07:24,240 --> 00:07:26,080
generation you also do it in order c

235
00:07:26,080 --> 00:07:28,479
time right or to see complexity and in

236
00:07:28,479 --> 00:07:29,599
order to do that you need a sufficient

237
00:07:29,599 --> 00:07:31,199
amount of repeated structure in the

238
00:07:31,199 --> 00:07:33,360
enable in order to amortize over that

239
00:07:33,360 --> 00:07:34,960
structure

240
00:07:34,960 --> 00:07:37,199
um and so just to state the result again

241
00:07:37,199 --> 00:07:39,360
so we achieve order cnpc uh for highly

242
00:07:39,360 --> 00:07:41,199
repetitive circuits and there's also

243
00:07:41,199 --> 00:07:42,800
some additional uh fun stuff in the

244
00:07:42,800 --> 00:07:44,479
paper like a non-interactive share

245
00:07:44,479 --> 00:07:47,039
conversion protocol um and uh also how

246
00:07:47,039 --> 00:07:48,400
to achieve malicious security in this

247
00:07:48,400 --> 00:07:49,840
setting and if you're interested uh

248
00:07:49,840 --> 00:07:51,360
please check out the paper on eprint and

249
00:07:51,360 --> 00:07:53,759
the video that arushi recorded as well

250
00:07:53,759 --> 00:07:57,160
thanks very much

251
00:08:00,080 --> 00:08:03,360
yes thank you for a nice delivery talk

252
00:08:03,360 --> 00:08:06,319
any questions in the room

253
00:08:06,319 --> 00:08:09,280
from the audience here

254
00:08:09,280 --> 00:08:10,560
in

255
00:08:10,560 --> 00:08:13,120
online apparently

256
00:08:13,120 --> 00:08:14,879
none

257
00:08:14,879 --> 00:08:16,000
yeah

258
00:08:16,000 --> 00:08:18,319
you also answered my questions along the

259
00:08:18,319 --> 00:08:21,840
way during the talk all the answers

260
00:08:21,840 --> 00:08:23,440
came by so

261
00:08:23,440 --> 00:08:27,319
let's thank the speaker again

262
00:08:30,240 --> 00:08:32,159
and we move on to the

263
00:08:32,159 --> 00:08:34,799
second talk

264
00:08:36,240 --> 00:08:38,479
for torque the fifth speaker will be

265
00:08:38,479 --> 00:08:41,839
in the room again

266
00:08:43,440 --> 00:08:45,680
okay

267
00:08:46,880 --> 00:08:48,320
all right so they

268
00:08:48,320 --> 00:08:50,480
i think arcadie

269
00:08:50,480 --> 00:08:52,640
ricky movies is

270
00:08:52,640 --> 00:08:55,120
all set

271
00:08:55,120 --> 00:08:59,040
we have to stop sharing the skin also

272
00:09:04,080 --> 00:09:06,560
so the title will appear in a few

273
00:09:06,560 --> 00:09:08,880
seconds the more the merrier reducing

274
00:09:08,880 --> 00:09:12,640
the cost of large-scale mpc

275
00:09:12,640 --> 00:09:14,399
we see it you don't need to stop sharing

276
00:09:14,399 --> 00:09:17,839
that's okay okay great

277
00:09:18,560 --> 00:09:19,440
okay

278
00:09:19,440 --> 00:09:20,480
then

279
00:09:20,480 --> 00:09:23,720
we will

280
00:09:24,480 --> 00:09:26,320
okay uh thank you very much for

281
00:09:26,320 --> 00:09:28,160
introduction my name is arcadio

282
00:09:28,160 --> 00:09:29,760
komovovic and today i'm going to tell

283
00:09:29,760 --> 00:09:32,399
you the paper on the paper titled the

284
00:09:32,399 --> 00:09:34,399
more the merrier reducing the cost for a

285
00:09:34,399 --> 00:09:37,040
large-scale mpc and this is joint work

286
00:09:37,040 --> 00:09:39,360
with dove gordon from george mason

287
00:09:39,360 --> 00:09:41,440
university and daniel stern from periton

288
00:09:41,440 --> 00:09:43,839
labs

289
00:09:43,839 --> 00:09:44,959
so

290
00:09:44,959 --> 00:09:47,440
you know npc research has now been the

291
00:09:47,440 --> 00:09:50,240
distance for you know over 30 years uh

292
00:09:50,240 --> 00:09:52,560
but still most of the truly practical

293
00:09:52,560 --> 00:09:54,240
npc protocols are really optimized for

294
00:09:54,240 --> 00:09:55,680
small numbers of parties you know things

295
00:09:55,680 --> 00:09:58,800
two three four parties and one of the

296
00:09:58,800 --> 00:10:00,560
reasons for this as uh gabe actually

297
00:10:00,560 --> 00:10:02,000
already mentioned the previous talk is

298
00:10:02,000 --> 00:10:04,160
that a lot of our protocols the cost

299
00:10:04,160 --> 00:10:05,920
doesn't actually decrease as we add more

300
00:10:05,920 --> 00:10:07,120
priorities if we add more parties

301
00:10:07,120 --> 00:10:09,440
oftentimes the cost even per party cost

302
00:10:09,440 --> 00:10:10,320
actually

303
00:10:10,320 --> 00:10:13,279
increases uh as we add more parties

304
00:10:13,279 --> 00:10:14,640
and so for this reason there's not

305
00:10:14,640 --> 00:10:16,959
really an incentive for parties to join

306
00:10:16,959 --> 00:10:18,959
our mpc protocols

307
00:10:18,959 --> 00:10:20,079
and so our

308
00:10:20,079 --> 00:10:22,880
sorry can you hear me

309
00:10:24,000 --> 00:10:26,560
and our goal in this talk is to build

310
00:10:26,560 --> 00:10:28,880
large-scale mpc with diminishing

311
00:10:28,880 --> 00:10:30,800
per-party costs right so we want that as

312
00:10:30,800 --> 00:10:32,720
we add more parts to the protocol the

313
00:10:32,720 --> 00:10:35,200
cost for each party decreases

314
00:10:35,200 --> 00:10:37,519
and as uh mentioned we're not the first

315
00:10:37,519 --> 00:10:39,279
people to suggest to look into this line

316
00:10:39,279 --> 00:10:40,959
of work in particular

317
00:10:40,959 --> 00:10:43,200
there's a good amount of work on a

318
00:10:43,200 --> 00:10:45,200
sub linear mpc

319
00:10:45,200 --> 00:10:46,800
and what's the blue npc means is where

320
00:10:46,800 --> 00:10:48,720
the total cost across all the parties

321
00:10:48,720 --> 00:10:50,720
grows sublinearly in the number of

322
00:10:50,720 --> 00:10:53,279
parties and there's two general

323
00:10:53,279 --> 00:10:55,040
directions that sort of follow this

324
00:10:55,040 --> 00:10:56,560
approach

325
00:10:56,560 --> 00:10:58,079
the first one of these is what's known

326
00:10:58,079 --> 00:11:00,320
as sim decomputation where the idea is

327
00:11:00,320 --> 00:11:02,320
that you pack your values into vectors

328
00:11:02,320 --> 00:11:03,839
and you operate on those vectors sort of

329
00:11:03,839 --> 00:11:05,680
component wise and parallel

330
00:11:05,680 --> 00:11:08,959
sorry arcadie yeah did you not hear me

331
00:11:08,959 --> 00:11:10,560
yeah so we had a problem showing your

332
00:11:10,560 --> 00:11:12,320
slides on the local screen here in home

333
00:11:12,320 --> 00:11:13,600
so

334
00:11:13,600 --> 00:11:16,160
could you please start again okay

335
00:11:16,160 --> 00:11:19,360
uh can you see them now or

336
00:11:19,360 --> 00:11:21,440
just use the time you've practiced now

337
00:11:21,440 --> 00:11:23,360
you warmed up so uh

338
00:11:23,360 --> 00:11:24,240
okay

339
00:11:24,240 --> 00:11:25,839
can you see my slides so i make sure you

340
00:11:25,839 --> 00:11:27,200
can see them now

341
00:11:27,200 --> 00:11:28,880
can you see my slides now

342
00:11:28,880 --> 00:11:30,640
we also so the

343
00:11:30,640 --> 00:11:32,399
your slides were visible online for

344
00:11:32,399 --> 00:11:36,720
everybody on zoom but not in the room so

345
00:11:36,720 --> 00:11:39,920
now it's fixed and please go ahead okay

346
00:11:39,920 --> 00:11:41,760
thank you so again my name is arcadie

347
00:11:41,760 --> 00:11:44,240
yorkomovich uh the paper is entitled the

348
00:11:44,240 --> 00:11:46,000
moors and merrier reducing the cost of

349
00:11:46,000 --> 00:11:47,519
large-scale npc

350
00:11:47,519 --> 00:11:49,519
and this is joint work with dove gordon

351
00:11:49,519 --> 00:11:51,519
from george mason university and daniel

352
00:11:51,519 --> 00:11:53,680
stern from periton labs

353
00:11:53,680 --> 00:11:56,000
uh so mpc research has been around for

354
00:11:56,000 --> 00:11:57,519
you know

355
00:11:57,519 --> 00:11:59,600
over 30 years at this point but still at

356
00:11:59,600 --> 00:12:01,360
this point most of the truly practical

357
00:12:01,360 --> 00:12:03,040
mpc protocols are really focused on the

358
00:12:03,040 --> 00:12:04,639
setting for small numbers of parties

359
00:12:04,639 --> 00:12:07,120
think like two three or four parties

360
00:12:07,120 --> 00:12:09,040
and a primary reason for this is that in

361
00:12:09,040 --> 00:12:11,040
most of our mpc protocols

362
00:12:11,040 --> 00:12:13,200
as we add more parties the per party

363
00:12:13,200 --> 00:12:14,959
cost does not decrease and often times

364
00:12:14,959 --> 00:12:16,880
it actually increases

365
00:12:16,880 --> 00:12:18,560
and of course this means that you know

366
00:12:18,560 --> 00:12:20,160
there's no incentive to add more parties

367
00:12:20,160 --> 00:12:21,519
into your protocol

368
00:12:21,519 --> 00:12:23,279
and sort of to change this we looked

369
00:12:23,279 --> 00:12:24,720
into you know how do we build

370
00:12:24,720 --> 00:12:27,120
large-scale npc uh where the per-party

371
00:12:27,120 --> 00:12:29,120
cost actually decreases as we add more

372
00:12:29,120 --> 00:12:31,519
parties into our protocol

373
00:12:31,519 --> 00:12:33,279
so we're not the first ones to look into

374
00:12:33,279 --> 00:12:35,279
this in particular there's a

375
00:12:35,279 --> 00:12:36,720
fairly substantial line of work and

376
00:12:36,720 --> 00:12:38,959
sublime your mpc

377
00:12:38,959 --> 00:12:40,720
where the idea is to have the total cost

378
00:12:40,720 --> 00:12:42,720
of the computation grow sublinearly in

379
00:12:42,720 --> 00:12:45,040
the number of parties and there are two

380
00:12:45,040 --> 00:12:47,040
general approaches that kind of all

381
00:12:47,040 --> 00:12:48,880
works in this area take

382
00:12:48,880 --> 00:12:50,560
the first one that gabe already

383
00:12:50,560 --> 00:12:52,800
described so nicely in a previous talk

384
00:12:52,800 --> 00:12:55,120
uh is on is following some decomputation

385
00:12:55,120 --> 00:12:56,399
where the idea is that instead of

386
00:12:56,399 --> 00:12:58,240
computing individual values you compute

387
00:12:58,240 --> 00:13:00,560
on vectors of values point wise uh where

388
00:13:00,560 --> 00:13:01,760
the cost of

389
00:13:01,760 --> 00:13:04,399
vector operations is small

390
00:13:04,399 --> 00:13:05,920
and this is very nice it allows us to

391
00:13:05,920 --> 00:13:07,920
get low cost uh but there's some

392
00:13:07,920 --> 00:13:10,160
overhead for evaluating you know non-smd

393
00:13:10,160 --> 00:13:11,440
circuits

394
00:13:11,440 --> 00:13:13,040
another approach for getting stubble in

395
00:13:13,040 --> 00:13:15,200
your mpc is actually committee-based mpc

396
00:13:15,200 --> 00:13:16,480
where the idea is that instead of

397
00:13:16,480 --> 00:13:18,160
running your mpc protocol on all end

398
00:13:18,160 --> 00:13:20,320
parties you elect you know a small

399
00:13:20,320 --> 00:13:21,680
committee of some size and have that

400
00:13:21,680 --> 00:13:24,079
committee uh essentially run the

401
00:13:24,079 --> 00:13:25,519
protocol for you

402
00:13:25,519 --> 00:13:28,079
and so you get you know

403
00:13:28,079 --> 00:13:30,560
low average cost but on the other hand

404
00:13:30,560 --> 00:13:31,760
the committee members still have to do a

405
00:13:31,760 --> 00:13:32,880
lot of work

406
00:13:32,880 --> 00:13:34,480
and our paper is really going to combine

407
00:13:34,480 --> 00:13:36,320
these two approaches and sort of a way

408
00:13:36,320 --> 00:13:38,959
to get the optimal cost for both

409
00:13:38,959 --> 00:13:40,639
settings

410
00:13:40,639 --> 00:13:42,639
so specifically our result we show that

411
00:13:42,639 --> 00:13:45,360
assuming a secure prg as there exists a

412
00:13:45,360 --> 00:13:47,680
malicious secure npc protocol

413
00:13:47,680 --> 00:13:49,360
uh they're secure against the

414
00:13:49,360 --> 00:13:50,720
administrative corruption it most serves

415
00:13:50,720 --> 00:13:53,040
the parties i guess you know that's

416
00:13:53,040 --> 00:13:55,360
achieved security of the board where the

417
00:13:55,360 --> 00:13:57,279
cost of both communication cost and

418
00:13:57,279 --> 00:13:59,839
computation cost decreases as more

419
00:13:59,839 --> 00:14:01,360
parties are added

420
00:14:01,360 --> 00:14:02,880
and in particular if you compare this to

421
00:14:02,880 --> 00:14:05,279
sort of existing solutions based on

422
00:14:05,279 --> 00:14:07,279
these two approaches i mentioned earlier

423
00:14:07,279 --> 00:14:10,000
uh the best systemd based solution is

424
00:14:10,000 --> 00:14:12,480
actually o of log c times worse because

425
00:14:12,480 --> 00:14:14,399
of issues of having to sort of transform

426
00:14:14,399 --> 00:14:17,279
the circuit into a cmd circuit and the

427
00:14:17,279 --> 00:14:19,040
best committee based solutions are

428
00:14:19,040 --> 00:14:21,519
actually of s times worse where s is in

429
00:14:21,519 --> 00:14:25,360
fact a statistical security parameter

430
00:14:25,360 --> 00:14:27,199
so how do we work i want to very quickly

431
00:14:27,199 --> 00:14:28,880
kind of run our protocol to explain how

432
00:14:28,880 --> 00:14:31,120
it works and the first thing we do is

433
00:14:31,120 --> 00:14:33,199
this we observe like most of the

434
00:14:33,199 --> 00:14:34,880
efficient mpc particles nowadays our

435
00:14:34,880 --> 00:14:36,480
protocol is going to work start by

436
00:14:36,480 --> 00:14:38,079
building uh beaver multiplication

437
00:14:38,079 --> 00:14:40,000
triples and these are just random values

438
00:14:40,000 --> 00:14:41,360
a b and c

439
00:14:41,360 --> 00:14:44,480
uh such that c equals a times b and the

440
00:14:44,480 --> 00:14:46,160
observation we make is that it says

441
00:14:46,160 --> 00:14:48,240
multiplication triple generation itself

442
00:14:48,240 --> 00:14:50,560
is actually a nice md circuit because of

443
00:14:50,560 --> 00:14:52,480
course all you have to do is take each a

444
00:14:52,480 --> 00:14:55,040
multiply it by b to get each c

445
00:14:55,040 --> 00:14:56,399
and so we can generate all of these

446
00:14:56,399 --> 00:14:59,040
inter in parallel in particular in

447
00:14:59,040 --> 00:15:00,800
component-wise fashion so what we do is

448
00:15:00,800 --> 00:15:03,600
we start out by building packed triples

449
00:15:03,600 --> 00:15:05,199
where we have packed

450
00:15:05,199 --> 00:15:07,279
bodies shared packed random values a

451
00:15:07,279 --> 00:15:09,680
factor in the values b and multiplies z

452
00:15:09,680 --> 00:15:12,079
to produce background value see

453
00:15:12,079 --> 00:15:13,839
we do this using a variant of the dam

454
00:15:13,839 --> 00:15:16,160
guard nielsen protocol that gabe also

455
00:15:16,160 --> 00:15:18,639
described earlier

456
00:15:18,639 --> 00:15:19,920
and the idea is that we can actually

457
00:15:19,920 --> 00:15:22,720
pack all of n values into each vector

458
00:15:22,720 --> 00:15:24,800
and produce sort of o and

459
00:15:24,800 --> 00:15:27,040
triples pack triples uh using each

460
00:15:27,040 --> 00:15:28,880
multiplication now there is a little bit

461
00:15:28,880 --> 00:15:30,720
of a caveat that actually just using

462
00:15:30,720 --> 00:15:32,000
fact sharing with demographic nielsen

463
00:15:32,000 --> 00:15:33,759
doesn't quite work we have to do a

464
00:15:33,759 --> 00:15:35,440
little additional work to prevent a

465
00:15:35,440 --> 00:15:37,440
linear attack and if you want to know

466
00:15:37,440 --> 00:15:39,759
about that just description in the paper

467
00:15:39,759 --> 00:15:41,600
uh but the point is that in the end we

468
00:15:41,600 --> 00:15:44,000
get third party communication or then to

469
00:15:44,000 --> 00:15:47,279
produce all of n squared encoded triples

470
00:15:47,279 --> 00:15:49,120
now we have these simply triples but of

471
00:15:49,120 --> 00:15:50,639
course the question is how do we use

472
00:15:50,639 --> 00:15:52,240
them right

473
00:15:52,240 --> 00:15:54,000
the problem is that uh

474
00:15:54,000 --> 00:15:55,279
you know we said we want to do general

475
00:15:55,279 --> 00:15:56,720
computation we don't want to do some

476
00:15:56,720 --> 00:15:58,480
decomputation and yet what we now have

477
00:15:58,480 --> 00:16:00,000
are simply triples

478
00:16:00,000 --> 00:16:01,759
and our observation is that you can

479
00:16:01,759 --> 00:16:04,320
actually unpack these triples at low

480
00:16:04,320 --> 00:16:06,320
cost by turning to the committee based

481
00:16:06,320 --> 00:16:08,720
approach so now what we're going to do

482
00:16:08,720 --> 00:16:10,320
is instead of using the triples directly

483
00:16:10,320 --> 00:16:11,920
we're going to unpack some and to do

484
00:16:11,920 --> 00:16:13,680
that we're going to create a large

485
00:16:13,680 --> 00:16:16,639
number specifically oh and over s

486
00:16:16,639 --> 00:16:18,320
of unpacking committees and these

487
00:16:18,320 --> 00:16:19,519
committees are going to be small in

488
00:16:19,519 --> 00:16:20,560
particular the only thing you're going

489
00:16:20,560 --> 00:16:22,480
to committees is that there's at least

490
00:16:22,480 --> 00:16:25,120
one honest party in each committee

491
00:16:25,120 --> 00:16:26,800
and of course the question is now how do

492
00:16:26,800 --> 00:16:28,480
you possibly use uh you know tax

493
00:16:28,480 --> 00:16:29,759
consumers these committees there's not

494
00:16:29,759 --> 00:16:31,360
even enough parties to reconstruct the

495
00:16:31,360 --> 00:16:32,720
facts you can share inside of each

496
00:16:32,720 --> 00:16:33,680
committee

497
00:16:33,680 --> 00:16:35,360
and the trick you find is this so what

498
00:16:35,360 --> 00:16:37,279
we do is we have each of the original

499
00:16:37,279 --> 00:16:39,040
end parties that holds a share of the

500
00:16:39,040 --> 00:16:41,360
packed secret sharing will additively

501
00:16:41,360 --> 00:16:44,240
sub-share their share

502
00:16:44,240 --> 00:16:46,079
to the unpacking committees so in the

503
00:16:46,079 --> 00:16:48,000
end each unpacking committee has holds

504
00:16:48,000 --> 00:16:50,800
now an additive sharing of the full

505
00:16:50,800 --> 00:16:52,480
tax secret sharing

506
00:16:52,480 --> 00:16:54,800
and it turns out that

507
00:16:54,800 --> 00:16:56,399
you can actually unpack this that the

508
00:16:56,399 --> 00:16:58,639
process of unpacking a practical sharing

509
00:16:58,639 --> 00:17:00,720
just consists of linear operations and

510
00:17:00,720 --> 00:17:01,839
so the

511
00:17:01,839 --> 00:17:03,680
unpacking committee parties can just do

512
00:17:03,680 --> 00:17:04,640
this

513
00:17:04,640 --> 00:17:06,799
underneath out of secret sharing without

514
00:17:06,799 --> 00:17:09,679
revealing anything and extract out the

515
00:17:09,679 --> 00:17:12,480
unpacked triples a b and c

516
00:17:12,480 --> 00:17:14,079
of course once we have the unpacked

517
00:17:14,079 --> 00:17:15,199
triples

518
00:17:15,199 --> 00:17:16,959
we can just use sort of standard

519
00:17:16,959 --> 00:17:18,400
techniques to achieve the online

520
00:17:18,400 --> 00:17:20,160
facebook protocol and specifically

521
00:17:20,160 --> 00:17:21,839
because we're now working in the

522
00:17:21,839 --> 00:17:23,919
dishonest majority setting we're going

523
00:17:23,919 --> 00:17:26,160
to use the speeds protocol uh so the

524
00:17:26,160 --> 00:17:27,280
first thing we're going to do is

525
00:17:27,280 --> 00:17:29,120
actually authenticate those triples uh

526
00:17:29,120 --> 00:17:30,559
you know we do this kind of the same way

527
00:17:30,559 --> 00:17:32,240
this piece does this by sacrificing some

528
00:17:32,240 --> 00:17:33,919
of those triples uh to produce

529
00:17:33,919 --> 00:17:35,840
centicade's triples and once we have a

530
00:17:35,840 --> 00:17:37,440
set okay triple we can just use the

531
00:17:37,440 --> 00:17:39,120
standard speeds protocol inside of each

532
00:17:39,120 --> 00:17:40,799
committee and the important thing is

533
00:17:40,799 --> 00:17:42,400
because we have many committees each

534
00:17:42,400 --> 00:17:44,640
committee can be responsible for a small

535
00:17:44,640 --> 00:17:47,600
fraction of the gates and so even though

536
00:17:47,600 --> 00:17:49,600
you know the cost of speeds is sort of

537
00:17:49,600 --> 00:17:50,400
uh

538
00:17:50,400 --> 00:17:51,760
you know each party does constant

539
00:17:51,760 --> 00:17:53,280
communication per gate the number of

540
00:17:53,280 --> 00:17:55,360
gates that each party has to do

541
00:17:55,360 --> 00:17:58,160
is small allowing us to get this cost

542
00:17:58,160 --> 00:17:59,360
low

543
00:17:59,360 --> 00:18:02,400
so to quickly summarize the costs um

544
00:18:02,400 --> 00:18:03,679
you know you have the following steps

545
00:18:03,679 --> 00:18:04,880
you have triple generation we have the

546
00:18:04,880 --> 00:18:07,039
unpacking and the online phase

547
00:18:07,039 --> 00:18:09,280
so for triple generation the basic cost

548
00:18:09,280 --> 00:18:10,799
is this cost of dam great nielsen

549
00:18:10,799 --> 00:18:13,120
protocol which requires uh c over n

550
00:18:13,120 --> 00:18:15,280
communication on the computation side

551
00:18:15,280 --> 00:18:17,039
there's additional login factor due to

552
00:18:17,039 --> 00:18:18,960
having to interpolate the polynomials

553
00:18:18,960 --> 00:18:21,440
for the tax secret sharing

554
00:18:21,440 --> 00:18:23,600
uh in unpacking triple steps the actual

555
00:18:23,600 --> 00:18:25,760
dominant cost of communication is in

556
00:18:25,760 --> 00:18:27,520
sending the shares to the unpacking

557
00:18:27,520 --> 00:18:28,720
committees

558
00:18:28,720 --> 00:18:30,240
and we show how you can do this with

559
00:18:30,240 --> 00:18:32,480
total of c over n communication as well

560
00:18:32,480 --> 00:18:34,559
per party so total offline communication

561
00:18:34,559 --> 00:18:36,640
complexity is of c over n

562
00:18:36,640 --> 00:18:38,320
and uh you know the cost the

563
00:18:38,320 --> 00:18:41,039
computational cost is uh s c log n over

564
00:18:41,039 --> 00:18:43,600
n and then the online phase now because

565
00:18:43,600 --> 00:18:45,919
we only have each party in a single in

566
00:18:45,919 --> 00:18:47,760
every in a single committee you know

567
00:18:47,760 --> 00:18:49,600
computing a small fraction of the gates

568
00:18:49,600 --> 00:18:51,039
is also now

569
00:18:51,039 --> 00:18:53,760
s over n times the size of the circuit

570
00:18:53,760 --> 00:18:55,440
and this gives us the claims results

571
00:18:55,440 --> 00:18:56,640
that we claimed

572
00:18:56,640 --> 00:18:58,480
and finally you know

573
00:18:58,480 --> 00:19:00,160
like gabe we also

574
00:19:00,160 --> 00:19:02,160
implemented this and evaluated how it

575
00:19:02,160 --> 00:19:04,160
costs and we see that as the number of

576
00:19:04,160 --> 00:19:06,080
parties grows the cost for generating

577
00:19:06,080 --> 00:19:08,000
authenticated triples which are the

578
00:19:08,000 --> 00:19:09,360
things that you need for the online

579
00:19:09,360 --> 00:19:11,600
phase uh really does decrease with the

580
00:19:11,600 --> 00:19:12,880
number of parties so specifically we

581
00:19:12,880 --> 00:19:14,720
showed that once you get up to uh two to

582
00:19:14,720 --> 00:19:16,559
twenty s parties you know we can

583
00:19:16,559 --> 00:19:17,919
generate one million authenticated

584
00:19:17,919 --> 00:19:20,000
triples in about 10 milliseconds and so

585
00:19:20,000 --> 00:19:21,200
hopefully

586
00:19:21,200 --> 00:19:22,640
uh what it convinced you here is that

587
00:19:22,640 --> 00:19:25,120
this protocol really is decreasing as

588
00:19:25,120 --> 00:19:26,880
and increases and less

589
00:19:26,880 --> 00:19:29,200
as the more the merrier

590
00:19:29,200 --> 00:19:32,440
thank you

591
00:19:46,720 --> 00:19:48,799
yeah thanks

592
00:19:48,799 --> 00:19:50,400
any questions

593
00:19:50,400 --> 00:19:53,720
from the room

594
00:19:54,240 --> 00:19:56,559
um

595
00:19:58,559 --> 00:19:59,360
so

596
00:19:59,360 --> 00:20:01,600
on one of the last slides you actually

597
00:20:01,600 --> 00:20:03,760
showed that you ran this protocol with

598
00:20:03,760 --> 00:20:07,039
one million parties

599
00:20:07,039 --> 00:20:08,880
so i had to be correct so we computed

600
00:20:08,880 --> 00:20:10,480
the computation cost of party we

601
00:20:10,480 --> 00:20:12,000
couldn't actually run the full protocol

602
00:20:12,000 --> 00:20:13,360
because of course we don't have access

603
00:20:13,360 --> 00:20:15,520
to a million party network

604
00:20:15,520 --> 00:20:17,919
so we sort of emulated the communication

605
00:20:17,919 --> 00:20:19,200
part and actually computed the

606
00:20:19,200 --> 00:20:20,720
computation cost to give the total

607
00:20:20,720 --> 00:20:22,799
running time

608
00:20:22,799 --> 00:20:25,360
okay so those estimates

609
00:20:25,360 --> 00:20:26,559
yeah yeah

610
00:20:26,559 --> 00:20:28,799
yeah would be nice to run the real

611
00:20:28,799 --> 00:20:32,760
experiment then but uh

612
00:20:34,640 --> 00:20:37,360
any more questions no okay let's thank

613
00:20:37,360 --> 00:20:38,630
the speakers again

614
00:20:38,630 --> 00:20:41,859
[Applause]

615
00:20:43,520 --> 00:20:45,200
let me move on to

616
00:20:45,200 --> 00:20:46,840
the talk by elon

617
00:20:46,840 --> 00:20:48,799
komakowski

618
00:20:48,799 --> 00:20:51,440
the next talk

619
00:20:51,679 --> 00:20:55,280
okay yes this slide is already showing

620
00:20:55,280 --> 00:20:57,200
the talk will be about multi-party

621
00:20:57,200 --> 00:20:59,280
reusable non-interactive secure

622
00:20:59,280 --> 00:21:01,280
computation

623
00:21:01,280 --> 00:21:02,480
go ahead

624
00:21:02,480 --> 00:21:05,039
can you hear me

625
00:21:06,159 --> 00:21:08,320
okay so the talk is about

626
00:21:08,320 --> 00:21:10,000
non-interactive secure multi-party

627
00:21:10,000 --> 00:21:12,720
computation from lwe i'm milan

628
00:21:12,720 --> 00:21:14,559
komargotsky and this is based on joint

629
00:21:14,559 --> 00:21:16,960
work with brisbane hamuda irish jane and

630
00:21:16,960 --> 00:21:19,440
ray chilling

631
00:21:19,440 --> 00:21:21,600
so the motivating scenario for our talk

632
00:21:21,600 --> 00:21:22,640
is

633
00:21:22,640 --> 00:21:24,480
is a strong version of standard secure

634
00:21:24,480 --> 00:21:26,720
computation so imagine the following

635
00:21:26,720 --> 00:21:28,640
setting there are three

636
00:21:28,640 --> 00:21:31,039
hospitals each having their own private

637
00:21:31,039 --> 00:21:34,080
database so hospital number one has x1

638
00:21:34,080 --> 00:21:36,080
hospital number two has x2 and hospital

639
00:21:36,080 --> 00:21:38,080
number three has x3

640
00:21:38,080 --> 00:21:40,320
we want to be able to implement the

641
00:21:40,320 --> 00:21:43,200
following secure computation protocol

642
00:21:43,200 --> 00:21:45,840
we first want each player to be able to

643
00:21:45,840 --> 00:21:48,159
commit to its own input

644
00:21:48,159 --> 00:21:49,600
and publish this commitment on the

645
00:21:49,600 --> 00:21:51,679
public bulletin board

646
00:21:51,679 --> 00:21:54,159
and then at a later stage

647
00:21:54,159 --> 00:21:56,880
these three parties may want to jointly

648
00:21:56,880 --> 00:21:58,559
perform some

649
00:21:58,559 --> 00:22:01,360
some computation on their joint inputs

650
00:22:01,360 --> 00:22:03,840
so compute some function f on x1 x2 and

651
00:22:03,840 --> 00:22:04,880
x3

652
00:22:04,880 --> 00:22:07,360
we want to be able to compute

653
00:22:07,360 --> 00:22:09,600
this function with this function by

654
00:22:09,600 --> 00:22:12,240
sending just one single message from

655
00:22:12,240 --> 00:22:15,039
each hospital to

656
00:22:15,039 --> 00:22:17,440
some public evaluator and that public

657
00:22:17,440 --> 00:22:19,679
evaluator will be able to compute based

658
00:22:19,679 --> 00:22:22,080
on these three public messages along

659
00:22:22,080 --> 00:22:23,440
with the public commitments to the

660
00:22:23,440 --> 00:22:24,720
inputs

661
00:22:24,720 --> 00:22:28,240
the function f that it wanted to compute

662
00:22:28,240 --> 00:22:30,559
so this is a

663
00:22:30,559 --> 00:22:32,559
sort of a version of two round npc but

664
00:22:32,559 --> 00:22:35,200
we want to be to do a little bit more so

665
00:22:35,200 --> 00:22:37,520
we want to allow for instance for

666
00:22:37,520 --> 00:22:39,600
somebody that comes later

667
00:22:39,600 --> 00:22:42,080
to join the computation

668
00:22:42,080 --> 00:22:43,919
at a later stage let's say it's a

669
00:22:43,919 --> 00:22:46,880
hospital number four that has a private

670
00:22:46,880 --> 00:22:49,919
input x4 and and then it will commit to

671
00:22:49,919 --> 00:22:51,120
its input

672
00:22:51,120 --> 00:22:53,280
publish it on the public bulletin board

673
00:22:53,280 --> 00:22:54,559
and later

674
00:22:54,559 --> 00:22:56,480
let's say we want to compute some

675
00:22:56,480 --> 00:22:58,960
function together with part number one

676
00:22:58,960 --> 00:23:01,120
they will be able to com will be able to

677
00:23:01,120 --> 00:23:03,520
do it by sending just one single message

678
00:23:03,520 --> 00:23:06,240
from each party to a public evaluator

679
00:23:06,240 --> 00:23:07,919
that will allow him to compute the

680
00:23:07,919 --> 00:23:11,760
function f prime on x1 and x4

681
00:23:11,760 --> 00:23:13,679
so this is the motivating scenario for

682
00:23:13,679 --> 00:23:15,679
mrnas and this is what mrnas basically

683
00:23:15,679 --> 00:23:16,640
is

684
00:23:16,640 --> 00:23:20,080
slightly more formally and mrnisk is

685
00:23:20,080 --> 00:23:20,880
a

686
00:23:20,880 --> 00:23:22,960
secure computation protocol with three

687
00:23:22,960 --> 00:23:25,280
phases two of which consist of

688
00:23:25,280 --> 00:23:26,880
interaction and the last is just an

689
00:23:26,880 --> 00:23:28,720
output phase

690
00:23:28,720 --> 00:23:30,799
so in the first phase whenever a party

691
00:23:30,799 --> 00:23:32,559
joins the system and wants to

692
00:23:32,559 --> 00:23:35,039
participate in the secure computation

693
00:23:35,039 --> 00:23:38,320
it commits to it it's private input and

694
00:23:38,320 --> 00:23:40,720
remembers for itself some private state

695
00:23:40,720 --> 00:23:42,960
so x hat is the encoding or the

696
00:23:42,960 --> 00:23:45,679
commitment to the input and s is the

697
00:23:45,679 --> 00:23:48,480
secret state that it keeps for itself

698
00:23:48,480 --> 00:23:49,279
then

699
00:23:49,279 --> 00:23:51,760
the any subset of parties might want to

700
00:23:51,760 --> 00:23:54,159
want to compute the function f

701
00:23:54,159 --> 00:23:57,120
uh on together with all of the known

702
00:23:57,120 --> 00:24:00,159
public encodings of uh some

703
00:24:00,159 --> 00:24:02,480
subset of parties and the secret state

704
00:24:02,480 --> 00:24:04,880
of only that party it can encode a

705
00:24:04,880 --> 00:24:06,320
message

706
00:24:06,320 --> 00:24:08,640
it can encode a message alpha

707
00:24:08,640 --> 00:24:11,279
and then all the alphas together with

708
00:24:11,279 --> 00:24:13,279
the encodings of the private inputs of

709
00:24:13,279 --> 00:24:15,520
the corresponding parties should be it

710
00:24:15,520 --> 00:24:17,520
should be possible to publicly

711
00:24:17,520 --> 00:24:20,799
compute the output of the functionality

712
00:24:20,799 --> 00:24:24,320
so this is a very simple

713
00:24:24,559 --> 00:24:26,080
communication pattern for secure

714
00:24:26,080 --> 00:24:28,640
computation and importantly we want

715
00:24:28,640 --> 00:24:30,960
correctness even if parties join

716
00:24:30,960 --> 00:24:32,720
dynamically so as long as the

717
00:24:32,720 --> 00:24:35,520
computation proceeds even perhaps after

718
00:24:35,520 --> 00:24:37,120
some of the parties already performed

719
00:24:37,120 --> 00:24:38,880
some computations

720
00:24:38,880 --> 00:24:40,880
and in terms of security

721
00:24:40,880 --> 00:24:42,960
in this work we focus on semi-honest or

722
00:24:42,960 --> 00:24:44,880
semi-malicious security

723
00:24:44,880 --> 00:24:47,279
we assume corruptions are static and the

724
00:24:47,279 --> 00:24:49,440
dishonest majority

725
00:24:49,440 --> 00:24:51,840
so this is the the formal syntax of

726
00:24:51,840 --> 00:24:53,279
mrnas

727
00:24:53,279 --> 00:24:55,679
and in other words you can just think of

728
00:24:55,679 --> 00:24:58,480
mrnisk as a very strong version of

729
00:24:58,480 --> 00:25:01,279
two-round mpc where the first message is

730
00:25:01,279 --> 00:25:03,679
reusable across different second message

731
00:25:03,679 --> 00:25:05,120
computations

732
00:25:05,120 --> 00:25:07,120
and the number the set of parties that

733
00:25:07,120 --> 00:25:08,720
participate in the game is completely

734
00:25:08,720 --> 00:25:09,760
dynamic

735
00:25:09,760 --> 00:25:12,559
namely parties can join along the way

736
00:25:12,559 --> 00:25:14,000
and this also implies that the first

737
00:25:14,000 --> 00:25:16,000
round message for example has to be very

738
00:25:16,000 --> 00:25:17,600
short and independent of the number of

739
00:25:17,600 --> 00:25:19,760
parties

740
00:25:19,760 --> 00:25:21,600
so this is a very simple way to think of

741
00:25:21,600 --> 00:25:24,320
mrnisk what do we know about this very

742
00:25:24,320 --> 00:25:26,080
strong and powerful

743
00:25:26,080 --> 00:25:28,240
definition of mpc or communication

744
00:25:28,240 --> 00:25:30,640
better for npc so we have a handful of

745
00:25:30,640 --> 00:25:33,840
constructions some of which achieve

746
00:25:33,840 --> 00:25:34,640
this

747
00:25:34,640 --> 00:25:36,320
communication pattern and some of them

748
00:25:36,320 --> 00:25:38,720
don't so the early constructions of two

749
00:25:38,720 --> 00:25:40,640
round npc can actually be shown to

750
00:25:40,640 --> 00:25:43,200
satisfy this very strong notion

751
00:25:43,200 --> 00:25:44,880
but the problem is that they're based on

752
00:25:44,880 --> 00:25:46,880
i o or weakness encryption which

753
00:25:46,880 --> 00:25:48,480
although we know how to base them on

754
00:25:48,480 --> 00:25:50,799
well established assumptions

755
00:25:50,799 --> 00:25:52,159
they're still

756
00:25:52,159 --> 00:25:54,080
very inefficient and they're

757
00:25:54,080 --> 00:25:55,600
and they're based on the collective

758
00:25:55,600 --> 00:25:57,279
still still based on the collection of

759
00:25:57,279 --> 00:25:59,679
assumptions and we want the protocol

760
00:25:59,679 --> 00:26:00,960
that's based on a single clean

761
00:26:00,960 --> 00:26:02,240
assumption

762
00:26:02,240 --> 00:26:04,240
uh the second generation of

763
00:26:04,240 --> 00:26:06,960
constructions which use the multi-kfhe

764
00:26:06,960 --> 00:26:08,880
or homomorphic signaturing

765
00:26:08,880 --> 00:26:11,440
they do not satisfy the properties of

766
00:26:11,440 --> 00:26:13,919
mrnas they don't support the dynamics of

767
00:26:13,919 --> 00:26:16,080
parties namely the first round messages

768
00:26:16,080 --> 00:26:17,600
for instance the length of the first

769
00:26:17,600 --> 00:26:19,200
round message of each party depends on

770
00:26:19,200 --> 00:26:21,600
the number of parties

771
00:26:21,600 --> 00:26:23,360
and this concept of mrnisk was

772
00:26:23,360 --> 00:26:25,039
introduced about a year or a year and a

773
00:26:25,039 --> 00:26:28,320
half ago by bentham and lean in pcc

774
00:26:28,320 --> 00:26:29,919
where they showed the first construction

775
00:26:29,919 --> 00:26:32,799
based on sxth so pairings groups with

776
00:26:32,799 --> 00:26:34,000
pairings

777
00:26:34,000 --> 00:26:35,840
and in this work and also in the next

778
00:26:35,840 --> 00:26:36,960
talk

779
00:26:36,960 --> 00:26:40,320
we construct an mrnas based on lw that's

780
00:26:40,320 --> 00:26:42,960
the main result

781
00:26:44,080 --> 00:26:45,840
so in a very high level

782
00:26:45,840 --> 00:26:47,679
the way we achieve our construction is

783
00:26:47,679 --> 00:26:50,000
the following we identify a complete

784
00:26:50,000 --> 00:26:52,640
functionality or a complete primitive

785
00:26:52,640 --> 00:26:55,600
which if we build it then you can

786
00:26:55,600 --> 00:26:58,080
generally compile it to get an mrnas we

787
00:26:58,080 --> 00:27:00,080
call this primitive reusable functional

788
00:27:00,080 --> 00:27:02,240
ot and this is a

789
00:27:02,240 --> 00:27:03,840
you can view it as an extension of

790
00:27:03,840 --> 00:27:07,360
standard ot that suffices to be compiled

791
00:27:07,360 --> 00:27:10,400
into this very strong mrnisk

792
00:27:10,400 --> 00:27:12,559
and the technical contribution is a

793
00:27:12,559 --> 00:27:14,159
construction of this reusable

794
00:27:14,159 --> 00:27:17,360
functionality from lwe and together we

795
00:27:17,360 --> 00:27:20,240
get the construction of mrnas from lwe

796
00:27:20,240 --> 00:27:22,799
we observed that mrnisk has applications

797
00:27:22,799 --> 00:27:25,520
or interesting applications by itself to

798
00:27:25,520 --> 00:27:27,919
to classical uh to classical

799
00:27:27,919 --> 00:27:29,840
cryptographic primitives for instance we

800
00:27:29,840 --> 00:27:32,320
show that you can take any multi-key fh

801
00:27:32,320 --> 00:27:34,720
scheme and then

802
00:27:34,720 --> 00:27:37,200
and then take the decryption phase and

803
00:27:37,200 --> 00:27:39,279
make it and use the nmr needs to

804
00:27:39,279 --> 00:27:41,200
implement it and this directly gives you

805
00:27:41,200 --> 00:27:43,440
a threshold multi key fhe scheme

806
00:27:43,440 --> 00:27:45,679
and if you just run the com this

807
00:27:45,679 --> 00:27:47,120
compiler you get

808
00:27:47,120 --> 00:27:48,480
you get the construction with better

809
00:27:48,480 --> 00:27:50,880
parameters than what was known

810
00:27:50,880 --> 00:27:53,279
so this is a very nice

811
00:27:53,279 --> 00:27:55,520
and the way we implemented this as

812
00:27:55,520 --> 00:27:57,840
follows so let me tell you what a

813
00:27:57,840 --> 00:27:59,520
functional ot is

814
00:27:59,520 --> 00:28:01,360
and then i'll tell you a couple of words

815
00:28:01,360 --> 00:28:03,120
about how we build it

816
00:28:03,120 --> 00:28:06,399
so a functional reusable function lot is

817
00:28:06,399 --> 00:28:08,880
just a special case of mrnas so it's a

818
00:28:08,880 --> 00:28:10,480
special functionality it's a special

819
00:28:10,480 --> 00:28:11,679
case

820
00:28:11,679 --> 00:28:13,840
that only concerns two parties

821
00:28:13,840 --> 00:28:16,240
so there's only alice in bob

822
00:28:16,240 --> 00:28:19,120
alice's input is called x1 bob's input

823
00:28:19,120 --> 00:28:20,640
is called x2

824
00:28:20,640 --> 00:28:21,679
and

825
00:28:21,679 --> 00:28:23,840
the and the function that we compute

826
00:28:23,840 --> 00:28:25,919
looks as follows we're given two

827
00:28:25,919 --> 00:28:28,000
functions g1 and g2

828
00:28:28,000 --> 00:28:32,240
we apply g1 on x1 g1 gives us two inputs

829
00:28:32,240 --> 00:28:35,039
two outputs l0 and l1 you can think of

830
00:28:35,039 --> 00:28:37,600
them as labels of a garble circuit and

831
00:28:37,600 --> 00:28:41,039
g2 is applied on x2 and gives us a beat

832
00:28:41,039 --> 00:28:43,600
and what we want is to uh to get the l

833
00:28:43,600 --> 00:28:45,520
sub b label

834
00:28:45,520 --> 00:28:47,679
this is a very natural generalization of

835
00:28:47,679 --> 00:28:50,320
a standard ot sort of a whole a

836
00:28:50,320 --> 00:28:53,600
functional version of ot that where also

837
00:28:53,600 --> 00:28:55,600
the commitment to x1 and x2 are going to

838
00:28:55,600 --> 00:28:59,279
be reusable with many g1s and g2s

839
00:28:59,279 --> 00:29:02,080
and the way we construct it is based on

840
00:29:02,080 --> 00:29:04,159
we start with just using a homomorphic

841
00:29:04,159 --> 00:29:06,960
commitment for x1 and x2

842
00:29:06,960 --> 00:29:08,399
and then the

843
00:29:08,399 --> 00:29:10,720
the online phase is implemented using a

844
00:29:10,720 --> 00:29:13,120
very nice idea of procure skin.link from

845
00:29:13,120 --> 00:29:14,799
a couple of years ago who constructed

846
00:29:14,799 --> 00:29:16,799
the statistical sender a two-round

847
00:29:16,799 --> 00:29:19,039
statistical sender ot

848
00:29:19,039 --> 00:29:20,480
so i refer you to the full version of

849
00:29:20,480 --> 00:29:22,159
the talk or the paper for more details

850
00:29:22,159 --> 00:29:24,000
about this

851
00:29:24,000 --> 00:29:26,799
so just to conclude with we identify the

852
00:29:26,799 --> 00:29:28,799
complete primitive for mrnas if you

853
00:29:28,799 --> 00:29:30,320
build it from other assumptions you

854
00:29:30,320 --> 00:29:31,760
would get an mr mist from other

855
00:29:31,760 --> 00:29:34,159
assumptions and maybe perhaps the most

856
00:29:34,159 --> 00:29:36,080
interesting open problem is to build it

857
00:29:36,080 --> 00:29:39,760
from ddh or even just

858
00:29:39,760 --> 00:29:42,320
so this is an open problem and

859
00:29:42,320 --> 00:29:45,279
just uh as a note we have a new uh

860
00:29:45,279 --> 00:29:47,279
manuscript on iprint together with fresh

861
00:29:47,279 --> 00:29:49,600
fernando and ios jane where we construct

862
00:29:49,600 --> 00:29:52,080
a maliciously secure america uh which

863
00:29:52,080 --> 00:29:55,279
satisfies super polynomials stimulation

864
00:29:55,279 --> 00:29:57,600
so see a print if you're interested and

865
00:29:57,600 --> 00:30:00,399
thank you very much

866
00:30:05,919 --> 00:30:07,200
thank you

867
00:30:07,200 --> 00:30:09,600
uh time for a quick question very quick

868
00:30:09,600 --> 00:30:11,520
question don't

869
00:30:11,520 --> 00:30:13,440
no don't think uh

870
00:30:13,440 --> 00:30:15,360
no so then in in the interest of time

871
00:30:15,360 --> 00:30:17,200
let me move on to the

872
00:30:17,200 --> 00:30:18,960
next talk let's let's thank the speaker

873
00:30:18,960 --> 00:30:21,960
again

874
00:30:23,840 --> 00:30:25,760
thanks clown

875
00:30:25,760 --> 00:30:27,919
so

876
00:30:29,360 --> 00:30:31,840
yes will be our next speaker

877
00:30:31,840 --> 00:30:33,120
with a talk

878
00:30:33,120 --> 00:30:34,720
entitled unbounded multi-party

879
00:30:34,720 --> 00:30:38,720
competition from learning with errors

880
00:30:38,720 --> 00:30:41,200
uh hello can you hear me

881
00:30:41,200 --> 00:30:44,159
yeah we hear you uh please go ahead

882
00:30:44,159 --> 00:30:46,480
yeah thanks for the introduction so as

883
00:30:46,480 --> 00:30:48,559
you may already know uh so this work is

884
00:30:48,559 --> 00:30:50,960
the concurrent concurrent work with the

885
00:30:50,960 --> 00:30:52,159
previous

886
00:30:52,159 --> 00:30:54,720
presentation and in this work we also

887
00:30:54,720 --> 00:30:57,120
study the june version of the quran and

888
00:30:57,120 --> 00:30:59,200
pc protocol so for such a general

889
00:30:59,200 --> 00:31:00,640
version of protocol

890
00:31:00,640 --> 00:31:03,279
recall that it should satisfy this

891
00:31:03,279 --> 00:31:05,200
following properties it should be in the

892
00:31:05,200 --> 00:31:07,440
plan model and the first round message

893
00:31:07,440 --> 00:31:09,519
should be reusable for different

894
00:31:09,519 --> 00:31:12,399
functions and we require that any party

895
00:31:12,399 --> 00:31:14,720
um and we require that the first round

896
00:31:14,720 --> 00:31:16,960
message should satisfy the unbounded

897
00:31:16,960 --> 00:31:19,440
party party's property where the number

898
00:31:19,440 --> 00:31:21,760
of parties is not bounded by the first

899
00:31:21,760 --> 00:31:23,039
round messages

900
00:31:23,039 --> 00:31:26,720
and any subset of parties can jointly

901
00:31:26,720 --> 00:31:28,559
complete some function f in the second

902
00:31:28,559 --> 00:31:29,840
round

903
00:31:29,840 --> 00:31:32,799
and in this work uh we call this an

904
00:31:32,799 --> 00:31:35,919
mpc protocol as an unbounded mpc and

905
00:31:35,919 --> 00:31:37,919
such a notion was subsumed by the

906
00:31:37,919 --> 00:31:40,720
previous work of mahmoud enduring and

907
00:31:40,720 --> 00:31:44,559
they call this notion as mister nisk

908
00:31:44,559 --> 00:31:47,440
so previously as you may already know

909
00:31:47,440 --> 00:31:50,320
uh for the previous works uh for mpc

910
00:31:50,320 --> 00:31:53,120
protocols of two runs with the uh

911
00:31:53,120 --> 00:31:55,360
reusable first round message

912
00:31:55,360 --> 00:31:57,440
they are either in the crs model or

913
00:31:57,440 --> 00:31:59,840
don't satisfy the unbounded party's

914
00:31:59,840 --> 00:32:01,440
property or the other whole computation

915
00:32:01,440 --> 00:32:04,559
property and the exception is by the

916
00:32:04,559 --> 00:32:07,039
previous work of mahmoud and lin where

917
00:32:07,039 --> 00:32:08,880
they achieve all the properties but

918
00:32:08,880 --> 00:32:10,559
their assumptions is from binding their

919
00:32:10,559 --> 00:32:11,600
maps

920
00:32:11,600 --> 00:32:14,159
so but the bilinear maps are not post

921
00:32:14,159 --> 00:32:15,679
quantum secure

922
00:32:15,679 --> 00:32:17,600
so in this work we study the following

923
00:32:17,600 --> 00:32:19,840
question can we construct the unbounded

924
00:32:19,840 --> 00:32:22,880
mpc from learning with arrows and here

925
00:32:22,880 --> 00:32:25,600
is our result we constructed two round

926
00:32:25,600 --> 00:32:27,840
semi managers unbounded and mpc in the

927
00:32:27,840 --> 00:32:31,360
plant model from the newest arrow

928
00:32:32,480 --> 00:32:33,840
as you

929
00:32:33,840 --> 00:32:34,880
already know

930
00:32:34,880 --> 00:32:36,720
there is also a concurrent network by

931
00:32:36,720 --> 00:32:38,720
the last talk

932
00:32:38,720 --> 00:32:40,559
they also contract miss tennis from

933
00:32:40,559 --> 00:32:43,200
linux arrows

934
00:32:43,200 --> 00:32:45,360
so to obtain our results our key

935
00:32:45,360 --> 00:32:47,360
ingredient is the following attribute

936
00:32:47,360 --> 00:32:49,919
based secure functioning evaluation with

937
00:32:49,919 --> 00:32:51,919
public decryption property

938
00:32:51,919 --> 00:32:54,320
such a primitive is a two-party protocol

939
00:32:54,320 --> 00:32:56,480
between a sender and authority

940
00:32:56,480 --> 00:32:59,600
where the authority holds some policy p

941
00:32:59,600 --> 00:33:02,159
then it encodes this policy p as some

942
00:33:02,159 --> 00:33:04,880
public as some public key

943
00:33:04,880 --> 00:33:07,679
and send it to the sender

944
00:33:07,679 --> 00:33:10,480
so the sender can use this public key to

945
00:33:10,480 --> 00:33:12,399
encrypt some message m with some

946
00:33:12,399 --> 00:33:14,000
attribute and

947
00:33:14,000 --> 00:33:16,640
compute some cipher text

948
00:33:16,640 --> 00:33:19,039
then on the authority side he can also

949
00:33:19,039 --> 00:33:21,760
use this same attribute to generate some

950
00:33:21,760 --> 00:33:24,080
hint edge

951
00:33:24,080 --> 00:33:26,559
then we require that anyone with the

952
00:33:26,559 --> 00:33:28,799
server text and the hint can publicly

953
00:33:28,799 --> 00:33:32,000
decrypt this message m if the attribute

954
00:33:32,000 --> 00:33:35,440
is satisfied by this policy

955
00:33:35,440 --> 00:33:37,360
on the other hand if the attribute is

956
00:33:37,360 --> 00:33:39,600
not satisfied by this policy we will

957
00:33:39,600 --> 00:33:42,080
require that this message m is hidden

958
00:33:42,080 --> 00:33:45,039
from the authority

959
00:33:45,840 --> 00:33:48,240
and on the authority side

960
00:33:48,240 --> 00:33:50,720
we request that the public key and the

961
00:33:50,720 --> 00:33:53,679
hint should reveal nothing else

962
00:33:53,679 --> 00:33:56,159
beyond the information about whether

963
00:33:56,159 --> 00:33:58,559
such attribute is satisfied by this

964
00:33:58,559 --> 00:34:00,559
policy or not and it should hide

965
00:34:00,559 --> 00:34:03,760
everything else about this policy

966
00:34:03,760 --> 00:34:06,320
so in this work we construct such api

967
00:34:06,320 --> 00:34:08,879
sfv with a public decryption property

968
00:34:08,879 --> 00:34:10,879
from the newest arrow and then we

969
00:34:10,879 --> 00:34:13,679
combined generically with qrun npc

970
00:34:13,679 --> 00:34:16,480
protocol to obtain this unbounded mpc

971
00:34:16,480 --> 00:34:18,960
protocols

972
00:34:19,119 --> 00:34:21,199
thank you for more information you can

973
00:34:21,199 --> 00:34:25,239
see our full paper online

974
00:34:32,010 --> 00:34:35,199
[Music]

975
00:34:47,280 --> 00:34:50,079
yes thanks

976
00:34:50,320 --> 00:34:52,879
um yeah we have surely some time for

977
00:34:52,879 --> 00:34:55,279
questions

978
00:34:55,359 --> 00:34:58,960
on online no

979
00:35:00,960 --> 00:35:03,520
oh so so this all belongs to a class of

980
00:35:03,520 --> 00:35:04,560
uh

981
00:35:04,560 --> 00:35:07,040
not a part computation where you limit

982
00:35:07,040 --> 00:35:08,800
the interaction also like in the

983
00:35:08,800 --> 00:35:10,240
previous talk

984
00:35:10,240 --> 00:35:11,200
yeah

985
00:35:11,200 --> 00:35:13,520
well it's the the notion is the same as

986
00:35:13,520 --> 00:35:14,839
the previous

987
00:35:14,839 --> 00:35:17,359
work the progress about the previous

988
00:35:17,359 --> 00:35:20,160
presentation

989
00:35:21,599 --> 00:35:23,839
and where does the unbounded

990
00:35:23,839 --> 00:35:25,920
in the title refer to because i

991
00:35:25,920 --> 00:35:29,119
actually missed that point

992
00:35:29,760 --> 00:35:32,000
so unbounded multi-party computation and

993
00:35:32,000 --> 00:35:34,560
unbounded in which sense

994
00:35:34,560 --> 00:35:36,800
uh yeah so

995
00:35:36,800 --> 00:35:39,440
uh let me

996
00:35:41,359 --> 00:35:45,839
yeah so so for amanda we mean

997
00:35:47,200 --> 00:35:49,599
yeah so for unbounded we mean uh we

998
00:35:49,599 --> 00:35:50,720
require the

999
00:35:50,720 --> 00:35:51,920
first round

1000
00:35:51,920 --> 00:35:53,599
messaging not under the number of

1001
00:35:53,599 --> 00:35:54,560
parties

1002
00:35:54,560 --> 00:35:55,280
so

1003
00:35:55,280 --> 00:35:58,000
uh so for some mpc protocols is after

1004
00:35:58,000 --> 00:36:00,079
the first round message the number of

1005
00:36:00,079 --> 00:36:01,680
properties can be involved for the

1006
00:36:01,680 --> 00:36:04,000
second round is already bounded

1007
00:36:04,000 --> 00:36:05,520
but we require

1008
00:36:05,520 --> 00:36:07,680
after the first round message

1009
00:36:07,680 --> 00:36:09,280
the number of parties can be voted in

1010
00:36:09,280 --> 00:36:12,800
the second round is unbounded

1011
00:36:12,800 --> 00:36:15,200
okay yeah thanks yeah i missed the very

1012
00:36:15,200 --> 00:36:17,440
first part of your talk here

1013
00:36:17,440 --> 00:36:19,520
yeah a question

1014
00:36:19,520 --> 00:36:22,520
okay

1015
00:36:23,290 --> 00:36:26,429
[Music]

1016
00:36:31,040 --> 00:36:33,440
so thank you so once you say that you

1017
00:36:33,440 --> 00:36:36,160
have abundant parties can this new party

1018
00:36:36,160 --> 00:36:40,000
inject new secret to this computation

1019
00:36:40,000 --> 00:36:41,520
i mean let's say the

1020
00:36:41,520 --> 00:36:43,599
updatable parameters that we can update

1021
00:36:43,599 --> 00:36:45,920
with new party which comes to this

1022
00:36:45,920 --> 00:36:47,280
computation

1023
00:36:47,280 --> 00:36:51,680
yeah we allow new parties to join

1024
00:36:51,920 --> 00:36:53,280
yes or no

1025
00:36:53,280 --> 00:36:54,880
yes

1026
00:36:54,880 --> 00:36:57,920
okay thanks yeah

1027
00:36:58,560 --> 00:37:01,760
okay thanks any more questions coming up

1028
00:37:01,760 --> 00:37:05,920
no okay then let's thank speaker again

1029
00:37:06,640 --> 00:37:09,799
thank you

1030
00:37:10,000 --> 00:37:12,320
we will have our next speaker here with

1031
00:37:12,320 --> 00:37:16,520
us in the room david

1032
00:37:45,920 --> 00:37:49,160
to be honest

1033
00:38:02,640 --> 00:38:05,640
um

1034
00:38:29,760 --> 00:38:32,240
you'll need to go under display settings

1035
00:38:32,240 --> 00:38:36,240
and swap the presenter view

1036
00:38:37,200 --> 00:38:38,800
i think we can also

1037
00:38:38,800 --> 00:38:39,970
share

1038
00:38:39,970 --> 00:38:44,640
[Music]

1039
00:38:44,640 --> 00:38:46,960
and then

1040
00:38:54,720 --> 00:38:57,720
okay

1041
00:39:01,760 --> 00:39:03,359
okay hello everyone

1042
00:39:03,359 --> 00:39:05,599
my name is david kratzler and today i

1043
00:39:05,599 --> 00:39:07,200
present the payback always called a

1044
00:39:07,200 --> 00:39:09,200
generic compiler for publicly verifiable

1045
00:39:09,200 --> 00:39:12,079
covert multiparty computation or pvc mpc

1046
00:39:12,079 --> 00:39:13,760
for short this is a joint wreck with

1047
00:39:13,760 --> 00:39:15,599
sebastian faust kamit hassai and

1048
00:39:15,599 --> 00:39:18,000
benjamin

1049
00:39:22,880 --> 00:39:24,800
yeah okay yes so i guess you're all

1050
00:39:24,800 --> 00:39:26,640
familiar with semi honor security and

1051
00:39:26,640 --> 00:39:29,520
malicious security and in bridging

1052
00:39:29,520 --> 00:39:31,920
there is covert security in which an

1053
00:39:31,920 --> 00:39:34,079
adversary is allowed to act arbitrarily

1054
00:39:34,079 --> 00:39:36,320
as a malicious security however the

1055
00:39:36,320 --> 00:39:38,000
addresser even has a chance to break the

1056
00:39:38,000 --> 00:39:40,320
security guarantees by cheating

1057
00:39:40,320 --> 00:39:42,160
on the other hand the honors parties

1058
00:39:42,160 --> 00:39:43,760
have a chance to detect the cheating

1059
00:39:43,760 --> 00:39:46,880
attempt and thus identify the adversary

1060
00:39:46,880 --> 00:39:50,640
which kind of harms hits its reputation

1061
00:39:50,640 --> 00:39:52,480
there's an extension which is called

1062
00:39:52,480 --> 00:39:54,960
publicly verifiable covert security in

1063
00:39:54,960 --> 00:39:56,480
which honest parties that detect

1064
00:39:56,480 --> 00:39:58,480
cheating can also generate a proof of

1065
00:39:58,480 --> 00:40:00,400
misbehavior which can be transferred to

1066
00:40:00,400 --> 00:40:02,320
any third party to convince this party

1067
00:40:02,320 --> 00:40:04,800
about a cheating attempt

1068
00:40:04,800 --> 00:40:06,880
so brie's work mainly focused on the

1069
00:40:06,880 --> 00:40:09,760
two-party setting for pvc mpc where we

1070
00:40:09,760 --> 00:40:11,839
want to focus on the multi-party setting

1071
00:40:11,839 --> 00:40:13,920
in particular we present a compiler

1072
00:40:13,920 --> 00:40:16,800
which transforms any semi-honest secure

1073
00:40:16,800 --> 00:40:19,359
protocol into a pvc one

1074
00:40:19,359 --> 00:40:21,359
so let me give you a short overview of

1075
00:40:21,359 --> 00:40:22,720
our contribution

1076
00:40:22,720 --> 00:40:25,680
so we have to just explain compiler

1077
00:40:25,680 --> 00:40:27,520
and this means that we are the first to

1078
00:40:27,520 --> 00:40:30,240
formally specify and prove a pvc mpc

1079
00:40:30,240 --> 00:40:32,560
protocol there has been prior work which

1080
00:40:32,560 --> 00:40:34,720
presented kind of an intuition on how to

1081
00:40:34,720 --> 00:40:36,880
extend their two-party approach to the

1082
00:40:36,880 --> 00:40:38,720
multi-party setting however in this

1083
00:40:38,720 --> 00:40:41,200
prior work the detection probability was

1084
00:40:41,200 --> 00:40:42,640
bounded by one over the number of

1085
00:40:42,640 --> 00:40:44,319
parties well we do not have something

1086
00:40:44,319 --> 00:40:45,359
like this

1087
00:40:45,359 --> 00:40:47,200
and when i say we are the first i want

1088
00:40:47,200 --> 00:40:48,480
to mention that there's also a

1089
00:40:48,480 --> 00:40:50,880
concurrent work with similar techniques

1090
00:40:50,880 --> 00:40:54,079
than ours and also similar results

1091
00:40:54,079 --> 00:40:57,119
besides our major contribution we also

1092
00:40:57,119 --> 00:40:59,040
are the first to incorporate time lock

1093
00:40:59,040 --> 00:41:01,040
puzzles into a simulation based security

1094
00:41:01,040 --> 00:41:02,079
proof

1095
00:41:02,079 --> 00:41:02,960
and

1096
00:41:02,960 --> 00:41:05,920
we specify verify the time lock puzzles

1097
00:41:05,920 --> 00:41:08,000
and i will focus on the first part the

1098
00:41:08,000 --> 00:41:09,280
compiler

1099
00:41:09,280 --> 00:41:11,440
so i want to give you a short overview

1100
00:41:11,440 --> 00:41:13,040
or a simplified overview over our

1101
00:41:13,040 --> 00:41:15,760
compiler and we will focus on the

1102
00:41:15,760 --> 00:41:18,000
offline online setting in which there is

1103
00:41:18,000 --> 00:41:20,319
a input independent offline protocol and

1104
00:41:20,319 --> 00:41:21,520
an input

1105
00:41:21,520 --> 00:41:23,520
input dependent online protocol

1106
00:41:23,520 --> 00:41:25,280
actually we do not have to do anything

1107
00:41:25,280 --> 00:41:27,119
with the online protocol because this is

1108
00:41:27,119 --> 00:41:29,200
typically fast anyway and we just take a

1109
00:41:29,200 --> 00:41:31,280
military secure online protocol however

1110
00:41:31,280 --> 00:41:33,119
with the offline protocol we need to do

1111
00:41:33,119 --> 00:41:35,599
some changes and we take a semi honest

1112
00:41:35,599 --> 00:41:38,480
offline protocol and we dey randomize it

1113
00:41:38,480 --> 00:41:40,160
which means that parties derive all of

1114
00:41:40,160 --> 00:41:42,160
their randomness from some predefined

1115
00:41:42,160 --> 00:41:43,040
seats

1116
00:41:43,040 --> 00:41:45,520
and also we add some kind of public

1117
00:41:45,520 --> 00:41:47,440
transcript

1118
00:41:47,440 --> 00:41:50,720
so yeah now we have two parties and both

1119
00:41:50,720 --> 00:41:54,319
of them have some secret and some

1120
00:41:54,319 --> 00:41:56,720
random seeds and then they execute two

1121
00:41:56,720 --> 00:41:59,440
instances of this semi-honest protocol

1122
00:41:59,440 --> 00:42:01,359
in which they get out some transcripts

1123
00:42:01,359 --> 00:42:04,319
together with some view computations

1124
00:42:04,319 --> 00:42:06,319
next these parties execute emerging

1125
00:42:06,319 --> 00:42:09,599
secure npc protocol in which they insert

1126
00:42:09,599 --> 00:42:12,560
a cruncher together with their seats and

1127
00:42:12,560 --> 00:42:14,960
this magician mpc protocol then adds up

1128
00:42:14,960 --> 00:42:17,680
this coin chairs to a coin and puts the

1129
00:42:17,680 --> 00:42:19,359
coin together with the corresponding

1130
00:42:19,359 --> 00:42:21,280
seats into a timer puzzle

1131
00:42:21,280 --> 00:42:23,839
which is then given to the parties

1132
00:42:23,839 --> 00:42:26,240
next the parties sign the transcripts

1133
00:42:26,240 --> 00:42:28,000
together with the timeline puzzles but

1134
00:42:28,000 --> 00:42:29,760
at this point no party really knows what

1135
00:42:29,760 --> 00:42:31,520
is inside the timelock puzzle so they do

1136
00:42:31,520 --> 00:42:34,000
not know which instance is actually

1137
00:42:34,000 --> 00:42:35,760
opened and which instance will not be

1138
00:42:35,760 --> 00:42:37,760
opened

1139
00:42:37,760 --> 00:42:40,400
then in some second ground output phase

1140
00:42:40,400 --> 00:42:43,200
the imagination secure npc protocol just

1141
00:42:43,200 --> 00:42:44,960
gives what is inside the puzzle to the

1142
00:42:44,960 --> 00:42:46,880
parties this way parties do not really

1143
00:42:46,880 --> 00:42:48,960
have to open parcels in the optimistic

1144
00:42:48,960 --> 00:42:51,119
case however in the pessimistic case

1145
00:42:51,119 --> 00:42:52,720
when a watching address a read that

1146
00:42:52,720 --> 00:42:54,400
learns the second round output first

1147
00:42:54,400 --> 00:42:56,560
aborts parties can simply open the

1148
00:42:56,560 --> 00:42:58,560
timelock possible and still get whatever

1149
00:42:58,560 --> 00:43:00,960
is locked inside

1150
00:43:00,960 --> 00:43:03,680
in the next step any party can emulate

1151
00:43:03,680 --> 00:43:05,520
the protocol because it has the seats

1152
00:43:05,520 --> 00:43:07,200
now of this protocol instance and then

1153
00:43:07,200 --> 00:43:09,280
just emulate it locally and compare the

1154
00:43:09,280 --> 00:43:11,280
resulting transcript to transcript after

1155
00:43:11,280 --> 00:43:13,040
read execution

1156
00:43:13,040 --> 00:43:14,800
now if the transcripts aren't the same

1157
00:43:14,800 --> 00:43:16,240
there is

1158
00:43:16,240 --> 00:43:18,000
obviously there is some cheating

1159
00:43:18,000 --> 00:43:19,680
otherwise the parties can just continue

1160
00:43:19,680 --> 00:43:21,359
with the online phase if there's

1161
00:43:21,359 --> 00:43:23,680
cheating parties can just publish the

1162
00:43:23,680 --> 00:43:25,280
transcripts the signature and the

1163
00:43:25,280 --> 00:43:27,440
timelock puzzle which is sufficient for

1164
00:43:27,440 --> 00:43:29,839
any third party to also emulate the

1165
00:43:29,839 --> 00:43:33,520
protocol and detect the cheating attempt

1166
00:43:33,520 --> 00:43:35,359
if they continue with the online phase

1167
00:43:35,359 --> 00:43:37,200
they cannot use the

1168
00:43:37,200 --> 00:43:39,280
precomputation of the open instance for

1169
00:43:39,280 --> 00:43:41,599
example instance one which just means

1170
00:43:41,599 --> 00:43:43,200
that this recommendation goes to the

1171
00:43:43,200 --> 00:43:45,359
trash however they can use the other

1172
00:43:45,359 --> 00:43:47,119
precomputation in an online phase in

1173
00:43:47,119 --> 00:43:49,359
which they then use the actual secret

1174
00:43:49,359 --> 00:43:52,319
inputs and get the final outputs

1175
00:43:52,319 --> 00:43:53,680
the cool thing here is that the

1176
00:43:53,680 --> 00:43:55,920
complexity of this malicious secure

1177
00:43:55,920 --> 00:43:58,240
protocol is independent of the overall

1178
00:43:58,240 --> 00:44:00,000
protocol which means that it doesn't

1179
00:44:00,000 --> 00:44:02,079
matter if parties generate like 10 or 10

1180
00:44:02,079 --> 00:44:04,240
thousands of people troubles this puzzle

1181
00:44:04,240 --> 00:44:06,400
generation just costs the same which

1182
00:44:06,400 --> 00:44:07,839
means that the cost of this passive

1183
00:44:07,839 --> 00:44:09,440
generation armor ties over the

1184
00:44:09,440 --> 00:44:12,480
complexity of the semi-honest instances

1185
00:44:12,480 --> 00:44:15,040
and if we have several instances let's

1186
00:44:15,040 --> 00:44:17,040
say t instances then all but one of

1187
00:44:17,040 --> 00:44:18,880
these instances can be opened which

1188
00:44:18,880 --> 00:44:20,640
means that the detection probability is

1189
00:44:20,640 --> 00:44:22,560
t minus one divided by t

1190
00:44:22,560 --> 00:44:25,839
which is actually it was like our goal

1191
00:44:25,839 --> 00:44:27,359
because we wanted to decouple the

1192
00:44:27,359 --> 00:44:28,800
deterrence factor or the detection

1193
00:44:28,800 --> 00:44:31,839
probability from the number of parties

1194
00:44:31,839 --> 00:44:34,079
this already concludes my talk and

1195
00:44:34,079 --> 00:44:37,839
thanks a lot for your attention

1196
00:44:41,920 --> 00:44:43,920
thanks david

1197
00:44:43,920 --> 00:44:46,880
any questions in the room

1198
00:44:46,880 --> 00:44:49,880
online

1199
00:44:50,160 --> 00:44:53,359
no no no it was nice to see that you use

1200
00:44:53,359 --> 00:44:55,440
a

1201
00:44:55,599 --> 00:44:58,880
oh there's a question for someone else

1202
00:44:58,880 --> 00:45:02,520
let's get you to mike

1203
00:45:06,960 --> 00:45:08,800
thanks for the talk um you said you

1204
00:45:08,800 --> 00:45:10,640
could have like an arbitrary detection

1205
00:45:10,640 --> 00:45:12,800
factor or did i miss here like now you

1206
00:45:12,800 --> 00:45:15,440
said like it was t minus one over t

1207
00:45:15,440 --> 00:45:18,400
yes i'm like you can pick any t and you

1208
00:45:18,400 --> 00:45:21,599
always achieve t minus one divided by t

1209
00:45:21,599 --> 00:45:24,240
while this intuition of the prior work

1210
00:45:24,240 --> 00:45:26,480
and was bounded by one over n so you

1211
00:45:26,480 --> 00:45:28,560
could not get better than one over n at

1212
00:45:28,560 --> 00:45:31,520
least not without doing some additional

1213
00:45:31,520 --> 00:45:33,119
complex stuff like repeating the

1214
00:45:33,119 --> 00:45:34,880
protocol

1215
00:45:34,880 --> 00:45:36,560
but d still depends on the number of

1216
00:45:36,560 --> 00:45:38,400
parties right it's not always no t is

1217
00:45:38,400 --> 00:45:39,920
the number of instances that are

1218
00:45:39,920 --> 00:45:44,760
executed okay thank you

1219
00:45:47,760 --> 00:45:50,319
another question

1220
00:45:51,440 --> 00:45:52,800
uh can you also

1221
00:45:52,800 --> 00:45:53,599
get

1222
00:45:53,599 --> 00:45:56,160
nbc with identifiable board from this

1223
00:45:56,160 --> 00:45:58,400
approach

1224
00:45:58,400 --> 00:46:00,800
i guess i'm adding identify the board is

1225
00:46:00,800 --> 00:46:02,800
kind of autogonal

1226
00:46:02,800 --> 00:46:04,720
so um

1227
00:46:04,720 --> 00:46:06,880
if you aim for a publicly identified

1228
00:46:06,880 --> 00:46:09,440
report i don't know if you this is not

1229
00:46:09,440 --> 00:46:10,800
sufficient i guess you will need

1230
00:46:10,800 --> 00:46:12,079
something like a blockchain or something

1231
00:46:12,079 --> 00:46:13,520
like this and just put the messages on

1232
00:46:13,520 --> 00:46:14,720
the blockchain

1233
00:46:14,720 --> 00:46:17,359
and for a normally identified board i

1234
00:46:17,359 --> 00:46:19,359
think like in the original notion of pvc

1235
00:46:19,359 --> 00:46:21,280
and covert security they have something

1236
00:46:21,280 --> 00:46:23,119
like identify a board directly in the

1237
00:46:23,119 --> 00:46:26,079
notion which is typically like relaxed

1238
00:46:26,079 --> 00:46:28,720
and people typically do not aim for this

1239
00:46:28,720 --> 00:46:30,560
and therefore you would need something

1240
00:46:30,560 --> 00:46:32,880
like broadcast

1241
00:46:32,880 --> 00:46:35,280
thank you

1242
00:46:38,400 --> 00:46:40,720
okay

1243
00:46:40,800 --> 00:46:43,450
that's it let's thank david again

1244
00:46:43,450 --> 00:46:47,129
[Applause]

1245
00:46:49,200 --> 00:46:50,240
so we

1246
00:46:50,240 --> 00:46:53,599
set things up for the final talk

1247
00:46:53,599 --> 00:46:56,000
for this session not for today we have a

1248
00:46:56,000 --> 00:46:57,359
ram session

1249
00:46:57,359 --> 00:46:59,759
tonight

1250
00:47:04,560 --> 00:47:06,160
song is our

1251
00:47:06,160 --> 00:47:07,520
last speaker

1252
00:47:07,520 --> 00:47:10,520
online

1253
00:47:15,359 --> 00:47:18,359
things

1254
00:47:35,440 --> 00:47:36,559
yes

1255
00:47:36,559 --> 00:47:40,160
so define you here you you're all set

1256
00:47:40,160 --> 00:47:41,119
yeah

1257
00:47:41,119 --> 00:47:43,280
yeah so so please yeah your torque

1258
00:47:43,280 --> 00:47:45,040
constant overhead unconditionally secure

1259
00:47:45,040 --> 00:47:46,640
multiplier computation over binary

1260
00:47:46,640 --> 00:47:47,920
fields

1261
00:47:47,920 --> 00:47:50,079
please start

1262
00:47:50,079 --> 00:47:51,200
okay

1263
00:47:51,200 --> 00:47:54,000
uh hello everyone my name is ivan sang

1264
00:47:54,000 --> 00:47:56,000
today i'm going to introduce my recent

1265
00:47:56,000 --> 00:47:58,400
work constant overhead and conditionally

1266
00:47:58,400 --> 00:48:00,319
secure multiplier computation over

1267
00:48:00,319 --> 00:48:01,599
binary fields

1268
00:48:01,599 --> 00:48:05,800
core service antigone polychroniado

1269
00:48:06,160 --> 00:48:08,000
multiplied computation allows several

1270
00:48:08,000 --> 00:48:09,760
mutually distracted parties to divide

1271
00:48:09,760 --> 00:48:12,079
the function on their private inputs

1272
00:48:12,079 --> 00:48:14,319
it guarantees that practical execution

1273
00:48:14,319 --> 00:48:16,559
does not leak any information about the

1274
00:48:16,559 --> 00:48:18,720
individual inputs beyond what can be

1275
00:48:18,720 --> 00:48:21,359
inferred from the function output

1276
00:48:21,359 --> 00:48:23,440
usually the functionality is represented

1277
00:48:23,440 --> 00:48:25,440
as arithmetic circuits over a finite

1278
00:48:25,440 --> 00:48:26,480
field

1279
00:48:26,480 --> 00:48:28,240
and the circuit supports addition and

1280
00:48:28,240 --> 00:48:30,559
multiplication operations

1281
00:48:30,559 --> 00:48:33,040
in this work we focus on small fields

1282
00:48:33,040 --> 00:48:36,400
such as the battery field

1283
00:48:36,400 --> 00:48:38,319
we focus on the information theoretic

1284
00:48:38,319 --> 00:48:40,640
setting with einstein's majority

1285
00:48:40,640 --> 00:48:42,720
and assume a p2p channel between every

1286
00:48:42,720 --> 00:48:44,480
parallel parties

1287
00:48:44,480 --> 00:48:45,680
we are interested in the malicious

1288
00:48:45,680 --> 00:48:47,440
security with the board

1289
00:48:47,440 --> 00:48:48,800
in the following

1290
00:48:48,800 --> 00:48:50,960
i will use n for the number of parties

1291
00:48:50,960 --> 00:48:52,800
and the t for the number of crafted

1292
00:48:52,800 --> 00:48:55,200
parties

1293
00:48:56,160 --> 00:48:57,920
no solutions to the information

1294
00:48:57,920 --> 00:49:00,720
theoretic mpc protocols all have a log

1295
00:49:00,720 --> 00:49:03,280
and multiple multiplicative overhead in

1296
00:49:03,280 --> 00:49:05,440
the communication complexity

1297
00:49:05,440 --> 00:49:07,520
concretely the communication cost for

1298
00:49:07,520 --> 00:49:10,720
gates is out of n times log and b's for

1299
00:49:10,720 --> 00:49:12,559
small fields

1300
00:49:12,559 --> 00:49:14,240
this is because most of the

1301
00:49:14,240 --> 00:49:16,640
communication efficient mpc protocols

1302
00:49:16,640 --> 00:49:18,480
are based on the xiaomi security sharing

1303
00:49:18,480 --> 00:49:19,599
scheme

1304
00:49:19,599 --> 00:49:22,240
a chemistry sharing naturally requires a

1305
00:49:22,240 --> 00:49:25,359
large finance field of size at least n

1306
00:49:25,359 --> 00:49:26,640
which leads to the log and

1307
00:49:26,640 --> 00:49:29,760
multiplicative overhead

1308
00:49:29,760 --> 00:49:31,839
recent works also studied the

1309
00:49:31,839 --> 00:49:33,599
sub-optimal threshold

1310
00:49:33,599 --> 00:49:36,079
where the number of parties is bounded

1311
00:49:36,079 --> 00:49:38,960
by one-half minus epsilon times n

1312
00:49:38,960 --> 00:49:41,680
they both achieve out of np's for gates

1313
00:49:41,680 --> 00:49:44,480
but rely on two different techniques

1314
00:49:44,480 --> 00:49:47,040
however we would like to point out that

1315
00:49:47,040 --> 00:49:49,119
their solutions do not extend to the

1316
00:49:49,119 --> 00:49:51,520
standardized majority setting

1317
00:49:51,520 --> 00:49:55,359
also a recent crypto work gps 21 shows

1318
00:49:55,359 --> 00:49:57,839
that one can even achieve out of logan

1319
00:49:57,839 --> 00:49:59,839
piece for gates in the sub-optimal

1320
00:49:59,839 --> 00:50:02,480
threshold

1321
00:50:04,079 --> 00:50:06,000
in this work we study the following

1322
00:50:06,000 --> 00:50:07,119
question

1323
00:50:07,119 --> 00:50:09,359
is it possible to construct information

1324
00:50:09,359 --> 00:50:12,079
theoretica npc protocols in the standard

1325
00:50:12,079 --> 00:50:14,640
eins majority setting for computing a

1326
00:50:14,640 --> 00:50:17,119
single boolean circuit with amortized

1327
00:50:17,119 --> 00:50:19,359
communication complexity out of nps for

1328
00:50:19,359 --> 00:50:21,680
gates

1329
00:50:22,000 --> 00:50:23,359
our work answers this question

1330
00:50:23,359 --> 00:50:25,920
affirmatively we show that there is an

1331
00:50:25,920 --> 00:50:28,240
information series npc protocol in our

1332
00:50:28,240 --> 00:50:30,480
setting which achieves amortized

1333
00:50:30,480 --> 00:50:32,720
communication complexity of order of nps

1334
00:50:32,720 --> 00:50:33,920
for gates

1335
00:50:33,920 --> 00:50:36,079
our result can be naturally extended to

1336
00:50:36,079 --> 00:50:38,400
any finance field with communication

1337
00:50:38,400 --> 00:50:42,559
complexity out of n elements per gate

1338
00:50:44,240 --> 00:50:46,319
the starting point our starting point is

1339
00:50:46,319 --> 00:50:48,559
two protocols in different settings

1340
00:50:48,559 --> 00:50:50,240
the first one is the speeds like

1341
00:50:50,240 --> 00:50:51,520
protocol

1342
00:50:51,520 --> 00:50:53,839
in the designs majority setting it is

1343
00:50:53,839 --> 00:50:56,319
known that information threat protocols

1344
00:50:56,319 --> 00:50:59,280
are possible in the pre-processing model

1345
00:50:59,280 --> 00:51:01,599
the well-known species like protocols

1346
00:51:01,599 --> 00:51:04,559
can achieve order of nps per gate but

1347
00:51:04,559 --> 00:51:06,640
required to prepare out of n times

1348
00:51:06,640 --> 00:51:09,040
capabilities of reprocessing data

1349
00:51:09,040 --> 00:51:11,920
here copper is the security parameter

1350
00:51:11,920 --> 00:51:13,920
the main technique is to use additive

1351
00:51:13,920 --> 00:51:16,000
shear rings with information theoretic

1352
00:51:16,000 --> 00:51:17,359
max

1353
00:51:17,359 --> 00:51:19,119
preparing such amounts of reprocessed

1354
00:51:19,119 --> 00:51:21,359
data in the ions majority setting

1355
00:51:21,359 --> 00:51:23,920
requires out of n times kappa bits of

1356
00:51:23,920 --> 00:51:26,640
communication

1357
00:51:27,119 --> 00:51:30,640
the second one is the protocol in ccxy18

1358
00:51:30,640 --> 00:51:33,200
when targeting falsemd circuits that is

1359
00:51:33,200 --> 00:51:35,200
evaluating multiple copies of the same

1360
00:51:35,200 --> 00:51:36,400
circuits

1361
00:51:36,400 --> 00:51:39,760
the protocol in ccx y18 shows that

1362
00:51:39,760 --> 00:51:42,400
one can evaluate logs and copies of the

1363
00:51:42,400 --> 00:51:44,880
same circuit such that the communication

1364
00:51:44,880 --> 00:51:48,000
cost for gates is order of ambience

1365
00:51:48,000 --> 00:51:50,160
the main technique is the notion of

1366
00:51:50,160 --> 00:51:51,839
reverse multiplication friendly

1367
00:51:51,839 --> 00:51:55,359
embeddings or rmfe for short

1368
00:51:55,359 --> 00:51:58,079
it allows us to perform coordinate wise

1369
00:51:58,079 --> 00:52:00,400
multiplication over small fields

1370
00:52:00,400 --> 00:52:02,480
by only operating on the extension

1371
00:52:02,480 --> 00:52:03,599
fields

1372
00:52:03,599 --> 00:52:06,000
unfortunately their solution does not

1373
00:52:06,000 --> 00:52:09,280
work for a single circuit

1374
00:52:09,839 --> 00:52:13,680
our idea is to use the protocol in ccx18

1375
00:52:13,680 --> 00:52:16,000
to prepare the pre-processing data which

1376
00:52:16,000 --> 00:52:18,240
is used in an efficient speed like

1377
00:52:18,240 --> 00:52:20,000
online protocol

1378
00:52:20,000 --> 00:52:22,559
our reason of doing so is that usually

1379
00:52:22,559 --> 00:52:24,960
the pre-processing data is much easier

1380
00:52:24,960 --> 00:52:27,440
to be prepared in a batch way since we

1381
00:52:27,440 --> 00:52:28,880
do not need to consider the circuit

1382
00:52:28,880 --> 00:52:31,440
structure

1383
00:52:31,599 --> 00:52:33,599
the main difficulty is that the

1384
00:52:33,599 --> 00:52:35,440
pre-processing data prepared by the

1385
00:52:35,440 --> 00:52:37,839
protocol in ccx18

1386
00:52:37,839 --> 00:52:40,000
should be used to evaluate the batch of

1387
00:52:40,000 --> 00:52:41,839
gates each time

1388
00:52:41,839 --> 00:52:43,839
however if we want to use the speeds

1389
00:52:43,839 --> 00:52:45,359
like online protocol

1390
00:52:45,359 --> 00:52:46,960
we need to unpack the pre-processing

1391
00:52:46,960 --> 00:52:49,359
data so that they can be used gate by

1392
00:52:49,359 --> 00:52:50,480
gate

1393
00:52:50,480 --> 00:52:52,720
to achieve that we introduce what we

1394
00:52:52,720 --> 00:52:55,040
refer to as hidden additive sequential

1395
00:52:55,040 --> 00:52:56,559
ring

1396
00:52:56,559 --> 00:52:58,480
due to the time limits i will just give

1397
00:52:58,480 --> 00:53:02,400
a high level overview of our approach

1398
00:53:04,000 --> 00:53:07,599
in 60 x18 a rmfe is a pair of linear

1399
00:53:07,599 --> 00:53:10,160
maps phi and per side

1400
00:53:10,160 --> 00:53:13,440
the share runes prepared in ccx18 are

1401
00:53:13,440 --> 00:53:15,599
using the form of degree t standard

1402
00:53:15,599 --> 00:53:17,680
shear rings of phi a

1403
00:53:17,680 --> 00:53:21,200
where a is a vector of k bits

1404
00:53:21,200 --> 00:53:24,000
to use the speeds like online protocol

1405
00:53:24,000 --> 00:53:26,559
we define the mac part as follows

1406
00:53:26,559 --> 00:53:30,000
for an additive sharing x the mega of x

1407
00:53:30,000 --> 00:53:32,960
is the degree t general sharing of y

1408
00:53:32,960 --> 00:53:36,240
and the vector plus i y satisfies that

1409
00:53:36,240 --> 00:53:39,200
the summation of all entries is x

1410
00:53:39,200 --> 00:53:41,599
here precisely the second linear map in

1411
00:53:41,599 --> 00:53:44,240
the rmfe

1412
00:53:44,240 --> 00:53:46,640
we show that we can locally transform a

1413
00:53:46,640 --> 00:53:49,200
degree t-shimmer sharing of phi a

1414
00:53:49,200 --> 00:53:51,520
to k-additive shear rings with their

1415
00:53:51,520 --> 00:53:53,520
corresponding max

1416
00:53:53,520 --> 00:53:55,680
these shear rings can then be used in

1417
00:53:55,680 --> 00:53:59,118
the speeds like unknown protocol

1418
00:54:00,240 --> 00:54:02,079
of course there are are also other

1419
00:54:02,079 --> 00:54:04,640
issues for example we need an efficient

1420
00:54:04,640 --> 00:54:06,160
verification protocol to achieve

1421
00:54:06,160 --> 00:54:07,599
malicious security

1422
00:54:07,599 --> 00:54:09,920
more details about our and

1423
00:54:09,920 --> 00:54:12,000
protocol can be found in the full video

1424
00:54:12,000 --> 00:54:16,359
and our paper thank you

1425
00:54:32,270 --> 00:54:34,480
[Music]

1426
00:54:34,480 --> 00:54:36,720
yeah again so

1427
00:54:36,720 --> 00:54:39,760
any questions here in the room

1428
00:54:39,760 --> 00:54:42,640
no online

1429
00:54:44,559 --> 00:54:47,040
no so there may be one question so this

1430
00:54:47,040 --> 00:54:48,000
is

1431
00:54:48,000 --> 00:54:51,280
uh om of n number of parties

1432
00:54:51,280 --> 00:54:53,119
um yes

1433
00:54:53,119 --> 00:54:54,160
yeah so

1434
00:54:54,160 --> 00:54:55,760
is it also

1435
00:54:55,760 --> 00:54:58,160
practical for a small number of parties

1436
00:54:58,160 --> 00:55:00,799
so or does the result kick in

1437
00:55:00,799 --> 00:55:03,280
when the parties go to infinity or

1438
00:55:03,280 --> 00:55:06,079
as a toxic result yeah it's for any

1439
00:55:06,079 --> 00:55:08,799
number of parties but i mean if it's a

1440
00:55:08,799 --> 00:55:10,160
constant

1441
00:55:10,160 --> 00:55:12,880
actually maybe you can just use the

1442
00:55:12,880 --> 00:55:15,440
protocol with complexity and log which

1443
00:55:15,440 --> 00:55:17,839
is still a constant

1444
00:55:17,839 --> 00:55:19,040
yeah because yeah maybe then the

1445
00:55:19,040 --> 00:55:21,119
constant overhead for constant is maybe

1446
00:55:21,119 --> 00:55:24,160
not so interesting too

1447
00:55:25,440 --> 00:55:27,760
all right uh so

1448
00:55:27,760 --> 00:55:29,760
with that i think it's time to uh thank

1449
00:55:29,760 --> 00:55:31,440
you again

1450
00:55:31,440 --> 00:55:33,130
and thank all the speakers

1451
00:55:33,130 --> 00:55:36,219
[Applause]

1452
00:55:36,880 --> 00:55:38,640
not all the speakers of the day yet so

1453
00:55:38,640 --> 00:55:41,280
we have this rum session coming up at

1454
00:55:41,280 --> 00:55:43,680
seven i guess also in this room and

1455
00:55:43,680 --> 00:55:46,399
where else

