1
00:00:00,880 --> 00:00:03,040
hi everyone i'm chris columbia it's a

2
00:00:03,040 --> 00:00:04,880
pleasure to be here today

3
00:00:04,880 --> 00:00:07,839
at eurocrip 21 and present our work

4
00:00:07,839 --> 00:00:10,320
entitled message recovery laser fault

5
00:00:10,320 --> 00:00:12,080
injection attack on the classic macular

6
00:00:12,080 --> 00:00:13,840
descriptor system

7
00:00:13,840 --> 00:00:15,599
this is a joint work with pialowy

8
00:00:15,599 --> 00:00:18,080
kerrell vlad dragoy alexandre manuel and

9
00:00:18,080 --> 00:00:20,320
lillian bosu

10
00:00:20,320 --> 00:00:22,640
so as it's well known most public key

11
00:00:22,640 --> 00:00:25,439
cryptosystems bases their security on

12
00:00:25,439 --> 00:00:27,840
the hardness of number theoretic

13
00:00:27,840 --> 00:00:30,720
problems such as the discrete logarithm

14
00:00:30,720 --> 00:00:32,719
problem or the prime factorization

15
00:00:32,719 --> 00:00:34,320
problem

16
00:00:34,320 --> 00:00:37,440
but actually in 1997 peter shore

17
00:00:37,440 --> 00:00:40,480
showed that quantum algorithms can solve

18
00:00:40,480 --> 00:00:44,000
these problems in polynomial time

19
00:00:44,000 --> 00:00:45,840
therefore they are threatening the

20
00:00:45,840 --> 00:00:47,760
security

21
00:00:47,760 --> 00:00:49,039
of

22
00:00:49,039 --> 00:00:51,520
those public key crypto systems and

23
00:00:51,520 --> 00:00:53,680
actually with the

24
00:00:53,680 --> 00:00:55,680
quantum computer being more and more

25
00:00:55,680 --> 00:00:59,120
realistic by the bay in 2016

26
00:00:59,120 --> 00:01:00,559
nist started the process for

27
00:01:00,559 --> 00:01:02,960
cryptography standards that are quantum

28
00:01:02,960 --> 00:01:05,438
resistance that is

29
00:01:05,438 --> 00:01:08,640
an attacker does not gain any advantage

30
00:01:08,640 --> 00:01:09,600
by

31
00:01:09,600 --> 00:01:13,839
having a quantum computer available

32
00:01:14,640 --> 00:01:18,240
so we are now at the third round of this

33
00:01:18,240 --> 00:01:21,600
process and in the key and encapsulation

34
00:01:21,600 --> 00:01:23,520
mechanism category

35
00:01:23,520 --> 00:01:27,520
four finalists were announced on july 22

36
00:01:27,520 --> 00:01:30,240
in 2020 and one of them is classic

37
00:01:30,240 --> 00:01:33,280
nicholas which is a cryptosystem based

38
00:01:33,280 --> 00:01:35,840
on error correcting codes

39
00:01:35,840 --> 00:01:38,240
so classic machilis as its name does not

40
00:01:38,240 --> 00:01:40,799
suggest is based on the needlewriter

41
00:01:40,799 --> 00:01:43,360
cryptosystem

42
00:01:43,360 --> 00:01:45,200
so for key generation in this

43
00:01:45,200 --> 00:01:48,159
cryptosystem we have three parameters n

44
00:01:48,159 --> 00:01:50,000
k and t

45
00:01:50,000 --> 00:01:51,840
so we first

46
00:01:51,840 --> 00:01:53,040
get the

47
00:01:53,040 --> 00:01:54,399
parity check matrix

48
00:01:54,399 --> 00:01:55,759
h

49
00:01:55,759 --> 00:01:56,880
of a

50
00:01:56,880 --> 00:01:59,520
n k linear code that can

51
00:01:59,520 --> 00:02:02,399
correct up to t errors

52
00:02:02,399 --> 00:02:06,000
then we sample an invertible matrix s

53
00:02:06,000 --> 00:02:09,199
over f 2 of size n minus k

54
00:02:09,199 --> 00:02:11,520
and then we generate the public key h

55
00:02:11,520 --> 00:02:15,200
pub which is s times h times

56
00:02:15,200 --> 00:02:18,800
p which is a random permutation matrix

57
00:02:18,800 --> 00:02:21,040
and so the public key is

58
00:02:21,040 --> 00:02:23,680
hpub and t

59
00:02:23,680 --> 00:02:25,120
t which is the

60
00:02:25,120 --> 00:02:27,040
error correction capacity

61
00:02:27,040 --> 00:02:28,239
of the code

62
00:02:28,239 --> 00:02:31,200
and the secret key sk is

63
00:02:31,200 --> 00:02:32,080
s

64
00:02:32,080 --> 00:02:35,360
h and p the permutation matrix

65
00:02:35,360 --> 00:02:37,280
so now whenever we want to encrypt the

66
00:02:37,280 --> 00:02:38,800
message m

67
00:02:38,800 --> 00:02:41,200
with the public key to get s which is

68
00:02:41,200 --> 00:02:44,080
the syndrome or the cipher text the

69
00:02:44,080 --> 00:02:46,959
first step is to encode m into a

70
00:02:46,959 --> 00:02:48,319
constant weight

71
00:02:48,319 --> 00:02:52,319
vector e so the weight of the error

72
00:02:52,319 --> 00:02:54,480
vector e is

73
00:02:54,480 --> 00:02:56,239
t

74
00:02:56,239 --> 00:02:57,360
and then

75
00:02:57,360 --> 00:02:58,800
we multiply

76
00:02:58,800 --> 00:03:02,640
h by e to obtain the syndrome s and

77
00:03:02,640 --> 00:03:07,120
that's the step we will focus on today

78
00:03:07,120 --> 00:03:09,360
the security of this

79
00:03:09,360 --> 00:03:13,040
uh cryptosystem is based on the syndrome

80
00:03:13,040 --> 00:03:14,560
decoding problem so the syndrome

81
00:03:14,560 --> 00:03:16,560
decoding problem the binary

82
00:03:16,560 --> 00:03:19,040
syndrome decoding problem can be defined

83
00:03:19,040 --> 00:03:21,440
as the following we have a matrix

84
00:03:21,440 --> 00:03:23,360
h over f 2

85
00:03:23,360 --> 00:03:27,040
with n minus k rows and n columns

86
00:03:27,040 --> 00:03:30,080
we have a vector s over f 2 of size n

87
00:03:30,080 --> 00:03:32,959
minus k and we have t which is a natural

88
00:03:32,959 --> 00:03:34,799
positive number

89
00:03:34,799 --> 00:03:36,560
and so the output of the syndrome

90
00:03:36,560 --> 00:03:39,760
decoding problem is a vector x of length

91
00:03:39,760 --> 00:03:43,760
n over f 2 such that the weight of x is

92
00:03:43,760 --> 00:03:45,280
below t

93
00:03:45,280 --> 00:03:47,360
and such that

94
00:03:47,360 --> 00:03:51,760
h times x is equal to s

95
00:03:51,840 --> 00:03:53,280
and recovering

96
00:03:53,280 --> 00:03:56,319
the vector x is known to be

97
00:03:56,319 --> 00:03:58,480
np-hard since the work of their account

98
00:03:58,480 --> 00:03:59,200
in

99
00:03:59,200 --> 00:04:01,920
1978

100
00:04:01,920 --> 00:04:03,760
but actually if we look

101
00:04:03,760 --> 00:04:05,120
a bit further

102
00:04:05,120 --> 00:04:06,480
into this

103
00:04:06,480 --> 00:04:08,720
syndrome decoding problem we

104
00:04:08,720 --> 00:04:11,760
find that it's quite similar to the

105
00:04:11,760 --> 00:04:13,519
another problem which is the integer

106
00:04:13,519 --> 00:04:15,519
linear programming problem

107
00:04:15,519 --> 00:04:16,959
in this problem

108
00:04:16,959 --> 00:04:20,399
we have n and m which are both positive

109
00:04:20,399 --> 00:04:23,280
numbers b is a vector of natural numbers

110
00:04:23,280 --> 00:04:25,440
of size n c is a vector of natural

111
00:04:25,440 --> 00:04:27,520
numbers of size m

112
00:04:27,520 --> 00:04:29,840
and a is a matrix

113
00:04:29,840 --> 00:04:30,639
of

114
00:04:30,639 --> 00:04:32,639
size m n

115
00:04:32,639 --> 00:04:34,960
and so the ilp problem is defined as the

116
00:04:34,960 --> 00:04:36,880
following optimization problem we want

117
00:04:36,880 --> 00:04:38,320
to minimize

118
00:04:38,320 --> 00:04:40,160
b transpose times x

119
00:04:40,160 --> 00:04:42,479
such that

120
00:04:42,479 --> 00:04:45,680
a times x is equal to c

121
00:04:45,680 --> 00:04:48,800
and this time x is a vector of size n of

122
00:04:48,800 --> 00:04:51,040
natural numbers and it's positive

123
00:04:51,040 --> 00:04:52,720
and actually we can draw some

124
00:04:52,720 --> 00:04:54,400
connections between those two problems

125
00:04:54,400 --> 00:04:55,520
because we

126
00:04:55,520 --> 00:04:57,120
have a

127
00:04:57,120 --> 00:04:59,360
matrix multiplied by a vector

128
00:04:59,360 --> 00:05:01,840
on both sides

129
00:05:01,840 --> 00:05:04,320
the matrix is h

130
00:05:04,320 --> 00:05:06,560
at the top and a at the bottom and the

131
00:05:06,560 --> 00:05:08,720
vector is s

132
00:05:08,720 --> 00:05:11,280
for the syndrome decoding problem and c

133
00:05:11,280 --> 00:05:13,120
for the integer linear programming

134
00:05:13,120 --> 00:05:14,720
problem

135
00:05:14,720 --> 00:05:16,160
and actually the con

136
00:05:16,160 --> 00:05:17,440
the

137
00:05:17,440 --> 00:05:18,800
the constraint

138
00:05:18,800 --> 00:05:20,960
for the hamming weight in the syndrome

139
00:05:20,960 --> 00:05:23,199
decoding problem so that the weight of x

140
00:05:23,199 --> 00:05:25,520
should be below t

141
00:05:25,520 --> 00:05:28,080
can be actually related to

142
00:05:28,080 --> 00:05:31,759
the minimization of b transpose times x

143
00:05:31,759 --> 00:05:33,280
as we will see

144
00:05:33,280 --> 00:05:36,639
so what we do now is we define

145
00:05:36,639 --> 00:05:37,440
n

146
00:05:37,440 --> 00:05:39,199
syndrome decoding problem as opposed to

147
00:05:39,199 --> 00:05:41,600
the binary syndrome decoding problem so

148
00:05:41,600 --> 00:05:43,600
we have now a matrix h

149
00:05:43,600 --> 00:05:45,759
of n minus k rows and n columns over

150
00:05:45,759 --> 00:05:47,600
natural numbers

151
00:05:47,600 --> 00:05:49,840
we have

152
00:05:49,840 --> 00:05:50,720
those

153
00:05:50,720 --> 00:05:53,120
the entries of this matrix which are in

154
00:05:53,120 --> 00:05:55,600
fact binary either 0 or 1.

155
00:05:55,600 --> 00:05:57,840
and we have a vector s which is not

156
00:05:57,840 --> 00:06:00,560
binary it's a vector of size n minus k

157
00:06:00,560 --> 00:06:03,039
of natural numbers and we still have t

158
00:06:03,039 --> 00:06:04,840
which is a positive

159
00:06:04,840 --> 00:06:07,840
number and we want to recover the vector

160
00:06:07,840 --> 00:06:08,639
x

161
00:06:08,639 --> 00:06:10,720
which is binary such that

162
00:06:10,720 --> 00:06:12,639
the weight of x is

163
00:06:12,639 --> 00:06:16,240
below t and such that h times s x is

164
00:06:16,240 --> 00:06:18,560
equal to s

165
00:06:18,560 --> 00:06:20,479
and so we have now the following theorem

166
00:06:20,479 --> 00:06:22,319
let us suppose that there exists a

167
00:06:22,319 --> 00:06:24,639
unique vector x star

168
00:06:24,639 --> 00:06:26,720
over 0 1 to the n

169
00:06:26,720 --> 00:06:29,840
with the weight of x star is equal to t

170
00:06:29,840 --> 00:06:32,240
which is solution to the nfdp then x

171
00:06:32,240 --> 00:06:34,960
star is the optimum solution of an ilp

172
00:06:34,960 --> 00:06:36,080
problem

173
00:06:36,080 --> 00:06:38,960
what this shows is that the n syndrome

174
00:06:38,960 --> 00:06:41,120
decoding problem can actually

175
00:06:41,120 --> 00:06:44,400
be solved by a linear programming solver

176
00:06:44,400 --> 00:06:47,280
and so can also be solved efficiently by

177
00:06:47,280 --> 00:06:49,599
a linear programming solver

178
00:06:49,599 --> 00:06:51,440
how so

179
00:06:51,440 --> 00:06:53,919
we simply follow the following procedure

180
00:06:53,919 --> 00:06:56,319
which has for inputs

181
00:06:56,319 --> 00:07:00,479
the matrix h the vector s and t

182
00:07:00,479 --> 00:07:02,720
and so what we want to do is recover x

183
00:07:02,720 --> 00:07:05,120
which is solution to the nsdp

184
00:07:05,120 --> 00:07:09,440
so we set b to be the vector of all ones

185
00:07:09,440 --> 00:07:12,880
that's for the hamming weight constraint

186
00:07:12,880 --> 00:07:14,639
and then we want to

187
00:07:14,639 --> 00:07:18,319
solve the ilp problem using the linear

188
00:07:18,319 --> 00:07:20,319
programming solver

189
00:07:20,319 --> 00:07:22,319
then once we have

190
00:07:22,319 --> 00:07:25,759
x star we will round it to 0 1

191
00:07:25,759 --> 00:07:27,039
because

192
00:07:27,039 --> 00:07:29,599
because of the convergence of the linear

193
00:07:29,599 --> 00:07:31,520
programming solver the coordinates might

194
00:07:31,520 --> 00:07:34,880
not might not be perfectly zero or one

195
00:07:34,880 --> 00:07:36,560
and then if

196
00:07:36,560 --> 00:07:39,120
h times x star is equal to s and the

197
00:07:39,120 --> 00:07:42,000
weight of x is below t then we found the

198
00:07:42,000 --> 00:07:45,120
solution and we return x star

199
00:07:45,120 --> 00:07:46,960
otherwise we say

200
00:07:46,960 --> 00:07:48,479
we written an error saying that we could

201
00:07:48,479 --> 00:07:50,560
not find the solution

202
00:07:50,560 --> 00:07:54,000
so h the matrix and t the having weight

203
00:07:54,000 --> 00:07:57,039
are parameters of the cryptosystem

204
00:07:57,039 --> 00:08:00,160
so the next input that we would like is

205
00:08:00,160 --> 00:08:04,720
to get s but this time we need s to be

206
00:08:04,720 --> 00:08:08,080
a vector of natural numbers of size n

207
00:08:08,080 --> 00:08:09,680
minus k

208
00:08:09,680 --> 00:08:11,840
so that we can be in the

209
00:08:11,840 --> 00:08:14,000
nsdp framework so we need a way to

210
00:08:14,000 --> 00:08:15,120
obtain

211
00:08:15,120 --> 00:08:18,000
this vector uh over natural numbers

212
00:08:18,000 --> 00:08:21,360
instead of over f2 and for this we will

213
00:08:21,360 --> 00:08:22,720
rely on

214
00:08:22,720 --> 00:08:25,759
a laser for conjunction

215
00:08:25,759 --> 00:08:27,520
so laser fault injection is a technique

216
00:08:27,520 --> 00:08:29,680
which was proposed in 2002 by skull

217
00:08:29,680 --> 00:08:31,919
bogatov and anderson

218
00:08:31,919 --> 00:08:33,519
and the principle of this technique is

219
00:08:33,519 --> 00:08:35,760
to shine an infrared laser on the back

220
00:08:35,760 --> 00:08:38,559
side of an integrated circuit so as you

221
00:08:38,559 --> 00:08:40,640
can see here on the left the

222
00:08:40,640 --> 00:08:42,640
integrated circuit must be

223
00:08:42,640 --> 00:08:45,680
um prepared for laser fault injection we

224
00:08:45,680 --> 00:08:47,839
need to have access to the back side of

225
00:08:47,839 --> 00:08:50,800
the die that's not so common

226
00:08:50,800 --> 00:08:53,200
and so then we simply shine

227
00:08:53,200 --> 00:08:56,640
the infrared laser on the

228
00:08:56,640 --> 00:08:59,839
on the back side of the circuit

229
00:08:59,839 --> 00:09:02,080
and because the laser is infrared that

230
00:09:02,080 --> 00:09:03,440
goes through

231
00:09:03,440 --> 00:09:06,320
the substrate and that really it will

232
00:09:06,320 --> 00:09:08,399
reach the active areas of the

233
00:09:08,399 --> 00:09:11,200
transistors and inject faults

234
00:09:11,200 --> 00:09:14,480
inside the integrated circuits

235
00:09:14,480 --> 00:09:17,120
so laser fault injection has been

236
00:09:17,120 --> 00:09:19,200
quite an area of study there's been a

237
00:09:19,200 --> 00:09:22,640
lot of work on this area but recently

238
00:09:22,640 --> 00:09:25,040
laser fault injection was performed in

239
00:09:25,040 --> 00:09:27,200
flash memory

240
00:09:27,200 --> 00:09:29,360
and when we perform fault induction in

241
00:09:29,360 --> 00:09:31,200
flash memory we get the following fault

242
00:09:31,200 --> 00:09:34,320
model we are able to perform monobit

243
00:09:34,320 --> 00:09:35,600
faults

244
00:09:35,600 --> 00:09:38,240
we can only perform bit set four so zero

245
00:09:38,240 --> 00:09:40,880
are turned to ones but not the opposite

246
00:09:40,880 --> 00:09:42,080
and

247
00:09:42,080 --> 00:09:44,000
another aspect of this fault model is

248
00:09:44,000 --> 00:09:45,839
that it's a transient

249
00:09:45,839 --> 00:09:47,440
fault that is

250
00:09:47,440 --> 00:09:48,480
only

251
00:09:48,480 --> 00:09:50,399
performed on data which is fetched from

252
00:09:50,399 --> 00:09:52,240
the flash memory but the data which is

253
00:09:52,240 --> 00:09:53,440
actually stored

254
00:09:53,440 --> 00:09:55,920
remains unchanged so if we fetch the

255
00:09:55,920 --> 00:09:58,959
data again without injecting fault then

256
00:09:58,959 --> 00:10:00,720
it's correct

257
00:10:00,720 --> 00:10:03,519
and what that allows us this fault model

258
00:10:03,519 --> 00:10:04,720
is to

259
00:10:04,720 --> 00:10:07,200
corrupt the instructions whenever they

260
00:10:07,200 --> 00:10:08,480
are fetched

261
00:10:08,480 --> 00:10:11,519
from the flash memory

262
00:10:11,519 --> 00:10:13,040
before they are executed by the

263
00:10:13,040 --> 00:10:14,720
microcontroller so

264
00:10:14,720 --> 00:10:17,920
as an example we can turn the aorts

265
00:10:17,920 --> 00:10:20,480
instruction which is represented here

266
00:10:20,480 --> 00:10:22,959
we can turn it into an add

267
00:10:22,959 --> 00:10:26,000
adcs instruction which is add with carry

268
00:10:26,000 --> 00:10:28,800
by performing a bit set on the

269
00:10:28,800 --> 00:10:31,839
8th bit here so when we perform a bit

270
00:10:31,839 --> 00:10:34,000
set we effectively turn

271
00:10:34,000 --> 00:10:37,680
the addition in f2 into an addition in n

272
00:10:37,680 --> 00:10:39,839
and that's exactly what we want to do to

273
00:10:39,839 --> 00:10:41,440
get the syndrome

274
00:10:41,440 --> 00:10:43,760
in and instead of having the syndrome in

275
00:10:43,760 --> 00:10:46,399
f2

276
00:10:46,399 --> 00:10:47,360
so the

277
00:10:47,360 --> 00:10:49,040
function that we will target is the

278
00:10:49,040 --> 00:10:50,959
matrix vector multiplication that is

279
00:10:50,959 --> 00:10:53,120
used for syndrome computation

280
00:10:53,120 --> 00:10:55,839
s is equal to h times e

281
00:10:55,839 --> 00:10:58,160
so this function is the following we

282
00:10:58,160 --> 00:11:00,480
first initialize the syndrome to zero

283
00:11:00,480 --> 00:11:02,720
and then we go over the rows and columns

284
00:11:02,720 --> 00:11:04,000
of the matrix

285
00:11:04,000 --> 00:11:05,680
and the vector and we perform the

286
00:11:05,680 --> 00:11:08,399
bitwise and between the

287
00:11:08,399 --> 00:11:10,640
matrix entry and the error vector entry

288
00:11:10,640 --> 00:11:12,640
and we accumulate the result

289
00:11:12,640 --> 00:11:15,040
by successive xors

290
00:11:15,040 --> 00:11:16,800
in the syndrome and what we will do here

291
00:11:16,800 --> 00:11:19,519
is we will turn the xor into a plus

292
00:11:19,519 --> 00:11:21,760
so that the operation is performed over

293
00:11:21,760 --> 00:11:25,040
natural numbers and not in f2

294
00:11:25,040 --> 00:11:27,600
so after performing n minus k times n

295
00:11:27,600 --> 00:11:30,079
false during one encryption what we get

296
00:11:30,079 --> 00:11:32,800
is the faulty syndrome s star

297
00:11:32,800 --> 00:11:36,079
over uh natural numbers

298
00:11:36,079 --> 00:11:38,640
so we will now be able to feed this in

299
00:11:38,640 --> 00:11:41,440
this faulty syndrome

300
00:11:41,440 --> 00:11:45,200
to the ilp solver and recover the

301
00:11:45,200 --> 00:11:47,519
error vector e

302
00:11:47,519 --> 00:11:48,800
so now some

303
00:11:48,800 --> 00:11:51,279
experimental results what we use for a

304
00:11:51,279 --> 00:11:54,399
solver is the standard scipy

305
00:11:54,399 --> 00:11:58,079
lp solver that is uh available and so

306
00:11:58,079 --> 00:12:02,240
not a fancy server nothing too optimized

307
00:12:02,240 --> 00:12:03,760
uh and for the parameters of the

308
00:12:03,760 --> 00:12:06,160
cryptosystem we used the one of the

309
00:12:06,160 --> 00:12:09,279
classic michaelis submission to the nist

310
00:12:09,279 --> 00:12:11,519
standardization process so

311
00:12:11,519 --> 00:12:12,639
here we

312
00:12:12,639 --> 00:12:14,720
give the values of n k and t that

313
00:12:14,720 --> 00:12:16,079
correspond to

314
00:12:16,079 --> 00:12:19,360
equivalent bit level securities of 128

315
00:12:19,360 --> 00:12:22,959
196 and 256.

316
00:12:23,040 --> 00:12:25,680
the

317
00:12:25,680 --> 00:12:29,279
public matrix h has n minus k rows and n

318
00:12:29,279 --> 00:12:31,600
columns and it's the parity check matrix

319
00:12:31,600 --> 00:12:33,519
of a random linear code so we insist

320
00:12:33,519 --> 00:12:36,320
here that we use a random linear code we

321
00:12:36,320 --> 00:12:39,040
do not pick any uh

322
00:12:39,040 --> 00:12:42,079
special codes so that we don't exploit

323
00:12:42,079 --> 00:12:44,480
any structure inside the

324
00:12:44,480 --> 00:12:47,279
the parity check matrix and the vector e

325
00:12:47,279 --> 00:12:50,160
is of size n and of having weight t and

326
00:12:50,160 --> 00:12:52,079
that's the one that we want to recover

327
00:12:52,079 --> 00:12:54,639
with with the solver

328
00:12:54,639 --> 00:12:56,320
the first interesting aspect of this

329
00:12:56,320 --> 00:12:59,200
attack is that we only need a fraction

330
00:12:59,200 --> 00:13:01,920
of the faulty syndrome entries to solve

331
00:13:01,920 --> 00:13:04,720
the problem so this the number of faulty

332
00:13:04,720 --> 00:13:06,560
syndrome entries that we need

333
00:13:06,560 --> 00:13:08,720
actually depend on the weight of the

334
00:13:08,720 --> 00:13:10,480
error vector t

335
00:13:10,480 --> 00:13:12,720
the higher the weight the more syndrome

336
00:13:12,720 --> 00:13:14,560
entries we need

337
00:13:14,560 --> 00:13:17,760
but actually when n grows so when we

338
00:13:17,760 --> 00:13:19,680
want to reach a higher

339
00:13:19,680 --> 00:13:22,720
level of security then the required

340
00:13:22,720 --> 00:13:24,720
number of syndrome entries actually

341
00:13:24,720 --> 00:13:26,320
drops

342
00:13:26,320 --> 00:13:29,440
so here if t is of the order

343
00:13:29,440 --> 00:13:31,600
square root of n then

344
00:13:31,600 --> 00:13:35,440
you see that for n equals uh

345
00:13:35,440 --> 00:13:38,800
10 to the three we need 35 approximately

346
00:13:38,800 --> 00:13:40,240
35

347
00:13:40,240 --> 00:13:42,959
40 syndrome entries but as as n grows we

348
00:13:42,959 --> 00:13:44,160
need less

349
00:13:44,160 --> 00:13:44,959
uh

350
00:13:44,959 --> 00:13:47,920
a smaller fraction of 40 in german trees

351
00:13:47,920 --> 00:13:49,199
and so for the

352
00:13:49,199 --> 00:13:52,160
classic macular crypto system we need

353
00:13:52,160 --> 00:13:54,079
just less

354
00:13:54,079 --> 00:13:56,639
than than 40 percent

355
00:13:56,639 --> 00:13:59,279
faulty syndrome entries to recover the

356
00:13:59,279 --> 00:14:01,279
secret vector

357
00:14:01,279 --> 00:14:04,079
e so that's interesting from a fault

358
00:14:04,079 --> 00:14:05,680
injection point of view because we don't

359
00:14:05,680 --> 00:14:07,279
need

360
00:14:07,279 --> 00:14:08,480
perfect

361
00:14:08,480 --> 00:14:10,399
false

362
00:14:10,399 --> 00:14:13,120
and get the full faulty syndrome we only

363
00:14:13,120 --> 00:14:16,959
need 40 of it to recover the

364
00:14:16,959 --> 00:14:19,519
the vector e

365
00:14:19,519 --> 00:14:20,959
what is also interesting about this

366
00:14:20,959 --> 00:14:23,199
attack is its uh computational

367
00:14:23,199 --> 00:14:24,800
complexity it's

368
00:14:24,800 --> 00:14:26,800
uh quite fast as you will see so on a

369
00:14:26,800 --> 00:14:29,040
desktop computer we don't run it on a

370
00:14:29,040 --> 00:14:30,800
server it's a

371
00:14:30,800 --> 00:14:34,079
standard desktop computer with six cores

372
00:14:34,079 --> 00:14:36,560
running at 2.8 gigahertz and 32

373
00:14:36,560 --> 00:14:37,839
gigabytes

374
00:14:37,839 --> 00:14:39,760
of ram

375
00:14:39,760 --> 00:14:41,040
so here the

376
00:14:41,040 --> 00:14:43,360
purple stars are for the

377
00:14:43,360 --> 00:14:46,560
classic michaelis parameters and

378
00:14:46,560 --> 00:14:50,240
what we see is that the classic necklace

379
00:14:50,240 --> 00:14:53,199
cryptosystem with 128-bit security can

380
00:14:53,199 --> 00:14:56,079
be attacked in less than one second

381
00:14:56,079 --> 00:14:56,959
and

382
00:14:56,959 --> 00:15:00,320
with 256 bit security it can be attacked

383
00:15:00,320 --> 00:15:03,120
in less than three seconds so that makes

384
00:15:03,120 --> 00:15:04,639
the attack very

385
00:15:04,639 --> 00:15:06,639
efficient from a computational point of

386
00:15:06,639 --> 00:15:08,320
view

387
00:15:08,320 --> 00:15:10,720
and another interesting uh observation

388
00:15:10,720 --> 00:15:13,199
here is that if we consider the full

389
00:15:13,199 --> 00:15:15,519
faulty syndrome then we have

390
00:15:15,519 --> 00:15:19,199
an attack complexity which is cubic

391
00:15:19,199 --> 00:15:21,920
with respect to n

392
00:15:21,920 --> 00:15:23,279
so it's

393
00:15:23,279 --> 00:15:26,720
shown here as you can see the

394
00:15:26,720 --> 00:15:28,320
the slope is

395
00:15:28,320 --> 00:15:30,800
cubic but if we only consider the

396
00:15:30,800 --> 00:15:32,240
optimal

397
00:15:32,240 --> 00:15:36,320
number of syndrome entries to recover e

398
00:15:36,320 --> 00:15:38,800
then the complexity is

399
00:15:38,800 --> 00:15:40,639
quadratic so this isn't just an

400
00:15:40,639 --> 00:15:42,160
empirical

401
00:15:42,160 --> 00:15:44,800
observation but just to show that the

402
00:15:44,800 --> 00:15:46,480
the attack is

403
00:15:46,480 --> 00:15:49,759
in fact very efficient

404
00:15:49,759 --> 00:15:51,680
so to conclude in this work what we

405
00:15:51,680 --> 00:15:54,800
proposed is a message

406
00:15:54,800 --> 00:15:57,040
recovery attack

407
00:15:57,040 --> 00:16:00,320
so given the public matrix h pub and the

408
00:16:00,320 --> 00:16:01,600
syndrome s

409
00:16:01,600 --> 00:16:04,480
what we want is to recover the private

410
00:16:04,480 --> 00:16:07,600
error vector e such that s is equal to h

411
00:16:07,600 --> 00:16:09,680
times e

412
00:16:09,680 --> 00:16:11,519
so this message recovery attack is done

413
00:16:11,519 --> 00:16:13,120
in four steps

414
00:16:13,120 --> 00:16:15,440
first of all we perform laser fault

415
00:16:15,440 --> 00:16:18,079
injection during the encryption process

416
00:16:18,079 --> 00:16:21,199
so that we can modify the xor operation

417
00:16:21,199 --> 00:16:22,800
into an addition so instead of

418
00:16:22,800 --> 00:16:24,000
performing

419
00:16:24,000 --> 00:16:26,079
addition over f2 we perform it over

420
00:16:26,079 --> 00:16:27,839
natural numbers

421
00:16:27,839 --> 00:16:30,639
that allows us to get a faulty syndrome

422
00:16:30,639 --> 00:16:34,079
s star over natural numbers

423
00:16:34,079 --> 00:16:35,040
and then

424
00:16:35,040 --> 00:16:38,240
we feed this faulty syndrome along the

425
00:16:38,240 --> 00:16:39,920
public matrix

426
00:16:39,920 --> 00:16:42,720
h pub to the integer linear programming

427
00:16:42,720 --> 00:16:43,680
server

428
00:16:43,680 --> 00:16:46,320
and that gives us the private error

429
00:16:46,320 --> 00:16:47,519
vector

430
00:16:47,519 --> 00:16:48,240
e

431
00:16:48,240 --> 00:16:51,519
in polynomial time

432
00:16:51,519 --> 00:16:53,440
what we would like to

433
00:16:53,440 --> 00:16:55,279
do to continue this

434
00:16:55,279 --> 00:16:57,440
this work is to

435
00:16:57,440 --> 00:17:00,000
try to export this idea to

436
00:17:00,000 --> 00:17:02,160
key recovery attacks instead of message

437
00:17:02,160 --> 00:17:04,640
recovery attacks

438
00:17:04,640 --> 00:17:07,679
we would like to also study deeper the

439
00:17:07,679 --> 00:17:09,679
attack complexity of the full and

440
00:17:09,679 --> 00:17:12,160
optimal cases so that is

441
00:17:12,160 --> 00:17:14,720
try to find out why when considering the

442
00:17:14,720 --> 00:17:17,119
full syndrome we have a cubic complexity

443
00:17:17,119 --> 00:17:19,760
and when we consider only the optimal

444
00:17:19,760 --> 00:17:21,599
number of entries we get a quadratic

445
00:17:21,599 --> 00:17:23,919
complexity

446
00:17:23,919 --> 00:17:25,679
we would like then to

447
00:17:25,679 --> 00:17:27,919
try to extend our attack to other

448
00:17:27,919 --> 00:17:29,919
codebase cryptosystems for which we can

449
00:17:29,919 --> 00:17:31,280
get an implementation on the

450
00:17:31,280 --> 00:17:33,120
microcontroller

451
00:17:33,120 --> 00:17:35,039
then we also would like to

452
00:17:35,039 --> 00:17:36,559
inspect other

453
00:17:36,559 --> 00:17:38,160
fault injection techniques to correct

454
00:17:38,160 --> 00:17:40,960
the instructions because the laser fault

455
00:17:40,960 --> 00:17:43,440
injection attack is quite costly it

456
00:17:43,440 --> 00:17:45,600
also requires quite a strong attacker

457
00:17:45,600 --> 00:17:48,480
model because the attacker needs to have

458
00:17:48,480 --> 00:17:50,400
access to the back side

459
00:17:50,400 --> 00:17:52,480
of the die so it's quite restrictive we

460
00:17:52,480 --> 00:17:56,240
would like to improve on this and

461
00:17:56,240 --> 00:17:57,520
try

462
00:17:57,520 --> 00:18:00,160
cheaper photo injection techniques to

463
00:18:00,160 --> 00:18:02,559
achieve the same goal

464
00:18:02,559 --> 00:18:05,039
and finally we would like also to

465
00:18:05,039 --> 00:18:07,440
look into other types of corruption of

466
00:18:07,440 --> 00:18:10,480
instructions such as turning

467
00:18:10,480 --> 00:18:15,360
xor operations into shifts or other

468
00:18:15,360 --> 00:18:17,840
instructions and trying to define new

469
00:18:17,840 --> 00:18:20,480
challenging theoretical problems

470
00:18:20,480 --> 00:18:22,960
from this

471
00:18:23,280 --> 00:18:24,960
i'd like now to thank you for watching

472
00:18:24,960 --> 00:18:26,960
this video and if you have any question

473
00:18:26,960 --> 00:18:29,440
please feel free to ask them to

474
00:18:29,440 --> 00:18:30,480
the two

475
00:18:30,480 --> 00:18:33,200
my two co-authors who are present

476
00:18:33,200 --> 00:18:35,760
at eurocrypt21 in zagreb

477
00:18:35,760 --> 00:18:37,440
pialui and vlad

478
00:18:37,440 --> 00:18:41,039
thank you for your attention

