1
00:00:00,320 --> 00:00:02,159
hi everyone and welcome to the

2
00:00:02,159 --> 00:00:04,400
presentation about the paper dynamic

3
00:00:04,400 --> 00:00:06,560
adhoc clock synchronization

4
00:00:06,560 --> 00:00:10,800
this paper is part of eurocrypt 2021 my

5
00:00:10,800 --> 00:00:12,960
name is christian badarcha and this is a

6
00:00:12,960 --> 00:00:15,759
joint work with peter garcia aguilos

7
00:00:15,759 --> 00:00:19,279
alexander russell and vasily stikas

8
00:00:19,279 --> 00:00:21,279
so let me kick this off by explaining

9
00:00:21,279 --> 00:00:22,920
what the problem of clock

10
00:00:22,920 --> 00:00:25,760
synchronization actually is

11
00:00:25,760 --> 00:00:27,840
as the basic setup we assume we have a

12
00:00:27,840 --> 00:00:29,519
set of parties

13
00:00:29,519 --> 00:00:32,000
that are equipped with so-called local

14
00:00:32,000 --> 00:00:34,480
clocks or duration timers

15
00:00:34,480 --> 00:00:35,440
that is

16
00:00:35,440 --> 00:00:37,520
every party has access to a device by

17
00:00:37,520 --> 00:00:39,200
which you can measure the passage of

18
00:00:39,200 --> 00:00:41,440
time or time intervals and we assume

19
00:00:41,440 --> 00:00:43,680
that those duration timers

20
00:00:43,680 --> 00:00:46,320
they run approximately at the same speed

21
00:00:46,320 --> 00:00:48,239
we further assume that we have a public

22
00:00:48,239 --> 00:00:50,719
key infrastructure as a setup or

23
00:00:50,719 --> 00:00:53,199
alternatively a common reference string

24
00:00:53,199 --> 00:00:55,280
that is we can associate each party to a

25
00:00:55,280 --> 00:00:58,000
public key and for example verify signed

26
00:00:58,000 --> 00:00:59,920
messages

27
00:00:59,920 --> 00:01:01,359
we assume that a protocol would be

28
00:01:01,359 --> 00:01:04,479
executed over a bounded delay network

29
00:01:04,479 --> 00:01:06,560
and we assume that the majority of

30
00:01:06,560 --> 00:01:08,479
parties follow the protocol and hence

31
00:01:08,479 --> 00:01:09,600
are honest

32
00:01:09,600 --> 00:01:12,320
what's the goal of clock synchronization

33
00:01:12,320 --> 00:01:15,439
well these parties they want to jointly

34
00:01:15,439 --> 00:01:19,520
together emulate a global notion of time

35
00:01:19,520 --> 00:01:21,280
that is they want to compute over the

36
00:01:21,280 --> 00:01:23,040
course of the execution

37
00:01:23,040 --> 00:01:26,159
time values and if you ask two parties

38
00:01:26,159 --> 00:01:28,720
what they believe is the current time

39
00:01:28,720 --> 00:01:29,840
value

40
00:01:29,840 --> 00:01:32,400
then what they report should be very

41
00:01:32,400 --> 00:01:34,400
close together this is what we call

42
00:01:34,400 --> 00:01:36,640
approximate synchrony

43
00:01:36,640 --> 00:01:38,799
the time values they compute should

44
00:01:38,799 --> 00:01:41,840
satisfy liveness which means

45
00:01:41,840 --> 00:01:45,040
the time values are increasing just like

46
00:01:45,040 --> 00:01:46,479
real time is

47
00:01:46,479 --> 00:01:48,479
and we want to have monotonicity

48
00:01:48,479 --> 00:01:50,159
basically we demand that we have an

49
00:01:50,159 --> 00:01:52,320
error of time implemented

50
00:01:52,320 --> 00:01:54,799
and maybe due to imperfection of the

51
00:01:54,799 --> 00:01:57,119
protocol realizing this

52
00:01:57,119 --> 00:01:59,520
we might suffer from some jumps in this

53
00:01:59,520 --> 00:02:02,000
sequence of time values but those jumps

54
00:02:02,000 --> 00:02:05,759
are required to be limited and small

55
00:02:05,759 --> 00:02:07,360
on a more abstract

56
00:02:07,360 --> 00:02:09,280
level we could say well what these

57
00:02:09,280 --> 00:02:11,920
parties try to achieve

58
00:02:11,920 --> 00:02:14,080
is they want to jointly together realize

59
00:02:14,080 --> 00:02:16,480
a global clock functionality

60
00:02:16,480 --> 00:02:18,640
so in this abstraction you could imagine

61
00:02:18,640 --> 00:02:20,480
we have a functionality available that

62
00:02:20,480 --> 00:02:23,040
internally keeps track of real time and

63
00:02:23,040 --> 00:02:26,319
whenever a party asks the functionality

64
00:02:26,319 --> 00:02:29,360
it gets a value that is in the epsilon

65
00:02:29,360 --> 00:02:31,760
interval around that real time where the

66
00:02:31,760 --> 00:02:33,760
epsilon could be influenced by for

67
00:02:33,760 --> 00:02:36,000
example the adversary

68
00:02:36,000 --> 00:02:38,560
so the goal of a clock synchronization

69
00:02:38,560 --> 00:02:40,160
protocol is to

70
00:02:40,160 --> 00:02:43,120
realize this functionality

71
00:02:43,120 --> 00:02:45,200
clock synchronization protocols have a

72
00:02:45,200 --> 00:02:47,200
rich history in the distributed systems

73
00:02:47,200 --> 00:02:48,720
literature

74
00:02:48,720 --> 00:02:50,000
so let's look at some of the prior

75
00:02:50,000 --> 00:02:51,519
models that were used to prove

76
00:02:51,519 --> 00:02:53,280
synchronized secure

77
00:02:53,280 --> 00:02:55,519
so initially you just assumed a fixed

78
00:02:55,519 --> 00:02:57,280
party set and you assume that all

79
00:02:57,280 --> 00:02:58,720
parties are active except for

80
00:02:58,720 --> 00:03:01,040
potentially the byzantine nodes which is

81
00:03:01,040 --> 00:03:03,599
the parties under adversarial control

82
00:03:03,599 --> 00:03:05,120
clock synchronization could be achieved

83
00:03:05,120 --> 00:03:08,000
there or was achieved there by a smart

84
00:03:08,000 --> 00:03:10,239
counting of messages and exchanging

85
00:03:10,239 --> 00:03:11,599
timestamps

86
00:03:11,599 --> 00:03:13,599
a relaxation of this which which makes

87
00:03:13,599 --> 00:03:15,200
the problem a bit harder is the

88
00:03:15,200 --> 00:03:17,040
so-called ad hoc model where not all

89
00:03:17,040 --> 00:03:19,200
parties are active but you just you know

90
00:03:19,200 --> 00:03:21,200
that a priori unknown subset of parties

91
00:03:21,200 --> 00:03:23,360
will not start the protocol so counting

92
00:03:23,360 --> 00:03:26,239
because becomes a bit more challenging

93
00:03:26,239 --> 00:03:27,840
so typically the security threshold then

94
00:03:27,840 --> 00:03:29,920
requires uh for example known as

95
00:03:29,920 --> 00:03:33,120
maturity among the active guys

96
00:03:33,120 --> 00:03:36,400
what we are interested in this work is a

97
00:03:36,400 --> 00:03:39,200
newer model of party

98
00:03:39,200 --> 00:03:41,519
and protocol executions

99
00:03:41,519 --> 00:03:43,840
so in this work we consider the dynamic

100
00:03:43,840 --> 00:03:46,879
attack model which is that the number of

101
00:03:46,879 --> 00:03:48,720
online and offline parties changes over

102
00:03:48,720 --> 00:03:51,599
time we don't have a priori knowledge of

103
00:03:51,599 --> 00:03:53,599
the participation level that we can

104
00:03:53,599 --> 00:03:55,360
expect in the product call so no

105
00:03:55,360 --> 00:03:56,560
threshold

106
00:03:56,560 --> 00:03:58,560
no counting of

107
00:03:58,560 --> 00:04:01,760
parties is reliable right because the

108
00:04:01,760 --> 00:04:03,920
participation can drop any time so we

109
00:04:03,920 --> 00:04:06,400
have unannounced disappearance

110
00:04:06,400 --> 00:04:08,640
um newcomers must be bootstrapped into

111
00:04:08,640 --> 00:04:10,319
the protocol so we have to accommodate

112
00:04:10,319 --> 00:04:12,319
joining and the security threshold is

113
00:04:12,319 --> 00:04:14,400
then formulated relative to the current

114
00:04:14,400 --> 00:04:16,959
participation level so meaning that for

115
00:04:16,959 --> 00:04:19,279
example if always the majority of

116
00:04:19,279 --> 00:04:21,600
parties is exceeds the number of

117
00:04:21,600 --> 00:04:23,440
dishonest parties

118
00:04:23,440 --> 00:04:25,120
no matter what the participation level

119
00:04:25,120 --> 00:04:27,440
is then we are secured a prominent or

120
00:04:27,440 --> 00:04:29,120
prominent protocols in the dynamic

121
00:04:29,120 --> 00:04:31,600
attack model are nakamoto consensus

122
00:04:31,600 --> 00:04:36,400
protocols in the pos or pow space

123
00:04:36,400 --> 00:04:38,960
and since clock synchronization

124
00:04:38,960 --> 00:04:41,759
could be seen as a form of agreement

125
00:04:41,759 --> 00:04:43,440
agreement on time

126
00:04:43,440 --> 00:04:44,479
we might

127
00:04:44,479 --> 00:04:46,320
think okay

128
00:04:46,320 --> 00:04:48,240
can we draw some inspiration

129
00:04:48,240 --> 00:04:50,000
to design a clock synchronization

130
00:04:50,000 --> 00:04:52,400
technique for the dynamic ad hoc model

131
00:04:52,400 --> 00:04:54,960
from those protocols

132
00:04:54,960 --> 00:04:56,400
so

133
00:04:56,400 --> 00:04:58,800
let's let's let's try it with bitcoin so

134
00:04:58,800 --> 00:05:01,120
ideas for novel clock synchronization uh

135
00:05:01,120 --> 00:05:03,039
in the dynamical talk model could be to

136
00:05:03,039 --> 00:05:04,800
just run bitcoin

137
00:05:04,800 --> 00:05:06,800
and we know from bitcoin that a new

138
00:05:06,800 --> 00:05:09,360
block arrives roughly every 10 minutes

139
00:05:09,360 --> 00:05:11,280
we have consistency and lightness that

140
00:05:11,280 --> 00:05:12,639
means we have

141
00:05:12,639 --> 00:05:14,000
except for the

142
00:05:14,000 --> 00:05:16,560
possibly most recent blocks we have a

143
00:05:16,560 --> 00:05:19,039
prefix where all parties agree on the

144
00:05:19,039 --> 00:05:21,440
stable prefix and we have lightness

145
00:05:21,440 --> 00:05:23,360
which means this stable prefix grows

146
00:05:23,360 --> 00:05:25,120
over time

147
00:05:25,120 --> 00:05:27,600
so now just say well block depth is a

148
00:05:27,600 --> 00:05:29,680
proxy of time right every 10 minutes a

149
00:05:29,680 --> 00:05:31,120
block count the number of blocks you

150
00:05:31,120 --> 00:05:33,039
know roughly the time

151
00:05:33,039 --> 00:05:35,520
this is formerly a clock synchronization

152
00:05:35,520 --> 00:05:38,000
technique however there is a drawback

153
00:05:38,000 --> 00:05:40,080
it's that pow is not a standard

154
00:05:40,080 --> 00:05:42,479
assumption for clock synchronizers

155
00:05:42,479 --> 00:05:45,039
right clock synchronizers would probably

156
00:05:45,039 --> 00:05:47,759
work with a crs or a pki but not with

157
00:05:47,759 --> 00:05:49,840
this with the resource of computing

158
00:05:49,840 --> 00:05:51,360
power

159
00:05:51,360 --> 00:05:54,160
and another point to mention is that

160
00:05:54,160 --> 00:05:56,560
what i just described yields a rather

161
00:05:56,560 --> 00:05:59,280
loose clock

162
00:05:59,280 --> 00:06:01,440
so let's get rid of this pw assumption

163
00:06:01,440 --> 00:06:03,680
and just use pos blockchains

164
00:06:03,680 --> 00:06:05,280
so we also have consistency and

165
00:06:05,280 --> 00:06:06,960
lightness

166
00:06:06,960 --> 00:06:08,560
and

167
00:06:08,560 --> 00:06:10,639
we only have one source of trust for

168
00:06:10,639 --> 00:06:13,039
example in the case of uroboros genesis

169
00:06:13,039 --> 00:06:14,639
we only have one source of trust is the

170
00:06:14,639 --> 00:06:17,440
genesis block so a crs basically so that

171
00:06:17,440 --> 00:06:19,600
would be a clock synchronizer

172
00:06:19,600 --> 00:06:21,520
but wait a moment so

173
00:06:21,520 --> 00:06:23,680
the non-pos protocols

174
00:06:23,680 --> 00:06:27,600
that accommodate what we want right

175
00:06:27,600 --> 00:06:30,560
they either require lower bound

176
00:06:30,560 --> 00:06:32,479
or an accurate estimate of participation

177
00:06:32,479 --> 00:06:33,440
between

178
00:06:33,440 --> 00:06:35,919
okay this we just said we would like to

179
00:06:35,919 --> 00:06:37,039
avoid

180
00:06:37,039 --> 00:06:39,120
or alternatively they have to assume a

181
00:06:39,120 --> 00:06:41,759
reliable timing service like uroboros

182
00:06:41,759 --> 00:06:43,120
genesis

183
00:06:43,120 --> 00:06:45,280
so these protocols themselves

184
00:06:45,280 --> 00:06:47,680
need time information before they can

185
00:06:47,680 --> 00:06:49,360
really work

186
00:06:49,360 --> 00:06:51,599
so that seems like a deadlock situation

187
00:06:51,599 --> 00:06:53,919
the only protocol for agreement we know

188
00:06:53,919 --> 00:06:56,639
in a dynamic attack setting they need

189
00:06:56,639 --> 00:06:58,960
time themselves as an external input so

190
00:06:58,960 --> 00:07:01,039
maybe we can still you know use some

191
00:07:01,039 --> 00:07:02,720
ideas from those protocols because they

192
00:07:02,720 --> 00:07:05,280
guarantee something

193
00:07:05,280 --> 00:07:07,360
and this is exactly what we investigate

194
00:07:07,360 --> 00:07:08,720
here

195
00:07:08,720 --> 00:07:10,800
so the question becomes is clock

196
00:07:10,800 --> 00:07:13,039
synchronization possible

197
00:07:13,039 --> 00:07:15,599
in the dynamic at hog setting

198
00:07:15,599 --> 00:07:18,400
and note that if the answer was is no

199
00:07:18,400 --> 00:07:19,360
right

200
00:07:19,360 --> 00:07:21,199
that would be very disappointing

201
00:07:21,199 --> 00:07:22,800
it would mean that any cryptographic

202
00:07:22,800 --> 00:07:24,880
technique

203
00:07:24,880 --> 00:07:27,680
that requires a time

204
00:07:27,680 --> 00:07:30,240
in the dynamic of hog setting would rely

205
00:07:30,240 --> 00:07:32,240
on an external timing service that

206
00:07:32,240 --> 00:07:33,840
itself could not be realized in the same

207
00:07:33,840 --> 00:07:35,680
mode that would be

208
00:07:35,680 --> 00:07:37,440
a disappointment

209
00:07:37,440 --> 00:07:39,680
but luckily as we prove in this work

210
00:07:39,680 --> 00:07:41,680
it is possible even in the dynamic talk

211
00:07:41,680 --> 00:07:43,919
setting to synchronize on time and even

212
00:07:43,919 --> 00:07:46,160
more is possible and this brings us to

213
00:07:46,160 --> 00:07:48,400
the main result of this paper so we

214
00:07:48,400 --> 00:07:50,080
actually designed the first qs

215
00:07:50,080 --> 00:07:52,400
blockchain protocol with the following

216
00:07:52,400 --> 00:07:53,680
features

217
00:07:53,680 --> 00:07:56,319
so it's a secure qs protocol in the

218
00:07:56,319 --> 00:07:58,879
dynamic ad hoc setting and does not need

219
00:07:58,879 --> 00:08:01,199
a global clock or reliable timing

220
00:08:01,199 --> 00:08:03,919
information instead it synchronizes

221
00:08:03,919 --> 00:08:05,919
itself on time just based on the

222
00:08:05,919 --> 00:08:08,240
assumption we have seen on the roughly

223
00:08:08,240 --> 00:08:12,080
same speed clocks or distortion timers

224
00:08:12,080 --> 00:08:14,400
and second of all the protocol is a

225
00:08:14,400 --> 00:08:16,000
clock synchronizer

226
00:08:16,000 --> 00:08:18,240
you can use it or any party and any

227
00:08:18,240 --> 00:08:20,319
external observer can use it to compute

228
00:08:20,319 --> 00:08:21,680
time values

229
00:08:21,680 --> 00:08:24,160
that are only a bounded distance apart

230
00:08:24,160 --> 00:08:26,560
we call the protocol chronos

231
00:08:26,560 --> 00:08:30,160
and it is a combination of a lecture

232
00:08:30,160 --> 00:08:32,719
plus a global clock we can actually

233
00:08:32,719 --> 00:08:35,519
directly sketch the informal idea of our

234
00:08:35,519 --> 00:08:38,399
solution that we put forth in this work

235
00:08:38,399 --> 00:08:40,719
so assume we have our set of parties

236
00:08:40,719 --> 00:08:42,799
connected over the network and each

237
00:08:42,799 --> 00:08:45,360
equip with the duration timers

238
00:08:45,360 --> 00:08:46,480
and

239
00:08:46,480 --> 00:08:48,720
also assume we have parties identified

240
00:08:48,720 --> 00:08:51,040
by certain credentials

241
00:08:51,040 --> 00:08:53,440
they in parallel the same set of parties

242
00:08:53,440 --> 00:08:56,640
run an instance of uroboros genesis

243
00:08:56,640 --> 00:08:57,839
and

244
00:08:57,839 --> 00:08:59,680
the protocol now roughly works as

245
00:08:59,680 --> 00:09:02,080
follows so the parties exchange

246
00:09:02,080 --> 00:09:03,760
authenticated or synchronization

247
00:09:03,760 --> 00:09:05,360
messages

248
00:09:05,360 --> 00:09:08,240
they contain local timestamps we also

249
00:09:08,240 --> 00:09:10,240
restrict the exchange of these messages

250
00:09:10,240 --> 00:09:12,880
by the pos lottery to avoid adversarial

251
00:09:12,880 --> 00:09:14,720
dominance

252
00:09:14,720 --> 00:09:16,560
the parties try to reach consensus over

253
00:09:16,560 --> 00:09:18,560
the set of synchronization messages

254
00:09:18,560 --> 00:09:21,440
using the blockchain

255
00:09:21,440 --> 00:09:24,000
the parties then adjust time values so

256
00:09:24,000 --> 00:09:26,880
their global notion of time based on the

257
00:09:26,880 --> 00:09:29,519
agreed set and they observed some

258
00:09:29,519 --> 00:09:31,360
observed delays

259
00:09:31,360 --> 00:09:34,880
this also informs of course the parties

260
00:09:34,880 --> 00:09:37,279
about which time stamps they should use

261
00:09:37,279 --> 00:09:40,000
when executing reverse chances

262
00:09:40,000 --> 00:09:41,839
and finally we have newcomers that have

263
00:09:41,839 --> 00:09:44,399
to retrace the evidence they see in the

264
00:09:44,399 --> 00:09:45,760
blockchain

265
00:09:45,760 --> 00:09:47,760
and they have to

266
00:09:47,760 --> 00:09:50,080
retrace the recent adjustments

267
00:09:50,080 --> 00:09:52,320
of those parties

268
00:09:52,320 --> 00:09:54,480
so a word of caution here but it looked

269
00:09:54,480 --> 00:09:55,600
modular

270
00:09:55,600 --> 00:09:57,680
the construction itself is not modular

271
00:09:57,680 --> 00:09:58,959
there are a lot of things intertwined

272
00:09:58,959 --> 00:10:00,959
here and for example the messages are

273
00:10:00,959 --> 00:10:03,200
authenticated and filter based on the

274
00:10:03,200 --> 00:10:05,760
pos lottery

275
00:10:05,760 --> 00:10:08,160
roboros genesis has to be modified we

276
00:10:08,160 --> 00:10:10,079
have to include a new procedure how

277
00:10:10,079 --> 00:10:12,160
parties can bootstrap the electric state

278
00:10:12,160 --> 00:10:13,839
and the ledger time

279
00:10:13,839 --> 00:10:15,760
so it will not be as modular as

280
00:10:15,760 --> 00:10:18,480
suggested here but the idea is is

281
00:10:18,480 --> 00:10:20,480
roughly accurate this brings us to a

282
00:10:20,480 --> 00:10:22,880
natural outline of this talk so first we

283
00:10:22,880 --> 00:10:25,360
have to recap uroboros genesis in order

284
00:10:25,360 --> 00:10:27,519
to see how it works and in order to

285
00:10:27,519 --> 00:10:29,360
understand what happens to genesis when

286
00:10:29,360 --> 00:10:31,519
we don't have access to a global clock

287
00:10:31,519 --> 00:10:33,360
initially but when we only have these

288
00:10:33,360 --> 00:10:35,440
duration timers available so what can go

289
00:10:35,440 --> 00:10:37,760
wrong and what has to be fixed

290
00:10:37,760 --> 00:10:40,560
then we come to the final part where we

291
00:10:40,560 --> 00:10:42,640
present chronos our clock synchronizer

292
00:10:42,640 --> 00:10:44,720
which at the same time is then also a

293
00:10:44,720 --> 00:10:46,720
blockchain protocol

294
00:10:46,720 --> 00:10:48,720
so let's now see how uroboros chances

295
00:10:48,720 --> 00:10:51,440
works in genesis time is divided into

296
00:10:51,440 --> 00:10:53,600
discrete units called slots and a

297
00:10:53,600 --> 00:10:55,200
certain amount of slots is called an

298
00:10:55,200 --> 00:10:57,839
epoch in each slot each party evaluates

299
00:10:57,839 --> 00:11:00,480
a private slot leadership lottery

300
00:11:00,480 --> 00:11:03,360
so you're elected proportional to stake

301
00:11:03,360 --> 00:11:06,640
and it's a private election

302
00:11:06,640 --> 00:11:08,880
and it's seated by

303
00:11:08,880 --> 00:11:11,120
randomness that comes from the chain

304
00:11:11,120 --> 00:11:12,640
itself

305
00:11:12,640 --> 00:11:14,800
when elect the slot leader

306
00:11:14,800 --> 00:11:17,279
as a slot leader then you can create the

307
00:11:17,279 --> 00:11:19,680
block for the slot and append it to your

308
00:11:19,680 --> 00:11:21,680
most preferred chain at this

309
00:11:21,680 --> 00:11:23,839
point

310
00:11:23,839 --> 00:11:25,760
let's be more concrete let's assume we

311
00:11:25,760 --> 00:11:28,560
have the most preferred chain here

312
00:11:28,560 --> 00:11:30,560
then in order to so

313
00:11:30,560 --> 00:11:32,240
since we're transitioning now here into

314
00:11:32,240 --> 00:11:34,560
a new epoch we have to refresh the

315
00:11:34,560 --> 00:11:36,240
lottery we have to update the state

316
00:11:36,240 --> 00:11:39,040
distribution and we also have to exceed

317
00:11:39,040 --> 00:11:41,600
fresh randomness into the lottery

318
00:11:41,600 --> 00:11:44,240
so the state distribution is taken from

319
00:11:44,240 --> 00:11:45,680
a snapshot

320
00:11:45,680 --> 00:11:47,920
from the last block in the epoch

321
00:11:47,920 --> 00:11:49,920
preceding the previous one

322
00:11:49,920 --> 00:11:50,959
this has

323
00:11:50,959 --> 00:11:53,440
the reason for this is that we have

324
00:11:53,440 --> 00:11:55,519
first of all agreement on the state

325
00:11:55,519 --> 00:11:57,680
distribution

326
00:11:57,680 --> 00:11:59,600
then the

327
00:11:59,600 --> 00:12:01,760
seat the randomness is taken from the

328
00:12:01,760 --> 00:12:03,839
previous epoch from the stable part of

329
00:12:03,839 --> 00:12:05,120
the blockchain

330
00:12:05,120 --> 00:12:06,880
from the initial blocks from the

331
00:12:06,880 --> 00:12:09,120
previous epoch the reason for this is

332
00:12:09,120 --> 00:12:10,720
that we have agreement on the randomness

333
00:12:10,720 --> 00:12:12,959
too and even more importantly the

334
00:12:12,959 --> 00:12:15,360
randomness is affected by an honest

335
00:12:15,360 --> 00:12:18,320
block after that the state distribution

336
00:12:18,320 --> 00:12:20,320
has been fixed this is uh needed to

337
00:12:20,320 --> 00:12:21,360
ensure

338
00:12:21,360 --> 00:12:23,440
or to avoid grinding attacks

339
00:12:23,440 --> 00:12:25,920
so the seed comes from vrf verifiable

340
00:12:25,920 --> 00:12:28,320
random function evaluations

341
00:12:28,320 --> 00:12:31,440
that slot leaders pack into their blocks

342
00:12:31,440 --> 00:12:32,560
as well

343
00:12:32,560 --> 00:12:35,600
so the the lottery itself is then

344
00:12:35,600 --> 00:12:37,040
formulated also with respect to a

345
00:12:37,040 --> 00:12:39,040
verifiable random function

346
00:12:39,040 --> 00:12:41,279
you evaluate this function based on the

347
00:12:41,279 --> 00:12:43,200
fresh randomness

348
00:12:43,200 --> 00:12:45,839
slot number and if it's smaller than a

349
00:12:45,839 --> 00:12:47,920
certain threshold depending on your

350
00:12:47,920 --> 00:12:50,639
state then you're an elected slot leader

351
00:12:50,639 --> 00:12:52,880
and you can prove this to everyone

352
00:12:52,880 --> 00:12:55,519
thanks to the properties of the vrf

353
00:12:55,519 --> 00:12:57,680
as we know from nakamoto contains in

354
00:12:57,680 --> 00:13:00,480
general so we have slots that are empty

355
00:13:00,480 --> 00:13:05,040
va can have multiple leaders and so on

356
00:13:05,040 --> 00:13:08,320
so how do parties select uh the most

357
00:13:08,320 --> 00:13:09,760
preferred chain

358
00:13:09,760 --> 00:13:12,160
how does chain selection work in genesis

359
00:13:12,160 --> 00:13:13,680
the rule says

360
00:13:13,680 --> 00:13:16,160
so if you possess a chain and you see

361
00:13:16,160 --> 00:13:18,720
new chains arriving you decide to adopt

362
00:13:18,720 --> 00:13:21,839
a new uh chain if it's valid and so

363
00:13:21,839 --> 00:13:24,000
there are two conditions now if it's

364
00:13:24,000 --> 00:13:26,000
longer than what you have and does not

365
00:13:26,000 --> 00:13:27,839
fork by more than k blocks from what you

366
00:13:27,839 --> 00:13:30,399
have so this new chain does is long and

367
00:13:30,399 --> 00:13:34,000
does not rewrite a whole bunch of of uh

368
00:13:34,000 --> 00:13:35,200
what you believe

369
00:13:35,200 --> 00:13:37,360
currently is the is the sequence of

370
00:13:37,360 --> 00:13:40,240
blocks then you adopt that however so

371
00:13:40,240 --> 00:13:42,720
there is a second condition if in the

372
00:13:42,720 --> 00:13:44,880
other case it forks by more than k block

373
00:13:44,880 --> 00:13:47,199
so it tries to override a lot of blocks

374
00:13:47,199 --> 00:13:48,720
that you already

375
00:13:48,720 --> 00:13:49,839
adopted

376
00:13:49,839 --> 00:13:53,120
but then you adopt it only if it has

377
00:13:53,120 --> 00:13:55,440
higher density block density on a

378
00:13:55,440 --> 00:13:58,480
certain interval called int following

379
00:13:58,480 --> 00:14:00,959
the forking point of these two chains

380
00:14:00,959 --> 00:14:04,000
let's see in this example how alice that

381
00:14:04,000 --> 00:14:06,160
possesses the green chain on the top

382
00:14:06,160 --> 00:14:07,040
um

383
00:14:07,040 --> 00:14:09,199
decides whether she wants to adopt blue

384
00:14:09,199 --> 00:14:11,839
or keep green she sees the blue chain

385
00:14:11,839 --> 00:14:14,720
rewrites or tries to override a lot of

386
00:14:14,720 --> 00:14:17,360
the blocks she already has

387
00:14:17,360 --> 00:14:19,279
and hence she goes back to the forking

388
00:14:19,279 --> 00:14:22,000
point and says okay which one is denser

389
00:14:22,000 --> 00:14:25,279
and she figures out it's the blue one

390
00:14:25,279 --> 00:14:28,880
so the intuition by this rule is secure

391
00:14:28,880 --> 00:14:30,399
it's the following

392
00:14:30,399 --> 00:14:32,480
under the honest maturity assumption

393
00:14:32,480 --> 00:14:34,880
chains held by honest parties so created

394
00:14:34,880 --> 00:14:37,040
and held by honest parties they must be

395
00:14:37,040 --> 00:14:39,199
denser on this interval than any

396
00:14:39,199 --> 00:14:41,920
maliciously crafted adversarial chain

397
00:14:41,920 --> 00:14:44,880
served to that party the reason for this

398
00:14:44,880 --> 00:14:46,800
comes from the forkable strings analysis

399
00:14:46,800 --> 00:14:49,519
of previous papers intuitively if

400
00:14:49,519 --> 00:14:52,240
someone manages to have two competing

401
00:14:52,240 --> 00:14:54,000
chains that are

402
00:14:54,000 --> 00:14:56,959
comparably dense and grow at the

403
00:14:56,959 --> 00:14:59,600
same rate in that interval then this

404
00:14:59,600 --> 00:15:01,920
actually means we have

405
00:15:01,920 --> 00:15:04,079
a large divergence

406
00:15:04,079 --> 00:15:06,160
established which

407
00:15:06,160 --> 00:15:08,880
is however ruled out by the analysis so

408
00:15:08,880 --> 00:15:11,519
large divergence only happen with

409
00:15:11,519 --> 00:15:13,600
negligible probabilities so hence this

410
00:15:13,600 --> 00:15:17,600
this is a safe way to adopt new chains

411
00:15:17,600 --> 00:15:20,399
a useful property for this work is of

412
00:15:20,399 --> 00:15:22,079
this

413
00:15:22,079 --> 00:15:23,920
genesis chain selection rule is the

414
00:15:23,920 --> 00:15:24,959
following

415
00:15:24,959 --> 00:15:27,680
that if parties use this especially a

416
00:15:27,680 --> 00:15:29,440
newly joining party

417
00:15:29,440 --> 00:15:31,440
will adopt the chain

418
00:15:31,440 --> 00:15:33,440
with a large comp prefix with respect to

419
00:15:33,440 --> 00:15:35,839
honest parties so a party can come

420
00:15:35,839 --> 00:15:37,120
online

421
00:15:37,120 --> 00:15:39,519
it just sees it has access to the

422
00:15:39,519 --> 00:15:40,800
genesis block and it just sees where

423
00:15:40,800 --> 00:15:42,399
chains float around

424
00:15:42,399 --> 00:15:45,600
and the chains it prefers will share a

425
00:15:45,600 --> 00:15:47,680
large comp prefix

426
00:15:47,680 --> 00:15:50,160
with the honest parties so the reason

427
00:15:50,160 --> 00:15:51,360
why this

428
00:15:51,360 --> 00:15:53,040
holds is the following we have

429
00:15:53,040 --> 00:15:55,759
established that nct is a proxy for

430
00:15:55,759 --> 00:15:58,240
honesty from slide before

431
00:15:58,240 --> 00:16:01,120
so all parties chains must contain this

432
00:16:01,120 --> 00:16:03,519
stable prefix at some point so the new

433
00:16:03,519 --> 00:16:06,079
joiners they might so if for example

434
00:16:06,079 --> 00:16:09,199
they have no access to reliable time

435
00:16:09,199 --> 00:16:11,040
they might not be able to point to the

436
00:16:11,040 --> 00:16:12,320
exact

437
00:16:12,320 --> 00:16:14,560
end of this stable prefix but they are

438
00:16:14,560 --> 00:16:17,759
guaranteed that a large portion of the

439
00:16:17,759 --> 00:16:20,480
initial blocks are shared with uh with

440
00:16:20,480 --> 00:16:22,560
honest guys this will be very useful

441
00:16:22,560 --> 00:16:25,040
later as we will see

442
00:16:25,040 --> 00:16:25,839
and

443
00:16:25,839 --> 00:16:27,120
um

444
00:16:27,120 --> 00:16:29,279
it follows from what we just observed

445
00:16:29,279 --> 00:16:30,880
that this um

446
00:16:30,880 --> 00:16:33,040
this prefix of of the

447
00:16:33,040 --> 00:16:35,279
of the honest parties is it pins any

448
00:16:35,279 --> 00:16:36,639
density

449
00:16:36,639 --> 00:16:38,880
comparison

450
00:16:38,880 --> 00:16:41,440
and the nice thing about this is that is

451
00:16:41,440 --> 00:16:42,720
an argument that is basically

452
00:16:42,720 --> 00:16:43,920
independent

453
00:16:43,920 --> 00:16:46,560
of reliable time information

454
00:16:46,560 --> 00:16:49,759
so selecting chains according to density

455
00:16:49,759 --> 00:16:52,240
is an operation you can't before perform

456
00:16:52,240 --> 00:16:53,759
even

457
00:16:53,759 --> 00:16:55,519
if you don't have access to accurate

458
00:16:55,519 --> 00:16:57,279
time information

459
00:16:57,279 --> 00:17:00,480
and we will see later what impact this

460
00:17:00,480 --> 00:17:02,639
has and so what benefits it has but also

461
00:17:02,639 --> 00:17:05,439
what disadvantages we have this has and

462
00:17:05,439 --> 00:17:06,720
how we can

463
00:17:06,720 --> 00:17:08,240
make use of that

464
00:17:08,240 --> 00:17:10,880
so far in the description of genesis in

465
00:17:10,880 --> 00:17:13,359
the mode of operation we we saw

466
00:17:13,359 --> 00:17:16,000
we assumed the availability of a timing

467
00:17:16,000 --> 00:17:18,640
service so we we assumed the following

468
00:17:18,640 --> 00:17:20,480
we had a clock functionality that tells

469
00:17:20,480 --> 00:17:23,760
parties times what this means is that so

470
00:17:23,760 --> 00:17:26,160
if we divide now the view into the time

471
00:17:26,160 --> 00:17:28,160
axis that we as analysts have and the

472
00:17:28,160 --> 00:17:31,120
slot axis that the protocol has this

473
00:17:31,120 --> 00:17:33,440
means that every instance of time in or

474
00:17:33,440 --> 00:17:35,440
execute a point in the execution of the

475
00:17:35,440 --> 00:17:38,400
protocol every party agreed on the slot

476
00:17:38,400 --> 00:17:40,160
number they're using your slot numbers

477
00:17:40,160 --> 00:17:43,039
is a just a discretization of time so

478
00:17:43,039 --> 00:17:44,640
everybody agreed on it

479
00:17:44,640 --> 00:17:46,880
so that that's what we assumed and the

480
00:17:46,880 --> 00:17:48,559
slow number is used to evaluate the slot

481
00:17:48,559 --> 00:17:51,200
leadership and so on and so forth

482
00:17:51,200 --> 00:17:53,200
however what we want is the same speed

483
00:17:53,200 --> 00:17:56,160
or the approximate same speed assumption

484
00:17:56,160 --> 00:17:58,640
which then means that parties might

485
00:17:58,640 --> 00:18:01,200
believe in different slot numbers at the

486
00:18:01,200 --> 00:18:04,400
same instance of the computation

487
00:18:04,400 --> 00:18:06,799
so while bob believes it's not s plus

488
00:18:06,799 --> 00:18:09,280
two alice might believe uh it's s and

489
00:18:09,280 --> 00:18:10,720
then some other part you might believe

490
00:18:10,720 --> 00:18:12,559
it's s minus one

491
00:18:12,559 --> 00:18:15,760
so the at each point in the execution

492
00:18:15,760 --> 00:18:18,240
parties might have slightly skewed or

493
00:18:18,240 --> 00:18:21,520
drifted a bit apart from what the actual

494
00:18:21,520 --> 00:18:23,039
time should be

495
00:18:23,039 --> 00:18:25,360
so let's analyze genesis we just place

496
00:18:25,360 --> 00:18:28,160
it in this environment so what we prove

497
00:18:28,160 --> 00:18:31,360
also in this paper if we manage to keep

498
00:18:31,360 --> 00:18:33,360
all honest parties somewhat close we're

499
00:18:33,360 --> 00:18:35,200
kind of good this requires an extension

500
00:18:35,200 --> 00:18:38,160
of the analysis but doesn't mean we have

501
00:18:38,160 --> 00:18:40,799
to invent an entirely new protocol at

502
00:18:40,799 --> 00:18:43,360
least for this aspect here

503
00:18:43,360 --> 00:18:46,240
so close together means that parties are

504
00:18:46,240 --> 00:18:48,880
maybe delta apart from each other

505
00:18:48,880 --> 00:18:50,320
that depends on the order of network

506
00:18:50,320 --> 00:18:52,880
delay and and clock drift

507
00:18:52,880 --> 00:18:54,960
and we have to do

508
00:18:54,960 --> 00:18:57,840
small adjustments to uravor's genesis to

509
00:18:57,840 --> 00:19:01,360
deal with future chains so if we have a

510
00:19:01,360 --> 00:19:03,679
local view of the time

511
00:19:03,679 --> 00:19:06,000
then of course also the there is no

512
00:19:06,000 --> 00:19:09,039
objective future and past for parties

513
00:19:09,039 --> 00:19:10,559
and so we have to

514
00:19:10,559 --> 00:19:13,919
accommodate accommodate that

515
00:19:13,919 --> 00:19:15,280
and

516
00:19:15,280 --> 00:19:16,640
thanks to the approximately the same

517
00:19:16,640 --> 00:19:18,240
speed assumption so for example the

518
00:19:18,240 --> 00:19:20,320
initial parties they do stay close

519
00:19:20,320 --> 00:19:23,039
enough for our purpose here

520
00:19:23,039 --> 00:19:25,840
however joining parties

521
00:19:25,840 --> 00:19:28,480
they they have a hard life

522
00:19:28,480 --> 00:19:30,400
and it's actually those that create the

523
00:19:30,400 --> 00:19:32,559
problem here

524
00:19:32,559 --> 00:19:35,840
so let's see how joining parties come

525
00:19:35,840 --> 00:19:37,360
into play here

526
00:19:37,360 --> 00:19:38,559
so

527
00:19:38,559 --> 00:19:41,280
let's assume you have honest and or as

528
00:19:41,280 --> 00:19:43,360
we also say alert parties those that are

529
00:19:43,360 --> 00:19:45,120
synchronized running the protocol and

530
00:19:45,120 --> 00:19:48,799
honest they they have a stable prefix

531
00:19:48,799 --> 00:19:52,080
established and the newly joining party

532
00:19:52,080 --> 00:19:54,240
comes into play it has no information

533
00:19:54,240 --> 00:19:56,559
about what currently the time is

534
00:19:56,559 --> 00:19:58,799
it has only access to the genesis block

535
00:19:58,799 --> 00:20:00,960
and as we established before thanks to

536
00:20:00,960 --> 00:20:02,480
the genesis

537
00:20:02,480 --> 00:20:04,320
chain selection rule it will

538
00:20:04,320 --> 00:20:06,559
automatically prefer

539
00:20:06,559 --> 00:20:09,600
chains that that share the common prefix

540
00:20:09,600 --> 00:20:12,320
of the honest and alert parties because

541
00:20:12,320 --> 00:20:14,799
the the genesis rule prefers the dense

542
00:20:14,799 --> 00:20:18,080
prefix that is established by the by the

543
00:20:18,080 --> 00:20:22,080
alert parties however there is a big

544
00:20:22,080 --> 00:20:24,320
negative point here

545
00:20:24,320 --> 00:20:26,720
because timing information is not

546
00:20:26,720 --> 00:20:28,400
reliable

547
00:20:28,400 --> 00:20:30,880
it has just this local timer and it just

548
00:20:30,880 --> 00:20:33,360
shows an arbitrary time

549
00:20:33,360 --> 00:20:35,919
the party cannot cut off any

550
00:20:35,919 --> 00:20:37,679
any blocks so

551
00:20:37,679 --> 00:20:39,200
it could be that the adversary just

552
00:20:39,200 --> 00:20:40,880
serves to a party

553
00:20:40,880 --> 00:20:43,120
any extension of the honest part is

554
00:20:43,120 --> 00:20:45,200
chains and the joining party has no clue

555
00:20:45,200 --> 00:20:46,880
in determining whether this is good or

556
00:20:46,880 --> 00:20:49,120
bad because there's no objective notion

557
00:20:49,120 --> 00:20:50,480
of density

558
00:20:50,480 --> 00:20:52,960
it's only a local comparison we do but

559
00:20:52,960 --> 00:20:54,880
we don't have an objective notion of

560
00:20:54,880 --> 00:20:56,640
density here because we have dynamic

561
00:20:56,640 --> 00:20:58,559
participation levels

562
00:20:58,559 --> 00:21:01,520
so the joining party it knows somewhere

563
00:21:01,520 --> 00:21:04,159
there is this stable prefix of alert

564
00:21:04,159 --> 00:21:05,600
parties containing the chain but you

565
00:21:05,600 --> 00:21:07,200
cannot know

566
00:21:07,200 --> 00:21:09,520
where it is it cannot cut off blocks

567
00:21:09,520 --> 00:21:11,600
without time synchronization and this is

568
00:21:11,600 --> 00:21:13,120
exactly where now time and

569
00:21:13,120 --> 00:21:15,360
synchronization comes into play so now

570
00:21:15,360 --> 00:21:17,520
that we identified the core

571
00:21:17,520 --> 00:21:20,720
issue of the the problem let's now

572
00:21:20,720 --> 00:21:22,720
look at an overview over our new

573
00:21:22,720 --> 00:21:25,360
protocol chronos

574
00:21:25,360 --> 00:21:26,960
so first of all

575
00:21:26,960 --> 00:21:29,200
the alert parties so parties that are

576
00:21:29,200 --> 00:21:30,559
synchronized

577
00:21:30,559 --> 00:21:33,520
and honest for example the inaugural set

578
00:21:33,520 --> 00:21:35,039
of parties

579
00:21:35,039 --> 00:21:37,760
uh or any other party that has been uh

580
00:21:37,760 --> 00:21:38,960
bootstrapped

581
00:21:38,960 --> 00:21:42,080
um they execute auroboros genesis and

582
00:21:42,080 --> 00:21:44,080
periodically broadcast synchronization

583
00:21:44,080 --> 00:21:46,640
beacons and send it to each other

584
00:21:46,640 --> 00:21:48,400
and leave evidence of those beacons in

585
00:21:48,400 --> 00:21:49,760
the blockchain

586
00:21:49,760 --> 00:21:52,240
at the end of every epoch those parties

587
00:21:52,240 --> 00:21:54,559
they perform local clock adjustments

588
00:21:54,559 --> 00:21:56,480
based on the evidence they then see in

589
00:21:56,480 --> 00:21:58,640
the chain these are smaller

590
00:21:58,640 --> 00:22:01,520
small limited adjustments and thanks to

591
00:22:01,520 --> 00:22:04,159
this a joining party

592
00:22:04,159 --> 00:22:07,120
will be able to bootstrap the time so

593
00:22:07,120 --> 00:22:09,520
once a joining party thanks to genesis

594
00:22:09,520 --> 00:22:11,840
rule hooked up on a dense prefix you can

595
00:22:11,840 --> 00:22:14,080
start recording beacons that the alert

596
00:22:14,080 --> 00:22:16,799
part is send out and try to retrace the

597
00:22:16,799 --> 00:22:19,039
evidence once it's confident enough to

598
00:22:19,039 --> 00:22:19,840
have

599
00:22:19,840 --> 00:22:23,679
enough of this evidence received

600
00:22:23,679 --> 00:22:27,039
and to connect it to what i said before

601
00:22:27,039 --> 00:22:29,520
once the joining party

602
00:22:29,520 --> 00:22:32,080
has information about

603
00:22:32,080 --> 00:22:34,320
so retrace the evidence and then compute

604
00:22:34,320 --> 00:22:36,320
the good time stem

605
00:22:36,320 --> 00:22:37,200
then

606
00:22:37,200 --> 00:22:40,559
this directly leads to a good blockchain

607
00:22:40,559 --> 00:22:43,360
because then we know we are already on a

608
00:22:43,360 --> 00:22:46,080
common prefix with the alert parties we

609
00:22:46,080 --> 00:22:48,480
just don't know what time it is so once

610
00:22:48,480 --> 00:22:51,200
we have the time we can just cut off

611
00:22:51,200 --> 00:22:53,039
the blocks from our local point of view

612
00:22:53,039 --> 00:22:55,600
in the future and this will then lead to

613
00:22:55,600 --> 00:22:56,320
a

614
00:22:56,320 --> 00:22:58,240
blockchain that

615
00:22:58,240 --> 00:23:00,799
has the usual compprefix property with

616
00:23:00,799 --> 00:23:02,880
everyone else and at that point you

617
00:23:02,880 --> 00:23:04,559
become as a newcomer this is the point

618
00:23:04,559 --> 00:23:05,919
where you become

619
00:23:05,919 --> 00:23:08,400
alert and fully synchronized

620
00:23:08,400 --> 00:23:11,120
so let's now look at each of these steps

621
00:23:11,120 --> 00:23:14,080
in more detail the first step is that

622
00:23:14,080 --> 00:23:16,080
the the business of the synchronization

623
00:23:16,080 --> 00:23:17,280
beacons

624
00:23:17,280 --> 00:23:19,760
synchronization beacons are broadcast as

625
00:23:19,760 --> 00:23:22,240
follows so in parallel to the usual

626
00:23:22,240 --> 00:23:24,320
lottery you have in proof of stake we

627
00:23:24,320 --> 00:23:27,440
run a so-called timing lottery uh in the

628
00:23:27,440 --> 00:23:29,760
in the first part of the epoch and it's

629
00:23:29,760 --> 00:23:31,919
it's similar to a normal to the normal

630
00:23:31,919 --> 00:23:36,000
lottery so we evaluate the vrf

631
00:23:36,000 --> 00:23:37,280
on a new

632
00:23:37,280 --> 00:23:39,280
domain that is

633
00:23:39,280 --> 00:23:41,679
separated from the other domains by this

634
00:23:41,679 --> 00:23:43,039
keyboard sync

635
00:23:43,039 --> 00:23:47,039
we evaluate this vrf and if it's smaller

636
00:23:47,039 --> 00:23:49,440
than a certain threshold again depending

637
00:23:49,440 --> 00:23:51,520
on the stake that you have then you're

638
00:23:51,520 --> 00:23:53,840
eligible to broadcast synchronization

639
00:23:53,840 --> 00:23:56,960
beacon the beacon states your current

640
00:23:56,960 --> 00:23:59,520
slot number and you prove that you were

641
00:23:59,520 --> 00:24:02,080
eligible to send such a beacon and you

642
00:24:02,080 --> 00:24:04,720
sent this beacon to everyone and normal

643
00:24:04,720 --> 00:24:06,880
slot leaders those that win the slot

644
00:24:06,880 --> 00:24:09,600
leadership lottery they not only pack

645
00:24:09,600 --> 00:24:12,720
transactions into blocks but also those

646
00:24:12,720 --> 00:24:16,159
synchronization beacons

647
00:24:16,640 --> 00:24:18,960
so now let's see the end of the epoch

648
00:24:18,960 --> 00:24:20,559
approaches so how do you perform the

649
00:24:20,559 --> 00:24:22,799
local clock adjustments

650
00:24:22,799 --> 00:24:24,799
so throughout epoc

651
00:24:24,799 --> 00:24:28,000
every party records the arrival times of

652
00:24:28,000 --> 00:24:30,840
valid beacons that means those that have

653
00:24:30,840 --> 00:24:33,520
eligible proofs that

654
00:24:33,520 --> 00:24:35,200
they could be sent

655
00:24:35,200 --> 00:24:38,159
it filter out dublicates and so on so

656
00:24:38,159 --> 00:24:41,039
there is some caution one has to take

657
00:24:41,039 --> 00:24:43,520
here but i won't go into details but

658
00:24:43,520 --> 00:24:45,679
this is uh all possible thanks to the

659
00:24:45,679 --> 00:24:48,000
vrf properties

660
00:24:48,000 --> 00:24:50,640
and at the end of epoch then what you do

661
00:24:50,640 --> 00:24:53,360
is for each beacon you received

662
00:24:53,360 --> 00:24:56,320
you compute a recommendation this

663
00:24:56,320 --> 00:24:58,559
recommendation is computed

664
00:24:58,559 --> 00:25:00,080
as the difference between the slot

665
00:25:00,080 --> 00:25:02,400
number reported in the beacon minus the

666
00:25:02,400 --> 00:25:04,720
arrival time of the beacon one the the

667
00:25:04,720 --> 00:25:06,240
time when you first

668
00:25:06,240 --> 00:25:08,320
had it in europe when you first learned

669
00:25:08,320 --> 00:25:11,279
about this valid beacon then what you do

670
00:25:11,279 --> 00:25:13,200
is you look at the stable part of your

671
00:25:13,200 --> 00:25:14,720
blockchain

672
00:25:14,720 --> 00:25:16,960
identified by a certain slot number or

673
00:25:16,960 --> 00:25:18,240
prefix

674
00:25:18,240 --> 00:25:19,440
number

675
00:25:19,440 --> 00:25:22,159
and you see which which beacons made it

676
00:25:22,159 --> 00:25:24,480
into the into the blockchain

677
00:25:24,480 --> 00:25:28,799
and those will be relevant now

678
00:25:28,799 --> 00:25:31,600
so what you do is you you compute all

679
00:25:31,600 --> 00:25:34,640
the recommendations of the beacons that

680
00:25:34,640 --> 00:25:36,400
also appear in the blockchain

681
00:25:36,400 --> 00:25:38,640
and at the end of the ebook what you do

682
00:25:38,640 --> 00:25:40,640
is you add the median

683
00:25:40,640 --> 00:25:43,840
of these recommendations to your local

684
00:25:43,840 --> 00:25:45,520
time

685
00:25:45,520 --> 00:25:46,320
so

686
00:25:46,320 --> 00:25:48,159
why should this be

687
00:25:48,159 --> 00:25:50,240
okay to do it like this

688
00:25:50,240 --> 00:25:52,000
well for the full proof of course i have

689
00:25:52,000 --> 00:25:55,120
to refer to the paper but let's look now

690
00:25:55,120 --> 00:25:57,200
at the concrete example

691
00:25:57,200 --> 00:25:59,279
the example is very simple and it

692
00:25:59,279 --> 00:26:01,520
basically considers how two parties

693
00:26:01,520 --> 00:26:03,440
would compute the recommendation and the

694
00:26:03,440 --> 00:26:05,279
new local clocks

695
00:26:05,279 --> 00:26:07,679
based on just one honest synchronization

696
00:26:07,679 --> 00:26:09,360
beacon

697
00:26:09,360 --> 00:26:11,039
as analyst of course we have a bird's

698
00:26:11,039 --> 00:26:13,520
eye view on the system we know actually

699
00:26:13,520 --> 00:26:15,360
the current time t

700
00:26:15,360 --> 00:26:17,200
uh but of course the parties they they

701
00:26:17,200 --> 00:26:20,799
deviate from that so bob on the top here

702
00:26:20,799 --> 00:26:21,679
it

703
00:26:21,679 --> 00:26:23,200
he thinks it's

704
00:26:23,200 --> 00:26:25,360
it's slot number t minus y and ls thing

705
00:26:25,360 --> 00:26:28,720
on the bottom it thinks it's t minus x

706
00:26:28,720 --> 00:26:31,919
so when the beacon is sent out

707
00:26:31,919 --> 00:26:33,440
of a party that we

708
00:26:33,440 --> 00:26:35,279
believes the current slot number is t

709
00:26:35,279 --> 00:26:38,159
minus x it would put that into the

710
00:26:38,159 --> 00:26:39,120
beacon

711
00:26:39,120 --> 00:26:41,919
and send it out to everyone and we know

712
00:26:41,919 --> 00:26:44,480
that this b can will make it to the two

713
00:26:44,480 --> 00:26:47,279
parties in a correlated fashion so we

714
00:26:47,279 --> 00:26:49,840
have this delta bounded delay and so

715
00:26:49,840 --> 00:26:51,600
each party will learn about this beacon

716
00:26:51,600 --> 00:26:53,840
and compute the recommendation

717
00:26:53,840 --> 00:26:55,039
so now

718
00:26:55,039 --> 00:26:57,919
alice will be the first of the two to

719
00:26:57,919 --> 00:27:01,120
arrive at the epoch boundary

720
00:27:01,120 --> 00:27:02,559
and we'll now compute these clock

721
00:27:02,559 --> 00:27:04,080
adjustments

722
00:27:04,080 --> 00:27:06,880
so this epoch boundary happens r rounds

723
00:27:06,880 --> 00:27:09,600
as you can see after the beacon was

724
00:27:09,600 --> 00:27:12,240
first created and sent out

725
00:27:12,240 --> 00:27:14,559
and then due to the computation of the

726
00:27:14,559 --> 00:27:16,159
difference between the slot number and

727
00:27:16,159 --> 00:27:18,480
the arrival time alice updates this

728
00:27:18,480 --> 00:27:21,840
clock to the value r plus the slot

729
00:27:21,840 --> 00:27:24,080
report in the beak and the only

730
00:27:24,080 --> 00:27:26,480
disturbance here comes from the network

731
00:27:26,480 --> 00:27:28,159
delay

732
00:27:28,159 --> 00:27:29,520
which is

733
00:27:29,520 --> 00:27:32,799
then just this additional term delta

734
00:27:32,799 --> 00:27:36,559
so now time moves on and ali's clock is

735
00:27:36,559 --> 00:27:38,320
is ticking along

736
00:27:38,320 --> 00:27:41,440
and at some point our prime rounds after

737
00:27:41,440 --> 00:27:43,600
the beacon was sent out bob will do its

738
00:27:43,600 --> 00:27:46,799
adjustment and similarly he will update

739
00:27:46,799 --> 00:27:48,480
to r prime

740
00:27:48,480 --> 00:27:51,520
at this point plus t t minus x which is

741
00:27:51,520 --> 00:27:54,000
the slot number recorded in the beacon

742
00:27:54,000 --> 00:27:56,080
again with this additional disturbing

743
00:27:56,080 --> 00:27:58,000
term of of delta

744
00:27:58,000 --> 00:27:59,440
so now we see

745
00:27:59,440 --> 00:28:01,200
that the clocks

746
00:28:01,200 --> 00:28:02,720
after both parties have made the

747
00:28:02,720 --> 00:28:04,559
adjustment

748
00:28:04,559 --> 00:28:06,240
the delta close

749
00:28:06,240 --> 00:28:08,240
why because the arrival times which is

750
00:28:08,240 --> 00:28:10,240
the only disturbance here are delta

751
00:28:10,240 --> 00:28:11,520
clones

752
00:28:11,520 --> 00:28:13,120
of course this disturbance if you

753
00:28:13,120 --> 00:28:15,360
analyze it concretely it also has to

754
00:28:15,360 --> 00:28:18,320
include the clocks might

755
00:28:18,320 --> 00:28:19,600
not run

756
00:28:19,600 --> 00:28:22,240
at exactly the same speed but these can

757
00:28:22,240 --> 00:28:25,360
be controlled as well

758
00:28:25,360 --> 00:28:27,679
so this is the first important property

759
00:28:27,679 --> 00:28:31,120
of this clock synchronization mechanism

760
00:28:31,120 --> 00:28:32,720
note that

761
00:28:32,720 --> 00:28:35,679
we didn't use in this argument that

762
00:28:35,679 --> 00:28:37,679
these parties that

763
00:28:37,679 --> 00:28:39,760
try to compute the recommendation that

764
00:28:39,760 --> 00:28:41,200
they are

765
00:28:41,200 --> 00:28:43,679
close initially so there was no

766
00:28:43,679 --> 00:28:45,520
precondition

767
00:28:45,520 --> 00:28:47,360
in these computations

768
00:28:47,360 --> 00:28:49,679
that the party eligible to send a beacon

769
00:28:49,679 --> 00:28:52,399
at the party who wishes to synchronize

770
00:28:52,399 --> 00:28:54,080
they have to be close that's not a

771
00:28:54,080 --> 00:28:55,679
precondition this will turn out to be

772
00:28:55,679 --> 00:28:56,840
important

773
00:28:56,840 --> 00:28:59,760
later a second

774
00:28:59,760 --> 00:29:01,520
property important property about this

775
00:29:01,520 --> 00:29:04,240
synchronization procedure is that the

776
00:29:04,240 --> 00:29:08,720
adjustments computed by alert parties

777
00:29:08,720 --> 00:29:11,520
they are bounded why because we have the

778
00:29:11,520 --> 00:29:14,559
honest maturity assumption in place

779
00:29:14,559 --> 00:29:16,000
and if we take the median of all

780
00:29:16,000 --> 00:29:17,600
recommendations we know it's bound from

781
00:29:17,600 --> 00:29:20,320
below and above by beacons

782
00:29:20,320 --> 00:29:23,039
that were created by alert markets so

783
00:29:23,039 --> 00:29:26,559
the jumps that alert parties do

784
00:29:26,559 --> 00:29:28,960
are limited this is an important

785
00:29:28,960 --> 00:29:31,039
property in order not to

786
00:29:31,039 --> 00:29:33,760
geoparadise the security properties

787
00:29:33,760 --> 00:29:35,760
this finally puts us in a situation that

788
00:29:35,760 --> 00:29:38,799
we can present how joining parties will

789
00:29:38,799 --> 00:29:43,919
be able to compute a reliable timestamp

790
00:29:43,919 --> 00:29:47,279
based on what we saw before

791
00:29:47,279 --> 00:29:49,679
so when a party joins the chronos

792
00:29:49,679 --> 00:29:52,480
execution and wants to compute the time

793
00:29:52,480 --> 00:29:55,600
a time that is close to the time of the

794
00:29:55,600 --> 00:29:58,080
parties that are already synchronized in

795
00:29:58,080 --> 00:30:00,480
the system

796
00:30:00,480 --> 00:30:03,440
then it first listens to the network and

797
00:30:03,440 --> 00:30:06,240
assembles all chains it sees and by the

798
00:30:06,240 --> 00:30:09,520
genesis chain selection rule that we saw

799
00:30:09,520 --> 00:30:12,000
on a previous slide we know that it has

800
00:30:12,000 --> 00:30:15,600
the property that the party will will

801
00:30:15,600 --> 00:30:18,000
any chain it will adopt shares at the

802
00:30:18,000 --> 00:30:20,559
large comp prefix with the

803
00:30:20,559 --> 00:30:22,720
stable part of the chain that the alert

804
00:30:22,720 --> 00:30:25,279
parties have

805
00:30:25,279 --> 00:30:28,720
and this prefix so that it alice cannot

806
00:30:28,720 --> 00:30:31,679
tell you know where this prefix ends

807
00:30:31,679 --> 00:30:34,960
but it is guaranteed that this prefix

808
00:30:34,960 --> 00:30:37,760
grows roughly at the speed

809
00:30:37,760 --> 00:30:39,360
that the prefix grows for the other

810
00:30:39,360 --> 00:30:41,039
parties

811
00:30:41,039 --> 00:30:43,760
so at the point she can be sure that she

812
00:30:43,760 --> 00:30:46,720
has received enough chains

813
00:30:46,720 --> 00:30:48,000
to

814
00:30:48,000 --> 00:30:50,559
for this to to be true

815
00:30:50,559 --> 00:30:53,120
she starts collecting synchronization

816
00:30:53,120 --> 00:30:54,880
beacons

817
00:30:54,880 --> 00:30:56,559
that is she starts listening to the

818
00:30:56,559 --> 00:30:58,880
network records arrival times and she

819
00:30:58,880 --> 00:31:01,200
does this sufficiently long to be

820
00:31:01,200 --> 00:31:03,360
ensured that she has a large data set

821
00:31:03,360 --> 00:31:04,960
available for

822
00:31:04,960 --> 00:31:08,559
later computations of recommendations

823
00:31:08,559 --> 00:31:10,159
and at some point since the alert

824
00:31:10,159 --> 00:31:12,000
parties will include those beacons in

825
00:31:12,000 --> 00:31:14,320
the in the stable prefix she will

826
00:31:14,320 --> 00:31:17,200
eventually see those beacons appear in

827
00:31:17,200 --> 00:31:18,960
the prefix

828
00:31:18,960 --> 00:31:21,440
and there can not be any other chain

829
00:31:21,440 --> 00:31:22,559
eventually

830
00:31:22,559 --> 00:31:24,480
that will claim

831
00:31:24,480 --> 00:31:26,480
otherwise or another set of beacons for

832
00:31:26,480 --> 00:31:28,159
this evolve

833
00:31:28,159 --> 00:31:30,240
once we waited for sufficiently long for

834
00:31:30,240 --> 00:31:33,279
this to be true alice can perform the

835
00:31:33,279 --> 00:31:36,240
the clock adjustment so two properties

836
00:31:36,240 --> 00:31:39,519
are very crucial for for this

837
00:31:39,519 --> 00:31:41,360
so first of all

838
00:31:41,360 --> 00:31:43,840
we have to make sure that all beacons

839
00:31:43,840 --> 00:31:46,399
that we now take into consideration are

840
00:31:46,399 --> 00:31:49,360
generated after alice became

841
00:31:49,360 --> 00:31:50,399
online

842
00:31:50,399 --> 00:31:53,360
so she has to compute arrival times

843
00:31:53,360 --> 00:31:56,159
of beacons that were freshly generated

844
00:31:56,159 --> 00:31:58,480
after the point she joined

845
00:31:58,480 --> 00:32:02,320
and only then or because of that

846
00:32:02,320 --> 00:32:04,640
she she would be ensured that she

847
00:32:04,640 --> 00:32:06,960
validates and filled the speakings with

848
00:32:06,960 --> 00:32:09,200
respect to fresh lottery

849
00:32:09,200 --> 00:32:11,679
and hence in the same way as the alert

850
00:32:11,679 --> 00:32:12,720
parties

851
00:32:12,720 --> 00:32:15,519
do so this ensures that her arrival

852
00:32:15,519 --> 00:32:17,360
times are correlated with those of the

853
00:32:17,360 --> 00:32:20,000
alert parties in the system

854
00:32:20,000 --> 00:32:22,320
then uh of course as i already mentioned

855
00:32:22,320 --> 00:32:24,080
the beacons have to be in the common

856
00:32:24,080 --> 00:32:26,159
prefix such that everybody does the

857
00:32:26,159 --> 00:32:28,640
computation based on the same

858
00:32:28,640 --> 00:32:32,080
base set of values

859
00:32:32,080 --> 00:32:33,760
so now time synchronization is possible

860
00:32:33,760 --> 00:32:36,159
for alice because we have agreement of

861
00:32:36,159 --> 00:32:38,720
evidence and depressions of beacons and

862
00:32:38,720 --> 00:32:40,559
hence we can apply the reasoning that we

863
00:32:40,559 --> 00:32:42,640
saw in the example basically

864
00:32:42,640 --> 00:32:45,360
to conclude delta closeness why because

865
00:32:45,360 --> 00:32:47,760
we we already said back then

866
00:32:47,760 --> 00:32:51,360
that in order to uh jump into or to to

867
00:32:51,360 --> 00:32:52,480
compute

868
00:32:52,480 --> 00:32:53,760
the value

869
00:32:53,760 --> 00:32:55,600
and conclude that their delta close we

870
00:32:55,600 --> 00:32:57,440
don't need that ali's

871
00:32:57,440 --> 00:32:59,039
initial

872
00:32:59,039 --> 00:33:00,159
clock

873
00:33:00,159 --> 00:33:03,200
is in any way close to the alert party's

874
00:33:03,200 --> 00:33:05,120
clocks it can be

875
00:33:05,120 --> 00:33:06,559
way off

876
00:33:06,559 --> 00:33:09,360
and she will then jump directly into the

877
00:33:09,360 --> 00:33:11,840
interval that is close with all alert

878
00:33:11,840 --> 00:33:12,960
parties

879
00:33:12,960 --> 00:33:15,440
so clock adjustments can be retraced

880
00:33:15,440 --> 00:33:17,200
exactly and

881
00:33:17,200 --> 00:33:19,200
of course you have to get the details

882
00:33:19,200 --> 00:33:21,600
right here so it might be that you have

883
00:33:21,600 --> 00:33:24,399
to do it not just once but twice but you

884
00:33:24,399 --> 00:33:26,480
also see when to do it again and when to

885
00:33:26,480 --> 00:33:28,480
stop so basically when you did your

886
00:33:28,480 --> 00:33:30,880
first adjustment as a joining party and

887
00:33:30,880 --> 00:33:32,960
you see oh i'm already past the next

888
00:33:32,960 --> 00:33:35,360
synchronization point the next epoch

889
00:33:35,360 --> 00:33:36,720
then then of course you have to do it

890
00:33:36,720 --> 00:33:39,200
again and you will also find those

891
00:33:39,200 --> 00:33:40,960
or this information in the blockchain in

892
00:33:40,960 --> 00:33:42,240
this in the stable part of the

893
00:33:42,240 --> 00:33:44,960
blockchain maybe as a final remark

894
00:33:44,960 --> 00:33:47,760
just to to make the point once more so

895
00:33:47,760 --> 00:33:50,559
this can be any external observer doing

896
00:33:50,559 --> 00:33:53,120
it so the intention of alice does not

897
00:33:53,120 --> 00:33:55,279
have to be to join the blockchain

898
00:33:55,279 --> 00:33:57,760
execution it just it can just listen to

899
00:33:57,760 --> 00:34:00,080
the blockchain network in order to

900
00:34:00,080 --> 00:34:01,279
compute

901
00:34:01,279 --> 00:34:03,360
and a global notion of time namely the

902
00:34:03,360 --> 00:34:06,799
time the blockchain execution believes

903
00:34:06,799 --> 00:34:09,679
in which is as we saw secure

904
00:34:09,679 --> 00:34:11,918
so this brings me now to the end of this

905
00:34:11,918 --> 00:34:14,079
talk as a summary you can say that

906
00:34:14,079 --> 00:34:16,480
uroboros chronos is a time synchronizer

907
00:34:16,480 --> 00:34:19,119
for the dynamic adhoc setting where we

908
00:34:19,119 --> 00:34:21,359
have access to a crs and the genesis

909
00:34:21,359 --> 00:34:23,199
block and our parties have access to a

910
00:34:23,199 --> 00:34:24,960
bounded delay diffusion network and

911
00:34:24,960 --> 00:34:28,239
approximately same speed clocks

912
00:34:28,239 --> 00:34:29,760
the protocol is secure under the honest

913
00:34:29,760 --> 00:34:32,000
majority condition

914
00:34:32,000 --> 00:34:34,159
at the same time chronos is a pos

915
00:34:34,159 --> 00:34:36,000
blockchain protocol in the dynamic ad

916
00:34:36,000 --> 00:34:37,359
hoc setting

917
00:34:37,359 --> 00:34:40,239
parties can bootstrap the blockchain

918
00:34:40,239 --> 00:34:43,040
based on the genesis block only and in

919
00:34:43,040 --> 00:34:45,359
particular there is no dependency on an

920
00:34:45,359 --> 00:34:49,119
external timing service for doing so

921
00:34:49,119 --> 00:34:52,079
because parties they bootstrap the time

922
00:34:52,079 --> 00:34:54,960
based on the aforementioned same speed

923
00:34:54,960 --> 00:34:57,040
clocks or approximately same speed

924
00:34:57,040 --> 00:34:58,000
clocks

925
00:34:58,000 --> 00:35:00,480
the security here is based on the honest

926
00:35:00,480 --> 00:35:02,880
stake majority condition

927
00:35:02,880 --> 00:35:05,200
with that i conclude this talk thanks

928
00:35:05,200 --> 00:35:09,000
everyone for watching

