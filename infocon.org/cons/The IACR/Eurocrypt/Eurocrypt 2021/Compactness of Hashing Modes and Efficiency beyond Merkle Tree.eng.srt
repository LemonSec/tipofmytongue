1
00:00:00,960 --> 00:00:02,080
hello

2
00:00:02,080 --> 00:00:04,560
welcome to my presentation of our paper

3
00:00:04,560 --> 00:00:07,120
on the compactness of hashing modes and

4
00:00:07,120 --> 00:00:09,599
efficiency beyond mercury this is a

5
00:00:09,599 --> 00:00:11,920
joint work with elena and riva from tuv

6
00:00:11,920 --> 00:00:15,759
vienna and arnold roy from klagenfurt

7
00:00:15,759 --> 00:00:17,920
the general outline of the rest of my

8
00:00:17,920 --> 00:00:19,600
talk is as follows

9
00:00:19,600 --> 00:00:22,080
i am going to start with one slight

10
00:00:22,080 --> 00:00:24,480
description of our result

11
00:00:24,480 --> 00:00:26,720
to describe things in detail i shall

12
00:00:26,720 --> 00:00:28,640
first state our motivation and recall

13
00:00:28,640 --> 00:00:31,039
some background results then we jump

14
00:00:31,039 --> 00:00:33,120
into our results on the two modes that

15
00:00:33,120 --> 00:00:36,239
we present abr and avr plus

16
00:00:36,239 --> 00:00:38,960
finally i am going to briefly discuss

17
00:00:38,960 --> 00:00:42,640
some related extensions of our work

18
00:00:42,640 --> 00:00:44,960
here is the one slide representation of

19
00:00:44,960 --> 00:00:46,239
our work

20
00:00:46,239 --> 00:00:49,360
we introduce two hashing modes abr and

21
00:00:49,360 --> 00:00:51,280
abr plus

22
00:00:51,280 --> 00:00:53,760
both the modes are based on 2 and 2 n

23
00:00:53,760 --> 00:00:56,160
bit compression functions

24
00:00:56,160 --> 00:00:59,600
the parameter of avr mode matches stems

25
00:00:59,600 --> 00:01:02,399
bound from crypto 2008

26
00:01:02,399 --> 00:01:05,119
when compared to popular markletory

27
00:01:05,119 --> 00:01:07,840
abr mode compresses around 50 more

28
00:01:07,840 --> 00:01:10,400
messages by making same number of calls

29
00:01:10,400 --> 00:01:13,439
to the underlying compression function

30
00:01:13,439 --> 00:01:16,200
in comparison abr plus achieves

31
00:01:16,200 --> 00:01:19,280
indifferentiability security notion

32
00:01:19,280 --> 00:01:21,840
the only compromise it makes

33
00:01:21,840 --> 00:01:25,200
is it compresses one message block less

34
00:01:25,200 --> 00:01:28,320
than at the abr mode

35
00:01:28,320 --> 00:01:30,720
our work has both theoretical and

36
00:01:30,720 --> 00:01:32,799
practical motivations

37
00:01:32,799 --> 00:01:34,880
indeed achieving stamps bound for

38
00:01:34,880 --> 00:01:37,040
general parameters have been an open

39
00:01:37,040 --> 00:01:39,360
problem since 2008.

40
00:01:39,360 --> 00:01:41,680
from practical perspective the problem

41
00:01:41,680 --> 00:01:43,520
relates to minimizing multiplicative

42
00:01:43,520 --> 00:01:44,880
complexity

43
00:01:44,880 --> 00:01:47,360
as more function calls implies increased

44
00:01:47,360 --> 00:01:50,079
multiplicative complexity the natural

45
00:01:50,079 --> 00:01:52,159
question is how to compress more

46
00:01:52,159 --> 00:01:54,560
messages by making same number of

47
00:01:54,560 --> 00:01:57,280
function calls and thus minimizing the

48
00:01:57,280 --> 00:01:59,520
multiplicative complexity

49
00:01:59,520 --> 00:02:02,000
of course an efficient hash function has

50
00:02:02,000 --> 00:02:04,079
other applications as well like in

51
00:02:04,079 --> 00:02:07,280
archiving proof systems etc

52
00:02:07,280 --> 00:02:09,598
let's start from the background

53
00:02:09,598 --> 00:02:11,280
a hash function takes strings of

54
00:02:11,280 --> 00:02:14,000
arbitrary length as input and produces

55
00:02:14,000 --> 00:02:16,400
strings of fixed length as output

56
00:02:16,400 --> 00:02:18,800
a cryptographic hash function needs to

57
00:02:18,800 --> 00:02:21,520
satisfy some security notions

58
00:02:21,520 --> 00:02:23,200
two primary requirements are the

59
00:02:23,200 --> 00:02:25,120
collision resistance and the pre-image

60
00:02:25,120 --> 00:02:26,480
resistance

61
00:02:26,480 --> 00:02:28,720
we say an adversary finds a collision in

62
00:02:28,720 --> 00:02:30,239
the hash function

63
00:02:30,239 --> 00:02:32,560
if it can produce two distinct messages

64
00:02:32,560 --> 00:02:35,599
m and m prime such that hm equal to hm

65
00:02:35,599 --> 00:02:36,640
prime

66
00:02:36,640 --> 00:02:38,480
that is the messages are mapped to the

67
00:02:38,480 --> 00:02:40,080
same point

68
00:02:40,080 --> 00:02:42,800
we require that it takes approximately 2

69
00:02:42,800 --> 00:02:44,640
to the power n over too many hash

70
00:02:44,640 --> 00:02:46,879
evaluations before the adversary can

71
00:02:46,879 --> 00:02:48,560
find a collision

72
00:02:48,560 --> 00:02:50,879
similarly for premature instance

73
00:02:50,879 --> 00:02:52,560
the adversary is asked to invert the

74
00:02:52,560 --> 00:02:55,519
hash function h on any given point

75
00:02:55,519 --> 00:02:58,400
we expect that an adversary needs to

76
00:02:58,400 --> 00:03:00,959
make approximately 2 to the power in

77
00:03:00,959 --> 00:03:03,280
many hash computations before finding

78
00:03:03,280 --> 00:03:05,040
the pre-image

79
00:03:05,040 --> 00:03:07,200
there are notions like second pre-major

80
00:03:07,200 --> 00:03:09,519
instance or target collision resistance

81
00:03:09,519 --> 00:03:11,680
analyzed in the literature

82
00:03:11,680 --> 00:03:13,760
however they are implied by collision

83
00:03:13,760 --> 00:03:15,440
resistance

84
00:03:15,440 --> 00:03:17,920
in the last 15 years indifferentiability

85
00:03:17,920 --> 00:03:20,000
from a random oracle have appeared as

86
00:03:20,000 --> 00:03:22,319
major security criteria

87
00:03:22,319 --> 00:03:24,720
it says that the adversary should not be

88
00:03:24,720 --> 00:03:26,319
able to distinguish

89
00:03:26,319 --> 00:03:28,720
distinguish the hash function h from a

90
00:03:28,720 --> 00:03:32,480
random function from 0 1 star to 0 1 n

91
00:03:32,480 --> 00:03:34,560
i would like to point out that in

92
00:03:34,560 --> 00:03:37,120
differentiability from random oracle is

93
00:03:37,120 --> 00:03:39,680
indeed a very strong security notion and

94
00:03:39,680 --> 00:03:41,920
in particular it subsumes collision

95
00:03:41,920 --> 00:03:45,040
resistance and premature distance

96
00:03:45,040 --> 00:03:47,200
the hash functions are designed in two

97
00:03:47,200 --> 00:03:48,400
steps

98
00:03:48,400 --> 00:03:51,680
first one chooses a suitable function f

99
00:03:51,680 --> 00:03:54,319
which is a mu bit to n bit function with

100
00:03:54,319 --> 00:03:56,480
mu greater than equal to n

101
00:03:56,480 --> 00:03:59,200
the hash function is implemented via a

102
00:03:59,200 --> 00:04:01,680
domain extension algorithm or a mode of

103
00:04:01,680 --> 00:04:04,480
operation algorithm which on input m

104
00:04:04,480 --> 00:04:06,640
iteratively queries the function f as a

105
00:04:06,640 --> 00:04:09,120
subroutine with suitable inputs and

106
00:04:09,120 --> 00:04:10,720
computes the hash value based on the

107
00:04:10,720 --> 00:04:12,159
responses

108
00:04:12,159 --> 00:04:15,519
in the figure the blocks gis are the one

109
00:04:15,519 --> 00:04:18,720
which decides the output of decides the

110
00:04:18,720 --> 00:04:20,639
input to query

111
00:04:20,639 --> 00:04:23,199
the function f

112
00:04:23,199 --> 00:04:24,960
the security argument for the hash

113
00:04:24,960 --> 00:04:27,680
function is established via reduction

114
00:04:27,680 --> 00:04:28,960
from f

115
00:04:28,960 --> 00:04:31,440
it is shown that an attack against h can

116
00:04:31,440 --> 00:04:34,960
be converted into an attack against f

117
00:04:34,960 --> 00:04:36,880
often information theoretic arguments

118
00:04:36,880 --> 00:04:37,919
are used

119
00:04:37,919 --> 00:04:40,080
where f is modeled as an ideal object

120
00:04:40,080 --> 00:04:42,000
like a random function or a random

121
00:04:42,000 --> 00:04:44,000
permutation

122
00:04:44,000 --> 00:04:45,759
two classical and yet the

123
00:04:45,759 --> 00:04:47,840
state-of-the-art examples

124
00:04:47,840 --> 00:04:50,639
are markle language and markletory

125
00:04:50,639 --> 00:04:52,639
market omgart is a cascade construction

126
00:04:52,639 --> 00:04:54,240
where the message is pre-processed by

127
00:04:54,240 --> 00:04:56,720
applying a padding

128
00:04:56,720 --> 00:04:58,960
for marquetry the data tree data

129
00:04:58,960 --> 00:05:00,400
structure is used

130
00:05:00,400 --> 00:05:02,479
to evaluate the hash

131
00:05:02,479 --> 00:05:04,320
the messages are injected at the leaf

132
00:05:04,320 --> 00:05:05,199
level

133
00:05:05,199 --> 00:05:07,520
the functions are evaluated level wise

134
00:05:07,520 --> 00:05:09,759
and the output of the root node is given

135
00:05:09,759 --> 00:05:11,600
as the hash value

136
00:05:11,600 --> 00:05:13,840
modern hash designs employing material

137
00:05:13,840 --> 00:05:16,960
good or marquetry often uses padding to

138
00:05:16,960 --> 00:05:19,600
ensure the functions are independent

139
00:05:19,600 --> 00:05:23,280
blick or md6 are good examples of such

140
00:05:23,280 --> 00:05:25,520
pen

141
00:05:25,520 --> 00:05:28,720
in this work we ask how can we construct

142
00:05:28,720 --> 00:05:30,639
the most efficient domain extension

143
00:05:30,639 --> 00:05:31,919
algorithm

144
00:05:31,919 --> 00:05:34,479
in concrete terms we wish to construct a

145
00:05:34,479 --> 00:05:37,039
collision resistant k into n bit hash

146
00:05:37,039 --> 00:05:39,759
function yet making minimum number of

147
00:05:39,759 --> 00:05:41,919
calls to the underlying to end to n bit

148
00:05:41,919 --> 00:05:44,080
function f

149
00:05:44,080 --> 00:05:46,320
of course we are not the first to ask

150
00:05:46,320 --> 00:05:47,680
this question

151
00:05:47,680 --> 00:05:50,880
in euro crypt 2005 black koshan and

152
00:05:50,880 --> 00:05:53,840
shrimpton proved that to construct a 2

153
00:05:53,840 --> 00:05:56,160
into n-bit collision-resistant function

154
00:05:56,160 --> 00:05:58,080
from n-bit permutations

155
00:05:58,080 --> 00:06:00,240
more than one call to the permutation is

156
00:06:00,240 --> 00:06:01,600
necessary

157
00:06:01,600 --> 00:06:03,840
rogave and steinberg generalized this

158
00:06:03,840 --> 00:06:06,639
result to show that any k into ln bit

159
00:06:06,639 --> 00:06:07,919
function from

160
00:06:07,919 --> 00:06:11,039
permutations need to make 2 k minus l

161
00:06:11,039 --> 00:06:13,840
many queries to the n bit permutations

162
00:06:13,840 --> 00:06:17,600
in 2008 stem refined the above bound and

163
00:06:17,600 --> 00:06:20,080
conjectured that any collision resistant

164
00:06:20,080 --> 00:06:23,680
t plus s to s bit function from n plus c

165
00:06:23,680 --> 00:06:26,560
to n bit function requires s plus 2 t

166
00:06:26,560 --> 00:06:30,560
divided by 2 n plus 2 c minus s cos

167
00:06:30,560 --> 00:06:33,520
in concrete terms stance bound implies

168
00:06:33,520 --> 00:06:36,000
to construct 2n to nbit function from n

169
00:06:36,000 --> 00:06:37,919
to n bit functions three calls are

170
00:06:37,919 --> 00:06:39,280
necessary

171
00:06:39,280 --> 00:06:41,840
similarly to construct k n to n bit

172
00:06:41,840 --> 00:06:44,800
function from 2 n to n bit functions 2 k

173
00:06:44,800 --> 00:06:48,400
minus 1 by 3 many calls are necessary

174
00:06:48,400 --> 00:06:50,319
the only upper bound

175
00:06:50,319 --> 00:06:52,400
achieving n by two bits of collision

176
00:06:52,400 --> 00:06:54,639
security is the shrinkdown stem

177
00:06:54,639 --> 00:06:57,280
construction from 2008.

178
00:06:57,280 --> 00:06:58,960
the construction is described in the

179
00:06:58,960 --> 00:07:00,000
picture

180
00:07:00,000 --> 00:07:03,199
the construction uses three n to n bit

181
00:07:03,199 --> 00:07:05,199
functions and compresses two n bit

182
00:07:05,199 --> 00:07:08,319
message to construct n bit digest

183
00:07:08,319 --> 00:07:10,800
however the problem is open for general

184
00:07:10,800 --> 00:07:14,240
parameters in particular we did not know

185
00:07:14,240 --> 00:07:16,400
whether to construct k into n bit

186
00:07:16,400 --> 00:07:18,639
function from two n to n bit functions

187
00:07:18,639 --> 00:07:20,800
two k minus one by three many calls are

188
00:07:20,800 --> 00:07:22,240
sufficient to achieve collision

189
00:07:22,240 --> 00:07:24,160
resistance

190
00:07:24,160 --> 00:07:26,720
and to put matters in perspective we

191
00:07:26,720 --> 00:07:29,599
recall that the marquetry makes k minus

192
00:07:29,599 --> 00:07:31,840
one many calls

193
00:07:31,840 --> 00:07:34,080
we show that yes indeed such

194
00:07:34,080 --> 00:07:35,759
constructions exist

195
00:07:35,759 --> 00:07:38,639
we present an augmented binary tree abr

196
00:07:38,639 --> 00:07:41,520
hashing mode which compresses k n bit

197
00:07:41,520 --> 00:07:44,720
message to in big digest by making 2k

198
00:07:44,720 --> 00:07:46,400
minus one by three calls to the

199
00:07:46,400 --> 00:07:48,479
underlying two end to end bit functions

200
00:07:48,479 --> 00:07:50,800
and achieve n by two bit of collision

201
00:07:50,800 --> 00:07:52,080
resistance

202
00:07:52,080 --> 00:07:54,800
compared to markletrain this gives

203
00:07:54,800 --> 00:07:56,720
almost fifty percent improvement as

204
00:07:56,720 --> 00:07:58,720
fifty percent more messages can be

205
00:07:58,720 --> 00:08:00,080
compressed

206
00:08:00,080 --> 00:08:02,800
we also present a simple modification of

207
00:08:02,800 --> 00:08:05,759
abr tree that we call abr plus mode that

208
00:08:05,759 --> 00:08:07,520
can achieve indifferentiability from

209
00:08:07,520 --> 00:08:09,840
random oracle by making the same 2k

210
00:08:09,840 --> 00:08:11,199
minus one by three calls to the

211
00:08:11,199 --> 00:08:12,879
underlying functions

212
00:08:12,879 --> 00:08:15,199
the only difference is that in case of

213
00:08:15,199 --> 00:08:19,599
abr plus we compress one block less

214
00:08:19,599 --> 00:08:22,479
the avr tree is shown in the picture

215
00:08:22,479 --> 00:08:24,720
starting with a tree

216
00:08:24,720 --> 00:08:27,280
at each non-leaf function call an

217
00:08:27,280 --> 00:08:29,680
additional message block is served

218
00:08:29,680 --> 00:08:31,440
with both the input

219
00:08:31,440 --> 00:08:33,440
like shrimp and stem

220
00:08:33,440 --> 00:08:35,679
one previous chaining value is feed

221
00:08:35,679 --> 00:08:39,200
forward and solved with the output

222
00:08:39,200 --> 00:08:41,440
i am going to present an overview of the

223
00:08:41,440 --> 00:08:43,839
collision resistance argument

224
00:08:43,839 --> 00:08:46,240
the main difficulty is in handling the

225
00:08:46,240 --> 00:08:48,720
fact that the adversary may query the

226
00:08:48,720 --> 00:08:50,959
functions adaptively

227
00:08:50,959 --> 00:08:53,360
for example the adversary may make some

228
00:08:53,360 --> 00:08:56,000
queries to the root say and later make

229
00:08:56,000 --> 00:08:58,000
queries at the lower level and try to

230
00:08:58,000 --> 00:09:01,120
match with the previous query input

231
00:09:01,120 --> 00:09:03,120
the core idea

232
00:09:03,120 --> 00:09:06,000
is to define a bad event if such match

233
00:09:06,000 --> 00:09:08,399
happens too many times

234
00:09:08,399 --> 00:09:11,120
we derive an upper bound on the expected

235
00:09:11,120 --> 00:09:13,760
number of such match and apply mark of

236
00:09:13,760 --> 00:09:16,160
inequality

237
00:09:16,160 --> 00:09:19,120
in more detail the crucial parameter of

238
00:09:19,120 --> 00:09:21,440
our analysis is the notion of the load

239
00:09:21,440 --> 00:09:24,640
of the of a node in the transcript

240
00:09:24,640 --> 00:09:26,800
it is the number of computable messages

241
00:09:26,800 --> 00:09:29,519
in the transcript with queries to all

242
00:09:29,519 --> 00:09:32,640
the nodes in the subtree of that node

243
00:09:32,640 --> 00:09:34,080
the idea is

244
00:09:34,080 --> 00:09:36,320
conditioned on some bad events the

245
00:09:36,320 --> 00:09:39,200
collision probability can be derived in

246
00:09:39,200 --> 00:09:42,720
terms of load square by 2 to the n

247
00:09:42,720 --> 00:09:45,440
the main technical task is to find the

248
00:09:45,440 --> 00:09:47,360
correct bad events

249
00:09:47,360 --> 00:09:49,839
such that the derivation works

250
00:09:49,839 --> 00:09:53,440
and the load is suitably bounded

251
00:09:53,440 --> 00:09:56,160
we identify two bad events

252
00:09:56,160 --> 00:09:58,080
the first one happens

253
00:09:58,080 --> 00:10:00,800
when a query to a function increases the

254
00:10:00,800 --> 00:10:03,200
load of that function by k to the power

255
00:10:03,200 --> 00:10:06,560
l for some suitably chosen k

256
00:10:06,560 --> 00:10:10,000
then here l is the height of the tree

257
00:10:10,000 --> 00:10:11,760
the second one happens

258
00:10:11,760 --> 00:10:14,480
when a query to a lower level function

259
00:10:14,480 --> 00:10:17,120
say f j minus t b prime

260
00:10:17,120 --> 00:10:19,920
increases the load of a function

261
00:10:19,920 --> 00:10:21,200
f j b

262
00:10:21,200 --> 00:10:23,040
by k to the power l

263
00:10:23,040 --> 00:10:24,720
here

264
00:10:24,720 --> 00:10:27,680
the function j minus t b prime is in the

265
00:10:27,680 --> 00:10:31,959
sub tree of j b

266
00:10:32,480 --> 00:10:34,240
what we could prove is that the

267
00:10:34,240 --> 00:10:36,240
collision probability

268
00:10:36,240 --> 00:10:39,200
of each of the small blocks

269
00:10:39,200 --> 00:10:40,880
conditioned on

270
00:10:40,880 --> 00:10:43,519
the bad events not happening

271
00:10:43,519 --> 00:10:46,320
can be bounded by k to the power 2 m

272
00:10:46,320 --> 00:10:47,920
times q square

273
00:10:47,920 --> 00:10:50,720
by 2 to the n

274
00:10:50,720 --> 00:10:53,120
we can also bound the bad events

275
00:10:53,120 --> 00:10:54,480
individually

276
00:10:54,480 --> 00:10:56,399
for the first one

277
00:10:56,399 --> 00:10:58,839
one can employ a previously known

278
00:10:58,839 --> 00:11:02,240
technique however for the second one we

279
00:11:02,240 --> 00:11:05,440
need our mark of trade

280
00:11:05,440 --> 00:11:07,519
the avr plus mode is shown in the

281
00:11:07,519 --> 00:11:08,720
picture

282
00:11:08,720 --> 00:11:10,880
compared to avl mode

283
00:11:10,880 --> 00:11:12,959
the additional message block is not

284
00:11:12,959 --> 00:11:15,360
solved at the leaf level

285
00:11:15,360 --> 00:11:17,760
the general idea is that a collision

286
00:11:17,760 --> 00:11:20,320
resistant pre-image aware function when

287
00:11:20,320 --> 00:11:21,920
composed with independent random

288
00:11:21,920 --> 00:11:24,079
function gives indifferentiability from

289
00:11:24,079 --> 00:11:25,360
random oracle

290
00:11:25,360 --> 00:11:29,040
so in case of avr plus we take two abr

291
00:11:29,040 --> 00:11:30,399
trees

292
00:11:30,399 --> 00:11:31,839
and then

293
00:11:31,839 --> 00:11:34,640
envelop them with an independent random

294
00:11:34,640 --> 00:11:35,680
function

295
00:11:35,680 --> 00:11:36,800
to compute

296
00:11:36,800 --> 00:11:40,000
the abr plus hash value

297
00:11:40,000 --> 00:11:43,680
now this idea of indifferentiability

298
00:11:43,680 --> 00:11:46,079
is analogous to the well-known principle

299
00:11:46,079 --> 00:11:48,079
that collision resistance followed by

300
00:11:48,079 --> 00:11:50,800
prf gives us a prf

301
00:11:50,800 --> 00:11:53,040
the same idea works here

302
00:11:53,040 --> 00:11:55,279
the collision resistance of

303
00:11:55,279 --> 00:11:58,320
the abr modes

304
00:11:58,720 --> 00:12:01,360
ensure that the query to the root

305
00:12:01,360 --> 00:12:03,360
are all fresh

306
00:12:03,360 --> 00:12:05,600
and as the root function in itself is a

307
00:12:05,600 --> 00:12:07,040
random function

308
00:12:07,040 --> 00:12:09,760
the arguments go through

309
00:12:09,760 --> 00:12:10,480
now

310
00:12:10,480 --> 00:12:12,000
i am going to talk about certain

311
00:12:12,000 --> 00:12:14,000
corollaries of our result that may not

312
00:12:14,000 --> 00:12:15,760
be very apparent

313
00:12:15,760 --> 00:12:17,120
to start with

314
00:12:17,120 --> 00:12:19,279
consider the direct extension of shrimp

315
00:12:19,279 --> 00:12:21,200
and stem construction in the two end to

316
00:12:21,200 --> 00:12:23,200
envied setting

317
00:12:23,200 --> 00:12:25,040
here the function compresses five

318
00:12:25,040 --> 00:12:26,480
message blocks

319
00:12:26,480 --> 00:12:29,360
with three calls to the function f

320
00:12:29,360 --> 00:12:31,680
this construction in particular has a

321
00:12:31,680 --> 00:12:35,519
simpler collision resistance argument

322
00:12:36,079 --> 00:12:38,639
here it is sufficient to consider level

323
00:12:38,639 --> 00:12:41,440
wise adversary the reason is that the

324
00:12:41,440 --> 00:12:43,760
messages are injected that are injected

325
00:12:43,760 --> 00:12:45,279
at the leaf node

326
00:12:45,279 --> 00:12:47,120
does not affect the transcript as the

327
00:12:47,120 --> 00:12:49,760
probabilities are calculated over the

328
00:12:49,760 --> 00:12:52,880
randomness of the function f as well as

329
00:12:52,880 --> 00:12:54,800
the each of these function f i's are

330
00:12:54,800 --> 00:12:56,800
random functions

331
00:12:56,800 --> 00:12:58,959
thus there are broadly two cases to

332
00:12:58,959 --> 00:13:01,440
consider collision at the leaf node and

333
00:13:01,440 --> 00:13:02,959
collision at the final output

334
00:13:02,959 --> 00:13:04,880
conditioned on no collision at the leaf

335
00:13:04,880 --> 00:13:07,760
nodes the probability for the collision

336
00:13:07,760 --> 00:13:10,000
of the leaf node can be individually

337
00:13:10,000 --> 00:13:13,440
bounded by q square by 2 to the n

338
00:13:13,440 --> 00:13:15,440
whereas for the

339
00:13:15,440 --> 00:13:18,000
third condition we give a new counting

340
00:13:18,000 --> 00:13:19,200
argument

341
00:13:19,200 --> 00:13:20,639
where we prove for the collision

342
00:13:20,639 --> 00:13:23,200
probability conditioned on no

343
00:13:23,200 --> 00:13:25,600
collision at the leaf can be bounded by

344
00:13:25,600 --> 00:13:29,040
n square q square by 2 to the n

345
00:13:29,040 --> 00:13:30,800
once the collision probability is

346
00:13:30,800 --> 00:13:31,839
settled

347
00:13:31,839 --> 00:13:34,079
then like the previous case we get an

348
00:13:34,079 --> 00:13:36,959
intermediate indifferentiability result

349
00:13:36,959 --> 00:13:40,800
we take to 5 into n beta construction

350
00:13:40,800 --> 00:13:43,360
and add an independent random function

351
00:13:43,360 --> 00:13:45,199
as envelope

352
00:13:45,199 --> 00:13:47,760
like previous case we can argue that the

353
00:13:47,760 --> 00:13:49,920
pre-image aware collision resistance

354
00:13:49,920 --> 00:13:51,760
followed by random function gives in

355
00:13:51,760 --> 00:13:53,920
differentiability

356
00:13:53,920 --> 00:13:55,760
these constructions

357
00:13:55,760 --> 00:13:58,720
give an intermediate

358
00:13:58,720 --> 00:14:00,720
relatively easier to prove collision

359
00:14:00,720 --> 00:14:02,720
resistant hash function

360
00:14:02,720 --> 00:14:04,959
where the additional messages are

361
00:14:04,959 --> 00:14:08,079
injected at alternate levels

362
00:14:08,079 --> 00:14:09,839
for the proof of this

363
00:14:09,839 --> 00:14:11,600
we need to recursively apply our

364
00:14:11,600 --> 00:14:13,440
indifferentiability result with the

365
00:14:13,440 --> 00:14:16,880
composition theorem

366
00:14:16,880 --> 00:14:18,240
to conclude

367
00:14:18,240 --> 00:14:21,040
we presented new design principles for

368
00:14:21,040 --> 00:14:23,440
tree hash with almost 50 percent more

369
00:14:23,440 --> 00:14:25,600
efficiency than market tree

370
00:14:25,600 --> 00:14:27,199
this is the first general parameter

371
00:14:27,199 --> 00:14:29,360
construction towards achieving stamp

372
00:14:29,360 --> 00:14:30,639
spot

373
00:14:30,639 --> 00:14:33,519
interestingly we get an almost optimal

374
00:14:33,519 --> 00:14:35,600
efficiency with indifferentiability from

375
00:14:35,600 --> 00:14:37,440
random oracles as well

376
00:14:37,440 --> 00:14:39,680
a natural open problem is to achieve

377
00:14:39,680 --> 00:14:41,760
stamps bound for double length hash

378
00:14:41,760 --> 00:14:43,440
functions

379
00:14:43,440 --> 00:14:48,480
this concludes my presentation thank you

