1
00:00:03,280 --> 00:00:06,080
hello everyone my name is ivan sam today

2
00:00:06,080 --> 00:00:07,759
i'm happy to give a talk about our

3
00:00:07,759 --> 00:00:09,920
results constant overhead and

4
00:00:09,920 --> 00:00:11,440
conditionally secure multi-party

5
00:00:11,440 --> 00:00:14,400
computation over binary fields closer

6
00:00:14,400 --> 00:00:17,920
with anti-ghony polychronia

7
00:00:29,279 --> 00:00:32,719
procedure among all parties

8
00:00:32,719 --> 00:00:34,719
at the end of the protocol each party

9
00:00:34,719 --> 00:00:36,800
will receive its output of the common

10
00:00:36,800 --> 00:00:38,719
function

11
00:00:38,719 --> 00:00:40,160
the security of a multi-party

12
00:00:40,160 --> 00:00:43,120
computation protocol guarantees that the

13
00:00:43,120 --> 00:00:45,440
protocol execution does not leak any

14
00:00:45,440 --> 00:00:48,000
information about individual input

15
00:00:48,000 --> 00:00:49,680
beyond what can be inferred from the

16
00:00:49,680 --> 00:00:51,039
function output

17
00:00:51,039 --> 00:00:53,280
in other words each party can only learn

18
00:00:53,280 --> 00:00:55,199
its own input and output during this

19
00:00:55,199 --> 00:00:58,199
process

20
00:00:58,320 --> 00:01:00,480
the functionality is represented as a

21
00:01:00,480 --> 00:01:03,280
circuit and in particular here we choose

22
00:01:03,280 --> 00:01:05,280
to use an arithmetic circuit over a

23
00:01:05,280 --> 00:01:06,720
finite field

24
00:01:06,720 --> 00:01:08,720
the circuit supports addition and

25
00:01:08,720 --> 00:01:11,439
multiplication operations

26
00:01:11,439 --> 00:01:13,920
in this work we focus on small finite

27
00:01:13,920 --> 00:01:17,840
fields such as the binary field

28
00:01:17,840 --> 00:01:19,680
we consider the information theoretic

29
00:01:19,680 --> 00:01:22,960
setting with ions majority and assume a

30
00:01:22,960 --> 00:01:26,320
p2p channel between a repair parties we

31
00:01:26,320 --> 00:01:28,320
are interested in the militia security

32
00:01:28,320 --> 00:01:29,759
with the boards

33
00:01:29,759 --> 00:01:32,079
in the following we use n for the number

34
00:01:32,079 --> 00:01:34,560
of parties and a t for the number of

35
00:01:34,560 --> 00:01:37,439
private parties

36
00:01:38,079 --> 00:01:39,840
before we move on i would like to

37
00:01:39,840 --> 00:01:41,520
motivate my talk by answering the

38
00:01:41,520 --> 00:01:43,680
following two questions

39
00:01:43,680 --> 00:01:45,439
first why do we care about the

40
00:01:45,439 --> 00:01:47,520
unconditional npc

41
00:01:47,520 --> 00:01:49,600
a key feature of the unconditional npc

42
00:01:49,600 --> 00:01:52,079
is that we do not need any expensive

43
00:01:52,079 --> 00:01:55,040
cryptographic primitive such as public

44
00:01:55,040 --> 00:01:57,680
encryption or obvious transfer

45
00:01:57,680 --> 00:01:58,960
and the protocol is secure

46
00:01:58,960 --> 00:02:00,560
unconditionally

47
00:02:00,560 --> 00:02:02,000
comparing with protocols in the

48
00:02:02,000 --> 00:02:03,680
computational setting

49
00:02:03,680 --> 00:02:06,079
one major benefit is that crowd calls

50
00:02:06,079 --> 00:02:08,399
usually do not require complicated

51
00:02:08,399 --> 00:02:11,200
and time-consuming local computations

52
00:02:11,200 --> 00:02:13,840
as a result the most efficient mpc

53
00:02:13,840 --> 00:02:16,480
protocols are in the unconditional npc

54
00:02:16,480 --> 00:02:18,239
paradigm

55
00:02:18,239 --> 00:02:20,160
second why do we focus on the

56
00:02:20,160 --> 00:02:22,400
communication complexity

57
00:02:22,400 --> 00:02:24,160
since the local computations are

58
00:02:24,160 --> 00:02:27,040
typically simple often just a series of

59
00:02:27,040 --> 00:02:28,560
linear operations

60
00:02:28,560 --> 00:02:30,640
the efficiency of a protocol in the real

61
00:02:30,640 --> 00:02:33,120
world is dominated by its communication

62
00:02:33,120 --> 00:02:36,120
complexity

63
00:02:36,640 --> 00:02:38,319
no solutions to the information

64
00:02:38,319 --> 00:02:39,840
theoretic mpc

65
00:02:39,840 --> 00:02:42,080
all have a log and multiplicative

66
00:02:42,080 --> 00:02:45,360
overhead in the communication complexity

67
00:02:45,360 --> 00:02:47,680
concretely the communication cost for

68
00:02:47,680 --> 00:02:50,800
gates is order of n times log n bits for

69
00:02:50,800 --> 00:02:52,319
small fields

70
00:02:52,319 --> 00:02:53,680
this is because

71
00:02:53,680 --> 00:02:55,760
most of communication efficient and bc

72
00:02:55,760 --> 00:02:58,000
protocols are based on the xiaomi

73
00:02:58,000 --> 00:03:00,159
security sharing scheme

74
00:03:00,159 --> 00:03:02,239
a chemical security sharing naturally

75
00:03:02,239 --> 00:03:04,720
requires a finite field of set at least

76
00:03:04,720 --> 00:03:05,440
n

77
00:03:05,440 --> 00:03:06,879
which leads to the log and

78
00:03:06,879 --> 00:03:10,159
multiplicative overhead

79
00:03:10,480 --> 00:03:12,800
in the designs majority setting it is

80
00:03:12,800 --> 00:03:14,879
known that information theoretic

81
00:03:14,879 --> 00:03:16,959
protocols are possible in the

82
00:03:16,959 --> 00:03:19,120
preprocessing model or correlated

83
00:03:19,120 --> 00:03:21,040
randomness model

84
00:03:21,040 --> 00:03:23,360
the well known speech-like protocols can

85
00:03:23,360 --> 00:03:25,920
achieve out of end bits per gate but

86
00:03:25,920 --> 00:03:28,159
require to prepare out of n times

87
00:03:28,159 --> 00:03:30,720
kappabits of preprocessing data

88
00:03:30,720 --> 00:03:34,480
where kappa is the security parameter

89
00:03:34,480 --> 00:03:36,799
preparing such amount of precision data

90
00:03:36,799 --> 00:03:39,200
in the ice majority setting requires

91
00:03:39,200 --> 00:03:41,040
order of n times kappa bits of

92
00:03:41,040 --> 00:03:43,760
communication

93
00:03:45,200 --> 00:03:47,840
when targeting for simple circuits that

94
00:03:47,840 --> 00:03:50,239
is evaluating multiple copies of the

95
00:03:50,239 --> 00:03:51,599
same circuit

96
00:03:51,599 --> 00:03:55,120
the recent work ccx by 18 shows that one

97
00:03:55,120 --> 00:03:57,599
can evaluate logs and copies of the same

98
00:03:57,599 --> 00:03:58,720
circuits

99
00:03:58,720 --> 00:04:01,599
such that the cost for gate is out of n

100
00:04:01,599 --> 00:04:02,879
bits

101
00:04:02,879 --> 00:04:05,840
similarly in the designs module setting

102
00:04:05,840 --> 00:04:09,599
the work dc13 and cd20 shows that it is

103
00:04:09,599 --> 00:04:12,000
possible to evaluate copper copies of

104
00:04:12,000 --> 00:04:13,519
the same circuit

105
00:04:13,519 --> 00:04:15,599
such that the amount of preprocessing

106
00:04:15,599 --> 00:04:19,839
data is also out of end bits per cape

107
00:04:19,839 --> 00:04:22,479
unfortunately their solutions do not

108
00:04:22,479 --> 00:04:26,000
work for single circuits

109
00:04:26,720 --> 00:04:28,479
to recent works also consider the

110
00:04:28,479 --> 00:04:31,040
sub-optimal threshold where the number

111
00:04:31,040 --> 00:04:33,440
of crowded parties is bounded by

112
00:04:33,440 --> 00:04:36,160
one-half minus epsilon times n

113
00:04:36,160 --> 00:04:38,720
where epsilon is a constant

114
00:04:38,720 --> 00:04:42,800
the work hv w20 achieves order of nps

115
00:04:42,800 --> 00:04:46,160
relying on the idea of npc in the head

116
00:04:46,160 --> 00:04:49,120
the work crx 21 achieves the same

117
00:04:49,120 --> 00:04:51,360
results relying on a new designed

118
00:04:51,360 --> 00:04:53,759
arithmetic sequel sharing

119
00:04:53,759 --> 00:04:56,400
however we would like to point out that

120
00:04:56,400 --> 00:04:58,560
their solutions do not extend to the

121
00:04:58,560 --> 00:05:00,880
standardized majority setting

122
00:05:00,880 --> 00:05:04,960
also a recent crypto work gps 21 shows

123
00:05:04,960 --> 00:05:05,759
that

124
00:05:05,759 --> 00:05:08,560
one can even achieve all of log and bits

125
00:05:08,560 --> 00:05:11,680
per gate in the sub-optimal threshold

126
00:05:11,680 --> 00:05:13,360
which is sub-linear in the number of

127
00:05:13,360 --> 00:05:15,840
parties

128
00:05:17,039 --> 00:05:18,960
in this work we consider the following

129
00:05:18,960 --> 00:05:20,479
question

130
00:05:20,479 --> 00:05:23,600
is it possible to construct information

131
00:05:23,600 --> 00:05:26,080
protocols in the standard ions majority

132
00:05:26,080 --> 00:05:28,560
setting for computing a single boolean

133
00:05:28,560 --> 00:05:29,520
circuit

134
00:05:29,520 --> 00:05:31,840
with amortized communication complexity

135
00:05:31,840 --> 00:05:35,359
out of n bits per gate

136
00:05:35,840 --> 00:05:37,440
our work answers this question

137
00:05:37,440 --> 00:05:40,639
affirmatively we showed that there is an

138
00:05:40,639 --> 00:05:42,720
information theoretic npc foreign

139
00:05:42,720 --> 00:05:45,680
parties against t smallers and unbiased

140
00:05:45,680 --> 00:05:47,919
proportions in the presence of a

141
00:05:47,919 --> 00:05:50,000
malicious adversary

142
00:05:50,000 --> 00:05:52,400
evaluating a single boolean circuit

143
00:05:52,400 --> 00:05:54,160
with an amortized communication

144
00:05:54,160 --> 00:05:57,759
complexity of order of n bits per gate

145
00:05:57,759 --> 00:06:00,160
our result can be naturally extended to

146
00:06:00,160 --> 00:06:02,479
any finite field with communication

147
00:06:02,479 --> 00:06:07,800
complexity out of n elements per gate

148
00:06:07,840 --> 00:06:09,520
we make use of the standard xiaomi

149
00:06:09,520 --> 00:06:10,880
square sharing

150
00:06:10,880 --> 00:06:13,360
informally a shameless degree sharing

151
00:06:13,360 --> 00:06:16,000
uses a random polynomial to have a

152
00:06:16,000 --> 00:06:18,400
single secret as the evaluation point

153
00:06:18,400 --> 00:06:19,759
zero

154
00:06:19,759 --> 00:06:22,080
recall that t is the number of public

155
00:06:22,080 --> 00:06:23,120
parties

156
00:06:23,120 --> 00:06:25,440
in our construction we use the chemical

157
00:06:25,440 --> 00:06:27,919
security sharing with degree t

158
00:06:27,919 --> 00:06:30,400
it satisfies that the secret can be

159
00:06:30,400 --> 00:06:33,759
reconstructed with any t plus one shears

160
00:06:33,759 --> 00:06:35,919
and any t-shirts are independent of the

161
00:06:35,919 --> 00:06:38,400
secret

162
00:06:39,680 --> 00:06:42,160
we use the square brackets of x with

163
00:06:42,160 --> 00:06:44,560
subscript t to represent a degree

164
00:06:44,560 --> 00:06:46,840
t-shirt measuring of the value

165
00:06:46,840 --> 00:06:49,520
x the xiaomi security sharing scheme is

166
00:06:49,520 --> 00:06:51,280
linearly homomorphic

167
00:06:51,280 --> 00:06:54,000
namely adding two degree t-shirt rings x

168
00:06:54,000 --> 00:06:56,800
and y yields a degree t sharing of the

169
00:06:56,800 --> 00:07:00,400
secret x plus y

170
00:07:01,680 --> 00:07:03,520
our starting point is the speed like

171
00:07:03,520 --> 00:07:04,560
protocol

172
00:07:04,560 --> 00:07:06,960
we note that a speech lag protocol can

173
00:07:06,960 --> 00:07:09,440
achieve out of nps of communication per

174
00:07:09,440 --> 00:07:11,840
gate in the online phase

175
00:07:11,840 --> 00:07:14,639
however it requires to prepare out of

176
00:07:14,639 --> 00:07:16,960
end times copper piece of preprocessing

177
00:07:16,960 --> 00:07:20,639
data in the offline phase

178
00:07:20,639 --> 00:07:23,039
but said notice that the amount of free

179
00:07:23,039 --> 00:07:25,680
recession data can be improved to out of

180
00:07:25,680 --> 00:07:28,240
n times log and b's for gate

181
00:07:28,240 --> 00:07:30,560
we will discuss this improvement later

182
00:07:30,560 --> 00:07:31,919
but note that

183
00:07:31,919 --> 00:07:35,840
it still does not solve the problem

184
00:07:36,080 --> 00:07:38,080
on the other hand the product code in

185
00:07:38,080 --> 00:07:39,840
ccxy18

186
00:07:39,840 --> 00:07:42,400
only needs to pay out of n bits of

187
00:07:42,400 --> 00:07:45,039
communication per gate when evaluating a

188
00:07:45,039 --> 00:07:47,039
cmd circuit

189
00:07:47,039 --> 00:07:49,360
the drawback is that it does not work

190
00:07:49,360 --> 00:07:52,479
for a single circuit

191
00:07:53,360 --> 00:07:55,680
our idea is to make use of the protocol

192
00:07:55,680 --> 00:07:57,520
in ccx18

193
00:07:57,520 --> 00:08:00,000
to prepare the preprocessing data which

194
00:08:00,000 --> 00:08:02,319
is used in an efficient speech like

195
00:08:02,319 --> 00:08:04,080
online protocol

196
00:08:04,080 --> 00:08:07,360
our reason of doing so is that usually

197
00:08:07,360 --> 00:08:09,440
the preprocessing data is much easier to

198
00:08:09,440 --> 00:08:12,240
be prepared in a batch way since we do

199
00:08:12,240 --> 00:08:13,680
not need to consider the circuit

200
00:08:13,680 --> 00:08:16,160
structure

201
00:08:16,479 --> 00:08:18,479
the main difficulty is that the

202
00:08:18,479 --> 00:08:20,560
pre-processing data prepared by the

203
00:08:20,560 --> 00:08:23,199
protocol in ccx18

204
00:08:23,199 --> 00:08:25,440
should be used to evaluate a batch of

205
00:08:25,440 --> 00:08:27,120
gates each time

206
00:08:27,120 --> 00:08:29,440
however if we want to use the speeds

207
00:08:29,440 --> 00:08:31,120
like online protocol

208
00:08:31,120 --> 00:08:34,159
we need to unpack the preprocessing data

209
00:08:34,159 --> 00:08:37,760
so that it can be used gate by gate

210
00:08:37,760 --> 00:08:40,399
to achieve that we introduced what we

211
00:08:40,399 --> 00:08:42,719
refer to as hidden additive secret

212
00:08:42,719 --> 00:08:44,800
sharing

213
00:08:44,800 --> 00:08:47,600
there are also other issues for example

214
00:08:47,600 --> 00:08:48,959
we need to design an efficient

215
00:08:48,959 --> 00:08:50,640
verification protocol to achieve

216
00:08:50,640 --> 00:08:52,320
malicious security

217
00:08:52,320 --> 00:08:54,320
which we refer to our paper for more

218
00:08:54,320 --> 00:08:56,800
details

219
00:08:57,680 --> 00:09:00,399
here is an outline of this talk

220
00:09:00,399 --> 00:09:02,480
we first reviewed the speech like online

221
00:09:02,480 --> 00:09:03,680
protocols

222
00:09:03,680 --> 00:09:05,920
which we abstract as a prototype

223
00:09:05,920 --> 00:09:07,360
protocol

224
00:09:07,360 --> 00:09:09,120
then we discussed the techniques in

225
00:09:09,120 --> 00:09:10,959
ccx118

226
00:09:10,959 --> 00:09:13,360
finally we introduced hidden additive

227
00:09:13,360 --> 00:09:14,880
sequential rings

228
00:09:14,880 --> 00:09:16,800
which allow us to unpack the

229
00:09:16,800 --> 00:09:18,640
preprocessing data prepared by the

230
00:09:18,640 --> 00:09:21,200
protocol in ccxy18

231
00:09:21,200 --> 00:09:25,440
and use them in the prototype protocol

232
00:09:26,640 --> 00:09:29,120
at high level the idea of a prototype

233
00:09:29,120 --> 00:09:31,360
protocol is to compute an additive

234
00:09:31,360 --> 00:09:33,839
sharing for each value

235
00:09:33,839 --> 00:09:36,240
the benefit is that additive sharings

236
00:09:36,240 --> 00:09:38,720
are well defined in the binary field

237
00:09:38,720 --> 00:09:41,200
each share is just a single bit

238
00:09:41,200 --> 00:09:43,839
however the drawback is that we cannot

239
00:09:43,839 --> 00:09:46,720
verify the correctness of the secret

240
00:09:46,720 --> 00:09:48,880
to solve it we use a linearly

241
00:09:48,880 --> 00:09:50,959
homomorphic mac

242
00:09:50,959 --> 00:09:52,880
an authenticated additive shear ring

243
00:09:52,880 --> 00:09:55,440
contains two parts the first part is an

244
00:09:55,440 --> 00:09:58,160
additive sharing of the secret x

245
00:09:58,160 --> 00:10:00,959
and the second part is an abstract mag

246
00:10:00,959 --> 00:10:02,880
of the secret x

247
00:10:02,880 --> 00:10:04,480
it satisfies that

248
00:10:04,480 --> 00:10:06,959
the abstract mac can be used to verify

249
00:10:06,959 --> 00:10:09,839
the secret x

250
00:10:10,320 --> 00:10:12,079
for our addition gates with input

251
00:10:12,079 --> 00:10:15,040
sharing x and y we can locally compute

252
00:10:15,040 --> 00:10:19,120
the output sharing c to be x plus y

253
00:10:19,120 --> 00:10:20,880
for a multiplication date with input

254
00:10:20,880 --> 00:10:22,880
sharing x and y

255
00:10:22,880 --> 00:10:24,959
we use the standard technique of viewer

256
00:10:24,959 --> 00:10:26,000
triples

257
00:10:26,000 --> 00:10:28,240
which requires to prepare a tuple of

258
00:10:28,240 --> 00:10:30,959
shearings a b and c

259
00:10:30,959 --> 00:10:34,160
where a b are random bits and c is equal

260
00:10:34,160 --> 00:10:36,320
to a times b

261
00:10:36,320 --> 00:10:38,399
the cost for gate is stressed out of n

262
00:10:38,399 --> 00:10:43,200
bits details are omitted for simplicity

263
00:10:43,920 --> 00:10:46,079
therefore the main task of the offline

264
00:10:46,079 --> 00:10:49,360
phase is to prepare beaver triples

265
00:10:49,360 --> 00:10:52,079
recall that an authenticated sharing of

266
00:10:52,079 --> 00:10:55,440
x consists of an additive sharing of x

267
00:10:55,440 --> 00:10:58,240
and an abstract mac of x

268
00:10:58,240 --> 00:11:01,279
in speeds the mac is instantiated by an

269
00:11:01,279 --> 00:11:04,800
additive sharing of alpha times x where

270
00:11:04,800 --> 00:11:07,040
alpha is a random element in a large

271
00:11:07,040 --> 00:11:08,800
enough finite field

272
00:11:08,800 --> 00:11:11,040
it ensures that with overwhelming

273
00:11:11,040 --> 00:11:12,480
probability

274
00:11:12,480 --> 00:11:15,040
adultery cannot change the secret x

275
00:11:15,040 --> 00:11:17,279
without being detected

276
00:11:17,279 --> 00:11:19,920
however it also leads to a copper

277
00:11:19,920 --> 00:11:22,240
multiplicative overhead in the size of

278
00:11:22,240 --> 00:11:25,360
the preprocessing data

279
00:11:26,000 --> 00:11:28,079
in the ice majority setting we can

280
00:11:28,079 --> 00:11:30,320
alternatively use a degree t chemical

281
00:11:30,320 --> 00:11:33,040
shielding for the abstract mac

282
00:11:33,040 --> 00:11:34,399
this is because

283
00:11:34,399 --> 00:11:36,399
the secret is determined by the shares

284
00:11:36,399 --> 00:11:39,360
of eins parties so adversary cannot

285
00:11:39,360 --> 00:11:43,440
change the secret without being detected

286
00:11:43,440 --> 00:11:45,839
however the use of a degree t-shiny

287
00:11:45,839 --> 00:11:47,920
shearing leads to a log and

288
00:11:47,920 --> 00:11:51,360
multiplicative overhead

289
00:11:53,200 --> 00:11:55,600
now we discuss the techniques in ccx by

290
00:11:55,600 --> 00:11:58,079
18.

291
00:11:58,720 --> 00:12:01,760
the work of ccx by 18 introduces the

292
00:12:01,760 --> 00:12:04,079
notion of reverse multiplication

293
00:12:04,079 --> 00:12:05,839
friendly embeddings

294
00:12:05,839 --> 00:12:08,720
or rmfe for short

295
00:12:08,720 --> 00:12:11,920
they are rmfe is a pair of linear maps

296
00:12:11,920 --> 00:12:13,519
phi and psi

297
00:12:13,519 --> 00:12:15,839
which allows to perform coordinate bytes

298
00:12:15,839 --> 00:12:18,079
multiplication over small fields

299
00:12:18,079 --> 00:12:21,519
by operating over extension fields

300
00:12:21,519 --> 00:12:24,079
one major benefit is that now we can use

301
00:12:24,079 --> 00:12:26,480
jamie shearings in the extension field

302
00:12:26,480 --> 00:12:28,639
without having log n term

303
00:12:28,639 --> 00:12:31,360
because each time we will compute log

304
00:12:31,360 --> 00:12:32,720
and multiplications

305
00:12:32,720 --> 00:12:34,639
at the cost of one modification in the

306
00:12:34,639 --> 00:12:37,519
extension field

307
00:12:37,600 --> 00:12:39,839
for example suppose we want to compute

308
00:12:39,839 --> 00:12:42,160
the multiplications of two vectors a and

309
00:12:42,160 --> 00:12:44,320
b

310
00:12:44,320 --> 00:12:46,560
we first encode these two vectors

311
00:12:46,560 --> 00:12:47,760
separately

312
00:12:47,760 --> 00:12:49,920
and denote the results to be phi a and

313
00:12:49,920 --> 00:12:51,440
phi b

314
00:12:51,440 --> 00:12:54,320
here phi and phi b are elements in the

315
00:12:54,320 --> 00:12:57,120
extension field

316
00:12:57,200 --> 00:12:59,040
instead of doing the coordinate bytes

317
00:12:59,040 --> 00:13:01,279
multiplication over small fields we

318
00:13:01,279 --> 00:13:03,760
multiply the two encodings phi a and phi

319
00:13:03,760 --> 00:13:06,480
b

320
00:13:06,480 --> 00:13:09,519
a rmfe allows us to decode the

321
00:13:09,519 --> 00:13:12,079
coordinate wise multiplication result by

322
00:13:12,079 --> 00:13:14,720
applying the linear map psi on phi a

323
00:13:14,720 --> 00:13:17,440
times phi b

324
00:13:18,480 --> 00:13:21,200
formally the first linear map phi

325
00:13:21,200 --> 00:13:24,000
encodes a vector of kbs to a field

326
00:13:24,000 --> 00:13:26,240
element in an extension field of size 2

327
00:13:26,240 --> 00:13:27,920
to the m

328
00:13:27,920 --> 00:13:30,320
we will discuss the relation of k and m

329
00:13:30,320 --> 00:13:32,720
later

330
00:13:33,040 --> 00:13:35,600
if we have two vectors a and b

331
00:13:35,600 --> 00:13:39,040
and encode them to be phi a and phi b

332
00:13:39,040 --> 00:13:42,160
the property of rmfe allows us to

333
00:13:42,160 --> 00:13:45,279
multiply these two encodings such that

334
00:13:45,279 --> 00:13:47,279
we can decode the result to be the

335
00:13:47,279 --> 00:13:48,800
coordinated by the multiplication

336
00:13:48,800 --> 00:13:51,040
between a and b

337
00:13:51,040 --> 00:13:54,000
concretely say y is equal to phi a times

338
00:13:54,000 --> 00:13:55,040
phi b

339
00:13:55,040 --> 00:13:59,360
then we can view y as a precise encoding

340
00:13:59,360 --> 00:14:01,680
after applying the second linear map psi

341
00:14:01,680 --> 00:14:02,720
on y

342
00:14:02,720 --> 00:14:06,480
we obtain the vector of a1 times b1 to a

343
00:14:06,480 --> 00:14:09,440
k times bk

344
00:14:10,160 --> 00:14:12,560
of course to obtain a phi encoding of

345
00:14:12,560 --> 00:14:14,639
the multiplication result we just need

346
00:14:14,639 --> 00:14:16,959
to apply against linear microphi on the

347
00:14:16,959 --> 00:14:19,359
result

348
00:14:19,680 --> 00:14:23,279
the idea in cc xy18 is to encode a batch

349
00:14:23,279 --> 00:14:26,560
of k wires into a field element and then

350
00:14:26,560 --> 00:14:29,360
only operate on the extension field

351
00:14:29,360 --> 00:14:32,000
for example to compute a coordinate by

352
00:14:32,000 --> 00:14:34,160
multiplication in a secure way

353
00:14:34,160 --> 00:14:36,240
all parties first transform the vectors

354
00:14:36,240 --> 00:14:39,040
a and b to chemical shield rings of phi

355
00:14:39,040 --> 00:14:40,880
a and phi b

356
00:14:40,880 --> 00:14:42,720
then all parties run a multiplication

357
00:14:42,720 --> 00:14:44,959
protocol to compute the chemical sharing

358
00:14:44,959 --> 00:14:46,800
of y

359
00:14:46,800 --> 00:14:49,680
finally some interactive step is done to

360
00:14:49,680 --> 00:14:52,079
transform the chemical sharing of y to

361
00:14:52,079 --> 00:14:54,560
the chemical sharing of the phi encoding

362
00:14:54,560 --> 00:14:57,120
of the multiplication result

363
00:14:57,120 --> 00:14:58,800
both of these two steps can be done

364
00:14:58,800 --> 00:15:01,439
efficiently

365
00:15:02,800 --> 00:15:05,760
the work of ccx by 18 shows that there

366
00:15:05,760 --> 00:15:09,279
is a arm of e such that k over m is a

367
00:15:09,279 --> 00:15:10,720
constant

368
00:15:10,720 --> 00:15:13,519
then a batch beaver triple can be

369
00:15:13,519 --> 00:15:15,839
prepared with communication complexity

370
00:15:15,839 --> 00:15:18,000
out of m times n bits

371
00:15:18,000 --> 00:15:20,560
since each element is in the extension

372
00:15:20,560 --> 00:15:22,959
field of size 2 to the m

373
00:15:22,959 --> 00:15:25,279
on the other hand each particular triple

374
00:15:25,279 --> 00:15:27,199
is used for k gates

375
00:15:27,199 --> 00:15:29,759
the amortized cost per gate is just the

376
00:15:29,759 --> 00:15:32,800
order of n bits

377
00:15:35,120 --> 00:15:36,880
now we are ready to introduce our main

378
00:15:36,880 --> 00:15:38,959
technique hidden additive secret

379
00:15:38,959 --> 00:15:41,839
sharings

380
00:15:42,079 --> 00:15:44,160
recall that relying on techniques in

381
00:15:44,160 --> 00:15:45,680
ccxy18

382
00:15:45,680 --> 00:15:47,920
we can efficiently prepare batch viewer

383
00:15:47,920 --> 00:15:48,959
triples

384
00:15:48,959 --> 00:15:50,800
where each triple is used for k

385
00:15:50,800 --> 00:15:52,800
multiplication gates

386
00:15:52,800 --> 00:15:55,680
a set notice that ccx18 is in the

387
00:15:55,680 --> 00:15:58,399
setting of oneself cropping threshold

388
00:15:58,399 --> 00:16:00,880
our work extends their results to the

389
00:16:00,880 --> 00:16:04,000
ice majority setting

390
00:16:04,320 --> 00:16:06,160
also recall that relying on the

391
00:16:06,160 --> 00:16:09,600
prototype protocol inspired by nnob12

392
00:16:09,600 --> 00:16:11,759
and dpic12

393
00:16:11,759 --> 00:16:14,320
we can efficiently evaluate the circuits

394
00:16:14,320 --> 00:16:16,399
with the help of authenticated beaver

395
00:16:16,399 --> 00:16:18,880
triples

396
00:16:19,519 --> 00:16:21,279
the missing piece is that

397
00:16:21,279 --> 00:16:23,440
batch bureau triples cannot be directly

398
00:16:23,440 --> 00:16:26,160
used in the prototype protocol

399
00:16:26,160 --> 00:16:28,800
we need to unpack each back dual triple

400
00:16:28,800 --> 00:16:31,360
into k individual authenticated beaver

401
00:16:31,360 --> 00:16:32,480
triples

402
00:16:32,480 --> 00:16:35,519
so that they can be used one by one as

403
00:16:35,519 --> 00:16:39,519
required in the prototype protocol

404
00:16:39,759 --> 00:16:43,199
the problem boils down to the following

405
00:16:43,199 --> 00:16:45,680
for vector a of k bits

406
00:16:45,680 --> 00:16:47,920
all parties initially hold a chemical

407
00:16:47,920 --> 00:16:51,360
shearing of the encoding of the vector a

408
00:16:51,360 --> 00:16:53,279
we want to transform the chemical

409
00:16:53,279 --> 00:16:56,639
shielding to k authenticated shear rings

410
00:16:56,639 --> 00:17:00,000
one for each bit ai

411
00:17:01,040 --> 00:17:03,440
recall that our authenticated sharing

412
00:17:03,440 --> 00:17:05,359
consists of two parts

413
00:17:05,359 --> 00:17:08,160
one is an additive sharing of the secret

414
00:17:08,160 --> 00:17:10,559
and the other one is an abstract map of

415
00:17:10,559 --> 00:17:13,039
the secret

416
00:17:13,039 --> 00:17:16,000
we first focus on the additive sharings

417
00:17:16,000 --> 00:17:18,400
by logarithmic interpolation all parties

418
00:17:18,400 --> 00:17:20,400
can transform the chemical shielding of

419
00:17:20,400 --> 00:17:21,439
5a

420
00:17:21,439 --> 00:17:24,240
to an additive sharing of phi a by

421
00:17:24,240 --> 00:17:26,480
locally multiplying suitable constants

422
00:17:26,480 --> 00:17:28,240
on their shares

423
00:17:28,240 --> 00:17:31,039
note that each share is still an element

424
00:17:31,039 --> 00:17:34,160
in the extension field

425
00:17:34,799 --> 00:17:37,280
in the second step each party applies

426
00:17:37,280 --> 00:17:40,320
the inverse of 5 on its own share

427
00:17:40,320 --> 00:17:42,960
then each share becomes a vector of k

428
00:17:42,960 --> 00:17:45,039
bits in particular

429
00:17:45,039 --> 00:17:48,160
since the inverse of phi is also linear

430
00:17:48,160 --> 00:17:50,640
the summation of all vectors is equal to

431
00:17:50,640 --> 00:17:54,160
the vector a1 a2 to a k

432
00:17:54,160 --> 00:17:56,400
therefore all parties obtain additive

433
00:17:56,400 --> 00:18:00,919
shieldings for each bit ai

434
00:18:02,080 --> 00:18:04,320
for abstract max we need to use a

435
00:18:04,320 --> 00:18:06,080
linearly homomorphic mac in the

436
00:18:06,080 --> 00:18:08,960
prototype protocol

437
00:18:08,960 --> 00:18:11,760
recall that mac is used to verify the

438
00:18:11,760 --> 00:18:14,640
secret of the additive sharing we note

439
00:18:14,640 --> 00:18:17,600
that the chemical sharing of 5a is

440
00:18:17,600 --> 00:18:19,360
already verifiable

441
00:18:19,360 --> 00:18:22,000
to see it the secret file is determined

442
00:18:22,000 --> 00:18:24,480
by the shares of eins parties

443
00:18:24,480 --> 00:18:27,120
so adultery cannot change the secrets

444
00:18:27,120 --> 00:18:29,520
without being detected

445
00:18:29,520 --> 00:18:32,400
furthermore each bit ai can be recovered

446
00:18:32,400 --> 00:18:34,799
from the secret 5a

447
00:18:34,799 --> 00:18:37,360
therefore our first attempt is to

448
00:18:37,360 --> 00:18:39,919
directly use the chemical sharing of 5a

449
00:18:39,919 --> 00:18:40,840
as the

450
00:18:40,840 --> 00:18:44,320
mac we may define the mac of ai to be a

451
00:18:44,320 --> 00:18:46,559
degree t general sharing of a phi

452
00:18:46,559 --> 00:18:49,200
encoding of a vector that contains the

453
00:18:49,200 --> 00:18:52,000
secret ai

454
00:18:53,679 --> 00:18:55,840
now we check whether the mac be defined

455
00:18:55,840 --> 00:18:58,160
is linearly homomorphic

456
00:18:58,160 --> 00:19:00,080
consider the authenticated sharings of

457
00:19:00,080 --> 00:19:01,919
a1 and a2

458
00:19:01,919 --> 00:19:04,320
note that we use the same chemical

459
00:19:04,320 --> 00:19:07,039
shield rings as the max

460
00:19:07,039 --> 00:19:08,880
after we add these two as negative

461
00:19:08,880 --> 00:19:10,240
assurance

462
00:19:10,240 --> 00:19:12,400
the mag is the chemical shearing of phi

463
00:19:12,400 --> 00:19:15,200
2 times a

464
00:19:15,200 --> 00:19:18,320
however the vector 2 times a does not

465
00:19:18,320 --> 00:19:20,880
contain a1 plus a2

466
00:19:20,880 --> 00:19:23,120
we cannot use this kind of max in the

467
00:19:23,120 --> 00:19:26,239
prototype protocol

468
00:19:27,039 --> 00:19:30,160
our idea is to first purify the mac

469
00:19:30,160 --> 00:19:32,080
we know that the chemical sharing of

470
00:19:32,080 --> 00:19:34,960
file a contains not only the secret we

471
00:19:34,960 --> 00:19:37,679
want but also other secrets into vector

472
00:19:37,679 --> 00:19:38,559
a

473
00:19:38,559 --> 00:19:40,640
we want to remove the dependency on

474
00:19:40,640 --> 00:19:43,760
unrelated secrets

475
00:19:43,840 --> 00:19:46,480
let's focus on the first secret a1

476
00:19:46,480 --> 00:19:49,200
one way to do that is to multiply all

477
00:19:49,200 --> 00:19:52,160
other secrets with zero but the first

478
00:19:52,160 --> 00:19:53,919
secretive is one

479
00:19:53,919 --> 00:19:56,559
consider the vector u1 where all other

480
00:19:56,559 --> 00:19:59,039
entries are zero except the first entry

481
00:19:59,039 --> 00:20:00,320
is one

482
00:20:00,320 --> 00:20:01,840
then the coordinating bytes

483
00:20:01,840 --> 00:20:04,559
multiplication between a and e1 is the

484
00:20:04,559 --> 00:20:09,200
vector which only contains a1 and 0.

485
00:20:09,520 --> 00:20:12,400
here we rely on the rmfe again

486
00:20:12,400 --> 00:20:14,960
by locally multiplying phi e1 and the

487
00:20:14,960 --> 00:20:17,440
chemical sharing of phi a

488
00:20:17,440 --> 00:20:20,559
all parties obtain a chemistry of y

489
00:20:20,559 --> 00:20:23,440
which is an encoding of the vector a1

490
00:20:23,440 --> 00:20:26,960
and kms1 0s

491
00:20:27,679 --> 00:20:30,159
in general for each additive sharing of

492
00:20:30,159 --> 00:20:33,600
ai we can purify the mac by multiplying

493
00:20:33,600 --> 00:20:36,159
phi e i and the chemical sharing of phi

494
00:20:36,159 --> 00:20:37,679
a

495
00:20:37,679 --> 00:20:40,080
here ei is a vector where all other

496
00:20:40,080 --> 00:20:42,960
entries are zero except the x entries

497
00:20:42,960 --> 00:20:45,280
one

498
00:20:45,600 --> 00:20:47,840
now consider two additive sharings a1

499
00:20:47,840 --> 00:20:49,280
and a2

500
00:20:49,280 --> 00:20:51,919
after we add these two shear rings

501
00:20:51,919 --> 00:20:54,080
the mag part is the chemical shearing of

502
00:20:54,080 --> 00:20:56,080
y1 plus y2

503
00:20:56,080 --> 00:20:59,440
which is an encoding of the vector a1 a2

504
00:20:59,440 --> 00:21:00,840
and the kms two

505
00:21:00,840 --> 00:21:04,000
zeros we observe that the summation of

506
00:21:04,000 --> 00:21:06,960
all entries is a one plus a two which is

507
00:21:06,960 --> 00:21:09,280
just the secret

508
00:21:09,280 --> 00:21:12,159
in general the vector encoded by y one

509
00:21:12,159 --> 00:21:15,039
plus by two can be viewed as an additive

510
00:21:15,039 --> 00:21:18,400
sharing of the secrets a1 plus a2

511
00:21:18,400 --> 00:21:21,360
in other words the secret is hidden as

512
00:21:21,360 --> 00:21:23,039
an additive shear ring under the

513
00:21:23,039 --> 00:21:25,600
encoding

514
00:21:27,200 --> 00:21:30,720
therefore we define the mac as follows

515
00:21:30,720 --> 00:21:32,400
for an authenticated sharing of the

516
00:21:32,400 --> 00:21:33,679
secret x

517
00:21:33,679 --> 00:21:35,919
the max should satisfy that

518
00:21:35,919 --> 00:21:38,799
first the mech of x is the degree t is a

519
00:21:38,799 --> 00:21:40,720
mere sharing of y

520
00:21:40,720 --> 00:21:43,760
second the vector encoded by y

521
00:21:43,760 --> 00:21:46,080
satisfies that the summation of all

522
00:21:46,080 --> 00:21:49,039
entries is x

523
00:21:49,600 --> 00:21:52,159
we can verify that mac x is linearly

524
00:21:52,159 --> 00:21:54,799
homomorphic

525
00:21:54,960 --> 00:21:57,600
now given a chemical sharing of phi a to

526
00:21:57,600 --> 00:21:59,919
transform it to k authenticated shear

527
00:21:59,919 --> 00:22:00,960
rings

528
00:22:00,960 --> 00:22:02,400
all parties use logarithmic

529
00:22:02,400 --> 00:22:05,120
interpolation to locally transform the

530
00:22:05,120 --> 00:22:07,840
chemical shearing of a to k additive

531
00:22:07,840 --> 00:22:09,200
shearings

532
00:22:09,200 --> 00:22:12,000
then for each additive sharing ai all

533
00:22:12,000 --> 00:22:15,760
parties locally set mic ai to be phi ei

534
00:22:15,760 --> 00:22:19,679
times the chemical sharing of 5a

535
00:22:20,960 --> 00:22:23,440
in summary we first review the prototype

536
00:22:23,440 --> 00:22:27,440
protocol in orb 12 and dpi state 12.

537
00:22:27,440 --> 00:22:29,840
it allows an efficient unknown phase

538
00:22:29,840 --> 00:22:31,840
with the help of authenticated beaver

539
00:22:31,840 --> 00:22:34,320
triples

540
00:22:34,559 --> 00:22:37,760
then we review the techniques in ccxy18

541
00:22:37,760 --> 00:22:39,919
which allows to efficiently prepare the

542
00:22:39,919 --> 00:22:43,039
batch viewer triples

543
00:22:43,440 --> 00:22:45,520
to connect these two parts

544
00:22:45,520 --> 00:22:47,520
we use shamier shear rings to properly

545
00:22:47,520 --> 00:22:49,679
define the mag part in the authenticated

546
00:22:49,679 --> 00:22:51,120
shear rooms

547
00:22:51,120 --> 00:22:52,960
then they show that all parties can

548
00:22:52,960 --> 00:22:56,080
locally unpack each batch zero triple to

549
00:22:56,080 --> 00:23:00,000
k authenticated beaver triples

550
00:23:01,360 --> 00:23:04,480
thus our construction works as follows

551
00:23:04,480 --> 00:23:06,559
in the preparation phase all parties

552
00:23:06,559 --> 00:23:08,400
prepare batch viewer triples using

553
00:23:08,400 --> 00:23:11,679
techniques in ccx18

554
00:23:11,679 --> 00:23:14,240
then all parties use our technique of

555
00:23:14,240 --> 00:23:16,480
hidden additive secret sharing to

556
00:23:16,480 --> 00:23:18,559
locally transform each batch builder

557
00:23:18,559 --> 00:23:22,640
triple to k authenticated beaver triples

558
00:23:22,640 --> 00:23:25,520
here our syndicated shear ring of x

559
00:23:25,520 --> 00:23:28,159
consists of an additive shearing of x

560
00:23:28,159 --> 00:23:30,240
and a chemical shear ring which serves

561
00:23:30,240 --> 00:23:32,960
as the mag

562
00:23:33,600 --> 00:23:36,159
finally in the ulnar phase our parties

563
00:23:36,159 --> 00:23:38,400
locally evaluate addition gates

564
00:23:38,400 --> 00:23:40,400
interactively evaluate multiplication

565
00:23:40,400 --> 00:23:42,720
gates with the help of authenticated

566
00:23:42,720 --> 00:23:44,799
beaver triples

567
00:23:44,799 --> 00:23:47,360
at the end of the evaluation all parties

568
00:23:47,360 --> 00:23:48,880
use chemical shield rings in

569
00:23:48,880 --> 00:23:51,200
authenticated sharings to check the

570
00:23:51,200 --> 00:23:54,799
correctness of the computation

571
00:23:55,760 --> 00:23:57,520
more details about the verification

572
00:23:57,520 --> 00:23:59,600
protocol and the whole protocol can be

573
00:23:59,600 --> 00:24:02,400
found in our paper as a result we

574
00:24:02,400 --> 00:24:04,559
achieve the communication complexity of

575
00:24:04,559 --> 00:24:07,279
order of n bits per gate for a single

576
00:24:07,279 --> 00:24:09,279
boolean circuit in the standardized

577
00:24:09,279 --> 00:24:11,279
majority setting

578
00:24:11,279 --> 00:24:14,520
thank you

