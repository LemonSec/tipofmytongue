1
00:00:02,560 --> 00:00:04,960
everyone uh in this talk we are going to

2
00:00:04,960 --> 00:00:08,559
look at a very uh classical topic in

3
00:00:08,559 --> 00:00:10,400
cryptography namely

4
00:00:10,400 --> 00:00:14,960
that of security of password hashing

5
00:00:14,960 --> 00:00:17,440
algorithms in the uh presence of

6
00:00:17,440 --> 00:00:19,279
pre-processing attacks

7
00:00:19,279 --> 00:00:21,520
uh my name is priya farshem and this is

8
00:00:21,520 --> 00:00:24,480
joint work with uh stefan attisaro from

9
00:00:24,480 --> 00:00:27,279
university of washington

10
00:00:27,279 --> 00:00:28,800
so passwords

11
00:00:28,800 --> 00:00:31,279
are one of the most commonly used

12
00:00:31,279 --> 00:00:33,360
authentication mechanisms in

13
00:00:33,360 --> 00:00:34,800
cryptography

14
00:00:34,800 --> 00:00:38,079
and security and typically we would use

15
00:00:38,079 --> 00:00:40,480
a hash of a password in place of the

16
00:00:40,480 --> 00:00:43,840
password itself for authentication

17
00:00:43,840 --> 00:00:45,280
this is to

18
00:00:45,280 --> 00:00:46,800
provide some

19
00:00:46,800 --> 00:00:50,399
form of resilience against for example

20
00:00:50,399 --> 00:00:52,320
leakage of a database of password

21
00:00:52,320 --> 00:00:54,480
passwords where you would get to see the

22
00:00:54,480 --> 00:00:56,840
hash of passwords but not the passwords

23
00:00:56,840 --> 00:00:59,680
themselves in fact sometimes we even go

24
00:00:59,680 --> 00:01:00,960
beyond this

25
00:01:00,960 --> 00:01:03,199
and we use hash of password

26
00:01:03,199 --> 00:01:05,840
as a secret key in some application for

27
00:01:05,840 --> 00:01:08,080
example we might drive a secret key from

28
00:01:08,080 --> 00:01:10,320
a password and then use it to encrypt

29
00:01:10,320 --> 00:01:13,200
data

30
00:01:13,200 --> 00:01:15,920
the setting that we are considering here

31
00:01:15,920 --> 00:01:17,439
is one where

32
00:01:17,439 --> 00:01:20,560
an attacker is interested in

33
00:01:20,560 --> 00:01:22,720
attacking multiple

34
00:01:22,720 --> 00:01:24,880
users and

35
00:01:24,880 --> 00:01:28,400
it is not targeting any particular user

36
00:01:28,400 --> 00:01:30,960
but uh is basically trying to compromise

37
00:01:30,960 --> 00:01:33,600
as many users as

38
00:01:33,600 --> 00:01:34,799
it can

39
00:01:34,799 --> 00:01:37,360
and in doing this it may

40
00:01:37,360 --> 00:01:38,159
use

41
00:01:38,159 --> 00:01:40,479
pre-processing techniques such as use of

42
00:01:40,479 --> 00:01:43,840
rainbow tables to speed up its attack

43
00:01:43,840 --> 00:01:46,960
and typically in such settings the hash

44
00:01:46,960 --> 00:01:48,720
function is actually assumed to be

45
00:01:48,720 --> 00:01:50,320
secure

46
00:01:50,320 --> 00:01:52,799
in the sense that it behaves like a

47
00:01:52,799 --> 00:01:55,520
random oracle and what the adversary

48
00:01:55,520 --> 00:01:57,920
tries to do is to exploit the low

49
00:01:57,920 --> 00:02:02,560
entropy of human generated passwords

50
00:02:03,439 --> 00:02:05,360
the conventional wisdom here is that

51
00:02:05,360 --> 00:02:07,759
instead of hash of passwords we actually

52
00:02:07,759 --> 00:02:10,160
are going to store salted hashes of

53
00:02:10,160 --> 00:02:12,879
password that is we have some public

54
00:02:12,879 --> 00:02:14,959
land randomness as

55
00:02:14,959 --> 00:02:16,400
salt

56
00:02:16,400 --> 00:02:17,760
and we are going to

57
00:02:17,760 --> 00:02:19,360
hash this salt together with the

58
00:02:19,360 --> 00:02:22,800
password and store this in our database

59
00:02:22,800 --> 00:02:23,410
and uh

60
00:02:23,410 --> 00:02:25,280
[Music]

61
00:02:25,280 --> 00:02:27,360
the uh

62
00:02:27,360 --> 00:02:29,360
the general

63
00:02:29,360 --> 00:02:31,280
idea is that this sorting will defeat

64
00:02:31,280 --> 00:02:32,879
pre-processing

65
00:02:32,879 --> 00:02:34,000
because

66
00:02:34,000 --> 00:02:37,120
if you for example have distinct souls

67
00:02:37,120 --> 00:02:39,280
uh the distinct souls here will actually

68
00:02:39,280 --> 00:02:41,920
result in a domain separation of this

69
00:02:41,920 --> 00:02:43,440
hash function

70
00:02:43,440 --> 00:02:45,760
which means that basically a separate

71
00:02:45,760 --> 00:02:48,080
effort will be needed

72
00:02:48,080 --> 00:02:51,440
for cracking each password

73
00:02:51,440 --> 00:02:52,879
and uh

74
00:02:52,879 --> 00:02:55,120
in fact if these passwords these these

75
00:02:55,120 --> 00:02:57,440
salts are also unpredictable

76
00:02:57,440 --> 00:03:00,560
uh uh actually we are going to defeat

77
00:03:00,560 --> 00:03:02,159
preprocessing

78
00:03:02,159 --> 00:03:05,360
because uh essentially the hash function

79
00:03:05,360 --> 00:03:07,840
that you're going to use in uh hashing

80
00:03:07,840 --> 00:03:09,519
the password is going to be

81
00:03:09,519 --> 00:03:11,920
unpredictable because we don't know this

82
00:03:11,920 --> 00:03:13,920
salt part of the

83
00:03:13,920 --> 00:03:15,440
hash function

84
00:03:15,440 --> 00:03:18,959
so one goal of this talk is to formalize

85
00:03:18,959 --> 00:03:22,159
this conventional wisdom

86
00:03:23,040 --> 00:03:27,200
so there are two lines of related works

87
00:03:27,200 --> 00:03:28,319
here

88
00:03:28,319 --> 00:03:30,159
one is a long series of works on

89
00:03:30,159 --> 00:03:32,400
pre-processing starting with the work of

90
00:03:32,400 --> 00:03:35,200
general and travison in 2000

91
00:03:35,200 --> 00:03:38,720
and then a work of under from 2007

92
00:03:38,720 --> 00:03:40,640
which looked at random oracles with

93
00:03:40,640 --> 00:03:42,640
auxiliary input

94
00:03:42,640 --> 00:03:44,640
going to the work of their travis san

95
00:03:44,640 --> 00:03:46,080
andreas

96
00:03:46,080 --> 00:03:49,280
and then a number of work by dodecital

97
00:03:49,280 --> 00:03:51,760
which develops techniques in proving

98
00:03:51,760 --> 00:03:53,760
security uh in the presence of

99
00:03:53,760 --> 00:03:55,760
pre-processing

100
00:03:55,760 --> 00:03:58,000
in this talk we are particularly going

101
00:03:58,000 --> 00:04:01,439
to rely on a work by uh

102
00:04:01,439 --> 00:04:03,920
coretti dodesco and steinberger from

103
00:04:03,920 --> 00:04:05,360
2018

104
00:04:05,360 --> 00:04:08,000
which introduced the technique of bit

105
00:04:08,000 --> 00:04:09,840
fixing random oracle

106
00:04:09,840 --> 00:04:11,120
to

107
00:04:11,120 --> 00:04:12,799
prove results in the pre-processing

108
00:04:12,799 --> 00:04:14,400
model

109
00:04:14,400 --> 00:04:16,478
another important work here is that of

110
00:04:16,478 --> 00:04:19,839
belario wrist and part and desiro

111
00:04:19,839 --> 00:04:21,000
from crypto

112
00:04:21,000 --> 00:04:24,080
2012 that they where they highlighted

113
00:04:24,080 --> 00:04:26,400
the need for multi-instance security in

114
00:04:26,400 --> 00:04:29,680
password-based crypto

115
00:04:29,680 --> 00:04:31,120
let's look at these two settings in a

116
00:04:31,120 --> 00:04:33,199
little bit more detail

117
00:04:33,199 --> 00:04:35,199
so here is the pre-processing setting

118
00:04:35,199 --> 00:04:36,880
where the adversary

119
00:04:36,880 --> 00:04:39,919
a0 which is the pre-processing adversary

120
00:04:39,919 --> 00:04:42,560
gets the random oracle fully the full

121
00:04:42,560 --> 00:04:44,880
table of the random oracle and outputs

122
00:04:44,880 --> 00:04:48,720
some auxiliary information sigma

123
00:04:48,720 --> 00:04:50,400
and then in the unlined phase of the

124
00:04:50,400 --> 00:04:51,520
attack

125
00:04:51,520 --> 00:04:54,880
a1 is going to run with sigma

126
00:04:54,880 --> 00:04:56,800
and the hash function

127
00:04:56,800 --> 00:04:58,400
in the game

128
00:04:58,400 --> 00:05:00,800
to win some security game so this is a

129
00:05:00,800 --> 00:05:03,039
general template to upgrade

130
00:05:03,039 --> 00:05:06,160
notions of security from uh

131
00:05:06,160 --> 00:05:07,840
setting without

132
00:05:07,840 --> 00:05:09,120
pre-processing to one with

133
00:05:09,120 --> 00:05:12,880
pre-processing in idealized models

134
00:05:14,000 --> 00:05:15,919
what about multi-instance security in

135
00:05:15,919 --> 00:05:19,120
the multi-instance setting

136
00:05:19,120 --> 00:05:21,199
the adversary for example gets a bunch

137
00:05:21,199 --> 00:05:23,039
of passwords hasher password one to

138
00:05:23,039 --> 00:05:25,199
azure password m

139
00:05:25,199 --> 00:05:28,240
and its goal is to recover all of these

140
00:05:28,240 --> 00:05:30,560
passwords

141
00:05:30,560 --> 00:05:32,320
so note that the setting is somewhat

142
00:05:32,320 --> 00:05:34,880
different from multi-user security where

143
00:05:34,880 --> 00:05:38,240
you would again get a bunch of passwords

144
00:05:38,240 --> 00:05:40,400
but your goal is to recover only one of

145
00:05:40,400 --> 00:05:41,840
them

146
00:05:41,840 --> 00:05:44,000
so here we are interested in recovering

147
00:05:44,000 --> 00:05:45,280
all of them

148
00:05:45,280 --> 00:05:47,840
because we are interested in adversaries

149
00:05:47,840 --> 00:05:51,120
that are trying to uh

150
00:05:51,120 --> 00:05:53,680
recover passwords of as many users as

151
00:05:53,680 --> 00:05:56,080
they can

152
00:05:57,919 --> 00:06:00,240
okay uh

153
00:06:00,240 --> 00:06:01,680
so uh

154
00:06:01,680 --> 00:06:04,000
the perspective here is that

155
00:06:04,000 --> 00:06:07,759
in such a multi-uh instance setting

156
00:06:07,759 --> 00:06:08,479
the

157
00:06:08,479 --> 00:06:10,479
ideally the effort that the adversary

158
00:06:10,479 --> 00:06:14,080
needs to put to compromise m passwords

159
00:06:14,080 --> 00:06:18,080
should scan linearly with m

160
00:06:18,639 --> 00:06:20,639
in this setting however where we have

161
00:06:20,639 --> 00:06:22,800
not used salts

162
00:06:22,800 --> 00:06:25,600
one can see that the uh adversarial

163
00:06:25,600 --> 00:06:28,400
advantage is actually bounded below by t

164
00:06:28,400 --> 00:06:29,680
over n

165
00:06:29,680 --> 00:06:30,639
where

166
00:06:30,639 --> 00:06:33,120
n is the uh let's say the size of the

167
00:06:33,120 --> 00:06:34,960
domain where these passwords are taken

168
00:06:34,960 --> 00:06:37,840
from and t is the number of queries that

169
00:06:37,840 --> 00:06:41,199
the adversary makes to the random oracle

170
00:06:41,199 --> 00:06:43,759
in fact you can see this as an adversary

171
00:06:43,759 --> 00:06:45,680
which makes t queries to this hash

172
00:06:45,680 --> 00:06:46,720
function

173
00:06:46,720 --> 00:06:49,599
is going to recover the ice password

174
00:06:49,599 --> 00:06:52,240
with probability t over n

175
00:06:52,240 --> 00:06:53,919
for each

176
00:06:53,919 --> 00:06:55,440
single instance

177
00:06:55,440 --> 00:06:58,400
and then essentially these uh games are

178
00:06:58,400 --> 00:06:59,759
independent

179
00:06:59,759 --> 00:07:01,360
so the problem is that you're going to

180
00:07:01,360 --> 00:07:05,759
recover all of them is t over n to the m

181
00:07:06,800 --> 00:07:08,960
so if you think about a pass

182
00:07:08,960 --> 00:07:10,560
and an address three which actually

183
00:07:10,560 --> 00:07:12,400
queries all of the domain

184
00:07:12,400 --> 00:07:14,160
where t equals n

185
00:07:14,160 --> 00:07:15,759
then you can see that the advocacy can

186
00:07:15,759 --> 00:07:17,919
actually recover all of the passwords so

187
00:07:17,919 --> 00:07:19,440
put differently

188
00:07:19,440 --> 00:07:22,960
if you have t over n over m is roughly

189
00:07:22,960 --> 00:07:24,240
equal to one

190
00:07:24,240 --> 00:07:27,919
then we get that t is roughly equal to n

191
00:07:27,919 --> 00:07:29,520
and as you see here

192
00:07:29,520 --> 00:07:32,080
the time required by the adversary is

193
00:07:32,080 --> 00:07:34,639
not scaring at all with m the number of

194
00:07:34,639 --> 00:07:37,039
users

195
00:07:37,039 --> 00:07:39,919
now if you come if you come to the uh

196
00:07:39,919 --> 00:07:42,880
salted setting where we are using salts

197
00:07:42,880 --> 00:07:44,479
to hash passwords

198
00:07:44,479 --> 00:07:46,240
we do actually get

199
00:07:46,240 --> 00:07:47,440
bound to that

200
00:07:47,440 --> 00:07:49,599
scales with them

201
00:07:49,599 --> 00:07:53,360
at least for certain adversaries

202
00:07:53,360 --> 00:07:55,440
so here we have an uh you can consider

203
00:07:55,440 --> 00:07:57,280
an adversary which has a budget of t

204
00:07:57,280 --> 00:07:58,400
queries

205
00:07:58,400 --> 00:08:01,840
and then it distributes them

206
00:08:01,840 --> 00:08:04,400
over all these m different uh hashed

207
00:08:04,400 --> 00:08:06,000
keys

208
00:08:06,000 --> 00:08:07,520
with different salts

209
00:08:07,520 --> 00:08:09,759
and then tries to guess the password

210
00:08:09,759 --> 00:08:12,560
using the budget of t over m queries per

211
00:08:12,560 --> 00:08:14,000
salt

212
00:08:14,000 --> 00:08:17,599
and then we will get a bound like this

213
00:08:17,599 --> 00:08:19,840
so now if you do a calculation like

214
00:08:19,840 --> 00:08:22,400
before if you set this roughly equal to

215
00:08:22,400 --> 00:08:24,800
one then we will get that t is roughly

216
00:08:24,800 --> 00:08:27,039
equal to m times n

217
00:08:27,039 --> 00:08:29,759
and here you see that the time required

218
00:08:29,759 --> 00:08:32,799
by the atmosphere is the scaling

219
00:08:32,799 --> 00:08:35,519
linearly in f

220
00:08:35,519 --> 00:08:37,120
so one of the contributions of this

221
00:08:37,120 --> 00:08:39,760
paper is actually prove also upper

222
00:08:39,760 --> 00:08:44,159
bounds on the adversarial advantage

223
00:08:46,160 --> 00:08:49,120
okay so as i mentioned the goal of this

224
00:08:49,120 --> 00:08:51,839
paper is to

225
00:08:51,839 --> 00:08:53,360
understand

226
00:08:53,360 --> 00:08:55,200
password hashing in the presence of

227
00:08:55,200 --> 00:08:57,440
multiple instances and

228
00:08:57,440 --> 00:08:59,360
pre-processing effort

229
00:08:59,360 --> 00:09:01,519
and put together we have these two

230
00:09:01,519 --> 00:09:03,600
settings and we are actually combining

231
00:09:03,600 --> 00:09:07,640
them in this work

232
00:09:08,080 --> 00:09:10,640
so in this work we are going to consider

233
00:09:10,640 --> 00:09:12,320
three different notions

234
00:09:12,320 --> 00:09:14,320
there are three different settings

235
00:09:14,320 --> 00:09:16,720
uh one is the setting without salts and

236
00:09:16,720 --> 00:09:18,320
distinct souls

237
00:09:18,320 --> 00:09:20,560
these are interesting from a historical

238
00:09:20,560 --> 00:09:22,320
point of view and also a more

239
00:09:22,320 --> 00:09:24,000
theoretical point of view related to

240
00:09:24,000 --> 00:09:25,680
amplification

241
00:09:25,680 --> 00:09:28,160
but also uh we are going to look at

242
00:09:28,160 --> 00:09:30,399
random salts and this is the setting

243
00:09:30,399 --> 00:09:32,720
which is most relevant to practice but

244
00:09:32,720 --> 00:09:34,399
is also of course

245
00:09:34,399 --> 00:09:36,240
interesting from a theoretical point of

246
00:09:36,240 --> 00:09:38,320
view

247
00:09:38,800 --> 00:09:40,800
so to gain some uh

248
00:09:40,800 --> 00:09:42,560
intuition towards this problem let's

249
00:09:42,560 --> 00:09:45,839
look at the multi-instance uh

250
00:09:45,839 --> 00:09:47,839
extension of the hellman's space-time

251
00:09:47,839 --> 00:09:49,040
trade-off

252
00:09:49,040 --> 00:09:51,839
algorithm so here we have a permutation

253
00:09:51,839 --> 00:09:52,800
pi

254
00:09:52,800 --> 00:09:56,240
and we create a graph a functional graph

255
00:09:56,240 --> 00:09:59,120
where we start with some from some point

256
00:09:59,120 --> 00:10:01,040
and then we repeatedly apply the

257
00:10:01,040 --> 00:10:02,720
permutation

258
00:10:02,720 --> 00:10:04,959
and let's assume for now

259
00:10:04,959 --> 00:10:05,760
uh

260
00:10:05,760 --> 00:10:06,959
that

261
00:10:06,959 --> 00:10:10,240
this permutation this permutation has

262
00:10:10,240 --> 00:10:11,839
one cycle in the sense that this

263
00:10:11,839 --> 00:10:13,200
permutation

264
00:10:13,200 --> 00:10:14,959
this functional graph basically covers

265
00:10:14,959 --> 00:10:17,680
the old domain of the permutation

266
00:10:17,680 --> 00:10:19,920
so this is the this is the graph that we

267
00:10:19,920 --> 00:10:21,040
built

268
00:10:21,040 --> 00:10:24,240
and what we do next is that we take s

269
00:10:24,240 --> 00:10:25,360
points

270
00:10:25,360 --> 00:10:26,959
on this

271
00:10:26,959 --> 00:10:29,680
graph which are of distance n over s

272
00:10:29,680 --> 00:10:31,040
apart

273
00:10:31,040 --> 00:10:33,920
and for each of them we store a point

274
00:10:33,920 --> 00:10:37,440
we store we form a pointer to t over n

275
00:10:37,440 --> 00:10:40,399
steps behind

276
00:10:40,959 --> 00:10:43,920
okay so these are pointers to t over m

277
00:10:43,920 --> 00:10:45,360
stand behinds

278
00:10:45,360 --> 00:10:47,600
this means that if i have a

279
00:10:47,600 --> 00:10:49,920
point say this red point here that i

280
00:10:49,920 --> 00:10:51,839
want to recover

281
00:10:51,839 --> 00:10:53,839
if this red point happens to be in this

282
00:10:53,839 --> 00:10:56,399
segment all i need to do is to start

283
00:10:56,399 --> 00:10:58,720
applying the permutation here

284
00:10:58,720 --> 00:11:00,640
get to this point

285
00:11:00,640 --> 00:11:03,760
chase the pointer back

286
00:11:03,760 --> 00:11:06,000
apply the permutation further

287
00:11:06,000 --> 00:11:08,160
and stop right before i get to this

288
00:11:08,160 --> 00:11:09,920
point and then i have recovered the

289
00:11:09,920 --> 00:11:11,519
pre-image

290
00:11:11,519 --> 00:11:13,120
so what's the probability that this

291
00:11:13,120 --> 00:11:16,160
point ends up being in the segment

292
00:11:16,160 --> 00:11:18,480
well the length of the segment is t over

293
00:11:18,480 --> 00:11:19,360
n

294
00:11:19,360 --> 00:11:22,399
the length of this segment is n over s

295
00:11:22,399 --> 00:11:24,240
so this is the probability that one of

296
00:11:24,240 --> 00:11:26,000
them ends up being there so the

297
00:11:26,000 --> 00:11:27,839
probability that all of them ends up

298
00:11:27,839 --> 00:11:29,519
being there is

299
00:11:29,519 --> 00:11:32,240
is s t over m n

300
00:11:32,240 --> 00:11:35,200
to the power of m

301
00:11:35,279 --> 00:11:38,560
so uh keep that bound in mind uh when we

302
00:11:38,560 --> 00:11:43,079
come to our security balance later

303
00:11:43,680 --> 00:11:46,240
so to get any form of security in

304
00:11:46,240 --> 00:11:48,480
password-based cryptography we actually

305
00:11:48,480 --> 00:11:49,839
need to have

306
00:11:49,839 --> 00:11:52,560
passwords which are unguessable

307
00:11:52,560 --> 00:11:54,880
and for this we actually need some form

308
00:11:54,880 --> 00:11:58,160
of measure of unusability for passwords

309
00:11:58,160 --> 00:12:00,480
and brt

310
00:12:00,480 --> 00:12:02,399
formulated such a notion

311
00:12:02,399 --> 00:12:04,480
they considered a setting an

312
00:12:04,480 --> 00:12:06,800
unguessability password where passwords

313
00:12:06,800 --> 00:12:08,839
are generated vector passwords are

314
00:12:08,839 --> 00:12:11,519
generated together perhaps with some

315
00:12:11,519 --> 00:12:14,079
leakage information z

316
00:12:14,079 --> 00:12:16,880
and then the adversary is run with a

317
00:12:16,880 --> 00:12:19,040
test oracle and a corrupt oracle where

318
00:12:19,040 --> 00:12:21,519
the corrupt oracle will simply return

319
00:12:21,519 --> 00:12:24,880
the ite password in on query i

320
00:12:24,880 --> 00:12:27,200
and the test oracle

321
00:12:27,200 --> 00:12:28,880
gets a guess

322
00:12:28,880 --> 00:12:31,519
password from the adversary and an index

323
00:12:31,519 --> 00:12:34,079
i and checks whether this password

324
00:12:34,079 --> 00:12:36,839
matches the id

325
00:12:36,839 --> 00:12:39,440
passwords the goal of the adversary here

326
00:12:39,440 --> 00:12:42,079
is to actually win all of these

327
00:12:42,079 --> 00:12:44,240
instances that has set all of these

328
00:12:44,240 --> 00:12:47,519
flags to be true

329
00:12:47,519 --> 00:12:50,880
and we measure uh the advantage here

330
00:12:50,880 --> 00:12:52,959
by considering the maximal advantage of

331
00:12:52,959 --> 00:12:57,119
an adversary of any adversary industry

332
00:12:58,800 --> 00:13:00,480
now how does this relate to the known

333
00:13:00,480 --> 00:13:03,680
notions of unusability for distributions

334
00:13:03,680 --> 00:13:05,600
actually if you consider a setting where

335
00:13:05,600 --> 00:13:07,200
you have n

336
00:13:07,200 --> 00:13:08,240
guesses

337
00:13:08,240 --> 00:13:10,160
m is the number of passwords in the

338
00:13:10,160 --> 00:13:11,839
system that's the number of passwords

339
00:13:11,839 --> 00:13:13,360
added by t

340
00:13:13,360 --> 00:13:15,519
and it's not too hard to see that this

341
00:13:15,519 --> 00:13:18,000
measure is actually

342
00:13:18,000 --> 00:13:21,200
related to the i mean entropy of the

343
00:13:21,200 --> 00:13:23,040
password or in this case average and

344
00:13:23,040 --> 00:13:26,160
entropy of the passwords

345
00:13:26,639 --> 00:13:28,560
the case with corruptions

346
00:13:28,560 --> 00:13:31,040
is a little more complicated and there

347
00:13:31,040 --> 00:13:33,440
doesn't seem to be a notion in

348
00:13:33,440 --> 00:13:34,399
information

349
00:13:34,399 --> 00:13:37,839
theory that captures this nicely

350
00:13:37,839 --> 00:13:39,760
so for that purpose we are actually

351
00:13:39,760 --> 00:13:41,199
going to look at the case where the

352
00:13:41,199 --> 00:13:43,519
atmosphere does c queries and does n

353
00:13:43,519 --> 00:13:45,360
minus c

354
00:13:45,360 --> 00:13:46,959
test

355
00:13:46,959 --> 00:13:49,279
uh queries so c corruptions m minus c

356
00:13:49,279 --> 00:13:50,399
guesses

357
00:13:50,399 --> 00:13:53,199
as uh our basic measure uh vendor or

358
00:13:53,199 --> 00:13:55,760
corruptions

359
00:13:56,720 --> 00:13:59,839
so our first uh

360
00:14:00,320 --> 00:14:03,199
theorem is a theorem that relates

361
00:14:03,199 --> 00:14:05,519
uh the unusability of passwords when the

362
00:14:05,519 --> 00:14:07,600
adversary has t queries

363
00:14:07,600 --> 00:14:09,519
to the to this basic measure that we

364
00:14:09,519 --> 00:14:11,760
have

365
00:14:11,839 --> 00:14:14,079
and uh

366
00:14:14,079 --> 00:14:17,199
the actual uh proof for this is uh

367
00:14:17,199 --> 00:14:19,120
not too complicated

368
00:14:19,120 --> 00:14:22,240
suppose that i have an advocacy here

369
00:14:22,240 --> 00:14:23,920
and uh

370
00:14:23,920 --> 00:14:25,600
i want to convert it to an atmosphere

371
00:14:25,600 --> 00:14:27,680
here which can only make m minus c

372
00:14:27,680 --> 00:14:30,639
queries the way i'm going to do this

373
00:14:30,639 --> 00:14:33,600
is that i'm actually going to uh guess

374
00:14:33,600 --> 00:14:36,480
which of these uh m minus c queries out

375
00:14:36,480 --> 00:14:38,959
of the t queries that the adversary

376
00:14:38,959 --> 00:14:40,720
makes to the test oracle are going to

377
00:14:40,720 --> 00:14:42,240
return true

378
00:14:42,240 --> 00:14:44,079
i either going to be the correct uh

379
00:14:44,079 --> 00:14:45,360
guesses

380
00:14:45,360 --> 00:14:48,959
i'll guess that uh that set of indices

381
00:14:48,959 --> 00:14:52,880
uh i will uh relate these uh so these uh

382
00:14:52,880 --> 00:14:55,680
these queries are then relayed to the uh

383
00:14:55,680 --> 00:14:58,399
oracle that the adversary gets in this

384
00:14:58,399 --> 00:15:02,000
game with m minus c test queries

385
00:15:02,000 --> 00:15:04,160
the rest of the queries are and answered

386
00:15:04,160 --> 00:15:06,800
with f the bottom with false

387
00:15:06,800 --> 00:15:08,560
and the corruption queries are also

388
00:15:08,560 --> 00:15:10,800
relate so the c corruption queries are

389
00:15:10,800 --> 00:15:12,880
related to

390
00:15:12,880 --> 00:15:14,959
the adversary's oracle here the

391
00:15:14,959 --> 00:15:17,279
adversary the address is corrupt oracle

392
00:15:17,279 --> 00:15:18,880
here

393
00:15:18,880 --> 00:15:21,839
so if i have guessed this set of m minus

394
00:15:21,839 --> 00:15:24,320
c indices out of t correctly

395
00:15:24,320 --> 00:15:26,399
then this reduction is perfect

396
00:15:26,399 --> 00:15:29,360
and whenever this address remains here

397
00:15:29,360 --> 00:15:31,199
this address right here with only m

398
00:15:31,199 --> 00:15:33,279
minus c queries to the test or

399
00:15:33,279 --> 00:15:36,079
covariance here

400
00:15:39,120 --> 00:15:41,600
this argument this uh rather simple

401
00:15:41,600 --> 00:15:43,360
argument actually resolved an open

402
00:15:43,360 --> 00:15:45,519
question left in brt

403
00:15:45,519 --> 00:15:47,680
where the author actually considered the

404
00:15:47,680 --> 00:15:48,720
setting

405
00:15:48,720 --> 00:15:50,959
where there is a bound ti

406
00:15:50,959 --> 00:15:54,480
uh a priori bound ti for each eye

407
00:15:54,480 --> 00:15:56,800
and this is a somewhat important

408
00:15:56,800 --> 00:15:59,279
restriction in the sense that actually

409
00:15:59,279 --> 00:16:02,320
an adversary in practice could actually

410
00:16:02,320 --> 00:16:04,160
adapt the number of queries that it is

411
00:16:04,160 --> 00:16:06,959
making as it makes progress in different

412
00:16:06,959 --> 00:16:09,839
instances

413
00:16:11,440 --> 00:16:13,839
okay so far we have looked at

414
00:16:13,839 --> 00:16:16,959
the unguessability of passwords and how

415
00:16:16,959 --> 00:16:18,800
it relates to our basic basic measures

416
00:16:18,800 --> 00:16:21,279
of unguessability and next we are going

417
00:16:21,279 --> 00:16:23,360
to actually look at uh

418
00:16:23,360 --> 00:16:27,199
hashed and salted passwords

419
00:16:27,440 --> 00:16:30,160
so for this let me start with a notion

420
00:16:30,160 --> 00:16:32,560
of security for unrecoverability of

421
00:16:32,560 --> 00:16:35,519
passwords in the auxiliary input random

422
00:16:35,519 --> 00:16:37,839
oracle model

423
00:16:37,839 --> 00:16:40,720
so this is a game which goes like this

424
00:16:40,720 --> 00:16:42,800
a random oracle is chosen from some

425
00:16:42,800 --> 00:16:44,240
domain and range

426
00:16:44,240 --> 00:16:46,079
then the adversary is given the full

427
00:16:46,079 --> 00:16:48,560
code of the random oracle and output

428
00:16:48,560 --> 00:16:51,839
some pre-processing information sigma

429
00:16:51,839 --> 00:16:54,959
this is as in the preprocessing template

430
00:16:54,959 --> 00:16:57,920
then the passwords are picked

431
00:16:57,920 --> 00:17:01,040
and then we generate uh salts

432
00:17:01,040 --> 00:17:03,279
so there could be

433
00:17:03,279 --> 00:17:06,480
multiple source per password so m is the

434
00:17:06,480 --> 00:17:07,679
instance

435
00:17:07,679 --> 00:17:10,079
count and l is the number of

436
00:17:10,079 --> 00:17:12,959
let's say sessions per user

437
00:17:12,959 --> 00:17:16,160
so you have l passwords per user

438
00:17:16,160 --> 00:17:19,760
then the ith password is uh is

439
00:17:19,760 --> 00:17:22,240
is hashed together with these salts

440
00:17:22,240 --> 00:17:24,240
and the keys are computed

441
00:17:24,240 --> 00:17:26,720
and the adversary is now provided

442
00:17:26,720 --> 00:17:29,600
with the keys the salts the sigma the

443
00:17:29,600 --> 00:17:31,200
auxiliary information related to the

444
00:17:31,200 --> 00:17:32,400
random oracle

445
00:17:32,400 --> 00:17:34,400
and z which is some leakage information

446
00:17:34,400 --> 00:17:36,559
and passwords and its goal is to guess

447
00:17:36,559 --> 00:17:38,640
the whole vector of passwords

448
00:17:38,640 --> 00:17:40,320
and while the adversary is doing it

449
00:17:40,320 --> 00:17:42,160
doing this of course it has access to

450
00:17:42,160 --> 00:17:45,120
the random oracle h as well as a corrupt

451
00:17:45,120 --> 00:17:47,679
query where it can corrupt users and get

452
00:17:47,679 --> 00:17:49,600
their passwords

453
00:17:49,600 --> 00:17:51,520
so this is a very natural notion of

454
00:17:51,520 --> 00:17:53,520
honorability of passwords in the

455
00:17:53,520 --> 00:17:57,280
auxiliary input model

456
00:17:58,160 --> 00:18:00,880
so actually to analyze this uh analyze

457
00:18:00,880 --> 00:18:02,880
such games in the auxiliary input random

458
00:18:02,880 --> 00:18:04,880
oracle model uh there are a number of

459
00:18:04,880 --> 00:18:07,039
techniques uh one of them is the

460
00:18:07,039 --> 00:18:09,200
compression technique uh which has been

461
00:18:09,200 --> 00:18:11,440
uh used successfully in various forms

462
00:18:11,440 --> 00:18:13,039
before

463
00:18:13,039 --> 00:18:15,280
and here we are actually going to

464
00:18:15,280 --> 00:18:18,000
look at the uh a different technique

465
00:18:18,000 --> 00:18:20,320
knows known as the pre-sampling or the

466
00:18:20,320 --> 00:18:22,320
bit fixing random oracle

467
00:18:22,320 --> 00:18:23,440
technique

468
00:18:23,440 --> 00:18:26,240
where instead of a

469
00:18:26,240 --> 00:18:28,400
pre-processing information that depends

470
00:18:28,400 --> 00:18:30,240
on the random oracle you're going to

471
00:18:30,240 --> 00:18:32,320
concern adversary which outputs

472
00:18:32,320 --> 00:18:34,000
pre-processing information which is

473
00:18:34,000 --> 00:18:36,160
independent of the random oracle

474
00:18:36,160 --> 00:18:39,440
but instead it gets to uh

475
00:18:39,440 --> 00:18:42,720
output a list of pre-assignments l

476
00:18:42,720 --> 00:18:44,240
which contained

477
00:18:44,240 --> 00:18:47,520
entries of the form point x i maps to y

478
00:18:47,520 --> 00:18:49,280
i

479
00:18:49,280 --> 00:18:51,360
and what we are going to do then in the

480
00:18:51,360 --> 00:18:53,120
online phase of the game

481
00:18:53,120 --> 00:18:55,679
is that we are going to run the game

482
00:18:55,679 --> 00:18:58,400
with respect to a random oracle

483
00:18:58,400 --> 00:19:00,320
which is random everywhere

484
00:19:00,320 --> 00:19:02,640
except for points in l

485
00:19:02,640 --> 00:19:05,840
there uh it should be compatible with

486
00:19:05,840 --> 00:19:08,640
the assignments in l

487
00:19:08,640 --> 00:19:10,960
so that is the bit fixing random oracle

488
00:19:10,960 --> 00:19:12,799
model

489
00:19:12,799 --> 00:19:16,720
and uh karetti dodescore and steinberger

490
00:19:16,720 --> 00:19:20,480
uh in 2018 uh proved that if you have

491
00:19:20,480 --> 00:19:22,880
bounds in the bit fixing uh random

492
00:19:22,880 --> 00:19:25,520
oracle model then you can actually drive

493
00:19:25,520 --> 00:19:27,440
bounds in the auxiliary and put random

494
00:19:27,440 --> 00:19:29,840
oracle

495
00:19:30,240 --> 00:19:32,559
model

496
00:19:32,960 --> 00:19:34,320
so

497
00:19:34,320 --> 00:19:37,200
what we do in the paper we apply this

498
00:19:37,200 --> 00:19:41,039
technique and we derive a uh

499
00:19:41,039 --> 00:19:43,039
unrecoverability band in the bit fixing

500
00:19:43,039 --> 00:19:44,880
random oracle model for the case where

501
00:19:44,880 --> 00:19:46,799
the kdf function is the random oracle

502
00:19:46,799 --> 00:19:47,840
itself

503
00:19:47,840 --> 00:19:50,000
salts are uniform in k

504
00:19:50,000 --> 00:19:53,039
there are possibly l instances uh of

505
00:19:53,039 --> 00:19:54,799
salts per password

506
00:19:54,799 --> 00:19:56,640
and we have a password sampler which

507
00:19:56,640 --> 00:19:58,240
outputs m

508
00:19:58,240 --> 00:20:01,200
uh and passwords

509
00:20:01,200 --> 00:20:04,480
i won't go into uh this found here but

510
00:20:04,480 --> 00:20:07,440
in a second i will come to the uh

511
00:20:07,440 --> 00:20:11,280
to what this band actually means

512
00:20:11,520 --> 00:20:13,600
so in the paper we also derived bounds

513
00:20:13,600 --> 00:20:16,640
for uh other cases where we have a

514
00:20:16,640 --> 00:20:19,440
general soft generation algorithm not

515
00:20:19,440 --> 00:20:21,280
uniform one

516
00:20:21,280 --> 00:20:23,840
and i refer you to the paper uh to check

517
00:20:23,840 --> 00:20:26,720
those theorems out

518
00:20:27,679 --> 00:20:29,919
so what are our main bounds

519
00:20:29,919 --> 00:20:33,440
so uh we have six main bounds

520
00:20:33,440 --> 00:20:34,559
[Music]

521
00:20:34,559 --> 00:20:36,559
corresponding to the cases where we have

522
00:20:36,559 --> 00:20:37,760
no salts

523
00:20:37,760 --> 00:20:40,559
we have possibly known distinct salts

524
00:20:40,559 --> 00:20:42,640
and uniform salts

525
00:20:42,640 --> 00:20:44,480
and we have the case where there is no

526
00:20:44,480 --> 00:20:49,200
processing so s was the uh

527
00:20:49,200 --> 00:20:51,760
the bit length of the preprocessing

528
00:20:51,760 --> 00:20:53,919
information sigma

529
00:20:53,919 --> 00:20:55,600
or we have some large amount of

530
00:20:55,600 --> 00:20:57,840
preprocessing

531
00:20:57,840 --> 00:21:00,559
so let's look at these bounds one by one

532
00:21:00,559 --> 00:21:03,039
so for the case where we have no salts

533
00:21:03,039 --> 00:21:05,200
and no pre-processing we get a bound of

534
00:21:05,200 --> 00:21:08,559
the form t to the n over m

535
00:21:08,559 --> 00:21:11,679
recall that this matches the bound

536
00:21:11,679 --> 00:21:14,320
we had earlier on the lower bound on the

537
00:21:14,320 --> 00:21:15,520
adversarial

538
00:21:15,520 --> 00:21:17,360
advantage that we had

539
00:21:17,360 --> 00:21:20,640
earlier this is an upper bound

540
00:21:20,640 --> 00:21:23,120
for the case with distinct sound salts

541
00:21:23,120 --> 00:21:24,880
we get an upper bound which is of the

542
00:21:24,880 --> 00:21:27,600
form t over m with an m in the

543
00:21:27,600 --> 00:21:30,600
denominator

544
00:21:30,640 --> 00:21:34,000
showing that the adversarial effort

545
00:21:34,000 --> 00:21:34,960
will

546
00:21:34,960 --> 00:21:38,000
scale uh linearly in m as long as salts

547
00:21:38,000 --> 00:21:39,679
are distinct

548
00:21:39,679 --> 00:21:42,159
and for the uniform case we also get a

549
00:21:42,159 --> 00:21:44,460
similar bound

550
00:21:44,460 --> 00:21:45,520
[Music]

551
00:21:45,520 --> 00:21:49,360
for example if l over k is a small

552
00:21:49,360 --> 00:21:50,400
because the

553
00:21:50,400 --> 00:21:52,000
k the

554
00:21:52,000 --> 00:21:54,880
size of the salt space is large

555
00:21:54,880 --> 00:21:57,520
we actually get a similar bound

556
00:21:57,520 --> 00:21:59,520
so let's look at the case with the

557
00:21:59,520 --> 00:22:01,440
pre-processing which is the focus of the

558
00:22:01,440 --> 00:22:02,559
work

559
00:22:02,559 --> 00:22:05,200
so in this case we get an upper bound so

560
00:22:05,200 --> 00:22:06,720
with the case with nozzles we get an

561
00:22:06,720 --> 00:22:09,520
upper bound of the form st over mn

562
00:22:09,520 --> 00:22:11,120
note that this matches the

563
00:22:11,120 --> 00:22:13,360
multi-instance hellman

564
00:22:13,360 --> 00:22:14,799
algorithm

565
00:22:14,799 --> 00:22:16,799
that we had

566
00:22:16,799 --> 00:22:18,799
for the known distinct salt case we get

567
00:22:18,799 --> 00:22:21,280
a bound of this form with the n squared

568
00:22:21,280 --> 00:22:24,320
in the denominator

569
00:22:24,320 --> 00:22:26,480
what this is basically saying is that in

570
00:22:26,480 --> 00:22:28,640
order to match this found here for

571
00:22:28,640 --> 00:22:31,120
multi-instance helmet that we had

572
00:22:31,120 --> 00:22:33,440
we for example have to do

573
00:22:33,440 --> 00:22:36,320
m times as much preprocessing one for

574
00:22:36,320 --> 00:22:37,600
each salt

575
00:22:37,600 --> 00:22:40,640
so if s is replaced with ns because we

576
00:22:40,640 --> 00:22:42,880
are increasing our preprocessing effort

577
00:22:42,880 --> 00:22:44,720
then the m's will cancel out and get

578
00:22:44,720 --> 00:22:46,480
this

579
00:22:46,480 --> 00:22:48,799
so most uh

580
00:22:48,799 --> 00:22:50,799
the most relevant bound for practice

581
00:22:50,799 --> 00:22:54,640
that we have is the bound over here

582
00:22:54,640 --> 00:22:56,400
about

583
00:22:56,400 --> 00:22:57,840
the case with lead proposed

584
00:22:57,840 --> 00:23:00,400
preprocessing and uniform salts

585
00:23:00,400 --> 00:23:02,640
so in this part if you see

586
00:23:02,640 --> 00:23:04,960
we have a term which is independent of s

587
00:23:04,960 --> 00:23:07,440
and the term which is dependent on s

588
00:23:07,440 --> 00:23:09,679
and this term is multiplied by a value

589
00:23:09,679 --> 00:23:11,840
which is ml over k

590
00:23:11,840 --> 00:23:12,960
and if

591
00:23:12,960 --> 00:23:16,080
the result of salted space is big

592
00:23:16,080 --> 00:23:17,039
then

593
00:23:17,039 --> 00:23:17,840
this

594
00:23:17,840 --> 00:23:20,320
this term is basically negligible

595
00:23:20,320 --> 00:23:22,159
and we fall back to a setting where we

596
00:23:22,159 --> 00:23:24,000
have t over m n

597
00:23:24,000 --> 00:23:24,880
uh

598
00:23:24,880 --> 00:23:26,960
meaning that the adversarial effort

599
00:23:26,960 --> 00:23:29,360
scales linearly with n and second

600
00:23:29,360 --> 00:23:31,440
preprocessing is defeated there is no

601
00:23:31,440 --> 00:23:34,480
dependency on s

602
00:23:35,679 --> 00:23:37,840
so in the paper uh let me just briefly

603
00:23:37,840 --> 00:23:39,039
mention that we also look at a

604
00:23:39,039 --> 00:23:42,000
composable notion of kdf security with

605
00:23:42,000 --> 00:23:44,559
auxiliary information this is following

606
00:23:44,559 --> 00:23:46,400
the work of delora wrist impart and

607
00:23:46,400 --> 00:23:48,480
cesaro

608
00:23:48,480 --> 00:23:49,360
and

609
00:23:49,360 --> 00:23:51,200
we proven appropriate composition

610
00:23:51,200 --> 00:23:52,159
theorem

611
00:23:52,159 --> 00:23:55,440
for this uh notion in the sense that uh

612
00:23:55,440 --> 00:23:57,279
uh security in a multi-instance

613
00:23:57,279 --> 00:23:59,679
environment with auxiliary input is

614
00:23:59,679 --> 00:24:01,840
upper bounded by uh

615
00:24:01,840 --> 00:24:03,760
uh the this uh

616
00:24:03,760 --> 00:24:05,840
the advantage in this kdf game with

617
00:24:05,840 --> 00:24:07,360
aussie input

618
00:24:07,360 --> 00:24:09,600
uh plus the advantage in the guessing

619
00:24:09,600 --> 00:24:13,120
game in a multi-instance guessing game

620
00:24:13,120 --> 00:24:16,240
and plus advantage in a single instance

621
00:24:16,240 --> 00:24:19,039
of the game with a random

622
00:24:19,039 --> 00:24:21,039
with random keys

623
00:24:21,039 --> 00:24:25,279
so here we don't have a multi-instance

624
00:24:25,600 --> 00:24:28,000
term only a single instance term and

625
00:24:28,000 --> 00:24:29,840
this is of no concern because the keys

626
00:24:29,840 --> 00:24:31,760
here are random and this

627
00:24:31,760 --> 00:24:33,520
this

628
00:24:33,520 --> 00:24:35,840
transistor i should mention that if one

629
00:24:35,840 --> 00:24:37,520
is looking at a

630
00:24:37,520 --> 00:24:38,880
look at this from a theoretical

631
00:24:38,880 --> 00:24:40,159
perspective

632
00:24:40,159 --> 00:24:41,679
one may want to

633
00:24:41,679 --> 00:24:46,279
drive even sharper than this

634
00:24:46,960 --> 00:24:48,080
and

635
00:24:48,080 --> 00:24:50,799
in the paper we look at the uh

636
00:24:50,799 --> 00:24:53,279
security of a iterated hash function

637
00:24:53,279 --> 00:24:55,039
where we take a hash function and we

638
00:24:55,039 --> 00:24:58,559
iterated r times and we derive a uh

639
00:24:58,559 --> 00:25:01,600
bfjdf found for this and the bit fixing

640
00:25:01,600 --> 00:25:03,840
random oracle model and then we apply

641
00:25:03,840 --> 00:25:07,360
the cdgs machinery and optimize for p to

642
00:25:07,360 --> 00:25:10,000
get a bound in the auxiliary input

643
00:25:10,000 --> 00:25:12,320
setting

644
00:25:13,039 --> 00:25:18,039
so that concludes my talk

