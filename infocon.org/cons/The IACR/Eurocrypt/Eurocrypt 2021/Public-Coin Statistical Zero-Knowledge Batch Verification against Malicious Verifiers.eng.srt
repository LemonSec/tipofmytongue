1
00:00:00,080 --> 00:00:01,839
hey everyone today i'm going to talk

2
00:00:01,839 --> 00:00:03,600
about public coin statistical zero

3
00:00:03,600 --> 00:00:05,279
knowledge but verification against

4
00:00:05,279 --> 00:00:07,919
malicious verifiers it is a joint work

5
00:00:07,919 --> 00:00:09,920
with ron rottenbloom and prashant

6
00:00:09,920 --> 00:00:12,080
student

7
00:00:12,080 --> 00:00:13,759
so as you all probably know zero

8
00:00:13,759 --> 00:00:16,400
knowledge proofs are an amazing idea a

9
00:00:16,400 --> 00:00:18,240
journalist proof lets approve her to

10
00:00:18,240 --> 00:00:20,400
convince a verifier of the validity of

11
00:00:20,400 --> 00:00:22,480
some statement without revealing any

12
00:00:22,480 --> 00:00:24,480
additional information

13
00:00:24,480 --> 00:00:26,640
in this talk we focus on statistical

14
00:00:26,640 --> 00:00:28,560
zero knowledge for which both the zero

15
00:00:28,560 --> 00:00:30,000
knowledge and the soundness are

16
00:00:30,000 --> 00:00:33,120
information theoretic

17
00:00:33,120 --> 00:00:34,719
so a protocol is statistical zero

18
00:00:34,719 --> 00:00:36,559
knowledge if it has the usual

19
00:00:36,559 --> 00:00:38,719
completeness and soundness properties

20
00:00:38,719 --> 00:00:41,200
where the sound is also against

21
00:00:41,200 --> 00:00:43,680
an unbounded prover

22
00:00:43,680 --> 00:00:45,920
the zero knowledge requirement is that

23
00:00:45,920 --> 00:00:49,039
for every polytime verifier there exists

24
00:00:49,039 --> 00:00:51,360
a polytime simulator such that the

25
00:00:51,360 --> 00:00:53,920
output of the simulator on some yes

26
00:00:53,920 --> 00:00:55,199
instance

27
00:00:55,199 --> 00:00:58,800
is distributed really closely to the

28
00:00:58,800 --> 00:01:01,199
distribution of the messages being sent

29
00:01:01,199 --> 00:01:05,120
by the approver and the verifier

30
00:01:05,519 --> 00:01:07,280
now let's say that

31
00:01:07,280 --> 00:01:09,280
the verifier wants to check that k

32
00:01:09,280 --> 00:01:11,280
different statements are all true

33
00:01:11,280 --> 00:01:13,760
meaning to accept if all the statements

34
00:01:13,760 --> 00:01:16,320
are yes instances and to reject if at

35
00:01:16,320 --> 00:01:18,400
least one of the instances is no

36
00:01:18,400 --> 00:01:21,200
instance the naive solution is just to

37
00:01:21,200 --> 00:01:24,720
perform the basic protocol k times one

38
00:01:24,720 --> 00:01:27,280
time for each instance

39
00:01:27,280 --> 00:01:29,840
let's say that verifying one instance

40
00:01:29,840 --> 00:01:32,960
takes m communication bits

41
00:01:32,960 --> 00:01:35,360
so the native solution will take m times

42
00:01:35,360 --> 00:01:38,159
k communication bits the question is if

43
00:01:38,159 --> 00:01:41,720
we can do better

44
00:01:42,479 --> 00:01:44,320
so let's discuss

45
00:01:44,320 --> 00:01:46,479
few prior works

46
00:01:46,479 --> 00:01:49,200
so using the ip equals p space theorem

47
00:01:49,200 --> 00:01:51,759
we can actually show batching for every

48
00:01:51,759 --> 00:01:55,360
problem in ip however with inefficient

49
00:01:55,360 --> 00:01:57,200
prover

50
00:01:57,200 --> 00:01:59,439
the line of work of rotten blue rotor

51
00:01:59,439 --> 00:02:02,079
bloom and rain gold show batching for up

52
00:02:02,079 --> 00:02:04,399
which is the surface of np with

53
00:02:04,399 --> 00:02:07,759
communication of poly m low k where m is

54
00:02:07,759 --> 00:02:09,598
the witness length

55
00:02:09,598 --> 00:02:12,480
the special property about

56
00:02:12,480 --> 00:02:14,560
this protocol is that the prover is

57
00:02:14,560 --> 00:02:16,080
efficient

58
00:02:16,080 --> 00:02:18,879
and there is also another line of works

59
00:02:18,879 --> 00:02:21,520
showing batching

60
00:02:21,520 --> 00:02:24,400
computational soundness however some

61
00:02:24,400 --> 00:02:27,520
undercrypt assumptions

62
00:02:27,520 --> 00:02:29,599
end with really small communication

63
00:02:29,599 --> 00:02:32,319
complexity

64
00:02:33,040 --> 00:02:35,599
so our main question is suppose that

65
00:02:35,599 --> 00:02:39,280
some problem is is in sdk can we verify

66
00:02:39,280 --> 00:02:42,239
that k instances are all yes instances

67
00:02:42,239 --> 00:02:44,480
in zero knowledge and with no trivial

68
00:02:44,480 --> 00:02:45,920
communication

69
00:02:45,920 --> 00:02:48,000
we think it is a natural problem and it

70
00:02:48,000 --> 00:02:50,879
can also be used for batch verification

71
00:02:50,879 --> 00:02:54,720
of signatures and public use

72
00:02:54,720 --> 00:02:57,920
in previous work with ron pershunt and

73
00:02:57,920 --> 00:03:00,480
also with gary rottenblum and adam

74
00:03:00,480 --> 00:03:02,800
silfont we showed that

75
00:03:02,800 --> 00:03:06,159
every problem that is in nisdk

76
00:03:06,159 --> 00:03:08,319
is a knowledge verifier sdk batch

77
00:03:08,319 --> 00:03:11,360
verification protocol with k plus polyen

78
00:03:11,360 --> 00:03:12,959
communication

79
00:03:12,959 --> 00:03:15,360
however it was left open if we can get a

80
00:03:15,360 --> 00:03:19,280
protocol also again malicious verifier

81
00:03:19,280 --> 00:03:21,760
so our main result is that every problem

82
00:03:21,760 --> 00:03:24,799
in nisdk has a public coin statistical

83
00:03:24,799 --> 00:03:26,959
zero knowledge but verification protocol

84
00:03:26,959 --> 00:03:30,640
with k plus poly and communication

85
00:03:30,640 --> 00:03:33,760
so we improved their previous results in

86
00:03:33,760 --> 00:03:36,799
two ways the first we show a protocol

87
00:03:36,799 --> 00:03:39,519
that is also against malicious verifier

88
00:03:39,519 --> 00:03:42,000
and secondly we show the protocol that

89
00:03:42,000 --> 00:03:44,640
is public coin

90
00:03:44,640 --> 00:03:46,640
let's recall the non-interactive

91
00:03:46,640 --> 00:03:49,920
statistical zero knowledge model

92
00:03:49,920 --> 00:03:54,159
so in this model we have a crs a shared

93
00:03:54,159 --> 00:03:57,040
uniform string that both the program and

94
00:03:57,040 --> 00:03:58,879
the verifier gets at the beginning of

95
00:03:58,879 --> 00:04:00,480
the protocol

96
00:04:00,480 --> 00:04:03,439
then the proverb based on this crs and

97
00:04:03,439 --> 00:04:05,439
on the yes instance

98
00:04:05,439 --> 00:04:07,599
generates a proof

99
00:04:07,599 --> 00:04:10,879
and pi and send it to the verifier and

100
00:04:10,879 --> 00:04:13,599
then they verify based on this

101
00:04:13,599 --> 00:04:16,320
proof and the crs and the instance

102
00:04:16,320 --> 00:04:18,560
decides if to accept

103
00:04:18,560 --> 00:04:21,839
or to reject

104
00:04:22,320 --> 00:04:23,520
so

105
00:04:23,520 --> 00:04:27,120
we showed our result in two steps

106
00:04:27,120 --> 00:04:29,120
in the first step we show the public or

107
00:04:29,120 --> 00:04:30,639
knowledge verify statistical zero

108
00:04:30,639 --> 00:04:32,560
knowledge batch verification protocol

109
00:04:32,560 --> 00:04:35,600
which is also nice in some particular

110
00:04:35,600 --> 00:04:38,800
sense we will soon discuss

111
00:04:38,800 --> 00:04:40,880
in the second step we show that for

112
00:04:40,880 --> 00:04:43,840
every such nice protocol there is a

113
00:04:43,840 --> 00:04:45,919
efficient transformation from public

114
00:04:45,919 --> 00:04:47,840
coin on its verify statistical zero

115
00:04:47,840 --> 00:04:50,479
knowledge to public on statistical zero

116
00:04:50,479 --> 00:04:52,880
knowledge

117
00:04:53,280 --> 00:04:55,360
so let's start with the warm up the

118
00:04:55,360 --> 00:04:59,280
input is length preserving circuits

119
00:04:59,280 --> 00:05:02,479
the s-cases are circuits that define a

120
00:05:02,479 --> 00:05:05,680
permutation and the null cases would be

121
00:05:05,680 --> 00:05:07,520
circuits that are far from being

122
00:05:07,520 --> 00:05:10,160
permutation in the sense that every

123
00:05:10,160 --> 00:05:14,639
image has at least two pre images

124
00:05:14,639 --> 00:05:17,120
so the way we think about k instances of

125
00:05:17,120 --> 00:05:20,320
this problem is as a composition

126
00:05:20,320 --> 00:05:22,880
so let's go over the public coins on

127
00:05:22,880 --> 00:05:24,320
this very first statistical zero

128
00:05:24,320 --> 00:05:26,720
knowledge batching protocol

129
00:05:26,720 --> 00:05:29,360
first the very first sample sum y k and

130
00:05:29,360 --> 00:05:32,160
sends it to the prover

131
00:05:32,160 --> 00:05:35,520
then the prover calculates some x1 such

132
00:05:35,520 --> 00:05:37,199
that the composition of the circuit on

133
00:05:37,199 --> 00:05:40,880
this x1 equals to this yk

134
00:05:40,880 --> 00:05:45,199
and send this x1 to the verifier

135
00:05:45,199 --> 00:05:47,919
the verifier checks that indeed this yk

136
00:05:47,919 --> 00:05:48,880
is the

137
00:05:48,880 --> 00:05:50,479
output of the composition of the

138
00:05:50,479 --> 00:05:53,759
circuits on x1 and accept or reject

139
00:05:53,759 --> 00:05:55,360
accordingly

140
00:05:55,360 --> 00:05:57,840
so let's consider the yes cases all the

141
00:05:57,840 --> 00:06:00,240
circuits are permutations and

142
00:06:00,240 --> 00:06:03,120
permutations are invertible

143
00:06:03,120 --> 00:06:05,919
so because production on an invertible

144
00:06:05,919 --> 00:06:09,120
this x1 must be exist and the prover can

145
00:06:09,120 --> 00:06:10,639
send it

146
00:06:10,639 --> 00:06:12,800
for zero knowledge consider the

147
00:06:12,800 --> 00:06:15,759
simulator that first sample x1 and then

148
00:06:15,759 --> 00:06:17,600
compute the composition of the circuits

149
00:06:17,600 --> 00:06:19,280
on this x1

150
00:06:19,280 --> 00:06:22,000
since all the circuits are permutations

151
00:06:22,000 --> 00:06:25,280
this yk is distributed uniformly as in

152
00:06:25,280 --> 00:06:27,120
the real interaction between the honest

153
00:06:27,120 --> 00:06:29,520
verifier and the prover and therefore we

154
00:06:29,520 --> 00:06:32,799
get the zero knowledge

155
00:06:33,680 --> 00:06:37,600
so let's continue to denote cases

156
00:06:37,600 --> 00:06:40,000
in this case let's consider the last no

157
00:06:40,000 --> 00:06:43,360
instance so let's assume c i is the last

158
00:06:43,360 --> 00:06:44,800
no instance

159
00:06:44,800 --> 00:06:47,199
meaning that c i plus 1

160
00:06:47,199 --> 00:06:50,000
to ck are all yes instances and

161
00:06:50,000 --> 00:06:52,960
therefore permutations

162
00:06:52,960 --> 00:06:55,759
okay so since the circuit ck is a

163
00:06:55,759 --> 00:07:00,160
permutation and y k is uniform then x k

164
00:07:00,160 --> 00:07:03,280
is also uniform we can continue with

165
00:07:03,280 --> 00:07:06,240
argument from c k down to

166
00:07:06,240 --> 00:07:10,080
c i plus 1 and therefore y i

167
00:07:10,080 --> 00:07:12,160
is also uniform

168
00:07:12,160 --> 00:07:14,000
but now let's take a closer look at the

169
00:07:14,000 --> 00:07:17,840
circle c i which is the nose instance

170
00:07:17,840 --> 00:07:20,160
since it's a no instance every image in

171
00:07:20,160 --> 00:07:23,599
ci has at least two pre-images

172
00:07:23,599 --> 00:07:26,400
that means that the image size of ci is

173
00:07:26,400 --> 00:07:31,280
of size at most two to the n minus 1

174
00:07:31,280 --> 00:07:33,039
and the probability that

175
00:07:33,039 --> 00:07:36,400
y i has no pre images

176
00:07:36,400 --> 00:07:38,639
is at least half

177
00:07:38,639 --> 00:07:41,520
in this case it doesn't matter which

178
00:07:41,520 --> 00:07:45,039
x1 the proverb would send it just won't

179
00:07:45,039 --> 00:07:47,840
yield this y i since it doesn't have pre

180
00:07:47,840 --> 00:07:50,639
images in the circuit ci

181
00:07:50,639 --> 00:07:54,800
and therefore the verifier would reject

182
00:07:55,520 --> 00:07:57,520
so now let's consider the approximate

183
00:07:57,520 --> 00:07:59,520
injectivity problem

184
00:07:59,520 --> 00:08:02,160
so in this problem the input

185
00:08:02,160 --> 00:08:03,840
is a circuit

186
00:08:03,840 --> 00:08:07,759
from input size n to output size m

187
00:08:07,759 --> 00:08:11,599
and we think of m as the poly of n

188
00:08:11,599 --> 00:08:14,160
so for the us cases all the delta

189
00:08:14,160 --> 00:08:16,000
fraction of the inputs are mapped

190
00:08:16,000 --> 00:08:18,160
injectively by c

191
00:08:18,160 --> 00:08:20,720
so for the one minus delta fraction of

192
00:08:20,720 --> 00:08:22,800
the input they are mapped injectively

193
00:08:22,800 --> 00:08:25,039
and for the delta fraction we can't

194
00:08:25,039 --> 00:08:27,280
really tell anything and

195
00:08:27,280 --> 00:08:30,080
it may also be the case where all the

196
00:08:30,080 --> 00:08:31,840
inputs in the

197
00:08:31,840 --> 00:08:33,679
delta fraction are mapped to the same

198
00:08:33,679 --> 00:08:35,200
image

199
00:08:35,200 --> 00:08:37,360
and for the no cases

200
00:08:37,360 --> 00:08:39,279
at most that the fraction of the inputs

201
00:08:39,279 --> 00:08:42,000
are mapped injectively so

202
00:08:42,000 --> 00:08:44,320
for the one minus delta fraction of the

203
00:08:44,320 --> 00:08:45,920
inputs we know they are not mapped

204
00:08:45,920 --> 00:08:47,920
injectively meaning

205
00:08:47,920 --> 00:08:50,959
every free image has at least one other

206
00:08:50,959 --> 00:08:52,240
pre-image

207
00:08:52,240 --> 00:08:54,480
that is mapped to the same image

208
00:08:54,480 --> 00:08:56,880
and for the delta fraction again we

209
00:08:56,880 --> 00:09:00,080
can't tell anything

210
00:09:00,480 --> 00:09:02,800
it was shown that this problem

211
00:09:02,800 --> 00:09:06,160
is actually an isdk hard and therefore

212
00:09:06,160 --> 00:09:10,320
it is enough for us to show a public

213
00:09:10,320 --> 00:09:11,279
coin

214
00:09:11,279 --> 00:09:14,560
statistical zero noise protocol for this

215
00:09:14,560 --> 00:09:16,720
problem

216
00:09:16,720 --> 00:09:19,680
for the simplicity of this talk we focus

217
00:09:19,680 --> 00:09:20,880
on the case

218
00:09:20,880 --> 00:09:23,440
where delta equals zero

219
00:09:23,440 --> 00:09:24,480
um

220
00:09:24,480 --> 00:09:27,440
it is not known to be nick hart but it

221
00:09:27,440 --> 00:09:30,160
captures most of our main ideas

222
00:09:30,160 --> 00:09:32,959
so our goal is actually to distinguish

223
00:09:32,959 --> 00:09:35,040
circuits that are injected from those

224
00:09:35,040 --> 00:09:38,480
which every image has at least two pre

225
00:09:38,480 --> 00:09:40,320
images

226
00:09:40,320 --> 00:09:42,720
the difficulty here compared to our

227
00:09:42,720 --> 00:09:44,959
example is that the output size is not

228
00:09:44,959 --> 00:09:46,880
the same as the input size and therefore

229
00:09:46,880 --> 00:09:49,760
we cannot directly compose

230
00:09:49,760 --> 00:09:50,640
so

231
00:09:50,640 --> 00:09:53,440
we solve it by using a hash function

232
00:09:53,440 --> 00:09:55,440
that would map the

233
00:09:55,440 --> 00:09:58,720
ci's output size which is of size m to

234
00:09:58,720 --> 00:10:01,600
the next circuit input which is of size

235
00:10:01,600 --> 00:10:02,560
n

236
00:10:02,560 --> 00:10:04,240
notice that we have to hash the last

237
00:10:04,240 --> 00:10:06,240
circuit too

238
00:10:06,240 --> 00:10:09,279
so if this function was a perfectly

239
00:10:09,279 --> 00:10:11,760
injective on the set of images of each

240
00:10:11,760 --> 00:10:14,480
circuit to the next circuit input

241
00:10:14,480 --> 00:10:15,600
we were

242
00:10:15,600 --> 00:10:16,640
actually

243
00:10:16,640 --> 00:10:17,680
be done

244
00:10:17,680 --> 00:10:20,560
but it seems hard to construct this kind

245
00:10:20,560 --> 00:10:22,800
of a function

246
00:10:22,800 --> 00:10:24,959
so at the moment we think of g as a

247
00:10:24,959 --> 00:10:26,399
random function

248
00:10:26,399 --> 00:10:29,279
although we cannot really afford it

249
00:10:29,279 --> 00:10:31,519
by in the eventual protocol

250
00:10:31,519 --> 00:10:33,160
so we'll have to

251
00:10:33,160 --> 00:10:36,399
de-randomize it

252
00:10:36,560 --> 00:10:38,640
however we have few issues with this

253
00:10:38,640 --> 00:10:39,760
approach

254
00:10:39,760 --> 00:10:42,399
first let's consider as instance meaning

255
00:10:42,399 --> 00:10:45,200
all the circuits are yes instances they

256
00:10:45,200 --> 00:10:47,440
are injective

257
00:10:47,440 --> 00:10:48,560
um

258
00:10:48,560 --> 00:10:50,160
and let's take a look at the last

259
00:10:50,160 --> 00:10:51,839
circuit ck

260
00:10:51,839 --> 00:10:54,240
so ck maps x k

261
00:10:54,240 --> 00:10:58,800
2 y k which is then mapped to x k plus 1

262
00:10:58,800 --> 00:11:00,640
by g

263
00:11:00,640 --> 00:11:03,440
now let's take a look at the image size

264
00:11:03,440 --> 00:11:05,120
of ck

265
00:11:05,120 --> 00:11:09,600
although ck has output size of m it has

266
00:11:09,600 --> 00:11:11,519
an image size of

267
00:11:11,519 --> 00:11:13,360
only 2 to the n

268
00:11:13,360 --> 00:11:16,000
since its

269
00:11:16,000 --> 00:11:19,200
input sizes of size n and the ck is

270
00:11:19,200 --> 00:11:21,200
injective

271
00:11:21,200 --> 00:11:24,160
um and the point here is that we don't

272
00:11:24,160 --> 00:11:27,120
really care about the instances that are

273
00:11:27,120 --> 00:11:29,680
not in the image of ck

274
00:11:29,680 --> 00:11:31,920
so we don't care about the instances of

275
00:11:31,920 --> 00:11:32,720
a

276
00:11:32,720 --> 00:11:35,360
0 1 to m that are not in the

277
00:11:35,360 --> 00:11:36,959
image of ck

278
00:11:36,959 --> 00:11:38,800
and the reason for that is that they are

279
00:11:38,800 --> 00:11:40,880
not relevant for us they have no pre

280
00:11:40,880 --> 00:11:43,519
pre-images under ck and they cannot be

281
00:11:43,519 --> 00:11:47,200
used by the prover in this protocol

282
00:11:47,200 --> 00:11:48,880
so

283
00:11:48,880 --> 00:11:52,639
uh with this in mind let's think of g g

284
00:11:52,639 --> 00:11:54,880
m actually here

285
00:11:54,880 --> 00:11:58,639
um hashes two to the n instances

286
00:11:58,639 --> 00:12:01,680
relevant instances two two to the n

287
00:12:01,680 --> 00:12:03,200
i

288
00:12:03,200 --> 00:12:05,360
output instances

289
00:12:05,360 --> 00:12:08,959
and in this case a constant fraction

290
00:12:08,959 --> 00:12:11,920
of the output instances has no pre-image

291
00:12:11,920 --> 00:12:13,200
under g

292
00:12:13,200 --> 00:12:16,399
and therefore if the prover um

293
00:12:16,399 --> 00:12:18,959
select one of these

294
00:12:18,959 --> 00:12:21,440
instances it doesn't have free image

295
00:12:21,440 --> 00:12:23,440
under g and therefore

296
00:12:23,440 --> 00:12:25,600
the verifier won't be able

297
00:12:25,600 --> 00:12:29,839
to be satisfied and would reject

298
00:12:29,839 --> 00:12:30,959
so

299
00:12:30,959 --> 00:12:34,160
uh also let's take a look at

300
00:12:34,160 --> 00:12:36,959
this error is actually being accumulated

301
00:12:36,959 --> 00:12:38,480
across

302
00:12:38,480 --> 00:12:39,600
those k

303
00:12:39,600 --> 00:12:41,600
circuits

304
00:12:41,600 --> 00:12:44,160
and we cannot afford that so we don't

305
00:12:44,160 --> 00:12:47,360
have actually completeness here

306
00:12:47,360 --> 00:12:49,600
know that we cannot

307
00:12:49,600 --> 00:12:52,560
afford amplifying it

308
00:12:52,560 --> 00:12:54,800
in the sense of communication complexity

309
00:12:54,800 --> 00:12:58,720
and also in the sense of zero knowledge

310
00:12:58,720 --> 00:13:01,600
so the solution for that is to add short

311
00:13:01,600 --> 00:13:04,399
auxiliary input to g

312
00:13:04,399 --> 00:13:08,880
so we add some auxiliary input of a

313
00:13:08,880 --> 00:13:09,839
size

314
00:13:09,839 --> 00:13:11,680
poly logarithmic

315
00:13:11,680 --> 00:13:15,920
and then the g actually now would map

316
00:13:16,399 --> 00:13:17,680
the y's

317
00:13:17,680 --> 00:13:22,560
in and in addition there is some zi

318
00:13:23,279 --> 00:13:26,800
okay so as i said auxiliary input is of

319
00:13:26,800 --> 00:13:29,920
size poly logarithmic

320
00:13:29,920 --> 00:13:31,839
and this auxiliary input actually

321
00:13:31,839 --> 00:13:36,320
guarantees to us that each x i

322
00:13:36,320 --> 00:13:38,079
has roughly the same number of

323
00:13:38,079 --> 00:13:40,240
pre-images

324
00:13:40,240 --> 00:13:41,279
and this

325
00:13:41,279 --> 00:13:44,639
fact would also help us

326
00:13:44,639 --> 00:13:47,600
in the next analysis

327
00:13:47,600 --> 00:13:49,839
so this was the first issue now let's

328
00:13:49,839 --> 00:13:50,720
see

329
00:13:50,720 --> 00:13:52,639
another issue

330
00:13:52,639 --> 00:13:55,040
um

331
00:13:55,920 --> 00:13:58,320
what's happening here that constant

332
00:13:58,320 --> 00:14:01,440
fraction of the x i also have more than

333
00:14:01,440 --> 00:14:04,079
one pre-image under g more than one

334
00:14:04,079 --> 00:14:05,440
relevant

335
00:14:05,440 --> 00:14:08,079
uh pre-image energy

336
00:14:08,079 --> 00:14:11,040
so what's the issues here

337
00:14:11,040 --> 00:14:12,560
um since

338
00:14:12,560 --> 00:14:15,199
a constant fraction of the

339
00:14:15,199 --> 00:14:18,560
eyes has more than one pre images

340
00:14:18,560 --> 00:14:20,000
and

341
00:14:20,000 --> 00:14:21,920
let's assume that the first circuit is

342
00:14:21,920 --> 00:14:23,760
is a no circuit and the rest of the

343
00:14:23,760 --> 00:14:25,680
circuits are yes circuits

344
00:14:25,680 --> 00:14:27,920
so when you are coming to analyze the

345
00:14:27,920 --> 00:14:31,600
first circuit there are many many x2s

346
00:14:31,600 --> 00:14:33,600
that are consisted with the protocol

347
00:14:33,600 --> 00:14:36,160
meaning there is a path from them

348
00:14:36,160 --> 00:14:38,320
to the eventual

349
00:14:38,320 --> 00:14:41,199
x k plus one

350
00:14:41,199 --> 00:14:42,320
um

351
00:14:42,320 --> 00:14:45,839
so in this case it's really easy for the

352
00:14:45,839 --> 00:14:48,800
prover although it is an okay since

353
00:14:48,800 --> 00:14:51,839
there are many x2s to choose from

354
00:14:51,839 --> 00:14:53,519
the prover can

355
00:14:53,519 --> 00:14:55,360
with high probability

356
00:14:55,360 --> 00:14:59,279
um find some x1 that it will be mapped

357
00:14:59,279 --> 00:15:00,079
to

358
00:15:00,079 --> 00:15:04,160
ah to y i that then will be mapped to x2

359
00:15:04,160 --> 00:15:06,399
just because it has many pro

360
00:15:06,399 --> 00:15:08,480
options to choose from

361
00:15:08,480 --> 00:15:10,000
so this

362
00:15:10,000 --> 00:15:12,399
thing is even worse when we add the

363
00:15:12,399 --> 00:15:15,760
auxiliary input we just talked about

364
00:15:15,760 --> 00:15:18,399
so our solution for that would be to use

365
00:15:18,399 --> 00:15:20,079
interaction

366
00:15:20,079 --> 00:15:23,680
this interaction would ensure us that um

367
00:15:23,680 --> 00:15:26,800
when we process cs circuits in every

368
00:15:26,800 --> 00:15:30,079
iteration there is a unique x i

369
00:15:30,079 --> 00:15:32,959
that is consistent with the protocol

370
00:15:32,959 --> 00:15:35,199
so we do this commitment with pairwise

371
00:15:35,199 --> 00:15:37,279
independent hash functions

372
00:15:37,279 --> 00:15:39,600
so let's see what happens when we

373
00:15:39,600 --> 00:15:42,959
process the first node instance

374
00:15:42,959 --> 00:15:44,320
from the right

375
00:15:44,320 --> 00:15:47,600
and let's say it's at the ci circuit the

376
00:15:47,600 --> 00:15:50,480
first no instance from the right so when

377
00:15:50,480 --> 00:15:52,399
you get to the round i

378
00:15:52,399 --> 00:15:53,279
um

379
00:15:53,279 --> 00:15:56,639
we can actually assume that the x i plus

380
00:15:56,639 --> 00:15:57,519
1

381
00:15:57,519 --> 00:16:01,120
is the uniquely determined

382
00:16:01,279 --> 00:16:04,320
so let's see how we can use it so let's

383
00:16:04,320 --> 00:16:05,040
see

384
00:16:05,040 --> 00:16:06,079
the

385
00:16:06,079 --> 00:16:08,399
differences between the yes circuits and

386
00:16:08,399 --> 00:16:10,079
the no circuits

387
00:16:10,079 --> 00:16:11,519
um

388
00:16:11,519 --> 00:16:14,000
for the for ci that is a

389
00:16:14,000 --> 00:16:17,680
circuit meaning injective every image is

390
00:16:17,680 --> 00:16:20,399
exactly one pre-image so the image size

391
00:16:20,399 --> 00:16:22,399
of cis is

392
00:16:22,399 --> 00:16:24,320
um 2 to the n

393
00:16:24,320 --> 00:16:26,079
however when

394
00:16:26,079 --> 00:16:28,959
let's say ci is a no instance every

395
00:16:28,959 --> 00:16:31,279
image has at least two pre images so the

396
00:16:31,279 --> 00:16:34,240
image of ci is at most

397
00:16:34,240 --> 00:16:36,560
2 to the n minus 1.

398
00:16:36,560 --> 00:16:39,360
so now let's combine the auxiliary input

399
00:16:39,360 --> 00:16:41,920
which is of size d

400
00:16:41,920 --> 00:16:45,519
so if we have a yes circuit

401
00:16:45,519 --> 00:16:48,800
for each x i plus 1 we have about 2 to

402
00:16:48,800 --> 00:16:50,480
the d pairs

403
00:16:50,480 --> 00:16:55,040
a y i z i such that first of all g of y

404
00:16:55,040 --> 00:16:58,639
i z i is mapped to this x i plus one and

405
00:16:58,639 --> 00:17:02,959
also the y i is in the image of c i

406
00:17:02,959 --> 00:17:05,839
however for the no instances since the

407
00:17:05,839 --> 00:17:07,839
image is

408
00:17:07,839 --> 00:17:08,959
smaller

409
00:17:08,959 --> 00:17:12,319
we have a about two to the d minus one

410
00:17:12,319 --> 00:17:15,119
such pairs

411
00:17:15,119 --> 00:17:17,599
so now we can use a set lower bound to

412
00:17:17,599 --> 00:17:19,679
distinguish between the yes cases and

413
00:17:19,679 --> 00:17:21,119
the no cases

414
00:17:21,119 --> 00:17:23,199
and that's what we are doing

415
00:17:23,199 --> 00:17:24,880
now let's go back for the adding

416
00:17:24,880 --> 00:17:26,640
interaction part

417
00:17:26,640 --> 00:17:29,440
so some of you may might have noticed

418
00:17:29,440 --> 00:17:33,520
but we have a subtle issue here um and

419
00:17:33,520 --> 00:17:35,440
the issue is that the

420
00:17:35,440 --> 00:17:37,360
indeed approver

421
00:17:37,360 --> 00:17:40,400
commits to an xi in each round

422
00:17:40,400 --> 00:17:42,960
but she has the freedom to choose on

423
00:17:42,960 --> 00:17:46,320
which xi she commits to and therefore

424
00:17:46,320 --> 00:17:48,320
the prover can choose

425
00:17:48,320 --> 00:17:50,960
x i which would benefit her in the

426
00:17:50,960 --> 00:17:53,520
upcoming no circuits and therefore we

427
00:17:53,520 --> 00:17:56,400
cannot assume that the x i's are um

428
00:17:56,400 --> 00:17:59,600
random so in this talk we ignore

429
00:17:59,600 --> 00:18:01,840
this issue but please feel free to

430
00:18:01,840 --> 00:18:04,240
contact me if you're curious about the

431
00:18:04,240 --> 00:18:06,720
way we eventually solved it

432
00:18:06,720 --> 00:18:09,679
this concludes our public coin honest

433
00:18:09,679 --> 00:18:11,679
verifier statistical zero knowledge

434
00:18:11,679 --> 00:18:12,880
protocol

435
00:18:12,880 --> 00:18:16,000
however we still need to transform it to

436
00:18:16,000 --> 00:18:19,200
a protocol against malicious verifier

437
00:18:19,200 --> 00:18:22,160
so let's do it

438
00:18:23,200 --> 00:18:26,080
girl life sahai and vadhan show the

439
00:18:26,080 --> 00:18:28,960
transformation from public or nonspare

440
00:18:28,960 --> 00:18:30,160
sdk

441
00:18:30,160 --> 00:18:33,840
protocol to public on sdk protocol

442
00:18:33,840 --> 00:18:36,080
but this transformation is too expensive

443
00:18:36,080 --> 00:18:38,160
for us in terms of communication

444
00:18:38,160 --> 00:18:40,720
overhead

445
00:18:40,720 --> 00:18:43,360
so we modify this transformation to

446
00:18:43,360 --> 00:18:44,640
reduce this

447
00:18:44,640 --> 00:18:46,559
communication overhead this

448
00:18:46,559 --> 00:18:48,480
communication overhead

449
00:18:48,480 --> 00:18:49,600
actually

450
00:18:49,600 --> 00:18:51,679
was originated by

451
00:18:51,679 --> 00:18:54,480
um amplification of the underlying

452
00:18:54,480 --> 00:18:56,160
protocol

453
00:18:56,160 --> 00:18:58,880
k times to

454
00:18:58,880 --> 00:19:01,840
decrease the soundness

455
00:19:01,840 --> 00:19:02,640
so

456
00:19:02,640 --> 00:19:04,720
our transformation is actually

457
00:19:04,720 --> 00:19:07,919
applicable only if the protocol has

458
00:19:07,919 --> 00:19:08,880
um

459
00:19:08,880 --> 00:19:11,919
the property of round by round soundness

460
00:19:11,919 --> 00:19:15,919
introduced by canadia taro

461
00:19:16,000 --> 00:19:18,240
so we indeed show that

462
00:19:18,240 --> 00:19:21,120
our onus verify sdk

463
00:19:21,120 --> 00:19:23,919
batching protocol has this round by

464
00:19:23,919 --> 00:19:26,160
round property

465
00:19:26,160 --> 00:19:29,200
okay so let's summarize this talk in

466
00:19:29,200 --> 00:19:32,559
this talk we showed the basic ideas used

467
00:19:32,559 --> 00:19:34,480
to show

468
00:19:34,480 --> 00:19:38,000
our theorem that every problem in nsdk

469
00:19:38,000 --> 00:19:40,559
has a public coin sdk batch verification

470
00:19:40,559 --> 00:19:42,400
protocol with k plus poly and

471
00:19:42,400 --> 00:19:45,120
communication

472
00:19:45,120 --> 00:19:48,559
we have some open problems that we

473
00:19:48,559 --> 00:19:50,240
thought of

474
00:19:50,240 --> 00:19:52,799
first batch verification

475
00:19:52,799 --> 00:19:56,799
for all sdk not only for the subclass

476
00:19:56,799 --> 00:19:58,640
nizk

477
00:19:58,640 --> 00:20:01,440
second a poly logarithmic dependence on

478
00:20:01,440 --> 00:20:03,120
k

479
00:20:03,120 --> 00:20:05,360
next a constant number of rounds our

480
00:20:05,360 --> 00:20:08,799
protocol has a k iteration so it can be

481
00:20:08,799 --> 00:20:12,080
interesting to find a protocol that only

482
00:20:12,080 --> 00:20:15,120
takes number a constant number of rounds

483
00:20:15,120 --> 00:20:16,400
and lastly

484
00:20:16,400 --> 00:20:18,799
an efficient approval

485
00:20:18,799 --> 00:20:19,679
um

486
00:20:19,679 --> 00:20:20,480
so

487
00:20:20,480 --> 00:20:23,039
there is this work that showed that for

488
00:20:23,039 --> 00:20:25,760
some subset of sdk

489
00:20:25,760 --> 00:20:28,480
there is a protocol with

490
00:20:28,480 --> 00:20:30,159
an efficient prover

491
00:20:30,159 --> 00:20:31,120
um

492
00:20:31,120 --> 00:20:34,400
however we cannot really use this

493
00:20:34,400 --> 00:20:38,080
protocol because it has a

494
00:20:38,159 --> 00:20:40,960
polynomial overhead so

495
00:20:40,960 --> 00:20:43,360
we won't have

496
00:20:43,360 --> 00:20:45,520
this communication if you use this

497
00:20:45,520 --> 00:20:47,679
protocol

498
00:20:47,679 --> 00:20:49,520
okay so

499
00:20:49,520 --> 00:20:52,400
that that's it thank you everyone who

500
00:20:52,400 --> 00:20:53,600
listened

501
00:20:53,600 --> 00:20:56,559
and if you have any question please feel

502
00:20:56,559 --> 00:21:00,720
free to contact me

