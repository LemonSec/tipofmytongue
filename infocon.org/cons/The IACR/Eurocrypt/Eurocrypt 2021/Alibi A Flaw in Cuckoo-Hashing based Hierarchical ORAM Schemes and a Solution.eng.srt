1
00:00:00,960 --> 00:00:04,160
there once was a table of hashes that

2
00:00:04,160 --> 00:00:06,879
stored extra items in stashes

3
00:00:06,879 --> 00:00:09,599
it all seemed like bliss but things went

4
00:00:09,599 --> 00:00:10,559
amiss

5
00:00:10,559 --> 00:00:12,480
when the stashes were stored in the

6
00:00:12,480 --> 00:00:14,000
caches

7
00:00:14,000 --> 00:00:15,440
this is alibi

8
00:00:15,440 --> 00:00:17,680
a floor in cuckoo hashing based

9
00:00:17,680 --> 00:00:21,279
hierarchical oram and a solution

10
00:00:21,279 --> 00:00:24,000
i'm daniel noble presenting and this is

11
00:00:24,000 --> 00:00:26,160
a joint work with my advisor brett

12
00:00:26,160 --> 00:00:30,640
hemingway falk and rafael ostrovsky

13
00:00:30,640 --> 00:00:33,200
i shall now explain oblivious ram or

14
00:00:33,200 --> 00:00:36,399
o-ram and why it is so useful

15
00:00:36,399 --> 00:00:40,079
oblivious ram is a technique in which a

16
00:00:40,079 --> 00:00:42,079
client with a small amount of trusted

17
00:00:42,079 --> 00:00:43,600
memory

18
00:00:43,600 --> 00:00:44,480
can

19
00:00:44,480 --> 00:00:47,600
make use of a larger entity with a large

20
00:00:47,600 --> 00:00:50,559
amount of untrusted memory

21
00:00:50,559 --> 00:00:53,440
let's imagine the following scenario

22
00:00:53,440 --> 00:00:56,719
alice has photos lots of photos

23
00:00:56,719 --> 00:00:58,800
and she is no longer able to store these

24
00:00:58,800 --> 00:01:00,879
all on her local device

25
00:01:00,879 --> 00:01:03,039
she would therefore make like to make

26
00:01:03,039 --> 00:01:05,760
use of a cloud service provider

27
00:01:05,760 --> 00:01:08,000
however the cloud service provisor is

28
00:01:08,000 --> 00:01:10,560
not entirely transparent about what it

29
00:01:10,560 --> 00:01:13,520
does with alice's data

30
00:01:13,520 --> 00:01:16,000
furthermore if alice is

31
00:01:16,000 --> 00:01:18,479
a business that has access to sensitive

32
00:01:18,479 --> 00:01:22,240
data such as medical records

33
00:01:22,960 --> 00:01:25,759
putting these on a remote host might

34
00:01:25,759 --> 00:01:29,520
lead to disastrous consequences

35
00:01:30,159 --> 00:01:32,479
there are a few cryptographic primitives

36
00:01:32,479 --> 00:01:35,439
that alice could use to protect her data

37
00:01:35,439 --> 00:01:37,520
the most basic of these is to encrypt

38
00:01:37,520 --> 00:01:40,000
the data this will hide the content from

39
00:01:40,000 --> 00:01:42,240
the service provider but it will not be

40
00:01:42,240 --> 00:01:44,000
able to hide

41
00:01:44,000 --> 00:01:46,479
alice's access pattern her reads and her

42
00:01:46,479 --> 00:01:48,320
rights

43
00:01:48,320 --> 00:01:50,960
she can instead

44
00:01:50,960 --> 00:01:52,720
use a primitive called private

45
00:01:52,720 --> 00:01:54,399
information retrieval

46
00:01:54,399 --> 00:01:56,320
which is a protocol that she can engage

47
00:01:56,320 --> 00:01:58,640
in with the service provider in which

48
00:01:58,640 --> 00:02:00,640
she is allowed to

49
00:02:00,640 --> 00:02:02,320
learn

50
00:02:02,320 --> 00:02:04,000
read information from the database

51
00:02:04,000 --> 00:02:06,240
without the service provider learning

52
00:02:06,240 --> 00:02:09,919
what information she accessed

53
00:02:09,919 --> 00:02:13,280
lastly if she wants to protect both her

54
00:02:13,280 --> 00:02:15,280
reads and her rights

55
00:02:15,280 --> 00:02:18,160
she is able to use a primitive called

56
00:02:18,160 --> 00:02:22,440
oblivious ram or oram

57
00:02:23,120 --> 00:02:26,640
pir and oram by themselves do not

58
00:02:26,640 --> 00:02:28,560
protect the contents of the data they

59
00:02:28,560 --> 00:02:31,040
need to be combined with a secure

60
00:02:31,040 --> 00:02:34,080
encryption scheme in order to do so

61
00:02:34,080 --> 00:02:36,560
the most common application of oblivious

62
00:02:36,560 --> 00:02:38,720
ram is the one just described in which a

63
00:02:38,720 --> 00:02:39,680
client

64
00:02:39,680 --> 00:02:42,480
outsources memory to an untrusted

65
00:02:42,480 --> 00:02:44,480
service provider

66
00:02:44,480 --> 00:02:48,720
however this is not the only application

67
00:02:48,720 --> 00:02:50,959
the first oblivious ram

68
00:02:50,959 --> 00:02:52,480
protocol

69
00:02:52,480 --> 00:02:54,640
had in mind a different application that

70
00:02:54,640 --> 00:02:55,760
of

71
00:02:55,760 --> 00:02:58,000
a secure

72
00:02:58,000 --> 00:02:59,840
execution environment

73
00:02:59,840 --> 00:03:01,360
that

74
00:03:01,360 --> 00:03:05,680
needed to depend on an untrusted ram

75
00:03:05,680 --> 00:03:07,920
this actually is relevant in practice

76
00:03:07,920 --> 00:03:10,319
now that we have secure execution

77
00:03:10,319 --> 00:03:14,800
environments like intel sgx

78
00:03:14,800 --> 00:03:17,760
a trusted execution environment can

79
00:03:17,760 --> 00:03:21,120
use untrusted ram

80
00:03:21,120 --> 00:03:25,120
using an oblivious ram protocol

81
00:03:25,840 --> 00:03:28,159
a third application that is extremely

82
00:03:28,159 --> 00:03:29,280
important

83
00:03:29,280 --> 00:03:32,319
is secure computation

84
00:03:32,319 --> 00:03:34,959
secure computation allows

85
00:03:34,959 --> 00:03:36,799
a number of parties

86
00:03:36,799 --> 00:03:39,360
who have data split up between them to

87
00:03:39,360 --> 00:03:43,120
still be able to compute on that data

88
00:03:43,120 --> 00:03:46,000
if a piece of data is split up and each

89
00:03:46,000 --> 00:03:48,400
party knows which piece of data needs to

90
00:03:48,400 --> 00:03:49,760
be accessed

91
00:03:49,760 --> 00:03:51,920
then they can easily compute on that

92
00:03:51,920 --> 00:03:53,519
data

93
00:03:53,519 --> 00:03:54,560
however

94
00:03:54,560 --> 00:03:56,720
if the item

95
00:03:56,720 --> 00:04:00,239
the index of the item that is

96
00:04:00,239 --> 00:04:01,280
to be

97
00:04:01,280 --> 00:04:05,280
accessed is also a secret

98
00:04:05,519 --> 00:04:06,640
then

99
00:04:06,640 --> 00:04:07,599
it is

100
00:04:07,599 --> 00:04:09,439
difficult to

101
00:04:09,439 --> 00:04:12,000
find an efficient and secure method for

102
00:04:12,000 --> 00:04:13,680
each party to

103
00:04:13,680 --> 00:04:18,000
access the relevant secure share

104
00:04:18,160 --> 00:04:21,358
oblivious ram protocols can be tailored

105
00:04:21,358 --> 00:04:24,639
to the secure computation setting

106
00:04:24,639 --> 00:04:26,560
and indeed in a secure computation

107
00:04:26,560 --> 00:04:29,040
setting sometimes you can take advantage

108
00:04:29,040 --> 00:04:30,000
of

109
00:04:30,000 --> 00:04:31,680
the

110
00:04:31,680 --> 00:04:33,520
work that the

111
00:04:33,520 --> 00:04:35,280
different parties can do in order to

112
00:04:35,280 --> 00:04:38,719
make the protocol more efficient

113
00:04:40,240 --> 00:04:43,040
i will now explain hierarchical arama

114
00:04:43,040 --> 00:04:44,080
schemes

115
00:04:44,080 --> 00:04:46,000
hierarchical ram

116
00:04:46,000 --> 00:04:48,720
is based on oblivious hash tables an

117
00:04:48,720 --> 00:04:51,280
oblivious hash table is a data structure

118
00:04:51,280 --> 00:04:54,080
that has the property that accesses to

119
00:04:54,080 --> 00:04:56,320
the data structure access random

120
00:04:56,320 --> 00:04:57,520
locations

121
00:04:57,520 --> 00:05:00,639
as such if each item that is created to

122
00:05:00,639 --> 00:05:02,720
the oblivious hash table is only queried

123
00:05:02,720 --> 00:05:05,919
once it leaks no information about the

124
00:05:05,919 --> 00:05:08,240
items that were queried nor does it leak

125
00:05:08,240 --> 00:05:10,800
any information about the relationship

126
00:05:10,800 --> 00:05:12,479
between items that were created and the

127
00:05:12,479 --> 00:05:15,120
actual items in the database

128
00:05:15,120 --> 00:05:17,360
however because oblivious hash tables

129
00:05:17,360 --> 00:05:19,840
can only be accessed once they need to

130
00:05:19,840 --> 00:05:22,960
be combined in a new way in order to

131
00:05:22,960 --> 00:05:25,840
allow items to be accessed multiple

132
00:05:25,840 --> 00:05:28,320
times from the oblivious ram

133
00:05:28,320 --> 00:05:32,000
this is done by having

134
00:05:32,320 --> 00:05:34,479
several oblivious hash tables of

135
00:05:34,479 --> 00:05:36,840
geometric in the increasing

136
00:05:36,840 --> 00:05:40,800
sizes briefly each

137
00:05:40,800 --> 00:05:42,560
in short each

138
00:05:42,560 --> 00:05:44,400
oblivious hash table will have twice the

139
00:05:44,400 --> 00:05:47,199
capacity of the oblivious hash table

140
00:05:47,199 --> 00:05:48,400
above it

141
00:05:48,400 --> 00:05:50,960
at any given point in time not every

142
00:05:50,960 --> 00:05:53,199
oblivious hash table in the hierarchy

143
00:05:53,199 --> 00:05:56,240
will exist in the diagram shown on this

144
00:05:56,240 --> 00:05:57,120
slide

145
00:05:57,120 --> 00:05:59,039
the first and third oblivious hash

146
00:05:59,039 --> 00:06:01,520
tables are not needed at this point or

147
00:06:01,520 --> 00:06:03,520
the first and third levels have no

148
00:06:03,520 --> 00:06:05,840
oblivious hash tables and the second and

149
00:06:05,840 --> 00:06:07,520
fourth

150
00:06:07,520 --> 00:06:10,240
levels have the oblivious hash tables

151
00:06:10,240 --> 00:06:12,400
shown

152
00:06:12,400 --> 00:06:15,840
in order to query an item

153
00:06:16,560 --> 00:06:17,520
the

154
00:06:17,520 --> 00:06:18,319
each

155
00:06:18,319 --> 00:06:20,160
level that has an oblivious hash table

156
00:06:20,160 --> 00:06:23,120
is queried starting with the smallest

157
00:06:23,120 --> 00:06:25,199
if the item is found

158
00:06:25,199 --> 00:06:26,400
another

159
00:06:26,400 --> 00:06:28,319
random value

160
00:06:28,319 --> 00:06:31,600
a nonce which is only used once

161
00:06:31,600 --> 00:06:34,319
will be queried at subsequent levels

162
00:06:34,319 --> 00:06:36,960
this is important for security

163
00:06:36,960 --> 00:06:38,960
the item that was queried in the smaller

164
00:06:38,960 --> 00:06:41,360
level may have previously

165
00:06:41,360 --> 00:06:43,440
been queried at one of these larger

166
00:06:43,440 --> 00:06:44,880
levels

167
00:06:44,880 --> 00:06:47,600
as such querying a random value instead

168
00:06:47,600 --> 00:06:50,000
protects the security of the scheme as

169
00:06:50,000 --> 00:06:52,880
it guarantees that at each level an item

170
00:06:52,880 --> 00:06:55,120
will only be queried once

171
00:06:55,120 --> 00:06:56,880
the fact that these random values are

172
00:06:56,880 --> 00:06:59,120
different every time is also essential

173
00:06:59,120 --> 00:07:03,039
for security because it means that again

174
00:07:03,039 --> 00:07:05,120
these random values will only be queried

175
00:07:05,120 --> 00:07:07,520
to each table once

176
00:07:07,520 --> 00:07:09,520
once an item has been queried from every

177
00:07:09,520 --> 00:07:13,280
level it is inserted into the top level

178
00:07:13,280 --> 00:07:14,840
called the

179
00:07:14,840 --> 00:07:20,318
cache in the cache every item is queried

180
00:07:20,800 --> 00:07:24,639
whenever the crash cache becomes too big

181
00:07:24,639 --> 00:07:26,400
the entire data structure needs to be

182
00:07:26,400 --> 00:07:28,400
rebuilt

183
00:07:28,400 --> 00:07:29,840
all

184
00:07:29,840 --> 00:07:32,720
levels that have an oblivious hash table

185
00:07:32,720 --> 00:07:34,880
from the smallest level until the

186
00:07:34,880 --> 00:07:36,880
largest one such that

187
00:07:36,880 --> 00:07:40,400
this sequence of the fierce hash tables

188
00:07:40,400 --> 00:07:41,199
can

189
00:07:41,199 --> 00:07:43,120
the sequence of levels all contains

190
00:07:43,120 --> 00:07:45,199
oblivious hash tables all of these

191
00:07:45,199 --> 00:07:48,000
oblivious hash tables are combined

192
00:07:48,000 --> 00:07:50,080
and built into a new oblivious hash

193
00:07:50,080 --> 00:07:52,400
table

194
00:07:53,440 --> 00:07:56,080
the details of how the oblivious hash

195
00:07:56,080 --> 00:07:58,319
table is built

196
00:07:58,319 --> 00:08:00,319
in such a way that it does not leak any

197
00:08:00,319 --> 00:08:02,720
information about the contents of the

198
00:08:02,720 --> 00:08:04,160
data

199
00:08:04,160 --> 00:08:05,360
is

200
00:08:05,360 --> 00:08:07,280
not going to be discussed in this talk

201
00:08:07,280 --> 00:08:12,039
as it varies from scheme to scheme

202
00:08:12,400 --> 00:08:14,479
however i am going to discuss in quite

203
00:08:14,479 --> 00:08:16,000
detail

204
00:08:16,000 --> 00:08:17,759
how the

205
00:08:17,759 --> 00:08:19,919
tables are accessed

206
00:08:19,919 --> 00:08:21,280
in particular

207
00:08:21,280 --> 00:08:23,840
many hierarchical oram schemes make use

208
00:08:23,840 --> 00:08:25,680
of cocoa hashing

209
00:08:25,680 --> 00:08:27,919
cuckoo hashing is an efficient form of

210
00:08:27,919 --> 00:08:29,520
hashing

211
00:08:29,520 --> 00:08:31,280
in it there are two

212
00:08:31,280 --> 00:08:34,479
subtables each of size epsilon n where

213
00:08:34,479 --> 00:08:36,320
epsilon is some constant greater than

214
00:08:36,320 --> 00:08:40,240
one and n is the number of items that

215
00:08:40,240 --> 00:08:42,320
this scheme rushes to store

216
00:08:42,320 --> 00:08:44,880
in the table

217
00:08:44,880 --> 00:08:46,399
each item

218
00:08:46,399 --> 00:08:49,440
can be stored in one of two locations

219
00:08:49,440 --> 00:08:51,680
these locations are determined based on

220
00:08:51,680 --> 00:08:54,880
hash functions as such each location can

221
00:08:54,880 --> 00:08:56,560
be treated as a

222
00:08:56,560 --> 00:08:59,279
random value uniformly chosen from the

223
00:08:59,279 --> 00:09:02,320
epsilon n possible locations

224
00:09:02,320 --> 00:09:06,880
each of these locations has capacity one

225
00:09:07,200 --> 00:09:09,600
the fact that

226
00:09:09,600 --> 00:09:11,200
the

227
00:09:11,200 --> 00:09:13,440
each item can be stored in one of two

228
00:09:13,440 --> 00:09:15,440
possible locations

229
00:09:15,440 --> 00:09:18,800
allows much greater flexibility in the

230
00:09:18,800 --> 00:09:22,399
assignment of items to locations for

231
00:09:22,399 --> 00:09:24,480
instance if there is a collision in one

232
00:09:24,480 --> 00:09:26,399
of the tables

233
00:09:26,399 --> 00:09:28,959
the items can still be stored

234
00:09:28,959 --> 00:09:31,440
for instance in this diagram we can show

235
00:09:31,440 --> 00:09:34,320
that we show that the r what robin can

236
00:09:34,320 --> 00:09:36,800
be stored in the hash table on the left

237
00:09:36,800 --> 00:09:38,560
and the flamingo on the hash table on

238
00:09:38,560 --> 00:09:39,519
the right

239
00:09:39,519 --> 00:09:41,120
even though both of them were assigned

240
00:09:41,120 --> 00:09:43,040
to the same location in the hash table

241
00:09:43,040 --> 00:09:45,120
on the right

242
00:09:45,120 --> 00:09:48,399
we can continue to see that

243
00:09:48,399 --> 00:09:50,560
even though this table now contains

244
00:09:50,560 --> 00:09:52,800
several collisions

245
00:09:52,800 --> 00:09:55,440
it is still possible to find a correct

246
00:09:55,440 --> 00:09:56,800
assignment

247
00:09:56,800 --> 00:10:00,320
of items to hash table locations

248
00:10:00,320 --> 00:10:03,360
such that each item is assigned a unique

249
00:10:03,360 --> 00:10:05,440
location

250
00:10:05,440 --> 00:10:08,240
however it is of course possible

251
00:10:08,240 --> 00:10:09,279
that

252
00:10:09,279 --> 00:10:12,720
a configuration of items to locations is

253
00:10:12,720 --> 00:10:15,120
chosen such that it is impossible to

254
00:10:15,120 --> 00:10:18,640
store everything in the table

255
00:10:18,640 --> 00:10:19,600
this

256
00:10:19,600 --> 00:10:21,839
depends on the randomness of the hash

257
00:10:21,839 --> 00:10:25,440
functions that are chosen

258
00:10:25,440 --> 00:10:28,240
the probability that this occurs

259
00:10:28,240 --> 00:10:31,120
whenever any items are inserted is order

260
00:10:31,120 --> 00:10:32,880
n to the negative one

261
00:10:32,880 --> 00:10:35,680
this was shown by pag and roddler into

262
00:10:35,680 --> 00:10:38,000
in their paper introducing coco hashing

263
00:10:38,000 --> 00:10:41,079
in 2004.

264
00:10:42,399 --> 00:10:44,959
cuckoo hashing was then proposed as a

265
00:10:44,959 --> 00:10:48,079
scheme for oblivious hash tables

266
00:10:48,079 --> 00:10:53,120
by pincus and reinman in 2010

267
00:10:54,959 --> 00:10:57,360
they proposed that each level

268
00:10:57,360 --> 00:11:00,560
could have a cuckoo hash table in the

269
00:11:00,560 --> 00:11:01,680
event

270
00:11:01,680 --> 00:11:05,360
that there was an assignment of items

271
00:11:05,360 --> 00:11:07,519
two locations in the table

272
00:11:07,519 --> 00:11:09,120
such that

273
00:11:09,120 --> 00:11:10,959
the items could not all be stored in the

274
00:11:10,959 --> 00:11:12,320
table

275
00:11:12,320 --> 00:11:14,320
they suggested that the table could be

276
00:11:14,320 --> 00:11:15,839
rebuilt

277
00:11:15,839 --> 00:11:18,240
this is this a standard way of dealing

278
00:11:18,240 --> 00:11:21,760
with this one over n probability of an

279
00:11:21,760 --> 00:11:24,640
unsatisfactory assignment

280
00:11:24,640 --> 00:11:27,519
however this actually presented

281
00:11:27,519 --> 00:11:30,560
a subtle problem

282
00:11:31,440 --> 00:11:34,560
imagine that the table is rebuilt

283
00:11:34,560 --> 00:11:35,680
in the case that there is an

284
00:11:35,680 --> 00:11:38,560
unsatisfying assignment

285
00:11:38,560 --> 00:11:39,440
now

286
00:11:39,440 --> 00:11:40,240
if

287
00:11:40,240 --> 00:11:41,760
all of the items

288
00:11:41,760 --> 00:11:44,880
in the table are queried

289
00:11:44,880 --> 00:11:47,839
that access pattern in the queries

290
00:11:47,839 --> 00:11:50,480
will not correspond to an unsatisfying

291
00:11:50,480 --> 00:11:51,680
assignment

292
00:11:51,680 --> 00:11:54,639
however if items that are not in the

293
00:11:54,639 --> 00:11:57,760
table are queried it is possible that

294
00:11:57,760 --> 00:11:58,639
the

295
00:11:58,639 --> 00:12:01,760
access physical accesses to the table

296
00:12:01,760 --> 00:12:05,680
correspond to an unsatisfying assignment

297
00:12:05,680 --> 00:12:08,079
for instance imagine that the table

298
00:12:08,079 --> 00:12:10,399
contains the parrot the owl and the

299
00:12:10,399 --> 00:12:12,560
robin

300
00:12:12,560 --> 00:12:15,440
we know from this that the parrot owl

301
00:12:15,440 --> 00:12:16,480
and robin

302
00:12:16,480 --> 00:12:19,519
query locations cannot be the same two

303
00:12:19,519 --> 00:12:22,639
query locations

304
00:12:22,880 --> 00:12:25,200
however imagine that instead we query

305
00:12:25,200 --> 00:12:28,320
the flamingo the han and the penguin

306
00:12:28,320 --> 00:12:31,040
it is possible though unlikely

307
00:12:31,040 --> 00:12:32,800
that

308
00:12:32,800 --> 00:12:34,880
all three of these queries will result

309
00:12:34,880 --> 00:12:38,160
in the same two locations being queried

310
00:12:38,160 --> 00:12:40,399
if this event were to occur we would

311
00:12:40,399 --> 00:12:43,040
know that it is impossible that all

312
00:12:43,040 --> 00:12:45,200
three of the items that were queried

313
00:12:45,200 --> 00:12:47,519
existed in the table

314
00:12:47,519 --> 00:12:50,160
this therefore presents a subtle

315
00:12:50,160 --> 00:12:52,639
security leakage

316
00:12:52,639 --> 00:12:54,320
and means that the oblivious ram in

317
00:12:54,320 --> 00:12:57,920
general is not secure

318
00:12:59,200 --> 00:13:01,760
it was then proposed

319
00:13:01,760 --> 00:13:05,120
to use cuckoo hashing with a stash

320
00:13:05,120 --> 00:13:09,639
by goodrich and mitsumaka in 2011.

321
00:13:09,920 --> 00:13:14,160
a stash is an additional area of

322
00:13:14,160 --> 00:13:17,040
storage in which items that could not be

323
00:13:17,040 --> 00:13:19,519
placed in the main table can be placed

324
00:13:19,519 --> 00:13:21,839
instead

325
00:13:22,560 --> 00:13:23,920
it can be shown

326
00:13:23,920 --> 00:13:26,000
that

327
00:13:26,000 --> 00:13:28,560
for any constant s

328
00:13:28,560 --> 00:13:30,480
the failure probability

329
00:13:30,480 --> 00:13:34,240
then becomes order n to the negative s

330
00:13:34,240 --> 00:13:35,440
furthermore

331
00:13:35,440 --> 00:13:38,560
for non-constant s it can also be shown

332
00:13:38,560 --> 00:13:41,120
that the failure probability becomes

333
00:13:41,120 --> 00:13:43,519
order s

334
00:13:43,519 --> 00:13:46,639
open brackets order s over n close

335
00:13:46,639 --> 00:13:50,240
brackets to the s plus 1.

336
00:13:50,560 --> 00:13:52,639
this means that the failure probability

337
00:13:52,639 --> 00:13:55,279
can be made negligible

338
00:13:55,279 --> 00:13:57,920
failure in this case means that more

339
00:13:57,920 --> 00:14:00,000
items are placed in the stash than the

340
00:14:00,000 --> 00:14:03,839
memory of the stash allows

341
00:14:04,560 --> 00:14:08,000
observe that we also cannot reveal how

342
00:14:08,000 --> 00:14:11,519
many items were placed in the stash

343
00:14:11,519 --> 00:14:13,760
because this

344
00:14:13,760 --> 00:14:16,480
again would suffer the same problem that

345
00:14:16,480 --> 00:14:19,680
existed with the

346
00:14:19,680 --> 00:14:23,599
protocol of pincus and rangman

347
00:14:24,959 --> 00:14:27,279
during the build phase the fact that the

348
00:14:27,279 --> 00:14:29,920
stash size was leaked would reveal no

349
00:14:29,920 --> 00:14:31,360
information

350
00:14:31,360 --> 00:14:32,639
however

351
00:14:32,639 --> 00:14:35,040
if the access pattern

352
00:14:35,040 --> 00:14:39,040
corresponded to a sequence

353
00:14:39,040 --> 00:14:41,839
of elements a set of elements

354
00:14:41,839 --> 00:14:42,639
that

355
00:14:42,639 --> 00:14:45,440
does not have the same stash size

356
00:14:45,440 --> 00:14:46,959
we know that

357
00:14:46,959 --> 00:14:48,720
the items that were queried could not

358
00:14:48,720 --> 00:14:52,639
all have existed in that table

359
00:14:54,000 --> 00:14:56,560
this means that the stash sizes need to

360
00:14:56,560 --> 00:14:59,519
be revealed and furthermore the entire

361
00:14:59,519 --> 00:15:03,519
stash needs to be accessed at each level

362
00:15:03,519 --> 00:15:05,680
grid brick and mids and maca then

363
00:15:05,680 --> 00:15:08,079
presented a protocol with these

364
00:15:08,079 --> 00:15:09,279
properties

365
00:15:09,279 --> 00:15:12,320
in their oblivious ram protocol

366
00:15:12,320 --> 00:15:14,079
every level contained a cuckoo hash

367
00:15:14,079 --> 00:15:15,680
table

368
00:15:15,680 --> 00:15:18,800
and also contained a super constant size

369
00:15:18,800 --> 00:15:19,920
stash

370
00:15:19,920 --> 00:15:23,120
say of size log n

371
00:15:23,519 --> 00:15:24,560
this

372
00:15:24,560 --> 00:15:27,519
protocol was secure

373
00:15:27,519 --> 00:15:31,040
and was able to take advantage of the

374
00:15:31,040 --> 00:15:34,079
the efficiency from cuckoo hash tables

375
00:15:34,079 --> 00:15:35,680
however

376
00:15:35,680 --> 00:15:37,839
it meant that the number of accesses at

377
00:15:37,839 --> 00:15:40,240
each level was no longer constant

378
00:15:40,240 --> 00:15:43,040
because the entirety of the stash needed

379
00:15:43,040 --> 00:15:45,600
to be queried

380
00:15:45,600 --> 00:15:48,160
as such the scheme was secure

381
00:15:48,160 --> 00:15:49,920
but it was still

382
00:15:49,920 --> 00:15:51,519
somewhat inefficient

383
00:15:51,519 --> 00:15:53,279
because it still needed

384
00:15:53,279 --> 00:15:56,399
order log squared and physical accesses

385
00:15:56,399 --> 00:15:59,839
for each virtual access

386
00:16:01,440 --> 00:16:04,480
it was then proposed by goodricka al in

387
00:16:04,480 --> 00:16:07,279
their paper in 2012 that these stashes

388
00:16:07,279 --> 00:16:09,600
could in fact be combined

389
00:16:09,600 --> 00:16:12,240
they showed that even though each stash

390
00:16:12,240 --> 00:16:14,480
needed to be of size

391
00:16:14,480 --> 00:16:16,240
order logan

392
00:16:16,240 --> 00:16:18,800
if the combined stash was of size order

393
00:16:18,800 --> 00:16:19,839
log n

394
00:16:19,839 --> 00:16:21,839
this was sufficient to ensure that the

395
00:16:21,839 --> 00:16:24,800
stash didn't overflow

396
00:16:24,800 --> 00:16:26,000
as such

397
00:16:26,000 --> 00:16:29,600
this combined stash at the cache level

398
00:16:29,600 --> 00:16:32,000
would be checked first

399
00:16:32,000 --> 00:16:34,240
and then

400
00:16:34,240 --> 00:16:36,000
the remainder of the table would be

401
00:16:36,000 --> 00:16:39,759
checked as per normal

402
00:16:40,000 --> 00:16:42,959
hirin was introduced the subtle security

403
00:16:42,959 --> 00:16:43,920
flaw

404
00:16:43,920 --> 00:16:48,479
that is described in the alibi paper

405
00:16:49,519 --> 00:16:51,839
since the combined stash was checked

406
00:16:51,839 --> 00:16:53,600
first

407
00:16:53,600 --> 00:16:56,959
the hierarchical oram protocol would if

408
00:16:56,959 --> 00:16:59,519
it found the item in the stash search

409
00:16:59,519 --> 00:17:01,680
for other elements instead in the lower

410
00:17:01,680 --> 00:17:04,559
levels

411
00:17:04,559 --> 00:17:07,119
this meant that instead of searching

412
00:17:07,119 --> 00:17:09,439
the locations of the item that had been

413
00:17:09,439 --> 00:17:10,799
stashed

414
00:17:10,799 --> 00:17:14,880
other locations were accessed instead

415
00:17:14,880 --> 00:17:16,720
now any single

416
00:17:16,720 --> 00:17:20,000
query did not leak any information since

417
00:17:20,000 --> 00:17:21,919
only two locations were accessed and

418
00:17:21,919 --> 00:17:24,720
those locations were still random

419
00:17:24,720 --> 00:17:26,079
however

420
00:17:26,079 --> 00:17:28,960
when multiple queries were combined

421
00:17:28,960 --> 00:17:31,120
a similar problem

422
00:17:31,120 --> 00:17:34,400
appeared as had happened with the

423
00:17:34,400 --> 00:17:36,720
original cuckoo hashing protocol by

424
00:17:36,720 --> 00:17:39,600
pinkus and roman

425
00:17:40,640 --> 00:17:41,840
while

426
00:17:41,840 --> 00:17:43,840
it was possible

427
00:17:43,840 --> 00:17:46,160
that the item that had been placed in

428
00:17:46,160 --> 00:17:48,799
the stash would result

429
00:17:48,799 --> 00:17:49,760
in

430
00:17:49,760 --> 00:17:52,559
the same query locations

431
00:17:52,559 --> 00:17:55,520
this is extremely unlikely

432
00:17:55,520 --> 00:17:57,280
as such

433
00:17:57,280 --> 00:17:59,600
it is extremely unlikely

434
00:17:59,600 --> 00:18:02,559
that the

435
00:18:03,039 --> 00:18:05,679
resulting stash size

436
00:18:05,679 --> 00:18:08,559
from the query i if all of the items

437
00:18:08,559 --> 00:18:11,120
that are in a table are queried

438
00:18:11,120 --> 00:18:13,120
will be as large

439
00:18:13,120 --> 00:18:16,000
as the original stash size if the stash

440
00:18:16,000 --> 00:18:19,520
size is greater than or equal to one

441
00:18:19,520 --> 00:18:21,120
in this example

442
00:18:21,120 --> 00:18:23,919
again imagine that the robin

443
00:18:23,919 --> 00:18:25,600
owl and parrot

444
00:18:25,600 --> 00:18:28,480
were placed in an oblivious hash table

445
00:18:28,480 --> 00:18:30,559
however further imagine

446
00:18:30,559 --> 00:18:31,600
that

447
00:18:31,600 --> 00:18:34,240
they were not able to be assigned to

448
00:18:34,240 --> 00:18:36,799
this location and therefore the parrot

449
00:18:36,799 --> 00:18:40,080
had to be placed in the stash

450
00:18:40,080 --> 00:18:42,559
in this event reality the owl and the

451
00:18:42,559 --> 00:18:44,160
robin will

452
00:18:44,160 --> 00:18:47,120
when queried still access their original

453
00:18:47,120 --> 00:18:48,559
locations

454
00:18:48,559 --> 00:18:49,600
however

455
00:18:49,600 --> 00:18:51,679
the parrot

456
00:18:51,679 --> 00:18:52,799
will

457
00:18:52,799 --> 00:18:55,200
access new locations

458
00:18:55,200 --> 00:18:57,679
as such the queries for any items that

459
00:18:57,679 --> 00:19:01,760
are in the stash are resampled

460
00:19:01,760 --> 00:19:04,240
if instead we look at three random items

461
00:19:04,240 --> 00:19:05,679
which are not

462
00:19:05,679 --> 00:19:07,600
in the table

463
00:19:07,600 --> 00:19:10,080
the probability that they cause a

464
00:19:10,080 --> 00:19:12,559
complete collision i.e that all three of

465
00:19:12,559 --> 00:19:15,200
them are mapped to two locations has not

466
00:19:15,200 --> 00:19:17,919
been affected

467
00:19:17,919 --> 00:19:18,960
therefore

468
00:19:18,960 --> 00:19:21,200
there is a statistically significant

469
00:19:21,200 --> 00:19:22,480
difference

470
00:19:22,480 --> 00:19:25,200
in the probability that these

471
00:19:25,200 --> 00:19:27,440
three items which are not in the table

472
00:19:27,440 --> 00:19:29,919
will be matched to two locations versus

473
00:19:29,919 --> 00:19:31,919
three items which are in the table being

474
00:19:31,919 --> 00:19:35,720
mapped to two locations

475
00:19:38,000 --> 00:19:40,240
solution to this is actually quite

476
00:19:40,240 --> 00:19:42,080
simple

477
00:19:42,080 --> 00:19:45,840
if any item is placed in the stash

478
00:19:45,840 --> 00:19:48,320
it also needs to remember

479
00:19:48,320 --> 00:19:52,640
which table it originally came from

480
00:19:52,640 --> 00:19:55,919
then whenever it is queried

481
00:19:55,919 --> 00:19:57,919
the table at which it originally came

482
00:19:57,919 --> 00:19:59,039
from

483
00:19:59,039 --> 00:20:00,640
needs to be queried

484
00:20:00,640 --> 00:20:03,360
with the original query

485
00:20:03,360 --> 00:20:06,320
so if we find the parrot and the parrot

486
00:20:06,320 --> 00:20:09,440
originally came from level 3

487
00:20:09,440 --> 00:20:12,000
the protocol should still query the

488
00:20:12,000 --> 00:20:13,200
original

489
00:20:13,200 --> 00:20:16,080
hash locations of the parrot in query 3

490
00:20:16,080 --> 00:20:18,480
in level 3.

491
00:20:18,480 --> 00:20:21,520
in subsequent levels it should as before

492
00:20:21,520 --> 00:20:24,159
query a random value since the parrot

493
00:20:24,159 --> 00:20:26,159
may indeed have been queried at this

494
00:20:26,159 --> 00:20:28,960
level before

495
00:20:30,320 --> 00:20:32,799
this successfully

496
00:20:32,799 --> 00:20:34,720
allows

497
00:20:34,720 --> 00:20:37,919
the sequence of access patterns

498
00:20:37,919 --> 00:20:39,840
at each level

499
00:20:39,840 --> 00:20:41,280
to

500
00:20:41,280 --> 00:20:45,039
be independent random samples from the

501
00:20:45,039 --> 00:20:48,400
table space

502
00:20:48,400 --> 00:20:50,799
in other words the query patterns are

503
00:20:50,799 --> 00:20:53,280
not affected at all by an item having

504
00:20:53,280 --> 00:20:56,720
been placed in the stash

505
00:21:00,000 --> 00:21:02,640
the additional information therefore

506
00:21:02,640 --> 00:21:06,559
serves as an alibi of sorts

507
00:21:06,880 --> 00:21:09,360
in the same way that a criminal needs an

508
00:21:09,360 --> 00:21:11,840
alibi to claim that it was

509
00:21:11,840 --> 00:21:14,320
he or she was going about their daily

510
00:21:14,320 --> 00:21:15,440
life

511
00:21:15,440 --> 00:21:18,080
this additional information

512
00:21:18,080 --> 00:21:20,400
makes it seem as if the item existed at

513
00:21:20,400 --> 00:21:22,640
its original level in the table

514
00:21:22,640 --> 00:21:26,640
when in fact it was placed in the stash

515
00:21:28,480 --> 00:21:31,120
through doing this the queries at each

516
00:21:31,120 --> 00:21:34,159
level appear completely random

517
00:21:34,159 --> 00:21:36,159
and the oblivious ram scheme can be made

518
00:21:36,159 --> 00:21:37,679
secure

519
00:21:37,679 --> 00:21:39,679
this additional information

520
00:21:39,679 --> 00:21:40,880
only

521
00:21:40,880 --> 00:21:44,480
requires a number of bits equal to the

522
00:21:44,480 --> 00:21:47,360
number of levels

523
00:21:48,720 --> 00:21:52,320
and therefore does not

524
00:21:52,320 --> 00:21:54,159
increase the asymptotic cost of the

525
00:21:54,159 --> 00:21:57,159
protocol

526
00:21:58,559 --> 00:22:00,240
this floor first appeared in the

527
00:22:00,240 --> 00:22:02,559
literature in 2012

528
00:22:02,559 --> 00:22:05,840
so has existed for almost a decade

529
00:22:05,840 --> 00:22:08,159
it was then inherited by a sequence of

530
00:22:08,159 --> 00:22:09,280
other works

531
00:22:09,280 --> 00:22:11,360
and in total this floor appeared in six

532
00:22:11,360 --> 00:22:12,720
different papers

533
00:22:12,720 --> 00:22:14,640
including three oblivious round papers

534
00:22:14,640 --> 00:22:16,240
that were published in the last three

535
00:22:16,240 --> 00:22:18,159
years

536
00:22:18,159 --> 00:22:19,840
this motivates

537
00:22:19,840 --> 00:22:20,799
the

538
00:22:20,799 --> 00:22:22,320
simplification

539
00:22:22,320 --> 00:22:25,280
of oblivious ram

540
00:22:25,280 --> 00:22:25,679
and protocols

541
00:22:25,679 --> 00:22:29,120
development of modular

542
00:22:29,120 --> 00:22:32,080
secure components

543
00:22:32,080 --> 00:22:35,919
it also makes us realize that

544
00:22:35,919 --> 00:22:37,280
combining

545
00:22:37,280 --> 00:22:40,400
components in ways that undermine their

546
00:22:40,400 --> 00:22:42,640
basic security properties

547
00:22:42,640 --> 00:22:44,679
can result in

548
00:22:44,679 --> 00:22:49,039
unintentional security flaws

549
00:22:49,840 --> 00:22:50,880
lastly

550
00:22:50,880 --> 00:22:51,840
it

551
00:22:51,840 --> 00:22:54,640
motivates the suggestion that reviewers

552
00:22:54,640 --> 00:22:55,919
should be

553
00:22:55,919 --> 00:22:58,159
compensated more for their efforts so

554
00:22:58,159 --> 00:22:59,360
that they

555
00:22:59,360 --> 00:23:02,640
can devote more time towards

556
00:23:02,640 --> 00:23:04,880
reviewing search protocols

557
00:23:04,880 --> 00:23:06,640
and are therefore more likely to catch

558
00:23:06,640 --> 00:23:09,840
flaws such as this one

