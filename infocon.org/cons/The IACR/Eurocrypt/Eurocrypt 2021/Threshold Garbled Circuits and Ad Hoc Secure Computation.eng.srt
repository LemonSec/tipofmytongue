1
00:00:00,399 --> 00:00:03,120
hi everyone i am italy chambi and i'm

2
00:00:03,120 --> 00:00:05,200
going to talk about threshold garbage

3
00:00:05,200 --> 00:00:08,240
circuits and adult secure computation

4
00:00:08,240 --> 00:00:10,480
this is a joint work with people goyal

5
00:00:10,480 --> 00:00:12,240
and rafael ostrowski

6
00:00:12,240 --> 00:00:14,480
the private simultaneous model was

7
00:00:14,480 --> 00:00:18,320
introduced in stock 1994 by feigetal

8
00:00:18,320 --> 00:00:20,640
in this work the authors wanted to

9
00:00:20,640 --> 00:00:23,279
consider a model that would allow the

10
00:00:23,279 --> 00:00:26,240
parties to securely evaluate a function

11
00:00:26,240 --> 00:00:29,119
with just one round of interaction

12
00:00:29,119 --> 00:00:31,119
so we know that this is not possible in

13
00:00:31,119 --> 00:00:33,360
general unless we put some restrictions

14
00:00:33,360 --> 00:00:35,680
or we change the model and that's

15
00:00:35,680 --> 00:00:37,840
exactly what the others did

16
00:00:37,840 --> 00:00:40,640
and they consider a setting where there

17
00:00:40,640 --> 00:00:43,200
are two types of entities

18
00:00:43,200 --> 00:00:46,480
so the first is the evaluator

19
00:00:46,480 --> 00:00:48,399
which wants to understand the output of

20
00:00:48,399 --> 00:00:50,719
the function and then there are a set of

21
00:00:50,719 --> 00:00:53,440
parties that are the only parties that

22
00:00:53,440 --> 00:00:56,320
have inputs

23
00:00:57,600 --> 00:01:00,719
a protocol in this setting has three

24
00:01:00,719 --> 00:01:02,480
main algorithms

25
00:01:02,480 --> 00:01:04,720
the first is the setup algorithm to

26
00:01:04,720 --> 00:01:07,920
generate some correlated randomness

27
00:01:07,920 --> 00:01:09,520
and we will denote the randomness that

28
00:01:09,520 --> 00:01:11,040
each party

29
00:01:11,040 --> 00:01:12,560
gets with

30
00:01:12,560 --> 00:01:14,799
a red r

31
00:01:14,799 --> 00:01:17,680
so after the setup phase each party has

32
00:01:17,680 --> 00:01:20,080
his own correlated randomness

33
00:01:20,080 --> 00:01:21,520
and

34
00:01:21,520 --> 00:01:22,479
now

35
00:01:22,479 --> 00:01:24,560
each party can create an encoding using

36
00:01:24,560 --> 00:01:26,720
this randomness and using the input and

37
00:01:26,720 --> 00:01:28,640
encoding of their input

38
00:01:28,640 --> 00:01:31,520
for each for the part api we denote with

39
00:01:31,520 --> 00:01:33,759
ci

40
00:01:33,759 --> 00:01:36,079
after the encoding phase we go to the

41
00:01:36,079 --> 00:01:38,240
online phase which is the phase where

42
00:01:38,240 --> 00:01:39,600
the parties

43
00:01:39,600 --> 00:01:42,720
actually provide their encodings to the

44
00:01:42,720 --> 00:01:44,079
evaluator

45
00:01:44,079 --> 00:01:47,360
the evaluator now has can use an

46
00:01:47,360 --> 00:01:49,280
algorithm that we call

47
00:01:49,280 --> 00:01:51,280
eval for evaluation

48
00:01:51,280 --> 00:01:53,680
and running this algorithm on input the

49
00:01:53,680 --> 00:01:56,799
randomness of zero r0 and

50
00:01:56,799 --> 00:01:59,600
the encodings of the n parties he can

51
00:01:59,600 --> 00:02:03,280
compute the output of the function f

52
00:02:03,280 --> 00:02:06,479
so what we want here is that adversary

53
00:02:06,479 --> 00:02:09,598
must not learn more than what can be

54
00:02:09,598 --> 00:02:12,160
inferred by the output of the function

55
00:02:12,160 --> 00:02:14,640
itself

56
00:02:14,879 --> 00:02:17,120
very connected to this uh to this

57
00:02:17,120 --> 00:02:19,280
setting is the notion of of cardboard

58
00:02:19,280 --> 00:02:22,000
circuits using this notion it's easy to

59
00:02:22,000 --> 00:02:25,120
realize a secure protocol in the model

60
00:02:25,120 --> 00:02:27,760
we just described

61
00:02:27,760 --> 00:02:29,920
just a quick recap on garbage circuits

62
00:02:29,920 --> 00:02:32,560
so garbage circuits has a garbling

63
00:02:32,560 --> 00:02:33,680
algorithm

64
00:02:33,680 --> 00:02:36,560
that takes as input a description of a

65
00:02:36,560 --> 00:02:38,080
function f

66
00:02:38,080 --> 00:02:39,519
and returns

67
00:02:39,519 --> 00:02:40,319
the

68
00:02:40,319 --> 00:02:42,640
garbling of this function which we

69
00:02:42,640 --> 00:02:44,480
denote with capital f

70
00:02:44,480 --> 00:02:47,440
and a set of labels

71
00:02:47,440 --> 00:02:51,519
two labels per wire so if we have

72
00:02:51,519 --> 00:02:53,280
such a garbage circuit

73
00:02:53,280 --> 00:02:55,680
uh and during the setup we will run the

74
00:02:55,680 --> 00:02:59,840
garbling algorithm we can give uh to

75
00:02:59,840 --> 00:03:01,920
to each party one

76
00:03:01,920 --> 00:03:03,840
pair of

77
00:03:03,840 --> 00:03:04,959
labels

78
00:03:04,959 --> 00:03:07,200
in such a way that

79
00:03:07,200 --> 00:03:09,519
when it comes to

80
00:03:09,519 --> 00:03:11,680
do the encoding now each party can

81
00:03:11,680 --> 00:03:13,840
select the label that

82
00:03:13,840 --> 00:03:16,480
that he likes depending on what is

83
00:03:16,480 --> 00:03:19,519
his input and send these labels to the

84
00:03:19,519 --> 00:03:22,000
evaluator which he can later run the

85
00:03:22,000 --> 00:03:23,680
evaluation algorithm of the verbal

86
00:03:23,680 --> 00:03:25,760
circuit to compute the output of the

87
00:03:25,760 --> 00:03:28,239
function

88
00:03:28,799 --> 00:03:31,840
a stronger notion but very connected to

89
00:03:31,840 --> 00:03:33,840
the one we just described is the notion

90
00:03:33,840 --> 00:03:35,440
of an interactive multi-party

91
00:03:35,440 --> 00:03:37,920
competition in addition to the to the

92
00:03:37,920 --> 00:03:39,519
previous notion this allows the

93
00:03:39,519 --> 00:03:43,519
evaluator to collude with a set of

94
00:03:43,519 --> 00:03:45,200
parties

95
00:03:45,200 --> 00:03:49,120
so what we uh require here is that uh

96
00:03:49,120 --> 00:03:52,000
the evaluator should not learn more that

97
00:03:52,000 --> 00:03:54,319
what what he can infer

98
00:03:54,319 --> 00:03:56,319
from the residual function the result

99
00:03:56,319 --> 00:03:59,439
function is the function that keeps uh

100
00:03:59,439 --> 00:04:02,159
fixed the input of the honest parties

101
00:04:02,159 --> 00:04:03,599
but um

102
00:04:03,599 --> 00:04:04,799
where the

103
00:04:04,799 --> 00:04:07,439
uh the input as lots of the functions

104
00:04:07,439 --> 00:04:09,599
that correspond to

105
00:04:09,599 --> 00:04:12,879
the uh corrupted slot can be

106
00:04:12,879 --> 00:04:14,959
queried with with any value the

107
00:04:14,959 --> 00:04:18,639
adversary uh likes

108
00:04:18,639 --> 00:04:20,320
and the question another question is

109
00:04:20,320 --> 00:04:21,680
whether the garbage circuit

110
00:04:21,680 --> 00:04:24,400
instantiation is securing this setting

111
00:04:24,400 --> 00:04:27,280
and as you can imagine the answer is no

112
00:04:27,280 --> 00:04:30,560
because in this case

113
00:04:30,560 --> 00:04:33,360
an evaluator a corrupted evaluator might

114
00:04:33,360 --> 00:04:35,759
get multiple like two labels for the

115
00:04:35,759 --> 00:04:38,560
same wire and this might in general

116
00:04:38,560 --> 00:04:41,040
actually compromise it's the security of

117
00:04:41,040 --> 00:04:43,520
the garbett circuit

118
00:04:43,520 --> 00:04:47,199
and actually what uh being a little uh

119
00:04:47,199 --> 00:04:50,479
shows that is that um

120
00:04:50,479 --> 00:04:52,479
the notion of an interactive uh

121
00:04:52,479 --> 00:04:54,639
multiverte competition implies in the

122
00:04:54,639 --> 00:04:56,960
silica video fusekish

123
00:04:56,960 --> 00:05:01,280
the work of berhamuda tal in crypto 2017

124
00:05:01,280 --> 00:05:04,320
shows that this notion is

125
00:05:04,320 --> 00:05:06,960
achievable relying just on one of the

126
00:05:06,960 --> 00:05:08,320
functions

127
00:05:08,320 --> 00:05:09,600
and

128
00:05:09,600 --> 00:05:13,680
if the number of uh corrupted parties is

129
00:05:13,680 --> 00:05:14,639
just

130
00:05:14,639 --> 00:05:16,400
constant

131
00:05:16,400 --> 00:05:17,440
moreover

132
00:05:17,440 --> 00:05:19,280
they require the input of each party to

133
00:05:19,280 --> 00:05:22,320
be just one bit

134
00:05:22,560 --> 00:05:24,240
another interesting model is the doc

135
00:05:24,240 --> 00:05:26,560
private simultaneous message model

136
00:05:26,560 --> 00:05:27,840
in this model

137
00:05:27,840 --> 00:05:30,240
uh we still have n parties during the

138
00:05:30,240 --> 00:05:32,479
setup phase that receive all the

139
00:05:32,479 --> 00:05:35,039
correlated randomness but the function

140
00:05:35,039 --> 00:05:37,280
the evaluator wants to compute

141
00:05:37,280 --> 00:05:40,720
is a k input function

142
00:05:40,720 --> 00:05:43,199
indeed

143
00:05:43,199 --> 00:05:46,320
we do not require here all the parties

144
00:05:46,320 --> 00:05:48,720
to to participate in the online phase

145
00:05:48,720 --> 00:05:51,600
but only a subset of parties

146
00:05:51,600 --> 00:05:53,840
of sides k

147
00:05:53,840 --> 00:05:56,240
so what we want here is again that well

148
00:05:56,240 --> 00:05:57,600
we can

149
00:05:57,600 --> 00:05:59,600
be honest evaluator can evaluate the

150
00:05:59,600 --> 00:06:01,280
output of the function

151
00:06:01,280 --> 00:06:03,120
and moreover that nothing more than that

152
00:06:03,120 --> 00:06:04,840
without the function itself can be

153
00:06:04,840 --> 00:06:07,199
computed in this notion only the

154
00:06:07,199 --> 00:06:09,520
evaluator can be corrupted

155
00:06:09,520 --> 00:06:12,400
also in this case

156
00:06:12,400 --> 00:06:14,319
the garbage circuit based construction

157
00:06:14,319 --> 00:06:16,880
does not help to achieve this notion

158
00:06:16,880 --> 00:06:17,919
because

159
00:06:17,919 --> 00:06:20,400
well unless we have at least one label

160
00:06:20,400 --> 00:06:22,720
per wire we cannot run the evaluation

161
00:06:22,720 --> 00:06:25,680
algorithm of the of the verb circuit

162
00:06:25,680 --> 00:06:28,000
as our first contribution

163
00:06:28,000 --> 00:06:30,400
we consider a new notion

164
00:06:30,400 --> 00:06:32,960
that naturally combines the previous two

165
00:06:32,960 --> 00:06:35,600
notions we have seen

166
00:06:35,600 --> 00:06:38,240
so in this one we call that we call

167
00:06:38,240 --> 00:06:41,039
threshold non-interactive mpc

168
00:06:41,039 --> 00:06:44,240
not only we allow the evaluator to

169
00:06:44,240 --> 00:06:47,759
uh collude with other parties but also

170
00:06:47,759 --> 00:06:50,400
we do not require all the n parties to

171
00:06:50,400 --> 00:06:54,240
be participating in the online phase

172
00:06:54,240 --> 00:06:56,000
in particular

173
00:06:56,000 --> 00:06:58,479
we denote with k again

174
00:06:58,479 --> 00:07:00,000
the

175
00:07:00,000 --> 00:07:03,520
input sides of the

176
00:07:03,520 --> 00:07:05,840
function that you want to compute

177
00:07:05,840 --> 00:07:08,720
and we require only key parties to be

178
00:07:08,720 --> 00:07:12,479
participating in your line phase

179
00:07:12,880 --> 00:07:15,440
the first thing we will do is to show

180
00:07:15,440 --> 00:07:18,160
how to construct a scheme that satisfies

181
00:07:18,160 --> 00:07:19,440
this notion

182
00:07:19,440 --> 00:07:22,400
our construction is based on a standard

183
00:07:22,400 --> 00:07:25,280
non-interactive mpc protocol and on a

184
00:07:25,280 --> 00:07:28,960
new notion of a secret sharing that we

185
00:07:28,960 --> 00:07:32,560
call position on secret sharing

186
00:07:32,560 --> 00:07:35,360
the way we construct this tool

187
00:07:35,360 --> 00:07:36,160
is

188
00:07:36,160 --> 00:07:39,520
by relying on standard chaotic secret

189
00:07:39,520 --> 00:07:42,560
sharing that we now revise

190
00:07:42,560 --> 00:07:44,560
we have a special party alice in this

191
00:07:44,560 --> 00:07:48,240
case that has a secret x now alice

192
00:07:48,240 --> 00:07:51,120
she could uh run a sharing algorithm

193
00:07:51,120 --> 00:07:54,160
thus obtaining uh and and values and

194
00:07:54,160 --> 00:07:55,759
shares

195
00:07:55,759 --> 00:07:59,520
distribute those among the end parties

196
00:07:59,520 --> 00:08:03,680
and in such a way that the evaluator

197
00:08:03,680 --> 00:08:08,319
only if he gets like k shares or more he

198
00:08:08,319 --> 00:08:10,479
will be able to reconstruct the split of

199
00:08:10,479 --> 00:08:11,440
alice

200
00:08:11,440 --> 00:08:14,560
and if he receives less than k shares

201
00:08:14,560 --> 00:08:17,520
then nothing is revealed about the input

202
00:08:17,520 --> 00:08:20,000
values

203
00:08:20,400 --> 00:08:23,039
in our new notion alice does not have

204
00:08:23,039 --> 00:08:25,759
just one input but she has multiple

205
00:08:25,759 --> 00:08:27,199
inputs

206
00:08:27,199 --> 00:08:30,000
and the sharing algorithm as before

207
00:08:30,000 --> 00:08:32,799
takes the secret or the secrets in this

208
00:08:32,799 --> 00:08:36,320
case of alice together with her position

209
00:08:36,320 --> 00:08:39,279
position 4 in this case and distributes

210
00:08:39,279 --> 00:08:43,279
the shares among the end parties

211
00:08:43,279 --> 00:08:45,600
the idea here is that

212
00:08:45,600 --> 00:08:47,519
if k parties

213
00:08:47,519 --> 00:08:50,640
if less than k parties participate uh

214
00:08:50,640 --> 00:08:53,040
into this online phase let's say or if

215
00:08:53,040 --> 00:08:54,880
the evaluator has less less than k

216
00:08:54,880 --> 00:08:55,920
shares

217
00:08:55,920 --> 00:08:58,880
as before nothing is revealed about any

218
00:08:58,880 --> 00:09:01,519
of the input of alice

219
00:09:01,519 --> 00:09:03,680
on the other hand if

220
00:09:03,680 --> 00:09:09,120
k shares are provided to the evaluator

221
00:09:09,120 --> 00:09:12,959
and we order those shares following the

222
00:09:12,959 --> 00:09:16,480
ordering of the indices there

223
00:09:16,480 --> 00:09:19,120
and the

224
00:09:19,120 --> 00:09:21,600
share of alice

225
00:09:21,600 --> 00:09:23,760
in position j

226
00:09:23,760 --> 00:09:28,240
then only the secret x j is revealed to

227
00:09:28,240 --> 00:09:30,480
the evaluator

228
00:09:30,480 --> 00:09:33,200
let me give an example

229
00:09:33,200 --> 00:09:37,040
so we have only 10 parties here and

230
00:09:37,040 --> 00:09:39,760
let's say that

231
00:09:40,800 --> 00:09:44,080
the evaluator only gets the contribution

232
00:09:44,080 --> 00:09:46,080
from the second

233
00:09:46,080 --> 00:09:48,800
the seventh and the eighth parties

234
00:09:48,800 --> 00:09:50,480
together with

235
00:09:50,480 --> 00:09:52,240
alice's share

236
00:09:52,240 --> 00:09:55,920
so if we order the shares following the

237
00:09:55,920 --> 00:09:59,040
uh following the uh indices

238
00:09:59,040 --> 00:10:01,519
then the

239
00:10:01,519 --> 00:10:02,839
cherubilis

240
00:10:02,839 --> 00:10:06,240
occupies put the second position

241
00:10:06,240 --> 00:10:09,440
and our definition says that only

242
00:10:09,440 --> 00:10:13,120
the secret the second secret which is x2

243
00:10:13,120 --> 00:10:17,440
ill is revealed to the evaluator

244
00:10:17,440 --> 00:10:20,480
in this other scenario where

245
00:10:20,480 --> 00:10:22,800
p1 does not speak does not participate

246
00:10:22,800 --> 00:10:25,600
in the online phase

247
00:10:25,600 --> 00:10:26,800
but

248
00:10:26,800 --> 00:10:31,920
the party p5 p9 and p10 do participate

249
00:10:31,920 --> 00:10:33,839
the shadow values is in the first

250
00:10:33,839 --> 00:10:35,920
position this means that the evaluator

251
00:10:35,920 --> 00:10:37,839
will get only the first

252
00:10:37,839 --> 00:10:40,800
uh among the three the four secrets

253
00:10:40,800 --> 00:10:43,360
okay in this other scenario instead

254
00:10:43,360 --> 00:10:45,200
the evaluator will get only the third

255
00:10:45,200 --> 00:10:49,040
secret and nothing more than that

256
00:10:49,760 --> 00:10:51,760
so

257
00:10:51,760 --> 00:10:53,200
the way

258
00:10:53,200 --> 00:10:55,839
we construct a positional secret sharing

259
00:10:55,839 --> 00:10:57,760
is the following so

260
00:10:57,760 --> 00:10:59,519
the sharing algorithm

261
00:10:59,519 --> 00:11:00,800
will do

262
00:11:00,800 --> 00:11:03,200
something for each of the secret

263
00:11:03,200 --> 00:11:05,279
of alice but in this

264
00:11:05,279 --> 00:11:07,200
slide here i just want to give an

265
00:11:07,200 --> 00:11:10,000
example of how the sharing algorithm

266
00:11:10,000 --> 00:11:11,360
works

267
00:11:11,360 --> 00:11:13,120
in the case

268
00:11:13,120 --> 00:11:16,640
for the input x2 and for the simplified

269
00:11:16,640 --> 00:11:19,920
scenario where the index of l is is two

270
00:11:19,920 --> 00:11:21,760
so the sharing algorithm does the

271
00:11:21,760 --> 00:11:23,839
following first of all it creates a

272
00:11:23,839 --> 00:11:26,240
three out of three secret sharing thus

273
00:11:26,240 --> 00:11:29,440
creating uh what we call the left share

274
00:11:29,440 --> 00:11:30,240
um

275
00:11:30,240 --> 00:11:33,279
center share and the right share

276
00:11:33,279 --> 00:11:36,240
then for the left share we create a one

277
00:11:36,240 --> 00:11:38,800
out of one secret sharing the same we do

278
00:11:38,800 --> 00:11:39,760
for the

279
00:11:39,760 --> 00:11:41,519
center share

280
00:11:41,519 --> 00:11:43,920
and for the right share we create a one

281
00:11:43,920 --> 00:11:46,959
out of two secret sharing okay we run a

282
00:11:46,959 --> 00:11:51,440
similar process for x1 and x3

283
00:11:51,440 --> 00:11:53,120
and we

284
00:11:53,120 --> 00:11:56,320
arrange the output that we get in the

285
00:11:56,320 --> 00:11:59,040
following way

286
00:11:59,519 --> 00:12:00,880
so

287
00:12:00,880 --> 00:12:02,720
the idea is

288
00:12:02,720 --> 00:12:03,680
that

289
00:12:03,680 --> 00:12:05,600
if for example

290
00:12:05,600 --> 00:12:08,800
the evaluator gets the share s1 s2

291
00:12:08,800 --> 00:12:13,360
and 1 of s3 or s4 that's what the star

292
00:12:13,360 --> 00:12:15,040
stands for

293
00:12:15,040 --> 00:12:17,040
then we have that

294
00:12:17,040 --> 00:12:19,680
the capital s1 contains

295
00:12:19,680 --> 00:12:23,360
the one out of one secret sharing of the

296
00:12:23,360 --> 00:12:25,519
left share so we can reconstruct the

297
00:12:25,519 --> 00:12:27,120
left share

298
00:12:27,120 --> 00:12:30,959
alice contributes with the center share

299
00:12:30,959 --> 00:12:33,120
which is the ping share

300
00:12:33,120 --> 00:12:36,639
now no matter whether

301
00:12:36,639 --> 00:12:39,360
the evaluator has s3 or s4

302
00:12:39,360 --> 00:12:40,560
given that

303
00:12:40,560 --> 00:12:43,279
it is possible to reconstruct uh the

304
00:12:43,279 --> 00:12:45,200
right share with

305
00:12:45,200 --> 00:12:46,000
uh

306
00:12:46,000 --> 00:12:48,079
using a one out of two zip chaining well

307
00:12:48,079 --> 00:12:51,279
we can basically reconstruct x2 because

308
00:12:51,279 --> 00:12:52,480
we have

309
00:12:52,480 --> 00:12:55,680
all the three shares

310
00:12:56,480 --> 00:12:59,120
if for example we are in the situation

311
00:12:59,120 --> 00:13:00,000
where

312
00:13:00,000 --> 00:13:02,959
we have only s2 s3 and s4

313
00:13:02,959 --> 00:13:04,720
it is easy to see that the information

314
00:13:04,720 --> 00:13:06,639
that we have here are not sufficient to

315
00:13:06,639 --> 00:13:10,160
reconstruct x2 because we have

316
00:13:10,160 --> 00:13:11,279
missing

317
00:13:11,279 --> 00:13:12,160
the

318
00:13:12,160 --> 00:13:14,560
uh or to be precise we have no way to

319
00:13:14,560 --> 00:13:17,440
reconstruct the left share here given

320
00:13:17,440 --> 00:13:18,320
that

321
00:13:18,320 --> 00:13:24,320
s1 is not in the hands of the evaluator

322
00:13:26,000 --> 00:13:28,240
so for our construction

323
00:13:28,240 --> 00:13:29,279
we use

324
00:13:29,279 --> 00:13:32,000
the positional civic sharing scheme

325
00:13:32,000 --> 00:13:34,639
i just mentioned and a standard

326
00:13:34,639 --> 00:13:37,040
non-interactive secure multi-vertical

327
00:13:37,040 --> 00:13:39,600
competition problem which let me remind

328
00:13:39,600 --> 00:13:40,320
you

329
00:13:40,320 --> 00:13:44,079
it's a a protocol that allows

330
00:13:44,079 --> 00:13:46,800
um the parties to be colluding with the

331
00:13:46,800 --> 00:13:48,399
we evaluator

332
00:13:48,399 --> 00:13:51,360
so at a very high level uh our protocol

333
00:13:51,360 --> 00:13:53,760
works in this way so assume for

334
00:13:53,760 --> 00:13:56,560
simplicity that we have a function of

335
00:13:56,560 --> 00:13:58,320
cardinality two

336
00:13:58,320 --> 00:14:01,360
and that um only we have only three

337
00:14:01,360 --> 00:14:03,600
parties okay so what will happen here is

338
00:14:03,600 --> 00:14:06,079
that we have three parties but only two

339
00:14:06,079 --> 00:14:09,519
of those will be participating in the

340
00:14:09,519 --> 00:14:12,000
online phase

341
00:14:12,000 --> 00:14:13,680
so the first thing we need to describe

342
00:14:13,680 --> 00:14:14,959
is the setup

343
00:14:14,959 --> 00:14:17,120
during the set setup

344
00:14:17,120 --> 00:14:18,800
we create

345
00:14:18,800 --> 00:14:22,240
an encoding for all the possible inputs

346
00:14:22,240 --> 00:14:24,079
that the function f

347
00:14:24,079 --> 00:14:25,440
could get

348
00:14:25,440 --> 00:14:28,240
to be precise we have a function that

349
00:14:28,240 --> 00:14:31,600
has two inputs and we know the team the

350
00:14:31,600 --> 00:14:34,320
input of of of each part is just one bit

351
00:14:34,320 --> 00:14:36,560
so for the first input of the function

352
00:14:36,560 --> 00:14:38,720
we create an encoding of zero using the

353
00:14:38,720 --> 00:14:41,839
randomness r1 of the interactive mpc

354
00:14:41,839 --> 00:14:42,880
protocol

355
00:14:42,880 --> 00:14:45,279
and then and an including of one using

356
00:14:45,279 --> 00:14:48,240
the randomness l1 we do the same for the

357
00:14:48,240 --> 00:14:51,760
sake of the input of the function

358
00:14:52,160 --> 00:14:54,800
now i will not go into the detail of

359
00:14:54,800 --> 00:14:55,839
these

360
00:14:55,839 --> 00:14:58,560
by using our position on secret sharing

361
00:14:58,560 --> 00:15:02,880
we can create a set of shares

362
00:15:02,880 --> 00:15:04,959
that we distribute among

363
00:15:04,959 --> 00:15:06,959
the parties so

364
00:15:06,959 --> 00:15:08,639
and the idea is that

365
00:15:08,639 --> 00:15:11,680
each party now depending on the input

366
00:15:11,680 --> 00:15:12,560
can

367
00:15:12,560 --> 00:15:15,760
decide which set of shares to send to

368
00:15:15,760 --> 00:15:17,199
the evaluator

369
00:15:17,199 --> 00:15:19,279
in this case the input of the first part

370
00:15:19,279 --> 00:15:22,240
is zero and so he will send

371
00:15:22,240 --> 00:15:23,760
the

372
00:15:23,760 --> 00:15:27,199
the the set the the the set of the blue

373
00:15:27,199 --> 00:15:29,120
shares let's say

374
00:15:29,120 --> 00:15:31,519
uh whereas the third party which is the

375
00:15:31,519 --> 00:15:33,680
only other party that will participate

376
00:15:33,680 --> 00:15:35,519
to the online phase

377
00:15:35,519 --> 00:15:40,240
um has one as his input so he will use

378
00:15:40,240 --> 00:15:41,360
um

379
00:15:41,360 --> 00:15:42,480
the red

380
00:15:42,480 --> 00:15:44,720
set of shares

381
00:15:44,720 --> 00:15:46,959
the idea here is that because of the

382
00:15:46,959 --> 00:15:48,639
security of the positional secret

383
00:15:48,639 --> 00:15:50,480
sharing scheme

384
00:15:50,480 --> 00:15:53,440
the evaluator will be will be only able

385
00:15:53,440 --> 00:15:57,839
to reconstruct an encoding of zero

386
00:15:57,920 --> 00:15:59,519
for the first

387
00:15:59,519 --> 00:16:02,240
input of the function f and an encoding

388
00:16:02,240 --> 00:16:05,199
of one for the second input of the

389
00:16:05,199 --> 00:16:07,680
function f we where the encodings are

390
00:16:07,680 --> 00:16:09,440
with respect to the

391
00:16:09,440 --> 00:16:11,680
uh non-interactive multiparty

392
00:16:11,680 --> 00:16:13,440
competition problem

393
00:16:13,440 --> 00:16:15,839
at this point the evaluator can just run

394
00:16:15,839 --> 00:16:17,920
the evaluation algorithm and get

395
00:16:17,920 --> 00:16:18,639
uh

396
00:16:18,639 --> 00:16:21,600
and get the output of the function

397
00:16:21,600 --> 00:16:23,519
so what happened in the case where the

398
00:16:23,519 --> 00:16:26,000
third party for example is corrupted and

399
00:16:26,000 --> 00:16:28,079
is colluding with the elevator well in

400
00:16:28,079 --> 00:16:30,240
this case of course they can share

401
00:16:30,240 --> 00:16:32,880
everything you can share the correlated

402
00:16:32,880 --> 00:16:36,480
randomness so in this case the evaluator

403
00:16:36,480 --> 00:16:38,720
well might be able to evaluate the

404
00:16:38,720 --> 00:16:43,040
function by switching the second input

405
00:16:43,040 --> 00:16:45,920
but but this is fine because we assume

406
00:16:45,920 --> 00:16:48,720
that the underlying interactive secure

407
00:16:48,720 --> 00:16:50,639
uh

408
00:16:50,639 --> 00:16:52,240
multi-party competition protocol is

409
00:16:52,240 --> 00:16:54,880
secured against this type of attacks

410
00:16:54,880 --> 00:16:57,759
moreover we can prove that because of

411
00:16:57,759 --> 00:17:00,480
the security of the positional secret

412
00:17:00,480 --> 00:17:01,920
sharing scheme

413
00:17:01,920 --> 00:17:03,680
the fact that

414
00:17:03,680 --> 00:17:04,559
the

415
00:17:04,559 --> 00:17:07,679
third party is sharing its randomness

416
00:17:07,679 --> 00:17:10,799
everything he knows with the evaluator

417
00:17:10,799 --> 00:17:14,400
does not leak anything about the

418
00:17:14,400 --> 00:17:15,679
encodings

419
00:17:15,679 --> 00:17:18,640
for the first um

420
00:17:18,640 --> 00:17:20,400
input of the function

421
00:17:20,400 --> 00:17:22,559
that is in this example

422
00:17:22,559 --> 00:17:25,119
as long as the party p1 is honest the

423
00:17:25,119 --> 00:17:27,839
blue party the left party here

424
00:17:27,839 --> 00:17:32,400
we it is guaranteed that the encoding of

425
00:17:32,400 --> 00:17:33,600
a one

426
00:17:33,600 --> 00:17:36,160
that we denoted with the c11 is

427
00:17:36,160 --> 00:17:37,760
protected

428
00:17:37,760 --> 00:17:41,360
so the adversary in some sense he cannot

429
00:17:41,360 --> 00:17:42,960
compute the output

430
00:17:42,960 --> 00:17:48,000
of f on input one and one for example

431
00:17:48,000 --> 00:17:51,679
for on input one and zero

432
00:17:52,960 --> 00:17:55,679
as a second contribution of this work

433
00:17:55,679 --> 00:17:56,880
we consider

434
00:17:56,880 --> 00:17:57,679
um

435
00:17:57,679 --> 00:17:58,840
the notion

436
00:17:58,840 --> 00:18:02,799
of a kt secure dock private simultaneous

437
00:18:02,799 --> 00:18:04,400
message

438
00:18:04,400 --> 00:18:06,799
um so this notion

439
00:18:06,799 --> 00:18:10,799
uh doesn't allow corruption of the uh

440
00:18:10,799 --> 00:18:14,799
of parties other than the evaluator

441
00:18:14,799 --> 00:18:15,679
but

442
00:18:15,679 --> 00:18:18,039
uh it has the natural

443
00:18:18,039 --> 00:18:21,440
relaxation that the number of parts that

444
00:18:21,440 --> 00:18:24,080
could be aligned is not fixed so in the

445
00:18:24,080 --> 00:18:28,080
previous example we had n parties and

446
00:18:28,080 --> 00:18:30,880
only a subset of k parties might be

447
00:18:30,880 --> 00:18:32,720
participating in the online phase

448
00:18:32,720 --> 00:18:34,880
whereas in this notion any subset of

449
00:18:34,880 --> 00:18:38,480
sites t can be participated

450
00:18:38,480 --> 00:18:41,120
um so

451
00:18:41,120 --> 00:18:43,440
unfortunately for genetic parameters of

452
00:18:43,440 --> 00:18:45,760
tk and then this notion implies a

453
00:18:45,760 --> 00:18:47,280
position in distinguishability of

454
00:18:47,280 --> 00:18:48,480
foscation

455
00:18:48,480 --> 00:18:49,360
and

456
00:18:49,360 --> 00:18:51,919
what we do in this work is showing uh

457
00:18:51,919 --> 00:18:53,360
that if

458
00:18:53,360 --> 00:18:54,480
actually

459
00:18:54,480 --> 00:18:57,360
um we are we want to compute our k input

460
00:18:57,360 --> 00:18:58,400
function

461
00:18:58,400 --> 00:18:59,679
and the number of parties that

462
00:18:59,679 --> 00:19:02,080
participate in the online phase is k

463
00:19:02,080 --> 00:19:05,840
plus c where c is some constant

464
00:19:05,840 --> 00:19:08,799
uh then we can still get uh a secure

465
00:19:08,799 --> 00:19:10,640
protocol

466
00:19:10,640 --> 00:19:13,679
and in our construction um the input of

467
00:19:13,679 --> 00:19:16,559
the parties are strings uh

468
00:19:16,559 --> 00:19:17,360
that

469
00:19:17,360 --> 00:19:19,120
compared to the previous construction we

470
00:19:19,120 --> 00:19:20,880
were able only to achieve a protocol

471
00:19:20,880 --> 00:19:23,120
securing the case where the input of the

472
00:19:23,120 --> 00:19:24,960
parties are just a

473
00:19:24,960 --> 00:19:27,600
single piece

474
00:19:27,919 --> 00:19:29,600
another question is whether the previous

475
00:19:29,600 --> 00:19:31,679
construction satisfies

476
00:19:31,679 --> 00:19:34,240
already this notion whether there is

477
00:19:34,240 --> 00:19:36,880
need to do some work so

478
00:19:36,880 --> 00:19:38,960
to give an example

479
00:19:38,960 --> 00:19:41,039
about how challenging is this task

480
00:19:41,039 --> 00:19:43,039
consider the case where

481
00:19:43,039 --> 00:19:45,440
we have again a k input function but now

482
00:19:45,440 --> 00:19:47,840
k plus one parties might participate to

483
00:19:47,840 --> 00:19:49,280
the online base

484
00:19:49,280 --> 00:19:51,760
and in this case for example we have the

485
00:19:51,760 --> 00:19:53,039
party from

486
00:19:53,039 --> 00:19:56,880
p1 to pk plus 1 to be contributing with

487
00:19:56,880 --> 00:19:58,320
their input

488
00:19:58,320 --> 00:20:00,720
another evaluator can compute

489
00:20:00,720 --> 00:20:03,039
can can can emulate the function on the

490
00:20:03,039 --> 00:20:04,960
first k inputs

491
00:20:04,960 --> 00:20:06,480
or in the

492
00:20:06,480 --> 00:20:07,679
in the last

493
00:20:07,679 --> 00:20:10,480
uh k inputs so by discarding the first

494
00:20:10,480 --> 00:20:12,159
one by

495
00:20:12,159 --> 00:20:13,039
um

496
00:20:13,039 --> 00:20:15,440
we're doing the computation the last k

497
00:20:15,440 --> 00:20:17,120
values

498
00:20:17,120 --> 00:20:20,080
and now this is problematic because if

499
00:20:20,080 --> 00:20:23,760
because the inputs might be such that

500
00:20:23,760 --> 00:20:26,880
by doing this shift of one position in

501
00:20:26,880 --> 00:20:29,919
the input that go

502
00:20:29,919 --> 00:20:32,400
in the evaluation of the function

503
00:20:32,400 --> 00:20:36,799
it may be that all the inputs now change

504
00:20:36,799 --> 00:20:38,880
so in this example let's say that the

505
00:20:38,880 --> 00:20:40,960
input of the parties can be described in

506
00:20:40,960 --> 00:20:42,720
this way let's say that they are just

507
00:20:42,720 --> 00:20:45,760
bit right we have one zero one zero one

508
00:20:45,760 --> 00:20:47,919
no inverse second could be the output of

509
00:20:47,919 --> 00:20:49,200
this function

510
00:20:49,200 --> 00:20:50,880
but you can compute also the output of

511
00:20:50,880 --> 00:20:53,600
the of this function where all

512
00:20:53,600 --> 00:20:56,640
the input in all the positions like

513
00:20:56,640 --> 00:20:59,280
uh have been uh switched

514
00:20:59,280 --> 00:21:00,080
and

515
00:21:00,080 --> 00:21:01,919
there is no way that we can argue

516
00:21:01,919 --> 00:21:05,200
security in this setting by relying on a

517
00:21:05,200 --> 00:21:07,600
non-interactive mpc protocol

518
00:21:07,600 --> 00:21:09,440
that allows

519
00:21:09,440 --> 00:21:11,919
um only the corruption of a

520
00:21:11,919 --> 00:21:13,919
constant number of parties because here

521
00:21:13,919 --> 00:21:15,760
it's like

522
00:21:15,760 --> 00:21:18,400
all the parties have been corrupted and

523
00:21:18,400 --> 00:21:20,559
so university can change the inputs in

524
00:21:20,559 --> 00:21:24,640
all the positions of the function

525
00:21:24,640 --> 00:21:26,559
so what we do in our work

526
00:21:26,559 --> 00:21:30,720
is that we prove that our scheme

527
00:21:30,720 --> 00:21:32,720
positional script sharing scheme enjoys

528
00:21:32,720 --> 00:21:34,960
a stronger security notion

529
00:21:34,960 --> 00:21:37,919
and we show that together with the

530
00:21:37,919 --> 00:21:40,000
learning with our assumptions

531
00:21:40,000 --> 00:21:41,200
we can

532
00:21:41,200 --> 00:21:43,600
we can achieve

533
00:21:43,600 --> 00:21:45,919
we can achieve this this notion where

534
00:21:45,919 --> 00:21:49,600
again like we allow um k plus c parties

535
00:21:49,600 --> 00:21:51,840
to be aligned where c is not known but

536
00:21:51,840 --> 00:21:53,919
it must be constant and where the input

537
00:21:53,919 --> 00:21:55,600
of all the parties is

538
00:21:55,600 --> 00:21:56,840
um are

539
00:21:56,840 --> 00:21:59,919
strings so in conclusion we have

540
00:21:59,919 --> 00:22:02,799
introduced a new notion that allows both

541
00:22:02,799 --> 00:22:06,320
corruptions of the parties and allows if

542
00:22:06,320 --> 00:22:08,240
the evaluator evaluating a function

543
00:22:08,240 --> 00:22:10,840
without having all the end parties being

544
00:22:10,840 --> 00:22:12,799
online

545
00:22:12,799 --> 00:22:15,120
and we provide a construction in the

546
00:22:15,120 --> 00:22:16,799
secure adult private simultaneous

547
00:22:16,799 --> 00:22:19,520
message model

548
00:22:19,600 --> 00:22:21,600
for the case where the parties that can

549
00:22:21,600 --> 00:22:23,760
be aligned is cardinality of the

550
00:22:23,760 --> 00:22:27,039
function plus some constant and

551
00:22:27,039 --> 00:22:28,320
uh

552
00:22:28,320 --> 00:22:30,880
in this way we solve a problem that uh

553
00:22:30,880 --> 00:22:34,640
was um left open in the work of being at

554
00:22:34,640 --> 00:22:35,440
all

555
00:22:35,440 --> 00:22:37,120
in europe

556
00:22:37,120 --> 00:22:39,919
2017. so this construction although

557
00:22:39,919 --> 00:22:42,240
relies on the learning with errors

558
00:22:42,240 --> 00:22:43,760
assumption whereas the previous

559
00:22:43,760 --> 00:22:44,960
construction of the threshold

560
00:22:44,960 --> 00:22:46,640
non-interactive mpc

561
00:22:46,640 --> 00:22:50,480
um just relies on longer functions

562
00:22:50,480 --> 00:22:52,480
and with this uh

563
00:22:52,480 --> 00:22:55,840
thank you very much

