1
00:00:00,080 --> 00:00:02,480
spawned hoping to be able to welcome you

2
00:00:02,480 --> 00:00:04,000
all here physically

3
00:00:04,000 --> 00:00:06,080
and have different problems

4
00:00:06,080 --> 00:00:07,680
than we had last year with hybrids so

5
00:00:07,680 --> 00:00:09,440
we'll be happy to to worry about if

6
00:00:09,440 --> 00:00:11,519
there is enough coffee or vegetarian

7
00:00:11,519 --> 00:00:13,120
food or stuff like that so it's really

8
00:00:13,120 --> 00:00:15,759
great to have this event today here

9
00:00:15,759 --> 00:00:17,359
starting

10
00:00:17,359 --> 00:00:19,039
and we're just not going to keep you too

11
00:00:19,039 --> 00:00:21,199
long we want to start as soon as

12
00:00:21,199 --> 00:00:23,199
possible with our technical program but

13
00:00:23,199 --> 00:00:25,439
let's just give you some um

14
00:00:25,439 --> 00:00:28,800
kind of logistic details and uh some

15
00:00:28,800 --> 00:00:31,920
heads up to see what's what's ahead so

16
00:00:31,920 --> 00:00:32,800
this is

17
00:00:32,800 --> 00:00:35,120
officially the first icr hybrid

18
00:00:35,120 --> 00:00:37,440
conference so we were also the first

19
00:00:37,440 --> 00:00:39,360
online conference so we have many firsts

20
00:00:39,360 --> 00:00:41,760
so stephan and me so that's also great

21
00:00:41,760 --> 00:00:43,440
and you see some numbers here but we're

22
00:00:43,440 --> 00:00:45,280
going to update those still because

23
00:00:45,280 --> 00:00:47,360
people are still registering especially

24
00:00:47,360 --> 00:00:50,239
online so that's easy uh but yeah at the

25
00:00:50,239 --> 00:00:53,520
moment we have close to 260 people

26
00:00:53,520 --> 00:00:55,760
physically here in zagreb

27
00:00:55,760 --> 00:00:57,520
uh out of which more than half are

28
00:00:57,520 --> 00:01:01,039
students which is another i think a

29
00:01:01,039 --> 00:01:04,159
major change for isr events because like

30
00:01:04,159 --> 00:01:06,960
yeah students seem seem to be more happy

31
00:01:06,960 --> 00:01:09,840
to to go back to traveling and kind of

32
00:01:09,840 --> 00:01:13,200
sort of normal life um at the moment

33
00:01:13,200 --> 00:01:15,560
when i checked this morning i was

34
00:01:15,560 --> 00:01:18,640
425 or so online it could be more

35
00:01:18,640 --> 00:01:20,880
already now and it's with this this

36
00:01:20,880 --> 00:01:23,439
number will for sure increase but yeah

37
00:01:23,439 --> 00:01:25,920
uh that's definitely gonna beat the

38
00:01:25,920 --> 00:01:28,159
physical attendants but that's fine i

39
00:01:28,159 --> 00:01:29,840
guess we are still happy

40
00:01:29,840 --> 00:01:31,840
um yeah there are quite some new istr

41
00:01:31,840 --> 00:01:34,560
members out of those so let's see how uh

42
00:01:34,560 --> 00:01:36,880
that also changes so we're gonna update

43
00:01:36,880 --> 00:01:39,119
you in the ram session talk on the

44
00:01:39,119 --> 00:01:41,040
numbers

45
00:01:41,040 --> 00:01:43,280
okay

46
00:01:47,119 --> 00:01:49,600
okay so this is the schedule

47
00:01:49,600 --> 00:01:51,520
the conference program is running from

48
00:01:51,520 --> 00:01:53,439
monday to thursday

49
00:01:53,439 --> 00:01:56,159
so we'll have lunches and coffee breaks

50
00:01:56,159 --> 00:01:57,759
in the hall

51
00:01:57,759 --> 00:02:00,719
um except the online people of course

52
00:02:00,719 --> 00:02:04,000
ram session is tomorrow evening and

53
00:02:04,000 --> 00:02:06,560
all the details are available online so

54
00:02:06,560 --> 00:02:09,038
check the website you still have time to

55
00:02:09,038 --> 00:02:10,560
submit

56
00:02:10,560 --> 00:02:13,200
both here and online so that's that's

57
00:02:13,200 --> 00:02:15,920
great um i hope you keep

58
00:02:15,920 --> 00:02:17,520
peter and andy busy with your

59
00:02:17,520 --> 00:02:18,879
submissions

60
00:02:18,879 --> 00:02:21,200
um and then as usual like in all times

61
00:02:21,200 --> 00:02:23,680
we have banquet on wednesday from 7 to

62
00:02:23,680 --> 00:02:24,800
10 p.m

63
00:02:24,800 --> 00:02:26,959
as japan will show the event in a bit

64
00:02:26,959 --> 00:02:29,120
and buses will leave from in front of

65
00:02:29,120 --> 00:02:30,959
the hotel at 6 30

66
00:02:30,959 --> 00:02:32,640
started leaving and then there are five

67
00:02:32,640 --> 00:02:33,599
buses

68
00:02:33,599 --> 00:02:36,319
so make sure that you are not too late

69
00:02:36,319 --> 00:02:38,560
okay

70
00:02:38,560 --> 00:02:39,680
yeah

71
00:02:39,680 --> 00:02:41,519
important part are some rules some

72
00:02:41,519 --> 00:02:43,200
corona rules so i will hand over to

73
00:02:43,200 --> 00:02:45,200
stephen for that

74
00:02:45,200 --> 00:02:48,800
thank you so yes please wear your badges

75
00:02:48,800 --> 00:02:51,040
all the time it's because of corona

76
00:02:51,040 --> 00:02:53,040
rules we kind of need to know how many

77
00:02:53,040 --> 00:02:55,120
people actually do we have in room and

78
00:02:55,120 --> 00:02:58,080
are all those people registered

79
00:02:58,080 --> 00:03:00,560
have your covet vaccination or test

80
00:03:00,560 --> 00:03:02,239
proof also with you

81
00:03:02,239 --> 00:03:04,480
so we do not expect controls but we

82
00:03:04,480 --> 00:03:06,239
could get a control

83
00:03:06,239 --> 00:03:08,560
and wear your mask except when seated

84
00:03:08,560 --> 00:03:10,959
and during meals so now you are not

85
00:03:10,959 --> 00:03:12,640
obliged to wear a mask if you want to

86
00:03:12,640 --> 00:03:14,480
wear it yeah feel free

87
00:03:14,480 --> 00:03:17,200
it's fine of course

88
00:03:17,200 --> 00:03:19,440
if you have any questions you will see

89
00:03:19,440 --> 00:03:21,840
many many students with

90
00:03:21,840 --> 00:03:25,519
pink shirts t-shirts with uh writing ask

91
00:03:25,519 --> 00:03:27,920
me anything like the lady here so you

92
00:03:27,920 --> 00:03:31,920
can use opportunity and ask anything

93
00:03:31,920 --> 00:03:33,519
of course there is also registration

94
00:03:33,519 --> 00:03:36,000
desk at the main entrance so please

95
00:03:36,000 --> 00:03:37,680
register there if you did not there are

96
00:03:37,680 --> 00:03:39,920
also city maps there and things like

97
00:03:39,920 --> 00:03:42,080
that

98
00:03:42,080 --> 00:03:44,480
social program so what do we have for

99
00:03:44,480 --> 00:03:46,799
you there will be city tours every day

100
00:03:46,799 --> 00:03:48,239
in the afternoon

101
00:03:48,239 --> 00:03:50,879
sign up at the registration desk there

102
00:03:50,879 --> 00:03:53,840
is limited number of places for every

103
00:03:53,840 --> 00:03:56,159
tour we have monday tuesday wednesday

104
00:03:56,159 --> 00:03:59,360
thursday tours monday thursday starting

105
00:03:59,360 --> 00:04:03,599
5 15 so after the program and two hours

106
00:04:03,599 --> 00:04:05,920
tomorrow wednesday starting at four so

107
00:04:05,920 --> 00:04:07,840
that you finish before ramp session

108
00:04:07,840 --> 00:04:11,840
before banquet and lasting 90 minutes

109
00:04:11,840 --> 00:04:14,080
all the tours will start at the western

110
00:04:14,080 --> 00:04:15,519
entrance and

111
00:04:15,519 --> 00:04:18,079
finish somewhere close to westin

112
00:04:18,079 --> 00:04:19,519
for banquet

113
00:04:19,519 --> 00:04:21,519
buses will be picking up and bringing

114
00:04:21,519 --> 00:04:24,639
you back so you can see here the

115
00:04:24,639 --> 00:04:27,120
the room form welder the

116
00:04:27,120 --> 00:04:29,120
hall for the blanket and you can see a

117
00:04:29,120 --> 00:04:30,800
small

118
00:04:30,800 --> 00:04:33,120
it's called lava yes if you wanna google

119
00:04:33,120 --> 00:04:36,400
it you can also see a picture of the

120
00:04:36,400 --> 00:04:38,639
interior the decoration although this

121
00:04:38,639 --> 00:04:41,120
was for wedding so we do not get exact

122
00:04:41,120 --> 00:04:43,280
exactly the same one

123
00:04:43,280 --> 00:04:45,440
we get close of course and do not worry

124
00:04:45,440 --> 00:04:49,440
so the uh the hole is huge it's 1200 uh

125
00:04:49,440 --> 00:04:52,320
square meters so it's more than all of

126
00:04:52,320 --> 00:04:54,639
us by all the corona rules

127
00:04:54,639 --> 00:04:58,960
and then some that being said

128
00:04:59,280 --> 00:05:00,479
uh

129
00:05:00,479 --> 00:05:03,680
back to layla yes so just last same as

130
00:05:03,680 --> 00:05:06,160
last year we kept all the sponsors so

131
00:05:06,160 --> 00:05:08,080
the sponsorship just rolled over to this

132
00:05:08,080 --> 00:05:10,479
edition and we're again happy to thank

133
00:05:10,479 --> 00:05:14,000
you for so then their long-term support

134
00:05:14,000 --> 00:05:16,080
uh in particular ti technology

135
00:05:16,080 --> 00:05:17,759
innovation institute is our platinum

136
00:05:17,759 --> 00:05:21,280
sponsor then our golden sponsors calibra

137
00:05:21,280 --> 00:05:22,240
visa

138
00:05:22,240 --> 00:05:25,400
and google

139
00:05:26,240 --> 00:05:29,120
and then some more silver and bronze

140
00:05:29,120 --> 00:05:32,000
hardware i o crypto experts ibm research

141
00:05:32,000 --> 00:05:35,360
rambus bq shield cloudflare

142
00:05:35,360 --> 00:05:36,639
platinum

143
00:05:36,639 --> 00:05:40,400
sera and intrinsic id

144
00:05:41,360 --> 00:05:43,600
of course also many thanks to eacr

145
00:05:43,600 --> 00:05:46,160
corona committee program chairs and

146
00:05:46,160 --> 00:05:48,560
canto and fx standard

147
00:05:48,560 --> 00:05:50,639
local support marin golub domingo

148
00:05:50,639 --> 00:05:53,759
akobovic k mckelly and kevin mccurley of

149
00:05:53,759 --> 00:05:56,080
course thank you very much for a lot of

150
00:05:56,080 --> 00:05:57,280
things done

151
00:05:57,280 --> 00:06:00,240
peter schwab for affiliated events chair

152
00:06:00,240 --> 00:06:02,479
and of course rugby team many many

153
00:06:02,479 --> 00:06:05,680
students and professors so simona webb

154
00:06:05,680 --> 00:06:07,360
chair marlouz

155
00:06:07,360 --> 00:06:09,360
stipend liarson then charlotte

156
00:06:09,360 --> 00:06:13,280
constantina krein lucas monica parisa

157
00:06:13,280 --> 00:06:16,160
in the shirts and then irma and shanley

158
00:06:16,160 --> 00:06:18,080
visa letters more

159
00:06:18,080 --> 00:06:20,400
and yeah thank you all

160
00:06:20,400 --> 00:06:23,120
that being said thank you all

161
00:06:23,120 --> 00:06:25,600
in the audience and also you virtually

162
00:06:25,600 --> 00:06:28,240
present for coming or attending

163
00:06:28,240 --> 00:06:30,960
follow us on twitter and yeah enjoy the

164
00:06:30,960 --> 00:06:33,960
conference

165
00:06:41,280 --> 00:06:43,199
so we're going to start with our first

166
00:06:43,199 --> 00:06:44,800
technical session

167
00:06:44,800 --> 00:06:47,039
which is the

168
00:06:47,039 --> 00:06:50,160
best paper award including and session

169
00:06:50,160 --> 00:06:52,000
chair is christian

170
00:06:52,000 --> 00:06:53,759
long time no see

171
00:06:53,759 --> 00:06:55,919
thank you well long time no see for

172
00:06:55,919 --> 00:06:58,880
everyone here now we see okay

173
00:06:58,880 --> 00:07:00,560
um good morning everyone good afternoon

174
00:07:00,560 --> 00:07:03,199
good evening wherever you are um

175
00:07:03,199 --> 00:07:05,120
especially also half of the attendees

176
00:07:05,120 --> 00:07:06,479
definitely in the room

177
00:07:06,479 --> 00:07:09,039
um feels great but also special to be

178
00:07:09,039 --> 00:07:11,919
here um also knowing that um

179
00:07:11,919 --> 00:07:15,599
in my previous role as the

180
00:07:15,599 --> 00:07:16,479
uh

181
00:07:16,479 --> 00:07:18,240
president i was talking to layla and

182
00:07:18,240 --> 00:07:20,639
stefan years ago already about this

183
00:07:20,639 --> 00:07:22,800
conference and so i'm really glad to

184
00:07:22,800 --> 00:07:25,759
finally uh see it happen and see it

185
00:07:25,759 --> 00:07:31,840
starting in uh zagreb okay um

186
00:07:32,479 --> 00:07:35,039
i see kevin here now we had a busy

187
00:07:35,039 --> 00:07:38,240
weekend especially kevin because

188
00:07:38,240 --> 00:07:41,360
the isr servers power supply

189
00:07:41,360 --> 00:07:43,680
died and that's why some of the websites

190
00:07:43,680 --> 00:07:45,280
were not available over the weekend but

191
00:07:45,280 --> 00:07:48,080
now i think much of it is restored but

192
00:07:48,080 --> 00:07:51,039
not everything yet anyway um let's go

193
00:07:51,039 --> 00:07:52,400
over to

194
00:07:52,400 --> 00:07:54,479
the technical program then this is a

195
00:07:54,479 --> 00:07:58,479
special session i understand because

196
00:07:58,479 --> 00:07:59,520
it will

197
00:07:59,520 --> 00:08:02,080
have longer talks than the others it's

198
00:08:02,080 --> 00:08:04,800
the best papers uh the best paper awards

199
00:08:04,800 --> 00:08:08,400
session and so i would welcome the first

200
00:08:08,400 --> 00:08:10,400
speaker presenting the first paper

201
00:08:10,400 --> 00:08:12,319
non-interactive zero knowledge from sub

202
00:08:12,319 --> 00:08:14,400
exponential ddh

203
00:08:14,400 --> 00:08:16,960
uh by abhishek chain and zheng zhong jin

204
00:08:16,960 --> 00:08:18,479
um

205
00:08:18,479 --> 00:08:19,520
zhong

206
00:08:19,520 --> 00:08:21,520
where in the world are you can you hear

207
00:08:21,520 --> 00:08:22,879
us can we hear you

208
00:08:22,879 --> 00:08:25,120
uh can you hear me hello

209
00:08:25,120 --> 00:08:27,919
yes it works perfectly yes over to you

210
00:08:27,919 --> 00:08:30,000
i'm going to withdraw to the side and

211
00:08:30,000 --> 00:08:32,799
the floor is yours

212
00:08:33,279 --> 00:08:36,159
thanks for the introduction so this work

213
00:08:36,159 --> 00:08:37,360
is about

214
00:08:37,360 --> 00:08:39,360
non-interactive general knowledge

215
00:08:39,360 --> 00:08:42,240
from self-exponential ddh i'm jung dong

216
00:08:42,240 --> 00:08:44,320
jin from johns hopkins university and

217
00:08:44,320 --> 00:08:48,160
this work is joined with abstract gen

218
00:08:49,680 --> 00:08:51,519
so non-interactive general knowledge

219
00:08:51,519 --> 00:08:54,000
protocol is a two-party protocol between

220
00:08:54,000 --> 00:08:55,920
approver and a verifier

221
00:08:55,920 --> 00:08:58,959
in the crs model so the proofer tries to

222
00:08:58,959 --> 00:09:01,279
convince the verifier that some instance

223
00:09:01,279 --> 00:09:03,760
x is in some mp language l

224
00:09:03,760 --> 00:09:05,920
by sending a single round of message to

225
00:09:05,920 --> 00:09:07,839
the

226
00:09:07,839 --> 00:09:10,560
then the weber can decide to accept or

227
00:09:10,560 --> 00:09:13,120
reject the proof

228
00:09:13,120 --> 00:09:15,519
we require the following properties of

229
00:09:15,519 --> 00:09:16,959
the non-interactive zero knowledge

230
00:09:16,959 --> 00:09:19,519
protocol for completeness we request

231
00:09:19,519 --> 00:09:22,160
that for any instance x that is in this

232
00:09:22,160 --> 00:09:23,600
language l

233
00:09:23,600 --> 00:09:25,839
the welfare should always accept the

234
00:09:25,839 --> 00:09:28,640
only study generated proof

235
00:09:28,640 --> 00:09:31,519
well for the soundness we request that

236
00:09:31,519 --> 00:09:33,839
for any instance x that is not in this

237
00:09:33,839 --> 00:09:35,920
language l the wi-fi should always

238
00:09:35,920 --> 00:09:39,200
reject the cheating proof

239
00:09:39,200 --> 00:09:40,800
and finally for the zero knowledge

240
00:09:40,800 --> 00:09:43,519
property request that the proof should

241
00:09:43,519 --> 00:09:45,680
not reveals nothing else beyond the fact

242
00:09:45,680 --> 00:09:49,680
that x is in this language l

243
00:09:49,680 --> 00:09:51,839
so under water assumptions can we

244
00:09:51,839 --> 00:09:54,720
contract music

245
00:09:54,959 --> 00:09:56,560
on the private works

246
00:09:56,560 --> 00:09:58,560
we know how to construct physics from a

247
00:09:58,560 --> 00:10:01,600
batch of assumptions such as quadratic

248
00:10:01,600 --> 00:10:05,040
rate velocity factoring binary maps

249
00:10:05,040 --> 00:10:08,320
and originally by the work of kennedy

250
00:10:08,320 --> 00:10:10,480
and also by pakistan

251
00:10:10,480 --> 00:10:12,160
they constructed music from learning

252
00:10:12,160 --> 00:10:13,170
with arrows

253
00:10:13,170 --> 00:10:14,480
[Music]

254
00:10:14,480 --> 00:10:16,880
and also by reading the beautiful work

255
00:10:16,880 --> 00:10:18,480
by prax key at all

256
00:10:18,480 --> 00:10:20,560
they construct the music from learning

257
00:10:20,560 --> 00:10:22,240
parody with noise and the tropical hash

258
00:10:22,240 --> 00:10:23,839
functions

259
00:10:23,839 --> 00:10:25,839
while the triple hash function

260
00:10:25,839 --> 00:10:27,600
are known for most of the standard

261
00:10:27,600 --> 00:10:29,279
assumptions

262
00:10:29,279 --> 00:10:31,440
such as ddh learning with arrow

263
00:10:31,440 --> 00:10:35,600
quadratic residuosity and dcr etc

264
00:10:35,600 --> 00:10:38,000
as you can see from this list it seems

265
00:10:38,000 --> 00:10:39,040
that

266
00:10:39,040 --> 00:10:41,040
we know how to contract the physics from

267
00:10:41,040 --> 00:10:43,120
most of the standard assumptions that

268
00:10:43,120 --> 00:10:45,680
implies public encryption

269
00:10:45,680 --> 00:10:48,000
and a notable exception from this list

270
00:10:48,000 --> 00:10:50,000
is the assumptions related to the

271
00:10:50,000 --> 00:10:53,120
discrete logarithm

272
00:10:53,519 --> 00:10:55,760
so in this work we study the following

273
00:10:55,760 --> 00:10:56,880
question

274
00:10:56,880 --> 00:11:01,399
do there exist physics from ddh

275
00:11:02,000 --> 00:11:04,240
answering this question can also help us

276
00:11:04,240 --> 00:11:06,320
understand the gap between pairing and

277
00:11:06,320 --> 00:11:08,240
non-parent groups

278
00:11:08,240 --> 00:11:10,399
for example for those cryptographic

279
00:11:10,399 --> 00:11:12,880
primitives that we know how to build

280
00:11:12,880 --> 00:11:14,560
them from parent groups

281
00:11:14,560 --> 00:11:16,399
can we also build them from non-parent

282
00:11:16,399 --> 00:11:18,560
groups

283
00:11:18,560 --> 00:11:20,240
for example in the setting of

284
00:11:20,240 --> 00:11:22,720
attribute-based encryption where we know

285
00:11:22,720 --> 00:11:26,240
how to build ape from pairing groups

286
00:11:26,240 --> 00:11:28,320
we don't know how to build them from

287
00:11:28,320 --> 00:11:30,399
non-parent groups

288
00:11:30,399 --> 00:11:32,399
well in the context of identity based

289
00:11:32,399 --> 00:11:34,160
encryption

290
00:11:34,160 --> 00:11:36,240
such gap was closed by the work of

291
00:11:36,240 --> 00:11:38,880
darting and guards

292
00:11:38,880 --> 00:11:41,760
in this work however our focus is on the

293
00:11:41,760 --> 00:11:43,920
setting of genetics where we know how to

294
00:11:43,920 --> 00:11:46,480
build the physics from pairing groups

295
00:11:46,480 --> 00:11:48,560
but so far we don't know how to build

296
00:11:48,560 --> 00:11:51,839
them from non-parent groups

297
00:11:53,120 --> 00:11:56,480
so in this work we seek to understand

298
00:11:56,480 --> 00:12:00,079
whether such gaps are inherent

299
00:12:00,320 --> 00:12:02,959
note that if you allow non-standard

300
00:12:02,959 --> 00:12:04,959
assumptions then we do know how to

301
00:12:04,959 --> 00:12:09,800
construct music from non-parent groups

302
00:12:10,160 --> 00:12:13,440
so here is our first result

303
00:12:13,440 --> 00:12:15,279
we constructed music arguments for

304
00:12:15,279 --> 00:12:17,279
general mp language

305
00:12:17,279 --> 00:12:19,839
we have two constructions with different

306
00:12:19,839 --> 00:12:21,440
zero knowledge property and soundness

307
00:12:21,440 --> 00:12:23,040
properties

308
00:12:23,040 --> 00:12:25,360
and both of our constructions are in the

309
00:12:25,360 --> 00:12:28,800
common random crs model

310
00:12:28,800 --> 00:12:30,240
both of them are based on the

311
00:12:30,240 --> 00:12:32,720
sub-exponential ddh assumption in the

312
00:12:32,720 --> 00:12:36,079
standard non-parallel groups

313
00:12:37,120 --> 00:12:39,440
the ddh the sub-exponential ddh

314
00:12:39,440 --> 00:12:42,800
assumption in this work is as follows

315
00:12:42,800 --> 00:12:45,839
we assume that for any probabilistic

316
00:12:45,839 --> 00:12:48,000
polynomial time adversary

317
00:12:48,000 --> 00:12:48,720
the

318
00:12:48,720 --> 00:12:51,120
uh the it is hard

319
00:12:51,120 --> 00:12:54,399
for it to distinguish the ddh tuple and

320
00:12:54,399 --> 00:12:56,880
the random tuple by more than sub

321
00:12:56,880 --> 00:12:59,680
exponential amount

322
00:13:01,279 --> 00:13:03,600
in this work we also constructed the

323
00:13:03,600 --> 00:13:05,760
statistical zap arguments for suffix

324
00:13:05,760 --> 00:13:07,760
potential dedication assumption with

325
00:13:07,760 --> 00:13:10,560
non-adaptive soundness

326
00:13:10,560 --> 00:13:13,360
so the statistical zapped arguments

327
00:13:13,360 --> 00:13:15,920
are the two-round public coin witness

328
00:13:15,920 --> 00:13:18,000
indistinguishable protocol with

329
00:13:18,000 --> 00:13:19,519
statistical witness in

330
00:13:19,519 --> 00:13:22,519
distinguishability

331
00:13:23,279 --> 00:13:25,760
so why this result is interesting

332
00:13:25,760 --> 00:13:28,560
it's because previously we only know we

333
00:13:28,560 --> 00:13:30,240
don't know any statistical type

334
00:13:30,240 --> 00:13:33,839
arguments from group based

335
00:13:33,839 --> 00:13:36,320
so this is the case if you even if you

336
00:13:36,320 --> 00:13:39,519
assume bilinear maps

337
00:13:41,279 --> 00:13:44,000
so in the uh in the rest of the talk

338
00:13:44,000 --> 00:13:46,399
so in this talk i will mainly focus on

339
00:13:46,399 --> 00:13:48,880
our first result and if you are

340
00:13:48,880 --> 00:13:51,040
interested in our second result you can

341
00:13:51,040 --> 00:13:55,199
refer to our paper for more details

342
00:13:55,440 --> 00:13:57,440
so central to our method

343
00:13:57,440 --> 00:13:59,680
is the finished jammer paradigm

344
00:13:59,680 --> 00:14:02,160
so next let me record the finisher

345
00:14:02,160 --> 00:14:05,040
mirror transformation

346
00:14:05,600 --> 00:14:07,839
the financial mail transformation allows

347
00:14:07,839 --> 00:14:09,920
you to collapse a public coin

348
00:14:09,920 --> 00:14:11,839
interactive protocol into a

349
00:14:11,839 --> 00:14:13,440
non-interactive one

350
00:14:13,440 --> 00:14:16,000
by replacing all the wi-fi message with

351
00:14:16,000 --> 00:14:19,680
the hash of the transcript so far

352
00:14:20,800 --> 00:14:22,639
and the soundness of the resulting

353
00:14:22,639 --> 00:14:24,959
non-interactive protocol was firstly

354
00:14:24,959 --> 00:14:28,959
proven sound in the random oracle model

355
00:14:29,519 --> 00:14:31,519
later by a long line of research

356
00:14:31,519 --> 00:14:34,320
initiated by candidate or starting to

357
00:14:34,320 --> 00:14:36,560
instantiate this hash function in the

358
00:14:36,560 --> 00:14:38,240
standard model

359
00:14:38,240 --> 00:14:40,240
and the high-level intuition to

360
00:14:40,240 --> 00:14:42,839
construct such hash functions is as

361
00:14:42,839 --> 00:14:45,279
follows we want to build such a harsh

362
00:14:45,279 --> 00:14:47,760
functional edge such that the input and

363
00:14:47,760 --> 00:14:50,800
output and the output pair of this hash

364
00:14:50,800 --> 00:14:53,040
function don't satisfy any bad

365
00:14:53,040 --> 00:14:55,760
correlations

366
00:14:57,040 --> 00:14:59,760
so the workload by kanita

367
00:14:59,760 --> 00:15:01,680
formalized this intuition as the

368
00:15:01,680 --> 00:15:04,720
correlation in charcoal hash function

369
00:15:04,720 --> 00:15:06,959
such a hash function is in fact an

370
00:15:06,959 --> 00:15:09,360
example of a hash that is indexed by

371
00:15:09,360 --> 00:15:10,880
some key k

372
00:15:10,880 --> 00:15:13,279
where this key k is some binary string

373
00:15:13,279 --> 00:15:16,320
of polynomial lengths

374
00:15:16,639 --> 00:15:18,560
and in this talk i will use the

375
00:15:18,560 --> 00:15:20,480
correlation travel hash function

376
00:15:20,480 --> 00:15:22,240
for functions

377
00:15:22,240 --> 00:15:23,519
so we say

378
00:15:23,519 --> 00:15:24,320
a

379
00:15:24,320 --> 00:15:25,760
hash function is correlation

380
00:15:25,760 --> 00:15:29,440
interchangeable for a function class f

381
00:15:29,440 --> 00:15:31,440
if for any function in this function

382
00:15:31,440 --> 00:15:33,040
class

383
00:15:33,040 --> 00:15:35,600
for any efficient adversary

384
00:15:35,600 --> 00:15:38,000
if we give it this adversary our key k

385
00:15:38,000 --> 00:15:40,399
sampled by the tj algorithm

386
00:15:40,399 --> 00:15:42,639
then it is hard for it to find the sum

387
00:15:42,639 --> 00:15:45,120
input x such that the heart of x equals

388
00:15:45,120 --> 00:15:47,839
to f of x

389
00:15:49,440 --> 00:15:51,519
such notion of correlation integral hash

390
00:15:51,519 --> 00:15:52,480
function

391
00:15:52,480 --> 00:15:54,800
is very useful and it's very important

392
00:15:54,800 --> 00:15:57,519
it has find many applications recently

393
00:15:57,519 --> 00:16:00,240
such as music snarks rifle delay

394
00:16:00,240 --> 00:16:01,279
functions

395
00:16:01,279 --> 00:16:04,959
and p-pad hardness etc

396
00:16:07,040 --> 00:16:09,600
but for now let's assume we already have

397
00:16:09,600 --> 00:16:11,279
such a correlation in trouble hash

398
00:16:11,279 --> 00:16:12,560
function

399
00:16:12,560 --> 00:16:14,399
how do we prove the soundness of the

400
00:16:14,399 --> 00:16:16,880
resulting non-interactive protocol after

401
00:16:16,880 --> 00:16:20,240
the ventricular transformation

402
00:16:21,759 --> 00:16:24,000
so the idea is we start with some sigma

403
00:16:24,000 --> 00:16:25,920
protocol

404
00:16:25,920 --> 00:16:28,240
and i recall that the sigma protocol

405
00:16:28,240 --> 00:16:29,839
satisfied the following special

406
00:16:29,839 --> 00:16:31,600
soundness property

407
00:16:31,600 --> 00:16:33,440
which says that if you have two

408
00:16:33,440 --> 00:16:35,519
accepting transcripts who share the

409
00:16:35,519 --> 00:16:37,199
first lesson

410
00:16:37,199 --> 00:16:39,680
who share the same first message alpha

411
00:16:39,680 --> 00:16:42,399
and with different second message beta

412
00:16:42,399 --> 00:16:44,160
then you can extract the witness from

413
00:16:44,160 --> 00:16:47,759
these two accepting transcripts

414
00:16:48,240 --> 00:16:50,639
then this implies that for any cheat

415
00:16:50,639 --> 00:16:53,040
improver who tries to cheat for some

416
00:16:53,040 --> 00:16:55,120
instance x that is not in this language

417
00:16:55,120 --> 00:16:56,160
l

418
00:16:56,160 --> 00:16:59,279
for any uh first message however there

419
00:16:59,279 --> 00:17:01,519
exists a unique data

420
00:17:01,519 --> 00:17:03,279
that can make this transcript be

421
00:17:03,279 --> 00:17:05,839
accepted

422
00:17:05,919 --> 00:17:07,919
this is because otherwise

423
00:17:07,919 --> 00:17:10,959
if there exists two such data then you

424
00:17:10,959 --> 00:17:13,439
can use the special soundness to extract

425
00:17:13,439 --> 00:17:15,439
a weakness for this x

426
00:17:15,439 --> 00:17:17,839
but this contradicts to the fact that x

427
00:17:17,839 --> 00:17:20,559
is nothing l

428
00:17:21,679 --> 00:17:23,439
then this implies that

429
00:17:23,439 --> 00:17:26,720
we can define a bad function which makes

430
00:17:26,720 --> 00:17:29,679
any alpha to the unique data that makes

431
00:17:29,679 --> 00:17:31,280
this transcript

432
00:17:31,280 --> 00:17:33,840
be accepted

433
00:17:34,720 --> 00:17:36,880
now given this bad function how do we

434
00:17:36,880 --> 00:17:39,039
prove the soundness of the resulting

435
00:17:39,039 --> 00:17:40,799
non-interactive protocol

436
00:17:40,799 --> 00:17:43,918
after the financial ml

437
00:17:44,840 --> 00:17:47,360
transformation so let's consider a cheat

438
00:17:47,360 --> 00:17:49,919
improver who tries to cheat for some x

439
00:17:49,919 --> 00:17:51,760
that is not in l

440
00:17:51,760 --> 00:17:53,760
and the cheating proof is alpha beta

441
00:17:53,760 --> 00:17:55,120
gamma

442
00:17:55,120 --> 00:17:58,080
so we will prove by the contradiction

443
00:17:58,080 --> 00:17:59,919
so let's say this cheating proof is

444
00:17:59,919 --> 00:18:01,919
accepted

445
00:18:01,919 --> 00:18:04,400
then this implies that this

446
00:18:04,400 --> 00:18:07,039
second message beta it must be equals to

447
00:18:07,039 --> 00:18:09,360
the bad of alpha

448
00:18:09,360 --> 00:18:12,960
by the definition of this bad function

449
00:18:12,960 --> 00:18:14,720
but at the same time

450
00:18:14,720 --> 00:18:17,120
by the finished general transformation

451
00:18:17,120 --> 00:18:18,880
this beta also equals to the height of

452
00:18:18,880 --> 00:18:20,640
alpha

453
00:18:20,640 --> 00:18:22,400
and this contradiction to the

454
00:18:22,400 --> 00:18:24,480
correlation in childhood

455
00:18:24,480 --> 00:18:25,919
is a transitive

456
00:18:25,919 --> 00:18:28,720
and this is a contradiction to the

457
00:18:28,720 --> 00:18:31,200
correlation interactability

458
00:18:31,200 --> 00:18:32,559
because the cheating proof will find

459
00:18:32,559 --> 00:18:33,760
this alpha

460
00:18:33,760 --> 00:18:35,520
where the height of alpha equals to the

461
00:18:35,520 --> 00:18:37,919
battle fiber

462
00:18:37,919 --> 00:18:42,280
and in this way we prove the soundness

463
00:18:43,280 --> 00:18:45,679
so do we know how to construct such a

464
00:18:45,679 --> 00:18:48,320
correlation chargeable hash function

465
00:18:48,320 --> 00:18:50,080
so previously

466
00:18:50,080 --> 00:18:53,840
uh by the work of picard and the c hand

467
00:18:53,840 --> 00:18:56,640
which is based on the work of khan kyoto

468
00:18:56,640 --> 00:18:58,400
they contracted the correlation travel

469
00:18:58,400 --> 00:19:00,799
hash function from learning with arrows

470
00:19:00,799 --> 00:19:04,639
for polynomial size bonded circuit

471
00:19:07,039 --> 00:19:09,360
and later by the work of black ski at

472
00:19:09,360 --> 00:19:11,280
all they constructed the correlation

473
00:19:11,280 --> 00:19:12,960
triple hash function

474
00:19:12,960 --> 00:19:14,960
for approximable constant degree

475
00:19:14,960 --> 00:19:17,520
polynomials

476
00:19:17,520 --> 00:19:20,080
and their construction is generic from

477
00:19:20,080 --> 00:19:22,160
any tropical hash function for constant

478
00:19:22,160 --> 00:19:25,400
degree polynomial

479
00:19:25,440 --> 00:19:27,840
where the trouble hash function is known

480
00:19:27,840 --> 00:19:31,520
for most of the standard assumptions

481
00:19:31,840 --> 00:19:33,360
in their work

482
00:19:33,360 --> 00:19:35,280
by further assuming the learning parity

483
00:19:35,280 --> 00:19:37,600
was noise assumption

484
00:19:37,600 --> 00:19:40,240
they built music from our pn and the

485
00:19:40,240 --> 00:19:43,200
travel hash function

486
00:19:44,720 --> 00:19:47,360
however in this work we cannot hope to

487
00:19:47,360 --> 00:19:50,240
use the lpn assumption since our goal is

488
00:19:50,240 --> 00:19:53,760
to construct music from ddh

489
00:19:53,760 --> 00:19:56,400
but for the ddh based sigma protocol the

490
00:19:56,400 --> 00:19:58,320
bad function is not known to be

491
00:19:58,320 --> 00:19:59,840
approximately by constant degree

492
00:19:59,840 --> 00:20:02,480
polynomials

493
00:20:04,960 --> 00:20:06,559
then can we build

494
00:20:06,559 --> 00:20:08,559
creating trouble hash function for a

495
00:20:08,559 --> 00:20:13,120
larger circuit class from dda transition

496
00:20:14,080 --> 00:20:15,039
well

497
00:20:15,039 --> 00:20:17,440
if we want to follow the method by the

498
00:20:17,440 --> 00:20:20,480
work of blacksky at all

499
00:20:20,480 --> 00:20:23,280
then we need to

500
00:20:23,280 --> 00:20:24,640
build a

501
00:20:24,640 --> 00:20:26,640
troubled hash function for larger

502
00:20:26,640 --> 00:20:29,039
circuit class that is more than constant

503
00:20:29,039 --> 00:20:30,799
degree polynomial

504
00:20:30,799 --> 00:20:33,039
but we also don't know how to build such

505
00:20:33,039 --> 00:20:35,840
troubled hash function

506
00:20:38,320 --> 00:20:39,600
in this work

507
00:20:39,600 --> 00:20:42,480
we overcome this challenge and

508
00:20:42,480 --> 00:20:44,400
constructed the first correlation track

509
00:20:44,400 --> 00:20:47,600
by hash function for tc0 circuit

510
00:20:47,600 --> 00:20:51,520
from sub exponential ddh assumption

511
00:20:51,520 --> 00:20:53,840
and here the tc0 circuit

512
00:20:53,840 --> 00:20:56,720
consists of the

513
00:20:56,799 --> 00:21:01,240
constant adapts threshold circuits

514
00:21:02,400 --> 00:21:04,640
so to

515
00:21:04,640 --> 00:21:06,480
achieve our results on the matrix and

516
00:21:06,480 --> 00:21:08,880
the correlation interpret hash function

517
00:21:08,880 --> 00:21:12,080
what is our approach

518
00:21:12,080 --> 00:21:14,639
firstly

519
00:21:14,720 --> 00:21:16,559
we observe that

520
00:21:16,559 --> 00:21:18,400
the correlation travel hash function for

521
00:21:18,400 --> 00:21:20,960
t0 circuit is sufficient to construct

522
00:21:20,960 --> 00:21:24,080
physics from ddh

523
00:21:25,200 --> 00:21:28,240
and secondly

524
00:21:28,720 --> 00:21:31,720
sorry

525
00:21:37,360 --> 00:21:40,399
and the secondly

526
00:21:40,960 --> 00:21:43,120
we construct such correlation charge

527
00:21:43,120 --> 00:21:47,039
hash function for tc0 circuit

528
00:21:47,679 --> 00:21:50,080
by extending the troubled hash functions

529
00:21:50,080 --> 00:21:53,200
to interactive hash function

530
00:21:53,200 --> 00:21:56,799
to handle the tc0 circuit

531
00:21:57,360 --> 00:21:59,679
then we apply a generic run collapsing

532
00:21:59,679 --> 00:22:00,799
technique

533
00:22:00,799 --> 00:22:02,480
to collapse the interactive trapdoor

534
00:22:02,480 --> 00:22:03,840
hashing protocol

535
00:22:03,840 --> 00:22:06,240
and the build

536
00:22:06,240 --> 00:22:11,080
correlation triple hash function for tc0

537
00:22:12,080 --> 00:22:13,760
in the rest of the talk

538
00:22:13,760 --> 00:22:15,840
i will mainly focus on the construction

539
00:22:15,840 --> 00:22:17,600
of this correlation and transfer hash

540
00:22:17,600 --> 00:22:20,879
function for tc0

541
00:22:24,320 --> 00:22:27,039
as i just said our main tool is the

542
00:22:27,039 --> 00:22:28,960
following uh interactive troubled

543
00:22:28,960 --> 00:22:31,039
hashing protocol

544
00:22:31,039 --> 00:22:33,760
so such a protocol is a two-party

545
00:22:33,760 --> 00:22:35,600
protocol between our sender and a

546
00:22:35,600 --> 00:22:38,080
receiver

547
00:22:38,640 --> 00:22:41,360
on the center side it has some input x

548
00:22:41,360 --> 00:22:43,600
and on the receiver side it has a

549
00:22:43,600 --> 00:22:46,880
multi-bit output function f

550
00:22:46,880 --> 00:22:49,280
and the goal is to have both parties

551
00:22:49,280 --> 00:22:51,840
interact in multiple rounds such that in

552
00:22:51,840 --> 00:22:54,880
the end of the protocol they both obtain

553
00:22:54,880 --> 00:22:58,559
some vectors e and d

554
00:22:58,559 --> 00:23:01,520
and we denote this vector e and d as

555
00:23:01,520 --> 00:23:04,879
encodings and decodings

556
00:23:05,840 --> 00:23:08,159
and we require that if you xor this

557
00:23:08,159 --> 00:23:10,159
encoding with the decoding you obtain

558
00:23:10,159 --> 00:23:12,559
the output of the function f of x

559
00:23:12,559 --> 00:23:14,880
and we call this property as an additive

560
00:23:14,880 --> 00:23:18,000
reconstruction property

561
00:23:18,640 --> 00:23:19,679
moreover

562
00:23:19,679 --> 00:23:21,919
on the center side will require the

563
00:23:21,919 --> 00:23:23,679
communication complexity to build

564
00:23:23,679 --> 00:23:25,280
electronic

565
00:23:25,280 --> 00:23:27,360
which means we require the sender's

566
00:23:27,360 --> 00:23:30,080
message size to be bounded by the

567
00:23:30,080 --> 00:23:32,559
security parameter

568
00:23:32,559 --> 00:23:35,280
and most importantly we want the

569
00:23:35,280 --> 00:23:37,600
cylinders message size to be independent

570
00:23:37,600 --> 00:23:39,679
of the input and output the length of

571
00:23:39,679 --> 00:23:42,480
this function f

572
00:23:44,640 --> 00:23:47,760
on the other hand for the receiver side

573
00:23:47,760 --> 00:23:48,840
we

574
00:23:48,840 --> 00:23:50,480
required

575
00:23:50,480 --> 00:23:52,400
the receiver's message to hide the

576
00:23:52,400 --> 00:23:55,840
description of this function f

577
00:23:55,840 --> 00:23:57,919
and we call this property as the

578
00:23:57,919 --> 00:24:01,039
function hiding property

579
00:24:03,200 --> 00:24:04,880
so this is the interactive tropical

580
00:24:04,880 --> 00:24:06,320
hashing protocol

581
00:24:06,320 --> 00:24:08,720
and now you may wonder why we call this

582
00:24:08,720 --> 00:24:11,039
notion as interactive travel hashing

583
00:24:11,039 --> 00:24:13,440
protocol

584
00:24:13,600 --> 00:24:16,320
so in fact we observe that the previous

585
00:24:16,320 --> 00:24:18,320
work of travel hashing function by

586
00:24:18,320 --> 00:24:20,960
talking at all can imply a two-round

587
00:24:20,960 --> 00:24:23,279
interactive character hashing protocol

588
00:24:23,279 --> 00:24:26,240
so we regard our notion

589
00:24:26,240 --> 00:24:28,640
as a generalization of the troubled hash

590
00:24:28,640 --> 00:24:29,919
function

591
00:24:29,919 --> 00:24:33,840
from two runs to multiple runs

592
00:24:35,600 --> 00:24:37,440
next i'm going to show you more

593
00:24:37,440 --> 00:24:39,600
technical details on how we collapse

594
00:24:39,600 --> 00:24:41,120
this interactive tropical hashing

595
00:24:41,120 --> 00:24:43,679
protocol and build the correlation

596
00:24:43,679 --> 00:24:47,320
tracker hash function

597
00:24:47,760 --> 00:24:50,320
let me first describe the key generation

598
00:24:50,320 --> 00:24:54,080
algorithm for this hash function

599
00:24:54,080 --> 00:24:54,960
so

600
00:24:54,960 --> 00:24:57,120
our initial idea is to take any

601
00:24:57,120 --> 00:24:59,679
interactive chapter hashing protocol

602
00:24:59,679 --> 00:25:03,440
and remove all the sender's messages

603
00:25:03,440 --> 00:25:06,080
then we gather these receivers messages

604
00:25:06,080 --> 00:25:07,200
together

605
00:25:07,200 --> 00:25:09,520
and concatenate it with some uniform

606
00:25:09,520 --> 00:25:11,919
random mask view

607
00:25:11,919 --> 00:25:14,320
and we set this whole thing at the cr

608
00:25:14,320 --> 00:25:17,039
key okay

609
00:25:17,039 --> 00:25:18,159
however

610
00:25:18,159 --> 00:25:20,159
we cannot hope to do this in the key

611
00:25:20,159 --> 00:25:22,400
generation

612
00:25:22,400 --> 00:25:23,279
because

613
00:25:23,279 --> 00:25:24,960
the receivers

614
00:25:24,960 --> 00:25:27,120
because for each round of the receivers

615
00:25:27,120 --> 00:25:30,000
message may depends on the sender's

616
00:25:30,000 --> 00:25:32,400
message in the previous round and now

617
00:25:32,400 --> 00:25:34,400
since we remove the sender's messages

618
00:25:34,400 --> 00:25:36,559
how can we have the receiver generate

619
00:25:36,559 --> 00:25:39,760
this receiver's message

620
00:25:39,760 --> 00:25:41,600
so the idea is we have the receiver

621
00:25:41,600 --> 00:25:43,760
against the sender's messages uniformly

622
00:25:43,760 --> 00:25:45,279
at random

623
00:25:45,279 --> 00:25:47,440
and we use these guest messages to

624
00:25:47,440 --> 00:25:51,039
generate the receiver's messages

625
00:25:53,039 --> 00:25:56,159
now this is the key generation algorithm

626
00:25:56,159 --> 00:25:59,600
so given a say a hash key k how do we

627
00:25:59,600 --> 00:26:00,720
compute

628
00:26:00,720 --> 00:26:04,159
the hash of x for any x

629
00:26:04,159 --> 00:26:06,720
so the idea is we have the

630
00:26:06,720 --> 00:26:09,039
hash algorithm to play the row as the

631
00:26:09,039 --> 00:26:11,520
sender of the interactive travel hashing

632
00:26:11,520 --> 00:26:12,640
protocol

633
00:26:12,640 --> 00:26:14,960
and we use the receiver's message

634
00:26:14,960 --> 00:26:18,159
specified in the serial hash key

635
00:26:18,159 --> 00:26:20,559
so the hash algorithm does everything

636
00:26:20,559 --> 00:26:23,039
the sender needs to do

637
00:26:23,039 --> 00:26:26,400
and finally obtain some encoding e

638
00:26:26,400 --> 00:26:29,120
then we set the hash of x as the

639
00:26:29,120 --> 00:26:30,159
encoding

640
00:26:30,159 --> 00:26:32,480
x word with the uniform random mask view

641
00:26:32,480 --> 00:26:36,840
specified in the same key

642
00:26:39,440 --> 00:26:41,520
so next i'm going to show you how to

643
00:26:41,520 --> 00:26:43,520
prove the correlation tractability of

644
00:26:43,520 --> 00:26:45,679
this construction

645
00:26:45,679 --> 00:26:48,159
but before that let me recall what is

646
00:26:48,159 --> 00:26:50,799
the correlation capability

647
00:26:50,799 --> 00:26:53,679
so we say uh this hash function is

648
00:26:53,679 --> 00:26:56,080
correlation tractable for this function

649
00:26:56,080 --> 00:26:58,559
class f before any f in this function

650
00:26:58,559 --> 00:26:59,440
class

651
00:26:59,440 --> 00:27:01,679
it is hard for this adversary to find

652
00:27:01,679 --> 00:27:03,840
the sum input x where the hash of x

653
00:27:03,840 --> 00:27:07,200
equals to f of x and in our case this

654
00:27:07,200 --> 00:27:09,440
hash key consists of a uniform random

655
00:27:09,440 --> 00:27:10,480
mask u

656
00:27:10,480 --> 00:27:12,799
and all the receivers messages in the

657
00:27:12,799 --> 00:27:16,559
interactive chapter hashing protocol

658
00:27:16,720 --> 00:27:19,279
so to prove the correlation try to

659
00:27:19,279 --> 00:27:23,200
to prove the correlation interactability

660
00:27:24,399 --> 00:27:26,880
let me start with some simpler case

661
00:27:26,880 --> 00:27:28,559
where the interactive trapdoor hashing

662
00:27:28,559 --> 00:27:32,080
protocol only have two rounds

663
00:27:32,080 --> 00:27:33,279
and in fact

664
00:27:33,279 --> 00:27:34,720
in this case

665
00:27:34,720 --> 00:27:37,039
the proof it follows directly uh from

666
00:27:37,039 --> 00:27:39,440
the previous work by black ski coppola

667
00:27:39,440 --> 00:27:41,919
and the motor

668
00:27:42,960 --> 00:27:45,600
so the idea is they started with

669
00:27:45,600 --> 00:27:46,640
with the

670
00:27:46,640 --> 00:27:48,799
additive reconstruction property

671
00:27:48,799 --> 00:27:52,399
which states that this output of the

672
00:27:52,399 --> 00:27:56,320
function f f of x is equals to the xor

673
00:27:56,320 --> 00:27:59,918
of the encoding and the decoding

674
00:28:01,039 --> 00:28:02,799
and then

675
00:28:02,799 --> 00:28:04,000
we will prove the correlation

676
00:28:04,000 --> 00:28:06,799
interactability by contradiction

677
00:28:06,799 --> 00:28:08,640
so suppose there is an efficient

678
00:28:08,640 --> 00:28:11,600
anniversary we can find the input x such

679
00:28:11,600 --> 00:28:15,760
that the hash of x equals to f of x

680
00:28:15,760 --> 00:28:17,520
then this implies that

681
00:28:17,520 --> 00:28:20,240
the right hand side is also equal so the

682
00:28:20,240 --> 00:28:24,559
mask u equals to this decoding d

683
00:28:25,200 --> 00:28:27,360
but this is unlikely to happen

684
00:28:27,360 --> 00:28:29,679
because this decoding d is a sparse in

685
00:28:29,679 --> 00:28:30,720
this range

686
00:28:30,720 --> 00:28:32,720
since it only depends on the sender's

687
00:28:32,720 --> 00:28:34,399
message

688
00:28:34,399 --> 00:28:36,159
but the sender's message

689
00:28:36,159 --> 00:28:40,080
is very small so if we set the

690
00:28:40,080 --> 00:28:41,840
output length of this hash function to

691
00:28:41,840 --> 00:28:43,600
be large enough

692
00:28:43,600 --> 00:28:45,760
then we can argue that if we sample this

693
00:28:45,760 --> 00:28:48,559
u from its range

694
00:28:48,559 --> 00:28:50,640
then only with the negligible

695
00:28:50,640 --> 00:28:51,760
probability

696
00:28:51,760 --> 00:28:54,080
this view can hit any of the possible

697
00:28:54,080 --> 00:28:56,399
values of this decoding

698
00:28:56,399 --> 00:29:00,240
so in this way we argue that the

699
00:29:00,240 --> 00:29:03,200
adversary is successful the success

700
00:29:03,200 --> 00:29:05,679
probability of this adversary is only

701
00:29:05,679 --> 00:29:07,840
negligible

702
00:29:07,840 --> 00:29:09,279
so we prove the correlation

703
00:29:09,279 --> 00:29:12,279
interactability

704
00:29:12,640 --> 00:29:14,080
however

705
00:29:14,080 --> 00:29:17,039
this proof only works for two rounds

706
00:29:17,039 --> 00:29:18,799
and it's not clear how to generalize

707
00:29:18,799 --> 00:29:22,720
this method to multiple alarms

708
00:29:23,120 --> 00:29:24,960
this is because when the number of run

709
00:29:24,960 --> 00:29:26,720
is more than two then we have the

710
00:29:26,720 --> 00:29:30,399
receiver gives the sender's message

711
00:29:30,399 --> 00:29:32,399
and this guessing is only correct with

712
00:29:32,399 --> 00:29:35,279
some negligible probability

713
00:29:35,279 --> 00:29:37,840
so the correctness of this protocol is

714
00:29:37,840 --> 00:29:41,320
no longer guaranteed

715
00:29:42,640 --> 00:29:45,279
in this work

716
00:29:46,320 --> 00:29:48,799
we observe that in fact to prove the

717
00:29:48,799 --> 00:29:50,720
correlation interactability

718
00:29:50,720 --> 00:29:52,960
we don't need the fully correctness of

719
00:29:52,960 --> 00:29:54,880
this interactive protocol

720
00:29:54,880 --> 00:29:57,120
instead we only need

721
00:29:57,120 --> 00:29:59,360
we only need the correctness to hold

722
00:29:59,360 --> 00:30:00,559
with some

723
00:30:00,559 --> 00:30:02,880
some self-exponential probability

724
00:30:02,880 --> 00:30:05,760
but we still want to lower bound this uh

725
00:30:05,760 --> 00:30:08,960
guessing correctness

726
00:30:08,960 --> 00:30:10,000
so the way

727
00:30:10,000 --> 00:30:11,840
we are

728
00:30:11,840 --> 00:30:13,600
lower bound the guessing correctness is

729
00:30:13,600 --> 00:30:15,120
as follows

730
00:30:15,120 --> 00:30:16,640
we observe that

731
00:30:16,640 --> 00:30:18,799
indeed we can take different security

732
00:30:18,799 --> 00:30:21,120
parameters for different runs in this

733
00:30:21,120 --> 00:30:23,039
protocol

734
00:30:23,039 --> 00:30:25,440
so we simply are

735
00:30:25,440 --> 00:30:27,440
choosing our increasing sequence of

736
00:30:27,440 --> 00:30:31,600
security parameters for each round

737
00:30:32,720 --> 00:30:34,320
and then by relies on the sub

738
00:30:34,320 --> 00:30:36,399
exponential ddh assumption

739
00:30:36,399 --> 00:30:38,640
we are able to argue that

740
00:30:38,640 --> 00:30:41,919
the guessing probability is

741
00:30:41,919 --> 00:30:44,000
the guessing correctness

742
00:30:44,000 --> 00:30:48,919
is with sub-exponential probability

743
00:30:50,799 --> 00:30:52,480
then we argue that

744
00:30:52,480 --> 00:30:53,279
this

745
00:30:53,279 --> 00:30:55,039
sub-exponential gas incorrectness is

746
00:30:55,039 --> 00:30:56,159
large enough

747
00:30:56,159 --> 00:31:00,000
to argue the correlation interactivity

748
00:31:03,039 --> 00:31:05,760
like two or three minutes left

749
00:31:05,760 --> 00:31:07,200
moderator here

750
00:31:07,200 --> 00:31:08,640
yeah thanks

751
00:31:08,640 --> 00:31:09,760
so

752
00:31:09,760 --> 00:31:12,159
uh finally let me show you some very

753
00:31:12,159 --> 00:31:14,720
high level uh idea on how to build this

754
00:31:14,720 --> 00:31:16,840
interactive hash

755
00:31:16,840 --> 00:31:20,559
function so the idea is we take any

756
00:31:20,559 --> 00:31:23,440
circuit in tc0 and convert it into a

757
00:31:23,440 --> 00:31:25,039
layered circuit

758
00:31:25,039 --> 00:31:27,039
then we construct interactive hash

759
00:31:27,039 --> 00:31:29,360
function for this circuit

760
00:31:29,360 --> 00:31:32,159
for each layer of this circuit

761
00:31:32,159 --> 00:31:34,240
and then we compose these interactive

762
00:31:34,240 --> 00:31:36,960
triple hash protocols sequentially to

763
00:31:36,960 --> 00:31:38,960
obtain the interactive troubled hashing

764
00:31:38,960 --> 00:31:42,480
protocol for the entire circuit

765
00:31:42,960 --> 00:31:45,440
in more detail for

766
00:31:45,440 --> 00:31:47,360
to contract the interactive hashing

767
00:31:47,360 --> 00:31:49,760
protocol for a single layer of threshold

768
00:31:49,760 --> 00:31:50,720
date

769
00:31:50,720 --> 00:31:53,279
we decompose the threshold data

770
00:31:53,279 --> 00:31:56,960
computation to two linear functions

771
00:31:56,960 --> 00:31:59,360
and then we use triple hash function to

772
00:31:59,360 --> 00:32:02,159
compute each linear function

773
00:32:02,159 --> 00:32:04,159
and then we

774
00:32:04,159 --> 00:32:05,679
compose these two troubled hash

775
00:32:05,679 --> 00:32:07,919
functions sequentially to obtain the

776
00:32:07,919 --> 00:32:10,240
interactive chapter hashing protocol for

777
00:32:10,240 --> 00:32:13,200
a single threshold

778
00:32:13,200 --> 00:32:16,080
so the same idea can be extended from a

779
00:32:16,080 --> 00:32:17,840
single threshold gate to a layer of

780
00:32:17,840 --> 00:32:19,360
structural dates

781
00:32:19,360 --> 00:32:21,440
so this concludes our construction for

782
00:32:21,440 --> 00:32:22,880
the interactive

783
00:32:22,880 --> 00:32:26,080
travel hashing protocol

784
00:32:26,240 --> 00:32:27,200
so

785
00:32:27,200 --> 00:32:29,279
finally uh this is a summary of our

786
00:32:29,279 --> 00:32:30,240
result

787
00:32:30,240 --> 00:32:32,559
we constructed the first physics from

788
00:32:32,559 --> 00:32:34,799
sub-exponential ddh

789
00:32:34,799 --> 00:32:36,960
and uh to obtain our result we

790
00:32:36,960 --> 00:32:38,080
constructed

791
00:32:38,080 --> 00:32:40,240
a correlation travel hash function for

792
00:32:40,240 --> 00:32:43,919
tc0 from cyclops exponential ddh

793
00:32:43,919 --> 00:32:46,640
now we also contracted statistical zap

794
00:32:46,640 --> 00:32:50,720
arguments from cyclopresidential ddh

795
00:32:51,679 --> 00:32:53,519
some open questions for future

796
00:32:53,519 --> 00:32:55,039
interaction

797
00:32:55,039 --> 00:32:57,840
so can we contract physics from

798
00:32:57,840 --> 00:33:01,840
polynomial time hardness of tdh

799
00:33:01,840 --> 00:33:03,840
and can we contract music

800
00:33:03,840 --> 00:33:06,399
from public encryption so this problem

801
00:33:06,399 --> 00:33:08,799
is also related to uh can we contract

802
00:33:08,799 --> 00:33:10,880
correlating trouble hash function

803
00:33:10,880 --> 00:33:14,159
from public key encryption

804
00:33:14,159 --> 00:33:16,880
and finally can we construct correlation

805
00:33:16,880 --> 00:33:19,200
interactive hash function for a larger

806
00:33:19,200 --> 00:33:22,000
circuit class from ddh

807
00:33:22,000 --> 00:33:24,320
so if we can achieve this then we can

808
00:33:24,320 --> 00:33:25,760
also obtain

809
00:33:25,760 --> 00:33:28,080
the same applications of correlation and

810
00:33:28,080 --> 00:33:30,399
travel hash functions in the region to

811
00:33:30,399 --> 00:33:31,200
work

812
00:33:31,200 --> 00:33:34,320
from ddh assumption

813
00:33:35,039 --> 00:33:37,360
thank you

814
00:33:37,360 --> 00:33:37,930
thank you

815
00:33:37,930 --> 00:33:41,400
[Applause]

816
00:33:46,720 --> 00:33:48,799
um we have time for a question from the

817
00:33:48,799 --> 00:33:52,360
room or from remote

818
00:33:56,799 --> 00:33:59,120
i don't hear any

819
00:33:59,120 --> 00:34:02,080
so maybe in the interest of time we

820
00:34:02,080 --> 00:34:06,320
proceed directly to the next talk then

821
00:34:06,320 --> 00:34:09,038
thank you again

822
00:34:15,679 --> 00:34:16,960
and

823
00:34:16,960 --> 00:34:19,520
okay i see the next screen is being

824
00:34:19,520 --> 00:34:21,760
shared already

825
00:34:21,760 --> 00:34:23,280
the next

826
00:34:23,280 --> 00:34:26,079
talk is also remote it's on the

827
00:34:26,079 --> 00:34:29,119
insecurity of ros

828
00:34:29,119 --> 00:34:31,679
and i had to look it up yeah this is the

829
00:34:31,679 --> 00:34:33,599
random in homogeneities in an

830
00:34:33,599 --> 00:34:36,399
overdetermined solvable system of linear

831
00:34:36,399 --> 00:34:38,879
equations yeah so uh it's much more

832
00:34:38,879 --> 00:34:41,520
compact to pronounce this as ros um

833
00:34:41,520 --> 00:34:44,079
let's talk uh this this paper this um

834
00:34:44,079 --> 00:34:46,560
work is by fabrice

835
00:34:46,560 --> 00:34:48,960
julian

836
00:34:52,639 --> 00:34:54,320
can you say something so that we see

837
00:34:54,320 --> 00:34:57,200
your picture here

838
00:34:57,200 --> 00:34:59,920
we don't hear you yet

839
00:34:59,920 --> 00:35:02,400
hello hello the grab

840
00:35:02,400 --> 00:35:06,320
now it's good okay the floor is here

841
00:35:06,480 --> 00:35:07,440
sorry

842
00:35:07,440 --> 00:35:08,960
i hear a lot of echo can you mute

843
00:35:08,960 --> 00:35:12,079
yourself once you give the

844
00:35:12,079 --> 00:35:14,400
give me the word

845
00:35:14,400 --> 00:35:18,160
yes now please uh please go on

846
00:35:18,560 --> 00:35:22,240
um so hello everybody um

847
00:35:22,240 --> 00:35:24,480
so yeah this talk is going to be about

848
00:35:24,480 --> 00:35:26,400
um

849
00:35:26,400 --> 00:35:29,359
the cryptanalysis of ros

850
00:35:29,359 --> 00:35:31,920
ros is a cryptographic assumption that

851
00:35:31,920 --> 00:35:34,320
was first introduced by schnorr

852
00:35:34,320 --> 00:35:36,560
20 years ago it pops up when you try to

853
00:35:36,560 --> 00:35:39,200
prove schneiderlin signatures

854
00:35:39,200 --> 00:35:40,800
and

855
00:35:40,800 --> 00:35:42,480
incidentally

856
00:35:42,480 --> 00:35:45,440
finding a solution uh to this problem

857
00:35:45,440 --> 00:35:47,839
led to concrete attacks to a bunch of

858
00:35:47,839 --> 00:35:49,440
other construction that have been uh

859
00:35:49,440 --> 00:35:51,520
sort of developed in the meantime

860
00:35:51,520 --> 00:35:52,400
um

861
00:35:52,400 --> 00:35:53,920
these are for instance some blind

862
00:35:53,920 --> 00:35:56,640
signatures such as blanchenor okamoto

863
00:35:56,640 --> 00:35:58,720
snore when you allow for parallel

864
00:35:58,720 --> 00:36:01,599
executions as we will see later

865
00:36:01,599 --> 00:36:03,680
multi signatures

866
00:36:03,680 --> 00:36:06,160
such as

867
00:36:10,400 --> 00:36:12,960
such as the churron version of music um

868
00:36:12,960 --> 00:36:14,560
threshold signatures such as the initial

869
00:36:14,560 --> 00:36:18,560
version of frost and gjkr um ecash

870
00:36:18,560 --> 00:36:20,800
systems such as brand signatures and

871
00:36:20,800 --> 00:36:22,640
anonymous credentials such as anonymous

872
00:36:22,640 --> 00:36:24,839
credentials lite and uproof from

873
00:36:24,839 --> 00:36:27,200
microsoft these are all in the specific

874
00:36:27,200 --> 00:36:29,760
setting of parallel executions and in

875
00:36:29,760 --> 00:36:31,680
some of these protocols it will we will

876
00:36:31,680 --> 00:36:33,200
also require

877
00:36:33,200 --> 00:36:35,440
some additional settings that will make

878
00:36:35,440 --> 00:36:37,920
the security of this scheme hinge

879
00:36:37,920 --> 00:36:41,119
and rely on ros

880
00:36:41,119 --> 00:36:44,560
okay so first of all what is ros um

881
00:36:44,560 --> 00:36:46,880
yeah it means random in homogeneities in

882
00:36:46,880 --> 00:36:48,640
our over-determined solvable system of

883
00:36:48,640 --> 00:36:50,079
linear equations

884
00:36:50,079 --> 00:36:51,680
it is um

885
00:36:51,680 --> 00:36:54,400
more simply um

886
00:36:54,400 --> 00:36:56,640
we fix a prime p

887
00:36:56,640 --> 00:36:58,640
we fix a number l

888
00:36:58,640 --> 00:37:03,119
and then we ask the adversary to produce

889
00:37:03,119 --> 00:37:05,200
l plus one vectors that i'm indicating

890
00:37:05,200 --> 00:37:06,400
here with rho

891
00:37:06,400 --> 00:37:09,920
such that the inner product of rho with

892
00:37:09,920 --> 00:37:11,839
these coefficients

893
00:37:11,839 --> 00:37:14,880
will end up in the in the hash image the

894
00:37:14,880 --> 00:37:18,480
image of what of the vector itself

895
00:37:18,560 --> 00:37:20,000
okay

896
00:37:20,000 --> 00:37:22,079
now um let me try to visualize it for

897
00:37:22,079 --> 00:37:23,119
you

898
00:37:23,119 --> 00:37:24,560
again oops

899
00:37:24,560 --> 00:37:26,160
diversity

900
00:37:26,160 --> 00:37:28,000
has to find

901
00:37:28,000 --> 00:37:31,440
this matrix that has l plus one rows and

902
00:37:31,440 --> 00:37:34,400
l columns such that the matrix

903
00:37:34,400 --> 00:37:37,040
times this vector will end up in the

904
00:37:37,040 --> 00:37:40,400
hash image of each row

905
00:37:41,680 --> 00:37:43,760
now um to get our grips with this

906
00:37:43,760 --> 00:37:46,160
problem uh there are some

907
00:37:46,160 --> 00:37:48,800
easy way of thinking about it for

908
00:37:48,800 --> 00:37:51,440
instance if we fix the matrix to be the

909
00:37:51,440 --> 00:37:53,440
identity matrix on the top

910
00:37:53,440 --> 00:37:55,440
so because we have so i didn't say

911
00:37:55,440 --> 00:37:58,240
anything about the last row for now um

912
00:37:58,240 --> 00:38:00,320
then it is very easy to find

913
00:38:00,320 --> 00:38:02,960
the vector c that satisfies the equation

914
00:38:02,960 --> 00:38:06,240
right i can just select the at the

915
00:38:06,240 --> 00:38:08,240
height position the ash the hash of the

916
00:38:08,240 --> 00:38:10,320
i throw and then know that uh it's the

917
00:38:10,320 --> 00:38:12,240
only term that's going to be

918
00:38:12,240 --> 00:38:14,640
surviving the inner product so

919
00:38:14,640 --> 00:38:17,119
um i will uh i will end up with with

920
00:38:17,119 --> 00:38:20,000
this sort of partial solution

921
00:38:20,000 --> 00:38:21,599
so really the the hardness of this

922
00:38:21,599 --> 00:38:23,920
problem is about finding a non-trivial

923
00:38:23,920 --> 00:38:27,200
linear combination of uh hash images

924
00:38:27,200 --> 00:38:32,079
that will still land in a validash image

925
00:38:32,079 --> 00:38:33,359
okay

926
00:38:33,359 --> 00:38:34,480
um

927
00:38:34,480 --> 00:38:35,440
also

928
00:38:35,440 --> 00:38:37,040
there is nothing special about choosing

929
00:38:37,040 --> 00:38:39,280
identity metrics i could uh for instance

930
00:38:39,280 --> 00:38:41,599
just as well if we cut another another

931
00:38:41,599 --> 00:38:43,920
matrix multiplied by two and sort of

932
00:38:43,920 --> 00:38:47,359
corrected uh this uh this factor in the

933
00:38:47,359 --> 00:38:49,119
vector c

934
00:38:49,119 --> 00:38:51,680
and again the problem is uh is to find

935
00:38:51,680 --> 00:38:54,799
this nontrivial solution

936
00:38:55,520 --> 00:38:58,320
um the best attack known so far

937
00:38:58,320 --> 00:39:01,520
for these uh sort of problems uh was uh

938
00:39:01,520 --> 00:39:02,880
the generalized birthday attack from

939
00:39:02,880 --> 00:39:06,240
wagner um essentially this uh

940
00:39:06,240 --> 00:39:08,960
um attack consisted in creating a bunch

941
00:39:08,960 --> 00:39:11,920
of lists with a hash images and then

942
00:39:11,920 --> 00:39:14,560
finding elements in these lists that

943
00:39:14,560 --> 00:39:15,680
soar

944
00:39:15,680 --> 00:39:17,119
into zero

945
00:39:17,119 --> 00:39:19,119
with a small leap of faith we can also

946
00:39:19,119 --> 00:39:22,160
do believe that the attack will uh sum

947
00:39:22,160 --> 00:39:25,440
modulo p to zero

948
00:39:25,440 --> 00:39:27,200
and um this is called the generalization

949
00:39:27,200 --> 00:39:29,280
birthday attack because if i fix l to be

950
00:39:29,280 --> 00:39:31,280
equal to one i'm essentially trying to

951
00:39:31,280 --> 00:39:35,839
find uh true images that are equal

952
00:39:36,000 --> 00:39:38,560
and uh or in general this uh

953
00:39:38,560 --> 00:39:40,240
attack runs in times that is

954
00:39:40,240 --> 00:39:42,720
subexponential that depends on the prime

955
00:39:42,720 --> 00:39:46,560
p and the number of open sessions

956
00:39:46,960 --> 00:39:49,839
and uh we can use this algorithm here

957
00:39:49,839 --> 00:39:52,240
because um

958
00:39:52,240 --> 00:39:55,359
essentially we can fix the last row to

959
00:39:55,359 --> 00:39:57,200
be all equal to one

960
00:39:57,200 --> 00:40:00,240
and then we try to find uh valid

961
00:40:00,240 --> 00:40:01,760
elements i said that there are l

962
00:40:01,760 --> 00:40:04,560
solutions that are easy to find

963
00:40:04,560 --> 00:40:06,640
we will try to find those solutions

964
00:40:06,640 --> 00:40:08,800
those are sort of partial solutions that

965
00:40:08,800 --> 00:40:10,960
when i do the inner product they add up

966
00:40:10,960 --> 00:40:15,119
to this specific value the hash of one

967
00:40:15,920 --> 00:40:17,760
right but um

968
00:40:17,760 --> 00:40:19,440
as you can see there is a there is much

969
00:40:19,440 --> 00:40:21,280
more flexibility than this right i can

970
00:40:21,280 --> 00:40:22,079
choose

971
00:40:22,079 --> 00:40:24,560
not only one i can i can choose a subset

972
00:40:24,560 --> 00:40:26,400
of them and this would be more similar

973
00:40:26,400 --> 00:40:28,960
to a subset some problem that we know is

974
00:40:28,960 --> 00:40:31,280
is hard in general or i can put any

975
00:40:31,280 --> 00:40:32,720
linear combination

976
00:40:32,720 --> 00:40:36,000
and uh this specifically what we did and

977
00:40:36,000 --> 00:40:38,720
um so our contribution was uh finding a

978
00:40:38,720 --> 00:40:40,640
polynomial lam

979
00:40:40,640 --> 00:40:44,560
a polynomial time attacker that uh um

980
00:40:44,560 --> 00:40:46,240
actually unexpected polynomial time

981
00:40:46,240 --> 00:40:49,119
attacker that will produce

982
00:40:49,119 --> 00:40:53,079
a valid roi solution

983
00:40:54,319 --> 00:40:55,760
so again

984
00:40:55,760 --> 00:40:57,920
what what are we trying to find the

985
00:40:57,920 --> 00:41:00,400
computationally hard problem is

986
00:41:00,400 --> 00:41:01,440
finding

987
00:41:01,440 --> 00:41:03,280
these vectors

988
00:41:03,280 --> 00:41:05,119
l plus one vectors

989
00:41:05,119 --> 00:41:07,040
such that the inner product with these

990
00:41:07,040 --> 00:41:09,520
coefficients will be in the image of the

991
00:41:09,520 --> 00:41:11,359
hash function

992
00:41:11,359 --> 00:41:13,680
we said that there are l solutions that

993
00:41:13,680 --> 00:41:15,440
are easy i just pick the sort of a

994
00:41:15,440 --> 00:41:18,800
diagonal matrix and uh and it's done

995
00:41:18,800 --> 00:41:21,920
the really hard part is find these um

996
00:41:21,920 --> 00:41:23,920
uh this last row

997
00:41:23,920 --> 00:41:25,200
and um

998
00:41:25,200 --> 00:41:28,560
in fact the the idea for uh for our our

999
00:41:28,560 --> 00:41:30,319
attack is that

1000
00:41:30,319 --> 00:41:33,040
we will try to set the coefficients such

1001
00:41:33,040 --> 00:41:35,200
that when we multiply them with the

1002
00:41:35,200 --> 00:41:36,960
respective

1003
00:41:36,960 --> 00:41:40,000
element c over the column vector

1004
00:41:40,000 --> 00:41:43,200
we will end up with either

1005
00:41:43,200 --> 00:41:45,680
a 0 or a power of 2

1006
00:41:45,680 --> 00:41:47,440
and we know that

1007
00:41:47,440 --> 00:41:49,760
the subset some problem is very easy

1008
00:41:49,760 --> 00:41:53,359
when we are dealing with powers of two

1009
00:41:54,160 --> 00:41:56,079
more specifically

1010
00:41:56,079 --> 00:41:56,880
pick

1011
00:41:56,880 --> 00:41:59,599
two valid

1012
00:41:59,599 --> 00:42:02,079
three sort of trivial partial solutions

1013
00:42:02,079 --> 00:42:02,880
like

1014
00:42:02,880 --> 00:42:04,720
as i mentioned before for instance we

1015
00:42:04,720 --> 00:42:06,240
could pick the diagonal the identity

1016
00:42:06,240 --> 00:42:07,760
matrix or

1017
00:42:07,760 --> 00:42:10,079
another diagonal matrix

1018
00:42:10,079 --> 00:42:11,760
and let's define the following

1019
00:42:11,760 --> 00:42:14,079
polynomial um

1020
00:42:14,079 --> 00:42:16,400
this is a polynomial f

1021
00:42:16,400 --> 00:42:18,400
j so i'm going to i'm going to define

1022
00:42:18,400 --> 00:42:20,960
one for each of the

1023
00:42:20,960 --> 00:42:24,400
rows of these uh sort of diagonal matrix

1024
00:42:24,400 --> 00:42:26,960
that uh is defined by interpolation and

1025
00:42:26,960 --> 00:42:29,280
it will be equal to zero when evaluated

1026
00:42:29,280 --> 00:42:30,800
on the first set

1027
00:42:30,800 --> 00:42:33,520
and to 2 to the j when evaluated on the

1028
00:42:33,520 --> 00:42:35,359
second one

1029
00:42:35,359 --> 00:42:37,680
now this this polynomial is a

1030
00:42:37,680 --> 00:42:40,720
is pretty easy to find it's uh it's a

1031
00:42:40,720 --> 00:42:42,960
polynomial of degree 1.

1032
00:42:42,960 --> 00:42:45,040
all of these terms

1033
00:42:45,040 --> 00:42:46,640
they are essentially constants that i

1034
00:42:46,640 --> 00:42:49,680
can recompute and i'm going calling them

1035
00:42:49,680 --> 00:42:51,680
c for a reason

1036
00:42:51,680 --> 00:42:54,160
and um

1037
00:42:54,240 --> 00:42:56,079
and then i'm going to define this other

1038
00:42:56,079 --> 00:42:57,599
polynomial

1039
00:42:57,599 --> 00:43:01,200
i'm just going to sum over all the f's

1040
00:43:01,200 --> 00:43:03,839
and um i'm calling this polynomial rho

1041
00:43:03,839 --> 00:43:06,800
again this is a this notation is not by

1042
00:43:06,800 --> 00:43:09,440
by chance

1043
00:43:09,680 --> 00:43:10,640
that

1044
00:43:10,640 --> 00:43:14,240
is again a polynomial of degree one um

1045
00:43:14,240 --> 00:43:16,079
with a with a constant term that i'm

1046
00:43:16,079 --> 00:43:17,599
calling rho l

1047
00:43:17,599 --> 00:43:19,280
and uh this polynomial has a special

1048
00:43:19,280 --> 00:43:20,880
property

1049
00:43:20,880 --> 00:43:24,319
for uh some relatively large l

1050
00:43:24,319 --> 00:43:27,760
i can take any element in my field

1051
00:43:27,760 --> 00:43:30,880
and um i can write it in binary

1052
00:43:30,880 --> 00:43:34,000
right uh using l elements

1053
00:43:34,000 --> 00:43:36,880
and um i note that each term over here

1054
00:43:36,880 --> 00:43:40,319
is um either zero or two to the j right

1055
00:43:40,319 --> 00:43:41,520
so

1056
00:43:41,520 --> 00:43:43,200
by definition of fj it's just an

1057
00:43:43,200 --> 00:43:46,000
evaluation of f either on the first set

1058
00:43:46,000 --> 00:43:49,359
of solution or on the second

1059
00:43:50,560 --> 00:43:53,440
but this is the sum of all the fj's so

1060
00:43:53,440 --> 00:43:57,200
it's an evaluation of row over um sort

1061
00:43:57,200 --> 00:43:58,480
of different

1062
00:43:58,480 --> 00:44:00,640
elements that again are selected either

1063
00:44:00,640 --> 00:44:02,319
to be the hash of

1064
00:44:02,319 --> 00:44:05,760
the row with one or with the row

1065
00:44:05,760 --> 00:44:06,839
for

1066
00:44:06,839 --> 00:44:10,000
instance so again the particular the

1067
00:44:10,000 --> 00:44:12,079
peculiarity of this polynomial is that i

1068
00:44:12,079 --> 00:44:14,880
can express any element in my field as

1069
00:44:14,880 --> 00:44:18,000
an evaluation of this polynomial on on

1070
00:44:18,000 --> 00:44:19,760
some points that are selected depending

1071
00:44:19,760 --> 00:44:21,359
on the binary decomposition of the

1072
00:44:21,359 --> 00:44:23,839
number itself

1073
00:44:24,880 --> 00:44:26,800
if this is true for any element in the

1074
00:44:26,800 --> 00:44:28,960
field then it is true also for this

1075
00:44:28,960 --> 00:44:31,200
particular element in the field

1076
00:44:31,200 --> 00:44:32,720
i'm going to compute i have my

1077
00:44:32,720 --> 00:44:35,200
polynomial i hash its coefficient and

1078
00:44:35,200 --> 00:44:38,160
then i shift it by the constant term

1079
00:44:38,160 --> 00:44:40,800
and in particular for this n if i plug

1080
00:44:40,800 --> 00:44:43,200
it in here i will see that the constant

1081
00:44:43,200 --> 00:44:46,400
term cancels out in both sides and i

1082
00:44:46,400 --> 00:44:48,960
will end up with um

1083
00:44:48,960 --> 00:44:50,880
um with the linear combination of the

1084
00:44:50,880 --> 00:44:53,359
row j's with some c's

1085
00:44:53,359 --> 00:44:55,440
but uh

1086
00:44:55,440 --> 00:44:57,440
uh this is a one of the inner products

1087
00:44:57,440 --> 00:44:59,599
that i was looking for right and it's in

1088
00:44:59,599 --> 00:45:02,319
particular on trivial one so essentially

1089
00:45:02,319 --> 00:45:06,000
we we are done and um

1090
00:45:06,000 --> 00:45:08,240
yeah this is the attack um

1091
00:45:08,240 --> 00:45:09,760
again wrapping up

1092
00:45:09,760 --> 00:45:10,880
the

1093
00:45:10,880 --> 00:45:11,680
the

1094
00:45:11,680 --> 00:45:14,800
attack works as follows um i pick true

1095
00:45:14,800 --> 00:45:16,880
valid partial solutions

1096
00:45:16,880 --> 00:45:18,480
uh sort of for instance the identity

1097
00:45:18,480 --> 00:45:21,119
metrics and the metrics with uh uh

1098
00:45:21,119 --> 00:45:22,079
choose

1099
00:45:22,079 --> 00:45:24,160
then i

1100
00:45:24,160 --> 00:45:26,640
i computer hash now i need their hash to

1101
00:45:26,640 --> 00:45:28,880
be different right in order to to do a

1102
00:45:28,880 --> 00:45:30,960
successful interpolation of that that

1103
00:45:30,960 --> 00:45:32,720
gives me a degree one

1104
00:45:32,720 --> 00:45:34,560
and this is essentially the only reason

1105
00:45:34,560 --> 00:45:37,119
why our algorithm is expected polynomial

1106
00:45:37,119 --> 00:45:39,920
time as i said before um

1107
00:45:39,920 --> 00:45:42,000
but we can expect that this happens very

1108
00:45:42,000 --> 00:45:43,920
rarely um

1109
00:45:43,920 --> 00:45:45,440
then i will construct the the little

1110
00:45:45,440 --> 00:45:48,160
polynomials fj add them up essentially

1111
00:45:48,160 --> 00:45:50,160
computing this polynomial row that has

1112
00:45:50,160 --> 00:45:52,880
the properties that we just saw um

1113
00:45:52,880 --> 00:45:54,000
finally

1114
00:45:54,000 --> 00:45:56,560
we decompose in uh in binary this

1115
00:45:56,560 --> 00:45:58,960
element a interpretation elementary

1116
00:45:58,960 --> 00:46:01,520
field and that's it

1117
00:46:01,520 --> 00:46:03,119
we have a non-trivial solution which is

1118
00:46:03,119 --> 00:46:04,640
just given by the coefficients of the

1119
00:46:04,640 --> 00:46:06,400
polynomial that we found

1120
00:46:06,400 --> 00:46:08,800
and we have

1121
00:46:08,800 --> 00:46:12,160
and we have a um sort of easy solutions

1122
00:46:12,160 --> 00:46:14,480
that are just select just uh used by

1123
00:46:14,480 --> 00:46:16,240
selecting um

1124
00:46:16,240 --> 00:46:18,400
the rows that we had at the beginning uh

1125
00:46:18,400 --> 00:46:20,800
depending on the bit of the binary

1126
00:46:20,800 --> 00:46:23,920
decomposition of this guy

1127
00:46:25,760 --> 00:46:27,119
yeah that's it

1128
00:46:27,119 --> 00:46:30,079
um now the

1129
00:46:30,079 --> 00:46:32,880
before sort of mentioning the

1130
00:46:32,880 --> 00:46:34,640
like the properties of raw i said that

1131
00:46:34,640 --> 00:46:37,440
uh it happens for relatively large l

1132
00:46:37,440 --> 00:46:40,160
um in particular l must be at least log

1133
00:46:40,160 --> 00:46:43,359
p because i must express this element

1134
00:46:43,359 --> 00:46:47,040
over here um which is random um

1135
00:46:47,040 --> 00:46:50,000
in in binary and i need enough elements

1136
00:46:50,000 --> 00:46:52,079
in order to do that

1137
00:46:52,079 --> 00:46:53,280
so

1138
00:46:53,280 --> 00:46:55,440
we had another idea and we extend it in

1139
00:46:55,440 --> 00:46:58,319
the paper that essentially merges the

1140
00:46:58,319 --> 00:47:02,160
attack of wagner with our attack

1141
00:47:02,319 --> 00:47:04,800
essentially in the following way

1142
00:47:04,800 --> 00:47:06,480
we use wagner

1143
00:47:06,480 --> 00:47:08,560
not to find a set of elements that adds

1144
00:47:08,560 --> 00:47:11,280
up to zero but was most significant

1145
00:47:11,280 --> 00:47:13,599
digits add up to zero once we set the

1146
00:47:13,599 --> 00:47:16,079
most significant digits to zero then we

1147
00:47:16,079 --> 00:47:18,480
can run our algorithm knowing that the

1148
00:47:18,480 --> 00:47:20,079
binary decomposition will have leading

1149
00:47:20,079 --> 00:47:23,400
zeros again

1150
00:47:24,800 --> 00:47:27,280
so um we still end up with a

1151
00:47:27,280 --> 00:47:28,880
sub-exponential attack but the

1152
00:47:28,880 --> 00:47:31,040
complexity of the attack drops much

1153
00:47:31,040 --> 00:47:33,040
faster than with wagner but here you can

1154
00:47:33,040 --> 00:47:36,160
see sort of in the in the white line uh

1155
00:47:36,160 --> 00:47:38,000
whereas our attack is sort of displayed

1156
00:47:38,000 --> 00:47:40,319
here in uh in a rainbow

1157
00:47:40,319 --> 00:47:42,240
um actually the colors have uh have a

1158
00:47:42,240 --> 00:47:44,880
natural meaning uh they sort of identify

1159
00:47:44,880 --> 00:47:47,280
um the drop of number of lists that you

1160
00:47:47,280 --> 00:47:49,680
need in order to run wagner so it's also

1161
00:47:49,680 --> 00:47:52,400
as you can see sort of drops the more

1162
00:47:52,400 --> 00:47:55,200
l increases

1163
00:47:56,640 --> 00:48:00,720
okay so now before um going through the

1164
00:48:00,720 --> 00:48:02,960
uh into wonderland and showing you like

1165
00:48:02,960 --> 00:48:06,480
uh how deep the rabbit hole goes

1166
00:48:06,480 --> 00:48:11,240
like is there any question up to here

1167
00:48:22,559 --> 00:48:24,720
i'm sorry i was muted here

1168
00:48:24,720 --> 00:48:27,040
but the room there was no no question so

1169
00:48:27,040 --> 00:48:28,160
far huh

1170
00:48:28,160 --> 00:48:29,599
otherwise

1171
00:48:29,599 --> 00:48:31,680
you'll let me know

1172
00:48:31,680 --> 00:48:33,200
please go ahead

1173
00:48:33,200 --> 00:48:36,000
okay um also if you didn't understand

1174
00:48:36,000 --> 00:48:37,920
anything this section is a pretty much

1175
00:48:37,920 --> 00:48:40,800
self-contained so you know it could be

1176
00:48:40,800 --> 00:48:42,480
um

1177
00:48:42,480 --> 00:48:43,280
yeah

1178
00:48:43,280 --> 00:48:47,040
so blend signatures uh what are they um

1179
00:48:47,040 --> 00:48:49,920
they are a protocol between a user and

1180
00:48:49,920 --> 00:48:53,440
the server the user has a message uh

1181
00:48:53,440 --> 00:48:55,680
the site the the server has a assigning

1182
00:48:55,680 --> 00:48:57,440
key the user wants to compute a

1183
00:48:57,440 --> 00:48:59,920
signature on the message without

1184
00:48:59,920 --> 00:49:01,359
revealing any information about the

1185
00:49:01,359 --> 00:49:03,839
message and the server um without

1186
00:49:03,839 --> 00:49:06,319
revealing the sending key so we have two

1187
00:49:06,319 --> 00:49:07,920
notions of security here we have

1188
00:49:07,920 --> 00:49:09,920
affordability which essentially says

1189
00:49:09,920 --> 00:49:10,880
that

1190
00:49:10,880 --> 00:49:13,359
any user even after interacting multiple

1191
00:49:13,359 --> 00:49:15,040
times with the server will not be able

1192
00:49:15,040 --> 00:49:17,280
to produce most more signatures than

1193
00:49:17,280 --> 00:49:18,559
actually allowed

1194
00:49:18,559 --> 00:49:21,359
as you can see here we have an l and uh

1195
00:49:21,359 --> 00:49:23,520
this l is exactly the l that we will

1196
00:49:23,520 --> 00:49:26,240
find in our os

1197
00:49:26,640 --> 00:49:29,359
and we have blindness um

1198
00:49:29,359 --> 00:49:31,119
blend this essentially protects the user

1199
00:49:31,119 --> 00:49:33,440
and says that no information about the

1200
00:49:33,440 --> 00:49:35,440
message is ever revealed

1201
00:49:35,440 --> 00:49:36,960
during the signing phase during the

1202
00:49:36,960 --> 00:49:39,119
issuance phase

1203
00:49:39,119 --> 00:49:41,359
but again as we are

1204
00:49:41,359 --> 00:49:45,119
providing an attack against the

1205
00:49:45,119 --> 00:49:47,520
unforgetability we we're not covering

1206
00:49:47,520 --> 00:49:49,760
i'm not going to cover this

1207
00:49:49,760 --> 00:49:52,480
and uh perhaps one one of the most

1208
00:49:52,480 --> 00:49:54,960
popular blind signatures are snowboard

1209
00:49:54,960 --> 00:49:58,800
blind signatures and um uh the protocol

1210
00:49:58,800 --> 00:50:01,520
is a bit overwhelming uh and again like

1211
00:50:01,520 --> 00:50:03,040
we don't really care about the user so

1212
00:50:03,040 --> 00:50:07,359
let me simplify it a bit for you um

1213
00:50:07,359 --> 00:50:10,720
so uh it's not blind but it's a snorball

1214
00:50:10,720 --> 00:50:12,800
signature essentially work uh very much

1215
00:50:12,800 --> 00:50:15,119
like uh stationary notification protocol

1216
00:50:15,119 --> 00:50:17,680
so designer will send a commitment the

1217
00:50:17,680 --> 00:50:20,800
user will compute a challenge that

1218
00:50:20,800 --> 00:50:23,440
is of the form random oracle evaluation

1219
00:50:23,440 --> 00:50:27,440
over the commitment and the message

1220
00:50:27,440 --> 00:50:28,720
and then the server will compute a

1221
00:50:28,720 --> 00:50:30,480
response that is generated as the

1222
00:50:30,480 --> 00:50:33,520
combination of the challenge and the

1223
00:50:33,520 --> 00:50:35,359
and the commitment

1224
00:50:35,359 --> 00:50:36,559
um

1225
00:50:36,559 --> 00:50:39,359
the resulting protocol at the end of the

1226
00:50:39,359 --> 00:50:41,599
resulting signature will verify the

1227
00:50:41,599 --> 00:50:43,599
so-called verification equation which is

1228
00:50:43,599 --> 00:50:46,000
essentially

1229
00:50:46,000 --> 00:50:48,000
checking the computation of the response

1230
00:50:48,000 --> 00:50:49,359
but in the group

1231
00:50:49,359 --> 00:50:50,960
and then checking that the challenge was

1232
00:50:50,960 --> 00:50:52,559
correctly computed from the random

1233
00:50:52,559 --> 00:50:55,559
oracle

1234
00:50:58,800 --> 00:51:00,480
now

1235
00:51:00,480 --> 00:51:03,359
because this protocol has two messages

1236
00:51:03,359 --> 00:51:05,280
from the server when we study the

1237
00:51:05,280 --> 00:51:06,800
security

1238
00:51:06,800 --> 00:51:09,119
we cannot just

1239
00:51:09,119 --> 00:51:10,960
have one single oracle for signing

1240
00:51:10,960 --> 00:51:13,119
queries right because adversary might

1241
00:51:13,119 --> 00:51:15,839
start multiple sessions at the same time

1242
00:51:15,839 --> 00:51:18,240
and then stop and then decide a

1243
00:51:18,240 --> 00:51:19,839
challenge after seeing multiple

1244
00:51:19,839 --> 00:51:21,119
commitments

1245
00:51:21,119 --> 00:51:22,400
for this reason when we study the

1246
00:51:22,400 --> 00:51:24,720
security we have to consider to really

1247
00:51:24,720 --> 00:51:26,559
keep track of the open sessions which

1248
00:51:26,559 --> 00:51:28,880
one have been closed and so on

1249
00:51:28,880 --> 00:51:30,480
and as we will see

1250
00:51:30,480 --> 00:51:32,880
this in this uh this possibility of

1251
00:51:32,880 --> 00:51:35,119
opening parallel sessions is really what

1252
00:51:35,119 --> 00:51:39,520
allows for our attack kicking

1253
00:51:40,000 --> 00:51:41,920
so in order to attack snore what would i

1254
00:51:41,920 --> 00:51:42,960
do

1255
00:51:42,960 --> 00:51:45,839
i would open l sessions so i would

1256
00:51:45,839 --> 00:51:46,800
receive

1257
00:51:46,800 --> 00:51:49,520
l commitments from the server

1258
00:51:49,520 --> 00:51:51,040
and at the end i would have to produce l

1259
00:51:51,040 --> 00:51:53,280
plus one forgeries but for now

1260
00:51:53,280 --> 00:51:55,200
for now adversary doesn't do anything

1261
00:51:55,200 --> 00:51:58,720
it's going to stop and think

1262
00:51:58,720 --> 00:52:01,200
it is going to run the engine that i

1263
00:52:01,200 --> 00:52:03,839
discussed just before

1264
00:52:03,839 --> 00:52:07,040
in order to find the ros solution what

1265
00:52:07,040 --> 00:52:09,440
were the resolution they were a bunch of

1266
00:52:09,440 --> 00:52:11,040
vectors such that their linear

1267
00:52:11,040 --> 00:52:13,040
combination with these coefficients will

1268
00:52:13,040 --> 00:52:16,640
give me a harsh image

1269
00:52:16,880 --> 00:52:18,400
now i don't i really have this hash

1270
00:52:18,400 --> 00:52:20,880
function do i but instead i'm going to

1271
00:52:20,880 --> 00:52:23,599
forward each random oracle query to the

1272
00:52:23,599 --> 00:52:25,680
linear combination

1273
00:52:25,680 --> 00:52:27,920
of the elements in this vector with the

1274
00:52:27,920 --> 00:52:30,720
commitments that are over here

1275
00:52:30,720 --> 00:52:34,319
and uh this is the dash function for uh

1276
00:52:34,319 --> 00:52:36,160
that i that i'm provided when i run this

1277
00:52:36,160 --> 00:52:37,760
protocol i have a commitment and a

1278
00:52:37,760 --> 00:52:39,680
message the messages are all arbitrary

1279
00:52:39,680 --> 00:52:41,040
the bursary can choose whatever they

1280
00:52:41,040 --> 00:52:43,359
want

1281
00:52:44,800 --> 00:52:46,720
then the adversary is going just it's

1282
00:52:46,720 --> 00:52:48,240
going to reply with these coefficients

1283
00:52:48,240 --> 00:52:50,319
that i obtained from running the the

1284
00:52:50,319 --> 00:52:51,920
attack

1285
00:52:51,920 --> 00:52:53,280
and um

1286
00:52:53,280 --> 00:52:56,880
and i'm going to receive some responses

1287
00:52:56,880 --> 00:52:59,599
and then that's it i'm done i can

1288
00:52:59,599 --> 00:53:01,920
provide l plus one forgeries and they

1289
00:53:01,920 --> 00:53:04,319
are all the following form

1290
00:53:04,319 --> 00:53:05,520
i generate

1291
00:53:05,520 --> 00:53:06,480
um

1292
00:53:06,480 --> 00:53:08,880
the i forgery just as the linear

1293
00:53:08,880 --> 00:53:10,880
combination of the rows from the ros

1294
00:53:10,880 --> 00:53:13,280
solution of the commitments that are

1295
00:53:13,280 --> 00:53:14,800
given by designer

1296
00:53:14,800 --> 00:53:17,760
note that this guy over here is exactly

1297
00:53:17,760 --> 00:53:20,240
what gets plugged in the hash function

1298
00:53:20,240 --> 00:53:21,280
here

1299
00:53:21,280 --> 00:53:22,480
i'm going to do the same for the

1300
00:53:22,480 --> 00:53:24,960
challenges and note that

1301
00:53:24,960 --> 00:53:27,599
the challenge here is exactly what goes

1302
00:53:27,599 --> 00:53:30,400
on the left-hand side here

1303
00:53:30,400 --> 00:53:32,000
and i'm going to do the also the same

1304
00:53:32,000 --> 00:53:33,359
for the response

1305
00:53:33,359 --> 00:53:34,640
whoops

1306
00:53:34,640 --> 00:53:38,400
and they are valid uh signatures

1307
00:53:38,400 --> 00:53:41,200
because by definition of

1308
00:53:41,200 --> 00:53:42,400
the response

1309
00:53:42,400 --> 00:53:44,559
uh in here i will have they are the

1310
00:53:44,559 --> 00:53:46,880
linear combination um because

1311
00:53:46,880 --> 00:53:48,800
schneiderlin signatures are correct they

1312
00:53:48,800 --> 00:53:50,880
will satisfy the verification equation

1313
00:53:50,880 --> 00:53:53,440
in this transcript themselves

1314
00:53:53,440 --> 00:53:56,079
and um by distributivity of the

1315
00:53:56,079 --> 00:53:58,480
multiplication i can just replace them

1316
00:53:58,480 --> 00:54:00,480
with a c star and k star

1317
00:54:00,480 --> 00:54:02,240
so we really have l plus one value

1318
00:54:02,240 --> 00:54:05,440
signatures from running these

1319
00:54:05,440 --> 00:54:07,839
now um there are lots of protocols that

1320
00:54:07,839 --> 00:54:09,599
follow the same template

1321
00:54:09,599 --> 00:54:11,359
either you have additional conditions on

1322
00:54:11,359 --> 00:54:13,280
the commitments maybe you compute the

1323
00:54:13,280 --> 00:54:15,599
hash function in another way

1324
00:54:15,599 --> 00:54:17,200
maybe the child you have multiple

1325
00:54:17,200 --> 00:54:19,359
challenges that satisfy some common

1326
00:54:19,359 --> 00:54:22,720
property but the the attack works

1327
00:54:22,720 --> 00:54:25,040
exactly in the same way and uh this is

1328
00:54:25,040 --> 00:54:27,599
why despite this template were used

1329
00:54:27,599 --> 00:54:29,920
all over um in the case of parallel

1330
00:54:29,920 --> 00:54:32,079
sessions there was a there was sometimes

1331
00:54:32,079 --> 00:54:34,800
also this problem

1332
00:54:35,200 --> 00:54:37,680
so after publishing the the paper some

1333
00:54:37,680 --> 00:54:39,760
people were sort of unsure whether the

1334
00:54:39,760 --> 00:54:42,160
attack would be really practical so we

1335
00:54:42,160 --> 00:54:44,799
implemented it and um

1336
00:54:44,799 --> 00:54:46,559
yeah i mean

1337
00:54:46,559 --> 00:54:48,960
creating l plus one forgeries on

1338
00:54:48,960 --> 00:54:51,760
modern security parameters um

1339
00:54:51,760 --> 00:54:54,400
in sages like 55 lines even considering

1340
00:54:54,400 --> 00:54:56,240
the code for the server so

1341
00:54:56,240 --> 00:54:58,480
um yeah it's definitely a practical

1342
00:54:58,480 --> 00:55:00,000
attack this runs in

1343
00:55:00,000 --> 00:55:03,520
less than a couple seconds and um

1344
00:55:03,520 --> 00:55:06,000
yeah so i guess the moral of this talk

1345
00:55:06,000 --> 00:55:08,720
is that uh cryptography is difficult and

1346
00:55:08,720 --> 00:55:11,440
um even if sometimes we have security

1347
00:55:11,440 --> 00:55:13,599
proofs for protocols in a sequential

1348
00:55:13,599 --> 00:55:14,480
model

1349
00:55:14,480 --> 00:55:16,400
um you know on the internet there are

1350
00:55:16,400 --> 00:55:18,559
many things that happen in parallel so

1351
00:55:18,559 --> 00:55:19,599
um

1352
00:55:19,599 --> 00:55:21,520
as light variation in the setting might

1353
00:55:21,520 --> 00:55:23,280
be really dangerous for security and

1354
00:55:23,280 --> 00:55:25,839
more concretely we do not think that uh

1355
00:55:25,839 --> 00:55:28,160
snoreblind signatures should be um

1356
00:55:28,160 --> 00:55:30,720
deployed in a setting where you can have

1357
00:55:30,720 --> 00:55:33,680
multiple signing issuances at the same

1358
00:55:33,680 --> 00:55:34,400
time

1359
00:55:34,400 --> 00:55:36,799
and um

1360
00:55:36,799 --> 00:55:38,799
which is essentially the case of any tcp

1361
00:55:38,799 --> 00:55:40,799
connection um

1362
00:55:40,799 --> 00:55:42,640
but um yeah there are still other blind

1363
00:55:42,640 --> 00:55:44,240
signatures in the game there is blender

1364
00:55:44,240 --> 00:55:46,640
sa that is sort of a

1365
00:55:46,640 --> 00:55:49,599
vintage cryptosystem um

1366
00:55:49,599 --> 00:55:52,559
blind bls abba blind signature and close

1367
00:55:52,559 --> 00:55:54,000
snorban signatures that have been

1368
00:55:54,000 --> 00:55:57,119
recently produced by foxpower and others

1369
00:55:57,119 --> 00:55:58,000
so

1370
00:55:58,000 --> 00:56:02,240
yeah this is all i have to say thank you

1371
00:56:02,240 --> 00:56:04,959
thank you very much

1372
00:56:10,960 --> 00:56:13,760
thank you very much michaela um

1373
00:56:13,760 --> 00:56:15,440
i suppose it's early morning or late

1374
00:56:15,440 --> 00:56:16,880
night for you

1375
00:56:16,880 --> 00:56:20,960
maybe there's questions from the room

1376
00:56:21,200 --> 00:56:23,839
we do have time so so um

1377
00:56:23,839 --> 00:56:25,760
in your paper i have a question here

1378
00:56:25,760 --> 00:56:27,599
that came up for me because i'm looking

1379
00:56:27,599 --> 00:56:29,950
into distributed crypto

1380
00:56:29,950 --> 00:56:31,440
[Music]

1381
00:56:31,440 --> 00:56:33,440
you also mentioned that

1382
00:56:33,440 --> 00:56:35,520
distributed key generation protocols and

1383
00:56:35,520 --> 00:56:37,760
other discrete log based schemes

1384
00:56:37,760 --> 00:56:39,040
protocols

1385
00:56:39,040 --> 00:56:41,440
become

1386
00:56:41,760 --> 00:56:43,520
attackable through this can you

1387
00:56:43,520 --> 00:56:45,599
elaborate on the

1388
00:56:45,599 --> 00:56:47,839
the type of attacks that this is is it

1389
00:56:47,839 --> 00:56:48,880
um

1390
00:56:48,880 --> 00:56:50,880
or how did the possible defenses would

1391
00:56:50,880 --> 00:56:53,440
be is there any way to defend the blind

1392
00:56:53,440 --> 00:56:55,520
snore signatures

1393
00:56:55,520 --> 00:56:57,760
or is there it depends on the setting i

1394
00:56:57,760 --> 00:56:58,400
think

1395
00:56:58,400 --> 00:57:02,000
um for instance if you

1396
00:57:02,000 --> 00:57:03,680
yeah it really depends on the setting

1397
00:57:03,680 --> 00:57:05,359
where you're running this like the

1398
00:57:05,359 --> 00:57:07,440
trivia the trivial way of avoiding this

1399
00:57:07,440 --> 00:57:09,040
attack is to allow only for sequential

1400
00:57:09,040 --> 00:57:10,720
phrase and there are settings where you

1401
00:57:10,720 --> 00:57:13,040
can do this for instance if you're uh i

1402
00:57:13,040 --> 00:57:15,280
don't know you're connecting a usb

1403
00:57:15,280 --> 00:57:16,640
device and you know that you're

1404
00:57:16,640 --> 00:57:18,240
generating something only between the

1405
00:57:18,240 --> 00:57:20,799
two of you um but if you're talking to a

1406
00:57:20,799 --> 00:57:23,440
server then

1407
00:57:24,000 --> 00:57:25,760
either you expose yourself to a denial

1408
00:57:25,760 --> 00:57:28,000
of service or you expose yourself to l

1409
00:57:28,000 --> 00:57:30,400
plus one affordability so

1410
00:57:30,400 --> 00:57:32,000
that's uh that's a difficult choice to

1411
00:57:32,000 --> 00:57:33,920
make

1412
00:57:33,920 --> 00:57:35,760
okay yes

1413
00:57:35,760 --> 00:57:38,760
thanks

1414
00:57:40,079 --> 00:57:41,599
no other question from the room thank

1415
00:57:41,599 --> 00:57:45,119
you again mickele and all the authors of

1416
00:57:45,119 --> 00:57:47,520
this paper as well congratulations

1417
00:57:47,520 --> 00:57:50,559
so then i think we will now come to the

1418
00:57:50,559 --> 00:57:52,240
third and last

1419
00:57:52,240 --> 00:57:55,680
third and last paper in this session

1420
00:57:55,680 --> 00:57:57,839
this will be

1421
00:57:57,839 --> 00:58:00,480
this will be presented here in the room

1422
00:58:00,480 --> 00:58:02,319
i understand yes

1423
00:58:02,319 --> 00:58:04,960
so the title of the paper is um new

1424
00:58:04,960 --> 00:58:08,000
representations of the aes key schedule

1425
00:58:08,000 --> 00:58:10,559
it's by guy don leuron and clara perno

1426
00:58:10,559 --> 00:58:12,319
and clara is going to give the talk i

1427
00:58:12,319 --> 00:58:13,760
think i'm going to leave the microphone

1428
00:58:13,760 --> 00:58:16,559
right here for you

1429
00:58:17,520 --> 00:58:19,760
i don't know yet how to bring up the

1430
00:58:19,760 --> 00:58:21,680
slides here

1431
00:58:21,680 --> 00:58:23,920
but this will be

1432
00:58:23,920 --> 00:58:26,400
wait did you press that before

1433
00:58:26,400 --> 00:58:28,559
uh

1434
00:58:31,119 --> 00:58:34,559
on the desktop okay okay let me see or

1435
00:58:34,559 --> 00:58:36,880
maybe we can just switch to

1436
00:58:36,880 --> 00:58:39,040
no zoom zoom

1437
00:58:39,040 --> 00:58:41,440
desktop

1438
00:58:41,440 --> 00:58:42,480
is

1439
00:58:42,480 --> 00:58:44,240
this one no

1440
00:58:44,240 --> 00:58:46,640
okay

1441
00:58:48,160 --> 00:58:50,880
and then we want to

1442
00:58:50,880 --> 00:58:53,760
go here into presentation

1443
00:58:53,760 --> 00:58:56,160
perhaps first

1444
00:58:56,160 --> 00:58:58,880
zoom presentation how do we do that we

1445
00:58:58,880 --> 00:59:00,640
go back here

1446
00:59:00,640 --> 00:59:02,079
no

1447
00:59:02,079 --> 00:59:05,280
go back to zoom

1448
00:59:05,280 --> 00:59:07,200
here

1449
00:59:07,200 --> 00:59:07,400
now

1450
00:59:07,400 --> 00:59:10,479
[Music]

1451
00:59:10,799 --> 00:59:12,160
okay

1452
00:59:12,160 --> 00:59:14,720
maybe we have to go here huh

1453
00:59:14,720 --> 00:59:15,839
yes

1454
00:59:15,839 --> 00:59:18,799
because it's minimized okay and now we

1455
00:59:18,799 --> 00:59:20,559
share

1456
00:59:20,559 --> 00:59:22,400
we share

1457
00:59:22,400 --> 00:59:25,119
the screen

1458
00:59:26,880 --> 00:59:29,359
and now

1459
00:59:30,880 --> 00:59:33,839
you know how to make this

1460
00:59:37,680 --> 00:59:40,160
it's okay this must be windows

1461
00:59:40,160 --> 00:59:42,000
so how do we get the full screen here

1462
00:59:42,000 --> 00:59:45,960
control l does not work

1463
00:59:47,599 --> 00:59:49,359
no no

1464
00:59:49,359 --> 00:59:51,200
full screen how do you get full screen

1465
00:59:51,200 --> 00:59:53,200
here

1466
00:59:53,200 --> 00:59:55,119
no

1467
00:59:55,119 --> 01:00:00,079
here i don't know oh yes maybe

1468
01:00:00,079 --> 01:00:03,200
it used to be control l but

1469
01:00:03,200 --> 01:00:05,439
yes

1470
01:00:05,839 --> 01:00:07,839
it's not my computer but let me full

1471
01:00:07,839 --> 01:00:10,839
screen

1472
01:00:18,880 --> 01:00:21,359
i don't know

1473
01:00:22,319 --> 01:00:24,079
no it's not it's not what we want we

1474
01:00:24,079 --> 01:00:26,240
want full screen we want full screen

1475
01:00:26,240 --> 01:00:29,720
real full screen

1476
01:00:31,680 --> 01:00:34,000
page view maybe go to page view and try

1477
01:00:34,000 --> 01:00:35,839
that

1478
01:00:35,839 --> 01:00:38,240
no no that's good

1479
01:00:38,240 --> 01:00:43,720
now still okay yeah full screen

1480
01:00:45,520 --> 01:00:46,400
uh

1481
01:00:46,400 --> 01:00:48,799
i'm not sure if this is this firefox

1482
01:00:48,799 --> 01:00:50,640
we just double clicked on it okay that's

1483
01:00:50,640 --> 01:00:53,118
what we did

1484
01:00:53,440 --> 01:00:55,839
we have here the slides right click

1485
01:00:55,839 --> 01:00:59,119
right click and we open with try the two

1486
01:00:59,119 --> 01:01:01,839
arrows pointing next to the left of page

1487
01:01:01,839 --> 01:01:02,640
view

1488
01:01:02,640 --> 01:01:05,599
this one yeah that'll be great adobe

1489
01:01:05,599 --> 01:01:07,040
right because maybe it's going to

1490
01:01:07,040 --> 01:01:09,680
install adobe now who knows

1491
01:01:09,680 --> 01:01:11,440
oh no we're good this is a different

1492
01:01:11,440 --> 01:01:14,319
thing yes right okay here no no if it's

1493
01:01:14,319 --> 01:01:17,839
adobe it used to be ctrl l

1494
01:01:18,079 --> 01:01:20,559
you can try

1495
01:01:22,400 --> 01:01:26,319
try f11 ctrl l

1496
01:01:26,319 --> 01:01:30,799
okay can you see the slides in full

1497
01:01:30,880 --> 01:01:32,720
okay looks like because no answer is

1498
01:01:32,720 --> 01:01:33,920
good okay

1499
01:01:33,920 --> 01:01:36,640
sorry please go ahead

1500
01:01:36,640 --> 01:01:38,720
so thanks for the introduction my name

1501
01:01:38,720 --> 01:01:39,599
is

1502
01:01:39,599 --> 01:01:41,440
and i'm going to present a joint work

1503
01:01:41,440 --> 01:01:43,839
with gayatri

1504
01:01:43,839 --> 01:01:44,559
and

1505
01:01:44,559 --> 01:01:47,520
new representations of the aesc schedule

1506
01:01:47,520 --> 01:01:50,319
so dis is the most widely blocked cipher

1507
01:01:50,319 --> 01:01:52,559
used today it's used everywhere

1508
01:01:52,559 --> 01:01:55,520
and the aes now designates the winner of

1509
01:01:55,520 --> 01:01:57,839
the aes competition which is a success

1510
01:01:57,839 --> 01:01:59,599
of the rhino block cipher which was

1511
01:01:59,599 --> 01:02:02,319
designed by ryman on daymond

1512
01:02:02,319 --> 01:02:04,799
the aes works as well so starting from a

1513
01:02:04,799 --> 01:02:07,839
plain text of 128 bits

1514
01:02:07,839 --> 01:02:10,319
we alternate xor with a round key and a

1515
01:02:10,319 --> 01:02:12,400
run function here i do not describe the

1516
01:02:12,400 --> 01:02:13,680
wrong function because it's not the

1517
01:02:13,680 --> 01:02:15,119
topic of this talk

1518
01:02:15,119 --> 01:02:18,400
and at the end we obtain a cipher text

1519
01:02:18,400 --> 01:02:20,160
we are free version of the aes

1520
01:02:20,160 --> 01:02:23,760
corresponding to three uh key sizes 128

1521
01:02:23,760 --> 01:02:27,839
192 or 256 bits and here i will focus on

1522
01:02:27,839 --> 01:02:30,400
the 128 bit version

1523
01:02:30,400 --> 01:02:32,559
so after 20 years of cryptanalysis we

1524
01:02:32,559 --> 01:02:35,280
have a strong confidence in the uh aes

1525
01:02:35,280 --> 01:02:38,000
security because only seven rounds out

1526
01:02:38,000 --> 01:02:40,559
out of ten are broken and the progress

1527
01:02:40,559 --> 01:02:42,000
are quite slow

1528
01:02:42,000 --> 01:02:44,079
but concerning the key schedule with

1529
01:02:44,079 --> 01:02:46,480
which is the part in at the right uh in

1530
01:02:46,480 --> 01:02:47,599
this figure

1531
01:02:47,599 --> 01:02:49,200
uh we know that it's known to cause

1532
01:02:49,200 --> 01:02:51,520
issues in the related case settings

1533
01:02:51,520 --> 01:02:53,359
there are also some uh unexpected

1534
01:02:53,359 --> 01:02:54,960
properties that have already been

1535
01:02:54,960 --> 01:02:56,559
demonstrated like the keyboarding

1536
01:02:56,559 --> 01:02:59,280
property so in this talk we'll focus on

1537
01:02:59,280 --> 01:03:01,280
the key schedule so the key schedule is

1538
01:03:01,280 --> 01:03:03,599
the algorithm that allows to compute the

1539
01:03:03,599 --> 01:03:06,880
11 sub keys k0 to k10 from the master

1540
01:03:06,880 --> 01:03:11,280
key so it is an iterative algorithm

1541
01:03:11,280 --> 01:03:13,520
so this algorithm works as follows so

1542
01:03:13,520 --> 01:03:17,760
starting from a sub key

1543
01:03:17,760 --> 01:03:20,160
we have to briefly drop you here because

1544
01:03:20,160 --> 01:03:22,079
apparently the slides are not moving we

1545
01:03:22,079 --> 01:03:24,400
are not seeing the chat by the way

1546
01:03:24,400 --> 01:03:26,079
okay

1547
01:03:26,079 --> 01:03:27,039
but

1548
01:03:27,039 --> 01:03:28,799
but we are sharing we are sharing the

1549
01:03:28,799 --> 01:03:30,400
wrong thing okay

1550
01:03:30,400 --> 01:03:32,480
we are not sharing the desktop always

1551
01:03:32,480 --> 01:03:34,079
share your desktop even though it might

1552
01:03:34,079 --> 01:03:35,599
be embarrassing

1553
01:03:35,599 --> 01:03:38,480
um so where order is our share button

1554
01:03:38,480 --> 01:03:39,440
okay

1555
01:03:39,440 --> 01:03:40,960
because then we know at least what we

1556
01:03:40,960 --> 01:03:43,119
are sharing okay so now you should see

1557
01:03:43,119 --> 01:03:47,280
the real slide at slide 3.

1558
01:03:48,160 --> 01:03:52,319
so uh dis works as follows so at the top

1559
01:03:52,319 --> 01:03:54,400
we have a sub key which is here denoted

1560
01:03:54,400 --> 01:03:57,520
k0 to k15 and then to compute the next

1561
01:03:57,520 --> 01:03:59,760
sub key which is denoted k from 0 to k

1562
01:03:59,760 --> 01:04:02,559
prime 15 we apply this algorithm so

1563
01:04:02,559 --> 01:04:04,559
first there are four s boxes that

1564
01:04:04,559 --> 01:04:07,039
correspond to the non-linear parts and

1565
01:04:07,039 --> 01:04:09,200
they are the same as boxes as the one in

1566
01:04:09,200 --> 01:04:12,079
the round function then there is also a

1567
01:04:12,079 --> 01:04:14,000
with a round constant and a festive

1568
01:04:14,000 --> 01:04:16,160
network structure so looking at this

1569
01:04:16,160 --> 01:04:17,920
figure the impression is that all the

1570
01:04:17,920 --> 01:04:19,760
bytes are mixed

1571
01:04:19,760 --> 01:04:21,520
and if we iterate several times this

1572
01:04:21,520 --> 01:04:24,400
algorithm we think that uh each byte of

1573
01:04:24,400 --> 01:04:26,240
the output will depend on the full

1574
01:04:26,240 --> 01:04:27,359
inputs

1575
01:04:27,359 --> 01:04:29,359
but in this work

1576
01:04:29,359 --> 01:04:31,200
i cannot

1577
01:04:31,200 --> 01:04:32,799
i can't

1578
01:04:32,799 --> 01:04:35,039
move the

1579
01:04:35,039 --> 01:04:37,839
i can't move this one

1580
01:04:37,839 --> 01:04:39,280
hi yes

1581
01:04:39,280 --> 01:04:42,240
thanks so uh in this work we find some

1582
01:04:42,240 --> 01:04:44,559
alternative representation of the aes

1583
01:04:44,559 --> 01:04:46,559
schedule so for the free version of the

1584
01:04:46,559 --> 01:04:49,440
aes schedule and this representation

1585
01:04:49,440 --> 01:04:51,039
this demonstrates that even after a

1586
01:04:51,039 --> 01:04:52,640
large number of fronts of ki schedule

1587
01:04:52,640 --> 01:04:54,480
the key schedule does not mix all the

1588
01:04:54,480 --> 01:04:56,799
bytes and this is quite surprising

1589
01:04:56,799 --> 01:04:59,119
we have two applications the first one

1590
01:04:59,119 --> 01:05:00,880
concerns the fact that when we iterate

1591
01:05:00,880 --> 01:05:03,440
unknown numbers or from the key schedule

1592
01:05:03,440 --> 01:05:06,160
some shortland cycles appear on this

1593
01:05:06,160 --> 01:05:08,960
surprising we apply this on mixed feed

1594
01:05:08,960 --> 01:05:10,079
on the a

1595
01:05:10,079 --> 01:05:12,000
those are two authenticative block

1596
01:05:12,000 --> 01:05:13,760
ciphers and here i will present our

1597
01:05:13,760 --> 01:05:16,160
contribution on mix fit

1598
01:05:16,160 --> 01:05:19,039
secondly we also

1599
01:05:19,039 --> 01:05:20,319
demonstrate that

1600
01:05:20,319 --> 01:05:22,319
our new representation allows to

1601
01:05:22,319 --> 01:05:24,319
efficiently combine information from

1602
01:05:24,319 --> 01:05:26,640
remote sub keys from distance sub keys

1603
01:05:26,640 --> 01:05:28,640
as for example the first up key on the

1604
01:05:28,640 --> 01:05:31,039
last circuit and this allows to improve

1605
01:05:31,039 --> 01:05:32,559
the impossible differential on the

1606
01:05:32,559 --> 01:05:35,119
square attack against the aes so here i

1607
01:05:35,119 --> 01:05:37,440
will present the impossible differential

1608
01:05:37,440 --> 01:05:38,720
contribution

1609
01:05:38,720 --> 01:05:40,640
so let's start by describing our new

1610
01:05:40,640 --> 01:05:43,359
representation of the aes schedule

1611
01:05:43,359 --> 01:05:45,359
so we start by looking at invariant

1612
01:05:45,359 --> 01:05:47,760
subspaces so an event subspace is a

1613
01:05:47,760 --> 01:05:49,520
subspace a such that it exists and

1614
01:05:49,520 --> 01:05:52,160
offset u that verifies f of a plus u

1615
01:05:52,160 --> 01:05:54,880
equals a plus f of u so it means that an

1616
01:05:54,880 --> 01:05:56,720
f in subspace is sent to another half in

1617
01:05:56,720 --> 01:05:59,359
subspace with the same linear parts

1618
01:05:59,359 --> 01:06:01,200
this can be generalized into sepsis

1619
01:06:01,200 --> 01:06:03,359
trails so a substance trial is a

1620
01:06:03,359 --> 01:06:05,839
substance a success for all of set u we

1621
01:06:05,839 --> 01:06:09,200
have f of a plus u equal b plus f of u

1622
01:06:09,200 --> 01:06:11,200
and by looking at the permutation

1623
01:06:11,200 --> 01:06:13,839
corresponding to the key schedule uh we

1624
01:06:13,839 --> 01:06:15,680
found four families of subspace phrase

1625
01:06:15,680 --> 01:06:18,799
whose linear parts are e0 to e3

1626
01:06:18,799 --> 01:06:20,640
two separate strings are cycles so it

1627
01:06:20,640 --> 01:06:23,599
means that e0 is sent to e1 e1 to e2 e2

1628
01:06:23,599 --> 01:06:26,400
to e3 and e3 is sent to e0

1629
01:06:26,400 --> 01:06:27,200
so

1630
01:06:27,200 --> 01:06:28,559
here

1631
01:06:28,559 --> 01:06:31,280
our subspaces are images of each other

1632
01:06:31,280 --> 01:06:32,400
so if we

1633
01:06:32,400 --> 01:06:33,760
if we consider the permutation

1634
01:06:33,760 --> 01:06:35,520
corresponding to four rounds of key

1635
01:06:35,520 --> 01:06:38,720
schedule then uh the we obtain some

1636
01:06:38,720 --> 01:06:41,119
invariant subspaces and we obtain even

1637
01:06:41,119 --> 01:06:42,559
something stronger than invariant

1638
01:06:42,559 --> 01:06:44,480
subspaces because here it's true for all

1639
01:06:44,480 --> 01:06:46,799
the offsets u

1640
01:06:46,799 --> 01:06:49,599
we also notice that uh each

1641
01:06:49,599 --> 01:06:52,319
of the e i are of dimension four and

1642
01:06:52,319 --> 01:06:54,400
they are independent and knowing that we

1643
01:06:54,400 --> 01:06:57,200
are in a space of dimension 16

1644
01:06:57,200 --> 01:06:59,039
the full space is just the direct sum of

1645
01:06:59,039 --> 01:07:00,880
those four vector spaces so in the

1646
01:07:00,880 --> 01:07:02,799
following we are going to do a basis

1647
01:07:02,799 --> 01:07:04,880
change that correspond to a basis of e0

1648
01:07:04,880 --> 01:07:06,640
e1 e2 and if

1649
01:07:06,640 --> 01:07:08,480
so to do that we perform a linear

1650
01:07:08,480 --> 01:07:10,799
transformation a which correspond to

1651
01:07:10,799 --> 01:07:12,319
changes of basis and then the fourth

1652
01:07:12,319 --> 01:07:15,599
substances with will appear more clearly

1653
01:07:15,599 --> 01:07:17,920
so uh we are playing this representation

1654
01:07:17,920 --> 01:07:20,000
of one round of key schedule here our

1655
01:07:20,000 --> 01:07:22,480
four subscribers appear more clearly and

1656
01:07:22,480 --> 01:07:24,640
we see four independent functions each

1657
01:07:24,640 --> 01:07:26,640
acting on four bytes

1658
01:07:26,640 --> 01:07:28,720
so uh this representation is quite

1659
01:07:28,720 --> 01:07:30,160
surprising because

1660
01:07:30,160 --> 01:07:33,039
we split the computation into a four

1661
01:07:33,039 --> 01:07:35,359
independent function each acting on four

1662
01:07:35,359 --> 01:07:36,799
bytes

1663
01:07:36,799 --> 01:07:38,640
so here the four functions are very

1664
01:07:38,640 --> 01:07:40,319
similar so we have three identical

1665
01:07:40,319 --> 01:07:42,319
functions and one function that differ

1666
01:07:42,319 --> 01:07:44,160
because there is a xor with the round

1667
01:07:44,160 --> 01:07:46,000
constant in addition

1668
01:07:46,000 --> 01:07:48,720
so looking at this figure uh we observe

1669
01:07:48,720 --> 01:07:49,920
that

1670
01:07:49,920 --> 01:07:51,839
the key schedule does not mix all the

1671
01:07:51,839 --> 01:07:54,000
bytes

1672
01:07:54,000 --> 01:07:56,319
so that's our representation for one

1673
01:07:56,319 --> 01:07:59,280
round of the key schedule but if we want

1674
01:07:59,280 --> 01:08:01,839
to represent several one we will cancel

1675
01:08:01,839 --> 01:08:03,680
the rotation of four bytes to the right

1676
01:08:03,680 --> 01:08:05,839
by doing a rotation of four pi to the

1677
01:08:05,839 --> 01:08:07,440
left and then we obtain this

1678
01:08:07,440 --> 01:08:09,760
representation so at the top we have our

1679
01:08:09,760 --> 01:08:12,000
master key then we apply our linear

1680
01:08:12,000 --> 01:08:14,559
transformation a and then each round of

1681
01:08:14,559 --> 01:08:16,880
key schedule correspond to one line in

1682
01:08:16,880 --> 01:08:19,359
this figure and at the end to obtain our

1683
01:08:19,359 --> 01:08:21,759
sub key we just apply the inverse linear

1684
01:08:21,759 --> 01:08:24,640
transformation which is here denoted cr

1685
01:08:24,640 --> 01:08:26,880
so uh for each round of key schedule we

1686
01:08:26,880 --> 01:08:28,799
apply in parallel three times the

1687
01:08:28,799 --> 01:08:29,679
function

1688
01:08:29,679 --> 01:08:32,560
b on one time the function b i which is

1689
01:08:32,560 --> 01:08:34,880
similar to b they're just uh with a run

1690
01:08:34,880 --> 01:08:37,839
constant in addition so here we show

1691
01:08:37,839 --> 01:08:40,640
that uh the computation of case schedule

1692
01:08:40,640 --> 01:08:42,880
rounds can be split into uh four

1693
01:08:42,880 --> 01:08:45,040
independent competition computations

1694
01:08:45,040 --> 01:08:47,920
each acting on on four bytes

1695
01:08:47,920 --> 01:08:49,920
so uh this is our new representation of

1696
01:08:49,920 --> 01:08:52,399
the the key schedule and now let's move

1697
01:08:52,399 --> 01:08:54,719
on the first application so the first

1698
01:08:54,719 --> 01:08:56,319
application concerns the fact that when

1699
01:08:56,319 --> 01:08:58,319
we iterate and node numbers of front of

1700
01:08:58,319 --> 01:09:00,158
key schedule we find

1701
01:09:00,158 --> 01:09:02,640
some short length cycle and we apply

1702
01:09:02,640 --> 01:09:04,880
this to mix field so let's start by

1703
01:09:04,880 --> 01:09:07,279
describing mix fit so a mix fit was the

1704
01:09:07,279 --> 01:09:08,880
second one candidate in the nice

1705
01:09:08,880 --> 01:09:11,279
lightweight standardization process but

1706
01:09:11,279 --> 01:09:13,839
it wasn't selected as a finalist uh it

1707
01:09:13,839 --> 01:09:15,920
was submitted by chakraborty and nandi

1708
01:09:15,920 --> 01:09:18,000
and it's an aad algorithm so it means

1709
01:09:18,000 --> 01:09:20,080
that it's birds used to authenticate and

1710
01:09:20,080 --> 01:09:22,080
to encrypt data

1711
01:09:22,080 --> 01:09:25,279
so mixed feed works as follows so first

1712
01:09:25,279 --> 01:09:26,960
there is an initialization part that i

1713
01:09:26,960 --> 01:09:28,560
do not represent here so in the

1714
01:09:28,560 --> 01:09:30,319
initialization part

1715
01:09:30,319 --> 01:09:32,319
starting from a north on the master key

1716
01:09:32,319 --> 01:09:35,198
we compute an iv the initial vector on

1717
01:09:35,198 --> 01:09:38,399
the key z and then for each block of

1718
01:09:38,399 --> 01:09:41,439
message mi we apply a fit function and

1719
01:09:41,439 --> 01:09:44,080
an aes encryption and at the end we

1720
01:09:44,080 --> 01:09:46,238
obtain our tag t

1721
01:09:46,238 --> 01:09:48,319
so here the feed function is just a

1722
01:09:48,319 --> 01:09:50,719
linear and invertible function

1723
01:09:50,719 --> 01:09:51,520
and

1724
01:09:51,520 --> 01:09:53,759
the most important uh thing about mixed

1725
01:09:53,759 --> 01:09:56,320
feed is that all the aes are expected on

1726
01:09:56,320 --> 01:09:58,640
to be done with different circuits so it

1727
01:09:58,640 --> 01:10:00,560
means that the first aes is expected to

1728
01:10:00,560 --> 01:10:02,640
be done with the key z the second one

1729
01:10:02,640 --> 01:10:05,360
with the key p of z and etc with p the

1730
01:10:05,360 --> 01:10:07,520
permutation corresponding to 11 rounds

1731
01:10:07,520 --> 01:10:09,520
of key schedule so it means that in the

1732
01:10:09,520 --> 01:10:12,000
first aes we compute the sub key k0 to

1733
01:10:12,000 --> 01:10:14,560
k10 then we will also compute the next

1734
01:10:14,560 --> 01:10:18,159
sub key which is k11 and k11 will become

1735
01:10:18,159 --> 01:10:20,719
the master key of the second aes

1736
01:10:20,719 --> 01:10:23,040
so here p is iterated so in the

1737
01:10:23,040 --> 01:10:25,040
following we will study its cycle

1738
01:10:25,040 --> 01:10:26,640
because if there is a cycle in the

1739
01:10:26,640 --> 01:10:28,080
permutation p

1740
01:10:28,080 --> 01:10:30,320
it means that two aes will be done with

1741
01:10:30,320 --> 01:10:33,199
the same master key and then uh there

1742
01:10:33,199 --> 01:10:34,960
will be some possible attacks like a

1743
01:10:34,960 --> 01:10:36,480
forgery attack that i will describe

1744
01:10:36,480 --> 01:10:37,360
later

1745
01:10:37,360 --> 01:10:39,520
so uh what is important is that uh the

1746
01:10:39,520 --> 01:10:42,000
the the designers of mixed feed expect

1747
01:10:42,000 --> 01:10:43,920
that all the aes are done with different

1748
01:10:43,920 --> 01:10:45,920
sub keys but if a sap key appears two

1749
01:10:45,920 --> 01:10:48,080
times then there will be some attacks

1750
01:10:48,080 --> 01:10:51,840
but in 2019 mustafa kailara fined 20

1751
01:10:51,840 --> 01:10:54,159
cycles out of 33 tests

1752
01:10:54,159 --> 01:10:56,159
for the permutation and this is quite

1753
01:10:56,159 --> 01:10:58,320
surprising for two facts the first one

1754
01:10:58,320 --> 01:11:00,239
is that all the cycles they found are of

1755
01:11:00,239 --> 01:11:03,440
the same length which is two to the 33.7

1756
01:11:03,440 --> 01:11:05,040
approximately

1757
01:11:05,040 --> 01:11:06,239
and the second

1758
01:11:06,239 --> 01:11:08,480
surprising fact is that this launch is

1759
01:11:08,480 --> 01:11:10,320
much smaller than the expected length

1760
01:11:10,320 --> 01:11:13,920
for a cycle over 128 bit permutation

1761
01:11:13,920 --> 01:11:16,280
because the expected length is 2 to the

1762
01:11:16,280 --> 01:11:19,440
127 approximate so in the following

1763
01:11:19,440 --> 01:11:21,120
using our new representation of the key

1764
01:11:21,120 --> 01:11:24,320
schedule we'll explain this observation

1765
01:11:24,320 --> 01:11:27,440
so to do that uh we start by looking at

1766
01:11:27,440 --> 01:11:29,199
the permutation p which corresponds to

1767
01:11:29,199 --> 01:11:31,600
11 rounds of key schedule in our new

1768
01:11:31,600 --> 01:11:33,199
representation

1769
01:11:33,199 --> 01:11:36,640
so uh here we'll define f1 f2 f3 and a4

1770
01:11:36,640 --> 01:11:39,440
as the fourth function applied in in

1771
01:11:39,440 --> 01:11:41,440
each on a four byte chunk

1772
01:11:41,440 --> 01:11:43,840
and then uh we see that there is a left

1773
01:11:43,840 --> 01:11:46,480
rotation of four bytes uh when we

1774
01:11:46,480 --> 01:11:49,120
iterate two times so if we iterate this

1775
01:11:49,120 --> 01:11:51,120
four times then the left rotation will

1776
01:11:51,120 --> 01:11:52,840
be cancelled and we obtained this

1777
01:11:52,840 --> 01:11:55,440
representation so here i represent four

1778
01:11:55,440 --> 01:11:57,600
iteration of eleven rounds of key

1779
01:11:57,600 --> 01:12:00,159
schedule in our new representation and

1780
01:12:00,159 --> 01:12:02,080
uh if we denote five one five two five

1781
01:12:02,080 --> 01:12:04,480
three and five four the four function uh

1782
01:12:04,480 --> 01:12:07,120
each applied on a four by chunk then we

1783
01:12:07,120 --> 01:12:09,520
will be able to study the cycle the

1784
01:12:09,520 --> 01:12:11,120
possible cycle lengths of the big

1785
01:12:11,120 --> 01:12:13,520
permutation so the permutation patil

1786
01:12:13,520 --> 01:12:15,840
therefore uh compared to the possible

1787
01:12:15,840 --> 01:12:18,800
cycle lengths of 515 253 and 54 and what

1788
01:12:18,800 --> 01:12:20,719
we observed is that the length of the

1789
01:12:20,719 --> 01:12:22,960
small cycles so the cycles of five one

1790
01:12:22,960 --> 01:12:24,719
five two five three and five four divide

1791
01:12:24,719 --> 01:12:27,040
the length of the big cycle

1792
01:12:27,040 --> 01:12:29,040
and conversely the length of the big

1793
01:12:29,040 --> 01:12:31,120
cycle is just the lowest common multiple

1794
01:12:31,120 --> 01:12:33,199
of the length of the small cycles but in

1795
01:12:33,199 --> 01:12:35,920
general the lowest common multiple of

1796
01:12:35,920 --> 01:12:38,080
four numbers are no reason to be really

1797
01:12:38,080 --> 01:12:39,520
smaller than the product of those

1798
01:12:39,520 --> 01:12:42,560
numbers but here the function phi i are

1799
01:12:42,560 --> 01:12:43,600
not

1800
01:12:43,600 --> 01:12:45,199
are particular because they share the

1801
01:12:45,199 --> 01:12:47,360
same cycle structure so it means that if

1802
01:12:47,360 --> 01:12:49,760
we have a cycle of length l for phi 1

1803
01:12:49,760 --> 01:12:51,520
then we will also have the cycles of

1804
01:12:51,520 --> 01:12:54,960
length l for phi 2 5 3 and phi 4.

1805
01:12:54,960 --> 01:12:56,320
this is due to the fact that the

1806
01:12:56,320 --> 01:12:58,800
function phi i are just a composition of

1807
01:12:58,800 --> 01:13:01,120
the function f i always in the same

1808
01:13:01,120 --> 01:13:03,600
order but with different starting points

1809
01:13:03,600 --> 01:13:05,679
and if we take the lowest common

1810
01:13:05,679 --> 01:13:08,800
multiple of l l l and l is just l so

1811
01:13:08,800 --> 01:13:12,239
here our short line cycles appear so to

1812
01:13:12,239 --> 01:13:14,800
compute the possible cycle lengths for

1813
01:13:14,800 --> 01:13:17,360
the permutation petal therefore on

1814
01:13:17,360 --> 01:13:19,440
under the permutation p we just need to

1815
01:13:19,440 --> 01:13:22,719
study the cycle of one of the uh

1816
01:13:22,719 --> 01:13:25,520
permutation phi i so we choose to study

1817
01:13:25,520 --> 01:13:28,080
phi one for example and it's a 32-bit

1818
01:13:28,080 --> 01:13:30,880
permutation so it's easy to study and we

1819
01:13:30,880 --> 01:13:33,360
obtain that with probability 82 percent

1820
01:13:33,360 --> 01:13:35,520
uh an element belong to the largest

1821
01:13:35,520 --> 01:13:39,360
cycles of phi 1 which is of length l

1822
01:13:39,360 --> 01:13:41,679
uh and the same thing happened for 5.253

1823
01:13:41,679 --> 01:13:44,480
and phi 4. so with probability 82

1824
01:13:44,480 --> 01:13:46,960
percent for 4 so approximately 45

1825
01:13:46,960 --> 01:13:49,440
percent uh we obtain an element in the

1826
01:13:49,440 --> 01:13:51,920
cycles of length l for petite therefore

1827
01:13:51,920 --> 01:13:54,640
and an element in the cycles of lens 4l

1828
01:13:54,640 --> 01:13:57,040
if we go back to the permutation p

1829
01:13:57,040 --> 01:13:59,760
so to sum up here we obtain that 45

1830
01:13:59,760 --> 01:14:02,000
percent of the keys belong to the cycles

1831
01:14:02,000 --> 01:14:04,239
of length l

1832
01:14:04,239 --> 01:14:04,960
uh

1833
01:14:04,960 --> 01:14:07,040
and this explains the observation made

1834
01:14:07,040 --> 01:14:09,040
on mixed feed by mustafa kailara that i

1835
01:14:09,040 --> 01:14:10,640
present previously

1836
01:14:10,640 --> 01:14:12,880
this also allows to make a forgery

1837
01:14:12,880 --> 01:14:15,520
attack against mixed feet and this

1838
01:14:15,520 --> 01:14:17,840
contradicts an assumption made in a

1839
01:14:17,840 --> 01:14:21,040
security proof by the authors of mix fit

1840
01:14:21,040 --> 01:14:22,320
so

1841
01:14:22,320 --> 01:14:24,320
this is the explanation this is all for

1842
01:14:24,320 --> 01:14:27,280
the explanation of shortline cycle but

1843
01:14:27,280 --> 01:14:29,440
now let's explain briefly the forgery

1844
01:14:29,440 --> 01:14:31,679
attack so the goal of a four jewelry

1845
01:14:31,679 --> 01:14:33,840
attack is to forge a valid tag t prime

1846
01:14:33,840 --> 01:14:36,719
for ciphertext c prime using a message

1847
01:14:36,719 --> 01:14:38,960
ciphertext on the type

1848
01:14:38,960 --> 01:14:42,159
and to do that mustafa kela proposed to

1849
01:14:42,159 --> 01:14:44,400
assume that the key z belongs to cycles

1850
01:14:44,400 --> 01:14:46,800
of length l and to choose a message m

1851
01:14:46,800 --> 01:14:49,520
made of m blocks with m bigger than l

1852
01:14:49,520 --> 01:14:50,719
then

1853
01:14:50,719 --> 01:14:53,360
he applies a cut and pass strategy so

1854
01:14:53,360 --> 01:14:54,239
first

1855
01:14:54,239 --> 01:14:56,320
he computes we need to compute the two

1856
01:14:56,320 --> 01:14:59,440
pink's arrows uh using the fact that

1857
01:14:59,440 --> 01:15:02,320
feed is a linear and invertible function

1858
01:15:02,320 --> 01:15:04,320
and then we will pass the two pink

1859
01:15:04,320 --> 01:15:06,400
arrows and compute a new ciphertexted

1860
01:15:06,400 --> 01:15:08,640
block ciphertext block that is also

1861
01:15:08,640 --> 01:15:11,840
authenticated by the same tag

1862
01:15:11,840 --> 01:15:14,320
so here we obtain a forgery attack that

1863
01:15:14,320 --> 01:15:16,880
only requires a non plaintext of length

1864
01:15:16,880 --> 01:15:19,679
higher than 2 to the 37.7 bytes it

1865
01:15:19,679 --> 01:15:21,520
doesn't require any memory or time

1866
01:15:21,520 --> 01:15:23,920
complexity and it succeeded when the key

1867
01:15:23,920 --> 01:15:26,080
belonged to a cycles of lens l and we

1868
01:15:26,080 --> 01:15:27,679
have previously demonstrated that this

1869
01:15:27,679 --> 01:15:30,239
happened with probability 45

1870
01:15:30,239 --> 01:15:32,400
we have verified this using the mixed

1871
01:15:32,400 --> 01:15:34,800
feed reference and implementation and we

1872
01:15:34,800 --> 01:15:38,159
obtained 41 success out of 100 atoms so

1873
01:15:38,159 --> 01:15:39,679
it's quite coherent

1874
01:15:39,679 --> 01:15:42,719
so this is all for the first application

1875
01:15:42,719 --> 01:15:45,120
so now for the second application

1876
01:15:45,120 --> 01:15:46,960
we look at impossible different cell

1877
01:15:46,960 --> 01:15:48,880
attack against the ais

1878
01:15:48,880 --> 01:15:50,000
so

1879
01:15:50,000 --> 01:15:52,400
this is the impossible attack impossible

1880
01:15:52,400 --> 01:15:54,320
differential attack against seven rounds

1881
01:15:54,320 --> 01:15:56,480
of the aes and this attack can be

1882
01:15:56,480 --> 01:15:59,120
decomposed in two parts first we will

1883
01:15:59,120 --> 01:16:01,600
find some candidates to the bytes marked

1884
01:16:01,600 --> 01:16:03,679
with a g in the figure so the bytes

1885
01:16:03,679 --> 01:16:06,400
belong to k0 and k7 and then in the

1886
01:16:06,400 --> 01:16:07,840
second step we want to find the

1887
01:16:07,840 --> 01:16:09,760
corresponding master keys

1888
01:16:09,760 --> 01:16:12,080
so to do that what was previously done

1889
01:16:12,080 --> 01:16:14,480
is to start from the 10 known bytes of

1890
01:16:14,480 --> 01:16:16,719
k0 and then do an exhaustive search of

1891
01:16:16,719 --> 01:16:18,400
the six missing bytes

1892
01:16:18,400 --> 01:16:19,520
and

1893
01:16:19,520 --> 01:16:21,760
then filter according to the four bytes

1894
01:16:21,760 --> 01:16:24,719
of uh k7 so naively what is what was

1895
01:16:24,719 --> 01:16:27,120
done so uh is to guess six bytes and

1896
01:16:27,120 --> 01:16:30,080
then filter using four bytes of k7 but

1897
01:16:30,080 --> 01:16:32,480
using our new representation we are able

1898
01:16:32,480 --> 01:16:34,640
to filter

1899
01:16:34,640 --> 01:16:38,320
according to two bytes of k set of k7

1900
01:16:38,320 --> 01:16:40,560
without guessing uh the six missing

1901
01:16:40,560 --> 01:16:44,400
bytes of k0 and this will reduce the

1902
01:16:44,400 --> 01:16:48,000
time complexity so uh in order to show

1903
01:16:48,000 --> 01:16:50,719
you a little bit how it works uh here we

1904
01:16:50,719 --> 01:16:53,920
represent k0 on k7 in our new basis so

1905
01:16:53,920 --> 01:16:56,560
we put in black all the non-bytes and in

1906
01:16:56,560 --> 01:16:59,280
grey all the unknown bytes and we want

1907
01:16:59,280 --> 01:17:02,880
to filter according to one byte of k7

1908
01:17:02,880 --> 01:17:04,560
so here the

1909
01:17:04,560 --> 01:17:06,159
easiest thing to do is to filter

1910
01:17:06,159 --> 01:17:08,960
according to k12 and what we observed is

1911
01:17:08,960 --> 01:17:11,679
that to compute the value of k12

1912
01:17:11,679 --> 01:17:14,800
according to the first step key and k0

1913
01:17:14,800 --> 01:17:17,120
we just need to know the input of f1 so

1914
01:17:17,120 --> 01:17:19,360
we just need to know 32 bit of

1915
01:17:19,360 --> 01:17:21,679
information about k0 so this is quite

1916
01:17:21,679 --> 01:17:24,560
surprising and here we already know two

1917
01:17:24,560 --> 01:17:27,440
bytes of k0 so we just need to guess two

1918
01:17:27,440 --> 01:17:32,159
more bytes of k0 which are k12 and k14

1919
01:17:32,159 --> 01:17:34,159
and then we are able to filter according

1920
01:17:34,159 --> 01:17:37,760
to k12 uh of k7 so here by guessing only

1921
01:17:37,760 --> 01:17:40,159
two bytes of k0 we are able to filter

1922
01:17:40,159 --> 01:17:42,640
according to one byte of k7

1923
01:17:42,640 --> 01:17:46,159
then uh after after guessing two bytes

1924
01:17:46,159 --> 01:17:50,080
of k0 so the byte k12 on k14 we can see

1925
01:17:50,080 --> 01:17:53,440
that uh all the input of f3 is known so

1926
01:17:53,440 --> 01:17:55,840
uh if all the input of f3 is none then

1927
01:17:55,840 --> 01:17:58,000
we are able to compute all the output of

1928
01:17:58,000 --> 01:17:58,880
f3

1929
01:17:58,880 --> 01:18:00,719
and then um

1930
01:18:00,719 --> 01:18:02,800
we are able to filter according to a

1931
01:18:02,800 --> 01:18:05,760
second byte of k7 because here the byte

1932
01:18:05,760 --> 01:18:09,199
in position 6 of k7 can be decomposed as

1933
01:18:09,199 --> 01:18:12,320
a k14 zork

1934
01:18:12,320 --> 01:18:15,520
14 and then here we are able to filter

1935
01:18:15,520 --> 01:18:18,159
according to a second byte of uh

1936
01:18:18,159 --> 01:18:20,560
k7 by just i've been guessing two bytes

1937
01:18:20,560 --> 01:18:23,520
of case zero so here i detailed for the

1938
01:18:23,520 --> 01:18:25,760
two first bytes of k7 but then we are

1939
01:18:25,760 --> 01:18:27,040
going to do the same for the two

1940
01:18:27,040 --> 01:18:30,239
remaining bits bytes of k7

1941
01:18:30,239 --> 01:18:32,960
so uh this is an interesting result that

1942
01:18:32,960 --> 01:18:35,520
can be generalized so what we obtain is

1943
01:18:35,520 --> 01:18:38,640
that uh using our new representation a

1944
01:18:38,640 --> 01:18:41,040
byte in the last column depends on only

1945
01:18:41,040 --> 01:18:43,600
32 bits of information of another

1946
01:18:43,600 --> 01:18:46,800
circuit so for example the master key

1947
01:18:46,800 --> 01:18:48,480
and the byte in the third or in the

1948
01:18:48,480 --> 01:18:51,280
second column depends on only 64 bits of

1949
01:18:51,280 --> 01:18:53,199
information and the byte in the first

1950
01:18:53,199 --> 01:18:55,679
column depends on the world sub key so

1951
01:18:55,679 --> 01:18:59,360
128 bits so this demonstrates that even

1952
01:18:59,360 --> 01:19:01,040
after a large number of fronts of ki

1953
01:19:01,040 --> 01:19:03,199
schedule the key schedule does not mix

1954
01:19:03,199 --> 01:19:04,400
all the bytes and this is quite

1955
01:19:04,400 --> 01:19:05,600
surprising

1956
01:19:05,600 --> 01:19:07,760
so we apply this to the impossible

1957
01:19:07,760 --> 01:19:09,679
differential attacks and we slightly

1958
01:19:09,679 --> 01:19:11,679
improve the data time on memory

1959
01:19:11,679 --> 01:19:12,960
complexity

1960
01:19:12,960 --> 01:19:15,679
and more recently we also applied this

1961
01:19:15,679 --> 01:19:18,159
to other attacks but this was not in the

1962
01:19:18,159 --> 01:19:20,080
european paper but it will be soon on

1963
01:19:20,080 --> 01:19:22,239
e-print so we slightly improve the

1964
01:19:22,239 --> 01:19:23,840
related key impossible differential

1965
01:19:23,840 --> 01:19:27,280
attacks against aes 192 the impossible

1966
01:19:27,280 --> 01:19:29,120
differential attacks again rhinedale

1967
01:19:29,120 --> 01:19:31,760
with a block size and a key size of 256

1968
01:19:31,760 --> 01:19:34,239
bits and a descriptor attacks against a

1969
01:19:34,239 --> 01:19:37,280
runs of aes 192

1970
01:19:37,280 --> 01:19:40,320
so uh let's conclude uh so in this work

1971
01:19:40,320 --> 01:19:42,400
we find some alternative representation

1972
01:19:42,400 --> 01:19:45,679
of the key schedule so for the 128 bit

1973
01:19:45,679 --> 01:19:47,679
version we split into four chunks of

1974
01:19:47,679 --> 01:19:51,040
four bytes for the 192 bits version we

1975
01:19:51,040 --> 01:19:53,679
split into two chunks of 12 bytes and

1976
01:19:53,679 --> 01:19:56,320
for the 256 bit version we split into

1977
01:19:56,320 --> 01:19:58,880
four chunks of a byte

1978
01:19:58,880 --> 01:20:02,159
so we apply this on mixed feed on the a

1979
01:20:02,159 --> 01:20:04,080
and we explain an attack on mixed finn

1980
01:20:04,080 --> 01:20:06,719
and find a new attack on a uh in the

1981
01:20:06,719 --> 01:20:08,560
boss case they exploit the presence of

1982
01:20:08,560 --> 01:20:10,800
short-lane cycles when iterating uh

1983
01:20:10,800 --> 01:20:13,040
non-numbers of fronts of kiss schedule

1984
01:20:13,040 --> 01:20:15,440
we also uh improve the impossible

1985
01:20:15,440 --> 01:20:17,040
different sounds of square attacks

1986
01:20:17,040 --> 01:20:19,120
against the ais by combining more

1987
01:20:19,120 --> 01:20:20,800
efficiently in the information from

1988
01:20:20,800 --> 01:20:22,960
distant sub-keys as for example the

1989
01:20:22,960 --> 01:20:25,120
first on the last keys

1990
01:20:25,120 --> 01:20:27,040
and all of this confirms that the key

1991
01:20:27,040 --> 01:20:28,800
schedule should not be considered as a

1992
01:20:28,800 --> 01:20:30,560
random permutation

1993
01:20:30,560 --> 01:20:32,800
so thanks for your attention and if you

1994
01:20:32,800 --> 01:20:37,320
want more detail you can read our paper

1995
01:20:46,639 --> 01:20:48,239
i have to share the microphone here a

1996
01:20:48,239 --> 01:20:49,840
little bit

1997
01:20:49,840 --> 01:20:53,520
uh questions from the room from remote

1998
01:20:53,520 --> 01:20:56,320
if you're remote i think i hope you can

1999
01:20:56,320 --> 01:20:58,840
speak up in the

2000
01:20:58,840 --> 01:21:02,000
room so it occurred to me my question

2001
01:21:02,000 --> 01:21:02,800
here

2002
01:21:02,800 --> 01:21:05,280
um what are the practical implications

2003
01:21:05,280 --> 01:21:07,679
for the security of aes now you had your

2004
01:21:07,679 --> 01:21:09,120
slide yes

2005
01:21:09,120 --> 01:21:10,159
where

2006
01:21:10,159 --> 01:21:12,639
it's it's a bit less less and less what

2007
01:21:12,639 --> 01:21:14,480
is the practical implication of the

2008
01:21:14,480 --> 01:21:16,159
lifetime of aes

2009
01:21:16,159 --> 01:21:18,400
for the moment i think uh

2010
01:21:18,400 --> 01:21:20,320
the security of aes

2011
01:21:20,320 --> 01:21:22,320
is not compromised because

2012
01:21:22,320 --> 01:21:25,040
our improvement is quite small

2013
01:21:25,040 --> 01:21:27,360
but perhaps some other attacks will

2014
01:21:27,360 --> 01:21:29,440
appear one day or

2015
01:21:29,440 --> 01:21:31,120
okay and there will be others will

2016
01:21:31,120 --> 01:21:33,760
extend it yes but for the moment our

2017
01:21:33,760 --> 01:21:35,679
improvement is quite strike so

2018
01:21:35,679 --> 01:21:38,000
okay i one other question

2019
01:21:38,000 --> 01:21:40,000
how did you come up with this idea is it

2020
01:21:40,000 --> 01:21:42,000
some hierarchical moment where you are

2021
01:21:42,000 --> 01:21:44,080
we start by studying mixed field

2022
01:21:44,080 --> 01:21:46,800
and we wanted to explain the observation

2023
01:21:46,800 --> 01:21:48,400
by kailara

2024
01:21:48,400 --> 01:21:49,120
and

2025
01:21:49,120 --> 01:21:51,360
to do that we studied the ki

2026
01:21:51,360 --> 01:21:52,880
schedule and by looking at the

2027
01:21:52,880 --> 01:21:54,719
representation of a round round of

2028
01:21:54,719 --> 01:21:57,040
kiscadal we

2029
01:21:57,040 --> 01:21:59,679
like by drawing some other

2030
01:21:59,679 --> 01:22:01,440
representation of the key schedule we

2031
01:22:01,440 --> 01:22:03,920
find this representation okay

2032
01:22:03,920 --> 01:22:06,480
yes our starting point was mixed field

2033
01:22:06,480 --> 01:22:11,400
good thank you and congratulations again

2034
01:22:18,480 --> 01:22:20,239
okay i understand

2035
01:22:20,239 --> 01:22:23,199
let's stop the sharing here i understand

2036
01:22:23,199 --> 01:22:25,840
that there is now a coffee break here a

2037
01:22:25,840 --> 01:22:27,760
nighttime break wherever you are on the

2038
01:22:27,760 --> 01:22:31,440
world uh the conference resumes here

2039
01:22:31,440 --> 01:22:34,320
uh in the room and in the virtual rooms

2040
01:22:34,320 --> 01:22:36,480
at the next full hour

2041
01:22:36,480 --> 01:22:39,678
uh with public key

