1
00:00:00,799 --> 00:00:02,240
hello everyone my name is michelle

2
00:00:02,240 --> 00:00:04,720
iceland i'm representing range proofs um

3
00:00:04,720 --> 00:00:07,120
more specifically efficient range proofs

4
00:00:07,120 --> 00:00:08,559
with transparent setup from bounded

5
00:00:08,559 --> 00:00:10,320
integer commitments

6
00:00:10,320 --> 00:00:11,200
um

7
00:00:11,200 --> 00:00:13,440
and this is john worked with jeffrey

8
00:00:13,440 --> 00:00:17,039
gutill mr close and one min

9
00:00:17,039 --> 00:00:19,760
so first of all what are range proofs

10
00:00:19,760 --> 00:00:21,760
well it's just a way to show that some

11
00:00:21,760 --> 00:00:24,320
hidden but fixed integer x lies in a

12
00:00:24,320 --> 00:00:26,240
given range a b

13
00:00:26,240 --> 00:00:28,560
and this can be used in a wide rate

14
00:00:28,560 --> 00:00:30,240
wide range of applications for example

15
00:00:30,240 --> 00:00:31,840
earnings credentials

16
00:00:31,840 --> 00:00:33,040
where you might want to show that you

17
00:00:33,040 --> 00:00:34,960
have a certain age or anonymous

18
00:00:34,960 --> 00:00:36,320
transactions where you might want to

19
00:00:36,320 --> 00:00:37,440
show that

20
00:00:37,440 --> 00:00:40,879
a your balance that is hidden but fixed

21
00:00:40,879 --> 00:00:43,120
is non-negative so you don't have

22
00:00:43,120 --> 00:00:45,760
overspending in your system

23
00:00:45,760 --> 00:00:46,719
so

24
00:00:46,719 --> 00:00:48,559
before i dive into the construction i

25
00:00:48,559 --> 00:00:49,600
want to

26
00:00:49,600 --> 00:00:51,360
define two primitives that will be

27
00:00:51,360 --> 00:00:52,480
necessary

28
00:00:52,480 --> 00:00:55,600
first of all commitments so in our case

29
00:00:55,600 --> 00:00:56,960
i will draw

30
00:00:56,960 --> 00:00:59,359
commitments with a blue box around the

31
00:00:59,359 --> 00:01:02,559
committed value x with randomness r

32
00:01:02,559 --> 00:01:06,479
and then given this commitment c

33
00:01:06,479 --> 00:01:09,680
we can open it by providing x and r to a

34
00:01:09,680 --> 00:01:11,040
verify and then he can check whether

35
00:01:11,040 --> 00:01:13,520
he's convinced by it and we want two

36
00:01:13,520 --> 00:01:14,960
main properties

37
00:01:14,960 --> 00:01:16,479
the first one being that the commitment

38
00:01:16,479 --> 00:01:19,040
should not reveal x so it's hiding and

39
00:01:19,040 --> 00:01:20,560
the second one being that the commitment

40
00:01:20,560 --> 00:01:22,479
should not be able to be open to

41
00:01:22,479 --> 00:01:26,159
something else then x so it binds the

42
00:01:26,159 --> 00:01:28,720
decommitter to x

43
00:01:28,720 --> 00:01:29,920
so

44
00:01:29,920 --> 00:01:32,880
so far so good those are standard

45
00:01:32,880 --> 00:01:35,280
requirements and now

46
00:01:35,280 --> 00:01:37,840
for this talk i want two other

47
00:01:37,840 --> 00:01:39,920
requirements the first one being that

48
00:01:39,920 --> 00:01:42,960
the message base should be said q

49
00:01:42,960 --> 00:01:44,240
and this is important for the

50
00:01:44,240 --> 00:01:46,240
construction and the second one is

51
00:01:46,240 --> 00:01:48,240
homomorphy

52
00:01:48,240 --> 00:01:50,720
so we want additive homomorphism and

53
00:01:50,720 --> 00:01:53,439
additive homomorphism of the commitment

54
00:01:53,439 --> 00:01:55,040
so we want to be able to compute a

55
00:01:55,040 --> 00:01:57,600
commitment to x0 plus x1 given a

56
00:01:57,600 --> 00:02:00,479
commitment to x0 and a commitment to x1

57
00:02:00,479 --> 00:02:03,280
and similarly we want to

58
00:02:03,280 --> 00:02:05,040
be able to compute

59
00:02:05,040 --> 00:02:06,079
the

60
00:02:06,079 --> 00:02:08,878
commitment n times x

61
00:02:08,878 --> 00:02:11,038
um from a commitment x

62
00:02:11,038 --> 00:02:12,879
where n is a scatter

63
00:02:12,879 --> 00:02:14,720
so the second primitive i want to

64
00:02:14,720 --> 00:02:17,040
introduce are sigma protocols

65
00:02:17,040 --> 00:02:19,440
here a prover can show to a verify that

66
00:02:19,440 --> 00:02:24,080
he knows a witness w for a statement x

67
00:02:24,080 --> 00:02:26,400
and generally he proceeds as follows so

68
00:02:26,400 --> 00:02:29,040
it's always a three round protocol

69
00:02:29,040 --> 00:02:31,680
where at first the approver commits to a

70
00:02:31,680 --> 00:02:34,720
mask of the witness then he sends the

71
00:02:34,720 --> 00:02:37,200
first flow to the verifier the verifier

72
00:02:37,200 --> 00:02:38,640
will draw a random challenge and send it

73
00:02:38,640 --> 00:02:39,920
to the approver

74
00:02:39,920 --> 00:02:42,400
and based on this the approver will mask

75
00:02:42,400 --> 00:02:44,800
the witness

76
00:02:44,800 --> 00:02:46,879
with respect to the challenge and also

77
00:02:46,879 --> 00:02:49,920
the mass that he previously committed to

78
00:02:49,920 --> 00:02:52,160
and send this to the verifier and then

79
00:02:52,160 --> 00:02:54,400
the verify can output one if the

80
00:02:54,400 --> 00:02:57,440
transcript is convincing enough for him

81
00:02:57,440 --> 00:02:58,879
and we want two properties from this

82
00:02:58,879 --> 00:03:00,400
type of protocol

83
00:03:00,400 --> 00:03:02,400
the first one being zero knowledge so we

84
00:03:02,400 --> 00:03:05,040
want that transcripts can be simulated

85
00:03:05,040 --> 00:03:07,920
without knowledge of w so intuitively

86
00:03:07,920 --> 00:03:09,200
the

87
00:03:09,200 --> 00:03:11,280
um the prover doesn't reveal anything

88
00:03:11,280 --> 00:03:12,560
about w

89
00:03:12,560 --> 00:03:14,640
when interacting with the verifier

90
00:03:14,640 --> 00:03:17,040
and the second one being soundness which

91
00:03:17,040 --> 00:03:19,840
states that a witness w can be extracted

92
00:03:19,840 --> 00:03:21,599
from exactly transcripts

93
00:03:21,599 --> 00:03:23,040
so intuitively that means that the

94
00:03:23,040 --> 00:03:25,360
approver should know

95
00:03:25,360 --> 00:03:28,400
um should know w actually

96
00:03:28,400 --> 00:03:30,879
so in range proofs we want to show that

97
00:03:30,879 --> 00:03:33,280
a committed value

98
00:03:33,280 --> 00:03:35,599
lies inside a given range so for this we

99
00:03:35,599 --> 00:03:37,599
need to first of all open the committed

100
00:03:37,599 --> 00:03:39,920
value to the verify in a serial

101
00:03:39,920 --> 00:03:41,120
knowledge way

102
00:03:41,120 --> 00:03:42,879
and for this the verifier receives the

103
00:03:42,879 --> 00:03:44,159
statement c

104
00:03:44,159 --> 00:03:45,280
and

105
00:03:45,280 --> 00:03:46,400
the approver

106
00:03:46,400 --> 00:03:48,640
has also access to the committed values

107
00:03:48,640 --> 00:03:50,319
and the randomness

108
00:03:50,319 --> 00:03:52,640
and then the approver can show to the

109
00:03:52,640 --> 00:03:55,040
verifier that he knows the opening

110
00:03:55,040 --> 00:03:56,879
by essentially

111
00:03:56,879 --> 00:03:58,480
committing to

112
00:03:58,480 --> 00:04:00,879
masks m and s

113
00:04:00,879 --> 00:04:02,879
in a commitment d sending it to the

114
00:04:02,879 --> 00:04:04,720
verifier who draws a random challenge

115
00:04:04,720 --> 00:04:06,720
gamma sends it to the approver and then

116
00:04:06,720 --> 00:04:09,680
the approver computes m plus gamma times

117
00:04:09,680 --> 00:04:12,239
x and s plus gamma times r

118
00:04:12,239 --> 00:04:13,840
and sends it through the verifier and

119
00:04:13,840 --> 00:04:15,599
then the verifier checks whether this

120
00:04:15,599 --> 00:04:18,959
relation so um the the linear relation

121
00:04:18,959 --> 00:04:20,160
between m

122
00:04:20,160 --> 00:04:22,800
the mask gamma

123
00:04:22,800 --> 00:04:25,840
the challenge and x the committed value

124
00:04:25,840 --> 00:04:28,240
holds inside the commitments that you

125
00:04:28,240 --> 00:04:31,600
already received beforehand

126
00:04:31,680 --> 00:04:34,800
so for the soundness property we can

127
00:04:34,800 --> 00:04:37,040
actually easily show that if we have two

128
00:04:37,040 --> 00:04:39,199
transcripts with the same first flow

129
00:04:39,199 --> 00:04:41,120
then we can just accept

130
00:04:41,120 --> 00:04:43,600
then we can just extract x

131
00:04:43,600 --> 00:04:46,240
equals to zero minus set one

132
00:04:46,240 --> 00:04:49,520
divided by gamma zero minus gamma one

133
00:04:49,520 --> 00:04:51,759
uh mod q

134
00:04:51,759 --> 00:04:53,199
so

135
00:04:53,199 --> 00:04:54,800
yeah this is essentially very important

136
00:04:54,800 --> 00:04:58,560
for later um so yeah keep this in mind

137
00:04:58,560 --> 00:05:00,320
and zero knowledge is quite easy to show

138
00:05:00,320 --> 00:05:02,160
because you just send committed

139
00:05:02,160 --> 00:05:03,360
commitments

140
00:05:03,360 --> 00:05:06,560
and massed values so

141
00:05:06,560 --> 00:05:08,400
let's dive deeper into

142
00:05:08,400 --> 00:05:10,560
the definition of range proofs and how

143
00:05:10,560 --> 00:05:12,160
they can be constructed

144
00:05:12,160 --> 00:05:14,160
so essentially the formal definition of

145
00:05:14,160 --> 00:05:17,440
a range proof is that we want to have a

146
00:05:17,440 --> 00:05:19,120
a student knowledge proof

147
00:05:19,120 --> 00:05:21,520
for the following relation which

148
00:05:21,520 --> 00:05:24,719
essentially captures

149
00:05:25,120 --> 00:05:25,919
the

150
00:05:25,919 --> 00:05:29,120
the intuitive relation where you open a

151
00:05:29,120 --> 00:05:31,440
a commitment and you show that the

152
00:05:31,440 --> 00:05:32,880
opening

153
00:05:32,880 --> 00:05:35,680
is inside the given range a b so the the

154
00:05:35,680 --> 00:05:37,280
committed values inside the given range

155
00:05:37,280 --> 00:05:38,560
a b

156
00:05:38,560 --> 00:05:39,759
and

157
00:05:39,759 --> 00:05:42,000
this can be

158
00:05:42,000 --> 00:05:44,560
built by two different approaches

159
00:05:44,560 --> 00:05:46,479
the first one being binary decomposition

160
00:05:46,479 --> 00:05:48,720
so here essentially you just decompose

161
00:05:48,720 --> 00:05:50,400
the value

162
00:05:50,400 --> 00:05:52,240
into

163
00:05:52,240 --> 00:05:54,800
a number of bits so essentially just the

164
00:05:54,800 --> 00:05:56,960
binary decomposition of it

165
00:05:56,960 --> 00:05:59,840
and then you show that this binary

166
00:05:59,840 --> 00:06:01,840
decomposition holds and that all the

167
00:06:01,840 --> 00:06:04,080
committed values so the x i's

168
00:06:04,080 --> 00:06:07,039
are actually bits and this yields

169
00:06:07,039 --> 00:06:09,199
through uh this leads to

170
00:06:09,199 --> 00:06:11,280
quite efficient range proofs

171
00:06:11,280 --> 00:06:13,280
in uh for example letters or deluxe

172
00:06:13,280 --> 00:06:14,479
setting

173
00:06:14,479 --> 00:06:15,440
um

174
00:06:15,440 --> 00:06:17,039
and it's also the most common approach

175
00:06:17,039 --> 00:06:18,479
nowadays

176
00:06:18,479 --> 00:06:20,880
and the second approach is

177
00:06:20,880 --> 00:06:23,120
um

178
00:06:23,120 --> 00:06:25,440
is using integer commitments

179
00:06:25,440 --> 00:06:27,120
where you essentially show that x is in

180
00:06:27,120 --> 00:06:29,360
a b by showing that x minus a and b

181
00:06:29,360 --> 00:06:32,319
minus x is bigger or equal to zero

182
00:06:32,319 --> 00:06:35,039
and you can show that over the integers

183
00:06:35,039 --> 00:06:37,440
by showing that b minus x times x minus

184
00:06:37,440 --> 00:06:38,240
a

185
00:06:38,240 --> 00:06:40,639
is the sum of four squares

186
00:06:40,639 --> 00:06:42,160
and of course for this it's important

187
00:06:42,160 --> 00:06:44,400
that you show this over the integers

188
00:06:44,400 --> 00:06:46,479
and for this you need integer

189
00:06:46,479 --> 00:06:48,639
commitments and

190
00:06:48,639 --> 00:06:50,960
generally this approach leads to

191
00:06:50,960 --> 00:06:53,840
quite large parameters so or requires

192
00:06:53,840 --> 00:06:55,840
quite large parameters

193
00:06:55,840 --> 00:06:57,840
so large proves and also requires

194
00:06:57,840 --> 00:06:59,680
trusted setup

195
00:06:59,680 --> 00:07:02,080
because it's usually based on errors a

196
00:07:02,080 --> 00:07:05,758
or class groups with trusted seller

197
00:07:06,240 --> 00:07:07,199
so

198
00:07:07,199 --> 00:07:08,720
now we will use this square

199
00:07:08,720 --> 00:07:11,680
decomposition in our construction

200
00:07:11,680 --> 00:07:13,599
but we

201
00:07:13,599 --> 00:07:16,080
apply a different spin on it so now we

202
00:07:16,080 --> 00:07:18,400
will slightly simplify the square

203
00:07:18,400 --> 00:07:20,639
decomposition so we can show that x is

204
00:07:20,639 --> 00:07:21,840
in a b

205
00:07:21,840 --> 00:07:23,520
if x minus a

206
00:07:23,520 --> 00:07:26,319
is in 0 b minus a and if we set b

207
00:07:26,319 --> 00:07:29,440
so capital b as b minus a

208
00:07:29,440 --> 00:07:31,120
then we can just show that x times b

209
00:07:31,120 --> 00:07:34,080
minus x is the sum of four squares

210
00:07:34,080 --> 00:07:37,840
in order to show that x is an a b so

211
00:07:37,840 --> 00:07:40,080
essentially it suffices to show that

212
00:07:40,080 --> 00:07:41,120
some

213
00:07:41,120 --> 00:07:44,479
integer x is in the range zero b for

214
00:07:44,479 --> 00:07:46,879
some integer b

215
00:07:46,879 --> 00:07:48,800
so essentially we can just show that x

216
00:07:48,800 --> 00:07:50,960
is in zero b in order to show that x is

217
00:07:50,960 --> 00:07:56,240
in a b for any in for any bonds a and b

218
00:07:56,240 --> 00:07:58,720
um and this can even be further

219
00:07:58,720 --> 00:08:00,800
optimized by using the three square

220
00:08:00,800 --> 00:08:02,160
decomposition

221
00:08:02,160 --> 00:08:04,400
so we can just show that one plus four

222
00:08:04,400 --> 00:08:06,879
times x times b minus x

223
00:08:06,879 --> 00:08:08,800
is equal to the sum of three squares

224
00:08:08,800 --> 00:08:10,879
this decomposition can be computed very

225
00:08:10,879 --> 00:08:13,280
fast and

226
00:08:13,280 --> 00:08:16,479
it implies that x is in 0b so

227
00:08:16,479 --> 00:08:19,199
this is essentially what we will use

228
00:08:19,199 --> 00:08:21,440
and now i will go over the construction

229
00:08:21,440 --> 00:08:24,400
so the setting is that

230
00:08:24,400 --> 00:08:26,879
we want to compute we want to build a

231
00:08:26,879 --> 00:08:28,160
range proof

232
00:08:28,160 --> 00:08:29,759
that uses a

233
00:08:29,759 --> 00:08:32,080
fairly generic commitment scheme

234
00:08:32,080 --> 00:08:36,640
um that commits to values x0 over

235
00:08:36,640 --> 00:08:38,080
set q

236
00:08:38,080 --> 00:08:40,000
so x0 is the value for which we want to

237
00:08:40,000 --> 00:08:42,080
show that it lies in zero b in the range

238
00:08:42,080 --> 00:08:43,839
zero b

239
00:08:43,839 --> 00:08:46,080
and we want to avoid trusted setup and

240
00:08:46,080 --> 00:08:48,480
we want to avoid uh we want to optimize

241
00:08:48,480 --> 00:08:50,320
efficiency

242
00:08:50,320 --> 00:08:52,640
so how do we do that well the basic idea

243
00:08:52,640 --> 00:08:54,640
is to just square decomposition in that

244
00:08:54,640 --> 00:08:55,760
queue

245
00:08:55,760 --> 00:08:58,800
um so let's just do that we construct a

246
00:08:58,800 --> 00:09:00,560
sigma protocol for showing the three

247
00:09:00,560 --> 00:09:02,080
square decomposition

248
00:09:02,080 --> 00:09:03,920
so we commit to

249
00:09:03,920 --> 00:09:06,640
the xi's we first of all come

250
00:09:06,640 --> 00:09:07,680
i mean

251
00:09:07,680 --> 00:09:09,760
so we compute the three square

252
00:09:09,760 --> 00:09:12,880
decomposition we commit to the xi's and

253
00:09:12,880 --> 00:09:15,360
then we do a proof of opening

254
00:09:15,360 --> 00:09:18,000
as i've shown you before so we send the

255
00:09:18,000 --> 00:09:20,959
set the commitments and the commitments

256
00:09:20,959 --> 00:09:23,279
of the masks to the verifier

257
00:09:23,279 --> 00:09:24,560
the verifier will draw a random

258
00:09:24,560 --> 00:09:25,680
challenge

259
00:09:25,680 --> 00:09:29,120
and then the approver can just send

260
00:09:29,120 --> 00:09:31,360
the

261
00:09:32,000 --> 00:09:36,000
the masked witnesses to the verifier

262
00:09:36,000 --> 00:09:39,760
and then he can check whether the

263
00:09:39,760 --> 00:09:41,840
prover essentially used

264
00:09:41,840 --> 00:09:43,920
[Music]

265
00:09:43,920 --> 00:09:46,480
consistent values throughout the proof

266
00:09:46,480 --> 00:09:48,959
so he checks whether

267
00:09:48,959 --> 00:09:51,440
the linear relation between mask

268
00:09:51,440 --> 00:09:54,160
challenge and witness holds

269
00:09:54,160 --> 00:09:55,920
inside the commitment scheme

270
00:09:55,920 --> 00:09:57,360
and also he checks the three square

271
00:09:57,360 --> 00:10:00,080
decomposition so i won't go into detail

272
00:10:00,080 --> 00:10:03,600
how this can be done this is quite a

273
00:10:03,600 --> 00:10:06,160
setting dependent so i don't want to

274
00:10:06,160 --> 00:10:08,079
um go into detail

275
00:10:08,079 --> 00:10:10,320
on this for now but it's essentially

276
00:10:10,320 --> 00:10:13,920
quite fast and low overhead

277
00:10:13,920 --> 00:10:14,880
so

278
00:10:14,880 --> 00:10:15,760
um

279
00:10:15,760 --> 00:10:18,560
of course this is not

280
00:10:18,560 --> 00:10:20,880
a sufficient range proof yet because the

281
00:10:20,880 --> 00:10:22,640
three square decomposition in that queue

282
00:10:22,640 --> 00:10:24,560
does not actually imply positivity

283
00:10:24,560 --> 00:10:26,079
because even negative values have

284
00:10:26,079 --> 00:10:28,480
squares for example

285
00:10:28,480 --> 00:10:31,040
and the idea that we had in this paper

286
00:10:31,040 --> 00:10:33,519
is essentially to avoid overflows by

287
00:10:33,519 --> 00:10:35,600
ensuring short witnesses and if there's

288
00:10:35,600 --> 00:10:38,000
an overflow then essentially we have a

289
00:10:38,000 --> 00:10:40,880
normal integer calculation

290
00:10:40,880 --> 00:10:42,320
um

291
00:10:42,320 --> 00:10:43,360
so

292
00:10:43,360 --> 00:10:45,440
the one point is that we can't actually

293
00:10:45,440 --> 00:10:48,320
check whether x i is short as a verifier

294
00:10:48,320 --> 00:10:50,800
because we don't have access to x i

295
00:10:50,800 --> 00:10:53,200
but we can check whether that i is short

296
00:10:53,200 --> 00:10:55,040
so said i con

297
00:10:55,040 --> 00:10:56,640
contains x i

298
00:10:56,640 --> 00:10:58,800
so if the zeta is short x i should also

299
00:10:58,800 --> 00:11:01,040
be short intuitively

300
00:11:01,040 --> 00:11:02,000
um

301
00:11:02,000 --> 00:11:06,000
so if we add that check as a verifier

302
00:11:06,000 --> 00:11:07,920
we will see that actually the extracted

303
00:11:07,920 --> 00:11:10,399
value is not necessarily short because

304
00:11:10,399 --> 00:11:12,839
as i've shown you before we can extract

305
00:11:12,839 --> 00:11:17,040
x0 and from two transcripts um

306
00:11:17,040 --> 00:11:17,920
where

307
00:11:17,920 --> 00:11:20,800
we set x zero equals say zero minus zero

308
00:11:20,800 --> 00:11:22,880
prime divided by gamma minus gamma prime

309
00:11:22,880 --> 00:11:25,040
so zero and zero prime

310
00:11:25,040 --> 00:11:26,720
are checked to be short gamma minus

311
00:11:26,720 --> 00:11:28,640
gamma prime is short because the

312
00:11:28,640 --> 00:11:30,959
verifier will choose a sufficiently

313
00:11:30,959 --> 00:11:32,800
short value

314
00:11:32,800 --> 00:11:36,000
but um since we divide more q the

315
00:11:36,000 --> 00:11:38,000
shortness is not necessarily retained

316
00:11:38,000 --> 00:11:40,320
this can be seen by a very simple

317
00:11:40,320 --> 00:11:42,640
example for example one divided by two

318
00:11:42,640 --> 00:11:45,360
where one and two is obviously short

319
00:11:45,360 --> 00:11:46,160
um

320
00:11:46,160 --> 00:11:48,959
we'll always be able to around half of

321
00:11:48,959 --> 00:11:53,040
the modulus so this is very large

322
00:11:53,040 --> 00:11:56,079
um and so essentially this doesn't

323
00:11:56,079 --> 00:11:57,360
suffice yet

324
00:11:57,360 --> 00:11:59,120
but the main idea is essentially that we

325
00:11:59,120 --> 00:12:02,079
can map fractions and set q to integers

326
00:12:02,079 --> 00:12:04,720
via a division in q

327
00:12:04,720 --> 00:12:06,079
so

328
00:12:06,079 --> 00:12:09,760
essentially um what we do is we encode

329
00:12:09,760 --> 00:12:14,399
the committed value 1 divided by 2 mod q

330
00:12:14,399 --> 00:12:18,000
to 1 divided by 2 over the integers

331
00:12:18,000 --> 00:12:21,120
and then we round this value so 0.5

332
00:12:21,120 --> 00:12:22,959
rounded is equal to 1

333
00:12:22,959 --> 00:12:24,880
and this actually retains smallness

334
00:12:24,880 --> 00:12:27,040
which is what we need in order to

335
00:12:27,040 --> 00:12:28,959
then check the

336
00:12:28,959 --> 00:12:30,959
square decomposition

337
00:12:30,959 --> 00:12:33,440
of the integers

338
00:12:33,440 --> 00:12:36,560
so this yields a

339
00:12:36,560 --> 00:12:38,480
integer commitment scheme

340
00:12:38,480 --> 00:12:41,120
um so essentially we relax the original

341
00:12:41,120 --> 00:12:43,120
commitment scheme we say that

342
00:12:43,120 --> 00:12:46,160
the commitment to z times comma to the

343
00:12:46,160 --> 00:12:47,600
power of minus one

344
00:12:47,600 --> 00:12:50,079
mod q

345
00:12:50,079 --> 00:12:51,600
um in

346
00:12:51,600 --> 00:12:53,680
the original commitment

347
00:12:53,680 --> 00:12:56,560
um actually commits to the message x

348
00:12:56,560 --> 00:12:57,839
equals

349
00:12:57,839 --> 00:13:01,200
z divided by gamma and then rounded

350
00:13:01,200 --> 00:13:05,120
and if we do that then we can verify

351
00:13:05,120 --> 00:13:06,480
very simply to

352
00:13:06,480 --> 00:13:08,079
a bunch of properties

353
00:13:08,079 --> 00:13:10,399
um so first of all this

354
00:13:10,399 --> 00:13:12,399
is obviously still

355
00:13:12,399 --> 00:13:13,440
hiding

356
00:13:13,440 --> 00:13:14,720
because

357
00:13:14,720 --> 00:13:16,880
it's basically the same commitment

358
00:13:16,880 --> 00:13:18,000
scheme

359
00:13:18,000 --> 00:13:20,720
as before if gamma is equal to 1 for

360
00:13:20,720 --> 00:13:23,200
example then we can just commit to

361
00:13:23,200 --> 00:13:24,399
x

362
00:13:24,399 --> 00:13:26,639
and we have the standard hiding

363
00:13:26,639 --> 00:13:28,800
properties from before

364
00:13:28,800 --> 00:13:29,600
so

365
00:13:29,600 --> 00:13:32,160
it's also binding if that and gamma are

366
00:13:32,160 --> 00:13:34,959
short with respect to the modulus

367
00:13:34,959 --> 00:13:36,880
it also retains restricted homomorphic

368
00:13:36,880 --> 00:13:38,160
properties

369
00:13:38,160 --> 00:13:40,399
i will go into a bit more detail later

370
00:13:40,399 --> 00:13:43,279
and also retain shortness

371
00:13:43,279 --> 00:13:44,800
as i've shown before

372
00:13:44,800 --> 00:13:46,160
and

373
00:13:46,160 --> 00:13:48,399
also important honest commitments remain

374
00:13:48,399 --> 00:13:50,079
unchanged so we can just set gamma

375
00:13:50,079 --> 00:13:52,399
equals one so committing to x is

376
00:13:52,399 --> 00:13:54,240
essentially just a standard commitment

377
00:13:54,240 --> 00:13:57,120
to x if x is short

378
00:13:57,120 --> 00:13:58,800
so

379
00:13:58,800 --> 00:14:00,480
yeah this leads to a bounded integer

380
00:14:00,480 --> 00:14:02,399
commitment scheme bounded because the

381
00:14:02,399 --> 00:14:03,920
committed values have to be short in

382
00:14:03,920 --> 00:14:07,199
order to be binding and

383
00:14:08,079 --> 00:14:10,800
so now we can use this in our range

384
00:14:10,800 --> 00:14:12,079
proof scheme

385
00:14:12,079 --> 00:14:12,880
so

386
00:14:12,880 --> 00:14:15,120
essentially we don't

387
00:14:15,120 --> 00:14:17,120
we don't actually change the the range

388
00:14:17,120 --> 00:14:18,720
proof itself

389
00:14:18,720 --> 00:14:19,519
um

390
00:14:19,519 --> 00:14:20,560
because

391
00:14:20,560 --> 00:14:22,720
honest commitments remain unchanged so

392
00:14:22,720 --> 00:14:25,680
we can just you reuse the same scheme

393
00:14:25,680 --> 00:14:29,839
but um we now say that

394
00:14:29,839 --> 00:14:32,000
the commitments we use are relaxed

395
00:14:32,000 --> 00:14:33,199
commitments

396
00:14:33,199 --> 00:14:35,440
so the extracted values are actually

397
00:14:35,440 --> 00:14:37,839
short in that

398
00:14:37,839 --> 00:14:40,480
and then this suffices to actually check

399
00:14:40,480 --> 00:14:42,399
that these three the three squared

400
00:14:42,399 --> 00:14:45,760
relation holds for the extracted values

401
00:14:45,760 --> 00:14:48,639
over the integers

402
00:14:48,959 --> 00:14:52,130
so before i dive into a few

403
00:14:52,130 --> 00:14:53,600
[Music]

404
00:14:53,600 --> 00:14:56,000
so before i go over the concrete

405
00:14:56,000 --> 00:14:57,600
constructions and

406
00:14:57,600 --> 00:15:00,240
their efficiency i want to talk about a

407
00:15:00,240 --> 00:15:01,920
few limitations

408
00:15:01,920 --> 00:15:04,800
so the first limitation is the

409
00:15:04,800 --> 00:15:08,639
homomorphism as i've mentioned already

410
00:15:08,639 --> 00:15:10,480
so honest commitments are just standard

411
00:15:10,480 --> 00:15:13,839
commitments and since we once

412
00:15:13,839 --> 00:15:15,839
since we demand the standard commitment

413
00:15:15,839 --> 00:15:18,079
scheme to be additively homomorphic

414
00:15:18,079 --> 00:15:20,000
um this also holds for honest

415
00:15:20,000 --> 00:15:21,279
commitments

416
00:15:21,279 --> 00:15:23,440
also small constants

417
00:15:23,440 --> 00:15:25,440
work out fine so we can just multiply

418
00:15:25,440 --> 00:15:26,959
small constants

419
00:15:26,959 --> 00:15:29,199
and

420
00:15:29,279 --> 00:15:30,240
um

421
00:15:30,240 --> 00:15:31,759
and everything

422
00:15:31,759 --> 00:15:33,920
is is fine

423
00:15:33,920 --> 00:15:36,160
so homophily holds in this case but as

424
00:15:36,160 --> 00:15:39,120
soon as we have this honest commitment

425
00:15:39,120 --> 00:15:41,440
where um

426
00:15:41,440 --> 00:15:44,079
where the prover might have gamma not

427
00:15:44,079 --> 00:15:45,360
equal to one

428
00:15:45,360 --> 00:15:47,680
then we don't necessarily have

429
00:15:47,680 --> 00:15:49,360
homophobism

430
00:15:49,360 --> 00:15:52,000
um that holds and this is even worse for

431
00:15:52,000 --> 00:15:54,639
an unequal denominator so

432
00:15:54,639 --> 00:15:55,519
um

433
00:15:55,519 --> 00:15:57,759
intuitive this is because

434
00:15:57,759 --> 00:16:00,720
if there's two unequal denominators then

435
00:16:00,720 --> 00:16:03,120
we multiply the challenges and

436
00:16:03,120 --> 00:16:04,880
at some point they might not be short

437
00:16:04,880 --> 00:16:06,639
anymore

438
00:16:06,639 --> 00:16:07,839
so

439
00:16:07,839 --> 00:16:10,000
this means that you have to be careful

440
00:16:10,000 --> 00:16:12,880
um about the guarantees of the range

441
00:16:12,880 --> 00:16:15,519
proof um as it was presented and you

442
00:16:15,519 --> 00:16:17,120
also have to ensure that the committed

443
00:16:17,120 --> 00:16:19,680
insurers as the committed integers are

444
00:16:19,680 --> 00:16:21,680
small enough

445
00:16:21,680 --> 00:16:23,680
so the second limitation is the group

446
00:16:23,680 --> 00:16:24,560
size

447
00:16:24,560 --> 00:16:26,560
this is because we need to ensure that

448
00:16:26,560 --> 00:16:28,000
there's no overflow in the square

449
00:16:28,000 --> 00:16:29,839
decomposition

450
00:16:29,839 --> 00:16:32,079
so

451
00:16:33,440 --> 00:16:34,240
we

452
00:16:34,240 --> 00:16:36,480
need even a stronger variant of this we

453
00:16:36,480 --> 00:16:38,480
need that

454
00:16:38,480 --> 00:16:40,320
as we can only check the size of the

455
00:16:40,320 --> 00:16:42,079
mask

456
00:16:42,079 --> 00:16:43,920
or essentially the size of the masked

457
00:16:43,920 --> 00:16:46,160
witness

458
00:16:46,160 --> 00:16:47,839
we need that the

459
00:16:47,839 --> 00:16:49,279
the three square equal position holds

460
00:16:49,279 --> 00:16:51,199
for the masked witness

461
00:16:51,199 --> 00:16:53,040
over reset and for this there should not

462
00:16:53,040 --> 00:16:56,160
be overflow on either side

463
00:16:56,160 --> 00:16:58,800
um and that means that there's quite a

464
00:16:58,800 --> 00:17:02,079
large requirement for the group size

465
00:17:02,079 --> 00:17:03,360
but

466
00:17:03,360 --> 00:17:04,480
um

467
00:17:04,480 --> 00:17:06,880
this can essentially be optimized

468
00:17:06,880 --> 00:17:07,839
um

469
00:17:07,839 --> 00:17:09,599
so

470
00:17:09,599 --> 00:17:10,400
the

471
00:17:10,400 --> 00:17:13,119
if we have shorter mass then we have can

472
00:17:13,119 --> 00:17:14,959
have a smaller modulus

473
00:17:14,959 --> 00:17:17,119
um and this can be

474
00:17:17,119 --> 00:17:20,400
this can be done via rejection sampling

475
00:17:20,400 --> 00:17:22,319
and also repetitions mean shorter

476
00:17:22,319 --> 00:17:25,679
challenges means smaller modulus

477
00:17:25,679 --> 00:17:29,440
and lastly this is not necessarily

478
00:17:29,440 --> 00:17:31,280
based on the square composition but in

479
00:17:31,280 --> 00:17:33,600
general we can apply for charmer and we

480
00:17:33,600 --> 00:17:37,439
can get non-interactive range proofs

481
00:17:37,600 --> 00:17:39,360
so

482
00:17:39,360 --> 00:17:41,200
before i finish my talk i quickly want

483
00:17:41,200 --> 00:17:43,120
to talk about the settings so

484
00:17:43,120 --> 00:17:44,960
in the deluxe setting

485
00:17:44,960 --> 00:17:48,080
we essentially construct a range proof

486
00:17:48,080 --> 00:17:51,120
that improves over bullet proofs on

487
00:17:51,120 --> 00:17:53,280
in size

488
00:17:53,280 --> 00:17:56,880
in lattices we improve on the

489
00:17:56,880 --> 00:17:59,200
on the state of the art

490
00:17:59,200 --> 00:18:03,280
for standard lattices for large batches

491
00:18:03,280 --> 00:18:05,840
and in class groups

492
00:18:05,840 --> 00:18:07,840
we construct the first concretely

493
00:18:07,840 --> 00:18:09,360
efficient unbounded integer commitment

494
00:18:09,360 --> 00:18:12,480
scheme without trusted setup

495
00:18:12,480 --> 00:18:13,440
in

496
00:18:13,440 --> 00:18:16,799
in d-log groups we essentially just

497
00:18:16,799 --> 00:18:18,799
use patterson commitments

498
00:18:18,799 --> 00:18:22,720
um with a slight tweak so we use the

499
00:18:22,720 --> 00:18:25,039
discrete log short exponent assumption

500
00:18:25,039 --> 00:18:28,320
in order to have smaller randomness

501
00:18:28,320 --> 00:18:30,240
and the decomposition can just be shown

502
00:18:30,240 --> 00:18:31,600
using

503
00:18:31,600 --> 00:18:33,440
the homomorphic properties of the honest

504
00:18:33,440 --> 00:18:34,799
component scheme

505
00:18:34,799 --> 00:18:36,640
and this yields

506
00:18:36,640 --> 00:18:38,720
efficient range proofs for single

507
00:18:38,720 --> 00:18:42,160
messages or for single values x

508
00:18:42,160 --> 00:18:43,360
and

509
00:18:43,360 --> 00:18:44,880
if we compare this to the state of the

510
00:18:44,880 --> 00:18:45,840
art

511
00:18:45,840 --> 00:18:47,919
so bullet proofs

512
00:18:47,919 --> 00:18:50,480
we can see that we have around 80 to 89

513
00:18:50,480 --> 00:18:51,600
percent

514
00:18:51,600 --> 00:18:53,200
of the size

515
00:18:53,200 --> 00:18:55,520
of their range proofs

516
00:18:55,520 --> 00:18:57,360
and also

517
00:18:57,360 --> 00:19:00,160
interestingly the proof's work is quite

518
00:19:00,160 --> 00:19:01,600
lower

519
00:19:01,600 --> 00:19:04,080
if we compare the group multiplications

520
00:19:04,080 --> 00:19:07,120
of course our groups are larger so this

521
00:19:07,120 --> 00:19:09,039
is not necessarily

522
00:19:09,039 --> 00:19:12,160
a as large increase in the final

523
00:19:12,160 --> 00:19:13,760
computation but

524
00:19:13,760 --> 00:19:15,039
at least

525
00:19:15,039 --> 00:19:17,039
it hints that the

526
00:19:17,039 --> 00:19:18,640
that the provers work should be quite a

527
00:19:18,640 --> 00:19:19,760
lot

528
00:19:19,760 --> 00:19:21,679
faster

529
00:19:21,679 --> 00:19:23,760
so

530
00:19:23,760 --> 00:19:26,400
secondly we instantiated this scheme for

531
00:19:26,400 --> 00:19:28,320
this abstract framework in the letter

532
00:19:28,320 --> 00:19:29,360
setting

533
00:19:29,360 --> 00:19:33,280
where we use bdl18 commitments

534
00:19:33,280 --> 00:19:34,960
and

535
00:19:34,960 --> 00:19:36,400
yeah i don't want to go into too much

536
00:19:36,400 --> 00:19:38,960
details but essentially we can show the

537
00:19:38,960 --> 00:19:40,880
decomposition with a standard polynomial

538
00:19:40,880 --> 00:19:41,760
trick

539
00:19:41,760 --> 00:19:43,840
then we perform the range proof for each

540
00:19:43,840 --> 00:19:46,400
component and then if we

541
00:19:46,400 --> 00:19:50,000
amortize the range proof over

542
00:19:50,000 --> 00:19:50,840
a lot

543
00:19:50,840 --> 00:19:54,640
of adult values then we essentially get

544
00:19:54,640 --> 00:19:56,480
quite efficient

545
00:19:56,480 --> 00:19:58,000
um

546
00:19:58,000 --> 00:20:00,720
quite efficient range proofs for a lot

547
00:20:00,720 --> 00:20:02,880
of integers

548
00:20:02,880 --> 00:20:04,559
and lastly we apply this framework in

549
00:20:04,559 --> 00:20:07,280
the class group setting where we have a

550
00:20:07,280 --> 00:20:09,360
group g within order

551
00:20:09,360 --> 00:20:10,400
and

552
00:20:10,400 --> 00:20:11,440
essentially

553
00:20:11,440 --> 00:20:14,400
we have two main assumptions the order

554
00:20:14,400 --> 00:20:15,760
assumption and the subgroup

555
00:20:15,760 --> 00:20:18,080
indistinguishability assumption

556
00:20:18,080 --> 00:20:20,159
so in class group since we have hidden

557
00:20:20,159 --> 00:20:22,720
order we can show that we can extract in

558
00:20:22,720 --> 00:20:25,120
a a rational number that can be written

559
00:20:25,120 --> 00:20:28,480
as z divided by a power of two

560
00:20:28,480 --> 00:20:29,760
and

561
00:20:29,760 --> 00:20:31,360
essentially the range proof has the same

562
00:20:31,360 --> 00:20:34,799
structure as the d logger

563
00:20:34,799 --> 00:20:39,120
but we require way larger groups because

564
00:20:39,120 --> 00:20:41,120
because class groups in general are

565
00:20:41,120 --> 00:20:42,400
fairly large

566
00:20:42,400 --> 00:20:44,880
around the size of rsa groups

567
00:20:44,880 --> 00:20:45,660
and

568
00:20:45,660 --> 00:20:47,679
[Music]

569
00:20:47,679 --> 00:20:49,520
what we gained for this is that we don't

570
00:20:49,520 --> 00:20:51,360
have any bounds on the committed values

571
00:20:51,360 --> 00:20:53,120
so we can actually show

572
00:20:53,120 --> 00:20:54,159
um

573
00:20:54,159 --> 00:20:55,919
a range proof for

574
00:20:55,919 --> 00:20:57,840
any

575
00:20:57,840 --> 00:21:02,080
any integer that we want

576
00:21:02,080 --> 00:21:05,280
and with that i'm finished and thank you

577
00:21:05,280 --> 00:21:08,720
very much for your attention

