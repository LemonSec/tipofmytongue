1
00:00:01,599 --> 00:00:04,160
hello everyone i'm yvelai today i'm

2
00:00:04,160 --> 00:00:06,319
going to talk about compact efficient

3
00:00:06,319 --> 00:00:08,320
and usually secure essentially based of

4
00:00:08,320 --> 00:00:09,760
review transfer

5
00:00:09,760 --> 00:00:11,280
this is a joint wall with stephen

6
00:00:11,280 --> 00:00:13,440
galbraith and crm the pack that says we

7
00:00:13,440 --> 00:00:16,439
have

8
00:00:17,840 --> 00:00:20,160
firstly we recall the second sentence of

9
00:00:20,160 --> 00:00:22,160
an abbreviated transfer protocol there

10
00:00:22,160 --> 00:00:24,640
are two parties alice and bob also the

11
00:00:24,640 --> 00:00:26,160
center and receiver

12
00:00:26,160 --> 00:00:28,400
alice has two messages and bob grant

13
00:00:28,400 --> 00:00:30,560
would like to know one of them

14
00:00:30,560 --> 00:00:32,960
and they're doing some steps here after

15
00:00:32,960 --> 00:00:35,680
the execution there are two requirements

16
00:00:35,680 --> 00:00:38,000
the first one is that bob gets one and

17
00:00:38,000 --> 00:00:39,520
only one message

18
00:00:39,520 --> 00:00:41,360
the second one is that alice doesn't

19
00:00:41,360 --> 00:00:44,160
know about choice

20
00:00:44,160 --> 00:00:46,239
keep in mind that this is a classical

21
00:00:46,239 --> 00:00:48,960
requirement for mot skin given the

22
00:00:48,960 --> 00:00:51,199
importance of an amblyopia transfer

23
00:00:51,199 --> 00:00:53,680
protocol as a cryptography tool we need

24
00:00:53,680 --> 00:00:56,320
a stronger security definition that

25
00:00:56,320 --> 00:01:00,480
takes composition into account

26
00:01:01,280 --> 00:01:02,640
the security notion is called

27
00:01:02,640 --> 00:01:05,199
universally compatible security or uc

28
00:01:05,199 --> 00:01:07,920
security which is purposed by canadi

29
00:01:07,920 --> 00:01:09,600
this is a simulation-based security

30
00:01:09,600 --> 00:01:10,799
definition

31
00:01:10,799 --> 00:01:12,640
and this security definition the

32
00:01:12,640 --> 00:01:15,680
simulator doesn't simulate for the

33
00:01:15,680 --> 00:01:17,920
adversary buffered and environment

34
00:01:17,920 --> 00:01:19,040
machine

35
00:01:19,040 --> 00:01:22,240
and environment is as described

36
00:01:22,240 --> 00:01:25,040
in fire machine will observe everything

37
00:01:25,040 --> 00:01:26,720
in this world

38
00:01:26,720 --> 00:01:29,040
an environment machine will interact

39
00:01:29,040 --> 00:01:32,159
with a real machine or an ideal world

40
00:01:32,159 --> 00:01:34,479
machine but it doesn't know which one is

41
00:01:34,479 --> 00:01:36,640
it

42
00:01:36,720 --> 00:01:39,040
and in the real world machine there's an

43
00:01:39,040 --> 00:01:41,840
adversary and the protocol you design

44
00:01:41,840 --> 00:01:43,600
and in the ideal wall there's a

45
00:01:43,600 --> 00:01:46,079
simulator having black boss access to

46
00:01:46,079 --> 00:01:47,520
the adversary

47
00:01:47,520 --> 00:01:50,399
and in this ideal war everyone interacts

48
00:01:50,399 --> 00:01:53,920
with this trust with a trusted party so

49
00:01:53,920 --> 00:01:55,840
you can find that everything in this

50
00:01:55,840 --> 00:01:58,240
world is super secure because every

51
00:01:58,240 --> 00:02:00,799
calculation is processed by this trusted

52
00:02:00,799 --> 00:02:02,320
party

53
00:02:02,320 --> 00:02:04,479
so if you can show that your protocol in

54
00:02:04,479 --> 00:02:06,320
the real world machine is

55
00:02:06,320 --> 00:02:08,720
indistinguishable to the one created by

56
00:02:08,720 --> 00:02:11,680
the simulator in the ideal machine

57
00:02:11,680 --> 00:02:14,560
then you can say that your protocol has

58
00:02:14,560 --> 00:02:17,520
uc security

59
00:02:18,400 --> 00:02:21,280
there are two isa journey-based previous

60
00:02:21,280 --> 00:02:22,720
ot

61
00:02:22,720 --> 00:02:24,160
as follow

62
00:02:24,160 --> 00:02:26,959
and they achieve usage security against

63
00:02:26,959 --> 00:02:29,440
sema on its adversaries

64
00:02:29,440 --> 00:02:32,000
which means that adversary will follow

65
00:02:32,000 --> 00:02:34,560
the protocol execution but try to learn

66
00:02:34,560 --> 00:02:35,440
more

67
00:02:35,440 --> 00:02:38,080
information from the execution

68
00:02:38,080 --> 00:02:40,560
based on this by adding

69
00:02:40,560 --> 00:02:42,560
and using secure neurology proof or

70
00:02:42,560 --> 00:02:44,879
using some generic transform like this

71
00:02:44,879 --> 00:02:48,319
the protocol can upgrade to user secure

72
00:02:48,319 --> 00:02:52,080
against malicious adversaries but this

73
00:02:52,080 --> 00:02:54,959
a religious adversary means that

74
00:02:54,959 --> 00:02:57,280
the factory is now required to follow

75
00:02:57,280 --> 00:03:00,480
the protocol specification

76
00:03:00,480 --> 00:03:01,920
but

77
00:03:01,920 --> 00:03:04,080
it will take a polynomial number of

78
00:03:04,080 --> 00:03:06,720
certain computations because

79
00:03:06,720 --> 00:03:09,920
at the current stage some uh

80
00:03:09,920 --> 00:03:12,560
csi relevant or sid reference

81
00:03:12,560 --> 00:03:14,080
neurological proof of the signature

82
00:03:14,080 --> 00:03:16,560
scheme they will take a polynomial

83
00:03:16,560 --> 00:03:19,519
number of isotonic computations

84
00:03:19,519 --> 00:03:21,680
so our research question is that can we

85
00:03:21,680 --> 00:03:24,080
have an isotonic based ot that is

86
00:03:24,080 --> 00:03:25,760
usually secure against malicious

87
00:03:25,760 --> 00:03:28,560
adversary and takes only a constant

88
00:03:28,560 --> 00:03:32,680
number of exaggerating computations

89
00:03:36,400 --> 00:03:40,080
and next our for our crypto system the

90
00:03:40,080 --> 00:03:42,799
isotonic tool we rely on is called csi

91
00:03:42,799 --> 00:03:46,080
so here we give a faster cup of csi

92
00:03:46,080 --> 00:03:48,720
given an r prime p and montgomery curve

93
00:03:48,720 --> 00:03:50,720
is one variable is defined as the

94
00:03:50,720 --> 00:03:52,000
following form

95
00:03:52,000 --> 00:03:53,760
an illiterate curve defined and prime

96
00:03:53,760 --> 00:03:54,720
field

97
00:03:54,720 --> 00:03:56,400
is said to be super singular if the

98
00:03:56,400 --> 00:04:00,680
group order is p plus one

99
00:04:01,120 --> 00:04:02,879
and let all be an order of imagine

100
00:04:02,879 --> 00:04:06,720
quotation field and log pi be an

101
00:04:06,720 --> 00:04:09,200
element in this order

102
00:04:09,200 --> 00:04:11,840
we let this set mexico e collapse all

103
00:04:11,840 --> 00:04:14,239
super singular divide over fv

104
00:04:14,239 --> 00:04:16,639
and modular fps are more reason and

105
00:04:16,639 --> 00:04:18,639
these curves and the more physicist ray

106
00:04:18,639 --> 00:04:21,199
or defined over fp are isomorphic to

107
00:04:21,199 --> 00:04:22,400
this order

108
00:04:22,400 --> 00:04:24,560
and where this all the element pi

109
00:04:24,560 --> 00:04:26,560
corresponds to a convenience map which

110
00:04:26,560 --> 00:04:30,240
means it maps to map x y to x to dp and

111
00:04:30,240 --> 00:04:32,880
y to dp

112
00:04:33,520 --> 00:04:36,000
we know that the ideal class group of

113
00:04:36,000 --> 00:04:38,160
this order will act

114
00:04:38,160 --> 00:04:42,759
freely and transitively on this set

115
00:04:45,120 --> 00:04:47,040
and we also use some proposition of

116
00:04:47,040 --> 00:04:50,400
projected twists in our work so here we

117
00:04:50,400 --> 00:04:52,000
record the definition of productivity

118
00:04:52,000 --> 00:04:52,960
twist

119
00:04:52,960 --> 00:04:55,600
a connected twist of curve defined over

120
00:04:55,600 --> 00:04:57,919
fp is after the following form there's

121
00:04:57,919 --> 00:04:59,919
one more coefficient in front of y

122
00:04:59,919 --> 00:05:01,039
squared

123
00:05:01,039 --> 00:05:03,280
and this coefficient is correctly

124
00:05:03,280 --> 00:05:06,080
non-residue

125
00:05:06,880 --> 00:05:07,840
and there are three following

126
00:05:07,840 --> 00:05:10,400
propositions for quadratic twist the

127
00:05:10,400 --> 00:05:13,039
first one is that if you take a twist

128
00:05:13,039 --> 00:05:15,039
for ae

129
00:05:15,039 --> 00:05:18,320
then you got a inverse e twist

130
00:05:18,320 --> 00:05:20,160
and moreover

131
00:05:20,160 --> 00:05:22,479
if when p equals three minus four if you

132
00:05:22,479 --> 00:05:25,120
take two twists of e zero it's still e

133
00:05:25,120 --> 00:05:28,639
zero and e a twist equal to e a negative

134
00:05:28,639 --> 00:05:30,560
a

135
00:05:30,560 --> 00:05:34,560
and equality here means f p isomorphic

136
00:05:34,560 --> 00:05:36,800
so accordingly when p equals three minus

137
00:05:36,800 --> 00:05:39,120
four if you take twist of

138
00:05:39,120 --> 00:05:42,880
ae 0 you got a inverse e0 for any group

139
00:05:42,880 --> 00:05:47,400
element in this ideal class group

140
00:05:52,800 --> 00:05:54,960
and we will need to simplify the

141
00:05:54,960 --> 00:05:56,800
notations the following way the group

142
00:05:56,800 --> 00:05:58,319
and the set

143
00:05:58,319 --> 00:06:01,360
and we also ignore the class notation

144
00:06:01,360 --> 00:06:03,039
we also assume that we have uniforms

145
00:06:03,039 --> 00:06:06,080
simply over this ideal class group if

146
00:06:06,080 --> 00:06:08,800
you you can do this by using like

147
00:06:08,800 --> 00:06:11,840
seafish parameter or say seaside one 112

148
00:06:11,840 --> 00:06:14,560
parameters

149
00:06:16,639 --> 00:06:19,680
and to have a cryptosystem we have some

150
00:06:19,680 --> 00:06:22,080
some computation assumptions

151
00:06:22,080 --> 00:06:23,840
the first one is the most well-known one

152
00:06:23,840 --> 00:06:25,680
that is called computational system

153
00:06:25,680 --> 00:06:27,759
problem

154
00:06:27,759 --> 00:06:31,600
you are given three curves e n a e and b

155
00:06:31,600 --> 00:06:34,400
and your task is to find a b e

156
00:06:34,400 --> 00:06:37,280
this is quite similar to um difficulty

157
00:06:37,280 --> 00:06:39,600
problem you are given g and g to the a

158
00:06:39,600 --> 00:06:42,880
to the b your test is defined due to a b

159
00:06:42,880 --> 00:06:45,520
and we have another relaxed version that

160
00:06:45,520 --> 00:06:48,479
is called c square c a problem

161
00:06:48,479 --> 00:06:51,360
you are given one curve only ae

162
00:06:51,360 --> 00:06:55,759
and your test is to find x square e

163
00:06:57,199 --> 00:06:59,680
but actually if you are given the order

164
00:06:59,680 --> 00:07:02,240
of this ideal class group then these two

165
00:07:02,240 --> 00:07:04,400
problems are equivalent

166
00:07:04,400 --> 00:07:07,120
a proof for this case is for case p

167
00:07:07,120 --> 00:07:08,560
equals three minus four can be found in

168
00:07:08,560 --> 00:07:11,440
this scissors and for the other part of

169
00:07:11,440 --> 00:07:14,479
the proof can be find our appendix the

170
00:07:14,479 --> 00:07:16,800
proof using the fact that um

171
00:07:16,800 --> 00:07:19,680
the co2 subgroup of this ideal class

172
00:07:19,680 --> 00:07:23,039
group is of rank one

173
00:07:25,840 --> 00:07:29,280
and next we introduce a new assumption

174
00:07:29,280 --> 00:07:31,520
called is a pro called csi problem the

175
00:07:31,520 --> 00:07:33,759
reciprocal c side problem is a two round

176
00:07:33,759 --> 00:07:36,240
experiment device following way

177
00:07:36,240 --> 00:07:38,560
there also two there's also a public

178
00:07:38,560 --> 00:07:40,160
curve e

179
00:07:40,160 --> 00:07:43,280
and two parties alice and bob also the

180
00:07:43,280 --> 00:07:46,080
challenger and the adversary and the

181
00:07:46,080 --> 00:07:48,639
other adversary send a curve to the

182
00:07:48,639 --> 00:07:51,360
challenger first and challenger will

183
00:07:51,360 --> 00:07:53,039
send ae to

184
00:07:53,039 --> 00:07:56,240
bob and bob's stats is to find

185
00:07:56,240 --> 00:07:59,840
a e and a inverse e

186
00:08:02,240 --> 00:08:04,479
the reciprocal seaside problem looks a

187
00:08:04,479 --> 00:08:07,280
bit weird but actually you can see that

188
00:08:07,280 --> 00:08:09,440
this problem is as hard as the squares

189
00:08:09,440 --> 00:08:12,639
is a problem

190
00:08:12,639 --> 00:08:14,080
firstly we're going to show that the

191
00:08:14,080 --> 00:08:16,800
reciprocal seaside problem is now

192
00:08:16,800 --> 00:08:19,919
uh harder than square sees that problem

193
00:08:19,919 --> 00:08:22,000
so you are given the curve

194
00:08:22,000 --> 00:08:24,400
and we let the adversary committed to

195
00:08:24,400 --> 00:08:27,120
the same public curve

196
00:08:27,120 --> 00:08:29,919
and then you obtain a challenge ae and

197
00:08:29,919 --> 00:08:32,719
your task now is to find a e and a in

198
00:08:32,719 --> 00:08:34,719
first e but actually you can find out

199
00:08:34,719 --> 00:08:36,159
you already got a

200
00:08:36,159 --> 00:08:38,479
so your test now is just to find a in

201
00:08:38,479 --> 00:08:40,799
first e

202
00:08:40,799 --> 00:08:44,159
we invoke the square system oracle

203
00:08:44,159 --> 00:08:47,439
and we obtain a c

204
00:08:47,680 --> 00:08:49,839
we're going to show that c is equal to a

205
00:08:49,839 --> 00:08:51,200
first c

206
00:08:51,200 --> 00:08:54,880
because you can write e as a first ae

207
00:08:54,880 --> 00:08:55,680
so

208
00:08:55,680 --> 00:08:57,760
the square system oracle will square

209
00:08:57,760 --> 00:09:00,560
this bar so that's why you got a inverse

210
00:09:00,560 --> 00:09:02,719
e

211
00:09:05,680 --> 00:09:07,519
and next we're going to show that the

212
00:09:07,519 --> 00:09:09,680
reciprocal synthetic problem is not

213
00:09:09,680 --> 00:09:12,560
easier than square seaside problem

214
00:09:12,560 --> 00:09:14,320
in this proof we'll use

215
00:09:14,320 --> 00:09:16,160
we'll show this by using rewind the

216
00:09:16,160 --> 00:09:18,640
argument

217
00:09:19,040 --> 00:09:21,760
say the challenge is e and

218
00:09:21,760 --> 00:09:26,160
and now your test is to find square e

219
00:09:26,560 --> 00:09:29,120
we invoke the oracle with the public

220
00:09:29,120 --> 00:09:30,399
curve ae

221
00:09:30,399 --> 00:09:32,080
and up after

222
00:09:32,080 --> 00:09:34,959
oracle coming to a curve x

223
00:09:34,959 --> 00:09:36,959
we give e

224
00:09:36,959 --> 00:09:39,839
as the challenge to the oracle

225
00:09:39,839 --> 00:09:41,839
and then we got the output we extract

226
00:09:41,839 --> 00:09:45,040
the first entry and we rewind the oracle

227
00:09:45,040 --> 00:09:46,800
and we replace

228
00:09:46,800 --> 00:09:49,440
the challenge from e to be the first

229
00:09:49,440 --> 00:09:52,560
entry we just got

230
00:09:52,800 --> 00:09:54,720
and then you excuse the oracle we got

231
00:09:54,720 --> 00:09:57,360
two curves and we extract the second one

232
00:09:57,360 --> 00:09:59,600
we are going to show that the second

233
00:09:59,600 --> 00:10:02,480
entry x2 prime is equal to

234
00:10:02,480 --> 00:10:05,839
a square e

235
00:10:07,360 --> 00:10:10,399
since we can write e as inverse a

236
00:10:10,399 --> 00:10:12,399
so we have x y

237
00:10:12,399 --> 00:10:16,079
equal m first x

238
00:10:16,959 --> 00:10:19,279
and thanks to the transitive action we

239
00:10:19,279 --> 00:10:21,760
can write x as small x e

240
00:10:21,760 --> 00:10:24,160
so you can write x one as the following

241
00:10:24,160 --> 00:10:25,760
way

242
00:10:25,760 --> 00:10:28,240
and by definition the oracle will

243
00:10:28,240 --> 00:10:31,920
inverse this part and acts on x so

244
00:10:31,920 --> 00:10:34,959
that's why you got a inverse sorry a

245
00:10:34,959 --> 00:10:37,120
square e

246
00:10:37,120 --> 00:10:39,200
so we have shown that the reciprocals

247
00:10:39,200 --> 00:10:41,279
inside problem is as hard as square

248
00:10:41,279 --> 00:10:43,760
roots is a problem

249
00:10:43,760 --> 00:10:46,240
so when you are given the order of this

250
00:10:46,240 --> 00:10:48,640
group you can say the reciprocal seaside

251
00:10:48,640 --> 00:10:50,800
problem is as hard as the computational

252
00:10:50,800 --> 00:10:53,599
seaside problem

253
00:10:56,480 --> 00:10:58,240
and next we are going to show our

254
00:10:58,240 --> 00:11:02,320
construction of uplift transfer

255
00:11:03,600 --> 00:11:06,079
firstly we are two two party we start

256
00:11:06,079 --> 00:11:08,160
from a three run construction

257
00:11:08,160 --> 00:11:10,240
and alice and bob also the sender and

258
00:11:10,240 --> 00:11:12,640
receiver and alice has two messages and

259
00:11:12,640 --> 00:11:16,079
bob would like to know well then

260
00:11:16,320 --> 00:11:20,079
firstly ali is sent a e 2 to bob and bob

261
00:11:20,079 --> 00:11:24,240
computes b e or b a and central alice

262
00:11:24,240 --> 00:11:26,320
alice then computes

263
00:11:26,320 --> 00:11:29,200
a b and a inverse b as the decryption

264
00:11:29,200 --> 00:11:31,680
keys for

265
00:11:31,680 --> 00:11:34,720
for these messages and she encrypts this

266
00:11:34,720 --> 00:11:39,040
message with using discrete keys

267
00:11:39,839 --> 00:11:42,800
so in this way bob can decrypt one and

268
00:11:42,800 --> 00:11:45,680
only one message

269
00:11:46,399 --> 00:11:48,240
the idea can be visualized as the

270
00:11:48,240 --> 00:11:51,440
following graph here's alice and bob and

271
00:11:51,440 --> 00:11:55,040
alice has to any sentence ae to bob

272
00:11:55,040 --> 00:12:00,959
and bob can compute a b e or be to alice

273
00:12:00,959 --> 00:12:04,480
if bob said abe to alice alice then

274
00:12:04,480 --> 00:12:06,639
computes these two curves as the

275
00:12:06,639 --> 00:12:10,279
decryption keys

276
00:12:11,200 --> 00:12:14,000
and as for bob he can compute this key

277
00:12:14,000 --> 00:12:16,720
but he cannot compute this one unless he

278
00:12:16,720 --> 00:12:18,320
can solve a

279
00:12:18,320 --> 00:12:21,519
square system problem

280
00:12:23,040 --> 00:12:25,440
so in this case you can show you can see

281
00:12:25,440 --> 00:12:28,240
that that's why bob can decree one and

282
00:12:28,240 --> 00:12:30,880
only one message

283
00:12:30,880 --> 00:12:33,200
and the same argument can apply to the

284
00:12:33,200 --> 00:12:35,760
other case

285
00:12:36,800 --> 00:12:39,200
the next step is that we use projected

286
00:12:39,200 --> 00:12:41,440
twists to to compress the rung of our

287
00:12:41,440 --> 00:12:45,040
protocol from three rounds into two raw

288
00:12:45,040 --> 00:12:48,880
firstly bob computes b and b or b twist

289
00:12:48,880 --> 00:12:51,279
sent to alice where b is the public

290
00:12:51,279 --> 00:12:53,839
curve

291
00:12:54,639 --> 00:12:57,839
then alice again computes a b or a

292
00:12:57,839 --> 00:13:00,240
inverse b and use these curves as the

293
00:13:00,240 --> 00:13:03,040
decryption key to encrypt the message

294
00:13:03,040 --> 00:13:06,720
and send ciphertext to bob

295
00:13:06,720 --> 00:13:09,519
in this case bob can also get one and

296
00:13:09,519 --> 00:13:12,320
only one message

297
00:13:13,519 --> 00:13:16,480
we can visualize in the same way

298
00:13:16,480 --> 00:13:19,760
here is bob bob will compute be or be

299
00:13:19,760 --> 00:13:23,680
twist to alice and alice will compute ae

300
00:13:23,680 --> 00:13:25,040
to bob

301
00:13:25,040 --> 00:13:27,519
in this way bob can compute this

302
00:13:27,519 --> 00:13:30,639
decryption key and he cannot compute the

303
00:13:30,639 --> 00:13:33,680
other decryption key unless he can solve

304
00:13:33,680 --> 00:13:36,240
a computational problem

305
00:13:36,240 --> 00:13:38,079
and the sound grouping can apply for the

306
00:13:38,079 --> 00:13:40,000
other case

307
00:13:40,000 --> 00:13:42,079
but remind remember that this is not a

308
00:13:42,079 --> 00:13:44,000
rigorous pool but it gives you an

309
00:13:44,000 --> 00:13:46,639
intuition how this crypto system can

310
00:13:46,639 --> 00:13:49,639
work

311
00:13:55,040 --> 00:13:57,920
and next to have a uc security we need

312
00:13:57,920 --> 00:14:00,720
to simulate for the corrupt receiver and

313
00:14:00,720 --> 00:14:02,959
corrupt sender

314
00:14:02,959 --> 00:14:03,839
to

315
00:14:03,839 --> 00:14:06,160
simulate corrupt receiver we use a

316
00:14:06,160 --> 00:14:08,480
standard approach by using the

317
00:14:08,480 --> 00:14:11,040
non-committee encryption or one runtime

318
00:14:11,040 --> 00:14:12,800
path for example

319
00:14:12,800 --> 00:14:15,279
and we produce domain ciphertext to

320
00:14:15,279 --> 00:14:17,760
produce and produce the corresponding

321
00:14:17,760 --> 00:14:18,959
key later

322
00:14:18,959 --> 00:14:20,880
we use um

323
00:14:20,880 --> 00:14:23,680
we add a mechanism for this so it will

324
00:14:23,680 --> 00:14:26,160
take one additional round for our crypto

325
00:14:26,160 --> 00:14:28,399
system so our final product is three

326
00:14:28,399 --> 00:14:31,600
round instead of two wrong

327
00:14:34,160 --> 00:14:36,320
and next for the other side of

328
00:14:36,320 --> 00:14:39,040
simulation we developed a new tool for

329
00:14:39,040 --> 00:14:41,519
isotropic cryptography that is called

330
00:14:41,519 --> 00:14:44,480
contracted twist trapdoor

331
00:14:44,480 --> 00:14:47,440
the key idea here is we you we set up a

332
00:14:47,440 --> 00:14:51,680
top door with the poker seaside problem

333
00:14:52,560 --> 00:14:54,480
so how to set up a reciprocal system

334
00:14:54,480 --> 00:14:58,079
problem sub door firstly we compute a

335
00:14:58,079 --> 00:15:00,560
random group element

336
00:15:00,560 --> 00:15:02,000
and we

337
00:15:02,000 --> 00:15:04,639
use this curve as the public curve for

338
00:15:04,639 --> 00:15:07,120
this for this problem

339
00:15:07,120 --> 00:15:09,120
and then the adversary comes into a

340
00:15:09,120 --> 00:15:10,720
random curve by

341
00:15:10,720 --> 00:15:13,600
generally generating a written group

342
00:15:13,600 --> 00:15:15,040
element

343
00:15:15,040 --> 00:15:16,560
after receiving e prime from the

344
00:15:16,560 --> 00:15:19,040
challenger you return this bunch of

345
00:15:19,040 --> 00:15:20,000
scenes

346
00:15:20,000 --> 00:15:22,480
and you can observe that the first entry

347
00:15:22,480 --> 00:15:24,959
is correct so we only need to show the

348
00:15:24,959 --> 00:15:28,800
correctness for the second entry

349
00:15:30,399 --> 00:15:32,880
because of transitivity we can write e

350
00:15:32,880 --> 00:15:34,720
prime as the following way

351
00:15:34,720 --> 00:15:37,920
and because x equals be so it suffices

352
00:15:37,920 --> 00:15:39,279
to show that

353
00:15:39,279 --> 00:15:41,680
it satisfies the following form

354
00:15:41,680 --> 00:15:43,680
and then by using the proposition of

355
00:15:43,680 --> 00:15:45,199
quadratic twist which is we just

356
00:15:45,199 --> 00:15:47,680
mentioned we can write

357
00:15:47,680 --> 00:15:50,160
we can see that the left-hand side is

358
00:15:50,160 --> 00:15:52,399
equal to right-hand side

359
00:15:52,399 --> 00:15:54,560
so we show the coordinates of this

360
00:15:54,560 --> 00:15:57,518
chapter algorithm

361
00:16:03,199 --> 00:16:06,320
so how to use this chapter algorithm to

362
00:16:06,320 --> 00:16:09,839
complete the other half of stimulation

363
00:16:09,839 --> 00:16:12,160
firstly the circuit stands like this and

364
00:16:12,160 --> 00:16:15,199
adversary corrupt the sender at least

365
00:16:15,199 --> 00:16:17,680
and add satu to a message but he will

366
00:16:17,680 --> 00:16:19,680
she will not

367
00:16:19,680 --> 00:16:22,320
encryp she may not encrypt these two

368
00:16:22,320 --> 00:16:26,880
messages she can do anything she wants

369
00:16:26,880 --> 00:16:29,440
so firstly we set out a trapdoor

370
00:16:29,440 --> 00:16:31,759
for the public key curve e here

371
00:16:31,759 --> 00:16:33,519
and then we involve the reciprocal

372
00:16:33,519 --> 00:16:36,720
seaside problem solver to generate this

373
00:16:36,720 --> 00:16:39,600
b element for the bob or say the

374
00:16:39,600 --> 00:16:41,199
receiver

375
00:16:41,199 --> 00:16:44,320
and then apparently receiving this curve

376
00:16:44,320 --> 00:16:46,240
ae

377
00:16:46,240 --> 00:16:47,839
from alice

378
00:16:47,839 --> 00:16:50,639
then we invoke the problem solver to

379
00:16:50,639 --> 00:16:52,639
extract two

380
00:16:52,639 --> 00:16:56,000
two curves and we use these two curves

381
00:16:56,000 --> 00:16:58,160
as the decryption key to decrease the

382
00:16:58,160 --> 00:16:59,759
cipher text

383
00:16:59,759 --> 00:17:02,000
and then the simulator send these two

384
00:17:02,000 --> 00:17:04,959
messages to the first party in the ideal

385
00:17:04,959 --> 00:17:08,480
world and complete the simulation

386
00:17:14,400 --> 00:17:16,799
so in this war we have shown that

387
00:17:16,799 --> 00:17:18,640
we have given

388
00:17:18,640 --> 00:17:21,199
a certainly based oblique transfer that

389
00:17:21,199 --> 00:17:23,039
is usually secure against malicious

390
00:17:23,039 --> 00:17:26,160
adversaries and it took only

391
00:17:26,160 --> 00:17:28,240
a constant number of isotropic

392
00:17:28,240 --> 00:17:30,080
computations

393
00:17:30,080 --> 00:17:32,240
in particular is five isolated

394
00:17:32,240 --> 00:17:34,400
competition for the sender and four for

395
00:17:34,400 --> 00:17:35,760
the receiver

396
00:17:35,760 --> 00:17:37,520
and these two are the

397
00:17:37,520 --> 00:17:39,679
previous work we just mentioned

398
00:17:39,679 --> 00:17:42,480
and the third one is a concurrent work

399
00:17:42,480 --> 00:17:44,799
their main focus is not on oblivion

400
00:17:44,799 --> 00:17:46,799
transfer they just mentioned an ot

401
00:17:46,799 --> 00:17:48,640
construction so we take their

402
00:17:48,640 --> 00:17:52,080
construction into this table

403
00:17:53,440 --> 00:17:55,840
and moreover our underlying

404
00:17:55,840 --> 00:17:57,919
assumption for our crypto system the

405
00:17:57,919 --> 00:18:00,400
reciprocal seaside problem is as hard as

406
00:18:00,400 --> 00:18:03,280
the computer system problem

407
00:18:03,280 --> 00:18:05,360
but keep in mind that the reduction is

408
00:18:05,360 --> 00:18:07,919
not tight it takes one more

409
00:18:07,919 --> 00:18:09,760
you need to call the oracle several

410
00:18:09,760 --> 00:18:12,760
times

411
00:18:16,640 --> 00:18:19,120
and finally we also point out some uh

412
00:18:19,120 --> 00:18:22,480
open problems relevant to this topic

413
00:18:22,480 --> 00:18:24,880
the first question is that

414
00:18:24,880 --> 00:18:27,360
can we have a quantum friendly

415
00:18:27,360 --> 00:18:29,520
between risk-focused seaside problem and

416
00:18:29,520 --> 00:18:32,480
the seaside problem

417
00:18:32,559 --> 00:18:35,120
this is because the

418
00:18:35,120 --> 00:18:37,200
reduction we just used we use rewind the

419
00:18:37,200 --> 00:18:40,240
argument we take an input out we measure

420
00:18:40,240 --> 00:18:43,120
it and we rewind the oracle and take the

421
00:18:43,120 --> 00:18:45,360
output back

422
00:18:45,360 --> 00:18:46,080
so

423
00:18:46,080 --> 00:18:48,400
um this but there is no such operation

424
00:18:48,400 --> 00:18:50,400
in a quantum machine so our question is

425
00:18:50,400 --> 00:18:51,760
that can we have a

426
00:18:51,760 --> 00:18:54,000
content-friendly reduction between the

427
00:18:54,000 --> 00:18:55,840
respecos is a problem in the

428
00:18:55,840 --> 00:18:59,360
computational seaside profit

429
00:18:59,919 --> 00:19:02,000
and the second question is that can we

430
00:19:02,000 --> 00:19:05,360
have a raw optimal efficient isogenic

431
00:19:05,360 --> 00:19:06,559
base ot

432
00:19:06,559 --> 00:19:09,440
raw optimal means two routes because

433
00:19:09,440 --> 00:19:12,000
our final product is three round we want

434
00:19:12,000 --> 00:19:14,400
to have we want to simulate

435
00:19:14,400 --> 00:19:17,440
the corrupt receiver so the additional

436
00:19:17,440 --> 00:19:20,720
mechanism takes one more round for this

437
00:19:20,720 --> 00:19:21,440
so

438
00:19:21,440 --> 00:19:23,039
our question is that can we have a

439
00:19:23,039 --> 00:19:27,360
two-round efficient isotopic base ot

440
00:19:28,160 --> 00:19:30,320
the third question is that can we have

441
00:19:30,320 --> 00:19:32,960
an efficient adaptive usage secure

442
00:19:32,960 --> 00:19:34,880
isotronic based ot

443
00:19:34,880 --> 00:19:37,200
a definitively adversary means that the

444
00:19:37,200 --> 00:19:39,760
adversary can choose

445
00:19:39,760 --> 00:19:41,280
the

446
00:19:41,280 --> 00:19:44,720
who to corrupt after the execution

447
00:19:44,720 --> 00:19:46,080
and the

448
00:19:46,080 --> 00:19:48,640
adversary we deal with is called static

449
00:19:48,640 --> 00:19:51,200
adversary adversary will choose who to

450
00:19:51,200 --> 00:19:52,559
corrupt

451
00:19:52,559 --> 00:19:53,600
at the be

452
00:19:53,600 --> 00:19:56,640
at the beginning of the execution so but

453
00:19:56,640 --> 00:19:58,799
this makes the security proof a bit

454
00:19:58,799 --> 00:20:00,160
different

455
00:20:00,160 --> 00:20:02,320
so our question is that can we have an

456
00:20:02,320 --> 00:20:04,000
efficient adaptive uc secure as a

457
00:20:04,000 --> 00:20:07,559
journey based ot

458
00:20:07,919 --> 00:20:09,360
and

459
00:20:09,360 --> 00:20:13,719
thanks for listening bye bye

