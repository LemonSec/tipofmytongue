1
00:00:01,599 --> 00:00:03,760
hi everyone my name is nicole aboard and

2
00:00:03,760 --> 00:00:05,600
this talk will be about a joint work

3
00:00:05,600 --> 00:00:06,960
with pearcarbman called fast

4
00:00:06,960 --> 00:00:09,280
verification of masking schemes in

5
00:00:09,280 --> 00:00:11,599
characteristic 2.

6
00:00:11,599 --> 00:00:14,160
so first a little bit of context

7
00:00:14,160 --> 00:00:15,519
so we want to make crypto

8
00:00:15,519 --> 00:00:18,320
implementations on observable devices

9
00:00:18,320 --> 00:00:20,480
and more specifically we want to do

10
00:00:20,480 --> 00:00:22,560
secure finite field notification uh in

11
00:00:22,560 --> 00:00:24,240
presence of leakage

12
00:00:24,240 --> 00:00:27,039
so such operations are often used in

13
00:00:27,039 --> 00:00:29,439
non-linear components in similar crypto

14
00:00:29,439 --> 00:00:32,238
for example in s-boxes

15
00:00:32,238 --> 00:00:34,640
and in such components the input and

16
00:00:34,640 --> 00:00:37,120
output are usually secret

17
00:00:37,120 --> 00:00:39,520
and so we want to protect the

18
00:00:39,520 --> 00:00:42,079
implementation against an attacker that

19
00:00:42,079 --> 00:00:43,840
can observe the device and leak

20
00:00:43,840 --> 00:00:46,160
information during the computation

21
00:00:46,160 --> 00:00:47,280
that are

22
00:00:47,280 --> 00:00:50,800
so called side channel attacks

23
00:00:51,039 --> 00:00:54,160
to do so one possible contour measure is

24
00:00:54,160 --> 00:00:57,199
to use masking which is to split a b and

25
00:00:57,199 --> 00:01:00,160
c into shares using a secret string

26
00:01:00,160 --> 00:01:01,120
scheme

27
00:01:01,120 --> 00:01:04,559
for example we can use an additive one

28
00:01:04,559 --> 00:01:08,159
here we have the original value x

29
00:01:08,159 --> 00:01:10,400
that will be split into

30
00:01:10,400 --> 00:01:13,040
d plus one shares the x i

31
00:01:13,040 --> 00:01:16,000
such that the first d shares are taken

32
00:01:16,000 --> 00:01:17,759
uniformly at random

33
00:01:17,759 --> 00:01:21,040
and the last one x d is

34
00:01:21,040 --> 00:01:22,080
computed

35
00:01:22,080 --> 00:01:24,240
such that the sum of all the shares is

36
00:01:24,240 --> 00:01:26,960
equal to x

37
00:01:26,960 --> 00:01:28,080
then

38
00:01:28,080 --> 00:01:30,400
we want to compute the operation so the

39
00:01:30,400 --> 00:01:33,360
multiplication over the shared operands

40
00:01:33,360 --> 00:01:35,360
to obtain a shared result

41
00:01:35,360 --> 00:01:38,720
and we want to do so while ensuring that

42
00:01:38,720 --> 00:01:41,280
no information can be gained on either a

43
00:01:41,280 --> 00:01:45,520
b or c during the computation

44
00:01:46,479 --> 00:01:49,040
um so here is the first attempt at doing

45
00:01:49,040 --> 00:01:52,000
so for the multiplication so we define

46
00:01:52,000 --> 00:01:56,640
ck as the sum of l all the ak bj

47
00:01:56,640 --> 00:01:58,320
for all j

48
00:01:58,320 --> 00:02:01,439
here is the corresponding circuit for uh

49
00:02:01,439 --> 00:02:05,280
for g for yeah for d equal one

50
00:02:05,280 --> 00:02:08,720
um the problem here is that any single

51
00:02:08,720 --> 00:02:10,959
ck is actually revealing information

52
00:02:10,959 --> 00:02:14,239
about b for example if c1 here is

53
00:02:14,239 --> 00:02:17,360
non-zero then we are sure that b itself

54
00:02:17,360 --> 00:02:18,879
is non-zero

55
00:02:18,879 --> 00:02:20,800
so intuitively this strategy is not

56
00:02:20,800 --> 00:02:24,400
secure and now we will see

57
00:02:24,400 --> 00:02:26,480
how to modalize this

58
00:02:26,480 --> 00:02:28,720
to formalize this into the probing

59
00:02:28,720 --> 00:02:31,519
security model

60
00:02:31,519 --> 00:02:32,480
so

61
00:02:32,480 --> 00:02:35,120
first some quick definitions so what we

62
00:02:35,120 --> 00:02:38,720
call a gadget for a given function f

63
00:02:38,720 --> 00:02:41,840
is in fact a circuit that is working not

64
00:02:41,840 --> 00:02:44,319
on the input of f directly but on the

65
00:02:44,319 --> 00:02:47,120
sharing of the inputs

66
00:02:47,120 --> 00:02:50,959
and this circuit is also outputting the

67
00:02:50,959 --> 00:02:52,000
share

68
00:02:52,000 --> 00:02:55,360
a shared version of the result

69
00:02:55,360 --> 00:02:59,040
the circuit itself is described as

70
00:02:59,040 --> 00:03:02,159
arithmetic gates and also some special

71
00:03:02,159 --> 00:03:03,200
gates

72
00:03:03,200 --> 00:03:05,280
providing additional uniform random

73
00:03:05,280 --> 00:03:07,519
values

74
00:03:07,519 --> 00:03:10,080
during the computation

75
00:03:10,080 --> 00:03:13,200
here this equality is just stating that

76
00:03:13,200 --> 00:03:16,159
the circuit is actually computing the

77
00:03:16,159 --> 00:03:20,400
right function f on the under shared

78
00:03:20,400 --> 00:03:22,879
variants

79
00:03:23,120 --> 00:03:26,560
then on on such a gadget we can have

80
00:03:26,560 --> 00:03:29,840
some probes that are just mappings

81
00:03:29,840 --> 00:03:31,040
that

82
00:03:31,040 --> 00:03:33,599
maps a given wire to the value it takes

83
00:03:33,599 --> 00:03:37,920
you during the execution of the gadget

84
00:03:39,440 --> 00:03:44,319
and so in 2003 ishai scion wagner

85
00:03:44,319 --> 00:03:47,599
introduced the concept of d privacy

86
00:03:47,599 --> 00:03:52,480
d private is a property of a gadget

87
00:03:52,480 --> 00:03:55,120
so a gadget is said to be deprived when

88
00:03:55,120 --> 00:03:58,000
every set of less than d probes on this

89
00:03:58,000 --> 00:03:59,040
gadget

90
00:03:59,040 --> 00:04:01,920
is independent is the distribution of

91
00:04:01,920 --> 00:04:04,239
these probes are independent from the

92
00:04:04,239 --> 00:04:06,959
unmask values on which the gadget it is

93
00:04:06,959 --> 00:04:09,680
evaluated

94
00:04:09,760 --> 00:04:10,720
so

95
00:04:10,720 --> 00:04:14,560
in the same paper in 2003 they designed

96
00:04:14,560 --> 00:04:17,918
d private masking schemes for ned

97
00:04:17,918 --> 00:04:20,959
which has quadratic complexity in the

98
00:04:20,959 --> 00:04:22,960
order of the masking

99
00:04:22,960 --> 00:04:24,639
this complexity

100
00:04:24,639 --> 00:04:26,960
is both in term of the number of sums

101
00:04:26,960 --> 00:04:28,400
the number of products

102
00:04:28,400 --> 00:04:30,960
used but also in the number of

103
00:04:30,960 --> 00:04:33,199
additional random masks used during the

104
00:04:33,199 --> 00:04:35,680
computation to make sure that the

105
00:04:35,680 --> 00:04:38,639
the gadget is secure

106
00:04:38,639 --> 00:04:40,720
here is an example of

107
00:04:40,720 --> 00:04:44,400
such a gadget multiplication gadget at

108
00:04:44,400 --> 00:04:47,199
order d equal one

109
00:04:47,199 --> 00:04:48,240
so

110
00:04:48,240 --> 00:04:50,560
first we have the the sharing of a and

111
00:04:50,560 --> 00:04:52,960
the sharing of b we make the tensor

112
00:04:52,960 --> 00:04:54,800
project between the

113
00:04:54,800 --> 00:04:58,639
these two to obtain all the aibj

114
00:04:58,639 --> 00:05:01,600
and here we see that r0 is an additional

115
00:05:01,600 --> 00:05:04,160
random value that

116
00:05:04,160 --> 00:05:06,720
is used to ensure that the circuit is

117
00:05:06,720 --> 00:05:08,800
deprived

118
00:05:08,800 --> 00:05:10,880
as output we have

119
00:05:10,880 --> 00:05:14,400
c0 c1 which is a valid sharing of the

120
00:05:14,400 --> 00:05:17,520
product of a and b

121
00:05:18,560 --> 00:05:21,039
here is another multiplication gadget

122
00:05:21,039 --> 00:05:22,479
but this time

123
00:05:22,479 --> 00:05:25,440
secure at order d equal three so it's uh

124
00:05:25,440 --> 00:05:26,880
three private

125
00:05:26,880 --> 00:05:31,360
from uh but at al in 2017

126
00:05:31,360 --> 00:05:34,479
and as before we are doing this first

127
00:05:34,479 --> 00:05:36,880
the tensor project and then we use

128
00:05:36,880 --> 00:05:39,680
additional random mask here

129
00:05:39,680 --> 00:05:41,680
there are four random masks

130
00:05:41,680 --> 00:05:44,479
r0 to r3

131
00:05:44,479 --> 00:05:46,320
to secure the gadget

132
00:05:46,320 --> 00:05:49,120
we see that the the complexity of such

133
00:05:49,120 --> 00:05:50,840
circuit is

134
00:05:50,840 --> 00:05:53,919
increasing quadratically in the number

135
00:05:53,919 --> 00:05:55,759
of

136
00:05:55,759 --> 00:05:57,039
of the

137
00:05:57,039 --> 00:06:01,199
in term of d the order of the masking

138
00:06:01,199 --> 00:06:04,160
the main problem about d privacy is that

139
00:06:04,160 --> 00:06:06,639
it is not composable which means that if

140
00:06:06,639 --> 00:06:10,000
we have two d private circuits then

141
00:06:10,000 --> 00:06:11,919
their their composition is not

142
00:06:11,919 --> 00:06:14,319
necessarily the private

143
00:06:14,319 --> 00:06:15,919
so we can't

144
00:06:15,919 --> 00:06:19,039
chain the gadgets

145
00:06:19,759 --> 00:06:23,360
so in 2016 but i introduced

146
00:06:23,360 --> 00:06:25,840
new composable models that are called

147
00:06:25,840 --> 00:06:27,440
non-interference and strong

148
00:06:27,440 --> 00:06:29,120
non-interference

149
00:06:29,120 --> 00:06:31,759
and that that are based on the

150
00:06:31,759 --> 00:06:35,400
simulatability property so

151
00:06:35,400 --> 00:06:37,039
simulatability

152
00:06:37,039 --> 00:06:40,160
is a property of a given set of probes

153
00:06:40,160 --> 00:06:42,240
here p

154
00:06:42,240 --> 00:06:44,880
and so this set of probes is said to be

155
00:06:44,880 --> 00:06:46,479
t simulatable

156
00:06:46,479 --> 00:06:50,000
if for a fixed input sharing

157
00:06:50,000 --> 00:06:51,120
of the x

158
00:06:51,120 --> 00:06:54,319
the distribution induced on this set of

159
00:06:54,319 --> 00:06:57,199
probes by the additional random masks

160
00:06:57,199 --> 00:07:00,000
can be simulated perfectly with the

161
00:07:00,000 --> 00:07:01,599
knowledge of

162
00:07:01,599 --> 00:07:03,680
of less than t

163
00:07:03,680 --> 00:07:04,560
share

164
00:07:04,560 --> 00:07:07,680
less than t-shares for each input

165
00:07:07,680 --> 00:07:10,000
okay

166
00:07:10,080 --> 00:07:13,759
so from this simulatability property

167
00:07:13,759 --> 00:07:16,000
we have the this non-interference and

168
00:07:16,000 --> 00:07:18,319
this strong interference

169
00:07:18,319 --> 00:07:22,240
so we say that a gadget is a dni if and

170
00:07:22,240 --> 00:07:23,919
only if

171
00:07:23,919 --> 00:07:26,720
any set of atmos d probes is

172
00:07:26,720 --> 00:07:28,319
dissimilable

173
00:07:28,319 --> 00:07:30,479
for the strong interference it's a

174
00:07:30,479 --> 00:07:32,160
little bit different

175
00:07:32,160 --> 00:07:33,360
um

176
00:07:33,360 --> 00:07:35,520
because we are uh

177
00:07:35,520 --> 00:07:38,319
regrouping the the probes into two sets

178
00:07:38,319 --> 00:07:41,280
one that are on the input

179
00:07:41,280 --> 00:07:44,639
on the internal wires of the circuit

180
00:07:44,639 --> 00:07:45,840
and

181
00:07:45,840 --> 00:07:48,879
some probes that are on the output wires

182
00:07:48,879 --> 00:07:51,199
only of the circuit

183
00:07:51,199 --> 00:07:52,240
so

184
00:07:52,240 --> 00:07:55,520
we say we say that a gadget is dsni if

185
00:07:55,520 --> 00:07:56,720
and only if

186
00:07:56,720 --> 00:07:59,520
any set of d probes where we have d1

187
00:07:59,520 --> 00:08:01,759
probes on the internal

188
00:08:01,759 --> 00:08:05,120
wires and d2 probes on the

189
00:08:05,120 --> 00:08:06,639
output wires

190
00:08:06,639 --> 00:08:09,120
and this set of probes must be

191
00:08:09,120 --> 00:08:12,319
d1 simulatable

192
00:08:12,319 --> 00:08:13,440
what is

193
00:08:13,440 --> 00:08:15,360
useful with these security models is

194
00:08:15,360 --> 00:08:17,199
that first

195
00:08:17,199 --> 00:08:19,840
it's imply

196
00:08:19,840 --> 00:08:22,240
they implies they imply

197
00:08:22,240 --> 00:08:23,599
deep privacy

198
00:08:23,599 --> 00:08:26,400
and also most importantly under some

199
00:08:26,400 --> 00:08:28,240
independence hypothesis

200
00:08:28,240 --> 00:08:32,240
the composition of a dsl dni

201
00:08:32,240 --> 00:08:36,080
gadget with a ds91 is itself dsni

202
00:08:36,080 --> 00:08:36,880
so

203
00:08:36,880 --> 00:08:39,679
thanks to this property this composition

204
00:08:39,679 --> 00:08:41,679
we can

205
00:08:41,679 --> 00:08:43,440
compose different

206
00:08:43,440 --> 00:08:45,680
small gadgets in order to create a

207
00:08:45,680 --> 00:08:46,720
bigger

208
00:08:46,720 --> 00:08:49,600
secure circuit

209
00:08:50,560 --> 00:08:53,440
but now we need to

210
00:08:53,440 --> 00:08:56,399
check the security of uh

211
00:08:56,399 --> 00:08:58,800
in the security of a given gadget in

212
00:08:58,800 --> 00:09:01,120
this model for example if we go back to

213
00:09:01,120 --> 00:09:02,000
this

214
00:09:02,000 --> 00:09:04,080
circuit this gadget

215
00:09:04,080 --> 00:09:04,800
we

216
00:09:04,800 --> 00:09:07,680
i said to you that it is d private in

217
00:09:07,680 --> 00:09:10,560
fact it is also dni but to prove that

218
00:09:10,560 --> 00:09:13,360
this gadget is dni

219
00:09:13,360 --> 00:09:16,399
in absence of a generic proof

220
00:09:16,399 --> 00:09:20,080
we need to check that for every

221
00:09:20,080 --> 00:09:23,279
set of less than d probes

222
00:09:23,279 --> 00:09:25,360
this probably similar to the problem is

223
00:09:25,360 --> 00:09:28,640
that the number of sets of probes

224
00:09:28,640 --> 00:09:29,680
is

225
00:09:29,680 --> 00:09:31,920
is growing exponentially in the number

226
00:09:31,920 --> 00:09:32,959
of

227
00:09:32,959 --> 00:09:36,599
of a wire

228
00:09:37,279 --> 00:09:38,399
so

229
00:09:38,399 --> 00:09:41,440
to check a given gadget given masking

230
00:09:41,440 --> 00:09:44,000
schemes uh when we don't have a generic

231
00:09:44,000 --> 00:09:45,200
proof

232
00:09:45,200 --> 00:09:46,240
we want

233
00:09:46,240 --> 00:09:48,560
first an easy to check condition for the

234
00:09:48,560 --> 00:09:51,040
simulatability of a given set of probes

235
00:09:51,040 --> 00:09:52,080
uh

236
00:09:52,080 --> 00:09:53,040
and

237
00:09:53,040 --> 00:09:53,920
most

238
00:09:53,920 --> 00:09:57,680
and also if we want to have gadget over

239
00:09:57,680 --> 00:10:00,720
f2 we want this easy to check condition

240
00:10:00,720 --> 00:10:02,480
to be valid

241
00:10:02,480 --> 00:10:04,560
over f2

242
00:10:04,560 --> 00:10:06,480
and then once we have a condition that

243
00:10:06,480 --> 00:10:09,200
is easy easily

244
00:10:09,200 --> 00:10:10,720
checked

245
00:10:10,720 --> 00:10:13,360
we want to efficiently enumerate over

246
00:10:13,360 --> 00:10:15,920
all the subset of probes

247
00:10:15,920 --> 00:10:16,640
and

248
00:10:16,640 --> 00:10:17,680
to

249
00:10:17,680 --> 00:10:20,320
for this to be efficient also we'd want

250
00:10:20,320 --> 00:10:22,800
the set of probes uh to be as small as

251
00:10:22,800 --> 00:10:26,000
possible to reduce the exponential

252
00:10:26,000 --> 00:10:27,920
to mitigate the exponential growth of

253
00:10:27,920 --> 00:10:30,079
the of the number of

254
00:10:30,079 --> 00:10:34,240
sets of probes also here i will talk

255
00:10:34,240 --> 00:10:36,800
about dni but we also want to check the

256
00:10:36,800 --> 00:10:39,040
dsi property

257
00:10:39,040 --> 00:10:40,320
and

258
00:10:40,320 --> 00:10:41,760
also we

259
00:10:41,760 --> 00:10:42,800
we

260
00:10:42,800 --> 00:10:44,160
can

261
00:10:44,160 --> 00:10:45,760
think of

262
00:10:45,760 --> 00:10:48,880
extending the verification in a more

263
00:10:48,880 --> 00:10:50,880
hardware oriented model called the

264
00:10:50,880 --> 00:10:53,519
rubber spring model but we will not show

265
00:10:53,519 --> 00:10:56,640
here this here but it is

266
00:10:56,640 --> 00:11:00,600
written in our article

267
00:11:00,640 --> 00:11:03,040
so um yeah so for the easy to check

268
00:11:03,040 --> 00:11:04,640
condition first

269
00:11:04,640 --> 00:11:07,920
so in 2017 uh ballet that all produced

270
00:11:07,920 --> 00:11:12,000
this condition uh which applies to

271
00:11:12,000 --> 00:11:13,519
billionaire probes

272
00:11:13,519 --> 00:11:16,320
so billionaire probes are just

273
00:11:16,320 --> 00:11:17,920
probes that can be

274
00:11:17,920 --> 00:11:22,000
expressed as the sum of some aibj

275
00:11:22,000 --> 00:11:23,440
some ai

276
00:11:23,440 --> 00:11:24,800
some bj

277
00:11:24,800 --> 00:11:29,839
some additional random masks called r i

278
00:11:29,839 --> 00:11:33,279
plus eventually a constant

279
00:11:33,279 --> 00:11:36,399
in general in in in the masking schemes

280
00:11:36,399 --> 00:11:38,880
we are going to look at all the probes

281
00:11:38,880 --> 00:11:40,399
are built in there are so everything is

282
00:11:40,399 --> 00:11:42,480
good

283
00:11:42,480 --> 00:11:46,079
so a set of probes is said to satisfy

284
00:11:46,079 --> 00:11:48,320
this condition

285
00:11:48,320 --> 00:11:51,200
if and only if it exists a linear

286
00:11:51,200 --> 00:11:53,440
combination of those probes that can be

287
00:11:53,440 --> 00:11:55,120
expressed

288
00:11:55,120 --> 00:11:57,040
only as

289
00:11:57,040 --> 00:12:02,079
some aibj some ai some bj plus some

290
00:12:02,079 --> 00:12:03,200
constants

291
00:12:03,200 --> 00:12:07,200
and so no additional random masks r

292
00:12:07,200 --> 00:12:08,160
are

293
00:12:08,160 --> 00:12:10,800
appears in this expression

294
00:12:10,800 --> 00:12:12,160
additionally

295
00:12:12,160 --> 00:12:15,360
we want that the the all the rows of

296
00:12:15,360 --> 00:12:18,480
this block matrix are non-zero

297
00:12:18,480 --> 00:12:20,880
or all the columns of this block matrix

298
00:12:20,880 --> 00:12:22,399
are nonzero

299
00:12:22,399 --> 00:12:24,720
why we want that

300
00:12:24,720 --> 00:12:27,680
we want that be because um

301
00:12:27,680 --> 00:12:28,720
this

302
00:12:28,720 --> 00:12:31,519
this means that if there is no

303
00:12:31,519 --> 00:12:34,880
uh zero row in this block matrix it

304
00:12:34,880 --> 00:12:35,839
means that

305
00:12:35,839 --> 00:12:38,720
the the the linear combination

306
00:12:38,720 --> 00:12:43,279
functionally depends on every shares

307
00:12:43,279 --> 00:12:46,160
on all the d plus one shares of

308
00:12:46,160 --> 00:12:47,680
a

309
00:12:47,680 --> 00:12:48,639
here

310
00:12:48,639 --> 00:12:50,720
if we don't have any

311
00:12:50,720 --> 00:12:53,120
zero column it means that

312
00:12:53,120 --> 00:12:55,200
the linear combination functionally

313
00:12:55,200 --> 00:12:58,720
depends on the on d plus one shares of

314
00:12:58,720 --> 00:13:00,880
b

315
00:13:02,959 --> 00:13:07,839
so from this condition we can

316
00:13:08,320 --> 00:13:10,240
state a theorem

317
00:13:10,240 --> 00:13:12,240
which means which state that

318
00:13:12,240 --> 00:13:13,920
if a set of probes satisfies the

319
00:13:13,920 --> 00:13:17,200
condition then it is not d simulatable

320
00:13:17,200 --> 00:13:19,920
so if it is not d simulatable then it is

321
00:13:19,920 --> 00:13:24,079
an attack against the dna property

322
00:13:24,079 --> 00:13:26,639
and the converse is true with the

323
00:13:26,639 --> 00:13:28,160
constraint

324
00:13:28,160 --> 00:13:30,880
because if the the set of prop is not d

325
00:13:30,880 --> 00:13:33,920
simulatable and the size of the finite

326
00:13:33,920 --> 00:13:37,040
field is strictly greater than d plus

327
00:13:37,040 --> 00:13:39,519
one then we are sure that it satisfies

328
00:13:39,519 --> 00:13:42,000
the condition

329
00:13:42,000 --> 00:13:46,160
as a corollary uh if the the the finite

330
00:13:46,160 --> 00:13:49,360
field is sufficiently

331
00:13:49,519 --> 00:13:52,399
the size of the the finite field is uh

332
00:13:52,399 --> 00:13:54,240
sufficiently big

333
00:13:54,240 --> 00:13:55,760
then

334
00:13:55,760 --> 00:13:58,320
if no set of less than d probes on c

335
00:13:58,320 --> 00:14:01,040
satisfies the condition then we are sure

336
00:14:01,040 --> 00:14:02,399
that it is dna

337
00:14:02,399 --> 00:14:03,279
so

338
00:14:03,279 --> 00:14:05,440
from this corollary we can

339
00:14:05,440 --> 00:14:07,760
have a direct algorithm

340
00:14:07,760 --> 00:14:09,440
to

341
00:14:09,440 --> 00:14:11,839
to to check the dna property of a given

342
00:14:11,839 --> 00:14:13,440
gadget

343
00:14:13,440 --> 00:14:15,120
the problem here is that if we want to

344
00:14:15,120 --> 00:14:18,560
to check a gadgets that work

345
00:14:18,560 --> 00:14:19,839
on f2

346
00:14:19,839 --> 00:14:21,120
then

347
00:14:21,120 --> 00:14:24,480
this constraint is not met and then

348
00:14:24,480 --> 00:14:29,120
we can't use this theorem and corollary

349
00:14:29,120 --> 00:14:31,120
so we are going to

350
00:14:31,120 --> 00:14:33,920
state a slightly different condition

351
00:14:33,920 --> 00:14:36,480
that is uh it is

352
00:14:36,480 --> 00:14:38,959
the same as the previous one inst but

353
00:14:38,959 --> 00:14:41,040
instead of having

354
00:14:41,040 --> 00:14:42,880
um

355
00:14:42,880 --> 00:14:44,959
but instead of saying that

356
00:14:44,959 --> 00:14:48,480
all the the rows must be non-zero here

357
00:14:48,480 --> 00:14:50,800
at least l plus one

358
00:14:50,800 --> 00:14:52,720
rows must be non-zero

359
00:14:52,720 --> 00:14:54,880
or l plus one

360
00:14:54,880 --> 00:14:56,880
columns

361
00:14:56,880 --> 00:14:59,760
where l is the number of probe on our

362
00:14:59,760 --> 00:15:00,560
set

363
00:15:00,560 --> 00:15:02,880
so we take a set of uh

364
00:15:02,880 --> 00:15:05,040
of l probes

365
00:15:05,040 --> 00:15:07,430
and if we we can

366
00:15:07,430 --> 00:15:09,040
[Music]

367
00:15:09,040 --> 00:15:11,040
we if we can find a linear combination

368
00:15:11,040 --> 00:15:12,560
such that

369
00:15:12,560 --> 00:15:14,720
this linear combination does not depend

370
00:15:14,720 --> 00:15:15,760
on on

371
00:15:15,760 --> 00:15:17,680
any additional

372
00:15:17,680 --> 00:15:19,440
random value r

373
00:15:19,440 --> 00:15:20,800
and

374
00:15:20,800 --> 00:15:22,399
it depends on

375
00:15:22,399 --> 00:15:25,199
it actually depends on more share

376
00:15:25,199 --> 00:15:27,920
than the number of probes in the set

377
00:15:27,920 --> 00:15:32,959
then it's set to satisfies condition 12.

378
00:15:34,240 --> 00:15:36,800
as before we can define a theorem and a

379
00:15:36,800 --> 00:15:38,320
corollary

380
00:15:38,320 --> 00:15:40,160
that state that if we have a set of

381
00:15:40,160 --> 00:15:42,399
probes of l probes that satisfy the

382
00:15:42,399 --> 00:15:43,440
condition

383
00:15:43,440 --> 00:15:46,399
then it is not as simulatable

384
00:15:46,399 --> 00:15:47,519
and if

385
00:15:47,519 --> 00:15:50,000
the set of probes is not dissimilable

386
00:15:50,000 --> 00:15:52,880
then there exists a smaller

387
00:15:52,880 --> 00:15:55,279
set included in the first one that

388
00:15:55,279 --> 00:15:56,959
satisfies the condition

389
00:15:56,959 --> 00:15:58,079
and as a

390
00:15:58,079 --> 00:15:59,440
corollary

391
00:15:59,440 --> 00:16:01,600
if no set of less than d probes on c

392
00:16:01,600 --> 00:16:05,440
satisfies the condition then it is a dna

393
00:16:05,440 --> 00:16:08,480
so thanks to this corollary we can

394
00:16:08,480 --> 00:16:10,880
design an algorithm that will go over

395
00:16:10,880 --> 00:16:14,000
every set of less than d probes

396
00:16:14,000 --> 00:16:17,279
check if it's satisfied condition 12

397
00:16:17,279 --> 00:16:20,320
and at the end if no one satisf no no

398
00:16:20,320 --> 00:16:22,639
set of probes satisfies the condition

399
00:16:22,639 --> 00:16:26,160
then we have proven the property the dna

400
00:16:26,160 --> 00:16:29,120
property of the gadget

401
00:16:29,759 --> 00:16:32,560
that's what we are going to do and to do

402
00:16:32,560 --> 00:16:34,720
so efficiently we will rewrite the

403
00:16:34,720 --> 00:16:36,320
condition

404
00:16:36,320 --> 00:16:38,880
in terms of weight of indicator matrices

405
00:16:38,880 --> 00:16:42,079
the the matrices that indicate the the

406
00:16:42,079 --> 00:16:45,040
functional dependence on the aibj the ai

407
00:16:45,040 --> 00:16:48,320
the bj the additional random

408
00:16:48,320 --> 00:16:49,360
ri

409
00:16:49,360 --> 00:16:51,120
etc

410
00:16:51,120 --> 00:16:53,440
and so we will use

411
00:16:53,440 --> 00:16:56,639
a vectorized instruction

412
00:16:56,639 --> 00:16:59,199
during the implementation to compute the

413
00:16:59,199 --> 00:17:01,440
the matrices and the weights uh very

414
00:17:01,440 --> 00:17:02,959
efficiently

415
00:17:02,959 --> 00:17:05,679
and also we will use a combination gray

416
00:17:05,679 --> 00:17:06,880
codes

417
00:17:06,880 --> 00:17:09,359
to efficiently enumerate over all the

418
00:17:09,359 --> 00:17:12,240
subsets of probes so to go from one

419
00:17:12,240 --> 00:17:14,799
subset of props to the other with the

420
00:17:14,799 --> 00:17:15,839
with the

421
00:17:15,839 --> 00:17:17,520
list

422
00:17:17,520 --> 00:17:18,959
computation

423
00:17:18,959 --> 00:17:20,400
possible

424
00:17:20,400 --> 00:17:23,520
at peak performance on a

425
00:17:23,520 --> 00:17:25,599
single thread and a

426
00:17:25,599 --> 00:17:29,679
thread at 2.6 gigahertz we are able to

427
00:17:29,679 --> 00:17:32,640
check around 200 million

428
00:17:32,640 --> 00:17:34,320
subsets

429
00:17:34,320 --> 00:17:36,559
by second

430
00:17:36,559 --> 00:17:38,400
and because we use combination gray

431
00:17:38,400 --> 00:17:39,280
codes

432
00:17:39,280 --> 00:17:41,440
we can easily parallelize the the

433
00:17:41,440 --> 00:17:42,799
computation

434
00:17:42,799 --> 00:17:47,520
by enumerating different um different

435
00:17:47,520 --> 00:17:50,720
enumerating the space of all the subsets

436
00:17:50,720 --> 00:17:52,720
of less than d probes

437
00:17:52,720 --> 00:17:57,600
in a parallel parallelized way

438
00:17:59,520 --> 00:18:01,520
so as a result

439
00:18:01,520 --> 00:18:04,640
of our contributions uh we have

440
00:18:04,640 --> 00:18:07,760
a new condition for the dni and also the

441
00:18:07,760 --> 00:18:09,520
dsni security

442
00:18:09,520 --> 00:18:12,160
of the small fields we are we are not

443
00:18:12,160 --> 00:18:15,600
constrained by the size of the field

444
00:18:15,600 --> 00:18:18,960
we also have a new algorithm to check

445
00:18:18,960 --> 00:18:22,320
the dni and the sini property that is

446
00:18:22,320 --> 00:18:26,640
valid over f2 it is correct over f2

447
00:18:26,640 --> 00:18:27,600
and

448
00:18:27,600 --> 00:18:30,080
this algorithm is implemented as a

449
00:18:30,080 --> 00:18:32,559
publicly available tool

450
00:18:32,559 --> 00:18:35,919
to to check the the security of gadgets

451
00:18:35,919 --> 00:18:37,039
um

452
00:18:37,039 --> 00:18:38,880
and this tool uh improved the

453
00:18:38,880 --> 00:18:40,799
verification performance by

454
00:18:40,799 --> 00:18:42,480
three orders of magnitude

455
00:18:42,480 --> 00:18:44,000
so for example

456
00:18:44,000 --> 00:18:47,200
for eight is nine verification

457
00:18:47,200 --> 00:18:48,000
uh

458
00:18:48,000 --> 00:18:50,960
with the state-of-the-art tool it took

459
00:18:50,960 --> 00:18:53,600
13 days on four threads

460
00:18:53,600 --> 00:18:56,799
and with our tool it took less than

461
00:18:56,799 --> 00:19:00,240
10 minutes on a single thread

462
00:19:03,039 --> 00:19:05,679
with our tool we were able to

463
00:19:05,679 --> 00:19:10,559
verify the the ni and sni property of

464
00:19:10,559 --> 00:19:12,400
concrete masking schemes

465
00:19:12,400 --> 00:19:14,559
up to order d equal 11

466
00:19:14,559 --> 00:19:17,919
where it was previously verified only to

467
00:19:17,919 --> 00:19:21,200
order 7 and lower

468
00:19:21,200 --> 00:19:23,120
we were also able to disprove a

469
00:19:23,120 --> 00:19:25,039
conjecture by about at all on the

470
00:19:25,039 --> 00:19:28,240
security of generic transformation

471
00:19:28,240 --> 00:19:32,000
of any gadgets into sni gadgets

472
00:19:32,000 --> 00:19:34,240
in fact this conjecture is

473
00:19:34,240 --> 00:19:35,760
well the the

474
00:19:35,760 --> 00:19:38,080
the generic transformation is correct

475
00:19:38,080 --> 00:19:40,000
until a

476
00:19:40,000 --> 00:19:41,520
given order

477
00:19:41,520 --> 00:19:45,679
above which it is no longer correct

478
00:19:47,200 --> 00:19:48,799
and then

479
00:19:48,799 --> 00:19:51,840
we also used our tool to design new

480
00:19:51,840 --> 00:19:54,799
masking schemes and to verify them

481
00:19:54,799 --> 00:19:56,880
straight away and

482
00:19:56,880 --> 00:19:59,919
thanks to that we are able to

483
00:19:59,919 --> 00:20:03,360
to have masking teams at order g equals

484
00:20:03,360 --> 00:20:04,240
7

485
00:20:04,240 --> 00:20:07,280
which take 17 less additional random

486
00:20:07,280 --> 00:20:09,678
masks

487
00:20:10,880 --> 00:20:13,679
so if you want to read more about it you

488
00:20:13,679 --> 00:20:15,919
can read our article

489
00:20:15,919 --> 00:20:18,159
which full version is available on

490
00:20:18,159 --> 00:20:20,080
eprint

491
00:20:20,080 --> 00:20:22,080
this version has

492
00:20:22,080 --> 00:20:24,240
additional examples and figures

493
00:20:24,240 --> 00:20:27,280
and the implementation of our tool is

494
00:20:27,280 --> 00:20:30,320
publicly available on my github

495
00:20:30,320 --> 00:20:33,520
so you can check this out too

496
00:20:33,520 --> 00:20:37,000
thanks for listening

