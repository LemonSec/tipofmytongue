1
00:00:01,280 --> 00:00:03,840
hi everyone my name is dakshita kurana

2
00:00:03,840 --> 00:00:05,759
and this is the eurocrypt talk about the

3
00:00:05,759 --> 00:00:08,160
paper non-interactive distributional

4
00:00:08,160 --> 00:00:10,320
indistinguishability and non-malleable

5
00:00:10,320 --> 00:00:11,759
commitments

6
00:00:11,759 --> 00:00:13,759
let me begin by telling you about

7
00:00:13,759 --> 00:00:15,480
non-interactive distributional

8
00:00:15,480 --> 00:00:17,680
indistinguishability which is a special

9
00:00:17,680 --> 00:00:20,880
type of proof system

10
00:00:22,240 --> 00:00:24,720
a proof is a way for one party that we

11
00:00:24,720 --> 00:00:27,119
will call the prover to convince another

12
00:00:27,119 --> 00:00:29,119
party called the verifier about the

13
00:00:29,119 --> 00:00:30,880
truth of a statement

14
00:00:30,880 --> 00:00:32,558
traditionally the way we think about

15
00:00:32,558 --> 00:00:34,399
proofs is that the approver writes out

16
00:00:34,399 --> 00:00:36,719
an entire sequence of steps that he then

17
00:00:36,719 --> 00:00:38,960
sends to the verifier who then checks

18
00:00:38,960 --> 00:00:41,280
these steps one by one and accepts the

19
00:00:41,280 --> 00:00:43,600
prover's claim if all these steps check

20
00:00:43,600 --> 00:00:45,840
out

21
00:00:46,079 --> 00:00:48,079
some of the really consequential early

22
00:00:48,079 --> 00:00:50,399
results in cryptography and complexity

23
00:00:50,399 --> 00:00:52,239
followed the realization that proofs

24
00:00:52,239 --> 00:00:53,280
could be

25
00:00:53,280 --> 00:00:55,280
interactive

26
00:00:55,280 --> 00:00:57,600
a verifier could send randomized queries

27
00:00:57,600 --> 00:00:59,440
that the prover would have to repeatedly

28
00:00:59,440 --> 00:01:01,359
answer and only once the approver

29
00:01:01,359 --> 00:01:03,199
successfully answered all of these

30
00:01:03,199 --> 00:01:05,519
queries would the verifier accept the

31
00:01:05,519 --> 00:01:07,040
broker's claim

32
00:01:07,040 --> 00:01:09,200
as usual it was important for these

33
00:01:09,200 --> 00:01:11,520
proofs to be sound which means that if

34
00:01:11,520 --> 00:01:13,600
the provers claim was false then with

35
00:01:13,600 --> 00:01:15,680
overwhelming probability the verifier

36
00:01:15,680 --> 00:01:17,680
would catch the prover in a lie and

37
00:01:17,680 --> 00:01:19,840
reject the move

38
00:01:19,840 --> 00:01:21,280
now one of the most beautiful

39
00:01:21,280 --> 00:01:23,759
consequences of allowing interaction was

40
00:01:23,759 --> 00:01:26,000
that it enabled zero knowledge this

41
00:01:26,000 --> 00:01:28,320
concept was introduced in a seminal work

42
00:01:28,320 --> 00:01:31,119
of gorwasser mikali and rakov and allow

43
00:01:31,119 --> 00:01:32,960
for the construction of interactive

44
00:01:32,960 --> 00:01:35,040
proofs that revealed no secrets to the

45
00:01:35,040 --> 00:01:36,400
verifier

46
00:01:36,400 --> 00:01:38,240
the only information the verifier

47
00:01:38,240 --> 00:01:40,479
learned from such a proof was whether or

48
00:01:40,479 --> 00:01:43,200
not the prover's claim was true and no

49
00:01:43,200 --> 00:01:45,600
associated secrets that the kruger held

50
00:01:45,600 --> 00:01:47,280
were potentially

51
00:01:47,280 --> 00:01:48,799
would potentially be leaked to the

52
00:01:48,799 --> 00:01:50,960
verifier

53
00:01:50,960 --> 00:01:52,640
now zero knowledge proofs have become

54
00:01:52,640 --> 00:01:54,799
the basis for most privacy preserving

55
00:01:54,799 --> 00:01:57,360
proof systems that we use today

56
00:01:57,360 --> 00:01:59,759
and while interaction enables zero

57
00:01:59,759 --> 00:02:00,719
knowledge

58
00:02:00,719 --> 00:02:02,479
interaction is also prohibitively

59
00:02:02,479 --> 00:02:04,960
expensive in situations like ledgers and

60
00:02:04,960 --> 00:02:06,640
blockchains but there are many

61
00:02:06,640 --> 00:02:08,959
participants verifying the proofs of

62
00:02:08,959 --> 00:02:10,720
many others

63
00:02:10,720 --> 00:02:12,560
and thus one of the really important

64
00:02:12,560 --> 00:02:14,959
goals of modern cryptography is to build

65
00:02:14,959 --> 00:02:17,200
privacy preserving proof systems that do

66
00:02:17,200 --> 00:02:19,440
not require interaction

67
00:02:19,440 --> 00:02:21,520
now one could begin by asking whether

68
00:02:21,520 --> 00:02:23,760
zika arguments are achievable without

69
00:02:23,760 --> 00:02:24,959
interaction

70
00:02:24,959 --> 00:02:27,360
and while this is possible via heuristic

71
00:02:27,360 --> 00:02:29,920
constructions that can be proven secure

72
00:02:29,920 --> 00:02:31,840
in idealized models

73
00:02:31,840 --> 00:02:34,160
or if we assume that players have access

74
00:02:34,160 --> 00:02:36,640
to a trusted common reference string

75
00:02:36,640 --> 00:02:38,640
they actually turn out to be impossible

76
00:02:38,640 --> 00:02:40,879
to realize in the plane model when

77
00:02:40,879 --> 00:02:43,120
players don't have access to a trusted

78
00:02:43,120 --> 00:02:45,440
third party

79
00:02:45,440 --> 00:02:48,000
so an important question is can we

80
00:02:48,000 --> 00:02:50,720
achieve privacy preserving proof systems

81
00:02:50,720 --> 00:02:52,640
that are not zero knowledge would

82
00:02:52,640 --> 00:02:54,640
satisfy somewhat weaker privacy

83
00:02:54,640 --> 00:02:57,120
properties and that still suffice for

84
00:02:57,120 --> 00:02:58,400
applications

85
00:02:58,400 --> 00:03:00,800
in the plane model and without access to

86
00:03:00,800 --> 00:03:02,640
trusted setup

87
00:03:02,640 --> 00:03:04,560
there have been some positive results in

88
00:03:04,560 --> 00:03:05,840
this direction

89
00:03:05,840 --> 00:03:08,080
and starting with the work of barack

90
00:03:08,080 --> 00:03:10,800
onwardhan um who themselves built on a

91
00:03:10,800 --> 00:03:12,640
work of work in our

92
00:03:12,640 --> 00:03:14,959
uh as well as subsequent works of growth

93
00:03:14,959 --> 00:03:18,080
ostrowski sahai and bhitansky and panit

94
00:03:18,080 --> 00:03:21,040
obtained notions of non-interactive

95
00:03:21,040 --> 00:03:24,159
witness and distinguishability

96
00:03:24,159 --> 00:03:27,200
where essentially the guarantee is that

97
00:03:27,200 --> 00:03:30,799
the verifier cannot tell which of two

98
00:03:30,799 --> 00:03:35,280
witnesses was being used by the prover

99
00:03:35,360 --> 00:03:37,920
there have also been constructions of

100
00:03:37,920 --> 00:03:40,560
witness hiding arguments most recently

101
00:03:40,560 --> 00:03:42,720
by coic and alan zandri

102
00:03:42,720 --> 00:03:45,200
but these rely on non-standard

103
00:03:45,200 --> 00:03:47,280
assumptions and

104
00:03:47,280 --> 00:03:49,200
not all of them are explicit

105
00:03:49,200 --> 00:03:51,839
constructions

106
00:03:52,080 --> 00:03:54,159
as such there are major gaps in our

107
00:03:54,159 --> 00:03:56,799
understanding of

108
00:03:56,799 --> 00:03:59,280
what it is that we can achieve

109
00:03:59,280 --> 00:04:01,840
non-interactively

110
00:04:01,840 --> 00:04:03,760
what sorts of privacy guarantees are

111
00:04:03,760 --> 00:04:06,000
achievable

112
00:04:06,000 --> 00:04:09,360
from standard assumptions

113
00:04:11,920 --> 00:04:14,080
let's try to better understand what this

114
00:04:14,080 --> 00:04:16,798
gap is with the help of an example

115
00:04:16,798 --> 00:04:19,199
suppose i want to finalize a transaction

116
00:04:19,199 --> 00:04:21,279
say on the blockchain but i would like

117
00:04:21,279 --> 00:04:23,120
to keep the contents of the transaction

118
00:04:23,120 --> 00:04:24,400
hidden

119
00:04:24,400 --> 00:04:26,240
let's say i only have 10 units of

120
00:04:26,240 --> 00:04:27,759
currency in my account so the

121
00:04:27,759 --> 00:04:29,759
transaction should only go through if i

122
00:04:29,759 --> 00:04:32,000
have transferred less than 10 units to

123
00:04:32,000 --> 00:04:34,160
someone else clearly i cannot transfer

124
00:04:34,160 --> 00:04:36,400
more than i have

125
00:04:36,400 --> 00:04:37,360
now

126
00:04:37,360 --> 00:04:39,919
if i want to keep transactions encrypted

127
00:04:39,919 --> 00:04:42,400
i'd also like to be able to guarantee

128
00:04:42,400 --> 00:04:44,880
that i'm not cheating

129
00:04:44,880 --> 00:04:46,960
so i can compute an encrypted

130
00:04:46,960 --> 00:04:48,479
transaction

131
00:04:48,479 --> 00:04:50,639
um

132
00:04:50,639 --> 00:04:52,479
and then without revealing exactly how

133
00:04:52,479 --> 00:04:54,639
much money i am transferring

134
00:04:54,639 --> 00:04:57,040
prove that the amount i transferred is

135
00:04:57,040 --> 00:04:59,280
less than the total currency that i have

136
00:04:59,280 --> 00:05:01,440
in my account

137
00:05:01,440 --> 00:05:03,840
and it's a simplification of this let's

138
00:05:03,840 --> 00:05:06,000
consider approver and a verifier the

139
00:05:06,000 --> 00:05:08,000
prover encrypts a message m and would

140
00:05:08,000 --> 00:05:10,639
like to prove that the encrypted message

141
00:05:10,639 --> 00:05:12,639
is less than 10 but without revealing

142
00:05:12,639 --> 00:05:15,600
what this message is

143
00:05:17,680 --> 00:05:19,600
this is called a commit and proof

144
00:05:19,600 --> 00:05:21,919
argument and for the reason i already

145
00:05:21,919 --> 00:05:23,680
discussed we would like to be able to do

146
00:05:23,680 --> 00:05:25,520
this non-interactively

147
00:05:25,520 --> 00:05:27,600
i mentioned the word commit because this

148
00:05:27,600 --> 00:05:29,520
encryption i was talking about is not

149
00:05:29,520 --> 00:05:32,000
really the right primitive here indeed

150
00:05:32,000 --> 00:05:35,199
the functionality that we need

151
00:05:35,199 --> 00:05:37,520
a commitment allows a committer who has

152
00:05:37,520 --> 00:05:40,479
some secret input m to put this message

153
00:05:40,479 --> 00:05:43,520
m inside a box lock the box and pass it

154
00:05:43,520 --> 00:05:45,440
on to a receiver

155
00:05:45,440 --> 00:05:48,000
later the commitment can the committer

156
00:05:48,000 --> 00:05:50,240
can send a key using which the receiver

157
00:05:50,240 --> 00:05:52,479
can open this box and recover the

158
00:05:52,479 --> 00:05:53,680
message

159
00:05:53,680 --> 00:05:55,759
note that once the box is sent the

160
00:05:55,759 --> 00:05:57,680
committer cannot change the contents of

161
00:05:57,680 --> 00:06:00,080
the box can only later send a key to

162
00:06:00,080 --> 00:06:01,360
open it

163
00:06:01,360 --> 00:06:04,400
now what actually happens is that in a

164
00:06:04,400 --> 00:06:06,960
commitment

165
00:06:07,919 --> 00:06:09,840
the committer and receiver

166
00:06:09,840 --> 00:06:12,080
run a commit phase at the end of which

167
00:06:12,080 --> 00:06:14,160
they obtain a transcript

168
00:06:14,160 --> 00:06:17,280
this transcript commits uh the committer

169
00:06:17,280 --> 00:06:19,759
to a message without revealing to the

170
00:06:19,759 --> 00:06:22,479
receiver what this message is

171
00:06:22,479 --> 00:06:24,479
in the decommit phase the committer

172
00:06:24,479 --> 00:06:25,360
cannot

173
00:06:25,360 --> 00:06:27,360
later change her mind about the message

174
00:06:27,360 --> 00:06:30,080
he committed to the most she can do is

175
00:06:30,080 --> 00:06:32,639
decommit

176
00:06:33,600 --> 00:06:35,680
in a non-interactive commit and prove

177
00:06:35,680 --> 00:06:36,720
argument

178
00:06:36,720 --> 00:06:39,680
approver with input a secret message m

179
00:06:39,680 --> 00:06:41,840
and a public predicate phi

180
00:06:41,840 --> 00:06:44,240
generates a commitment to the message m

181
00:06:44,240 --> 00:06:46,479
and additionally proves that the message

182
00:06:46,479 --> 00:06:49,280
m satisfies the predicate phi

183
00:06:49,280 --> 00:06:51,520
the soundness guarantee is that if the

184
00:06:51,520 --> 00:06:54,319
verifier accepts the prover's proof

185
00:06:54,319 --> 00:06:56,400
then the commitment c is indeed a

186
00:06:56,400 --> 00:06:58,560
commitment to some message m that

187
00:06:58,560 --> 00:07:01,520
satisfies the predicate phi

188
00:07:01,520 --> 00:07:03,280
the privacy guarantee is that the

189
00:07:03,280 --> 00:07:05,919
commitment and proof together do not

190
00:07:05,919 --> 00:07:08,720
reveal the message m

191
00:07:08,720 --> 00:07:11,440
what this means is that for every

192
00:07:11,440 --> 00:07:12,560
predicate

193
00:07:12,560 --> 00:07:16,000
and every pair of messages m1 and m2

194
00:07:16,000 --> 00:07:18,880
that satisfy this predicate the output

195
00:07:18,880 --> 00:07:21,440
of the prover given the first message is

196
00:07:21,440 --> 00:07:23,280
indistinguishable from the output of the

197
00:07:23,280 --> 00:07:26,639
approver given the second message

198
00:07:26,639 --> 00:07:28,240
while this seems like a really

199
00:07:28,240 --> 00:07:30,880
fundamental and necessary privacy

200
00:07:30,880 --> 00:07:33,520
guarantee unfortunately existing

201
00:07:33,520 --> 00:07:35,280
non-interactive proof systems like

202
00:07:35,280 --> 00:07:37,919
navies and witness hiding arguments

203
00:07:37,919 --> 00:07:41,360
do not offer this guarantee

204
00:07:41,360 --> 00:07:44,639
in particular navies do not suffice

205
00:07:44,639 --> 00:07:46,960
because they do not offer any privacy

206
00:07:46,960 --> 00:07:48,960
guarantees and settings where there is a

207
00:07:48,960 --> 00:07:52,160
unique witness which is the case here

208
00:07:52,160 --> 00:07:54,240
and on the other hand witness hiding

209
00:07:54,240 --> 00:07:56,400
offers a much weaker hiding guarantee

210
00:07:56,400 --> 00:07:58,400
than the indistinguishability based

211
00:07:58,400 --> 00:08:01,440
hiding that we desire here

212
00:08:01,440 --> 00:08:03,520
moreover witness hiding is not known at

213
00:08:03,520 --> 00:08:06,400
the moment from well studied assumptions

214
00:08:06,400 --> 00:08:08,160
and so in this work we take the first

215
00:08:08,160 --> 00:08:11,360
step towards rectifying the situation

216
00:08:11,360 --> 00:08:13,919
which brings me to our results

217
00:08:13,919 --> 00:08:16,639
we introduce needy which is a new type

218
00:08:16,639 --> 00:08:19,039
of privacy preserving non-interactive

219
00:08:19,039 --> 00:08:21,599
proof system

220
00:08:21,599 --> 00:08:23,800
we construct needy based on

221
00:08:23,800 --> 00:08:26,319
indistinguishability obfuscation and

222
00:08:26,319 --> 00:08:28,800
variance of one-way functions

223
00:08:28,800 --> 00:08:30,879
and finally we show that needy can be

224
00:08:30,879 --> 00:08:33,360
used to obtain commit and proof as well

225
00:08:33,360 --> 00:08:35,760
as non-malleable commitments that are in

226
00:08:35,760 --> 00:08:39,039
some sense non-interactive

227
00:08:39,039 --> 00:08:41,679
so what do i mean by some sense

228
00:08:41,679 --> 00:08:43,360
well the interaction pattern of the

229
00:08:43,360 --> 00:08:45,279
resulting commit and proof argument is

230
00:08:45,279 --> 00:08:46,720
as follows

231
00:08:46,720 --> 00:08:49,200
the prover on input a message m and

232
00:08:49,200 --> 00:08:52,880
public predicate phi generates a sampler

233
00:08:52,880 --> 00:08:55,279
and sends it to the verifier

234
00:08:55,279 --> 00:08:58,320
the verifier given the sampler runs a

235
00:08:58,320 --> 00:09:00,720
local randomized algorithm on the

236
00:09:00,720 --> 00:09:03,360
sampler and obtains a commitment string

237
00:09:03,360 --> 00:09:05,200
c

238
00:09:05,200 --> 00:09:07,600
we have the usual completeness property

239
00:09:07,600 --> 00:09:09,440
in that

240
00:09:09,440 --> 00:09:11,279
the the commitment string c that the

241
00:09:11,279 --> 00:09:14,480
verifier obtains is indeed a commitment

242
00:09:14,480 --> 00:09:16,720
to the message that the prover intended

243
00:09:16,720 --> 00:09:20,720
to commit to with some randomness r

244
00:09:20,720 --> 00:09:22,399
the soundness property is that either

245
00:09:22,399 --> 00:09:24,320
the verifier aborts

246
00:09:24,320 --> 00:09:26,399
or when it does not abort

247
00:09:26,399 --> 00:09:29,040
the verifier obtains a commitment string

248
00:09:29,040 --> 00:09:31,360
c that is indeed a commitment to some

249
00:09:31,360 --> 00:09:32,560
message m

250
00:09:32,560 --> 00:09:36,399
that satisfies the predicate phi

251
00:09:36,399 --> 00:09:38,640
of course this this guarantee is

252
00:09:38,640 --> 00:09:40,880
randomized and holds with overwhelming

253
00:09:40,880 --> 00:09:42,640
probability over the randomness of the

254
00:09:42,640 --> 00:09:45,199
verifier

255
00:09:45,519 --> 00:09:48,000
the privacy guarantee is that for all

256
00:09:48,000 --> 00:09:50,720
pairs of messages m1 and m2 that satisfy

257
00:09:50,720 --> 00:09:52,480
the given predicate

258
00:09:52,480 --> 00:09:55,720
the sampler for m1 is computationally

259
00:09:55,720 --> 00:09:57,920
indistinguishable from the sampler for

260
00:09:57,920 --> 00:09:59,519
message m2

261
00:09:59,519 --> 00:10:02,240
in other words there is an uh there is a

262
00:10:02,240 --> 00:10:07,680
cpa style hiding of the message m

263
00:10:08,560 --> 00:10:10,079
now let me tell you a little bit about

264
00:10:10,079 --> 00:10:12,320
the techniques that go into constructing

265
00:10:12,320 --> 00:10:14,480
a non-interactive commit and proof

266
00:10:14,480 --> 00:10:16,079
argument

267
00:10:16,079 --> 00:10:18,800
indeed a needy will be nothing but an

268
00:10:18,800 --> 00:10:20,880
abstraction of these techniques into a

269
00:10:20,880 --> 00:10:22,959
clean primitive

270
00:10:22,959 --> 00:10:24,720
recall that the prover in a

271
00:10:24,720 --> 00:10:27,360
non-interactive commit and proof will

272
00:10:27,360 --> 00:10:30,800
send the verifier a sampler that encodes

273
00:10:30,800 --> 00:10:33,920
the provers secret message m and outputs

274
00:10:33,920 --> 00:10:36,079
non-interactive commitments to the

275
00:10:36,079 --> 00:10:37,839
message

276
00:10:37,839 --> 00:10:40,000
when the verifier interacts with the

277
00:10:40,000 --> 00:10:41,279
sampler

278
00:10:41,279 --> 00:10:43,120
the sampler will actually take the form

279
00:10:43,120 --> 00:10:45,360
of a circuit the circuit will have

280
00:10:45,360 --> 00:10:47,680
hardwired a key k for an appropriate

281
00:10:47,680 --> 00:10:50,079
pseudorandom function and will also have

282
00:10:50,079 --> 00:10:53,200
hardwired the provers secret message m

283
00:10:53,200 --> 00:10:55,839
on input nx this circuit will compute a

284
00:10:55,839 --> 00:10:58,839
prf and output a commitment to the

285
00:10:58,839 --> 00:11:02,079
message in order to hide the message the

286
00:11:02,079 --> 00:11:04,519
circuit will be obfuscated via an

287
00:11:04,519 --> 00:11:07,839
indistinguishability obfuscation scheme

288
00:11:07,839 --> 00:11:11,120
as such this will satisfy completeness

289
00:11:11,120 --> 00:11:12,560
and soundness

290
00:11:12,560 --> 00:11:13,760
uh sorry

291
00:11:13,760 --> 00:11:16,160
completeness and privacy

292
00:11:16,160 --> 00:11:19,600
but there is no soundness yet because a

293
00:11:19,600 --> 00:11:22,480
malicious prover could send an arbitrary

294
00:11:22,480 --> 00:11:24,480
circuit that outputs commitments to

295
00:11:24,480 --> 00:11:26,560
arbitrary messages that do not

296
00:11:26,560 --> 00:11:29,760
necessarily satisfy the predicate

297
00:11:29,760 --> 00:11:32,800
therefore in order to achieve soundness

298
00:11:32,800 --> 00:11:35,519
the circuit will actually also attach

299
00:11:35,519 --> 00:11:37,040
proofs

300
00:11:37,040 --> 00:11:41,160
to the provers commitments

301
00:11:42,640 --> 00:11:45,360
the specific proof that we will rely on

302
00:11:45,360 --> 00:11:47,680
is a two message proof of which the

303
00:11:47,680 --> 00:11:50,240
first message will be supplied as input

304
00:11:50,240 --> 00:11:52,639
to the obfuscated program c

305
00:11:52,639 --> 00:11:54,639
and the second message will be computed

306
00:11:54,639 --> 00:11:57,760
by the program itself

307
00:11:57,760 --> 00:12:00,320
the specific construction that we rely

308
00:12:00,320 --> 00:12:02,560
on is one due to pass

309
00:12:02,560 --> 00:12:05,040
where in the first message the verifier

310
00:12:05,040 --> 00:12:07,279
generates the output of a one-way

311
00:12:07,279 --> 00:12:09,120
function and this is an appropriately

312
00:12:09,120 --> 00:12:10,800
chosen one-way function

313
00:12:10,800 --> 00:12:13,440
on a random input and sends it to the

314
00:12:13,440 --> 00:12:16,000
prover and then the prover outputs a

315
00:12:16,000 --> 00:12:18,639
commitment to zero and in addition

316
00:12:18,639 --> 00:12:21,519
proves by a navy that either the

317
00:12:21,519 --> 00:12:23,360
statement that they were originally

318
00:12:23,360 --> 00:12:25,200
setting out to prove was true which in

319
00:12:25,200 --> 00:12:26,880
this case is that the message m

320
00:12:26,880 --> 00:12:28,959
satisfies phi

321
00:12:28,959 --> 00:12:29,839
or

322
00:12:29,839 --> 00:12:31,040
that

323
00:12:31,040 --> 00:12:33,760
they inverted the one-way function

324
00:12:33,760 --> 00:12:34,959
and

325
00:12:34,959 --> 00:12:38,480
managed to commit uh to the inverse of

326
00:12:38,480 --> 00:12:41,440
the one-way function

327
00:12:42,959 --> 00:12:46,399
on the value y that the verifier sent in

328
00:12:46,399 --> 00:12:48,240
the first place

329
00:12:48,240 --> 00:12:50,800
so coming back and zooming out coming

330
00:12:50,800 --> 00:12:53,040
back to our setting of commit and proof

331
00:12:53,040 --> 00:12:55,200
this obfuscated circuit that the prover

332
00:12:55,200 --> 00:12:56,079
sends

333
00:12:56,079 --> 00:12:59,839
will obtain as input a pair x and y and

334
00:12:59,839 --> 00:13:01,839
then in addition to computing a

335
00:13:01,839 --> 00:13:04,399
commitment to the message we'll output

336
00:13:04,399 --> 00:13:06,800
the second message of this

337
00:13:06,800 --> 00:13:09,839
to message proof system with respect to

338
00:13:09,839 --> 00:13:12,000
the input string one

339
00:13:12,000 --> 00:13:14,480
so the next question is why does this

340
00:13:14,480 --> 00:13:17,279
proof system hide the provers secret

341
00:13:17,279 --> 00:13:19,519
message m and why does this provide any

342
00:13:19,519 --> 00:13:22,399
privacy at all

343
00:13:22,880 --> 00:13:25,279
to understand why let's consider a

344
00:13:25,279 --> 00:13:28,399
hybrid experiment where the prover sends

345
00:13:28,399 --> 00:13:30,720
a slightly different circuit that

346
00:13:30,720 --> 00:13:33,200
instead of committing to the message m

347
00:13:33,200 --> 00:13:36,720
has an arbitrary index i hardwired in it

348
00:13:36,720 --> 00:13:39,279
and if the input y is less than the

349
00:13:39,279 --> 00:13:42,320
index i outputs a commitment to m1

350
00:13:42,320 --> 00:13:45,760
otherwise outputs a commitment to m2

351
00:13:45,760 --> 00:13:48,720
and these circuits um

352
00:13:48,720 --> 00:13:51,760
two circuits that have indices i and i

353
00:13:51,760 --> 00:13:54,079
plus one respectively will only differ

354
00:13:54,079 --> 00:13:56,480
on a single input which is y equals i

355
00:13:56,480 --> 00:13:58,959
plus one

356
00:13:59,120 --> 00:14:01,920
and so it turns out that by relying on a

357
00:14:01,920 --> 00:14:04,959
punctuable prf and indistinguishability

358
00:14:04,959 --> 00:14:07,519
obfuscation and some standard techniques

359
00:14:07,519 --> 00:14:09,360
developed in context of using

360
00:14:09,360 --> 00:14:11,920
indistinguishability obfuscation one can

361
00:14:11,920 --> 00:14:14,639
prove that these two circuits that have

362
00:14:14,639 --> 00:14:16,880
i and i plus 1 hardwired in them

363
00:14:16,880 --> 00:14:19,199
respectively are indistinguishable from

364
00:14:19,199 --> 00:14:20,639
each other

365
00:14:20,639 --> 00:14:23,040
and if one

366
00:14:23,040 --> 00:14:25,040
carries out sufficiently many hybrid

367
00:14:25,040 --> 00:14:28,160
experiments in particular

368
00:14:28,160 --> 00:14:29,920
equaling the number of possible inputs

369
00:14:29,920 --> 00:14:32,720
to these circuits then one can show that

370
00:14:32,720 --> 00:14:34,240
um

371
00:14:34,240 --> 00:14:36,480
that a circuit that always outputs

372
00:14:36,480 --> 00:14:38,480
commitments to m1 is indeed

373
00:14:38,480 --> 00:14:40,320
indistinguishable from a circuit that

374
00:14:40,320 --> 00:14:43,120
always offers commitments to m2

375
00:14:43,120 --> 00:14:45,600
this helps establish privacy as long as

376
00:14:45,600 --> 00:14:48,639
the obfuscation commitment and prf are

377
00:14:48,639 --> 00:14:51,120
at least two to the n secure and where n

378
00:14:51,120 --> 00:14:54,320
is the size of input to the program

379
00:14:54,320 --> 00:14:57,920
so in other words we need that

380
00:14:57,920 --> 00:15:00,800
if the size of inputs to this obfuscated

381
00:15:00,800 --> 00:15:04,639
circuit is n bits then the primit the

382
00:15:04,639 --> 00:15:08,639
prf the proof system the commitment and

383
00:15:08,639 --> 00:15:10,880
the obfuscation scheme themselves are

384
00:15:10,880 --> 00:15:13,440
all due to the enzyme this presents some

385
00:15:13,440 --> 00:15:15,920
challenges when proving sadness

386
00:15:15,920 --> 00:15:16,800
um

387
00:15:16,800 --> 00:15:18,800
one would like to say that because of

388
00:15:18,800 --> 00:15:21,680
soundness of the navy if the message m

389
00:15:21,680 --> 00:15:23,600
of the prover does not satisfy the

390
00:15:23,600 --> 00:15:27,519
predicate phi then their proof that the

391
00:15:27,519 --> 00:15:30,000
circuit provides will implicitly contain

392
00:15:30,000 --> 00:15:33,759
an inverse of the one-way function f

393
00:15:33,759 --> 00:15:35,839
and one may hope to try to use

394
00:15:35,839 --> 00:15:38,240
complexity leveraging to extract this

395
00:15:38,240 --> 00:15:40,880
inverse from the proof pi and derive a

396
00:15:40,880 --> 00:15:44,560
contradiction however recall that

397
00:15:44,560 --> 00:15:46,959
we needed the proof pi to be 2 to the n

398
00:15:46,959 --> 00:15:51,120
secure where n was the size of outputs

399
00:15:51,120 --> 00:15:53,120
of the one-way function

400
00:15:53,120 --> 00:15:55,199
and this in particular

401
00:15:55,199 --> 00:15:57,120
prohibits the use of complexity

402
00:15:57,120 --> 00:15:59,040
leveraging just because it's going to

403
00:15:59,040 --> 00:16:01,839
take much longer to extract the inverse

404
00:16:01,839 --> 00:16:04,160
of the one-way function from the proof

405
00:16:04,160 --> 00:16:06,320
and requires us to come up with a new

406
00:16:06,320 --> 00:16:09,360
technique our main idea is to rely on a

407
00:16:09,360 --> 00:16:11,519
different axis of hardness and in

408
00:16:11,519 --> 00:16:13,680
particular we develop a new technique

409
00:16:13,680 --> 00:16:17,360
where we rely on a non-uniform hardness

410
00:16:17,360 --> 00:16:19,360
and also at the same time achieve

411
00:16:19,360 --> 00:16:21,680
non-uniform security

412
00:16:21,680 --> 00:16:24,320
so this is all from standard assumptions

413
00:16:24,320 --> 00:16:25,759
io

414
00:16:25,759 --> 00:16:27,040
and

415
00:16:27,040 --> 00:16:29,600
non-uniform security of one-way

416
00:16:29,600 --> 00:16:32,079
functions

417
00:16:32,320 --> 00:16:34,880
and like i had mentioned previously a

418
00:16:34,880 --> 00:16:37,279
needy is simply a generalization of

419
00:16:37,279 --> 00:16:40,800
these techniques uh to encapsulate

420
00:16:40,800 --> 00:16:43,040
what you can do more generally

421
00:16:43,040 --> 00:16:46,800
uh approver that has input a language l

422
00:16:46,800 --> 00:16:49,920
and a distribution d that samples

423
00:16:49,920 --> 00:16:53,199
instances and witnesses that satisfy the

424
00:16:53,199 --> 00:16:56,079
relation corresponding to the language

425
00:16:56,079 --> 00:16:58,720
can generate a sampler

426
00:16:58,720 --> 00:17:00,959
and send it to the verifier

427
00:17:00,959 --> 00:17:03,040
in such a way that the verifier can

428
00:17:03,040 --> 00:17:05,520
interact with the sample and obtain

429
00:17:05,520 --> 00:17:08,079
samples from the language that means

430
00:17:08,079 --> 00:17:11,679
obtain instances in the language

431
00:17:11,679 --> 00:17:15,359
and be convinced that

432
00:17:15,359 --> 00:17:18,559
that indeed

433
00:17:18,559 --> 00:17:21,280
if the

434
00:17:22,720 --> 00:17:24,880
that

435
00:17:24,959 --> 00:17:27,119
if the verifier did not output bottom

436
00:17:27,119 --> 00:17:29,440
then they indeed did output an instance

437
00:17:29,440 --> 00:17:30,880
in the language

438
00:17:30,880 --> 00:17:31,679
l

439
00:17:31,679 --> 00:17:34,000
and moreover the privacy guarantee

440
00:17:34,000 --> 00:17:35,679
states that for all pairs of

441
00:17:35,679 --> 00:17:38,799
distributions um

442
00:17:38,799 --> 00:17:41,360
that sample instances that are

443
00:17:41,360 --> 00:17:42,960
indistinguishable

444
00:17:42,960 --> 00:17:45,679
we have that the sampler for the first

445
00:17:45,679 --> 00:17:48,000
distribution is indistinguishable from a

446
00:17:48,000 --> 00:17:50,480
sampler for the second

447
00:17:50,480 --> 00:17:53,120
we are also able to use the same ideas

448
00:17:53,120 --> 00:17:55,840
to build a non-malleable or cca

449
00:17:55,840 --> 00:17:58,160
commitment where the extra where the

450
00:17:58,160 --> 00:18:00,080
interaction pattern is the same as

451
00:18:00,080 --> 00:18:03,520
before in that the committer on input m

452
00:18:03,520 --> 00:18:05,679
sends a sampler to the receiver and then

453
00:18:05,679 --> 00:18:08,400
the receiver runs a randomized algorithm

454
00:18:08,400 --> 00:18:09,919
on this sampler

455
00:18:09,919 --> 00:18:11,679
on input the sampler to obtain a

456
00:18:11,679 --> 00:18:14,480
commitment string c

457
00:18:14,480 --> 00:18:16,320
in a nutshell the non-malleability

458
00:18:16,320 --> 00:18:19,039
property guarantees that

459
00:18:19,039 --> 00:18:21,600
a man in the middle that obtains a

460
00:18:21,600 --> 00:18:23,120
commitment

461
00:18:23,120 --> 00:18:26,160
from an honest committer is not going to

462
00:18:26,160 --> 00:18:29,360
be able to generate a sampler that will

463
00:18:29,360 --> 00:18:31,919
produce valid commitments

464
00:18:31,919 --> 00:18:33,200
to

465
00:18:33,200 --> 00:18:36,160
a related message

466
00:18:36,480 --> 00:18:39,039
in particular the guarantee is that the

467
00:18:39,039 --> 00:18:41,600
commitment c prime generated by the man

468
00:18:41,600 --> 00:18:43,039
in the middle

469
00:18:43,039 --> 00:18:45,200
is going to be a commitment to some x

470
00:18:45,200 --> 00:18:48,080
that is independent of the input m of

471
00:18:48,080 --> 00:18:51,199
the honest committer

472
00:18:51,679 --> 00:18:53,760
the reason that needs help in this

473
00:18:53,760 --> 00:18:56,640
setting is that existing non-interactive

474
00:18:56,640 --> 00:18:58,559
cca commitments or non-malleable

475
00:18:58,559 --> 00:19:00,640
commitments have an important tag

476
00:19:00,640 --> 00:19:03,760
amplification component that requires a

477
00:19:03,760 --> 00:19:05,679
commit and proof mechanism

478
00:19:05,679 --> 00:19:07,760
where the committer commits to the same

479
00:19:07,760 --> 00:19:10,640
message many times and must prove that

480
00:19:10,640 --> 00:19:13,120
all commitments are to the same message

481
00:19:13,120 --> 00:19:15,360
and this is exactly where a needy turns

482
00:19:15,360 --> 00:19:17,919
out to be helpful and allows the

483
00:19:17,919 --> 00:19:20,880
committer to do uh to run this process

484
00:19:20,880 --> 00:19:25,640
of tag amplification non-interactively

485
00:19:26,000 --> 00:19:29,039
in summary in this work we build an idi

486
00:19:29,039 --> 00:19:31,600
which is a new non-interactive privacy

487
00:19:31,600 --> 00:19:33,600
preserving proof system that is

488
00:19:33,600 --> 00:19:35,760
applicable in settings where statements

489
00:19:35,760 --> 00:19:38,880
being proven have unique witnesses

490
00:19:38,880 --> 00:19:41,039
and very roughly it guarantees that when

491
00:19:41,039 --> 00:19:42,960
two statements are indistinguishable

492
00:19:42,960 --> 00:19:44,880
then so are the statement plus proof

493
00:19:44,880 --> 00:19:46,240
combinations

494
00:19:46,240 --> 00:19:48,799
this privacy guarantee is morally quite

495
00:19:48,799 --> 00:19:51,200
similar to what strong witness and

496
00:19:51,200 --> 00:19:53,360
distinguishability which is a notion

497
00:19:53,360 --> 00:19:55,440
that's different from regular witness

498
00:19:55,440 --> 00:19:58,480
and distinguishability gives us however

499
00:19:58,480 --> 00:20:01,120
the completeness properties of an idi

500
00:20:01,120 --> 00:20:03,840
are different in that the prover cannot

501
00:20:03,840 --> 00:20:07,840
really control the exact

502
00:20:08,000 --> 00:20:10,559
sample or in our examples the exact

503
00:20:10,559 --> 00:20:13,679
commitment string that the verify would

504
00:20:13,679 --> 00:20:16,000
end up with and the prover can own all

505
00:20:16,000 --> 00:20:17,440
that the approver can do is send a

506
00:20:17,440 --> 00:20:19,760
sampler that outputs a randomized

507
00:20:19,760 --> 00:20:22,158
commitment

508
00:20:22,799 --> 00:20:24,400
and we show in this work that these

509
00:20:24,400 --> 00:20:26,159
techniques have applications to commit

510
00:20:26,159 --> 00:20:28,400
and proof arguments as well as to cca

511
00:20:28,400 --> 00:20:30,960
commitments and we believe that this

512
00:20:30,960 --> 00:20:33,520
notion of a needy may find other

513
00:20:33,520 --> 00:20:36,320
applications in settings where one needs

514
00:20:36,320 --> 00:20:38,200
to prove something

515
00:20:38,200 --> 00:20:40,400
non-interactively while still giving

516
00:20:40,400 --> 00:20:43,760
strong privacy guarantees

517
00:20:43,840 --> 00:20:45,679
that concludes my talk

518
00:20:45,679 --> 00:20:49,159
thank you for listening

