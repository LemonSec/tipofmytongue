1
00:00:00,080 --> 00:00:02,560
hi my name is pratish datta i am a

2
00:00:02,560 --> 00:00:05,200
research scientist at entity research

3
00:00:05,200 --> 00:00:06,720
i will be presenting the paper

4
00:00:06,720 --> 00:00:09,280
decentralized multi-authority abe for

5
00:00:09,280 --> 00:00:12,160
dnas from lwe which is my joint work

6
00:00:12,160 --> 00:00:14,920
with my co-authors ilan komargotsky and

7
00:00:14,920 --> 00:00:17,440
brentwaters attribute based encryption

8
00:00:17,440 --> 00:00:19,920
or abe for short is an advanced variant

9
00:00:19,920 --> 00:00:23,119
of public encryption in case of abe a

10
00:00:23,119 --> 00:00:26,240
secret key allows the decryption of

11
00:00:26,240 --> 00:00:29,439
ciphertext if and only if some access

12
00:00:29,439 --> 00:00:32,000
policy is satisfied by some set of

13
00:00:32,000 --> 00:00:33,280
attributes

14
00:00:33,280 --> 00:00:35,760
abe has two flavors namely key policy

15
00:00:35,760 --> 00:00:37,840
and scientist policy in the key policy

16
00:00:37,840 --> 00:00:39,840
setting a secret key is associated with

17
00:00:39,840 --> 00:00:41,600
the policy and the ciphertext is

18
00:00:41,600 --> 00:00:43,600
associated with the set of attributes

19
00:00:43,600 --> 00:00:45,440
and for the ciphertext policy the roles

20
00:00:45,440 --> 00:00:47,920
of the policy and the attribute are

21
00:00:47,920 --> 00:00:50,399
switched

22
00:00:50,480 --> 00:00:52,000
so in more detail

23
00:00:52,000 --> 00:00:54,719
the syntax of abe as follows there is a

24
00:00:54,719 --> 00:00:56,879
central authority who

25
00:00:56,879 --> 00:00:59,280
runs a setup algorithm to publish a

26
00:00:59,280 --> 00:01:02,239
master public key pk and keeps the

27
00:01:02,239 --> 00:01:04,239
corresponding master secret kmsk to

28
00:01:04,239 --> 00:01:05,280
itself

29
00:01:05,280 --> 00:01:07,040
then there is a keygen algorithm which

30
00:01:07,040 --> 00:01:09,119
is also run by the central authorities

31
00:01:09,119 --> 00:01:12,000
in case of key policy it takes us input

32
00:01:12,000 --> 00:01:14,240
a policy f and for cipher text policy it

33
00:01:14,240 --> 00:01:16,479
takes us input attribute set u and both

34
00:01:16,479 --> 00:01:19,759
cases it outputs a user secret key sk

35
00:01:19,759 --> 00:01:21,680
then there is an encryption algorithm

36
00:01:21,680 --> 00:01:23,600
which can be run by any party in the

37
00:01:23,600 --> 00:01:26,640
system to encrypt some message mst under

38
00:01:26,640 --> 00:01:28,640
the master public key in case of key

39
00:01:28,640 --> 00:01:30,640
policy the encryption is done with

40
00:01:30,640 --> 00:01:32,560
respect to some attributes at u and for

41
00:01:32,560 --> 00:01:34,640
ciphertext policy it's done with respect

42
00:01:34,640 --> 00:01:37,119
to some policy f

43
00:01:37,119 --> 00:01:39,119
there is a decryption algorithm a user

44
00:01:39,119 --> 00:01:41,119
processing a secret key can take a

45
00:01:41,119 --> 00:01:44,240
ciphertext and can decrypt to reveal

46
00:01:44,240 --> 00:01:45,360
something

47
00:01:45,360 --> 00:01:47,040
the correctness says that if the

48
00:01:47,040 --> 00:01:48,960
associated policy is satisfied by the

49
00:01:48,960 --> 00:01:51,520
associated set of attributes then

50
00:01:51,520 --> 00:01:53,439
this decrypt is something should be

51
00:01:53,439 --> 00:01:56,159
actually the encrypted message and if

52
00:01:56,159 --> 00:01:58,960
the policy is not satisfied then the

53
00:01:58,960 --> 00:02:00,320
encrypted message should remain

54
00:02:00,320 --> 00:02:02,880
completely hidden even against the

55
00:02:02,880 --> 00:02:07,360
collusion of several users in the system

56
00:02:07,360 --> 00:02:10,160
in case of abe by this time we have a

57
00:02:10,160 --> 00:02:12,640
long sequence of exciting works which

58
00:02:12,640 --> 00:02:14,959
has achieved great milestones both in

59
00:02:14,959 --> 00:02:16,560
the key policy and in the ciphertext

60
00:02:16,560 --> 00:02:18,720
policy setting in the key policy

61
00:02:18,720 --> 00:02:20,400
starting with the initial works of

62
00:02:20,400 --> 00:02:23,200
science water co5 and gold panda is high

63
00:02:23,200 --> 00:02:26,080
waters 0 6 and so on and in the

64
00:02:26,080 --> 00:02:27,360
ciphertext policy starting with the

65
00:02:27,360 --> 00:02:29,840
walls of betham course high water 07

66
00:02:29,840 --> 00:02:32,160
followed by waters 11 and so on in all

67
00:02:32,160 --> 00:02:34,080
these works we were able to

68
00:02:34,080 --> 00:02:36,400
progressively achieve highly expressive

69
00:02:36,400 --> 00:02:40,879
access policies such as nc1 or dfas and

70
00:02:40,879 --> 00:02:44,000
also strong adaptive security and

71
00:02:44,000 --> 00:02:47,360
very good ciphertext and key sizes but

72
00:02:47,360 --> 00:02:49,200
all these constructions are in the

73
00:02:49,200 --> 00:02:51,760
bilinear map setting

74
00:02:51,760 --> 00:02:53,599
so we can safely say that in the

75
00:02:53,599 --> 00:02:56,000
bilinear map setting there is little

76
00:02:56,000 --> 00:02:57,920
gaps between the key policy and the

77
00:02:57,920 --> 00:03:00,159
ciphertext policy constructions however

78
00:03:00,159 --> 00:03:02,000
in the non-bilinear map setting for

79
00:03:02,000 --> 00:03:04,640
instance in that lattice or lw based

80
00:03:04,640 --> 00:03:06,560
setting the situation is completely

81
00:03:06,560 --> 00:03:09,280
different here we are interested in

82
00:03:09,280 --> 00:03:11,760
non-bilinear map setting and especially

83
00:03:11,760 --> 00:03:14,000
for the lw setting for two reasons

84
00:03:14,000 --> 00:03:17,120
firstly if we can create a scheme under

85
00:03:17,120 --> 00:03:18,800
various assumption it naturally

86
00:03:18,800 --> 00:03:20,640
increases the confidence in that

87
00:03:20,640 --> 00:03:23,519
primitive and secondly we are actually

88
00:03:23,519 --> 00:03:25,680
interested in a post quantum secure

89
00:03:25,680 --> 00:03:27,599
scheme and since lwe is believed to be

90
00:03:27,599 --> 00:03:29,680
post quantum secure so we are interested

91
00:03:29,680 --> 00:03:32,879
in lw based schemes here in the lw based

92
00:03:32,879 --> 00:03:35,840
setting we have the squares of gbw 13

93
00:03:35,840 --> 00:03:38,080
bgt plus 14 which are in the key policy

94
00:03:38,080 --> 00:03:39,680
setting and they were able to actually

95
00:03:39,680 --> 00:03:42,799
achieve all circuits as policies and

96
00:03:42,799 --> 00:03:45,120
also they were able to achieve very good

97
00:03:45,120 --> 00:03:49,200
parameters for ciphertext and key sizes

98
00:03:49,200 --> 00:03:51,760
however in case of ciphertext policy

99
00:03:51,760 --> 00:03:54,400
setting for the lw based regime the

100
00:03:54,400 --> 00:03:56,239
situation is

101
00:03:56,239 --> 00:03:57,680
quite worse

102
00:03:57,680 --> 00:04:00,480
for instance until very recently the

103
00:04:00,480 --> 00:04:04,480
only known way to get an lw base cp abe

104
00:04:04,480 --> 00:04:06,480
is via an universal circuit based

105
00:04:06,480 --> 00:04:08,920
generic transformation proposed in

106
00:04:08,920 --> 00:04:10,560
gpsw08

107
00:04:10,560 --> 00:04:13,200
however this transformation would result

108
00:04:13,200 --> 00:04:16,720
in schemes with very bad parameters for

109
00:04:16,720 --> 00:04:19,358
ciphertext and key sizes and also it

110
00:04:19,358 --> 00:04:21,519
requires setting an upper bound on the

111
00:04:21,519 --> 00:04:24,720
policy size allowed in the system

112
00:04:24,720 --> 00:04:26,560
and then the ciphertext and key sizes

113
00:04:26,560 --> 00:04:29,040
both scale with that upper bound which

114
00:04:29,040 --> 00:04:30,639
is really bad

115
00:04:30,639 --> 00:04:32,560
recently there have been some exciting

116
00:04:32,560 --> 00:04:35,360
attempts by agarwal and yamada into the

117
00:04:35,360 --> 00:04:36,400
problem

118
00:04:36,400 --> 00:04:38,320
in one of their scheme they were able to

119
00:04:38,320 --> 00:04:41,840
remove this upper bound restriction but

120
00:04:41,840 --> 00:04:44,479
that scheme do require bilinear maps

121
00:04:44,479 --> 00:04:47,199
along with lwe and in another scheme

122
00:04:47,199 --> 00:04:49,440
they were able to achieve the ideal

123
00:04:49,440 --> 00:04:52,080
ciphertext and key size parameters but

124
00:04:52,080 --> 00:04:54,639
they still require that upper bound on

125
00:04:54,639 --> 00:04:56,880
the policy size so

126
00:04:56,880 --> 00:04:57,680
the

127
00:04:57,680 --> 00:04:59,280
problem of

128
00:04:59,280 --> 00:05:03,199
constructing cpa be under lwe that does

129
00:05:03,199 --> 00:05:05,199
not require the upper bound and at the

130
00:05:05,199 --> 00:05:07,600
same time achieves ideal parameters for

131
00:05:07,600 --> 00:05:09,919
ciphertext and key sizes is essentially

132
00:05:09,919 --> 00:05:13,120
open that means there is a wide gap

133
00:05:13,120 --> 00:05:14,479
between the key policy and the

134
00:05:14,479 --> 00:05:16,960
ciphertext policy setting under the lw

135
00:05:16,960 --> 00:05:19,280
world

136
00:05:19,360 --> 00:05:21,280
will now turn our attention into an

137
00:05:21,280 --> 00:05:23,440
extended version of ape which is called

138
00:05:23,440 --> 00:05:27,440
multi-authority abe or maabe in short

139
00:05:27,440 --> 00:05:29,919
as we mentioned in case of abe there is

140
00:05:29,919 --> 00:05:31,600
a central authority that holds the

141
00:05:31,600 --> 00:05:34,960
master secret key and is responsible for

142
00:05:34,960 --> 00:05:37,280
verifying the attributes of all the

143
00:05:37,280 --> 00:05:39,919
users and issuing secret keys to them

144
00:05:39,919 --> 00:05:42,160
however in reality there is no single

145
00:05:42,160 --> 00:05:44,000
authority who controls all the

146
00:05:44,000 --> 00:05:46,240
attributes rather there are several

147
00:05:46,240 --> 00:05:48,080
authorities which controls different

148
00:05:48,080 --> 00:05:51,280
attributes for instance the dmp offices

149
00:05:51,280 --> 00:05:53,039
control the attributes for driving

150
00:05:53,039 --> 00:05:55,360
license universities controls attributes

151
00:05:55,360 --> 00:05:58,000
of phd and military controls attributes

152
00:05:58,000 --> 00:06:00,639
for being a veteran

153
00:06:00,639 --> 00:06:02,960
in order to handle such distributed

154
00:06:02,960 --> 00:06:05,520
nature of attribute possession this

155
00:06:05,520 --> 00:06:08,240
maabe primitive were introduced in the

156
00:06:08,240 --> 00:06:10,880
literature and studied in the works of

157
00:06:10,880 --> 00:06:16,160
chase 07 lw 11 ot 13 and so on

158
00:06:16,160 --> 00:06:18,240
in an maape

159
00:06:18,240 --> 00:06:20,400
any party can become an authority at any

160
00:06:20,400 --> 00:06:22,400
point of time and there is no

161
00:06:22,400 --> 00:06:24,240
coordination required

162
00:06:24,240 --> 00:06:26,560
with any other party except the

163
00:06:26,560 --> 00:06:29,120
generation of a global public parameters

164
00:06:29,120 --> 00:06:30,800
that is available to all the parties in

165
00:06:30,800 --> 00:06:32,960
the system the different authorities

166
00:06:32,960 --> 00:06:34,800
would control different attributes in

167
00:06:34,800 --> 00:06:37,759
the system and there will be no bound on

168
00:06:37,759 --> 00:06:39,840
the number of authorities that can ever

169
00:06:39,840 --> 00:06:41,440
come into existence during the lifetime

170
00:06:41,440 --> 00:06:43,600
of the system and all the authorities

171
00:06:43,600 --> 00:06:45,280
will be able to issue

172
00:06:45,280 --> 00:06:48,720
secret keys to users for attributes

173
00:06:48,720 --> 00:06:50,479
under their control without any

174
00:06:50,479 --> 00:06:52,720
coordination with any other authority in

175
00:06:52,720 --> 00:06:53,919
the system

176
00:06:53,919 --> 00:06:56,319
let's consider an example suppose there

177
00:06:56,319 --> 00:06:58,080
are three authorities in the system one

178
00:06:58,080 --> 00:07:00,240
is tmp one is the university and another

179
00:07:00,240 --> 00:07:02,000
one is a military and then there are

180
00:07:02,000 --> 00:07:04,400
three users in the system the first one

181
00:07:04,400 --> 00:07:07,280
gets a key from dmv for driving license

182
00:07:07,280 --> 00:07:08,960
then the second and third one both of

183
00:07:08,960 --> 00:07:11,280
whom have phd gets the corresponding

184
00:07:11,280 --> 00:07:13,440
keys from the university and the third

185
00:07:13,440 --> 00:07:15,840
gets a key for veteran from the military

186
00:07:15,840 --> 00:07:18,400
now consider this another guy who wants

187
00:07:18,400 --> 00:07:20,880
to encrypt two messages one is high

188
00:07:20,880 --> 00:07:23,440
another one is buy so it encrypts high

189
00:07:23,440 --> 00:07:25,120
under the policy phd and driver's

190
00:07:25,120 --> 00:07:27,120
license and it increased by under the

191
00:07:27,120 --> 00:07:30,000
policy phd and veteran now obviously

192
00:07:30,000 --> 00:07:32,319
that the third has both the attributes

193
00:07:32,319 --> 00:07:34,400
phd and veteran would be able to decrypt

194
00:07:34,400 --> 00:07:36,960
the site text city 2

195
00:07:36,960 --> 00:07:38,960
this is the correctness of the scheme

196
00:07:38,960 --> 00:07:42,400
but since none of the users has the

197
00:07:42,400 --> 00:07:45,919
attribute for both phd and ios license

198
00:07:45,919 --> 00:07:47,360
none of them would be able to decrypt

199
00:07:47,360 --> 00:07:50,080
the ciphertext ct1 which is actually the

200
00:07:50,080 --> 00:07:51,919
collision resistance that is required

201
00:07:51,919 --> 00:07:53,919
from the mmep scheme

202
00:07:53,919 --> 00:07:56,879
the question is how an user in the

203
00:07:56,879 --> 00:07:59,199
system can be uniquely identified

204
00:07:59,199 --> 00:08:01,759
because there are different authorities

205
00:08:01,759 --> 00:08:04,240
so if we cannot identify a user in the

206
00:08:04,240 --> 00:08:07,039
system uniquely so it may happen that

207
00:08:07,039 --> 00:08:09,039
the user can pretend to be a different

208
00:08:09,039 --> 00:08:11,039
user to different authorities and is

209
00:08:11,039 --> 00:08:13,759
successful in getting keys for

210
00:08:13,759 --> 00:08:16,160
attributes which it does not even

211
00:08:16,160 --> 00:08:17,280
possess

212
00:08:17,280 --> 00:08:20,000
in order to handle this a model called a

213
00:08:20,000 --> 00:08:22,400
global identifier or gid model is

214
00:08:22,400 --> 00:08:24,080
considered in the literature in this

215
00:08:24,080 --> 00:08:27,759
model each user is assigned a globally

216
00:08:27,759 --> 00:08:30,560
verifiable identifier this

217
00:08:30,560 --> 00:08:32,880
global identifier of the users would

218
00:08:32,880 --> 00:08:35,120
remain the same for the entire lifetime

219
00:08:35,120 --> 00:08:37,120
of the system and the users would not

220
00:08:37,120 --> 00:08:39,440
have any freedom to choose their global

221
00:08:39,440 --> 00:08:41,760
identifiers on their own for instance

222
00:08:41,760 --> 00:08:43,679
you can consider the social security

223
00:08:43,679 --> 00:08:46,000
number as the global identifier of an

224
00:08:46,000 --> 00:08:47,120
user

225
00:08:47,120 --> 00:08:49,440
here we would consider one attribute per

226
00:08:49,440 --> 00:08:53,279
authority the syntax of an maabe is as

227
00:08:53,279 --> 00:08:55,200
follows

228
00:08:55,200 --> 00:08:57,839
there is a global setup algorithm which

229
00:08:57,839 --> 00:09:01,360
outputs a global public parameter gp

230
00:09:01,360 --> 00:09:02,880
then there is an authority setup

231
00:09:02,880 --> 00:09:05,279
algorithm which is run by a party when

232
00:09:05,279 --> 00:09:08,480
appearing as an authority it runs this

233
00:09:08,480 --> 00:09:10,399
algorithm on input the global public

234
00:09:10,399 --> 00:09:12,480
parameter and for the attribute that it

235
00:09:12,480 --> 00:09:15,120
would control and it outputs a public

236
00:09:15,120 --> 00:09:17,360
key pku for that attribute which it

237
00:09:17,360 --> 00:09:19,680
publishes it keeps the corresponding

238
00:09:19,680 --> 00:09:22,399
master secret key msku to itself

239
00:09:22,399 --> 00:09:24,480
now in order to generate a key for a

240
00:09:24,480 --> 00:09:27,440
user with gloria and different gid and

241
00:09:27,440 --> 00:09:29,760
for the attribute u it would run the

242
00:09:29,760 --> 00:09:32,000
keygen algorithm and generates a secret

243
00:09:32,000 --> 00:09:34,480
key that is associated with gid and u

244
00:09:34,480 --> 00:09:36,720
and gives it to the user

245
00:09:36,720 --> 00:09:38,240
now there is encryption algorithm which

246
00:09:38,240 --> 00:09:39,600
is basically the same as the encryption

247
00:09:39,600 --> 00:09:42,560
algorithm for abe anybody can encrypt a

248
00:09:42,560 --> 00:09:45,839
message under some policy f by taking as

249
00:09:45,839 --> 00:09:48,240
input all the authority public keys that

250
00:09:48,240 --> 00:09:50,399
features in the policy and the global

251
00:09:50,399 --> 00:09:51,760
public parameters to generate a

252
00:09:51,760 --> 00:09:53,040
ciphertext

253
00:09:53,040 --> 00:09:55,120
and there is a decryption algorithm by

254
00:09:55,120 --> 00:09:59,279
which a user can decrypt a site text

255
00:09:59,279 --> 00:10:02,079
by accumulating the different keys for

256
00:10:02,079 --> 00:10:03,760
the different attributes it obtained

257
00:10:03,760 --> 00:10:05,440
from the different authorities note that

258
00:10:05,440 --> 00:10:06,800
all the secret keys has to be with

259
00:10:06,800 --> 00:10:09,120
respect to the same global identifier

260
00:10:09,120 --> 00:10:11,600
gid or that means for the same user

261
00:10:11,600 --> 00:10:13,680
and it decrypts something

262
00:10:13,680 --> 00:10:15,440
the correctness says that if the policy

263
00:10:15,440 --> 00:10:17,040
is satisfied this decrypted something

264
00:10:17,040 --> 00:10:18,320
should be the same as the encrypted

265
00:10:18,320 --> 00:10:20,480
message and if the policy is not

266
00:10:20,480 --> 00:10:22,160
satisfied then the encrypted message

267
00:10:22,160 --> 00:10:24,480
should remain hidden and here the

268
00:10:24,480 --> 00:10:27,360
collusion among the users along with

269
00:10:27,360 --> 00:10:31,120
some corrupt authorities is allowed

270
00:10:31,120 --> 00:10:33,200
we will now highlight the main works

271
00:10:33,200 --> 00:10:35,279
that are available in the literature

272
00:10:35,279 --> 00:10:37,440
before this work one is very celebrated

273
00:10:37,440 --> 00:10:39,519
result by leuko and waters who

274
00:10:39,519 --> 00:10:42,079
constructed a scheme for nc one achieves

275
00:10:42,079 --> 00:10:44,000
adaptive security under the subgroup

276
00:10:44,000 --> 00:10:45,600
disassumption in composite order by

277
00:10:45,600 --> 00:10:47,920
linear groups then later okamata and

278
00:10:47,920 --> 00:10:49,600
takashima transferred to the prime order

279
00:10:49,600 --> 00:10:51,600
setting and achieves the security under

280
00:10:51,600 --> 00:10:54,160
the dealing assumption then in 2015

281
00:10:54,160 --> 00:10:56,959
industries and waters presented another

282
00:10:56,959 --> 00:10:59,600
scheme for nc1

283
00:10:59,600 --> 00:11:02,079
which achieves only static security

284
00:11:02,079 --> 00:11:03,920
under q type assumption but the

285
00:11:03,920 --> 00:11:05,600
advantage of the scheme over the

286
00:11:05,600 --> 00:11:08,560
previous two scheme is that here the

287
00:11:08,560 --> 00:11:10,640
number of attributes per authority is

288
00:11:10,640 --> 00:11:12,880
essentially unbounded importantly all

289
00:11:12,880 --> 00:11:15,760
those schemes are in the gid model and

290
00:11:15,760 --> 00:11:17,680
relies on random oracle for their

291
00:11:17,680 --> 00:11:20,160
security

292
00:11:20,160 --> 00:11:22,480
this is the scheme that we got

293
00:11:22,480 --> 00:11:25,440
we were able to design a scheme for dnf

294
00:11:25,440 --> 00:11:27,600
under the library assumption and it

295
00:11:27,600 --> 00:11:29,360
achieves the static security same as the

296
00:11:29,360 --> 00:11:31,360
raps lucky's water scheme

297
00:11:31,360 --> 00:11:33,519
here we were able to allow a bounded

298
00:11:33,519 --> 00:11:35,680
number of attributes for authority so

299
00:11:35,680 --> 00:11:38,079
our main result in this work is as

300
00:11:38,079 --> 00:11:40,720
follows we've shown that there exists a

301
00:11:40,720 --> 00:11:43,519
multi-authority abe scheme in the gid

302
00:11:43,519 --> 00:11:44,480
model

303
00:11:44,480 --> 00:11:48,320
for access policies represented as dnfs

304
00:11:48,320 --> 00:11:50,000
that is secured

305
00:11:50,000 --> 00:11:51,680
against an arbitrary collusion of

306
00:11:51,680 --> 00:11:53,680
parties in the random oracle model and

307
00:11:53,680 --> 00:11:56,880
assuming the lwe assumption

308
00:11:56,880 --> 00:11:59,920
so dnfs as we know is the or of ands and

309
00:11:59,920 --> 00:12:02,079
the nwa assumption that we require for

310
00:12:02,079 --> 00:12:04,240
this work is actually the sub

311
00:12:04,240 --> 00:12:07,279
exponential modulus to noise ratio one

312
00:12:07,279 --> 00:12:09,519
we now highlight what are the main

313
00:12:09,519 --> 00:12:11,600
challenges in constructing the

314
00:12:11,600 --> 00:12:14,079
multi-authority aba scheme

315
00:12:14,079 --> 00:12:16,160
in case of abe

316
00:12:16,160 --> 00:12:18,160
a central authority

317
00:12:18,160 --> 00:12:21,360
provides keys to individuals for all the

318
00:12:21,360 --> 00:12:24,480
attributes in their position in order to

319
00:12:24,480 --> 00:12:27,200
achieve collusion resistance a fresh

320
00:12:27,200 --> 00:12:31,120
randomness is used to tie together the

321
00:12:31,120 --> 00:12:33,200
different key components that is

322
00:12:33,200 --> 00:12:35,200
specific to a user

323
00:12:35,200 --> 00:12:37,200
it is required that the different key

324
00:12:37,200 --> 00:12:39,680
components that is issued to a user

325
00:12:39,680 --> 00:12:41,760
would be compatible within themselves

326
00:12:41,760 --> 00:12:43,600
but should not be compatible with the

327
00:12:43,600 --> 00:12:46,000
key components of another user

328
00:12:46,000 --> 00:12:48,560
now in a multi-authority setting there

329
00:12:48,560 --> 00:12:50,480
is no central authority instead there

330
00:12:50,480 --> 00:12:53,760
are several authorities then how to get

331
00:12:53,760 --> 00:12:56,720
this same randomness for tying together

332
00:12:56,720 --> 00:12:58,880
different key components the randomness

333
00:12:58,880 --> 00:13:01,200
to tie together different key components

334
00:13:01,200 --> 00:13:04,959
is obtained by applying a hash function

335
00:13:04,959 --> 00:13:08,399
h on the global identifier of the user

336
00:13:08,399 --> 00:13:10,880
it means basically that this randomness

337
00:13:10,880 --> 00:13:13,760
should be public or publicly computable

338
00:13:13,760 --> 00:13:16,959
unfortunately all the existing lwbs cpap

339
00:13:16,959 --> 00:13:19,200
schemes fail to achieve this public

340
00:13:19,200 --> 00:13:20,959
random net feature so they cannot be

341
00:13:20,959 --> 00:13:23,600
readily extended to the maabe setting

342
00:13:23,600 --> 00:13:26,480
the second challenge is that as we said

343
00:13:26,480 --> 00:13:29,360
that in an maabe any party can be able

344
00:13:29,360 --> 00:13:32,000
to become an authority on the fly so

345
00:13:32,000 --> 00:13:34,399
that means master public key and the

346
00:13:34,399 --> 00:13:36,639
user secret keys should have some

347
00:13:36,639 --> 00:13:39,120
piecewise structure which would consist

348
00:13:39,120 --> 00:13:42,480
of pieces where each piece is associated

349
00:13:42,480 --> 00:13:45,440
with one attribute in the system just as

350
00:13:45,440 --> 00:13:47,440
the previous property

351
00:13:47,440 --> 00:13:50,800
all the existing lwe based cpmb schemes

352
00:13:50,800 --> 00:13:52,160
currently

353
00:13:52,160 --> 00:13:55,680
fails to achieve this property as well

354
00:13:55,680 --> 00:13:58,320
in this work we make use of linear

355
00:13:58,320 --> 00:14:00,320
secret sharing schemes

356
00:14:00,320 --> 00:14:04,399
for representing our access policies

357
00:14:04,399 --> 00:14:06,399
as we all know a secret sharing scheme

358
00:14:06,399 --> 00:14:08,639
is a scheme by which it is possible to

359
00:14:08,639 --> 00:14:11,279
distribute some secret among a set of

360
00:14:11,279 --> 00:14:13,279
parties such that certain designated

361
00:14:13,279 --> 00:14:15,519
subset of the parties would be able to

362
00:14:15,519 --> 00:14:19,040
recover that secret while others can't

363
00:14:19,040 --> 00:14:21,040
a linear secret sharing scheme is a

364
00:14:21,040 --> 00:14:23,279
special type of secret sharing scheme

365
00:14:23,279 --> 00:14:24,880
where the shared generation and the

366
00:14:24,880 --> 00:14:27,519
reconstruction processes are linear

367
00:14:27,519 --> 00:14:30,880
a linear secret sharing scheme or lss

368
00:14:30,880 --> 00:14:32,720
is actually equivalent to another

369
00:14:32,720 --> 00:14:35,120
computational model which is called a

370
00:14:35,120 --> 00:14:36,800
span program a span program is

371
00:14:36,800 --> 00:14:39,920
represented by some matrix m and some

372
00:14:39,920 --> 00:14:43,680
function rho the matrix m is a matrix of

373
00:14:43,680 --> 00:14:46,399
some dimension l by s over some finite

374
00:14:46,399 --> 00:14:48,800
field c q and rho is a function which

375
00:14:48,800 --> 00:14:51,279
labels each two of this matrix with

376
00:14:51,279 --> 00:14:53,839
either only the set of parties in case

377
00:14:53,839 --> 00:14:57,360
of monotony lss while the set of parties

378
00:14:57,360 --> 00:14:59,760
union the negation of the set of parties

379
00:14:59,760 --> 00:15:02,240
in case of non-motor lss

380
00:15:02,240 --> 00:15:05,600
the lss that we use in this work

381
00:15:05,600 --> 00:15:08,240
requires two special properties firstly

382
00:15:08,240 --> 00:15:10,320
the reconstruction coefficient should be

383
00:15:10,320 --> 00:15:13,360
small for instance coming from the set 0

384
00:15:13,360 --> 00:15:14,160
1

385
00:15:14,160 --> 00:15:16,560
and the second property is the linear

386
00:15:16,560 --> 00:15:19,120
independence property which states that

387
00:15:19,120 --> 00:15:21,839
any unauthorized subset of rows of the

388
00:15:21,839 --> 00:15:24,240
shear generating matrix should be

389
00:15:24,240 --> 00:15:27,519
linearly independent among themselves

390
00:15:27,519 --> 00:15:30,320
there was already such a non-monotone

391
00:15:30,320 --> 00:15:31,600
lss

392
00:15:31,600 --> 00:15:34,399
for block space implicit in the work of

393
00:15:34,399 --> 00:15:36,079
gpw13

394
00:15:36,079 --> 00:15:38,480
this has been pointed out to us after

395
00:15:38,480 --> 00:15:41,839
the publication of our paper on a print

396
00:15:41,839 --> 00:15:44,160
however in this work we also present an

397
00:15:44,160 --> 00:15:47,040
independent non-monotone lss with those

398
00:15:47,040 --> 00:15:50,079
same properties for nc1

399
00:15:50,079 --> 00:15:53,680
there is also such a monotone lss

400
00:15:53,680 --> 00:15:56,959
for the policy class dnfs that has been

401
00:15:56,959 --> 00:15:59,920
proposed in the works of agrawal at all

402
00:15:59,920 --> 00:16:02,800
and luca waters 11 and we have to use

403
00:16:02,800 --> 00:16:05,680
both one motor and monotone lss in this

404
00:16:05,680 --> 00:16:09,839
one as we will see shortly

405
00:16:10,480 --> 00:16:13,440
so currently one open problem is how to

406
00:16:13,440 --> 00:16:16,720
get a monotone lss with the two

407
00:16:16,720 --> 00:16:19,920
properties required for our work for the

408
00:16:19,920 --> 00:16:22,480
policy class more than dnfs that is for

409
00:16:22,480 --> 00:16:25,519
instance maybe for nc one or more here i

410
00:16:25,519 --> 00:16:27,759
would like to mention one point the only

411
00:16:27,759 --> 00:16:29,519
reason that we get

412
00:16:29,519 --> 00:16:33,440
our maabe for dnfs is actually that

413
00:16:33,440 --> 00:16:35,440
currently we don't know

414
00:16:35,440 --> 00:16:38,480
some monotone lss with its two

415
00:16:38,480 --> 00:16:41,279
properties for some policy class more

416
00:16:41,279 --> 00:16:44,000
than dnas so if in future we get such a

417
00:16:44,000 --> 00:16:46,880
scheme then our maape would be directly

418
00:16:46,880 --> 00:16:49,759
translated to that policy class for

419
00:16:49,759 --> 00:16:53,519
which we would get that lss

420
00:16:53,519 --> 00:16:54,639
this is the

421
00:16:54,639 --> 00:16:57,839
roadmap of our work we first start with

422
00:16:57,839 --> 00:17:00,560
a non-monotone lss with the small

423
00:17:00,560 --> 00:17:02,240
reconstruction coefficient and linear

424
00:17:02,240 --> 00:17:04,799
independence properties for some policy

425
00:17:04,799 --> 00:17:05,919
class c

426
00:17:05,919 --> 00:17:07,439
and using that

427
00:17:07,439 --> 00:17:11,839
we construct an lwe based cpap for the

428
00:17:11,839 --> 00:17:14,319
policy class c this construction is a

429
00:17:14,319 --> 00:17:16,839
direct construction not via any generic

430
00:17:16,839 --> 00:17:20,000
transformation and our cpap

431
00:17:20,000 --> 00:17:22,799
interestingly satisfies two important

432
00:17:22,799 --> 00:17:25,199
properties first one is that the

433
00:17:25,199 --> 00:17:27,119
randomness time together the different

434
00:17:27,119 --> 00:17:29,679
key components is essentially publicly

435
00:17:29,679 --> 00:17:32,240
computable and secondly that the keys

436
00:17:32,240 --> 00:17:34,080
that means the public keys and the user

437
00:17:34,080 --> 00:17:36,480
secret keys has the piecewise structure

438
00:17:36,480 --> 00:17:38,240
so as we already mentioned these two

439
00:17:38,240 --> 00:17:40,160
properties are actually very essential

440
00:17:40,160 --> 00:17:42,640
for extension to the multi authority

441
00:17:42,640 --> 00:17:43,840
scheme

442
00:17:43,840 --> 00:17:45,919
and by virtue of this two properties we

443
00:17:45,919 --> 00:17:48,080
are able to extend our cpap

444
00:17:48,080 --> 00:17:51,440
to an maabe scheme and our extension is

445
00:17:51,440 --> 00:17:54,160
non-generic that means it's not via any

446
00:17:54,160 --> 00:17:56,320
generic compiler but uses the special

447
00:17:56,320 --> 00:17:58,880
structures for doing that instead of

448
00:17:58,880 --> 00:18:01,840
using the non-monotone lss we use a

449
00:18:01,840 --> 00:18:03,760
monotone lss with the linear

450
00:18:03,760 --> 00:18:05,679
independence and small reconstruction

451
00:18:05,679 --> 00:18:07,840
coefficient properties

452
00:18:07,840 --> 00:18:10,640
the reason why we had to use monotone

453
00:18:10,640 --> 00:18:13,760
lss and not non-monotone lss is that in

454
00:18:13,760 --> 00:18:17,039
case of standard cpa a central authority

455
00:18:17,039 --> 00:18:19,520
enforces the fact that a user either

456
00:18:19,520 --> 00:18:22,240
gets a key for an attribute or its

457
00:18:22,240 --> 00:18:25,120
negation however in case of maabe an

458
00:18:25,120 --> 00:18:26,880
adversary colluding with the corrupt

459
00:18:26,880 --> 00:18:29,520
authority can have both which breaks the

460
00:18:29,520 --> 00:18:33,039
security of lss and therefore breaks the

461
00:18:33,039 --> 00:18:35,360
security of maabe

462
00:18:35,360 --> 00:18:38,000
now i would like to give a somewhat

463
00:18:38,000 --> 00:18:41,360
informal description of our cpa avoiding

464
00:18:41,360 --> 00:18:43,840
several technical details which is not

465
00:18:43,840 --> 00:18:45,039
required for understanding the

466
00:18:45,039 --> 00:18:46,880
functionality though and this only

467
00:18:46,880 --> 00:18:48,880
appears in the rigorous security proof

468
00:18:48,880 --> 00:18:50,320
of the scheme

469
00:18:50,320 --> 00:18:52,720
so first is the setup algorithm which

470
00:18:52,720 --> 00:18:54,559
takes as input the security parameter

471
00:18:54,559 --> 00:18:56,640
and an attribute universe u and it

472
00:18:56,640 --> 00:18:58,480
proceeds as follows for all the

473
00:18:58,480 --> 00:19:00,720
attributes u in the attribute universe

474
00:19:00,720 --> 00:19:03,919
it generates a matrix a u over the field

475
00:19:03,919 --> 00:19:07,200
c q that is the dimension n by m and its

476
00:19:07,200 --> 00:19:09,520
trap door by the usual triple sampling

477
00:19:09,520 --> 00:19:10,559
algorithm

478
00:19:10,559 --> 00:19:14,240
and also it samples another matrix h u

479
00:19:14,240 --> 00:19:16,320
for each of the attribute u in the

480
00:19:16,320 --> 00:19:18,799
attribute universe over the field c q

481
00:19:18,799 --> 00:19:21,440
that is also of dimension n by m and it

482
00:19:21,440 --> 00:19:23,440
additionally samples a vector y of

483
00:19:23,440 --> 00:19:25,919
dimension n over the field c q the

484
00:19:25,919 --> 00:19:27,840
master public key consists of all these

485
00:19:27,840 --> 00:19:30,160
sample a u and h matrices for all the

486
00:19:30,160 --> 00:19:32,640
attributes u of the attribute universe

487
00:19:32,640 --> 00:19:34,480
along with the vector y and the master

488
00:19:34,480 --> 00:19:36,880
secret key consists of the master public

489
00:19:36,880 --> 00:19:39,840
key and the trap doors for all the ao

490
00:19:39,840 --> 00:19:42,960
mattresses for all the use

491
00:19:42,960 --> 00:19:44,720
next is the key generation algorithm

492
00:19:44,720 --> 00:19:46,720
which takes as input the master secret

493
00:19:46,720 --> 00:19:48,720
key and an attribute set u which is the

494
00:19:48,720 --> 00:19:51,600
subset of the attribute universe and it

495
00:19:51,600 --> 00:19:54,240
proceeds as follows it first samples a

496
00:19:54,240 --> 00:19:56,640
vector t hat of dimension n minus 1 from

497
00:19:56,640 --> 00:19:58,640
some appropriate noise distribution and

498
00:19:58,640 --> 00:20:02,000
forms a vector t which is 1 comma t hat

499
00:20:02,000 --> 00:20:05,280
then for each of the attribute u that

500
00:20:05,280 --> 00:20:07,679
appears in the attribute set it computes

501
00:20:07,679 --> 00:20:10,960
a vector k u which is basically the pre

502
00:20:10,960 --> 00:20:14,080
image of the vector h u times c

503
00:20:14,080 --> 00:20:17,280
transpose under the matrix a u and for

504
00:20:17,280 --> 00:20:19,600
computation of theta it loses the trap

505
00:20:19,600 --> 00:20:22,799
door for the matrix a u the secret key

506
00:20:22,799 --> 00:20:25,679
is k u for that to set u consists of all

507
00:20:25,679 --> 00:20:28,400
these computed ku vectors for all the

508
00:20:28,400 --> 00:20:30,799
u's in the set capital u along with the

509
00:20:30,799 --> 00:20:32,799
vector t so note that

510
00:20:32,799 --> 00:20:34,799
the randomness that is tying together

511
00:20:34,799 --> 00:20:37,360
the different key components ku is

512
00:20:37,360 --> 00:20:38,720
the vector t

513
00:20:38,720 --> 00:20:40,880
and this is actually publicly computable

514
00:20:40,880 --> 00:20:43,280
it does not require any secret to sample

515
00:20:43,280 --> 00:20:45,039
the vector t hat

516
00:20:45,039 --> 00:20:47,760
and therefore the vector t as we pointed

517
00:20:47,760 --> 00:20:49,840
out already this public nature of the

518
00:20:49,840 --> 00:20:52,159
randomness is absolutely crucial for

519
00:20:52,159 --> 00:20:54,080
extending to our multi-authority scheme

520
00:20:54,080 --> 00:20:55,760
next is the encryption algorithm which

521
00:20:55,760 --> 00:20:57,440
takes us into the master public key a

522
00:20:57,440 --> 00:21:00,400
message bit mst and an lss access policy

523
00:21:00,400 --> 00:21:03,360
in row it proceeds as follows suppose m

524
00:21:03,360 --> 00:21:06,159
is an l by s dimensional matrix it first

525
00:21:06,159 --> 00:21:09,200
samples ah vector s of dimension n over

526
00:21:09,200 --> 00:21:12,080
z q and also s minus 1 many vectors v 2

527
00:21:12,080 --> 00:21:15,440
up to v s of dimension m over c cube

528
00:21:15,440 --> 00:21:17,760
next for each row i of the matrix m it

529
00:21:17,760 --> 00:21:20,080
computes a vector c i and c i hat as

530
00:21:20,080 --> 00:21:24,159
follows c i is basically s times a row i

531
00:21:24,159 --> 00:21:27,280
that is the rho ith a matrix

532
00:21:27,280 --> 00:21:29,840
plus some appropriate noise and then ci

533
00:21:29,840 --> 00:21:34,159
hat is it row mi times the matrix whose

534
00:21:34,159 --> 00:21:36,159
first entry is s y transpose and rest

535
00:21:36,159 --> 00:21:38,480
are 0 and the remaining rows are v 2 up

536
00:21:38,480 --> 00:21:39,760
to v s

537
00:21:39,760 --> 00:21:43,200
minus s times h 0i matrix plus another

538
00:21:43,200 --> 00:21:44,799
appropriate noise

539
00:21:44,799 --> 00:21:47,120
the ciphertext consists of this ci and

540
00:21:47,120 --> 00:21:50,240
ci had vectors along with another bit c

541
00:21:50,240 --> 00:21:52,400
which is the most significant bit of the

542
00:21:52,400 --> 00:21:54,400
quantity s y transpose xor with the

543
00:21:54,400 --> 00:21:56,880
message bit msg

544
00:21:56,880 --> 00:21:58,880
next is the decryption algorithm it

545
00:21:58,880 --> 00:22:01,600
takes as input a secret key sku for some

546
00:22:01,600 --> 00:22:04,240
accuracy u and the ciphertext ct so if

547
00:22:04,240 --> 00:22:07,039
that tribute set u does not satisfy the

548
00:22:07,039 --> 00:22:09,039
access policy m row associated with the

549
00:22:09,039 --> 00:22:11,039
ciphertext then it outputs what

550
00:22:11,039 --> 00:22:12,720
otherwise is processed as follows

551
00:22:12,720 --> 00:22:15,760
suppose i is the set of rows of the

552
00:22:15,760 --> 00:22:18,400
matrix of the lss associated with the

553
00:22:18,400 --> 00:22:21,919
ciphertext for which the user possesses

554
00:22:21,919 --> 00:22:24,480
the attributes and let w i be the

555
00:22:24,480 --> 00:22:27,120
reconstruction coefficients in order to

556
00:22:27,120 --> 00:22:29,039
decrypt the user first computes the

557
00:22:29,039 --> 00:22:32,240
quantity k prime which is the sum over

558
00:22:32,240 --> 00:22:34,640
all the rows in the set i

559
00:22:34,640 --> 00:22:38,000
of the quantity w i times c i

560
00:22:38,000 --> 00:22:41,280
times k rho i transpose plus c i hat

561
00:22:41,280 --> 00:22:43,760
times t transpose it outputs the

562
00:22:43,760 --> 00:22:45,600
quantity m c prime which is the most

563
00:22:45,600 --> 00:22:48,400
significant bit of this quantity k prime

564
00:22:48,400 --> 00:22:50,799
x naught with c so this is the

565
00:22:50,799 --> 00:22:52,000
correctness

566
00:22:52,000 --> 00:22:54,400
consider the expression c i k rho i

567
00:22:54,400 --> 00:22:57,440
transpose plus c i hat

568
00:22:57,440 --> 00:23:00,640
t transpose if you substitute the

569
00:23:00,640 --> 00:23:05,280
expressions for c i and c i hat and

570
00:23:05,280 --> 00:23:07,360
ignore the noise terms it basically

571
00:23:07,360 --> 00:23:09,280
becomes

572
00:23:09,280 --> 00:23:13,200
s a rho i k rho i transpose plus

573
00:23:13,200 --> 00:23:16,720
m i times that big matrix times t

574
00:23:16,720 --> 00:23:20,720
transpose minus s times h rho i times t

575
00:23:20,720 --> 00:23:22,880
transpose now remember that by

576
00:23:22,880 --> 00:23:25,280
construction a rho i k rho i transpose

577
00:23:25,280 --> 00:23:28,159
is basically h to i t transpose so

578
00:23:28,159 --> 00:23:31,200
by this computation the a rho i k i

579
00:23:31,200 --> 00:23:33,360
transpose and h zero i t transpose gets

580
00:23:33,360 --> 00:23:36,240
cancelled and what remains if you sum it

581
00:23:36,240 --> 00:23:38,559
over multiplying with the the

582
00:23:38,559 --> 00:23:40,880
construction coefficient it basically is

583
00:23:40,880 --> 00:23:43,440
going to give you s y transpose

584
00:23:43,440 --> 00:23:45,760
so this is the correctness unfortunately

585
00:23:45,760 --> 00:23:47,679
i don't have time to go into the

586
00:23:47,679 --> 00:23:52,159
security and also cannot explain our map

587
00:23:52,159 --> 00:23:53,760
scheme in detail i would like to

588
00:23:53,760 --> 00:23:55,360
encourage you to

589
00:23:55,360 --> 00:23:57,279
look into our full paper which is

590
00:23:57,279 --> 00:23:59,840
available on imprint

591
00:23:59,840 --> 00:24:02,080
so in conclusion in this work we present

592
00:24:02,080 --> 00:24:05,440
the first map scheme from lwe assumption

593
00:24:05,440 --> 00:24:07,120
for some non-trivial class of access

594
00:24:07,120 --> 00:24:08,240
policies

595
00:24:08,240 --> 00:24:11,360
and we also give a direct approach

596
00:24:11,360 --> 00:24:14,240
towards constructing a cpab scheme under

597
00:24:14,240 --> 00:24:16,840
lwe assumption there are several open

598
00:24:16,840 --> 00:24:19,520
problems firstly can we construct an

599
00:24:19,520 --> 00:24:22,240
maabe from lwe

600
00:24:22,240 --> 00:24:24,720
for some more explicit access policies

601
00:24:24,720 --> 00:24:27,360
than dnfs secondly can we get stronger

602
00:24:27,360 --> 00:24:29,679
security here we only get static

603
00:24:29,679 --> 00:24:30,960
security

604
00:24:30,960 --> 00:24:33,279
thirdly can we get better parameters for

605
00:24:33,279 --> 00:24:35,279
example better sizes of ciphertext and

606
00:24:35,279 --> 00:24:38,159
secret keys here all the sizes scale

607
00:24:38,159 --> 00:24:41,440
with the worst case policy size bound on

608
00:24:41,440 --> 00:24:44,320
the system lastly can we allow an

609
00:24:44,320 --> 00:24:46,000
unbounded number of attributes for

610
00:24:46,000 --> 00:24:48,400
authority in this work we are only able

611
00:24:48,400 --> 00:24:50,320
to allow some bounded number of

612
00:24:50,320 --> 00:24:52,640
attributes for authorities

613
00:24:52,640 --> 00:24:56,240
thank you very much for your attention

