1
00:00:00,320 --> 00:00:02,560
hi everyone and welcome to this talk on

2
00:00:02,560 --> 00:00:05,120
large scale actively secure computation

3
00:00:05,120 --> 00:00:08,720
from lpn and 3xor carbon circuits

4
00:00:08,720 --> 00:00:11,040
it's during work with an airplane frame

5
00:00:11,040 --> 00:00:12,880
can hong kong grandma

6
00:00:12,880 --> 00:00:16,320
emmanuel arcini and nigel smart

7
00:00:16,320 --> 00:00:18,880
multi-party computation or npc for short

8
00:00:18,880 --> 00:00:21,520
protocols are interactive algorithms

9
00:00:21,520 --> 00:00:23,680
which allow parties to securely compute

10
00:00:23,680 --> 00:00:25,599
on their private data

11
00:00:25,599 --> 00:00:27,439
here in our example they want to know

12
00:00:27,439 --> 00:00:30,640
who is the richest among themselves

13
00:00:30,640 --> 00:00:32,960
the main challenge in npc is that there

14
00:00:32,960 --> 00:00:35,200
is an adversary which controls and

15
00:00:35,200 --> 00:00:37,680
coordinates several of the participants

16
00:00:37,680 --> 00:00:39,920
rather than adversary being an external

17
00:00:39,920 --> 00:00:41,840
entity

18
00:00:41,840 --> 00:00:44,719
by securely computing we mean a series

19
00:00:44,719 --> 00:00:46,239
of properties

20
00:00:46,239 --> 00:00:48,239
the two most important ones are

21
00:00:48,239 --> 00:00:50,480
correctness which guarantees that

22
00:00:50,480 --> 00:00:52,399
parties obtain the correct result of the

23
00:00:52,399 --> 00:00:53,840
computation

24
00:00:53,840 --> 00:00:56,719
in our example here alice is the richest

25
00:00:56,719 --> 00:00:58,960
among only four parties

26
00:00:58,960 --> 00:01:01,520
and the second one is privacy which

27
00:01:01,520 --> 00:01:03,600
means that parties learn no more

28
00:01:03,600 --> 00:01:06,159
information than what they can infer

29
00:01:06,159 --> 00:01:09,760
from their respective input and output

30
00:01:09,760 --> 00:01:11,360
there are two main approaches to npc

31
00:01:11,360 --> 00:01:13,040
protocols which are secret sharing and

32
00:01:13,040 --> 00:01:14,479
garbo circuits

33
00:01:14,479 --> 00:01:16,240
each of these has their own advantages

34
00:01:16,240 --> 00:01:17,920
and disadvantages

35
00:01:17,920 --> 00:01:20,000
secret sharing protocols

36
00:01:20,000 --> 00:01:22,479
are very good for arithmetic circuits

37
00:01:22,479 --> 00:01:24,560
and low latency networks

38
00:01:24,560 --> 00:01:26,560
the latter is due to the fact that the

39
00:01:26,560 --> 00:01:28,479
run complexity is linear on the left of

40
00:01:28,479 --> 00:01:29,920
the circuit

41
00:01:29,920 --> 00:01:31,439
on the other hand they have a small

42
00:01:31,439 --> 00:01:33,200
communication complexity and they are

43
00:01:33,200 --> 00:01:35,439
also very cheap in terms of computation

44
00:01:35,439 --> 00:01:38,000
in general

45
00:01:39,600 --> 00:01:41,439
protocols based on global circuits are

46
00:01:41,439 --> 00:01:44,479
the best option for boolean circuits and

47
00:01:44,479 --> 00:01:46,479
high latency networks since they have a

48
00:01:46,479 --> 00:01:48,560
constant number of rounds

49
00:01:48,560 --> 00:01:50,880
on the other hand communication costs in

50
00:01:50,880 --> 00:01:53,040
the carplaying phase are bigger since

51
00:01:53,040 --> 00:01:54,960
the size of the carbon gate depends

52
00:01:54,960 --> 00:01:57,680
linearly in the number of parties

53
00:01:57,680 --> 00:01:59,920
computation wise this is even worse

54
00:01:59,920 --> 00:02:01,360
since the dependency on the number of

55
00:02:01,360 --> 00:02:03,920
parties is quadratic

56
00:02:03,920 --> 00:02:06,240
in our work we set out to get rid of

57
00:02:06,240 --> 00:02:10,160
this dependency in the number of parties

58
00:02:10,160 --> 00:02:12,239
this was previously done by a subset of

59
00:02:12,239 --> 00:02:14,560
the authors of this board together with

60
00:02:14,560 --> 00:02:16,959
yuguda lindo but they were only secure

61
00:02:16,959 --> 00:02:18,800
against passive adversaries and they

62
00:02:18,800 --> 00:02:20,480
could not support the freaks or

63
00:02:20,480 --> 00:02:23,480
optimization

64
00:02:23,760 --> 00:02:25,840
giving our improvements

65
00:02:25,840 --> 00:02:27,520
the complexity of variable circuits is

66
00:02:27,520 --> 00:02:30,000
now much more similar to that of secret

67
00:02:30,000 --> 00:02:31,840
sharing based protocols and even

68
00:02:31,840 --> 00:02:33,920
asymptotically better for circuit

69
00:02:33,920 --> 00:02:36,480
evaluation

70
00:02:36,480 --> 00:02:38,239
let's make clear the setting on the

71
00:02:38,239 --> 00:02:40,239
goals of this work

72
00:02:40,239 --> 00:02:42,640
we want a constant round multi-party

73
00:02:42,640 --> 00:02:44,560
computation protocol based on carbon

74
00:02:44,560 --> 00:02:46,560
circuits in which the size of the gates

75
00:02:46,560 --> 00:02:48,959
is independent of the number of parties

76
00:02:48,959 --> 00:02:51,200
and which is concretely efficient so we

77
00:02:51,200 --> 00:02:52,879
also wanted to support the freaks or

78
00:02:52,879 --> 00:02:54,720
optimization

79
00:02:54,720 --> 00:02:57,040
we will deal with static active

80
00:02:57,040 --> 00:02:58,640
adversaries and we will be in the

81
00:02:58,640 --> 00:03:00,720
dishonest majority setting with

82
00:03:00,720 --> 00:03:03,519
different thresholds within that

83
00:03:03,519 --> 00:03:05,040
range

84
00:03:05,040 --> 00:03:07,280
we will have boolean circuits to model

85
00:03:07,280 --> 00:03:09,760
our computation and we will work in the

86
00:03:09,760 --> 00:03:12,800
offline online paradigm

87
00:03:12,800 --> 00:03:14,560
let us start with a recap on carbon

88
00:03:14,560 --> 00:03:16,800
circuits both in the two-party setting

89
00:03:16,800 --> 00:03:18,879
which is just protocoled and in the

90
00:03:18,879 --> 00:03:20,879
multi-party setting which was first

91
00:03:20,879 --> 00:03:24,159
considered by b vermikalian royally

92
00:03:24,159 --> 00:03:25,760
the core steps behind the passive

93
00:03:25,760 --> 00:03:27,920
version of jos protocol can be

94
00:03:27,920 --> 00:03:29,920
summarized as follows

95
00:03:29,920 --> 00:03:32,319
first of all alice produces an encrypted

96
00:03:32,319 --> 00:03:34,400
or cardboard version of the target

97
00:03:34,400 --> 00:03:37,120
circuit which is c tilde here on the

98
00:03:37,120 --> 00:03:38,959
slides

99
00:03:38,959 --> 00:03:41,280
she sends this to bob

100
00:03:41,280 --> 00:03:44,080
and then both parties engage in an input

101
00:03:44,080 --> 00:03:45,519
and calling phase

102
00:03:45,519 --> 00:03:47,599
from which bob obtains a curveball

103
00:03:47,599 --> 00:03:51,040
version of these inputs

104
00:03:51,040 --> 00:03:52,720
once he has this

105
00:03:52,720 --> 00:03:54,560
he can evaluate the carbon circuit on

106
00:03:54,560 --> 00:03:57,200
the carpal inputs and learn the actual

107
00:03:57,200 --> 00:04:01,280
output of the circuit and only that

108
00:04:01,280 --> 00:04:04,400
alice can get the output just by getting

109
00:04:04,400 --> 00:04:05,680
it from bob

110
00:04:05,680 --> 00:04:08,319
we send it

111
00:04:08,400 --> 00:04:12,000
one could be to think that it is easy to

112
00:04:12,000 --> 00:04:15,040
achieve the goals of our paper just by

113
00:04:15,040 --> 00:04:17,040
taking jobs protocol

114
00:04:17,040 --> 00:04:18,238
and then

115
00:04:18,238 --> 00:04:20,000
using any

116
00:04:20,000 --> 00:04:22,720
mpc protocol to emulate all of these

117
00:04:22,720 --> 00:04:25,440
internals of it

118
00:04:25,440 --> 00:04:26,479
but this

119
00:04:26,479 --> 00:04:27,680
wouldn't

120
00:04:27,680 --> 00:04:31,199
really mark of all of our goals

121
00:04:31,199 --> 00:04:33,040
first of all yes this will be a constant

122
00:04:33,040 --> 00:04:35,520
run protocol since

123
00:04:35,520 --> 00:04:40,320
the garbling step has a constant depth

124
00:04:40,560 --> 00:04:41,840
the size of the kerbal gates would be

125
00:04:41,840 --> 00:04:43,360
independent of the number of parties

126
00:04:43,360 --> 00:04:44,880
because that's how they are in just

127
00:04:44,880 --> 00:04:45,919
protocol

128
00:04:45,919 --> 00:04:49,280
and if our outside our gray box here

129
00:04:49,280 --> 00:04:51,280
which denotes our npc protocol would be

130
00:04:51,280 --> 00:04:52,880
actively secure

131
00:04:52,880 --> 00:04:55,680
so it will be the overall resolved

132
00:04:55,680 --> 00:04:58,560
some minor details

133
00:04:58,560 --> 00:05:00,720
but the problem here is that this will

134
00:05:00,720 --> 00:05:02,800
be extremely inefficient

135
00:05:02,800 --> 00:05:06,080
since we would have to do obliviously

136
00:05:06,080 --> 00:05:08,479
all these coupling operations which

137
00:05:08,479 --> 00:05:11,840
involve using some prfs and these

138
00:05:11,840 --> 00:05:14,080
don't have a very friendly

139
00:05:14,080 --> 00:05:16,080
mpc circuit and they are not really

140
00:05:16,080 --> 00:05:17,759
efficient even for the other

141
00:05:17,759 --> 00:05:21,280
alternatives that have been proposed

142
00:05:21,600 --> 00:05:24,000
the bmr protocol by beaver milkarian

143
00:05:24,000 --> 00:05:26,240
roarway from 1990

144
00:05:26,240 --> 00:05:27,759
does not differ too much from the

145
00:05:27,759 --> 00:05:30,400
previous idea and the same goes for its

146
00:05:30,400 --> 00:05:32,560
successors

147
00:05:32,560 --> 00:05:35,120
so in this protocol

148
00:05:35,120 --> 00:05:38,639
we have parties to emulate these carving

149
00:05:38,639 --> 00:05:41,039
and input encoding steps using some

150
00:05:41,039 --> 00:05:43,039
generic mpc protocol

151
00:05:43,039 --> 00:05:46,000
but the core detail here is that these

152
00:05:46,000 --> 00:05:48,560
prfs that are used for encryption they

153
00:05:48,560 --> 00:05:51,120
are not obliviously evaluated within the

154
00:05:51,120 --> 00:05:52,880
generation pc but they are rather

155
00:05:52,880 --> 00:05:56,240
provided as inputs by the parties

156
00:05:56,240 --> 00:05:59,039
but the process is very similar to javs

157
00:05:59,039 --> 00:06:02,319
parties will produce this carbon circuit

158
00:06:02,319 --> 00:06:06,000
using npc and the inputs they provide

159
00:06:06,000 --> 00:06:08,479
they will encode their inputs and once

160
00:06:08,479 --> 00:06:10,800
they have all of these values they can

161
00:06:10,800 --> 00:06:12,560
go to the online stage

162
00:06:12,560 --> 00:06:14,479
where they choose the evaluation

163
00:06:14,479 --> 00:06:17,039
procedure with the encoded circuit and

164
00:06:17,039 --> 00:06:19,280
encoded inputs to obtain the right

165
00:06:19,280 --> 00:06:21,120
output of the

166
00:06:21,120 --> 00:06:23,039
protocol

167
00:06:23,039 --> 00:06:24,880
those were the differences between java

168
00:06:24,880 --> 00:06:27,039
and vmr at the protocol level but we

169
00:06:27,039 --> 00:06:29,039
will need to look in more detail at the

170
00:06:29,039 --> 00:06:31,759
garbling step of these protocols

171
00:06:31,759 --> 00:06:35,199
in jar's protocol a is carpet as follows

172
00:06:35,199 --> 00:06:37,919
first for each wire on the circuit you

173
00:06:37,919 --> 00:06:39,840
sample a pair of keys corresponding to

174
00:06:39,840 --> 00:06:43,840
each possible value on these wires

175
00:06:43,840 --> 00:06:44,800
next

176
00:06:44,800 --> 00:06:47,520
you are going to encrypt the truth table

177
00:06:47,520 --> 00:06:49,360
using this keys

178
00:06:49,360 --> 00:06:50,240
so

179
00:06:50,240 --> 00:06:52,479
you will encrypt under the two

180
00:06:52,479 --> 00:06:54,800
corresponding input keys corresponding

181
00:06:54,800 --> 00:06:57,680
to the two input values of the gate

182
00:06:57,680 --> 00:06:59,599
the key that corresponds to the output

183
00:06:59,599 --> 00:07:01,520
value that you would obtain if you were

184
00:07:01,520 --> 00:07:05,280
to evaluate this gate in the clear

185
00:07:05,360 --> 00:07:07,440
finally you permit the rows so that the

186
00:07:07,440 --> 00:07:09,360
evaluator doesn't figure out the

187
00:07:09,360 --> 00:07:11,440
correspondence between the keys and the

188
00:07:11,440 --> 00:07:13,280
actual values from the row that he is

189
00:07:13,280 --> 00:07:15,520
evaluating

190
00:07:15,520 --> 00:07:17,520
if we have the frequency or optimization

191
00:07:17,520 --> 00:07:20,000
things look slightly different

192
00:07:20,000 --> 00:07:22,720
rather than sampling two keys per wire

193
00:07:22,720 --> 00:07:25,599
now parties will sample a single key per

194
00:07:25,599 --> 00:07:28,560
wire and some global correlation delta

195
00:07:28,560 --> 00:07:31,680
and they would define the remaining key

196
00:07:31,680 --> 00:07:33,599
as the sum of

197
00:07:33,599 --> 00:07:37,520
that key plus delta

198
00:07:37,599 --> 00:07:40,319
now this allows you to avoid garbling

199
00:07:40,319 --> 00:07:42,160
xor gates

200
00:07:42,160 --> 00:07:45,120
you can simply obtain the output key for

201
00:07:45,120 --> 00:07:50,160
any xor gate by xoring the input keys

202
00:07:50,319 --> 00:07:52,800
in the vmr protocol more changes are

203
00:07:52,800 --> 00:07:55,759
needed to deal with multiple parties

204
00:07:55,759 --> 00:07:58,800
now each of these parties will sample

205
00:07:58,800 --> 00:08:01,680
a key and a free xor correlation

206
00:08:01,680 --> 00:08:04,240
independently

207
00:08:04,240 --> 00:08:06,160
if we put all of these together we get a

208
00:08:06,160 --> 00:08:08,479
vector of keys and a vector of three

209
00:08:08,479 --> 00:08:10,479
extra correlations that allows us to

210
00:08:10,479 --> 00:08:13,360
define the vector of keys that we're

211
00:08:13,360 --> 00:08:15,199
missing

212
00:08:15,199 --> 00:08:17,199
once we have this we do the garbling

213
00:08:17,199 --> 00:08:20,560
similarly to how it was done in jos

214
00:08:20,560 --> 00:08:22,400
we will encrypt the table and we will

215
00:08:22,400 --> 00:08:24,479
permit the rows this time the

216
00:08:24,479 --> 00:08:26,720
permutation has to be done obliquely by

217
00:08:26,720 --> 00:08:28,960
all the parties

218
00:08:28,960 --> 00:08:31,360
the problem is that

219
00:08:31,360 --> 00:08:33,440
this double encryption using vectors of

220
00:08:33,440 --> 00:08:35,200
keys

221
00:08:35,200 --> 00:08:37,519
will require to encrypt

222
00:08:37,519 --> 00:08:41,200
each of the individual keys separately

223
00:08:41,200 --> 00:08:42,320
so now

224
00:08:42,320 --> 00:08:45,360
the size of this cardboard gate is

225
00:08:45,360 --> 00:08:47,519
linear in the number of parties we are

226
00:08:47,519 --> 00:08:49,920
encrypting each of the individual keys

227
00:08:49,920 --> 00:08:53,279
under all the keys under the two vectors

228
00:08:53,279 --> 00:08:55,200
of keys

229
00:08:55,200 --> 00:08:57,519
so our our goal in this work i would

230
00:08:57,519 --> 00:09:00,399
remind it's to get rid of this linear

231
00:09:00,399 --> 00:09:03,360
dependence in the number of parties

232
00:09:03,360 --> 00:09:06,080
we can now present our scalable garbling

233
00:09:06,080 --> 00:09:07,760
scheme which is based on the learning

234
00:09:07,760 --> 00:09:10,399
parity with noise problem

235
00:09:10,399 --> 00:09:12,640
first of all let us recap the decisional

236
00:09:12,640 --> 00:09:14,640
variant of the learning party with noise

237
00:09:14,640 --> 00:09:15,839
problem

238
00:09:15,839 --> 00:09:18,399
during this and the following slides i

239
00:09:18,399 --> 00:09:21,040
will use steel to

240
00:09:21,040 --> 00:09:23,120
denote public values

241
00:09:23,120 --> 00:09:26,480
and purple to denote secret ones

242
00:09:26,480 --> 00:09:27,920
so

243
00:09:27,920 --> 00:09:30,399
it goes as follows you sample a public

244
00:09:30,399 --> 00:09:34,720
matrix with entries in f2

245
00:09:34,880 --> 00:09:37,120
a secret s

246
00:09:37,120 --> 00:09:39,600
secret vector

247
00:09:39,600 --> 00:09:43,040
and furthermore sample some error

248
00:09:43,040 --> 00:09:47,600
according to a bernoulli distribution

249
00:09:47,600 --> 00:09:51,040
what the decisional lpn problem asks for

250
00:09:51,040 --> 00:09:52,000
is

251
00:09:52,000 --> 00:09:54,480
whether you're able to distinguish the

252
00:09:54,480 --> 00:09:56,240
public values

253
00:09:56,240 --> 00:09:58,480
big c and small c

254
00:09:58,480 --> 00:10:01,120
from uniformly random ones

255
00:10:01,120 --> 00:10:02,160
so

256
00:10:02,160 --> 00:10:04,160
let's just move this down there to

257
00:10:04,160 --> 00:10:08,079
remind what those values are

258
00:10:08,399 --> 00:10:10,720
assuming that the lpm is hard it is very

259
00:10:10,720 --> 00:10:13,600
easy to build an encryption scale

260
00:10:13,600 --> 00:10:16,000
if you have a message which is a vector

261
00:10:16,000 --> 00:10:19,440
of elements in f2 you just encode it

262
00:10:19,440 --> 00:10:21,920
according to some error correcting code

263
00:10:21,920 --> 00:10:24,160
so for this just take the generator

264
00:10:24,160 --> 00:10:26,000
matrix of the code

265
00:10:26,000 --> 00:10:30,240
and add this to this small value z

266
00:10:30,240 --> 00:10:33,440
the idea here is that you can remove the

267
00:10:33,440 --> 00:10:36,640
term c times s if you know s

268
00:10:36,640 --> 00:10:39,839
and the error will go away when you do

269
00:10:39,839 --> 00:10:43,680
the decoding in your correcting code

270
00:10:43,680 --> 00:10:45,200
given the encryption scheme from the

271
00:10:45,200 --> 00:10:47,680
previous slide it is easy to make a

272
00:10:47,680 --> 00:10:49,680
garbling scheme if you don't have the

273
00:10:49,680 --> 00:10:51,680
freaks or property

274
00:10:51,680 --> 00:10:53,600
so what change from the previous

275
00:10:53,600 --> 00:10:55,040
construction

276
00:10:55,040 --> 00:10:57,920
is that since you have two keys to

277
00:10:57,920 --> 00:11:01,680
encrypt each entry of a cardboard gate

278
00:11:01,680 --> 00:11:04,720
you will go back to having a single key

279
00:11:04,720 --> 00:11:06,959
by summing them together and that will

280
00:11:06,959 --> 00:11:08,880
constitute the secret key

281
00:11:08,880 --> 00:11:10,079
of your

282
00:11:10,079 --> 00:11:13,440
of the previous encryption scheme

283
00:11:13,440 --> 00:11:14,880
and the messages that you will be

284
00:11:14,880 --> 00:11:16,079
encrypting

285
00:11:16,079 --> 00:11:17,519
is the

286
00:11:17,519 --> 00:11:19,680
wire key corresponding

287
00:11:19,680 --> 00:11:20,640
to

288
00:11:20,640 --> 00:11:22,800
to the truth table for that entry of the

289
00:11:22,800 --> 00:11:25,279
carpal gate

290
00:11:25,279 --> 00:11:28,000
now if we have the friction property the

291
00:11:28,000 --> 00:11:30,640
previous construction doesn't work

292
00:11:30,640 --> 00:11:33,040
and the reason for this is that

293
00:11:33,040 --> 00:11:36,240
since the key for value 0 and the key

294
00:11:36,240 --> 00:11:38,160
for value 1

295
00:11:38,160 --> 00:11:41,760
are correlated by this value delta

296
00:11:41,760 --> 00:11:43,920
we would have that

297
00:11:43,920 --> 00:11:46,880
the value s11 would be the same as the

298
00:11:46,880 --> 00:11:48,640
value s00

299
00:11:48,640 --> 00:11:50,480
since you are adding

300
00:11:50,480 --> 00:11:53,279
delta twice and that cancels out because

301
00:11:53,279 --> 00:11:55,680
we are in a field of characteristic tube

302
00:11:55,680 --> 00:12:00,160
same thing goes for s01 as an s10 so

303
00:12:00,160 --> 00:12:02,880
we've lost all security in our garbling

304
00:12:02,880 --> 00:12:04,000
skin

305
00:12:04,000 --> 00:12:07,040
you learn 2 y 2 entries of the carbon

306
00:12:07,040 --> 00:12:07,839
gate

307
00:12:07,839 --> 00:12:09,440
every time you get

308
00:12:09,440 --> 00:12:11,600
the corresponding input keys rather than

309
00:12:11,600 --> 00:12:13,600
a single one

310
00:12:13,600 --> 00:12:15,600
in our work we solve the previous

311
00:12:15,600 --> 00:12:18,480
problem by using a permutation of the k

312
00:12:18,480 --> 00:12:21,200
bits of the key space

313
00:12:21,200 --> 00:12:24,720
now rather than defining the secret key

314
00:12:24,720 --> 00:12:27,279
sab as the sum of the keys

315
00:12:27,279 --> 00:12:30,160
it will be defined as one of the keys

316
00:12:30,160 --> 00:12:32,399
say the one for the left wire

317
00:12:32,399 --> 00:12:35,040
plus a permutation of the bits of the

318
00:12:35,040 --> 00:12:37,200
second key

319
00:12:37,200 --> 00:12:40,399
this way the fixture correlation will

320
00:12:40,399 --> 00:12:42,880
not cancel out

321
00:12:42,880 --> 00:12:44,320
we could have opted for a different

322
00:12:44,320 --> 00:12:46,160
solution we could have

323
00:12:46,160 --> 00:12:49,600
for example applied the standard dlp

324
00:12:49,600 --> 00:12:53,120
encryption we described earlier twice

325
00:12:53,120 --> 00:12:54,880
but this will

326
00:12:54,880 --> 00:12:56,959
have a significantly higher

327
00:12:56,959 --> 00:12:58,959
computational cost

328
00:12:58,959 --> 00:13:01,040
almost the double one could say since

329
00:13:01,040 --> 00:13:03,200
you need to sample one more matrix and

330
00:13:03,200 --> 00:13:07,399
do one more matrix vector multiplication

331
00:13:07,519 --> 00:13:10,000
in more details the use of a permutation

332
00:13:10,000 --> 00:13:12,240
brings us to four possible keys which

333
00:13:12,240 --> 00:13:13,519
are

334
00:13:13,519 --> 00:13:16,880
for any a b the key s a b

335
00:13:16,880 --> 00:13:20,320
that plus delta or that plus sigma delta

336
00:13:20,320 --> 00:13:24,000
or that plus delta plus sigma delta

337
00:13:24,000 --> 00:13:26,480
so once part is learning any pair of

338
00:13:26,480 --> 00:13:27,839
keys

339
00:13:27,839 --> 00:13:31,440
k u a and k v b

340
00:13:31,440 --> 00:13:34,399
they learn the value sab and all the

341
00:13:34,399 --> 00:13:36,880
security of the garbling relies on the

342
00:13:36,880 --> 00:13:39,519
remaining hidden secrets which are delta

343
00:13:39,519 --> 00:13:43,279
sigma delta and delta plus sigma delta

344
00:13:43,279 --> 00:13:46,480
hence all of these encryptions

345
00:13:46,480 --> 00:13:49,199
rely on some related keys

346
00:13:49,199 --> 00:13:52,720
which security we have to study

347
00:13:52,720 --> 00:13:54,399
furthermore the values that are being

348
00:13:54,399 --> 00:13:56,880
encrypted also depend on delta since

349
00:13:56,880 --> 00:13:58,560
they are also higher keys and they have

350
00:13:58,560 --> 00:14:00,399
the freaks or correlation

351
00:14:00,399 --> 00:14:02,560
so there's also some notion of a key

352
00:14:02,560 --> 00:14:05,599
dependent message

353
00:14:06,079 --> 00:14:07,600
in our work we prove that our

354
00:14:07,600 --> 00:14:09,760
construction has some

355
00:14:09,760 --> 00:14:11,519
related key key dependent message

356
00:14:11,519 --> 00:14:13,040
security

357
00:14:13,040 --> 00:14:15,279
which is actually something stronger

358
00:14:15,279 --> 00:14:18,399
than the two notions separately

359
00:14:18,399 --> 00:14:21,279
what we show is that these

360
00:14:21,279 --> 00:14:25,120
keys that we use now this key sap

361
00:14:25,120 --> 00:14:28,320
only has to be as many bits longer as

362
00:14:28,320 --> 00:14:30,320
the number of cycles in our permutation

363
00:14:30,320 --> 00:14:32,720
signal and i invite you to check our

364
00:14:32,720 --> 00:14:35,680
paper for the details

365
00:14:35,680 --> 00:14:38,880
equipped with our lpn based garbling

366
00:14:38,880 --> 00:14:42,000
we can now present our two protocols for

367
00:14:42,000 --> 00:14:44,880
carbon circuits based on that

368
00:14:44,880 --> 00:14:46,720
the first one which we denote as

369
00:14:46,720 --> 00:14:48,800
authenticated carbon circuits relies on

370
00:14:48,800 --> 00:14:51,839
the fact that lpn is an npc friendly way

371
00:14:51,839 --> 00:14:53,920
of encrypting data

372
00:14:53,920 --> 00:14:56,639
since we have some public matrices

373
00:14:56,639 --> 00:14:59,199
and the errors and keys are secret

374
00:14:59,199 --> 00:15:01,279
vectors of elements

375
00:15:01,279 --> 00:15:03,040
in f2

376
00:15:03,040 --> 00:15:04,880
encryption is

377
00:15:04,880 --> 00:15:07,120
just an actual linear combination that

378
00:15:07,120 --> 00:15:09,279
comes from computing the matrix the

379
00:15:09,279 --> 00:15:12,000
vector product

380
00:15:12,000 --> 00:15:14,560
the problem with this solution which is

381
00:15:14,560 --> 00:15:16,639
very easy to understand though

382
00:15:16,639 --> 00:15:18,880
is that sampling the secret errors in

383
00:15:18,880 --> 00:15:22,000
npc is not cheap

384
00:15:22,000 --> 00:15:23,680
since they follow this bernoulli

385
00:15:23,680 --> 00:15:25,680
distribution

386
00:15:25,680 --> 00:15:28,560
so the problem is that the preprocessing

387
00:15:28,560 --> 00:15:30,720
will be slow in this case and our next

388
00:15:30,720 --> 00:15:32,800
protocol will be better in that on that

389
00:15:32,800 --> 00:15:34,320
aspect

390
00:15:34,320 --> 00:15:35,199
but

391
00:15:35,199 --> 00:15:37,360
it has the advantage that the error

392
00:15:37,360 --> 00:15:39,440
correction cause that we can use for

393
00:15:39,440 --> 00:15:40,880
this construction

394
00:15:40,880 --> 00:15:44,160
seem to be more efficient

395
00:15:44,160 --> 00:15:46,160
our second protocol is the

396
00:15:46,160 --> 00:15:49,199
unauthenticated capital circuits one

397
00:15:49,199 --> 00:15:51,120
in this case we assume that some

398
00:15:51,120 --> 00:15:54,480
constant fraction of parties is honest

399
00:15:54,480 --> 00:15:57,040
say for example 11 percent which would

400
00:15:57,040 --> 00:15:59,120
be something very reasonable since we

401
00:15:59,120 --> 00:16:01,920
aim for a large scale scenario with many

402
00:16:01,920 --> 00:16:04,399
many parties

403
00:16:04,399 --> 00:16:07,519
so in this protocol what each party will

404
00:16:07,519 --> 00:16:09,440
do is sampling

405
00:16:09,440 --> 00:16:12,880
sharings of the lpn keys and of the

406
00:16:12,880 --> 00:16:14,399
noise locally

407
00:16:14,399 --> 00:16:17,040
rather than together and obliviously as

408
00:16:17,040 --> 00:16:18,800
in the previous protocol

409
00:16:18,800 --> 00:16:21,680
and compute some local weak lpn

410
00:16:21,680 --> 00:16:22,959
encryption

411
00:16:22,959 --> 00:16:26,160
which has the following properties

412
00:16:26,160 --> 00:16:29,199
the sum of all the weak lpn ciphertexts

413
00:16:29,199 --> 00:16:31,120
that belong to the honest parties so

414
00:16:31,120 --> 00:16:33,839
that's and divided by c

415
00:16:33,839 --> 00:16:37,600
is a secure lpn ciphertext

416
00:16:37,600 --> 00:16:39,839
and in order for in order for parties to

417
00:16:39,839 --> 00:16:42,320
get the sum of all the oldest lpn

418
00:16:42,320 --> 00:16:44,639
ciphertexts together with the ones from

419
00:16:44,639 --> 00:16:46,399
the malicious parties because we don't

420
00:16:46,399 --> 00:16:48,560
know which ones are those

421
00:16:48,560 --> 00:16:50,720
parties just add some random sharing of

422
00:16:50,720 --> 00:16:54,480
0 to their weak lpn ciphertext

423
00:16:54,480 --> 00:16:56,000
now when you add all of these together

424
00:16:56,000 --> 00:16:58,079
the sharing of 0 goes away

425
00:16:58,079 --> 00:17:01,440
and you get the secure lpn ciphertext

426
00:17:01,440 --> 00:17:03,680
together with the ciphertext of the

427
00:17:03,680 --> 00:17:05,359
malicious parties

428
00:17:05,359 --> 00:17:07,760
which has to have some tolerable amount

429
00:17:07,760 --> 00:17:10,240
of noise

430
00:17:10,559 --> 00:17:12,559
the good thing about this is that now we

431
00:17:12,559 --> 00:17:14,240
have the same number of oblivious

432
00:17:14,240 --> 00:17:16,240
operations as in the state-of-the-art

433
00:17:16,240 --> 00:17:20,400
protocols that are in the bmr setting

434
00:17:20,400 --> 00:17:22,160
with active security and the solid

435
00:17:22,160 --> 00:17:24,079
majority

436
00:17:24,079 --> 00:17:26,799
the problem though is that since now we

437
00:17:26,799 --> 00:17:28,960
have a single pair of keys for every

438
00:17:28,960 --> 00:17:31,520
wire rather than

439
00:17:31,520 --> 00:17:34,559
a vector of keys

440
00:17:34,559 --> 00:17:36,799
where one of these key each of these

441
00:17:36,799 --> 00:17:39,360
keys belongs to a specific party

442
00:17:39,360 --> 00:17:41,120
we have lost the error detection

443
00:17:41,120 --> 00:17:46,480
capability that was in in hss 17.

444
00:17:46,480 --> 00:17:47,600
so

445
00:17:47,600 --> 00:17:49,200
there would be different ways to solve

446
00:17:49,200 --> 00:17:52,480
this problem but the solution we taking

447
00:17:52,480 --> 00:17:54,480
over in our work

448
00:17:54,480 --> 00:17:57,039
is to introduce some output gates that

449
00:17:57,039 --> 00:17:58,720
bring back these error detection

450
00:17:58,720 --> 00:18:00,559
capabilities

451
00:18:00,559 --> 00:18:02,720
which basically have again this kind of

452
00:18:02,720 --> 00:18:04,960
vectors of keys and once again the

453
00:18:04,960 --> 00:18:08,240
details are in the paper

454
00:18:08,240 --> 00:18:10,000
i would like to conclude this talk by

455
00:18:10,000 --> 00:18:12,080
giving some details about our

456
00:18:12,080 --> 00:18:13,679
implementation on experimental

457
00:18:13,679 --> 00:18:17,039
validation of our results

458
00:18:17,039 --> 00:18:19,360
we will only present the main takeaways

459
00:18:19,360 --> 00:18:21,440
of our work for the circuit evaluating

460
00:18:21,440 --> 00:18:23,200
phase and for this we will compare with

461
00:18:23,200 --> 00:18:27,360
the previous work of pl017

462
00:18:27,360 --> 00:18:30,000
it's first interesting to see how much

463
00:18:30,000 --> 00:18:32,160
slower is our work which has active

464
00:18:32,160 --> 00:18:34,559
security and frequency compared with

465
00:18:34,559 --> 00:18:37,039
blo17 which was only passively secure

466
00:18:37,039 --> 00:18:39,840
and couldn't support free xor

467
00:18:39,840 --> 00:18:41,679
for circuits consisting only of hand

468
00:18:41,679 --> 00:18:43,919
gates we are around six times slower

469
00:18:43,919 --> 00:18:45,520
whereas if we take more realistic

470
00:18:45,520 --> 00:18:47,679
circuits that include also other kinds

471
00:18:47,679 --> 00:18:50,160
of gates such as as

472
00:18:50,160 --> 00:18:52,160
it turns out that

473
00:18:52,160 --> 00:18:53,840
in this concrete example we are only

474
00:18:53,840 --> 00:18:56,240
around 15 percent slower than this

475
00:18:56,240 --> 00:18:59,440
passively secure protocol

476
00:18:59,520 --> 00:19:02,640
another interesting metric to look at is

477
00:19:02,640 --> 00:19:03,440
when

478
00:19:03,440 --> 00:19:05,280
do does our work

479
00:19:05,280 --> 00:19:07,360
become more efficient for the circuit

480
00:19:07,360 --> 00:19:08,960
evaluation phase

481
00:19:08,960 --> 00:19:12,880
than the best works that

482
00:19:12,880 --> 00:19:15,360
precluded

483
00:19:15,360 --> 00:19:16,720
in the setting

484
00:19:16,720 --> 00:19:18,080
and have

485
00:19:18,080 --> 00:19:20,000
gates of size

486
00:19:20,000 --> 00:19:22,559
linear in the number of parties

487
00:19:22,559 --> 00:19:24,400
in the passive security case

488
00:19:24,400 --> 00:19:27,280
uh for po17 this was around the hundreds

489
00:19:27,280 --> 00:19:29,679
of parties compared with pillows

490
00:19:29,679 --> 00:19:30,960
16.

491
00:19:30,960 --> 00:19:32,720
in our work it turns out that this

492
00:19:32,720 --> 00:19:34,720
crossover point is also around the same

493
00:19:34,720 --> 00:19:36,880
number of parties

494
00:19:36,880 --> 00:19:38,880
finally it is important to note that our

495
00:19:38,880 --> 00:19:42,080
implementation is a proof of concept

496
00:19:42,080 --> 00:19:44,160
we get some good

497
00:19:44,160 --> 00:19:46,640
performance due to our use of the two

498
00:19:46,640 --> 00:19:49,120
key lpm encryption that i presented with

499
00:19:49,120 --> 00:19:50,240
the

500
00:19:50,240 --> 00:19:53,280
permutation trick and by sampling the

501
00:19:53,280 --> 00:19:56,320
lpm matrices on the fly using the aes

502
00:19:56,320 --> 00:19:58,559
derivation function

503
00:19:58,559 --> 00:20:02,080
so this part of the

504
00:20:02,080 --> 00:20:04,320
of the implementation only takes between

505
00:20:04,320 --> 00:20:08,399
15 and 20 of the time

506
00:20:08,480 --> 00:20:11,039
on the other hand the major challenge

507
00:20:11,039 --> 00:20:14,240
comes from the codes that are used

508
00:20:14,240 --> 00:20:17,760
so in our examples we use concatenated

509
00:20:17,760 --> 00:20:20,000
codes which were easier to implement and

510
00:20:20,000 --> 00:20:21,360
to analyze

511
00:20:21,360 --> 00:20:24,240
their failure probability

512
00:20:24,240 --> 00:20:27,039
this has some problems though we spend

513
00:20:27,039 --> 00:20:29,520
around 80 to 85 percent of the time

514
00:20:29,520 --> 00:20:31,360
decoding these codes

515
00:20:31,360 --> 00:20:34,000
so there's room for improvement this

516
00:20:34,000 --> 00:20:35,919
could come from different sources we

517
00:20:35,919 --> 00:20:38,480
could use the recent uh

518
00:20:38,480 --> 00:20:41,440
gfni instructions from intel to improve

519
00:20:41,440 --> 00:20:43,039
the efficiency of the other code which

520
00:20:43,039 --> 00:20:44,799
is a rich solomon called over the field

521
00:20:44,799 --> 00:20:47,280
with two v8 elements

522
00:20:47,280 --> 00:20:49,039
or we could use a better decoding

523
00:20:49,039 --> 00:20:50,960
algorithm such as generalized minimum

524
00:20:50,960 --> 00:20:52,400
distance

525
00:20:52,400 --> 00:20:54,559
or in turn we could turn to codes that

526
00:20:54,559 --> 00:20:55,679
would be

527
00:20:55,679 --> 00:20:58,320
more difficult to implement and analyze

528
00:20:58,320 --> 00:21:01,360
that would provide a better performance

529
00:21:01,360 --> 00:21:05,199
such as ldpc codes

530
00:21:06,000 --> 00:21:07,760
thank you very much for your attention

531
00:21:07,760 --> 00:21:11,960
and see you at the live session

