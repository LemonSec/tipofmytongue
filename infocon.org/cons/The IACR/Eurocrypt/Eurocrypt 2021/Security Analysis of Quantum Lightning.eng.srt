1
00:00:00,640 --> 00:00:03,439
hi everyone my name is bosker i'm a grad

2
00:00:03,439 --> 00:00:05,440
student at uc berkeley

3
00:00:05,440 --> 00:00:07,279
and i'll be talking about work that i

4
00:00:07,279 --> 00:00:10,719
did on quantum lightning

5
00:00:11,679 --> 00:00:14,080
a couple years ago xandry defined a new

6
00:00:14,080 --> 00:00:15,920
cryptographic object called quantum

7
00:00:15,920 --> 00:00:17,119
lightning

8
00:00:17,119 --> 00:00:19,680
which is similar to public key quantum

9
00:00:19,680 --> 00:00:20,560
money

10
00:00:20,560 --> 00:00:22,800
except it provides a stronger form of

11
00:00:22,800 --> 00:00:24,960
unclonability

12
00:00:24,960 --> 00:00:27,359
the paper made a number of contributions

13
00:00:27,359 --> 00:00:29,760
to this subject but i'll just focus on

14
00:00:29,760 --> 00:00:31,679
one of them

15
00:00:31,679 --> 00:00:33,760
they gave a concrete construction of

16
00:00:33,760 --> 00:00:35,120
quantum lightning

17
00:00:35,120 --> 00:00:37,440
and proposed a new hardness assumption

18
00:00:37,440 --> 00:00:40,480
that could be used to prove security

19
00:00:40,480 --> 00:00:42,239
in my work i'll show that the hardness

20
00:00:42,239 --> 00:00:44,559
assumption is actually false

21
00:00:44,559 --> 00:00:47,200
so the proof of security does not hold

22
00:00:47,200 --> 00:00:49,280
however this doesn't mean that the

23
00:00:49,280 --> 00:00:51,440
construction is insecure because we

24
00:00:51,440 --> 00:00:53,840
haven't given a way to actually win the

25
00:00:53,840 --> 00:00:55,680
security game

26
00:00:55,680 --> 00:00:57,840
quantum lightning deals with unclonable

27
00:00:57,840 --> 00:01:00,399
quantum states called lightning bolts

28
00:01:00,399 --> 00:01:02,800
a lightning bolt is a quantum state plus

29
00:01:02,800 --> 00:01:05,199
a classical serial number

30
00:01:05,199 --> 00:01:07,840
and as with public key quantum money the

31
00:01:07,840 --> 00:01:10,159
bolts can be verified using only public

32
00:01:10,159 --> 00:01:11,360
information

33
00:01:11,360 --> 00:01:13,520
but it's hard to produce two bolts with

34
00:01:13,520 --> 00:01:15,600
the same serial number that will both

35
00:01:15,600 --> 00:01:17,600
pass verification

36
00:01:17,600 --> 00:01:20,159
the difference is that the lightning

37
00:01:20,159 --> 00:01:22,799
bolts can also be generated using public

38
00:01:22,799 --> 00:01:24,240
information

39
00:01:24,240 --> 00:01:27,200
this means that even an adversary could

40
00:01:27,200 --> 00:01:29,680
run the generation function and produce

41
00:01:29,680 --> 00:01:32,320
many valid lightning bolts each with a

42
00:01:32,320 --> 00:01:34,960
unique serial number

43
00:01:34,960 --> 00:01:36,560
quantum lightning can be used to

44
00:01:36,560 --> 00:01:38,799
construct a strong form of public key

45
00:01:38,799 --> 00:01:41,759
quantum money in which not even the bank

46
00:01:41,759 --> 00:01:43,680
that produces the banknotes

47
00:01:43,680 --> 00:01:45,840
can produce two bank notes with the same

48
00:01:45,840 --> 00:01:48,560
serial number

49
00:01:48,640 --> 00:01:50,560
quantum lightning has three functions

50
00:01:50,560 --> 00:01:52,799
setup gen and bear

51
00:01:52,799 --> 00:01:54,960
set setup just samples the parameters

52
00:01:54,960 --> 00:01:57,439
that are used throughout the scheme

53
00:01:57,439 --> 00:01:59,119
gen is the generation function which

54
00:01:59,119 --> 00:02:00,719
produces the bolts

55
00:02:00,719 --> 00:02:02,560
and it's sometimes called the storm by

56
00:02:02,560 --> 00:02:05,360
analogy to a lightning storm

57
00:02:05,360 --> 00:02:07,920
as with a lightning storm there's some

58
00:02:07,920 --> 00:02:10,239
randomness involved in running gen

59
00:02:10,239 --> 00:02:13,200
that's hard for us to replicate

60
00:02:13,200 --> 00:02:15,440
in our case it will be

61
00:02:15,440 --> 00:02:17,760
the act of measuring a state so when we

62
00:02:17,760 --> 00:02:20,080
measure a state it collapses to some

63
00:02:20,080 --> 00:02:22,879
random value and every time we run gen

64
00:02:22,879 --> 00:02:24,959
and make this measurement we measure a

65
00:02:24,959 --> 00:02:26,720
different random value

66
00:02:26,720 --> 00:02:28,560
and this is how we ensure that

67
00:02:28,560 --> 00:02:31,280
successive runs of gen never produce the

68
00:02:31,280 --> 00:02:34,879
same exact lightning bolt

69
00:02:34,879 --> 00:02:36,800
finally there is the verification

70
00:02:36,800 --> 00:02:37,840
function

71
00:02:37,840 --> 00:02:42,080
this verifies that a given bolt is valid

72
00:02:42,080 --> 00:02:44,000
and the security guarantee is that it's

73
00:02:44,000 --> 00:02:46,080
hard to produce two states

74
00:02:46,080 --> 00:02:48,239
with the same serial number that will

75
00:02:48,239 --> 00:02:51,760
both pass verification

76
00:02:51,760 --> 00:02:54,239
now we'll describe zandry's proposed

77
00:02:54,239 --> 00:02:56,319
construction of quantum lightning as

78
00:02:56,319 --> 00:02:58,000
well as the hardness assumption that

79
00:02:58,000 --> 00:03:00,400
they used to prove security

80
00:03:00,400 --> 00:03:02,560
we'll do this all at a high level

81
00:03:02,560 --> 00:03:04,480
the construction of quantum lightning is

82
00:03:04,480 --> 00:03:06,319
based on a hash function that's assumed

83
00:03:06,319 --> 00:03:08,640
to be collision resistant

84
00:03:08,640 --> 00:03:10,879
the hash function f a

85
00:03:10,879 --> 00:03:13,920
takes a matrix m as input and maps it to

86
00:03:13,920 --> 00:03:17,040
an n-dimensional vector

87
00:03:17,040 --> 00:03:19,680
m is constrained to be symmetric and low

88
00:03:19,680 --> 00:03:22,239
rank specifically the rank is less than

89
00:03:22,239 --> 00:03:24,640
or equal to d

90
00:03:24,640 --> 00:03:27,280
to compute one component of the output

91
00:03:27,280 --> 00:03:29,599
we use the following formula

92
00:03:29,599 --> 00:03:32,959
we're given a matrix a i and we dot its

93
00:03:32,959 --> 00:03:34,879
entries with m

94
00:03:34,879 --> 00:03:37,360
what that means is we take a i and m we

95
00:03:37,360 --> 00:03:39,680
unfurl them into vectors and then we

96
00:03:39,680 --> 00:03:41,599
take their dot product

97
00:03:41,599 --> 00:03:44,959
there are n a i matrices so that's a one

98
00:03:44,959 --> 00:03:47,360
through a n and they let us compute the

99
00:03:47,360 --> 00:03:50,959
n output components of f a

100
00:03:50,959 --> 00:03:53,200
to generate a lightning bolt we start

101
00:03:53,200 --> 00:03:55,439
with a superposition over all possible

102
00:03:55,439 --> 00:03:57,280
inputs to f a

103
00:03:57,280 --> 00:04:00,000
then we apply the hash function to it

104
00:04:00,000 --> 00:04:02,400
store the result in a separate register

105
00:04:02,400 --> 00:04:04,560
and measure that value

106
00:04:04,560 --> 00:04:06,799
when we measure the state collapses to a

107
00:04:06,799 --> 00:04:09,680
superposition over all pre-images of

108
00:04:09,680 --> 00:04:11,760
that hash value

109
00:04:11,760 --> 00:04:14,400
this measurement is random so every time

110
00:04:14,400 --> 00:04:16,880
we run gen we get a unique lightning

111
00:04:16,880 --> 00:04:19,199
bolt

112
00:04:19,600 --> 00:04:21,440
i won't go into much detail about how

113
00:04:21,440 --> 00:04:23,680
vare works the details are given in my

114
00:04:23,680 --> 00:04:25,440
paper as well as the original quantum

115
00:04:25,440 --> 00:04:27,040
lightning paper

116
00:04:27,040 --> 00:04:28,400
all we need to know

117
00:04:28,400 --> 00:04:31,759
is that vare uses a trapdoor matrix r

118
00:04:31,759 --> 00:04:34,479
and r has the following property

119
00:04:34,479 --> 00:04:37,680
r a i times r transpose is the zero

120
00:04:37,680 --> 00:04:40,880
matrix for all components i

121
00:04:40,880 --> 00:04:43,360
finally setup samples the parameters

122
00:04:43,360 --> 00:04:45,360
that we use in the construction

123
00:04:45,360 --> 00:04:47,840
so it samples the trapdoor r

124
00:04:47,840 --> 00:04:50,800
as well as the n a matrices

125
00:04:50,800 --> 00:04:53,040
xandri also proposed this hardness

126
00:04:53,040 --> 00:04:54,880
assumption and proved that if the

127
00:04:54,880 --> 00:04:56,400
assumption is true

128
00:04:56,400 --> 00:04:57,680
then the construction of quantum

129
00:04:57,680 --> 00:05:00,560
lightning is secure

130
00:05:00,639 --> 00:05:04,000
essentially the assumption says that f a

131
00:05:04,000 --> 00:05:06,160
is multi-collision resistant

132
00:05:06,160 --> 00:05:08,400
specifically it's hard to find two k

133
00:05:08,400 --> 00:05:11,280
plus two colliding inputs and this

134
00:05:11,280 --> 00:05:14,160
should hold even when r is public

135
00:05:14,160 --> 00:05:16,000
our contribution is to show that the

136
00:05:16,000 --> 00:05:19,039
hardness assumption is actually false

137
00:05:19,039 --> 00:05:21,520
we'll use the trapdoor r to construct

138
00:05:21,520 --> 00:05:23,360
many colliding inputs to the hash

139
00:05:23,360 --> 00:05:25,280
function

140
00:05:25,280 --> 00:05:28,400
to understand our attack it's useful to

141
00:05:28,400 --> 00:05:31,440
make an analogy to the sis hash function

142
00:05:31,440 --> 00:05:33,840
this analogy was originally used when

143
00:05:33,840 --> 00:05:35,280
designing the quantum lightning

144
00:05:35,280 --> 00:05:37,600
construction and it's the starting point

145
00:05:37,600 --> 00:05:39,840
for our attack

146
00:05:39,840 --> 00:05:42,479
the sis hash function takes as input a

147
00:05:42,479 --> 00:05:44,800
short vector and applies a linear

148
00:05:44,800 --> 00:05:46,639
transformation to it

149
00:05:46,639 --> 00:05:49,120
in our hash function we take a low rank

150
00:05:49,120 --> 00:05:52,240
matrix and apply a linear transformation

151
00:05:52,240 --> 00:05:54,160
so in this analogy the shortness of the

152
00:05:54,160 --> 00:05:56,720
vectors is related to the low rank

153
00:05:56,720 --> 00:05:58,880
property of the matrices

154
00:05:58,880 --> 00:06:00,880
one trapdoor that's commonly used with

155
00:06:00,880 --> 00:06:02,560
the sis hash function

156
00:06:02,560 --> 00:06:04,880
is a short vector in the kernel of the

157
00:06:04,880 --> 00:06:08,000
function and indeed the analogy holds

158
00:06:08,000 --> 00:06:09,039
here

159
00:06:09,039 --> 00:06:10,800
our trapdoor r

160
00:06:10,800 --> 00:06:15,520
gives us a matrix that hashes to zero

161
00:06:15,919 --> 00:06:18,639
so we can see using the property of the

162
00:06:18,639 --> 00:06:21,120
a i matrices and r that was mentioned

163
00:06:21,120 --> 00:06:22,160
earlier

164
00:06:22,160 --> 00:06:24,479
that r transpose r

165
00:06:24,479 --> 00:06:27,440
hashes to zero

166
00:06:28,080 --> 00:06:30,400
now with the sis hash function

167
00:06:30,400 --> 00:06:32,560
it's typically not collision resistant

168
00:06:32,560 --> 00:06:34,479
when we know the trapdoor

169
00:06:34,479 --> 00:06:36,800
because we can take any pre-image

170
00:06:36,800 --> 00:06:39,759
add the trapdoor vector to it and we'll

171
00:06:39,759 --> 00:06:41,680
get a second pre-image of the same hash

172
00:06:41,680 --> 00:06:42,880
value

173
00:06:42,880 --> 00:06:44,960
however this attack doesn't immediately

174
00:06:44,960 --> 00:06:46,800
work in this construction

175
00:06:46,800 --> 00:06:49,520
because the rank of r transpose r

176
00:06:49,520 --> 00:06:51,120
is larger than d

177
00:06:51,120 --> 00:06:53,759
so r transpose r is technically not in

178
00:06:53,759 --> 00:06:56,160
the domain of f a

179
00:06:56,160 --> 00:06:58,800
that means that if we took a pre-image

180
00:06:58,800 --> 00:07:01,120
added r transpose r to it

181
00:07:01,120 --> 00:07:03,039
we won't necessarily get a second

182
00:07:03,039 --> 00:07:04,880
pre-image in the domain

183
00:07:04,880 --> 00:07:07,919
however we can get around this problem

184
00:07:07,919 --> 00:07:10,800
the key is to use the rows of r

185
00:07:10,800 --> 00:07:13,599
to construct rank 1 matrices in the

186
00:07:13,599 --> 00:07:15,360
kernel of fa

187
00:07:15,360 --> 00:07:16,880
the set k

188
00:07:16,880 --> 00:07:19,280
lists the rank 1 matrices that we can

189
00:07:19,280 --> 00:07:21,199
construct in this way

190
00:07:21,199 --> 00:07:23,759
and these matrices hash to zero for the

191
00:07:23,759 --> 00:07:28,000
same reason that r transpose r does

192
00:07:28,000 --> 00:07:30,960
so now we've constructed e

193
00:07:30,960 --> 00:07:33,759
matrices in the kernel of fa

194
00:07:33,759 --> 00:07:35,919
this is a good number of collisions but

195
00:07:35,919 --> 00:07:37,840
it's not quite enough

196
00:07:37,840 --> 00:07:39,759
so to construct two k plus two

197
00:07:39,759 --> 00:07:41,520
collisions we'll take linear

198
00:07:41,520 --> 00:07:45,199
combinations of the matrices in k

199
00:07:45,199 --> 00:07:47,919
just take d matrices from k take a

200
00:07:47,919 --> 00:07:50,479
linear combination and we've produced

201
00:07:50,479 --> 00:07:55,120
another matrix in the kernel of f a

202
00:07:55,120 --> 00:07:57,199
by taking many linear combinations we

203
00:07:57,199 --> 00:07:59,680
can produce more than two k plus two

204
00:07:59,680 --> 00:08:01,919
colliding inputs and we've broken the

205
00:08:01,919 --> 00:08:03,520
hardness assumption

206
00:08:03,520 --> 00:08:06,080
for future work i'm interested to know

207
00:08:06,080 --> 00:08:07,599
if we can break the security of the

208
00:08:07,599 --> 00:08:09,759
quantum lightning construction using

209
00:08:09,759 --> 00:08:12,000
techniques similar to the ones presented

210
00:08:12,000 --> 00:08:13,840
here

211
00:08:13,840 --> 00:08:16,080
intuitively if we can construct many

212
00:08:16,080 --> 00:08:19,039
pre-images of the same hash value

213
00:08:19,039 --> 00:08:22,000
we can construct a state that is close

214
00:08:22,000 --> 00:08:24,560
to a valid lightning bolt

215
00:08:24,560 --> 00:08:26,400
second even if we could patch the

216
00:08:26,400 --> 00:08:27,919
hardness assumption

217
00:08:27,919 --> 00:08:30,879
it's still ad hoc and poorly understood

218
00:08:30,879 --> 00:08:32,640
it would be better to construct quantum

219
00:08:32,640 --> 00:08:35,039
lightning from well-studied assumptions

220
00:08:35,039 --> 00:08:37,519
such as those in lattice cryptography

221
00:08:37,519 --> 00:08:39,120
i'm hopeful that we can construct

222
00:08:39,120 --> 00:08:40,559
quantum lightning from well-studied

223
00:08:40,559 --> 00:08:42,479
assumptions and i'm eager to see where

224
00:08:42,479 --> 00:08:46,279
the field goes from here

