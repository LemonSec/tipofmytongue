1
00:00:07,200 --> 00:00:10,400
hi my name is mary muller and today i am

2
00:00:10,400 --> 00:00:12,320
going to be giving a presentation on

3
00:00:12,320 --> 00:00:15,200
aggregateable distributed key generation

4
00:00:15,200 --> 00:00:18,880
this is a joint work with covey phillip

5
00:00:18,880 --> 00:00:22,160
sarah gillard and alan

6
00:00:22,160 --> 00:00:25,519
and the idea is that we want to be able

7
00:00:25,519 --> 00:00:28,640
to generate keys in a way which is

8
00:00:28,640 --> 00:00:30,240
non-interactive

9
00:00:30,240 --> 00:00:32,800
and in a way where we are able to

10
00:00:32,800 --> 00:00:34,880
communicate as little information as

11
00:00:34,880 --> 00:00:38,640
possible over peer-to-peer channels

12
00:00:39,680 --> 00:00:42,879
our main contributions are four-fold

13
00:00:42,879 --> 00:00:44,800
first we have a new construction of a

14
00:00:44,800 --> 00:00:46,800
dkg

15
00:00:46,800 --> 00:00:49,760
second we have a new construction of a

16
00:00:49,760 --> 00:00:52,399
fully structure preserving the uf

17
00:00:52,399 --> 00:00:54,719
otherwise known as a unique signature

18
00:00:54,719 --> 00:00:56,719
scheme and this signature scheme has

19
00:00:56,719 --> 00:01:01,039
been designed to work well with our dkg

20
00:01:01,039 --> 00:01:04,479
we have also presented some new dkg

21
00:01:04,479 --> 00:01:06,720
definitions i don't know how many of you

22
00:01:06,720 --> 00:01:08,880
are familiar with the literature on dkg

23
00:01:08,880 --> 00:01:12,799
definitions but generally speaking you

24
00:01:12,799 --> 00:01:15,040
they are a hard thing to define because

25
00:01:15,040 --> 00:01:17,680
you have to talk about how

26
00:01:17,680 --> 00:01:19,680
key generation might work despite the

27
00:01:19,680 --> 00:01:21,680
fact that you don't necessarily know

28
00:01:21,680 --> 00:01:23,360
what scheme the key is going to be used

29
00:01:23,360 --> 00:01:24,960
in

30
00:01:24,960 --> 00:01:28,159
um and we also look into the proving

31
00:01:28,159 --> 00:01:31,680
techniques which are being used in dkgs

32
00:01:31,680 --> 00:01:34,880
and we find a way that we are able to

33
00:01:34,880 --> 00:01:37,520
show that our dkg is secure

34
00:01:37,520 --> 00:01:39,280
despite the fact that we only have one

35
00:01:39,280 --> 00:01:41,040
round of communication and that the

36
00:01:41,040 --> 00:01:42,880
output of our dkg is not completely

37
00:01:42,880 --> 00:01:43,840
random

38
00:01:43,840 --> 00:01:45,520
so being able to use our new proving

39
00:01:45,520 --> 00:01:48,320
techniques in order to get security even

40
00:01:48,320 --> 00:01:50,159
in this setting means that we are able

41
00:01:50,159 --> 00:01:51,600
to come up with a more efficient

42
00:01:51,600 --> 00:01:54,600
construction

43
00:01:54,640 --> 00:01:56,640
for those of you who don't know a

44
00:01:56,640 --> 00:01:58,960
distributed key generation algorithm

45
00:01:58,960 --> 00:02:03,439
is a means to generate a public key

46
00:02:03,439 --> 00:02:04,399
um

47
00:02:04,399 --> 00:02:06,159
in a way where

48
00:02:06,159 --> 00:02:08,639
nobody knows the secret key so in a way

49
00:02:08,639 --> 00:02:10,959
it's a trusted setup

50
00:02:10,959 --> 00:02:11,680
but

51
00:02:11,680 --> 00:02:13,680
such still such that if you want to do

52
00:02:13,680 --> 00:02:15,440
some kind of operation such as

53
00:02:15,440 --> 00:02:18,000
encryption or signing then as long as

54
00:02:18,000 --> 00:02:20,560
enough people are participating then

55
00:02:20,560 --> 00:02:22,080
there is enough secret shared

56
00:02:22,080 --> 00:02:24,000
information between them that they are

57
00:02:24,000 --> 00:02:27,200
able to generate something which

58
00:02:27,200 --> 00:02:29,599
will verify with respect to the shared

59
00:02:29,599 --> 00:02:32,238
public key

60
00:02:34,160 --> 00:02:37,120
to a classic places where they used all

61
00:02:37,120 --> 00:02:39,599
the time is for threshold encryption and

62
00:02:39,599 --> 00:02:42,000
for threshold signatures

63
00:02:42,000 --> 00:02:44,879
with threshold encryption you want to

64
00:02:44,879 --> 00:02:46,640
decrypt something in a database you

65
00:02:46,640 --> 00:02:49,120
maybe don't trust just one person to

66
00:02:49,120 --> 00:02:50,720
decrypt because

67
00:02:50,720 --> 00:02:52,400
maybe that one person could be corrupted

68
00:02:52,400 --> 00:02:54,239
and maybe the information is very

69
00:02:54,239 --> 00:02:55,599
important

70
00:02:55,599 --> 00:02:58,000
so here you would say that we need at

71
00:02:58,000 --> 00:03:00,239
least two out of three people

72
00:03:00,239 --> 00:03:02,000
in order to be able to decrypt the

73
00:03:02,000 --> 00:03:03,440
information

74
00:03:03,440 --> 00:03:06,640
it also comes up in um

75
00:03:06,640 --> 00:03:09,519
in verifiable elections all the time

76
00:03:09,519 --> 00:03:11,760
another situation where distributed key

77
00:03:11,760 --> 00:03:14,000
generation algorithms are used is in

78
00:03:14,000 --> 00:03:15,840
threshold signatures

79
00:03:15,840 --> 00:03:19,120
so here we want to authorize an action

80
00:03:19,120 --> 00:03:20,480
of the action

81
00:03:20,480 --> 00:03:22,959
that we might want to authorize might

82
00:03:22,959 --> 00:03:25,360
for example be that

83
00:03:25,360 --> 00:03:28,400
we want to have some kind of key which

84
00:03:28,400 --> 00:03:31,440
is storing lots of crypto funds in this

85
00:03:31,440 --> 00:03:32,400
situation

86
00:03:32,400 --> 00:03:34,720
we maybe don't want that to trust our

87
00:03:34,720 --> 00:03:37,440
secret key just with one party because

88
00:03:37,440 --> 00:03:38,640
um

89
00:03:38,640 --> 00:03:40,400
because that one party might then go and

90
00:03:40,400 --> 00:03:43,040
steal all the money but maybe we're okay

91
00:03:43,040 --> 00:03:47,440
to trust a group of um

92
00:03:47,440 --> 00:03:50,480
a group of people say but equally we

93
00:03:50,480 --> 00:03:52,400
still want it to be the case that if

94
00:03:52,400 --> 00:03:54,239
we're not able to communicate with

95
00:03:54,239 --> 00:03:56,319
everybody whom we've um

96
00:03:56,319 --> 00:03:57,439
interested

97
00:03:57,439 --> 00:03:58,959
shares of the secret key with we can

98
00:03:58,959 --> 00:04:01,280
still participate this is why t might be

99
00:04:01,280 --> 00:04:03,840
less than n

100
00:04:06,400 --> 00:04:08,640
so there are alternative situations uh

101
00:04:08,640 --> 00:04:10,319
alternative ways in which you can

102
00:04:10,319 --> 00:04:12,239
generate um

103
00:04:12,239 --> 00:04:14,000
threshold signatures largely just by

104
00:04:14,000 --> 00:04:15,040
having

105
00:04:15,040 --> 00:04:16,798
you need to have seven out of ten

106
00:04:16,798 --> 00:04:19,120
signatures in order to sign would be a

107
00:04:19,120 --> 00:04:20,320
classic

108
00:04:20,320 --> 00:04:21,759
a situation where this really doesn't

109
00:04:21,759 --> 00:04:24,320
work is with randomness beacons

110
00:04:24,320 --> 00:04:27,680
the reason here being that um

111
00:04:27,680 --> 00:04:30,479
if we want to have a good source of

112
00:04:30,479 --> 00:04:33,600
randomness then we really need there to

113
00:04:33,600 --> 00:04:36,560
be a fixed output

114
00:04:36,560 --> 00:04:38,000
which is um

115
00:04:38,000 --> 00:04:40,000
not known to any party in advance but

116
00:04:40,000 --> 00:04:42,720
any party can compute but enough parties

117
00:04:42,720 --> 00:04:44,320
can compute

118
00:04:44,320 --> 00:04:46,880
if enough of them can collaborate so if

119
00:04:46,880 --> 00:04:49,199
you don't know the public key in advance

120
00:04:49,199 --> 00:04:50,160
then

121
00:04:50,160 --> 00:04:51,440
as in you don't know who's going to

122
00:04:51,440 --> 00:04:53,680
participate then this would cause you a

123
00:04:53,680 --> 00:04:55,919
problem because the output would be

124
00:04:55,919 --> 00:04:59,280
different depending on what public key

125
00:04:59,280 --> 00:05:00,240
so

126
00:05:00,240 --> 00:05:02,639
situations where we might want to run

127
00:05:02,639 --> 00:05:05,840
this beacon is in consensus protocols

128
00:05:05,840 --> 00:05:07,680
certainly this has come up in dfinity

129
00:05:07,680 --> 00:05:09,680
this has come up in ethereum 2.8 this

130
00:05:09,680 --> 00:05:12,720
has been part of the league of entropy

131
00:05:12,720 --> 00:05:16,160
who produced the randomness speaking

132
00:05:16,160 --> 00:05:17,360
ground

133
00:05:17,360 --> 00:05:20,479
have been studying for a long time

134
00:05:20,479 --> 00:05:22,080
and it

135
00:05:22,080 --> 00:05:24,240
can solve problems in consensus

136
00:05:24,240 --> 00:05:26,400
protocols where you might have a rushing

137
00:05:26,400 --> 00:05:28,960
adversary that might play last

138
00:05:28,960 --> 00:05:31,120
and by playing last

139
00:05:31,120 --> 00:05:33,520
although they're able to not

140
00:05:33,520 --> 00:05:36,000
fully able to influence what the output

141
00:05:36,000 --> 00:05:38,160
of the hash is maybe they can hash

142
00:05:38,160 --> 00:05:41,440
something 5 10 20 times until they get

143
00:05:41,440 --> 00:05:43,360
the outcome which is most favorable to

144
00:05:43,360 --> 00:05:44,479
them

145
00:05:44,479 --> 00:05:46,479
and then submit their output

146
00:05:46,479 --> 00:05:48,720
and this is something which can have

147
00:05:48,720 --> 00:05:51,199
really bad

148
00:05:51,199 --> 00:05:53,600
effects on a consensus protocol

149
00:05:53,600 --> 00:05:56,319
where you might for example be electing

150
00:05:56,319 --> 00:05:58,240
the leader for the next round if you

151
00:05:58,240 --> 00:05:59,840
have a rushing adversary that can affect

152
00:05:59,840 --> 00:06:01,360
the randomness maybe they always make

153
00:06:01,360 --> 00:06:03,520
sure that one of their

154
00:06:03,520 --> 00:06:05,280
corrupted nodes is the leader in the

155
00:06:05,280 --> 00:06:07,440
next round so they can prevent progress

156
00:06:07,440 --> 00:06:08,880
from happening

157
00:06:08,880 --> 00:06:10,000
um

158
00:06:10,000 --> 00:06:11,360
and that's sort of

159
00:06:11,360 --> 00:06:14,479
just a good situation

160
00:06:16,560 --> 00:06:18,840
the way in which

161
00:06:18,840 --> 00:06:21,680
um one way i should say there are other

162
00:06:21,680 --> 00:06:23,680
ways but one very effective way for

163
00:06:23,680 --> 00:06:25,680
building a random bacon is to have a

164
00:06:25,680 --> 00:06:27,759
unique threshold signature

165
00:06:27,759 --> 00:06:29,840
so this is the signature where t out of

166
00:06:29,840 --> 00:06:31,360
n parties must

167
00:06:31,360 --> 00:06:33,360
compute the signature but also such that

168
00:06:33,360 --> 00:06:35,199
you always have the same signature

169
00:06:35,199 --> 00:06:38,880
output on any given message

170
00:06:40,800 --> 00:06:42,400
the classic

171
00:06:42,400 --> 00:06:44,160
algorithm that you would use for a

172
00:06:44,160 --> 00:06:49,000
unique threshold signature is bls

173
00:06:50,400 --> 00:06:52,160
in this work we're not going to be able

174
00:06:52,160 --> 00:06:55,440
to cover bls signatures we um

175
00:06:55,440 --> 00:06:58,240
need the output of our dkg to be a group

176
00:06:58,240 --> 00:07:00,560
element rather than a field element so

177
00:07:00,560 --> 00:07:02,479
bls will just not work

178
00:07:02,479 --> 00:07:03,759
um

179
00:07:03,759 --> 00:07:06,160
what we do provide is an alternative

180
00:07:06,160 --> 00:07:08,639
signature which will work with our dkg

181
00:07:08,639 --> 00:07:11,440
and also satisfies the uniqueness

182
00:07:11,440 --> 00:07:14,400
property it's also um

183
00:07:14,400 --> 00:07:16,560
it has many of the same properties as

184
00:07:16,560 --> 00:07:19,840
bls we've got short signatures we have

185
00:07:19,840 --> 00:07:21,759
that the signatures can be aggregated

186
00:07:21,759 --> 00:07:23,680
together fairly easily

187
00:07:23,680 --> 00:07:24,880
um

188
00:07:24,880 --> 00:07:27,280
in essence it looks very similar to bls

189
00:07:27,280 --> 00:07:28,720
however

190
00:07:28,720 --> 00:07:31,120
our secret key is a group element and

191
00:07:31,120 --> 00:07:34,639
therefore we'll work with ekg

192
00:07:35,840 --> 00:07:37,840
i've been talking about dkgs at last as

193
00:07:37,840 --> 00:07:39,120
a means to

194
00:07:39,120 --> 00:07:41,440
have a shared secret which can then be

195
00:07:41,440 --> 00:07:43,680
used as part of a public key

196
00:07:43,680 --> 00:07:45,039
many of you might be thinking this

197
00:07:45,039 --> 00:07:47,039
sounds very similar to secret sharing it

198
00:07:47,039 --> 00:07:48,000
is

199
00:07:48,000 --> 00:07:48,960
in fact

200
00:07:48,960 --> 00:07:51,280
every dkg that i know of

201
00:07:51,280 --> 00:07:53,919
is essentially a secret sharing scheme

202
00:07:53,919 --> 00:07:55,440
but just with

203
00:07:55,440 --> 00:07:57,759
many participants such that you don't

204
00:07:57,759 --> 00:08:00,160
have a single trusted dealer you have

205
00:08:00,160 --> 00:08:02,000
many trusted dealers

206
00:08:02,000 --> 00:08:04,319
and when you put them all together you

207
00:08:04,319 --> 00:08:07,360
get an npc such that no single person

208
00:08:07,360 --> 00:08:09,919
needs to be trusted

209
00:08:09,919 --> 00:08:11,759
um a classic

210
00:08:11,759 --> 00:08:13,199
vkg

211
00:08:13,199 --> 00:08:15,039
a classic secret sharing scheme that you

212
00:08:15,039 --> 00:08:17,919
would base your dkg on would be the

213
00:08:17,919 --> 00:08:20,960
feldman um vss

214
00:08:20,960 --> 00:08:22,720
we're not using the falcon vss we are

215
00:08:22,720 --> 00:08:27,440
using the scrape vss and this was really

216
00:08:27,440 --> 00:08:29,759
the scheme that inspired our final

217
00:08:29,759 --> 00:08:32,159
result

218
00:08:34,640 --> 00:08:37,440
the big big advantage about our scheme

219
00:08:37,440 --> 00:08:39,039
over many of the other schemes in the

220
00:08:39,039 --> 00:08:40,799
literature is that we have new

221
00:08:40,799 --> 00:08:42,479
complaints arounds

222
00:08:42,479 --> 00:08:44,800
and the dfinity would refer to this

223
00:08:44,800 --> 00:08:47,760
property as being a non-interactive dkg

224
00:08:47,760 --> 00:08:49,680
we're able to just have every

225
00:08:49,680 --> 00:08:52,080
participant generate the stuff which

226
00:08:52,080 --> 00:08:56,399
they want to be able to use in order to

227
00:08:56,399 --> 00:08:57,600
have

228
00:08:57,600 --> 00:08:59,600
want to be able to use in the protocol

229
00:08:59,600 --> 00:09:01,040
encrypt all of the information which

230
00:09:01,040 --> 00:09:02,880
should be secret under the relevant

231
00:09:02,880 --> 00:09:05,040
secret keys and send that out

232
00:09:05,040 --> 00:09:06,560
and then they are done

233
00:09:06,560 --> 00:09:09,839
nothing else happens

234
00:09:13,120 --> 00:09:16,000
we are also able to do this

235
00:09:16,000 --> 00:09:18,640
fairly well very efficiently

236
00:09:18,640 --> 00:09:20,320
the reason for that is going to be

237
00:09:20,320 --> 00:09:22,240
because we can aggregate our transcripts

238
00:09:22,240 --> 00:09:24,480
which i will talk more about later

239
00:09:24,480 --> 00:09:26,560
but because we can aggregate rather than

240
00:09:26,560 --> 00:09:29,040
having to do lots of very heavy

241
00:09:29,040 --> 00:09:31,600
broadcast rounds we're instead able to

242
00:09:31,600 --> 00:09:34,560
do lots of very lightweight gossip

243
00:09:34,560 --> 00:09:36,880
rounds and only broadcast the final

244
00:09:36,880 --> 00:09:38,640
result at the end

245
00:09:38,640 --> 00:09:40,080
which essentially means we're able to

246
00:09:40,080 --> 00:09:42,959
have a non-interactive dkg which rather

247
00:09:42,959 --> 00:09:45,279
than having your

248
00:09:45,279 --> 00:09:48,320
information sent over your peer-to-peer

249
00:09:48,320 --> 00:09:50,959
channels being squared is instead n log

250
00:09:50,959 --> 00:09:53,120
squared n

251
00:09:53,120 --> 00:09:56,240
so this will make a huge difference um

252
00:09:56,240 --> 00:09:57,920
practically we believe if it gets

253
00:09:57,920 --> 00:10:00,800
implemented and certainly theoretically

254
00:10:00,800 --> 00:10:02,480
you can already see that there is a

255
00:10:02,480 --> 00:10:05,760
breakthrough here

256
00:10:05,760 --> 00:10:06,959
we have implemented the actual

257
00:10:06,959 --> 00:10:09,120
algorithms of our dkg not the gossip

258
00:10:09,120 --> 00:10:11,440
protocol but the um

259
00:10:11,440 --> 00:10:14,079
dealing the verification and

260
00:10:14,079 --> 00:10:17,920
we have that the transcript size is

261
00:10:17,920 --> 00:10:20,079
linear in the number of parties

262
00:10:20,079 --> 00:10:22,800
likewise the verification is linear

263
00:10:22,800 --> 00:10:25,200
the feeling is linear every everything

264
00:10:25,200 --> 00:10:26,959
is linear

265
00:10:26,959 --> 00:10:28,720
we think we could even improve these

266
00:10:28,720 --> 00:10:31,200
numbers further if we were to use schnau

267
00:10:31,200 --> 00:10:33,680
signatures rather than bls signatures

268
00:10:33,680 --> 00:10:35,440
but the bls signatures made her security

269
00:10:35,440 --> 00:10:37,680
proof a little bit easier so i was a bit

270
00:10:37,680 --> 00:10:39,600
cheeky there and decided to go with the

271
00:10:39,600 --> 00:10:41,200
easy proof rather than the fastest

272
00:10:41,200 --> 00:10:43,839
scheme which i possibly possibly

273
00:10:43,839 --> 00:10:47,839
implementers won't thank me for

274
00:10:48,399 --> 00:10:50,079
any downsides of our scheme i've

275
00:10:50,079 --> 00:10:52,320
mentioned this already the secrets of uh

276
00:10:52,320 --> 00:10:54,560
that we're generating are group elements

277
00:10:54,560 --> 00:10:56,640
therefore if we want to use anything

278
00:10:56,640 --> 00:10:58,240
that looks like alcohol encryption we're

279
00:10:58,240 --> 00:11:01,200
only going to be able to

280
00:11:01,200 --> 00:11:03,040
sorry i said that the reason we've done

281
00:11:03,040 --> 00:11:05,680
this is because we are going to be using

282
00:11:05,680 --> 00:11:06,720
something that looks a lot like

283
00:11:06,720 --> 00:11:08,480
alchemical encryption and algoma

284
00:11:08,480 --> 00:11:11,440
encryption cannot encrypt field elements

285
00:11:11,440 --> 00:11:14,440
efficiently

286
00:11:17,360 --> 00:11:20,079
this does not affect our

287
00:11:20,079 --> 00:11:22,160
ability to apply our results to random

288
00:11:22,160 --> 00:11:24,079
beacons it's still just as applicable to

289
00:11:24,079 --> 00:11:26,720
random beacons because we do have that

290
00:11:26,720 --> 00:11:28,399
unique threshold signature that will

291
00:11:28,399 --> 00:11:31,200
work with our scheme

292
00:11:31,519 --> 00:11:33,760
we call our unique threshold signature

293
00:11:33,760 --> 00:11:36,560
at the uf that's because it's a

294
00:11:36,560 --> 00:11:39,120
verifiable unique function and in order

295
00:11:39,120 --> 00:11:40,399
to get the randomness at the end you're

296
00:11:40,399 --> 00:11:43,360
going to have to hash it our proof size

297
00:11:43,360 --> 00:11:45,600
is two group elements bls is one group

298
00:11:45,600 --> 00:11:47,519
element we're twice as big

299
00:11:47,519 --> 00:11:51,920
a verifier computation is three pairings

300
00:11:51,920 --> 00:11:53,519
um

301
00:11:53,519 --> 00:11:55,120
so this is only a little bit more

302
00:11:55,120 --> 00:11:57,760
expensive than bls but i should also add

303
00:11:57,760 --> 00:11:59,760
a caveat being that when we want to

304
00:11:59,760 --> 00:12:03,440
derive our unique value at the end

305
00:12:03,440 --> 00:12:05,040
we're also going to have to compute

306
00:12:05,040 --> 00:12:08,519
three more pairings

307
00:12:14,000 --> 00:12:15,440
the

308
00:12:15,440 --> 00:12:17,839
starting point for our ef i would say

309
00:12:17,839 --> 00:12:20,160
was trying to

310
00:12:20,160 --> 00:12:22,240
have a bls signature

311
00:12:22,240 --> 00:12:24,639
but we're going to have that the output

312
00:12:24,639 --> 00:12:28,079
is in the target group rather than in a

313
00:12:28,079 --> 00:12:29,200
source group

314
00:12:29,200 --> 00:12:30,880
our signature doesn't include any target

315
00:12:30,880 --> 00:12:33,120
group elements i should i want to say

316
00:12:33,120 --> 00:12:36,320
very clearly now but our

317
00:12:36,320 --> 00:12:38,000
unique element is going to be that

318
00:12:38,000 --> 00:12:40,639
target group elements

319
00:12:40,639 --> 00:12:42,560
what we then do is we

320
00:12:42,560 --> 00:12:45,920
um prove that we have

321
00:12:45,920 --> 00:12:46,959
that

322
00:12:46,959 --> 00:12:48,880
the element will be well-formed when you

323
00:12:48,880 --> 00:12:51,519
put the proofs together in the

324
00:12:51,519 --> 00:12:55,120
way that we have prescribed in the paper

325
00:12:57,680 --> 00:12:59,760
i mentioned earlier that our dkg has no

326
00:12:59,760 --> 00:13:01,839
complaints around and that this is a

327
00:13:01,839 --> 00:13:03,760
really really big benefit i want to

328
00:13:03,760 --> 00:13:05,680
elaborate on that

329
00:13:05,680 --> 00:13:08,720
so in a party with a complaint in a dkg

330
00:13:08,720 --> 00:13:10,959
with a complaints round which is how

331
00:13:10,959 --> 00:13:12,639
most classically could use in the

332
00:13:12,639 --> 00:13:14,079
literature work

333
00:13:14,079 --> 00:13:16,000
you're going to have at least two rounds

334
00:13:16,000 --> 00:13:18,160
in the first round every party is going

335
00:13:18,160 --> 00:13:19,760
to generate a contribution to the public

336
00:13:19,760 --> 00:13:22,560
in the secret keys

337
00:13:22,560 --> 00:13:24,880
then every party is going to broadcast

338
00:13:24,880 --> 00:13:27,680
their contribution to the public key

339
00:13:27,680 --> 00:13:30,079
such that all parties agree on what

340
00:13:30,079 --> 00:13:33,519
these contributions are going to be

341
00:13:33,760 --> 00:13:34,959
and then

342
00:13:34,959 --> 00:13:37,279
here's where the fun starts

343
00:13:37,279 --> 00:13:40,160
because there wasn't necessarily an

344
00:13:40,160 --> 00:13:42,560
efficient way to encrypt the secret key

345
00:13:42,560 --> 00:13:45,199
contributions over public channels

346
00:13:45,199 --> 00:13:47,120
instead what they do is they send them

347
00:13:47,120 --> 00:13:49,040
over private channels

348
00:13:49,040 --> 00:13:50,800
but the problem with this is if you send

349
00:13:50,800 --> 00:13:52,560
something over a private channel then

350
00:13:52,560 --> 00:13:54,800
there's no way to prove that you didn't

351
00:13:54,800 --> 00:13:56,480
send it

352
00:13:56,480 --> 00:13:58,160
or that you did send it but the thing

353
00:13:58,160 --> 00:13:59,920
that you sent was wrong well that you

354
00:13:59,920 --> 00:14:01,040
could prove but if you didn't send

355
00:14:01,040 --> 00:14:02,639
anything at all

356
00:14:02,639 --> 00:14:03,680
then

357
00:14:03,680 --> 00:14:05,680
say

358
00:14:05,680 --> 00:14:07,680
party two party one did not send

359
00:14:07,680 --> 00:14:09,600
anything to party two there's no way

360
00:14:09,600 --> 00:14:12,000
that party two can

361
00:14:12,000 --> 00:14:15,519
convince party three of this

362
00:14:15,519 --> 00:14:18,639
beyond reasonable doubt

363
00:14:19,440 --> 00:14:21,040
so what we have to do is we have to

364
00:14:21,040 --> 00:14:23,360
engage in a complaints round party 2 is

365
00:14:23,360 --> 00:14:26,000
going to broadcast a complaint

366
00:14:26,000 --> 00:14:28,480
but party 3 isn't going to initially

367
00:14:28,480 --> 00:14:31,839
believe them

368
00:14:32,160 --> 00:14:34,800
instead what will happen is they're

369
00:14:34,800 --> 00:14:38,000
going to set um broadcast a complaint

370
00:14:38,000 --> 00:14:40,160
and then party one has a fixed amount of

371
00:14:40,160 --> 00:14:42,399
time in order to publish the secret key

372
00:14:42,399 --> 00:14:44,560
that was supposed to be sent to party

373
00:14:44,560 --> 00:14:45,680
two

374
00:14:45,680 --> 00:14:47,519
and if they don't send it within that

375
00:14:47,519 --> 00:14:50,880
time then party one gets eliminated

376
00:14:50,880 --> 00:14:52,800
and there's all sorts of ways in which

377
00:14:52,800 --> 00:14:54,480
this becomes

378
00:14:54,480 --> 00:14:56,839
difficult to manage

379
00:14:56,839 --> 00:15:00,320
and in order to make sure that it works

380
00:15:00,320 --> 00:15:01,760
you're going to need a very long delay

381
00:15:01,760 --> 00:15:03,199
between your rounds

382
00:15:03,199 --> 00:15:04,880
there's also a logical surface there's

383
00:15:04,880 --> 00:15:06,240
quite a lot of things that can go wrong

384
00:15:06,240 --> 00:15:07,519
with this sort of communication

385
00:15:07,519 --> 00:15:09,199
structure

386
00:15:09,199 --> 00:15:11,600
and another possibly less

387
00:15:11,600 --> 00:15:13,839
vital flaw but still still causes a

388
00:15:13,839 --> 00:15:15,040
problem

389
00:15:15,040 --> 00:15:16,560
is that if you have a party that

390
00:15:16,560 --> 00:15:18,639
momentarily goes offline

391
00:15:18,639 --> 00:15:20,240
and they don't receive their share from

392
00:15:20,240 --> 00:15:22,480
party one even though it was sent

393
00:15:22,480 --> 00:15:23,839
then that party can no longer

394
00:15:23,839 --> 00:15:25,279
participate in the protocol they're

395
00:15:25,279 --> 00:15:28,880
essentially a dead party who will

396
00:15:28,880 --> 00:15:31,680
not be useful

397
00:15:33,040 --> 00:15:35,680
the way we avoid this is we just encrypt

398
00:15:35,680 --> 00:15:37,920
everything over a

399
00:15:37,920 --> 00:15:41,120
public channel such that

400
00:15:41,120 --> 00:15:42,880
we can prove that the encryptions are

401
00:15:42,880 --> 00:15:45,279
correct

402
00:15:48,320 --> 00:15:50,959
if any party sends a bad encryption of

403
00:15:50,959 --> 00:15:52,399
the secret shares and everybody will

404
00:15:52,399 --> 00:15:54,880
know because it won't pass verification

405
00:15:54,880 --> 00:15:55,839
and this

406
00:15:55,839 --> 00:15:58,000
and when i say that everybody will know

407
00:15:58,000 --> 00:16:00,240
i mean that everybody everybody will

408
00:16:00,240 --> 00:16:02,160
know including parties who don't

409
00:16:02,160 --> 00:16:04,399
participate in the dkdir tool so it's

410
00:16:04,399 --> 00:16:08,040
externally verifiable

411
00:16:11,199 --> 00:16:13,360
when we're encrypting every single

412
00:16:13,360 --> 00:16:16,560
message sent from every party to every

413
00:16:16,560 --> 00:16:18,480
party

414
00:16:18,480 --> 00:16:20,959
the immediate consequence of this is

415
00:16:20,959 --> 00:16:23,519
that we would get something that is

416
00:16:23,519 --> 00:16:26,079
quadratic sized so we'd end up needing

417
00:16:26,079 --> 00:16:27,120
to send

418
00:16:27,120 --> 00:16:30,160
n squared messages

419
00:16:30,480 --> 00:16:33,040
in order to avoid having to send n

420
00:16:33,040 --> 00:16:36,079
squared messages which is is a lot what

421
00:16:36,079 --> 00:16:38,959
we do is we use the fact that dkg is

422
00:16:38,959 --> 00:16:40,959
aggregatable

423
00:16:40,959 --> 00:16:42,079
so

424
00:16:42,079 --> 00:16:45,279
we have an encryption of all of the

425
00:16:45,279 --> 00:16:48,160
secrets which are sent from party one to

426
00:16:48,160 --> 00:16:50,880
all of the other parties

427
00:16:50,880 --> 00:16:52,959
one two and three and four and five

428
00:16:52,959 --> 00:16:55,680
we can combine all of these transcripts

429
00:16:55,680 --> 00:16:57,839
into a single transcript

430
00:16:57,839 --> 00:17:00,399
that is the same size as any any of the

431
00:17:00,399 --> 00:17:03,120
individual five transcripts before

432
00:17:03,120 --> 00:17:04,559
so we're essentially compressing down

433
00:17:04,559 --> 00:17:07,359
that information

434
00:17:08,319 --> 00:17:10,959
encrypting every secret um

435
00:17:10,959 --> 00:17:12,640
means that there are large messages i

436
00:17:12,640 --> 00:17:14,559
said that previously

437
00:17:14,559 --> 00:17:16,880
as i say our aggregated messages are the

438
00:17:16,880 --> 00:17:18,799
same size as

439
00:17:18,799 --> 00:17:21,199
a single message so we're able to make

440
00:17:21,199 --> 00:17:22,959
sure that things increasingly get

441
00:17:22,959 --> 00:17:24,319
smaller

442
00:17:24,319 --> 00:17:26,400
as we're spreading the bigger

443
00:17:26,400 --> 00:17:30,640
transcripts over the over the network

444
00:17:31,039 --> 00:17:32,400
we just broadcasted all of the

445
00:17:32,400 --> 00:17:35,120
transcripts this wouldn't help us really

446
00:17:35,120 --> 00:17:36,880
um but what we're going to do is we're

447
00:17:36,880 --> 00:17:39,120
going to gradually send the transcript

448
00:17:39,120 --> 00:17:40,640
and aggregate then send the transcript

449
00:17:40,640 --> 00:17:42,960
again and aggregate and our aggregation

450
00:17:42,960 --> 00:17:44,320
supports us

451
00:17:44,320 --> 00:17:48,160
it is okay to aggregate two three four

452
00:17:48,160 --> 00:17:51,679
five six times as many times as you need

453
00:17:51,679 --> 00:17:53,520
it also does not matter which order in

454
00:17:53,520 --> 00:17:56,160
which you aggregate the transcripts

455
00:17:56,160 --> 00:17:58,320
so for example if you end up with a

456
00:17:58,320 --> 00:18:01,360
transcript which is the

457
00:18:01,360 --> 00:18:03,360
third and the

458
00:18:03,360 --> 00:18:05,679
fourth party which are pushed together

459
00:18:05,679 --> 00:18:07,760
then if you want to aggregate that with

460
00:18:07,760 --> 00:18:09,840
something with the first and third party

461
00:18:09,840 --> 00:18:11,360
even though the third party has already

462
00:18:11,360 --> 00:18:13,679
contributed you can still compress those

463
00:18:13,679 --> 00:18:15,360
together and it won't cause any trouble

464
00:18:15,360 --> 00:18:17,678
at all

465
00:18:18,880 --> 00:18:19,919
if

466
00:18:19,919 --> 00:18:21,600
this doesn't work for you

467
00:18:21,600 --> 00:18:23,520
if you're in a situation where you can't

468
00:18:23,520 --> 00:18:26,960
use our aggregateable

469
00:18:26,960 --> 00:18:29,679
a structure in order to then gossip the

470
00:18:29,679 --> 00:18:31,600
communication in order to make sure that

471
00:18:31,600 --> 00:18:33,600
everything is really small

472
00:18:33,600 --> 00:18:35,200
then

473
00:18:35,200 --> 00:18:38,160
our techniques for proving um

474
00:18:38,160 --> 00:18:41,840
our dkg is secure are also applicable to

475
00:18:41,840 --> 00:18:43,760
the pedersen dkg for certain

476
00:18:43,760 --> 00:18:46,000
applications not every application but

477
00:18:46,000 --> 00:18:47,760
it will work for blms

478
00:18:47,760 --> 00:18:50,320
bls and it will work for elgamal

479
00:18:50,320 --> 00:18:52,720
and we prove this in the paper

480
00:18:52,720 --> 00:18:54,000
um

481
00:18:54,000 --> 00:18:56,559
this brief for bls was a gap in the

482
00:18:56,559 --> 00:18:58,480
literature before despite the fact that

483
00:18:58,480 --> 00:19:00,400
people are actually using this scheme in

484
00:19:00,400 --> 00:19:02,400
practice so we thought that was fairly

485
00:19:02,400 --> 00:19:05,360
important to provide

486
00:19:05,360 --> 00:19:07,120
you will still need to do the complaints

487
00:19:07,120 --> 00:19:09,200
round but at least if the complaints

488
00:19:09,200 --> 00:19:11,039
around goes well and you figured out a

489
00:19:11,039 --> 00:19:12,400
good way to do it

490
00:19:12,400 --> 00:19:14,640
then it will be the case that the scheme

491
00:19:14,640 --> 00:19:17,440
itself is secure

492
00:19:18,000 --> 00:19:19,520
one thing i would say

493
00:19:19,520 --> 00:19:21,360
best paper award went to the attack on

494
00:19:21,360 --> 00:19:22,640
this by the way

495
00:19:22,640 --> 00:19:25,200
is that with schneider threshold

496
00:19:25,200 --> 00:19:27,760
signatures you need to be fairly careful

497
00:19:27,760 --> 00:19:29,600
there are some fairly old results in the

498
00:19:29,600 --> 00:19:31,039
literature which

499
00:19:31,039 --> 00:19:32,000
have been

500
00:19:32,000 --> 00:19:35,200
broken to the point where you can

501
00:19:35,200 --> 00:19:37,120
break it in seconds if you have a

502
00:19:37,120 --> 00:19:38,799
concurrent adversary

503
00:19:38,799 --> 00:19:39,919
probably less than that if your

504
00:19:39,919 --> 00:19:43,120
implementation isn't in python

505
00:19:43,120 --> 00:19:45,120
a little plug just at the end of my talk

506
00:19:45,120 --> 00:19:48,000
is we have shown that some newer schemes

507
00:19:48,000 --> 00:19:50,559
in the literature namely frost

508
00:19:50,559 --> 00:19:52,880
is concurrently secure under the one

509
00:19:52,880 --> 00:19:55,440
more discrete logarithm assumption

510
00:19:55,440 --> 00:19:56,320
um

511
00:19:56,320 --> 00:19:57,679
this paper

512
00:19:57,679 --> 00:19:59,440
uses proven techniques which are very

513
00:19:59,440 --> 00:20:01,520
similar to the work to the techniques in

514
00:20:01,520 --> 00:20:02,720
this paper

515
00:20:02,720 --> 00:20:05,120
however in that paper there are also

516
00:20:05,120 --> 00:20:06,559
random oracles in play which are

517
00:20:06,559 --> 00:20:07,760
programmable

518
00:20:07,760 --> 00:20:09,919
so it's not exactly the same but i would

519
00:20:09,919 --> 00:20:11,919
say that it is um

520
00:20:11,919 --> 00:20:14,480
inspired

521
00:20:15,760 --> 00:20:17,679
so to conclude our dkg is publicly

522
00:20:17,679 --> 00:20:19,440
verifiable it is aggregatable and it

523
00:20:19,440 --> 00:20:22,159
does not have complaint surrounds

524
00:20:22,159 --> 00:20:24,640
we can use gossip communication to

525
00:20:24,640 --> 00:20:25,679
reduce

526
00:20:25,679 --> 00:20:26,960
we can use gossip to reduce

527
00:20:26,960 --> 00:20:29,440
communication and we can build random

528
00:20:29,440 --> 00:20:32,559
beacons using our dkg and our uf

529
00:20:32,559 --> 00:20:33,760
our proving techniques are highly

530
00:20:33,760 --> 00:20:35,760
applicable to office schemes

531
00:20:35,760 --> 00:20:39,158
thank you very much

