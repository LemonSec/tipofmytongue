1
00:00:00,080 --> 00:00:03,919
in the paper analyzing the hpke standard

2
00:00:03,919 --> 00:00:06,399
that is joint work with joel alvin bruno

3
00:00:06,399 --> 00:00:08,880
blanchet eduard hauck ike kiltz and

4
00:00:08,880 --> 00:00:11,679
doreen rieper

5
00:00:12,160 --> 00:00:14,719
so hpke stands for hybrid public key

6
00:00:14,719 --> 00:00:15,759
encryption

7
00:00:15,759 --> 00:00:17,840
where hybrid is in the sense of the

8
00:00:17,840 --> 00:00:20,000
chemdem paradigm where we use an

9
00:00:20,000 --> 00:00:21,600
asymmetric building block as key

10
00:00:21,600 --> 00:00:24,000
encapsulation mechanism and a symmetric

11
00:00:24,000 --> 00:00:26,000
building block as data encapsulation

12
00:00:26,000 --> 00:00:28,800
mechanism for efficiency reasons

13
00:00:28,800 --> 00:00:30,160
and there is a new standard in

14
00:00:30,160 --> 00:00:32,079
development by the crypto forum research

15
00:00:32,079 --> 00:00:34,000
group inside the rtf

16
00:00:34,000 --> 00:00:36,000
which will use modern building blocks

17
00:00:36,000 --> 00:00:39,120
which will have ncca security proofs

18
00:00:39,120 --> 00:00:40,160
and

19
00:00:40,160 --> 00:00:41,520
test vectors which will help

20
00:00:41,520 --> 00:00:43,200
interoperability

21
00:00:43,200 --> 00:00:46,000
and this new standard will be used in

22
00:00:46,000 --> 00:00:48,719
two ietf projects namely the encrypted

23
00:00:48,719 --> 00:00:51,600
client hello extension of tls 1.3 and

24
00:00:51,600 --> 00:00:53,360
the messaging layer security group

25
00:00:53,360 --> 00:00:56,640
messaging protocol mls

26
00:00:56,640 --> 00:00:58,879
now the standard defines many interfaces

27
00:00:58,879 --> 00:01:01,840
and modes we only analyze one of them

28
00:01:01,840 --> 00:01:03,359
namely the single shot encryption

29
00:01:03,359 --> 00:01:06,000
interface in authenticated mode

30
00:01:06,000 --> 00:01:08,720
so our object of analysis is an

31
00:01:08,720 --> 00:01:10,560
authenticated public key encryption

32
00:01:10,560 --> 00:01:11,520
scheme

33
00:01:11,520 --> 00:01:13,520
and now i'm starting something

34
00:01:13,520 --> 00:01:15,439
that the on-site audience did not hear

35
00:01:15,439 --> 00:01:17,520
yet so that's the

36
00:01:17,520 --> 00:01:19,840
overview of the construction of auto

37
00:01:19,840 --> 00:01:21,759
authenticated public key encryption in

38
00:01:21,759 --> 00:01:24,400
the standard it uses an authenticated

39
00:01:24,400 --> 00:01:26,960
cam to generate and encapsulate a shared

40
00:01:26,960 --> 00:01:28,000
secret

41
00:01:28,000 --> 00:01:29,920
and then uses the key schedule function

42
00:01:29,920 --> 00:01:32,479
to derive a symmetric key and the nonce

43
00:01:32,479 --> 00:01:34,640
and finally encrypts the message using

44
00:01:34,640 --> 00:01:36,799
this key and nones using a dem like an

45
00:01:36,799 --> 00:01:39,119
aad scheme for example

46
00:01:39,119 --> 00:01:41,280
in this work we developed security

47
00:01:41,280 --> 00:01:43,600
notions and proofed them for

48
00:01:43,600 --> 00:01:47,119
authenticated chem and authenticated pke

49
00:01:47,119 --> 00:01:48,640
first chosen ciphertext and

50
00:01:48,640 --> 00:01:50,640
distinguishability which covers

51
00:01:50,640 --> 00:01:53,360
confidentiality of encapsulations and

52
00:01:53,360 --> 00:01:56,159
ciphertext and second authenticity which

53
00:01:56,159 --> 00:01:58,560
covers unforgibility of encapsulations

54
00:01:58,560 --> 00:02:00,960
and ciphertexts and for these two we

55
00:02:00,960 --> 00:02:02,719
have two different settings first the

56
00:02:02,719 --> 00:02:05,200
outsider setting where an adversary can

57
00:02:05,200 --> 00:02:07,280
choose from the honest key pairs when

58
00:02:07,280 --> 00:02:09,598
calling oracles and no honest key pair

59
00:02:09,598 --> 00:02:10,959
is compromised

60
00:02:10,959 --> 00:02:12,800
and then the insider setting where the

61
00:02:12,800 --> 00:02:14,959
adversary is allowed to choose

62
00:02:14,959 --> 00:02:17,440
sender or receive a secret keys

63
00:02:17,440 --> 00:02:19,520
and this is a stronger notion than

64
00:02:19,520 --> 00:02:22,160
if we would only allow to compromise

65
00:02:22,160 --> 00:02:24,720
honestly generated key pairs

66
00:02:24,720 --> 00:02:26,640
the standard instantiates the

67
00:02:26,640 --> 00:02:28,319
authenticated chem with the divi

68
00:02:28,319 --> 00:02:30,560
helmet-based construction and for this

69
00:02:30,560 --> 00:02:33,440
we prove outsider cca inside a cca and

70
00:02:33,440 --> 00:02:34,879
outsider out

71
00:02:34,879 --> 00:02:36,640
security notions and also for the

72
00:02:36,640 --> 00:02:39,680
generic apke construction that i just

73
00:02:39,680 --> 00:02:41,040
showed

74
00:02:41,040 --> 00:02:44,080
against the insider out notions there is

75
00:02:44,080 --> 00:02:46,800
attacks against the different based acam

76
00:02:46,800 --> 00:02:48,239
and also against the generic

77
00:02:48,239 --> 00:02:50,959
construction

78
00:02:50,959 --> 00:02:52,879
so i said it's a diffie-hellman based

79
00:02:52,879 --> 00:02:55,280
instantiation of the authenticated chem

80
00:02:55,280 --> 00:02:57,840
and hpke allows for five different

81
00:02:57,840 --> 00:03:00,159
elliptic curves to be used with it first

82
00:03:00,159 --> 00:03:01,760
three nist curves and then curve two

83
00:03:01,760 --> 00:03:03,120
five five four nine and curve four four

84
00:03:03,120 --> 00:03:05,519
eight and it's important to know that

85
00:03:05,519 --> 00:03:07,840
these nist that while these nist curves

86
00:03:07,840 --> 00:03:10,159
are prime order groups curve two five

87
00:03:10,159 --> 00:03:11,599
five four nine and q four four eight are

88
00:03:11,599 --> 00:03:13,840
not prime order groups so to give one

89
00:03:13,840 --> 00:03:16,319
particular example of a consequence that

90
00:03:16,319 --> 00:03:18,400
is that for each honestly generated

91
00:03:18,400 --> 00:03:20,640
public key in these two curves there is

92
00:03:20,640 --> 00:03:22,560
a small small number of equivalent

93
00:03:22,560 --> 00:03:24,640
public keys that would lead to the same

94
00:03:24,640 --> 00:03:27,840
different shark secret

95
00:03:27,840 --> 00:03:31,040
now to analyze hpke

96
00:03:31,040 --> 00:03:33,040
for all these five different groups we

97
00:03:33,040 --> 00:03:35,360
define a framework we call nominal

98
00:03:35,360 --> 00:03:37,599
groups to cover both prime order and

99
00:03:37,599 --> 00:03:40,080
non-prime order groups in one model

100
00:03:40,080 --> 00:03:42,159
and in short we do not assume a group

101
00:03:42,159 --> 00:03:44,159
structure but we only assume an

102
00:03:44,159 --> 00:03:46,480
exponentiation function with certain

103
00:03:46,480 --> 00:03:48,959
properties

104
00:03:48,959 --> 00:03:51,280
so to conclude last slide

105
00:03:51,280 --> 00:03:52,959
what we did in this work is prove that

106
00:03:52,959 --> 00:03:54,879
hpke out

107
00:03:54,879 --> 00:03:56,799
satisfies its desired security

108
00:03:56,799 --> 00:03:59,040
properties with a maximum security level

109
00:03:59,040 --> 00:04:01,840
of 128 bit

110
00:04:01,840 --> 00:04:04,080
most of our proofs are done in the

111
00:04:04,080 --> 00:04:06,560
crypto verif proof assistant

112
00:04:06,560 --> 00:04:08,239
and what we prove is the following as i

113
00:04:08,239 --> 00:04:10,480
said these three properties for a

114
00:04:10,480 --> 00:04:12,959
different hermann based acam

115
00:04:12,959 --> 00:04:14,799
then we prove that the key schedule is a

116
00:04:14,799 --> 00:04:16,160
prf

117
00:04:16,160 --> 00:04:18,160
and finally we prove composition

118
00:04:18,160 --> 00:04:20,639
theorems assuming that we have an acam

119
00:04:20,639 --> 00:04:22,000
that

120
00:04:22,000 --> 00:04:23,919
adheres to these security notions we

121
00:04:23,919 --> 00:04:25,919
prove that the acamdem construction

122
00:04:25,919 --> 00:04:28,080
adheres to the appropriate

123
00:04:28,080 --> 00:04:30,160
notions respectively

124
00:04:30,160 --> 00:04:33,120
and then we provide a handwritten proof

125
00:04:33,120 --> 00:04:35,280
handwritten proofs for all for for the

126
00:04:35,280 --> 00:04:38,080
security notions that the single user

127
00:04:38,080 --> 00:04:41,440
two user notions for acam

128
00:04:41,440 --> 00:04:43,680
imply their multi-user security notion

129
00:04:43,680 --> 00:04:46,240
and that's for example useful to close

130
00:04:46,240 --> 00:04:48,720
the gap to proofs of for example post

131
00:04:48,720 --> 00:04:50,800
quantum camps because they are usually

132
00:04:50,800 --> 00:04:53,199
only analyzed in

133
00:04:53,199 --> 00:04:56,080
single user two user notions

134
00:04:56,080 --> 00:04:57,840
we leave one open question and that is

135
00:04:57,840 --> 00:04:59,759
about the multi-key security of current

136
00:04:59,759 --> 00:05:01,919
aad schemes

137
00:05:01,919 --> 00:05:02,880
because

138
00:05:02,880 --> 00:05:05,199
the the current proofs cannot really

139
00:05:05,199 --> 00:05:09,199
guarantee that aes 128-bit gcm for

140
00:05:09,199 --> 00:05:10,560
example

141
00:05:10,560 --> 00:05:12,639
can really provide multi-key security

142
00:05:12,639 --> 00:05:15,520
for 128 bit so that's an open question

143
00:05:15,520 --> 00:05:16,560
we leave

144
00:05:16,560 --> 00:05:20,320
and to repeat we have this indeed this

145
00:05:20,320 --> 00:05:22,720
contribution of independent interest of

146
00:05:22,720 --> 00:05:25,120
re-randomizable nominal groups to cover

147
00:05:25,120 --> 00:05:26,800
prime order and non-primordial groups in

148
00:05:26,800 --> 00:05:28,080
one model

149
00:05:28,080 --> 00:05:30,080
so if you take away one thing from this

150
00:05:30,080 --> 00:05:33,120
talk remember that curve25549 and curf48

151
00:05:33,120 --> 00:05:35,360
are not prime order groups please spread

152
00:05:35,360 --> 00:05:37,039
the word

153
00:05:37,039 --> 00:05:38,960
if you want to read more about this make

154
00:05:38,960 --> 00:05:40,720
sure to read a long version of our paper

155
00:05:40,720 --> 00:05:44,479
because we did some fixes since the

156
00:05:44,479 --> 00:05:46,479
conference version and

157
00:05:46,479 --> 00:05:47,759
if you want to learn crypto verift

158
00:05:47,759 --> 00:05:50,240
there's a recorded video tutorial thank

159
00:05:50,240 --> 00:05:53,240
you

160
00:05:58,800 --> 00:06:00,960
thank you very much benjamin i don't see

161
00:06:00,960 --> 00:06:03,600
any questions online remotely are there

162
00:06:03,600 --> 00:06:05,840
any questions in the room

163
00:06:05,840 --> 00:06:09,119
yes i'm gonna come to you

164
00:06:13,199 --> 00:06:15,680
what was it

165
00:06:16,880 --> 00:06:19,039
so you were saying that the the groups

166
00:06:19,039 --> 00:06:20,880
that like i don't remember the group

167
00:06:20,880 --> 00:06:23,360
order but there are some non-primordial

168
00:06:23,360 --> 00:06:24,479
groups

169
00:06:24,479 --> 00:06:27,680
but uh other subgroups that are prime

170
00:06:27,680 --> 00:06:29,840
order actually that can be used fairly

171
00:06:29,840 --> 00:06:34,160
uh i mean like kind of similarly

172
00:06:34,160 --> 00:06:36,479
so inside curve two five four nine and

173
00:06:36,479 --> 00:06:38,240
two four four eight there is uh prime

174
00:06:38,240 --> 00:06:40,160
order groups

175
00:06:40,160 --> 00:06:42,400
so

176
00:06:42,960 --> 00:06:46,560
what we do in the model is

177
00:06:46,560 --> 00:06:48,600
we we need to identify the

178
00:06:48,600 --> 00:06:50,080
[Music]

179
00:06:50,080 --> 00:06:53,680
the subset of honestly generated private

180
00:06:53,680 --> 00:06:54,800
keys

181
00:06:54,800 --> 00:06:57,599
and then another

182
00:06:57,599 --> 00:06:59,919
set of private keys in which the

183
00:06:59,919 --> 00:07:02,960
discrete log is unique and for prime

184
00:07:02,960 --> 00:07:05,280
order groups these two sets are the same

185
00:07:05,280 --> 00:07:06,880
and for curve of

186
00:07:06,880 --> 00:07:09,440
these other two curves

187
00:07:09,440 --> 00:07:11,039
they are not the same so we have a

188
00:07:11,039 --> 00:07:12,080
pyramid

189
00:07:12,080 --> 00:07:14,240
in the model delta n we call it which is

190
00:07:14,240 --> 00:07:16,639
zero for prime order groups and which is

191
00:07:16,639 --> 00:07:19,280
negligibly small for um curve two five

192
00:07:19,280 --> 00:07:22,000
five four nine and four four eight

193
00:07:22,000 --> 00:07:25,120
and basically in the proof for each

194
00:07:25,120 --> 00:07:28,080
honestly generated private key we will

195
00:07:28,080 --> 00:07:29,520
need to add

196
00:07:29,520 --> 00:07:32,880
one delta n to the

197
00:07:32,880 --> 00:07:36,159
to the probability bound

198
00:07:37,840 --> 00:07:39,280
thank you

199
00:07:39,280 --> 00:07:41,039
thanks any more questions in the

200
00:07:41,039 --> 00:07:43,360
audience

201
00:07:43,360 --> 00:07:45,360
let me check again if something popped

202
00:07:45,360 --> 00:07:47,520
up online

203
00:07:47,520 --> 00:07:50,000
i don't see any other questions so uh in

204
00:07:50,000 --> 00:07:51,840
the interest of time we will move to the

205
00:07:51,840 --> 00:07:53,919
next talk thank again benjamin

206
00:07:53,919 --> 00:07:57,080
thank you

207
00:08:16,560 --> 00:08:18,080
now how do you

208
00:08:18,080 --> 00:08:22,520
how do you get this out of the way

209
00:08:32,719 --> 00:08:35,719
yes

210
00:08:40,399 --> 00:08:41,279
yeah

211
00:08:41,279 --> 00:08:43,360
it seems it's working

212
00:08:43,360 --> 00:08:45,680
okay

213
00:08:45,839 --> 00:08:47,920
okay so the next talk on tightly secure

214
00:08:47,920 --> 00:08:50,480
authenticated key exchange revisited uh

215
00:08:50,480 --> 00:08:53,040
by tibor jaeger early clothes dorian

216
00:08:53,040 --> 00:08:55,439
ripple

217
00:09:07,040 --> 00:09:09,519
consider two available alice and bob and

218
00:09:09,519 --> 00:09:11,360
they exchange some messages and in the

219
00:09:11,360 --> 00:09:13,760
end they will use these to compute a

220
00:09:13,760 --> 00:09:16,560
shared session key and the session key

221
00:09:16,560 --> 00:09:18,399
can then be used with a symmetric

222
00:09:18,399 --> 00:09:19,519
primitive

223
00:09:19,519 --> 00:09:23,279
to encrypt further traffic and ecky is a

224
00:09:23,279 --> 00:09:25,040
very important cryptographic building

225
00:09:25,040 --> 00:09:25,920
block

226
00:09:25,920 --> 00:09:27,839
it is widely used in practice for

227
00:09:27,839 --> 00:09:30,000
example in the tls protocol

228
00:09:30,000 --> 00:09:32,399
and when we analyze the security of ake

229
00:09:32,399 --> 00:09:33,839
protocols

230
00:09:33,839 --> 00:09:36,000
we put an adversary eve in between the

231
00:09:36,000 --> 00:09:37,680
interaction and now we don't only

232
00:09:37,680 --> 00:09:39,680
consider two users but in the security

233
00:09:39,680 --> 00:09:41,920
model we have many users holding many

234
00:09:41,920 --> 00:09:43,200
sessions

235
00:09:43,200 --> 00:09:45,360
and we let eve control the whole

236
00:09:45,360 --> 00:09:47,920
networks that means she can drop inject

237
00:09:47,920 --> 00:09:49,600
or modify messages

238
00:09:49,600 --> 00:09:51,200
we also give her access to secret

239
00:09:51,200 --> 00:09:53,519
information that means she can corrupt

240
00:09:53,519 --> 00:09:56,080
the user's long-term keys she can reveal

241
00:09:56,080 --> 00:09:59,200
ephemeral states and also session keys

242
00:09:59,200 --> 00:10:01,200
and then we model a security with a

243
00:10:01,200 --> 00:10:03,360
so-called challenge oracle

244
00:10:03,360 --> 00:10:05,600
so in this case if wants to challenge

245
00:10:05,600 --> 00:10:07,760
the session between alice and bob which

246
00:10:07,760 --> 00:10:09,920
means she gets either the real key or a

247
00:10:09,920 --> 00:10:13,600
random key depending on a secret bit b

248
00:10:13,600 --> 00:10:15,279
and in our model we have multiple of

249
00:10:15,279 --> 00:10:17,279
these challenge queries which all use

250
00:10:17,279 --> 00:10:18,480
the same

251
00:10:18,480 --> 00:10:20,399
challenge bit and this is tightly

252
00:10:20,399 --> 00:10:23,040
equivalent to real or random security

253
00:10:23,040 --> 00:10:25,040
which is mostly used in composition

254
00:10:25,040 --> 00:10:27,200
theories because as i said we don't want

255
00:10:27,200 --> 00:10:30,160
to use ake as a standalone primitive

256
00:10:30,160 --> 00:10:31,600
but we want to compose it with a

257
00:10:31,600 --> 00:10:33,360
symmetric scheme

258
00:10:33,360 --> 00:10:35,680
um some background on provable security

259
00:10:35,680 --> 00:10:37,839
so this security experiment i just

260
00:10:37,839 --> 00:10:39,519
explained is

261
00:10:39,519 --> 00:10:41,200
modeled as a game between challenger and

262
00:10:41,200 --> 00:10:44,320
anniversary and as usually done we

263
00:10:44,320 --> 00:10:46,399
prove security by contradiction using a

264
00:10:46,399 --> 00:10:48,959
security reduction that means we assume

265
00:10:48,959 --> 00:10:50,959
there exists an adversary a against our

266
00:10:50,959 --> 00:10:53,680
scheme in this case the ake protocol and

267
00:10:53,680 --> 00:10:56,240
we use that adversary to build an

268
00:10:56,240 --> 00:10:58,320
another adversary b that solves a

269
00:10:58,320 --> 00:11:00,640
computationally hard problem

270
00:11:00,640 --> 00:11:03,120
and we now call this reduction tight if

271
00:11:03,120 --> 00:11:05,120
a and b have about the same advantage

272
00:11:05,120 --> 00:11:07,519
and about the same running time

273
00:11:07,519 --> 00:11:09,519
and what that means in particular for

274
00:11:09,519 --> 00:11:12,079
ake this these bonds should not depend

275
00:11:12,079 --> 00:11:14,320
on the numbers of users and the numbers

276
00:11:14,320 --> 00:11:15,920
of sessions

277
00:11:15,920 --> 00:11:18,399
and this is relevant in order to choose

278
00:11:18,399 --> 00:11:20,800
the the system parameters because in

279
00:11:20,800 --> 00:11:23,760
fact only a tight proof allows you um

280
00:11:23,760 --> 00:11:26,399
to use like standard parameters in a

281
00:11:26,399 --> 00:11:29,839
theoretically sound way

282
00:11:30,000 --> 00:11:32,240
so the first tightly secure ake was

283
00:11:32,240 --> 00:11:36,160
proposed by bada at ala tcc 2015 um they

284
00:11:36,160 --> 00:11:38,399
focused on ake in the standard model but

285
00:11:38,399 --> 00:11:40,720
they used a slightly different model so

286
00:11:40,720 --> 00:11:43,279
they in in their model in for each

287
00:11:43,279 --> 00:11:45,360
challenge they choose a new random bit

288
00:11:45,360 --> 00:11:46,880
and in the end the adversary only has to

289
00:11:46,880 --> 00:11:49,120
guess like one of these bits um which

290
00:11:49,120 --> 00:11:51,360
does not um have these tight composition

291
00:11:51,360 --> 00:11:54,320
properties that we actually want

292
00:11:54,320 --> 00:11:58,399
uh then at crypto 2018 houston and yaga

293
00:11:58,399 --> 00:12:00,320
proposed some variant of the scientific

294
00:12:00,320 --> 00:12:02,079
helmet protocol in the random oracle

295
00:12:02,079 --> 00:12:03,839
model which allows them to get tight

296
00:12:03,839 --> 00:12:05,120
proof but they also use this

297
00:12:05,120 --> 00:12:07,360
multi-challenge bid model

298
00:12:07,360 --> 00:12:09,600
um then at crypto one year later

299
00:12:09,600 --> 00:12:11,360
congratula

300
00:12:11,360 --> 00:12:13,600
analyze also the few helmet protocols in

301
00:12:13,600 --> 00:12:15,680
the random oracle model and they are the

302
00:12:15,680 --> 00:12:18,079
first to introduce this single challenge

303
00:12:18,079 --> 00:12:21,519
bit model in in the context of ake

304
00:12:21,519 --> 00:12:24,240
but their proof is not completely tight

305
00:12:24,240 --> 00:12:26,399
then last year at asia crypt the uh i

306
00:12:26,399 --> 00:12:28,639
focused again on standard model ake but

307
00:12:28,639 --> 00:12:29,920
they switched back to this

308
00:12:29,920 --> 00:12:31,760
multi-challenge bit model

309
00:12:31,760 --> 00:12:32,800
and now

310
00:12:32,800 --> 00:12:34,079
our work

311
00:12:34,079 --> 00:12:36,959
analyzes aka two ake protocols in the

312
00:12:36,959 --> 00:12:38,800
random oracle model we have a tight

313
00:12:38,800 --> 00:12:40,240
proof in this

314
00:12:40,240 --> 00:12:42,800
more useful single challenge with model

315
00:12:42,800 --> 00:12:44,639
and in addition to that we also look at

316
00:12:44,639 --> 00:12:48,000
a slightly stronger model where we allow

317
00:12:48,000 --> 00:12:50,839
ephemeral state reveals

318
00:12:50,839 --> 00:12:52,639
some

319
00:12:52,639 --> 00:12:54,959
background on our contributions

320
00:12:54,959 --> 00:12:57,279
so it is widely known how to build ake

321
00:12:57,279 --> 00:12:59,120
with implicit authentication from key

322
00:12:59,120 --> 00:13:01,200
encapsulation mechanisms but the

323
00:13:01,200 --> 00:13:02,560
question is how can we get this

324
00:13:02,560 --> 00:13:04,560
implication tight and this is what we

325
00:13:04,560 --> 00:13:06,320
analyzed and we proposed something we

326
00:13:06,320 --> 00:13:08,399
call a non-committing camp

327
00:13:08,399 --> 00:13:10,800
plus the random oracle

328
00:13:10,800 --> 00:13:13,760
to get this tied and we can also um

329
00:13:13,760 --> 00:13:15,600
instantiate this non-committing camera

330
00:13:15,600 --> 00:13:16,880
with the hashproof system and if the

331
00:13:16,880 --> 00:13:19,200
hashpro system has a tight multi-instant

332
00:13:19,200 --> 00:13:21,760
subset membership problem as for example

333
00:13:21,760 --> 00:13:23,279
ddh

334
00:13:23,279 --> 00:13:25,839
then we also get this implication tied

335
00:13:25,839 --> 00:13:26,560
but

336
00:13:26,560 --> 00:13:28,399
coming back to to our non-committing

337
00:13:28,399 --> 00:13:29,200
chem

338
00:13:29,200 --> 00:13:31,680
security notion

339
00:13:31,680 --> 00:13:33,760
i want to justify why we need such a

340
00:13:33,760 --> 00:13:35,680
seemingly strong notion and this is due

341
00:13:35,680 --> 00:13:38,240
to the ake security experiment which is

342
00:13:38,240 --> 00:13:40,639
quite involved so the adversary can get

343
00:13:40,639 --> 00:13:42,639
these long-term keys of the users and

344
00:13:42,639 --> 00:13:45,040
the long-term keys are camp secret keys

345
00:13:45,040 --> 00:13:46,959
so we also need to output these secret

346
00:13:46,959 --> 00:13:48,560
keys adaptively

347
00:13:48,560 --> 00:13:50,880
but at the same time we have to embed

348
00:13:50,880 --> 00:13:52,720
challenge cipher text in all sessions

349
00:13:52,720 --> 00:13:54,639
because we do not know if the adversary

350
00:13:54,639 --> 00:13:56,079
will reveal

351
00:13:56,079 --> 00:13:58,480
or challenge one's particular session

352
00:13:58,480 --> 00:13:59,839
and so we must embed challenge

353
00:13:59,839 --> 00:14:02,000
ciphertext but even if the secret key is

354
00:14:02,000 --> 00:14:03,839
leaked afterwards

355
00:14:03,839 --> 00:14:06,639
these challenges must decrypt correctly

356
00:14:06,639 --> 00:14:08,480
and also the adversary is active that

357
00:14:08,480 --> 00:14:09,839
means he can

358
00:14:09,839 --> 00:14:12,160
come up with its own cipher text and

359
00:14:12,160 --> 00:14:14,880
send this to the game and then we must

360
00:14:14,880 --> 00:14:17,920
decrypt the ciphertext to um to simulate

361
00:14:17,920 --> 00:14:19,760
correctly

362
00:14:19,760 --> 00:14:21,120
and this is what we kept in our

363
00:14:21,120 --> 00:14:24,000
non-committing chem security notion

364
00:14:24,000 --> 00:14:26,000
we also look at the second scheme which

365
00:14:26,000 --> 00:14:27,920
adds an additional signature scheme to

366
00:14:27,920 --> 00:14:31,440
achieve explicit authentication

367
00:14:31,440 --> 00:14:32,560
yeah and

368
00:14:32,560 --> 00:14:33,680
this is

369
00:14:33,680 --> 00:14:35,760
if you are interested in more then look

370
00:14:35,760 --> 00:14:38,240
at our video or paper on eprint thank

371
00:14:38,240 --> 00:14:41,240
you

372
00:14:47,440 --> 00:14:49,600
thank you very much doreen uh

373
00:14:49,600 --> 00:14:52,240
no remote questions yet are there any

374
00:14:52,240 --> 00:14:55,279
questions in the audience

375
00:14:57,600 --> 00:15:00,000
well why people come up with questions i

376
00:15:00,000 --> 00:15:02,000
may have one

377
00:15:02,000 --> 00:15:04,959
so in your paper you prove that um you

378
00:15:04,959 --> 00:15:06,880
can construct this non-committing camp

379
00:15:06,880 --> 00:15:09,120
from hps

380
00:15:09,120 --> 00:15:10,800
what about the other direction is it

381
00:15:10,800 --> 00:15:13,279
necessary to have hps in order to have

382
00:15:13,279 --> 00:15:14,959
non-commit income

383
00:15:14,959 --> 00:15:17,680
um it's not necessary so we we looked at

384
00:15:17,680 --> 00:15:19,519
different instantiations for example

385
00:15:19,519 --> 00:15:21,519
using this now young paradigm i think

386
00:15:21,519 --> 00:15:22,959
the most important point is that we have

387
00:15:22,959 --> 00:15:24,800
to answer these corruption queries so we

388
00:15:24,800 --> 00:15:27,120
always must know one of the secret keys

389
00:15:27,120 --> 00:15:28,480
and this is where hash pro systems

390
00:15:28,480 --> 00:15:29,839
really help us

391
00:15:29,839 --> 00:15:32,160
um but we could also do something with

392
00:15:32,160 --> 00:15:34,240
this double encryption and then knowing

393
00:15:34,240 --> 00:15:36,399
like one of the secret keys

394
00:15:36,399 --> 00:15:39,759
and then um building this from cdh but

395
00:15:39,759 --> 00:15:41,440
because of this doubling of all the

396
00:15:41,440 --> 00:15:43,920
communication this was less efficient so

397
00:15:43,920 --> 00:15:47,120
we sticked with that one

398
00:15:47,199 --> 00:15:49,120
okay thank you very much

399
00:15:49,120 --> 00:15:52,519
any more questions

400
00:15:55,600 --> 00:15:57,279
okay if there are no more questions

401
00:15:57,279 --> 00:15:59,199
let's thank doreen again and let's move

402
00:15:59,199 --> 00:16:02,758
on to the next talk

403
00:16:26,880 --> 00:16:28,880
thanks uh so the next talk on

404
00:16:28,880 --> 00:16:31,519
aggregateable distributed key generation

405
00:16:31,519 --> 00:16:34,000
by kobe gurken philippiovanovic mary

406
00:16:34,000 --> 00:16:37,199
mellor sarah michael john

407
00:16:37,199 --> 00:16:39,839
gillette stern allen tumescu and mary is

408
00:16:39,839 --> 00:16:42,800
going to deliver the talk

409
00:16:46,000 --> 00:16:47,519
hey everyone if i stand here can you

410
00:16:47,519 --> 00:16:48,839
hear

411
00:16:48,839 --> 00:16:51,519
me so today i'm going to be talking

412
00:16:51,519 --> 00:16:53,519
about a type of distributed key

413
00:16:53,519 --> 00:16:55,360
generation which has the special

414
00:16:55,360 --> 00:16:58,560
property that we're able to aggregate

415
00:16:58,560 --> 00:17:00,720
all of the contributions of all of the

416
00:17:00,720 --> 00:17:03,519
different parties into one transcript

417
00:17:03,519 --> 00:17:05,280
which makes verifying that the process

418
00:17:05,280 --> 00:17:06,959
has been done correctly

419
00:17:06,959 --> 00:17:10,400
fairly efficient for the verifier

420
00:17:10,959 --> 00:17:13,679
our contributions are four-fold for our

421
00:17:13,679 --> 00:17:16,959
main ones the first is a construction of

422
00:17:16,959 --> 00:17:19,520
a dkg which satisfies this property

423
00:17:19,520 --> 00:17:21,199
because we're able to aggregate we get

424
00:17:21,199 --> 00:17:23,039
huge efficiency gains over other

425
00:17:23,039 --> 00:17:24,640
protocols

426
00:17:24,640 --> 00:17:26,880
the output of our dkg is not a field

427
00:17:26,880 --> 00:17:29,360
element but a group element so in order

428
00:17:29,360 --> 00:17:32,480
to keep this useful we also provide a

429
00:17:32,480 --> 00:17:34,799
fully structured serving the uf is what

430
00:17:34,799 --> 00:17:36,720
i've called it in the slides

431
00:17:36,720 --> 00:17:38,960
what i mean by this is basically just a

432
00:17:38,960 --> 00:17:40,960
signature scheme a unique signature

433
00:17:40,960 --> 00:17:41,840
scheme

434
00:17:41,840 --> 00:17:44,320
so something very similar to bls which

435
00:17:44,320 --> 00:17:48,000
is compatible with our dkg

436
00:17:48,160 --> 00:17:50,000
our third

437
00:17:50,000 --> 00:17:51,520
third contribution is some new

438
00:17:51,520 --> 00:17:52,880
definitions

439
00:17:52,880 --> 00:17:54,240
so i don't know how many of you are

440
00:17:54,240 --> 00:17:56,320
familiar with the dkg definitions in the

441
00:17:56,320 --> 00:17:58,960
literature but typically they either are

442
00:17:58,960 --> 00:18:00,660
very difficult to realize

443
00:18:00,660 --> 00:18:01,919
[Music]

444
00:18:01,919 --> 00:18:03,520
typically they are either very difficult

445
00:18:03,520 --> 00:18:06,240
to realize or they're very sort of fuzzy

446
00:18:06,240 --> 00:18:08,320
and vague and the reason they can be

447
00:18:08,320 --> 00:18:09,600
vague is because what you're trying to

448
00:18:09,600 --> 00:18:12,400
define is dependent on the scheme

449
00:18:12,400 --> 00:18:14,320
like you're not trying to say that

450
00:18:14,320 --> 00:18:16,000
you're able to reconstruct like you

451
00:18:16,000 --> 00:18:17,600
would in secret sharing

452
00:18:17,600 --> 00:18:19,440
instead you're trying to say that you

453
00:18:19,440 --> 00:18:22,000
are able to output some kind of public

454
00:18:22,000 --> 00:18:24,480
key such that people know the secret key

455
00:18:24,480 --> 00:18:26,799
such that they can't break some property

456
00:18:26,799 --> 00:18:29,120
of the underlying scheme so this is a

457
00:18:29,120 --> 00:18:31,919
notion that we try and capture

458
00:18:31,919 --> 00:18:34,080
and related to the

459
00:18:34,080 --> 00:18:36,240
notion of these new definitions we also

460
00:18:36,240 --> 00:18:38,160
have new proving techniques which we are

461
00:18:38,160 --> 00:18:40,320
able to use only because we're using

462
00:18:40,320 --> 00:18:42,320
these new definitions

463
00:18:42,320 --> 00:18:43,200
so

464
00:18:43,200 --> 00:18:45,520
we're not capturing this full notion of

465
00:18:45,520 --> 00:18:48,000
simulatability instead all we're saying

466
00:18:48,000 --> 00:18:48,960
is that

467
00:18:48,960 --> 00:18:51,679
if you can corrupt the dkg

468
00:18:51,679 --> 00:18:53,919
then you would be able to break the

469
00:18:53,919 --> 00:18:55,280
original

470
00:18:55,280 --> 00:18:57,919
signature scheme or encryption scheme

471
00:18:57,919 --> 00:18:59,919
under which you're trying to generate a

472
00:18:59,919 --> 00:19:02,799
public key for

473
00:19:05,039 --> 00:19:08,559
so the general idea of a distributed key

474
00:19:08,559 --> 00:19:10,480
generation algorithm is to distribute

475
00:19:10,480 --> 00:19:13,200
trust i'm sure there's no surprise there

476
00:19:13,200 --> 00:19:15,120
the two classic cases where it comes up

477
00:19:15,120 --> 00:19:17,280
are threshold encryption so you want t

478
00:19:17,280 --> 00:19:19,520
out of end parties to be able to decrypt

479
00:19:19,520 --> 00:19:21,039
a message but any lesson that shouldn't

480
00:19:21,039 --> 00:19:23,760
be able to and threshold signatures so

481
00:19:23,760 --> 00:19:25,760
at least t out of then should be able to

482
00:19:25,760 --> 00:19:27,120
generate a signature but less than that

483
00:19:27,120 --> 00:19:29,520
should not

484
00:19:30,720 --> 00:19:33,280
the threshold signature application is

485
00:19:33,280 --> 00:19:36,559
especially relevant to random beacons

486
00:19:36,559 --> 00:19:39,039
so this comes up in consensus algorithms

487
00:19:39,039 --> 00:19:41,280
all the time where you have a problem

488
00:19:41,280 --> 00:19:44,000
with the person who plays last

489
00:19:44,000 --> 00:19:45,679
because the person who plays last they

490
00:19:45,679 --> 00:19:48,240
know the state of the network they know

491
00:19:48,240 --> 00:19:50,320
what everyone else has output and they

492
00:19:50,320 --> 00:19:52,080
might be able to use this to gain some

493
00:19:52,080 --> 00:19:54,160
kind of advantage

494
00:19:54,160 --> 00:19:55,919
a random beacon will be able to get

495
00:19:55,919 --> 00:19:57,440
around this

496
00:19:57,440 --> 00:19:58,640
because

497
00:19:58,640 --> 00:20:00,720
um if you have a random beacon then

498
00:20:00,720 --> 00:20:03,679
nobody is going to be able to manipulate

499
00:20:03,679 --> 00:20:06,799
that output in advance

500
00:20:06,799 --> 00:20:09,440
so it's not just random it's also not

501
00:20:09,440 --> 00:20:11,440
unbiasable which is a stronger property

502
00:20:11,440 --> 00:20:12,640
than you would get from just a hash

503
00:20:12,640 --> 00:20:15,039
function

504
00:20:17,280 --> 00:20:18,559
so the

505
00:20:18,559 --> 00:20:21,039
big thing about rdkg is we don't have

506
00:20:21,039 --> 00:20:22,640
complaints rounds which is what you

507
00:20:22,640 --> 00:20:24,559
would typically have in for example the

508
00:20:24,559 --> 00:20:27,760
pedestrian dkg or the general dkg

509
00:20:27,760 --> 00:20:28,720
uh

510
00:20:28,720 --> 00:20:30,240
other people when they've been referring

511
00:20:30,240 --> 00:20:31,600
to destination have called it a

512
00:20:31,600 --> 00:20:34,240
non-interactive dkg basically what this

513
00:20:34,240 --> 00:20:36,000
means is it means that rather than

514
00:20:36,000 --> 00:20:38,080
having some sort of

515
00:20:38,080 --> 00:20:39,919
consensus algorithm where first i say

516
00:20:39,919 --> 00:20:41,280
something and then i wait for user to

517
00:20:41,280 --> 00:20:42,640
say something and then i say oh no what

518
00:20:42,640 --> 00:20:44,640
you said is wrong instead all i'm going

519
00:20:44,640 --> 00:20:46,960
to do is publish something with all of

520
00:20:46,960 --> 00:20:48,240
the encryptions of all of the

521
00:20:48,240 --> 00:20:49,919
information that everyone needs to know

522
00:20:49,919 --> 00:20:52,159
and then prove

523
00:20:52,159 --> 00:20:55,039
that i've generated this transcript is

524
00:20:55,039 --> 00:20:58,158
what we call it correctly

525
00:20:59,679 --> 00:21:01,440
the second contribution i mentioned is

526
00:21:01,440 --> 00:21:03,440
this new vuf

527
00:21:03,440 --> 00:21:05,919
so our new vus is related to bls but

528
00:21:05,919 --> 00:21:08,640
like i say it is compatible with rdkg

529
00:21:08,640 --> 00:21:11,200
and in terms of efficiency it's

530
00:21:11,200 --> 00:21:13,280
a little bit worse but not much

531
00:21:13,280 --> 00:21:14,960
so we have two group elements rather

532
00:21:14,960 --> 00:21:16,400
than one group element

533
00:21:16,400 --> 00:21:18,880
we have three pairings to verify rather

534
00:21:18,880 --> 00:21:20,240
than two pairings

535
00:21:20,240 --> 00:21:22,000
the only caveat i'd say to this is that

536
00:21:22,000 --> 00:21:24,080
if you then want to derive your unique

537
00:21:24,080 --> 00:21:26,480
component from your signature that's

538
00:21:26,480 --> 00:21:28,080
going to cost you an extra three

539
00:21:28,080 --> 00:21:29,360
pairings in order to get to that

540
00:21:29,360 --> 00:21:31,840
component

541
00:21:33,919 --> 00:21:35,120
i've mentioned this several times

542
00:21:35,120 --> 00:21:37,760
already we have that our dkg is

543
00:21:37,760 --> 00:21:39,919
aggregatable the reason we're able to do

544
00:21:39,919 --> 00:21:41,120
this is

545
00:21:41,120 --> 00:21:42,720
essentially because the secret that

546
00:21:42,720 --> 00:21:44,080
we're sharing is a group element so

547
00:21:44,080 --> 00:21:46,400
we're able to encrypt it under algomal

548
00:21:46,400 --> 00:21:48,240
and then use the homomorphic properties

549
00:21:48,240 --> 00:21:50,080
of algamal it's not actually algamel

550
00:21:50,080 --> 00:21:51,600
we're using it's just something very

551
00:21:51,600 --> 00:21:52,880
similar to that

552
00:21:52,880 --> 00:21:54,159
we're able to

553
00:21:54,159 --> 00:21:56,480
combine all of the encryptions into just

554
00:21:56,480 --> 00:21:58,880
the same encryption so despite the fact

555
00:21:58,880 --> 00:22:01,840
that there is a total of n transcripts

556
00:22:01,840 --> 00:22:04,080
being communicated over the network the

557
00:22:04,080 --> 00:22:06,000
final transcript that we're going to see

558
00:22:06,000 --> 00:22:08,159
and use is going to be

559
00:22:08,159 --> 00:22:10,400
the same size as if there was only one

560
00:22:10,400 --> 00:22:12,960
transcript

561
00:22:12,960 --> 00:22:14,640
of course we still need to communicate

562
00:22:14,640 --> 00:22:16,720
all of the information in all of the ten

563
00:22:16,720 --> 00:22:19,200
in all of the end different transcripts

564
00:22:19,200 --> 00:22:21,360
and the way we do this is by a gossip

565
00:22:21,360 --> 00:22:22,480
algorithm

566
00:22:22,480 --> 00:22:26,840
which is more efficient than broadcast

567
00:22:28,320 --> 00:22:29,200
so to

568
00:22:29,200 --> 00:22:31,360
to conclude our dkg is publicly

569
00:22:31,360 --> 00:22:33,280
verifiable aggregateable and does not

570
00:22:33,280 --> 00:22:35,440
have complaints rounds we can use gossip

571
00:22:35,440 --> 00:22:37,520
communication to reduce the overall

572
00:22:37,520 --> 00:22:39,440
communication we can build random

573
00:22:39,440 --> 00:22:41,840
beacons using our dkg combined forever

574
00:22:41,840 --> 00:22:43,919
uf and also threshold signatures i

575
00:22:43,919 --> 00:22:45,919
should say there as well it's the same

576
00:22:45,919 --> 00:22:46,960
idea

577
00:22:46,960 --> 00:22:49,280
and our proving techniques are also also

578
00:22:49,280 --> 00:22:51,440
highly applicable to other schemes i

579
00:22:51,440 --> 00:22:53,679
should say that we also in the paper

580
00:22:53,679 --> 00:22:57,200
prove that you can run bls signatures

581
00:22:57,200 --> 00:22:59,840
under the pedersen dkg and

582
00:22:59,840 --> 00:23:01,520
have that be secure

583
00:23:01,520 --> 00:23:05,000
thank you very much

584
00:23:10,720 --> 00:23:13,039
thank you very much mary i see the

585
00:23:13,039 --> 00:23:15,360
remote audience is maybe a little bit

586
00:23:15,360 --> 00:23:17,360
asleep still but i'm sure the live

587
00:23:17,360 --> 00:23:19,200
audience has many questions to ask mary

588
00:23:19,200 --> 00:23:21,200
who has questions

589
00:23:21,200 --> 00:23:24,880
one question down there coming

590
00:23:35,600 --> 00:23:36,640
how

591
00:23:36,640 --> 00:23:39,760
so do you support adaptive

592
00:23:39,760 --> 00:23:41,760
queries corruption queries for the

593
00:23:41,760 --> 00:23:43,200
threshold scheme

594
00:23:43,200 --> 00:23:45,360
that's a very good question

595
00:23:45,360 --> 00:23:48,720
the answer is no we do not um but

596
00:23:48,720 --> 00:23:50,960
equally i would

597
00:23:50,960 --> 00:23:53,200
also phrase this as being something of

598
00:23:53,200 --> 00:23:53,919
an

599
00:23:53,919 --> 00:23:55,520
open question

600
00:23:55,520 --> 00:23:57,760
because the reason we can't is due to

601
00:23:57,760 --> 00:23:59,679
the proving techniques the extractor

602
00:23:59,679 --> 00:24:01,200
would become

603
00:24:01,200 --> 00:24:03,600
um exponential time in the number of

604
00:24:03,600 --> 00:24:07,039
participants if you want to be able to

605
00:24:07,039 --> 00:24:08,559
actually extract the information that

606
00:24:08,559 --> 00:24:10,080
you're going to need because you have to

607
00:24:10,080 --> 00:24:12,320
guess in advance who is going to

608
00:24:12,320 --> 00:24:13,679
participate and who is not going to

609
00:24:13,679 --> 00:24:15,360
participate which gives you and

610
00:24:15,360 --> 00:24:16,559
factorial

611
00:24:16,559 --> 00:24:17,760
choices

612
00:24:17,760 --> 00:24:19,679
so if this actually did lead to an

613
00:24:19,679 --> 00:24:21,279
adaptive attack i think it would be a

614
00:24:21,279 --> 00:24:22,400
big problem

615
00:24:22,400 --> 00:24:24,640
but as far as i'm aware and i have

616
00:24:24,640 --> 00:24:26,400
looked into it quite a lot

617
00:24:26,400 --> 00:24:30,000
nobody has found adaptive attacks in

618
00:24:30,000 --> 00:24:32,480
15-20 years of looking for them for

619
00:24:32,480 --> 00:24:33,679
related

620
00:24:33,679 --> 00:24:36,000
schemes with similar problems

621
00:24:36,000 --> 00:24:37,600
so i think

622
00:24:37,600 --> 00:24:40,000
either there maybe is an attack lacking

623
00:24:40,000 --> 00:24:41,679
which we've not found in 20 years in

624
00:24:41,679 --> 00:24:42,799
which case it would be interesting to

625
00:24:42,799 --> 00:24:44,320
know about it

626
00:24:44,320 --> 00:24:47,360
or maybe we've got our model wrong

627
00:24:47,360 --> 00:24:50,080
okay thank you

628
00:24:50,240 --> 00:24:52,159
thanks more questions

629
00:24:52,159 --> 00:24:54,320
in the audience

630
00:24:54,320 --> 00:24:56,320
okay while i go check i may ask one of

631
00:24:56,320 --> 00:24:58,320
mine i see there is an implementation

632
00:24:58,320 --> 00:24:59,919
component in your paper you implement it

633
00:24:59,919 --> 00:25:02,480
in rust i believe

634
00:25:02,480 --> 00:25:04,080
what kind of

635
00:25:04,080 --> 00:25:05,919
sizes how many participants can you

636
00:25:05,919 --> 00:25:08,000
realistically scale to

637
00:25:08,000 --> 00:25:10,080
uh so in our proof of concept

638
00:25:10,080 --> 00:25:12,640
implementation of rust the biggest

639
00:25:12,640 --> 00:25:15,559
number that we used was

640
00:25:15,559 --> 00:25:19,360
8196 92 whichever the power of two is uh

641
00:25:19,360 --> 00:25:20,720
we could go more than that but we

642
00:25:20,720 --> 00:25:22,640
haven't haven't actually experimented

643
00:25:22,640 --> 00:25:25,360
going higher than that

644
00:25:26,080 --> 00:25:30,960
thank you very much um more questions

645
00:25:32,000 --> 00:25:33,760
okay

646
00:25:33,760 --> 00:25:35,600
not online either

647
00:25:35,600 --> 00:25:37,600
in this case we'll thank mary again and

648
00:25:37,600 --> 00:25:41,559
we will move on to the next speaker

649
00:25:48,159 --> 00:25:50,400
and the next speaker is going to be

650
00:25:50,400 --> 00:25:54,559
online so we will stop the sharing

651
00:25:54,559 --> 00:25:56,720
and

652
00:25:56,720 --> 00:25:57,679
we'll

653
00:25:57,679 --> 00:26:00,000
wait for the speaker to pop up and share

654
00:26:00,000 --> 00:26:02,400
your screen

655
00:26:08,640 --> 00:26:11,840
we see your screen now

656
00:26:11,919 --> 00:26:13,600
okay so it's not in the full screen

657
00:26:13,600 --> 00:26:15,279
right

658
00:26:15,279 --> 00:26:17,440
can you go full screen maybe

659
00:26:17,440 --> 00:26:20,240
wait let me

660
00:26:20,240 --> 00:26:23,240
second

661
00:26:26,080 --> 00:26:28,080
yeah that looks great thank you very

662
00:26:28,080 --> 00:26:29,200
much

663
00:26:29,200 --> 00:26:31,840
um so the next talker is going to be on

664
00:26:31,840 --> 00:26:34,240
decentralized multi-authority abe for

665
00:26:34,240 --> 00:26:37,840
dnf's from lwe that's a lot of acronyms

666
00:26:37,840 --> 00:26:42,400
uh by pradish datta elon kumar godzki

667
00:26:42,400 --> 00:26:44,480
and brent waters and pradish is going to

668
00:26:44,480 --> 00:26:46,640
present the talk the first is yours

669
00:26:46,640 --> 00:26:48,240
pradesh

670
00:26:48,240 --> 00:26:48,960
so

671
00:26:48,960 --> 00:26:50,880
thank you luca for the nice introduction

672
00:26:50,880 --> 00:26:53,760
so hi everyone i am pratish tatta and i

673
00:26:53,760 --> 00:26:55,039
will be presenting the paper

674
00:26:55,039 --> 00:26:56,960
decentralized multi-authority abe for

675
00:26:56,960 --> 00:26:59,279
dnf's from lwe which is my joint work

676
00:26:59,279 --> 00:27:02,480
with tilankomargotsky and brentwaters

677
00:27:02,480 --> 00:27:05,120
so attribute based encryption or abe for

678
00:27:05,120 --> 00:27:07,520
short is an advanced variant of a public

679
00:27:07,520 --> 00:27:10,400
encryption scheme where a secret key is

680
00:27:10,400 --> 00:27:12,960
allowed to decrypt a cipher text if and

681
00:27:12,960 --> 00:27:14,880
only if certain access policy is

682
00:27:14,880 --> 00:27:17,760
satisfied by a certain set of attributes

683
00:27:17,760 --> 00:27:20,480
now abe is considered in two flavors one

684
00:27:20,480 --> 00:27:22,080
is a key policy and another one is

685
00:27:22,080 --> 00:27:24,320
ciphertext policy in the key policy

686
00:27:24,320 --> 00:27:26,640
setting a secret key is associated with

687
00:27:26,640 --> 00:27:28,960
an access policy while a cipher text is

688
00:27:28,960 --> 00:27:31,520
associated with a set of attributes

689
00:27:31,520 --> 00:27:33,279
while for the ciphertext policy variant

690
00:27:33,279 --> 00:27:35,279
the roles of the key policy and all the

691
00:27:35,279 --> 00:27:36,720
roles of the policy and that set of

692
00:27:36,720 --> 00:27:39,200
attributes are switched so in this word

693
00:27:39,200 --> 00:27:40,720
we'll be particularly interested with

694
00:27:40,720 --> 00:27:43,360
the ciphertext policy variant

695
00:27:43,360 --> 00:27:45,520
and we would also be interested as the

696
00:27:45,520 --> 00:27:47,360
title suggests in the multi-authority

697
00:27:47,360 --> 00:27:50,159
version of abe so note that in case of

698
00:27:50,159 --> 00:27:51,840
an abe scheme there is a central

699
00:27:51,840 --> 00:27:53,600
authority which is in charge of

700
00:27:53,600 --> 00:27:55,360
verifying the attributes of all the

701
00:27:55,360 --> 00:27:57,440
users and then issuing all the secret

702
00:27:57,440 --> 00:27:59,840
keys to them however as we know in real

703
00:27:59,840 --> 00:28:01,520
life there is no central authority that

704
00:28:01,520 --> 00:28:03,120
is controlling all the attributes in

705
00:28:03,120 --> 00:28:04,399
state there are different different

706
00:28:04,399 --> 00:28:06,080
authorities who are controlling the

707
00:28:06,080 --> 00:28:08,159
different attributes and in order to

708
00:28:08,159 --> 00:28:10,000
handle this distributed nature of

709
00:28:10,000 --> 00:28:13,600
attribute position this version of abe

710
00:28:13,600 --> 00:28:15,360
called the multi authority a b e is

711
00:28:15,360 --> 00:28:17,520
considered in the literature so in a

712
00:28:17,520 --> 00:28:20,000
multi-authority abe scheme any party

713
00:28:20,000 --> 00:28:21,919
basically can become an authority at any

714
00:28:21,919 --> 00:28:23,440
point of time and there is no

715
00:28:23,440 --> 00:28:25,360
coordination required between the

716
00:28:25,360 --> 00:28:27,600
parties except the generation of a

717
00:28:27,600 --> 00:28:29,760
global public parameters that is

718
00:28:29,760 --> 00:28:31,360
available to all the parties in the

719
00:28:31,360 --> 00:28:32,320
system

720
00:28:32,320 --> 00:28:34,159
and the different authorities control

721
00:28:34,159 --> 00:28:35,840
different attributes

722
00:28:35,840 --> 00:28:37,600
as usual and

723
00:28:37,600 --> 00:28:39,679
then there is no there is also no bound

724
00:28:39,679 --> 00:28:41,440
on the number of authorities that can

725
00:28:41,440 --> 00:28:43,039
ever come into existence during the

726
00:28:43,039 --> 00:28:45,360
entire lifetime of the system and the

727
00:28:45,360 --> 00:28:47,679
authorities are able to issue secret

728
00:28:47,679 --> 00:28:50,240
keys to users for attributes under their

729
00:28:50,240 --> 00:28:51,279
control

730
00:28:51,279 --> 00:28:53,279
without any coordination with any other

731
00:28:53,279 --> 00:28:56,240
authority in the system

732
00:28:56,240 --> 00:28:59,120
so these are the main existing results

733
00:28:59,120 --> 00:29:01,840
prior to our work in the area of maabe

734
00:29:01,840 --> 00:29:03,600
we have the celebrated work of luca and

735
00:29:03,600 --> 00:29:06,640
waters 11 who has presented an maabe

736
00:29:06,640 --> 00:29:08,880
scheme in composite order bilinear group

737
00:29:08,880 --> 00:29:12,000
setting for nc1 access policies and this

738
00:29:12,000 --> 00:29:13,919
scheme is proven

739
00:29:13,919 --> 00:29:16,320
secured against adaptive bigqueries

740
00:29:16,320 --> 00:29:18,159
under the subgroup decision assumption

741
00:29:18,159 --> 00:29:20,080
then later okamoto and takashima

742
00:29:20,080 --> 00:29:21,760
translated this team into the prime

743
00:29:21,760 --> 00:29:23,120
order setting under the dealing

744
00:29:23,120 --> 00:29:24,640
assumption

745
00:29:24,640 --> 00:29:26,720
and we also have the work of rausalakis

746
00:29:26,720 --> 00:29:29,120
and waters who have presented another

747
00:29:29,120 --> 00:29:30,000
scheme

748
00:29:30,000 --> 00:29:33,039
for nc1 access policies under a novel q

749
00:29:33,039 --> 00:29:35,360
type assumption however the scheme has a

750
00:29:35,360 --> 00:29:37,919
weaker security which is static security

751
00:29:37,919 --> 00:29:40,080
but the advantage over the last two

752
00:29:40,080 --> 00:29:42,640
scheme is that their scheme is able to

753
00:29:42,640 --> 00:29:44,880
allow an arbitrary number of attributes

754
00:29:44,880 --> 00:29:47,520
per authority and importantly all these

755
00:29:47,520 --> 00:29:50,559
schemes are designed in a model called a

756
00:29:50,559 --> 00:29:52,960
global identifier model or gid model

757
00:29:52,960 --> 00:29:55,840
which identifies each user in the system

758
00:29:55,840 --> 00:29:58,080
by means of even some unique identifier

759
00:29:58,080 --> 00:29:59,840
for instance you can consider the social

760
00:29:59,840 --> 00:30:01,120
security number to be an unique

761
00:30:01,120 --> 00:30:03,279
identifier of a user

762
00:30:03,279 --> 00:30:05,279
and all the schemes require random

763
00:30:05,279 --> 00:30:07,520
oracles for their security and as you

764
00:30:07,520 --> 00:30:09,360
can see that all the schemes are in the

765
00:30:09,360 --> 00:30:12,000
bilinear map setting

766
00:30:12,000 --> 00:30:14,159
so this is our work as the title

767
00:30:14,159 --> 00:30:16,559
suggests we present the first mab scheme

768
00:30:16,559 --> 00:30:19,360
in the lwe model in under the lw

769
00:30:19,360 --> 00:30:21,919
assumption and this our scheme is able

770
00:30:21,919 --> 00:30:24,960
to support dnf access policies and we

771
00:30:24,960 --> 00:30:27,279
achieve the static security notions same

772
00:30:27,279 --> 00:30:29,279
as rousselot's waters

773
00:30:29,279 --> 00:30:30,000
and

774
00:30:30,000 --> 00:30:32,080
the number of attributes for authority

775
00:30:32,080 --> 00:30:34,399
in our scheme is also bounded similar to

776
00:30:34,399 --> 00:30:36,640
del w 11 or ot30

777
00:30:36,640 --> 00:30:38,880
so this is our work in more detail we

778
00:30:38,880 --> 00:30:41,120
have basically shown that there exists

779
00:30:41,120 --> 00:30:43,679
an maabe scheme in the git model for

780
00:30:43,679 --> 00:30:45,840
access policies represented by dna

781
00:30:45,840 --> 00:30:47,919
formulas that is proven statically

782
00:30:47,919 --> 00:30:49,919
secure against an arbitrary pollution of

783
00:30:49,919 --> 00:30:52,399
parties in the random oracle model and

784
00:30:52,399 --> 00:30:55,120
under the lw assumption so dnf as we

785
00:30:55,120 --> 00:30:57,919
know is the basically the or of ands

786
00:30:57,919 --> 00:30:59,919
and the lw assumption that we use in

787
00:30:59,919 --> 00:31:02,159
this work is the sub exponential modulus

788
00:31:02,159 --> 00:31:05,360
to noise ratio one so now i would give

789
00:31:05,360 --> 00:31:08,720
the high level blueprint of our result

790
00:31:08,720 --> 00:31:11,760
so we first uh start with a non-monotone

791
00:31:11,760 --> 00:31:14,880
non-linear sequence non non-linear

792
00:31:14,880 --> 00:31:16,880
not sorry non-monotone linear secret

793
00:31:16,880 --> 00:31:19,919
sharing scheme or non-monotone lss with

794
00:31:19,919 --> 00:31:21,840
two special properties the first

795
00:31:21,840 --> 00:31:24,399
property is that the reconstruction

796
00:31:24,399 --> 00:31:26,240
coefficients are small in size for

797
00:31:26,240 --> 00:31:27,840
instance may be coming from the set zero

798
00:31:27,840 --> 00:31:29,440
one so this property is crucial for the

799
00:31:29,440 --> 00:31:31,600
correctness as we have to deal with the

800
00:31:31,600 --> 00:31:33,360
error of lwe

801
00:31:33,360 --> 00:31:34,880
and the second

802
00:31:34,880 --> 00:31:36,960
property is that any subset of

803
00:31:36,960 --> 00:31:39,200
unauthorized rows of the shear

804
00:31:39,200 --> 00:31:41,679
generating matrix are linearly

805
00:31:41,679 --> 00:31:43,360
independent so this property is also

806
00:31:43,360 --> 00:31:45,600
very crucially utilized in the security

807
00:31:45,600 --> 00:31:46,720
proof

808
00:31:46,720 --> 00:31:49,279
of our mabe

809
00:31:49,279 --> 00:31:50,159
so

810
00:31:50,159 --> 00:31:53,519
starting with this uh kind of lss

811
00:31:53,519 --> 00:31:55,840
for which we also present a construction

812
00:31:55,840 --> 00:31:58,000
for nc1 access policies

813
00:31:58,000 --> 00:32:00,240
we then able to give the first direct

814
00:32:00,240 --> 00:32:03,840
construction of a cpap scheme for nc one

815
00:32:03,840 --> 00:32:06,480
access policies under the lw assumption

816
00:32:06,480 --> 00:32:07,360
and

817
00:32:07,360 --> 00:32:10,640
we also use the lss the non the non

818
00:32:10,640 --> 00:32:13,120
linear lss with these two properties as

819
00:32:13,120 --> 00:32:15,919
the underlying access policies

820
00:32:15,919 --> 00:32:18,559
and our cpa ve has two very impor

821
00:32:18,559 --> 00:32:20,799
interesting properties firstly

822
00:32:20,799 --> 00:32:23,360
the randomness that ties together the

823
00:32:23,360 --> 00:32:25,279
different key components so note that in

824
00:32:25,279 --> 00:32:27,440
case of any abe scheme collusion

825
00:32:27,440 --> 00:32:29,760
resistance is basically obtained by

826
00:32:29,760 --> 00:32:31,200
tying together the different key

827
00:32:31,200 --> 00:32:33,440
components of a user with fresh

828
00:32:33,440 --> 00:32:35,519
randomness that is specific to the user

829
00:32:35,519 --> 00:32:38,240
and that randomness in our case is

830
00:32:38,240 --> 00:32:40,640
basically publicly computable and the

831
00:32:40,640 --> 00:32:43,760
second property is that the our keys

832
00:32:43,760 --> 00:32:45,440
that means the master public keys and

833
00:32:45,440 --> 00:32:48,320
the user secret keys of our cpa

834
00:32:48,320 --> 00:32:50,320
have basically the us piecewise

835
00:32:50,320 --> 00:32:52,880
structure so that it means that the

836
00:32:52,880 --> 00:32:55,600
those keys consist of components each of

837
00:32:55,600 --> 00:32:57,679
which is associated with some specific

838
00:32:57,679 --> 00:32:58,880
attribute

839
00:32:58,880 --> 00:33:01,200
and by virtue of these two properties we

840
00:33:01,200 --> 00:33:04,000
are able to extend our cpa-b scheme into

841
00:33:04,000 --> 00:33:06,880
a multi-authority abe and this extension

842
00:33:06,880 --> 00:33:09,120
is also a non-generic extension that

843
00:33:09,120 --> 00:33:11,039
means it uses the specific structure of

844
00:33:11,039 --> 00:33:13,279
the cpabe

845
00:33:13,279 --> 00:33:16,080
and in order to do that we have to use

846
00:33:16,080 --> 00:33:18,159
instead of a monotone instead of a

847
00:33:18,159 --> 00:33:21,440
non-monotone lss a monotone lss with the

848
00:33:21,440 --> 00:33:23,760
same two properties as we as for the

849
00:33:23,760 --> 00:33:25,840
non-monotone illnesses we use for our

850
00:33:25,840 --> 00:33:27,440
cpa be

851
00:33:27,440 --> 00:33:29,600
and the reason that we had to use a

852
00:33:29,600 --> 00:33:31,600
monotone analysis in this case and a

853
00:33:31,600 --> 00:33:33,840
non-monotone lss does not suffice is

854
00:33:33,840 --> 00:33:36,640
roughly the fact that in case of cpabe

855
00:33:36,640 --> 00:33:38,559
there is a central authority that can

856
00:33:38,559 --> 00:33:41,279
enforce the fact that user can only get

857
00:33:41,279 --> 00:33:43,279
a key for an attribute or for its

858
00:33:43,279 --> 00:33:46,720
negation however in case of maabe a an

859
00:33:46,720 --> 00:33:48,640
adversary colluding with corrupt

860
00:33:48,640 --> 00:33:51,360
authorities can get both and thus can

861
00:33:51,360 --> 00:33:53,679
easily break the security of lss and

862
00:33:53,679 --> 00:33:56,320
hence the security of maabe so here i

863
00:33:56,320 --> 00:33:58,159
would like to mention one point so

864
00:33:58,159 --> 00:34:01,519
basically our maabe scheme is proven is

865
00:34:01,519 --> 00:34:03,519
a supports access policies which are

866
00:34:03,519 --> 00:34:05,840
monotone lss and with these two

867
00:34:05,840 --> 00:34:07,919
properties and since currently we do not

868
00:34:07,919 --> 00:34:10,800
know any monotone lss beyond dnf access

869
00:34:10,800 --> 00:34:13,440
policies that's why our scheme currently

870
00:34:13,440 --> 00:34:15,679
can only support dnf access policy so if

871
00:34:15,679 --> 00:34:18,480
in future we can get a monotone lss with

872
00:34:18,480 --> 00:34:20,800
these two properties

873
00:34:20,800 --> 00:34:22,639
for some more advanced

874
00:34:22,639 --> 00:34:24,719
policy class such as nc one then our

875
00:34:24,719 --> 00:34:26,480
scheme would be directly translated to

876
00:34:26,480 --> 00:34:29,119
supporting nc one access policies

877
00:34:29,119 --> 00:34:30,719
so in conclusion

878
00:34:30,719 --> 00:34:33,839
we have designed the first m a b scheme

879
00:34:33,839 --> 00:34:35,040
uh for

880
00:34:35,040 --> 00:34:36,719
under the lw assumption for some

881
00:34:36,719 --> 00:34:38,480
nontrivial class of access policies and

882
00:34:38,480 --> 00:34:39,918
we also give the first direct

883
00:34:39,918 --> 00:34:42,719
construction of a cpab scheme under the

884
00:34:42,719 --> 00:34:44,560
lwe assumption

885
00:34:44,560 --> 00:34:46,800
there are a number of open problems

886
00:34:46,800 --> 00:34:49,520
firstly can we have an maab scheme under

887
00:34:49,520 --> 00:34:52,000
lwe assumption for some access policies

888
00:34:52,000 --> 00:34:54,639
which is more explicit than dnf secondly

889
00:34:54,639 --> 00:34:56,239
can we achieve stronger security

890
00:34:56,239 --> 00:34:57,920
guarantees in this work we only achieve

891
00:34:57,920 --> 00:34:59,839
the weak static security guarantee

892
00:34:59,839 --> 00:35:01,839
thirdly can we have better parameters

893
00:35:01,839 --> 00:35:03,680
for ciphertext and key sizes in this

894
00:35:03,680 --> 00:35:06,000
work all this parameter scales with some

895
00:35:06,000 --> 00:35:08,320
worst case size bound on the policy

896
00:35:08,320 --> 00:35:10,160
supported in the system

897
00:35:10,160 --> 00:35:12,400
and fourthly is it possible to allow an

898
00:35:12,400 --> 00:35:13,920
arbitrary number of attributes per

899
00:35:13,920 --> 00:35:15,119
authority

900
00:35:15,119 --> 00:35:18,720
thank you very much for your attention

901
00:35:24,720 --> 00:35:26,320
thank you very much radish i hope you

902
00:35:26,320 --> 00:35:28,640
could hear the uploads here in the room

903
00:35:28,640 --> 00:35:32,160
are there any questions for pradish

904
00:35:33,440 --> 00:35:35,359
i'm going to move to the other booth to

905
00:35:35,359 --> 00:35:37,280
see if there are questions online i

906
00:35:37,280 --> 00:35:39,760
don't think there are

907
00:35:39,760 --> 00:35:42,240
i don't see any other questions

908
00:35:42,240 --> 00:35:44,240
uh don't be shy there's a microphone

909
00:35:44,240 --> 00:35:45,599
here

910
00:35:45,599 --> 00:35:47,839
i want more

911
00:35:47,839 --> 00:35:49,599
so pradesh uh

912
00:35:49,599 --> 00:35:53,040
can you say a word about uh

913
00:35:53,040 --> 00:35:54,240
performance

914
00:35:54,240 --> 00:35:55,839
how efficient do you think it would be

915
00:35:55,839 --> 00:35:58,400
the scheme

916
00:35:58,400 --> 00:36:01,760
the mai the if the scheme is currently

917
00:36:01,760 --> 00:36:04,240
not efficient as we said that we do

918
00:36:04,240 --> 00:36:06,400
require like all the ciphertext and key

919
00:36:06,400 --> 00:36:09,200
sizes in fact all the algorithms they

920
00:36:09,200 --> 00:36:11,440
the running time is actually i think is

921
00:36:11,440 --> 00:36:12,880
uh

922
00:36:12,880 --> 00:36:15,280
linear in the worst case upper bound so

923
00:36:15,280 --> 00:36:17,040
currently this scheme is not efficient

924
00:36:17,040 --> 00:36:19,440
but this is actually the very first step

925
00:36:19,440 --> 00:36:21,280
towards uh

926
00:36:21,280 --> 00:36:23,520
like a long-standing open problem like

927
00:36:23,520 --> 00:36:26,960
can we get uh m maabe scheme which which

928
00:36:26,960 --> 00:36:29,839
should be the ideal version of abe

929
00:36:29,839 --> 00:36:31,839
under the lw assumption which is really

930
00:36:31,839 --> 00:36:34,880
proposed quantum secure

931
00:36:34,960 --> 00:36:37,119
thank you very much for your answer um i

932
00:36:37,119 --> 00:36:38,960
think we're going slightly over time so

933
00:36:38,960 --> 00:36:41,680
in the interest of time i will ask the

934
00:36:41,680 --> 00:36:44,040
audience to thank pradish again

935
00:36:44,040 --> 00:36:47,460
[Applause]

936
00:36:51,440 --> 00:36:53,440
and we will move to the next talk which

937
00:36:53,440 --> 00:36:56,640
is going to be remote again by ifulai

938
00:36:56,640 --> 00:36:59,520
ifu are you here

939
00:37:04,240 --> 00:37:08,200
ok we can read your ifoo

940
00:37:09,680 --> 00:37:12,240
okay we your screen is coming great we

941
00:37:12,240 --> 00:37:15,119
see your screen okay can you hear me

942
00:37:15,119 --> 00:37:17,760
and we hear you that's excellent so

943
00:37:17,760 --> 00:37:19,839
since we're ready the next talk on

944
00:37:19,839 --> 00:37:21,839
compact efficient uc secure

945
00:37:21,839 --> 00:37:24,240
hysogenic-based oblivions transfer

946
00:37:24,240 --> 00:37:26,960
by ifulai stephen galbraith and cyprian

947
00:37:26,960 --> 00:37:28,960
del pesh the sangilem

948
00:37:28,960 --> 00:37:31,599
and will be delivered by ifu the food of

949
00:37:31,599 --> 00:37:33,280
lords is yours

950
00:37:33,280 --> 00:37:36,160
okay thank you for the introduction and

951
00:37:36,160 --> 00:37:38,560
firstly we record the definition of an

952
00:37:38,560 --> 00:37:40,960
oblique transfer scheme the circumstance

953
00:37:40,960 --> 00:37:43,280
is like there's a two party nsm bob

954
00:37:43,280 --> 00:37:45,520
mostly the sender and receiver ellison

955
00:37:45,520 --> 00:37:47,520
has two messages and bob would like to

956
00:37:47,520 --> 00:37:49,839
know one of them they're doing an uplift

957
00:37:49,839 --> 00:37:52,160
transfer skin here after the execution

958
00:37:52,160 --> 00:37:54,320
there are two requirements the first one

959
00:37:54,320 --> 00:37:56,079
is that bob gets one and only one

960
00:37:56,079 --> 00:37:58,400
message the second is alice doesn't know

961
00:37:58,400 --> 00:37:59,760
about choice

962
00:37:59,760 --> 00:38:01,839
uh keep in mind that this is a classical

963
00:38:01,839 --> 00:38:04,480
requirement for nlt skin

964
00:38:04,480 --> 00:38:06,160
a more modern

965
00:38:06,160 --> 00:38:07,359
security definition is called

966
00:38:07,359 --> 00:38:10,000
universally compatible security or uc

967
00:38:10,000 --> 00:38:12,320
security the circuit sense is like

968
00:38:12,320 --> 00:38:14,400
there's an environment machine the

969
00:38:14,400 --> 00:38:16,640
environment you will interact with an

970
00:38:16,640 --> 00:38:19,680
ipo machine or a real machine the real

971
00:38:19,680 --> 00:38:21,599
machine there is a protocol you design

972
00:38:21,599 --> 00:38:22,480
and the

973
00:38:22,480 --> 00:38:23,760
anniversary

974
00:38:23,760 --> 00:38:25,680
and in the ideal world machine there's a

975
00:38:25,680 --> 00:38:28,000
simulator and having broadband access to

976
00:38:28,000 --> 00:38:29,520
the adversary

977
00:38:29,520 --> 00:38:32,240
in the ideal world every genetics is

978
00:38:32,240 --> 00:38:34,640
processed by the transfer party so you

979
00:38:34,640 --> 00:38:36,079
can find out in the idea where

980
00:38:36,079 --> 00:38:38,800
everything is super secure because every

981
00:38:38,800 --> 00:38:40,560
the functionality is processed by a

982
00:38:40,560 --> 00:38:42,800
strategic party if you can show that

983
00:38:42,800 --> 00:38:44,960
your protocol in the real world for any

984
00:38:44,960 --> 00:38:48,400
adversary jsc exists a simulator in the

985
00:38:48,400 --> 00:38:50,960
ideal world such that the output of the

986
00:38:50,960 --> 00:38:53,640
real-world machine and ideal machine are

987
00:38:53,640 --> 00:38:55,760
indistinguishable to the environment

988
00:38:55,760 --> 00:38:57,680
machine then your protocol has uc

989
00:38:57,680 --> 00:39:00,680
security

990
00:39:00,720 --> 00:39:02,960
and so our research question is that can

991
00:39:02,960 --> 00:39:05,920
we have an isotonic based ot that is

992
00:39:05,920 --> 00:39:07,680
usually secure against malicious

993
00:39:07,680 --> 00:39:10,240
adversaries and take only a constant

994
00:39:10,240 --> 00:39:12,800
number of isotonic computation malicious

995
00:39:12,800 --> 00:39:15,040
means that the adversary will now is not

996
00:39:15,040 --> 00:39:16,560
required to follow the protocol

997
00:39:16,560 --> 00:39:17,920
specification

998
00:39:17,920 --> 00:39:19,920
and say my honest adversary means that

999
00:39:19,920 --> 00:39:20,960
the

1000
00:39:20,960 --> 00:39:22,800
adversary will follow the

1001
00:39:22,800 --> 00:39:24,560
specification

1002
00:39:24,560 --> 00:39:26,160
they try to learn more information from

1003
00:39:26,160 --> 00:39:28,560
the execution

1004
00:39:28,560 --> 00:39:31,359
the isotronic tool we rely on is csi i

1005
00:39:31,359 --> 00:39:33,520
will assume you are familiar with this

1006
00:39:33,520 --> 00:39:35,599
and to have a cryptosystem we need some

1007
00:39:35,599 --> 00:39:37,440
conventional assumptions the most

1008
00:39:37,440 --> 00:39:38,480
well-known one should be the

1009
00:39:38,480 --> 00:39:40,720
computational seaside problem

1010
00:39:40,720 --> 00:39:43,040
which is quite similar to the divi

1011
00:39:43,040 --> 00:39:44,480
hormone problem

1012
00:39:44,480 --> 00:39:46,720
and then we introduce a new assumption

1013
00:39:46,720 --> 00:39:48,480
that is called reciprocal seaside

1014
00:39:48,480 --> 00:39:50,880
problem there are two which is a two

1015
00:39:50,880 --> 00:39:52,880
round experiment there are two parties

1016
00:39:52,880 --> 00:39:55,359
at its bob or say the challenger and the

1017
00:39:55,359 --> 00:39:56,480
adversary

1018
00:39:56,480 --> 00:39:58,800
adversary send the super single curve to

1019
00:39:58,800 --> 00:40:01,440
alice first and then alice computes ae

1020
00:40:01,440 --> 00:40:04,880
to bob and then bob the adversary's text

1021
00:40:04,880 --> 00:40:08,839
is to compute ax and a inverse

1022
00:40:08,839 --> 00:40:12,319
x we show that this reciprocal seaside

1023
00:40:12,319 --> 00:40:15,040
problem is as hard as the computational

1024
00:40:15,040 --> 00:40:17,440
seaside problem if the order of the

1025
00:40:17,440 --> 00:40:20,880
ideal class group is given

1026
00:40:21,440 --> 00:40:23,599
and then our construction starts from a

1027
00:40:23,599 --> 00:40:26,160
three-run construction and then we use

1028
00:40:26,160 --> 00:40:27,680
productive twist

1029
00:40:27,680 --> 00:40:29,119
to compress the

1030
00:40:29,119 --> 00:40:33,040
concept as a two-round construction

1031
00:40:34,160 --> 00:40:37,520
and then to have uc security we we add

1032
00:40:37,520 --> 00:40:40,000
an additional mechanism here

1033
00:40:40,000 --> 00:40:41,839
and i would like to announce a

1034
00:40:41,839 --> 00:40:44,400
correction for a fixable bug in your

1035
00:40:44,400 --> 00:40:45,520
paper

1036
00:40:45,520 --> 00:40:47,680
this is the original design of our

1037
00:40:47,680 --> 00:40:49,920
construction firstly the receiver send

1038
00:40:49,920 --> 00:40:52,640
the super single cloud to alice and that

1039
00:40:52,640 --> 00:40:55,040
is there's a mechanism we call proof of

1040
00:40:55,040 --> 00:40:57,280
ability to decrypt mechanism with

1041
00:40:57,280 --> 00:41:00,640
receptor with respect to b which means

1042
00:41:00,640 --> 00:41:02,480
which means that bob should show he can

1043
00:41:02,480 --> 00:41:05,920
really decrypt something by using this b

1044
00:41:05,920 --> 00:41:08,720
and then we merge this mechanism

1045
00:41:08,720 --> 00:41:10,880
together with the ciphertext and central

1046
00:41:10,880 --> 00:41:12,960
bob which is which should be

1047
00:41:12,960 --> 00:41:14,880
sufficiently secure if the distinguished

1048
00:41:14,880 --> 00:41:17,359
inertia is the non-abort version which

1049
00:41:17,359 --> 00:41:18,960
means that the transcript

1050
00:41:18,960 --> 00:41:21,040
won't take the above transcript into

1051
00:41:21,040 --> 00:41:23,839
account but in a more

1052
00:41:23,839 --> 00:41:26,720
general definition like uc security

1053
00:41:26,720 --> 00:41:28,640
a ball is part of the output of the

1054
00:41:28,640 --> 00:41:31,520
functionality so we require the receiver

1055
00:41:31,520 --> 00:41:34,319
to show ability to decrypt before

1056
00:41:34,319 --> 00:41:36,480
obtaining the ciphertext that is we

1057
00:41:36,480 --> 00:41:38,160
separate the mechanism and the

1058
00:41:38,160 --> 00:41:40,880
ciphertext text so our final product

1059
00:41:40,880 --> 00:41:42,800
should be for a foreign construction

1060
00:41:42,800 --> 00:41:44,640
instead of a three-run construction

1061
00:41:44,640 --> 00:41:46,880
sorry for failing to find out this

1062
00:41:46,880 --> 00:41:49,440
problem before the submission

1063
00:41:49,440 --> 00:41:51,839
and then we set up a project trapdoor

1064
00:41:51,839 --> 00:41:53,680
which is a tropical algorithm for the

1065
00:41:53,680 --> 00:41:56,079
reciprocal system problem you can use

1066
00:41:56,079 --> 00:41:57,359
setup

1067
00:41:57,359 --> 00:41:59,359
by using disruptive algorithm you can

1068
00:41:59,359 --> 00:42:02,560
solve any reciprocal seaside problem

1069
00:42:02,560 --> 00:42:06,079
with respect to a specific public key

1070
00:42:06,079 --> 00:42:07,760
and then we use this

1071
00:42:07,760 --> 00:42:10,160
chapter algorithm to complete the other

1072
00:42:10,160 --> 00:42:11,200
half of

1073
00:42:11,200 --> 00:42:16,160
simulation for the corrupt standard case

1074
00:42:16,160 --> 00:42:18,160
and then this is our final result but

1075
00:42:18,160 --> 00:42:19,520
finally the result is a full run

1076
00:42:19,520 --> 00:42:21,760
construction with only a constant number

1077
00:42:21,760 --> 00:42:24,560
of exotronic complications and that is

1078
00:42:24,560 --> 00:42:26,880
uh usually secure against malicious

1079
00:42:26,880 --> 00:42:29,440
adversaries so like you

1080
00:42:29,440 --> 00:42:31,440
so like this previous work they are only

1081
00:42:31,440 --> 00:42:32,880
semi earnings and

1082
00:42:32,880 --> 00:42:35,119
secure against money uh

1083
00:42:35,119 --> 00:42:38,400
adversaries and you can use uh uc secure

1084
00:42:38,400 --> 00:42:40,560
neuron zero knowledge proof

1085
00:42:40,560 --> 00:42:43,520
to have uh uc secure against malicious

1086
00:42:43,520 --> 00:42:44,960
adversary well that will take a

1087
00:42:44,960 --> 00:42:46,720
polynomial number of isagenix

1088
00:42:46,720 --> 00:42:48,800
computations

1089
00:42:48,800 --> 00:42:51,200
importantly our underlying assumptions

1090
00:42:51,200 --> 00:42:53,680
which is as hard as the computational

1091
00:42:53,680 --> 00:42:56,240
seaside problem as long as the order of

1092
00:42:56,240 --> 00:42:58,640
the ideal class group is given

1093
00:42:58,640 --> 00:43:00,400
and we also point out some

1094
00:43:00,400 --> 00:43:02,800
open problems relevant to this topic

1095
00:43:02,800 --> 00:43:04,319
like can we have a counter-blended

1096
00:43:04,319 --> 00:43:06,240
reduction between reciprocal system

1097
00:43:06,240 --> 00:43:08,960
problem when the system problem because

1098
00:43:08,960 --> 00:43:10,880
with the argument we use rewind the

1099
00:43:10,880 --> 00:43:13,119
argument the second question is how can

1100
00:43:13,119 --> 00:43:15,200
we have a wrong optimal efficient

1101
00:43:15,200 --> 00:43:17,200
exogenous base rt which means a

1102
00:43:17,200 --> 00:43:18,880
two-round construction

1103
00:43:18,880 --> 00:43:20,319
the third question is that can we have

1104
00:43:20,319 --> 00:43:22,480
an efficient adapter use this oculus

1105
00:43:22,480 --> 00:43:25,440
antisocial base ot which means that the

1106
00:43:25,440 --> 00:43:27,760
adversary can choose who to corrupt

1107
00:43:27,760 --> 00:43:31,200
after the execution of the protocol

1108
00:43:31,200 --> 00:43:33,920
and thanks for listening

1109
00:43:33,920 --> 00:43:37,240
any questions

1110
00:43:42,319 --> 00:43:44,560
thank you very much fifu are there any

1111
00:43:44,560 --> 00:43:47,920
questions from the audience

1112
00:43:47,920 --> 00:43:52,040
i see one i'm coming

1113
00:44:00,319 --> 00:44:01,359
uh

1114
00:44:01,359 --> 00:44:03,440
so thanks for the talk okay that might

1115
00:44:03,440 --> 00:44:04,880
be a really trivial question but i was

1116
00:44:04,880 --> 00:44:05,920
wondering

1117
00:44:05,920 --> 00:44:08,240
so is it easy to see if the class number

1118
00:44:08,240 --> 00:44:10,560
is even like ferry curve

1119
00:44:10,560 --> 00:44:11,839
ethan

1120
00:44:11,839 --> 00:44:13,440
uh so you said that the class number

1121
00:44:13,440 --> 00:44:15,040
needs to be even right the size of the

1122
00:44:15,040 --> 00:44:18,480
class group uh ideal uh the cast numbers

1123
00:44:18,480 --> 00:44:22,680
should be different not even

1124
00:44:22,960 --> 00:44:25,359
i couldn't hear that response i couldn't

1125
00:44:25,359 --> 00:44:28,800
hear your response already um i mean the

1126
00:44:28,800 --> 00:44:30,400
the number of the

1127
00:44:30,400 --> 00:44:33,040
order of the group should be given

1128
00:44:33,040 --> 00:44:34,839
i should be given

1129
00:44:34,839 --> 00:44:36,800
okay

1130
00:44:36,800 --> 00:44:38,480
okay sorry

1131
00:44:38,480 --> 00:44:39,920
but i have an answer to your question

1132
00:44:39,920 --> 00:44:41,760
yes it's easy to test you can know if

1133
00:44:41,760 --> 00:44:43,920
the class number is even

1134
00:44:43,920 --> 00:44:48,079
um any other questions from the audience

1135
00:44:49,599 --> 00:44:50,960
let's see if online there are any

1136
00:44:50,960 --> 00:44:52,000
questions

1137
00:44:52,000 --> 00:44:53,760
um

1138
00:44:53,760 --> 00:44:56,079
so i may have a question um

1139
00:44:56,079 --> 00:44:57,599
so this

1140
00:44:57,599 --> 00:45:00,720
ot protocol uh seems to be very specific

1141
00:45:00,720 --> 00:45:02,800
to isogenys

1142
00:45:02,800 --> 00:45:05,200
it doesn't apply to a generic group

1143
00:45:05,200 --> 00:45:07,280
action cryptographic group action what

1144
00:45:07,280 --> 00:45:09,040
uh what kind of assumptions would you

1145
00:45:09,040 --> 00:45:10,960
need what kind of axioms would you need

1146
00:45:10,960 --> 00:45:12,720
to add for group action to to get the

1147
00:45:12,720 --> 00:45:14,560
same protocol

1148
00:45:14,560 --> 00:45:18,720
uh i think here we we use

1149
00:45:18,720 --> 00:45:21,280
a tool that's called projected twist

1150
00:45:21,280 --> 00:45:25,680
and we don't have uh such thing in other

1151
00:45:25,680 --> 00:45:27,760
crypto system some or other

1152
00:45:27,760 --> 00:45:29,520
computational assumptions

1153
00:45:29,520 --> 00:45:32,000
but you can make it more generally if

1154
00:45:32,000 --> 00:45:33,920
you have some

1155
00:45:33,920 --> 00:45:36,160
two-run protocol then you might have a

1156
00:45:36,160 --> 00:45:37,040
chance

1157
00:45:37,040 --> 00:45:39,359
to add some mechanism and to have a

1158
00:45:39,359 --> 00:45:40,960
user-secure

1159
00:45:40,960 --> 00:45:41,760
uh

1160
00:45:41,760 --> 00:45:44,319
again malicious adversary

1161
00:45:44,319 --> 00:45:47,839
you might have a chance yes

1162
00:45:47,920 --> 00:45:50,160
okay thank you very much

1163
00:45:50,160 --> 00:45:51,520
we still have a little bit of time let

1164
00:45:51,520 --> 00:45:54,160
me check if there are questions remotely

1165
00:45:54,160 --> 00:45:56,480
no i don't see any

1166
00:45:56,480 --> 00:46:00,000
any more questions in the audience

1167
00:46:00,000 --> 00:46:03,920
okay if not let's thank iful again

1168
00:46:03,920 --> 00:46:06,640
thank you very much

1169
00:46:10,000 --> 00:46:12,160
and we will move to the last talk of the

1170
00:46:12,160 --> 00:46:14,960
session which is going to be delivered

1171
00:46:14,960 --> 00:46:16,240
live

1172
00:46:16,240 --> 00:46:19,839
i mean live in croatia

1173
00:46:21,680 --> 00:46:24,000
um

1174
00:46:24,079 --> 00:46:26,000
if i can manage to use this

1175
00:46:26,000 --> 00:46:29,560
windows machine

1176
00:46:35,839 --> 00:46:37,630
okay

1177
00:46:37,630 --> 00:46:39,520
[Music]

1178
00:46:39,520 --> 00:46:41,680
is there a way to really show the screen

1179
00:46:41,680 --> 00:46:43,280
not really

1180
00:46:43,280 --> 00:46:44,640
you know how

1181
00:46:44,640 --> 00:46:46,960
yeah

1182
00:46:49,920 --> 00:46:53,920
hide oh this one great thank you zoom

1183
00:46:53,920 --> 00:46:56,880
experts

1184
00:46:56,880 --> 00:46:58,480
okay the last talk of the session is

1185
00:46:58,480 --> 00:47:00,319
going to be on one way functions and

1186
00:47:00,319 --> 00:47:02,160
malleability oracles hidden shift

1187
00:47:02,160 --> 00:47:04,400
attacks on isogenic based protocols by

1188
00:47:04,400 --> 00:47:07,119
peter coutuch simon philippe mertz

1189
00:47:07,119 --> 00:47:10,000
christopher t and charlotte camper and

1190
00:47:10,000 --> 00:47:11,520
simon philippe is going to deliver the

1191
00:47:11,520 --> 00:47:14,400
talk force is yours

1192
00:47:14,400 --> 00:47:17,920
thanks a lot luca hi everyone

1193
00:47:17,920 --> 00:47:19,760
let me talk about hidden shift attacks

1194
00:47:19,760 --> 00:47:22,079
on isogenie-based protocols and

1195
00:47:22,079 --> 00:47:23,520
i'll just start with a summary straight

1196
00:47:23,520 --> 00:47:26,240
away what we did

1197
00:47:26,240 --> 00:47:28,079
the main contribution of our paper is

1198
00:47:28,079 --> 00:47:31,839
that we give a sub-exponential attack on

1199
00:47:31,839 --> 00:47:34,400
sidh with certain parameter sets that we

1200
00:47:34,400 --> 00:47:36,880
call overstretched and unbalanced

1201
00:47:36,880 --> 00:47:39,040
that works via a reduction to the

1202
00:47:39,040 --> 00:47:42,240
abelian hidden shift problem

1203
00:47:42,240 --> 00:47:43,200
such

1204
00:47:43,200 --> 00:47:44,800
attacks are already known for other

1205
00:47:44,800 --> 00:47:46,640
isogeny based scheme namely the ones

1206
00:47:46,640 --> 00:47:48,000
that are based on

1207
00:47:48,000 --> 00:47:50,800
ordinary curves and seaside but because

1208
00:47:50,800 --> 00:47:54,480
of sidh's non-commutative nature it was

1209
00:47:54,480 --> 00:47:56,720
assumed that this type of attack does

1210
00:47:56,720 --> 00:47:58,880
not necessarily apply there

1211
00:47:58,880 --> 00:48:00,720
um we give our

1212
00:48:00,720 --> 00:48:02,000
attack in a

1213
00:48:02,000 --> 00:48:05,440
very general setting so it also captures

1214
00:48:05,440 --> 00:48:07,440
previous attacks and might be of

1215
00:48:07,440 --> 00:48:09,520
interest for cryptanalysis in further

1216
00:48:09,520 --> 00:48:10,640
areas

1217
00:48:10,640 --> 00:48:13,599
however let me add a disclaimer right

1218
00:48:13,599 --> 00:48:15,760
here the attack does not apply to the

1219
00:48:15,760 --> 00:48:18,400
balanced sidh parameters as they were

1220
00:48:18,400 --> 00:48:21,280
originally suggested by jaron defeo or

1221
00:48:21,280 --> 00:48:22,160
to the

1222
00:48:22,160 --> 00:48:24,720
nist submission the isogenic base nist

1223
00:48:24,720 --> 00:48:27,839
submission psych for the post quantum

1224
00:48:27,839 --> 00:48:30,960
standardization process

1225
00:48:31,040 --> 00:48:32,800
malleability oracles were in the title

1226
00:48:32,800 --> 00:48:34,319
so let's talk about what we call a

1227
00:48:34,319 --> 00:48:36,160
malleability oracle

1228
00:48:36,160 --> 00:48:37,520
if you have a one-way function that's

1229
00:48:37,520 --> 00:48:39,839
injective and you have a group action on

1230
00:48:39,839 --> 00:48:42,160
the domain of this function then we call

1231
00:48:42,160 --> 00:48:44,480
a malleability oracle at one point in

1232
00:48:44,480 --> 00:48:46,160
the codomain

1233
00:48:46,160 --> 00:48:47,359
f of i

1234
00:48:47,359 --> 00:48:50,559
uh if we can compute the

1235
00:48:50,559 --> 00:48:53,599
the output of the one-way function f of

1236
00:48:53,599 --> 00:48:56,000
g times i for a group element

1237
00:48:56,000 --> 00:48:58,720
uh without knowing i basically

1238
00:48:58,720 --> 00:49:00,640
so you you can basically map a group

1239
00:49:00,640 --> 00:49:03,440
element to the output of a one-way

1240
00:49:03,440 --> 00:49:07,760
function of g times i where i is unknown

1241
00:49:07,760 --> 00:49:09,839
why is this interesting because

1242
00:49:09,839 --> 00:49:11,920
if you're given a malleability oracle

1243
00:49:11,920 --> 00:49:13,440
and your acting group has certain

1244
00:49:13,440 --> 00:49:15,119
properties namely it acts freely

1245
00:49:15,119 --> 00:49:16,640
transitive and

1246
00:49:16,640 --> 00:49:19,680
on the domain and it is a billion then

1247
00:49:19,680 --> 00:49:21,119
you can actually

1248
00:49:21,119 --> 00:49:24,160
well you can always transit trans emit

1249
00:49:24,160 --> 00:49:26,480
this into a hidden shift problem but in

1250
00:49:26,480 --> 00:49:28,079
this setting if you have these

1251
00:49:28,079 --> 00:49:30,960
additional properties then

1252
00:49:30,960 --> 00:49:32,640
it can be solved on a quantum computer

1253
00:49:32,640 --> 00:49:35,440
in sub-exponential time

1254
00:49:35,440 --> 00:49:38,319
so this is interesting for cryptanalysis

1255
00:49:38,319 --> 00:49:41,440
the one-way function that underlies sidh

1256
00:49:41,440 --> 00:49:43,599
maps certain subgroups of a public

1257
00:49:43,599 --> 00:49:45,440
starting curve that are of a given size

1258
00:49:45,440 --> 00:49:49,359
say n1 to a codomain of the isogeny so

1259
00:49:49,359 --> 00:49:50,559
that's a curve

1260
00:49:50,559 --> 00:49:51,760
and

1261
00:49:51,760 --> 00:49:53,520
we basically give a

1262
00:49:53,520 --> 00:49:55,359
group g that is a

1263
00:49:55,359 --> 00:49:57,359
multiplicative subgroup of

1264
00:49:57,359 --> 00:49:59,040
yeah we call it the endomorphism ring

1265
00:49:59,040 --> 00:50:01,520
mod and one basically we identify

1266
00:50:01,520 --> 00:50:02,640
certain

1267
00:50:02,640 --> 00:50:04,240
isogenes that

1268
00:50:04,240 --> 00:50:07,119
have both as domain and codomain so it's

1269
00:50:07,119 --> 00:50:10,079
an endomorphism the starting curve

1270
00:50:10,079 --> 00:50:12,480
and that have the same action on the

1271
00:50:12,480 --> 00:50:15,359
secret key space of of a participant say

1272
00:50:15,359 --> 00:50:16,480
alice

1273
00:50:16,480 --> 00:50:18,880
and for for this group

1274
00:50:18,880 --> 00:50:21,119
we take a

1275
00:50:21,119 --> 00:50:23,040
an abelian one we construct a

1276
00:50:23,040 --> 00:50:25,680
malleability oracle

1277
00:50:25,680 --> 00:50:27,839
under certain conditions so what does

1278
00:50:27,839 --> 00:50:30,240
this mean if you have a secret isogeny

1279
00:50:30,240 --> 00:50:32,160
in the picture it's phi

1280
00:50:32,160 --> 00:50:35,040
from a public curve e0 to ea

1281
00:50:35,040 --> 00:50:36,400
ea is being

1282
00:50:36,400 --> 00:50:39,040
made public by alice in the protocol

1283
00:50:39,040 --> 00:50:41,200
then if you have a theta that acts on

1284
00:50:41,200 --> 00:50:43,280
the starting curve basically you want to

1285
00:50:43,280 --> 00:50:44,960
compute the curve that's in the bottom

1286
00:50:44,960 --> 00:50:47,760
right corner of the diagram

1287
00:50:47,760 --> 00:50:49,359
well in general you can't do that

1288
00:50:49,359 --> 00:50:50,720
because

1289
00:50:50,720 --> 00:50:52,880
you can't just act with

1290
00:50:52,880 --> 00:50:55,599
with a known endomorphism on a subgroup

1291
00:50:55,599 --> 00:50:58,160
you don't know that the one that defines

1292
00:50:58,160 --> 00:50:58,880
the

1293
00:50:58,880 --> 00:51:00,000
um

1294
00:51:00,000 --> 00:51:02,160
phi in the top row however

1295
00:51:02,160 --> 00:51:05,280
we discover well we observe that

1296
00:51:05,280 --> 00:51:06,400
um

1297
00:51:06,400 --> 00:51:09,920
we can lift the the acting element to an

1298
00:51:09,920 --> 00:51:12,559
endomorphism that is of a certain norm

1299
00:51:12,559 --> 00:51:14,079
and then we can use the torsion point

1300
00:51:14,079 --> 00:51:16,400
information that is provided in the sidh

1301
00:51:16,400 --> 00:51:19,200
protocol to basically compute the arrow

1302
00:51:19,200 --> 00:51:22,000
that's on the right right

1303
00:51:22,000 --> 00:51:24,400
side of the commutative diagram so from

1304
00:51:24,400 --> 00:51:26,240
ea the public information and then if we

1305
00:51:26,240 --> 00:51:28,000
can compute the arrow we actually get to

1306
00:51:28,000 --> 00:51:30,079
the bottom right corner

1307
00:51:30,079 --> 00:51:33,520
however this lift requires

1308
00:51:33,520 --> 00:51:34,960
unbalanced parameters that's what i

1309
00:51:34,960 --> 00:51:36,880
mentioned in the beginning so if n1 is

1310
00:51:36,880 --> 00:51:39,119
the security parameter of alice and and

1311
00:51:39,119 --> 00:51:41,440
two the security parameter of bob then

1312
00:51:41,440 --> 00:51:44,160
we require n2 to be greater than p and

1313
00:51:44,160 --> 00:51:45,680
one to the fourth

1314
00:51:45,680 --> 00:51:47,680
uh in traditional

1315
00:51:47,680 --> 00:51:49,359
the the

1316
00:51:49,359 --> 00:51:52,000
choice that was originally suggested is

1317
00:51:52,000 --> 00:51:53,839
to choose both

1318
00:51:53,839 --> 00:51:56,960
roughly of equal size

1319
00:51:56,960 --> 00:51:58,480
um let's

1320
00:51:58,480 --> 00:51:59,680
use the

1321
00:51:59,680 --> 00:52:02,400
rest of the talk to visualize this a bit

1322
00:52:02,400 --> 00:52:04,800
so if n1 is a power of two then the

1323
00:52:04,800 --> 00:52:08,240
secret walk of alice is in a graph that

1324
00:52:08,240 --> 00:52:10,720
looks some something like this from a

1325
00:52:10,720 --> 00:52:14,240
public starting curve e0 to a curve e a

1326
00:52:14,240 --> 00:52:16,480
that is being made public but the blue

1327
00:52:16,480 --> 00:52:18,319
path i'm not sure you can see the colors

1328
00:52:18,319 --> 00:52:19,839
but yeah

1329
00:52:19,839 --> 00:52:22,240
that's basically the secret

1330
00:52:22,240 --> 00:52:24,960
so now an adversary just picks any other

1331
00:52:24,960 --> 00:52:26,720
path that has the same length the length

1332
00:52:26,720 --> 00:52:28,240
of the path is known

1333
00:52:28,240 --> 00:52:30,079
say the pink one

1334
00:52:30,079 --> 00:52:33,839
that leads him or her to a curve e a

1335
00:52:33,839 --> 00:52:35,440
prime

1336
00:52:35,440 --> 00:52:36,400
and then

1337
00:52:36,400 --> 00:52:38,720
you can evaluate the group action on the

1338
00:52:38,720 --> 00:52:40,720
curve e a prime just because you know

1339
00:52:40,720 --> 00:52:43,119
the path to it so that's easy

1340
00:52:43,119 --> 00:52:44,960
and you can evaluate the group action on

1341
00:52:44,960 --> 00:52:46,240
the curve ea

1342
00:52:46,240 --> 00:52:48,160
using the malleability from the previous

1343
00:52:48,160 --> 00:52:49,839
slide malleability oracle from the

1344
00:52:49,839 --> 00:52:51,599
previous slide so this gives you

1345
00:52:51,599 --> 00:52:53,040
basically two

1346
00:52:53,040 --> 00:52:54,240
functions

1347
00:52:54,240 --> 00:52:56,079
that are both

1348
00:52:56,079 --> 00:52:57,680
from the group

1349
00:52:57,680 --> 00:52:58,640
to

1350
00:52:58,640 --> 00:53:00,559
the set of curves at a certain distance

1351
00:53:00,559 --> 00:53:02,240
in some sense and both of these

1352
00:53:02,240 --> 00:53:04,240
functions are shifts of each other and

1353
00:53:04,240 --> 00:53:06,000
the shift can then be computed using a

1354
00:53:06,000 --> 00:53:07,599
quantum computer and sub-exponential

1355
00:53:07,599 --> 00:53:08,640
time

1356
00:53:08,640 --> 00:53:10,640
if you have recovered that shift you can

1357
00:53:10,640 --> 00:53:12,559
then just basically shift the kernel you

1358
00:53:12,559 --> 00:53:14,720
know from the pink path onto the blue

1359
00:53:14,720 --> 00:53:16,880
path and and compute it and that's how

1360
00:53:16,880 --> 00:53:19,040
you recover the secret

1361
00:53:19,040 --> 00:53:20,640
four parameters that allow for this

1362
00:53:20,640 --> 00:53:21,839
attack

1363
00:53:21,839 --> 00:53:23,280
thank you for the

1364
00:53:23,280 --> 00:53:26,280
attention

1365
00:53:32,800 --> 00:53:34,400
thank you simon phillip

1366
00:53:34,400 --> 00:53:38,000
any questions in the audience

1367
00:53:38,319 --> 00:53:40,559
there is one question coming there

1368
00:53:40,559 --> 00:53:43,200
don't forget to it's it's switched off

1369
00:53:43,200 --> 00:53:45,440
you need to switch it on

1370
00:53:45,440 --> 00:53:47,040
oh yeah oh

1371
00:53:47,040 --> 00:53:48,880
hi

1372
00:53:48,880 --> 00:53:51,599
thanks for the uh talk i was wondering

1373
00:53:51,599 --> 00:53:53,200
uh this thing that the parameters are

1374
00:53:53,200 --> 00:53:55,359
overstretched is it something that you

1375
00:53:55,359 --> 00:53:57,520
can say encode the cost

1376
00:53:57,520 --> 00:53:59,119
of the attack smoothly and then it

1377
00:53:59,119 --> 00:54:01,119
becomes exponential for non-overstretch

1378
00:54:01,119 --> 00:54:03,359
parameters or is it just that there is a

1379
00:54:03,359 --> 00:54:05,119
hard requirement that just stops

1380
00:54:05,119 --> 00:54:07,040
entirely the attack for say psyc

1381
00:54:07,040 --> 00:54:09,359
parameters

1382
00:54:09,359 --> 00:54:10,400
so

1383
00:54:10,400 --> 00:54:14,720
there's two parts so um first of all um

1384
00:54:14,720 --> 00:54:16,880
the over stretch part is basically you

1385
00:54:16,880 --> 00:54:19,119
wouldn't get that for psych parameters

1386
00:54:19,119 --> 00:54:20,400
like you

1387
00:54:20,400 --> 00:54:23,200
you also have that n1 and n2 is usually

1388
00:54:23,200 --> 00:54:25,200
like the product of them is p and if you

1389
00:54:25,200 --> 00:54:26,240
remember the

1390
00:54:26,240 --> 00:54:28,079
the unbalanced

1391
00:54:28,079 --> 00:54:30,079
parameter like it has to be greater than

1392
00:54:30,079 --> 00:54:32,559
p so that that might not be possible but

1393
00:54:32,559 --> 00:54:34,960
there's other torsion points attacks

1394
00:54:34,960 --> 00:54:36,799
where you have unbalancedness but

1395
00:54:36,799 --> 00:54:39,200
without the p factor and there you can

1396
00:54:39,200 --> 00:54:41,119
can do actually exactly what you suggest

1397
00:54:41,119 --> 00:54:43,280
you basically you can brute force part

1398
00:54:43,280 --> 00:54:45,359
of the secret and then you're left with

1399
00:54:45,359 --> 00:54:47,040
an instance where where you have the

1400
00:54:47,040 --> 00:54:49,760
unbalancedness and then you apply the

1401
00:54:49,760 --> 00:54:54,319
the torsion point attack thank you

1402
00:54:56,400 --> 00:54:59,280
any more questions

1403
00:54:59,520 --> 00:55:02,480
we slept one minute

1404
00:55:03,280 --> 00:55:05,599
i don't see any online so it's up to you

1405
00:55:05,599 --> 00:55:08,079
in this room

1406
00:55:12,720 --> 00:55:14,720
okay well i have one

1407
00:55:14,720 --> 00:55:17,040
and you know it

1408
00:55:17,040 --> 00:55:18,799
so it

1409
00:55:18,799 --> 00:55:21,359
it seems to me that you can uh construct

1410
00:55:21,359 --> 00:55:22,400
um

1411
00:55:22,400 --> 00:55:24,160
like if you have any one-way function

1412
00:55:24,160 --> 00:55:25,680
not just the sadh one-way function

1413
00:55:25,680 --> 00:55:28,240
versus any one-way function and you have

1414
00:55:28,240 --> 00:55:30,160
an inversion oracle for the one-way

1415
00:55:30,160 --> 00:55:31,280
function

1416
00:55:31,280 --> 00:55:32,799
then you can construct a malleability

1417
00:55:32,799 --> 00:55:34,960
oracle because just you will define an

1418
00:55:34,960 --> 00:55:36,640
arbitrary group action on the space of

1419
00:55:36,640 --> 00:55:39,680
secret keys and that will define the

1420
00:55:39,680 --> 00:55:41,599
malleability and so you just apply the

1421
00:55:41,599 --> 00:55:43,359
inversion the group action and then you

1422
00:55:43,359 --> 00:55:45,760
apply the function

1423
00:55:45,760 --> 00:55:47,680
and in this specific case there is an

1424
00:55:47,680 --> 00:55:50,720
inversion oracle for the sidh uh one-way

1425
00:55:50,720 --> 00:55:51,839
function

1426
00:55:51,839 --> 00:55:54,319
uh in the in that range of parameters

1427
00:55:54,319 --> 00:55:55,280
you give

1428
00:55:55,280 --> 00:55:56,880
an actual even embedded ranges of

1429
00:55:56,880 --> 00:55:58,640
parameters which are torsion point

1430
00:55:58,640 --> 00:56:00,319
attacks which i believe you mentioned in

1431
00:56:00,319 --> 00:56:01,839
the talk at least they are mentioned in

1432
00:56:01,839 --> 00:56:02,960
the video

1433
00:56:02,960 --> 00:56:04,000
um

1434
00:56:04,000 --> 00:56:06,000
so the way you do

1435
00:56:06,000 --> 00:56:08,079
the reduction here seems to be different

1436
00:56:08,079 --> 00:56:10,559
from torsion point attacks um and it's a

1437
00:56:10,559 --> 00:56:12,720
cute trick the way you do it but how do

1438
00:56:12,720 --> 00:56:14,559
you know that uh

1439
00:56:14,559 --> 00:56:16,559
it's not just the same attack hiding

1440
00:56:16,559 --> 00:56:19,200
behind a different facade

1441
00:56:19,200 --> 00:56:21,920
it's uh it's a very good question um i

1442
00:56:21,920 --> 00:56:24,720
don't have an answer for you here

1443
00:56:24,720 --> 00:56:26,480
i think it's well it's something

1444
00:56:26,480 --> 00:56:29,119
interesting to look into it it looks

1445
00:56:29,119 --> 00:56:30,799
different but i mean we don't have a

1446
00:56:30,799 --> 00:56:32,480
proof that it's actually qualitatively

1447
00:56:32,480 --> 00:56:33,680
different and that there's not a

1448
00:56:33,680 --> 00:56:36,240
reduction from one to the other so

1449
00:56:36,240 --> 00:56:39,280
there's some some facts that probably uh

1450
00:56:39,280 --> 00:56:41,040
hint it might be similar because you

1451
00:56:41,040 --> 00:56:43,599
also need some overstretched parameters

1452
00:56:43,599 --> 00:56:44,640
and you have

1453
00:56:44,640 --> 00:56:46,880
certain quadratic equations you need to

1454
00:56:46,880 --> 00:56:50,079
solve that that looks similar

1455
00:56:50,079 --> 00:56:52,160
but it also feels very different in the

1456
00:56:52,160 --> 00:56:54,079
entire setup and you kind of only need

1457
00:56:54,079 --> 00:56:55,440
it for the lifting part so it's

1458
00:56:55,440 --> 00:56:57,280
something interesting to look at but

1459
00:56:57,280 --> 00:56:59,440
i'm i'm sorry i can't can't answer the

1460
00:56:59,440 --> 00:57:01,200
question right here i think it's very

1461
00:57:01,200 --> 00:57:02,960
interesting one though yeah i don't i

1462
00:57:02,960 --> 00:57:05,359
didn't expect an answer i know it's it's

1463
00:57:05,359 --> 00:57:06,799
it's a near post question and it's

1464
00:57:06,799 --> 00:57:09,359
difficult to give an answer

1465
00:57:09,359 --> 00:57:10,559
um

1466
00:57:10,559 --> 00:57:13,839
any more questions in the room

1467
00:57:13,839 --> 00:57:17,440
okay if not we are right at lunchtime so

1468
00:57:17,440 --> 00:57:18,319
uh

1469
00:57:18,319 --> 00:57:19,920
let's thank again all the speakers of

1470
00:57:19,920 --> 00:57:23,079
the session

1471
00:57:28,400 --> 00:57:32,480
including those who were remote uh so

1472
00:57:32,480 --> 00:57:34,720
we'll resume at

1473
00:57:34,720 --> 00:57:35,920
what

1474
00:57:35,920 --> 00:57:37,599
i don't know the organizers

1475
00:57:37,599 --> 00:57:41,839
two two okay see you in two hours

