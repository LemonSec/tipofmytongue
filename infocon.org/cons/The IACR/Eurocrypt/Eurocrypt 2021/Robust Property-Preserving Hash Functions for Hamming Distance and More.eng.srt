1
00:00:00,160 --> 00:00:01,920
hello and welcome to this talk my name

2
00:00:01,920 --> 00:00:03,760
is mark simkin and i'm going to present

3
00:00:03,760 --> 00:00:05,759
the work robust property preserving hash

4
00:00:05,759 --> 00:00:07,839
functions for hamming distance and more

5
00:00:07,839 --> 00:00:09,360
which is a joint work with niels

6
00:00:09,360 --> 00:00:11,280
flyshacker

7
00:00:11,280 --> 00:00:13,360
a collision resistant hash function

8
00:00:13,360 --> 00:00:15,519
allows us to take a large input and

9
00:00:15,519 --> 00:00:17,680
compress it into a very small digest and

10
00:00:17,680 --> 00:00:19,279
the nice thing about hash functions is

11
00:00:19,279 --> 00:00:20,400
that

12
00:00:20,400 --> 00:00:22,560
we can use those digest to compare large

13
00:00:22,560 --> 00:00:24,160
data by just looking at the short

14
00:00:24,160 --> 00:00:25,840
digests so

15
00:00:25,840 --> 00:00:28,240
given two digests we assume that the

16
00:00:28,240 --> 00:00:29,760
data is equal

17
00:00:29,760 --> 00:00:31,760
if the digests are equal and if the

18
00:00:31,760 --> 00:00:33,200
digests differ

19
00:00:33,200 --> 00:00:35,040
then we conclude that the original data

20
00:00:35,040 --> 00:00:37,040
was also different

21
00:00:37,040 --> 00:00:38,800
and in cryptography the security

22
00:00:38,800 --> 00:00:41,280
guarantees hold in a very strong sense

23
00:00:41,280 --> 00:00:43,600
meaning that we sample this random hash

24
00:00:43,600 --> 00:00:45,680
function and then no polynomial time

25
00:00:45,680 --> 00:00:48,399
adversary can find a bad pair of long

26
00:00:48,399 --> 00:00:49,920
inputs

27
00:00:49,920 --> 00:00:52,399
that where the inputs are different but

28
00:00:52,399 --> 00:00:55,680
produce the same hash output

29
00:00:55,680 --> 00:00:58,160
but the idea of compressing data has

30
00:00:58,160 --> 00:01:00,239
many applications also beyond just

31
00:01:00,239 --> 00:01:01,680
cryptography

32
00:01:01,680 --> 00:01:03,760
so for instance when we look at password

33
00:01:03,760 --> 00:01:06,240
hashing we have some long password and

34
00:01:06,240 --> 00:01:08,240
we would like to hash it into a shorter

35
00:01:08,240 --> 00:01:09,760
digest

36
00:01:09,760 --> 00:01:12,560
and in these settings using a regular

37
00:01:12,560 --> 00:01:14,960
hash function will simply say that the

38
00:01:14,960 --> 00:01:16,640
password user typed is different from

39
00:01:16,640 --> 00:01:18,400
the password that was stored on the

40
00:01:18,400 --> 00:01:19,759
database

41
00:01:19,759 --> 00:01:21,920
even if one character is mistyped but in

42
00:01:21,920 --> 00:01:23,600
certain settings maybe it's okay if one

43
00:01:23,600 --> 00:01:25,119
character is mistyped and we would still

44
00:01:25,119 --> 00:01:27,200
like to make some kind of

45
00:01:27,200 --> 00:01:28,880
we will still like to be able to draw

46
00:01:28,880 --> 00:01:31,200
some conclusions about the password

47
00:01:31,200 --> 00:01:32,960
by saying okay the password is not the

48
00:01:32,960 --> 00:01:35,280
same but they're close to each other in

49
00:01:35,280 --> 00:01:37,600
some distance

50
00:01:37,600 --> 00:01:39,360
or in machine learning where we usually

51
00:01:39,360 --> 00:01:41,520
have large data inputs

52
00:01:41,520 --> 00:01:43,520
and we represent them as feature vectors

53
00:01:43,520 --> 00:01:45,600
and then we would like to see

54
00:01:45,600 --> 00:01:47,759
whether two

55
00:01:47,759 --> 00:01:49,920
images for instance represent the same

56
00:01:49,920 --> 00:01:51,520
thing so we would have some long feature

57
00:01:51,520 --> 00:01:52,799
vector

58
00:01:52,799 --> 00:01:54,399
corresponding to one image into the

59
00:01:54,399 --> 00:01:56,560
other image or to one image in like a

60
00:01:56,560 --> 00:01:59,119
class of objects such as cats or planes

61
00:01:59,119 --> 00:02:00,240
or cars

62
00:02:00,240 --> 00:02:01,759
and we would like to see

63
00:02:01,759 --> 00:02:04,240
whether those um

64
00:02:04,240 --> 00:02:06,159
feature vectors are similar so they may

65
00:02:06,159 --> 00:02:07,600
not be the same but we would like to

66
00:02:07,600 --> 00:02:09,360
know whether they are similar

67
00:02:09,360 --> 00:02:11,200
and

68
00:02:11,200 --> 00:02:13,280
another example are dna sequences where

69
00:02:13,280 --> 00:02:15,280
again we have very long sequences and we

70
00:02:15,280 --> 00:02:16,560
would like to check whether two

71
00:02:16,560 --> 00:02:17,840
sequences

72
00:02:17,840 --> 00:02:19,360
are similar

73
00:02:19,360 --> 00:02:21,440
for similar being defined with respect

74
00:02:21,440 --> 00:02:23,360
to some norm or metric or other

75
00:02:23,360 --> 00:02:25,040
definition

76
00:02:25,040 --> 00:02:27,520
and all kinds of

77
00:02:27,520 --> 00:02:29,920
algorithms for compressing large

78
00:02:29,920 --> 00:02:32,160
data items into short digests and then

79
00:02:32,160 --> 00:02:34,319
making statements about the original

80
00:02:34,319 --> 00:02:36,879
data by just looking at the digest

81
00:02:36,879 --> 00:02:39,599
have been studied in algorithms and data

82
00:02:39,599 --> 00:02:40,879
structures

83
00:02:40,879 --> 00:02:42,800
but commonly they're studied in a benign

84
00:02:42,800 --> 00:02:45,280
environment where we say that the data

85
00:02:45,280 --> 00:02:47,120
items are fixed

86
00:02:47,120 --> 00:02:49,200
and then we have some uniformly random

87
00:02:49,200 --> 00:02:51,280
coins for sampling the hash function for

88
00:02:51,280 --> 00:02:52,560
instance

89
00:02:52,560 --> 00:02:54,720
and if the hash function is sampled

90
00:02:54,720 --> 00:02:57,440
independently of those inputs then some

91
00:02:57,440 --> 00:02:59,519
correctness guarantees hold

92
00:02:59,519 --> 00:03:01,040
but in cryptography we would like to

93
00:03:01,040 --> 00:03:04,000
have something stronger namely where the

94
00:03:04,000 --> 00:03:06,959
inputs may be chosen adaptively so

95
00:03:06,959 --> 00:03:09,040
the hash function is sampled then the

96
00:03:09,040 --> 00:03:10,640
inputs are chosen and then we would

97
00:03:10,640 --> 00:03:12,080
still like to have some kind of

98
00:03:12,080 --> 00:03:13,440
correctness guarantees about the

99
00:03:13,440 --> 00:03:15,040
statements that we make based on the

100
00:03:15,040 --> 00:03:17,120
short digests

101
00:03:17,120 --> 00:03:19,120
so this idea of generalizing hash

102
00:03:19,120 --> 00:03:20,959
functions to check for more than just

103
00:03:20,959 --> 00:03:22,239
equality

104
00:03:22,239 --> 00:03:24,239
was uh recently introduced by boyle

105
00:03:24,239 --> 00:03:26,879
levine and vaikunan tanatan

106
00:03:26,879 --> 00:03:29,440
where they introduced the primitive of

107
00:03:29,440 --> 00:03:31,120
robust property preserving hash

108
00:03:31,120 --> 00:03:33,280
functions so a robust property

109
00:03:33,280 --> 00:03:35,200
preserving hash function takes a long

110
00:03:35,200 --> 00:03:37,120
input and compresses it into a short

111
00:03:37,120 --> 00:03:38,159
digest

112
00:03:38,159 --> 00:03:40,080
but now when we look at the digest we

113
00:03:40,080 --> 00:03:42,400
just we don't just want to know

114
00:03:42,400 --> 00:03:44,080
whether we think that the original data

115
00:03:44,080 --> 00:03:45,280
was the same

116
00:03:45,280 --> 00:03:47,120
but we might want to evaluate an

117
00:03:47,120 --> 00:03:50,080
arbitrary predicate with a binary output

118
00:03:50,080 --> 00:03:51,120
so

119
00:03:51,120 --> 00:03:53,519
indicated here by this blue box we would

120
00:03:53,519 --> 00:03:54,799
like to

121
00:03:54,799 --> 00:03:56,400
be able to evaluate some predicate on

122
00:03:56,400 --> 00:03:57,920
the original data and we would like to

123
00:03:57,920 --> 00:03:59,439
evaluate a corresponding predicate on

124
00:03:59,439 --> 00:04:01,439
the hash values and we would like to be

125
00:04:01,439 --> 00:04:03,439
sure that if we just look at the hash

126
00:04:03,439 --> 00:04:05,439
values and we evaluate this predicate we

127
00:04:05,439 --> 00:04:07,360
get the same answer as if we would have

128
00:04:07,360 --> 00:04:08,640
done this

129
00:04:08,640 --> 00:04:10,159
on the original data

130
00:04:10,159 --> 00:04:12,080
and as a special case if this predicate

131
00:04:12,080 --> 00:04:14,480
were to be equality then this would just

132
00:04:14,480 --> 00:04:15,680
be the definition of a collision

133
00:04:15,680 --> 00:04:16,959
resistant

134
00:04:16,959 --> 00:04:18,880
hash function but this predicate can

135
00:04:18,880 --> 00:04:20,959
also be something else like euclidean

136
00:04:20,959 --> 00:04:23,120
distance or edit distance in which case

137
00:04:23,120 --> 00:04:24,800
it would give us something that we

138
00:04:24,800 --> 00:04:27,280
cannot trivially obtain by just

139
00:04:27,280 --> 00:04:28,720
having collision resistant hash

140
00:04:28,720 --> 00:04:31,199
functions

141
00:04:31,280 --> 00:04:32,800
so there are several metrics that we

142
00:04:32,800 --> 00:04:34,240
care about when talking about these

143
00:04:34,240 --> 00:04:35,759
robust property preserving hash

144
00:04:35,759 --> 00:04:37,199
functions and the first one is the

145
00:04:37,199 --> 00:04:38,800
compression rate so

146
00:04:38,800 --> 00:04:41,440
given a long input we would like to

147
00:04:41,440 --> 00:04:44,400
compress it as much as possible

148
00:04:44,400 --> 00:04:46,320
um

149
00:04:46,320 --> 00:04:48,160
which is defined by the compression rate

150
00:04:48,160 --> 00:04:49,680
which is simply the output length

151
00:04:49,680 --> 00:04:52,400
divided by the input length

152
00:04:52,400 --> 00:04:53,840
the next thing that we are interested in

153
00:04:53,840 --> 00:04:56,720
is the class of predicates so what kind

154
00:04:56,720 --> 00:04:58,400
of predicates can we evaluate on the

155
00:04:58,400 --> 00:05:00,240
digests and what kind of statements can

156
00:05:00,240 --> 00:05:02,639
we make about pairs of inputs based on

157
00:05:02,639 --> 00:05:04,000
that

158
00:05:04,000 --> 00:05:05,680
and the last thing is the cryptographic

159
00:05:05,680 --> 00:05:07,360
assumptions

160
00:05:07,360 --> 00:05:08,560
ideally we would like to construct

161
00:05:08,560 --> 00:05:09,840
robust property preserving hash

162
00:05:09,840 --> 00:05:11,360
functions from

163
00:05:11,360 --> 00:05:14,479
the most minimal and simple assumptions

164
00:05:14,479 --> 00:05:17,039
that we know

165
00:05:17,120 --> 00:05:18,800
so what is already done in this previous

166
00:05:18,800 --> 00:05:19,600
work

167
00:05:19,600 --> 00:05:21,120
well

168
00:05:21,120 --> 00:05:22,320
they showed some interesting

169
00:05:22,320 --> 00:05:24,160
impossibilities for certain parameter

170
00:05:24,160 --> 00:05:25,759
ranges by

171
00:05:25,759 --> 00:05:27,759
relating the compression rates and the

172
00:05:27,759 --> 00:05:29,840
efficiency of

173
00:05:29,840 --> 00:05:31,440
property preserving hash functions for

174
00:05:31,440 --> 00:05:32,960
certain predicates

175
00:05:32,960 --> 00:05:35,120
to one-way communication complexity

176
00:05:35,120 --> 00:05:36,639
protocols and

177
00:05:36,639 --> 00:05:39,440
their corresponding lower bounds

178
00:05:39,440 --> 00:05:41,039
and then the paper provided two

179
00:05:41,039 --> 00:05:42,880
constructions for the so-called gap

180
00:05:42,880 --> 00:05:44,479
hamming distance predicate which i will

181
00:05:44,479 --> 00:05:46,160
explain in a bit

182
00:05:46,160 --> 00:05:47,120
and

183
00:05:47,120 --> 00:05:49,039
both of those constructions provide a

184
00:05:49,039 --> 00:05:51,440
constant compression rate so

185
00:05:51,440 --> 00:05:53,199
the digest

186
00:05:53,199 --> 00:05:55,440
is a constant factor smaller than the

187
00:05:55,440 --> 00:05:57,759
input that was being hashed

188
00:05:57,759 --> 00:05:59,680
and both of those constructions are

189
00:05:59,680 --> 00:06:02,479
based on some bipartite expander graphs

190
00:06:02,479 --> 00:06:05,280
or like a little bit more complicated

191
00:06:05,280 --> 00:06:08,400
where the first construction is based on

192
00:06:08,400 --> 00:06:10,960
just collision resistant hash functions

193
00:06:10,960 --> 00:06:13,440
and has a big gap which is some

194
00:06:13,440 --> 00:06:14,880
parameter in the gap hamming distance

195
00:06:14,880 --> 00:06:16,240
problem

196
00:06:16,240 --> 00:06:18,319
and the second construction has a

197
00:06:18,319 --> 00:06:21,759
smaller gap but is based on a new

198
00:06:21,759 --> 00:06:24,720
syndrome decoding assumption

199
00:06:24,720 --> 00:06:26,240
so what is this gap hamming distance

200
00:06:26,240 --> 00:06:29,199
predicate now consider we have two bit

201
00:06:29,199 --> 00:06:30,720
strings given here on the left and on

202
00:06:30,720 --> 00:06:31,919
the right

203
00:06:31,919 --> 00:06:33,759
and the hamming distance is defined as

204
00:06:33,759 --> 00:06:36,160
the number of positions in those two bit

205
00:06:36,160 --> 00:06:37,120
strings

206
00:06:37,120 --> 00:06:39,280
where the bits differ

207
00:06:39,280 --> 00:06:42,240
and uh the gapheming predicate asks

208
00:06:42,240 --> 00:06:44,000
is the heming distance

209
00:06:44,000 --> 00:06:45,759
between those two bit strings smaller

210
00:06:45,759 --> 00:06:48,479
than some parameter t or is it larger

211
00:06:48,479 --> 00:06:51,360
than n minus t where n is the input bit

212
00:06:51,360 --> 00:06:53,759
length to the hash function

213
00:06:53,759 --> 00:06:54,880
so this

214
00:06:54,880 --> 00:06:56,639
predicate can basically tell us whether

215
00:06:56,639 --> 00:06:58,960
those inputs are very similar or very

216
00:06:58,960 --> 00:07:02,080
different but for anything in this gap

217
00:07:02,080 --> 00:07:03,919
the hash function of the previous work

218
00:07:03,919 --> 00:07:06,080
could not make any statements and did

219
00:07:06,080 --> 00:07:08,000
not provide us with any guarantee so the

220
00:07:08,000 --> 00:07:10,479
evaluation on the digest could output

221
00:07:10,479 --> 00:07:13,039
any value

222
00:07:13,199 --> 00:07:15,280
a stronger predicate to consider is the

223
00:07:15,280 --> 00:07:17,199
exact heming distance

224
00:07:17,199 --> 00:07:18,400
where

225
00:07:18,400 --> 00:07:21,199
we want to we only have one parameter t

226
00:07:21,199 --> 00:07:22,560
and we would like to know whether the

227
00:07:22,560 --> 00:07:24,560
hamming distance is smaller than t or

228
00:07:24,560 --> 00:07:27,199
larger than t so in some sense the exact

229
00:07:27,199 --> 00:07:29,199
hamming distance predicate is just gap

230
00:07:29,199 --> 00:07:32,800
hamming with a gap of 0.

231
00:07:35,599 --> 00:07:38,080
so what are we doing in this work

232
00:07:38,080 --> 00:07:40,639
well we basically construct a new robust

233
00:07:40,639 --> 00:07:42,319
property preserving hash function for

234
00:07:42,319 --> 00:07:43,919
the exact hamming distance predicate

235
00:07:43,919 --> 00:07:47,280
based on a new q-type assumption in

236
00:07:47,280 --> 00:07:49,199
pairing friendly groups

237
00:07:49,199 --> 00:07:52,560
and we show that our compression rate so

238
00:07:52,560 --> 00:07:55,919
the size of the hash output

239
00:07:55,919 --> 00:08:00,000
of our construction is close to optimal

240
00:08:00,000 --> 00:08:03,039
okay so how does our construction work

241
00:08:03,039 --> 00:08:04,720
so the first step in our construction

242
00:08:04,720 --> 00:08:07,120
assume we have a bit string

243
00:08:07,120 --> 00:08:09,840
with length four so here it's x one zero

244
00:08:09,840 --> 00:08:11,039
zero one

245
00:08:11,039 --> 00:08:13,360
and we have some public fixed matrix

246
00:08:13,360 --> 00:08:14,720
indicated here

247
00:08:14,720 --> 00:08:16,960
where the number of columns

248
00:08:16,960 --> 00:08:19,759
equals the length of the bit string and

249
00:08:19,759 --> 00:08:22,160
the matrix has two rows and the values

250
00:08:22,160 --> 00:08:23,680
in this matrix are just fixed and

251
00:08:23,680 --> 00:08:25,599
publicly known

252
00:08:25,599 --> 00:08:27,280
now

253
00:08:27,280 --> 00:08:28,639
it turns out

254
00:08:28,639 --> 00:08:29,520
that

255
00:08:29,520 --> 00:08:31,840
constructing something directly for the

256
00:08:31,840 --> 00:08:33,839
hamming distance is

257
00:08:33,839 --> 00:08:35,279
quite difficult

258
00:08:35,279 --> 00:08:37,200
so rather than directly working with bit

259
00:08:37,200 --> 00:08:38,719
strings and the heming distance we will

260
00:08:38,719 --> 00:08:40,479
transform this problem into a problem

261
00:08:40,479 --> 00:08:43,519
about sets so what we do is we encode

262
00:08:43,519 --> 00:08:46,720
the bit string x into a set capital x as

263
00:08:46,720 --> 00:08:50,240
follows so if the i bit is zero

264
00:08:50,240 --> 00:08:53,040
then we look at the i column and pick uh

265
00:08:53,040 --> 00:08:55,279
the entry from the first row and if the

266
00:08:55,279 --> 00:08:56,800
i bit is one

267
00:08:56,800 --> 00:08:59,360
then we pick

268
00:08:59,360 --> 00:09:00,160
the

269
00:09:00,160 --> 00:09:02,240
value from the i column in the second

270
00:09:02,240 --> 00:09:05,040
row so in this case we have the bit 1

271
00:09:05,040 --> 00:09:06,560
and the first position so we pick the

272
00:09:06,560 --> 00:09:09,440
element six and then we have zero zero

273
00:09:09,440 --> 00:09:11,040
so we pick the elements two three and

274
00:09:11,040 --> 00:09:12,959
then we have another bit one so we pick

275
00:09:12,959 --> 00:09:14,560
the element nine

276
00:09:14,560 --> 00:09:16,560
and now we have encoded our bit string

277
00:09:16,560 --> 00:09:20,399
small x into a set capital x

278
00:09:20,399 --> 00:09:22,880
and why is this interesting now assume

279
00:09:22,880 --> 00:09:24,720
we have another bit string y

280
00:09:24,720 --> 00:09:28,000
uh here one one one zero and we perform

281
00:09:28,000 --> 00:09:29,920
the same encoding with the same matrix

282
00:09:29,920 --> 00:09:32,959
to obtain a set capital y

283
00:09:32,959 --> 00:09:35,279
and here we observe that if the two bit

284
00:09:35,279 --> 00:09:36,800
strings

285
00:09:36,800 --> 00:09:38,320
as here for example have a hamming

286
00:09:38,320 --> 00:09:40,720
distance of three so the last three bit

287
00:09:40,720 --> 00:09:42,800
positions differ

288
00:09:42,800 --> 00:09:43,839
then

289
00:09:43,839 --> 00:09:46,480
the sets have a symmetric set difference

290
00:09:46,480 --> 00:09:48,720
of six so just to recall the symmetric

291
00:09:48,720 --> 00:09:51,600
set difference is the number of

292
00:09:51,600 --> 00:09:53,760
is the are the elements

293
00:09:53,760 --> 00:09:55,839
that are not in the intersection but in

294
00:09:55,839 --> 00:09:57,519
the union of the two sets so it's

295
00:09:57,519 --> 00:09:59,120
basically the elements

296
00:09:59,120 --> 00:10:01,040
in x minus y

297
00:10:01,040 --> 00:10:01,920
and

298
00:10:01,920 --> 00:10:05,440
the elements in y minus x together

299
00:10:05,440 --> 00:10:07,839
and what we can see here is that

300
00:10:07,839 --> 00:10:10,000
whenever the bit strings small x and

301
00:10:10,000 --> 00:10:11,600
small y

302
00:10:11,600 --> 00:10:13,760
were the same in a bit position then

303
00:10:13,760 --> 00:10:15,839
they would include the same element in

304
00:10:15,839 --> 00:10:18,560
their corresponding set encoding however

305
00:10:18,560 --> 00:10:20,240
if the two bit strings would differ in a

306
00:10:20,240 --> 00:10:21,200
position

307
00:10:21,200 --> 00:10:23,519
then each of them would include a unique

308
00:10:23,519 --> 00:10:25,680
element to their set encoding which

309
00:10:25,680 --> 00:10:26,959
would then

310
00:10:26,959 --> 00:10:29,839
kind of like add two elements to the

311
00:10:29,839 --> 00:10:31,440
symmetric set difference of the set

312
00:10:31,440 --> 00:10:32,800
encodings

313
00:10:32,800 --> 00:10:34,480
so more generally what we can observe

314
00:10:34,480 --> 00:10:36,880
here is that if the two bit strings have

315
00:10:36,880 --> 00:10:38,720
a heming distance of t

316
00:10:38,720 --> 00:10:40,560
then the set encodings have a symmetric

317
00:10:40,560 --> 00:10:42,720
set difference of 2t

318
00:10:42,720 --> 00:10:44,560
and this is nice because

319
00:10:44,560 --> 00:10:47,440
now rather than constructing a property

320
00:10:47,440 --> 00:10:49,360
preserving hash function for hamming

321
00:10:49,360 --> 00:10:51,760
distance and bit strings directly we can

322
00:10:51,760 --> 00:10:53,920
focus on the task of

323
00:10:53,920 --> 00:10:55,680
constructing a property preserving hash

324
00:10:55,680 --> 00:10:57,120
function that takes

325
00:10:57,120 --> 00:10:58,320
set

326
00:10:58,320 --> 00:11:01,600
encodings as inputs and evaluates a

327
00:11:01,600 --> 00:11:03,680
symmetric set difference predicate which

328
00:11:03,680 --> 00:11:05,120
checks whether symmetric set difference

329
00:11:05,120 --> 00:11:09,120
is larger than 2t or not

330
00:11:10,000 --> 00:11:11,839
now in the next step of our construction

331
00:11:11,839 --> 00:11:13,360
what we will do is we will take those

332
00:11:13,360 --> 00:11:15,519
sets and we will encode them again but

333
00:11:15,519 --> 00:11:16,720
this time we will encode them into

334
00:11:16,720 --> 00:11:18,480
polynomials

335
00:11:18,480 --> 00:11:21,120
more precisely we will encode the sets

336
00:11:21,120 --> 00:11:23,680
into the roots of a polynomial so

337
00:11:23,680 --> 00:11:27,440
here we will take the set x and we will

338
00:11:27,440 --> 00:11:30,000
encode it into polynomial p of z

339
00:11:30,000 --> 00:11:31,279
where

340
00:11:31,279 --> 00:11:33,760
p of z evaluates to zero

341
00:11:33,760 --> 00:11:36,000
if and only if we insert

342
00:11:36,000 --> 00:11:37,279
we input

343
00:11:37,279 --> 00:11:39,360
an element from the set x and we do the

344
00:11:39,360 --> 00:11:41,680
same for the set y to obtain a

345
00:11:41,680 --> 00:11:44,480
polynomial q of that

346
00:11:44,480 --> 00:11:46,480
and here we observe that

347
00:11:46,480 --> 00:11:48,240
if we were to divide those two

348
00:11:48,240 --> 00:11:50,160
polynomials

349
00:11:50,160 --> 00:11:51,839
then

350
00:11:51,839 --> 00:11:52,720
the

351
00:11:52,720 --> 00:11:55,040
common set elements

352
00:11:55,040 --> 00:11:57,839
would so to speak cancel out and we

353
00:11:57,839 --> 00:12:00,160
would obtain a rational function where

354
00:12:00,160 --> 00:12:02,720
the numerator contains a polynomial that

355
00:12:02,720 --> 00:12:04,480
represents all the elements that are

356
00:12:04,480 --> 00:12:06,000
only an x

357
00:12:06,000 --> 00:12:07,519
and the denominator contains a

358
00:12:07,519 --> 00:12:10,160
polynomial that represents all the

359
00:12:10,160 --> 00:12:13,440
elements only in y but not in x so the

360
00:12:13,440 --> 00:12:15,680
numerator the elements in the numerator

361
00:12:15,680 --> 00:12:17,120
and the elements in the denominator

362
00:12:17,120 --> 00:12:20,320
together are basically the symmetric set

363
00:12:20,320 --> 00:12:24,480
difference between x and y

364
00:12:24,480 --> 00:12:26,720
and what we see here is that if the

365
00:12:26,720 --> 00:12:29,200
symmetric set difference is of size 2t

366
00:12:29,200 --> 00:12:32,000
then the degree i the degree of the

367
00:12:32,000 --> 00:12:34,079
numerator polynomial plus the degree of

368
00:12:34,079 --> 00:12:36,000
the denominator polynomial

369
00:12:36,000 --> 00:12:36,839
will be

370
00:12:36,839 --> 00:12:40,240
2t so why is this helpful

371
00:12:40,240 --> 00:12:41,040
well

372
00:12:41,040 --> 00:12:43,200
given such a rational function it can be

373
00:12:43,200 --> 00:12:44,880
interpolated from a number of points

374
00:12:44,880 --> 00:12:47,839
that is linear in t

375
00:12:47,839 --> 00:12:49,120
and

376
00:12:49,120 --> 00:12:51,200
the very high level intuition behind our

377
00:12:51,200 --> 00:12:53,600
construction is as follows so say you're

378
00:12:53,600 --> 00:12:56,320
given some fixed number of points of

379
00:12:56,320 --> 00:12:58,800
this rational function

380
00:12:58,800 --> 00:13:00,480
now what you can try to do is you can

381
00:13:00,480 --> 00:13:03,200
try and interpolate based on those

382
00:13:03,200 --> 00:13:04,560
points

383
00:13:04,560 --> 00:13:05,360
and

384
00:13:05,360 --> 00:13:07,360
if the interpolation if the hamming

385
00:13:07,360 --> 00:13:10,399
distance between small x and small y was

386
00:13:10,399 --> 00:13:11,519
small

387
00:13:11,519 --> 00:13:14,320
then the sets capital x and capital y

388
00:13:14,320 --> 00:13:16,240
have many set elements in common and

389
00:13:16,240 --> 00:13:18,560
then p and q have many roots in common

390
00:13:18,560 --> 00:13:20,720
meaning that the resulting rational

391
00:13:20,720 --> 00:13:23,440
function will have a very small degree

392
00:13:23,440 --> 00:13:25,360
and given enough points we will

393
00:13:25,360 --> 00:13:27,519
successfully be able to interpolate this

394
00:13:27,519 --> 00:13:29,279
rational function

395
00:13:29,279 --> 00:13:31,120
however if the hamming distance between

396
00:13:31,120 --> 00:13:33,440
the original bit strings is large

397
00:13:33,440 --> 00:13:35,839
then not many things will cancel out

398
00:13:35,839 --> 00:13:37,839
thus the rational the true rational

399
00:13:37,839 --> 00:13:40,000
function will have a high degree

400
00:13:40,000 --> 00:13:41,519
and if we're not given enough points

401
00:13:41,519 --> 00:13:43,360
then the interpolation will likely be

402
00:13:43,360 --> 00:13:46,000
incorrect

403
00:13:46,560 --> 00:13:47,360
now

404
00:13:47,360 --> 00:13:49,839
armed with these insights let us have a

405
00:13:49,839 --> 00:13:51,760
first attempt at our construction so now

406
00:13:51,760 --> 00:13:53,519
we're given two somewhat longer bit

407
00:13:53,519 --> 00:13:54,560
strings

408
00:13:54,560 --> 00:13:56,880
and what we will do is we will define

409
00:13:56,880 --> 00:13:58,560
the output of our robust property

410
00:13:58,560 --> 00:14:00,320
preserving hash functions

411
00:14:00,320 --> 00:14:03,680
as simply uh

412
00:14:03,680 --> 00:14:06,399
evaluations of the polynomial encoding

413
00:14:06,399 --> 00:14:08,639
of that bit string at some publicly

414
00:14:08,639 --> 00:14:10,320
known points so let's say there are some

415
00:14:10,320 --> 00:14:14,000
points that one to z of t that are fixed

416
00:14:14,000 --> 00:14:15,839
and to

417
00:14:15,839 --> 00:14:17,760
compute the hash of a bit string we will

418
00:14:17,760 --> 00:14:20,079
take the bit string encode it into a set

419
00:14:20,079 --> 00:14:22,160
encode the set into a polynomial and

420
00:14:22,160 --> 00:14:24,320
then evaluate the polynomial at z1 z2

421
00:14:24,320 --> 00:14:26,000
and so on and then the concatenation of

422
00:14:26,000 --> 00:14:28,560
those points will be our hash value

423
00:14:28,560 --> 00:14:30,079
and at this point we can already see

424
00:14:30,079 --> 00:14:32,480
that if the number of evaluation points

425
00:14:32,480 --> 00:14:33,839
is

426
00:14:33,839 --> 00:14:35,920
um sufficiently small

427
00:14:35,920 --> 00:14:38,000
then the output of the hash function

428
00:14:38,000 --> 00:14:39,440
will be much much smaller than the

429
00:14:39,440 --> 00:14:41,360
original input because the original

430
00:14:41,360 --> 00:14:44,240
input could potentially be a very long

431
00:14:44,240 --> 00:14:45,839
bit string which just would correspond

432
00:14:45,839 --> 00:14:49,440
to a very high degree polynomial

433
00:14:50,240 --> 00:14:51,920
now given those hash values we would

434
00:14:51,920 --> 00:14:54,399
like to figure out whether the original

435
00:14:54,399 --> 00:14:56,639
inputs were close or far in hamming

436
00:14:56,639 --> 00:14:58,880
distance so what we now do is

437
00:14:58,880 --> 00:15:02,079
given p of z1 or generally p of zi and q

438
00:15:02,079 --> 00:15:03,199
of zi

439
00:15:03,199 --> 00:15:05,680
we simply divide them pointwise and then

440
00:15:05,680 --> 00:15:07,440
we use those points to try and

441
00:15:07,440 --> 00:15:10,240
interpolate a rational function capital

442
00:15:10,240 --> 00:15:14,000
p of that divided by capital q of z

443
00:15:14,000 --> 00:15:14,880
and

444
00:15:14,880 --> 00:15:18,000
by the argument before we know that

445
00:15:18,000 --> 00:15:20,240
if the bit strings are similar then this

446
00:15:20,240 --> 00:15:22,000
interpolation will be successful and if

447
00:15:22,000 --> 00:15:23,760
the inputs are very different then the

448
00:15:23,760 --> 00:15:25,839
interpolation will fail what we now

449
00:15:25,839 --> 00:15:27,680
would like to do is we would like to

450
00:15:27,680 --> 00:15:29,199
figure out whether this interpolation

451
00:15:29,199 --> 00:15:31,360
was successful or not

452
00:15:31,360 --> 00:15:34,000
and usually we do this with a standard

453
00:15:34,000 --> 00:15:35,519
trick so what we usually would like to

454
00:15:35,519 --> 00:15:38,240
do is we simply pick a random point r

455
00:15:38,240 --> 00:15:40,160
we take the two original polynomials

456
00:15:40,160 --> 00:15:42,399
small p and small q we evaluate them at

457
00:15:42,399 --> 00:15:43,120
r

458
00:15:43,120 --> 00:15:45,920
we evaluate capital p and capital q at r

459
00:15:45,920 --> 00:15:47,519
and then we check whether this equation

460
00:15:47,519 --> 00:15:49,839
holds and if the interpolation was

461
00:15:49,839 --> 00:15:52,000
correct then this equation will always

462
00:15:52,000 --> 00:15:52,800
hold

463
00:15:52,800 --> 00:15:55,199
and if the interpolation uh was not

464
00:15:55,199 --> 00:15:57,199
correct so if those two things are not

465
00:15:57,199 --> 00:15:59,440
equal then this equation will not be

466
00:15:59,440 --> 00:16:00,880
true for

467
00:16:00,880 --> 00:16:02,959
with an overwhelming probability

468
00:16:02,959 --> 00:16:05,440
uh over the random choice of r

469
00:16:05,440 --> 00:16:07,199
but the problem here is that

470
00:16:07,199 --> 00:16:09,759
this check only works if we choose r

471
00:16:09,759 --> 00:16:11,759
independently of the polynomials for

472
00:16:11,759 --> 00:16:14,160
which we want to execute the check

473
00:16:14,160 --> 00:16:15,040
but

474
00:16:15,040 --> 00:16:17,519
here we run into a problem

475
00:16:17,519 --> 00:16:20,160
because where does this r come from

476
00:16:20,160 --> 00:16:22,320
at the time of hashing some input we

477
00:16:22,320 --> 00:16:24,079
would already like to provide for

478
00:16:24,079 --> 00:16:26,480
example p of r or q of r

479
00:16:26,480 --> 00:16:28,560
but at the same time r should somehow be

480
00:16:28,560 --> 00:16:30,560
hidden because if r is known then the

481
00:16:30,560 --> 00:16:32,240
adverse we can potentially pick a

482
00:16:32,240 --> 00:16:34,720
maliciously chosen p or q such that the

483
00:16:34,720 --> 00:16:36,800
check passes even though those two

484
00:16:36,800 --> 00:16:39,680
rational functions are not the same

485
00:16:39,680 --> 00:16:41,360
and the idea here is to encrypt the

486
00:16:41,360 --> 00:16:42,560
point r

487
00:16:42,560 --> 00:16:44,800
in a clever way such that we can still

488
00:16:44,800 --> 00:16:46,560
perform this check

489
00:16:46,560 --> 00:16:48,000
but the adversary does not learn

490
00:16:48,000 --> 00:16:50,800
anything about r itself

491
00:16:50,800 --> 00:16:52,560
and what we do here is we simply assume

492
00:16:52,560 --> 00:16:54,639
that part of the description of the hash

493
00:16:54,639 --> 00:16:56,880
function will now be g to the r g to the

494
00:16:56,880 --> 00:16:59,360
r squared and so on for some random

495
00:16:59,360 --> 00:17:01,199
point r

496
00:17:01,199 --> 00:17:03,920
and this is useful because given a

497
00:17:03,920 --> 00:17:07,039
polynomial p and those powers of r

498
00:17:07,039 --> 00:17:08,720
we can evaluate

499
00:17:08,720 --> 00:17:11,280
p of r in the exponent without knowing

500
00:17:11,280 --> 00:17:13,359
the value of r

501
00:17:13,359 --> 00:17:15,280
so how does this help

502
00:17:15,280 --> 00:17:17,280
now what we will do is

503
00:17:17,280 --> 00:17:18,799
the hash value will now be the

504
00:17:18,799 --> 00:17:20,240
evaluations

505
00:17:20,240 --> 00:17:21,199
of

506
00:17:21,199 --> 00:17:22,880
the polynomial corresponding to the

507
00:17:22,880 --> 00:17:24,240
input bit string

508
00:17:24,240 --> 00:17:25,359
along

509
00:17:25,359 --> 00:17:26,880
with

510
00:17:26,880 --> 00:17:28,799
an evaluation of that polynomial in the

511
00:17:28,799 --> 00:17:32,400
exponent at the secret point r

512
00:17:32,400 --> 00:17:34,960
and again as before we will take those

513
00:17:34,960 --> 00:17:37,679
points we will divide them point wise we

514
00:17:37,679 --> 00:17:39,840
will interpolate a candidate rational

515
00:17:39,840 --> 00:17:41,760
function capital p of z divided by

516
00:17:41,760 --> 00:17:43,760
capital q of that

517
00:17:43,760 --> 00:17:45,360
and then we can compute those four

518
00:17:45,360 --> 00:17:46,400
values

519
00:17:46,400 --> 00:17:48,480
because um

520
00:17:48,480 --> 00:17:51,039
g to the small p of r and g to the small

521
00:17:51,039 --> 00:17:53,039
q of r are given as part of the hash

522
00:17:53,039 --> 00:17:54,000
values

523
00:17:54,000 --> 00:17:55,600
and g to the

524
00:17:55,600 --> 00:17:58,000
capital q of r and g to the capital p of

525
00:17:58,000 --> 00:18:00,480
r can be computed from the interpolated

526
00:18:00,480 --> 00:18:03,120
rational function and the powers of g to

527
00:18:03,120 --> 00:18:04,559
the r

528
00:18:04,559 --> 00:18:05,840
and now

529
00:18:05,840 --> 00:18:07,840
we observe that to check the equation at

530
00:18:07,840 --> 00:18:09,280
the bottom we can also check the

531
00:18:09,280 --> 00:18:11,520
following equation

532
00:18:11,520 --> 00:18:13,520
which we can just do by evaluating a

533
00:18:13,520 --> 00:18:14,559
pairing

534
00:18:14,559 --> 00:18:16,559
as follows

535
00:18:16,559 --> 00:18:18,960
because by the grantees of a pairing we

536
00:18:18,960 --> 00:18:20,080
basically

537
00:18:20,080 --> 00:18:23,039
pull out the p of rq of our small q of r

538
00:18:23,039 --> 00:18:24,720
capital p of r

539
00:18:24,720 --> 00:18:27,280
and then this equation will hold

540
00:18:27,280 --> 00:18:29,280
if and only if

541
00:18:29,280 --> 00:18:30,640
the equation at the bottom that we

542
00:18:30,640 --> 00:18:34,160
wanted to check originally holds

543
00:18:35,200 --> 00:18:38,640
so why is this a secure construction

544
00:18:38,640 --> 00:18:40,559
intuitively

545
00:18:40,559 --> 00:18:42,559
the reason is as follows

546
00:18:42,559 --> 00:18:44,320
if the inputs have a small hamming

547
00:18:44,320 --> 00:18:46,720
distance then the interpolation will

548
00:18:46,720 --> 00:18:48,880
always succeed so we pick the number of

549
00:18:48,880 --> 00:18:50,960
evaluation points that are part of the

550
00:18:50,960 --> 00:18:53,280
hash values uh part of the hash

551
00:18:53,280 --> 00:18:55,440
function's output sufficiently high such

552
00:18:55,440 --> 00:18:57,520
that we only have always have enough

553
00:18:57,520 --> 00:18:58,640
points

554
00:18:58,640 --> 00:19:02,559
if uh the hamming distance is small

555
00:19:02,559 --> 00:19:05,600
and thus every point r will succeed in

556
00:19:05,600 --> 00:19:07,919
this equality check so nothing bad can

557
00:19:07,919 --> 00:19:10,960
happen here so to speak and what we then

558
00:19:10,960 --> 00:19:12,480
show is that

559
00:19:12,480 --> 00:19:14,160
if the inputs have a large hamming

560
00:19:14,160 --> 00:19:16,799
distance and the check still passes

561
00:19:16,799 --> 00:19:18,160
then

562
00:19:18,160 --> 00:19:20,400
we can actually compute r given the

563
00:19:20,400 --> 00:19:22,320
powers of r and thus break our

564
00:19:22,320 --> 00:19:26,160
corresponding security assumption

565
00:19:26,160 --> 00:19:27,600
thank you for your attention and you can

566
00:19:27,600 --> 00:19:29,919
find all the details in the e-print

567
00:19:29,919 --> 00:19:31,840
version of this paper which you can find

568
00:19:31,840 --> 00:19:35,039
under the following link

