1
00:00:01,040 --> 00:00:03,199
hello everyone i'm yo jiang huang today

2
00:00:03,199 --> 00:00:05,279
i'm going to talk about our work on the

3
00:00:05,279 --> 00:00:07,520
compare circle technique and post

4
00:00:07,520 --> 00:00:09,519
content security of proof of sequential

5
00:00:09,519 --> 00:00:10,960
work

6
00:00:10,960 --> 00:00:13,040
so this is a joint work with kaimin

7
00:00:13,040 --> 00:00:17,279
zhong search fear myself and tiny now

8
00:00:17,279 --> 00:00:18,400
first we are going to talk about the

9
00:00:18,400 --> 00:00:20,240
quantum rendering oracle model

10
00:00:20,240 --> 00:00:22,320
and then we give a brief summary of our

11
00:00:22,320 --> 00:00:23,359
results

12
00:00:23,359 --> 00:00:25,279
as a commonly used technique we talk

13
00:00:25,279 --> 00:00:27,119
about the lazy sampling in both

14
00:00:27,119 --> 00:00:28,840
classical quantum

15
00:00:28,840 --> 00:00:31,439
settings finally we discuss our results

16
00:00:31,439 --> 00:00:34,160
in more detail

17
00:00:35,280 --> 00:00:37,600
so the renault model is a common way to

18
00:00:37,600 --> 00:00:40,160
analyze classical cryptographic scheme

19
00:00:40,160 --> 00:00:42,239
that use a hash function

20
00:00:42,239 --> 00:00:44,960
here hash functions are idealized into

21
00:00:44,960 --> 00:00:47,600
uniformly sampled function that everyone

22
00:00:47,600 --> 00:00:50,480
has access to

23
00:00:50,800 --> 00:00:53,440
bring this into the content settings

24
00:00:53,440 --> 00:00:55,600
everyone can make the query in

25
00:00:55,600 --> 00:00:58,600
superposition

26
00:00:59,039 --> 00:01:01,199
contrary to the sequential query

27
00:01:01,199 --> 00:01:03,840
we are in the setting of parallel query

28
00:01:03,840 --> 00:01:05,680
in which multiple data points could be

29
00:01:05,680 --> 00:01:09,840
asked for a single query round

30
00:01:10,799 --> 00:01:12,560
a typical example problem in the

31
00:01:12,560 --> 00:01:14,560
randomical model is a zero permit

32
00:01:14,560 --> 00:01:17,119
problem which asks to find the

33
00:01:17,119 --> 00:01:19,680
input that is mapped to zero

34
00:01:19,680 --> 00:01:21,360
it is well studied and understood in

35
00:01:21,360 --> 00:01:24,720
both classical content settings

36
00:01:24,720 --> 00:01:27,600
for example when given parallel access

37
00:01:27,600 --> 00:01:29,920
to the renault oracle running google

38
00:01:29,920 --> 00:01:31,439
search in parallel is known to be

39
00:01:31,439 --> 00:01:33,919
optimal

40
00:01:34,400 --> 00:01:36,640
another example problem in the renault

41
00:01:36,640 --> 00:01:39,040
model is the hessian problem which asked

42
00:01:39,040 --> 00:01:42,640
to find the sequence of input x 0 to x q

43
00:01:42,640 --> 00:01:45,040
such that one is mapped to another we

44
00:01:45,040 --> 00:01:47,040
refer to this as finding the hash q

45
00:01:47,040 --> 00:01:48,079
chain

46
00:01:48,079 --> 00:01:50,320
and it is easy with q squared queries

47
00:01:50,320 --> 00:01:52,960
but expect it to be hard with less than

48
00:01:52,960 --> 00:01:55,520
q square queries even if we are given

49
00:01:55,520 --> 00:01:58,479
parallel access to the render record

50
00:01:58,479 --> 00:02:00,880
this is mainly because the data points

51
00:02:00,880 --> 00:02:02,960
being asked in the single query run are

52
00:02:02,960 --> 00:02:04,960
non-adaptive which means they should not

53
00:02:04,960 --> 00:02:09,079
depend on their query output

54
00:02:09,919 --> 00:02:12,879
the hardness for the hessian problem

55
00:02:12,879 --> 00:02:14,800
is easy to show in the classical setting

56
00:02:14,800 --> 00:02:17,280
but there hasn't been any quantum proof

57
00:02:17,280 --> 00:02:20,080
priority work

58
00:02:20,879 --> 00:02:22,400
so what have we done

59
00:02:22,400 --> 00:02:23,200
we

60
00:02:23,200 --> 00:02:25,680
offer a useful framework for analyzing

61
00:02:25,680 --> 00:02:27,360
such problems

62
00:02:27,360 --> 00:02:29,360
in the parallel query quantum retinal

63
00:02:29,360 --> 00:02:31,760
model

64
00:02:32,400 --> 00:02:34,400
using our framework one can prove

65
00:02:34,400 --> 00:02:35,360
quantum

66
00:02:35,360 --> 00:02:36,480
hardness of

67
00:02:36,480 --> 00:02:38,720
this kind of problems using classical

68
00:02:38,720 --> 00:02:41,280
reasoning and this works by lifting

69
00:02:41,280 --> 00:02:43,680
classical proof into quantum proof if in

70
00:02:43,680 --> 00:02:46,480
suitable form

71
00:02:46,560 --> 00:02:48,720
for demonstration we apply our framework

72
00:02:48,720 --> 00:02:51,519
into solving various example problems

73
00:02:51,519 --> 00:02:53,360
such as

74
00:02:53,360 --> 00:02:56,879
simplifying existing proof

75
00:02:57,200 --> 00:02:59,040
such as

76
00:02:59,040 --> 00:03:01,120
the hardness for zero premise problem

77
00:03:01,120 --> 00:03:03,280
and also obtain new bounds

78
00:03:03,280 --> 00:03:04,720
such as for the collision finding

79
00:03:04,720 --> 00:03:06,800
problem and for the kill chain finding

80
00:03:06,800 --> 00:03:09,200
problem

81
00:03:10,159 --> 00:03:12,959
the main application of our framework

82
00:03:12,959 --> 00:03:15,040
is that we give the first post content

83
00:03:15,040 --> 00:03:18,480
security proof of the psw scheme

84
00:03:18,480 --> 00:03:21,519
or the proof of sequential work scheme

85
00:03:21,519 --> 00:03:23,519
constructed by cohan and pr track in

86
00:03:23,519 --> 00:03:26,319
2018.

87
00:03:26,400 --> 00:03:28,640
independent and concurrent work blockade

88
00:03:28,640 --> 00:03:31,360
l also managed to give the post-content

89
00:03:31,360 --> 00:03:35,280
security proof of the pure step scheme

90
00:03:36,400 --> 00:03:38,400
however their proof is tailored to the

91
00:03:38,400 --> 00:03:40,239
specific problem

92
00:03:40,239 --> 00:03:42,480
whereas our framework is generally more

93
00:03:42,480 --> 00:03:43,840
applicable

94
00:03:43,840 --> 00:03:47,599
into various example problems

95
00:03:47,599 --> 00:03:50,159
also to understand their proof a certain

96
00:03:50,159 --> 00:03:52,560
amount of quantum information science is

97
00:03:52,560 --> 00:03:53,680
required

98
00:03:53,680 --> 00:03:56,239
while assuming our framework is correct

99
00:03:56,239 --> 00:03:58,959
verifying our proof is just a matter of

100
00:03:58,959 --> 00:04:02,400
purely classical reasoning

101
00:04:03,920 --> 00:04:06,239
so next let's

102
00:04:06,239 --> 00:04:09,280
talk about the lazy sampling technique

103
00:04:09,280 --> 00:04:10,159
it is

104
00:04:10,159 --> 00:04:11,760
useful

105
00:04:11,760 --> 00:04:14,319
for analyzing

106
00:04:14,319 --> 00:04:16,320
harm problems

107
00:04:16,320 --> 00:04:19,120
in the random micro model

108
00:04:19,120 --> 00:04:22,000
so instead of sampling the entire hash

109
00:04:22,000 --> 00:04:24,639
function the renault function

110
00:04:24,639 --> 00:04:27,040
at the beginning

111
00:04:27,040 --> 00:04:29,600
we use the database to simulate a random

112
00:04:29,600 --> 00:04:32,000
oracle

113
00:04:32,000 --> 00:04:34,000
the database is initially empty and

114
00:04:34,000 --> 00:04:36,160
whenever an entry being queried we

115
00:04:36,160 --> 00:04:37,840
sample the fresh brandedness for that

116
00:04:37,840 --> 00:04:40,840
entry

117
00:04:43,680 --> 00:04:45,040
firmly

118
00:04:45,040 --> 00:04:47,440
the database is a partial function with

119
00:04:47,440 --> 00:04:50,320
augmented value but

120
00:04:50,320 --> 00:04:53,280
and after q queries there will be

121
00:04:53,280 --> 00:04:57,040
no more than q non-empty entries

122
00:04:57,040 --> 00:05:00,080
within the database

123
00:05:01,120 --> 00:05:03,520
for analyzing the zero premium problem

124
00:05:03,520 --> 00:05:05,759
an important observation is

125
00:05:05,759 --> 00:05:06,560
that

126
00:05:06,560 --> 00:05:08,720
if there's no zero within the database

127
00:05:08,720 --> 00:05:10,479
dq

128
00:05:10,479 --> 00:05:11,440
then

129
00:05:11,440 --> 00:05:13,120
the adversary is

130
00:05:13,120 --> 00:05:15,039
unlikely to output one zero permission

131
00:05:15,039 --> 00:05:17,280
neither

132
00:05:17,280 --> 00:05:19,919
because his best guess is some input

133
00:05:19,919 --> 00:05:23,520
that is not recorded within the database

134
00:05:23,520 --> 00:05:25,520
but this will success with probability

135
00:05:25,520 --> 00:05:26,800
no more than

136
00:05:26,800 --> 00:05:30,560
the exponentially small error bound

137
00:05:35,600 --> 00:05:37,520
firmly we can write this down as in

138
00:05:37,520 --> 00:05:41,039
following probability bounds

139
00:05:42,400 --> 00:05:43,680
putting this

140
00:05:43,680 --> 00:05:45,440
into the content settings

141
00:05:45,440 --> 00:05:47,520
it is a way to understand xander's

142
00:05:47,520 --> 00:05:48,960
compressed oracle

143
00:05:48,960 --> 00:05:51,520
technique in the sense that

144
00:05:51,520 --> 00:05:54,880
now the database states are in a content

145
00:05:54,880 --> 00:05:55,919
state

146
00:05:55,919 --> 00:05:58,479
and whenever an entry being queried we

147
00:05:58,479 --> 00:06:01,199
are essentially apply

148
00:06:01,199 --> 00:06:03,600
the compressed oracle onto the content

149
00:06:03,600 --> 00:06:06,160
state

150
00:06:06,160 --> 00:06:09,120
of the database

151
00:06:10,720 --> 00:06:13,199
firmly the state of database is now in

152
00:06:13,199 --> 00:06:15,680
the superposition of partial functions

153
00:06:15,680 --> 00:06:18,160
with no more than q9 empty entries after

154
00:06:18,160 --> 00:06:21,160
queries

155
00:06:21,680 --> 00:06:24,880
so here similar observation applies if

156
00:06:24,880 --> 00:06:27,199
we can if there's no zero within the

157
00:06:27,199 --> 00:06:29,360
database dq

158
00:06:29,360 --> 00:06:31,280
which is obtained by measuring the

159
00:06:31,280 --> 00:06:33,680
database state after queries

160
00:06:33,680 --> 00:06:36,240
then the adversary is unlikely to output

161
00:06:36,240 --> 00:06:39,039
one zero premise neither

162
00:06:39,039 --> 00:06:41,600
except here the error error bound is

163
00:06:41,600 --> 00:06:44,400
slightly different

164
00:06:47,039 --> 00:06:49,440
although this simulation is not obvious

165
00:06:49,440 --> 00:06:51,199
it is a way to understand xander's

166
00:06:51,199 --> 00:06:54,400
compressor technique

167
00:06:56,319 --> 00:06:59,840
and notice that now we have reduced

168
00:06:59,840 --> 00:07:03,520
the probability of adversely finding a

169
00:07:03,520 --> 00:07:05,599
zero per image

170
00:07:05,599 --> 00:07:08,479
into the probability of database having

171
00:07:08,479 --> 00:07:12,318
a zero within some of its entry

172
00:07:13,120 --> 00:07:14,880
but how do we bound

173
00:07:14,880 --> 00:07:18,400
this desired probability

174
00:07:19,680 --> 00:07:22,319
next let's

175
00:07:22,319 --> 00:07:24,639
see the classical analysis of zero

176
00:07:24,639 --> 00:07:26,720
premise problem and keep in mind that

177
00:07:26,720 --> 00:07:27,919
our goal

178
00:07:27,919 --> 00:07:30,080
is to eventually lift them into the

179
00:07:30,080 --> 00:07:33,840
quantum proof using our framework

180
00:07:38,960 --> 00:07:41,520
we have two observations first we

181
00:07:41,520 --> 00:07:44,560
observe that if after

182
00:07:44,560 --> 00:07:46,960
q queries sequential queries the

183
00:07:46,960 --> 00:07:49,680
database acquired a zero within some of

184
00:07:49,680 --> 00:07:51,360
its entries

185
00:07:51,360 --> 00:07:54,240
then the zero must occur within one of

186
00:07:54,240 --> 00:07:57,120
the q sequential queries

187
00:07:57,120 --> 00:07:58,800
we can therefore bound the desired

188
00:07:58,800 --> 00:08:01,840
probability by summing together

189
00:08:01,840 --> 00:08:03,840
this bracket notation we called the

190
00:08:03,840 --> 00:08:05,680
transition capacities

191
00:08:05,680 --> 00:08:08,479
which is simply the maximal probability

192
00:08:08,479 --> 00:08:11,199
database shifting from not having a zero

193
00:08:11,199 --> 00:08:13,440
within some of its entry to having a

194
00:08:13,440 --> 00:08:15,840
zero

195
00:08:17,199 --> 00:08:19,360
and second we observe that

196
00:08:19,360 --> 00:08:21,919
if after one parallel query the database

197
00:08:21,919 --> 00:08:25,440
acquired a zero within some of its entry

198
00:08:25,440 --> 00:08:29,360
then that zero must occur within one

199
00:08:29,360 --> 00:08:32,800
of the queried entries

200
00:08:35,839 --> 00:08:38,479
print this all together we can now bound

201
00:08:38,479 --> 00:08:40,240
the desired

202
00:08:40,240 --> 00:08:44,159
probability database having the zero

203
00:08:44,159 --> 00:08:46,240
for the second observation we are using

204
00:08:46,240 --> 00:08:49,360
the technology that the transition

205
00:08:49,360 --> 00:08:52,480
of database shifting from not having a

206
00:08:52,480 --> 00:08:54,560
zero within some of its entry to having

207
00:08:54,560 --> 00:08:56,640
a zero

208
00:08:56,640 --> 00:08:59,120
is strongly recognizable by local

209
00:08:59,120 --> 00:09:01,120
properties zero

210
00:09:01,120 --> 00:09:03,360
and here we refer to the database

211
00:09:03,360 --> 00:09:05,040
property zero

212
00:09:05,040 --> 00:09:07,440
being local because it only depends on

213
00:09:07,440 --> 00:09:09,519
one entry

214
00:09:09,519 --> 00:09:13,040
of the queried database

215
00:09:17,760 --> 00:09:20,160
bring things into a higher level we

216
00:09:20,160 --> 00:09:22,800
obtain the following recipe

217
00:09:22,800 --> 00:09:25,600
first we decompose the desired

218
00:09:25,600 --> 00:09:28,000
probability of database

219
00:09:28,000 --> 00:09:31,120
into sum of transition capacities

220
00:09:31,120 --> 00:09:32,800
and second we bound the transient

221
00:09:32,800 --> 00:09:33,920
capacities

222
00:09:33,920 --> 00:09:36,080
by the probability of local properties

223
00:09:36,080 --> 00:09:39,440
that recognize the transition

224
00:09:42,000 --> 00:09:44,000
and in our framework we use pretty much

225
00:09:44,000 --> 00:09:46,240
the same recipe

226
00:09:46,240 --> 00:09:47,839
except now we are in the quantum

227
00:09:47,839 --> 00:09:49,920
settings so different definition of

228
00:09:49,920 --> 00:09:51,600
transition capacities and

229
00:09:51,600 --> 00:09:53,839
correspondingly adjusted formulas to

230
00:09:53,839 --> 00:09:55,760
bound these transition capacities and

231
00:09:55,760 --> 00:09:58,560
probabilities

232
00:09:58,800 --> 00:10:01,519
so similarly first we decompose the

233
00:10:01,519 --> 00:10:05,160
desired probability

234
00:10:05,279 --> 00:10:08,320
into sum of transient capacities

235
00:10:08,320 --> 00:10:11,839
and second we

236
00:10:11,839 --> 00:10:13,200
recycle

237
00:10:13,200 --> 00:10:15,120
probability bonds from classical

238
00:10:15,120 --> 00:10:17,040
analysis

239
00:10:17,040 --> 00:10:19,040
and plugging into our formulas to obtain

240
00:10:19,040 --> 00:10:21,760
quantum transition to obtain bound for

241
00:10:21,760 --> 00:10:25,120
quantum change capacities

242
00:10:25,680 --> 00:10:26,399
we

243
00:10:26,399 --> 00:10:29,640
also in case of weaker notion of

244
00:10:29,640 --> 00:10:32,720
recognizability provides correspondingly

245
00:10:32,720 --> 00:10:35,839
a different formulas

246
00:10:36,079 --> 00:10:38,000
but the point here is it's also just a

247
00:10:38,000 --> 00:10:40,560
matter of recycling probability bound

248
00:10:40,560 --> 00:10:42,480
from classical analysis and plugging

249
00:10:42,480 --> 00:10:47,160
into a formula to obtain content bound

250
00:10:49,519 --> 00:10:53,120
now back to the xero premise example

251
00:10:53,120 --> 00:10:54,560
we can finally

252
00:10:54,560 --> 00:10:57,839
using our recipe

253
00:10:58,000 --> 00:11:00,480
to lift our classical analysis of their

254
00:11:00,480 --> 00:11:05,519
permit problem into the quantum analysis

255
00:11:07,120 --> 00:11:08,560
so first

256
00:11:08,560 --> 00:11:10,880
we recycle local properties and

257
00:11:10,880 --> 00:11:15,240
probability from classical analysis

258
00:11:16,480 --> 00:11:18,079
and then we

259
00:11:18,079 --> 00:11:20,880
we plug in the probability

260
00:11:20,880 --> 00:11:22,959
into our formulas to obtain

261
00:11:22,959 --> 00:11:24,320
quantum bound

262
00:11:24,320 --> 00:11:27,120
for the transient capacities

263
00:11:27,120 --> 00:11:28,560
summing together these transition

264
00:11:28,560 --> 00:11:30,240
capacities we

265
00:11:30,240 --> 00:11:32,320
obtain a square root probability bound

266
00:11:32,320 --> 00:11:34,079
for the database having a zero within

267
00:11:34,079 --> 00:11:37,199
some of its entry

268
00:11:39,279 --> 00:11:43,839
finally by zendri's compressor colema

269
00:11:43,839 --> 00:11:46,560
we obtain the probability

270
00:11:46,560 --> 00:11:49,600
database of the probability adversary

271
00:11:49,600 --> 00:11:51,600
finding a

272
00:11:51,600 --> 00:11:53,519
zero premium

273
00:11:53,519 --> 00:11:55,839
with only an

274
00:11:55,839 --> 00:11:58,720
small error term

275
00:12:02,480 --> 00:12:04,560
the pattern here is we don't need to

276
00:12:04,560 --> 00:12:06,160
understand the definition of transition

277
00:12:06,160 --> 00:12:08,560
capacities we can simply lift the

278
00:12:08,560 --> 00:12:11,120
classical proof into content proof using

279
00:12:11,120 --> 00:12:13,760
our framework

280
00:12:15,600 --> 00:12:18,480
by using the same recipe

281
00:12:18,480 --> 00:12:20,160
we obtain

282
00:12:20,160 --> 00:12:23,279
several additional results

283
00:12:23,279 --> 00:12:24,800
this includes

284
00:12:24,800 --> 00:12:27,279
a better bound for a creation fighting

285
00:12:27,279 --> 00:12:28,320
problem

286
00:12:28,320 --> 00:12:30,320
and also a new bound

287
00:12:30,320 --> 00:12:31,200
for

288
00:12:31,200 --> 00:12:34,639
the kill chain finding problem

289
00:12:35,040 --> 00:12:37,440
it is also worth mentioning that our

290
00:12:37,440 --> 00:12:39,440
improved bound for collision finding

291
00:12:39,440 --> 00:12:40,480
problem

292
00:12:40,480 --> 00:12:44,320
is in fact sharp in the sense that

293
00:12:44,320 --> 00:12:46,160
we can parallelize

294
00:12:46,160 --> 00:12:48,800
a bht collision finding algorithm and

295
00:12:48,800 --> 00:12:51,120
the success probability will meet our

296
00:12:51,120 --> 00:12:54,480
asymptotic upper bound

297
00:12:58,639 --> 00:13:02,399
the main application of our framework

298
00:13:02,399 --> 00:13:04,639
is that we prove the post-content

299
00:13:04,639 --> 00:13:06,480
security of

300
00:13:06,480 --> 00:13:08,959
the non-interactive variant of the psw

301
00:13:08,959 --> 00:13:10,240
scheme

302
00:13:10,240 --> 00:13:12,800
or the proof of sequential work scheme

303
00:13:12,800 --> 00:13:17,439
constructed by cohen and prtrack in 2018

304
00:13:18,639 --> 00:13:23,040
so the proof of sequential work scheme

305
00:13:24,079 --> 00:13:26,560
is a cryptographic primitive that is

306
00:13:26,560 --> 00:13:30,638
interesting in the context of blockchain

307
00:13:32,160 --> 00:13:33,200
in which

308
00:13:33,200 --> 00:13:36,000
approver interact with a verifier and we

309
00:13:36,000 --> 00:13:38,240
want to force the approver to do a lot

310
00:13:38,240 --> 00:13:40,639
of sequential computational work in

311
00:13:40,639 --> 00:13:43,760
order to convince the verifier

312
00:13:43,760 --> 00:13:44,560
well

313
00:13:44,560 --> 00:13:46,079
assuring

314
00:13:46,079 --> 00:13:48,079
the verification process is

315
00:13:48,079 --> 00:13:51,439
logarithmically fast

316
00:13:55,120 --> 00:13:59,279
so at the bottom level of the psw scheme

317
00:13:59,279 --> 00:14:02,320
constructed by cohen and pr truck

318
00:14:02,320 --> 00:14:05,600
is a so-called psw graph which is simply

319
00:14:05,600 --> 00:14:08,880
a miracle tree with additional red edges

320
00:14:08,880 --> 00:14:13,040
as you can see in the following figures

321
00:14:14,560 --> 00:14:17,279
so we are essentially forcing the prover

322
00:14:17,279 --> 00:14:18,000
to

323
00:14:18,000 --> 00:14:19,680
compute

324
00:14:19,680 --> 00:14:21,760
labeling on

325
00:14:21,760 --> 00:14:23,519
each of the vertex

326
00:14:23,519 --> 00:14:26,480
within the psw graph which will require

327
00:14:26,480 --> 00:14:31,160
a lot of sequential computational work

328
00:14:32,720 --> 00:14:36,000
so for each vertex the label

329
00:14:36,000 --> 00:14:38,160
of it is computed

330
00:14:38,160 --> 00:14:39,920
by the hash of

331
00:14:39,920 --> 00:14:42,880
the labeling the labels of its incoming

332
00:14:42,880 --> 00:14:44,720
vertices

333
00:14:44,720 --> 00:14:46,880
in case of internal velocities it is as

334
00:14:46,880 --> 00:14:48,639
if computing

335
00:14:48,639 --> 00:14:50,639
the labeling on

336
00:14:50,639 --> 00:14:53,680
in the miracle tree

337
00:14:54,240 --> 00:14:57,760
and for the leaf vertices

338
00:14:57,760 --> 00:14:59,279
we are essentially

339
00:14:59,279 --> 00:15:01,920
essentially compute the labeling

340
00:15:01,920 --> 00:15:02,720
from

341
00:15:02,720 --> 00:15:03,519
the

342
00:15:03,519 --> 00:15:05,040
hash of

343
00:15:05,040 --> 00:15:07,920
vertices from the red edges

344
00:15:07,920 --> 00:15:10,160
for example

345
00:15:10,160 --> 00:15:14,079
if we want to compute the label l11

346
00:15:14,079 --> 00:15:16,320
we need to compute hash of

347
00:15:16,320 --> 00:15:19,920
the label l0 and l10

348
00:15:19,920 --> 00:15:23,199
as they are from the red edges connected

349
00:15:23,199 --> 00:15:24,160
to

350
00:15:24,160 --> 00:15:27,160
l11

351
00:15:29,759 --> 00:15:34,560
so next let's see the psw scheme

352
00:15:34,800 --> 00:15:36,560
we talked about the interactive variant

353
00:15:36,560 --> 00:15:37,839
here

354
00:15:37,839 --> 00:15:39,839
but we can

355
00:15:39,839 --> 00:15:42,480
also not interactivize this by fiasco

356
00:15:42,480 --> 00:15:44,800
mere transform

357
00:15:44,800 --> 00:15:46,160
which is

358
00:15:46,160 --> 00:15:50,719
the target we analyze in our paper

359
00:15:51,920 --> 00:15:53,680
so first

360
00:15:53,680 --> 00:15:56,560
the approver compute the entire labeling

361
00:15:56,560 --> 00:15:58,560
on the psw graph

362
00:15:58,560 --> 00:16:00,720
and return the root label to the

363
00:16:00,720 --> 00:16:03,360
verifier

364
00:16:04,959 --> 00:16:08,639
and second the verifier will

365
00:16:08,639 --> 00:16:12,560
challenge the approver to open several

366
00:16:12,560 --> 00:16:14,240
random leaves

367
00:16:14,240 --> 00:16:17,680
of the psw graph

368
00:16:19,600 --> 00:16:21,440
correspondingly the approval will

369
00:16:21,440 --> 00:16:22,560
respond

370
00:16:22,560 --> 00:16:24,639
the authentication path

371
00:16:24,639 --> 00:16:25,440
of

372
00:16:25,440 --> 00:16:28,720
challenged leaves

373
00:16:30,639 --> 00:16:32,560
at the end the verifier will only need

374
00:16:32,560 --> 00:16:37,199
to check consistency of these opened

375
00:16:37,199 --> 00:16:38,959
labeling on the

376
00:16:38,959 --> 00:16:40,320
leaves

377
00:16:40,320 --> 00:16:42,399
and the

378
00:16:42,399 --> 00:16:45,600
authentication path

379
00:16:48,639 --> 00:16:50,720
for analysis

380
00:16:50,720 --> 00:16:54,720
the intuition is as follows

381
00:16:55,360 --> 00:16:57,199
since we have position and pre-immediate

382
00:16:57,199 --> 00:16:59,519
resistance

383
00:16:59,519 --> 00:17:03,120
once the root label is sent to the

384
00:17:03,120 --> 00:17:06,160
verifier the entire labeling of the tree

385
00:17:06,160 --> 00:17:08,799
is fixed

386
00:17:09,599 --> 00:17:12,160
and if there are too many cheating

387
00:17:12,160 --> 00:17:13,439
leaves

388
00:17:13,439 --> 00:17:16,720
on the psw graph

389
00:17:16,720 --> 00:17:19,520
then it is easily caught by the opening

390
00:17:19,520 --> 00:17:22,959
process of the merkle tree

391
00:17:23,520 --> 00:17:27,119
but if there is only few chilling leaves

392
00:17:27,119 --> 00:17:30,080
then there is a head a long hash chain

393
00:17:30,080 --> 00:17:31,919
going through most of the vertices

394
00:17:31,919 --> 00:17:35,360
within the psw graph

395
00:17:35,600 --> 00:17:37,919
for example you can see the following

396
00:17:37,919 --> 00:17:38,960
figure

397
00:17:38,960 --> 00:17:42,160
if the approver cheats on these two

398
00:17:42,160 --> 00:17:45,200
red vertices

399
00:17:45,440 --> 00:17:48,400
then the green hash chain

400
00:17:48,400 --> 00:17:52,640
will go through the rest of the vertices

401
00:17:53,760 --> 00:17:56,320
therefore by the previously mentioned

402
00:17:56,320 --> 00:17:59,360
hash chain bound this will this will

403
00:17:59,360 --> 00:18:02,080
require a lot of

404
00:18:02,080 --> 00:18:05,600
sequential computational work

405
00:18:09,200 --> 00:18:10,160
as

406
00:18:10,160 --> 00:18:12,240
we can see

407
00:18:12,240 --> 00:18:15,840
in this analysis we need to consider

408
00:18:15,840 --> 00:18:18,400
intertwined core problems such as

409
00:18:18,400 --> 00:18:20,720
condition finding problem

410
00:18:20,720 --> 00:18:22,720
pre-image finding problem and also has

411
00:18:22,720 --> 00:18:24,960
chain finding problem

412
00:18:24,960 --> 00:18:27,120
in order to deal with this mix of

413
00:18:27,120 --> 00:18:28,960
problems

414
00:18:28,960 --> 00:18:31,280
the situation is more complicated and we

415
00:18:31,280 --> 00:18:36,160
cannot simply apply previous recipe

416
00:18:36,880 --> 00:18:39,120
we need rules to decompose these

417
00:18:39,120 --> 00:18:43,120
complicated transition capacities

418
00:18:43,120 --> 00:18:44,720
about the

419
00:18:44,720 --> 00:18:46,960
intertwined core problems into simpler

420
00:18:46,960 --> 00:18:49,360
forms

421
00:18:49,360 --> 00:18:51,039
that's why we are giving calculus for

422
00:18:51,039 --> 00:18:53,760
transition capacities

423
00:18:53,760 --> 00:18:55,919
this includes some basic rules to

424
00:18:55,919 --> 00:18:57,120
manipulate

425
00:18:57,120 --> 00:18:59,280
the capacities

426
00:18:59,280 --> 00:19:01,919
for example

427
00:19:01,919 --> 00:19:04,559
the capacities are symmetric

428
00:19:04,559 --> 00:19:07,280
and whenever encountering union

429
00:19:07,280 --> 00:19:09,440
properties we have something like

430
00:19:09,440 --> 00:19:11,120
quantum union bound

431
00:19:11,120 --> 00:19:14,639
and also lower bound for that

432
00:19:16,400 --> 00:19:18,480
when we encounter

433
00:19:18,480 --> 00:19:21,440
intersection of database property

434
00:19:21,440 --> 00:19:25,720
we also have bound for that

435
00:19:27,679 --> 00:19:30,080
these are relatively intuitive and we

436
00:19:30,080 --> 00:19:32,559
also have more involved

437
00:19:32,559 --> 00:19:34,720
calculus rules to manipulate the

438
00:19:34,720 --> 00:19:38,120
transition capacities

439
00:19:42,080 --> 00:19:44,320
now the pattern here is

440
00:19:44,320 --> 00:19:45,840
this allows us to work with the

441
00:19:45,840 --> 00:19:48,000
transient capacities on an abstract

442
00:19:48,000 --> 00:19:49,840
level without understanding the

443
00:19:49,840 --> 00:19:53,520
definition of transferring capacities

444
00:19:53,520 --> 00:19:55,600
and we can by means of

445
00:19:55,600 --> 00:19:57,840
these rules

446
00:19:57,840 --> 00:19:59,600
these calculus rules

447
00:19:59,600 --> 00:20:04,639
to decompose the transition capacities

448
00:20:05,520 --> 00:20:08,480
that captures the security of

449
00:20:08,480 --> 00:20:12,720
previously mentioned psw scheme

450
00:20:12,960 --> 00:20:15,679
into simple form and from which

451
00:20:15,679 --> 00:20:17,200
we can apply

452
00:20:17,200 --> 00:20:20,159
the previously mentioned recipe for the

453
00:20:20,159 --> 00:20:23,440
rest of our analysis

454
00:20:25,200 --> 00:20:28,240
finally let's recap on our contribution

455
00:20:28,240 --> 00:20:31,039
we offer a useful framework

456
00:20:31,039 --> 00:20:33,679
that whenever applicable help us prove

457
00:20:33,679 --> 00:20:35,840
query complexity bound in the parallel

458
00:20:35,840 --> 00:20:39,360
query quantum random oracle model

459
00:20:39,360 --> 00:20:41,760
and this works by classical

460
00:20:41,760 --> 00:20:44,000
a purely classical reasoning

461
00:20:44,000 --> 00:20:45,919
that lived

462
00:20:45,919 --> 00:20:48,559
classical proofs into content proofs

463
00:20:48,559 --> 00:20:50,640
for demonstration we apply our framework

464
00:20:50,640 --> 00:20:53,679
into various example problems

465
00:20:53,679 --> 00:20:56,799
including recovering known results

466
00:20:56,799 --> 00:21:00,400
and also finding new bounds

467
00:21:01,600 --> 00:21:03,760
finally we encourage the audience to

468
00:21:03,760 --> 00:21:05,440
refer to our

469
00:21:05,440 --> 00:21:08,159
paper for more detail and thanks for

470
00:21:08,159 --> 00:21:11,159
listening

