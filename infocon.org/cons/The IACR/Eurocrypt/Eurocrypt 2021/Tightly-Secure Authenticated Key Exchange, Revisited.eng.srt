1
00:00:01,520 --> 00:00:04,000
hi and welcome to my talk about tightly

2
00:00:04,000 --> 00:00:05,839
secure authenticated key exchange

3
00:00:05,839 --> 00:00:07,120
revisited

4
00:00:07,120 --> 00:00:09,120
my name is dorin riepel and this is

5
00:00:09,120 --> 00:00:11,679
joint work with tibor yaga ike kills and

6
00:00:11,679 --> 00:00:13,599
svenshager

7
00:00:13,599 --> 00:00:15,839
an authenticated key exchange protocol

8
00:00:15,839 --> 00:00:18,240
or short ake is used to establish a

9
00:00:18,240 --> 00:00:21,119
shared session key between two parties

10
00:00:21,119 --> 00:00:23,039
this key can then be used with a

11
00:00:23,039 --> 00:00:25,039
symmetric encryption scheme

12
00:00:25,039 --> 00:00:27,199
to build a secure channel and encrypt

13
00:00:27,199 --> 00:00:29,039
further traffic

14
00:00:29,039 --> 00:00:30,880
ake is an important cryptographic

15
00:00:30,880 --> 00:00:32,880
building block and is widely used for

16
00:00:32,880 --> 00:00:35,840
example in the tls protocol

17
00:00:35,840 --> 00:00:37,920
in this talk i will first define the

18
00:00:37,920 --> 00:00:40,719
security model for ike and as we study

19
00:00:40,719 --> 00:00:43,200
tightly secure ake i will define what

20
00:00:43,200 --> 00:00:44,640
tightness means

21
00:00:44,640 --> 00:00:46,559
then i will give some comparison to

22
00:00:46,559 --> 00:00:48,079
previous work

23
00:00:48,079 --> 00:00:50,320
coming to our contributions i will show

24
00:00:50,320 --> 00:00:52,800
how to build ake from simpler building

25
00:00:52,800 --> 00:00:54,480
blocks in particular from key

26
00:00:54,480 --> 00:00:57,520
encapsulation mechanisms shortcamps

27
00:00:57,520 --> 00:00:59,359
while this construction has been studied

28
00:00:59,359 --> 00:01:01,840
before our result here is to find the

29
00:01:01,840 --> 00:01:04,239
right security requirements for the cam

30
00:01:04,239 --> 00:01:06,560
to actually achieve tightness

31
00:01:06,560 --> 00:01:08,080
i will also show an example

32
00:01:08,080 --> 00:01:10,320
instantiation of the cam at the end of

33
00:01:10,320 --> 00:01:12,799
my presentation

34
00:01:12,799 --> 00:01:15,119
let me now explain the ake syntax and

35
00:01:15,119 --> 00:01:17,680
security model in more detail

36
00:01:17,680 --> 00:01:20,400
we consider two users alice and bob and

37
00:01:20,400 --> 00:01:22,400
we give them both long-term keys

38
00:01:22,400 --> 00:01:24,720
consisting of a public key and a secret

39
00:01:24,720 --> 00:01:27,119
key where the public keys are assumed to

40
00:01:27,119 --> 00:01:29,759
be known to everyone in the network

41
00:01:29,759 --> 00:01:32,320
now alice wants to exchange

42
00:01:32,320 --> 00:01:34,159
a key with bob

43
00:01:34,159 --> 00:01:37,040
therefore she computes some message m a

44
00:01:37,040 --> 00:01:39,119
which he sends over to bob

45
00:01:39,119 --> 00:01:41,040
at the same time she holds some

46
00:01:41,040 --> 00:01:43,119
additional secret information which is

47
00:01:43,119 --> 00:01:45,520
different from the long term secrets and

48
00:01:45,520 --> 00:01:47,840
which we call the state of alice

49
00:01:47,840 --> 00:01:49,840
the state contains all ephemeral

50
00:01:49,840 --> 00:01:52,159
information that is necessary to derive

51
00:01:52,159 --> 00:01:55,680
the session key later in our model we

52
00:01:55,680 --> 00:01:58,079
are focusing on two message protocols

53
00:01:58,079 --> 00:02:00,479
where each party sends and receives only

54
00:02:00,479 --> 00:02:01,759
one message

55
00:02:01,759 --> 00:02:03,600
that means when bob receives ella's

56
00:02:03,600 --> 00:02:05,920
message he can directly compute the

57
00:02:05,920 --> 00:02:07,759
shared session key

58
00:02:07,759 --> 00:02:10,720
he also computes some response mb which

59
00:02:10,720 --> 00:02:13,520
he sends to to alice

60
00:02:13,520 --> 00:02:15,360
note here that bob does not need to

61
00:02:15,360 --> 00:02:17,920
store any ephemeral information and thus

62
00:02:17,920 --> 00:02:20,080
he does not have a state

63
00:02:20,080 --> 00:02:22,480
when alice receives bob's message she

64
00:02:22,480 --> 00:02:24,800
can use her state and long term key to

65
00:02:24,800 --> 00:02:27,440
compute the same session key

66
00:02:27,440 --> 00:02:29,280
correctness of the protocol tells us

67
00:02:29,280 --> 00:02:31,760
that those keys are really the same

68
00:02:31,760 --> 00:02:34,480
as long as both users receive

69
00:02:34,480 --> 00:02:36,640
the messages that the other user has

70
00:02:36,640 --> 00:02:38,000
sent

71
00:02:38,000 --> 00:02:40,000
but now when looking at the security of

72
00:02:40,000 --> 00:02:42,640
an ake protocol we also consider an

73
00:02:42,640 --> 00:02:45,440
adversary eve and we put eve in between

74
00:02:45,440 --> 00:02:47,599
the interaction i will explain the

75
00:02:47,599 --> 00:02:50,720
capabilities of if now one after another

76
00:02:50,720 --> 00:02:53,280
first she controls the message flows

77
00:02:53,280 --> 00:02:56,000
that means she can drop modify or inject

78
00:02:56,000 --> 00:02:57,120
messages

79
00:02:57,120 --> 00:02:59,360
for example instead of forwarding bob's

80
00:02:59,360 --> 00:03:02,560
message eve sends another message mb

81
00:03:02,560 --> 00:03:05,200
as a result alice will either reject the

82
00:03:05,200 --> 00:03:07,040
message in case she finds out that

83
00:03:07,040 --> 00:03:08,959
there's something wrong with it or at

84
00:03:08,959 --> 00:03:10,640
least she will compute a different

85
00:03:10,640 --> 00:03:12,080
session key

86
00:03:12,080 --> 00:03:14,000
in the best case we still want some

87
00:03:14,000 --> 00:03:16,720
security properties for the key which i

88
00:03:16,720 --> 00:03:18,959
will explain later

89
00:03:18,959 --> 00:03:21,440
we also want to give eve access to some

90
00:03:21,440 --> 00:03:24,319
secret information so as long as alice

91
00:03:24,319 --> 00:03:27,280
had not received bob's response yet

92
00:03:27,280 --> 00:03:28,959
she can reveal

93
00:03:28,959 --> 00:03:31,200
ella's secret state

94
00:03:31,200 --> 00:03:33,040
but we do not only want to give her

95
00:03:33,040 --> 00:03:35,760
access to ephemeral secrets but also to

96
00:03:35,760 --> 00:03:37,519
the long-term secrets

97
00:03:37,519 --> 00:03:39,760
and in this example here

98
00:03:39,760 --> 00:03:42,159
eve corrupts bob's long-term key which

99
00:03:42,159 --> 00:03:44,560
means she can impersonate bob and send

100
00:03:44,560 --> 00:03:47,120
messages on sp on his behalf she can

101
00:03:47,120 --> 00:03:48,560
also see

102
00:03:48,560 --> 00:03:51,360
how other users react on that

103
00:03:51,360 --> 00:03:54,159
and finally if can also reveal session

104
00:03:54,159 --> 00:03:57,439
keys of her choice so she can decide to

105
00:03:57,439 --> 00:04:00,000
obtain the key that bob computed and

106
00:04:00,000 --> 00:04:01,920
might try it to retrieve

107
00:04:01,920 --> 00:04:03,920
try to use it to retrieve some other

108
00:04:03,920 --> 00:04:06,560
information about bob

109
00:04:06,560 --> 00:04:08,879
zooming out of this picture and modeling

110
00:04:08,879 --> 00:04:10,879
the real world we do not only have two

111
00:04:10,879 --> 00:04:13,599
users but we have many users and many

112
00:04:13,599 --> 00:04:17,120
sessions as an example here we add carol

113
00:04:17,120 --> 00:04:18,959
and dave to the network

114
00:04:18,959 --> 00:04:21,040
carol has already established a key with

115
00:04:21,040 --> 00:04:23,840
alice and one with dave and dave also

116
00:04:23,840 --> 00:04:26,320
holds the same key with carol

117
00:04:26,320 --> 00:04:29,040
in this experiment we model security

118
00:04:29,040 --> 00:04:32,000
with a so-called challenge oracle if can

119
00:04:32,000 --> 00:04:34,479
make multiple queries to this gerunds

120
00:04:34,479 --> 00:04:35,840
oracle's

121
00:04:35,840 --> 00:04:39,120
for session keys of her choice

122
00:04:39,120 --> 00:04:41,759
let's assume she first challenges the

123
00:04:41,759 --> 00:04:43,759
session between alice and bob

124
00:04:43,759 --> 00:04:45,680
that means she will either get the real

125
00:04:45,680 --> 00:04:48,639
session key or random key

126
00:04:48,639 --> 00:04:51,120
then she challenges alice and carol's

127
00:04:51,120 --> 00:04:53,759
key and again will either receive the

128
00:04:53,759 --> 00:04:56,639
real session key or a random key

129
00:04:56,639 --> 00:04:58,479
the same happens for the session between

130
00:04:58,479 --> 00:05:00,639
carol and dave

131
00:05:00,639 --> 00:05:02,639
when answering these challenge queries

132
00:05:02,639 --> 00:05:03,600
now

133
00:05:03,600 --> 00:05:05,280
there are two different ways to model

134
00:05:05,280 --> 00:05:07,680
this in the experiment

135
00:05:07,680 --> 00:05:09,440
the first scenario

136
00:05:09,440 --> 00:05:12,160
we have multiple challenge bits one for

137
00:05:12,160 --> 00:05:13,440
each challenge

138
00:05:13,440 --> 00:05:16,639
for example the first bit is zero so if

139
00:05:16,639 --> 00:05:18,639
receives the real key

140
00:05:18,639 --> 00:05:21,280
the second bit is one so she receives a

141
00:05:21,280 --> 00:05:25,199
random key and the third bit is also one

142
00:05:25,199 --> 00:05:27,680
in order to win eve must now find the

143
00:05:27,680 --> 00:05:30,240
bid for one particular challenge

144
00:05:30,240 --> 00:05:32,560
she can choose for example the second

145
00:05:32,560 --> 00:05:35,360
challenge and she wins if she guesses b2

146
00:05:35,360 --> 00:05:36,960
correctly

147
00:05:36,960 --> 00:05:38,960
now consider a different scenario where

148
00:05:38,960 --> 00:05:41,680
we only have one challenge bit

149
00:05:41,680 --> 00:05:44,400
that means if the challenge bit is zero

150
00:05:44,400 --> 00:05:46,720
eve will always get the real session

151
00:05:46,720 --> 00:05:49,360
keys when she makes a challenge query

152
00:05:49,360 --> 00:05:51,600
and if the bit is one she will always

153
00:05:51,600 --> 00:05:54,400
receive random keys and of course the

154
00:05:54,400 --> 00:05:59,520
goal is now to guess the bit b correctly

155
00:05:59,680 --> 00:06:01,199
both models have been used in the

156
00:06:01,199 --> 00:06:03,440
literature before but i will tell you

157
00:06:03,440 --> 00:06:05,440
now why we believe that the single bit

158
00:06:05,440 --> 00:06:07,840
model is more useful

159
00:06:07,840 --> 00:06:10,000
first this notion is actually well

160
00:06:10,000 --> 00:06:11,440
established when it comes to

161
00:06:11,440 --> 00:06:13,840
multi-challenged security definitions

162
00:06:13,840 --> 00:06:16,000
for example in standard public key

163
00:06:16,000 --> 00:06:17,120
encryption

164
00:06:17,120 --> 00:06:19,520
the reason for that is that it tightly

165
00:06:19,520 --> 00:06:21,520
that it is tightly equivalent to

166
00:06:21,520 --> 00:06:23,280
so-called real or random security

167
00:06:23,280 --> 00:06:25,759
definitions which are mostly used in

168
00:06:25,759 --> 00:06:27,600
composition theorems

169
00:06:27,600 --> 00:06:30,080
we don't want to use akeus as a standard

170
00:06:30,080 --> 00:06:32,400
alone primitive but we want to compose

171
00:06:32,400 --> 00:06:34,639
it with a symmetric encryption scheme

172
00:06:34,639 --> 00:06:36,960
and when doing so we want all challenge

173
00:06:36,960 --> 00:06:39,440
keys to be random at the same time and

174
00:06:39,440 --> 00:06:41,759
not only one and this is exactly what

175
00:06:41,759 --> 00:06:45,360
the single challenge bit model gives us

176
00:06:45,360 --> 00:06:48,000
apart from that our security model

177
00:06:48,000 --> 00:06:50,080
captures all properties we want to have

178
00:06:50,080 --> 00:06:52,319
on ake protocol

179
00:06:52,319 --> 00:06:54,479
these properties are also formalized in

180
00:06:54,479 --> 00:06:56,800
the ck plus model

181
00:06:56,800 --> 00:06:59,440
in particular we show forward secrecy

182
00:06:59,440 --> 00:07:01,520
which says that an adversary cannot

183
00:07:01,520 --> 00:07:03,360
distinguish the session key of a

184
00:07:03,360 --> 00:07:04,319
challenge

185
00:07:04,319 --> 00:07:06,160
even if both long-term keys are

186
00:07:06,160 --> 00:07:08,160
corrupted after the session key is

187
00:07:08,160 --> 00:07:10,319
computed

188
00:07:10,319 --> 00:07:12,240
resistance to key compromise

189
00:07:12,240 --> 00:07:15,360
impersonation attacks or short kci

190
00:07:15,360 --> 00:07:18,479
means that given a long-term secret the

191
00:07:18,479 --> 00:07:21,039
adversary cannot impersonate some other

192
00:07:21,039 --> 00:07:23,759
honest user in order to fool the owner

193
00:07:23,759 --> 00:07:27,280
of the corrupted secret key

194
00:07:27,280 --> 00:07:29,599
the third property is resistance to

195
00:07:29,599 --> 00:07:32,560
maximal exposure attacks and it says

196
00:07:32,560 --> 00:07:34,720
that the adversary cannot distinguish

197
00:07:34,720 --> 00:07:37,759
the challenge key even when given some

198
00:07:37,759 --> 00:07:40,639
combination of secret information that

199
00:07:40,639 --> 00:07:43,360
do not trivially leak the session key

200
00:07:43,360 --> 00:07:45,840
an example here is that we allow the

201
00:07:45,840 --> 00:07:47,759
adversary to reveal the state of the

202
00:07:47,759 --> 00:07:50,560
initiator and the long-term key of the

203
00:07:50,560 --> 00:07:52,800
responder

204
00:07:52,800 --> 00:07:54,800
i already mentioned the word tightness a

205
00:07:54,800 --> 00:07:56,960
few times which brings me to some

206
00:07:56,960 --> 00:08:00,000
definitions about provable security

207
00:08:00,000 --> 00:08:02,400
the ake security experiment i just

208
00:08:02,400 --> 00:08:05,039
explained is played as a game between a

209
00:08:05,039 --> 00:08:07,280
challenger and an adversary

210
00:08:07,280 --> 00:08:09,759
we prove security by contradiction using

211
00:08:09,759 --> 00:08:11,599
a security reduction

212
00:08:11,599 --> 00:08:13,599
that is we assume that there exists an

213
00:08:13,599 --> 00:08:15,919
adversary a against our cryptographic

214
00:08:15,919 --> 00:08:19,039
scheme in this case the ake protocol and

215
00:08:19,039 --> 00:08:21,919
we use a to build an adversary b against

216
00:08:21,919 --> 00:08:24,160
a computationally hard problem

217
00:08:24,160 --> 00:08:26,319
however we believe that this problem is

218
00:08:26,319 --> 00:08:29,039
hard to solve so such an adversary a

219
00:08:29,039 --> 00:08:32,240
against our scheme cannot exist

220
00:08:32,240 --> 00:08:35,279
we now call a security reduction tide if

221
00:08:35,279 --> 00:08:37,120
a and b have

222
00:08:37,120 --> 00:08:39,039
about the same advantage and running

223
00:08:39,039 --> 00:08:42,000
time and what i mean with about the same

224
00:08:42,000 --> 00:08:44,000
is that they only differ in a constant

225
00:08:44,000 --> 00:08:44,959
factor

226
00:08:44,959 --> 00:08:47,120
in particular for ake they should not

227
00:08:47,120 --> 00:08:49,279
depend on the number of users or the

228
00:08:49,279 --> 00:08:51,920
number of sessions

229
00:08:51,920 --> 00:08:53,680
this tells us how to choose system

230
00:08:53,680 --> 00:08:56,080
parameters correctly in fact only a

231
00:08:56,080 --> 00:08:58,399
tight proofs allows us to implement the

232
00:08:58,399 --> 00:09:00,560
protocol theoretically sound

233
00:09:00,560 --> 00:09:02,800
given a non-typed proof one should think

234
00:09:02,800 --> 00:09:05,279
about increasing the system parameters

235
00:09:05,279 --> 00:09:07,279
for example the size of elliptic curve

236
00:09:07,279 --> 00:09:09,120
groups

237
00:09:09,120 --> 00:09:10,880
before coming to the details of our

238
00:09:10,880 --> 00:09:12,320
results i want to give a short

239
00:09:12,320 --> 00:09:14,720
comparison to previous work

240
00:09:14,720 --> 00:09:16,720
the first tightly secure ake was

241
00:09:16,720 --> 00:09:20,560
proposed by bada at al at tcc 2015.

242
00:09:20,560 --> 00:09:22,560
they focused on the standard model but

243
00:09:22,560 --> 00:09:25,120
did not consider state reveals

244
00:09:25,120 --> 00:09:27,600
they introduced and proved the security

245
00:09:27,600 --> 00:09:29,519
in the multi-challenged bid security

246
00:09:29,519 --> 00:09:32,720
model and not the single bit one

247
00:09:32,720 --> 00:09:36,399
at crypto 2018 eustine and yaga proposed

248
00:09:36,399 --> 00:09:38,160
a variant of the scientific hermann

249
00:09:38,160 --> 00:09:39,279
protocol

250
00:09:39,279 --> 00:09:41,279
in the random oracle model which allows

251
00:09:41,279 --> 00:09:43,680
them to get a tight proof in their work

252
00:09:43,680 --> 00:09:46,240
they also do not consider state reveals

253
00:09:46,240 --> 00:09:48,240
and they also use the multi-challenge

254
00:09:48,240 --> 00:09:50,320
bid model

255
00:09:50,320 --> 00:09:53,120
one year later at crypto gun garden at

256
00:09:53,120 --> 00:09:55,040
i'll provide very practical and

257
00:09:55,040 --> 00:09:57,600
efficient fb helmand protocols also in

258
00:09:57,600 --> 00:09:59,519
the random oracle model

259
00:09:59,519 --> 00:10:01,600
they are the first to use the single

260
00:10:01,600 --> 00:10:03,680
challenge built model however the proof

261
00:10:03,680 --> 00:10:04,959
is not tied

262
00:10:04,959 --> 00:10:07,440
it loses a factor which is linear in the

263
00:10:07,440 --> 00:10:09,279
number of users

264
00:10:09,279 --> 00:10:10,959
they also show that this loss is

265
00:10:10,959 --> 00:10:13,519
inherent to many protocols and in fact

266
00:10:13,519 --> 00:10:16,399
our work bypasses their impossibility

267
00:10:16,399 --> 00:10:18,720
result

268
00:10:18,720 --> 00:10:21,279
there was another work in between liu at

269
00:10:21,279 --> 00:10:23,760
i presented a tightly secure ake and the

270
00:10:23,760 --> 00:10:27,040
standard model at asia crypt 2020

271
00:10:27,040 --> 00:10:28,640
however they did not capture state

272
00:10:28,640 --> 00:10:30,720
reveals and they also focused again on

273
00:10:30,720 --> 00:10:33,360
the multi-challenge bid model

274
00:10:33,360 --> 00:10:35,360
which brings us to our work

275
00:10:35,360 --> 00:10:38,079
re-proposed tight ake protocols

276
00:10:38,079 --> 00:10:40,079
in the random oracle model

277
00:10:40,079 --> 00:10:42,560
and focusing on a stronger security

278
00:10:42,560 --> 00:10:45,040
model capturing state reveals

279
00:10:45,040 --> 00:10:46,480
in particular

280
00:10:46,480 --> 00:10:48,480
yeah we also prove

281
00:10:48,480 --> 00:10:50,480
all our results in the more useful

282
00:10:50,480 --> 00:10:53,120
single challenge bit model

283
00:10:53,120 --> 00:10:55,600
let's dive a bit more into details

284
00:10:55,600 --> 00:10:58,240
our protocol is a generic construction

285
00:10:58,240 --> 00:11:00,800
of basic cryptographic building blocks

286
00:11:00,800 --> 00:11:03,440
our first protocol is built solely from

287
00:11:03,440 --> 00:11:06,399
cams it is widely known that this yields

288
00:11:06,399 --> 00:11:08,480
an ake protocol with implicit

289
00:11:08,480 --> 00:11:11,200
authentication however tightness of this

290
00:11:11,200 --> 00:11:14,160
construction was never considered before

291
00:11:14,160 --> 00:11:16,640
we show how to instantiate such a cam

292
00:11:16,640 --> 00:11:18,959
with hashproof systems

293
00:11:18,959 --> 00:11:21,120
we also look at the second construction

294
00:11:21,120 --> 00:11:22,959
which uses an additional signature

295
00:11:22,959 --> 00:11:25,760
scheme and a mac and this yields an ake

296
00:11:25,760 --> 00:11:28,959
protocol with explicit authentication

297
00:11:28,959 --> 00:11:31,440
for the rest of my talk i will focus on

298
00:11:31,440 --> 00:11:34,079
the first construction and in particular

299
00:11:34,079 --> 00:11:35,920
i want to study the question what

300
00:11:35,920 --> 00:11:38,560
security properties we actually need for

301
00:11:38,560 --> 00:11:40,800
the camp in order to get a tight

302
00:11:40,800 --> 00:11:43,120
security proof

303
00:11:43,120 --> 00:11:45,600
before giving an answer let's look at

304
00:11:45,600 --> 00:11:47,680
the protocol itself

305
00:11:47,680 --> 00:11:50,240
in total the protocol uses three chem

306
00:11:50,240 --> 00:11:53,200
instances a long term camp for each user

307
00:11:53,200 --> 00:11:55,440
to ensure authentication and then a

308
00:11:55,440 --> 00:11:58,720
female cam to ensure forward secrecy but

309
00:11:58,720 --> 00:12:00,320
one after another

310
00:12:00,320 --> 00:12:02,639
let us start with the ephemeral chem

311
00:12:02,639 --> 00:12:04,800
which we mark with the tilde

312
00:12:04,800 --> 00:12:07,600
alice the initiator of the protocol

313
00:12:07,600 --> 00:12:10,399
draws a fresh key pair and sends the

314
00:12:10,399 --> 00:12:13,040
fumoral public key to bob

315
00:12:13,040 --> 00:12:15,680
bob runs the encaps algorithm to

316
00:12:15,680 --> 00:12:18,560
encapsulate a key k-tilde

317
00:12:18,560 --> 00:12:21,360
he sends the cipher text back to alice

318
00:12:21,360 --> 00:12:24,399
so that she can compute the same key

319
00:12:24,399 --> 00:12:27,200
in order to do so she needs to store the

320
00:12:27,200 --> 00:12:30,160
ephemeral secret key until she receives

321
00:12:30,160 --> 00:12:31,839
bob's message

322
00:12:31,839 --> 00:12:33,839
that is stu that is what is stored

323
00:12:33,839 --> 00:12:36,399
inside the state

324
00:12:36,399 --> 00:12:38,800
now we add another cam instance to

325
00:12:38,800 --> 00:12:41,519
authenticate alice alice keeps the

326
00:12:41,519 --> 00:12:44,079
public and secret key as a long-term key

327
00:12:44,079 --> 00:12:45,040
pair

328
00:12:45,040 --> 00:12:48,079
bob knowing ls public key can now

329
00:12:48,079 --> 00:12:51,200
encapsulate a key kb and sends the

330
00:12:51,200 --> 00:12:53,120
cipher text to alice

331
00:12:53,120 --> 00:12:55,760
and alice can compute the same key using

332
00:12:55,760 --> 00:12:58,480
her secret key

333
00:12:58,480 --> 00:13:01,120
now we do the same on bob's side

334
00:13:01,120 --> 00:13:04,000
he gets some long-term key pair alice

335
00:13:04,000 --> 00:13:07,040
encapsulates a key ka to bob's public

336
00:13:07,040 --> 00:13:07,839
key

337
00:13:07,839 --> 00:13:10,560
and sends the ciphertext over

338
00:13:10,560 --> 00:13:12,959
in order to derive the final session key

339
00:13:12,959 --> 00:13:15,680
alice must also store ka inside her

340
00:13:15,680 --> 00:13:17,600
state

341
00:13:17,600 --> 00:13:20,560
now we have three intermediate cam keys

342
00:13:20,560 --> 00:13:21,600
ka

343
00:13:21,600 --> 00:13:23,680
kb and ktilde

344
00:13:23,680 --> 00:13:26,079
which are all hashed together along with

345
00:13:26,079 --> 00:13:29,360
public session information to derive the

346
00:13:29,360 --> 00:13:32,000
actual session key

347
00:13:32,000 --> 00:13:34,560
what we then did was to extract the

348
00:13:34,560 --> 00:13:37,120
exact security properties we need from

349
00:13:37,120 --> 00:13:38,399
the cam

350
00:13:38,399 --> 00:13:40,639
when considering tightness one can prove

351
00:13:40,639 --> 00:13:42,480
security by simply guessing the

352
00:13:42,480 --> 00:13:44,399
challenge session

353
00:13:44,399 --> 00:13:46,399
and then one can simulate the other

354
00:13:46,399 --> 00:13:48,880
sessions quite simple this normally

355
00:13:48,880 --> 00:13:51,839
results in a quadratic security loss so

356
00:13:51,839 --> 00:13:53,279
we want to avoid this guessing

357
00:13:53,279 --> 00:13:55,279
techniques

358
00:13:55,279 --> 00:13:57,839
now remember that in the ake security

359
00:13:57,839 --> 00:14:00,800
experiment the adversary can adaptively

360
00:14:00,800 --> 00:14:02,720
corrupt users

361
00:14:02,720 --> 00:14:05,199
so considering that we do not

362
00:14:05,199 --> 00:14:08,160
know the users that will be challenged

363
00:14:08,160 --> 00:14:10,079
we need to be able to output the

364
00:14:10,079 --> 00:14:13,680
long-term secrets keys for all users

365
00:14:13,680 --> 00:14:15,680
the long-term keys in our protocol are

366
00:14:15,680 --> 00:14:19,040
the cam secret keys sk and skb

367
00:14:19,040 --> 00:14:21,839
also as all of this happens adaptively

368
00:14:21,839 --> 00:14:25,120
we do not know if the secret key

369
00:14:25,120 --> 00:14:27,279
that decrypts the ciphertext

370
00:14:27,279 --> 00:14:29,680
will be leaked at some point so in the

371
00:14:29,680 --> 00:14:32,160
end all ciphertexts

372
00:14:32,160 --> 00:14:34,880
must decrypt correctly

373
00:14:34,880 --> 00:14:37,680
something related to this is that

374
00:14:37,680 --> 00:14:41,120
ciphertext can be either part of a query

375
00:14:41,120 --> 00:14:43,760
where the session key is revealed later

376
00:14:43,760 --> 00:14:46,160
or where the session key is challenged

377
00:14:46,160 --> 00:14:47,920
but we do not know which of the two will

378
00:14:47,920 --> 00:14:49,040
happen

379
00:14:49,040 --> 00:14:51,920
so we need some special property here to

380
00:14:51,920 --> 00:14:54,720
embed challenges in all sessions but

381
00:14:54,720 --> 00:14:56,320
also explain

382
00:14:56,320 --> 00:14:59,839
revealed keys afterwards

383
00:14:59,839 --> 00:15:02,560
yet another point for review queries is

384
00:15:02,560 --> 00:15:05,920
that we consider an active adversary

385
00:15:05,920 --> 00:15:08,000
so the adversary can come up with the

386
00:15:08,000 --> 00:15:10,560
cipher text computed by itself

387
00:15:10,560 --> 00:15:12,399
and then it can reveal the session key

388
00:15:12,399 --> 00:15:13,519
as well

389
00:15:13,519 --> 00:15:15,440
but it knows the session key so we need

390
00:15:15,440 --> 00:15:17,279
to be able to simulate this key

391
00:15:17,279 --> 00:15:18,480
correctly

392
00:15:18,480 --> 00:15:20,959
which means that we need some decryption

393
00:15:20,959 --> 00:15:24,399
ability like in a cca security

394
00:15:24,399 --> 00:15:27,199
definition

395
00:15:27,199 --> 00:15:29,120
compared to previous work

396
00:15:29,120 --> 00:15:31,279
we also add another dimension of reveal

397
00:15:31,279 --> 00:15:33,920
queries namely the state reveals

398
00:15:33,920 --> 00:15:36,399
this makes things even more complicated

399
00:15:36,399 --> 00:15:38,560
but it turns out that the properties are

400
00:15:38,560 --> 00:15:41,040
quite similar to those of the long term

401
00:15:41,040 --> 00:15:42,079
camp

402
00:15:42,079 --> 00:15:44,639
on a state reveal query the ephemeral

403
00:15:44,639 --> 00:15:46,720
secret key is leaked

404
00:15:46,720 --> 00:15:48,880
this is the key i called sk tilde and

405
00:15:48,880 --> 00:15:50,240
the protocol

406
00:15:50,240 --> 00:15:51,519
so we need

407
00:15:51,519 --> 00:15:55,040
some corruption ability here again

408
00:15:55,040 --> 00:15:57,680
and what we also need is uh

409
00:15:57,680 --> 00:16:00,000
we want key indistinguishability

410
00:16:00,000 --> 00:16:02,959
even when the state is compromised

411
00:16:02,959 --> 00:16:05,279
and taking all these properties together

412
00:16:05,279 --> 00:16:07,360
it turns out that we need some quite

413
00:16:07,360 --> 00:16:09,360
strong security notion

414
00:16:09,360 --> 00:16:11,279
in fact we came up with the definition

415
00:16:11,279 --> 00:16:13,759
of non-committing key encapsulation

416
00:16:13,759 --> 00:16:15,759
where the term non-committing reflects

417
00:16:15,759 --> 00:16:18,000
the ability to first send out a

418
00:16:18,000 --> 00:16:20,800
challenge cipher text but then still use

419
00:16:20,800 --> 00:16:23,600
it to explain a revealed session key in

420
00:16:23,600 --> 00:16:26,560
case it is not part of a challenge

421
00:16:26,560 --> 00:16:28,720
and i will show you now an instantiation

422
00:16:28,720 --> 00:16:30,720
of the cam and this should hopefully

423
00:16:30,720 --> 00:16:32,800
become clearer then

424
00:16:32,800 --> 00:16:35,040
as i mentioned before we generically

425
00:16:35,040 --> 00:16:37,519
built such a camp from hashproof systems

426
00:16:37,519 --> 00:16:39,360
but here i want to keep it simple and

427
00:16:39,360 --> 00:16:41,279
will directly show the instantiation

428
00:16:41,279 --> 00:16:42,800
from the decisional diffie-hellman

429
00:16:42,800 --> 00:16:45,040
assumption which is then similar to the

430
00:16:45,040 --> 00:16:47,680
grammar-shubert encryption scheme

431
00:16:47,680 --> 00:16:49,440
therefore we fix

432
00:16:49,440 --> 00:16:51,839
a group g of prime order p and a

433
00:16:51,839 --> 00:16:53,360
generator g

434
00:16:53,360 --> 00:16:55,440
we also compute the second group element

435
00:16:55,440 --> 00:16:58,079
h which is g to the power of some random

436
00:16:58,079 --> 00:17:00,800
exponent omega we call this the public

437
00:17:00,800 --> 00:17:02,399
parameter

438
00:17:02,399 --> 00:17:04,400
now the key generation algorithm

439
00:17:04,400 --> 00:17:07,679
picks two elements x0 and x1 randomly as

440
00:17:07,679 --> 00:17:10,240
the secret key and computes the public

441
00:17:10,240 --> 00:17:13,760
key as g to the x0 multiplied by h to

442
00:17:13,760 --> 00:17:15,679
the x1

443
00:17:15,679 --> 00:17:18,400
the encapsulation algorithm takes as

444
00:17:18,400 --> 00:17:20,160
input a public key

445
00:17:20,160 --> 00:17:22,480
it chooses a random exponent r and the

446
00:17:22,480 --> 00:17:25,039
ciphertext consists of two elements

447
00:17:25,039 --> 00:17:29,039
where c0 is g to the r and c1 is h to

448
00:17:29,039 --> 00:17:30,160
the r

449
00:17:30,160 --> 00:17:32,320
the key is derived using an additional

450
00:17:32,320 --> 00:17:34,559
hash function which inputs the public

451
00:17:34,559 --> 00:17:36,960
values like the public key and the

452
00:17:36,960 --> 00:17:39,600
ciphertext to bind them to the key and

453
00:17:39,600 --> 00:17:41,840
the actual secret value which is the

454
00:17:41,840 --> 00:17:44,799
public key to the power of r

455
00:17:44,799 --> 00:17:47,120
note that the cipher text is now a ddh

456
00:17:47,120 --> 00:17:48,080
tuple

457
00:17:48,080 --> 00:17:50,400
or in other words it's an element in the

458
00:17:50,400 --> 00:17:52,240
ddh language

459
00:17:52,240 --> 00:17:54,320
we call r the witness and knowing the

460
00:17:54,320 --> 00:17:58,160
witness the sender can compute the key

461
00:17:58,160 --> 00:18:00,799
decapsulation does not need to know the

462
00:18:00,799 --> 00:18:03,120
witness but it uses the secret key to

463
00:18:03,120 --> 00:18:05,760
derive the same key by simply taking the

464
00:18:05,760 --> 00:18:08,480
first ciphertext element to the power of

465
00:18:08,480 --> 00:18:11,679
x0 multiplied by the second ciphertext

466
00:18:11,679 --> 00:18:14,880
element to the power of x1

467
00:18:14,880 --> 00:18:17,440
so far this looks like a normal cam but

468
00:18:17,440 --> 00:18:19,679
what we need now is to ensure the

469
00:18:19,679 --> 00:18:22,559
non-committing property of ciphertext

470
00:18:22,559 --> 00:18:24,720
and this is where the magic happens

471
00:18:24,720 --> 00:18:26,960
we define an additional algorithm that

472
00:18:26,960 --> 00:18:30,080
computes simulated cipher text and keys

473
00:18:30,080 --> 00:18:33,120
we call this algorithm sim end caps and

474
00:18:33,120 --> 00:18:35,600
it inputs the secret key

475
00:18:35,600 --> 00:18:37,440
as opposed to the normal encaps

476
00:18:37,440 --> 00:18:39,840
algorithm the simulator now picks a

477
00:18:39,840 --> 00:18:42,480
second random exponent rs

478
00:18:42,480 --> 00:18:44,240
and computes the second part of the

479
00:18:44,240 --> 00:18:47,520
ciphertext as h to the power of s

480
00:18:47,520 --> 00:18:49,600
the key is then computed as in the

481
00:18:49,600 --> 00:18:54,000
decapsulation algorithm using x0 and x1

482
00:18:54,000 --> 00:18:55,520
note that we don't have a witness

483
00:18:55,520 --> 00:18:58,480
anymore as the cipher texts are is no

484
00:18:58,480 --> 00:19:01,679
longer a ddh tuple

485
00:19:01,679 --> 00:19:04,080
now what we can show is that the output

486
00:19:04,080 --> 00:19:06,559
of these two algorithms encaps and syn

487
00:19:06,559 --> 00:19:09,840
sim end caps are computationalist the

488
00:19:09,840 --> 00:19:12,000
indistinguishable and this is based on

489
00:19:12,000 --> 00:19:14,000
the ddh assumption

490
00:19:14,000 --> 00:19:16,400
the nice thing here is that this holds

491
00:19:16,400 --> 00:19:19,200
even if the secret key is corrupted

492
00:19:19,200 --> 00:19:21,600
so in the simulation of our

493
00:19:21,600 --> 00:19:24,799
ake experiment we can just always use

494
00:19:24,799 --> 00:19:27,200
the simulated ciphertext

495
00:19:27,200 --> 00:19:29,679
and we do not need to care about whether

496
00:19:29,679 --> 00:19:33,919
the secret key is corrupted afterwards

497
00:19:33,919 --> 00:19:36,720
looking at the chem key now

498
00:19:36,720 --> 00:19:39,679
we can show that the secret value z 0 to

499
00:19:39,679 --> 00:19:41,679
the x 0 times

500
00:19:41,679 --> 00:19:44,480
c 1 to the x 1 is information

501
00:19:44,480 --> 00:19:47,039
theoretically hidden from the adversary

502
00:19:47,039 --> 00:19:48,799
as long as it doesn't know the secret

503
00:19:48,799 --> 00:19:50,000
key

504
00:19:50,000 --> 00:19:52,320
so keys are statistically

505
00:19:52,320 --> 00:19:55,039
indistinguishable from random keys and

506
00:19:55,039 --> 00:19:57,360
here the hash function which is modeled

507
00:19:57,360 --> 00:20:00,240
as a ram oracle ensures that this holds

508
00:20:00,240 --> 00:20:02,080
for many challenge keys

509
00:20:02,080 --> 00:20:03,919
even as some of the other keys are

510
00:20:03,919 --> 00:20:06,480
revealed

511
00:20:06,480 --> 00:20:08,320
so this is the main building block of

512
00:20:08,320 --> 00:20:10,320
our camvas ake

513
00:20:10,320 --> 00:20:12,640
let me now conclude the talk and sum up

514
00:20:12,640 --> 00:20:14,640
our contributions

515
00:20:14,640 --> 00:20:17,600
we introduced the security definition of

516
00:20:17,600 --> 00:20:20,080
non-committing key encapsulation which

517
00:20:20,080 --> 00:20:22,400
is tailored to the security of our ake

518
00:20:22,400 --> 00:20:25,440
protocols we show how to generically

519
00:20:25,440 --> 00:20:27,840
build such camps from hash proof systems

520
00:20:27,840 --> 00:20:30,080
in the random oracle model and one

521
00:20:30,080 --> 00:20:32,640
example we have just seen is based on

522
00:20:32,640 --> 00:20:35,840
the decisional diffie-hellman assumption

523
00:20:35,840 --> 00:20:36,799
using

524
00:20:36,799 --> 00:20:38,720
using that notion we proved tight

525
00:20:38,720 --> 00:20:42,400
security of two different ake protocols

526
00:20:42,400 --> 00:20:44,960
where our first is built only from chem

527
00:20:44,960 --> 00:20:46,960
and our second protocol uses an

528
00:20:46,960 --> 00:20:48,960
additional signature scheme

529
00:20:48,960 --> 00:20:51,039
we are the first to consider tightness

530
00:20:51,039 --> 00:20:53,120
in a stronger security model with state

531
00:20:53,120 --> 00:20:55,520
reveals and we also revisit the

532
00:20:55,520 --> 00:20:57,360
definition of a multi-challenged

533
00:20:57,360 --> 00:20:59,200
security notion

534
00:20:59,200 --> 00:21:01,280
in particular we use the variant with a

535
00:21:01,280 --> 00:21:03,679
single challenge bit which is useful as

536
00:21:03,679 --> 00:21:06,640
it tightly composes the ake protocol

537
00:21:06,640 --> 00:21:10,000
with a symmetric primitive

538
00:21:10,000 --> 00:21:12,720
as our work relies on the properties

539
00:21:12,720 --> 00:21:14,799
of the random oracle the natural

540
00:21:14,799 --> 00:21:17,039
question is if similar techniques are

541
00:21:17,039 --> 00:21:19,600
also possible in the standard model

542
00:21:19,600 --> 00:21:21,840
and at this point i want to mention our

543
00:21:21,840 --> 00:21:25,039
follow-up work where we join forces with

544
00:21:25,039 --> 00:21:26,880
some more researchers to construct

545
00:21:26,880 --> 00:21:29,360
tightly secure ake and signatures in the

546
00:21:29,360 --> 00:21:30,880
standard model

547
00:21:30,880 --> 00:21:32,799
if you're interested that paper was

548
00:21:32,799 --> 00:21:36,159
already presented at crypto this year

549
00:21:36,159 --> 00:21:38,159
for more details on this work please

550
00:21:38,159 --> 00:21:40,880
check out our paper on eprint

551
00:21:40,880 --> 00:21:45,360
that's it and thank you for listening

