1
00:00:00,480 --> 00:00:02,159
hello everyone

2
00:00:02,159 --> 00:00:04,080
my name is daniel casters and i would

3
00:00:04,080 --> 00:00:05,440
like to thank the organizers of

4
00:00:05,440 --> 00:00:07,680
eurocrypt 2021

5
00:00:07,680 --> 00:00:09,840
for giving me the opportunity to present

6
00:00:09,840 --> 00:00:12,160
our paper called c minion

7
00:00:12,160 --> 00:00:13,599
symmetric encryption based on

8
00:00:13,599 --> 00:00:16,480
tofoligates over large finite fields

9
00:00:16,480 --> 00:00:19,039
this is joint work with kestel dobroni

10
00:00:19,039 --> 00:00:20,560
lorenzo gossi

11
00:00:20,560 --> 00:00:23,520
and omagining

12
00:00:24,080 --> 00:00:26,880
now c minion is a cipher defined over

13
00:00:26,880 --> 00:00:29,519
large finite field

14
00:00:29,519 --> 00:00:31,760
its main motivation is to

15
00:00:31,760 --> 00:00:34,160
minimize the number of multiplications

16
00:00:34,160 --> 00:00:36,160
so let me just start by giving an

17
00:00:36,160 --> 00:00:38,399
overview of why this optimization goal

18
00:00:38,399 --> 00:00:41,040
is important

19
00:00:41,920 --> 00:00:44,000
to this end consider the problem of

20
00:00:44,000 --> 00:00:46,399
multi-party computation

21
00:00:46,399 --> 00:00:48,879
in multi-party computation there are n

22
00:00:48,879 --> 00:00:51,280
parties p1 up to pn

23
00:00:51,280 --> 00:00:54,000
and each of these parties has an input x

24
00:00:54,000 --> 00:00:54,879
i

25
00:00:54,879 --> 00:00:57,440
and the goal is to jointly evaluate a

26
00:00:57,440 --> 00:00:58,399
function

27
00:00:58,399 --> 00:01:00,399
of these x i

28
00:01:00,399 --> 00:01:02,480
called small f

29
00:01:02,480 --> 00:01:04,080
and importantly

30
00:01:04,080 --> 00:01:06,000
there should not be a trusted third

31
00:01:06,000 --> 00:01:07,840
party that is involved but rather the

32
00:01:07,840 --> 00:01:09,680
parties should communicate amongst each

33
00:01:09,680 --> 00:01:10,880
other

34
00:01:10,880 --> 00:01:12,400
and there are some other constraints

35
00:01:12,400 --> 00:01:13,520
namely

36
00:01:13,520 --> 00:01:15,439
that each party wants to keep their own

37
00:01:15,439 --> 00:01:18,798
input x i secret

38
00:01:19,119 --> 00:01:21,600
and each party learns nothing apart from

39
00:01:21,600 --> 00:01:23,680
what can be in turn inferred from the

40
00:01:23,680 --> 00:01:27,080
output y

41
00:01:28,240 --> 00:01:29,920
there exists a number of protocols

42
00:01:29,920 --> 00:01:33,119
realizing multi-party computation

43
00:01:33,119 --> 00:01:36,079
and for a subset of these protocols the

44
00:01:36,079 --> 00:01:37,920
following two properties are

45
00:01:37,920 --> 00:01:39,119
namely

46
00:01:39,119 --> 00:01:42,079
non-linear operations are expensive

47
00:01:42,079 --> 00:01:45,439
and fine operations are cheap and by

48
00:01:45,439 --> 00:01:48,079
expensive i mean expensive relative to

49
00:01:48,079 --> 00:01:51,199
the f1 operation

50
00:01:52,560 --> 00:01:56,000
examples of such protocols include yao's

51
00:01:56,000 --> 00:01:57,840
garbled circuit protocol

52
00:01:57,840 --> 00:02:00,399
with a pre-extra optimization

53
00:02:00,399 --> 00:02:01,439
and

54
00:02:01,439 --> 00:02:04,159
in this protocol the function f is

55
00:02:04,159 --> 00:02:06,880
represented as a boolean circuit

56
00:02:06,880 --> 00:02:09,919
comprised of a number of gates

57
00:02:09,919 --> 00:02:10,800
and

58
00:02:10,800 --> 00:02:12,800
these gates are garbled

59
00:02:12,800 --> 00:02:14,000
now it doesn't really matter what

60
00:02:14,000 --> 00:02:15,680
garbling means

61
00:02:15,680 --> 00:02:17,200
but what is important is that the

62
00:02:17,200 --> 00:02:19,200
garbling of an xor gate

63
00:02:19,200 --> 00:02:21,840
is cheap because it involves some simple

64
00:02:21,840 --> 00:02:23,200
additions

65
00:02:23,200 --> 00:02:25,120
whereas the garbling of an end gate is

66
00:02:25,120 --> 00:02:26,319
expensive

67
00:02:26,319 --> 00:02:28,319
because it requires calls to symmetric

68
00:02:28,319 --> 00:02:30,000
primitives

69
00:02:30,000 --> 00:02:32,720
and there's a gmw protocol

70
00:02:32,720 --> 00:02:35,440
and again in this protocol small f is

71
00:02:35,440 --> 00:02:38,000
represented as a boolean circuit

72
00:02:38,000 --> 00:02:40,239
and the inputs to small f are shared

73
00:02:40,239 --> 00:02:42,160
amongst the part

74
00:02:42,160 --> 00:02:44,000
evaluation of

75
00:02:44,000 --> 00:02:45,599
an xor gate

76
00:02:45,599 --> 00:02:47,760
involves some local computation so it's

77
00:02:47,760 --> 00:02:48,959
cheap

78
00:02:48,959 --> 00:02:51,200
whereas the evaluation of an end gate

79
00:02:51,200 --> 00:02:52,720
requires communication between the

80
00:02:52,720 --> 00:02:56,400
parties so it's expensive

81
00:02:58,319 --> 00:03:00,080
suppose now that

82
00:03:00,080 --> 00:03:01,920
p1 up to pn

83
00:03:01,920 --> 00:03:04,560
want to compute a symmetric encryption

84
00:03:04,560 --> 00:03:05,519
function

85
00:03:05,519 --> 00:03:07,280
called e in this case

86
00:03:07,280 --> 00:03:11,360
which depends on a key k and an input x

87
00:03:11,360 --> 00:03:13,280
now there are many ways that this e can

88
00:03:13,280 --> 00:03:15,840
be implemented for example

89
00:03:15,840 --> 00:03:17,440
there could be two parties where one

90
00:03:17,440 --> 00:03:19,200
party has the key and the other has the

91
00:03:19,200 --> 00:03:21,680
input or maybe the keys are shared

92
00:03:21,680 --> 00:03:23,599
but what is important is that we are now

93
00:03:23,599 --> 00:03:25,840
looking at the case that small f equals

94
00:03:25,840 --> 00:03:28,400
this e

95
00:03:29,599 --> 00:03:32,959
in traditional symmetric ciphers

96
00:03:32,959 --> 00:03:36,080
design decisions were made based on

97
00:03:36,080 --> 00:03:38,239
your laptop as a computing environment

98
00:03:38,239 --> 00:03:39,120
and

99
00:03:39,120 --> 00:03:40,879
the gates in your laptop

100
00:03:40,879 --> 00:03:43,840
are implemented in cmos where an xor

101
00:03:43,840 --> 00:03:44,959
gate

102
00:03:44,959 --> 00:03:47,360
is say 2 or 3 times larger than an end

103
00:03:47,360 --> 00:03:48,480
gate

104
00:03:48,480 --> 00:03:49,760
which is

105
00:03:49,760 --> 00:03:51,840
i would say comparable

106
00:03:51,840 --> 00:03:54,400
whereas in the protocols of the previous

107
00:03:54,400 --> 00:03:56,239
slide the difference between the

108
00:03:56,239 --> 00:03:58,080
non-linear and the linear operations are

109
00:03:58,080 --> 00:04:01,319
quite large

110
00:04:01,360 --> 00:04:03,840
so this has led to a class of low

111
00:04:03,840 --> 00:04:05,840
multiplicative complexity ciphers where

112
00:04:05,840 --> 00:04:08,239
people have really tried to minimize the

113
00:04:08,239 --> 00:04:10,640
number of nonlinear operations in

114
00:04:10,640 --> 00:04:14,279
particular the multiplications

115
00:04:14,799 --> 00:04:17,120
in the tables that you see here you see

116
00:04:17,120 --> 00:04:20,478
a number of such ciphers in existence

117
00:04:20,478 --> 00:04:23,040
i don't claim that this is an exhaustive

118
00:04:23,040 --> 00:04:25,360
list but it's just to give you an idea

119
00:04:25,360 --> 00:04:28,479
of what people have been doing

120
00:04:28,479 --> 00:04:31,759
what these these ciphers

121
00:04:31,759 --> 00:04:34,000
do not have in common so maybe but the

122
00:04:34,000 --> 00:04:36,479
difference is is that

123
00:04:36,479 --> 00:04:38,160
basically some of these ciphers are

124
00:04:38,160 --> 00:04:40,240
defined over bits whereas others are

125
00:04:40,240 --> 00:04:42,800
defined over prime fields others are

126
00:04:42,800 --> 00:04:45,360
defined over binary fields

127
00:04:45,360 --> 00:04:48,560
and some are defined over both

128
00:04:48,560 --> 00:04:50,000
and

129
00:04:50,000 --> 00:04:51,520
it turns out because this field is

130
00:04:51,520 --> 00:04:53,600
relatively new that

131
00:04:53,600 --> 00:04:55,919
designs are not as well understood as

132
00:04:55,919 --> 00:04:58,479
these traditional designs so menu or

133
00:04:58,479 --> 00:05:00,240
some of these cycles at least have been

134
00:05:00,240 --> 00:05:03,440
broken by decks

135
00:05:05,520 --> 00:05:07,919
so where does c minion come in well it

136
00:05:07,919 --> 00:05:10,160
fits right here namely it's defined over

137
00:05:10,160 --> 00:05:13,039
both prime fields and binary fields

138
00:05:13,039 --> 00:05:17,840
and with c minion we wanted to give a

139
00:05:17,840 --> 00:05:20,720
an entire suite of

140
00:05:20,720 --> 00:05:22,720
building blocks that make up an

141
00:05:22,720 --> 00:05:24,960
encryption functionality so that means a

142
00:05:24,960 --> 00:05:26,000
mode

143
00:05:26,000 --> 00:05:28,479
a permutation the round functions that

144
00:05:28,479 --> 00:05:30,960
make up this permutation a key schedule

145
00:05:30,960 --> 00:05:33,520
etc

146
00:05:34,800 --> 00:05:37,440
and we were motivated by

147
00:05:37,440 --> 00:05:39,199
based cryptography as i will show you

148
00:05:39,199 --> 00:05:41,520
later

149
00:05:44,160 --> 00:05:45,600
and it turns out that cminion is

150
00:05:45,600 --> 00:05:47,680
actually quite competitive if the key

151
00:05:47,680 --> 00:05:49,840
schedule which turns out to be quite

152
00:05:49,840 --> 00:05:51,759
heavy can be computed during an offline

153
00:05:51,759 --> 00:05:55,280
phase so for example if e

154
00:05:55,280 --> 00:05:58,080
is computed by two parties so in a

155
00:05:58,080 --> 00:05:59,840
two-party

156
00:05:59,840 --> 00:06:02,240
computation setting where one party

157
00:06:02,240 --> 00:06:03,840
computes the key and the other has the

158
00:06:03,840 --> 00:06:06,840
input

159
00:06:09,280 --> 00:06:11,840
in the following figure you see

160
00:06:11,840 --> 00:06:13,759
a number of ciphers

161
00:06:13,759 --> 00:06:15,680
including c minion

162
00:06:15,680 --> 00:06:17,600
and the number of multiplications that

163
00:06:17,600 --> 00:06:20,720
they have so on the x-axis you see

164
00:06:20,720 --> 00:06:23,199
plotted the variable t

165
00:06:23,199 --> 00:06:26,319
which corresponds to the number of

166
00:06:26,319 --> 00:06:28,240
elements that that should be encrypted

167
00:06:28,240 --> 00:06:31,039
so the number of plaintexts basically

168
00:06:31,039 --> 00:06:32,720
and on the y-axis is the number of

169
00:06:32,720 --> 00:06:35,120
multiplications

170
00:06:35,120 --> 00:06:37,759
and as you can see c minion is in blue c

171
00:06:37,759 --> 00:06:40,400
minion performs quite well and

172
00:06:40,400 --> 00:06:42,800
our closest competitor in terms of

173
00:06:42,800 --> 00:06:45,440
minimizing the number of multiplications

174
00:06:45,440 --> 00:06:48,560
turns out to be hedes mimsc

175
00:06:48,560 --> 00:06:50,639
so how did we achieve such a low

176
00:06:50,639 --> 00:06:53,599
multiplication count

177
00:06:53,599 --> 00:06:55,520
well in order to explain that i will go

178
00:06:55,520 --> 00:06:57,440
over the building blocks that make up

179
00:06:57,440 --> 00:07:00,599
see me

180
00:07:02,080 --> 00:07:04,080
so first of all

181
00:07:04,080 --> 00:07:06,160
the mode that we use in c minion is

182
00:07:06,160 --> 00:07:08,160
based on farfallen so what you see in

183
00:07:08,160 --> 00:07:11,280
this picture is the portfolio mode

184
00:07:11,280 --> 00:07:12,400
and

185
00:07:12,400 --> 00:07:14,960
portfolio is actually defined over just

186
00:07:14,960 --> 00:07:16,560
bits

187
00:07:16,560 --> 00:07:18,960
and there are a number of important

188
00:07:18,960 --> 00:07:20,400
takeaways here

189
00:07:20,400 --> 00:07:22,960
well first

190
00:07:23,039 --> 00:07:24,720
you see that there are a number of

191
00:07:24,720 --> 00:07:27,120
permutations involved pb

192
00:07:27,120 --> 00:07:30,400
pc pd and pe

193
00:07:30,400 --> 00:07:32,639
and many of them can be computed in in

194
00:07:32,639 --> 00:07:34,400
parallel

195
00:07:34,400 --> 00:07:37,650
so this has a positive impact on say the

196
00:07:37,650 --> 00:07:39,759
[Music]

197
00:07:39,759 --> 00:07:42,080
the and gate that of

198
00:07:42,080 --> 00:07:44,560
a circuit implementing this

199
00:07:44,560 --> 00:07:46,479
this mode

200
00:07:46,479 --> 00:07:48,400
and there are also other performance

201
00:07:48,400 --> 00:07:50,878
benefits

202
00:07:51,120 --> 00:07:54,240
then a second important thing is that

203
00:07:54,240 --> 00:07:56,080
not all these permutations need to

204
00:07:56,080 --> 00:07:58,720
protect against the same attacks

205
00:07:58,720 --> 00:08:01,599
so for example pc just needs to account

206
00:08:01,599 --> 00:08:04,240
for some subset of attacks whereas

207
00:08:04,240 --> 00:08:06,560
pe then accounts for another subset of

208
00:08:06,560 --> 00:08:07,759
the tech

209
00:08:07,759 --> 00:08:10,560
and these are properties that

210
00:08:10,560 --> 00:08:12,240
will help to to minimize the

211
00:08:12,240 --> 00:08:14,000
multiplication curve

212
00:08:14,000 --> 00:08:16,160
so

213
00:08:16,160 --> 00:08:17,759
this is the mode that we are using in c

214
00:08:17,759 --> 00:08:19,759
minimum

215
00:08:19,759 --> 00:08:21,280
like i said it's based on for quality

216
00:08:21,280 --> 00:08:23,520
but we have made a number of

217
00:08:23,520 --> 00:08:25,360
of changes

218
00:08:25,360 --> 00:08:27,599
and the first change that you see here

219
00:08:27,599 --> 00:08:29,520
in in the red circle is that we have

220
00:08:29,520 --> 00:08:32,320
merged the permutations p

221
00:08:32,320 --> 00:08:35,440
small c and p small b into one

222
00:08:35,440 --> 00:08:39,200
permutation p capital c so importantly

223
00:08:39,200 --> 00:08:41,519
we don't need this accumulator stage

224
00:08:41,519 --> 00:08:44,240
that we saw in the previous slide

225
00:08:44,240 --> 00:08:48,320
and we just need a single permutation pc

226
00:08:48,560 --> 00:08:52,399
and the goal of this pc is to

227
00:08:52,399 --> 00:08:54,480
protect or ensure some protection

228
00:08:54,480 --> 00:08:56,000
against higher order differential

229
00:08:56,000 --> 00:08:57,920
attacks

230
00:08:57,920 --> 00:09:00,079
so

231
00:09:00,480 --> 00:09:02,560
it's it is actually responsible for

232
00:09:02,560 --> 00:09:05,440
making sure that the degree is is large

233
00:09:05,440 --> 00:09:06,320
and

234
00:09:06,320 --> 00:09:08,880
i should emphasize that pc is is called

235
00:09:08,880 --> 00:09:10,959
only once and it doesn't really depend

236
00:09:10,959 --> 00:09:14,160
on the number of inputs

237
00:09:16,560 --> 00:09:19,839
then here in the

238
00:09:20,000 --> 00:09:22,480
in the purple circle you see that we

239
00:09:22,480 --> 00:09:24,240
have truncated the output of the

240
00:09:24,240 --> 00:09:26,800
permutation pe

241
00:09:26,800 --> 00:09:28,959
and the idea behind this is that an

242
00:09:28,959 --> 00:09:30,640
attacker

243
00:09:30,640 --> 00:09:33,040
cannot easily then invert the

244
00:09:33,040 --> 00:09:34,880
permutation pe because this would

245
00:09:34,880 --> 00:09:36,399
involve guessing

246
00:09:36,399 --> 00:09:37,839
the part of the output that we have

247
00:09:37,839 --> 00:09:39,680
truncated

248
00:09:39,680 --> 00:09:41,519
and this helps for example against

249
00:09:41,519 --> 00:09:43,920
protection against meat in the middle of

250
00:09:43,920 --> 00:09:47,279
meeting the middle style effect

251
00:09:48,480 --> 00:09:49,760
then

252
00:09:49,760 --> 00:09:52,800
in the orange circle you see that

253
00:09:52,800 --> 00:09:54,160
we have

254
00:09:54,160 --> 00:09:55,120
moved

255
00:09:55,120 --> 00:09:57,519
the key from the output so that is to

256
00:09:57,519 --> 00:09:58,880
say

257
00:09:58,880 --> 00:10:00,959
it's no longer added to the plain text

258
00:10:00,959 --> 00:10:05,200
but it's moved to the inside of the mode

259
00:10:05,200 --> 00:10:07,839
and this prevents bypassing the key

260
00:10:07,839 --> 00:10:10,320
edition because an attacker is now no

261
00:10:10,320 --> 00:10:13,040
longer easily able to consider just the

262
00:10:13,040 --> 00:10:14,640
differences

263
00:10:14,640 --> 00:10:16,959
which bypass the key edition

264
00:10:16,959 --> 00:10:17,760
and

265
00:10:17,760 --> 00:10:19,360
moreover we have also increased the

266
00:10:19,360 --> 00:10:21,760
number of key indeterminates because as

267
00:10:21,760 --> 00:10:23,360
we will see this

268
00:10:23,360 --> 00:10:24,800
is something that

269
00:10:24,800 --> 00:10:25,680
makes

270
00:10:25,680 --> 00:10:28,399
solvers for systems of equations a lot

271
00:10:28,399 --> 00:10:30,240
slower because they depend on the number

272
00:10:30,240 --> 00:10:33,399
of equations

273
00:10:36,079 --> 00:10:38,160
and in this figure you see the c minion

274
00:10:38,160 --> 00:10:40,320
round function

275
00:10:40,320 --> 00:10:42,240
and it is this round function that is

276
00:10:42,240 --> 00:10:44,640
repeated to make up

277
00:10:44,640 --> 00:10:46,560
both the permutation p e and the

278
00:10:46,560 --> 00:10:48,560
permutation pc where the difference

279
00:10:48,560 --> 00:10:51,120
between the two in the number of such

280
00:10:51,120 --> 00:10:53,519
rounds

281
00:10:54,800 --> 00:10:56,320
an important thing

282
00:10:56,320 --> 00:10:58,000
to notice in this round function is that

283
00:10:58,000 --> 00:11:00,079
we have used the multiplication it's our

284
00:11:00,079 --> 00:11:03,200
source of non-linearity

285
00:11:03,200 --> 00:11:06,480
in many of the the previous designs

286
00:11:06,480 --> 00:11:08,399
the non-linearity came from the fact

287
00:11:08,399 --> 00:11:10,800
that a single field element

288
00:11:10,800 --> 00:11:13,760
was for example qubit so a power map was

289
00:11:13,760 --> 00:11:15,360
applied to it

290
00:11:15,360 --> 00:11:17,360
however a downside of this approach is

291
00:11:17,360 --> 00:11:20,000
that it limits the diffusion and

292
00:11:20,000 --> 00:11:22,240
using a multiplication involves

293
00:11:22,240 --> 00:11:24,240
different field elements which is a

294
00:11:24,240 --> 00:11:26,880
beneficial to the to the diffusion

295
00:11:26,880 --> 00:11:29,279
and also the the multiplication has very

296
00:11:29,279 --> 00:11:30,399
good

297
00:11:30,399 --> 00:11:32,640
properties in the context of linear and

298
00:11:32,640 --> 00:11:36,399
and differential grip analysis

299
00:11:36,560 --> 00:11:38,800
next there there was the choice for a

300
00:11:38,800 --> 00:11:40,399
linear layer

301
00:11:40,399 --> 00:11:43,279
so even though i've said that

302
00:11:43,279 --> 00:11:45,120
none of your operations are expensive

303
00:11:45,120 --> 00:11:46,880
and linear operations are cheap that

304
00:11:46,880 --> 00:11:48,320
does not mean that

305
00:11:48,320 --> 00:11:51,360
linear operations are for free in fact

306
00:11:51,360 --> 00:11:53,200
they can have quite a big of an impact

307
00:11:53,200 --> 00:11:54,720
in certain protocol

308
00:11:54,720 --> 00:11:57,120
so we have decided to go for a

309
00:11:57,120 --> 00:12:00,480
relatively lightweight linear layer

310
00:12:00,480 --> 00:12:02,320
and

311
00:12:02,320 --> 00:12:03,839
one of the important things is that we

312
00:12:03,839 --> 00:12:06,240
want to make sure that if we consider

313
00:12:06,240 --> 00:12:08,720
just a single field element

314
00:12:08,720 --> 00:12:11,360
and consider its univariate degree that

315
00:12:11,360 --> 00:12:13,519
also this univariate degree doubles

316
00:12:13,519 --> 00:12:16,720
during each call of the round function

317
00:12:16,720 --> 00:12:19,839
and this is why we you see these

318
00:12:19,839 --> 00:12:23,279
these joints in in this little circuit

319
00:12:23,279 --> 00:12:25,200
because they ensure that that each field

320
00:12:25,200 --> 00:12:26,959
element

321
00:12:26,959 --> 00:12:29,279
occurs in many different branches which

322
00:12:29,279 --> 00:12:31,600
make sure that indeed the univariate

323
00:12:31,600 --> 00:12:34,720
degree is doubled every time

324
00:12:34,720 --> 00:12:36,560
then there is

325
00:12:36,560 --> 00:12:38,000
the addition of a number of round

326
00:12:38,000 --> 00:12:40,480
constants they are there to to make sure

327
00:12:40,480 --> 00:12:42,399
that

328
00:12:42,399 --> 00:12:43,279
um

329
00:12:43,279 --> 00:12:45,200
any symmetries that are present are

330
00:12:45,200 --> 00:12:46,720
removed

331
00:12:46,720 --> 00:12:48,800
and of particular interest is this round

332
00:12:48,800 --> 00:12:50,320
constant four

333
00:12:50,320 --> 00:12:52,560
it turns out that

334
00:12:52,560 --> 00:12:54,240
if you look at

335
00:12:54,240 --> 00:12:55,760
the linear properties of the round

336
00:12:55,760 --> 00:12:57,839
function and if you do not include this

337
00:12:57,839 --> 00:12:59,120
rc4

338
00:12:59,120 --> 00:13:00,880
and consider

339
00:13:00,880 --> 00:13:02,880
fields of characteristic two then it's

340
00:13:02,880 --> 00:13:05,120
possible to find linear approximations

341
00:13:05,120 --> 00:13:08,000
that have a linear potential of one

342
00:13:08,000 --> 00:13:09,600
thereby basically

343
00:13:09,600 --> 00:13:12,639
breaking this round function and more

344
00:13:12,639 --> 00:13:15,120
importantly they can be chained so

345
00:13:15,120 --> 00:13:16,720
you could just attack the entire

346
00:13:16,720 --> 00:13:18,880
permutation in that way but that's why

347
00:13:18,880 --> 00:13:23,040
we have included this rc4 round constant

348
00:13:23,040 --> 00:13:26,319
so that's for the round function

349
00:13:26,800 --> 00:13:28,639
so in this figure you see the key

350
00:13:28,639 --> 00:13:30,480
schedule

351
00:13:30,480 --> 00:13:32,399
notice that the the number of keys that

352
00:13:32,399 --> 00:13:34,399
we need depends on the number of inputs

353
00:13:34,399 --> 00:13:36,079
that we want to encrypt so it makes

354
00:13:36,079 --> 00:13:37,519
sense to have

355
00:13:37,519 --> 00:13:39,760
an initial secret and then just derive

356
00:13:39,760 --> 00:13:41,680
the keys that we need on the flow on the

357
00:13:41,680 --> 00:13:43,360
fly

358
00:13:43,360 --> 00:13:45,440
so we start out with two master keys and

359
00:13:45,440 --> 00:13:48,959
an ip and then

360
00:13:48,959 --> 00:13:50,560
use these as input to a sponge

361
00:13:50,560 --> 00:13:52,720
construction

362
00:13:52,720 --> 00:13:54,959
and what is important to to realize here

363
00:13:54,959 --> 00:13:56,800
is that the permutations in this sponge

364
00:13:56,800 --> 00:13:59,440
construction are the pc permutations and

365
00:13:59,440 --> 00:14:01,440
as i have already into that before these

366
00:14:01,440 --> 00:14:02,480
pc

367
00:14:02,480 --> 00:14:05,040
permutations will be quite heavy because

368
00:14:05,040 --> 00:14:07,120
they are the ones that need to prevent

369
00:14:07,120 --> 00:14:09,519
higher order differential analysis

370
00:14:09,519 --> 00:14:11,839
so in fact the key schedule itself is

371
00:14:11,839 --> 00:14:14,320
quite a heavy computation

372
00:14:14,320 --> 00:14:17,040
so this is why i i said that

373
00:14:17,040 --> 00:14:19,040
in order to be competitive we assume

374
00:14:19,040 --> 00:14:21,279
that this key schedule is

375
00:14:21,279 --> 00:14:25,040
computed during an offline stage

376
00:14:26,320 --> 00:14:28,079
now in order to derive

377
00:14:28,079 --> 00:14:31,120
the number of rounds that make up both

378
00:14:31,120 --> 00:14:33,600
the permutation pc and pe

379
00:14:33,600 --> 00:14:37,199
we have done some security analysis

380
00:14:37,600 --> 00:14:39,440
so first we have looked at differential

381
00:14:39,440 --> 00:14:41,680
and linear cryptanalysis

382
00:14:41,680 --> 00:14:43,760
again the non-linear component in our

383
00:14:43,760 --> 00:14:45,680
round function is the multiplication map

384
00:14:45,680 --> 00:14:48,079
which just multiplies two field field

385
00:14:48,079 --> 00:14:49,040
elements

386
00:14:49,040 --> 00:14:50,800
with each other

387
00:14:50,800 --> 00:14:52,160
and

388
00:14:52,160 --> 00:14:55,120
this multiplication map has very good

389
00:14:55,120 --> 00:14:56,880
differential and linear properties

390
00:14:56,880 --> 00:15:00,639
namely its max dp is equal to 1 over q

391
00:15:00,639 --> 00:15:03,120
where q is just the cardinality of of

392
00:15:03,120 --> 00:15:05,519
the field so if the field is fb then

393
00:15:05,519 --> 00:15:08,160
that would be p and if the field is

394
00:15:08,160 --> 00:15:10,399
f2 to the power n then this q would be 2

395
00:15:10,399 --> 00:15:13,279
to the power n and the maximum linear

396
00:15:13,279 --> 00:15:17,519
potential is equal to 1 over q squared

397
00:15:17,839 --> 00:15:20,560
so from this it follows that

398
00:15:20,560 --> 00:15:23,120
as as soon as as you have one active

399
00:15:23,120 --> 00:15:25,279
multiplication then

400
00:15:25,279 --> 00:15:27,120
differential and linear crit analysis

401
00:15:27,120 --> 00:15:29,120
are no longer a problem so what does it

402
00:15:29,120 --> 00:15:31,440
mean for a multiplication to be active

403
00:15:31,440 --> 00:15:33,920
well that basically means that the input

404
00:15:33,920 --> 00:15:36,800
difference is non-zero or the input mask

405
00:15:36,800 --> 00:15:39,360
is non-zero

406
00:15:39,360 --> 00:15:42,079
so why is it that not a problem well

407
00:15:42,079 --> 00:15:45,440
actually our security parameter s

408
00:15:45,440 --> 00:15:46,480
is

409
00:15:46,480 --> 00:15:48,800
dependent on the the the field

410
00:15:48,800 --> 00:15:50,880
cardinality

411
00:15:50,880 --> 00:15:52,959
so again as soon as one

412
00:15:52,959 --> 00:15:54,880
multiplication becomes active

413
00:15:54,880 --> 00:15:57,759
these attacks are no longer a problem

414
00:15:57,759 --> 00:15:59,120
however

415
00:15:59,120 --> 00:16:01,680
when what i said during the

416
00:16:01,680 --> 00:16:03,440
the slide about the round function is

417
00:16:03,440 --> 00:16:06,240
that we need this rc4 because indeed

418
00:16:06,240 --> 00:16:08,720
without this rc4 it's it's it's possible

419
00:16:08,720 --> 00:16:11,519
to to to bypass this multiplication to

420
00:16:11,519 --> 00:16:14,000
make sure that it's never active

421
00:16:14,000 --> 00:16:15,680
and

422
00:16:15,680 --> 00:16:16,560
yeah

423
00:16:16,560 --> 00:16:18,079
the point here that i'm trying to make

424
00:16:18,079 --> 00:16:20,639
is that many people claim that for these

425
00:16:20,639 --> 00:16:22,399
for this kind of cipher differential

426
00:16:22,399 --> 00:16:24,639
linear cryptanalysis are not an issue

427
00:16:24,639 --> 00:16:25,519
but

428
00:16:25,519 --> 00:16:27,120
you also need to take the linear layer

429
00:16:27,120 --> 00:16:29,680
into account

430
00:16:32,720 --> 00:16:34,480
then let's look at higher order

431
00:16:34,480 --> 00:16:37,199
differential attacks so in a higher

432
00:16:37,199 --> 00:16:39,680
order differential attack the goal is to

433
00:16:39,680 --> 00:16:41,519
find a

434
00:16:41,519 --> 00:16:44,560
fine subspace of large enough dimension

435
00:16:44,560 --> 00:16:47,519
or a multiplicative subgroup of large

436
00:16:47,519 --> 00:16:49,680
enough cardinality such that summing

437
00:16:49,680 --> 00:16:52,480
over this fine space or

438
00:16:52,480 --> 00:16:54,959
this multiplicative subgroup gives

439
00:16:54,959 --> 00:16:57,519
the zero value so basically it's a kind

440
00:16:57,519 --> 00:17:00,480
of zero-sum distinguisher

441
00:17:00,480 --> 00:17:02,959
and in order to prevent this kind of

442
00:17:02,959 --> 00:17:04,959
attack you want to make sure that the

443
00:17:04,959 --> 00:17:05,919
the

444
00:17:05,919 --> 00:17:07,760
degree of your

445
00:17:07,760 --> 00:17:10,160
function representation is quite large

446
00:17:10,160 --> 00:17:12,319
large enough

447
00:17:12,319 --> 00:17:13,760
so

448
00:17:13,760 --> 00:17:16,079
the main permutation responsible for the

449
00:17:16,079 --> 00:17:19,839
degree growth is this p of c

450
00:17:20,720 --> 00:17:21,919
and

451
00:17:21,919 --> 00:17:24,240
again this p of c consists of the

452
00:17:24,240 --> 00:17:26,640
composition of the round function and

453
00:17:26,640 --> 00:17:29,360
each round function has degree 2 over f

454
00:17:29,360 --> 00:17:32,360
q

455
00:17:32,400 --> 00:17:35,039
in other words

456
00:17:35,039 --> 00:17:38,240
if we want to make sure that

457
00:17:39,280 --> 00:17:41,440
our function has degree at least

458
00:17:41,440 --> 00:17:44,160
2 over s we need to figure out how many

459
00:17:44,160 --> 00:17:46,000
rounds we can linearize it turns out

460
00:17:46,000 --> 00:17:47,520
that we can linearize the first two

461
00:17:47,520 --> 00:17:48,559
rounds

462
00:17:48,559 --> 00:17:50,400
so from this it immediately follows that

463
00:17:50,400 --> 00:17:51,520
if we have

464
00:17:51,520 --> 00:17:53,840
s plus two rounds then

465
00:17:53,840 --> 00:17:56,720
pc will have degree two to the power s

466
00:17:56,720 --> 00:17:57,760
and

467
00:17:57,760 --> 00:17:59,360
these higher order differential attacks

468
00:17:59,360 --> 00:18:02,320
are no longer a problem

469
00:18:03,120 --> 00:18:05,039
and as people have done in the past in

470
00:18:05,039 --> 00:18:07,760
other papers we also conjecture that

471
00:18:07,760 --> 00:18:10,080
if c minion is secure against higher

472
00:18:10,080 --> 00:18:11,600
order differential attacks then

473
00:18:11,600 --> 00:18:13,280
automatically it is secure against

474
00:18:13,280 --> 00:18:16,639
interpolation attacks as well

475
00:18:18,720 --> 00:18:21,039
then we have considered

476
00:18:21,039 --> 00:18:23,600
grignard basis attacks

477
00:18:23,600 --> 00:18:25,840
the idea behind a grinder basis attack

478
00:18:25,840 --> 00:18:28,080
is that you represent your cipher as a

479
00:18:28,080 --> 00:18:29,679
system of equations

480
00:18:29,679 --> 00:18:31,520
and then this system of equations

481
00:18:31,520 --> 00:18:33,440
corresponds to an ideal

482
00:18:33,440 --> 00:18:35,919
and the grouping basis is a particular

483
00:18:35,919 --> 00:18:38,640
kind of generating set for this ideal

484
00:18:38,640 --> 00:18:40,160
from which

485
00:18:40,160 --> 00:18:42,559
it is easy to to read off the solutions

486
00:18:42,559 --> 00:18:45,760
to your original system of equations

487
00:18:45,760 --> 00:18:48,080
uh in general this this happens with

488
00:18:48,080 --> 00:18:50,080
back substitution

489
00:18:50,080 --> 00:18:52,720
so importantly the cost of computing a

490
00:18:52,720 --> 00:18:55,200
gurner basis depends on the number of

491
00:18:55,200 --> 00:18:57,120
indeterminants in your system of

492
00:18:57,120 --> 00:18:59,600
equations the number of such equations

493
00:18:59,600 --> 00:19:01,679
and their degrees

494
00:19:01,679 --> 00:19:04,000
now we have considered a number of

495
00:19:04,000 --> 00:19:05,919
strategies that we thought were the most

496
00:19:05,919 --> 00:19:07,360
promising

497
00:19:07,360 --> 00:19:09,760
the first one was relating the input to

498
00:19:09,760 --> 00:19:11,840
the output

499
00:19:11,840 --> 00:19:12,720
and

500
00:19:12,720 --> 00:19:15,360
in this strategy the attacker

501
00:19:15,360 --> 00:19:18,160
has both pc and pe involved and you can

502
00:19:18,160 --> 00:19:20,160
kind of view them as

503
00:19:20,160 --> 00:19:22,559
one big permutation where the number of

504
00:19:22,559 --> 00:19:24,559
rounds involved is the sum of the number

505
00:19:24,559 --> 00:19:26,559
of rounds of pc plus the number of

506
00:19:26,559 --> 00:19:29,360
rounds in pe

507
00:19:29,440 --> 00:19:30,320
and

508
00:19:30,320 --> 00:19:34,080
the idea is that each nonce

509
00:19:34,960 --> 00:19:38,000
is input at the start

510
00:19:38,000 --> 00:19:39,600
but you don't know that the two key bits

511
00:19:39,600 --> 00:19:41,919
so the the two key elements so the two

512
00:19:41,919 --> 00:19:44,799
keys are actually the indeterminate

513
00:19:44,799 --> 00:19:47,440
so if we then have two nonce inputs this

514
00:19:47,440 --> 00:19:49,520
means that we have actually

515
00:19:49,520 --> 00:19:52,400
two equations in two key indeterminants

516
00:19:52,400 --> 00:19:55,600
and the goal is to to pick the number r

517
00:19:55,600 --> 00:19:57,679
of such rounds

518
00:19:57,679 --> 00:19:59,919
for this grammar basis computation to be

519
00:19:59,919 --> 00:20:01,200
infeasible

520
00:20:01,200 --> 00:20:02,640
so we want

521
00:20:02,640 --> 00:20:04,080
so we have actually a system of

522
00:20:04,080 --> 00:20:07,200
equations of degree 2 to the power r

523
00:20:07,200 --> 00:20:09,840
and then we plug this into the greater

524
00:20:09,840 --> 00:20:13,360
basis cost and it follows that

525
00:20:13,360 --> 00:20:16,799
already by picking for pc the number

526
00:20:16,799 --> 00:20:19,039
s plus 6 for the number of rounds

527
00:20:19,039 --> 00:20:21,600
that's enough to depart this this kind

528
00:20:21,600 --> 00:20:24,080
of attack

529
00:20:25,360 --> 00:20:28,559
then the second strategy is

530
00:20:28,559 --> 00:20:30,640
relating the intermediate state to the

531
00:20:30,640 --> 00:20:31,600
output

532
00:20:31,600 --> 00:20:33,679
so in this case

533
00:20:33,679 --> 00:20:37,600
only the permutation p e is in full

534
00:20:37,760 --> 00:20:40,720
and here we have an unknown intermediate

535
00:20:40,720 --> 00:20:42,080
state

536
00:20:42,080 --> 00:20:44,720
the state actually after applying pc to

537
00:20:44,720 --> 00:20:47,760
the nums and the two key elements

538
00:20:47,760 --> 00:20:49,280
and the goal of the attacker is to

539
00:20:49,280 --> 00:20:51,280
recover this unknown intermediate state

540
00:20:51,280 --> 00:20:53,360
because from that intermediate state it

541
00:20:53,360 --> 00:20:57,760
becomes easy to uh to break the system

542
00:20:58,240 --> 00:20:59,760
so

543
00:20:59,760 --> 00:21:02,640
what we have done is conjecture that

544
00:21:02,640 --> 00:21:06,960
a different kind of mode

545
00:21:07,280 --> 00:21:08,159
is

546
00:21:08,159 --> 00:21:11,360
let's say easier to

547
00:21:11,760 --> 00:21:13,679
to break than the original mode so if we

548
00:21:13,679 --> 00:21:14,559
can

549
00:21:14,559 --> 00:21:16,559
not break the easy mode then it's also

550
00:21:16,559 --> 00:21:18,000
not possible to break the mode that we

551
00:21:18,000 --> 00:21:19,520
are actually using

552
00:21:19,520 --> 00:21:21,600
so what we are considering here is a

553
00:21:21,600 --> 00:21:23,440
mode in which the the key addition that

554
00:21:23,440 --> 00:21:24,880
is in the middle has been moved to the

555
00:21:24,880 --> 00:21:26,159
end again

556
00:21:26,159 --> 00:21:27,919
because that allows us to consider

557
00:21:27,919 --> 00:21:29,360
differences

558
00:21:29,360 --> 00:21:31,600
and by considering differences we can

559
00:21:31,600 --> 00:21:34,240
remove this key edition at the end

560
00:21:34,240 --> 00:21:37,840
but what do we do we consider two nonces

561
00:21:37,840 --> 00:21:39,440
and

562
00:21:39,440 --> 00:21:43,360
each nonce leads to an unknown state of

563
00:21:43,360 --> 00:21:44,799
three

564
00:21:44,799 --> 00:21:47,600
unknown elements so that gives actually

565
00:21:47,600 --> 00:21:50,000
three in determinants and because we are

566
00:21:50,000 --> 00:21:51,760
considering two nonsense we have six

567
00:21:51,760 --> 00:21:54,080
indeterminants and it turns out that we

568
00:21:54,080 --> 00:21:57,360
then have a system of six equations

569
00:21:57,360 --> 00:21:59,200
in six indeterminants of degree two to

570
00:21:59,200 --> 00:22:02,159
the power r minus one two to the power r

571
00:22:02,159 --> 00:22:04,000
two to the power r plus one and two to

572
00:22:04,000 --> 00:22:05,679
the power r plus two

573
00:22:05,679 --> 00:22:07,919
and by substituting these numbers into

574
00:22:07,919 --> 00:22:09,600
the grotner basis

575
00:22:09,600 --> 00:22:11,039
cost equation

576
00:22:11,039 --> 00:22:13,360
we find that if we choose r such that

577
00:22:13,360 --> 00:22:14,320
it's

578
00:22:14,320 --> 00:22:17,520
at least s plus 37 over 12 then this

579
00:22:17,520 --> 00:22:19,039
kind of attack becomes

580
00:22:19,039 --> 00:22:20,159
infeasible

581
00:22:20,159 --> 00:22:21,440
and that's then the number of rounds

582
00:22:21,440 --> 00:22:24,840
that we choose for this pe

583
00:22:24,840 --> 00:22:27,039
permutation so this gives the following

584
00:22:27,039 --> 00:22:29,840
table where a particular interest is the

585
00:22:29,840 --> 00:22:31,600
row in the middle

586
00:22:31,600 --> 00:22:34,240
where we consider a data limit of two to

587
00:22:34,240 --> 00:22:36,640
the power s over two elements

588
00:22:36,640 --> 00:22:37,440
where

589
00:22:37,440 --> 00:22:40,480
this corresponds to the birthday bond so

590
00:22:40,480 --> 00:22:43,360
for pc we then have a number of rounds

591
00:22:43,360 --> 00:22:46,320
equal to two thirds of s plus six

592
00:22:46,320 --> 00:22:49,200
and for p e we have the maximum of six

593
00:22:49,200 --> 00:22:51,919
and s plus thirty seven over twelve

594
00:22:51,919 --> 00:22:53,440
and i just wanted to point out that if

595
00:22:53,440 --> 00:22:56,559
you for choose for s the number 128

596
00:22:56,559 --> 00:22:58,720
which is a kind of standard security

597
00:22:58,720 --> 00:23:00,240
level then

598
00:23:00,240 --> 00:23:02,720
the number of rounds for pc is much much

599
00:23:02,720 --> 00:23:06,799
larger than pe but pe is not

600
00:23:06,799 --> 00:23:08,400
it's not something that you can neglect

601
00:23:08,400 --> 00:23:10,640
because pe is called many different

602
00:23:10,640 --> 00:23:12,559
times depending on the number of output

603
00:23:12,559 --> 00:23:14,879
words

604
00:23:15,520 --> 00:23:16,720
so

605
00:23:16,720 --> 00:23:18,880
in this table you see

606
00:23:18,880 --> 00:23:21,039
what i showed at the beginning in a

607
00:23:21,039 --> 00:23:24,640
graph but here with concrete numbers

608
00:23:24,640 --> 00:23:26,320
and i would just like to show you the

609
00:23:26,320 --> 00:23:29,280
the the first row that of c minion where

610
00:23:29,280 --> 00:23:30,559
in both it shows you the number of

611
00:23:30,559 --> 00:23:32,159
multiplications

612
00:23:32,159 --> 00:23:34,640
which is equal to 14 times t over two

613
00:23:34,640 --> 00:23:36,640
plus t plus 89

614
00:23:36,640 --> 00:23:39,679
this 89 follows from the number of

615
00:23:39,679 --> 00:23:42,880
permutations for the number of rounds of

616
00:23:42,880 --> 00:23:45,039
the number of multiplications of the pc

617
00:23:45,039 --> 00:23:48,080
permutation which is called only once

618
00:23:48,080 --> 00:23:49,600
then for each running function in the

619
00:23:49,600 --> 00:23:51,200
mode

620
00:23:51,200 --> 00:23:52,880
one multiplication is performed so

621
00:23:52,880 --> 00:23:56,640
that's why we have this t value here

622
00:23:56,640 --> 00:23:57,679
and

623
00:23:57,679 --> 00:23:59,120
each pe

624
00:23:59,120 --> 00:24:01,919
call has four around 14 notifications

625
00:24:01,919 --> 00:24:04,159
involved however you output also two

626
00:24:04,159 --> 00:24:06,080
elements so that's why you have this

627
00:24:06,080 --> 00:24:09,200
this 14 times 2 t over 2 here

628
00:24:09,200 --> 00:24:10,559
so indeed we think we are quite

629
00:24:10,559 --> 00:24:13,200
competitive

630
00:24:13,760 --> 00:24:15,360
now we have done some preliminary

631
00:24:15,360 --> 00:24:17,520
security analysis

632
00:24:17,520 --> 00:24:20,159
however we believe that maybe more can

633
00:24:20,159 --> 00:24:22,080
be done so we encourage you to try and

634
00:24:22,080 --> 00:24:23,440
break ground produced versions of

635
00:24:23,440 --> 00:24:26,240
cminion moreover we have a version of c

636
00:24:26,240 --> 00:24:27,919
minion in the paper

637
00:24:27,919 --> 00:24:29,600
in which the

638
00:24:29,600 --> 00:24:32,320
the round sorry the ronin function is

639
00:24:32,320 --> 00:24:34,640
instead of non-linear linear

640
00:24:34,640 --> 00:24:35,919
to maybe even minimize the

641
00:24:35,919 --> 00:24:38,000
multiplications further and we also

642
00:24:38,000 --> 00:24:40,240
encourage you to have a look at that

643
00:24:40,240 --> 00:24:41,840
and with that i would like to conclude

644
00:24:41,840 --> 00:24:43,279
this talk and thank you for your

645
00:24:43,279 --> 00:24:45,760
attention

