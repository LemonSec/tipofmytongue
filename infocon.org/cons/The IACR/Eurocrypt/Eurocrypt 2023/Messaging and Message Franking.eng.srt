1
00:00:00,000 --> 00:00:02,879
so good morning everyone so I'm Sergio

2
00:00:02,879 --> 00:00:04,740
dunay I'm pleased to welcome you to this

3
00:00:04,740 --> 00:00:08,700
session on on messaging and message

4
00:00:08,700 --> 00:00:12,300
ranking we'll have three talks today and

5
00:00:12,300 --> 00:00:15,540
the first one is entitled unique passion

6
00:00:15,540 --> 00:00:16,859
entity-based encryption with

7
00:00:16,859 --> 00:00:18,600
applications to strongly secure

8
00:00:18,600 --> 00:00:21,600
messaging by Paul Rosser Danielle

9
00:00:21,600 --> 00:00:25,980
slamanic Christoph streaks and Paul is

10
00:00:25,980 --> 00:00:27,119
hearing the talk

11
00:00:27,119 --> 00:00:28,740
yeah thank you very much for the

12
00:00:28,740 --> 00:00:30,180
introduction sash

13
00:00:30,180 --> 00:00:32,340
um yeah we talk about messaging and the

14
00:00:32,340 --> 00:00:34,020
building blocks that are used in

15
00:00:34,020 --> 00:00:37,140
messaging and we directly dive into the

16
00:00:37,140 --> 00:00:39,239
setting in which we have Alice and Bob

17
00:00:39,239 --> 00:00:42,420
communicate via an insecure Channel and

18
00:00:42,420 --> 00:00:45,120
for this Bob generates a key pair sends

19
00:00:45,120 --> 00:00:47,579
over the public key to Alice and Alice

20
00:00:47,579 --> 00:00:49,440
uses that public key to encrypt her

21
00:00:49,440 --> 00:00:52,079
messages since the resulting ciphertext

22
00:00:52,079 --> 00:00:55,920
back to Bob and then after sending the

23
00:00:55,920 --> 00:00:57,960
ciphertext and receiving the ciphertext

24
00:00:57,960 --> 00:01:01,140
respectively both users will update the

25
00:01:01,140 --> 00:01:04,559
components of the key pair on their side

26
00:01:04,559 --> 00:01:07,740
and it is important to note that for

27
00:01:07,740 --> 00:01:09,659
this update they will both use the

28
00:01:09,659 --> 00:01:11,820
ciphertext that they either send or

29
00:01:11,820 --> 00:01:14,220
receive so these ciphertexts influence

30
00:01:14,220 --> 00:01:17,400
the outcome of that key update

31
00:01:17,400 --> 00:01:20,280
uh the purpose of updating the keys is

32
00:01:20,280 --> 00:01:23,400
that whenever the adversary corrupts the

33
00:01:23,400 --> 00:01:25,860
secret key of Bob the adversary should

34
00:01:25,860 --> 00:01:27,420
not learn anything on the previous

35
00:01:27,420 --> 00:01:29,520
versions of that secret key and in

36
00:01:29,520 --> 00:01:32,580
particular not on the payload that is

37
00:01:32,580 --> 00:01:34,380
encrypted with the corresponding public

38
00:01:34,380 --> 00:01:39,299
keys so the this uh this idea or this uh

39
00:01:39,299 --> 00:01:41,640
this goal is usually referred to as

40
00:01:41,640 --> 00:01:43,259
forward secrecy

41
00:01:43,259 --> 00:01:45,240
but we want to have a second property

42
00:01:45,240 --> 00:01:47,520
with these key updates and for this we

43
00:01:47,520 --> 00:01:49,640
consider that Alice encrypts another

44
00:01:49,640 --> 00:01:52,860
payload with updated public key since

45
00:01:52,860 --> 00:01:55,740
the ciphertext tool but in this case the

46
00:01:55,740 --> 00:01:57,540
adversary drops the ciphertext and

47
00:01:57,540 --> 00:01:59,880
replaces it with a forged ciphertext

48
00:01:59,880 --> 00:02:02,640
sends it to Bob and again Alice and Bob

49
00:02:02,640 --> 00:02:05,159
will update the the components of the

50
00:02:05,159 --> 00:02:06,420
key pair

51
00:02:06,420 --> 00:02:09,479
as I mentioned before we want that the

52
00:02:09,479 --> 00:02:11,760
corruption of a secret key on Bob's side

53
00:02:11,760 --> 00:02:13,920
does not reveal any information on the

54
00:02:13,920 --> 00:02:16,860
previous secret keys or on payload that

55
00:02:16,860 --> 00:02:18,540
was encrypted to the corresponding

56
00:02:18,540 --> 00:02:22,140
public keys but now we also want since

57
00:02:22,140 --> 00:02:24,660
the ciphertext influenced the key update

58
00:02:24,660 --> 00:02:27,420
that the two components of the key pair

59
00:02:27,420 --> 00:02:31,500
are diverging after the key update and

60
00:02:31,500 --> 00:02:33,480
that means that the public key is

61
00:02:33,480 --> 00:02:35,280
basically independent of the secret key

62
00:02:35,280 --> 00:02:37,739
such that future payloads that will be

63
00:02:37,739 --> 00:02:40,080
encrypted with the public key will also

64
00:02:40,080 --> 00:02:43,860
not be leaked to the adversary even if

65
00:02:43,860 --> 00:02:47,879
the secret key on Bob's side is revealed

66
00:02:47,879 --> 00:02:50,700
okay so this primitive is called key

67
00:02:50,700 --> 00:02:52,739
updatable key encapsulation mechanisms

68
00:02:52,739 --> 00:02:55,260
or short key updatable chems and it was

69
00:02:55,260 --> 00:02:57,300
proposed and used in previous work on

70
00:02:57,300 --> 00:02:58,920
secure messaging

71
00:02:58,920 --> 00:03:00,959
there has even been a work that showed

72
00:03:00,959 --> 00:03:04,080
that this primitive key updatable chem

73
00:03:04,080 --> 00:03:07,500
is both sufficient and necessary to

74
00:03:07,500 --> 00:03:09,300
certain Notions of strongly secure

75
00:03:09,300 --> 00:03:11,099
messaging

76
00:03:11,099 --> 00:03:13,260
um yeah and we will look at how to build

77
00:03:13,260 --> 00:03:16,319
this building block I finally want to

78
00:03:16,319 --> 00:03:18,480
mention that key updatable cams are

79
00:03:18,480 --> 00:03:20,519
stronger than what we call updatable

80
00:03:20,519 --> 00:03:23,040
public key encryption or upke because

81
00:03:23,040 --> 00:03:26,040
this upke primitive doesn't provide this

82
00:03:26,040 --> 00:03:28,019
strong diverging property such that

83
00:03:28,019 --> 00:03:29,599
secret key and public key are

84
00:03:29,599 --> 00:03:32,280
independent of each other if the update

85
00:03:32,280 --> 00:03:34,500
was conducted with different input

86
00:03:34,500 --> 00:03:36,000
Cipher texts

87
00:03:36,000 --> 00:03:38,220
okay so how do we build key updatable

88
00:03:38,220 --> 00:03:41,760
cams uh we build it from something that

89
00:03:41,760 --> 00:03:44,940
we call Unique path ibe uh I will let

90
00:03:44,940 --> 00:03:46,980
you know what it is by explaining how

91
00:03:46,980 --> 00:03:48,959
the workflow or how the communication

92
00:03:48,959 --> 00:03:52,260
between Alice and Bob flows

93
00:03:52,260 --> 00:03:54,480
so for this Bob generates a key pair

94
00:03:54,480 --> 00:03:57,239
public key and secret key and Bob can

95
00:03:57,239 --> 00:03:59,340
use the secret key to delegate a

96
00:03:59,340 --> 00:04:01,500
subordinate secret Keys we see here

97
00:04:01,500 --> 00:04:04,200
seven different paths how such a

98
00:04:04,200 --> 00:04:06,780
delegation could look like and the

99
00:04:06,780 --> 00:04:09,840
algorithm that Bob uses for this takes

100
00:04:09,840 --> 00:04:13,379
the master secret key and delegates a

101
00:04:13,379 --> 00:04:16,380
secret key with an identity string id1

102
00:04:16,380 --> 00:04:18,540
and that secret key that is delegated

103
00:04:18,540 --> 00:04:20,880
now only works for that identity string

104
00:04:20,880 --> 00:04:23,580
and we will learn what works means in a

105
00:04:23,580 --> 00:04:24,600
second

106
00:04:24,600 --> 00:04:27,960
and although we just have or I just show

107
00:04:27,960 --> 00:04:30,720
you seven delegation paths uh paths on

108
00:04:30,720 --> 00:04:32,880
that tree that you see here I want to

109
00:04:32,880 --> 00:04:34,740
mention that the identity string comes

110
00:04:34,740 --> 00:04:36,840
from an exponentially large identity

111
00:04:36,840 --> 00:04:42,060
space uh just for uh the presentation

112
00:04:42,060 --> 00:04:45,120
um I just summarized that as seven paths

113
00:04:45,120 --> 00:04:48,720
here okay so after Bob generated the key

114
00:04:48,720 --> 00:04:50,820
pair uh he could also send the public

115
00:04:50,820 --> 00:04:53,400
key over to Alice and Alice can use that

116
00:04:53,400 --> 00:04:55,680
publicly also to delegate subordinate

117
00:04:55,680 --> 00:04:57,900
public Keys using basically the same

118
00:04:57,900 --> 00:04:59,820
algorithm but this time taking the

119
00:04:59,820 --> 00:05:02,880
public key the master public key and an

120
00:05:02,880 --> 00:05:06,240
identity string and delegate a public

121
00:05:06,240 --> 00:05:08,580
key that is oh that only works for that

122
00:05:08,580 --> 00:05:11,340
particular identity string id1

123
00:05:11,340 --> 00:05:14,280
Alice can continue doing that with a

124
00:05:14,280 --> 00:05:16,800
second identity string to delegate from

125
00:05:16,800 --> 00:05:20,040
this intermediate public PK id1 a second

126
00:05:20,040 --> 00:05:23,300
public key PK ID one concatenated id2

127
00:05:23,300 --> 00:05:26,699
and this again looks like that we have a

128
00:05:26,699 --> 00:05:30,900
Cascade of trees or basically a big tree

129
00:05:30,900 --> 00:05:33,060
um and that's the resulting public key

130
00:05:33,060 --> 00:05:34,740
that we consider for now

131
00:05:34,740 --> 00:05:37,320
on the upside he could do the same thing

132
00:05:37,320 --> 00:05:39,479
delegating with the same identity string

133
00:05:39,479 --> 00:05:41,160
or alternatively use a different

134
00:05:41,160 --> 00:05:43,800
identity string and in this case when

135
00:05:43,800 --> 00:05:46,139
Bob uses the intermediate secret key

136
00:05:46,139 --> 00:05:48,780
skid1 and delegates it with an identity

137
00:05:48,780 --> 00:05:51,600
identity string ID Prime he will obtain

138
00:05:51,600 --> 00:05:54,780
a secret key ID one concatenated with ID

139
00:05:54,780 --> 00:05:55,860
Prime

140
00:05:55,860 --> 00:05:57,960
and in that case when the two identity

141
00:05:57,960 --> 00:06:00,780
strings differ the result is that

142
00:06:00,780 --> 00:06:03,600
whenever Alice encapsulates with the

143
00:06:03,600 --> 00:06:06,600
lowest public key to these two identity

144
00:06:06,600 --> 00:06:07,759
strings

145
00:06:07,759 --> 00:06:10,860
then the secret key on Bob's side with

146
00:06:10,860 --> 00:06:12,840
the different identity string will not

147
00:06:12,840 --> 00:06:14,880
work for decapsulating the ciphertext

148
00:06:14,880 --> 00:06:18,240
and in particular if that secret key is

149
00:06:18,240 --> 00:06:20,220
ever corrupted then this doesn't reveal

150
00:06:20,220 --> 00:06:22,199
information on the keys that are

151
00:06:22,199 --> 00:06:24,960
encapsulated in these encapsulations to

152
00:06:24,960 --> 00:06:26,580
the public key with a different identity

153
00:06:26,580 --> 00:06:27,600
string

154
00:06:27,600 --> 00:06:29,880
okay so we call this primitive unique

155
00:06:29,880 --> 00:06:32,759
path identity based encapsulation and

156
00:06:32,759 --> 00:06:34,979
those of you who know what hibe or

157
00:06:34,979 --> 00:06:36,780
hierarchical identity based encryption

158
00:06:36,780 --> 00:06:39,840
is a unique path ibe is basically the

159
00:06:39,840 --> 00:06:41,699
same the only difference and the

160
00:06:41,699 --> 00:06:43,560
difference will turn out to be very

161
00:06:43,560 --> 00:06:45,960
crucial is that we only permit one

162
00:06:45,960 --> 00:06:48,240
delegation per secret key so you see

163
00:06:48,240 --> 00:06:50,699
here that there is just one path of

164
00:06:50,699 --> 00:06:52,740
Delegation from one secret key to

165
00:06:52,740 --> 00:06:55,319
another to another and that path can be

166
00:06:55,319 --> 00:06:58,440
continued infinitely and that makes it

167
00:06:58,440 --> 00:06:59,880
the real or that's the reason why we

168
00:06:59,880 --> 00:07:02,699
call it unique secret key or unique path

169
00:07:02,699 --> 00:07:03,900
ibe

170
00:07:03,900 --> 00:07:06,960
uh I just want to mention again that the

171
00:07:06,960 --> 00:07:09,300
delegation here is always based on an

172
00:07:09,300 --> 00:07:11,539
identity string from an exponentially

173
00:07:11,539 --> 00:07:14,460
large identity space

174
00:07:14,460 --> 00:07:17,940
so our contributions are that so far

175
00:07:17,940 --> 00:07:20,580
hibe so hierarchical identity based

176
00:07:20,580 --> 00:07:22,199
encryption was used to build what we

177
00:07:22,199 --> 00:07:25,259
call u-pipe Unique path ibe and we

178
00:07:25,259 --> 00:07:27,240
propose two constructions the first one

179
00:07:27,240 --> 00:07:30,840
showing that we actually ibe suffices so

180
00:07:30,840 --> 00:07:33,780
with a hierarchy depth of one suffices

181
00:07:33,780 --> 00:07:36,599
to build bounded depth u-pipe so that

182
00:07:36,599 --> 00:07:39,479
means we only need as a building block

183
00:07:39,479 --> 00:07:42,780
ibe to build a unique path ibe with a

184
00:07:42,780 --> 00:07:45,000
bounded depth of Delegation where the

185
00:07:45,000 --> 00:07:48,660
bound can be any polynomial and it

186
00:07:48,660 --> 00:07:51,240
suffices to use bounded depth hibe to

187
00:07:51,240 --> 00:07:54,300
build unbounded depth unique path ibe

188
00:07:54,300 --> 00:07:58,080
okay so that's the contributions how do

189
00:07:58,080 --> 00:08:00,780
we build a u-pipe and for this we first

190
00:08:00,780 --> 00:08:03,419
consider the bounded depth case with a

191
00:08:03,419 --> 00:08:06,060
parameter queue that sets the bound how

192
00:08:06,060 --> 00:08:09,720
many sequential delegations we permit

193
00:08:09,720 --> 00:08:11,819
and in order to explain this I start

194
00:08:11,819 --> 00:08:13,979
with the key generation that generates a

195
00:08:13,979 --> 00:08:16,380
u Pi public key and a secret key

196
00:08:16,380 --> 00:08:18,539
and these upai public keys and secret

197
00:08:18,539 --> 00:08:22,620
Keys consist of ibe key Pairs and we

198
00:08:22,620 --> 00:08:25,560
generate for this one ibe key pair per

199
00:08:25,560 --> 00:08:29,039
u-pipe delegation depth and the u-pipe

200
00:08:29,039 --> 00:08:31,379
public key now consists of the in that

201
00:08:31,379 --> 00:08:33,779
case when Q is four

202
00:08:33,779 --> 00:08:36,179
um for ibe public keys and the secret

203
00:08:36,179 --> 00:08:39,479
key consists of four ibe secret keys

204
00:08:39,479 --> 00:08:41,159
a next step is to understand how

205
00:08:41,159 --> 00:08:44,480
delegation works so u-pipe delegation

206
00:08:44,480 --> 00:08:46,860
works as follows we have a u-pipe secret

207
00:08:46,860 --> 00:08:48,839
key on the upper part here and we

208
00:08:48,839 --> 00:08:52,320
delegate a u-pipe a secret key with the

209
00:08:52,320 --> 00:08:54,899
identity string one and for this we

210
00:08:54,899 --> 00:08:57,180
slightly change the structure of that

211
00:08:57,180 --> 00:08:59,399
u-pipe secret key

212
00:08:59,399 --> 00:09:03,480
first of all we remove the ibe master

213
00:09:03,480 --> 00:09:06,480
secret key on the first level but we

214
00:09:06,480 --> 00:09:09,000
take it and delegate from it via ibe

215
00:09:09,000 --> 00:09:12,000
delegation one ibe secret key that is

216
00:09:12,000 --> 00:09:14,100
delegated to the the to the u-pipe

217
00:09:14,100 --> 00:09:16,800
identity string delegation identity

218
00:09:16,800 --> 00:09:20,580
string id1 but with a suffix bit 0 and

219
00:09:20,580 --> 00:09:24,600
we delegate a second ibe secret key with

220
00:09:24,600 --> 00:09:27,000
the u-pipe secret key and the suffix bit

221
00:09:27,000 --> 00:09:27,959
one

222
00:09:27,959 --> 00:09:30,300
and we basically use these two delegated

223
00:09:30,300 --> 00:09:32,700
secret keys to replace the ibe master

224
00:09:32,700 --> 00:09:34,740
secret key and the first component of

225
00:09:34,740 --> 00:09:36,540
the u-pipe secret key

226
00:09:36,540 --> 00:09:39,000
okay we can continue doing that taking

227
00:09:39,000 --> 00:09:41,040
that u-pipe secret key delegating it

228
00:09:41,040 --> 00:09:43,260
again with an identity string id2 and we

229
00:09:43,260 --> 00:09:46,620
repeat the basic or the the same uh the

230
00:09:46,620 --> 00:09:49,740
same approach by first removing the

231
00:09:49,740 --> 00:09:52,380
first delegated ibe secret key and the

232
00:09:52,380 --> 00:09:54,660
first level and the master ibe secret

233
00:09:54,660 --> 00:09:56,640
key in the second level

234
00:09:56,640 --> 00:09:59,519
we again take that Master ibe secret key

235
00:09:59,519 --> 00:10:02,279
delegates to a subordinate ibe secret

236
00:10:02,279 --> 00:10:05,940
Keys both with the u-pipe identity

237
00:10:05,940 --> 00:10:08,820
substring that we use for delegation but

238
00:10:08,820 --> 00:10:11,040
one with the suffix bit one and the

239
00:10:11,040 --> 00:10:12,959
other one with the suffix bit 0 and

240
00:10:12,959 --> 00:10:15,060
these two delegated secret Keys replace

241
00:10:15,060 --> 00:10:17,220
the ibe master secret key in the second

242
00:10:17,220 --> 00:10:18,180
level

243
00:10:18,180 --> 00:10:20,040
we would continue to do the same thing

244
00:10:20,040 --> 00:10:22,380
for the third level just taking the

245
00:10:22,380 --> 00:10:24,959
identity string ID3 again removing the

246
00:10:24,959 --> 00:10:27,240
first component of the previous level

247
00:10:27,240 --> 00:10:29,760
and the full Master Secret Key Master

248
00:10:29,760 --> 00:10:32,279
ibe secret key on the third level and

249
00:10:32,279 --> 00:10:34,440
replacing that current levels Master

250
00:10:34,440 --> 00:10:36,959
secret key with the two delegated ibe

251
00:10:36,959 --> 00:10:38,700
secret keys

252
00:10:38,700 --> 00:10:42,060
uh you will understand why we do this uh

253
00:10:42,060 --> 00:10:44,220
in a couple of seconds just for now

254
00:10:44,220 --> 00:10:46,459
except that it works

255
00:10:46,459 --> 00:10:49,260
uh the the next step is to understand

256
00:10:49,260 --> 00:10:51,480
how encapsulation works

257
00:10:51,480 --> 00:10:53,700
for this we take a look at the U Pi

258
00:10:53,700 --> 00:10:55,260
public key that consists of the four

259
00:10:55,260 --> 00:10:58,019
components of the ibe or these four ibe

260
00:10:58,019 --> 00:11:00,779
Master public keys and we want to

261
00:11:00,779 --> 00:11:02,519
encapsulate to an identity string that

262
00:11:02,519 --> 00:11:05,040
consists of the three sub identity

263
00:11:05,040 --> 00:11:07,560
strings id1 id2 ID3

264
00:11:07,560 --> 00:11:11,519
and for this we take the four ibe Master

265
00:11:11,519 --> 00:11:15,180
public keys from the u-pipe public key

266
00:11:15,180 --> 00:11:19,160
and we delegate from each of them one

267
00:11:19,160 --> 00:11:23,040
subordin subordinate ibe public key the

268
00:11:23,040 --> 00:11:26,640
first one that we take is the one from

269
00:11:26,640 --> 00:11:28,980
the first ibe Master public key

270
00:11:28,980 --> 00:11:31,620
delegated to the identity string id1

271
00:11:31,620 --> 00:11:34,320
with suffix big with one the second one

272
00:11:34,320 --> 00:11:36,180
is delegated to basically the same one

273
00:11:36,180 --> 00:11:38,519
just with the identity string id2 but

274
00:11:38,519 --> 00:11:41,100
the third one now is delegated to the

275
00:11:41,100 --> 00:11:42,779
identity string three with the suffix

276
00:11:42,779 --> 00:11:44,940
bit 0. okay this is important to

277
00:11:44,940 --> 00:11:46,440
remember

278
00:11:46,440 --> 00:11:48,600
the fourth ibe Master public key will

279
00:11:48,600 --> 00:11:50,339
not be used for an identity string of

280
00:11:50,339 --> 00:11:53,279
length 3. and now in order to compose

281
00:11:53,279 --> 00:11:56,339
the ciphertext we first secret chair the

282
00:11:56,339 --> 00:11:58,079
payload and since we talk about key

283
00:11:58,079 --> 00:12:00,240
encapsulation here we just basically

284
00:12:00,240 --> 00:12:02,399
secret share asymmetric key and the

285
00:12:02,399 --> 00:12:04,500
symmetric key is just three random

286
00:12:04,500 --> 00:12:06,300
components and then xor and that's

287
00:12:06,300 --> 00:12:07,860
basically the secret sharing that we

288
00:12:07,860 --> 00:12:10,620
have here but uh yeah that's that's the

289
00:12:10,620 --> 00:12:12,660
basic principle and now we take the

290
00:12:12,660 --> 00:12:15,839
three delegated ibe public keys and

291
00:12:15,839 --> 00:12:17,700
encrypt each of these secret shares with

292
00:12:17,700 --> 00:12:19,920
one of the the public keys

293
00:12:19,920 --> 00:12:22,260
okay that's encapsulation how does

294
00:12:22,260 --> 00:12:24,300
decapsulation work

295
00:12:24,300 --> 00:12:26,279
for this we take a look at the public

296
00:12:26,279 --> 00:12:28,140
key and the corresponding secret key and

297
00:12:28,140 --> 00:12:31,019
we see when we gray out the ibe secret

298
00:12:31,019 --> 00:12:32,880
keys that we don't need for that that we

299
00:12:32,880 --> 00:12:35,519
have one component for each or one

300
00:12:35,519 --> 00:12:37,440
secret key component for each public key

301
00:12:37,440 --> 00:12:40,019
component with which we decrypt encrypt

302
00:12:40,019 --> 00:12:41,880
it so we can basically decrypt all three

303
00:12:41,880 --> 00:12:44,160
components undo the secret sharing and

304
00:12:44,160 --> 00:12:46,920
we obtain back uh the payload

305
00:12:46,920 --> 00:12:49,079
okay that's super simple

306
00:12:49,079 --> 00:12:51,959
now the question is why does our

307
00:12:51,959 --> 00:12:54,600
construction look the way it does

308
00:12:54,600 --> 00:12:56,220
so the first question that we asked or

309
00:12:56,220 --> 00:12:58,440
that I want to explain is why do we have

310
00:12:58,440 --> 00:13:01,500
one IB instance per depth of the u-pipe

311
00:13:01,500 --> 00:13:03,660
delegation that may sound a little bit

312
00:13:03,660 --> 00:13:05,700
too much and for this we look at the

313
00:13:05,700 --> 00:13:10,160
delegation tree of our u-pipe

314
00:13:10,160 --> 00:13:13,260
key hierarchy

315
00:13:13,260 --> 00:13:15,959
and we take a look at the delegation of

316
00:13:15,959 --> 00:13:18,660
our identities or of our u-pipe secret

317
00:13:18,660 --> 00:13:22,380
key with identity string id1 id283

318
00:13:22,380 --> 00:13:24,899
so these are the identities here and we

319
00:13:24,899 --> 00:13:27,959
take a look at a second ibe uh secret

320
00:13:27,959 --> 00:13:30,899
sorry u-pipe secret key and that second

321
00:13:30,899 --> 00:13:33,420
u-pipe secret key is the one that is

322
00:13:33,420 --> 00:13:36,120
corrupted and we want that all the

323
00:13:36,120 --> 00:13:39,000
ciphertext encrypted to the first green

324
00:13:39,000 --> 00:13:42,060
secret key here the the green new pipe

325
00:13:42,060 --> 00:13:44,519
secret key should stay secure even if

326
00:13:44,519 --> 00:13:46,560
the the orange secret key here is

327
00:13:46,560 --> 00:13:48,420
corrupted

328
00:13:48,420 --> 00:13:51,839
the problem is that the first and the

329
00:13:51,839 --> 00:13:54,600
third level of ibe secret keys are

330
00:13:54,600 --> 00:13:56,519
entirely captured in that corrupted

331
00:13:56,519 --> 00:13:58,980
secret key here and so we could compile

332
00:13:58,980 --> 00:14:00,899
these components of the corrupted secret

333
00:14:00,899 --> 00:14:03,060
Keys you can just take a look they

334
00:14:03,060 --> 00:14:05,100
basically look the same in the first and

335
00:14:05,100 --> 00:14:07,560
third and also in the fourth level of

336
00:14:07,560 --> 00:14:10,680
the ibe comp underlying components but

337
00:14:10,680 --> 00:14:13,079
the second level is different here and

338
00:14:13,079 --> 00:14:14,880
we have to make sure that whenever there

339
00:14:14,880 --> 00:14:16,680
is just one bit of difference there

340
00:14:16,680 --> 00:14:18,060
needs to be a difference in the

341
00:14:18,060 --> 00:14:20,100
underlying delegation and that's the

342
00:14:20,100 --> 00:14:22,620
reason why we have one component uh per

343
00:14:22,620 --> 00:14:24,839
level or sometimes even two components

344
00:14:24,839 --> 00:14:26,399
and that's the second question that I

345
00:14:26,399 --> 00:14:28,500
want to answer but first of all the

346
00:14:28,500 --> 00:14:30,120
first question is we need one at least

347
00:14:30,120 --> 00:14:34,200
one component for uh per per level

348
00:14:34,200 --> 00:14:36,959
the reason is we don't want to allow an

349
00:14:36,959 --> 00:14:40,199
adversary to compile secret keys for

350
00:14:40,199 --> 00:14:43,139
challenges from uh corrupted u-pipe

351
00:14:43,139 --> 00:14:44,519
secret keys

352
00:14:44,519 --> 00:14:46,560
so the second question is why do we have

353
00:14:46,560 --> 00:14:50,579
two delegations uh on the ibe elev layer

354
00:14:50,579 --> 00:14:53,279
per ibe instance

355
00:14:53,279 --> 00:14:57,060
so we see here again our green new pipe

356
00:14:57,060 --> 00:14:58,980
secret key that has two secret key

357
00:14:58,980 --> 00:15:02,399
u-pipe nodes two ibe secret keys and the

358
00:15:02,399 --> 00:15:04,620
third level why is this the case

359
00:15:04,620 --> 00:15:07,500
and for this we consider an extension of

360
00:15:07,500 --> 00:15:10,440
the green delegated u-pipe secret key

361
00:15:10,440 --> 00:15:12,959
and that extension is just one further

362
00:15:12,959 --> 00:15:14,880
u-pipe delegation to the fourth level

363
00:15:14,880 --> 00:15:17,699
with an identity string ID Prime and

364
00:15:17,699 --> 00:15:20,220
what we want to have is that that all

365
00:15:20,220 --> 00:15:22,519
ciphertexts encrypted to the green

366
00:15:22,519 --> 00:15:25,139
u-pipe secret key should stay secure

367
00:15:25,139 --> 00:15:28,100
even if an extended or further delegated

368
00:15:28,100 --> 00:15:30,660
u-pipe secret key is corrupted that's

369
00:15:30,660 --> 00:15:33,199
also what hibe would require us to do

370
00:15:33,199 --> 00:15:37,380
and for this we have to or we can see

371
00:15:37,380 --> 00:15:40,680
that although the first two levels of

372
00:15:40,680 --> 00:15:43,079
ibe secret keys are again entirely

373
00:15:43,079 --> 00:15:45,959
captured or contained in the orange new

374
00:15:45,959 --> 00:15:48,060
pipe secret key but for the third level

375
00:15:48,060 --> 00:15:51,060
we just have the the ibe secret key

376
00:15:51,060 --> 00:15:54,000
component and the orange uh u-pipe

377
00:15:54,000 --> 00:15:57,959
secret key that helps us to uh to

378
00:15:57,959 --> 00:16:00,660
decrypt the the single components of all

379
00:16:00,660 --> 00:16:03,779
except for the last ciphertext component

380
00:16:03,779 --> 00:16:06,420
of our u-pipe secret key that might be a

381
00:16:06,420 --> 00:16:08,160
little bit complicated for the details

382
00:16:08,160 --> 00:16:10,860
probably look at the paper but the basic

383
00:16:10,860 --> 00:16:14,279
idea is that the first component that

384
00:16:14,279 --> 00:16:18,000
always is the one that is used for the

385
00:16:18,000 --> 00:16:20,040
last level of a challenge or of any

386
00:16:20,040 --> 00:16:22,680
ciphertext that one is not contained in

387
00:16:22,680 --> 00:16:25,320
the extended delegated u-pipe secret key

388
00:16:25,320 --> 00:16:28,019
anymore that basically makes sure that a

389
00:16:28,019 --> 00:16:29,940
u-pipe secret key cannot be used to

390
00:16:29,940 --> 00:16:33,120
decrypt any prefix u-pipes secret keys

391
00:16:33,120 --> 00:16:35,639
or previous versions of that secret key

392
00:16:35,639 --> 00:16:38,940
okay that's the I idea

393
00:16:38,940 --> 00:16:42,180
some ideas how we extend that

394
00:16:42,180 --> 00:16:45,600
construction to the unbounded depth case

395
00:16:45,600 --> 00:16:48,120
so we remind ourselves that the UPI

396
00:16:48,120 --> 00:16:51,300
public key in secret key consists of a

397
00:16:51,300 --> 00:16:53,759
list of ibe public keys and secret keys

398
00:16:53,759 --> 00:16:56,399
and we can't extend that list infinitely

399
00:16:56,399 --> 00:16:59,459
or at least unbounded with an unbounded

400
00:16:59,459 --> 00:17:01,680
polynomial and so

401
00:17:01,680 --> 00:17:03,660
and what we have to do is we have to

402
00:17:03,660 --> 00:17:08,040
extend that list of ibe key pairs to an

403
00:17:08,040 --> 00:17:09,540
unbounded list

404
00:17:09,540 --> 00:17:11,819
and the idea is that we use something

405
00:17:11,819 --> 00:17:14,880
that is uh um yeah that is somewhat

406
00:17:14,880 --> 00:17:17,339
related to the idea of how FS or forward

407
00:17:17,339 --> 00:17:19,740
Secure Public key encryption works we

408
00:17:19,740 --> 00:17:23,400
basically take an hibe key pair uh

409
00:17:23,400 --> 00:17:25,619
public key and the secret key and we

410
00:17:25,619 --> 00:17:29,100
delegate from that first of all a with a

411
00:17:29,100 --> 00:17:31,020
dynamic with a dynamic delegation

412
00:17:31,020 --> 00:17:33,480
mechanism the public keys and secret

413
00:17:33,480 --> 00:17:36,120
keys that we then use in the same manner

414
00:17:36,120 --> 00:17:38,400
as we did it for the bounded Case Case

415
00:17:38,400 --> 00:17:42,360
so we again delegate to ibe public keys

416
00:17:42,360 --> 00:17:43,980
and secret Keys when we want to create

417
00:17:43,980 --> 00:17:45,900
or when we want to delegate and we want

418
00:17:45,900 --> 00:17:49,559
to create ciphertexts and for this it

419
00:17:49,559 --> 00:17:52,200
suffices to have a single bounded depth

420
00:17:52,200 --> 00:17:54,720
hibe public key in the u-pipe public key

421
00:17:54,720 --> 00:17:56,520
and the single bounded depth

422
00:17:56,520 --> 00:17:59,520
corresponding HIV e-sql key in the

423
00:17:59,520 --> 00:18:01,500
u-pipe secret key

424
00:18:01,500 --> 00:18:04,620
we extend that even with multiple

425
00:18:04,620 --> 00:18:07,620
delegations in epochs it's not important

426
00:18:07,620 --> 00:18:09,799
to understand that right now but

427
00:18:09,799 --> 00:18:13,500
essentially our u-pipe delegation path

428
00:18:13,500 --> 00:18:16,080
which is the orange one here is embedded

429
00:18:16,080 --> 00:18:19,080
in this bounded depth hibe structure

430
00:18:19,080 --> 00:18:21,900
such that we obtain an unbounded number

431
00:18:21,900 --> 00:18:25,380
of delegations yeah that's basically the

432
00:18:25,380 --> 00:18:28,860
ideas a quick summary and an Outlook uh

433
00:18:28,860 --> 00:18:30,179
bounded depth through pipe construction

434
00:18:30,179 --> 00:18:33,840
can be built from two bounded collusion

435
00:18:33,840 --> 00:18:35,580
ibe and there are very efficient

436
00:18:35,580 --> 00:18:37,919
constructions from ddh such that we can

437
00:18:37,919 --> 00:18:40,860
even aggregate secret keys and

438
00:18:40,860 --> 00:18:42,780
ciphertext to make them constant size

439
00:18:42,780 --> 00:18:45,240
our public key is still a little bit too

440
00:18:45,240 --> 00:18:47,760
large for practical applications

441
00:18:47,760 --> 00:18:50,039
for the unbounded case we can build it

442
00:18:50,039 --> 00:18:53,039
from a Kappa bounded depth hibe where

443
00:18:53,039 --> 00:18:55,140
Kappa is linear in the security

444
00:18:55,140 --> 00:18:57,360
parameter and you may think that could

445
00:18:57,360 --> 00:18:59,220
be problematic if we want to build that

446
00:18:59,220 --> 00:19:01,559
from selective security to Adaptive

447
00:19:01,559 --> 00:19:05,400
security but with a somewhat nice trick

448
00:19:05,400 --> 00:19:07,919
we can use the random Oracle to use

449
00:19:07,919 --> 00:19:10,860
bounded depth hibe with Selective

450
00:19:10,860 --> 00:19:13,260
security to build unbounded depth view

451
00:19:13,260 --> 00:19:16,520
pipe with adaptive security one final

452
00:19:16,520 --> 00:19:20,760
comment if you are an expert in bounded

453
00:19:20,760 --> 00:19:23,400
depth hibe constructions please talk to

454
00:19:23,400 --> 00:19:25,500
me because we have a couple of ideas how

455
00:19:25,500 --> 00:19:27,660
to exploit the structure of underlying

456
00:19:27,660 --> 00:19:30,299
hibe constructions to aggregate public

457
00:19:30,299 --> 00:19:33,059
keys and ciphertexts and secret keys but

458
00:19:33,059 --> 00:19:35,340
so far we didn't dig deep enough into

459
00:19:35,340 --> 00:19:38,580
these hibe constructions because we

460
00:19:38,580 --> 00:19:40,980
basically use all of these things in a

461
00:19:40,980 --> 00:19:43,080
black box manner thank you very much for

462
00:19:43,080 --> 00:19:45,559
your attention

463
00:19:46,740 --> 00:19:51,720
[Applause]

464
00:19:51,720 --> 00:19:54,980
is there any question

465
00:19:58,860 --> 00:20:01,200
no question

466
00:20:01,200 --> 00:20:05,120
okay so let's thank the speaker again

467
00:20:05,500 --> 00:20:08,700
[Applause]

468
00:20:08,700 --> 00:20:11,340
so we move on to the second talk of this

469
00:20:11,340 --> 00:20:12,360
session

470
00:20:12,360 --> 00:20:14,400
which is entitled end-to-end secure

471
00:20:14,400 --> 00:20:17,220
messaging with traceability only for

472
00:20:17,220 --> 00:20:20,120
illegal content

473
00:20:22,500 --> 00:20:26,419
It Is by James bartusek

474
00:20:26,419 --> 00:20:33,080
Abhishek Jain and Guru vamsi polishala

475
00:20:33,080 --> 00:20:36,260
is here

476
00:20:37,390 --> 00:20:40,649
[Music]

477
00:20:41,400 --> 00:20:44,900
so you can present the sponsors

478
00:20:45,240 --> 00:20:49,700
I'm not sure how to get this to work

479
00:20:54,660 --> 00:20:56,340
I can talk about this slide I just heard

480
00:20:56,340 --> 00:20:59,000
about it but

481
00:21:24,299 --> 00:21:25,860
yes

482
00:21:25,860 --> 00:21:28,399
it's here

483
00:21:42,120 --> 00:21:45,320
I had done out

484
00:21:51,659 --> 00:21:53,580
I can start reading names

485
00:21:53,580 --> 00:21:56,720
Apple flower

486
00:22:18,780 --> 00:22:20,960
foreign

487
00:22:25,580 --> 00:22:27,720
so today I want to talk about uh

488
00:22:27,720 --> 00:22:29,159
end-to-end encrypted messaging with

489
00:22:29,159 --> 00:22:32,520
traceability only for illegal content

490
00:22:32,520 --> 00:22:33,780
um so I want to start the talk by

491
00:22:33,780 --> 00:22:35,340
briefly mentioning this debate over

492
00:22:35,340 --> 00:22:36,780
encryption that's been happening for

493
00:22:36,780 --> 00:22:39,480
quite some time on one side you have

494
00:22:39,480 --> 00:22:41,580
privacy Advocates and other tech

495
00:22:41,580 --> 00:22:42,840
companies which have been strongly

496
00:22:42,840 --> 00:22:45,240
pushing for into an encryption and enter

497
00:22:45,240 --> 00:22:47,700
encrypted cloud storage services

498
00:22:47,700 --> 00:22:49,620
on the other side of this debate you

499
00:22:49,620 --> 00:22:51,120
have law enforcement which argues that

500
00:22:51,120 --> 00:22:53,340
the deployment of enter encryption is

501
00:22:53,340 --> 00:22:54,419
going to interfere with their

502
00:22:54,419 --> 00:22:56,880
prosecution of criminals

503
00:22:56,880 --> 00:22:58,559
um so a disclaimer is that this is a

504
00:22:58,559 --> 00:23:00,299
much more nuanced debate than I have the

505
00:23:00,299 --> 00:23:02,400
time or expertise to talk about uh if

506
00:23:02,400 --> 00:23:03,600
you want to learn more about this there

507
00:23:03,600 --> 00:23:05,520
are some very good RWC talks this year

508
00:23:05,520 --> 00:23:07,260
and last year

509
00:23:07,260 --> 00:23:09,419
um but I'll try to Briefly summarize

510
00:23:09,419 --> 00:23:10,799
what the two sides of the argument are

511
00:23:10,799 --> 00:23:13,140
saying so the Privacy argument could say

512
00:23:13,140 --> 00:23:14,520
that look there's just no good way to

513
00:23:14,520 --> 00:23:16,919
implement backdoors in these systems all

514
00:23:16,919 --> 00:23:18,780
proposed systems so far are susceptible

515
00:23:18,780 --> 00:23:20,760
to abuse and surveillance and censorship

516
00:23:20,760 --> 00:23:23,700
is a real threat and assurances by tech

517
00:23:23,700 --> 00:23:24,840
companies that this is not going to

518
00:23:24,840 --> 00:23:27,299
happen is simply not sufficient so on

519
00:23:27,299 --> 00:23:28,679
the slide I have a screenshot of a New

520
00:23:28,679 --> 00:23:30,960
York Times article which talks about how

521
00:23:30,960 --> 00:23:32,580
Apple started building data centers in

522
00:23:32,580 --> 00:23:34,380
China but what happened was state

523
00:23:34,380 --> 00:23:35,580
employees eventually became

524
00:23:35,580 --> 00:23:38,940
administrators in these data centers and

525
00:23:38,940 --> 00:23:40,860
this allowed the government to

526
00:23:40,860 --> 00:23:43,380
essentially gain unrestricted access to

527
00:23:43,380 --> 00:23:45,659
the locations the files like emails

528
00:23:45,659 --> 00:23:48,059
photos and contacts of millions of

529
00:23:48,059 --> 00:23:50,460
Chinese residents so this is the kind of

530
00:23:50,460 --> 00:23:52,380
thing that can happen if we don't deploy

531
00:23:52,380 --> 00:23:53,700
these things correctly and this is

532
00:23:53,700 --> 00:23:55,080
explicitly something we should really

533
00:23:55,080 --> 00:23:56,940
try to avoid

534
00:23:56,940 --> 00:23:58,679
um so the flip side of the argument

535
00:23:58,679 --> 00:24:01,320
which is made by uh law enforcement is

536
00:24:01,320 --> 00:24:03,120
that look you can't ignore the negative

537
00:24:03,120 --> 00:24:04,860
impacts when you deploy end-to-end

538
00:24:04,860 --> 00:24:07,140
encryption on the slide I have a

539
00:24:07,140 --> 00:24:08,520
screenshot of an international statement

540
00:24:08,520 --> 00:24:10,500
that was signed by high-ranking

541
00:24:10,500 --> 00:24:12,780
officials from the US the UK Japan

542
00:24:12,780 --> 00:24:15,179
Australia and India

543
00:24:15,179 --> 00:24:16,500
um and essentially what they said was

544
00:24:16,500 --> 00:24:17,520
look

545
00:24:17,520 --> 00:24:20,880
uh we have a lot of reports on csam that

546
00:24:20,880 --> 00:24:22,980
come in every year and close to

547
00:24:22,980 --> 00:24:24,900
two-thirds of the csam reports oh sorry

548
00:24:24,900 --> 00:24:26,760
csam is child sexual abuse material

549
00:24:26,760 --> 00:24:28,320
which is illegal content

550
00:24:28,320 --> 00:24:29,760
um and say that look close to two-thirds

551
00:24:29,760 --> 00:24:31,080
of these come from Facebook and if

552
00:24:31,080 --> 00:24:32,640
you're going to deploy intern encryption

553
00:24:32,640 --> 00:24:34,380
this is going to interfere with our

554
00:24:34,380 --> 00:24:35,640
ability to prosecute this and we're

555
00:24:35,640 --> 00:24:36,900
essentially going to lose access to

556
00:24:36,900 --> 00:24:38,460
these reports

557
00:24:38,460 --> 00:24:40,200
um so essentially they said look if

558
00:24:40,200 --> 00:24:41,520
you're going to do this you need to do

559
00:24:41,520 --> 00:24:43,320
it in such a way that we're still going

560
00:24:43,320 --> 00:24:45,840
to be able to prosecute criminals and if

561
00:24:45,840 --> 00:24:47,520
we ask for the data of some individual

562
00:24:47,520 --> 00:24:49,679
who is let's say under investigation you

563
00:24:49,679 --> 00:24:52,860
need to be able to give us that

564
00:24:52,860 --> 00:24:55,559
um okay so so can we as cryptographers

565
00:24:55,559 --> 00:24:57,480
right find a middle ground that's going

566
00:24:57,480 --> 00:24:59,580
to make uh both sides of this debate

567
00:24:59,580 --> 00:25:02,159
happy in particular at a very high level

568
00:25:02,159 --> 00:25:04,620
right what we want to do is identify Bad

569
00:25:04,620 --> 00:25:06,900
actors in a system without compromising

570
00:25:06,900 --> 00:25:09,419
the privacy of honest users

571
00:25:09,419 --> 00:25:11,820
again another disclaimer we don't think

572
00:25:11,820 --> 00:25:13,500
any proposal that exists is safer

573
00:25:13,500 --> 00:25:15,720
deployment yet there's still a lot of

574
00:25:15,720 --> 00:25:17,880
problems with them and hopefully this

575
00:25:17,880 --> 00:25:20,520
work is one step towards uh something

576
00:25:20,520 --> 00:25:23,280
that could maybe eventually be deployed

577
00:25:23,280 --> 00:25:25,919
okay so how does content moderation work

578
00:25:25,919 --> 00:25:26,940
today

579
00:25:26,940 --> 00:25:28,080
let's say you didn't have internet

580
00:25:28,080 --> 00:25:29,640
encryption right the server can

581
00:25:29,640 --> 00:25:30,960
essentially see all the messages that

582
00:25:30,960 --> 00:25:32,460
are being exchanged what's going to

583
00:25:32,460 --> 00:25:33,720
happen is the server is going to be

584
00:25:33,720 --> 00:25:36,240
given a database of illegal images so

585
00:25:36,240 --> 00:25:37,440
these are not going to be illegal images

586
00:25:37,440 --> 00:25:38,460
in the clear they're actually going to

587
00:25:38,460 --> 00:25:41,460
be these things called perceptual hashes

588
00:25:41,460 --> 00:25:43,500
um these hashes are not cryptographic by

589
00:25:43,500 --> 00:25:45,840
any means and the reason you need it is

590
00:25:45,840 --> 00:25:47,460
because you need these hashes to be

591
00:25:47,460 --> 00:25:49,740
resistant to small changes in things

592
00:25:49,740 --> 00:25:51,840
like cropping and rotation so not

593
00:25:51,840 --> 00:25:54,179
cryptography in any sense so much so

594
00:25:54,179 --> 00:25:56,460
that you can make a dog and a picture of

595
00:25:56,460 --> 00:25:58,679
a girl hash the same thing and this

596
00:25:58,679 --> 00:26:00,120
person on Twitter actually put the hash

597
00:26:00,120 --> 00:26:03,739
of the image itself in the image

598
00:26:03,960 --> 00:26:06,900
um okay so now I said you know there's

599
00:26:06,900 --> 00:26:08,159
no inter encryption so the server is

600
00:26:08,159 --> 00:26:09,480
going to be able to view all messages

601
00:26:09,480 --> 00:26:11,640
being exchanged so let's say you have

602
00:26:11,640 --> 00:26:13,200
Alice who has a message she's going to

603
00:26:13,200 --> 00:26:14,520
send it to Bob

604
00:26:14,520 --> 00:26:15,659
um what she's going to do is she's going

605
00:26:15,659 --> 00:26:17,100
to establish some sort of encrypted

606
00:26:17,100 --> 00:26:18,360
Channel with Facebook and Bob is going

607
00:26:18,360 --> 00:26:20,279
to do the same with Facebook

608
00:26:20,279 --> 00:26:22,440
um and now Alice is going to send this

609
00:26:22,440 --> 00:26:23,640
message Facebook is going to look at

610
00:26:23,640 --> 00:26:25,320
this message compute the perceptual hash

611
00:26:25,320 --> 00:26:27,240
check if there's a match in this

612
00:26:27,240 --> 00:26:29,220
database of illegal images that it was

613
00:26:29,220 --> 00:26:31,440
given and if there is it's going to

614
00:26:31,440 --> 00:26:33,240
bring in a human reviewer this is to

615
00:26:33,240 --> 00:26:35,340
check for false positives so the human

616
00:26:35,340 --> 00:26:36,539
river is going to say okay is it

617
00:26:36,539 --> 00:26:39,240
actually legal content and if it is then

618
00:26:39,240 --> 00:26:41,159
this image along with Alice is going to

619
00:26:41,159 --> 00:26:43,980
be reported to law enforcement

620
00:26:43,980 --> 00:26:45,900
so what happens if you have enter

621
00:26:45,900 --> 00:26:48,059
encryption right now the server can no

622
00:26:48,059 --> 00:26:49,380
longer see this image so how is it going

623
00:26:49,380 --> 00:26:51,240
to compute this perceptual hash

624
00:26:51,240 --> 00:26:52,860
um so essentially all existing

625
00:26:52,860 --> 00:26:55,559
techniques that we have for uh content

626
00:26:55,559 --> 00:26:58,020
moderation seem to be incompatible uh

627
00:26:58,020 --> 00:26:59,820
when you introduce uh end-to-end

628
00:26:59,820 --> 00:27:02,240
encryption

629
00:27:02,340 --> 00:27:03,659
um one thing I want to mention is

630
00:27:03,659 --> 00:27:05,340
there's an inherent limitation to the

631
00:27:05,340 --> 00:27:07,080
approach even without enter encryption

632
00:27:07,080 --> 00:27:08,700
where the server can actually see all of

633
00:27:08,700 --> 00:27:10,679
these images in the clear and what a

634
00:27:10,679 --> 00:27:12,480
malicious user can do is always use

635
00:27:12,480 --> 00:27:14,640
steganography in their communication to

636
00:27:14,640 --> 00:27:16,380
hide what they're communicating so let's

637
00:27:16,380 --> 00:27:17,820
say Alice and Bob are malicious and

638
00:27:17,820 --> 00:27:18,900
they're colluding and they agreed on

639
00:27:18,900 --> 00:27:20,940
some stigmographic technique what they

640
00:27:20,940 --> 00:27:23,159
can do is embed a malicious image or a

641
00:27:23,159 --> 00:27:25,620
harmful image inside a harmless or a

642
00:27:25,620 --> 00:27:27,659
seemingly harmless image and the server

643
00:27:27,659 --> 00:27:29,700
is not going to be able to detect this

644
00:27:29,700 --> 00:27:31,500
and this issue is going to persist even

645
00:27:31,500 --> 00:27:33,480
if you use the fanciest of cryptography

646
00:27:33,480 --> 00:27:35,700
so a question we should ask is who is

647
00:27:35,700 --> 00:27:37,980
moderation really targeting because

648
00:27:37,980 --> 00:27:39,360
typically in cryptography you assume

649
00:27:39,360 --> 00:27:40,620
that the adversary is like you know the

650
00:27:40,620 --> 00:27:42,240
smartest and is going to use the optimal

651
00:27:42,240 --> 00:27:43,620
technique

652
00:27:43,620 --> 00:27:45,539
um turns out there's still 18 million

653
00:27:45,539 --> 00:27:47,580
plus reports every year of illegal

654
00:27:47,580 --> 00:27:50,279
content on these services so law

655
00:27:50,279 --> 00:27:51,600
enforcement says look we still want

656
00:27:51,600 --> 00:27:53,279
access to these reports uh deploying

657
00:27:53,279 --> 00:27:54,659
enter encryption is going to hinder that

658
00:27:54,659 --> 00:27:56,700
and so you need to find a way to make

659
00:27:56,700 --> 00:27:58,860
both sides work

660
00:27:58,860 --> 00:28:01,740
okay so if we wanted to do end-to-end

661
00:28:01,740 --> 00:28:03,480
encryption alongside content moderation

662
00:28:03,480 --> 00:28:06,360
what do we really want so we can start

663
00:28:06,360 --> 00:28:07,799
by listing out some bare minimum

664
00:28:07,799 --> 00:28:09,299
requirements this is not going to be a

665
00:28:09,299 --> 00:28:11,880
complete list but we want at least this

666
00:28:11,880 --> 00:28:13,020
much

667
00:28:13,020 --> 00:28:14,580
um so what we want is the server learns

668
00:28:14,580 --> 00:28:16,559
no information about the messages being

669
00:28:16,559 --> 00:28:17,700
exchanged

670
00:28:17,700 --> 00:28:20,460
and the originator of a forwarded

671
00:28:20,460 --> 00:28:22,140
message should remain anonymous what do

672
00:28:22,140 --> 00:28:23,820
I mean by the second property so let's

673
00:28:23,820 --> 00:28:25,559
say you have four parties Alice Bob

674
00:28:25,559 --> 00:28:27,299
Charlie and Eve

675
00:28:27,299 --> 00:28:29,340
um Alice has a message she forwards it

676
00:28:29,340 --> 00:28:30,600
along the chain all the way to Eve

677
00:28:30,600 --> 00:28:32,880
suppose Charlie and Eve collude they

678
00:28:32,880 --> 00:28:34,080
shouldn't learn any information about

679
00:28:34,080 --> 00:28:36,779
who sent the message m in particular you

680
00:28:36,779 --> 00:28:38,279
know in their eyes it should it could

681
00:28:38,279 --> 00:28:39,299
have been Alice or it could have been

682
00:28:39,299 --> 00:28:40,980
anyone else in the system

683
00:28:40,980 --> 00:28:42,960
and of course if the server colludes

684
00:28:42,960 --> 00:28:44,039
they have some more auxiliary

685
00:28:44,039 --> 00:28:45,480
information because the server has a

686
00:28:45,480 --> 00:28:47,520
graph of messages being exchanged uh

687
00:28:47,520 --> 00:28:49,140
this might reduce the anonymity set but

688
00:28:49,140 --> 00:28:50,580
you still want the advantage of guessing

689
00:28:50,580 --> 00:28:52,740
who sent the message to be uh no better

690
00:28:52,740 --> 00:28:55,740
than uh just guessing randomly

691
00:28:55,740 --> 00:28:57,240
um so standard enter encryption

692
00:28:57,240 --> 00:28:58,679
messaging already satisfies these three

693
00:28:58,679 --> 00:29:00,179
properties if this is all we wanted we

694
00:29:00,179 --> 00:29:01,320
don't need to do anything but you know

695
00:29:01,320 --> 00:29:03,000
we haven't done anything for Content

696
00:29:03,000 --> 00:29:06,779
moderation so let's try to add something

697
00:29:06,779 --> 00:29:09,539
um so the property that you know roughly

698
00:29:09,539 --> 00:29:11,400
what we would like is if a user receives

699
00:29:11,400 --> 00:29:13,559
some content even if it was forwarded on

700
00:29:13,559 --> 00:29:16,020
along a very long chain uh and this

701
00:29:16,020 --> 00:29:18,600
final user reports it uh we want the

702
00:29:18,600 --> 00:29:20,340
server to be able to identify the

703
00:29:20,340 --> 00:29:22,500
originator of this message without any

704
00:29:22,500 --> 00:29:24,120
help from users along this chain so

705
00:29:24,120 --> 00:29:25,200
essentially we want to go all the way

706
00:29:25,200 --> 00:29:27,000
back to the first person who sent this

707
00:29:27,000 --> 00:29:28,620
message

708
00:29:28,620 --> 00:29:31,919
um if a report was sent to the server

709
00:29:31,919 --> 00:29:33,179
so if you're only interested in

710
00:29:33,179 --> 00:29:34,679
feasibility you can do this with group

711
00:29:34,679 --> 00:29:36,480
signatures I'll describe how you do this

712
00:29:36,480 --> 00:29:38,039
because it also set the stage for what I

713
00:29:38,039 --> 00:29:39,539
want to do next

714
00:29:39,539 --> 00:29:40,980
um but there's been a long line of work

715
00:29:40,980 --> 00:29:42,720
on traceback for enter encryption which

716
00:29:42,720 --> 00:29:44,159
achieves this along with some very very

717
00:29:44,159 --> 00:29:45,299
nice properties

718
00:29:45,299 --> 00:29:47,220
so this started with message ranking

719
00:29:47,220 --> 00:29:49,740
sometime in 2017 and message ranking

720
00:29:49,740 --> 00:29:50,940
aimed to solve the problem which was

721
00:29:50,940 --> 00:29:51,840
that look if you have internet

722
00:29:51,840 --> 00:29:53,760
encryption you in some sense

723
00:29:53,760 --> 00:29:55,980
automatically get deniability and you

724
00:29:55,980 --> 00:29:58,140
want to be able to say look uh when you

725
00:29:58,140 --> 00:29:59,399
make a report you want to prove to the

726
00:29:59,399 --> 00:30:00,600
server that you actually receive this

727
00:30:00,600 --> 00:30:01,620
message and you're not just like let's

728
00:30:01,620 --> 00:30:03,720
say simulating the transcript

729
00:30:03,720 --> 00:30:06,419
um and very cool work it was able to

730
00:30:06,419 --> 00:30:07,799
achieve this using some very efficient

731
00:30:07,799 --> 00:30:09,419
techniques

732
00:30:09,419 --> 00:30:10,620
um and then this was followed up by a

733
00:30:10,620 --> 00:30:12,600
line of work on traceback which actually

734
00:30:12,600 --> 00:30:14,039
achieves all these three properties

735
00:30:14,039 --> 00:30:15,480
which is you can go all the way back to

736
00:30:15,480 --> 00:30:17,760
the original sender of a long forwarded

737
00:30:17,760 --> 00:30:19,860
chain of messages with just one report

738
00:30:19,860 --> 00:30:23,600
from the Final End user

739
00:30:24,000 --> 00:30:26,100
um okay so uh let me talk about this

740
00:30:26,100 --> 00:30:27,659
group signature construction which can

741
00:30:27,659 --> 00:30:29,520
achieve these properties so what is a

742
00:30:29,520 --> 00:30:31,559
group signature um essentially a member

743
00:30:31,559 --> 00:30:33,299
of a group can anonymously sign on

744
00:30:33,299 --> 00:30:35,640
behalf of the entire group but at the

745
00:30:35,640 --> 00:30:36,840
same time there's a group manager who

746
00:30:36,840 --> 00:30:38,580
can identify the center of a message so

747
00:30:38,580 --> 00:30:39,960
the signer is anonymous to everyone

748
00:30:39,960 --> 00:30:43,140
except uh the group manager uh so let's

749
00:30:43,140 --> 00:30:44,700
say you have a bunch of parties uh they

750
00:30:44,700 --> 00:30:45,840
go to the group manager they first

751
00:30:45,840 --> 00:30:47,520
register as a group they're going to get

752
00:30:47,520 --> 00:30:49,380
some keys and so Alice is going to use

753
00:30:49,380 --> 00:30:51,659
her key to sign her messages uh she's

754
00:30:51,659 --> 00:30:53,700
gonna put some Sigma and importantly you

755
00:30:53,700 --> 00:30:55,320
only need the master public key to

756
00:30:55,320 --> 00:30:56,820
verify the signature which is kind of

757
00:30:56,820 --> 00:30:59,100
independent of the secret keys or the

758
00:30:59,100 --> 00:31:01,620
public keys of each of these users

759
00:31:01,620 --> 00:31:03,960
um but then there's a group manager who

760
00:31:03,960 --> 00:31:06,179
has a master secret key and given the

761
00:31:06,179 --> 00:31:08,220
signature the group manager can identify

762
00:31:08,220 --> 00:31:12,419
the signer of any signature and so given

763
00:31:12,419 --> 00:31:13,740
this master security and signature the

764
00:31:13,740 --> 00:31:14,940
group manager is going to be output the

765
00:31:14,940 --> 00:31:17,460
public key of uh Alice let's say who is

766
00:31:17,460 --> 00:31:19,559
the one who signed this message

767
00:31:19,559 --> 00:31:22,320
Okay so you have group signatures how

768
00:31:22,320 --> 00:31:24,600
would you do content moderation

769
00:31:24,600 --> 00:31:25,260
um

770
00:31:25,260 --> 00:31:27,059
it's very simple so what you would say

771
00:31:27,059 --> 00:31:28,620
is okay look all the users in my

772
00:31:28,620 --> 00:31:29,820
messaging service are going to come

773
00:31:29,820 --> 00:31:31,559
register with my group manager as

774
00:31:31,559 --> 00:31:33,380
members of this group

775
00:31:33,380 --> 00:31:35,820
when they send messages under this

776
00:31:35,820 --> 00:31:37,440
end-to-end encryption whatever your

777
00:31:37,440 --> 00:31:39,840
favorite protocol is they're going to

778
00:31:39,840 --> 00:31:41,700
attach a group signature alongside this

779
00:31:41,700 --> 00:31:43,440
message

780
00:31:43,440 --> 00:31:46,020
um and so when a report occurs the

781
00:31:46,020 --> 00:31:47,820
recipient is going to send the message

782
00:31:47,820 --> 00:31:50,279
along with the group signature uh to the

783
00:31:50,279 --> 00:31:51,779
service provider who's going to be able

784
00:31:51,779 --> 00:31:54,419
to uh run this tracing algorithm because

785
00:31:54,419 --> 00:31:56,880
they have the master secret key and if

786
00:31:56,880 --> 00:31:58,799
you know uh it is actually harmful

787
00:31:58,799 --> 00:32:00,179
content they can take punitive action

788
00:32:00,179 --> 00:32:02,100
against uh the sender so in this case

789
00:32:02,100 --> 00:32:03,600
Alice

790
00:32:03,600 --> 00:32:05,220
um so we've achieved the three

791
00:32:05,220 --> 00:32:07,140
properties that we had written out which

792
00:32:07,140 --> 00:32:09,659
was if there's no report we want a

793
00:32:09,659 --> 00:32:11,039
malicious server to not learn any

794
00:32:11,039 --> 00:32:12,419
information about the messages being

795
00:32:12,419 --> 00:32:13,980
exchanged and this is guaranteed because

796
00:32:13,980 --> 00:32:15,720
everything sort of stays inside the

797
00:32:15,720 --> 00:32:18,299
internal encryption

798
00:32:18,299 --> 00:32:19,860
um and again if there's no report we

799
00:32:19,860 --> 00:32:21,000
want the originator to forwarded

800
00:32:21,000 --> 00:32:22,740
messages to remain anonymous this is

801
00:32:22,740 --> 00:32:24,179
guaranteed because in group signatures

802
00:32:24,179 --> 00:32:26,580
you don't you can't identify the uh

803
00:32:26,580 --> 00:32:28,440
signers so even given Sigma you're not

804
00:32:28,440 --> 00:32:29,640
going to be able to figure out who sent

805
00:32:29,640 --> 00:32:32,820
this message and finally if a user

806
00:32:32,820 --> 00:32:34,799
receives some content and reports it the

807
00:32:34,799 --> 00:32:36,419
server should be able to identify the

808
00:32:36,419 --> 00:32:38,520
original this is because the server has

809
00:32:38,520 --> 00:32:40,500
the master secret key

810
00:32:40,500 --> 00:32:42,779
okay but you know we should stare at

811
00:32:42,779 --> 00:32:44,100
this definition because this is

812
00:32:44,100 --> 00:32:46,080
essentially what all prior work achieved

813
00:32:46,080 --> 00:32:48,659
and ask is this definition really

814
00:32:48,659 --> 00:32:51,539
sufficient uh can this if if you know

815
00:32:51,539 --> 00:32:52,980
you deployed a system which satisfies

816
00:32:52,980 --> 00:32:54,179
these definitions is it actually

817
00:32:54,179 --> 00:32:56,880
resistant to coercion or surveillance or

818
00:32:56,880 --> 00:32:58,380
abuse

819
00:32:58,380 --> 00:33:00,600
um and it didn't you know an important

820
00:33:00,600 --> 00:33:02,820
point in this statement is that if a

821
00:33:02,820 --> 00:33:05,399
user receives some content it could be

822
00:33:05,399 --> 00:33:07,320
harmless content or harmful content

823
00:33:07,320 --> 00:33:09,240
there's no sort of restriction what kind

824
00:33:09,240 --> 00:33:11,340
of content was received so what happens

825
00:33:11,340 --> 00:33:13,440
when a malicious server and a user try

826
00:33:13,440 --> 00:33:15,539
to collude right so imagine you're in

827
00:33:15,539 --> 00:33:16,980
some authoritarian regime you're trying

828
00:33:16,980 --> 00:33:19,380
to organize a protest let's say if your

829
00:33:19,380 --> 00:33:21,240
message for organizing this protest got

830
00:33:21,240 --> 00:33:23,220
forwarded let's say to someone colluding

831
00:33:23,220 --> 00:33:25,380
with law authorities

832
00:33:25,380 --> 00:33:27,299
um they can essentially de-anonymize you

833
00:33:27,299 --> 00:33:28,740
and identify who the center of this

834
00:33:28,740 --> 00:33:30,299
message was and again this is something

835
00:33:30,299 --> 00:33:32,880
we explicitly want to prevent so let's

836
00:33:32,880 --> 00:33:35,039
try to strengthen this definition

837
00:33:35,039 --> 00:33:36,539
what we want to say is if a user

838
00:33:36,539 --> 00:33:38,519
receives some illegal content even if

839
00:33:38,519 --> 00:33:40,799
forwarded and reports it only then can

840
00:33:40,799 --> 00:33:42,840
the server identify the originator how

841
00:33:42,840 --> 00:33:46,260
do I Define illegal this is again a

842
00:33:46,260 --> 00:33:49,019
topic which I would argue is still an

843
00:33:49,019 --> 00:33:50,760
open question but what we're going to do

844
00:33:50,760 --> 00:33:53,039
in this work is uh Define illegal

845
00:33:53,039 --> 00:33:55,260
content in the same way that we did in

846
00:33:55,260 --> 00:33:57,059
the non-entone encrypted case which is

847
00:33:57,059 --> 00:33:59,159
there's a database of illegal content

848
00:33:59,159 --> 00:34:01,440
which the server is given uh presumably

849
00:34:01,440 --> 00:34:03,080
by some third party

850
00:34:03,080 --> 00:34:06,000
and if this message that was sent was in

851
00:34:06,000 --> 00:34:07,500
this database we want to identify the

852
00:34:07,500 --> 00:34:09,359
originator if it's not then we don't

853
00:34:09,359 --> 00:34:11,760
want to identify the original

854
00:34:11,760 --> 00:34:12,540
um

855
00:34:12,540 --> 00:34:14,699
so the fourth point is going to say the

856
00:34:14,699 --> 00:34:16,379
original of harmless content which is If

857
00:34:16,379 --> 00:34:18,320
the message was not in this database

858
00:34:18,320 --> 00:34:21,418
they should remain anonymous even if the

859
00:34:21,418 --> 00:34:24,179
receiver and the server collude

860
00:34:24,179 --> 00:34:25,859
okay so how do we achieve security

861
00:34:25,859 --> 00:34:28,199
against malicious servers now this is

862
00:34:28,199 --> 00:34:30,359
going to be the rest of the talk so

863
00:34:30,359 --> 00:34:31,800
let's go back to this approach of group

864
00:34:31,800 --> 00:34:33,540
signatures and how we built content

865
00:34:33,540 --> 00:34:36,300
moderation from it what was really going

866
00:34:36,300 --> 00:34:38,760
on going wrong here right the problem

867
00:34:38,760 --> 00:34:40,080
was that the server had this master

868
00:34:40,080 --> 00:34:41,820
circuit key which allowed it to decrypt

869
00:34:41,820 --> 00:34:43,918
or de-anonymize the sender of any

870
00:34:43,918 --> 00:34:47,159
message not just illegal messages

871
00:34:47,159 --> 00:34:48,780
so what we're going to do is try to tie

872
00:34:48,780 --> 00:34:50,399
its hands

873
00:34:50,399 --> 00:34:52,260
um and the high level design philosophy

874
00:34:52,260 --> 00:34:54,418
is again we want to explicitly avoid any

875
00:34:54,418 --> 00:34:55,980
sort of Master secret key in the system

876
00:34:55,980 --> 00:34:57,660
because there's just not going to be any

877
00:34:57,660 --> 00:34:59,520
server accountability in particular we

878
00:34:59,520 --> 00:35:01,080
actually want to say that these keys by

879
00:35:01,080 --> 00:35:02,280
the server can be generated in a

880
00:35:02,280 --> 00:35:05,099
malicious Manner and the server should

881
00:35:05,099 --> 00:35:06,599
only be able to de-anonymize the senders

882
00:35:06,599 --> 00:35:08,280
of bad messages

883
00:35:08,280 --> 00:35:10,619
so there was this very interesting work

884
00:35:10,619 --> 00:35:13,800
on pre-constraining encryption at itcs

885
00:35:13,800 --> 00:35:15,839
last year and essentially what they said

886
00:35:15,839 --> 00:35:18,240
was look uh you know in standard public

887
00:35:18,240 --> 00:35:19,920
key encryption you can decrypt any

888
00:35:19,920 --> 00:35:21,180
message that was encrypted to your

889
00:35:21,180 --> 00:35:22,800
public key but what pre-constraining

890
00:35:22,800 --> 00:35:25,020
encryption says is you can only decrypt

891
00:35:25,020 --> 00:35:26,820
a message if the message satisfies some

892
00:35:26,820 --> 00:35:28,500
sort of predicate so it could be that oh

893
00:35:28,500 --> 00:35:30,180
if the first 10 bits of the message are

894
00:35:30,180 --> 00:35:31,560
zero only then can you decrypt the

895
00:35:31,560 --> 00:35:32,359
message

896
00:35:32,359 --> 00:35:34,500
so we built on this framework and

897
00:35:34,500 --> 00:35:35,220
introduced something called

898
00:35:35,220 --> 00:35:37,440
pre-constrained group signatures I'm

899
00:35:37,440 --> 00:35:38,460
going to Define what they are in the

900
00:35:38,460 --> 00:35:39,599
next slide

901
00:35:39,599 --> 00:35:41,640
they look exactly the same as before so

902
00:35:41,640 --> 00:35:44,160
you have a group manager but the only

903
00:35:44,160 --> 00:35:45,540
change is that in the key generation

904
00:35:45,540 --> 00:35:47,760
phase the group manager needs to supply

905
00:35:47,760 --> 00:35:50,579
a database of illegal images for which

906
00:35:50,579 --> 00:35:53,280
signers can be identified so you know

907
00:35:53,280 --> 00:35:54,540
the master public key and the master you

908
00:35:54,540 --> 00:35:55,619
could hear essentially going to depend

909
00:35:55,619 --> 00:35:57,900
on this database

910
00:35:57,900 --> 00:35:59,460
um and we also wanted the public key

911
00:35:59,460 --> 00:36:00,900
should not leak this database D because

912
00:36:00,900 --> 00:36:02,940
these are actually illegal images and uh

913
00:36:02,940 --> 00:36:05,460
should not just be distributed uh to the

914
00:36:05,460 --> 00:36:07,140
public and we can also enforce that this

915
00:36:07,140 --> 00:36:08,940
database D that the server uses is

916
00:36:08,940 --> 00:36:11,160
signed by some uh third-party Authority

917
00:36:11,160 --> 00:36:12,359
let's say the national Center for

918
00:36:12,359 --> 00:36:13,680
missing and exploited children in

919
00:36:13,680 --> 00:36:15,359
America

920
00:36:15,359 --> 00:36:16,740
um so what's going to happen is exactly

921
00:36:16,740 --> 00:36:18,480
as before uh oh by the way this key

922
00:36:18,480 --> 00:36:20,820
generation can be fully malicious

923
00:36:20,820 --> 00:36:22,500
um so users are going to update their

924
00:36:22,500 --> 00:36:24,180
keys Alice is going to use her key to

925
00:36:24,180 --> 00:36:26,579
sign but the crucial difference is that

926
00:36:26,579 --> 00:36:28,980
when the group manager tries to run this

927
00:36:28,980 --> 00:36:31,500
tracing algorithm uh it's only going to

928
00:36:31,500 --> 00:36:33,480
be able to identify the sender if and

929
00:36:33,480 --> 00:36:35,579
only if the message was in this database

930
00:36:35,579 --> 00:36:37,380
that the group manager chose in the

931
00:36:37,380 --> 00:36:39,420
beginning

932
00:36:39,420 --> 00:36:40,680
um and then this is essentially this

933
00:36:40,680 --> 00:36:42,240
pre-constraining notion that we've

934
00:36:42,240 --> 00:36:44,880
introduced to group signatures

935
00:36:44,880 --> 00:36:46,680
um so okay so if you had preconstrained

936
00:36:46,680 --> 00:36:47,640
group signatures how would you do

937
00:36:47,640 --> 00:36:50,040
content moderation uh exactly the same

938
00:36:50,040 --> 00:36:51,900
as before inside the internet encryption

939
00:36:51,900 --> 00:36:52,800
you're going to attach these group

940
00:36:52,800 --> 00:36:54,300
signatures

941
00:36:54,300 --> 00:36:56,220
um and now when a report occurs you have

942
00:36:56,220 --> 00:36:57,599
this guarantee that the server the

943
00:36:57,599 --> 00:36:59,339
service Trace algorithm is only going to

944
00:36:59,339 --> 00:37:00,900
work if the message that you assigned

945
00:37:00,900 --> 00:37:03,480
was actually in this database of illegal

946
00:37:03,480 --> 00:37:05,339
content

947
00:37:05,339 --> 00:37:06,960
um and so the privacy of honest users by

948
00:37:06,960 --> 00:37:08,579
Honest users I mean people who don't

949
00:37:08,579 --> 00:37:12,300
sign illegal messages is unaffected

950
00:37:12,300 --> 00:37:14,640
okay so how do we pre-constrain group

951
00:37:14,640 --> 00:37:17,280
signatures I'm going to describe a

952
00:37:17,280 --> 00:37:19,859
compiler where uh for for preconstrained

953
00:37:19,859 --> 00:37:20,760
group signatures where I'm going to

954
00:37:20,760 --> 00:37:22,200
start off with a generic construction of

955
00:37:22,200 --> 00:37:24,420
group signatures and modify it to

956
00:37:24,420 --> 00:37:27,000
essentially pre-constrain it so so in

957
00:37:27,000 --> 00:37:28,260
this generic construction you have this

958
00:37:28,260 --> 00:37:29,880
master public key which contains two

959
00:37:29,880 --> 00:37:31,560
things the first thing is the

960
00:37:31,560 --> 00:37:33,300
verification key of a signature scheme

961
00:37:33,300 --> 00:37:34,380
this could be your favorite signature

962
00:37:34,380 --> 00:37:36,359
scheme and the public key of some public

963
00:37:36,359 --> 00:37:37,920
key encryption theme again your favorite

964
00:37:37,920 --> 00:37:40,020
public key encryption scheme

965
00:37:40,020 --> 00:37:42,660
so the ciphertext sorry so the group

966
00:37:42,660 --> 00:37:44,160
signature has two parts the first part

967
00:37:44,160 --> 00:37:46,560
is a ciphertext which is an encryption

968
00:37:46,560 --> 00:37:48,060
of the client's public key which is

969
00:37:48,060 --> 00:37:50,099
going to be the client's identity under

970
00:37:50,099 --> 00:37:52,920
the server's public key

971
00:37:52,920 --> 00:37:54,060
um and and after this you're going to

972
00:37:54,060 --> 00:37:55,260
attach a proof which essentially says

973
00:37:55,260 --> 00:37:56,700
the following which is I know a server

974
00:37:56,700 --> 00:37:59,280
signature Sigma on my public key I

975
00:37:59,280 --> 00:38:00,599
encrypted my public key using some

976
00:38:00,599 --> 00:38:02,220
Randomness R to the server as public key

977
00:38:02,220 --> 00:38:04,380
and I know the secret key corresponding

978
00:38:04,380 --> 00:38:06,240
to the public key that I just encrypted

979
00:38:06,240 --> 00:38:07,619
and the message is going to show up as a

980
00:38:07,619 --> 00:38:09,839
tag in the nizzic so what do these three

981
00:38:09,839 --> 00:38:12,240
things uh serve the first one says that

982
00:38:12,240 --> 00:38:14,760
only group members can sign because when

983
00:38:14,760 --> 00:38:16,020
you register with the group you get a

984
00:38:16,020 --> 00:38:18,420
signature on your public key and the

985
00:38:18,420 --> 00:38:20,099
second thing says that the group manager

986
00:38:20,099 --> 00:38:21,420
can always Trace because they have the

987
00:38:21,420 --> 00:38:23,520
secret key to which you encrypted the

988
00:38:23,520 --> 00:38:27,839
PKS and the third thing says uh you know

989
00:38:27,839 --> 00:38:29,160
it's again unfortunately you shouldn't

990
00:38:29,160 --> 00:38:31,020
be able to use somebody else's identity

991
00:38:31,020 --> 00:38:32,820
and encrypt it there

992
00:38:32,820 --> 00:38:35,940
um okay so so what is the issue here

993
00:38:35,940 --> 00:38:38,160
right so in in this if you stream if you

994
00:38:38,160 --> 00:38:39,300
stare at this construction right the

995
00:38:39,300 --> 00:38:41,579
issue is that uh in this ciphertext

996
00:38:41,579 --> 00:38:43,619
right which hides your identity until

997
00:38:43,619 --> 00:38:45,240
unless there's a report and the server

998
00:38:45,240 --> 00:38:47,820
can decrypt uh it was just standard

999
00:38:47,820 --> 00:38:49,440
public key encryption so the server can

1000
00:38:49,440 --> 00:38:51,780
always decrypt so this is really where

1001
00:38:51,780 --> 00:38:54,359
we want to try to pre-constrain uh the

1002
00:38:54,359 --> 00:38:56,520
scheme and introduce some sort of or tie

1003
00:38:56,520 --> 00:38:58,800
the hands of the server here

1004
00:38:58,800 --> 00:39:00,780
um and the way I'm going to do it is by

1005
00:39:00,780 --> 00:39:03,540
replacing two things so I'm going to

1006
00:39:03,540 --> 00:39:06,000
replace the public key uh in the master

1007
00:39:06,000 --> 00:39:08,400
public key with the first message of a

1008
00:39:08,400 --> 00:39:09,599
PSI scheme I haven't described what this

1009
00:39:09,599 --> 00:39:11,160
PSI scheme is I'll just get to it in a

1010
00:39:11,160 --> 00:39:12,900
second and the ciphertext is going to be

1011
00:39:12,900 --> 00:39:15,540
the second message of a PSI scheme

1012
00:39:15,540 --> 00:39:17,339
so what does this PSI scheme look like

1013
00:39:17,339 --> 00:39:19,200
it's very simple so you have a server

1014
00:39:19,200 --> 00:39:21,720
with a database D you have a user with a

1015
00:39:21,720 --> 00:39:23,760
message M and we want this variant of

1016
00:39:23,760 --> 00:39:26,640
like circuit PSI where the the server

1017
00:39:26,640 --> 00:39:29,640
learns the uh a label which is like pkc

1018
00:39:29,640 --> 00:39:31,859
if the message m is in this database D

1019
00:39:31,859 --> 00:39:33,839
which the server had

1020
00:39:33,839 --> 00:39:34,560
um

1021
00:39:34,560 --> 00:39:36,000
and and we want some other nice

1022
00:39:36,000 --> 00:39:37,619
properties from this PSI which is that

1023
00:39:37,619 --> 00:39:39,420
it's two rounds the first round is

1024
00:39:39,420 --> 00:39:42,180
reusable because uh we really want to be

1025
00:39:42,180 --> 00:39:44,940
able to create these ciphertext in a

1026
00:39:44,940 --> 00:39:47,339
reusable Manner and it's also desirable

1027
00:39:47,339 --> 00:39:48,780
to have these ciphertext to be constant

1028
00:39:48,780 --> 00:39:50,940
size and the time for the second round

1029
00:39:50,940 --> 00:39:52,260
message to be constantized because we're

1030
00:39:52,260 --> 00:39:53,579
going to be creating proofs about these

1031
00:39:53,579 --> 00:39:55,380
things

1032
00:39:55,380 --> 00:39:57,420
um so so if you stare at what this PSI

1033
00:39:57,420 --> 00:39:59,040
construction is doing essentially it's

1034
00:39:59,040 --> 00:40:01,500
only going to allow the server to learn

1035
00:40:01,500 --> 00:40:04,320
the public key which is pkc If the

1036
00:40:04,320 --> 00:40:06,660
message was in the database D if not

1037
00:40:06,660 --> 00:40:09,180
it's going to learn nothing

1038
00:40:09,180 --> 00:40:10,740
um so okay the question is do we have

1039
00:40:10,740 --> 00:40:12,480
such a PSI scheme which satisfies all

1040
00:40:12,480 --> 00:40:14,579
these properties and the Apple PSI

1041
00:40:14,579 --> 00:40:15,839
scheme which came out a couple of years

1042
00:40:15,839 --> 00:40:17,820
ago satisfies most of these properties

1043
00:40:17,820 --> 00:40:19,380
we have to work a little bit harder to

1044
00:40:19,380 --> 00:40:21,060
get to where we want

1045
00:40:21,060 --> 00:40:23,160
um but a caveat is that the size of the

1046
00:40:23,160 --> 00:40:24,660
master public key is proportional to the

1047
00:40:24,660 --> 00:40:26,700
size of database this can get quite

1048
00:40:26,700 --> 00:40:28,859
large but you can think of these as

1049
00:40:28,859 --> 00:40:30,599
system updates so whenever you update

1050
00:40:30,599 --> 00:40:33,180
your app or your software it's going to

1051
00:40:33,180 --> 00:40:34,920
come along with that

1052
00:40:34,920 --> 00:40:39,000
and so the what happens to the uh proof

1053
00:40:39,000 --> 00:40:40,800
here right so it's going to be modified

1054
00:40:40,800 --> 00:40:42,839
uh just the second point which is you

1055
00:40:42,839 --> 00:40:44,280
just show that the CT which is the

1056
00:40:44,280 --> 00:40:46,500
second round PSI message was computed

1057
00:40:46,500 --> 00:40:48,300
correctly everything else Remains the

1058
00:40:48,300 --> 00:40:50,820
Same so final touches if you want to

1059
00:40:50,820 --> 00:40:52,320
actually instantiate the scheme so

1060
00:40:52,320 --> 00:40:53,579
you're going to pick the right signature

1061
00:40:53,579 --> 00:40:55,619
scheme and the right proof system to

1062
00:40:55,619 --> 00:40:57,240
kind of play well and be concretely

1063
00:40:57,240 --> 00:41:00,180
efficient so we use structure preserving

1064
00:41:00,180 --> 00:41:02,040
signatures along with the gratza high

1065
00:41:02,040 --> 00:41:04,560
proof system how do we perform when we

1066
00:41:04,560 --> 00:41:06,300
use these things signing takes about 10

1067
00:41:06,300 --> 00:41:09,000
milliseconds uh verification takes about

1068
00:41:09,000 --> 00:41:11,700
40 milliseconds uh this might be a

1069
00:41:11,700 --> 00:41:12,720
little bit far away from what you want

1070
00:41:12,720 --> 00:41:14,760
for messaging but I would argue that's

1071
00:41:14,760 --> 00:41:16,560
reasonably close

1072
00:41:16,560 --> 00:41:18,480
um okay so so takeaways right so this is

1073
00:41:18,480 --> 00:41:19,440
something I want to spend a little bit

1074
00:41:19,440 --> 00:41:20,400
of time on

1075
00:41:20,400 --> 00:41:21,960
um so so the constructions are when you

1076
00:41:21,960 --> 00:41:23,099
want to build these things are very

1077
00:41:23,099 --> 00:41:24,300
exciting you can come up with like

1078
00:41:24,300 --> 00:41:25,440
taking Notions of like forward security

1079
00:41:25,440 --> 00:41:27,119
and all these you know nice

1080
00:41:27,119 --> 00:41:28,500
cryptographic Notions and guarantees

1081
00:41:28,500 --> 00:41:31,440
that you want but I would argue that at

1082
00:41:31,440 --> 00:41:33,119
least here right because this is the

1083
00:41:33,119 --> 00:41:34,260
kind of research that's going to have a

1084
00:41:34,260 --> 00:41:36,720
real impact and like going to touch the

1085
00:41:36,720 --> 00:41:38,940
lives of real people uh very very

1086
00:41:38,940 --> 00:41:40,260
directly and so we should be really

1087
00:41:40,260 --> 00:41:42,780
careful before deploying these systems

1088
00:41:42,780 --> 00:41:44,760
and we should really question the

1089
00:41:44,760 --> 00:41:46,859
definition and argue whether this is the

1090
00:41:46,859 --> 00:41:48,180
right thing is this actually going to

1091
00:41:48,180 --> 00:41:49,859
give us the right privacy guarantees

1092
00:41:49,859 --> 00:41:51,420
that we would want

1093
00:41:51,420 --> 00:41:54,119
um and uh I believe the right way to go

1094
00:41:54,119 --> 00:41:55,680
about this is to talk to both sides of

1095
00:41:55,680 --> 00:41:57,119
the debate and get some formal

1096
00:41:57,119 --> 00:41:59,460
requirements from both parties and then

1097
00:41:59,460 --> 00:42:01,200
try to build this without instead of

1098
00:42:01,200 --> 00:42:02,280
just saying okay we're just going to

1099
00:42:02,280 --> 00:42:04,020
come up with a definition and okay this

1100
00:42:04,020 --> 00:42:05,880
is just going to be secure because being

1101
00:42:05,880 --> 00:42:06,960
secured according to the wrong

1102
00:42:06,960 --> 00:42:10,079
definition is simply uh meaningless

1103
00:42:10,079 --> 00:42:12,560
um thank you

1104
00:42:17,700 --> 00:42:20,660
is there any question

1105
00:42:21,780 --> 00:42:24,619
is it on a quick question about

1106
00:42:24,619 --> 00:42:27,000
updateability so it seems that now you

1107
00:42:27,000 --> 00:42:28,800
have to fix one statically the database

1108
00:42:28,800 --> 00:42:30,599
once and for all is there something

1109
00:42:30,599 --> 00:42:32,579
non-trivial that can be done if I come

1110
00:42:32,579 --> 00:42:34,140
to you with a new database or do you

1111
00:42:34,140 --> 00:42:35,460
have to regenerate everything so so

1112
00:42:35,460 --> 00:42:36,540
currently we have to regenerate the

1113
00:42:36,540 --> 00:42:37,560
database but it is an interesting

1114
00:42:37,560 --> 00:42:38,880
question I think at least from a PSI

1115
00:42:38,880 --> 00:42:40,800
perspective where you could say oh I

1116
00:42:40,800 --> 00:42:42,540
have this updatable PSI notion without

1117
00:42:42,540 --> 00:42:44,760
communicating the entire database we

1118
00:42:44,760 --> 00:42:46,740
thought about it for a little bit but uh

1119
00:42:46,740 --> 00:42:48,480
we didn't make much progress

1120
00:42:48,480 --> 00:42:50,760
thanks

1121
00:42:50,760 --> 00:42:52,560
I have a question in a similar direction

1122
00:42:52,560 --> 00:42:54,359
also about the database how do you

1123
00:42:54,359 --> 00:42:56,400
ensure that there's only child sexual

1124
00:42:56,400 --> 00:42:57,960
abuse material in there after all we're

1125
00:42:57,960 --> 00:42:59,640
talking about State actors right so they

1126
00:42:59,640 --> 00:43:00,960
might also be State actors sneaking

1127
00:43:00,960 --> 00:43:03,060
politically undesirable right right I

1128
00:43:03,060 --> 00:43:04,980
agree and this is indeed an issue that

1129
00:43:04,980 --> 00:43:06,900
needs to be fixed so currently what we

1130
00:43:06,900 --> 00:43:08,040
say is look there is a separation

1131
00:43:08,040 --> 00:43:09,900
between the person preparing these keys

1132
00:43:09,900 --> 00:43:12,660
and the person preparing the database uh

1133
00:43:12,660 --> 00:43:14,040
so in some sense you need a way to

1134
00:43:14,040 --> 00:43:16,020
define what illegal content is the way

1135
00:43:16,020 --> 00:43:17,819
we did it was there's this Independent

1136
00:43:17,819 --> 00:43:19,200
party the national Center for missing

1137
00:43:19,200 --> 00:43:20,940
and explored children for example who's

1138
00:43:20,940 --> 00:43:23,400
going who is the one you know sort of uh

1139
00:43:23,400 --> 00:43:24,720
saying look this is illegal content

1140
00:43:24,720 --> 00:43:25,859
which you should look out for and

1141
00:43:25,859 --> 00:43:27,300
monitor

1142
00:43:27,300 --> 00:43:29,220
um what we say is there's you need a

1143
00:43:29,220 --> 00:43:31,319
signature from uh that party on your

1144
00:43:31,319 --> 00:43:32,280
database if you want to actually

1145
00:43:32,280 --> 00:43:33,960
generate keys and if you want to use it

1146
00:43:33,960 --> 00:43:36,359
so clients can publicly verify that

1147
00:43:36,359 --> 00:43:38,099
everything that was that can be traced

1148
00:43:38,099 --> 00:43:40,500
was signed off by this organization but

1149
00:43:40,500 --> 00:43:42,300
if this organization itself is corrupt

1150
00:43:42,300 --> 00:43:44,520
there's really nothing we can uh do and

1151
00:43:44,520 --> 00:43:45,780
it is an important question and

1152
00:43:45,780 --> 00:43:48,300
something we should look into uh to to

1153
00:43:48,300 --> 00:43:49,680
sort of reduce the trust assumptions

1154
00:43:49,680 --> 00:43:51,919
here

1155
00:43:52,200 --> 00:43:54,300
question

1156
00:43:54,300 --> 00:43:56,280
I had to follow up I didn't get our

1157
00:43:56,280 --> 00:43:58,680
clients very fine the the signature from

1158
00:43:58,680 --> 00:44:02,760
this NC Mac or from uh from uh so so

1159
00:44:02,760 --> 00:44:04,680
when you get the master public key you

1160
00:44:04,680 --> 00:44:06,119
can just verify it you can say the

1161
00:44:06,119 --> 00:44:07,619
master public comes with kind of a proof

1162
00:44:07,619 --> 00:44:09,660
which uh gives it and you should be able

1163
00:44:09,660 --> 00:44:12,359
to verify it yeah

1164
00:44:12,359 --> 00:44:14,410
okay so let's thank the speaker again

1165
00:44:14,410 --> 00:44:20,099
[Applause]

1166
00:44:20,099 --> 00:44:22,440
so now we move on to the final talk of

1167
00:44:22,440 --> 00:44:23,400
this session

1168
00:44:23,400 --> 00:44:25,920
it's entitled asymmetric group message

1169
00:44:25,920 --> 00:44:28,680
from from King definitions and

1170
00:44:28,680 --> 00:44:32,819
constructions by jungju Lai gong Zion

1171
00:44:32,819 --> 00:44:34,020
sane

1172
00:44:34,020 --> 00:44:39,599
tank on Huang assuming you shimu John

1173
00:44:39,599 --> 00:44:43,859
Wayne and the talk will be given by uh

1174
00:44:43,859 --> 00:44:47,280
shuang Han who is not a coaster but who

1175
00:44:47,280 --> 00:44:49,020
represents the authors

1176
00:44:49,020 --> 00:44:51,599
please and thanks for the introduction

1177
00:44:51,599 --> 00:44:53,520
good morning I'm the proxies because

1178
00:44:53,520 --> 00:44:56,520
shahan I will make the presentation on

1179
00:44:56,520 --> 00:44:58,619
behalf of the authors

1180
00:44:58,619 --> 00:45:01,500
who regrets not being able to attend the

1181
00:45:01,500 --> 00:45:03,480
conference by person

1182
00:45:03,480 --> 00:45:05,700
the title is asymmetric group message

1183
00:45:05,700 --> 00:45:08,359
ranking definitions and constructions

1184
00:45:08,359 --> 00:45:12,259
and the authors

1185
00:45:14,359 --> 00:45:18,000
from China university and the University

1186
00:45:18,000 --> 00:45:20,640
of Hong Kong

1187
00:45:20,640 --> 00:45:22,560
so firstly I will introduce the

1188
00:45:22,560 --> 00:45:24,300
background and the motivation behind

1189
00:45:24,300 --> 00:45:26,220
this research

1190
00:45:26,220 --> 00:45:28,680
in recent years secure messaging

1191
00:45:28,680 --> 00:45:30,420
applications have gained huge

1192
00:45:30,420 --> 00:45:32,520
popularities for both individual and

1193
00:45:32,520 --> 00:45:34,980
group conversations billions of people

1194
00:45:34,980 --> 00:45:37,500
communicate with each other daily via

1195
00:45:37,500 --> 00:45:39,859
messaging applications such as Facebook

1196
00:45:39,859 --> 00:45:42,440
messenger and Twitter

1197
00:45:42,440 --> 00:45:45,200
confidentiality and integrity have been

1198
00:45:45,200 --> 00:45:47,099
extensively studied in these

1199
00:45:47,099 --> 00:45:49,079
applications

1200
00:45:49,079 --> 00:45:51,540
however these messaging applications are

1201
00:45:51,540 --> 00:45:54,060
often misused for spreading malicious

1202
00:45:54,060 --> 00:45:57,180
information such as online bullying

1203
00:45:57,180 --> 00:45:58,920
spamming phishing links and

1204
00:45:58,920 --> 00:46:01,380
misinformation

1205
00:46:01,380 --> 00:46:03,599
Facebook Messenger introduced the

1206
00:46:03,599 --> 00:46:06,000
concept of message ranking which

1207
00:46:06,000 --> 00:46:08,520
provides the functionality to reports of

1208
00:46:08,520 --> 00:46:10,319
abusive Behavior

1209
00:46:10,319 --> 00:46:12,599
this allows for appropriate punishment

1210
00:46:12,599 --> 00:46:14,760
of senders who misuse messaging

1211
00:46:14,760 --> 00:46:17,280
applications

1212
00:46:17,280 --> 00:46:19,200
here we will review the security

1213
00:46:19,200 --> 00:46:21,240
properties of messaging ranking

1214
00:46:21,240 --> 00:46:23,880
introduced by tiagi at all

1215
00:46:23,880 --> 00:46:26,520
and there are two key security Notions

1216
00:46:26,520 --> 00:46:29,180
to consider the first is accountability

1217
00:46:29,180 --> 00:46:32,160
which enables the receiver to report any

1218
00:46:32,160 --> 00:46:35,339
malicious messages to a moderator such

1219
00:46:35,339 --> 00:46:37,980
as a platform or adjusted for third

1220
00:46:37,980 --> 00:46:40,380
party and ensures that

1221
00:46:40,380 --> 00:46:43,500
no fake reports can be created to frame

1222
00:46:43,500 --> 00:46:46,500
an honest sender

1223
00:46:46,500 --> 00:46:49,440
to formalize accountability two specific

1224
00:46:49,440 --> 00:46:52,140
properties are used Cinder binding and

1225
00:46:52,140 --> 00:46:53,880
receiver binding

1226
00:46:53,880 --> 00:46:56,160
and Center mining guarantees that every

1227
00:46:56,160 --> 00:46:58,200
single should not be able to trick

1228
00:46:58,200 --> 00:47:00,540
receivers into accepting unreputable

1229
00:47:00,540 --> 00:47:03,240
messages and receiver binding guarantees

1230
00:47:03,240 --> 00:47:05,640
that early receiver cannot deceive the

1231
00:47:05,640 --> 00:47:09,720
judge to refrain the innocent sender

1232
00:47:09,720 --> 00:47:12,119
the second property of message ranking

1233
00:47:12,119 --> 00:47:14,940
is denial deniability essentially

1234
00:47:14,940 --> 00:47:17,460
inability ensures that when a malicious

1235
00:47:17,460 --> 00:47:20,460
message is reported by the receiver only

1236
00:47:20,460 --> 00:47:23,099
the moderator can verify the validity of

1237
00:47:23,099 --> 00:47:25,500
the reports this means after a

1238
00:47:25,500 --> 00:47:27,839
compromise the center can technically

1239
00:47:27,839 --> 00:47:30,480
deny sending the message potentially

1240
00:47:30,480 --> 00:47:33,480
avoiding negative consequences of

1241
00:47:33,480 --> 00:47:36,180
embarrassment

1242
00:47:36,180 --> 00:47:39,240
and denability is formalized with

1243
00:47:39,240 --> 00:47:42,240
three's best special properties the

1244
00:47:42,240 --> 00:47:43,920
first one is the universal denability

1245
00:47:43,920 --> 00:47:46,440
which guarantees the inability when no

1246
00:47:46,440 --> 00:47:49,319
secret keys are compromised and the

1247
00:47:49,319 --> 00:47:51,960
receiver compromised inability

1248
00:47:51,960 --> 00:47:54,359
uh interesting ability when the

1249
00:47:54,359 --> 00:47:56,700
receiver's security is compromised and

1250
00:47:56,700 --> 00:47:58,319
the judge compromise the nobility

1251
00:47:58,319 --> 00:48:00,540
considers the inability when the judge

1252
00:48:00,540 --> 00:48:03,839
security is compromised

1253
00:48:03,839 --> 00:48:05,520
and there are mainly two kinds of

1254
00:48:05,520 --> 00:48:07,680
message ranking symmetric massive

1255
00:48:07,680 --> 00:48:11,640
ranking SMF and the asymmetric massive

1256
00:48:11,640 --> 00:48:13,380
ranking AMF

1257
00:48:13,380 --> 00:48:15,839
the key distinction between them is that

1258
00:48:15,839 --> 00:48:18,380
AMF offers third-party moderation

1259
00:48:18,380 --> 00:48:21,540
allowing the separation of the transform

1260
00:48:21,540 --> 00:48:24,720
and the moderator

1261
00:48:24,720 --> 00:48:27,960
however current AMF Solutions only

1262
00:48:27,960 --> 00:48:30,140
considered one-to-one communication

1263
00:48:30,140 --> 00:48:33,300
there has been no research on applying

1264
00:48:33,300 --> 00:48:35,579
message ranking to group group

1265
00:48:35,579 --> 00:48:38,099
Communications

1266
00:48:38,099 --> 00:48:42,000
now we'll turn through the contributions

1267
00:48:42,000 --> 00:48:44,880
in this paper we systematically explore

1268
00:48:44,880 --> 00:48:46,980
message ranking in group communication

1269
00:48:46,980 --> 00:48:49,680
scenarios and the contributions are

1270
00:48:49,680 --> 00:48:52,560
listed in photos first of first of all

1271
00:48:52,560 --> 00:48:54,300
we introduced a new primitive called

1272
00:48:54,300 --> 00:48:57,660
asymmetric group message ranking or HDMI

1273
00:48:57,660 --> 00:48:59,760
photoshoot and formalize its security

1274
00:48:59,760 --> 00:49:01,200
Notions

1275
00:49:01,200 --> 00:49:03,780
secondly we present a variance of key

1276
00:49:03,780 --> 00:49:06,240
encapsulation mechanism called harsh

1277
00:49:06,240 --> 00:49:08,579
blue system based chem supporting Sigma

1278
00:49:08,579 --> 00:49:13,020
protocols or HPS cam Sigma for short and

1279
00:49:13,020 --> 00:49:15,900
provide a construction based on the ddh

1280
00:49:15,900 --> 00:49:18,180
Assumption the construction can also be

1281
00:49:18,180 --> 00:49:20,819
extended to to be built based on the key

1282
00:49:20,819 --> 00:49:24,119
linear assumptions and finally we we

1283
00:49:24,119 --> 00:49:26,520
provide a framework of constructing hdmf

1284
00:49:26,520 --> 00:49:29,579
from HPS cam Sigma as a building block

1285
00:49:29,579 --> 00:49:32,040
and show that it achieves the required

1286
00:49:32,040 --> 00:49:33,780
security properties

1287
00:49:33,780 --> 00:49:36,599
when the size of the receiver set is one

1288
00:49:36,599 --> 00:49:38,640
we also obtain a framework of

1289
00:49:38,640 --> 00:49:44,040
constructing AMF from HPS cam Sigma

1290
00:49:44,040 --> 00:49:47,520
here we we make a comparison on AMF and

1291
00:49:47,520 --> 00:49:51,000
our hdmf the main differences are that

1292
00:49:51,000 --> 00:49:54,359
firstly in AMF the adversary can corrupt

1293
00:49:54,359 --> 00:49:57,680
only one you one receiver while in our

1294
00:49:57,680 --> 00:50:00,960
hdmf the adversary can adaptively crop

1295
00:50:00,960 --> 00:50:04,800
multiple receivers and secondly AMF does

1296
00:50:04,800 --> 00:50:07,740
not take receiver an anonymity into

1297
00:50:07,740 --> 00:50:11,940
consideration we consider it in hdmf so

1298
00:50:11,940 --> 00:50:14,160
that the receiver can report malicious

1299
00:50:14,160 --> 00:50:16,380
messages to the moderator with less

1300
00:50:16,380 --> 00:50:17,460
concern

1301
00:50:17,460 --> 00:50:20,700
and and thirdly our constructions can be

1302
00:50:20,700 --> 00:50:23,339
based on standard assumptions like ddh

1303
00:50:23,339 --> 00:50:25,920
or care linear

1304
00:50:25,920 --> 00:50:28,319
then let me introduce the Primitive of

1305
00:50:28,319 --> 00:50:30,060
agmf

1306
00:50:30,060 --> 00:50:33,180
an AGM MF scheme contains night

1307
00:50:33,180 --> 00:50:35,819
algorithm setup is algorithm for

1308
00:50:35,819 --> 00:50:38,819
generating public parameters and kgj and

1309
00:50:38,819 --> 00:50:41,579
kgu are the algorithm for generating key

1310
00:50:41,579 --> 00:50:44,640
pairs for the judge and the common users

1311
00:50:44,640 --> 00:50:46,560
respectively

1312
00:50:46,560 --> 00:50:49,319
Frank verify and recharge as three

1313
00:50:49,319 --> 00:50:51,900
algorithms for the signature generation

1314
00:50:51,900 --> 00:50:54,180
the receiver's verification and the

1315
00:50:54,180 --> 00:50:57,119
judge verification respectively Forge

1316
00:50:57,119 --> 00:50:59,760
rforge and jforge are those other three

1317
00:50:59,760 --> 00:51:02,460
anguisms to forge signatures

1318
00:51:02,460 --> 00:51:06,119
in a nutshell the sender will invoke the

1319
00:51:06,119 --> 00:51:08,700
algorithm Frank to generate signatures

1320
00:51:08,700 --> 00:51:11,400
for receiver set s

1321
00:51:11,400 --> 00:51:14,819
and every receiver can call verify with

1322
00:51:14,819 --> 00:51:17,400
the secret key and inputs to verify the

1323
00:51:17,400 --> 00:51:18,900
signatures

1324
00:51:18,900 --> 00:51:21,780
if the if some receiver outputs some

1325
00:51:21,780 --> 00:51:24,480
malicious messages to the moderator

1326
00:51:24,480 --> 00:51:26,880
the moderator verifies the reports with

1327
00:51:26,880 --> 00:51:28,920
algorithm charge

1328
00:51:28,920 --> 00:51:31,740
and the algorithm Forge arforge and

1329
00:51:31,740 --> 00:51:34,200
jforge are not intended to be run by

1330
00:51:34,200 --> 00:51:36,960
these users or judge their existence

1331
00:51:36,960 --> 00:51:39,359
guarantee deniability in particular

1332
00:51:39,359 --> 00:51:42,680
compromise scenarios

1333
00:51:42,720 --> 00:51:44,760
we consider three kinds of security

1334
00:51:44,760 --> 00:51:47,460
requirements for agmf accountability

1335
00:51:47,460 --> 00:51:51,240
deniability and the recipient anonymity

1336
00:51:51,240 --> 00:51:53,760
since some of them are similar to those

1337
00:51:53,760 --> 00:51:57,900
of AMF Airway only show the differences

1338
00:51:57,900 --> 00:52:02,640
firstly hdmf considers Corruption of

1339
00:52:02,640 --> 00:52:05,540
multiple receivers

1340
00:52:05,540 --> 00:52:08,900
it's specifically is receiver binding

1341
00:52:08,900 --> 00:52:12,660
represents every crafted receivers not

1342
00:52:12,660 --> 00:52:15,240
not just a single receiver cannot

1343
00:52:15,240 --> 00:52:17,880
deceive the judge or or the other honest

1344
00:52:17,880 --> 00:52:21,300
receivers to frame the innocent standard

1345
00:52:21,300 --> 00:52:24,180
and its receiver compromise deniability

1346
00:52:24,180 --> 00:52:27,480
requires that any crafted users in the

1347
00:52:27,480 --> 00:52:30,359
receiver said not just a single receiver

1348
00:52:30,359 --> 00:52:33,300
are able to create a signature such that

1349
00:52:33,300 --> 00:52:36,180
for other parties which assist to this

1350
00:52:36,180 --> 00:52:38,300
crafted user secret Keys it is

1351
00:52:38,300 --> 00:52:40,740
indistinguishable from honestly

1352
00:52:40,740 --> 00:52:43,640
generated signatures

1353
00:52:43,640 --> 00:52:47,760
and secondly hdmf considers receivers

1354
00:52:47,760 --> 00:52:50,460
anonymity it requires that everyone

1355
00:52:50,460 --> 00:52:52,859
except for the receivers in the receiver

1356
00:52:52,859 --> 00:52:53,839
set

1357
00:52:53,839 --> 00:52:56,520
including the judge cannot tell which

1358
00:52:56,520 --> 00:52:58,559
receiver sent a signature is generated

1359
00:52:58,559 --> 00:53:00,920
for

1360
00:53:00,960 --> 00:53:04,859
and thirdly hdmf supports adaptive

1361
00:53:04,859 --> 00:53:07,980
Security in all our security models the

1362
00:53:07,980 --> 00:53:10,260
adversary is allowed to crop the

1363
00:53:10,260 --> 00:53:13,260
receivers adaptively

1364
00:53:13,260 --> 00:53:16,440
finally I will show how to construct an

1365
00:53:16,440 --> 00:53:19,140
hdmf scheme

1366
00:53:19,140 --> 00:53:21,540
in order to provide a framework of

1367
00:53:21,540 --> 00:53:24,059
constructing hdmf we introduce a new

1368
00:53:24,059 --> 00:53:26,640
primitive this primitive is a variance

1369
00:53:26,640 --> 00:53:29,579
of key encapsulation mechanism

1370
00:53:29,579 --> 00:53:31,980
firstly it can be interpreted from the

1371
00:53:31,980 --> 00:53:34,500
perspective of hash Pro system and

1372
00:53:34,500 --> 00:53:37,440
secondly for some special relations like

1373
00:53:37,440 --> 00:53:40,440
the regression of public Securities the

1374
00:53:40,440 --> 00:53:42,540
regression of the encapsulated keys and

1375
00:53:42,540 --> 00:53:44,819
the server texts will require there

1376
00:53:44,819 --> 00:53:47,940
exists corresponding Sigma protocols we

1377
00:53:47,940 --> 00:53:50,760
call this Frame this primitive HPS based

1378
00:53:50,760 --> 00:53:53,640
cam supporting Sigma protocols or HPS

1379
00:53:53,640 --> 00:53:56,700
cam Sigma in short

1380
00:53:56,700 --> 00:54:00,240
technically HPS cam Sigma contains its

1381
00:54:00,240 --> 00:54:03,059
algorithms set up of outputs of public

1382
00:54:03,059 --> 00:54:05,220
parameter and key generation algorithm

1383
00:54:05,220 --> 00:54:08,300
outputs a pair of public and secret keys

1384
00:54:08,300 --> 00:54:11,220
encapses algorithm outputs a well-formed

1385
00:54:11,220 --> 00:54:13,020
cipher text and the encapsody star

1386
00:54:13,020 --> 00:54:15,720
output a zephyr text which can be well

1387
00:54:15,720 --> 00:54:18,900
formed or uniformed and in keep in Cape

1388
00:54:18,900 --> 00:54:21,960
key will output an encapsulated key

1389
00:54:21,960 --> 00:54:24,839
the cap algorithm will decapitulate a

1390
00:54:24,839 --> 00:54:27,720
ciphertext to recover its encapsulated

1391
00:54:27,720 --> 00:54:31,079
key in addition check key and check

1392
00:54:31,079 --> 00:54:34,740
serial algorithm will check whether a

1393
00:54:34,740 --> 00:54:38,040
key pair or server text is a well-formed

1394
00:54:38,040 --> 00:54:40,880
respectively

1395
00:54:40,980 --> 00:54:43,800
we also require that there exists Sigma

1396
00:54:43,800 --> 00:54:45,599
protocols for the following irrigations

1397
00:54:45,599 --> 00:54:49,859
the first one is a is a relation proving

1398
00:54:49,859 --> 00:54:52,260
that the keys are valid and the second

1399
00:54:52,260 --> 00:54:55,619
one rck is a relation proving that the

1400
00:54:55,619 --> 00:54:59,160
ciphertext and the key are generated via

1401
00:54:59,160 --> 00:55:02,460
encapsi and in cap K and the last one as

1402
00:55:02,460 --> 00:55:04,740
a star is a relation proving that the

1403
00:55:04,740 --> 00:55:09,660
ciphertext is generated by encapsister

1404
00:55:09,660 --> 00:55:12,000
we also require other some other

1405
00:55:12,000 --> 00:55:13,099
properties

1406
00:55:13,099 --> 00:55:15,260
universality and explain

1407
00:55:15,260 --> 00:55:17,640
unexplainability in distinguishability

1408
00:55:17,640 --> 00:55:20,579
SK second pre-image resistance and

1409
00:55:20,579 --> 00:55:23,579
smoothness please refer to our paper and

1410
00:55:23,579 --> 00:55:25,680
imprints for the definitions of these

1411
00:55:25,680 --> 00:55:27,839
properties and the Concrete Construction

1412
00:55:27,839 --> 00:55:31,099
based on ddh

1413
00:55:32,099 --> 00:55:35,640
so now take Taking HPS cam Sigma as a

1414
00:55:35,640 --> 00:55:38,000
building block we can construct

1415
00:55:38,000 --> 00:55:41,579
agmfs photos the setup algorithm is just

1416
00:55:41,579 --> 00:55:45,180
a setup algorithm of HPS cam Sigma and

1417
00:55:45,180 --> 00:55:47,160
the key generation algorithm of Judge

1418
00:55:47,160 --> 00:55:49,380
end users are just the key generation

1419
00:55:49,380 --> 00:55:54,119
algorithm kg of HPS cam Sigma

1420
00:55:54,119 --> 00:55:56,579
to save time here we only show the

1421
00:55:56,579 --> 00:56:01,680
algorithm Frank Works Frank will invoke

1422
00:56:01,680 --> 00:56:04,859
in cap C to generate a several text then

1423
00:56:04,859 --> 00:56:07,980
it costs in Cape K with the judge and

1424
00:56:07,980 --> 00:56:10,920
the receivers corresponding public keys

1425
00:56:10,920 --> 00:56:13,800
to generate the corresponding

1426
00:56:13,800 --> 00:56:16,079
encapsulated Keys using the same

1427
00:56:16,079 --> 00:56:20,160
Randomness R next it calls a music to

1428
00:56:20,160 --> 00:56:22,380
generate the proof which we will explain

1429
00:56:22,380 --> 00:56:24,839
in more details later

1430
00:56:24,839 --> 00:56:27,720
finally the signature includes the Music

1431
00:56:27,720 --> 00:56:30,540
proof Pi the ciphertext and other

1432
00:56:30,540 --> 00:56:33,660
encapsulated keys

1433
00:56:33,660 --> 00:56:36,000
the three forged algorithms are modified

1434
00:56:36,000 --> 00:56:38,579
from the Frank algorithm to guarantee

1435
00:56:38,579 --> 00:56:40,500
deniability in different compromised

1436
00:56:40,500 --> 00:56:41,640
scenarios

1437
00:56:41,640 --> 00:56:44,700
here the ciphertexts are generated by

1438
00:56:44,700 --> 00:56:47,640
income system and some encapsulated keys

1439
00:56:47,640 --> 00:56:52,460
okay are randomly chosen from the set

1440
00:56:53,579 --> 00:56:55,680
here we provide a high level description

1441
00:56:55,680 --> 00:56:58,200
of the regression R for which we can get

1442
00:56:58,200 --> 00:57:00,119
a Mythic proof

1443
00:57:00,119 --> 00:57:02,700
the regression is built from the three

1444
00:57:02,700 --> 00:57:06,900
relations of is rck and RC star from HPS

1445
00:57:06,900 --> 00:57:08,819
cam Sigma

1446
00:57:08,819 --> 00:57:12,359
where I see is andrck are used to

1447
00:57:12,359 --> 00:57:15,119
guarantee accountability of a gmf and

1448
00:57:15,119 --> 00:57:17,339
the assistance is for denability

1449
00:57:17,339 --> 00:57:19,800
as as we require there are Sigma

1450
00:57:19,800 --> 00:57:22,260
protocols for these sub-regations we can

1451
00:57:22,260 --> 00:57:25,380
construct a Lasik use using the end or

1452
00:57:25,380 --> 00:57:27,720
composition techniques and applying the

1453
00:57:27,720 --> 00:57:30,740
phase Champion transform

1454
00:57:30,960 --> 00:57:33,900
for the security of agmf we have the

1455
00:57:33,900 --> 00:57:36,420
following theorem which based the

1456
00:57:36,420 --> 00:57:39,660
security of agmf on the security of HPS

1457
00:57:39,660 --> 00:57:42,960
cam Sigma and the security of the first

1458
00:57:42,960 --> 00:57:46,020
generation process term

1459
00:57:46,020 --> 00:57:48,839
additionally we present a lower amount

1460
00:57:48,839 --> 00:57:51,900
of the signature size in agmf our

1461
00:57:51,900 --> 00:57:54,780
analysis shows that every hdmf with

1462
00:57:54,780 --> 00:57:57,059
receiver binding and receiver compromise

1463
00:57:57,059 --> 00:58:00,119
denability must have a signature size at

1464
00:58:00,119 --> 00:58:02,400
least winner in the number end of the

1465
00:58:02,400 --> 00:58:03,960
members in s

1466
00:58:03,960 --> 00:58:07,260
and noticeably the signature size of our

1467
00:58:07,260 --> 00:58:10,079
construction achieves this bound thus is

1468
00:58:10,079 --> 00:58:13,260
almost optimal

1469
00:58:13,260 --> 00:58:16,880
here are some references

1470
00:58:17,220 --> 00:58:19,800
and that's all my presentation if you

1471
00:58:19,800 --> 00:58:22,260
have any question please feel free to

1472
00:58:22,260 --> 00:58:24,359
contact the authors thanks for your

1473
00:58:24,359 --> 00:58:26,779
listening

1474
00:58:33,119 --> 00:58:36,000
so you're not take questions okay

1475
00:58:36,000 --> 00:58:40,319
so let's go so this closes the session

1476
00:58:40,319 --> 00:58:42,180
so now we have a coffee break and we

1477
00:58:42,180 --> 00:58:44,520
will continue in half an hour

1478
00:58:44,520 --> 00:58:47,119
thank you

