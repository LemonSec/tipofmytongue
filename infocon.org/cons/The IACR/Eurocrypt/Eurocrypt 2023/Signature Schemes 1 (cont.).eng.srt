1
00:00:00,299 --> 00:00:03,380
signature schemes one session

2
00:00:03,380 --> 00:00:06,779
so we have two more exciting talks

3
00:00:06,779 --> 00:00:10,080
before lunch so the first talk is

4
00:00:10,080 --> 00:00:11,940
chopsticks

5
00:00:11,940 --> 00:00:14,400
Fork free two round multi-signatures

6
00:00:14,400 --> 00:00:17,220
from non-atriptic assumptions and that's

7
00:00:17,220 --> 00:00:20,640
by jashin pan and Benedict Wagner and

8
00:00:20,640 --> 00:00:24,020
Benedict will give the talk

9
00:00:25,080 --> 00:00:27,900
yeah thank you I think the audience does

10
00:00:27,900 --> 00:00:30,359
not see this light

11
00:00:30,359 --> 00:00:33,859
right so we need to talk

12
00:00:33,899 --> 00:00:37,219
we need to slides

13
00:00:38,219 --> 00:00:40,860
I I will check

14
00:00:40,860 --> 00:00:42,420
in the already

15
00:00:42,420 --> 00:00:47,120
okay all right slides are coming up

16
00:01:07,500 --> 00:01:09,600
all right here we go yeah Benedict cool

17
00:01:09,600 --> 00:01:11,700
yeah thanks for the introduction so this

18
00:01:11,700 --> 00:01:14,040
is uh this paper is called Chopsticks is

19
00:01:14,040 --> 00:01:16,260
about two round multi-signatures and how

20
00:01:16,260 --> 00:01:18,600
to avoid the forking Lemma and this is

21
00:01:18,600 --> 00:01:22,080
Joint work with kyoshin pan so yeah let

22
00:01:22,080 --> 00:01:24,720
me first introduce multi-signatures what

23
00:01:24,720 --> 00:01:26,580
are multi-signatures in the

24
00:01:26,580 --> 00:01:28,799
multi-signature scheme we have a group

25
00:01:28,799 --> 00:01:31,020
of signers and they all have their

26
00:01:31,020 --> 00:01:33,299
independently generated public keys and

27
00:01:33,299 --> 00:01:35,640
secret keys and now they come together

28
00:01:35,640 --> 00:01:37,860
to sign a message

29
00:01:37,860 --> 00:01:40,200
and to do that they may interact in some

30
00:01:40,200 --> 00:01:42,840
protocol and after that output a

31
00:01:42,840 --> 00:01:45,240
signature now you can verify this

32
00:01:45,240 --> 00:01:47,759
signature using the list of their public

33
00:01:47,759 --> 00:01:51,060
keys okay and intuitively the signature

34
00:01:51,060 --> 00:01:53,759
should sort of certify that all of these

35
00:01:53,759 --> 00:01:55,740
parties participated in the signing

36
00:01:55,740 --> 00:01:58,799
process so it should not be possible for

37
00:01:58,799 --> 00:02:02,579
you to Output a signature without

38
00:02:02,579 --> 00:02:04,799
interacting with one of these parties

39
00:02:04,799 --> 00:02:07,860
okay and this can be formalized by some

40
00:02:07,860 --> 00:02:10,258
notion of unforgeability which is very

41
00:02:10,258 --> 00:02:12,239
similar to The Standard notion for

42
00:02:12,239 --> 00:02:14,879
digital signatures but I won't go into

43
00:02:14,879 --> 00:02:17,280
detail here so why is this primitive

44
00:02:17,280 --> 00:02:19,920
useful well one application comes from

45
00:02:19,920 --> 00:02:22,560
the cryptocurrency space so this this

46
00:02:22,560 --> 00:02:24,300
group of signers could be a group of

47
00:02:24,300 --> 00:02:26,700
users that share the ownership of some

48
00:02:26,700 --> 00:02:28,800
coins and now they want to sign a

49
00:02:28,800 --> 00:02:31,739
transaction spending these coins

50
00:02:31,739 --> 00:02:34,680
okay so that's that's the Primitive now

51
00:02:34,680 --> 00:02:37,260
I can give you a very simple and almost

52
00:02:37,260 --> 00:02:39,720
trivial construction of this just let

53
00:02:39,720 --> 00:02:42,420
every signer sign this the message

54
00:02:42,420 --> 00:02:44,459
locally and then concatenate the

55
00:02:44,459 --> 00:02:47,220
signatures so this is a construction it

56
00:02:47,220 --> 00:02:50,519
is actually secure but as the number of

57
00:02:50,519 --> 00:02:53,340
sinus grows large also our signatures

58
00:02:53,340 --> 00:02:57,200
come launch so uh with that trivial

59
00:02:57,200 --> 00:02:59,459
multi-signature in mind it's really

60
00:02:59,459 --> 00:03:01,620
necessary to clarify the goals that we

61
00:03:01,620 --> 00:03:03,599
have when we construct these multi

62
00:03:03,599 --> 00:03:05,099
signatures

63
00:03:05,099 --> 00:03:07,140
and in terms of efficiency I already

64
00:03:07,140 --> 00:03:08,879
mentioned this the signature size is

65
00:03:08,879 --> 00:03:10,560
something we care about this trivial

66
00:03:10,560 --> 00:03:13,200
multi-signature is not what we want we

67
00:03:13,200 --> 00:03:15,720
want compact signatures of course this

68
00:03:15,720 --> 00:03:17,879
is an interactive protocol so we may

69
00:03:17,879 --> 00:03:19,980
also care about things like

70
00:03:19,980 --> 00:03:21,599
communication complexity around

71
00:03:21,599 --> 00:03:23,700
complexity or the computational

72
00:03:23,700 --> 00:03:25,680
complexity

73
00:03:25,680 --> 00:03:27,780
okay and now in terms of functionality

74
00:03:27,780 --> 00:03:29,640
there are two properties that I want to

75
00:03:29,640 --> 00:03:31,920
mention that sort of enhance the

76
00:03:31,920 --> 00:03:33,840
functionality that I that I described

77
00:03:33,840 --> 00:03:35,700
before the first is called key

78
00:03:35,700 --> 00:03:37,620
aggregation and this is a feature that

79
00:03:37,620 --> 00:03:40,379
you want to have typically it says that

80
00:03:40,379 --> 00:03:41,940
you can not only have a compact

81
00:03:41,940 --> 00:03:44,099
signature you can also have a compact

82
00:03:44,099 --> 00:03:46,860
form of representing your list of keys

83
00:03:46,860 --> 00:03:49,019
so what does that mean we take the list

84
00:03:49,019 --> 00:03:52,620
of public keys and we can aggregate them

85
00:03:52,620 --> 00:03:55,019
into a short aggregated public key and

86
00:03:55,019 --> 00:03:56,879
then you just verify with respect to

87
00:03:56,879 --> 00:03:58,560
this public key

88
00:03:58,560 --> 00:04:01,140
so this public key encodes sort of all

89
00:04:01,140 --> 00:04:03,060
these public keys and can be used for

90
00:04:03,060 --> 00:04:04,680
verification

91
00:04:04,680 --> 00:04:07,080
another additional functionality feature

92
00:04:07,080 --> 00:04:10,500
that we may want is pre-processing here

93
00:04:10,500 --> 00:04:13,920
the entire interaction does not depend

94
00:04:13,920 --> 00:04:15,840
on the message except maybe the last

95
00:04:15,840 --> 00:04:18,298
round so you can pre-process the first

96
00:04:18,298 --> 00:04:19,978
few steps

97
00:04:19,978 --> 00:04:22,580
and then of course we need some security

98
00:04:22,580 --> 00:04:24,960
requirements and in terms of security

99
00:04:24,960 --> 00:04:26,699
this is pretty much just for any other

100
00:04:26,699 --> 00:04:28,680
cryptographic primitive we care about

101
00:04:28,680 --> 00:04:30,840
the assumptions that we use we want

102
00:04:30,840 --> 00:04:32,220
minimal assumptions that are well

103
00:04:32,220 --> 00:04:35,100
studied and we also care about the

104
00:04:35,100 --> 00:04:37,620
security law loss if we treat the

105
00:04:37,620 --> 00:04:39,840
security reduction or the proof as a

106
00:04:39,840 --> 00:04:42,180
sort of a quantitative statement

107
00:04:42,180 --> 00:04:44,880
okay with these goals in mind let's look

108
00:04:44,880 --> 00:04:46,440
at the state of the art what do we

109
00:04:46,440 --> 00:04:48,900
already have and here I should clarify I

110
00:04:48,900 --> 00:04:51,600
only look at schemes in the discrete

111
00:04:51,600 --> 00:04:54,240
logarithm setting I don't allow pairings

112
00:04:54,240 --> 00:04:56,340
here and especially I don't look at

113
00:04:56,340 --> 00:04:58,020
other assumptions like lattice based

114
00:04:58,020 --> 00:05:00,479
constructions or something like that

115
00:05:00,479 --> 00:05:03,600
we have a very prominent three-round

116
00:05:03,600 --> 00:05:06,360
scheme by bilara and Nevin they are

117
00:05:06,360 --> 00:05:08,280
introduced the scheme which is basically

118
00:05:08,280 --> 00:05:11,460
a very end of schnauer signatures turned

119
00:05:11,460 --> 00:05:14,160
to the multi-signature setting and as

120
00:05:14,160 --> 00:05:15,720
for Schneider this is proven under the

121
00:05:15,720 --> 00:05:18,240
d-lock assumption and as for snow they

122
00:05:18,240 --> 00:05:20,400
use rewinding which leads to this kind

123
00:05:20,400 --> 00:05:23,820
of security bound so here Epsilon is the

124
00:05:23,820 --> 00:05:26,820
advantage of the adversary and Epsilon

125
00:05:26,820 --> 00:05:29,280
Prime is the advantage of the reduction

126
00:05:29,280 --> 00:05:31,560
against the t-lock assumption

127
00:05:31,560 --> 00:05:33,660
then in the same paper they give a

128
00:05:33,660 --> 00:05:35,160
construction which is tightly secure

129
00:05:35,160 --> 00:05:39,060
based on ddh and you can sort of tweak

130
00:05:39,060 --> 00:05:41,340
this these two constructions a bit and

131
00:05:41,340 --> 00:05:43,860
get the music scheme and its tight

132
00:05:43,860 --> 00:05:46,380
variant the advantage of this scheme is

133
00:05:46,380 --> 00:05:48,539
that it allows for key aggregation so

134
00:05:48,539 --> 00:05:50,220
this key aggregation feature that I

135
00:05:50,220 --> 00:05:52,800
described before these schemes have it

136
00:05:52,800 --> 00:05:55,020
the price that they pay is now they need

137
00:05:55,020 --> 00:05:57,600
to apply rewinding and the forking Lemma

138
00:05:57,600 --> 00:05:59,759
twice so they take the adversary rewind

139
00:05:59,759 --> 00:06:02,100
it and then take the result and Rewind

140
00:06:02,100 --> 00:06:04,380
it again this leads to this security

141
00:06:04,380 --> 00:06:07,860
bound with Epsilon to the power of four

142
00:06:07,860 --> 00:06:10,199
okay now looking at two run schemes

143
00:06:10,199 --> 00:06:12,180
there's a very prominent scheme called

144
00:06:12,180 --> 00:06:15,479
music 2. which also has this nested

145
00:06:15,479 --> 00:06:17,580
rewinding strategy and it even comes

146
00:06:17,580 --> 00:06:19,080
from a stronger assumption the one more

147
00:06:19,080 --> 00:06:21,000
discrete logarithm assumption

148
00:06:21,000 --> 00:06:24,539
and then there's a scheme that is hpms

149
00:06:24,539 --> 00:06:26,940
and it's basically asked for music too

150
00:06:26,940 --> 00:06:29,520
just the assumption is uh is weaker you

151
00:06:29,520 --> 00:06:31,860
have the d-lock Assumption here okay so

152
00:06:31,860 --> 00:06:34,020
if we look at this situation then what

153
00:06:34,020 --> 00:06:35,759
we see this that especially the security

154
00:06:35,759 --> 00:06:38,460
bounds for the two round schemes are

155
00:06:38,460 --> 00:06:40,800
completely useless if we treat this as a

156
00:06:40,800 --> 00:06:42,479
quantitative statement so let's say you

157
00:06:42,479 --> 00:06:45,120
have a standardized curve and you use

158
00:06:45,120 --> 00:06:47,940
that to implement your scheme then these

159
00:06:47,940 --> 00:06:49,560
bounds don't give you any meaningful

160
00:06:49,560 --> 00:06:52,080
security guarantee and this comes from

161
00:06:52,080 --> 00:06:54,060
the rebinding or even this nested

162
00:06:54,060 --> 00:06:56,460
rewinding strategy so our question was

163
00:06:56,460 --> 00:06:58,979
is this rewinding inherent in the two

164
00:06:58,979 --> 00:07:00,840
round schemes or can we have a scheme

165
00:07:00,840 --> 00:07:03,000
that does not use this rewinding

166
00:07:03,000 --> 00:07:04,259
strategy

167
00:07:04,259 --> 00:07:07,139
okay so concretely what we wanted is we

168
00:07:07,139 --> 00:07:10,080
wanted a scheme that is two rounds

169
00:07:10,080 --> 00:07:12,360
it should come from non-interactive

170
00:07:12,360 --> 00:07:14,100
assumption I don't want to make the

171
00:07:14,100 --> 00:07:15,720
assumption that the scheme is secure or

172
00:07:15,720 --> 00:07:17,460
something like that

173
00:07:17,460 --> 00:07:18,060
um

174
00:07:18,060 --> 00:07:22,259
and ideally I avoid this rewinding and

175
00:07:22,259 --> 00:07:24,240
even better I get a tightly secure

176
00:07:24,240 --> 00:07:26,580
scheme so that was our goal and we

177
00:07:26,580 --> 00:07:29,880
actually achieved this so with our two

178
00:07:29,880 --> 00:07:33,360
two schemes that we propose we have two

179
00:07:33,360 --> 00:07:35,940
schemes based on the ddh Assumption both

180
00:07:35,940 --> 00:07:38,639
of them have two rounds

181
00:07:38,639 --> 00:07:41,460
and the difference is that one scheme is

182
00:07:41,460 --> 00:07:43,440
not fully tied it's it has a security

183
00:07:43,440 --> 00:07:45,180
loss proportional to the number of

184
00:07:45,180 --> 00:07:46,919
signing queries that you have in the

185
00:07:46,919 --> 00:07:49,740
security game but it allows to aggregate

186
00:07:49,740 --> 00:07:52,380
your keys and the other scheme is fully

187
00:07:52,380 --> 00:07:54,060
tight

188
00:07:54,060 --> 00:07:56,340
okay so for the rest of the talk I want

189
00:07:56,340 --> 00:07:59,520
to talk a bit about the technical

190
00:07:59,520 --> 00:08:02,639
details but I don't want to go too much

191
00:08:02,639 --> 00:08:04,500
into detail especially because I don't

192
00:08:04,500 --> 00:08:06,539
have enough time for that if you are

193
00:08:06,539 --> 00:08:08,699
interested in the technical details come

194
00:08:08,699 --> 00:08:10,800
talk to me I'm happy to talk about it or

195
00:08:10,800 --> 00:08:12,840
look into the paper

196
00:08:12,840 --> 00:08:14,720
okay so we want to construct

197
00:08:14,720 --> 00:08:17,460
multi-signatures and a good start is to

198
00:08:17,460 --> 00:08:19,440
look at what what has been done for

199
00:08:19,440 --> 00:08:21,300
standard signatures so how can we

200
00:08:21,300 --> 00:08:24,120
construct standard signatures and one

201
00:08:24,120 --> 00:08:25,919
way to do that is to start with an

202
00:08:25,919 --> 00:08:27,800
identification scheme

203
00:08:27,800 --> 00:08:30,180
for example the schnauer identification

204
00:08:30,180 --> 00:08:31,259
scheme

205
00:08:31,259 --> 00:08:33,479
so here you don't have to understand all

206
00:08:33,479 --> 00:08:35,219
the details if you're not familiar with

207
00:08:35,219 --> 00:08:37,200
it just let me recall the high level

208
00:08:37,200 --> 00:08:40,080
structure first there's approver that

209
00:08:40,080 --> 00:08:42,958
sends a non-sr it gets packet challenge

210
00:08:42,958 --> 00:08:45,779
C from the verifier and then it has to

211
00:08:45,779 --> 00:08:48,360
Output some response s

212
00:08:48,360 --> 00:08:50,339
again the details are not important but

213
00:08:50,339 --> 00:08:52,500
what you may notice if you are familiar

214
00:08:52,500 --> 00:08:55,140
with Schnur signatures internal

215
00:08:55,140 --> 00:08:57,240
identification is that I replace certain

216
00:08:57,240 --> 00:09:00,779
parts with this linear function f here

217
00:09:00,779 --> 00:09:04,920
so this will come in handy later

218
00:09:04,920 --> 00:09:07,560
and now what bilara and Evan showed is

219
00:09:07,560 --> 00:09:09,899
you can turn this into a multi-signature

220
00:09:09,899 --> 00:09:12,839
scheme and the rough idea is that every

221
00:09:12,839 --> 00:09:15,000
signer sort of locally runs this channel

222
00:09:15,000 --> 00:09:17,459
identification protocol

223
00:09:17,459 --> 00:09:20,040
but after each step you take these

224
00:09:20,040 --> 00:09:21,959
messages for example the nonsense and

225
00:09:21,959 --> 00:09:24,899
you aggregate them and because this is

226
00:09:24,899 --> 00:09:28,380
all all nice and linear this this sort

227
00:09:28,380 --> 00:09:30,000
of works out

228
00:09:30,000 --> 00:09:32,339
okay but what we also see here is that

229
00:09:32,339 --> 00:09:34,620
there's an initial round where each

230
00:09:34,620 --> 00:09:36,600
party sends the hash of their nonsense

231
00:09:36,600 --> 00:09:39,300
and this is very important it makes sure

232
00:09:39,300 --> 00:09:41,100
that the nonses are sort of independent

233
00:09:41,100 --> 00:09:43,500
and if you don't have this round there's

234
00:09:43,500 --> 00:09:45,899
actually an attack against the scheme

235
00:09:45,899 --> 00:09:48,120
so that's the bilara Navin scheme and

236
00:09:48,120 --> 00:09:50,100
the same structure is also what happens

237
00:09:50,100 --> 00:09:51,959
in the music scheme

238
00:09:51,959 --> 00:09:54,300
okay so again this is this is the scheme

239
00:09:54,300 --> 00:09:56,279
I just write it now from the perspective

240
00:09:56,279 --> 00:09:59,339
of one signer what are the messages that

241
00:09:59,339 --> 00:10:01,380
one signer sends

242
00:10:01,380 --> 00:10:03,899
and if we look at the drawbacks then

243
00:10:03,899 --> 00:10:05,880
this is a three round scheme we want the

244
00:10:05,880 --> 00:10:07,740
two round scheme so that's one thing we

245
00:10:07,740 --> 00:10:10,560
have to improve and the second problem

246
00:10:10,560 --> 00:10:12,899
is that it uses rewinding right so it's

247
00:10:12,899 --> 00:10:15,420
based on Entre and for sure if you want

248
00:10:15,420 --> 00:10:18,540
to take the forgery and use it to solve

249
00:10:18,540 --> 00:10:20,580
the d-log problem you need a rewinding

250
00:10:20,580 --> 00:10:22,320
step and the same holds true for these

251
00:10:22,320 --> 00:10:24,120
multi-signatures

252
00:10:24,120 --> 00:10:26,760
okay so uh these are the two problems

253
00:10:26,760 --> 00:10:28,860
and actually they have been studied and

254
00:10:28,860 --> 00:10:32,160
and people try to remove that one way to

255
00:10:32,160 --> 00:10:34,440
remove the rewinding is to use this

256
00:10:34,440 --> 00:10:36,600
technique called glossy identification

257
00:10:36,600 --> 00:10:38,779
this is a technique used in the

258
00:10:38,779 --> 00:10:41,220
literature on tightly secure signatures

259
00:10:41,220 --> 00:10:43,620
and the idea is that you replace the

260
00:10:43,620 --> 00:10:46,440
instantiation of this function f with a

261
00:10:46,440 --> 00:10:48,300
non-bijective function

262
00:10:48,300 --> 00:10:51,180
so that's all you change everything the

263
00:10:51,180 --> 00:10:53,760
red the rest stays the same and you can

264
00:10:53,760 --> 00:10:55,800
actually show now that you get rid of

265
00:10:55,800 --> 00:10:57,540
the rewinding but of course we didn't

266
00:10:57,540 --> 00:11:01,440
change much we still have three rounds

267
00:11:01,440 --> 00:11:03,360
okay so now let's think about the three

268
00:11:03,360 --> 00:11:04,980
rounds and in particular this first

269
00:11:04,980 --> 00:11:07,440
round where everyone commits to the to

270
00:11:07,440 --> 00:11:10,260
the nons this is sort of what's annoying

271
00:11:10,260 --> 00:11:14,399
us and here there's a very cool work

272
00:11:14,399 --> 00:11:17,700
from damgard and and others which uses

273
00:11:17,700 --> 00:11:19,740
homomorphic trapdoor commitments to get

274
00:11:19,740 --> 00:11:22,380
rid of this first round and the idea is

275
00:11:22,380 --> 00:11:24,300
that I want to make the nonsense

276
00:11:24,300 --> 00:11:25,920
independent of each other so I should

277
00:11:25,920 --> 00:11:29,100
hide them that's why I use a commitment

278
00:11:29,100 --> 00:11:31,200
and to make sure that I can still

279
00:11:31,200 --> 00:11:33,240
aggregate them I need a homomorphic

280
00:11:33,240 --> 00:11:34,440
commitment and then in the security

281
00:11:34,440 --> 00:11:37,320
proof I need an equivocation trapdoor

282
00:11:37,320 --> 00:11:40,620
okay so they get a two round scheme uh

283
00:11:40,620 --> 00:11:43,019
in in the lattice setting actually

284
00:11:43,019 --> 00:11:45,779
um but now the problem of this is it

285
00:11:45,779 --> 00:11:48,000
uses rewinding okay so an obvious

286
00:11:48,000 --> 00:11:49,680
question that you could have is can you

287
00:11:49,680 --> 00:11:51,959
combine these two ideas for example can

288
00:11:51,959 --> 00:11:54,600
we take the scheme by Dom got and others

289
00:11:54,600 --> 00:11:57,300
and just instantiate it with this new

290
00:11:57,300 --> 00:11:59,820
linear function that gives us a tight

291
00:11:59,820 --> 00:12:01,079
security

292
00:12:01,079 --> 00:12:03,060
but the problem is that this does not

293
00:12:03,060 --> 00:12:05,700
work and this has also been noticed in

294
00:12:05,700 --> 00:12:10,260
in downcut it at all's work so a problem

295
00:12:10,260 --> 00:12:11,940
is really that you have this trapdoor

296
00:12:11,940 --> 00:12:13,680
commitment and this can only be

297
00:12:13,680 --> 00:12:16,200
computationally binding so at some point

298
00:12:16,200 --> 00:12:18,240
you will reduce to The Binding notion of

299
00:12:18,240 --> 00:12:21,300
this crypto commitment and the only way

300
00:12:21,300 --> 00:12:23,640
you can sort of produce a collision

301
00:12:23,640 --> 00:12:25,620
there to to break binding is to use

302
00:12:25,620 --> 00:12:26,880
rewind

303
00:12:26,880 --> 00:12:29,160
even if you instantiate it with this new

304
00:12:29,160 --> 00:12:31,440
function okay so that brings me to the

305
00:12:31,440 --> 00:12:33,420
main challenges we had to solve in this

306
00:12:33,420 --> 00:12:35,519
work the first one is what I just

307
00:12:35,519 --> 00:12:37,740
explained so how can you combine these

308
00:12:37,740 --> 00:12:41,160
two these two techniques in a way that

309
00:12:41,160 --> 00:12:44,040
that gives us what we want a two round

310
00:12:44,040 --> 00:12:46,980
scheme that does not use rewinding and

311
00:12:46,980 --> 00:12:48,420
the Second Challenge and this is a bit

312
00:12:48,420 --> 00:12:50,880
subtle so how do we construct this

313
00:12:50,880 --> 00:12:53,100
commitment actually what I showed you

314
00:12:53,100 --> 00:12:54,959
this down guard and and others paper

315
00:12:54,959 --> 00:12:57,120
this is uh based in in the latter

316
00:12:57,120 --> 00:12:59,279
setting right and we don't have such a

317
00:12:59,279 --> 00:13:02,100
commitment in the discrete logarithm

318
00:13:02,100 --> 00:13:04,380
setting and if you think about the the

319
00:13:04,380 --> 00:13:06,120
properties that we want here for a while

320
00:13:06,120 --> 00:13:07,980
especially that we want to commit to

321
00:13:07,980 --> 00:13:09,839
group elements but then we want to

322
00:13:09,839 --> 00:13:13,560
equivocate and open the commitment to an

323
00:13:13,560 --> 00:13:15,720
arbitrary group element well the opening

324
00:13:15,720 --> 00:13:18,180
will be something like an exponent so

325
00:13:18,180 --> 00:13:21,120
this corresponds to intuitively at least

326
00:13:21,120 --> 00:13:22,980
a D Lock trapdoor and we don't have

327
00:13:22,980 --> 00:13:25,200
something like that so that's the two

328
00:13:25,200 --> 00:13:27,180
challenges we had to solve and I don't

329
00:13:27,180 --> 00:13:28,860
want to go too much into detail about

330
00:13:28,860 --> 00:13:31,380
how we how we solve them but let me give

331
00:13:31,380 --> 00:13:34,139
you two ideas that we use the first is

332
00:13:34,139 --> 00:13:37,019
well for the first challenge the problem

333
00:13:37,019 --> 00:13:39,320
was that the commitment was

334
00:13:39,320 --> 00:13:41,820
computationally binding if I have a

335
00:13:41,820 --> 00:13:43,440
statistically binding commitment

336
00:13:43,440 --> 00:13:45,000
everything works out but then I don't

337
00:13:45,000 --> 00:13:47,459
have an equivocation trap though and so

338
00:13:47,459 --> 00:13:49,800
what we the idea that we had is we

339
00:13:49,800 --> 00:13:52,620
require a dual mode commitment and if

340
00:13:52,620 --> 00:13:54,540
you combine this with other tricks you

341
00:13:54,540 --> 00:13:57,060
can actually make it work and depending

342
00:13:57,060 --> 00:13:58,740
on how you combine it with other tricks

343
00:13:58,740 --> 00:14:00,779
you get either tightly secure scheme or

344
00:14:00,779 --> 00:14:03,839
at least a scheme without rewinding

345
00:14:03,839 --> 00:14:07,380
okay but this of course has an impact on

346
00:14:07,380 --> 00:14:09,060
our Second Challenge now this gets even

347
00:14:09,060 --> 00:14:10,320
harder right

348
00:14:10,320 --> 00:14:13,079
okay and here the idea is that that we

349
00:14:13,079 --> 00:14:14,519
have to solve this problem so we don't

350
00:14:14,519 --> 00:14:16,800
come up with a d-lock chapter instead we

351
00:14:16,800 --> 00:14:19,019
say okay if we look at the reduction

352
00:14:19,019 --> 00:14:21,959
then we have we only have to open the

353
00:14:21,959 --> 00:14:24,600
the commitments to messages of a certain

354
00:14:24,600 --> 00:14:26,940
structure so instead what we require is

355
00:14:26,940 --> 00:14:29,459
not a full equivocation trap though we

356
00:14:29,459 --> 00:14:32,339
require a tractor that is weak in a

357
00:14:32,339 --> 00:14:33,660
sense that it allows us to open

358
00:14:33,660 --> 00:14:36,120
commitments to messages of a certain

359
00:14:36,120 --> 00:14:37,380
structure

360
00:14:37,380 --> 00:14:40,920
this is all I want to say about this

361
00:14:40,920 --> 00:14:43,560
okay so let me summarize what we have

362
00:14:43,560 --> 00:14:45,660
seen and uh

363
00:14:45,660 --> 00:14:47,399
yeah so so we have these two

364
00:14:47,399 --> 00:14:50,399
multi-signature schemes both uh two run

365
00:14:50,399 --> 00:14:52,980
schemes based on the ddh Assumption the

366
00:14:52,980 --> 00:14:54,779
first scheme has this Linear Security

367
00:14:54,779 --> 00:14:57,060
loss but at least it does not use

368
00:14:57,060 --> 00:15:00,000
rewinding and it has key aggregation the

369
00:15:00,000 --> 00:15:04,320
second scheme has a tightly secure proof

370
00:15:04,320 --> 00:15:06,240
has a tight proof

371
00:15:06,240 --> 00:15:09,120
okay so I want to finish with some open

372
00:15:09,120 --> 00:15:11,940
problems and if you have any ideas I'm

373
00:15:11,940 --> 00:15:14,279
happy to talk about this so the first

374
00:15:14,279 --> 00:15:16,019
obvious question is can you get the best

375
00:15:16,019 --> 00:15:18,839
out of the two worlds right so I want to

376
00:15:18,839 --> 00:15:20,940
have a scheme that is tightly secure and

377
00:15:20,940 --> 00:15:22,860
it has key aggregation at the same time

378
00:15:22,860 --> 00:15:24,959
and it's not clear to me how to do that

379
00:15:24,959 --> 00:15:26,459
but I think this is an interesting

380
00:15:26,459 --> 00:15:27,540
problem

381
00:15:27,540 --> 00:15:31,260
the second open problem I mentioned is

382
00:15:31,260 --> 00:15:33,120
pre-processing in the beginning where

383
00:15:33,120 --> 00:15:35,279
all but the last message of the protocol

384
00:15:35,279 --> 00:15:38,279
is independent of the message that you

385
00:15:38,279 --> 00:15:41,579
want to sign and um actually in our

386
00:15:41,579 --> 00:15:43,980
protocols you already need the message

387
00:15:43,980 --> 00:15:47,160
in the first step so our protocols don't

388
00:15:47,160 --> 00:15:49,620
have this feature would be cool if you

389
00:15:49,620 --> 00:15:51,839
can if you can have it and still have

390
00:15:51,839 --> 00:15:54,839
all the advantages of our protocols

391
00:15:54,839 --> 00:15:56,820
and the third problem and I think this

392
00:15:56,820 --> 00:15:59,399
is the most natural one so we have all

393
00:15:59,399 --> 00:16:01,680
of this based on ddh in sort of a

394
00:16:01,680 --> 00:16:03,899
discrete logarithm setting can you have

395
00:16:03,899 --> 00:16:05,940
this from other assumptions and I think

396
00:16:05,940 --> 00:16:08,040
what is very promising is from lattice

397
00:16:08,040 --> 00:16:09,779
assumptions because there we already

398
00:16:09,779 --> 00:16:11,699
have some kind of commitment that

399
00:16:11,699 --> 00:16:14,820
satisfies roughly what we want okay and

400
00:16:14,820 --> 00:16:17,160
with that I finished a bit early but

401
00:16:17,160 --> 00:16:20,060
yeah thank you

402
00:16:24,899 --> 00:16:27,540
thanks Benedict plenty of time for

403
00:16:27,540 --> 00:16:29,779
questions

404
00:16:30,240 --> 00:16:34,339
please come to the to the microphone

405
00:16:37,079 --> 00:16:39,779
can you come to the microphone please

406
00:16:39,779 --> 00:16:43,500
otherwise nobody can hear you

407
00:16:43,500 --> 00:16:46,100
sorry

408
00:16:46,500 --> 00:16:47,639
okay

409
00:16:47,639 --> 00:16:50,639
so if you compare apples to apples like

410
00:16:50,639 --> 00:16:52,800
you know you just pretend that this

411
00:16:52,800 --> 00:16:57,180
exact security claims are so I guess if

412
00:16:57,180 --> 00:16:58,860
you don't compare apples to apples right

413
00:16:58,860 --> 00:17:01,860
so you can have a view that these exact

414
00:17:01,860 --> 00:17:03,959
security claims are not so important

415
00:17:03,959 --> 00:17:06,720
that maybe it is still secure in spite

416
00:17:06,720 --> 00:17:08,579
of the fact that the

417
00:17:08,579 --> 00:17:10,380
that the

418
00:17:10,380 --> 00:17:12,299
um that there's a security loss

419
00:17:12,299 --> 00:17:15,780
introduction so in that case how much I

420
00:17:15,780 --> 00:17:18,540
I suspect that your your your signature

421
00:17:18,540 --> 00:17:22,020
is longer how much longer

422
00:17:22,020 --> 00:17:23,640
so the

423
00:17:23,640 --> 00:17:26,579
the non-tightly secure one is I think

424
00:17:26,579 --> 00:17:29,700
twice as long as music roughly in terms

425
00:17:29,700 --> 00:17:31,380
of number of group elements that you

426
00:17:31,380 --> 00:17:34,740
have in the signature and for the for

427
00:17:34,740 --> 00:17:36,660
the title is secure one it's an

428
00:17:36,660 --> 00:17:38,220
additional factor of two so that we

429
00:17:38,220 --> 00:17:40,320
would be something like four times the

430
00:17:40,320 --> 00:17:43,080
size of Music in terms of group elements

431
00:17:43,080 --> 00:17:45,299
that that's what I have in my head and

432
00:17:45,299 --> 00:17:49,200
the and the public keys are same or also

433
00:17:49,200 --> 00:17:52,740
the public keys for the uh for the

434
00:17:52,740 --> 00:17:55,320
non-tight scheme is the same for the

435
00:17:55,320 --> 00:17:57,480
tight scheme it's you you have basically

436
00:17:57,480 --> 00:18:00,660
two components two public keys and yeah

437
00:18:00,660 --> 00:18:04,919
so you have to oh wait so actually it's

438
00:18:04,919 --> 00:18:08,039
so so you have this additional uh factor

439
00:18:08,039 --> 00:18:09,900
of two that comes in when you go from

440
00:18:09,900 --> 00:18:12,480
this function this bijective function to

441
00:18:12,480 --> 00:18:15,539
the to the non-bijective function so I

442
00:18:15,539 --> 00:18:18,419
guess everything that I just said except

443
00:18:18,419 --> 00:18:20,340
for the public Keys multiplied by two

444
00:18:20,340 --> 00:18:23,640
okay so to summarize the non-type would

445
00:18:23,640 --> 00:18:25,679
be two times the size of a standard d

446
00:18:25,679 --> 00:18:28,020
low key and the tightly secure scheme

447
00:18:28,020 --> 00:18:30,740
would be four times

448
00:18:31,340 --> 00:18:34,020
and if you have interactive assumptions

449
00:18:34,020 --> 00:18:38,900
does it become much simpler or or not

450
00:18:39,660 --> 00:18:41,039
um

451
00:18:41,039 --> 00:18:42,840
I think the interactive assumptions

452
00:18:42,840 --> 00:18:46,440
would help you to to simulate the signer

453
00:18:46,440 --> 00:18:49,559
during the security proof uh what they

454
00:18:49,559 --> 00:18:51,360
don't help you is get rate getting rid

455
00:18:51,360 --> 00:18:55,340
of the rewinding right so I think maybe

456
00:18:55,340 --> 00:18:59,100
with less effort you can get a scheme

457
00:18:59,100 --> 00:19:02,719
but it's not obvious to me

458
00:19:03,840 --> 00:19:05,280
yeah

459
00:19:05,280 --> 00:19:07,740
I hope this answers your question

460
00:19:07,740 --> 00:19:10,320
yeah thanks for the nice result so you

461
00:19:10,320 --> 00:19:13,380
mentioned the uh weak trapdoor property

462
00:19:13,380 --> 00:19:15,840
so I'm quite interested in this so like

463
00:19:15,840 --> 00:19:17,880
don't you need a user a quick vocal

464
00:19:17,880 --> 00:19:20,340
commitment like you need some weaker

465
00:19:20,340 --> 00:19:21,419
property

466
00:19:21,419 --> 00:19:25,919
what do we need didn't get sorry the uh

467
00:19:25,919 --> 00:19:28,320
um so I was wondering if you only need

468
00:19:28,320 --> 00:19:31,380
any property uh that's weaker than the

469
00:19:31,380 --> 00:19:33,299
use of equival commitment scheme yeah

470
00:19:33,299 --> 00:19:36,299
okay so what I what I need is that I can

471
00:19:36,299 --> 00:19:38,480
I give you a commitment and then later

472
00:19:38,480 --> 00:19:42,720
you give me sort of a message of a

473
00:19:42,720 --> 00:19:44,880
certain structure and if it if the

474
00:19:44,880 --> 00:19:46,860
message has this certain structure then

475
00:19:46,860 --> 00:19:49,260
I can open the commitment to it

476
00:19:49,260 --> 00:19:51,140
okay okay so and and

477
00:19:51,140 --> 00:19:54,179
for those familiar with with like snow

478
00:19:54,179 --> 00:19:56,280
and things like that the structure

479
00:19:56,280 --> 00:19:58,799
corresponds to the output of the honest

480
00:19:58,799 --> 00:20:01,980
verifier zero knowledge simulator so I

481
00:20:01,980 --> 00:20:04,020
know that all my messages that I want to

482
00:20:04,020 --> 00:20:06,240
open the commitment to have this

483
00:20:06,240 --> 00:20:08,039
structure so I can prepare the

484
00:20:08,039 --> 00:20:09,660
commitment and especially I see so you

485
00:20:09,660 --> 00:20:11,460
don't need to equivalate to any message

486
00:20:11,460 --> 00:20:14,280
like no just any message that follows

487
00:20:14,280 --> 00:20:18,080
this structure I see okay thanks

488
00:20:18,179 --> 00:20:21,140
okay yeah let's thank Benedict again

489
00:20:21,140 --> 00:20:28,239
[Applause]

490
00:20:35,900 --> 00:20:39,600
all right so the next talk and the last

491
00:20:39,600 --> 00:20:42,780
one of this session is on threshold and

492
00:20:42,780 --> 00:20:44,940
multi-signature schemes from lineage

493
00:20:44,940 --> 00:20:49,620
functions by Stefano tesaro and by xinji

494
00:20:49,620 --> 00:20:54,559
Shu and jinshi will give the talk

495
00:20:55,559 --> 00:20:58,860
hello everyone yeah yeah so today I'm

496
00:20:58,860 --> 00:21:02,760
going to present of a paper threshold

497
00:21:02,760 --> 00:21:04,740
Molly signature schemes from linear hash

498
00:21:04,740 --> 00:21:06,600
functions it's a joint work with my

499
00:21:06,600 --> 00:21:09,660
advisor stephanotasaro

500
00:21:09,660 --> 00:21:11,760
um okay so before we start I would like

501
00:21:11,760 --> 00:21:14,760
to clarify that uh this talk is about

502
00:21:14,760 --> 00:21:17,160
pairing free threshold and Maori

503
00:21:17,160 --> 00:21:20,220
signatures and

504
00:21:20,220 --> 00:21:23,220
so comparing the parent-based scheme

505
00:21:23,220 --> 00:21:25,260
with parent-free schemes they later have

506
00:21:25,260 --> 00:21:29,179
a border Library support and then

507
00:21:29,179 --> 00:21:31,320
enables efficient and signature

508
00:21:31,320 --> 00:21:33,000
verification and requires weaker

509
00:21:33,000 --> 00:21:35,580
assumptions such as d-log and RAC

510
00:21:35,580 --> 00:21:37,500
so now I'm going to introduce a notion

511
00:21:37,500 --> 00:21:39,659
of my signatures and also structural

512
00:21:39,659 --> 00:21:42,000
signatures so in the setting of Maori

513
00:21:42,000 --> 00:21:44,100
signatures the user

514
00:21:44,100 --> 00:21:47,480
want to sign a message

515
00:21:54,539 --> 00:21:59,100
there's no animation okay okay can we

516
00:21:59,100 --> 00:22:02,600
switch to a pdf version Maybe

517
00:22:12,559 --> 00:22:15,240
so yeah so the in the setting of Maori

518
00:22:15,240 --> 00:22:17,460
signatures uh the user want to sign a

519
00:22:17,460 --> 00:22:18,480
message

520
00:22:18,480 --> 00:22:20,760
on my message should be signed by

521
00:22:20,760 --> 00:22:23,039
multiple signers where each signer has

522
00:22:23,039 --> 00:22:27,240
its own public and secret key pairs

523
00:22:27,240 --> 00:22:31,020
so uh and yeah so the user will send the

524
00:22:31,020 --> 00:22:33,120
message to one of designers and then all

525
00:22:33,120 --> 00:22:34,740
designers interact with each other

526
00:22:34,740 --> 00:22:37,559
before sending the signature back and a

527
00:22:37,559 --> 00:22:39,480
signature can be verified given all the

528
00:22:39,480 --> 00:22:41,460
public keys and we require the

529
00:22:41,460 --> 00:22:43,799
signatures to be much uh

530
00:22:43,799 --> 00:22:47,760
a smaller or independent of the size of

531
00:22:47,760 --> 00:22:50,520
the numbers of designers and then the

532
00:22:50,520 --> 00:22:52,700
security requirement is that the

533
00:22:52,700 --> 00:22:55,740
signatures is valid and only if to all

534
00:22:55,740 --> 00:22:57,780
designers are involved

535
00:22:57,780 --> 00:22:59,760
and in the Practical use of body

536
00:22:59,760 --> 00:23:02,880
signatures we also required as an ideal

537
00:23:02,880 --> 00:23:04,980
feature that called the key aggregation

538
00:23:04,980 --> 00:23:07,440
where so this feature allows us to

539
00:23:07,440 --> 00:23:10,380
aggregate like all the public Keys into

540
00:23:10,380 --> 00:23:11,880
a much shorter one which can be used for

541
00:23:11,880 --> 00:23:13,200
verification

542
00:23:13,200 --> 00:23:14,880
and in the setting of threshold

543
00:23:14,880 --> 00:23:16,700
signatures

544
00:23:16,700 --> 00:23:20,760
so it's slightly different where the

545
00:23:20,760 --> 00:23:22,440
public key and all the secret keys are

546
00:23:22,440 --> 00:23:24,659
generated by a distributed key

547
00:23:24,659 --> 00:23:27,360
generation protocol and once the user

548
00:23:27,360 --> 00:23:31,140
send a message to one of the signers a

549
00:23:31,140 --> 00:23:34,340
subset of significance list t

550
00:23:34,340 --> 00:23:38,100
was involved in the signing and send a

551
00:23:38,100 --> 00:23:39,659
message back to the user

552
00:23:39,659 --> 00:23:41,720
and then the signature can be verified

553
00:23:41,720 --> 00:23:44,100
used given the public key

554
00:23:44,100 --> 00:23:46,500
the security guarantees that the

555
00:23:46,500 --> 00:23:50,400
signature is valid even only if L is T

556
00:23:50,400 --> 00:23:52,020
sign is involved

557
00:23:52,020 --> 00:23:54,000
and the use of modest threshold

558
00:23:54,000 --> 00:23:55,740
signatures is to

559
00:23:55,740 --> 00:23:57,780
so the motivation of using that is to

560
00:23:57,780 --> 00:24:00,780
avoid single point failure and research

561
00:24:00,780 --> 00:24:03,240
in this area has become increasingly

562
00:24:03,240 --> 00:24:05,520
active due to its potential to enhance

563
00:24:05,520 --> 00:24:08,460
Securities in the crypto wallets and

564
00:24:08,460 --> 00:24:10,679
also the recent standardization efforts

565
00:24:10,679 --> 00:24:13,260
by nice and I

566
00:24:13,260 --> 00:24:15,900
ETF also highlights their importance

567
00:24:15,900 --> 00:24:20,400
so what is this work about so we

568
00:24:20,400 --> 00:24:23,940
so when investigating the existing group

569
00:24:23,940 --> 00:24:26,159
based constructions of modestick and

570
00:24:26,159 --> 00:24:28,799
threshold signatures we find that the

571
00:24:28,799 --> 00:24:31,500
security of the most efficient schemes

572
00:24:31,500 --> 00:24:33,960
all required is algebraic one more d-log

573
00:24:33,960 --> 00:24:36,360
assumption which is suspected to be

574
00:24:36,360 --> 00:24:37,860
stronger than the

575
00:24:37,860 --> 00:24:40,260
playing the log so in this work we're

576
00:24:40,260 --> 00:24:42,059
trying to like remove these assumptions

577
00:24:42,059 --> 00:24:45,000
so in this work we demonstrate that

578
00:24:45,000 --> 00:24:48,120
there's a way that we can convert these

579
00:24:48,120 --> 00:24:49,980
group based schemes into one that's

580
00:24:49,980 --> 00:24:51,960
based on linear hash function and

581
00:24:51,960 --> 00:24:55,020
moreover will show that the security is

582
00:24:55,020 --> 00:24:58,140
implied by the algebraic one more

583
00:24:58,140 --> 00:25:00,419
pre-image distance of the linear hash

584
00:25:00,419 --> 00:25:02,880
function so this algebraic one more PR

585
00:25:02,880 --> 00:25:07,020
is a new notion with proposed and then

586
00:25:07,020 --> 00:25:08,760
finally we show that

587
00:25:08,760 --> 00:25:10,860
such a linear hash function can be

588
00:25:10,860 --> 00:25:13,559
instantiated from the uh either the

589
00:25:13,559 --> 00:25:16,140
plane D log or the RSA assumption so as

590
00:25:16,140 --> 00:25:17,880
a result we give the new construction

591
00:25:17,880 --> 00:25:20,280
for this multi signatures and structural

592
00:25:20,280 --> 00:25:22,320
signatures that process the same

593
00:25:22,320 --> 00:25:25,559
property as the original scheme but

594
00:25:25,559 --> 00:25:28,260
based only on the log and RSA which

595
00:25:28,260 --> 00:25:31,200
solve several open problems in the area

596
00:25:31,200 --> 00:25:34,380
and when X give a detailed comparison

597
00:25:34,380 --> 00:25:37,980
between our work and the prior research

598
00:25:37,980 --> 00:25:40,260
so oh yeah let's start with the model

599
00:25:40,260 --> 00:25:43,860
signatures so so before that to note

600
00:25:43,860 --> 00:25:45,240
that all the

601
00:25:45,240 --> 00:25:46,799
so the security of all the scheme

602
00:25:46,799 --> 00:25:48,000
represent

603
00:25:48,000 --> 00:25:50,820
here include other owns they all proved

604
00:25:50,820 --> 00:25:53,760
in the random Oracle model so here the

605
00:25:53,760 --> 00:25:55,080
offline

606
00:25:55,080 --> 00:25:57,179
runs refers to the rounds that is

607
00:25:57,179 --> 00:25:59,220
independent of the message and the

608
00:25:59,220 --> 00:26:01,320
online round refers to the message in a

609
00:26:01,320 --> 00:26:02,720
dependent run

610
00:26:02,720 --> 00:26:06,480
So currently the best we can do here is

611
00:26:06,480 --> 00:26:08,940
one offline ROM plus one online round

612
00:26:08,940 --> 00:26:12,440
which is also refers to as partially

613
00:26:12,440 --> 00:26:14,880
non-interactive however in order to

614
00:26:14,880 --> 00:26:17,720
achieve this we require either the

615
00:26:17,720 --> 00:26:20,880
algebraic one of the log assumptions or

616
00:26:20,880 --> 00:26:23,279
assuming that the algebraic group model

617
00:26:23,279 --> 00:26:26,400
which we want to avoid uh

618
00:26:26,400 --> 00:26:30,500
in the prior uh works that requires

619
00:26:30,500 --> 00:26:34,380
weaker assumptions I need at least two

620
00:26:34,380 --> 00:26:36,240
online rounds which includes also the

621
00:26:36,240 --> 00:26:38,039
Chopstick scheme that present in the

622
00:26:38,039 --> 00:26:40,500
private talk but it should be noted that

623
00:26:40,500 --> 00:26:42,720
the advantages of Chopstick that it has

624
00:26:42,720 --> 00:26:46,700
a tight security reduction

625
00:26:46,980 --> 00:26:50,159
and it's also we're smashing it there

626
00:26:50,159 --> 00:26:52,860
are Isa based

627
00:26:52,860 --> 00:26:55,740
not distinctures but they either require

628
00:26:55,740 --> 00:26:58,039
a trusted third party to generate keys

629
00:26:58,039 --> 00:27:01,080
or they only support sequential signing

630
00:27:01,080 --> 00:27:04,620
which is undesirable for practical use

631
00:27:04,620 --> 00:27:07,320
for the threshold signatures the only

632
00:27:07,320 --> 00:27:11,100
existing like now interactive probably

633
00:27:11,100 --> 00:27:13,820
secure and group based schemes is Frost

634
00:27:13,820 --> 00:27:17,820
which which needs the algebraic one more

635
00:27:17,820 --> 00:27:19,980
dialogue assumption

636
00:27:19,980 --> 00:27:22,500
and the other scheme proposed by Shoop

637
00:27:22,500 --> 00:27:27,000
is a RSA based scheme they're assigning

638
00:27:27,000 --> 00:27:28,860
protocol consists of only an online

639
00:27:28,860 --> 00:27:30,480
round

640
00:27:30,480 --> 00:27:33,960
but their security is relies on the ddh

641
00:27:33,960 --> 00:27:36,360
Assumption and some integer Group which

642
00:27:36,360 --> 00:27:39,299
is a noun standard assumption

643
00:27:39,299 --> 00:27:42,080
so is

644
00:27:44,880 --> 00:27:46,460
yeah we also

645
00:27:46,460 --> 00:27:49,500
important to note that here we consider

646
00:27:49,500 --> 00:27:52,140
a strong security goal

647
00:27:52,140 --> 00:27:54,900
where the adversary is considered it's

648
00:27:54,900 --> 00:27:57,000
hard to afford the signature unless it

649
00:27:57,000 --> 00:27:59,880
lists T minus the number of corruption

650
00:27:59,880 --> 00:28:03,120
of site only sinus sign

651
00:28:03,120 --> 00:28:06,720
so for the weaker Security Source For

652
00:28:06,720 --> 00:28:09,179
example the shoes basic

653
00:28:09,179 --> 00:28:12,779
schemes requires only RSA but their

654
00:28:12,779 --> 00:28:14,520
security only guarantees that it's hard

655
00:28:14,520 --> 00:28:16,880
to forge a signature unless

656
00:28:16,880 --> 00:28:21,840
only like unless one only spot is signed

657
00:28:21,840 --> 00:28:25,200
furthermore all other RSA based special

658
00:28:25,200 --> 00:28:28,200
signatures not considered this stronger

659
00:28:28,200 --> 00:28:30,900
security goal although they consider

660
00:28:30,900 --> 00:28:32,580
other properties such as the pro

661
00:28:32,580 --> 00:28:35,220
activity robustness

662
00:28:35,220 --> 00:28:37,740
removing trusted dealers or the

663
00:28:37,740 --> 00:28:40,380
adapt-based security which uh

664
00:28:40,380 --> 00:28:43,020
not focus of this

665
00:28:43,020 --> 00:28:45,299
so in short

666
00:28:45,299 --> 00:28:46,860
so post the first partially

667
00:28:46,860 --> 00:28:49,200
non-interactive threshold and multi

668
00:28:49,200 --> 00:28:50,580
signatures based only on the login

669
00:28:50,580 --> 00:28:53,100
random Oracle and we also propose the

670
00:28:53,100 --> 00:28:55,260
first now interactive threshold only

671
00:28:55,260 --> 00:28:57,120
signatures with the desired properties

672
00:28:57,120 --> 00:28:59,279
but it's only on RSA in the random

673
00:28:59,279 --> 00:29:01,559
molecule

674
00:29:01,559 --> 00:29:04,740
so for the rest of talk our

675
00:29:04,740 --> 00:29:08,520
our first record notion of linear hash

676
00:29:08,520 --> 00:29:10,980
function and show how

677
00:29:10,980 --> 00:29:13,260
our convergence work

678
00:29:13,260 --> 00:29:16,559
and then I will focus on how to I was

679
00:29:16,559 --> 00:29:19,440
how to instantiate this algebraic one

680
00:29:19,440 --> 00:29:22,500
more uh pre-image resistant property

681
00:29:22,500 --> 00:29:26,460
from either D log or say assumption

682
00:29:26,460 --> 00:29:29,360
so a linear hash function is a function

683
00:29:29,360 --> 00:29:33,240
that from the domain D to a range R

684
00:29:33,240 --> 00:29:35,940
where D and R Vector space with respect

685
00:29:35,940 --> 00:29:37,860
to a scalar s

686
00:29:37,860 --> 00:29:40,440
and here we quite have to be a

687
00:29:40,440 --> 00:29:42,659
subjective subjective and also

688
00:29:42,659 --> 00:29:45,000
compressing which means the domain size

689
00:29:45,000 --> 00:29:47,399
is larger in the range in addition we

690
00:29:47,399 --> 00:29:49,559
require the app to be linear

691
00:29:49,559 --> 00:29:52,260
and also Collision resistance so

692
00:29:52,260 --> 00:29:54,539
intuitively a linear hash function is a

693
00:29:54,539 --> 00:29:56,279
collision resistant hash function with

694
00:29:56,279 --> 00:29:58,860
linear structure

695
00:29:58,860 --> 00:30:01,020
and now I will show our idea of how to

696
00:30:01,020 --> 00:30:02,399
do the conversion

697
00:30:02,399 --> 00:30:05,419
so it's fairly simple so given a group

698
00:30:05,419 --> 00:30:09,539
with generator letter G and the size p

699
00:30:09,539 --> 00:30:12,000
the idea is to convert all the

700
00:30:12,000 --> 00:30:15,480
exponential operation is g to the x

701
00:30:15,480 --> 00:30:18,360
which is the f of x

702
00:30:18,360 --> 00:30:20,880
so correspondingly we also replace the

703
00:30:20,880 --> 00:30:24,600
DP with domain side domain D and the g

704
00:30:24,600 --> 00:30:26,100
us r

705
00:30:26,100 --> 00:30:28,679
and also the other group operations with

706
00:30:28,679 --> 00:30:31,140
the operation in r

707
00:30:31,140 --> 00:30:34,200
and then the D log of Y to the base G is

708
00:30:34,200 --> 00:30:37,140
corresponding to the pre-image of Y on

709
00:30:37,140 --> 00:30:38,460
the f

710
00:30:38,460 --> 00:30:40,559
so let's take the frost scheme as an

711
00:30:40,559 --> 00:30:43,320
example so here's a the signing

712
00:30:43,320 --> 00:30:45,120
photograph rust

713
00:30:45,120 --> 00:30:48,000
and then here's the schemes after the of

714
00:30:48,000 --> 00:30:50,039
the of a conversion so here I would now

715
00:30:50,039 --> 00:30:51,720
go into

716
00:30:51,720 --> 00:30:54,600
further details I just want to give you

717
00:30:54,600 --> 00:30:57,140
an idea of how our

718
00:30:57,140 --> 00:30:59,820
convergence looks like

719
00:30:59,820 --> 00:31:02,039
so I also like to briefly highlight the

720
00:31:02,039 --> 00:31:04,700
signature we produced by this

721
00:31:04,700 --> 00:31:07,980
linear hash function based Frost so in

722
00:31:07,980 --> 00:31:10,860
particular for the D log instantiation

723
00:31:10,860 --> 00:31:13,039
from

724
00:31:13,039 --> 00:31:16,620
of the linear hash function we used

725
00:31:16,620 --> 00:31:18,659
the resulting signature is as follows

726
00:31:18,659 --> 00:31:23,480
which is exactly the automotive noise

727
00:31:25,279 --> 00:31:29,039
and then so to show the security of the

728
00:31:29,039 --> 00:31:32,880
linear hash function based Frost

729
00:31:32,880 --> 00:31:33,419
um

730
00:31:33,419 --> 00:31:36,360
the idea is to apply the same conversion

731
00:31:36,360 --> 00:31:39,419
to both the Assumption and the reduction

732
00:31:39,419 --> 00:31:42,480
so the original proofs shows that the

733
00:31:42,480 --> 00:31:45,419
security of the frost is implied by the

734
00:31:45,419 --> 00:31:49,220
algebraic one more D log assumptions

735
00:31:49,260 --> 00:31:53,460
and by applying the convergence we can

736
00:31:53,460 --> 00:31:55,620
convert the

737
00:31:55,620 --> 00:31:57,840
lgb1 multi-lock assumptions to the

738
00:31:57,840 --> 00:32:00,600
algebraic one more pre-image distance of

739
00:32:00,600 --> 00:32:02,820
the linear hash function

740
00:32:02,820 --> 00:32:05,039
and then we can show that security of

741
00:32:05,039 --> 00:32:07,020
the linear hash function base Frost is

742
00:32:07,020 --> 00:32:11,100
implied by the algebraic PR property by

743
00:32:11,100 --> 00:32:13,140
adapting the original proof so here I

744
00:32:13,140 --> 00:32:15,419
will now delve into how we adapt the

745
00:32:15,419 --> 00:32:19,080
proof to go to the time limit but I will

746
00:32:19,080 --> 00:32:21,600
briefly explain how we derive the notion

747
00:32:21,600 --> 00:32:26,000
of this algebraic one more PR property

748
00:32:30,240 --> 00:32:33,419
yeah so let's start by reviewing the one

749
00:32:33,419 --> 00:32:35,760
model assumption so it's defined using

750
00:32:35,760 --> 00:32:37,620
the following game so the Challenger

751
00:32:37,620 --> 00:32:39,480
first samples

752
00:32:39,480 --> 00:32:42,720
in group elements running group elements

753
00:32:42,720 --> 00:32:45,179
and adds challenges and send into the

754
00:32:45,179 --> 00:32:46,860
adversary

755
00:32:46,860 --> 00:32:50,580
anniversary has access to a d-log Oracle

756
00:32:50,580 --> 00:32:53,700
which takes an input a group element and

757
00:32:53,700 --> 00:32:56,820
returns its discrete log to the base G

758
00:32:56,820 --> 00:32:58,559
and

759
00:32:58,559 --> 00:33:01,799
so the goal of diversary is to Output so

760
00:33:01,799 --> 00:33:03,600
it's compute all the district log of the

761
00:33:03,600 --> 00:33:05,159
challenges so this clock of all the

762
00:33:05,159 --> 00:33:07,580
challenges

763
00:33:07,620 --> 00:33:09,720
and it was released if all the digital

764
00:33:09,720 --> 00:33:12,179
changes are computed correctly and the

765
00:33:12,179 --> 00:33:13,980
number of disk we log queries is less

766
00:33:13,980 --> 00:33:15,480
than

767
00:33:15,480 --> 00:33:17,519
so the algebraic

768
00:33:17,519 --> 00:33:19,799
one more D log assumption is a weaker

769
00:33:19,799 --> 00:33:21,539
assumption where the crucial difference

770
00:33:21,539 --> 00:33:24,899
is that University in additional need to

771
00:33:24,899 --> 00:33:26,480
provides and

772
00:33:26,480 --> 00:33:29,940
representation Alpha of Y with respects

773
00:33:29,940 --> 00:33:31,980
back to all the challenges

774
00:33:31,980 --> 00:33:36,659
now notably so given why the

775
00:33:36,659 --> 00:33:39,240
the sorry given the alpha this d-log

776
00:33:39,240 --> 00:33:42,019
Oracle is efficiently implementable

777
00:33:42,019 --> 00:33:44,519
since the challengers can compute this

778
00:33:44,519 --> 00:33:48,059
Ys the sum of the alpha I times the x i

779
00:33:48,059 --> 00:33:50,220
and which also means this assumption is

780
00:33:50,220 --> 00:33:52,740
falsifiable

781
00:33:52,740 --> 00:33:54,960
and then by applying our convergence we

782
00:33:54,960 --> 00:33:57,000
can adapting the one more D log

783
00:33:57,000 --> 00:33:59,820
assumption to the linear hash function

784
00:33:59,820 --> 00:34:01,320
settings

785
00:34:01,320 --> 00:34:04,140
so here the main difference is that we

786
00:34:04,140 --> 00:34:06,480
replace the d-lock Oracle with this

787
00:34:06,480 --> 00:34:09,739
pre-image Oracle which takes element

788
00:34:09,739 --> 00:34:13,739
in RS input and returns an element in

789
00:34:13,739 --> 00:34:15,599
the pre-image of Y

790
00:34:15,599 --> 00:34:17,639
on the f

791
00:34:17,639 --> 00:34:20,399
and here the adversary in order to

792
00:34:20,399 --> 00:34:23,699
access to the pre-image Oracle it must

793
00:34:23,699 --> 00:34:25,379
provide

794
00:34:25,379 --> 00:34:28,379
representation Alpha and thus the

795
00:34:28,379 --> 00:34:30,540
Challenger can compute this little Y at

796
00:34:30,540 --> 00:34:33,599
the sum of alpha times the x i

797
00:34:33,599 --> 00:34:36,119
and the goal of the adversary here is to

798
00:34:36,119 --> 00:34:39,659
find a pre-image so find element in the

799
00:34:39,659 --> 00:34:42,020
pre-image of each challenges such that

800
00:34:42,020 --> 00:34:43,580
yeah

801
00:34:43,580 --> 00:34:46,980
using lesson and Pi queries

802
00:34:46,980 --> 00:34:49,020
so therefore we call this games

803
00:34:49,020 --> 00:34:51,899
algebraic one one more pre-image

804
00:34:51,899 --> 00:34:54,679
resistant game

805
00:34:55,080 --> 00:34:57,180
so for the rest talk the main challenge

806
00:34:57,180 --> 00:34:59,820
is to show how we can construct this

807
00:34:59,820 --> 00:35:01,920
linear has function such that it's

808
00:35:01,920 --> 00:35:04,859
algebraic one more PR properties implied

809
00:35:04,859 --> 00:35:06,960
by either the D log or the RSA

810
00:35:06,960 --> 00:35:08,880
assumption

811
00:35:08,880 --> 00:35:11,400
so we're achieving that use

812
00:35:11,400 --> 00:35:15,359
through a two-step process so in the

813
00:35:15,359 --> 00:35:17,280
so the first step is we show that the

814
00:35:17,280 --> 00:35:20,339
algebraic uh one more PR property is

815
00:35:20,339 --> 00:35:22,380
implied by the Collision resistance of

816
00:35:22,380 --> 00:35:24,660
the linear hash function

817
00:35:24,660 --> 00:35:27,000
and then we the second step is to

818
00:35:27,000 --> 00:35:29,220
construct this linear hash function such

819
00:35:29,220 --> 00:35:31,920
that the Collision resistant property is

820
00:35:31,920 --> 00:35:35,579
implied by the the log and the RSA

821
00:35:35,579 --> 00:35:38,700
so here the main contribution is in the

822
00:35:38,700 --> 00:35:41,940
first step well for the second step

823
00:35:41,940 --> 00:35:42,480
um

824
00:35:42,480 --> 00:35:44,880
where we just adopted the previous

825
00:35:44,880 --> 00:35:46,859
instructions

826
00:35:46,859 --> 00:35:47,700
um

827
00:35:47,700 --> 00:35:49,200
like for example this D log

828
00:35:49,200 --> 00:35:53,460
instantiation which we mentioned before

829
00:35:53,460 --> 00:35:55,440
so for the rest of talk I will focus on

830
00:35:55,440 --> 00:35:58,380
to show how how you show the Collision

831
00:35:58,380 --> 00:36:01,200
resistance implies the algebraic or

832
00:36:01,200 --> 00:36:04,380
pre-image resistant property so formally

833
00:36:04,380 --> 00:36:07,740
we have the following serum so for any

834
00:36:07,740 --> 00:36:09,359
how would you break one more PR

835
00:36:09,359 --> 00:36:12,000
adversary a there exists anniversary

836
00:36:12,000 --> 00:36:15,540
that breaks the Collision property

837
00:36:15,540 --> 00:36:18,839
such that the advantage of a is not

838
00:36:18,839 --> 00:36:21,900
greater than twice the advantage of B

839
00:36:21,900 --> 00:36:23,520
so the construction of B is

840
00:36:23,520 --> 00:36:26,700
straightforward so the idea is we

841
00:36:26,700 --> 00:36:30,060
just let the B run a and facefully by

842
00:36:30,060 --> 00:36:33,540
simulating the I'll just uh algebraic

843
00:36:33,540 --> 00:36:35,160
one more PR game

844
00:36:35,160 --> 00:36:38,880
someone precisely that we initially

845
00:36:38,880 --> 00:36:41,400
samples and challenges and send it to

846
00:36:41,400 --> 00:36:42,740
diversary

847
00:36:42,740 --> 00:36:46,500
a and then for each Pi queries you can

848
00:36:46,500 --> 00:36:48,780
answer it following exactly the same as

849
00:36:48,780 --> 00:36:50,760
the one more peer game

850
00:36:50,760 --> 00:36:53,520
so after a returns

851
00:36:53,520 --> 00:36:57,480
if it wins and the output of the a is

852
00:36:57,480 --> 00:37:01,560
not exactly the same as the the one that

853
00:37:01,560 --> 00:37:03,960
generated by B then B can find a

854
00:37:03,960 --> 00:37:06,500
collision and this is because

855
00:37:06,500 --> 00:37:10,800
so the both the x i and x i hat is now

856
00:37:10,800 --> 00:37:13,560
in the pre-image of f big X so invert

857
00:37:13,560 --> 00:37:18,300
the pretty image of a big x i and F

858
00:37:18,300 --> 00:37:21,420
so then we just need to show that this

859
00:37:21,420 --> 00:37:25,640
deviation occurs with high probability

860
00:37:25,740 --> 00:37:27,960
so here the key observation is that the

861
00:37:27,960 --> 00:37:30,180
execution of Y is completely determined

862
00:37:30,180 --> 00:37:33,180
by the little X sample initially

863
00:37:33,180 --> 00:37:34,859
so for

864
00:37:34,859 --> 00:37:37,380
for the acts that makes a wings

865
00:37:37,380 --> 00:37:40,560
so to show that this x is different from

866
00:37:40,560 --> 00:37:42,420
the output

867
00:37:42,420 --> 00:37:44,579
the idea is to construct a mapping Phi

868
00:37:44,579 --> 00:37:47,640
such that it maps The X to a different X

869
00:37:47,640 --> 00:37:52,140
Prime such that the view of a given X is

870
00:37:52,140 --> 00:37:54,540
identical to the view of a given X Prime

871
00:37:54,540 --> 00:37:56,880
and therefore we can see the output of a

872
00:37:56,880 --> 00:37:59,640
should be the identical in both cases

873
00:37:59,640 --> 00:38:02,099
and therefore we have either

874
00:38:02,099 --> 00:38:04,440
the x is equal to it's not equal to X

875
00:38:04,440 --> 00:38:06,480
hat or the X Prime is not equal to

876
00:38:06,480 --> 00:38:09,859
access so here's the type

877
00:38:09,960 --> 00:38:12,180
and then we'll see that the B wins in

878
00:38:12,180 --> 00:38:13,980
one of the two cases

879
00:38:13,980 --> 00:38:15,839
so then the proof goes through if the

880
00:38:15,839 --> 00:38:17,820
Phi is a bijection

881
00:38:17,820 --> 00:38:19,740
and then it's left to see how to

882
00:38:19,740 --> 00:38:22,380
construct such a fly so we constructify

883
00:38:22,380 --> 00:38:26,280
uh so we can find Phi X as X plus b

884
00:38:26,280 --> 00:38:29,280
times e0 that's a d star whereas D star

885
00:38:29,280 --> 00:38:31,619
is a non-zero element in D such that's

886
00:38:31,619 --> 00:38:35,579
the it maps to 0 by F we know such a z

887
00:38:35,579 --> 00:38:39,260
star must exist since f is a nine to one

888
00:38:39,260 --> 00:38:43,500
function and also SP is a non-zero

889
00:38:43,500 --> 00:38:47,160
Vector in s such that the

890
00:38:47,160 --> 00:38:50,220
the inner product of B with this so it's

891
00:38:50,220 --> 00:38:53,400
any representation sent by the a is

892
00:38:53,400 --> 00:38:55,680
equal to zero

893
00:38:55,680 --> 00:38:57,839
so here we know the B must exist since

894
00:38:57,839 --> 00:39:01,380
the number of PR queries is lessened

895
00:39:01,380 --> 00:39:04,700
and now to see why the view of a

896
00:39:04,700 --> 00:39:07,140
given axis identical to the view of a

897
00:39:07,140 --> 00:39:09,300
given Phi X we just need to show that

898
00:39:09,300 --> 00:39:11,880
the a received the same challenges and

899
00:39:11,880 --> 00:39:14,160
also the same answer for all the queries

900
00:39:14,160 --> 00:39:16,920
so for the first we just prove that so

901
00:39:16,920 --> 00:39:21,000
the F given for X is equal to f x so

902
00:39:21,000 --> 00:39:23,040
here the reason that this equation holds

903
00:39:23,040 --> 00:39:25,560
is because this FD star is equal to zero

904
00:39:25,560 --> 00:39:28,440
and for the second let's see that a

905
00:39:28,440 --> 00:39:30,540
received the same answer

906
00:39:30,540 --> 00:39:33,780
because this in a product of alpha times

907
00:39:33,780 --> 00:39:35,880
B is equal to zero

908
00:39:35,880 --> 00:39:38,700
and we can also see that this R uh we

909
00:39:38,700 --> 00:39:40,440
can also show that this Phi is a

910
00:39:40,440 --> 00:39:42,180
bijection but I will not delve into it

911
00:39:42,180 --> 00:39:43,920
it's the time limit

912
00:39:43,920 --> 00:39:45,300
so again

913
00:39:45,300 --> 00:39:47,099
could I would like to mention a few

914
00:39:47,099 --> 00:39:49,859
future directions

915
00:39:49,859 --> 00:39:51,260
so first

916
00:39:51,260 --> 00:39:54,540
is to investigate the possibility to

917
00:39:54,540 --> 00:39:57,240
extend our result to the post Quantum

918
00:39:57,240 --> 00:39:59,760
setting with the aim of constructing

919
00:39:59,760 --> 00:40:02,540
better post Quantum secured

920
00:40:02,540 --> 00:40:04,859
multi-signature or threshold signature

921
00:40:04,859 --> 00:40:07,500
another is to adding identify other

922
00:40:07,500 --> 00:40:09,720
areas which we can apply our techniques

923
00:40:09,720 --> 00:40:11,760
to remove the algebraic one multilog

924
00:40:11,760 --> 00:40:12,780
assumption

925
00:40:12,780 --> 00:40:14,940
yeah so here's uh although I talk yeah

926
00:40:14,940 --> 00:40:17,359
thank you

927
00:40:18,110 --> 00:40:22,200
[Applause]

928
00:40:22,200 --> 00:40:24,540
all right thank you

929
00:40:24,540 --> 00:40:29,420
um time for one or two questions

930
00:40:29,640 --> 00:40:31,500
um of one

931
00:40:31,500 --> 00:40:33,839
without me so

932
00:40:33,839 --> 00:40:34,920
um

933
00:40:34,920 --> 00:40:37,859
so the post Quantum is still no problem

934
00:40:37,859 --> 00:40:40,320
now but there is a linear Ash function

935
00:40:40,320 --> 00:40:41,940
from

936
00:40:41,940 --> 00:40:44,520
lattices no it's essentially business or

937
00:40:44,520 --> 00:40:46,920
Isis problem and there's this one more

938
00:40:46,920 --> 00:40:51,240
Isis problem is there oh did you try to

939
00:40:51,240 --> 00:40:53,579
use this one more Isis problem to build

940
00:40:53,579 --> 00:40:56,280
a lattice based whatever

941
00:40:56,280 --> 00:40:58,740
yeah that's a yeah that's a very good

942
00:40:58,740 --> 00:41:01,140
and if so if is there anything what were

943
00:41:01,140 --> 00:41:02,700
the difficulties

944
00:41:02,700 --> 00:41:04,920
yeah actually there's a definitely a

945
00:41:04,920 --> 00:41:07,820
very good attempt I

946
00:41:07,820 --> 00:41:11,400
but yeah I yeah but we also try it but

947
00:41:11,400 --> 00:41:13,680
there's suspect to have a

948
00:41:13,680 --> 00:41:15,960
problem with the field and because

949
00:41:15,960 --> 00:41:17,099
there's

950
00:41:17,099 --> 00:41:19,200
um I think for the multi signatures

951
00:41:19,200 --> 00:41:20,660
schemes you're already

952
00:41:20,660 --> 00:41:22,980
postgone obscure one that is very

953
00:41:22,980 --> 00:41:26,940
similar to the you apply this uh this uh

954
00:41:26,940 --> 00:41:29,579
one more sis to the

955
00:41:29,579 --> 00:41:32,040
uh to have a framework this it's about

956
00:41:32,040 --> 00:41:34,020
yeah so then the question is whether we

957
00:41:34,020 --> 00:41:36,480
can get the construction from the

958
00:41:36,480 --> 00:41:38,940
threshold settings but for that there's

959
00:41:38,940 --> 00:41:41,520
some problems with this one more sis

960
00:41:41,520 --> 00:41:43,680
which is not very compatible with our

961
00:41:43,680 --> 00:41:45,599
framework

962
00:41:45,599 --> 00:41:48,540
because yes because for them they can

963
00:41:48,540 --> 00:41:50,339
get this linear hash function but with

964
00:41:50,339 --> 00:41:53,280
actual filters which uh

965
00:41:53,280 --> 00:41:55,680
yeah so I have to consider it

966
00:41:55,680 --> 00:41:57,900
differently

967
00:41:57,900 --> 00:42:00,900
okay all right let's thank the speaker

968
00:42:00,900 --> 00:42:01,840
again

969
00:42:01,840 --> 00:42:04,560
[Applause]

970
00:42:04,560 --> 00:42:08,180
on its lunchtime

