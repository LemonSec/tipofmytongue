1
00:00:00,900 --> 00:00:05,360
good morning welcome back

2
00:00:07,140 --> 00:00:08,700
okay

3
00:00:08,700 --> 00:00:11,760
today we start with the non-interactive

4
00:00:11,760 --> 00:00:12,900
MPC

5
00:00:12,900 --> 00:00:15,780
the first talk is Black Box reusable

6
00:00:15,780 --> 00:00:19,080
nisk with random oracles by Dubai Shai

7
00:00:19,080 --> 00:00:21,560
dakshita

8
00:00:22,580 --> 00:00:25,920
and the the this paper is presented by

9
00:00:25,920 --> 00:00:28,199
polu so

10
00:00:28,199 --> 00:00:30,420
it's up to you okay

11
00:00:30,420 --> 00:00:33,540
all right hi guys uh as you can tell I'm

12
00:00:33,540 --> 00:00:35,700
not an author on this paper I'm a proxy

13
00:00:35,700 --> 00:00:38,340
presenter for this paper none of the

14
00:00:38,340 --> 00:00:41,399
authors are here this morning so

15
00:00:41,399 --> 00:00:45,180
here I am okay uh and I encourage any

16
00:00:45,180 --> 00:00:48,120
detailed questions to be sent to the

17
00:00:48,120 --> 00:00:52,500
authors by email or on the chat

18
00:00:52,500 --> 00:00:55,260
so let me start this talk by recalling

19
00:00:55,260 --> 00:00:57,120
the setting of secure two-party

20
00:00:57,120 --> 00:00:58,559
computation

21
00:00:58,559 --> 00:01:00,899
and insecure two-party computation we

22
00:01:00,899 --> 00:01:03,539
have two parties P1 and P2 each with

23
00:01:03,539 --> 00:01:06,600
private inputs X1 and X2

24
00:01:06,600 --> 00:01:09,420
and they also have description of a

25
00:01:09,420 --> 00:01:12,320
common function of a common function f

26
00:01:12,320 --> 00:01:16,740
and P1 would like to learn the output F

27
00:01:16,740 --> 00:01:19,080
of X1 X2

28
00:01:19,080 --> 00:01:21,840
and in the literature we call P2 the

29
00:01:21,840 --> 00:01:25,020
sender and P1 the receiver

30
00:01:25,020 --> 00:01:27,420
and after engaging in multiple rounds of

31
00:01:27,420 --> 00:01:29,420
com communication

32
00:01:29,420 --> 00:01:31,740
we need the following three properties

33
00:01:31,740 --> 00:01:34,860
to hold one is correctness that P1

34
00:01:34,860 --> 00:01:37,320
learns F of X1 and X2 at the end of the

35
00:01:37,320 --> 00:01:38,520
protocol

36
00:01:38,520 --> 00:01:40,860
then is receiver security P2 learns no

37
00:01:40,860 --> 00:01:42,659
information about the private input of X

38
00:01:42,659 --> 00:01:44,280
of P1

39
00:01:44,280 --> 00:01:46,320
and Center security says that P1 learns

40
00:01:46,320 --> 00:01:48,000
no information about the private input

41
00:01:48,000 --> 00:01:50,220
X2 apart from what can be inferred from

42
00:01:50,220 --> 00:01:52,380
F of X1 and X2

43
00:01:52,380 --> 00:01:54,119
and we would like these two security

44
00:01:54,119 --> 00:01:55,740
Notions to hold against malicious

45
00:01:55,740 --> 00:01:57,840
adversaries and the security notion is

46
00:01:57,840 --> 00:02:01,140
in the real Ideal World paradigm

47
00:02:01,140 --> 00:02:04,500
and a central goal in the line in the

48
00:02:04,500 --> 00:02:07,140
work of security party computation is to

49
00:02:07,140 --> 00:02:08,459
get efficient secure two-party

50
00:02:08,459 --> 00:02:10,440
computation so we would like to minimize

51
00:02:10,440 --> 00:02:12,840
the round complexity

52
00:02:12,840 --> 00:02:14,879
and towards the school two works of

53
00:02:14,879 --> 00:02:17,160
ishaied Al introduced this notion of

54
00:02:17,160 --> 00:02:19,739
non-interactive secure computation

55
00:02:19,739 --> 00:02:22,319
and again this is the two-party setting

56
00:02:22,319 --> 00:02:24,180
and in non-interactive Secure

57
00:02:24,180 --> 00:02:27,239
computation we have P1 generating a

58
00:02:27,239 --> 00:02:29,459
first round message message one

59
00:02:29,459 --> 00:02:31,260
P2 sending a second round message

60
00:02:31,260 --> 00:02:32,940
message to

61
00:02:32,940 --> 00:02:36,540
and P1 learns F of X1 X2

62
00:02:36,540 --> 00:02:38,760
and this is in fact round optimal you

63
00:02:38,760 --> 00:02:40,739
can't get security guarantees from just

64
00:02:40,739 --> 00:02:42,120
one round

65
00:02:42,120 --> 00:02:44,940
and it should be noted that if we only

66
00:02:44,940 --> 00:02:48,300
care about semi honest adversaries Yao's

67
00:02:48,300 --> 00:02:50,400
protocol already satisfies the required

68
00:02:50,400 --> 00:02:51,780
security properties

69
00:02:51,780 --> 00:02:54,239
and additionally if we replace semi

70
00:02:54,239 --> 00:02:55,500
honest OT

71
00:02:55,500 --> 00:02:57,900
with a malicious secure OT protocol then

72
00:02:57,900 --> 00:03:00,120
the same protocol already satisfies

73
00:03:00,120 --> 00:03:02,580
security against malicious receivers

74
00:03:02,580 --> 00:03:04,500
so the main challenge here

75
00:03:04,500 --> 00:03:06,660
is to protect against the malicious

76
00:03:06,660 --> 00:03:08,580
sender without compromising on the

77
00:03:08,580 --> 00:03:11,040
receiver security

78
00:03:11,040 --> 00:03:13,860
um great so they show The Following

79
00:03:13,860 --> 00:03:15,900
theorem the following theorem says that

80
00:03:15,900 --> 00:03:18,540
for every function f there exists a

81
00:03:18,540 --> 00:03:19,920
non-interactive secure computation

82
00:03:19,920 --> 00:03:20,940
protocol

83
00:03:20,940 --> 00:03:23,340
for securely Computing F in the OT

84
00:03:23,340 --> 00:03:25,860
hybrid model and this has statistical

85
00:03:25,860 --> 00:03:29,580
security if f is in is logged up and

86
00:03:29,580 --> 00:03:32,459
this is due to some theorem about

87
00:03:32,459 --> 00:03:34,379
randomizing Coatings and we also have

88
00:03:34,379 --> 00:03:35,879
computational security for General

89
00:03:35,879 --> 00:03:40,760
f-assuming Black Box access to a prg

90
00:03:41,220 --> 00:03:45,060
um great okay so non-interactive secure

91
00:03:45,060 --> 00:03:46,980
computation has lots of exciting

92
00:03:46,980 --> 00:03:48,659
applications but it also has severe

93
00:03:48,659 --> 00:03:50,940
limitations for several important use

94
00:03:50,940 --> 00:03:53,040
cases and let me motivate one of these

95
00:03:53,040 --> 00:03:55,920
uh one of these important use cases so

96
00:03:55,920 --> 00:03:57,780
consider a patient

97
00:03:57,780 --> 00:04:02,220
who needs a kidney transplant and to

98
00:04:02,220 --> 00:04:05,099
find a suitable transplant donor we

99
00:04:05,099 --> 00:04:06,780
would like to do some sort of DNA

100
00:04:06,780 --> 00:04:09,480
sequence matching so this patient has

101
00:04:09,480 --> 00:04:12,180
some DNA sequence that's its private

102
00:04:12,180 --> 00:04:13,920
input

103
00:04:13,920 --> 00:04:18,779
and to find a find a suitable donor we

104
00:04:18,779 --> 00:04:21,358
can't just reveal their DNA sequence in

105
00:04:21,358 --> 00:04:22,260
the public so we're going to use a

106
00:04:22,260 --> 00:04:23,460
non-interactive secure computation

107
00:04:23,460 --> 00:04:26,639
protocol to facilitate this so they're

108
00:04:26,639 --> 00:04:28,199
going to publish message one from a

109
00:04:28,199 --> 00:04:30,479
non-tractor secure computation protocol

110
00:04:30,479 --> 00:04:33,660
and here comes some potential donor and

111
00:04:33,660 --> 00:04:35,160
the donor has their own DNA sequence

112
00:04:35,160 --> 00:04:37,380
which is their private input and they

113
00:04:37,380 --> 00:04:40,199
send a second round message message too

114
00:04:40,199 --> 00:04:41,759
and the function we're Computing is

115
00:04:41,759 --> 00:04:43,560
match or no match for the sake of kidney

116
00:04:43,560 --> 00:04:45,120
transplants

117
00:04:45,120 --> 00:04:47,699
and let's say it's no match what happens

118
00:04:47,699 --> 00:04:50,520
well we need to find a new donor and

119
00:04:50,520 --> 00:04:52,500
unfortunately the standard notion of

120
00:04:52,500 --> 00:04:54,060
non-effective secure computation we

121
00:04:54,060 --> 00:04:55,500
would have to publish a new first round

122
00:04:55,500 --> 00:04:57,900
message in fact we'd have to do this for

123
00:04:57,900 --> 00:05:00,300
every potential donor that came along

124
00:05:00,300 --> 00:05:02,340
and this is incredibly inefficient and

125
00:05:02,340 --> 00:05:03,720
what we would like is this first round

126
00:05:03,720 --> 00:05:06,419
message to be reusable

127
00:05:06,419 --> 00:05:09,000
so here comes the definition of reusable

128
00:05:09,000 --> 00:05:11,280
non-interactive secure computation

129
00:05:11,280 --> 00:05:13,500
and the works of ishay at all and Chase

130
00:05:13,500 --> 00:05:15,960
ital consider this problem so in this

131
00:05:15,960 --> 00:05:19,020
setting we have some receiver P1 with

132
00:05:19,020 --> 00:05:21,600
private input X1 the receiver has

133
00:05:21,600 --> 00:05:24,000
function f in mind and the receiver

134
00:05:24,000 --> 00:05:25,800
generates an encoding of its private

135
00:05:25,800 --> 00:05:28,020
input and just think of it as publishing

136
00:05:28,020 --> 00:05:30,780
it on a public bulletin board

137
00:05:30,780 --> 00:05:32,699
and now the first sender comes with some

138
00:05:32,699 --> 00:05:36,479
private input x21 and this sender sends

139
00:05:36,479 --> 00:05:38,400
a single second round message message to

140
00:05:38,400 --> 00:05:39,419
one

141
00:05:39,419 --> 00:05:43,199
and P1 can learn F of X1 x21

142
00:05:43,199 --> 00:05:45,539
then comes another sender the same thing

143
00:05:45,539 --> 00:05:48,960
repeats and uh with this with the same

144
00:05:48,960 --> 00:05:51,240
message first round message message one

145
00:05:51,240 --> 00:05:54,960
and P1 can now learn F of X1 x 2 2.

146
00:05:54,960 --> 00:05:56,460
just from receiving the second round

147
00:05:56,460 --> 00:05:59,400
message message to two and this will

148
00:05:59,400 --> 00:06:02,240
repeat for let's say end parties

149
00:06:02,240 --> 00:06:06,300
and the receiver learns the outputs of

150
00:06:06,300 --> 00:06:08,220
the function f applied on its fixed

151
00:06:08,220 --> 00:06:10,500
input and each of these Center inputs

152
00:06:10,500 --> 00:06:13,080
and in this setting

153
00:06:13,080 --> 00:06:15,060
um The Works of each side can actually

154
00:06:15,060 --> 00:06:18,060
be modified so that uh it can be secure

155
00:06:18,060 --> 00:06:20,960
with n reuses where n is actually on

156
00:06:20,960 --> 00:06:23,460
operatory bounded meaning that you

157
00:06:23,460 --> 00:06:27,600
actually have to know n beforehand okay

158
00:06:27,600 --> 00:06:29,039
um and just know that you can actually

159
00:06:29,039 --> 00:06:33,539
get this if you just run and copies in

160
00:06:33,539 --> 00:06:36,600
parallel uh but this would incur a

161
00:06:36,600 --> 00:06:38,880
multiplicative overhead

162
00:06:38,880 --> 00:06:40,740
um and the works of each ideal actually

163
00:06:40,740 --> 00:06:43,319
show how to do this by getting only a

164
00:06:43,319 --> 00:06:45,539
additive overhead so that's the

165
00:06:45,539 --> 00:06:47,039
difference there

166
00:06:47,039 --> 00:06:49,259
and this is unfortunately a severe

167
00:06:49,259 --> 00:06:51,120
restriction because bounding n severely

168
00:06:51,120 --> 00:06:53,100
limits the functionality and of course

169
00:06:53,100 --> 00:06:55,860
the size of the messages depends on this

170
00:06:55,860 --> 00:06:58,020
priorienne

171
00:06:58,020 --> 00:06:59,520
so we'd like to remove this restriction

172
00:06:59,520 --> 00:07:01,800
and now we consider the unbounded

173
00:07:01,800 --> 00:07:05,100
reusable nizzix setting where n is Opera

174
00:07:05,100 --> 00:07:07,020
unbounded

175
00:07:07,020 --> 00:07:09,120
and unfortunately the work of Chase it

176
00:07:09,120 --> 00:07:10,860
I'll show this negative result this

177
00:07:10,860 --> 00:07:12,960
impossibility result which says that

178
00:07:12,960 --> 00:07:15,120
there exists a log depth circuit such

179
00:07:15,120 --> 00:07:16,800
that there exists no statistically

180
00:07:16,800 --> 00:07:19,319
secure unbounded reusable nisc protocol

181
00:07:19,319 --> 00:07:22,259
for computing F in the OT hybrid model

182
00:07:22,259 --> 00:07:24,000
and an OT hybrid model as a reminder

183
00:07:24,000 --> 00:07:26,340
here you have some ideal functionality

184
00:07:26,340 --> 00:07:28,860
for OT and you both parties have Oracle

185
00:07:28,860 --> 00:07:31,620
access to this OT

186
00:07:31,620 --> 00:07:33,479
they also show The Following positive

187
00:07:33,479 --> 00:07:35,340
result and the following positive result

188
00:07:35,340 --> 00:07:37,560
says that for every function of log

189
00:07:37,560 --> 00:07:39,120
depth there exists a statistically

190
00:07:39,120 --> 00:07:41,759
secure unbounded reusable nisc protocol

191
00:07:41,759 --> 00:07:44,520
for computing F in the Ole hybrid model

192
00:07:44,520 --> 00:07:48,560
so by strengthening your what

193
00:07:48,560 --> 00:07:50,039
cryptographic primitive you're

194
00:07:50,039 --> 00:07:52,020
considering namely oblivious linear

195
00:07:52,020 --> 00:07:54,240
evaluators which is you can think of as

196
00:07:54,240 --> 00:07:57,060
a arithmetic analog of OT so OT is over

197
00:07:57,060 --> 00:07:59,520
a binary field you can think of Ole over

198
00:07:59,520 --> 00:08:01,440
some super polynomial or exponentially

199
00:08:01,440 --> 00:08:02,819
sized field

200
00:08:02,819 --> 00:08:05,639
so by upgrading uh by strengthening your

201
00:08:05,639 --> 00:08:07,639
cryptographic

202
00:08:07,639 --> 00:08:09,539
primitive that you're considering you

203
00:08:09,539 --> 00:08:11,940
can actually get a positive result

204
00:08:11,940 --> 00:08:13,680
of course there's some limitations with

205
00:08:13,680 --> 00:08:15,120
this positive result

206
00:08:15,120 --> 00:08:16,740
so first of all early is much more

207
00:08:16,740 --> 00:08:18,840
expensive to implement than OT

208
00:08:18,840 --> 00:08:22,440
and the flavor of OT that ole ole that

209
00:08:22,440 --> 00:08:24,120
we need is some reusable notion of Ole

210
00:08:24,120 --> 00:08:27,599
and this is only known from the DCR the

211
00:08:27,599 --> 00:08:29,879
DCR assumption decisional composite

212
00:08:29,879 --> 00:08:31,520
residuosity

213
00:08:31,520 --> 00:08:34,380
and lastly this protocol for computing

214
00:08:34,380 --> 00:08:36,419
General circuits this positive result by

215
00:08:36,419 --> 00:08:39,360
Chase Adel requires non-block non-black

216
00:08:39,360 --> 00:08:41,760
box use of prg and whenever you have

217
00:08:41,760 --> 00:08:43,440
this non-black box use you incur a

218
00:08:43,440 --> 00:08:44,640
computational overhead because you

219
00:08:44,640 --> 00:08:45,839
actually have to know a specific

220
00:08:45,839 --> 00:08:48,420
implementation of the circuit

221
00:08:48,420 --> 00:08:52,380
okay so the goal of this paper is to

222
00:08:52,380 --> 00:08:54,420
construct unbounded reusable nisc

223
00:08:54,420 --> 00:08:56,399
protocols for computing General circuits

224
00:08:56,399 --> 00:08:57,899
such that they can be efficiently

225
00:08:57,899 --> 00:09:00,120
instantiable from a wide variety of

226
00:09:00,120 --> 00:09:01,200
standard cryptographic assumptions

227
00:09:01,200 --> 00:09:03,000
Beyond just DCR

228
00:09:03,000 --> 00:09:05,279
and it has to make black box use of the

229
00:09:05,279 --> 00:09:06,600
underlying cryptographic Primitives to

230
00:09:06,600 --> 00:09:09,240
remove this computational overhead

231
00:09:09,240 --> 00:09:12,019
and the results of this paper is

232
00:09:12,019 --> 00:09:15,720
srinivasan 23 is that for every function

233
00:09:15,720 --> 00:09:17,880
f there exists an unbounded reusable

234
00:09:17,880 --> 00:09:19,920
nisc protocol for computing F in the

235
00:09:19,920 --> 00:09:22,260
random Oracle model that makes black box

236
00:09:22,260 --> 00:09:24,060
use of a two-round malicious secure OT

237
00:09:24,060 --> 00:09:25,440
protocol

238
00:09:25,440 --> 00:09:28,019
and we just note that the previous work

239
00:09:28,019 --> 00:09:30,420
last year by the same authors show how

240
00:09:30,420 --> 00:09:31,740
to construct a malicious secure OT

241
00:09:31,740 --> 00:09:34,500
protocol in the random Oracle model from

242
00:09:34,500 --> 00:09:37,320
Black Box access to a two round semi on

243
00:09:37,320 --> 00:09:39,060
a secure OT protocol

244
00:09:39,060 --> 00:09:40,800
so as a corollary we can actually relax

245
00:09:40,800 --> 00:09:42,899
this requirement of malicious Acura OT

246
00:09:42,899 --> 00:09:45,540
protocol to semi honest secure OT

247
00:09:45,540 --> 00:09:47,399
protocol

248
00:09:47,399 --> 00:09:48,839
and you might be wondering at this point

249
00:09:48,839 --> 00:09:50,880
is this a contradiction to the negative

250
00:09:50,880 --> 00:09:54,000
results of Chase Adele then Chase it out

251
00:09:54,000 --> 00:09:56,040
prove this was impossible

252
00:09:56,040 --> 00:09:59,459
and in fact they they did not Chase it

253
00:09:59,459 --> 00:10:01,440
out only rules out constructions in the

254
00:10:01,440 --> 00:10:02,880
OT hybrid model

255
00:10:02,880 --> 00:10:05,160
against unbounded senders so this is

256
00:10:05,160 --> 00:10:07,320
that's with statistical security as well

257
00:10:07,320 --> 00:10:09,240
as in a different model

258
00:10:09,240 --> 00:10:10,560
okay

259
00:10:10,560 --> 00:10:12,720
and critically here we are going to be

260
00:10:12,720 --> 00:10:15,140
using Black Box use of a two round OT

261
00:10:15,140 --> 00:10:18,000
and this results in US settling for

262
00:10:18,000 --> 00:10:19,440
computational security

263
00:10:19,440 --> 00:10:22,200
okay and uh this two round OT protocol

264
00:10:22,200 --> 00:10:24,060
is actually more efficient in a two

265
00:10:24,060 --> 00:10:26,360
round Ole protocol as well

266
00:10:26,360 --> 00:10:29,399
and this black box use of two round OT

267
00:10:29,399 --> 00:10:31,440
is actually crucial for the construction

268
00:10:31,440 --> 00:10:33,360
to go through

269
00:10:33,360 --> 00:10:36,120
also this is in the random Oracle model

270
00:10:36,120 --> 00:10:37,920
okay

271
00:10:37,920 --> 00:10:39,360
so

272
00:10:39,360 --> 00:10:41,760
um the first right finally they also

273
00:10:41,760 --> 00:10:44,459
gave constructions a reusable Nic for

274
00:10:44,459 --> 00:10:46,260
General circuits that make black box use

275
00:10:46,260 --> 00:10:48,959
of cryptography and just as a reminder

276
00:10:48,959 --> 00:10:51,060
the the positive result from Chase at

277
00:10:51,060 --> 00:10:55,760
all uses non-black box use of pogs

278
00:10:55,760 --> 00:10:59,700
and an interesting open question is uh

279
00:10:59,700 --> 00:11:01,680
to extend this to the Le hybrid model

280
00:11:01,680 --> 00:11:04,819
without random oracles

281
00:11:05,579 --> 00:11:07,680
so here's some more results Beyond just

282
00:11:07,680 --> 00:11:10,079
reusable nisc

283
00:11:10,079 --> 00:11:12,480
so here we consider the problem of

284
00:11:12,480 --> 00:11:15,240
two-sided nisc here you have two parties

285
00:11:15,240 --> 00:11:19,740
P1 P2 and unlike the previous setting in

286
00:11:19,740 --> 00:11:21,660
this setting both P1 and P2 would like

287
00:11:21,660 --> 00:11:24,540
to learn F of X1 X2

288
00:11:24,540 --> 00:11:27,540
okay and so P1 and P2 will engage in a

289
00:11:27,540 --> 00:11:30,959
first round message message exchange so

290
00:11:30,959 --> 00:11:33,720
message one one and message one two they

291
00:11:33,720 --> 00:11:36,540
don't depend on each other

292
00:11:36,540 --> 00:11:38,760
and then we have a second round of

293
00:11:38,760 --> 00:11:40,920
messages exchanged and after P1 after

294
00:11:40,920 --> 00:11:43,380
these two rounds of messaging uh P1 and

295
00:11:43,380 --> 00:11:46,260
P2 each learn F of X1 X2

296
00:11:46,260 --> 00:11:50,519
and uh just note that if you took a

297
00:11:50,519 --> 00:11:52,500
one-sided nisc and you try to run in

298
00:11:52,500 --> 00:11:54,480
both directions it does not result in

299
00:11:54,480 --> 00:11:57,899
two-sided nisc and why is that the two

300
00:11:57,899 --> 00:11:59,640
uh the two directions could actually

301
00:11:59,640 --> 00:12:01,980
result the parties could actually use

302
00:12:01,980 --> 00:12:04,320
different inputs so it could be that in

303
00:12:04,320 --> 00:12:06,420
the first round maybe P1 learns F of X1

304
00:12:06,420 --> 00:12:08,360
X2 but in the second round

305
00:12:08,360 --> 00:12:11,940
P2 learns F of X1 Prime X2 Prime so

306
00:12:11,940 --> 00:12:14,279
one-sided Nic does not imply two-sided

307
00:12:14,279 --> 00:12:16,920
Nic generally speaking

308
00:12:16,920 --> 00:12:19,500
in the theorem from last year's work by

309
00:12:19,500 --> 00:12:20,940
the same authors show that for every

310
00:12:20,940 --> 00:12:23,519
function f there exists two rounded nisc

311
00:12:23,519 --> 00:12:26,339
protocol for securely Computing F that

312
00:12:26,339 --> 00:12:27,779
makes black box use of a two round

313
00:12:27,779 --> 00:12:30,120
malicious secure OT

314
00:12:30,120 --> 00:12:32,040
okay

315
00:12:32,040 --> 00:12:34,140
and today I'm going to be telling you

316
00:12:34,140 --> 00:12:36,360
about a more simplistic model of

317
00:12:36,360 --> 00:12:39,360
two-sided nisc but the authors also

318
00:12:39,360 --> 00:12:41,700
consider a more general definition that

319
00:12:41,700 --> 00:12:43,860
captures both this simplistic two-sided

320
00:12:43,860 --> 00:12:47,220
model as well as the one-sided model

321
00:12:47,220 --> 00:12:48,899
and I encourage you to see their

322
00:12:48,899 --> 00:12:51,000
formulation in the paper

323
00:12:51,000 --> 00:12:53,459
so what is reusable two-sided Nic well

324
00:12:53,459 --> 00:12:57,260
here the first round message is reusable

325
00:12:57,260 --> 00:12:59,339
but here the settings a little different

326
00:12:59,339 --> 00:13:02,040
the syntax will be where we're going to

327
00:13:02,040 --> 00:13:03,240
be switching the function that we're

328
00:13:03,240 --> 00:13:04,500
considering

329
00:13:04,500 --> 00:13:07,860
so if for example consider P1 P2 having

330
00:13:07,860 --> 00:13:10,019
a common input the description of some

331
00:13:10,019 --> 00:13:11,399
function F1

332
00:13:11,399 --> 00:13:14,820
then in this reusable setting P1 and P2

333
00:13:14,820 --> 00:13:17,279
can now you know generate the first

334
00:13:17,279 --> 00:13:19,019
round message and for this particular

335
00:13:19,019 --> 00:13:21,300
common input F1 they can generate second

336
00:13:21,300 --> 00:13:23,459
round messages that depend on F1 so the

337
00:13:23,459 --> 00:13:25,800
length of these messages will depend on

338
00:13:25,800 --> 00:13:26,880
F1

339
00:13:26,880 --> 00:13:28,320
and at the end of this exchange of

340
00:13:28,320 --> 00:13:31,139
messaging P1 and P2 will each learn F1

341
00:13:31,139 --> 00:13:33,720
of X1 and X2

342
00:13:33,720 --> 00:13:35,579
and this can contain this can continue

343
00:13:35,579 --> 00:13:37,320
for many different functions many

344
00:13:37,320 --> 00:13:40,139
different executions and let's say up to

345
00:13:40,139 --> 00:13:42,240
some n and of course what we would like

346
00:13:42,240 --> 00:13:45,000
is n to be Opry unbounded

347
00:13:45,000 --> 00:13:47,459
and the results in this paper show The

348
00:13:47,459 --> 00:13:48,660
Following theorem

349
00:13:48,660 --> 00:13:50,339
there exists an unbounded two-sided

350
00:13:50,339 --> 00:13:52,320
reusable nisc protocol for computing

351
00:13:52,320 --> 00:13:53,880
General functions in the random Oracle

352
00:13:53,880 --> 00:13:56,100
model that make black box use of a

353
00:13:56,100 --> 00:13:57,720
two-round malicious secure OT protocol

354
00:13:57,720 --> 00:13:59,760
and additively homomorphic commitments

355
00:13:59,760 --> 00:14:01,620
let me just make a note quickly on the

356
00:14:01,620 --> 00:14:04,200
additively homomorphic commitments in

357
00:14:04,200 --> 00:14:04,880
fact

358
00:14:04,880 --> 00:14:07,440
if the party is allowed to maintain an

359
00:14:07,440 --> 00:14:09,720
updatable State across every execution

360
00:14:09,720 --> 00:14:11,639
then actually we can remove this need

361
00:14:11,639 --> 00:14:13,320
for additional this additional

362
00:14:13,320 --> 00:14:14,579
Assumption of additively homorphic

363
00:14:14,579 --> 00:14:15,660
commitments

364
00:14:15,660 --> 00:14:18,839
and just as a quick note again if you if

365
00:14:18,839 --> 00:14:21,240
we can actually relax this to Black Box

366
00:14:21,240 --> 00:14:23,220
use of a two round semi honest security

367
00:14:23,220 --> 00:14:26,940
protocol Again by by leveraging last

368
00:14:26,940 --> 00:14:29,480
year's result

369
00:14:29,760 --> 00:14:32,760
let me give you some quick intuition on

370
00:14:32,760 --> 00:14:34,260
how to overcome the impossibility result

371
00:14:34,260 --> 00:14:37,019
from Chase Adele

372
00:14:37,019 --> 00:14:39,240
so what is the intuition behind

373
00:14:39,240 --> 00:14:41,519
impossibility result

374
00:14:41,519 --> 00:14:44,160
well it says that suppose party one

375
00:14:44,160 --> 00:14:47,220
sends a first round message of all these

376
00:14:47,220 --> 00:14:51,180
two out of one OTS on these bits B1

377
00:14:51,180 --> 00:14:53,820
through BK and what is B1 through BK you

378
00:14:53,820 --> 00:14:55,860
can think of them as some encoding of

379
00:14:55,860 --> 00:14:57,839
p1's private input so think of secret

380
00:14:57,839 --> 00:15:00,779
sharing secret shares

381
00:15:00,779 --> 00:15:03,300
so B1 through b k need to be hidden

382
00:15:03,300 --> 00:15:05,639
and they're fixed across all executions

383
00:15:05,639 --> 00:15:06,899
so this and this will be in the OT

384
00:15:06,899 --> 00:15:08,220
hybrid model

385
00:15:08,220 --> 00:15:09,660
um

386
00:15:09,660 --> 00:15:12,839
and here comes along malicious P2

387
00:15:12,839 --> 00:15:15,660
and what will malicious P2 do malicious

388
00:15:15,660 --> 00:15:17,820
P2 will effectively recover all these

389
00:15:17,820 --> 00:15:18,779
bits

390
00:15:18,779 --> 00:15:22,019
and how will it do it it will make use

391
00:15:22,019 --> 00:15:25,920
of the fact of uh that can effectively

392
00:15:25,920 --> 00:15:28,260
Implement abort Oracle on P1 so what

393
00:15:28,260 --> 00:15:30,720
will P2 do P2 will make a guess for the

394
00:15:30,720 --> 00:15:33,060
first bit B1 it's going to try to

395
00:15:33,060 --> 00:15:35,339
recover bits bit by bit and say that the

396
00:15:35,339 --> 00:15:37,440
real bit is B1 star

397
00:15:37,440 --> 00:15:39,720
what is it going to do

398
00:15:39,720 --> 00:15:42,120
um uh sorry it's going to make a guess

399
00:15:42,120 --> 00:15:44,760
for B1 and say this bit is B1 star we

400
00:15:44,760 --> 00:15:46,800
don't know actually what B1 is and what

401
00:15:46,800 --> 00:15:47,519
you're going to do is you're going to

402
00:15:47,519 --> 00:15:50,220
generate the the message uh M1 minus B

403
00:15:50,220 --> 00:15:53,579
Star B1 Star as bot

404
00:15:53,579 --> 00:15:54,899
and for the other message you're going

405
00:15:54,899 --> 00:15:57,300
to generate honestly

406
00:15:57,300 --> 00:15:58,800
and what you can do is you can send

407
00:15:58,800 --> 00:16:00,300
these two messages over and in the case

408
00:16:00,300 --> 00:16:04,620
that p1's bit was actually B1 star then

409
00:16:04,620 --> 00:16:06,720
it's going to see a real message and

410
00:16:06,720 --> 00:16:07,980
everything is fine

411
00:16:07,980 --> 00:16:11,100
but in the case that it actually picked

412
00:16:11,100 --> 00:16:13,500
one minus B1 star meaning that you uh

413
00:16:13,500 --> 00:16:16,920
you you you you guessed incorrectly it's

414
00:16:16,920 --> 00:16:19,980
going to abort and P2 will see that P1

415
00:16:19,980 --> 00:16:24,480
aborted and P2 will then claim that it

416
00:16:24,480 --> 00:16:28,199
knows uh B1 so either way you recovered

417
00:16:28,199 --> 00:16:29,820
the baby one

418
00:16:29,820 --> 00:16:32,100
and the fact that this first round

419
00:16:32,100 --> 00:16:34,860
message is reusable and fixed allows P2

420
00:16:34,860 --> 00:16:37,079
to actually iteratively recover all the

421
00:16:37,079 --> 00:16:40,440
bits B1 through BK one by one

422
00:16:40,440 --> 00:16:42,480
and this is an issue

423
00:16:42,480 --> 00:16:44,100
so to prevent this attack somehow we

424
00:16:44,100 --> 00:16:45,600
have to ensure that all the sender OT

425
00:16:45,600 --> 00:16:49,380
messages encode valid inputs not bought

426
00:16:49,380 --> 00:16:51,480
and so how would we accomplish this by

427
00:16:51,480 --> 00:16:54,540
making Black Box use of a two round OT

428
00:16:54,540 --> 00:16:57,000
and I would like to clarify that we

429
00:16:57,000 --> 00:16:59,459
can't do this for for all OT sender

430
00:16:59,459 --> 00:17:01,019
messages but we can ensure that at least

431
00:17:01,019 --> 00:17:03,120
a large fraction of the messages are

432
00:17:03,120 --> 00:17:04,260
secure and this turns out to be

433
00:17:04,260 --> 00:17:07,079
sufficient for our purposes

434
00:17:07,079 --> 00:17:09,419
so the sender first generates the second

435
00:17:09,419 --> 00:17:10,319
round

436
00:17:10,319 --> 00:17:11,540
OT message

437
00:17:11,540 --> 00:17:14,699
k c as K executions of this

438
00:17:14,699 --> 00:17:17,099
and after this the sender chooses a

439
00:17:17,099 --> 00:17:20,099
random subset s of the OT executions and

440
00:17:20,099 --> 00:17:22,260
sends this set to the sender

441
00:17:22,260 --> 00:17:24,000
and the sender opens each of these OT

442
00:17:24,000 --> 00:17:27,359
messages corresponding to the set s

443
00:17:27,359 --> 00:17:30,299
and you can think of uh by opening what

444
00:17:30,299 --> 00:17:32,760
do we mean we mean that the sender

445
00:17:32,760 --> 00:17:34,860
reveals the input and Randomness used in

446
00:17:34,860 --> 00:17:37,620
generating these second round messages

447
00:17:37,620 --> 00:17:38,760
great

448
00:17:38,760 --> 00:17:41,640
and now the receiver checks if all these

449
00:17:41,640 --> 00:17:43,799
messages encoded and all these open

450
00:17:43,799 --> 00:17:46,380
executions are valid

451
00:17:46,380 --> 00:17:49,140
and this will ensure that more than 90

452
00:17:49,140 --> 00:17:50,940
of the executions are valid with

453
00:17:50,940 --> 00:17:53,580
overwhelming probability uh right yeah

454
00:17:53,580 --> 00:17:56,160
and good okay and note that such a check

455
00:17:56,160 --> 00:17:58,980
is impossible to uh to make an OT hybrid

456
00:17:58,980 --> 00:18:00,000
model because you don't actually have

457
00:18:00,000 --> 00:18:03,299
access to these second round messages

458
00:18:03,299 --> 00:18:05,760
um you just have Oracle access to this

459
00:18:05,760 --> 00:18:08,039
ideal functionality

460
00:18:08,039 --> 00:18:09,840
and this is actually the key distinction

461
00:18:09,840 --> 00:18:12,480
that allows us to recover the the

462
00:18:12,480 --> 00:18:15,179
previous impossibility result

463
00:18:15,179 --> 00:18:17,460
and unfortunately this approach seems to

464
00:18:17,460 --> 00:18:18,960
increase the number of rounds

465
00:18:18,960 --> 00:18:20,640
and we're also no longer in a two

466
00:18:20,640 --> 00:18:23,160
message setting

467
00:18:23,160 --> 00:18:25,640
right

468
00:18:25,679 --> 00:18:27,600
okay so how do we collapse number of

469
00:18:27,600 --> 00:18:29,100
rounds well we're going to use a feature

470
00:18:29,100 --> 00:18:30,900
from your heuristic so we're going to

471
00:18:30,900 --> 00:18:33,360
compute the subset S as the output of a

472
00:18:33,360 --> 00:18:35,460
hash function applied on second round

473
00:18:35,460 --> 00:18:36,720
sender messages

474
00:18:36,720 --> 00:18:38,700
and now the receiver now checks that the

475
00:18:38,700 --> 00:18:41,039
set s is computed correctly and then

476
00:18:41,039 --> 00:18:43,320
performs the same checks as before

477
00:18:43,320 --> 00:18:45,059
and if the hash function is correlation

478
00:18:45,059 --> 00:18:46,500
intractable

479
00:18:46,500 --> 00:18:48,120
this ensures that more than 90 of the

480
00:18:48,120 --> 00:18:50,940
executions are computed correctly

481
00:18:50,940 --> 00:18:52,440
and there's actually still a subtle

482
00:18:52,440 --> 00:18:56,400
issue in fact uh this doesn't prevent P2

483
00:18:56,400 --> 00:18:59,100
from cheating in a small number of

484
00:18:59,100 --> 00:19:01,200
executions

485
00:19:01,200 --> 00:19:03,120
because in the you know you could learn

486
00:19:03,120 --> 00:19:06,120
10 of the the bits here 10 alert bits

487
00:19:06,120 --> 00:19:07,080
there

488
00:19:07,080 --> 00:19:08,760
and the reusable setting P2 could

489
00:19:08,760 --> 00:19:10,500
potentially cheat in a small number of

490
00:19:10,500 --> 00:19:11,880
execution

491
00:19:11,880 --> 00:19:14,220
executions in each reuse and could use

492
00:19:14,220 --> 00:19:16,020
this information to break receiver

493
00:19:16,020 --> 00:19:17,940
security

494
00:19:17,940 --> 00:19:22,260
so to overcome this uh to overcome P2

495
00:19:22,260 --> 00:19:23,220
from cheating in the small number of

496
00:19:23,220 --> 00:19:24,780
executions the authors will use some

497
00:19:24,780 --> 00:19:26,220
sort of standard error correcting

498
00:19:26,220 --> 00:19:29,960
properties of Shamir secret sharing

499
00:19:30,360 --> 00:19:32,940
and just as a conclusion

500
00:19:32,940 --> 00:19:36,179
the authors gave new constructions of

501
00:19:36,179 --> 00:19:38,460
reusable nisc and reusable two-sided Nic

502
00:19:38,460 --> 00:19:40,740
protocols they're instantiable from

503
00:19:40,740 --> 00:19:43,260
almost all known standard assumptions in

504
00:19:43,260 --> 00:19:47,460
cryptography CDH lwe so forth and the

505
00:19:47,460 --> 00:19:49,380
open problems here are to remove random

506
00:19:49,380 --> 00:19:52,140
oracles from the construction remove the

507
00:19:52,140 --> 00:19:53,400
need for additively homorphic

508
00:19:53,400 --> 00:19:55,679
commitments from the two-sided protocol

509
00:19:55,679 --> 00:19:58,200
and improve the concrete efficiency

510
00:19:58,200 --> 00:20:00,900
and thank you for detention and I direct

511
00:20:00,900 --> 00:20:03,419
most of the questions to the authors

512
00:20:03,419 --> 00:20:06,320
thank you

513
00:20:07,380 --> 00:20:10,280
thank you

514
00:20:38,220 --> 00:20:40,860
okay the next talk is malicious secure

515
00:20:40,860 --> 00:20:43,679
Mr nisk in the play model by Rex

516
00:20:43,679 --> 00:20:45,120
Fernando

517
00:20:45,120 --> 00:20:48,240
ayush Xian Elan komarkoski and Rex is

518
00:20:48,240 --> 00:20:50,340
giving the talk

519
00:20:50,340 --> 00:20:53,120
thanks for the introduction

520
00:20:54,720 --> 00:20:57,120
to be focusing on a primitive called Mr

521
00:20:57,120 --> 00:21:00,120
nisk and this primitive generalizes to

522
00:21:00,120 --> 00:21:03,059
run NPC and I'll be talking about how to

523
00:21:03,059 --> 00:21:04,679
achieve malicious security for this

524
00:21:04,679 --> 00:21:06,360
primitive in the play model

525
00:21:06,360 --> 00:21:08,580
and this is Joint work with ayush Jain

526
00:21:08,580 --> 00:21:10,799
and Ilan kumagutsky

527
00:21:10,799 --> 00:21:14,340
so let's start by quickly reviewing the

528
00:21:14,340 --> 00:21:17,340
the goal of NPC so let's say that there

529
00:21:17,340 --> 00:21:18,840
is a set of parties and these parties

530
00:21:18,840 --> 00:21:20,520
have some private input

531
00:21:20,520 --> 00:21:22,020
and these parties don't want to share

532
00:21:22,020 --> 00:21:24,120
their private input with anyone else but

533
00:21:24,120 --> 00:21:25,799
the parties also want to answer some

534
00:21:25,799 --> 00:21:28,200
question about the joint set of inputs

535
00:21:28,200 --> 00:21:30,600
so what MPC does is allows these parties

536
00:21:30,600 --> 00:21:32,520
to communicate to learn the output to

537
00:21:32,520 --> 00:21:34,980
this question or more generally the

538
00:21:34,980 --> 00:21:37,440
output of you know the evaluation of any

539
00:21:37,440 --> 00:21:39,299
efficient function over their inputs

540
00:21:39,299 --> 00:21:41,940
while still respecting the privacy of

541
00:21:41,940 --> 00:21:44,520
each individual party

542
00:21:44,520 --> 00:21:46,260
so in this talk we're going to be

543
00:21:46,260 --> 00:21:49,020
focusing on two important areas of study

544
00:21:49,020 --> 00:21:52,919
in the MPC literature so the first area

545
00:21:52,919 --> 00:21:55,740
of study concerns the security model so

546
00:21:55,740 --> 00:21:58,740
early NPC results focused on proving

547
00:21:58,740 --> 00:22:00,299
Security in What's called the Standalone

548
00:22:00,299 --> 00:22:03,419
setting and in this setting it's assumed

549
00:22:03,419 --> 00:22:04,559
that all the parties are completely

550
00:22:04,559 --> 00:22:06,299
isolated from the outside world where

551
00:22:06,299 --> 00:22:08,820
they're participating in this protocol

552
00:22:08,820 --> 00:22:10,679
but of course this isn't very realistic

553
00:22:10,679 --> 00:22:12,240
because in you know in real life there's

554
00:22:12,240 --> 00:22:13,679
nothing stopping these parties from

555
00:22:13,679 --> 00:22:15,179
talking to other people all the protocol

556
00:22:15,179 --> 00:22:16,380
is going on

557
00:22:16,380 --> 00:22:19,020
so it's an important goal in NPC to

558
00:22:19,020 --> 00:22:21,419
prove security for protocols in this

559
00:22:21,419 --> 00:22:25,220
more realistic concurrent setting

560
00:22:26,419 --> 00:22:30,179
so another important goal in MPC in the

561
00:22:30,179 --> 00:22:32,159
MPC literature is studying the number of

562
00:22:32,159 --> 00:22:34,020
rounds of interaction that's required

563
00:22:34,020 --> 00:22:37,679
for security so in other rounds let's

564
00:22:37,679 --> 00:22:39,780
say we assume we have a simultaneous

565
00:22:39,780 --> 00:22:41,100
broadcast channel

566
00:22:41,100 --> 00:22:43,620
uh the question is how many back and

567
00:22:43,620 --> 00:22:45,419
forth messages do we need in order to

568
00:22:45,419 --> 00:22:47,700
get security

569
00:22:47,700 --> 00:22:50,880
so in this talk we'll focus on these two

570
00:22:50,880 --> 00:22:52,740
goals with respect to protocols that

571
00:22:52,740 --> 00:22:54,780
work in the plane model so that is they

572
00:22:54,780 --> 00:22:56,760
don't have any trusted setup phase and

573
00:22:56,760 --> 00:22:58,620
they don't have a random Oracle

574
00:22:58,620 --> 00:23:01,260
so in this setting along you know

575
00:23:01,260 --> 00:23:03,720
sequence of Works has eventually shown

576
00:23:03,720 --> 00:23:06,539
that it's possible to achieve Security

577
00:23:06,539 --> 00:23:08,100
in four rounds

578
00:23:08,100 --> 00:23:09,960
and on the other hand it's also been

579
00:23:09,960 --> 00:23:12,419
shown that this is the best we can hope

580
00:23:12,419 --> 00:23:15,299
for that three rounds is impossible

581
00:23:15,299 --> 00:23:17,280
and unfortunately it's also been shown

582
00:23:17,280 --> 00:23:19,860
that uh concurrent Security in any

583
00:23:19,860 --> 00:23:21,480
number of rounds is impossible in the

584
00:23:21,480 --> 00:23:23,900
plane model

585
00:23:24,299 --> 00:23:25,799
so in order to get around these

586
00:23:25,799 --> 00:23:27,840
impossibility results we're going to use

587
00:23:27,840 --> 00:23:29,940
a relaxation of security that's called

588
00:23:29,940 --> 00:23:33,000
super polynomial simulation or SPS

589
00:23:33,000 --> 00:23:37,500
and the idea is that so in normal NPC we

590
00:23:37,500 --> 00:23:39,059
allow the simulator to have like an

591
00:23:39,059 --> 00:23:41,220
arbitrary polynomial blob in the running

592
00:23:41,220 --> 00:23:43,620
time compared to its real world

593
00:23:43,620 --> 00:23:46,799
adversary counterpart

594
00:23:46,799 --> 00:23:49,320
um so in SPS we're going to relax this

595
00:23:49,320 --> 00:23:51,600
so we're going to allow the simulator to

596
00:23:51,600 --> 00:23:53,460
have a you know a slightly super

597
00:23:53,460 --> 00:23:56,539
polynomial blow up

598
00:23:57,360 --> 00:24:01,260
so in terms of SPS several Works have

599
00:24:01,260 --> 00:24:03,240
shown that this relaxed definition can

600
00:24:03,240 --> 00:24:05,700
be used to get around both impossibility

601
00:24:05,700 --> 00:24:08,580
results before from before so first of

602
00:24:08,580 --> 00:24:11,659
all it's up it's possible to get

603
00:24:11,659 --> 00:24:14,640
concurrent Security in the plane model

604
00:24:14,640 --> 00:24:17,100
and also it's possible to achieve

605
00:24:17,100 --> 00:24:19,260
protocols that work in three rounds so

606
00:24:19,260 --> 00:24:21,900
the round Berry is also

607
00:24:21,900 --> 00:24:24,000
is it can get around the round barrier

608
00:24:24,000 --> 00:24:25,020
as well

609
00:24:25,020 --> 00:24:27,360
so the goal of our work is to explore

610
00:24:27,360 --> 00:24:29,659
the space at the bottom of the slide

611
00:24:29,659 --> 00:24:32,220
and as a first step towards this I can

612
00:24:32,220 --> 00:24:34,620
tell you that we achieve a two-round

613
00:24:34,620 --> 00:24:36,960
concurrent secure MPC protocol in the

614
00:24:36,960 --> 00:24:38,039
plane model

615
00:24:38,039 --> 00:24:40,500
so now the only thing that's left is one

616
00:24:40,500 --> 00:24:43,919
round so is one round even possible so

617
00:24:43,919 --> 00:24:46,080
it turns out that the answer is no and

618
00:24:46,080 --> 00:24:49,679
there is actually a very simple uh a

619
00:24:49,679 --> 00:24:51,539
very simple argument that can be used to

620
00:24:51,539 --> 00:24:53,700
show this and I'll explain this to you

621
00:24:53,700 --> 00:24:56,280
now so let's say these three parties

622
00:24:56,280 --> 00:24:58,320
Alice Bob and Eve want to evaluate some

623
00:24:58,320 --> 00:24:59,760
function f

624
00:24:59,760 --> 00:25:02,460
and let's say that they have a one round

625
00:25:02,460 --> 00:25:04,140
protocol to do this

626
00:25:04,140 --> 00:25:06,360
so just by this one this protocol being

627
00:25:06,360 --> 00:25:08,460
one round I can show you that it's

628
00:25:08,460 --> 00:25:10,020
insecure now

629
00:25:10,020 --> 00:25:12,840
so let's say Eve is malicious so she can

630
00:25:12,840 --> 00:25:15,299
do the following attack so she can come

631
00:25:15,299 --> 00:25:18,240
up with any arbitrary X3 Prime

632
00:25:18,240 --> 00:25:22,020
and she can find she can determine she

633
00:25:22,020 --> 00:25:24,000
can find the evaluation of f with

634
00:25:24,000 --> 00:25:26,220
respect to X3 Prime and with respect to

635
00:25:26,220 --> 00:25:29,880
Alice and Bob's private inputs uh just

636
00:25:29,880 --> 00:25:32,100
in her head just by replaying replaying

637
00:25:32,100 --> 00:25:34,679
the protocol in her head and she can

638
00:25:34,679 --> 00:25:36,480
actually do this in arbitrary amount of

639
00:25:36,480 --> 00:25:37,980
times as she so she can learn an

640
00:25:37,980 --> 00:25:40,620
arbitrary number of evaluations so this

641
00:25:40,620 --> 00:25:42,960
is called the residue residual function

642
00:25:42,960 --> 00:25:45,200
attack

643
00:25:46,020 --> 00:25:48,059
um and of course this leakage about

644
00:25:48,059 --> 00:25:50,880
Alice and Bob's input is like way more

645
00:25:50,880 --> 00:25:53,580
than what a secure protocol would allow

646
00:25:53,580 --> 00:25:56,400
for so this means that this this

647
00:25:56,400 --> 00:25:58,620
protocol is insecure

648
00:25:58,620 --> 00:26:00,720
okay so non-interactive mpca is

649
00:26:00,720 --> 00:26:02,460
impossible but you know let's say we're

650
00:26:02,460 --> 00:26:05,100
stubborn and we want we don't we don't

651
00:26:05,100 --> 00:26:07,919
want to accept this so I can tell you a

652
00:26:07,919 --> 00:26:09,900
way to get some of the properties of

653
00:26:09,900 --> 00:26:12,419
non-interactive NPC without running into

654
00:26:12,419 --> 00:26:14,940
this problem and the idea is as follows

655
00:26:14,940 --> 00:26:17,340
so this system is going to work with

656
00:26:17,340 --> 00:26:19,380
respect to what we're going to call a

657
00:26:19,380 --> 00:26:21,179
public bulletin board that everyone can

658
00:26:21,179 --> 00:26:22,980
see at all times

659
00:26:22,980 --> 00:26:25,860
and as a first step all the parties are

660
00:26:25,860 --> 00:26:27,480
going to publish non-interactive

661
00:26:27,480 --> 00:26:29,220
commitments special non-interactive

662
00:26:29,220 --> 00:26:31,980
commitments to their inputs

663
00:26:31,980 --> 00:26:33,900
so once this phase is done let's say the

664
00:26:33,900 --> 00:26:36,299
parties want to evaluate F again so they

665
00:26:36,299 --> 00:26:38,340
can do this using a single additional

666
00:26:38,340 --> 00:26:41,299
round of interaction

667
00:26:41,760 --> 00:26:45,840
and uh so in addition this this is this

668
00:26:45,840 --> 00:26:48,240
system is going to allow reuse so if the

669
00:26:48,240 --> 00:26:49,919
parties want to evaluate F Prime now

670
00:26:49,919 --> 00:26:52,080
they can again do this in one round

671
00:26:52,080 --> 00:26:55,500
so by by this the like as the number of

672
00:26:55,500 --> 00:26:58,380
evaluations goes up the the cost the

673
00:26:58,380 --> 00:27:02,700
round cost per evaluation approaches one

674
00:27:02,700 --> 00:27:05,220
so finally the system is going to allow

675
00:27:05,220 --> 00:27:08,279
for parties to join at any time simply

676
00:27:08,279 --> 00:27:10,860
by publishing you know non-interactive

677
00:27:10,860 --> 00:27:13,020
commitments to their inputs and as soon

678
00:27:13,020 --> 00:27:14,279
as they've done this they can

679
00:27:14,279 --> 00:27:16,980
participate in any subsequent function

680
00:27:16,980 --> 00:27:18,600
evaluation phases

681
00:27:18,600 --> 00:27:20,940
and additionally these function

682
00:27:20,940 --> 00:27:23,159
evaluation phases can take take place

683
00:27:23,159 --> 00:27:25,440
with respect to a subset of parties and

684
00:27:25,440 --> 00:27:26,760
the parties that aren't participating

685
00:27:26,760 --> 00:27:28,860
they don't have to communicate at all

686
00:27:28,860 --> 00:27:32,340
for this for these phases to work

687
00:27:32,340 --> 00:27:34,620
okay so this primitive that I just

688
00:27:34,620 --> 00:27:36,720
described is called multi-party reusable

689
00:27:36,720 --> 00:27:39,600
non-interactive secure computation or Mr

690
00:27:39,600 --> 00:27:41,220
nisk

691
00:27:41,220 --> 00:27:42,840
um and it strictly generalizes to around

692
00:27:42,840 --> 00:27:45,600
NBC and it was first proposed by Ben

693
00:27:45,600 --> 00:27:49,140
hamura and Lynn in 2020 but in terms of

694
00:27:49,140 --> 00:27:50,820
plain model protocols they were only

695
00:27:50,820 --> 00:27:52,980
able to achieve a semi malicious

696
00:27:52,980 --> 00:27:55,260
security which is a weaker version of

697
00:27:55,260 --> 00:27:57,900
security where the adversary is assumed

698
00:27:57,900 --> 00:28:00,240
to follow the protocol specification

699
00:28:00,240 --> 00:28:03,419
honestly and no guarantees are made if

700
00:28:03,419 --> 00:28:06,419
this assumption doesn't hold

701
00:28:06,419 --> 00:28:08,279
okay so with that in mind I can tell you

702
00:28:08,279 --> 00:28:10,679
about our main result so we achieved the

703
00:28:10,679 --> 00:28:13,440
first construction of Mr nisk that's

704
00:28:13,440 --> 00:28:15,720
maliciously secure in the plane model

705
00:28:15,720 --> 00:28:18,419
and we do this using sub-exponential

706
00:28:18,419 --> 00:28:20,760
variants of the following assumptions so

707
00:28:20,760 --> 00:28:24,179
first we assume IO second we assume ddh

708
00:28:24,179 --> 00:28:26,640
and third we assume the existence of a

709
00:28:26,640 --> 00:28:29,419
Time Block Puzzle

710
00:28:30,240 --> 00:28:32,700
so in the course of achieving this main

711
00:28:32,700 --> 00:28:36,059
result we also achieve two intermediate

712
00:28:36,059 --> 00:28:37,500
results that we also think are

713
00:28:37,500 --> 00:28:39,179
independently interesting

714
00:28:39,179 --> 00:28:41,820
first we Define and construct a new

715
00:28:41,820 --> 00:28:43,620
strong variant of two round zero

716
00:28:43,620 --> 00:28:44,820
knowledge

717
00:28:44,820 --> 00:28:48,559
and second we also construct a new

718
00:28:48,559 --> 00:28:51,539
one-round non-valuable commitment

719
00:28:51,539 --> 00:28:53,340
and notably this commitment doesn't

720
00:28:53,340 --> 00:28:56,899
require a keyless hash functions

721
00:28:56,940 --> 00:28:58,919
so in the interest of time for the rest

722
00:28:58,919 --> 00:29:01,200
of the talk I'm going to focus on

723
00:29:01,200 --> 00:29:03,360
explaining this new zero knowledge so

724
00:29:03,360 --> 00:29:04,980
I'll explain the new definition and why

725
00:29:04,980 --> 00:29:06,960
we need it

726
00:29:06,960 --> 00:29:10,080
so to uh to motivate this this new

727
00:29:10,080 --> 00:29:12,059
definition first let's quickly talk

728
00:29:12,059 --> 00:29:14,279
about the high-level approach that we're

729
00:29:14,279 --> 00:29:16,500
going to use in order to up to to get

730
00:29:16,500 --> 00:29:18,059
malicious security

731
00:29:18,059 --> 00:29:19,799
and what we're going to do is we're

732
00:29:19,799 --> 00:29:22,799
going to take a semi-malicious secure Mr

733
00:29:22,799 --> 00:29:25,200
nisk like such as the one of Ben hammur

734
00:29:25,200 --> 00:29:27,000
and Lin and we're going to upgrade

735
00:29:27,000 --> 00:29:29,820
security using zero knowledge so this is

736
00:29:29,820 --> 00:29:32,399
a very common approach and the idea is

737
00:29:32,399 --> 00:29:35,220
that is that we can use zero knowledge

738
00:29:35,220 --> 00:29:36,539
to enforce honest Behavior that's

739
00:29:36,539 --> 00:29:40,399
required for semi malicious security

740
00:29:40,559 --> 00:29:42,779
okay so for this part of the talk I'm

741
00:29:42,779 --> 00:29:45,120
just going to sort of ignore the

742
00:29:45,120 --> 00:29:47,580
reusability aspect of a minusk I'm just

743
00:29:47,580 --> 00:29:48,720
going to treat it as a two round

744
00:29:48,720 --> 00:29:49,919
protocol

745
00:29:49,919 --> 00:29:52,380
okay so what are our constraints in this

746
00:29:52,380 --> 00:29:54,659
setting so first there's the round

747
00:29:54,659 --> 00:29:56,940
constraints so we only have two rounds

748
00:29:56,940 --> 00:29:59,760
and second we also know that in this

749
00:29:59,760 --> 00:30:01,740
setting in the plane model the best we

750
00:30:01,740 --> 00:30:03,360
can hope for in terms of zero knowledge

751
00:30:03,360 --> 00:30:05,820
is two rounds as well and this is

752
00:30:05,820 --> 00:30:07,679
because non-interactive zero knowledge

753
00:30:07,679 --> 00:30:10,500
is impossible without setup

754
00:30:10,500 --> 00:30:12,419
so what does this mean for us this means

755
00:30:12,419 --> 00:30:14,279
we can't check the validity of the

756
00:30:14,279 --> 00:30:16,320
proofs until after the protocol is

757
00:30:16,320 --> 00:30:18,559
finished

758
00:30:19,140 --> 00:30:21,179
um so let's think about how this plays

759
00:30:21,179 --> 00:30:22,740
out so let's say there's an adversary

760
00:30:22,740 --> 00:30:24,720
that corrupts some of the parties and

761
00:30:24,720 --> 00:30:27,600
causes uh let's say that this adversary

762
00:30:27,600 --> 00:30:30,000
causes the first round to be dishonest

763
00:30:30,000 --> 00:30:33,720
in terms of the semi malicious protocol

764
00:30:33,720 --> 00:30:35,820
so what this means is that now the

765
00:30:35,820 --> 00:30:37,679
honest parties actually have to send out

766
00:30:37,679 --> 00:30:39,679
their round two semi-malicious messages

767
00:30:39,679 --> 00:30:42,659
before knowing that before finding out

768
00:30:42,659 --> 00:30:45,419
that this round one is dishonest

769
00:30:45,419 --> 00:30:48,120
and in particular if we if we send out

770
00:30:48,120 --> 00:30:49,799
these if these honest parties send out

771
00:30:49,799 --> 00:30:51,960
these messages in the clear that means

772
00:30:51,960 --> 00:30:53,580
that semi malicious security actually

773
00:30:53,580 --> 00:30:57,199
guarantees nothing in this case

774
00:30:58,260 --> 00:31:01,320
so to get around this problem uh what we

775
00:31:01,320 --> 00:31:03,240
would like is some sort of way to send

776
00:31:03,240 --> 00:31:06,600
out an encrypted version of round two in

777
00:31:06,600 --> 00:31:09,840
a way that it's only decryptable if the

778
00:31:09,840 --> 00:31:13,820
first round is honestly generated

779
00:31:14,220 --> 00:31:16,260
so this sounds like a perfect job for

780
00:31:16,260 --> 00:31:18,240
witness encryption so if if you're not

781
00:31:18,240 --> 00:31:19,860
familiar with Fitness encryption the

782
00:31:19,860 --> 00:31:22,140
idea is it's an encryption scheme that

783
00:31:22,140 --> 00:31:24,260
allows you to encrypt arbitrary messages

784
00:31:24,260 --> 00:31:26,640
so in our case we're going to encrypt

785
00:31:26,640 --> 00:31:28,320
round two

786
00:31:28,320 --> 00:31:31,799
and instead of having a public key the

787
00:31:31,799 --> 00:31:33,419
encryption is given with respect to a

788
00:31:33,419 --> 00:31:35,100
statement in NP

789
00:31:35,100 --> 00:31:36,899
and the idea is that if you have a

790
00:31:36,899 --> 00:31:38,580
witness for the statement you can

791
00:31:38,580 --> 00:31:39,539
decrypt

792
00:31:39,539 --> 00:31:41,159
and on the other hand if the statement

793
00:31:41,159 --> 00:31:43,799
is false so in our case if round one is

794
00:31:43,799 --> 00:31:44,940
dishonest

795
00:31:44,940 --> 00:31:46,500
then standard ciphertext

796
00:31:46,500 --> 00:31:48,120
indistinguishability holds so the

797
00:31:48,120 --> 00:31:49,799
messages don't reveal anything or the

798
00:31:49,799 --> 00:31:51,059
encryptions don't reveal anything about

799
00:31:51,059 --> 00:31:52,440
the plain texts

800
00:31:52,440 --> 00:31:54,480
so notice that this solves our problem

801
00:31:54,480 --> 00:31:57,120
already or it seems to at least because

802
00:31:57,120 --> 00:32:00,059
now in the dishonest case if round one

803
00:32:00,059 --> 00:32:02,940
is dishonest then the adversary learns

804
00:32:02,940 --> 00:32:05,520
nothing about round two

805
00:32:05,520 --> 00:32:07,679
but let's think about what happens in

806
00:32:07,679 --> 00:32:09,779
the honest case now so how how can the

807
00:32:09,779 --> 00:32:11,760
parties decrypt now

808
00:32:11,760 --> 00:32:14,580
well so what does the witness look like

809
00:32:14,580 --> 00:32:17,100
it looks like uh you know it has the

810
00:32:17,100 --> 00:32:19,260
secret input and randomness of each

811
00:32:19,260 --> 00:32:20,360
party

812
00:32:20,360 --> 00:32:22,440
and of course

813
00:32:22,440 --> 00:32:24,000
you know it's obvious that these parties

814
00:32:24,000 --> 00:32:26,220
can't reveal these secret inputs and

815
00:32:26,220 --> 00:32:28,500
randomnesses publicly which means that

816
00:32:28,500 --> 00:32:30,480
no one party has this entire witness

817
00:32:30,480 --> 00:32:34,279
which means no party can decrypt

818
00:32:35,220 --> 00:32:37,919
um so this seems like a problem so what

819
00:32:37,919 --> 00:32:40,380
what could we use to fix this well if we

820
00:32:40,380 --> 00:32:42,179
had some sort of privacy preserving

821
00:32:42,179 --> 00:32:44,460
witness that each party could publish

822
00:32:44,460 --> 00:32:46,440
and then the you know this witness for

823
00:32:46,440 --> 00:32:48,299
this statement is a concatenation of

824
00:32:48,299 --> 00:32:51,659
these these privacy preserving Witnesses

825
00:32:51,659 --> 00:32:53,640
um and let's say that these these

826
00:32:53,640 --> 00:32:55,559
Witnesses reveal nothing about the

827
00:32:55,559 --> 00:32:57,720
underlying secret Witnesses then that

828
00:32:57,720 --> 00:32:59,279
would be good right

829
00:32:59,279 --> 00:33:01,380
uh well this should sound very familiar

830
00:33:01,380 --> 00:33:03,059
because what is your knowledge it's it's

831
00:33:03,059 --> 00:33:06,000
exactly that right it's a it's a way to

832
00:33:06,000 --> 00:33:08,460
publish a privacy preserving proof that

833
00:33:08,460 --> 00:33:11,279
convinces a verifier of the validity of

834
00:33:11,279 --> 00:33:12,840
the statement but doesn't but doesn't

835
00:33:12,840 --> 00:33:15,299
reveal the underlying Witness

836
00:33:15,299 --> 00:33:18,299
so let's try to use this so now we can

837
00:33:18,299 --> 00:33:21,600
set the witness that we want to use to

838
00:33:21,600 --> 00:33:23,399
be you know zero knowledge second round

839
00:33:23,399 --> 00:33:25,679
zero knowledge messages from each party

840
00:33:25,679 --> 00:33:27,480
attesting to their honest behavior

841
00:33:27,480 --> 00:33:29,399
during round one

842
00:33:29,399 --> 00:33:32,880
and we can change the the statement that

843
00:33:32,880 --> 00:33:34,919
the witness encryption is going to use

844
00:33:34,919 --> 00:33:37,380
in order to reflect that so now the

845
00:33:37,380 --> 00:33:39,059
statement is that there exists second

846
00:33:39,059 --> 00:33:40,860
round zero knowledge messages which

847
00:33:40,860 --> 00:33:43,620
proves the ability validity of this

848
00:33:43,620 --> 00:33:45,960
inner statement that round one is

849
00:33:45,960 --> 00:33:48,240
honestly generated

850
00:33:48,240 --> 00:33:50,820
and now the idea is or the hope at least

851
00:33:50,820 --> 00:33:52,620
is by soundness of the zero knowledge

852
00:33:52,620 --> 00:33:54,600
protocol this should reduce to the

853
00:33:54,600 --> 00:33:57,918
original statement right

854
00:33:58,080 --> 00:34:00,179
um but now we run into another problem

855
00:34:00,179 --> 00:34:03,299
because uh it seems like now we need the

856
00:34:03,299 --> 00:34:05,399
zero knowledge protocol to satisfy

857
00:34:05,399 --> 00:34:07,679
statistical soundness

858
00:34:07,679 --> 00:34:09,540
um because like with computational

859
00:34:09,540 --> 00:34:12,119
soundness it could be totally possible

860
00:34:12,119 --> 00:34:14,159
that the inner statement is false that

861
00:34:14,159 --> 00:34:16,560
round one is dishonest but there could

862
00:34:16,560 --> 00:34:18,599
exist second round zero knowledge

863
00:34:18,599 --> 00:34:20,520
messages that prove this false statement

864
00:34:20,520 --> 00:34:22,800
even if they're hard to find and

865
00:34:22,800 --> 00:34:24,359
unfortunately witness encryption doesn't

866
00:34:24,359 --> 00:34:27,119
doesn't guarantee anything about you

867
00:34:27,119 --> 00:34:29,280
know in terms of hiding messages that

868
00:34:29,280 --> 00:34:31,679
are encrypted into encrypted with

869
00:34:31,679 --> 00:34:34,260
statements that are not false even if

870
00:34:34,260 --> 00:34:35,940
the witnesses for those statements are

871
00:34:35,940 --> 00:34:38,359
hard to find

872
00:34:38,879 --> 00:34:42,899
so it turns out that achieving a

873
00:34:42,899 --> 00:34:45,179
two-round zero knowledge protocol that

874
00:34:45,179 --> 00:34:46,918
satisfies statistical soundness is

875
00:34:46,918 --> 00:34:49,859
impossible except for like very limited

876
00:34:49,859 --> 00:34:53,820
uh limited sub cases and so the point of

877
00:34:53,820 --> 00:34:58,080
our new zero knowledge notion is to uh

878
00:34:58,080 --> 00:35:01,440
is to provide a sufficiently like a

879
00:35:01,440 --> 00:35:03,720
sufficient uh approximation of

880
00:35:03,720 --> 00:35:05,700
statistical soundness in order to be

881
00:35:05,700 --> 00:35:07,500
able to be used with Fitness encryption

882
00:35:07,500 --> 00:35:09,960
but to still be achievable

883
00:35:09,960 --> 00:35:11,940
and so the notion is going to work as

884
00:35:11,940 --> 00:35:15,240
follows so first we're going to work in

885
00:35:15,240 --> 00:35:18,000
the simultaneous message model so the

886
00:35:18,000 --> 00:35:21,020
first round is going to have a message

887
00:35:21,020 --> 00:35:23,220
simultaneously from the verifier and the

888
00:35:23,220 --> 00:35:24,900
prover

889
00:35:24,900 --> 00:35:27,720
and then this this new zero knowledge

890
00:35:27,720 --> 00:35:29,940
protocol is going to is going to work in

891
00:35:29,940 --> 00:35:31,500
one of two modes

892
00:35:31,500 --> 00:35:33,180
so the first mode we're going to call

893
00:35:33,180 --> 00:35:34,920
perfect soundness mode and the second

894
00:35:34,920 --> 00:35:36,660
we're going to call statistical zero

895
00:35:36,660 --> 00:35:38,160
knowledge mode

896
00:35:38,160 --> 00:35:40,619
and moreover the the mode is going to be

897
00:35:40,619 --> 00:35:42,720
determined completely by the round one

898
00:35:42,720 --> 00:35:45,180
transcript so once round one is fixed

899
00:35:45,180 --> 00:35:48,618
that also fixes the mode

900
00:35:49,140 --> 00:35:51,599
and perfect soundness mode is what it

901
00:35:51,599 --> 00:35:54,060
sounds like so if we're if we fixed

902
00:35:54,060 --> 00:35:55,859
around one transcript that fixes perfect

903
00:35:55,859 --> 00:35:58,500
soundness mode then for any X that's not

904
00:35:58,500 --> 00:36:00,300
in the language there shouldn't exist

905
00:36:00,300 --> 00:36:02,099
any second round accepting zero

906
00:36:02,099 --> 00:36:04,579
knowledge messages

907
00:36:05,760 --> 00:36:07,800
and on the other hand the statistical

908
00:36:07,800 --> 00:36:10,140
zero knowledge mode says that there

909
00:36:10,140 --> 00:36:12,540
should exist a simulator such that in

910
00:36:12,540 --> 00:36:13,579
this mode

911
00:36:13,579 --> 00:36:15,660
this simulator should be able to

912
00:36:15,660 --> 00:36:18,180
generate uh second round messages such

913
00:36:18,180 --> 00:36:19,920
that the transcript is statistically

914
00:36:19,920 --> 00:36:22,380
indistinguishable from a real world

915
00:36:22,380 --> 00:36:24,920
interaction

916
00:36:25,440 --> 00:36:27,660
and we're going to require that the the

917
00:36:27,660 --> 00:36:29,460
perfect soundness mode happens with some

918
00:36:29,460 --> 00:36:33,599
tunable negligible probability mu

919
00:36:33,599 --> 00:36:35,760
um and this is going like it'll happen

920
00:36:35,760 --> 00:36:37,980
with this probability assuming that the

921
00:36:37,980 --> 00:36:39,480
prover and the verifier are

922
00:36:39,480 --> 00:36:41,040
computationally bounded when they

923
00:36:41,040 --> 00:36:44,540
generate their first round messages

924
00:36:44,700 --> 00:36:46,800
and we're also going to require that a

925
00:36:46,800 --> 00:36:48,960
computational approver cannot tell what

926
00:36:48,960 --> 00:36:52,339
mode the protocol is in

927
00:36:52,859 --> 00:36:54,960
okay so let's think about how we use

928
00:36:54,960 --> 00:36:56,880
this new zero knowledge definition in

929
00:36:56,880 --> 00:36:59,400
order to solve the problem from before

930
00:36:59,400 --> 00:37:01,740
so let's imagine that we're using you

931
00:37:01,740 --> 00:37:03,359
know the same setup but we're now using

932
00:37:03,359 --> 00:37:06,000
our new zero knowledge and let's say

933
00:37:06,000 --> 00:37:07,859
that there's an adversary that corrupts

934
00:37:07,859 --> 00:37:09,140
the first round

935
00:37:09,140 --> 00:37:12,000
but can somehow learn something about

936
00:37:12,000 --> 00:37:13,680
the encrypted second round that it

937
00:37:13,680 --> 00:37:15,660
shouldn't so learn something non-trivial

938
00:37:15,660 --> 00:37:19,920
about this second round uh plain text

939
00:37:19,920 --> 00:37:22,560
so the first observation that we that we

940
00:37:22,560 --> 00:37:24,599
can make is that whatever this adversary

941
00:37:24,599 --> 00:37:26,460
learns it should still be able to learn

942
00:37:26,460 --> 00:37:28,800
this information in perfect soundness

943
00:37:28,800 --> 00:37:31,020
mode given that you know given that the

944
00:37:31,020 --> 00:37:32,760
zero knowledge protocol is in this mode

945
00:37:32,760 --> 00:37:37,140
and this is because uh the the two modes

946
00:37:37,140 --> 00:37:39,920
are indistinguishable

947
00:37:40,260 --> 00:37:42,960
but notice that now that we're in this

948
00:37:42,960 --> 00:37:44,700
mode now that we're conditioning on

949
00:37:44,700 --> 00:37:47,460
being in this mode uh this statement

950
00:37:47,460 --> 00:37:49,560
that we used to generate the witness

951
00:37:49,560 --> 00:37:51,839
encryption is now false right because

952
00:37:51,839 --> 00:37:54,359
the inner statement is false round round

953
00:37:54,359 --> 00:37:57,359
one is dishonest and so uh since we're

954
00:37:57,359 --> 00:37:58,920
in this mode there there don't exist

955
00:37:58,920 --> 00:38:01,560
second round ZK messages that prove

956
00:38:01,560 --> 00:38:03,900
false statements

957
00:38:03,900 --> 00:38:06,660
so then if if the witness encryption

958
00:38:06,660 --> 00:38:08,520
itself is strong enough or in other

959
00:38:08,520 --> 00:38:11,540
words if the advantage in distinguishing

960
00:38:11,540 --> 00:38:14,180
ciphertexts is guaranteed to be

961
00:38:14,180 --> 00:38:16,680
sufficiently less than the probability

962
00:38:16,680 --> 00:38:18,900
mu of the perfect soundness mode holding

963
00:38:18,900 --> 00:38:21,240
then we have a contradiction And Thus

964
00:38:21,240 --> 00:38:22,740
We've successfully shown that the

965
00:38:22,740 --> 00:38:25,079
witness that using this new zero

966
00:38:25,079 --> 00:38:26,520
knowledge the witness encryption hides

967
00:38:26,520 --> 00:38:29,099
the second round in the case that the

968
00:38:29,099 --> 00:38:32,119
first round is dishonest

969
00:38:32,280 --> 00:38:34,980
okay so that's our new definition of

970
00:38:34,980 --> 00:38:37,800
zero knowledge and how we use it and so

971
00:38:37,800 --> 00:38:40,020
we're able to construct this new

972
00:38:40,020 --> 00:38:41,339
definition using the following

973
00:38:41,339 --> 00:38:42,859
assumptions

974
00:38:42,859 --> 00:38:45,780
and like I just explained this is one of

975
00:38:45,780 --> 00:38:47,940
the you know the main technical tools

976
00:38:47,940 --> 00:38:50,040
that we use in constructing our mrnisk

977
00:38:50,040 --> 00:38:52,339
protocol

978
00:38:52,500 --> 00:38:55,079
so I'll just quickly touch on some other

979
00:38:55,079 --> 00:38:57,000
challenges that I won't have time to get

980
00:38:57,000 --> 00:38:58,380
into

981
00:38:58,380 --> 00:39:01,320
um which I thought were interesting

982
00:39:01,320 --> 00:39:04,500
um so first when constructing a minus we

983
00:39:04,500 --> 00:39:06,720
had to deal with extraction

984
00:39:06,720 --> 00:39:08,700
um we have to you know the simulator has

985
00:39:08,700 --> 00:39:11,700
to extract the corrupted party's inputs

986
00:39:11,700 --> 00:39:15,180
and so to do this we needed one round

987
00:39:15,180 --> 00:39:16,980
not valuable commitments which we

988
00:39:16,980 --> 00:39:19,440
constructed in the paper

989
00:39:19,440 --> 00:39:22,140
um second we had to you know we had to

990
00:39:22,140 --> 00:39:23,820
make everything reusable in order to

991
00:39:23,820 --> 00:39:27,480
satisfy the Mi definition and this was

992
00:39:27,480 --> 00:39:29,220
particularly challenging in the context

993
00:39:29,220 --> 00:39:30,780
of the zero knowledge protocol it was

994
00:39:30,780 --> 00:39:33,300
hard to make that protocol reusable

995
00:39:33,300 --> 00:39:35,460
and finally when we were constructing

996
00:39:35,460 --> 00:39:37,740
the complexity hierarchy to make to make

997
00:39:37,740 --> 00:39:40,920
all the proofs fit together

998
00:39:40,920 --> 00:39:42,980
um

999
00:39:43,140 --> 00:39:45,240
you know it was it was challenging to to

1000
00:39:45,240 --> 00:39:46,980
come up with a hierarchy that made the

1001
00:39:46,980 --> 00:39:49,320
hybrids go through and we ended up using

1002
00:39:49,320 --> 00:39:54,079
multiple axis of hardness to do this

1003
00:39:54,480 --> 00:39:56,339
and I'll refer you to the paper for

1004
00:39:56,339 --> 00:39:58,320
details on this

1005
00:39:58,320 --> 00:40:01,140
okay so I'll just restate our main

1006
00:40:01,140 --> 00:40:02,720
results so we achieved the first

1007
00:40:02,720 --> 00:40:05,160
malicious secure amarnisk in the plane

1008
00:40:05,160 --> 00:40:06,780
model

1009
00:40:06,780 --> 00:40:07,380
um

1010
00:40:07,380 --> 00:40:09,599
uh and we also in the course of doing

1011
00:40:09,599 --> 00:40:11,940
this we achieved two other intermediate

1012
00:40:11,940 --> 00:40:13,320
results which we think

1013
00:40:13,320 --> 00:40:15,960
are uh independently interesting so that

1014
00:40:15,960 --> 00:40:18,950
concludes my talk thanks

1015
00:40:18,950 --> 00:40:21,900
[Applause]

1016
00:40:21,900 --> 00:40:24,540
thank you we have time for a quick

1017
00:40:24,540 --> 00:40:26,839
question

1018
00:40:28,380 --> 00:40:31,260
okay what is the Assumption underlying

1019
00:40:31,260 --> 00:40:33,300
that time lock puzzle

1020
00:40:33,300 --> 00:40:35,400
what is the Assumption underlying the

1021
00:40:35,400 --> 00:40:38,640
time in occupiesel you can use you can

1022
00:40:38,640 --> 00:40:41,940
use the RSW assumption oh okay you can

1023
00:40:41,940 --> 00:40:43,619
also build it from i o and slow

1024
00:40:43,619 --> 00:40:45,839
functions I think those are the two main

1025
00:40:45,839 --> 00:40:48,540
ways to build timeout buses okay

1026
00:40:48,540 --> 00:40:51,540
thank you thank you this speaker again

1027
00:40:51,540 --> 00:40:54,619
[Applause]

1028
00:41:19,680 --> 00:41:22,320
okay the last talk is minimizing setup

1029
00:41:22,320 --> 00:41:25,859
in broadcast optimal to around MPC by

1030
00:41:25,859 --> 00:41:30,200
Van Dam guard Diva Ravi Luis assign

1031
00:41:30,200 --> 00:41:33,359
and Sofia is getting the thought sorry

1032
00:41:33,359 --> 00:41:37,380
Luis is giving the talk hi so this is a

1033
00:41:37,380 --> 00:41:39,960
joint work with Ivan uh Divi and Sophia

1034
00:41:39,960 --> 00:41:42,960
and I am going to present it so let's

1035
00:41:42,960 --> 00:41:45,720
start with some definition about MPC

1036
00:41:45,720 --> 00:41:48,660
well we have our set of parties that

1037
00:41:48,660 --> 00:41:50,280
they want to compute a common function

1038
00:41:50,280 --> 00:41:53,460
now they are exchanging messages and in

1039
00:41:53,460 --> 00:41:56,160
the end they will get an output and now

1040
00:41:56,160 --> 00:41:58,920
the security of MPC guarantees me that

1041
00:41:58,920 --> 00:42:02,280
nothing except the output is leaked to

1042
00:42:02,280 --> 00:42:04,500
the party as long as the functional also

1043
00:42:04,500 --> 00:42:07,680
so now an important question is to

1044
00:42:07,680 --> 00:42:10,619
understand actually what happened in the

1045
00:42:10,619 --> 00:42:12,960
case that the adversary refused to

1046
00:42:12,960 --> 00:42:14,820
continue the computation at a point and

1047
00:42:14,820 --> 00:42:16,980
just decide to abort what are the

1048
00:42:16,980 --> 00:42:19,920
properties that NPC can guarantee in

1049
00:42:19,920 --> 00:42:22,380
this case well the first notion that we

1050
00:42:22,380 --> 00:42:24,480
can consider is the one of guaranteed

1051
00:42:24,480 --> 00:42:26,760
output delivery which says it doesn't

1052
00:42:26,760 --> 00:42:28,920
matter what the adversary does The

1053
00:42:28,920 --> 00:42:30,780
Honest party are going to retrieve the

1054
00:42:30,780 --> 00:42:33,599
output then we can consider a slightly

1055
00:42:33,599 --> 00:42:35,339
weaker notion which is the one of

1056
00:42:35,339 --> 00:42:38,579
fairness which says if the adversary is

1057
00:42:38,579 --> 00:42:40,260
going to return it does not get the

1058
00:42:40,260 --> 00:42:42,839
output also the honest party don't but

1059
00:42:42,839 --> 00:42:44,880
if the adversary is getting the output

1060
00:42:44,880 --> 00:42:47,400
also the honest party though

1061
00:42:47,400 --> 00:42:50,040
so and then we can consider as an

1062
00:42:50,040 --> 00:42:51,900
incompatible notion which is the one of

1063
00:42:51,900 --> 00:42:54,300
identifiable apart

1064
00:42:54,300 --> 00:42:58,380
which says well the adversaries uh if

1065
00:42:58,380 --> 00:43:00,839
you dial diversary abort is allowed to

1066
00:43:00,839 --> 00:43:04,020
recover the output but at this point all

1067
00:43:04,020 --> 00:43:07,260
the parties unanimously abort and

1068
00:43:07,260 --> 00:43:10,260
identify who caused this computation to

1069
00:43:10,260 --> 00:43:11,880
abort

1070
00:43:11,880 --> 00:43:15,180
and then we can consider another notion

1071
00:43:15,180 --> 00:43:17,060
which is the one of unanimous support

1072
00:43:17,060 --> 00:43:19,260
which has the same guarantee of

1073
00:43:19,260 --> 00:43:21,420
identifiable abort but in this case

1074
00:43:21,420 --> 00:43:23,599
there is no identifiability property

1075
00:43:23,599 --> 00:43:27,180
namely if the the computational boards

1076
00:43:27,180 --> 00:43:30,660
well the old all the parties or

1077
00:43:30,660 --> 00:43:33,480
unanimously or abort and the adversary

1078
00:43:33,480 --> 00:43:35,819
is still allowed to recover the output

1079
00:43:35,819 --> 00:43:38,940
finally we can get the weaker definition

1080
00:43:38,940 --> 00:43:41,160
which is the one of selective abort

1081
00:43:41,160 --> 00:43:44,460
which says well some honest if the

1082
00:43:44,460 --> 00:43:46,500
adversary abort is allowed to recover

1083
00:43:46,500 --> 00:43:49,619
the output and some on aspartame abort

1084
00:43:49,619 --> 00:43:52,700
and some other parties instead May

1085
00:43:52,700 --> 00:43:55,859
retrieve the output so

1086
00:43:55,859 --> 00:43:58,680
if you can see this set of notion you

1087
00:43:58,680 --> 00:44:00,260
can see that when we want to require

1088
00:44:00,260 --> 00:44:03,240
identifiability we are also asking for

1089
00:44:03,240 --> 00:44:06,720
unanimity but what about all these cases

1090
00:44:06,720 --> 00:44:08,660
where actually we cannot get

1091
00:44:08,660 --> 00:44:11,339
identifiability and unanimate unanimity

1092
00:44:11,339 --> 00:44:13,980
at the same time we in our work we are

1093
00:44:13,980 --> 00:44:16,260
asking can we still get some form of

1094
00:44:16,260 --> 00:44:18,300
identifiability which is still

1095
00:44:18,300 --> 00:44:21,180
meaningful in particular what we are

1096
00:44:21,180 --> 00:44:24,060
what we design is a new notion of

1097
00:44:24,060 --> 00:44:26,880
security which is correlated selective

1098
00:44:26,880 --> 00:44:30,060
identifiable about in this new notion if

1099
00:44:30,060 --> 00:44:33,920
the adversary aborts well

1100
00:44:36,619 --> 00:44:38,880
but the party that aboard the

1101
00:44:38,880 --> 00:44:41,240
computation are actually also

1102
00:44:41,240 --> 00:44:44,700
identifying who aborted the competition

1103
00:44:44,700 --> 00:44:47,520
and let me stress here that honest

1104
00:44:47,520 --> 00:44:51,000
parties the Do Not accurate never accuse

1105
00:44:51,000 --> 00:44:54,480
other honest parties of aborting

1106
00:44:54,480 --> 00:44:55,560
okay

1107
00:44:55,560 --> 00:44:59,839
that's in the set of notion of

1108
00:45:00,440 --> 00:45:04,020
guarantees that we can consider in NPC

1109
00:45:04,020 --> 00:45:07,380
and now I am starting to go more in

1110
00:45:07,380 --> 00:45:10,319
details of our work well we focus on two

1111
00:45:10,319 --> 00:45:11,700
round NPC

1112
00:45:11,700 --> 00:45:14,160
which is the optimal round complexity

1113
00:45:14,160 --> 00:45:16,859
and we are asking what is the optimal

1114
00:45:16,859 --> 00:45:19,740
broadcast complexity namely which

1115
00:45:19,740 --> 00:45:21,900
guarantees are possible of the one that

1116
00:45:21,900 --> 00:45:24,359
we saw when we start to limiting the

1117
00:45:24,359 --> 00:45:26,520
number of broadcasts around namely if

1118
00:45:26,520 --> 00:45:28,380
broadcast is available all in the first

1119
00:45:28,380 --> 00:45:30,839
round or in the second round or none of

1120
00:45:30,839 --> 00:45:33,839
the round so there were previous work on

1121
00:45:33,839 --> 00:45:36,300
this setting but the work of con metal

1122
00:45:36,300 --> 00:45:38,520
give a completely character it was the

1123
00:45:38,520 --> 00:45:39,540
first to give a completely

1124
00:45:39,540 --> 00:45:43,020
characterization in the in two round NPC

1125
00:45:43,020 --> 00:45:45,300
setting where we consider a dishonest

1126
00:45:45,300 --> 00:45:47,780
majority

1127
00:45:48,859 --> 00:45:51,720
answered the same question but for the

1128
00:45:51,720 --> 00:45:53,780
case of an honest majority

1129
00:45:53,780 --> 00:45:57,500
so the work of damaga the third

1130
00:45:57,500 --> 00:46:01,440
does rely on a public infrastructure so

1131
00:46:01,440 --> 00:46:04,260
these leaves open the question if what

1132
00:46:04,260 --> 00:46:06,660
is the landscape where instead the

1133
00:46:06,660 --> 00:46:08,640
particle the multi-party computation

1134
00:46:08,640 --> 00:46:11,640
protocol just rely on a common a common

1135
00:46:11,640 --> 00:46:13,740
reference string

1136
00:46:13,740 --> 00:46:16,859
and that's what actually we answer in

1137
00:46:16,859 --> 00:46:18,000
our work

1138
00:46:18,000 --> 00:46:21,359
so this is a big table with a lot also

1139
00:46:21,359 --> 00:46:23,339
previous results and relations about

1140
00:46:23,339 --> 00:46:24,359
that

1141
00:46:24,359 --> 00:46:27,780
the main takeaway of this table is that

1142
00:46:27,780 --> 00:46:31,440
one of our uh our results actually shows

1143
00:46:31,440 --> 00:46:33,720
that if you want to have identifiable

1144
00:46:33,720 --> 00:46:36,260
abort and

1145
00:46:36,260 --> 00:46:39,480
you don't want to have bro you want to

1146
00:46:39,480 --> 00:46:41,099
rely on broadcast just in the second

1147
00:46:41,099 --> 00:46:44,160
round well you need to have a super

1148
00:46:44,160 --> 00:46:46,140
honest majority and the known as

1149
00:46:46,140 --> 00:46:47,819
majority is not enough

1150
00:46:47,819 --> 00:46:50,940
okay so we give a lower bound and the

1151
00:46:50,940 --> 00:46:52,920
matching upper Bound for a for this

1152
00:46:52,920 --> 00:46:55,440
setting among the other result

1153
00:46:55,440 --> 00:46:57,720
let me stress other two things in this

1154
00:46:57,720 --> 00:47:00,839
table well the first is that some of

1155
00:47:00,839 --> 00:47:03,599
this result doesn't hold do not hold

1156
00:47:03,599 --> 00:47:05,760
some of the impossibility not hold for

1157
00:47:05,760 --> 00:47:07,740
the corner case when we have just one

1158
00:47:07,740 --> 00:47:11,160
corruption and I defer to the paper for

1159
00:47:11,160 --> 00:47:13,800
for this case where the landscape change

1160
00:47:13,800 --> 00:47:14,760
a bit

1161
00:47:14,760 --> 00:47:17,460
another important observation here is

1162
00:47:17,460 --> 00:47:19,619
that all the positive results that we

1163
00:47:19,619 --> 00:47:23,160
have actually do not assume uh private

1164
00:47:23,160 --> 00:47:24,839
peer-to-peer channel in the first round

1165
00:47:24,839 --> 00:47:27,180
which means that the first round doesn't

1166
00:47:27,180 --> 00:47:31,020
assume encrypted program okay

1167
00:47:31,020 --> 00:47:34,200
so as an additional result of our work

1168
00:47:34,200 --> 00:47:37,440
we study what's feasible and what not in

1169
00:47:37,440 --> 00:47:39,480
the cost in the context of selective

1170
00:47:39,480 --> 00:47:41,280
identifiable abort

1171
00:47:41,280 --> 00:47:43,980
and uh we give a completely

1172
00:47:43,980 --> 00:47:45,599
characterization for the two round

1173
00:47:45,599 --> 00:47:48,420
setting both in the dishonest majority

1174
00:47:48,420 --> 00:47:51,780
and in the honest majority

1175
00:47:51,780 --> 00:47:54,780
um relying both sincere smpki

1176
00:47:54,780 --> 00:47:58,200
okay and let me stress here that

1177
00:47:58,200 --> 00:47:59,220
actually

1178
00:47:59,220 --> 00:48:01,440
in this specific setting that I

1179
00:48:01,440 --> 00:48:04,460
highlighted the best guarantee possible

1180
00:48:04,460 --> 00:48:07,920
is selective identifiable abort meaning

1181
00:48:07,920 --> 00:48:10,700
we cannot do better so in this setting

1182
00:48:10,700 --> 00:48:14,160
we we actually guarantee some form of

1183
00:48:14,160 --> 00:48:16,440
identifiability which before was not

1184
00:48:16,440 --> 00:48:19,140
possible since identifiable abort is

1185
00:48:19,140 --> 00:48:21,240
impossible in those setting

1186
00:48:21,240 --> 00:48:22,560
okay

1187
00:48:22,560 --> 00:48:25,680
so that's the general overview of our

1188
00:48:25,680 --> 00:48:28,920
result now for the rest of the talk I

1189
00:48:28,920 --> 00:48:33,240
will just focus on one positive result

1190
00:48:33,240 --> 00:48:36,359
namely the one where there is a

1191
00:48:36,359 --> 00:48:37,619
peer-to-peer in the first round

1192
00:48:37,619 --> 00:48:41,160
broadcast in the second round I am using

1193
00:48:41,160 --> 00:48:44,880
as a setup only CRS and I am relying on

1194
00:48:44,880 --> 00:48:47,819
the fact that there is a super honest

1195
00:48:47,819 --> 00:48:50,220
majority of users

1196
00:48:50,220 --> 00:48:52,980
so the high level idea is that we follow

1197
00:48:52,980 --> 00:48:55,260
the same approach of kinetal and

1198
00:48:55,260 --> 00:48:58,440
lamborgh but new challenges are gonna

1199
00:48:58,440 --> 00:49:01,319
arise since the due to the fact that we

1200
00:49:01,319 --> 00:49:04,500
don't use a pki

1201
00:49:04,500 --> 00:49:07,680
so let me also stress that here we are

1202
00:49:07,680 --> 00:49:10,980
not making use of a public private

1203
00:49:10,980 --> 00:49:12,540
channel in the first round

1204
00:49:12,540 --> 00:49:14,220
okay

1205
00:49:14,220 --> 00:49:17,700
so what is the general blueprint

1206
00:49:17,700 --> 00:49:20,160
I am saying I have a protocol that is

1207
00:49:20,160 --> 00:49:22,200
broadcast broadcast and that is

1208
00:49:22,200 --> 00:49:24,960
identifiable aboard and now I want to

1209
00:49:24,960 --> 00:49:28,140
make a compiler which also allows me to

1210
00:49:28,140 --> 00:49:29,760
run it when the first round is

1211
00:49:29,760 --> 00:49:31,680
peer-to-peer

1212
00:49:31,680 --> 00:49:34,079
so the first question can be why we I

1213
00:49:34,079 --> 00:49:37,680
cannot just run this protocol over when

1214
00:49:37,680 --> 00:49:39,599
the first round is peer-to-peer well

1215
00:49:39,599 --> 00:49:42,599
because the adversary can actually send

1216
00:49:42,599 --> 00:49:45,060
different in the first round can send

1217
00:49:45,060 --> 00:49:47,400
different messages to different honest

1218
00:49:47,400 --> 00:49:48,240
party

1219
00:49:48,240 --> 00:49:50,099
and then he will obtain different

1220
00:49:50,099 --> 00:49:53,160
version of the second round message

1221
00:49:53,160 --> 00:49:54,359
so

1222
00:49:54,359 --> 00:49:56,700
and this one is an attack that is not

1223
00:49:56,700 --> 00:49:58,319
considered in the original protocol

1224
00:49:58,319 --> 00:50:00,060
because in the Bro in the broadcast

1225
00:50:00,060 --> 00:50:02,760
round in the original in in the original

1226
00:50:02,760 --> 00:50:04,260
product the first round is over

1227
00:50:04,260 --> 00:50:07,260
broadcast so everybody has the same view

1228
00:50:07,260 --> 00:50:10,200
of the first round

1229
00:50:10,200 --> 00:50:13,140
so now we would like a mechanism such

1230
00:50:13,140 --> 00:50:15,839
that actually the second round is

1231
00:50:15,839 --> 00:50:17,760
released

1232
00:50:17,760 --> 00:50:21,780
only if everybody has the the same only

1233
00:50:21,780 --> 00:50:23,099
if in the end of the first round

1234
00:50:23,099 --> 00:50:26,579
everybody has the same view of the

1235
00:50:26,579 --> 00:50:29,400
around one of the parties so let's say

1236
00:50:29,400 --> 00:50:32,099
that I have a for Simplicity and

1237
00:50:32,099 --> 00:50:34,200
abstracting Away some detail let's have

1238
00:50:34,200 --> 00:50:36,540
let's say that I have a magic box which

1239
00:50:36,540 --> 00:50:38,160
is gonna split out the second round

1240
00:50:38,160 --> 00:50:41,339
message of uh of a party

1241
00:50:41,339 --> 00:50:43,859
given the first round message is over of

1242
00:50:43,859 --> 00:50:45,480
all the other parties

1243
00:50:45,480 --> 00:50:48,300
let's also say that still for Simplicity

1244
00:50:48,300 --> 00:50:51,240
that this round are just one bit

1245
00:50:51,240 --> 00:50:53,819
so in particular we want to evaluate

1246
00:50:53,819 --> 00:50:55,079
this box

1247
00:50:55,079 --> 00:50:58,680
choosing uh choosing the correct bit of

1248
00:50:58,680 --> 00:51:00,900
the of the bear

1249
00:51:00,900 --> 00:51:03,240
so if this first round message of the

1250
00:51:03,240 --> 00:51:06,059
bear is one well we would like that

1251
00:51:06,059 --> 00:51:09,059
everybody has the the green token

1252
00:51:09,059 --> 00:51:12,900
and if the if the the first bit of the

1253
00:51:12,900 --> 00:51:15,900
of the bed is zero we would like that in

1254
00:51:15,900 --> 00:51:18,059
the end of the first on the second round

1255
00:51:18,059 --> 00:51:20,940
to evaluate this box everybody has the

1256
00:51:20,940 --> 00:51:22,140
blue token

1257
00:51:22,140 --> 00:51:23,640
so

1258
00:51:23,640 --> 00:51:25,980
on top of this box we would like to have

1259
00:51:25,980 --> 00:51:28,619
another mechanism such that we could

1260
00:51:28,619 --> 00:51:30,960
share we could distribute these tokens

1261
00:51:30,960 --> 00:51:33,059
and in the end of the second round

1262
00:51:33,059 --> 00:51:36,180
everybody agrees on the same version of

1263
00:51:36,180 --> 00:51:38,760
the token then they need to use based on

1264
00:51:38,760 --> 00:51:40,500
the first round messages of all the

1265
00:51:40,500 --> 00:51:42,599
other parties

1266
00:51:42,599 --> 00:51:47,460
okay so this mechanism was a form of

1267
00:51:47,460 --> 00:51:49,200
this mechanism was already implemented

1268
00:51:49,200 --> 00:51:52,800
by ramgaretal but they use a public

1269
00:51:52,800 --> 00:51:55,140
infrastructure to do it the rely on a

1270
00:51:55,140 --> 00:51:56,400
pki

1271
00:51:56,400 --> 00:51:58,319
instead we come up with a different

1272
00:51:58,319 --> 00:52:01,500
version of this uh this tool called one

1273
00:52:01,500 --> 00:52:02,880
or nothing secret sharing with

1274
00:52:02,880 --> 00:52:05,040
intermediers

1275
00:52:05,040 --> 00:52:07,619
in which we don't we don't make use of

1276
00:52:07,619 --> 00:52:09,660
any pki

1277
00:52:09,660 --> 00:52:13,500
so and in the last part of uh of this

1278
00:52:13,500 --> 00:52:15,540
talk I am just gonna focus on this

1279
00:52:15,540 --> 00:52:18,480
specific mechanism okay

1280
00:52:18,480 --> 00:52:19,859
so

1281
00:52:19,859 --> 00:52:22,200
here is our setting we have these two

1282
00:52:22,200 --> 00:52:24,300
token and we want to communicate this to

1283
00:52:24,300 --> 00:52:27,900
the other parties based on the bit of of

1284
00:52:27,900 --> 00:52:29,640
uh of the bear

1285
00:52:29,640 --> 00:52:33,059
so one thing that uh the sender can do

1286
00:52:33,059 --> 00:52:35,940
is just secret share

1287
00:52:35,940 --> 00:52:38,339
this token let's say the blue token for

1288
00:52:38,339 --> 00:52:40,319
Simplicity we are just gonna focus on

1289
00:52:40,319 --> 00:52:42,720
one token and let's say that I want to

1290
00:52:42,720 --> 00:52:44,940
communicate this this shirt to a

1291
00:52:44,940 --> 00:52:47,760
receiver okay

1292
00:52:47,760 --> 00:52:51,300
one thing that I could do is just to

1293
00:52:51,300 --> 00:52:54,599
send this shirt to the receiver

1294
00:52:54,599 --> 00:52:57,540
and this seems fine right but what about

1295
00:52:57,540 --> 00:53:00,059
the case that the receiver claims he

1296
00:53:00,059 --> 00:53:02,520
didn't receive this share at the same

1297
00:53:02,520 --> 00:53:05,640
time the sender can claim that his and

1298
00:53:05,640 --> 00:53:08,280
his share and the receiver is lying and

1299
00:53:08,280 --> 00:53:10,380
the other party they don't have any way

1300
00:53:10,380 --> 00:53:13,079
any possible way to actually understand

1301
00:53:13,079 --> 00:53:16,140
who is lying between the two

1302
00:53:16,140 --> 00:53:19,020
so here it comes the observation that

1303
00:53:19,020 --> 00:53:20,880
actually in our case we have a lot of

1304
00:53:20,880 --> 00:53:23,640
honest parties right and we can actually

1305
00:53:23,640 --> 00:53:26,040
try and we can actually use these

1306
00:53:26,040 --> 00:53:29,099
parties called also intermediers to

1307
00:53:29,099 --> 00:53:31,380
actually trace and understand if this

1308
00:53:31,380 --> 00:53:34,920
conversation happen or not happened okay

1309
00:53:34,920 --> 00:53:39,480
so now to in order to do that we are

1310
00:53:39,480 --> 00:53:41,819
going to share each shares again

1311
00:53:41,819 --> 00:53:43,800
and send a single sub share to the

1312
00:53:43,800 --> 00:53:45,059
intermediers

1313
00:53:45,059 --> 00:53:47,760
and then they are the intermediers to

1314
00:53:47,760 --> 00:53:49,980
send this shirt to the receiver

1315
00:53:49,980 --> 00:53:53,099
now what happened in this case well in

1316
00:53:53,099 --> 00:53:55,319
order to not be caught

1317
00:53:55,319 --> 00:53:58,440
the sender has to agree at least to n

1318
00:53:58,440 --> 00:54:01,619
minus t intermediers okay at the same

1319
00:54:01,619 --> 00:54:04,559
time the receiver must must be in

1320
00:54:04,559 --> 00:54:06,359
agreement at least with the and minus

1321
00:54:06,359 --> 00:54:08,760
the intermediers so that there should be

1322
00:54:08,760 --> 00:54:11,540
enough support

1323
00:54:14,960 --> 00:54:18,480
otherwise someone will be caught okay

1324
00:54:18,480 --> 00:54:20,700
and this is the exactly the observation

1325
00:54:20,700 --> 00:54:24,240
that is underlying our tool

1326
00:54:24,240 --> 00:54:27,180
so I will give you now a bit more

1327
00:54:27,180 --> 00:54:30,200
details about that

1328
00:54:30,839 --> 00:54:34,740
let's recall what is our setting well we

1329
00:54:34,740 --> 00:54:36,960
have this uh now let's focus on these

1330
00:54:36,960 --> 00:54:39,599
two phases there is a phases between the

1331
00:54:39,599 --> 00:54:41,579
sender and intermediers and another

1332
00:54:41,579 --> 00:54:43,680
phase is between the intermediers and

1333
00:54:43,680 --> 00:54:45,440
the receiver right

1334
00:54:45,440 --> 00:54:47,280
and uh

1335
00:54:47,280 --> 00:54:49,800
so these are two different phases but

1336
00:54:49,800 --> 00:54:51,960
actually in our setting in the first

1337
00:54:51,960 --> 00:54:54,599
round we are we are relying only on

1338
00:54:54,599 --> 00:54:56,760
public Channel and we are only assuming

1339
00:54:56,760 --> 00:54:59,640
a common reference string so how we are

1340
00:54:59,640 --> 00:55:02,099
gonna actually send this share privately

1341
00:55:02,099 --> 00:55:04,859
to the intermediers

1342
00:55:04,859 --> 00:55:07,619
what we are gonna do is actually that in

1343
00:55:07,619 --> 00:55:10,380
the first round we exchange just public

1344
00:55:10,380 --> 00:55:14,099
Keys between each each parties

1345
00:55:14,099 --> 00:55:17,520
so each party has a public key with each

1346
00:55:17,520 --> 00:55:19,319
other parties

1347
00:55:19,319 --> 00:55:22,020
and then what we are going to do is to

1348
00:55:22,020 --> 00:55:24,300
do this transfer these two phase

1349
00:55:24,300 --> 00:55:27,599
transfers just in one round

1350
00:55:27,599 --> 00:55:28,920
so

1351
00:55:28,920 --> 00:55:33,240
let's say let's see the sender as a the

1352
00:55:33,240 --> 00:55:35,940
public Keys over the intermediers right

1353
00:55:35,940 --> 00:55:39,000
for which they have a secret keys

1354
00:55:39,000 --> 00:55:43,680
and now what what she can do well is to

1355
00:55:43,680 --> 00:55:47,220
use is to encrypt each shares who's the

1356
00:55:47,220 --> 00:55:49,140
using the keys of the intermediers

1357
00:55:49,140 --> 00:55:52,380
namely for the first intermediaries she

1358
00:55:52,380 --> 00:55:55,380
will uh she will encrypt the first share

1359
00:55:55,380 --> 00:55:56,819
using the public key of the first

1360
00:55:56,819 --> 00:55:59,280
intermediers and so on and so forth and

1361
00:55:59,280 --> 00:56:01,859
she will prepare all these boxes right

1362
00:56:01,859 --> 00:56:04,319
and she will broadcast all these boxes

1363
00:56:04,319 --> 00:56:07,400
in the broadcast round

1364
00:56:08,040 --> 00:56:12,599
okay but at this point the the boxes are

1365
00:56:12,599 --> 00:56:15,059
only transferred at the intermediers and

1366
00:56:15,059 --> 00:56:17,520
we are already at the second round

1367
00:56:17,520 --> 00:56:20,280
so how actually we are making also the

1368
00:56:20,280 --> 00:56:22,559
second transfer well

1369
00:56:22,559 --> 00:56:24,660
here it comes the second observation

1370
00:56:24,660 --> 00:56:27,780
right because now the intermediers have

1371
00:56:27,780 --> 00:56:30,599
have also exchanged in the first round a

1372
00:56:30,599 --> 00:56:33,839
public key with the receiver

1373
00:56:33,839 --> 00:56:37,079
so what they can do is to transfer their

1374
00:56:37,079 --> 00:56:39,359
decryption capability

1375
00:56:39,359 --> 00:56:42,780
and now they are gonna do that well they

1376
00:56:42,780 --> 00:56:44,460
are going to encrypt their secret key

1377
00:56:44,460 --> 00:56:48,740
using the public key of the receiver

1378
00:56:49,740 --> 00:56:51,599
and they are broadcast that in the

1379
00:56:51,599 --> 00:56:53,819
second round

1380
00:56:53,819 --> 00:56:55,319
okay

1381
00:56:55,319 --> 00:56:56,700
so

1382
00:56:56,700 --> 00:56:59,520
now the observation here is that if the

1383
00:56:59,520 --> 00:57:01,500
sender is not is not going to be caught

1384
00:57:01,500 --> 00:57:05,280
well at least n minus t intermediers

1385
00:57:05,280 --> 00:57:07,980
will get the correct uh we get the

1386
00:57:07,980 --> 00:57:10,680
correct boxes encrypted with their

1387
00:57:10,680 --> 00:57:13,680
public key at the same time at the same

1388
00:57:13,680 --> 00:57:16,559
time the receiver has at least

1389
00:57:16,559 --> 00:57:19,619
easily at least in agreement with the N

1390
00:57:19,619 --> 00:57:22,619
minus t intermediers so in total there

1391
00:57:22,619 --> 00:57:24,780
is an intersection of n minus 2 tea

1392
00:57:24,780 --> 00:57:27,900
party which are agreeing with boso party

1393
00:57:27,900 --> 00:57:31,079
and since our threshold is just one

1394
00:57:31,079 --> 00:57:33,720
third well this we shown the paper that

1395
00:57:33,720 --> 00:57:36,119
actually this is a sufficient to get

1396
00:57:36,119 --> 00:57:39,359
correctness so the receiver can actually

1397
00:57:39,359 --> 00:57:42,839
uh um reconstruct the correct sub-share

1398
00:57:42,839 --> 00:57:46,280
and we are also ensured that the the

1399
00:57:46,280 --> 00:57:49,260
malicious user can at most reconstruct

1400
00:57:49,260 --> 00:57:52,559
one of these two uh one one of these two

1401
00:57:52,559 --> 00:57:54,059
token

1402
00:57:54,059 --> 00:57:56,460
okay and that's a

1403
00:57:56,460 --> 00:58:01,460
what I wanted to say so thanks a lot

1404
00:58:03,720 --> 00:58:07,939
thank you Luisa questions

1405
00:58:10,079 --> 00:58:13,079
okay I have a question uh is the case t

1406
00:58:13,079 --> 00:58:15,420
equal to one very different from the

1407
00:58:15,420 --> 00:58:18,059
cases you presented yeah actually it is

1408
00:58:18,059 --> 00:58:20,460
because here in the case still equal one

1409
00:58:20,460 --> 00:58:22,859
it makes actually a difference if you

1410
00:58:22,859 --> 00:58:24,240
have a private channel in the first

1411
00:58:24,240 --> 00:58:26,280
round or public channel in the first

1412
00:58:26,280 --> 00:58:29,099
round so we are showing that actually if

1413
00:58:29,099 --> 00:58:30,900
your public channel is actually

1414
00:58:30,900 --> 00:58:33,180
impossible for the corner case of t

1415
00:58:33,180 --> 00:58:36,799
equal one and N equal to four

1416
00:58:37,380 --> 00:58:40,520
more questions

1417
00:58:40,920 --> 00:58:43,859
okay thank you Luisa and thank you to

1418
00:58:43,859 --> 00:58:47,420
all this speaker for the session

1419
00:58:51,230 --> 00:58:54,349
[Music]

1420
00:58:54,599 --> 00:58:56,940
is

1421
00:58:56,940 --> 00:58:59,940
yeah

