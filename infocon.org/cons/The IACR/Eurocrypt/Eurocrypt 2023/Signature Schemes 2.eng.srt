1
00:00:01,740 --> 00:00:04,380
okay I guess we can start

2
00:00:04,380 --> 00:00:06,779
good morning everyone and welcome to the

3
00:00:06,779 --> 00:00:08,580
first session of the last day of

4
00:00:08,580 --> 00:00:12,420
eurocrypt 23. uh this uh

5
00:00:12,420 --> 00:00:14,700
session will be on signature schemes and

6
00:00:14,700 --> 00:00:17,460
in particular on signature schemes for

7
00:00:17,460 --> 00:00:19,740
privacy preserving applications

8
00:00:19,740 --> 00:00:21,300
so we have three interesting talks the

9
00:00:21,300 --> 00:00:23,939
first talk is uh revisiting PBS

10
00:00:23,939 --> 00:00:25,740
signatures it's a paper by Stefano

11
00:00:25,740 --> 00:00:28,980
tesano and Chen Chi Chu and chenji will

12
00:00:28,980 --> 00:00:30,060
with the talk

13
00:00:30,060 --> 00:00:32,520
stage it's yours hello everyone yeah

14
00:00:32,520 --> 00:00:34,860
thank you for introduction today I'm

15
00:00:34,860 --> 00:00:37,200
going to uh today I'm going to talk

16
00:00:37,200 --> 00:00:39,780
about our work on PBS signatures it's a

17
00:00:39,780 --> 00:00:41,160
joint work with smart advice there's

18
00:00:41,160 --> 00:00:43,680
Stefano tesaro

19
00:00:43,680 --> 00:00:47,100
okay so VBS signature is a parent-based

20
00:00:47,100 --> 00:00:49,320
scheme and if you know that it is not a

21
00:00:49,320 --> 00:00:52,260
BBS group signatures so for the setup

22
00:00:52,260 --> 00:00:54,960
given a pairing description where P

23
00:00:54,960 --> 00:00:56,879
denotes the group size and e is a

24
00:00:56,879 --> 00:01:00,719
pairing or sample uh two generators G1

25
00:01:00,719 --> 00:01:02,879
H1 of a group

26
00:01:02,879 --> 00:01:06,479
of the group one and of generator G2 of

27
00:01:06,479 --> 00:01:09,000
group 2 and for key generation we

28
00:01:09,000 --> 00:01:12,360
samples a random X and a single key is X

29
00:01:12,360 --> 00:01:15,000
and public key is G2 to the X and for

30
00:01:15,000 --> 00:01:17,220
sign message m

31
00:01:17,220 --> 00:01:20,939
or for example random uh e and then we

32
00:01:20,939 --> 00:01:22,680
compute a as follows

33
00:01:22,680 --> 00:01:25,860
and the final signature is just E and A

34
00:01:25,860 --> 00:01:28,799
and to verify a signature signature is

35
00:01:28,799 --> 00:01:31,680
valid uh if and only if this a to the X

36
00:01:31,680 --> 00:01:35,820
Plus e is equal to G1 times the H1 to

37
00:01:35,820 --> 00:01:38,100
the m so if we're sparing we can

38
00:01:38,100 --> 00:01:40,560
efficiently verify with a public key

39
00:01:40,560 --> 00:01:41,880
as follows

40
00:01:41,880 --> 00:01:44,520
so we can also extend the message to be

41
00:01:44,520 --> 00:01:47,700
a vector in zp and also PBS can be

42
00:01:47,700 --> 00:01:49,799
instantiated from the type 3 pairings

43
00:01:49,799 --> 00:01:51,899
which allows for the most efficient

44
00:01:51,899 --> 00:01:56,159
implementation such as the pl S12 curves

45
00:01:56,159 --> 00:01:58,920
so one significant applications of VBS

46
00:01:58,920 --> 00:02:01,200
is in the construction of anonymous

47
00:02:01,200 --> 00:02:03,360
credential schemes so in such a scheme

48
00:02:03,360 --> 00:02:06,000
the user is seek to obtain credentials

49
00:02:06,000 --> 00:02:09,239
for some attributes M from a trusted

50
00:02:09,239 --> 00:02:11,099
authorities referred to as the user

51
00:02:11,099 --> 00:02:13,980
issue such that credential can later be

52
00:02:13,980 --> 00:02:17,220
shown to others in Anonymous way so BBS

53
00:02:17,220 --> 00:02:19,319
can be used as a credential and later

54
00:02:19,319 --> 00:02:21,480
when a user wants to

55
00:02:21,480 --> 00:02:24,000
show the credential to iPhone attributes

56
00:02:24,000 --> 00:02:26,580
but without revealing credentials the

57
00:02:26,580 --> 00:02:29,459
user can send attributes to the verifier

58
00:02:29,459 --> 00:02:31,140
together with the zero knowledge proof

59
00:02:31,140 --> 00:02:33,420
of knowledge of the credential and the

60
00:02:33,420 --> 00:02:36,720
user can even review only certain parts

61
00:02:36,720 --> 00:02:38,580
of the attributes using zero knowledge

62
00:02:38,580 --> 00:02:42,300
proof and one another related use case

63
00:02:42,300 --> 00:02:45,060
of PPS is in the construction of the

64
00:02:45,060 --> 00:02:48,300
rack Anonymous attestation schemes

65
00:02:48,300 --> 00:02:50,760
so history of VBS signature is a bit

66
00:02:50,760 --> 00:02:51,860
complicated

67
00:02:51,860 --> 00:02:55,800
so do we have signatures was initial uh

68
00:02:55,800 --> 00:02:59,760
I mean implicity uh

69
00:02:59,760 --> 00:03:04,560
proposed by Bonet boy and suching and as

70
00:03:04,560 --> 00:03:06,959
part of their group signatures and then

71
00:03:06,959 --> 00:03:09,420
it made explicit by companies and Liz

72
00:03:09,420 --> 00:03:12,360
anscaya in 2004 but without a security

73
00:03:12,360 --> 00:03:13,739
proof

74
00:03:13,739 --> 00:03:17,459
and then in 2006 a variant called PBS

75
00:03:17,459 --> 00:03:21,840
plus was proposed and with a with a

76
00:03:21,840 --> 00:03:24,599
security proof and the types in setting

77
00:03:24,599 --> 00:03:25,980
of type 2 pairings

78
00:03:25,980 --> 00:03:28,379
so the difference between PBS plus and

79
00:03:28,379 --> 00:03:31,760
VBS is only lies in the

80
00:03:31,760 --> 00:03:36,000
X additional as value sample during each

81
00:03:36,000 --> 00:03:40,379
signing and this answers

82
00:03:40,379 --> 00:03:43,019
so it's contributes to an actual terms

83
00:03:43,019 --> 00:03:45,000
in the when Computing a and is also

84
00:03:45,000 --> 00:03:46,920
added to the signature

85
00:03:46,920 --> 00:03:52,019
and then in 2010 uh the da schemes from

86
00:03:52,019 --> 00:03:55,799
vs was posed but it security proves it

87
00:03:55,799 --> 00:03:57,840
turned out to be incorrect so if the

88
00:03:57,840 --> 00:04:00,420
proof is correct it implies the

89
00:04:00,420 --> 00:04:02,459
security of BBS

90
00:04:02,459 --> 00:04:07,200
and then in 2016 a scheme a daa scheme

91
00:04:07,200 --> 00:04:09,480
from BBS plus was proposed and together

92
00:04:09,480 --> 00:04:13,680
with a new proof uh in a setting of type

93
00:04:13,680 --> 00:04:15,360
3 pairings

94
00:04:15,360 --> 00:04:17,279
and also quite recently there's an

95
00:04:17,279 --> 00:04:20,399
ongoing standardization efforts for BBS

96
00:04:20,399 --> 00:04:25,199
plus by the WC 3C and RFC

97
00:04:25,199 --> 00:04:27,540
so if you see the history of natural

98
00:04:27,540 --> 00:04:29,699
crafts shouldn't ask is

99
00:04:29,699 --> 00:04:32,100
um whether BBI signature is approvably

100
00:04:32,100 --> 00:04:33,180
secure

101
00:04:33,180 --> 00:04:35,160
so in this work we give affirmative

102
00:04:35,160 --> 00:04:37,080
answer to this question and more

103
00:04:37,080 --> 00:04:40,320
precisely a show that PBS is as secure

104
00:04:40,320 --> 00:04:43,680
as PBS plus so the security proof we

105
00:04:43,680 --> 00:04:46,860
give supported types repairings and also

106
00:04:46,860 --> 00:04:49,500
it provides the same security levels as

107
00:04:49,500 --> 00:04:51,360
prior proof for BBS Plus

108
00:04:51,360 --> 00:04:54,060
so we will suggest more efficient

109
00:04:54,060 --> 00:04:56,880
and also this work helps provides the

110
00:04:56,880 --> 00:04:58,740
potential fix to the

111
00:04:58,740 --> 00:05:02,460
uh prior incorrect proofs which implies

112
00:05:02,460 --> 00:05:05,340
a secure da scheme from BBs

113
00:05:05,340 --> 00:05:08,520
and furthermore we also a company have a

114
00:05:08,520 --> 00:05:11,400
standard waterproof with a tied AGM

115
00:05:11,400 --> 00:05:15,139
proof which enabling more efficient

116
00:05:15,139 --> 00:05:17,940
parameter settings when in the practice

117
00:05:17,940 --> 00:05:20,759
use of BBS

118
00:05:20,759 --> 00:05:22,440
we also

119
00:05:22,440 --> 00:05:26,520
introduce a more efficient Pok for BBs

120
00:05:26,520 --> 00:05:29,340
and lastly we also analyze the flying

121
00:05:29,340 --> 00:05:32,100
issues of abilize PBS signatures

122
00:05:32,100 --> 00:05:34,740
we also I will also like to highlight

123
00:05:34,740 --> 00:05:37,979
there's an ongoing efforts to adapt RSA

124
00:05:37,979 --> 00:05:41,100
draft for the BBS and our

125
00:05:41,100 --> 00:05:43,500
POC protocol

126
00:05:43,500 --> 00:05:46,380
so before dive into the technical Parts

127
00:05:46,380 --> 00:05:48,720
I would like to give you an overview of

128
00:05:48,720 --> 00:05:49,800
how

129
00:05:49,800 --> 00:05:52,680
I mean the Improvement we have made to

130
00:05:52,680 --> 00:05:54,600
the spok protocol

131
00:05:54,600 --> 00:05:56,820
so here is the

132
00:05:56,820 --> 00:05:58,800
the best

133
00:05:58,800 --> 00:06:01,919
Pok product for BBS plus product work

134
00:06:01,919 --> 00:06:06,180
and it was adapted by the RSA draft and

135
00:06:06,180 --> 00:06:08,580
here's this work so you can see that the

136
00:06:08,580 --> 00:06:10,259
scheme is much simpler

137
00:06:10,259 --> 00:06:12,720
and conqueria saves one group elements

138
00:06:12,720 --> 00:06:16,860
plus two scalars in the size of proof

139
00:06:16,860 --> 00:06:20,160
and if we instantiate using this POS 12

140
00:06:20,160 --> 00:06:25,560
381 curves it saves about 900 bits

141
00:06:25,560 --> 00:06:27,479
so for the rest of talk I will focus on

142
00:06:27,479 --> 00:06:31,340
how to prove PBS secure

143
00:06:33,419 --> 00:06:36,360
so here's a prior serum for the security

144
00:06:36,360 --> 00:06:37,860
of BBS Plus

145
00:06:37,860 --> 00:06:40,500
so which shows that BBS plus is strong

146
00:06:40,500 --> 00:06:41,699
and comfortable

147
00:06:41,699 --> 00:06:44,419
we're reducing it to a q strong

148
00:06:44,419 --> 00:06:46,440
development assumption

149
00:06:46,440 --> 00:06:48,419
so we are here the Q will represent the

150
00:06:48,419 --> 00:06:51,000
numbers of signing queries

151
00:06:51,000 --> 00:06:53,340
so an assumption defined using the

152
00:06:53,340 --> 00:06:55,979
following game where initially two group

153
00:06:55,979 --> 00:06:58,259
generator was sampled together with a

154
00:06:58,259 --> 00:06:59,400
challenge

155
00:06:59,400 --> 00:07:02,819
an anniversary is given G1 and G1 to the

156
00:07:02,819 --> 00:07:05,340
X and onto all the way to the G1 to the

157
00:07:05,340 --> 00:07:08,520
X to the Q and together with G2 and G2

158
00:07:08,520 --> 00:07:11,100
to the X and the goal of diversary is to

159
00:07:11,100 --> 00:07:14,759
Output a c and Z such that Z is equal to

160
00:07:14,759 --> 00:07:16,680
G1 to the

161
00:07:16,680 --> 00:07:20,400
power of 1 over X plus c

162
00:07:20,400 --> 00:07:23,699
and so here is the serum we proved so we

163
00:07:23,699 --> 00:07:25,979
proved exactly the same theorem but for

164
00:07:25,979 --> 00:07:27,960
the BBS

165
00:07:27,960 --> 00:07:31,319
and also we have prove a tight AGM Bound

166
00:07:31,319 --> 00:07:34,500
for uh I have even also prove a tight

167
00:07:34,500 --> 00:07:36,780
AGM bound but however in this talk it

168
00:07:36,780 --> 00:07:38,880
will mainly focus on the center model

169
00:07:38,880 --> 00:07:41,099
proof

170
00:07:41,099 --> 00:07:44,039
so let's start by recording the strong

171
00:07:44,039 --> 00:07:46,319
unfoldibility game

172
00:07:46,319 --> 00:07:47,699
so

173
00:07:47,699 --> 00:07:49,979
initially the Challenger will generate

174
00:07:49,979 --> 00:07:51,780
all the

175
00:07:51,780 --> 00:07:54,720
generators and also secret key and then

176
00:07:54,720 --> 00:07:57,120
send the generators and the

177
00:07:57,120 --> 00:07:58,699
corresponding public key to diversary

178
00:07:58,699 --> 00:08:01,080
anniversary have access to assigning

179
00:08:01,080 --> 00:08:04,199
Oracle which signs so give so we can

180
00:08:04,199 --> 00:08:07,919
sign any given message and here we index

181
00:08:07,919 --> 00:08:10,199
the signing queries by I where I is

182
00:08:10,199 --> 00:08:12,000
bounded by Q

183
00:08:12,000 --> 00:08:15,419
and go of the adversary is up to four

184
00:08:15,419 --> 00:08:18,360
using a message and signature pair that

185
00:08:18,360 --> 00:08:20,940
um valid but it's different from all

186
00:08:20,940 --> 00:08:23,400
rows generated by the sign signing

187
00:08:23,400 --> 00:08:25,139
Oracle

188
00:08:25,139 --> 00:08:27,240
and now we can turn our attention to the

189
00:08:27,240 --> 00:08:30,060
task of constructing B that breaks the Q

190
00:08:30,060 --> 00:08:33,179
strongly if you how many sums

191
00:08:33,179 --> 00:08:37,080
so the reason here is that if a wins

192
00:08:37,080 --> 00:08:39,179
there are three cases

193
00:08:39,179 --> 00:08:42,958
so the first one is when the E star is

194
00:08:42,958 --> 00:08:46,020
not equal to any one of the E value

195
00:08:46,020 --> 00:08:48,180
and second case is

196
00:08:48,180 --> 00:08:50,399
the E star is equal to one of the E

197
00:08:50,399 --> 00:08:53,700
value but a i is not equal to a a star

198
00:08:53,700 --> 00:08:56,279
and if the above two cases do not occur

199
00:08:56,279 --> 00:08:57,899
we have

200
00:08:57,899 --> 00:09:00,959
um the existing I such that the E star

201
00:09:00,959 --> 00:09:04,019
and a star is equal to e i and a i

202
00:09:04,019 --> 00:09:06,240
turned out that's the case one and case

203
00:09:06,240 --> 00:09:08,880
three we can handle it using the prior

204
00:09:08,880 --> 00:09:11,040
techniques but

205
00:09:11,040 --> 00:09:13,560
well the case two proposed the greatest

206
00:09:13,560 --> 00:09:16,320
Challenge and we have uh we'll need to

207
00:09:16,320 --> 00:09:18,899
press new techniques to address it and

208
00:09:18,899 --> 00:09:21,000
in the following discussion I will

209
00:09:21,000 --> 00:09:25,440
develop into each of these three cases

210
00:09:25,440 --> 00:09:28,560
so for case three this e did see that it

211
00:09:28,560 --> 00:09:31,380
never occurs okay so if suppose K3

212
00:09:31,380 --> 00:09:33,180
occurs then we have the following

213
00:09:33,180 --> 00:09:34,200
equation

214
00:09:34,200 --> 00:09:36,000
and then we can

215
00:09:36,000 --> 00:09:39,480
uh fine it implies that this mis will be

216
00:09:39,480 --> 00:09:42,120
equal to M Star which contradict with

217
00:09:42,120 --> 00:09:44,760
the condition winning condition of a

218
00:09:44,760 --> 00:09:48,180
and in general this case occurs if the m

219
00:09:48,180 --> 00:09:50,339
is a vector but then it will break The

220
00:09:50,339 --> 00:09:53,040
Binding property of Patterson commitment

221
00:09:53,040 --> 00:09:56,399
and then for case one

222
00:09:56,399 --> 00:09:58,980
um who can select b as follows so the B

223
00:09:58,980 --> 00:10:00,920
was first

224
00:10:00,920 --> 00:10:03,180
sample all the e values that are used in

225
00:10:03,180 --> 00:10:05,459
the signing Oracle at once and without

226
00:10:05,459 --> 00:10:07,500
loss of generality we assume that all

227
00:10:07,500 --> 00:10:09,300
the e are distinct

228
00:10:09,300 --> 00:10:12,600
and then we Define the polynomial p as

229
00:10:12,600 --> 00:10:15,480
the product of X Plus e i

230
00:10:15,480 --> 00:10:20,399
and then the B runs a by January with

231
00:10:20,399 --> 00:10:24,180
generator G1 bar and H1 which are

232
00:10:24,180 --> 00:10:27,480
computed as follows so here the Theta

233
00:10:27,480 --> 00:10:30,420
and Alpha random factors

234
00:10:30,420 --> 00:10:31,860
and then

235
00:10:31,860 --> 00:10:34,440
I see that this G1 bar can be

236
00:10:34,440 --> 00:10:36,959
efficiently computed because its degree

237
00:10:36,959 --> 00:10:40,019
of p is is only Q

238
00:10:40,019 --> 00:10:42,060
so you can compute it using the inputs

239
00:10:42,060 --> 00:10:43,080
of B

240
00:10:43,080 --> 00:10:46,019
and then we need to simulate the all the

241
00:10:46,019 --> 00:10:48,660
sign inquiries so for the

242
00:10:48,660 --> 00:10:51,180
I assigning queries the B need to

243
00:10:51,180 --> 00:10:54,540
compute this AI basically and I can see

244
00:10:54,540 --> 00:10:57,839
that this AI can be represent in this

245
00:10:57,839 --> 00:11:02,399
form and because this PX is is divisible

246
00:11:02,399 --> 00:11:05,399
by the X Plus e i so we can compute this

247
00:11:05,399 --> 00:11:06,839
AI efficiently

248
00:11:06,839 --> 00:11:08,399
and then

249
00:11:08,399 --> 00:11:11,399
if a Wings we can represent this a star

250
00:11:11,399 --> 00:11:13,620
as the following

251
00:11:13,620 --> 00:11:16,260
and then because this p is not divisible

252
00:11:16,260 --> 00:11:19,320
by X Plus e star since the E star is not

253
00:11:19,320 --> 00:11:22,380
in the E it's not equal to any one of

254
00:11:22,380 --> 00:11:23,399
the e i

255
00:11:23,399 --> 00:11:25,260
and we

256
00:11:25,260 --> 00:11:27,240
and then we can use a class of

257
00:11:27,240 --> 00:11:29,579
techniques from Bonet and buoyant to

258
00:11:29,579 --> 00:11:32,160
compute the G1 to the one over X Plus e

259
00:11:32,160 --> 00:11:33,120
star

260
00:11:33,120 --> 00:11:35,279
but however this method does not work

261
00:11:35,279 --> 00:11:37,980
for the case two because the E star is

262
00:11:37,980 --> 00:11:40,380
equal to one of the e i

263
00:11:40,380 --> 00:11:42,720
and before we discuss our solution I

264
00:11:42,720 --> 00:11:45,180
would like to First review how the prior

265
00:11:45,180 --> 00:11:48,360
Works handle it for BBS Plus

266
00:11:48,360 --> 00:11:51,720
so the idea is that the B is going to

267
00:11:51,720 --> 00:11:54,600
sample and so gas and I star such that

268
00:11:54,600 --> 00:11:56,640
the e i stars collide with the value of

269
00:11:56,640 --> 00:11:57,660
e star

270
00:11:57,660 --> 00:11:59,160
and

271
00:11:59,160 --> 00:12:02,700
and then we and then we simulate the I

272
00:12:02,700 --> 00:12:04,980
Stars queries differently so here the

273
00:12:04,980 --> 00:12:07,560
reduction is a bit complicated and I

274
00:12:07,560 --> 00:12:09,000
would not dive into the computational

275
00:12:09,000 --> 00:12:11,760
details but just highlights a few key

276
00:12:11,760 --> 00:12:15,000
points so here the

277
00:12:15,000 --> 00:12:18,240
we Define a new polynomial P Prime which

278
00:12:18,240 --> 00:12:20,760
is is that actually equal to P divided

279
00:12:20,760 --> 00:12:24,000
by X Plus e i here I start

280
00:12:24,000 --> 00:12:27,180
and then we generate this G1 bar exactly

281
00:12:27,180 --> 00:12:30,180
the same as case one but with this uh P

282
00:12:30,180 --> 00:12:33,060
Prime polynomial as a result we find we

283
00:12:33,060 --> 00:12:36,720
can simulate all signing queries for I

284
00:12:36,720 --> 00:12:38,579
that is not equal to I star the same as

285
00:12:38,579 --> 00:12:40,800
case one

286
00:12:40,800 --> 00:12:42,839
but then the question is how we simulate

287
00:12:42,839 --> 00:12:45,660
the the I Stars query

288
00:12:45,660 --> 00:12:48,600
and to simulate it with you need to

289
00:12:48,600 --> 00:12:51,779
compute this AI star and

290
00:12:51,779 --> 00:12:54,120
so we're doing it by try to First

291
00:12:54,120 --> 00:12:58,200
represent it by in in the base of G1 so

292
00:12:58,200 --> 00:13:02,279
given how the generators are computed we

293
00:13:02,279 --> 00:13:04,079
can actually compute a i star in this

294
00:13:04,079 --> 00:13:06,779
form and so from there you can see that

295
00:13:06,779 --> 00:13:10,500
if this highlighted part is zero then we

296
00:13:10,500 --> 00:13:13,860
get this two terms of X Plus e i star

297
00:13:13,860 --> 00:13:15,839
always get canceled

298
00:13:15,839 --> 00:13:18,180
and therefore this AI can be efficiently

299
00:13:18,180 --> 00:13:20,700
compute computed so

300
00:13:20,700 --> 00:13:22,980
and thus we just need to set this as I

301
00:13:22,980 --> 00:13:25,620
started to R from minus beta times m i

302
00:13:25,620 --> 00:13:27,360
star

303
00:13:27,360 --> 00:13:29,459
and then the next question is how to be

304
00:13:29,459 --> 00:13:33,079
extract a valid output

305
00:13:33,720 --> 00:13:35,880
so as opposed case two occurs and we

306
00:13:35,880 --> 00:13:39,180
have e star is equal to e i star

307
00:13:39,180 --> 00:13:41,700
and then we similarly we we write down

308
00:13:41,700 --> 00:13:45,600
this Asar in the base of G1 and now

309
00:13:45,600 --> 00:13:46,680
we're trying to show that this

310
00:13:46,680 --> 00:13:49,260
highlighted part is not equal to e star

311
00:13:49,260 --> 00:13:53,160
sorry it's not equal to zero and then

312
00:13:53,160 --> 00:13:55,920
so things the case do occurs we can

313
00:13:55,920 --> 00:13:59,399
finally show that this secret inequality

314
00:13:59,399 --> 00:14:01,980
which is the beta M Star Plus s star is

315
00:14:01,980 --> 00:14:05,639
not exuber and I Star Plus s

316
00:14:05,639 --> 00:14:08,519
so and then during the reduction we have

317
00:14:08,519 --> 00:14:10,740
this equation which is the alpha minus

318
00:14:10,740 --> 00:14:13,260
the left hand side of the equation is

319
00:14:13,260 --> 00:14:14,880
equal to zero

320
00:14:14,880 --> 00:14:16,740
and therefore we have the alpha minus

321
00:14:16,740 --> 00:14:19,200
the right hand side of this equation is

322
00:14:19,200 --> 00:14:21,480
not equal to zero as a result we can see

323
00:14:21,480 --> 00:14:24,540
this polynomial in blue is not divisible

324
00:14:24,540 --> 00:14:27,240
by the X Plus e star

325
00:14:27,240 --> 00:14:31,320
and therefore we can compute this G1 to

326
00:14:31,320 --> 00:14:34,220
the one over X Plus e star the same as

327
00:14:34,220 --> 00:14:36,360
using the same technique matching the

328
00:14:36,360 --> 00:14:37,380
case one

329
00:14:37,380 --> 00:14:39,600
so then we're ready to explain how the

330
00:14:39,600 --> 00:14:42,540
idea is to get rid of this SI so in the

331
00:14:42,540 --> 00:14:44,399
previous proof the row of s i is

332
00:14:44,399 --> 00:14:45,660
critical

333
00:14:45,660 --> 00:14:47,639
because yes I need to make sure this

334
00:14:47,639 --> 00:14:49,740
highlighted part is equal to zero

335
00:14:49,740 --> 00:14:52,680
for any am I chosen by the University

336
00:14:52,680 --> 00:14:56,220
another idea here is to use this EI star

337
00:14:56,220 --> 00:14:58,620
to play the role of this SI star

338
00:14:58,620 --> 00:15:01,199
and this is actually possible because

339
00:15:01,199 --> 00:15:03,660
this eisr does not need to be terming at

340
00:15:03,660 --> 00:15:05,899
the beginning

341
00:15:05,940 --> 00:15:08,639
so more precisely our reduction

342
00:15:08,639 --> 00:15:11,399
the B does not samples e i star at the

343
00:15:11,399 --> 00:15:14,180
beginning but instead it assembles

344
00:15:14,180 --> 00:15:18,360
another randomization Factor Epsilon

345
00:15:18,360 --> 00:15:21,300
and then you generate this generators

346
00:15:21,300 --> 00:15:23,760
this generator as follows

347
00:15:23,760 --> 00:15:26,519
and then we can see similarly that for

348
00:15:26,519 --> 00:15:30,180
any signing round for I is not equal to

349
00:15:30,180 --> 00:15:31,500
I star

350
00:15:31,500 --> 00:15:33,779
we can simply doing similar thing for

351
00:15:33,779 --> 00:15:36,420
kids case one simulator signing queries

352
00:15:36,420 --> 00:15:38,339
and then for the

353
00:15:38,339 --> 00:15:41,519
and then the question is first is how to

354
00:15:41,519 --> 00:15:44,100
simulate the I Stars query and then how

355
00:15:44,100 --> 00:15:46,920
to extract the valid output for this Q

356
00:15:46,920 --> 00:15:48,839
as DH

357
00:15:48,839 --> 00:15:51,300
so I thought first question we do a

358
00:15:51,300 --> 00:15:54,060
similar thing and we just represent this

359
00:15:54,060 --> 00:15:58,500
AI star in the base G1 and we'll see

360
00:15:58,500 --> 00:16:02,399
this the bsat this e i star to be this

361
00:16:02,399 --> 00:16:05,040
High lighted

362
00:16:05,040 --> 00:16:08,100
parts then this last two turn get

363
00:16:08,100 --> 00:16:09,480
canceled

364
00:16:09,480 --> 00:16:12,240
and therefore we and therefore we can

365
00:16:12,240 --> 00:16:15,120
efficiently compute the AI star

366
00:16:15,120 --> 00:16:17,100
and moreover we have this EI Stars

367
00:16:17,100 --> 00:16:18,660
uniformly random due to the randomness

368
00:16:18,660 --> 00:16:20,100
of Epsilon

369
00:16:20,100 --> 00:16:22,199
and for the second question

370
00:16:22,199 --> 00:16:24,000
we do the similar thing we just

371
00:16:24,000 --> 00:16:26,399
represent AI star in the base of G1 I've

372
00:16:26,399 --> 00:16:28,440
been trying to show that this

373
00:16:28,440 --> 00:16:32,240
highlighted part is not equal to e star

374
00:16:33,120 --> 00:16:35,880
and yeah so and then because the case

375
00:16:35,880 --> 00:16:38,040
two doesn't happen we have this M Star

376
00:16:38,040 --> 00:16:40,800
is not e to Mi star and therefore we can

377
00:16:40,800 --> 00:16:42,720
show this highlighted part is not equal

378
00:16:42,720 --> 00:16:45,500
to e star and similarly we can show this

379
00:16:45,500 --> 00:16:48,240
polynomial in blue box is not divisible

380
00:16:48,240 --> 00:16:51,000
by the X Plus e star so the B can

381
00:16:51,000 --> 00:16:53,519
compute 10 wins again

382
00:16:53,519 --> 00:16:55,920
so finally I want to briefly mention our

383
00:16:55,920 --> 00:16:59,100
analysis of blind issues in the VBS the

384
00:16:59,100 --> 00:17:01,740
protocol works as follows so the user

385
00:17:01,740 --> 00:17:03,420
first sends the Palestine commitment of

386
00:17:03,420 --> 00:17:05,579
the message to the issuer and receive

387
00:17:05,579 --> 00:17:08,640
the corresponding BBS signature in term

388
00:17:08,640 --> 00:17:11,459
in return so our security objective here

389
00:17:11,459 --> 00:17:13,500
is to achieve one more unfoldibility

390
00:17:13,500 --> 00:17:16,260
which guarantees that diversary cannot

391
00:17:16,260 --> 00:17:17,119
forward

392
00:17:17,119 --> 00:17:19,679
one more value signatures than the

393
00:17:19,679 --> 00:17:21,299
number of signing requested

394
00:17:21,299 --> 00:17:24,119
and in this work we show this the

395
00:17:24,119 --> 00:17:26,040
presented schemes achieves one more

396
00:17:26,040 --> 00:17:27,599
affordability in the algebraic group

397
00:17:27,599 --> 00:17:28,620
model

398
00:17:28,620 --> 00:17:30,540
and finally in conclusion the main

399
00:17:30,540 --> 00:17:33,540
takeaway is that the PBS is probably

400
00:17:33,540 --> 00:17:36,000
secure as BBS plus and more efficient

401
00:17:36,000 --> 00:17:37,799
and

402
00:17:37,799 --> 00:17:39,780
it's for open problems it's the injured

403
00:17:39,780 --> 00:17:41,520
and see whether we can do efficiency

404
00:17:41,520 --> 00:17:43,679
improvements using our results in

405
00:17:43,679 --> 00:17:46,559
applications of VBS Plus for example for

406
00:17:46,559 --> 00:17:48,900
stretchers signings

407
00:17:48,900 --> 00:17:50,940
and let's solve a talk yeah thank you

408
00:17:50,940 --> 00:17:53,310
I'm happy to answer the questions

409
00:17:53,310 --> 00:17:59,520
[Applause]

410
00:17:59,520 --> 00:18:01,559
are there any questions so if so please

411
00:18:01,559 --> 00:18:03,000
come up to Mike

412
00:18:03,000 --> 00:18:04,559
I think we have time for questions if

413
00:18:04,559 --> 00:18:06,980
there is anything

414
00:18:11,160 --> 00:18:13,679
okay so then one question from I said so

415
00:18:13,679 --> 00:18:16,440
you mentioned that uh there is industry

416
00:18:16,440 --> 00:18:19,380
interest on BBS plus so there is RFC

417
00:18:19,380 --> 00:18:21,299
standardization efforts and did I

418
00:18:21,299 --> 00:18:22,740
understand correctly that they already

419
00:18:22,740 --> 00:18:24,360
integrated your

420
00:18:24,360 --> 00:18:27,539
your updates and now now usbbs instead

421
00:18:27,539 --> 00:18:29,660
of PBS Plus

422
00:18:29,660 --> 00:18:33,360
in the RFC right right so yeah previous

423
00:18:33,360 --> 00:18:36,120
yeah they use PBS plus because there's

424
00:18:36,120 --> 00:18:38,400
no proof of BBS and yeah because of a

425
00:18:38,400 --> 00:18:40,740
proof they can trying to adapt the draft

426
00:18:40,740 --> 00:18:43,020
to usbbs and also our proof of knowledge

427
00:18:43,020 --> 00:18:46,140
protocol okay very nice yeah okay and

428
00:18:46,140 --> 00:18:48,230
then the tank thank you again

429
00:18:48,230 --> 00:18:52,119
[Applause]

430
00:19:04,919 --> 00:19:07,320
okay so the second talk in this session

431
00:19:07,320 --> 00:19:10,140
will be by Lucian hanslik on

432
00:19:10,140 --> 00:19:12,059
non-interactive blind signatures for

433
00:19:12,059 --> 00:19:13,559
random messages

434
00:19:13,559 --> 00:19:16,140
so sorry thank you for the introduction

435
00:19:16,140 --> 00:19:18,299
so today I would like to talk about

436
00:19:18,299 --> 00:19:19,860
non-interactive blind signatures but

437
00:19:19,860 --> 00:19:22,320
first let's recall what actually two

438
00:19:22,320 --> 00:19:24,780
move blind signatures are so in the to

439
00:19:24,780 --> 00:19:27,600
move setting or in blind signatures in

440
00:19:27,600 --> 00:19:30,299
general we have a user who we can also

441
00:19:30,299 --> 00:19:32,760
call our recipient and assigner and the

442
00:19:32,760 --> 00:19:34,860
user wants to get his message signed

443
00:19:34,860 --> 00:19:37,440
without revealing it to the signer so

444
00:19:37,440 --> 00:19:39,660
how how do we usually do it and to move

445
00:19:39,660 --> 00:19:41,220
plan signatures we have a requesting

446
00:19:41,220 --> 00:19:43,380
phase where the user puts in the message

447
00:19:43,380 --> 00:19:45,179
and the public key of the signer creates

448
00:19:45,179 --> 00:19:47,840
a request keeps some States state

449
00:19:47,840 --> 00:19:50,400
locally and sends this request over to

450
00:19:50,400 --> 00:19:51,900
the signer

451
00:19:51,900 --> 00:19:54,480
designer takes this request creates a

452
00:19:54,480 --> 00:19:57,179
pre-signature using the secret key and

453
00:19:57,179 --> 00:19:59,160
sends the pre-signature back to the to

454
00:19:59,160 --> 00:20:00,360
the user

455
00:20:00,360 --> 00:20:02,820
so the user finally taking the

456
00:20:02,820 --> 00:20:04,679
pre-signature can obtain the final

457
00:20:04,679 --> 00:20:07,559
signature but by applying the the

458
00:20:07,559 --> 00:20:10,260
previous state that it kept locally on

459
00:20:10,260 --> 00:20:12,720
on on his machine

460
00:20:12,720 --> 00:20:14,580
so what do we require from blind

461
00:20:14,580 --> 00:20:18,000
signatures is unfortability for designer

462
00:20:18,000 --> 00:20:21,080
basically this means informally that

463
00:20:21,080 --> 00:20:23,700
whatever we want to receive a new

464
00:20:23,700 --> 00:20:25,620
signature on a message we have to

465
00:20:25,620 --> 00:20:27,660
communicate with designer

466
00:20:27,660 --> 00:20:30,360
and on the other hand the user wants

467
00:20:30,360 --> 00:20:33,360
blindness which which means what it says

468
00:20:33,360 --> 00:20:35,820
the the message that the user wants to

469
00:20:35,820 --> 00:20:37,200
get signed should be hidden from

470
00:20:37,200 --> 00:20:38,880
designer

471
00:20:38,880 --> 00:20:41,880
okay so to move plan signatures and

472
00:20:41,880 --> 00:20:44,160
blind signatures in in general have a

473
00:20:44,160 --> 00:20:45,720
lot of applications we today I would

474
00:20:45,720 --> 00:20:47,940
like to talk about one of of the recent

475
00:20:47,940 --> 00:20:49,679
applications of blind signatures which

476
00:20:49,679 --> 00:20:52,380
is privacy pass and privacy pass tries

477
00:20:52,380 --> 00:20:53,820
to tackle the following problem we have

478
00:20:53,820 --> 00:20:56,820
a browser and a Content delivery server

479
00:20:56,820 --> 00:20:59,700
and the user is trying to access this

480
00:20:59,700 --> 00:21:02,280
content delivery network using some

481
00:21:02,280 --> 00:21:04,559
Anonymous Network right so Tor VPN

482
00:21:04,559 --> 00:21:05,580
whatever

483
00:21:05,580 --> 00:21:10,380
and the content delivery network is more

484
00:21:10,380 --> 00:21:13,700
prone to to try the the user and and

485
00:21:13,700 --> 00:21:16,440
to to give him more captures to solve

486
00:21:16,440 --> 00:21:18,840
because the user uses is using an

487
00:21:18,840 --> 00:21:21,240
anonymous Network so the the web server

488
00:21:21,240 --> 00:21:23,160
is trying to protect against malicious

489
00:21:23,160 --> 00:21:26,460
actors so users that are using Anonymous

490
00:21:26,460 --> 00:21:28,559
networks have to solve more captures and

491
00:21:28,559 --> 00:21:31,440
privacy pass tries to solve this problem

492
00:21:31,440 --> 00:21:33,900
so how privacy pass solves this problem

493
00:21:33,900 --> 00:21:37,440
is actually pretty simple and we have an

494
00:21:37,440 --> 00:21:39,059
additional party which is the issue in

495
00:21:39,059 --> 00:21:40,740
our context you can think about this as

496
00:21:40,740 --> 00:21:43,620
the blind signature signer and the

497
00:21:43,620 --> 00:21:45,900
browser interacts with this with this

498
00:21:45,900 --> 00:21:47,640
issuer to get

499
00:21:47,640 --> 00:21:51,240
some some blind signatures on random

500
00:21:51,240 --> 00:21:52,919
messages you can see this message is

501
00:21:52,919 --> 00:21:55,440
chosen by the by the browser

502
00:21:55,440 --> 00:21:57,840
and the key property here is that the

503
00:21:57,840 --> 00:21:59,940
browser can basically use a standard

504
00:21:59,940 --> 00:22:02,220
Network to to get those tokens

505
00:22:02,220 --> 00:22:05,280
to get those signatures and and solves

506
00:22:05,280 --> 00:22:07,020
at the same time solving some captchas

507
00:22:07,020 --> 00:22:09,179
and later on it can use this message

508
00:22:09,179 --> 00:22:11,340
signature paired using the anonymous

509
00:22:11,340 --> 00:22:14,100
Network to get and redeem this

510
00:22:14,100 --> 00:22:17,220
uh the redeem those tokens instead of

511
00:22:17,220 --> 00:22:19,080
solving the captchas when when browsing

512
00:22:19,080 --> 00:22:21,539
anonymously so for from user perspective

513
00:22:21,539 --> 00:22:24,539
it's a seamless a seamless lens process

514
00:22:24,539 --> 00:22:27,360
where you basically solve something at

515
00:22:27,360 --> 00:22:28,559
the beginning and then when you are

516
00:22:28,559 --> 00:22:30,059
browsing anonymously you don't have to

517
00:22:30,059 --> 00:22:32,100
solve anything everything is done in the

518
00:22:32,100 --> 00:22:34,860
background by your browser or extension

519
00:22:34,860 --> 00:22:36,840
okay

520
00:22:36,840 --> 00:22:39,480
um so what the what what when when you

521
00:22:39,480 --> 00:22:41,880
look at this in in more details the the

522
00:22:41,880 --> 00:22:43,440
one thing that we have to keep in mind

523
00:22:43,440 --> 00:22:45,900
here is that the web server has to store

524
00:22:45,900 --> 00:22:48,539
this message to protect against double

525
00:22:48,539 --> 00:22:49,620
spending

526
00:22:49,620 --> 00:22:51,840
so he has to keep a block list of of

527
00:22:51,840 --> 00:22:54,720
messages because this message is chosen

528
00:22:54,720 --> 00:22:56,820
by the user itself himself right so the

529
00:22:56,820 --> 00:22:58,860
user or the browser extension chooses

530
00:22:58,860 --> 00:23:00,419
this message

531
00:23:00,419 --> 00:23:02,880
so the web server has to keep us it has

532
00:23:02,880 --> 00:23:05,720
to keep a a list of of those messages

533
00:23:05,720 --> 00:23:07,980
but the nice thing is that this message

534
00:23:07,980 --> 00:23:10,200
doesn't have to doesn't need any kind of

535
00:23:10,200 --> 00:23:12,179
structure it can be any arbitrary random

536
00:23:12,179 --> 00:23:13,140
string

537
00:23:13,140 --> 00:23:15,000
so the question is can we actually use

538
00:23:15,000 --> 00:23:16,260
this right because this is very common

539
00:23:16,260 --> 00:23:17,760
in many many applications of line

540
00:23:17,760 --> 00:23:19,020
signatures where you don't care about

541
00:23:19,020 --> 00:23:20,760
the structure of the message it can be

542
00:23:20,760 --> 00:23:22,740
any random string that the user just

543
00:23:22,740 --> 00:23:25,200
chooses arbitrarily from whatever

544
00:23:25,200 --> 00:23:27,780
distribution it was it wants so can we

545
00:23:27,780 --> 00:23:29,460
leverage this right

546
00:23:29,460 --> 00:23:31,919
so let's try to Define blind signatures

547
00:23:31,919 --> 00:23:34,080
for random messages so again we have

548
00:23:34,080 --> 00:23:36,840
this two move setting we discard the

549
00:23:36,840 --> 00:23:38,220
message right from the request because

550
00:23:38,220 --> 00:23:41,400
we want we want the message to be random

551
00:23:41,400 --> 00:23:44,159
in the sense that it's it's an output of

552
00:23:44,159 --> 00:23:46,740
this finalization process so when the

553
00:23:46,740 --> 00:23:49,140
user finalizes the message the message

554
00:23:49,140 --> 00:23:51,419
is basically a byproduct of finalizing

555
00:23:51,419 --> 00:23:53,880
the signature from the pre-signature

556
00:23:53,880 --> 00:23:56,820
okay but this is not not really

557
00:23:56,820 --> 00:24:00,179
interesting because on one hand we a

558
00:24:00,179 --> 00:24:03,059
designer still has to keep the uh has to

559
00:24:03,059 --> 00:24:05,280
use the request from the user and the

560
00:24:05,280 --> 00:24:07,740
user has to keep a local state to to

561
00:24:07,740 --> 00:24:10,620
finalize the signature and what is more

562
00:24:10,620 --> 00:24:12,720
we actually know how to build efficient

563
00:24:12,720 --> 00:24:14,640
to move plant signatures and Benedict

564
00:24:14,640 --> 00:24:16,080
will be talking about this in the next

565
00:24:16,080 --> 00:24:18,900
session from simple assumptions uh so so

566
00:24:18,900 --> 00:24:21,419
why do we limit ourselves to to less

567
00:24:21,419 --> 00:24:24,840
features at the expense of of of

568
00:24:24,840 --> 00:24:26,580
something that that isn't interesting

569
00:24:26,580 --> 00:24:27,780
right

570
00:24:27,780 --> 00:24:30,900
so so the key idea here is that what if

571
00:24:30,900 --> 00:24:32,700
we replace this state that the user has

572
00:24:32,700 --> 00:24:34,799
to keep with uh public key

573
00:24:34,799 --> 00:24:36,120
infrastructure right

574
00:24:36,120 --> 00:24:38,280
and this is how how we go to

575
00:24:38,280 --> 00:24:41,039
non-attractive line signatures so now we

576
00:24:41,039 --> 00:24:43,260
assume that the the user or the

577
00:24:43,260 --> 00:24:46,080
recipient has some key pair right so a

578
00:24:46,080 --> 00:24:48,059
secret key public key pair you can think

579
00:24:48,059 --> 00:24:51,360
about this we have a preset pki so now

580
00:24:51,360 --> 00:24:53,220
the signer instead of

581
00:24:53,220 --> 00:24:55,980
creating the the pre-signature based on

582
00:24:55,980 --> 00:24:57,900
the request from a user it it basically

583
00:24:57,900 --> 00:25:01,679
creates this based on his public key so

584
00:25:01,679 --> 00:25:03,720
the the pre-signature and some nouns we

585
00:25:03,720 --> 00:25:05,820
will get to to the nodes later on is

586
00:25:05,820 --> 00:25:08,039
sent over to the user and the user just

587
00:25:08,039 --> 00:25:10,740
uses this his secret key and the

588
00:25:10,740 --> 00:25:12,419
pre-signature it got from the from the

589
00:25:12,419 --> 00:25:15,900
signer to obtain the final final message

590
00:25:15,900 --> 00:25:17,880
signature pair

591
00:25:17,880 --> 00:25:20,280
and and the key observation here is that

592
00:25:20,280 --> 00:25:22,140
the message is actually a function of

593
00:25:22,140 --> 00:25:24,659
the secret key and the nodes chosen by

594
00:25:24,659 --> 00:25:27,720
the by designer and why why this is

595
00:25:27,720 --> 00:25:30,539
where the the why the nons comes in so

596
00:25:30,539 --> 00:25:32,039
if this would be just the function of

597
00:25:32,039 --> 00:25:34,679
the secret key you could only have one

598
00:25:34,679 --> 00:25:37,860
message based on on one pre-signature so

599
00:25:37,860 --> 00:25:39,840
and this wouldn't be that that

600
00:25:39,840 --> 00:25:42,240
interesting right so we will have one

601
00:25:42,240 --> 00:25:45,179
public key that that could so from one

602
00:25:45,179 --> 00:25:46,740
public you could just get one message

603
00:25:46,740 --> 00:25:49,140
but with with this notes we can actually

604
00:25:49,140 --> 00:25:51,840
have multiple pre-signatures per public

605
00:25:51,840 --> 00:25:54,120
key so designer can send multiple

606
00:25:54,120 --> 00:25:56,880
pre-signatures to to the to the user and

607
00:25:56,880 --> 00:25:59,760
the user can obtain many many uh message

608
00:25:59,760 --> 00:26:02,220
signatures pairs

609
00:26:02,220 --> 00:26:05,220
but of course right so we assume a pki

610
00:26:05,220 --> 00:26:07,860
how to use non-indictive non-attractive

611
00:26:07,860 --> 00:26:11,220
LINE signatures without a pki so the

612
00:26:11,220 --> 00:26:14,580
idea is that the user has this uh this

613
00:26:14,580 --> 00:26:16,919
recipient key generation algorithm in in

614
00:26:16,919 --> 00:26:18,840
the in the previous case we explicitly

615
00:26:18,840 --> 00:26:20,640
assumed that this is the the pki key

616
00:26:20,640 --> 00:26:22,559
generation algorithm here we we say that

617
00:26:22,559 --> 00:26:26,700
he runs this uh this R key gen it sends

618
00:26:26,700 --> 00:26:28,559
over the public key to the to the signer

619
00:26:28,559 --> 00:26:29,279
right

620
00:26:29,279 --> 00:26:31,620
and designer can create a pre-signature

621
00:26:31,620 --> 00:26:33,659
and nonce but that's that's basically

622
00:26:33,659 --> 00:26:35,100
two move line signatures right so

623
00:26:35,100 --> 00:26:37,679
nothing nothing interesting here but the

624
00:26:37,679 --> 00:26:40,080
the clue observation is here is that the

625
00:26:40,080 --> 00:26:42,659
signer can actually send over another

626
00:26:42,659 --> 00:26:44,940
pre-signature without contacting the the

627
00:26:44,940 --> 00:26:47,520
user right the user can go offline

628
00:26:47,520 --> 00:26:49,320
and designer can basically create

629
00:26:49,320 --> 00:26:51,840
another pre-signature it can even do it

630
00:26:51,840 --> 00:26:54,059
in batches so you can think about if you

631
00:26:54,059 --> 00:26:56,640
think about the Privacy pass example

632
00:26:56,640 --> 00:26:59,460
um when when the user wants more tokens

633
00:26:59,460 --> 00:27:03,000
to to to so to to have spent against

634
00:27:03,000 --> 00:27:06,299
some some captchas he can basically send

635
00:27:06,299 --> 00:27:07,980
over just one message which is the

636
00:27:07,980 --> 00:27:09,900
public key and get a bunch of tokens in

637
00:27:09,900 --> 00:27:12,360
a batch and in comparison for for

638
00:27:12,360 --> 00:27:14,220
currently you would basically have to

639
00:27:14,220 --> 00:27:15,799
send

640
00:27:15,799 --> 00:27:18,600
the number of of requests that you the

641
00:27:18,600 --> 00:27:20,400
number of tokens you want to get you

642
00:27:20,400 --> 00:27:22,320
would have to send the number of

643
00:27:22,320 --> 00:27:25,919
requests to to the server and and the

644
00:27:25,919 --> 00:27:28,380
other the other nice feature is that the

645
00:27:28,380 --> 00:27:30,419
like I said the user can go offline

646
00:27:30,419 --> 00:27:32,220
so you can think about the server have

647
00:27:32,220 --> 00:27:35,520
doing the the signing later on and just

648
00:27:35,520 --> 00:27:37,440
uploading this pre-signature on some

649
00:27:37,440 --> 00:27:39,659
some servers so the user just can just

650
00:27:39,659 --> 00:27:41,820
go there and download this pre-signature

651
00:27:41,820 --> 00:27:45,179
and finalize it locally afterwards

652
00:27:45,179 --> 00:27:46,980
okay

653
00:27:46,980 --> 00:27:47,640
um

654
00:27:47,640 --> 00:27:50,220
so let's talk about a bit about security

655
00:27:50,220 --> 00:27:52,200
I will not go into the the detail

656
00:27:52,200 --> 00:27:54,120
specification of the games because the

657
00:27:54,120 --> 00:27:55,320
the unfortunate in case of

658
00:27:55,320 --> 00:27:57,539
unaffordability that's basically similar

659
00:27:57,539 --> 00:28:00,840
to to standard line signatures we have a

660
00:28:00,840 --> 00:28:03,779
the adversary is allowed to to ask up to

661
00:28:03,779 --> 00:28:05,700
K times assigning Oracle for

662
00:28:05,700 --> 00:28:08,039
pre-signatures he can specify the the

663
00:28:08,039 --> 00:28:10,080
recipient he can specify the nouns and

664
00:28:10,080 --> 00:28:12,240
gets pre-signatures and his task is

665
00:28:12,240 --> 00:28:14,880
basically to create K plus one massive

666
00:28:14,880 --> 00:28:17,039
signature pairs which is similar to this

667
00:28:17,039 --> 00:28:19,200
one-time unforgibility of blind

668
00:28:19,200 --> 00:28:20,940
signatures but the interesting part

669
00:28:20,940 --> 00:28:22,980
comes down right so in in blind English

670
00:28:22,980 --> 00:28:24,900
we just have one blindness definition of

671
00:28:24,900 --> 00:28:26,220
course we have different variants but

672
00:28:26,220 --> 00:28:28,260
it's just one blindness definition

673
00:28:28,260 --> 00:28:31,080
here we we need to distinguish two cases

674
00:28:31,080 --> 00:28:33,419
one case is recipient blindness and this

675
00:28:33,419 --> 00:28:36,059
basically means that when when designer

676
00:28:36,059 --> 00:28:38,279
sends message pre-signatures to two

677
00:28:38,279 --> 00:28:39,900
different users

678
00:28:39,900 --> 00:28:42,659
the final signature that it sees should

679
00:28:42,659 --> 00:28:44,340
be unequable to to who was the original

680
00:28:44,340 --> 00:28:46,860
recipient of this pre-signature so think

681
00:28:46,860 --> 00:28:49,799
about this if I'm sending someone to to

682
00:28:49,799 --> 00:28:51,779
users different pre-signatures when I

683
00:28:51,779 --> 00:28:54,059
see later when I see a final signature I

684
00:28:54,059 --> 00:28:55,679
don't want to be able to tell which

685
00:28:55,679 --> 00:28:57,659
which one was the the one that created

686
00:28:57,659 --> 00:28:59,520
this final signature so this is

687
00:28:59,520 --> 00:29:01,860
recipient blindness and then we also

688
00:29:01,860 --> 00:29:04,140
have non-splindness which is also an

689
00:29:04,140 --> 00:29:05,820
interesting feature because it allows us

690
00:29:05,820 --> 00:29:08,640
to to send more signatures to a specific

691
00:29:08,640 --> 00:29:10,860
user so in this case we have just one

692
00:29:10,860 --> 00:29:12,539
user and we're sending two signatures on

693
00:29:12,539 --> 00:29:14,940
different nonsense to the user and we

694
00:29:14,940 --> 00:29:16,559
then see one final signature and we have

695
00:29:16,559 --> 00:29:18,659
to distinguish which nonce was actually

696
00:29:18,659 --> 00:29:21,120
used in in the pre-signature that for

697
00:29:21,120 --> 00:29:24,179
the final signature that we see

698
00:29:24,179 --> 00:29:28,260
okay so uh that's with security let's

699
00:29:28,260 --> 00:29:30,419
just the interesting part is how to

700
00:29:30,419 --> 00:29:33,360
actually build this right so one of the

701
00:29:33,360 --> 00:29:34,260
building blocks in the main building

702
00:29:34,260 --> 00:29:36,120
block for our efficient construction is

703
00:29:36,120 --> 00:29:37,740
for my efficient construction is

704
00:29:37,740 --> 00:29:39,539
signatures on equivalent classes if you

705
00:29:39,539 --> 00:29:41,820
know Daniel's work on this that's that's

706
00:29:41,820 --> 00:29:44,279
actually a quite quite interesting

707
00:29:44,279 --> 00:29:46,620
privacy present feature so let's let's

708
00:29:46,620 --> 00:29:48,000
talk about equivalence classes first

709
00:29:48,000 --> 00:29:49,919
right so what what is equivalent

710
00:29:49,919 --> 00:29:52,620
messages so think about one message that

711
00:29:52,620 --> 00:29:54,659
in this case it's just a vector of two

712
00:29:54,659 --> 00:29:58,860
group elements gadb and we then have

713
00:29:58,860 --> 00:30:01,200
this this additional message which is M

714
00:30:01,200 --> 00:30:02,100
Prime

715
00:30:02,100 --> 00:30:05,039
and that's basically uh you take a

716
00:30:05,039 --> 00:30:07,440
random Vector a random scalar R and you

717
00:30:07,440 --> 00:30:09,720
exponentiate both both group elements

718
00:30:09,720 --> 00:30:11,880
and this this creates our equivalence

719
00:30:11,880 --> 00:30:12,960
class and what I mean by this

720
00:30:12,960 --> 00:30:15,659
equivalence class is that if you look at

721
00:30:15,659 --> 00:30:17,039
the discrete lock between those two

722
00:30:17,039 --> 00:30:19,080
elements it basically stays constant if

723
00:30:19,080 --> 00:30:21,120
you use just a randomizer right and this

724
00:30:21,120 --> 00:30:23,720
forms some some odd a class

725
00:30:23,720 --> 00:30:26,399
assuming the order is Q you basically

726
00:30:26,399 --> 00:30:28,740
have q classes and Q elements in each

727
00:30:28,740 --> 00:30:29,520
class

728
00:30:29,520 --> 00:30:31,260
and and the nice feature for for

729
00:30:31,260 --> 00:30:33,059
equivalence class signature is that if

730
00:30:33,059 --> 00:30:35,940
you unforgeability holds with respect to

731
00:30:35,940 --> 00:30:37,440
to those classes so basically if you

732
00:30:37,440 --> 00:30:38,340
sign

733
00:30:38,340 --> 00:30:40,380
one of the classes it's a signature for

734
00:30:40,380 --> 00:30:42,659
all the messages in this class but you

735
00:30:42,659 --> 00:30:44,640
are unable to forge a signature on a

736
00:30:44,640 --> 00:30:46,260
different class so basically think about

737
00:30:46,260 --> 00:30:48,539
this you you have us you have a

738
00:30:48,539 --> 00:30:50,940
signature on on this Vector but you are

739
00:30:50,940 --> 00:30:54,659
unable to do a signature on GA GB plus

740
00:30:54,659 --> 00:30:57,659
one so so when the discrete log changes

741
00:30:57,659 --> 00:30:58,679
okay

742
00:30:58,679 --> 00:31:00,899
but that's not not really the the most

743
00:31:00,899 --> 00:31:02,580
interesting part about this this kind of

744
00:31:02,580 --> 00:31:03,720
signatures

745
00:31:03,720 --> 00:31:06,179
because the assume you have a signature

746
00:31:06,179 --> 00:31:08,399
on on equivalence class signature on the

747
00:31:08,399 --> 00:31:09,120
message

748
00:31:09,120 --> 00:31:11,039
you can actually adapt it without the

749
00:31:11,039 --> 00:31:12,539
secret key this is important without the

750
00:31:12,539 --> 00:31:14,520
secret key you can adapt it to a

751
00:31:14,520 --> 00:31:17,159
signature on this m Prime okay

752
00:31:17,159 --> 00:31:20,159
and the nice thing is like once you are

753
00:31:20,159 --> 00:31:22,799
adapted this new signature looks like a

754
00:31:22,799 --> 00:31:25,320
freshly signed signature so so even a

755
00:31:25,320 --> 00:31:26,760
malicious signer cannot distinguish

756
00:31:26,760 --> 00:31:29,580
whether you resigned the the message or

757
00:31:29,580 --> 00:31:31,380
it was adapted

758
00:31:31,380 --> 00:31:34,679
okay and this this this has a lot of a

759
00:31:34,679 --> 00:31:38,279
lot of interesting application so if you

760
00:31:38,279 --> 00:31:40,080
want read up on on the work from from

761
00:31:40,080 --> 00:31:41,340
Daniel

762
00:31:41,340 --> 00:31:45,059
okay so how to construct efficiently how

763
00:31:45,059 --> 00:31:46,380
to efficiently construct those

764
00:31:46,380 --> 00:31:47,840
non-interactive night signatures right

765
00:31:47,840 --> 00:31:50,159
so what is the pre-signature the

766
00:31:50,159 --> 00:31:52,860
pre-signature is very simple it's just a

767
00:31:52,860 --> 00:31:54,360
equivalence class signature on the

768
00:31:54,360 --> 00:31:56,880
following vector the first element is uh

769
00:31:56,880 --> 00:31:58,799
is the public key of the user

770
00:31:58,799 --> 00:32:00,960
of the recipient right and the second

771
00:32:00,960 --> 00:32:03,419
the second element of this Vector is

772
00:32:03,419 --> 00:32:05,279
Hash of nodes where hash is basically

773
00:32:05,279 --> 00:32:06,899
hashing to the group

774
00:32:06,899 --> 00:32:09,720
okay what is the message the message is

775
00:32:09,720 --> 00:32:12,059
Hash of nodes to to the inverse of the

776
00:32:12,059 --> 00:32:13,620
secret key

777
00:32:13,620 --> 00:32:16,559
and the the final signature is just an

778
00:32:16,559 --> 00:32:19,799
adaptation of this pre-signature and so

779
00:32:19,799 --> 00:32:21,419
so basically to adapt the signature the

780
00:32:21,419 --> 00:32:24,179
user uses this inverse of the secret key

781
00:32:24,179 --> 00:32:26,399
and what what is going on there is

782
00:32:26,399 --> 00:32:29,700
basically that the final signature is a

783
00:32:29,700 --> 00:32:31,919
equivalence class signature on the

784
00:32:31,919 --> 00:32:34,200
vector where the first element is just a

785
00:32:34,200 --> 00:32:36,779
group a group generator and the second

786
00:32:36,779 --> 00:32:38,460
element is the message so you can

787
00:32:38,460 --> 00:32:40,140
imagine verification is fairly simple

788
00:32:40,140 --> 00:32:42,419
right you just run you construct you

789
00:32:42,419 --> 00:32:45,120
take the message you you add the group

790
00:32:45,120 --> 00:32:46,559
generator at the beginning you form a

791
00:32:46,559 --> 00:32:48,120
vector and you apply the standard

792
00:32:48,120 --> 00:32:50,340
verification of of equivalence class

793
00:32:50,340 --> 00:32:52,559
signatures that's it that's over that

794
00:32:52,559 --> 00:32:55,020
this is the construction

795
00:32:55,020 --> 00:32:57,539
and and the nice thing here is right I

796
00:32:57,539 --> 00:32:59,640
was talking about that once we have a

797
00:32:59,640 --> 00:33:01,860
pki it's non-interactive and exactly

798
00:33:01,860 --> 00:33:04,260
this construction we we can just use

799
00:33:04,260 --> 00:33:06,779
standard difficulties for for the for

800
00:33:06,779 --> 00:33:09,120
the group this a little caveat here this

801
00:33:09,120 --> 00:33:11,399
is uh so equivalence classes signal

802
00:33:11,399 --> 00:33:13,080
equivalence class signatures currently

803
00:33:13,080 --> 00:33:15,840
still need bearings so so the public key

804
00:33:15,840 --> 00:33:17,880
is is an element of the source group in

805
00:33:17,880 --> 00:33:20,460
in the pairing group but that's uh

806
00:33:20,460 --> 00:33:22,679
that's something we try to solve

807
00:33:22,679 --> 00:33:25,559
okay so why is this actually secure so

808
00:33:25,559 --> 00:33:27,080
unfortability is easy it's just

809
00:33:27,080 --> 00:33:29,399
unfortability from from the underlying

810
00:33:29,399 --> 00:33:31,740
signature scheme but the but the key

811
00:33:31,740 --> 00:33:33,779
observation here is that the message

812
00:33:33,779 --> 00:33:35,760
that the message that you get is Hash of

813
00:33:35,760 --> 00:33:37,559
the nons to the inverse of the secret

814
00:33:37,559 --> 00:33:40,140
key right so if someone if if you look

815
00:33:40,140 --> 00:33:42,720
closely this is basically a prf

816
00:33:42,720 --> 00:33:45,600
of for the recipient's key

817
00:33:45,600 --> 00:33:47,820
and because of that we we can actually

818
00:33:47,820 --> 00:33:50,039
prove easily blindness and blind as

819
00:33:50,039 --> 00:33:51,899
follows from from the inverse and the

820
00:33:51,899 --> 00:33:55,140
strong decisional difficult assumption

821
00:33:55,140 --> 00:33:57,779
okay so so let me summarize what we uh

822
00:33:57,779 --> 00:33:59,760
what I actually did in the paper and and

823
00:33:59,760 --> 00:34:03,539
and try to uh to to to formalize some

824
00:34:03,539 --> 00:34:05,279
open problems

825
00:34:05,279 --> 00:34:07,620
so I introduced this notion of

826
00:34:07,620 --> 00:34:09,780
non-interactive line signatures I also

827
00:34:09,780 --> 00:34:12,020
proposed how to date

828
00:34:12,020 --> 00:34:13,980
non-attractive line signatures by dating

829
00:34:13,980 --> 00:34:17,040
I'm not being dating I mean I mean in

830
00:34:17,040 --> 00:34:18,300
the context of partially blind

831
00:34:18,300 --> 00:34:21,119
signatures right uh if if you know the

832
00:34:21,119 --> 00:34:23,219
idea is basically you you can the signer

833
00:34:23,219 --> 00:34:25,379
can add a constant information that

834
00:34:25,379 --> 00:34:27,659
doesn't change after finalization so you

835
00:34:27,659 --> 00:34:29,879
can think about this for for today I

836
00:34:29,879 --> 00:34:31,679
will I will issue signatures with the

837
00:34:31,679 --> 00:34:34,260
current data right and this is this is

838
00:34:34,260 --> 00:34:35,879
the notion of tag-based non-attacked

839
00:34:35,879 --> 00:34:38,399
Appliance signatures and the nice thing

840
00:34:38,399 --> 00:34:39,960
here is that the efficient construction

841
00:34:39,960 --> 00:34:42,839
that we had that I presented from from

842
00:34:42,839 --> 00:34:44,399
signatures on equivalence classes you

843
00:34:44,399 --> 00:34:46,500
can actually very easily transfer this

844
00:34:46,500 --> 00:34:49,679
to to the attack based setting because

845
00:34:49,679 --> 00:34:52,320
we uh me and and Daniel actually

846
00:34:52,320 --> 00:34:54,540
introduced the the notion of tag-based

847
00:34:54,540 --> 00:34:55,980
equivalence class signatures so you can

848
00:34:55,980 --> 00:34:57,720
can just replace the the building block

849
00:34:57,720 --> 00:34:59,339
and and that's it

850
00:34:59,339 --> 00:35:02,339
okay so uh if you remember this this

851
00:35:02,339 --> 00:35:03,780
observation that the message is

852
00:35:03,780 --> 00:35:07,200
basically uh a prf right from from this

853
00:35:07,200 --> 00:35:09,660
observation we we were able to actually

854
00:35:09,660 --> 00:35:11,099
build a generic construction for

855
00:35:11,099 --> 00:35:13,560
non-interactive line signatures and of

856
00:35:13,560 --> 00:35:16,619
course it's not not a prf it's a prf but

857
00:35:16,619 --> 00:35:19,500
we we the idea is basically the signer

858
00:35:19,500 --> 00:35:21,839
signs the nonce and your public key and

859
00:35:21,839 --> 00:35:24,119
what you prove is that the message that

860
00:35:24,119 --> 00:35:26,880
I show you is is the evaluation of of

861
00:35:26,880 --> 00:35:29,579
the nonce that's inside in inside a

862
00:35:29,579 --> 00:35:32,640
signature I know for the public key vrf

863
00:35:32,640 --> 00:35:35,339
key that's inside this inside the

864
00:35:35,339 --> 00:35:37,680
signature that I know so so roughly if

865
00:35:37,680 --> 00:35:39,000
you if you're interested look it up in

866
00:35:39,000 --> 00:35:40,380
the in the paper

867
00:35:40,380 --> 00:35:42,780
but but the the more interesting part

868
00:35:42,780 --> 00:35:44,460
are many open problems that we still

869
00:35:44,460 --> 00:35:47,940
have right so one one of the the key uh

870
00:35:47,940 --> 00:35:49,859
open problems is how to do it in the

871
00:35:49,859 --> 00:35:51,839
post Quantum setting and why is this

872
00:35:51,839 --> 00:35:53,460
important because if we if we solve this

873
00:35:53,460 --> 00:35:54,960
then we can do privacy passed both

874
00:35:54,960 --> 00:35:57,000
quantumly right and this would be nice

875
00:35:57,000 --> 00:35:59,820
another another thing is like

876
00:35:59,820 --> 00:36:01,740
how to do it without parents and this is

877
00:36:01,740 --> 00:36:03,720
what I mentioned that

878
00:36:03,720 --> 00:36:05,640
um the the caveat for for this

879
00:36:05,640 --> 00:36:08,780
construction is that the sorry that the

880
00:36:08,780 --> 00:36:12,060
recipient's public key has to be in the

881
00:36:12,060 --> 00:36:14,040
in the pairing group so so we don't

882
00:36:14,040 --> 00:36:16,500
really can use all the public keys that

883
00:36:16,500 --> 00:36:18,420
are out there right we would need we

884
00:36:18,420 --> 00:36:19,380
would need a construction without

885
00:36:19,380 --> 00:36:22,320
pairings in on standard curves to allow

886
00:36:22,320 --> 00:36:25,800
to us to use every every like ecd ecdsa

887
00:36:25,800 --> 00:36:27,480
key whatever snorky whatever whatever

888
00:36:27,480 --> 00:36:29,700
you want right so so to use those public

889
00:36:29,700 --> 00:36:32,099
Keys we would need a construction

890
00:36:32,099 --> 00:36:34,020
without pay rings and the other

891
00:36:34,020 --> 00:36:35,940
interesting thing is how to do it

892
00:36:35,940 --> 00:36:37,560
without random oracles because then we

893
00:36:37,560 --> 00:36:39,359
could answer some interesting

894
00:36:39,359 --> 00:36:41,520
theoretical questions whether whether

895
00:36:41,520 --> 00:36:43,859
like um blind signatures if you if you

896
00:36:43,859 --> 00:36:45,900
just look at random messages you can you

897
00:36:45,900 --> 00:36:47,940
can build them from from simple

898
00:36:47,940 --> 00:36:50,820
assumptions without a CRS and and run a

899
00:36:50,820 --> 00:36:52,380
molecular which is one of the

900
00:36:52,380 --> 00:36:53,940
impossibility results for for blind

901
00:36:53,940 --> 00:36:55,980
signatures

902
00:36:55,980 --> 00:36:58,680
okay so thank you for for listening and

903
00:36:58,680 --> 00:37:00,780
I'm open to questions

904
00:37:00,780 --> 00:37:01,230
hey

905
00:37:01,230 --> 00:37:06,060
[Applause]

906
00:37:06,060 --> 00:37:08,099
thanks a lot for the very nice talk

907
00:37:08,099 --> 00:37:10,200
so are there any questions from the

908
00:37:10,200 --> 00:37:12,500
audience

909
00:37:14,400 --> 00:37:16,560
okay so I have one question so because I

910
00:37:16,560 --> 00:37:18,359
think I cannot really remember so when

911
00:37:18,359 --> 00:37:20,640
you do the generic construction like vrf

912
00:37:20,640 --> 00:37:22,800
and Mystic so I mean there are elliptic

913
00:37:22,800 --> 00:37:25,500
curves vrfs but they already need the

914
00:37:25,500 --> 00:37:28,140
nissig for for the verifiability right

915
00:37:28,140 --> 00:37:29,640
and then you would do a new Sig over a

916
00:37:29,640 --> 00:37:32,040
nissig and then okay I see okay okay so

917
00:37:32,040 --> 00:37:34,200
so basically the the efficient

918
00:37:34,200 --> 00:37:36,599
construction is what would be would be

919
00:37:36,599 --> 00:37:39,240
nice to be uh without pairings right but

920
00:37:39,240 --> 00:37:41,220
uh of course you can you could you could

921
00:37:41,220 --> 00:37:42,359
instantiate the generic construction

922
00:37:42,359 --> 00:37:43,920
without payment so then you could use

923
00:37:43,920 --> 00:37:46,260
this but this is it's basically like you

924
00:37:46,260 --> 00:37:49,020
have to prove that whatever is inside a

925
00:37:49,020 --> 00:37:51,240
signature that you know has some kind of

926
00:37:51,240 --> 00:37:53,460
structure so this this I think this this

927
00:37:53,460 --> 00:37:55,800
might might go in the direction of of

928
00:37:55,800 --> 00:37:58,320
noise yeah

929
00:37:58,320 --> 00:37:59,700
let's see okay thanks

930
00:37:59,700 --> 00:38:02,579
okay if there is no more questions then

931
00:38:02,579 --> 00:38:06,480
let's think Lucian for the talk

932
00:38:06,480 --> 00:38:11,360
[Applause]

933
00:38:25,220 --> 00:38:28,740
okay so the last talk in this session is

934
00:38:28,740 --> 00:38:31,859
on blind signatures with pairings I

935
00:38:31,859 --> 00:38:35,040
guess and it's Again by Lucian by Julian

936
00:38:35,040 --> 00:38:36,839
Lawson by Benedict Wagner and Benedict

937
00:38:36,839 --> 00:38:38,700
is going to give the talk

938
00:38:38,700 --> 00:38:41,099
yeah thank you for the introduction so

939
00:38:41,099 --> 00:38:43,200
this is about Raichu a new blind

940
00:38:43,200 --> 00:38:45,420
signature scheme and as said this is

941
00:38:45,420 --> 00:38:47,280
joined work with Lucian who gave the

942
00:38:47,280 --> 00:38:51,000
talk and uh Julian and yeah myself

943
00:38:51,000 --> 00:38:53,520
so I want to recall line signatures

944
00:38:53,520 --> 00:38:56,760
first we heard about them uh just a few

945
00:38:56,760 --> 00:38:58,920
minutes ago but let's get everyone on

946
00:38:58,920 --> 00:39:01,500
the same page so blind signature scheme

947
00:39:01,500 --> 00:39:03,420
is a protocol where we have a user and

948
00:39:03,420 --> 00:39:06,900
designer the signer holds a secret key

949
00:39:06,900 --> 00:39:08,760
and the user holds a message and now

950
00:39:08,760 --> 00:39:11,040
this message should be signed for that

951
00:39:11,040 --> 00:39:14,160
they interact in some protocol and the

952
00:39:14,160 --> 00:39:16,619
user outputs a signature the property

953
00:39:16,619 --> 00:39:19,079
that makes it non-trivial is that you

954
00:39:19,079 --> 00:39:21,060
want blindness so the signer should not

955
00:39:21,060 --> 00:39:23,579
learn what he is signing there

956
00:39:23,579 --> 00:39:24,119
um

957
00:39:24,119 --> 00:39:26,760
more precisely he should not be able to

958
00:39:26,760 --> 00:39:28,800
link the interaction to the message

959
00:39:28,800 --> 00:39:30,359
signature pair

960
00:39:30,359 --> 00:39:32,460
and then we also have this notion of

961
00:39:32,460 --> 00:39:35,040
unforgeability which guarantees some

962
00:39:35,040 --> 00:39:37,380
security for the signer the user should

963
00:39:37,380 --> 00:39:39,180
not be able to come up with signatures

964
00:39:39,180 --> 00:39:41,520
without interacting with the signer so

965
00:39:41,520 --> 00:39:44,820
in other words if you want L signatures

966
00:39:44,820 --> 00:39:47,160
you need to interact L times with the

967
00:39:47,160 --> 00:39:50,099
signer and not less

968
00:39:50,099 --> 00:39:52,440
okay so when it comes to constructing

969
00:39:52,440 --> 00:39:54,480
blind signatures we mainly care about

970
00:39:54,480 --> 00:39:56,880
efficiency and security as for any other

971
00:39:56,880 --> 00:39:59,640
cryptographic primitive and in terms of

972
00:39:59,640 --> 00:40:01,940
security of course we want standard

973
00:40:01,940 --> 00:40:04,859
well-studied minimal assumptions that we

974
00:40:04,859 --> 00:40:06,359
are confident in

975
00:40:06,359 --> 00:40:08,700
and we also want the property that you

976
00:40:08,700 --> 00:40:10,920
could call full security so what I mean

977
00:40:10,920 --> 00:40:14,460
by that is that the scheme remains

978
00:40:14,460 --> 00:40:17,760
secure even if the adversary is allowed

979
00:40:17,760 --> 00:40:19,619
to talk to the signer an arbitrary

980
00:40:19,619 --> 00:40:22,680
polynomial number of times

981
00:40:22,680 --> 00:40:24,599
okay now if we look at the state of the

982
00:40:24,599 --> 00:40:27,300
art then unfortunately it is basically

983
00:40:27,300 --> 00:40:29,880
pick two of the three properties and you

984
00:40:29,880 --> 00:40:33,060
can't have more so for example there are

985
00:40:33,060 --> 00:40:34,740
schemes that are efficient they come

986
00:40:34,740 --> 00:40:37,740
from standard assumptions such as D Lock

987
00:40:37,740 --> 00:40:40,740
um but they don't have this feature that

988
00:40:40,740 --> 00:40:42,540
they allow for polynomial number of

989
00:40:42,540 --> 00:40:44,520
signatures

990
00:40:44,520 --> 00:40:47,940
probably the most promising step towards

991
00:40:47,940 --> 00:40:49,800
a scheme that has all three properties

992
00:40:49,800 --> 00:40:52,200
is a scheme from last year's crypto

993
00:40:52,200 --> 00:40:55,680
where the scheme is not as efficient as

994
00:40:55,680 --> 00:40:59,640
we might hope for and our goal in this

995
00:40:59,640 --> 00:41:01,740
work is to sort of fill this Gap and

996
00:41:01,740 --> 00:41:03,240
have a scheme that has all three

997
00:41:03,240 --> 00:41:05,220
properties at the same time

998
00:41:05,220 --> 00:41:07,380
for that we will follow this line of

999
00:41:07,380 --> 00:41:10,200
work that was initiated initiated by

1000
00:41:10,200 --> 00:41:12,599
Cuts Lawson Rosenberg and tried to

1001
00:41:12,599 --> 00:41:15,420
improve the efficiency of it okay so

1002
00:41:15,420 --> 00:41:17,280
talking about efficiency I should

1003
00:41:17,280 --> 00:41:19,200
probably clarify what I mean by that

1004
00:41:19,200 --> 00:41:22,020
when we talk about blind signatures so

1005
00:41:22,020 --> 00:41:24,000
of course this is a signature variant so

1006
00:41:24,000 --> 00:41:26,640
we care about the signature size we want

1007
00:41:26,640 --> 00:41:28,500
compact signatures

1008
00:41:28,500 --> 00:41:30,540
and on the other hand this is an

1009
00:41:30,540 --> 00:41:32,480
interactive protocol so we care about

1010
00:41:32,480 --> 00:41:35,220
communication complexity how many bits

1011
00:41:35,220 --> 00:41:37,560
do I need to send back and forth to

1012
00:41:37,560 --> 00:41:39,980
compute such a signature and of course

1013
00:41:39,980 --> 00:41:44,160
we also care about computation

1014
00:41:44,160 --> 00:41:47,160
okay now that we know what we want let

1015
00:41:47,160 --> 00:41:49,200
me summarize some background of this

1016
00:41:49,200 --> 00:41:51,300
work before I can actually present our

1017
00:41:51,300 --> 00:41:54,000
result so this is a line of work that

1018
00:41:54,000 --> 00:41:56,220
was initially initiated by Cuts loss and

1019
00:41:56,220 --> 00:41:58,500
Rosenberg and I would call it the world

1020
00:41:58,500 --> 00:41:59,880
of boosting

1021
00:41:59,880 --> 00:42:02,640
so what is what is boosting it's a way

1022
00:42:02,640 --> 00:42:04,920
to take a weekly secure applying

1023
00:42:04,920 --> 00:42:06,960
signature scheme and turn it into a

1024
00:42:06,960 --> 00:42:09,180
fully secure one what do I mean by that

1025
00:42:09,180 --> 00:42:11,520
so cutslows and Rosenberg they started

1026
00:42:11,520 --> 00:42:13,380
with a logarithmically secure blind

1027
00:42:13,380 --> 00:42:15,780
signature scheme so the scheme is only

1028
00:42:15,780 --> 00:42:18,240
secure as long as the adversary is

1029
00:42:18,240 --> 00:42:20,520
allowed to talk to the signer only a

1030
00:42:20,520 --> 00:42:22,980
logarithmic number of times and we have

1031
00:42:22,980 --> 00:42:25,140
efficient construction for that from

1032
00:42:25,140 --> 00:42:26,880
standard assumptions

1033
00:42:26,880 --> 00:42:29,220
and now what they do is they transform

1034
00:42:29,220 --> 00:42:31,440
this into a fully secure line signature

1035
00:42:31,440 --> 00:42:32,940
scheme in the sense that I mentioned

1036
00:42:32,940 --> 00:42:35,160
before you can have a polynomial number

1037
00:42:35,160 --> 00:42:38,700
of interactions with the sign let's take

1038
00:42:38,700 --> 00:42:40,859
a quick look at how this is done at a

1039
00:42:40,859 --> 00:42:43,020
very high level so we have the signer

1040
00:42:43,020 --> 00:42:45,420
and the user and now the first thing

1041
00:42:45,420 --> 00:42:47,760
they do is they interact in N sessions

1042
00:42:47,760 --> 00:42:50,339
of the underlying logarithmically secure

1043
00:42:50,339 --> 00:42:51,599
scheme

1044
00:42:51,599 --> 00:42:53,520
but before they complete these sessions

1045
00:42:53,520 --> 00:42:55,920
the signer wants the user to convince

1046
00:42:55,920 --> 00:42:58,020
him that he behaved honestly and

1047
00:42:58,020 --> 00:43:00,240
followed the protocol and for that they

1048
00:43:00,240 --> 00:43:03,540
do a cut and choose kind of protocol so

1049
00:43:03,540 --> 00:43:05,400
the signer will pick one of these

1050
00:43:05,400 --> 00:43:08,339
sessions at random and ask the user to

1051
00:43:08,339 --> 00:43:11,400
open all other sessions by giving him

1052
00:43:11,400 --> 00:43:14,280
the commitment the the randomness that

1053
00:43:14,280 --> 00:43:17,040
that he used to compute all his messages

1054
00:43:17,040 --> 00:43:19,140
and then the signer can check that he

1055
00:43:19,140 --> 00:43:21,060
behaved Honestly by recomputing

1056
00:43:21,060 --> 00:43:24,420
everything for the remaining session

1057
00:43:24,420 --> 00:43:26,760
they will finish it and the user will

1058
00:43:26,760 --> 00:43:29,040
then use this to come up with this blind

1059
00:43:29,040 --> 00:43:30,540
signature

1060
00:43:30,540 --> 00:43:32,880
okay so that's the idea now the question

1061
00:43:32,880 --> 00:43:34,740
is how many of these sessions do you

1062
00:43:34,740 --> 00:43:37,980
need what is n and in Cuts loss and

1063
00:43:37,980 --> 00:43:39,540
rosenberg's work and also in in

1064
00:43:39,540 --> 00:43:42,540
follow-ups N is a counter so the signer

1065
00:43:42,540 --> 00:43:45,359
has to keep a state and whenever a user

1066
00:43:45,359 --> 00:43:47,760
comes along and wants to get a blind

1067
00:43:47,760 --> 00:43:49,980
signature starts interacting the signer

1068
00:43:49,980 --> 00:43:52,440
will increase this counter and this

1069
00:43:52,440 --> 00:43:54,000
means that the number of sessions

1070
00:43:54,000 --> 00:43:56,640
increases over time okay so how does

1071
00:43:56,640 --> 00:43:58,500
that look if we look at all the

1072
00:43:58,500 --> 00:44:01,260
interactions that this signer does with

1073
00:44:01,260 --> 00:44:04,200
with his public key then in the first

1074
00:44:04,200 --> 00:44:06,420
interaction we will just have a one out

1075
00:44:06,420 --> 00:44:08,700
of two cut and choose then a one out of

1076
00:44:08,700 --> 00:44:12,240
three cut and choose and so on so

1077
00:44:12,240 --> 00:44:15,300
that's that's this idea of boosting now

1078
00:44:15,300 --> 00:44:17,819
let's see why this why this helps us to

1079
00:44:17,819 --> 00:44:20,400
get fully secure applying signatures

1080
00:44:20,400 --> 00:44:22,980
so we take the perspective of a

1081
00:44:22,980 --> 00:44:25,619
reduction in a reduction of the security

1082
00:44:25,619 --> 00:44:27,720
of applying signatures we need to

1083
00:44:27,720 --> 00:44:30,540
simulate the signer and now we can

1084
00:44:30,540 --> 00:44:32,760
consider different cases so let's say we

1085
00:44:32,760 --> 00:44:34,980
have a malicious user interacting with

1086
00:44:34,980 --> 00:44:37,260
with the signer Oracle and this user

1087
00:44:37,260 --> 00:44:40,020
mail forms or is dishonest in more than

1088
00:44:40,020 --> 00:44:42,240
one session then of course he has to

1089
00:44:42,240 --> 00:44:44,180
open all but one of them

1090
00:44:44,180 --> 00:44:48,119
so that means he will be caught cheating

1091
00:44:48,119 --> 00:44:51,240
and that means we don't have to really

1092
00:44:51,240 --> 00:44:54,240
simulate the signing process

1093
00:44:54,240 --> 00:44:56,099
then there is of course the good case

1094
00:44:56,099 --> 00:44:59,400
where the user is is honest and does not

1095
00:44:59,400 --> 00:45:01,500
mail from any of the sessions in this

1096
00:45:01,500 --> 00:45:03,839
case Cuts Lawson Rosenberg showed by

1097
00:45:03,839 --> 00:45:06,000
appropriately programming the random

1098
00:45:06,000 --> 00:45:08,460
Oracle you can simulate this without

1099
00:45:08,460 --> 00:45:10,920
using the secret key

1100
00:45:10,920 --> 00:45:13,200
okay the remaining case is actually the

1101
00:45:13,200 --> 00:45:15,780
tricky case what if the user malforms

1102
00:45:15,780 --> 00:45:18,480
exactly one session in this case it

1103
00:45:18,480 --> 00:45:20,099
could happen that we hit this session

1104
00:45:20,099 --> 00:45:22,380
and this is the random session that he

1105
00:45:22,380 --> 00:45:24,300
does not have to open

1106
00:45:24,300 --> 00:45:27,300
we call this case a successful cheat or

1107
00:45:27,300 --> 00:45:29,760
a cheat for sure a short and in this

1108
00:45:29,760 --> 00:45:31,800
case the actual actually the only way

1109
00:45:31,800 --> 00:45:33,780
that we have to simulate the signer

1110
00:45:33,780 --> 00:45:36,599
Oracle is to rely on the sign Oracle of

1111
00:45:36,599 --> 00:45:38,700
our underlying scheme of the

1112
00:45:38,700 --> 00:45:40,800
logarithmically secure scheme

1113
00:45:40,800 --> 00:45:43,020
okay now the the obvious question is how

1114
00:45:43,020 --> 00:45:45,480
often do we need to call the sign Oracle

1115
00:45:45,480 --> 00:45:48,300
how often does this case occur and what

1116
00:45:48,300 --> 00:45:50,520
they showed is that this occurs a

1117
00:45:50,520 --> 00:45:52,680
logarithmic number of times and to show

1118
00:45:52,680 --> 00:45:55,260
that they need this increasing number of

1119
00:45:55,260 --> 00:45:57,599
sessions

1120
00:45:57,599 --> 00:46:00,060
okay so Cuts loss and Rosenberg have

1121
00:46:00,060 --> 00:46:01,859
this transformation and if we look into

1122
00:46:01,859 --> 00:46:04,440
the efficiency of it then it scales

1123
00:46:04,440 --> 00:46:07,200
linearly with uh the number of

1124
00:46:07,200 --> 00:46:09,540
interactions n so over time this gets

1125
00:46:09,540 --> 00:46:12,000
less efficient the communication and the

1126
00:46:12,000 --> 00:46:15,060
computation cost scales linearly what we

1127
00:46:15,060 --> 00:46:18,119
did in our work last year at crypto was

1128
00:46:18,119 --> 00:46:20,160
to improve the communication complexity

1129
00:46:20,160 --> 00:46:24,240
so we went from a linear dependence on N

1130
00:46:24,240 --> 00:46:26,280
to a logarithmic one

1131
00:46:26,280 --> 00:46:28,260
but we didn't really look into the

1132
00:46:28,260 --> 00:46:30,480
computational costs of it

1133
00:46:30,480 --> 00:46:32,520
and in the same work we also introduced

1134
00:46:32,520 --> 00:46:35,280
a scheme a specific scheme not a generic

1135
00:46:35,280 --> 00:46:38,040
transformation that is called Pikachu

1136
00:46:38,040 --> 00:46:43,200
and Pikachu is basically also a boosting

1137
00:46:43,200 --> 00:46:46,020
kind of thing but you start from a week

1138
00:46:46,020 --> 00:46:49,079
from a weaker and even weaker primitive

1139
00:46:49,079 --> 00:46:51,420
namely a key only secure blind signature

1140
00:46:51,420 --> 00:46:53,460
scheme so in this in this key only

1141
00:46:53,460 --> 00:46:56,700
secure scheme this the malicious user is

1142
00:46:56,700 --> 00:46:58,740
not allowed to talk to the signer at all

1143
00:46:58,740 --> 00:47:01,440
it only gets the key

1144
00:47:01,440 --> 00:47:04,020
okay and what we do what we did there to

1145
00:47:04,020 --> 00:47:05,520
to

1146
00:47:05,520 --> 00:47:07,980
get this fully secure is we did the same

1147
00:47:07,980 --> 00:47:10,140
boosting but with many parallel

1148
00:47:10,140 --> 00:47:13,440
instances so we had many public keys

1149
00:47:13,440 --> 00:47:16,380
that are independent and now we do in

1150
00:47:16,380 --> 00:47:18,839
every interaction we do n sessions over

1151
00:47:18,839 --> 00:47:20,700
ke public keys

1152
00:47:20,700 --> 00:47:23,160
okay and what we could show there is

1153
00:47:23,160 --> 00:47:24,960
that over the entire run of the

1154
00:47:24,960 --> 00:47:27,180
experiment there is at least one

1155
00:47:27,180 --> 00:47:28,920
instance

1156
00:47:28,920 --> 00:47:31,500
for which there is no cheat at all and

1157
00:47:31,500 --> 00:47:34,560
this means in the reduction we can look

1158
00:47:34,560 --> 00:47:36,480
at this instance embed our challenge

1159
00:47:36,480 --> 00:47:38,700
public key there and then because there

1160
00:47:38,700 --> 00:47:40,800
is no cheat we never need a sign Oracle

1161
00:47:40,800 --> 00:47:45,119
so key only security is sufficient

1162
00:47:45,119 --> 00:47:48,420
okay so that means we had a scheme last

1163
00:47:48,420 --> 00:47:51,420
year crypto Pikachu with seven rounds I

1164
00:47:51,420 --> 00:47:53,220
didn't talk about round complexity yet

1165
00:47:53,220 --> 00:47:55,560
but just believe me it has seven rounds

1166
00:47:55,560 --> 00:47:57,839
it has logarithmic communication and

1167
00:47:57,839 --> 00:48:00,900
linear computation complexity and now in

1168
00:48:00,900 --> 00:48:03,839
this work we actually improved this we

1169
00:48:03,839 --> 00:48:06,300
present Raichu which is a two round

1170
00:48:06,300 --> 00:48:09,359
scheme it is stateless so we got rid of

1171
00:48:09,359 --> 00:48:11,400
this state for the signer entirely and

1172
00:48:11,400 --> 00:48:13,560
that also means the communication and

1173
00:48:13,560 --> 00:48:18,078
computation is now constant over time

1174
00:48:18,540 --> 00:48:21,599
and in addition to this to this basic

1175
00:48:21,599 --> 00:48:23,700
line signature scheme we also introduce

1176
00:48:23,700 --> 00:48:26,819
the idea of batching blind signatures to

1177
00:48:26,819 --> 00:48:29,400
further reduce the communication costs

1178
00:48:29,400 --> 00:48:31,800
if you want to get many messages signed

1179
00:48:31,800 --> 00:48:34,260
at once and we also extend this to the

1180
00:48:34,260 --> 00:48:36,240
partially blind setting

1181
00:48:36,240 --> 00:48:38,819
okay so in summary this world of

1182
00:48:38,819 --> 00:48:40,920
boosting looks like this now we have the

1183
00:48:40,920 --> 00:48:43,980
KLR scheme with linear communication and

1184
00:48:43,980 --> 00:48:46,800
computation in uh the work last year at

1185
00:48:46,800 --> 00:48:48,780
crypto we improved the communication and

1186
00:48:48,780 --> 00:48:52,079
now we got rid of the counter or the

1187
00:48:52,079 --> 00:48:54,300
state entirely

1188
00:48:54,300 --> 00:48:56,819
okay so for For the Rest uh I want to

1189
00:48:56,819 --> 00:48:58,500
talk a bit about the techniques that we

1190
00:48:58,500 --> 00:49:01,200
use how can we achieve this actually at

1191
00:49:01,200 --> 00:49:03,240
a very high level

1192
00:49:03,240 --> 00:49:06,599
okay so as I said there is this Pikachu

1193
00:49:06,599 --> 00:49:08,640
scheme and the idea is that there's one

1194
00:49:08,640 --> 00:49:10,319
instance over the entire experiment

1195
00:49:10,319 --> 00:49:12,119
where there is no cheat so we don't need

1196
00:49:12,119 --> 00:49:14,880
a sign Oracle for that instance now the

1197
00:49:14,880 --> 00:49:17,339
first thing we could try is what if we

1198
00:49:17,339 --> 00:49:19,859
remove the counter and just say the

1199
00:49:19,859 --> 00:49:22,619
number of sessions is constant

1200
00:49:22,619 --> 00:49:25,319
all the time so what do we do let's say

1201
00:49:25,319 --> 00:49:27,900
we take four sessions and in every

1202
00:49:27,900 --> 00:49:30,599
interaction for every instance that we

1203
00:49:30,599 --> 00:49:33,180
do we have four sessions okay this

1204
00:49:33,180 --> 00:49:35,220
situation looks something like this now

1205
00:49:35,220 --> 00:49:37,020
we can no longer show that there's one

1206
00:49:37,020 --> 00:49:39,119
instance over the entire experiment with

1207
00:49:39,119 --> 00:49:41,700
node sheets but what we can argue is

1208
00:49:41,700 --> 00:49:43,680
that for every interaction there is one

1209
00:49:43,680 --> 00:49:45,599
instance with no cheat

1210
00:49:45,599 --> 00:49:47,520
okay so the situation looks a bit

1211
00:49:47,520 --> 00:49:49,200
different now it looks like this in

1212
00:49:49,200 --> 00:49:51,240
every interaction you have a potentially

1213
00:49:51,240 --> 00:49:52,980
a different instance where there is no

1214
00:49:52,980 --> 00:49:53,819
cheat

1215
00:49:53,819 --> 00:49:56,640
okay so how can we use this well if we

1216
00:49:56,640 --> 00:49:58,380
just have our keys like this it doesn't

1217
00:49:58,380 --> 00:50:01,680
really help us because we have to decide

1218
00:50:01,680 --> 00:50:03,300
in the beginning where to embed our

1219
00:50:03,300 --> 00:50:06,119
challenge key and as long as there's one

1220
00:50:06,119 --> 00:50:09,359
sheet we are screwed so the idea is now

1221
00:50:09,359 --> 00:50:12,119
to have the public keys different in

1222
00:50:12,119 --> 00:50:14,460
every interaction so how does that look

1223
00:50:14,460 --> 00:50:16,920
like we have the signer and the user

1224
00:50:16,920 --> 00:50:20,339
they do some interaction and then at

1225
00:50:20,339 --> 00:50:22,380
some point the signer will decide what

1226
00:50:22,380 --> 00:50:25,380
keys to use so the signer will send this

1227
00:50:25,380 --> 00:50:28,020
set of K keys to the user and then they

1228
00:50:28,020 --> 00:50:30,540
interact in this parallel instance cut

1229
00:50:30,540 --> 00:50:33,119
and choose as in pit capture

1230
00:50:33,119 --> 00:50:35,339
okay so why is this helpful

1231
00:50:35,339 --> 00:50:38,099
well let's say we want to reduce the

1232
00:50:38,099 --> 00:50:40,440
security of this to the security of the

1233
00:50:40,440 --> 00:50:43,319
underlying key only secure scheme then

1234
00:50:43,319 --> 00:50:45,000
what we get as input is a challenge

1235
00:50:45,000 --> 00:50:47,880
public key and now in every interaction

1236
00:50:47,880 --> 00:50:50,579
we use some tricks to learn this

1237
00:50:50,579 --> 00:50:53,040
instance I star for which in this

1238
00:50:53,040 --> 00:50:55,980
interaction there will be no cheat

1239
00:50:55,980 --> 00:50:58,260
then in this instance we embed our

1240
00:50:58,260 --> 00:51:01,020
challenge key and the implication of

1241
00:51:01,020 --> 00:51:02,819
this is that now for this instance

1242
00:51:02,819 --> 00:51:05,339
there's no cheat so we can simulate

1243
00:51:05,339 --> 00:51:07,380
without the secret key for all the other

1244
00:51:07,380 --> 00:51:09,900
instances we have a secret key so we can

1245
00:51:09,900 --> 00:51:12,660
also simulate okay so that tells us that

1246
00:51:12,660 --> 00:51:14,880
with this strategy we can simulate the

1247
00:51:14,880 --> 00:51:16,200
signer

1248
00:51:16,200 --> 00:51:18,420
but if you look at this for a while you

1249
00:51:18,420 --> 00:51:21,180
see there's an obvious problem if we

1250
00:51:21,180 --> 00:51:23,700
send public Keys fresh public keys in

1251
00:51:23,700 --> 00:51:25,319
every interaction and it's not clear

1252
00:51:25,319 --> 00:51:26,940
what is the relation of these public

1253
00:51:26,940 --> 00:51:29,700
keys to the actual public key of the

1254
00:51:29,700 --> 00:51:31,800
scheme right so right now the

1255
00:51:31,800 --> 00:51:33,720
interaction looks like it is independent

1256
00:51:33,720 --> 00:51:36,180
so how can this be unfoldable

1257
00:51:36,180 --> 00:51:39,900
and to sort of solve this problem oh

1258
00:51:39,900 --> 00:51:41,700
yeah that's a problem so the problem is

1259
00:51:41,700 --> 00:51:43,859
how can we relate these public keys to

1260
00:51:43,859 --> 00:51:45,720
the long-term key

1261
00:51:45,720 --> 00:51:48,900
um and technically this shows up when we

1262
00:51:48,900 --> 00:51:50,520
want to take the forgery of the

1263
00:51:50,520 --> 00:51:53,160
adversary and get a forgery of our

1264
00:51:53,160 --> 00:51:54,660
challenge key

1265
00:51:54,660 --> 00:51:57,720
okay so the the idea that we had here is

1266
00:51:57,720 --> 00:51:59,819
we do the same thing but we have now a

1267
00:51:59,819 --> 00:52:01,859
relation between these public keys that

1268
00:52:01,859 --> 00:52:03,720
you send in every interaction and the

1269
00:52:03,720 --> 00:52:05,579
long-term key and the relation is

1270
00:52:05,579 --> 00:52:08,339
basically a sharing it's a very simple

1271
00:52:08,339 --> 00:52:12,720
sharing of the public key and by by

1272
00:52:12,720 --> 00:52:15,059
appropriately defining this sharing you

1273
00:52:15,059 --> 00:52:16,619
can still use the same embedding

1274
00:52:16,619 --> 00:52:19,020
strategy you can make sure that for all

1275
00:52:19,020 --> 00:52:21,420
but one of these Keys you know the

1276
00:52:21,420 --> 00:52:23,400
secret key

1277
00:52:23,400 --> 00:52:25,920
so I don't want to talk more about that

1278
00:52:25,920 --> 00:52:28,800
that means that summarize what we have

1279
00:52:28,800 --> 00:52:30,900
done in this work and what we have seen

1280
00:52:30,900 --> 00:52:32,099
in the talk

1281
00:52:32,099 --> 00:52:34,859
so we have this new line signature

1282
00:52:34,859 --> 00:52:37,079
scheme right shoe I didn't talk about

1283
00:52:37,079 --> 00:52:40,859
assumptions uh yet so let me tell you is

1284
00:52:40,859 --> 00:52:43,260
this from the CDH assumption in the

1285
00:52:43,260 --> 00:52:45,780
pairing setting it has two rounds so

1286
00:52:45,780 --> 00:52:49,440
it's round optimal it is stateless in

1287
00:52:49,440 --> 00:52:51,119
contrast to the previous works and it

1288
00:52:51,119 --> 00:52:52,800
has a constant communication and

1289
00:52:52,800 --> 00:52:55,920
computation complexity and we also

1290
00:52:55,920 --> 00:52:57,960
implemented this and looked at the

1291
00:52:57,960 --> 00:53:01,079
concrete efficiency so there are

1292
00:53:01,079 --> 00:53:02,880
different ways to set the parameters you

1293
00:53:02,880 --> 00:53:05,400
have different trade-offs you can for

1294
00:53:05,400 --> 00:53:07,859
example focus more on the signature size

1295
00:53:07,859 --> 00:53:10,260
and improve that or you can focus on the

1296
00:53:10,260 --> 00:53:12,420
communication size depending on how you

1297
00:53:12,420 --> 00:53:14,460
set for example the number of instances

1298
00:53:14,460 --> 00:53:15,839
that we have

1299
00:53:15,839 --> 00:53:18,300
and you see the the signature sizes

1300
00:53:18,300 --> 00:53:20,400
communication sizes and also the running

1301
00:53:20,400 --> 00:53:24,480
times are reasonably efficient

1302
00:53:24,480 --> 00:53:26,460
so I want to conclude with an open

1303
00:53:26,460 --> 00:53:30,480
problem that I would like to to mention

1304
00:53:30,480 --> 00:53:32,520
and I hope that at some point someone

1305
00:53:32,520 --> 00:53:33,859
can solve it

1306
00:53:33,859 --> 00:53:36,599
so you see this scheme it's efficient

1307
00:53:36,599 --> 00:53:38,640
but it still uses pairings and an

1308
00:53:38,640 --> 00:53:41,640
obvious question is can you even improve

1309
00:53:41,640 --> 00:53:43,619
it more by getting rid of the pairings

1310
00:53:43,619 --> 00:53:46,079
so the previous Works they all had sort

1311
00:53:46,079 --> 00:53:49,800
of generic Transformations we have a

1312
00:53:49,800 --> 00:53:52,619
specific scheme so the question is can

1313
00:53:52,619 --> 00:53:55,140
you have a pairing free construction or

1314
00:53:55,140 --> 00:53:56,960
even make this approach that we have

1315
00:53:56,960 --> 00:53:59,220
somewhat generic such that you can

1316
00:53:59,220 --> 00:54:02,280
instantiate it without pairings so if

1317
00:54:02,280 --> 00:54:04,380
you have any ideas about this problem so

1318
00:54:04,380 --> 00:54:06,599
feel free to talk to me I'm happy to

1319
00:54:06,599 --> 00:54:09,240
talk about it and yeah with that I thank

1320
00:54:09,240 --> 00:54:10,920
you for your attention and happy to

1321
00:54:10,920 --> 00:54:13,460
answer questions

1322
00:54:13,520 --> 00:54:18,080
[Applause]

1323
00:54:18,800 --> 00:54:23,480
are there any questions for a speaker

1324
00:54:25,980 --> 00:54:27,839
so the obvious question

1325
00:54:27,839 --> 00:54:30,059
uh regarding the open problem for my

1326
00:54:30,059 --> 00:54:31,579
asset would be so what's the problem

1327
00:54:31,579 --> 00:54:34,680
okay so removing the pairings yeah yeah

1328
00:54:34,680 --> 00:54:36,900
so we tried it actually if you take if

1329
00:54:36,900 --> 00:54:39,540
you take Pikachu and you you can

1330
00:54:39,540 --> 00:54:41,760
implement it uh based on schnauer

1331
00:54:41,760 --> 00:54:44,220
basically uh then it will not be

1332
00:54:44,220 --> 00:54:46,440
efficient but at least it works right so

1333
00:54:46,440 --> 00:54:48,300
you lose the aggregation feature which

1334
00:54:48,300 --> 00:54:50,880
which is sort of bad for efficiency but

1335
00:54:50,880 --> 00:54:53,160
it still works for Raichu we have this

1336
00:54:53,160 --> 00:54:55,319
sharing of the public key so what you

1337
00:54:55,319 --> 00:54:58,380
get in the end as as a forgery

1338
00:54:58,380 --> 00:55:01,079
is basically an arbitrary sharing that

1339
00:55:01,079 --> 00:55:03,240
that the adversary came up with of your

1340
00:55:03,240 --> 00:55:05,520
challenge public key and some snore

1341
00:55:05,520 --> 00:55:07,559
signatures for that we don't really know

1342
00:55:07,559 --> 00:55:09,420
what to do with them if we have PLS

1343
00:55:09,420 --> 00:55:10,980
signatures then they are already

1344
00:55:10,980 --> 00:55:13,500
aggregated and sort of the algebraic

1345
00:55:13,500 --> 00:55:16,380
structure helps you to to use that but

1346
00:55:16,380 --> 00:55:19,099
for sure there's a random Oracle and

1347
00:55:19,099 --> 00:55:21,420
it's not really clear what to do with

1348
00:55:21,420 --> 00:55:24,240
these signatures okay thanks a lot yeah

1349
00:55:24,240 --> 00:55:27,000
good if there are no further questions

1350
00:55:27,000 --> 00:55:30,480
then uh I guess we are done

1351
00:55:30,480 --> 00:55:32,700
so I wish all of you a nice remaining

1352
00:55:32,700 --> 00:55:35,460
eurocrypts to have a safe trip back home

1353
00:55:35,460 --> 00:55:39,319
and let's thank all the speakers again

