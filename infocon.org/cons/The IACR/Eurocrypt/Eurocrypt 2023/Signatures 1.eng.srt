1
00:00:02,280 --> 00:00:03,799
all right

2
00:00:03,799 --> 00:00:08,820
so welcome to the session on signatures

3
00:00:08,820 --> 00:00:12,480
signature schemes one

4
00:00:12,480 --> 00:00:15,540
um we will have one two three talks

5
00:00:15,540 --> 00:00:19,859
coming up on signatures don't use well

6
00:00:19,859 --> 00:00:22,260
exactly okay then I'll I won't I won't

7
00:00:22,260 --> 00:00:23,279
go with it

8
00:00:23,279 --> 00:00:25,698
yes

9
00:00:26,580 --> 00:00:30,420
okay so the first talk

10
00:00:30,420 --> 00:00:32,520
will be in the paper a lower bound on

11
00:00:32,520 --> 00:00:35,040
the length of signatures based on group

12
00:00:35,040 --> 00:00:39,379
actions and generic exogenes

13
00:00:43,579 --> 00:00:47,120
we'll give the talk

14
00:00:47,399 --> 00:00:49,800
thank you chair for the introduction hi

15
00:00:49,800 --> 00:00:52,020
everyone so my name is Jason Kwan and

16
00:00:52,020 --> 00:00:53,340
today I'll be talking about a lower

17
00:00:53,340 --> 00:00:55,620
bound on the length of signatures based

18
00:00:55,620 --> 00:00:58,800
on group actions and generic exogenes

19
00:00:58,800 --> 00:01:01,800
so to start off first of all why are we

20
00:01:01,800 --> 00:01:03,600
interesting these signatures that are

21
00:01:03,600 --> 00:01:05,099
based on group actions in generic

22
00:01:05,099 --> 00:01:07,619
isogenes well let me tell you a story so

23
00:01:07,619 --> 00:01:10,799
I was uh I was applying to renew my US

24
00:01:10,799 --> 00:01:13,380
Visa and Visa officer was looking at my

25
00:01:13,380 --> 00:01:15,600
CV and then asked me the question so

26
00:01:15,600 --> 00:01:18,420
what is post Quantum cryptography I said

27
00:01:18,420 --> 00:01:20,040
okay good question let me tell you the

28
00:01:20,040 --> 00:01:22,140
following story and this is a story I

29
00:01:22,140 --> 00:01:23,159
told

30
00:01:23,159 --> 00:01:25,500
so in cryptography we have our favorite

31
00:01:25,500 --> 00:01:27,240
friends Alice and bomb and they love to

32
00:01:27,240 --> 00:01:29,280
do all sorts of interesting protocols

33
00:01:29,280 --> 00:01:31,439
between them and we require certain

34
00:01:31,439 --> 00:01:33,479
security properties of these uh these

35
00:01:33,479 --> 00:01:35,520
protocols and the way we do this is we

36
00:01:35,520 --> 00:01:37,740
buy a security reduction we reduce the

37
00:01:37,740 --> 00:01:39,780
these security properties down to

38
00:01:39,780 --> 00:01:41,579
certain hardness assumptions

39
00:01:41,579 --> 00:01:43,799
so if an anniversary comes over with his

40
00:01:43,799 --> 00:01:46,500
own Computing resources as long as the

41
00:01:46,500 --> 00:01:48,299
adversary cannot break these harness

42
00:01:48,299 --> 00:01:50,520
assumptions the security of these

43
00:01:50,520 --> 00:01:52,500
Protocols are guaranteed

44
00:01:52,500 --> 00:01:53,939
however

45
00:01:53,939 --> 00:01:56,220
suppose the obviously now has access to

46
00:01:56,220 --> 00:01:58,619
a quantum computer then actually a lot

47
00:01:58,619 --> 00:02:00,119
of the harness assumptions that we use

48
00:02:00,119 --> 00:02:02,640
nowadays will be broken for example the

49
00:02:02,640 --> 00:02:04,920
hardness of the hardness of the RSA

50
00:02:04,920 --> 00:02:07,140
hardness of factoring discrete log so on

51
00:02:07,140 --> 00:02:10,199
and so forth and as a result the

52
00:02:10,199 --> 00:02:12,000
security guarantee of these protocols

53
00:02:12,000 --> 00:02:13,379
will be gone

54
00:02:13,379 --> 00:02:15,720
so this is exactly what we're study in

55
00:02:15,720 --> 00:02:17,640
post Quantum cryptography we want to

56
00:02:17,640 --> 00:02:20,879
construct schemes based on secure based

57
00:02:20,879 --> 00:02:23,340
on computational assumptions that are

58
00:02:23,340 --> 00:02:25,319
resistant even if the adversary has

59
00:02:25,319 --> 00:02:27,660
access to a quantum computer

60
00:02:27,660 --> 00:02:29,819
and so far in the literature most of the

61
00:02:29,819 --> 00:02:31,140
constructions in post Quantum

62
00:02:31,140 --> 00:02:33,180
cryptography are from lattices

63
00:02:33,180 --> 00:02:35,459
but you know we cryptographers are

64
00:02:35,459 --> 00:02:37,860
sometimes are usually paranoid and we

65
00:02:37,860 --> 00:02:40,500
want not to like put all of our acts

66
00:02:40,500 --> 00:02:42,599
into a single basket right so just in

67
00:02:42,599 --> 00:02:44,280
case in the future like let's say if

68
00:02:44,280 --> 00:02:46,200
there's some attack on analysis we want

69
00:02:46,200 --> 00:02:47,640
there at least to be some alternative

70
00:02:47,640 --> 00:02:50,160
that we can uh resolve to

71
00:02:50,160 --> 00:02:52,560
so ideally we will want some sort of a a

72
00:02:52,560 --> 00:02:54,120
second basket though it might be a

73
00:02:54,120 --> 00:02:55,560
little bit smaller but at least it's

74
00:02:55,560 --> 00:02:57,000
there's somewhere that we can put our

75
00:02:57,000 --> 00:02:59,519
eggs in and it turns out yeah there is

76
00:02:59,519 --> 00:03:01,739
such an alternative and this is exactly

77
00:03:01,739 --> 00:03:04,379
group action based cryptography so this

78
00:03:04,379 --> 00:03:06,120
was a story I told the Visa officer in

79
00:03:06,120 --> 00:03:08,099
the Visa officer seems very confused and

80
00:03:08,099 --> 00:03:10,319
thought for 20 seconds and they say okay

81
00:03:10,319 --> 00:03:12,780
that seems like very important research

82
00:03:12,780 --> 00:03:14,340
problems so we're going to need to do

83
00:03:14,340 --> 00:03:16,319
some additional checking on your on your

84
00:03:16,319 --> 00:03:18,000
Visa status to make sure you're not spy

85
00:03:18,000 --> 00:03:19,980
or something that's how I end up stuck

86
00:03:19,980 --> 00:03:22,080
in Canada for uh for a month before

87
00:03:22,080 --> 00:03:23,819
returning to the U.S

88
00:03:23,819 --> 00:03:26,519
so but that story aside so what are

89
00:03:26,519 --> 00:03:28,800
group action based cryptography

90
00:03:28,800 --> 00:03:31,140
well cryptographic group actions

91
00:03:31,140 --> 00:03:33,420
consists of three components so first of

92
00:03:33,420 --> 00:03:37,319
all you have a group G and a set X and

93
00:03:37,319 --> 00:03:40,140
an operation that allows you to have a

94
00:03:40,140 --> 00:03:42,659
group Adam and G acting on a set element

95
00:03:42,659 --> 00:03:46,260
and the output is another set adamant

96
00:03:46,260 --> 00:03:48,180
will require several properties of this

97
00:03:48,180 --> 00:03:50,040
so first of all you can think about this

98
00:03:50,040 --> 00:03:52,260
uh as this star operation as sort of the

99
00:03:52,260 --> 00:03:54,120
excellent in a normal group so

100
00:03:54,120 --> 00:03:56,220
essentially raising a set element to the

101
00:03:56,220 --> 00:03:58,140
power of a group element

102
00:03:58,140 --> 00:04:00,060
and require several properties so first

103
00:04:00,060 --> 00:04:02,159
we'll require there is a group identity

104
00:04:02,159 --> 00:04:04,980
e so it's a group element that is

105
00:04:04,980 --> 00:04:07,019
identity so if you apply this group

106
00:04:07,019 --> 00:04:09,299
action on any set element it gives you

107
00:04:09,299 --> 00:04:11,280
back the same set element

108
00:04:11,280 --> 00:04:13,860
and we also require compatibility or

109
00:04:13,860 --> 00:04:16,139
composability essentially saying that if

110
00:04:16,139 --> 00:04:18,600
you apply two group actions on this on

111
00:04:18,600 --> 00:04:20,940
the same set element in sequence then

112
00:04:20,940 --> 00:04:22,620
you can compose these group actions

113
00:04:22,620 --> 00:04:24,240
together and perform a single group

114
00:04:24,240 --> 00:04:26,880
action on the same set element

115
00:04:26,880 --> 00:04:28,740
notice that there we can imagine also

116
00:04:28,740 --> 00:04:30,660
other properties of the of the group

117
00:04:30,660 --> 00:04:32,460
action and for example you can imagine a

118
00:04:32,460 --> 00:04:34,740
group actions to be a billion but these

119
00:04:34,740 --> 00:04:36,840
are the only pair bare minimum

120
00:04:36,840 --> 00:04:38,460
requirements that we have in order for

121
00:04:38,460 --> 00:04:41,340
our lower bound to go through

122
00:04:41,340 --> 00:04:43,020
so the hardness assumption that we have

123
00:04:43,020 --> 00:04:45,300
here for group actions is the discrete

124
00:04:45,300 --> 00:04:47,400
log for group actions so if you're given

125
00:04:47,400 --> 00:04:50,340
two set elements in which one of them is

126
00:04:50,340 --> 00:04:52,259
has a has a discrete log against the

127
00:04:52,259 --> 00:04:54,419
other so in this case Y is equal to G

128
00:04:54,419 --> 00:04:56,639
Star X it's very hard to find the

129
00:04:56,639 --> 00:04:58,919
discrete log between these two set

130
00:04:58,919 --> 00:05:01,080
elements notice that you can think about

131
00:05:01,080 --> 00:05:03,600
this if you were a transfer translate

132
00:05:03,600 --> 00:05:05,880
this to normal group then what you will

133
00:05:05,880 --> 00:05:08,940
have is y is equal to x to the G so G is

134
00:05:08,940 --> 00:05:10,320
the exponent

135
00:05:10,320 --> 00:05:12,720
so we know that discrete log within

136
00:05:12,720 --> 00:05:14,460
groups they are pretty much broken if

137
00:05:14,460 --> 00:05:16,320
the app store has a quantum computer so

138
00:05:16,320 --> 00:05:17,880
the adversary can use Source algorithm

139
00:05:17,880 --> 00:05:20,100
to quickly find the order of the group

140
00:05:20,100 --> 00:05:22,380
and everything is broken from there but

141
00:05:22,380 --> 00:05:24,960
notice that in the case of group actions

142
00:05:24,960 --> 00:05:26,759
the things that we're exponentiating

143
00:05:26,759 --> 00:05:29,639
here are set elements and there's no

144
00:05:29,639 --> 00:05:31,919
equivalent efficient group operations

145
00:05:31,919 --> 00:05:34,680
between these set elements so short

146
00:05:34,680 --> 00:05:36,600
algorithm will not work here

147
00:05:36,600 --> 00:05:38,759
so far the best algorithm that we the

148
00:05:38,759 --> 00:05:40,979
best quantum algorithms that we that we

149
00:05:40,979 --> 00:05:44,280
have that that solves the group action

150
00:05:44,280 --> 00:05:47,699
discrete log is sub-exponential

151
00:05:47,699 --> 00:05:50,400
okay so now you might be asking okay so

152
00:05:50,400 --> 00:05:51,720
this is a group action based

153
00:05:51,720 --> 00:05:53,759
cryptography how how could we

154
00:05:53,759 --> 00:05:56,460
instantiate such a group action

155
00:05:56,460 --> 00:05:58,320
um such a group action

156
00:05:58,320 --> 00:06:00,720
so it turns out that one of the possible

157
00:06:00,720 --> 00:06:02,880
ways to instantiate a group action is

158
00:06:02,880 --> 00:06:05,160
through isogeny based cryptography

159
00:06:05,160 --> 00:06:07,380
I won't go into too much detail about

160
00:06:07,380 --> 00:06:09,300
isogeny today we won't be able to cover

161
00:06:09,300 --> 00:06:11,400
in 20 minutes not to not even like two

162
00:06:11,400 --> 00:06:14,160
hours or 20 hours but roughly speaking a

163
00:06:14,160 --> 00:06:16,080
one sentence summarization of isogenes

164
00:06:16,080 --> 00:06:18,539
is that an exogeny is a sort of a

165
00:06:18,539 --> 00:06:21,180
mapping between two elliptic curves and

166
00:06:21,180 --> 00:06:23,400
it's been shown uh it's being shown by

167
00:06:23,400 --> 00:06:25,979
kuvikness and Ross tortsev and stabenov

168
00:06:25,979 --> 00:06:28,139
that we can actually obtain group

169
00:06:28,139 --> 00:06:30,780
actions from these isogenic graphs from

170
00:06:30,780 --> 00:06:32,819
of elliptic curves

171
00:06:32,819 --> 00:06:35,160
and later on there has been this a

172
00:06:35,160 --> 00:06:36,960
specific type of isogene graphs called

173
00:06:36,960 --> 00:06:39,479
super singularisogyny graphs where we

174
00:06:39,479 --> 00:06:42,360
see constructions of key exchanges from

175
00:06:42,360 --> 00:06:44,340
um and and one of the purpose there is

176
00:06:44,340 --> 00:06:46,979
to avoid the substantial Quantum

177
00:06:46,979 --> 00:06:48,780
algorithm for the screen lock as we saw

178
00:06:48,780 --> 00:06:50,300
on the previous page

179
00:06:50,300 --> 00:06:52,800
however as we have already seen in

180
00:06:52,800 --> 00:06:54,840
yesterday's past paper section there has

181
00:06:54,840 --> 00:06:57,000
been recent attacks on key exchange

182
00:06:57,000 --> 00:06:58,440
protocols that are based on the site

183
00:06:58,440 --> 00:07:00,840
assumption super singular isogeny David

184
00:07:00,840 --> 00:07:03,318
Helman

185
00:07:03,360 --> 00:07:05,880
about this in yesterday's yesterday's

186
00:07:05,880 --> 00:07:07,740
best paper section so I won't spend too

187
00:07:07,740 --> 00:07:10,560
much time here but the general idea I

188
00:07:10,560 --> 00:07:12,180
want to mention I want to point out is

189
00:07:12,180 --> 00:07:14,819
that first of all a site itself is not a

190
00:07:14,819 --> 00:07:17,699
group action and secondly while side and

191
00:07:17,699 --> 00:07:19,979
and psych which is built upon which is

192
00:07:19,979 --> 00:07:21,960
built upon site is pretty much that but

193
00:07:21,960 --> 00:07:24,599
it doesn't seem to affect other isogeny

194
00:07:24,599 --> 00:07:26,580
based protocols for example C signs sea

195
00:07:26,580 --> 00:07:28,860
fish or ski sign so this means our lower

196
00:07:28,860 --> 00:07:31,080
bound that we show in this paper is

197
00:07:31,080 --> 00:07:33,180
still meaningful

198
00:07:33,180 --> 00:07:35,880
okay so now we're going to move on to

199
00:07:35,880 --> 00:07:37,740
the actual lower bound so where we show

200
00:07:37,740 --> 00:07:38,940
a lower bound on the length of

201
00:07:38,940 --> 00:07:41,340
signatures so the motivation here is

202
00:07:41,340 --> 00:07:43,800
pretty straightforward Right In

203
00:07:43,800 --> 00:07:45,180
classical in the classical World

204
00:07:45,180 --> 00:07:47,099
signatures can be really short for

205
00:07:47,099 --> 00:07:48,840
example the Schnur signatures are really

206
00:07:48,840 --> 00:07:52,139
short so if we want 128-bit security a

207
00:07:52,139 --> 00:07:54,419
snow signature only needs to be 96 bytes

208
00:07:54,419 --> 00:07:57,180
so for security parameter Lambda the

209
00:07:57,180 --> 00:07:58,800
signature length can be as small as

210
00:07:58,800 --> 00:08:00,360
three Lambda which is really

211
00:08:00,360 --> 00:08:02,880
surprisingly short however for Quantum

212
00:08:02,880 --> 00:08:05,460
uh for post Quantum signatures if we

213
00:08:05,460 --> 00:08:07,259
look at the nist has a call for post

214
00:08:07,259 --> 00:08:08,880
Quantum signatures if we look at the

215
00:08:08,880 --> 00:08:11,340
finalists all of them sizes are at least

216
00:08:11,340 --> 00:08:13,919
thousands of buys they're nowhere to in

217
00:08:13,919 --> 00:08:16,440
comparison with the Schnur signature so

218
00:08:16,440 --> 00:08:18,379
the natural question is are there any

219
00:08:18,379 --> 00:08:21,060
snore-like signature schemes that are

220
00:08:21,060 --> 00:08:24,120
post Quantum secure and is there what's

221
00:08:24,120 --> 00:08:26,160
the shortage that we can get so far the

222
00:08:26,160 --> 00:08:29,940
shortest we get is from sea fish and uh

223
00:08:29,940 --> 00:08:32,458
sorry A C sign and the c-sign itself is

224
00:08:32,458 --> 00:08:34,559
still required three kilobytes for the

225
00:08:34,559 --> 00:08:36,360
signature size plus the public key size

226
00:08:36,360 --> 00:08:38,700
let's not as close to the Snore

227
00:08:38,700 --> 00:08:39,719
signature

228
00:08:39,719 --> 00:08:41,700
and in fact in this paper we show that

229
00:08:41,700 --> 00:08:43,679
this is no surprise

230
00:08:43,679 --> 00:08:46,620
so in this paper we want to arrive at a

231
00:08:46,620 --> 00:08:49,200
lower Bound for group action based for

232
00:08:49,200 --> 00:08:50,760
the length of group action based

233
00:08:50,760 --> 00:08:53,760
signatures and we have two options for

234
00:08:53,760 --> 00:08:55,920
us to working we can either work in Mars

235
00:08:55,920 --> 00:08:58,140
generic group model or we can work in

236
00:08:58,140 --> 00:09:00,480
ships generic model but there are some

237
00:09:00,480 --> 00:09:02,040
slight issues with the with either

238
00:09:02,040 --> 00:09:03,180
approach

239
00:09:03,180 --> 00:09:05,459
so for Morris generic model it has been

240
00:09:05,459 --> 00:09:08,700
shown by 220 atel that signatures are

241
00:09:08,700 --> 00:09:10,800
actually impossible in Mars generic

242
00:09:10,800 --> 00:09:12,300
group model essentially there you can

243
00:09:12,300 --> 00:09:14,040
think about their ad you can have an

244
00:09:14,040 --> 00:09:17,220
algebraic combination of signatures and

245
00:09:17,220 --> 00:09:19,800
that will allow you to make a forgery

246
00:09:19,800 --> 00:09:22,500
and in terms of ships generic model it

247
00:09:22,500 --> 00:09:24,360
has been shown by zandria and John that

248
00:09:24,360 --> 00:09:26,760
the steric model actually implies random

249
00:09:26,760 --> 00:09:29,580
articles so we're sort of in a conundrum

250
00:09:29,580 --> 00:09:31,800
here so on one hand we can either choose

251
00:09:31,800 --> 00:09:34,380
to working Morris model where we prove a

252
00:09:34,380 --> 00:09:37,260
lower Bound for signatures which are

253
00:09:37,260 --> 00:09:38,640
impossible so we're proving a lower

254
00:09:38,640 --> 00:09:40,140
lower Bound for something that's

255
00:09:40,140 --> 00:09:42,180
impossible and which doesn't doesn't

256
00:09:42,180 --> 00:09:43,560
really make sense

257
00:09:43,560 --> 00:09:45,540
or we can choose to working shoots

258
00:09:45,540 --> 00:09:47,580
generic group model and in there we're

259
00:09:47,580 --> 00:09:49,320
essentially trying to solve the open

260
00:09:49,320 --> 00:09:51,600
problem of proving a lower amount for

261
00:09:51,600 --> 00:09:53,640
random oracle-based signatures

262
00:09:53,640 --> 00:09:55,620
so what do we do

263
00:09:55,620 --> 00:09:58,200
okay so we make the observation that

264
00:09:58,200 --> 00:10:01,140
while signatures are impossible in Mars

265
00:10:01,140 --> 00:10:04,500
model however I identification protocols

266
00:10:04,500 --> 00:10:07,200
these are actual actually possible in

267
00:10:07,200 --> 00:10:10,320
the Mars model so what we do instead is

268
00:10:10,320 --> 00:10:12,899
we prove a lower Bound for group action

269
00:10:12,899 --> 00:10:15,300
based ID protocols so this event we have

270
00:10:15,300 --> 00:10:17,760
Lambda squared over log Lambda and we

271
00:10:17,760 --> 00:10:19,620
make the observation that

272
00:10:19,620 --> 00:10:21,959
um the stadium the state of the art all

273
00:10:21,959 --> 00:10:23,700
of the constructions of group

274
00:10:23,700 --> 00:10:25,920
action-based signatures actually are

275
00:10:25,920 --> 00:10:28,200
obtained by by constructing a group

276
00:10:28,200 --> 00:10:30,180
action-based identification protocol

277
00:10:30,180 --> 00:10:32,820
first and then applying a transformation

278
00:10:32,820 --> 00:10:35,160
for example uh via Shamir or the

279
00:10:35,160 --> 00:10:38,040
transformation by um but these

280
00:10:38,040 --> 00:10:40,080
Transformations they preserve the lower

281
00:10:40,080 --> 00:10:41,100
bound

282
00:10:41,100 --> 00:10:43,320
so therefore our lower bound transfers

283
00:10:43,320 --> 00:10:45,240
from these ID protocols to the group

284
00:10:45,240 --> 00:10:48,120
action based signatures

285
00:10:48,120 --> 00:10:50,339
so what are what is an ID protocol well

286
00:10:50,339 --> 00:10:52,800
it's very similar to a signature scheme

287
00:10:52,800 --> 00:10:54,540
except that there is no message for it

288
00:10:54,540 --> 00:10:57,540
to sign so we have the approver and the

289
00:10:57,540 --> 00:10:59,100
approver has the public key and the

290
00:10:59,100 --> 00:11:01,019
private key and the verifier has only

291
00:11:01,019 --> 00:11:03,420
the public key and approver will try to

292
00:11:03,420 --> 00:11:05,160
communicate with the with the verifier

293
00:11:05,160 --> 00:11:07,740
into convincing the verifier that it has

294
00:11:07,740 --> 00:11:10,019
hold of the private key and in this case

295
00:11:10,019 --> 00:11:11,640
we're dealing with group action oracles

296
00:11:11,640 --> 00:11:14,220
so each party they have access to a

297
00:11:14,220 --> 00:11:15,660
polynomial number of queries to the

298
00:11:15,660 --> 00:11:17,760
group action Oracle so through this

299
00:11:17,760 --> 00:11:19,200
communication the verifier is going to

300
00:11:19,200 --> 00:11:21,240
Output one or zero signifying whether

301
00:11:21,240 --> 00:11:22,920
the verifier believes that the approver

302
00:11:22,920 --> 00:11:25,200
actually has the private key

303
00:11:25,200 --> 00:11:27,839
so security is defined in terms of an

304
00:11:27,839 --> 00:11:30,300
adversary and the adversary is given a

305
00:11:30,300 --> 00:11:32,100
number of transcripts of previous

306
00:11:32,100 --> 00:11:33,779
Communications between the approver and

307
00:11:33,779 --> 00:11:36,120
the verifier together with access to the

308
00:11:36,120 --> 00:11:38,459
to the group action Oracle and the

309
00:11:38,459 --> 00:11:40,380
verifier is going to communicate with

310
00:11:40,380 --> 00:11:42,000
the and the adversary is going to

311
00:11:42,000 --> 00:11:43,980
communicate with the verifier and

312
00:11:43,980 --> 00:11:45,899
adversary will win a game if the

313
00:11:45,899 --> 00:11:48,600
verifier outputs one and we want uh want

314
00:11:48,600 --> 00:11:50,339
this probability to be negligible and

315
00:11:50,339 --> 00:11:52,079
this is what we call the soundness era

316
00:11:52,079 --> 00:11:54,779
of the identification protocol

317
00:11:54,779 --> 00:11:57,839
so the main theorem that we prove is

318
00:11:57,839 --> 00:11:59,820
actually a lower bound on the soundness

319
00:11:59,820 --> 00:12:02,459
era of a public coin identification

320
00:12:02,459 --> 00:12:05,640
protocol based on group actions

321
00:12:05,640 --> 00:12:08,579
and in here the lower amount the sun is

322
00:12:08,579 --> 00:12:11,100
error lower bound is dependent on the

323
00:12:11,100 --> 00:12:14,100
completeness C and P is the number of

324
00:12:14,100 --> 00:12:15,779
set elements in the public key you can

325
00:12:15,779 --> 00:12:17,339
now think about this as the length of

326
00:12:17,339 --> 00:12:19,500
the public key and the number of set

327
00:12:19,500 --> 00:12:21,720
elements in the transcript and the

328
00:12:21,720 --> 00:12:23,279
transcript you can think about when you

329
00:12:23,279 --> 00:12:24,779
transform to a signature scheme

330
00:12:24,779 --> 00:12:26,160
corresponds to the length of the

331
00:12:26,160 --> 00:12:27,120
signature

332
00:12:27,120 --> 00:12:29,399
and also it's dependent on the number of

333
00:12:29,399 --> 00:12:31,800
transcripts that the protocol should be

334
00:12:31,800 --> 00:12:33,240
secure against

335
00:12:33,240 --> 00:12:37,140
okay so what does this bound mean so if

336
00:12:37,140 --> 00:12:39,300
we if we think about the case if we want

337
00:12:39,300 --> 00:12:41,579
inbounded if we want security against an

338
00:12:41,579 --> 00:12:43,200
unbounded number of transcripts so in

339
00:12:43,200 --> 00:12:45,480
other words we set T to be large

340
00:12:45,480 --> 00:12:47,639
in this case this bound becomes s is

341
00:12:47,639 --> 00:12:49,380
greater than or equal to P to the minus

342
00:12:49,380 --> 00:12:51,420
n where p is the number of set elements

343
00:12:51,420 --> 00:12:53,639
in the public key and N is the number of

344
00:12:53,639 --> 00:12:55,860
set elements in the transcript

345
00:12:55,860 --> 00:12:57,779
and if we want to achieve a soundness

346
00:12:57,779 --> 00:12:59,519
error say for example 2 to the minus

347
00:12:59,519 --> 00:13:02,100
Lambda while at the same time we want to

348
00:13:02,100 --> 00:13:03,959
minimize the size of the public key plus

349
00:13:03,959 --> 00:13:06,240
the size of the transcript what we have

350
00:13:06,240 --> 00:13:09,240
is as a result is p plus n is greater

351
00:13:09,240 --> 00:13:11,220
than or equal to Lambda over log Lambda

352
00:13:11,220 --> 00:13:13,860
and because every set element is Lambda

353
00:13:13,860 --> 00:13:16,260
bits if we multiply this by Lambda we

354
00:13:16,260 --> 00:13:18,180
get our lower bound Lambda squared over

355
00:13:18,180 --> 00:13:20,760
log Lambda

356
00:13:20,760 --> 00:13:22,560
here we're actually adding up the size

357
00:13:22,560 --> 00:13:24,420
of the public key and the size of the of

358
00:13:24,420 --> 00:13:25,800
the transcript so you might be wondering

359
00:13:25,800 --> 00:13:28,139
you you said it's a lower bound and

360
00:13:28,139 --> 00:13:29,579
length of signatures why do we include a

361
00:13:29,579 --> 00:13:31,500
public key well because it's trivial you

362
00:13:31,500 --> 00:13:33,240
can you can get it it's possible to get

363
00:13:33,240 --> 00:13:35,100
a signature scheme where the or

364
00:13:35,100 --> 00:13:36,660
identification protocol where the

365
00:13:36,660 --> 00:13:39,180
transcript contains zero set elements so

366
00:13:39,180 --> 00:13:40,620
in other words it's possible to have n

367
00:13:40,620 --> 00:13:42,540
equals equal to zero

368
00:13:42,540 --> 00:13:45,000
but in this case then P to the minus n

369
00:13:45,000 --> 00:13:47,639
is just equal to 1 and the bound now

370
00:13:47,639 --> 00:13:49,620
becomes s is greater than or equal to C

371
00:13:49,620 --> 00:13:52,320
minus p over t so if we want a

372
00:13:52,320 --> 00:13:53,940
reasonable soundness error in this case

373
00:13:53,940 --> 00:13:57,420
we would ideally need to set P the

374
00:13:57,420 --> 00:13:59,160
number of set elements in the public key

375
00:13:59,160 --> 00:14:02,040
to be almost as large as T which is

376
00:14:02,040 --> 00:14:04,139
which is the number of transcripts that

377
00:14:04,139 --> 00:14:06,360
the scheme is secure against

378
00:14:06,360 --> 00:14:07,920
so this sort of like matches our

379
00:14:07,920 --> 00:14:09,240
intuition right because if you don't

380
00:14:09,240 --> 00:14:12,180
stand anything in a transcript then if

381
00:14:12,180 --> 00:14:14,220
it then essentially you need to consume

382
00:14:14,220 --> 00:14:17,040
a set element in the public key for

383
00:14:17,040 --> 00:14:19,620
every for every transcript

384
00:14:19,620 --> 00:14:23,040
okay so next up I will give you a very

385
00:14:23,040 --> 00:14:25,320
quick uh overview of sort of how our

386
00:14:25,320 --> 00:14:26,760
proof goes through it's a very high

387
00:14:26,760 --> 00:14:29,279
level intuition uh by no means it's uh

388
00:14:29,279 --> 00:14:31,740
it's rigorous I just give a give a like

389
00:14:31,740 --> 00:14:34,740
proof of concept idea so uh we will

390
00:14:34,740 --> 00:14:36,360
imagine that the address above and we

391
00:14:36,360 --> 00:14:38,700
look at the public key and imagine there

392
00:14:38,700 --> 00:14:41,040
are p number of set elements in the

393
00:14:41,040 --> 00:14:42,420
public key

394
00:14:42,420 --> 00:14:43,380
and they're going to do the

395
00:14:43,380 --> 00:14:44,579
communication and we look at a

396
00:14:44,579 --> 00:14:46,800
transcript and they're going to be n

397
00:14:46,800 --> 00:14:49,380
number of set elements in the transcript

398
00:14:49,380 --> 00:14:51,000
and now we're going to look at whenever

399
00:14:51,000 --> 00:14:53,639
the verifier is makes a query to the

400
00:14:53,639 --> 00:14:56,160
group action Oracle and let's say the

401
00:14:56,160 --> 00:14:58,560
the verifier mixing query to the Oracle

402
00:14:58,560 --> 00:15:01,320
and gets response A1 is equal to H star

403
00:15:01,320 --> 00:15:05,220
X1 so if we look at this query that

404
00:15:05,220 --> 00:15:08,040
means uh this verifier now knows the

405
00:15:08,040 --> 00:15:10,620
discrete log between the set element A1

406
00:15:10,620 --> 00:15:12,120
and X1

407
00:15:12,120 --> 00:15:14,579
correspondingly we will build a graph of

408
00:15:14,579 --> 00:15:16,560
these set elements in the transcript and

409
00:15:16,560 --> 00:15:19,320
in the public key based on these queries

410
00:15:19,320 --> 00:15:21,540
so in this case we will make connect an

411
00:15:21,540 --> 00:15:24,000
edge between the set M and A1 and X1

412
00:15:24,000 --> 00:15:26,699
meaning that the verifier knows the

413
00:15:26,699 --> 00:15:29,639
discrete log between these two nodes

414
00:15:29,639 --> 00:15:32,100
and say it makes another query A1 is

415
00:15:32,100 --> 00:15:35,940
equal to H Prime Star A2 we add another

416
00:15:35,940 --> 00:15:38,820
Edge for A1 and A2 between A1 and A2 so

417
00:15:38,820 --> 00:15:40,860
on and so forth until we deal with all

418
00:15:40,860 --> 00:15:43,079
the queries that the verifier makes

419
00:15:43,079 --> 00:15:45,360
now if we think about this notice that

420
00:15:45,360 --> 00:15:48,060
because because the group actions they

421
00:15:48,060 --> 00:15:50,519
compose so if the verifier knows the

422
00:15:50,519 --> 00:15:53,639
discrete log between A1 and X1 and also

423
00:15:53,639 --> 00:15:56,579
A1 and A2 then the verifier knows the

424
00:15:56,579 --> 00:15:59,160
discrete log between X1 and A2 so in

425
00:15:59,160 --> 00:16:01,380
other words if two nodes are in the same

426
00:16:01,380 --> 00:16:03,660
connected connected component the

427
00:16:03,660 --> 00:16:05,160
verifier knows the discrete log between

428
00:16:05,160 --> 00:16:07,320
these two set elements so in other words

429
00:16:07,320 --> 00:16:09,300
if we color all of these connected

430
00:16:09,300 --> 00:16:11,339
components into different colors then

431
00:16:11,339 --> 00:16:13,560
for any two set elements that are the

432
00:16:13,560 --> 00:16:15,660
same color the verifier knows their

433
00:16:15,660 --> 00:16:17,100
discrete lock

434
00:16:17,100 --> 00:16:20,820
okay so now an adversary comes over and

435
00:16:20,820 --> 00:16:22,380
we imagine we can build the following

436
00:16:22,380 --> 00:16:24,120
adversary so the average three does a

437
00:16:24,120 --> 00:16:26,220
very simple thing the average now needs

438
00:16:26,220 --> 00:16:28,199
to simulate a transcript for the

439
00:16:28,199 --> 00:16:31,260
verifier and for every set element that

440
00:16:31,260 --> 00:16:33,660
the average needs to simulate within the

441
00:16:33,660 --> 00:16:36,000
transcript the adversary will just need

442
00:16:36,000 --> 00:16:38,940
to guess its color and if its gases

443
00:16:38,940 --> 00:16:40,620
color correctly then the adversary can

444
00:16:40,620 --> 00:16:43,380
just sample the set element in a way

445
00:16:43,380 --> 00:16:44,880
such that the adversary knows the

446
00:16:44,880 --> 00:16:46,800
discrete lock between the between this

447
00:16:46,800 --> 00:16:48,620
element and the corresponding

448
00:16:48,620 --> 00:16:50,699
corresponding set element in the public

449
00:16:50,699 --> 00:16:52,740
key so in this case for example the R3

450
00:16:52,740 --> 00:16:55,380
gas is A1 is color blue and it generates

451
00:16:55,380 --> 00:16:57,120
in such a way that it knows that this

452
00:16:57,120 --> 00:16:59,459
real life between A1 and X1

453
00:16:59,459 --> 00:17:03,300
okay so how so the how many colors there

454
00:17:03,300 --> 00:17:05,160
are there are P colors so the adversary

455
00:17:05,160 --> 00:17:06,540
can guess a color correctly with

456
00:17:06,540 --> 00:17:08,400
probably one over p and the average

457
00:17:08,400 --> 00:17:10,260
needs to make the guess correctly for

458
00:17:10,260 --> 00:17:12,480
nset elements so that's how we arrive

459
00:17:12,480 --> 00:17:15,059
that P to the minus n

460
00:17:15,059 --> 00:17:17,099
however there are some complications

461
00:17:17,099 --> 00:17:19,859
first of all you can say that okay so if

462
00:17:19,859 --> 00:17:21,839
there is an edge between two public key

463
00:17:21,839 --> 00:17:24,000
elements right that will give you less

464
00:17:24,000 --> 00:17:26,880
colors than you actually have and we we

465
00:17:26,880 --> 00:17:28,860
show that we can take care of that with

466
00:17:28,860 --> 00:17:32,520
the minus p over T term and on the other

467
00:17:32,520 --> 00:17:35,400
hand the adversary while we require the

468
00:17:35,400 --> 00:17:37,740
apps rate you have these required edges

469
00:17:37,740 --> 00:17:39,660
but the apps we can potentially when

470
00:17:39,660 --> 00:17:41,220
simulating a graph can add additional

471
00:17:41,220 --> 00:17:43,260
edges we show that these can be taken

472
00:17:43,260 --> 00:17:45,600
care of with this additional -1 over

473
00:17:45,600 --> 00:17:47,460
poly term

474
00:17:47,460 --> 00:17:49,980
so this is sort of the very high level

475
00:17:49,980 --> 00:17:52,559
idea of our proof outline but uh

476
00:17:52,559 --> 00:17:54,840
formalizing This is highly non-trivial

477
00:17:54,840 --> 00:17:57,240
uh the main technical challenge here is

478
00:17:57,240 --> 00:17:59,220
that the honest part is they can run

479
00:17:59,220 --> 00:18:01,080
some identification protocol just on the

480
00:18:01,080 --> 00:18:03,059
side without using the group action

481
00:18:03,059 --> 00:18:05,820
Oracle so in the proof we have to give

482
00:18:05,820 --> 00:18:07,740
the adversary unlimited amount of

483
00:18:07,740 --> 00:18:09,419
private computation so it's

484
00:18:09,419 --> 00:18:11,280
computationally inbounded the only

485
00:18:11,280 --> 00:18:13,440
hardness comes from bounding the

486
00:18:13,440 --> 00:18:15,480
adversaries number of queries to the

487
00:18:15,480 --> 00:18:17,039
group action Oracle so if you're

488
00:18:17,039 --> 00:18:18,900
interested in the actual proof I would

489
00:18:18,900 --> 00:18:20,160
recommend you to take a look at our

490
00:18:20,160 --> 00:18:21,539
actual paper

491
00:18:21,539 --> 00:18:24,419
okay so to quickly sum up uh in this

492
00:18:24,419 --> 00:18:26,700
paper we show a lower bound of Lambda

493
00:18:26,700 --> 00:18:29,039
squared over log Lambda for group action

494
00:18:29,039 --> 00:18:31,080
based signatures and this actually

495
00:18:31,080 --> 00:18:32,820
matches the State of the State of the

496
00:18:32,820 --> 00:18:34,559
art of group action based signatures

497
00:18:34,559 --> 00:18:36,539
constructed from isogenes

498
00:18:36,539 --> 00:18:38,760
and but we want to notice that there are

499
00:18:38,760 --> 00:18:40,679
several possible ways to circumvent our

500
00:18:40,679 --> 00:18:42,840
lower bound so one possible way because

501
00:18:42,840 --> 00:18:44,820
we what we showed is a lower Bound for

502
00:18:44,820 --> 00:18:46,679
ID protocols so if you're able to build

503
00:18:46,679 --> 00:18:48,900
a signature scheme that is not based on

504
00:18:48,900 --> 00:18:51,480
ID protocols then our lower bound no

505
00:18:51,480 --> 00:18:53,520
longer no longer apply there

506
00:18:53,520 --> 00:18:55,799
or you can try to make make a

507
00:18:55,799 --> 00:18:57,960
construction where you use make use the

508
00:18:57,960 --> 00:18:59,880
group actions none generically for

509
00:18:59,880 --> 00:19:02,580
example a isogeneous signature scheme

510
00:19:02,580 --> 00:19:04,260
called ski sign is actually makes

511
00:19:04,260 --> 00:19:06,360
non-generic use of group actions and

512
00:19:06,360 --> 00:19:07,679
their signatures are pretty short like

513
00:19:07,679 --> 00:19:12,179
200 uh 200 bytes uh or uh you can work

514
00:19:12,179 --> 00:19:14,520
you can bring other harness assumptions

515
00:19:14,520 --> 00:19:17,700
and then our lower band won't hold

516
00:19:17,700 --> 00:19:22,220
okay so that is the talk thank you all

517
00:19:27,299 --> 00:19:28,740
okay if you have time for one quick

518
00:19:28,740 --> 00:19:31,280
question yeah

519
00:19:33,840 --> 00:19:36,299
hi thank you for your talk um I was

520
00:19:36,299 --> 00:19:38,580
wondering if you uh considered in fact

521
00:19:38,580 --> 00:19:40,620
group actions that are not based on

522
00:19:40,620 --> 00:19:43,559
isogenies and how are those related to

523
00:19:43,559 --> 00:19:44,700
your lower bounds if you have an

524
00:19:44,700 --> 00:19:46,620
intuition uh yeah so for for group

525
00:19:46,620 --> 00:19:48,900
action not not based on exogenes I think

526
00:19:48,900 --> 00:19:51,120
the so far the constructions are also by

527
00:19:51,120 --> 00:19:52,919
constructing ID protocol first and then

528
00:19:52,919 --> 00:19:54,419
transferring to a signature scheme so

529
00:19:54,419 --> 00:19:56,340
our lower bound steel holds there so we

530
00:19:56,340 --> 00:19:58,380
bring out isogenes because it's a main

531
00:19:58,380 --> 00:20:02,299
dominant way of getting group actions

532
00:20:05,220 --> 00:20:07,440
so I was wondering there's recently been

533
00:20:07,440 --> 00:20:09,840
this algebraic group model formalization

534
00:20:09,840 --> 00:20:13,260
for uh group actions is your bound carry

535
00:20:13,260 --> 00:20:15,419
over to that model uh our bound is

536
00:20:15,419 --> 00:20:17,940
proving the you know Morris model so

537
00:20:17,940 --> 00:20:18,600
um

538
00:20:18,600 --> 00:20:21,360
uh I'm not sure about the specifically

539
00:20:21,360 --> 00:20:23,400
how how this algebraic group model

540
00:20:23,400 --> 00:20:26,700
compares to tomorrow's model but

541
00:20:26,700 --> 00:20:28,200
um yeah that's a good question we will

542
00:20:28,200 --> 00:20:32,179
need to check that okay thanks

543
00:20:32,880 --> 00:20:35,460
okay okay thank you let's thank the

544
00:20:35,460 --> 00:20:36,870
speaker again

545
00:20:36,870 --> 00:20:43,689
[Applause]

546
00:21:02,640 --> 00:21:04,740
all right so

547
00:21:04,740 --> 00:21:07,980
um the next talk is uh called the short

548
00:21:07,980 --> 00:21:09,900
signatures from regular syndrome

549
00:21:09,900 --> 00:21:13,880
decoding in the Hat by Ileana caroza

550
00:21:13,880 --> 00:21:17,940
Joshua cuato and Antoine Zhu and Eliana

551
00:21:17,940 --> 00:21:21,179
is going to give the talk okay thank you

552
00:21:21,179 --> 00:21:23,280
for introduction and thank you to

553
00:21:23,280 --> 00:21:25,860
everyone for being here with me I'm

554
00:21:25,860 --> 00:21:28,559
Eliana and I will show you a protocol on

555
00:21:28,559 --> 00:21:30,659
which I work in collaboration with Jafar

556
00:21:30,659 --> 00:21:33,240
grito and Antonio that is a new

557
00:21:33,240 --> 00:21:35,400
signature scheme visit on regular

558
00:21:35,400 --> 00:21:38,760
simulation assumption and using an NPC

559
00:21:38,760 --> 00:21:40,380
in hand protocol

560
00:21:40,380 --> 00:21:43,200
so for defining the signature we first

561
00:21:43,200 --> 00:21:45,000
defined as zero knowledgeable for

562
00:21:45,000 --> 00:21:47,580
knowledge and later we switch to a

563
00:21:47,580 --> 00:21:50,580
signature using Viet Shamir so let's

564
00:21:50,580 --> 00:21:52,200
start with refreshing some definition

565
00:21:52,200 --> 00:21:54,539
first of all

566
00:21:54,539 --> 00:21:57,059
or what's problem okay first of all

567
00:21:57,059 --> 00:21:59,340
what's uh what's a zero knowledge proof

568
00:21:59,340 --> 00:22:02,280
of knowledge is an iterative protocol

569
00:22:02,280 --> 00:22:05,460
between two parties approver and a

570
00:22:05,460 --> 00:22:08,400
verifier and the first one I want to

571
00:22:08,400 --> 00:22:10,919
prove to the second one that you know a

572
00:22:10,919 --> 00:22:13,500
weakness but without revealing any

573
00:22:13,500 --> 00:22:16,500
information about this weakness so we

574
00:22:16,500 --> 00:22:19,980
defining this protocol and we switch to

575
00:22:19,980 --> 00:22:23,340
a signature later what's a signature in

576
00:22:23,340 --> 00:22:26,640
a nutshell is a common standard is a way

577
00:22:26,640 --> 00:22:29,280
to be sure about the authenticity of

578
00:22:29,280 --> 00:22:31,500
someone identity so in the classic

579
00:22:31,500 --> 00:22:33,480
cryptographic setting which we have

580
00:22:33,480 --> 00:22:36,900
Alice and Bob how Bob can be sure that a

581
00:22:36,900 --> 00:22:40,620
message is really sent by Alice as in

582
00:22:40,620 --> 00:22:42,780
real life it will be enough for release

583
00:22:42,780 --> 00:22:46,020
to put a signature on it also digitally

584
00:22:46,020 --> 00:22:48,600
she can do it using an authentication

585
00:22:48,600 --> 00:22:51,780
mechanism and currently there are a lot

586
00:22:51,780 --> 00:22:54,740
of signature scheme but um

587
00:22:54,740 --> 00:22:58,740
how you probably know the Advent of

588
00:22:58,740 --> 00:23:01,080
quantum computer will destroy all of

589
00:23:01,080 --> 00:23:03,539
them so for this reason the nist

590
00:23:03,539 --> 00:23:06,240
introduced the famous competition to

591
00:23:06,240 --> 00:23:09,539
Define new post Quantum cryptographic

592
00:23:09,539 --> 00:23:13,260
assumption based on mathematical problem

593
00:23:13,260 --> 00:23:15,360
that are supposed to be resistant

594
00:23:15,360 --> 00:23:16,640
against

595
00:23:16,640 --> 00:23:20,159
Quantum attack and between all these

596
00:23:20,159 --> 00:23:22,380
problems we work with the similar

597
00:23:22,380 --> 00:23:24,780
decoding problem that's the following we

598
00:23:24,780 --> 00:23:27,720
have three parameters two of them a

599
00:23:27,720 --> 00:23:29,940
dimension for our priority check Matrix

600
00:23:29,940 --> 00:23:33,960
H and the last one is a value w we have

601
00:23:33,960 --> 00:23:36,480
this party check Matrix and the syndrome

602
00:23:36,480 --> 00:23:39,960
Y and we want to find a vector X such

603
00:23:39,960 --> 00:23:43,679
that H * X is equal to Y and the Heming

604
00:23:43,679 --> 00:23:46,679
weight of X is equal to w

605
00:23:46,679 --> 00:23:49,200
so of course we can add some properties

606
00:23:49,200 --> 00:23:52,440
that the solution Vector has to satisfy

607
00:23:52,440 --> 00:23:55,620
for example regularity this means that

608
00:23:55,620 --> 00:23:59,580
the vector can be divided in W block and

609
00:23:59,580 --> 00:24:02,520
each of them has a Heming weight equal

610
00:24:02,520 --> 00:24:03,960
to one

611
00:24:03,960 --> 00:24:06,240
so we worked with the regular signal

612
00:24:06,240 --> 00:24:09,059
decoding problem and for better use this

613
00:24:09,059 --> 00:24:11,940
problem in our protocol we decided to

614
00:24:11,940 --> 00:24:14,100
look at these two conditions in a

615
00:24:14,100 --> 00:24:16,980
different way that's mean over two

616
00:24:16,980 --> 00:24:19,799
different structure so the first one is

617
00:24:19,799 --> 00:24:23,280
defined over F2 and second one is

618
00:24:23,280 --> 00:24:26,880
defined over a larger ring that is ZT

619
00:24:26,880 --> 00:24:29,820
so how you can see these two equations

620
00:24:29,820 --> 00:24:32,520
are nothing else that linear condition

621
00:24:32,520 --> 00:24:35,039
that have to be satisfied

622
00:24:35,039 --> 00:24:37,799
so for this reason it was really a

623
00:24:37,799 --> 00:24:40,980
natural idea decide to work with the NPC

624
00:24:40,980 --> 00:24:44,100
because in a multi-party competition

625
00:24:44,100 --> 00:24:45,260
protocol

626
00:24:45,260 --> 00:24:48,120
everything that is linear is really

627
00:24:48,120 --> 00:24:50,720
simple to be obtained

628
00:24:50,720 --> 00:24:54,240
essentially for free how this is

629
00:24:54,240 --> 00:24:57,120
possible we have n parties and each of

630
00:24:57,120 --> 00:24:59,340
them has a private information

631
00:24:59,340 --> 00:25:01,980
so a multivarity computation protocol

632
00:25:01,980 --> 00:25:05,280
allowed them to gently recompute the

633
00:25:05,280 --> 00:25:09,000
image of um of a public function over

634
00:25:09,000 --> 00:25:12,720
all these inputs all these n inputs but

635
00:25:12,720 --> 00:25:15,179
without revealing the private

636
00:25:15,179 --> 00:25:18,780
information so for this reason the use

637
00:25:18,780 --> 00:25:22,260
of the MPC in defining new zero

638
00:25:22,260 --> 00:25:24,000
knowledge proof of knowledge was already

639
00:25:24,000 --> 00:25:27,659
founded in literature as the MPC in the

640
00:25:27,659 --> 00:25:29,940
head so suppose that we have a public

641
00:25:29,940 --> 00:25:34,200
value ym and a public function f and the

642
00:25:34,200 --> 00:25:36,960
proverb of course you know a weakness is

643
00:25:36,960 --> 00:25:40,020
and you want to prove that you know this

644
00:25:40,020 --> 00:25:43,640
weakness such that f of x is equal to Y

645
00:25:43,640 --> 00:25:47,760
then what you can do he can split this

646
00:25:47,760 --> 00:25:50,820
witness between an imaginary part in his

647
00:25:50,820 --> 00:25:54,500
head and later he can use the NPC

648
00:25:54,500 --> 00:25:58,500
over a new function G that is related to

649
00:25:58,500 --> 00:26:01,620
the public function f so in our case

650
00:26:01,620 --> 00:26:04,440
what are the public values we have the

651
00:26:04,440 --> 00:26:08,640
syndrome Y and the Hemingway W so we can

652
00:26:08,640 --> 00:26:12,720
Define the public function f of the

653
00:26:12,720 --> 00:26:17,940
witness X as H times x mod 2 and Heming

654
00:26:17,940 --> 00:26:22,020
weight of X Motif and in this case our

655
00:26:22,020 --> 00:26:25,919
approval can share the weakness between

656
00:26:25,919 --> 00:26:30,299
end parties using additive shares and

657
00:26:30,299 --> 00:26:33,240
later he can define a new function over

658
00:26:33,240 --> 00:26:36,720
all these n input as the public function

659
00:26:36,720 --> 00:26:40,940
f but computed over the sum of each

660
00:26:40,940 --> 00:26:44,820
parties information of course over the

661
00:26:44,820 --> 00:26:46,919
right structure

662
00:26:46,919 --> 00:26:49,640
so what's happened

663
00:26:49,640 --> 00:26:54,179
in detail in prover had we have these n

664
00:26:54,179 --> 00:26:57,240
parties and each of them has what we

665
00:26:57,240 --> 00:27:01,679
call it a view the view is made by its

666
00:27:01,679 --> 00:27:05,940
share of the witness so for part DPI we

667
00:27:05,940 --> 00:27:07,980
have the share x i

668
00:27:07,980 --> 00:27:13,320
and in the online phase of the MPC they

669
00:27:13,320 --> 00:27:16,559
each of them can compute the image of

670
00:27:16,559 --> 00:27:20,100
the public function f over the private

671
00:27:20,100 --> 00:27:24,539
inputs so for part API he will compute H

672
00:27:24,539 --> 00:27:28,559
time XI mod 2 and Heming weight of XI

673
00:27:28,559 --> 00:27:32,760
moti and the verifier leader can check

674
00:27:32,760 --> 00:27:36,539
that the proverb was Honest by asking to

675
00:27:36,539 --> 00:27:40,260
see all parties view part one this is

676
00:27:40,260 --> 00:27:42,960
because okay if the profile is not

677
00:27:42,960 --> 00:27:45,179
honest so it doesn't really know the

678
00:27:45,179 --> 00:27:48,900
witness he must have lied at least in

679
00:27:48,900 --> 00:27:51,960
one part his view so he has many chance

680
00:27:51,960 --> 00:27:54,900
to be caught by the verifier

681
00:27:54,900 --> 00:27:58,380
and in the same time however revealing

682
00:27:58,380 --> 00:28:01,380
all parties view but one it doesn't

683
00:28:01,380 --> 00:28:05,000
allow the verifier to recompute witness

684
00:28:05,000 --> 00:28:08,640
because as you can guess to recompute

685
00:28:08,640 --> 00:28:12,240
the whole value we need all parties View

686
00:28:12,240 --> 00:28:15,360
so this is totally secure and it's

687
00:28:15,360 --> 00:28:17,400
really simple because as you can see

688
00:28:17,400 --> 00:28:20,700
there are only simple sum so everything

689
00:28:20,700 --> 00:28:24,360
is linear the only problem here is that

690
00:28:24,360 --> 00:28:27,960
in the online phase each party has to

691
00:28:27,960 --> 00:28:30,600
compute these two value using the public

692
00:28:30,600 --> 00:28:33,360
function but the first one is computed

693
00:28:33,360 --> 00:28:37,919
mod 2 so this means that party needs a

694
00:28:37,919 --> 00:28:40,440
share of the witness mode two and second

695
00:28:40,440 --> 00:28:43,559
one is computed multi so this means that

696
00:28:43,559 --> 00:28:47,100
they need shared weakness Motif so what

697
00:28:47,100 --> 00:28:49,440
we need here is a mechanism to convert

698
00:28:49,440 --> 00:28:51,779
share of the witness mode 2 to Shared

699
00:28:51,779 --> 00:28:54,779
witness moti and we discovered that we

700
00:28:54,779 --> 00:28:57,419
can easily obtain this by using a random

701
00:28:57,419 --> 00:29:01,200
Vector R to define a new Vector that is

702
00:29:01,200 --> 00:29:03,440
an auxiliary Vector Z

703
00:29:03,440 --> 00:29:06,480
computed by using share of the weakness

704
00:29:06,480 --> 00:29:09,960
mod 2 and share of the random Vector mod

705
00:29:09,960 --> 00:29:12,960
2. so in this case we can switch reach

706
00:29:12,960 --> 00:29:15,840
to the share of the auxiliary the the

707
00:29:15,840 --> 00:29:17,059
witness

708
00:29:17,059 --> 00:29:20,700
moti by using this formula in which we

709
00:29:20,700 --> 00:29:24,000
have a share of the random Vector a moti

710
00:29:24,000 --> 00:29:26,940
so this means that if in our protocol

711
00:29:26,940 --> 00:29:30,000
there is a third trusted part that

712
00:29:30,000 --> 00:29:33,480
before the online phase of the MPC Stars

713
00:29:33,480 --> 00:29:36,720
he gives to all party what we call the

714
00:29:36,720 --> 00:29:39,480
prepossessing material that is share of

715
00:29:39,480 --> 00:29:43,380
the random Vector mode 2 and moti then

716
00:29:43,380 --> 00:29:45,299
everything will perfectly work because

717
00:29:45,299 --> 00:29:48,179
each party can use its share of the

718
00:29:48,179 --> 00:29:51,179
preprocessing material to apply this

719
00:29:51,179 --> 00:29:54,000
formula and to obtain the shear of the

720
00:29:54,000 --> 00:29:57,240
weakness moti but the problem is that we

721
00:29:57,240 --> 00:29:59,520
don't want to add another part in our

722
00:29:59,520 --> 00:30:02,100
protocol so we decide to allow the

723
00:30:02,100 --> 00:30:04,860
prover itself to share the

724
00:30:04,860 --> 00:30:07,020
pre-processing material this means that

725
00:30:07,020 --> 00:30:09,840
in the first round of our protocol the

726
00:30:09,840 --> 00:30:12,179
proverb has to share both the witness

727
00:30:12,179 --> 00:30:15,000
and the pre-processing material and of

728
00:30:15,000 --> 00:30:17,700
course he has to compute to all parties

729
00:30:17,700 --> 00:30:18,899
View

730
00:30:18,899 --> 00:30:21,419
so the second round is for the verifier

731
00:30:21,419 --> 00:30:24,120
to check that pre-processing phase was

732
00:30:24,120 --> 00:30:26,340
well computed in a way that I will

733
00:30:26,340 --> 00:30:29,760
explain in a few moments and the third

734
00:30:29,760 --> 00:30:31,919
round is for the approver to run the

735
00:30:31,919 --> 00:30:34,620
online phase of the MPC in the head so

736
00:30:34,620 --> 00:30:37,559
each part computes the public function

737
00:30:37,559 --> 00:30:40,500
over its private input as I described in

738
00:30:40,500 --> 00:30:43,500
the last Slide the fourth round is for

739
00:30:43,500 --> 00:30:46,020
the verifier to choose a challenge in a

740
00:30:46,020 --> 00:30:47,820
way such that the provider has to open

741
00:30:47,820 --> 00:30:52,020
all parties view part 1. so here the

742
00:30:52,020 --> 00:30:54,659
last round will largely dominate our

743
00:30:54,659 --> 00:30:57,299
communication cost because in all

744
00:30:57,299 --> 00:30:59,399
parties view there is the share of the

745
00:30:59,399 --> 00:31:02,039
random Vector moti so this means that

746
00:31:02,039 --> 00:31:05,039
the communication cost depends on T and

747
00:31:05,039 --> 00:31:06,899
if we had chosen to work with the

748
00:31:06,899 --> 00:31:09,659
syndrome decoding assumption then T will

749
00:31:09,659 --> 00:31:11,820
have been to the total length of the

750
00:31:11,820 --> 00:31:15,419
witness that is BK but working with

751
00:31:15,419 --> 00:31:18,899
regular signal recording assumption T is

752
00:31:18,899 --> 00:31:21,600
equal to the length of each block in

753
00:31:21,600 --> 00:31:24,779
which the witness is divided So it's b k

754
00:31:24,779 --> 00:31:28,260
over W so this means that paradoxically

755
00:31:28,260 --> 00:31:31,679
the higher is the weight the lower is

756
00:31:31,679 --> 00:31:35,220
the communication cost and this is why

757
00:31:35,220 --> 00:31:37,440
we decide to work with a regular

758
00:31:37,440 --> 00:31:39,000
assumption

759
00:31:39,000 --> 00:31:41,700
so now that the basic structure is clear

760
00:31:41,700 --> 00:31:43,860
and why we decide to work with the

761
00:31:43,860 --> 00:31:46,919
regular assumption is clear we can

762
00:31:46,919 --> 00:31:49,320
figure out how we can handle the

763
00:31:49,320 --> 00:31:51,740
preprocessing material because as I said

764
00:31:51,740 --> 00:31:54,720
okay if there is a third trusted part

765
00:31:54,720 --> 00:31:56,460
that share the preprocessing material

766
00:31:56,460 --> 00:31:58,919
everything will work but later I said

767
00:31:58,919 --> 00:32:02,039
okay no we allow the proverb itself to

768
00:32:02,039 --> 00:32:04,140
share the preprocessing material and of

769
00:32:04,140 --> 00:32:06,179
course the Brewer is not a trusted part

770
00:32:06,179 --> 00:32:09,960
so how we can handle it okay in

771
00:32:09,960 --> 00:32:12,240
literature there are two standard way to

772
00:32:12,240 --> 00:32:15,059
do this The Cutting shoes technique that

773
00:32:15,059 --> 00:32:17,640
in which the approver has to commit many

774
00:32:17,640 --> 00:32:19,320
instances of the pre-processing phase

775
00:32:19,320 --> 00:32:22,559
and the verifier has to open a subset of

776
00:32:22,559 --> 00:32:24,659
them but this is Impractical because

777
00:32:24,659 --> 00:32:27,539
induce a large hover ads the second one

778
00:32:27,539 --> 00:32:30,360
is the sacrificing technique but

779
00:32:30,360 --> 00:32:32,880
unfortunately is customized for specific

780
00:32:32,880 --> 00:32:35,220
type pre-processing material so we

781
00:32:35,220 --> 00:32:38,220
cannot use these two technique but we

782
00:32:38,220 --> 00:32:40,080
can handle the processing material

783
00:32:40,080 --> 00:32:43,919
without checking in on it but with this

784
00:32:43,919 --> 00:32:47,399
trick we decide that it can be used only

785
00:32:47,399 --> 00:32:51,059
after his Shuffle using a permutation

786
00:32:51,059 --> 00:32:52,700
that is

787
00:32:52,700 --> 00:32:56,399
chosen by the verifier so what we had

788
00:32:56,399 --> 00:32:59,760
before is that the solution Vector has

789
00:32:59,760 --> 00:33:02,940
to satisfy this four equations so H time

790
00:33:02,940 --> 00:33:06,059
x is equal to Y later we can compute the

791
00:33:06,059 --> 00:33:08,700
auxiliary Vector using the witness and

792
00:33:08,700 --> 00:33:10,919
the first part of preposition material s

793
00:33:10,919 --> 00:33:14,460
and so switch to moti using the second

794
00:33:14,460 --> 00:33:17,120
part of preprocessing material that is T

795
00:33:17,120 --> 00:33:21,299
and this new Vector is first has to have

796
00:33:21,299 --> 00:33:23,399
Hemi weight equal to w

797
00:33:23,399 --> 00:33:26,340
now that we introduce a deep permutation

798
00:33:26,340 --> 00:33:29,279
we still have this four equation but of

799
00:33:29,279 --> 00:33:31,019
course the preprocessing material is

800
00:33:31,019 --> 00:33:34,200
shuffled before it can be used so a

801
00:33:34,200 --> 00:33:36,240
malicious power that doesn't really know

802
00:33:36,240 --> 00:33:39,179
the weakness but he wants to be accepted

803
00:33:39,179 --> 00:33:42,960
by the verifier he has to find a

804
00:33:42,960 --> 00:33:46,399
preprocessing material that allow him to

805
00:33:46,399 --> 00:33:49,500
obtain in these four equations these

806
00:33:49,500 --> 00:33:51,720
four equations are still satisfied but

807
00:33:51,720 --> 00:33:53,460
without knowing in advance the

808
00:33:53,460 --> 00:33:54,720
permutation

809
00:33:54,720 --> 00:33:58,860
so we analyzed these probability and we

810
00:33:58,860 --> 00:34:02,220
called combinatorial bound even if it's

811
00:34:02,220 --> 00:34:05,580
small we observe that this combinatorial

812
00:34:05,580 --> 00:34:09,000
bound becomes bigger if the verifier

813
00:34:09,000 --> 00:34:13,139
shows the approver shows a weakness that

814
00:34:13,139 --> 00:34:16,679
is regular in all block but one because

815
00:34:16,679 --> 00:34:19,800
in this case he can find a preprocessing

816
00:34:19,800 --> 00:34:23,099
material that is regular in each entry

817
00:34:23,099 --> 00:34:27,719
but one and with probability 1 over W

818
00:34:27,719 --> 00:34:30,739
when the purposes C material is shuffled

819
00:34:30,739 --> 00:34:33,839
the incorrect entry of the preprocessing

820
00:34:33,839 --> 00:34:35,940
material perfectly matched with the

821
00:34:35,940 --> 00:34:39,119
faulty block of the weakness so they

822
00:34:39,119 --> 00:34:41,839
correct each other they hide each other

823
00:34:41,839 --> 00:34:45,780
and okay even if an approver of course

824
00:34:45,780 --> 00:34:48,839
will be accepted by the verifier even if

825
00:34:48,839 --> 00:34:52,739
1 over W is really small it largely

826
00:34:52,739 --> 00:34:55,679
dominates our samness error so for this

827
00:34:55,679 --> 00:34:59,220
reason we decide to allow the type this

828
00:34:59,220 --> 00:35:02,760
type of weakness and to relax the

829
00:35:02,760 --> 00:35:05,520
regular condition and working with an F

830
00:35:05,520 --> 00:35:07,800
almost regular senior decoding problem

831
00:35:07,800 --> 00:35:12,119
in which the goal is to find an F almost

832
00:35:12,119 --> 00:35:15,000
a solution that's a vector that is

833
00:35:15,000 --> 00:35:19,200
regular in each block except Atmos f

834
00:35:19,200 --> 00:35:21,780
and of course these leads to a gap

835
00:35:21,780 --> 00:35:24,780
between the witness the real witness

836
00:35:24,780 --> 00:35:27,480
that the approval uh the wholeness

837
00:35:27,480 --> 00:35:30,720
prover has and the witness that can be

838
00:35:30,720 --> 00:35:33,540
extracted by a malicious program and we

839
00:35:33,540 --> 00:35:37,260
will find this Gap in the sunless error

840
00:35:37,260 --> 00:35:40,020
so anyway this will not change anything

841
00:35:40,020 --> 00:35:42,720
in our in our protocol because we will

842
00:35:42,720 --> 00:35:45,480
choose parameter in a way such that the

843
00:35:45,480 --> 00:35:49,980
almost RSD is so injective that the only

844
00:35:49,980 --> 00:35:52,800
almost regular solution is exactly the

845
00:35:52,800 --> 00:35:56,599
regular one so nothing will change

846
00:35:56,599 --> 00:36:00,420
and now that the all the basic idea all

847
00:36:00,420 --> 00:36:03,300
the main idea are clear we can look in

848
00:36:03,300 --> 00:36:06,420
detail to our protocol so parameters are

849
00:36:06,420 --> 00:36:08,700
always the same we have the part check

850
00:36:08,700 --> 00:36:11,520
Matrix and the stringent and the

851
00:36:11,520 --> 00:36:14,700
approval also not witness so for in the

852
00:36:14,700 --> 00:36:17,220
first round he share both weakness and

853
00:36:17,220 --> 00:36:19,619
the preprocessing material and commit to

854
00:36:19,619 --> 00:36:21,180
all parties View

855
00:36:21,180 --> 00:36:25,140
the second round is for the verifier to

856
00:36:25,140 --> 00:36:28,320
choose the permutation that approver has

857
00:36:28,320 --> 00:36:31,680
to use in the online phase of the MPC in

858
00:36:31,680 --> 00:36:32,660
the end

859
00:36:32,660 --> 00:36:37,260
and where the share of the witness Motu

860
00:36:37,260 --> 00:36:40,260
are used from each party by each party

861
00:36:40,260 --> 00:36:45,839
to compute age time x and the shuffle

862
00:36:45,839 --> 00:36:48,420
pre-processing material is used to

863
00:36:48,420 --> 00:36:51,300
define the auxiliary Vector Z and to

864
00:36:51,300 --> 00:36:54,599
switch to moti in order to compute the

865
00:36:54,599 --> 00:36:58,020
Heming weight multi so this means that

866
00:36:58,020 --> 00:37:00,359
at the end of the online phase of the

867
00:37:00,359 --> 00:37:03,780
MPC in the head each party has a message

868
00:37:03,780 --> 00:37:06,839
that contains a bit a little information

869
00:37:06,839 --> 00:37:10,200
about the syndrome information about the

870
00:37:10,200 --> 00:37:12,720
auxiliary vector and information about

871
00:37:12,720 --> 00:37:15,000
the Heming weight

872
00:37:15,000 --> 00:37:18,240
and later the fourth round is still for

873
00:37:18,240 --> 00:37:20,820
the verifier to choose a challenge so

874
00:37:20,820 --> 00:37:22,980
the program has to open all parties view

875
00:37:22,980 --> 00:37:26,520
part one and in the verification the

876
00:37:26,520 --> 00:37:29,099
verifier check that everything was well

877
00:37:29,099 --> 00:37:32,460
computed and of course was consistent so

878
00:37:32,460 --> 00:37:36,300
this means that the sum of each party's

879
00:37:36,300 --> 00:37:39,060
information about the syndrome has to be

880
00:37:39,060 --> 00:37:42,240
equal to the total syndrome mode 2 and

881
00:37:42,240 --> 00:37:45,000
the sum of each parties formation about

882
00:37:45,000 --> 00:37:48,540
the Heming weight has to be equal to the

883
00:37:48,540 --> 00:37:51,240
total Heming weight moti

884
00:37:51,240 --> 00:37:54,000
okay so this of course was our first

885
00:37:54,000 --> 00:37:57,180
draft and we added a lot of optimization

886
00:37:57,180 --> 00:38:00,300
but at the end we obtained our zero

887
00:38:00,300 --> 00:38:02,280
knowledge proof of knowledge for which

888
00:38:02,280 --> 00:38:05,280
we can compute the soundness of course

889
00:38:05,280 --> 00:38:08,640
as expected this is influenced by the

890
00:38:08,640 --> 00:38:12,780
Gap that is introduced by allowing the

891
00:38:12,780 --> 00:38:15,060
almost solution

892
00:38:15,060 --> 00:38:18,660
and so the sunness will depends on the

893
00:38:18,660 --> 00:38:22,579
combinatorial bound p and also we can

894
00:38:22,579 --> 00:38:26,339
compute the communication cost and this

895
00:38:26,339 --> 00:38:28,500
community in the biggest part of this

896
00:38:28,500 --> 00:38:31,500
communication cost is I expected related

897
00:38:31,500 --> 00:38:33,240
to uh

898
00:38:33,240 --> 00:38:36,720
okay open all parties View and so from

899
00:38:36,720 --> 00:38:38,220
this zero knowledge view for knowledge

900
00:38:38,220 --> 00:38:41,220
we obtained our signature scheme by

901
00:38:41,220 --> 00:38:43,740
using the Fiat Shamir that is a common

902
00:38:43,740 --> 00:38:45,599
way to switch from an intellative

903
00:38:45,599 --> 00:38:47,760
protocol in which we have approver and a

904
00:38:47,760 --> 00:38:50,540
verifier to a non-integrative one

905
00:38:50,540 --> 00:38:54,000
simply by Computing the two challenge

906
00:38:54,000 --> 00:38:56,400
that before were chosen by the verifier

907
00:38:56,400 --> 00:38:58,859
in a random way for example using upside

908
00:38:58,859 --> 00:39:01,320
random generator and that's what we did

909
00:39:01,320 --> 00:39:03,780
a really common standard nothing special

910
00:39:03,780 --> 00:39:07,920
but we attended our signature and for

911
00:39:07,920 --> 00:39:10,079
different and we obtained the best set

912
00:39:10,079 --> 00:39:13,440
parameter that are the following and for

913
00:39:13,440 --> 00:39:16,320
different value of the number of

914
00:39:16,320 --> 00:39:18,839
iteration in this in the signature and

915
00:39:18,839 --> 00:39:23,040
number of Party in the NPC we obtain a

916
00:39:23,040 --> 00:39:25,380
different signature the first one let us

917
00:39:25,380 --> 00:39:28,079
runtime less than three milliseconds and

918
00:39:28,079 --> 00:39:30,180
the shorter one that has signature size

919
00:39:30,180 --> 00:39:32,760
less than nine kilobytes so that's

920
00:39:32,760 --> 00:39:35,160
really competitive with the state of the

921
00:39:35,160 --> 00:39:37,859
art and that's all thank you for your

922
00:39:37,859 --> 00:39:40,200
attention and other developers are in

923
00:39:40,200 --> 00:39:42,500
the paper

924
00:39:42,520 --> 00:39:48,489
[Applause]

925
00:39:49,020 --> 00:39:52,200
one quick question I think we have

926
00:39:52,200 --> 00:39:53,480
something

927
00:39:53,480 --> 00:39:56,940
I have a good question so um do we have

928
00:39:56,940 --> 00:40:00,420
an overall the security theorem like if

929
00:40:00,420 --> 00:40:03,660
assumption a is true then the signature

930
00:40:03,660 --> 00:40:05,400
scheme is secure

931
00:40:05,400 --> 00:40:07,500
what sorry about that sorry do you have

932
00:40:07,500 --> 00:40:11,040
like a a general security theorem that

933
00:40:11,040 --> 00:40:13,320
stays the states the security of your

934
00:40:13,320 --> 00:40:14,400
scheme

935
00:40:14,400 --> 00:40:17,400
I might have missed that I mean the the

936
00:40:17,400 --> 00:40:19,800
security is related to the security of

937
00:40:19,800 --> 00:40:21,960
MPC and of the zero knowledge group that

938
00:40:21,960 --> 00:40:25,079
we created and later we just used Fiesta

939
00:40:25,079 --> 00:40:27,440
meal

940
00:40:28,380 --> 00:40:29,040
um

941
00:40:29,040 --> 00:40:33,599
so yeah it's related to this

942
00:40:33,599 --> 00:40:35,880
okay good

943
00:40:35,880 --> 00:40:41,000
all right so let's thank Eliana again

944
00:41:03,119 --> 00:41:06,000
all right so the last talk

945
00:41:06,000 --> 00:41:09,420
before the switch breaking track spacing

946
00:41:09,420 --> 00:41:13,680
brake is the return of the syndrome

947
00:41:13,680 --> 00:41:16,560
decoding in the head

948
00:41:16,560 --> 00:41:20,280
um by James hover David Joseph Nicola

949
00:41:20,280 --> 00:41:21,980
Gama

950
00:41:21,980 --> 00:41:27,780
Carlos aguiar and Susan and Nicola will

951
00:41:27,780 --> 00:41:29,820
give the talk

952
00:41:29,820 --> 00:41:32,420
so thank you for the presentation

953
00:41:32,420 --> 00:41:35,460
I'll present the paper on the return of

954
00:41:35,460 --> 00:41:38,339
the SD in the head so SD in the head is

955
00:41:38,339 --> 00:41:41,700
not related with the isogeny one that

956
00:41:41,700 --> 00:41:43,260
will be broken in the next session it's

957
00:41:43,260 --> 00:41:45,180
completely different

958
00:41:45,180 --> 00:41:47,460
and actually it's very related to the

959
00:41:47,460 --> 00:41:50,180
previous token so

960
00:41:50,180 --> 00:41:53,700
this talk is about an optimization about

961
00:41:53,700 --> 00:41:55,859
MPC in the header that we call a

962
00:41:55,859 --> 00:41:58,619
hypercube NPC in the head so how to make

963
00:41:58,619 --> 00:42:01,260
NPC in the head faster and keeping the

964
00:42:01,260 --> 00:42:03,599
same proof size and the second part will

965
00:42:03,599 --> 00:42:04,980
be an application to the syndrome

966
00:42:04,980 --> 00:42:06,420
decoding problem

967
00:42:06,420 --> 00:42:09,000
so it is actually not the first

968
00:42:09,000 --> 00:42:12,240
application first time we see syndrome

969
00:42:12,240 --> 00:42:15,180
decoding and NPC in the head together so

970
00:42:15,180 --> 00:42:17,280
that would be episode two or three so

971
00:42:17,280 --> 00:42:21,440
hence the title The Return of this piece

972
00:42:21,920 --> 00:42:26,520
so part one hypercube NPC in the heads

973
00:42:26,520 --> 00:42:28,800
so how can we make digital signature

974
00:42:28,800 --> 00:42:32,640
faster smaller and much more secure so

975
00:42:32,640 --> 00:42:34,619
there the good thing with MPC in the

976
00:42:34,619 --> 00:42:36,240
head is that we have a straight line

977
00:42:36,240 --> 00:42:39,720
between uh any hot problem that we can

978
00:42:39,720 --> 00:42:42,380
take as a basis so

979
00:42:42,380 --> 00:42:45,720
this hot problem so we usually choose it

980
00:42:45,720 --> 00:42:48,960
from the NP class or hard NP problem

981
00:42:48,960 --> 00:42:51,320
means something that is hard in average

982
00:42:51,320 --> 00:42:54,180
but has a an efficient verification

983
00:42:54,180 --> 00:42:55,920
function so this the verification

984
00:42:55,920 --> 00:42:58,859
algorithm we are just going to run it in

985
00:42:58,859 --> 00:43:01,920
a semi honest MPC motor

986
00:43:01,920 --> 00:43:06,660
so then NPC in the head will turn this

987
00:43:06,660 --> 00:43:09,839
semio Nest execution into honest

988
00:43:09,839 --> 00:43:12,000
verifier zero knowledge proof between

989
00:43:12,000 --> 00:43:14,160
approver and a verifier so this time the

990
00:43:14,160 --> 00:43:17,819
prover can be malicious and then Fiat

991
00:43:17,819 --> 00:43:19,560
chamir will transform it into a

992
00:43:19,560 --> 00:43:21,720
non-interactive protocol and essentially

993
00:43:21,720 --> 00:43:23,819
a signature

994
00:43:23,819 --> 00:43:28,619
so in this talk we improve NPC in the

995
00:43:28,619 --> 00:43:30,560
header

996
00:43:30,560 --> 00:43:36,200
to make it faster basically

997
00:43:36,440 --> 00:43:39,540
uh so let's go over this this chain so

998
00:43:39,540 --> 00:43:41,819
I'll keep the hot problem for later for

999
00:43:41,819 --> 00:43:43,040
the second part

1000
00:43:43,040 --> 00:43:45,900
so let's suppose I have a verification

1001
00:43:45,900 --> 00:43:48,960
algorithm to implement so first I have

1002
00:43:48,960 --> 00:43:52,260
to implement it in MPC here and here the

1003
00:43:52,260 --> 00:43:55,500
good news is that I can pick any uh MPC

1004
00:43:55,500 --> 00:43:58,260
framework I want any number of player

1005
00:43:58,260 --> 00:44:00,180
the more the better so we all know that

1006
00:44:00,180 --> 00:44:02,460
two player NPC is very hard to put in

1007
00:44:02,460 --> 00:44:04,800
place but after three players it becomes

1008
00:44:04,800 --> 00:44:07,740
quite natural huh we can Target only

1009
00:44:07,740 --> 00:44:09,660
semi honest security at this step it's

1010
00:44:09,660 --> 00:44:12,060
okay because NPC in the head will regain

1011
00:44:12,060 --> 00:44:14,940
malicious security later huh and even

1012
00:44:14,940 --> 00:44:17,460
The Trusted dealer setup is okay so if

1013
00:44:17,460 --> 00:44:19,260
we have to use before triplet for

1014
00:44:19,260 --> 00:44:22,520
example that's perfectly fine we'll just

1015
00:44:22,520 --> 00:44:25,680
provide any triplet as part of the

1016
00:44:25,680 --> 00:44:28,619
inputs and make sure that the algorithm

1017
00:44:28,619 --> 00:44:30,839
checks for the triplet consistency here

1018
00:44:30,839 --> 00:44:33,839
so Beaver sacrifice cut and choose all

1019
00:44:33,839 --> 00:44:36,000
of that can work

1020
00:44:36,000 --> 00:44:39,240
so all of that means from the MPC point

1021
00:44:39,240 --> 00:44:40,800
of view there is no restriction we can

1022
00:44:40,800 --> 00:44:42,780
operate in the fastest and most concise

1023
00:44:42,780 --> 00:44:46,260
out of all the MPC available out there

1024
00:44:46,260 --> 00:44:49,440
huh so it's just whenever we are coding

1025
00:44:49,440 --> 00:44:51,900
the MPC algorithm the guideline is

1026
00:44:51,900 --> 00:44:54,300
strongly optimized for inputs and number

1027
00:44:54,300 --> 00:44:56,460
of bytes of communication the rest is a

1028
00:44:56,460 --> 00:44:58,680
bonus running time and rounds it doesn't

1029
00:44:58,680 --> 00:45:02,359
really matter for MPS in the head

1030
00:45:02,700 --> 00:45:07,280
so then once we have this NPC protocol

1031
00:45:07,280 --> 00:45:09,780
how do we turn that into a zero

1032
00:45:09,780 --> 00:45:11,040
knowledge proof

1033
00:45:11,040 --> 00:45:15,660
well that's the idea is quite simple so

1034
00:45:15,660 --> 00:45:18,720
the prover will first simulate the

1035
00:45:18,720 --> 00:45:21,119
entire MPC protocol of the verification

1036
00:45:21,119 --> 00:45:24,839
algorithm in his mind in his head and

1037
00:45:24,839 --> 00:45:27,720
basically commits to everything that is

1038
00:45:27,720 --> 00:45:30,420
Secret in the protocol so basically the

1039
00:45:30,420 --> 00:45:32,940
inputs and publish everything that is

1040
00:45:32,940 --> 00:45:34,920
public the broadcast did communication

1041
00:45:34,920 --> 00:45:36,599
so

1042
00:45:36,599 --> 00:45:39,660
so then the verifier will first do a

1043
00:45:39,660 --> 00:45:41,640
basic syntax check to verify that it

1044
00:45:41,640 --> 00:45:43,500
looks like an NPC protocol and that the

1045
00:45:43,500 --> 00:45:46,500
result is really zero and then ask the

1046
00:45:46,500 --> 00:45:49,800
prover to open n minus one of the N

1047
00:45:49,800 --> 00:45:51,119
partism

1048
00:45:51,119 --> 00:45:54,599
so of course the prover we cannot open

1049
00:45:54,599 --> 00:45:56,339
the end parties because that would leak

1050
00:45:56,339 --> 00:45:58,140
completely the inputs but if we open

1051
00:45:58,140 --> 00:46:01,140
just n minus 1 that's fine we get no

1052
00:46:01,140 --> 00:46:03,119
information about the inputs

1053
00:46:03,119 --> 00:46:05,640
and then the verifier will just

1054
00:46:05,640 --> 00:46:08,400
re-evaluate these n minus one parties

1055
00:46:08,400 --> 00:46:11,160
entirely and verify that the commitments

1056
00:46:11,160 --> 00:46:13,440
are caucasia and every communication

1057
00:46:13,440 --> 00:46:15,119
that was published on the building Port

1058
00:46:15,119 --> 00:46:16,619
was the right one

1059
00:46:16,619 --> 00:46:19,140
that means none of these n minus one

1060
00:46:19,140 --> 00:46:20,760
parties Have Cheated

1061
00:46:20,760 --> 00:46:23,220
so the only way for approval to cheat

1062
00:46:23,220 --> 00:46:25,859
was to cheat on the the last party that

1063
00:46:25,859 --> 00:46:27,720
was not chosen by the verifier so that

1064
00:46:27,720 --> 00:46:29,819
gives a 1 over n cheating probability

1065
00:46:29,819 --> 00:46:31,560
here

1066
00:46:31,560 --> 00:46:34,859
so at the end of the line the verifier

1067
00:46:34,859 --> 00:46:36,960
hasn't learned nothing more than what

1068
00:46:36,960 --> 00:46:38,760
the Coalition of n minus one parties

1069
00:46:38,760 --> 00:46:41,940
would learn that means NADA accept the

1070
00:46:41,940 --> 00:46:42,780
results

1071
00:46:42,780 --> 00:46:44,760
and

1072
00:46:44,760 --> 00:46:49,040
the soundness is one minus one over

1073
00:46:49,980 --> 00:46:53,520
so let's dive into a little bit of more

1074
00:46:53,520 --> 00:46:56,040
details here so we have

1075
00:46:56,040 --> 00:46:59,520
the input shares of the end players so

1076
00:46:59,520 --> 00:47:02,760
usually on the inputs we have the actual

1077
00:47:02,760 --> 00:47:04,380
input of the function that we call the

1078
00:47:04,380 --> 00:47:06,660
witness and we have some Beaver Trippers

1079
00:47:06,660 --> 00:47:08,400
so inside the beaver triple there are

1080
00:47:08,400 --> 00:47:09,560
some uniform

1081
00:47:09,560 --> 00:47:12,300
random variables and there are some

1082
00:47:12,300 --> 00:47:14,940
dependent variables

1083
00:47:14,940 --> 00:47:17,700
so the proverb will just Secret show

1084
00:47:17,700 --> 00:47:20,099
that huh so from your secret sharing

1085
00:47:20,099 --> 00:47:22,859
point of view everything derives from a

1086
00:47:22,859 --> 00:47:25,500
seed except the last chair

1087
00:47:25,500 --> 00:47:27,300
and even inside the last year or the

1088
00:47:27,300 --> 00:47:29,819
uniform part still derives on the seed

1089
00:47:29,819 --> 00:47:32,760
so that's something that is still small

1090
00:47:32,760 --> 00:47:35,579
the prover will publish a commitment on

1091
00:47:35,579 --> 00:47:38,220
the inputs and then if we look at the

1092
00:47:38,220 --> 00:47:40,740
MPC protocol right in the eye what is

1093
00:47:40,740 --> 00:47:42,960
the MPC protocol it's just

1094
00:47:42,960 --> 00:47:45,420
going to evaluate a sequence of linear

1095
00:47:45,420 --> 00:47:49,020
functions one after the other and each

1096
00:47:49,020 --> 00:47:51,359
function will have a result that is

1097
00:47:51,359 --> 00:47:54,480
revealed so let's say the first function

1098
00:47:54,480 --> 00:47:57,420
is f and the result is Alpha since the

1099
00:47:57,420 --> 00:47:59,280
function is linear every player will

1100
00:47:59,280 --> 00:48:01,560
obtain will publish a share of alpha

1101
00:48:01,560 --> 00:48:03,540
that reconstruct to the plain broadcast

1102
00:48:03,540 --> 00:48:06,240
Alpha and then Alpha will be used to

1103
00:48:06,240 --> 00:48:08,940
parameterize the next linear function so

1104
00:48:08,940 --> 00:48:11,220
second one will be G Alpha that will

1105
00:48:11,220 --> 00:48:12,540
produce shares of beta and

1106
00:48:12,540 --> 00:48:14,400
reconstructive beta and so on and so on

1107
00:48:14,400 --> 00:48:18,180
until we execute the last function Z of

1108
00:48:18,180 --> 00:48:20,400
alphabet Again by Delta whatever blah

1109
00:48:20,400 --> 00:48:22,319
blah blah that will keep the shares of

1110
00:48:22,319 --> 00:48:24,420
the final results and in the case of a

1111
00:48:24,420 --> 00:48:27,780
verification this result should be zero

1112
00:48:27,780 --> 00:48:30,060
so here in this picture everything that

1113
00:48:30,060 --> 00:48:33,480
is in green is considered public and

1114
00:48:33,480 --> 00:48:35,940
published by the the prover

1115
00:48:35,940 --> 00:48:38,640
B and everything that is in Gray is

1116
00:48:38,640 --> 00:48:42,060
secret so only n minus one will be open

1117
00:48:42,060 --> 00:48:44,160
so of course that would be a lot of

1118
00:48:44,160 --> 00:48:47,700
verbals if we do that in practice we

1119
00:48:47,700 --> 00:48:50,099
realize that well someone realized that

1120
00:48:50,099 --> 00:48:53,760
in the past that it was not necessary to

1121
00:48:53,760 --> 00:48:57,619
to publish the whole broadcast board

1122
00:48:57,619 --> 00:49:00,599
just harsh up the broadcast bodies is

1123
00:49:00,599 --> 00:49:01,560
enough

1124
00:49:01,560 --> 00:49:04,260
because eventually what will happen in

1125
00:49:04,260 --> 00:49:06,300
the proof is that n minus 1 colon will

1126
00:49:06,300 --> 00:49:08,220
be completely open so the verifier will

1127
00:49:08,220 --> 00:49:10,680
be able to recompute it and since we

1128
00:49:10,680 --> 00:49:12,599
have also the plain text we'll obtain

1129
00:49:12,599 --> 00:49:14,760
the last colon by difference so we only

1130
00:49:14,760 --> 00:49:16,319
need the hash to make sure that nothing

1131
00:49:16,319 --> 00:49:18,980
has moved

1132
00:49:19,220 --> 00:49:21,780
so from a proof size point of view we

1133
00:49:21,780 --> 00:49:24,359
are good the only thing is that we still

1134
00:49:24,359 --> 00:49:27,540
need to compute this broadcast built in

1135
00:49:27,540 --> 00:49:29,220
board and that's the clear running time

1136
00:49:29,220 --> 00:49:31,440
bottleneck both during the proof and

1137
00:49:31,440 --> 00:49:33,960
during the verification

1138
00:49:33,960 --> 00:49:37,319
so in our word in our work so we

1139
00:49:37,319 --> 00:49:40,819
realized that before we had to do n

1140
00:49:40,819 --> 00:49:43,920
evaluation of the MPC protocols one for

1141
00:49:43,920 --> 00:49:45,960
each parties and that was the bottleneck

1142
00:49:45,960 --> 00:49:48,540
so in the optimization that we propose

1143
00:49:48,540 --> 00:49:51,240
we realized that we actually only need

1144
00:49:51,240 --> 00:49:53,099
to do log of and evaluation of the

1145
00:49:53,099 --> 00:49:56,400
protocols so that becomes negligible

1146
00:49:56,400 --> 00:49:59,520
and the main idea is that before we had

1147
00:49:59,520 --> 00:50:02,940
to evaluate the MPC for each individual

1148
00:50:02,940 --> 00:50:06,060
parties and in what we propose as the

1149
00:50:06,060 --> 00:50:08,640
hypercube NPC in the head we can

1150
00:50:08,640 --> 00:50:11,160
actually group parties together

1151
00:50:11,160 --> 00:50:13,920
make log of n groups of n over two

1152
00:50:13,920 --> 00:50:15,020
parties

1153
00:50:15,020 --> 00:50:18,480
and as long as the group are I'd say

1154
00:50:18,480 --> 00:50:19,920
independent

1155
00:50:19,920 --> 00:50:22,020
we are fine we'll get the same sound as

1156
00:50:22,020 --> 00:50:24,500
in the end

1157
00:50:24,660 --> 00:50:25,980
so

1158
00:50:25,980 --> 00:50:28,800
let's try to give an intuition of how

1159
00:50:28,800 --> 00:50:30,780
this can work

1160
00:50:30,780 --> 00:50:34,220
so let's take a six-party protocol

1161
00:50:34,220 --> 00:50:37,140
each party has one share of the input X1

1162
00:50:37,140 --> 00:50:38,579
to X6

1163
00:50:38,579 --> 00:50:42,000
so from what we just said when we

1164
00:50:42,000 --> 00:50:44,339
compute the built-in board if we do

1165
00:50:44,339 --> 00:50:46,619
individual evaluation of the MPC

1166
00:50:46,619 --> 00:50:49,380
protocol we will have the two six

1167
00:50:49,380 --> 00:50:51,300
evaluations

1168
00:50:51,300 --> 00:50:54,540
of the broadcast port and that will get

1169
00:50:54,540 --> 00:50:58,640
a chance of cheating of 1 over 6.

1170
00:50:58,819 --> 00:51:03,180
then okay we can say if we take the sum

1171
00:51:03,180 --> 00:51:05,700
of uh all the contribution of older

1172
00:51:05,700 --> 00:51:08,760
parties we get the plain text X and we

1173
00:51:08,760 --> 00:51:12,059
can decide to evaluate the plain text so

1174
00:51:12,059 --> 00:51:14,040
since all the the intermediate functions

1175
00:51:14,040 --> 00:51:15,839
are linear we get the plain text plane

1176
00:51:15,839 --> 00:51:18,660
broadcast Alpha Beta results

1177
00:51:18,660 --> 00:51:21,960
and if we have the plain text it means

1178
00:51:21,960 --> 00:51:23,940
that instead of evaluating six parties

1179
00:51:23,940 --> 00:51:26,579
here I get one for free yeah because the

1180
00:51:26,579 --> 00:51:30,300
contribution of uh the last party or any

1181
00:51:30,300 --> 00:51:31,920
party is just the difference between the

1182
00:51:31,920 --> 00:51:34,380
plain text and the other contributions

1183
00:51:34,380 --> 00:51:38,240
but yeah that's just uh

1184
00:51:38,240 --> 00:51:41,640
strange reduction here because I I still

1185
00:51:41,640 --> 00:51:43,079
have to evaluate the brain text so it

1186
00:51:43,079 --> 00:51:46,440
still counts as six evaluations

1187
00:51:46,440 --> 00:51:49,619
so what I get what can I do better than

1188
00:51:49,619 --> 00:51:50,760
that

1189
00:51:50,760 --> 00:51:54,119
well I could say instead of considering

1190
00:51:54,119 --> 00:51:57,180
six parties let's consider two group of

1191
00:51:57,180 --> 00:52:00,780
parties the rows for example so group

1192
00:52:00,780 --> 00:52:03,780
one that will contain X1 X2 and X3 and

1193
00:52:03,780 --> 00:52:06,900
starts with X1 plus X2 and plus X3 if we

1194
00:52:06,900 --> 00:52:09,180
have an additive schema and the second

1195
00:52:09,180 --> 00:52:11,760
group that will start from X4 plus X5

1196
00:52:11,760 --> 00:52:13,260
plus X6

1197
00:52:13,260 --> 00:52:16,140
and now I can view my MPC protocol just

1198
00:52:16,140 --> 00:52:17,940
over these two groups instead of six

1199
00:52:17,940 --> 00:52:19,140
parties

1200
00:52:19,140 --> 00:52:22,140
so I have the red execution

1201
00:52:22,140 --> 00:52:25,020
that contains two lists of broadcast and

1202
00:52:25,020 --> 00:52:27,660
if I already have the plain text I can

1203
00:52:27,660 --> 00:52:30,140
strike one

1204
00:52:30,720 --> 00:52:34,200
um so well is it better and well not

1205
00:52:34,200 --> 00:52:36,540
quite yet because now the trends of

1206
00:52:36,540 --> 00:52:38,520
cheating is one over two one over six

1207
00:52:38,520 --> 00:52:40,200
was better

1208
00:52:40,200 --> 00:52:42,359
but now

1209
00:52:42,359 --> 00:52:45,420
it becomes to get interesting because I

1210
00:52:45,420 --> 00:52:47,160
could now decide to do exactly the same

1211
00:52:47,160 --> 00:52:49,619
thing with the columns so now I have

1212
00:52:49,619 --> 00:52:51,420
three blue groups

1213
00:52:51,420 --> 00:52:54,540
one that starts from X1 plus X4 the

1214
00:52:54,540 --> 00:52:57,960
second X2 plus X5 and the third X3 plus

1215
00:52:57,960 --> 00:52:59,339
X6

1216
00:52:59,339 --> 00:53:02,579
so I can do exactly the same here I will

1217
00:53:02,579 --> 00:53:06,119
have one chance of a three of cheating

1218
00:53:06,119 --> 00:53:09,180
and something that is really nice here

1219
00:53:09,180 --> 00:53:12,420
is that we can prove that somehow the

1220
00:53:12,420 --> 00:53:14,099
blue group and the red group are

1221
00:53:14,099 --> 00:53:17,400
independent which means that if I do the

1222
00:53:17,400 --> 00:53:19,380
red and the blue computation

1223
00:53:19,380 --> 00:53:22,440
the chance of cheating will multiply

1224
00:53:22,440 --> 00:53:24,540
so I will have one over two times one

1225
00:53:24,540 --> 00:53:27,000
over three that's one over six

1226
00:53:27,000 --> 00:53:28,700
which is the same as the black one

1227
00:53:28,700 --> 00:53:31,079
except that if I count the number of

1228
00:53:31,079 --> 00:53:34,260
evaluation I only have one two three

1229
00:53:34,260 --> 00:53:37,200
plus the green one so four evaluations

1230
00:53:37,200 --> 00:53:39,240
instead of six

1231
00:53:39,240 --> 00:53:41,099
and

1232
00:53:41,099 --> 00:53:41,700
um

1233
00:53:41,700 --> 00:53:44,460
so of course not all partitions of

1234
00:53:44,460 --> 00:53:47,040
parties are independent for example the

1235
00:53:47,040 --> 00:53:48,780
red and the black are not independent so

1236
00:53:48,780 --> 00:53:52,319
I cannot get 1 over 12. that there are

1237
00:53:52,319 --> 00:53:55,559
some bounds in some conditions and if

1238
00:53:55,559 --> 00:53:57,480
you look at the proof on the paper that

1239
00:53:57,480 --> 00:53:59,760
will be more explicit but yeah that

1240
00:53:59,760 --> 00:54:01,920
that's really the the intuition what I

1241
00:54:01,920 --> 00:54:04,020
did with the rows and the columns in two

1242
00:54:04,020 --> 00:54:06,540
Dimension I can do it with a cube in

1243
00:54:06,540 --> 00:54:08,540
dimension three so take

1244
00:54:08,540 --> 00:54:11,579
Parties by x coordinate y coordinate Z

1245
00:54:11,579 --> 00:54:13,380
coordinates

1246
00:54:13,380 --> 00:54:15,720
and I can also do it in dimension four

1247
00:54:15,720 --> 00:54:18,240
with a tesseract or in dimension T the

1248
00:54:18,240 --> 00:54:20,040
bigger the dimension is the better it

1249
00:54:20,040 --> 00:54:21,000
gets

1250
00:54:21,000 --> 00:54:22,160
so

1251
00:54:22,160 --> 00:54:24,480
yeah the best setting that we can have

1252
00:54:24,480 --> 00:54:27,200
is a two-day

1253
00:54:27,200 --> 00:54:29,520
d-dimensional hyper cube of size two

1254
00:54:29,520 --> 00:54:32,900
four two to the D parties

1255
00:54:35,760 --> 00:54:36,660
um

1256
00:54:36,660 --> 00:54:40,940
so yeah that's the the main ID

1257
00:54:40,940 --> 00:54:44,220
so if I do a single execution of NPC in

1258
00:54:44,220 --> 00:54:45,420
the head

1259
00:54:45,420 --> 00:54:47,819
I get a 1 over n chance of cheating so

1260
00:54:47,819 --> 00:54:49,740
that's log of log 2 of NBS of security

1261
00:54:49,740 --> 00:54:53,280
yeah with our work since the bottleneck

1262
00:54:53,280 --> 00:54:55,400
is not a bottleneck anymore

1263
00:54:55,400 --> 00:54:58,619
we can also say that if we allow to

1264
00:54:58,619 --> 00:55:00,540
consume the same running time as before

1265
00:55:00,540 --> 00:55:03,780
we can take enlarger so with the same

1266
00:55:03,780 --> 00:55:06,900
running time we get more security yeah

1267
00:55:06,900 --> 00:55:09,720
now of course the idea is not to get log

1268
00:55:09,720 --> 00:55:12,480
of n security but it's to get land a bit

1269
00:55:12,480 --> 00:55:14,700
of security yeah where landline the

1270
00:55:14,700 --> 00:55:17,040
fixed security parameter so it means we

1271
00:55:17,040 --> 00:55:18,319
will have to repeat

1272
00:55:18,319 --> 00:55:20,460
the process so that's parallel

1273
00:55:20,460 --> 00:55:21,780
composition

1274
00:55:21,780 --> 00:55:25,079
and if we have more security from the

1275
00:55:25,079 --> 00:55:27,059
base we can do less repetitions to

1276
00:55:27,059 --> 00:55:30,599
achieve Lambda so less repetitions means

1277
00:55:30,599 --> 00:55:33,540
faster proof and also smaller proof

1278
00:55:33,540 --> 00:55:36,660
because each repetition will contribute

1279
00:55:36,660 --> 00:55:39,859
to the size of the proof

1280
00:55:40,140 --> 00:55:43,880
and once we have

1281
00:55:43,880 --> 00:55:45,900
zero energy proof that you achieve

1282
00:55:45,900 --> 00:55:49,079
Lambda bits of security we just end with

1283
00:55:49,079 --> 00:55:51,000
virtual mirror transformation that will

1284
00:55:51,000 --> 00:55:53,280
make it non-interactive and transform

1285
00:55:53,280 --> 00:55:56,640
the proof into a small signature

1286
00:55:56,640 --> 00:55:59,760
so during the last conversion there is

1287
00:55:59,760 --> 00:56:00,710
just some

1288
00:56:00,710 --> 00:56:01,920
[Music]

1289
00:56:01,920 --> 00:56:04,740
things to make sure that any attacks

1290
00:56:04,740 --> 00:56:07,319
that were sequential before can work in

1291
00:56:07,319 --> 00:56:10,339
a parallel setting

1292
00:56:11,220 --> 00:56:14,940
so that's a hypercube NPC in the header

1293
00:56:14,940 --> 00:56:18,059
and now let's dive into hypercube SD in

1294
00:56:18,059 --> 00:56:19,859
the header so the only thing that we

1295
00:56:19,859 --> 00:56:23,339
miss is the original hard problem

1296
00:56:23,339 --> 00:56:25,380
so of course in this competition we want

1297
00:56:25,380 --> 00:56:28,200
something that is as strong as AES so we

1298
00:56:28,200 --> 00:56:30,119
could say let's take AES as the heart

1299
00:56:30,119 --> 00:56:33,420
problem and that would solve the loop so

1300
00:56:33,420 --> 00:56:36,420
the problem is that evaluating AES in

1301
00:56:36,420 --> 00:56:39,599
MPC here it's fast but not fast enough

1302
00:56:39,599 --> 00:56:42,240
so that we can make a good signature out

1303
00:56:42,240 --> 00:56:43,260
of it

1304
00:56:43,260 --> 00:56:46,079
so let's try to go in the literature and

1305
00:56:46,079 --> 00:56:49,440
find a another good hard problem

1306
00:56:49,440 --> 00:56:52,740
and one one of the things that we can

1307
00:56:52,740 --> 00:56:56,040
take is really this syndrome decoding

1308
00:56:56,040 --> 00:56:58,859
problem so solving the equation at h x

1309
00:56:58,859 --> 00:57:01,319
equal Y where X has a small Heming

1310
00:57:01,319 --> 00:57:02,900
weight

1311
00:57:02,900 --> 00:57:06,839
so this problem has been around for a

1312
00:57:06,839 --> 00:57:09,540
very very long time there are a lot of

1313
00:57:09,540 --> 00:57:11,579
crypto analyzes on this that was done

1314
00:57:11,579 --> 00:57:13,339
and

1315
00:57:13,339 --> 00:57:17,599
now we are quite confident that

1316
00:57:17,599 --> 00:57:20,040
what is exactly the hardness of this

1317
00:57:20,040 --> 00:57:24,420
problem even for Quantum adversaries

1318
00:57:24,420 --> 00:57:25,559
um

1319
00:57:25,559 --> 00:57:27,200
and

1320
00:57:27,200 --> 00:57:30,140
so the nice thing is in this program so

1321
00:57:30,140 --> 00:57:32,520
verification function even in this form

1322
00:57:32,520 --> 00:57:34,680
that would already be very efficient in

1323
00:57:34,680 --> 00:57:38,280
NPC here but there is actually an

1324
00:57:38,280 --> 00:57:39,839
equivalent formulation of the same

1325
00:57:39,839 --> 00:57:43,260
problem that use polynomials

1326
00:57:43,260 --> 00:57:48,059
so basically when I have h and y instead

1327
00:57:48,059 --> 00:57:51,720
of just finding X I will look for a

1328
00:57:51,720 --> 00:57:55,020
prefix of X plus two polynomial of small

1329
00:57:55,020 --> 00:57:56,760
degree so

1330
00:57:56,760 --> 00:58:00,839
p and Q that satisfy this formula so so

1331
00:58:00,839 --> 00:58:03,720
that this big polynomial is zero

1332
00:58:03,720 --> 00:58:06,300
so to convince you that it's

1333
00:58:06,300 --> 00:58:08,700
approximately well it's exactly the same

1334
00:58:08,700 --> 00:58:12,359
as before uh yeah you can see that this

1335
00:58:12,359 --> 00:58:14,700
right term will evaluate to zero over

1336
00:58:14,700 --> 00:58:16,740
one m

1337
00:58:16,740 --> 00:58:19,440
so if the equation has to be zero it

1338
00:58:19,440 --> 00:58:22,200
means that the product of the two terms

1339
00:58:22,200 --> 00:58:23,760
here is zero

1340
00:58:23,760 --> 00:58:27,240
and if it is zero it means that X that

1341
00:58:27,240 --> 00:58:29,760
is here can only be non-zero over the

1342
00:58:29,760 --> 00:58:32,160
roots of Q and since Q has a small

1343
00:58:32,160 --> 00:58:34,260
degree here the harming weight of X is

1344
00:58:34,260 --> 00:58:35,400
smaller

1345
00:58:35,400 --> 00:58:39,359
and vice versa the reverse is also true

1346
00:58:39,359 --> 00:58:41,220
but the very nice thing with this

1347
00:58:41,220 --> 00:58:43,559
polynomial form is that once you have a

1348
00:58:43,559 --> 00:58:45,420
polynomial and you want to prove that

1349
00:58:45,420 --> 00:58:47,819
this polynomial is zero that becomes

1350
00:58:47,819 --> 00:58:49,740
very easy you get very efficient

1351
00:58:49,740 --> 00:58:51,799
randomized verification function

1352
00:58:51,799 --> 00:58:54,900
basically you just the verifier will

1353
00:58:54,900 --> 00:58:57,839
just ask the prover to evaluate the

1354
00:58:57,839 --> 00:58:59,880
polynomial in one random point that the

1355
00:58:59,880 --> 00:59:03,839
verifier chooses and if we get zero then

1356
00:59:03,839 --> 00:59:05,220
there is a very high chance that the

1357
00:59:05,220 --> 00:59:06,960
polynomial was Zero

1358
00:59:06,960 --> 00:59:08,460
because if you have a non-zero

1359
00:59:08,460 --> 00:59:12,119
polynomial uh yeah getting zero would be

1360
00:59:12,119 --> 00:59:14,040
mean that the verifiers by accident

1361
00:59:14,040 --> 00:59:16,380
found the roots of the polynomial which

1362
00:59:16,380 --> 00:59:19,619
has a very small problem so yeah there

1363
00:59:19,619 --> 00:59:21,960
is a false positive probability P that

1364
00:59:21,960 --> 00:59:24,240
is very small and the soundness will be

1365
00:59:24,240 --> 00:59:26,700
1 minus P times one minus 1 over n

1366
00:59:26,700 --> 00:59:29,819
instead of just 1 minus 1 over n but

1367
00:59:29,819 --> 00:59:32,280
since we are iterating that sum until we

1368
00:59:32,280 --> 00:59:34,160
reach Lambda

1369
00:59:34,160 --> 00:59:38,000
that's perfectly fine

1370
00:59:38,280 --> 00:59:41,579
and to finish the the the presentation

1371
00:59:41,579 --> 00:59:45,260
so we implemented it in practice we used

1372
00:59:45,260 --> 00:59:48,660
actually the same parameters in the

1373
00:59:48,660 --> 00:59:50,410
paper as the

1374
00:59:50,410 --> 00:59:51,680
[Music]

1375
00:59:51,680 --> 00:59:56,099
original literature on it it gives sizes

1376
00:59:56,099 --> 00:59:58,319
that are very reasonable in practice so

1377
00:59:58,319 --> 01:00:01,319
SD parameter of less than 500

1378
01:00:01,319 --> 01:00:03,680
coefficients

1379
01:00:03,680 --> 01:00:06,660
in NPC will Target something like

1380
01:00:06,660 --> 01:00:11,520
between 16 and and a few thousand

1381
01:00:11,520 --> 01:00:14,000
parties

1382
01:00:14,299 --> 01:00:17,640
we have to work in in some extension

1383
01:00:17,640 --> 01:00:20,460
field at some points

1384
01:00:20,460 --> 01:00:24,299
and the the thing that is really

1385
01:00:24,299 --> 01:00:27,480
interesting is that so there was always

1386
01:00:27,480 --> 01:00:28,980
a trade-off between the number of

1387
01:00:28,980 --> 01:00:31,020
parties we take in the MPC in the head

1388
01:00:31,020 --> 01:00:32,640
protocol and the number of repetition

1389
01:00:32,640 --> 01:00:35,099
that we have to do to reach a London

1390
01:00:35,099 --> 01:00:37,140
byte of security so it looks like 1 over

1391
01:00:37,140 --> 01:00:41,460
X function and before uh we we could

1392
01:00:41,460 --> 01:00:45,299
only use a very small trade of about

1393
01:00:45,299 --> 01:00:47,400
this curve because the the complexity of

1394
01:00:47,400 --> 01:00:49,520
MPC in the head was really killing it

1395
01:00:49,520 --> 01:00:52,740
and now that NPC in the head is faster

1396
01:00:52,740 --> 01:00:56,040
we can push the trade-off much further

1397
01:00:56,040 --> 01:00:59,160
and get proof that are shorter and the

1398
01:00:59,160 --> 01:01:02,099
size of the proof really matches the

1399
01:01:02,099 --> 01:01:03,900
size of the digital signature that we

1400
01:01:03,900 --> 01:01:05,940
get in the end

1401
01:01:05,940 --> 01:01:08,099
so we are talking things like eight

1402
01:01:08,099 --> 01:01:12,260
kilobytes six kilobytes five kilobytes

1403
01:01:14,480 --> 01:01:18,119
so running time well it

1404
01:01:18,119 --> 01:01:20,040
it's really practical so depending on

1405
01:01:20,040 --> 01:01:21,839
the the size of the signature we targets

1406
01:01:21,839 --> 01:01:23,160
we'll have something between one

1407
01:01:23,160 --> 01:01:26,880
millisecond and 200 milliseconds so it's

1408
01:01:26,880 --> 01:01:29,040
far less than one second

1409
01:01:29,040 --> 01:01:32,540
and that's it so to conclude

1410
01:01:32,540 --> 01:01:34,079
uh

1411
01:01:34,079 --> 01:01:36,180
this gives a possibility to give new

1412
01:01:36,180 --> 01:01:38,819
post Quantum signature based on any

1413
01:01:38,819 --> 01:01:41,240
problem but if we take SD

1414
01:01:41,240 --> 01:01:44,220
we have a candidate a signature candy

1415
01:01:44,220 --> 01:01:48,119
data that we're going to submit to the

1416
01:01:48,119 --> 01:01:49,440
Drone deadline

1417
01:01:49,440 --> 01:01:53,700
together with the original authors of

1418
01:01:53,700 --> 01:01:55,140
the

1419
01:01:55,140 --> 01:01:57,480
uh

1420
01:01:57,480 --> 01:02:01,819
and yeah other goodies about that

1421
01:02:01,819 --> 01:02:04,260
it's a signature with microsecond

1422
01:02:04,260 --> 01:02:06,900
latency so on the offline online phase

1423
01:02:06,900 --> 01:02:10,440
model it's a very good and there are

1424
01:02:10,440 --> 01:02:11,940
still some open problem and limitations

1425
01:02:11,940 --> 01:02:13,940
so

1426
01:02:13,940 --> 01:02:17,040
we cannot take an exponential the number

1427
01:02:17,040 --> 01:02:19,619
of parties because the state generation

1428
01:02:19,619 --> 01:02:23,599
is still linear in the number of parties

1429
01:02:25,339 --> 01:02:28,799
and that's it so thank you very much for

1430
01:02:28,799 --> 01:02:31,220
your attention

1431
01:02:35,220 --> 01:02:37,440
so thanks to Gula we have absolutely no

1432
01:02:37,440 --> 01:02:39,980
time for for questions so now there is a

1433
01:02:39,980 --> 01:02:42,960
track switching break which is only six

1434
01:02:42,960 --> 01:02:48,740
minutes so we reconvene at 11 40.

1435
01:02:50,400 --> 01:02:52,579
foreign

