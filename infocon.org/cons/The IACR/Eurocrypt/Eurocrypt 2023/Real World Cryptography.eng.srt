1
00:00:00,539 --> 00:00:05,279
and welcome to the rework crypto session

2
00:00:05,279 --> 00:00:07,740
and we have two super interesting talks

3
00:00:07,740 --> 00:00:10,260
the first one is about uh the end-to-end

4
00:00:10,260 --> 00:00:13,080
encrypted Zoom uh protocol for meetings

5
00:00:13,080 --> 00:00:15,179
proving security and strengthening

6
00:00:15,179 --> 00:00:18,199
liveness and the speaker is Antonio

7
00:00:18,199 --> 00:00:21,900
marquedone and yeah the stage is yours

8
00:00:21,900 --> 00:00:24,660
hi thank you for the introduction this

9
00:00:24,660 --> 00:00:27,180
is join work with balachander from zoom

10
00:00:27,180 --> 00:00:30,960
and Kenny and Daniel from NYU who were

11
00:00:30,960 --> 00:00:33,120
Contracting with us for a little bit on

12
00:00:33,120 --> 00:00:35,340
this project so I don't really need to

13
00:00:35,340 --> 00:00:37,620
tell you how important group video

14
00:00:37,620 --> 00:00:39,660
communication has been has become in our

15
00:00:39,660 --> 00:00:41,520
daily lives especially since since the

16
00:00:41,520 --> 00:00:42,680
pandemic

17
00:00:42,680 --> 00:00:46,020
Zoom is like one of the major players in

18
00:00:46,020 --> 00:00:48,420
this space and we have been offering the

19
00:00:48,420 --> 00:00:49,980
option to add end-to-end encryption to

20
00:00:49,980 --> 00:00:52,920
meetings since October of 2020. at the

21
00:00:52,920 --> 00:00:54,420
same time we also published a white

22
00:00:54,420 --> 00:00:56,820
paper that describes the protocol and

23
00:00:56,820 --> 00:00:59,160
does an informal security analysis but

24
00:00:59,160 --> 00:01:00,719
there have been no formal definitions

25
00:01:00,719 --> 00:01:03,539
for the problem of like group and to

26
00:01:03,539 --> 00:01:05,580
unencrypted Communications not just for

27
00:01:05,580 --> 00:01:07,920
our protocol but also in general and

28
00:01:07,920 --> 00:01:11,460
this is in contrast to the related field

29
00:01:11,460 --> 00:01:13,140
of end-to-end encrypted messaging where

30
00:01:13,140 --> 00:01:15,060
there's been like tons of research that

31
00:01:15,060 --> 00:01:16,619
are very well established protocols

32
00:01:16,619 --> 00:01:18,360
there are even like standardization

33
00:01:18,360 --> 00:01:23,700
efforts and I will argue that that the

34
00:01:23,700 --> 00:01:25,799
two fields are slightly different and so

35
00:01:25,799 --> 00:01:27,900
more analysis on the meeting side is

36
00:01:27,900 --> 00:01:29,759
necessary the first difference is the

37
00:01:29,759 --> 00:01:31,380
length of a session like a chat

38
00:01:31,380 --> 00:01:33,360
conversation can last even for years

39
00:01:33,360 --> 00:01:36,000
while typically video meetings are up

40
00:01:36,000 --> 00:01:39,240
are only up to like a few hours long and

41
00:01:39,240 --> 00:01:41,939
so in the in it is important to limit

42
00:01:41,939 --> 00:01:45,240
the damage when uh compromise happens

43
00:01:45,240 --> 00:01:48,600
during like a messaging session uh and

44
00:01:48,600 --> 00:01:50,640
and I'm talking about properties such as

45
00:01:50,640 --> 00:01:52,259
forward secrecy and post compromise

46
00:01:52,259 --> 00:01:54,060
security while maybe in the meeting

47
00:01:54,060 --> 00:01:56,520
space since the sessions are so short it

48
00:01:56,520 --> 00:01:59,640
is enough if your your meeting remains

49
00:01:59,640 --> 00:02:01,680
confidential as long as your client is

50
00:02:01,680 --> 00:02:03,840
compromised either before or after the

51
00:02:03,840 --> 00:02:05,880
meeting if this allows for simpler and

52
00:02:05,880 --> 00:02:08,220
more efficient protocols another

53
00:02:08,220 --> 00:02:09,899
important difference is that meetings

54
00:02:09,899 --> 00:02:11,940
are synchronous so one thing that we can

55
00:02:11,940 --> 00:02:13,620
do in this on on this side of the

56
00:02:13,620 --> 00:02:15,900
spectrum is enforce liveness by

57
00:02:15,900 --> 00:02:19,739
aliveness I mean for example that if the

58
00:02:19,739 --> 00:02:22,020
host of a meeting kicks someone out out

59
00:02:22,020 --> 00:02:24,000
of the meeting and rotates the key the

60
00:02:24,000 --> 00:02:25,860
other participants need to learn about

61
00:02:25,860 --> 00:02:28,440
this within a short time frame so that

62
00:02:28,440 --> 00:02:31,140
the the the like the amalicious network

63
00:02:31,140 --> 00:02:34,319
attacker cannot cannot delay this

64
00:02:34,319 --> 00:02:35,700
information too much and the the

65
00:02:35,700 --> 00:02:37,980
participant is actually kicked out

66
00:02:37,980 --> 00:02:40,980
so in this work we start bridging this

67
00:02:40,980 --> 00:02:44,700
Gap by uh defining of and formalizing

68
00:02:44,700 --> 00:02:46,860
the the security of the the key

69
00:02:46,860 --> 00:02:48,959
agreement part that's at the core of

70
00:02:48,959 --> 00:02:50,879
zooms and to an encrypted meeting

71
00:02:50,879 --> 00:02:53,760
protocol so we we follow like a modular

72
00:02:53,760 --> 00:02:55,980
approach that mirrors what the white

73
00:02:55,980 --> 00:02:58,080
paper was doing and so we formalized two

74
00:02:58,080 --> 00:03:00,739
Primitives the first one is continuous

75
00:03:00,739 --> 00:03:02,760
multi-recipient like key encapsulation

76
00:03:02,760 --> 00:03:04,980
which is essentially A Primitive that

77
00:03:04,980 --> 00:03:07,500
allows a leader to distribute a stream

78
00:03:07,500 --> 00:03:12,300
of keys to uh to a mutable set of

79
00:03:12,300 --> 00:03:14,280
participants and then we use this

80
00:03:14,280 --> 00:03:19,080
primitive to build the to build this

81
00:03:19,080 --> 00:03:21,000
notion of leader based continuous group

82
00:03:21,000 --> 00:03:23,640
key agreement with leibenus which adds

83
00:03:23,640 --> 00:03:25,860
on top of the stream of keys consistency

84
00:03:25,860 --> 00:03:27,659
for the group so the participants keep

85
00:03:27,659 --> 00:03:29,640
track of who else is in the meeting and

86
00:03:29,640 --> 00:03:31,860
also liveness so the the meeting actions

87
00:03:31,860 --> 00:03:33,540
and key rotations need to happen within

88
00:03:33,540 --> 00:03:34,980
like a short amount of time from when

89
00:03:34,980 --> 00:03:36,540
they are initiated

90
00:03:36,540 --> 00:03:39,420
so we also proved that the tower our

91
00:03:39,420 --> 00:03:41,040
core protocol satisfies these

92
00:03:41,040 --> 00:03:43,860
definitions and we also go a little bit

93
00:03:43,860 --> 00:03:45,959
further so as part of this this project

94
00:03:45,959 --> 00:03:49,620
we noticed that the protocol could be

95
00:03:49,620 --> 00:03:52,080
improved so we have two different ways

96
00:03:52,080 --> 00:03:53,819
of strengthening the protocol and

97
00:03:53,819 --> 00:03:55,920
actually one of them we managed to

98
00:03:55,920 --> 00:03:57,659
implement and deploy and it is available

99
00:03:57,659 --> 00:04:00,560
since version 513 of the of the client

100
00:04:00,560 --> 00:04:03,120
before I continue a quick legal

101
00:04:03,120 --> 00:04:04,860
disclaimer you know I'm going to

102
00:04:04,860 --> 00:04:07,080
simplify your meat details uh this is

103
00:04:07,080 --> 00:04:09,420
for informational purposes only please

104
00:04:09,420 --> 00:04:11,340
see our white paper for up-to-date

105
00:04:11,340 --> 00:04:13,739
information all right so the first the

106
00:04:13,739 --> 00:04:16,339
first primitive is the multi-recipient

107
00:04:16,339 --> 00:04:19,858
encapsulation mechanism can as I said it

108
00:04:19,858 --> 00:04:21,120
allows a leader to distribute a stream

109
00:04:21,120 --> 00:04:22,740
of keys to this mutable set of

110
00:04:22,740 --> 00:04:25,380
participants one peculiarity of this

111
00:04:25,380 --> 00:04:29,280
this primitive is that um like the

112
00:04:29,280 --> 00:04:31,080
parties have long-term identities so we

113
00:04:31,080 --> 00:04:32,220
assume that there is like some sort of

114
00:04:32,220 --> 00:04:35,340
pki here but for each meeting they also

115
00:04:35,340 --> 00:04:39,960
create an an ephemeral identity and each

116
00:04:39,960 --> 00:04:41,940
meeting with this like a family this

117
00:04:41,940 --> 00:04:44,580
ephemeral identity can be used across

118
00:04:44,580 --> 00:04:46,380
multiple sessions where each session is

119
00:04:46,380 --> 00:04:47,940
a stream of keys that comes from a

120
00:04:47,940 --> 00:04:49,139
different leader because like in the

121
00:04:49,139 --> 00:04:50,759
course of meetings the host of the

122
00:04:50,759 --> 00:04:52,080
meeting can drop out then we need to

123
00:04:52,080 --> 00:04:53,520
pick a different leader and we're still

124
00:04:53,520 --> 00:04:55,560
in the same meeting and so at the end of

125
00:04:55,560 --> 00:04:57,600
the meeting the the ephemeral identity

126
00:04:57,600 --> 00:04:59,759
gets erased and so you gain Security

127
00:04:59,759 --> 00:05:01,560
even after even if your key is

128
00:05:01,560 --> 00:05:04,440
compromised afterwards so our keys in

129
00:05:04,440 --> 00:05:05,940
this in this primitive are indexed by

130
00:05:05,940 --> 00:05:08,460
two counters the identity of the leader

131
00:05:08,460 --> 00:05:10,199
and two counters the epoch and the

132
00:05:10,199 --> 00:05:11,940
sub-effic which is called which we call

133
00:05:11,940 --> 00:05:13,800
period and the idea is that switching

134
00:05:13,800 --> 00:05:15,300
periods within the same Epoch is

135
00:05:15,300 --> 00:05:16,740
supposed to be more efficient but is

136
00:05:16,740 --> 00:05:19,020
only secure when adding participants and

137
00:05:19,020 --> 00:05:21,419
not when removing them and the counters

138
00:05:21,419 --> 00:05:23,520
keep going even if leaders change so our

139
00:05:23,520 --> 00:05:26,639
security is a game-based definition and

140
00:05:26,639 --> 00:05:27,960
the main properties as this key

141
00:05:27,960 --> 00:05:31,500
confidentiality essentially keys can are

142
00:05:31,500 --> 00:05:34,020
indistinguishable from random unless you

143
00:05:34,020 --> 00:05:37,020
corrupt uh one of the long-term

144
00:05:37,020 --> 00:05:39,600
identities that that is connected to an

145
00:05:39,600 --> 00:05:42,240
ephemeral identity that access to to the

146
00:05:42,240 --> 00:05:44,699
keys so this weak form of four secrecy I

147
00:05:44,699 --> 00:05:48,240
was talking before and also if the even

148
00:05:48,240 --> 00:05:50,360
after a long-term identity has been

149
00:05:50,360 --> 00:05:54,600
compromised if the adversary doesn't

150
00:05:54,600 --> 00:05:56,820
interfere with the with the generation

151
00:05:56,820 --> 00:05:58,919
of the ephemeral identity that specific

152
00:05:58,919 --> 00:06:02,100
session maintains maintains the security

153
00:06:02,100 --> 00:06:04,199
the other properties key consistency

154
00:06:04,199 --> 00:06:06,600
essentially as long as the leader and

155
00:06:06,600 --> 00:06:09,060
the party was receives the key the

156
00:06:09,060 --> 00:06:11,220
participant I'm not as long as either of

157
00:06:11,220 --> 00:06:12,780
them has been compromised they should

158
00:06:12,780 --> 00:06:15,840
agree on what the key is and stronger

159
00:06:15,840 --> 00:06:17,880
Notions are possible here but we are

160
00:06:17,880 --> 00:06:20,340
exactly modeling what Zoom is doing

161
00:06:20,340 --> 00:06:22,620
um so our students protocol work very

162
00:06:22,620 --> 00:06:25,919
very briefly for the primary identities

163
00:06:25,919 --> 00:06:28,800
we use different keys to distribute the

164
00:06:28,800 --> 00:06:31,620
key the the the leader essentially picks

165
00:06:31,620 --> 00:06:34,440
picks a key a seed sorry and it performs

166
00:06:34,440 --> 00:06:36,660
different key agreement which each of

167
00:06:36,660 --> 00:06:38,520
the participants and then it sends them

168
00:06:38,520 --> 00:06:40,860
the key encrypted using authenticated

169
00:06:40,860 --> 00:06:42,780
encryption with uh using the key that's

170
00:06:42,780 --> 00:06:45,180
the result of the filament

171
00:06:45,180 --> 00:06:46,919
um and from this seed the participants

172
00:06:46,919 --> 00:06:50,220
can like ratchet it forward for each

173
00:06:50,220 --> 00:06:51,840
period in order to generate like the

174
00:06:51,840 --> 00:06:54,960
stream of keys for that for that type of

175
00:06:54,960 --> 00:06:56,699
um the security is in the random Oracle

176
00:06:56,699 --> 00:06:59,160
model two advantages of this modular

177
00:06:59,160 --> 00:07:01,020
approach are one that we hope that this

178
00:07:01,020 --> 00:07:03,240
primitive is helpful in other contexts

179
00:07:03,240 --> 00:07:05,400
before Beyond it when encrypted meetings

180
00:07:05,400 --> 00:07:07,860
and also the fact that we realized that

181
00:07:07,860 --> 00:07:10,919
like this this simple protocol that I

182
00:07:10,919 --> 00:07:13,919
have just described can be replaced with

183
00:07:13,919 --> 00:07:16,680
more efficient ones such as the one one

184
00:07:16,680 --> 00:07:18,240
that one might imagine based on three

185
00:07:18,240 --> 00:07:21,120
cam we haven't done it yet but but it is

186
00:07:21,120 --> 00:07:23,340
it would be very simple and would we

187
00:07:23,340 --> 00:07:25,199
would keep the analysis

188
00:07:25,199 --> 00:07:28,440
so on top of this we we build this

189
00:07:28,440 --> 00:07:31,020
notion of leader-based continuous key

190
00:07:31,020 --> 00:07:32,819
agreement with time in us and the

191
00:07:32,819 --> 00:07:34,860
functionality is similar to the one of

192
00:07:34,860 --> 00:07:37,080
the of the CM Cam that I just showed you

193
00:07:37,080 --> 00:07:39,840
but in addition as a participants keep

194
00:07:39,840 --> 00:07:41,880
track of the group roster and this

195
00:07:41,880 --> 00:07:44,759
notion also accounts for time so in the

196
00:07:44,759 --> 00:07:46,380
formal is in the security formalization

197
00:07:46,380 --> 00:07:48,599
we have the algorithm State the current

198
00:07:48,599 --> 00:07:50,940
time as input and there are also

199
00:07:50,940 --> 00:07:52,860
time-based events that can be triggered

200
00:07:52,860 --> 00:07:54,960
and the adversar is the one advancing

201
00:07:54,960 --> 00:07:57,240
the clock so the properties that we get

202
00:07:57,240 --> 00:07:58,620
from this notion are again key

203
00:07:58,620 --> 00:08:00,180
confidentiality and consistency as

204
00:08:00,180 --> 00:08:02,220
before in addition we have this notion

205
00:08:02,220 --> 00:08:04,919
of group consistency so the participants

206
00:08:04,919 --> 00:08:07,740
and two participants that have the same

207
00:08:07,740 --> 00:08:09,419
that are talking to the same honest

208
00:08:09,419 --> 00:08:11,699
leader will agree not only are the on

209
00:08:11,699 --> 00:08:13,500
the current state of the group but also

210
00:08:13,500 --> 00:08:16,199
on the history of the group since the

211
00:08:16,199 --> 00:08:19,319
later of them joined the meeting

212
00:08:19,319 --> 00:08:21,599
um and so the meeting if the meeting if

213
00:08:21,599 --> 00:08:23,580
they if an attacker partitions a meeting

214
00:08:23,580 --> 00:08:24,960
then these partitions cannot be

215
00:08:24,960 --> 00:08:26,460
reconciled because the histories are

216
00:08:26,460 --> 00:08:28,740
different uh the other important and

217
00:08:28,740 --> 00:08:30,960
most novel property is this key liveness

218
00:08:30,960 --> 00:08:32,940
so the participants of a meeting are

219
00:08:32,940 --> 00:08:35,399
either up to date with the meeting state

220
00:08:35,399 --> 00:08:37,380
or they drop out of the meeting more

221
00:08:37,380 --> 00:08:39,419
formally we say that for any like

222
00:08:39,419 --> 00:08:41,399
participant that is acting in the

223
00:08:41,399 --> 00:08:43,559
meeting so that hasn't dropped out the

224
00:08:43,559 --> 00:08:46,500
leader of that uh of that meeting

225
00:08:46,500 --> 00:08:48,660
according to the participant has been in

226
00:08:48,660 --> 00:08:50,640
the same state so in the same Epoch

227
00:08:50,640 --> 00:08:52,500
period with the same group and the same

228
00:08:52,500 --> 00:08:55,680
key recently where recently means uh

229
00:08:55,680 --> 00:08:59,399
within like a small uh factor of life

230
00:08:59,399 --> 00:09:01,800
that we call liveness lock which is this

231
00:09:01,800 --> 00:09:03,180
protocol dependent parameter that

232
00:09:03,180 --> 00:09:04,440
accounts for the fact that there is some

233
00:09:04,440 --> 00:09:06,180
Network delay and so people are not

234
00:09:06,180 --> 00:09:08,220
expected to be exactly synchronized but

235
00:09:08,220 --> 00:09:10,860
can wait can be a few a few seconds or a

236
00:09:10,860 --> 00:09:13,440
few minutes behind so in the security

237
00:09:13,440 --> 00:09:16,800
formalization here we assume that

238
00:09:16,800 --> 00:09:18,360
parties clocks go at the same speed

239
00:09:18,360 --> 00:09:20,279
which is reasonable because meetings are

240
00:09:20,279 --> 00:09:22,220
short and they're run on Modern devices

241
00:09:22,220 --> 00:09:25,080
but we do allow for like arbitrary

242
00:09:25,080 --> 00:09:28,140
offsets between the clocks

243
00:09:28,140 --> 00:09:31,740
um how do we how do we achieve this we

244
00:09:31,740 --> 00:09:33,959
we use the protocol that I was

245
00:09:33,959 --> 00:09:35,459
describing before the CM cam to

246
00:09:35,459 --> 00:09:37,140
distribute the keys for group

247
00:09:37,140 --> 00:09:40,440
consistency the the leader simply

248
00:09:40,440 --> 00:09:44,220
um sends a participant list uh that

249
00:09:44,220 --> 00:09:46,200
describes the group for every applicant

250
00:09:46,200 --> 00:09:49,920
period and this this participant list uh

251
00:09:49,920 --> 00:09:52,200
is authenticated by the leader also

252
00:09:52,200 --> 00:09:53,279
sending

253
00:09:53,279 --> 00:09:56,279
um signed heartbeats that that both

254
00:09:56,279 --> 00:09:57,779
authenticate this participant list and

255
00:09:57,779 --> 00:09:59,279
also provide a mechanism to enforce

256
00:09:59,279 --> 00:10:01,980
liveness because they include a

257
00:10:01,980 --> 00:10:04,560
timestamp and the current APP of the

258
00:10:04,560 --> 00:10:06,060
period and also a hash of the previous

259
00:10:06,060 --> 00:10:08,880
heartbeat so that the whole the latest

260
00:10:08,880 --> 00:10:12,000
heartbeat always authenticates the whole

261
00:10:12,000 --> 00:10:13,620
history of the meeting

262
00:10:13,620 --> 00:10:15,779
and obviously participants need to only

263
00:10:15,779 --> 00:10:17,700
start using a key after the

264
00:10:17,700 --> 00:10:19,740
corresponding participant list in the

265
00:10:19,740 --> 00:10:22,440
heartbeat being received

266
00:10:22,440 --> 00:10:25,380
um let's see how signing this receiving

267
00:10:25,380 --> 00:10:27,720
design heartbeats can actually help and

268
00:10:27,720 --> 00:10:30,300
force liveness so what participants do

269
00:10:30,300 --> 00:10:32,700
is that they maintain an upper bound

270
00:10:32,700 --> 00:10:35,820
Delta on the offset between their clock

271
00:10:35,820 --> 00:10:37,980
and their Leader's clock

272
00:10:37,980 --> 00:10:40,260
and how they they can drop out of the

273
00:10:40,260 --> 00:10:43,380
meeting if they detect that according to

274
00:10:43,380 --> 00:10:45,779
their estimate the last heartbeat that

275
00:10:45,779 --> 00:10:47,459
they received from the leader was

276
00:10:47,459 --> 00:10:49,860
generated too long ago and by too long

277
00:10:49,860 --> 00:10:51,779
ago I mean by this uh there is this

278
00:10:51,779 --> 00:10:53,220
constant of the product that we call

279
00:10:53,220 --> 00:10:55,620
Delta life that that describes this

280
00:10:55,620 --> 00:10:58,620
offset so thp in this in this equation

281
00:10:58,620 --> 00:11:01,200
is the time at which uh is the timestamp

282
00:11:01,200 --> 00:11:03,240
that is included in the heartbeat Delta

283
00:11:03,240 --> 00:11:04,620
is the offset that allows the

284
00:11:04,620 --> 00:11:07,200
participant to translate this timestamp

285
00:11:07,200 --> 00:11:09,060
according to the their own local clock

286
00:11:09,060 --> 00:11:11,339
and that place this is this tolerance

287
00:11:11,339 --> 00:11:13,320
and T now is the current time so if the

288
00:11:13,320 --> 00:11:15,380
equation is um

289
00:11:15,380 --> 00:11:18,120
uh satisfied the the participant would

290
00:11:18,120 --> 00:11:19,680
drop out

291
00:11:19,680 --> 00:11:22,500
um how do we set this offset

292
00:11:22,500 --> 00:11:24,959
um this estimate the it is set as the

293
00:11:24,959 --> 00:11:26,640
minimum difference between the time that

294
00:11:26,640 --> 00:11:29,100
is indicated in any heartbeat that the

295
00:11:29,100 --> 00:11:31,260
participant receives and the local time

296
00:11:31,260 --> 00:11:32,880
at which it was received so let's give

297
00:11:32,880 --> 00:11:36,420
let's see an example in this case Alice

298
00:11:36,420 --> 00:11:38,760
um so the the two lines represent the

299
00:11:38,760 --> 00:11:40,740
time according to the local clock of the

300
00:11:40,740 --> 00:11:42,360
participants

301
00:11:42,360 --> 00:11:45,420
um so in this case the two artists and

302
00:11:45,420 --> 00:11:47,220
and the leader are perfectly

303
00:11:47,220 --> 00:11:49,260
synchronized blocks so Alice will

304
00:11:49,260 --> 00:11:51,480
generate a ephemeral identity at time

305
00:11:51,480 --> 00:11:54,060
zero and the leader receives it at time

306
00:11:54,060 --> 00:11:56,160
one and then the leader can like at this

307
00:11:56,160 --> 00:11:58,440
point Alice will start a timer when she

308
00:11:58,440 --> 00:12:00,060
joins the meeting and she will say I

309
00:12:00,060 --> 00:12:02,339
will drop out of the meeting unless I

310
00:12:02,339 --> 00:12:04,740
hear from The Leader by this time Delta

311
00:12:04,740 --> 00:12:06,660
live which in my in our example is going

312
00:12:06,660 --> 00:12:09,480
to be 10. so the leader can like send

313
00:12:09,480 --> 00:12:11,399
this heartbeat and maybe this heartbeat

314
00:12:11,399 --> 00:12:13,620
is not delivered immediately it takes

315
00:12:13,620 --> 00:12:16,320
until time 10 for Alice to receive it

316
00:12:16,320 --> 00:12:17,820
and when she receives it she can set

317
00:12:17,820 --> 00:12:19,980
this offset to nine which is you know 10

318
00:12:19,980 --> 00:12:22,740
minus one and so after she has received

319
00:12:22,740 --> 00:12:25,260
this herbitalis will delay dropping out

320
00:12:25,260 --> 00:12:27,959
until until time 20. why do we said now

321
00:12:27,959 --> 00:12:30,480
we see that the the two uh the Alice and

322
00:12:30,480 --> 00:12:32,640
the leader are synchronized but uh but

323
00:12:32,640 --> 00:12:34,680
we're setting this this time to nine

324
00:12:34,680 --> 00:12:36,420
this offset to nine which is pretty big

325
00:12:36,420 --> 00:12:38,279
why do we do this it's because if you

326
00:12:38,279 --> 00:12:39,899
you can see in the picture on the right

327
00:12:39,899 --> 00:12:42,000
that another situation that is

328
00:12:42,000 --> 00:12:43,860
consistent with Alice's view is the fact

329
00:12:43,860 --> 00:12:46,139
that you know this uh the message from

330
00:12:46,139 --> 00:12:48,540
Alice to the leader arrived much later

331
00:12:48,540 --> 00:12:49,920
and then the heartbeat was actually

332
00:12:49,920 --> 00:12:52,680
delivered pretty fast but the two clocks

333
00:12:52,680 --> 00:12:55,320
were not synchronized since Alice cannot

334
00:12:55,320 --> 00:12:57,060
distinguish between the two she takes a

335
00:12:57,060 --> 00:12:58,920
conservative approach and uses like an

336
00:12:58,920 --> 00:13:00,260
upper bound

337
00:13:00,260 --> 00:13:03,060
note that if over the course of the of

338
00:13:03,060 --> 00:13:04,680
the meeting since we're using a minimum

339
00:13:04,680 --> 00:13:06,480
even if over the course of the meeting

340
00:13:06,480 --> 00:13:09,779
this like Network delay uh improves so

341
00:13:09,779 --> 00:13:12,000
for example this outfit the second arbit

342
00:13:12,000 --> 00:13:13,920
here is sent a time nine received at

343
00:13:13,920 --> 00:13:17,940
time 11. Alice can update or estimate

344
00:13:17,940 --> 00:13:21,360
um and uh and these savings this this

345
00:13:21,360 --> 00:13:23,760
new estimate remains valid even if the

346
00:13:23,760 --> 00:13:25,680
network delay increases again so in this

347
00:13:25,680 --> 00:13:27,180
case we see that Alice has received an

348
00:13:27,180 --> 00:13:30,060
art bitter time 21 but despite that she

349
00:13:30,060 --> 00:13:31,800
will drop out just a second later

350
00:13:31,800 --> 00:13:33,899
because she does realize that this

351
00:13:33,899 --> 00:13:36,000
heartbeat must be old

352
00:13:36,000 --> 00:13:37,740
because she knows that the the the the

353
00:13:37,740 --> 00:13:40,320
network delay has must have increased

354
00:13:40,320 --> 00:13:43,079
and note that when analysis is just

355
00:13:43,079 --> 00:13:45,180
interacting with one leader the

356
00:13:45,180 --> 00:13:47,760
difference between her estimates Delta

357
00:13:47,760 --> 00:13:50,700
and the actual offset has to be at most

358
00:13:50,700 --> 00:13:55,200
Delta line why is this the case because

359
00:13:55,200 --> 00:13:57,660
um because essentially this estimate

360
00:13:57,660 --> 00:13:59,519
this difference is essentially

361
00:13:59,519 --> 00:14:02,040
equivalent to the network delay on the

362
00:14:02,040 --> 00:14:04,079
packets and since we know that like

363
00:14:04,079 --> 00:14:06,779
Alice started at time zero and received

364
00:14:06,779 --> 00:14:09,540
the first heartbeat Before Time Delta

365
00:14:09,540 --> 00:14:11,940
live this is the maximum amount that the

366
00:14:11,940 --> 00:14:13,620
delivery must have been taken because

367
00:14:13,620 --> 00:14:15,420
the heartbeat must have been generated

368
00:14:15,420 --> 00:14:17,880
After Time Zero because it includes the

369
00:14:17,880 --> 00:14:19,920
Alice's key

370
00:14:19,920 --> 00:14:21,779
um so when you when you when you start

371
00:14:21,779 --> 00:14:23,940
formalizing this and and try to come up

372
00:14:23,940 --> 00:14:25,800
with the theorem this is what you get

373
00:14:25,800 --> 00:14:28,019
for the for the liveness lock we have

374
00:14:28,019 --> 00:14:30,120
the first term which bounds the error

375
00:14:30,120 --> 00:14:33,600
between the uh the estimate Delta and

376
00:14:33,600 --> 00:14:35,760
the actual offset and the second term

377
00:14:35,760 --> 00:14:37,500
which is this plus Delta Live accounts

378
00:14:37,500 --> 00:14:38,760
for the fact that after receiving the

379
00:14:38,760 --> 00:14:40,500
heartbeat Alice will wait for that loan

380
00:14:40,500 --> 00:14:42,420
before dropping out

381
00:14:42,420 --> 00:14:45,120
if you look at the first term a little

382
00:14:45,120 --> 00:14:48,300
bit more and is the number of distinct

383
00:14:48,300 --> 00:14:50,820
leaders that natalies has encountered so

384
00:14:50,820 --> 00:14:54,060
far and T now minus t join is the time

385
00:14:54,060 --> 00:14:57,120
the tallest or the participant spent in

386
00:14:57,120 --> 00:14:59,639
the meeting and like this theorem is

387
00:14:59,639 --> 00:15:02,220
holds as long as all the leaders that

388
00:15:02,220 --> 00:15:04,560
Alice or the participant has encountered

389
00:15:04,560 --> 00:15:08,579
are have been honest so this is great

390
00:15:08,579 --> 00:15:11,760
and the zoom is the zooms is the first

391
00:15:11,760 --> 00:15:13,260
video communication product which has

392
00:15:13,260 --> 00:15:15,120
this formal liveness guarantees but like

393
00:15:15,120 --> 00:15:17,160
the next question is can we do better I

394
00:15:17,160 --> 00:15:21,000
mean first is this like theorem diet

395
00:15:21,000 --> 00:15:23,959
um we can see that um

396
00:15:23,959 --> 00:15:26,579
that the first term was n times Delta

397
00:15:26,579 --> 00:15:28,440
live and we we can see that that is

398
00:15:28,440 --> 00:15:30,420
actually Justified so this example

399
00:15:30,420 --> 00:15:33,000
starts the same as as the one before but

400
00:15:33,000 --> 00:15:34,380
imagine that there was also a second

401
00:15:34,380 --> 00:15:38,220
party or two L2 we received the first

402
00:15:38,220 --> 00:15:40,320
art beat like sort of shortly after it

403
00:15:40,320 --> 00:15:42,240
was sent so this art bit is received at

404
00:15:42,240 --> 00:15:43,980
10 into and let's say that then this

405
00:15:43,980 --> 00:15:46,380
party becomes the leader of of the

406
00:15:46,380 --> 00:15:49,260
protocol so now this party will send an

407
00:15:49,260 --> 00:15:52,199
heartbeat and a network attacker can

408
00:15:52,199 --> 00:15:54,540
delay delivering this heartbeat to Alice

409
00:15:54,540 --> 00:15:56,279
until time 20 because that was the time

410
00:15:56,279 --> 00:15:59,040
at which she was gonna drop out and so

411
00:15:59,040 --> 00:16:01,860
when Alice computes the the estimate

412
00:16:01,860 --> 00:16:04,560
Delta 2 with the new leader she it will

413
00:16:04,560 --> 00:16:06,899
be like in this case 18 which is bigger

414
00:16:06,899 --> 00:16:08,820
than Left Alive and we can see how for

415
00:16:08,820 --> 00:16:11,160
each new leader like this game can be

416
00:16:11,160 --> 00:16:12,600
played where the adversary can delay

417
00:16:12,600 --> 00:16:15,959
further by an additional that live term

418
00:16:15,959 --> 00:16:18,540
um and or whether in this case the

419
00:16:18,540 --> 00:16:20,639
everybody is synchronized

420
00:16:20,639 --> 00:16:21,600
um

421
00:16:21,600 --> 00:16:23,699
so in addition I don't have much time to

422
00:16:23,699 --> 00:16:25,139
go into this so I'm going to skip it but

423
00:16:25,139 --> 00:16:27,660
like this problem is compounded when one

424
00:16:27,660 --> 00:16:29,339
of the previous leaders is malicious

425
00:16:29,339 --> 00:16:30,800
because essentially they can

426
00:16:30,800 --> 00:16:33,360
pre-generate a bunch of heartbeats so

427
00:16:33,360 --> 00:16:35,639
that uh so that this problem can can be

428
00:16:35,639 --> 00:16:37,560
accentuated

429
00:16:37,560 --> 00:16:38,220
um

430
00:16:38,220 --> 00:16:40,620
we have two proposals that improve on

431
00:16:40,620 --> 00:16:42,839
these points the first one essentially

432
00:16:42,839 --> 00:16:46,680
starts with the observation that if you

433
00:16:46,680 --> 00:16:49,800
have like well synchronized clocks it

434
00:16:49,800 --> 00:16:52,320
doesn't make you can you can get better

435
00:16:52,320 --> 00:16:54,480
liveness properties when the clocks are

436
00:16:54,480 --> 00:16:56,880
actually well synchronized at the cost

437
00:16:56,880 --> 00:16:58,980
of forced correctness when they aren't

438
00:16:58,980 --> 00:17:00,720
so you can have a protocol where if the

439
00:17:00,720 --> 00:17:01,980
parties are worse synchronized you get

440
00:17:01,980 --> 00:17:03,660
good liveness and if they are not people

441
00:17:03,660 --> 00:17:05,939
will drop out from the protocol a little

442
00:17:05,939 --> 00:17:07,079
bit too much

443
00:17:07,079 --> 00:17:10,140
so the the idea is that participants

444
00:17:10,140 --> 00:17:11,640
maintain an upper bound and a lower

445
00:17:11,640 --> 00:17:14,099
bound on the on the offset and only

446
00:17:14,099 --> 00:17:17,579
update their uh they only correct the

447
00:17:17,579 --> 00:17:20,280
time in the heartbeat if this um if this

448
00:17:20,280 --> 00:17:24,179
bound is uh uh if if there should this

449
00:17:24,179 --> 00:17:25,919
bound can be improved by that correction

450
00:17:25,919 --> 00:17:28,439
the advantages I already talked about

451
00:17:28,439 --> 00:17:29,760
like

452
00:17:29,760 --> 00:17:32,640
um but this this still depends this has

453
00:17:32,640 --> 00:17:34,020
no additional interaction but still

454
00:17:34,020 --> 00:17:35,880
depends on the previous leader being

455
00:17:35,880 --> 00:17:38,760
honest the second proposal to strengthen

456
00:17:38,760 --> 00:17:40,320
the protocol is just to add additional

457
00:17:40,320 --> 00:17:42,720
interaction so each participant can

458
00:17:42,720 --> 00:17:44,580
regularly send to the server an

459
00:17:44,580 --> 00:17:47,220
unpredictable nons at regular intervals

460
00:17:47,220 --> 00:17:49,740
and then the leader can include these

461
00:17:49,740 --> 00:17:51,900
notes in the first cmk message that they

462
00:17:51,900 --> 00:17:53,940
send to the participant and this

463
00:17:53,940 --> 00:17:56,700
essentially ensures for the participant

464
00:17:56,700 --> 00:17:59,580
that this message is recent the same way

465
00:17:59,580 --> 00:18:01,679
that like the first heartbeat that they

466
00:18:01,679 --> 00:18:03,480
receive when they join the protocol must

467
00:18:03,480 --> 00:18:05,520
be recent because it includes their key

468
00:18:05,520 --> 00:18:08,700
and so this is the theorem that you that

469
00:18:08,700 --> 00:18:09,780
you that you get when you try to

470
00:18:09,780 --> 00:18:11,520
formalize this protocol we can see that

471
00:18:11,520 --> 00:18:14,220
this there is this term the entrance

472
00:18:14,220 --> 00:18:17,580
Delta live can be now bounded by three

473
00:18:17,580 --> 00:18:19,260
um and so we get and this happens

474
00:18:19,260 --> 00:18:21,240
regardless of whether past leaders were

475
00:18:21,240 --> 00:18:23,220
corrupted or not

476
00:18:23,220 --> 00:18:25,500
um so this is like this is great and

477
00:18:25,500 --> 00:18:27,299
this is the protocol that we have

478
00:18:27,299 --> 00:18:30,059
deployed since version 513

479
00:18:30,059 --> 00:18:32,340
and to be precise what we have deployed

480
00:18:32,340 --> 00:18:33,780
is a slight variant to where this

481
00:18:33,780 --> 00:18:36,780
nonsense are not generated at constant

482
00:18:36,780 --> 00:18:39,539
intervals but the the frequency depends

483
00:18:39,539 --> 00:18:41,580
on the number of of parties that are in

484
00:18:41,580 --> 00:18:43,440
the meeting and this is because uh for

485
00:18:43,440 --> 00:18:44,700
efficiency we didn't want to have too

486
00:18:44,700 --> 00:18:46,740
much traffic and we will describe this

487
00:18:46,740 --> 00:18:48,059
in more detail in the in the full

488
00:18:48,059 --> 00:18:49,320
version of the paper

489
00:18:49,320 --> 00:18:51,480
so to conclude

490
00:18:51,480 --> 00:18:54,179
um we have we have designed like a

491
00:18:54,179 --> 00:18:56,100
protocol that in our model achieves very

492
00:18:56,100 --> 00:18:58,260
good like liveness guarantees there is a

493
00:18:58,260 --> 00:19:00,120
lot of like interesting future

494
00:19:00,120 --> 00:19:01,740
directions such as looking at The

495
00:19:01,740 --> 00:19:04,020
Insider security protocols that are not

496
00:19:04,020 --> 00:19:06,299
based on a leader or like expand the

497
00:19:06,299 --> 00:19:08,220
model to include the security of the

498
00:19:08,220 --> 00:19:09,720
whole meaning we talk a little bit about

499
00:19:09,720 --> 00:19:11,460
it about how to do it in the paper but

500
00:19:11,460 --> 00:19:13,200
there's we don't have like a formal

501
00:19:13,200 --> 00:19:15,360
definition for that and the last thing I

502
00:19:15,360 --> 00:19:17,160
wanted to say is that analyzing real

503
00:19:17,160 --> 00:19:20,580
world real world protocols

504
00:19:20,580 --> 00:19:22,860
um is very useful and this project

505
00:19:22,860 --> 00:19:25,020
demonstrates how like us collaborating

506
00:19:25,020 --> 00:19:27,179
with uh with Academia with like Daniel

507
00:19:27,179 --> 00:19:29,880
legani has made possible like an upgrade

508
00:19:29,880 --> 00:19:32,160
to our protocol that is that benefits

509
00:19:32,160 --> 00:19:34,380
the security of all our users so it is

510
00:19:34,380 --> 00:19:36,299
it is a model that I think works and

511
00:19:36,299 --> 00:19:37,980
that I would encourage other companies

512
00:19:37,980 --> 00:19:39,539
to pursue

513
00:19:39,539 --> 00:19:40,440
um thank you very much for your

514
00:19:40,440 --> 00:19:42,620
attention

515
00:19:47,820 --> 00:19:50,100
uh we have time for one very quick

516
00:19:50,100 --> 00:19:52,679
question if you want to ask come to the

517
00:19:52,679 --> 00:19:55,580
front to the microphone

518
00:19:57,240 --> 00:19:59,400
um if not maybe I have a quick question

519
00:19:59,400 --> 00:20:01,740
as far as I understood Zoom maybe this

520
00:20:01,740 --> 00:20:05,580
is uh uh false but I understood that the

521
00:20:05,580 --> 00:20:08,160
server at Zoom chooses for the

522
00:20:08,160 --> 00:20:10,140
recipients for the clients which the

523
00:20:10,140 --> 00:20:12,720
best video stream would be to enhance

524
00:20:12,720 --> 00:20:14,820
quality but if you have end-to-end

525
00:20:14,820 --> 00:20:17,520
encryption how can the server help the

526
00:20:17,520 --> 00:20:21,059
clients to identify the best stream will

527
00:20:21,059 --> 00:20:22,740
there be multiple sent in parallel or

528
00:20:22,740 --> 00:20:24,780
how does that work yeah yeah precisely

529
00:20:24,780 --> 00:20:27,000
and like you know that that decision is

530
00:20:27,000 --> 00:20:29,280
just based on the bandwidth so

531
00:20:29,280 --> 00:20:31,380
okay so the sender will up the sender

532
00:20:31,380 --> 00:20:33,120
will upload multiples multiple streams

533
00:20:33,120 --> 00:20:35,220
okay and that that works for senders

534
00:20:35,220 --> 00:20:37,799
that works for senders that like the the

535
00:20:37,799 --> 00:20:41,100
overhead is manageable I mean they we

536
00:20:41,100 --> 00:20:42,900
have it in production it works so I

537
00:20:42,900 --> 00:20:46,980
guess interesting thank you okay uh yeah

538
00:20:46,980 --> 00:20:50,400
let's uh thank Antonio again and we have

539
00:20:50,400 --> 00:20:50,830
the second

540
00:20:50,830 --> 00:20:59,010
[Applause]

541
00:20:59,820 --> 00:21:02,240
foreign

542
00:21:04,460 --> 00:21:07,860
talk has the title caveat implementer

543
00:21:07,860 --> 00:21:12,240
key recovery attacks on Mega and Lenka

544
00:21:12,240 --> 00:21:14,820
marekova will give the talk

545
00:21:14,820 --> 00:21:18,900
and the slides are set up great so the

546
00:21:18,900 --> 00:21:20,220
stage is yours

547
00:21:20,220 --> 00:21:22,380
thank you for the introduction

548
00:21:22,380 --> 00:21:24,480
so this is joined work with Martin

549
00:21:24,480 --> 00:21:28,220
Albrecht Mira holler and Kenny

550
00:21:28,440 --> 00:21:30,480
now Mega is an end-to-end encrypted

551
00:21:30,480 --> 00:21:32,340
cloud storage and communication platform

552
00:21:32,340 --> 00:21:35,220
with more than 280 million registered

553
00:21:35,220 --> 00:21:36,840
users at this moment

554
00:21:36,840 --> 00:21:40,020
and previous work by backendo hauler and

555
00:21:40,020 --> 00:21:41,700
Patterson which you may have heard about

556
00:21:41,700 --> 00:21:43,919
it through old crypto last month gave

557
00:21:43,919 --> 00:21:46,380
five attacks on this platform and the

558
00:21:46,380 --> 00:21:48,360
first two of these completely broke the

559
00:21:48,360 --> 00:21:51,840
confidentiality of user files

560
00:21:51,840 --> 00:21:53,880
now Mega did not implement the

561
00:21:53,880 --> 00:21:55,620
countermeasures that were suggested by

562
00:21:55,620 --> 00:21:58,260
the authors of these attacks and instead

563
00:21:58,260 --> 00:22:00,659
decided to rely on validation of plain

564
00:22:00,659 --> 00:22:03,299
text payloads

565
00:22:03,299 --> 00:22:05,100
these checks were sufficient to prevent

566
00:22:05,100 --> 00:22:07,559
those specific attacks but not

567
00:22:07,559 --> 00:22:10,500
sufficient in general and in this talk I

568
00:22:10,500 --> 00:22:12,240
will show how we broke the patched

569
00:22:12,240 --> 00:22:14,419
version

570
00:22:14,580 --> 00:22:17,580
are new attacks by are enabled by a

571
00:22:17,580 --> 00:22:20,760
couple of things so first this is the

572
00:22:20,760 --> 00:22:23,039
continued like of key separation and

573
00:22:23,039 --> 00:22:25,140
integrity protection which was already

574
00:22:25,140 --> 00:22:27,179
present in the

575
00:22:27,179 --> 00:22:30,120
original design

576
00:22:30,120 --> 00:22:32,520
then it's the existence of an ECB

577
00:22:32,520 --> 00:22:34,860
encryption Oracle which is present in

578
00:22:34,860 --> 00:22:37,020
mega drop which is a feature that is

579
00:22:37,020 --> 00:22:39,080
completely unrelated to the actual

580
00:22:39,080 --> 00:22:42,299
protocol under attack

581
00:22:42,299 --> 00:22:44,760
and finally we use the detailed

582
00:22:44,760 --> 00:22:46,799
reporting of errors that are sent by the

583
00:22:46,799 --> 00:22:48,960
client to the server which were added

584
00:22:48,960 --> 00:22:51,179
shortly after the patch for the original

585
00:22:51,179 --> 00:22:53,280
attacks

586
00:22:53,280 --> 00:22:55,140
and one could say that our tags are

587
00:22:55,140 --> 00:22:58,080
inspired by the small subgroup attacks

588
00:22:58,080 --> 00:23:00,240
on DV home and key exchange

589
00:23:00,240 --> 00:23:02,520
as well as on the key overwriting

590
00:23:02,520 --> 00:23:05,780
attacks on openpgp

591
00:23:06,179 --> 00:23:08,460
now first I will give a very high level

592
00:23:08,460 --> 00:23:11,880
view of the way user keys are derived in

593
00:23:11,880 --> 00:23:13,380
Mega

594
00:23:13,380 --> 00:23:16,919
so first each user has a symmetric 128

595
00:23:16,919 --> 00:23:19,559
bit encryption key which is derived from

596
00:23:19,559 --> 00:23:21,240
their password

597
00:23:21,240 --> 00:23:23,100
they also have another symmetry key

598
00:23:23,100 --> 00:23:25,140
which is the master key

599
00:23:25,140 --> 00:23:28,919
they have a 2048-bit RSA key pair

600
00:23:28,919 --> 00:23:31,559
and a number of file encryption Keys

601
00:23:31,559 --> 00:23:34,140
which encrypt the individual files that

602
00:23:34,140 --> 00:23:38,460
are stored in that user's cloud storage

603
00:23:38,460 --> 00:23:41,220
you can see the hierarchy of these keys

604
00:23:41,220 --> 00:23:43,980
on the slides and so

605
00:23:43,980 --> 00:23:44,880
um

606
00:23:44,880 --> 00:23:46,980
to allow users to log in on multiple

607
00:23:46,980 --> 00:23:47,960
devices

608
00:23:47,960 --> 00:23:50,520
only the encryption key is the one that

609
00:23:50,520 --> 00:23:52,380
is derived from their password and all

610
00:23:52,380 --> 00:23:54,240
of the other keys are stored in

611
00:23:54,240 --> 00:23:56,580
encrypted form on the server

612
00:23:56,580 --> 00:23:59,159
and so I use this bracket notation to

613
00:23:59,159 --> 00:24:01,260
mean that the master key is encrypted

614
00:24:01,260 --> 00:24:04,080
using the encryption key and then the

615
00:24:04,080 --> 00:24:06,360
file encryption Keys as well as the RSA

616
00:24:06,360 --> 00:24:08,460
private key are encrypted using the

617
00:24:08,460 --> 00:24:09,600
master key

618
00:24:09,600 --> 00:24:11,760
and you see asecb here you're probably

619
00:24:11,760 --> 00:24:14,780
already hearing a loud warning sign but

620
00:24:14,780 --> 00:24:18,780
in this case because they only use usage

621
00:24:18,780 --> 00:24:20,220
to encrypt material that is very

622
00:24:20,220 --> 00:24:22,740
unlikely to repeat we will only be using

623
00:24:22,740 --> 00:24:25,880
the fact that it's malleable

624
00:24:26,220 --> 00:24:28,919
now the last thing I should mention is

625
00:24:28,919 --> 00:24:31,799
so-called shared file encryption Keys

626
00:24:31,799 --> 00:24:34,740
which encrypt files that are sent by

627
00:24:34,740 --> 00:24:37,020
other people to this user and they are

628
00:24:37,020 --> 00:24:41,539
encrypted under their public RSA key

629
00:24:42,000 --> 00:24:44,460
now I will look a bit in more more

630
00:24:44,460 --> 00:24:48,600
detail on how the encrypted private RSA

631
00:24:48,600 --> 00:24:50,400
key is stored because it's relevant for

632
00:24:50,400 --> 00:24:52,320
our tax since this is the key that we

633
00:24:52,320 --> 00:24:54,240
will be overwriting

634
00:24:54,240 --> 00:24:57,659
now in particular it's a custom encoding

635
00:24:57,659 --> 00:25:01,020
for a more efficient RSA decryption

636
00:25:01,020 --> 00:25:03,600
using the Chinese remainder theorem and

637
00:25:03,600 --> 00:25:06,659
in mega this is referred to as the proof

638
00:25:06,659 --> 00:25:08,400
key

639
00:25:08,400 --> 00:25:11,100
and in particular this format encodes

640
00:25:11,100 --> 00:25:13,799
the prime factors PQ the secret exponent

641
00:25:13,799 --> 00:25:16,500
d as well as the value U which is a q

642
00:25:16,500 --> 00:25:19,320
inverse mod P

643
00:25:19,320 --> 00:25:21,179
each of these values is prefixed with

644
00:25:21,179 --> 00:25:22,919
the two byte length field

645
00:25:22,919 --> 00:25:25,559
and the whole thing is split into 16

646
00:25:25,559 --> 00:25:28,080
byte blocks for asecb

647
00:25:28,080 --> 00:25:29,940
so in particular you can notice that

648
00:25:29,940 --> 00:25:32,340
these length Fields push all of these

649
00:25:32,340 --> 00:25:35,220
values so that nothing is block lined

650
00:25:35,220 --> 00:25:37,500
anymore and this complicates our attacks

651
00:25:37,500 --> 00:25:39,860
a little bit

652
00:25:41,400 --> 00:25:43,620
now this is a simplified view of the

653
00:25:43,620 --> 00:25:46,740
protocol that takes place every time a

654
00:25:46,740 --> 00:25:49,440
user logs into Mega and this includes

655
00:25:49,440 --> 00:25:52,380
authentication and session key session

656
00:25:52,380 --> 00:25:54,120
ID Exchange

657
00:25:54,120 --> 00:25:55,980
so you can see that when the user logs

658
00:25:55,980 --> 00:25:59,640
in the mega server first retrieves some

659
00:25:59,640 --> 00:26:01,860
information from start so this is the

660
00:26:01,860 --> 00:26:06,620
encrypted keys and other data it picks

661
00:26:06,620 --> 00:26:09,779
it picks a random session ID and then

662
00:26:09,779 --> 00:26:12,600
encrypts this session ID alongside some

663
00:26:12,600 --> 00:26:16,200
other information using RSA

664
00:26:16,200 --> 00:26:19,500
it then sends this retrieved encrypted

665
00:26:19,500 --> 00:26:22,140
Keys as well as the RSA ciphertext to

666
00:26:22,140 --> 00:26:23,220
the user

667
00:26:23,220 --> 00:26:26,220
and the user first decrypts their master

668
00:26:26,220 --> 00:26:29,039
key and then uses this master key in

669
00:26:29,039 --> 00:26:31,500
this function that I called Mega deck

670
00:26:31,500 --> 00:26:34,980
here and this includes both AES ECB

671
00:26:34,980 --> 00:26:37,980
decryption as well as RSA decryption

672
00:26:37,980 --> 00:26:40,140
the result of this should be the session

673
00:26:40,140 --> 00:26:42,600
ID which it then sends to the server and

674
00:26:42,600 --> 00:26:44,400
the server accepts or reject space on

675
00:26:44,400 --> 00:26:45,960
this

676
00:26:45,960 --> 00:26:49,020
for our tags we are interested in what

677
00:26:49,020 --> 00:26:52,919
happens when Mega servers maliciously

678
00:26:52,919 --> 00:26:55,679
change the inputs that go into this

679
00:26:55,679 --> 00:26:58,440
megadeck function

680
00:26:58,440 --> 00:27:00,960
so I will zoom in a bit on what happens

681
00:27:00,960 --> 00:27:03,179
within this function so as I mentioned

682
00:27:03,179 --> 00:27:05,340
we have these two steps first we have

683
00:27:05,340 --> 00:27:07,740
the asecb decryption

684
00:27:07,740 --> 00:27:11,640
which retrieves the secretary and then

685
00:27:11,640 --> 00:27:14,279
the secretary key is used to decrypt the

686
00:27:14,279 --> 00:27:15,960
RSA ciphertext

687
00:27:15,960 --> 00:27:19,020
and the key issue here is that both of

688
00:27:19,020 --> 00:27:21,960
these steps rely on validity checking of

689
00:27:21,960 --> 00:27:24,120
the decrypted values and return

690
00:27:24,120 --> 00:27:28,039
distinguishable errors to the server

691
00:27:28,140 --> 00:27:30,480
we rely on both explicit and implicit

692
00:27:30,480 --> 00:27:32,340
errors

693
00:27:32,340 --> 00:27:34,679
so first explicit errors arise from this

694
00:27:34,679 --> 00:27:36,720
validity checking

695
00:27:36,720 --> 00:27:39,600
in particular in the Second Step there

696
00:27:39,600 --> 00:27:41,880
is a length check on the plain text

697
00:27:41,880 --> 00:27:43,980
which together with the Legacy padding

698
00:27:43,980 --> 00:27:46,440
check reveals if the second byte of the

699
00:27:46,440 --> 00:27:48,419
plain text is zero and we use this in

700
00:27:48,419 --> 00:27:50,820
our second attack

701
00:27:50,820 --> 00:27:53,279
then what do I mean by implicit errors

702
00:27:53,279 --> 00:27:56,100
these arise due to bugs in the low level

703
00:27:56,100 --> 00:27:58,740
library that Mega uses for big integer

704
00:27:58,740 --> 00:27:59,940
arithmetic

705
00:27:59,940 --> 00:28:02,820
and in particular in the first step

706
00:28:02,820 --> 00:28:05,159
and the failure in recomputing the

707
00:28:05,159 --> 00:28:07,860
inverse of Q mod P reveals whether the

708
00:28:07,860 --> 00:28:09,840
greatest common divisor of p and Q are

709
00:28:09,840 --> 00:28:11,940
not one and so this enables our first

710
00:28:11,940 --> 00:28:14,100
attack

711
00:28:14,100 --> 00:28:16,380
now the final ingredient that I will

712
00:28:16,380 --> 00:28:19,559
need for our tags is this ECB encryption

713
00:28:19,559 --> 00:28:20,820
Oracle

714
00:28:20,820 --> 00:28:23,940
which arises in mega drop Mega drop is a

715
00:28:23,940 --> 00:28:26,039
feature that lets anyone upload files to

716
00:28:26,039 --> 00:28:27,840
a folder in the cloud storage of the

717
00:28:27,840 --> 00:28:29,640
recipient

718
00:28:29,640 --> 00:28:32,520
and the issue here is that

719
00:28:32,520 --> 00:28:34,559
for these files clients automatically

720
00:28:34,559 --> 00:28:38,460
re-encrypt the received shared file keys

721
00:28:38,460 --> 00:28:40,860
so in very simplified form you can see

722
00:28:40,860 --> 00:28:43,200
how a malicious server can use this to

723
00:28:43,200 --> 00:28:46,080
construct an ECB encryption Oracle by

724
00:28:46,080 --> 00:28:49,020
essentially pretending to upload a file

725
00:28:49,020 --> 00:28:52,559
to the Target users cloud storage and it

726
00:28:52,559 --> 00:28:56,100
chooses some key material and the user's

727
00:28:56,100 --> 00:28:58,260
client automatically re-encrypts the

728
00:28:58,260 --> 00:29:00,659
scheme material under their own master

729
00:29:00,659 --> 00:29:02,580
key and then stores it back on the

730
00:29:02,580 --> 00:29:04,679
server

731
00:29:04,679 --> 00:29:06,720
so as I said a malicious provider can

732
00:29:06,720 --> 00:29:09,360
use this to construct an ECB encryption

733
00:29:09,360 --> 00:29:12,480
Oracle without user interaction and

734
00:29:12,480 --> 00:29:14,760
without actually leaving traces on the

735
00:29:14,760 --> 00:29:17,360
user's client

736
00:29:18,779 --> 00:29:22,460
now I will describe the attacks

737
00:29:22,559 --> 00:29:24,360
so as I said we are in the setting of a

738
00:29:24,360 --> 00:29:26,820
malicious service provider which is the

739
00:29:26,820 --> 00:29:29,159
one that Mega claims your files should

740
00:29:29,159 --> 00:29:31,380
be secure under

741
00:29:31,380 --> 00:29:34,320
and our goal as an attacker is to obtain

742
00:29:34,320 --> 00:29:37,260
ECB decryption ability under this master

743
00:29:37,260 --> 00:29:39,899
key so you can see it highlighted on the

744
00:29:39,899 --> 00:29:42,600
key hierarchy and this allows an

745
00:29:42,600 --> 00:29:45,179
attacker to recover both the private RSA

746
00:29:45,179 --> 00:29:47,580
key as well as any of the file

747
00:29:47,580 --> 00:29:50,039
encryption keys and so in particular

748
00:29:50,039 --> 00:29:52,320
this means an attacker can both

749
00:29:52,320 --> 00:29:54,740
impersonate the client as well as

750
00:29:54,740 --> 00:29:58,440
decrypt any of their files

751
00:29:58,440 --> 00:30:00,000
and the cost of the attacks will be

752
00:30:00,000 --> 00:30:01,919
measured mainly in the number of logging

753
00:30:01,919 --> 00:30:04,020
attempts because we are exploiting the

754
00:30:04,020 --> 00:30:06,860
login procedure

755
00:30:07,140 --> 00:30:09,299
now the first attack

756
00:30:09,299 --> 00:30:11,279
based on the error

757
00:30:11,279 --> 00:30:14,159
modular inverse computation

758
00:30:14,159 --> 00:30:16,440
and I will introduce a bit of notation

759
00:30:16,440 --> 00:30:19,260
first so this is how we denote the

760
00:30:19,260 --> 00:30:21,059
target ciphertext block that we want to

761
00:30:21,059 --> 00:30:24,720
decrypt the ECB encryption Oracle as

762
00:30:24,720 --> 00:30:27,059
well as the error that is output by the

763
00:30:27,059 --> 00:30:30,240
client and sent to the server if the

764
00:30:30,240 --> 00:30:32,640
decrypted values of p and Q have a

765
00:30:32,640 --> 00:30:35,100
common factor

766
00:30:35,100 --> 00:30:38,820
the main idea is to construct a modified

767
00:30:38,820 --> 00:30:41,760
encryption of proof key using the ECB

768
00:30:41,760 --> 00:30:43,799
encryption Oracle and the target

769
00:30:43,799 --> 00:30:45,659
ciphertext block

770
00:30:45,659 --> 00:30:48,779
so that pmod R is zero for a small Prime

771
00:30:48,779 --> 00:30:50,159
r

772
00:30:50,159 --> 00:30:52,919
and Q contains the target b in the least

773
00:30:52,919 --> 00:30:54,840
significant position

774
00:30:54,840 --> 00:30:57,179
this is done in such a way so that

775
00:30:57,179 --> 00:31:01,020
getting this inverse error means that Q

776
00:31:01,020 --> 00:31:03,960
mode R is zero and so by adjusting Q

777
00:31:03,960 --> 00:31:06,299
until we hit this error we can learn the

778
00:31:06,299 --> 00:31:08,700
value of p mod r

779
00:31:08,700 --> 00:31:11,279
and then we simply repeat this for a set

780
00:31:11,279 --> 00:31:13,740
of primes such that their product is at

781
00:31:13,740 --> 00:31:16,740
least 120 28 bits long so that we can

782
00:31:16,740 --> 00:31:19,080
learn the actual value of B using the

783
00:31:19,080 --> 00:31:22,039
Chinese remainder theorem

784
00:31:22,140 --> 00:31:24,000
the average cost of this attack is

785
00:31:24,000 --> 00:31:26,760
around 600 login attempts and between 60

786
00:31:26,760 --> 00:31:29,940
and 90 ECB encryption Oracle queries

787
00:31:29,940 --> 00:31:34,760
which we have a confirmed experimentally

788
00:31:35,880 --> 00:31:38,700
now we give two versions of this attack

789
00:31:38,700 --> 00:31:42,120
first I'm showing the overwritten proof

790
00:31:42,120 --> 00:31:44,460
key for the simple version where we have

791
00:31:44,460 --> 00:31:46,200
reduced to the size of the fields so

792
00:31:46,200 --> 00:31:48,360
that everything is block lined

793
00:31:48,360 --> 00:31:52,020
and you can see that Q embeds the target

794
00:31:52,020 --> 00:31:54,779
plain text as well as the test value T

795
00:31:54,779 --> 00:31:56,399
which we vary over the course of the

796
00:31:56,399 --> 00:31:57,539
attack

797
00:31:57,539 --> 00:32:00,000
and you can also see that P is divisible

798
00:32:00,000 --> 00:32:03,299
by the small Prime RI

799
00:32:03,299 --> 00:32:05,460
one issue is that such a this version

800
00:32:05,460 --> 00:32:07,980
could still be prevented by adding ear

801
00:32:07,980 --> 00:32:09,720
to more validation checks for example

802
00:32:09,720 --> 00:32:12,360
just a length check on these fields so

803
00:32:12,360 --> 00:32:14,760
we also develop a full version which

804
00:32:14,760 --> 00:32:17,820
uses more valid looking values and parts

805
00:32:17,820 --> 00:32:20,159
of the original

806
00:32:20,159 --> 00:32:22,260
um briefcam ciphertext

807
00:32:22,260 --> 00:32:24,960
but the attack mechanism is essentially

808
00:32:24,960 --> 00:32:27,320
the same

809
00:32:28,440 --> 00:32:30,000
now our second attack is a small

810
00:32:30,000 --> 00:32:32,520
subgroup attack which is targeting the

811
00:32:32,520 --> 00:32:35,460
same goal as the first one

812
00:32:35,460 --> 00:32:37,679
but now we are exploiting the behavior

813
00:32:37,679 --> 00:32:42,000
of the RSA decryption function

814
00:32:42,000 --> 00:32:44,880
this is an excerpt from the code

815
00:32:44,880 --> 00:32:45,659
um

816
00:32:45,659 --> 00:32:47,399
and it does the following so you can see

817
00:32:47,399 --> 00:32:50,120
that there is a conditional statement

818
00:32:50,120 --> 00:32:52,440
depending on

819
00:32:52,440 --> 00:32:55,080
the value of the second byte of the

820
00:32:55,080 --> 00:32:56,520
plain text

821
00:32:56,520 --> 00:32:58,500
and this was in the code only explained

822
00:32:58,500 --> 00:33:00,720
as a legacy padding check

823
00:33:00,720 --> 00:33:04,200
now because this is followed by a length

824
00:33:04,200 --> 00:33:06,000
check on the plain text it essentially

825
00:33:06,000 --> 00:33:07,679
means that the error reveals whether the

826
00:33:07,679 --> 00:33:09,960
second byte of the plain text is zero

827
00:33:09,960 --> 00:33:12,299
and again this errors is sent to the

828
00:33:12,299 --> 00:33:14,340
server and is distinguishable from all

829
00:33:14,340 --> 00:33:16,860
of the other errors

830
00:33:16,860 --> 00:33:19,559
now the main idea is again to construct

831
00:33:19,559 --> 00:33:23,700
a modified encryption of the priv key

832
00:33:23,700 --> 00:33:28,500
but in this case D will contain the the

833
00:33:28,500 --> 00:33:30,120
Target plain text in the least

834
00:33:30,120 --> 00:33:31,919
significant position

835
00:33:31,919 --> 00:33:34,019
and P and Q will be such that the

836
00:33:34,019 --> 00:33:36,840
product P minus 1 times Q minus 1 will

837
00:33:36,840 --> 00:33:40,620
have a number of small prime factors RI

838
00:33:40,620 --> 00:33:42,539
in this case we also replace the RSA

839
00:33:42,539 --> 00:33:45,360
ciphertext with a value that will be of

840
00:33:45,360 --> 00:33:48,840
the form due to the X mod P Q

841
00:33:48,840 --> 00:33:51,419
where G has order RI in the

842
00:33:51,419 --> 00:33:53,399
multiplicative group of integers model

843
00:33:53,399 --> 00:33:56,399
PQ and there we know that there exists a

844
00:33:56,399 --> 00:33:57,899
value such that

845
00:33:57,899 --> 00:34:00,659
t such that teaches the team of PQ has

846
00:34:00,659 --> 00:34:03,059
second byte zero and this we can ensure

847
00:34:03,059 --> 00:34:06,059
in a precomputation stage

848
00:34:06,059 --> 00:34:09,179
then X will be our test value so that

849
00:34:09,179 --> 00:34:11,879
whenever we hit this particular error we

850
00:34:11,879 --> 00:34:14,219
will learn that x times D is congruent

851
00:34:14,219 --> 00:34:17,699
to T modulo RI and so we learn the value

852
00:34:17,699 --> 00:34:20,520
of B mode RI and then we can proceed the

853
00:34:20,520 --> 00:34:23,339
same as in the first attack

854
00:34:23,339 --> 00:34:25,800
this one requires more pre-computation

855
00:34:25,800 --> 00:34:28,440
as well as a larger number of logins but

856
00:34:28,440 --> 00:34:30,000
a smaller number of ECB encryption

857
00:34:30,000 --> 00:34:31,500
Oracle calls

858
00:34:31,500 --> 00:34:34,619
and we included mainly to demonstrate

859
00:34:34,619 --> 00:34:37,320
the fragility of the system because this

860
00:34:37,320 --> 00:34:39,119
attack uses a variety errors that are

861
00:34:39,119 --> 00:34:42,139
different from the first one

862
00:34:42,899 --> 00:34:44,580
now before

863
00:34:44,580 --> 00:34:46,500
um sorry

864
00:34:46,500 --> 00:34:49,320
so if we had used the previous attacks

865
00:34:49,320 --> 00:34:50,879
naively

866
00:34:50,879 --> 00:34:53,399
um to recover the entire private RSA key

867
00:34:53,399 --> 00:34:55,500
we would need to repeat them up to nine

868
00:34:55,500 --> 00:34:56,639
times

869
00:34:56,639 --> 00:34:59,580
so instead we recover only four blocks

870
00:34:59,580 --> 00:35:01,920
of Q

871
00:35:01,920 --> 00:35:03,900
then we run exhaustive search for the

872
00:35:03,900 --> 00:35:06,359
last 16 bits and this is because these

873
00:35:06,359 --> 00:35:08,580
length Fields push all of the values

874
00:35:08,580 --> 00:35:11,579
outside of block alignment

875
00:35:11,579 --> 00:35:14,040
and finally we can recover the remainder

876
00:35:14,040 --> 00:35:17,599
efficiently using lattice reduction

877
00:35:18,480 --> 00:35:20,640
so before I conclude

878
00:35:20,640 --> 00:35:22,020
um there is one more attack to mention

879
00:35:22,020 --> 00:35:23,820
in the spirit of attacks only getting

880
00:35:23,820 --> 00:35:26,119
better

881
00:35:26,280 --> 00:35:28,140
now after the previous attacks of

882
00:35:28,140 --> 00:35:30,540
Buccaneer holler and Pat Patterson Mega

883
00:35:30,540 --> 00:35:32,820
claimed and that they were not practical

884
00:35:32,820 --> 00:35:34,619
because of the number of login attempts

885
00:35:34,619 --> 00:35:37,079
they needed because surely nobody logs

886
00:35:37,079 --> 00:35:39,540
in that many times

887
00:35:39,540 --> 00:35:42,300
however we discovered that

888
00:35:42,300 --> 00:35:44,700
using this ECB encryption Oracle which

889
00:35:44,700 --> 00:35:46,440
was already present and when the first

890
00:35:46,440 --> 00:35:48,960
attacks were discovered this could be

891
00:35:48,960 --> 00:35:51,180
used to optimize one of these attacks on

892
00:35:51,180 --> 00:35:53,520
unpatched clients

893
00:35:53,520 --> 00:35:55,500
and the result of this is that the

894
00:35:55,500 --> 00:35:57,240
entire private araseeki could have been

895
00:35:57,240 --> 00:36:00,540
recovered using only two login attempts

896
00:36:00,540 --> 00:36:02,540
um which is a contrast to the original

897
00:36:02,540 --> 00:36:06,359
512 or the six of the optimized version

898
00:36:06,359 --> 00:36:09,980
of Ryan and Henninger

899
00:36:11,160 --> 00:36:14,160
in terms of disclosure we disclosed to

900
00:36:14,160 --> 00:36:16,200
them last September and we suggested

901
00:36:16,200 --> 00:36:18,240
mitigations which were largely similar

902
00:36:18,240 --> 00:36:19,500
to the ones that were originally

903
00:36:19,500 --> 00:36:20,820
suggested

904
00:36:20,820 --> 00:36:24,300
but this time they agreed and informed

905
00:36:24,300 --> 00:36:25,680
us that they were working on a larger

906
00:36:25,680 --> 00:36:27,420
redesign

907
00:36:27,420 --> 00:36:29,220
This was meant to change how private

908
00:36:29,220 --> 00:36:31,200
keys are stored so they are finally

909
00:36:31,200 --> 00:36:33,720
adding Integrity protection they have

910
00:36:33,720 --> 00:36:36,240
removed the ECB encryption Oracle and

911
00:36:36,240 --> 00:36:39,800
replaced the low-level library that was

912
00:36:39,800 --> 00:36:44,180
the source of our implicit bugs

913
00:36:44,280 --> 00:36:46,859
and this upgrade happened last month

914
00:36:46,859 --> 00:36:49,800
we have provided feedback on these

915
00:36:49,800 --> 00:36:51,540
changes but we have not reviewed them in

916
00:36:51,540 --> 00:36:52,560
detail

917
00:36:52,560 --> 00:36:56,420
and mega has also awarded a bug bounty

918
00:36:56,880 --> 00:36:59,280
now I have a couple of takeaway points

919
00:36:59,280 --> 00:37:01,200
to discuss

920
00:37:01,200 --> 00:37:04,200
so first as I said the root causes were

921
00:37:04,200 --> 00:37:06,780
already identified in previous work

922
00:37:06,780 --> 00:37:09,480
but it took multiple series of attacks

923
00:37:09,480 --> 00:37:12,660
for them to actually Implement some of

924
00:37:12,660 --> 00:37:16,619
the suggested mitigation mitigations

925
00:37:16,619 --> 00:37:18,900
the ECB encryption Oracle is interesting

926
00:37:18,900 --> 00:37:19,980
since

927
00:37:19,980 --> 00:37:21,660
um it comes from a completely

928
00:37:21,660 --> 00:37:23,579
independent feature of the protocol that

929
00:37:23,579 --> 00:37:26,099
was under attack and chose the fragility

930
00:37:26,099 --> 00:37:28,380
of the system

931
00:37:28,380 --> 00:37:30,720
finally our tags also serve as another

932
00:37:30,720 --> 00:37:33,300
example of key overwriting attacks which

933
00:37:33,300 --> 00:37:36,800
perhaps deserve more exploration

934
00:37:36,960 --> 00:37:39,839
and so it's clear that more crypto

935
00:37:39,839 --> 00:37:42,240
analysis of protocols in the wild is

936
00:37:42,240 --> 00:37:43,800
needed if we want to achieve the

937
00:37:43,800 --> 00:37:45,660
adoption of more secure and formally

938
00:37:45,660 --> 00:37:47,520
analyzed cryptographic Solutions in

939
00:37:47,520 --> 00:37:49,320
practice

940
00:37:49,320 --> 00:37:52,740
you can see more at the link and yeah

941
00:37:52,740 --> 00:37:55,759
thank you for your attention

942
00:38:03,119 --> 00:38:05,160
yeah that was great on time so you have

943
00:38:05,160 --> 00:38:07,140
time for questions come to the

944
00:38:07,140 --> 00:38:10,578
microphone if you have some

945
00:38:11,099 --> 00:38:14,160
maybe in the meantime from my side

946
00:38:14,160 --> 00:38:16,680
um you propose mitigations to Mega but

947
00:38:16,680 --> 00:38:18,740
were these mitigations

948
00:38:18,740 --> 00:38:21,060
Reinventing a new protocol downloading

949
00:38:21,060 --> 00:38:23,160
all the ciphertext decrypting updating

950
00:38:23,160 --> 00:38:26,099
and encrypting with a new protocol or

951
00:38:26,099 --> 00:38:29,160
did you have hope that some of the parts

952
00:38:29,160 --> 00:38:31,800
of the mega protocol are still were

953
00:38:31,800 --> 00:38:34,140
still useful

954
00:38:34,140 --> 00:38:36,420
so the original

955
00:38:36,420 --> 00:38:38,460
um paper actually had kind of three

956
00:38:38,460 --> 00:38:40,079
levels of different countermeasures

957
00:38:40,079 --> 00:38:43,380
starting from kind of the easiest to

958
00:38:43,380 --> 00:38:44,520
implement

959
00:38:44,520 --> 00:38:47,040
um but probably not formally provable

960
00:38:47,040 --> 00:38:50,220
down to like a more complex set of

961
00:38:50,220 --> 00:38:52,680
recommendations

962
00:38:52,680 --> 00:38:56,280
so but it's difficult to kind of fix the

963
00:38:56,280 --> 00:38:58,140
you know fix the plane while it's

964
00:38:58,140 --> 00:39:02,460
running so we did recognize that but um

965
00:39:02,460 --> 00:39:03,900
I think there were clearly parts that

966
00:39:03,900 --> 00:39:05,760
were salvageable if that's what you were

967
00:39:05,760 --> 00:39:07,200
asking

968
00:39:07,200 --> 00:39:08,640
okay

969
00:39:08,640 --> 00:39:10,740
me

970
00:39:10,740 --> 00:39:13,819
any other questions

971
00:39:15,540 --> 00:39:18,720
maybe a second question from me

972
00:39:18,720 --> 00:39:20,880
um how did you how did you look at the

973
00:39:20,880 --> 00:39:22,280
or how did you find these

974
00:39:22,280 --> 00:39:24,660
vulnerabilities did you look deeply into

975
00:39:24,660 --> 00:39:27,780
the code or what was your access to

976
00:39:27,780 --> 00:39:28,820
understand

977
00:39:28,820 --> 00:39:33,740
that these bugs that these oracles exist

978
00:39:34,410 --> 00:39:37,589
[Music]

979
00:39:40,619 --> 00:39:41,940
because there was all this previous work

980
00:39:41,940 --> 00:39:44,460
that explored parts of the code base and

981
00:39:44,460 --> 00:39:46,200
so now we specifically wanted to look at

982
00:39:46,200 --> 00:39:48,540
what the patches changed

983
00:39:48,540 --> 00:39:50,640
and then basically because we believe

984
00:39:50,640 --> 00:39:52,920
that those patches were not sufficient

985
00:39:52,920 --> 00:39:55,160
we looked for ways we could potentially

986
00:39:55,160 --> 00:39:56,880
exploit this and then during

987
00:39:56,880 --> 00:39:58,619
experimentation all of these bugs

988
00:39:58,619 --> 00:40:00,839
started to come up basically and all of

989
00:40:00,839 --> 00:40:02,460
that was open source so you could look

990
00:40:02,460 --> 00:40:03,900
into the code I see okay they have open

991
00:40:03,900 --> 00:40:06,480
source uh their client okay

992
00:40:06,480 --> 00:40:09,240
so thanks for the wonderful talk uh I'm

993
00:40:09,240 --> 00:40:11,640
wondering given the presence of an ECB

994
00:40:11,640 --> 00:40:14,820
Oracle uh and given that I presume by

995
00:40:14,820 --> 00:40:16,740
ECB you mean electronic code book a

996
00:40:16,740 --> 00:40:18,660
notoriously insecure mode of operation

997
00:40:18,660 --> 00:40:20,880
uh were you expecting to find anything

998
00:40:20,880 --> 00:40:23,460
like anything interesting relating to

999
00:40:23,460 --> 00:40:25,740
the fact that it was ECB or any

1000
00:40:25,740 --> 00:40:28,920
vulnerabilities that way and did it go

1001
00:40:28,920 --> 00:40:30,960
anywhere or would you like to see if it

1002
00:40:30,960 --> 00:40:33,560
goes anywhere

1003
00:40:34,619 --> 00:40:37,280
what you mean

1004
00:40:41,880 --> 00:40:43,680
yeah I mean yeah I mean mostly you just

1005
00:40:43,680 --> 00:40:47,160
did the fact that it was ECB alone lead

1006
00:40:47,160 --> 00:40:48,660
to any alarms already have to combine it

1007
00:40:48,660 --> 00:40:51,859
with other uh so it had to be

1008
00:40:55,140 --> 00:40:57,119
um you know use the ECB or use the

1009
00:40:57,119 --> 00:40:59,400
Oracle to get particular blocks and then

1010
00:40:59,400 --> 00:41:01,619
place them wherever we needed to in the

1011
00:41:01,619 --> 00:41:03,960
particular overwritten keys so yeah okay

1012
00:41:03,960 --> 00:41:05,940
that's it enabled the attack I see it

1013
00:41:05,940 --> 00:41:09,000
was not enough alrighty thank you

1014
00:41:09,000 --> 00:41:12,660
okay uh yeah let's uh thank Lenka again

1015
00:41:12,660 --> 00:41:16,460
and this is the end of the session

1016
00:41:22,140 --> 00:41:26,598
we now have a 30 minutes uh coffee break

1017
00:41:29,760 --> 00:41:31,880
thank you

