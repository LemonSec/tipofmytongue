1
00:00:03,280 --> 00:00:05,600
hi everybody my name is abita hawk and

2
00:00:05,600 --> 00:00:07,359
today i'd like to talk about our paper

3
00:00:07,359 --> 00:00:10,240
logarithmic size linkable threshold ring

4
00:00:10,240 --> 00:00:13,280
signatures in the plain model i bolded

5
00:00:13,280 --> 00:00:14,639
threshold in the title because that's

6
00:00:14,639 --> 00:00:16,560
what i want your main takeaway to be

7
00:00:16,560 --> 00:00:19,439
how we achieved the threshold

8
00:00:19,439 --> 00:00:22,960
part one background and contribution

9
00:00:22,960 --> 00:00:25,279
let's start by explaining what a ring

10
00:00:25,279 --> 00:00:26,560
signature is

11
00:00:26,560 --> 00:00:29,119
in the ring center setting a party wants

12
00:00:29,119 --> 00:00:30,960
to send out an authenticated message

13
00:00:30,960 --> 00:00:33,200
anonymously on behalf of a set the set

14
00:00:33,200 --> 00:00:35,200
is known as a ring

15
00:00:35,200 --> 00:00:37,760
anybody can join the ring so let's

16
00:00:37,760 --> 00:00:39,520
suppose we have these three characters

17
00:00:39,520 --> 00:00:41,840
alice bob and charlie

18
00:00:41,840 --> 00:00:44,079
alice is going to join by publishing her

19
00:00:44,079 --> 00:00:46,800
verification key vka and keep ska to

20
00:00:46,800 --> 00:00:49,840
herself and similarly bob and charlie

21
00:00:49,840 --> 00:00:50,640
can

22
00:00:50,640 --> 00:00:54,320
publish vkb and vkc and keep skb and skc

23
00:00:54,320 --> 00:00:56,879
to themselves respectively

24
00:00:56,879 --> 00:00:59,440
now this ring of verification keys is

25
00:00:59,440 --> 00:01:01,280
publicly known

26
00:01:01,280 --> 00:01:03,920
so at the time of signing a signer can

27
00:01:03,920 --> 00:01:05,360
pick their ring

28
00:01:05,360 --> 00:01:07,439
and they can sign a message

29
00:01:07,439 --> 00:01:08,640
and

30
00:01:08,640 --> 00:01:10,159
send it over

31
00:01:10,159 --> 00:01:13,360
now any verifier can check that it came

32
00:01:13,360 --> 00:01:15,680
from somebody within that ring but they

33
00:01:15,680 --> 00:01:17,759
can't tell exactly whom

34
00:01:17,759 --> 00:01:20,720
that leads us to our security properties

35
00:01:20,720 --> 00:01:23,280
a ring signature should be unforgiable

36
00:01:23,280 --> 00:01:24,479
meaning that you really do need to have

37
00:01:24,479 --> 00:01:26,400
a secret key within the ring

38
00:01:26,400 --> 00:01:28,400
to produce a signature

39
00:01:28,400 --> 00:01:30,000
and a ring signature should also be

40
00:01:30,000 --> 00:01:33,119
anonymous meaning that no external

41
00:01:33,119 --> 00:01:34,960
observer can tell from whom that

42
00:01:34,960 --> 00:01:36,560
signature came

43
00:01:36,560 --> 00:01:38,720
and notice that

44
00:01:38,720 --> 00:01:40,400
with an external observer that can be

45
00:01:40,400 --> 00:01:42,560
anybody that's not in the ring and as

46
00:01:42,560 --> 00:01:45,439
well it could be non-signers in the ring

47
00:01:45,439 --> 00:01:48,000
so except for process of elimination

48
00:01:48,000 --> 00:01:50,320
where they know that it's not them they

49
00:01:50,320 --> 00:01:55,559
can't tell which signer it was

50
00:01:55,759 --> 00:01:58,640
now in some cases we don't just want a

51
00:01:58,640 --> 00:02:00,799
one out of n ring signature but we want

52
00:02:00,799 --> 00:02:04,159
a threshold t out of n ring signature or

53
00:02:04,159 --> 00:02:06,399
thring signature

54
00:02:06,399 --> 00:02:08,479
one way to do this is by having parties

55
00:02:08,479 --> 00:02:10,959
interact so let's say alice and bob want

56
00:02:10,959 --> 00:02:13,120
to sign a two out of three

57
00:02:13,120 --> 00:02:14,720
string signature

58
00:02:14,720 --> 00:02:17,040
well they both know their secret keys

59
00:02:17,040 --> 00:02:19,840
ska and skb and they can use them and

60
00:02:19,840 --> 00:02:21,280
interact with each other to produce a

61
00:02:21,280 --> 00:02:24,160
signature where a verifier believes that

62
00:02:24,160 --> 00:02:26,480
at least two people must have signed

63
00:02:26,480 --> 00:02:27,840
now any

64
00:02:27,840 --> 00:02:29,599
party external to the ring cannot tell

65
00:02:29,599 --> 00:02:30,720
which two

66
00:02:30,720 --> 00:02:33,760
people it was it could be bob and

67
00:02:33,760 --> 00:02:35,920
charlie or charlie and alice they don't

68
00:02:35,920 --> 00:02:37,200
know

69
00:02:37,200 --> 00:02:39,280
and charlie of course does know because

70
00:02:39,280 --> 00:02:40,879
he knows it wasn't him

71
00:02:40,879 --> 00:02:42,879
but in a bigger ring wouldn't be able to

72
00:02:42,879 --> 00:02:46,080
tell which members it was

73
00:02:46,080 --> 00:02:47,840
so that's the first way to get threshold

74
00:02:47,840 --> 00:02:50,000
ring signatures interaction between

75
00:02:50,000 --> 00:02:51,360
parties

76
00:02:51,360 --> 00:02:52,080
now

77
00:02:52,080 --> 00:02:54,239
even though external observers cannot

78
00:02:54,239 --> 00:02:56,319
tell which parties signed

79
00:02:56,319 --> 00:02:58,400
at least the signers do have to know

80
00:02:58,400 --> 00:03:00,000
each other's identities

81
00:03:00,000 --> 00:03:02,720
somehow alice had to find bob

82
00:03:02,720 --> 00:03:03,680
and

83
00:03:03,680 --> 00:03:05,280
let him know that there was this message

84
00:03:05,280 --> 00:03:07,840
she wanted to sign and he had to agree

85
00:03:07,840 --> 00:03:10,480
to work on it with him

86
00:03:10,480 --> 00:03:13,920
in some cases like voting or a petition

87
00:03:13,920 --> 00:03:16,000
where the message is sensitive

88
00:03:16,000 --> 00:03:18,319
signers might not want to have to seek

89
00:03:18,319 --> 00:03:19,040
out

90
00:03:19,040 --> 00:03:21,599
other people to join their message

91
00:03:21,599 --> 00:03:24,159
maybe they should be able to just sign a

92
00:03:24,159 --> 00:03:26,720
message by themselves and then other

93
00:03:26,720 --> 00:03:28,959
people can add themselves as they go and

94
00:03:28,959 --> 00:03:31,200
we can remove the interaction

95
00:03:31,200 --> 00:03:33,280
that's this concept of intersigner

96
00:03:33,280 --> 00:03:36,799
anonymous string signatures

97
00:03:36,799 --> 00:03:37,840
so

98
00:03:37,840 --> 00:03:38,879
this is

99
00:03:38,879 --> 00:03:41,599
the way that we got thresholdization in

100
00:03:41,599 --> 00:03:44,799
our paper with intersiner anonymity and

101
00:03:44,799 --> 00:03:47,040
we did it by forcing our ring signature

102
00:03:47,040 --> 00:03:51,519
to have a deterministic part to it

103
00:03:51,519 --> 00:03:53,599
with that deterministic part

104
00:03:53,599 --> 00:03:55,680
signers could just sign by themselves

105
00:03:55,680 --> 00:03:57,760
and a verifier could check to see if

106
00:03:57,760 --> 00:04:00,400
they came from different people without

107
00:04:00,400 --> 00:04:02,480
revealing their identities

108
00:04:02,480 --> 00:04:03,840
so you start with this deterministic

109
00:04:03,840 --> 00:04:04,720
part

110
00:04:04,720 --> 00:04:07,120
and then a verifier given two signatures

111
00:04:07,120 --> 00:04:09,439
just checks if that part is equal

112
00:04:09,439 --> 00:04:10,959
for example

113
00:04:10,959 --> 00:04:13,280
let's say that a verifier sees a list of

114
00:04:13,280 --> 00:04:15,040
five signatures

115
00:04:15,040 --> 00:04:17,918
then he can parse any two of them

116
00:04:17,918 --> 00:04:20,639
and he can check the determinant part

117
00:04:20,639 --> 00:04:21,839
and see

118
00:04:21,839 --> 00:04:24,000
if that part is different or if it is

119
00:04:24,000 --> 00:04:26,080
the same and he can conclude then that

120
00:04:26,080 --> 00:04:28,320
it came from different or the same

121
00:04:28,320 --> 00:04:29,759
signer

122
00:04:29,759 --> 00:04:30,880
now

123
00:04:30,880 --> 00:04:32,960
one thing to note is that we limited

124
00:04:32,960 --> 00:04:33,840
this

125
00:04:33,840 --> 00:04:36,000
so that the signatures have to be on the

126
00:04:36,000 --> 00:04:38,720
same message and ring

127
00:04:38,720 --> 00:04:40,720
this makes it a little bit different

128
00:04:40,720 --> 00:04:42,960
from linkable ring signatures which some

129
00:04:42,960 --> 00:04:44,639
people in the audience might be familiar

130
00:04:44,639 --> 00:04:45,520
with

131
00:04:45,520 --> 00:04:48,240
where if you sign once a linkable ring

132
00:04:48,240 --> 00:04:50,800
signature once you're linked forever and

133
00:04:50,800 --> 00:04:52,479
you

134
00:04:52,479 --> 00:04:55,440
can and a verifier can always check if a

135
00:04:55,440 --> 00:04:57,600
signature came from the same person

136
00:04:57,600 --> 00:04:59,600
so in some sense

137
00:04:59,600 --> 00:05:01,360
what we've done is more fine-grained

138
00:05:01,360 --> 00:05:03,120
than linkability in fact we can add

139
00:05:03,120 --> 00:05:05,360
linkability to our

140
00:05:05,360 --> 00:05:08,240
base construction easily and

141
00:05:08,240 --> 00:05:10,880
figure out what scope we want signers to

142
00:05:10,880 --> 00:05:14,159
be linked on

143
00:05:15,120 --> 00:05:16,800
so now that we understand ring

144
00:05:16,800 --> 00:05:18,240
signatures let's talk about their

145
00:05:18,240 --> 00:05:20,720
security properties in a bit more depth

146
00:05:20,720 --> 00:05:22,479
the adversary is going to ask the

147
00:05:22,479 --> 00:05:24,800
challenger pretend that's me a lot of

148
00:05:24,800 --> 00:05:27,280
different kinds of queries

149
00:05:27,280 --> 00:05:28,720
after seeing

150
00:05:28,720 --> 00:05:30,800
all this kind of information he's either

151
00:05:30,800 --> 00:05:32,800
going to produce a new signature

152
00:05:32,800 --> 00:05:35,680
which thus trying to produce a forgery

153
00:05:35,680 --> 00:05:38,479
or he will ask for

154
00:05:38,479 --> 00:05:41,039
two honest signers and

155
00:05:41,039 --> 00:05:43,360
the challenger me will flip a bit and

156
00:05:43,360 --> 00:05:45,759
send him back a signature on one of them

157
00:05:45,759 --> 00:05:47,919
and he has to guess which one it is if

158
00:05:47,919 --> 00:05:50,800
he can he breaks anonymity

159
00:05:50,800 --> 00:05:53,039
now in either case the adversary is

160
00:05:53,039 --> 00:05:55,680
going to have similar kinds of

161
00:05:55,680 --> 00:05:58,319
oracle queries that he can make to me

162
00:05:58,319 --> 00:06:00,880
and those kinds of oracle queries should

163
00:06:00,880 --> 00:06:03,280
mimic the real world behavior that ring

164
00:06:03,280 --> 00:06:06,000
signatures have

165
00:06:06,000 --> 00:06:08,160
one thing i want to point out is that

166
00:06:08,160 --> 00:06:10,160
because ring signatures are an open

167
00:06:10,160 --> 00:06:11,919
setting remember everybody could just

168
00:06:11,919 --> 00:06:13,360
produce their verification key

169
00:06:13,360 --> 00:06:15,120
themselves and just publish it the

170
00:06:15,120 --> 00:06:17,919
adversary could even be a participant

171
00:06:17,919 --> 00:06:20,639
in the ring and

172
00:06:20,639 --> 00:06:22,800
that's why it's important to be careful

173
00:06:22,800 --> 00:06:25,759
about how we capture the kinds of real

174
00:06:25,759 --> 00:06:27,600
world actions we think an adversary can

175
00:06:27,600 --> 00:06:29,520
take

176
00:06:29,520 --> 00:06:31,520
so the four different kinds of queries

177
00:06:31,520 --> 00:06:33,600
are these oracles that we've defined to

178
00:06:33,600 --> 00:06:36,400
have a truly active adversary the first

179
00:06:36,400 --> 00:06:39,360
one is osin so here the adversary is

180
00:06:39,360 --> 00:06:40,639
going to ask

181
00:06:40,639 --> 00:06:43,280
for signatures on honestly generated

182
00:06:43,280 --> 00:06:45,199
keys

183
00:06:45,199 --> 00:06:48,880
for ok gen the adversary can ask for new

184
00:06:48,880 --> 00:06:52,319
keys to be added to the ring honestly

185
00:06:52,319 --> 00:06:54,880
o corrupt means he asks on an honestly

186
00:06:54,880 --> 00:06:56,720
generated key for the secret key

187
00:06:56,720 --> 00:06:58,400
associated to it

188
00:06:58,400 --> 00:06:59,680
and finally

189
00:06:59,680 --> 00:07:01,440
the most important one for us is a

190
00:07:01,440 --> 00:07:03,280
register or o-reg

191
00:07:03,280 --> 00:07:04,800
where the adversary actually will

192
00:07:04,800 --> 00:07:08,000
produce his own key by himself and send

193
00:07:08,000 --> 00:07:10,240
it out

194
00:07:10,240 --> 00:07:12,080
this is important

195
00:07:12,080 --> 00:07:12,800
to

196
00:07:12,800 --> 00:07:14,960
the open setting of ring signatures and

197
00:07:14,960 --> 00:07:16,560
it captures the fact that the adversary

198
00:07:16,560 --> 00:07:20,000
can actually maliciously produce a

199
00:07:20,000 --> 00:07:21,199
public

200
00:07:21,199 --> 00:07:23,360
key

201
00:07:23,360 --> 00:07:24,880
now that we have talked about ring

202
00:07:24,880 --> 00:07:26,479
signatures and their security properties

203
00:07:26,479 --> 00:07:28,000
in general we can talk about our

204
00:07:28,000 --> 00:07:30,400
specific construction and proofs

205
00:07:30,400 --> 00:07:32,000
we'll start with the building blocks

206
00:07:32,000 --> 00:07:33,759
there are four building blocks for our

207
00:07:33,759 --> 00:07:35,120
construction

208
00:07:35,120 --> 00:07:36,880
the first one is somewhere perfectly

209
00:07:36,880 --> 00:07:39,680
binding hashing or spb

210
00:07:39,680 --> 00:07:42,960
two public key encryption or pke

211
00:07:42,960 --> 00:07:46,400
three verifiable random function or vrf

212
00:07:46,400 --> 00:07:48,639
and four non-interactive witness

213
00:07:48,639 --> 00:07:51,599
indistinguishable proof or newy

214
00:07:51,599 --> 00:07:56,400
i point out here that spb pke and niwi

215
00:07:56,400 --> 00:07:59,199
come from a template of a ring signature

216
00:07:59,199 --> 00:08:01,759
scheme that we followed from bacchus at

217
00:08:01,759 --> 00:08:05,120
all from eurocrypt 19. our novelty is

218
00:08:05,120 --> 00:08:07,199
the use of the vrf to get that threshold

219
00:08:07,199 --> 00:08:09,840
with intersiner anonymity and led to us

220
00:08:09,840 --> 00:08:13,840
having to use different proof techniques

221
00:08:14,639 --> 00:08:16,639
let's explain each building block i'll

222
00:08:16,639 --> 00:08:18,800
start with verifiable random function

223
00:08:18,800 --> 00:08:21,039
a verifiable random function is like a

224
00:08:21,039 --> 00:08:22,879
pseudorandom function but you can

225
00:08:22,879 --> 00:08:25,440
generate a proof what do i mean by that

226
00:08:25,440 --> 00:08:28,160
well a pseudorandom function produces an

227
00:08:28,160 --> 00:08:30,240
output that's pseudorandom

228
00:08:30,240 --> 00:08:32,559
per the name which means that nobody can

229
00:08:32,559 --> 00:08:35,200
tell whether that output is truly random

230
00:08:35,200 --> 00:08:39,279
or it really came from this prf

231
00:08:39,279 --> 00:08:41,760
a vrf has the same thing

232
00:08:41,760 --> 00:08:44,320
but there's an additional proof that the

233
00:08:44,320 --> 00:08:47,279
owner of the secret key can use to prove

234
00:08:47,279 --> 00:08:48,480
that that

235
00:08:48,480 --> 00:08:51,600
value really did come from the vrf

236
00:08:51,600 --> 00:08:55,200
like aprf there's a secret key

237
00:08:55,200 --> 00:08:58,000
but there's also now a public

238
00:08:58,000 --> 00:09:00,399
verification key that anyone can use

239
00:09:00,399 --> 00:09:02,399
with the value and proof to believe that

240
00:09:02,399 --> 00:09:05,360
it really did come from that vrf

241
00:09:05,360 --> 00:09:06,640
this is

242
00:09:06,640 --> 00:09:09,040
a little abstract

243
00:09:09,040 --> 00:09:10,320
the

244
00:09:10,320 --> 00:09:13,440
point i want to get across here is that

245
00:09:13,440 --> 00:09:16,959
there is public verifiability of a

246
00:09:16,959 --> 00:09:19,519
function that produces random looking

247
00:09:19,519 --> 00:09:22,480
outputs

248
00:09:22,480 --> 00:09:24,720
the next building block i want to talk

249
00:09:24,720 --> 00:09:28,480
about is public key encryption

250
00:09:28,480 --> 00:09:30,000
i think most people in the audience are

251
00:09:30,000 --> 00:09:31,200
actually familiar with public key

252
00:09:31,200 --> 00:09:33,920
encryption but there is one property

253
00:09:33,920 --> 00:09:36,800
that i want to point out if

254
00:09:36,800 --> 00:09:39,360
there are multiple public keys and

255
00:09:39,360 --> 00:09:40,640
there's a cipher text that has been

256
00:09:40,640 --> 00:09:43,760
encrypted on one of them

257
00:09:43,760 --> 00:09:46,720
people cannot tell

258
00:09:46,720 --> 00:09:48,880
whose public key was used to create that

259
00:09:48,880 --> 00:09:51,680
cipher text i have here alice and

260
00:09:51,680 --> 00:09:54,399
ciphertext comes from her public key pka

261
00:09:54,399 --> 00:09:56,720
and bob cipher text coming from his

262
00:09:56,720 --> 00:10:00,320
public key pkb even with a known input

263
00:10:00,320 --> 00:10:01,760
nobody can tell whether it came from

264
00:10:01,760 --> 00:10:04,000
alice or from bob except for they

265
00:10:04,000 --> 00:10:06,720
themselves who know their secret key

266
00:10:06,720 --> 00:10:10,800
this is a property known as key privacy

267
00:10:11,120 --> 00:10:13,360
the next building block is somewhere

268
00:10:13,360 --> 00:10:15,680
perfectly binding hashing which really

269
00:10:15,680 --> 00:10:17,440
just looks like a merkle tree

270
00:10:17,440 --> 00:10:18,959
you take the

271
00:10:18,959 --> 00:10:21,279
ring which is known and you can write it

272
00:10:21,279 --> 00:10:22,399
as a

273
00:10:22,399 --> 00:10:25,920
vector and then hash it up

274
00:10:25,920 --> 00:10:27,760
as if you were in a tree until you get

275
00:10:27,760 --> 00:10:28,880
to the root

276
00:10:28,880 --> 00:10:30,560
and there's the hash value and the

277
00:10:30,560 --> 00:10:32,800
hashing key that goes along with it

278
00:10:32,800 --> 00:10:34,480
the difference between summer perfectly

279
00:10:34,480 --> 00:10:36,640
binding hashing and a merkle tree is we

280
00:10:36,640 --> 00:10:38,399
do have this property where

281
00:10:38,399 --> 00:10:39,440
at

282
00:10:39,440 --> 00:10:42,000
one index it really has to be that case

283
00:10:42,000 --> 00:10:45,040
that we are bound to whatever that value

284
00:10:45,040 --> 00:10:46,800
is that's where that name somewhere

285
00:10:46,800 --> 00:10:50,079
perfectly binding comes from

286
00:10:50,079 --> 00:10:51,680
the last building block i want to

287
00:10:51,680 --> 00:10:53,680
explain is the non-interactive witness

288
00:10:53,680 --> 00:10:55,279
indistinguishable proof so the

289
00:10:55,279 --> 00:10:57,440
non-interactive part means that our

290
00:10:57,440 --> 00:10:59,360
prover alice can just

291
00:10:59,360 --> 00:11:02,320
pick her witness and statement and she

292
00:11:02,320 --> 00:11:03,839
can send out a proof in a single shot

293
00:11:03,839 --> 00:11:05,279
without having to interact with any

294
00:11:05,279 --> 00:11:07,600
verifier

295
00:11:07,600 --> 00:11:10,000
the witness indistinguishable part means

296
00:11:10,000 --> 00:11:12,560
that even if there are multiple

297
00:11:12,560 --> 00:11:14,959
witnesses for which the relationship

298
00:11:14,959 --> 00:11:16,560
with the statement holds

299
00:11:16,560 --> 00:11:19,200
that the verifier cannot figure out

300
00:11:19,200 --> 00:11:21,279
which witness it was that the approver

301
00:11:21,279 --> 00:11:23,360
used even if they know what the

302
00:11:23,360 --> 00:11:25,440
witnesses are

303
00:11:25,440 --> 00:11:26,880
one final thing

304
00:11:26,880 --> 00:11:28,560
the newest that we're concerned with

305
00:11:28,560 --> 00:11:30,720
have perfect soundness which means you

306
00:11:30,720 --> 00:11:34,320
can't prove a false statement

307
00:11:34,320 --> 00:11:35,360
i think

308
00:11:35,360 --> 00:11:37,839
we are now ready to start talking about

309
00:11:37,839 --> 00:11:39,200
the construction

310
00:11:39,200 --> 00:11:41,920
remember that a signature construction

311
00:11:41,920 --> 00:11:42,880
has

312
00:11:42,880 --> 00:11:46,320
three algorithms key generation sign and

313
00:11:46,320 --> 00:11:48,959
verify we have not put them together yet

314
00:11:48,959 --> 00:11:51,360
we only have building blocks but now

315
00:11:51,360 --> 00:11:53,040
we're ready and we'll start with key

316
00:11:53,040 --> 00:11:54,639
generation and i'll start explaining

317
00:11:54,639 --> 00:11:57,760
what sine looks like

318
00:11:57,760 --> 00:12:01,920
the key generation uses the pke and vrf

319
00:12:01,920 --> 00:12:03,200
the

320
00:12:03,200 --> 00:12:06,240
secret key is the secret key of the vrf

321
00:12:06,240 --> 00:12:08,399
and the verification key

322
00:12:08,399 --> 00:12:11,040
is the verification key of the vrf and

323
00:12:11,040 --> 00:12:14,880
the public key of the pke

324
00:12:14,880 --> 00:12:15,680
so

325
00:12:15,680 --> 00:12:17,440
remember anyone can join the ring so

326
00:12:17,440 --> 00:12:18,959
they can create these values on their

327
00:12:18,959 --> 00:12:21,920
own and just publish that vk

328
00:12:21,920 --> 00:12:23,200
then

329
00:12:23,200 --> 00:12:24,800
at the time of signing

330
00:12:24,800 --> 00:12:27,920
the signer will start by doing this

331
00:12:27,920 --> 00:12:31,279
they will use their secret key to

332
00:12:31,279 --> 00:12:33,920
evaluate the vrf on

333
00:12:33,920 --> 00:12:35,200
their message

334
00:12:35,200 --> 00:12:37,839
this is a little bit simplified but they

335
00:12:37,839 --> 00:12:40,560
get a value and a proof

336
00:12:40,560 --> 00:12:42,800
then they'll use the verification key

337
00:12:42,800 --> 00:12:43,920
and

338
00:12:43,920 --> 00:12:45,040
they will

339
00:12:45,040 --> 00:12:48,320
encrypt the proof of the vrf

340
00:12:48,320 --> 00:12:52,519
inside the ciphertext

341
00:12:52,800 --> 00:12:53,680
and

342
00:12:53,680 --> 00:12:56,639
because the value is pseudorandom and

343
00:12:56,639 --> 00:12:59,120
the ciphertext hides which key it is

344
00:12:59,120 --> 00:13:01,200
nobody can tell which keys were used to

345
00:13:01,200 --> 00:13:02,880
create these two values

346
00:13:02,880 --> 00:13:05,040
we're getting started with a signature

347
00:13:05,040 --> 00:13:08,160
let's let's continue

348
00:13:08,240 --> 00:13:10,320
now you can't just use any old

349
00:13:10,320 --> 00:13:12,079
verification key you do have to prove

350
00:13:12,079 --> 00:13:15,200
membership in the ring so the niwi is a

351
00:13:15,200 --> 00:13:16,560
new proof

352
00:13:16,560 --> 00:13:18,079
that

353
00:13:18,079 --> 00:13:20,320
the ciphertext encrypts a valid vrf

354
00:13:20,320 --> 00:13:22,639
proof under some verification key in the

355
00:13:22,639 --> 00:13:24,480
ring and the proof

356
00:13:24,480 --> 00:13:28,079
verifies for that value under the vk

357
00:13:28,079 --> 00:13:30,320
and then finally

358
00:13:30,320 --> 00:13:32,880
we need to show that there exists an spb

359
00:13:32,880 --> 00:13:34,480
opening showing that that vk is

360
00:13:34,480 --> 00:13:36,959
consistent with h and h k

361
00:13:36,959 --> 00:13:39,120
so our signature so far it looks like

362
00:13:39,120 --> 00:13:40,320
this v

363
00:13:40,320 --> 00:13:43,680
c t h and h k

364
00:13:43,680 --> 00:13:44,880
none of this

365
00:13:44,880 --> 00:13:47,440
reveals the signer and it

366
00:13:47,440 --> 00:13:49,600
and the membership proof

367
00:13:49,600 --> 00:13:52,160
with the spb opening shows that that

368
00:13:52,160 --> 00:13:54,720
verification key must be in the ring

369
00:13:54,720 --> 00:13:56,959
so we're almost there but this is not

370
00:13:56,959 --> 00:13:59,040
quite enough

371
00:13:59,040 --> 00:14:00,480
now

372
00:14:00,480 --> 00:14:03,839
if i just gave you v c t h and h k

373
00:14:03,839 --> 00:14:05,680
and gave you a proof that everything was

374
00:14:05,680 --> 00:14:07,040
consistent

375
00:14:07,040 --> 00:14:07,839
this

376
00:14:07,839 --> 00:14:10,240
seems like it should work out

377
00:14:10,240 --> 00:14:12,399
but we need something more for our proof

378
00:14:12,399 --> 00:14:14,800
of anonymity we need to be able to swap

379
00:14:14,800 --> 00:14:17,440
between the witnesses so there's one

380
00:14:17,440 --> 00:14:20,560
more thing that we need to add

381
00:14:20,560 --> 00:14:22,880
i told you before that the spb binds the

382
00:14:22,880 --> 00:14:25,360
signer to their index they have to prove

383
00:14:25,360 --> 00:14:27,839
that h and h k are consistent as part of

384
00:14:27,839 --> 00:14:28,880
the new e

385
00:14:28,880 --> 00:14:30,720
instead of just doing this once the

386
00:14:30,720 --> 00:14:32,880
signer can do it twice and bind

387
00:14:32,880 --> 00:14:35,440
themselves to another index that is not

388
00:14:35,440 --> 00:14:36,560
his own

389
00:14:36,560 --> 00:14:40,160
so that gives you h prime and h k prime

390
00:14:40,160 --> 00:14:41,760
then

391
00:14:41,760 --> 00:14:43,360
instead of having a newbie proof that

392
00:14:43,360 --> 00:14:45,920
just does everything i told you with all

393
00:14:45,920 --> 00:14:48,240
these values being consistent the signer

394
00:14:48,240 --> 00:14:49,360
could

395
00:14:49,360 --> 00:14:51,199
create the same proof but for another

396
00:14:51,199 --> 00:14:52,160
index

397
00:14:52,160 --> 00:14:53,680
at j

398
00:14:53,680 --> 00:14:55,519
well he can't actually do this if he

399
00:14:55,519 --> 00:14:58,480
doesn't know the secret key for j so

400
00:14:58,480 --> 00:15:00,880
it won't be true so what's actually

401
00:15:00,880 --> 00:15:02,320
going to happen is the new is going to

402
00:15:02,320 --> 00:15:05,199
be an or proof where either everything

403
00:15:05,199 --> 00:15:08,000
is true for some index i or it's true

404
00:15:08,000 --> 00:15:10,639
for index j

405
00:15:10,639 --> 00:15:12,639
so the entire signature ends up looking

406
00:15:12,639 --> 00:15:16,639
like v c t h h k and then v prime c t

407
00:15:16,639 --> 00:15:19,279
prime h prime h k prime where the proof

408
00:15:19,279 --> 00:15:20,160
pi

409
00:15:20,160 --> 00:15:22,240
says that either the first set of values

410
00:15:22,240 --> 00:15:24,720
is true and consistent or the second set

411
00:15:24,720 --> 00:15:27,199
of values is true and consistent and

412
00:15:27,199 --> 00:15:28,720
only one of those branches has to be

413
00:15:28,720 --> 00:15:31,839
true in an or proof

414
00:15:32,800 --> 00:15:34,480
so the knee reproof is actually this

415
00:15:34,480 --> 00:15:36,639
relationship r

416
00:15:36,639 --> 00:15:41,839
uh with v k i and r with v k j

417
00:15:42,880 --> 00:15:45,279
the reason that we did this is we needed

418
00:15:45,279 --> 00:15:47,120
to be able to do the anonymity proof

419
00:15:47,120 --> 00:15:49,279
where we swap between signers so

420
00:15:49,279 --> 00:15:51,040
remember the adversary is going to

421
00:15:51,040 --> 00:15:52,639
request

422
00:15:52,639 --> 00:15:54,800
a signature on one of two signers he'll

423
00:15:54,800 --> 00:15:57,759
pick index i and index j he'll get back

424
00:15:57,759 --> 00:15:59,440
a signature on one of those signers and

425
00:15:59,440 --> 00:16:02,079
he has to decide from whom it came

426
00:16:02,079 --> 00:16:04,160
in the proof of anonymity we show that

427
00:16:04,160 --> 00:16:06,480
we can swap between an honest signature

428
00:16:06,480 --> 00:16:08,720
for sign or i and an honest signature

429
00:16:08,720 --> 00:16:10,800
for sine or j indistinguishably thus

430
00:16:10,800 --> 00:16:12,399
proving anonymity

431
00:16:12,399 --> 00:16:15,199
and the way that these swaps are done

432
00:16:15,199 --> 00:16:17,600
are going to be via hybrid

433
00:16:17,600 --> 00:16:18,399
so

434
00:16:18,399 --> 00:16:19,680
at the beginning with an honest

435
00:16:19,680 --> 00:16:23,440
signature from signer i v i h i h k i

436
00:16:23,440 --> 00:16:25,680
and c t i those are all true whereas

437
00:16:25,680 --> 00:16:27,120
everything from

438
00:16:27,120 --> 00:16:29,519
j is false and on assigner would just

439
00:16:29,519 --> 00:16:32,639
use random values there

440
00:16:32,639 --> 00:16:35,279
then slowly with hybrid changes we start

441
00:16:35,279 --> 00:16:37,279
making everything true

442
00:16:37,279 --> 00:16:39,680
but we get to this point where

443
00:16:39,680 --> 00:16:41,279
v j

444
00:16:41,279 --> 00:16:44,560
the v rf associated with sine or j is

445
00:16:44,560 --> 00:16:47,120
still false and something is going to

446
00:16:47,120 --> 00:16:48,000
happen

447
00:16:48,000 --> 00:16:49,440
that makes it so that we can't make it

448
00:16:49,440 --> 00:16:51,839
true

449
00:16:52,639 --> 00:16:55,759
if both of those branches are true then

450
00:16:55,759 --> 00:16:57,040
it's actually

451
00:16:57,040 --> 00:16:59,040
possible for an adversary to distinguish

452
00:16:59,040 --> 00:17:00,079
that

453
00:17:00,079 --> 00:17:03,040
type of signature from the previous

454
00:17:03,040 --> 00:17:06,480
hybrid and the reason for that is if

455
00:17:06,480 --> 00:17:09,119
both of these branches for vki and vkj

456
00:17:09,119 --> 00:17:10,720
are true then that means both of these

457
00:17:10,720 --> 00:17:13,919
vrf values really did come from the vrf

458
00:17:13,919 --> 00:17:15,919
which means they're deterministic and

459
00:17:15,919 --> 00:17:18,400
they're constantly put together in this

460
00:17:18,400 --> 00:17:19,839
way

461
00:17:19,839 --> 00:17:21,919
an adversary could for example just

462
00:17:21,919 --> 00:17:23,839
request signatures on all signers and

463
00:17:23,839 --> 00:17:24,559
see

464
00:17:24,559 --> 00:17:25,520
that

465
00:17:25,520 --> 00:17:26,480
these

466
00:17:26,480 --> 00:17:29,039
signers i and jay were always somehow

467
00:17:29,039 --> 00:17:30,880
together and

468
00:17:30,880 --> 00:17:33,200
that would not be

469
00:17:33,200 --> 00:17:36,559
indistinguishable from a real signature

470
00:17:36,559 --> 00:17:40,080
so we have come to a problem

471
00:17:40,080 --> 00:17:41,919
those hybrid changes

472
00:17:41,919 --> 00:17:44,880
are not going to work for us

473
00:17:44,880 --> 00:17:47,520
the other thing you could do maybe

474
00:17:47,520 --> 00:17:51,039
is could you make both branches false

475
00:17:51,039 --> 00:17:54,080
and make sure that vi and vj are both

476
00:17:54,080 --> 00:17:55,840
just random values

477
00:17:55,840 --> 00:17:56,720
well

478
00:17:56,720 --> 00:17:59,360
not really because the knee we has

479
00:17:59,360 --> 00:18:02,160
soundness and so if both branches are

480
00:18:02,160 --> 00:18:04,320
false then the knee we overall will be

481
00:18:04,320 --> 00:18:08,480
false so we need some way of making both

482
00:18:08,480 --> 00:18:11,679
branches for vki and vkj false while

483
00:18:11,679 --> 00:18:14,799
still making this overall new true

484
00:18:14,799 --> 00:18:17,840
we are going to do that by adding

485
00:18:17,840 --> 00:18:22,480
one more or into our new

486
00:18:23,760 --> 00:18:26,240
to make it so that the branch for signer

487
00:18:26,240 --> 00:18:28,480
i and for or j can be false at the same

488
00:18:28,480 --> 00:18:32,320
time we're going to add one more branch

489
00:18:32,320 --> 00:18:35,280
f is a one-way function

490
00:18:35,280 --> 00:18:36,640
and the relationship we're going to

491
00:18:36,640 --> 00:18:39,840
ensure is rf which is f of ski is equal

492
00:18:39,840 --> 00:18:41,280
to skj

493
00:18:41,280 --> 00:18:43,360
so our niwi is going to be

494
00:18:43,360 --> 00:18:47,600
rvki or rf or rvkj

495
00:18:47,600 --> 00:18:50,400
let's look at the hybrids

496
00:18:50,400 --> 00:18:52,400
in the original

497
00:18:52,400 --> 00:18:55,039
signature we want to pick signer i and

498
00:18:55,039 --> 00:18:57,039
so the branch for signer i is true while

499
00:18:57,039 --> 00:18:59,039
the remaining two branches for cyan or j

500
00:18:59,039 --> 00:19:00,720
and rf are false

501
00:19:00,720 --> 00:19:03,919
overall the neewee will be true

502
00:19:03,919 --> 00:19:05,840
then

503
00:19:05,840 --> 00:19:08,400
at the end we want sine or j's branch to

504
00:19:08,400 --> 00:19:10,400
be true while the other two branches are

505
00:19:10,400 --> 00:19:12,720
false

506
00:19:12,960 --> 00:19:14,960
we want to hop from real signatures from

507
00:19:14,960 --> 00:19:16,799
sine or i to real signatures from sine

508
00:19:16,799 --> 00:19:19,840
or j using the relationship f of ski is

509
00:19:19,840 --> 00:19:23,039
equal to skj

510
00:19:23,280 --> 00:19:25,200
we'll make two changes

511
00:19:25,200 --> 00:19:27,760
we can make the relationship rf

512
00:19:27,760 --> 00:19:28,640
true

513
00:19:28,640 --> 00:19:30,799
and then we can make the relationship

514
00:19:30,799 --> 00:19:34,000
for our vki be false

515
00:19:34,000 --> 00:19:37,840
overall the new we will still be true

516
00:19:37,840 --> 00:19:40,160
then moving forward

517
00:19:40,160 --> 00:19:41,679
we can make

518
00:19:41,679 --> 00:19:46,640
the relationship for vkj be true as well

519
00:19:46,640 --> 00:19:48,720
and then in the final step we'll make

520
00:19:48,720 --> 00:19:51,600
the relationship for rf false

521
00:19:51,600 --> 00:19:53,679
this gives us a real signature from

522
00:19:53,679 --> 00:19:55,280
signer j

523
00:19:55,280 --> 00:19:57,679
all of these steps are indistinguishable

524
00:19:57,679 --> 00:19:59,120
all the changes that we make for the

525
00:19:59,120 --> 00:20:00,559
signers

526
00:20:00,559 --> 00:20:03,520
themselves have to do with how the vrf

527
00:20:03,520 --> 00:20:06,720
works or the public key encryption and

528
00:20:06,720 --> 00:20:09,200
the relationship for rf making that true

529
00:20:09,200 --> 00:20:12,159
or false is indistinguishable because

530
00:20:12,159 --> 00:20:16,000
one-way functions are hard to invert

531
00:20:16,000 --> 00:20:18,320
but now we have a problem

532
00:20:18,320 --> 00:20:20,720
unforgeability can't be as strong

533
00:20:20,720 --> 00:20:23,679
as we would like it to be because a

534
00:20:23,679 --> 00:20:24,880
register

535
00:20:24,880 --> 00:20:27,039
is now trivially going to make it so an

536
00:20:27,039 --> 00:20:30,480
adversary can forge

537
00:20:30,480 --> 00:20:33,600
even though honestly generated keys will

538
00:20:33,600 --> 00:20:35,919
never have this relationship if we allow

539
00:20:35,919 --> 00:20:38,000
the adversary to register his own keys

540
00:20:38,000 --> 00:20:40,159
he can easily make it so that he picks

541
00:20:40,159 --> 00:20:42,480
two keys such that f of ski is equal to

542
00:20:42,480 --> 00:20:44,799
skj and then he would be able to create

543
00:20:44,799 --> 00:20:48,880
as many signatures as he likes so

544
00:20:48,880 --> 00:20:50,799
because of our insistence on being in

545
00:20:50,799 --> 00:20:53,520
the plane model and having logarithmic

546
00:20:53,520 --> 00:20:56,159
size ring signatures we lost our ability

547
00:20:56,159 --> 00:20:59,679
to have a register

548
00:21:00,400 --> 00:21:03,919
let's conclude why does our work matter

549
00:21:03,919 --> 00:21:05,520
well it gives feasibility of a

550
00:21:05,520 --> 00:21:07,200
logarithmic size threshold ring

551
00:21:07,200 --> 00:21:09,280
signature in the plane model even though

552
00:21:09,280 --> 00:21:11,440
it has weakened unforgeability

553
00:21:11,440 --> 00:21:13,039
and it does give us one resultant

554
00:21:13,039 --> 00:21:15,840
research question which is can we do a

555
00:21:15,840 --> 00:21:17,760
compact ring signature with malicious

556
00:21:17,760 --> 00:21:19,679
registration and still be in the plain

557
00:21:19,679 --> 00:21:22,080
model

558
00:21:22,080 --> 00:21:24,559
um thank you for your attention if you

559
00:21:24,559 --> 00:21:26,640
would like to know more about our work

560
00:21:26,640 --> 00:21:29,440
you can look us up on eprint or you can

561
00:21:29,440 --> 00:21:31,039
email me if you have any questions

562
00:21:31,039 --> 00:21:34,039
thanks

