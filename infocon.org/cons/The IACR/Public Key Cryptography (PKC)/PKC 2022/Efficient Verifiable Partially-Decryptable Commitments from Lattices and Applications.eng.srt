1
00:00:01,439 --> 00:00:02,800
hello everyone

2
00:00:02,800 --> 00:00:04,799
i am muhammad

3
00:00:04,799 --> 00:00:06,799
and in this talk i'm going to present

4
00:00:06,799 --> 00:00:10,240
our pkc 2022 paper

5
00:00:10,240 --> 00:00:11,840
and in this work

6
00:00:11,840 --> 00:00:13,599
we introduce a new cryptographic

7
00:00:13,599 --> 00:00:16,000
primitive that we call verifiable

8
00:00:16,000 --> 00:00:18,320
partial decryptable commitments

9
00:00:18,320 --> 00:00:20,000
and we have an instantiation of this

10
00:00:20,000 --> 00:00:22,000
primitive from lattices

11
00:00:22,000 --> 00:00:23,439
and we have an application of this

12
00:00:23,439 --> 00:00:25,279
lattice-based instantiation

13
00:00:25,279 --> 00:00:27,279
in the blockchain private

14
00:00:27,279 --> 00:00:28,720
payment setting

15
00:00:28,720 --> 00:00:30,480
and this is a joint work with ron

16
00:00:30,480 --> 00:00:32,640
steinfeld and raymond's from monash

17
00:00:32,640 --> 00:00:34,559
university

18
00:00:34,559 --> 00:00:38,239
okay so let me start with the outline

19
00:00:38,239 --> 00:00:40,000
so i'm first going to talk about these

20
00:00:40,000 --> 00:00:41,200
two

21
00:00:41,200 --> 00:00:42,320
features of

22
00:00:42,320 --> 00:00:44,719
accountability and auditability which

23
00:00:44,719 --> 00:00:46,160
are the motivations

24
00:00:46,160 --> 00:00:47,760
uh for the introduction of this

25
00:00:47,760 --> 00:00:50,239
primitive that i mentioned before

26
00:00:50,239 --> 00:00:52,559
and i'm going to very briefly talk about

27
00:00:52,559 --> 00:00:54,160
the commitment schemes and

28
00:00:54,160 --> 00:00:56,559
non-interactive genomic proofs or nisk

29
00:00:56,559 --> 00:00:59,039
proofs for short this will be very brief

30
00:00:59,039 --> 00:01:00,320
discussion

31
00:01:00,320 --> 00:01:02,160
and i'm going to introduce this new

32
00:01:02,160 --> 00:01:03,600
primitive that we

33
00:01:03,600 --> 00:01:06,240
abbreviate as vpdc

34
00:01:06,240 --> 00:01:08,000
and then i'm going to talk about our

35
00:01:08,000 --> 00:01:10,320
lattice space instantiation so our

36
00:01:10,320 --> 00:01:12,159
instantiation is based on a commonly

37
00:01:12,159 --> 00:01:14,159
used lattice-based commitment scheme

38
00:01:14,159 --> 00:01:16,640
that we call hashed message commitment

39
00:01:16,640 --> 00:01:18,320
and finally i'll talk about our

40
00:01:18,320 --> 00:01:19,840
application

41
00:01:19,840 --> 00:01:22,159
in this private blockchain payment

42
00:01:22,159 --> 00:01:25,200
setting where we construct an auditable

43
00:01:25,200 --> 00:01:28,880
protocol that we call matrix au

44
00:01:28,880 --> 00:01:31,759
okay yeah i'm sure everyone knows what a

45
00:01:31,759 --> 00:01:34,159
multi-party protocol is but just to

46
00:01:34,159 --> 00:01:36,960
recap so we have a bunch of parties in

47
00:01:36,960 --> 00:01:39,200
this simple setting we have two parties

48
00:01:39,200 --> 00:01:40,479
alice and bob

49
00:01:40,479 --> 00:01:42,240
so in this multiplied protocol they

50
00:01:42,240 --> 00:01:44,399
might be exchanging some messages they

51
00:01:44,399 --> 00:01:45,840
might run some

52
00:01:45,840 --> 00:01:48,320
internal computations and maybe atkins

53
00:01:48,320 --> 00:01:50,880
have to protocol they might output some

54
00:01:50,880 --> 00:01:52,000
messages

55
00:01:52,000 --> 00:01:52,880
okay

56
00:01:52,880 --> 00:01:55,680
and here as you can see like alice knows

57
00:01:55,680 --> 00:01:57,920
who bobby's bob knows who alice is and

58
00:01:57,920 --> 00:01:59,840
everyone else can see it exchange

59
00:01:59,840 --> 00:02:02,240
messages and can also see who is

60
00:02:02,240 --> 00:02:04,159
exchanging these messages

61
00:02:04,159 --> 00:02:05,200
okay

62
00:02:05,200 --> 00:02:06,840
but of course from a cryptographic

63
00:02:06,840 --> 00:02:09,119
perspective this is not very desirable

64
00:02:09,119 --> 00:02:11,120
because we are you might be leaking out

65
00:02:11,120 --> 00:02:13,599
of secret information for example m0 m1

66
00:02:13,599 --> 00:02:15,520
and so on might be

67
00:02:15,520 --> 00:02:17,840
containing some secret information or

68
00:02:17,840 --> 00:02:19,920
leaking the user identities that are

69
00:02:19,920 --> 00:02:22,160
involved in the protocol might also be

70
00:02:22,160 --> 00:02:23,760
not desirable

71
00:02:23,760 --> 00:02:26,239
and from a cryptographic point of view

72
00:02:26,239 --> 00:02:28,720
we often want what's called a privacy

73
00:02:28,720 --> 00:02:30,560
cruisering protocol

74
00:02:30,560 --> 00:02:32,560
okay so in this setting they again have

75
00:02:32,560 --> 00:02:35,920
alison bob but they kind of

76
00:02:35,920 --> 00:02:36,800
have a

77
00:02:36,800 --> 00:02:39,040
shield a cryptographic shield that

78
00:02:39,040 --> 00:02:41,360
protects their identities from the

79
00:02:41,360 --> 00:02:43,519
outside world or they may also not even

80
00:02:43,519 --> 00:02:44,720
know

81
00:02:44,720 --> 00:02:46,879
each other's identities

82
00:02:46,879 --> 00:02:47,680
and

83
00:02:47,680 --> 00:02:50,319
also the messages that are encrypted

84
00:02:50,319 --> 00:02:52,319
sorry the messages that are exchanged

85
00:02:52,319 --> 00:02:54,319
between alex and bob they are also

86
00:02:54,319 --> 00:02:57,360
somehow hidden from the outside world

87
00:02:57,360 --> 00:02:58,239
okay

88
00:02:58,239 --> 00:03:00,000
and to achieve these

89
00:03:00,000 --> 00:03:01,599
privacy goals

90
00:03:01,599 --> 00:03:05,280
there are common tools employed such as

91
00:03:05,280 --> 00:03:08,000
commitment schemes zero knowledge proofs

92
00:03:08,000 --> 00:03:11,200
encryption schemes and so on

93
00:03:11,200 --> 00:03:12,319
but

94
00:03:12,319 --> 00:03:14,159
even though this setting of privacy

95
00:03:14,159 --> 00:03:16,319
version protocols are very desirable

96
00:03:16,319 --> 00:03:18,879
from a cryptographic perspective it also

97
00:03:18,879 --> 00:03:21,440
leads to issues in practice

98
00:03:21,440 --> 00:03:24,239
and in particular for example bob may be

99
00:03:24,239 --> 00:03:25,360
malicious

100
00:03:25,360 --> 00:03:27,680
and he might be actually exploiting

101
00:03:27,680 --> 00:03:28,879
his

102
00:03:28,879 --> 00:03:31,760
privacy features to hide for example his

103
00:03:31,760 --> 00:03:33,680
illegal activities

104
00:03:33,680 --> 00:03:36,080
okay what could it be for example just a

105
00:03:36,080 --> 00:03:38,400
simple example so he might for example

106
00:03:38,400 --> 00:03:41,120
be injecting alice's computer with a

107
00:03:41,120 --> 00:03:43,440
ransomware and he might be asking for a

108
00:03:43,440 --> 00:03:44,400
ransom

109
00:03:44,400 --> 00:03:47,120
say something like uh pay me one million

110
00:03:47,120 --> 00:03:49,120
dollars in one era or i'm going to

111
00:03:49,120 --> 00:03:51,599
destroy all of your files okay and one

112
00:03:51,599 --> 00:03:54,159
error is a privacy person cryptocurrency

113
00:03:54,159 --> 00:03:55,599
protocol

114
00:03:55,599 --> 00:03:57,760
where the user identities and the

115
00:03:57,760 --> 00:04:00,400
transaction history is hidden from the

116
00:04:00,400 --> 00:04:02,959
rest of the world okay so to hide his

117
00:04:02,959 --> 00:04:06,080
for example illegal financial activities

118
00:04:06,080 --> 00:04:08,560
uh bob who is the adversary in this case

119
00:04:08,560 --> 00:04:11,599
might be exploiting this privacy feature

120
00:04:11,599 --> 00:04:13,680
that are uh used in the monarch

121
00:04:13,680 --> 00:04:15,280
cryptocurrencies and we actually already

122
00:04:15,280 --> 00:04:18,000
know that uh this is happening uh with

123
00:04:18,000 --> 00:04:20,160
many cryptocurrencies that are used

124
00:04:20,160 --> 00:04:21,519
today

125
00:04:21,519 --> 00:04:22,880
okay

126
00:04:22,880 --> 00:04:23,919
so

127
00:04:23,919 --> 00:04:26,639
to kind of circumvent this problem uh in

128
00:04:26,639 --> 00:04:28,400
practical applications

129
00:04:28,400 --> 00:04:30,560
what we may actually want is an

130
00:04:30,560 --> 00:04:31,680
auditable

131
00:04:31,680 --> 00:04:33,759
privacy personal protocol

132
00:04:33,759 --> 00:04:36,320
where we are going to introduce this uh

133
00:04:36,320 --> 00:04:37,600
authority

134
00:04:37,600 --> 00:04:39,919
into the picture okay

135
00:04:39,919 --> 00:04:42,320
now this authority will have special

136
00:04:42,320 --> 00:04:43,520
powers

137
00:04:43,520 --> 00:04:45,360
and in particular

138
00:04:45,360 --> 00:04:48,320
he will be able to kind of break through

139
00:04:48,320 --> 00:04:50,160
this anonymity shield

140
00:04:50,160 --> 00:04:52,400
and he will be able to say okay that

141
00:04:52,400 --> 00:04:54,639
that's actually bob who is misbehaving

142
00:04:54,639 --> 00:04:56,720
or who is

143
00:04:56,720 --> 00:05:00,240
conducting some illegal transactions

144
00:05:00,240 --> 00:05:03,120
okay and in particular this authority

145
00:05:03,120 --> 00:05:05,680
will have a secret trap door and will

146
00:05:05,680 --> 00:05:08,160
use that trap door to be able to kind of

147
00:05:08,160 --> 00:05:10,639
break this anonymity or privacy features

148
00:05:10,639 --> 00:05:12,880
that are employed in the protocol

149
00:05:12,880 --> 00:05:14,479
okay

150
00:05:14,479 --> 00:05:16,720
and this authority might also be able to

151
00:05:16,720 --> 00:05:19,360
see the exchange messages

152
00:05:19,360 --> 00:05:21,759
so he might do either or both of them

153
00:05:21,759 --> 00:05:22,880
together

154
00:05:22,880 --> 00:05:25,440
okay and it's important to note here

155
00:05:25,440 --> 00:05:28,639
that only the authority is able to

156
00:05:28,639 --> 00:05:29,840
do this

157
00:05:29,840 --> 00:05:32,880
and the ordinary users cannot actually

158
00:05:32,880 --> 00:05:34,560
break the anonymity or the

159
00:05:34,560 --> 00:05:37,360
confidentiality of the protocol

160
00:05:37,360 --> 00:05:39,680
okay

161
00:05:39,680 --> 00:05:41,520
and there are actually many examples

162
00:05:41,520 --> 00:05:43,600
where this accountability or audit

163
00:05:43,600 --> 00:05:45,840
quality in the future is needed so i

164
00:05:45,840 --> 00:05:47,360
already mentioned about blockchain and

165
00:05:47,360 --> 00:05:49,600
cryptocurrency protocols and this is the

166
00:05:49,600 --> 00:05:51,520
application that we focus on in this

167
00:05:51,520 --> 00:05:53,440
work there are also already

168
00:05:53,440 --> 00:05:55,759
cryptographic schemes that have this

169
00:05:55,759 --> 00:05:58,560
anonymity sorry that has accountable uh

170
00:05:58,560 --> 00:06:00,080
anonymity feature

171
00:06:00,080 --> 00:06:02,400
already inside them such as like

172
00:06:02,400 --> 00:06:04,479
accountable ring signatures and group

173
00:06:04,479 --> 00:06:05,600
signatures

174
00:06:05,600 --> 00:06:07,039
and there are further higher level

175
00:06:07,039 --> 00:06:08,960
protocols like fare exchange e-voting

176
00:06:08,960 --> 00:06:10,800
and so on where we would want this

177
00:06:10,800 --> 00:06:13,600
accountability or auditability feature

178
00:06:13,600 --> 00:06:15,039
okay

179
00:06:15,039 --> 00:06:17,039
and many existing protocols are actually

180
00:06:17,039 --> 00:06:19,199
built on this commitment schemes that i

181
00:06:19,199 --> 00:06:21,199
already mentioned let us use the hide

182
00:06:21,199 --> 00:06:24,080
secret protocol information

183
00:06:24,080 --> 00:06:25,360
and

184
00:06:25,360 --> 00:06:27,360
usually these commitment schemes have a

185
00:06:27,360 --> 00:06:28,880
compression feature

186
00:06:28,880 --> 00:06:31,039
and they don't have a decryption feature

187
00:06:31,039 --> 00:06:32,960
in general okay which

188
00:06:32,960 --> 00:06:34,880
stems from the compression

189
00:06:34,880 --> 00:06:36,479
okay so i

190
00:06:36,479 --> 00:06:38,639
by default there is no way to recover

191
00:06:38,639 --> 00:06:40,560
partial secret information even if you

192
00:06:40,560 --> 00:06:42,560
want to have this or

193
00:06:42,560 --> 00:06:44,639
enable this other auditability or

194
00:06:44,639 --> 00:06:46,160
accountability feature that i mentioned

195
00:06:46,160 --> 00:06:48,960
before because you cannot i mean once

196
00:06:48,960 --> 00:06:49,759
the

197
00:06:49,759 --> 00:06:51,360
once you commit to something you cannot

198
00:06:51,360 --> 00:06:53,599
actually reveal some secret information

199
00:06:53,599 --> 00:06:54,639
about that

200
00:06:54,639 --> 00:06:55,919
due to the lack of this decryption

201
00:06:55,919 --> 00:06:57,280
feature

202
00:06:57,280 --> 00:06:58,160
okay

203
00:06:58,160 --> 00:07:00,080
of course we do know a primitive that

204
00:07:00,080 --> 00:07:01,759
has a decryption feature which is an

205
00:07:01,759 --> 00:07:03,199
encryption scheme

206
00:07:03,199 --> 00:07:04,800
and why don't we just switch to an

207
00:07:04,800 --> 00:07:06,080
encryption

208
00:07:06,080 --> 00:07:07,919
and the main reason so there are there

209
00:07:07,919 --> 00:07:09,360
are multiple reasons i'm just going to

210
00:07:09,360 --> 00:07:11,840
answer the main one here

211
00:07:11,840 --> 00:07:13,280
is because

212
00:07:13,280 --> 00:07:15,039
many existing protocols require

213
00:07:15,039 --> 00:07:17,280
commitment to a very long

214
00:07:17,280 --> 00:07:19,520
auxiliary message that is actually not

215
00:07:19,520 --> 00:07:22,000
necessary to be recovered in decryption

216
00:07:22,000 --> 00:07:23,919
okay so if you want to switch the

217
00:07:23,919 --> 00:07:25,680
encryption this will mean that you will

218
00:07:25,680 --> 00:07:27,680
need to encrypt a very long high entropy

219
00:07:27,680 --> 00:07:28,639
message

220
00:07:28,639 --> 00:07:31,199
using an encryption scheme which you can

221
00:07:31,199 --> 00:07:33,360
which cannot provide compression and

222
00:07:33,360 --> 00:07:35,120
this will lead to a significant

223
00:07:35,120 --> 00:07:37,120
communication overhead

224
00:07:37,120 --> 00:07:39,360
okay

225
00:07:39,840 --> 00:07:41,840
and this is precisely

226
00:07:41,840 --> 00:07:42,720
the

227
00:07:42,720 --> 00:07:44,879
problem that we are trying to solve

228
00:07:44,879 --> 00:07:47,840
in our work and our goal is to enable

229
00:07:47,840 --> 00:07:49,360
partial decryption

230
00:07:49,360 --> 00:07:52,000
in a verifiable manner okay

231
00:07:52,000 --> 00:07:54,639
and this one where we will be decrypting

232
00:07:54,639 --> 00:07:56,560
partial decrypting and commitment scheme

233
00:07:56,560 --> 00:07:59,039
and not switching to a full encryption

234
00:07:59,039 --> 00:08:01,360
okay and verifiable in this setting

235
00:08:01,360 --> 00:08:02,319
means

236
00:08:02,319 --> 00:08:04,319
very similar to this verifiable

237
00:08:04,319 --> 00:08:06,400
encryption that you may have heard of

238
00:08:06,400 --> 00:08:08,160
which basically says that

239
00:08:08,160 --> 00:08:10,400
users cannot just simply

240
00:08:10,400 --> 00:08:12,560
avoid decryption because

241
00:08:12,560 --> 00:08:14,720
we will ask them to kind of prove that

242
00:08:14,720 --> 00:08:17,280
the commitments are well formed and then

243
00:08:17,280 --> 00:08:19,039
the decryptors will always be we will

244
00:08:19,039 --> 00:08:22,080
always be able to decrypt uh verifiably

245
00:08:22,080 --> 00:08:24,240
verifiably committed message

246
00:08:24,240 --> 00:08:25,680
okay

247
00:08:25,680 --> 00:08:28,000
okay so let me then summarize our

248
00:08:28,000 --> 00:08:30,160
contributions in this work

249
00:08:30,160 --> 00:08:32,640
so as i mentioned we first formalized

250
00:08:32,640 --> 00:08:35,200
this vpdc notion verifiable partially

251
00:08:35,200 --> 00:08:37,519
decryptable commitment notion so this is

252
00:08:37,519 --> 00:08:40,080
an extension of a commitment scheme that

253
00:08:40,080 --> 00:08:41,839
has a matching nisk

254
00:08:41,839 --> 00:08:43,039
proof

255
00:08:43,039 --> 00:08:44,480
and we want to provide partial

256
00:08:44,480 --> 00:08:46,560
decryption

257
00:08:46,560 --> 00:08:47,600
and then

258
00:08:47,600 --> 00:08:49,600
we have generalized analysis

259
00:08:49,600 --> 00:08:52,480
of decryption feasibility for relaxed

260
00:08:52,480 --> 00:08:53,839
and disk

261
00:08:53,839 --> 00:08:55,600
so i'm not really going to talk too much

262
00:08:55,600 --> 00:08:57,440
about what a relaxed proof is or what an

263
00:08:57,440 --> 00:08:59,040
exact proof is

264
00:08:59,040 --> 00:09:02,880
uh but our results uh uh are built upon

265
00:09:02,880 --> 00:09:04,720
uh results from lubashevsky and nevan

266
00:09:04,720 --> 00:09:06,640
from eurocrypt 17

267
00:09:06,640 --> 00:09:09,600
and effectively what our results say is

268
00:09:09,600 --> 00:09:11,760
a kind of like a lifting curtain that

269
00:09:11,760 --> 00:09:13,839
says that if you can't decrypt

270
00:09:13,839 --> 00:09:16,720
in the non-rodex case then you can also

271
00:09:16,720 --> 00:09:19,519
extend this to the relaxed

272
00:09:19,519 --> 00:09:20,480
case

273
00:09:20,480 --> 00:09:22,480
and this result applies to a wide class

274
00:09:22,480 --> 00:09:25,760
of yacht chamber protocols

275
00:09:25,760 --> 00:09:27,200
and then the next thing which is kind of

276
00:09:27,200 --> 00:09:29,680
like one of the core parts of our paper

277
00:09:29,680 --> 00:09:31,440
is a normal decryption

278
00:09:31,440 --> 00:09:33,200
for this lattice-based commitment scheme

279
00:09:33,200 --> 00:09:34,959
that i mentioned before hash message

280
00:09:34,959 --> 00:09:37,920
commitment and here we will be utilizing

281
00:09:37,920 --> 00:09:40,720
a gadget vector to enable a registered

282
00:09:40,720 --> 00:09:42,880
decryption in this

283
00:09:42,880 --> 00:09:44,720
compression

284
00:09:44,720 --> 00:09:45,760
in this commitment scheme where

285
00:09:45,760 --> 00:09:48,399
compression happens

286
00:09:48,399 --> 00:09:50,880
and then finally i'll talk about uh look

287
00:09:50,880 --> 00:09:53,600
i'm sorry the final part of our paper is

288
00:09:53,600 --> 00:09:55,200
about an application

289
00:09:55,200 --> 00:09:57,519
in this so-called ring ct approach that

290
00:09:57,519 --> 00:10:00,320
is employed by monero cryptocurrency

291
00:10:00,320 --> 00:10:01,120
and

292
00:10:01,120 --> 00:10:02,880
this will be the introduction of matrix

293
00:10:02,880 --> 00:10:03,760
au

294
00:10:03,760 --> 00:10:06,959
that extends this matrix protocol from

295
00:10:06,959 --> 00:10:09,760
ccs 2019

296
00:10:09,760 --> 00:10:11,680
so in this talk i'm not going to talk

297
00:10:11,680 --> 00:10:13,519
about relaxed proofs

298
00:10:13,519 --> 00:10:14,800
and

299
00:10:14,800 --> 00:10:16,320
i'm not going to talk about therefore

300
00:10:16,320 --> 00:10:18,880
the generalized decression feasible

301
00:10:18,880 --> 00:10:21,600
results and i'm going to refer you to

302
00:10:21,600 --> 00:10:24,320
the paper for that

303
00:10:24,320 --> 00:10:27,120
okay so let's uh discuss a bit about

304
00:10:27,120 --> 00:10:29,200
this vpdc primitive

305
00:10:29,200 --> 00:10:32,480
and this will be an informal discussion

306
00:10:32,480 --> 00:10:34,240
so let's start with an ordinary

307
00:10:34,240 --> 00:10:36,720
commitment scheme and quickly recall how

308
00:10:36,720 --> 00:10:37,760
it works

309
00:10:37,760 --> 00:10:39,920
so it has three functions a key jam

310
00:10:39,920 --> 00:10:42,959
function that outputs a commitment key

311
00:10:42,959 --> 00:10:45,279
we can commit to messages

312
00:10:45,279 --> 00:10:46,800
where this commit function outputs a

313
00:10:46,800 --> 00:10:48,560
commitment capital c

314
00:10:48,560 --> 00:10:50,640
along with an opening of this commitment

315
00:10:50,640 --> 00:10:52,480
that we call o

316
00:10:52,480 --> 00:10:54,480
and then we have an open function

317
00:10:54,480 --> 00:10:56,240
that checks whether a

318
00:10:56,240 --> 00:10:59,200
opening is valid uh for a commitment or

319
00:10:59,200 --> 00:11:01,600
not okay

320
00:11:01,600 --> 00:11:03,440
and then two core properties of the

321
00:11:03,440 --> 00:11:06,640
commitment scheme is binding and hiding

322
00:11:06,640 --> 00:11:09,200
so binding basically says that you

323
00:11:09,200 --> 00:11:10,560
cannot

324
00:11:10,560 --> 00:11:12,079
open the commitment

325
00:11:12,079 --> 00:11:14,399
with two distinct messages this is

326
00:11:14,399 --> 00:11:16,079
computationally hard

327
00:11:16,079 --> 00:11:17,680
and hiding basically means that the

328
00:11:17,680 --> 00:11:19,920
commitment does not leak information

329
00:11:19,920 --> 00:11:21,839
about the committed message

330
00:11:21,839 --> 00:11:22,640
okay

331
00:11:22,640 --> 00:11:24,640
and in many protocols we also want a

332
00:11:24,640 --> 00:11:26,640
homomorphism property

333
00:11:26,640 --> 00:11:28,399
which says that we have these two

334
00:11:28,399 --> 00:11:29,760
operations

335
00:11:29,760 --> 00:11:32,320
multiplication and addition so this is o

336
00:11:32,320 --> 00:11:33,200
plus

337
00:11:33,200 --> 00:11:34,800
and all times

338
00:11:34,800 --> 00:11:37,040
where we can take a scalar alpha and

339
00:11:37,040 --> 00:11:39,360
then two commitments c1 and c2

340
00:11:39,360 --> 00:11:42,560
we can conclude alpha times c1 plus c2

341
00:11:42,560 --> 00:11:45,440
and we want this to be equal to the

342
00:11:45,440 --> 00:11:48,240
commitment of alpha times the message of

343
00:11:48,240 --> 00:11:50,639
the first commitment m1 plus the message

344
00:11:50,639 --> 00:11:52,959
of the second commitment m2

345
00:11:52,959 --> 00:11:54,079
okay

346
00:11:54,079 --> 00:11:56,880
now these are the standard uh things or

347
00:11:56,880 --> 00:11:59,680
common things or commitment schemes

348
00:11:59,680 --> 00:12:01,360
i'm not really going to talk about or

349
00:12:01,360 --> 00:12:03,680
defined uh disk proofs and

350
00:12:03,680 --> 00:12:05,760
non-interactive knowledge proofs

351
00:12:05,760 --> 00:12:07,279
and we are basically just going to

352
00:12:07,279 --> 00:12:10,480
assume that the existing existence of a

353
00:12:10,480 --> 00:12:12,720
matching nisk for the relation that is

354
00:12:12,720 --> 00:12:15,440
given here and this relation is a

355
00:12:15,440 --> 00:12:17,519
standard commitment opening relation

356
00:12:17,519 --> 00:12:19,680
that says that the prover knows an

357
00:12:19,680 --> 00:12:22,160
opening or for a given public commitment

358
00:12:22,160 --> 00:12:25,680
c such that c and o when given as an

359
00:12:25,680 --> 00:12:27,440
input to the c open function

360
00:12:27,440 --> 00:12:29,440
returns uh true

361
00:12:29,440 --> 00:12:30,800
okay

362
00:12:30,800 --> 00:12:32,560
and so this is a very standard disk

363
00:12:32,560 --> 00:12:33,920
proof

364
00:12:33,920 --> 00:12:35,920
and this nisqville will satisfy the

365
00:12:35,920 --> 00:12:37,920
standard properties of completeness

366
00:12:37,920 --> 00:12:41,120
soundness and zero knowledge

367
00:12:41,120 --> 00:12:42,079
okay

368
00:12:42,079 --> 00:12:44,720
let's now really look into how we now

369
00:12:44,720 --> 00:12:46,959
extend the commitment scheme to the vp

370
00:12:46,959 --> 00:12:49,279
dc okay so as i mentioned we will assume

371
00:12:49,279 --> 00:12:51,760
that there is a matching disk

372
00:12:51,760 --> 00:12:54,720
accompanying the common scheme

373
00:12:54,720 --> 00:12:57,440
and we will actually as a first step

374
00:12:57,440 --> 00:12:59,440
we'll be splitting the message space of

375
00:12:59,440 --> 00:13:00,959
the commitment scheme

376
00:13:00,959 --> 00:13:04,079
into two parts so m will be product of d

377
00:13:04,079 --> 00:13:06,480
and u capital d and u

378
00:13:06,480 --> 00:13:09,040
and d will be denoting the decryptable

379
00:13:09,040 --> 00:13:11,040
message space where you will denote an

380
00:13:11,040 --> 00:13:13,440
undecryptable or the auxiliary message

381
00:13:13,440 --> 00:13:14,480
space

382
00:13:14,480 --> 00:13:15,360
okay

383
00:13:15,360 --> 00:13:17,600
and as i mentioned before in many

384
00:13:17,600 --> 00:13:19,120
practical

385
00:13:19,120 --> 00:13:21,120
protocols the

386
00:13:21,120 --> 00:13:24,079
entropy of the this u space auxiliary

387
00:13:24,079 --> 00:13:26,399
message space is much higher than the

388
00:13:26,399 --> 00:13:27,920
entropy of the decryptable part where

389
00:13:27,920 --> 00:13:29,519
you want to recover

390
00:13:29,519 --> 00:13:31,120
in decryption

391
00:13:31,120 --> 00:13:31,920
okay

392
00:13:31,920 --> 00:13:33,600
so as an additional function we will

393
00:13:33,600 --> 00:13:36,480
have an add chapter function which will

394
00:13:36,480 --> 00:13:38,399
basically just take a commitment scheme

395
00:13:38,399 --> 00:13:41,600
and embed a trapdoor into it

396
00:13:41,600 --> 00:13:43,120
and then it will of course

397
00:13:43,120 --> 00:13:45,199
have a decryption function

398
00:13:45,199 --> 00:13:47,360
which will partially decrypt the

399
00:13:47,360 --> 00:13:50,480
commitment given complement c to recover

400
00:13:50,480 --> 00:13:54,079
a message in this d space okay so it's

401
00:13:54,079 --> 00:13:56,000
only a subset of m

402
00:13:56,000 --> 00:13:57,680
so we are not recovering this full

403
00:13:57,680 --> 00:13:58,560
message

404
00:13:58,560 --> 00:14:00,320
of the commitment scheme but we are just

405
00:14:00,320 --> 00:14:02,880
recovering a part or a portion

406
00:14:02,880 --> 00:14:05,120
of the full input message

407
00:14:05,120 --> 00:14:06,639
okay

408
00:14:06,639 --> 00:14:09,199
so this partial decryption as opposed to

409
00:14:09,199 --> 00:14:10,480
full decryption

410
00:14:10,480 --> 00:14:12,639
is really a feature in this setting and

411
00:14:12,639 --> 00:14:14,160
not a drawback

412
00:14:14,160 --> 00:14:16,000
that will allow us to compress the

413
00:14:16,000 --> 00:14:18,480
auxiliary message part okay because we

414
00:14:18,480 --> 00:14:20,399
all know that if you compress

415
00:14:20,399 --> 00:14:21,360
the

416
00:14:21,360 --> 00:14:23,600
message then we cannot fully recover

417
00:14:23,600 --> 00:14:25,040
that in decryption

418
00:14:25,040 --> 00:14:25,839
okay

419
00:14:25,839 --> 00:14:27,279
so that's why we will get both

420
00:14:27,279 --> 00:14:28,480
compression

421
00:14:28,480 --> 00:14:30,880
as well as decryptability in a single

422
00:14:30,880 --> 00:14:33,360
primitive

423
00:14:33,360 --> 00:14:35,519
okay let's now look at the actual

424
00:14:35,519 --> 00:14:38,240
properties of a vpdc

425
00:14:38,240 --> 00:14:39,680
okay so we will first have a

426
00:14:39,680 --> 00:14:40,959
succinctness

427
00:14:40,959 --> 00:14:42,800
which will say that the bit length of

428
00:14:42,800 --> 00:14:45,040
the commitment scheme sorry a commitment

429
00:14:45,040 --> 00:14:47,760
output will only depend

430
00:14:47,760 --> 00:14:49,920
on the bit length of the auxiliary

431
00:14:49,920 --> 00:14:50,880
message

432
00:14:50,880 --> 00:14:54,000
in a poly logarithmic fashion okay

433
00:14:54,000 --> 00:14:55,440
so it will not

434
00:14:55,440 --> 00:14:57,279
grow linearly with the bit length of the

435
00:14:57,279 --> 00:14:59,440
auxiliary message

436
00:14:59,440 --> 00:15:02,079
and this is literally the main property

437
00:15:02,079 --> 00:15:04,480
that distinguishes vpdc from a

438
00:15:04,480 --> 00:15:06,560
verifiable encryption or a proof of

439
00:15:06,560 --> 00:15:08,959
plaintext knowledge if you know them

440
00:15:08,959 --> 00:15:10,560
because in an encryption settings or

441
00:15:10,560 --> 00:15:13,199
these two things very hard encryption

442
00:15:13,199 --> 00:15:15,120
and proof of plaintext knowledge are

443
00:15:15,120 --> 00:15:17,519
built upon encryption schemes which

444
00:15:17,519 --> 00:15:19,680
means that you cannot get this succinct

445
00:15:19,680 --> 00:15:21,839
motion even for the original message if

446
00:15:21,839 --> 00:15:23,120
you want to do it

447
00:15:23,120 --> 00:15:24,160
because

448
00:15:24,160 --> 00:15:25,519
you cannot

449
00:15:25,519 --> 00:15:27,040
compress the

450
00:15:27,040 --> 00:15:30,079
message at all in the encryption case

451
00:15:30,079 --> 00:15:31,839
and then we have this what we call a

452
00:15:31,839 --> 00:15:33,759
small integer decryption message space

453
00:15:33,759 --> 00:15:34,880
property

454
00:15:34,880 --> 00:15:37,440
which basically says that this d space

455
00:15:37,440 --> 00:15:39,600
that we defined before this tool message

456
00:15:39,600 --> 00:15:40,560
space

457
00:15:40,560 --> 00:15:43,279
will basically just consist of integers

458
00:15:43,279 --> 00:15:46,000
okay and this is really the case for our

459
00:15:46,000 --> 00:15:47,279
application and that's why we are

460
00:15:47,279 --> 00:15:49,279
introducing this property and we

461
00:15:49,279 --> 00:15:50,560
actually have more generalized

462
00:15:50,560 --> 00:15:52,160
decryption we show in the paper that

463
00:15:52,160 --> 00:15:55,199
it's actually possible even with without

464
00:15:55,199 --> 00:15:57,680
this restriction

465
00:15:57,680 --> 00:15:58,560
okay

466
00:15:58,560 --> 00:15:59,519
and then we have this key

467
00:15:59,519 --> 00:16:01,920
indistinguishable property which says

468
00:16:01,920 --> 00:16:04,079
that the trapped or commitment key

469
00:16:04,079 --> 00:16:07,040
is a computationally indistinguishable

470
00:16:07,040 --> 00:16:09,519
from an ordinary commitment commitment

471
00:16:09,519 --> 00:16:12,480
key of the commitment scheme

472
00:16:12,480 --> 00:16:14,240
and then we have a stronger binding

473
00:16:14,240 --> 00:16:16,720
property that we call trap door binding

474
00:16:16,720 --> 00:16:19,199
which says that even when the adversary

475
00:16:19,199 --> 00:16:21,519
is given access to the trap door still

476
00:16:21,519 --> 00:16:23,759
the binding property holds with respect

477
00:16:23,759 --> 00:16:25,920
to the trapdoor commitment

478
00:16:25,920 --> 00:16:26,720
okay

479
00:16:26,720 --> 00:16:28,000
and this is really important for our

480
00:16:28,000 --> 00:16:29,360
application because we really want that

481
00:16:29,360 --> 00:16:30,560
authorities

482
00:16:30,560 --> 00:16:32,880
not be achieving in the protocol okay so

483
00:16:32,880 --> 00:16:35,360
we prevent authorities from cheating

484
00:16:35,360 --> 00:16:39,040
even though they have access to travel

485
00:16:39,040 --> 00:16:40,480
and then we have a decryption soundness

486
00:16:40,480 --> 00:16:42,880
property which kind of effectively says

487
00:16:42,880 --> 00:16:44,560
that decryption function

488
00:16:44,560 --> 00:16:46,079
returns the same message used to

489
00:16:46,079 --> 00:16:48,160
construct a commitment

490
00:16:48,160 --> 00:16:50,000
and we have a decryption feasibility

491
00:16:50,000 --> 00:16:51,040
property

492
00:16:51,040 --> 00:16:53,360
that uh roughly say that the decryption

493
00:16:53,360 --> 00:16:56,800
function runs in reasonable time okay

494
00:16:56,800 --> 00:16:58,399
again since i'm not talking about this

495
00:16:58,399 --> 00:17:00,720
relaxed zero knowledge proofs in this

496
00:17:00,720 --> 00:17:01,680
talk

497
00:17:01,680 --> 00:17:04,319
this notion of reasonable he will be

498
00:17:04,319 --> 00:17:06,079
awake in this room and i'll refer you to

499
00:17:06,079 --> 00:17:08,160
the paper for the concrete definition

500
00:17:08,160 --> 00:17:11,119
for that but just know that in the case

501
00:17:11,119 --> 00:17:13,439
of less crews there are further

502
00:17:13,439 --> 00:17:16,079
complications arising and we saw a show

503
00:17:16,079 --> 00:17:18,559
how to solve them in our paper that you

504
00:17:18,559 --> 00:17:20,640
can have a look at

505
00:17:20,640 --> 00:17:24,319
okay so let's now see how we construct

506
00:17:24,319 --> 00:17:27,359
this vpdc primitive from lattices and we

507
00:17:27,359 --> 00:17:29,679
will be building upon this hmc

508
00:17:29,679 --> 00:17:31,520
commitment scheme

509
00:17:31,520 --> 00:17:34,720
so let's first look at how hmc works

510
00:17:34,720 --> 00:17:37,520
so we have two matrices two random

511
00:17:37,520 --> 00:17:38,960
public matrices

512
00:17:38,960 --> 00:17:40,960
or a polynomial ring that we denote by

513
00:17:40,960 --> 00:17:41,919
rq

514
00:17:41,919 --> 00:17:43,679
with a variable x

515
00:17:43,679 --> 00:17:44,559
okay

516
00:17:44,559 --> 00:17:47,440
if you want to commit to a message m

517
00:17:47,440 --> 00:17:50,640
which needs to have small coefficients

518
00:17:50,640 --> 00:17:53,120
then we are going to sample a randomness

519
00:17:53,120 --> 00:17:55,679
with again small coefficients and just

520
00:17:55,679 --> 00:17:57,440
compute a times r

521
00:17:57,440 --> 00:17:59,200
plus v times m

522
00:17:59,200 --> 00:18:02,799
and this output mod q will be equal to

523
00:18:02,799 --> 00:18:04,160
the commitment

524
00:18:04,160 --> 00:18:06,320
okay so this is as i mentioned is a very

525
00:18:06,320 --> 00:18:08,559
standard commitment scheme used in many

526
00:18:08,559 --> 00:18:10,240
other space protocols

527
00:18:10,240 --> 00:18:12,640
and its security can be easily shown

528
00:18:12,640 --> 00:18:17,440
from module 6 and module lwe problems

529
00:18:17,600 --> 00:18:19,840
and as the first step so this picture as

530
00:18:19,840 --> 00:18:20,960
you might see

531
00:18:20,960 --> 00:18:22,799
doesn't fully capture

532
00:18:22,799 --> 00:18:24,960
our setting in the vpdc that we split

533
00:18:24,960 --> 00:18:28,000
the message into two parts so to make it

534
00:18:28,000 --> 00:18:29,360
more clearer

535
00:18:29,360 --> 00:18:30,480
we will

536
00:18:30,480 --> 00:18:33,039
slightly shift the view and we will

537
00:18:33,039 --> 00:18:36,240
split this b matrix into two parts b and

538
00:18:36,240 --> 00:18:37,120
c

539
00:18:37,120 --> 00:18:39,919
and also this message include m and u

540
00:18:39,919 --> 00:18:42,559
okay so m will be decryptable message

541
00:18:42,559 --> 00:18:45,520
which uh often has very low entropy

542
00:18:45,520 --> 00:18:47,600
and this uh u will be the auxiliary

543
00:18:47,600 --> 00:18:49,679
message which often has very high

544
00:18:49,679 --> 00:18:50,799
entropy

545
00:18:50,799 --> 00:18:53,280
okay but still the randomness decretable

546
00:18:53,280 --> 00:18:54,880
message and auxiliaries they all have

547
00:18:54,880 --> 00:18:57,840
small coefficients

548
00:18:57,840 --> 00:18:58,960
okay

549
00:18:58,960 --> 00:19:01,760
and there are already existing standard

550
00:19:01,760 --> 00:19:04,559
opening proofs for this hmc component so

551
00:19:04,559 --> 00:19:06,080
we don't need to

552
00:19:06,080 --> 00:19:07,679
construct them from scratch okay so they

553
00:19:07,679 --> 00:19:11,840
are kind of like very standard protocols

554
00:19:12,000 --> 00:19:14,960
okay so first we need to add a chapter

555
00:19:14,960 --> 00:19:17,840
into the commitment key and let's see

556
00:19:17,840 --> 00:19:20,400
how we do this so first we are going to

557
00:19:20,400 --> 00:19:22,799
assume for the simplicity in this talk

558
00:19:22,799 --> 00:19:27,039
that m is just a bunch of bits okay this

559
00:19:27,039 --> 00:19:27,760
m

560
00:19:27,760 --> 00:19:30,160
matrix sorry m vector that we want to

561
00:19:30,160 --> 00:19:31,919
recover in decryption

562
00:19:31,919 --> 00:19:34,880
okay so this u part the auxiliary part

563
00:19:34,880 --> 00:19:36,480
can have much more entropy so it doesn't

564
00:19:36,480 --> 00:19:38,320
have to be binary but the decryptable

565
00:19:38,320 --> 00:19:39,840
one we are for now assuming that it's

566
00:19:39,840 --> 00:19:42,400
final okay in the paper you also show a

567
00:19:42,400 --> 00:19:44,000
generalization where m is not

568
00:19:44,000 --> 00:19:46,080
necessarily minor

569
00:19:46,080 --> 00:19:48,799
okay so for chapter

570
00:19:48,799 --> 00:19:51,360
embedding we are going to update the

571
00:19:51,360 --> 00:19:54,400
last rows of these abc matrices

572
00:19:54,400 --> 00:19:56,640
okay so let's assume that a prime b

573
00:19:56,640 --> 00:19:58,240
prime and c prime

574
00:19:58,240 --> 00:20:00,960
are the parts of abc where the last rows

575
00:20:00,960 --> 00:20:02,320
are removed

576
00:20:02,320 --> 00:20:05,440
okay and the last rows we are going to

577
00:20:05,440 --> 00:20:07,440
kind of generate them in a specific

578
00:20:07,440 --> 00:20:10,640
manner okay and in particular they will

579
00:20:10,640 --> 00:20:12,400
just be

580
00:20:12,400 --> 00:20:14,000
lwe

581
00:20:14,000 --> 00:20:16,559
vectors okay in particular

582
00:20:16,559 --> 00:20:19,600
we take the matrix this random matrix a

583
00:20:19,600 --> 00:20:20,640
prime

584
00:20:20,640 --> 00:20:24,240
multiply it with a secret vector s prime

585
00:20:24,240 --> 00:20:26,480
and then we add some noise okay in

586
00:20:26,480 --> 00:20:28,320
particular for v zero b

587
00:20:28,320 --> 00:20:30,480
e zero and then we get e one and then e

588
00:20:30,480 --> 00:20:32,000
two for the other

589
00:20:32,000 --> 00:20:33,120
okay

590
00:20:33,120 --> 00:20:35,919
but with only one difference

591
00:20:35,919 --> 00:20:36,720
where

592
00:20:36,720 --> 00:20:39,280
the second one is w1

593
00:20:39,280 --> 00:20:42,080
will also have this additional term that

594
00:20:42,080 --> 00:20:43,280
is t bar

595
00:20:43,280 --> 00:20:46,240
times a gadget vector g

596
00:20:46,240 --> 00:20:48,400
okay so t bar

597
00:20:48,400 --> 00:20:49,919
is this parameter that's also used in

598
00:20:49,919 --> 00:20:51,679
plagiar

599
00:20:51,679 --> 00:20:54,559
encryption which is q divided by t for a

600
00:20:54,559 --> 00:20:55,840
parameter t

601
00:20:55,840 --> 00:20:57,280
that defines the

602
00:20:57,280 --> 00:20:58,880
message space

603
00:20:58,880 --> 00:21:01,919
okay and this gadget vector is this

604
00:21:01,919 --> 00:21:03,280
powers of 2

605
00:21:03,280 --> 00:21:06,400
vector like 1 2 4 up to a power of 2 and

606
00:21:06,400 --> 00:21:08,400
then x 2 x 4 x

607
00:21:08,400 --> 00:21:11,039
and so on okay since we are working over

608
00:21:11,039 --> 00:21:13,600
a polynomial we have this

609
00:21:13,600 --> 00:21:16,240
multiplication by x and x square x cube

610
00:21:16,240 --> 00:21:18,159
and so on

611
00:21:18,159 --> 00:21:19,039
okay

612
00:21:19,039 --> 00:21:20,080
so this

613
00:21:20,080 --> 00:21:22,799
t bar times g part will be important for

614
00:21:22,799 --> 00:21:24,480
us so that will allow us to recover the

615
00:21:24,480 --> 00:21:26,159
message

616
00:21:26,159 --> 00:21:28,640
so if you are a bit confused with this

617
00:21:28,640 --> 00:21:29,679
picture

618
00:21:29,679 --> 00:21:31,679
don't worry about it so what we really

619
00:21:31,679 --> 00:21:32,799
want to do

620
00:21:32,799 --> 00:21:35,280
is to set a trap door s

621
00:21:35,280 --> 00:21:37,440
which will just be simply this

622
00:21:37,440 --> 00:21:39,840
minus s prime that is the secret for the

623
00:21:39,840 --> 00:21:41,520
lwe

624
00:21:41,520 --> 00:21:44,080
concave ends with one okay so that's the

625
00:21:44,080 --> 00:21:45,520
chapter for s

626
00:21:45,520 --> 00:21:47,600
and we just want that s

627
00:21:47,600 --> 00:21:50,799
times this trapdoor commitment key

628
00:21:50,799 --> 00:21:52,880
is almost equal to or approximately

629
00:21:52,880 --> 00:21:55,360
equal to a bunch of zeros for the first

630
00:21:55,360 --> 00:21:56,400
part

631
00:21:56,400 --> 00:21:59,200
and a t bar times g for the second part

632
00:21:59,200 --> 00:22:01,760
and then followed by zeros again

633
00:22:01,760 --> 00:22:04,240
okay so that the randomness gets

634
00:22:04,240 --> 00:22:06,480
multiplied by zeros the message gets

635
00:22:06,480 --> 00:22:08,640
multiplied by the gadget vector

636
00:22:08,640 --> 00:22:10,480
and then again the auxiliary message

637
00:22:10,480 --> 00:22:13,919
gets multiplied by zeros as well roughly

638
00:22:13,919 --> 00:22:15,440
okay

639
00:22:15,440 --> 00:22:17,679
so this is how we embed the trapdoor

640
00:22:17,679 --> 00:22:19,280
into the commitment key

641
00:22:19,280 --> 00:22:20,880
and then let's now see how we do the

642
00:22:20,880 --> 00:22:23,120
decryption

643
00:22:23,120 --> 00:22:25,760
if we now have a commitment let's say h

644
00:22:25,760 --> 00:22:28,080
under a trap dot commitment key

645
00:22:28,080 --> 00:22:30,400
and if we multiply this commitment or we

646
00:22:30,400 --> 00:22:31,760
compute an inner product of this

647
00:22:31,760 --> 00:22:34,000
commitment with s

648
00:22:34,000 --> 00:22:36,320
then we are going to get so as we just

649
00:22:36,320 --> 00:22:38,000
showed before

650
00:22:38,000 --> 00:22:40,320
so in this sorry

651
00:22:40,320 --> 00:22:41,919
in this picture here

652
00:22:41,919 --> 00:22:43,440
so we will see that

653
00:22:43,440 --> 00:22:45,120
this a and c

654
00:22:45,120 --> 00:22:46,880
parts will be cancelled out and they

655
00:22:46,880 --> 00:22:49,360
will just contribute to an error term

656
00:22:49,360 --> 00:22:51,520
which will have small coefficients and

657
00:22:51,520 --> 00:22:53,200
the message will get multiplied by the g

658
00:22:53,200 --> 00:22:54,480
matrix

659
00:22:54,480 --> 00:22:55,360
okay

660
00:22:55,360 --> 00:22:57,280
so we will get something of the form t

661
00:22:57,280 --> 00:22:59,919
bar times g times m

662
00:22:59,919 --> 00:23:01,760
plus e for

663
00:23:01,760 --> 00:23:04,480
e with small coefficients mod q

664
00:23:04,480 --> 00:23:05,440
okay

665
00:23:05,440 --> 00:23:06,720
so as in the

666
00:23:06,720 --> 00:23:09,039
usual regular style decryption we can

667
00:23:09,039 --> 00:23:12,159
just round off this short error e

668
00:23:12,159 --> 00:23:12,960
okay

669
00:23:12,960 --> 00:23:14,640
and recall that

670
00:23:14,640 --> 00:23:16,880
t bar was equal to q divided by t so

671
00:23:16,880 --> 00:23:18,480
it's large so we can just round off the

672
00:23:18,480 --> 00:23:19,440
error

673
00:23:19,440 --> 00:23:20,880
we are going to end up with something of

674
00:23:20,880 --> 00:23:23,679
the form t bar times gm

675
00:23:23,679 --> 00:23:24,559
okay

676
00:23:24,559 --> 00:23:27,520
so we can just divide it by t bar to get

677
00:23:27,520 --> 00:23:28,880
something that only depends on the

678
00:23:28,880 --> 00:23:31,919
gadget vector and the message m

679
00:23:31,919 --> 00:23:32,799
okay

680
00:23:32,799 --> 00:23:34,880
and this will just be a

681
00:23:34,880 --> 00:23:38,000
polynomial in rt

682
00:23:38,000 --> 00:23:38,880
okay

683
00:23:38,880 --> 00:23:41,200
recall that so g is specifically

684
00:23:41,200 --> 00:23:43,919
constructed and m is binary

685
00:23:43,919 --> 00:23:46,480
so this multiplication will make sure

686
00:23:46,480 --> 00:23:48,400
that this is a polynomial with

687
00:23:48,400 --> 00:23:51,200
coefficients that does not exceed t

688
00:23:51,200 --> 00:23:52,720
okay that's how we specifically

689
00:23:52,720 --> 00:23:55,039
constructed this gadget vector

690
00:23:55,039 --> 00:23:55,840
okay

691
00:23:55,840 --> 00:23:58,480
and in particular the bits of the

692
00:23:58,480 --> 00:24:01,279
coefficients of this polynomial f

693
00:24:01,279 --> 00:24:03,520
will simply be representing the message

694
00:24:03,520 --> 00:24:05,279
okay due to the construction of the

695
00:24:05,279 --> 00:24:07,679
sketchup matrix which we can easily

696
00:24:07,679 --> 00:24:09,840
recover in decryption

697
00:24:09,840 --> 00:24:11,840
okay

698
00:24:11,840 --> 00:24:13,360
so that this is

699
00:24:13,360 --> 00:24:15,600
how we do partial decryption

700
00:24:15,600 --> 00:24:17,600
for this

701
00:24:17,600 --> 00:24:21,678
hmc based vpdc in our setting

702
00:24:21,919 --> 00:24:23,840
and of course this is not just all that

703
00:24:23,840 --> 00:24:26,240
we show in the paper and we extend this

704
00:24:26,240 --> 00:24:28,640
decryption method to work with relaxed

705
00:24:28,640 --> 00:24:30,559
and opening proofs

706
00:24:30,559 --> 00:24:32,559
and in particular we make use of our

707
00:24:32,559 --> 00:24:34,960
generalized decryption feasible results

708
00:24:34,960 --> 00:24:36,559
to

709
00:24:36,559 --> 00:24:40,880
do the formal analysis of this extension

710
00:24:40,880 --> 00:24:42,159
and then

711
00:24:42,159 --> 00:24:44,480
we formally prove the

712
00:24:44,480 --> 00:24:46,640
aforementioned epdc properties like this

713
00:24:46,640 --> 00:24:49,360
soundness against likes proofs and the

714
00:24:49,360 --> 00:24:51,120
subsequence property that we discussed

715
00:24:51,120 --> 00:24:52,640
before

716
00:24:52,640 --> 00:24:54,640
and we also have a more generalized

717
00:24:54,640 --> 00:24:56,159
decryption algorithm

718
00:24:56,159 --> 00:24:58,159
where the methods does not need to be

719
00:24:58,159 --> 00:24:59,840
binary necessary it still needs to be

720
00:24:59,840 --> 00:25:02,400
short corrected the cure to model the

721
00:25:02,400 --> 00:25:04,400
system which was q but it doesn't have

722
00:25:04,400 --> 00:25:07,039
to be wider

723
00:25:07,360 --> 00:25:10,159
okay so as the last part let's discuss

724
00:25:10,159 --> 00:25:12,559
about our matrix a u application which

725
00:25:12,559 --> 00:25:14,640
will be an auditable version of this

726
00:25:14,640 --> 00:25:17,600
matrix protocol

727
00:25:17,600 --> 00:25:20,240
and for this let us first recall how

728
00:25:20,240 --> 00:25:22,880
this matrix protocol worked very briefly

729
00:25:22,880 --> 00:25:24,400
i'm not going to get into the technical

730
00:25:24,400 --> 00:25:26,080
details at all

731
00:25:26,080 --> 00:25:28,799
so this matrix protocol is a private

732
00:25:28,799 --> 00:25:31,039
blockchain payment protocol that is

733
00:25:31,039 --> 00:25:33,919
based on the so-called ring ct approach

734
00:25:33,919 --> 00:25:36,240
and the string city approach is used in

735
00:25:36,240 --> 00:25:38,240
monero cryptocurrency that i mentioned

736
00:25:38,240 --> 00:25:40,960
before and matrix is a lattice-based

737
00:25:40,960 --> 00:25:44,960
instantiation of the string ct framework

738
00:25:44,960 --> 00:25:47,039
and it hides the payer and pay

739
00:25:47,039 --> 00:25:49,120
identities

740
00:25:49,120 --> 00:25:52,559
and the transaction amount

741
00:25:53,520 --> 00:25:54,640
and then

742
00:25:54,640 --> 00:25:56,640
in particular to hide the

743
00:25:56,640 --> 00:25:59,360
real pair among end users

744
00:25:59,360 --> 00:26:01,679
it makes use of a ring signature or a

745
00:26:01,679 --> 00:26:03,840
one out of enemies proof

746
00:26:03,840 --> 00:26:06,080
okay

747
00:26:06,320 --> 00:26:07,440
and then

748
00:26:07,440 --> 00:26:09,440
in this one out of n proof

749
00:26:09,440 --> 00:26:12,640
it uses an hmc commitment to encode the

750
00:26:12,640 --> 00:26:14,960
real players index that we can denote by

751
00:26:14,960 --> 00:26:15,840
l

752
00:26:15,840 --> 00:26:16,720
okay

753
00:26:16,720 --> 00:26:18,640
and this encoding is just done by

754
00:26:18,640 --> 00:26:20,400
committing to the unary representation

755
00:26:20,400 --> 00:26:23,039
of l which means that you just come into

756
00:26:23,039 --> 00:26:25,440
a sequence of bits that represents this

757
00:26:25,440 --> 00:26:27,919
index l

758
00:26:28,159 --> 00:26:30,880
and moreover the same commitment also

759
00:26:30,880 --> 00:26:33,679
encodes the bits of the output amounts

760
00:26:33,679 --> 00:26:35,679
okay and the reason that we are

761
00:26:35,679 --> 00:26:38,000
committing to these bits is to hide the

762
00:26:38,000 --> 00:26:39,520
transaction amount

763
00:26:39,520 --> 00:26:42,159
okay so we have this one commitment

764
00:26:42,159 --> 00:26:44,880
that's encoding the user index

765
00:26:44,880 --> 00:26:46,880
as well as the transaction amount in

766
00:26:46,880 --> 00:26:48,559
binary format

767
00:26:48,559 --> 00:26:50,960
okay which exactly matches

768
00:26:50,960 --> 00:26:53,600
what we have just seen in our decryption

769
00:26:53,600 --> 00:26:56,159
assumption so the message was binary and

770
00:26:56,159 --> 00:26:57,600
we assumed that the

771
00:26:57,600 --> 00:27:01,520
user was using an hmc commitment

772
00:27:01,520 --> 00:27:02,480
okay

773
00:27:02,480 --> 00:27:05,120
and there is already an opening proof

774
00:27:05,120 --> 00:27:07,279
and well from this proof is part of this

775
00:27:07,279 --> 00:27:09,120
matrix protocol okay which means that

776
00:27:09,120 --> 00:27:11,279
the protocol already proves that this

777
00:27:11,279 --> 00:27:12,559
commitment

778
00:27:12,559 --> 00:27:14,480
contained a bunch of

779
00:27:14,480 --> 00:27:17,039
bits and it is well formed

780
00:27:17,039 --> 00:27:19,279
okay

781
00:27:19,520 --> 00:27:23,039
and this then like already the protocol

782
00:27:23,039 --> 00:27:25,679
has kind of like to put the nisk proofs

783
00:27:25,679 --> 00:27:27,840
that we want to have as the matching

784
00:27:27,840 --> 00:27:30,960
disk so all we need to do is to replace

785
00:27:30,960 --> 00:27:32,880
this ordinary hmc

786
00:27:32,880 --> 00:27:36,320
using matrix with this vpdc hmc base

787
00:27:36,320 --> 00:27:39,039
vpdc he already constructed

788
00:27:39,039 --> 00:27:42,158
in the previous part

789
00:27:42,399 --> 00:27:44,320
and then this will effectively extend

790
00:27:44,320 --> 00:27:46,559
the ring signature in matrix

791
00:27:46,559 --> 00:27:48,960
to an accountable ring signature or a

792
00:27:48,960 --> 00:27:52,000
group signature where an authority can

793
00:27:52,000 --> 00:27:55,520
decrement or can deonomize users

794
00:27:55,520 --> 00:27:56,559
okay

795
00:27:56,559 --> 00:27:58,480
and as i mentioned we don't need to

796
00:27:58,480 --> 00:28:01,200
modify the nisk at all

797
00:28:01,200 --> 00:28:03,720
thanks to this vpdc properties like key

798
00:28:03,720 --> 00:28:06,159
distinguishability and trapdoor binding

799
00:28:06,159 --> 00:28:07,919
and so on

800
00:28:07,919 --> 00:28:09,600
and we only need to do very minor

801
00:28:09,600 --> 00:28:11,039
modifications to the protocol

802
00:28:11,039 --> 00:28:13,520
descriptions and as well as the protocol

803
00:28:13,520 --> 00:28:16,320
protocol parameters

804
00:28:16,320 --> 00:28:18,000
and we can very efficiently run

805
00:28:18,000 --> 00:28:20,240
decryption for a very large message

806
00:28:20,240 --> 00:28:24,240
space of more than 2 to the 128 elements

807
00:28:24,240 --> 00:28:27,120
and we can also apply our techniques to

808
00:28:27,120 --> 00:28:29,440
the newer version of this matrix

809
00:28:29,440 --> 00:28:32,320
protocol that is called matrix plus

810
00:28:32,320 --> 00:28:34,240
okay so that's a more efficient version

811
00:28:34,240 --> 00:28:36,480
of matrix so we can apply we can make

812
00:28:36,480 --> 00:28:37,279
that

813
00:28:37,279 --> 00:28:41,279
uh protocol auditable as well formula

814
00:28:41,520 --> 00:28:43,679
and we have nice

815
00:28:43,679 --> 00:28:45,360
kind of additional features in terms of

816
00:28:45,360 --> 00:28:47,039
auditability

817
00:28:47,039 --> 00:28:48,880
uh for example we can have multiple

818
00:28:48,880 --> 00:28:50,080
auditors

819
00:28:50,080 --> 00:28:52,399
that can audit the same transaction

820
00:28:52,399 --> 00:28:54,080
without revealing their individual

821
00:28:54,080 --> 00:28:56,399
chapters

822
00:28:56,399 --> 00:28:58,320
and we can also allow each user to

823
00:28:58,320 --> 00:29:00,799
choose their own auditor or some users

824
00:29:00,799 --> 00:29:03,679
may choose to be not audited at all

825
00:29:03,679 --> 00:29:06,799
and we can also let the system enforce

826
00:29:06,799 --> 00:29:09,760
auditing so that people cannot avoid

827
00:29:09,760 --> 00:29:12,080
auditability and in this case we just

828
00:29:12,080 --> 00:29:13,360
need to

829
00:29:13,360 --> 00:29:15,440
make sure that the verification checks

830
00:29:15,440 --> 00:29:16,480
that the

831
00:29:16,480 --> 00:29:18,399
non-auditable transactions fail in

832
00:29:18,399 --> 00:29:19,760
verification

833
00:29:19,760 --> 00:29:22,000
and basically this is just done by

834
00:29:22,000 --> 00:29:23,360
checking this commitment key whether

835
00:29:23,360 --> 00:29:25,520
it's the trapdoor one or the ordinary

836
00:29:25,520 --> 00:29:27,039
one

837
00:29:27,039 --> 00:29:28,080
okay

838
00:29:28,080 --> 00:29:30,320
and here is a comparison

839
00:29:30,320 --> 00:29:32,640
of matrix and matrix au in terms of

840
00:29:32,640 --> 00:29:34,080
communication

841
00:29:34,080 --> 00:29:36,320
so this is for a different

842
00:29:36,320 --> 00:29:39,360
anonymity levels and for different

843
00:29:39,360 --> 00:29:41,279
number of inputs and outputs in the

844
00:29:41,279 --> 00:29:42,559
protocol

845
00:29:42,559 --> 00:29:44,640
we can look at the proof size first and

846
00:29:44,640 --> 00:29:46,720
we see that in all the settings there's

847
00:29:46,720 --> 00:29:49,200
a very little overhead just about three

848
00:29:49,200 --> 00:29:50,960
percent

849
00:29:50,960 --> 00:29:53,120
and in terms of the system parameters

850
00:29:53,120 --> 00:29:54,960
the public key size remains exactly the

851
00:29:54,960 --> 00:29:57,760
same and only one of the system moduli

852
00:29:57,760 --> 00:30:01,679
is increased by two bits about two bits

853
00:30:01,679 --> 00:30:04,159
again for computation there is very

854
00:30:04,159 --> 00:30:05,520
little overhead

855
00:30:05,520 --> 00:30:08,240
so the keygen and transaction gen and

856
00:30:08,240 --> 00:30:10,080
verification functions

857
00:30:10,080 --> 00:30:12,240
have very little overheads

858
00:30:12,240 --> 00:30:13,919
and these new functions trapdoor

859
00:30:13,919 --> 00:30:15,600
generation and audit

860
00:30:15,600 --> 00:30:19,439
also one run very fast

861
00:30:20,320 --> 00:30:21,200
okay

862
00:30:21,200 --> 00:30:24,320
so that's all i wanted to say so here is

863
00:30:24,320 --> 00:30:27,039
some references that i mentioned uh

864
00:30:27,039 --> 00:30:28,799
during the talk

865
00:30:28,799 --> 00:30:30,720
and the full version of our work is

866
00:30:30,720 --> 00:30:33,440
available on iec as eprint that you can

867
00:30:33,440 --> 00:30:36,000
have a look and the source code of this

868
00:30:36,000 --> 00:30:37,840
matrix av application

869
00:30:37,840 --> 00:30:39,919
is also available in this link

870
00:30:39,919 --> 00:30:42,480
and if you have any questions please do

871
00:30:42,480 --> 00:30:47,440
not hesitate to email me thank you

