1
00:00:00,080 --> 00:00:02,240
thank you for this invitation and it's

2
00:00:02,240 --> 00:00:04,160
my pleasure to present this uh awesome

3
00:00:04,160 --> 00:00:06,560
research work uh that's the result of a

4
00:00:06,560 --> 00:00:09,040
lovely collaboration with uh diego rania

5
00:00:09,040 --> 00:00:11,920
matthias hal henderson anchanichtolescu

6
00:00:11,920 --> 00:00:15,120
myself elena fagnin and sophia kubot and

7
00:00:15,120 --> 00:00:16,480
as you said that this is can't mean

8
00:00:16,480 --> 00:00:18,080
extendability for threshold ring

9
00:00:18,080 --> 00:00:20,000
signatures which is excited for

10
00:00:20,000 --> 00:00:22,640
publication in pkc public photography

11
00:00:22,640 --> 00:00:24,080
conference this year

12
00:00:24,080 --> 00:00:26,320
so to get everybody on stage let's on

13
00:00:26,320 --> 00:00:28,480
the same place let's see what digital

14
00:00:28,480 --> 00:00:31,039
signatures are just a quick recap

15
00:00:31,039 --> 00:00:32,800
this is a cryptographic primitives that

16
00:00:32,800 --> 00:00:35,440
usually involves four algorithms we have

17
00:00:35,440 --> 00:00:37,040
a setup algorithm

18
00:00:37,040 --> 00:00:39,280
that outputs for instance the group we

19
00:00:39,280 --> 00:00:40,559
are working with or some generic

20
00:00:40,559 --> 00:00:42,960
settings public parameters we have a key

21
00:00:42,960 --> 00:00:44,960
generation algorithm that will output

22
00:00:44,960 --> 00:00:46,719
the appear a c

23
00:00:46,719 --> 00:00:49,360
secret signing key and a public key

24
00:00:49,360 --> 00:00:52,320
a a sign algorithm that's it's used

25
00:00:52,320 --> 00:00:53,680
together with the secret key and a

26
00:00:53,680 --> 00:00:56,000
message to produce a signature and a

27
00:00:56,000 --> 00:00:58,239
verification algorithm verify that takes

28
00:00:58,239 --> 00:01:00,800
instead the designer's public key that

29
00:01:00,800 --> 00:01:02,960
uh for throughout this presentation i

30
00:01:02,960 --> 00:01:05,519
will represent like this colorful circle

31
00:01:05,519 --> 00:01:07,760
and checks that the signature is

32
00:01:07,760 --> 00:01:10,320
actually correct for the given message

33
00:01:10,320 --> 00:01:13,600
and the given publicly

34
00:01:13,600 --> 00:01:17,040
in 2001 riven shamir and tauman have

35
00:01:17,040 --> 00:01:19,600
proposed the notion of ring signature so

36
00:01:19,600 --> 00:01:21,759
the algorithm are exactly the same

37
00:01:21,759 --> 00:01:23,040
except that the verification and

38
00:01:23,040 --> 00:01:25,520
procedure instead of taking one single

39
00:01:25,520 --> 00:01:27,520
public key as input it will take a ring

40
00:01:27,520 --> 00:01:29,200
a group of public keys

41
00:01:29,200 --> 00:01:30,479
it's called a ring just for historical

42
00:01:30,479 --> 00:01:31,840
reason that the first construction was

43
00:01:31,840 --> 00:01:34,159
constructed around the shape that looks

44
00:01:34,159 --> 00:01:36,320
like a ring but essentially i will have

45
00:01:36,320 --> 00:01:37,600
like a

46
00:01:37,600 --> 00:01:39,520
set of n potential signer and what this

47
00:01:39,520 --> 00:01:41,040
signature is telling me is proving that

48
00:01:41,040 --> 00:01:42,960
one of the signer has signed this

49
00:01:42,960 --> 00:01:44,640
message but uh and produced this

50
00:01:44,640 --> 00:01:46,320
signature but it doesn't tell me which

51
00:01:46,320 --> 00:01:49,759
of those signer is doing so

52
00:01:49,759 --> 00:01:51,920
and this is relevant for instance in a

53
00:01:51,920 --> 00:01:54,240
bitcoin application where let's say i

54
00:01:54,240 --> 00:01:55,520
want to

55
00:01:55,520 --> 00:01:57,280
sign my transactions but i don't want

56
00:01:57,280 --> 00:01:58,960
you to know that every evening i'm

57
00:01:58,960 --> 00:02:00,479
signing my transaction from my work

58
00:02:00,479 --> 00:02:01,920
computer because then you know that i'm

59
00:02:01,920 --> 00:02:03,200
at work and not at home and maybe you

60
00:02:03,200 --> 00:02:04,799
can run some attack of that

61
00:02:04,799 --> 00:02:06,320
and it's also interesting in

62
00:02:06,320 --> 00:02:09,440
whistleblowing scenario where maybe some

63
00:02:09,440 --> 00:02:11,920
some employee of an institution wants to

64
00:02:11,920 --> 00:02:15,599
uh say voice out whatever wrongdoings

65
00:02:15,599 --> 00:02:17,440
but they just want to show that they

66
00:02:17,440 --> 00:02:18,959
belong to a certain group to a certain

67
00:02:18,959 --> 00:02:20,480
department they don't want necessarily

68
00:02:20,480 --> 00:02:23,840
to expose their identity

69
00:02:24,000 --> 00:02:26,720
nice a couple of years later in actually

70
00:02:26,720 --> 00:02:29,360
the next year in 2002 crypto there has

71
00:02:29,360 --> 00:02:31,200
been the first uh

72
00:02:31,200 --> 00:02:33,920
scheme of threshold rank signature

73
00:02:33,920 --> 00:02:35,120
proposed in the

74
00:02:35,120 --> 00:02:37,680
literature again the algorithms are

75
00:02:37,680 --> 00:02:39,840
exactly the same except that now instead

76
00:02:39,840 --> 00:02:43,280
of having one potential signer out of n

77
00:02:43,280 --> 00:02:45,200
public keys we have t

78
00:02:45,200 --> 00:02:47,840
people that sign out of n possible

79
00:02:47,840 --> 00:02:50,400
signers and this is again very important

80
00:02:50,400 --> 00:02:52,239
in uh for instance whistler blowing or

81
00:02:52,239 --> 00:02:54,160
if i want to have some threshold

82
00:02:54,160 --> 00:02:55,760
cryptography even in bitcoin maybe i

83
00:02:55,760 --> 00:02:57,519
want to have two factor authentication

84
00:02:57,519 --> 00:02:59,599
two signal two devices that sign the

85
00:02:59,599 --> 00:03:01,200
same transaction but i don't want people

86
00:03:01,200 --> 00:03:03,360
to know exactly which combination of two

87
00:03:03,360 --> 00:03:05,040
devices i'm using

88
00:03:05,040 --> 00:03:07,200
so this is all cool and amazing but

89
00:03:07,200 --> 00:03:09,200
there are a couple of short timings so

90
00:03:09,200 --> 00:03:11,680
first of all existing scheme require

91
00:03:11,680 --> 00:03:13,599
interaction among signers when producing

92
00:03:13,599 --> 00:03:16,000
these threshold

93
00:03:16,000 --> 00:03:17,360
signatures

94
00:03:17,360 --> 00:03:19,840
or they can

95
00:03:19,840 --> 00:03:21,360
signatures produced by independent

96
00:03:21,360 --> 00:03:23,440
signers can be combined together

97
00:03:23,440 --> 00:03:24,480
however

98
00:03:24,480 --> 00:03:25,519
the

99
00:03:25,519 --> 00:03:26,560
uh when

100
00:03:26,560 --> 00:03:29,680
upon when the signing algorithm is run

101
00:03:29,680 --> 00:03:33,200
uh all signers need to use the same ring

102
00:03:33,200 --> 00:03:34,480
so essentially there needs to be a

103
00:03:34,480 --> 00:03:36,239
certain interaction along signer to

104
00:03:36,239 --> 00:03:38,239
agree on which ring we're using in the

105
00:03:38,239 --> 00:03:40,080
case of bitcoin if it's me signing it's

106
00:03:40,080 --> 00:03:41,680
not that hard i know which is my ring of

107
00:03:41,680 --> 00:03:43,360
public keys but in the case for instance

108
00:03:43,360 --> 00:03:46,640
obama me too uh um

109
00:03:46,640 --> 00:03:49,280
case i might be just hiding myself

110
00:03:49,280 --> 00:03:51,280
within my group but there will be people

111
00:03:51,280 --> 00:03:53,439
from other groups that want to join the

112
00:03:53,439 --> 00:03:55,680
same cause and that's not possible with

113
00:03:55,680 --> 00:03:57,760
existing so we are not particularly

114
00:03:57,760 --> 00:03:59,280
happy with these two

115
00:03:59,280 --> 00:04:00,400
limitations

116
00:04:00,400 --> 00:04:02,159
and that's essentially what we address

117
00:04:02,159 --> 00:04:04,319
in this work

118
00:04:04,319 --> 00:04:06,400
so in this work we propose extendable

119
00:04:06,400 --> 00:04:08,720
threshold ring signature schemes

120
00:04:08,720 --> 00:04:10,879
they have the same algorithms as the

121
00:04:10,879 --> 00:04:12,720
threshold ring signature scheme

122
00:04:12,720 --> 00:04:14,879
plus a couple of twists we have an

123
00:04:14,879 --> 00:04:17,839
extend procedure which enables anybody

124
00:04:17,839 --> 00:04:20,238
to take a signature scheme t out of n

125
00:04:20,238 --> 00:04:22,720
sorry a signature t out of n and expand

126
00:04:22,720 --> 00:04:25,440
it to a t out of n prime when and prime

127
00:04:25,440 --> 00:04:28,240
is bigger than m so i can add some

128
00:04:28,240 --> 00:04:30,240
potential signers

129
00:04:30,240 --> 00:04:32,639
and then i can also join

130
00:04:32,639 --> 00:04:35,360
to get uh t plus one so i can increase

131
00:04:35,360 --> 00:04:37,919
the threshold by joining a signature on

132
00:04:37,919 --> 00:04:42,000
a ring where my my public key appears

133
00:04:42,000 --> 00:04:43,440
good and

134
00:04:43,440 --> 00:04:45,840
this is supposed to work in uh

135
00:04:45,840 --> 00:04:48,479
settings such as count me too i endorse

136
00:04:48,479 --> 00:04:50,720
this you know

137
00:04:50,720 --> 00:04:52,320
what we achieve is that we have a

138
00:04:52,320 --> 00:04:54,000
dynamic ring growth

139
00:04:54,000 --> 00:04:56,160
and interaction among sign and no

140
00:04:56,160 --> 00:04:57,840
interaction among signer is needed so

141
00:04:57,840 --> 00:04:59,360
we'll remove those two limitations that

142
00:04:59,360 --> 00:05:00,800
are there before

143
00:05:00,800 --> 00:05:02,960
so let's go to a bit more formal what uh

144
00:05:02,960 --> 00:05:04,479
our contribution

145
00:05:04,479 --> 00:05:06,240
first of all we present this notion of

146
00:05:06,240 --> 00:05:08,400
extendability which essentially is to

147
00:05:08,400 --> 00:05:10,639
enlarge the set of pencil designer of a

148
00:05:10,639 --> 00:05:13,520
given signature scheme we do so not just

149
00:05:13,520 --> 00:05:15,440
for threshold ring signatures but also

150
00:05:15,440 --> 00:05:18,160
for ring signatures and for same message

151
00:05:18,160 --> 00:05:21,199
linkable ring signatures

152
00:05:21,199 --> 00:05:23,840
then we provide a formal syntax and a

153
00:05:23,840 --> 00:05:26,560
security model for each of these

154
00:05:26,560 --> 00:05:28,800
primitives with this extendability

155
00:05:28,800 --> 00:05:30,160
feature on

156
00:05:30,160 --> 00:05:32,160
and finally we provide constructions and

157
00:05:32,160 --> 00:05:33,600
implementation

158
00:05:33,600 --> 00:05:35,199
we have more or less as many

159
00:05:35,199 --> 00:05:37,520
constructors as authors and

160
00:05:37,520 --> 00:05:39,120
some implementations

161
00:05:39,120 --> 00:05:41,759
we have construction of extendable ring

162
00:05:41,759 --> 00:05:43,120
signatures from

163
00:05:43,120 --> 00:05:44,800
a signature of knowledge

164
00:05:44,800 --> 00:05:46,479
we have a sim message linkable

165
00:05:46,479 --> 00:05:48,160
extendable ring signatures constructed

166
00:05:48,160 --> 00:05:50,320
in a black box way given an extendable

167
00:05:50,320 --> 00:05:51,759
ring signature the ones that we just

168
00:05:51,759 --> 00:05:53,520
constructed at the previous step and the

169
00:05:53,520 --> 00:05:55,120
signature of knowledge again

170
00:05:55,120 --> 00:05:56,880
and then we have extendable threshold

171
00:05:56,880 --> 00:05:58,240
ring signature which is the coolest

172
00:05:58,240 --> 00:06:00,160
thing that can be constructed in a black

173
00:06:00,160 --> 00:06:02,560
box way from what we just created the

174
00:06:02,560 --> 00:06:04,479
same message linkable extendable ring

175
00:06:04,479 --> 00:06:06,400
signature or a construction that is

176
00:06:06,400 --> 00:06:08,400
based on the d-log

177
00:06:08,400 --> 00:06:09,600
so what i will show you in this

178
00:06:09,600 --> 00:06:11,680
presentation is basically the setting

179
00:06:11,680 --> 00:06:14,000
for the threshold ring signatures and

180
00:06:14,000 --> 00:06:16,240
the construction that we have from the

181
00:06:16,240 --> 00:06:18,840
d-log assumption and signature of

182
00:06:18,840 --> 00:06:21,360
knowledge let's get started

183
00:06:21,360 --> 00:06:23,280
so threshold ring signatures they have

184
00:06:23,280 --> 00:06:25,199
been there for a while uh you you see

185
00:06:25,199 --> 00:06:26,319
some uh

186
00:06:26,319 --> 00:06:28,319
um imported references at the bottom of

187
00:06:28,319 --> 00:06:30,400
the slides but in general how do they

188
00:06:30,400 --> 00:06:32,240
work we have this setup algorithm that

189
00:06:32,240 --> 00:06:34,639
texas input the public uh the security

190
00:06:34,639 --> 00:06:36,400
parameter and outputs the public

191
00:06:36,400 --> 00:06:38,800
parameters we have a key generator

192
00:06:38,800 --> 00:06:40,080
algorithm that takes the public

193
00:06:40,080 --> 00:06:42,479
parameters and output a public key and a

194
00:06:42,479 --> 00:06:45,280
secret key throughout this presentation

195
00:06:45,280 --> 00:06:47,440
the public is going to be always this

196
00:06:47,440 --> 00:06:48,960
circle and the secret key is going to be

197
00:06:48,960 --> 00:06:50,960
the circle with the ring rimmer around

198
00:06:50,960 --> 00:06:52,639
it okay

199
00:06:52,639 --> 00:06:54,880
the signing algorithm takes an input a

200
00:06:54,880 --> 00:06:58,560
message a ring of public keys and one

201
00:06:58,560 --> 00:07:01,440
secret key and produces a signature

202
00:07:01,440 --> 00:07:03,280
and the verification algorithm takes as

203
00:07:03,280 --> 00:07:04,720
input a threshold with us with

204
00:07:04,720 --> 00:07:07,680
essentially discounting how many

205
00:07:07,680 --> 00:07:09,440
uh signing key have been used to produce

206
00:07:09,440 --> 00:07:11,520
this signature a messages signature and

207
00:07:11,520 --> 00:07:13,759
a ring and gives a zero one

208
00:07:13,759 --> 00:07:14,479
if

209
00:07:14,479 --> 00:07:16,960
there is at least the

210
00:07:16,960 --> 00:07:18,240
secret key that have been used to

211
00:07:18,240 --> 00:07:20,080
produce these signatures and secretly

212
00:07:20,080 --> 00:07:22,080
belong to the ring

213
00:07:22,080 --> 00:07:23,919
uh are given in the verification

214
00:07:23,919 --> 00:07:26,240
algorithm good so this is what exists

215
00:07:26,240 --> 00:07:27,440
already

216
00:07:27,440 --> 00:07:29,440
uh yeah this is the correctness so at

217
00:07:29,440 --> 00:07:31,120
least this secret key needs to have been

218
00:07:31,120 --> 00:07:32,800
used to produce the signature s for the

219
00:07:32,800 --> 00:07:34,160
message m

220
00:07:34,160 --> 00:07:36,160
let's go one step further and

221
00:07:36,160 --> 00:07:38,000
talk about what is extendable threshold

222
00:07:38,000 --> 00:07:39,680
ring signature so that's what we do in

223
00:07:39,680 --> 00:07:41,840
this paper in this paper we add the

224
00:07:41,840 --> 00:07:44,319
extend algorithm which will take an

225
00:07:44,319 --> 00:07:46,800
input a message a signature an initial

226
00:07:46,800 --> 00:07:49,919
ring r1 and a secondary r2 and will

227
00:07:49,919 --> 00:07:52,560
produce a new signature s prime and the

228
00:07:52,560 --> 00:07:54,960
idea is that this new signature s prime

229
00:07:54,960 --> 00:07:57,360
should verify for the same threshold t

230
00:07:57,360 --> 00:07:58,639
plus s

231
00:07:58,639 --> 00:08:00,800
but for a larger link essentially you

232
00:08:00,800 --> 00:08:02,639
can think of it as like augmenting the

233
00:08:02,639 --> 00:08:04,080
anonymity set

234
00:08:04,080 --> 00:08:06,319
with more public keys

235
00:08:06,319 --> 00:08:07,759
and we also want to have a join

236
00:08:07,759 --> 00:08:09,360
algorithm that takes a message a

237
00:08:09,360 --> 00:08:11,759
signature and a ring of public keys and

238
00:08:11,759 --> 00:08:14,240
a secret key and produces a new

239
00:08:14,240 --> 00:08:16,160
signature and of course in this case we

240
00:08:16,160 --> 00:08:17,919
want that the threshold of the signature

241
00:08:17,919 --> 00:08:19,919
s prime output by the john algorithm is

242
00:08:19,919 --> 00:08:21,280
growing by one

243
00:08:21,280 --> 00:08:23,840
so there is one more person endorsing

244
00:08:23,840 --> 00:08:25,440
and what we want to make sure is that

245
00:08:25,440 --> 00:08:27,440
the person endorsing is not already

246
00:08:27,440 --> 00:08:29,599
somebody that has been used to produce s

247
00:08:29,599 --> 00:08:31,440
so for instance the trivial idea of like

248
00:08:31,440 --> 00:08:35,519
oh let me glue together signatures um

249
00:08:35,519 --> 00:08:37,360
ring signatures and put them together

250
00:08:37,360 --> 00:08:39,360
wouldn't work unless we can prove that

251
00:08:39,360 --> 00:08:41,120
the same ring signature has not been

252
00:08:41,120 --> 00:08:43,360
produced by the signer by the same cycle

253
00:08:43,360 --> 00:08:44,640
in the same summary can produce three

254
00:08:44,640 --> 00:08:45,839
signatures and

255
00:08:45,839 --> 00:08:48,160
we need to be able somehow to make sure

256
00:08:48,160 --> 00:08:50,240
that uh we are not reusing one person's

257
00:08:50,240 --> 00:08:50,959
thing

258
00:08:50,959 --> 00:08:52,640
how how do this

259
00:08:52,640 --> 00:08:55,120
extend and join interactive i will try

260
00:08:55,120 --> 00:08:56,800
to visualize this in a very intuitive

261
00:08:56,800 --> 00:08:59,440
way and this is formalized in the

262
00:08:59,440 --> 00:09:00,959
concept of ladders that you can find in

263
00:09:00,959 --> 00:09:02,800
the paper for more details

264
00:09:02,800 --> 00:09:03,519
so

265
00:09:03,519 --> 00:09:05,279
imagine that we start with this one out

266
00:09:05,279 --> 00:09:07,279
of four signers so we have four public

267
00:09:07,279 --> 00:09:09,200
keys of different colors and one with

268
00:09:09,200 --> 00:09:11,279
the rim which is the one that has been

269
00:09:11,279 --> 00:09:13,279
used for signing

270
00:09:13,279 --> 00:09:14,880
if i want to join

271
00:09:14,880 --> 00:09:16,160
now that the threshold is going to be

272
00:09:16,160 --> 00:09:18,480
two out of four signers

273
00:09:18,480 --> 00:09:20,560
then maybe i can extend to add more

274
00:09:20,560 --> 00:09:22,800
public keys here we add like two purple

275
00:09:22,800 --> 00:09:26,800
shades and i get two out of six signers

276
00:09:26,800 --> 00:09:30,080
and then maybe somebody in the purple uh

277
00:09:30,080 --> 00:09:32,720
with a purple secret joins and then we

278
00:09:32,720 --> 00:09:36,720
end up with a three out of six signers

279
00:09:36,720 --> 00:09:37,839
nice

280
00:09:37,839 --> 00:09:39,920
but i can reach the same three out of

281
00:09:39,920 --> 00:09:42,800
six also with a different path let's say

282
00:09:42,800 --> 00:09:44,560
that i start again from a one out of

283
00:09:44,560 --> 00:09:46,800
four uh signature but this time it's

284
00:09:46,800 --> 00:09:49,440
been the the blue person signing

285
00:09:49,440 --> 00:09:51,440
and then maybe i can extend this

286
00:09:51,440 --> 00:09:53,200
getting a one out of five signer

287
00:09:53,200 --> 00:09:54,640
signature

288
00:09:54,640 --> 00:09:57,040
then i can extend it again getting a one

289
00:09:57,040 --> 00:09:58,160
out of six

290
00:09:58,160 --> 00:10:00,480
then i can join with the purple

291
00:10:00,480 --> 00:10:02,079
and then i can join again with the

292
00:10:02,079 --> 00:10:03,360
orange

293
00:10:03,360 --> 00:10:04,560
so

294
00:10:04,560 --> 00:10:06,800
we will have two notions of anonymity

295
00:10:06,800 --> 00:10:08,640
and the basic one is saying that

296
00:10:08,640 --> 00:10:11,440
essentially i cannot distinguish the top

297
00:10:11,440 --> 00:10:14,320
or the bottom ones so uh threshold

298
00:10:14,320 --> 00:10:15,760
signatures that have the same threshold

299
00:10:15,760 --> 00:10:17,680
and the same number of users i cannot

300
00:10:17,680 --> 00:10:19,519
distinguish if it's being signed by the

301
00:10:19,519 --> 00:10:20,800
red

302
00:10:20,800 --> 00:10:23,120
the orange and the purple person or by

303
00:10:23,120 --> 00:10:24,959
the blue the orange and the purple

304
00:10:24,959 --> 00:10:27,040
person and the stronger version around

305
00:10:27,040 --> 00:10:29,040
limit instead tells me that i cannot

306
00:10:29,040 --> 00:10:31,040
even distinguish which which path which

307
00:10:31,040 --> 00:10:33,200
ladder have i extended using the left

308
00:10:33,200 --> 00:10:35,120
path or have i've done all of this

309
00:10:35,120 --> 00:10:37,760
extension and joining as the right path

310
00:10:37,760 --> 00:10:39,839
so the security model

311
00:10:39,839 --> 00:10:42,240
um let's jump up before before anonymity

312
00:10:42,240 --> 00:10:43,760
we need to have unforgeability for a

313
00:10:43,760 --> 00:10:46,000
digital signature this is not surprising

314
00:10:46,000 --> 00:10:47,200
as a notion that's going to be our

315
00:10:47,200 --> 00:10:50,079
adversary here as an owl with you know

316
00:10:50,079 --> 00:10:52,560
bad hacking tools in their hand they can

317
00:10:52,560 --> 00:10:54,560
uh interact with a

318
00:10:54,560 --> 00:10:58,240
key generation oracle they can corrupt

319
00:10:58,240 --> 00:11:00,399
keys and they can interact with

320
00:11:00,399 --> 00:11:02,800
assigning oracle and the goal of the

321
00:11:02,800 --> 00:11:06,000
adversary is to output a tuple of a

322
00:11:06,000 --> 00:11:08,720
threshold a message signature and a ring

323
00:11:08,720 --> 00:11:10,000
of public keys

324
00:11:10,000 --> 00:11:12,240
and he wins the existential

325
00:11:12,240 --> 00:11:14,640
affordability game if this tuple output

326
00:11:14,640 --> 00:11:16,800
by the adversary verifies

327
00:11:16,800 --> 00:11:18,560
so the purification algorithm returns

328
00:11:18,560 --> 00:11:19,680
one

329
00:11:19,680 --> 00:11:22,399
and if the number of corrupted signers

330
00:11:22,399 --> 00:11:24,399
in the ring chosen by the adversary is

331
00:11:24,399 --> 00:11:25,839
less than t because of course if the

332
00:11:25,839 --> 00:11:27,440
adversary has corrupted more than

333
00:11:27,440 --> 00:11:29,200
designers then it can of course forge

334
00:11:29,200 --> 00:11:31,600
because it has two secret keys and

335
00:11:31,600 --> 00:11:33,120
essentially for the same reason but a

336
00:11:33,120 --> 00:11:35,279
bit more technicality here we cannot let

337
00:11:35,279 --> 00:11:37,680
that adversary interact with the signing

338
00:11:37,680 --> 00:11:39,920
oracle for this specific message chosen

339
00:11:39,920 --> 00:11:42,000
for the affordability more than three

340
00:11:42,000 --> 00:11:43,760
times because otherwise it could recycle

341
00:11:43,760 --> 00:11:46,160
losing

342
00:11:46,160 --> 00:11:49,120
and for anonymity i already anticipated

343
00:11:49,120 --> 00:11:50,399
a little bit with the previous slide and

344
00:11:50,399 --> 00:11:52,240
the two ladders but essentially we give

345
00:11:52,240 --> 00:11:54,399
this uh we give the adversary access to

346
00:11:54,399 --> 00:11:56,959
the same oracles as before but this time

347
00:11:56,959 --> 00:11:58,560
the adversary will interact with our

348
00:11:58,560 --> 00:12:00,720
amazing challenger

349
00:12:00,720 --> 00:12:02,560
to whom he will give a message and two

350
00:12:02,560 --> 00:12:03,600
ladders

351
00:12:03,600 --> 00:12:04,880
and

352
00:12:04,880 --> 00:12:06,399
the challenger will reply with the

353
00:12:06,399 --> 00:12:08,639
signature and

354
00:12:08,639 --> 00:12:10,320
for anonymity we have that adversary

355
00:12:10,320 --> 00:12:12,240
should be able to correctly guess

356
00:12:12,240 --> 00:12:13,920
which of the two ladders has been

357
00:12:13,920 --> 00:12:16,240
executed by the advert by the challenger

358
00:12:16,240 --> 00:12:18,160
and we have two notions of anonymity and

359
00:12:18,160 --> 00:12:21,200
depends you know if you uh allow for uh

360
00:12:21,200 --> 00:12:24,000
ladders to grow even with different uh

361
00:12:24,000 --> 00:12:25,839
lengths or if you just allow one

362
00:12:25,839 --> 00:12:28,480
extension or

363
00:12:28,480 --> 00:12:30,480
just a simple you cannot distinguish who

364
00:12:30,480 --> 00:12:33,360
is the signer in a given set that's to

365
00:12:33,360 --> 00:12:35,120
give the intuition now i think we are

366
00:12:35,120 --> 00:12:36,959
ready to see the construction which is

367
00:12:36,959 --> 00:12:38,399
actually the cool thing

368
00:12:38,399 --> 00:12:40,000
as i said before we have several

369
00:12:40,000 --> 00:12:42,639
construction instructions but i will

370
00:12:42,639 --> 00:12:44,560
focus here on the one that i find it

371
00:12:44,560 --> 00:12:45,680
more

372
00:12:45,680 --> 00:12:47,519
interesting because it has some ones in

373
00:12:47,519 --> 00:12:48,240
it

374
00:12:48,240 --> 00:12:50,160
uh the others are i think more

375
00:12:50,160 --> 00:12:52,320
straightforward and more like composable

376
00:12:52,320 --> 00:12:54,639
with existing notions that i strongly

377
00:12:54,639 --> 00:12:56,240
encourage you to check the paper because

378
00:12:56,240 --> 00:12:57,440
they are you know really nice and

379
00:12:57,440 --> 00:12:58,480
elegant

380
00:12:58,480 --> 00:13:01,120
but let's look at the more interesting

381
00:13:01,120 --> 00:13:03,279
one so how can we construct this

382
00:13:03,279 --> 00:13:05,680
extendable fraction ring signature from

383
00:13:05,680 --> 00:13:08,000
the discrete log assumption and we will

384
00:13:08,000 --> 00:13:12,320
also use need some public key encryption

385
00:13:13,440 --> 00:13:15,279
let's pick a

386
00:13:15,279 --> 00:13:17,440
finite field set p

387
00:13:17,440 --> 00:13:18,399
group

388
00:13:18,399 --> 00:13:19,200
g

389
00:13:19,200 --> 00:13:21,440
and an element h in g these are going to

390
00:13:21,440 --> 00:13:24,320
be my public parameters

391
00:13:24,320 --> 00:13:26,079
then let's also pick

392
00:13:26,079 --> 00:13:29,760
three points on on zp

393
00:13:29,760 --> 00:13:32,320
and for this point let's pick

394
00:13:32,320 --> 00:13:34,480
other three points in g

395
00:13:34,480 --> 00:13:36,480
that i have generated using the trapdoor

396
00:13:36,480 --> 00:13:39,440
so i will first sample let's say uh td1

397
00:13:39,440 --> 00:13:41,519
and then generate g to the td one and

398
00:13:41,519 --> 00:13:43,360
call this y1

399
00:13:43,360 --> 00:13:44,560
okay

400
00:13:44,560 --> 00:13:46,399
then what i will do i will do something

401
00:13:46,399 --> 00:13:48,560
very similar to xamir secret sharing so

402
00:13:48,560 --> 00:13:50,160
i will interpolate in the exponent and

403
00:13:50,160 --> 00:13:52,959
create a polynomial that is matching

404
00:13:52,959 --> 00:13:53,760
uh

405
00:13:53,760 --> 00:13:54,560
these

406
00:13:54,560 --> 00:13:57,760
values on the specific axis point

407
00:13:57,760 --> 00:13:58,959
of course the polynomial doesn't look

408
00:13:58,959 --> 00:14:01,199
like this in reality because we are on a

409
00:14:01,199 --> 00:14:02,720
discrete

410
00:14:02,720 --> 00:14:04,560
fields but

411
00:14:04,560 --> 00:14:06,639
give me i say

412
00:14:06,639 --> 00:14:08,399
give me an artistic break and let me

413
00:14:08,399 --> 00:14:10,639
draw it like it is right now so now we

414
00:14:10,639 --> 00:14:13,120
have a polynomial of degree 3

415
00:14:13,120 --> 00:14:14,880
of which i know the evaluation on four

416
00:14:14,880 --> 00:14:17,360
points and for three of these points i

417
00:14:17,360 --> 00:14:19,199
know truck doors so i know the discrete

418
00:14:19,199 --> 00:14:21,360
logs and h is a public value so i don't

419
00:14:21,360 --> 00:14:23,440
know the discrete log of that

420
00:14:23,440 --> 00:14:25,360
now how can i

421
00:14:25,360 --> 00:14:26,320
sign

422
00:14:26,320 --> 00:14:28,160
uh in order to sign the idea is like i

423
00:14:28,160 --> 00:14:30,639
will sample another point

424
00:14:30,639 --> 00:14:33,360
x hat in that b

425
00:14:33,360 --> 00:14:35,839
and i will evaluate the polynomial on

426
00:14:35,839 --> 00:14:38,160
this point y hat

427
00:14:38,160 --> 00:14:39,519
note that

428
00:14:39,519 --> 00:14:42,079
the signer doesn't know the discrete log

429
00:14:42,079 --> 00:14:43,680
of y hat because i've just you know

430
00:14:43,680 --> 00:14:45,600
evaluated a polynomial on a random point

431
00:14:45,600 --> 00:14:47,600
i have not created it with the tractor

432
00:14:47,600 --> 00:14:48,959
has done before

433
00:14:48,959 --> 00:14:51,199
so my signing procedure is going to be i

434
00:14:51,199 --> 00:14:54,000
will produce a signature of knowledge

435
00:14:54,000 --> 00:14:56,079
of the following statement

436
00:14:56,079 --> 00:14:59,680
that is either i know a witness for the

437
00:14:59,680 --> 00:15:00,959
public key

438
00:15:00,959 --> 00:15:02,399
which is indeed the case because i am

439
00:15:02,399 --> 00:15:04,959
the signer i know the secretary or

440
00:15:04,959 --> 00:15:07,040
i know a witness for this white hat

441
00:15:07,040 --> 00:15:08,880
which in this case i don't know

442
00:15:08,880 --> 00:15:10,639
so the intuition is in order to produce

443
00:15:10,639 --> 00:15:12,560
this proof designer is forced to use

444
00:15:12,560 --> 00:15:14,240
your secret key

445
00:15:14,240 --> 00:15:17,839
and then i will uh set the create

446
00:15:17,839 --> 00:15:20,480
element in a set p the set of proofs

447
00:15:20,480 --> 00:15:23,199
which collects this random point x hat

448
00:15:23,199 --> 00:15:25,440
that i've chosen from zp the evaluation

449
00:15:25,440 --> 00:15:27,440
of the polynomial y hat

450
00:15:27,440 --> 00:15:29,360
my public key the proof that i just

451
00:15:29,360 --> 00:15:31,040
created and a cipher text and the

452
00:15:31,040 --> 00:15:32,880
ciphertext is simply gonna be an

453
00:15:32,880 --> 00:15:35,199
encryption of junk because it doesn't

454
00:15:35,199 --> 00:15:37,279
matter for here but it will matter

455
00:15:37,279 --> 00:15:39,040
when we do

456
00:15:39,040 --> 00:15:41,839
extensions the signature is going to be

457
00:15:41,839 --> 00:15:44,639
the set p of proofs and then another set

458
00:15:44,639 --> 00:15:47,279
in this case of three trapdoor points

459
00:15:47,279 --> 00:15:48,800
which are the element in x that i

460
00:15:48,800 --> 00:15:50,240
created and the evaluation of the

461
00:15:50,240 --> 00:15:51,920
polynomials on which i know the

462
00:15:51,920 --> 00:15:54,160
trapdoors

463
00:15:54,160 --> 00:15:56,000
now when i want to extend

464
00:15:56,000 --> 00:15:58,320
i will create again another

465
00:15:58,320 --> 00:16:01,120
proof using my signature of knowledge

466
00:16:01,120 --> 00:16:02,800
of the a statement which is very similar

467
00:16:02,800 --> 00:16:04,880
to the previous one i'm basically saying

468
00:16:04,880 --> 00:16:07,600
i either know the public key pk prime

469
00:16:07,600 --> 00:16:09,040
which i'm extending

470
00:16:09,040 --> 00:16:10,160
or

471
00:16:10,160 --> 00:16:12,480
i know attractor for a point in the

472
00:16:12,480 --> 00:16:13,680
polynomial

473
00:16:13,680 --> 00:16:16,000
now you've seen that uh when i'm signing

474
00:16:16,000 --> 00:16:18,079
i'm actually creating these trapdoors

475
00:16:18,079 --> 00:16:20,320
this y one y two y three i'm generating

476
00:16:20,320 --> 00:16:22,959
them as g to the chapter one chapter two

477
00:16:22,959 --> 00:16:24,880
three so i actually know the tractors so

478
00:16:24,880 --> 00:16:27,360
when i'm signing i will start and hide

479
00:16:27,360 --> 00:16:29,440
myself into the initial ring

480
00:16:29,440 --> 00:16:32,000
and i will produce this pi this uh

481
00:16:32,000 --> 00:16:33,519
signature of knowledge using the

482
00:16:33,519 --> 00:16:35,519
trapdoors and not using the public key

483
00:16:35,519 --> 00:16:37,680
and here is where the ciphertext c comes

484
00:16:37,680 --> 00:16:41,360
into uh play here i will use the uh i

485
00:16:41,360 --> 00:16:44,959
will encrypt using the pretending signer

486
00:16:44,959 --> 00:16:47,120
encryption publicly i will encrypt the

487
00:16:47,120 --> 00:16:48,959
traffic for them so that should they

488
00:16:48,959 --> 00:16:51,360
want to join they can remove themselves

489
00:16:51,360 --> 00:16:53,040
add someone else

490
00:16:53,040 --> 00:16:56,079
and do a proper proof of knowledge

491
00:16:56,079 --> 00:16:58,000
the signature now uh that we obtained

492
00:16:58,000 --> 00:16:59,360
from the extension is going to be a

493
00:16:59,360 --> 00:17:01,600
bunch of proof of pjs

494
00:17:01,600 --> 00:17:03,519
obtained as i showed you and then all

495
00:17:03,519 --> 00:17:05,679
the thread all the trapdoors

496
00:17:05,679 --> 00:17:07,520
that i have not used

497
00:17:07,520 --> 00:17:09,599
to do this extension

498
00:17:09,599 --> 00:17:10,799
so

499
00:17:10,799 --> 00:17:13,039
this is an extender

500
00:17:13,039 --> 00:17:15,599
how are we gonna join

501
00:17:15,599 --> 00:17:17,919
so when i join i will pick sample

502
00:17:17,919 --> 00:17:20,480
another element in zp evaluate the

503
00:17:20,480 --> 00:17:22,799
polynomial again and i get my y hat

504
00:17:22,799 --> 00:17:26,079
prime of which again i'm i'm behaving

505
00:17:26,079 --> 00:17:27,760
almost as a signer i don't know this is

506
00:17:27,760 --> 00:17:30,000
a discrete log therefore i will produce

507
00:17:30,000 --> 00:17:32,240
a signature of knowledge of the witness

508
00:17:32,240 --> 00:17:34,320
that's either no the secret key of my

509
00:17:34,320 --> 00:17:36,080
public key or

510
00:17:36,080 --> 00:17:37,760
i know the discrete log of y prime which

511
00:17:37,760 --> 00:17:39,919
is not the case and then i will encrypt

512
00:17:39,919 --> 00:17:42,000
so the join procedure is very similar to

513
00:17:42,000 --> 00:17:43,360
the

514
00:17:43,360 --> 00:17:46,559
signing procedure

515
00:17:46,559 --> 00:17:48,400
and then again what i will

516
00:17:48,400 --> 00:17:51,200
output is this signature where i am

517
00:17:51,200 --> 00:17:53,520
collecting a set of proofs and a set of

518
00:17:53,520 --> 00:17:56,720
trapdoors for the unused points in the

519
00:17:56,720 --> 00:17:58,640
polynomial

520
00:17:58,640 --> 00:18:00,400
this is just an intuition of course you

521
00:18:00,400 --> 00:18:02,080
can check all of details you find them

522
00:18:02,080 --> 00:18:04,480
in the paper this is the

523
00:18:04,480 --> 00:18:06,240
very squeezed in

524
00:18:06,240 --> 00:18:08,400
uh algorithmic representation of the

525
00:18:08,400 --> 00:18:10,240
construction i don't expect you to read

526
00:18:10,240 --> 00:18:12,400
it up here but i strongly encourage you

527
00:18:12,400 --> 00:18:14,559
to have a look because it's a really

528
00:18:14,559 --> 00:18:16,080
cool

529
00:18:16,080 --> 00:18:19,760
ideas to obtain this extendability

530
00:18:19,760 --> 00:18:21,679
um i just want to spend a couple of

531
00:18:21,679 --> 00:18:23,919
words on our implementations so we do

532
00:18:23,919 --> 00:18:26,080
have implementation of on two of the

533
00:18:26,080 --> 00:18:27,919
schemes that we have and one of this is

534
00:18:27,919 --> 00:18:28,960
actually the

535
00:18:28,960 --> 00:18:30,799
extendable threshold ring signature from

536
00:18:30,799 --> 00:18:32,400
the discrete log construction that has

537
00:18:32,400 --> 00:18:35,120
just i've just shown you so in this

538
00:18:35,120 --> 00:18:37,200
graph you can see in orange the high

539
00:18:37,200 --> 00:18:38,480
most

540
00:18:38,480 --> 00:18:40,960
line is the signature size

541
00:18:40,960 --> 00:18:46,000
which is not too bad i would say um

542
00:18:46,000 --> 00:18:48,480
it's anywhere between 100 bytes and one

543
00:18:48,480 --> 00:18:51,840
megabytes so totally doable for you know

544
00:18:51,840 --> 00:18:52,960
the

545
00:18:52,960 --> 00:18:55,200
size of rings that go from you know one

546
00:18:55,200 --> 00:18:57,760
two people to two to the eleven so you

547
00:18:57,760 --> 00:19:00,160
know more than two thousand uh

548
00:19:00,160 --> 00:19:02,559
sorry two hundred no two thousand two to

549
00:19:02,559 --> 00:19:05,520
the eleven yeah good and the running

550
00:19:05,520 --> 00:19:08,960
times are fairly short in particular we

551
00:19:08,960 --> 00:19:12,320
have like 100 milliseconds so 0.1 second

552
00:19:12,320 --> 00:19:15,039
for rings of size of about 250 public

553
00:19:15,039 --> 00:19:17,600
keys and for other construction we also

554
00:19:17,600 --> 00:19:20,080
achieve a few milliseconds for rings of

555
00:19:20,080 --> 00:19:22,080
size less than 10

556
00:19:22,080 --> 00:19:23,760
and

557
00:19:23,760 --> 00:19:26,799
for links of size of 248 members we can

558
00:19:26,799 --> 00:19:29,840
create a signature in 0.24 seconds which

559
00:19:29,840 --> 00:19:31,039
is you know

560
00:19:31,039 --> 00:19:32,559
definitely

561
00:19:32,559 --> 00:19:36,000
in the realm of practicality

562
00:19:36,000 --> 00:19:38,320
good so that was the presentation i

563
00:19:38,320 --> 00:19:39,919
thank you for your attention and very

564
00:19:39,919 --> 00:19:43,640
much welcome questions

