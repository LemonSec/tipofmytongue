1
00:00:00,799 --> 00:00:03,120
hello and welcome to my talk about the

2
00:00:03,120 --> 00:00:05,279
paper on pairing free blind signature

3
00:00:05,279 --> 00:00:07,520
schemes in the algebraic group model

4
00:00:07,520 --> 00:00:09,840
this is joint work with julian los and

5
00:00:09,840 --> 00:00:11,840
jairuxu

6
00:00:11,840 --> 00:00:13,679
first i would like to explain what is a

7
00:00:13,679 --> 00:00:15,839
three-move blind signature scheme

8
00:00:15,839 --> 00:00:17,760
in the three-move blind signature scheme

9
00:00:17,760 --> 00:00:20,720
we have two parties a signer and a user

10
00:00:20,720 --> 00:00:23,119
and the signer has a secret key whereas

11
00:00:23,119 --> 00:00:25,039
the user has the corresponding public

12
00:00:25,039 --> 00:00:27,199
key and a message m that he would like

13
00:00:27,199 --> 00:00:29,519
to have signed

14
00:00:29,519 --> 00:00:31,840
the signer first computes a commitment r

15
00:00:31,840 --> 00:00:33,840
and sends it to the user

16
00:00:33,840 --> 00:00:36,079
then the user gets to choose a challenge

17
00:00:36,079 --> 00:00:38,640
c and sends it back to the signer

18
00:00:38,640 --> 00:00:41,360
the signer then generates a response s

19
00:00:41,360 --> 00:00:43,680
and this allows the user to compute a

20
00:00:43,680 --> 00:00:45,600
signature that is valid

21
00:00:45,600 --> 00:00:47,840
for the message m under the public key

22
00:00:47,840 --> 00:00:49,600
of the signer

23
00:00:49,600 --> 00:00:51,840
we want two notions of security the

24
00:00:51,840 --> 00:00:53,920
first one is called blindness in the

25
00:00:53,920 --> 00:00:56,480
blindness setting the signer is played

26
00:00:56,480 --> 00:00:58,879
by an adversary the adversary first

27
00:00:58,879 --> 00:01:02,000
chooses two messages m0 and m1 and he

28
00:01:02,000 --> 00:01:03,840
sends them over to the challenger who

29
00:01:03,840 --> 00:01:05,760
will play the user

30
00:01:05,760 --> 00:01:07,360
he then gets to interact with the

31
00:01:07,360 --> 00:01:09,200
challenger two times

32
00:01:09,200 --> 00:01:11,119
and in one of the sessions

33
00:01:11,119 --> 00:01:13,600
the challenger uses m0 and in the other

34
00:01:13,600 --> 00:01:15,759
he uses m1

35
00:01:15,759 --> 00:01:17,840
if both of these sessions which may be

36
00:01:17,840 --> 00:01:19,600
interleaved

37
00:01:19,600 --> 00:01:20,799
yield

38
00:01:20,799 --> 00:01:23,200
valid signatures in the end the signer

39
00:01:23,200 --> 00:01:25,200
gets to see the two signatures and has

40
00:01:25,200 --> 00:01:28,000
to decide which signature comes from

41
00:01:28,000 --> 00:01:30,159
which signing session if he guesses

42
00:01:30,159 --> 00:01:33,600
correctly he wins the game

43
00:01:33,680 --> 00:01:35,520
the other property that we want is

44
00:01:35,520 --> 00:01:37,920
called one more unforgeability

45
00:01:37,920 --> 00:01:40,159
one more unforgeability means the user

46
00:01:40,159 --> 00:01:42,399
is played by the adversary and he gets

47
00:01:42,399 --> 00:01:44,159
to see a public key

48
00:01:44,159 --> 00:01:46,320
then he gets interact with the signer

49
00:01:46,320 --> 00:01:48,479
who is played by the challenger and he

50
00:01:48,479 --> 00:01:50,399
can either do this sequentially which

51
00:01:50,399 --> 00:01:52,960
means he has to close a signing session

52
00:01:52,960 --> 00:01:55,040
before opening the next one

53
00:01:55,040 --> 00:01:57,119
or he can do it concurrently which means

54
00:01:57,119 --> 00:01:58,799
he is allowed to interleave the signing

55
00:01:58,799 --> 00:02:00,399
sessions

56
00:02:00,399 --> 00:02:02,880
after l such interactions

57
00:02:02,880 --> 00:02:04,640
he is supposed to output a one more

58
00:02:04,640 --> 00:02:05,759
forgery

59
00:02:05,759 --> 00:02:08,000
that means he is supposed to output l

60
00:02:08,000 --> 00:02:10,639
plus one message signature pairs

61
00:02:10,639 --> 00:02:12,239
that are valid with respect to the

62
00:02:12,239 --> 00:02:14,959
public key of the signer

63
00:02:14,959 --> 00:02:17,840
the original motivation for why we want

64
00:02:17,840 --> 00:02:21,280
blind signatures was electronic cache

65
00:02:21,280 --> 00:02:23,840
so if you want to go to the bank and

66
00:02:23,840 --> 00:02:25,680
withdraw some money so that you can buy

67
00:02:25,680 --> 00:02:28,080
something your bank could issue a blind

68
00:02:28,080 --> 00:02:30,319
signature to you that you can use like

69
00:02:30,319 --> 00:02:32,000
you could use cash

70
00:02:32,000 --> 00:02:33,840
so you can go and spend your blind

71
00:02:33,840 --> 00:02:37,040
signature and buy a bicycle for example

72
00:02:37,040 --> 00:02:38,560
and the reason why we want to use a

73
00:02:38,560 --> 00:02:40,000
blind signature

74
00:02:40,000 --> 00:02:42,720
is if your bank is malicious and wants

75
00:02:42,720 --> 00:02:44,560
to spy on people

76
00:02:44,560 --> 00:02:46,400
and the bank interacts with multiple

77
00:02:46,400 --> 00:02:48,080
users and issues multiple such

78
00:02:48,080 --> 00:02:50,080
signatures and then at some point

79
00:02:50,080 --> 00:02:52,720
someone goes and deposits a signature

80
00:02:52,720 --> 00:02:54,800
the bank cannot tell whether this person

81
00:02:54,800 --> 00:02:56,879
bought a bicycle or this person bought a

82
00:02:56,879 --> 00:02:59,360
bicycle

83
00:02:59,360 --> 00:03:02,959
also due to the one more unforgeability

84
00:03:02,959 --> 00:03:06,239
if one of the users is malicious and he

85
00:03:06,239 --> 00:03:08,239
interacts with a bank a bunch of times

86
00:03:08,239 --> 00:03:09,840
and gets some money

87
00:03:09,840 --> 00:03:12,159
he cannot generate more distinct

88
00:03:12,159 --> 00:03:14,959
signatures than he got from the bank so

89
00:03:14,959 --> 00:03:17,920
he cannot do this so if he at once he

90
00:03:17,920 --> 00:03:20,080
cannot generate a blue signature and a

91
00:03:20,080 --> 00:03:22,640
green signature

92
00:03:22,640 --> 00:03:24,799
however of course there is still the

93
00:03:24,799 --> 00:03:27,200
issue that he could copy the same

94
00:03:27,200 --> 00:03:29,519
signature several times so we still need

95
00:03:29,519 --> 00:03:31,519
some detection mechanism for that sort

96
00:03:31,519 --> 00:03:33,360
of attack

97
00:03:33,360 --> 00:03:36,080
another property of security that we may

98
00:03:36,080 --> 00:03:38,720
want is partial blindness so this would

99
00:03:38,720 --> 00:03:40,959
replace the full blindness in the

100
00:03:40,959 --> 00:03:42,799
partial blindness setting

101
00:03:42,799 --> 00:03:44,000
we want

102
00:03:44,000 --> 00:03:46,080
to include some additional information

103
00:03:46,080 --> 00:03:48,879
in the signatures so that they are only

104
00:03:48,879 --> 00:03:51,519
blind with respect to this information

105
00:03:51,519 --> 00:03:53,760
so this could be

106
00:03:53,760 --> 00:03:56,400
any info that the user and the signer

107
00:03:56,400 --> 00:03:58,159
can agree on which is something like the

108
00:03:58,159 --> 00:04:01,120
date or time or an expiration date or it

109
00:04:01,120 --> 00:04:02,480
could also be in the setting of

110
00:04:02,480 --> 00:04:05,040
electronic cash the value of the

111
00:04:05,040 --> 00:04:07,120
signature so you could have signatures

112
00:04:07,120 --> 00:04:09,760
that are worth 50 euros 100 euros 200

113
00:04:09,760 --> 00:04:11,200
euros

114
00:04:11,200 --> 00:04:13,040
in this work we consider two blind

115
00:04:13,040 --> 00:04:15,040
signature schemes the first one are

116
00:04:15,040 --> 00:04:17,358
blind snore signatures blind snow

117
00:04:17,358 --> 00:04:19,358
signatures are used currently in

118
00:04:19,358 --> 00:04:21,358
blockchain protocols that use schnoor

119
00:04:21,358 --> 00:04:24,800
signatures as their underlying scheme

120
00:04:24,800 --> 00:04:27,040
the blind snow signatures are vulnerable

121
00:04:27,040 --> 00:04:29,280
to something called the ros attack which

122
00:04:29,280 --> 00:04:31,919
you can apply when there are many open

123
00:04:31,919 --> 00:04:34,080
signing sessions at the same time

124
00:04:34,080 --> 00:04:36,479
and then you can linearly combine hash

125
00:04:36,479 --> 00:04:38,960
queries together to generate a one more

126
00:04:38,960 --> 00:04:40,560
forgery

127
00:04:40,560 --> 00:04:43,040
we also know that in the standard group

128
00:04:43,040 --> 00:04:45,600
model but with only the random orca

129
00:04:45,600 --> 00:04:48,000
model you cannot provide us proof of

130
00:04:48,000 --> 00:04:49,919
security for blind snore signatures

131
00:04:49,919 --> 00:04:53,680
using the standard forking technique

132
00:04:53,680 --> 00:04:55,840
but in the agm plus the random oracle

133
00:04:55,840 --> 00:04:58,560
model under the ros assumption and one

134
00:04:58,560 --> 00:05:00,639
more d-log we know that blind snow

135
00:05:00,639 --> 00:05:03,440
signatures can be proven secure

136
00:05:03,440 --> 00:05:05,280
but we also know that this ros

137
00:05:05,280 --> 00:05:06,720
assumption does not hold for

138
00:05:06,720 --> 00:05:09,199
polynomially many open sessions because

139
00:05:09,199 --> 00:05:10,960
there has been recently discovered a

140
00:05:10,960 --> 00:05:13,840
polytype attack on ross

141
00:05:13,840 --> 00:05:16,560
on the other hand there's arbi scheme

142
00:05:16,560 --> 00:05:19,520
which is immune to this ross attack

143
00:05:19,520 --> 00:05:22,160
but the original proof of arbor scheme

144
00:05:22,160 --> 00:05:24,880
was flawed which was discovered by okubo

145
00:05:24,880 --> 00:05:27,360
and abe who provided a proof in the ggm

146
00:05:27,360 --> 00:05:29,199
instead

147
00:05:29,199 --> 00:05:31,600
in this work we reconsider our scheme

148
00:05:31,600 --> 00:05:33,840
and we show that it is secure

149
00:05:33,840 --> 00:05:37,039
in the agm plus rom under d-log

150
00:05:37,039 --> 00:05:39,680
we also show that in the sequential

151
00:05:39,680 --> 00:05:41,680
setting schnorr scheme is secure in the

152
00:05:41,680 --> 00:05:44,320
agm plus rom under the one more d-lock

153
00:05:44,320 --> 00:05:45,520
assumption

154
00:05:45,520 --> 00:05:48,560
and we provide a proof that you need as

155
00:05:48,560 --> 00:05:50,479
many one more dealer queries as close

156
00:05:50,479 --> 00:05:53,039
signing sessions so in this sense our

157
00:05:53,039 --> 00:05:55,680
reduction is optimal

158
00:05:55,680 --> 00:05:57,680
let's look at our main technical tool

159
00:05:57,680 --> 00:06:00,639
that we need for our reductions

160
00:06:00,639 --> 00:06:03,199
we work in the algebraic group model and

161
00:06:03,199 --> 00:06:05,280
in the algebraic group model whenever an

162
00:06:05,280 --> 00:06:07,199
adversary gets a group element as an

163
00:06:07,199 --> 00:06:09,759
input and he outputs a group element he

164
00:06:09,759 --> 00:06:12,319
needs to explain how he computed

165
00:06:12,319 --> 00:06:14,560
the output group element from the input

166
00:06:14,560 --> 00:06:16,080
group elements

167
00:06:16,080 --> 00:06:18,240
so more formally this means the

168
00:06:18,240 --> 00:06:19,759
adversary needs to output this

169
00:06:19,759 --> 00:06:22,400
representation vector which is a vector

170
00:06:22,400 --> 00:06:25,440
of exponents that explains how you can

171
00:06:25,440 --> 00:06:27,840
get to the output element using the

172
00:06:27,840 --> 00:06:30,479
input elements

173
00:06:30,479 --> 00:06:32,400
let's look at the first signature scheme

174
00:06:32,400 --> 00:06:34,560
this is blind to nor signatures

175
00:06:34,560 --> 00:06:36,880
in the blind snore signature scheme we

176
00:06:36,880 --> 00:06:40,479
have a secret key that is an exponent x

177
00:06:40,479 --> 00:06:42,160
and the public key is just the group

178
00:06:42,160 --> 00:06:45,919
generator raised to that exponent x

179
00:06:45,919 --> 00:06:48,880
to generate a signature first the signer

180
00:06:48,880 --> 00:06:51,120
chooses an exponent r

181
00:06:51,120 --> 00:06:55,599
and he sends over g to the r to the user

182
00:06:55,599 --> 00:06:58,400
the user then blinds this value

183
00:06:58,400 --> 00:07:00,960
and hashes it along with a message to

184
00:07:00,960 --> 00:07:02,960
compute a challenge that is also a blind

185
00:07:02,960 --> 00:07:04,319
at hash value

186
00:07:04,319 --> 00:07:06,240
he then sends the challenge back to the

187
00:07:06,240 --> 00:07:08,479
signer and the signer computes this

188
00:07:08,479 --> 00:07:10,960
response

189
00:07:10,960 --> 00:07:12,479
from the response

190
00:07:12,479 --> 00:07:15,360
the user can unblind it and generate the

191
00:07:15,360 --> 00:07:18,400
actual signature

192
00:07:18,400 --> 00:07:20,960
our reduction which uses the one more

193
00:07:20,960 --> 00:07:22,560
d-log assumption

194
00:07:22,560 --> 00:07:25,599
works as follows so first we need to

195
00:07:25,599 --> 00:07:28,400
embed our d-log challenges somewhere

196
00:07:28,400 --> 00:07:30,800
the reduction therefore exchanges the

197
00:07:30,800 --> 00:07:32,720
public key for one of these one more

198
00:07:32,720 --> 00:07:34,479
deluge challenges

199
00:07:34,479 --> 00:07:36,479
and embeds all the other d-log

200
00:07:36,479 --> 00:07:38,960
challenges in these random values are in

201
00:07:38,960 --> 00:07:40,800
these commitments

202
00:07:40,800 --> 00:07:43,440
now the reduction can no longer sign so

203
00:07:43,440 --> 00:07:45,840
the reduction needs to sign using this

204
00:07:45,840 --> 00:07:48,080
dlog oracle

205
00:07:48,080 --> 00:07:50,400
and now we have a way to simulate the

206
00:07:50,400 --> 00:07:52,319
signing protocol

207
00:07:52,319 --> 00:07:54,400
we now need to extract a discrete

208
00:07:54,400 --> 00:07:55,520
logarithm

209
00:07:55,520 --> 00:07:58,800
so for this we use what is happening

210
00:07:58,800 --> 00:08:02,000
here so we use these hash queries

211
00:08:02,000 --> 00:08:04,160
and there's a group element contained in

212
00:08:04,160 --> 00:08:06,319
the hash queries so because we're in the

213
00:08:06,319 --> 00:08:09,120
agm we know that our

214
00:08:09,120 --> 00:08:11,039
adversary needs to explain how he

215
00:08:11,039 --> 00:08:13,199
computed them so he needs to provide

216
00:08:13,199 --> 00:08:14,800
this representation

217
00:08:14,800 --> 00:08:17,520
and now we hope that the representation

218
00:08:17,520 --> 00:08:20,000
is different from what is

219
00:08:20,000 --> 00:08:22,160
in the end presented to us as part of a

220
00:08:22,160 --> 00:08:23,919
signature

221
00:08:23,919 --> 00:08:27,199
so let's look at when can the adversary

222
00:08:27,199 --> 00:08:29,360
make these hash queries

223
00:08:29,360 --> 00:08:31,840
because we're in the sequential setting

224
00:08:31,840 --> 00:08:34,080
we can either have hash queries that are

225
00:08:34,080 --> 00:08:36,399
made like this so

226
00:08:36,399 --> 00:08:38,159
there's two hash queries that are made

227
00:08:38,159 --> 00:08:40,880
within the same signing session

228
00:08:40,880 --> 00:08:43,360
or alternatively the adversary makes a

229
00:08:43,360 --> 00:08:46,240
hash query outside of one of all the

230
00:08:46,240 --> 00:08:47,839
signing sessions so in between when

231
00:08:47,839 --> 00:08:49,440
there's no open signing session at the

232
00:08:49,440 --> 00:08:51,360
moment

233
00:08:51,360 --> 00:08:52,839
in the first

234
00:08:52,839 --> 00:08:56,240
case causing the representation to be

235
00:08:56,240 --> 00:08:58,720
the same as the values of the signature

236
00:08:58,720 --> 00:09:00,800
would mean that the adversary has solved

237
00:09:00,800 --> 00:09:03,839
a one was problem but we know that the

238
00:09:03,839 --> 00:09:07,200
one was problem is statistically hard

239
00:09:07,200 --> 00:09:09,600
on the other hand if the adversary

240
00:09:09,600 --> 00:09:12,959
manages to provoke this bad case

241
00:09:12,959 --> 00:09:15,279
in the situation where the hash query

242
00:09:15,279 --> 00:09:17,040
was made outside of all the signing

243
00:09:17,040 --> 00:09:18,240
sessions

244
00:09:18,240 --> 00:09:20,480
the adversary must have guessed the hash

245
00:09:20,480 --> 00:09:22,240
value this only happens with a

246
00:09:22,240 --> 00:09:24,880
probability of about one over the order

247
00:09:24,880 --> 00:09:26,560
of the group

248
00:09:26,560 --> 00:09:28,800
therefore we know that our reduction

249
00:09:28,800 --> 00:09:30,800
will very likely succeed in extracting

250
00:09:30,800 --> 00:09:33,040
the discrete logarithms first of the

251
00:09:33,040 --> 00:09:34,959
public key and then through the

252
00:09:34,959 --> 00:09:36,560
information it has learned during

253
00:09:36,560 --> 00:09:39,120
signing it can also compute the discrete

254
00:09:39,120 --> 00:09:42,720
logarithms of all the commitments

255
00:09:42,720 --> 00:09:44,640
we also show that our reduction is

256
00:09:44,640 --> 00:09:47,360
optimal in the sense that it uses as

257
00:09:47,360 --> 00:09:49,279
many one more dealer queries as it has

258
00:09:49,279 --> 00:09:51,440
to but not more

259
00:09:51,440 --> 00:09:53,839
so assume we had a reduction

260
00:09:53,839 --> 00:09:56,720
that uses one less one more dealer query

261
00:09:56,720 --> 00:09:58,959
than the closer signing sessions

262
00:09:58,959 --> 00:10:01,120
and assume also that this reduction is

263
00:10:01,120 --> 00:10:02,560
algebraic

264
00:10:02,560 --> 00:10:04,720
then we can employ a meta reduction that

265
00:10:04,720 --> 00:10:06,720
will simulate a one more forgery

266
00:10:06,720 --> 00:10:08,399
adversary

267
00:10:08,399 --> 00:10:10,800
by just looking at the algebraic

268
00:10:10,800 --> 00:10:12,720
representations that the reduction

269
00:10:12,720 --> 00:10:14,079
outputs

270
00:10:14,079 --> 00:10:15,600
and from them

271
00:10:15,600 --> 00:10:18,320
trying to create a one more forgery so

272
00:10:18,320 --> 00:10:21,040
it can solve a linear equation system

273
00:10:21,040 --> 00:10:23,760
and then the reduction will actually

274
00:10:23,760 --> 00:10:27,200
solve one more discrete log

275
00:10:27,200 --> 00:10:29,279
this must mean that actually the one

276
00:10:29,279 --> 00:10:31,200
more discrete log problem was easy in

277
00:10:31,200 --> 00:10:33,120
the group

278
00:10:33,120 --> 00:10:35,839
therefore our reduction is optimal with

279
00:10:35,839 --> 00:10:37,839
respect to the amount of one more d-log

280
00:10:37,839 --> 00:10:39,760
queries made

281
00:10:39,760 --> 00:10:42,320
so let's consider what our reduction can

282
00:10:42,320 --> 00:10:45,120
do to simulate signatures

283
00:10:45,120 --> 00:10:47,200
because we're in the d-log setting we

284
00:10:47,200 --> 00:10:49,600
only need to embed one challenge

285
00:10:49,600 --> 00:10:51,530
and the reduction can do this in

286
00:10:51,530 --> 00:10:52,640
[Music]

287
00:10:52,640 --> 00:10:55,600
some different ways so first it could

288
00:10:55,600 --> 00:10:58,160
embed the d-log challenge in the public

289
00:10:58,160 --> 00:10:59,440
key

290
00:10:59,440 --> 00:11:02,480
then it needs to know the

291
00:11:02,480 --> 00:11:04,399
discrete logarithms of the other two

292
00:11:04,399 --> 00:11:05,920
group elements so

293
00:11:05,920 --> 00:11:07,600
so know the witness

294
00:11:07,600 --> 00:11:10,160
to the pink branch of the or proof

295
00:11:10,160 --> 00:11:12,240
it can do this by programming the random

296
00:11:12,240 --> 00:11:14,160
oracle accordingly so that it knows the

297
00:11:14,160 --> 00:11:16,480
discrete logarithms

298
00:11:16,480 --> 00:11:18,800
the other option is it could embed the

299
00:11:18,800 --> 00:11:21,120
discrete logarithm in one of the pink

300
00:11:21,120 --> 00:11:24,320
parts so here in this age or in the set

301
00:11:24,320 --> 00:11:26,399
and then just generate signatures like

302
00:11:26,399 --> 00:11:28,160
the normal signer would because it

303
00:11:28,160 --> 00:11:29,920
doesn't need to know

304
00:11:29,920 --> 00:11:32,399
the discrete logarithms of these parts

305
00:11:32,399 --> 00:11:34,079
then it only needs to know the secret

306
00:11:34,079 --> 00:11:36,319
key

307
00:11:36,480 --> 00:11:38,000
so let's look at what happens with the

308
00:11:38,000 --> 00:11:40,320
linking components

309
00:11:40,320 --> 00:11:42,880
as we have seen before there is a hidden

310
00:11:42,880 --> 00:11:44,959
link between a signature and a signing

311
00:11:44,959 --> 00:11:45,839
session

312
00:11:45,839 --> 00:11:47,440
but when there's more signatures than

313
00:11:47,440 --> 00:11:49,680
there are signing sessions there's two

314
00:11:49,680 --> 00:11:51,440
cases that can occur

315
00:11:51,440 --> 00:11:54,880
either there must be a signature

316
00:11:54,880 --> 00:11:57,360
where the hidden link doesn't match any

317
00:11:57,360 --> 00:11:59,680
of the signing sessions

318
00:11:59,680 --> 00:12:02,480
or there's two special signatures

319
00:12:02,480 --> 00:12:05,760
that belong to the same signing session

320
00:12:05,760 --> 00:12:08,399
we now want to look at the hash queries

321
00:12:08,399 --> 00:12:10,639
that are made for these special

322
00:12:10,639 --> 00:12:13,200
signatures

323
00:12:13,440 --> 00:12:15,920
so here is a hash query that was made

324
00:12:15,920 --> 00:12:18,160
for a special signature

325
00:12:18,160 --> 00:12:19,839
we know that for each of the group

326
00:12:19,839 --> 00:12:22,000
elements that is contained in this hash

327
00:12:22,000 --> 00:12:24,240
query the adversary has to submit a

328
00:12:24,240 --> 00:12:25,680
representation

329
00:12:25,680 --> 00:12:27,440
so from this representation we can

330
00:12:27,440 --> 00:12:29,279
compute what we call preliminary

331
00:12:29,279 --> 00:12:30,880
components

332
00:12:30,880 --> 00:12:33,120
and these correspond to components of

333
00:12:33,120 --> 00:12:35,760
the actual signature and we want them to

334
00:12:35,760 --> 00:12:37,519
not be the same as the corresponding

335
00:12:37,519 --> 00:12:39,839
component in the actual signature

336
00:12:39,839 --> 00:12:42,240
so for the green part we have an omega

337
00:12:42,240 --> 00:12:43,200
prime

338
00:12:43,200 --> 00:12:45,200
and for the pink part we actually get

339
00:12:45,200 --> 00:12:49,519
three preliminary potential values

340
00:12:50,399 --> 00:12:53,200
we also know that

341
00:12:53,200 --> 00:12:55,519
omega plus delta needs to be the hash

342
00:12:55,519 --> 00:12:56,959
value

343
00:12:56,959 --> 00:12:57,839
so

344
00:12:57,839 --> 00:13:00,079
we hope that these preliminary

345
00:13:00,079 --> 00:13:02,639
components will not be the same as the

346
00:13:02,639 --> 00:13:04,839
components in the

347
00:13:04,839 --> 00:13:07,680
signature now we want to look into

348
00:13:07,680 --> 00:13:10,480
how can the adversary maybe provoke this

349
00:13:10,480 --> 00:13:12,560
so that this bad case happens where they

350
00:13:12,560 --> 00:13:14,399
are actually the same

351
00:13:14,399 --> 00:13:16,000
the first way the adversary could

352
00:13:16,000 --> 00:13:17,680
provoke this is by just guessing the

353
00:13:17,680 --> 00:13:18,880
hash value

354
00:13:18,880 --> 00:13:22,079
this is the same as in the snore case

355
00:13:22,079 --> 00:13:24,240
but it only has probability one over

356
00:13:24,240 --> 00:13:26,320
order of the group

357
00:13:26,320 --> 00:13:28,160
then we also show

358
00:13:28,160 --> 00:13:30,800
that if the adversary manages to do this

359
00:13:30,800 --> 00:13:32,880
while still behaving like we expect him

360
00:13:32,880 --> 00:13:33,600
to

361
00:13:33,600 --> 00:13:35,519
he must have solved some discrete log

362
00:13:35,519 --> 00:13:37,760
problems so we provide a reduction that

363
00:13:37,760 --> 00:13:40,639
solves discrete log if the adversary

364
00:13:40,639 --> 00:13:42,639
generates these matching

365
00:13:42,639 --> 00:13:45,040
preliminary components to the actual

366
00:13:45,040 --> 00:13:46,800
components

367
00:13:46,800 --> 00:13:49,440
and then the last cases of course for

368
00:13:49,440 --> 00:13:52,079
honestly created signatures

369
00:13:52,079 --> 00:13:54,240
these preliminary components are the

370
00:13:54,240 --> 00:13:57,199
same as the signature components

371
00:13:57,199 --> 00:13:58,320
and

372
00:13:58,320 --> 00:14:00,240
so this means

373
00:14:00,240 --> 00:14:02,880
first of all this one special case where

374
00:14:02,880 --> 00:14:04,079
their

375
00:14:04,079 --> 00:14:06,720
linking components are mismatched cannot

376
00:14:06,720 --> 00:14:07,839
occur

377
00:14:07,839 --> 00:14:10,240
and the other case is we now have two

378
00:14:10,240 --> 00:14:11,920
signatures that belong to the same

379
00:14:11,920 --> 00:14:13,600
signing session

380
00:14:13,600 --> 00:14:15,519
but in order to match the preliminary

381
00:14:15,519 --> 00:14:17,920
components here the adversary would need

382
00:14:17,920 --> 00:14:20,800
to solve a one worse problem and we have

383
00:14:20,800 --> 00:14:22,880
seen before the one was problem is

384
00:14:22,880 --> 00:14:24,959
statistically hard

385
00:14:24,959 --> 00:14:28,399
so this means that for our reduction the

386
00:14:28,399 --> 00:14:31,600
probability that the adversary generates

387
00:14:31,600 --> 00:14:34,079
the bad case for the reduction is very

388
00:14:34,079 --> 00:14:36,319
low

389
00:14:36,399 --> 00:14:38,399
thus our reduction can solve the

390
00:14:38,399 --> 00:14:41,760
discrete logarithm problem

391
00:14:42,959 --> 00:14:44,639
to recap

392
00:14:44,639 --> 00:14:46,399
we showed that our scheme is

393
00:14:46,399 --> 00:14:49,279
concurrently secure in the agm plus rom

394
00:14:49,279 --> 00:14:51,920
under the plain d-lock assumption

395
00:14:51,920 --> 00:14:54,240
we also showed that schnoor scheme is

396
00:14:54,240 --> 00:14:56,000
sequentially secure

397
00:14:56,000 --> 00:14:58,480
in the agm plus rom under the one more d

398
00:14:58,480 --> 00:14:59,760
look assumption

399
00:14:59,760 --> 00:15:02,880
and we saw that we need as many

400
00:15:02,880 --> 00:15:05,760
one more d log queries as our reduction

401
00:15:05,760 --> 00:15:06,639
makes

402
00:15:06,639 --> 00:15:08,720
so our reduction is optimal in this

403
00:15:08,720 --> 00:15:10,480
sense

404
00:15:10,480 --> 00:15:12,480
it leaves the open questions

405
00:15:12,480 --> 00:15:15,279
of what happens to other scheme in the

406
00:15:15,279 --> 00:15:17,680
random oracle model only so is there

407
00:15:17,680 --> 00:15:20,000
maybe a way to provide a forking proof

408
00:15:20,000 --> 00:15:22,880
without having to employ the agm or the

409
00:15:22,880 --> 00:15:24,839
ggm

410
00:15:24,839 --> 00:15:27,360
also it would be interesting to look

411
00:15:27,360 --> 00:15:29,600
into what happens to schnoor scheme when

412
00:15:29,600 --> 00:15:32,720
we have a setting with low concurrency

413
00:15:32,720 --> 00:15:34,880
so

414
00:15:34,880 --> 00:15:37,600
not many open signing sessions at the

415
00:15:37,600 --> 00:15:40,079
same time but a few so maybe a constant

416
00:15:40,079 --> 00:15:42,479
amount

417
00:15:42,560 --> 00:15:44,880
this concludes my talk i thank you for

418
00:15:44,880 --> 00:15:46,639
your attention

419
00:15:46,639 --> 00:15:48,880
here are my references

420
00:15:48,880 --> 00:15:50,320
and i hope to see you all at the

421
00:15:50,320 --> 00:15:53,320
conference

