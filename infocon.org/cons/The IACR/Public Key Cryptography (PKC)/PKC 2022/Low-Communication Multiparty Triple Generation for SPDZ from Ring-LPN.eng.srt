1
00:00:00,160 --> 00:00:02,720
so hi my name is damiano and now i'm

2
00:00:02,720 --> 00:00:05,120
going to present a giant project with

3
00:00:05,120 --> 00:00:07,200
peter shaw titled multi-party

4
00:00:07,200 --> 00:00:09,599
multiplication triples for speeds from

5
00:00:09,599 --> 00:00:11,280
ring alpian

6
00:00:11,280 --> 00:00:13,840
so the main contribution of our work is

7
00:00:13,840 --> 00:00:15,679
the design of an actively secure npc

8
00:00:15,679 --> 00:00:17,600
protocol for the generation of

9
00:00:17,600 --> 00:00:19,760
authenticated pillar triples and the

10
00:00:19,760 --> 00:00:22,000
novelty is that this construction

11
00:00:22,000 --> 00:00:24,000
achieves sublinear communication in the

12
00:00:24,000 --> 00:00:26,560
amount of generated material

13
00:00:26,560 --> 00:00:29,119
so i will start by explaining what speed

14
00:00:29,119 --> 00:00:31,439
is so speeds is an efficient multi-party

15
00:00:31,439 --> 00:00:34,000
computation protocol for computations

16
00:00:34,000 --> 00:00:36,480
over a large prime field f and it

17
00:00:36,480 --> 00:00:38,879
achieves active security by relying on

18
00:00:38,879 --> 00:00:40,480
the online phase of length phase

19
00:00:40,480 --> 00:00:43,840
paradigm specifically we have this input

20
00:00:43,840 --> 00:00:45,760
pre-processing phase called offline

21
00:00:45,760 --> 00:00:46,719
phase

22
00:00:46,719 --> 00:00:47,440
where

23
00:00:47,440 --> 00:00:49,280
the parties generate large amount of

24
00:00:49,280 --> 00:00:51,680
correlated material and later on in the

25
00:00:51,680 --> 00:00:54,000
online phase the parties use this

26
00:00:54,000 --> 00:00:56,079
correlated randomness to compute the

27
00:00:56,079 --> 00:00:58,239
output of their function in a secure way

28
00:00:58,239 --> 00:01:00,000
so without revealing any information

29
00:01:00,000 --> 00:01:03,039
about the inputs

30
00:01:03,039 --> 00:01:05,920
thanks to this paradigm the complexity

31
00:01:05,920 --> 00:01:08,560
of the online phase is really low

32
00:01:08,560 --> 00:01:09,280
so

33
00:01:09,280 --> 00:01:11,200
the main type of correlated material

34
00:01:11,200 --> 00:01:13,200
that we generate in the offline phase is

35
00:01:13,200 --> 00:01:15,200
called beaver triple or multiplication

36
00:01:15,200 --> 00:01:18,479
triples and as the name suggests these

37
00:01:18,479 --> 00:01:20,720
are needed to compute multiplications

38
00:01:20,720 --> 00:01:22,880
specifically we need one multiplication

39
00:01:22,880 --> 00:01:25,200
triple per multiplication gate

40
00:01:25,200 --> 00:01:27,280
and so we need a lot of them and usually

41
00:01:27,280 --> 00:01:29,040
the generation of these is rather

42
00:01:29,040 --> 00:01:31,439
expensive so which is exactly a beaver

43
00:01:31,439 --> 00:01:33,600
triple as i said at the beginning we are

44
00:01:33,600 --> 00:01:36,560
working over a large prime field f

45
00:01:36,560 --> 00:01:38,840
and suppose that n is the number of

46
00:01:38,840 --> 00:01:41,439
parties so bigger triple is a random

47
00:01:41,439 --> 00:01:43,360
tuple of secret shared elements as the

48
00:01:43,360 --> 00:01:45,360
one that you see on the screen so we

49
00:01:45,360 --> 00:01:48,159
have x and y that are uniformly random

50
00:01:48,159 --> 00:01:50,240
over the field and then we have a secret

51
00:01:50,240 --> 00:01:52,159
sharing of their product

52
00:01:52,159 --> 00:01:54,399
here the square brackets denote additive

53
00:01:54,399 --> 00:01:57,119
secret sharing among the end parties

54
00:01:57,119 --> 00:01:59,200
so beaver triple is the union of these

55
00:01:59,200 --> 00:02:01,520
three terms and actually it allows us

56
00:02:01,520 --> 00:02:03,759
only to achieve passive security

57
00:02:03,759 --> 00:02:06,079
and speeds wants active security so the

58
00:02:06,079 --> 00:02:09,360
construction introduces a mackie alpha

59
00:02:09,360 --> 00:02:11,280
that is uniformly distributed over the

60
00:02:11,280 --> 00:02:12,959
field and secret shared among them

61
00:02:12,959 --> 00:02:14,480
parties

62
00:02:14,480 --> 00:02:16,800
alpha is used to authenticate all the

63
00:02:16,800 --> 00:02:19,599
beaver triples and this is done by

64
00:02:19,599 --> 00:02:22,560
introducing some necks that are also

65
00:02:22,560 --> 00:02:24,879
secret shared among the n parties

66
00:02:24,879 --> 00:02:27,440
so we have x times alpha the mac over x

67
00:02:27,440 --> 00:02:30,560
x y times alpha the mac over y and x

68
00:02:30,560 --> 00:02:32,959
times y times alpha the mac over the

69
00:02:32,959 --> 00:02:34,080
product

70
00:02:34,080 --> 00:02:36,080
and yeah the union of the bigger triple

71
00:02:36,080 --> 00:02:38,560
with its max is called an authenticated

72
00:02:38,560 --> 00:02:40,720
builder triple okay now i'm going to

73
00:02:40,720 --> 00:02:42,879
talk about the main tool that allowed us

74
00:02:42,879 --> 00:02:45,120
to achieve low communication complexity

75
00:02:45,120 --> 00:02:47,519
in our triple generation protocols and

76
00:02:47,519 --> 00:02:48,720
this is called the pseudorandom

77
00:02:48,720 --> 00:02:52,000
correlation generator or pcg for short

78
00:02:52,000 --> 00:02:54,400
so pcg is a particular construction that

79
00:02:54,400 --> 00:02:56,319
allows us to generate large amounts of

80
00:02:56,319 --> 00:02:57,840
correlated material with no

81
00:02:57,840 --> 00:02:59,840
communication and this is done by

82
00:02:59,840 --> 00:03:02,480
expanding small correlated seeds so

83
00:03:02,480 --> 00:03:04,800
specifically a pcg is an unparty

84
00:03:04,800 --> 00:03:08,480
construction so let me draw and parties

85
00:03:08,480 --> 00:03:10,720
and we tackle some correlation function

86
00:03:10,720 --> 00:03:14,879
c so let's denote the outputs by r1 rn

87
00:03:14,879 --> 00:03:17,120
so these are correlated values and there

88
00:03:17,120 --> 00:03:19,920
is one for each party in particular ri

89
00:03:19,920 --> 00:03:22,959
is addressed to party pi

90
00:03:22,959 --> 00:03:26,560
so the pcg specifies how to generate n

91
00:03:26,560 --> 00:03:29,120
small seeds k1 kn

92
00:03:29,120 --> 00:03:32,000
and their generation is performed by a

93
00:03:32,000 --> 00:03:34,959
trusted dealer so after

94
00:03:34,959 --> 00:03:37,599
the seats have been distributed all the

95
00:03:37,599 --> 00:03:39,760
parties can locally expand them so

96
00:03:39,760 --> 00:03:41,519
without any interaction

97
00:03:41,519 --> 00:03:43,760
obtaining large amounts of correlated

98
00:03:43,760 --> 00:03:46,640
material so i will write that bar dpi

99
00:03:46,640 --> 00:03:49,840
obtains the vector ri so p2 obtains the

100
00:03:49,840 --> 00:03:53,599
vector r2 p1 obtains the vector r1

101
00:03:53,599 --> 00:03:56,480
and with this notation i mean that these

102
00:03:56,480 --> 00:03:58,959
n vectors are all correlated entry by

103
00:03:58,959 --> 00:04:00,959
entry according to c

104
00:04:00,959 --> 00:04:04,879
specifically its entry of the vector ri

105
00:04:04,879 --> 00:04:07,120
has the same form as the i's output of

106
00:04:07,120 --> 00:04:09,439
the correlation functions

107
00:04:09,439 --> 00:04:11,439
so now i would like to talk a little bit

108
00:04:11,439 --> 00:04:13,680
about security of pcgs and in order to

109
00:04:13,680 --> 00:04:15,920
do so assume that the subset of parties

110
00:04:15,920 --> 00:04:17,600
is corrupt

111
00:04:17,600 --> 00:04:19,680
so clearly the corrupted parties know

112
00:04:19,680 --> 00:04:22,079
their outputs and these outputs leak

113
00:04:22,079 --> 00:04:23,600
some information about the outputs of

114
00:04:23,600 --> 00:04:25,919
the honda's parties that's because the

115
00:04:25,919 --> 00:04:28,320
samples that we obtained by expanding

116
00:04:28,320 --> 00:04:31,600
the pcg acids are all correlated

117
00:04:31,600 --> 00:04:32,639
so

118
00:04:32,639 --> 00:04:34,560
there is nothing we can do to avoid this

119
00:04:34,560 --> 00:04:36,479
liquid it's something intrinsic in the

120
00:04:36,479 --> 00:04:38,000
problem

121
00:04:38,000 --> 00:04:39,759
however notice that there is another

122
00:04:39,759 --> 00:04:41,919
potential issue namely that the

123
00:04:41,919 --> 00:04:44,240
corrupted parties also see

124
00:04:44,240 --> 00:04:47,120
their seeds and these seeds may leak

125
00:04:47,120 --> 00:04:49,280
some additional information and we don't

126
00:04:49,280 --> 00:04:50,400
want that

127
00:04:50,400 --> 00:04:52,960
so the security definition of pcgs

128
00:04:52,960 --> 00:04:54,800
states exactly this

129
00:04:54,800 --> 00:04:57,520
uh the seeds of the corrupted parties

130
00:04:57,520 --> 00:04:59,360
leaked no information about the outputs

131
00:04:59,360 --> 00:05:01,840
of the homeless parties except what can

132
00:05:01,840 --> 00:05:04,400
be inferred from their expansion r2 and

133
00:05:04,400 --> 00:05:05,680
ri

134
00:05:05,680 --> 00:05:07,759
so at the beginning it may seem strange

135
00:05:07,759 --> 00:05:09,840
that we base our triple generation

136
00:05:09,840 --> 00:05:12,240
protocol on these pcg constructions that

137
00:05:12,240 --> 00:05:14,400
need a trusted dealer for the generation

138
00:05:14,400 --> 00:05:15,759
of the seeds

139
00:05:15,759 --> 00:05:18,000
indeed the whole point of a triple

140
00:05:18,000 --> 00:05:20,080
generation protocol is to get rid of

141
00:05:20,080 --> 00:05:22,400
trusted dealers in speeds

142
00:05:22,400 --> 00:05:25,600
however notice that the pcg seeds are

143
00:05:25,600 --> 00:05:28,240
all small so usually it is not hard to

144
00:05:28,240 --> 00:05:30,240
design multiparty computation protocols

145
00:05:30,240 --> 00:05:32,240
that generate and distribute them with

146
00:05:32,240 --> 00:05:34,720
linear communication in the seed size

147
00:05:34,720 --> 00:05:36,479
so when we combust these protocols with

148
00:05:36,479 --> 00:05:38,400
the expansion phase and this composition

149
00:05:38,400 --> 00:05:40,080
is trivially secure because the

150
00:05:40,080 --> 00:05:42,800
expansion is not interactive we obtain

151
00:05:42,800 --> 00:05:44,800
protocols that generate large amounts of

152
00:05:44,800 --> 00:05:47,360
correlated randomness with sub-linear

153
00:05:47,360 --> 00:05:49,680
communication in the size of the output

154
00:05:49,680 --> 00:05:52,320
and this is exactly what we want so

155
00:05:52,320 --> 00:05:54,080
recently there has been some work on

156
00:05:54,080 --> 00:05:56,479
pcgs for bigger triples and the first

157
00:05:56,479 --> 00:05:59,919
work is by boy little at crypto 2018

158
00:05:59,919 --> 00:06:02,960
where they designed a pcg that generates

159
00:06:02,960 --> 00:06:05,120
and unauthenticated bigger triples for

160
00:06:05,120 --> 00:06:08,560
end parties with logarithmic seed size

161
00:06:08,560 --> 00:06:10,800
in the number of triples that are

162
00:06:10,800 --> 00:06:12,639
generated

163
00:06:12,639 --> 00:06:15,039
one year later the same authors designed

164
00:06:15,039 --> 00:06:17,919
another pcg but now for authenticated

165
00:06:17,919 --> 00:06:20,560
beaver triples and the seat size is

166
00:06:20,560 --> 00:06:22,560
still logarithmic in end

167
00:06:22,560 --> 00:06:24,880
however this construction works only in

168
00:06:24,880 --> 00:06:27,039
the two-party setting

169
00:06:27,039 --> 00:06:28,880
but what about authenticated beaver

170
00:06:28,880 --> 00:06:31,600
triple in the n-party setting

171
00:06:31,600 --> 00:06:34,080
well until recently no efficient

172
00:06:34,080 --> 00:06:36,000
construction was known

173
00:06:36,000 --> 00:06:38,240
but in this work we present the solution

174
00:06:38,240 --> 00:06:41,280
with o of square root of finance in size

175
00:06:41,280 --> 00:06:44,319
so the security of our pcg relies on the

176
00:06:44,319 --> 00:06:46,240
ring lpn assumption which i'm going to

177
00:06:46,240 --> 00:06:49,919
describe now so our setting is a ring r

178
00:06:49,919 --> 00:06:51,759
which is the quotient between the

179
00:06:51,759 --> 00:06:54,319
polynomial ring over the field f

180
00:06:54,319 --> 00:06:56,720
and the idea generated by a polynomial f

181
00:06:56,720 --> 00:06:58,400
of x

182
00:06:58,400 --> 00:07:00,639
we also introduce two parameters the

183
00:07:00,639 --> 00:07:03,840
first one is a small constant c

184
00:07:03,840 --> 00:07:05,919
and then we have t that is roughly the

185
00:07:05,919 --> 00:07:09,520
size of the security parameter lambda

186
00:07:09,520 --> 00:07:11,520
we also introduce a distribution which

187
00:07:11,520 --> 00:07:14,000
is denoted by hwt

188
00:07:14,000 --> 00:07:16,560
and this samples a random t sparse

189
00:07:16,560 --> 00:07:18,000
polynomial

190
00:07:18,000 --> 00:07:20,160
over the ring are

191
00:07:20,160 --> 00:07:23,039
and with t sparse i mean

192
00:07:23,039 --> 00:07:25,680
that this polynomial has at most t

193
00:07:25,680 --> 00:07:28,720
non-zero coefficients

194
00:07:28,720 --> 00:07:30,800
now consider the following pair we have

195
00:07:30,800 --> 00:07:34,080
a that is uniformly distributed over r

196
00:07:34,080 --> 00:07:37,120
to the c so c is this small parameter

197
00:07:37,120 --> 00:07:38,240
here

198
00:07:38,240 --> 00:07:40,240
and then we have the inner product

199
00:07:40,240 --> 00:07:44,879
between a and another vector e and e is

200
00:07:44,879 --> 00:07:49,199
sampled according to hwt to the c

201
00:07:49,199 --> 00:07:51,440
specifically that means that e is a

202
00:07:51,440 --> 00:07:54,400
c-dimensional vector and each entry of e

203
00:07:54,400 --> 00:07:58,319
is a t-sparse polynomial in the ring r

204
00:07:58,319 --> 00:08:00,479
so the ring lpn assumption states that

205
00:08:00,479 --> 00:08:01,919
this pair is computationally

206
00:08:01,919 --> 00:08:04,240
indistinguishable from a

207
00:08:04,240 --> 00:08:05,039
u

208
00:08:05,039 --> 00:08:08,639
where a is again uniform over r to the c

209
00:08:08,639 --> 00:08:09,840
whereas u

210
00:08:09,840 --> 00:08:12,400
is uniform over r

211
00:08:12,400 --> 00:08:14,639
so essentially the rpm assumption states

212
00:08:14,639 --> 00:08:16,879
that even if a is known the inner

213
00:08:16,879 --> 00:08:19,840
product looks random over the ring r

214
00:08:19,840 --> 00:08:21,759
so the second tool that we used for the

215
00:08:21,759 --> 00:08:23,919
construction of our pcg is called

216
00:08:23,919 --> 00:08:26,240
distributed point function or dpf for

217
00:08:26,240 --> 00:08:29,280
short so a dpf is a particular tool that

218
00:08:29,280 --> 00:08:31,440
allows us to compress an n party secret

219
00:08:31,440 --> 00:08:34,399
sharing of a unit vector into n small

220
00:08:34,399 --> 00:08:35,599
keys

221
00:08:35,599 --> 00:08:39,200
so a unit vector is a particular vector

222
00:08:39,200 --> 00:08:41,919
where all the entries are 0 except for

223
00:08:41,919 --> 00:08:42,958
1.

224
00:08:42,958 --> 00:08:45,200
on this slide i deducted the nonzero

225
00:08:45,200 --> 00:08:48,800
element by a red square and its position

226
00:08:48,800 --> 00:08:50,720
is called the special position of the

227
00:08:50,720 --> 00:08:52,000
unit vector

228
00:08:52,000 --> 00:08:55,680
and we denote it by omega so a dpf takes

229
00:08:55,680 --> 00:08:59,040
as input a unit vector and outputs n

230
00:08:59,040 --> 00:09:01,920
small keys one for each party

231
00:09:01,920 --> 00:09:04,640
and the size of the keys is sublinear in

232
00:09:04,640 --> 00:09:06,800
the size of the unit vector that is

233
00:09:06,800 --> 00:09:08,399
given as input

234
00:09:08,399 --> 00:09:10,640
moreover even if the part is collude the

235
00:09:10,640 --> 00:09:13,120
keys leak new information about the

236
00:09:13,120 --> 00:09:15,839
special position omega and the non-zero

237
00:09:15,839 --> 00:09:17,839
element the red square

238
00:09:17,839 --> 00:09:19,920
and finally

239
00:09:19,920 --> 00:09:21,680
the compression has also the nice

240
00:09:21,680 --> 00:09:23,519
property that is invertible so the

241
00:09:23,519 --> 00:09:25,680
parties can take their keys and expand

242
00:09:25,680 --> 00:09:27,920
them locally so without any interaction

243
00:09:27,920 --> 00:09:31,279
obtaining a non-party secret sharing of

244
00:09:31,279 --> 00:09:33,600
the unit vector that was given as input

245
00:09:33,600 --> 00:09:35,519
for the key generation

246
00:09:35,519 --> 00:09:37,040
so what is the state of the art of

247
00:09:37,040 --> 00:09:39,120
distributed point functions in the

248
00:09:39,120 --> 00:09:40,480
two-party setting they are really

249
00:09:40,480 --> 00:09:42,560
efficient indeed we know constructions

250
00:09:42,560 --> 00:09:45,440
that have logarithmic key size in the

251
00:09:45,440 --> 00:09:47,279
length of the unit vector that we give

252
00:09:47,279 --> 00:09:49,600
as input however in the three-part

253
00:09:49,600 --> 00:09:51,519
setting the constructions are not as

254
00:09:51,519 --> 00:09:54,000
efficient indeed the best solution

255
00:09:54,000 --> 00:09:57,440
have o of square root of n key size

256
00:09:57,440 --> 00:09:59,440
finally in the n-party setting they get

257
00:09:59,440 --> 00:10:02,480
even worse because yes the key size is

258
00:10:02,480 --> 00:10:04,800
still of square root of n but there is

259
00:10:04,800 --> 00:10:07,200
also a factor that is exponential in the

260
00:10:07,200 --> 00:10:09,120
number of parties

261
00:10:09,120 --> 00:10:11,519
so we can finally talk about our pcg for

262
00:10:11,519 --> 00:10:14,079
multiparty beaver triple our goal is to

263
00:10:14,079 --> 00:10:17,120
take a mc alpha uniform over the field

264
00:10:17,120 --> 00:10:20,000
and and authenticated bigger triples and

265
00:10:20,000 --> 00:10:22,720
compress them into some small material

266
00:10:22,720 --> 00:10:24,480
so the first thing that we do is to

267
00:10:24,480 --> 00:10:26,720
choose the ring r where we instantiate

268
00:10:26,720 --> 00:10:28,240
the ring lpn assumption and in

269
00:10:28,240 --> 00:10:30,320
particular we choose r to be isomorphic

270
00:10:30,320 --> 00:10:32,959
to f to the n where f to the n is a ring

271
00:10:32,959 --> 00:10:34,720
with entry wise addition and

272
00:10:34,720 --> 00:10:36,079
multiplication

273
00:10:36,079 --> 00:10:37,920
it is possible to make this choice

274
00:10:37,920 --> 00:10:40,399
because the polynomial f of x here does

275
00:10:40,399 --> 00:10:43,279
not need to be reducible for security it

276
00:10:43,279 --> 00:10:46,560
can also split into linear factors

277
00:10:46,560 --> 00:10:48,320
now take the mckee and the

278
00:10:48,320 --> 00:10:50,800
unauthenticated beaver triples

279
00:10:50,800 --> 00:10:53,760
using the isomorphism here and without

280
00:10:53,760 --> 00:10:55,519
any interaction the parties are able to

281
00:10:55,519 --> 00:10:58,000
convert them into one single

282
00:10:58,000 --> 00:10:59,839
authenticated beaver triple over the

283
00:10:59,839 --> 00:11:02,560
ring r and what i mean is that now x and

284
00:11:02,560 --> 00:11:05,279
y are uniform at random over the ring r

285
00:11:05,279 --> 00:11:07,680
whereas alpha remains the same as before

286
00:11:07,680 --> 00:11:09,760
so a field element

287
00:11:09,760 --> 00:11:12,000
the nice thing of the isomorphism is

288
00:11:12,000 --> 00:11:13,760
also that it is invertible so the

289
00:11:13,760 --> 00:11:16,000
parties are able to convert material

290
00:11:16,000 --> 00:11:18,320
this kind into an authenticated bigger

291
00:11:18,320 --> 00:11:20,720
triples over the field f and this is

292
00:11:20,720 --> 00:11:22,800
done without any interaction

293
00:11:22,800 --> 00:11:24,880
so we notice that all of a sudden our

294
00:11:24,880 --> 00:11:27,519
goal has become to compress a single

295
00:11:27,519 --> 00:11:29,120
authenticated beaver triple over the

296
00:11:29,120 --> 00:11:30,240
ring r

297
00:11:30,240 --> 00:11:31,600
and we are going to do this by

298
00:11:31,600 --> 00:11:34,640
compressing each term one after another

299
00:11:34,640 --> 00:11:37,040
so we start from x and y and as i said

300
00:11:37,040 --> 00:11:38,880
before these are uniformly random

301
00:11:38,880 --> 00:11:40,959
elements over the ring r that are secret

302
00:11:40,959 --> 00:11:43,440
shared among the n parties

303
00:11:43,440 --> 00:11:45,760
so suppose that the random oracle now

304
00:11:45,760 --> 00:11:48,320
provides everybody with a random vector

305
00:11:48,320 --> 00:11:51,680
a belonging to r to the c

306
00:11:51,680 --> 00:11:53,279
each party p i

307
00:11:53,279 --> 00:11:56,240
will compress its shares of x and y as

308
00:11:56,240 --> 00:11:58,959
follows so first of all it samples two

309
00:11:58,959 --> 00:12:00,560
vectors of

310
00:12:00,560 --> 00:12:03,760
sparse polynomials ui and vi using the

311
00:12:03,760 --> 00:12:06,639
distribution h w t to the c

312
00:12:06,639 --> 00:12:08,880
we wanted to introduce with the ring lpn

313
00:12:08,880 --> 00:12:11,839
assumption

314
00:12:12,000 --> 00:12:17,120
so next pi sets its share of x to be x i

315
00:12:17,120 --> 00:12:21,360
the inner product between a and ui

316
00:12:21,360 --> 00:12:24,079
and similarly it sets its share of y to

317
00:12:24,079 --> 00:12:26,800
be the inner product between a

318
00:12:26,800 --> 00:12:29,040
and v i

319
00:12:29,040 --> 00:12:31,040
so you understand that by the ring of an

320
00:12:31,040 --> 00:12:34,480
assumption x i and y i now look random

321
00:12:34,480 --> 00:12:36,240
even if a is public

322
00:12:36,240 --> 00:12:39,279
but the entropy of x i and y i now is

323
00:12:39,279 --> 00:12:41,600
low because they are described in terms

324
00:12:41,600 --> 00:12:44,000
of sparse polynomials and the

325
00:12:44,000 --> 00:12:46,959
description of sparse polynomials is

326
00:12:46,959 --> 00:12:48,240
short

327
00:12:48,240 --> 00:12:50,639
so next we compress the terms alpha

328
00:12:50,639 --> 00:12:52,720
times x and alpha times y

329
00:12:52,720 --> 00:12:54,800
and we start by observing that alpha

330
00:12:54,800 --> 00:12:57,279
times x can be rewritten as the sum over

331
00:12:57,279 --> 00:13:00,720
i and j of alpha i times x t where alpha

332
00:13:00,720 --> 00:13:03,600
i and x j represent the shares of p i

333
00:13:03,600 --> 00:13:05,600
and p j respectively

334
00:13:05,600 --> 00:13:08,240
this can again be rewritten as the sum

335
00:13:08,240 --> 00:13:11,519
over i and j of alpha i times the inner

336
00:13:11,519 --> 00:13:14,320
product between a and u j

337
00:13:14,320 --> 00:13:16,959
which is also equal to the sum over i

338
00:13:16,959 --> 00:13:19,680
and j of the inner product between a and

339
00:13:19,680 --> 00:13:22,959
alpha i times d j

340
00:13:22,959 --> 00:13:25,440
okay now suppose that the parties have a

341
00:13:25,440 --> 00:13:28,959
secret sharing of fi times you'd say

342
00:13:28,959 --> 00:13:32,720
between the parties pi and pj only

343
00:13:32,720 --> 00:13:36,720
so i use these indexes i and they in

344
00:13:36,720 --> 00:13:39,519
the brackets to denote two-part secret

345
00:13:39,519 --> 00:13:42,880
sharing between pi and pj only

346
00:13:42,880 --> 00:13:45,440
so if the parties have these n-square

347
00:13:45,440 --> 00:13:48,880
secret sharings they are able to obtain

348
00:13:48,880 --> 00:13:51,839
a secret sharing of alpha times x

349
00:13:51,839 --> 00:13:54,399
between the n parties due to the

350
00:13:54,399 --> 00:13:56,880
linearity of the inner product and the

351
00:13:56,880 --> 00:13:59,519
sum here

352
00:13:59,600 --> 00:14:02,399
moreover this and square secret sharings

353
00:14:02,399 --> 00:14:04,800
leak new information about the shares of

354
00:14:04,800 --> 00:14:07,680
pi mpj to the other parties indeed in

355
00:14:07,680 --> 00:14:09,600
order to leak some information both pi

356
00:14:09,600 --> 00:14:11,920
and pj would need to be corrupt and in

357
00:14:11,920 --> 00:14:14,000
this case what we leak is actually alpha

358
00:14:14,000 --> 00:14:16,399
i and usa which are values that are

359
00:14:16,399 --> 00:14:18,800
already known to differentially

360
00:14:18,800 --> 00:14:21,279
so now our goal will be to compress

361
00:14:21,279 --> 00:14:23,440
these terms instead of this

362
00:14:23,440 --> 00:14:27,040
so what's the structure of uj your j is

363
00:14:27,040 --> 00:14:29,680
a c dimensional vector over the ring r

364
00:14:29,680 --> 00:14:33,199
and each entry is a t sparse polynomial

365
00:14:33,199 --> 00:14:35,600
of degree n so here we represent these

366
00:14:35,600 --> 00:14:37,760
polynomials by listing the coefficients

367
00:14:37,760 --> 00:14:40,000
starting from the term of degree zero

368
00:14:40,000 --> 00:14:41,839
and the nonzero coefficients are

369
00:14:41,839 --> 00:14:45,680
represented with colored squares

370
00:14:45,680 --> 00:14:48,639
so when we multiply you'd say by alpha i

371
00:14:48,639 --> 00:14:50,480
the structure remains the same that's

372
00:14:50,480 --> 00:14:53,199
because alpha is an element of the field

373
00:14:53,199 --> 00:14:54,959
so the only thing that changes is the

374
00:14:54,959 --> 00:14:57,199
color of the squares so the value of the

375
00:14:57,199 --> 00:15:00,320
coefficient changes but their positions

376
00:15:00,320 --> 00:15:02,639
remain the same as before

377
00:15:02,639 --> 00:15:04,320
so how can we compress the secret

378
00:15:04,320 --> 00:15:06,560
sharing of alpha times uj between party

379
00:15:06,560 --> 00:15:08,480
pi and pj only

380
00:15:08,480 --> 00:15:10,880
well we notice that each entry of this

381
00:15:10,880 --> 00:15:13,839
vector can be rewritten as the sum of t

382
00:15:13,839 --> 00:15:16,079
and dimensional unit vectors for

383
00:15:16,079 --> 00:15:18,320
instance these would be those associated

384
00:15:18,320 --> 00:15:19,920
with the first entry

385
00:15:19,920 --> 00:15:21,760
and now we know how to compress secret

386
00:15:21,760 --> 00:15:24,880
sharings of unit vectors using dps in

387
00:15:24,880 --> 00:15:27,120
particular when we perform the operation

388
00:15:27,120 --> 00:15:29,279
we provide the parties with

389
00:15:29,279 --> 00:15:32,079
keys that leak no information about

390
00:15:32,079 --> 00:15:34,240
alpha and uj to the parties because of

391
00:15:34,240 --> 00:15:36,480
the security of epfs

392
00:15:36,480 --> 00:15:38,240
and the material that we obtain in this

393
00:15:38,240 --> 00:15:41,360
way is small in particular it is just

394
00:15:41,360 --> 00:15:44,560
c times t pairs of tpf keys c because

395
00:15:44,560 --> 00:15:46,720
there are c entries and t because there

396
00:15:46,720 --> 00:15:48,399
are t

397
00:15:48,399 --> 00:15:50,399
unit vectors per entry

398
00:15:50,399 --> 00:15:52,240
and the size of these keys is

399
00:15:52,240 --> 00:15:54,480
logarithmic in n because it is just a

400
00:15:54,480 --> 00:15:57,040
secret sharing between two parties

401
00:15:57,040 --> 00:16:00,320
so next we compress the terms x times y

402
00:16:00,320 --> 00:16:03,360
so we do it similar to x times alpha

403
00:16:03,360 --> 00:16:05,920
indeed we notice that x times y can be

404
00:16:05,920 --> 00:16:08,959
rewritten as the sum over i and j of x i

405
00:16:08,959 --> 00:16:11,600
times yj where x i and yj are the shares

406
00:16:11,600 --> 00:16:13,920
of b i and pj respectively

407
00:16:13,920 --> 00:16:16,079
and this can again be rewritten as the

408
00:16:16,079 --> 00:16:18,240
sum over inj of the inner product

409
00:16:18,240 --> 00:16:21,440
between a and ui

410
00:16:21,440 --> 00:16:22,959
with

411
00:16:22,959 --> 00:16:27,439
the inner product between a and b j

412
00:16:27,680 --> 00:16:31,279
this last term can be proven to be equal

413
00:16:31,279 --> 00:16:32,399
to

414
00:16:32,399 --> 00:16:35,199
the sum over i and j

415
00:16:35,199 --> 00:16:38,000
of an inner product between the outer

416
00:16:38,000 --> 00:16:40,480
product of a with itself

417
00:16:40,480 --> 00:16:43,279
and then the outer product between ui

418
00:16:43,279 --> 00:16:44,720
and vj

419
00:16:44,720 --> 00:16:47,360
i will define this outer product later

420
00:16:47,360 --> 00:16:49,759
in the next slide so now suppose that

421
00:16:49,759 --> 00:16:51,199
the parties have

422
00:16:51,199 --> 00:16:54,480
a two-party secret sharing of ui

423
00:16:54,480 --> 00:16:57,360
outer product with vj

424
00:16:57,360 --> 00:17:00,800
between party pi and pj only

425
00:17:00,800 --> 00:17:03,040
so due to the linearity of the inner

426
00:17:03,040 --> 00:17:06,160
product and of

427
00:17:06,160 --> 00:17:07,679
the sun here

428
00:17:07,679 --> 00:17:10,720
the parties can convert these n square

429
00:17:10,720 --> 00:17:13,199
uh two-part secret sharings

430
00:17:13,199 --> 00:17:16,559
into a single secret sharing of extends

431
00:17:16,559 --> 00:17:18,880
y between all the n parties without any

432
00:17:18,880 --> 00:17:20,079
interaction

433
00:17:20,079 --> 00:17:22,160
now our goal will be to compress these

434
00:17:22,160 --> 00:17:24,160
two parts secret sharings between p i

435
00:17:24,160 --> 00:17:25,199
and pj

436
00:17:25,199 --> 00:17:26,799
so basically we are doing the same thing

437
00:17:26,799 --> 00:17:28,880
that we did for alpha times x the only

438
00:17:28,880 --> 00:17:32,240
difference is that now x and y are both

439
00:17:32,240 --> 00:17:34,720
ring elements whereas before one of the

440
00:17:34,720 --> 00:17:37,760
factors was a field element

441
00:17:37,760 --> 00:17:40,960
so how is the outer product defined well

442
00:17:40,960 --> 00:17:43,760
a ui and vj are c-dimensional vectors

443
00:17:43,760 --> 00:17:46,400
over the ring r and their outer product

444
00:17:46,400 --> 00:17:48,160
is defined to be the c square

445
00:17:48,160 --> 00:17:50,720
dimensional vector over r where for

446
00:17:50,720 --> 00:17:53,679
every l and m the element in position c

447
00:17:53,679 --> 00:17:56,080
l plus m is the product of the elf

448
00:17:56,080 --> 00:18:00,400
element in ui and the nth element in v j

449
00:18:00,400 --> 00:18:03,280
okay now take the else entry of u i and

450
00:18:03,280 --> 00:18:05,520
the infinity of v j which are both t

451
00:18:05,520 --> 00:18:07,520
sparse polynomials over r

452
00:18:07,520 --> 00:18:10,559
we consider their product but not over r

453
00:18:10,559 --> 00:18:13,280
but over f of x since the reduction

454
00:18:13,280 --> 00:18:15,200
modulo in idl commits with all the

455
00:18:15,200 --> 00:18:17,039
operation we can always

456
00:18:17,039 --> 00:18:19,120
make the reduction later whenever it is

457
00:18:19,120 --> 00:18:21,039
more suited

458
00:18:21,039 --> 00:18:23,600
now uh the product of two polynomials

459
00:18:23,600 --> 00:18:28,240
over f of x is still somewhat sparse

460
00:18:28,240 --> 00:18:30,160
indeed this is a polynomial of degree at

461
00:18:30,160 --> 00:18:31,520
most 2n

462
00:18:31,520 --> 00:18:34,559
and there are at most t-square non-zero

463
00:18:34,559 --> 00:18:37,039
coefficients that's because all the

464
00:18:37,039 --> 00:18:39,760
terms of a product are

465
00:18:39,760 --> 00:18:41,919
the product of the monomials of ui and

466
00:18:41,919 --> 00:18:44,720
the monomial of vj and since these two

467
00:18:44,720 --> 00:18:46,960
polynomials have at most t non-zero

468
00:18:46,960 --> 00:18:48,720
coefficients the number of nonzero

469
00:18:48,720 --> 00:18:50,480
coefficients of the product will be

470
00:18:50,480 --> 00:18:52,559
upper bounded by t square

471
00:18:52,559 --> 00:18:54,559
so our goal is to compress the secret

472
00:18:54,559 --> 00:18:57,360
sharing of ui outer product with j

473
00:18:57,360 --> 00:18:59,600
between party pi and pj only

474
00:18:59,600 --> 00:19:02,720
and ui outer product with dj is a vector

475
00:19:02,720 --> 00:19:05,280
of this kind so in particular it is a c

476
00:19:05,280 --> 00:19:07,760
square dimensional vector and its entry

477
00:19:07,760 --> 00:19:10,160
is a t square sparse polynomial of

478
00:19:10,160 --> 00:19:12,559
degree at most 2n

479
00:19:12,559 --> 00:19:14,880
so since these are all sparse vectors we

480
00:19:14,880 --> 00:19:16,720
can use the same techniques that we used

481
00:19:16,720 --> 00:19:19,280
before for alpha times x and alpha times

482
00:19:19,280 --> 00:19:20,240
y

483
00:19:20,240 --> 00:19:22,799
in particular we can just

484
00:19:22,799 --> 00:19:24,480
compress the secret sharing of each

485
00:19:24,480 --> 00:19:27,280
entry and the latter can be rewritten as

486
00:19:27,280 --> 00:19:29,840
the sum of t-square's unit vectors of

487
00:19:29,840 --> 00:19:31,919
dimension to n

488
00:19:31,919 --> 00:19:34,400
these on the slides are those associated

489
00:19:34,400 --> 00:19:35,280
with

490
00:19:35,280 --> 00:19:37,440
this entry that you see

491
00:19:37,440 --> 00:19:38,960
on the top

492
00:19:38,960 --> 00:19:41,200
and yeah now we are able to compress

493
00:19:41,200 --> 00:19:43,520
secret sharings of unit vectors using

494
00:19:43,520 --> 00:19:47,360
dpfs and so we provide the parties with

495
00:19:47,360 --> 00:19:49,520
these keys that leak new information

496
00:19:49,520 --> 00:19:51,600
about the non-zero elements and the

497
00:19:51,600 --> 00:19:53,760
special positions

498
00:19:53,760 --> 00:19:56,480
furthermore all this material is a small

499
00:19:56,480 --> 00:19:58,880
size now indeed we just have c square

500
00:19:58,880 --> 00:20:01,919
times t square pairs of dpf keys and

501
00:20:01,919 --> 00:20:04,559
their size is logarithmic n because we

502
00:20:04,559 --> 00:20:06,480
are just working with two-party secret

503
00:20:06,480 --> 00:20:08,400
sharings

504
00:20:08,400 --> 00:20:10,799
so the last term that remains to be

505
00:20:10,799 --> 00:20:13,679
compressed is alpha times x times y

506
00:20:13,679 --> 00:20:15,919
and as we did before we notice that

507
00:20:15,919 --> 00:20:18,559
alpha times x times y can be rewritten

508
00:20:18,559 --> 00:20:21,440
as the sum over i j and k

509
00:20:21,440 --> 00:20:25,120
of alpha k times x i times y j where

510
00:20:25,120 --> 00:20:27,280
alpha k x sine and y j

511
00:20:27,280 --> 00:20:30,000
are the shares of part d p k p i and p j

512
00:20:30,000 --> 00:20:31,760
respectively

513
00:20:31,760 --> 00:20:34,320
this can be again rewritten as the sum

514
00:20:34,320 --> 00:20:38,159
over i j and k of alpha k times the

515
00:20:38,159 --> 00:20:41,520
inner product between a and u i

516
00:20:41,520 --> 00:20:44,320
times the inner product between a and v

517
00:20:44,320 --> 00:20:45,600
j

518
00:20:45,600 --> 00:20:48,960
and as we did before this is equal to

519
00:20:48,960 --> 00:20:52,799
the sum over i j and k of alpha k times

520
00:20:52,799 --> 00:20:55,360
the inner product between the outer

521
00:20:55,360 --> 00:20:57,919
product of a with itself

522
00:20:57,919 --> 00:21:00,480
and the outer product with

523
00:21:00,480 --> 00:21:04,799
between ui and vj

524
00:21:04,960 --> 00:21:07,360
finally we can move alpha k inside the

525
00:21:07,360 --> 00:21:09,679
inner product so this is equal to the

526
00:21:09,679 --> 00:21:11,760
sum over i j and k

527
00:21:11,760 --> 00:21:14,640
of the inner product between

528
00:21:14,640 --> 00:21:17,360
the outer product between a and itself

529
00:21:17,360 --> 00:21:20,799
and then alpha k times ui

530
00:21:20,799 --> 00:21:24,559
outer product with bj

531
00:21:25,039 --> 00:21:27,840
okay now suppose that the parties have a

532
00:21:27,840 --> 00:21:30,400
secret sharing of alpha k

533
00:21:30,400 --> 00:21:32,080
times ui

534
00:21:32,080 --> 00:21:34,640
outer product with vj

535
00:21:34,640 --> 00:21:39,919
between bar dpi pj and pk only

536
00:21:40,480 --> 00:21:43,280
due to the linearity of the inner

537
00:21:43,280 --> 00:21:46,080
product and of the sum the parties are

538
00:21:46,080 --> 00:21:48,880
able to convert this and to the third

539
00:21:48,880 --> 00:21:51,520
secret sharings into a single secret

540
00:21:51,520 --> 00:21:53,760
sharing of alpha times x times y between

541
00:21:53,760 --> 00:21:55,440
all the end parties

542
00:21:55,440 --> 00:21:57,039
and this operation requires no

543
00:21:57,039 --> 00:21:59,600
communication

544
00:21:59,600 --> 00:22:01,679
moreover notice that since this is a

545
00:22:01,679 --> 00:22:03,440
three-part secret sharing we leak new

546
00:22:03,440 --> 00:22:05,600
information about alpha k ui and vga to

547
00:22:05,600 --> 00:22:07,840
that version indeed the only way to take

548
00:22:07,840 --> 00:22:10,000
some information is if all the three

549
00:22:10,000 --> 00:22:12,000
parties are correct and in that case

550
00:22:12,000 --> 00:22:14,559
diversity already knows alpha k ui and

551
00:22:14,559 --> 00:22:16,320
vj

552
00:22:16,320 --> 00:22:18,240
notice also that a two-party secret

553
00:22:18,240 --> 00:22:20,320
sharing wouldn't be enough here because

554
00:22:20,320 --> 00:22:22,400
for instance if it was only between pi

555
00:22:22,400 --> 00:22:23,520
and pj

556
00:22:23,520 --> 00:22:24,640
and

557
00:22:24,640 --> 00:22:26,720
apk is honest

558
00:22:26,720 --> 00:22:29,919
if pi and pj are corrupt uh we would

559
00:22:29,919 --> 00:22:31,919
leak information about alpha k that

560
00:22:31,919 --> 00:22:34,240
adversary shouldn't know

561
00:22:34,240 --> 00:22:36,400
so our goal now will be to compress

562
00:22:36,400 --> 00:22:39,039
these secret sharings here

563
00:22:39,039 --> 00:22:40,559
previously we have noticed that the

564
00:22:40,559 --> 00:22:43,200
outer product between ui and vj is a

565
00:22:43,200 --> 00:22:45,919
vector of this kind in particular a c

566
00:22:45,919 --> 00:22:48,320
square dimensional vector where each

567
00:22:48,320 --> 00:22:50,559
entry is a t-square sparse polynomial of

568
00:22:50,559 --> 00:22:52,799
degree at most to n

569
00:22:52,799 --> 00:22:55,360
now if we multiply everything by alpha k

570
00:22:55,360 --> 00:22:57,919
their structure remains the same that's

571
00:22:57,919 --> 00:23:00,080
because alpha k is a field element so

572
00:23:00,080 --> 00:23:01,280
the only consequence of this

573
00:23:01,280 --> 00:23:03,760
multiplication is to change the value of

574
00:23:03,760 --> 00:23:06,559
these colored squares but their position

575
00:23:06,559 --> 00:23:08,240
and their number remains the same as

576
00:23:08,240 --> 00:23:11,520
before so we conclude that alpha k times

577
00:23:11,520 --> 00:23:14,720
the outer product between ui and vj is a

578
00:23:14,720 --> 00:23:17,120
c square dimensional vector where its

579
00:23:17,120 --> 00:23:19,919
entry is a t-square sparse polynomial

580
00:23:19,919 --> 00:23:21,520
so in order to compress the secret

581
00:23:21,520 --> 00:23:24,159
sharing of this between pk pi and pj we

582
00:23:24,159 --> 00:23:26,720
can use the same techniques as before

583
00:23:26,720 --> 00:23:29,120
in particular we can compress the secret

584
00:23:29,120 --> 00:23:31,679
sharing of its entry and the latter can

585
00:23:31,679 --> 00:23:34,559
be rewritten as the sum of t-square unit

586
00:23:34,559 --> 00:23:37,840
vectors of dimension to n

587
00:23:37,840 --> 00:23:39,520
and these secret sharings can be

588
00:23:39,520 --> 00:23:42,240
compressed using a dpf in particular a

589
00:23:42,240 --> 00:23:44,559
three-part dpf

590
00:23:44,559 --> 00:23:47,120
so these keys that are obtained leak new

591
00:23:47,120 --> 00:23:48,880
information about the non-zero elements

592
00:23:48,880 --> 00:23:50,880
and the special positions

593
00:23:50,880 --> 00:23:53,200
and their size is small

594
00:23:53,200 --> 00:23:55,120
in total we have c squared times t

595
00:23:55,120 --> 00:23:57,679
square triples of dpf keys but their

596
00:23:57,679 --> 00:24:01,120
size is now not logarithmic in n but o

597
00:24:01,120 --> 00:24:03,360
or square root of n and the reason is

598
00:24:03,360 --> 00:24:05,440
because three party dps are not as

599
00:24:05,440 --> 00:24:07,679
efficient as two party ones

600
00:24:07,679 --> 00:24:09,360
so there is one last issue that we need

601
00:24:09,360 --> 00:24:11,520
to fix in our construction specifically

602
00:24:11,520 --> 00:24:14,240
dpx usually output secret sharings over

603
00:24:14,240 --> 00:24:17,120
binary groups whereas our pcg needs

604
00:24:17,120 --> 00:24:19,360
secret sharings over a large prime field

605
00:24:19,360 --> 00:24:22,400
f the same one that we use in speeds

606
00:24:22,400 --> 00:24:24,880
so generalizing the known constructions

607
00:24:24,880 --> 00:24:27,600
for two parties is rather simple but for

608
00:24:27,600 --> 00:24:29,840
the three-party case it is tricky

609
00:24:29,840 --> 00:24:31,679
specifically the best construction for

610
00:24:31,679 --> 00:24:35,360
three party is by a boonetal and it

611
00:24:35,360 --> 00:24:37,440
outputs secret sharings over zero one to

612
00:24:37,440 --> 00:24:38,480
the m

613
00:24:38,480 --> 00:24:40,320
thanks to a trick by boy little it is

614
00:24:40,320 --> 00:24:42,400
possible to generalize this construction

615
00:24:42,400 --> 00:24:45,360
to groups of polynomial cardinality but

616
00:24:45,360 --> 00:24:47,520
these techniques don't apply to large

617
00:24:47,520 --> 00:24:49,120
prime fields

618
00:24:49,120 --> 00:24:50,880
so at the beginning we thought we were

619
00:24:50,880 --> 00:24:52,960
completely stuck but then we realized

620
00:24:52,960 --> 00:24:55,279
that our pcg is secure even if we allow

621
00:24:55,279 --> 00:24:57,600
some leakage in the three-part epf

622
00:24:57,600 --> 00:25:00,000
in particular if two specific parties of

623
00:25:00,000 --> 00:25:01,600
the three-party secret sharing are

624
00:25:01,600 --> 00:25:04,000
corrupt we allow the adversary to learn

625
00:25:04,000 --> 00:25:06,400
omega the special position of the unit

626
00:25:06,400 --> 00:25:08,640
vector if we allow this leak as it is

627
00:25:08,640 --> 00:25:10,559
possible to generalize the three-part

628
00:25:10,559 --> 00:25:14,240
dpf by bonus hell to large prime fields

629
00:25:14,240 --> 00:25:16,960
the reason why our pcg is still secure

630
00:25:16,960 --> 00:25:18,799
is because when pi and pj are both

631
00:25:18,799 --> 00:25:20,799
corrupted the adversary already knows

632
00:25:20,799 --> 00:25:22,720
the special position omega

633
00:25:22,720 --> 00:25:24,480
indeed we use the three party dpf to

634
00:25:24,480 --> 00:25:26,720
compress secret sharings of alpha k

635
00:25:26,720 --> 00:25:28,799
times the outer product between ui and

636
00:25:28,799 --> 00:25:31,360
vj and since alpha case is a field

637
00:25:31,360 --> 00:25:33,279
element the special positions are

638
00:25:33,279 --> 00:25:36,240
uniquely determined by ui and vj

639
00:25:36,240 --> 00:25:38,320
when pi and pj are both corrupted these

640
00:25:38,320 --> 00:25:40,880
terms are already known to the adversary

641
00:25:40,880 --> 00:25:43,760
so to summarize our pcg

642
00:25:43,760 --> 00:25:46,400
generates n authenticated bigger triples

643
00:25:46,400 --> 00:25:48,960
and we were able to compress the terms x

644
00:25:48,960 --> 00:25:51,760
and y using the ring lpn assumption into

645
00:25:51,760 --> 00:25:54,559
material of size c times t

646
00:25:54,559 --> 00:25:57,679
times o of log n

647
00:25:57,679 --> 00:25:59,360
and the complexity in the number of

648
00:25:59,360 --> 00:26:02,320
parties is linear

649
00:26:02,320 --> 00:26:04,960
so this applies also for y that has the

650
00:26:04,960 --> 00:26:07,279
same form as x

651
00:26:07,279 --> 00:26:10,240
the term x times alpha was compressed

652
00:26:10,240 --> 00:26:12,880
using two party bpfs into material of

653
00:26:12,880 --> 00:26:16,880
size c times t times o of logan

654
00:26:16,880 --> 00:26:18,320
and the complexity in the number of

655
00:26:18,320 --> 00:26:20,799
parties is square

656
00:26:20,799 --> 00:26:21,919
same

657
00:26:21,919 --> 00:26:25,360
happens for y terms of

658
00:26:25,360 --> 00:26:27,919
moving on to the product x tends y

659
00:26:27,919 --> 00:26:31,120
we compress this material into a

660
00:26:31,120 --> 00:26:32,159
values

661
00:26:32,159 --> 00:26:35,760
of size c squared times t square times o

662
00:26:35,760 --> 00:26:37,840
of

663
00:26:37,840 --> 00:26:39,520
times n square

664
00:26:39,520 --> 00:26:42,159
using two party dpfs

665
00:26:42,159 --> 00:26:44,480
and finally the last term x times y

666
00:26:44,480 --> 00:26:46,880
times alpha was compressed into material

667
00:26:46,880 --> 00:26:50,000
of size c squared times t squared times

668
00:26:50,000 --> 00:26:53,279
o or square root of n times n to the

669
00:26:53,279 --> 00:26:54,720
third

670
00:26:54,720 --> 00:26:57,760
so we understand that the dominant

671
00:26:57,760 --> 00:27:00,000
term is this one

672
00:27:00,000 --> 00:27:03,600
so the final seed size of our pcg

673
00:27:03,600 --> 00:27:07,039
is o or square root of n after having

674
00:27:07,039 --> 00:27:10,559
designed our pcg we focused on the a

675
00:27:10,559 --> 00:27:12,080
protocol for the generation of

676
00:27:12,080 --> 00:27:14,320
authenticated builder triples

677
00:27:14,320 --> 00:27:16,640
in particular we designed an actively

678
00:27:16,640 --> 00:27:19,360
secure protocol that sets up the third

679
00:27:19,360 --> 00:27:21,120
party dpf keys

680
00:27:21,120 --> 00:27:23,919
and then we design another protocol that

681
00:27:23,919 --> 00:27:26,000
generates and distribute the pcc seeds

682
00:27:26,000 --> 00:27:27,840
with active security and with little

683
00:27:27,840 --> 00:27:29,279
communication

684
00:27:29,279 --> 00:27:31,679
i won't describe these constructions in

685
00:27:31,679 --> 00:27:33,919
details because they are both rather

686
00:27:33,919 --> 00:27:36,159
complex and the techniques that we used

687
00:27:36,159 --> 00:27:38,880
are not extremely interesting anyway

688
00:27:38,880 --> 00:27:40,799
regarding efficiency our protocol

689
00:27:40,799 --> 00:27:42,720
generates an authenticated regulatory

690
00:27:42,720 --> 00:27:44,720
pulse with some linear communication in

691
00:27:44,720 --> 00:27:47,679
them in particular all square root of n

692
00:27:47,679 --> 00:27:49,840
there is however a term that scales as

693
00:27:49,840 --> 00:27:51,760
the number of parties to the fourth so

694
00:27:51,760 --> 00:27:53,840
for a very large number of players our

695
00:27:53,840 --> 00:27:56,480
solution may not be the best

696
00:27:56,480 --> 00:27:58,960
regarding computations the complexity

697
00:27:58,960 --> 00:28:01,600
scales as n log n

698
00:28:01,600 --> 00:28:03,520
so we analyze the efficiency of the

699
00:28:03,520 --> 00:28:05,440
protocol by considering the stretch

700
00:28:05,440 --> 00:28:07,520
which is defined as the ratio between

701
00:28:07,520 --> 00:28:09,919
the total size of the outputs and the

702
00:28:09,919 --> 00:28:11,520
total communication

703
00:28:11,520 --> 00:28:14,399
so the larger the stretch the better

704
00:28:14,399 --> 00:28:16,000
we observe that the stretch becomes

705
00:28:16,000 --> 00:28:17,919
greater than one for very large number

706
00:28:17,919 --> 00:28:20,240
of triples in particular for n

707
00:28:20,240 --> 00:28:23,039
approaching 2 to the 24 which is close

708
00:28:23,039 --> 00:28:25,840
to 16 millions anyway even for smaller

709
00:28:25,840 --> 00:28:28,240
values of n our protocol is practical

710
00:28:28,240 --> 00:28:31,039
based on estimation by boy lethal

711
00:28:31,039 --> 00:28:32,960
moreover the total communication is

712
00:28:32,960 --> 00:28:37,360
roughly 10 times better than overpriced

