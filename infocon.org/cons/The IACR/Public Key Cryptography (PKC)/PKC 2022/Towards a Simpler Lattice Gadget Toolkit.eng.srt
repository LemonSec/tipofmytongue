1
00:00:01,120 --> 00:00:03,040
this is the paper about towards the

2
00:00:03,040 --> 00:00:05,520
simpler letter sketch toolkit

3
00:00:05,520 --> 00:00:08,320
this is a joint work with yang yu

4
00:00:08,320 --> 00:00:10,800
i am stu jung

5
00:00:10,800 --> 00:00:14,240
let's start some background

6
00:00:14,240 --> 00:00:16,800
letter space cryptography is the most

7
00:00:16,800 --> 00:00:19,920
important quantum alternative

8
00:00:19,920 --> 00:00:22,960
based on lattice we can build not only

9
00:00:22,960 --> 00:00:25,359
practical efficient encryption and

10
00:00:25,359 --> 00:00:28,000
signatures but also very powerful

11
00:00:28,000 --> 00:00:31,359
advanced cryptographic parameters

12
00:00:31,359 --> 00:00:35,920
ranging from fg a b and more

13
00:00:35,920 --> 00:00:38,559
basic lattice encryption and signatures

14
00:00:38,559 --> 00:00:41,280
have been closing to trs ready

15
00:00:41,280 --> 00:00:43,920
but the one selected schemes still need

16
00:00:43,920 --> 00:00:47,920
implementations and evaluations

17
00:00:47,920 --> 00:00:51,199
many advanced latest crypto systems rely

18
00:00:51,199 --> 00:00:53,840
on strong lattice trip doors

19
00:00:53,840 --> 00:00:56,559
rttest function is defined by the metric

20
00:00:56,559 --> 00:00:57,520
a

21
00:00:57,520 --> 00:00:59,760
that short and fight with uniform

22
00:00:59,760 --> 00:01:01,840
entries model q

23
00:01:01,840 --> 00:01:04,640
and the domain x is a set of short

24
00:01:04,640 --> 00:01:07,840
integer vectors with small entries

25
00:01:07,840 --> 00:01:11,680
in stock 196 argentine proved the site

26
00:01:11,680 --> 00:01:14,560
if this is hard the function fa is hard

27
00:01:14,560 --> 00:01:17,200
to invert

28
00:01:17,280 --> 00:01:19,759
but with a chip door

29
00:01:19,759 --> 00:01:22,320
the function is easy to invert

30
00:01:22,320 --> 00:01:25,040
in the early result it generated the

31
00:01:25,040 --> 00:01:28,000
short lattice species t as a triple

32
00:01:28,000 --> 00:01:30,560
however the deterministic process of an

33
00:01:30,560 --> 00:01:32,880
inversion lakes the information about

34
00:01:32,880 --> 00:01:36,240
tryptop leading to learning attacks

35
00:01:36,240 --> 00:01:39,520
then in the gpu framework

36
00:01:39,520 --> 00:01:42,320
the inverting of fa is not deterministic

37
00:01:42,320 --> 00:01:43,520
process

38
00:01:43,520 --> 00:01:46,399
but random gaussian simply

39
00:01:46,399 --> 00:01:48,479
and the simple the primage is

40
00:01:48,479 --> 00:01:51,600
independent of t so there is no triple

41
00:01:51,600 --> 00:01:53,200
leakage

42
00:01:53,200 --> 00:01:54,560
later

43
00:01:54,560 --> 00:01:56,960
messenger packet framework proposed a

44
00:01:56,960 --> 00:01:58,799
new structure

45
00:01:58,799 --> 00:02:00,640
and the t is no longer the lattice

46
00:02:00,640 --> 00:02:01,759
species

47
00:02:01,759 --> 00:02:04,159
with the help of t the problem of

48
00:02:04,159 --> 00:02:06,719
involving a random function f a is

49
00:02:06,719 --> 00:02:09,360
transformed to the problem of inverting

50
00:02:09,360 --> 00:02:12,000
the same type of the function fg

51
00:02:12,000 --> 00:02:14,400
but for specific carefully designed

52
00:02:14,400 --> 00:02:17,040
gauge matrix sheet with automated much

53
00:02:17,040 --> 00:02:20,480
simpler and faster invoicing algorithms

54
00:02:20,480 --> 00:02:23,360
currently this is a state-of-the-art

55
00:02:23,360 --> 00:02:26,720
lattice triple framework

56
00:02:27,120 --> 00:02:30,319
the g metric is a block diagonal magic

57
00:02:30,319 --> 00:02:33,599
the diagonal block is vector g

58
00:02:33,599 --> 00:02:35,840
the corresponding gauge lattice has a

59
00:02:35,840 --> 00:02:38,000
good pieces s

60
00:02:38,000 --> 00:02:41,200
for the parallel b modulus the matrix is

61
00:02:41,200 --> 00:02:43,680
a lower by diagonal metric

62
00:02:43,680 --> 00:02:46,319
and for the arbitrary modulus the magic

63
00:02:46,319 --> 00:02:48,239
has other no

64
00:02:48,239 --> 00:02:50,879
zero interest in the last column

65
00:02:50,879 --> 00:02:53,760
compared with before

66
00:02:53,760 --> 00:02:55,840
thanks to the good structure of the sort

67
00:02:55,840 --> 00:02:58,000
of basis of gigalites

68
00:02:58,000 --> 00:03:02,560
the involving of g is simple and fast

69
00:03:02,800 --> 00:03:05,840
gauge is widely used in latin schemes

70
00:03:05,840 --> 00:03:09,280
there are four associated algorithms

71
00:03:09,280 --> 00:03:11,200
the most simple one is the digital

72
00:03:11,200 --> 00:03:14,400
decomposition which is typically used in

73
00:03:14,400 --> 00:03:16,840
pv and bfv

74
00:03:16,840 --> 00:03:21,760
fhe the second algorithm is lw inversion

75
00:03:21,760 --> 00:03:26,319
it's typically used in lw encryptions

76
00:03:27,360 --> 00:03:29,680
the first two are all deterministic

77
00:03:29,680 --> 00:03:32,799
algorithms they are also to randomize

78
00:03:32,799 --> 00:03:34,879
the algorithms

79
00:03:34,879 --> 00:03:37,680
the first algorithm is gaussian simply

80
00:03:37,680 --> 00:03:40,799
it is used to simple a primage ft from

81
00:03:40,799 --> 00:03:42,959
discrete gaussian

82
00:03:42,959 --> 00:03:45,360
and is typically used in essential

83
00:03:45,360 --> 00:03:46,560
packages

84
00:03:46,560 --> 00:03:48,799
shipped off from work

85
00:03:48,799 --> 00:03:51,120
then the sub quotient sampling is simply

86
00:03:51,120 --> 00:03:53,439
a primage of fg

87
00:03:53,439 --> 00:03:57,040
from a related version of the gaussian

88
00:03:57,040 --> 00:03:59,519
it's a separation which is easier to

89
00:03:59,519 --> 00:04:00,959
sample

90
00:04:00,959 --> 00:04:04,640
it's typically used in gswfvg scheme and

91
00:04:04,640 --> 00:04:07,840
in lattice-based ape

92
00:04:07,840 --> 00:04:10,080
our main research is on these two

93
00:04:10,080 --> 00:04:11,439
randomized

94
00:04:11,439 --> 00:04:14,760
gauge algorithms

95
00:04:15,360 --> 00:04:18,399
so before i talk about our contribution

96
00:04:18,399 --> 00:04:21,040
i'm going to go over the previous sketch

97
00:04:21,040 --> 00:04:23,280
algorithms

98
00:04:23,280 --> 00:04:26,080
the first each lattice algorithm was

99
00:04:26,080 --> 00:04:29,919
given in mp12 and there they give a

100
00:04:29,919 --> 00:04:32,560
discrete gaussian simpler with linear

101
00:04:32,560 --> 00:04:34,639
time in space only for parallel b

102
00:04:34,639 --> 00:04:36,000
modulus

103
00:04:36,000 --> 00:04:38,400
for arbitrary modulus the algorithms

104
00:04:38,400 --> 00:04:41,280
need quadratic complicity

105
00:04:41,280 --> 00:04:44,479
then genius messenger came up with a v

106
00:04:44,479 --> 00:04:46,800
to simple with linear time for arbitrary

107
00:04:46,800 --> 00:04:50,160
modulus but neither using floating point

108
00:04:50,160 --> 00:04:53,040
arithmetic and is more completed than

109
00:04:53,040 --> 00:04:55,840
the special algorithm for power b

110
00:04:55,840 --> 00:04:59,440
modules in mp12

111
00:04:59,919 --> 00:05:02,880
as for the git sub gaussian simply

112
00:05:02,880 --> 00:05:07,600
genius and essential points work with a

113
00:05:07,600 --> 00:05:09,600
subconscious simply with a linear time

114
00:05:09,600 --> 00:05:11,919
for up tree modules

115
00:05:11,919 --> 00:05:14,400
for the modulus of power b they caused

116
00:05:14,400 --> 00:05:17,840
keylogg b random bits but for f3 modules

117
00:05:17,840 --> 00:05:20,560
they call the key squared log b random

118
00:05:20,560 --> 00:05:22,240
bits

119
00:05:22,240 --> 00:05:24,479
and this algorithm for arbitrary modulus

120
00:05:24,479 --> 00:05:26,720
is more completed than the one for

121
00:05:26,720 --> 00:05:28,400
parallel b modulus

122
00:05:28,400 --> 00:05:31,120
so there existed some gaps between the

123
00:05:31,120 --> 00:05:33,440
key algorithms

124
00:05:33,440 --> 00:05:36,240
to close these skips is not only a

125
00:05:36,240 --> 00:05:38,639
theoretical interest but also crucial

126
00:05:38,639 --> 00:05:41,600
for practical applications

127
00:05:41,600 --> 00:05:43,039
in fact

128
00:05:43,039 --> 00:05:44,960
for better performance many

129
00:05:44,960 --> 00:05:46,880
lattice-based systems use a ring

130
00:05:46,880 --> 00:05:49,600
structure for future speed up in the

131
00:05:49,600 --> 00:05:51,440
ring structure

132
00:05:51,440 --> 00:05:54,560
they often chose prime modulus

133
00:05:54,560 --> 00:05:56,400
supporting entity

134
00:05:56,400 --> 00:05:59,440
in addition many advanced relative busy

135
00:05:59,440 --> 00:06:01,759
cryptosystems the size of the queue is

136
00:06:01,759 --> 00:06:03,759
usually quite large

137
00:06:03,759 --> 00:06:07,039
such as larger than 100 bits

138
00:06:07,039 --> 00:06:09,919
and to be compacted with architecture

139
00:06:09,919 --> 00:06:13,120
we usually apply some crt modulus

140
00:06:13,120 --> 00:06:16,479
and in these cases q cannot be parallel

141
00:06:16,479 --> 00:06:18,240
b

142
00:06:18,240 --> 00:06:22,639
so we need algorithm for this

143
00:06:25,759 --> 00:06:28,160
towards better probability of git

144
00:06:28,160 --> 00:06:31,520
toolkit we present two randomized git

145
00:06:31,520 --> 00:06:35,840
algorithms for arbitrary moduli

146
00:06:35,840 --> 00:06:38,319
we present a gauge gaussian simpler that

147
00:06:38,319 --> 00:06:40,720
avoids the floating point arithmetic in

148
00:06:40,720 --> 00:06:42,880
existing algorithms

149
00:06:42,880 --> 00:06:45,520
compared with the previous algorithms

150
00:06:45,520 --> 00:06:48,160
our simpler achieved sim quality and

151
00:06:48,160 --> 00:06:51,280
symmetrical complicity but is simpler

152
00:06:51,280 --> 00:06:53,360
and highly paralyzable

153
00:06:53,360 --> 00:06:55,919
we also propose the new key sub-quotient

154
00:06:55,919 --> 00:06:57,280
simpler

155
00:06:57,280 --> 00:06:59,680
it's simpler faster and need

156
00:06:59,680 --> 00:07:02,240
symmetrically less randomness

157
00:07:02,240 --> 00:07:04,960
in addition our simpler is convenient to

158
00:07:04,960 --> 00:07:07,360
cater close even better quality in

159
00:07:07,360 --> 00:07:09,919
practice

160
00:07:10,479 --> 00:07:13,440
first we will show our new git gaussian

161
00:07:13,440 --> 00:07:15,680
simpler

162
00:07:15,680 --> 00:07:18,400
the discrete gaussian is an important

163
00:07:18,400 --> 00:07:21,680
probability distribution in lattice

164
00:07:21,680 --> 00:07:23,919
it usually has three parameters the

165
00:07:23,919 --> 00:07:26,720
lattice l the central c and the positive

166
00:07:26,720 --> 00:07:30,479
defined corroding symmetric sigma for

167
00:07:30,479 --> 00:07:33,039
discrete gaussian the probability of

168
00:07:33,039 --> 00:07:35,759
each lattice point is a proportion to

169
00:07:35,759 --> 00:07:38,240
the value of the quotient function

170
00:07:38,240 --> 00:07:41,039
in particularly when the sigma is scalar

171
00:07:41,039 --> 00:07:42,000
metric

172
00:07:42,000 --> 00:07:43,199
we call the

173
00:07:43,199 --> 00:07:46,080
quotient the variable

174
00:07:46,080 --> 00:07:48,400
the parameter s is the switch of the

175
00:07:48,400 --> 00:07:49,680
quotient

176
00:07:49,680 --> 00:07:52,400
moreover the smaller s means the higher

177
00:07:52,400 --> 00:07:56,159
quality of the gaussian simpler

178
00:07:57,120 --> 00:08:00,000
with a good lattice base s we can

179
00:08:00,000 --> 00:08:02,000
efficient simple from the discrete

180
00:08:02,000 --> 00:08:03,199
gaussian

181
00:08:03,199 --> 00:08:06,400
there are two widely used simplers

182
00:08:06,400 --> 00:08:10,080
clean gpu simpler and packed simpler

183
00:08:10,080 --> 00:08:12,400
the pack simpler is more efficient and

184
00:08:12,400 --> 00:08:16,000
widely used emp trip door

185
00:08:16,000 --> 00:08:18,800
it consists of two steps

186
00:08:18,800 --> 00:08:21,840
the offline phrase simple perturbation

187
00:08:21,840 --> 00:08:24,879
vector of covariance sigma p

188
00:08:24,879 --> 00:08:27,599
the online phrase is an easy simpling

189
00:08:27,599 --> 00:08:30,400
over integer

190
00:08:30,960 --> 00:08:34,000
our main idea is using packet approach

191
00:08:34,000 --> 00:08:37,519
to improve simplicity and efficiency we

192
00:08:37,519 --> 00:08:40,640
also use inter-geometrical factorization

193
00:08:40,640 --> 00:08:44,959
to avoid the floating point arithmetic

194
00:08:45,440 --> 00:08:50,160
we used a symmetrical factorization

195
00:08:50,160 --> 00:08:53,360
shown in genius essential aging

196
00:08:53,360 --> 00:08:56,160
so our algorithms follow the same step

197
00:08:56,160 --> 00:08:59,920
with the button we implement the step 1

198
00:08:59,920 --> 00:09:03,760
for the patient sampling differently

199
00:09:04,320 --> 00:09:08,800
in gm18 the floater pointer arithmetic

200
00:09:08,800 --> 00:09:11,279
comes from perturbation simply

201
00:09:11,279 --> 00:09:14,080
they use kolasky decomposition and

202
00:09:14,080 --> 00:09:16,399
sometimes using continued gaussian

203
00:09:16,399 --> 00:09:19,920
sampling in the implementation

204
00:09:19,920 --> 00:09:22,959
to avoid floating point arithmetic

205
00:09:22,959 --> 00:09:25,920
we employ the

206
00:09:25,920 --> 00:09:28,959
this integrometric decomposition with a

207
00:09:28,959 --> 00:09:32,720
and g the matrix g is diagonal

208
00:09:32,720 --> 00:09:35,440
with such a integral decomposition

209
00:09:35,440 --> 00:09:38,399
the perturbation simply can be done by

210
00:09:38,399 --> 00:09:41,279
applying a linear transformation of a on

211
00:09:41,279 --> 00:09:43,680
the discrete quotient

212
00:09:43,680 --> 00:09:46,399
this is simple fast and highly

213
00:09:46,399 --> 00:09:48,560
paralyzable

214
00:09:48,560 --> 00:09:52,000
the idea is inspired by the work of

215
00:09:52,000 --> 00:09:55,920
dukas galbraith pressed and u

216
00:09:55,920 --> 00:09:59,040
but the technical difference is that

217
00:09:59,040 --> 00:10:02,800
the middle metric g is diagonal but not

218
00:10:02,800 --> 00:10:04,480
identity matrix

219
00:10:04,480 --> 00:10:08,000
which allowed to reduce the size of a

220
00:10:08,000 --> 00:10:11,279
that is only keep plus two columns much

221
00:10:11,279 --> 00:10:14,079
smaller than the size of the green root

222
00:10:14,079 --> 00:10:16,839
given in dgpy

223
00:10:16,839 --> 00:10:21,200
20. this compact metric greatly improves

224
00:10:21,200 --> 00:10:24,480
the sampling efficiency

225
00:10:24,560 --> 00:10:27,839
so as for comparison with genius

226
00:10:27,839 --> 00:10:30,880
essential i will simply achieve the same

227
00:10:30,880 --> 00:10:34,000
quality with the genius messenger one

228
00:10:34,000 --> 00:10:36,959
and genius essential heavily used floats

229
00:10:36,959 --> 00:10:39,760
i've only used integers which has better

230
00:10:39,760 --> 00:10:43,440
compatibility to constraint devices

231
00:10:43,440 --> 00:10:47,839
in addition we have storage advantage

232
00:10:50,079 --> 00:10:53,120
as the inefficiency both genius

233
00:10:53,120 --> 00:10:55,839
essential simpler and hours runs in

234
00:10:55,839 --> 00:10:57,600
linear times

235
00:10:57,600 --> 00:11:01,519
we implemented our neo-simpler and

236
00:11:01,519 --> 00:11:04,000
compared with implementation of the

237
00:11:04,000 --> 00:11:05,760
genius messenger simpler in the

238
00:11:05,760 --> 00:11:09,839
palestine library this figure shows that

239
00:11:09,839 --> 00:11:12,880
basically our algorithms is as fast as

240
00:11:12,880 --> 00:11:15,760
the genius essential simpler implemented

241
00:11:15,760 --> 00:11:18,800
in parasite

242
00:11:19,680 --> 00:11:23,279
so next we introduce our gauge sub

243
00:11:23,279 --> 00:11:25,680
gaussian simpler

244
00:11:25,680 --> 00:11:28,560
as one would expect a random value

245
00:11:28,560 --> 00:11:31,680
variable x over r is a proportion with

246
00:11:31,680 --> 00:11:35,120
parameter alpha if hto is bounded by the

247
00:11:35,120 --> 00:11:37,920
quotient of the visa alpha

248
00:11:37,920 --> 00:11:40,079
this is the example

249
00:11:40,079 --> 00:11:43,600
of subcaution

250
00:11:43,600 --> 00:11:46,079
we also use the subclosing vectors this

251
00:11:46,079 --> 00:11:49,359
is the definition of h

252
00:11:51,200 --> 00:11:53,440
subcaution is a relaxative version of a

253
00:11:53,440 --> 00:11:55,200
caution

254
00:11:55,200 --> 00:11:57,839
an important property of subproportion

255
00:11:57,839 --> 00:12:01,279
is pascaline activity

256
00:12:01,279 --> 00:12:04,240
this is similar to gaussian convolution

257
00:12:04,240 --> 00:12:07,279
leading to a slow arrow groups

258
00:12:07,279 --> 00:12:10,000
well simply subcaution is easier than

259
00:12:10,000 --> 00:12:12,800
sibling caution

260
00:12:14,560 --> 00:12:16,959
genius messenger practice

261
00:12:16,959 --> 00:12:19,680
is a subproportion analog to existing

262
00:12:19,680 --> 00:12:21,839
gauge gaussian simpler

263
00:12:21,839 --> 00:12:23,440
essential

264
00:12:23,440 --> 00:12:25,680
to have genius messenger

265
00:12:25,680 --> 00:12:28,239
18.

266
00:12:28,560 --> 00:12:30,399
specifically

267
00:12:30,399 --> 00:12:33,600
for the keys of the power b modules gmp

268
00:12:33,600 --> 00:12:36,880
819 runs supporting the bias nearest

269
00:12:36,880 --> 00:12:39,200
plan on pcs

270
00:12:39,200 --> 00:12:41,519
these algorithms achieve the gaussian

271
00:12:41,519 --> 00:12:45,120
impairment v minus 1 square root of 2 pi

272
00:12:45,120 --> 00:12:47,600
with k log b random bits

273
00:12:47,600 --> 00:12:49,680
for the arbitrary modulus

274
00:12:49,680 --> 00:12:51,839
its performance a sub caution provides

275
00:12:51,839 --> 00:12:54,480
nearest plan algorithms on t

276
00:12:54,480 --> 00:12:57,760
and applies a linear transform of t to

277
00:12:57,760 --> 00:13:01,200
lift the solution to gauge lattice

278
00:13:01,200 --> 00:13:02,000
here

279
00:13:02,000 --> 00:13:03,519
s is

280
00:13:03,519 --> 00:13:04,639
equal to

281
00:13:04,639 --> 00:13:09,600
t times d as in gm 18.

282
00:13:09,600 --> 00:13:13,279
in the end this algorithm requires

283
00:13:13,279 --> 00:13:16,480
k squared log b random bits and achieves

284
00:13:16,480 --> 00:13:19,200
the supplication parameter at most b

285
00:13:19,200 --> 00:13:23,279
plus 1 square root of 2 pi

286
00:13:25,680 --> 00:13:29,440
average sub quotient simply

287
00:13:29,440 --> 00:13:33,839
is very different from the gmp 19.

288
00:13:33,839 --> 00:13:36,399
idea is to convert the sampling for

289
00:13:36,399 --> 00:13:39,120
upgrade moduli into the easy and fast

290
00:13:39,120 --> 00:13:43,120
simpler for parallel b modules

291
00:13:43,120 --> 00:13:46,639
there is a simple fact that for short x

292
00:13:46,639 --> 00:13:49,680
if the inner product of x and g is equal

293
00:13:49,680 --> 00:13:54,000
to u mod q plus k powers of b

294
00:13:54,000 --> 00:13:56,800
the inner product of x and g is in the

295
00:13:56,800 --> 00:14:00,480
set of u and u minus b to the key

296
00:14:00,480 --> 00:14:03,839
so if the inner product of our simpler

297
00:14:03,839 --> 00:14:08,880
output x and g is equal to u modular q

298
00:14:08,880 --> 00:14:12,720
we also limit h in the side of u and u

299
00:14:12,720 --> 00:14:15,360
minus q

300
00:14:15,600 --> 00:14:16,959
notably

301
00:14:16,959 --> 00:14:19,839
the value of u and u minus q

302
00:14:19,839 --> 00:14:21,519
basically determines the most

303
00:14:21,519 --> 00:14:26,560
significant digit x sub k minus one

304
00:14:27,839 --> 00:14:31,199
so our simpler precise in these three

305
00:14:31,199 --> 00:14:32,240
steps

306
00:14:32,240 --> 00:14:34,800
first we chose u prime

307
00:14:34,800 --> 00:14:38,560
according to the proper probability

308
00:14:38,560 --> 00:14:41,600
then we simply a sub quotient x prime

309
00:14:41,600 --> 00:14:44,880
with a simpler for q equal

310
00:14:44,880 --> 00:14:48,959
b to the k minus 1 giving u prime

311
00:14:48,959 --> 00:14:51,040
finally we determine the last

312
00:14:51,040 --> 00:14:54,720
coefficient x k minus 1 as per u and x

313
00:14:54,720 --> 00:14:57,040
prime

314
00:14:57,440 --> 00:14:59,920
let's talk some details about our

315
00:14:59,920 --> 00:15:02,399
simpler

316
00:15:03,839 --> 00:15:06,320
these are the probabilities of selecting

317
00:15:06,320 --> 00:15:10,000
branches in the first step

318
00:15:10,000 --> 00:15:13,040
of algorithms requires less than two

319
00:15:13,040 --> 00:15:15,040
kilogram random bits

320
00:15:15,040 --> 00:15:18,320
it consisted of local random bits for

321
00:15:18,320 --> 00:15:21,839
determining branch in step one

322
00:15:21,839 --> 00:15:25,120
and k minus one log b random base for

323
00:15:25,120 --> 00:15:28,160
sampling x prime

324
00:15:28,399 --> 00:15:30,639
this is the sub gaussian parameter

325
00:15:30,639 --> 00:15:33,360
achieved by our new simpler and this can

326
00:15:33,360 --> 00:15:35,920
be proved by the

327
00:15:35,920 --> 00:15:39,479
holder in quality

328
00:15:40,800 --> 00:15:43,440
so next is the completion with our

329
00:15:43,440 --> 00:15:45,600
simpler and genuine essential product

330
00:15:45,600 --> 00:15:47,120
form

331
00:15:47,120 --> 00:15:50,639
the gmp algorithms use the k-squared log

332
00:15:50,639 --> 00:15:52,720
b random bits

333
00:15:52,720 --> 00:15:55,600
which was claimed to be almost optimal

334
00:15:55,600 --> 00:15:57,279
in their paper

335
00:15:57,279 --> 00:16:00,000
in fact half algorithms only need

336
00:16:00,000 --> 00:16:02,560
kilogram random bits

337
00:16:02,560 --> 00:16:04,800
notably our algorithm for upgrading

338
00:16:04,800 --> 00:16:08,160
modules needs an asymptotically amount

339
00:16:08,160 --> 00:16:09,519
of randomness

340
00:16:09,519 --> 00:16:13,360
with the one for parallel b modulus

341
00:16:13,360 --> 00:16:16,000
we therefore believe that it is

342
00:16:16,000 --> 00:16:18,399
essentially optimal in randomness

343
00:16:18,399 --> 00:16:21,040
requirement

344
00:16:21,199 --> 00:16:23,440
and other simpler is simple and

345
00:16:23,440 --> 00:16:27,279
translated completed metric so we didn't

346
00:16:27,279 --> 00:16:29,360
need

347
00:16:29,360 --> 00:16:31,519
extra storage and it's easier for

348
00:16:31,519 --> 00:16:36,040
implementation and fuse optimizations

349
00:16:36,560 --> 00:16:39,519
our algorithms achieve the

350
00:16:39,519 --> 00:16:42,079
close even better quality for practical

351
00:16:42,079 --> 00:16:44,560
payment

352
00:16:45,440 --> 00:16:48,240
in the worst case our payments is about

353
00:16:48,240 --> 00:16:50,959
the square root of 2 larger than the mp

354
00:16:50,959 --> 00:16:52,240
parameter

355
00:16:52,240 --> 00:16:53,440
but

356
00:16:53,440 --> 00:16:56,160
when the base is 2 which is commonly

357
00:16:56,160 --> 00:16:57,120
used

358
00:16:57,120 --> 00:17:01,120
our payment is square root of 2 pi which

359
00:17:01,120 --> 00:17:04,160
is smaller than dmp1

360
00:17:04,160 --> 00:17:06,400
and for the large b

361
00:17:06,400 --> 00:17:10,240
there exists many ngt modular skew such

362
00:17:10,240 --> 00:17:15,599
that our parameter is similar to gmp1

363
00:17:17,599 --> 00:17:20,400
more important our simpler is

364
00:17:20,400 --> 00:17:22,240
practically fast

365
00:17:22,240 --> 00:17:24,880
it can be seen in the picture that our

366
00:17:24,880 --> 00:17:28,079
sub gaussian simpler is greatly faster

367
00:17:28,079 --> 00:17:30,240
than the genius messenger perk

368
00:17:30,240 --> 00:17:33,039
improvement to in

369
00:17:33,039 --> 00:17:35,039
palestine library

370
00:17:35,039 --> 00:17:39,039
precisely our algorithm is about 1.3 to

371
00:17:39,039 --> 00:17:42,559
3.2 times faster than the palestine

372
00:17:42,559 --> 00:17:45,679
implementation of genius messenger park

373
00:17:45,679 --> 00:17:48,320
algorithm

374
00:17:49,200 --> 00:17:50,880
all in all

375
00:17:50,880 --> 00:17:53,600
we proposed two new kitche algorithms

376
00:17:53,600 --> 00:17:56,080
that have some advantage from both

377
00:17:56,080 --> 00:17:58,840
implementation and the theoretical

378
00:17:58,840 --> 00:18:02,000
standpoint our kids caution simpler get

379
00:18:02,000 --> 00:18:02,960
rid

380
00:18:02,960 --> 00:18:05,760
of the reliance on high precision

381
00:18:05,760 --> 00:18:08,799
arithmetic while keeping a good

382
00:18:08,799 --> 00:18:11,120
efficiency and quality

383
00:18:11,120 --> 00:18:13,760
and however each subcaution simpler is

384
00:18:13,760 --> 00:18:16,080
simpler faster underneath a

385
00:18:16,080 --> 00:18:18,960
symmetrically less randomness compared

386
00:18:18,960 --> 00:18:22,320
with the previous result

387
00:18:22,320 --> 00:18:23,760
thank you for listening to my

388
00:18:23,760 --> 00:18:26,760
presentation

