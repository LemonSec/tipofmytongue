1
00:00:00,880 --> 00:00:04,080
hello everyone i'm len ichibasi i'd like

2
00:00:04,080 --> 00:00:06,240
to talk about post-quantum anonymous

3
00:00:06,240 --> 00:00:08,240
one-sided authentication exchange

4
00:00:08,240 --> 00:00:10,719
without random oracles

5
00:00:10,719 --> 00:00:12,719
this is a joint work with kazuki

6
00:00:12,719 --> 00:00:14,960
yoneyama

7
00:00:14,960 --> 00:00:17,359
this presentation proceeds as follows

8
00:00:17,359 --> 00:00:19,279
first introduction

9
00:00:19,279 --> 00:00:22,320
second cc model for osak

10
00:00:22,320 --> 00:00:25,439
that proposed generic construction of

11
00:00:25,439 --> 00:00:28,240
osak in the standard models

12
00:00:28,240 --> 00:00:33,200
first instantiation finally conclusion

13
00:00:33,200 --> 00:00:36,880
let's start by the introduction

14
00:00:37,760 --> 00:00:40,719
presentation exchange so-called a-gay

15
00:00:40,719 --> 00:00:43,360
aka the cryptography protocol to share

16
00:00:43,360 --> 00:00:46,399
communication key among multiple parties

17
00:00:46,399 --> 00:00:48,000
through an authentic

18
00:00:48,000 --> 00:00:50,480
network such as the internet

19
00:00:50,480 --> 00:00:53,039
in this study we focus on it between two

20
00:00:53,039 --> 00:00:54,480
bodies

21
00:00:54,480 --> 00:00:57,280
each party has a static kpi

22
00:00:57,280 --> 00:00:59,760
and in the key exchange section each

23
00:00:59,760 --> 00:01:02,719
body generates our firmware circuit key

24
00:01:02,719 --> 00:01:05,840
esk and generates our female property

25
00:01:05,840 --> 00:01:06,960
apk

26
00:01:06,960 --> 00:01:09,119
by using these keys

27
00:01:09,119 --> 00:01:11,760
and send it to the other party

28
00:01:11,760 --> 00:01:14,000
then each party computes a common

29
00:01:14,000 --> 00:01:16,960
session key using these keys

30
00:01:16,960 --> 00:01:19,360
so the ordinary aka is mutual

31
00:01:19,360 --> 00:01:20,960
authentication

32
00:01:20,960 --> 00:01:23,520
however in practice mutual

33
00:01:23,520 --> 00:01:26,159
authentication is not required for some

34
00:01:26,159 --> 00:01:28,880
applications

35
00:01:29,520 --> 00:01:33,040
for example https transactions with only

36
00:01:33,040 --> 00:01:34,960
several authentication

37
00:01:34,960 --> 00:01:36,720
in this example

38
00:01:36,720 --> 00:01:39,119
the server returns a static private key

39
00:01:39,119 --> 00:01:41,520
and each certificate in response to the

40
00:01:41,520 --> 00:01:43,360
grant's request

41
00:01:43,360 --> 00:01:46,159
then the client will send it the server

42
00:01:46,159 --> 00:01:48,640
using these

43
00:01:48,640 --> 00:01:51,280
and then exchange keys

44
00:01:51,280 --> 00:01:52,399
so

45
00:01:52,399 --> 00:01:54,640
okay exchange without client

46
00:01:54,640 --> 00:01:57,280
authentication one-sided ak may be

47
00:01:57,280 --> 00:01:58,880
sufficient

48
00:01:58,880 --> 00:02:00,240
in this paper

49
00:02:00,240 --> 00:02:03,040
the ak with one-sided authentication is

50
00:02:03,040 --> 00:02:06,880
called always aka

51
00:02:07,119 --> 00:02:09,679
in addition it is desirable for clients

52
00:02:09,679 --> 00:02:11,280
to be anonymous

53
00:02:11,280 --> 00:02:14,800
for example to anonymity network

54
00:02:14,800 --> 00:02:17,200
when the client connects to their

55
00:02:17,200 --> 00:02:20,080
destination it passed through multiple

56
00:02:20,080 --> 00:02:21,599
relays

57
00:02:21,599 --> 00:02:24,080
in the red channel and one side

58
00:02:24,080 --> 00:02:27,360
anonymous communication is used

59
00:02:27,360 --> 00:02:31,760
so each layer cannot identify the sender

60
00:02:31,760 --> 00:02:33,760
and finally

61
00:02:33,760 --> 00:02:36,239
the exit relay communicates with the

62
00:02:36,239 --> 00:02:39,280
destination through normal communication

63
00:02:39,280 --> 00:02:42,000
in this way the client can communicate

64
00:02:42,000 --> 00:02:43,920
with the destination with keeping his

65
00:02:43,920 --> 00:02:45,599
anonymity

66
00:02:45,599 --> 00:02:46,560
so

67
00:02:46,560 --> 00:02:48,959
in enormous networks such as the tour

68
00:02:48,959 --> 00:02:51,440
and the rifle anonymous always again is

69
00:02:51,440 --> 00:02:54,239
required

70
00:02:54,879 --> 00:02:57,440
if osaki is represent with the figure

71
00:02:57,440 --> 00:03:00,560
sold in the page 3 always a case is

72
00:03:00,560 --> 00:03:02,959
remove the current ssk

73
00:03:02,959 --> 00:03:05,280
since it doesn't require a client

74
00:03:05,280 --> 00:03:08,239
authentication

75
00:03:08,640 --> 00:03:12,080
next i'll show the existing anonymous os

76
00:03:12,080 --> 00:03:14,560
ak schemes

77
00:03:14,560 --> 00:03:18,000
the gsu12 proposed security model for us

78
00:03:18,000 --> 00:03:21,519
ak to be used in this study

79
00:03:21,519 --> 00:03:24,879
and the big m12 and gt15 schemes are

80
00:03:24,879 --> 00:03:27,360
guaranteed and a weaker fresher setting

81
00:03:27,360 --> 00:03:29,840
than the original one

82
00:03:29,840 --> 00:03:35,040
and the gk15s consist of radish and dh

83
00:03:35,040 --> 00:03:38,480
and in some case the skin is not

84
00:03:38,480 --> 00:03:40,000
poscondem

85
00:03:40,000 --> 00:03:43,440
so it is partially post condom skin

86
00:03:43,440 --> 00:03:45,519
these schemes are proved in a random

87
00:03:45,519 --> 00:03:48,480
oracle model

88
00:03:48,720 --> 00:03:49,680
so

89
00:03:49,680 --> 00:03:52,560
as our contribution we propose generic

90
00:03:52,560 --> 00:03:53,920
instructions

91
00:03:53,920 --> 00:03:56,400
one the standard model and one in the

92
00:03:56,400 --> 00:03:58,480
random oracle model

93
00:03:58,480 --> 00:04:01,519
the ones in random in the standard model

94
00:04:01,519 --> 00:04:05,040
can consist of industrial secure cam and

95
00:04:05,040 --> 00:04:08,080
indistribute secure game with publicly

96
00:04:08,080 --> 00:04:12,319
independent ciphertext called pkicam

97
00:04:12,319 --> 00:04:15,280
well the ones in the random oracle model

98
00:04:15,280 --> 00:04:19,519
can consist of all wcas secure camp and

99
00:04:19,519 --> 00:04:22,880
all there should be a secure pdic cam

100
00:04:22,880 --> 00:04:25,360
these constructions are guaranteed under

101
00:04:25,360 --> 00:04:29,520
the original gc module

102
00:04:29,520 --> 00:04:31,520
in addition we propose five

103
00:04:31,520 --> 00:04:33,440
instantiation

104
00:04:33,440 --> 00:04:36,320
in these base schemes the one in running

105
00:04:36,320 --> 00:04:38,800
in the random oracle model is under the

106
00:04:38,800 --> 00:04:41,199
cdh assumptions

107
00:04:41,199 --> 00:04:43,840
and the one in the standard model is

108
00:04:43,840 --> 00:04:47,120
first anonymous osaki schemes

109
00:04:47,120 --> 00:04:48,240
and

110
00:04:48,240 --> 00:04:50,160
this schemes a smaller online

111
00:04:50,160 --> 00:04:52,400
computational cost of clients than

112
00:04:52,400 --> 00:04:54,960
existing schemes

113
00:04:54,960 --> 00:04:57,680
in the post quantum schemes the ones in

114
00:04:57,680 --> 00:05:00,400
the random oracle model are

115
00:05:00,400 --> 00:05:05,120
sidh based and seaside based schemes

116
00:05:05,120 --> 00:05:07,520
and the one in the standard model is

117
00:05:07,520 --> 00:05:10,479
only seaside based schemes but

118
00:05:10,479 --> 00:05:13,919
the first anonymous osa scheme

119
00:05:13,919 --> 00:05:16,880
here it is described as fully first

120
00:05:16,880 --> 00:05:17,919
condom

121
00:05:17,919 --> 00:05:20,960
because the existing schemes is not

122
00:05:20,960 --> 00:05:24,000
first condom under some leakage patterns

123
00:05:24,000 --> 00:05:26,880
but all schemes are possible in them and

124
00:05:26,880 --> 00:05:30,479
are all leakage patterns

125
00:05:30,720 --> 00:05:35,360
next i'll explain the gse model

126
00:05:35,600 --> 00:05:38,080
the jc model allows the adversary to

127
00:05:38,080 --> 00:05:41,680
wire up and modify and reveal previous

128
00:05:41,680 --> 00:05:44,560
session key and reveal a firmware secret

129
00:05:44,560 --> 00:05:46,320
key and reveal

130
00:05:46,320 --> 00:05:49,199
static secret key just like the hdk

131
00:05:49,199 --> 00:05:50,479
module

132
00:05:50,479 --> 00:05:51,440
also

133
00:05:51,440 --> 00:05:54,320
as an additional query it allows the

134
00:05:54,320 --> 00:05:56,880
adversary to obtain the apks used in

135
00:05:56,880 --> 00:06:00,560
each party in advance

136
00:06:00,720 --> 00:06:02,000
so

137
00:06:02,000 --> 00:06:04,720
in the gsm model there is a query called

138
00:06:04,720 --> 00:06:06,400
reveal next

139
00:06:06,400 --> 00:06:08,720
it allows the adversary to obtain a

140
00:06:08,720 --> 00:06:11,120
biggest first session in advance

141
00:06:11,120 --> 00:06:14,319
that's why epa's first session must be

142
00:06:14,319 --> 00:06:17,199
able to be generated in advance of

143
00:06:17,199 --> 00:06:18,800
flying

144
00:06:18,800 --> 00:06:21,840
in addition due to the flying generation

145
00:06:21,840 --> 00:06:24,639
the freshness is a bit unique

146
00:06:24,639 --> 00:06:27,520
it considers wreckage for secret key

147
00:06:27,520 --> 00:06:32,080
except for all riggage of each party

148
00:06:32,080 --> 00:06:34,639
so repairing circuit key

149
00:06:34,639 --> 00:06:37,360
our esk and ssk

150
00:06:37,360 --> 00:06:41,120
must be considered from each for example

151
00:06:41,120 --> 00:06:43,120
the secret key

152
00:06:43,120 --> 00:06:46,560
used in a station are

153
00:06:46,560 --> 00:06:50,960
rc and rt for the client and rs

154
00:06:50,960 --> 00:06:54,000
and the guest for the server we need we

155
00:06:54,000 --> 00:06:56,479
need to consider reviewing

156
00:06:56,479 --> 00:06:58,080
one each

157
00:06:58,080 --> 00:07:01,039
such as rc and rs

158
00:07:01,039 --> 00:07:06,400
over rc and djs were rd or and rs over

159
00:07:06,400 --> 00:07:09,120
rt and dks

160
00:07:09,120 --> 00:07:12,319
in addition to this there are other osag

161
00:07:12,319 --> 00:07:15,360
models such as for trs

162
00:07:15,360 --> 00:07:17,120
the setting

163
00:07:17,120 --> 00:07:17,919
but

164
00:07:17,919 --> 00:07:20,400
those models are the application to the

165
00:07:20,400 --> 00:07:22,880
setting of anonymous networks is not

166
00:07:22,880 --> 00:07:24,400
considered

167
00:07:24,400 --> 00:07:27,840
and the anonymity is not focused

168
00:07:27,840 --> 00:07:32,239
so we focus on the gse model

169
00:07:32,560 --> 00:07:35,759
next i'll introduce the proposed generic

170
00:07:35,759 --> 00:07:38,080
construction of osak in the standard

171
00:07:38,080 --> 00:07:40,479
model

172
00:07:40,880 --> 00:07:43,919
so by removing the client escape from

173
00:07:43,919 --> 00:07:46,639
the general reconstruction of ak in

174
00:07:46,639 --> 00:07:49,120
fsxy15

175
00:07:49,120 --> 00:07:50,879
it looks we can

176
00:07:50,879 --> 00:07:53,680
simply construct osaka

177
00:07:53,680 --> 00:07:55,680
so i'll show you

178
00:07:55,680 --> 00:07:58,639
an example of the construction

179
00:07:58,639 --> 00:08:01,199
the fs xy construction consists of

180
00:08:01,199 --> 00:08:03,520
industrial security and industrial

181
00:08:03,520 --> 00:08:05,199
secure cam

182
00:08:05,199 --> 00:08:08,720
and the syntax is as

183
00:08:10,840 --> 00:08:14,960
follows first i'll show the

184
00:08:14,960 --> 00:08:17,680
fsxy construction

185
00:08:17,680 --> 00:08:20,479
the schemes used this trick and called

186
00:08:20,479 --> 00:08:23,280
their twisted pr tonic

187
00:08:23,280 --> 00:08:26,560
to provide the radius resilience so each

188
00:08:26,560 --> 00:08:29,680
party has access case to the two u's for

189
00:08:29,680 --> 00:08:31,039
this trick

190
00:08:31,039 --> 00:08:34,880
and each party has the keypair of cjk

191
00:08:34,880 --> 00:08:38,080
dks as ssk and it gets

192
00:08:38,080 --> 00:08:39,120
rs

193
00:08:39,120 --> 00:08:40,559
svk

194
00:08:40,559 --> 00:08:43,200
in the key exchange session first the

195
00:08:43,200 --> 00:08:44,320
client

196
00:08:44,320 --> 00:08:46,640
generates two randomness for the toeic

197
00:08:46,640 --> 00:08:49,040
and generates our randomness for the cpa

198
00:08:49,040 --> 00:08:50,000
game

199
00:08:50,000 --> 00:08:53,519
and it generates a randomness based on

200
00:08:53,519 --> 00:08:56,399
the tweak then it generates our

201
00:08:56,399 --> 00:08:59,680
ciphertext and the key for the cjk

202
00:08:59,680 --> 00:09:02,160
and generates our keypair for the cpa

203
00:09:02,160 --> 00:09:04,080
game

204
00:09:04,080 --> 00:09:07,519
and sends cg and ekt

205
00:09:07,519 --> 00:09:09,040
to disciple

206
00:09:09,040 --> 00:09:12,800
upon receiving this the server generates

207
00:09:12,800 --> 00:09:15,519
randomness just like their client

208
00:09:15,519 --> 00:09:18,320
and generate ciphertext and keys for the

209
00:09:18,320 --> 00:09:20,880
cta cam and the cba cam

210
00:09:20,880 --> 00:09:23,279
and returned the cybertext

211
00:09:23,279 --> 00:09:26,399
finally each party equips the ciphertext

212
00:09:26,399 --> 00:09:28,959
with its own degradation key

213
00:09:28,959 --> 00:09:32,399
to obtain the shared value

214
00:09:34,080 --> 00:09:37,839
here if we remove the client ssk we get

215
00:09:37,839 --> 00:09:40,959
the naive fsx5 based construction like

216
00:09:40,959 --> 00:09:42,240
this

217
00:09:42,240 --> 00:09:44,959
the trick on the client side and the

218
00:09:44,959 --> 00:09:46,800
computation of the

219
00:09:46,800 --> 00:09:49,120
cj king and the toeic

220
00:09:49,120 --> 00:09:52,959
on the server side are removed

221
00:09:54,640 --> 00:09:57,440
so there is a protocol without the

222
00:09:57,440 --> 00:10:01,120
removed parts it looks vegan construct

223
00:10:01,120 --> 00:10:02,640
always a gay

224
00:10:02,640 --> 00:10:03,680
however

225
00:10:03,680 --> 00:10:06,320
there are two problems with this

226
00:10:06,320 --> 00:10:09,040
construction

227
00:10:10,320 --> 00:10:12,800
first by considering the reveal of

228
00:10:12,800 --> 00:10:14,959
secret value one each

229
00:10:14,959 --> 00:10:18,399
it is easy to compute chem keys

230
00:10:18,399 --> 00:10:21,680
for example rtc and djs

231
00:10:21,680 --> 00:10:23,760
are rebuilt

232
00:10:23,760 --> 00:10:29,519
the adversary can generate dkd from rtc

233
00:10:29,519 --> 00:10:30,240
and

234
00:10:30,240 --> 00:10:33,680
decrypt cd with dkt

235
00:10:33,680 --> 00:10:38,800
also it can degraft cc with dkt degas

236
00:10:38,800 --> 00:10:41,279
therefore it is difficult to construct

237
00:10:41,279 --> 00:10:45,560
on fsxy based

238
00:10:46,800 --> 00:10:49,600
as a solution to this problem we propose

239
00:10:49,600 --> 00:10:52,320
a technique to generate two randomness

240
00:10:52,320 --> 00:10:54,399
from one randomness

241
00:10:54,399 --> 00:10:56,560
it uses a soup random function to

242
00:10:56,560 --> 00:11:01,120
generate from one randomness in this way

243
00:11:01,120 --> 00:11:02,160
then

244
00:11:02,160 --> 00:11:06,720
by releasing rc and rtc in this part

245
00:11:06,720 --> 00:11:09,279
the reveal target for the client

246
00:11:09,279 --> 00:11:10,320
can be

247
00:11:10,320 --> 00:11:14,120
only this all

248
00:11:14,959 --> 00:11:16,720
here i'll show

249
00:11:16,720 --> 00:11:19,120
how to generate randomness for the

250
00:11:19,120 --> 00:11:21,200
technique concretely

251
00:11:21,200 --> 00:11:24,880
we generally generate as follows

252
00:11:24,880 --> 00:11:28,720
first generate one randomness second it

253
00:11:28,720 --> 00:11:31,600
uses a suit random function to generate

254
00:11:31,600 --> 00:11:34,240
2d different values

255
00:11:34,240 --> 00:11:36,959
in the suit random function space

256
00:11:36,959 --> 00:11:40,000
finally it used two suit random

257
00:11:40,000 --> 00:11:42,880
functions to generate two values in each

258
00:11:42,880 --> 00:11:45,040
randomness space

259
00:11:45,040 --> 00:11:46,079
here

260
00:11:46,079 --> 00:11:49,680
can we always in intermediate rc prime

261
00:11:49,680 --> 00:11:52,399
and rtc prime okay

262
00:11:52,399 --> 00:11:57,399
i i'll show that this case

263
00:11:58,480 --> 00:12:01,279
in this case we generate randomness in

264
00:12:01,279 --> 00:12:02,720
this way

265
00:12:02,720 --> 00:12:05,120
but in this example

266
00:12:05,120 --> 00:12:08,079
the osa security cannot be reduced to

267
00:12:08,079 --> 00:12:11,760
the cga security or the cbs security

268
00:12:11,760 --> 00:12:14,560
for example the game randomly the cgi

269
00:12:14,560 --> 00:12:16,079
chem key

270
00:12:16,079 --> 00:12:18,639
in the game the randomness the

271
00:12:18,639 --> 00:12:22,000
randomness of the cj cam is converted to

272
00:12:22,000 --> 00:12:22,959
the

273
00:12:22,959 --> 00:12:25,279
output of the random function in this

274
00:12:25,279 --> 00:12:26,480
way

275
00:12:26,480 --> 00:12:30,720
in this case when always aka adversary

276
00:12:30,720 --> 00:12:32,000
activates

277
00:12:32,000 --> 00:12:33,680
the test session

278
00:12:33,680 --> 00:12:35,440
the institutions

279
00:12:35,440 --> 00:12:38,880
generator need to return the sushi prime

280
00:12:38,880 --> 00:12:40,000
and

281
00:12:40,000 --> 00:12:42,720
shishistan and egdster

282
00:12:42,720 --> 00:12:43,519
but

283
00:12:43,519 --> 00:12:47,279
since simulator does not know

284
00:12:47,279 --> 00:12:49,600
our rooster

285
00:12:49,600 --> 00:12:54,240
so it cannot return the correct egg stir

286
00:12:54,240 --> 00:12:56,560
so it cannot generate

287
00:12:56,560 --> 00:12:58,079
correctly

288
00:12:58,079 --> 00:12:58,880
so

289
00:12:58,880 --> 00:13:01,600
we use three pseudo-random function in

290
00:13:01,600 --> 00:13:04,320
the technique

291
00:13:05,200 --> 00:13:08,800
next the second problem is ep case this

292
00:13:08,800 --> 00:13:10,240
apks

293
00:13:10,240 --> 00:13:13,920
cannot be generate or fly in fsxy-based

294
00:13:13,920 --> 00:13:15,360
contraction

295
00:13:15,360 --> 00:13:17,120
in this construction the server

296
00:13:17,120 --> 00:13:20,320
generates cd based on the ekt received

297
00:13:20,320 --> 00:13:22,000
from the client

298
00:13:22,000 --> 00:13:22,800
so

299
00:13:22,800 --> 00:13:27,439
offline generation is not possible

300
00:13:28,560 --> 00:13:31,519
as a solution to this problem we use

301
00:13:31,519 --> 00:13:35,120
pkic cam for distributed cam

302
00:13:35,120 --> 00:13:38,000
the pkh game allows ciphertext to be

303
00:13:38,000 --> 00:13:40,480
generated independently to the public

304
00:13:40,480 --> 00:13:41,760
key

305
00:13:41,760 --> 00:13:44,240
in this way the cyber text

306
00:13:44,240 --> 00:13:47,600
can be generated independently to the

307
00:13:47,600 --> 00:13:50,800
this ekt

308
00:13:52,399 --> 00:13:55,600
so applying it to the protocol we get

309
00:13:55,600 --> 00:13:58,240
the following protocol

310
00:13:58,240 --> 00:14:00,639
so in this way all

311
00:14:00,639 --> 00:14:03,440
apks can be generated offline before the

312
00:14:03,440 --> 00:14:06,560
session activates

313
00:14:09,199 --> 00:14:12,240
in addition for efficiency by reversing

314
00:14:12,240 --> 00:14:14,720
the pci cam flow

315
00:14:14,720 --> 00:14:17,839
in this way

316
00:14:18,959 --> 00:14:22,399
so we can reduce computation for w

317
00:14:22,399 --> 00:14:25,040
keychain

318
00:14:25,199 --> 00:14:28,480
now i'd like to consider about about

319
00:14:28,480 --> 00:14:31,440
security of our construction

320
00:14:31,440 --> 00:14:34,079
from the freshness if the party has only

321
00:14:34,079 --> 00:14:36,480
one secret key there is no need to

322
00:14:36,480 --> 00:14:38,399
consider re-gauge

323
00:14:38,399 --> 00:14:39,279
so

324
00:14:39,279 --> 00:14:43,040
the crime site leakage is not considered

325
00:14:43,040 --> 00:14:45,519
therefore since the service reveal tag

326
00:14:45,519 --> 00:14:46,560
is

327
00:14:46,560 --> 00:14:50,240
tighter hours and decades

328
00:14:50,240 --> 00:14:52,800
so the leakage pattern to be considered

329
00:14:52,800 --> 00:14:59,079
a only rs or only djs

330
00:14:59,519 --> 00:15:02,639
first leakage of rs

331
00:15:02,639 --> 00:15:04,160
in this case

332
00:15:04,160 --> 00:15:08,000
the adversary can compute kd from rs in

333
00:15:08,000 --> 00:15:11,440
this way but cannot compute casey

334
00:15:11,440 --> 00:15:14,959
without knowing this rs

335
00:15:14,959 --> 00:15:16,639
or this all

336
00:15:16,639 --> 00:15:20,240
therefore it is secure

337
00:15:21,199 --> 00:15:22,720
next

338
00:15:22,720 --> 00:15:24,880
wreakage of the gas

339
00:15:24,880 --> 00:15:28,639
in this case the adversary can con

340
00:15:28,639 --> 00:15:31,199
compute kc with dks

341
00:15:31,199 --> 00:15:35,920
but cannot compute kd without knowing rs

342
00:15:35,920 --> 00:15:37,920
or this our

343
00:15:37,920 --> 00:15:41,839
therefore it is secure

344
00:15:44,000 --> 00:15:44,959
so

345
00:15:44,959 --> 00:15:48,160
next about anonymity of clients the

346
00:15:48,160 --> 00:15:50,560
clients never send information dependent

347
00:15:50,560 --> 00:15:51,600
to him

348
00:15:51,600 --> 00:15:54,560
id and staticy etc

349
00:15:54,560 --> 00:15:56,240
in each session

350
00:15:56,240 --> 00:15:57,279
so

351
00:15:57,279 --> 00:16:00,560
the adversary cannot get any information

352
00:16:00,560 --> 00:16:04,638
about the client from the ciphertext

353
00:16:04,880 --> 00:16:10,560
next i'll introduce our instant agents

354
00:16:10,959 --> 00:16:13,279
this is a comparison of these based

355
00:16:13,279 --> 00:16:16,480
schemes and existing schemes

356
00:16:16,480 --> 00:16:18,959
the over 2 is the first anonymous earth

357
00:16:18,959 --> 00:16:23,279
against games in the standard models and

358
00:16:23,279 --> 00:16:26,800
both schemes reduce the online

359
00:16:26,800 --> 00:16:30,639
online exponentiation cost for clients

360
00:16:30,639 --> 00:16:31,759
finally

361
00:16:31,759 --> 00:16:34,160
the existing schemes are under the gap

362
00:16:34,160 --> 00:16:38,800
dh assumption but r1 is under the

363
00:16:38,800 --> 00:16:42,800
standard cdh assumption and uber2 is

364
00:16:42,800 --> 00:16:47,758
under their standard dj ddh assumption

365
00:16:48,560 --> 00:16:50,959
the next instantiation is the first

366
00:16:50,959 --> 00:16:53,199
quantum schemes from ice genius in the

367
00:16:53,199 --> 00:16:56,560
random oracle model

368
00:16:56,639 --> 00:16:57,600
first

369
00:16:57,600 --> 00:17:00,800
there is sidh based schemes consists of

370
00:17:00,800 --> 00:17:03,759
cgi secure cycle cam and in the gps

371
00:17:03,759 --> 00:17:06,079
secure pk

372
00:17:06,079 --> 00:17:08,720
from sc20

373
00:17:08,720 --> 00:17:09,839
here

374
00:17:09,839 --> 00:17:13,280
this pk is converted to be to

375
00:17:13,280 --> 00:17:14,559
convert to

376
00:17:14,559 --> 00:17:19,039
ow cpa secure pks cam and then it is

377
00:17:19,039 --> 00:17:21,599
used

378
00:17:21,839 --> 00:17:22,880
next

379
00:17:22,880 --> 00:17:25,119
the she said based games consists of the

380
00:17:25,119 --> 00:17:29,360
cc secure seaside pc came from young 21

381
00:17:29,360 --> 00:17:31,520
and should be secure she said came from

382
00:17:31,520 --> 00:17:33,600
crm 18

383
00:17:33,600 --> 00:17:34,480
here

384
00:17:34,480 --> 00:17:36,880
this cam is converted

385
00:17:36,880 --> 00:17:39,440
to the pkh game

386
00:17:39,440 --> 00:17:41,360
in the same way

387
00:17:41,360 --> 00:17:43,760
so these schemes are the first post

388
00:17:43,760 --> 00:17:45,679
quantum schemes in the random oracle

389
00:17:45,679 --> 00:17:47,840
mode

390
00:17:50,080 --> 00:17:50,880
here

391
00:17:50,880 --> 00:17:53,760
i'll introduce how to transform the

392
00:17:53,760 --> 00:17:57,120
psych pk to pkicam

393
00:17:57,120 --> 00:17:58,080
first

394
00:17:58,080 --> 00:18:01,120
we'll remove the first and fifth

395
00:18:01,120 --> 00:18:04,559
computation in ink and the second

396
00:18:04,559 --> 00:18:08,240
and set and computation in deck

397
00:18:08,240 --> 00:18:12,840
since we use the pk as the

398
00:18:12,840 --> 00:18:16,880
cam and since our generic construction

399
00:18:16,880 --> 00:18:19,120
in the random oracle module

400
00:18:19,120 --> 00:18:21,679
is sufficient for their own should be a

401
00:18:21,679 --> 00:18:23,440
secure cam

402
00:18:23,440 --> 00:18:24,160
so

403
00:18:24,160 --> 00:18:25,039
that

404
00:18:25,039 --> 00:18:25,919
this

405
00:18:25,919 --> 00:18:29,760
gm variant is used as a chem key without

406
00:18:29,760 --> 00:18:33,360
passing it through the random oracle

407
00:18:33,360 --> 00:18:34,480
next

408
00:18:34,480 --> 00:18:36,000
we use the first

409
00:18:36,000 --> 00:18:40,000
first and second computation

410
00:18:41,360 --> 00:18:42,720
in anc

411
00:18:42,720 --> 00:18:43,679
as

412
00:18:43,679 --> 00:18:45,840
this wnc

413
00:18:45,840 --> 00:18:47,840
and the third computation

414
00:18:47,840 --> 00:18:49,320
as this

415
00:18:49,320 --> 00:18:51,120
wnk

416
00:18:51,120 --> 00:18:53,600
wn cuff k

417
00:18:53,600 --> 00:18:57,200
and then we can use it as pkh game by

418
00:18:57,200 --> 00:19:01,039
transforming it as follows

419
00:19:02,160 --> 00:19:04,880
the last instantiation is the first

420
00:19:04,880 --> 00:19:07,600
content skips in the random in the

421
00:19:07,600 --> 00:19:11,280
standard models but only seaside based

422
00:19:11,280 --> 00:19:12,559
schemes

423
00:19:12,559 --> 00:19:15,200
the schemes consist of the cga chem

424
00:19:15,200 --> 00:19:18,400
cclcam and the smooth project passing

425
00:19:18,400 --> 00:19:21,280
from afmp20

426
00:19:21,280 --> 00:19:24,880
and sysad came from crm18

427
00:19:24,880 --> 00:19:27,280
here we passed the session key of the

428
00:19:27,280 --> 00:19:28,880
cam through

429
00:19:28,880 --> 00:19:31,760
the entropy smoothing hash function and

430
00:19:31,760 --> 00:19:35,120
constructed it and construct it

431
00:19:35,120 --> 00:19:37,520
as she said cam

432
00:19:37,520 --> 00:19:41,440
and also this cam is compared to the pks

433
00:19:41,440 --> 00:19:44,080
game in the same way

434
00:19:44,080 --> 00:19:45,760
so

435
00:19:45,760 --> 00:19:48,640
the schemes is the first first quantum

436
00:19:48,640 --> 00:19:52,480
scheme in the standard model

437
00:19:52,480 --> 00:19:55,840
finally conclusion

438
00:19:56,480 --> 00:19:59,840
so we proposed generic construction for

439
00:19:59,840 --> 00:20:01,200
osak

440
00:20:01,200 --> 00:20:03,919
anonymous osaki the ones in the standard

441
00:20:03,919 --> 00:20:06,320
model and the ones in the random oracle

442
00:20:06,320 --> 00:20:07,600
models

443
00:20:07,600 --> 00:20:10,640
also we proposed general web generic

444
00:20:10,640 --> 00:20:13,440
construction and we also proposed

445
00:20:13,440 --> 00:20:15,120
instantiation of the generic

446
00:20:15,120 --> 00:20:17,200
construction

447
00:20:17,200 --> 00:20:18,000
so

448
00:20:18,000 --> 00:20:19,360
when the

449
00:20:19,360 --> 00:20:21,360
teach based schemes is the first

450
00:20:21,360 --> 00:20:24,080
dh-based anonymous osa gay schemes in

451
00:20:24,080 --> 00:20:26,000
the standard model

452
00:20:26,000 --> 00:20:30,799
and the ones based uh isogenys and

453
00:20:30,799 --> 00:20:33,280
are the first post-countdown anonymous

454
00:20:33,280 --> 00:20:35,280
osaka schemes

455
00:20:35,280 --> 00:20:37,360
that's it from me thank you all for

456
00:20:37,360 --> 00:20:40,360
racing

