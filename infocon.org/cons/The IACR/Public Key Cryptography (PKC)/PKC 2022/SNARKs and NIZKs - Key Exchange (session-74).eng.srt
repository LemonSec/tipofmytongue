1
00:00:00,240 --> 00:00:01,280
first

2
00:00:01,280 --> 00:00:05,160
session of the last day of pkc

3
00:00:05,160 --> 00:00:07,040
2022

4
00:00:07,040 --> 00:00:10,080
this is a session on snarks and an ice

5
00:00:10,080 --> 00:00:13,519
head case and we have four talks

6
00:00:13,519 --> 00:00:15,440
in this session

7
00:00:15,440 --> 00:00:16,480
the first

8
00:00:16,480 --> 00:00:18,320
talk is titled

9
00:00:18,320 --> 00:00:21,439
polynomial iops for linear algebra

10
00:00:21,439 --> 00:00:23,119
relations

11
00:00:23,119 --> 00:00:23,920
and

12
00:00:23,920 --> 00:00:25,519
the paper is by

13
00:00:25,519 --> 00:00:26,880
ellen

14
00:00:26,880 --> 00:00:30,640
sepien nick and yukon sang

15
00:00:30,640 --> 00:00:31,519
and

16
00:00:31,519 --> 00:00:35,200
yukon is going to to give the talk

17
00:00:35,200 --> 00:00:40,000
so please uh you can start your talk now

18
00:00:40,000 --> 00:00:40,800
okay

19
00:00:40,800 --> 00:00:43,360
can you see my slides now

20
00:00:43,360 --> 00:00:44,559
we can

21
00:00:44,559 --> 00:00:46,800
okay i'll start thank you for the

22
00:00:46,800 --> 00:00:49,600
introduction i'll talk about my joints

23
00:00:49,600 --> 00:00:51,680
work with airline japanese about

24
00:00:51,680 --> 00:00:55,680
polynomial lps for linear algebra

25
00:00:55,680 --> 00:00:58,160
our work is about snacks

26
00:00:58,160 --> 00:01:00,960
snack develops two parties the approver

27
00:01:00,960 --> 00:01:03,280
and the web file the approver is trying

28
00:01:03,280 --> 00:01:05,600
to convince the verifier that given the

29
00:01:05,600 --> 00:01:08,560
instance x approval know the witness w

30
00:01:08,560 --> 00:01:09,600
such that

31
00:01:09,600 --> 00:01:12,960
x and w satisfy a certain relation

32
00:01:12,960 --> 00:01:14,880
that is typically described by a

33
00:01:14,880 --> 00:01:17,119
computation c

34
00:01:17,119 --> 00:01:20,080
a snark has three algorithms the setup

35
00:01:20,080 --> 00:01:21,920
often involves reprocessing the

36
00:01:21,920 --> 00:01:24,479
computation c the prover takes the

37
00:01:24,479 --> 00:01:27,119
instance and the witness and produces a

38
00:01:27,119 --> 00:01:28,320
proof

39
00:01:28,320 --> 00:01:31,200
the verifier reads the proof and decides

40
00:01:31,200 --> 00:01:34,159
whether to accept or not

41
00:01:34,159 --> 00:01:36,640
compared to ordinary proof systems a

42
00:01:36,640 --> 00:01:39,360
snark has the following properties

43
00:01:39,360 --> 00:01:42,320
by succinctness it requires the proof

44
00:01:42,320 --> 00:01:44,640
size and sometimes the running time of

45
00:01:44,640 --> 00:01:47,119
the verifier to be logarithmic to the

46
00:01:47,119 --> 00:01:49,920
computation size

47
00:01:49,920 --> 00:01:51,840
by the interactivity the approval

48
00:01:51,840 --> 00:01:53,600
generates the proof without receiving

49
00:01:53,600 --> 00:01:56,479
any message from the verifier

50
00:01:56,479 --> 00:01:58,799
finally by arguments of knowledge the

51
00:01:58,799 --> 00:02:00,880
proverb shows that the witness tableau

52
00:02:00,880 --> 00:02:02,880
not only exists but is known to the

53
00:02:02,880 --> 00:02:05,439
approver

54
00:02:05,600 --> 00:02:09,758
as pointed out by bones etc most snarks

55
00:02:09,758 --> 00:02:12,640
can fit into the following pipeline

56
00:02:12,640 --> 00:02:14,400
this pipeline starts from the

57
00:02:14,400 --> 00:02:16,400
computation you see in the previous

58
00:02:16,400 --> 00:02:18,959
slide which is mostly described by a

59
00:02:18,959 --> 00:02:22,160
program or a circuit

60
00:02:22,160 --> 00:02:24,080
the first step transforms this

61
00:02:24,080 --> 00:02:26,400
computation into a form that is more

62
00:02:26,400 --> 00:02:28,640
friendly to mathematicians

63
00:02:28,640 --> 00:02:31,840
rncs and hpr are popular choices for

64
00:02:31,840 --> 00:02:34,160
this step

65
00:02:34,160 --> 00:02:36,239
the next step which is usually the most

66
00:02:36,239 --> 00:02:37,680
complex step

67
00:02:37,680 --> 00:02:39,920
is to design a polynomial iop or the

68
00:02:39,920 --> 00:02:42,319
arithmetic representation

69
00:02:42,319 --> 00:02:44,640
a polynomial iop is an interactive

70
00:02:44,640 --> 00:02:47,120
protocol where all the proven messages

71
00:02:47,120 --> 00:02:49,360
are evaluation oracles for polynomials

72
00:02:49,360 --> 00:02:51,680
of our final field

73
00:02:51,680 --> 00:02:54,239
the verifier may pick arbitrary points

74
00:02:54,239 --> 00:02:56,959
say y and the day and query these

75
00:02:56,959 --> 00:03:00,159
oracles to obtain the evaluations fy and

76
00:03:00,159 --> 00:03:02,879
fc respectively

77
00:03:02,879 --> 00:03:05,599
polynomials do not exist in the real

78
00:03:05,599 --> 00:03:08,560
world so we need to replace them by a

79
00:03:08,560 --> 00:03:10,800
cryptographic tool called polynomial

80
00:03:10,800 --> 00:03:12,319
commencement

81
00:03:12,319 --> 00:03:15,280
this brings us back to the last step of

82
00:03:15,280 --> 00:03:17,920
the pipeline where we finally get a

83
00:03:17,920 --> 00:03:20,239
snark by compiling the polynomial iob

84
00:03:20,239 --> 00:03:22,800
using cryptographic tools including

85
00:03:22,800 --> 00:03:25,120
polynomial commitments and this year's

86
00:03:25,120 --> 00:03:27,760
chamier heuristic

87
00:03:27,760 --> 00:03:31,599
in this work we focus on the second step

88
00:03:31,599 --> 00:03:34,440
to design a polynomial iop for a given

89
00:03:34,440 --> 00:03:37,040
arithmetic representation

90
00:03:37,040 --> 00:03:39,680
which is described by matrices vectors

91
00:03:39,680 --> 00:03:42,480
and linear algebra operations

92
00:03:42,480 --> 00:03:44,879
the polynomial iop model however

93
00:03:44,879 --> 00:03:47,040
provides a different interface the

94
00:03:47,040 --> 00:03:48,959
objects are polynomials and the

95
00:03:48,959 --> 00:03:52,319
operations are polynomial evaluations

96
00:03:52,319 --> 00:03:53,280
therefore

97
00:03:53,280 --> 00:03:54,959
the key questions in designing

98
00:03:54,959 --> 00:03:57,280
polynomial ilps are representing the

99
00:03:57,280 --> 00:04:00,640
matrices and vectors by polynomials and

100
00:04:00,640 --> 00:04:03,040
simulating the operations in the algebra

101
00:04:03,040 --> 00:04:06,159
by polynomial operations

102
00:04:06,159 --> 00:04:08,720
most works take the read solvent called

103
00:04:08,720 --> 00:04:10,640
basis representation

104
00:04:10,640 --> 00:04:12,959
where a vector is identified by the

105
00:04:12,959 --> 00:04:15,599
polynomial evaluations of our domain

106
00:04:15,599 --> 00:04:17,600
which is a subset in the final field

107
00:04:17,600 --> 00:04:20,959
this snark is based on

108
00:04:20,959 --> 00:04:23,040
the problem is

109
00:04:23,040 --> 00:04:25,520
that for efficiency the domain must have

110
00:04:25,520 --> 00:04:28,080
a nice algebraic structure so the

111
00:04:28,080 --> 00:04:31,680
choices of finite fields are limited

112
00:04:31,680 --> 00:04:34,080
the most straightforward approach is to

113
00:04:34,080 --> 00:04:36,560
use the monomial basis which directly

114
00:04:36,560 --> 00:04:38,160
takes the vector entries as the

115
00:04:38,160 --> 00:04:40,320
polynomial coefficient

116
00:04:40,320 --> 00:04:42,960
this approach does not put any limits on

117
00:04:42,960 --> 00:04:45,040
the choice of final fields

118
00:04:45,040 --> 00:04:48,080
however fieldworks take this approach as

119
00:04:48,080 --> 00:04:49,919
the methods for simulating the linear

120
00:04:49,919 --> 00:04:51,440
algebra operations in this

121
00:04:51,440 --> 00:04:56,000
representation are largely unexplored

122
00:04:56,000 --> 00:04:57,919
uncover the potential of the monomial

123
00:04:57,919 --> 00:05:00,240
basis representation we construct a

124
00:05:00,240 --> 00:05:03,600
polynomial iop which we named claymore

125
00:05:03,600 --> 00:05:06,560
and our work reveals a rich set of

126
00:05:06,560 --> 00:05:09,120
linear algebra operations that can be

127
00:05:09,120 --> 00:05:11,440
efficiently implemented in polynomial

128
00:05:11,440 --> 00:05:14,080
iops in monomial basis

129
00:05:14,080 --> 00:05:16,800
in particular we provide two versions of

130
00:05:16,800 --> 00:05:19,039
polynomial iops for the

131
00:05:19,039 --> 00:05:20,960
for the matrix vector products

132
00:05:20,960 --> 00:05:23,680
respectively for dense matrices and

133
00:05:23,680 --> 00:05:25,520
splash matrices

134
00:05:25,520 --> 00:05:28,000
combining these protocols we get the

135
00:05:28,000 --> 00:05:30,880
polynomial lp for hpr the head amount

136
00:05:30,880 --> 00:05:33,600
product relation

137
00:05:33,600 --> 00:05:35,759
finally we analyze the performance of

138
00:05:35,759 --> 00:05:37,919
claymore compared to the state of the

139
00:05:37,919 --> 00:05:39,039
art

140
00:05:39,039 --> 00:05:41,280
there are many metrics for measuring the

141
00:05:41,280 --> 00:05:43,759
performance of polynomial iops in this

142
00:05:43,759 --> 00:05:46,320
work we focused on reducing the number

143
00:05:46,320 --> 00:05:49,199
of polynomial oracles both online and

144
00:05:49,199 --> 00:05:51,360
offline

145
00:05:51,360 --> 00:05:53,840
here are the results dense claymore has

146
00:05:53,840 --> 00:05:55,840
the advantage of zero number of

147
00:05:55,840 --> 00:05:57,919
polynomial oracles

148
00:05:57,919 --> 00:06:00,319
at the sacrifice of larger polynomial

149
00:06:00,319 --> 00:06:03,520
degrees here is omn

150
00:06:03,520 --> 00:06:05,120
in comparison

151
00:06:05,120 --> 00:06:08,000
claymore reduces the maximum degree but

152
00:06:08,000 --> 00:06:10,560
is at the cost of more polynomial

153
00:06:10,560 --> 00:06:14,720
oracles and the evaluation queries

154
00:06:14,960 --> 00:06:19,239
okay that's all thank you for listening

155
00:06:20,960 --> 00:06:22,639
okay thank you

156
00:06:22,639 --> 00:06:24,080
for your talk

157
00:06:24,080 --> 00:06:24,880
so

158
00:06:24,880 --> 00:06:26,960
if anyone

159
00:06:26,960 --> 00:06:30,080
got any questions uh please raise your

160
00:06:30,080 --> 00:06:32,560
hand then

161
00:06:32,560 --> 00:06:35,280
zoom here or you can alternatively

162
00:06:35,280 --> 00:06:36,880
type your

163
00:06:36,880 --> 00:06:42,240
question in the chat or in sudip

164
00:06:42,240 --> 00:06:44,880
if you do type your question i will try

165
00:06:44,880 --> 00:06:47,199
to to read it out

166
00:06:47,199 --> 00:06:53,120
so does anyone have any questions

167
00:06:57,680 --> 00:06:59,840
okay hpr

168
00:06:59,840 --> 00:07:02,560
i mentioned it i explained it in my full

169
00:07:02,560 --> 00:07:05,360
video but i

170
00:07:05,360 --> 00:07:06,960
skipped it here

171
00:07:06,960 --> 00:07:08,639
for time reasons

172
00:07:08,639 --> 00:07:11,680
it's a variant of

173
00:07:11,680 --> 00:07:12,170
the

174
00:07:12,170 --> 00:07:13,440
[Music]

175
00:07:13,440 --> 00:07:14,240
uh

176
00:07:14,240 --> 00:07:16,639
the circuit representation

177
00:07:16,639 --> 00:07:19,680
uh proposed by bruto in his famous

178
00:07:19,680 --> 00:07:22,720
species gp616 paper

179
00:07:22,720 --> 00:07:26,000
and we just animate a handmade product

180
00:07:26,000 --> 00:07:30,000
relation but this name was just um

181
00:07:30,000 --> 00:07:32,400
proposed by us

182
00:07:32,400 --> 00:07:34,880
i don't remember it has

183
00:07:34,880 --> 00:07:39,360
it has been formally named before so

184
00:07:39,360 --> 00:07:41,680
if you know it has a formal name then

185
00:07:41,680 --> 00:07:44,319
please tell us but we just call it hpr

186
00:07:44,319 --> 00:07:47,919
here handmade product relation

187
00:07:52,080 --> 00:07:54,400
yes i i do not know if there's a formal

188
00:07:54,400 --> 00:07:56,000
name actually

189
00:07:56,000 --> 00:07:59,000
okay

190
00:08:00,879 --> 00:08:02,720
okay

191
00:08:02,720 --> 00:08:04,240
are there any

192
00:08:04,240 --> 00:08:07,800
other questions

193
00:08:16,479 --> 00:08:18,960
so maybe i have a very quick

194
00:08:18,960 --> 00:08:21,039
question so it seems like your

195
00:08:21,039 --> 00:08:22,879
contribution here is

196
00:08:22,879 --> 00:08:24,800
like your or at least your

197
00:08:24,800 --> 00:08:26,879
system here requires a few number of

198
00:08:26,879 --> 00:08:29,280
polynomials but potentially with a

199
00:08:29,280 --> 00:08:30,960
higher degree can can you say anything

200
00:08:30,960 --> 00:08:32,479
about the

201
00:08:32,479 --> 00:08:34,958
um the concrete efficiency when you do

202
00:08:34,958 --> 00:08:36,320
compile you

203
00:08:36,320 --> 00:08:38,719
or combine your your system here with a

204
00:08:38,719 --> 00:08:43,360
with a concrete uh cryptographic

205
00:08:44,000 --> 00:08:46,399
commitment scheme

206
00:08:46,399 --> 00:08:47,839
can you say something about the concrete

207
00:08:47,839 --> 00:08:49,680
efficiency compared to some of the

208
00:08:49,680 --> 00:08:52,320
previous uh

209
00:08:52,320 --> 00:08:55,360
yeah in fact it is

210
00:08:55,360 --> 00:08:56,959
mentioned in the paper

211
00:08:56,959 --> 00:08:59,519
but i did not put the

212
00:08:59,519 --> 00:09:00,959
concrete

213
00:09:00,959 --> 00:09:04,959
efficiency in the table in this slide

214
00:09:05,040 --> 00:09:07,360
the concrete efficiency is

215
00:09:07,360 --> 00:09:10,560
we if we only focused on the proof size

216
00:09:10,560 --> 00:09:13,920
and it was not

217
00:09:13,920 --> 00:09:16,880
very uh

218
00:09:17,040 --> 00:09:18,800
satisfying because

219
00:09:18,800 --> 00:09:21,200
we focused on improving the number of

220
00:09:21,200 --> 00:09:23,040
polynomials

221
00:09:23,040 --> 00:09:26,640
but uh the evaluation points number of

222
00:09:26,640 --> 00:09:28,640
evaluations and distinct evaluation

223
00:09:28,640 --> 00:09:31,040
points also contributes a lot to the

224
00:09:31,040 --> 00:09:34,800
proof side so it is not that satisfying

225
00:09:34,800 --> 00:09:37,279
maybe it's uh still better than mali i

226
00:09:37,279 --> 00:09:38,880
remember

227
00:09:38,880 --> 00:09:40,080
uh

228
00:09:40,080 --> 00:09:40,880
and

229
00:09:40,880 --> 00:09:43,279
better than sonic

230
00:09:43,279 --> 00:09:44,640
but uh

231
00:09:44,640 --> 00:09:48,720
it's definitely outperformed by plants

232
00:09:49,839 --> 00:09:50,880
this min

233
00:09:50,880 --> 00:09:53,680
contribution is not that few number of

234
00:09:53,680 --> 00:09:56,160
polynomials and i don't think that's uh

235
00:09:56,160 --> 00:09:59,279
is a good contribution anyway

236
00:09:59,279 --> 00:10:02,240
the confusion is mainly to

237
00:10:02,240 --> 00:10:04,880
explore the uh

238
00:10:04,880 --> 00:10:07,279
implementation of polynomials in the

239
00:10:07,279 --> 00:10:11,120
modern movies where we can use a much

240
00:10:11,120 --> 00:10:12,320
broader

241
00:10:12,320 --> 00:10:14,959
class of final fields instead of those

242
00:10:14,959 --> 00:10:17,120
that have a nice

243
00:10:17,120 --> 00:10:20,160
sub a nice uh

244
00:10:20,160 --> 00:10:23,120
subgroup with a multiplicative

245
00:10:23,120 --> 00:10:24,240
structure

246
00:10:24,240 --> 00:10:25,360
okay

247
00:10:25,360 --> 00:10:27,920
yeah yeah okay i i see

248
00:10:27,920 --> 00:10:29,680
thank you

249
00:10:29,680 --> 00:10:33,279
so um yeah let's uh yeah well thank you

250
00:10:33,279 --> 00:10:36,399
for your talk uh let's move to the uh to

251
00:10:36,399 --> 00:10:38,640
the next paper in the session

252
00:10:38,640 --> 00:10:42,320
and uh this is uh titled a

253
00:10:42,320 --> 00:10:45,120
unified framework for non-universal

254
00:10:45,120 --> 00:10:49,680
snarks and this is by helka lipma

255
00:10:49,680 --> 00:10:51,680
and

256
00:10:51,680 --> 00:10:54,399
elgar if you're ready please

257
00:10:54,399 --> 00:10:57,279
start your talk

258
00:10:57,440 --> 00:11:01,839
thank you i'm looking for the slides

259
00:11:03,600 --> 00:11:06,880
hi all my name is elgar lip i come from

260
00:11:06,880 --> 00:11:09,120
simula uib in norway

261
00:11:09,120 --> 00:11:11,600
and the name of the talk is a unified

262
00:11:11,600 --> 00:11:12,880
framework

263
00:11:12,880 --> 00:11:15,519
for non-universal snarks

264
00:11:15,519 --> 00:11:17,440
so first before giving the talk i have

265
00:11:17,440 --> 00:11:19,760
to say that the paper is actually

266
00:11:19,760 --> 00:11:22,160
a bit old i started to write it four

267
00:11:22,160 --> 00:11:23,040
years

268
00:11:23,040 --> 00:11:24,160
ago

269
00:11:24,160 --> 00:11:26,399
and obviously in the area of snarks

270
00:11:26,399 --> 00:11:29,519
everything has changed in four years

271
00:11:29,519 --> 00:11:32,079
so uh but what i'm mainly going to talk

272
00:11:32,079 --> 00:11:34,800
about is that like this kind of like bit

273
00:11:34,800 --> 00:11:39,439
old type of snarks like crot16

274
00:11:39,600 --> 00:11:41,200
let me see

275
00:11:41,200 --> 00:11:43,680
so first of all let me remind you what

276
00:11:43,680 --> 00:11:46,320
is a non-interactive server knowledge

277
00:11:46,320 --> 00:11:48,000
and

278
00:11:48,000 --> 00:11:49,920
you have two parties approver and the

279
00:11:49,920 --> 00:11:51,440
verifier

280
00:11:51,440 --> 00:11:54,560
approver has an input

281
00:11:54,560 --> 00:11:57,120
and a witness and verifier only knows

282
00:11:57,120 --> 00:11:59,760
the width uh the input

283
00:11:59,760 --> 00:12:01,120
and uh

284
00:12:01,120 --> 00:12:04,079
the prover sends to the verifier

285
00:12:04,079 --> 00:12:06,560
uh a short argument

286
00:12:06,560 --> 00:12:08,800
convincing the verifiers to say input

287
00:12:08,800 --> 00:12:11,120
belongs to some language

288
00:12:11,120 --> 00:12:12,560
i didn't

289
00:12:12,560 --> 00:12:14,800
want to make the slide more complicated

290
00:12:14,800 --> 00:12:17,279
in the real life you have also like crs

291
00:12:17,279 --> 00:12:19,120
etcetera

292
00:12:19,120 --> 00:12:21,120
and

293
00:12:21,120 --> 00:12:23,839
especially like a snark is a succinct

294
00:12:23,839 --> 00:12:26,320
non-interactive argument that satisfies

295
00:12:26,320 --> 00:12:28,880
the following conditions so there first

296
00:12:28,880 --> 00:12:30,560
of all there are three security

297
00:12:30,560 --> 00:12:32,240
conditions

298
00:12:32,240 --> 00:12:33,839
completeness which means that honest

299
00:12:33,839 --> 00:12:37,839
verifier accepts a honest prover

300
00:12:37,839 --> 00:12:39,680
which means that honest verifier does

301
00:12:39,680 --> 00:12:43,279
not accept dishonest approval

302
00:12:43,279 --> 00:12:45,279
and zero knowledge which means that

303
00:12:45,279 --> 00:12:47,440
honest provers private information is

304
00:12:47,440 --> 00:12:51,519
not revealed to dishonest purifier

305
00:12:51,519 --> 00:12:53,279
and if you have a

306
00:12:53,279 --> 00:12:55,040
system that satisfies those three

307
00:12:55,040 --> 00:12:56,720
security properties it's called the

308
00:12:56,720 --> 00:12:59,040
non-interactive zero knowledge

309
00:12:59,040 --> 00:13:01,600
argument or proof or music

310
00:13:01,600 --> 00:13:04,079
and then snark importantly also has to

311
00:13:04,079 --> 00:13:06,959
satisfy an efficiency property

312
00:13:06,959 --> 00:13:10,320
namely it has to be succinct so argument

313
00:13:10,320 --> 00:13:13,519
is succinct and the honest verifiers

314
00:13:13,519 --> 00:13:15,760
computation has to be small

315
00:13:15,760 --> 00:13:18,000
when you have an issue with a

316
00:13:18,000 --> 00:13:20,399
subsequence property then it's actually

317
00:13:20,399 --> 00:13:23,519
called a snark

318
00:13:23,639 --> 00:13:26,320
unfortunately especially if you come

319
00:13:26,320 --> 00:13:29,680
from outside of this area

320
00:13:29,680 --> 00:13:30,720
this

321
00:13:30,720 --> 00:13:33,680
field of snacks is a real zoo

322
00:13:33,680 --> 00:13:35,279
so you have like an

323
00:13:35,279 --> 00:13:37,120
for example you have non-universal

324
00:13:37,120 --> 00:13:39,920
universal optical transparent etc etc

325
00:13:39,920 --> 00:13:41,199
snarks

326
00:13:41,199 --> 00:13:43,120
you have snarks based on bearings

327
00:13:43,120 --> 00:13:46,240
lattices etc etc

328
00:13:46,240 --> 00:13:48,399
you have

329
00:13:48,399 --> 00:13:51,199
snarks that are that have a small crs

330
00:13:51,199 --> 00:13:53,680
length versus knocks at optimus for

331
00:13:53,680 --> 00:13:56,079
argument length or computation

332
00:13:56,079 --> 00:13:59,680
you have snarks for different languages

333
00:13:59,680 --> 00:14:02,000
the names languages are the ones that

334
00:14:02,000 --> 00:14:04,399
used to be popular for non-universal

335
00:14:04,399 --> 00:14:05,519
snarks

336
00:14:05,519 --> 00:14:07,600
now in the case of let's say transparent

337
00:14:07,600 --> 00:14:09,680
snarks people are looking for a bit

338
00:14:09,680 --> 00:14:12,399
different languages but kind of like the

339
00:14:12,399 --> 00:14:13,839
idea is the same there's a lot of

340
00:14:13,839 --> 00:14:15,519
different languages

341
00:14:15,519 --> 00:14:17,680
language is like a in this case like a

342
00:14:17,680 --> 00:14:19,680
constrained system forum

343
00:14:19,680 --> 00:14:22,160
that describes uh something that isn't

344
00:14:22,160 --> 00:14:23,680
be complete

345
00:14:23,680 --> 00:14:25,440
and then you have also

346
00:14:25,440 --> 00:14:28,240
a lot of different soundness notions

347
00:14:28,240 --> 00:14:29,600
like sound

348
00:14:29,600 --> 00:14:32,480
knowledge sound simulation acceptable

349
00:14:32,480 --> 00:14:34,240
and something like three or four

350
00:14:34,240 --> 00:14:37,120
different types of simulation extract

351
00:14:37,120 --> 00:14:40,399
extract except extractabilities

352
00:14:40,399 --> 00:14:42,240
and then for example you can assign

353
00:14:42,240 --> 00:14:45,360
subversion security which means that

354
00:14:45,360 --> 00:14:47,440
either zero knowledge or soundness is

355
00:14:47,440 --> 00:14:48,959
guaranteed

356
00:14:48,959 --> 00:14:51,760
if the generator of the

357
00:14:51,760 --> 00:14:54,160
trusty common reference thing is

358
00:14:54,160 --> 00:14:57,040
actually not honest

359
00:14:57,040 --> 00:14:58,480
and um

360
00:14:58,480 --> 00:15:01,600
it's really difficult to identify those

361
00:15:01,600 --> 00:15:04,320
those snarks and to understand how they

362
00:15:04,320 --> 00:15:06,720
relate to it to each other

363
00:15:06,720 --> 00:15:09,600
basically if you start writing down all

364
00:15:09,600 --> 00:15:12,639
the different variations you get like

365
00:15:12,639 --> 00:15:14,560
i don't know if it's really a hundred

366
00:15:14,560 --> 00:15:17,279
but maybe like definitely thousands and

367
00:15:17,279 --> 00:15:19,199
for each variation and tradition they

368
00:15:19,199 --> 00:15:21,680
have a different paper

369
00:15:21,680 --> 00:15:24,839
uh so the goal of this paper in the

370
00:15:24,839 --> 00:15:28,240
beginning well and also at the end

371
00:15:28,240 --> 00:15:32,480
was uh to try to somehow systematize

372
00:15:32,480 --> 00:15:34,240
those things

373
00:15:34,240 --> 00:15:35,040
uh

374
00:15:35,040 --> 00:15:36,240
so

375
00:15:36,240 --> 00:15:40,079
like take some things together and then

376
00:15:40,079 --> 00:15:42,800
have a common framework

377
00:15:42,800 --> 00:15:44,560
i think the most complicated thing with

378
00:15:44,560 --> 00:15:46,800
having this all this law is that like i

379
00:15:46,800 --> 00:15:47,680
said

380
00:15:47,680 --> 00:15:51,680
each entry in this n-dimensional matrix

381
00:15:51,680 --> 00:15:55,040
has a different paper and each paper has

382
00:15:55,040 --> 00:15:57,600
a different security group

383
00:15:57,600 --> 00:15:59,920
which works in a diff slightly different

384
00:15:59,920 --> 00:16:01,199
model

385
00:16:01,199 --> 00:16:02,320
is

386
00:16:02,320 --> 00:16:04,480
written down by using different notation

387
00:16:04,480 --> 00:16:07,279
etc so can you really

388
00:16:07,279 --> 00:16:09,199
checked that all those

389
00:16:09,199 --> 00:16:12,320
variants are secure

390
00:16:12,320 --> 00:16:14,800
so what i i do in this current paper is

391
00:16:14,800 --> 00:16:16,720
that i i still i don't do like

392
00:16:16,720 --> 00:16:18,720
everything obviously

393
00:16:18,720 --> 00:16:21,440
i'm looking at non-universal snarks like

394
00:16:21,440 --> 00:16:22,800
product 16

395
00:16:22,800 --> 00:16:24,720
based on pairings

396
00:16:24,720 --> 00:16:28,720
and i care about argument length

397
00:16:28,720 --> 00:16:30,079
foremost

398
00:16:30,079 --> 00:16:32,959
obviously other parameters also are also

399
00:16:32,959 --> 00:16:34,240
important

400
00:16:34,240 --> 00:16:35,120
but

401
00:16:35,120 --> 00:16:37,199
everything here starts with having a

402
00:16:37,199 --> 00:16:38,959
very sharp argument

403
00:16:38,959 --> 00:16:41,199
and then i look at all like those four

404
00:16:41,199 --> 00:16:43,040
different languages

405
00:16:43,040 --> 00:16:43,839
uh

406
00:16:43,839 --> 00:16:45,519
uh then

407
00:16:45,519 --> 00:16:47,920
two different homeless notions uh

408
00:16:47,920 --> 00:16:49,360
knowledge solvents and simulation

409
00:16:49,360 --> 00:16:52,320
extractability and then also consider

410
00:16:52,320 --> 00:16:54,480
the case of clinical subversion zero

411
00:16:54,480 --> 00:16:56,959
knowledge

412
00:16:56,959 --> 00:16:57,839
so

413
00:16:57,839 --> 00:16:59,279
outline

414
00:16:59,279 --> 00:17:00,399
i

415
00:17:00,399 --> 00:17:02,800
i started this paper from code 16 which

416
00:17:02,800 --> 00:17:05,280
is that such thickness kink the most

417
00:17:05,280 --> 00:17:07,760
succinct existing snark

418
00:17:07,760 --> 00:17:10,000
in any model

419
00:17:10,000 --> 00:17:11,439
uh well

420
00:17:11,439 --> 00:17:15,119
as long as it's secure of course

421
00:17:15,119 --> 00:17:17,760
the argument length is only three group

422
00:17:17,760 --> 00:17:19,839
elements and this is known to be like

423
00:17:19,839 --> 00:17:22,959
essential optimal

424
00:17:22,959 --> 00:17:27,679
uh and broad 16 is for the qip con

425
00:17:27,679 --> 00:17:30,240
conference system which is very maybe

426
00:17:30,240 --> 00:17:32,400
the most standard constraint system

427
00:17:32,400 --> 00:17:35,200
for non-universal snarks it is knowledge

428
00:17:35,200 --> 00:17:37,039
sound

429
00:17:37,039 --> 00:17:39,760
uh but originally it was not known to be

430
00:17:39,760 --> 00:17:42,559
subversion certain knowledge

431
00:17:42,559 --> 00:17:45,520
in a later i showed with quarters that

432
00:17:45,520 --> 00:17:47,679
it's a pollution set of knowledge of the

433
00:17:47,679 --> 00:17:51,039
last year there was a paper showing

434
00:17:51,039 --> 00:17:55,760
that the crop 16 also satisfies

435
00:17:55,760 --> 00:18:00,679
so-called any simulation extractability

436
00:18:02,080 --> 00:18:04,080
in the current paper i have a very

437
00:18:04,080 --> 00:18:07,840
slight small modification of cot16

438
00:18:07,840 --> 00:18:10,720
i'm missing an h

439
00:18:10,720 --> 00:18:13,120
it has less tractors

440
00:18:13,120 --> 00:18:15,360
i have only two traps chapters instead

441
00:18:15,360 --> 00:18:17,360
of five

442
00:18:17,360 --> 00:18:20,160
and this kind of uh resulted in an

443
00:18:20,160 --> 00:18:22,559
interesting sub problem in the protocol

444
00:18:22,559 --> 00:18:24,480
because someone's

445
00:18:24,480 --> 00:18:27,200
replacing additional chapters with the

446
00:18:27,200 --> 00:18:29,840
powers of an existing chapter

447
00:18:29,840 --> 00:18:33,200
i had to do a computer search for fixing

448
00:18:33,200 --> 00:18:35,600
some of the parameters

449
00:18:35,600 --> 00:18:38,720
this is described in the paper

450
00:18:38,720 --> 00:18:41,280
otherwise it has a somewhat simpler agm

451
00:18:41,280 --> 00:18:42,720
proof

452
00:18:42,720 --> 00:18:46,559
hm if you don't know is a recruit model

453
00:18:46,559 --> 00:18:47,440
uh

454
00:18:47,440 --> 00:18:50,000
basically by simpler i mean that uh like

455
00:18:50,000 --> 00:18:53,280
in the agm proof you write

456
00:18:53,280 --> 00:18:54,080
the

457
00:18:54,080 --> 00:18:56,559
stuff down as a polynomial equation

458
00:18:56,559 --> 00:18:59,440
and you have to check

459
00:18:59,440 --> 00:19:00,960
a smaller number of polynomial

460
00:19:00,960 --> 00:19:02,320
coefficients

461
00:19:02,320 --> 00:19:04,480
so this was something that i emphasized

462
00:19:04,480 --> 00:19:07,360
a lot in the beginning for myself

463
00:19:07,360 --> 00:19:08,240
that

464
00:19:08,240 --> 00:19:10,080
i want to have a proof that is at least

465
00:19:10,080 --> 00:19:11,919
relatively easy to check

466
00:19:11,919 --> 00:19:13,919
i it is not

467
00:19:13,919 --> 00:19:17,200
in some sense easy because in

468
00:19:17,200 --> 00:19:18,400
the

469
00:19:18,400 --> 00:19:20,720
decreasing attractor numbers

470
00:19:20,720 --> 00:19:22,840
and having weird

471
00:19:22,840 --> 00:19:26,240
exponents uh to compensate for it

472
00:19:26,240 --> 00:19:28,000
actually makes proof for the other hand

473
00:19:28,000 --> 00:19:30,960
a bit more complicated

474
00:19:30,960 --> 00:19:33,280
so the second

475
00:19:33,280 --> 00:19:34,720
thing is that

476
00:19:34,720 --> 00:19:37,600
then like after modifying it a bit i

477
00:19:37,600 --> 00:19:40,720
generalized it to more languages

478
00:19:40,720 --> 00:19:43,360
so it's uh

479
00:19:43,360 --> 00:19:48,880
croc 16 is for qip qap and then uh

480
00:19:48,880 --> 00:19:51,440
they'll be like separate snacks for for

481
00:19:51,440 --> 00:19:55,919
other consuming systems like ssp qsp sap

482
00:19:55,919 --> 00:19:56,799
i

483
00:19:56,799 --> 00:19:58,880
showed that the small modification of of

484
00:19:58,880 --> 00:20:01,440
this modification

485
00:20:01,440 --> 00:20:04,480
works for all of them

486
00:20:04,480 --> 00:20:07,039
and in some cases you get them more

487
00:20:07,039 --> 00:20:09,919
efficient smart

488
00:20:09,919 --> 00:20:11,280
um

489
00:20:11,280 --> 00:20:13,440
then another thing was

490
00:20:13,440 --> 00:20:16,799
the issue of simulation acceptability

491
00:20:16,799 --> 00:20:19,120
so simulation extractability proofs in

492
00:20:19,120 --> 00:20:21,280
azure recruit model are more complicated

493
00:20:21,280 --> 00:20:23,280
since adversary has more input elements

494
00:20:23,280 --> 00:20:25,840
to play with has more freedom you have

495
00:20:25,840 --> 00:20:27,440
to take care of more complicated

496
00:20:27,440 --> 00:20:29,600
polynomial equations

497
00:20:29,600 --> 00:20:32,000
and and surprisingly

498
00:20:32,000 --> 00:20:35,280
we were or i was able to show that

499
00:20:35,280 --> 00:20:37,200
in all cases considered in the correct

500
00:20:37,200 --> 00:20:40,159
paper those additional inputs of the

501
00:20:40,159 --> 00:20:43,600
adversary actually do not matter that

502
00:20:43,600 --> 00:20:44,720
actually

503
00:20:44,720 --> 00:20:47,600
any simulation acceptability is equal to

504
00:20:47,600 --> 00:20:50,000
knowledge solvents for all those

505
00:20:50,000 --> 00:20:50,960
uh

506
00:20:50,960 --> 00:20:52,880
schemes

507
00:20:52,880 --> 00:20:54,240
and

508
00:20:54,240 --> 00:20:55,120
well

509
00:20:55,120 --> 00:20:57,120
there are several different notions of

510
00:20:57,120 --> 00:20:58,799
simulation attractability i don't have

511
00:20:58,799 --> 00:21:01,760
time to explain it but for there's

512
00:21:01,760 --> 00:21:04,159
another stronger version that is called

513
00:21:04,159 --> 00:21:06,880
strong any simulation acceptability and

514
00:21:06,880 --> 00:21:09,280
it is known that clot 16 does not

515
00:21:09,280 --> 00:21:11,520
satisfy this motion

516
00:21:11,520 --> 00:21:13,440
i'm i'm sorry i'm trying

517
00:21:13,440 --> 00:21:14,840
okay

518
00:21:14,840 --> 00:21:17,840
uh we are running out of time so please

519
00:21:17,840 --> 00:21:19,840
keep okay

520
00:21:19,840 --> 00:21:22,880
okay so i think then i will

521
00:21:22,880 --> 00:21:26,240
uh skip one slide so the final thing is

522
00:21:26,240 --> 00:21:28,159
that uh

523
00:21:28,159 --> 00:21:30,480
so i will also i'm also showing that all

524
00:21:30,480 --> 00:21:32,480
the schemes are so persian zero

525
00:21:32,480 --> 00:21:34,240
knowledge to their zero knowledge even

526
00:21:34,240 --> 00:21:35,120
if the

527
00:21:35,120 --> 00:21:38,159
crs generator is not trusted

528
00:21:38,159 --> 00:21:39,520
and then

529
00:21:39,520 --> 00:21:42,159
uh not going to read out this slide but

530
00:21:42,159 --> 00:21:45,440
basically i'm showing what my

531
00:21:45,440 --> 00:21:47,600
construction can do compared to

532
00:21:47,600 --> 00:21:48,799
previously

533
00:21:48,799 --> 00:21:50,480
known constructions

534
00:21:50,480 --> 00:21:52,799
and for example in some cases like ssp

535
00:21:52,799 --> 00:21:54,559
and qsp

536
00:21:54,559 --> 00:21:57,200
there were no previously known

537
00:21:57,200 --> 00:21:59,679
simulation extractable construction

538
00:21:59,679 --> 00:22:01,919
well they could be constructed but uh

539
00:22:01,919 --> 00:22:04,080
with by using some kind of like

540
00:22:04,080 --> 00:22:06,880
maybe non non inefficient uh

541
00:22:06,880 --> 00:22:08,159
conversion

542
00:22:08,159 --> 00:22:09,840
and in some cases the previous

543
00:22:09,840 --> 00:22:13,520
previously this variant existed but my

544
00:22:13,520 --> 00:22:15,919
construction is a bit more efficient so

545
00:22:15,919 --> 00:22:18,640
thank you very much and

546
00:22:18,640 --> 00:22:21,679
waiting for questions

547
00:22:22,240 --> 00:22:23,600
okay so

548
00:22:23,600 --> 00:22:27,360
thank you for your talk helga i think uh

549
00:22:27,360 --> 00:22:30,720
we uh we will handle the the question

550
00:22:30,720 --> 00:22:34,320
uh in in questions in the uh in the chat

551
00:22:34,320 --> 00:22:36,960
so helga please uh try to respond to to

552
00:22:36,960 --> 00:22:39,360
the questions and in the chat

553
00:22:39,360 --> 00:22:41,440
uh in the interesting time i think we

554
00:22:41,440 --> 00:22:44,000
will go to the next paper

555
00:22:44,000 --> 00:22:46,240
which is titled

556
00:22:46,240 --> 00:22:49,440
eclipse enhanced compiling method for

557
00:22:49,440 --> 00:22:52,799
person commitment for a person committed

558
00:22:52,799 --> 00:22:55,440
set case not engines

559
00:22:55,440 --> 00:22:58,400
and the authors are diego

560
00:22:58,400 --> 00:22:59,840
aranja

561
00:22:59,840 --> 00:23:02,000
emile dennison

562
00:23:02,000 --> 00:23:06,840
matteo campanelli and cheya garnish and

563
00:23:06,840 --> 00:23:11,440
claudio orlandi and akira takahashi

564
00:23:11,440 --> 00:23:13,520
and the speaker will be

565
00:23:13,520 --> 00:23:16,480
mateo so please

566
00:23:16,480 --> 00:23:18,240
start your talk

567
00:23:18,240 --> 00:23:18,960
hi

568
00:23:18,960 --> 00:23:21,360
uh can you see my slides

569
00:23:21,360 --> 00:23:22,720
we can

570
00:23:22,720 --> 00:23:24,159
okay fantastic

571
00:23:24,159 --> 00:23:26,960
hi i'm matteo i'm going to

572
00:23:26,960 --> 00:23:29,760
talk about this work which is

573
00:23:29,760 --> 00:23:31,600
with a bunch of other people

574
00:23:31,600 --> 00:23:34,159
and this work we try and obtain better

575
00:23:34,159 --> 00:23:35,280
general

576
00:23:35,280 --> 00:23:36,720
commit improved snarks with the

577
00:23:36,720 --> 00:23:38,240
universal srs

578
00:23:38,240 --> 00:23:40,880
but better we mean more efficient and

579
00:23:40,880 --> 00:23:42,880
better in terms of

580
00:23:42,880 --> 00:23:45,200
general construction

581
00:23:45,200 --> 00:23:48,000
what is our setting our setting is that

582
00:23:48,000 --> 00:23:48,799
of

583
00:23:48,799 --> 00:23:50,880
snarks zero knowledge snarks it's been

584
00:23:50,880 --> 00:23:52,400
already mentioned so we care about

585
00:23:52,400 --> 00:23:54,400
non-interactivity we want to prove in

586
00:23:54,400 --> 00:23:56,000
zero knowledge

587
00:23:56,000 --> 00:23:59,760
knowledge of a certain secret a secret

588
00:23:59,760 --> 00:24:03,279
witness and the approver will provide to

589
00:24:03,279 --> 00:24:05,840
the verifier a very very short

590
00:24:05,840 --> 00:24:07,919
certificate pie to show his knowledge of

591
00:24:07,919 --> 00:24:09,679
this

592
00:24:09,679 --> 00:24:12,400
another component of our setting is that

593
00:24:12,400 --> 00:24:14,799
we are in a trusted setup as it's

594
00:24:14,799 --> 00:24:16,840
already been mentioned

595
00:24:16,840 --> 00:24:18,240
but the

596
00:24:18,240 --> 00:24:20,559
important factor is that we want this

597
00:24:20,559 --> 00:24:23,760
setup to be done once and for all

598
00:24:23,760 --> 00:24:24,640
uh

599
00:24:24,640 --> 00:24:26,480
from

600
00:24:26,480 --> 00:24:29,679
just abound on the largest relation

601
00:24:29,679 --> 00:24:31,760
you're going to prove something about

602
00:24:31,760 --> 00:24:33,440
and then we we can specialize this

603
00:24:33,440 --> 00:24:35,600
relation in any way without additional

604
00:24:35,600 --> 00:24:38,000
overhead

605
00:24:38,000 --> 00:24:40,400
we want this string to be of linear size

606
00:24:40,400 --> 00:24:42,720
as well and we know that there is a

607
00:24:42,720 --> 00:24:45,279
bunch this is non-comprehensive slide

608
00:24:45,279 --> 00:24:47,760
there's a bunch of very very succinct

609
00:24:47,760 --> 00:24:50,400
proof systems line of work sonic marlin

610
00:24:50,400 --> 00:24:51,520
and plunk are the ones we're going to

611
00:24:51,520 --> 00:24:53,440
focus on

612
00:24:53,440 --> 00:24:56,799
but there are others in literature

613
00:24:56,799 --> 00:24:58,640
and then finally

614
00:24:58,640 --> 00:25:00,960
our concern is about commit improve your

615
00:25:00,960 --> 00:25:02,960
knowledge now this is a

616
00:25:02,960 --> 00:25:04,720
phrase that's been overloaded a little

617
00:25:04,720 --> 00:25:08,320
bit uh in the context of

618
00:25:08,320 --> 00:25:10,080
efficient

619
00:25:10,080 --> 00:25:12,400
zero-knowledge-proof systems

620
00:25:12,400 --> 00:25:14,799
it is intended in

621
00:25:14,799 --> 00:25:16,400
you can maintain this manner so for

622
00:25:16,400 --> 00:25:18,480
example the prover

623
00:25:18,480 --> 00:25:21,840
first provides a commitment to witness w

624
00:25:21,840 --> 00:25:23,840
and then it provides a proof to the

625
00:25:23,840 --> 00:25:25,840
verifier that

626
00:25:25,840 --> 00:25:27,460
whatever

627
00:25:27,460 --> 00:25:28,799
[Music]

628
00:25:28,799 --> 00:25:31,200
he knows a w that opens the commitment

629
00:25:31,200 --> 00:25:34,080
and it satisfies a certain relation r so

630
00:25:34,080 --> 00:25:35,760
this is an additional property we're

631
00:25:35,760 --> 00:25:38,960
requiring because in this case

632
00:25:38,960 --> 00:25:40,960
uh my slides are going automatically i

633
00:25:40,960 --> 00:25:44,240
don't know stop them but in this case

634
00:25:44,240 --> 00:25:47,120
we're proving that a relation are holds

635
00:25:47,120 --> 00:25:48,720
and we're able to open the community is

636
00:25:48,720 --> 00:25:50,720
a little bit more confident

637
00:25:50,720 --> 00:25:52,240
there are a few reasons why we care

638
00:25:52,240 --> 00:25:53,840
about this so

639
00:25:53,840 --> 00:25:55,520
we want to compress

640
00:25:55,520 --> 00:25:58,480
say database of a large data structure

641
00:25:58,480 --> 00:26:01,039
and reference to it

642
00:26:01,039 --> 00:26:04,559
we want using anonymous credentials

643
00:26:04,559 --> 00:26:06,799
and we want to

644
00:26:06,799 --> 00:26:09,200
use this pro system to

645
00:26:09,200 --> 00:26:11,760
obtain new modular and efficient

646
00:26:11,760 --> 00:26:14,000
pro systems that's the same

647
00:26:14,000 --> 00:26:15,600
whatever the reason

648
00:26:15,600 --> 00:26:16,880
uh

649
00:26:16,880 --> 00:26:18,880
we can compare snarks and cpu's marks in

650
00:26:18,880 --> 00:26:20,880
the following manner so here

651
00:26:20,880 --> 00:26:22,720
is a representation of the syntax on the

652
00:26:22,720 --> 00:26:23,840
left

653
00:26:23,840 --> 00:26:26,240
traditional snark on the right

654
00:26:26,240 --> 00:26:28,720
i see what they're calling cp snark

655
00:26:28,720 --> 00:26:30,480
which takes as input a bunch of

656
00:26:30,480 --> 00:26:33,279
commitments c1cl

657
00:26:33,279 --> 00:26:34,080
and

658
00:26:34,080 --> 00:26:35,919
each of this commitment opens to a

659
00:26:35,919 --> 00:26:39,279
certain part of

660
00:26:39,279 --> 00:26:40,880
of the witness

661
00:26:40,880 --> 00:26:41,840
now

662
00:26:41,840 --> 00:26:43,279
the setting on the right is a special

663
00:26:43,279 --> 00:26:45,200
case of the other so

664
00:26:45,200 --> 00:26:48,000
why would we care and the reason is

665
00:26:48,000 --> 00:26:50,720
efficiency and interpretability

666
00:26:50,720 --> 00:26:53,840
so by efficiency here i mean that we do

667
00:26:53,840 --> 00:26:56,400
not want to achieve this

668
00:26:56,400 --> 00:26:59,919
commit improve capability simply by

669
00:26:59,919 --> 00:27:01,360
realizing this

670
00:27:01,360 --> 00:27:03,039
in their arithmetic representation in

671
00:27:03,039 --> 00:27:04,559
the circuit

672
00:27:04,559 --> 00:27:06,159
and on the other hand we want this to be

673
00:27:06,159 --> 00:27:08,320
interoperable with like these these

674
00:27:08,320 --> 00:27:10,480
commitment systems not to be

675
00:27:10,480 --> 00:27:12,960
special in any way we like all playing

676
00:27:12,960 --> 00:27:15,760
patterson for example

677
00:27:15,760 --> 00:27:18,080
so we we try to achieve general

678
00:27:18,080 --> 00:27:19,200
constructions and efficient

679
00:27:19,200 --> 00:27:21,520
constructions in this sense

680
00:27:21,520 --> 00:27:23,440
our result from

681
00:27:23,440 --> 00:27:26,320
very very high altitude can be seen as

682
00:27:26,320 --> 00:27:28,559
new ways to construct cp snarks

683
00:27:28,559 --> 00:27:32,080
generically with the universal srs

684
00:27:32,080 --> 00:27:33,279
and

685
00:27:33,279 --> 00:27:35,360
a little bit more in a more itemized

686
00:27:35,360 --> 00:27:38,799
manner we provide the general compiler

687
00:27:38,799 --> 00:27:41,360
uh into cp snarks with this property

688
00:27:41,360 --> 00:27:43,200
take your favorite snark

689
00:27:43,200 --> 00:27:46,159
with some property with some caveats and

690
00:27:46,159 --> 00:27:48,799
with the universal srs and convert into

691
00:27:48,799 --> 00:27:50,320
serious nerves

692
00:27:50,320 --> 00:27:52,880
uh in really this is not we're not

693
00:27:52,880 --> 00:27:54,960
taking as dark we're really taking

694
00:27:54,960 --> 00:27:57,039
information theoretic objects

695
00:27:57,039 --> 00:27:58,960
such as piop that has already been

696
00:27:58,960 --> 00:28:01,039
mentioned

697
00:28:01,039 --> 00:28:03,279
and then what we do we provide

698
00:28:03,279 --> 00:28:05,279
uh specific instantiations for modeling

699
00:28:05,279 --> 00:28:08,799
plan sonic we show that these satisfy

700
00:28:08,799 --> 00:28:11,919
the uh properties we care about

701
00:28:11,919 --> 00:28:13,520
and we achieve that with the generic

702
00:28:13,520 --> 00:28:14,799
patterson

703
00:28:14,799 --> 00:28:17,039
and we all try to do that with we shoot

704
00:28:17,039 --> 00:28:19,279
that with small very lightweight

705
00:28:19,279 --> 00:28:21,279
in a very lightweight manner

706
00:28:21,279 --> 00:28:22,320
this light

707
00:28:22,320 --> 00:28:26,000
uh summarizes in the first row our

708
00:28:26,000 --> 00:28:28,000
complexity asymptotically when applied

709
00:28:28,000 --> 00:28:30,880
to proof system with a

710
00:28:30,880 --> 00:28:32,880
constant proof size

711
00:28:32,880 --> 00:28:34,960
so here on the right maybe i should

712
00:28:34,960 --> 00:28:36,640
explain a little bit so imagine you have

713
00:28:36,640 --> 00:28:38,080
a relation are

714
00:28:38,080 --> 00:28:40,640
the large witness of sort and l

715
00:28:40,640 --> 00:28:43,120
commitments to

716
00:28:43,120 --> 00:28:45,600
possibly um

717
00:28:45,600 --> 00:28:48,399
two partial parts of the witness any

718
00:28:48,399 --> 00:28:49,919
charge size d

719
00:28:49,919 --> 00:28:52,480
our proof size is logarithmic in

720
00:28:52,480 --> 00:28:56,559
the total size of the opening l times t

721
00:28:56,880 --> 00:29:00,080
verifier is linear also

722
00:29:00,080 --> 00:29:01,600
um

723
00:29:01,600 --> 00:29:03,919
and this opening but now this is not

724
00:29:03,919 --> 00:29:06,880
uh linear in the size of the the whole

725
00:29:06,880 --> 00:29:10,240
witness just in the size of the whole

726
00:29:10,240 --> 00:29:11,760
and

727
00:29:11,760 --> 00:29:13,520
this can be compared the table also

728
00:29:13,520 --> 00:29:14,880
shows other

729
00:29:14,880 --> 00:29:17,120
general commit improved snarks with the

730
00:29:17,120 --> 00:29:18,960
universal srs

731
00:29:18,960 --> 00:29:21,520
the most interesting uh

732
00:29:21,520 --> 00:29:24,320
contrast maybe comparison is maybe with

733
00:29:24,320 --> 00:29:25,600
lunar

734
00:29:25,600 --> 00:29:28,559
and we can see the two systems actually

735
00:29:28,559 --> 00:29:30,240
show the trade-off especially in

736
00:29:30,240 --> 00:29:32,240
verification time but there are also

737
00:29:32,240 --> 00:29:35,679
some improved precise

738
00:29:35,679 --> 00:29:38,799
how do we do this real quick technically

739
00:29:38,799 --> 00:29:40,399
we take a recipe

740
00:29:40,399 --> 00:29:42,080
that's been already mentioned in this

741
00:29:42,080 --> 00:29:43,360
session so

742
00:29:43,360 --> 00:29:46,399
give an information theory object uh in

743
00:29:46,399 --> 00:29:48,399
this case we focus on algebraic

744
00:29:48,399 --> 00:29:50,799
holographic proofs

745
00:29:50,799 --> 00:29:51,600
and

746
00:29:51,600 --> 00:29:54,480
for example the modeling paper

747
00:29:54,480 --> 00:29:56,559
and that as equivalent representation

748
00:29:56,559 --> 00:29:58,720
and given a crypto primitive in

749
00:29:58,720 --> 00:30:00,480
particular polynomial commitments we can

750
00:30:00,480 --> 00:30:03,279
compile it to obtain snark

751
00:30:03,279 --> 00:30:06,159
we specialize this recipe a little bit

752
00:30:06,159 --> 00:30:08,720
and so we have hp's with some special

753
00:30:08,720 --> 00:30:10,159
properties and we're just going to hover

754
00:30:10,159 --> 00:30:11,279
on

755
00:30:11,279 --> 00:30:14,320
and then we use additive properties of

756
00:30:14,320 --> 00:30:16,080
polynomial commitments and we achieve

757
00:30:16,080 --> 00:30:19,039
what we want to achieve

758
00:30:19,360 --> 00:30:22,080
the compiler the recipe i just mentioned

759
00:30:22,080 --> 00:30:23,840
in a picture will look like this i'm not

760
00:30:23,840 --> 00:30:26,399
going to explain too much here this

761
00:30:26,399 --> 00:30:27,919
the ones from the right are challenges

762
00:30:27,919 --> 00:30:30,320
from the verifier and this is a compiled

763
00:30:30,320 --> 00:30:32,480
algebraic holography proof in a commit

764
00:30:32,480 --> 00:30:36,240
improved context so these blue circley

765
00:30:36,240 --> 00:30:39,039
cis are polynomial commitments

766
00:30:39,039 --> 00:30:41,760
and so at the end the usual recipes for

767
00:30:41,760 --> 00:30:45,039
hps is specialized with an additional

768
00:30:45,039 --> 00:30:46,480
gadget

769
00:30:46,480 --> 00:30:48,399
a linking gadget that takes this

770
00:30:48,399 --> 00:30:50,559
polynomial uh this

771
00:30:50,559 --> 00:30:52,880
committed polynomial oracles and links

772
00:30:52,880 --> 00:30:54,080
them to

773
00:30:54,080 --> 00:30:56,080
to the input commitments this recipe is

774
00:30:56,080 --> 00:30:58,880
now new it's also been used in lunar

775
00:30:58,880 --> 00:31:00,880
and this linking gadget that's what i

776
00:31:00,880 --> 00:31:03,279
just said but we need to take care of

777
00:31:03,279 --> 00:31:05,120
certain things when we apply that we

778
00:31:05,120 --> 00:31:07,039
need to solve certain challenges one of

779
00:31:07,039 --> 00:31:08,559
them is

780
00:31:08,559 --> 00:31:11,760
not depending on the whole witness

781
00:31:11,760 --> 00:31:15,919
in complexity and to do that we

782
00:31:15,919 --> 00:31:18,480
notice and exploit

783
00:31:18,480 --> 00:31:22,080
a decomposability property of

784
00:31:22,080 --> 00:31:24,640
some of the oracle polynomials here

785
00:31:24,640 --> 00:31:25,760
which we

786
00:31:25,760 --> 00:31:27,760
defined in the paper

787
00:31:27,760 --> 00:31:30,399
and this has some sub challenges such as

788
00:31:30,399 --> 00:31:33,200
taking care of none overlapping and such

789
00:31:33,200 --> 00:31:35,200
and then the second challenge is

790
00:31:35,200 --> 00:31:37,679
concretely essentiating this in a an

791
00:31:37,679 --> 00:31:39,440
efficient manner into

792
00:31:39,440 --> 00:31:41,440
to obtain a small proof size

793
00:31:41,440 --> 00:31:44,399
and our starting point is we reduce our

794
00:31:44,399 --> 00:31:45,519
problem to

795
00:31:45,519 --> 00:31:47,840
using sigma protocols on a relation that

796
00:31:47,840 --> 00:31:50,640
looks like this so

797
00:31:50,640 --> 00:31:54,159
just intuition is given a commitment to

798
00:31:54,159 --> 00:31:55,760
concatenation of

799
00:31:55,760 --> 00:31:58,159
a bunch of pieces of the witness

800
00:31:58,159 --> 00:32:00,080
and given a bunch of commitments to

801
00:32:00,080 --> 00:32:01,600
different pieces

802
00:32:01,600 --> 00:32:03,760
linked them together now i've done

803
00:32:03,760 --> 00:32:05,279
straightforwardly this will require

804
00:32:05,279 --> 00:32:06,960
communication

805
00:32:06,960 --> 00:32:10,320
uh such as this but uh so

806
00:32:10,320 --> 00:32:12,720
linear in the size of the opening

807
00:32:12,720 --> 00:32:14,720
times

808
00:32:14,720 --> 00:32:16,240
but we compress it through compressed

809
00:32:16,240 --> 00:32:18,960
sigma uh protocol techniques from atom

810
00:32:18,960 --> 00:32:21,519
and grammar and obtain

811
00:32:21,519 --> 00:32:24,240
locating size instead

812
00:32:24,240 --> 00:32:26,159
so just real quick

813
00:32:26,159 --> 00:32:28,399
my last slide is a comparison with lunar

814
00:32:28,399 --> 00:32:30,480
that is very close in spirit both works

815
00:32:30,480 --> 00:32:32,960
have a similar blueprint

816
00:32:32,960 --> 00:32:34,480
lunar is a little bit of a different

817
00:32:34,480 --> 00:32:36,880
linking gadget although they overlap in

818
00:32:36,880 --> 00:32:38,880
some way with ours

819
00:32:38,880 --> 00:32:40,960
indeed they obtain different uh

820
00:32:40,960 --> 00:32:42,799
efficiency

821
00:32:42,799 --> 00:32:45,200
and then luna are using more general

822
00:32:45,200 --> 00:32:48,320
formalization than our work is a php's

823
00:32:48,320 --> 00:32:50,480
polynomial graphic processability

824
00:32:50,480 --> 00:32:52,640
if i remember correctly but our can be

825
00:32:52,640 --> 00:32:55,279
easily formalizing center

826
00:32:55,279 --> 00:32:56,480
please look at the paper for more

827
00:32:56,480 --> 00:32:59,840
details and thank you very much

828
00:33:00,159 --> 00:33:04,080
okay so uh thank you for your talk um

829
00:33:04,080 --> 00:33:05,919
since we're still running a bit behind

830
00:33:05,919 --> 00:33:07,039
schedule

831
00:33:07,039 --> 00:33:08,880
i think we're going to have

832
00:33:08,880 --> 00:33:11,440
questions in the chat so please look at

833
00:33:11,440 --> 00:33:13,039
the chat

834
00:33:13,039 --> 00:33:14,559
and if you have a question please post

835
00:33:14,559 --> 00:33:17,200
it in the chat

836
00:33:17,200 --> 00:33:19,360
we're going to move to the to the next

837
00:33:19,360 --> 00:33:23,120
paper which is titled rational modular

838
00:33:23,120 --> 00:33:26,000
encodings in the dcr setting

839
00:33:26,000 --> 00:33:28,399
non-interactive range proof and per year

840
00:33:28,399 --> 00:33:31,120
based now young in the standard model

841
00:33:31,120 --> 00:33:32,880
and this is a paper by

842
00:33:32,880 --> 00:33:36,799
julian de veve and benue libert and

843
00:33:36,799 --> 00:33:38,960
thomas peters

844
00:33:38,960 --> 00:33:40,080
and

845
00:33:40,080 --> 00:33:43,120
durian is going to to give the talk so

846
00:33:43,120 --> 00:33:44,799
please go ahead

847
00:33:44,799 --> 00:33:47,600
thank you for the introduction

848
00:33:47,600 --> 00:33:49,600
uh

849
00:33:49,600 --> 00:33:52,399
so maybe yeah so i won't read the title

850
00:33:52,399 --> 00:33:54,720
again because it's quite long i'll just

851
00:33:54,720 --> 00:33:57,600
move to what is the range proof so

852
00:33:57,600 --> 00:34:00,320
in a range proof i have committed to

853
00:34:00,320 --> 00:34:04,159
some integer value x to some verifier

854
00:34:04,159 --> 00:34:06,960
and now i want to move to

855
00:34:06,960 --> 00:34:09,760
a phase where i want to prove

856
00:34:09,760 --> 00:34:13,679
that this integer belongs to some range

857
00:34:13,679 --> 00:34:15,280
a b

858
00:34:15,280 --> 00:34:16,719
so

859
00:34:16,719 --> 00:34:19,280
to to do so i must rely on the

860
00:34:19,280 --> 00:34:21,040
parameters

861
00:34:21,040 --> 00:34:23,199
that were used beforehand for the

862
00:34:23,199 --> 00:34:24,399
commitment

863
00:34:24,399 --> 00:34:27,679
and what we want to achieve is a range

864
00:34:27,679 --> 00:34:28,960
proof

865
00:34:28,960 --> 00:34:32,079
that is unbounded in the sense that the

866
00:34:32,079 --> 00:34:34,239
parameters of the commitments are not

867
00:34:34,239 --> 00:34:36,879
constraining the values of the of the

868
00:34:36,879 --> 00:34:40,480
range a b they must not be bounded

869
00:34:40,480 --> 00:34:41,520
and

870
00:34:41,520 --> 00:34:43,599
the thing is if you take really big a

871
00:34:43,599 --> 00:34:46,800
and b you could expect to have

872
00:34:46,800 --> 00:34:49,679
larger proofs or larger commitments so

873
00:34:49,679 --> 00:34:52,320
this is why we want unboundedness with

874
00:34:52,320 --> 00:34:54,399
constant rate where the rate is the

875
00:34:54,399 --> 00:34:56,639
ratio of the length of what you send to

876
00:34:56,639 --> 00:34:58,800
the verifier over the length of your

877
00:34:58,800 --> 00:35:01,280
weakness so over x

878
00:35:01,280 --> 00:35:04,640
and if you look at previous work

879
00:35:04,640 --> 00:35:06,560
in the standard model

880
00:35:06,560 --> 00:35:09,839
we have the first ones to achieve that

881
00:35:09,839 --> 00:35:12,720
using dcr

882
00:35:14,480 --> 00:35:17,040
interestingly our techniques can also be

883
00:35:17,040 --> 00:35:19,200
applied in the setting of threshold

884
00:35:19,200 --> 00:35:21,280
public key encryptions

885
00:35:21,280 --> 00:35:23,680
where the decryption algorithm is

886
00:35:23,680 --> 00:35:27,520
distributed among different servers

887
00:35:27,520 --> 00:35:30,720
in particular what we do is

888
00:35:30,720 --> 00:35:33,520
we instantiate narion in the

889
00:35:33,520 --> 00:35:36,160
dcr setting

890
00:35:36,160 --> 00:35:38,480
this was already done before but the

891
00:35:38,480 --> 00:35:41,119
proof system that was used was actually

892
00:35:41,119 --> 00:35:42,880
not sound

893
00:35:42,880 --> 00:35:46,000
so we kind of fix that with our new

894
00:35:46,000 --> 00:35:48,240
sigma protocol and

895
00:35:48,240 --> 00:35:51,440
we get the cca2 security against static

896
00:35:51,440 --> 00:35:53,119
corruptions

897
00:35:53,119 --> 00:35:55,760
so i won't talk anymore about this part

898
00:35:55,760 --> 00:35:57,760
because the part about french proof is

899
00:35:57,760 --> 00:35:58,800
already

900
00:35:58,800 --> 00:36:00,400
will already take

901
00:36:00,400 --> 00:36:03,200
all the time i have

902
00:36:03,760 --> 00:36:07,280
we will be using the dcr assumption in

903
00:36:07,280 --> 00:36:08,480
this work

904
00:36:08,480 --> 00:36:10,640
mainly because to reach the

905
00:36:10,640 --> 00:36:12,880
involvingness we will rely on the fact

906
00:36:12,880 --> 00:36:13,760
that

907
00:36:13,760 --> 00:36:16,720
whatever data we choose as long as it is

908
00:36:16,720 --> 00:36:18,000
polynomial

909
00:36:18,000 --> 00:36:20,960
then all zeta dcr assumptions are

910
00:36:20,960 --> 00:36:23,839
equivalent to one another

911
00:36:23,839 --> 00:36:26,880
uh this will let us choose zeta freely

912
00:36:26,880 --> 00:36:31,760
depending on small a small b beforehand

913
00:36:31,760 --> 00:36:35,520
we will also be using rational encodings

914
00:36:35,520 --> 00:36:36,400
so

915
00:36:36,400 --> 00:36:39,280
the idea is that we have some fraction r

916
00:36:39,280 --> 00:36:40,800
of the s

917
00:36:40,800 --> 00:36:43,599
and we want to encode it

918
00:36:43,599 --> 00:36:44,480
in

919
00:36:44,480 --> 00:36:46,400
as an element

920
00:36:46,400 --> 00:36:49,119
of z and to be zeta and this will be

921
00:36:49,119 --> 00:36:50,720
this element

922
00:36:50,720 --> 00:36:54,160
and actually if n and zeta are well

923
00:36:54,160 --> 00:36:56,720
chosen so they satisfy this bound

924
00:36:56,720 --> 00:37:00,160
then it is possible to uniquely recover

925
00:37:00,160 --> 00:37:01,760
r and s

926
00:37:01,760 --> 00:37:03,839
using those algorithm over a

927
00:37:03,839 --> 00:37:07,359
well-defined lattice

928
00:37:07,680 --> 00:37:09,359
so

929
00:37:09,359 --> 00:37:12,000
this rational encoding can be used to

930
00:37:12,000 --> 00:37:13,200
kind of

931
00:37:13,200 --> 00:37:15,839
improve that the damgard uric

932
00:37:15,839 --> 00:37:17,520
encryption algorithm

933
00:37:17,520 --> 00:37:20,240
in the sense that we keep the same

934
00:37:20,240 --> 00:37:21,520
algorithm

935
00:37:21,520 --> 00:37:24,320
that computes by encryptions for a

936
00:37:24,320 --> 00:37:27,119
well-chosen zeta

937
00:37:27,119 --> 00:37:29,520
but the decryption is slightly different

938
00:37:29,520 --> 00:37:32,240
because after we

939
00:37:32,240 --> 00:37:34,960
decrypt using the damn girl direction

940
00:37:34,960 --> 00:37:38,480
algorithm we also applied the previous

941
00:37:38,480 --> 00:37:40,400
rational decoding

942
00:37:40,400 --> 00:37:42,800
algorithm to recover

943
00:37:42,800 --> 00:37:46,240
message as a rational encoding

944
00:37:46,240 --> 00:37:48,960
and then we round this rational so it

945
00:37:48,960 --> 00:37:52,960
means that it's possible to actually do

946
00:37:52,960 --> 00:37:56,240
a few operations operationals

947
00:37:56,240 --> 00:37:57,119
over

948
00:37:57,119 --> 00:37:58,560
encryptions

949
00:37:58,560 --> 00:38:00,480
and since these encryptions are our

950
00:38:00,480 --> 00:38:02,880
commitments we have some freedom to play

951
00:38:02,880 --> 00:38:05,680
with

952
00:38:05,680 --> 00:38:09,599
finally the last tool we will be using

953
00:38:09,599 --> 00:38:10,960
is this

954
00:38:10,960 --> 00:38:13,839
particular sum of square decomposition

955
00:38:13,839 --> 00:38:16,320
so basically if you have some integer

956
00:38:16,320 --> 00:38:19,359
building into some range then you can

957
00:38:19,359 --> 00:38:21,440
write the following

958
00:38:21,440 --> 00:38:24,160
thing as a sum of three squares

959
00:38:24,160 --> 00:38:27,520
and actually if you want to prove that

960
00:38:27,520 --> 00:38:30,400
x0 indeed belongs to that range you can

961
00:38:30,400 --> 00:38:31,440
prove

962
00:38:31,440 --> 00:38:34,560
that you know three such integers that

963
00:38:34,560 --> 00:38:36,960
satisfies this relation

964
00:38:36,960 --> 00:38:39,119
so in the end a proof

965
00:38:39,119 --> 00:38:39,920
is

966
00:38:39,920 --> 00:38:42,240
more or less a commitment to

967
00:38:42,240 --> 00:38:46,320
the four values of b minus x 0 x 1 x 2 x

968
00:38:46,320 --> 00:38:47,440
3

969
00:38:47,440 --> 00:38:48,400
and

970
00:38:48,400 --> 00:38:50,960
you need one more commitment that is a

971
00:38:50,960 --> 00:38:53,520
commitment to this relation so

972
00:38:53,520 --> 00:38:55,359
commitment that it satisfies that

973
00:38:55,359 --> 00:38:59,440
satisfies find only situation is true

974
00:38:59,440 --> 00:39:01,839
and since our commitments are vanguard

975
00:39:01,839 --> 00:39:03,520
eureka encryption

976
00:39:03,520 --> 00:39:07,359
then b is not bounded by your parameter

977
00:39:07,359 --> 00:39:10,160
which is only n in this case

978
00:39:10,160 --> 00:39:13,040
uh because you can set the tar as big as

979
00:39:13,040 --> 00:39:17,040
needed depending on the size of this

980
00:39:17,760 --> 00:39:20,480
and finally the construction we give is

981
00:39:20,480 --> 00:39:22,640
actually a trapdoor single protocol so a

982
00:39:22,640 --> 00:39:25,040
trapdoor sigma protocol is a sigma

983
00:39:25,040 --> 00:39:27,520
protocol that has a trapdoor

984
00:39:27,520 --> 00:39:29,920
a trapdoor that can be used to compute a

985
00:39:29,920 --> 00:39:32,240
bad challenge a bad challenge

986
00:39:32,240 --> 00:39:34,000
it is the unique

987
00:39:34,000 --> 00:39:35,520
challenge

988
00:39:35,520 --> 00:39:37,680
that is

989
00:39:37,680 --> 00:39:39,599
well that's a bad challenge

990
00:39:39,599 --> 00:39:42,000
for statements that are not in the

991
00:39:42,000 --> 00:39:43,760
language that do not satisfy the

992
00:39:43,760 --> 00:39:46,079
relation that you that you want

993
00:39:46,079 --> 00:39:49,440
and destructor is a bit

994
00:39:49,440 --> 00:39:51,680
well we needed some elegant solution to

995
00:39:51,680 --> 00:39:53,760
do it because to identify a bad

996
00:39:53,760 --> 00:39:56,400
challenge it is non-trivial you need to

997
00:39:56,400 --> 00:39:57,359
first

998
00:39:57,359 --> 00:39:59,520
apply the previous decoding algorithm

999
00:39:59,520 --> 00:40:02,640
and then with all the range

1000
00:40:02,640 --> 00:40:05,040
the different ranges you have to satisfy

1001
00:40:05,040 --> 00:40:06,400
the different relations you have to

1002
00:40:06,400 --> 00:40:07,599
satisfy

1003
00:40:07,599 --> 00:40:09,359
you find some linear programming

1004
00:40:09,359 --> 00:40:10,800
instance

1005
00:40:10,800 --> 00:40:12,960
and then you use lens trans algorithm to

1006
00:40:12,960 --> 00:40:15,760
solve it because the number of variables

1007
00:40:15,760 --> 00:40:18,000
and constraint is constants

1008
00:40:18,000 --> 00:40:19,839
and menstrual's algorithm then runs in

1009
00:40:19,839 --> 00:40:21,920
polynomial time

1010
00:40:21,920 --> 00:40:24,240
so this is all i have the time i think

1011
00:40:24,240 --> 00:40:26,640
to talk about so thank you for your

1012
00:40:26,640 --> 00:40:29,359
attention and you can see the longer

1013
00:40:29,359 --> 00:40:32,720
video on youtube if you want

1014
00:40:33,599 --> 00:40:34,720
thank you

1015
00:40:34,720 --> 00:40:37,440
for your talk um if there's a really

1016
00:40:37,440 --> 00:40:39,839
quick question i i guess we can handle

1017
00:40:39,839 --> 00:40:40,640
that

1018
00:40:40,640 --> 00:40:42,000
does anybody

1019
00:40:42,000 --> 00:40:45,599
have a quick question to ask

1020
00:40:48,720 --> 00:40:50,240
in the meantime

1021
00:40:50,240 --> 00:40:52,240
i can see there's a um

1022
00:40:52,240 --> 00:40:55,200
question on sulup for matteo so material

1023
00:40:55,200 --> 00:40:56,000
if

1024
00:40:56,000 --> 00:40:58,400
you could address that that would be

1025
00:40:58,400 --> 00:41:00,880
helpful

1026
00:41:01,359 --> 00:41:02,450
i'm sorry i cannot see

1027
00:41:02,450 --> 00:41:03,760
[Music]

1028
00:41:03,760 --> 00:41:06,960
i can say i don't have access to

1029
00:41:06,960 --> 00:41:10,160
okay i see um

1030
00:41:10,160 --> 00:41:13,040
okay so i i think uh maybe at some point

1031
00:41:13,040 --> 00:41:16,880
you will get access to to suit it um

1032
00:41:16,880 --> 00:41:20,560
i think for now we are going to um move

1033
00:41:20,560 --> 00:41:22,000
into

1034
00:41:22,000 --> 00:41:23,970
the the next session

1035
00:41:23,970 --> 00:41:25,760
[Music]

1036
00:41:25,760 --> 00:41:26,720
which is

1037
00:41:26,720 --> 00:41:28,560
key exchange

1038
00:41:28,560 --> 00:41:30,720
and we have we have two talks in the

1039
00:41:30,720 --> 00:41:32,400
session

1040
00:41:32,400 --> 00:41:36,160
and the um the first paper is called the

1041
00:41:36,160 --> 00:41:39,040
post quantum asynchronous deniable key

1042
00:41:39,040 --> 00:41:42,079
exchange and the signal handshake

1043
00:41:42,079 --> 00:41:46,720
and this is a paper by charlene brindle

1044
00:41:46,720 --> 00:41:48,960
fiddler felix gunder

1045
00:41:48,960 --> 00:41:52,400
christian johnson and douglas stapler

1046
00:41:52,400 --> 00:41:53,359
and

1047
00:41:53,359 --> 00:41:55,200
luna is going to

1048
00:41:55,200 --> 00:41:57,200
to give this all so

1049
00:41:57,200 --> 00:41:58,480
please

1050
00:41:58,480 --> 00:42:00,640
start your talk

1051
00:42:00,640 --> 00:42:02,560
yes hi everybody thanks for the

1052
00:42:02,560 --> 00:42:04,560
introduction i guess with that i'm

1053
00:42:04,560 --> 00:42:06,240
already done with the first slide so

1054
00:42:06,240 --> 00:42:09,200
let's dive right into it

1055
00:42:09,200 --> 00:42:11,599
we are looking at the setting of instant

1056
00:42:11,599 --> 00:42:13,760
messaging and what we want here an

1057
00:42:13,760 --> 00:42:16,319
important property is asynchronous city

1058
00:42:16,319 --> 00:42:18,960
meaning that bob can upload his key

1059
00:42:18,960 --> 00:42:21,599
material to a key server ahead of time

1060
00:42:21,599 --> 00:42:23,440
and alice whenever she wants to start

1061
00:42:23,440 --> 00:42:25,760
communicating she can just query the key

1062
00:42:25,760 --> 00:42:28,079
server for bob's key material and then

1063
00:42:28,079 --> 00:42:30,480
send the first case the first message at

1064
00:42:30,480 --> 00:42:32,480
a time of her convenience

1065
00:42:32,480 --> 00:42:34,640
another property that we want is mutual

1066
00:42:34,640 --> 00:42:36,000
authentication

1067
00:42:36,000 --> 00:42:38,000
meaning that alice one should be sure

1068
00:42:38,000 --> 00:42:39,920
that she's really talking to bob and

1069
00:42:39,920 --> 00:42:41,680
vice versa

1070
00:42:41,680 --> 00:42:43,520
a third property which is especially

1071
00:42:43,520 --> 00:42:45,359
important for signal is called offline

1072
00:42:45,359 --> 00:42:46,800
deniability

1073
00:42:46,800 --> 00:42:49,040
intuitively this means that if there is

1074
00:42:49,040 --> 00:42:51,440
a conversation transcript you can deny

1075
00:42:51,440 --> 00:42:53,440
that you were involved in creating this

1076
00:42:53,440 --> 00:42:55,280
transcript but we get to some more

1077
00:42:55,280 --> 00:42:57,440
details on that later on

1078
00:42:57,440 --> 00:42:59,599
and so after they both parties have

1079
00:42:59,599 --> 00:43:01,359
agreed on a key they can keep sending

1080
00:43:01,359 --> 00:43:03,520
more messages to each other

1081
00:43:03,520 --> 00:43:05,680
and as you can see these message flows

1082
00:43:05,680 --> 00:43:07,839
are some somewhat split

1083
00:43:07,839 --> 00:43:09,520
and the first part is the initial

1084
00:43:09,520 --> 00:43:11,599
handshake protocol which signal

1085
00:43:11,599 --> 00:43:14,640
instantiates with x3dh extended triple

1086
00:43:14,640 --> 00:43:16,880
difficult and the second part is the

1087
00:43:16,880 --> 00:43:18,960
double register protocol

1088
00:43:18,960 --> 00:43:21,280
and double ratchet can be built both

1089
00:43:21,280 --> 00:43:23,440
quantum secure via with a construction

1090
00:43:23,440 --> 00:43:24,960
from alvin at all

1091
00:43:24,960 --> 00:43:27,680
um and in this talk we will focus on

1092
00:43:27,680 --> 00:43:29,520
building a post quantum version of the

1093
00:43:29,520 --> 00:43:31,920
initial key exchange that is necessary

1094
00:43:31,920 --> 00:43:34,960
because the x3dh relies onto the helmond

1095
00:43:34,960 --> 00:43:36,800
which is not secure against quantum

1096
00:43:36,800 --> 00:43:39,119
attackers

1097
00:43:39,119 --> 00:43:41,839
so what can we use maybe let's have a

1098
00:43:41,839 --> 00:43:43,440
look at camps because camps are

1099
00:43:43,440 --> 00:43:46,000
currently being standardized by nist

1100
00:43:46,000 --> 00:43:48,880
and are secure against quantum attackers

1101
00:43:48,880 --> 00:43:50,720
so direct construction could look as

1102
00:43:50,720 --> 00:43:51,680
follows

1103
00:43:51,680 --> 00:43:54,560
orb sends over his public key to alice

1104
00:43:54,560 --> 00:43:56,160
actually all of his public keys because

1105
00:43:56,160 --> 00:43:57,680
there's a long term medium term and

1106
00:43:57,680 --> 00:43:58,720
ephemeral

1107
00:43:58,720 --> 00:43:59,839
key pair

1108
00:43:59,839 --> 00:44:02,400
then alice will encapsulate against each

1109
00:44:02,400 --> 00:44:03,599
of bob's

1110
00:44:03,599 --> 00:44:06,079
cam keys and send over the chem cipher

1111
00:44:06,079 --> 00:44:08,480
texts to bob

1112
00:44:08,480 --> 00:44:11,200
the problem with this is there is no lsd

1113
00:44:11,200 --> 00:44:13,040
warp authentication

1114
00:44:13,040 --> 00:44:14,480
because anybody could have just

1115
00:44:14,480 --> 00:44:17,760
encapsulated these cam cipher texts

1116
00:44:17,760 --> 00:44:20,240
and encapsulating against alice's public

1117
00:44:20,240 --> 00:44:22,720
key would take another round trip would

1118
00:44:22,720 --> 00:44:24,160
take another message which we do not

1119
00:44:24,160 --> 00:44:25,520
have here

1120
00:44:25,520 --> 00:44:28,400
so what we need in addition to this cam

1121
00:44:28,400 --> 00:44:31,599
is some form of deniable authentication

1122
00:44:31,599 --> 00:44:33,119
and we realized this deniable

1123
00:44:33,119 --> 00:44:35,440
authentication with designated verifier

1124
00:44:35,440 --> 00:44:36,880
signatures

1125
00:44:36,880 --> 00:44:38,400
that is the core idea of our

1126
00:44:38,400 --> 00:44:39,920
construction

1127
00:44:39,920 --> 00:44:40,960
so

1128
00:44:40,960 --> 00:44:42,720
let's have the promised look at

1129
00:44:42,720 --> 00:44:44,800
deniability what is deniability for an

1130
00:44:44,800 --> 00:44:48,560
asynchronous denial ake protocol

1131
00:44:48,560 --> 00:44:50,160
we're looking at a transcript and a

1132
00:44:50,160 --> 00:44:51,680
session key and there's two options

1133
00:44:51,680 --> 00:44:53,680
where this can come from the first

1134
00:44:53,680 --> 00:44:55,680
option is that the transcript and

1135
00:44:55,680 --> 00:44:57,440
session key come from an authentic

1136
00:44:57,440 --> 00:44:59,520
execution of the key exchange protocol

1137
00:44:59,520 --> 00:45:01,680
between alice and bob

1138
00:45:01,680 --> 00:45:03,920
or the transcript and session key could

1139
00:45:03,920 --> 00:45:07,119
have been faked by bob alone without any

1140
00:45:07,119 --> 00:45:09,119
involvement from alice

1141
00:45:09,119 --> 00:45:11,599
and the judge should not be able to tell

1142
00:45:11,599 --> 00:45:14,240
which of these two was the case even if

1143
00:45:14,240 --> 00:45:16,960
the judge has access to all the secret

1144
00:45:16,960 --> 00:45:19,760
keys of both parties

1145
00:45:19,760 --> 00:45:23,040
this is our notion of deniability for

1146
00:45:23,040 --> 00:45:24,640
ake

1147
00:45:24,640 --> 00:45:26,560
we model this based on the informal

1148
00:45:26,560 --> 00:45:28,720
specification from the signal

1149
00:45:28,720 --> 00:45:31,599
from the signal specification

1150
00:45:31,599 --> 00:45:33,920
there's also prior work on this so there

1151
00:45:33,920 --> 00:45:36,079
was a definition there still is a

1152
00:45:36,079 --> 00:45:38,400
definition from the reminder at all

1153
00:45:38,400 --> 00:45:40,480
however this differs from ours in in

1154
00:45:40,480 --> 00:45:42,800
several ways one way is that we have the

1155
00:45:42,800 --> 00:45:44,800
strong judge who has access to all of

1156
00:45:44,800 --> 00:45:46,800
the secret keys and we believe this is

1157
00:45:46,800 --> 00:45:48,880
very important to model the real life

1158
00:45:48,880 --> 00:45:51,440
threat of being judged by a nation-state

1159
00:45:51,440 --> 00:45:53,440
adversary

1160
00:45:53,440 --> 00:45:55,760
in that sense our deniability definition

1161
00:45:55,760 --> 00:45:57,280
is stronger than the definition from the

1162
00:45:57,280 --> 00:46:00,160
remainder at all however it is weaker in

1163
00:46:00,160 --> 00:46:02,160
other regards so in total it's

1164
00:46:02,160 --> 00:46:04,319
incomparable

1165
00:46:04,319 --> 00:46:06,480
our full construction is called signal

1166
00:46:06,480 --> 00:46:08,720
in a post quantum regime or spqr for

1167
00:46:08,720 --> 00:46:09,760
short

1168
00:46:09,760 --> 00:46:12,640
we address the full scope of what signal

1169
00:46:12,640 --> 00:46:15,440
expects from this protocol and therefore

1170
00:46:15,440 --> 00:46:17,920
we include medium term keys to prevent

1171
00:46:17,920 --> 00:46:19,760
their case that the ephemera keys may be

1172
00:46:19,760 --> 00:46:21,040
exhausted

1173
00:46:21,040 --> 00:46:23,599
furthermore signal requires to security

1174
00:46:23,599 --> 00:46:25,839
against randomness exposure which we get

1175
00:46:25,839 --> 00:46:28,480
by usage of a twisted prf

1176
00:46:28,480 --> 00:46:31,680
we showed the security of our protocol

1177
00:46:31,680 --> 00:46:33,680
with a security model analogous to the

1178
00:46:33,680 --> 00:46:35,599
one from the original signal analysis

1179
00:46:35,599 --> 00:46:37,440
from congo net all

1180
00:46:37,440 --> 00:46:39,599
and of course we also show deniability

1181
00:46:39,599 --> 00:46:42,000
of our protocol with this deniability

1182
00:46:42,000 --> 00:46:43,920
with respect to our new deniability

1183
00:46:43,920 --> 00:46:46,640
notion with strong judges

1184
00:46:46,640 --> 00:46:48,560
and ours is not the only construction

1185
00:46:48,560 --> 00:46:50,160
for the initial handshake protocol there

1186
00:46:50,160 --> 00:46:52,400
are several so we have the

1187
00:46:52,400 --> 00:46:54,400
currently used x3dh which is not post

1188
00:46:54,400 --> 00:46:56,960
quantum secure we have two constructions

1189
00:46:56,960 --> 00:46:59,200
from hashimoto at al we are also using

1190
00:46:59,200 --> 00:47:01,280
cams and ring signatures

1191
00:47:01,280 --> 00:47:03,440
we have our construction

1192
00:47:03,440 --> 00:47:05,119
and then there's one from super singular

1193
00:47:05,119 --> 00:47:06,560
isogenes

1194
00:47:06,560 --> 00:47:08,000
so

1195
00:47:08,000 --> 00:47:10,480
both construction from hashimoto at al

1196
00:47:10,480 --> 00:47:12,720
as well as ours are generic can be

1197
00:47:12,720 --> 00:47:14,319
instantiated with different building

1198
00:47:14,319 --> 00:47:15,359
blocks

1199
00:47:15,359 --> 00:47:18,119
um while the def harmon and super

1200
00:47:18,119 --> 00:47:20,640
singularization are not generic as you

1201
00:47:20,640 --> 00:47:22,720
can see there's many different pros and

1202
00:47:22,720 --> 00:47:24,960
cons to these all of which i cannot

1203
00:47:24,960 --> 00:47:27,040
outweigh here

1204
00:47:27,040 --> 00:47:29,760
so to sum it up

1205
00:47:29,760 --> 00:47:32,319
using our protocol you can get a post

1206
00:47:32,319 --> 00:47:33,839
quantum replacement for the initial

1207
00:47:33,839 --> 00:47:35,599
handshake protocol from key

1208
00:47:35,599 --> 00:47:37,680
encapsulation and designated verifier

1209
00:47:37,680 --> 00:47:38,800
signatures

1210
00:47:38,800 --> 00:47:41,040
this protocol is deniable against strong

1211
00:47:41,040 --> 00:47:42,160
judges

1212
00:47:42,160 --> 00:47:44,400
and using our post quantum replacement

1213
00:47:44,400 --> 00:47:46,319
for the initial handshake protocol in

1214
00:47:46,319 --> 00:47:48,079
conjunction with the double wretched

1215
00:47:48,079 --> 00:47:49,280
replacement

1216
00:47:49,280 --> 00:47:51,040
from alvin at all for example you can

1217
00:47:51,040 --> 00:47:53,359
build a completely post quantum version

1218
00:47:53,359 --> 00:47:55,839
of the signal protocol

1219
00:47:55,839 --> 00:47:58,000
you can find the full paper on eprint

1220
00:47:58,000 --> 00:47:59,839
and please also check out the full talk

1221
00:47:59,839 --> 00:48:02,160
on youtube thank you for your attention

1222
00:48:02,160 --> 00:48:06,279
i'm happy to take any questions

1223
00:48:07,040 --> 00:48:09,440
okay so thank you for your talk are

1224
00:48:09,440 --> 00:48:10,559
there

1225
00:48:10,559 --> 00:48:14,040
any questions

1226
00:48:23,440 --> 00:48:26,400
so far nobody's going to have a correct

1227
00:48:26,400 --> 00:48:28,960
question here

1228
00:48:28,960 --> 00:48:30,319
it seems like answer to all the

1229
00:48:30,319 --> 00:48:33,119
questions already

1230
00:48:33,520 --> 00:48:35,839
it just means your presentation was very

1231
00:48:35,839 --> 00:48:38,400
informative

1232
00:48:38,400 --> 00:48:39,520
i'm very glad about that

1233
00:48:39,520 --> 00:48:42,550
[Music]

1234
00:48:43,520 --> 00:48:45,520
okay maybe i will ask you a very quick

1235
00:48:45,520 --> 00:48:48,640
question can you say anything about the

1236
00:48:48,640 --> 00:48:49,520
um

1237
00:48:49,520 --> 00:48:52,319
the efficiency oh or maybe we

1238
00:48:52,319 --> 00:48:53,040
do

1239
00:48:53,040 --> 00:48:54,480
have a

1240
00:48:54,480 --> 00:48:57,200
question no this was

1241
00:48:57,200 --> 00:48:58,880
uh something different in the in the

1242
00:48:58,880 --> 00:49:00,079
scripture

1243
00:49:00,079 --> 00:49:02,640
can you say anything about the uh the

1244
00:49:02,640 --> 00:49:05,440
concrete uh efficiency of the key chain

1245
00:49:05,440 --> 00:49:07,440
compared to some of the

1246
00:49:07,440 --> 00:49:10,079
um the other uh

1247
00:49:10,079 --> 00:49:12,559
proposals for folks quantum

1248
00:49:12,559 --> 00:49:14,319
um yes and no

1249
00:49:14,319 --> 00:49:17,200
so um

1250
00:49:17,200 --> 00:49:19,119
let me try the pointer here so we're

1251
00:49:19,119 --> 00:49:21,599
using a cam and dvs scheme

1252
00:49:21,599 --> 00:49:23,760
and it depends on which concrete cam

1253
00:49:23,760 --> 00:49:26,880
scheme you use to implement our protocol

1254
00:49:26,880 --> 00:49:28,559
um there's

1255
00:49:28,559 --> 00:49:30,720
to be honest with you i'm not familiar

1256
00:49:30,720 --> 00:49:32,800
with the exact numbers from the list

1257
00:49:32,800 --> 00:49:34,640
finalists that we have

1258
00:49:34,640 --> 00:49:35,920
um

1259
00:49:35,920 --> 00:49:37,839
but depending on which cam you choose

1260
00:49:37,839 --> 00:49:39,920
you get a different so

1261
00:49:39,920 --> 00:49:42,960
speed um like computation time as well

1262
00:49:42,960 --> 00:49:44,720
as ciphertext size that you have to send

1263
00:49:44,720 --> 00:49:47,280
over and it's somewhat similar for dvs

1264
00:49:47,280 --> 00:49:49,200
even though the the constructions here

1265
00:49:49,200 --> 00:49:51,200
are less popular but there you can like

1266
00:49:51,200 --> 00:49:52,640
it's a generic construction so it

1267
00:49:52,640 --> 00:49:54,640
depends on which primitive you plug into

1268
00:49:54,640 --> 00:49:55,440
it

1269
00:49:55,440 --> 00:49:56,880
uh and then you get a different

1270
00:49:56,880 --> 00:50:01,680
efficiency yeah yeah okay of course

1271
00:50:02,240 --> 00:50:05,440
that follows um okay yeah but thank you

1272
00:50:05,440 --> 00:50:06,480
uh

1273
00:50:06,480 --> 00:50:08,400
for your talk uh

1274
00:50:08,400 --> 00:50:10,000
and um

1275
00:50:10,000 --> 00:50:11,920
yeah i think we'll move on to the to the

1276
00:50:11,920 --> 00:50:15,760
next paper uh thank you all right so

1277
00:50:15,760 --> 00:50:19,680
the next paper uh is titled uh

1278
00:50:19,680 --> 00:50:21,839
post quantum anonymous one-sided

1279
00:50:21,839 --> 00:50:24,559
authenticated key exchange uh without

1280
00:50:24,559 --> 00:50:26,480
random oracles

1281
00:50:26,480 --> 00:50:29,760
and this is a paper by then ishibashi

1282
00:50:29,760 --> 00:50:32,640
and kazuki yoneyama

1283
00:50:32,640 --> 00:50:36,160
and i guess then is going to

1284
00:50:36,160 --> 00:50:37,440
give the talk

1285
00:50:37,440 --> 00:50:38,800
so

1286
00:50:38,800 --> 00:50:41,839
yes please go ahead

1287
00:50:42,079 --> 00:50:45,200
um could you see my site

1288
00:50:45,200 --> 00:50:48,000
yes we can see your slides okay perfect

1289
00:50:48,000 --> 00:50:49,280
thank you

1290
00:50:49,280 --> 00:50:50,720
okay uh

1291
00:50:50,720 --> 00:50:53,359
thank you for introducing me uh okay i

1292
00:50:53,359 --> 00:50:55,119
directly talk about first quantum

1293
00:50:55,119 --> 00:50:57,119
anonymous one-sided authenticator key

1294
00:50:57,119 --> 00:51:00,079
exchange without random oracles

1295
00:51:00,079 --> 00:51:02,000
this is a joint work with kazuki

1296
00:51:02,000 --> 00:51:04,559
yoneyama

1297
00:51:04,559 --> 00:51:05,440
okay

1298
00:51:05,440 --> 00:51:07,440
a recent k2k

1299
00:51:07,440 --> 00:51:10,319
called ake aka is a cryptographic

1300
00:51:10,319 --> 00:51:13,119
protocol to share commentation key

1301
00:51:13,119 --> 00:51:14,960
among my properties

1302
00:51:14,960 --> 00:51:17,520
through an authentic network such as the

1303
00:51:17,520 --> 00:51:18,559
internet

1304
00:51:18,559 --> 00:51:20,960
in this study we focus on it between two

1305
00:51:20,960 --> 00:51:24,720
bodies each body has a static key pair

1306
00:51:24,720 --> 00:51:27,440
and in a key exchange session each party

1307
00:51:27,440 --> 00:51:30,079
generates our female family secret key

1308
00:51:30,079 --> 00:51:33,040
esk and generate on the female public

1309
00:51:33,040 --> 00:51:36,400
key apk by using these keys

1310
00:51:36,400 --> 00:51:39,040
and send it to the other party

1311
00:51:39,040 --> 00:51:41,119
then each party computes a common

1312
00:51:41,119 --> 00:51:43,760
session key using these keys

1313
00:51:43,760 --> 00:51:46,079
so the ordinary aka is mutual

1314
00:51:46,079 --> 00:51:49,280
authentication however in practice

1315
00:51:49,280 --> 00:51:51,920
mutual authentication is not required

1316
00:51:51,920 --> 00:51:55,200
for some applications

1317
00:51:55,440 --> 00:51:59,119
for example https transactions with only

1318
00:51:59,119 --> 00:52:01,040
server authentication

1319
00:52:01,040 --> 00:52:03,839
in this example

1320
00:52:03,839 --> 00:52:06,000
server returned the static public key

1321
00:52:06,000 --> 00:52:08,400
and its certificate in response to these

1322
00:52:08,400 --> 00:52:10,720
clients requests then

1323
00:52:10,720 --> 00:52:12,480
the client authenticates the server

1324
00:52:12,480 --> 00:52:14,240
using these

1325
00:52:14,240 --> 00:52:16,480
and then exchange keys

1326
00:52:16,480 --> 00:52:19,200
so for key exchange without grant

1327
00:52:19,200 --> 00:52:20,559
authentication

1328
00:52:20,559 --> 00:52:23,520
at one side that aka may be sufficient

1329
00:52:23,520 --> 00:52:25,440
in this paper the

1330
00:52:25,440 --> 00:52:28,240
the ak with one-sided authentication is

1331
00:52:28,240 --> 00:52:31,959
called osak

1332
00:52:32,160 --> 00:52:34,720
in addition it is desirable for clients

1333
00:52:34,720 --> 00:52:37,599
to be anonymous for example a total

1334
00:52:37,599 --> 00:52:39,440
anonymity network

1335
00:52:39,440 --> 00:52:41,520
when the client connects to the

1336
00:52:41,520 --> 00:52:43,920
destination it pass through

1337
00:52:43,920 --> 00:52:45,520
multiple relays

1338
00:52:45,520 --> 00:52:48,000
in the red channel a one-sided anonymous

1339
00:52:48,000 --> 00:52:50,160
communication is used

1340
00:52:50,160 --> 00:52:50,960
so

1341
00:52:50,960 --> 00:52:54,480
each relay cannot identify the sender

1342
00:52:54,480 --> 00:52:56,720
and finally the exit

1343
00:52:56,720 --> 00:52:59,200
relay communicates with the destination

1344
00:52:59,200 --> 00:53:01,440
through normal communication

1345
00:53:01,440 --> 00:53:04,240
in this way the grant can communicate

1346
00:53:04,240 --> 00:53:06,240
with the destination with keeping his

1347
00:53:06,240 --> 00:53:07,680
anonymity

1348
00:53:07,680 --> 00:53:10,880
so in anonymous networks such as the

1349
00:53:10,880 --> 00:53:14,160
tower and the ripple anonymous osak is

1350
00:53:14,160 --> 00:53:16,799
required

1351
00:53:17,119 --> 00:53:20,319
if osak is represented with the figure

1352
00:53:20,319 --> 00:53:24,319
showed in showed in the page 1 osak is

1353
00:53:24,319 --> 00:53:27,200
removed the client's ssk since it

1354
00:53:27,200 --> 00:53:31,439
doesn't require client authentication

1355
00:53:32,319 --> 00:53:35,920
next i'll show the existing anonymous os

1356
00:53:35,920 --> 00:53:37,920
again schemes

1357
00:53:37,920 --> 00:53:42,240
the gsu-12 proposed a security model for

1358
00:53:42,240 --> 00:53:45,119
osage to be used in this study

1359
00:53:45,119 --> 00:53:48,960
and the big m12 and gk15 schemes are

1360
00:53:48,960 --> 00:53:50,880
guaranteed under weaker freshness

1361
00:53:50,880 --> 00:53:53,440
setting than the original one

1362
00:53:53,440 --> 00:53:55,680
and the gk15

1363
00:53:55,680 --> 00:53:58,640
consists of lattice ndh

1364
00:53:58,640 --> 00:54:00,880
so in some case

1365
00:54:00,880 --> 00:54:03,520
the schemes is not forced condom

1366
00:54:03,520 --> 00:54:05,599
so it is partially forced quantum

1367
00:54:05,599 --> 00:54:07,040
schemes

1368
00:54:07,040 --> 00:54:09,119
these schemes are approved in the random

1369
00:54:09,119 --> 00:54:11,839
oracle model

1370
00:54:12,640 --> 00:54:15,920
so as our contribution and we propose

1371
00:54:15,920 --> 00:54:17,839
generic constructions around the

1372
00:54:17,839 --> 00:54:20,160
standard model and wind the random

1373
00:54:20,160 --> 00:54:21,680
oracle model

1374
00:54:21,680 --> 00:54:24,559
the ones in the standard model can

1375
00:54:24,559 --> 00:54:27,119
consist of industrial security and

1376
00:54:27,119 --> 00:54:29,440
industry secure cam with public key

1377
00:54:29,440 --> 00:54:31,200
independent ciphertext

1378
00:54:31,200 --> 00:54:33,599
called the pkicam

1379
00:54:33,599 --> 00:54:36,000
while there are ones in the random

1380
00:54:36,000 --> 00:54:39,119
oracle module can consist of ow cca

1381
00:54:39,119 --> 00:54:41,520
secure cam and owl should be a secure

1382
00:54:41,520 --> 00:54:43,680
pks cam

1383
00:54:43,680 --> 00:54:46,319
and these constructions are guaranteed

1384
00:54:46,319 --> 00:54:50,640
under the original gsu model

1385
00:54:50,640 --> 00:54:52,799
in addition we proposed five

1386
00:54:52,799 --> 00:54:54,480
instantiations

1387
00:54:54,480 --> 00:54:58,079
in the dh based schemes the one in the

1388
00:54:58,079 --> 00:55:00,720
random oracle model is under the cdh

1389
00:55:00,720 --> 00:55:03,280
assumption and the one in the standard

1390
00:55:03,280 --> 00:55:06,160
model is the first anonymous osa case

1391
00:55:06,160 --> 00:55:07,280
games

1392
00:55:07,280 --> 00:55:08,960
these schemes are

1393
00:55:08,960 --> 00:55:11,359
smaller online computational cost of

1394
00:55:11,359 --> 00:55:13,200
current than

1395
00:55:13,200 --> 00:55:16,160
existing schemes

1396
00:55:16,319 --> 00:55:17,599
and

1397
00:55:17,599 --> 00:55:19,839
in the first quantum schemes the ones in

1398
00:55:19,839 --> 00:55:21,880
the random oracle module are

1399
00:55:21,880 --> 00:55:25,440
sidh-based and seaside-based schemes

1400
00:55:25,440 --> 00:55:27,760
and the one in the standard model is

1401
00:55:27,760 --> 00:55:31,200
only scissor-based skins about the first

1402
00:55:31,200 --> 00:55:35,040
post-quantum anonymous osaki scheme here

1403
00:55:35,040 --> 00:55:37,920
it is described as through repost condom

1404
00:55:37,920 --> 00:55:40,559
because existing schemes is not post

1405
00:55:40,559 --> 00:55:43,280
quantum under some leakage patterns

1406
00:55:43,280 --> 00:55:44,079
but

1407
00:55:44,079 --> 00:55:46,960
our schemes are post quantum and all

1408
00:55:46,960 --> 00:55:49,839
leakage patterns

1409
00:55:50,319 --> 00:55:53,839
next we will show you the flow that

1410
00:55:53,839 --> 00:55:56,079
constructs our skins

1411
00:55:56,079 --> 00:55:59,040
we constructed os osak based on the

1412
00:55:59,040 --> 00:56:04,000
generic construction of ak from fsx 515

1413
00:56:04,000 --> 00:56:05,119
first

1414
00:56:05,119 --> 00:56:08,319
since the fs xy15 scheme is a

1415
00:56:08,319 --> 00:56:11,680
mutual authentication so we removed the

1416
00:56:11,680 --> 00:56:14,640
ssk and static secret key on the current

1417
00:56:14,640 --> 00:56:17,839
site for osak

1418
00:56:17,839 --> 00:56:21,280
then for not considering client-side

1419
00:56:21,280 --> 00:56:24,720
review we applied our technique of

1420
00:56:24,720 --> 00:56:27,200
generating two different randomness from

1421
00:56:27,200 --> 00:56:28,960
one anonymous

1422
00:56:28,960 --> 00:56:32,079
to the current size

1423
00:56:32,160 --> 00:56:34,960
finally where we used pki game for

1424
00:56:34,960 --> 00:56:38,240
offline generation of apks

1425
00:56:38,240 --> 00:56:41,520
the pkc cam allows the ciphertext to be

1426
00:56:41,520 --> 00:56:44,079
generated independently and to the

1427
00:56:44,079 --> 00:56:45,280
public key

1428
00:56:45,280 --> 00:56:49,200
so we used pkh game instead of industry

1429
00:56:49,200 --> 00:56:51,760
gpa secure cam in this way we have

1430
00:56:51,760 --> 00:56:54,400
constructed an os ak

1431
00:56:54,400 --> 00:56:57,760
anonymous osak for details of the

1432
00:56:57,760 --> 00:57:00,079
construction and instantiation please

1433
00:57:00,079 --> 00:57:03,040
refer to the paper

1434
00:57:03,040 --> 00:57:05,440
the conclusion is as follows just say

1435
00:57:05,440 --> 00:57:08,160
from me and thank you for your attention

1436
00:57:08,160 --> 00:57:10,480
i'll do my best for listening your

1437
00:57:10,480 --> 00:57:11,440
question

1438
00:57:11,440 --> 00:57:13,839
thank you

1439
00:57:16,240 --> 00:57:20,400
okay uh thank you for your um

1440
00:57:20,400 --> 00:57:22,000
for your presentation

1441
00:57:22,000 --> 00:57:24,960
uh i can see uh there's a question for

1442
00:57:24,960 --> 00:57:27,280
you in the chat

1443
00:57:27,280 --> 00:57:29,920
and maybe i can i can read it out

1444
00:57:29,920 --> 00:57:32,640
uh can your generic construction cover

1445
00:57:32,640 --> 00:57:34,530
lattice-based schemes too

1446
00:57:34,530 --> 00:57:36,480
[Music]

1447
00:57:36,480 --> 00:57:38,400
and if not can you

1448
00:57:38,400 --> 00:57:41,040
can you briefly explain why

1449
00:57:41,040 --> 00:57:43,279
uh

1450
00:57:44,079 --> 00:57:46,640
okay okay

1451
00:57:46,799 --> 00:57:49,359
your question is

1452
00:57:49,359 --> 00:57:52,319
it is it difficult to construct other

1453
00:57:52,319 --> 00:57:54,720
post-content schemes

1454
00:57:54,720 --> 00:57:57,440
the question is can um is it possible to

1455
00:57:57,440 --> 00:57:59,359
use your generic

1456
00:57:59,359 --> 00:58:02,480
construction with uh lattice-based

1457
00:58:02,480 --> 00:58:04,480
schemes oh

1458
00:58:04,480 --> 00:58:05,440
oh

1459
00:58:05,440 --> 00:58:08,400
we use our pk icam and

1460
00:58:08,400 --> 00:58:11,920
four in the gps secure cam and in the

1461
00:58:11,920 --> 00:58:13,520
industry cam

1462
00:58:13,520 --> 00:58:15,280
so

1463
00:58:15,280 --> 00:58:16,160
we

1464
00:58:16,160 --> 00:58:20,839
our generic construction cover uh

1465
00:58:20,839 --> 00:58:25,440
also ready space schemes but however uh

1466
00:58:25,440 --> 00:58:29,599
we we need to we need pkc game and for

1467
00:58:29,599 --> 00:58:33,599
example dhbase schemes so we use sidh

1468
00:58:33,599 --> 00:58:36,880
based schemes and seaside base games

1469
00:58:36,880 --> 00:58:39,680
or in lottie space schemes i don't know

1470
00:58:39,680 --> 00:58:42,319
or i don't know gauge-based uh radical

1471
00:58:42,319 --> 00:58:43,839
space like this

1472
00:58:43,839 --> 00:58:45,920
and uh like this

1473
00:58:45,920 --> 00:58:47,680
uh

1474
00:58:47,680 --> 00:58:48,880
if if

1475
00:58:48,880 --> 00:58:51,760
if rather space schemes

1476
00:58:51,760 --> 00:58:53,680
is exist

1477
00:58:53,680 --> 00:58:57,040
on the dhbs

1478
00:58:57,839 --> 00:59:03,960
we can construct osaki however a

1479
00:59:06,079 --> 00:59:08,640
we use we don't use

1480
00:59:08,640 --> 00:59:12,319
um rapid space schemes uh

1481
00:59:12,319 --> 00:59:13,599
uh

1482
00:59:13,599 --> 00:59:15,760
for pks you can

1483
00:59:15,760 --> 00:59:20,319
we we can construct osaki

1484
00:59:20,319 --> 00:59:23,599
okay maybe uh yeah maybe uh

1485
00:59:23,599 --> 00:59:25,839
well uh if you like the chat you you

1486
00:59:25,839 --> 00:59:26,940
will discover

1487
00:59:26,940 --> 00:59:28,240
[Music]

1488
00:59:28,240 --> 00:59:30,160
that

1489
00:59:30,160 --> 00:59:32,880
the person asking uh says thank you but

1490
00:59:32,880 --> 00:59:35,040
maybe you can continue the discussion in

1491
00:59:35,040 --> 00:59:37,520
in the chat or maybe elsewhere

1492
00:59:37,520 --> 00:59:40,400
so um

1493
00:59:40,559 --> 00:59:42,240
yes

1494
00:59:42,240 --> 00:59:44,640
and i guess with that uh

1495
00:59:44,640 --> 00:59:47,920
i think we are going to conclude uh this

1496
00:59:47,920 --> 00:59:51,119
session uh and i would like to thank all

1497
00:59:51,119 --> 00:59:54,640
the speakers uh in in both sessions

1498
00:59:54,640 --> 00:59:56,400
and uh

1499
00:59:56,400 --> 00:59:58,480
from now on we are going to have a break

1500
00:59:58,480 --> 00:59:59,599
until

1501
00:59:59,599 --> 01:00:00,400
9

1502
01:00:00,400 --> 01:00:01,520
20

1503
01:00:01,520 --> 01:00:04,079
where the session on signatures will

1504
01:00:04,079 --> 01:00:05,119
start

1505
01:00:05,119 --> 01:00:06,799
so

1506
01:00:06,799 --> 01:00:10,160
yeah that's it

