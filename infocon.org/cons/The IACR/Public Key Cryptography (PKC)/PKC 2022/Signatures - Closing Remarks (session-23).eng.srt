1
00:00:00,160 --> 00:00:00,960
of

2
00:00:00,960 --> 00:00:03,120
pkc 2022

3
00:00:03,120 --> 00:00:04,400
um

4
00:00:04,400 --> 00:00:06,480
so we will be having six

5
00:00:06,480 --> 00:00:09,200
presenters in total and the no maybe

6
00:00:09,200 --> 00:00:11,440
seven and the first one is lattice space

7
00:00:11,440 --> 00:00:12,960
signatures with tight adaptive

8
00:00:12,960 --> 00:00:15,280
corruptions and more uh the authors are

9
00:00:15,280 --> 00:00:17,279
jashin pond and benedict wagner and i

10
00:00:17,279 --> 00:00:18,880
think benedict will be giving the talk

11
00:00:18,880 --> 00:00:21,439
um you could start any time

12
00:00:21,439 --> 00:00:25,119
yeah so can you see my slides now yeah

13
00:00:25,119 --> 00:00:27,279
okay yeah thanks for the introduction uh

14
00:00:27,279 --> 00:00:28,400
benedict

15
00:00:28,400 --> 00:00:30,800
and this is a joint worker with jsonpan

16
00:00:30,800 --> 00:00:32,399
and um

17
00:00:32,399 --> 00:00:33,440
this is

18
00:00:33,440 --> 00:00:35,280
on a high level about tightly secure

19
00:00:35,280 --> 00:00:38,000
signatures in the multi-user setting and

20
00:00:38,000 --> 00:00:40,719
from lattice-based assumptions

21
00:00:40,719 --> 00:00:43,840
okay so when we typically

22
00:00:43,840 --> 00:00:45,520
think about digital signatures and

23
00:00:45,520 --> 00:00:47,760
formalize their security we have a

24
00:00:47,760 --> 00:00:49,760
picture like this in mind

25
00:00:49,760 --> 00:00:52,239
where one user has a secret key

26
00:00:52,239 --> 00:00:53,120
and

27
00:00:53,120 --> 00:00:54,480
all the other users know the

28
00:00:54,480 --> 00:00:56,719
corresponding public key and also the

29
00:00:56,719 --> 00:00:58,480
adversary knows the public key and tries

30
00:00:58,480 --> 00:01:01,120
to forge some signatures

31
00:01:01,120 --> 00:01:03,440
and this is captured in the standard

32
00:01:03,440 --> 00:01:06,240
ufcma security game where we send a

33
00:01:06,240 --> 00:01:08,400
public key to the adversary and the

34
00:01:08,400 --> 00:01:10,880
adversary can ask for signatures

35
00:01:10,880 --> 00:01:13,600
and in the end it outputs a forgery and

36
00:01:13,600 --> 00:01:15,680
it wins this game if this is a fresh

37
00:01:15,680 --> 00:01:18,400
forgery and a valid message signature

38
00:01:18,400 --> 00:01:20,000
pair

39
00:01:20,000 --> 00:01:22,880
okay so this is standard and well known

40
00:01:22,880 --> 00:01:25,200
but if we look at it then we see this is

41
00:01:25,200 --> 00:01:27,439
not really what's happening in practice

42
00:01:27,439 --> 00:01:29,360
right because in practice you have a lot

43
00:01:29,360 --> 00:01:31,280
of different users and all of them have

44
00:01:31,280 --> 00:01:34,079
their secret keys and public keys

45
00:01:34,079 --> 00:01:37,119
and share the same system parameters

46
00:01:37,119 --> 00:01:39,360
and they communicate with each other and

47
00:01:39,360 --> 00:01:41,200
an adversary can be an

48
00:01:41,200 --> 00:01:44,159
outsider that observes the system or it

49
00:01:44,159 --> 00:01:46,320
can also be an insider that corrupts

50
00:01:46,320 --> 00:01:48,079
some of these users and learns their

51
00:01:48,079 --> 00:01:49,360
secret keys

52
00:01:49,360 --> 00:01:51,920
so let's try to model this as a security

53
00:01:51,920 --> 00:01:53,040
game

54
00:01:53,040 --> 00:01:56,560
so first we give n public keys to the

55
00:01:56,560 --> 00:01:58,640
adversary where n is the number of users

56
00:01:58,640 --> 00:02:00,079
in the system

57
00:02:00,079 --> 00:02:02,320
then the adversary can again ask for

58
00:02:02,320 --> 00:02:03,920
digital signatures

59
00:02:03,920 --> 00:02:05,920
for messages of its choice and now he

60
00:02:05,920 --> 00:02:08,160
also specifies which user should sign

61
00:02:08,160 --> 00:02:10,318
these messages

62
00:02:10,318 --> 00:02:11,360
and then

63
00:02:11,360 --> 00:02:13,520
the adversary can also ask for secret

64
00:02:13,520 --> 00:02:15,200
keys so this corresponds to the

65
00:02:15,200 --> 00:02:16,560
corruptions

66
00:02:16,560 --> 00:02:19,040
that i told you about

67
00:02:19,040 --> 00:02:22,239
in the end it outputs a forgery i star m

68
00:02:22,239 --> 00:02:25,120
sigma star and now it wins if this is a

69
00:02:25,120 --> 00:02:27,200
fresh message so it has never been

70
00:02:27,200 --> 00:02:28,160
signed

71
00:02:28,160 --> 00:02:30,480
the user is not corrupted

72
00:02:30,480 --> 00:02:32,720
so he never learned the secret key and

73
00:02:32,720 --> 00:02:34,720
this is a valid message signature pair

74
00:02:34,720 --> 00:02:37,120
for that user okay

75
00:02:37,120 --> 00:02:39,440
so this is a slightly more realistic

76
00:02:39,440 --> 00:02:41,360
notion so let's compare these two

77
00:02:41,360 --> 00:02:43,200
notions so we have the single user

78
00:02:43,200 --> 00:02:45,360
security on the left and multi-user

79
00:02:45,360 --> 00:02:47,440
security on the right

80
00:02:47,440 --> 00:02:50,400
so it's relatively easy to see that you

81
00:02:50,400 --> 00:02:52,800
can just take this public key and embed

82
00:02:52,800 --> 00:02:56,400
it in a random public key on the right

83
00:02:56,400 --> 00:02:58,239
and then you will show that

84
00:02:58,239 --> 00:03:00,560
asymptotically the single user security

85
00:03:00,560 --> 00:03:04,239
notion implies the multi-user notion and

86
00:03:04,239 --> 00:03:06,560
this is a guessing argument and

87
00:03:06,560 --> 00:03:09,360
it comes with a security loss of

88
00:03:09,360 --> 00:03:11,360
of n so it's proportional to the number

89
00:03:11,360 --> 00:03:13,760
of users in the system and this is

90
00:03:13,760 --> 00:03:15,280
bad if you want to choose your

91
00:03:15,280 --> 00:03:18,239
parameters in a theoretically sound way

92
00:03:18,239 --> 00:03:21,040
according to your security proof because

93
00:03:21,040 --> 00:03:23,120
let's say you have two to the 30 users

94
00:03:23,120 --> 00:03:25,840
in the system then you lose 30 bits of

95
00:03:25,840 --> 00:03:28,239
security and this will result in

96
00:03:28,239 --> 00:03:30,400
inefficient parameters

97
00:03:30,400 --> 00:03:31,440
so

98
00:03:31,440 --> 00:03:33,519
if we want to avoid this we need a tight

99
00:03:33,519 --> 00:03:36,080
reduction we say a reduction is tight if

100
00:03:36,080 --> 00:03:38,159
such a security loss that we have is a

101
00:03:38,159 --> 00:03:40,080
small constant and independent of what

102
00:03:40,080 --> 00:03:42,239
the adversary does

103
00:03:42,239 --> 00:03:43,920
so let's look at the state of the art

104
00:03:43,920 --> 00:03:46,879
for tightly secure signatures

105
00:03:46,879 --> 00:03:48,879
we can look at the classical assumption

106
00:03:48,879 --> 00:03:50,560
setting and the post quantum assumption

107
00:03:50,560 --> 00:03:53,280
setting and in the classical and post

108
00:03:53,280 --> 00:03:55,040
quantum assumption setting we already

109
00:03:55,040 --> 00:03:56,720
have tightly secure schemes in the

110
00:03:56,720 --> 00:03:59,439
single user setting but as i showed you

111
00:03:59,439 --> 00:04:01,920
this is not what we are interested in

112
00:04:01,920 --> 00:04:04,239
and in the multi-user setting we only

113
00:04:04,239 --> 00:04:06,319
have reasonably efficient

114
00:04:06,319 --> 00:04:09,599
schemes from classical assumptions

115
00:04:09,599 --> 00:04:12,319
and our work closes this gap

116
00:04:12,319 --> 00:04:13,680
on the right here

117
00:04:13,680 --> 00:04:16,000
so our goal was to design a signature

118
00:04:16,000 --> 00:04:18,320
scheme with tight multi-user security

119
00:04:18,320 --> 00:04:20,320
from post-quantum assumptions such as

120
00:04:20,320 --> 00:04:22,079
lattice-based assumptions

121
00:04:22,079 --> 00:04:23,520
and we also want to have some

122
00:04:23,520 --> 00:04:26,000
compactness guarantee so

123
00:04:26,000 --> 00:04:28,479
for example for lattices we want that

124
00:04:28,479 --> 00:04:30,560
our signature only contains a constant

125
00:04:30,560 --> 00:04:33,840
number of lattice vectors

126
00:04:33,840 --> 00:04:35,919
okay so let me just briefly sketch why

127
00:04:35,919 --> 00:04:37,759
this is not trivial

128
00:04:37,759 --> 00:04:39,840
so the problem is that

129
00:04:39,840 --> 00:04:42,160
if you want to have a tight reduction

130
00:04:42,160 --> 00:04:44,000
then your reduction should know all the

131
00:04:44,000 --> 00:04:46,639
secret keys because it has to answer all

132
00:04:46,639 --> 00:04:48,720
the corruption queries

133
00:04:48,720 --> 00:04:50,080
and

134
00:04:50,080 --> 00:04:51,759
if you know all the secret keys then you

135
00:04:51,759 --> 00:04:53,280
can just forge without using the

136
00:04:53,280 --> 00:04:54,639
adversary

137
00:04:54,639 --> 00:04:56,240
and therefore your underlying problem

138
00:04:56,240 --> 00:04:59,600
cannot be hard so this is the high level

139
00:04:59,600 --> 00:05:01,600
high level uh problem that we have to

140
00:05:01,600 --> 00:05:04,240
solve we solve it using non-unique

141
00:05:04,240 --> 00:05:06,639
secret keys essentially

142
00:05:06,639 --> 00:05:08,560
so we give a generic framework that

143
00:05:08,560 --> 00:05:11,600
transforms dual mode commitment scheme

144
00:05:11,600 --> 00:05:14,080
into a signature scheme that we want

145
00:05:14,080 --> 00:05:16,880
using sequential or proofs

146
00:05:16,880 --> 00:05:19,680
and this is actually a generalization of

147
00:05:19,680 --> 00:05:23,440
last year's pkc work by deemed at all

148
00:05:23,440 --> 00:05:26,800
and it allows us to instantiate it from

149
00:05:26,800 --> 00:05:29,919
uh post quantum assumptions such as lwe

150
00:05:29,919 --> 00:05:33,360
and the group action based assumption

151
00:05:33,360 --> 00:05:35,759
so as we use sequential or proofs we

152
00:05:35,759 --> 00:05:38,080
also thought well can you do the same

153
00:05:38,080 --> 00:05:40,240
thing with parallel or proofs and we

154
00:05:40,240 --> 00:05:41,039
show

155
00:05:41,039 --> 00:05:43,680
that you cannot do it so this is a gap

156
00:05:43,680 --> 00:05:47,520
between sequential and parallel proofs

157
00:05:47,520 --> 00:05:48,560
okay

158
00:05:48,560 --> 00:05:50,800
so

159
00:05:51,039 --> 00:05:54,400
let me conclude with some open problems

160
00:05:54,400 --> 00:05:57,120
so what we show is a tightly secure

161
00:05:57,120 --> 00:05:58,639
signature scheme in the multi-user

162
00:05:58,639 --> 00:06:01,280
setting from plain lwe

163
00:06:01,280 --> 00:06:03,440
so what about different assumptions so

164
00:06:03,440 --> 00:06:05,680
let's say you want a search assumption

165
00:06:05,680 --> 00:06:07,520
sis or you want to have structured

166
00:06:07,520 --> 00:06:09,440
lattice assumptions this will give you a

167
00:06:09,440 --> 00:06:11,600
more efficient scheme

168
00:06:11,600 --> 00:06:12,720
but

169
00:06:12,720 --> 00:06:14,319
our approach does not work for these

170
00:06:14,319 --> 00:06:15,520
assumptions

171
00:06:15,520 --> 00:06:17,680
and also our approach is

172
00:06:17,680 --> 00:06:19,600
in the random oracle model

173
00:06:19,600 --> 00:06:20,400
so

174
00:06:20,400 --> 00:06:23,280
typically you would desire a quantum

175
00:06:23,280 --> 00:06:26,880
random oracle model or standard model

176
00:06:26,880 --> 00:06:30,319
so yeah that that's it from my site so

177
00:06:30,319 --> 00:06:32,479
if you're interested in this in this

178
00:06:32,479 --> 00:06:35,039
work you can look in the in the paper

179
00:06:35,039 --> 00:06:38,720
which is on e-print or also at the

180
00:06:38,720 --> 00:06:40,720
long presentation which gives you more

181
00:06:40,720 --> 00:06:42,080
details

182
00:06:42,080 --> 00:06:45,120
okay yeah thank you

183
00:06:45,120 --> 00:06:47,360
thank you for the talk um are there any

184
00:06:47,360 --> 00:06:50,080
questions so people can uh ask questions

185
00:06:50,080 --> 00:06:52,800
either on chant raise their hands or on

186
00:06:52,800 --> 00:06:54,080
zulu

187
00:06:54,080 --> 00:06:56,160
um

188
00:06:56,160 --> 00:06:59,440
so far i don't see any questions so

189
00:06:59,440 --> 00:07:01,680
maybe i could start off the

190
00:07:01,680 --> 00:07:03,440
question then uh

191
00:07:03,440 --> 00:07:05,520
i guess one of the simpler question is

192
00:07:05,520 --> 00:07:08,639
uh why is your solution limited to

193
00:07:08,639 --> 00:07:10,800
structural lattices like what's the

194
00:07:10,800 --> 00:07:12,240
barrier there

195
00:07:12,240 --> 00:07:14,400
oh okay so it's it's actually the other

196
00:07:14,400 --> 00:07:16,639
way around so we cannot achieve it from

197
00:07:16,639 --> 00:07:18,400
structured assumptions and we can

198
00:07:18,400 --> 00:07:20,800
achieve it from plane ld

199
00:07:20,800 --> 00:07:23,280
so the thing is that what we have to

200
00:07:23,280 --> 00:07:25,360
construct on the way is a lossy

201
00:07:25,360 --> 00:07:27,599
identification scheme with some

202
00:07:27,599 --> 00:07:28,960
multi-key

203
00:07:28,960 --> 00:07:31,919
indistinguishability in a tight way

204
00:07:31,919 --> 00:07:33,039
and

205
00:07:33,039 --> 00:07:35,440
we know how to do a lossy identification

206
00:07:35,440 --> 00:07:37,919
scheme from structured assumptions but

207
00:07:37,919 --> 00:07:40,000
we don't know how to do it in a tight

208
00:07:40,000 --> 00:07:42,400
way for many keys

209
00:07:42,400 --> 00:07:43,919
at the same time right because you have

210
00:07:43,919 --> 00:07:45,440
many users you need

211
00:07:45,440 --> 00:07:48,000
to have this lossy identification

212
00:07:48,000 --> 00:07:49,840
scheme for many keys

213
00:07:49,840 --> 00:07:51,440
and uh

214
00:07:51,440 --> 00:07:52,560
our

215
00:07:52,560 --> 00:07:56,080
technical contribution is maybe or maybe

216
00:07:56,080 --> 00:07:58,080
the main technical contribution is to

217
00:07:58,080 --> 00:07:59,120
have this

218
00:07:59,120 --> 00:08:01,120
lossy identification scheme from plain

219
00:08:01,120 --> 00:08:02,479
lwe

220
00:08:02,479 --> 00:08:05,360
in a tight multi-key way so it's the

221
00:08:05,360 --> 00:08:06,720
first

222
00:08:06,720 --> 00:08:08,960
it's the first lossy identification from

223
00:08:08,960 --> 00:08:12,160
plain lwe that we construct

224
00:08:12,160 --> 00:08:14,720
and and the problem is that we cannot do

225
00:08:14,720 --> 00:08:18,400
it from a ring lwe

226
00:08:18,479 --> 00:08:20,080
so in the single user setting you can

227
00:08:20,080 --> 00:08:21,919
construct a lossy id but in the

228
00:08:21,919 --> 00:08:23,759
multi-user setting it's not clear how to

229
00:08:23,759 --> 00:08:26,319
do it in a tight way

230
00:08:26,319 --> 00:08:27,759
okay thank you

231
00:08:27,759 --> 00:08:28,800
um

232
00:08:28,800 --> 00:08:31,680
are there any other questions because if

233
00:08:31,680 --> 00:08:34,399
not uh i i did have one other question

234
00:08:34,399 --> 00:08:35,599
and um

235
00:08:35,599 --> 00:08:37,599
that was a you said your scheme achieves

236
00:08:37,599 --> 00:08:39,440
compact signature with

237
00:08:39,440 --> 00:08:41,599
constant elements of the vector like uh

238
00:08:41,599 --> 00:08:43,360
did you actually put some concrete

239
00:08:43,360 --> 00:08:46,320
numbers on that or is it uh asymptotic

240
00:08:46,320 --> 00:08:47,519
right now

241
00:08:47,519 --> 00:08:50,480
uh no so so uh yeah so this is a

242
00:08:50,480 --> 00:08:52,720
limitation of our result it's basically

243
00:08:52,720 --> 00:08:55,279
only an asymptotic efficiency

244
00:08:55,279 --> 00:08:56,720
improvement so

245
00:08:56,720 --> 00:08:58,480
i mean this is related to your first

246
00:08:58,480 --> 00:09:01,200
question right so if you compare

247
00:09:01,200 --> 00:09:03,120
concrete

248
00:09:03,120 --> 00:09:04,640
numbers with

249
00:09:04,640 --> 00:09:06,880
with

250
00:09:06,880 --> 00:09:09,279
let's say the lithium or other optimized

251
00:09:09,279 --> 00:09:10,399
schemes

252
00:09:10,399 --> 00:09:12,720
it's not clear that our scheme will be

253
00:09:12,720 --> 00:09:14,640
more efficient but it's the first step

254
00:09:14,640 --> 00:09:16,720
on the way of having

255
00:09:16,720 --> 00:09:18,160
um

256
00:09:18,160 --> 00:09:20,720
having this and of course the the most

257
00:09:20,720 --> 00:09:23,120
desirable of these open problems to

258
00:09:23,120 --> 00:09:24,720
transfer it to a

259
00:09:24,720 --> 00:09:27,360
optimized ring setting and then

260
00:09:27,360 --> 00:09:29,360
you could compare it with the other

261
00:09:29,360 --> 00:09:32,320
schemes so we don't have any concrete

262
00:09:32,320 --> 00:09:35,040
sizes in bytes or something like that

263
00:09:35,040 --> 00:09:37,519
okay uh great uh thank you for the talk

264
00:09:37,519 --> 00:09:38,399
uh

265
00:09:38,399 --> 00:09:41,279
if there are no other questions maybe we

266
00:09:41,279 --> 00:09:44,720
can move on to the next speaker

267
00:09:46,160 --> 00:09:48,800
so the next talk is count me and

268
00:09:48,800 --> 00:09:50,720
extendability for threshold ring

269
00:09:50,720 --> 00:09:52,880
signatures and the authors are diego

270
00:09:52,880 --> 00:09:55,920
arana anka nicholescu

271
00:09:55,920 --> 00:09:58,560
mathias hal anderson elena pagnin sophia

272
00:09:58,560 --> 00:10:00,800
yakubov and elena will be giving the

273
00:10:00,800 --> 00:10:02,240
talk

274
00:10:02,240 --> 00:10:05,680
yes thank you for the introduction

275
00:10:05,680 --> 00:10:07,920
let's see

276
00:10:07,920 --> 00:10:10,399
is this working

277
00:10:10,399 --> 00:10:11,519
yes it is

278
00:10:11,519 --> 00:10:14,320
perfect okay so here we are presenting

279
00:10:14,320 --> 00:10:15,760
this wonderful work

280
00:10:15,760 --> 00:10:17,920
what's this work about well i guess

281
00:10:17,920 --> 00:10:19,920
everybody now is aware with about

282
00:10:19,920 --> 00:10:23,600
digital signature schemes we have a

283
00:10:23,600 --> 00:10:25,680
set up key generation signing and

284
00:10:25,680 --> 00:10:27,440
verifying and for the purpose of this

285
00:10:27,440 --> 00:10:29,040
talk i will represent public keys with

286
00:10:29,040 --> 00:10:30,880
these circles here

287
00:10:30,880 --> 00:10:32,399
in the standard case we have one message

288
00:10:32,399 --> 00:10:35,040
and one signature

289
00:10:35,040 --> 00:10:36,800
and the signature is connected to just

290
00:10:36,800 --> 00:10:39,200
one public key

291
00:10:39,200 --> 00:10:41,600
then we have

292
00:10:41,600 --> 00:10:43,920
ring signatures which have essentially

293
00:10:43,920 --> 00:10:46,560
the same kind of algorithms but

294
00:10:46,560 --> 00:10:48,959
the signing algorithm takes an input

295
00:10:48,959 --> 00:10:51,360
a ring of n potentials public key and we

296
00:10:51,360 --> 00:10:52,720
only know that one of these keys

297
00:10:52,720 --> 00:10:54,880
assigned a message but i don't know who

298
00:10:54,880 --> 00:10:56,560
has signed this message

299
00:10:56,560 --> 00:10:58,800
and an extension of this

300
00:10:58,800 --> 00:10:59,920
and these are used for instance in

301
00:10:59,920 --> 00:11:03,279
bitcoin or in whistleblowing cases to

302
00:11:03,279 --> 00:11:05,920
show okay there is one person uh

303
00:11:05,920 --> 00:11:07,680
in this institution or among these

304
00:11:07,680 --> 00:11:11,120
people uh that is endorsing a message an

305
00:11:11,120 --> 00:11:12,560
extension of ring signature is

306
00:11:12,560 --> 00:11:15,440
threshering signatures uh where instead

307
00:11:15,440 --> 00:11:17,120
of having just one potential designer we

308
00:11:17,120 --> 00:11:19,440
have t put as potential signer inside

309
00:11:19,440 --> 00:11:21,440
this ring of n signers

310
00:11:21,440 --> 00:11:23,360
and what we do in this work is create

311
00:11:23,360 --> 00:11:25,839
yet another extension of this because

312
00:11:25,839 --> 00:11:27,440
well there are a couple of drawbacks

313
00:11:27,440 --> 00:11:28,560
with the start with the existing

314
00:11:28,560 --> 00:11:30,560
signatures threshold ring signature

315
00:11:30,560 --> 00:11:33,040
schemes the first one is that they

316
00:11:33,040 --> 00:11:35,440
require interaction among signers

317
00:11:35,440 --> 00:11:37,120
or if they don't require interaction on

318
00:11:37,120 --> 00:11:38,399
signers then there needs to be an

319
00:11:38,399 --> 00:11:40,800
agreement at least among the signers on

320
00:11:40,800 --> 00:11:42,959
which ring of public key to use

321
00:11:42,959 --> 00:11:44,560
so implicitly there must be some

322
00:11:44,560 --> 00:11:46,640
interaction and we don't like that

323
00:11:46,640 --> 00:11:48,720
so the way to avoid this is basically by

324
00:11:48,720 --> 00:11:51,519
constructing an extendable threshold

325
00:11:51,519 --> 00:11:53,519
ring signature scheme which would be

326
00:11:53,519 --> 00:11:56,480
useful in context such me to count me

327
00:11:56,480 --> 00:11:58,240
and i endorse this i joined the

328
00:11:58,240 --> 00:12:00,000
kickstarter afterwards

329
00:12:00,000 --> 00:12:02,639
um intuitively i have like

330
00:12:02,639 --> 00:12:04,800
t autobahn designers from a threshold

331
00:12:04,800 --> 00:12:06,320
signature scheme and i want to be able

332
00:12:06,320 --> 00:12:08,160
to extend this signature

333
00:12:08,160 --> 00:12:11,279
to a number of t out of n prime signers

334
00:12:11,279 --> 00:12:14,399
so i want to extend my anonymity set

335
00:12:14,399 --> 00:12:16,320
and then potentially join a clause that

336
00:12:16,320 --> 00:12:18,160
someone else has started by increasing

337
00:12:18,160 --> 00:12:20,399
the threshold side by one

338
00:12:20,399 --> 00:12:22,480
so this is the overall idea of

339
00:12:22,480 --> 00:12:25,040
what we

340
00:12:25,040 --> 00:12:26,800
create

341
00:12:26,800 --> 00:12:27,920
and

342
00:12:27,920 --> 00:12:30,000
what we achieve is that we can have a

343
00:12:30,000 --> 00:12:33,120
dynamic way in which the ring can grow

344
00:12:33,120 --> 00:12:35,360
and there is no need of interaction

345
00:12:35,360 --> 00:12:36,880
among signers so

346
00:12:36,880 --> 00:12:38,480
we are happy

347
00:12:38,480 --> 00:12:40,880
so to summarize our contributions uh we

348
00:12:40,880 --> 00:12:42,480
have extendability

349
00:12:42,480 --> 00:12:44,399
which means a largely set up attention

350
00:12:44,399 --> 00:12:46,480
of a given signature and we do this not

351
00:12:46,480 --> 00:12:48,320
just for threshold ring signatures which

352
00:12:48,320 --> 00:12:50,639
is the main selling point but also for

353
00:12:50,639 --> 00:12:52,800
same message links linkable ring

354
00:12:52,800 --> 00:12:53,920
signatures

355
00:12:53,920 --> 00:12:56,639
and the standard during signatures

356
00:12:56,639 --> 00:12:58,880
uh we of course introduce syntax and

357
00:12:58,880 --> 00:13:01,360
security models and we have basically as

358
00:13:01,360 --> 00:13:02,959
many construction as

359
00:13:02,959 --> 00:13:04,880
authors and the implementation of the

360
00:13:04,880 --> 00:13:06,720
most efficient constructions

361
00:13:06,720 --> 00:13:09,680
uh concretely represents a

362
00:13:09,680 --> 00:13:11,040
way to construct sustainable ring

363
00:13:11,040 --> 00:13:13,200
signature from signature of knowledge in

364
00:13:13,200 --> 00:13:15,760
a black box way and then

365
00:13:15,760 --> 00:13:18,240
compiler generic transformation from

366
00:13:18,240 --> 00:13:20,320
same message linkable extendable ring

367
00:13:20,320 --> 00:13:21,440
signature

368
00:13:21,440 --> 00:13:23,200
uh we can generate extended ring

369
00:13:23,200 --> 00:13:25,279
signature using an additional assumption

370
00:13:25,279 --> 00:13:27,120
which is signature of knowledge and then

371
00:13:27,120 --> 00:13:29,360
we can build the extendable threshold

372
00:13:29,360 --> 00:13:31,519
ring signature again in a black box way

373
00:13:31,519 --> 00:13:33,839
from some match such a linkable external

374
00:13:33,839 --> 00:13:35,600
ring signature and the description of

375
00:13:35,600 --> 00:13:36,720
consumption

376
00:13:36,720 --> 00:13:39,760
two different constructions

377
00:13:40,000 --> 00:13:41,519
i guess that's my quick summary i want

378
00:13:41,519 --> 00:13:43,920
to go to that

379
00:13:43,920 --> 00:13:45,600
good questions

380
00:13:45,600 --> 00:13:48,399
uh thank you for the talk we have uh

381
00:13:48,399 --> 00:13:50,880
quite a few time to uh

382
00:13:50,880 --> 00:13:54,240
receive questions um good

383
00:13:54,240 --> 00:13:57,839
so if anybody has any um

384
00:13:57,839 --> 00:14:00,720
no uh in the meanwhile i guess i have uh

385
00:14:00,720 --> 00:14:02,800
this is a nice question but can you uh

386
00:14:02,800 --> 00:14:05,519
bring up the first line that you had

387
00:14:05,519 --> 00:14:09,839
the the first slide um yes

388
00:14:09,839 --> 00:14:11,519
or maybe the second one

389
00:14:11,519 --> 00:14:13,279
maybe the second one i guess

390
00:14:13,279 --> 00:14:15,360
yeah i guess you want the end of this so

391
00:14:15,360 --> 00:14:16,560
yeah

392
00:14:16,560 --> 00:14:18,480
yeah something like here

393
00:14:18,480 --> 00:14:19,600
getting there

394
00:14:19,600 --> 00:14:20,720
yeah this sounds like a really

395
00:14:20,720 --> 00:14:23,600
interesting uh extension to these

396
00:14:23,600 --> 00:14:25,440
uh standard ring signatures and one

397
00:14:25,440 --> 00:14:27,760
question was when you use this like

398
00:14:27,760 --> 00:14:30,880
extend function on standard signatures

399
00:14:30,880 --> 00:14:32,480
what's the difference between just

400
00:14:32,480 --> 00:14:34,000
signing

401
00:14:34,000 --> 00:14:35,199
with this

402
00:14:35,199 --> 00:14:39,199
new and prime ring like it's more

403
00:14:39,199 --> 00:14:40,959
efficient yes

404
00:14:40,959 --> 00:14:42,560
yeah well um

405
00:14:42,560 --> 00:14:44,880
if i sign um

406
00:14:44,880 --> 00:14:46,320
so first of all there needs to be not

407
00:14:46,320 --> 00:14:47,680
exactly any interaction but i need to

408
00:14:47,680 --> 00:14:49,760
see let's say your ring signature

409
00:14:49,760 --> 00:14:51,040
and then

410
00:14:51,040 --> 00:14:53,040
i cannot just join that ring signature i

411
00:14:53,040 --> 00:14:54,880
cannot add my secret key to endorse the

412
00:14:54,880 --> 00:14:57,040
extension on the other hand would

413
00:14:57,040 --> 00:14:59,120
require designer to sign for a bigger

414
00:14:59,120 --> 00:15:00,959
ring so it cannot be done publicly with

415
00:15:00,959 --> 00:15:03,279
existing constructions

416
00:15:03,279 --> 00:15:05,920
right ah okay so when you run so

417
00:15:05,920 --> 00:15:07,680
the extension is done publicly i'm just

418
00:15:07,680 --> 00:15:09,839
throwing in more potential signers but

419
00:15:09,839 --> 00:15:11,360
because i don't have their secret keys

420
00:15:11,360 --> 00:15:13,279
they are just you know augmenting the

421
00:15:13,279 --> 00:15:15,199
anonymity set it's only with the join

422
00:15:15,199 --> 00:15:16,320
that i

423
00:15:16,320 --> 00:15:18,079
place in my secret key

424
00:15:18,079 --> 00:15:19,600
i see

425
00:15:19,600 --> 00:15:20,880
so

426
00:15:20,880 --> 00:15:23,199
um when you have a ring signature and

427
00:15:23,199 --> 00:15:25,120
you mentioned that

428
00:15:25,120 --> 00:15:27,360
um okay yeah right i under i understand

429
00:15:27,360 --> 00:15:28,240
now

430
00:15:28,240 --> 00:15:29,440
yeah

431
00:15:29,440 --> 00:15:31,360
uh when you yeah good point like because

432
00:15:31,360 --> 00:15:33,040
it looks like come on i can always throw

433
00:15:33,040 --> 00:15:34,480
in public things like no i'm not with

434
00:15:34,480 --> 00:15:36,480
the ring signature because like you're

435
00:15:36,480 --> 00:15:39,519
then basically forging because then the

436
00:15:39,519 --> 00:15:41,440
you're changing what the original signer

437
00:15:41,440 --> 00:15:42,399
signed

438
00:15:42,399 --> 00:15:43,600
so

439
00:15:43,600 --> 00:15:45,199
we need a new security model to handle

440
00:15:45,199 --> 00:15:46,880
this and we need a different notion of

441
00:15:46,880 --> 00:15:49,040
anonymity according to how you extend

442
00:15:49,040 --> 00:15:51,600
the join join join extend like

443
00:15:51,600 --> 00:15:55,600
how you play with this job operations

444
00:15:55,600 --> 00:15:57,199
when you run this extend and join

445
00:15:57,199 --> 00:16:00,079
algorithm do you need any uh public key

446
00:16:00,079 --> 00:16:02,079
information or is it just a message and

447
00:16:02,079 --> 00:16:03,920
the signature

448
00:16:03,920 --> 00:16:06,480
uh so for the extender it's a message

449
00:16:06,480 --> 00:16:08,639
initial signature and the public keys

450
00:16:08,639 --> 00:16:11,920
that you want to include

451
00:16:11,920 --> 00:16:12,880
and

452
00:16:12,880 --> 00:16:14,720
for the join you need your secret key

453
00:16:14,720 --> 00:16:16,079
and the existing message and this

454
00:16:16,079 --> 00:16:17,440
existing signature and then you will

455
00:16:17,440 --> 00:16:19,279
create a new signature

456
00:16:19,279 --> 00:16:21,199
so you don't need the previous like ring

457
00:16:21,199 --> 00:16:23,120
members public key to

458
00:16:23,120 --> 00:16:25,440
invoke well that that's kind of included

459
00:16:25,440 --> 00:16:26,639
in the signature because it's an

460
00:16:26,639 --> 00:16:27,759
information that you need to have in

461
00:16:27,759 --> 00:16:32,560
order to verify so it's uh yeah okay

462
00:16:34,160 --> 00:16:35,199
but like

463
00:16:35,199 --> 00:16:36,959
in some of our construction you wouldn't

464
00:16:36,959 --> 00:16:39,519
need to read those keys you can just

465
00:16:39,519 --> 00:16:41,600
perform an operation without

466
00:16:41,600 --> 00:16:44,160
reading all of the other public keys

467
00:16:44,160 --> 00:16:46,959
okay i see so there's one question on

468
00:16:46,959 --> 00:16:49,839
chat maybe i can read it

469
00:16:49,839 --> 00:16:52,320
it's from chelsea and uh i missed the

470
00:16:52,320 --> 00:16:54,560
first part of the talk so might have

471
00:16:54,560 --> 00:16:56,959
missed it but wait um

472
00:16:56,959 --> 00:16:59,199
but do extended signatures look the same

473
00:16:59,199 --> 00:17:01,680
as non-extended signatures or does this

474
00:17:01,680 --> 00:17:04,640
become a privacy leak over time that's

475
00:17:04,640 --> 00:17:08,480
uh if they provide um

476
00:17:08,480 --> 00:17:11,439
anonymous extendability so we model this

477
00:17:11,439 --> 00:17:13,039
notion of anonymous sustainability so

478
00:17:13,039 --> 00:17:15,359
you cannot track

479
00:17:15,359 --> 00:17:17,199
let's call ladder the sequence of

480
00:17:17,199 --> 00:17:18,720
extending jaw and join an extent that

481
00:17:18,720 --> 00:17:20,720
you do you cannot distinguish

482
00:17:20,720 --> 00:17:23,439
how you have performed these

483
00:17:23,439 --> 00:17:25,520
operations so

484
00:17:25,520 --> 00:17:27,839
if the if the signature scheme satisfies

485
00:17:27,839 --> 00:17:29,600
the stronger notions then you cannot

486
00:17:29,600 --> 00:17:32,720
distinguish a fresh signature of our big

487
00:17:32,720 --> 00:17:36,880
ring from one that has been extended

488
00:17:36,880 --> 00:17:37,919
okay

489
00:17:37,919 --> 00:17:39,120
okay

490
00:17:39,120 --> 00:17:40,720
that answered the question

491
00:17:40,720 --> 00:17:42,640
so

492
00:17:42,640 --> 00:17:45,280
we have a few more minutes left but i

493
00:17:45,280 --> 00:17:46,960
guess like one last one that i just

494
00:17:46,960 --> 00:17:48,480
wanted to recap on so what kind of

495
00:17:48,480 --> 00:17:50,960
assumptions can you use to build this

496
00:17:50,960 --> 00:17:52,880
uh new perimeter yeah

497
00:17:52,880 --> 00:17:56,320
okay so uh we can build them from

498
00:17:56,320 --> 00:17:58,960
extendable threshold signature discrete

499
00:17:58,960 --> 00:18:01,760
log and public key encryption

500
00:18:01,760 --> 00:18:04,160
uh we can build them in a black box way

501
00:18:04,160 --> 00:18:06,720
from same message linkable extendable

502
00:18:06,720 --> 00:18:08,320
ring signature

503
00:18:08,320 --> 00:18:09,760
and uh

504
00:18:09,760 --> 00:18:11,600
signature of knowledge so basically

505
00:18:11,600 --> 00:18:13,280
signature of knowledge is the smallest

506
00:18:13,280 --> 00:18:15,039
one and then from that you can build up

507
00:18:15,039 --> 00:18:17,360
adding simple things like public key

508
00:18:17,360 --> 00:18:19,200
encryption and log

509
00:18:19,200 --> 00:18:21,360
we also have a construction uh on a

510
00:18:21,360 --> 00:18:22,960
group on unknown order but we didn't

511
00:18:22,960 --> 00:18:24,480
include in the paper so

512
00:18:24,480 --> 00:18:28,760
maybe we'll pop up in a few months

513
00:18:29,440 --> 00:18:30,880
yeah

514
00:18:30,880 --> 00:18:32,880
um good so

515
00:18:32,880 --> 00:18:34,640
i think um

516
00:18:34,640 --> 00:18:36,240
yeah we can move on to the next uh talk

517
00:18:36,240 --> 00:18:37,760
then yeah i think for any more questions

518
00:18:37,760 --> 00:18:39,600
just drop me an email i'm happy to reply

519
00:18:39,600 --> 00:18:42,840
when i'm awake

520
00:18:43,520 --> 00:18:46,160
so the next talk is the title is a note

521
00:18:46,160 --> 00:18:48,000
on the post quantum security of ring

522
00:18:48,000 --> 00:18:49,039
signatures

523
00:18:49,039 --> 00:18:51,200
and the authors are rohit chitaraji

524
00:18:51,200 --> 00:18:54,880
kaimen chung jiao lang and gilio malbota

525
00:18:54,880 --> 00:18:55,679
and

526
00:18:55,679 --> 00:18:56,880
i

527
00:18:56,880 --> 00:18:57,600
yeah

528
00:18:57,600 --> 00:19:00,799
wait who is going to be giving this talk

529
00:19:00,799 --> 00:19:03,679
sorry oh sorry yeah go ahead go ahead

530
00:19:03,679 --> 00:19:06,320
sure uh

531
00:19:06,320 --> 00:19:08,840
oh one second can you see my

532
00:19:08,840 --> 00:19:11,360
screen yes

533
00:19:11,360 --> 00:19:12,799
all right let's roll

534
00:19:12,799 --> 00:19:14,640
hi uh i'm going to be talking about the

535
00:19:14,640 --> 00:19:16,559
post quantum security of signatures and

536
00:19:16,559 --> 00:19:18,400
ring signatures this is joint work with

537
00:19:18,400 --> 00:19:21,440
caiman chung jali and julia malavolta

538
00:19:21,440 --> 00:19:22,240
uh

539
00:19:22,240 --> 00:19:24,320
we'll start with this post quantum

540
00:19:24,320 --> 00:19:26,400
security of standard signatures and

541
00:19:26,400 --> 00:19:27,840
standard signatures usually means

542
00:19:27,840 --> 00:19:29,360
unforgivability so let's start with

543
00:19:29,360 --> 00:19:31,120
classical enforceability

544
00:19:31,120 --> 00:19:32,400
you have an adversary talking to a

545
00:19:32,400 --> 00:19:33,679
challenger that gives it a signing

546
00:19:33,679 --> 00:19:35,520
article meaning it receives signatures

547
00:19:35,520 --> 00:19:37,600
and messages of its choice

548
00:19:37,600 --> 00:19:39,039
and

549
00:19:39,039 --> 00:19:41,280
eventually it produces a forgery on the

550
00:19:41,280 --> 00:19:42,960
particular challenge message and this

551
00:19:42,960 --> 00:19:44,480
definition works as long as the

552
00:19:44,480 --> 00:19:45,919
challenge message is not queried

553
00:19:45,919 --> 00:19:47,840
beforehand

554
00:19:47,840 --> 00:19:49,360
if the address is a quantum machine

555
00:19:49,360 --> 00:19:50,960
however it can make quantum signing

556
00:19:50,960 --> 00:19:53,280
queries then this changes because the

557
00:19:53,280 --> 00:19:55,280
challenger also has to put out states

558
00:19:55,280 --> 00:19:57,440
over signatures and it quickly becomes

559
00:19:57,440 --> 00:19:59,520
clear that we cannot define query error

560
00:19:59,520 --> 00:20:02,000
messages cleanly because the adversary's

561
00:20:02,000 --> 00:20:03,679
queries can be superpositions over the

562
00:20:03,679 --> 00:20:06,480
entire message space which means that we

563
00:20:06,480 --> 00:20:08,159
cannot cleanly define what messages are

564
00:20:08,159 --> 00:20:10,320
not seen by the adversary

565
00:20:10,320 --> 00:20:12,799
and so unfortunately also becomes tricky

566
00:20:12,799 --> 00:20:14,559
to define

567
00:20:14,559 --> 00:20:17,520
so we have to look at other more nuanced

568
00:20:17,520 --> 00:20:19,520
definitions in this quantum setting and

569
00:20:19,520 --> 00:20:21,200
the definition we look at is called

570
00:20:21,200 --> 00:20:23,600
blind unforge ability it was introduced

571
00:20:23,600 --> 00:20:26,400
in the work of alike and others in 2020

572
00:20:26,400 --> 00:20:28,400
and this has the adversary again talking

573
00:20:28,400 --> 00:20:29,919
to the signing oracle over some message

574
00:20:29,919 --> 00:20:31,840
space and what happens here is the

575
00:20:31,840 --> 00:20:34,400
adversary submit superpositions and get

576
00:20:34,400 --> 00:20:36,240
back signatures just as before but now

577
00:20:36,240 --> 00:20:38,400
the catch is the signing oracle has this

578
00:20:38,400 --> 00:20:40,960
blind set which is of weight epsilon and

579
00:20:40,960 --> 00:20:43,360
chosen uniformly from messages

580
00:20:43,360 --> 00:20:45,760
and it does

581
00:20:45,760 --> 00:20:47,200
what it does is it does not sign

582
00:20:47,200 --> 00:20:48,720
messages over the blind side meaning if

583
00:20:48,720 --> 00:20:49,840
the adversary has a certain

584
00:20:49,840 --> 00:20:51,440
superposition

585
00:20:51,440 --> 00:20:53,039
that includes members in the blindside

586
00:20:53,039 --> 00:20:55,039
then the oracle just simply does not

587
00:20:55,039 --> 00:20:57,520
return signatures over there

588
00:20:57,520 --> 00:20:59,039
eventually the adversary has to put out

589
00:20:59,039 --> 00:21:01,280
a forgery and now we also expect that

590
00:21:01,280 --> 00:21:03,840
apart from being a valid signature the

591
00:21:03,840 --> 00:21:05,200
message corresponding to the forgery

592
00:21:05,200 --> 00:21:07,760
also comes from inside the blind set

593
00:21:07,760 --> 00:21:08,720
and

594
00:21:08,720 --> 00:21:10,480
it's also easy to see that

595
00:21:10,480 --> 00:21:11,840
this is equivalent to standard

596
00:21:11,840 --> 00:21:13,200
definition classically and people have

597
00:21:13,200 --> 00:21:14,480
been looking into this definition

598
00:21:14,480 --> 00:21:15,679
recently

599
00:21:15,679 --> 00:21:17,440
and with this definition in mind we can

600
00:21:17,440 --> 00:21:19,520
look at our results which is first we

601
00:21:19,520 --> 00:21:21,520
show that a scheme based on quantum prfs

602
00:21:21,520 --> 00:21:23,760
and the quantum hardness of sis is blind

603
00:21:23,760 --> 00:21:25,600
and forgivable in the cura

604
00:21:25,600 --> 00:21:28,400
we also give another scheme that is

605
00:21:28,400 --> 00:21:30,240
based on the same assumptions and is

606
00:21:30,240 --> 00:21:32,400
blind and forgivable in the plane model

607
00:21:32,400 --> 00:21:35,280
and both these schemes are compact

608
00:21:35,280 --> 00:21:37,120
we also develop a meaningful extension

609
00:21:37,120 --> 00:21:39,200
of this definition to the ring signature

610
00:21:39,200 --> 00:21:40,559
setting

611
00:21:40,559 --> 00:21:42,080
and give a new definition for ring

612
00:21:42,080 --> 00:21:44,320
signatures in the quantum case and of

613
00:21:44,320 --> 00:21:46,000
course we also give a construction of

614
00:21:46,000 --> 00:21:47,440
ringside which is satisfying our new

615
00:21:47,440 --> 00:21:49,679
definition in the plane model

616
00:21:49,679 --> 00:21:51,360
we'll very briefly look at our brain

617
00:21:51,360 --> 00:21:53,600
signature scheme and this proceeds as

618
00:21:53,600 --> 00:21:55,280
follows

619
00:21:55,280 --> 00:21:56,159
we

620
00:21:56,159 --> 00:21:56,880
this

621
00:21:56,880 --> 00:21:59,280
follows a paradigm that has been widely

622
00:21:59,280 --> 00:22:01,600
used to design ibe schemes and signature

623
00:22:01,600 --> 00:22:02,640
schemes

624
00:22:02,640 --> 00:22:04,640
from lattice-based assumptions and we

625
00:22:04,640 --> 00:22:07,200
have a wide matrix bm corresponding to

626
00:22:07,200 --> 00:22:08,799
each message m

627
00:22:08,799 --> 00:22:12,240
and the signer has an sis door t a for

628
00:22:12,240 --> 00:22:14,400
the left part of this matrix

629
00:22:14,400 --> 00:22:16,000
and that allows it to generate

630
00:22:16,000 --> 00:22:18,400
signatures which are basically

631
00:22:18,400 --> 00:22:21,440
elements in the right null space of bm

632
00:22:21,440 --> 00:22:23,200
so these are essentially sis solutions

633
00:22:23,200 --> 00:22:24,159
of some kind

634
00:22:24,159 --> 00:22:25,600
and

635
00:22:25,600 --> 00:22:28,400
f here is a special prf that we use

636
00:22:28,400 --> 00:22:31,760
which we call epsilon biased bit prs

637
00:22:31,760 --> 00:22:33,520
and with these ingredients we can show

638
00:22:33,520 --> 00:22:35,280
that this is blind and forgeable in the

639
00:22:35,280 --> 00:22:37,280
plane model and this signature is also

640
00:22:37,280 --> 00:22:38,720
compact

641
00:22:38,720 --> 00:22:40,159
now we'll turn to the ring signature

642
00:22:40,159 --> 00:22:42,320
case as we just saw ring signatures are

643
00:22:42,320 --> 00:22:43,919
these signatures where you have a group

644
00:22:43,919 --> 00:22:46,159
of people and any member in the ring can

645
00:22:46,159 --> 00:22:47,520
sign

646
00:22:47,520 --> 00:22:49,760
on behalf of all the members without any

647
00:22:49,760 --> 00:22:51,120
prior interaction

648
00:22:51,120 --> 00:22:52,640
and the properties we expect are

649
00:22:52,640 --> 00:22:54,400
unforgeability just like normal

650
00:22:54,400 --> 00:22:56,159
signatures and anonymity meaning that

651
00:22:56,159 --> 00:22:58,080
any other entity apart from designer

652
00:22:58,080 --> 00:22:59,760
cannot tell who actually signed a given

653
00:22:59,760 --> 00:23:01,280
message

654
00:23:01,280 --> 00:23:02,799
and since we look

655
00:23:02,799 --> 00:23:05,440
crucially at unforgiability we will

656
00:23:05,440 --> 00:23:07,600
recap a classical ring affordability

657
00:23:07,600 --> 00:23:09,440
which proceeds as follows there's

658
00:23:09,440 --> 00:23:11,200
challenger and adversary the challenger

659
00:23:11,200 --> 00:23:13,919
first produces a universe of q public

660
00:23:13,919 --> 00:23:15,200
and private keys and gives out the

661
00:23:15,200 --> 00:23:16,960
public keys to the adversary the

662
00:23:16,960 --> 00:23:18,960
adversary can now

663
00:23:18,960 --> 00:23:20,960
produce sign inquiries with messages and

664
00:23:20,960 --> 00:23:22,480
rings of its choice

665
00:23:22,480 --> 00:23:23,679
and get back the corresponding

666
00:23:23,679 --> 00:23:25,280
signatures it can also produce

667
00:23:25,280 --> 00:23:26,640
corruption queries

668
00:23:26,640 --> 00:23:28,960
where it get back the secret key for the

669
00:23:28,960 --> 00:23:31,039
corresponding user

670
00:23:31,039 --> 00:23:34,000
and finally it has to output a forgery

671
00:23:34,000 --> 00:23:35,039
where

672
00:23:35,039 --> 00:23:36,240
it uh

673
00:23:36,240 --> 00:23:37,840
it must be the case that the ring

674
00:23:37,840 --> 00:23:39,520
corresponding to this 4j does not

675
00:23:39,520 --> 00:23:41,440
include any corrupted members otherwise

676
00:23:41,440 --> 00:23:44,799
signing out of course be trivial

677
00:23:44,880 --> 00:23:46,960
our modification to the quantum setting

678
00:23:46,960 --> 00:23:49,039
consists of the following steps

679
00:23:49,039 --> 00:23:51,279
so we have the same setup as before and

680
00:23:51,279 --> 00:23:53,440
the challenger again produces a universe

681
00:23:53,440 --> 00:23:55,039
of keys

682
00:23:55,039 --> 00:23:57,200
but now of course the adversary signing

683
00:23:57,200 --> 00:23:59,600
queries can be of quantum form

684
00:23:59,600 --> 00:24:00,480
and

685
00:24:00,480 --> 00:24:03,200
here we this means that we sign over

686
00:24:03,200 --> 00:24:05,360
superpositions of both messages and

687
00:24:05,360 --> 00:24:07,360
rings and the challenger responds with

688
00:24:07,360 --> 00:24:08,559
the

689
00:24:08,559 --> 00:24:11,279
correct superpositions of signatures

690
00:24:11,279 --> 00:24:13,120
uh since we follow the blind

691
00:24:13,120 --> 00:24:15,120
unforgivability definition the signing

692
00:24:15,120 --> 00:24:17,200
oracle is blinded just like we saw

693
00:24:17,200 --> 00:24:18,640
before

694
00:24:18,640 --> 00:24:20,880
and

695
00:24:20,880 --> 00:24:23,440
the blind set is over both messages and

696
00:24:23,440 --> 00:24:26,640
rings for compatibility

697
00:24:26,640 --> 00:24:27,520
the

698
00:24:27,520 --> 00:24:29,200
corruption queries are produced the same

699
00:24:29,200 --> 00:24:30,720
way as before they're kept classical

700
00:24:30,720 --> 00:24:32,480
because there is no meaningful intuition

701
00:24:32,480 --> 00:24:34,159
for corrupting

702
00:24:34,159 --> 00:24:36,640
let's say a superposition of parties

703
00:24:36,640 --> 00:24:38,960
eventually the adversary has to produce

704
00:24:38,960 --> 00:24:41,200
a forgery and now the requirement for

705
00:24:41,200 --> 00:24:43,279
this to be valid is that the message and

706
00:24:43,279 --> 00:24:45,760
the ring belongs to the blind set we

707
00:24:45,760 --> 00:24:47,279
described before

708
00:24:47,279 --> 00:24:49,520
so this is our new definition

709
00:24:49,520 --> 00:24:51,440
and that brings me to the end of my talk

710
00:24:51,440 --> 00:24:52,880
thank you for attention and please see

711
00:24:52,880 --> 00:24:55,530
our longer talk and full paper thank you

712
00:24:55,530 --> 00:24:57,039
[Music]

713
00:24:57,039 --> 00:24:59,360
thank you

714
00:24:59,440 --> 00:25:02,080
so we will take questions now

715
00:25:02,080 --> 00:25:03,840
if there are any questions please raise

716
00:25:03,840 --> 00:25:08,158
your hand or ask them on zoom or zoom

717
00:25:10,559 --> 00:25:12,640
uh can i ask one like a very simple

718
00:25:12,640 --> 00:25:15,760
question uh so i i this was my first

719
00:25:15,760 --> 00:25:17,520
time hearing about this new note this

720
00:25:17,520 --> 00:25:19,039
notion of um

721
00:25:19,039 --> 00:25:21,520
blinded unforgeability can you

722
00:25:21,520 --> 00:25:23,600
uh kind of like show the slides and

723
00:25:23,600 --> 00:25:25,440
explain a bit more about that

724
00:25:25,440 --> 00:25:28,240
let me show it once again

725
00:25:28,240 --> 00:25:30,240
i guess one of the things that i was uh

726
00:25:30,240 --> 00:25:32,799
wondering is is this blind is set

727
00:25:32,799 --> 00:25:35,600
who chooses it is it the adversary or

728
00:25:35,600 --> 00:25:37,760
is it the challenger or the challenger

729
00:25:37,760 --> 00:25:40,240
picks the blind set so it's some

730
00:25:40,240 --> 00:25:42,400
there's some amount of selectivity so

731
00:25:42,400 --> 00:25:44,799
but the parameter epsilon

732
00:25:44,799 --> 00:25:46,720
can be considered to be adversarially

733
00:25:46,720 --> 00:25:48,000
defined

734
00:25:48,000 --> 00:25:50,240
i see so when i think you mentioned that

735
00:25:50,240 --> 00:25:51,840
this um

736
00:25:51,840 --> 00:25:54,240
um includes the standard notion of

737
00:25:54,240 --> 00:25:56,640
unforgiability does it capture like

738
00:25:56,640 --> 00:25:58,559
adaptative unforgeability too or is it

739
00:25:58,559 --> 00:26:00,320
the selective setting

740
00:26:00,320 --> 00:26:02,080
no yeah it captures a

741
00:26:02,080 --> 00:26:04,400
classical standard unforgeability yeah

742
00:26:04,400 --> 00:26:07,679
adapter yes

743
00:26:07,679 --> 00:26:09,039
um

744
00:26:09,039 --> 00:26:11,600
also if there is no other question i i

745
00:26:11,600 --> 00:26:13,360
have one more and uh

746
00:26:13,360 --> 00:26:15,520
so

747
00:26:15,520 --> 00:26:17,520
are there any like let's say contrived

748
00:26:17,520 --> 00:26:20,000
scheme which satisfies classical

749
00:26:20,000 --> 00:26:21,919
standard unforge ability with i guess

750
00:26:21,919 --> 00:26:24,159
you know quantum adversaries but failed

751
00:26:24,159 --> 00:26:27,919
to provide blind unforgiability

752
00:26:28,320 --> 00:26:32,400
uh right uh i think yeah so the

753
00:26:32,400 --> 00:26:34,480
work that introduces this definition has

754
00:26:34,480 --> 00:26:37,520
a scheme of that kind i think

755
00:26:37,520 --> 00:26:40,400
okay uh sorry uh of course it's uh it's

756
00:26:40,400 --> 00:26:42,640
one of those tricky quantum things it's

757
00:26:42,640 --> 00:26:43,600
nothing

758
00:26:43,600 --> 00:26:45,039
immediately natural

759
00:26:45,039 --> 00:26:47,360
okay thank you uh

760
00:26:47,360 --> 00:26:49,760
sorry so there are several questions on

761
00:26:49,760 --> 00:26:52,400
chat now so uh one of them is by roon

762
00:26:52,400 --> 00:26:54,880
what is the density epsilon of the blind

763
00:26:54,880 --> 00:26:56,640
set

764
00:26:56,640 --> 00:26:57,840
um well

765
00:26:57,840 --> 00:27:00,240
the definition is parameterized which

766
00:27:00,240 --> 00:27:02,400
means that you allow any possible value

767
00:27:02,400 --> 00:27:05,039
what this means in practice is

768
00:27:05,039 --> 00:27:06,880
you it can be any inverse polynomial

769
00:27:06,880 --> 00:27:08,880
thing and you can consider it adversely

770
00:27:08,880 --> 00:27:11,520
specified that's your total definition

771
00:27:11,520 --> 00:27:13,200
just the game itself is parameterized

772
00:27:13,200 --> 00:27:16,799
with epsilon you can use any value

773
00:27:16,880 --> 00:27:18,159
and i guess you mentioned that the

774
00:27:18,159 --> 00:27:20,480
epsilon can be uh is adversarially

775
00:27:20,480 --> 00:27:23,360
chosen yes yes so you can consider pairs

776
00:27:23,360 --> 00:27:24,799
of adversaries and the corresponding

777
00:27:24,799 --> 00:27:26,960
epsilon that works best for you

778
00:27:26,960 --> 00:27:29,200
okay so i think that answers all the

779
00:27:29,200 --> 00:27:32,799
questions on the zoom chat right now

780
00:27:32,799 --> 00:27:35,360
and abita also had her i i raised my

781
00:27:35,360 --> 00:27:37,279
hand um so

782
00:27:37,279 --> 00:27:39,279
i'll go ahead um

783
00:27:39,279 --> 00:27:40,799
so i was just wondering when you have

784
00:27:40,799 --> 00:27:42,960
the game defined and you said that the

785
00:27:42,960 --> 00:27:46,159
challenger gives the universe of keys

786
00:27:46,159 --> 00:27:48,559
uh to the adversary is there a reason

787
00:27:48,559 --> 00:27:50,799
that like the universe of keys has to be

788
00:27:50,799 --> 00:27:51,760
set

789
00:27:51,760 --> 00:27:54,799
at the beginning of time

790
00:27:54,799 --> 00:27:56,880
um

791
00:27:56,880 --> 00:27:59,200
no it's just the standard uh ring

792
00:27:59,200 --> 00:28:00,880
signature enforceability definition we

793
00:28:00,880 --> 00:28:02,320
follow it there's no particular

794
00:28:02,320 --> 00:28:04,000
intention behind that of course it does

795
00:28:04,000 --> 00:28:05,679
make things easier in the quantum case

796
00:28:05,679 --> 00:28:07,039
because

797
00:28:07,039 --> 00:28:09,520
when you specify these uh

798
00:28:09,520 --> 00:28:11,440
keys you do not have to describe quantum

799
00:28:11,440 --> 00:28:12,640
access to them which might become a

800
00:28:12,640 --> 00:28:15,039
problem it doesn't because yeah we keep

801
00:28:15,039 --> 00:28:17,840
it classical there

802
00:28:20,480 --> 00:28:23,039
i've been told that uh jacob you were

803
00:28:23,039 --> 00:28:24,960
raising your hand too sorry i don't know

804
00:28:24,960 --> 00:28:26,720
where to see this hand

805
00:28:26,720 --> 00:28:29,279
yes uh no i i mean i uh

806
00:28:29,279 --> 00:28:31,279
i actually lowered my hand again but my

807
00:28:31,279 --> 00:28:32,880
question was sort of related to the

808
00:28:32,880 --> 00:28:35,039
previous question uh regarding this uh

809
00:28:35,039 --> 00:28:37,600
setup for the uh for the keys because i

810
00:28:37,600 --> 00:28:39,679
mean even in in the classical setting i

811
00:28:39,679 --> 00:28:42,399
guess you could consider a an adversary

812
00:28:42,399 --> 00:28:45,039
who would maliciously generate public

813
00:28:45,039 --> 00:28:46,480
keys and

814
00:28:46,480 --> 00:28:48,480
and ask for

815
00:28:48,480 --> 00:28:50,399
for ring signatures that includes these

816
00:28:50,399 --> 00:28:52,799
maliciously generated keys oh yes that

817
00:28:52,799 --> 00:28:55,279
is allowed sorry sorry to cut him yeah

818
00:28:55,279 --> 00:28:56,960
so so mike

819
00:28:56,960 --> 00:28:59,360
i guess i could repeat the question is

820
00:28:59,360 --> 00:29:01,200
there a reason for why

821
00:29:01,200 --> 00:29:02,480
uh you

822
00:29:02,480 --> 00:29:04,880
do not consider maliciously generated

823
00:29:04,880 --> 00:29:08,000
keys or can your result extend it to the

824
00:29:08,000 --> 00:29:10,720
setting where you would have maliciously

825
00:29:10,720 --> 00:29:13,120
generated keys yeah maybe i didn't

826
00:29:13,120 --> 00:29:15,520
explain clearly but you a lot this

827
00:29:15,520 --> 00:29:17,360
behavior is still allowed it's just that

828
00:29:17,360 --> 00:29:19,440
challenger has its own set of keys that

829
00:29:19,440 --> 00:29:21,039
it generates beforehand the adversary

830
00:29:21,039 --> 00:29:22,640
can of course produce rings of its

831
00:29:22,640 --> 00:29:23,760
choice

832
00:29:23,760 --> 00:29:25,760
uh yeah i guess this doesn't show up

833
00:29:25,760 --> 00:29:27,919
very clearly this definition but

834
00:29:27,919 --> 00:29:29,919
this is of course allowed this ring are

835
00:29:29,919 --> 00:29:31,919
for signing queries can be any ring

836
00:29:31,919 --> 00:29:33,520
including members of the adversary's

837
00:29:33,520 --> 00:29:35,200
choice

838
00:29:35,200 --> 00:29:36,480
okay thank you

839
00:29:36,480 --> 00:29:38,000
yeah

840
00:29:38,000 --> 00:29:40,240
um all right uh thank you for the talk i

841
00:29:40,240 --> 00:29:42,000
think we should move on to the next uh

842
00:29:42,000 --> 00:29:44,480
talk then sure i'll stop sharing

843
00:29:44,480 --> 00:29:46,480
thank you uh so

844
00:29:46,480 --> 00:29:48,399
the next talk is

845
00:29:48,399 --> 00:29:50,880
logarithmic size linkable threshold ring

846
00:29:50,880 --> 00:29:52,880
signatures in the plain model uh the

847
00:29:52,880 --> 00:29:54,960
authors are abita hawk stefan kran

848
00:29:54,960 --> 00:29:58,080
daniel summoning and christopher streaks

849
00:29:58,080 --> 00:30:02,240
um yup you can start abduct

850
00:30:02,799 --> 00:30:05,760
ah abita you're muted

851
00:30:05,760 --> 00:30:07,840
uh you should be able to hear me now

852
00:30:07,840 --> 00:30:10,399
yes we can thank you um thank you shu

853
00:30:10,399 --> 00:30:13,600
for the introduction um so this is um

854
00:30:13,600 --> 00:30:16,480
well you already said the title um

855
00:30:16,480 --> 00:30:18,480
let's see and hopefully there we go

856
00:30:18,480 --> 00:30:20,799
sorry um so we already talked about ring

857
00:30:20,799 --> 00:30:23,279
signatures but let me motivate a

858
00:30:23,279 --> 00:30:24,880
scenario where you would want to use

859
00:30:24,880 --> 00:30:26,720
threshold ring signatures

860
00:30:26,720 --> 00:30:28,720
i'm calling it the parliament's problem

861
00:30:28,720 --> 00:30:31,760
so let's say uh charlie is really mad

862
00:30:31,760 --> 00:30:33,200
about british taxation without

863
00:30:33,200 --> 00:30:34,880
representation so he wants to sign a

864
00:30:34,880 --> 00:30:37,279
petition and he's going to say

865
00:30:37,279 --> 00:30:38,960
look we're going to throw a lot of tea

866
00:30:38,960 --> 00:30:41,039
into the boston harbor in the middle of

867
00:30:41,039 --> 00:30:42,240
december

868
00:30:42,240 --> 00:30:44,159
now with signatures i think everybody

869
00:30:44,159 --> 00:30:45,919
knows he can sign this message and send

870
00:30:45,919 --> 00:30:48,080
it off and anyone can check yeah this

871
00:30:48,080 --> 00:30:50,559
really did come from charlie but i mean

872
00:30:50,559 --> 00:30:52,799
this is a crime so it's a sensitive

873
00:30:52,799 --> 00:30:55,200
thing to sign for so what charlie might

874
00:30:55,200 --> 00:30:57,039
do is um

875
00:30:57,039 --> 00:30:59,760
hide his identity among a set of known

876
00:30:59,760 --> 00:31:01,600
people which i have here is alice and

877
00:31:01,600 --> 00:31:04,080
bob so now when this message gets sent

878
00:31:04,080 --> 00:31:06,720
over it's actually with respect to this

879
00:31:06,720 --> 00:31:09,200
known ring of people and nobody can tell

880
00:31:09,200 --> 00:31:13,519
from whom the message actually came

881
00:31:13,519 --> 00:31:15,600
of course um this is not going to be

882
00:31:15,600 --> 00:31:17,519
enough if just charlie wants to do this

883
00:31:17,519 --> 00:31:19,600
we need to see if other people

884
00:31:19,600 --> 00:31:22,559
want to join and help him out

885
00:31:22,559 --> 00:31:24,480
with this uh crime

886
00:31:24,480 --> 00:31:26,399
and that's where uh threshold ring

887
00:31:26,399 --> 00:31:28,399
signatures would come in

888
00:31:28,399 --> 00:31:30,960
um and elena actually talked about this

889
00:31:30,960 --> 00:31:33,200
already and she even pointed out

890
00:31:33,200 --> 00:31:34,480
um

891
00:31:34,480 --> 00:31:35,360
that

892
00:31:35,360 --> 00:31:36,720
there seems to be a problem with

893
00:31:36,720 --> 00:31:39,279
threshold ring signatures which is well

894
00:31:39,279 --> 00:31:41,120
don't the signers have to talk to each

895
00:31:41,120 --> 00:31:42,159
other

896
00:31:42,159 --> 00:31:44,159
um and she already started talking about

897
00:31:44,159 --> 00:31:45,760
like same message link ability so it

898
00:31:45,760 --> 00:31:48,720
seems like maybe we don't so we have

899
00:31:48,720 --> 00:31:51,440
kind of a related notion which is this

900
00:31:51,440 --> 00:31:54,799
concept of inter-signer anonymity um the

901
00:31:54,799 --> 00:31:56,480
idea is pretty straightforward we just

902
00:31:56,480 --> 00:31:58,000
force our ring signature to have a

903
00:31:58,000 --> 00:31:59,600
deterministic part

904
00:31:59,600 --> 00:32:02,000
and then if you are given if a verifier

905
00:32:02,000 --> 00:32:03,519
is given two signatures which are on the

906
00:32:03,519 --> 00:32:05,440
same message and ring

907
00:32:05,440 --> 00:32:06,799
they can just check if that part is

908
00:32:06,799 --> 00:32:08,000
equal

909
00:32:08,000 --> 00:32:09,440
if it is they'll say uh it's from the

910
00:32:09,440 --> 00:32:11,440
same signer and if it's not it's from

911
00:32:11,440 --> 00:32:13,360
distinct signers

912
00:32:13,360 --> 00:32:16,240
so for example if i have uh five

913
00:32:16,240 --> 00:32:17,519
signatures

914
00:32:17,519 --> 00:32:20,640
and i do um five choose two checks as

915
00:32:20,640 --> 00:32:22,240
the verifier and they're all different

916
00:32:22,240 --> 00:32:24,399
i'd say oh at least i got five

917
00:32:24,399 --> 00:32:26,480
signatures from five different people

918
00:32:26,480 --> 00:32:28,559
from this ring

919
00:32:28,559 --> 00:32:29,600
um

920
00:32:29,600 --> 00:32:32,240
and the idea here is that it's more fine

921
00:32:32,240 --> 00:32:34,080
grained than

922
00:32:34,080 --> 00:32:36,320
link ability because not only could we

923
00:32:36,320 --> 00:32:38,559
do this over just two signatures on the

924
00:32:38,559 --> 00:32:40,159
same message in ring but we can actually

925
00:32:40,159 --> 00:32:41,600
set the scope

926
00:32:41,600 --> 00:32:43,679
to be whatever we want and make it so

927
00:32:43,679 --> 00:32:46,399
that we can do this equality check based

928
00:32:46,399 --> 00:32:47,279
on

929
00:32:47,279 --> 00:32:50,480
whatever situation we want to have

930
00:32:50,480 --> 00:32:51,919
okay

931
00:32:51,919 --> 00:32:54,799
so um

932
00:32:54,799 --> 00:32:56,320
obviously in five minutes don't have

933
00:32:56,320 --> 00:32:58,080
time to go over how our construction

934
00:32:58,080 --> 00:33:00,640
looks but we used a ring signature

935
00:33:00,640 --> 00:33:02,240
template from bacchus at all and

936
00:33:02,240 --> 00:33:04,000
actually rohit would be familiar with

937
00:33:04,000 --> 00:33:05,760
this as well because their ring

938
00:33:05,760 --> 00:33:08,000
signature scheme uses um something

939
00:33:08,000 --> 00:33:09,039
similar

940
00:33:09,039 --> 00:33:10,399
um

941
00:33:10,399 --> 00:33:11,360
but

942
00:33:11,360 --> 00:33:12,640
and so that's how we were able to get

943
00:33:12,640 --> 00:33:15,279
that logarithmic size ring signature uh

944
00:33:15,279 --> 00:33:16,399
with the with something called the

945
00:33:16,399 --> 00:33:18,559
somewhere perfectly binding hashing and

946
00:33:18,559 --> 00:33:20,399
then uh we're in the plain model because

947
00:33:20,399 --> 00:33:22,000
we use a non-interactive witness

948
00:33:22,000 --> 00:33:24,960
indistinguishable proof or newy so

949
00:33:24,960 --> 00:33:27,200
that's already been done what we did

950
00:33:27,200 --> 00:33:28,480
that was new was getting that

951
00:33:28,480 --> 00:33:30,720
deterministic part like i said which we

952
00:33:30,720 --> 00:33:33,600
use a verifiable random function

953
00:33:33,600 --> 00:33:34,720
for

954
00:33:34,720 --> 00:33:36,080
um

955
00:33:36,080 --> 00:33:37,039
so

956
00:33:37,039 --> 00:33:40,000
just quickly the since i can't go into

957
00:33:40,000 --> 00:33:41,919
the construction

958
00:33:41,919 --> 00:33:43,279
i don't know what i did i clicked on

959
00:33:43,279 --> 00:33:44,480
something

960
00:33:44,480 --> 00:33:47,120
sorry um so the signature ends up

961
00:33:47,120 --> 00:33:49,039
looking like

962
00:33:49,039 --> 00:33:52,640
uh this proof of either i am sign or i

963
00:33:52,640 --> 00:33:54,480
and i have a bunch of values that are

964
00:33:54,480 --> 00:33:56,640
consistent with signer eyes val like an

965
00:33:56,640 --> 00:33:58,080
index i

966
00:33:58,080 --> 00:34:00,240
or i'm signer j and i have a bunch of

967
00:34:00,240 --> 00:34:02,480
values that are consistent with that and

968
00:34:02,480 --> 00:34:04,880
in particular i have this value v here

969
00:34:04,880 --> 00:34:08,239
which is uh the output of the the vrf so

970
00:34:08,239 --> 00:34:09,839
that's the value

971
00:34:09,839 --> 00:34:12,320
and it's a deterministic value

972
00:34:12,320 --> 00:34:16,399
um and and then the on assigner um if

973
00:34:16,399 --> 00:34:18,560
he's i for example he's just gonna put

974
00:34:18,560 --> 00:34:21,040
some random stuff here for j

975
00:34:21,040 --> 00:34:23,679
and then one more thing that we have is

976
00:34:23,679 --> 00:34:26,320
this relationship rf which we're going

977
00:34:26,320 --> 00:34:28,079
to need in the proof

978
00:34:28,079 --> 00:34:30,800
so i'll show you

979
00:34:30,800 --> 00:34:32,719
so i think the anonymity proof is

980
00:34:32,719 --> 00:34:34,399
actually pretty interesting because it

981
00:34:34,399 --> 00:34:36,800
points out an interesting problem

982
00:34:36,800 --> 00:34:38,960
where basically when you want to prove

983
00:34:38,960 --> 00:34:40,560
that a ring signature this ring

984
00:34:40,560 --> 00:34:42,239
signature

985
00:34:42,239 --> 00:34:43,520
is really

986
00:34:43,520 --> 00:34:44,719
anonymous

987
00:34:44,719 --> 00:34:47,520
you have to anonymously switch or

988
00:34:47,520 --> 00:34:49,918
indistinguishably hop from a signature

989
00:34:49,918 --> 00:34:51,839
from signer i

990
00:34:51,839 --> 00:34:55,599
to a signature from uh signer j

991
00:34:55,599 --> 00:34:57,119
and so

992
00:34:57,119 --> 00:35:00,640
when you have uh when you jump

993
00:35:00,640 --> 00:35:03,440
and uh try to make all the values from

994
00:35:03,440 --> 00:35:06,079
signer j also be true along with signer

995
00:35:06,079 --> 00:35:08,880
i it causes uh an issue where it's

996
00:35:08,880 --> 00:35:09,920
actually

997
00:35:09,920 --> 00:35:11,359
possible for

998
00:35:11,359 --> 00:35:15,119
uh one to distinguish um real signatures

999
00:35:15,119 --> 00:35:17,760
from this um sort of made-up signature

1000
00:35:17,760 --> 00:35:20,000
in the anonymity hybrid so we're forced

1001
00:35:20,000 --> 00:35:21,839
to use this like other relationship

1002
00:35:21,839 --> 00:35:23,440
called f

1003
00:35:23,440 --> 00:35:24,640
and f

1004
00:35:24,640 --> 00:35:26,720
uh is a one-way function and it sets

1005
00:35:26,720 --> 00:35:28,720
this relationship between

1006
00:35:28,720 --> 00:35:30,560
sign or eyes secret key and signer j's

1007
00:35:30,560 --> 00:35:32,079
secret key and this would never happen

1008
00:35:32,079 --> 00:35:35,040
in reality for real signatures

1009
00:35:35,040 --> 00:35:36,320
but we need it

1010
00:35:36,320 --> 00:35:37,440
you can think of it as like a temp

1011
00:35:37,440 --> 00:35:39,599
variable where we use it as set it to be

1012
00:35:39,599 --> 00:35:42,400
true so that my new e can remain true

1013
00:35:42,400 --> 00:35:44,880
until such time as i can make

1014
00:35:44,880 --> 00:35:47,200
it false again because the signature is

1015
00:35:47,200 --> 00:35:48,960
from signer j

1016
00:35:48,960 --> 00:35:50,079
cool

1017
00:35:50,079 --> 00:35:51,280
um

1018
00:35:51,280 --> 00:35:54,160
but this leads to a problem because

1019
00:35:54,160 --> 00:35:56,320
if there is an adversary who wants to

1020
00:35:56,320 --> 00:35:59,520
join the ring um and they were they

1021
00:35:59,520 --> 00:36:02,000
wanted to do so maliciously they could

1022
00:36:02,000 --> 00:36:04,400
forge signatures trivially because all

1023
00:36:04,400 --> 00:36:06,400
they would have to do is pick ski and

1024
00:36:06,400 --> 00:36:08,880
skj according to this one-way

1025
00:36:08,880 --> 00:36:10,800
function and then

1026
00:36:10,800 --> 00:36:12,960
i said okay look it should be linked

1027
00:36:12,960 --> 00:36:14,160
each time you have the same message in

1028
00:36:14,160 --> 00:36:16,720
ring but if you use the relationship f

1029
00:36:16,720 --> 00:36:19,040
that's not going to be the case

1030
00:36:19,040 --> 00:36:21,359
so i lost the ability to have the

1031
00:36:21,359 --> 00:36:24,079
adversary register malicious keys um

1032
00:36:24,079 --> 00:36:25,920
it's still possible to for him to like

1033
00:36:25,920 --> 00:36:27,520
get all signed queries that he wants or

1034
00:36:27,520 --> 00:36:30,000
even ask for honest keys to be added to

1035
00:36:30,000 --> 00:36:30,880
the ring

1036
00:36:30,880 --> 00:36:33,200
and um because this is threshold he can

1037
00:36:33,200 --> 00:36:34,640
also corrupt

1038
00:36:34,640 --> 00:36:35,760
keys

1039
00:36:35,760 --> 00:36:38,240
um but still those keys are honestly

1040
00:36:38,240 --> 00:36:41,599
generated so this doesn't quite match

1041
00:36:41,599 --> 00:36:42,640
like

1042
00:36:42,640 --> 00:36:44,960
the kind of open setting that we would

1043
00:36:44,960 --> 00:36:47,040
want for ring signatures but it seems

1044
00:36:47,040 --> 00:36:49,280
unavoidable because we really wanted

1045
00:36:49,280 --> 00:36:50,880
that inter sign or anonymity and we

1046
00:36:50,880 --> 00:36:54,640
wanted to stay in the plane model um so

1047
00:36:54,640 --> 00:36:57,119
that's it um of course please see our

1048
00:36:57,119 --> 00:36:58,880
paper on eprint or check out my longer

1049
00:36:58,880 --> 00:37:00,800
video and of course

1050
00:37:00,800 --> 00:37:03,040
with the previous uh presenters i do

1051
00:37:03,040 --> 00:37:05,280
recommend rohitz and elena's papers as

1052
00:37:05,280 --> 00:37:09,200
they are quite related to mine

1053
00:37:09,200 --> 00:37:11,440
okay uh thank you for the great talk uh

1054
00:37:11,440 --> 00:37:12,800
are there any questions from the

1055
00:37:12,800 --> 00:37:15,200
audience

1056
00:37:19,599 --> 00:37:24,160
so right now i don't see any yet

1057
00:37:24,480 --> 00:37:27,040
maybe i can ask a very simple question

1058
00:37:27,040 --> 00:37:28,720
so you mentioned that you

1059
00:37:28,720 --> 00:37:31,680
uh introduced a new more fine-grained

1060
00:37:31,680 --> 00:37:34,640
definition for linkability

1061
00:37:34,640 --> 00:37:37,040
so is this something

1062
00:37:37,040 --> 00:37:38,160
um

1063
00:37:38,160 --> 00:37:40,640
if if we want if we didn't care let's

1064
00:37:40,640 --> 00:37:42,160
say you know if we want a very efficient

1065
00:37:42,160 --> 00:37:43,920
scheme based on you know roms or

1066
00:37:43,920 --> 00:37:45,440
whatever

1067
00:37:45,440 --> 00:37:47,839
is it easy to achieve this or is this

1068
00:37:47,839 --> 00:37:49,760
does it provide like new insights to

1069
00:37:49,760 --> 00:37:51,760
construct

1070
00:37:51,760 --> 00:37:53,920
um so i guess the question is like does

1071
00:37:53,920 --> 00:37:56,000
my ring signature scheme like provide

1072
00:37:56,000 --> 00:37:57,040
like new

1073
00:37:57,040 --> 00:38:00,480
insights over previous linkable ring

1074
00:38:00,480 --> 00:38:03,200
signatures right what i meant is that uh

1075
00:38:03,200 --> 00:38:05,040
i guess the previous linkable ring

1076
00:38:05,040 --> 00:38:06,960
signature doesn't provide inter sign or

1077
00:38:06,960 --> 00:38:10,480
anonymity right or does it

1078
00:38:10,480 --> 00:38:13,920
um so i guess maybe this is like uh the

1079
00:38:13,920 --> 00:38:14,800
name

1080
00:38:14,800 --> 00:38:16,480
is just because we wanted to make it

1081
00:38:16,480 --> 00:38:18,079
look like more like threshold ring

1082
00:38:18,079 --> 00:38:20,160
signatures which if everybody was

1083
00:38:20,160 --> 00:38:22,800
agreeing to sign a message then it would

1084
00:38:22,800 --> 00:38:24,800
be on the same message and ring each

1085
00:38:24,800 --> 00:38:27,760
time because they're working together

1086
00:38:27,760 --> 00:38:29,359
and so our first thought was well let's

1087
00:38:29,359 --> 00:38:30,880
just make it be on the same message and

1088
00:38:30,880 --> 00:38:32,720
ring and then it was kind of

1089
00:38:32,720 --> 00:38:35,119
straightforward to say well if we like

1090
00:38:35,119 --> 00:38:37,440
scope it so that you can only check if

1091
00:38:37,440 --> 00:38:39,040
two signers are the same on the same

1092
00:38:39,040 --> 00:38:41,200
message and ring we can change the scope

1093
00:38:41,200 --> 00:38:42,079
to be

1094
00:38:42,079 --> 00:38:44,560
whatever we want like

1095
00:38:44,560 --> 00:38:46,079
if you had an election i could vote for

1096
00:38:46,079 --> 00:38:47,200
the mayor

1097
00:38:47,200 --> 00:38:49,520
and if i then vote for the governor

1098
00:38:49,520 --> 00:38:50,880
nobody's gonna link that those two

1099
00:38:50,880 --> 00:38:52,800
signatures came from the same

1100
00:38:52,800 --> 00:38:53,839
person

1101
00:38:53,839 --> 00:38:56,640
um which is how other like previous

1102
00:38:56,640 --> 00:39:00,800
linkable ring signatures have done it um

1103
00:39:00,800 --> 00:39:03,359
elena mentioned like same message

1104
00:39:03,359 --> 00:39:05,440
linkable which like changes the scope

1105
00:39:05,440 --> 00:39:07,359
but we have just you can make the scope

1106
00:39:07,359 --> 00:39:09,839
whatever you want equality to be checked

1107
00:39:09,839 --> 00:39:12,320
on i hope that answers the question yeah

1108
00:39:12,320 --> 00:39:15,040
it did thank you um are there any other

1109
00:39:15,040 --> 00:39:17,520
questions

1110
00:39:20,960 --> 00:39:23,920
so if not we are on

1111
00:39:23,920 --> 00:39:25,839
uh a good time schedule right now so uh

1112
00:39:25,839 --> 00:39:27,680
maybe we can move on sorry one more

1113
00:39:27,680 --> 00:39:30,560
question uh oh yeah go ahead yeah i was

1114
00:39:30,560 --> 00:39:31,839
asking if you considered any

1115
00:39:31,839 --> 00:39:34,000
constructions without vrfs and if you

1116
00:39:34,000 --> 00:39:36,240
have any thoughts on that

1117
00:39:36,240 --> 00:39:39,040
uh without what again

1118
00:39:39,040 --> 00:39:40,880
verifiable random functions

1119
00:39:40,880 --> 00:39:43,599
without verifiable random functions

1120
00:39:43,599 --> 00:39:44,960
um

1121
00:39:44,960 --> 00:39:47,280
so i guess it seemed like the easiest

1122
00:39:47,280 --> 00:39:48,320
way to

1123
00:39:48,320 --> 00:39:50,720
just make that deterministic value work

1124
00:39:50,720 --> 00:39:52,640
out so that we could like prove

1125
00:39:52,640 --> 00:39:53,839
something about it like you actually

1126
00:39:53,839 --> 00:39:56,720
need to use a secret key um so i'm not

1127
00:39:56,720 --> 00:39:58,720
sure i don't know if there's like

1128
00:39:58,720 --> 00:40:00,000
another

1129
00:40:00,000 --> 00:40:02,880
object that would uh give us that same

1130
00:40:02,880 --> 00:40:04,720
kind of property so i guess the answer

1131
00:40:04,720 --> 00:40:06,960
to your question is no but i'd be if you

1132
00:40:06,960 --> 00:40:09,119
have a thought i'd like to know

1133
00:40:09,119 --> 00:40:10,400
right yeah i know that's a very fair

1134
00:40:10,400 --> 00:40:11,440
answer

1135
00:40:11,440 --> 00:40:13,760
thank you

1136
00:40:14,960 --> 00:40:16,960
okay thank you abida let's move on to

1137
00:40:16,960 --> 00:40:19,520
the next talk uh the title is on pairing

1138
00:40:19,520 --> 00:40:22,800
free blind signature schemes in the agm

1139
00:40:22,800 --> 00:40:24,960
the authors are julia kastner julian

1140
00:40:24,960 --> 00:40:28,400
ross josh shu jai yusu and uh julia will

1141
00:40:28,400 --> 00:40:30,560
be giving a talk

1142
00:40:30,560 --> 00:40:32,319
yes hello uh

1143
00:40:32,319 --> 00:40:34,560
thank you for the introduction

1144
00:40:34,560 --> 00:40:35,680
um

1145
00:40:35,680 --> 00:40:37,920
first i'd like to explain the type of

1146
00:40:37,920 --> 00:40:39,760
signature scheme we looked into it's a

1147
00:40:39,760 --> 00:40:42,160
three-move blind signature scheme

1148
00:40:42,160 --> 00:40:44,400
uh this consists this is a two-party

1149
00:40:44,400 --> 00:40:46,880
protocol with a signer who has a secret

1150
00:40:46,880 --> 00:40:48,560
key and a user who knows the

1151
00:40:48,560 --> 00:40:50,400
corresponding publicly and he has a

1152
00:40:50,400 --> 00:40:51,839
message that he would like to have

1153
00:40:51,839 --> 00:40:54,319
signed by the signer

1154
00:40:54,319 --> 00:40:56,720
and to do this they send back and forth

1155
00:40:56,720 --> 00:40:59,520
three messages

1156
00:40:59,680 --> 00:41:02,560
and in the end the user can compute a

1157
00:41:02,560 --> 00:41:05,119
signature on the message that he has

1158
00:41:05,119 --> 00:41:07,680
and we have two properties for this

1159
00:41:07,680 --> 00:41:09,359
one property is

1160
00:41:09,359 --> 00:41:12,400
the blindness so the signer

1161
00:41:12,400 --> 00:41:14,319
informally speaking should not learn

1162
00:41:14,319 --> 00:41:16,640
what the message is that he signed

1163
00:41:16,640 --> 00:41:18,400
and on the other hand we want a one more

1164
00:41:18,400 --> 00:41:20,560
unforgeability property which means that

1165
00:41:20,560 --> 00:41:22,800
the user cannot generate more signatures

1166
00:41:22,800 --> 00:41:26,960
than the signer interacted with him

1167
00:41:28,240 --> 00:41:30,160
the first scheme we looked into in this

1168
00:41:30,160 --> 00:41:31,440
work is

1169
00:41:31,440 --> 00:41:33,280
blind schnoor signatures

1170
00:41:33,280 --> 00:41:35,119
so in the blind snore setting on the

1171
00:41:35,119 --> 00:41:37,440
signer side we just have sort of a proof

1172
00:41:37,440 --> 00:41:39,520
of knowledge of this discrete logarithm

1173
00:41:39,520 --> 00:41:41,599
x here

1174
00:41:41,599 --> 00:41:43,200
which is the discrete logarithm of the

1175
00:41:43,200 --> 00:41:45,040
public key y

1176
00:41:45,040 --> 00:41:46,880
and the signer proves that he knows the

1177
00:41:46,880 --> 00:41:49,200
discrete log by generating this r

1178
00:41:49,200 --> 00:41:52,079
uniformly at random and sending over g

1179
00:41:52,079 --> 00:41:53,760
to the r

1180
00:41:53,760 --> 00:41:55,839
and then when he gets a challenge he

1181
00:41:55,839 --> 00:41:59,200
computes s which is c times x to the

1182
00:41:59,200 --> 00:42:00,480
x plus r

1183
00:42:00,480 --> 00:42:02,720
so this is uh

1184
00:42:02,720 --> 00:42:04,880
then sent back to the user

1185
00:42:04,880 --> 00:42:07,200
and on the user side the user just first

1186
00:42:07,200 --> 00:42:09,040
blinds these values to generate the

1187
00:42:09,040 --> 00:42:11,599
challenge and then later on he unblinds

1188
00:42:11,599 --> 00:42:13,760
them to generate h signature on the

1189
00:42:13,760 --> 00:42:17,040
message that he has

1190
00:42:17,040 --> 00:42:19,119
we know for schnoor signatures for blind

1191
00:42:19,119 --> 00:42:22,960
snow signatures there's uh a way to um

1192
00:42:22,960 --> 00:42:25,119
weight the un one more unforgeability

1193
00:42:25,119 --> 00:42:27,040
without breaking d log

1194
00:42:27,040 --> 00:42:29,200
which is uh the worst attack which was

1195
00:42:29,200 --> 00:42:31,359
discovered by schnoor it's basically an

1196
00:42:31,359 --> 00:42:33,280
attack where if you have a lot of open

1197
00:42:33,280 --> 00:42:34,880
signing sessions

1198
00:42:34,880 --> 00:42:38,000
you can try to linearly combine hash

1199
00:42:38,000 --> 00:42:39,200
queries

1200
00:42:39,200 --> 00:42:42,319
to generate a one more forgery

1201
00:42:42,319 --> 00:42:44,400
we also know that in the standard group

1202
00:42:44,400 --> 00:42:47,040
models without the agm or ggm

1203
00:42:47,040 --> 00:42:48,960
we cannot use the standard forking

1204
00:42:48,960 --> 00:42:52,319
technique to prove that these blind snow

1205
00:42:52,319 --> 00:42:54,560
signatures are secure

1206
00:42:54,560 --> 00:42:57,200
um but we know that in the agm plus one

1207
00:42:57,200 --> 00:42:59,440
under the worst assumption and one more

1208
00:42:59,440 --> 00:43:00,480
d log

1209
00:43:00,480 --> 00:43:02,400
uh there is a proof of security so the

1210
00:43:02,400 --> 00:43:03,920
worst assumption is just that this

1211
00:43:03,920 --> 00:43:07,119
combining hash queries should be hard

1212
00:43:07,119 --> 00:43:09,200
but we found out very recently so we

1213
00:43:09,200 --> 00:43:11,280
learned very recently that this is

1214
00:43:11,280 --> 00:43:14,000
actually possible to do in polynomial

1215
00:43:14,000 --> 00:43:16,240
time

1216
00:43:16,240 --> 00:43:18,240
so we wanted to look into a setting

1217
00:43:18,240 --> 00:43:20,400
where these um

1218
00:43:20,400 --> 00:43:22,880
the this was attack does not apply um

1219
00:43:22,880 --> 00:43:24,480
which is the sequential setting so in

1220
00:43:24,480 --> 00:43:26,560
the sequential setting the user needs to

1221
00:43:26,560 --> 00:43:28,640
always close signing sessions before

1222
00:43:28,640 --> 00:43:30,560
opening the next one

1223
00:43:30,560 --> 00:43:33,119
um and there we can show that in the agm

1224
00:43:33,119 --> 00:43:34,880
plus one without

1225
00:43:34,880 --> 00:43:36,560
was

1226
00:43:36,560 --> 00:43:38,720
blind snow signatures are secure under

1227
00:43:38,720 --> 00:43:40,640
one more d-lock

1228
00:43:40,640 --> 00:43:43,200
and we also show that our reduction is

1229
00:43:43,200 --> 00:43:46,000
optimal in the sense that it makes as

1230
00:43:46,000 --> 00:43:48,720
many d-log queries as it needs to make

1231
00:43:48,720 --> 00:43:51,439
but not more

1232
00:43:51,760 --> 00:43:53,760
on the other hand we consider a scheme

1233
00:43:53,760 --> 00:43:56,000
by abe

1234
00:43:56,000 --> 00:43:57,280
this scheme

1235
00:43:57,280 --> 00:44:00,000
is based on an or proof so you have this

1236
00:44:00,000 --> 00:44:02,160
screen branch of the or proof which is

1237
00:44:02,160 --> 00:44:05,599
just basically a snore blind signature

1238
00:44:05,599 --> 00:44:07,760
but we also have this pink part of the

1239
00:44:07,760 --> 00:44:10,560
or proof which has more structure

1240
00:44:10,560 --> 00:44:12,960
and so this has two interesting

1241
00:44:12,960 --> 00:44:15,200
properties one of them is that you can

1242
00:44:15,200 --> 00:44:17,599
use either branch to generate a

1243
00:44:17,599 --> 00:44:19,680
signature so in the honest setting of an

1244
00:44:19,680 --> 00:44:22,560
honor signer one of these branches the

1245
00:44:22,560 --> 00:44:24,880
pink branch is not known the the sort of

1246
00:44:24,880 --> 00:44:27,200
discrete logs are not known to the

1247
00:44:27,200 --> 00:44:29,599
signer

1248
00:44:29,599 --> 00:44:31,520
but the reduction can know the discrete

1249
00:44:31,520 --> 00:44:33,040
logs and

1250
00:44:33,040 --> 00:44:35,680
so sign also using the pink branch and

1251
00:44:35,680 --> 00:44:37,599
the other property is that they are

1252
00:44:37,599 --> 00:44:39,680
blinded in such a way that there is a

1253
00:44:39,680 --> 00:44:40,880
hidden link

1254
00:44:40,880 --> 00:44:43,920
between signing sessions and signatures

1255
00:44:43,920 --> 00:44:45,440
and this

1256
00:44:45,440 --> 00:44:48,839
allows us to avoid these raw style

1257
00:44:48,839 --> 00:44:51,520
attacks so we wanted to look into this

1258
00:44:51,520 --> 00:44:53,440
scheme because

1259
00:44:53,440 --> 00:44:55,680
on the one hand it's already

1260
00:44:55,680 --> 00:44:57,680
it's considered to be immune to the

1261
00:44:57,680 --> 00:44:58,960
worse attack

1262
00:44:58,960 --> 00:45:00,880
but the original proof for the scheme

1263
00:45:00,880 --> 00:45:03,280
was flawed so it was originally proved

1264
00:45:03,280 --> 00:45:05,280
using this forking technique

1265
00:45:05,280 --> 00:45:08,079
and the floor was found by okubo and abe

1266
00:45:08,079 --> 00:45:10,480
who provided a proof in the ggm

1267
00:45:10,480 --> 00:45:14,240
so we looked into the scheme

1268
00:45:14,400 --> 00:45:17,599
in the agm plus random oracle model and

1269
00:45:17,599 --> 00:45:19,920
we show that it is concurrently secure

1270
00:45:19,920 --> 00:45:21,760
under discrete logs so concurrently

1271
00:45:21,760 --> 00:45:23,440
secure means

1272
00:45:23,440 --> 00:45:25,040
the adversary is allowed to interleave

1273
00:45:25,040 --> 00:45:27,599
the signing sessions as well

1274
00:45:27,599 --> 00:45:30,319
and we also show that there is a very

1275
00:45:30,319 --> 00:45:32,880
straightforward extension of the scheme

1276
00:45:32,880 --> 00:45:34,880
so that we can allow also for partial

1277
00:45:34,880 --> 00:45:36,960
blindness that means

1278
00:45:36,960 --> 00:45:39,200
that the signer and the user can agree

1279
00:45:39,200 --> 00:45:40,880
on some information

1280
00:45:40,880 --> 00:45:42,960
and then the signature will be valid

1281
00:45:42,960 --> 00:45:46,720
with respect to that shared information

1282
00:45:46,720 --> 00:45:49,839
so uh that's it for my talk um i thank

1283
00:45:49,839 --> 00:45:51,760
you for your attention and i'm happy to

1284
00:45:51,760 --> 00:45:54,800
take your questions

1285
00:45:55,040 --> 00:45:57,520
uh thank you julia um

1286
00:45:57,520 --> 00:46:00,560
we will take questions now so please

1287
00:46:00,560 --> 00:46:02,720
raise your hand or

1288
00:46:02,720 --> 00:46:03,839
use the

1289
00:46:03,839 --> 00:46:07,359
chat on zoom or zulu

1290
00:46:10,640 --> 00:46:12,560
so maybe i could start out the question

1291
00:46:12,560 --> 00:46:15,680
so uh um for the blind signature i do

1292
00:46:15,680 --> 00:46:17,280
remember that for schnorr's blind

1293
00:46:17,280 --> 00:46:18,960
signature there's some impossibility

1294
00:46:18,960 --> 00:46:20,640
claiming that you can't have a security

1295
00:46:20,640 --> 00:46:22,160
proof in the wrong

1296
00:46:22,160 --> 00:46:24,560
are there some result results like that

1297
00:46:24,560 --> 00:46:25,359
for the

1298
00:46:25,359 --> 00:46:26,839
scheme

1299
00:46:26,839 --> 00:46:30,079
or so so this this is a possibility

1300
00:46:30,079 --> 00:46:32,079
result i guess you're referring to this

1301
00:46:32,079 --> 00:46:33,280
work

1302
00:46:33,280 --> 00:46:35,280
um

1303
00:46:35,280 --> 00:46:37,200
this applies to one witness blind

1304
00:46:37,200 --> 00:46:39,359
signature schemes and because in the

1305
00:46:39,359 --> 00:46:42,560
other scheme you have um two possible

1306
00:46:42,560 --> 00:46:44,720
branches of this or proof

1307
00:46:44,720 --> 00:46:48,000
this doesn't apply there because

1308
00:46:48,000 --> 00:46:50,560
you could so so that basically the idea

1309
00:46:50,560 --> 00:46:53,520
of this of this is you somehow manage as

1310
00:46:53,520 --> 00:46:55,599
a meter reduction to extract this one

1311
00:46:55,599 --> 00:46:58,400
single witness with which you can sign

1312
00:46:58,400 --> 00:47:00,480
but here you have more so in other

1313
00:47:00,480 --> 00:47:02,079
scheme you have more than one witness so

1314
00:47:02,079 --> 00:47:05,280
i don't think this result applies there

1315
00:47:05,280 --> 00:47:07,119
so do you think you know at some point

1316
00:47:07,119 --> 00:47:09,440
you'll be able to get rid of this agm

1317
00:47:09,440 --> 00:47:13,119
and prove a bit scheme in the rom

1318
00:47:13,200 --> 00:47:14,800
um

1319
00:47:14,800 --> 00:47:18,640
so i think this is quite tricky to do

1320
00:47:18,640 --> 00:47:22,160
because because if you have two

1321
00:47:22,160 --> 00:47:24,400
so basically if you if you wanted

1322
00:47:24,400 --> 00:47:26,160
uh so there's this witness

1323
00:47:26,160 --> 00:47:28,160
indistinguishability of the or proof and

1324
00:47:28,160 --> 00:47:30,480
if you rewind the way so if as a

1325
00:47:30,480 --> 00:47:32,480
reduction you rewind the adversary and

1326
00:47:32,480 --> 00:47:34,160
then you redo

1327
00:47:34,160 --> 00:47:36,160
um

1328
00:47:36,160 --> 00:47:39,599
the uh

1329
00:47:39,599 --> 00:47:42,400
and then you redo it

1330
00:47:42,400 --> 00:47:46,400
um it leaks which written which witness

1331
00:47:46,400 --> 00:47:49,359
um was used by the reduction

1332
00:47:49,359 --> 00:47:51,599
and so um

1333
00:47:51,599 --> 00:47:54,319
so there's uh on the one hand you could

1334
00:47:54,319 --> 00:47:56,240
you could see that there are proofs for

1335
00:47:56,240 --> 00:47:59,200
these oil proof uh based schemes but

1336
00:47:59,200 --> 00:48:01,280
also here you have this additionally

1337
00:48:01,280 --> 00:48:03,920
this computationally hidden link

1338
00:48:03,920 --> 00:48:05,040
so

1339
00:48:05,040 --> 00:48:06,559
so there's quite a lot of structure so i

1340
00:48:06,559 --> 00:48:08,640
think it's quite tricky to prove this to

1341
00:48:08,640 --> 00:48:10,480
be uh secure

1342
00:48:10,480 --> 00:48:12,319
i see okay

1343
00:48:12,319 --> 00:48:13,839
um

1344
00:48:13,839 --> 00:48:14,960
are there

1345
00:48:14,960 --> 00:48:16,640
questions right now

1346
00:48:16,640 --> 00:48:19,040
so if not maybe i could ask uh one

1347
00:48:19,040 --> 00:48:20,400
follow-up question it's a bit more

1348
00:48:20,400 --> 00:48:21,920
conceptual but uh

1349
00:48:21,920 --> 00:48:25,440
what makes asian like you know very

1350
00:48:25,440 --> 00:48:27,599
useful in this setting what i don't know

1351
00:48:27,599 --> 00:48:29,680
much about agm so it'll be helpful if

1352
00:48:29,680 --> 00:48:32,480
you could shed some light into that

1353
00:48:32,480 --> 00:48:35,599
yes so so the agm basically is a

1354
00:48:35,599 --> 00:48:38,160
replacement for the rewinding step in

1355
00:48:38,160 --> 00:48:39,520
this setting so in the setting of the

1356
00:48:39,520 --> 00:48:41,119
blind signatures

1357
00:48:41,119 --> 00:48:43,520
and the and there's more generally these

1358
00:48:43,520 --> 00:48:45,599
these kind of snore style signatures

1359
00:48:45,599 --> 00:48:47,119
where you have

1360
00:48:47,119 --> 00:48:49,359
uh in the end the signature is some kind

1361
00:48:49,359 --> 00:48:51,680
of fiat chamier proof of

1362
00:48:51,680 --> 00:48:55,118
knowledge knowledge of a d-log

1363
00:48:55,280 --> 00:48:56,319
because

1364
00:48:56,319 --> 00:48:57,760
the adversary

1365
00:48:57,760 --> 00:48:59,520
needs to be algebraic and so he needs to

1366
00:48:59,520 --> 00:49:02,480
submit where presentations here when he

1367
00:49:02,480 --> 00:49:04,559
makes a hash query

1368
00:49:04,559 --> 00:49:07,040
and these representations can basically

1369
00:49:07,040 --> 00:49:09,440
be used as a replacement for the first

1370
00:49:09,440 --> 00:49:10,559
run of

1371
00:49:10,559 --> 00:49:13,599
the rewinding proof

1372
00:49:13,599 --> 00:49:17,079
i see okay

1373
00:49:20,000 --> 00:49:21,280
we have

1374
00:49:21,280 --> 00:49:23,839
one more minute that we can use

1375
00:49:23,839 --> 00:49:27,359
if anybody has any questions

1376
00:49:27,440 --> 00:49:28,720
um

1377
00:49:28,720 --> 00:49:30,720
if not uh maybe we could move on to the

1378
00:49:30,720 --> 00:49:33,520
next talk and if anybody has you know uh

1379
00:49:33,520 --> 00:49:35,760
comes up with any idea just please ask

1380
00:49:35,760 --> 00:49:37,200
them on

1381
00:49:37,200 --> 00:49:38,720
the chat

1382
00:49:38,720 --> 00:49:40,960
okay uh thank you julia let's move on to

1383
00:49:40,960 --> 00:49:42,480
the next talk

1384
00:49:42,480 --> 00:49:44,240
um the title is efficient lighter space

1385
00:49:44,240 --> 00:49:46,640
blind signatures via gaussian one-time

1386
00:49:46,640 --> 00:49:49,280
signatures uh the authors are vadim

1387
00:49:49,280 --> 00:49:51,680
lewis

1388
00:49:51,680 --> 00:49:54,160
and maxine plancon and maxine will be

1389
00:49:54,160 --> 00:49:55,920
giving the talk i think

1390
00:49:55,920 --> 00:49:57,280
can you hear me

1391
00:49:57,280 --> 00:49:58,559
yep we can

1392
00:49:58,559 --> 00:49:59,920
okay

1393
00:49:59,920 --> 00:50:03,280
uh okay so i should start so yeah so

1394
00:50:03,280 --> 00:50:05,599
this talk is is uh

1395
00:50:05,599 --> 00:50:08,880
about this uh blind signature scheme so

1396
00:50:08,880 --> 00:50:11,119
first let me start with a redundant

1397
00:50:11,119 --> 00:50:13,200
reminder from five minutes ago

1398
00:50:13,200 --> 00:50:15,520
so in a blind signature we have two

1399
00:50:15,520 --> 00:50:18,160
parties the user and the signer and in

1400
00:50:18,160 --> 00:50:19,839
the end of their interaction the user

1401
00:50:19,839 --> 00:50:21,920
should have a signature of his message

1402
00:50:21,920 --> 00:50:23,839
under the public key of the signer and

1403
00:50:23,839 --> 00:50:25,760
we also want the designer doesn't learn

1404
00:50:25,760 --> 00:50:28,079
anything about the messages signing

1405
00:50:28,079 --> 00:50:30,000
so

1406
00:50:30,000 --> 00:50:31,920
the security is captured by two notions

1407
00:50:31,920 --> 00:50:34,240
which were mentioned 10 minutes ago so

1408
00:50:34,240 --> 00:50:36,079
the first one is blindness which means

1409
00:50:36,079 --> 00:50:37,520
that we don't want the signer to learn

1410
00:50:37,520 --> 00:50:39,920
anything about the message he's signing

1411
00:50:39,920 --> 00:50:41,760
and the second one is one more

1412
00:50:41,760 --> 00:50:43,760
informability so

1413
00:50:43,760 --> 00:50:46,240
uh the idea is after some number l of

1414
00:50:46,240 --> 00:50:48,319
interactions between the user and the

1415
00:50:48,319 --> 00:50:50,720
signer the user should not be able to

1416
00:50:50,720 --> 00:50:52,480
produce more than l

1417
00:50:52,480 --> 00:50:57,359
uh signatures okay so now i um

1418
00:50:57,359 --> 00:50:59,680
give a summary of the blind signature we

1419
00:50:59,680 --> 00:51:00,800
construct

1420
00:51:00,800 --> 00:51:03,599
so it's built upon three ingredients the

1421
00:51:03,599 --> 00:51:05,520
first one is an encryption scheme that

1422
00:51:05,520 --> 00:51:07,040
tolerates some computations on the

1423
00:51:07,040 --> 00:51:09,200
scythe text but i'll come back to that

1424
00:51:09,200 --> 00:51:11,920
on the next slide the second one is a

1425
00:51:11,920 --> 00:51:14,000
one-time signature scheme

1426
00:51:14,000 --> 00:51:14,800
and

1427
00:51:14,800 --> 00:51:17,520
the last one is a set membership proof

1428
00:51:17,520 --> 00:51:18,800
is there a noise proof that we're going

1429
00:51:18,800 --> 00:51:19,760
to use

1430
00:51:19,760 --> 00:51:22,160
as a black box i'll come back to those

1431
00:51:22,160 --> 00:51:24,160
on the next slide so

1432
00:51:24,160 --> 00:51:26,160
uh just a quick mention that this scheme

1433
00:51:26,160 --> 00:51:28,160
has only two rounds or two

1434
00:51:28,160 --> 00:51:30,160
communications so the user sends

1435
00:51:30,160 --> 00:51:31,920
something to the signer and the signer

1436
00:51:31,920 --> 00:51:33,680
response responds

1437
00:51:33,680 --> 00:51:36,319
and then the the user is able to have

1438
00:51:36,319 --> 00:51:37,839
his signature

1439
00:51:37,839 --> 00:51:40,559
so our scheme generates a number 2 to

1440
00:51:40,559 --> 00:51:41,839
the 18

1441
00:51:41,839 --> 00:51:44,319
signatures for the parameters we choose

1442
00:51:44,319 --> 00:51:47,599
and the signature is about 150 kilobytes

1443
00:51:47,599 --> 00:51:48,559
okay

1444
00:51:48,559 --> 00:51:50,640
so now about the intuition of how we

1445
00:51:50,640 --> 00:51:53,599
construct this blind signature so

1446
00:51:53,599 --> 00:51:56,160
let me just explain real quick a naive

1447
00:51:56,160 --> 00:51:57,280
approach

1448
00:51:57,280 --> 00:51:59,280
so let's say that the public key is a

1449
00:51:59,280 --> 00:52:01,200
collection of and one-time signature

1450
00:52:01,200 --> 00:52:02,880
public keys

1451
00:52:02,880 --> 00:52:05,119
um so in in the beginning the user will

1452
00:52:05,119 --> 00:52:06,800
send his message to designer so this is

1453
00:52:06,800 --> 00:52:09,200
definitely not uh blind

1454
00:52:09,200 --> 00:52:11,119
and the signer sends the one-time

1455
00:52:11,119 --> 00:52:14,160
signature of this message uh for

1456
00:52:14,160 --> 00:52:16,400
one of the public keys to the user and

1457
00:52:16,400 --> 00:52:17,280
then

1458
00:52:17,280 --> 00:52:19,520
the blind signature is a zero knowledge

1459
00:52:19,520 --> 00:52:21,280
proof of knowledge of the one-time

1460
00:52:21,280 --> 00:52:23,200
signature

1461
00:52:23,200 --> 00:52:26,960
okay so now uh in our construction we

1462
00:52:26,960 --> 00:52:30,000
do some changes on the previous

1463
00:52:30,000 --> 00:52:31,119
id

1464
00:52:31,119 --> 00:52:32,960
so instead of sending his message

1465
00:52:32,960 --> 00:52:35,359
directly the user encrypts his message

1466
00:52:35,359 --> 00:52:38,000
with the encryption scheme i talked

1467
00:52:38,000 --> 00:52:39,760
about on the previous slide

1468
00:52:39,760 --> 00:52:40,960
so

1469
00:52:40,960 --> 00:52:43,040
this encryption scheme allows for the

1470
00:52:43,040 --> 00:52:44,880
signer on the next step to

1471
00:52:44,880 --> 00:52:47,440
homomorphically compute the one-time

1472
00:52:47,440 --> 00:52:50,240
signature from this ciphertext

1473
00:52:50,240 --> 00:52:52,800
which he sends to the user and so the

1474
00:52:52,800 --> 00:52:56,720
user can decrypt the one-time signature

1475
00:52:56,720 --> 00:53:00,079
from the response of the signer and then

1476
00:53:00,079 --> 00:53:02,960
he gives a zero knowledge proof that he

1477
00:53:02,960 --> 00:53:04,000
learned

1478
00:53:04,000 --> 00:53:06,400
that he knows this one time signature

1479
00:53:06,400 --> 00:53:09,040
for one of the public keys

1480
00:53:09,040 --> 00:53:10,640
okay

1481
00:53:10,640 --> 00:53:13,359
now just a quick note on the parameters

1482
00:53:13,359 --> 00:53:16,000
of our uh blind signature so the public

1483
00:53:16,000 --> 00:53:18,480
key is about uh 1.3 megabyte the secret

1484
00:53:18,480 --> 00:53:21,599
key is 75 kilobyte the signature is 150

1485
00:53:21,599 --> 00:53:24,400
kilobyte and the communications is 16

1486
00:53:24,400 --> 00:53:25,839
megabytes

1487
00:53:25,839 --> 00:53:29,760
and yeah that's it thanks

1488
00:53:29,760 --> 00:53:31,119
thank you maxime

1489
00:53:31,119 --> 00:53:34,480
we have plenty of time for questions now

1490
00:53:34,480 --> 00:53:38,000
if anybody has any please

1491
00:53:40,839 --> 00:53:44,079
ask so yes we have one on chat uh it's

1492
00:53:44,079 --> 00:53:45,920
from benedict about the proof of

1493
00:53:45,920 --> 00:53:47,520
knowledge does it need to be straight

1494
00:53:47,520 --> 00:53:50,319
line extractable

1495
00:53:50,319 --> 00:53:52,480
does it need to be what sorry it need to

1496
00:53:52,480 --> 00:53:54,800
be straight line extractable

1497
00:53:54,800 --> 00:53:57,520
straight line so it's one of those uh

1498
00:53:57,520 --> 00:53:59,359
niz case where you know the proof of

1499
00:53:59,359 --> 00:54:01,440
knowledge it's not via rewinding the

1500
00:54:01,440 --> 00:54:04,400
adversary but you can extract directly

1501
00:54:04,400 --> 00:54:06,880
from the proof using some simulation

1502
00:54:06,880 --> 00:54:10,240
trapdoor um so in this construction we

1503
00:54:10,240 --> 00:54:13,280
which is a very specific one i mean for

1504
00:54:13,280 --> 00:54:15,599
for the instantiation we have

1505
00:54:15,599 --> 00:54:18,480
um but yeah maybe it could be no i don't

1506
00:54:18,480 --> 00:54:20,400
think no i don't think you could use

1507
00:54:20,400 --> 00:54:22,800
another one just directly and the one we

1508
00:54:22,800 --> 00:54:24,480
use we rewind

1509
00:54:24,480 --> 00:54:27,839
for extracting we can't extract directly

1510
00:54:27,839 --> 00:54:30,160
so uh yeah uh

1511
00:54:30,160 --> 00:54:33,040
it's my question so i was just thinking

1512
00:54:33,040 --> 00:54:35,599
about the talk that julia gave and she

1513
00:54:35,599 --> 00:54:36,960
mentioned that

1514
00:54:36,960 --> 00:54:38,960
that there may be a problem

1515
00:54:38,960 --> 00:54:40,640
with rewinding and witness

1516
00:54:40,640 --> 00:54:43,680
indistinguishability so that was kind of

1517
00:54:43,680 --> 00:54:45,760
my concern

1518
00:54:45,760 --> 00:54:46,559
but

1519
00:54:46,559 --> 00:54:48,000
i don't know if you use witness

1520
00:54:48,000 --> 00:54:50,000
indistinguishability in your one-time

1521
00:54:50,000 --> 00:54:52,240
signature so i think that the the

1522
00:54:52,240 --> 00:54:53,440
problems that were discussed in the

1523
00:54:53,440 --> 00:54:55,760
previous uh talk do not really apply

1524
00:54:55,760 --> 00:54:58,160
here because the so the

1525
00:54:58,160 --> 00:55:00,160
the zero knowledge proofs are done by

1526
00:55:00,160 --> 00:55:01,440
the user

1527
00:55:01,440 --> 00:55:04,480
and and not the signer

1528
00:55:04,480 --> 00:55:06,960
so in the end designer is only going to

1529
00:55:06,960 --> 00:55:09,920
to to give his response to the user and

1530
00:55:09,920 --> 00:55:11,599
this response is just like some

1531
00:55:11,599 --> 00:55:13,760
computation on ciphertext

1532
00:55:13,760 --> 00:55:15,760
and

1533
00:55:15,760 --> 00:55:16,960
yeah

1534
00:55:16,960 --> 00:55:17,330
maybe

1535
00:55:17,330 --> 00:55:19,119
[Music]

1536
00:55:19,119 --> 00:55:20,720
okay yeah thank you i don't think i

1537
00:55:20,720 --> 00:55:23,040
don't think that the the these remarks

1538
00:55:23,040 --> 00:55:24,720
apply to our scene

1539
00:55:24,720 --> 00:55:27,040
okay

1540
00:55:28,000 --> 00:55:31,359
are there any other questions

1541
00:55:33,599 --> 00:55:35,200
so can you explain like why the

1542
00:55:35,200 --> 00:55:37,680
communication cost is so large compared

1543
00:55:37,680 --> 00:55:39,520
to the signature which part

1544
00:55:39,520 --> 00:55:40,240
uh

1545
00:55:40,240 --> 00:55:42,079
incurs this

1546
00:55:42,079 --> 00:55:43,040
um

1547
00:55:43,040 --> 00:55:46,079
yes so

1548
00:55:46,160 --> 00:55:49,440
um the thing is so the

1549
00:55:49,440 --> 00:55:51,599
the the encryption scheme we use is a

1550
00:55:51,599 --> 00:55:54,079
rig of type encryption

1551
00:55:54,079 --> 00:55:55,440
and so

1552
00:55:55,440 --> 00:55:57,440
the user sends his encryption to to

1553
00:55:57,440 --> 00:55:59,680
designer and then the signer will

1554
00:55:59,680 --> 00:56:01,920
compute this one-time signature which

1555
00:56:01,920 --> 00:56:04,960
increases the the the so the size of the

1556
00:56:04,960 --> 00:56:06,799
ciphertext by quite a bit

1557
00:56:06,799 --> 00:56:08,799
because so the the message is just one

1558
00:56:08,799 --> 00:56:10,720
polynomial but the the one-time

1559
00:56:10,720 --> 00:56:12,319
signature is a vector

1560
00:56:12,319 --> 00:56:13,920
so that that's the first thing and the

1561
00:56:13,920 --> 00:56:17,040
second one is um when the signer does

1562
00:56:17,040 --> 00:56:19,119
this computation in the ciphertext he

1563
00:56:19,119 --> 00:56:20,720
has to mask

1564
00:56:20,720 --> 00:56:23,920
uh to add like some extra noise in the

1565
00:56:23,920 --> 00:56:25,359
in the

1566
00:56:25,359 --> 00:56:27,119
like some extra randomness which

1567
00:56:27,119 --> 00:56:29,119
increases by quite a lot

1568
00:56:29,119 --> 00:56:32,079
the every every like all the parameters

1569
00:56:32,079 --> 00:56:35,520
and so on and plus we use a different uh

1570
00:56:35,520 --> 00:56:38,319
uh modulus uh for the encryption so it

1571
00:56:38,319 --> 00:56:40,880
is on this like i don't didn't have time

1572
00:56:40,880 --> 00:56:42,960
to explain everything but we use a

1573
00:56:42,960 --> 00:56:44,880
different modulus for the encryption

1574
00:56:44,880 --> 00:56:48,720
which is uh 128

1575
00:56:49,200 --> 00:56:50,000
bits

1576
00:56:50,000 --> 00:56:51,760
so right the communication gets pretty

1577
00:56:51,760 --> 00:56:52,640
big

1578
00:56:52,640 --> 00:56:54,799
so i guess this is yeah

1579
00:56:54,799 --> 00:56:57,200
like a naive question but even if you're

1580
00:56:57,200 --> 00:56:59,040
using a one-time signature and i guess

1581
00:56:59,040 --> 00:57:00,480
you only need to

1582
00:57:00,480 --> 00:57:02,799
kind of hide the noise once but even

1583
00:57:02,799 --> 00:57:05,280
then even that will still like incur a

1584
00:57:05,280 --> 00:57:06,319
lot of

1585
00:57:06,319 --> 00:57:08,960
noise then

1586
00:57:09,200 --> 00:57:10,559
um

1587
00:57:10,559 --> 00:57:12,000
because usually i i thought like you

1588
00:57:12,000 --> 00:57:14,319
know uh if we have if we want to hide

1589
00:57:14,319 --> 00:57:15,280
the same

1590
00:57:15,280 --> 00:57:17,280
secret for you know two times then the

1591
00:57:17,280 --> 00:57:19,520
noise will depend on like square root of

1592
00:57:19,520 --> 00:57:21,040
q the gaussian parameters that you have

1593
00:57:21,040 --> 00:57:22,799
to add but if you're using a one time

1594
00:57:22,799 --> 00:57:24,880
signature i thought it would be a you

1595
00:57:24,880 --> 00:57:27,520
know that it wouldn't be that bad but uh

1596
00:57:27,520 --> 00:57:28,480
i guess

1597
00:57:28,480 --> 00:57:30,720
so we're using uh so

1598
00:57:30,720 --> 00:57:33,119
in the end we have we have n n public

1599
00:57:33,119 --> 00:57:34,640
keys for for

1600
00:57:34,640 --> 00:57:36,160
one time signatures and we are we're

1601
00:57:36,160 --> 00:57:39,280
going to use them only once

1602
00:57:39,280 --> 00:57:40,799
so

1603
00:57:40,799 --> 00:57:42,400
but even then i guess the noise you have

1604
00:57:42,400 --> 00:57:44,960
to add has like a significant impact and

1605
00:57:44,960 --> 00:57:48,640
then yeah yes sure yeah

1606
00:57:48,640 --> 00:57:50,160
um

1607
00:57:50,160 --> 00:57:53,040
and yeah if you this is uh one of the

1608
00:57:53,040 --> 00:57:54,559
points discussed in the in the long

1609
00:57:54,559 --> 00:57:56,480
video issue which you want to have

1610
00:57:56,480 --> 00:57:57,760
ah okay

1611
00:57:57,760 --> 00:58:00,000
great um so

1612
00:58:00,000 --> 00:58:01,520
i guess we have time so maybe i could

1613
00:58:01,520 --> 00:58:03,599
ask some more questions so here on this

1614
00:58:03,599 --> 00:58:05,200
slide

1615
00:58:05,200 --> 00:58:07,280
i guess like from what i've understood

1616
00:58:07,280 --> 00:58:09,280
you're using a linearly homomorphic uh

1617
00:58:09,280 --> 00:58:11,839
encryption scheme right yes

1618
00:58:11,839 --> 00:58:14,400
in that case like um can your i feel

1619
00:58:14,400 --> 00:58:15,760
like this is a new approach to

1620
00:58:15,760 --> 00:58:17,760
constructing blind signatures

1621
00:58:17,760 --> 00:58:20,480
um can it be done from classical

1622
00:58:20,480 --> 00:58:22,160
assumptions in a secure way i mean like

1623
00:58:22,160 --> 00:58:25,040
in an efficient way

1624
00:58:26,079 --> 00:58:28,400
um

1625
00:58:28,400 --> 00:58:30,559
i have no idea so

1626
00:58:30,559 --> 00:58:33,839
all right i mean uh

1627
00:58:34,720 --> 00:58:35,599
i

1628
00:58:35,599 --> 00:58:37,440
too complicated i i i don't know i don't

1629
00:58:37,440 --> 00:58:38,880
want to say something

1630
00:58:38,880 --> 00:58:39,839
i don't know

1631
00:58:39,839 --> 00:58:43,279
okay and no problem no pressure

1632
00:58:43,520 --> 00:58:44,559
um

1633
00:58:44,559 --> 00:58:46,559
also i i guess the final question that i

1634
00:58:46,559 --> 00:58:49,040
i do want to ask is that um

1635
00:58:49,040 --> 00:58:51,839
is there do you view

1636
00:58:51,839 --> 00:58:53,839
do you think there's a way to kind of

1637
00:58:53,839 --> 00:58:55,599
get rid of this bounded polynomial

1638
00:58:55,599 --> 00:58:57,760
notion because obviously the downside is

1639
00:58:57,760 --> 00:59:00,880
that you need to commit to this end keys

1640
00:59:00,880 --> 00:59:02,079
in advance

1641
00:59:02,079 --> 00:59:03,760
do you think you can adaptively change

1642
00:59:03,760 --> 00:59:06,640
this to have a more standard notion of

1643
00:59:06,640 --> 00:59:09,599
portability so we don't need to commit

1644
00:59:09,599 --> 00:59:11,680
to the end keys

1645
00:59:11,680 --> 00:59:14,720
so the so in the the public keys is made

1646
00:59:14,720 --> 00:59:16,799
of uh and one time signature about the

1647
00:59:16,799 --> 00:59:19,760
keys but the thing is so

1648
00:59:19,760 --> 00:59:22,400
instead in the usual one-time signature

1649
00:59:22,400 --> 00:59:24,480
that we have for lettuces

1650
00:59:24,480 --> 00:59:27,680
um we first sample like the the secret s

1651
00:59:27,680 --> 00:59:29,040
and the noise y

1652
00:59:29,040 --> 00:59:30,640
and then we output the public key which

1653
00:59:30,640 --> 00:59:32,720
is going to be like a s and a y

1654
00:59:32,720 --> 00:59:34,799
and here we do it the other way we have

1655
00:59:34,799 --> 00:59:38,240
a trapdoor in a and we we just have uh

1656
00:59:38,240 --> 00:59:40,319
as the public key some

1657
00:59:40,319 --> 00:59:42,319
some thing that was going to generate

1658
00:59:42,319 --> 00:59:45,839
the v's and the ws which are a s and a y

1659
00:59:45,839 --> 00:59:48,559
and then we we sample the the secrets at

1660
00:59:48,559 --> 00:59:49,839
each

1661
00:59:49,839 --> 00:59:52,880
iteration so right yeah what i meant is

1662
00:59:52,880 --> 00:59:54,960
that at least like in the signing

1663
00:59:54,960 --> 00:59:57,119
process you need to commit to some end

1664
00:59:57,119 --> 00:59:59,119
information right so you can't just make

1665
00:59:59,119 --> 01:00:01,839
that larger

1666
01:00:01,920 --> 01:00:05,040
in this i need to commit to so in the

1667
01:00:05,040 --> 01:00:06,799
signing process you're performing an or

1668
01:00:06,799 --> 01:00:09,119
proof right of this end public key so

1669
01:00:09,119 --> 01:00:10,240
you can't

1670
01:00:10,240 --> 01:00:12,880
sign more than n i think

1671
01:00:12,880 --> 01:00:15,839
yes no we yeah it only tolerates this uh

1672
01:00:15,839 --> 01:00:18,319
number end of signature in total

1673
01:00:18,319 --> 01:00:19,599
do you think there is a way to get

1674
01:00:19,599 --> 01:00:21,440
around that

1675
01:00:21,440 --> 01:00:22,110
um

1676
01:00:22,110 --> 01:00:24,240
[Music]

1677
01:00:24,240 --> 01:00:26,160
so for for this construction obviously

1678
01:00:26,160 --> 01:00:28,720
not we really need it

1679
01:00:28,720 --> 01:00:30,319
um but

1680
01:00:30,319 --> 01:00:31,760
yeah maybe there's

1681
01:00:31,760 --> 01:00:34,400
some other ways to i think

1682
01:00:34,400 --> 01:00:38,240
i read a paper uh by uh damian steli

1683
01:00:38,240 --> 01:00:40,880
that does something that doesn't require

1684
01:00:40,880 --> 01:00:43,680
this kind of but i i i don't remember

1685
01:00:43,680 --> 01:00:44,640
enough to

1686
01:00:44,640 --> 01:00:46,000
okay

1687
01:00:46,000 --> 01:00:47,119
all right great

1688
01:00:47,119 --> 01:00:48,480
thank you though uh it was an

1689
01:00:48,480 --> 01:00:51,520
interesting talk so um i think that uses

1690
01:00:51,520 --> 01:00:52,400
up

1691
01:00:52,400 --> 01:00:53,200
um

1692
01:00:53,200 --> 01:00:55,440
that's the all the time that we have now

1693
01:00:55,440 --> 01:00:57,200
so thank you maxine

1694
01:00:57,200 --> 01:00:59,359
uh so i would like to end this uh

1695
01:00:59,359 --> 01:01:02,160
session by again like saying uh thank

1696
01:01:02,160 --> 01:01:04,240
you to every speaker and everybody that

1697
01:01:04,240 --> 01:01:05,760
participated in

1698
01:01:05,760 --> 01:01:07,760
i mean in this uh

1699
01:01:07,760 --> 01:01:11,119
this talk and um also any future people

1700
01:01:11,119 --> 01:01:12,720
that might be looking at the youtube

1701
01:01:12,720 --> 01:01:14,160
video in the future

1702
01:01:14,160 --> 01:01:15,920
all right so uh yeah we could stop

1703
01:01:15,920 --> 01:01:17,040
clever

1704
01:01:17,040 --> 01:01:18,400
no way i guess we're going to the

1705
01:01:18,400 --> 01:01:20,559
closing remark after this so uh for

1706
01:01:20,559 --> 01:01:22,160
everybody just like uh

1707
01:01:22,160 --> 01:01:24,559
just be here i guess we're going to be

1708
01:01:24,559 --> 01:01:27,359
starting to closing your mark right now

1709
01:01:27,359 --> 01:01:29,920
yeah yeah

1710
01:01:29,920 --> 01:01:32,240
thank you shu uh for like sharing the

1711
01:01:32,240 --> 01:01:33,839
session

1712
01:01:33,839 --> 01:01:36,319
yeah we can start the closing remarks on

1713
01:01:36,319 --> 01:01:39,440
time and uh changi will give out like

1714
01:01:39,440 --> 01:01:42,319
second remarks

1715
01:01:42,880 --> 01:01:43,760
okay

1716
01:01:43,760 --> 01:01:46,640
uh can you see this one

1717
01:01:46,640 --> 01:01:49,920
yes uh but please go

1718
01:01:49,920 --> 01:01:51,280
for

1719
01:01:51,280 --> 01:01:53,839
threshold

1720
01:02:13,200 --> 01:02:14,799
okay um

1721
01:02:14,799 --> 01:02:16,559
oh stop like

1722
01:02:16,559 --> 01:02:20,960
we cannot see like the slideshow

1723
01:02:20,960 --> 01:02:23,200
yeah

1724
01:02:23,440 --> 01:02:25,039
yeah okay

1725
01:02:25,039 --> 01:02:27,280
okay so yes

1726
01:02:27,280 --> 01:02:28,700
it's just

1727
01:02:28,700 --> 01:02:31,440
[Music]

1728
01:02:31,440 --> 01:02:34,440
no

1729
01:02:34,640 --> 01:02:36,319
oh

1730
01:02:36,319 --> 01:02:37,680
we could see

1731
01:02:37,680 --> 01:02:40,000
that but now

1732
01:02:40,000 --> 01:02:42,160
we did see it briefly

1733
01:02:42,160 --> 01:02:44,799
yeah

1734
01:02:45,039 --> 01:02:46,839
okay okay i see

1735
01:02:46,839 --> 01:02:48,559
guys

1736
01:02:48,559 --> 01:02:50,480
okay this one

1737
01:02:50,480 --> 01:02:51,359
yes

1738
01:02:51,359 --> 01:02:53,680
okay

1739
01:02:58,240 --> 01:03:00,240
okay this is crossing the max from

1740
01:03:00,240 --> 01:03:01,599
general chairs

1741
01:03:01,599 --> 01:03:04,720
i'm genji shikata one of the

1742
01:03:04,720 --> 01:03:07,680
generic co-chairs

1743
01:03:07,680 --> 01:03:09,359
this is the

1744
01:03:09,359 --> 01:03:10,960
statistics

1745
01:03:10,960 --> 01:03:12,799
of bkc

1746
01:03:12,799 --> 01:03:14,079
this year

1747
01:03:14,079 --> 01:03:16,039
we had the

1748
01:03:16,039 --> 01:03:20,400
325 attendees from 41 countries

1749
01:03:20,400 --> 01:03:24,359
and in in particular uh

1750
01:03:24,359 --> 01:03:28,078
120 from asia

1751
01:03:28,160 --> 01:03:32,079
79 from american and

1752
01:03:32,079 --> 01:03:34,480
118

1753
01:03:34,480 --> 01:03:36,160
from europe

1754
01:03:36,160 --> 01:03:37,839
and thank you for joining this

1755
01:03:37,839 --> 01:03:41,039
conference and i apologize

1756
01:03:41,039 --> 01:03:42,000
uh

1757
01:03:42,000 --> 01:03:43,200
to the

1758
01:03:43,200 --> 01:03:46,640
attendees in europe because of uh

1759
01:03:46,640 --> 01:03:49,359
time difference

1760
01:03:49,359 --> 01:03:52,079
sorry for inconvenience

1761
01:03:52,079 --> 01:03:53,680
and

1762
01:03:53,680 --> 01:03:57,440
we tried we would like to thank

1763
01:03:57,440 --> 01:04:00,480
all participants or participants of this

1764
01:04:00,480 --> 01:04:01,760
conference

1765
01:04:01,760 --> 01:04:02,640
and

1766
01:04:02,640 --> 01:04:04,480
especially we

1767
01:04:04,480 --> 01:04:07,680
we thank to pkc student committee

1768
01:04:07,680 --> 01:04:11,680
in particular urine multi and the gotcha

1769
01:04:11,680 --> 01:04:13,720
pkc

1770
01:04:13,720 --> 01:04:18,799
2022 and we also drive to san gaiser

1771
01:04:18,799 --> 01:04:21,280
boat and the corn buyers emergency

1772
01:04:21,280 --> 01:04:22,880
committee

1773
01:04:22,880 --> 01:04:27,440
in particular michelle and the brian and

1774
01:04:27,440 --> 01:04:30,799
also uh we thank to

1775
01:04:30,799 --> 01:04:32,760
uh iscr bachelor conference

1776
01:04:32,760 --> 01:04:35,839
administrators kevin and kay

1777
01:04:35,839 --> 01:04:37,760
and finally

1778
01:04:37,760 --> 01:04:38,480
i

1779
01:04:38,480 --> 01:04:41,839
we would like to thank organizing local

1780
01:04:41,839 --> 01:04:44,720
organizing committee members

1781
01:04:44,720 --> 01:04:47,039
we do not have this conference without

1782
01:04:47,039 --> 01:04:49,680
their help

1783
01:04:50,079 --> 01:04:51,520
and also

1784
01:04:51,520 --> 01:04:54,880
we would like to thank

1785
01:04:54,880 --> 01:04:57,760
many foundations companies and the

1786
01:04:57,760 --> 01:05:02,880
institution for their financial support

1787
01:05:03,200 --> 01:05:05,520
okay

1788
01:05:06,079 --> 01:05:09,079
the next pkc uh

1789
01:05:09,079 --> 01:05:14,000
2023 is not uh not yet formally decided

1790
01:05:14,000 --> 01:05:15,119
but

1791
01:05:15,119 --> 01:05:16,480
i hear that

1792
01:05:16,480 --> 01:05:18,880
the candidate price is

1793
01:05:18,880 --> 01:05:21,359
at random u.s

1794
01:05:21,359 --> 01:05:23,680
uh okay finally

1795
01:05:23,680 --> 01:05:26,319
i tried to close this conference by

1796
01:05:26,319 --> 01:05:27,520
saying

1797
01:05:27,520 --> 01:05:30,920
thank you everyone

1798
01:05:42,720 --> 01:05:45,520
thank you

