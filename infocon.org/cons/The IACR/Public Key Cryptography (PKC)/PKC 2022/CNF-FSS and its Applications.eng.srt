1
00:00:00,960 --> 00:00:03,040
hi i'm paul bunn and i'm here to talk

2
00:00:03,040 --> 00:00:05,839
about joint work with ayala kusu-levitz

3
00:00:05,839 --> 00:00:07,600
and rafael ostrovsky

4
00:00:07,600 --> 00:00:12,000
cnf fss and its applications

5
00:00:12,000 --> 00:00:13,920
uh outline for the talk i'll give a

6
00:00:13,920 --> 00:00:15,280
little background

7
00:00:15,280 --> 00:00:16,800
talk about the two main results in our

8
00:00:16,800 --> 00:00:19,680
paper and conclude with the summary

9
00:00:19,680 --> 00:00:21,359
so starting with the background let's

10
00:00:21,359 --> 00:00:23,039
start with fss

11
00:00:23,039 --> 00:00:24,720
which is short for function secret

12
00:00:24,720 --> 00:00:26,000
sharing

13
00:00:26,000 --> 00:00:28,480
it was created by gilboa and asshai in

14
00:00:28,480 --> 00:00:31,199
2015 and followed up in several works

15
00:00:31,199 --> 00:00:33,840
over the next couple years

16
00:00:33,840 --> 00:00:36,160
so function secret sharing is an analog

17
00:00:36,160 --> 00:00:38,480
of standard secret sharing

18
00:00:38,480 --> 00:00:40,559
in standard secret sharing a value is

19
00:00:40,559 --> 00:00:42,480
split between multiple parties with the

20
00:00:42,480 --> 00:00:44,960
property that any party by itself or any

21
00:00:44,960 --> 00:00:47,120
collection of unauthorized parties

22
00:00:47,120 --> 00:00:49,200
cannot recover the secret

23
00:00:49,200 --> 00:00:51,760
but if a group of authorized parties in

24
00:00:51,760 --> 00:00:53,840
this case it would be both servers get

25
00:00:53,840 --> 00:00:55,199
together they can combine their

26
00:00:55,199 --> 00:00:59,039
information to recover the secret

27
00:00:59,039 --> 00:01:00,879
so function secret sharing is a similar

28
00:01:00,879 --> 00:01:03,120
idea except instead of a single value

29
00:01:03,120 --> 00:01:04,720
you now have a function that you are

30
00:01:04,720 --> 00:01:08,479
splitting between two or more parties

31
00:01:08,960 --> 00:01:10,799
so function secret sharing has three

32
00:01:10,799 --> 00:01:12,479
main algorithms

33
00:01:12,479 --> 00:01:15,270
a gen algorithm which shares the

34
00:01:15,270 --> 00:01:16,799
[Music]

35
00:01:16,799 --> 00:01:18,560
secret shares of the function amongst

36
00:01:18,560 --> 00:01:20,560
the two or more parties

37
00:01:20,560 --> 00:01:22,560
an eval algorithm where parties are

38
00:01:22,560 --> 00:01:24,799
given an input to the function and using

39
00:01:24,799 --> 00:01:26,400
their key that they received as part of

40
00:01:26,400 --> 00:01:28,799
the gen protocol

41
00:01:28,799 --> 00:01:30,960
they can they perform a computation on

42
00:01:30,960 --> 00:01:33,840
it then finally a reconstruct algorithm

43
00:01:33,840 --> 00:01:35,759
which takes the shares that each party

44
00:01:35,759 --> 00:01:38,479
has generated and combines them to find

45
00:01:38,479 --> 00:01:40,880
to form the final function output

46
00:01:40,880 --> 00:01:42,399
with the key property that the

47
00:01:42,399 --> 00:01:45,119
reconstructed value matches the

48
00:01:45,119 --> 00:01:46,880
underlying function that is being secret

49
00:01:46,880 --> 00:01:50,000
shared amongst the parties

50
00:01:50,240 --> 00:01:52,240
function secret sharing solutions exist

51
00:01:52,240 --> 00:01:54,399
only for certain classes of functions

52
00:01:54,399 --> 00:01:56,000
the first class of functions that was

53
00:01:56,000 --> 00:01:58,479
studied were point functions

54
00:01:58,479 --> 00:02:00,240
in the original works they showed how to

55
00:02:00,240 --> 00:02:02,320
create function secret sharing the three

56
00:02:02,320 --> 00:02:03,920
algorithms

57
00:02:03,920 --> 00:02:05,360
and the solution was known as

58
00:02:05,360 --> 00:02:07,759
distributed point functions

59
00:02:07,759 --> 00:02:09,679
and this class of functions can also be

60
00:02:09,679 --> 00:02:11,520
readily extended to step functions and

61
00:02:11,520 --> 00:02:12,959
intervals

62
00:02:12,959 --> 00:02:15,599
the main parameters of interest for fss

63
00:02:15,599 --> 00:02:17,440
is how many parties the solution works

64
00:02:17,440 --> 00:02:18,400
for

65
00:02:18,400 --> 00:02:20,239
and how efficient

66
00:02:20,239 --> 00:02:22,560
the gen algorithm is in terms of how big

67
00:02:22,560 --> 00:02:24,000
the keys are that are dealt to each

68
00:02:24,000 --> 00:02:25,040
party

69
00:02:25,040 --> 00:02:27,840
uh typically the eval procedure is

70
00:02:27,840 --> 00:02:29,520
non-interactive so each party is

71
00:02:29,520 --> 00:02:31,360
computing that locally

72
00:02:31,360 --> 00:02:32,879
and then the reconstruction algorithm

73
00:02:32,879 --> 00:02:34,879
the shares are combined usually in just

74
00:02:34,879 --> 00:02:37,840
a simple linear

75
00:02:37,840 --> 00:02:40,080
adding over whatever group

76
00:02:40,080 --> 00:02:42,959
the point function is over

77
00:02:42,959 --> 00:02:46,239
the other component of cnf fss

78
00:02:46,239 --> 00:02:48,720
is known as cnf key sharing which is

79
00:02:48,720 --> 00:02:51,680
which was introduced by ito at all in 87

80
00:02:51,680 --> 00:02:52,720
um and is also known as

81
00:02:52,720 --> 00:02:54,480
replication-based secret sharing and

82
00:02:54,480 --> 00:02:56,560
multiple assignment secret sharing

83
00:02:56,560 --> 00:02:58,879
uh and in this notion instead of each

84
00:02:58,879 --> 00:03:00,720
party getting a single key there are

85
00:03:00,720 --> 00:03:02,560
some access structures

86
00:03:02,560 --> 00:03:04,480
for which it is mandatory

87
00:03:04,480 --> 00:03:05,519
that

88
00:03:05,519 --> 00:03:07,440
each party actually gets multiple keys

89
00:03:07,440 --> 00:03:09,440
and depending on the groups that are

90
00:03:09,440 --> 00:03:12,560
able to reconstruct the secret

91
00:03:12,560 --> 00:03:13,840
in our work

92
00:03:13,840 --> 00:03:18,800
uh tp cnf sharing of fss keys will mean

93
00:03:18,800 --> 00:03:19,920
that

94
00:03:19,920 --> 00:03:22,400
if s denotes a set of all subsets of

95
00:03:22,400 --> 00:03:26,400
size t of the indices between 1 and p

96
00:03:26,400 --> 00:03:28,560
then we assign a unique key to every

97
00:03:28,560 --> 00:03:30,640
subset of size t

98
00:03:30,640 --> 00:03:32,640
and for each index

99
00:03:32,640 --> 00:03:34,159
party index i

100
00:03:34,159 --> 00:03:36,480
ti will denote the set of subsets of

101
00:03:36,480 --> 00:03:40,000
size t that do not include the index i

102
00:03:40,000 --> 00:03:42,000
and then we assign for each party i the

103
00:03:42,000 --> 00:03:46,239
keys associated to that subset

104
00:03:46,239 --> 00:03:47,680
and it's

105
00:03:47,680 --> 00:03:49,840
easy to show that no tea parties can

106
00:03:49,840 --> 00:03:52,159
reconstruct the secret and any group of

107
00:03:52,159 --> 00:03:54,560
t plus one parties can reconstruct the

108
00:03:54,560 --> 00:03:56,640
secret

109
00:03:56,640 --> 00:03:58,159
uh in this talk we're going to be

110
00:03:58,159 --> 00:04:00,640
focused on the cases of t equals two and

111
00:04:00,640 --> 00:04:03,200
p equals five uh then later for a second

112
00:04:03,200 --> 00:04:05,200
result for t equals one and p equals

113
00:04:05,200 --> 00:04:07,120
three

114
00:04:07,120 --> 00:04:09,120
in general c f key sharing has been used

115
00:04:09,120 --> 00:04:10,799
in several applications in the past

116
00:04:10,799 --> 00:04:13,439
including verifiable secret sharing and

117
00:04:13,439 --> 00:04:15,280
mpc protocols

118
00:04:15,280 --> 00:04:18,478
fault tolerance and redundancies pir

119
00:04:18,478 --> 00:04:20,639
and other generalizations when we view

120
00:04:20,639 --> 00:04:22,720
cnf key sharing as a special case of

121
00:04:22,720 --> 00:04:26,240
formula based secret sharing

122
00:04:26,240 --> 00:04:29,120
okay moving to our first result of using

123
00:04:29,120 --> 00:04:32,400
cnf fss to get more efficient

124
00:04:32,400 --> 00:04:34,960
multi-party fss

125
00:04:34,960 --> 00:04:36,960
so as some background

126
00:04:36,960 --> 00:04:39,440
the one out of two dpf case was solved

127
00:04:39,440 --> 00:04:42,400
in the original fss works

128
00:04:42,400 --> 00:04:44,080
and solved here means optimal

129
00:04:44,080 --> 00:04:45,360
communication

130
00:04:45,360 --> 00:04:46,240
so

131
00:04:46,240 --> 00:04:48,560
it can be demonstrated as a lower bound

132
00:04:48,560 --> 00:04:49,840
you need at least

133
00:04:49,840 --> 00:04:52,639
log n bits of information in the key

134
00:04:52,639 --> 00:04:55,360
where n is the size of the dpf domain

135
00:04:55,360 --> 00:04:57,440
the point function domain

136
00:04:57,440 --> 00:04:59,919
so the original works constructed a gen

137
00:04:59,919 --> 00:05:02,880
protocol that realized that optimal log

138
00:05:02,880 --> 00:05:05,759
n communication

139
00:05:06,160 --> 00:05:07,280
the case for

140
00:05:07,280 --> 00:05:08,960
p is more than two parties and the

141
00:05:08,960 --> 00:05:10,960
threshold is bigger than one

142
00:05:10,960 --> 00:05:12,720
has proven to be more elusive so the

143
00:05:12,720 --> 00:05:14,639
original papers

144
00:05:14,639 --> 00:05:16,000
show

145
00:05:16,000 --> 00:05:18,000
square root and communication for the

146
00:05:18,000 --> 00:05:20,160
gen protocol

147
00:05:20,160 --> 00:05:22,400
and a later work improve this to the

148
00:05:22,400 --> 00:05:25,120
fourth root of n for certain parameters

149
00:05:25,120 --> 00:05:26,639
for example

150
00:05:26,639 --> 00:05:28,639
if p is a product of

151
00:05:28,639 --> 00:05:30,720
if the number of players is a product of

152
00:05:30,720 --> 00:05:32,639
two smaller values

153
00:05:32,639 --> 00:05:34,479
for example

154
00:05:34,479 --> 00:05:36,720
p1 equals p2 equals three

155
00:05:36,720 --> 00:05:38,400
and the threshold is two then they

156
00:05:38,400 --> 00:05:40,240
showed how you could construct

157
00:05:40,240 --> 00:05:42,320
uh a threshold two

158
00:05:42,320 --> 00:05:45,600
nine parties fss scheme uh with fourth

159
00:05:45,600 --> 00:05:48,720
root of end communication

160
00:05:48,880 --> 00:05:50,400
so our main results for the first

161
00:05:50,400 --> 00:05:52,479
application

162
00:05:52,479 --> 00:05:54,880
is that for any parameters such that the

163
00:05:54,880 --> 00:05:56,479
number of parties is bigger than or

164
00:05:56,479 --> 00:05:57,840
equal to

165
00:05:57,840 --> 00:06:00,080
the threshold times some parameter d

166
00:06:00,080 --> 00:06:03,440
plus one then there is a tp-fss scheme

167
00:06:03,440 --> 00:06:05,680
that has communication roughly n to the

168
00:06:05,680 --> 00:06:07,840
one over two d

169
00:06:07,840 --> 00:06:10,080
and we demonstrate how to construct such

170
00:06:10,080 --> 00:06:12,400
a scheme so as an example in the t

171
00:06:12,400 --> 00:06:14,880
equals two and p equals five case

172
00:06:14,880 --> 00:06:17,199
with d equals two this creates a

173
00:06:17,199 --> 00:06:20,160
threshold two five-party fss protocol

174
00:06:20,160 --> 00:06:21,919
with communication

175
00:06:21,919 --> 00:06:23,360
fourth root of n

176
00:06:23,360 --> 00:06:25,360
which matches the the previous result

177
00:06:25,360 --> 00:06:27,360
but for for much smaller number of

178
00:06:27,360 --> 00:06:29,120
parties in general as the number of

179
00:06:29,120 --> 00:06:31,840
parties go up um the easier it is to

180
00:06:31,840 --> 00:06:35,479
construct such protocols

181
00:06:36,479 --> 00:06:38,560
and i will note that the the result on

182
00:06:38,560 --> 00:06:40,240
the previous slide was for nine parties

183
00:06:40,240 --> 00:06:42,080
in terms of a threshold to five-party

184
00:06:42,080 --> 00:06:43,280
solution

185
00:06:43,280 --> 00:06:45,120
before our result the best communication

186
00:06:45,120 --> 00:06:47,199
was quadratic

187
00:06:47,199 --> 00:06:49,120
the second part of this result is that

188
00:06:49,120 --> 00:06:50,160
the

189
00:06:50,160 --> 00:06:52,000
resulting protocol can actually be made

190
00:06:52,000 --> 00:06:54,400
information theoretically secure

191
00:06:54,400 --> 00:06:57,039
although we do lose

192
00:06:57,039 --> 00:06:58,639
a factor of 2

193
00:06:58,639 --> 00:07:00,400
in the denominator of the exponent so

194
00:07:00,400 --> 00:07:03,280
the communication is n to the one over d

195
00:07:03,280 --> 00:07:06,400
instead of one over two d

196
00:07:07,680 --> 00:07:10,720
um so the intuition behind this result

197
00:07:10,720 --> 00:07:11,440
so

198
00:07:11,440 --> 00:07:14,160
the way that the protocol is constructed

199
00:07:14,160 --> 00:07:16,639
if you want to generate a dpf function

200
00:07:16,639 --> 00:07:20,560
on secret domain point x and value v

201
00:07:20,560 --> 00:07:23,840
we chop the domain into a square so root

202
00:07:23,840 --> 00:07:27,280
n by root n and write x equals i comma j

203
00:07:27,280 --> 00:07:29,199
we also split the value into a product

204
00:07:29,199 --> 00:07:31,520
of two values

205
00:07:31,520 --> 00:07:33,520
and then we use the original square root

206
00:07:33,520 --> 00:07:36,080
of n communication protocol to give a

207
00:07:36,080 --> 00:07:37,520
nine out of ten

208
00:07:37,520 --> 00:07:39,919
uh keys so they're ten keys here and it

209
00:07:39,919 --> 00:07:41,840
has the property that

210
00:07:41,840 --> 00:07:43,919
if any nine of the keys are combined

211
00:07:43,919 --> 00:07:45,840
then nothing is learned and you need all

212
00:07:45,840 --> 00:07:47,919
10 keys to reconstruct the secret

213
00:07:47,919 --> 00:07:50,318
function

214
00:07:50,720 --> 00:07:54,400
step 2 is to notice that 10

215
00:07:54,400 --> 00:07:56,240
was deliberately chosen which is 5

216
00:07:56,240 --> 00:07:58,400
choose 2. again the 5 and the 2 are

217
00:07:58,400 --> 00:07:59,919
going to come from the threshold and the

218
00:07:59,919 --> 00:08:01,360
number of parties

219
00:08:01,360 --> 00:08:02,879
so let's let

220
00:08:02,879 --> 00:08:05,680
t denote all subsets of size 2

221
00:08:05,680 --> 00:08:07,759
and we will enumerate these and

222
00:08:07,759 --> 00:08:09,759
associate keys

223
00:08:09,759 --> 00:08:10,840
to each

224
00:08:10,840 --> 00:08:12,639
subset

225
00:08:12,639 --> 00:08:15,280
for kegen we will deal to each party

226
00:08:15,280 --> 00:08:17,120
index i

227
00:08:17,120 --> 00:08:20,240
uh all the keys for

228
00:08:20,240 --> 00:08:21,199
the group

229
00:08:21,199 --> 00:08:23,039
the subsets t for which that party is

230
00:08:23,039 --> 00:08:24,960
not a part of the index i is not a part

231
00:08:24,960 --> 00:08:26,879
of

232
00:08:26,879 --> 00:08:28,960
uh and then eval so we notice that

233
00:08:28,960 --> 00:08:32,080
because we split the domain

234
00:08:32,080 --> 00:08:33,760
as a square like this

235
00:08:33,760 --> 00:08:36,159
the original dpf function if you

236
00:08:36,159 --> 00:08:37,919
evaluate f on y

237
00:08:37,919 --> 00:08:40,320
it's the same thing as taking the first

238
00:08:40,320 --> 00:08:42,640
function and evaluating it at

239
00:08:42,640 --> 00:08:45,760
y1 uh so if you write if you break y up

240
00:08:45,760 --> 00:08:47,839
the same way we broke x up and write it

241
00:08:47,839 --> 00:08:49,519
coordinate wise in the square

242
00:08:49,519 --> 00:08:50,640
coordinates

243
00:08:50,640 --> 00:08:53,040
uh as y one comma y two and then we

244
00:08:53,040 --> 00:08:55,839
apply the the first function on y1 and

245
00:08:55,839 --> 00:08:58,399
the second function on y2

246
00:08:58,399 --> 00:09:01,040
by the property of the individual dps

247
00:09:01,040 --> 00:09:03,600
on the right-hand side here

248
00:09:03,600 --> 00:09:05,279
f1 of y1

249
00:09:05,279 --> 00:09:08,080
can be written as a sum of all 10 keys

250
00:09:08,080 --> 00:09:10,000
applied to y1

251
00:09:10,000 --> 00:09:12,240
and f2 of y2 can be written as the sum

252
00:09:12,240 --> 00:09:15,279
of all 10 keys on y2

253
00:09:15,279 --> 00:09:16,399
and so

254
00:09:16,399 --> 00:09:18,320
f of y is just the product of these two

255
00:09:18,320 --> 00:09:20,160
things

256
00:09:20,160 --> 00:09:22,640
and now for correctness we observe

257
00:09:22,640 --> 00:09:24,160
um that

258
00:09:24,160 --> 00:09:26,399
if we expand out this product every

259
00:09:26,399 --> 00:09:28,959
cross cross term will be

260
00:09:28,959 --> 00:09:30,880
involved you know a single

261
00:09:30,880 --> 00:09:34,320
dpf key for f1 and a single dpf key for

262
00:09:34,320 --> 00:09:36,399
f2

263
00:09:36,399 --> 00:09:37,920
and because of the way the keys were

264
00:09:37,920 --> 00:09:39,120
distributed

265
00:09:39,120 --> 00:09:40,320
uh any

266
00:09:40,320 --> 00:09:42,240
so three out of the five parties will

267
00:09:42,240 --> 00:09:43,040
know

268
00:09:43,040 --> 00:09:45,680
the key for f1 and three out of the five

269
00:09:45,680 --> 00:09:46,640
we'll know

270
00:09:46,640 --> 00:09:48,640
the key for f2 and so by accounting

271
00:09:48,640 --> 00:09:49,760
argument

272
00:09:49,760 --> 00:09:51,040
there will be at least one party that

273
00:09:51,040 --> 00:09:52,959
knows both keys and therefore will be

274
00:09:52,959 --> 00:09:54,320
able to contrib

275
00:09:54,320 --> 00:09:57,440
compute this crosster

276
00:09:58,880 --> 00:10:01,519
meanwhile for security note that this is

277
00:10:01,519 --> 00:10:03,760
a threshold 2 scheme so no two parties

278
00:10:03,760 --> 00:10:06,160
should be able to reconstruct the secret

279
00:10:06,160 --> 00:10:08,320
so if you have any two parties say i and

280
00:10:08,320 --> 00:10:09,040
j

281
00:10:09,040 --> 00:10:11,360
there will be one of these sets t which

282
00:10:11,360 --> 00:10:13,680
which is the set of all sets of size two

283
00:10:13,680 --> 00:10:16,000
that contain both indices i and j

284
00:10:16,000 --> 00:10:17,920
and therefore they won't be able to

285
00:10:17,920 --> 00:10:20,399
compute this cross term that involves

286
00:10:20,399 --> 00:10:22,880
this key

287
00:10:23,519 --> 00:10:26,240
uh and then a quick uh computation of

288
00:10:26,240 --> 00:10:27,760
the cost this is

289
00:10:27,760 --> 00:10:29,839
uh the fourth root of n this was because

290
00:10:29,839 --> 00:10:32,720
we split the rich the domain into

291
00:10:32,720 --> 00:10:35,040
root n by root n and so

292
00:10:35,040 --> 00:10:36,399
applying the

293
00:10:36,399 --> 00:10:38,640
bgi 15

294
00:10:38,640 --> 00:10:40,720
keygen procedure on that picks up

295
00:10:40,720 --> 00:10:42,480
another quadratic factor and so in the

296
00:10:42,480 --> 00:10:46,519
end you get n to the one fourth

297
00:10:48,560 --> 00:10:50,399
for our second result we'll be focusing

298
00:10:50,399 --> 00:10:53,360
on the t equals one p equals three case

299
00:10:53,360 --> 00:10:56,160
and construct a one out of three cnf fss

300
00:10:56,160 --> 00:10:58,560
protocol

301
00:10:58,560 --> 00:11:00,160
so as i mentioned before the one out of

302
00:11:00,160 --> 00:11:03,120
two case uh was totally solved uh by the

303
00:11:03,120 --> 00:11:04,560
original papers they achieved the

304
00:11:04,560 --> 00:11:06,000
optimal

305
00:11:06,000 --> 00:11:08,160
logarithmic communication and n for key

306
00:11:08,160 --> 00:11:09,200
gen

307
00:11:09,200 --> 00:11:10,959
um and we observed that this also

308
00:11:10,959 --> 00:11:12,640
implies this can be trivially extended

309
00:11:12,640 --> 00:11:15,200
to more parties with the same threshold

310
00:11:15,200 --> 00:11:16,720
so you could also get a one out of three

311
00:11:16,720 --> 00:11:20,640
protocol with login communication

312
00:11:20,640 --> 00:11:22,399
meanwhile two out of three the the

313
00:11:22,399 --> 00:11:24,560
situation is a little bit worse so in

314
00:11:24,560 --> 00:11:28,399
the original works uh as well as mbkko20

315
00:11:28,399 --> 00:11:31,279
um they showed how to construct a

316
00:11:31,279 --> 00:11:34,000
root n solution that achieves two out of

317
00:11:34,000 --> 00:11:35,279
three

318
00:11:35,279 --> 00:11:38,320
um and so we notice the gap uh a lower

319
00:11:38,320 --> 00:11:40,079
bound which is still the theoretical

320
00:11:40,079 --> 00:11:42,959
lower bound of log n and an upper bound

321
00:11:42,959 --> 00:11:46,719
now of square root n

322
00:11:46,959 --> 00:11:47,920
and

323
00:11:47,920 --> 00:11:49,680
just thinking taking a step back and

324
00:11:49,680 --> 00:11:51,760
thinking about one out of three c and f

325
00:11:51,760 --> 00:11:53,839
fss actually means

326
00:11:53,839 --> 00:11:54,720
so

327
00:11:54,720 --> 00:11:57,440
because it's a cnf sharing

328
00:11:57,440 --> 00:11:59,040
between three parties that means there's

329
00:11:59,040 --> 00:12:00,880
gonna be three keys total

330
00:12:00,880 --> 00:12:03,600
and by the rules of how the keys are

331
00:12:03,600 --> 00:12:05,839
distributed each party receives two of

332
00:12:05,839 --> 00:12:08,880
these three keys

333
00:12:08,880 --> 00:12:10,480
and if you compare this to what two out

334
00:12:10,480 --> 00:12:12,959
of three fss means again there is three

335
00:12:12,959 --> 00:12:15,760
keys this time one for each party uh and

336
00:12:15,760 --> 00:12:17,680
because it's two out of three secured

337
00:12:17,680 --> 00:12:19,360
that means that if any two parties get

338
00:12:19,360 --> 00:12:20,399
together

339
00:12:20,399 --> 00:12:23,120
and combine their keys uh then nothing

340
00:12:23,120 --> 00:12:26,160
is revealed so in both cases each party

341
00:12:26,160 --> 00:12:27,440
is receiving

342
00:12:27,440 --> 00:12:30,639
uh two of the three keys and so one out

343
00:12:30,639 --> 00:12:33,200
of three cnf fss can sort of be thought

344
00:12:33,200 --> 00:12:35,360
as lines somewhere between

345
00:12:35,360 --> 00:12:38,240
pure one out of three fss and two out of

346
00:12:38,240 --> 00:12:40,800
three fs sets

347
00:12:40,800 --> 00:12:42,160
and certainly two out of three if you

348
00:12:42,160 --> 00:12:44,000
have a two out of three fss scheme you

349
00:12:44,000 --> 00:12:46,079
can trivially construct a one out of

350
00:12:46,079 --> 00:12:48,720
three cnf fss scheme

351
00:12:48,720 --> 00:12:50,560
simply by dealing an extra key to each

352
00:12:50,560 --> 00:12:53,560
party

353
00:12:53,600 --> 00:12:56,160
and i'll observe that in some settings

354
00:12:56,160 --> 00:12:58,639
where two out of three fss

355
00:12:58,639 --> 00:13:00,560
might naturally be used

356
00:13:00,560 --> 00:13:02,480
you can actually use one out of three

357
00:13:02,480 --> 00:13:05,760
cnf fss instead

358
00:13:05,760 --> 00:13:07,839
and this works in settings where each

359
00:13:07,839 --> 00:13:11,680
party needs to perform the role of of

360
00:13:11,680 --> 00:13:13,839
not only its own computation but one

361
00:13:13,839 --> 00:13:15,680
other party's computation and this

362
00:13:15,680 --> 00:13:17,200
naturally occurs in various settings

363
00:13:17,200 --> 00:13:20,720
including dot ram

364
00:13:20,720 --> 00:13:23,040
so the question is what can we achieve

365
00:13:23,040 --> 00:13:24,639
for the gen protocol in terms of

366
00:13:24,639 --> 00:13:27,279
communication for one out of three cnf

367
00:13:27,279 --> 00:13:28,560
fss

368
00:13:28,560 --> 00:13:31,279
is it closer to the log n lower bound or

369
00:13:31,279 --> 00:13:33,519
to the best known upper bound of

370
00:13:33,519 --> 00:13:36,240
square root n

371
00:13:36,240 --> 00:13:38,639
so our result is that there exists a one

372
00:13:38,639 --> 00:13:41,040
out of three c and f dpf scheme with

373
00:13:41,040 --> 00:13:43,279
communication log squared n which is

374
00:13:43,279 --> 00:13:45,440
close to the optimal lower bound

375
00:13:45,440 --> 00:13:48,560
and we actually construct such a

376
00:13:48,560 --> 00:13:51,360
algorithm which i will present the

377
00:13:51,360 --> 00:13:53,680
intuition for now

378
00:13:53,680 --> 00:13:55,839
so for the intuition let's go back to

379
00:13:55,839 --> 00:13:59,199
how the the two bounds are constructed

380
00:13:59,199 --> 00:14:02,480
so for the one out of two case of login

381
00:14:02,480 --> 00:14:03,760
we imagine a

382
00:14:03,760 --> 00:14:05,680
binary tree

383
00:14:05,680 --> 00:14:07,920
for the size of the domain so this tree

384
00:14:07,920 --> 00:14:09,680
has depth login

385
00:14:09,680 --> 00:14:11,839
and we we're going to traverse this tree

386
00:14:11,839 --> 00:14:14,079
and create keys for each level of the

387
00:14:14,079 --> 00:14:15,920
tree

388
00:14:15,920 --> 00:14:17,279
or values

389
00:14:17,279 --> 00:14:18,800
which are actually

390
00:14:18,800 --> 00:14:21,120
primarily prg seeds

391
00:14:21,120 --> 00:14:22,880
so this is where the log and size is

392
00:14:22,880 --> 00:14:25,439
coming from

393
00:14:26,160 --> 00:14:28,320
and the key is as we traverse this this

394
00:14:28,320 --> 00:14:30,560
tree as part of key gen we want to

395
00:14:30,560 --> 00:14:32,880
maintain an invariant and the invariant

396
00:14:32,880 --> 00:14:34,480
is that

397
00:14:34,480 --> 00:14:38,000
if you are on the path that that

398
00:14:38,000 --> 00:14:41,279
specifies the secret dpf location

399
00:14:41,279 --> 00:14:43,519
uh then you have two values one for each

400
00:14:43,519 --> 00:14:45,680
of the two parties and these are prg

401
00:14:45,680 --> 00:14:48,000
seeds and they are not equal but as soon

402
00:14:48,000 --> 00:14:50,880
as you go off the path the seeds will be

403
00:14:50,880 --> 00:14:53,040
equal for the two parties

404
00:14:53,040 --> 00:14:54,480
and so the key is

405
00:14:54,480 --> 00:14:57,199
as you're traversing this tree

406
00:14:57,199 --> 00:14:58,880
and if you have maintained this

407
00:14:58,880 --> 00:15:00,959
invariant up to this point you need to

408
00:15:00,959 --> 00:15:03,519
maintain the invariant so that as you

409
00:15:03,519 --> 00:15:05,360
go to the proper child the ma the

410
00:15:05,360 --> 00:15:07,360
invariant is maintained and as you

411
00:15:07,360 --> 00:15:10,880
switch to the new off path child

412
00:15:10,880 --> 00:15:12,480
you get the opposite property where the

413
00:15:12,480 --> 00:15:14,639
keys now match and of course in all

414
00:15:14,639 --> 00:15:16,959
other places that's already off path you

415
00:15:16,959 --> 00:15:19,519
need to preserve the invariant that the

416
00:15:19,519 --> 00:15:22,639
prgc's match for the two parties

417
00:15:22,639 --> 00:15:24,880
for the two out of three case recall

418
00:15:24,880 --> 00:15:27,519
that the gen protocol the best known

419
00:15:27,519 --> 00:15:30,000
algorithms achieve square root n so they

420
00:15:30,000 --> 00:15:32,079
take the domain and break it up into

421
00:15:32,079 --> 00:15:35,199
root n blocks all of size root n

422
00:15:35,199 --> 00:15:38,560
and again they deal prg seeds to

423
00:15:38,560 --> 00:15:40,959
the different parties and the way the

424
00:15:40,959 --> 00:15:43,040
prg seeds are chosen

425
00:15:43,040 --> 00:15:46,480
um is that in the off clock positions

426
00:15:46,480 --> 00:15:48,800
every party

427
00:15:48,800 --> 00:15:51,120
each party's two seeds will overlap with

428
00:15:51,120 --> 00:15:52,240
exactly

429
00:15:52,240 --> 00:15:54,800
uh one of the other parties seeds so you

430
00:15:54,800 --> 00:15:57,360
can see b here is replicated c is

431
00:15:57,360 --> 00:15:59,839
replicated between parties two and three

432
00:15:59,839 --> 00:16:01,920
and a is replicated between parties one

433
00:16:01,920 --> 00:16:03,920
and three meanwhile for the secret

434
00:16:03,920 --> 00:16:06,079
location which is this block here

435
00:16:06,079 --> 00:16:07,040
um

436
00:16:07,040 --> 00:16:09,040
every party has

437
00:16:09,040 --> 00:16:10,000
the same

438
00:16:10,000 --> 00:16:11,440
there's one seed that's common to all

439
00:16:11,440 --> 00:16:13,839
three parties and each party's other

440
00:16:13,839 --> 00:16:16,399
seed is distinct nobody else has it and

441
00:16:16,399 --> 00:16:17,920
the observation for

442
00:16:17,920 --> 00:16:19,519
the intuition for why this is two out of

443
00:16:19,519 --> 00:16:21,519
three secures in both cases you can't

444
00:16:21,519 --> 00:16:22,800
tell

445
00:16:22,800 --> 00:16:24,560
if you're in the case where each seed is

446
00:16:24,560 --> 00:16:26,639
duplicated twice or whether there's a

447
00:16:26,639 --> 00:16:28,560
single distinct seed for me from any two

448
00:16:28,560 --> 00:16:30,639
players perspective one of their seeds

449
00:16:30,639 --> 00:16:34,240
overlaps and the other one doesn't

450
00:16:35,199 --> 00:16:36,800
uh and that's the

451
00:16:36,800 --> 00:16:39,199
key invariant here where for the on path

452
00:16:39,199 --> 00:16:41,199
block the keys

453
00:16:41,199 --> 00:16:43,600
overlap this way and

454
00:16:43,600 --> 00:16:44,639
for the off

455
00:16:44,639 --> 00:16:47,360
off uh off blocks they overlap in a

456
00:16:47,360 --> 00:16:49,440
different way

457
00:16:49,440 --> 00:16:51,120
so the intuition for how the one out of

458
00:16:51,120 --> 00:16:52,800
three cnf scheme is going to work is

459
00:16:52,800 --> 00:16:53,920
we're going to combine these two

460
00:16:53,920 --> 00:16:55,839
approaches where we have the binary tree

461
00:16:55,839 --> 00:16:58,480
structure of the one out of two solution

462
00:16:58,480 --> 00:17:00,000
uh but the invariant that we're going to

463
00:17:00,000 --> 00:17:02,240
maintain as we traverse this tree looks

464
00:17:02,240 --> 00:17:03,920
more like the invariant for the two out

465
00:17:03,920 --> 00:17:06,959
of three case so here now you have each

466
00:17:06,959 --> 00:17:09,119
party has three

467
00:17:09,119 --> 00:17:10,160
seeds

468
00:17:10,160 --> 00:17:12,640
and the invariant that you will maintain

469
00:17:12,640 --> 00:17:15,679
is that in the if you're on

470
00:17:15,679 --> 00:17:18,000
uh the path of the secret location there

471
00:17:18,000 --> 00:17:20,799
are total four seeds a b c and d

472
00:17:20,799 --> 00:17:23,039
uh and each party has

473
00:17:23,039 --> 00:17:24,240
uh d

474
00:17:24,240 --> 00:17:26,640
um and then two of the three of the

475
00:17:26,640 --> 00:17:28,079
other so this one has a and b it's

476
00:17:28,079 --> 00:17:29,760
missing c this one has b and c it's

477
00:17:29,760 --> 00:17:32,480
missing a and so forth meanwhile in the

478
00:17:32,480 --> 00:17:35,120
off path cases every part there's three

479
00:17:35,120 --> 00:17:37,280
distinct seeds instead of four and each

480
00:17:37,280 --> 00:17:39,039
party has all three of them now of

481
00:17:39,039 --> 00:17:40,400
course this is no longer two out of

482
00:17:40,400 --> 00:17:41,840
three secure because

483
00:17:41,840 --> 00:17:43,760
if any two parties compare their seeds

484
00:17:43,760 --> 00:17:45,679
they'll see when they're off path the

485
00:17:45,679 --> 00:17:48,080
three seeds exactly match and if they're

486
00:17:48,080 --> 00:17:50,480
on on path two of their three seeds will

487
00:17:50,480 --> 00:17:52,799
match

488
00:17:54,080 --> 00:17:57,039
okay so as a summary so in summary

489
00:17:57,039 --> 00:18:00,240
we define the notion of c and f fss and

490
00:18:00,240 --> 00:18:01,919
show two results

491
00:18:01,919 --> 00:18:05,039
that demonstrate its utility so first

492
00:18:05,039 --> 00:18:07,840
we demonstrated how the generic notion

493
00:18:07,840 --> 00:18:11,280
of cnf fss could be used

494
00:18:11,280 --> 00:18:15,760
to take existing cnf fss schemes for

495
00:18:15,760 --> 00:18:18,320
many players and recombine the keys in

496
00:18:18,320 --> 00:18:20,720
such a way that we get more efficient

497
00:18:20,720 --> 00:18:23,520
standard t out of p fss

498
00:18:23,520 --> 00:18:26,400
for fewer parties

499
00:18:26,400 --> 00:18:28,799
our second result was constructing a one

500
00:18:28,799 --> 00:18:32,480
out of three cnf fss scheme directly

501
00:18:32,480 --> 00:18:35,280
with near optimal communication

502
00:18:35,280 --> 00:18:36,880
and in particular

503
00:18:36,880 --> 00:18:39,200
vastly superior to the two out of three

504
00:18:39,200 --> 00:18:40,600
fss

505
00:18:40,600 --> 00:18:43,120
case um there are various applications

506
00:18:43,120 --> 00:18:46,400
of cnf fss

507
00:18:46,400 --> 00:18:48,640
as our two results show we have more

508
00:18:48,640 --> 00:18:49,760
efficient

509
00:18:49,760 --> 00:18:53,360
standard t out of p fss protocols

510
00:18:53,360 --> 00:18:55,039
um

511
00:18:55,039 --> 00:18:56,640
for the one out of three case we showed

512
00:18:56,640 --> 00:18:58,480
how this can be used to speed up various

513
00:18:58,480 --> 00:19:01,039
doram protocols and in general we pick

514
00:19:01,039 --> 00:19:02,000
up the

515
00:19:02,000 --> 00:19:04,240
cnf fss enjoys the same sort of

516
00:19:04,240 --> 00:19:05,760
application

517
00:19:05,760 --> 00:19:08,000
advantages that other cnf key sharing

518
00:19:08,000 --> 00:19:10,240
schemes have

519
00:19:10,240 --> 00:19:13,440
so as open problems

520
00:19:13,679 --> 00:19:16,320
can you use either cnfss or some other

521
00:19:16,320 --> 00:19:18,880
mechanism to improve upon two out of

522
00:19:18,880 --> 00:19:19,679
three

523
00:19:19,679 --> 00:19:22,480
case which currently best known is

524
00:19:22,480 --> 00:19:24,480
root n anything less than root n would

525
00:19:24,480 --> 00:19:26,000
be interesting

526
00:19:26,000 --> 00:19:27,679
our first result showed how to do two

527
00:19:27,679 --> 00:19:28,960
out of five

528
00:19:28,960 --> 00:19:31,760
uh in less than root n namely m to the

529
00:19:31,760 --> 00:19:34,400
one fourth communication can we shape

530
00:19:34,400 --> 00:19:38,000
this down even further for three players

531
00:19:38,000 --> 00:19:40,720
uh and in general the our first result

532
00:19:40,720 --> 00:19:41,600
also

533
00:19:41,600 --> 00:19:43,679
works for certain parameter choices of t

534
00:19:43,679 --> 00:19:44,480
and b

535
00:19:44,480 --> 00:19:46,960
two and five was a convenient

536
00:19:46,960 --> 00:19:49,919
uh application but thinking back of

537
00:19:49,919 --> 00:19:51,760
on the

538
00:19:51,760 --> 00:19:54,720
restriction that p is has to be at least

539
00:19:54,720 --> 00:19:57,360
t times some parameter d plus one

540
00:19:57,360 --> 00:20:00,960
um so this works well in certain

541
00:20:00,960 --> 00:20:03,360
parameter regimes for t and p but in

542
00:20:03,360 --> 00:20:04,320
general

543
00:20:04,320 --> 00:20:06,640
can we solve t out of p fss

544
00:20:06,640 --> 00:20:10,080
uh in less communication and close the

545
00:20:10,080 --> 00:20:12,640
theoretical gap of log n communication

546
00:20:12,640 --> 00:20:15,039
uh versus best known

547
00:20:15,039 --> 00:20:16,320
and finally can we find other

548
00:20:16,320 --> 00:20:19,280
applications of cnf fss where we can

549
00:20:19,280 --> 00:20:21,600
utilize the overlapping key structure

550
00:20:21,600 --> 00:20:23,600
to do things and improve upon other

551
00:20:23,600 --> 00:20:26,158
protocols

552
00:20:26,799 --> 00:20:29,918
thank you

