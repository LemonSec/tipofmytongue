1
00:00:00,480 --> 00:00:02,879
hello i'm octavio perez kempner and i

2
00:00:02,879 --> 00:00:04,640
will be presenting the paper improved

3
00:00:04,640 --> 00:00:06,560
constructions of anonymous credentials

4
00:00:06,560 --> 00:00:08,320
from instructor preserving signatures on

5
00:00:08,320 --> 00:00:09,920
equivalent classes

6
00:00:09,920 --> 00:00:11,599
this is a joint work with ashlyn

7
00:00:11,599 --> 00:00:14,400
connolly and pascal laforcat

8
00:00:14,400 --> 00:00:16,079
i will start by introducing the concept

9
00:00:16,079 --> 00:00:17,680
of attribute-based credentials and the

10
00:00:17,680 --> 00:00:19,600
main motivation of our work

11
00:00:19,600 --> 00:00:21,439
right after i will give an overview of

12
00:00:21,439 --> 00:00:23,439
our results and comment on the main

13
00:00:23,439 --> 00:00:24,880
building blocks which are

14
00:00:24,880 --> 00:00:26,400
structure-preserving signatures on

15
00:00:26,400 --> 00:00:28,000
equivalent classes and the recent

16
00:00:28,000 --> 00:00:29,840
credential framework from phushbuyer

17
00:00:29,840 --> 00:00:33,040
hanser and islamic from 2019

18
00:00:33,040 --> 00:00:34,960
before concluding i will dive a bit into

19
00:00:34,960 --> 00:00:37,280
the notion of signer hiding which is one

20
00:00:37,280 --> 00:00:39,280
of our main contributions

21
00:00:39,280 --> 00:00:40,559
so

22
00:00:40,559 --> 00:00:43,040
attribute based credentials or avc for

23
00:00:43,040 --> 00:00:45,440
short allow a user to get a certified

24
00:00:45,440 --> 00:00:47,520
set of attributes from an issuer

25
00:00:47,520 --> 00:00:49,920
the main idea is that users can later

26
00:00:49,920 --> 00:00:52,160
authenticate themselves to a verifier by

27
00:00:52,160 --> 00:00:53,920
showing some of the attributes or by

28
00:00:53,920 --> 00:00:56,399
proving relations between them

29
00:00:56,399 --> 00:00:58,719
anonymous abcs allow users

30
00:00:58,719 --> 00:01:01,039
authentication without leaking any other

31
00:01:01,039 --> 00:01:03,920
information besides the shown attributes

32
00:01:03,920 --> 00:01:06,479
some system can be multi-show

33
00:01:06,479 --> 00:01:08,320
which means that they allow an arbitrary

34
00:01:08,320 --> 00:01:11,040
number of unlinkable showings in other

35
00:01:11,040 --> 00:01:13,200
words once issued credentials can be

36
00:01:13,200 --> 00:01:14,640
reused

37
00:01:14,640 --> 00:01:15,759
finally

38
00:01:15,759 --> 00:01:18,799
multi authorities ivcs allow users to

39
00:01:18,799 --> 00:01:20,720
obtain a single credential for

40
00:01:20,720 --> 00:01:22,640
attributes not necessarily issued by a

41
00:01:22,640 --> 00:01:24,880
single authority in this work we

42
00:01:24,880 --> 00:01:27,360
consider multi-show avcs in the single

43
00:01:27,360 --> 00:01:29,600
authority setting

44
00:01:29,600 --> 00:01:31,280
the main differences between recent

45
00:01:31,280 --> 00:01:33,840
constructions include expressiveness for

46
00:01:33,840 --> 00:01:35,759
example if they allow predicates over

47
00:01:35,759 --> 00:01:37,439
the attributes or not and to which

48
00:01:37,439 --> 00:01:38,640
extent

49
00:01:38,640 --> 00:01:40,640
the efficiency in terms of computational

50
00:01:40,640 --> 00:01:42,799
cost and bandwidth

51
00:01:42,799 --> 00:01:45,200
the communication in terms of whether or

52
00:01:45,200 --> 00:01:46,560
not they provide non-interactive

53
00:01:46,560 --> 00:01:48,000
features

54
00:01:48,000 --> 00:01:50,640
the security model whether they use the

55
00:01:50,640 --> 00:01:54,000
generic group model random oracle etc

56
00:01:54,000 --> 00:01:56,079
and on how and if they manage revocation

57
00:01:56,079 --> 00:01:58,559
features

58
00:01:58,640 --> 00:02:00,799
broadly speaking one can identify

59
00:02:00,799 --> 00:02:02,719
different lines of work with respect to

60
00:02:02,719 --> 00:02:04,799
the underlying signature scheme that is

61
00:02:04,799 --> 00:02:06,640
used to build a credential system

62
00:02:06,640 --> 00:02:08,560
initial constructions were based on

63
00:02:08,560 --> 00:02:12,000
kamini's licianskaia signatures

64
00:02:12,000 --> 00:02:14,400
more recent work includes aggregateable

65
00:02:14,400 --> 00:02:15,599
signatures

66
00:02:15,599 --> 00:02:17,680
sanitizable signatures

67
00:02:17,680 --> 00:02:20,160
reductal signatures and last but not

68
00:02:20,160 --> 00:02:22,000
least structure-preserving signatures on

69
00:02:22,000 --> 00:02:24,959
equivalent classes

70
00:02:25,120 --> 00:02:26,879
one thing that none of the previous work

71
00:02:26,879 --> 00:02:28,640
addressed was the problem of leaking the

72
00:02:28,640 --> 00:02:30,239
issuer identity

73
00:02:30,239 --> 00:02:32,160
in many scenarios the identity of the

74
00:02:32,160 --> 00:02:34,640
issuer can reveal user information like

75
00:02:34,640 --> 00:02:36,560
the country or company where it belongs

76
00:02:36,560 --> 00:02:37,360
to

77
00:02:37,360 --> 00:02:39,599
to address this issue we proposed a

78
00:02:39,599 --> 00:02:40,879
notion called

79
00:02:40,879 --> 00:02:42,720
signer hiding and it refers to the

80
00:02:42,720 --> 00:02:44,480
ability of hiding the identity of the

81
00:02:44,480 --> 00:02:47,120
issuer during showings this concept was

82
00:02:47,120 --> 00:02:49,200
recently developed on concurrent and

83
00:02:49,200 --> 00:02:51,599
independent work under a similar name of

84
00:02:51,599 --> 00:02:56,399
issuer hiding and presented at cans 2021

85
00:02:56,720 --> 00:02:59,040
to motivate application of having signer

86
00:02:59,040 --> 00:03:00,800
hiding features let's consider the

87
00:03:00,800 --> 00:03:02,959
following scenario

88
00:03:02,959 --> 00:03:05,120
we have a seller offering discounts for

89
00:03:05,120 --> 00:03:08,800
european non-spanish residents

90
00:03:08,800 --> 00:03:10,959
a user could claim it's french but that

91
00:03:10,959 --> 00:03:12,800
would give away too much information to

92
00:03:12,800 --> 00:03:14,319
the verifier

93
00:03:14,319 --> 00:03:15,760
furthermore

94
00:03:15,760 --> 00:03:17,680
if credentials are issued by home

95
00:03:17,680 --> 00:03:20,159
countries no matter what attribute users

96
00:03:20,159 --> 00:03:22,319
decide to disclose with a verifier their

97
00:03:22,319 --> 00:03:25,280
home country will be leaked

98
00:03:25,280 --> 00:03:27,360
what we want in scenarios like this one

99
00:03:27,360 --> 00:03:30,000
is to avoid such things and find a way

100
00:03:30,000 --> 00:03:32,560
in which users can convince the verifier

101
00:03:32,560 --> 00:03:34,560
without giving away information from

102
00:03:34,560 --> 00:03:37,120
their country of origin

103
00:03:37,120 --> 00:03:39,280
a way to convince the verifier about

104
00:03:39,280 --> 00:03:41,760
being european but not spanish is to

105
00:03:41,760 --> 00:03:43,920
hide the issuer's identity in a set of

106
00:03:43,920 --> 00:03:45,599
valid countries

107
00:03:45,599 --> 00:03:47,440
in order to see how one can build a

108
00:03:47,440 --> 00:03:48,959
credential system allowing this

109
00:03:48,959 --> 00:03:51,040
functionality i will now introduce the

110
00:03:51,040 --> 00:03:52,480
concept of structure preserving

111
00:03:52,480 --> 00:03:54,560
signatures on equivalent classes which

112
00:03:54,560 --> 00:03:56,640
will be at the core of our signer hiding

113
00:03:56,640 --> 00:03:58,159
feature

114
00:03:58,159 --> 00:04:00,080
the main idea is that they allowed a

115
00:04:00,080 --> 00:04:02,159
controlled form of malleability where

116
00:04:02,159 --> 00:04:04,159
one can update a signature to a new

117
00:04:04,159 --> 00:04:05,920
message that is related to the original

118
00:04:05,920 --> 00:04:06,799
one

119
00:04:06,799 --> 00:04:08,560
this control form of valuability is

120
00:04:08,560 --> 00:04:10,319
possible if the message space can be

121
00:04:10,319 --> 00:04:13,040
partitioned into qlm classes

122
00:04:13,040 --> 00:04:14,959
if we consider a message space of

123
00:04:14,959 --> 00:04:17,120
vectors of length l the following

124
00:04:17,120 --> 00:04:19,040
relation partitions the message space

125
00:04:19,040 --> 00:04:21,199
into equivalent classes

126
00:04:21,199 --> 00:04:23,520
unforgeability holds with respects to

127
00:04:23,520 --> 00:04:24,560
classes

128
00:04:24,560 --> 00:04:26,639
no adversary should be able to update a

129
00:04:26,639 --> 00:04:28,560
signature and obtain a new one for a

130
00:04:28,560 --> 00:04:30,880
message that is not in the same class in

131
00:04:30,880 --> 00:04:33,440
other words switching representatives in

132
00:04:33,440 --> 00:04:35,360
a class is no longer seen as an attack

133
00:04:35,360 --> 00:04:37,759
but rather as an advantage of the scheme

134
00:04:37,759 --> 00:04:40,960
and the only allowed form of valuability

135
00:04:40,960 --> 00:04:42,880
besides the notion of unforgivability

136
00:04:42,880 --> 00:04:45,120
these types of signatures should also be

137
00:04:45,120 --> 00:04:46,639
unlinkable

138
00:04:46,639 --> 00:04:48,759
if the equivalence relation provides

139
00:04:48,759 --> 00:04:50,560
indistinguishability on the message

140
00:04:50,560 --> 00:04:52,960
space like in the previous example

141
00:04:52,960 --> 00:04:55,040
unupdated signatures are distributed

142
00:04:55,040 --> 00:04:56,720
like fresh signatures

143
00:04:56,720 --> 00:04:59,520
message signature pairs falling into the

144
00:04:59,520 --> 00:05:03,280
same class are said to be unlinkable

145
00:05:03,280 --> 00:05:05,440
another important aspect is that the

146
00:05:05,440 --> 00:05:07,199
notion of equivalent classes has been

147
00:05:07,199 --> 00:05:09,520
recently extended to consider equivalent

148
00:05:09,520 --> 00:05:12,400
classes on the key space as well

149
00:05:12,400 --> 00:05:14,560
when the signature acts on both the

150
00:05:14,560 --> 00:05:17,199
message and key spaces it is said to be

151
00:05:17,199 --> 00:05:19,280
a mercurial signature

152
00:05:19,280 --> 00:05:20,960
we will be using this later on when

153
00:05:20,960 --> 00:05:23,360
discussing the notion of designer hiding

154
00:05:23,360 --> 00:05:25,680
but now let's move on to the avc

155
00:05:25,680 --> 00:05:29,039
framework used on this work

156
00:05:30,400 --> 00:05:31,919
so

157
00:05:31,919 --> 00:05:34,320
in a brief a credential is a signature

158
00:05:34,320 --> 00:05:36,160
on a randomizable accumulator

159
00:05:36,160 --> 00:05:38,800
representing a set of attributes

160
00:05:38,800 --> 00:05:41,039
a credential showing involves the joint

161
00:05:41,039 --> 00:05:43,120
randomization of a message signature

162
00:05:43,120 --> 00:05:44,639
pair

163
00:05:44,639 --> 00:05:46,960
the accumulator uses batch membership

164
00:05:46,960 --> 00:05:50,160
proofs to allow constant size showings

165
00:05:50,160 --> 00:05:51,840
observe that by randomizing the

166
00:05:51,840 --> 00:05:53,680
accumulator and the corresponding

167
00:05:53,680 --> 00:05:55,280
membership witness

168
00:05:55,280 --> 00:05:57,440
no information from the user is leaked

169
00:05:57,440 --> 00:05:59,919
but the verification still succeeds

170
00:05:59,919 --> 00:06:01,440
the same applies for the updated

171
00:06:01,440 --> 00:06:02,880
signature

172
00:06:02,880 --> 00:06:04,880
in this work we will be referring to the

173
00:06:04,880 --> 00:06:06,560
credential accumulator as a set

174
00:06:06,560 --> 00:06:08,800
commitment scheme which was the original

175
00:06:08,800 --> 00:06:12,560
name given in the previous work

176
00:06:12,639 --> 00:06:14,479
although one can have constant size

177
00:06:14,479 --> 00:06:16,400
showings because of the watch membership

178
00:06:16,400 --> 00:06:18,319
proofs the main drawback of this

179
00:06:18,319 --> 00:06:20,720
primitive is that expressiveness is

180
00:06:20,720 --> 00:06:22,479
limited

181
00:06:22,479 --> 00:06:24,400
only a selective disclosures of

182
00:06:24,400 --> 00:06:26,400
attributes is supported

183
00:06:26,400 --> 00:06:28,479
for users to prove that they do not have

184
00:06:28,479 --> 00:06:30,240
a particular attribute

185
00:06:30,240 --> 00:06:32,400
they will need to encode the negation of

186
00:06:32,400 --> 00:06:35,199
it as an attribute while doing so would

187
00:06:35,199 --> 00:06:37,600
work it is far from being efficient and

188
00:06:37,600 --> 00:06:40,000
other alternatives are preferred

189
00:06:40,000 --> 00:06:41,759
taking the previously mentioned points

190
00:06:41,759 --> 00:06:44,080
into account we focus on improving the

191
00:06:44,080 --> 00:06:45,919
following aspects when compared to the

192
00:06:45,919 --> 00:06:48,400
previous work from fhs fhs-19

193
00:06:48,400 --> 00:06:51,039
expressiveness extending the accumulator

194
00:06:51,039 --> 00:06:53,599
efficiency leveraging user and verifier

195
00:06:53,599 --> 00:06:55,360
computational costs

196
00:06:55,360 --> 00:06:57,520
security model moving away from

197
00:06:57,520 --> 00:06:59,280
construction space on the generic group

198
00:06:59,280 --> 00:07:01,199
model to one in the standard model

199
00:07:01,199 --> 00:07:04,800
requiring a common reference string

200
00:07:04,800 --> 00:07:06,319
let's now have an overview of the

201
00:07:06,319 --> 00:07:08,720
results

202
00:07:08,720 --> 00:07:10,479
we obtain a new structure preserving

203
00:07:10,479 --> 00:07:12,479
signature and equivalent classes which

204
00:07:12,479 --> 00:07:14,840
acts on both the message and the key

205
00:07:14,840 --> 00:07:18,000
spaces our departure point was a recent

206
00:07:18,000 --> 00:07:19,840
scheme proving secure under standard

207
00:07:19,840 --> 00:07:22,240
assumptions which we modified to obtain

208
00:07:22,240 --> 00:07:24,639
a mercurial signature and to use a

209
00:07:24,639 --> 00:07:26,720
different non-interactive zero-knowledge

210
00:07:26,720 --> 00:07:28,880
argument for or proof that improve its

211
00:07:28,880 --> 00:07:31,280
efficiency

212
00:07:31,280 --> 00:07:33,280
we extended the accumulator to support

213
00:07:33,280 --> 00:07:35,840
batch non-membership proof we call this

214
00:07:35,840 --> 00:07:38,160
extension set commitment scheme

215
00:07:38,160 --> 00:07:40,720
supporting this chainset

216
00:07:40,720 --> 00:07:42,960
we see it users can now prove that they

217
00:07:42,960 --> 00:07:44,960
do not have a given set of attributes in

218
00:07:44,960 --> 00:07:47,039
their credentials by showing a single

219
00:07:47,039 --> 00:07:49,440
witness for the whole set

220
00:07:49,440 --> 00:07:51,759
another improvement was the addition of

221
00:07:51,759 --> 00:07:53,759
a proof of exponentiation to outsource

222
00:07:53,759 --> 00:07:55,919
computational costs from the verifier to

223
00:07:55,919 --> 00:07:57,759
the user

224
00:07:57,759 --> 00:08:00,720
this can be useful in some scenarios

225
00:08:00,720 --> 00:08:02,240
it can be seen as an optional

226
00:08:02,240 --> 00:08:04,240
functionality and it basically allows

227
00:08:04,240 --> 00:08:06,560
the user to pre-compute some of the

228
00:08:06,560 --> 00:08:08,560
exponentiation that a verifier would

229
00:08:08,560 --> 00:08:10,800
normally have to do in order to verify a

230
00:08:10,800 --> 00:08:12,800
witness

231
00:08:12,800 --> 00:08:15,280
for this to work the user is required to

232
00:08:15,280 --> 00:08:17,360
provide a proof of correctness for those

233
00:08:17,360 --> 00:08:19,120
exponentiations

234
00:08:19,120 --> 00:08:21,199
as one would expect checking the

235
00:08:21,199 --> 00:08:22,400
correctness of the proof of

236
00:08:22,400 --> 00:08:24,639
exponentiation is cheaper than doing the

237
00:08:24,639 --> 00:08:27,120
exponentiations from scratch

238
00:08:27,120 --> 00:08:28,800
we also propose

239
00:08:28,800 --> 00:08:31,520
a one out of n or proof so that users

240
00:08:31,520 --> 00:08:33,760
can hide the issued identity during a

241
00:08:33,760 --> 00:08:35,200
showing

242
00:08:35,200 --> 00:08:37,360
finally we extended the security model

243
00:08:37,360 --> 00:08:39,760
from fhs19 to take into account the

244
00:08:39,760 --> 00:08:42,000
previous modifications

245
00:08:42,000 --> 00:08:43,760
as can be seen on this slide the

246
00:08:43,760 --> 00:08:45,680
modifications introduced on this work

247
00:08:45,680 --> 00:08:47,279
are marking gray

248
00:08:47,279 --> 00:08:49,839
if we look it top down we first replace

249
00:08:49,839 --> 00:08:51,839
the or proof on the original signature

250
00:08:51,839 --> 00:08:53,040
scheme

251
00:08:53,040 --> 00:08:55,040
then we built a set commitment scheme

252
00:08:55,040 --> 00:08:57,360
supporting decision sets based on the

253
00:08:57,360 --> 00:08:59,680
original set commitment scheme plus the

254
00:08:59,680 --> 00:09:02,160
use of patch non-membership proofs and

255
00:09:02,160 --> 00:09:04,320
the proof of exponentiation

256
00:09:04,320 --> 00:09:06,399
having a new instantiation for the abc

257
00:09:06,399 --> 00:09:08,959
framework we added designer hiding part

258
00:09:08,959 --> 00:09:11,040
to it

259
00:09:11,040 --> 00:09:12,240
now that we went through the main

260
00:09:12,240 --> 00:09:14,160
building blocks it's time to discuss

261
00:09:14,160 --> 00:09:16,399
more in detail our approach to achieve

262
00:09:16,399 --> 00:09:20,360
designer hiding property

263
00:09:22,080 --> 00:09:24,160
how can we use the fact that signatures

264
00:09:24,160 --> 00:09:26,320
can be updated to verify

265
00:09:26,320 --> 00:09:28,320
under a different but equivalent public

266
00:09:28,320 --> 00:09:29,440
key

267
00:09:29,440 --> 00:09:33,040
well the main idea goes as follows

268
00:09:33,040 --> 00:09:34,959
we first randomize the credential and

269
00:09:34,959 --> 00:09:38,240
the issuer's public key consistently

270
00:09:38,240 --> 00:09:40,160
now the updated signature on it will

271
00:09:40,160 --> 00:09:43,120
verify under the randomized public key

272
00:09:43,120 --> 00:09:44,959
here it is important to stress that

273
00:09:44,959 --> 00:09:47,040
because of the unlinkability property

274
00:09:47,040 --> 00:09:49,440
randomized public keys look like fresh

275
00:09:49,440 --> 00:09:51,760
public keys which means that without

276
00:09:51,760 --> 00:09:54,160
knowing the randomizer it hard it's hard

277
00:09:54,160 --> 00:09:56,399
to tell whether or not two even public

278
00:09:56,399 --> 00:09:59,760
keys belong to the same equivalent class

279
00:09:59,760 --> 00:10:02,240
the next step is to present the updated

280
00:10:02,240 --> 00:10:04,959
signature and public key to the verifier

281
00:10:04,959 --> 00:10:06,240
alongside a proof of correct

282
00:10:06,240 --> 00:10:09,440
randomization of the issuers public

283
00:10:09,440 --> 00:10:11,600
this ensures that the user did not

284
00:10:11,600 --> 00:10:14,480
sample a public key and self-sign his

285
00:10:14,480 --> 00:10:16,240
own credential

286
00:10:16,240 --> 00:10:18,320
for the proof of correctness we can use

287
00:10:18,320 --> 00:10:21,120
a one out of n or proof which in our

288
00:10:21,120 --> 00:10:25,360
case is a fully adaptive music argument

289
00:10:25,440 --> 00:10:28,160
we see it users can select arbitrary

290
00:10:28,160 --> 00:10:30,240
long sets of public keys to compute a

291
00:10:30,240 --> 00:10:33,279
proof with linear cost

292
00:10:33,279 --> 00:10:35,519
the corresponding formalization reflects

293
00:10:35,519 --> 00:10:36,880
this

294
00:10:36,880 --> 00:10:39,200
as can be seen the idea is that an

295
00:10:39,200 --> 00:10:41,120
adversary should not be able to

296
00:10:41,120 --> 00:10:43,600
distinguish which was the organization

297
00:10:43,600 --> 00:10:45,360
that issued the credential when

298
00:10:45,360 --> 00:10:47,360
interacting with environment under the

299
00:10:47,360 --> 00:10:50,959
role of a malicious verifier

300
00:10:53,440 --> 00:10:56,320
conclusions and future work

301
00:10:56,320 --> 00:10:58,480
our results explore multiple paths to

302
00:10:58,480 --> 00:11:02,079
extend the abc framework from fhs 19 and

303
00:11:02,079 --> 00:11:03,680
although we did not mention it much on

304
00:11:03,680 --> 00:11:05,680
this talk we also discussed revocation

305
00:11:05,680 --> 00:11:07,839
features

306
00:11:07,839 --> 00:11:09,920
all in all we obtained a more flexible

307
00:11:09,920 --> 00:11:14,399
framework leveraging different tradeoffs

308
00:11:14,399 --> 00:11:16,320
the proposed designer hiding notion

309
00:11:16,320 --> 00:11:18,480
enables more use cases

310
00:11:18,480 --> 00:11:21,279
in particular for federated scenarios in

311
00:11:21,279 --> 00:11:24,480
where multiple authorities coexist

312
00:11:24,480 --> 00:11:26,800
as future work we think that exploring

313
00:11:26,800 --> 00:11:28,800
the use of aggregateable signatures with

314
00:11:28,800 --> 00:11:30,160
structure-preserving signatures and

315
00:11:30,160 --> 00:11:31,360
equivalent classes in the

316
00:11:31,360 --> 00:11:33,760
multi-authority setting could enable

317
00:11:33,760 --> 00:11:36,320
even more use cases

318
00:11:36,320 --> 00:11:38,640
finally devising other ways to define

319
00:11:38,640 --> 00:11:41,200
equivalent classes could lead to new and

320
00:11:41,200 --> 00:11:43,839
more efficient constructions until now

321
00:11:43,839 --> 00:11:45,760
all the now constructions rely on the

322
00:11:45,760 --> 00:11:47,440
difficultman assumptions to achieve the

323
00:11:47,440 --> 00:11:50,480
desired properties

324
00:11:51,519 --> 00:11:54,639
thank you very much for your

325
00:11:54,839 --> 00:11:58,000
time you

