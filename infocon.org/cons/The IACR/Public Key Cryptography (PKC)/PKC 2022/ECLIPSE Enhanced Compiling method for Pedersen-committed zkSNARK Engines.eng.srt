1
00:00:00,719 --> 00:00:03,679
hi my name is mateo campanelli and i'm

2
00:00:03,679 --> 00:00:06,000
going to talk about eclipse uh eclipse

3
00:00:06,000 --> 00:00:07,680
is a better computer for snark with the

4
00:00:07,680 --> 00:00:10,480
universal srs it's actually a family of

5
00:00:10,480 --> 00:00:12,400
community-approved snarks

6
00:00:12,400 --> 00:00:14,960
and this is a joint work with

7
00:00:14,960 --> 00:00:18,080
other researchers from oahu's university

8
00:00:18,080 --> 00:00:20,240
concordium and the indian institute of

9
00:00:20,240 --> 00:00:21,760
science

10
00:00:21,760 --> 00:00:24,240
our setting can be split in three parts

11
00:00:24,240 --> 00:00:26,960
so we care about succinct interactive

12
00:00:26,960 --> 00:00:28,800
zero knowledge snarks i'll tell more

13
00:00:28,800 --> 00:00:31,039
about that we want coming to improve

14
00:00:31,039 --> 00:00:33,840
clearly i'll tell more about that too

15
00:00:33,840 --> 00:00:35,760
and we care about the setting where we

16
00:00:35,760 --> 00:00:38,239
have a universal trusted setup of linear

17
00:00:38,239 --> 00:00:40,000
size

18
00:00:40,000 --> 00:00:41,920
now succinct and interactive their

19
00:00:41,920 --> 00:00:44,399
knowledge

20
00:00:44,399 --> 00:00:46,320
of the following setting imagine you

21
00:00:46,320 --> 00:00:50,079
have a relation r with a public input x

22
00:00:50,079 --> 00:00:53,360
and a witness w for example w could be a

23
00:00:53,360 --> 00:00:55,520
signature or which you want to prove

24
00:00:55,520 --> 00:00:58,320
knowledge with respect to a certain

25
00:00:58,320 --> 00:01:00,800
certain public statement x

26
00:01:00,800 --> 00:01:02,000
then

27
00:01:02,000 --> 00:01:04,479
approver can provide the very succinct

28
00:01:04,479 --> 00:01:06,240
certificate pi

29
00:01:06,240 --> 00:01:09,920
they can be verified by verifier using x

30
00:01:09,920 --> 00:01:11,360
as a

31
00:01:11,360 --> 00:01:12,960
simple using the following syntax we

32
00:01:12,960 --> 00:01:16,640
call this as an arc if it's of knowledge

33
00:01:16,640 --> 00:01:17,759
now

34
00:01:17,759 --> 00:01:19,600
this setting we care about snarks that

35
00:01:19,600 --> 00:01:21,040
are zero knowledge

36
00:01:21,040 --> 00:01:23,280
is the standard zero logic setting so in

37
00:01:23,280 --> 00:01:25,280
the interactive case p

38
00:01:25,280 --> 00:01:27,680
and v are two parties they interrupt and

39
00:01:27,680 --> 00:01:29,920
at the end v is convinced that

40
00:01:29,920 --> 00:01:32,000
some w satisfying certain property is

41
00:01:32,000 --> 00:01:33,280
known

42
00:01:33,280 --> 00:01:35,439
now we're going to care about

43
00:01:35,439 --> 00:01:37,600
a more specific setting well then

44
00:01:37,600 --> 00:01:40,240
calling community proof or cp their

45
00:01:40,240 --> 00:01:44,399
knowledge which is when we trust data

46
00:01:44,399 --> 00:01:46,240
we trust that ps

47
00:01:46,240 --> 00:01:48,159
knowledge of some data that can be

48
00:01:48,159 --> 00:01:49,520
pointed to

49
00:01:49,520 --> 00:01:51,680
in particular what p is going to do is

50
00:01:51,680 --> 00:01:54,159
going to commit here represented with an

51
00:01:54,159 --> 00:01:55,119
envelope

52
00:01:55,119 --> 00:01:58,399
to a witness w it's gonna be out there

53
00:01:58,399 --> 00:02:00,719
and we can

54
00:02:00,719 --> 00:02:02,719
have some guarantees about

55
00:02:02,719 --> 00:02:05,200
what uh will properties

56
00:02:05,200 --> 00:02:07,280
holds for w in

57
00:02:07,280 --> 00:02:09,199
and so now this in particular that we

58
00:02:09,199 --> 00:02:11,200
were proving is both that a certain

59
00:02:11,200 --> 00:02:14,959
property holds so these are but also

60
00:02:14,959 --> 00:02:16,959
that uh

61
00:02:16,959 --> 00:02:21,520
the envelope opens to sweetness w

62
00:02:21,520 --> 00:02:25,360
so we prove the relation in this comment

63
00:02:25,360 --> 00:02:27,360
now why do we care about this setting

64
00:02:27,360 --> 00:02:30,400
there's uh many main different scenarios

65
00:02:30,400 --> 00:02:31,920
anywhere we care about compression and

66
00:02:31,920 --> 00:02:33,760
fingerprinting imagine you have a

67
00:02:33,760 --> 00:02:37,120
hospital holding sensitive health

68
00:02:37,120 --> 00:02:38,080
data

69
00:02:38,080 --> 00:02:40,080
and we want to train

70
00:02:40,080 --> 00:02:43,040
public machine learning model

71
00:02:43,040 --> 00:02:45,280
so what's going to happen

72
00:02:45,280 --> 00:02:47,440
what could happen possibly is that

73
00:02:47,440 --> 00:02:49,200
the data could be committed in a very

74
00:02:49,200 --> 00:02:51,040
sustained way this commitment is public

75
00:02:51,040 --> 00:02:53,200
it's authenticated by the government and

76
00:02:53,200 --> 00:02:54,239
such

77
00:02:54,239 --> 00:02:55,599
and then

78
00:02:55,599 --> 00:02:58,800
we can publicly prove that a certain

79
00:02:58,800 --> 00:03:00,480
training

80
00:03:00,480 --> 00:03:03,120
procedure was executed on them

81
00:03:03,120 --> 00:03:04,959
other settings involve commit ahead of

82
00:03:04,959 --> 00:03:06,959
time which here

83
00:03:06,959 --> 00:03:08,800
uh with this name i'm calling any

84
00:03:08,800 --> 00:03:11,040
setting where we commit to a bunch of

85
00:03:11,040 --> 00:03:12,800
data for example my credentials some

86
00:03:12,800 --> 00:03:15,840
data about me uh my credit history my

87
00:03:15,840 --> 00:03:18,720
passport and so on and then later even

88
00:03:18,720 --> 00:03:20,159
when

89
00:03:20,159 --> 00:03:23,040
after i've committed this i can prove

90
00:03:23,040 --> 00:03:25,040
things about it

91
00:03:25,040 --> 00:03:27,120
and then we also know that cp commit

92
00:03:27,120 --> 00:03:29,760
improve can be useful to obtain very

93
00:03:29,760 --> 00:03:30,959
efficient

94
00:03:30,959 --> 00:03:32,400
composition of proofs

95
00:03:32,400 --> 00:03:34,560
when we have

96
00:03:34,560 --> 00:03:38,000
proof system with different instruments

97
00:03:38,640 --> 00:03:41,040
okay so these settings

98
00:03:41,040 --> 00:03:42,720
settings translate to

99
00:03:42,720 --> 00:03:44,159
clear applications or anonymous

100
00:03:44,159 --> 00:03:45,840
credentials blockchains with privacy

101
00:03:45,840 --> 00:03:47,200
properties

102
00:03:47,200 --> 00:03:49,440
and then in general anywhere we need

103
00:03:49,440 --> 00:03:51,680
data to be referenced in a certain

104
00:03:51,680 --> 00:03:54,959
manner in particular privately instances

105
00:03:54,959 --> 00:03:57,200
so just going back to the syntax of

106
00:03:57,200 --> 00:03:58,959
snarks versus cp's narcs to understand

107
00:03:58,959 --> 00:04:01,280
the difference there's not really any

108
00:04:01,280 --> 00:04:03,360
difference here in this dark setting

109
00:04:03,360 --> 00:04:05,760
we're probably relation r

110
00:04:05,760 --> 00:04:07,120
and

111
00:04:07,120 --> 00:04:08,640
in the cps in arcade we're proving

112
00:04:08,640 --> 00:04:11,040
relation r

113
00:04:11,040 --> 00:04:13,519
and the consistency between w and

114
00:04:13,519 --> 00:04:14,640
certain

115
00:04:14,640 --> 00:04:16,720
public commitments here we have l

116
00:04:16,720 --> 00:04:18,320
commitments and i'm representing with

117
00:04:18,320 --> 00:04:21,040
this dotted sorry dashed lines the

118
00:04:21,040 --> 00:04:23,360
opening relation so i say there's really

119
00:04:23,360 --> 00:04:24,800
no difference but what do we care about

120
00:04:24,800 --> 00:04:26,400
this setting

121
00:04:26,400 --> 00:04:27,600
well

122
00:04:27,600 --> 00:04:29,600
the reason is that

123
00:04:29,600 --> 00:04:31,040
there are

124
00:04:31,040 --> 00:04:33,199
there are some efficiency advantages in

125
00:04:33,199 --> 00:04:34,960
doing that efficiency advantage is the

126
00:04:34,960 --> 00:04:36,800
interoperability properties want to

127
00:04:36,800 --> 00:04:38,639
strive for

128
00:04:38,639 --> 00:04:41,840
in particular we want this augmented

129
00:04:41,840 --> 00:04:45,440
relation this r plus opening to be

130
00:04:45,440 --> 00:04:48,240
efficiently provable and verifiable and

131
00:04:48,240 --> 00:04:49,919
they want these commitments to be

132
00:04:49,919 --> 00:04:52,479
interoperable and as standard as

133
00:04:52,479 --> 00:04:53,520
possible we want them to be

134
00:04:53,520 --> 00:04:56,080
interoperable among proof systems and

135
00:04:56,080 --> 00:04:57,199
standard

136
00:04:57,199 --> 00:04:58,320
is in

137
00:04:58,320 --> 00:05:00,080
they should be parasite commitment with

138
00:05:00,080 --> 00:05:03,039
classic curves or merkle trees and so on

139
00:05:03,039 --> 00:05:04,880
there are unsatisfactory solutions for

140
00:05:04,880 --> 00:05:06,560
example that

141
00:05:06,560 --> 00:05:08,160
can one can straightforwardly come up

142
00:05:08,160 --> 00:05:10,160
with for example use merkle tree or

143
00:05:10,160 --> 00:05:11,280
patterson

144
00:05:11,280 --> 00:05:13,840
inside the relation r and then open that

145
00:05:13,840 --> 00:05:15,199
in the circuit

146
00:05:15,199 --> 00:05:16,880
this issue standard the standard

147
00:05:16,880 --> 00:05:18,639
property but it can be expensive you

148
00:05:18,639 --> 00:05:21,199
need to do all this

149
00:05:21,199 --> 00:05:23,039
in the encoding of the relation there

150
00:05:23,039 --> 00:05:25,360
are lots of tricks that

151
00:05:25,360 --> 00:05:27,600
the community came up with and one of

152
00:05:27,600 --> 00:05:29,280
the most famous one is the one you

153
00:05:29,280 --> 00:05:31,840
played in c cash for the jab jab curve

154
00:05:31,840 --> 00:05:35,520
there's coco backstab for bullet proofs

155
00:05:35,520 --> 00:05:37,600
and these tend to be more efficient but

156
00:05:37,600 --> 00:05:39,280
they're also curve dependent or they're

157
00:05:39,280 --> 00:05:41,360
dependent on different settings so we

158
00:05:41,360 --> 00:05:44,000
care about having this efficiency but

159
00:05:44,000 --> 00:05:47,360
also in generality of sort

160
00:05:47,360 --> 00:05:49,360
now before the last component of our

161
00:05:49,360 --> 00:05:51,360
setting is trust models

162
00:05:51,360 --> 00:05:52,800
real quick

163
00:05:52,800 --> 00:05:55,520
we know that we always have some type of

164
00:05:55,520 --> 00:05:56,560
setup

165
00:05:56,560 --> 00:05:58,000
to achieve

166
00:05:58,000 --> 00:06:00,400
interacting zero knowledge now

167
00:06:00,400 --> 00:06:02,240
in the best possible case this is

168
00:06:02,240 --> 00:06:04,720
transparent we can sample uniform string

169
00:06:04,720 --> 00:06:06,639
and this can work

170
00:06:06,639 --> 00:06:09,360
for that it's basically no trusted setup

171
00:06:09,360 --> 00:06:10,960
and then we have setting when we this

172
00:06:10,960 --> 00:06:13,759
string is structured and it's dependent

173
00:06:13,759 --> 00:06:15,919
on the relation

174
00:06:15,919 --> 00:06:18,479
and then we have settings where

175
00:06:18,479 --> 00:06:21,360
this string depends only on some type of

176
00:06:21,360 --> 00:06:22,400
bound

177
00:06:22,400 --> 00:06:24,240
on the size of the relation

178
00:06:24,240 --> 00:06:26,880
and then can be usually specialized

179
00:06:26,880 --> 00:06:29,280
in um deterministically depending on the

180
00:06:29,280 --> 00:06:30,800
relation and this is the setting we're

181
00:06:30,800 --> 00:06:32,960
going to care about often this property

182
00:06:32,960 --> 00:06:34,880
is also

183
00:06:34,880 --> 00:06:36,080
paired with

184
00:06:36,080 --> 00:06:37,520
updatability

185
00:06:37,520 --> 00:06:40,080
which is very useful

186
00:06:40,080 --> 00:06:43,280
we are now ready to set our results

187
00:06:43,280 --> 00:06:44,080
so

188
00:06:44,080 --> 00:06:45,919
in eclipse we provide new ways to

189
00:06:45,919 --> 00:06:48,240
construct the efficient ship is not with

190
00:06:48,240 --> 00:06:50,560
the universal srs

191
00:06:50,560 --> 00:06:54,560
and our results are generic as possible

192
00:06:54,560 --> 00:06:56,160
and we'll see a little bit more about

193
00:06:56,160 --> 00:06:58,400
them in particular breaking them down we

194
00:06:58,400 --> 00:07:00,800
have a general compiler into cp snarks

195
00:07:00,800 --> 00:07:03,280
with universal srs of linear size so

196
00:07:03,280 --> 00:07:05,280
take your favorite snark

197
00:07:05,280 --> 00:07:07,440
and start with the srs and you can

198
00:07:07,440 --> 00:07:10,000
compile it into a cp snark

199
00:07:10,000 --> 00:07:11,680
and now here i'm saying take your

200
00:07:11,680 --> 00:07:13,360
favorite snarky composite but really

201
00:07:13,360 --> 00:07:15,840
what i mean is take a snarking

202
00:07:15,840 --> 00:07:17,840
information throughout the form of sort

203
00:07:17,840 --> 00:07:19,840
we're going to talk about that later and

204
00:07:19,840 --> 00:07:22,080
you can convert it into c business

205
00:07:22,080 --> 00:07:23,680
then we show how to

206
00:07:23,680 --> 00:07:25,120
concretely

207
00:07:25,120 --> 00:07:27,919
uh apply this compiler

208
00:07:27,919 --> 00:07:28,880
to

209
00:07:28,880 --> 00:07:29,759
three

210
00:07:29,759 --> 00:07:31,280
very efficient and

211
00:07:31,280 --> 00:07:32,960
popular systems up there marlin plunk

212
00:07:32,960 --> 00:07:35,120
and sonic

213
00:07:35,120 --> 00:07:37,520
um and in particular the type of

214
00:07:37,520 --> 00:07:39,280
commitment

215
00:07:39,280 --> 00:07:41,120
that we managed to obtain and they

216
00:07:41,120 --> 00:07:43,599
managed to support is a comparison of

217
00:07:43,599 --> 00:07:45,759
commitment and we managed to do that

218
00:07:45,759 --> 00:07:47,120
importantly because we care about

219
00:07:47,120 --> 00:07:48,879
efficiency in practice

220
00:07:48,879 --> 00:07:50,400
we managed to do that with small

221
00:07:50,400 --> 00:07:52,240
overhead concretely

222
00:07:52,240 --> 00:07:54,479
the overhead is this

223
00:07:54,479 --> 00:07:55,440
so

224
00:07:55,440 --> 00:07:58,639
the first here i'm comparing eclipse to

225
00:07:58,639 --> 00:08:00,319
other works from generic supersnarks

226
00:08:00,319 --> 00:08:02,960
with universal srs

227
00:08:02,960 --> 00:08:05,919
in eclipse in the first row

228
00:08:05,919 --> 00:08:07,759
other results other

229
00:08:07,759 --> 00:08:09,680
words we can compare the two naturally

230
00:08:09,680 --> 00:08:11,680
are the lunar

231
00:08:11,680 --> 00:08:13,919
and the legos in our paper which has

232
00:08:13,919 --> 00:08:15,919
this lego usc

233
00:08:15,919 --> 00:08:18,080
you can see how eclipse obtains

234
00:08:18,080 --> 00:08:22,639
sub-linear proof size here l

235
00:08:22,639 --> 00:08:23,599
is

236
00:08:23,599 --> 00:08:25,440
the number of commitments

237
00:08:25,440 --> 00:08:28,000
we're committing to in the the size of

238
00:08:28,000 --> 00:08:30,400
the opening of each of the commitments

239
00:08:30,400 --> 00:08:32,399
and when i say subliner size

240
00:08:32,399 --> 00:08:35,120
these are these rows refer to the

241
00:08:35,120 --> 00:08:36,719
applications of

242
00:08:36,719 --> 00:08:38,880
this persistent to

243
00:08:38,880 --> 00:08:41,039
constant of the eclipse compiling

244
00:08:41,039 --> 00:08:43,919
another compiler to constant size proof

245
00:08:43,919 --> 00:08:45,600
systems

246
00:08:45,600 --> 00:08:48,480
and you can also see how

247
00:08:48,480 --> 00:08:50,880
we improve on lunar improve size and we

248
00:08:50,880 --> 00:08:51,839
obtain

249
00:08:51,839 --> 00:08:55,440
a trade-off in verification time

250
00:08:55,440 --> 00:08:56,720
in particular

251
00:08:56,720 --> 00:08:58,560
for example lunarchives

252
00:08:58,560 --> 00:09:00,640
better proven to more verification time

253
00:09:00,640 --> 00:09:01,600
in case

254
00:09:01,600 --> 00:09:02,959
they can be a

255
00:09:02,959 --> 00:09:06,319
burden for the very fire

256
00:09:06,560 --> 00:09:08,240
now i'm going to give a little bit more

257
00:09:08,240 --> 00:09:10,080
background about our techniques

258
00:09:10,080 --> 00:09:11,519
and before that i'm going to give more

259
00:09:11,519 --> 00:09:13,600
background about how we construct we

260
00:09:13,600 --> 00:09:14,959
construct

261
00:09:14,959 --> 00:09:18,640
snarks with a universal srs in general

262
00:09:18,640 --> 00:09:20,839
and the way we construct the mutual is

263
00:09:20,839 --> 00:09:23,040
from basically every recipe already

264
00:09:23,040 --> 00:09:25,200
mentioned

265
00:09:25,200 --> 00:09:27,120
we use a compiler from an idealized

266
00:09:27,120 --> 00:09:30,080
information theoretic object so

267
00:09:30,080 --> 00:09:31,680
so we take this information theoretic

268
00:09:31,680 --> 00:09:34,320
object if you're familiar with that pcps

269
00:09:34,320 --> 00:09:36,000
each piece observer holography

270
00:09:36,000 --> 00:09:37,760
holographic processing we take a

271
00:09:37,760 --> 00:09:40,399
cryptograph a cryptographic object say

272
00:09:40,399 --> 00:09:42,480
vector commitment polynomial between

273
00:09:42,480 --> 00:09:45,519
others collision resistance

274
00:09:45,519 --> 00:09:47,519
and we compile them

275
00:09:47,519 --> 00:09:49,920
into an object we can actually use a

276
00:09:49,920 --> 00:09:52,240
snark

277
00:09:52,399 --> 00:09:56,560
so we obtain usually what examples of

278
00:09:56,560 --> 00:09:58,480
what we can obtain with these compilers

279
00:09:58,480 --> 00:09:59,920
are

280
00:09:59,920 --> 00:10:01,600
these constructions already mentioned

281
00:10:01,600 --> 00:10:04,320
sonic mark and planck here i'm just

282
00:10:04,320 --> 00:10:06,560
showing a table to show a little bit

283
00:10:06,560 --> 00:10:09,440
what type of efficiency they achieve

284
00:10:09,440 --> 00:10:11,519
it's not super important right now just

285
00:10:11,519 --> 00:10:13,120
to give

286
00:10:13,120 --> 00:10:14,800
an idea you can see

287
00:10:14,800 --> 00:10:19,040
proof is constant here and the columns i

288
00:10:19,040 --> 00:10:19,420
um

289
00:10:19,420 --> 00:10:21,040
[Music]

290
00:10:21,040 --> 00:10:22,959
i blocked they're they're not for

291
00:10:22,959 --> 00:10:24,399
censorship but they're just because

292
00:10:24,399 --> 00:10:25,920
they're not real

293
00:10:25,920 --> 00:10:28,160
so we can achieve these proof systems

294
00:10:28,160 --> 00:10:29,600
through these compilers and we're going

295
00:10:29,600 --> 00:10:31,360
to tweak this recipe the recipe by which

296
00:10:31,360 --> 00:10:32,880
we shoot them a little bit

297
00:10:32,880 --> 00:10:35,200
in the recipe

298
00:10:35,200 --> 00:10:36,800
is as follows

299
00:10:36,800 --> 00:10:39,760
we take an algebraic holographic proof

300
00:10:39,760 --> 00:10:40,959
which is

301
00:10:40,959 --> 00:10:42,720
it doesn't matter what it is exactly i'm

302
00:10:42,720 --> 00:10:44,160
going to give some information about it

303
00:10:44,160 --> 00:10:47,120
but it's our idealized protocol

304
00:10:47,120 --> 00:10:48,560
and

305
00:10:48,560 --> 00:10:50,480
you can think of it as an interactive

306
00:10:50,480 --> 00:10:53,279
atlas protocol where the prover holds

307
00:10:53,279 --> 00:10:55,120
polynomial encodings to the witness so

308
00:10:55,120 --> 00:10:57,440
it takes the witness it encodes that in

309
00:10:57,440 --> 00:10:59,279
a bunch of polynomials

310
00:10:59,279 --> 00:11:01,040
and then the

311
00:11:01,040 --> 00:11:03,279
it gives oracle access to the verifier

312
00:11:03,279 --> 00:11:05,200
to the evaluations of these polynomials

313
00:11:05,200 --> 00:11:07,519
and the verifier can query

314
00:11:07,519 --> 00:11:09,200
the prover

315
00:11:09,200 --> 00:11:10,480
on

316
00:11:10,480 --> 00:11:11,279
this

317
00:11:11,279 --> 00:11:13,120
proverbs polynomials provided by

318
00:11:13,120 --> 00:11:15,680
approver in different points

319
00:11:15,680 --> 00:11:18,240
more pictorially you have your prover on

320
00:11:18,240 --> 00:11:20,800
the left for right here it says php but

321
00:11:20,800 --> 00:11:22,480
php is a different

322
00:11:22,480 --> 00:11:25,200
idealized protocol that generalizes hp

323
00:11:25,200 --> 00:11:26,399
but you can think of that as

324
00:11:26,399 --> 00:11:29,360
algebraically graphic proof

325
00:11:29,360 --> 00:11:31,360
and the prover puts in the sky these

326
00:11:31,360 --> 00:11:33,360
polynomials

327
00:11:33,360 --> 00:11:35,600
and the verifier sends challenges

328
00:11:35,600 --> 00:11:38,320
sets there are a few details i mentoring

329
00:11:38,320 --> 00:11:39,760
here but this

330
00:11:39,760 --> 00:11:42,000
this is the main idea and q is a set of

331
00:11:42,000 --> 00:11:44,160
queries dot q system queries the very

332
00:11:44,160 --> 00:11:45,839
first mask

333
00:11:45,839 --> 00:11:47,360
and each query is going to look like

334
00:11:47,360 --> 00:11:48,480
that so

335
00:11:48,480 --> 00:11:50,720
each query can be for example p1 x star

336
00:11:50,720 --> 00:11:52,160
equals t star

337
00:11:52,160 --> 00:11:53,680
prove it to me

338
00:11:53,680 --> 00:11:55,360
in in this idealized protocol the

339
00:11:55,360 --> 00:11:57,200
verifier just receives an answer to this

340
00:11:57,200 --> 00:11:58,639
and can check it

341
00:11:58,639 --> 00:12:00,240
but in the real world this doesn't

342
00:12:00,240 --> 00:12:01,200
happen

343
00:12:01,200 --> 00:12:03,920
also one thing i ignore here

344
00:12:03,920 --> 00:12:06,480
uh this is gonna come up later this is

345
00:12:06,480 --> 00:12:08,240
an interactive world but then it's going

346
00:12:08,240 --> 00:12:09,760
to be

347
00:12:09,760 --> 00:12:11,839
the interactive eyes it's going to be

348
00:12:11,839 --> 00:12:13,440
made new interactive through the facial

349
00:12:13,440 --> 00:12:16,399
mirror heuristic

350
00:12:16,399 --> 00:12:18,399
okay so if you have an ahp how do you

351
00:12:18,399 --> 00:12:21,600
compile that to an srs it's not your new

352
00:12:21,600 --> 00:12:22,880
srsnark

353
00:12:22,880 --> 00:12:24,480
and what you need here

354
00:12:24,480 --> 00:12:25,600
is

355
00:12:25,600 --> 00:12:28,160
polynomial commitment this is the main

356
00:12:28,160 --> 00:12:30,079
tool in some other

357
00:12:30,079 --> 00:12:32,720
compilers such as the modeling dark

358
00:12:32,720 --> 00:12:34,959
lunar clone compilers

359
00:12:34,959 --> 00:12:35,680
and

360
00:12:35,680 --> 00:12:38,079
by polynomial commitment we mean a

361
00:12:38,079 --> 00:12:40,560
machinery get that takes a polynomial

362
00:12:40,560 --> 00:12:43,200
and compresses it into

363
00:12:43,200 --> 00:12:45,360
a very short digest and allows to prove

364
00:12:45,360 --> 00:12:47,120
efficiently assessingly into your

365
00:12:47,120 --> 00:12:48,320
knowledge

366
00:12:48,320 --> 00:12:49,839
and evaluation of the polynomial

367
00:12:49,839 --> 00:12:51,680
basically the queries i mentioned about

368
00:12:51,680 --> 00:12:52,959
earlier

369
00:12:52,959 --> 00:12:55,519
but also there are some other caveats so

370
00:12:55,519 --> 00:12:58,160
for example they should the loft and

371
00:12:58,160 --> 00:12:59,120
um

372
00:12:59,120 --> 00:13:01,519
they should allow to prove some current

373
00:13:01,519 --> 00:13:03,519
uh want to prove some guarantees about

374
00:13:03,519 --> 00:13:06,399
the degree of the polynomial we can

375
00:13:06,399 --> 00:13:07,839
ignore these details for this

376
00:13:07,839 --> 00:13:09,920
presentation

377
00:13:09,920 --> 00:13:10,959
the one

378
00:13:10,959 --> 00:13:12,720
popular polynomial commitment we use in

379
00:13:12,720 --> 00:13:15,600
practice is the kcg

380
00:13:15,600 --> 00:13:20,560
commitment which looks roughly like that

381
00:13:20,560 --> 00:13:22,560
now i'm going to introduce some notation

382
00:13:22,560 --> 00:13:23,600
so

383
00:13:23,600 --> 00:13:25,440
i'm going to talk

384
00:13:25,440 --> 00:13:26,320
about

385
00:13:26,320 --> 00:13:27,760
commitments of different types with

386
00:13:27,760 --> 00:13:30,079
different geometric shapes

387
00:13:30,079 --> 00:13:32,800
earlier in the relation i use these

388
00:13:32,800 --> 00:13:34,959
little squares but now i'm going to

389
00:13:34,959 --> 00:13:37,279
introduce

390
00:13:37,279 --> 00:13:39,519
a circle notation to

391
00:13:39,519 --> 00:13:42,399
to denote commitments to

392
00:13:42,399 --> 00:13:44,160
these encodings we're using in the

393
00:13:44,160 --> 00:13:46,079
idealized object

394
00:13:46,079 --> 00:13:48,079
so the squares are the ones that are

395
00:13:48,079 --> 00:13:49,920
input to the relation and the circles

396
00:13:49,920 --> 00:13:52,959
are the one we use new protocol

397
00:13:52,959 --> 00:13:55,360
okay so i mentioned a protocol what is

398
00:13:55,360 --> 00:13:57,360
this protocol what is this recipe we

399
00:13:57,360 --> 00:13:59,440
have our ideological idealized object

400
00:13:59,440 --> 00:14:01,839
and want to convert it into

401
00:14:01,839 --> 00:14:04,000
we take our polynomial commitment and we

402
00:14:04,000 --> 00:14:06,880
use it to make each of these encodings

403
00:14:06,880 --> 00:14:09,040
p1pn of the witness

404
00:14:09,040 --> 00:14:10,639
then the verifier

405
00:14:10,639 --> 00:14:12,560
the hp verifier is going to make some

406
00:14:12,560 --> 00:14:13,600
queries

407
00:14:13,600 --> 00:14:15,920
and we can use the polynomial machinery

408
00:14:15,920 --> 00:14:18,320
to prove these queries are satisfied

409
00:14:18,320 --> 00:14:19,839
nothing super surprising at the high

410
00:14:19,839 --> 00:14:22,000
level there's a lot of important details

411
00:14:22,000 --> 00:14:23,519
to take care of which i'm going to

412
00:14:23,519 --> 00:14:25,040
ignore here

413
00:14:25,040 --> 00:14:27,680
now this is the recipe for stocks in

414
00:14:27,680 --> 00:14:30,639
general we care about cp snarks let's

415
00:14:30,639 --> 00:14:33,920
see what we should do for

416
00:14:34,800 --> 00:14:38,160
so one more thing to mention is shamir

417
00:14:38,160 --> 00:14:40,160
and why is this rs universal before we

418
00:14:40,160 --> 00:14:42,480
move to cp's nerves

419
00:14:42,480 --> 00:14:44,320
and the reason why the structural

420
00:14:44,320 --> 00:14:46,480
reference string ends up being universal

421
00:14:46,480 --> 00:14:49,360
so it's valid for any for any relation

422
00:14:49,360 --> 00:14:51,120
or a certain bond

423
00:14:51,120 --> 00:14:54,480
is because the snark setup itself is the

424
00:14:54,480 --> 00:14:56,560
polynomial commitment setup

425
00:14:56,560 --> 00:14:58,560
which itself just depends on the degree

426
00:14:58,560 --> 00:15:00,079
of the

427
00:15:00,079 --> 00:15:02,800
uh of the phone number

428
00:15:02,800 --> 00:15:04,800
and the polynomial degree is related to

429
00:15:04,800 --> 00:15:06,880
the size of the relation

430
00:15:06,880 --> 00:15:09,279
so next let's look at the actual recipe

431
00:15:09,279 --> 00:15:11,360
for cp snarks

432
00:15:11,360 --> 00:15:13,600
of course we need to change our syntax a

433
00:15:13,600 --> 00:15:15,680
little bit here so i'm

434
00:15:15,680 --> 00:15:18,079
i'm introducing here

435
00:15:18,079 --> 00:15:21,199
the commit the commitment uh c1 to

436
00:15:21,199 --> 00:15:24,160
correlation about and it's opening oc

437
00:15:24,160 --> 00:15:26,880
i'm gonna assume just for for the time

438
00:15:26,880 --> 00:15:28,560
being that there's only one commitment

439
00:15:28,560 --> 00:15:31,759
or the general case there are l

440
00:15:31,759 --> 00:15:35,199
so we know by the earlier recipe that

441
00:15:35,199 --> 00:15:36,720
we can prove

442
00:15:36,720 --> 00:15:39,680
this dash part of the relation

443
00:15:39,680 --> 00:15:41,360
on the top left

444
00:15:41,360 --> 00:15:43,360
so the actual relation but what's left

445
00:15:43,360 --> 00:15:45,839
is to prove the connection between

446
00:15:45,839 --> 00:15:47,920
whatever the program knows

447
00:15:47,920 --> 00:15:50,720
and these commitments that are also the

448
00:15:50,720 --> 00:15:53,600
the public inputs very far so we need we

449
00:15:53,600 --> 00:15:56,720
need some additional pieces

450
00:15:56,720 --> 00:15:58,160
and

451
00:15:58,160 --> 00:15:59,920
remember this

452
00:15:59,920 --> 00:16:01,720
these uh

453
00:16:01,720 --> 00:16:05,040
c1cn over here in the circle in circles

454
00:16:05,040 --> 00:16:07,040
they represent commitments to some

455
00:16:07,040 --> 00:16:08,800
encoding of the polynomial

456
00:16:08,800 --> 00:16:11,199
of the witness so what we can do is we

457
00:16:11,199 --> 00:16:13,920
can show that they're linked

458
00:16:13,920 --> 00:16:15,600
to

459
00:16:15,600 --> 00:16:18,560
the witness whatever string the square

460
00:16:18,560 --> 00:16:20,880
commitments are committed to

461
00:16:20,880 --> 00:16:23,120
so intuitively we can add a proof this

462
00:16:23,120 --> 00:16:25,199
pylink over here an additional

463
00:16:25,199 --> 00:16:26,160
object

464
00:16:26,160 --> 00:16:28,880
that can link

465
00:16:29,040 --> 00:16:31,920
um the commit the committed encodings

466
00:16:31,920 --> 00:16:34,000
circle c1 circle cn

467
00:16:34,000 --> 00:16:36,399
to whatever is in the square c

468
00:16:36,399 --> 00:16:38,959
and so this linking proof this is

469
00:16:38,959 --> 00:16:42,079
basically a specialized narc

470
00:16:42,079 --> 00:16:44,320
proves linking or knowledge of a certain

471
00:16:44,320 --> 00:16:46,160
w such that

472
00:16:46,160 --> 00:16:49,360
the square c opens to some parts of w

473
00:16:49,360 --> 00:16:52,880
is not going to be the whole witness

474
00:16:52,880 --> 00:16:56,320
ci the ci is opens to the polynomials

475
00:16:56,320 --> 00:16:57,680
and calling this witness and everything

476
00:16:57,680 --> 00:17:00,000
is consistent and nice

477
00:17:00,000 --> 00:17:01,759
so this is the object we need but of

478
00:17:01,759 --> 00:17:04,480
course it's not that simple i mean sure

479
00:17:04,480 --> 00:17:05,839
this is what we need but a few

480
00:17:05,839 --> 00:17:07,520
challenges to to solve and this is what

481
00:17:07,520 --> 00:17:09,520
we do in eclipse

482
00:17:09,520 --> 00:17:10,640
um

483
00:17:10,640 --> 00:17:12,880
the challenge one challenge one is we

484
00:17:12,880 --> 00:17:14,720
don't want to depend on the whole

485
00:17:14,720 --> 00:17:16,839
witness when we do this

486
00:17:16,839 --> 00:17:20,480
so the commitment square c

487
00:17:20,480 --> 00:17:22,959
may only be part of the whole witness we

488
00:17:22,959 --> 00:17:25,280
are using in our relation are we paying

489
00:17:25,280 --> 00:17:27,119
for all of it when we are doing this

490
00:17:27,119 --> 00:17:28,000
proof

491
00:17:28,000 --> 00:17:29,520
hopefully not so

492
00:17:29,520 --> 00:17:32,799
in order not to pay for it we showed

493
00:17:32,799 --> 00:17:35,039
that

494
00:17:35,120 --> 00:17:37,440
we can decompose each of these encodings

495
00:17:37,440 --> 00:17:39,679
in an additive manner

496
00:17:39,679 --> 00:17:42,960
in marlin plunksonic the constructions

497
00:17:42,960 --> 00:17:44,080
we care about

498
00:17:44,080 --> 00:17:45,919
and we define an appropriate abstraction

499
00:17:45,919 --> 00:17:48,160
that helps us

500
00:17:48,160 --> 00:17:48,500
um

501
00:17:48,500 --> 00:17:49,840
[Music]

502
00:17:49,840 --> 00:17:52,960
helps us doing this generically

503
00:17:52,960 --> 00:17:55,760
and there's a an important sub challenge

504
00:17:55,760 --> 00:17:57,840
here which is proving

505
00:17:57,840 --> 00:17:58,960
that

506
00:17:58,960 --> 00:17:59,520
whatever um

507
00:17:59,520 --> 00:18:02,160
decomposing doesn't overlap because a

508
00:18:02,160 --> 00:18:03,919
dishonest proverb may

509
00:18:03,919 --> 00:18:06,640
mean doing this decomposition

510
00:18:06,640 --> 00:18:08,240
as we expect

511
00:18:08,240 --> 00:18:10,240
and then the second challenge we saw

512
00:18:10,240 --> 00:18:12,160
is

513
00:18:12,160 --> 00:18:14,480
that um

514
00:18:14,480 --> 00:18:16,960
we want to have actually

515
00:18:16,960 --> 00:18:19,440
a concrete

516
00:18:19,440 --> 00:18:21,679
a concrete proof system for this linking

517
00:18:21,679 --> 00:18:23,679
so it's a little bit like a chicken neck

518
00:18:23,679 --> 00:18:25,600
problem what process are we gonna use

519
00:18:25,600 --> 00:18:27,600
for this this is now we're trying to

520
00:18:27,600 --> 00:18:29,840
build this on cp snark we need the cpu

521
00:18:29,840 --> 00:18:31,919
is not for doing this but

522
00:18:31,919 --> 00:18:34,799
we need the cpu start that's simpler

523
00:18:34,799 --> 00:18:37,120
and what we use

524
00:18:37,120 --> 00:18:41,840
um is intuitively sigma protocols to

525
00:18:41,840 --> 00:18:44,400
prove this relation because everything

526
00:18:44,400 --> 00:18:47,120
you need in each of these

527
00:18:47,120 --> 00:18:50,240
construction it reduces to proving that

528
00:18:50,240 --> 00:18:52,480
a certain commitment c

529
00:18:52,480 --> 00:18:53,280
the

530
00:18:53,280 --> 00:18:55,520
uppercase on the left here that commits

531
00:18:55,520 --> 00:18:57,679
to the whole witness

532
00:18:57,679 --> 00:18:59,440
is basically equal to

533
00:18:59,440 --> 00:19:01,280
the concatenation of the openings or all

534
00:19:01,280 --> 00:19:02,640
these

535
00:19:02,640 --> 00:19:04,640
um seahawk eyes

536
00:19:04,640 --> 00:19:06,080
which are commitments to your parts of

537
00:19:06,080 --> 00:19:08,080
the witness one way to do this is

538
00:19:08,080 --> 00:19:12,000
through sigma particles but then

539
00:19:12,000 --> 00:19:14,480
this requires naively

540
00:19:14,480 --> 00:19:16,880
all of size of the weakness

541
00:19:16,880 --> 00:19:18,320
um

542
00:19:18,320 --> 00:19:20,320
size of each of these weaknesses times

543
00:19:20,320 --> 00:19:22,320
number of commitments and then we can

544
00:19:22,320 --> 00:19:25,120
compress that through

545
00:19:25,120 --> 00:19:26,960
compressed sigma protocol techniques

546
00:19:26,960 --> 00:19:29,760
from mataman grammar 2020 to

547
00:19:29,760 --> 00:19:32,640
logarithmic side

548
00:19:34,000 --> 00:19:35,919
okay and

549
00:19:35,919 --> 00:19:36,799
the

550
00:19:36,799 --> 00:19:39,520
i want to spend a couple words on

551
00:19:39,520 --> 00:19:41,200
the uh

552
00:19:41,200 --> 00:19:43,440
the work that's very close in nature to

553
00:19:43,440 --> 00:19:45,919
eclipse which is lunar they both follow

554
00:19:45,919 --> 00:19:48,799
a similar blueprint of recipe

555
00:19:48,799 --> 00:19:51,280
but lunar is a quite different

556
00:19:51,280 --> 00:19:53,120
pairing-based protocol for linking they

557
00:19:53,120 --> 00:19:55,760
do share some intuitions at some point

558
00:19:55,760 --> 00:19:57,919
but there are some technical differences

559
00:19:57,919 --> 00:20:01,039
in lunar for example doesn't

560
00:20:01,039 --> 00:20:02,720
doesn't use any of the compressed sigma

561
00:20:02,720 --> 00:20:05,760
protocol tricks we use here

562
00:20:05,760 --> 00:20:09,280
and indeed it ends up requires to pay in

563
00:20:09,280 --> 00:20:11,039
communication complexity a communication

564
00:20:11,039 --> 00:20:12,880
complexity that's linear in the number

565
00:20:12,880 --> 00:20:15,280
of components

566
00:20:15,280 --> 00:20:17,440
and there they show different tradeoffs

567
00:20:17,440 --> 00:20:20,080
in efficiency especially verifier time

568
00:20:20,080 --> 00:20:22,480
as i said before and i'm going to

569
00:20:22,480 --> 00:20:24,960
show in the next slide

570
00:20:24,960 --> 00:20:26,960
also lunar uses a more general

571
00:20:26,960 --> 00:20:29,280
formalization this php i

572
00:20:29,280 --> 00:20:31,679
end up mentioning polynomial

573
00:20:31,679 --> 00:20:33,280
or graphic proofs

574
00:20:33,280 --> 00:20:34,559
i believe

575
00:20:34,559 --> 00:20:36,480
but our work can be easily from

576
00:20:36,480 --> 00:20:39,440
formalizing the same word

577
00:20:39,760 --> 00:20:42,000
okay that

578
00:20:42,000 --> 00:20:43,840
leads us to the last slide of this

579
00:20:43,840 --> 00:20:45,120
presentation

580
00:20:45,120 --> 00:20:48,240
with a couple open questions so

581
00:20:48,240 --> 00:20:51,280
so far you can see how

582
00:20:51,280 --> 00:20:52,720
eclipse

583
00:20:52,720 --> 00:20:55,120
and lunar have

584
00:20:55,120 --> 00:20:58,320
these trade-offs in them in efficiency

585
00:20:58,320 --> 00:21:00,320
but what's left

586
00:21:00,320 --> 00:21:01,440
is another problem entertaining

587
00:21:01,440 --> 00:21:03,760
something that's not just sub linear or

588
00:21:03,760 --> 00:21:05,840
logarithmic less actually or constant

589
00:21:05,840 --> 00:21:06,880
size

590
00:21:06,880 --> 00:21:08,320
we get it

591
00:21:08,320 --> 00:21:09,679
an intuitive

592
00:21:09,679 --> 00:21:12,159
avenue to explore there is some type of

593
00:21:12,159 --> 00:21:14,240
recursion but to do that efficiently

594
00:21:14,240 --> 00:21:17,120
maybe we need more specialized tricks of

595
00:21:17,120 --> 00:21:20,720
that it'd be nice to see a

596
00:21:20,720 --> 00:21:23,760
a cp snark with a

597
00:21:23,760 --> 00:21:26,960
general modular cp start with such

598
00:21:26,960 --> 00:21:28,480
such features

599
00:21:28,480 --> 00:21:31,120
and then it'd be interesting to explore

600
00:21:31,120 --> 00:21:32,880
different techniques for this linking

601
00:21:32,880 --> 00:21:34,400
module we have

602
00:21:34,400 --> 00:21:36,799
and or finding other applications for

603
00:21:36,799 --> 00:21:38,640
the ones we have

604
00:21:38,640 --> 00:21:40,480
thank you so much this is my

605
00:21:40,480 --> 00:21:42,000
presentation and if you have any

606
00:21:42,000 --> 00:21:43,840
questions feel free to write to me or

607
00:21:43,840 --> 00:21:48,399
any of my collaborators thanks

