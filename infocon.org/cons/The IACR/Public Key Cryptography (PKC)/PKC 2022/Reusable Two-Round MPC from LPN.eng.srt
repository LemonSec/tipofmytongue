1
00:00:01,520 --> 00:00:04,080
hey everyone i'm ino

2
00:00:04,080 --> 00:00:06,960
and um i will be presenting our work

3
00:00:06,960 --> 00:00:10,480
reusable to run the mtc from rpm

4
00:00:10,480 --> 00:00:12,559
this is a drawing to work with james

5
00:00:12,559 --> 00:00:14,799
pardesec sanjay mcgargan the action

6
00:00:14,799 --> 00:00:17,919
serving vasa

7
00:00:18,080 --> 00:00:20,320
so let's recall the setting of secure

8
00:00:20,320 --> 00:00:22,800
multiparty computation

9
00:00:22,800 --> 00:00:25,439
in this setting there are in different

10
00:00:25,439 --> 00:00:26,480
parties

11
00:00:26,480 --> 00:00:31,039
p12pn with their respective input x1 to

12
00:00:31,039 --> 00:00:34,640
xn and they want to jointly compute some

13
00:00:34,640 --> 00:00:37,280
circuit c

14
00:00:37,280 --> 00:00:40,320
we assume that every party has access to

15
00:00:40,320 --> 00:00:43,600
a broadcaster channel and adversary

16
00:00:43,600 --> 00:00:47,039
might corrupt up to n minus one parties

17
00:00:47,039 --> 00:00:49,120
it could be either semi-honest or

18
00:00:49,120 --> 00:00:51,199
malicious

19
00:00:51,199 --> 00:00:53,199
so why do we study the problem of

20
00:00:53,199 --> 00:00:56,399
tourade and dc well ideally we want to

21
00:00:56,399 --> 00:00:58,559
minimize their interaction

22
00:00:58,559 --> 00:01:01,840
so we want as less round as possible

23
00:01:01,840 --> 00:01:04,400
we also know that npc in one round is

24
00:01:04,400 --> 00:01:05,600
impossible

25
00:01:05,600 --> 00:01:08,240
so we're focusing on touran and pc in

26
00:01:08,240 --> 00:01:10,560
our work

27
00:01:10,560 --> 00:01:12,880
we are especially interested in the

28
00:01:12,880 --> 00:01:17,280
problem of reusable to run and pc

29
00:01:17,280 --> 00:01:19,920
in a reusable to run npc

30
00:01:19,920 --> 00:01:23,040
the interaction pattern is minimal

31
00:01:23,040 --> 00:01:26,080
in particular the first run of messages

32
00:01:26,080 --> 00:01:29,200
could be reused across an unbounded

33
00:01:29,200 --> 00:01:32,079
number of second round executions

34
00:01:32,079 --> 00:01:34,640
so let's look at an example

35
00:01:34,640 --> 00:01:38,400
this is an example of to run npc

36
00:01:38,400 --> 00:01:41,119
in the first round these parties release

37
00:01:41,119 --> 00:01:43,360
all the first round messages

38
00:01:43,360 --> 00:01:45,680
and after looking at all the first round

39
00:01:45,680 --> 00:01:48,079
messages they are given some circuit c

40
00:01:48,079 --> 00:01:49,520
to compute

41
00:01:49,520 --> 00:01:52,240
then each of these parties send a single

42
00:01:52,240 --> 00:01:54,960
second random message and using all the

43
00:01:54,960 --> 00:01:57,119
second random messages they can learn

44
00:01:57,119 --> 00:01:59,439
the output of the circuit

45
00:01:59,439 --> 00:02:01,439
now let's say they want to compute a

46
00:02:01,439 --> 00:02:04,399
different circuit c2

47
00:02:04,399 --> 00:02:06,799
we want them to reuse their previously

48
00:02:06,799 --> 00:02:09,520
sent first round of messages

49
00:02:09,520 --> 00:02:13,120
and each party only has to release a

50
00:02:13,120 --> 00:02:15,760
single new second round message

51
00:02:15,760 --> 00:02:18,640
and using these new secondary messages

52
00:02:18,640 --> 00:02:21,280
with the previous first run message

53
00:02:21,280 --> 00:02:23,760
they can learn the output of this new

54
00:02:23,760 --> 00:02:26,720
circuit c2

55
00:02:27,360 --> 00:02:29,440
so there are some firewall works on

56
00:02:29,440 --> 00:02:31,680
reusable to run on pc

57
00:02:31,680 --> 00:02:33,280
there are mainly two different

58
00:02:33,280 --> 00:02:35,840
frameworks

59
00:02:35,840 --> 00:02:38,160
first framework is based on multi-key

60
00:02:38,160 --> 00:02:41,360
fhe it is known either in the crs model

61
00:02:41,360 --> 00:02:43,120
or the blin model

62
00:02:43,120 --> 00:02:45,200
we are more interested in the second

63
00:02:45,200 --> 00:02:47,599
framework which is based on a run

64
00:02:47,599 --> 00:02:49,680
compressing compiler

65
00:02:49,680 --> 00:02:52,000
what that means is that we take a

66
00:02:52,000 --> 00:02:54,400
multi-round npc protocol

67
00:02:54,400 --> 00:02:56,879
and we run collab state into just two

68
00:02:56,879 --> 00:02:58,720
rounds

69
00:02:58,720 --> 00:03:01,120
the reusable to run npc in this

70
00:03:01,120 --> 00:03:03,200
framework is known under either

71
00:03:03,200 --> 00:03:05,120
obfuscation

72
00:03:05,120 --> 00:03:06,959
by linear maps

73
00:03:06,959 --> 00:03:09,200
ddh assumption

74
00:03:09,200 --> 00:03:11,519
and in this work we add our pn

75
00:03:11,519 --> 00:03:14,400
assumption into this category

76
00:03:14,400 --> 00:03:17,760
so here is our main result

77
00:03:17,760 --> 00:03:19,920
assuming learning priority with noise

78
00:03:19,920 --> 00:03:22,560
assumption with the inverse polynomial

79
00:03:22,560 --> 00:03:23,840
nitrate

80
00:03:23,840 --> 00:03:26,799
then there exists a semi-honestly usable

81
00:03:26,799 --> 00:03:29,920
to run npc protocol in the plane model

82
00:03:29,920 --> 00:03:32,879
or a maliciously securely usable to run

83
00:03:32,879 --> 00:03:36,879
npc protocol in the crs model

84
00:03:36,879 --> 00:03:39,760
here is our roadmap

85
00:03:39,760 --> 00:03:41,440
in the first step

86
00:03:41,440 --> 00:03:44,720
we built what we call it a multi-party

87
00:03:44,720 --> 00:03:47,040
silent night interactive secure

88
00:03:47,040 --> 00:03:48,799
computation protocol

89
00:03:48,799 --> 00:03:52,159
or simply multi-party silentness

90
00:03:52,159 --> 00:03:54,720
from lpn

91
00:03:54,720 --> 00:03:57,760
this vertical is essentially a two-round

92
00:03:57,760 --> 00:04:01,760
mpc in a dealer pre-processing model

93
00:04:01,760 --> 00:04:04,640
and it supports bounded polynomial size

94
00:04:04,640 --> 00:04:07,119
circuit

95
00:04:08,000 --> 00:04:10,959
it has the additional property that the

96
00:04:10,959 --> 00:04:13,519
first round message size is independent

97
00:04:13,519 --> 00:04:16,480
of the circuit size

98
00:04:16,720 --> 00:04:19,519
in the second step we show how to take a

99
00:04:19,519 --> 00:04:22,400
multi-party silent nisk protocol

100
00:04:22,400 --> 00:04:25,520
and transform it into a bounded first

101
00:04:25,520 --> 00:04:29,840
message the sync fms and pc protocol

102
00:04:29,840 --> 00:04:31,840
the difference here is that we are

103
00:04:31,840 --> 00:04:34,400
removing the trusted dealer

104
00:04:34,400 --> 00:04:37,360
in the protocol

105
00:04:37,360 --> 00:04:39,600
then we show how to go from a bounded

106
00:04:39,600 --> 00:04:42,560
first message to sync npc protocol

107
00:04:42,560 --> 00:04:45,680
to a first message to sync for fms and

108
00:04:45,680 --> 00:04:47,759
pc protocol

109
00:04:47,759 --> 00:04:50,160
and the difference here obviously is

110
00:04:50,160 --> 00:04:52,479
that we are supporting unbounded

111
00:04:52,479 --> 00:04:56,440
polynomial size circuit

112
00:04:56,880 --> 00:04:58,400
finally

113
00:04:58,400 --> 00:05:02,000
we show that we can transform any fms

114
00:05:02,000 --> 00:05:04,479
and pc protocol into reusable to run on

115
00:05:04,479 --> 00:05:05,680
pc

116
00:05:05,680 --> 00:05:08,080
this transformation is already done in

117
00:05:08,080 --> 00:05:11,719
the previous works

118
00:05:13,919 --> 00:05:16,639
so let's quickly recall the two-run npc

119
00:05:16,639 --> 00:05:20,080
warehouse collapsing approach

120
00:05:20,400 --> 00:05:24,000
ideally we want to build our multi-party

121
00:05:24,000 --> 00:05:26,320
silent music protocol based on this

122
00:05:26,320 --> 00:05:27,360
framework

123
00:05:27,360 --> 00:05:29,680
so let's look at this framework in

124
00:05:29,680 --> 00:05:31,120
details

125
00:05:31,120 --> 00:05:33,199
here is the template

126
00:05:33,199 --> 00:05:34,800
in the first round

127
00:05:34,800 --> 00:05:37,199
each pair of parties are going to

128
00:05:37,199 --> 00:05:40,960
exchange a set of ot1 messages

129
00:05:40,960 --> 00:05:43,680
and subsequently they will release a

130
00:05:43,680 --> 00:05:46,160
sequence of gable circuits in the second

131
00:05:46,160 --> 00:05:48,479
row

132
00:05:48,560 --> 00:05:51,360
recall that in our multi-party silent

133
00:05:51,360 --> 00:05:54,000
music protocol we want the first random

134
00:05:54,000 --> 00:05:56,000
messages to be sustained

135
00:05:56,000 --> 00:05:58,400
but here is a problem

136
00:05:58,400 --> 00:05:59,520
in this

137
00:05:59,520 --> 00:06:02,400
two round npc protocol approach

138
00:06:02,400 --> 00:06:04,400
the first round messages are not

139
00:06:04,400 --> 00:06:05,680
succinct

140
00:06:05,680 --> 00:06:08,560
this is because we need enough od

141
00:06:08,560 --> 00:06:10,240
correlations

142
00:06:10,240 --> 00:06:12,639
to compute the iq circuit

143
00:06:12,639 --> 00:06:15,759
therefore the number of ot-1 messages

144
00:06:15,759 --> 00:06:17,840
exchanged in the first run will actually

145
00:06:17,840 --> 00:06:20,319
grow with the size of the circuit thus

146
00:06:20,319 --> 00:06:23,120
making it not succinct

147
00:06:23,120 --> 00:06:25,199
so here is the problem

148
00:06:25,199 --> 00:06:27,199
can we get large number of od

149
00:06:27,199 --> 00:06:29,520
correlations with small first round

150
00:06:29,520 --> 00:06:32,400
communication

151
00:06:33,039 --> 00:06:35,680
before diving into this question let's

152
00:06:35,680 --> 00:06:38,880
look closely into these ot correlations

153
00:06:38,880 --> 00:06:41,680
that we want

154
00:06:41,919 --> 00:06:44,720
what is required in this two-run mpc

155
00:06:44,720 --> 00:06:45,759
protocol

156
00:06:45,759 --> 00:06:48,479
is the following ot correlations so

157
00:06:48,479 --> 00:06:51,199
between each pair of parties we want

158
00:06:51,199 --> 00:06:52,800
them to set up

159
00:06:52,800 --> 00:06:54,880
these correlations

160
00:06:54,880 --> 00:06:57,280
the receiver will have a secret random

161
00:06:57,280 --> 00:06:58,800
vector v

162
00:06:58,800 --> 00:07:01,680
and the sender will have a secret

163
00:07:01,680 --> 00:07:02,880
which

164
00:07:02,880 --> 00:07:06,800
is uh its pair of cable circuit labels

165
00:07:06,800 --> 00:07:08,800
recall that it will have many double

166
00:07:08,800 --> 00:07:10,560
circuits sent in the second round so

167
00:07:10,560 --> 00:07:14,319
these labels will be its secret

168
00:07:14,560 --> 00:07:17,680
and every ot correlation is

169
00:07:17,680 --> 00:07:22,319
specified by a set of public parameters

170
00:07:22,319 --> 00:07:24,800
the receiver's choice bit b

171
00:07:24,800 --> 00:07:27,919
is going to be determined by a

172
00:07:27,919 --> 00:07:30,400
non-function over both the public

173
00:07:30,400 --> 00:07:33,680
parameters and its secret random vector

174
00:07:33,680 --> 00:07:34,960
v

175
00:07:34,960 --> 00:07:37,039
the standard messages

176
00:07:37,039 --> 00:07:40,639
are always going to be a pair of labels

177
00:07:40,639 --> 00:07:41,759
that

178
00:07:41,759 --> 00:07:44,560
is associated with this set of public

179
00:07:44,560 --> 00:07:47,120
parameters

180
00:07:47,599 --> 00:07:51,520
so in order to generate large amount of

181
00:07:51,520 --> 00:07:54,800
ot correlations with small first round

182
00:07:54,800 --> 00:07:56,639
communication

183
00:07:56,639 --> 00:07:59,840
we rely on this tool called pseudorandom

184
00:07:59,840 --> 00:08:03,919
correlation generator or simply put pcg

185
00:08:03,919 --> 00:08:06,960
we use pct for correlated ot

186
00:08:06,960 --> 00:08:08,879
correlation

187
00:08:08,879 --> 00:08:10,240
in this setting

188
00:08:10,240 --> 00:08:12,960
there is a trusted dealer

189
00:08:12,960 --> 00:08:15,520
which distributes two seats to two

190
00:08:15,520 --> 00:08:16,960
parties

191
00:08:16,960 --> 00:08:20,240
it gives the first seed as zero to the

192
00:08:20,240 --> 00:08:23,599
first party p0 and second seed s1 to the

193
00:08:23,599 --> 00:08:25,680
second party p1

194
00:08:25,680 --> 00:08:29,120
then each party can locally expand its

195
00:08:29,120 --> 00:08:31,280
seat

196
00:08:31,280 --> 00:08:35,360
in particular the first party will get

197
00:08:35,360 --> 00:08:38,880
two vectors v and x0

198
00:08:38,880 --> 00:08:40,958
the second party will get

199
00:08:40,958 --> 00:08:42,719
a constant

200
00:08:42,719 --> 00:08:47,040
delta and a vector x1

201
00:08:47,040 --> 00:08:48,720
so

202
00:08:48,720 --> 00:08:51,760
for simplicity let's just assume that

203
00:08:51,760 --> 00:08:54,880
all the vectors have dimension one

204
00:08:54,880 --> 00:08:56,160
so

205
00:08:56,160 --> 00:08:58,240
every part you get two elements

206
00:08:58,240 --> 00:09:00,000
essentially

207
00:09:00,000 --> 00:09:02,560
now these four elements are going to

208
00:09:02,560 --> 00:09:05,360
satisfy this linear equation

209
00:09:05,360 --> 00:09:07,440
so why is this useful

210
00:09:07,440 --> 00:09:10,399
well we argue that you can build this

211
00:09:10,399 --> 00:09:11,680
linear

212
00:09:11,680 --> 00:09:15,519
relation as an ot correlation

213
00:09:15,519 --> 00:09:18,000
what we are going to do is to ask the

214
00:09:18,000 --> 00:09:19,440
second party

215
00:09:19,440 --> 00:09:22,560
p1 to define two messages

216
00:09:22,560 --> 00:09:24,800
the first message will be

217
00:09:24,800 --> 00:09:28,160
the element x1 and the second message

218
00:09:28,160 --> 00:09:31,279
will be the element x1 shifted by the

219
00:09:31,279 --> 00:09:33,920
constant delta

220
00:09:33,920 --> 00:09:35,279
notice that

221
00:09:35,279 --> 00:09:37,839
the first party can simply use its

222
00:09:37,839 --> 00:09:41,760
element we as the dry speed

223
00:09:41,760 --> 00:09:45,839
this is because when we hit 0 x0 is

224
00:09:45,839 --> 00:09:48,640
essentially x1 so he is indeed getting

225
00:09:48,640 --> 00:09:52,640
the first message when we is one

226
00:09:52,640 --> 00:09:55,279
on the otherwise

227
00:09:55,279 --> 00:09:59,920
p1 p0 will get the second message

228
00:10:01,120 --> 00:10:02,000
now

229
00:10:02,000 --> 00:10:03,600
in the work

230
00:10:03,600 --> 00:10:05,360
in the previous work they show how to

231
00:10:05,360 --> 00:10:07,360
build pseudo-random correlation

232
00:10:07,360 --> 00:10:09,920
generator using lpn assumption with the

233
00:10:09,920 --> 00:10:12,800
inverse polynomial noise rate

234
00:10:12,800 --> 00:10:16,000
under this assumption they can expand

235
00:10:16,000 --> 00:10:18,880
lambda side seeds into

236
00:10:18,880 --> 00:10:21,519
a fixed polynomial size

237
00:10:21,519 --> 00:10:25,120
number of correlations

238
00:10:26,480 --> 00:10:28,720
now we want to use

239
00:10:28,720 --> 00:10:31,680
this pseudo-random correlation generator

240
00:10:31,680 --> 00:10:34,800
to generate our desired ot correlations

241
00:10:34,800 --> 00:10:38,480
that is being used in this to run npc

242
00:10:38,480 --> 00:10:41,040
framework

243
00:10:41,279 --> 00:10:44,240
so the sender is going to send a pair of

244
00:10:44,240 --> 00:10:46,320
labels

245
00:10:46,320 --> 00:10:48,880
meanwhile this sender is going to get a

246
00:10:48,880 --> 00:10:51,519
set of correlated od strings

247
00:10:51,519 --> 00:10:54,880
after the pcg protocol

248
00:10:54,880 --> 00:10:58,240
in particular he is going to get

249
00:10:58,240 --> 00:11:00,480
a message x1 and then

250
00:11:00,480 --> 00:11:03,839
x1 plus the shift delta

251
00:11:03,839 --> 00:11:06,959
so how would the sender transmit his

252
00:11:06,959 --> 00:11:08,160
labels

253
00:11:08,160 --> 00:11:11,040
using these correlated strings

254
00:11:11,040 --> 00:11:12,800
the standard approach

255
00:11:12,800 --> 00:11:16,320
is to first apply a correlation robust

256
00:11:16,320 --> 00:11:17,760
hash function

257
00:11:17,760 --> 00:11:20,560
to break the correlations

258
00:11:20,560 --> 00:11:23,279
and then use these values to mask the

259
00:11:23,279 --> 00:11:27,880
labels and send them to the receiver

260
00:11:28,320 --> 00:11:31,279
on the other hand the receiver in the

261
00:11:31,279 --> 00:11:34,240
pct protocol will get a vector v

262
00:11:34,240 --> 00:11:37,120
corresponding to its choice split

263
00:11:37,120 --> 00:11:38,480
but

264
00:11:38,480 --> 00:11:41,600
in the actual to run npc setting the

265
00:11:41,600 --> 00:11:44,880
receiver will need a choice bit that

266
00:11:44,880 --> 00:11:47,360
is going to be a function over the

267
00:11:47,360 --> 00:11:48,399
elements

268
00:11:48,399 --> 00:11:50,240
in this vector and some public

269
00:11:50,240 --> 00:11:52,880
parameters

270
00:11:53,440 --> 00:11:57,040
so our way to tackle this problem is to

271
00:11:57,040 --> 00:11:59,440
rewrite the strike speed b

272
00:11:59,440 --> 00:12:01,600
as a degree to function

273
00:12:01,600 --> 00:12:04,560
on the vector v

274
00:12:04,560 --> 00:12:08,160
then we slightly tweak the bcg protocol

275
00:12:08,160 --> 00:12:10,399
to enable it to generate

276
00:12:10,399 --> 00:12:12,959
a degree two function

277
00:12:12,959 --> 00:12:13,760
um

278
00:12:13,760 --> 00:12:16,320
of the twice a degree two

279
00:12:16,320 --> 00:12:18,560
function over b and use them as the

280
00:12:18,560 --> 00:12:21,040
choice bits

281
00:12:21,040 --> 00:12:23,680
in particular we generate

282
00:12:23,680 --> 00:12:26,240
different parts of this degree two

283
00:12:26,240 --> 00:12:28,639
functions separately and we simply

284
00:12:28,639 --> 00:12:31,839
compose them together by adding them up

285
00:12:31,839 --> 00:12:34,160
so here is our first step

286
00:12:34,160 --> 00:12:36,560
we built a multiparty silent disk

287
00:12:36,560 --> 00:12:39,279
vertical using two ingredients

288
00:12:39,279 --> 00:12:42,320
the first is to run the npc the second

289
00:12:42,320 --> 00:12:45,440
is pseudo-random correlation generator

290
00:12:45,440 --> 00:12:48,160
in order to use pcg we add a

291
00:12:48,160 --> 00:12:50,399
pre-processing phase where a trusted

292
00:12:50,399 --> 00:12:54,720
dealer will interact with these parties

293
00:12:55,760 --> 00:12:58,800
in particular the trusted dealer is

294
00:12:58,800 --> 00:13:01,120
going to set up some ot correlations

295
00:13:01,120 --> 00:13:03,360
between every pair of parties

296
00:13:03,360 --> 00:13:06,240
this is done by distributing the pcgc's

297
00:13:06,240 --> 00:13:09,519
between every two parties

298
00:13:09,519 --> 00:13:11,760
when it comes to sending the first round

299
00:13:11,760 --> 00:13:13,040
of messages

300
00:13:13,040 --> 00:13:15,440
every party no longer needs to include

301
00:13:15,440 --> 00:13:18,839
our office od-1 messages in the first

302
00:13:18,839 --> 00:13:21,839
round instead they will get all the ot

303
00:13:21,839 --> 00:13:24,800
correlations by silently expanding its

304
00:13:24,800 --> 00:13:27,760
bcg seats

305
00:13:27,920 --> 00:13:30,079
then these parties will complete the

306
00:13:30,079 --> 00:13:32,720
protocol by sending the second runner

307
00:13:32,720 --> 00:13:36,480
message in the tour on npc

308
00:13:37,839 --> 00:13:41,360
let's now see why all the communications

309
00:13:41,360 --> 00:13:45,360
within the first round are very small

310
00:13:45,360 --> 00:13:47,600
first notice that all the seedlings

311
00:13:47,600 --> 00:13:50,880
depend only on lambda

312
00:13:52,079 --> 00:13:53,360
second

313
00:13:53,360 --> 00:13:55,279
the size of the first round messages

314
00:13:55,279 --> 00:13:57,839
depend only on the input size

315
00:13:57,839 --> 00:14:01,040
this is because we are now excluding all

316
00:14:01,040 --> 00:14:03,839
the ot1 messages

317
00:14:03,839 --> 00:14:06,480
and so far all the communications and

318
00:14:06,480 --> 00:14:10,800
the computations are indeed very small

319
00:14:11,920 --> 00:14:14,959
so using this pcg approach

320
00:14:14,959 --> 00:14:17,519
assuming l-beam with inverse polynomial

321
00:14:17,519 --> 00:14:18,880
noise rate

322
00:14:18,880 --> 00:14:20,160
we can get

323
00:14:20,160 --> 00:14:22,480
a number of correlations that will

324
00:14:22,480 --> 00:14:23,519
support

325
00:14:23,519 --> 00:14:28,199
bounded polynomial size computations

326
00:14:31,839 --> 00:14:34,000
now let's look at the security of this

327
00:14:34,000 --> 00:14:36,079
protocol

328
00:14:36,079 --> 00:14:37,600
intuitively

329
00:14:37,600 --> 00:14:39,519
the only difference

330
00:14:39,519 --> 00:14:42,000
between this vertical and a to run and

331
00:14:42,000 --> 00:14:44,800
pc is that we are using

332
00:14:44,800 --> 00:14:49,040
pcg to generate all the ot correlations

333
00:14:49,040 --> 00:14:51,279
so ideally we are preserving the

334
00:14:51,279 --> 00:14:53,600
security of the underlying to run mpc

335
00:14:53,600 --> 00:14:56,079
protocol

336
00:14:57,040 --> 00:14:59,519
and intuitively we can just replace all

337
00:14:59,519 --> 00:15:01,760
the pseudo-random of decorations with

338
00:15:01,760 --> 00:15:04,639
truly random od correlations

339
00:15:04,639 --> 00:15:07,760
but in reality we need to argue security

340
00:15:07,760 --> 00:15:12,680
via the reverse sample ability of pcg

341
00:15:13,680 --> 00:15:16,639
so here comes to our second step

342
00:15:16,639 --> 00:15:20,160
we build a bounded first message sync

343
00:15:20,160 --> 00:15:21,680
npc

344
00:15:21,680 --> 00:15:23,440
and the difference here is that we're

345
00:15:23,440 --> 00:15:25,760
removing the pre-processing phase and

346
00:15:25,760 --> 00:15:28,079
the trusted dealer

347
00:15:28,079 --> 00:15:29,680
and we do this by

348
00:15:29,680 --> 00:15:32,720
first take a multi-party silent nisk

349
00:15:32,720 --> 00:15:34,240
vertical

350
00:15:34,240 --> 00:15:37,360
and we cut it in half

351
00:15:37,440 --> 00:15:40,959
we will we will implement the first half

352
00:15:40,959 --> 00:15:43,600
using a to run mpc

353
00:15:43,600 --> 00:15:46,800
and it will implement both the dealer

354
00:15:46,800 --> 00:15:49,120
preprocessing and

355
00:15:49,120 --> 00:15:53,959
outputting all the first run messages

356
00:15:54,480 --> 00:15:57,040
now these parties will need to send the

357
00:15:57,040 --> 00:15:59,360
remaining second round messages in the

358
00:15:59,360 --> 00:16:01,839
third round

359
00:16:01,839 --> 00:16:03,040
so first

360
00:16:03,040 --> 00:16:05,440
let's see why the first round of

361
00:16:05,440 --> 00:16:09,040
messages are very small

362
00:16:09,040 --> 00:16:11,759
recall that

363
00:16:11,759 --> 00:16:14,079
we have previously argued that

364
00:16:14,079 --> 00:16:15,680
all the communications and the

365
00:16:15,680 --> 00:16:17,680
computations up to the cutting point are

366
00:16:17,680 --> 00:16:19,360
very small

367
00:16:19,360 --> 00:16:21,440
therefore intuitively

368
00:16:21,440 --> 00:16:23,199
the two-run mpc

369
00:16:23,199 --> 00:16:25,839
is implementing a very small circuit

370
00:16:25,839 --> 00:16:28,480
and therefore its first round message

371
00:16:28,480 --> 00:16:31,440
should be very small

372
00:16:33,040 --> 00:16:36,320
so this will lead to a three-run ltc

373
00:16:36,320 --> 00:16:37,920
protocol

374
00:16:37,920 --> 00:16:40,000
however we don't want a three-run

375
00:16:40,000 --> 00:16:42,079
vertical

376
00:16:42,079 --> 00:16:44,880
so what we do is that we're applying the

377
00:16:44,880 --> 00:16:47,279
wrong collapsing compiler again to this

378
00:16:47,279 --> 00:16:49,360
three one protocol

379
00:16:49,360 --> 00:16:51,759
and we squish all the three third round

380
00:16:51,759 --> 00:16:56,800
messages and make it into just two runs

381
00:16:56,800 --> 00:16:58,480
it turns out

382
00:16:58,480 --> 00:17:00,800
even if we use this run complex

383
00:17:00,800 --> 00:17:02,639
collapsing compiler

384
00:17:02,639 --> 00:17:04,880
the first round of messages will remain

385
00:17:04,880 --> 00:17:07,520
succinct

386
00:17:08,240 --> 00:17:11,039
so let's summarize what we have got so

387
00:17:11,039 --> 00:17:12,240
far

388
00:17:12,240 --> 00:17:14,400
we have abundantly the first message to

389
00:17:14,400 --> 00:17:17,760
sync mpc protocol

390
00:17:17,760 --> 00:17:18,799
for

391
00:17:18,799 --> 00:17:21,599
a bounded size polynomial

392
00:17:21,599 --> 00:17:25,599
a bounded polynomial size computation

393
00:17:25,679 --> 00:17:28,799
and the first round of messages

394
00:17:28,799 --> 00:17:30,559
are going to be independent of the

395
00:17:30,559 --> 00:17:33,280
circuit side

396
00:17:33,280 --> 00:17:36,960
so in our next step we will show how to

397
00:17:36,960 --> 00:17:39,360
enable unbounded polynomial size

398
00:17:39,360 --> 00:17:41,760
computation

399
00:17:41,760 --> 00:17:44,160
so now we are going to build a first

400
00:17:44,160 --> 00:17:46,240
message the sync and pc protocol for

401
00:17:46,240 --> 00:17:49,520
unbounded polynomial side circuit

402
00:17:49,520 --> 00:17:53,360
and here's the high level overview

403
00:17:53,360 --> 00:17:56,559
we can think of the bandwidth first

404
00:17:56,559 --> 00:18:00,000
message system can bc as an x-many

405
00:18:00,000 --> 00:18:01,440
object

406
00:18:01,440 --> 00:18:05,840
like a prg with some fixed stretch

407
00:18:06,640 --> 00:18:10,960
on the other hand fms mpc is a prg with

408
00:18:10,960 --> 00:18:14,640
arbitrary polynomial stretch

409
00:18:14,640 --> 00:18:15,600
so

410
00:18:15,600 --> 00:18:18,160
we can just use the idea of

411
00:18:18,160 --> 00:18:19,360
ggn

412
00:18:19,360 --> 00:18:23,120
which build a prf from a prg

413
00:18:23,120 --> 00:18:23,919
to

414
00:18:23,919 --> 00:18:27,360
transform a prg with fixed stretch into

415
00:18:27,360 --> 00:18:29,919
arbitrary polynomial stretch

416
00:18:29,919 --> 00:18:33,840
and here is how it looks like

417
00:18:33,840 --> 00:18:34,559
so

418
00:18:34,559 --> 00:18:35,679
let pi

419
00:18:35,679 --> 00:18:39,520
be the bounded fms and dc protocol and

420
00:18:39,520 --> 00:18:42,720
let pi of c be is vertical computing the

421
00:18:42,720 --> 00:18:45,360
second c

422
00:18:45,840 --> 00:18:46,640
now

423
00:18:46,640 --> 00:18:48,960
this protocol will first take all the

424
00:18:48,960 --> 00:18:52,480
inputs x 1 x 2 and x 3

425
00:18:52,480 --> 00:18:56,080
and it will output the first run message

426
00:18:56,080 --> 00:18:57,840
so we can

427
00:18:57,840 --> 00:18:59,440
sort of think of the first round

428
00:18:59,440 --> 00:19:00,640
messages

429
00:19:00,640 --> 00:19:03,280
as the seed of a brg

430
00:19:03,280 --> 00:19:05,760
when it comes to evaluating the circuit

431
00:19:05,760 --> 00:19:08,400
we can think of this process as

432
00:19:08,400 --> 00:19:11,200
expanding the prg so that the secondary

433
00:19:11,200 --> 00:19:15,840
message is the output of such prg

434
00:19:15,840 --> 00:19:19,120
now how do we use gtm approach

435
00:19:19,120 --> 00:19:22,000
in this framework

436
00:19:22,000 --> 00:19:25,120
well we just define an expansion circuit

437
00:19:25,120 --> 00:19:25,919
n

438
00:19:25,919 --> 00:19:26,720
which

439
00:19:26,720 --> 00:19:28,960
takes the same input

440
00:19:28,960 --> 00:19:32,000
and it outputs two copies of the first

441
00:19:32,000 --> 00:19:33,520
round messages

442
00:19:33,520 --> 00:19:36,960
with the same input

443
00:19:36,960 --> 00:19:40,640
so this is equivalent as saying i'm

444
00:19:40,640 --> 00:19:43,440
treating the second round messages as

445
00:19:43,440 --> 00:19:47,760
another two fresh seeds of the prg

446
00:19:48,080 --> 00:19:50,240
but first we need to argue that

447
00:19:50,240 --> 00:19:53,440
our bounded fmsnbc can indeed compute

448
00:19:53,440 --> 00:19:55,760
this expansion circuit n

449
00:19:55,760 --> 00:19:58,160
well this is because

450
00:19:58,160 --> 00:20:01,600
um with a closer look into the circuit

451
00:20:01,600 --> 00:20:03,679
its size is

452
00:20:03,679 --> 00:20:06,720
linear in lambda so it is indeed

453
00:20:06,720 --> 00:20:11,200
supported by our bounded fmsnbc

454
00:20:11,200 --> 00:20:13,760
so this is good news now we can

455
00:20:13,760 --> 00:20:15,760
just build

456
00:20:15,760 --> 00:20:17,360
a tree

457
00:20:17,360 --> 00:20:21,440
um that consists of polynomial actually

458
00:20:21,440 --> 00:20:25,440
arbitrary polynomial number of leaves

459
00:20:25,679 --> 00:20:28,880
and each leaf will be

460
00:20:28,880 --> 00:20:32,240
a bounded fms and pc instance

461
00:20:32,240 --> 00:20:34,880
that will support a

462
00:20:34,880 --> 00:20:39,360
bounded polynomial side circuit

463
00:20:39,520 --> 00:20:43,280
so how do we um actually evaluate some

464
00:20:43,280 --> 00:20:45,760
unbounded polynomial size circuit once

465
00:20:45,760 --> 00:20:48,159
we have this tree

466
00:20:48,159 --> 00:20:51,440
so here comes to our next idea

467
00:20:51,440 --> 00:20:54,720
we will break down this large circuit

468
00:20:54,720 --> 00:20:57,760
into smaller chunks using randomized

469
00:20:57,760 --> 00:20:59,760
encodings

470
00:20:59,760 --> 00:21:02,240
in particular we are breaking down the

471
00:21:02,240 --> 00:21:03,520
size of this

472
00:21:03,520 --> 00:21:06,480
unbounded polyside circuit and make it

473
00:21:06,480 --> 00:21:07,360
into

474
00:21:07,360 --> 00:21:10,159
some arbitrary polynomial number of

475
00:21:10,159 --> 00:21:13,679
smaller chunks each of a fixed constant

476
00:21:13,679 --> 00:21:15,760
size

477
00:21:15,760 --> 00:21:18,960
and this means we can simply use the

478
00:21:18,960 --> 00:21:20,080
instance

479
00:21:20,080 --> 00:21:23,200
at the leaf level of the screen

480
00:21:23,200 --> 00:21:24,960
to compute

481
00:21:24,960 --> 00:21:28,000
every small term

482
00:21:28,480 --> 00:21:31,679
and since every leaf supports this

483
00:21:31,679 --> 00:21:34,000
boundary polysize computation we can

484
00:21:34,000 --> 00:21:36,880
indeed evaluate every small randomized

485
00:21:36,880 --> 00:21:38,960
encoding

486
00:21:38,960 --> 00:21:39,919
so

487
00:21:39,919 --> 00:21:44,039
here is how it looks like

488
00:21:44,320 --> 00:21:47,360
this will naturally leads to a multi-run

489
00:21:47,360 --> 00:21:51,520
protocol for computing the circuit c

490
00:21:51,520 --> 00:21:52,880
notice that

491
00:21:52,880 --> 00:21:55,200
the first run will be

492
00:21:55,200 --> 00:21:58,080
outputting the first run messages at the

493
00:21:58,080 --> 00:21:59,440
root level

494
00:21:59,440 --> 00:22:01,039
this is

495
00:22:01,039 --> 00:22:03,679
followed by outputting the second round

496
00:22:03,679 --> 00:22:06,240
of messages at the second level and then

497
00:22:06,240 --> 00:22:08,400
the second round messages

498
00:22:08,400 --> 00:22:13,400
at the third level and so on so forth

499
00:22:15,120 --> 00:22:16,240
okay so

500
00:22:16,240 --> 00:22:19,120
now we have a multi-run mpc vertical but

501
00:22:19,120 --> 00:22:19,919
uh

502
00:22:19,919 --> 00:22:23,120
recall that we only want two runs

503
00:22:23,120 --> 00:22:26,159
so we will again apply this from

504
00:22:26,159 --> 00:22:28,159
collapsing compiler

505
00:22:28,159 --> 00:22:30,080
and squish

506
00:22:30,080 --> 00:22:33,440
all the third runner messages

507
00:22:33,440 --> 00:22:35,039
and it turns out

508
00:22:35,039 --> 00:22:37,200
after applying this run collapsing

509
00:22:37,200 --> 00:22:40,240
compiler our first of messages will

510
00:22:40,240 --> 00:22:43,520
still remain succinct

511
00:22:44,080 --> 00:22:46,640
so now we have already

512
00:22:46,640 --> 00:22:49,760
achieved a first message to synthetic pc

513
00:22:49,760 --> 00:22:50,720
for

514
00:22:50,720 --> 00:22:54,320
unbounded polynomial size circuit

515
00:22:54,320 --> 00:22:56,159
our final step

516
00:22:56,159 --> 00:22:58,960
is to show that we can indeed go from

517
00:22:58,960 --> 00:23:02,159
fms and pc to reusable to run on pc

518
00:23:02,159 --> 00:23:04,880
but such transformation is already

519
00:23:04,880 --> 00:23:09,120
suggested in the previous works

520
00:23:09,120 --> 00:23:12,640
and somehow somewhat interestingly this

521
00:23:12,640 --> 00:23:15,760
transformation also involves building

522
00:23:15,760 --> 00:23:18,720
a tree

523
00:23:18,720 --> 00:23:22,320
but the difference is that the tree that

524
00:23:22,320 --> 00:23:24,640
this transformation is building is going

525
00:23:24,640 --> 00:23:28,159
to be of exponential size

526
00:23:28,159 --> 00:23:30,400
and another difference is that

527
00:23:30,400 --> 00:23:32,080
they're going to

528
00:23:32,080 --> 00:23:33,760
go

529
00:23:33,760 --> 00:23:36,320
down only one root to live past in this

530
00:23:36,320 --> 00:23:37,120
tree

531
00:23:37,120 --> 00:23:37,919
and

532
00:23:37,919 --> 00:23:41,120
that one rootly fast will lead to a

533
00:23:41,120 --> 00:23:45,200
particular circuit being evaluated

534
00:23:45,200 --> 00:23:47,840
so they are essentially evaluating just

535
00:23:47,840 --> 00:23:51,120
the one leaf industry whereas in our

536
00:23:51,120 --> 00:23:53,039
previous transformation we are

537
00:23:53,039 --> 00:23:56,240
evaluating all the leaves in some

538
00:23:56,240 --> 00:23:59,440
polynomial size tree

539
00:24:00,240 --> 00:24:01,679
okay so

540
00:24:01,679 --> 00:24:03,279
to conclude

541
00:24:03,279 --> 00:24:06,320
our mean takeaway that uh we can get

542
00:24:06,320 --> 00:24:08,559
reusable to run mbc

543
00:24:08,559 --> 00:24:10,400
from lbn assumption with inverse

544
00:24:10,400 --> 00:24:13,039
polynomialized rate

545
00:24:13,039 --> 00:24:14,000
and

546
00:24:14,000 --> 00:24:16,960
to achieve this goal we use

547
00:24:16,960 --> 00:24:19,679
pseudorandom creation generators and i

548
00:24:19,679 --> 00:24:21,279
need to run mpc

549
00:24:21,279 --> 00:24:25,200
both of which are already known from lpn

550
00:24:25,200 --> 00:24:27,360
and other techniques include government

551
00:24:27,360 --> 00:24:30,480
vertical randomizing coding doubletree

552
00:24:30,480 --> 00:24:35,000
okay that's it thanks everyone

