1
00:00:00,799 --> 00:00:03,360
hi i'm lisa and i will be introducing

2
00:00:03,360 --> 00:00:05,920
our work storing and retrieving secrets

3
00:00:05,920 --> 00:00:07,680
on a blockchain

4
00:00:07,680 --> 00:00:10,080
this is a joint work with people goyal

5
00:00:10,080 --> 00:00:13,280
abhiram katapali brian panno and evan

6
00:00:13,280 --> 00:00:15,280
song

7
00:00:15,280 --> 00:00:17,279
one of the main contributions in our

8
00:00:17,279 --> 00:00:20,000
work is a new secret sharing scheme

9
00:00:20,000 --> 00:00:22,080
such schemes enable one party to

10
00:00:22,080 --> 00:00:24,320
distribute shares of a secret to end

11
00:00:24,320 --> 00:00:25,519
parties

12
00:00:25,519 --> 00:00:27,680
if the secret chain scheme has threshold

13
00:00:27,680 --> 00:00:30,160
t it must be possible to reconstruct the

14
00:00:30,160 --> 00:00:34,320
secret using t plus one shares

15
00:00:34,960 --> 00:00:37,120
at the same time a secret chain scheme

16
00:00:37,120 --> 00:00:38,719
with threshold t

17
00:00:38,719 --> 00:00:41,200
ensures that an adversary in control of

18
00:00:41,200 --> 00:00:44,239
t out of n parties learns no information

19
00:00:44,239 --> 00:00:47,279
about the secret

20
00:00:47,440 --> 00:00:49,840
while single chain is great it seems

21
00:00:49,840 --> 00:00:52,239
insufficient when secrets must be stored

22
00:00:52,239 --> 00:00:54,079
for a long time

23
00:00:54,079 --> 00:00:56,000
this is where proactive secret sharing

24
00:00:56,000 --> 00:00:59,359
schemes pss comes in

25
00:00:59,359 --> 00:01:01,760
similar to traditional secret sharing

26
00:01:01,760 --> 00:01:04,319
pieces schemes enable one party to

27
00:01:04,319 --> 00:01:06,479
distribute shares of a secret to end

28
00:01:06,479 --> 00:01:09,360
parties such that any t-plus one shares

29
00:01:09,360 --> 00:01:11,680
are enough to reconstruct the secret

30
00:01:11,680 --> 00:01:13,760
and at the same time an adversary in

31
00:01:13,760 --> 00:01:16,400
possession of tea out of n shares learns

32
00:01:16,400 --> 00:01:19,360
no information about the secret

33
00:01:19,360 --> 00:01:21,759
however proactive secret sharing schemes

34
00:01:21,759 --> 00:01:23,920
additionally consider the setting where

35
00:01:23,920 --> 00:01:26,080
the adversary may eventually corrupt all

36
00:01:26,080 --> 00:01:27,920
participants over time

37
00:01:27,920 --> 00:01:29,840
while corrupting no more than a certain

38
00:01:29,840 --> 00:01:33,520
threshold at any given time

39
00:01:33,680 --> 00:01:36,000
unfortunately even pss is often

40
00:01:36,000 --> 00:01:38,640
insufficient especially for applications

41
00:01:38,640 --> 00:01:40,479
in which the set of parties who hold the

42
00:01:40,479 --> 00:01:43,840
secret shares might change over time

43
00:01:43,840 --> 00:01:46,159
to achieve security in this setting

44
00:01:46,159 --> 00:01:48,399
dynamic proactive secret sharing schemes

45
00:01:48,399 --> 00:01:49,680
are used

46
00:01:49,680 --> 00:01:51,920
dpss schemes proactively update the

47
00:01:51,920 --> 00:01:54,479
secret shares held by the parties and

48
00:01:54,479 --> 00:01:56,320
allow changes to the set of parties

49
00:01:56,320 --> 00:01:59,360
holding the secrets

50
00:02:00,320 --> 00:02:03,200
in this work we introduced fab dpss

51
00:02:03,200 --> 00:02:06,320
which stands for fast batch dpss

52
00:02:06,320 --> 00:02:08,720
it is a highly optimized batch dpss

53
00:02:08,720 --> 00:02:10,160
scheme

54
00:02:10,160 --> 00:02:12,000
as you can see among the schemes which

55
00:02:12,000 --> 00:02:14,160
allow the highest possible adversarial

56
00:02:14,160 --> 00:02:16,959
threshold of one half our protocol has

57
00:02:16,959 --> 00:02:19,440
the best communication complexity

58
00:02:19,440 --> 00:02:21,599
it is also the most concretely efficient

59
00:02:21,599 --> 00:02:24,480
scheme so far

60
00:02:24,959 --> 00:02:27,440
in addition to the fab dbss construction

61
00:02:27,440 --> 00:02:30,000
we propose either a blockchain based

62
00:02:30,000 --> 00:02:32,879
dpss application which can be seen as an

63
00:02:32,879 --> 00:02:34,959
alternative to extractable witness

64
00:02:34,959 --> 00:02:36,800
encryption

65
00:02:36,800 --> 00:02:38,720
witness encryption has been introduced

66
00:02:38,720 --> 00:02:41,760
by gargaral and it allows one to encrypt

67
00:02:41,760 --> 00:02:44,080
a message with respect to a particular

68
00:02:44,080 --> 00:02:45,840
problem instance

69
00:02:45,840 --> 00:02:48,080
such problem instance could be a sudoku

70
00:02:48,080 --> 00:02:50,720
puzzle in the newspaper or an allegedly

71
00:02:50,720 --> 00:02:53,519
bug-free program or more generally any

72
00:02:53,519 --> 00:02:55,599
np search problem

73
00:02:55,599 --> 00:02:57,680
if the decrypter knows a valid witness

74
00:02:57,680 --> 00:02:59,840
for the corresponding problem instance

75
00:02:59,840 --> 00:03:02,000
such as sudoku solution or a back in the

76
00:03:02,000 --> 00:03:05,519
program she can decrypt the ciphertext

77
00:03:05,519 --> 00:03:08,000
witness encryption is called extractable

78
00:03:08,000 --> 00:03:10,319
if it additionally provides

79
00:03:10,319 --> 00:03:12,400
extractability a strong security

80
00:03:12,400 --> 00:03:15,040
property which we'll define later

81
00:03:15,040 --> 00:03:16,319
note that there are numerous

82
00:03:16,319 --> 00:03:18,560
applications which need this property

83
00:03:18,560 --> 00:03:20,560
but unfortunately there are no known

84
00:03:20,560 --> 00:03:22,560
practical extractable witness encryption

85
00:03:22,560 --> 00:03:25,120
schemes and no constructions based on

86
00:03:25,120 --> 00:03:28,000
standard assumptions

87
00:03:28,000 --> 00:03:30,080
eweb can be seen as something similar to

88
00:03:30,080 --> 00:03:32,159
extractable witness encryption though

89
00:03:32,159 --> 00:03:35,200
based on blockchains

90
00:03:40,239 --> 00:03:42,319
in this talk we will first look into the

91
00:03:42,319 --> 00:03:44,480
main ideas behind our fab dpss

92
00:03:44,480 --> 00:03:46,000
construction

93
00:03:46,000 --> 00:03:48,480
i will then introduce the evap primitive

94
00:03:48,480 --> 00:03:50,319
and provide an overview of our

95
00:03:50,319 --> 00:03:52,319
construction which satisfies the e-verb

96
00:03:52,319 --> 00:03:53,920
definition

97
00:03:53,920 --> 00:03:55,360
we will finish by discussing

98
00:03:55,360 --> 00:03:58,840
applications of evap and fab

99
00:03:58,840 --> 00:04:01,360
dpss we will first briefly recall the

100
00:04:01,360 --> 00:04:03,519
definition of dpss

101
00:04:03,519 --> 00:04:05,680
as i mentioned before such schemes allow

102
00:04:05,680 --> 00:04:07,840
clients to distribute shares of a secret

103
00:04:07,840 --> 00:04:10,080
to end parties

104
00:04:10,080 --> 00:04:12,239
so that an adversary in control of some

105
00:04:12,239 --> 00:04:14,799
threshold number of parties learns no

106
00:04:14,799 --> 00:04:17,120
information about the secret

107
00:04:17,120 --> 00:04:19,839
the set of parties holding the secrets

108
00:04:19,839 --> 00:04:22,320
is constantly changing the adversary can

109
00:04:22,320 --> 00:04:23,919
release some parties

110
00:04:23,919 --> 00:04:26,320
users regain control of their systems

111
00:04:26,320 --> 00:04:29,040
and corrupt new ones

112
00:04:29,040 --> 00:04:31,520
a dpss scheme consists of the phases

113
00:04:31,520 --> 00:04:34,560
setup handoff and reconstruction

114
00:04:34,560 --> 00:04:36,880
during each setup phase clients share

115
00:04:36,880 --> 00:04:38,880
secrets the part is currently holding

116
00:04:38,880 --> 00:04:41,759
the secrets known as a committee

117
00:04:41,759 --> 00:04:43,840
during each end of phase committee

118
00:04:43,840 --> 00:04:45,759
members change and the old committee

119
00:04:45,759 --> 00:04:48,560
passes secrets to the new committee

120
00:04:48,560 --> 00:04:50,880
during each reconstruction phase the

121
00:04:50,880 --> 00:04:53,360
current committee engages in interaction

122
00:04:53,360 --> 00:04:55,120
with the client who ask for the

123
00:04:55,120 --> 00:04:58,080
reconstruction of a secret to allow the

124
00:04:58,080 --> 00:05:01,359
client to learn the secret

125
00:05:02,080 --> 00:05:04,080
at a higher level the security of the

126
00:05:04,080 --> 00:05:06,639
dpss scheme requires that it should

127
00:05:06,639 --> 00:05:09,280
always be possible to recover the secret

128
00:05:09,280 --> 00:05:11,440
and an adversary should not learn any

129
00:05:11,440 --> 00:05:13,520
further information about the secret

130
00:05:13,520 --> 00:05:15,120
beyond what has been learned before

131
00:05:15,120 --> 00:05:18,160
running the protocol

132
00:05:19,600 --> 00:05:21,199
in our work we consider a

133
00:05:21,199 --> 00:05:23,360
computationally bounded fully malicious

134
00:05:23,360 --> 00:05:26,080
adversary a with the power to adaptively

135
00:05:26,080 --> 00:05:29,199
choose parties to corrupt at any time

136
00:05:29,199 --> 00:05:30,960
a can corrupt any number of clients

137
00:05:30,960 --> 00:05:32,800
distributing secrets and learn the

138
00:05:32,800 --> 00:05:35,600
secrets held by the corrupted clients

139
00:05:35,600 --> 00:05:38,000
the adversary is allowed to corrupt less

140
00:05:38,000 --> 00:05:40,160
than half of each committee

141
00:05:40,160 --> 00:05:41,680
note that the handoff phase is

142
00:05:41,680 --> 00:05:44,320
particularly challenging as during this

143
00:05:44,320 --> 00:05:46,800
phase not only tea but two tea parties

144
00:05:46,800 --> 00:05:48,320
can be corrupted

145
00:05:48,320 --> 00:05:50,080
tea party is in the old committee and

146
00:05:50,080 --> 00:05:53,840
tea parties in the new committee

147
00:05:55,360 --> 00:05:57,600
we start with the semi-honest case where

148
00:05:57,600 --> 00:05:59,919
parties follow the protocol but try to

149
00:05:59,919 --> 00:06:02,000
learn some extra information about the

150
00:06:02,000 --> 00:06:03,759
secret

151
00:06:03,759 --> 00:06:06,880
public pss is based on a xiaomi sql

152
00:06:06,880 --> 00:06:07,759
chain

153
00:06:07,759 --> 00:06:10,960
recall that in essence a degree d

154
00:06:10,960 --> 00:06:14,560
secret chain is a degree d polynomial

155
00:06:14,560 --> 00:06:17,440
the secret is encoded at point zero and

156
00:06:17,440 --> 00:06:21,840
i share is encoded at point i

157
00:06:24,319 --> 00:06:26,960
the foundational idea in

158
00:06:26,960 --> 00:06:29,120
fab dpss are what we call coupled

159
00:06:29,120 --> 00:06:30,479
sharings

160
00:06:30,479 --> 00:06:32,479
by this we mean two sharings which have

161
00:06:32,479 --> 00:06:34,960
the same value even though the

162
00:06:34,960 --> 00:06:36,960
particular shares which lead to this

163
00:06:36,960 --> 00:06:41,440
value are different for the two sharings

164
00:06:41,440 --> 00:06:43,680
now to refresh a secret sharing of a

165
00:06:43,680 --> 00:06:46,080
secret s the new committee can prepare

166
00:06:46,080 --> 00:06:48,880
couple sharing of a random

167
00:06:48,880 --> 00:06:51,360
of a uniform random value r

168
00:06:51,360 --> 00:06:53,360
the old committee will receive shares of

169
00:06:53,360 --> 00:06:55,680
one part of the couple sharing and then

170
00:06:55,680 --> 00:06:57,120
you committed the shares of the other

171
00:06:57,120 --> 00:06:58,319
part

172
00:06:58,319 --> 00:07:00,400
the old committee can now reconstruct

173
00:07:00,400 --> 00:07:02,639
and publish s plus r

174
00:07:02,639 --> 00:07:04,319
and the new committee can send the new

175
00:07:04,319 --> 00:07:06,479
sharing to be s plus r

176
00:07:06,479 --> 00:07:08,800
minus the the sharing of the other part

177
00:07:08,800 --> 00:07:10,960
of the couple sharing

178
00:07:10,960 --> 00:07:13,280
since both parts of the couple sharing

179
00:07:13,280 --> 00:07:15,759
lead to the same value are the resulting

180
00:07:15,759 --> 00:07:17,280
sharing is still the sharing of the

181
00:07:17,280 --> 00:07:19,919
secret s

182
00:07:21,199 --> 00:07:23,520
now the question is how do we prepare

183
00:07:23,520 --> 00:07:25,199
the couple sharing

184
00:07:25,199 --> 00:07:27,599
a stroman approach is the following

185
00:07:27,599 --> 00:07:29,680
each party of the new committee prepares

186
00:07:29,680 --> 00:07:32,560
a couple chain of a uniform random value

187
00:07:32,560 --> 00:07:35,120
and distributes the shares of one party

188
00:07:35,120 --> 00:07:36,639
of this couple chain to the old

189
00:07:36,639 --> 00:07:38,720
committee and the shares of the other

190
00:07:38,720 --> 00:07:40,880
part to the new committee

191
00:07:40,880 --> 00:07:43,120
each party in the old committee can now

192
00:07:43,120 --> 00:07:45,199
compute the sum of the shares it

193
00:07:45,199 --> 00:07:47,360
received same for each party in the new

194
00:07:47,360 --> 00:07:48,800
committee

195
00:07:48,800 --> 00:07:51,120
since we are in the semi-honest case

196
00:07:51,120 --> 00:07:53,520
these sums give us a couple change of a

197
00:07:53,520 --> 00:07:57,479
uniform random value

198
00:07:58,639 --> 00:08:00,479
however note that this approach is

199
00:08:00,479 --> 00:08:01,680
wasteful

200
00:08:01,680 --> 00:08:03,759
for a total n number of parties in each

201
00:08:03,759 --> 00:08:05,599
committee and for an adversarial

202
00:08:05,599 --> 00:08:08,720
threshold t at least n minus t

203
00:08:08,720 --> 00:08:11,840
parties in the new committee are honest

204
00:08:11,840 --> 00:08:14,080
thus it would be nice to obtain n minus

205
00:08:14,080 --> 00:08:17,599
t couple sharings instead of only one

206
00:08:17,599 --> 00:08:19,840
to achieve this we build up on an idea

207
00:08:19,840 --> 00:08:22,400
from the work of the amgard and nielsen

208
00:08:22,400 --> 00:08:24,479
in their work parties need to prepare

209
00:08:24,479 --> 00:08:26,319
batch of random sharings which will be

210
00:08:26,319 --> 00:08:29,280
used in an mpc protocol

211
00:08:29,280 --> 00:08:31,840
all parties first agree on a fixed and

212
00:08:31,840 --> 00:08:34,799
public fundamental matrix of size n

213
00:08:34,799 --> 00:08:37,039
times n minus t

214
00:08:37,039 --> 00:08:39,120
an important property of abandonment

215
00:08:39,120 --> 00:08:41,440
matrix is that

216
00:08:41,440 --> 00:08:44,399
any sub matrix of size n minus t times n

217
00:08:44,399 --> 00:08:47,120
minus t is invertible

218
00:08:47,120 --> 00:08:48,800
then to prepare a bunch of random

219
00:08:48,800 --> 00:08:50,720
sharings each party generates and

220
00:08:50,720 --> 00:08:53,600
distributes a random sharing u

221
00:08:53,600 --> 00:08:55,519
all parties multiply the vector of the

222
00:08:55,519 --> 00:08:57,920
shares they receive by m and take the

223
00:08:57,920 --> 00:09:02,000
values of the resulting vector as output

224
00:09:02,000 --> 00:09:04,959
since any n minus t times n minus t sub

225
00:09:04,959 --> 00:09:07,600
matrix of m is invertible given the

226
00:09:07,600 --> 00:09:09,519
sharings provided by the

227
00:09:09,519 --> 00:09:11,680
corrupted parties there is a one-to-one

228
00:09:11,680 --> 00:09:13,839
map from the output chains to the

229
00:09:13,839 --> 00:09:15,760
sharing distributed by the honest

230
00:09:15,760 --> 00:09:17,519
parties

231
00:09:17,519 --> 00:09:19,839
since the input sharings of the honest

232
00:09:19,839 --> 00:09:22,399
parties are uniformly random the

233
00:09:22,399 --> 00:09:24,480
one-to-one map ensures the output

234
00:09:24,480 --> 00:09:28,640
sharings are uniformly random as well

235
00:09:30,560 --> 00:09:32,560
in the full malicious case multiple

236
00:09:32,560 --> 00:09:34,240
challenges arise

237
00:09:34,240 --> 00:09:36,000
for example we need to deal with the

238
00:09:36,000 --> 00:09:38,240
case when a malicious committee member

239
00:09:38,240 --> 00:09:40,160
distributes shares that do not

240
00:09:40,160 --> 00:09:43,440
correspond to a degree t polynomial

241
00:09:43,440 --> 00:09:45,519
we also need to deal with the case when

242
00:09:45,519 --> 00:09:47,600
a malicious party distribute shares of

243
00:09:47,600 --> 00:09:49,600
some value to the old committee and

244
00:09:49,600 --> 00:09:51,360
shares of some other value to the new

245
00:09:51,360 --> 00:09:53,680
committee so that the two sharings are

246
00:09:53,680 --> 00:09:56,880
not a valid couple sharing

247
00:09:56,880 --> 00:09:59,440
at a high level we solve these issues by

248
00:09:59,440 --> 00:10:01,920
efficiently checking whether a number of

249
00:10:01,920 --> 00:10:04,240
couple sharings are correct by checking

250
00:10:04,240 --> 00:10:06,480
whether their random linear combination

251
00:10:06,480 --> 00:10:08,880
is also a couple sharing

252
00:10:08,880 --> 00:10:11,120
additionally we rely on polynomial

253
00:10:11,120 --> 00:10:12,959
commitments which can be used to

254
00:10:12,959 --> 00:10:15,839
transform a plain secret chemist secret

255
00:10:15,839 --> 00:10:19,040
chain into a verifiable one so that an

256
00:10:19,040 --> 00:10:21,200
incorrect chair can be identified and

257
00:10:21,200 --> 00:10:24,640
rejected by all parties

258
00:10:25,200 --> 00:10:27,680
we present and formally prove fab dps as

259
00:10:27,680 --> 00:10:28,720
secure

260
00:10:28,720 --> 00:10:30,800
we note that among the robust dpsl

261
00:10:30,800 --> 00:10:32,240
schemes which provide the highest

262
00:10:32,240 --> 00:10:34,399
possible adversarial threshold of one

263
00:10:34,399 --> 00:10:36,800
half our batch construction achieves the

264
00:10:36,800 --> 00:10:38,880
best amortized complexity

265
00:10:38,880 --> 00:10:41,680
of n while the state of the art achieves

266
00:10:41,680 --> 00:10:43,600
of n squared

267
00:10:43,600 --> 00:10:45,760
simultaneously we achieved the same

268
00:10:45,760 --> 00:10:48,240
non-amortized complexity both works

269
00:10:48,240 --> 00:10:51,200
achieve often squared

270
00:10:51,200 --> 00:10:54,320
in addition our evaluation shows that

271
00:10:54,320 --> 00:10:57,680
fab dpss is also concretely efficient

272
00:10:57,680 --> 00:11:00,640
all operations complete in seconds and

273
00:11:00,640 --> 00:11:02,800
we outperformed the state of the art by

274
00:11:02,800 --> 00:11:05,760
over six times

275
00:11:07,600 --> 00:11:09,760
as i mentioned before in addition to fab

276
00:11:09,760 --> 00:11:13,120
dpss we propose evap an alternative to

277
00:11:13,120 --> 00:11:15,519
extractable witness encryption

278
00:11:15,519 --> 00:11:17,440
specifically we ask the following

279
00:11:17,440 --> 00:11:18,720
question

280
00:11:18,720 --> 00:11:21,200
can users store secrets and specify

281
00:11:21,200 --> 00:11:23,600
release conditions for them such that

282
00:11:23,600 --> 00:11:25,839
possibly other users can retrieve these

283
00:11:25,839 --> 00:11:29,040
secrets if and only if they are able to

284
00:11:29,040 --> 00:11:32,560
satisfy the release condition

285
00:11:32,880 --> 00:11:35,120
and obviously our goal is to achieve

286
00:11:35,120 --> 00:11:37,519
this without relying on trusted third

287
00:11:37,519 --> 00:11:39,920
parties

288
00:11:40,800 --> 00:11:43,040
in e-web extractable business encryption

289
00:11:43,040 --> 00:11:45,680
on a blockchain we distinguish between

290
00:11:45,680 --> 00:11:48,160
users who deposit secrets we call them

291
00:11:48,160 --> 00:11:49,760
depositors

292
00:11:49,760 --> 00:11:53,040
and users who request that a secret um

293
00:11:53,040 --> 00:11:56,079
be released these are the requesters and

294
00:11:56,079 --> 00:11:58,480
the changing set of blockchain nodes

295
00:11:58,480 --> 00:12:03,120
miners who are executing these requests

296
00:12:03,440 --> 00:12:05,600
an evap system consists of three

297
00:12:05,600 --> 00:12:07,440
possibly randomized and interactive

298
00:12:07,440 --> 00:12:10,399
subroutines secret store secret handoff

299
00:12:10,399 --> 00:12:12,480
and secret release

300
00:12:12,480 --> 00:12:14,399
these are similar to the algorithms used

301
00:12:14,399 --> 00:12:17,600
by dpss with the difference that now a

302
00:12:17,600 --> 00:12:19,680
release condition is specified by the

303
00:12:19,680 --> 00:12:21,279
depositor

304
00:12:21,279 --> 00:12:23,440
specifically secret store allows the

305
00:12:23,440 --> 00:12:25,920
depositor to specify a release condition

306
00:12:25,920 --> 00:12:28,079
and distribute a secret among a set of

307
00:12:28,079 --> 00:12:29,040
miners

308
00:12:29,040 --> 00:12:30,240
which we call

309
00:12:30,240 --> 00:12:32,560
the committee in the following

310
00:12:32,560 --> 00:12:34,880
secret sendoff is periodically executed

311
00:12:34,880 --> 00:12:37,040
by the miners to hand over all stored

312
00:12:37,040 --> 00:12:39,040
secrets from the old committee to the

313
00:12:39,040 --> 00:12:40,560
new committee

314
00:12:40,560 --> 00:12:42,880
finally secret release is used by the

315
00:12:42,880 --> 00:12:45,360
requester to ask for the release of some

316
00:12:45,360 --> 00:12:46,720
secret

317
00:12:46,720 --> 00:12:49,040
miners check whether the requester holds

318
00:12:49,040 --> 00:12:51,600
a valid witness and if so as a result of

319
00:12:51,600 --> 00:12:53,519
the interaction with the miners the

320
00:12:53,519 --> 00:12:57,920
requester privately obtains the secret m

321
00:12:58,079 --> 00:13:00,880
in our paper we provide a game-based

322
00:13:00,880 --> 00:13:03,519
security definition for evap

323
00:13:03,519 --> 00:13:06,079
intuitively this definition states that

324
00:13:06,079 --> 00:13:08,160
if an adversary is able to distinguish

325
00:13:08,160 --> 00:13:09,920
between the protocol executed with

326
00:13:09,920 --> 00:13:12,079
secret from zero and the protocol

327
00:13:12,079 --> 00:13:15,519
executed with secret m1 then we can also

328
00:13:15,519 --> 00:13:18,079
use this adversary to extract a valid

329
00:13:18,079 --> 00:13:19,839
witness for the release condition of the

330
00:13:19,839 --> 00:13:21,600
secret

331
00:13:21,600 --> 00:13:23,680
intuitively this notion is quite similar

332
00:13:23,680 --> 00:13:25,920
to the extractable security of fitness

333
00:13:25,920 --> 00:13:28,160
encryption which states that if an

334
00:13:28,160 --> 00:13:29,920
adversary can distinguish between two

335
00:13:29,920 --> 00:13:32,399
ciphertexts then he can also extract the

336
00:13:32,399 --> 00:13:34,160
witness from the corresponding problem

337
00:13:34,160 --> 00:13:36,639
instance

338
00:13:36,959 --> 00:13:38,880
we designed a protocol which satisfies

339
00:13:38,880 --> 00:13:41,199
the evap security definition

340
00:13:41,199 --> 00:13:44,480
it uses blockchains and dpss

341
00:13:44,480 --> 00:13:46,320
the initial committee are miners who

342
00:13:46,320 --> 00:13:48,320
mined the most recent end blocks in the

343
00:13:48,320 --> 00:13:50,880
underlying blockchain

344
00:13:50,880 --> 00:13:52,720
given the secret message m and their

345
00:13:52,720 --> 00:13:55,360
release condition f the depositor stores

346
00:13:55,360 --> 00:13:58,000
the um

347
00:13:58,079 --> 00:14:00,160
release condition f on the blockchain

348
00:14:00,160 --> 00:14:02,800
and secret shares m among the miners

349
00:14:02,800 --> 00:14:05,920
using the secret storage setup algorithm

350
00:14:05,920 --> 00:14:08,160
of the dpss scheme

351
00:14:08,160 --> 00:14:10,880
50 pss in our case

352
00:14:10,880 --> 00:14:12,880
during the protocols periodically

353
00:14:12,880 --> 00:14:15,360
executed hand off phase the secrets are

354
00:14:15,360 --> 00:14:17,120
passed from the miners of the old

355
00:14:17,120 --> 00:14:18,959
committee to the miners of the new

356
00:14:18,959 --> 00:14:21,360
committee using the dpss handoff

357
00:14:21,360 --> 00:14:23,120
algorithm

358
00:14:23,120 --> 00:14:25,120
the new committee consists of the miners

359
00:14:25,120 --> 00:14:27,920
who mine the most recent end blocks

360
00:14:27,920 --> 00:14:29,680
this keeps the size of the committee

361
00:14:29,680 --> 00:14:31,680
constant and allows all parties to

362
00:14:31,680 --> 00:14:33,680
determine the current committee by

363
00:14:33,680 --> 00:14:36,560
simply looking at the blockchain state

364
00:14:36,560 --> 00:14:38,800
finally to retrieve a stored secret a

365
00:14:38,800 --> 00:14:41,120
requester needs to prove that they are

366
00:14:41,120 --> 00:14:44,160
eligible to do so

367
00:14:44,160 --> 00:14:45,680
note that this indeed poses the

368
00:14:45,680 --> 00:14:46,959
challenge

369
00:14:46,959 --> 00:14:49,440
an insecure solution is to just send a

370
00:14:49,440 --> 00:14:52,480
valid witness w to the minors

371
00:14:52,480 --> 00:14:54,959
however a malicious minor could then use

372
00:14:54,959 --> 00:14:56,800
to provide the fitness to retrieve the

373
00:14:56,800 --> 00:14:58,959
secret himself

374
00:14:58,959 --> 00:15:02,000
to solve this problem instead of sending

375
00:15:02,000 --> 00:15:04,399
the witness in clear the user proves

376
00:15:04,399 --> 00:15:06,480
that they know a valid witness

377
00:15:06,480 --> 00:15:08,160
this while the committee members are

378
00:15:08,160 --> 00:15:09,680
able to check the validity of the

379
00:15:09,680 --> 00:15:11,680
requests and privately released the

380
00:15:11,680 --> 00:15:14,240
secret to the requester

381
00:15:14,240 --> 00:15:16,959
the witness remains hidden

382
00:15:16,959 --> 00:15:19,279
note that this can be done using nizik's

383
00:15:19,279 --> 00:15:22,000
non-attractive zero knowledge proofs

384
00:15:22,000 --> 00:15:24,399
such proofs allow one party the approver

385
00:15:24,399 --> 00:15:26,399
to prove the validity of some statement

386
00:15:26,399 --> 00:15:29,519
to another party the verifier such that

387
00:15:29,519 --> 00:15:31,360
nothing except for the validity of the

388
00:15:31,360 --> 00:15:34,160
statement is revealed

389
00:15:34,160 --> 00:15:36,399
however simply using the six is still

390
00:15:36,399 --> 00:15:38,959
not enough as a malicious minor could

391
00:15:38,959 --> 00:15:41,360
now use the obtained music

392
00:15:41,360 --> 00:15:43,839
to simply submit the same music and

393
00:15:43,839 --> 00:15:45,759
retrieve the secret

394
00:15:45,759 --> 00:15:48,639
to solve this issue we incorporate the

395
00:15:48,639 --> 00:15:51,519
public key of the requester in the music

396
00:15:51,519 --> 00:15:53,920
and utilize online decks which prove

397
00:15:53,920 --> 00:15:55,519
non-reliability

398
00:15:55,519 --> 00:15:57,040
so that

399
00:15:57,040 --> 00:15:59,040
only the user with the specified public

400
00:15:59,040 --> 00:16:03,279
key is able to obtain the secret

401
00:16:03,279 --> 00:16:06,160
last but not least we use evap to

402
00:16:06,160 --> 00:16:08,240
enable a bunch of exciting applications

403
00:16:08,240 --> 00:16:10,160
which rely on extractable witness

404
00:16:10,160 --> 00:16:11,759
encryption

405
00:16:11,759 --> 00:16:14,639
in our paper we explain how evap can be

406
00:16:14,639 --> 00:16:17,120
used to achieve timelock encryption

407
00:16:17,120 --> 00:16:19,120
which allows one to encrypt a message

408
00:16:19,120 --> 00:16:21,120
such that it can only be decrypted after

409
00:16:21,120 --> 00:16:24,079
a certain deadline has passed

410
00:16:24,079 --> 00:16:26,720
evap can also be used to implement the

411
00:16:26,720 --> 00:16:29,279
so-called deadman switch which under a

412
00:16:29,279 --> 00:16:31,440
certain condition triggers a process

413
00:16:31,440 --> 00:16:33,440
such as making public

414
00:16:33,440 --> 00:16:37,839
or deleting some secret data

415
00:16:38,720 --> 00:16:41,680
using evap it is also possible to

416
00:16:41,680 --> 00:16:44,880
to obtain fake exchange and fair nbc

417
00:16:44,880 --> 00:16:47,040
fair exchange ensures that two parties

418
00:16:47,040 --> 00:16:50,000
receive each other's inputs atomically

419
00:16:50,000 --> 00:16:52,480
and fair mpc ensures that either all

420
00:16:52,480 --> 00:16:53,920
parties receive the output of the

421
00:16:53,920 --> 00:16:57,199
protocol or none

422
00:16:58,160 --> 00:17:00,000
e-web also makes one-time programs

423
00:17:00,000 --> 00:17:02,240
possible these are the programs that can

424
00:17:02,240 --> 00:17:05,280
be run only once

425
00:17:05,280 --> 00:17:07,119
and finally

426
00:17:07,119 --> 00:17:08,480
we show how

427
00:17:08,480 --> 00:17:11,039
non-repudiation proofs can be done they

428
00:17:11,039 --> 00:17:12,799
ensure that parties cannot deny

429
00:17:12,799 --> 00:17:16,959
requesting and obtaining certain data

430
00:17:17,760 --> 00:17:19,919
in our work we also have some other

431
00:17:19,919 --> 00:17:22,160
examples for this please take a look at

432
00:17:22,160 --> 00:17:23,760
our paper

433
00:17:23,760 --> 00:17:25,919
note that prior to our work there are

434
00:17:25,919 --> 00:17:27,280
already existed theoretical

435
00:17:27,280 --> 00:17:29,280
constructions which explained how these

436
00:17:29,280 --> 00:17:31,440
applications could be achieved using

437
00:17:31,440 --> 00:17:33,840
extractable witness encryption and in

438
00:17:33,840 --> 00:17:36,080
many cases blockchains

439
00:17:36,080 --> 00:17:38,640
however with evap you can make

440
00:17:38,640 --> 00:17:40,559
implementing these applications more

441
00:17:40,559 --> 00:17:43,120
realistic

442
00:17:44,480 --> 00:17:46,480
that's all i have thank you for your

443
00:17:46,480 --> 00:17:49,480
attention

