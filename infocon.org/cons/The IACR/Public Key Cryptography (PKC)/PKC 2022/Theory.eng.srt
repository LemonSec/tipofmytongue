1
00:00:00,240 --> 00:00:02,480
i'm freaky from ntt

2
00:00:02,480 --> 00:00:04,240
i will serve as the session chair of

3
00:00:04,240 --> 00:00:05,920
this session

4
00:00:05,920 --> 00:00:08,639
so this session has three talks

5
00:00:08,639 --> 00:00:10,639
and each talk consists of five minutes

6
00:00:10,639 --> 00:00:14,160
talk and five minutes question time

7
00:00:14,160 --> 00:00:15,839
so the first talk

8
00:00:15,839 --> 00:00:18,320
is a lock cable fascication from

9
00:00:18,320 --> 00:00:20,480
circularly insecure free homophobic

10
00:00:20,480 --> 00:00:21,600
encryption

11
00:00:21,600 --> 00:00:24,800
by kamil krizzuniak and camille will

12
00:00:24,800 --> 00:00:27,359
give a talk

13
00:00:28,080 --> 00:00:29,199
hi

14
00:00:29,199 --> 00:00:31,199
thanks for having me

15
00:00:31,199 --> 00:00:36,000
uh so uh let's jump uh into it uh

16
00:00:36,000 --> 00:00:37,840
oh okay yeah so

17
00:00:37,840 --> 00:00:40,000
uh yeah let me start here with uh

18
00:00:40,000 --> 00:00:41,680
recalling uh

19
00:00:41,680 --> 00:00:44,480
roughly what is uh obfuscation

20
00:00:44,480 --> 00:00:45,760
so

21
00:00:45,760 --> 00:00:47,760
let's say that we have a program like on

22
00:00:47,760 --> 00:00:50,719
the left yeah so um

23
00:00:50,719 --> 00:00:53,520
takes us input some some x

24
00:00:53,520 --> 00:00:56,000
does some computation outputs y

25
00:00:56,000 --> 00:00:58,320
and then we have an offer scape area so

26
00:00:58,320 --> 00:01:00,480
the job of the obfuscator is to take as

27
00:01:00,480 --> 00:01:03,120
input this source program and output and

28
00:01:03,120 --> 00:01:04,559
obfuscation

29
00:01:04,559 --> 00:01:05,360
now

30
00:01:05,360 --> 00:01:08,880
the properties that we require from uh

31
00:01:08,880 --> 00:01:10,799
from our notification scheme yeah is

32
00:01:10,799 --> 00:01:12,000
that

33
00:01:12,000 --> 00:01:13,600
[Music]

34
00:01:13,600 --> 00:01:14,560
the

35
00:01:14,560 --> 00:01:17,040
the obfuscated program

36
00:01:17,040 --> 00:01:19,119
preserves functionality so on every

37
00:01:19,119 --> 00:01:20,960
input

38
00:01:20,960 --> 00:01:22,880
it has exactly the same output of the

39
00:01:22,880 --> 00:01:24,240
source program

40
00:01:24,240 --> 00:01:25,119
then

41
00:01:25,119 --> 00:01:27,119
polynomial slowdown which means that

42
00:01:27,119 --> 00:01:29,680
that obfuscation

43
00:01:29,680 --> 00:01:32,560
should work should work slower only by

44
00:01:32,560 --> 00:01:34,000
our polynomial

45
00:01:34,000 --> 00:01:35,840
uh than the source program and finally

46
00:01:35,840 --> 00:01:39,040
we have virtual blackboard security um

47
00:01:39,040 --> 00:01:41,439
which

48
00:01:41,439 --> 00:01:42,880
means that

49
00:01:42,880 --> 00:01:45,040
an adversary given

50
00:01:45,040 --> 00:01:46,640
the obfuscation

51
00:01:46,640 --> 00:01:48,880
it can execute the program

52
00:01:48,880 --> 00:01:49,840
but

53
00:01:49,840 --> 00:01:51,439
aside of

54
00:01:51,439 --> 00:01:53,520
his executions yes outside of the

55
00:01:53,520 --> 00:01:55,520
relation between

56
00:01:55,520 --> 00:01:57,840
the input and output

57
00:01:57,840 --> 00:02:00,719
of the program it learns no information

58
00:02:00,719 --> 00:02:03,040
on on the source program

59
00:02:03,040 --> 00:02:05,360
so in this paper we

60
00:02:05,360 --> 00:02:07,439
are going to deal with a lockable

61
00:02:07,439 --> 00:02:10,399
obfuscation or

62
00:02:10,720 --> 00:02:12,879
we are showing how to obfuscate compute

63
00:02:12,879 --> 00:02:15,520
so-called compute and compare programs

64
00:02:15,520 --> 00:02:16,400
so

65
00:02:16,400 --> 00:02:18,800
a compute and compare program

66
00:02:18,800 --> 00:02:20,800
is more or less

67
00:02:20,800 --> 00:02:22,720
as follows yeah so let's say we have a

68
00:02:22,720 --> 00:02:24,480
circa c

69
00:02:24,480 --> 00:02:25,520
and

70
00:02:25,520 --> 00:02:27,200
we'll build our compute and compare

71
00:02:27,200 --> 00:02:29,680
program from the circuit c and a lock

72
00:02:29,680 --> 00:02:30,879
value

73
00:02:30,879 --> 00:02:32,959
as follows so the computer and compare

74
00:02:32,959 --> 00:02:35,040
program p

75
00:02:35,040 --> 00:02:36,480
on input x

76
00:02:36,480 --> 00:02:38,239
will output one

77
00:02:38,239 --> 00:02:40,319
if

78
00:02:40,319 --> 00:02:43,360
c of x is equal the log

79
00:02:43,360 --> 00:02:45,440
and in any other case you had output

80
00:02:45,440 --> 00:02:46,640
zero

81
00:02:46,640 --> 00:02:49,120
and then we can also generalize this

82
00:02:49,120 --> 00:02:52,640
yeah and instead of outputting one when

83
00:02:52,640 --> 00:02:54,879
we hit the log yeah then we output

84
00:02:54,879 --> 00:02:57,360
a hard coded message

85
00:02:57,360 --> 00:02:59,920
yeah and in this paper we deal with

86
00:02:59,920 --> 00:03:03,440
obfuscating this sort of programs so

87
00:03:03,440 --> 00:03:05,760
uh one thing

88
00:03:05,760 --> 00:03:07,360
what's still left to mention here is

89
00:03:07,360 --> 00:03:10,560
that here virtual black box security

90
00:03:10,560 --> 00:03:13,680
will hold only when the lock uh has high

91
00:03:13,680 --> 00:03:15,760
entropy yeah so so you can you can think

92
00:03:15,760 --> 00:03:17,200
of the log as

93
00:03:17,200 --> 00:03:19,760
uh a value that is uh

94
00:03:19,760 --> 00:03:21,840
chosen from some distribution

95
00:03:21,840 --> 00:03:25,440
independent of c yeah so so

96
00:03:25,440 --> 00:03:27,920
and when our adversary even when an

97
00:03:27,920 --> 00:03:31,040
adversary gets c yeah so so he knows

98
00:03:31,040 --> 00:03:33,440
the search can see

99
00:03:33,440 --> 00:03:36,239
then he has like very little information

100
00:03:36,239 --> 00:03:37,840
on the lock

101
00:03:37,840 --> 00:03:40,879
and yeah and so even though we have this

102
00:03:40,879 --> 00:03:44,000
this sort of obfuscation is uh

103
00:03:44,000 --> 00:03:46,319
limited yeah so it has some applications

104
00:03:46,319 --> 00:03:48,560
and uh uh

105
00:03:48,560 --> 00:03:51,680
one example of the applications here or

106
00:03:51,680 --> 00:03:53,840
uh compilers so we can we can use

107
00:03:53,840 --> 00:03:56,000
lockable obfuscation

108
00:03:56,000 --> 00:03:58,560
to compile an encryption any encryption

109
00:03:58,560 --> 00:04:00,959
schema to uh anonymous version yeah so

110
00:04:00,959 --> 00:04:02,959
so for example when you take a public

111
00:04:02,959 --> 00:04:05,120
key encryption scheme the anonymous

112
00:04:05,120 --> 00:04:07,439
version uh

113
00:04:07,439 --> 00:04:08,319
will

114
00:04:08,319 --> 00:04:10,159
the cyber text in this anonymous version

115
00:04:10,159 --> 00:04:12,799
will hide the recipients public key yeah

116
00:04:12,799 --> 00:04:14,879
so and and similarly

117
00:04:14,879 --> 00:04:17,199
uh one moment

118
00:04:17,199 --> 00:04:19,759
similarly if it's uh

119
00:04:19,759 --> 00:04:21,839
um

120
00:04:21,839 --> 00:04:23,440
if it's our attribute based encryption

121
00:04:23,440 --> 00:04:25,280
scheme is going to hide the attributes

122
00:04:25,280 --> 00:04:26,639
if it's uh

123
00:04:26,639 --> 00:04:28,639
identity encryption scheme it's going to

124
00:04:28,639 --> 00:04:31,600
hide the identity

125
00:04:31,600 --> 00:04:34,639
okay so uh our results in a nutshell are

126
00:04:34,639 --> 00:04:35,840
as follows

127
00:04:35,840 --> 00:04:37,919
so in the paper we show a generic

128
00:04:37,919 --> 00:04:40,560
construction of blockable obfuscation

129
00:04:40,560 --> 00:04:43,759
from fully homomorphic encryption and

130
00:04:43,759 --> 00:04:45,520
cycle testers

131
00:04:45,520 --> 00:04:48,880
so a cycle tester is a attack actually

132
00:04:48,880 --> 00:04:50,400
on the on the

133
00:04:50,400 --> 00:04:51,840
encryption scheme

134
00:04:51,840 --> 00:04:54,000
that is able to distinguish between an

135
00:04:54,000 --> 00:04:57,040
encryption of zero and our

136
00:04:57,040 --> 00:04:59,840
encryption of the of the secret key yeah

137
00:04:59,840 --> 00:05:02,960
so in this case uh we have our

138
00:05:02,960 --> 00:05:06,560
one cycle in the paper we show how to

139
00:05:06,560 --> 00:05:09,039
generalize the construction to to any

140
00:05:09,039 --> 00:05:12,159
length cycle

141
00:05:12,400 --> 00:05:14,160
and the security of our lockable

142
00:05:14,160 --> 00:05:16,850
obfuscation scheme can be shown uh

143
00:05:16,850 --> 00:05:18,080
[Music]

144
00:05:18,080 --> 00:05:20,160
assuming only a missing stability under

145
00:05:20,160 --> 00:05:21,759
chosen plaintext attack of the full

146
00:05:21,759 --> 00:05:23,600
homomorphic encryption scheme

147
00:05:23,600 --> 00:05:24,400
so

148
00:05:24,400 --> 00:05:26,560
we need the cycle tester actually only

149
00:05:26,560 --> 00:05:28,800
for

150
00:05:31,039 --> 00:05:32,720
for correctness

151
00:05:32,720 --> 00:05:34,639
yeah but of course it cannot influence

152
00:05:34,639 --> 00:05:35,120
the

153
00:05:35,120 --> 00:05:36,639
[Music]

154
00:05:36,639 --> 00:05:38,880
the cpa security of the full home of

155
00:05:38,880 --> 00:05:40,320
egyptian

156
00:05:40,320 --> 00:05:44,639
and uh finally so the implications uh

157
00:05:44,639 --> 00:05:48,000
of uh of our results are sporos yeah so

158
00:05:48,000 --> 00:05:51,840
in previous work um we knew we are that

159
00:05:51,840 --> 00:05:54,479
lockable obfuscation plus an encryption

160
00:05:54,479 --> 00:05:56,800
scheme we can build an encryption scheme

161
00:05:56,800 --> 00:05:58,720
with a cycle tester

162
00:05:58,720 --> 00:06:01,199
uh so in this work yeah we

163
00:06:01,199 --> 00:06:03,440
we show that full of homomorphic

164
00:06:03,440 --> 00:06:06,960
encryption scheme plus a cycle tester

165
00:06:06,960 --> 00:06:09,039
will give us a lot of obfuscation yeah

166
00:06:09,039 --> 00:06:12,479
so so this sort of completes the cycle

167
00:06:12,479 --> 00:06:13,440
and

168
00:06:13,440 --> 00:06:16,479
yeah and it also completes this talk

169
00:06:16,479 --> 00:06:18,479
so yeah if you are interested then the

170
00:06:18,479 --> 00:06:21,520
paper is also available on e-print and

171
00:06:21,520 --> 00:06:26,240
yeah and thanks so yeah any questions

172
00:06:26,240 --> 00:06:28,720
so thank you very much for your talk

173
00:06:28,720 --> 00:06:30,960
uh are there any questions from the

174
00:06:30,960 --> 00:06:33,960
audience

175
00:06:40,880 --> 00:06:44,560
so can i ask you one question uh sure

176
00:06:44,560 --> 00:06:47,440
so you use uh cycle test

177
00:06:47,440 --> 00:06:49,759
it in your construction to achieve

178
00:06:49,759 --> 00:06:51,840
correctness right

179
00:06:51,840 --> 00:06:52,880
so yeah

180
00:06:52,880 --> 00:06:55,599
so that's your construction need a cycle

181
00:06:55,599 --> 00:06:58,479
tester that can distinguish uh

182
00:06:58,479 --> 00:07:01,039
encrypting cycles uh

183
00:07:01,039 --> 00:07:04,960
with all of our probability

184
00:07:05,199 --> 00:07:07,440
uh yes yes yes

185
00:07:07,440 --> 00:07:10,720
so uh is it possible to extend your

186
00:07:10,720 --> 00:07:13,360
construction idea so that uh it works

187
00:07:13,360 --> 00:07:16,479
even if psychotist uh can distinguish

188
00:07:16,479 --> 00:07:18,319
encrypting cycles with

189
00:07:18,319 --> 00:07:20,000
only probability say constant

190
00:07:20,000 --> 00:07:22,000
probability or inverse polynomial

191
00:07:22,000 --> 00:07:23,759
probability

192
00:07:23,759 --> 00:07:26,480
uh with a constant probability

193
00:07:26,480 --> 00:07:28,840
[Music]

194
00:07:28,840 --> 00:07:30,400
yeah

195
00:07:30,400 --> 00:07:32,160
i think that with constant probability

196
00:07:32,160 --> 00:07:34,800
yes so you could you could do repetition

197
00:07:34,800 --> 00:07:36,319
yes and

198
00:07:36,319 --> 00:07:37,840
yeah if

199
00:07:37,840 --> 00:07:39,599
if if you would

200
00:07:39,599 --> 00:07:42,160
uh okay well

201
00:07:42,160 --> 00:07:45,120
okay so generally uh you can amplify the

202
00:07:45,120 --> 00:07:49,360
success probability of cycle distance

203
00:07:50,400 --> 00:07:53,758
uh once one second

204
00:07:55,759 --> 00:07:57,759
okay i'm not sure yeah so if the cycle

205
00:07:57,759 --> 00:08:00,879
tester would be um

206
00:08:00,879 --> 00:08:02,879
would be somehow randomized and so on

207
00:08:02,879 --> 00:08:05,599
yeah so so

208
00:08:06,080 --> 00:08:08,720
if the probability depends on something

209
00:08:08,720 --> 00:08:11,360
more than just a cipher text that is

210
00:08:11,360 --> 00:08:13,039
that is input to the ciphertext cell and

211
00:08:13,039 --> 00:08:14,960
i suppose the amplification would work

212
00:08:14,960 --> 00:08:15,840
yeah but

213
00:08:15,840 --> 00:08:19,840
uh so if if uh

214
00:08:19,919 --> 00:08:21,919
yeah if the cycle tester is determined

215
00:08:21,919 --> 00:08:25,120
by by only the encryption scheme

216
00:08:25,120 --> 00:08:28,240
uh that then well so perhaps if the if

217
00:08:28,240 --> 00:08:29,919
the encryption scheme would be somehow

218
00:08:29,919 --> 00:08:31,680
randomizable or something like the

219
00:08:31,680 --> 00:08:32,719
sudden perhaps you had some

220
00:08:32,719 --> 00:08:35,440
qualification would work yeah but but uh

221
00:08:35,440 --> 00:08:38,839
i didn't really really thought about

222
00:08:38,839 --> 00:08:41,039
uh this

223
00:08:41,039 --> 00:08:41,760
uh

224
00:08:41,760 --> 00:08:43,599
yeah but along the way so maybe maybe

225
00:08:43,599 --> 00:08:45,839
i'll also mention yeah that

226
00:08:45,839 --> 00:08:46,720
so

227
00:08:46,720 --> 00:08:48,959
the presentation is a little small here

228
00:08:48,959 --> 00:08:49,760
but

229
00:08:49,760 --> 00:08:51,839
um

230
00:08:51,839 --> 00:08:54,480
we cannot use any cycle tester yeah that

231
00:08:54,480 --> 00:08:56,880
is in the literature yeah so so what um

232
00:08:56,880 --> 00:08:58,800
so for correctness yeah what we actually

233
00:08:58,800 --> 00:09:02,959
need yes cycle testers that work on uh

234
00:09:02,959 --> 00:09:04,720
cipher text

235
00:09:04,720 --> 00:09:06,800
that may came out from from an

236
00:09:06,800 --> 00:09:08,640
evaluation process yeah

237
00:09:08,640 --> 00:09:11,680
so um so if you if you get a cycle test

238
00:09:11,680 --> 00:09:13,760
area that works only for fresh cycle

239
00:09:13,760 --> 00:09:16,000
attacks yeah then then

240
00:09:16,000 --> 00:09:20,640
so for us this is unfortunately useless

241
00:09:20,720 --> 00:09:22,880
because uh yeah so so so we'll have to

242
00:09:22,880 --> 00:09:25,360
formal quickly evaluate uh the the

243
00:09:25,360 --> 00:09:27,120
circus and so on and at the very end

244
00:09:27,120 --> 00:09:29,279
yeah we are going to test cycles

245
00:09:29,279 --> 00:09:30,399
um

246
00:09:30,399 --> 00:09:33,200
so yeah so so so not every cycle tester

247
00:09:33,200 --> 00:09:35,760
is going to work for us yeah i see thank

248
00:09:35,760 --> 00:09:37,839
you

249
00:09:37,839 --> 00:09:40,240
so are there

250
00:09:40,240 --> 00:09:42,959
other questions

251
00:09:48,000 --> 00:09:50,720
so if there are no questions uh we will

252
00:09:50,720 --> 00:09:52,959
move on to the next talk so thank you

253
00:09:52,959 --> 00:09:56,880
very much for your talk again come here

254
00:09:58,800 --> 00:10:01,200
so the next talk is

255
00:10:01,200 --> 00:10:04,160
financially backed covert security by

256
00:10:04,160 --> 00:10:07,519
sebastian foste uh karmi tazai david

257
00:10:07,519 --> 00:10:10,320
kritzla and benjamin schroeder

258
00:10:10,320 --> 00:10:13,360
and benjamin will give a talk

259
00:10:13,360 --> 00:10:15,440
thank you for the introduction

260
00:10:15,440 --> 00:10:17,600
yeah my name is benjamin schlosser and

261
00:10:17,600 --> 00:10:19,519
i'm going to present a paper financial

262
00:10:19,519 --> 00:10:21,600
back covert security

263
00:10:21,600 --> 00:10:23,839
so the notion of corporate security was

264
00:10:23,839 --> 00:10:25,680
introduced as a middle ground between

265
00:10:25,680 --> 00:10:27,920
the security level provided by malicious

266
00:10:27,920 --> 00:10:31,040
security and the efficiency provided by

267
00:10:31,040 --> 00:10:33,440
a semi honestly secure protocol

268
00:10:33,440 --> 00:10:35,279
the covertly secure protocol needs to

269
00:10:35,279 --> 00:10:37,360
guarantee that in the presence of an

270
00:10:37,360 --> 00:10:39,920
adversary that may behave arbitrarily

271
00:10:39,920 --> 00:10:41,920
any cheating will be detected with a

272
00:10:41,920 --> 00:10:44,160
fixed probability

273
00:10:44,160 --> 00:10:46,640
as an extension the public verifiability

274
00:10:46,640 --> 00:10:48,800
notion was introduced

275
00:10:48,800 --> 00:10:50,959
which enables an honest party after

276
00:10:50,959 --> 00:10:53,279
detecting cheating to generate a

277
00:10:53,279 --> 00:10:54,800
certificate which can then be

278
00:10:54,800 --> 00:10:57,040
transferred to any third party and if

279
00:10:57,040 --> 00:10:58,880
the certificate is valid then the third

280
00:10:58,880 --> 00:11:01,040
party is convinced about the misbehavior

281
00:11:01,040 --> 00:11:03,600
of the corrupted party

282
00:11:03,600 --> 00:11:05,760
while the intention of pvc is to

283
00:11:05,760 --> 00:11:08,560
increase the deterrent effect by making

284
00:11:08,560 --> 00:11:11,360
cheating publicly verifiable and this

285
00:11:11,360 --> 00:11:12,399
way

286
00:11:12,399 --> 00:11:14,480
enabling the transfer of knowledge about

287
00:11:14,480 --> 00:11:17,600
corrupted parties to other parties

288
00:11:17,600 --> 00:11:19,120
we observed that

289
00:11:19,120 --> 00:11:21,519
this intention does not hold in settings

290
00:11:21,519 --> 00:11:23,839
like the internet where parties can

291
00:11:23,839 --> 00:11:26,720
behind digital identities which can

292
00:11:26,720 --> 00:11:28,399
easily be changed

293
00:11:28,399 --> 00:11:30,560
so our goal is to

294
00:11:30,560 --> 00:11:31,680
connect

295
00:11:31,680 --> 00:11:33,279
detected cheating with the direct

296
00:11:33,279 --> 00:11:35,519
financial punishment

297
00:11:35,519 --> 00:11:37,120
the contribution of this work is

298
00:11:37,120 --> 00:11:39,200
threefold we first present the

299
00:11:39,200 --> 00:11:41,040
definition of our new notion called

300
00:11:41,040 --> 00:11:43,519
financial backed cover security

301
00:11:43,519 --> 00:11:45,760
then we present construction of fpc

302
00:11:45,760 --> 00:11:48,399
protocols and all our constructions

303
00:11:48,399 --> 00:11:50,800
benefit from an efficient verification

304
00:11:50,800 --> 00:11:53,040
of misbehavior

305
00:11:53,040 --> 00:11:54,959
and finally we present benchmarking

306
00:11:54,959 --> 00:11:58,800
result to evaluate the efficiency of our

307
00:11:58,800 --> 00:12:00,480
constructions

308
00:12:00,480 --> 00:12:03,519
so for our notion we extend the model by

309
00:12:03,519 --> 00:12:04,160
a

310
00:12:04,160 --> 00:12:06,480
trusted third party called judge

311
00:12:06,480 --> 00:12:08,079
at the beginning of the protocol

312
00:12:08,079 --> 00:12:10,399
execution all parties send some security

313
00:12:10,399 --> 00:12:12,240
deposit to the judge

314
00:12:12,240 --> 00:12:14,720
afterwards the parties execute a

315
00:12:14,720 --> 00:12:17,200
covertly secret protocol and during this

316
00:12:17,200 --> 00:12:19,120
execution the judge does not need to

317
00:12:19,120 --> 00:12:20,480
configure it

318
00:12:20,480 --> 00:12:22,720
when the execution is finished each

319
00:12:22,720 --> 00:12:25,040
party can execute the blame algorithm

320
00:12:25,040 --> 00:12:27,680
using his its own input

321
00:12:27,680 --> 00:12:30,399
its own view as input and then and

322
00:12:30,399 --> 00:12:32,480
finally they execute the punishment

323
00:12:32,480 --> 00:12:33,600
protocol

324
00:12:33,600 --> 00:12:36,320
in case there is no cheating detected

325
00:12:36,320 --> 00:12:37,120
then

326
00:12:37,120 --> 00:12:39,360
the security deposits will be sent back

327
00:12:39,360 --> 00:12:41,760
by the judge to all parties

328
00:12:41,760 --> 00:12:44,240
in case there is some malicious parties

329
00:12:44,240 --> 00:12:45,920
then the covertly secured protocol

330
00:12:45,920 --> 00:12:48,880
guarantees that with a fixed probability

331
00:12:48,880 --> 00:12:52,000
we detect this cheating in this case the

332
00:12:52,000 --> 00:12:54,399
blame algorithm output some certificate

333
00:12:54,399 --> 00:12:56,079
which can be used as input to the

334
00:12:56,079 --> 00:12:57,760
punishment protocol

335
00:12:57,760 --> 00:13:00,399
at the end the judge is convinced about

336
00:13:00,399 --> 00:13:02,959
the misbehavior of the corrupted party

337
00:13:02,959 --> 00:13:04,839
and only

338
00:13:04,839 --> 00:13:08,480
the security deposits are sent back only

339
00:13:08,480 --> 00:13:10,880
to the honest parties

340
00:13:10,880 --> 00:13:13,600
so for our construction we realize this

341
00:13:13,600 --> 00:13:16,079
charge party via a smart contract

342
00:13:16,079 --> 00:13:18,639
running on a blockchain this way instead

343
00:13:18,639 --> 00:13:21,839
of putting trust into a single party we

344
00:13:21,839 --> 00:13:23,200
rely on the correctness of the

345
00:13:23,200 --> 00:13:25,200
underlying blockchain which is based on

346
00:13:25,200 --> 00:13:27,760
a honest majority assumption

347
00:13:27,760 --> 00:13:29,440
however we need to take special care

348
00:13:29,440 --> 00:13:32,000
about the complexity of the judge since

349
00:13:32,000 --> 00:13:33,680
running a smart contract on a blockchain

350
00:13:33,680 --> 00:13:36,399
is very expensive

351
00:13:36,399 --> 00:13:38,320
so our first construction yields an

352
00:13:38,320 --> 00:13:40,399
input independent protocol such a

353
00:13:40,399 --> 00:13:42,880
protocol only takes random values and no

354
00:13:42,880 --> 00:13:45,440
secret values as input from the parties

355
00:13:45,440 --> 00:13:47,440
and can be used to set up some

356
00:13:47,440 --> 00:13:49,279
correlated randomness

357
00:13:49,279 --> 00:13:52,000
as as done by speeds and authenticated

358
00:13:52,000 --> 00:13:53,279
garbage

359
00:13:53,279 --> 00:13:55,839
we require that the parties agree on a

360
00:13:55,839 --> 00:13:58,160
common transcript of

361
00:13:58,160 --> 00:14:01,120
a common transcript

362
00:14:01,120 --> 00:14:03,760
which is a similar requirement or the

363
00:14:03,760 --> 00:14:05,839
same requirement known to all pvc

364
00:14:05,839 --> 00:14:07,440
protocols

365
00:14:07,440 --> 00:14:08,959
the punishment protocol for this

366
00:14:08,959 --> 00:14:11,440
construction is non-interactive

367
00:14:11,440 --> 00:14:13,839
our second construction then

368
00:14:13,839 --> 00:14:16,079
presents a protocol for the input

369
00:14:16,079 --> 00:14:18,079
dependent case where parties actually

370
00:14:18,079 --> 00:14:20,160
use some private inputs

371
00:14:20,160 --> 00:14:22,399
we again require that

372
00:14:22,399 --> 00:14:24,800
the parties agree on a transcript of

373
00:14:24,800 --> 00:14:27,199
messages and the punishment is still

374
00:14:27,199 --> 00:14:28,480
interactive

375
00:14:28,480 --> 00:14:30,959
for a third construction we

376
00:14:30,959 --> 00:14:33,360
relax on the requirements on the

377
00:14:33,360 --> 00:14:35,600
transcript so here we do not require a

378
00:14:35,600 --> 00:14:37,920
common transcript and to achieve this

379
00:14:37,920 --> 00:14:40,000
property we construct an interactive

380
00:14:40,000 --> 00:14:42,000
punishment protocol

381
00:14:42,000 --> 00:14:43,279
our

382
00:14:43,279 --> 00:14:45,199
third construction yield an input

383
00:14:45,199 --> 00:14:47,040
independent protocol

384
00:14:47,040 --> 00:14:49,040
for all our construction

385
00:14:49,040 --> 00:14:50,160
we can

386
00:14:50,160 --> 00:14:51,440
achieve

387
00:14:51,440 --> 00:14:53,600
an efficient judge that only needs to

388
00:14:53,600 --> 00:14:55,680
verify a single step of the whole

389
00:14:55,680 --> 00:14:56,839
protocol

390
00:14:56,839 --> 00:14:59,760
execution so for all our construction we

391
00:14:59,760 --> 00:15:02,720
also present former security proofs and

392
00:15:02,720 --> 00:15:06,800
we can even further reduce the

393
00:15:06,800 --> 00:15:09,040
the requirements on the judge complex or

394
00:15:09,040 --> 00:15:11,199
the judge complexity by requiring the

395
00:15:11,199 --> 00:15:13,839
judge to only recompute a single gate of

396
00:15:13,839 --> 00:15:15,760
an arithmetic circuit

397
00:15:15,760 --> 00:15:19,040
this way it's way more efficient than

398
00:15:19,040 --> 00:15:19,839
the

399
00:15:19,839 --> 00:15:21,360
dutch

400
00:15:21,360 --> 00:15:22,639
algorithm

401
00:15:22,639 --> 00:15:25,199
used or known by all by

402
00:15:25,199 --> 00:15:28,079
by all known pvc protocol

403
00:15:28,079 --> 00:15:29,600
and finally we

404
00:15:29,600 --> 00:15:32,399
we evaluate um or we implement our smart

405
00:15:32,399 --> 00:15:35,360
contract um using solidity language

406
00:15:35,360 --> 00:15:37,680
and measure the gas cost for efficiency

407
00:15:37,680 --> 00:15:39,519
evaluation

408
00:15:39,519 --> 00:15:40,639
thanks

409
00:15:40,639 --> 00:15:42,800
for your attention and any questions i'm

410
00:15:42,800 --> 00:15:45,600
happy to answer them

411
00:15:45,600 --> 00:15:47,759
thank you very much for your talk

412
00:15:47,759 --> 00:15:49,519
are there any questions from the

413
00:15:49,519 --> 00:15:52,519
audience

414
00:16:09,839 --> 00:16:13,120
so okay i have one question

415
00:16:13,120 --> 00:16:16,000
so you introduce new uh protocol or

416
00:16:16,000 --> 00:16:17,839
security notions so

417
00:16:17,839 --> 00:16:20,720
uh is this simulation based

418
00:16:20,720 --> 00:16:24,240
um no so we present a definition um

419
00:16:24,240 --> 00:16:26,079
based on games

420
00:16:26,079 --> 00:16:28,639
we use this approach such that

421
00:16:28,639 --> 00:16:32,720
we can reuse the simulation um

422
00:16:32,720 --> 00:16:35,519
based proofs of covertly sql protocol

423
00:16:35,519 --> 00:16:37,040
and add this

424
00:16:37,040 --> 00:16:39,279
the security properties required by a

425
00:16:39,279 --> 00:16:41,199
financially backed covert secure

426
00:16:41,199 --> 00:16:42,399
protocol

427
00:16:42,399 --> 00:16:44,639
as additional properties so that we can

428
00:16:44,639 --> 00:16:48,079
reuse simulation based proof of existing

429
00:16:48,079 --> 00:16:50,480
protocols

430
00:16:50,480 --> 00:16:52,560
i say thank you

431
00:16:52,560 --> 00:16:54,000
welcome

432
00:16:54,000 --> 00:16:54,959
so

433
00:16:54,959 --> 00:16:58,399
are there any other questions

434
00:17:03,279 --> 00:17:06,959
so let me check the chat

435
00:17:14,799 --> 00:17:16,799
so there are no questions so we will

436
00:17:16,799 --> 00:17:19,039
move on to the next talk so thank you

437
00:17:19,039 --> 00:17:20,079
very much

438
00:17:20,079 --> 00:17:22,720
for your talk

439
00:17:26,319 --> 00:17:27,439
so

440
00:17:27,439 --> 00:17:30,160
the final talk of this session is

441
00:17:30,160 --> 00:17:32,480
lifting standard model reductions to

442
00:17:32,480 --> 00:17:34,480
common setup assumptions

443
00:17:34,480 --> 00:17:36,559
by kang gwen

444
00:17:36,559 --> 00:17:38,480
ftcc audra kiss

445
00:17:38,480 --> 00:17:40,559
and bogdan warlinski

446
00:17:40,559 --> 00:17:44,160
and ftc will give a talk

447
00:17:44,720 --> 00:17:48,720
thank you um can you see my slides

448
00:17:48,720 --> 00:17:50,799
yes

449
00:17:50,799 --> 00:17:53,120
um well um

450
00:17:53,120 --> 00:17:56,480
good morning and uh good evening um so

451
00:17:56,480 --> 00:17:58,480
this is joint work with uh

452
00:17:58,480 --> 00:18:01,020
kagnawen

453
00:18:01,020 --> 00:18:02,720
[Music]

454
00:18:02,720 --> 00:18:05,120
as you said so we're going to

455
00:18:05,120 --> 00:18:07,280
uh discuss today about blackbox

456
00:18:07,280 --> 00:18:10,240
redactions uh and how

457
00:18:10,240 --> 00:18:12,320
uh the natural lift from the standard

458
00:18:12,320 --> 00:18:13,520
model to

459
00:18:13,520 --> 00:18:15,280
convert up assumptions

460
00:18:15,280 --> 00:18:17,520
so let's start

461
00:18:17,520 --> 00:18:21,280
um we'll do a quick overview of blackbox

462
00:18:21,280 --> 00:18:24,000
reductions um as everyone knows

463
00:18:24,000 --> 00:18:26,880
they'll be like two primitives p and q

464
00:18:26,880 --> 00:18:29,600
and we know that uh no adversary breaks

465
00:18:29,600 --> 00:18:31,520
iq we want to show that non-version of

466
00:18:31,520 --> 00:18:32,640
xp

467
00:18:32,640 --> 00:18:34,880
so the normal approaches we use a

468
00:18:34,880 --> 00:18:37,360
reduction

469
00:18:37,919 --> 00:18:39,820
and essentially we saw that

470
00:18:39,820 --> 00:18:41,039
[Music]

471
00:18:41,039 --> 00:18:45,120
if the adversary breaks a teeth and some

472
00:18:45,120 --> 00:18:46,400
with a reduction we can have an

473
00:18:46,400 --> 00:18:49,200
adversary that breaks q right

474
00:18:49,200 --> 00:18:50,720
um

475
00:18:50,720 --> 00:18:52,960
to give a concrete example consider

476
00:18:52,960 --> 00:18:55,360
glamor signatures uh

477
00:18:55,360 --> 00:18:56,960
signature scheme

478
00:18:56,960 --> 00:18:59,360
so there the signer

479
00:18:59,360 --> 00:19:03,039
samples uh a pair of randomness per bit

480
00:19:03,039 --> 00:19:05,120
of mess of the message

481
00:19:05,120 --> 00:19:06,160
and

482
00:19:06,160 --> 00:19:09,200
they need somehow to commit to the

483
00:19:09,200 --> 00:19:10,640
before before revealing creating the

484
00:19:10,640 --> 00:19:13,520
signature which is um

485
00:19:13,520 --> 00:19:15,280
the first or the second

486
00:19:15,280 --> 00:19:16,640
of the pair of the signature depending

487
00:19:16,640 --> 00:19:18,720
on

488
00:19:18,720 --> 00:19:20,880
on on the beat

489
00:19:20,880 --> 00:19:23,200
um so

490
00:19:23,200 --> 00:19:24,720
one way to do that is one with functions

491
00:19:24,720 --> 00:19:27,919
right um so our problem arises uh when

492
00:19:27,919 --> 00:19:30,400
someone comes in and says okay well

493
00:19:30,400 --> 00:19:33,919
why don't we use random in our moral um

494
00:19:33,919 --> 00:19:35,760
without also generality here for our

495
00:19:35,760 --> 00:19:36,840
problem

496
00:19:36,840 --> 00:19:40,400
um for uh for something randomness and

497
00:19:40,400 --> 00:19:42,640
there a few questions rises before we

498
00:19:42,640 --> 00:19:44,960
had in the standard modeling uh fully

499
00:19:44,960 --> 00:19:46,640
fully blackbox reduction

500
00:19:46,640 --> 00:19:49,760
can we get the same thing now

501
00:19:49,760 --> 00:19:51,200
well the

502
00:19:51,200 --> 00:19:55,120
is uh the same but now we have um

503
00:19:55,120 --> 00:19:57,039
the adversary in our primitive being

504
00:19:57,039 --> 00:19:59,039
able to access an oracle and the

505
00:19:59,039 --> 00:20:01,360
reduction can be exactly the same

506
00:20:01,360 --> 00:20:03,360
in particular

507
00:20:03,360 --> 00:20:05,840
um i mean at the end we won't show that

508
00:20:05,840 --> 00:20:08,880
the adversary which is you know

509
00:20:08,880 --> 00:20:12,080
different um wants to uh it cannot break

510
00:20:12,080 --> 00:20:12,960
our

511
00:20:12,960 --> 00:20:16,799
new schema in the random article model

512
00:20:16,799 --> 00:20:19,760
uh the first question is okay well now

513
00:20:19,760 --> 00:20:21,679
the adversary

514
00:20:21,679 --> 00:20:23,200
queries an article that means our

515
00:20:23,200 --> 00:20:24,320
reduction

516
00:20:24,320 --> 00:20:27,520
has to um usually deduction in in in

517
00:20:27,520 --> 00:20:29,600
these settings uh

518
00:20:29,600 --> 00:20:31,520
here we are no programmable with no

519
00:20:31,520 --> 00:20:34,159
problem reductions

520
00:20:34,159 --> 00:20:37,280
play the role of the intermediary um

521
00:20:37,280 --> 00:20:40,880
and so they they have to um essentially

522
00:20:40,880 --> 00:20:42,400
access the random workflow directly

523
00:20:42,400 --> 00:20:44,720
right and programmable setting in

524
00:20:44,720 --> 00:20:46,559
programming reduction

525
00:20:46,559 --> 00:20:49,200
will be messing with the oracle

526
00:20:49,200 --> 00:20:51,760
um the of course the the next question

527
00:20:51,760 --> 00:20:54,000
to to have a full black box uh reduction

528
00:20:54,000 --> 00:20:55,760
is uh to answer the question of

529
00:20:55,760 --> 00:20:57,840
correctness we want whatever we come up

530
00:20:57,840 --> 00:20:58,799
with

531
00:20:58,799 --> 00:21:01,600
uh to be correct uh if we have a schema

532
00:21:01,600 --> 00:21:03,919
that's secure that uses um one-way

533
00:21:03,919 --> 00:21:06,480
functions in the random market but it's

534
00:21:06,480 --> 00:21:07,679
you know it's not a signature scheme

535
00:21:07,679 --> 00:21:09,919
it's kind of useless

536
00:21:09,919 --> 00:21:13,679
and the main uh bulk of our question in

537
00:21:13,679 --> 00:21:16,640
in our pro in our proof is essentially

538
00:21:16,640 --> 00:21:19,360
okay so now our uh

539
00:21:19,360 --> 00:21:21,280
uh we have we're not working over

540
00:21:21,280 --> 00:21:23,120
unbounded adversaries we're working on

541
00:21:23,120 --> 00:21:25,039
boundaries that are oracle machines

542
00:21:25,039 --> 00:21:26,159
right

543
00:21:26,159 --> 00:21:27,600
so um

544
00:21:27,600 --> 00:21:30,000
these total different distributions

545
00:21:30,000 --> 00:21:32,480
we're working on and what can we infer

546
00:21:32,480 --> 00:21:34,720
from the original um

547
00:21:34,720 --> 00:21:36,159
question we had

548
00:21:36,159 --> 00:21:39,520
uh so the original reduction we had um

549
00:21:39,520 --> 00:21:42,080
and another point here is uh okay since

550
00:21:42,080 --> 00:21:44,559
the adversary is unbounded and you can

551
00:21:44,559 --> 00:21:46,159
access the whole random oracle uh what

552
00:21:46,159 --> 00:21:48,000
happens to the advantage if the

553
00:21:48,000 --> 00:21:49,760
adversary decides i'm going to query the

554
00:21:49,760 --> 00:21:52,240
whole random work

555
00:21:52,240 --> 00:21:53,280
we saw

556
00:21:53,280 --> 00:21:55,919
that everything works out

557
00:21:55,919 --> 00:21:57,120
so

558
00:21:57,120 --> 00:21:59,919
um essentially this is our result um we

559
00:21:59,919 --> 00:22:02,320
saw that this diamond commutes and

560
00:22:02,320 --> 00:22:04,640
to to to break it down a bit

561
00:22:04,640 --> 00:22:07,760
uh so for for primitive p and q and a

562
00:22:07,760 --> 00:22:10,720
setup assumption and we give a

563
00:22:10,720 --> 00:22:12,720
a clear definition of that and so we saw

564
00:22:12,720 --> 00:22:15,440
the minimal properties property to have

565
00:22:15,440 --> 00:22:17,280
a setup assumption

566
00:22:17,280 --> 00:22:18,720
um

567
00:22:18,720 --> 00:22:20,720
if there is a blackboard reduction in

568
00:22:20,720 --> 00:22:22,400
the standard model

569
00:22:22,400 --> 00:22:24,000
well now you can

570
00:22:24,000 --> 00:22:25,200
if you add

571
00:22:25,200 --> 00:22:27,919
an oracle uh and uh

572
00:22:27,919 --> 00:22:30,559
um into world fine vertical right you

573
00:22:30,559 --> 00:22:32,400
can essentially you have a black box

574
00:22:32,400 --> 00:22:34,720
reduction and you can just scratch off

575
00:22:34,720 --> 00:22:36,720
um whatever you have before and just

576
00:22:36,720 --> 00:22:38,880
work in the new model that you're

577
00:22:38,880 --> 00:22:40,880
working on your setup assumption and

578
00:22:40,880 --> 00:22:42,799
forget the past

579
00:22:42,799 --> 00:22:43,760
um

580
00:22:43,760 --> 00:22:46,000
so of course this is built on on a lot

581
00:22:46,000 --> 00:22:49,280
of work um i've just selected some of

582
00:22:49,280 --> 00:22:52,240
the work here um that that is

583
00:22:52,240 --> 00:22:56,720
important a bit um for uh our result so

584
00:22:56,720 --> 00:22:59,200
initially ryan gold travis signing off

585
00:22:59,200 --> 00:23:00,320
um

586
00:23:00,320 --> 00:23:02,559
started introducing um i mean of course

587
00:23:02,559 --> 00:23:05,360
uh reducibility but also like uh notions

588
00:23:05,360 --> 00:23:07,039
of oracles

589
00:23:07,039 --> 00:23:09,039
and

590
00:23:09,039 --> 00:23:10,320
reductions

591
00:23:10,320 --> 00:23:13,840
so in ruska and fizzling they did a fine

592
00:23:13,840 --> 00:23:14,960
hierarchy

593
00:23:14,960 --> 00:23:16,480
and there they introduced the

594
00:23:16,480 --> 00:23:19,480
regulations

595
00:23:20,840 --> 00:23:24,159
reductions um um

596
00:23:24,159 --> 00:23:25,919
however to get our result to get full

597
00:23:25,919 --> 00:23:28,720
black box reductions um we we

598
00:23:28,720 --> 00:23:30,480
we work on the definition of heinz and i

599
00:23:30,480 --> 00:23:31,440
went

600
00:23:31,440 --> 00:23:35,840
uh to get the necessary um uh framework

601
00:23:35,840 --> 00:23:38,879
which we extended

602
00:23:38,960 --> 00:23:40,799
and

603
00:23:40,799 --> 00:23:42,159
so um

604
00:23:42,159 --> 00:23:43,520
are there some

605
00:23:43,520 --> 00:23:45,360
uh open

606
00:23:45,360 --> 00:23:47,360
questions uh here of course

607
00:23:47,360 --> 00:23:48,240
um

608
00:23:48,240 --> 00:23:49,360
like can we

609
00:23:49,360 --> 00:23:52,159
work further in the hierarchy of baker

610
00:23:52,159 --> 00:23:54,159
bruce and faceline um

611
00:23:54,159 --> 00:23:58,799
and improve um our result a bit and um

612
00:23:58,799 --> 00:24:01,120
the other question is uh about

613
00:24:01,120 --> 00:24:02,480
programmable

614
00:24:02,480 --> 00:24:05,440
reductions um our work is strictly uh

615
00:24:05,440 --> 00:24:07,039
nonprogrammable

616
00:24:07,039 --> 00:24:09,679
um and the last question will be on

617
00:24:09,679 --> 00:24:12,960
composable composability in general um

618
00:24:12,960 --> 00:24:13,760
and

619
00:24:13,760 --> 00:24:14,799
i mean

620
00:24:14,799 --> 00:24:17,279
feel free to shoot us an email

621
00:24:17,279 --> 00:24:18,799
we're all always happy to answer

622
00:24:18,799 --> 00:24:21,440
questions and we're around

623
00:24:21,440 --> 00:24:24,159
you can find our paper on aprint and of

624
00:24:24,159 --> 00:24:25,679
course the proceedings

625
00:24:25,679 --> 00:24:29,480
thank you very much

626
00:24:32,880 --> 00:24:34,799
thank you very much for your talk

627
00:24:34,799 --> 00:24:36,320
are there any questions from the

628
00:24:36,320 --> 00:24:39,320
audience

629
00:24:50,880 --> 00:24:53,279
so i have a quick question sorry

630
00:24:53,279 --> 00:24:55,440
so does your result capture quantum

631
00:24:55,440 --> 00:24:58,760
random oracles

632
00:25:00,720 --> 00:25:03,200
i'm i

633
00:25:03,200 --> 00:25:04,559
i am not

634
00:25:04,559 --> 00:25:06,799
100 sure i

635
00:25:06,799 --> 00:25:09,279
should so the the basic property we saw

636
00:25:09,279 --> 00:25:10,320
is

637
00:25:10,320 --> 00:25:11,600
simple it's essentially considered

638
00:25:11,600 --> 00:25:12,640
something

639
00:25:12,640 --> 00:25:13,440
um

640
00:25:13,440 --> 00:25:15,520
but we haven't

641
00:25:15,520 --> 00:25:17,919
like maybe there's some detail that um

642
00:25:17,919 --> 00:25:19,440
like you know you can

643
00:25:19,440 --> 00:25:21,679
it doesn't work for but uh it should be

644
00:25:21,679 --> 00:25:23,440
working just fine

645
00:25:23,440 --> 00:25:25,120
uh we're looking like another examples

646
00:25:25,120 --> 00:25:26,080
like

647
00:25:26,080 --> 00:25:28,080
random beacons and stuff like that so

648
00:25:28,080 --> 00:25:30,320
you can have complicated uh structures

649
00:25:30,320 --> 00:25:32,320
but uh you know you have to be careful

650
00:25:32,320 --> 00:25:33,760
um

651
00:25:33,760 --> 00:25:36,159
how you set thing up everything is just

652
00:25:36,159 --> 00:25:38,480
making sure your oracle is well defined

653
00:25:38,480 --> 00:25:40,480
um and then everything just follows from

654
00:25:40,480 --> 00:25:43,039
our results but it's

655
00:25:43,039 --> 00:25:44,240
i don't think

656
00:25:44,240 --> 00:25:48,080
like i opened my head thank you

657
00:25:48,480 --> 00:25:52,760
so are there any exact questions

658
00:26:02,320 --> 00:26:03,679
okay

659
00:26:03,679 --> 00:26:05,760
there are no questions uh thank you very

660
00:26:05,760 --> 00:26:08,880
much again for your talk

661
00:26:08,880 --> 00:26:12,799
so this was a last talk of this session

662
00:26:12,799 --> 00:26:16,559
so yeah finally i would like to thank

663
00:26:16,559 --> 00:26:18,720
all the speakers of this session

664
00:26:18,720 --> 00:26:22,640
and also i would like to thank uh

