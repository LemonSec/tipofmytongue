1
00:00:00,080 --> 00:00:04,160
very much for attending pkc uh this year

2
00:00:04,160 --> 00:00:04,880
uh

3
00:00:04,880 --> 00:00:09,280
so this pkc is 25th pkc uh meaning that

4
00:00:09,280 --> 00:00:12,880
this is called a century anniversary

5
00:00:12,880 --> 00:00:16,400
so i am kocho hanauka program chair of

6
00:00:16,400 --> 00:00:17,920
this pkc

7
00:00:17,920 --> 00:00:21,199
uh very unfortunately like the past two

8
00:00:21,199 --> 00:00:24,359
biggest is uh because in 2000 uh

9
00:00:24,359 --> 00:00:27,039
2022 were able to

10
00:00:27,039 --> 00:00:31,160
all be held in uh

11
00:00:31,359 --> 00:00:34,000
but uh

12
00:00:34,000 --> 00:00:36,800
we hope that we can make it an enjoyable

13
00:00:36,800 --> 00:00:38,480
international international conference

14
00:00:38,480 --> 00:00:40,399
with you all

15
00:00:40,399 --> 00:00:41,360
oh

16
00:00:41,360 --> 00:00:42,559
so the

17
00:00:42,559 --> 00:00:44,640
first of all all

18
00:00:44,640 --> 00:00:46,079
uh i would like

19
00:00:46,079 --> 00:00:48,960
uh to introduce the brief summary of our

20
00:00:48,960 --> 00:00:52,440
pkc 2022

21
00:00:52,719 --> 00:00:55,840
afterwards uh professor yohei watanabe

22
00:00:55,840 --> 00:00:58,239
uh one of the general co-chairs i will

23
00:00:58,239 --> 00:01:00,959
give or

24
00:01:01,039 --> 00:01:03,120
general instructions for attending the

25
00:01:03,120 --> 00:01:05,600
conference

26
00:01:05,600 --> 00:01:06,640
okay

27
00:01:06,640 --> 00:01:09,920
uh let me first introduce all the

28
00:01:09,920 --> 00:01:13,520
general chairs and the foreign chair

29
00:01:13,520 --> 00:01:16,880
of the general chairs are of arjun ji

30
00:01:16,880 --> 00:01:18,720
shikata from yokohama national

31
00:01:18,720 --> 00:01:20,479
university japan

32
00:01:20,479 --> 00:01:23,520
and uh yohey watanabe university of

33
00:01:23,520 --> 00:01:26,720
electoral communications as japan

34
00:01:26,720 --> 00:01:30,159
and our province here is uh me

35
00:01:30,159 --> 00:01:32,720
going to hanoka from national institute

36
00:01:32,720 --> 00:01:34,640
of advanced industrial science and

37
00:01:34,640 --> 00:01:36,000
technology

38
00:01:36,000 --> 00:01:39,640
uh ice japan

39
00:01:41,600 --> 00:01:42,479
and

40
00:01:42,479 --> 00:01:48,079
uh the next uh i like to all explain the

41
00:01:48,079 --> 00:01:52,360
overview of the paper selection

42
00:01:54,399 --> 00:01:56,960
the the submission deadline was

43
00:01:56,960 --> 00:02:00,399
september 16th or last year

44
00:02:00,399 --> 00:02:02,719
and

45
00:02:03,280 --> 00:02:05,520
so the now we

46
00:02:05,520 --> 00:02:09,119
used our hot clp instead of the website

47
00:02:09,119 --> 00:02:10,959
review

48
00:02:10,959 --> 00:02:13,680
and this is the first time how to use

49
00:02:13,680 --> 00:02:15,360
hot clp

50
00:02:15,360 --> 00:02:18,800
in pkc therefore we have some small

51
00:02:18,800 --> 00:02:20,959
doubles

52
00:02:20,959 --> 00:02:23,760
but unfortunately uh there was no big

53
00:02:23,760 --> 00:02:26,000
trouble

54
00:02:26,000 --> 00:02:30,000
and the uh notification

55
00:02:30,000 --> 00:02:31,200
was

56
00:02:31,200 --> 00:02:32,000
uh

57
00:02:32,000 --> 00:02:33,040
from

58
00:02:33,040 --> 00:02:34,160
november

59
00:02:34,160 --> 00:02:36,480
30th

60
00:02:36,480 --> 00:02:38,000
uh last year

61
00:02:38,000 --> 00:02:42,640
and uh so in the review process uh we

62
00:02:42,640 --> 00:02:43,440
the

63
00:02:43,440 --> 00:02:45,920
rebecca four phase was not introduced

64
00:02:45,920 --> 00:02:47,840
but the frequent

65
00:02:47,840 --> 00:02:52,239
uh communications were made with theosis

66
00:02:52,239 --> 00:02:53,120
and

67
00:02:53,120 --> 00:02:54,080
we

68
00:02:54,080 --> 00:02:55,440
received

69
00:02:55,440 --> 00:02:58,440
1397

70
00:02:58,640 --> 00:03:00,400
submissions

71
00:03:00,400 --> 00:03:02,640
and

72
00:03:02,959 --> 00:03:05,120
uh that we selected papers for

73
00:03:05,120 --> 00:03:08,400
acceptance uh with the aim of achieving

74
00:03:08,400 --> 00:03:12,159
an acceptance rate of about 30 percent

75
00:03:12,159 --> 00:03:14,480
uh at the end of the

76
00:03:14,480 --> 00:03:17,359
review process

77
00:03:17,440 --> 00:03:23,200
uh we accepted uh body papers uh but the

78
00:03:23,200 --> 00:03:24,480
uh

79
00:03:24,480 --> 00:03:26,159
so among these

80
00:03:26,159 --> 00:03:29,280
body papers when papers were later

81
00:03:29,280 --> 00:03:32,560
withdrawn or by the houses

82
00:03:32,560 --> 00:03:35,280
so therefore finally uh we

83
00:03:35,280 --> 00:03:36,799
uh the

84
00:03:36,799 --> 00:03:37,920
the number of

85
00:03:37,920 --> 00:03:43,040
papers uh became uh 39 which is where we

86
00:03:43,040 --> 00:03:44,799
are

87
00:03:44,799 --> 00:03:47,120
lower than the 30 percent over the

88
00:03:47,120 --> 00:03:50,080
accidents rate

89
00:03:52,000 --> 00:03:54,720
okay now from my viewpoint or there

90
00:03:54,720 --> 00:03:55,840
seems

91
00:03:55,840 --> 00:03:58,080
uh

92
00:03:59,040 --> 00:04:03,120
some trends in your exhibit papers

93
00:04:03,280 --> 00:04:06,560
uh 18 papers uh uh since they have a

94
00:04:06,560 --> 00:04:08,799
close relationship with post-quantum

95
00:04:08,799 --> 00:04:12,400
security and this is actually uh

96
00:04:12,400 --> 00:04:14,720
also encouraged in the court papers so

97
00:04:14,720 --> 00:04:18,000
that their pride is not very surprising

98
00:04:18,000 --> 00:04:23,120
and also the 21 papers ha seem to have a

99
00:04:23,120 --> 00:04:25,280
close relationship with privacy

100
00:04:25,280 --> 00:04:27,440
preserving computation

101
00:04:27,440 --> 00:04:30,160
uh with the recent increased attention

102
00:04:30,160 --> 00:04:33,520
to uh pets privacy enhanced enhancing

103
00:04:33,520 --> 00:04:36,560
technologies uh it is likely that uh

104
00:04:36,560 --> 00:04:39,840
there is also increased attention uh to

105
00:04:39,840 --> 00:04:43,840
the building blocks to the pets

106
00:04:44,080 --> 00:04:45,759
moreover

107
00:04:45,759 --> 00:04:46,800
the

108
00:04:46,800 --> 00:04:49,280
seven papers seem to have a cost

109
00:04:49,280 --> 00:04:52,160
relationship with blockchains

110
00:04:52,160 --> 00:04:52,960
and

111
00:04:52,960 --> 00:04:54,080
this

112
00:04:54,080 --> 00:04:57,040
overlaps with the 21 papers we've

113
00:04:57,040 --> 00:05:01,280
created the pets technologies about

114
00:05:01,280 --> 00:05:02,639
and may be

115
00:05:02,639 --> 00:05:06,320
considered a subset of that

116
00:05:07,759 --> 00:05:09,280
so here

117
00:05:09,280 --> 00:05:11,600
let me briefly introduce the program

118
00:05:11,600 --> 00:05:14,080
committee

119
00:05:14,639 --> 00:05:18,320
so i apologize for not being able to all

120
00:05:18,320 --> 00:05:20,800
read everyone's name due to the time

121
00:05:20,800 --> 00:05:22,560
constraint

122
00:05:22,560 --> 00:05:25,280
but i would like to thank all of them

123
00:05:25,280 --> 00:05:27,840
for all the efforts

124
00:05:27,840 --> 00:05:30,160
regarding paper selection so thank you

125
00:05:30,160 --> 00:05:32,639
very much

126
00:05:35,360 --> 00:05:36,240
so

127
00:05:36,240 --> 00:05:40,800
in pkc we have two invited talks the the

128
00:05:40,800 --> 00:05:42,320
first one

129
00:05:42,320 --> 00:05:43,120
uh

130
00:05:43,120 --> 00:05:46,720
will be given by dr dustin murray

131
00:05:46,720 --> 00:05:49,199
and title is beginning over the end

132
00:05:49,199 --> 00:05:53,600
other vastness pqc does

133
00:05:53,919 --> 00:05:57,199
so dr murphy sorry is one of the key

134
00:05:57,199 --> 00:05:59,560
persons uh in the missed pqc

135
00:05:59,560 --> 00:06:02,240
standardizations and will be speaking

136
00:06:02,240 --> 00:06:06,319
about the legal status of the project

137
00:06:06,319 --> 00:06:08,639
and the second one will be given by

138
00:06:08,639 --> 00:06:11,680
professor yuriyan zen uh who is

139
00:06:11,680 --> 00:06:14,479
the chair of pkc steering committee

140
00:06:14,479 --> 00:06:18,000
and title or his first 25 years of the

141
00:06:18,000 --> 00:06:21,759
pkc annual conference

142
00:06:21,759 --> 00:06:26,560
so since uh this is the uh this pkc is a

143
00:06:26,560 --> 00:06:29,600
quarter century anniversary uh professor

144
00:06:29,600 --> 00:06:32,000
then will give a special talk on the

145
00:06:32,000 --> 00:06:35,840
history of pkc to date as the chair of

146
00:06:35,840 --> 00:06:39,440
the pkc cell committee

147
00:06:40,160 --> 00:06:41,840
and

148
00:06:41,840 --> 00:06:43,520
so

149
00:06:43,520 --> 00:06:45,919
in addition the test of time hours will

150
00:06:45,919 --> 00:06:50,719
also be presented at this year's legacy

151
00:06:51,280 --> 00:06:54,080
so based on the number of citations and

152
00:06:54,080 --> 00:06:55,599
other practices

153
00:06:55,599 --> 00:06:58,560
the pkc test of time hours is selected

154
00:06:58,560 --> 00:07:01,280
from the papers presented at pkc more

155
00:07:01,280 --> 00:07:04,160
than 15 years ago

156
00:07:04,160 --> 00:07:05,919
in accordance with

157
00:07:05,919 --> 00:07:07,680
our regulations

158
00:07:07,680 --> 00:07:10,080
oh this year we

159
00:07:10,080 --> 00:07:12,880
do two papers have been selected

160
00:07:12,880 --> 00:07:14,319
for the hours

161
00:07:14,319 --> 00:07:18,960
and uh this will be announced tomorrow

162
00:07:19,680 --> 00:07:23,120
so finally i would like to introduce the

163
00:07:23,120 --> 00:07:25,840
members of pika sister and committee

164
00:07:25,840 --> 00:07:26,639
uh

165
00:07:26,639 --> 00:07:30,080
since the beginning of this year uh abe

166
00:07:30,080 --> 00:07:30,960
and

167
00:07:30,960 --> 00:07:32,560
john and

168
00:07:32,560 --> 00:07:34,240
lange

169
00:07:34,240 --> 00:07:37,919
have joined us as our new members

170
00:07:37,919 --> 00:07:40,000
uh this structure will be responsible

171
00:07:40,000 --> 00:07:42,000
for deciding the future management

172
00:07:42,000 --> 00:07:44,160
policy of pkc

173
00:07:44,160 --> 00:07:45,039
okay

174
00:07:45,039 --> 00:07:46,560
thank you

175
00:07:46,560 --> 00:07:49,840
so next yo here we give the brief

176
00:07:49,840 --> 00:07:52,400
introduction of the conference

177
00:07:52,400 --> 00:07:53,440
yes

178
00:07:53,440 --> 00:07:57,160
let me share my screen

179
00:08:00,720 --> 00:08:02,400
hold on

180
00:08:02,400 --> 00:08:05,878
this one

181
00:08:16,080 --> 00:08:18,560
come on

182
00:08:20,400 --> 00:08:23,599
oh the screen is black

183
00:08:24,840 --> 00:08:27,440
yeah why

184
00:08:27,440 --> 00:08:30,719
why does it happen yeah

185
00:08:32,640 --> 00:08:34,559
so

186
00:08:34,559 --> 00:08:37,880
oh no

187
00:08:57,200 --> 00:08:58,880
sorry

188
00:08:58,880 --> 00:09:00,959
okay okay

189
00:09:00,959 --> 00:09:03,920
i i will show the slime okay

190
00:09:03,920 --> 00:09:06,080
oh no maybe

191
00:09:06,080 --> 00:09:09,839
i can do that uh

192
00:09:10,240 --> 00:09:13,200
right can you see it slice yes

193
00:09:13,200 --> 00:09:14,480
yes okay

194
00:09:14,480 --> 00:09:16,320
great

195
00:09:16,320 --> 00:09:17,839
so

196
00:09:17,839 --> 00:09:21,720
uh yeah sorry

197
00:09:23,200 --> 00:09:24,240
okay

198
00:09:24,240 --> 00:09:26,720
uh sorry start

199
00:09:26,720 --> 00:09:29,440
okay i'm johay so

200
00:09:29,440 --> 00:09:30,240
uh

201
00:09:30,240 --> 00:09:33,120
jingenda i are serving as general shares

202
00:09:33,120 --> 00:09:37,160
of this year's pkc

203
00:09:37,360 --> 00:09:40,399
and we had originally planned to

204
00:09:40,399 --> 00:09:44,560
organize pkc 2022 as a hybrid event

205
00:09:44,560 --> 00:09:47,440
we chose pacifico yokohama

206
00:09:47,440 --> 00:09:48,959
this building

207
00:09:48,959 --> 00:09:51,600
as a venue and uh devoted our energies

208
00:09:51,600 --> 00:09:53,760
to preparing the conference

209
00:09:53,760 --> 00:09:56,000
pacifico is a

210
00:09:56,000 --> 00:09:59,279
world-class convention complex

211
00:09:59,279 --> 00:10:02,079
in yokohama's

212
00:10:02,079 --> 00:10:05,040
futuristic yokohama the futuristic uh

213
00:10:05,040 --> 00:10:09,519
minato mirai 21 waterfront uh district

214
00:10:09,519 --> 00:10:10,800
yeah

215
00:10:10,800 --> 00:10:13,120
there's some documents yeah i

216
00:10:13,120 --> 00:10:15,920
i know the words from the some documents

217
00:10:15,920 --> 00:10:18,000
and it's it's worth noting that uh

218
00:10:18,000 --> 00:10:21,600
pacifico also uh hosted the first pkc uh

219
00:10:21,600 --> 00:10:22,560
back in

220
00:10:22,560 --> 00:10:25,120
uh 1998.

221
00:10:25,120 --> 00:10:28,079
if you participated in that first bkc

222
00:10:28,079 --> 00:10:31,120
you might record the experience foundry

223
00:10:31,120 --> 00:10:33,680
and be surprised by yokohama at the

224
00:10:33,680 --> 00:10:38,079
development of yokohama's urban areas

225
00:10:38,079 --> 00:10:39,040
anyway

226
00:10:39,040 --> 00:10:42,320
uh at the end of november 2021

227
00:10:42,320 --> 00:10:45,279
due to the images of the unknown variant

228
00:10:45,279 --> 00:10:47,600
the japanese government unfortunately

229
00:10:47,600 --> 00:10:51,760
decided to hold new entries from abroad

230
00:10:52,160 --> 00:10:53,040
and

231
00:10:53,040 --> 00:10:55,120
we had also planned a special excursion

232
00:10:55,120 --> 00:10:58,000
to kamakura to commemorate the

233
00:10:58,000 --> 00:11:01,760
pkc's 25th anniversary

234
00:11:01,760 --> 00:11:04,760
and kamakura was the capital of japan

235
00:11:04,760 --> 00:11:07,200
800 years ago

236
00:11:07,200 --> 00:11:09,839
and you could have enjoyed

237
00:11:09,839 --> 00:11:13,839
visiting temples and other culture

238
00:11:13,839 --> 00:11:15,760
experiences

239
00:11:15,760 --> 00:11:17,279
however

240
00:11:17,279 --> 00:11:19,760
yeah due to corbett

241
00:11:19,760 --> 00:11:21,839
we were

242
00:11:21,839 --> 00:11:24,079
hosting we were forced to give up our

243
00:11:24,079 --> 00:11:27,359
plans for hybrid event

244
00:11:27,680 --> 00:11:29,360
and in the end

245
00:11:29,360 --> 00:11:32,560
uh we decided to switch to aperture pkc

246
00:11:32,560 --> 00:11:35,839
uh to be heard over four days

247
00:11:35,839 --> 00:11:38,720
although uh it was a difficult decision

248
00:11:38,720 --> 00:11:41,120
uh we chose a schedule that starts at 8

249
00:11:41,120 --> 00:11:42,720
a.m japan time

250
00:11:42,720 --> 00:11:44,240
uh since

251
00:11:44,240 --> 00:11:46,640
we are different size on

252
00:11:46,640 --> 00:11:48,800
international deadlines

253
00:11:48,800 --> 00:11:50,880
so most attendees are

254
00:11:50,880 --> 00:11:52,720
now on monday right

255
00:11:52,720 --> 00:11:54,639
and as a result the conference dates are

256
00:11:54,639 --> 00:11:56,800
moved up for them

257
00:11:56,800 --> 00:11:59,440
we apologize to attendees in asia and

258
00:11:59,440 --> 00:12:01,839
europe who still have to separate for

259
00:12:01,839 --> 00:12:04,320
events

260
00:12:04,480 --> 00:12:05,279
and

261
00:12:05,279 --> 00:12:07,519
all talks and discussions will be had on

262
00:12:07,519 --> 00:12:09,600
zoom and zurip

263
00:12:09,600 --> 00:12:11,120
as the style is

264
00:12:11,120 --> 00:12:13,440
becoming the standard

265
00:12:13,440 --> 00:12:16,560
for budget iso conferences

266
00:12:16,560 --> 00:12:19,240
all sessions will be live streamed on

267
00:12:19,240 --> 00:12:24,040
iacr youtube channel too

268
00:12:24,240 --> 00:12:26,880
sorry there's typo so

269
00:12:26,880 --> 00:12:29,839
so far we have received over 270

270
00:12:29,839 --> 00:12:31,600
illustrations

271
00:12:31,600 --> 00:12:33,360
uh

272
00:12:33,360 --> 00:12:36,399
and we will give the detailed statistics

273
00:12:36,399 --> 00:12:38,720
and the closing remarks

274
00:12:38,720 --> 00:12:41,040
okay

275
00:12:43,760 --> 00:12:44,560
okay

276
00:12:44,560 --> 00:12:47,040
and most people who are watching this uh

277
00:12:47,040 --> 00:12:49,440
have already logged into the portal but

278
00:12:49,440 --> 00:12:51,920
some are uh what probably watching on

279
00:12:51,920 --> 00:12:54,320
youtube so this information would be

280
00:12:54,320 --> 00:12:55,839
helpful to them

281
00:12:55,839 --> 00:12:58,480
you can log into the portal via the join

282
00:12:58,480 --> 00:13:01,200
the conference button or join the

283
00:13:01,200 --> 00:13:04,560
conference portal button on the website

284
00:13:04,560 --> 00:13:07,200
and then you can access them sessions

285
00:13:07,200 --> 00:13:08,480
stream chat

286
00:13:08,480 --> 00:13:12,399
some puzzle and social rooms

287
00:13:12,399 --> 00:13:15,200
in each session every five minute talk

288
00:13:15,200 --> 00:13:18,560
will be followed by five minutes of q a

289
00:13:18,560 --> 00:13:21,200
and all papers are available available

290
00:13:21,200 --> 00:13:22,560
on the website

291
00:13:22,560 --> 00:13:26,399
uh and on the program page you can find

292
00:13:26,399 --> 00:13:29,040
links to free pre-recorded presentations

293
00:13:29,040 --> 00:13:32,399
for all muslim talks

294
00:13:32,720 --> 00:13:35,120
and uh there are two ways to ask

295
00:13:35,120 --> 00:13:39,040
questions regulations uh first uh as in

296
00:13:39,040 --> 00:13:42,079
later uh in-person conferences

297
00:13:42,079 --> 00:13:44,959
you can use a laser hand function to ask

298
00:13:44,959 --> 00:13:47,199
your questions already

299
00:13:47,199 --> 00:13:48,399
and you can

300
00:13:48,399 --> 00:13:52,000
also write your questions in the chat

301
00:13:52,000 --> 00:13:54,560
zoom is okay but we recommend using

302
00:13:54,560 --> 00:13:56,399
zurich chat

303
00:13:56,399 --> 00:13:57,440
because

304
00:13:57,440 --> 00:14:02,079
it allows longer interactive discussions

305
00:14:02,079 --> 00:14:04,320
uh we have a bunch of social hours after

306
00:14:04,320 --> 00:14:07,199
each day's last session

307
00:14:07,199 --> 00:14:09,440
you can join from the portal and there

308
00:14:09,440 --> 00:14:11,920
are several social rooms

309
00:14:11,920 --> 00:14:14,720
you can find who is in each room before

310
00:14:14,720 --> 00:14:16,560
joining

311
00:14:16,560 --> 00:14:19,279
uh bring a drink and enjoy the party

312
00:14:19,279 --> 00:14:20,320
uh

313
00:14:20,320 --> 00:14:24,160
it's still before noon in japan so

314
00:14:25,199 --> 00:14:26,480
and uh

315
00:14:26,480 --> 00:14:29,279
uh there's a lot of people who join uh

316
00:14:29,279 --> 00:14:31,839
for junjie and i want to thank

317
00:14:31,839 --> 00:14:34,320
first uh our thanks to the program chair

318
00:14:34,320 --> 00:14:37,279
koichiro hanoka for working on not only

319
00:14:37,279 --> 00:14:39,519
on not only the program tasks but also

320
00:14:39,519 --> 00:14:43,120
with organizing lots of other things

321
00:14:43,120 --> 00:14:45,440
uh the local organized committee members

322
00:14:45,440 --> 00:14:48,560
were committed to organizing our hybrid

323
00:14:48,560 --> 00:14:49,760
pkc

324
00:14:49,760 --> 00:14:52,079
uh though unfortunately

325
00:14:52,079 --> 00:14:53,519
it was not to be

326
00:14:53,519 --> 00:14:54,320
uh

327
00:14:54,320 --> 00:14:58,480
with an example therefore efforts

328
00:14:58,480 --> 00:15:00,720
we would like to thank the isr board of

329
00:15:00,720 --> 00:15:03,040
directors and coronal virus emergence

330
00:15:03,040 --> 00:15:05,440
committee uh particularly misha abdullah

331
00:15:05,440 --> 00:15:07,120
and brian makia

332
00:15:07,120 --> 00:15:10,800
for their advice and support

333
00:15:10,800 --> 00:15:13,760
on our budget plans

334
00:15:13,760 --> 00:15:16,079
and making the switch to a badger

335
00:15:16,079 --> 00:15:18,560
conference

336
00:15:18,720 --> 00:15:20,959
and to maintain the program page and

337
00:15:20,959 --> 00:15:24,399
organize organizing organize our budget

338
00:15:24,399 --> 00:15:25,440
pkc

339
00:15:25,440 --> 00:15:27,920
we did receive a lot of help from kevin

340
00:15:27,920 --> 00:15:29,920
mccurry and chemically

341
00:15:29,920 --> 00:15:33,040
as in previous budget conferences

342
00:15:33,040 --> 00:15:35,199
we'd like to thank them for all their

343
00:15:35,199 --> 00:15:37,040
hard work

344
00:15:37,040 --> 00:15:38,800
and of course we'd like to thank all the

345
00:15:38,800 --> 00:15:41,680
attendees

346
00:15:41,680 --> 00:15:44,240
okay uh last but not least

347
00:15:44,240 --> 00:15:46,480
we'd like to thank the foreign

348
00:15:46,480 --> 00:15:48,639
organizations for their

349
00:15:48,639 --> 00:15:51,040
generous sponsorship and other

350
00:15:51,040 --> 00:15:53,360
contributions

351
00:15:53,360 --> 00:15:56,079
the innova foundation for science

352
00:15:56,079 --> 00:15:58,880
uh kaiamori foundation of informational

353
00:15:58,880 --> 00:16:02,480
science advancement uh hitachi japan.com

354
00:16:02,480 --> 00:16:06,000
kddr research mitsubishi electric nac

355
00:16:06,000 --> 00:16:09,839
tii and finally toshiba

356
00:16:09,839 --> 00:16:10,639
yeah

357
00:16:10,639 --> 00:16:12,639
that's all enjoy the conference and

358
00:16:12,639 --> 00:16:15,120
please follow us on twitter

359
00:16:15,120 --> 00:16:20,480
uh kevin dk do you want to add something

360
00:16:21,680 --> 00:16:23,440
i don't have anything to add i think you

361
00:16:23,440 --> 00:16:24,880
pretty much covered it

362
00:16:24,880 --> 00:16:25,759
okay

363
00:16:25,759 --> 00:16:26,959
thank you

364
00:16:26,959 --> 00:16:27,759
okay

365
00:16:27,759 --> 00:16:30,160
then uh i think i'll just put an email

366
00:16:30,160 --> 00:16:32,160
address in the chat in case anybody

367
00:16:32,160 --> 00:16:35,600
needs to contact us for problems

368
00:16:35,600 --> 00:16:37,519
yeah thank you

369
00:16:37,519 --> 00:16:41,680
i think i should hand over to uh

370
00:16:42,320 --> 00:16:43,440
okay

371
00:16:43,440 --> 00:16:46,720
okay then let's start our first session

372
00:16:46,720 --> 00:16:50,720
please handle all the first session

373
00:16:54,320 --> 00:16:56,959
good morning from japan

374
00:16:56,959 --> 00:17:03,399
welcome to the first session of vkc 2022

375
00:17:03,839 --> 00:17:09,520
session is on mvc and secret sharing

376
00:17:09,520 --> 00:17:12,559
we have five talks

377
00:17:12,559 --> 00:17:14,959
each will be five minutes long

378
00:17:14,959 --> 00:17:19,839
followed by five minutes q and a

379
00:17:20,319 --> 00:17:22,000
the first favor

380
00:17:22,000 --> 00:17:22,720
is

381
00:17:22,720 --> 00:17:27,599
the usable two-round mvc known lvn

382
00:17:27,599 --> 00:17:29,039
by james

383
00:17:29,039 --> 00:17:30,880
farcek

384
00:17:30,880 --> 00:17:33,039
i

385
00:17:39,520 --> 00:17:43,160
will give a talk

386
00:17:51,840 --> 00:17:52,570
i know

387
00:17:52,570 --> 00:17:55,360
[Music]

388
00:17:55,360 --> 00:17:58,360
already

389
00:18:06,320 --> 00:18:09,559
no speaker

390
00:18:20,720 --> 00:18:22,480
oh

391
00:18:22,480 --> 00:18:24,240
it might be best to go to the second

392
00:18:24,240 --> 00:18:25,760
talk until we can figure out what's

393
00:18:25,760 --> 00:18:29,120
wrong oh yes thank you yeah we didn't

394
00:18:29,120 --> 00:18:33,918
receive any emails or something yeah

395
00:18:34,240 --> 00:18:36,080
okay

396
00:18:36,080 --> 00:18:37,280
if not

397
00:18:37,280 --> 00:18:40,480
we go on to the second session

398
00:18:40,480 --> 00:18:44,320
and i'll go into the second favor

399
00:18:44,320 --> 00:18:47,440
on the bottleneck complexity of ncc with

400
00:18:47,440 --> 00:18:49,760
correlated randomness by

401
00:18:49,760 --> 00:18:51,600
claudio orlandi

402
00:18:51,600 --> 00:18:55,280
diva ravi and peter shaw

403
00:18:55,280 --> 00:18:56,960
were

404
00:18:56,960 --> 00:18:59,919
tv i will give a talk

405
00:18:59,919 --> 00:19:02,880
um yeah hi can you hear me

406
00:19:02,880 --> 00:19:04,320
yes very well

407
00:19:04,320 --> 00:19:07,360
okay thank you uh for the introduction i

408
00:19:07,360 --> 00:19:09,520
will

409
00:19:09,520 --> 00:19:11,840
yeah

410
00:19:12,480 --> 00:19:15,440
is the screen was simple

411
00:19:15,840 --> 00:19:16,960
yes it is

412
00:19:16,960 --> 00:19:18,960
okay okay thank you

413
00:19:18,960 --> 00:19:20,320
um

414
00:19:20,320 --> 00:19:21,760
so this talk is on the water neck

415
00:19:21,760 --> 00:19:24,240
complexity of mpc with quoted randomness

416
00:19:24,240 --> 00:19:26,160
based on a joint work with claudio

417
00:19:26,160 --> 00:19:29,679
orlandy and peter scholl

418
00:19:30,000 --> 00:19:32,480
so secure multi-party computation or mpc

419
00:19:32,480 --> 00:19:34,559
allows a set of and mutually distrusting

420
00:19:34,559 --> 00:19:36,960
parties to compute a combined function

421
00:19:36,960 --> 00:19:38,960
on their private inputs and the

422
00:19:38,960 --> 00:19:41,200
guarantee is that at the end of the mpc

423
00:19:41,200 --> 00:19:42,400
protocol

424
00:19:42,400 --> 00:19:44,000
the parties get the correct function

425
00:19:44,000 --> 00:19:45,760
output and that nothing beyond the

426
00:19:45,760 --> 00:19:48,160
function output will be revealed

427
00:19:48,160 --> 00:19:50,080
now there are different ways to measure

428
00:19:50,080 --> 00:19:52,480
the efficiency of an mpc protocol and

429
00:19:52,480 --> 00:19:54,320
one such popular measure is that of

430
00:19:54,320 --> 00:19:56,640
communication complexity which measures

431
00:19:56,640 --> 00:19:58,799
the total number of bits that honest

432
00:19:58,799 --> 00:20:00,400
parties send during the protocol

433
00:20:00,400 --> 00:20:02,080
execution

434
00:20:02,080 --> 00:20:04,240
bottleneck complexity is a flavor of

435
00:20:04,240 --> 00:20:06,320
communication complexity and to

436
00:20:06,320 --> 00:20:08,400
understand that let's look at this

437
00:20:08,400 --> 00:20:11,200
protocol a where every party is sending

438
00:20:11,200 --> 00:20:13,760
a single bit to a central party

439
00:20:13,760 --> 00:20:16,320
and next there's another protocol b

440
00:20:16,320 --> 00:20:18,080
where again every party is sending a

441
00:20:18,080 --> 00:20:20,159
single bid but this time the bits are

442
00:20:20,159 --> 00:20:23,039
being sent over a chain like fashion

443
00:20:23,039 --> 00:20:25,280
now if you see that the total number of

444
00:20:25,280 --> 00:20:27,200
bits being sent in both the cases are

445
00:20:27,200 --> 00:20:29,280
the same so the communication complexity

446
00:20:29,280 --> 00:20:31,280
is actually the same but the second

447
00:20:31,280 --> 00:20:33,280
protocol seems much better in the way

448
00:20:33,280 --> 00:20:35,600
the communication is distributed because

449
00:20:35,600 --> 00:20:38,080
it's more balanced among the parties

450
00:20:38,080 --> 00:20:41,120
so to capture this the work of boyle and

451
00:20:41,120 --> 00:20:43,039
others they introduced this notion of

452
00:20:43,039 --> 00:20:45,360
bottleneck complexity which is defined

453
00:20:45,360 --> 00:20:47,679
as the maximum communication complexity

454
00:20:47,679 --> 00:20:50,559
of any party within the protocol

455
00:20:50,559 --> 00:20:52,880
so if you consider protocol a that will

456
00:20:52,880 --> 00:20:54,880
have bottleneck complexity at least of

457
00:20:54,880 --> 00:20:57,440
order n because the central party here

458
00:20:57,440 --> 00:21:00,640
is receiving n minus 1 bits but in the

459
00:21:00,640 --> 00:21:02,480
protocol b the bottleneck complexity

460
00:21:02,480 --> 00:21:04,720
would just be a constant independent of

461
00:21:04,720 --> 00:21:07,440
the number of parties because here

462
00:21:07,440 --> 00:21:09,200
each party is sending and receiving at

463
00:21:09,200 --> 00:21:10,799
most one bit

464
00:21:10,799 --> 00:21:12,880
so now if you have a situation in which

465
00:21:12,880 --> 00:21:13,919
the

466
00:21:13,919 --> 00:21:15,679
the receiving bandwidth of this central

467
00:21:15,679 --> 00:21:17,600
party becomes a bottleneck then you

468
00:21:17,600 --> 00:21:21,360
would prefer protocol b in practice

469
00:21:21,360 --> 00:21:23,840
so our focus was on settings where the

470
00:21:23,840 --> 00:21:25,840
number of parties is very large and

471
00:21:25,840 --> 00:21:27,360
that's why the goal is to design

472
00:21:27,360 --> 00:21:29,679
protocols having bottom leg complexity

473
00:21:29,679 --> 00:21:32,080
independent of the number of parties and

474
00:21:32,080 --> 00:21:34,240
we refer to such protocols as being dc

475
00:21:34,240 --> 00:21:35,280
efficient

476
00:21:35,280 --> 00:21:37,280
and such protocols were studied by this

477
00:21:37,280 --> 00:21:39,200
work of boyle and others

478
00:21:39,200 --> 00:21:40,960
but on the negative side they showed

479
00:21:40,960 --> 00:21:43,360
that it's actually impossible to get vc

480
00:21:43,360 --> 00:21:44,960
efficient protocols for general

481
00:21:44,960 --> 00:21:46,080
functions

482
00:21:46,080 --> 00:21:48,240
more specifically they showed that even

483
00:21:48,240 --> 00:21:50,640
if you don't care about security still

484
00:21:50,640 --> 00:21:53,039
you cannot get protocols having a

485
00:21:53,039 --> 00:21:55,200
bottleneck complexity sub linear in the

486
00:21:55,200 --> 00:21:58,640
number of parties for general functions

487
00:21:58,640 --> 00:22:00,640
however on the positive side they

488
00:22:00,640 --> 00:22:03,120
presented a compiler that transforms any

489
00:22:03,120 --> 00:22:05,760
insecure protocol to a secure one while

490
00:22:05,760 --> 00:22:08,240
preserving the bottleneck complexity and

491
00:22:08,240 --> 00:22:10,840
this compiler was based on

492
00:22:10,840 --> 00:22:14,159
fhe since fhe is relatively inefficient

493
00:22:14,159 --> 00:22:16,559
it's very natural to ask that if you

494
00:22:16,559 --> 00:22:18,559
restrict yourself only to specific

495
00:22:18,559 --> 00:22:20,960
functions then can you get protocols

496
00:22:20,960 --> 00:22:23,120
with low bottleneck complexity without

497
00:22:23,120 --> 00:22:24,880
relying on effigy

498
00:22:24,880 --> 00:22:27,440
and this is what we try to address in

499
00:22:27,440 --> 00:22:30,000
our work and we consider this specific

500
00:22:30,000 --> 00:22:32,159
setting where the adversary is semi

501
00:22:32,159 --> 00:22:34,799
honest and he can learn the internal

502
00:22:34,799 --> 00:22:38,080
state of up to n minus 1 corrupt parties

503
00:22:38,080 --> 00:22:40,400
and we also assume that the parties have

504
00:22:40,400 --> 00:22:43,360
access to a correlated randomness setup

505
00:22:43,360 --> 00:22:45,840
so for this setting we design pc

506
00:22:45,840 --> 00:22:48,159
efficient protocols for two function

507
00:22:48,159 --> 00:22:49,360
classes

508
00:22:49,360 --> 00:22:51,280
the first function class is abelian

509
00:22:51,280 --> 00:22:53,360
programs which can be expressed as a

510
00:22:53,360 --> 00:22:55,520
function on the sum of parties inputs

511
00:22:55,520 --> 00:22:57,200
over an abelian group

512
00:22:57,200 --> 00:22:59,440
and this is actually an expressive class

513
00:22:59,440 --> 00:23:01,360
of functions which covers applications

514
00:23:01,360 --> 00:23:04,320
like voting and linear classifiers

515
00:23:04,320 --> 00:23:06,000
and the second class is that of

516
00:23:06,000 --> 00:23:08,480
selection functions where the input of

517
00:23:08,480 --> 00:23:10,480
the first party is a selection index

518
00:23:10,480 --> 00:23:13,360
that can vary from 2 to n and the output

519
00:23:13,360 --> 00:23:15,520
is nothing but the input that the first

520
00:23:15,520 --> 00:23:18,159
party has chosen to learn

521
00:23:18,159 --> 00:23:20,400
so for both these classes we designed pc

522
00:23:20,400 --> 00:23:22,159
efficient protocols having bottleneck

523
00:23:22,159 --> 00:23:24,400
complexity independent of n

524
00:23:24,400 --> 00:23:26,720
and for this we relied on the tool of

525
00:23:26,720 --> 00:23:28,720
karbal circuits which can be built from

526
00:23:28,720 --> 00:23:30,320
one way function

527
00:23:30,320 --> 00:23:32,320
and for the second construction we also

528
00:23:32,320 --> 00:23:34,640
use additively homomorphic encryption

529
00:23:34,640 --> 00:23:37,039
that can be instantiated from standard

530
00:23:37,039 --> 00:23:39,679
number theoretical assumptions

531
00:23:39,679 --> 00:23:41,760
now uh common design feature of our

532
00:23:41,760 --> 00:23:43,440
protocols is that

533
00:23:43,440 --> 00:23:45,279
we use this chain like interaction

534
00:23:45,279 --> 00:23:47,679
pattern so like we saw in the example

535
00:23:47,679 --> 00:23:49,840
earlier this seems promising to get

536
00:23:49,840 --> 00:23:52,000
bottleneck complexity independent of the

537
00:23:52,000 --> 00:23:54,320
number of parties because here you're

538
00:23:54,320 --> 00:23:56,080
only talking to your neighbors over the

539
00:23:56,080 --> 00:23:58,000
chain and you have only constant number

540
00:23:58,000 --> 00:23:59,360
of neighbors

541
00:23:59,360 --> 00:24:01,200
but that's not enough to just design

542
00:24:01,200 --> 00:24:03,679
protocols on the chain you also need to

543
00:24:03,679 --> 00:24:05,919
ensure that the number of traversals you

544
00:24:05,919 --> 00:24:07,440
are making over the chain that should be

545
00:24:07,440 --> 00:24:09,440
independent of n and the size of the

546
00:24:09,440 --> 00:24:11,200
messages that you're sending even that

547
00:24:11,200 --> 00:24:13,360
should be independent of n so these are

548
00:24:13,360 --> 00:24:15,279
some properties that our constructions

549
00:24:15,279 --> 00:24:17,760
are satisfy and i would like to refer to

550
00:24:17,760 --> 00:24:19,840
the longer version of the talk or the

551
00:24:19,840 --> 00:24:22,480
paper for further details about this

552
00:24:22,480 --> 00:24:25,039
so with this i conclude my talk and

553
00:24:25,039 --> 00:24:28,480
thank you for your attention

554
00:24:28,720 --> 00:24:30,480
thank you divya

555
00:24:30,480 --> 00:24:32,320
and are there any questions from the

556
00:24:32,320 --> 00:24:34,720
audience

557
00:24:39,360 --> 00:24:42,400
um hello uh

558
00:24:42,400 --> 00:24:45,360
i have a question uh

559
00:24:45,360 --> 00:24:46,559
can you hear me

560
00:24:46,559 --> 00:24:47,919
yes yes

561
00:24:47,919 --> 00:24:50,400
um you would do you're minimizing the

562
00:24:50,400 --> 00:24:52,720
debunking like complexity are you also

563
00:24:52,720 --> 00:24:55,279
basically

564
00:24:55,279 --> 00:24:59,120
uh getting a pr uh making uh

565
00:24:59,120 --> 00:25:01,120
a large cir

566
00:25:01,120 --> 00:25:05,200
the message depth where you uh party a

567
00:25:05,200 --> 00:25:06,880
party three can't send a message to

568
00:25:06,880 --> 00:25:09,520
party four until he hears from party two

569
00:25:09,520 --> 00:25:11,760
and

570
00:25:12,159 --> 00:25:14,000
yeah so in the way that we are doing it

571
00:25:14,000 --> 00:25:16,400
like the number of uh rounds or like

572
00:25:16,400 --> 00:25:18,080
you're saying the depth is increasing

573
00:25:18,080 --> 00:25:19,520
because the way that we're doing it that

574
00:25:19,520 --> 00:25:20,880
there's some dependencies that you need

575
00:25:20,880 --> 00:25:23,919
to uh wait for the previous party but uh

576
00:25:23,919 --> 00:25:25,120
yeah so

577
00:25:25,120 --> 00:25:27,279
internally this is happening that

578
00:25:27,279 --> 00:25:28,640
maybe the

579
00:25:28,640 --> 00:25:31,440
number of rounds is increasing

580
00:25:31,440 --> 00:25:32,640
but that would be interesting to

581
00:25:32,640 --> 00:25:34,159
understand the trade-off between these

582
00:25:34,159 --> 00:25:36,799
two measures

583
00:25:39,360 --> 00:25:40,480
thank you

584
00:25:40,480 --> 00:25:42,799
yeah

585
00:25:42,799 --> 00:25:44,080
okay

586
00:25:44,080 --> 00:25:46,879
other questions

587
00:25:55,039 --> 00:25:57,720
so the frivolous investment faq

588
00:25:57,720 --> 00:25:59,039
[Music]

589
00:25:59,039 --> 00:26:02,000
uh also considers only semi honest

590
00:26:02,000 --> 00:26:03,679
adversaries

591
00:26:03,679 --> 00:26:05,840
uh so they have two uh kinds of

592
00:26:05,840 --> 00:26:08,320
protocols one of them was for the

593
00:26:08,320 --> 00:26:11,120
semi-malicious like it's a a little bit

594
00:26:11,120 --> 00:26:13,279
stronger than semi honest in which uh

595
00:26:13,279 --> 00:26:15,039
maybe you can pick the randomness in a

596
00:26:15,039 --> 00:26:16,400
bad way but still you follow the

597
00:26:16,400 --> 00:26:18,880
protocol steps and then they also had

598
00:26:18,880 --> 00:26:20,080
like uh

599
00:26:20,080 --> 00:26:22,559
they also made it uh they compiled into

600
00:26:22,559 --> 00:26:24,880
a malicious version also so they had

601
00:26:24,880 --> 00:26:27,919
even a malicious compiler yes

602
00:26:27,919 --> 00:26:29,279
okay thank you

603
00:26:29,279 --> 00:26:31,520
yeah

604
00:26:32,000 --> 00:26:36,360
other questions from the audience

605
00:26:40,320 --> 00:26:43,200
uh okay uh please

606
00:26:43,200 --> 00:26:46,559
feel free to type your question on the

607
00:26:46,559 --> 00:26:49,200
in the chat

608
00:26:49,200 --> 00:26:53,080
and then

609
00:26:54,000 --> 00:26:55,919
we can

610
00:26:55,919 --> 00:26:58,799
discuss later

611
00:26:59,039 --> 00:27:02,000
so okay thank you

612
00:27:02,000 --> 00:27:05,159
thank you

613
00:27:06,720 --> 00:27:10,000
the next favorite blue communication 140

614
00:27:10,000 --> 00:27:13,279
triple generation full feed from

615
00:27:13,279 --> 00:27:15,440
ring ltn

616
00:27:15,440 --> 00:27:16,799
by

617
00:27:16,799 --> 00:27:21,039
daviano aurang and vita

618
00:27:21,520 --> 00:27:23,600
will give a talk

619
00:27:23,600 --> 00:27:27,360
hi let me share the slides

620
00:27:31,039 --> 00:27:34,520
can you see them

621
00:27:35,360 --> 00:27:36,720
yes we can

622
00:27:36,720 --> 00:27:38,080
perfect

623
00:27:38,080 --> 00:27:40,399
so hi everybody my name is damiano and

624
00:27:40,399 --> 00:27:42,559
now i'm going to present our project so

625
00:27:42,559 --> 00:27:44,399
the main contribution is the design of

626
00:27:44,399 --> 00:27:46,080
the first n party offline phase for

627
00:27:46,080 --> 00:27:48,399
speeds with sublinear communication in

628
00:27:48,399 --> 00:27:50,000
the amount of generated material and

629
00:27:50,000 --> 00:27:52,159
concrete efficiency in particular we

630
00:27:52,159 --> 00:27:54,159
generate an authenticated beaver triples

631
00:27:54,159 --> 00:27:56,320
with o square root of and communication

632
00:27:56,320 --> 00:27:58,080
and we obtain this result by designing

633
00:27:58,080 --> 00:28:00,080
the first practical mrt pcg for

634
00:28:00,080 --> 00:28:02,240
authenticated viewer triples and the

635
00:28:02,240 --> 00:28:04,640
seed size of this pcg is or square root

636
00:28:04,640 --> 00:28:05,600
of n

637
00:28:05,600 --> 00:28:07,440
so authenticated beaver triples are a

638
00:28:07,440 --> 00:28:09,760
particular type of correlated randomness

639
00:28:09,760 --> 00:28:11,840
that is needed in npc protocols like

640
00:28:11,840 --> 00:28:14,000
speeds usually we need a lot of them and

641
00:28:14,000 --> 00:28:16,480
their generation is rather expensive so

642
00:28:16,480 --> 00:28:18,720
our setting is a large prime field f and

643
00:28:18,720 --> 00:28:20,559
we have n parties holding a secret

644
00:28:20,559 --> 00:28:22,880
sharing of a random mech key alpha

645
00:28:22,880 --> 00:28:24,720
an authenticated beaver triple with

646
00:28:24,720 --> 00:28:26,559
respect to alpha is a random tuple of

647
00:28:26,559 --> 00:28:28,080
secret shared elements as the one that

648
00:28:28,080 --> 00:28:30,080
you see on the screen so we have x and y

649
00:28:30,080 --> 00:28:32,320
that are uniform over f we have a secret

650
00:28:32,320 --> 00:28:33,679
sharing of their product and then we

651
00:28:33,679 --> 00:28:35,840
have three max x times alpha white and z

652
00:28:35,840 --> 00:28:38,559
alpha and x times y times alpha

653
00:28:38,559 --> 00:28:40,159
so we want to generate a lot of

654
00:28:40,159 --> 00:28:42,080
authenticated beaver triples using a

655
00:28:42,080 --> 00:28:43,679
tool called pseudorandom correlation

656
00:28:43,679 --> 00:28:45,600
generator or pcg

657
00:28:45,600 --> 00:28:47,440
this is an unparty construction that

658
00:28:47,440 --> 00:28:49,919
specifies how to generate and small

659
00:28:49,919 --> 00:28:52,480
seeds one for each party and when these

660
00:28:52,480 --> 00:28:54,240
seeds are distributed everybody can

661
00:28:54,240 --> 00:28:56,240
locally expand them obtaining a large

662
00:28:56,240 --> 00:28:58,320
amount of authenticated beaver triples

663
00:28:58,320 --> 00:29:00,159
without any communication

664
00:29:00,159 --> 00:29:02,720
so the good things of these pcgs is that

665
00:29:02,720 --> 00:29:04,320
usually it is not difficult to

666
00:29:04,320 --> 00:29:06,000
substitute the trusted dealer with an

667
00:29:06,000 --> 00:29:08,240
npc protocol with low communication and

668
00:29:08,240 --> 00:29:10,159
that's because the size of the seeds is

669
00:29:10,159 --> 00:29:11,200
low

670
00:29:11,200 --> 00:29:13,760
so when we compose these protocols with

671
00:29:13,760 --> 00:29:15,679
the non-interactive expansion phase we

672
00:29:15,679 --> 00:29:17,679
immediately have protocols that provide

673
00:29:17,679 --> 00:29:19,600
the parties with the large amount of

674
00:29:19,600 --> 00:29:21,760
authenticated bigger triples with low

675
00:29:21,760 --> 00:29:24,000
communication

676
00:29:24,000 --> 00:29:26,559
the security of our uh construction

677
00:29:26,559 --> 00:29:29,039
relies on the ring lpn assumption uh our

678
00:29:29,039 --> 00:29:30,640
setting is a ring r which is the

679
00:29:30,640 --> 00:29:32,320
quotient between the polynomial ring

680
00:29:32,320 --> 00:29:34,480
over f and the ideas generated by a

681
00:29:34,480 --> 00:29:36,880
polynomial f of x we also have two

682
00:29:36,880 --> 00:29:38,960
parameters the first one is c which is a

683
00:29:38,960 --> 00:29:41,120
small constant and then we have t that

684
00:29:41,120 --> 00:29:43,120
is roughly the size of the security

685
00:29:43,120 --> 00:29:44,720
parameter lambda

686
00:29:44,720 --> 00:29:47,039
we also have a distribution hwt that

687
00:29:47,039 --> 00:29:49,120
outputs a random dispatch polynomial in

688
00:29:49,120 --> 00:29:49,840
r

689
00:29:49,840 --> 00:29:51,760
so now consider pairs as the one that

690
00:29:51,760 --> 00:29:54,080
you see on the screen so we have a that

691
00:29:54,080 --> 00:29:56,640
is uniformly distributed over r to the c

692
00:29:56,640 --> 00:29:58,000
and then we have the inner product

693
00:29:58,000 --> 00:30:00,799
between a and another vector e where e

694
00:30:00,799 --> 00:30:03,919
is sampled according to hwt to the c so

695
00:30:03,919 --> 00:30:05,919
in particular e is a c dimensional

696
00:30:05,919 --> 00:30:07,760
vector and each entry is a t sparse

697
00:30:07,760 --> 00:30:08,960
polynomial

698
00:30:08,960 --> 00:30:10,399
now the ring will be an assumption

699
00:30:10,399 --> 00:30:12,559
states that even if a is known the inner

700
00:30:12,559 --> 00:30:14,960
product looks random over r

701
00:30:14,960 --> 00:30:17,279
so in order to design a pcg for

702
00:30:17,279 --> 00:30:19,600
authenticated beta triples we had to

703
00:30:19,600 --> 00:30:21,679
find a way to compress n of them into

704
00:30:21,679 --> 00:30:23,760
small seeds so the first thing that we

705
00:30:23,760 --> 00:30:24,480
do

706
00:30:24,480 --> 00:30:26,880
is uh to instantiate the ring lpn

707
00:30:26,880 --> 00:30:28,880
assumption over a ring r that is

708
00:30:28,880 --> 00:30:31,279
isomorphic to f to the n and f to the n

709
00:30:31,279 --> 00:30:33,520
is a ring with point wise addition and

710
00:30:33,520 --> 00:30:35,760
multiplication so thanks to this

711
00:30:35,760 --> 00:30:37,840
isomorphism it is possible to convert

712
00:30:37,840 --> 00:30:39,840
the n authenticated bigger triples into

713
00:30:39,840 --> 00:30:42,159
a single one but over the ring are and

714
00:30:42,159 --> 00:30:44,159
what i mean is that now x and y are

715
00:30:44,159 --> 00:30:46,399
uniformly random over r

716
00:30:46,399 --> 00:30:48,480
so our goal now is to compress this

717
00:30:48,480 --> 00:30:50,960
single ring bigger triple and we are

718
00:30:50,960 --> 00:30:53,200
going to do this term after term and we

719
00:30:53,200 --> 00:30:54,720
start from x and y

720
00:30:54,720 --> 00:30:57,440
so as i said these are uniform over r

721
00:30:57,440 --> 00:30:59,200
so suppose that there is a random oracle

722
00:30:59,200 --> 00:31:00,960
that provides the parties with a random

723
00:31:00,960 --> 00:31:03,120
element a in r to the c

724
00:31:03,120 --> 00:31:05,600
each bar dpi samples two vectors of

725
00:31:05,600 --> 00:31:08,159
sparse polynomials ui and vi and then it

726
00:31:08,159 --> 00:31:10,799
sets its share of x to be x i the inner

727
00:31:10,799 --> 00:31:13,039
product between a and ui and the share

728
00:31:13,039 --> 00:31:15,519
of y to be y i the inner product between

729
00:31:15,519 --> 00:31:16,799
a and b i

730
00:31:16,799 --> 00:31:19,440
so by during lpn assumption x i a y and

731
00:31:19,440 --> 00:31:22,240
y i look random but now their entropy is

732
00:31:22,240 --> 00:31:24,080
low because everything is defined in

733
00:31:24,080 --> 00:31:26,720
terms of sparse polynomials

734
00:31:26,720 --> 00:31:29,120
next we compress the remaining terms

735
00:31:29,120 --> 00:31:30,799
it turns out that compressing the first

736
00:31:30,799 --> 00:31:32,159
three that you see on the slide is

737
00:31:32,159 --> 00:31:33,840
equivalent to compressing two-part

738
00:31:33,840 --> 00:31:36,240
secret sharings of the material you see

739
00:31:36,240 --> 00:31:37,360
on the screen

740
00:31:37,360 --> 00:31:38,960
whereas compressing the last one is

741
00:31:38,960 --> 00:31:40,640
equivalent to compressing three-party

742
00:31:40,640 --> 00:31:42,399
secret sharings of

743
00:31:42,399 --> 00:31:44,559
what you see on the right

744
00:31:44,559 --> 00:31:48,159
so since everything here is uh described

745
00:31:48,159 --> 00:31:50,640
in terms of sparse polynomials it is

746
00:31:50,640 --> 00:31:53,440
possible to compress this material using

747
00:31:53,440 --> 00:31:56,000
a tool called a dpf or distributed point

748
00:31:56,000 --> 00:31:57,039
functions

749
00:31:57,039 --> 00:31:59,600
for the three element on the left we

750
00:31:59,600 --> 00:32:01,919
just need two party dpfs so the size of

751
00:32:01,919 --> 00:32:03,760
the compressed material is logarithmic

752
00:32:03,760 --> 00:32:06,159
end whereas for the thing on the right

753
00:32:06,159 --> 00:32:08,080
we need three part edp apps that are not

754
00:32:08,080 --> 00:32:09,679
as efficient and so the size of the

755
00:32:09,679 --> 00:32:11,679
compressed material is all square root

756
00:32:11,679 --> 00:32:12,720
of

757
00:32:12,720 --> 00:32:14,640
here also we had some troubles because

758
00:32:14,640 --> 00:32:17,120
we had to adapt the known construction

759
00:32:17,120 --> 00:32:19,840
for three party and two large prime

760
00:32:19,840 --> 00:32:21,760
fields and this turned out to be very

761
00:32:21,760 --> 00:32:22,960
difficult

762
00:32:22,960 --> 00:32:26,000
so in the end we had to

763
00:32:26,000 --> 00:32:28,960
allow some leakage but luckily our pcg

764
00:32:28,960 --> 00:32:30,880
is secure anyway

765
00:32:30,880 --> 00:32:33,519
so finally we designed an actively

766
00:32:33,519 --> 00:32:35,039
secure protocol that generates and

767
00:32:35,039 --> 00:32:36,320
distributes

768
00:32:36,320 --> 00:32:38,320
the siege of the pcg with low

769
00:32:38,320 --> 00:32:39,919
communication and the total

770
00:32:39,919 --> 00:32:42,080
communication complexity scales as the

771
00:32:42,080 --> 00:32:44,640
square root of n but also as the fourth

772
00:32:44,640 --> 00:32:47,120
power of the number of parties

773
00:32:47,120 --> 00:32:49,600
the computational complexity scales as n

774
00:32:49,600 --> 00:32:50,880
times log n

775
00:32:50,880 --> 00:32:53,120
and for n equal to 2 to the 20 the

776
00:32:53,120 --> 00:32:54,799
protocol is practical based on

777
00:32:54,799 --> 00:32:57,600
estimations and the communication

778
00:32:57,600 --> 00:32:59,679
complexity is roughly 10 times better

779
00:32:59,679 --> 00:33:01,679
than overdrive the best solution known

780
00:33:01,679 --> 00:33:03,039
so far

781
00:33:03,039 --> 00:33:04,960
so that's all and thank you for the

782
00:33:04,960 --> 00:33:07,519
internship

783
00:33:09,519 --> 00:33:10,480
and

784
00:33:10,480 --> 00:33:12,640
thank you damian

785
00:33:12,640 --> 00:33:14,320
and are there any questions from the

786
00:33:14,320 --> 00:33:17,320
audience

787
00:33:30,000 --> 00:33:31,519
please figure

788
00:33:31,519 --> 00:33:35,080
if we have any

789
00:33:48,080 --> 00:33:51,080
um

790
00:34:00,799 --> 00:34:04,000
so the the hardness of ring and fin is

791
00:34:04,000 --> 00:34:08,719
lead to some um worst case um

792
00:34:08,719 --> 00:34:10,239
so

793
00:34:10,239 --> 00:34:12,050
that some kind of life's problem

794
00:34:12,050 --> 00:34:14,159
[Music]

795
00:34:14,159 --> 00:34:15,280
yeah

796
00:34:15,280 --> 00:34:17,119
it was a an assumption that was

797
00:34:17,119 --> 00:34:20,639
introduced in another paper by

798
00:34:20,639 --> 00:34:23,839
yeah boil itself crypto 2020

799
00:34:23,839 --> 00:34:25,440
so yeah

800
00:34:25,440 --> 00:34:28,079
i didn't work on the analysis so i

801
00:34:28,079 --> 00:34:29,679
wouldn't i'm not able to answer the

802
00:34:29,679 --> 00:34:32,679
question

803
00:34:36,639 --> 00:34:39,440
other questions

804
00:34:47,199 --> 00:34:51,040
okay thank you darian yeah

805
00:34:52,719 --> 00:34:56,079
the next favor is storing and retrieving

806
00:34:56,079 --> 00:34:58,480
secrets on the blockchain

807
00:34:58,480 --> 00:35:00,720
like

808
00:35:00,800 --> 00:35:03,800
our

809
00:35:11,040 --> 00:35:15,240
elisa will give a talk

810
00:35:16,079 --> 00:35:21,079
um hi i'll try to share my screen

811
00:35:36,079 --> 00:35:37,839
um can you guys hear me

812
00:35:37,839 --> 00:35:40,480
can you guess the slides yes

813
00:35:40,480 --> 00:35:42,160
yes

814
00:35:42,160 --> 00:35:43,040
okay

815
00:35:43,040 --> 00:35:45,040
okay hi everyone i am lisa um thank you

816
00:35:45,040 --> 00:35:47,119
for the introduction and uh let's dive

817
00:35:47,119 --> 00:35:49,119
right in

818
00:35:49,119 --> 00:35:51,440
so um one of the contributions and our

819
00:35:51,440 --> 00:35:53,760
work is designing a new secret sharing

820
00:35:53,760 --> 00:35:54,720
scheme

821
00:35:54,720 --> 00:35:57,280
um recall that a secret sharing scheme

822
00:35:57,280 --> 00:36:00,800
with threshold t enables a party to

823
00:36:00,800 --> 00:36:02,800
distribute shares of a secret to some

824
00:36:02,800 --> 00:36:04,320
end parties

825
00:36:04,320 --> 00:36:06,160
it must be possible to reconstruct the

826
00:36:06,160 --> 00:36:09,440
secret using t plus one chairs and at

827
00:36:09,440 --> 00:36:12,480
the same time an adversary in

828
00:36:12,480 --> 00:36:15,119
control of less than t plus one parties

829
00:36:15,119 --> 00:36:17,200
who hold these shares must learn no

830
00:36:17,200 --> 00:36:20,560
information about the secret

831
00:36:20,800 --> 00:36:23,440
while seeker training is great there are

832
00:36:23,440 --> 00:36:25,440
cases where traditional schemes seem

833
00:36:25,440 --> 00:36:26,640
insufficient

834
00:36:26,640 --> 00:36:28,960
for example when secrets must be stored

835
00:36:28,960 --> 00:36:31,520
for a long time

836
00:36:31,520 --> 00:36:33,520
it seems reasonable that the committee

837
00:36:33,520 --> 00:36:36,240
the set of parties who hold the secrets

838
00:36:36,240 --> 00:36:38,320
can change

839
00:36:38,320 --> 00:36:40,400
to achieve security in

840
00:36:40,400 --> 00:36:42,720
the setting dynamic proactive secret

841
00:36:42,720 --> 00:36:45,280
sharing schemes are used

842
00:36:45,280 --> 00:36:47,920
eps schemes typically consider consists

843
00:36:47,920 --> 00:36:50,560
of three algorithms uh set up

844
00:36:50,560 --> 00:36:52,880
um this is the algorithm their clients

845
00:36:52,880 --> 00:36:55,760
start a secret uh handle

846
00:36:55,760 --> 00:36:57,359
where the

847
00:36:57,359 --> 00:36:59,280
clients are where the

848
00:36:59,280 --> 00:37:01,280
secrets are passed from

849
00:37:01,280 --> 00:37:03,119
one set of parties called the committee

850
00:37:03,119 --> 00:37:04,800
to the other set of parties so disney

851
00:37:04,800 --> 00:37:06,000
committee

852
00:37:06,000 --> 00:37:06,839
and

853
00:37:06,839 --> 00:37:08,960
reconstruction where committee members

854
00:37:08,960 --> 00:37:11,440
interact with the user to

855
00:37:11,440 --> 00:37:15,599
let this user obtain the secret

856
00:37:15,839 --> 00:37:19,280
in our work we introduced febdpss

857
00:37:19,280 --> 00:37:22,640
which stands for fast page dpss and it

858
00:37:22,640 --> 00:37:25,520
is a highly optimized batch dpss scheme

859
00:37:25,520 --> 00:37:27,599
it has both very good communication

860
00:37:27,599 --> 00:37:30,000
complexity and practical efficiency

861
00:37:30,000 --> 00:37:32,640
parameters

862
00:37:33,040 --> 00:37:35,760
in addition to fmdpss

863
00:37:35,760 --> 00:37:39,119
proposed either um evap is a blockchain

864
00:37:39,119 --> 00:37:41,680
based pss application which can be seen

865
00:37:41,680 --> 00:37:44,160
as an alternative to extractable witness

866
00:37:44,160 --> 00:37:46,000
encryption

867
00:37:46,000 --> 00:37:48,320
um witness encryption allows one to

868
00:37:48,320 --> 00:37:50,240
encrypt a message with respect to a

869
00:37:50,240 --> 00:37:52,000
particular

870
00:37:52,000 --> 00:37:54,560
np search problem instance if a user

871
00:37:54,560 --> 00:37:56,320
knows a witness then she can decrypt the

872
00:37:56,320 --> 00:37:58,480
cipher text

873
00:37:58,480 --> 00:38:00,240
witness encryption is

874
00:38:00,240 --> 00:38:02,079
called extractable

875
00:38:02,079 --> 00:38:03,280
if it additionally provides

876
00:38:03,280 --> 00:38:06,079
extractability which is a strong

877
00:38:06,079 --> 00:38:08,000
security property

878
00:38:08,000 --> 00:38:09,280
note that there are numerous

879
00:38:09,280 --> 00:38:11,599
applications which require this property

880
00:38:11,599 --> 00:38:14,320
but unfortunately um there are known

881
00:38:14,320 --> 00:38:16,839
practical extractable witness encryption

882
00:38:16,839 --> 00:38:19,440
constructions and no constructions based

883
00:38:19,440 --> 00:38:22,640
on standard assumptions

884
00:38:23,200 --> 00:38:25,200
in this talk we will first look into the

885
00:38:25,200 --> 00:38:27,200
main ideas behind our 50 business

886
00:38:27,200 --> 00:38:28,400
construction

887
00:38:28,400 --> 00:38:31,599
and then i will introduce europe and

888
00:38:31,599 --> 00:38:33,359
we will briefly discuss

889
00:38:33,359 --> 00:38:37,040
the applications of ebay

890
00:38:38,800 --> 00:38:42,160
in um wpss we consider a computationally

891
00:38:42,160 --> 00:38:44,640
bounded fully malicious

892
00:38:44,640 --> 00:38:47,440
adversary who can adaptively choose

893
00:38:47,440 --> 00:38:50,880
artists to corrupt at any time

894
00:38:50,880 --> 00:38:53,280
and the adversary is allowed to corrupt

895
00:38:53,280 --> 00:38:55,359
less than half of each committee

896
00:38:55,359 --> 00:38:57,440
note that the hand office is

897
00:38:57,440 --> 00:39:00,000
particularly challenging as during this

898
00:39:00,000 --> 00:39:02,640
phase not only tea but two tea parties

899
00:39:02,640 --> 00:39:04,079
can be corrupted

900
00:39:04,079 --> 00:39:05,839
um tea parties from the old community

901
00:39:05,839 --> 00:39:07,520
and tea parties are from the new

902
00:39:07,520 --> 00:39:10,000
committee

903
00:39:11,040 --> 00:39:13,599
so let's first start with the on this

904
00:39:13,599 --> 00:39:15,680
case where parties follow the protocol

905
00:39:15,680 --> 00:39:18,320
but might might try to gain some extra

906
00:39:18,320 --> 00:39:21,119
information about the secret

907
00:39:21,119 --> 00:39:24,560
note that 50 pss is based on xiaomi

908
00:39:24,560 --> 00:39:26,480
secret training

909
00:39:26,480 --> 00:39:28,480
which in essence is a degree t

910
00:39:28,480 --> 00:39:29,680
polynomial

911
00:39:29,680 --> 00:39:32,560
where the secret is imported at point

912
00:39:32,560 --> 00:39:33,599
zero

913
00:39:33,599 --> 00:39:39,599
and the ice share is endorsed at point i

914
00:39:41,680 --> 00:39:44,800
the foundational idea in our 50 pss

915
00:39:44,800 --> 00:39:47,440
construction is what we call coupled

916
00:39:47,440 --> 00:39:48,480
sharings

917
00:39:48,480 --> 00:39:50,400
by this we mean two sharings which have

918
00:39:50,400 --> 00:39:51,920
the same value

919
00:39:51,920 --> 00:39:53,839
even though the particular shares which

920
00:39:53,839 --> 00:39:55,520
leads to this value

921
00:39:55,520 --> 00:39:59,520
might be different for the two sharings

922
00:39:59,760 --> 00:40:01,359
now to refresh

923
00:40:01,359 --> 00:40:02,800
a

924
00:40:02,800 --> 00:40:05,440
sharing of some secret s the new

925
00:40:05,440 --> 00:40:09,119
committee can prepare a coupled sharing

926
00:40:09,119 --> 00:40:12,240
of aiding from random value r

927
00:40:12,240 --> 00:40:14,880
the old community will receive shares of

928
00:40:14,880 --> 00:40:16,960
one part of the couple cherry

929
00:40:16,960 --> 00:40:18,880
and the new committee will receive the

930
00:40:18,880 --> 00:40:21,280
shares of the other project

931
00:40:21,280 --> 00:40:23,280
now what you can do is the old committee

932
00:40:23,280 --> 00:40:26,720
can now reconstruct and publish s plus r

933
00:40:26,720 --> 00:40:28,720
and the new committee can set the u

934
00:40:28,720 --> 00:40:31,920
sharing to be s plus r minus the sharing

935
00:40:31,920 --> 00:40:34,720
of the other part of the couple chair

936
00:40:34,720 --> 00:40:39,040
since both parts of the couple sharing

937
00:40:39,200 --> 00:40:41,119
lead to the same value are

938
00:40:41,119 --> 00:40:41,839
the

939
00:40:41,839 --> 00:40:44,240
resulting sharing is still the sharing

940
00:40:44,240 --> 00:40:47,200
of the secret s

941
00:40:48,720 --> 00:40:50,720
in addition to introducing the couple

942
00:40:50,720 --> 00:40:53,680
chains we found ways to uh prepare these

943
00:40:53,680 --> 00:40:56,480
sharings efficiently and also to deal

944
00:40:56,480 --> 00:40:59,760
with the um fully malicious case so

945
00:40:59,760 --> 00:41:01,200
in this case for example the project

946
00:41:01,200 --> 00:41:03,839
would distribute an inconsistent degree

947
00:41:03,839 --> 00:41:07,040
t-sharing or could distribute um an

948
00:41:07,040 --> 00:41:09,760
invalid couple chain where like the

949
00:41:09,760 --> 00:41:11,520
parts of the double chain do not

950
00:41:11,520 --> 00:41:14,720
correspond to the same value

951
00:41:16,720 --> 00:41:19,040
um solving these questions allowed us to

952
00:41:19,040 --> 00:41:22,400
achieve a dpss scheme which

953
00:41:22,400 --> 00:41:24,480
among the schemes which provide

954
00:41:24,480 --> 00:41:26,480
the highest possible adversarial

955
00:41:26,480 --> 00:41:28,960
threshold of one half

956
00:41:28,960 --> 00:41:30,800
has the best

957
00:41:30,800 --> 00:41:33,440
communication complex parameters

958
00:41:33,440 --> 00:41:34,640
um

959
00:41:34,640 --> 00:41:37,760
specifically um in our case

960
00:41:37,760 --> 00:41:40,400
our amortized complexity is open

961
00:41:40,400 --> 00:41:42,880
while the state of the art chop has

962
00:41:42,880 --> 00:41:44,560
opened squared

963
00:41:44,560 --> 00:41:46,400
both schemes achieve the same amount of

964
00:41:46,400 --> 00:41:49,640
dice complexity

965
00:41:49,680 --> 00:41:52,240
in addition our evaluation shows that

966
00:41:52,240 --> 00:41:55,280
fab dpss is also completely efficient

967
00:41:55,280 --> 00:41:57,680
all operations this is the handle phase

968
00:41:57,680 --> 00:41:59,839
all operations

969
00:41:59,839 --> 00:42:02,000
complete in seconds and it outperforms

970
00:42:02,000 --> 00:42:05,040
the state-of-the-art job by over six

971
00:42:05,040 --> 00:42:07,359
times

972
00:42:08,079 --> 00:42:10,400
and as i mentioned before in addition to

973
00:42:10,400 --> 00:42:13,839
50 pss we propose even an alternative to

974
00:42:13,839 --> 00:42:16,000
extractable with this encryption

975
00:42:16,000 --> 00:42:17,599
specifically we asked the following

976
00:42:17,599 --> 00:42:18,800
question

977
00:42:18,800 --> 00:42:21,200
can users store secrets and specify

978
00:42:21,200 --> 00:42:23,440
release conditions for them such that

979
00:42:23,440 --> 00:42:25,599
possibly other users can retrieve these

980
00:42:25,599 --> 00:42:28,400
secrets if and only if they are able to

981
00:42:28,400 --> 00:42:31,839
satisfy the release condition

982
00:42:32,319 --> 00:42:34,800
and obviously our goal is to do so

983
00:42:34,800 --> 00:42:38,960
without relying on trusted third parties

984
00:42:41,119 --> 00:42:43,040
an evap system consists of three

985
00:42:43,040 --> 00:42:45,680
subroutines secret store secret handoff

986
00:42:45,680 --> 00:42:48,160
and secret rules

987
00:42:48,160 --> 00:42:50,000
these are very similar to the algorithms

988
00:42:50,000 --> 00:42:53,040
used by dpss with the difference that a

989
00:42:53,040 --> 00:42:55,040
release condition is specified by the

990
00:42:55,040 --> 00:42:58,960
user who is depositing the cigarette and

991
00:42:58,960 --> 00:43:01,680
the user who is requesting the secret is

992
00:43:01,680 --> 00:43:04,400
able to attribute if and only if

993
00:43:04,400 --> 00:43:08,480
the release condition is satisfied

994
00:43:08,480 --> 00:43:11,599
note that while we can use a dpss scheme

995
00:43:11,599 --> 00:43:14,400
as a base for our given construction you

996
00:43:14,400 --> 00:43:15,760
need to solve a few additional

997
00:43:15,760 --> 00:43:18,160
challenges to obtain a secure evap

998
00:43:18,160 --> 00:43:19,680
scheme

999
00:43:19,680 --> 00:43:22,319
for example it is not immediately clear

1000
00:43:22,319 --> 00:43:24,800
how users can prove that

1001
00:43:24,800 --> 00:43:26,880
the release condition for a secret is

1002
00:43:26,880 --> 00:43:28,079
satisfied

1003
00:43:28,079 --> 00:43:29,599
without revealing the proof to the

1004
00:43:29,599 --> 00:43:31,520
malicious miners who could then use it

1005
00:43:31,520 --> 00:43:34,000
to also obtain the secret

1006
00:43:34,000 --> 00:43:37,200
um please refer to our papers to see how

1007
00:43:37,200 --> 00:43:38,079
we

1008
00:43:38,079 --> 00:43:41,599
solve these issues

1009
00:43:41,599 --> 00:43:43,680
and last but not least we use evap to

1010
00:43:43,680 --> 00:43:45,520
enable a bunch of very exciting

1011
00:43:45,520 --> 00:43:47,760
applications which typically rely on

1012
00:43:47,760 --> 00:43:50,079
extractable witnessing fiction

1013
00:43:50,079 --> 00:43:52,800
uh for example they explain how evap can

1014
00:43:52,800 --> 00:43:55,119
be used to achieve time look encryption

1015
00:43:55,119 --> 00:43:57,119
which allows one to encrypt a message

1016
00:43:57,119 --> 00:43:59,760
such as it can be decrypted if and only

1017
00:43:59,760 --> 00:44:01,200
if um

1018
00:44:01,200 --> 00:44:04,400
a certain deadline has passed

1019
00:44:04,400 --> 00:44:06,400
eric can also be used to implement the

1020
00:44:06,400 --> 00:44:08,880
so-called deadman's switch

1021
00:44:08,880 --> 00:44:11,680
which under certain conditions triggers

1022
00:44:11,680 --> 00:44:13,680
a process such as making or deleting

1023
00:44:13,680 --> 00:44:16,319
some secret data

1024
00:44:16,319 --> 00:44:18,240
other applications are included for

1025
00:44:18,240 --> 00:44:20,640
exchange and fairly busy

1026
00:44:20,640 --> 00:44:23,760
one-time programs and more

1027
00:44:23,760 --> 00:44:25,119
um

1028
00:44:25,119 --> 00:44:27,119
that is all i have um thank you so much

1029
00:44:27,119 --> 00:44:29,839
for your attention

1030
00:44:31,119 --> 00:44:32,720
oh

1031
00:44:32,720 --> 00:44:34,800
thank you erisa

1032
00:44:34,800 --> 00:44:36,319
are there any questions from the

1033
00:44:36,319 --> 00:44:39,319
audience

1034
00:44:57,839 --> 00:45:00,319
so you use blockchain

1035
00:45:00,319 --> 00:45:02,319
so

1036
00:45:02,319 --> 00:45:04,240
i guess a

1037
00:45:04,240 --> 00:45:06,240
smart contract functionality of

1038
00:45:06,240 --> 00:45:07,520
blockchain

1039
00:45:07,520 --> 00:45:10,319
is used right

1040
00:45:11,200 --> 00:45:13,040
so for this one we do not really use

1041
00:45:13,040 --> 00:45:17,079
like the smart contract functionality

1042
00:45:18,160 --> 00:45:20,160
so for our ebook construction we use

1043
00:45:20,160 --> 00:45:25,119
basically dpss and um to prove the uh um

1044
00:45:25,119 --> 00:45:27,119
um that the release condition is

1045
00:45:27,119 --> 00:45:29,440
satisfied we use a certain kind of a

1046
00:45:29,440 --> 00:45:31,599
music with like a couple of additional

1047
00:45:31,599 --> 00:45:33,359
details to make sure that the music can

1048
00:45:33,359 --> 00:45:36,240
cannot be reduced

1049
00:45:38,880 --> 00:45:40,400
okay

1050
00:45:40,400 --> 00:45:44,599
other questions from the audience

1051
00:45:53,599 --> 00:45:57,880
okay thank you sir

1052
00:46:00,480 --> 00:46:01,520
the next

1053
00:46:01,520 --> 00:46:05,200
talk has favored cnn efficiencies and

1054
00:46:05,200 --> 00:46:07,119
its applications

1055
00:46:07,119 --> 00:46:10,240
by folsom evokes

1056
00:46:10,240 --> 00:46:13,839
and rafael ostrovsky

1057
00:46:13,839 --> 00:46:16,720
we'll do a talk

1058
00:46:17,280 --> 00:46:19,520
hi

1059
00:46:26,000 --> 00:46:29,520
okay um thank you as can you hear me and

1060
00:46:29,520 --> 00:46:30,880
see my screen okay

1061
00:46:30,880 --> 00:46:32,240
yes we can

1062
00:46:32,240 --> 00:46:33,520
thank you

1063
00:46:33,520 --> 00:46:35,359
uh yeah so i'm paul i'm here to talk

1064
00:46:35,359 --> 00:46:37,599
about joint work with al khusha levitz

1065
00:46:37,599 --> 00:46:39,599
and rafael estrowski

1066
00:46:39,599 --> 00:46:43,680
about cnf fss and its applications

1067
00:46:43,680 --> 00:46:44,720
so i'll

1068
00:46:44,720 --> 00:46:46,560
give a short background on on those two

1069
00:46:46,560 --> 00:46:49,760
things fss and cnf key sharing

1070
00:46:49,760 --> 00:46:52,160
then talk about our two applications

1071
00:46:52,160 --> 00:46:56,000
briefly and conclude with a summary

1072
00:46:56,000 --> 00:46:58,000
so function secret sharing we saw a

1073
00:46:58,000 --> 00:46:59,280
little bit

1074
00:46:59,280 --> 00:47:01,119
about it in a previous talk

1075
00:47:01,119 --> 00:47:05,520
um so it was created in 2014 by gobo and

1076
00:47:05,520 --> 00:47:06,800
ashai

1077
00:47:06,800 --> 00:47:09,119
and was meant to extend the notion of of

1078
00:47:09,119 --> 00:47:11,359
sharing a secret value

1079
00:47:11,359 --> 00:47:12,960
so we're familiar with secret sharing

1080
00:47:12,960 --> 00:47:15,280
from from the various talks today so in

1081
00:47:15,280 --> 00:47:17,040
function secret sharing the idea is

1082
00:47:17,040 --> 00:47:19,359
instead of having a single value we now

1083
00:47:19,359 --> 00:47:21,520
are sharing a function across multiple

1084
00:47:21,520 --> 00:47:22,960
parties

1085
00:47:22,960 --> 00:47:24,960
such that each party doesn't understand

1086
00:47:24,960 --> 00:47:27,040
what the function is by itself but if

1087
00:47:27,040 --> 00:47:28,720
approved groups get together and combine

1088
00:47:28,720 --> 00:47:30,079
their secrets

1089
00:47:30,079 --> 00:47:33,599
they can reconstruct the function

1090
00:47:34,160 --> 00:47:35,280
um so

1091
00:47:35,280 --> 00:47:37,760
fss is only known for certain classes of

1092
00:47:37,760 --> 00:47:40,240
functions the first one that was studied

1093
00:47:40,240 --> 00:47:42,400
were for point functions

1094
00:47:42,400 --> 00:47:44,800
so a point function you have some domain

1095
00:47:44,800 --> 00:47:47,040
and is zero everywhere except at a

1096
00:47:47,040 --> 00:47:49,520
single point in that domain

1097
00:47:49,520 --> 00:47:53,280
and in the context of mpc in various

1098
00:47:53,280 --> 00:47:56,720
secret cryptographic applications

1099
00:47:56,720 --> 00:47:58,559
generally the secret location the

1100
00:47:58,559 --> 00:48:01,200
location of the point function is secret

1101
00:48:01,200 --> 00:48:03,200
as well as the the value that the point

1102
00:48:03,200 --> 00:48:06,000
function attains at that point

1103
00:48:06,000 --> 00:48:08,720
um so in the original works uh these

1104
00:48:08,720 --> 00:48:10,800
problems were completely solved where

1105
00:48:10,800 --> 00:48:12,559
solved here means the communication

1106
00:48:12,559 --> 00:48:15,200
complexity how big the key is

1107
00:48:15,200 --> 00:48:17,280
that is delivered to the parties that

1108
00:48:17,280 --> 00:48:19,359
represent the function

1109
00:48:19,359 --> 00:48:22,480
so if the size of the point function is

1110
00:48:22,480 --> 00:48:23,440
n

1111
00:48:23,440 --> 00:48:24,240
um

1112
00:48:24,240 --> 00:48:26,720
even for an insecure solution

1113
00:48:26,720 --> 00:48:28,880
just to describe the location

1114
00:48:28,880 --> 00:48:30,960
of the non-zero value you would need log

1115
00:48:30,960 --> 00:48:32,480
n bits

1116
00:48:32,480 --> 00:48:34,640
so log n is a lower bound of how much

1117
00:48:34,640 --> 00:48:36,480
information you need to encode in these

1118
00:48:36,480 --> 00:48:37,520
keys

1119
00:48:37,520 --> 00:48:39,599
and they indeed constructed distributed

1120
00:48:39,599 --> 00:48:41,599
point functions that achieve this lower

1121
00:48:41,599 --> 00:48:44,720
bound of log n bits

1122
00:48:44,720 --> 00:48:46,319
this is just for the two-party case

1123
00:48:46,319 --> 00:48:47,599
where you have two parties that are

1124
00:48:47,599 --> 00:48:49,520
reconstructing the function

1125
00:48:49,520 --> 00:48:52,079
um in general if uh the number of

1126
00:48:52,079 --> 00:48:54,240
parties is more than two

1127
00:48:54,240 --> 00:48:56,000
and the threshold for how many parties

1128
00:48:56,000 --> 00:48:57,920
are needed to reconstruct the secret is

1129
00:48:57,920 --> 00:49:00,000
is more than just one

1130
00:49:00,000 --> 00:49:03,040
then less is known so log n is still the

1131
00:49:03,040 --> 00:49:04,960
theoretic lower bound

1132
00:49:04,960 --> 00:49:07,040
the original papers as we saw in the

1133
00:49:07,040 --> 00:49:08,640
earlier talk

1134
00:49:08,640 --> 00:49:12,079
provide an upper bound of root n

1135
00:49:12,079 --> 00:49:13,930
bits of communication for the key

1136
00:49:13,930 --> 00:49:15,440
[Music]

1137
00:49:15,440 --> 00:49:16,800
so there are many applications of

1138
00:49:16,800 --> 00:49:18,559
function secret sharing

1139
00:49:18,559 --> 00:49:19,520
um

1140
00:49:19,520 --> 00:49:21,280
that were discussed in the original

1141
00:49:21,280 --> 00:49:23,200
papers as well as in subsequent work so

1142
00:49:23,200 --> 00:49:25,040
p-i-r-p-i-w

1143
00:49:25,040 --> 00:49:28,079
o-ram pcgs and worst-case average case

1144
00:49:28,079 --> 00:49:31,040
reductions

1145
00:49:31,040 --> 00:49:33,040
um so that was one half of our title the

1146
00:49:33,040 --> 00:49:34,480
fss

1147
00:49:34,480 --> 00:49:37,440
half the other part is cnf key sharing

1148
00:49:37,440 --> 00:49:39,760
so this was introduced by ido at all in

1149
00:49:39,760 --> 00:49:41,040
87

1150
00:49:41,040 --> 00:49:42,800
has various names replication-based

1151
00:49:42,800 --> 00:49:44,800
sharing and multiple assignments secret

1152
00:49:44,800 --> 00:49:47,119
sharing

1153
00:49:47,119 --> 00:49:48,240
so in

1154
00:49:48,240 --> 00:49:50,480
the idea of cnf key sharing is instead

1155
00:49:50,480 --> 00:49:53,280
of each party getting a single key

1156
00:49:53,280 --> 00:49:56,079
they get multiple keys and

1157
00:49:56,079 --> 00:49:58,240
depending on the group that is

1158
00:49:58,240 --> 00:49:59,760
attempting to reconstruct the secret

1159
00:49:59,760 --> 00:50:02,800
they use different keys to reconstruct

1160
00:50:02,800 --> 00:50:06,400
oftentimes uh in these schemes you have

1161
00:50:06,400 --> 00:50:07,200
um

1162
00:50:07,200 --> 00:50:10,319
a set of parties that that have uh keys

1163
00:50:10,319 --> 00:50:12,558
that

1164
00:50:13,040 --> 00:50:14,880
if if you were to enumerate all the

1165
00:50:14,880 --> 00:50:17,440
parties of of size t where t is your

1166
00:50:17,440 --> 00:50:20,720
threshold um then you can associ assign

1167
00:50:20,720 --> 00:50:23,040
keys to each such subset where each

1168
00:50:23,040 --> 00:50:25,599
party gets a key that

1169
00:50:25,599 --> 00:50:27,920
corresponds to the enumeration of all

1170
00:50:27,920 --> 00:50:31,760
the sets that he is not a member of

1171
00:50:31,839 --> 00:50:33,599
cnf key sharing has been used in lots of

1172
00:50:33,599 --> 00:50:35,920
applications uh verifiable secret

1173
00:50:35,920 --> 00:50:38,319
sharing and mpc protocols fault

1174
00:50:38,319 --> 00:50:40,559
tolerance and redundancy

1175
00:50:40,559 --> 00:50:42,960
pir and other generalizations if you

1176
00:50:42,960 --> 00:50:44,880
just view it as a special case of

1177
00:50:44,880 --> 00:50:47,359
formula based secret sharing

1178
00:50:47,359 --> 00:50:49,359
uh so there's two parameters of interest

1179
00:50:49,359 --> 00:50:51,200
the threshold t and the number of

1180
00:50:51,200 --> 00:50:52,880
parties p

1181
00:50:52,880 --> 00:50:55,440
in this talk we consider two specific

1182
00:50:55,440 --> 00:50:57,119
cases um

1183
00:50:57,119 --> 00:50:59,920
listed there uh although in the paper it

1184
00:50:59,920 --> 00:51:03,119
talks about more general cases

1185
00:51:03,119 --> 00:51:06,160
um okay so our first result

1186
00:51:06,160 --> 00:51:07,520
well i guess i should say both our

1187
00:51:07,520 --> 00:51:10,960
results uh are intended to show how cnf

1188
00:51:10,960 --> 00:51:14,240
fss can be used to make

1189
00:51:14,240 --> 00:51:16,720
regular standard fss

1190
00:51:16,720 --> 00:51:18,400
more efficient in terms of the

1191
00:51:18,400 --> 00:51:19,760
communication

1192
00:51:19,760 --> 00:51:20,880
um

1193
00:51:20,880 --> 00:51:23,520
the size of the key

1194
00:51:23,520 --> 00:51:25,119
so in our first result

1195
00:51:25,119 --> 00:51:26,960
as i mentioned before the one out of p

1196
00:51:26,960 --> 00:51:29,680
case of fss is completely solved

1197
00:51:29,680 --> 00:51:32,160
um but with the number of parties bigger

1198
00:51:32,160 --> 00:51:33,839
than two and the threshold bigger than

1199
00:51:33,839 --> 00:51:34,880
one

1200
00:51:34,880 --> 00:51:38,000
the best known general solution requires

1201
00:51:38,000 --> 00:51:40,350
quadratic or square root n communication

1202
00:51:40,350 --> 00:51:42,400
[Music]

1203
00:51:42,400 --> 00:51:45,520
in a follow-up work uh by boyle at all

1204
00:51:45,520 --> 00:51:48,839
they showed for certain cases of of

1205
00:51:48,839 --> 00:51:51,119
p uh they can

1206
00:51:51,119 --> 00:51:53,359
achieve uh

1207
00:51:53,359 --> 00:51:56,000
fourth root event communication

1208
00:51:56,000 --> 00:51:58,079
um but this requires p to have special

1209
00:51:58,079 --> 00:52:00,720
forms and in general communication

1210
00:52:00,720 --> 00:52:02,400
becomes easier with as the number of

1211
00:52:02,400 --> 00:52:04,800
parties grow so here if you have nine

1212
00:52:04,800 --> 00:52:06,960
parties and you want a scheme where any

1213
00:52:06,960 --> 00:52:09,040
two parties can reconstruct they show

1214
00:52:09,040 --> 00:52:10,640
how to do that in fourth root and

1215
00:52:10,640 --> 00:52:11,310
communication

1216
00:52:11,310 --> 00:52:13,760
[Music]

1217
00:52:13,760 --> 00:52:16,839
um so our first results

1218
00:52:16,839 --> 00:52:18,800
um uh

1219
00:52:18,800 --> 00:52:19,760
attain

1220
00:52:19,760 --> 00:52:23,359
uh standard fss by using cnf fss as a

1221
00:52:23,359 --> 00:52:24,640
building block

1222
00:52:24,640 --> 00:52:27,520
um and we show that for these

1223
00:52:27,520 --> 00:52:29,119
choice of parameters where p is the

1224
00:52:29,119 --> 00:52:30,480
number of parties

1225
00:52:30,480 --> 00:52:33,520
t is the threshold and d is uh whatever

1226
00:52:33,520 --> 00:52:34,720
parameter

1227
00:52:34,720 --> 00:52:37,680
you choose to make the inequality hold

1228
00:52:37,680 --> 00:52:40,400
then you can achieve communication

1229
00:52:40,400 --> 00:52:42,880
n to the one over two d

1230
00:52:42,880 --> 00:52:44,880
um so as an example if if the number of

1231
00:52:44,880 --> 00:52:47,680
parties is five and the threshold is two

1232
00:52:47,680 --> 00:52:50,480
uh then you can set d equals two here uh

1233
00:52:50,480 --> 00:52:52,240
and you get n to the one fourth

1234
00:52:52,240 --> 00:52:54,720
communication

1235
00:52:54,720 --> 00:52:57,520
uh and as noted the previous best for

1236
00:52:57,520 --> 00:53:00,160
for five parties with threshold two was

1237
00:53:00,160 --> 00:53:01,760
was root n

1238
00:53:01,760 --> 00:53:03,839
um but then we also show how this can be

1239
00:53:03,839 --> 00:53:05,520
extended for information theoretic

1240
00:53:05,520 --> 00:53:07,760
security uh you lose a factor of two in

1241
00:53:07,760 --> 00:53:09,359
the exponent here

1242
00:53:09,359 --> 00:53:11,200
so the communication then is n to the

1243
00:53:11,200 --> 00:53:14,680
one over d

1244
00:53:14,800 --> 00:53:16,880
our second result constructs a one out

1245
00:53:16,880 --> 00:53:19,520
of three cnf fss scheme which has

1246
00:53:19,520 --> 00:53:21,520
various applications

1247
00:53:21,520 --> 00:53:23,119
so again

1248
00:53:23,119 --> 00:53:24,640
stepping back and looking at standard

1249
00:53:24,640 --> 00:53:26,160
fss

1250
00:53:26,160 --> 00:53:27,760
as mentioned the one out of two case is

1251
00:53:27,760 --> 00:53:30,400
totally solved it achieves the log n

1252
00:53:30,400 --> 00:53:32,240
size of the keys

1253
00:53:32,240 --> 00:53:35,280
the two out of three case um is

1254
00:53:35,280 --> 00:53:37,520
not solved again the best known result

1255
00:53:37,520 --> 00:53:39,839
for two out of three is square root n

1256
00:53:39,839 --> 00:53:40,960
our earlier

1257
00:53:40,960 --> 00:53:42,880
earlier result i just showed was for two

1258
00:53:42,880 --> 00:53:44,559
out of five but for two out of three the

1259
00:53:44,559 --> 00:53:47,520
best known is still square root n

1260
00:53:47,520 --> 00:53:49,680
so there remains a large gap between

1261
00:53:49,680 --> 00:53:50,200
these two

1262
00:53:50,200 --> 00:53:52,240
[Music]

1263
00:53:52,240 --> 00:53:55,200
um and observe that one out of three c

1264
00:53:55,200 --> 00:53:58,079
and f fss lies somewhere in between one

1265
00:53:58,079 --> 00:54:00,559
out of three and two out of three

1266
00:54:00,559 --> 00:54:02,800
so on the one hand if you look at the

1267
00:54:02,800 --> 00:54:05,760
key sharing the cnf part of one out of

1268
00:54:05,760 --> 00:54:07,520
three there are three keys that are

1269
00:54:07,520 --> 00:54:10,000
generated total and each of the three

1270
00:54:10,000 --> 00:54:11,290
parties gets two of them

1271
00:54:11,290 --> 00:54:13,040
[Music]

1272
00:54:13,040 --> 00:54:14,640
and for two out of three fss it's a

1273
00:54:14,640 --> 00:54:16,000
similar case

1274
00:54:16,000 --> 00:54:18,160
here you have three keys total

1275
00:54:18,160 --> 00:54:20,319
each party gets one of those keys but

1276
00:54:20,319 --> 00:54:23,200
because of the two out of three security

1277
00:54:23,200 --> 00:54:25,839
if any party sees not only their own key

1278
00:54:25,839 --> 00:54:27,680
but one of the keys of the other two

1279
00:54:27,680 --> 00:54:28,880
parties

1280
00:54:28,880 --> 00:54:31,920
still they cannot reconstruct the secret

1281
00:54:31,920 --> 00:54:33,920
so in both of these cases

1282
00:54:33,920 --> 00:54:36,880
you have a party that is able to see two

1283
00:54:36,880 --> 00:54:39,520
of the three total keys

1284
00:54:39,520 --> 00:54:41,599
and cannot reconstruct the the secret

1285
00:54:41,599 --> 00:54:43,760
function

1286
00:54:43,760 --> 00:54:45,760
and just as a simple observation two out

1287
00:54:45,760 --> 00:54:49,119
of three fss implies one under three cnf

1288
00:54:49,119 --> 00:54:51,280
fss so it is a stronger

1289
00:54:51,280 --> 00:54:53,200
notion

1290
00:54:53,200 --> 00:54:54,559
that said

1291
00:54:54,559 --> 00:54:56,720
for some applications you may not need

1292
00:54:56,720 --> 00:54:58,880
full two out of three security

1293
00:54:58,880 --> 00:55:00,720
perhaps the cnf overlapping key

1294
00:55:00,720 --> 00:55:02,960
structure is enough for your needs

1295
00:55:02,960 --> 00:55:04,240
so

1296
00:55:04,240 --> 00:55:05,040
in

1297
00:55:05,040 --> 00:55:08,000
bkk 020 they show that for doe ram

1298
00:55:08,000 --> 00:55:10,160
applications where fss is used as a

1299
00:55:10,160 --> 00:55:11,920
building block of oram

1300
00:55:11,920 --> 00:55:14,799
um you only need the one out of three

1301
00:55:14,799 --> 00:55:16,480
security so long as you have the

1302
00:55:16,480 --> 00:55:18,640
overlapping key structure that the cnf

1303
00:55:18,640 --> 00:55:21,839
key sharing provides

1304
00:55:22,640 --> 00:55:25,520
uh so the we have the lower bound of log

1305
00:55:25,520 --> 00:55:28,319
n and an upper bound of square root n

1306
00:55:28,319 --> 00:55:30,480
uh so where does one out of three c and

1307
00:55:30,480 --> 00:55:32,319
f fss lie

1308
00:55:32,319 --> 00:55:36,880
uh in our uh last result is uh that that

1309
00:55:36,880 --> 00:55:39,359
there exists a one out of three cnf

1310
00:55:39,359 --> 00:55:42,000
uh fss scheme that has communication

1311
00:55:42,000 --> 00:55:44,559
polylog which is near optimal

1312
00:55:44,559 --> 00:55:46,640
and we show the construction of this

1313
00:55:46,640 --> 00:55:49,839
protocol in our paper

1314
00:55:49,920 --> 00:55:52,319
so in summary we defined the notion of

1315
00:55:52,319 --> 00:55:54,400
cnf fss

1316
00:55:54,400 --> 00:55:56,160
and demonstrated

1317
00:55:56,160 --> 00:55:58,240
its utility of

1318
00:55:58,240 --> 00:56:01,359
making standard fss faster

1319
00:56:01,359 --> 00:56:02,880
or more efficient in terms of the key

1320
00:56:02,880 --> 00:56:04,480
size

1321
00:56:04,480 --> 00:56:06,559
we constructed a one out of three cnf

1322
00:56:06,559 --> 00:56:08,880
fss scheme that has near optimal

1323
00:56:08,880 --> 00:56:09,580
communication

1324
00:56:09,580 --> 00:56:10,960
[Music]

1325
00:56:10,960 --> 00:56:13,119
uh and as i mentioned there's various

1326
00:56:13,119 --> 00:56:17,200
applications of of this work so because

1327
00:56:17,200 --> 00:56:18,160
it

1328
00:56:18,160 --> 00:56:20,799
builds more efficient standard fss

1329
00:56:20,799 --> 00:56:22,640
we now you can use these more efficient

1330
00:56:22,640 --> 00:56:24,160
protocols wherever

1331
00:56:24,160 --> 00:56:26,400
fss is used

1332
00:56:26,400 --> 00:56:27,839
the one out of three construction in

1333
00:56:27,839 --> 00:56:29,520
particular gives us more efficient

1334
00:56:29,520 --> 00:56:31,520
do-ram protocols

1335
00:56:31,520 --> 00:56:33,760
and because of the cnf

1336
00:56:33,760 --> 00:56:36,960
key sharing overlapping keys property

1337
00:56:36,960 --> 00:56:38,799
there are various applications for fault

1338
00:56:38,799 --> 00:56:41,839
tolerance and redundancy

1339
00:56:41,839 --> 00:56:43,760
some open problems so the two out of

1340
00:56:43,760 --> 00:56:45,440
three case remains

1341
00:56:45,440 --> 00:56:48,079
uh an open problem we solved the two out

1342
00:56:48,079 --> 00:56:49,520
of five or we didn't solve but we

1343
00:56:49,520 --> 00:56:51,040
reduced the communication of a two out

1344
00:56:51,040 --> 00:56:52,319
of five case

1345
00:56:52,319 --> 00:56:54,240
but two out of three remains elusive the

1346
00:56:54,240 --> 00:56:56,000
best known is still the original which

1347
00:56:56,000 --> 00:56:59,040
is square root n

1348
00:56:59,040 --> 00:57:02,640
and more generally for for arbitrary tnp

1349
00:57:02,640 --> 00:57:04,480
can we come up with more efficient fss

1350
00:57:04,480 --> 00:57:07,280
protocols that are closer to the

1351
00:57:07,280 --> 00:57:09,839
lower theoretic bound of log n

1352
00:57:09,839 --> 00:57:12,319
um and are there other applications of

1353
00:57:12,319 --> 00:57:16,319
of this notion of cnf fss

1354
00:57:17,040 --> 00:57:19,359
thank you

1355
00:57:20,799 --> 00:57:22,880
thank you for

1356
00:57:22,880 --> 00:57:24,640
also a

1357
00:57:24,640 --> 00:57:25,920
are there any questions from the

1358
00:57:25,920 --> 00:57:28,920
audience

1359
00:57:40,960 --> 00:57:43,960
hmm

1360
00:58:00,240 --> 00:58:03,599
so in the application to dram

1361
00:58:03,599 --> 00:58:06,480
the communication conversion is reduced

1362
00:58:06,480 --> 00:58:09,119
from far too

1363
00:58:09,520 --> 00:58:11,119
uh well

1364
00:58:11,119 --> 00:58:12,000
from

1365
00:58:12,000 --> 00:58:13,520
square root n to

1366
00:58:13,520 --> 00:58:15,119
poly log n

1367
00:58:15,119 --> 00:58:18,960
um in that particular work uh the

1368
00:58:18,960 --> 00:58:21,599
the doe ram protocol used a two out of

1369
00:58:21,599 --> 00:58:24,640
three uh dpf scheme

1370
00:58:24,640 --> 00:58:27,119
um as an underlying scheme to give the

1371
00:58:27,119 --> 00:58:29,119
pir and piw

1372
00:58:29,119 --> 00:58:31,920
uh components of oram so their

1373
00:58:31,920 --> 00:58:32,960
communicab

1374
00:58:32,960 --> 00:58:35,040
their communication complexity was root

1375
00:58:35,040 --> 00:58:35,760
n

1376
00:58:35,760 --> 00:58:38,079
so it reduced from root n down to

1377
00:58:38,079 --> 00:58:39,520
poly log n

1378
00:58:39,520 --> 00:58:43,119
i will say that in that in that work the

1379
00:58:43,119 --> 00:58:45,440
uh the observation was that even if

1380
00:58:45,440 --> 00:58:47,440
communication complexity was high

1381
00:58:47,440 --> 00:58:50,319
oftentimes the bottleneck in a protocol

1382
00:58:50,319 --> 00:58:51,440
was the

1383
00:58:51,440 --> 00:58:53,200
computation

1384
00:58:53,200 --> 00:58:55,680
and and both that are

1385
00:58:55,680 --> 00:58:58,240
using our reduced scheme as as well as

1386
00:58:58,240 --> 00:58:59,680
using the original

1387
00:58:59,680 --> 00:59:01,520
square root n scheme they both require

1388
00:59:01,520 --> 00:59:02,880
linear work

1389
00:59:02,880 --> 00:59:05,839
in the size of the dpf domain

1390
00:59:05,839 --> 00:59:07,040
which

1391
00:59:07,040 --> 00:59:10,079
in in practical terms uh when you know

1392
00:59:10,079 --> 00:59:11,760
ignoring asymptotics is off in the

1393
00:59:11,760 --> 00:59:14,000
bottleneck

1394
00:59:14,000 --> 00:59:16,319
thank you

1395
00:59:16,559 --> 00:59:20,319
another questions from the audience

1396
00:59:23,599 --> 00:59:25,280
okay thank you for

1397
00:59:25,280 --> 00:59:27,599
thank you

1398
00:59:29,280 --> 00:59:31,760
i think

1399
00:59:31,839 --> 00:59:34,640
go back to the first fifa

1400
00:59:34,640 --> 00:59:35,839
uh

1401
00:59:35,839 --> 00:59:37,920
it's enough here

1402
00:59:37,920 --> 00:59:40,240
here

1403
00:59:41,119 --> 00:59:44,400
um hey um hey sorry everyone um

1404
00:59:44,400 --> 00:59:45,680
yeah okay

1405
00:59:45,680 --> 00:59:47,119
we need to start

1406
00:59:47,119 --> 00:59:50,839
okay thank you

1407
01:00:00,880 --> 01:00:02,079
okay

1408
01:00:02,079 --> 01:00:02,880
um

1409
01:00:02,880 --> 01:00:05,760
so hey everyone uh my name is inua and

1410
01:00:05,760 --> 01:00:08,160
uh i'll be presenting our work reusable

1411
01:00:08,160 --> 01:00:11,280
to run mpc from lpn um this is the

1412
01:00:11,280 --> 01:00:12,720
drawing work with james pardons like

1413
01:00:12,720 --> 01:00:14,319
center mcgurk and the actuary and sorry

1414
01:00:14,319 --> 01:00:16,799
nivasang

1415
01:00:16,799 --> 01:00:19,599
so we study the problem of touran mdc

1416
01:00:19,599 --> 01:00:22,079
recall in that in this setting we have

1417
01:00:22,079 --> 01:00:24,480
many parties and each party has their

1418
01:00:24,480 --> 01:00:27,040
own input and they wish to learn the

1419
01:00:27,040 --> 01:00:29,200
output of a circuit c on all of their

1420
01:00:29,200 --> 01:00:32,319
inputs um security says that every party

1421
01:00:32,319 --> 01:00:34,160
should learn nothing beyond the output

1422
01:00:34,160 --> 01:00:36,160
of the circuit

1423
01:00:36,160 --> 01:00:37,280
and we

1424
01:00:37,280 --> 01:00:39,680
want only two rounds of interaction

1425
01:00:39,680 --> 01:00:42,319
what this means is that every party will

1426
01:00:42,319 --> 01:00:44,720
send a first run message and then

1427
01:00:44,720 --> 01:00:47,680
followed by a second run message

1428
01:00:47,680 --> 01:00:50,000
so in this work we study the problem of

1429
01:00:50,000 --> 01:00:52,240
reusable to run mtc

1430
01:00:52,240 --> 01:00:54,799
what this means is that the first round

1431
01:00:54,799 --> 01:00:57,119
message can be reused across unbounded

1432
01:00:57,119 --> 01:00:59,599
number of second-round executions and

1433
01:00:59,599 --> 01:01:01,920
let's look at an example

1434
01:01:01,920 --> 01:01:03,359
say that uh

1435
01:01:03,359 --> 01:01:05,280
somehow these parties want to compute a

1436
01:01:05,280 --> 01:01:08,960
different circuit c2 on the same inputs

1437
01:01:08,960 --> 01:01:11,040
what they will do is to

1438
01:01:11,040 --> 01:01:13,920
reuse the previous first-round messages

1439
01:01:13,920 --> 01:01:15,760
and just send an additional new

1440
01:01:15,760 --> 01:01:17,920
second-round messages and that will

1441
01:01:17,920 --> 01:01:20,400
allow them to learn the output of the

1442
01:01:20,400 --> 01:01:24,640
circuit c2 on the same inputs

1443
01:01:24,640 --> 01:01:26,960
so here's our main result assuming

1444
01:01:26,960 --> 01:01:29,200
learning parity noise

1445
01:01:29,200 --> 01:01:30,640
assuming learning energy with noise

1446
01:01:30,640 --> 01:01:33,200
assumption with inverse polynomial

1447
01:01:33,200 --> 01:01:35,680
then there exists either a semi honest

1448
01:01:35,680 --> 01:01:37,760
reusable to run mpc protocol in the

1449
01:01:37,760 --> 01:01:40,000
blinn model or a maliciously secure

1450
01:01:40,000 --> 01:01:42,240
reusable to run npc protocol in the crs

1451
01:01:42,240 --> 01:01:43,200
model

1452
01:01:43,200 --> 01:01:46,319
and here is how we do it

1453
01:01:46,319 --> 01:01:49,280
in the first step we build a two-run mpc

1454
01:01:49,280 --> 01:01:51,280
vertical for bounded polynomial size

1455
01:01:51,280 --> 01:01:52,960
circuit

1456
01:01:52,960 --> 01:01:55,599
and it has the property that the first

1457
01:01:55,599 --> 01:01:57,599
round of message size is the independent

1458
01:01:57,599 --> 01:02:00,480
of the circuit size

1459
01:02:00,720 --> 01:02:03,280
and we call the first vertical bounded

1460
01:02:03,280 --> 01:02:04,839
first messages

1461
01:02:04,839 --> 01:02:07,680
npc then in the second step we show how

1462
01:02:07,680 --> 01:02:09,520
to go from boundary the polynomial size

1463
01:02:09,520 --> 01:02:11,520
circuit into unbounded polynomial size

1464
01:02:11,520 --> 01:02:13,599
circuit and it still maintains the

1465
01:02:13,599 --> 01:02:15,200
probability that the first round message

1466
01:02:15,200 --> 01:02:17,359
is succinct and we call this first

1467
01:02:17,359 --> 01:02:18,839
message to

1468
01:02:18,839 --> 01:02:21,520
syncmpc the primary work has already

1469
01:02:21,520 --> 01:02:23,599
shown that first the message to sync and

1470
01:02:23,599 --> 01:02:26,000
pc is sufficient to realize reusable to

1471
01:02:26,000 --> 01:02:28,640
run npc

1472
01:02:29,119 --> 01:02:31,760
so let's do a quick recap of the main

1473
01:02:31,760 --> 01:02:34,160
framework that we use to build a bounded

1474
01:02:34,160 --> 01:02:37,359
first messages income pc

1475
01:02:37,359 --> 01:02:39,520
the framework is to run mpc where run

1476
01:02:39,520 --> 01:02:42,559
collapsing and here is the template

1477
01:02:42,559 --> 01:02:45,440
in the first round every pair of parties

1478
01:02:45,440 --> 01:02:47,520
are going to exchange a set of ob1

1479
01:02:47,520 --> 01:02:48,720
messages

1480
01:02:48,720 --> 01:02:51,119
and in the second round every party will

1481
01:02:51,119 --> 01:02:52,720
release a sequence of the global

1482
01:02:52,720 --> 01:02:54,960
circuits

1483
01:02:54,960 --> 01:02:56,960
so what is the problem here what makes

1484
01:02:56,960 --> 01:02:59,280
the first message non-succinct well

1485
01:02:59,280 --> 01:03:02,000
notice that the number of ot-1 messages

1486
01:03:02,000 --> 01:03:03,760
exchanged in the first round actually

1487
01:03:03,760 --> 01:03:05,520
grows with the size of the circuit so

1488
01:03:05,520 --> 01:03:07,280
that's the problem

1489
01:03:07,280 --> 01:03:10,079
and our question is can we get large

1490
01:03:10,079 --> 01:03:12,160
number of ot correlations with small

1491
01:03:12,160 --> 01:03:14,559
first-round communication

1492
01:03:14,559 --> 01:03:16,880
the solution to this question is to use

1493
01:03:16,880 --> 01:03:18,799
pseudo-random correlation generator or

1494
01:03:18,799 --> 01:03:20,640
simply put pcg

1495
01:03:20,640 --> 01:03:24,160
and we want to use the pcg to generate

1496
01:03:24,160 --> 01:03:27,200
ot correlations

1497
01:03:27,760 --> 01:03:29,440
so in the first round

1498
01:03:29,440 --> 01:03:31,839
instead of sending all the ot-1 messages

1499
01:03:31,839 --> 01:03:34,400
as their first random messages

1500
01:03:34,400 --> 01:03:36,880
their party are going to agree on some

1501
01:03:36,880 --> 01:03:38,559
pcg seed

1502
01:03:38,559 --> 01:03:42,160
that is going to be independent of the

1503
01:03:42,160 --> 01:03:44,720
previous that is going to be independent

1504
01:03:44,720 --> 01:03:47,520
of the size of the circuit

1505
01:03:47,520 --> 01:03:49,920
and intuitively this pcg seeds should

1506
01:03:49,920 --> 01:03:52,400
allow these parties to get sufficiently

1507
01:03:52,400 --> 01:03:54,960
amount of ot correlations that is going

1508
01:03:54,960 --> 01:03:59,520
to be used in this two-run mpc framework

1509
01:03:59,520 --> 01:04:02,000
and we want each party to learn its own

1510
01:04:02,000 --> 01:04:05,920
pcg seat not the other party's seats

1511
01:04:05,920 --> 01:04:08,400
so before the second run begins every

1512
01:04:08,400 --> 01:04:10,720
party is going to locally expand its own

1513
01:04:10,720 --> 01:04:12,240
pcg seed

1514
01:04:12,240 --> 01:04:14,480
and as a result

1515
01:04:14,480 --> 01:04:16,799
these parties will get a number of ot

1516
01:04:16,799 --> 01:04:18,640
correlations

1517
01:04:18,640 --> 01:04:20,400
then they will just send the second

1518
01:04:20,400 --> 01:04:23,520
round message as before

1519
01:04:23,520 --> 01:04:26,240
and it is important to notice that the

1520
01:04:26,240 --> 01:04:29,119
pcg can be realized using lpn assumption

1521
01:04:29,119 --> 01:04:31,440
with inverse polynomialized rate

1522
01:04:31,440 --> 01:04:35,039
and we can expand lambda size c's into

1523
01:04:35,039 --> 01:04:37,599
bounded polynomial size number of ot

1524
01:04:37,599 --> 01:04:40,240
correlations

1525
01:04:40,240 --> 01:04:42,720
and in terms of the security intuitively

1526
01:04:42,720 --> 01:04:44,079
we can just replace all the

1527
01:04:44,079 --> 01:04:46,480
pseudo-random ot correlations with truly

1528
01:04:46,480 --> 01:04:48,720
random audit correlations

1529
01:04:48,720 --> 01:04:51,119
so as a result we have built a two-run

1530
01:04:51,119 --> 01:04:54,079
mpc protocol for abundant circuit size

1531
01:04:54,079 --> 01:04:56,240
computation with small first round

1532
01:04:56,240 --> 01:04:58,240
messages notice that the first round

1533
01:04:58,240 --> 01:05:00,720
message is small because we're only

1534
01:05:00,720 --> 01:05:04,559
sending um the pcgc's instead of all the

1535
01:05:04,559 --> 01:05:07,119
otp messages

1536
01:05:07,119 --> 01:05:09,119
now how do we build a first message

1537
01:05:09,119 --> 01:05:11,839
testing npc for unbounded polynomial

1538
01:05:11,839 --> 01:05:14,799
size circuit from this primitive

1539
01:05:14,799 --> 01:05:17,280
so the idea is to use a gtm tree that

1540
01:05:17,280 --> 01:05:20,079
use a prg from a prf

1541
01:05:20,079 --> 01:05:23,119
so let's look at this into details

1542
01:05:23,119 --> 01:05:26,079
we define an expansion circuit and that

1543
01:05:26,079 --> 01:05:29,440
will take one instance of bounded fms

1544
01:05:29,440 --> 01:05:30,559
and bc

1545
01:05:30,559 --> 01:05:32,319
and produce

1546
01:05:32,319 --> 01:05:37,160
two copies of the same instance

1547
01:05:37,599 --> 01:05:39,280
and we're going to keep

1548
01:05:39,280 --> 01:05:42,960
building this um this tree until we have

1549
01:05:42,960 --> 01:05:45,200
unbounded polynomial size number of

1550
01:05:45,200 --> 01:05:46,319
leaves

1551
01:05:46,319 --> 01:05:48,799
and every leaf is going to support a

1552
01:05:48,799 --> 01:05:50,480
bounded polynomial size

1553
01:05:50,480 --> 01:05:53,039
evaluation

1554
01:05:53,039 --> 01:05:54,720
now in order to fit

1555
01:05:54,720 --> 01:05:57,280
an unbounded

1556
01:05:57,280 --> 01:06:00,160
size circuit c into the tree we will

1557
01:06:00,160 --> 01:06:03,440
first break down the circuit c into

1558
01:06:03,440 --> 01:06:06,640
a polynomial number of randomizing

1559
01:06:06,640 --> 01:06:08,799
codings and every encoding is going to

1560
01:06:08,799 --> 01:06:12,079
be of some bounded polynomial size that

1561
01:06:12,079 --> 01:06:14,799
is going to be supported by every leaf

1562
01:06:14,799 --> 01:06:16,640
of this tree

1563
01:06:16,640 --> 01:06:18,880
so we're just going to use every leaf

1564
01:06:18,880 --> 01:06:21,440
node which is one instance of boundary

1565
01:06:21,440 --> 01:06:23,599
fms and bc to compute every randomized

1566
01:06:23,599 --> 01:06:25,680
encoding of the circuit c

1567
01:06:25,680 --> 01:06:27,520
so this will naturally

1568
01:06:27,520 --> 01:06:30,799
leads to a multi-run mtc protocol where

1569
01:06:30,799 --> 01:06:32,720
in each round all the parties are going

1570
01:06:32,720 --> 01:06:35,359
to compute one level of the screen

1571
01:06:35,359 --> 01:06:37,359
so to bring this down to just two rounds

1572
01:06:37,359 --> 01:06:38,880
we will apply the run collapsing

1573
01:06:38,880 --> 01:06:40,400
compiler again to this multi-run

1574
01:06:40,400 --> 01:06:42,160
protocol

1575
01:06:42,160 --> 01:06:43,359
and we will just squish all the

1576
01:06:43,359 --> 01:06:44,960
third-round messages

1577
01:06:44,960 --> 01:06:47,280
it also turns out that

1578
01:06:47,280 --> 01:06:50,000
even after we apply this run collapsing

1579
01:06:50,000 --> 01:06:51,039
compiler

1580
01:06:51,039 --> 01:06:53,280
the first round message is going still

1581
01:06:53,280 --> 01:06:55,359
going to remain succinct so we have

1582
01:06:55,359 --> 01:06:59,440
built fms and pc from lpn

1583
01:06:59,440 --> 01:07:01,440
and in the next step

1584
01:07:01,440 --> 01:07:03,520
we're just going to evoke the result of

1585
01:07:03,520 --> 01:07:04,960
the firework

1586
01:07:04,960 --> 01:07:06,079
and

1587
01:07:06,079 --> 01:07:08,400
this um the primal work has already

1588
01:07:08,400 --> 01:07:10,960
shown that fms and pc is sufficient to

1589
01:07:10,960 --> 01:07:14,319
realize reusable to run mpc

1590
01:07:14,319 --> 01:07:16,720
and to conclude our talk

1591
01:07:16,720 --> 01:07:18,799
the main takeaway is that reusability

1592
01:07:18,799 --> 01:07:21,359
into run and bc can be built from alpine

1593
01:07:21,359 --> 01:07:23,280
assumption with inverse polynomialized

1594
01:07:23,280 --> 01:07:24,720
rate

1595
01:07:24,720 --> 01:07:25,520
and

1596
01:07:25,520 --> 01:07:27,760
to realize this goal we have used

1597
01:07:27,760 --> 01:07:28,799
through the random correlation

1598
01:07:28,799 --> 01:07:31,280
generators and to run mtc both of which

1599
01:07:31,280 --> 01:07:32,799
are known from lpn

1600
01:07:32,799 --> 01:07:34,480
and our main techniques involve the

1601
01:07:34,480 --> 01:07:36,319
cable protocol with randomizing coding

1602
01:07:36,319 --> 01:07:38,240
and garber3 approach

1603
01:07:38,240 --> 01:07:41,119
that's it thank you everyone

1604
01:07:41,119 --> 01:07:42,799
thank you

1605
01:07:42,799 --> 01:07:47,240
and any questions from the audience

1606
01:07:56,559 --> 01:07:58,799
so the communication complexity of the

1607
01:07:58,799 --> 01:08:03,119
second band is linear intersect size

1608
01:08:03,119 --> 01:08:04,079
um

1609
01:08:04,079 --> 01:08:06,319
sorry could you repeat the question

1610
01:08:06,319 --> 01:08:08,000
uh in the

1611
01:08:08,000 --> 01:08:09,440
second round

1612
01:08:09,440 --> 01:08:12,000
the communication complexity is linear

1613
01:08:12,000 --> 01:08:14,720
in the circuit size

1614
01:08:14,720 --> 01:08:18,318
uh in the second run

1615
01:08:18,479 --> 01:08:21,839
okay so here is the thing

1616
01:08:21,839 --> 01:08:25,839
in the second round of the protocol

1617
01:08:27,120 --> 01:08:29,679
sorry let me bring it back to

1618
01:08:29,679 --> 01:08:32,719
this picture okay so notice that uh in

1619
01:08:32,719 --> 01:08:34,319
the second run of the protocol we are

1620
01:08:34,319 --> 01:08:36,000
actually going to compute

1621
01:08:36,000 --> 01:08:37,439
um

1622
01:08:37,439 --> 01:08:38,479
the the

1623
01:08:38,479 --> 01:08:41,839
um this is um three of the

1624
01:08:41,839 --> 01:08:43,520
uh

1625
01:08:43,520 --> 01:08:46,080
um they're going to compute a tree that

1626
01:08:46,080 --> 01:08:48,880
is going to support evaluating

1627
01:08:48,880 --> 01:08:50,080
um

1628
01:08:50,080 --> 01:08:51,759
any

1629
01:08:51,759 --> 01:08:54,319
unbounded polynomial side circuit

1630
01:08:54,319 --> 01:08:56,238
so that uh

1631
01:08:56,238 --> 01:08:58,319
the second round message will naturally

1632
01:08:58,319 --> 01:09:00,080
work with the size of the circuit to be

1633
01:09:00,080 --> 01:09:03,759
computed so that is going to be um

1634
01:09:03,759 --> 01:09:05,920
actually it's going to be um polynomial

1635
01:09:05,920 --> 01:09:09,120
in terms of the size of the circuit

1636
01:09:09,120 --> 01:09:12,318
okay thank you

1637
01:09:13,439 --> 01:09:14,719
okay

1638
01:09:14,719 --> 01:09:16,960
so

1639
01:09:18,640 --> 01:09:21,198
i think i'd like to

1640
01:09:21,198 --> 01:09:24,158
thank all the speakers of this session

1641
01:09:24,158 --> 01:09:26,399
thank you very much

1642
01:09:26,399 --> 01:09:28,560
and thank uh

1643
01:09:28,560 --> 01:09:32,199
everyone for attending

