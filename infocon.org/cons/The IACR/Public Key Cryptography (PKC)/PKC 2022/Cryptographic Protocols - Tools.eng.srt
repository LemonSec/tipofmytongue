1
00:00:00,000 --> 00:00:01,120
to

2
00:00:01,120 --> 00:00:02,720
partially equip the commitments from

3
00:00:02,720 --> 00:00:04,560
lattice and application

4
00:00:04,560 --> 00:00:06,319
by

5
00:00:06,319 --> 00:00:10,400
muhammad s jin ron shafet ramos dao and

6
00:00:10,400 --> 00:00:12,320
muhammad will give the talk

7
00:00:12,320 --> 00:00:14,639
please

8
00:00:15,200 --> 00:00:17,520
uh thank you for the introduction

9
00:00:17,520 --> 00:00:20,080
so our work is about a new tool that we

10
00:00:20,080 --> 00:00:21,840
call verifiable partially critical

11
00:00:21,840 --> 00:00:22,960
commitments

12
00:00:22,960 --> 00:00:25,039
it's instantiation in the data setting

13
00:00:25,039 --> 00:00:27,119
and applications in the context of

14
00:00:27,119 --> 00:00:31,000
private blockchain payments

15
00:00:32,079 --> 00:00:33,520
i'm sure many of you know what a

16
00:00:33,520 --> 00:00:35,200
privileged president protocol is we have

17
00:00:35,200 --> 00:00:36,800
a bunch of parties

18
00:00:36,800 --> 00:00:38,399
they're exchanging some messages they

19
00:00:38,399 --> 00:00:40,879
might be doing some local computations

20
00:00:40,879 --> 00:00:43,440
and due to kind of privacy concerns we

21
00:00:43,440 --> 00:00:45,200
want to hide the user identities so

22
00:00:45,200 --> 00:00:47,120
they're kind of encapsulated

23
00:00:47,120 --> 00:00:49,120
and you also want to hide the messages

24
00:00:49,120 --> 00:00:50,559
that are exchanged so they're also

25
00:00:50,559 --> 00:00:52,000
encrypted or

26
00:00:52,000 --> 00:00:54,719
encapsulated in some other fashion

27
00:00:54,719 --> 00:00:56,079
and there are

28
00:00:56,079 --> 00:00:58,000
cryptographic tools we can use in such

29
00:00:58,000 --> 00:00:59,920
protocols like commitment schemes

30
00:00:59,920 --> 00:01:01,359
general knowledge pros like encryption

31
00:01:01,359 --> 00:01:03,199
schemes

32
00:01:03,199 --> 00:01:05,280
but a practical issue with privacy

33
00:01:05,280 --> 00:01:08,000
prison protocols is that the adversary

34
00:01:08,000 --> 00:01:10,000
may actually exploit this privacy or

35
00:01:10,000 --> 00:01:13,040
anonymity features of the protocol to

36
00:01:13,040 --> 00:01:14,080
gain

37
00:01:14,080 --> 00:01:16,479
for example to get away with his illegal

38
00:01:16,479 --> 00:01:18,560
activities for example he might have

39
00:01:18,560 --> 00:01:20,080
injected some ransomware into the

40
00:01:20,080 --> 00:01:22,240
alice's computer and he might be asking

41
00:01:22,240 --> 00:01:24,560
for a ransom of 5 million dollars to be

42
00:01:24,560 --> 00:01:26,799
paid in one error so that he can hide

43
00:01:26,799 --> 00:01:28,320
his

44
00:01:28,320 --> 00:01:31,280
illegal transaction records

45
00:01:31,280 --> 00:01:34,479
okay so from a practical perspective to

46
00:01:34,479 --> 00:01:35,759
resolve

47
00:01:35,759 --> 00:01:38,159
such issues what we might do is we can

48
00:01:38,159 --> 00:01:40,320
have the same thing as we had before so

49
00:01:40,320 --> 00:01:43,280
the outside parties still does not see

50
00:01:43,280 --> 00:01:44,000
the

51
00:01:44,000 --> 00:01:46,560
private information but we can introduce

52
00:01:46,560 --> 00:01:49,040
an authority into the system

53
00:01:49,040 --> 00:01:51,680
who has a secret chapter that is only

54
00:01:51,680 --> 00:01:53,920
known by the authority and using that

55
00:01:53,920 --> 00:01:55,600
secret trap door

56
00:01:55,600 --> 00:01:57,439
the authority may be able to

57
00:01:57,439 --> 00:01:59,119
de-anonymize users in case of

58
00:01:59,119 --> 00:02:02,000
misbehavior or illegal activity and in

59
00:02:02,000 --> 00:02:03,840
this setting we would have in fact what

60
00:02:03,840 --> 00:02:05,920
we call an auditable privacy filtering

61
00:02:05,920 --> 00:02:07,200
protocol

62
00:02:07,200 --> 00:02:08,800
and then the adversary can say okay

63
00:02:08,800 --> 00:02:11,120
that's actually what who is misbehaving

64
00:02:11,120 --> 00:02:12,080
and

65
00:02:12,080 --> 00:02:14,720
similarly the authority can also

66
00:02:14,720 --> 00:02:18,959
kind of decipher the exchange messages

67
00:02:19,200 --> 00:02:21,040
and there are many examples that is

68
00:02:21,040 --> 00:02:22,959
accountability or auditable feature is

69
00:02:22,959 --> 00:02:25,680
needed and our work focuses on the

70
00:02:25,680 --> 00:02:28,160
blockchain protocol implications

71
00:02:28,160 --> 00:02:30,640
and it actually turns out that like in

72
00:02:30,640 --> 00:02:32,400
many existing protocols they are built

73
00:02:32,400 --> 00:02:34,239
on commitment schemes to hide the sacred

74
00:02:34,239 --> 00:02:35,440
information

75
00:02:35,440 --> 00:02:36,959
and in general there is no decryption

76
00:02:36,959 --> 00:02:39,120
feature in commitment schemes

77
00:02:39,120 --> 00:02:41,040
especially due to the compression and

78
00:02:41,040 --> 00:02:42,480
there is no way to recover partial

79
00:02:42,480 --> 00:02:45,360
secret information even if it's desired

80
00:02:45,360 --> 00:02:47,040
so to if you want to

81
00:02:47,040 --> 00:02:48,640
get this auditability feature that i

82
00:02:48,640 --> 00:02:49,760
mentioned we can just switch the

83
00:02:49,760 --> 00:02:50,959
encryption

84
00:02:50,959 --> 00:02:53,200
but then there are some drawbacks and in

85
00:02:53,200 --> 00:02:55,840
particular in many protocols we need to

86
00:02:55,840 --> 00:02:58,319
commit to this kind of like a very high

87
00:02:58,319 --> 00:03:00,560
entropy auxiliary messages that need not

88
00:03:00,560 --> 00:03:02,319
be recovered in decryption

89
00:03:02,319 --> 00:03:04,480
and if you switch to an encryption uh

90
00:03:04,480 --> 00:03:05,840
instead of a commitment scheme then it's

91
00:03:05,840 --> 00:03:07,040
going to come at a significant

92
00:03:07,040 --> 00:03:09,040
communication course because we cannot

93
00:03:09,040 --> 00:03:12,560
do compression in the encryption setting

94
00:03:12,560 --> 00:03:14,720
and the goal of our work is to kind of

95
00:03:14,720 --> 00:03:16,959
get around this problem and introduce a

96
00:03:16,959 --> 00:03:18,400
partial decryption

97
00:03:18,400 --> 00:03:20,480
for commitment schemes in a verifiable

98
00:03:20,480 --> 00:03:21,519
manner

99
00:03:21,519 --> 00:03:22,959
okay

100
00:03:22,959 --> 00:03:25,680
uh let me kind of uh list our

101
00:03:25,680 --> 00:03:27,519
contributions in this work so we first

102
00:03:27,519 --> 00:03:29,840
formalize this notion of verifiable

103
00:03:29,840 --> 00:03:32,400
parts of the cryptable commitments and

104
00:03:32,400 --> 00:03:34,640
wii pdc for short and this is an

105
00:03:34,640 --> 00:03:36,239
extension of a commitment scheme with a

106
00:03:36,239 --> 00:03:38,319
matching misproof and non-interactive

107
00:03:38,319 --> 00:03:40,239
zones proof to provide partial

108
00:03:40,239 --> 00:03:41,599
decryption

109
00:03:41,599 --> 00:03:42,720
and in this setting price of the

110
00:03:42,720 --> 00:03:44,799
question is really critical because we

111
00:03:44,799 --> 00:03:46,640
don't want to recover the full message

112
00:03:46,640 --> 00:03:48,239
we just want to recover a part of the

113
00:03:48,239 --> 00:03:50,159
message which is going to be probably

114
00:03:50,159 --> 00:03:52,400
has a much lower entropy than the whole

115
00:03:52,400 --> 00:03:54,239
method that is being committed so that

116
00:03:54,239 --> 00:03:56,400
we can get the compression for the

117
00:03:56,400 --> 00:03:58,480
non-decretable message part and this is

118
00:03:58,480 --> 00:04:00,480
the main difference from these notions

119
00:04:00,480 --> 00:04:02,560
of verifiable encryption and proofs of

120
00:04:02,560 --> 00:04:03,840
brain text knowledge which are kind of

121
00:04:03,840 --> 00:04:06,560
like similar notions

122
00:04:06,560 --> 00:04:08,879
and then we have uh these generalized

123
00:04:08,879 --> 00:04:11,760
results that apply to his roulettes this

124
00:04:11,760 --> 00:04:13,439
process i'm not going to talk about what

125
00:04:13,439 --> 00:04:15,519
these things are but we basically have a

126
00:04:15,519 --> 00:04:16,959
kind of like a lifting program that says

127
00:04:16,959 --> 00:04:19,040
that if you can do a decryption in an

128
00:04:19,040 --> 00:04:21,358
angle next case then you can also lift

129
00:04:21,358 --> 00:04:23,520
this to relax decryption for a wide

130
00:04:23,520 --> 00:04:25,520
class of protocols

131
00:04:25,520 --> 00:04:27,199
and then we have a normal decryption

132
00:04:27,199 --> 00:04:30,320
method for this commonly used

133
00:04:30,320 --> 00:04:31,759
hash message commitment scheme in the

134
00:04:31,759 --> 00:04:34,160
latest setting and here we make use of

135
00:04:34,160 --> 00:04:36,080
these gadget vectors to enable every

136
00:04:36,080 --> 00:04:37,680
style decryption

137
00:04:37,680 --> 00:04:39,840
and finally we have an application

138
00:04:39,840 --> 00:04:41,520
to a private

139
00:04:41,520 --> 00:04:43,919
blockchain payment system from lattices

140
00:04:43,919 --> 00:04:47,120
and we extended to make it auditable

141
00:04:47,120 --> 00:04:48,960
and the main goal here is that we want

142
00:04:48,960 --> 00:04:51,120
to make as minimal change as possible

143
00:04:51,120 --> 00:04:52,960
actually this is one of the goals again

144
00:04:52,960 --> 00:04:55,600
for our vpdc notion we just want to take

145
00:04:55,600 --> 00:04:57,919
existing protocols without replacing the

146
00:04:57,919 --> 00:04:59,600
existing disks and we just want to

147
00:04:59,600 --> 00:05:01,199
change the commitment scheme or extend

148
00:05:01,199 --> 00:05:03,600
it to vpdc to make the whole protocol

149
00:05:03,600 --> 00:05:04,639
auditable

150
00:05:04,639 --> 00:05:06,479
okay

151
00:05:06,479 --> 00:05:09,039
and yeah i just listed here some

152
00:05:09,039 --> 00:05:10,320
communication results so you don't

153
00:05:10,320 --> 00:05:11,600
really need to understand everything

154
00:05:11,600 --> 00:05:13,600
here but the important point here is

155
00:05:13,600 --> 00:05:15,280
that we just have additional three

156
00:05:15,280 --> 00:05:18,000
kilobytes in the proof size so it's just

157
00:05:18,000 --> 00:05:19,600
a three percent increase to get

158
00:05:19,600 --> 00:05:20,880
auditability

159
00:05:20,880 --> 00:05:23,280
and so it's very minimal and in terms of

160
00:05:23,280 --> 00:05:24,800
computation again there's just very

161
00:05:24,800 --> 00:05:27,120
minimal increases for like in all

162
00:05:27,120 --> 00:05:28,479
aspects of keychain transaction

163
00:05:28,479 --> 00:05:31,199
generation and verification

164
00:05:31,199 --> 00:05:33,440
and this other depot the feature that we

165
00:05:33,440 --> 00:05:35,280
have in this matrix au has interesting

166
00:05:35,280 --> 00:05:36,240
features

167
00:05:36,240 --> 00:05:38,160
so we can have multiple auditors put in

168
00:05:38,160 --> 00:05:39,680
the same transaction without revealing

169
00:05:39,680 --> 00:05:41,440
the individual factors

170
00:05:41,440 --> 00:05:43,600
and each each user can choose their own

171
00:05:43,600 --> 00:05:46,000
auditors and even they can choose not to

172
00:05:46,000 --> 00:05:47,440
be audited at all

173
00:05:47,440 --> 00:05:48,960
and we can also have the system

174
00:05:48,960 --> 00:05:50,720
enforcing auditability

175
00:05:50,720 --> 00:05:52,720
and so that they cannot avoid the

176
00:05:52,720 --> 00:05:54,479
auditing

177
00:05:54,479 --> 00:05:56,560
yep uh that's all i wanted to say our

178
00:05:56,560 --> 00:05:58,639
word the full version is on eprint the

179
00:05:58,639 --> 00:06:00,720
source codes are available and if you

180
00:06:00,720 --> 00:06:02,560
have any questions now or later on you

181
00:06:02,560 --> 00:06:07,400
can email me or ask them thank you

182
00:06:08,639 --> 00:06:10,319
thanks for your talk and

183
00:06:10,319 --> 00:06:14,440
are there any questions or comments

184
00:06:28,410 --> 00:06:29,840
[Music]

185
00:06:29,840 --> 00:06:32,560
okay so i have one question uh can you

186
00:06:32,560 --> 00:06:35,840
see a page nine

187
00:06:36,800 --> 00:06:40,560
is this or a definition of auditability

188
00:06:40,560 --> 00:06:42,880
or its feature no this is the kind of

189
00:06:42,880 --> 00:06:43,840
like the

190
00:06:43,840 --> 00:06:48,000
features of autopilot that we get

191
00:06:48,000 --> 00:06:50,560
like having having multiple auditors

192
00:06:50,560 --> 00:06:53,280
and then like users uh choosing their

193
00:06:53,280 --> 00:06:54,639
own auditors and

194
00:06:54,639 --> 00:06:56,800
maybe choosing not to be audited

195
00:06:56,800 --> 00:06:58,880
and then the system being able to

196
00:06:58,880 --> 00:07:01,199
enforce auditability so users cannot

197
00:07:01,199 --> 00:07:04,080
avoid being audited

198
00:07:04,080 --> 00:07:06,960
okay thank you

199
00:07:07,759 --> 00:07:12,840
so anyone have questions or comments

200
00:07:25,759 --> 00:07:28,800
so i can see there are your experimental

201
00:07:28,800 --> 00:07:31,599
results

202
00:07:31,599 --> 00:07:35,039
i just see you your jobs

203
00:07:35,039 --> 00:07:38,199
all right

204
00:07:48,560 --> 00:07:50,000
is it this one computational

205
00:07:50,000 --> 00:07:52,639
communication

206
00:07:56,800 --> 00:07:58,130
this is our uh

207
00:07:58,130 --> 00:07:59,360
[Music]

208
00:07:59,360 --> 00:08:02,240
comparison or just your

209
00:08:02,240 --> 00:08:03,520
yeah this is comparison with the

210
00:08:03,520 --> 00:08:04,720
original

211
00:08:04,720 --> 00:08:06,560
protocol the one that doesn't have

212
00:08:06,560 --> 00:08:07,919
auditability

213
00:08:07,919 --> 00:08:10,479
and so this is matrix the original one

214
00:08:10,479 --> 00:08:12,560
and we extend it to the auditable

215
00:08:12,560 --> 00:08:15,680
we call it matrix a u

216
00:08:16,400 --> 00:08:18,240
so the auditable version has very little

217
00:08:18,240 --> 00:08:20,800
overhead over the original protocol

218
00:08:20,800 --> 00:08:23,840
okay so uh so your audible

219
00:08:23,840 --> 00:08:25,520
protocol works with

220
00:08:25,520 --> 00:08:27,680
almost the same efficiency

221
00:08:27,680 --> 00:08:30,000
yeah that's right so because we are just

222
00:08:30,000 --> 00:08:32,479
kind of changing one of the commitments

223
00:08:32,479 --> 00:08:34,320
to every pdc and

224
00:08:34,320 --> 00:08:36,320
it comes at a very minimal cost and

225
00:08:36,320 --> 00:08:37,839
that's kind of like the goal that we

226
00:08:37,839 --> 00:08:38,839
want to

227
00:08:38,839 --> 00:08:42,959
change okay thank you

228
00:08:45,279 --> 00:08:47,279
anyone there are any questions or

229
00:08:47,279 --> 00:08:50,279
comments

230
00:09:03,360 --> 00:09:04,480
okay so

231
00:09:04,480 --> 00:09:07,360
my last question can you

232
00:09:07,360 --> 00:09:10,000
are this protocol from not lattice

233
00:09:10,000 --> 00:09:11,200
assumption

234
00:09:11,200 --> 00:09:14,800
by adapting assumptions

235
00:09:14,800 --> 00:09:16,080
uh

236
00:09:16,080 --> 00:09:18,240
yeah we mainly focused on the left space

237
00:09:18,240 --> 00:09:20,320
and i think it's interesting to see if

238
00:09:20,320 --> 00:09:22,560
something like this can be done outside

239
00:09:22,560 --> 00:09:24,000
the ladder

240
00:09:24,000 --> 00:09:27,279
but we haven't looked at it yet

241
00:09:27,839 --> 00:09:30,480
okay thanks

242
00:09:32,160 --> 00:09:36,360
are there any questions or comments

243
00:09:47,760 --> 00:09:51,200
okay so it's about time thanks mohammed

244
00:09:51,200 --> 00:09:53,600
thank you

245
00:09:55,600 --> 00:09:59,360
so let's go to the next talk

246
00:10:03,040 --> 00:10:06,480
okay thanks okay let's do my square okay

247
00:10:06,480 --> 00:10:07,519
yeah

248
00:10:07,519 --> 00:10:09,040
so

249
00:10:09,040 --> 00:10:11,279
the next talk is making private function

250
00:10:11,279 --> 00:10:14,000
evolution safer faster and simpler by

251
00:10:14,000 --> 00:10:16,079
edu and c1

252
00:10:16,079 --> 00:10:19,040
assuming you you okay so we give the

253
00:10:19,040 --> 00:10:20,240
talk

254
00:10:20,240 --> 00:10:21,600
please okay

255
00:10:21,600 --> 00:10:23,839
thank you very much and hello everyone

256
00:10:23,839 --> 00:10:26,320
i'm elio today i will present our work

257
00:10:26,320 --> 00:10:28,560
making private function evaluation safer

258
00:10:28,560 --> 00:10:31,040
faster and simpler this is the joyous

259
00:10:31,040 --> 00:10:34,480
and c1 and assuming you

260
00:10:34,480 --> 00:10:36,000
and

261
00:10:36,000 --> 00:10:38,720
pfe mainly private function evaluation

262
00:10:38,720 --> 00:10:41,360
consider such a two-party case there is

263
00:10:41,360 --> 00:10:44,160
the party alice and a party bob alice

264
00:10:44,160 --> 00:10:47,760
has input a private function at and

265
00:10:47,760 --> 00:10:50,079
private input s and bar has private

266
00:10:50,079 --> 00:10:53,279
input by same tends to compute f s y and

267
00:10:53,279 --> 00:10:55,600
then one or two partitions see the input

268
00:10:55,600 --> 00:10:58,640
and here but we see such an input

269
00:10:58,640 --> 00:11:01,600
such a evaluation result

270
00:11:01,600 --> 00:11:02,720
and

271
00:11:02,720 --> 00:11:05,680
this is a different from center secure

272
00:11:05,680 --> 00:11:07,760
function evaluation because the function

273
00:11:07,760 --> 00:11:10,480
have here is private and it's the input

274
00:11:10,480 --> 00:11:12,560
of one party

275
00:11:12,560 --> 00:11:14,800
and two realize pfe there are some

276
00:11:14,800 --> 00:11:15,839
approach

277
00:11:15,839 --> 00:11:18,399
it's very straightforward to use fully

278
00:11:18,399 --> 00:11:21,839
homomorphic equation to realize pfe

279
00:11:21,839 --> 00:11:24,480
however today

280
00:11:24,480 --> 00:11:26,240
fully homomorphic equation still has

281
00:11:26,240 --> 00:11:29,200
very high computational overhead

282
00:11:29,200 --> 00:11:31,440
and the second one is to use universal

283
00:11:31,440 --> 00:11:33,920
circuit universal circuit is a circuit

284
00:11:33,920 --> 00:11:36,399
that tests input the expression of a

285
00:11:36,399 --> 00:11:38,800
circuits another circuit c

286
00:11:38,800 --> 00:11:40,839
and s and compute

287
00:11:40,839 --> 00:11:44,720
cs however for universal circuit for the

288
00:11:44,720 --> 00:11:47,200
circuit ceiling side n

289
00:11:47,200 --> 00:11:50,880
the corresponding universal circuit has

290
00:11:50,880 --> 00:11:52,959
size theta and log n

291
00:11:52,959 --> 00:11:56,000
and there is an additional log name over

292
00:11:56,000 --> 00:11:58,480
and at the same time the constant better

293
00:11:58,480 --> 00:12:02,160
and lower the terms are also significant

294
00:12:02,160 --> 00:12:04,560
and the third approach is to avoid the

295
00:12:04,560 --> 00:12:07,519
usage of fully homomorphing question and

296
00:12:07,519 --> 00:12:09,839
universal

297
00:12:09,839 --> 00:12:12,399
so there is a approach based on

298
00:12:12,399 --> 00:12:14,639
oblivious evaluation of switching

299
00:12:14,639 --> 00:12:17,680
network however it still has locked and

300
00:12:17,680 --> 00:12:20,480
additional love and overhead

301
00:12:20,480 --> 00:12:23,440
and starting from cars and minecarts in

302
00:12:23,440 --> 00:12:25,120
2011

303
00:12:25,120 --> 00:12:27,920
they propose the protocol with linear

304
00:12:27,920 --> 00:12:30,639
capacity with respect to the size of the

305
00:12:30,639 --> 00:12:34,560
circuit and is constant round

306
00:12:34,560 --> 00:12:36,880
and recently it will show that the

307
00:12:36,880 --> 00:12:39,360
passively secure

308
00:12:39,360 --> 00:12:40,800
such a protocol

309
00:12:40,800 --> 00:12:42,399
outperforms the state-of-the-art

310
00:12:42,399 --> 00:12:45,040
passively secure universal circuit-based

311
00:12:45,040 --> 00:12:47,680
pfe protocol

312
00:12:47,680 --> 00:12:49,760
and there are also some improvements of

313
00:12:49,760 --> 00:12:51,360
the

314
00:12:51,360 --> 00:12:54,079
secure pfp protocol

315
00:12:54,079 --> 00:12:57,200
in the paper ms-13 they generalize they

316
00:12:57,200 --> 00:13:00,160
impose the pessilis the original passage

317
00:13:00,160 --> 00:13:02,000
secure

318
00:13:02,000 --> 00:13:04,800
pfe protocol

319
00:13:04,800 --> 00:13:07,440
and then the usability authority is

320
00:13:07,440 --> 00:13:10,560
added when respect to a given party for

321
00:13:10,560 --> 00:13:13,040
the original protocol to attain better

322
00:13:13,040 --> 00:13:14,800
performance

323
00:13:14,800 --> 00:13:17,200
and this reusability

324
00:13:17,200 --> 00:13:19,680
means that we can have one initiation

325
00:13:19,680 --> 00:13:21,839
for the private function app and then

326
00:13:21,839 --> 00:13:24,560
multiple evaluation of f on different

327
00:13:24,560 --> 00:13:25,680
input

328
00:13:25,680 --> 00:13:27,279
for example like this

329
00:13:27,279 --> 00:13:30,000
alice can perform an initiation for the

330
00:13:30,000 --> 00:13:32,560
private function at when bob

331
00:13:32,560 --> 00:13:34,720
and then they can use different

332
00:13:34,720 --> 00:13:37,440
input values and compute different

333
00:13:37,440 --> 00:13:40,240
evaluation results

334
00:13:40,240 --> 00:13:43,920
so only one initiation is needed

335
00:13:43,920 --> 00:13:47,440
and what about ft security

336
00:13:47,440 --> 00:13:49,920
uh in the original paper the other

337
00:13:49,920 --> 00:13:52,480
introduced how to grt security against

338
00:13:52,480 --> 00:13:55,680
malaysia input provider so the income

339
00:13:55,680 --> 00:13:57,680
the the provider above

340
00:13:57,680 --> 00:14:00,079
here can be malicious however they need

341
00:14:00,079 --> 00:14:02,399
to know that the

342
00:14:02,399 --> 00:14:07,519
function provider alice is semi honest

343
00:14:07,519 --> 00:14:08,480
and

344
00:14:08,480 --> 00:14:10,079
then what

345
00:14:10,079 --> 00:14:11,279
provides a

346
00:14:11,279 --> 00:14:14,079
protocol that is full security

347
00:14:14,079 --> 00:14:16,639
however in this protocol the numbers of

348
00:14:16,639 --> 00:14:20,079
raw is equals to the numbers of gates

349
00:14:20,079 --> 00:14:22,399
so to the best of our knowledge there is

350
00:14:22,399 --> 00:14:25,279
no constant around actually secure pfp4

351
00:14:25,279 --> 00:14:28,240
linear capacity

352
00:14:28,320 --> 00:14:31,040
and in our work

353
00:14:31,040 --> 00:14:34,160
we provide the first actually secure

354
00:14:34,160 --> 00:14:35,600
constant around

355
00:14:35,600 --> 00:14:38,480
pfe protocol with linear capacity

356
00:14:38,480 --> 00:14:40,560
and we also

357
00:14:40,560 --> 00:14:43,600
improve the reusability and we call it

358
00:14:43,600 --> 00:14:45,760
global reusability

359
00:14:45,760 --> 00:14:47,920
and we also provide a

360
00:14:47,920 --> 00:14:52,319
pvc security version of the protocol

361
00:14:52,560 --> 00:14:55,279
and here global usability means that for

362
00:14:55,279 --> 00:14:57,120
example like at least here you can

363
00:14:57,120 --> 00:14:59,199
provide a global initiation for her

364
00:14:59,199 --> 00:15:01,680
private private function f

365
00:15:01,680 --> 00:15:04,560
and then a party bob can use this

366
00:15:04,560 --> 00:15:06,240
private function

367
00:15:06,240 --> 00:15:09,199
use this global initiation information

368
00:15:09,199 --> 00:15:12,639
and then directly start the evaluation

369
00:15:12,639 --> 00:15:15,920
of private function f when at least

370
00:15:15,920 --> 00:15:18,560
using their

371
00:15:18,560 --> 00:15:20,720
different inputs

372
00:15:20,720 --> 00:15:23,760
and at the same time a

373
00:15:23,760 --> 00:15:26,880
party charlie can also use this global

374
00:15:26,880 --> 00:15:28,320
initiation

375
00:15:28,320 --> 00:15:31,279
information and then start the

376
00:15:31,279 --> 00:15:33,199
start the evaluation of private function

377
00:15:33,199 --> 00:15:36,880
app directly when at least

378
00:15:36,880 --> 00:15:37,759
so

379
00:15:37,759 --> 00:15:39,759
our approach is here

380
00:15:39,759 --> 00:15:42,720
we divide the protocol into two phases

381
00:15:42,720 --> 00:15:44,959
the initiation phase and the evaluation

382
00:15:44,959 --> 00:15:46,800
phase

383
00:15:46,800 --> 00:15:49,519
and then for the initiation phase we

384
00:15:49,519 --> 00:15:51,120
designed zero knowledge protocol for

385
00:15:51,120 --> 00:15:53,120
disgrace logarithm

386
00:15:53,120 --> 00:15:55,199
and extended permutation

387
00:15:55,199 --> 00:15:57,440
and here extended permutation is used to

388
00:15:57,440 --> 00:16:00,800
describe the topology of the circuit

389
00:16:00,800 --> 00:16:04,320
and we obtain a key secured with grt

390
00:16:04,320 --> 00:16:06,959
security against alice so the function

391
00:16:06,959 --> 00:16:08,480
provider

392
00:16:08,480 --> 00:16:11,040
and then we can use via xiaomi curiosity

393
00:16:11,040 --> 00:16:14,560
because the message from bob is rendered

394
00:16:14,560 --> 00:16:17,519
and we can make the initiation face no

395
00:16:17,519 --> 00:16:20,720
impact and then obtain fully at his

396
00:16:20,720 --> 00:16:22,560
security

397
00:16:22,560 --> 00:16:24,800
and for the evaluation of private

398
00:16:24,800 --> 00:16:27,040
function

399
00:16:27,040 --> 00:16:29,519
we can use classical approach for global

400
00:16:29,519 --> 00:16:33,279
circuit to obtain fully active security

401
00:16:33,279 --> 00:16:37,920
so combine these two phase we obtain a

402
00:16:37,920 --> 00:16:40,639
actually secure constant raw pfe product

403
00:16:40,639 --> 00:16:43,600
called linear capacity

404
00:16:43,600 --> 00:16:45,920
so that's all my talk

405
00:16:45,920 --> 00:16:47,680
and if you are interested in our work

406
00:16:47,680 --> 00:16:50,000
you can see the full version on april

407
00:16:50,000 --> 00:16:52,880
thank you very much

408
00:16:54,240 --> 00:16:55,920
thank you for your talk

409
00:16:55,920 --> 00:16:57,839
through are there any questions or

410
00:16:57,839 --> 00:17:00,839
comments

411
00:17:14,400 --> 00:17:16,959
okay so i give up one question

412
00:17:16,959 --> 00:17:18,959
can you show your table

413
00:17:18,959 --> 00:17:21,039
which compare your work in their

414
00:17:21,039 --> 00:17:22,480
previous works

415
00:17:22,480 --> 00:17:25,199
oh okay

416
00:17:25,199 --> 00:17:26,559
like this

417
00:17:26,559 --> 00:17:29,559
yes

418
00:17:29,840 --> 00:17:32,909
[Music]

419
00:17:38,720 --> 00:17:41,440
uh is this rock provides the first

420
00:17:41,440 --> 00:17:43,919
publicly verified of cobalt security

421
00:17:43,919 --> 00:17:46,400
it's okay

422
00:17:47,200 --> 00:17:49,440
sorry

423
00:17:49,840 --> 00:17:53,760
uh the security pbc security security

424
00:17:53,760 --> 00:17:55,360
uh

425
00:17:55,360 --> 00:17:56,720
security

426
00:17:56,720 --> 00:17:58,840
oh yeah it

427
00:17:58,840 --> 00:18:02,720
is the actually security version

428
00:18:03,760 --> 00:18:05,520
and so your

429
00:18:05,520 --> 00:18:07,679
your work achieves our first security

430
00:18:07,679 --> 00:18:08,559
and

431
00:18:08,559 --> 00:18:10,799
it's very efficient and reduceable it's

432
00:18:10,799 --> 00:18:14,559
okay uh i think our work uh the the most

433
00:18:14,559 --> 00:18:16,720
contribute the main contribution of what

434
00:18:16,720 --> 00:18:19,440
is provided first at pe secure constant

435
00:18:19,440 --> 00:18:22,240
around pfe vertical and linear capacity

436
00:18:22,240 --> 00:18:24,799
and so and there are some additional

437
00:18:24,799 --> 00:18:27,760
bonus for example like global layers

438
00:18:27,760 --> 00:18:30,240
and we asked to to

439
00:18:30,240 --> 00:18:33,840
for for practical use we also provide

440
00:18:33,840 --> 00:18:36,240
the pvc security version

441
00:18:36,240 --> 00:18:39,520
uh because our the two phase like the

442
00:18:39,520 --> 00:18:41,679
the initiation phase and the

443
00:18:41,679 --> 00:18:45,039
evaluation phase is very suitable to

444
00:18:45,039 --> 00:18:48,480
transform the active security version to

445
00:18:48,480 --> 00:18:50,400
pvc security version

446
00:18:50,400 --> 00:18:55,960
and it can obtain better efficiency

447
00:18:56,320 --> 00:18:58,799
okay thank you so are there any

448
00:18:58,799 --> 00:19:01,200
questions

449
00:19:07,039 --> 00:19:09,440
okay so i'll give you one more questions

450
00:19:09,440 --> 00:19:12,880
uh although it may be not very efficient

451
00:19:12,880 --> 00:19:15,440
can we achieve the same security and do

452
00:19:15,440 --> 00:19:16,400
the

453
00:19:16,400 --> 00:19:20,000
reusability by using fac

454
00:19:20,000 --> 00:19:21,120
uh

455
00:19:21,120 --> 00:19:22,720
maybe a week

456
00:19:22,720 --> 00:19:26,880
i i don't know i i don't try

457
00:19:28,000 --> 00:19:30,559
maybe it can be a future

458
00:19:30,559 --> 00:19:33,440
to try to see okay

459
00:19:33,440 --> 00:19:36,080
but um i i don't know i don't know if it

460
00:19:36,080 --> 00:19:39,559
is okay

461
00:19:40,880 --> 00:19:44,000
are there any questions

462
00:19:45,760 --> 00:19:49,120
yeah i have a short question so

463
00:19:49,120 --> 00:19:50,840
like i'm not sure about like the

464
00:19:50,840 --> 00:19:52,559
usability so

465
00:19:52,559 --> 00:19:53,520
yeah

466
00:19:53,520 --> 00:19:56,960
yeah so maybe you can use like you can

467
00:19:56,960 --> 00:19:59,840
reuse like some initiation like

468
00:19:59,840 --> 00:20:03,360
information i i don't know how much like

469
00:20:03,360 --> 00:20:04,400
uh

470
00:20:04,400 --> 00:20:07,039
you can use some information right so

471
00:20:07,039 --> 00:20:10,400
yeah yes and you can omit some procedure

472
00:20:10,400 --> 00:20:13,200
initiation procedure right so

473
00:20:13,200 --> 00:20:16,480
yeah yeah and and is it like

474
00:20:16,480 --> 00:20:19,840
is like initiation procedure like heavy

475
00:20:19,840 --> 00:20:23,120
in general so in like among these

476
00:20:23,120 --> 00:20:25,039
schemes

477
00:20:25,039 --> 00:20:27,600
so the the initiation is for the

478
00:20:27,600 --> 00:20:29,039
function

479
00:20:29,039 --> 00:20:30,159
so yeah

480
00:20:30,159 --> 00:20:30,960
yeah

481
00:20:30,960 --> 00:20:33,280
it's only for the function

482
00:20:33,280 --> 00:20:35,360
yeah

483
00:20:35,360 --> 00:20:38,400
so yeah i i want to know like how

484
00:20:38,400 --> 00:20:40,159
important this

485
00:20:40,159 --> 00:20:42,000
uh

486
00:20:42,000 --> 00:20:43,520
like

487
00:20:43,520 --> 00:20:46,799
functionality and feature

488
00:20:47,039 --> 00:20:49,679
uh because well previously they

489
00:20:49,679 --> 00:20:50,480
they

490
00:20:50,480 --> 00:20:52,400
mixed the the initiation and the

491
00:20:52,400 --> 00:20:54,000
evaluation together

492
00:20:54,000 --> 00:20:57,360
for for most of the uh previous work and

493
00:20:57,360 --> 00:20:59,760
and so we divided

494
00:20:59,760 --> 00:21:02,640
into two phases and because and now the

495
00:21:02,640 --> 00:21:05,280
initiation only needs to be skilled one

496
00:21:05,280 --> 00:21:06,320
time

497
00:21:06,320 --> 00:21:08,320
uh so it you can

498
00:21:08,320 --> 00:21:11,440
gain better efficiency

499
00:21:11,440 --> 00:21:14,320
okay yeah so

500
00:21:14,320 --> 00:21:17,760
i i mean you can improve some efficiency

501
00:21:17,760 --> 00:21:19,679
i mean you can omit

502
00:21:19,679 --> 00:21:23,360
like this phase right so you can only

503
00:21:23,360 --> 00:21:26,640
like learn this initiation once only

504
00:21:26,640 --> 00:21:27,600
once

505
00:21:27,600 --> 00:21:30,240
yes yes yes so yeah okay

506
00:21:30,240 --> 00:21:31,360
okay

507
00:21:31,360 --> 00:21:32,880
thanks

508
00:21:32,880 --> 00:21:35,039
thank you

509
00:21:35,039 --> 00:21:36,799
okay so thanks

510
00:21:36,799 --> 00:21:38,400
e and

511
00:21:38,400 --> 00:21:41,039
we go to their next talk

512
00:21:41,039 --> 00:21:44,760
thanks for a nice talk

513
00:21:45,120 --> 00:21:46,960
okay so next speaker can you share your

514
00:21:46,960 --> 00:21:48,880
stride

515
00:21:48,880 --> 00:21:50,240
oh thanks

516
00:21:50,240 --> 00:21:51,520
so

517
00:21:51,520 --> 00:21:53,520
the next stock is two rounds of previous

518
00:21:53,520 --> 00:21:55,280
linear evaluations from running with

519
00:21:55,280 --> 00:21:58,320
errors by pedro branconi train power

520
00:21:58,320 --> 00:22:00,080
motif

521
00:22:00,080 --> 00:22:03,600
okay so please talk

522
00:22:08,799 --> 00:22:10,799
uh pedro if you're speaking we are

523
00:22:10,799 --> 00:22:12,559
actually are not getting any audio from

524
00:22:12,559 --> 00:22:14,720
you

525
00:22:18,240 --> 00:22:20,000
hello

526
00:22:20,000 --> 00:22:22,880
yes i can hear you that's better sorry

527
00:22:22,880 --> 00:22:24,240
okay

528
00:22:24,240 --> 00:22:25,039
okay

529
00:22:25,039 --> 00:22:27,520
hi everyone this talk is about uh two

530
00:22:27,520 --> 00:22:29,840
round oblivious linear evaluation from

531
00:22:29,840 --> 00:22:32,559
lwe and this is joint work with nikko

532
00:22:32,559 --> 00:22:35,840
dot link and paul mathews

533
00:22:35,840 --> 00:22:37,120
so first

534
00:22:37,120 --> 00:22:38,559
what's uh

535
00:22:38,559 --> 00:22:40,880
oblivious linear evaluation or ole for

536
00:22:40,880 --> 00:22:44,480
short ole is a protocol between a sender

537
00:22:44,480 --> 00:22:47,039
on the left side with input a and b

538
00:22:47,039 --> 00:22:49,440
coming from a finite ring and the

539
00:22:49,440 --> 00:22:52,960
receiver on the right side with input x

540
00:22:52,960 --> 00:22:55,039
in the end the receiver should get a

541
00:22:55,039 --> 00:22:59,440
linear combination a plus xb

542
00:22:59,440 --> 00:23:02,159
in terms of security we want that the

543
00:23:02,159 --> 00:23:04,559
receiver learns nothing about the

544
00:23:04,559 --> 00:23:06,640
sender's input a and b

545
00:23:06,640 --> 00:23:09,600
apart from what is trivially leaked by

546
00:23:09,600 --> 00:23:11,520
the output

547
00:23:11,520 --> 00:23:14,159
and that the sender learns nothing about

548
00:23:14,159 --> 00:23:17,679
the receiver's input x

549
00:23:17,679 --> 00:23:20,960
ole is usually seen as the arithmetic

550
00:23:20,960 --> 00:23:22,960
generalization of the well-known

551
00:23:22,960 --> 00:23:26,400
oblivious trans transfer primitive

552
00:23:26,400 --> 00:23:28,240
in terms of applications

553
00:23:28,240 --> 00:23:30,880
ole has found numerous of them

554
00:23:30,880 --> 00:23:33,520
especially as a building block for a

555
00:23:33,520 --> 00:23:35,360
two-party secure

556
00:23:35,360 --> 00:23:37,440
computation schemes

557
00:23:37,440 --> 00:23:41,120
in a variety of different settings

558
00:23:41,360 --> 00:23:42,400
so in this

559
00:23:42,400 --> 00:23:44,960
in this work we ask whether we can build

560
00:23:44,960 --> 00:23:47,279
efficient and maliciously secure

561
00:23:47,279 --> 00:23:50,400
two-round ole protocol from presumably

562
00:23:50,400 --> 00:23:53,919
post quantum hardness assumptions

563
00:23:53,919 --> 00:23:56,240
and we show that we can build an old

564
00:23:56,240 --> 00:23:57,679
scheme

565
00:23:57,679 --> 00:23:59,840
which is secure against malicious

566
00:23:59,840 --> 00:24:03,039
receivers where security holds

567
00:24:03,039 --> 00:24:06,240
statistically and against semi honest

568
00:24:06,240 --> 00:24:07,360
senders

569
00:24:07,360 --> 00:24:09,200
given that the learning with errors

570
00:24:09,200 --> 00:24:12,000
assumption is hard

571
00:24:12,000 --> 00:24:16,400
and the protocol runs in two rounds

572
00:24:17,120 --> 00:24:21,520
so how do we obtain our result we first

573
00:24:21,520 --> 00:24:24,720
generalized the uh famous ot scheme by

574
00:24:24,720 --> 00:24:27,279
pipe picard like nathan and waters or

575
00:24:27,279 --> 00:24:28,559
pvw

576
00:24:28,559 --> 00:24:30,480
into an oily skin

577
00:24:30,480 --> 00:24:32,880
and this step goes um

578
00:24:32,880 --> 00:24:35,919
relatively easy if we look at pvw from

579
00:24:35,919 --> 00:24:39,200
the from the right perspective

580
00:24:39,200 --> 00:24:40,480
then uh

581
00:24:40,480 --> 00:24:42,400
uh regarding the security proof

582
00:24:42,400 --> 00:24:45,039
correctness and semi honest

583
00:24:45,039 --> 00:24:47,440
security against the sender

584
00:24:47,440 --> 00:24:49,679
follows very easily

585
00:24:49,679 --> 00:24:51,120
but if we

586
00:24:51,120 --> 00:24:52,880
were to adapt

587
00:24:52,880 --> 00:24:54,080
the

588
00:24:54,080 --> 00:24:57,279
proof of pvw for a malicious receiver

589
00:24:57,279 --> 00:25:01,039
then we would run into problems

590
00:25:01,039 --> 00:25:03,840
to see this uh recall that

591
00:25:03,840 --> 00:25:06,960
at some point in the proof of pvw the

592
00:25:06,960 --> 00:25:09,840
simulator needs to decide if a vector z

593
00:25:09,840 --> 00:25:11,279
over zq

594
00:25:11,279 --> 00:25:14,640
is close to the row span of a matrix a

595
00:25:14,640 --> 00:25:16,400
and the way they do

596
00:25:16,400 --> 00:25:20,240
they solve this problem in pvw is by

597
00:25:20,240 --> 00:25:23,200
allowing the simulator to run over all

598
00:25:23,200 --> 00:25:24,960
possible values of

599
00:25:24,960 --> 00:25:27,440
alpha of nzq

600
00:25:27,440 --> 00:25:29,440
and check if

601
00:25:29,440 --> 00:25:32,240
there is an alpha such that alpha times

602
00:25:32,240 --> 00:25:33,039
z

603
00:25:33,039 --> 00:25:35,279
is close to the row span of a which can

604
00:25:35,279 --> 00:25:36,799
be checked

605
00:25:36,799 --> 00:25:39,039
given a lattice structure for the matrix

606
00:25:39,039 --> 00:25:41,039
a

607
00:25:41,039 --> 00:25:43,760
since the simulator needs to run over

608
00:25:43,760 --> 00:25:46,559
all possible values of q they require

609
00:25:46,559 --> 00:25:48,000
that the uh

610
00:25:48,000 --> 00:25:49,919
that the modulus q

611
00:25:49,919 --> 00:25:52,880
is polynomial in the security parameter

612
00:25:52,880 --> 00:25:56,559
this is okay for uh uh old team but it's

613
00:25:56,559 --> 00:25:58,960
not ideal for ole as we would like to

614
00:25:58,960 --> 00:26:01,200
have um

615
00:26:01,200 --> 00:26:02,960
oles over

616
00:26:02,960 --> 00:26:06,159
any finite ring including

617
00:26:06,159 --> 00:26:08,480
rings with super polynomial size

618
00:26:08,480 --> 00:26:09,600
and

619
00:26:09,600 --> 00:26:11,600
with this approach we would be stuck

620
00:26:11,600 --> 00:26:12,640
with the

621
00:26:12,640 --> 00:26:16,240
polynomial size rings

622
00:26:16,240 --> 00:26:18,080
so the main technical challenge that we

623
00:26:18,080 --> 00:26:21,679
solve in this work is to devise a new

624
00:26:21,679 --> 00:26:26,240
extraction mechanism that decides if um

625
00:26:26,240 --> 00:26:29,120
if there is an alpha such that l alpha

626
00:26:29,120 --> 00:26:31,919
times z is close to the row span of a

627
00:26:31,919 --> 00:26:33,279
matrix a

628
00:26:33,279 --> 00:26:35,120
for any modulus

629
00:26:35,120 --> 00:26:36,960
q even

630
00:26:36,960 --> 00:26:38,400
for super polynomial

631
00:26:38,400 --> 00:26:39,919
uh

632
00:26:39,919 --> 00:26:42,480
modules

633
00:26:42,799 --> 00:26:45,440
as additional results we show how to

634
00:26:45,440 --> 00:26:48,559
extend our protocol into a batch

635
00:26:48,559 --> 00:26:50,400
variant where

636
00:26:50,400 --> 00:26:52,240
the receiver can commit to a bunch of

637
00:26:52,240 --> 00:26:54,080
inputs and that achieves better

638
00:26:54,080 --> 00:26:56,000
communication complexity

639
00:26:56,000 --> 00:26:58,960
and we also show how to extend uh the

640
00:26:58,960 --> 00:27:01,679
protocol to allow for malicious uh

641
00:27:01,679 --> 00:27:04,159
senders using uh

642
00:27:04,159 --> 00:27:05,760
more or less standard current choose

643
00:27:05,760 --> 00:27:08,240
techniques

644
00:27:08,240 --> 00:27:09,279
that's all

645
00:27:09,279 --> 00:27:11,600
thanks

646
00:27:14,480 --> 00:27:16,880
thanks so are there any questions or

647
00:27:16,880 --> 00:27:19,880
comments

648
00:27:28,080 --> 00:27:30,960
okay so can you explain why why we have

649
00:27:30,960 --> 00:27:32,080
to

650
00:27:32,080 --> 00:27:34,799
study the super polynomial modules

651
00:27:34,799 --> 00:27:36,000
since

652
00:27:36,000 --> 00:27:38,720
i guess polynomial models should be more

653
00:27:38,720 --> 00:27:40,000
efficient

654
00:27:40,000 --> 00:27:41,360
i guess

655
00:27:41,360 --> 00:27:44,399
yes yes yes but but in some applications

656
00:27:44,399 --> 00:27:46,720
um you might

657
00:27:46,720 --> 00:27:48,640
require an ole

658
00:27:48,640 --> 00:27:51,120
over larger fields

659
00:27:51,120 --> 00:27:52,480
okay

660
00:27:52,480 --> 00:27:54,960
okay

661
00:27:55,600 --> 00:27:59,919
so uh yeah that's that's the reason

662
00:27:59,919 --> 00:28:02,559
so for example you might want an oily

663
00:28:02,559 --> 00:28:04,799
over

664
00:28:04,880 --> 00:28:08,480
a field of exponential size

665
00:28:08,480 --> 00:28:11,440
yes okay

666
00:28:13,679 --> 00:28:17,840
any other questions or comments

667
00:28:35,039 --> 00:28:38,799
okay so i'll give another question

668
00:28:40,480 --> 00:28:42,480
you said you focus on your post content

669
00:28:42,480 --> 00:28:44,559
security but

670
00:28:44,559 --> 00:28:45,679
can you

671
00:28:45,679 --> 00:28:47,600
obtain their similar results by a dc

672
00:28:47,600 --> 00:28:50,879
helmet types assumption

673
00:28:51,120 --> 00:28:54,080
actually no we use

674
00:28:54,080 --> 00:28:56,720
we use a very specific

675
00:28:56,720 --> 00:28:59,679
lattice-based techniques

676
00:28:59,679 --> 00:29:01,679
which we don't know how to uh

677
00:29:01,679 --> 00:29:05,679
how to do in the uh in the group setting

678
00:29:05,679 --> 00:29:08,480
okay so can you explain which part did

679
00:29:08,480 --> 00:29:09,520
you use

680
00:29:09,520 --> 00:29:12,399
you use the lattice-based technique

681
00:29:12,399 --> 00:29:14,719
um

682
00:29:18,399 --> 00:29:19,440
uh

683
00:29:19,440 --> 00:29:22,320
yes so in the in the proof of malicious

684
00:29:22,320 --> 00:29:24,559
receivers we need

685
00:29:24,559 --> 00:29:25,600
we need

686
00:29:25,600 --> 00:29:27,360
all of these um

687
00:29:27,360 --> 00:29:30,240
lattice gadgets like um

688
00:29:30,240 --> 00:29:34,159
uh lattice trapdoors and uh

689
00:29:34,240 --> 00:29:37,039
yes we need lattice raptors for example

690
00:29:37,039 --> 00:29:38,559
and that's one thing we don't know how

691
00:29:38,559 --> 00:29:40,159
to do

692
00:29:40,159 --> 00:29:42,399
using

693
00:29:42,399 --> 00:29:44,399
using group using

694
00:29:44,399 --> 00:29:47,279
in the group setting

695
00:29:48,000 --> 00:29:50,880
okay thanks

696
00:29:51,120 --> 00:29:55,320
any other questions or comments

697
00:30:19,919 --> 00:30:21,760
okay so can you show the

698
00:30:21,760 --> 00:30:25,760
page of overview of your work

699
00:30:25,760 --> 00:30:27,200
i guess

700
00:30:27,200 --> 00:30:28,960
you constructed the

701
00:30:28,960 --> 00:30:30,960
protocol

702
00:30:30,960 --> 00:30:32,000
i guess

703
00:30:32,000 --> 00:30:35,520
it should be page five or six

704
00:30:35,520 --> 00:30:36,480
okay

705
00:30:36,480 --> 00:30:38,799
okay

706
00:30:41,679 --> 00:30:44,720
so as you said uh

707
00:30:44,720 --> 00:30:47,919
proof against the market security of the

708
00:30:47,919 --> 00:30:49,600
receiver is the

709
00:30:49,600 --> 00:30:52,399
most technical

710
00:30:52,399 --> 00:30:53,520
advance

711
00:30:53,520 --> 00:30:56,399
yes yes yes

712
00:30:57,200 --> 00:30:59,600
and here you use the lattice-based

713
00:30:59,600 --> 00:31:01,039
technique

714
00:31:01,039 --> 00:31:02,799
yes yes yes

715
00:31:02,799 --> 00:31:04,320
okay

716
00:31:04,320 --> 00:31:07,440
yes this is where we use all of this

717
00:31:07,440 --> 00:31:10,960
lattice-based techniques yes

718
00:31:11,919 --> 00:31:16,679
okay so any other questions or comments

719
00:31:26,799 --> 00:31:29,200
okay so let's go to the next talk thank

720
00:31:29,200 --> 00:31:33,559
you for hello nice talk

721
00:31:43,760 --> 00:31:48,559
okay thank you i can see your side so

722
00:31:51,679 --> 00:31:54,159
the next stock is improved constructions

723
00:31:54,159 --> 00:31:56,559
of anonymous credentials from structure

724
00:31:56,559 --> 00:31:58,840
preserving signatures or equivalence

725
00:31:58,840 --> 00:32:01,840
classes by

726
00:32:01,840 --> 00:32:06,399
iceland connolly pascal

727
00:32:06,799 --> 00:32:10,000
and octavio perez

728
00:32:10,000 --> 00:32:12,240
okay so octavia will give the talk

729
00:32:12,240 --> 00:32:14,559
please start yes thanks for the

730
00:32:14,559 --> 00:32:16,880
introduction it's a pleasure to be here

731
00:32:16,880 --> 00:32:19,600
so let's get started um attribute-based

732
00:32:19,600 --> 00:32:21,679
credentials or abc for short allow a

733
00:32:21,679 --> 00:32:23,279
user to get a certified set of

734
00:32:23,279 --> 00:32:25,760
attributes from an issuer this way users

735
00:32:25,760 --> 00:32:27,600
can authenticate themselves by showing

736
00:32:27,600 --> 00:32:30,000
some of the attributes to verify

737
00:32:30,000 --> 00:32:31,840
anonymous abcs allow users

738
00:32:31,840 --> 00:32:34,000
authentication without leaking any other

739
00:32:34,000 --> 00:32:36,480
information besides the shown attributes

740
00:32:36,480 --> 00:32:38,080
some systems

741
00:32:38,080 --> 00:32:39,600
can be multi-shown which means that they

742
00:32:39,600 --> 00:32:41,840
allow an arbitrary number of unlinkable

743
00:32:41,840 --> 00:32:42,880
showings

744
00:32:42,880 --> 00:32:44,799
finally we can also have a

745
00:32:44,799 --> 00:32:47,120
multi-authority services which allow

746
00:32:47,120 --> 00:32:49,200
users to obtain a single credential for

747
00:32:49,200 --> 00:32:50,799
attributes potentially coming from

748
00:32:50,799 --> 00:32:52,640
different authorities

749
00:32:52,640 --> 00:32:55,279
in this work we consider multi-show abcs

750
00:32:55,279 --> 00:32:58,399
in the single authority setting

751
00:32:58,399 --> 00:33:00,240
the main differences between the recent

752
00:33:00,240 --> 00:33:02,480
constructions include the expressiveness

753
00:33:02,480 --> 00:33:04,559
efficiency in terms of computational

754
00:33:04,559 --> 00:33:06,080
cost and bandwidth

755
00:33:06,080 --> 00:33:07,919
the communication in terms of whether or

756
00:33:07,919 --> 00:33:09,519
not they provide non-interactive

757
00:33:09,519 --> 00:33:11,760
features the security model

758
00:33:11,760 --> 00:33:12,960
and if

759
00:33:12,960 --> 00:33:13,679
they

760
00:33:13,679 --> 00:33:17,200
handle and how revocation features

761
00:33:17,200 --> 00:33:18,880
one thing that none of the previous work

762
00:33:18,880 --> 00:33:20,720
address was the problem of leaking the

763
00:33:20,720 --> 00:33:23,120
issuer identity to address this issue we

764
00:33:23,120 --> 00:33:25,200
propose a notion called signer hiding

765
00:33:25,200 --> 00:33:27,600
and it refers to the ability to hide the

766
00:33:27,600 --> 00:33:29,919
identity of the issuer during showings

767
00:33:29,919 --> 00:33:32,320
this concept was also recently developed

768
00:33:32,320 --> 00:33:34,240
on concurrent and independent work under

769
00:33:34,240 --> 00:33:36,960
a similar name of issuer hiding and

770
00:33:36,960 --> 00:33:39,919
presented attends 2021

771
00:33:39,919 --> 00:33:42,559
so if we consider the following scenario

772
00:33:42,559 --> 00:33:44,080
where we have a seller offering

773
00:33:44,080 --> 00:33:46,480
discounts for european non-spanish

774
00:33:46,480 --> 00:33:48,799
residents a user could claim that it's

775
00:33:48,799 --> 00:33:51,279
french but this that would be away too

776
00:33:51,279 --> 00:33:53,279
much information to every file and

777
00:33:53,279 --> 00:33:54,960
furthermore if the credentials are

778
00:33:54,960 --> 00:33:56,720
issued by home countries no matter which

779
00:33:56,720 --> 00:33:59,120
attributes users decide to disclose with

780
00:33:59,120 --> 00:34:00,799
a verifier their home country will be

781
00:34:00,799 --> 00:34:02,159
leaked

782
00:34:02,159 --> 00:34:04,000
what we want in scenarios like this one

783
00:34:04,000 --> 00:34:05,919
is to avoid such things and find a way

784
00:34:05,919 --> 00:34:07,600
in which users can convince the very

785
00:34:07,600 --> 00:34:09,199
fire without giving away information

786
00:34:09,199 --> 00:34:11,119
from their country of foreign

787
00:34:11,119 --> 00:34:13,119
a way to convince the verifier about

788
00:34:13,119 --> 00:34:15,599
being european but not spanish

789
00:34:15,599 --> 00:34:17,440
is to hide the issuer's identity in a

790
00:34:17,440 --> 00:34:19,119
set of valid countries like in this

791
00:34:19,119 --> 00:34:21,839
example

792
00:34:22,879 --> 00:34:26,399
so i will now comment on how we

793
00:34:26,399 --> 00:34:29,040
went towards more improved constructions

794
00:34:29,040 --> 00:34:30,560
of

795
00:34:30,560 --> 00:34:33,119
anonymous credentials

796
00:34:33,119 --> 00:34:35,440
so in this regard our work followed the

797
00:34:35,440 --> 00:34:37,599
line of work from fishfire hansard and

798
00:34:37,599 --> 00:34:40,159
slammanix from 2019 which is based on

799
00:34:40,159 --> 00:34:41,839
instructor preserving cyanators on

800
00:34:41,839 --> 00:34:44,000
equivalent classes or sps on eq for

801
00:34:44,000 --> 00:34:45,359
short

802
00:34:45,359 --> 00:34:47,440
and in this regard we focus on improving

803
00:34:47,440 --> 00:34:49,918
the following aspect the expressiveness

804
00:34:49,918 --> 00:34:51,839
extending the accumulator using the

805
00:34:51,839 --> 00:34:53,918
credential scheme the efficiency

806
00:34:53,918 --> 00:34:56,399
leveraging user and verifier costs the

807
00:34:56,399 --> 00:34:58,720
security model

808
00:34:58,720 --> 00:35:00,880
and we also added support for signer

809
00:35:00,880 --> 00:35:03,040
hiding shoppings which was the missing

810
00:35:03,040 --> 00:35:06,160
feature i commented before

811
00:35:06,160 --> 00:35:08,480
in order to present our results it would

812
00:35:08,480 --> 00:35:11,440
be useful to use this this diagram

813
00:35:11,440 --> 00:35:13,760
and if we look it like top down you can

814
00:35:13,760 --> 00:35:16,000
see that the boxes in grace highlight

815
00:35:16,000 --> 00:35:17,599
our contributions

816
00:35:17,599 --> 00:35:19,440
and the first one was related to an

817
00:35:19,440 --> 00:35:20,880
improvement on the

818
00:35:20,880 --> 00:35:22,560
preserving signature

819
00:35:22,560 --> 00:35:24,880
that we that we use

820
00:35:24,880 --> 00:35:26,800
from a recent construction that was

821
00:35:26,800 --> 00:35:28,640
proven securing using standard

822
00:35:28,640 --> 00:35:31,200
assumptions here we replaced

823
00:35:31,200 --> 00:35:33,440
an old proof that was being used

824
00:35:33,440 --> 00:35:35,200
with a one that is more efficient and

825
00:35:35,200 --> 00:35:36,400
also added

826
00:35:36,400 --> 00:35:37,680
and

827
00:35:37,680 --> 00:35:39,359
an extension to support what is called

828
00:35:39,359 --> 00:35:41,359
mercurial signatures so that the

829
00:35:41,359 --> 00:35:43,440
signature connects on both

830
00:35:43,440 --> 00:35:45,280
equivalent classes on the message space

831
00:35:45,280 --> 00:35:47,200
but also on the

832
00:35:47,200 --> 00:35:48,720
on the key space

833
00:35:48,720 --> 00:35:50,160
then we improve the set commitment

834
00:35:50,160 --> 00:35:53,359
scheme that was being used before and by

835
00:35:53,359 --> 00:35:55,040
applying an extension

836
00:35:55,040 --> 00:35:58,000
to support batch non-membership proofs

837
00:35:58,000 --> 00:35:59,920
and also a proof of exponentiation that

838
00:35:59,920 --> 00:36:01,920
is outsourcing some of the computational

839
00:36:01,920 --> 00:36:05,280
costs from the verifier to the user

840
00:36:05,280 --> 00:36:06,560
we

841
00:36:06,560 --> 00:36:08,240
we we instantiate

842
00:36:08,240 --> 00:36:10,400
these primitives on the previous abc

843
00:36:10,400 --> 00:36:12,720
framework but then we added the designer

844
00:36:12,720 --> 00:36:13,839
hiding

845
00:36:13,839 --> 00:36:16,320
functionality and of course

846
00:36:16,320 --> 00:36:18,320
we had to

847
00:36:18,320 --> 00:36:19,599
support the

848
00:36:19,599 --> 00:36:22,240
security model we updated it

849
00:36:22,240 --> 00:36:24,560
so to to take into account these

850
00:36:24,560 --> 00:36:26,800
modifications

851
00:36:26,800 --> 00:36:29,920
so go into a signer hiding

852
00:36:29,920 --> 00:36:32,320
details

853
00:36:32,320 --> 00:36:34,800
the main idea is that one first

854
00:36:34,800 --> 00:36:37,680
randomize the the credential

855
00:36:37,680 --> 00:36:40,640
and the issuer public key consistently

856
00:36:40,640 --> 00:36:42,160
then one

857
00:36:42,160 --> 00:36:44,560
presents to the verifier

858
00:36:44,560 --> 00:36:45,839
along with a proof of correct

859
00:36:45,839 --> 00:36:47,520
randomization of the issuer's public key

860
00:36:47,520 --> 00:36:49,520
and this is to avoid for instance that

861
00:36:49,520 --> 00:36:51,839
the that the user self-signed some

862
00:36:51,839 --> 00:36:53,599
credentials randomize the public key and

863
00:36:53,599 --> 00:36:55,520
presents a public key that is not coming

864
00:36:55,520 --> 00:36:57,440
from a valid authority

865
00:36:57,440 --> 00:36:59,599
and to do this we use a 1 out of 10 or

866
00:36:59,599 --> 00:37:01,680
proof which is a fully adaptive music

867
00:37:01,680 --> 00:37:02,720
argument

868
00:37:02,720 --> 00:37:04,720
and the advantage of this is that users

869
00:37:04,720 --> 00:37:06,720
can select arbitrarily long sets of

870
00:37:06,720 --> 00:37:09,280
public keys to compute the proof

871
00:37:09,280 --> 00:37:11,440
with linear cost like in the example the

872
00:37:11,440 --> 00:37:14,160
user can say it's coming from a european

873
00:37:14,160 --> 00:37:16,720
country but without telling which one to

874
00:37:16,720 --> 00:37:19,040
the to the seller

875
00:37:19,040 --> 00:37:20,000
so

876
00:37:20,000 --> 00:37:21,760
to conclude

877
00:37:21,760 --> 00:37:24,079
well our results explore multiple paths

878
00:37:24,079 --> 00:37:27,359
to extend the abc framework from fhs 19

879
00:37:27,359 --> 00:37:29,040
we obtain a more flexible framework

880
00:37:29,040 --> 00:37:32,320
leveraging different trade-offs

881
00:37:32,320 --> 00:37:33,920
the proposed design and hiding notion

882
00:37:33,920 --> 00:37:36,960
enables more use cases and as future

883
00:37:36,960 --> 00:37:38,880
work we consider that exploring the use

884
00:37:38,880 --> 00:37:41,040
of aggregateable signatures with sps and

885
00:37:41,040 --> 00:37:43,119
eq in the multi-authority setting could

886
00:37:43,119 --> 00:37:45,839
enable even more use cases and also that

887
00:37:45,839 --> 00:37:47,920
devising other ways to define equal and

888
00:37:47,920 --> 00:37:49,280
classes could lead to new and more

889
00:37:49,280 --> 00:37:51,200
efficient constructions and the reason

890
00:37:51,200 --> 00:37:53,280
behind it is that currently unknown

891
00:37:53,280 --> 00:37:55,040
constructions rely on this helmet like

892
00:37:55,040 --> 00:37:56,880
assumptions

893
00:37:56,880 --> 00:37:58,240
that would be all thank you very much

894
00:37:58,240 --> 00:37:59,599
for your time and happy to answer any

895
00:37:59,599 --> 00:38:02,320
questions you may have

896
00:38:02,880 --> 00:38:05,599
okay thanks so are there any questions

897
00:38:05,599 --> 00:38:08,240
or comments

898
00:38:12,640 --> 00:38:14,800
hi um

899
00:38:14,800 --> 00:38:17,599
i was wondering uh the original

900
00:38:17,599 --> 00:38:20,480
equivalence class signatures had a

901
00:38:20,480 --> 00:38:24,240
uh a weakness in that if you know

902
00:38:24,240 --> 00:38:26,000
two or more of the

903
00:38:26,000 --> 00:38:27,920
uh the scalar elements of the message

904
00:38:27,920 --> 00:38:30,560
that lets you recognize the message even

905
00:38:30,560 --> 00:38:32,720
after randomization

906
00:38:32,720 --> 00:38:35,119
um this was big enough that material

907
00:38:35,119 --> 00:38:36,960
signatures had to weaken their anonymity

908
00:38:36,960 --> 00:38:38,079
model

909
00:38:38,079 --> 00:38:40,240
have you considered whether that affects

910
00:38:40,240 --> 00:38:42,079
your

911
00:38:42,079 --> 00:38:44,480
construction particularly with regard to

912
00:38:44,480 --> 00:38:49,280
cyno hiding okay so let's go by by part

913
00:38:49,280 --> 00:38:50,960
the construction used on the mercurial

914
00:38:50,960 --> 00:38:52,560
signature paper is coming from the

915
00:38:52,560 --> 00:38:55,440
original fhs-19 paper

916
00:38:55,440 --> 00:38:57,599
in our work we did not use this

917
00:38:57,599 --> 00:39:00,560
construction as a veil as a baseline

918
00:39:00,560 --> 00:39:03,280
we could instantiate our results with

919
00:39:03,280 --> 00:39:04,880
the mercurial signature construction

920
00:39:04,880 --> 00:39:06,640
coming from the the

921
00:39:06,640 --> 00:39:08,240
the mercurial signature paper that you

922
00:39:08,240 --> 00:39:09,839
that you're referring to which is based

923
00:39:09,839 --> 00:39:13,839
on the original on the first sps on aq

924
00:39:13,839 --> 00:39:16,560
but we took a different path and so let

925
00:39:16,560 --> 00:39:19,839
me go back to the slide here

926
00:39:20,480 --> 00:39:22,400
so as i said the structure preserving

927
00:39:22,400 --> 00:39:23,920
signature that we are using as a

928
00:39:23,920 --> 00:39:25,280
baseline is

929
00:39:25,280 --> 00:39:30,079
one coming from karil islamani and uh

930
00:39:30,079 --> 00:39:32,880
okay and this

931
00:39:32,880 --> 00:39:34,640
it's a it's a it's a different type of

932
00:39:34,640 --> 00:39:36,720
construction so

933
00:39:36,720 --> 00:39:38,320
the the issue that you're mentioning i

934
00:39:38,320 --> 00:39:39,359
don't think it's pressing on this

935
00:39:39,359 --> 00:39:41,440
construction

936
00:39:41,440 --> 00:39:44,640
but we we can discuss it uh

937
00:39:44,640 --> 00:39:46,560
more in detail offline

938
00:39:46,560 --> 00:39:47,839
uh now

939
00:39:47,839 --> 00:39:50,480
thinking about the original construction

940
00:39:50,480 --> 00:39:52,320
the length of the vector

941
00:39:52,320 --> 00:39:54,320
because the length of the of the of the

942
00:39:54,320 --> 00:39:57,119
message vector used in our anonymous

943
00:39:57,119 --> 00:39:58,880
credential

944
00:39:58,880 --> 00:40:03,680
system it's just the use of length five

945
00:40:04,000 --> 00:40:05,440
i don't believe that

946
00:40:05,440 --> 00:40:07,200
there's there is a vulnerability here

947
00:40:07,200 --> 00:40:09,440
because for the difficult mantap the

948
00:40:09,440 --> 00:40:11,280
you have the ddh

949
00:40:11,280 --> 00:40:12,319
and

950
00:40:12,319 --> 00:40:14,480
should should be fine but

951
00:40:14,480 --> 00:40:16,880
maybe you can specify a bit more the

952
00:40:16,880 --> 00:40:18,880
your point if sorry if i

953
00:40:18,880 --> 00:40:20,079
missed something

954
00:40:20,079 --> 00:40:22,319
yeah that's fine um we can uh we can go

955
00:40:22,319 --> 00:40:24,240
into more detail on xerox

956
00:40:24,240 --> 00:40:27,280
okay happy happy to do so

957
00:40:27,280 --> 00:40:29,520
thanks

958
00:40:29,680 --> 00:40:32,000
thank you

959
00:40:33,440 --> 00:40:38,520
so any other questions or comments

960
00:40:47,040 --> 00:40:49,119
okay so i give one question i'm sorry

961
00:40:49,119 --> 00:40:51,359
but i can't follow the presentation very

962
00:40:51,359 --> 00:40:52,880
much and

963
00:40:52,880 --> 00:40:56,240
what is the main benefit of your work

964
00:40:56,240 --> 00:40:59,359
okay so you could say that we are the

965
00:40:59,359 --> 00:41:02,079
the future of managing designer hiding

966
00:41:02,079 --> 00:41:04,160
part which was a missing feature on the

967
00:41:04,160 --> 00:41:06,720
previous work

968
00:41:06,960 --> 00:41:09,119
all of the all of the different lines of

969
00:41:09,119 --> 00:41:11,440
work always rely on a signature

970
00:41:11,440 --> 00:41:13,359
construction okay

971
00:41:13,359 --> 00:41:15,280
and the thing is that once that your

972
00:41:15,280 --> 00:41:17,599
credential is represented as a signature

973
00:41:17,599 --> 00:41:20,400
and the public key i use to verify to

974
00:41:20,400 --> 00:41:22,000
verify it leaks the identity of the

975
00:41:22,000 --> 00:41:24,880
issuer and in some contexts the identity

976
00:41:24,880 --> 00:41:28,079
of the issuer may be enough to reveal

977
00:41:28,079 --> 00:41:30,640
identity identity of the user

978
00:41:30,640 --> 00:41:32,800
suppose that you're using a credential

979
00:41:32,800 --> 00:41:34,560
system on a federated

980
00:41:34,560 --> 00:41:36,640
level where you have a different set of

981
00:41:36,640 --> 00:41:39,440
authorities if i know that the that the

982
00:41:39,440 --> 00:41:41,200
credential is coming from a particular

983
00:41:41,200 --> 00:41:43,599
authority that may be enough to

984
00:41:43,599 --> 00:41:45,839
de-anonymize the user okay so i want to

985
00:41:45,839 --> 00:41:49,040
hide the user identity as much as i can

986
00:41:49,040 --> 00:41:50,480
this is what we achieve with designer

987
00:41:50,480 --> 00:41:51,760
hiding notion

988
00:41:51,760 --> 00:41:53,280
for instance

989
00:41:53,280 --> 00:41:54,880
then there are other improvements in

990
00:41:54,880 --> 00:41:56,960
terms of efficiency related to

991
00:41:56,960 --> 00:41:58,720
outsourcing some of the computational

992
00:41:58,720 --> 00:41:59,599
cost

993
00:41:59,599 --> 00:42:00,960
in the showing protocol from the

994
00:42:00,960 --> 00:42:03,440
verifier to the prover and also in terms

995
00:42:03,440 --> 00:42:05,839
of the expressiveness by extending the

996
00:42:05,839 --> 00:42:08,000
features of the underlying accumulator

997
00:42:08,000 --> 00:42:10,000
that is being used to represent the

998
00:42:10,000 --> 00:42:11,280
credential

999
00:42:11,280 --> 00:42:12,880
and this is where the proof of

1000
00:42:12,880 --> 00:42:15,520
non-membership comes into play

1001
00:42:15,520 --> 00:42:17,680
before that you only have selective

1002
00:42:17,680 --> 00:42:19,839
disclosure of attributes let's say i

1003
00:42:19,839 --> 00:42:21,599
can't i can say things about the

1004
00:42:21,599 --> 00:42:22,880
attributes that i have but it's

1005
00:42:22,880 --> 00:42:24,400
difficult for me to tell you things

1006
00:42:24,400 --> 00:42:26,560
about the attributes that i do not have

1007
00:42:26,560 --> 00:42:28,240
now with this extension it's possible

1008
00:42:28,240 --> 00:42:30,319
for you to prove that you do not have a

1009
00:42:30,319 --> 00:42:32,880
certain set of attributes and this also

1010
00:42:32,880 --> 00:42:34,720
with a single with a single proof for

1011
00:42:34,720 --> 00:42:36,560
the whole set of attributes that you

1012
00:42:36,560 --> 00:42:40,400
want to say i don't have for instance

1013
00:42:40,720 --> 00:42:42,000
okay thanks

1014
00:42:42,000 --> 00:42:43,520
so

1015
00:42:43,520 --> 00:42:45,680
let's go to the next talk thanks of

1016
00:42:45,680 --> 00:42:46,720
tabio

1017
00:42:46,720 --> 00:42:48,960
thank you

1018
00:42:48,960 --> 00:42:50,000
all right

1019
00:42:50,000 --> 00:42:55,240
cool let me share my screen really quick

1020
00:42:58,160 --> 00:43:00,319
is it working

1021
00:43:00,319 --> 00:43:01,359
please wait

1022
00:43:01,359 --> 00:43:03,520
okay

1023
00:43:10,960 --> 00:43:13,520
i cannot see your slide

1024
00:43:13,520 --> 00:43:18,000
um okay that's weird it says

1025
00:43:19,270 --> 00:43:22,329
[Music]

1026
00:43:24,079 --> 00:43:28,240
are you using two monitors by chance

1027
00:43:34,319 --> 00:43:37,599
ah sorry somehow zoom crashed

1028
00:43:37,599 --> 00:43:40,390
try again

1029
00:43:40,390 --> 00:43:43,609
[Music]

1030
00:43:45,359 --> 00:43:47,040
yeah now can you see

1031
00:43:47,040 --> 00:43:50,560
okay it's okay so the next stocking

1032
00:43:50,560 --> 00:43:52,800
is about prs for content resistance and

1033
00:43:52,800 --> 00:43:56,000
active security by salsi maitra and

1034
00:43:56,000 --> 00:43:58,720
david ii okay so please start your talk

1035
00:43:58,720 --> 00:44:01,119
great thanks for the introduction so uh

1036
00:44:01,119 --> 00:44:02,480
this talk will be about traceable

1037
00:44:02,480 --> 00:44:04,000
pseudorandom functions in this joint

1038
00:44:04,000 --> 00:44:06,240
work with cyrus matra

1039
00:44:06,240 --> 00:44:07,680
so the main goal of traceable

1040
00:44:07,680 --> 00:44:10,160
cryptography is roughly as follows some

1041
00:44:10,160 --> 00:44:12,560
content distributor has some program p

1042
00:44:12,560 --> 00:44:14,240
and it wants to give out copies of this

1043
00:44:14,240 --> 00:44:17,040
program key to a set of users

1044
00:44:17,040 --> 00:44:19,200
now each of these copies are going to be

1045
00:44:19,200 --> 00:44:20,880
marked with an identifier which might be

1046
00:44:20,880 --> 00:44:23,280
the user name or some serial number

1047
00:44:23,280 --> 00:44:26,240
and the objective is that each user once

1048
00:44:26,240 --> 00:44:28,319
they have their own copy of the program

1049
00:44:28,319 --> 00:44:30,000
they should not be able to produce a new

1050
00:44:30,000 --> 00:44:31,839
copy of the program that does not

1051
00:44:31,839 --> 00:44:34,000
contain the identifier associated with

1052
00:44:34,000 --> 00:44:37,280
them and this is a useful primitive for

1053
00:44:37,280 --> 00:44:39,200
protecting against the unauthorized

1054
00:44:39,200 --> 00:44:41,680
distribution of software

1055
00:44:41,680 --> 00:44:43,200
now the focus in this work is we're

1056
00:44:43,200 --> 00:44:45,040
going to focus on one particular class

1057
00:44:45,040 --> 00:44:47,040
of problems namely protecting

1058
00:44:47,040 --> 00:44:49,119
pseudorandom functions which in turn

1059
00:44:49,119 --> 00:44:50,800
give us ways of protecting various

1060
00:44:50,800 --> 00:44:53,599
symmetric cryptographic capabilities so

1061
00:44:53,599 --> 00:44:55,359
in this particular setting the program

1062
00:44:55,359 --> 00:44:57,680
of interest is a pseudo-random function

1063
00:44:57,680 --> 00:45:00,240
it has a key for the prf baked inside it

1064
00:45:00,240 --> 00:45:01,920
takes an input and evaluates the

1065
00:45:01,920 --> 00:45:04,000
pseudo-random function and produces the

1066
00:45:04,000 --> 00:45:05,119
output

1067
00:45:05,119 --> 00:45:07,119
our goal is to be able to embed some

1068
00:45:07,119 --> 00:45:09,440
kind of mark or identifier within the

1069
00:45:09,440 --> 00:45:10,560
program

1070
00:45:10,560 --> 00:45:12,480
such that

1071
00:45:12,480 --> 00:45:14,800
the mark is basically embedded within it

1072
00:45:14,800 --> 00:45:16,880
and cannot be removed without destroying

1073
00:45:16,880 --> 00:45:18,960
the functionality of the program

1074
00:45:18,960 --> 00:45:20,720
this notion is a very conceptually

1075
00:45:20,720 --> 00:45:23,440
similar to watermarking provides a much

1076
00:45:23,440 --> 00:45:25,520
stronger security guarantee in

1077
00:45:25,520 --> 00:45:27,280
particular the security guarantee that

1078
00:45:27,280 --> 00:45:29,599
we're interested in is we're saying that

1079
00:45:29,599 --> 00:45:32,160
if a program see that the adversary

1080
00:45:32,160 --> 00:45:34,000
produces manages to break

1081
00:45:34,000 --> 00:45:36,880
pseudorandomness then that program can

1082
00:45:36,880 --> 00:45:38,960
be traced and we can identify which

1083
00:45:38,960 --> 00:45:41,359
program was used to build this new

1084
00:45:41,359 --> 00:45:44,319
decoder or new distinguisher

1085
00:45:44,319 --> 00:45:46,160
so the goal is to basically construct a

1086
00:45:46,160 --> 00:45:48,079
program that has the

1087
00:45:48,079 --> 00:45:50,079
uh that has the tag embedded within it

1088
00:45:50,079 --> 00:45:51,920
such that that tag can later on be

1089
00:45:51,920 --> 00:45:54,720
recovered given only black box access uh

1090
00:45:54,720 --> 00:45:57,200
to the program itself

1091
00:45:57,200 --> 00:45:59,599
uh this primitive suffices for realizing

1092
00:45:59,599 --> 00:46:02,160
many kinds of traceable primitives such

1093
00:46:02,160 --> 00:46:03,920
as trader tracing and this really

1094
00:46:03,920 --> 00:46:06,079
follows from the fact that encryption

1095
00:46:06,079 --> 00:46:07,520
can be built from pseudo-random

1096
00:46:07,520 --> 00:46:09,200
functions once you can trace a

1097
00:46:09,200 --> 00:46:11,440
pseudo-random function you can trace any

1098
00:46:11,440 --> 00:46:13,680
class of primitives that can be built

1099
00:46:13,680 --> 00:46:16,160
from the pseudo-random function itself

1100
00:46:16,160 --> 00:46:18,079
so if we look at existing constructions

1101
00:46:18,079 --> 00:46:20,400
of traceable pseudorandom functions what

1102
00:46:20,400 --> 00:46:21,599
do we know

1103
00:46:21,599 --> 00:46:23,760
well from standard lattice assumptions

1104
00:46:23,760 --> 00:46:25,280
we know how to build what is called a

1105
00:46:25,280 --> 00:46:27,040
single key traceable pseudorandom

1106
00:46:27,040 --> 00:46:29,359
function and what this means is that

1107
00:46:29,359 --> 00:46:31,839
security holds assuming the adversary

1108
00:46:31,839 --> 00:46:34,560
sees a single marked program it turns

1109
00:46:34,560 --> 00:46:36,160
out that this construction is actually

1110
00:46:36,160 --> 00:46:38,400
completely broken if the adversary just

1111
00:46:38,400 --> 00:46:40,960
sees two marked programs in this sense

1112
00:46:40,960 --> 00:46:42,800
we say the construction is not collusion

1113
00:46:42,800 --> 00:46:44,960
resistant namely given two marked

1114
00:46:44,960 --> 00:46:46,960
programs you can completely remove the

1115
00:46:46,960 --> 00:46:49,359
mark from the program entirely

1116
00:46:49,359 --> 00:46:51,359
if we ask about fully collusion

1117
00:46:51,359 --> 00:46:53,040
resistance namely

1118
00:46:53,040 --> 00:46:54,960
uh where security holds even against

1119
00:46:54,960 --> 00:46:56,800
adversaries that can see arbitrarily

1120
00:46:56,800 --> 00:46:59,680
polynomial number of marked programs we

1121
00:46:59,680 --> 00:47:01,839
say it is fully collusion resistant

1122
00:47:01,839 --> 00:47:03,359
turns out constructing traceable

1123
00:47:03,359 --> 00:47:04,800
pseudorandom functions with full

1124
00:47:04,800 --> 00:47:07,200
collusion resistance is non-trivial and

1125
00:47:07,200 --> 00:47:08,560
we only know how to do it from

1126
00:47:08,560 --> 00:47:11,119
indistinguishability obfuscation so a

1127
00:47:11,119 --> 00:47:12,960
natural question and the one that we ask

1128
00:47:12,960 --> 00:47:14,800
in this work is whether we can hope to

1129
00:47:14,800 --> 00:47:16,560
build collusion resistant traceable

1130
00:47:16,560 --> 00:47:19,920
pseudorandom functions directly from lwe

1131
00:47:19,920 --> 00:47:21,599
and in this work we provide a new

1132
00:47:21,599 --> 00:47:24,319
generic approach to upgrade any single

1133
00:47:24,319 --> 00:47:26,720
key construction into a fully collusion

1134
00:47:26,720 --> 00:47:28,720
resistant construction through the use

1135
00:47:28,720 --> 00:47:30,800
of something called fingerprinting codes

1136
00:47:30,800 --> 00:47:32,160
now fingerprinting codes are an

1137
00:47:32,160 --> 00:47:34,960
information theoretic primitive and so

1138
00:47:34,960 --> 00:47:36,880
combined with the existing constructions

1139
00:47:36,880 --> 00:47:38,720
of single key traceable pseudorandom

1140
00:47:38,720 --> 00:47:40,559
functions we obtain fully collusion

1141
00:47:40,559 --> 00:47:42,079
resistant traceable pseudorandom

1142
00:47:42,079 --> 00:47:43,920
functions from the same underlying

1143
00:47:43,920 --> 00:47:46,240
assumption now there is one caveat in

1144
00:47:46,240 --> 00:47:47,839
our construction in that it only

1145
00:47:47,839 --> 00:47:50,400
supports embedding tags whose

1146
00:47:50,400 --> 00:47:52,640
from a polynomial size set

1147
00:47:52,640 --> 00:47:54,319
and it's an open question to try and

1148
00:47:54,319 --> 00:47:57,119
extend it to also get tags that are much

1149
00:47:57,119 --> 00:47:58,319
larger

1150
00:47:58,319 --> 00:47:59,920
let me now give you a brief overview of

1151
00:47:59,920 --> 00:48:02,240
how the construction operates so in a

1152
00:48:02,240 --> 00:48:04,960
fingerprinting code we basically i

1153
00:48:04,960 --> 00:48:07,040
associate a code word with each

1154
00:48:07,040 --> 00:48:09,200
identifier so the identifiers here are

1155
00:48:09,200 --> 00:48:11,440
the numbers one two and three and the

1156
00:48:11,440 --> 00:48:13,760
arrays correspond to the code words

1157
00:48:13,760 --> 00:48:15,440
now the model that we work in is the

1158
00:48:15,440 --> 00:48:17,839
following imagine an adversary comes

1159
00:48:17,839 --> 00:48:20,240
along and it gets some subset of these

1160
00:48:20,240 --> 00:48:22,079
code words here code words corresponding

1161
00:48:22,079 --> 00:48:24,400
to one and three and the adversary's

1162
00:48:24,400 --> 00:48:26,640
goal is to craft a new code word but

1163
00:48:26,640 --> 00:48:29,200
with the stipulation that in certain

1164
00:48:29,200 --> 00:48:30,559
positions

1165
00:48:30,559 --> 00:48:32,880
it can only choose the value

1166
00:48:32,880 --> 00:48:34,960
as long as it matches one of the code

1167
00:48:34,960 --> 00:48:36,640
words that it is given

1168
00:48:36,640 --> 00:48:38,720
and the goal of the adversary is to

1169
00:48:38,720 --> 00:48:40,720
construct a new code word that happens a

1170
00:48:40,720 --> 00:48:42,720
decode to one of the ones that it was

1171
00:48:42,720 --> 00:48:44,480
not given

1172
00:48:44,480 --> 00:48:46,240
security for a fingerprinting code says

1173
00:48:46,240 --> 00:48:48,319
that no adversary would be able to do

1174
00:48:48,319 --> 00:48:50,720
this provided that the adversary has to

1175
00:48:50,720 --> 00:48:52,800
respect this constraint

1176
00:48:52,800 --> 00:48:54,880
now once we have a fingerprinting code

1177
00:48:54,880 --> 00:48:56,640
it's actually fairly straightforward to

1178
00:48:56,640 --> 00:48:58,319
use it to boost a single key

1179
00:48:58,319 --> 00:49:00,240
construction into a collusion resistant

1180
00:49:00,240 --> 00:49:03,440
construction the idea is as follows

1181
00:49:03,440 --> 00:49:05,839
the traceable prf is going to be defined

1182
00:49:05,839 --> 00:49:08,160
to be l copies of the single key

1183
00:49:08,160 --> 00:49:10,480
traceable prf where l is the length of

1184
00:49:10,480 --> 00:49:12,319
the fingerprinting code that we just

1185
00:49:12,319 --> 00:49:14,480
simply combine them by just xoring all

1186
00:49:14,480 --> 00:49:16,880
of these independent copies together

1187
00:49:16,880 --> 00:49:19,520
now to embed an identity or to mark a

1188
00:49:19,520 --> 00:49:21,760
particular pseudo-random function what

1189
00:49:21,760 --> 00:49:24,240
we do is we start by taking the identity

1190
00:49:24,240 --> 00:49:26,400
we encode it using the fingerprinting

1191
00:49:26,400 --> 00:49:28,880
code this gives us a code word and then

1192
00:49:28,880 --> 00:49:31,200
we basically embed the ice bit of the

1193
00:49:31,200 --> 00:49:33,680
code word in the ice key of the single

1194
00:49:33,680 --> 00:49:35,760
key traceable pseudorandom function so

1195
00:49:35,760 --> 00:49:38,000
we're going to mark it l times one for

1196
00:49:38,000 --> 00:49:40,559
each bit of the code word

1197
00:49:40,559 --> 00:49:42,800
the idea is now as follows

1198
00:49:42,800 --> 00:49:45,680
observe that if the code words all agree

1199
00:49:45,680 --> 00:49:48,079
on a particular position then all of the

1200
00:49:48,079 --> 00:49:50,559
marked keys that the adversary sees also

1201
00:49:50,559 --> 00:49:52,400
are marked with the same bit in that

1202
00:49:52,400 --> 00:49:54,400
particular position the adversary only

1203
00:49:54,400 --> 00:49:57,040
sees a single mark key and thus we can

1204
00:49:57,040 --> 00:49:59,280
actually appeal the single key security

1205
00:49:59,280 --> 00:50:01,200
the underlying security of the traceable

1206
00:50:01,200 --> 00:50:04,079
prf uh to enforce the constraints of the

1207
00:50:04,079 --> 00:50:06,720
fingerprinting code model now suddenly

1208
00:50:06,720 --> 00:50:08,640
the security of the resulting traceable

1209
00:50:08,640 --> 00:50:10,960
qrf reduces the that of the underlying

1210
00:50:10,960 --> 00:50:12,480
fingerprinting code

1211
00:50:12,480 --> 00:50:14,880
so just to briefly summarize in our work

1212
00:50:14,880 --> 00:50:16,960
we propose a generic approach that

1213
00:50:16,960 --> 00:50:19,119
upgrades any single key construction

1214
00:50:19,119 --> 00:50:21,119
into a fully collusion resistant

1215
00:50:21,119 --> 00:50:22,559
construction through the use of

1216
00:50:22,559 --> 00:50:25,520
fingerprinting codes and so under lwe we

1217
00:50:25,520 --> 00:50:27,359
now can have a fully collusion resistant

1218
00:50:27,359 --> 00:50:29,520
traceable prf with exactly the same

1219
00:50:29,520 --> 00:50:31,920
properties as we had previously

1220
00:50:31,920 --> 00:50:33,920
it turns out that similar extensions to

1221
00:50:33,920 --> 00:50:35,680
our technique can also be used to

1222
00:50:35,680 --> 00:50:37,839
achieve stronger security in this talk i

1223
00:50:37,839 --> 00:50:40,160
won't go into details but basically we

1224
00:50:40,160 --> 00:50:42,559
can define an active notion of security

1225
00:50:42,559 --> 00:50:44,559
uh for the uh setting of traceable

1226
00:50:44,559 --> 00:50:46,720
pseudorandom functions and show that our

1227
00:50:46,720 --> 00:50:49,119
new boosting technique also allows us to

1228
00:50:49,119 --> 00:50:51,920
satisfy this active security notion

1229
00:50:51,920 --> 00:50:53,359
and i'll leave you with one open

1230
00:50:53,359 --> 00:50:55,280
question which is can we try and build

1231
00:50:55,280 --> 00:50:56,720
collusion resistant traceable

1232
00:50:56,720 --> 00:50:58,559
pseudorandom functions with a super

1233
00:50:58,559 --> 00:51:00,640
polynomial side identity space from

1234
00:51:00,640 --> 00:51:02,240
standard assumptions so we know how to

1235
00:51:02,240 --> 00:51:04,079
do this for trader tracing but we don't

1236
00:51:04,079 --> 00:51:06,079
know how to do it for traceable prfs and

1237
00:51:06,079 --> 00:51:07,440
with that i'll wrap up thanks for your

1238
00:51:07,440 --> 00:51:09,839
attention

1239
00:51:10,960 --> 00:51:13,520
okay thanks for your talk so are there

1240
00:51:13,520 --> 00:51:17,480
any questions or comments

1241
00:51:25,040 --> 00:51:28,079
okay so i'll give a question uh

1242
00:51:28,079 --> 00:51:30,160
although you may

1243
00:51:30,160 --> 00:51:32,240
have been said uh i don't know what

1244
00:51:32,240 --> 00:51:34,400
these are the economical limit to

1245
00:51:34,400 --> 00:51:37,520
achieve super polynomial identity space

1246
00:51:37,520 --> 00:51:39,760
why you cannot achieve there are

1247
00:51:39,760 --> 00:51:42,160
ah yeah that's a great question so the

1248
00:51:42,160 --> 00:51:43,839
limitation actually comes from the

1249
00:51:43,839 --> 00:51:46,720
fingerprinting codes uh so if we just

1250
00:51:46,720 --> 00:51:49,200
look at traceable pseudorandom functions

1251
00:51:49,200 --> 00:51:50,880
in a single key setting there we know

1252
00:51:50,880 --> 00:51:53,040
how to get super polynomial identity

1253
00:51:53,040 --> 00:51:53,920
space

1254
00:51:53,920 --> 00:51:56,000
but for a fingerprinting code basically

1255
00:51:56,000 --> 00:51:57,920
the length of the codes that we have

1256
00:51:57,920 --> 00:51:59,920
today grows as the size of the identity

1257
00:51:59,920 --> 00:52:01,280
space so

1258
00:52:01,280 --> 00:52:02,960
if you have a super polynomial identity

1259
00:52:02,960 --> 00:52:04,880
space the size of the fingerprinting

1260
00:52:04,880 --> 00:52:06,319
code that you would need

1261
00:52:06,319 --> 00:52:08,240
would also be super polynomial number of

1262
00:52:08,240 --> 00:52:10,319
bits and as a result the construction

1263
00:52:10,319 --> 00:52:13,599
would no longer be efficient

1264
00:52:15,839 --> 00:52:19,440
okay so we have a question on chat

1265
00:52:19,440 --> 00:52:22,160
uh can you talk about applications of 37

1266
00:52:22,160 --> 00:52:24,240
prs and what

1267
00:52:24,240 --> 00:52:26,240
what state is required to be maintained

1268
00:52:26,240 --> 00:52:27,520
over time

1269
00:52:27,520 --> 00:52:30,720
for the tracer yeah so traceable prs is

1270
00:52:30,720 --> 00:52:31,839
basically

1271
00:52:31,839 --> 00:52:33,839
i would say that the primary application

1272
00:52:33,839 --> 00:52:35,359
is a different way of getting trader

1273
00:52:35,359 --> 00:52:37,599
tracing uh so essentially whenever you

1274
00:52:37,599 --> 00:52:40,319
want to protect uh a pseudo-random

1275
00:52:40,319 --> 00:52:42,400
function be it for the pseudo-random

1276
00:52:42,400 --> 00:52:44,240
function the prft let's say for a

1277
00:52:44,240 --> 00:52:46,800
decryption system or maybe a trf key in

1278
00:52:46,800 --> 00:52:48,640
a challenge response authentication

1279
00:52:48,640 --> 00:52:51,040
system if you want to protect the key a

1280
00:52:51,040 --> 00:52:53,680
traceable prf provides a way to do that

1281
00:52:53,680 --> 00:52:55,040
in terms of the state that needs to be

1282
00:52:55,040 --> 00:52:56,880
maintained over time

1283
00:52:56,880 --> 00:52:59,200
basically in a secret tracing setting

1284
00:52:59,200 --> 00:53:01,599
the only state that you need to

1285
00:53:01,599 --> 00:53:04,079
keep track of is the secret tracing key

1286
00:53:04,079 --> 00:53:06,559
so essentially given any program that

1287
00:53:06,559 --> 00:53:07,760
can

1288
00:53:07,760 --> 00:53:10,400
basically preserve the prf functionality

1289
00:53:10,400 --> 00:53:12,319
there's a tracing algorithm that will be

1290
00:53:12,319 --> 00:53:14,240
able to extract the identity uh from

1291
00:53:14,240 --> 00:53:15,680
that program so you don't need to make

1292
00:53:15,680 --> 00:53:17,520
any assumptions about which programs

1293
00:53:17,520 --> 00:53:19,280
have been given out or which identities

1294
00:53:19,280 --> 00:53:22,240
have been uh have you given out programs

1295
00:53:22,240 --> 00:53:24,240
for all you need to keep track of is the

1296
00:53:24,240 --> 00:53:26,480
secret tracing key now in the public

1297
00:53:26,480 --> 00:53:28,000
tracing setting you can actually do even

1298
00:53:28,000 --> 00:53:30,240
better here there's actually no need to

1299
00:53:30,240 --> 00:53:32,079
keep track of any state just given any

1300
00:53:32,079 --> 00:53:33,599
program and the public key for the

1301
00:53:33,599 --> 00:53:35,920
scheme you would be able to identify who

1302
00:53:35,920 --> 00:53:38,160
was the one that created that program

1303
00:53:38,160 --> 00:53:39,839
but the main applications are the

1304
00:53:39,839 --> 00:53:41,280
protecting against distribution of

1305
00:53:41,280 --> 00:53:43,599
software especially software built from

1306
00:53:43,599 --> 00:53:44,960
pseudorandom functions or other

1307
00:53:44,960 --> 00:53:48,400
cryptographic capabilities

1308
00:53:49,920 --> 00:53:53,520
okay thanks for your nice talk

1309
00:53:53,520 --> 00:53:54,800
yes and

1310
00:53:54,800 --> 00:53:57,200
this is the last talk of the session

1311
00:53:57,200 --> 00:54:00,000
cryptography protocols uh let's thank

1312
00:54:00,000 --> 00:54:03,280
all speakers of this session

1313
00:54:04,400 --> 00:54:05,599
okay so

1314
00:54:05,599 --> 00:54:08,400
we move to the next session

1315
00:54:08,400 --> 00:54:10,720
uh the extension tools

1316
00:54:10,720 --> 00:54:12,960
and the next speaker can you share your

1317
00:54:12,960 --> 00:54:15,280
site

1318
00:54:20,160 --> 00:54:23,520
okay can you see my thread

1319
00:54:23,520 --> 00:54:25,280
yes but

1320
00:54:25,280 --> 00:54:27,280
you use the full screen

1321
00:54:27,280 --> 00:54:30,160
okay so the next stop is lalikan ice

1322
00:54:30,160 --> 00:54:33,040
only isogen is on mongomery carbs by

1323
00:54:33,040 --> 00:54:35,119
hiroshionuki and

1324
00:54:35,119 --> 00:54:38,119
tomokimori

1325
00:54:38,319 --> 00:54:40,319
thank you for the introduction and i

1326
00:54:40,319 --> 00:54:42,480
talked about red caraseogenes on

1327
00:54:42,480 --> 00:54:44,720
mongomery cows and this is a joint work

1328
00:54:44,720 --> 00:54:47,520
with somochimoria

1329
00:54:47,520 --> 00:54:50,000
and radkar isogen is one of the

1330
00:54:50,000 --> 00:54:52,480
techniques speeding up isogenic

1331
00:54:52,480 --> 00:54:54,559
computation

1332
00:54:54,559 --> 00:54:57,359
creature formulas for computing

1333
00:54:57,359 --> 00:54:59,440
repeating exogeny

1334
00:54:59,440 --> 00:55:03,040
of the same degree and were proposed by

1335
00:55:03,040 --> 00:55:06,319
kastrik the crew and belgotra at asia

1336
00:55:06,319 --> 00:55:09,760
crypt 2020.

1337
00:55:09,760 --> 00:55:13,599
radical associates use radicals

1338
00:55:13,599 --> 00:55:17,040
i mean like glycogens and use an enz

1339
00:55:17,040 --> 00:55:21,839
root for a misogyny of degree n

1340
00:55:21,839 --> 00:55:24,079
a cdv shows that

1341
00:55:24,079 --> 00:55:26,640
radical esogenies accelerate small

1342
00:55:26,640 --> 00:55:29,760
degree estrogen computation in c cells

1343
00:55:29,760 --> 00:55:31,200
systems is

1344
00:55:31,200 --> 00:55:35,520
an isogen based key exchange protocol

1345
00:55:35,520 --> 00:55:36,960
and

1346
00:55:36,960 --> 00:55:39,599
the original record isogen formulas are

1347
00:55:39,599 --> 00:55:42,160
constructed on technormal forms

1348
00:55:42,160 --> 00:55:47,960
which are forms of fd curves

1349
00:55:48,319 --> 00:55:50,799
the original writer i searched

1350
00:55:50,799 --> 00:55:51,680
this

1351
00:55:51,680 --> 00:55:55,119
in csf need to transform a take normal

1352
00:55:55,119 --> 00:55:57,599
form into among makeup

1353
00:55:57,599 --> 00:56:00,720
because a computation except for radical

1354
00:56:00,720 --> 00:56:02,960
exogenous

1355
00:56:02,960 --> 00:56:07,119
is more efficient on monomeric curves

1356
00:56:07,119 --> 00:56:09,440
furthermore

1357
00:56:09,440 --> 00:56:13,599
we need to choose the nth root

1358
00:56:13,599 --> 00:56:16,400
corresponding to an esogenic of degree

1359
00:56:16,400 --> 00:56:17,839
and in

1360
00:56:17,839 --> 00:56:19,839
shishav

1361
00:56:19,839 --> 00:56:22,079
if and is odd

1362
00:56:22,079 --> 00:56:25,040
it is easy to determine

1363
00:56:25,040 --> 00:56:28,400
but in the case n equal 4

1364
00:56:28,400 --> 00:56:29,520
cdb

1365
00:56:29,520 --> 00:56:32,160
conjecture conjectures

1366
00:56:32,160 --> 00:56:33,280
shared

1367
00:56:33,280 --> 00:56:35,359
the choice of

1368
00:56:35,359 --> 00:56:40,480
the fourth route but it was not proven

1369
00:56:40,480 --> 00:56:43,280
in this work we constructed radical

1370
00:56:43,280 --> 00:56:46,000
exogenous of degrees three and four

1371
00:56:46,000 --> 00:56:47,680
among americans

1372
00:56:47,680 --> 00:56:50,240
and in addition we proved the conjecture

1373
00:56:50,240 --> 00:56:54,078
on n equal four in shiselle

1374
00:56:54,720 --> 00:56:56,160
these figures

1375
00:56:56,160 --> 00:56:57,119
show

1376
00:56:57,119 --> 00:56:58,960
a comparison of

1377
00:56:58,960 --> 00:57:03,359
our formulas and those of cdb

1378
00:57:03,359 --> 00:57:05,680
in cdb we need to

1379
00:57:05,680 --> 00:57:08,400
transform calves at the beginning and

1380
00:57:08,400 --> 00:57:11,359
the end of radical exogenous

1381
00:57:11,359 --> 00:57:14,240
here these esogenies have the same

1382
00:57:14,240 --> 00:57:15,440
degree

1383
00:57:15,440 --> 00:57:19,280
and the transformations are needed for

1384
00:57:19,280 --> 00:57:21,200
exogenesis of

1385
00:57:21,200 --> 00:57:24,079
other degrees

1386
00:57:24,079 --> 00:57:26,079
on the other hand

1387
00:57:26,079 --> 00:57:28,400
in our work we

1388
00:57:28,400 --> 00:57:30,160
don't need

1389
00:57:30,160 --> 00:57:32,000
any transformations

1390
00:57:32,000 --> 00:57:33,760
but we need

1391
00:57:33,760 --> 00:57:35,920
some small computation at the beginning

1392
00:57:35,920 --> 00:57:40,640
and the end of radar estrogen is

1393
00:57:40,640 --> 00:57:43,359
this shows

1394
00:57:43,680 --> 00:57:46,400
the cost of radical exogenous

1395
00:57:46,400 --> 00:57:49,280
and the computation at the beginning and

1396
00:57:49,280 --> 00:57:51,200
the end

1397
00:57:51,200 --> 00:57:54,240
here e stands for exponentiation m

1398
00:57:54,240 --> 00:57:55,680
multiplication

1399
00:57:55,680 --> 00:57:57,119
a addition

1400
00:57:57,119 --> 00:58:01,760
and i inversion in the finite field

1401
00:58:01,760 --> 00:58:05,680
heavy operations are e and i

1402
00:58:05,680 --> 00:58:06,839
as you can

1403
00:58:06,839 --> 00:58:08,640
see

1404
00:58:08,640 --> 00:58:11,680
the cost of

1405
00:58:11,920 --> 00:58:15,119
cost at the beginning and the end in our

1406
00:58:15,119 --> 00:58:16,880
formulas are

1407
00:58:16,880 --> 00:58:18,880
much smaller than

1408
00:58:18,880 --> 00:58:22,319
those of cdb

1409
00:58:22,319 --> 00:58:23,599
however

1410
00:58:23,599 --> 00:58:25,119
this

1411
00:58:25,119 --> 00:58:26,799
improvement is

1412
00:58:26,799 --> 00:58:29,760
small in the total cost in season

1413
00:58:29,760 --> 00:58:31,119
as a result

1414
00:58:31,119 --> 00:58:32,000
our

1415
00:58:32,000 --> 00:58:35,440
formulas slightly improve the efficiency

1416
00:58:35,440 --> 00:58:38,319
of sea surf

1417
00:58:40,400 --> 00:58:44,079
our second contribution is determining

1418
00:58:44,079 --> 00:58:46,319
the choice of the fourth route in sea

1419
00:58:46,319 --> 00:58:47,680
south

1420
00:58:47,680 --> 00:58:50,400
a four montgomery curve defined by this

1421
00:58:50,400 --> 00:58:51,839
equation

1422
00:58:51,839 --> 00:58:54,799
we define its modified mongowa question

1423
00:58:54,799 --> 00:58:57,280
small a as this

1424
00:58:57,280 --> 00:58:58,640
here

1425
00:58:58,640 --> 00:58:59,760
the sign

1426
00:58:59,760 --> 00:59:01,839
is determined by

1427
00:59:01,839 --> 00:59:04,240
the regional symbol of a value depending

1428
00:59:04,240 --> 00:59:06,880
on raj

1429
00:59:06,880 --> 00:59:09,119
then

1430
00:59:09,119 --> 00:59:12,559
our radical exogenous of degree 4 is

1431
00:59:12,559 --> 00:59:14,960
computed by this

1432
00:59:14,960 --> 00:59:16,160
here

1433
00:59:16,160 --> 00:59:19,119
a prime is uh

1434
00:59:19,119 --> 00:59:21,520
the modified mongol equation of the

1435
00:59:21,520 --> 00:59:22,960
codomain of

1436
00:59:22,960 --> 00:59:24,160
uh

1437
00:59:24,160 --> 00:59:27,760
analogical right society of degree 4 and

1438
00:59:27,760 --> 00:59:30,640
alpha is the fourth root of small ray

1439
00:59:30,640 --> 00:59:35,040
computed by this exponentiation

1440
00:59:35,200 --> 00:59:38,000
and from this theorem we can obtain the

1441
00:59:38,000 --> 00:59:43,599
conjecture on n equal 4 in schizo

1442
00:59:43,760 --> 00:59:47,839
and that's all thank you for listening

1443
00:59:49,520 --> 00:59:52,160
okay thanks for a nice talk so

1444
00:59:52,160 --> 00:59:56,359
are there any questions or comments

1445
01:00:01,760 --> 01:00:04,720
so i have one question um

1446
01:00:04,720 --> 01:00:07,599
what is the application of your work i

1447
01:00:07,599 --> 01:00:09,520
i mean the system is the only

1448
01:00:09,520 --> 01:00:11,280
application or

1449
01:00:11,280 --> 01:00:14,400
you are what is the more generic one

1450
01:00:14,400 --> 01:00:17,119
and now

1451
01:00:19,040 --> 01:00:21,599
a currently and no application is only

1452
01:00:21,599 --> 01:00:24,160
shift or she said so seaside like

1453
01:00:24,160 --> 01:00:25,680
protocol

1454
01:00:25,680 --> 01:00:26,559
but

1455
01:00:26,559 --> 01:00:29,200
i think that uh

1456
01:00:29,200 --> 01:00:31,760
for for example a random walk in

1457
01:00:31,760 --> 01:00:35,680
isogenic graph is a

1458
01:00:35,920 --> 01:00:37,359
potentially

1459
01:00:37,359 --> 01:00:40,400
candid application candidate

1460
01:00:40,400 --> 01:00:42,400
okay thanks

1461
01:00:42,400 --> 01:00:47,119
so uh any other questions or comments

1462
01:00:53,599 --> 01:00:56,160
okay so let's go to the next stock

1463
01:00:56,160 --> 01:00:57,839
thanks hiroshi

1464
01:00:57,839 --> 01:01:00,240
thank you

1465
01:01:05,920 --> 01:01:08,960
the next speaker can you share the slide

1466
01:01:08,960 --> 01:01:11,119
okay

1467
01:01:11,119 --> 01:01:12,480
okay can

1468
01:01:12,480 --> 01:01:14,000
wait a minute

1469
01:01:14,000 --> 01:01:16,240
okay

1470
01:01:21,280 --> 01:01:22,720
okay

1471
01:01:22,720 --> 01:01:25,119
is

1472
01:01:25,119 --> 01:01:27,040
okay i can see your side there are next

1473
01:01:27,040 --> 01:01:29,520
stockings it was a simple lattice got it

1474
01:01:29,520 --> 01:01:30,640
took it

1475
01:01:30,640 --> 01:01:33,760
by shiro zhang and yang yu okay please

1476
01:01:33,760 --> 01:01:35,599
give the talk

1477
01:01:35,599 --> 01:01:38,319
okay thanks the introduction this is

1478
01:01:38,319 --> 01:01:40,559
work about towards a simpler lattice

1479
01:01:40,559 --> 01:01:42,880
guitar talking and this is a joint work

1480
01:01:42,880 --> 01:01:45,359
with young

1481
01:01:45,680 --> 01:01:48,000
lattice-based cryptography offers

1482
01:01:48,000 --> 01:01:50,079
powerful advanced cryptographic

1483
01:01:50,079 --> 01:01:51,680
primitives

1484
01:01:51,680 --> 01:01:53,520
abe and more

1485
01:01:53,520 --> 01:01:55,920
many other ones

1486
01:01:55,920 --> 01:01:58,880
let these systems use the lattice gauge

1487
01:01:58,880 --> 01:02:02,000
that is divided by the special vector

1488
01:02:02,000 --> 01:02:03,599
sheet and

1489
01:02:03,599 --> 01:02:06,960
given c the associated algorithms asked

1490
01:02:06,960 --> 01:02:08,960
to find

1491
01:02:08,960 --> 01:02:11,760
some well distributed acts such that the

1492
01:02:11,760 --> 01:02:15,119
inner product of the x and the

1493
01:02:15,119 --> 01:02:18,880
gauge vector is equal to c modulo q and

1494
01:02:18,880 --> 01:02:22,480
typically we we want the output x is

1495
01:02:22,480 --> 01:02:23,839
drawn from

1496
01:02:23,839 --> 01:02:26,640
some discrete caution or its reaction is

1497
01:02:26,640 --> 01:02:29,440
a subculture

1498
01:02:29,599 --> 01:02:32,240
this despite uh

1499
01:02:32,240 --> 01:02:34,400
discussion and supporting simply are

1500
01:02:34,400 --> 01:02:37,200
simple and efficient for power b modules

1501
01:02:37,200 --> 01:02:40,319
but the algorithm becomes completed and

1502
01:02:40,319 --> 01:02:42,799
slow for upgrade modules

1503
01:02:42,799 --> 01:02:44,880
and it's bad that

1504
01:02:44,880 --> 01:02:47,200
studying the efficient

1505
01:02:47,200 --> 01:02:50,079
gj algorithms is of both theoretical and

1506
01:02:50,079 --> 01:02:52,799
practical interest on the one hand

1507
01:02:52,799 --> 01:02:55,119
for better performance many lattice

1508
01:02:55,119 --> 01:02:56,559
systems

1509
01:02:56,559 --> 01:02:59,039
use the rune structure

1510
01:02:59,039 --> 01:03:01,200
for fuel speed up in the ring sighting

1511
01:03:01,200 --> 01:03:04,640
they often use ntg

1512
01:03:04,720 --> 01:03:07,599
the user called prime modulus supporting

1513
01:03:07,599 --> 01:03:11,760
entities and on the other in many

1514
01:03:11,760 --> 01:03:13,039
advanced

1515
01:03:13,039 --> 01:03:15,280
crypt systems the size of q is quite

1516
01:03:15,280 --> 01:03:17,119
large so

1517
01:03:17,119 --> 01:03:18,319
to

1518
01:03:18,319 --> 01:03:20,640
show to contact with architecture we

1519
01:03:20,640 --> 01:03:23,839
already used some crt modulus and in

1520
01:03:23,839 --> 01:03:27,280
this case the queue cannot be the power

1521
01:03:27,280 --> 01:03:28,839
b

1522
01:03:28,839 --> 01:03:32,160
so towards a bitter

1523
01:03:32,160 --> 01:03:34,480
practicality of the kitchen feature we

1524
01:03:34,480 --> 01:03:35,760
present uh

1525
01:03:35,760 --> 01:03:39,119
to randomize the uh giza algorithms for

1526
01:03:39,119 --> 01:03:40,960
archery modules

1527
01:03:40,960 --> 01:03:44,319
we present a new kids gaussian simpler

1528
01:03:44,319 --> 01:03:46,960
that avoid floating point arithmetic in

1529
01:03:46,960 --> 01:03:49,440
existing algorithms and compared with

1530
01:03:49,440 --> 01:03:52,480
the previous algorithms our simpler is

1531
01:03:52,480 --> 01:03:54,480
is

1532
01:03:54,480 --> 01:03:56,240
achieved with the steam quality and the

1533
01:03:56,240 --> 01:03:58,880
sympathetic complicity but is simpler

1534
01:03:58,880 --> 01:04:01,440
and highly paralysable and we also

1535
01:04:01,440 --> 01:04:04,880
propose a new subconscious and simpler

1536
01:04:04,880 --> 01:04:07,039
it's a simple faster and neither

1537
01:04:07,039 --> 01:04:11,440
symmetrically least randomness and

1538
01:04:11,440 --> 01:04:14,480
our simpler is convenient to get closer

1539
01:04:14,480 --> 01:04:17,680
even better quality in practical

1540
01:04:17,680 --> 01:04:19,119
so

1541
01:04:19,119 --> 01:04:21,119
first of all you show our new ph

1542
01:04:21,119 --> 01:04:22,960
gaussian simpler

1543
01:04:22,960 --> 01:04:24,720
um the

1544
01:04:24,720 --> 01:04:27,280
framework of our algorithm is the

1545
01:04:27,280 --> 01:04:28,480
packager

1546
01:04:28,480 --> 01:04:32,160
gaussian simpler and we use the same uh

1547
01:04:32,160 --> 01:04:35,039
metrical factorization strong ingenious

1548
01:04:35,039 --> 01:04:36,799
and essential engine

1549
01:04:36,799 --> 01:04:39,200
so our algorithms follow the same with

1550
01:04:39,200 --> 01:04:41,920
them but we implementing the the step

1551
01:04:41,920 --> 01:04:43,680
one the prohibition simply and

1552
01:04:43,680 --> 01:04:45,039
differently

1553
01:04:45,039 --> 01:04:46,799
uh

1554
01:04:46,799 --> 01:04:49,680
actually the floating pointer schematic

1555
01:04:49,680 --> 01:04:52,319
is from the perturbation sampling in

1556
01:04:52,319 --> 01:04:54,400
previous work

1557
01:04:54,400 --> 01:04:57,200
they use the kolaski decomposition to

1558
01:04:57,200 --> 01:05:00,079
find the square root of the of gravity

1559
01:05:00,079 --> 01:05:01,599
metric

1560
01:05:01,599 --> 01:05:04,559
so to avoid of the

1561
01:05:04,559 --> 01:05:07,599
floating point arithmetic we employed

1562
01:05:07,599 --> 01:05:09,039
this

1563
01:05:09,039 --> 01:05:10,559
this integral

1564
01:05:10,559 --> 01:05:13,280
metric decomposition with a and g and

1565
01:05:13,280 --> 01:05:16,640
energy is a diagonal

1566
01:05:16,640 --> 01:05:18,640
with such a integral metric

1567
01:05:18,640 --> 01:05:20,079
decomposition

1568
01:05:20,079 --> 01:05:22,559
with the perturbation simply can be done

1569
01:05:22,559 --> 01:05:24,079
by applying

1570
01:05:24,079 --> 01:05:27,200
a transformation of a on the discrete

1571
01:05:27,200 --> 01:05:28,640
gaussian

1572
01:05:28,640 --> 01:05:30,400
which is

1573
01:05:30,400 --> 01:05:33,359
simple and highly paralyzable and

1574
01:05:33,359 --> 01:05:36,000
our idea is inspired by the work of

1575
01:05:36,000 --> 01:05:38,880
dukas galbraith rather than you

1576
01:05:38,880 --> 01:05:41,680
but there is a technical difference in

1577
01:05:41,680 --> 01:05:44,880
that the nato metric

1578
01:05:44,880 --> 01:05:46,160
g is

1579
01:05:46,160 --> 01:05:50,400
diagonal but not uh iterative metric so

1580
01:05:50,400 --> 01:05:53,760
this lead this

1581
01:05:54,240 --> 01:05:57,839
reduce the size of a uh it's only k plus

1582
01:05:57,839 --> 01:06:01,839
two columns uh comp is smaller than the

1583
01:06:01,839 --> 01:06:06,160
previous uh results in dgpy 20 and this

1584
01:06:06,160 --> 01:06:08,640
compact metric correctly

1585
01:06:08,640 --> 01:06:12,000
improves the sampling efficiency

1586
01:06:12,000 --> 01:06:14,240
so as for the compilation with genius

1587
01:06:14,240 --> 01:06:17,280
and essential simpler our

1588
01:06:17,280 --> 01:06:19,680
our simpler achieve with the sim costume

1589
01:06:19,680 --> 01:06:21,039
quality with

1590
01:06:21,039 --> 01:06:22,799
and

1591
01:06:22,799 --> 01:06:24,240
they are simpler

1592
01:06:24,240 --> 01:06:27,039
you highly use the flange but others

1593
01:06:27,039 --> 01:06:30,559
simply only use integers so we can

1594
01:06:30,559 --> 01:06:33,200
have later compatibility to constraint

1595
01:06:33,200 --> 01:06:34,400
devices

1596
01:06:34,400 --> 01:06:37,599
and also we have the storage advantage

1597
01:06:37,599 --> 01:06:38,960
and

1598
01:06:38,960 --> 01:06:40,880
both the genius messenger simpler and

1599
01:06:40,880 --> 01:06:43,200
ours runs in linear time

1600
01:06:43,200 --> 01:06:45,599
we also implemented our simpler and

1601
01:06:45,599 --> 01:06:47,920
compared ways uh

1602
01:06:47,920 --> 01:06:50,160
the genius missing so simpler

1603
01:06:50,160 --> 01:06:53,200
implemented in palisade library in this

1604
01:06:53,200 --> 01:06:56,480
picture we can see that our

1605
01:06:56,480 --> 01:07:00,160
our algorithm is as fast as uh

1606
01:07:00,160 --> 01:07:02,960
implemented in palestine

1607
01:07:02,960 --> 01:07:05,599
so in last we will show our new page

1608
01:07:05,599 --> 01:07:08,559
subconscious and simpler

1609
01:07:08,880 --> 01:07:10,960
our key subconscious simpler is very

1610
01:07:10,960 --> 01:07:13,520
different from the previous simpler our

1611
01:07:13,520 --> 01:07:15,440
idea is to convert

1612
01:07:15,440 --> 01:07:16,319
the

1613
01:07:16,319 --> 01:07:17,440
sampling

1614
01:07:17,440 --> 01:07:20,640
for arbitrary modulus to the

1615
01:07:20,640 --> 01:07:24,079
easy and faster simpler for

1616
01:07:24,079 --> 01:07:26,480
the parallel b uh

1617
01:07:26,480 --> 01:07:29,599
q is equal to power b uh this is the

1618
01:07:29,599 --> 01:07:32,880
simple fact that uh for short x if the

1619
01:07:32,880 --> 01:07:36,480
inner product of the x and g is

1620
01:07:36,480 --> 01:07:40,000
equal to u modulus b to the key then in

1621
01:07:40,000 --> 01:07:42,799
the result of the inner product product

1622
01:07:42,799 --> 01:07:46,319
is in the size of u and u minus b to the

1623
01:07:46,319 --> 01:07:48,000
key so

1624
01:07:48,000 --> 01:07:52,559
as for our our our simplest output x

1625
01:07:52,559 --> 01:07:56,160
uh the inner x certified inner products

1626
01:07:56,160 --> 01:07:58,799
of x and the p that

1627
01:07:58,799 --> 01:08:01,599
gives vector g is equal to u modulus q

1628
01:08:01,599 --> 01:08:02,880
we also limit

1629
01:08:02,880 --> 01:08:05,599
the inner product result is in the size

1630
01:08:05,599 --> 01:08:08,720
of u and u minus q

1631
01:08:08,720 --> 01:08:13,760
um notably the value u and u minus q uh

1632
01:08:13,760 --> 01:08:16,000
basically determine the

1633
01:08:16,000 --> 01:08:17,520
last

1634
01:08:17,520 --> 01:08:19,359
the last

1635
01:08:19,359 --> 01:08:22,640
coefficient of the vector x so our

1636
01:08:22,640 --> 01:08:25,520
algorithm can be done by these three

1637
01:08:25,520 --> 01:08:28,880
steps first we can choose the u prime

1638
01:08:28,880 --> 01:08:32,479
according to some probability and then

1639
01:08:32,479 --> 01:08:35,920
we can we can simple the x prime

1640
01:08:35,920 --> 01:08:39,279
is the first p means one

1641
01:08:39,279 --> 01:08:40,799
coefficient

1642
01:08:40,799 --> 01:08:44,479
with uh with the simpler of

1643
01:08:44,479 --> 01:08:45,520
uh

1644
01:08:45,520 --> 01:08:49,920
of the q is equal to b to k minus one

1645
01:08:49,920 --> 01:08:53,120
given u prime and finally we could

1646
01:08:53,120 --> 01:08:55,279
determine the x

1647
01:08:55,279 --> 01:08:59,520
k minus y as per u and x prime

1648
01:08:59,839 --> 01:09:02,399
so as for the comparison with the genius

1649
01:09:02,399 --> 01:09:05,679
mutation proc of simpler

1650
01:09:05,679 --> 01:09:07,839
our

1651
01:09:08,238 --> 01:09:11,279
uh uh the gmp algorithms use the key

1652
01:09:11,279 --> 01:09:14,399
squared log b random bits uh

1653
01:09:14,399 --> 01:09:17,520
which was claimed to be a most optimal

1654
01:09:17,520 --> 01:09:19,439
in these people

1655
01:09:19,439 --> 01:09:21,920
in fact other algorithms without a

1656
01:09:21,920 --> 01:09:24,158
kilogram random bits

1657
01:09:24,158 --> 01:09:25,439
notably

1658
01:09:25,439 --> 01:09:27,920
our organism for arbitrary modulus needs

1659
01:09:27,920 --> 01:09:30,238
an asymptotically same amount of random

1660
01:09:30,238 --> 01:09:33,839
bits without the power b modulus so we

1661
01:09:33,839 --> 01:09:36,080
therefore believe that

1662
01:09:36,080 --> 01:09:38,238
this is essential the optimal in

1663
01:09:38,238 --> 01:09:40,719
randomness costs

1664
01:09:40,719 --> 01:09:44,719
we are simpler is also simple and done

1665
01:09:44,719 --> 01:09:48,960
in the completed magic so our simpler is

1666
01:09:48,960 --> 01:09:51,520
easy to implementation

1667
01:09:51,520 --> 01:09:53,839
as for the quality our

1668
01:09:53,839 --> 01:09:57,440
our algorithms achieve the

1669
01:09:57,440 --> 01:09:59,120
close or even better quality for

1670
01:09:59,120 --> 01:10:00,800
practical permit

1671
01:10:00,800 --> 01:10:04,400
more important our simpler is practical

1672
01:10:04,400 --> 01:10:08,400
fast and we can see in this picture that

1673
01:10:08,400 --> 01:10:10,880
we implemented our

1674
01:10:10,880 --> 01:10:12,960
algorithms with

1675
01:10:12,960 --> 01:10:14,880
and compared with the genius and

1676
01:10:14,880 --> 01:10:16,480
essential proc

1677
01:10:16,480 --> 01:10:17,679
algorithm

1678
01:10:17,679 --> 01:10:20,719
implemented in palisade library

1679
01:10:20,719 --> 01:10:24,000
you can see that our algorithms is

1680
01:10:24,000 --> 01:10:25,719
about

1681
01:10:25,719 --> 01:10:31,360
1.3 to 3.2 times faster than the uh

1682
01:10:31,360 --> 01:10:35,120
genius and essential product algorithms

1683
01:10:35,120 --> 01:10:36,000
so

1684
01:10:36,000 --> 01:10:39,280
that's all thank you

1685
01:10:40,960 --> 01:10:43,120
thanks very nice talk and

1686
01:10:43,120 --> 01:10:46,800
are there any questions or comments

1687
01:10:52,719 --> 01:10:56,320
okay so let's close this session

1688
01:10:56,320 --> 01:11:01,080
thanks for both speakers of this session

