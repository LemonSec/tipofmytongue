1
00:00:00,080 --> 00:00:02,800
hello i'm kamil klushniak and i'm going

2
00:00:02,800 --> 00:00:05,440
to present my recent paper

3
00:00:05,440 --> 00:00:07,680
lockable obfuscation from circularly

4
00:00:07,680 --> 00:00:11,200
insecure fully homomorphic encryption

5
00:00:11,200 --> 00:00:13,040
so let me start by

6
00:00:13,040 --> 00:00:15,759
recalling what is programmable fuscation

7
00:00:15,759 --> 00:00:19,199
so suppose we have a c plus plus program

8
00:00:19,199 --> 00:00:23,039
that takes us input some x and outputs y

9
00:00:23,039 --> 00:00:25,680
and then we have a program

10
00:00:25,680 --> 00:00:28,240
called the obfuscator which is going to

11
00:00:28,240 --> 00:00:30,800
take the source program and output our

12
00:00:30,800 --> 00:00:32,238
obfuscation

13
00:00:32,238 --> 00:00:34,559
so one crucial

14
00:00:34,559 --> 00:00:36,800
thing that we require from

15
00:00:36,800 --> 00:00:39,440
the obfuscated program is that it

16
00:00:39,440 --> 00:00:41,600
preserves functionality and this means

17
00:00:41,600 --> 00:00:42,480
that

18
00:00:42,480 --> 00:00:44,719
on every input the output should be the

19
00:00:44,719 --> 00:00:47,840
same as in the source program

20
00:00:47,840 --> 00:00:51,280
another thing that we require is that

21
00:00:51,280 --> 00:00:53,760
the obfuscated program is only

22
00:00:53,760 --> 00:00:56,840
polynomially slower than the source

23
00:00:56,840 --> 00:01:00,320
program and finally we have our security

24
00:01:00,320 --> 00:01:02,640
guarantee and this is a virtual black

25
00:01:02,640 --> 00:01:05,760
box security which means that even given

26
00:01:05,760 --> 00:01:07,760
the obfuscated program

27
00:01:07,760 --> 00:01:10,960
a evaluator can evaluate it but

28
00:01:10,960 --> 00:01:14,000
looking at the code of this program is

29
00:01:14,000 --> 00:01:16,880
unable to tell any non-trivial

30
00:01:16,880 --> 00:01:20,640
information on the source program

31
00:01:20,799 --> 00:01:22,960
so what functions

32
00:01:22,960 --> 00:01:24,640
can we obfuscate

33
00:01:24,640 --> 00:01:27,920
from standard assumptions right now and

34
00:01:27,920 --> 00:01:30,720
one class of functions are point

35
00:01:30,720 --> 00:01:32,880
functions and so these are these are

36
00:01:32,880 --> 00:01:35,920
functions that take as input

37
00:01:35,920 --> 00:01:41,600
some x and output one only if x is equal

38
00:01:41,600 --> 00:01:44,560
to a hard coded point yeah so a point

39
00:01:44,560 --> 00:01:46,560
that is hard coded in

40
00:01:46,560 --> 00:01:48,159
in this program

41
00:01:48,159 --> 00:01:49,920
for all other

42
00:01:49,920 --> 00:01:52,560
inputs that are not equal

43
00:01:52,560 --> 00:01:55,119
this hard hard-coded point alpha

44
00:01:55,119 --> 00:01:58,240
we are going to return zero and point

45
00:01:58,240 --> 00:02:00,560
functions have received already a lot of

46
00:02:00,560 --> 00:02:02,640
attention in the literature and there

47
00:02:02,640 --> 00:02:06,320
are constructions here from various

48
00:02:06,320 --> 00:02:07,759
assumptions

49
00:02:07,759 --> 00:02:10,479
another important class of functions

50
00:02:10,479 --> 00:02:13,440
that we know how to obfuscate

51
00:02:13,440 --> 00:02:15,040
our conjunctions they are sometimes

52
00:02:15,040 --> 00:02:18,640
called pattern matching with wild cards

53
00:02:18,640 --> 00:02:23,200
so here again here we have a lot of

54
00:02:23,200 --> 00:02:25,200
research done

55
00:02:25,200 --> 00:02:27,840
to obfuscate this sort of functions and

56
00:02:27,840 --> 00:02:30,640
we can do this as also from from from

57
00:02:30,640 --> 00:02:33,599
various assumptions

58
00:02:33,599 --> 00:02:37,599
now in this paper we are focusing on a

59
00:02:37,599 --> 00:02:40,080
lockable obfuscation and this is

60
00:02:40,080 --> 00:02:43,280
obfuscation of

61
00:02:43,280 --> 00:02:45,519
so-called compute and compare problems

62
00:02:45,519 --> 00:02:47,040
and what are compute and compare

63
00:02:47,040 --> 00:02:48,720
programs

64
00:02:48,720 --> 00:02:52,000
now let's say that we have our search.c

65
00:02:52,000 --> 00:02:54,560
and this can be any polynomial size

66
00:02:54,560 --> 00:02:57,040
circuit and a compute and compare

67
00:02:57,040 --> 00:02:58,480
program

68
00:02:58,480 --> 00:03:00,959
given the circuit c and giving a log

69
00:03:00,959 --> 00:03:05,680
value is a program that outputs one

70
00:03:05,680 --> 00:03:07,200
only if

71
00:03:07,200 --> 00:03:08,400
c of x

72
00:03:08,400 --> 00:03:11,519
so c of the input to this program is

73
00:03:11,519 --> 00:03:13,840
equal the log value and any other

74
00:03:13,840 --> 00:03:16,840
[Music]

75
00:03:16,840 --> 00:03:18,879
situation the compute and compare

76
00:03:18,879 --> 00:03:20,000
program p

77
00:03:20,000 --> 00:03:22,480
is going to output zero

78
00:03:22,480 --> 00:03:24,799
now we can generalize this a little bit

79
00:03:24,799 --> 00:03:27,519
and instead of returning one when we hit

80
00:03:27,519 --> 00:03:29,120
the log value

81
00:03:29,120 --> 00:03:31,599
we are going to return a message

82
00:03:31,599 --> 00:03:34,239
and in this paper we are going to show

83
00:03:34,239 --> 00:03:36,720
how to obfuscate

84
00:03:36,720 --> 00:03:39,440
this class of programs

85
00:03:39,440 --> 00:03:40,560
so

86
00:03:40,560 --> 00:03:42,959
the security property that

87
00:03:42,959 --> 00:03:44,720
lockable application

88
00:03:44,720 --> 00:03:47,599
is supposed to guarantee is as follows

89
00:03:47,599 --> 00:03:52,480
suppose that we have a user and

90
00:03:52,480 --> 00:03:55,280
adversary so in this case the adversary

91
00:03:55,280 --> 00:03:56,799
is going to choose

92
00:03:56,799 --> 00:04:01,040
a circuit c and the message

93
00:04:01,040 --> 00:04:03,040
and then the user is going to obfuscate

94
00:04:03,040 --> 00:04:04,799
the circuit

95
00:04:04,799 --> 00:04:06,239
with the message

96
00:04:06,239 --> 00:04:07,920
and it's going to choose a log value

97
00:04:07,920 --> 00:04:09,840
yeah and this goes into the local

98
00:04:09,840 --> 00:04:12,000
application and the obfuscations then

99
00:04:12,000 --> 00:04:15,680
return to the adversary uh now

100
00:04:15,680 --> 00:04:18,238
an important thing to note is that the

101
00:04:18,238 --> 00:04:21,120
lock value has to have high entropy and

102
00:04:21,120 --> 00:04:24,240
in particular so

103
00:04:24,240 --> 00:04:25,759
for most of the presentation we are

104
00:04:25,759 --> 00:04:27,520
going to assume that

105
00:04:27,520 --> 00:04:29,680
log is chosen

106
00:04:29,680 --> 00:04:31,759
from the uniform distribution

107
00:04:31,759 --> 00:04:33,199
independent from the third cut

108
00:04:33,199 --> 00:04:35,680
independent from the message

109
00:04:35,680 --> 00:04:37,440
and

110
00:04:37,440 --> 00:04:39,120
the goal of the adversary is to

111
00:04:39,120 --> 00:04:41,120
distinguish between two words yeah so

112
00:04:41,120 --> 00:04:44,080
one world is

113
00:04:44,160 --> 00:04:46,400
the obfuscations generated by the user

114
00:04:46,400 --> 00:04:49,199
and the other world is that

115
00:04:49,199 --> 00:04:51,440
the obfuscation is generated by a

116
00:04:51,440 --> 00:04:52,800
simulator

117
00:04:52,800 --> 00:04:55,199
where the simulator does not have access

118
00:04:55,199 --> 00:04:57,280
to the circuit does not have access to

119
00:04:57,280 --> 00:05:00,560
the message or the lock file we also has

120
00:05:00,560 --> 00:05:02,400
absolutely zero knowledge about about

121
00:05:02,400 --> 00:05:04,560
those

122
00:05:05,360 --> 00:05:06,720
about those

123
00:05:06,720 --> 00:05:08,560
variables

124
00:05:08,560 --> 00:05:10,240
and yeah so so so the adversary is

125
00:05:10,240 --> 00:05:12,880
supposed to uh distinguish between uh

126
00:05:12,880 --> 00:05:14,639
these two words

127
00:05:14,639 --> 00:05:18,160
now sinclair kabul obfuscation is uh

128
00:05:18,160 --> 00:05:20,639
works only for our very restricted class

129
00:05:20,639 --> 00:05:23,440
of functions yeah so when we wonder what

130
00:05:23,440 --> 00:05:24,960
are the applications of the kabula

131
00:05:24,960 --> 00:05:27,919
fuscation so the first observation is

132
00:05:27,919 --> 00:05:29,840
here that local obfuscation actually

133
00:05:29,840 --> 00:05:32,800
implies uh point function obfuscation

134
00:05:32,800 --> 00:05:33,680
and

135
00:05:33,680 --> 00:05:36,840
conjunction association

136
00:05:36,840 --> 00:05:40,080
another important use case yeah are

137
00:05:40,080 --> 00:05:42,240
compilers so uh

138
00:05:42,240 --> 00:05:45,759
we can use lockable obfuscation

139
00:05:45,759 --> 00:05:48,080
to for example

140
00:05:48,080 --> 00:05:50,320
compile our public key encryption scheme

141
00:05:50,320 --> 00:05:52,160
into our anonymous public key encryption

142
00:05:52,160 --> 00:05:53,360
scheme

143
00:05:53,360 --> 00:05:55,600
and this means here that so the

144
00:05:55,600 --> 00:05:57,600
anonymous public key encryption scheme

145
00:05:57,600 --> 00:06:00,240
uh it does not reveal

146
00:06:00,240 --> 00:06:02,319
uh the

147
00:06:02,319 --> 00:06:04,240
recipient of a cipher text yeah so an

148
00:06:04,240 --> 00:06:07,600
anniversary given a ciphertext is unable

149
00:06:07,600 --> 00:06:08,880
to tell

150
00:06:08,880 --> 00:06:13,440
to which public key the ciphertext was

151
00:06:13,440 --> 00:06:15,759
was sent

152
00:06:15,759 --> 00:06:18,639
and similarly we can build

153
00:06:18,639 --> 00:06:21,199
anonymous identity based uh encryption

154
00:06:21,199 --> 00:06:23,039
schemes from local obfuscation and

155
00:06:23,039 --> 00:06:25,199
identity based encryption schemes

156
00:06:25,199 --> 00:06:27,600
uh so in this case the

157
00:06:27,600 --> 00:06:29,520
cipher text do not reveal the the

158
00:06:29,520 --> 00:06:31,520
identity of the recipient

159
00:06:31,520 --> 00:06:34,479
of a cipher text

160
00:06:34,560 --> 00:06:36,240
similarly we can we can we can build

161
00:06:36,240 --> 00:06:39,039
predicate encryption uh

162
00:06:39,039 --> 00:06:40,479
with one-sided

163
00:06:40,479 --> 00:06:43,680
privacy and anonymous broadcast

164
00:06:43,680 --> 00:06:46,160
encryption and finally we know how to

165
00:06:46,160 --> 00:06:48,479
build indistinguishability obfuscation

166
00:06:48,479 --> 00:06:50,560
for rejecting programs so these are

167
00:06:50,560 --> 00:06:54,160
programs that will always reject every

168
00:06:54,160 --> 00:06:56,560
input

169
00:06:56,960 --> 00:06:58,479
and this we can build from local

170
00:06:58,479 --> 00:07:00,240
obfuscation and

171
00:07:00,240 --> 00:07:02,720
witness encryption

172
00:07:02,720 --> 00:07:04,800
okay i hope that this is enough for

173
00:07:04,800 --> 00:07:06,960
motivation so let me

174
00:07:06,960 --> 00:07:09,039
say a few words of

175
00:07:09,039 --> 00:07:10,000
where

176
00:07:10,000 --> 00:07:13,120
local obfuscation came from

177
00:07:13,120 --> 00:07:14,240
and

178
00:07:14,240 --> 00:07:15,759
the story that is relevant for this

179
00:07:15,759 --> 00:07:18,639
paper yeah starts with circular security

180
00:07:18,639 --> 00:07:20,720
separations yeah so

181
00:07:20,720 --> 00:07:22,720
in particular with cycle testers that

182
00:07:22,720 --> 00:07:24,880
were introduced all

183
00:07:24,880 --> 00:07:27,199
that were first formalized by bishop

184
00:07:27,199 --> 00:07:29,520
hoffenberger and waters

185
00:07:29,520 --> 00:07:31,520
so there was

186
00:07:31,520 --> 00:07:33,759
earlier work here that constructed cycle

187
00:07:33,759 --> 00:07:35,919
testers here but yeah but the first

188
00:07:35,919 --> 00:07:37,840
formalization was here

189
00:07:37,840 --> 00:07:39,360
and

190
00:07:39,360 --> 00:07:42,639
this notion was later continued

191
00:07:42,639 --> 00:07:45,919
by our sequence of works that designed

192
00:07:45,919 --> 00:07:48,080
cycle testers from

193
00:07:48,080 --> 00:07:50,879
uh provably secure instantiations of

194
00:07:50,879 --> 00:07:52,720
greater than coding schemes yeah so in

195
00:07:52,720 --> 00:07:54,560
particular

196
00:07:54,560 --> 00:07:56,840
from the

197
00:07:56,840 --> 00:07:59,840
gh15 graded encoding scheme

198
00:07:59,840 --> 00:08:01,199
and

199
00:08:01,199 --> 00:08:03,520
the same technique here was later or

200
00:08:03,520 --> 00:08:05,440
like a generalization of this technique

201
00:08:05,440 --> 00:08:09,039
yeah was later used by goyal copula and

202
00:08:09,039 --> 00:08:10,240
waters

203
00:08:10,240 --> 00:08:13,599
and independently by wix and rallies

204
00:08:13,599 --> 00:08:14,400
to

205
00:08:14,400 --> 00:08:16,560
build lockable obfuscation

206
00:08:16,560 --> 00:08:18,560
and now so this technique here requires

207
00:08:18,560 --> 00:08:22,240
asia to take a circuit which is

208
00:08:22,240 --> 00:08:26,080
of logarithmic depth

209
00:08:26,080 --> 00:08:29,520
compile it represented as a permutation

210
00:08:29,520 --> 00:08:32,080
matrix branching program

211
00:08:32,080 --> 00:08:34,719
and then

212
00:08:34,719 --> 00:08:36,320
using

213
00:08:36,320 --> 00:08:39,120
learning with errors and codes this

214
00:08:39,120 --> 00:08:41,839
permutation matrix branching programs in

215
00:08:41,839 --> 00:08:44,640
a very special

216
00:08:44,880 --> 00:08:47,120
a special way to

217
00:08:47,120 --> 00:08:51,200
build a local obfuscation yeah so

218
00:08:51,200 --> 00:08:53,839
the actual construction is a little bit

219
00:08:53,839 --> 00:08:55,839
involved yeah so i'm not going to go

220
00:08:55,839 --> 00:08:57,120
into details

221
00:08:57,120 --> 00:08:58,000
uh

222
00:08:58,000 --> 00:08:58,720
but

223
00:08:58,720 --> 00:09:01,920
yes so this shows us yeah that uh so

224
00:09:01,920 --> 00:09:04,080
cycle testers you know like the great

225
00:09:04,080 --> 00:09:06,720
encoding

226
00:09:07,279 --> 00:09:10,080
schemes that were provably secure under

227
00:09:10,080 --> 00:09:11,200
under

228
00:09:11,200 --> 00:09:13,120
learning with errors yeah

229
00:09:13,120 --> 00:09:15,040
they were

230
00:09:15,040 --> 00:09:17,680
crucial to build

231
00:09:17,680 --> 00:09:20,800
lockable obfuscation

232
00:09:20,880 --> 00:09:24,320
now let me give you what is our base

233
00:09:24,320 --> 00:09:25,920
construction

234
00:09:25,920 --> 00:09:28,959
uh intuitively what is uh lockable

235
00:09:28,959 --> 00:09:30,959
obfuscation yeah so if you would

236
00:09:30,959 --> 00:09:32,640
supposed to uh

237
00:09:32,640 --> 00:09:33,680
explain

238
00:09:33,680 --> 00:09:37,120
uh the construction in like a very high

239
00:09:37,120 --> 00:09:40,000
level so let's say that we have a circa

240
00:09:40,000 --> 00:09:41,600
yeah and uh

241
00:09:41,600 --> 00:09:44,000
the first observation is here that that

242
00:09:44,000 --> 00:09:46,080
any obfuscation is

243
00:09:46,080 --> 00:09:50,720
a sort of encryption of the circuit yeah

244
00:09:50,720 --> 00:09:52,720
but it's not like any encryption of the

245
00:09:52,720 --> 00:09:55,440
circuit it is an encryption of the third

246
00:09:55,440 --> 00:09:56,320
cut

247
00:09:56,320 --> 00:09:59,200
that allows us to still evaluate the

248
00:09:59,200 --> 00:10:01,200
circuit so we are going to use a fully

249
00:10:01,200 --> 00:10:02,839
homomorphic encryption

250
00:10:02,839 --> 00:10:06,000
to encrypt c

251
00:10:06,000 --> 00:10:09,680
and this allows us here to to

252
00:10:10,240 --> 00:10:13,040
evaluate the shortcut on any input x

253
00:10:13,040 --> 00:10:16,800
here and obtain an encryption of c of x

254
00:10:16,800 --> 00:10:19,120
now in lockable obfuscation what we

255
00:10:19,120 --> 00:10:23,040
still need to be able to do is to

256
00:10:23,040 --> 00:10:24,000
test

257
00:10:24,000 --> 00:10:26,720
whether the evaluation

258
00:10:26,720 --> 00:10:28,560
whether c of x yeah

259
00:10:28,560 --> 00:10:31,519
in the encryption is equal the log value

260
00:10:31,519 --> 00:10:34,880
or not yeah so and this is actually the

261
00:10:34,880 --> 00:10:37,200
the difficult part yeah on how to do

262
00:10:37,200 --> 00:10:39,360
this testing

263
00:10:39,360 --> 00:10:42,720
now again so what we want to do is uh

264
00:10:42,720 --> 00:10:46,399
given our encryption of c of x we need

265
00:10:46,399 --> 00:10:49,680
to test whether the encrypted c of x is

266
00:10:49,680 --> 00:10:51,440
equal the log value

267
00:10:51,440 --> 00:10:52,880
or not

268
00:10:52,880 --> 00:10:54,399
and the idea is to use a full

269
00:10:54,399 --> 00:10:57,040
homomorphic encryption scheme that is

270
00:10:57,040 --> 00:10:59,920
singularly insecure and in particular it

271
00:10:59,920 --> 00:11:02,720
is equipped with a cycle tester

272
00:11:02,720 --> 00:11:05,120
and with this so what is important to

273
00:11:05,120 --> 00:11:07,920
note here that is that we require a

274
00:11:07,920 --> 00:11:11,200
cycle tester that works even on

275
00:11:11,200 --> 00:11:15,440
cipher text that came out of uh

276
00:11:15,440 --> 00:11:18,720
evaluation process yeah so these are not

277
00:11:18,720 --> 00:11:22,720
necessarily fresh cipher text so

278
00:11:22,720 --> 00:11:24,640
so yeah so so

279
00:11:24,640 --> 00:11:26,320
the cycle tester has

280
00:11:26,320 --> 00:11:28,800
has to work on any uh

281
00:11:28,800 --> 00:11:30,399
correct cipher

282
00:11:30,399 --> 00:11:32,560
on any cipher text that decrypts

283
00:11:32,560 --> 00:11:34,880
correctly

284
00:11:34,880 --> 00:11:36,959
now

285
00:11:36,959 --> 00:11:38,720
let me let me tell you

286
00:11:38,720 --> 00:11:39,760
what

287
00:11:39,760 --> 00:11:42,399
actually are the cycle testers so a

288
00:11:42,399 --> 00:11:45,680
cycle tester has an attack on

289
00:11:45,680 --> 00:11:48,560
on an encryption scheme that is able to

290
00:11:48,560 --> 00:11:51,360
differentiate between encryptions of

291
00:11:51,360 --> 00:11:53,360
zero

292
00:11:53,360 --> 00:11:55,760
and encryptions of

293
00:11:55,760 --> 00:11:57,760
secret keys yeah that form a cycle yeah

294
00:11:57,760 --> 00:11:59,920
so this encryption of secret keys here

295
00:11:59,920 --> 00:12:01,440
we have on the left

296
00:12:01,440 --> 00:12:02,320
uh

297
00:12:02,320 --> 00:12:03,120
and

298
00:12:03,120 --> 00:12:05,760
yeah so we have our encryption of uh

299
00:12:05,760 --> 00:12:08,639
secret key two under secret key one yeah

300
00:12:08,639 --> 00:12:10,959
and then we'll have an encryption of

301
00:12:10,959 --> 00:12:14,160
secret e3 under secret t2 and so on and

302
00:12:14,160 --> 00:12:16,880
so forth until we have uh

303
00:12:16,880 --> 00:12:18,560
until we complete the cycle here we

304
00:12:18,560 --> 00:12:22,720
found encryption of sk1 under skn

305
00:12:22,720 --> 00:12:26,079
so yeah and

306
00:12:26,320 --> 00:12:28,639
the attack algorithm is able to

307
00:12:28,639 --> 00:12:30,560
differentiate uh

308
00:12:30,560 --> 00:12:31,920
between these

309
00:12:31,920 --> 00:12:34,320
two uh situations

310
00:12:34,320 --> 00:12:36,959
and uh yeah and i'm calling this attack

311
00:12:36,959 --> 00:12:39,360
here because so previously

312
00:12:39,360 --> 00:12:40,240
cycle

313
00:12:40,240 --> 00:12:42,720
testers yeah so they were actually

314
00:12:42,720 --> 00:12:45,519
considered as attacks yeah so

315
00:12:45,519 --> 00:12:46,959
um

316
00:12:46,959 --> 00:12:49,360
so previous research was was focused

317
00:12:49,360 --> 00:12:51,519
they are on constructing such cyclical

318
00:12:51,519 --> 00:12:54,720
testers here to show that cpa security

319
00:12:54,720 --> 00:12:56,240
does not imply

320
00:12:56,240 --> 00:12:57,120
uh

321
00:12:57,120 --> 00:12:59,040
circular security

322
00:12:59,040 --> 00:13:00,000
um

323
00:13:00,000 --> 00:13:02,720
and secular tests was a way to to to

324
00:13:02,720 --> 00:13:07,440
show contractors for uh

325
00:13:07,440 --> 00:13:08,880
for this implication

326
00:13:08,880 --> 00:13:10,880
now in this talk yeah i'm going to

327
00:13:10,880 --> 00:13:13,040
simplify uh

328
00:13:13,040 --> 00:13:14,560
and

329
00:13:14,560 --> 00:13:17,920
i'm going to show a local of scatter

330
00:13:17,920 --> 00:13:21,120
that uses a one cycle tester so in

331
00:13:21,120 --> 00:13:23,120
particular it's going to

332
00:13:23,120 --> 00:13:24,720
differentiate

333
00:13:24,720 --> 00:13:27,839
an encryption of zero and our encryption

334
00:13:27,839 --> 00:13:30,720
of its own secret key yeah so an

335
00:13:30,720 --> 00:13:34,959
encryption of sk under sk

336
00:13:34,959 --> 00:13:35,760
now

337
00:13:35,760 --> 00:13:38,160
let's put things together

338
00:13:38,160 --> 00:13:40,560
uh our lockable obfuscation is going to

339
00:13:40,560 --> 00:13:42,160
consist of

340
00:13:42,160 --> 00:13:45,680
uh our encryption of the circuit see and

341
00:13:45,680 --> 00:13:49,519
our encryption of the secret key sk but

342
00:13:49,519 --> 00:13:52,240
this encryption is uh uses the lock

343
00:13:52,240 --> 00:13:55,199
value as a secret key

344
00:13:55,199 --> 00:13:57,279
now how to evaluate such lockup

345
00:13:57,279 --> 00:13:58,560
modification

346
00:13:58,560 --> 00:13:59,920
so

347
00:13:59,920 --> 00:14:02,720
we will first take

348
00:14:02,720 --> 00:14:04,560
the encryption of the shortcut and

349
00:14:04,560 --> 00:14:07,920
evaluate this on input

350
00:14:07,920 --> 00:14:09,680
the circuit

351
00:14:09,680 --> 00:14:12,079
on input x

352
00:14:12,079 --> 00:14:13,519
what we get

353
00:14:13,519 --> 00:14:17,120
as a result yeah is an encryption of c

354
00:14:17,120 --> 00:14:18,560
of x

355
00:14:18,560 --> 00:14:20,399
unless they noted as d

356
00:14:20,399 --> 00:14:21,920
and then

357
00:14:21,920 --> 00:14:22,880
the

358
00:14:22,880 --> 00:14:25,440
crucial part here is that

359
00:14:25,440 --> 00:14:27,600
we are going to take d

360
00:14:27,600 --> 00:14:30,800
so the encryption of c of x and evaluate

361
00:14:30,800 --> 00:14:34,320
the decryption circuit on a

362
00:14:34,320 --> 00:14:37,680
using b as the secret key part yeah so

363
00:14:37,680 --> 00:14:40,639
eventually we'll get our encryption of

364
00:14:40,639 --> 00:14:43,440
the decryption

365
00:14:43,440 --> 00:14:45,920
off a uh

366
00:14:45,920 --> 00:14:49,360
where c of x yeah is 330 as the secret

367
00:14:49,360 --> 00:14:51,199
key

368
00:14:51,199 --> 00:14:52,079
now

369
00:14:52,079 --> 00:14:53,040
uh

370
00:14:53,040 --> 00:14:55,920
note that if c of x yeah it's equal to

371
00:14:55,920 --> 00:14:59,639
log yeah then

372
00:14:59,760 --> 00:15:03,440
the ciphertext e is actually our

373
00:15:03,440 --> 00:15:05,839
key dependent message

374
00:15:05,839 --> 00:15:08,480
ciphertext otherwise yeah it is going to

375
00:15:08,480 --> 00:15:10,480
be a different

376
00:15:10,480 --> 00:15:13,760
ciphertext and our cycle tester is

377
00:15:13,760 --> 00:15:15,440
supposed to

378
00:15:15,440 --> 00:15:17,360
be able to differentiate here between

379
00:15:17,360 --> 00:15:19,680
these two

380
00:15:19,680 --> 00:15:20,959
now

381
00:15:20,959 --> 00:15:23,760
let me briefly sketch and security proof

382
00:15:23,760 --> 00:15:25,600
so remind you that we have our two

383
00:15:25,600 --> 00:15:27,920
ciphertexts c and a

384
00:15:27,920 --> 00:15:30,480
and as our first step we are going to

385
00:15:30,480 --> 00:15:32,720
turn a into an encryption of zero

386
00:15:32,720 --> 00:15:34,000
assuming

387
00:15:34,000 --> 00:15:36,000
cpa security of the of the encryption

388
00:15:36,000 --> 00:15:37,759
scheme

389
00:15:37,759 --> 00:15:40,480
now the second step

390
00:15:40,480 --> 00:15:42,959
is we are going to turn a into our

391
00:15:42,959 --> 00:15:45,680
uniformly random value and

392
00:15:45,680 --> 00:15:48,399
here we need to assume uh pseudorandom

393
00:15:48,399 --> 00:15:50,160
ciphertext yeah

394
00:15:50,160 --> 00:15:52,079
the problem is yet that

395
00:15:52,079 --> 00:15:54,560
from cpa security we cannot get rid of

396
00:15:54,560 --> 00:15:57,518
the lock yeah so

397
00:15:58,240 --> 00:16:00,639
cpa security doesn't say anything yeah

398
00:16:00,639 --> 00:16:03,440
whether we can distinguish uh encryption

399
00:16:03,440 --> 00:16:05,600
under one secret key from an encryption

400
00:16:05,600 --> 00:16:08,880
of another secret key so so yeah so we

401
00:16:08,880 --> 00:16:11,600
have to do this

402
00:16:11,680 --> 00:16:13,920
assuming pseudo-random

403
00:16:13,920 --> 00:16:15,519
cipher text

404
00:16:15,519 --> 00:16:19,519
and the last step is to

405
00:16:19,920 --> 00:16:21,360
turn

406
00:16:21,360 --> 00:16:23,839
the encryption of

407
00:16:23,839 --> 00:16:26,000
the third cut c into an encryption of

408
00:16:26,000 --> 00:16:28,880
zero yeah so in the last hybrid we have

409
00:16:28,880 --> 00:16:31,600
some uniformly random

410
00:16:31,600 --> 00:16:34,320
value for a and an encryption of zero

411
00:16:34,320 --> 00:16:37,279
for syria and both ciphertexts are

412
00:16:37,279 --> 00:16:39,759
completely independent of

413
00:16:39,759 --> 00:16:40,720
the

414
00:16:40,720 --> 00:16:44,240
of the circuit c and the log value

415
00:16:44,240 --> 00:16:47,519
so this this this completes the proof

416
00:16:47,519 --> 00:16:48,639
now

417
00:16:48,639 --> 00:16:52,560
in the paper we actually uh have another

418
00:16:52,560 --> 00:16:54,560
construction that is a little bit more

419
00:16:54,560 --> 00:16:57,040
complicated but it doesn't need to

420
00:16:57,040 --> 00:16:59,360
assume pseudorandom ciphertext so the

421
00:16:59,360 --> 00:17:00,880
the whole proof

422
00:17:00,880 --> 00:17:02,160
is

423
00:17:02,160 --> 00:17:04,400
requires only cpa security from the

424
00:17:04,400 --> 00:17:07,039
encryption schemes

425
00:17:07,039 --> 00:17:09,520
as i pointed out earlier what we needed

426
00:17:09,520 --> 00:17:13,039
to assume uh previously for cpa security

427
00:17:13,039 --> 00:17:16,079
to work is that the log value is chosen

428
00:17:16,079 --> 00:17:18,319
uniformly at random from the secret key

429
00:17:18,319 --> 00:17:21,839
space yeah but actually we can extend

430
00:17:21,839 --> 00:17:25,199
the construction uh to have log values

431
00:17:25,199 --> 00:17:28,799
chosen from different distributions

432
00:17:28,880 --> 00:17:29,760
and

433
00:17:29,760 --> 00:17:31,760
in particular

434
00:17:31,760 --> 00:17:34,160
i'm going to focus on the unpredictable

435
00:17:34,160 --> 00:17:37,120
distribution so which is a distribution

436
00:17:37,120 --> 00:17:39,360
where

437
00:17:39,679 --> 00:17:42,160
when we have our x and some auxiliary

438
00:17:42,160 --> 00:17:43,200
data

439
00:17:43,200 --> 00:17:44,480
chosen

440
00:17:44,480 --> 00:17:46,640
from from this distribution

441
00:17:46,640 --> 00:17:50,400
then um the adversary given the

442
00:17:50,400 --> 00:17:55,120
auxiliary data is unable to output x

443
00:17:55,120 --> 00:17:56,160
so

444
00:17:56,160 --> 00:17:57,200
there are

445
00:17:57,200 --> 00:17:58,960
in the literature

446
00:17:58,960 --> 00:18:01,440
many papers here that realize public key

447
00:18:01,440 --> 00:18:05,440
encryption uh and

448
00:18:05,520 --> 00:18:08,160
so the random number generators

449
00:18:08,160 --> 00:18:09,440
for

450
00:18:09,440 --> 00:18:11,440
secret keys chosen from this

451
00:18:11,440 --> 00:18:13,760
distribution

452
00:18:13,760 --> 00:18:14,559
now

453
00:18:14,559 --> 00:18:17,440
the auxiliary data yeah it may be for

454
00:18:17,440 --> 00:18:19,600
like like anything and maybe for in

455
00:18:19,600 --> 00:18:21,200
particular it may be for example the

456
00:18:21,200 --> 00:18:23,280
circuit yeah that that we are going to

457
00:18:23,280 --> 00:18:25,120
offer

458
00:18:25,120 --> 00:18:28,720
now the second distribution is our

459
00:18:28,720 --> 00:18:30,720
observer entropy distribution yeah so

460
00:18:30,720 --> 00:18:32,880
this is says here that when you have x

461
00:18:32,880 --> 00:18:34,640
you have then conditioned on some

462
00:18:34,640 --> 00:18:38,640
auxiliary data it helps how the entropy

463
00:18:38,640 --> 00:18:39,440
is

464
00:18:39,440 --> 00:18:41,760
larger than some polynomial

465
00:18:41,760 --> 00:18:43,440
alpha from

466
00:18:43,440 --> 00:18:46,400
the security parameter and here again

467
00:18:46,400 --> 00:18:49,039
we have a ton of literature yeah that

468
00:18:49,039 --> 00:18:51,280
was concerned in building public key

469
00:18:51,280 --> 00:18:54,000
encryption scheme

470
00:18:55,280 --> 00:18:57,520
that is secure when the secret key is

471
00:18:57,520 --> 00:19:01,360
chosen from uh such a distribution uh

472
00:19:01,360 --> 00:19:03,280
and this is in particular the literature

473
00:19:03,280 --> 00:19:04,559
that is concerned with leakage

474
00:19:04,559 --> 00:19:06,480
resistance yeah so so

475
00:19:06,480 --> 00:19:08,799
we consider some leakage uh some

476
00:19:08,799 --> 00:19:10,880
non-trivial leakage

477
00:19:10,880 --> 00:19:14,559
of information about the secret

478
00:19:14,559 --> 00:19:16,960
another extension that we consider in

479
00:19:16,960 --> 00:19:19,200
the paper yeah is

480
00:19:19,200 --> 00:19:21,600
multiple messages yeah so

481
00:19:21,600 --> 00:19:25,360
previously i described a very simplified

482
00:19:25,360 --> 00:19:28,640
version of the local application that

483
00:19:28,640 --> 00:19:29,840
could

484
00:19:29,840 --> 00:19:32,000
where we could only test

485
00:19:32,000 --> 00:19:33,679
whether a cert cut

486
00:19:33,679 --> 00:19:36,000
whether the obfuscated circuit evaluates

487
00:19:36,000 --> 00:19:37,679
to the lock value or not yeah so with

488
00:19:37,679 --> 00:19:40,880
output one or zero

489
00:19:40,880 --> 00:19:44,720
so to encode any message

490
00:19:44,720 --> 00:19:48,000
and then later decode the other message

491
00:19:48,000 --> 00:19:49,919
from

492
00:19:49,919 --> 00:19:51,919
a successfully evaluated lockable

493
00:19:51,919 --> 00:19:54,080
obfuscation so

494
00:19:54,080 --> 00:19:57,200
when c of x y is equal the log value

495
00:19:57,200 --> 00:20:00,400
uh we are going to publish additionally

496
00:20:00,400 --> 00:20:02,240
uh encryptions

497
00:20:02,240 --> 00:20:03,200
of

498
00:20:03,200 --> 00:20:05,760
the bits of the message

499
00:20:05,760 --> 00:20:06,559
now

500
00:20:06,559 --> 00:20:08,960
evaluation for the most part yeah goes

501
00:20:08,960 --> 00:20:12,000
exactly the same yeah as it is as it was

502
00:20:12,000 --> 00:20:13,039
here for

503
00:20:13,039 --> 00:20:15,520
the base construction

504
00:20:15,520 --> 00:20:18,400
but additionally when we hit when we

505
00:20:18,400 --> 00:20:20,559
evaluate the other cipher text to the

506
00:20:20,559 --> 00:20:23,840
log value and then we get our key cycle

507
00:20:23,840 --> 00:20:26,240
then we are going to be able to decode

508
00:20:26,240 --> 00:20:27,760
the message

509
00:20:27,760 --> 00:20:29,440
the bits of the message as follows yeah

510
00:20:29,440 --> 00:20:30,320
so

511
00:20:30,320 --> 00:20:32,720
suppose we take the first

512
00:20:32,720 --> 00:20:34,880
encryption of the first bit we are

513
00:20:34,880 --> 00:20:38,400
multiplying this yeah with our potential

514
00:20:38,400 --> 00:20:41,280
key cycle and

515
00:20:41,280 --> 00:20:43,280
if the message

516
00:20:43,280 --> 00:20:45,600
bit was zero then we are getting an

517
00:20:45,600 --> 00:20:47,120
encryption of zero

518
00:20:47,120 --> 00:20:49,039
if it was an encryption of one yeah then

519
00:20:49,039 --> 00:20:49,919
we are

520
00:20:49,919 --> 00:20:51,200
getting uh

521
00:20:51,200 --> 00:20:53,600
the encryption uh

522
00:20:53,600 --> 00:20:54,320
of

523
00:20:54,320 --> 00:20:56,159
the secret key under the secret key so

524
00:20:56,159 --> 00:20:58,559
we have our key cycle and our cycle

525
00:20:58,559 --> 00:21:00,880
tester is able to again distinguish

526
00:21:00,880 --> 00:21:03,840
between these two

527
00:21:04,880 --> 00:21:09,280
situations and this way we are going to

528
00:21:09,280 --> 00:21:10,640
decrypt

529
00:21:10,640 --> 00:21:13,039
the message bit by bit

530
00:21:13,039 --> 00:21:17,200
so very very simple idea really

531
00:21:17,200 --> 00:21:18,799
now in summary

532
00:21:18,799 --> 00:21:20,960
in the paper we have our general

533
00:21:20,960 --> 00:21:22,960
construction of lockable obfuscation

534
00:21:22,960 --> 00:21:25,679
from the homomorphic encryption

535
00:21:25,679 --> 00:21:26,640
with

536
00:21:26,640 --> 00:21:28,880
equipped with a cycle tester

537
00:21:28,880 --> 00:21:32,240
and so as i said earlier in the

538
00:21:32,240 --> 00:21:34,480
presentation i simplified things here

539
00:21:34,480 --> 00:21:38,080
and i used only uh one cycle to describe

540
00:21:38,080 --> 00:21:40,159
this this game so in the paper we

541
00:21:40,159 --> 00:21:41,330
actually have a

542
00:21:41,330 --> 00:21:42,960
[Music]

543
00:21:42,960 --> 00:21:45,679
general construction that uses uh uh

544
00:21:45,679 --> 00:21:50,240
arbitrary length uh cycle uh

545
00:21:50,559 --> 00:21:52,240
of keys

546
00:21:52,240 --> 00:21:57,039
as an endnote yeah so let me note that

547
00:21:57,360 --> 00:21:59,840
in previous literature showed the other

548
00:21:59,840 --> 00:22:02,080
having local obfuscation so this was one

549
00:22:02,080 --> 00:22:03,360
of the applications for local

550
00:22:03,360 --> 00:22:05,039
obfuscation yeah so given local

551
00:22:05,039 --> 00:22:07,919
obfuscation and an encryption scheme

552
00:22:07,919 --> 00:22:10,240
uh we can turn it into an encryption

553
00:22:10,240 --> 00:22:12,640
scheme with a cycle tester so and this

554
00:22:12,640 --> 00:22:14,960
encryption scheme may in particular be a

555
00:22:14,960 --> 00:22:17,440
full homophily encryption scheme

556
00:22:17,440 --> 00:22:19,679
now in this work uh

557
00:22:19,679 --> 00:22:22,320
what i showed here is that giving a

558
00:22:22,320 --> 00:22:24,640
fuller homophobic encryption scheme and

559
00:22:24,640 --> 00:22:26,880
equipped with a cycle tester we get

560
00:22:26,880 --> 00:22:29,039
lockup modification which completes the

561
00:22:29,039 --> 00:22:31,520
cycle

562
00:22:32,000 --> 00:22:34,400
thank you and if you are interested the

563
00:22:34,400 --> 00:22:36,640
paper is available on eprint

564
00:22:36,640 --> 00:22:39,640
by

