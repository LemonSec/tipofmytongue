1
00:00:01,040 --> 00:00:04,240
welcome to my talk i'm leo i'm going to

2
00:00:04,240 --> 00:00:08,480
talk about updatable encryption

3
00:00:10,000 --> 00:00:13,440
in this work we propose a new definition

4
00:00:13,440 --> 00:00:16,880
for updatable encryption we call it

5
00:00:16,880 --> 00:00:20,480
backward link unidirectional key updates

6
00:00:20,480 --> 00:00:23,000
then we show that back quadratic

7
00:00:23,000 --> 00:00:26,000
unidirectional key updates are strictly

8
00:00:26,000 --> 00:00:27,599
still longer than

9
00:00:27,599 --> 00:00:30,400
the existing ejectional

10
00:00:30,400 --> 00:00:32,800
key updates

11
00:00:32,800 --> 00:00:36,719
we also propose two secure constructions

12
00:00:36,719 --> 00:00:40,399
of updatable encryption

13
00:00:41,920 --> 00:00:44,640
first i review what is updatable

14
00:00:44,640 --> 00:00:47,280
encryption

15
00:00:48,800 --> 00:00:51,760
let's consider the following scenario

16
00:00:51,760 --> 00:00:54,879
i saved her encrypted data on on the

17
00:00:54,879 --> 00:00:58,360
cloud server

18
00:00:59,039 --> 00:01:01,840
her computer is attacked and her secret

19
00:01:01,840 --> 00:01:04,559
key is leaked

20
00:01:04,559 --> 00:01:06,720
to protect her data

21
00:01:06,720 --> 00:01:10,560
she generates a new secret key

22
00:01:11,119 --> 00:01:13,840
she should not only build the secret key

23
00:01:13,840 --> 00:01:16,560
to the cloud server so

24
00:01:16,560 --> 00:01:19,840
she downloads all encrypted data from

25
00:01:19,840 --> 00:01:22,400
the server they give them

26
00:01:22,400 --> 00:01:25,600
equip encrypt them by the new secret key

27
00:01:25,600 --> 00:01:26,560
again

28
00:01:26,560 --> 00:01:29,920
and upload them to the server

29
00:01:29,920 --> 00:01:35,439
this incurs significant efficiency loss

30
00:01:35,439 --> 00:01:39,119
to resolve this issue we use updatable

31
00:01:39,119 --> 00:01:41,840
encryption

32
00:01:42,320 --> 00:01:44,720
in updatable encryption

33
00:01:44,720 --> 00:01:48,000
we can periodically update a secret key

34
00:01:48,000 --> 00:01:50,399
and ciphertext

35
00:01:50,399 --> 00:01:52,960
an updatable encryption scheme has key

36
00:01:52,960 --> 00:01:55,520
generation encryption and decryption

37
00:01:55,520 --> 00:01:57,840
algorithm business as a standard

38
00:01:57,840 --> 00:01:59,280
encryption scheme

39
00:01:59,280 --> 00:02:03,439
and has two additional algorithms

40
00:02:03,439 --> 00:02:06,880
one is the token generation algorithm

41
00:02:06,880 --> 00:02:10,000
we can generate an update token from two

42
00:02:10,000 --> 00:02:12,400
secret keys

43
00:02:12,400 --> 00:02:15,840
in this talk we focus on ciphertext

44
00:02:15,840 --> 00:02:18,879
independent updates where we do not need

45
00:02:18,879 --> 00:02:23,840
a ciphertext for generating the token

46
00:02:24,480 --> 00:02:28,000
the other one is an update algorithm we

47
00:02:28,000 --> 00:02:31,040
can convert a ciphertext under an order

48
00:02:31,040 --> 00:02:34,959
key into one under new key by using an

49
00:02:34,959 --> 00:02:37,760
update token

50
00:02:37,760 --> 00:02:40,879
if alice uses updatable encryption in

51
00:02:40,879 --> 00:02:42,800
the scenario

52
00:02:42,800 --> 00:02:44,800
that i explained first

53
00:02:44,800 --> 00:02:48,080
she generates a new key and an updated

54
00:02:48,080 --> 00:02:51,080
token

55
00:02:52,640 --> 00:02:55,680
then she passes the token to the server

56
00:02:55,680 --> 00:02:58,720
and the server can directly update all

57
00:02:58,720 --> 00:03:02,080
ciphertexts without using alice's secret

58
00:03:02,080 --> 00:03:05,080
key

59
00:03:06,959 --> 00:03:09,599
one issue is whether a token leaks

60
00:03:09,599 --> 00:03:12,480
information about secret keys or not

61
00:03:12,480 --> 00:03:15,040
since the token is generated from two

62
00:03:15,040 --> 00:03:17,440
secret keys

63
00:03:17,440 --> 00:03:20,080
in previous works there are three

64
00:03:20,080 --> 00:03:24,239
categories for key updates

65
00:03:24,799 --> 00:03:27,680
the first one is the bidirectional key

66
00:03:27,680 --> 00:03:29,360
update

67
00:03:29,360 --> 00:03:32,400
we can infer a secret key from both

68
00:03:32,400 --> 00:03:35,440
directions via our token

69
00:03:35,440 --> 00:03:38,720
that is we can infer a new key from a

70
00:03:38,720 --> 00:03:40,879
token and an order key

71
00:03:40,879 --> 00:03:44,000
and vice versa

72
00:03:44,720 --> 00:03:47,760
the second one is the unidirectional key

73
00:03:47,760 --> 00:03:49,519
update

74
00:03:49,519 --> 00:03:52,640
we can infer a new key from a token and

75
00:03:52,640 --> 00:03:55,200
then all the key

76
00:03:55,200 --> 00:03:58,720
however we cannot infer on all the keys

77
00:03:58,720 --> 00:04:02,560
from a token under new key

78
00:04:05,040 --> 00:04:07,599
the last one is the no directional key

79
00:04:07,599 --> 00:04:08,720
update

80
00:04:08,720 --> 00:04:13,200
we cannot infer keys from a token

81
00:04:13,200 --> 00:04:15,519
all previous updatable encryption

82
00:04:15,519 --> 00:04:19,358
schemes have a bi-directional key update

83
00:04:19,358 --> 00:04:23,280
this is not desirable since such token

84
00:04:23,280 --> 00:04:26,320
replicate more information about secret

85
00:04:26,320 --> 00:04:29,320
keys

86
00:04:30,000 --> 00:04:32,400
another issue is whether our token

87
00:04:32,400 --> 00:04:36,320
allows downgrading ciphertext or not

88
00:04:36,320 --> 00:04:39,520
there are two types of updating

89
00:04:39,520 --> 00:04:41,919
one is the bi-directional ciphertext

90
00:04:41,919 --> 00:04:45,199
update where we can both update a

91
00:04:45,199 --> 00:04:48,240
ciphertext and downgrade a cybertext and

92
00:04:48,240 --> 00:04:51,759
a new key into a ciphertext and an org

93
00:04:51,759 --> 00:04:54,000
key

94
00:04:55,600 --> 00:04:57,759
the other one is the unidirectional

95
00:04:57,759 --> 00:05:00,639
ciphertext update where we can only

96
00:05:00,639 --> 00:05:03,120
update the ciphertext

97
00:05:03,120 --> 00:05:05,520
the unidirectional ciphertext update is

98
00:05:05,520 --> 00:05:08,320
more desirable since the token gives

99
00:05:08,320 --> 00:05:12,320
less information to adversaries

100
00:05:12,320 --> 00:05:15,039
however all previous updatable

101
00:05:15,039 --> 00:05:17,759
encryption schemes have bi-directional

102
00:05:17,759 --> 00:05:20,560
key updates

103
00:05:21,520 --> 00:05:24,800
a simple example of updatable encryption

104
00:05:24,800 --> 00:05:26,960
is as follows

105
00:05:26,960 --> 00:05:31,840
a secret key is an element in zp

106
00:05:33,520 --> 00:05:37,919
a token is x sub e plus 1 over x sub e

107
00:05:37,919 --> 00:05:42,560
where x sub e plus 1 is a new key

108
00:05:44,080 --> 00:05:46,560
a ciphertext is an algorithm like

109
00:05:46,560 --> 00:05:48,479
ciphertext

110
00:05:48,479 --> 00:05:51,120
we can update a ciphertext by using the

111
00:05:51,120 --> 00:05:56,240
token since x sub e is cancelled out

112
00:05:56,240 --> 00:05:59,520
it is easy to see that this example is

113
00:05:59,520 --> 00:06:01,680
the bi-directional key update and

114
00:06:01,680 --> 00:06:06,039
bi-directional ciphertext update

115
00:06:08,560 --> 00:06:11,600
the type of key and ciphertext updates

116
00:06:11,600 --> 00:06:14,319
affects trivial winning conditions in

117
00:06:14,319 --> 00:06:18,560
security games of updatable encryption

118
00:06:18,560 --> 00:06:20,960
let's see an example

119
00:06:20,960 --> 00:06:23,919
in the table each number denotes a time

120
00:06:23,919 --> 00:06:26,880
period called epoc

121
00:06:26,880 --> 00:06:29,759
in ue security we consider secret key

122
00:06:29,759 --> 00:06:32,840
corruption and token

123
00:06:32,840 --> 00:06:36,000
corruption in the corrupted key law

124
00:06:36,000 --> 00:06:38,639
x-mark means the secret key is not

125
00:06:38,639 --> 00:06:40,800
rigged

126
00:06:40,800 --> 00:06:44,800
and the check mark means it is legal

127
00:06:44,800 --> 00:06:47,039
in the corrupted token law

128
00:06:47,039 --> 00:06:50,319
xmap means the token is not linked

129
00:06:50,319 --> 00:06:54,479
and check mark means it is linked

130
00:06:56,560 --> 00:06:59,199
in the bi-directional key update setting

131
00:06:59,199 --> 00:07:02,080
we can infer the secret keys of the

132
00:07:02,080 --> 00:07:05,919
second third and the fourth epochs since

133
00:07:05,919 --> 00:07:10,560
we can infer from both directions

134
00:07:13,520 --> 00:07:16,080
in the unidirectional key update setting

135
00:07:16,080 --> 00:07:18,479
we can infer the secret keys of the

136
00:07:18,479 --> 00:07:22,400
second and third epochs

137
00:07:23,599 --> 00:07:26,240
however we cannot infer the fourth

138
00:07:26,240 --> 00:07:29,280
secret key since we cannot infer in the

139
00:07:29,280 --> 00:07:33,520
backward direction in this setting

140
00:07:34,080 --> 00:07:37,039
if advisor is obtaining a secret key

141
00:07:37,039 --> 00:07:39,360
that they want to attack

142
00:07:39,360 --> 00:07:42,560
they can trivially break the security of

143
00:07:42,560 --> 00:07:44,720
encryption

144
00:07:44,720 --> 00:07:48,000
so the bilateral key update triggers

145
00:07:48,000 --> 00:07:50,720
more trivial winning conditions than the

146
00:07:50,720 --> 00:07:53,840
unidirectional key update

147
00:07:53,840 --> 00:07:55,840
this means the security in the

148
00:07:55,840 --> 00:07:58,560
unidirectional key setting

149
00:07:58,560 --> 00:08:01,120
seems to be stronger than the security

150
00:08:01,120 --> 00:08:04,479
in the bi-directional setting

151
00:08:08,479 --> 00:08:11,680
however jam proves that the security in

152
00:08:11,680 --> 00:08:14,400
the bi-directional key update setting is

153
00:08:14,400 --> 00:08:16,479
equivalent to the security in the

154
00:08:16,479 --> 00:08:19,599
unidirectional key update setting

155
00:08:19,599 --> 00:08:22,720
this is surprising since the direction

156
00:08:22,720 --> 00:08:25,520
of updatable encryption does not matter

157
00:08:25,520 --> 00:08:27,840
much

158
00:08:29,759 --> 00:08:32,559
however here is a question

159
00:08:32,559 --> 00:08:35,360
why do we consider the universal key

160
00:08:35,360 --> 00:08:38,240
update where key inference is the

161
00:08:38,240 --> 00:08:41,599
forward direction

162
00:08:41,599 --> 00:08:43,919
we can consider another unidirectional

163
00:08:43,919 --> 00:08:47,279
key update variant where a key inference

164
00:08:47,279 --> 00:08:50,240
is the backward direction

165
00:08:50,240 --> 00:08:53,680
that is we can infer an all the key from

166
00:08:53,680 --> 00:08:55,680
token under new key

167
00:08:55,680 --> 00:08:56,959
but

168
00:08:56,959 --> 00:09:00,560
cannot in the opposite direction

169
00:09:00,560 --> 00:09:04,719
this is a very natural setting

170
00:09:06,160 --> 00:09:08,399
to distinguish two types of

171
00:09:08,399 --> 00:09:10,720
unidirectional key updates

172
00:09:10,720 --> 00:09:13,279
we call the previous in directional key

173
00:09:13,279 --> 00:09:18,000
updates for the credential key updates

174
00:09:18,000 --> 00:09:19,920
let's see the backwardly clean

175
00:09:19,920 --> 00:09:23,040
directional key updates are preferable

176
00:09:23,040 --> 00:09:26,240
to the forward link one

177
00:09:26,240 --> 00:09:29,040
here we assume that the ciphertext

178
00:09:29,040 --> 00:09:32,920
update is unidirectional

179
00:09:36,080 --> 00:09:38,320
suppose that the middle secret key is

180
00:09:38,320 --> 00:09:39,519
leaked

181
00:09:39,519 --> 00:09:42,640
then in the forward leg setting we can

182
00:09:42,640 --> 00:09:47,360
get the newest secret key pr token

183
00:09:47,920 --> 00:09:52,480
in this case even if we securely delete

184
00:09:52,480 --> 00:09:55,360
all the ciphertext we cannot protect the

185
00:09:55,360 --> 00:09:57,200
newest ciphertext

186
00:09:57,200 --> 00:10:00,160
and updating ciphertext does not help us

187
00:10:00,160 --> 00:10:04,920
since the newest key is imported

188
00:10:05,839 --> 00:10:08,640
in the backward league setting

189
00:10:08,640 --> 00:10:09,920
we can get

190
00:10:09,920 --> 00:10:14,880
the the oldest secret key via token

191
00:10:15,600 --> 00:10:17,200
in this case

192
00:10:17,200 --> 00:10:20,240
if we securely deleted all the

193
00:10:20,240 --> 00:10:22,320
ciphertext

194
00:10:22,320 --> 00:10:24,720
we can protect the newest key and

195
00:10:24,720 --> 00:10:27,360
ciphertext

196
00:10:27,360 --> 00:10:30,079
note that i assume that the ciphertext

197
00:10:30,079 --> 00:10:33,200
update is unidirectional

198
00:10:33,200 --> 00:10:35,680
later i add that unidirectional

199
00:10:35,680 --> 00:10:38,800
ciphertext updates could be standard in

200
00:10:38,800 --> 00:10:43,120
the backward unidirectional setting

201
00:10:44,240 --> 00:10:47,200
this fits the spirit of updatable

202
00:10:47,200 --> 00:10:49,760
encryption

203
00:10:50,959 --> 00:10:53,519
in this work we introduced the

204
00:10:53,519 --> 00:10:56,800
definition of backwatering injection key

205
00:10:56,800 --> 00:11:00,560
updates as i explained so far

206
00:11:00,560 --> 00:11:04,720
surprisingly or unsurprisingly we also

207
00:11:04,720 --> 00:11:06,399
showed that the back quadrantic

208
00:11:06,399 --> 00:11:09,200
initiation key updates are strictly

209
00:11:09,200 --> 00:11:11,360
stronger than the ford leak

210
00:11:11,360 --> 00:11:12,839
unidirectional key

211
00:11:12,839 --> 00:11:14,480
updates

212
00:11:14,480 --> 00:11:17,519
this is in sharp contrast to john's

213
00:11:17,519 --> 00:11:19,920
equivalence theorem

214
00:11:19,920 --> 00:11:22,640
more completely we showed that

215
00:11:22,640 --> 00:11:25,440
existing secure ui schemes in the ford

216
00:11:25,440 --> 00:11:28,320
leak injection key update setting are

217
00:11:28,320 --> 00:11:30,560
not secure in the back quadrantic

218
00:11:30,560 --> 00:11:33,600
unidirectional key setting

219
00:11:33,600 --> 00:11:36,160
we present two updatable encryption

220
00:11:36,160 --> 00:11:37,760
schemes

221
00:11:37,760 --> 00:11:40,079
one is secure in the backward link

222
00:11:40,079 --> 00:11:43,600
initiation setting under the learning

223
00:11:43,600 --> 00:11:46,800
with errors assumptions

224
00:11:46,800 --> 00:11:49,040
the other one is secure in the no

225
00:11:49,040 --> 00:11:51,480
directional setting and based on

226
00:11:51,480 --> 00:11:54,320
indistinguishability obviously and one

227
00:11:54,320 --> 00:11:56,560
way functions

228
00:11:56,560 --> 00:11:59,440
this solved the open problem posed by

229
00:11:59,440 --> 00:12:03,800
zhang at aj 52 2020

230
00:12:05,760 --> 00:12:08,160
this is the comparison with previous

231
00:12:08,160 --> 00:12:10,000
schemes

232
00:12:10,000 --> 00:12:12,480
all known schemes are secure in the

233
00:12:12,480 --> 00:12:14,880
bi-directional key update setting

234
00:12:14,880 --> 00:12:16,720
and the bi-directional cybernetics

235
00:12:16,720 --> 00:12:19,600
update setting

236
00:12:19,600 --> 00:12:22,480
by jan's equivalence theorem these

237
00:12:22,480 --> 00:12:24,800
schemes are secure in the forward leak

238
00:12:24,800 --> 00:12:28,800
unidirectional key update setting

239
00:12:28,880 --> 00:12:32,000
we propose the fast secure schemes in

240
00:12:32,000 --> 00:12:34,880
the backquad leak unidirectional and no

241
00:12:34,880 --> 00:12:39,320
directional key update setting

242
00:12:39,440 --> 00:12:42,160
a concurrent and independent work by

243
00:12:42,160 --> 00:12:45,360
slamming and streaks presents a secure

244
00:12:45,360 --> 00:12:47,760
scheme in the no directional key update

245
00:12:47,760 --> 00:12:50,160
setting

246
00:12:50,639 --> 00:12:53,839
however the size of secret key and

247
00:12:53,839 --> 00:12:56,639
ciphertext depends on the total number

248
00:12:56,639 --> 00:12:59,519
of updates

249
00:12:59,600 --> 00:13:02,320
in previous and our schemes

250
00:13:02,320 --> 00:13:05,680
the size of secret key and ciphertext is

251
00:13:05,680 --> 00:13:08,239
constant

252
00:13:10,160 --> 00:13:11,839
let's see the backward leak

253
00:13:11,839 --> 00:13:14,639
unidirectional key updates are slightly

254
00:13:14,639 --> 00:13:19,639
stronger than the for forward liquid

255
00:13:20,399 --> 00:13:23,519
first we see a simple but crucial

256
00:13:23,519 --> 00:13:25,839
observation here

257
00:13:25,839 --> 00:13:28,320
ue needs the power of public key

258
00:13:28,320 --> 00:13:30,480
encryption

259
00:13:30,480 --> 00:13:34,240
all existing ui schemes need pk power

260
00:13:34,240 --> 00:13:36,880
since they rely on concrete assumptions

261
00:13:36,880 --> 00:13:40,240
that imply pka

262
00:13:40,240 --> 00:13:41,760
in addition

263
00:13:41,760 --> 00:13:45,199
rmit montego melee and petroleum proves

264
00:13:45,199 --> 00:13:48,880
that ue implies pk

265
00:13:48,880 --> 00:13:52,399
so we can assume a ue key consists of

266
00:13:52,399 --> 00:13:56,800
the secret key and public key parts

267
00:13:58,880 --> 00:14:02,800
a token is generated from two keys

268
00:14:02,800 --> 00:14:07,120
here and all the secret key is necessary

269
00:14:07,120 --> 00:14:09,839
otherwise the token does not have the

270
00:14:09,839 --> 00:14:12,800
power of converting an older ciphertext

271
00:14:12,800 --> 00:14:16,519
into a new

272
00:14:17,279 --> 00:14:20,399
how about a new secret key

273
00:14:20,399 --> 00:14:22,959
in fact we do not need the secret key

274
00:14:22,959 --> 00:14:26,160
part of the new key

275
00:14:28,880 --> 00:14:31,600
let's consider our token generated from

276
00:14:31,600 --> 00:14:34,160
an all the secret key and the public key

277
00:14:34,160 --> 00:14:37,120
part of a new key

278
00:14:37,120 --> 00:14:40,000
this token potentially converts and all

279
00:14:40,000 --> 00:14:43,199
the ciphertext into a new one since the

280
00:14:43,199 --> 00:14:44,880
public key part

281
00:14:44,880 --> 00:14:47,360
of the new key is sufficient for

282
00:14:47,360 --> 00:14:49,760
encryption

283
00:14:49,760 --> 00:14:52,560
in addition the token does not have

284
00:14:52,560 --> 00:14:55,519
information about sk sub e plus one

285
00:14:55,519 --> 00:14:59,839
beyond the pk sub e plus one

286
00:15:00,320 --> 00:15:03,279
so the token could be backwards leak

287
00:15:03,279 --> 00:15:06,639
unidirectional and could not be used to

288
00:15:06,639 --> 00:15:09,360
downgrade a new ciphertext into an old

289
00:15:09,360 --> 00:15:11,600
one

290
00:15:11,600 --> 00:15:12,880
in fact

291
00:15:12,880 --> 00:15:16,480
our bad quadric injection scheme has

292
00:15:16,480 --> 00:15:19,680
this structure

293
00:15:22,560 --> 00:15:25,440
in contrast a token generated from two

294
00:15:25,440 --> 00:15:28,079
secret keys is forward leak and

295
00:15:28,079 --> 00:15:30,000
bi-directional

296
00:15:30,000 --> 00:15:33,839
note that if we use pk sub e it is not

297
00:15:33,839 --> 00:15:36,639
clear whether a token can convert aside

298
00:15:36,639 --> 00:15:39,639
vertex

299
00:15:42,720 --> 00:15:45,600
now i present a concrete example that is

300
00:15:45,600 --> 00:15:48,079
secure in the bi-directional or forward

301
00:15:48,079 --> 00:15:50,959
leak in directional setting

302
00:15:50,959 --> 00:15:53,360
but not secure in the backwards any

303
00:15:53,360 --> 00:15:56,560
unidirectional setting

304
00:15:57,199 --> 00:16:00,639
john's equivalence theorem says that we

305
00:16:00,639 --> 00:16:03,040
trigger the trivial winning conditions

306
00:16:03,040 --> 00:16:04,240
in the by

307
00:16:04,240 --> 00:16:07,680
direction setting if and only if we

308
00:16:07,680 --> 00:16:10,160
trigger the trivial winning conditions

309
00:16:10,160 --> 00:16:12,240
in the forward-league unidirectional

310
00:16:12,240 --> 00:16:14,639
setting

311
00:16:15,519 --> 00:16:18,000
we consider the leakage condition in the

312
00:16:18,000 --> 00:16:21,000
table

313
00:16:23,519 --> 00:16:26,880
in the by dash bi-directional setting we

314
00:16:26,880 --> 00:16:29,920
can infer the second third and fifth

315
00:16:29,920 --> 00:16:34,160
secret keys via corrupted tokens

316
00:16:35,519 --> 00:16:39,360
as i show in the table the first sixth

317
00:16:39,360 --> 00:16:44,240
and seventh secret keys are protected

318
00:16:48,880 --> 00:16:51,440
in the fourth league setting we can

319
00:16:51,440 --> 00:16:55,279
infer the fifth secret key but cannot

320
00:16:55,279 --> 00:16:59,519
the second and third secret keys

321
00:17:01,279 --> 00:17:04,799
however we cannot set second and third

322
00:17:04,799 --> 00:17:07,199
epochs as a target

323
00:17:07,199 --> 00:17:09,839
since we can convert a ciphertext and

324
00:17:09,839 --> 00:17:12,799
the second and the second and third keys

325
00:17:12,799 --> 00:17:16,839
into one under corrupted keys via

326
00:17:16,839 --> 00:17:18,480
tokens

327
00:17:18,480 --> 00:17:19,359
so

328
00:17:19,359 --> 00:17:22,240
as in the bi-directional setting

329
00:17:22,240 --> 00:17:24,959
setting second and third e-books as a

330
00:17:24,959 --> 00:17:26,079
target

331
00:17:26,079 --> 00:17:30,918
triggers the trivial winning conditions

332
00:17:33,360 --> 00:17:36,400
in the backquadric setting we can infer

333
00:17:36,400 --> 00:17:39,280
the second and third secret keys

334
00:17:39,280 --> 00:17:43,840
but cannot the fifth secret key

335
00:17:45,280 --> 00:17:46,640
here

336
00:17:46,640 --> 00:17:50,000
we can set fifth epoch as a target since

337
00:17:50,000 --> 00:17:52,480
we cannot convert the ciphertext in the

338
00:17:52,480 --> 00:17:56,400
fifth ebook into one or under corrupted

339
00:17:56,400 --> 00:17:59,600
keys in the universal ciphertext update

340
00:17:59,600 --> 00:18:02,080
setting

341
00:18:03,919 --> 00:18:04,799
thus

342
00:18:04,799 --> 00:18:07,280
unlike the four oblique unidirectional

343
00:18:07,280 --> 00:18:09,280
and bi-directional setting

344
00:18:09,280 --> 00:18:11,520
the fifth epoch does not

345
00:18:11,520 --> 00:18:16,000
trigger the trivial winning conditions

346
00:18:20,480 --> 00:18:22,480
this corruption setting shows the

347
00:18:22,480 --> 00:18:24,559
separation result

348
00:18:24,559 --> 00:18:26,559
previous schemes are secure in the

349
00:18:26,559 --> 00:18:28,640
bi-directional or forward-look

350
00:18:28,640 --> 00:18:31,840
unidirectional setting

351
00:18:31,919 --> 00:18:34,559
in the setting we can not set the fifth

352
00:18:34,559 --> 00:18:37,520
epoch as a target

353
00:18:37,520 --> 00:18:38,559
however

354
00:18:38,559 --> 00:18:40,559
in the backward league in ejection

355
00:18:40,559 --> 00:18:43,440
setting we can set the fifth epoch as a

356
00:18:43,440 --> 00:18:45,840
target

357
00:18:46,559 --> 00:18:49,039
non-secure schemes do not prevent

358
00:18:49,039 --> 00:18:52,320
extracting a new secret key from a token

359
00:18:52,320 --> 00:18:54,240
under other key

360
00:18:54,240 --> 00:18:57,520
so it means known schemes are not secure

361
00:18:57,520 --> 00:18:59,600
in the backward league unidirectional

362
00:18:59,600 --> 00:19:02,000
setting

363
00:19:02,000 --> 00:19:04,880
i do not explain security experiment for

364
00:19:04,880 --> 00:19:07,360
ue since they are not crucial to

365
00:19:07,360 --> 00:19:09,200
understanding the difference of

366
00:19:09,200 --> 00:19:12,559
directions in ue

367
00:19:16,320 --> 00:19:20,240
now let's see our construction

368
00:19:20,480 --> 00:19:23,760
first i explain our backwatering

369
00:19:23,760 --> 00:19:26,320
medicinal scheme

370
00:19:26,320 --> 00:19:28,960
the idea is simple

371
00:19:28,960 --> 00:19:32,080
i use fully homomorphic encryption to

372
00:19:32,080 --> 00:19:35,439
explain our idea

373
00:19:36,640 --> 00:19:39,760
a token is the ciphertext orban all the

374
00:19:39,760 --> 00:19:42,960
secret key sk sub e and the new public

375
00:19:42,960 --> 00:19:46,960
key p k sub e plus one

376
00:19:46,960 --> 00:19:50,080
a rectangle denotes encryption under

377
00:19:50,080 --> 00:19:53,639
some public key

378
00:19:54,320 --> 00:19:57,520
a ciphertext is simple encryption of a

379
00:19:57,520 --> 00:20:01,520
message under pk submit

380
00:20:02,480 --> 00:20:04,880
to update the ciphertext

381
00:20:04,880 --> 00:20:07,360
we encrypt the ciphertext by using the

382
00:20:07,360 --> 00:20:11,760
new public key pk sub v plus 1.

383
00:20:12,480 --> 00:20:13,360
then

384
00:20:13,360 --> 00:20:15,840
we homomorphically decrypt the

385
00:20:15,840 --> 00:20:18,960
ciphertext under pk sub e by using the

386
00:20:18,960 --> 00:20:22,640
evaluation algorithm of fat

387
00:20:22,640 --> 00:20:25,200
and get the ciphertext of m under the

388
00:20:25,200 --> 00:20:29,360
new public key p k sub e plus one

389
00:20:32,240 --> 00:20:35,760
this idea is based on fhe

390
00:20:35,760 --> 00:20:39,120
however we directly construct our scheme

391
00:20:39,120 --> 00:20:42,799
by using the key switching technique

392
00:20:42,799 --> 00:20:48,799
so we do not rely on fpg in our scheme

393
00:20:48,799 --> 00:20:51,039
the construction idea comes from

394
00:20:51,039 --> 00:20:54,000
unidirectional perks re-encryption based

395
00:20:54,000 --> 00:20:57,520
on the lw assumption

396
00:20:57,760 --> 00:21:00,960
the token can be generated from an order

397
00:21:00,960 --> 00:21:03,600
secret key and a new public key

398
00:21:03,600 --> 00:21:06,720
so it is easy to see that the token is

399
00:21:06,720 --> 00:21:10,559
backward leaking directional

400
00:21:10,559 --> 00:21:13,440
we can also see that our scheme has

401
00:21:13,440 --> 00:21:17,840
unidirectional ciphertext updates

402
00:21:18,080 --> 00:21:20,799
if we can downgrade a ciphertext by

403
00:21:20,799 --> 00:21:22,480
using a token

404
00:21:22,480 --> 00:21:26,240
we can break the security of the old key

405
00:21:26,240 --> 00:21:31,080
without the old secret key

406
00:21:31,200 --> 00:21:34,000
note that we do not need to use the all

407
00:21:34,000 --> 00:21:38,559
the secret key to generate a token

408
00:21:42,159 --> 00:21:46,080
lastly we see our non-directional scheme

409
00:21:46,080 --> 00:21:49,360
the idea is obfuscating re-encryption

410
00:21:49,360 --> 00:21:51,120
circuit

411
00:21:51,120 --> 00:21:54,559
a re-encryption circuit takes an old

412
00:21:54,559 --> 00:21:55,840
ciphertext

413
00:21:55,840 --> 00:21:57,200
decrypts it

414
00:21:57,200 --> 00:21:59,120
encrypts the result

415
00:21:59,120 --> 00:22:00,159
again

416
00:22:00,159 --> 00:22:04,799
and outputs the re-encrypted ciphertext

417
00:22:05,840 --> 00:22:09,120
a token is an obfuscated re-encryption

418
00:22:09,120 --> 00:22:10,799
circuit

419
00:22:10,799 --> 00:22:13,600
in the circuit the old and new secret

420
00:22:13,600 --> 00:22:16,080
keys are hard wired but they are

421
00:22:16,080 --> 00:22:20,480
protected by the security of obfuscation

422
00:22:20,480 --> 00:22:23,280
so this scheme has the no directional

423
00:22:23,280 --> 00:22:25,360
key updates

424
00:22:25,360 --> 00:22:27,760
it is easy to see that this scheme has

425
00:22:27,760 --> 00:22:31,919
unidirectional ciphertext updates

426
00:22:32,640 --> 00:22:35,760
in our construction we cannot use secret

427
00:22:35,760 --> 00:22:38,720
key encryption in the blog box way since

428
00:22:38,720 --> 00:22:40,799
we use indistinguishability of the

429
00:22:40,799 --> 00:22:42,960
sketching

430
00:22:42,960 --> 00:22:46,640
we use punctuable prfs as secret key

431
00:22:46,640 --> 00:22:51,120
encryption and achieve secure ue

432
00:22:53,600 --> 00:22:57,120
let me summarize my talk

433
00:22:57,679 --> 00:23:00,000
we propose a new definition for

434
00:23:00,000 --> 00:23:01,840
updatable encryption

435
00:23:01,840 --> 00:23:05,919
backward link in directional key updates

436
00:23:05,919 --> 00:23:08,640
we show that existing bi-directional key

437
00:23:08,640 --> 00:23:11,039
update scheme are not secure in the

438
00:23:11,039 --> 00:23:14,640
backwatering directional setting

439
00:23:14,640 --> 00:23:17,440
this is in sharp contrast to jan's

440
00:23:17,440 --> 00:23:20,000
equivalence theorem which says the

441
00:23:20,000 --> 00:23:22,159
security in the bi-directional key of

442
00:23:22,159 --> 00:23:24,080
this setting is equivalent to the

443
00:23:24,080 --> 00:23:26,720
security in the public unidirectional

444
00:23:26,720 --> 00:23:28,720
setting

445
00:23:28,720 --> 00:23:31,760
we propose two new ue schemes

446
00:23:31,760 --> 00:23:34,080
one is backwards rig immediate channel

447
00:23:34,080 --> 00:23:37,679
scheme from the lw assumption

448
00:23:37,679 --> 00:23:40,320
the other one is no directional scheme

449
00:23:40,320 --> 00:23:44,159
from io and one way functions

450
00:23:44,159 --> 00:23:46,960
both schemes have injection ciphertext

451
00:23:46,960 --> 00:23:49,440
updates

452
00:23:49,600 --> 00:23:52,960
our take home message is the direction

453
00:23:52,960 --> 00:23:57,440
of updatable encryption does matter

454
00:23:57,760 --> 00:24:03,000
that's it thank you for watching my talk

