1
00:00:00,480 --> 00:00:03,360
hello thank you for watching this talk

2
00:00:03,360 --> 00:00:06,480
on polynomial iops for linear algebra

3
00:00:06,480 --> 00:00:08,400
this is john's work between alan

4
00:00:08,400 --> 00:00:13,280
shapines and myself yin seung zhang

5
00:00:15,040 --> 00:00:17,039
this work deals with succinct

6
00:00:17,039 --> 00:00:19,279
non-interactive arguments of knowledge

7
00:00:19,279 --> 00:00:21,199
or snags

8
00:00:21,199 --> 00:00:23,519
in this setting there are two parties

9
00:00:23,519 --> 00:00:27,198
the approver and the verifier

10
00:00:27,439 --> 00:00:29,599
the approver is trying to convince the

11
00:00:29,599 --> 00:00:32,800
verifier that's given the instance x the

12
00:00:32,800 --> 00:00:35,280
prover knows a weakness w

13
00:00:35,280 --> 00:00:38,000
such that x and w satisfy a certain

14
00:00:38,000 --> 00:00:40,719
relation that is typically described by

15
00:00:40,719 --> 00:00:42,800
a computation c

16
00:00:42,800 --> 00:00:46,559
this job can be accomplished by a snark

17
00:00:46,559 --> 00:00:49,440
a snark consists of three algorithms

18
00:00:49,440 --> 00:00:52,079
namely the setup which often involves

19
00:00:52,079 --> 00:00:54,800
pre-processing the computation c

20
00:00:54,800 --> 00:00:57,280
the approval on inputs both the instance

21
00:00:57,280 --> 00:00:58,719
and the riskiness

22
00:00:58,719 --> 00:01:02,000
produces a proof string denoted by pi

23
00:01:02,000 --> 00:01:04,959
and sends it to the verifier who decides

24
00:01:04,959 --> 00:01:08,559
whether to accept this proof

25
00:01:09,280 --> 00:01:12,159
the snark has the following properties

26
00:01:12,159 --> 00:01:14,880
by succinctness it requires that the

27
00:01:14,880 --> 00:01:17,600
proof size is logarithmic to the circuit

28
00:01:17,600 --> 00:01:20,240
size sometimes this logarithmic

29
00:01:20,240 --> 00:01:22,479
restriction also applies to the running

30
00:01:22,479 --> 00:01:24,560
time of the very fire

31
00:01:24,560 --> 00:01:26,720
by the interactivity the approval

32
00:01:26,720 --> 00:01:28,479
generates the proof string without

33
00:01:28,479 --> 00:01:30,560
receiving any information from the web

34
00:01:30,560 --> 00:01:31,439
file

35
00:01:31,439 --> 00:01:33,680
so one puff string can be stored and

36
00:01:33,680 --> 00:01:36,079
repeatedly used to convince more than

37
00:01:36,079 --> 00:01:38,880
one wire file

38
00:01:38,880 --> 00:01:41,280
finally by arguments of knowledge the

39
00:01:41,280 --> 00:01:43,759
proverb shows that the witness w not

40
00:01:43,759 --> 00:01:48,479
only exists but is known to the approver

41
00:01:49,360 --> 00:01:51,280
recently many snarks have been

42
00:01:51,280 --> 00:01:52,640
constructed

43
00:01:52,640 --> 00:01:54,880
most constructions can be fed into the

44
00:01:54,880 --> 00:01:57,119
following pipeline

45
00:01:57,119 --> 00:01:58,719
this pipeline starts from the

46
00:01:58,719 --> 00:02:01,759
computation the c in the previous slide

47
00:02:01,759 --> 00:02:04,799
which is mostly described by program or

48
00:02:04,799 --> 00:02:07,799
circuit

49
00:02:08,000 --> 00:02:09,758
the first step called the

50
00:02:09,758 --> 00:02:12,080
arithmetization transforms this

51
00:02:12,080 --> 00:02:14,239
computation into a form that is more

52
00:02:14,239 --> 00:02:16,560
friendly to mathematicians

53
00:02:16,560 --> 00:02:19,599
rcs and hpr are popular candidates for

54
00:02:19,599 --> 00:02:22,319
this step

55
00:02:22,319 --> 00:02:24,480
the next step which is usually the most

56
00:02:24,480 --> 00:02:27,040
complex step is to design an information

57
00:02:27,040 --> 00:02:29,440
theoretical protocol for the arithmetic

58
00:02:29,440 --> 00:02:31,120
representation

59
00:02:31,120 --> 00:02:33,760
this protocol is designed in the context

60
00:02:33,760 --> 00:02:37,360
of an idealized model for example pcp

61
00:02:37,360 --> 00:02:41,680
linear pcp ilp and so on

62
00:02:41,680 --> 00:02:44,400
as pointed out by boone's accessor all

63
00:02:44,400 --> 00:02:46,480
these idealized models can be viewed as

64
00:02:46,480 --> 00:02:48,800
a special case of the polynomial iop

65
00:02:48,800 --> 00:02:52,000
model a polynomial iop is an interactive

66
00:02:52,000 --> 00:02:54,480
protocol where all the messages sent

67
00:02:54,480 --> 00:02:56,640
from the prover to the verifier are

68
00:02:56,640 --> 00:02:59,519
polynomials over finite fields

69
00:02:59,519 --> 00:03:02,239
these polynomials can be huge the wi-fi

70
00:03:02,239 --> 00:03:04,640
cannot be read the entire polynomials

71
00:03:04,640 --> 00:03:06,720
because the verifier is much weaker than

72
00:03:06,720 --> 00:03:07,920
the prover

73
00:03:07,920 --> 00:03:10,560
therefore in the polynomial iop model

74
00:03:10,560 --> 00:03:13,200
the verifier only receives an evaluation

75
00:03:13,200 --> 00:03:15,920
oracle for this polynomial

76
00:03:15,920 --> 00:03:18,159
the verifier may pick up three points

77
00:03:18,159 --> 00:03:19,760
say y and j

78
00:03:19,760 --> 00:03:22,560
and query this oracle to obtain fy and

79
00:03:22,560 --> 00:03:24,879
fc respectively

80
00:03:24,879 --> 00:03:27,760
obviously polynomials do not exist in

81
00:03:27,760 --> 00:03:30,000
the real world so we need to replace

82
00:03:30,000 --> 00:03:32,799
them by cryptographic tool called

83
00:03:32,799 --> 00:03:35,920
polynomial commitment

84
00:03:36,000 --> 00:03:38,080
this brings us back to the last step of

85
00:03:38,080 --> 00:03:40,319
the construction pipeline where we

86
00:03:40,319 --> 00:03:42,640
finally get a snark by compiling the

87
00:03:42,640 --> 00:03:44,720
information theoretical protocol using

88
00:03:44,720 --> 00:03:46,720
cryptographic tools

89
00:03:46,720 --> 00:03:48,879
like the kzg or dark polynomial

90
00:03:48,879 --> 00:03:51,120
commitments under the via xiaomi

91
00:03:51,120 --> 00:03:53,760
heuristic which is frequently used to

92
00:03:53,760 --> 00:03:55,840
transform interactive protocols into

93
00:03:55,840 --> 00:03:58,959
non-interactive schemes

94
00:03:58,959 --> 00:04:02,000
in this work we focus on the second step

95
00:04:02,000 --> 00:04:04,640
information theoretic compilation

96
00:04:04,640 --> 00:04:07,280
this step transforms an arithmetic

97
00:04:07,280 --> 00:04:11,519
representation into a polynomial iob

98
00:04:12,319 --> 00:04:14,239
the arithmetic representation is

99
00:04:14,239 --> 00:04:17,199
typically described by matrices factors

100
00:04:17,199 --> 00:04:20,959
and operations in linear algebra

101
00:04:20,959 --> 00:04:23,600
the polynomial b however provides a

102
00:04:23,600 --> 00:04:25,199
difference interface

103
00:04:25,199 --> 00:04:28,000
the objects are polynomials and the

104
00:04:28,000 --> 00:04:31,440
operations are evaluations

105
00:04:31,440 --> 00:04:33,840
therefore the key questions in designing

106
00:04:33,840 --> 00:04:36,320
polynomial iops are representing the

107
00:04:36,320 --> 00:04:39,040
matrices and vectors by polynomials and

108
00:04:39,040 --> 00:04:41,680
simulating the operations in the algebra

109
00:04:41,680 --> 00:04:45,040
by those of polynomials

110
00:04:45,440 --> 00:04:47,840
most existing works take the resolution

111
00:04:47,840 --> 00:04:50,880
code basis representation where a vector

112
00:04:50,880 --> 00:04:52,720
is identified by the polynomial

113
00:04:52,720 --> 00:04:55,360
evaluations over domain which is a

114
00:04:55,360 --> 00:04:58,000
subset in the final field this snark is

115
00:04:58,000 --> 00:04:59,440
based on

116
00:04:59,440 --> 00:05:01,680
the problem with this representation is

117
00:05:01,680 --> 00:05:04,320
that the domain must have a nice

118
00:05:04,320 --> 00:05:06,000
algebraic structure

119
00:05:06,000 --> 00:05:08,000
so the choices of finite fields are

120
00:05:08,000 --> 00:05:10,560
limited

121
00:05:10,560 --> 00:05:12,639
a more straightforward approach is to

122
00:05:12,639 --> 00:05:14,560
use the monomial basis

123
00:05:14,560 --> 00:05:17,199
which directly embeds the vector entries

124
00:05:17,199 --> 00:05:20,240
into the polynomial coefficient

125
00:05:20,240 --> 00:05:23,039
this approach does not put any limits on

126
00:05:23,039 --> 00:05:25,199
the choice of final fields

127
00:05:25,199 --> 00:05:26,240
however

128
00:05:26,240 --> 00:05:28,800
fieldworks take this approach as the

129
00:05:28,800 --> 00:05:30,400
methods for simulating the linear

130
00:05:30,400 --> 00:05:32,320
algebra operations in this

131
00:05:32,320 --> 00:05:36,240
representation are largely unexplored

132
00:05:36,240 --> 00:05:39,680
the only exception sonic is outperformed

133
00:05:39,680 --> 00:05:42,000
by the popular works like planck or

134
00:05:42,000 --> 00:05:44,320
marine that are based on the rhythmical

135
00:05:44,320 --> 00:05:46,719
basis

136
00:05:46,880 --> 00:05:49,199
to uncover the potential of the monomial

137
00:05:49,199 --> 00:05:51,919
basis representation we construct a

138
00:05:51,919 --> 00:05:53,600
polynomial iop

139
00:05:53,600 --> 00:05:56,160
which rename climor after type of

140
00:05:56,160 --> 00:05:58,240
scottish sword

141
00:05:58,240 --> 00:06:00,720
our work reveals a rich set of linear

142
00:06:00,720 --> 00:06:02,639
algebra operations that can be

143
00:06:02,639 --> 00:06:05,360
implemented in the monomial basis with

144
00:06:05,360 --> 00:06:08,639
competitive efficiency

145
00:06:09,680 --> 00:06:11,759
claymore is built for the arithmetic

146
00:06:11,759 --> 00:06:14,160
representation of circuits called the

147
00:06:14,160 --> 00:06:16,319
hadamard product relation

148
00:06:16,319 --> 00:06:19,280
shorthand hbr this is a variant of the

149
00:06:19,280 --> 00:06:21,759
circuit's representation proposed by the

150
00:06:21,759 --> 00:06:25,039
work of bruto in 2016.

151
00:06:25,039 --> 00:06:28,240
this relation is indexed by matrix m

152
00:06:28,240 --> 00:06:32,000
which is determined by the circuit

153
00:06:32,000 --> 00:06:35,280
the instance of hpr is a sparse vector x

154
00:06:35,280 --> 00:06:37,360
corresponding to the public inputs and

155
00:06:37,360 --> 00:06:39,840
outputs of the circuits

156
00:06:39,840 --> 00:06:42,000
the witness w consists of three vectors

157
00:06:42,000 --> 00:06:44,319
that respectively corresponds to the

158
00:06:44,319 --> 00:06:46,400
wires of the left inputs write inputs

159
00:06:46,400 --> 00:06:49,440
and outputs of the multiplication gates

160
00:06:49,440 --> 00:06:51,520
the instance and witness pair satisfies

161
00:06:51,520 --> 00:06:53,919
this hpr if the multiplication of the

162
00:06:53,919 --> 00:06:56,720
left inputs and the right inputs exactly

163
00:06:56,720 --> 00:06:59,840
produce the values of the output wires

164
00:06:59,840 --> 00:07:01,919
and the y values satisfy the linear

165
00:07:01,919 --> 00:07:06,319
relation specified by the matrix m

166
00:07:06,319 --> 00:07:08,160
the first step to construct the

167
00:07:08,160 --> 00:07:09,680
polynomial iop

168
00:07:09,680 --> 00:07:12,800
is to represent the objects in hpr by

169
00:07:12,800 --> 00:07:14,560
polynomials

170
00:07:14,560 --> 00:07:17,520
recall that we chose the monomial basis

171
00:07:17,520 --> 00:07:19,120
representation

172
00:07:19,120 --> 00:07:21,680
so for the vector a the entries of the

173
00:07:21,680 --> 00:07:24,479
vector are taken as the polynomial

174
00:07:24,479 --> 00:07:27,360
coefficient we denote the polynomial by

175
00:07:27,360 --> 00:07:31,199
f subscripts a for the matrix we simply

176
00:07:31,199 --> 00:07:33,599
concatenate all the rule vectors before

177
00:07:33,599 --> 00:07:37,280
treating them as the coefficients

178
00:07:37,360 --> 00:07:40,240
next we will introduce how to implement

179
00:07:40,240 --> 00:07:42,639
the polynomial iop for all the necessary

180
00:07:42,639 --> 00:07:45,919
operations each in the sub-particle

181
00:07:45,919 --> 00:07:48,000
we introduce these star particles from

182
00:07:48,000 --> 00:07:50,000
bottom to top

183
00:07:50,000 --> 00:07:52,080
and finally compose them into the

184
00:07:52,080 --> 00:07:54,080
claymore protocol

185
00:07:54,080 --> 00:07:56,400
we start from module reduce which is not

186
00:07:56,400 --> 00:07:58,560
a linear algebra operation but is

187
00:07:58,560 --> 00:08:00,720
required in the matrix vector product

188
00:08:00,720 --> 00:08:03,199
protocol

189
00:08:04,080 --> 00:08:06,240
the most reduced protocol assumes that

190
00:08:06,240 --> 00:08:08,960
the wi-fi already has two polynomials f

191
00:08:08,960 --> 00:08:12,560
x and rx and convinces the verifier that

192
00:08:12,560 --> 00:08:15,280
rx is the remainder of f x divided by

193
00:08:15,280 --> 00:08:18,240
the public polynomial p

194
00:08:18,240 --> 00:08:20,240
the protocol is straightforward the

195
00:08:20,240 --> 00:08:23,520
approval divides f x by p x and sends

196
00:08:23,520 --> 00:08:25,520
the quotient polynomial q x to the

197
00:08:25,520 --> 00:08:27,840
verifier and the wi-fi checks the

198
00:08:27,840 --> 00:08:30,080
polynomial identity deduced from the

199
00:08:30,080 --> 00:08:32,640
definition of polynomial division as a

200
00:08:32,640 --> 00:08:35,919
uniformly random point today

201
00:08:35,919 --> 00:08:38,399
the equality at this random points

202
00:08:38,399 --> 00:08:40,479
implies the equality of the entire

203
00:08:40,479 --> 00:08:41,839
polynomials

204
00:08:41,839 --> 00:08:44,640
due to the structural lemma

205
00:08:44,640 --> 00:08:46,640
now the model reduced protocol is

206
00:08:46,640 --> 00:08:48,240
finished

207
00:08:48,240 --> 00:08:52,160
next is the inner product protocol

208
00:08:52,160 --> 00:08:54,080
this protocol convinces the verifier

209
00:08:54,080 --> 00:08:56,160
that the inner product between two

210
00:08:56,160 --> 00:08:59,600
factors a and b is a public value c

211
00:08:59,600 --> 00:09:01,440
when the verifier has oracles for

212
00:09:01,440 --> 00:09:05,519
polynomials f a x and f b x

213
00:09:05,519 --> 00:09:06,959
to achieve this

214
00:09:06,959 --> 00:09:09,440
approval reverses the coefficients of f

215
00:09:09,440 --> 00:09:11,200
a x

216
00:09:11,200 --> 00:09:12,959
the reversion is achieved by

217
00:09:12,959 --> 00:09:15,680
substituting x by x inverse then

218
00:09:15,680 --> 00:09:18,480
multiplying x to the power of d the

219
00:09:18,480 --> 00:09:20,880
maximum degree of f x

220
00:09:20,880 --> 00:09:24,240
then multiply this reversed f x with f p

221
00:09:24,240 --> 00:09:26,160
x to get h x

222
00:09:26,160 --> 00:09:29,360
whose coefficients for x to d is exactly

223
00:09:29,360 --> 00:09:32,160
the linear product between a and b

224
00:09:32,160 --> 00:09:34,000
so the job of the problem becomes

225
00:09:34,000 --> 00:09:36,800
showing that this coefficient of hx

226
00:09:36,800 --> 00:09:38,880
equals c

227
00:09:38,880 --> 00:09:40,959
to accomplish this the problem tries to

228
00:09:40,959 --> 00:09:44,000
find such an hyx and express hx in this

229
00:09:44,000 --> 00:09:44,800
form

230
00:09:44,800 --> 00:09:47,200
it's easy to check that a polynomial of

231
00:09:47,200 --> 00:09:49,040
this form is guaranteed to have

232
00:09:49,040 --> 00:09:52,320
coefficient c for the disk power

233
00:09:52,320 --> 00:09:54,320
with properly chosen gamma it's also

234
00:09:54,320 --> 00:09:56,800
easy to find such an h bikes

235
00:09:56,800 --> 00:09:59,920
so the prover sends the oracle of hbx to

236
00:09:59,920 --> 00:10:02,399
the verifier

237
00:10:02,399 --> 00:10:05,040
then the web checks the validity of h

238
00:10:05,040 --> 00:10:07,600
bar x by definition at a uniformly

239
00:10:07,600 --> 00:10:10,000
randomly sampled points j

240
00:10:10,000 --> 00:10:11,680
this completes the inner product

241
00:10:11,680 --> 00:10:14,160
protocol

242
00:10:15,600 --> 00:10:17,600
based on the inner product protocol we

243
00:10:17,600 --> 00:10:20,320
are now ready to implement the hadamard

244
00:10:20,320 --> 00:10:22,079
product

245
00:10:22,079 --> 00:10:24,120
the verifier has access to three

246
00:10:24,120 --> 00:10:27,440
polynomials fa fb and fc

247
00:10:27,440 --> 00:10:29,120
and the approval try to convince the

248
00:10:29,120 --> 00:10:32,640
wi-fi that a times b is c where the

249
00:10:32,640 --> 00:10:35,760
multiplication is helmet product which

250
00:10:35,760 --> 00:10:37,440
is a fascinating for enterovirus

251
00:10:37,440 --> 00:10:40,959
products between vectors

252
00:10:40,959 --> 00:10:42,560
the idea

253
00:10:42,560 --> 00:10:45,760
is still to use schwarzenegger by this

254
00:10:45,760 --> 00:10:48,640
lemma the vector identity a times b

255
00:10:48,640 --> 00:10:50,959
equals c can be implied from the

256
00:10:50,959 --> 00:10:54,320
inequality between f a b alpha and fc

257
00:10:54,320 --> 00:10:58,480
alpha for uniformly random alpha

258
00:10:58,800 --> 00:11:01,200
so the verifier samples offer and checks

259
00:11:01,200 --> 00:11:02,560
this identity

260
00:11:02,560 --> 00:11:04,720
the right hand side is simply evaluating

261
00:11:04,720 --> 00:11:07,920
as cx at alpha while the left-hand side

262
00:11:07,920 --> 00:11:09,519
is the inner products between the

263
00:11:09,519 --> 00:11:14,079
coefficient vectors of fa of x and fbx

264
00:11:14,079 --> 00:11:16,320
since the verifier has the oracle for

265
00:11:16,320 --> 00:11:17,519
fax

266
00:11:17,519 --> 00:11:20,399
the wi-fi can simulate the oracle for fa

267
00:11:20,399 --> 00:11:23,519
r4x by multiplying alpha to whatever is

268
00:11:23,519 --> 00:11:25,600
queried to this oracle

269
00:11:25,600 --> 00:11:27,519
therefore the wi-fi can check the

270
00:11:27,519 --> 00:11:29,440
equality by running the inner product

271
00:11:29,440 --> 00:11:32,800
protocol with the approval

272
00:11:32,880 --> 00:11:35,200
now we are left with the last linear

273
00:11:35,200 --> 00:11:38,000
operation and the most complex one the

274
00:11:38,000 --> 00:11:40,720
matrix vector product

275
00:11:40,720 --> 00:11:44,720
we introduced two particles for this job

276
00:11:44,720 --> 00:11:46,800
first consider the case when the matrix

277
00:11:46,800 --> 00:11:48,240
b is dense

278
00:11:48,240 --> 00:11:50,639
we call this version the dense mvp

279
00:11:50,639 --> 00:11:52,800
protocol

280
00:11:52,800 --> 00:11:56,639
assume that the size of b is m times n

281
00:11:56,639 --> 00:12:00,000
recall that the coefficients of f b x is

282
00:12:00,000 --> 00:12:03,519
the calculation of all the row vectors

283
00:12:03,519 --> 00:12:05,839
now for uniformly random alpha consider

284
00:12:05,839 --> 00:12:08,959
reducing f b x modulus x to n minus

285
00:12:08,959 --> 00:12:10,399
alpha

286
00:12:10,399 --> 00:12:13,519
this effectively replaces all the x to n

287
00:12:13,519 --> 00:12:15,920
with alpha

288
00:12:15,920 --> 00:12:19,680
now look at the remainder polynomial rx

289
00:12:19,680 --> 00:12:22,959
the coefficient vector of rx is exactly

290
00:12:22,959 --> 00:12:25,680
the linear combination of the rows of b

291
00:12:25,680 --> 00:12:27,920
by one alpha alpha squared all the way

292
00:12:27,920 --> 00:12:30,560
to alpha to minus one

293
00:12:30,560 --> 00:12:33,120
this is exactly multiplying the alpha

294
00:12:33,120 --> 00:12:37,120
vector to the left of the matrix b

295
00:12:37,120 --> 00:12:39,920
with this in mind the identity c equals

296
00:12:39,920 --> 00:12:43,760
ba can be verified as follows

297
00:12:43,760 --> 00:12:45,920
we multiply the alpha vector to both

298
00:12:45,920 --> 00:12:48,720
sides by schwarzepolema this new

299
00:12:48,720 --> 00:12:53,200
identity implies the original affinity

300
00:12:53,200 --> 00:12:55,920
the left hand side is simply fc alpha

301
00:12:55,920 --> 00:12:58,079
the right hand side is the inner product

302
00:12:58,079 --> 00:13:02,079
between rx and the vector a

303
00:13:02,320 --> 00:13:04,560
now we formalize this observation into

304
00:13:04,560 --> 00:13:07,279
the following pascal assume the verifier

305
00:13:07,279 --> 00:13:10,639
has polynomial equals fc fb and fa

306
00:13:10,639 --> 00:13:13,760
to prove that c equals ba

307
00:13:13,760 --> 00:13:16,399
the web file samples a random alpha as

308
00:13:16,399 --> 00:13:18,399
discussed before

309
00:13:18,399 --> 00:13:20,079
the prover that sends the remainder

310
00:13:20,079 --> 00:13:23,920
polynomial rx to the rare file

311
00:13:24,000 --> 00:13:26,800
the wi-fi first ensures that the

312
00:13:26,800 --> 00:13:30,079
inner products of r and a is fc alpha by

313
00:13:30,079 --> 00:13:32,160
the inner product protocol which we just

314
00:13:32,160 --> 00:13:34,560
introduced

315
00:13:34,560 --> 00:13:37,279
then the profile checks that rx is

316
00:13:37,279 --> 00:13:41,040
correct by the mod reduce protocol

317
00:13:41,040 --> 00:13:42,959
in this first go the running time of the

318
00:13:42,959 --> 00:13:45,680
approval is at least linear to the total

319
00:13:45,680 --> 00:13:48,320
number of entries in the matrix this is

320
00:13:48,320 --> 00:13:50,560
the case even if most of the entries are

321
00:13:50,560 --> 00:13:51,519
zero

322
00:13:51,519 --> 00:13:53,519
this can be inefficient since in

323
00:13:53,519 --> 00:13:56,399
practice the matrix is often large and

324
00:13:56,399 --> 00:13:58,160
sparse

325
00:13:58,160 --> 00:14:00,480
therefore for sparse matrix where the

326
00:14:00,480 --> 00:14:03,279
number of zero entries is much smaller

327
00:14:03,279 --> 00:14:05,600
than the total number of entries which

328
00:14:05,600 --> 00:14:08,399
suggests an alternative protocol

329
00:14:08,399 --> 00:14:10,240
where the running time of the approval

330
00:14:10,240 --> 00:14:12,480
depends only on the number of zero

331
00:14:12,480 --> 00:14:15,480
entries

332
00:14:16,079 --> 00:14:18,639
to explain the sparse and vp protocol we

333
00:14:18,639 --> 00:14:23,440
look at the identity c equals ba again

334
00:14:23,519 --> 00:14:25,600
we multiply the alpha vector to both

335
00:14:25,600 --> 00:14:28,000
sides as we did before

336
00:14:28,000 --> 00:14:30,639
the left hand side is still fc alpha and

337
00:14:30,639 --> 00:14:32,480
the right hand side is the inner product

338
00:14:32,480 --> 00:14:34,160
between r and a

339
00:14:34,160 --> 00:14:37,040
different from this mvp after the prover

340
00:14:37,040 --> 00:14:39,360
sends rx to the verifier instead of

341
00:14:39,360 --> 00:14:41,440
using the multi-radius protocol as in

342
00:14:41,440 --> 00:14:43,839
density and vp we let the verifier

343
00:14:43,839 --> 00:14:47,040
validate the rx with another approach

344
00:14:47,040 --> 00:14:48,880
now the original problem has been

345
00:14:48,880 --> 00:14:51,920
reduced to checking this new identity

346
00:14:51,920 --> 00:14:54,399
we apply forcible lemma again by

347
00:14:54,399 --> 00:14:56,480
multiplying another random vector which

348
00:14:56,480 --> 00:14:58,720
we call better vector to both sides of

349
00:14:58,720 --> 00:15:00,399
the equation

350
00:15:00,399 --> 00:15:02,560
we are better assembled independently

351
00:15:02,560 --> 00:15:05,279
from alpha

352
00:15:05,279 --> 00:15:08,240
obviously the left-hand side is operator

353
00:15:08,240 --> 00:15:10,800
what about the right hand side

354
00:15:10,800 --> 00:15:13,040
this is where the sparsity of the matrix

355
00:15:13,040 --> 00:15:14,639
comes into play

356
00:15:14,639 --> 00:15:17,279
assume there are k natural entries in

357
00:15:17,279 --> 00:15:20,399
the matrix with zero indices a1 a2 up to

358
00:15:20,399 --> 00:15:24,160
ak call indices b1 b2 up to bk and entry

359
00:15:24,160 --> 00:15:27,040
values c1 c2 up to ck

360
00:15:27,040 --> 00:15:28,720
then the right hand side can be written

361
00:15:28,720 --> 00:15:31,360
as the sum of kick items

362
00:15:31,360 --> 00:15:33,839
rises sum in the form of vectors we

363
00:15:33,839 --> 00:15:36,639
denote the vector of all the ck by v the

364
00:15:36,639 --> 00:15:39,440
other two multiplicands are similarly

365
00:15:39,440 --> 00:15:42,720
collected into vectors of size k

366
00:15:42,720 --> 00:15:45,839
denoted by x and y respectively

367
00:15:45,839 --> 00:15:47,600
then the sum is the inner product

368
00:15:47,600 --> 00:15:50,399
between v and the hadamard product of x

369
00:15:50,399 --> 00:15:52,320
and y

370
00:15:52,320 --> 00:15:54,079
the verifier can then check this

371
00:15:54,079 --> 00:15:56,959
identity by a headmat protocol

372
00:15:56,959 --> 00:16:00,800
followed by an inner product protocol

373
00:16:00,800 --> 00:16:03,279
the problem is how can the verifier

374
00:16:03,279 --> 00:16:06,639
obtain the polynomials fvx

375
00:16:06,639 --> 00:16:09,839
fx x and f y x

376
00:16:09,839 --> 00:16:12,880
for f v x note that the vector b depends

377
00:16:12,880 --> 00:16:15,279
only on the matrix b which is learned

378
00:16:15,279 --> 00:16:17,199
before the protocol started

379
00:16:17,199 --> 00:16:19,680
therefore the verifier may preprocess

380
00:16:19,680 --> 00:16:22,160
this vector and generate this oracle

381
00:16:22,160 --> 00:16:23,519
offline

382
00:16:23,519 --> 00:16:26,480
however the vectors x and y depends on

383
00:16:26,480 --> 00:16:28,720
the random values of and beta

384
00:16:28,720 --> 00:16:31,519
which cannot be predicted in other words

385
00:16:31,519 --> 00:16:33,680
so the verifier can only obtain these

386
00:16:33,680 --> 00:16:36,720
oracles on the fly from the approval

387
00:16:36,720 --> 00:16:38,480
for the proverb to convince the verifier

388
00:16:38,480 --> 00:16:40,240
that these polynomials are correctly

389
00:16:40,240 --> 00:16:41,519
computed

390
00:16:41,519 --> 00:16:44,079
the parties run a circle score called

391
00:16:44,079 --> 00:16:46,079
sparse monomial vector

392
00:16:46,079 --> 00:16:48,399
we omit the details of this suppressor

393
00:16:48,399 --> 00:16:49,759
from the stock

394
00:16:49,759 --> 00:16:51,680
and therefore requested the audience to

395
00:16:51,680 --> 00:16:54,079
the paper

396
00:16:55,759 --> 00:16:58,800
now we summarize the above in the splash

397
00:16:58,800 --> 00:17:01,199
mvp protocol

398
00:17:01,199 --> 00:17:04,160
instead of fbx which contains the entire

399
00:17:04,160 --> 00:17:06,959
matrix the wi-fi now has the oracle of

400
00:17:06,959 --> 00:17:11,280
fv that contains only the zero entries

401
00:17:11,280 --> 00:17:14,799
the degree of fv is much smaller than fb

402
00:17:14,799 --> 00:17:18,319
when the matrix is sparse

403
00:17:18,319 --> 00:17:20,720
the start of the splash mvp protocol is

404
00:17:20,720 --> 00:17:23,280
the same as dense mvp

405
00:17:23,280 --> 00:17:24,880
the difference between the protocols

406
00:17:24,880 --> 00:17:28,000
lies in the validation of rx

407
00:17:28,000 --> 00:17:30,559
in the descent vp protocol the

408
00:17:30,559 --> 00:17:33,440
polynomial for rx is checked by the

409
00:17:33,440 --> 00:17:37,679
simple yet slow mode reduced protocol

410
00:17:37,919 --> 00:17:40,880
in sparse mvp more reduced is replaced

411
00:17:40,880 --> 00:17:43,360
with a more complex procedure but the

412
00:17:43,360 --> 00:17:45,919
running time of the prover is reduced

413
00:17:45,919 --> 00:17:50,000
exploiting the sparsity of the matrix

414
00:17:50,559 --> 00:17:54,160
now all the support goals are ready

415
00:17:54,160 --> 00:17:55,679
the climate protocol is a

416
00:17:55,679 --> 00:17:57,679
straightforward combination of the

417
00:17:57,679 --> 00:17:59,600
matrix vector products and the high

418
00:17:59,600 --> 00:18:02,559
demand protocols

419
00:18:03,120 --> 00:18:05,280
here we only present the dense version

420
00:18:05,280 --> 00:18:07,600
of claymore as the sparse version is

421
00:18:07,600 --> 00:18:09,440
very similar

422
00:18:09,440 --> 00:18:11,200
the approval is trying to convince the

423
00:18:11,200 --> 00:18:14,240
wi-fi its knowledge of three vectors w l

424
00:18:14,240 --> 00:18:17,440
w r and w o that satisfy

425
00:18:17,440 --> 00:18:19,280
the linear relations specified by the

426
00:18:19,280 --> 00:18:22,720
matrix m and public vector x and this w

427
00:18:22,720 --> 00:18:26,720
l times w r is w o

428
00:18:26,960 --> 00:18:29,840
in the protocol we use a small trick

429
00:18:29,840 --> 00:18:31,679
instead of sending three vectors in

430
00:18:31,679 --> 00:18:34,400
three polynomials individually we let

431
00:18:34,400 --> 00:18:37,520
the prover can kitten its wl and wr into

432
00:18:37,520 --> 00:18:39,440
a new vector wi

433
00:18:39,440 --> 00:18:41,600
thus eliminates one online polynomial

434
00:18:41,600 --> 00:18:44,000
oracle

435
00:18:44,080 --> 00:18:46,000
to obtain the headquarter product

436
00:18:46,000 --> 00:18:48,880
between wl and wr the verifier right

437
00:18:48,880 --> 00:18:53,360
shifts wi and multiply with itself

438
00:18:53,360 --> 00:18:55,760
the vector shifts are carried out by

439
00:18:55,760 --> 00:18:58,000
multiplying powers of x to the

440
00:18:58,000 --> 00:19:00,160
polynomials

441
00:19:00,160 --> 00:19:02,960
finally the linear relation is validated

442
00:19:02,960 --> 00:19:06,400
by the mvp protocol

443
00:19:07,679 --> 00:19:09,840
now we have finished the description of

444
00:19:09,840 --> 00:19:11,280
claymore

445
00:19:11,280 --> 00:19:13,679
next i'll briefly discuss how to make it

446
00:19:13,679 --> 00:19:16,080
their knowledge

447
00:19:16,080 --> 00:19:17,919
in the polynomial iop all the

448
00:19:17,919 --> 00:19:20,000
information the verifier receives from

449
00:19:20,000 --> 00:19:22,480
the approver is obtained from querying

450
00:19:22,480 --> 00:19:24,960
the polynomial oracles

451
00:19:24,960 --> 00:19:27,120
in claymore there are only three

452
00:19:27,120 --> 00:19:28,960
polynomials that contain information

453
00:19:28,960 --> 00:19:31,440
that are not already publicly known

454
00:19:31,440 --> 00:19:36,240
namely fwi fwo and h5x

455
00:19:36,240 --> 00:19:38,400
for the first goal to be their knowledge

456
00:19:38,400 --> 00:19:40,480
we want the verifier to be able to

457
00:19:40,480 --> 00:19:42,480
simulate the query replies from these

458
00:19:42,480 --> 00:19:44,880
polynomials without knowledge of their

459
00:19:44,880 --> 00:19:47,280
content

460
00:19:47,679 --> 00:19:50,240
observing the entire protocol we find

461
00:19:50,240 --> 00:19:52,480
that each of these three polynomials is

462
00:19:52,480 --> 00:19:54,320
queried at two different evaluation

463
00:19:54,320 --> 00:19:55,280
points

464
00:19:55,280 --> 00:19:57,600
so if we append two uniformly random

465
00:19:57,600 --> 00:19:59,919
coefficients to each polynomial the

466
00:19:59,919 --> 00:20:02,159
query results would also be uniformly

467
00:20:02,159 --> 00:20:04,559
random

468
00:20:04,720 --> 00:20:07,120
we first insert all zero columns to the

469
00:20:07,120 --> 00:20:09,360
matrix m corresponding to the positions

470
00:20:09,360 --> 00:20:12,320
of the random coefficients

471
00:20:12,320 --> 00:20:14,720
then during the protocol the approval

472
00:20:14,720 --> 00:20:16,720
inserts random elements in the witness

473
00:20:16,720 --> 00:20:18,799
vectors before sending the polynomial

474
00:20:18,799 --> 00:20:21,200
oracles to the very fire

475
00:20:21,200 --> 00:20:23,840
the random elements are sampled in a way

476
00:20:23,840 --> 00:20:28,000
that wl times wr is still w

477
00:20:28,000 --> 00:20:30,240
when we multiply m with the witness

478
00:20:30,240 --> 00:20:32,159
vector the random elements will be

479
00:20:32,159 --> 00:20:34,480
multiplied to the all zero columns so

480
00:20:34,480 --> 00:20:36,400
the randomization does not affect the

481
00:20:36,400 --> 00:20:38,799
satisfaction of hpr

482
00:20:38,799 --> 00:20:41,520
for h by x this polynomial is computed

483
00:20:41,520 --> 00:20:43,919
and randomized by the approval during

484
00:20:43,919 --> 00:20:46,159
the inner product protocol we will not

485
00:20:46,159 --> 00:20:49,840
dive into the details here

486
00:20:50,320 --> 00:20:51,280
finally

487
00:20:51,280 --> 00:20:53,440
we analyze the performance of claymore

488
00:20:53,440 --> 00:20:56,240
compared to the state of the arts

489
00:20:56,240 --> 00:20:58,159
the metrics we consider include the

490
00:20:58,159 --> 00:21:00,240
number of polynomials involved in the

491
00:21:00,240 --> 00:21:01,520
protocol

492
00:21:01,520 --> 00:21:03,520
either since by the proof of online or

493
00:21:03,520 --> 00:21:06,000
pre-processed offline the number of

494
00:21:06,000 --> 00:21:08,559
evaluation queries number of distinct

495
00:21:08,559 --> 00:21:10,240
evaluation points

496
00:21:10,240 --> 00:21:14,080
and the maximal polynomial degree

497
00:21:14,080 --> 00:21:16,640
all these metrics affect the performance

498
00:21:16,640 --> 00:21:20,000
of the compiled stock

499
00:21:20,720 --> 00:21:23,120
here is the result the f here is the

500
00:21:23,120 --> 00:21:26,559
maximal findings of addition gates

501
00:21:26,559 --> 00:21:28,880
typically it could be two or three in

502
00:21:28,880 --> 00:21:31,120
the protocol design we focused on

503
00:21:31,120 --> 00:21:34,000
optimizing the number of polynomials we

504
00:21:34,000 --> 00:21:37,360
have partially succeeded in this respect

505
00:21:37,360 --> 00:21:39,520
this grammar has advantage the number of

506
00:21:39,520 --> 00:21:42,400
polynomials compared to the rest until

507
00:21:42,400 --> 00:21:44,880
the sacrifice of maximal degree

508
00:21:44,880 --> 00:21:47,120
while sparse climate reduces the maximum

509
00:21:47,120 --> 00:21:50,080
degree of disclaimer at the cost of more

510
00:21:50,080 --> 00:21:54,080
polynomials and evaluation queries

511
00:21:54,320 --> 00:21:56,880
in conclusion this work shows the

512
00:21:56,880 --> 00:21:58,720
possibility of constructing polynomial

513
00:21:58,720 --> 00:22:01,440
iops for linear algebra operations in e

514
00:22:01,440 --> 00:22:02,960
monomial bases

515
00:22:02,960 --> 00:22:05,679
including inner products animal products

516
00:22:05,679 --> 00:22:08,159
and matrix vector products

517
00:22:08,159 --> 00:22:10,240
composing them together we guess

518
00:22:10,240 --> 00:22:12,720
claymore a polynomial lp that can be

519
00:22:12,720 --> 00:22:14,880
compiled into snork for verifying

520
00:22:14,880 --> 00:22:16,960
circuits computations

521
00:22:16,960 --> 00:22:19,280
compared to snarks in the resolum code

522
00:22:19,280 --> 00:22:20,240
basis

523
00:22:20,240 --> 00:22:23,039
our snark has competitive efficiency and

524
00:22:23,039 --> 00:22:25,280
no longer requires the finite field to

525
00:22:25,280 --> 00:22:27,760
have a nicely structured subset of

526
00:22:27,760 --> 00:22:30,320
proper size

527
00:22:30,320 --> 00:22:32,400
thank you for watching this talk for

528
00:22:32,400 --> 00:22:34,400
more details please read our paper which

529
00:22:34,400 --> 00:22:38,360
is available on imprints

