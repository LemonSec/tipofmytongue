1
00:00:00,380 --> 00:00:03,540
on post Quantum cryptography

2
00:00:03,540 --> 00:00:05,819
while Varin sets up

3
00:00:05,819 --> 00:00:08,880
talk is on the post Quantum anonymity of

4
00:00:08,880 --> 00:00:11,160
kyber and this is one of the two best

5
00:00:11,160 --> 00:00:14,940
paper Award winners it's by Varun maram

6
00:00:14,940 --> 00:00:18,960
and keita jagawa and Varun will be

7
00:00:18,960 --> 00:00:20,580
giving the talk

8
00:00:20,580 --> 00:00:25,038
so I will let uh Varun have the floor

9
00:00:29,279 --> 00:00:31,380
uh can you hear me

10
00:00:31,380 --> 00:00:33,600
okay

11
00:00:33,600 --> 00:00:36,540
um yeah so uh welcome everyone

12
00:00:36,540 --> 00:00:40,200
um I guess let me just check yeah uh I

13
00:00:40,200 --> 00:00:41,940
guess I have The Misfortune to talk

14
00:00:41,940 --> 00:00:44,399
about uh security proofs at 9am in the

15
00:00:44,399 --> 00:00:46,739
morning so please bear with me

16
00:00:46,739 --> 00:00:47,399
um

17
00:00:47,399 --> 00:00:48,840
so I'll try to keep things at a very

18
00:00:48,840 --> 00:00:50,940
high level so I'll be talking about post

19
00:00:50,940 --> 00:00:53,460
Quantum anonymity of kyber but in

20
00:00:53,460 --> 00:00:55,079
hindsight the title of my talks would

21
00:00:55,079 --> 00:00:56,940
actually have been post Quantum in CCA

22
00:00:56,940 --> 00:00:59,699
security and anonymity of kyber as will

23
00:00:59,699 --> 00:01:01,980
be apparent in my talk so this is Joint

24
00:01:01,980 --> 00:01:04,260
work with Kita kusagawa

25
00:01:04,260 --> 00:01:06,720
so to get some context behind our work

26
00:01:06,720 --> 00:01:09,360
we need to go back in time when the next

27
00:01:09,360 --> 00:01:11,700
pqc standardization process one was in

28
00:01:11,700 --> 00:01:13,920
its third round with

29
00:01:13,920 --> 00:01:16,380
um for a finalists and five alternate

30
00:01:16,380 --> 00:01:17,939
candidates in the publicly encryption

31
00:01:17,939 --> 00:01:20,759
category uh by the way uh spoiler alert

32
00:01:20,759 --> 00:01:22,799
kyber was eventually chosen as a winner

33
00:01:22,799 --> 00:01:24,659
and

34
00:01:24,659 --> 00:01:27,000
um as specified by Nest a main criteria

35
00:01:27,000 --> 00:01:29,280
of evaluation for these schemes was on

36
00:01:29,280 --> 00:01:31,259
how well they achieved so-called NCC

37
00:01:31,259 --> 00:01:32,960
security

38
00:01:32,960 --> 00:01:35,100
however a couple of recent Works

39
00:01:35,100 --> 00:01:37,500
published last year they argued that in

40
00:01:37,500 --> 00:01:39,540
CC security is often not sufficient for

41
00:01:39,540 --> 00:01:41,880
some Modern applications for example

42
00:01:41,880 --> 00:01:43,680
applications such as Anonymous

43
00:01:43,680 --> 00:01:45,900
cryptocurrencies like zcash digital

44
00:01:45,900 --> 00:01:47,759
auctions privacy preserving credential

45
00:01:47,759 --> 00:01:50,520
systems Etc not only require in CC

46
00:01:50,520 --> 00:01:51,960
security of their underlying Primitives

47
00:01:51,960 --> 00:01:53,700
but also required properties such as

48
00:01:53,700 --> 00:01:55,619
anonymity

49
00:01:55,619 --> 00:01:58,920
uh it's also not a coincidence that uh

50
00:01:58,920 --> 00:02:00,540
um keitha and I we were involved in this

51
00:02:00,540 --> 00:02:01,560
works

52
00:02:01,560 --> 00:02:04,200
and just a quick recap so in CC security

53
00:02:04,200 --> 00:02:06,299
roughly speaking guarantees that when

54
00:02:06,299 --> 00:02:08,220
Alice encrypts her message using Bob's

55
00:02:08,220 --> 00:02:10,020
public key then the message does not

56
00:02:10,020 --> 00:02:12,239
reveal anything uh the ciphertext does

57
00:02:12,239 --> 00:02:13,620
not reveal anything about the message to

58
00:02:13,620 --> 00:02:14,760
Eve

59
00:02:14,760 --> 00:02:17,580
on the other hand anonymity or more

60
00:02:17,580 --> 00:02:20,640
formally an orcca security as formalized

61
00:02:20,640 --> 00:02:22,800
with bellary at all uh it guarantees

62
00:02:22,800 --> 00:02:25,020
that the same ciphertext does not leak

63
00:02:25,020 --> 00:02:27,420
the public key used by Alice to encrypt

64
00:02:27,420 --> 00:02:29,640
from message that is the identity of the

65
00:02:29,640 --> 00:02:32,879
receiver is hidden from Eve

66
00:02:32,879 --> 00:02:34,739
so after arguing about the importance of

67
00:02:34,739 --> 00:02:37,140
anonymity so these two Works they set

68
00:02:37,140 --> 00:02:39,420
their sides on the nest pqc third on

69
00:02:39,420 --> 00:02:41,580
candidates to see whether they satisfied

70
00:02:41,580 --> 00:02:45,480
this notion of nocc security as well

71
00:02:45,480 --> 00:02:47,400
so for now we'll be focusing on the four

72
00:02:47,400 --> 00:02:48,540
finalists

73
00:02:48,540 --> 00:02:50,459
and I'll take the syntactically these

74
00:02:50,459 --> 00:02:52,140
four candidates are chems key

75
00:02:52,140 --> 00:02:54,360
encapsulation mechanisms and to

76
00:02:54,360 --> 00:02:55,920
construct their chems they employ a

77
00:02:55,920 --> 00:02:57,660
generic technique known as the fujistak

78
00:02:57,660 --> 00:02:59,459
yokomoto transformation or F4

79
00:02:59,459 --> 00:03:01,260
transformation for short so in such a

80
00:03:01,260 --> 00:03:03,420
transformation they first construct a

81
00:03:03,420 --> 00:03:06,480
weakly secure base PK scheme and then

82
00:03:06,480 --> 00:03:07,920
compose that with a couple of hash

83
00:03:07,920 --> 00:03:10,319
functions to construct the final chem

84
00:03:10,319 --> 00:03:13,379
now here's a concrete example of such a

85
00:03:13,379 --> 00:03:14,940
transformation in the literature so

86
00:03:14,940 --> 00:03:17,280
don't be overhead by the pseudocode so

87
00:03:17,280 --> 00:03:18,840
essentially the way the chem works is

88
00:03:18,840 --> 00:03:21,540
that it encapsulates its keys by first

89
00:03:21,540 --> 00:03:23,280
randomly sampling a message from the

90
00:03:23,280 --> 00:03:25,860
message space of the base pke scheme and

91
00:03:25,860 --> 00:03:27,300
then encrypt the message in a

92
00:03:27,300 --> 00:03:29,340
deterministic fashion where the random

93
00:03:29,340 --> 00:03:32,099
coins are just a hash of the message and

94
00:03:32,099 --> 00:03:33,720
then the finally the message and the

95
00:03:33,720 --> 00:03:36,480
cipher text are hashed to generate the

96
00:03:36,480 --> 00:03:39,060
final encapsulated key and decapsulation

97
00:03:39,060 --> 00:03:40,680
proceeds in a straightforward fashion

98
00:03:40,680 --> 00:03:42,560
but where you do an additional

99
00:03:42,560 --> 00:03:45,239
re-encryption check that is you decrypt

100
00:03:45,239 --> 00:03:46,799
your input ciphertext and then you

101
00:03:46,799 --> 00:03:48,720
re-encrypt in a video Mystic fashion and

102
00:03:48,720 --> 00:03:51,000
check if the ciphertexts match

103
00:03:51,000 --> 00:03:53,640
and one important thing to note here so

104
00:03:53,640 --> 00:03:55,799
this transformation is called fo not bot

105
00:03:55,799 --> 00:03:57,299
so the reason you have the superscript

106
00:03:57,299 --> 00:03:59,720
not what is because let's say the

107
00:03:59,720 --> 00:04:02,340
re-encryption check fails when it fails

108
00:04:02,340 --> 00:04:04,260
so instead of returning an error instead

109
00:04:04,260 --> 00:04:06,239
of outputting a special error symbol you

110
00:04:06,239 --> 00:04:08,340
output a pseudorandom value here which

111
00:04:08,340 --> 00:04:11,099
is a hash of the secret value s that you

112
00:04:11,099 --> 00:04:12,480
sample in the key generation and the

113
00:04:12,480 --> 00:04:15,120
input Cipher text so now this this

114
00:04:15,120 --> 00:04:17,459
aspect of rejecting invalid ciphertext

115
00:04:17,459 --> 00:04:19,500
during decapsulation will play a very

116
00:04:19,500 --> 00:04:22,919
important role in the rest of my talk

117
00:04:22,919 --> 00:04:25,080
okay so now uh coming back to our

118
00:04:25,080 --> 00:04:28,139
transformation so if you use uh this

119
00:04:28,139 --> 00:04:29,820
standard F4 notebook transmission from

120
00:04:29,820 --> 00:04:31,139
the literature to construct your chem

121
00:04:31,139 --> 00:04:33,479
then Jiang Italian they showed that if

122
00:04:33,479 --> 00:04:35,580
your base pke scheme satisfies this weak

123
00:04:35,580 --> 00:04:37,500
motion of one Venus or in CP security

124
00:04:37,500 --> 00:04:39,840
and if your hash functions they behave

125
00:04:39,840 --> 00:04:42,120
as so-called Quantum random oracles so

126
00:04:42,120 --> 00:04:43,620
Quantum random oracles means that you

127
00:04:43,620 --> 00:04:46,199
give the adversity the ability to query

128
00:04:46,199 --> 00:04:48,060
the hash function on a superposition of

129
00:04:48,060 --> 00:04:49,320
inputs

130
00:04:49,320 --> 00:04:52,320
security

131
00:04:53,040 --> 00:04:56,220
and subsequently grips Italian they

132
00:04:56,220 --> 00:04:57,960
showed that if your base PK scheme

133
00:04:57,960 --> 00:04:59,639
satisfies some additional mild

134
00:04:59,639 --> 00:05:01,380
properties related to anonymity so I

135
00:05:01,380 --> 00:05:02,820
won't go into details what this actor

136
00:05:02,820 --> 00:05:05,520
are then your final chem will also

137
00:05:05,520 --> 00:05:07,620
satisfy this notion of nocc security as

138
00:05:07,620 --> 00:05:08,340
well

139
00:05:08,340 --> 00:05:11,639
so just a minor point so recall that in

140
00:05:11,639 --> 00:05:13,380
when I was talking about this Alice and

141
00:05:13,380 --> 00:05:15,060
Bob scenario we were talking strictly

142
00:05:15,060 --> 00:05:17,040
talking about nocc security of a public

143
00:05:17,040 --> 00:05:18,780
key encryption scheme but here we're

144
00:05:18,780 --> 00:05:21,180
talking about nocc security of a chem so

145
00:05:21,180 --> 00:05:22,860
what it means it's not very important

146
00:05:22,860 --> 00:05:25,560
but it was formalized by these works but

147
00:05:25,560 --> 00:05:28,020
what's important is that an anonymous

148
00:05:28,020 --> 00:05:29,699
cam also gives you Anonymous public

149
00:05:29,699 --> 00:05:31,680
encryption scheme when you compose with

150
00:05:31,680 --> 00:05:33,900
an appropriate dim so for now we can

151
00:05:33,900 --> 00:05:36,060
just restrict our attention to anonymous

152
00:05:36,060 --> 00:05:37,139
chems

153
00:05:37,139 --> 00:05:40,259
okay so now uh then this works the first

154
00:05:40,259 --> 00:05:42,960
focused on classic mcalees so classic it

155
00:05:42,960 --> 00:05:46,020
turns out it uses not exactly the fo

156
00:05:46,020 --> 00:05:47,699
notebook transfer from the literature

157
00:05:47,699 --> 00:05:50,520
but a slight variant of it where uh in

158
00:05:50,520 --> 00:05:51,960
your ciphertext you have some additional

159
00:05:51,960 --> 00:05:52,979
hash

160
00:05:52,979 --> 00:05:54,560
but rest assured

161
00:05:54,560 --> 00:05:57,120
was able to extend the anonymity

162
00:05:57,120 --> 00:05:59,340
properties of this effort transform to

163
00:05:59,340 --> 00:06:00,840
the transform used by classic Metals

164
00:06:00,840 --> 00:06:02,280
while accounting for this additional has

165
00:06:02,280 --> 00:06:04,620
to show that yes classic Mercury does

166
00:06:04,620 --> 00:06:07,199
gives you uh anonymity in this post

167
00:06:07,199 --> 00:06:09,900
Quantum setting

168
00:06:09,900 --> 00:06:11,880
are you so again recall that you know

169
00:06:11,880 --> 00:06:14,520
standard Devo hash uh for transform you

170
00:06:14,520 --> 00:06:16,020
hash both the message and the cipher

171
00:06:16,020 --> 00:06:19,199
text however ntru it only hashes the

172
00:06:19,199 --> 00:06:21,419
message it does not has a ciphertext so

173
00:06:21,419 --> 00:06:23,520
this transform used by ntiu is

174
00:06:23,520 --> 00:06:25,800
equivalent to another transform in the

175
00:06:25,800 --> 00:06:27,840
literature which is known as fo not bot

176
00:06:27,840 --> 00:06:29,400
with a subscript m

177
00:06:29,400 --> 00:06:32,220
and kusagawa was able to extend the

178
00:06:32,220 --> 00:06:34,560
anonymity properties of this fo not bot

179
00:06:34,560 --> 00:06:36,840
transform uh and he was able to show

180
00:06:36,840 --> 00:06:38,580
that yes even this transform with the

181
00:06:38,580 --> 00:06:41,460
subscript M gives you anonymity in the

182
00:06:41,460 --> 00:06:43,080
post Quantum setting

183
00:06:43,080 --> 00:06:45,020
and

184
00:06:45,020 --> 00:06:46,800
this is where things get more

185
00:06:46,800 --> 00:06:48,960
interesting so again recall that you

186
00:06:48,960 --> 00:06:51,060
know about transform you hash put the

187
00:06:51,060 --> 00:06:52,319
message and the ciphertext to get your

188
00:06:52,319 --> 00:06:55,259
key but keyboard and cyber uh kyber and

189
00:06:55,259 --> 00:06:57,360
saber they use a different transform

190
00:06:57,360 --> 00:06:59,940
where what you do is you first hash the

191
00:06:59,940 --> 00:07:01,440
message and has the ciphertext

192
00:07:01,440 --> 00:07:03,539
separately and then you hash those

193
00:07:03,539 --> 00:07:05,880
hashes to get your key so then it is a

194
00:07:05,880 --> 00:07:07,560
lot of hashing going on here

195
00:07:07,560 --> 00:07:11,220
and as argued by Greg's Italian they

196
00:07:11,220 --> 00:07:13,319
said that this listed hashing of

197
00:07:13,319 --> 00:07:15,180
ciphertext not only does it create

198
00:07:15,180 --> 00:07:16,680
problems when you want to formally

199
00:07:16,680 --> 00:07:18,539
establish the anonymity of these two

200
00:07:18,539 --> 00:07:21,180
candidates but it also creates problems

201
00:07:21,180 --> 00:07:22,860
when you want to when you also want to

202
00:07:22,860 --> 00:07:24,960
formally prove even in CCA security of

203
00:07:24,960 --> 00:07:26,940
the schemes in this Quantum random

204
00:07:26,940 --> 00:07:29,360
Oracle model

205
00:07:29,819 --> 00:07:32,099
and now fast forward to last year the

206
00:07:32,099 --> 00:07:34,979
nist chose kyber as its sole pqc

207
00:07:34,979 --> 00:07:37,340
standard for public encryption

208
00:07:37,340 --> 00:07:40,380
at the same time the kyber's key uh the

209
00:07:40,380 --> 00:07:42,479
kyber team they did acknowledge that

210
00:07:42,479 --> 00:07:44,639
this thing of hashing the Hashem of the

211
00:07:44,639 --> 00:07:46,500
ciphertext it does complicate any

212
00:07:46,500 --> 00:07:48,360
attempts to prove Security in this Q

213
00:07:48,360 --> 00:07:51,360
room for kyber and hence they proposed

214
00:07:51,360 --> 00:07:53,400
uh the

215
00:07:53,400 --> 00:07:54,599
for the mailing list they started

216
00:07:54,599 --> 00:07:57,180
discussion about uh proposal to revert

217
00:07:57,180 --> 00:07:59,099
to go back to one of the standard effort

218
00:07:59,099 --> 00:08:00,240
transforms for their Kim construction

219
00:08:00,240 --> 00:08:01,979
instead of doing all these weird

220
00:08:01,979 --> 00:08:04,440
internal hashing but of course one

221
00:08:04,440 --> 00:08:07,979
disadvantage of this proposal is that so

222
00:08:07,979 --> 00:08:09,300
just changing your underlying if a

223
00:08:09,300 --> 00:08:10,919
transform is not a trivial change it

224
00:08:10,919 --> 00:08:12,300
again probably would require an extra

225
00:08:12,300 --> 00:08:13,860
round of security evaluations and things

226
00:08:13,860 --> 00:08:15,900
like that so that's why and I'm not even

227
00:08:15,900 --> 00:08:17,639
considering additional patent issues

228
00:08:17,639 --> 00:08:19,139
that might arise if you're changing your

229
00:08:19,139 --> 00:08:20,759
own language for transform so this is

230
00:08:20,759 --> 00:08:22,979
again maybe not too ideal

231
00:08:22,979 --> 00:08:24,539
so this brings us to the contributions

232
00:08:24,539 --> 00:08:27,060
of this work so here we analyzed the

233
00:08:27,060 --> 00:08:28,800
version of kyber as it stands currently

234
00:08:28,800 --> 00:08:30,479
with this additional hashing of

235
00:08:30,479 --> 00:08:32,760
ciphertexts among other things

236
00:08:32,760 --> 00:08:35,219
and then we concretely gave a concrete

237
00:08:35,219 --> 00:08:37,320
and tight proof of NCC security for this

238
00:08:37,320 --> 00:08:39,719
weird version of kyber in this in the

239
00:08:39,719 --> 00:08:42,779
theorem uh informally our security

240
00:08:42,779 --> 00:08:44,640
theorem looks like this so essentially

241
00:08:44,640 --> 00:08:46,440
what this says is that the in CC

242
00:08:46,440 --> 00:08:49,740
security of Khyber is tightly equ uh can

243
00:08:49,740 --> 00:08:51,180
be tightly related to the Intensive

244
00:08:51,180 --> 00:08:52,920
security of the standard fokms in the

245
00:08:52,920 --> 00:08:55,140
literature but we also incur an

246
00:08:55,140 --> 00:08:57,180
additional term in our bonds which has

247
00:08:57,180 --> 00:08:59,220
to do with collisions in this initial

248
00:08:59,220 --> 00:09:00,959
hashing of ciphertext so maybe we'll

249
00:09:00,959 --> 00:09:03,839
talk about this um near the end of my

250
00:09:03,839 --> 00:09:04,980
talk hopefully

251
00:09:04,980 --> 00:09:06,959
and this approach to formally prove in

252
00:09:06,959 --> 00:09:09,120
CC security of Khyber also allowed us to

253
00:09:09,120 --> 00:09:10,980
formally establish uh postpartum

254
00:09:10,980 --> 00:09:13,440
anonymity of kyber as well and the PK

255
00:09:13,440 --> 00:09:15,779
schemes that you can derive from them

256
00:09:15,779 --> 00:09:17,459
and the final thing we're pointing out

257
00:09:17,459 --> 00:09:19,860
is our positive results for kyber do

258
00:09:19,860 --> 00:09:22,680
also extend to saber because of uh the

259
00:09:22,680 --> 00:09:24,660
fact that both schemes essentially use

260
00:09:24,660 --> 00:09:26,580
the same type of transform

261
00:09:26,580 --> 00:09:28,140
so in the rest of my talk I'll try to

262
00:09:28,140 --> 00:09:30,180
give a high level overview of our

263
00:09:30,180 --> 00:09:31,260
approach

264
00:09:31,260 --> 00:09:33,600
so on this left is you have a standard

265
00:09:33,600 --> 00:09:35,820
uh I'll do this by first describing a

266
00:09:35,820 --> 00:09:39,360
simpler and maybe an alternative

267
00:09:39,360 --> 00:09:42,060
approach to prove um

268
00:09:42,060 --> 00:09:45,180
in CC security of kyber and then I will

269
00:09:45,180 --> 00:09:46,920
contact this simple approach with the

270
00:09:46,920 --> 00:09:48,600
approach that we took in our work in the

271
00:09:48,600 --> 00:09:51,120
end so on the left is yet another

272
00:09:51,120 --> 00:09:52,680
standard for transform in the literature

273
00:09:52,680 --> 00:09:55,140
but here you have a substrate board so

274
00:09:55,140 --> 00:09:57,660
here for inval itself a text you do

275
00:09:57,660 --> 00:10:00,180
return an uh a special error symbol

276
00:10:00,180 --> 00:10:01,920
about that's why you have a subscript

277
00:10:01,920 --> 00:10:04,680
here this is in contrast to the F4 not

278
00:10:04,680 --> 00:10:06,060
about M where you written a

279
00:10:06,060 --> 00:10:07,560
pseudo-random value

280
00:10:07,560 --> 00:10:10,200
so now think of this transform as your

281
00:10:10,200 --> 00:10:12,180
favorite piece of chocolate so in this

282
00:10:12,180 --> 00:10:14,399
presentation I chose the lint dark

283
00:10:14,399 --> 00:10:16,440
chocolate now this analogy will be clear

284
00:10:16,440 --> 00:10:17,820
later on

285
00:10:17,820 --> 00:10:20,220
and now on the right you have a

286
00:10:20,220 --> 00:10:21,660
simplified version of the F4 transform

287
00:10:21,660 --> 00:10:23,760
that is used by kyber that is with this

288
00:10:23,760 --> 00:10:25,320
additional hashing of ciphertext that

289
00:10:25,320 --> 00:10:27,720
you do in this encapsulation this is

290
00:10:27,720 --> 00:10:29,220
simplified because I'm not accounting

291
00:10:29,220 --> 00:10:30,540
some additional hashing that is going on

292
00:10:30,540 --> 00:10:31,860
because it's not relevant for this

293
00:10:31,860 --> 00:10:34,019
overview but let's assured our analysis

294
00:10:34,019 --> 00:10:35,279
in the paper disk account for this

295
00:10:35,279 --> 00:10:37,800
additional hashing as well

296
00:10:37,800 --> 00:10:40,860
now think of describer as a fully

297
00:10:40,860 --> 00:10:43,920
wrapped linked chocolate lint because um

298
00:10:43,920 --> 00:10:46,200
I come from Switzerland but the stock is

299
00:10:46,200 --> 00:10:47,579
not sponsored by lent by the way I'm

300
00:10:47,579 --> 00:10:49,260
just putting it out there

301
00:10:49,260 --> 00:10:51,360
now the reason I chose this analogy is

302
00:10:51,360 --> 00:10:54,540
because so kyber can be seen as a scheme

303
00:10:54,540 --> 00:10:57,240
uh which is obtained by starting with a

304
00:10:57,240 --> 00:10:59,279
base cam which is obtained by this F4

305
00:10:59,279 --> 00:11:01,320
transform and then you apply an

306
00:11:01,320 --> 00:11:03,600
appropriate wrapper transformation which

307
00:11:03,600 --> 00:11:06,660
takes this chem to this final product so

308
00:11:06,660 --> 00:11:08,700
the way this uh wrapper transmission

309
00:11:08,700 --> 00:11:10,860
works is as follows so if you start with

310
00:11:10,860 --> 00:11:13,019
key generation then let's say this dark

311
00:11:13,019 --> 00:11:15,120
chocolate out outputs are public and a

312
00:11:15,120 --> 00:11:17,459
secret key then what the record does is

313
00:11:17,459 --> 00:11:20,220
it samples a secret value s which will

314
00:11:20,220 --> 00:11:22,200
be used for implicit rejection and for

315
00:11:22,200 --> 00:11:25,200
rejection of invalid ciphertext and then

316
00:11:25,200 --> 00:11:26,579
you include that in your secret key and

317
00:11:26,579 --> 00:11:27,899
this will be your final secret key of

318
00:11:27,899 --> 00:11:30,120
your fully wrapped chocolate

319
00:11:30,120 --> 00:11:32,640
coming to encapsulation when this

320
00:11:32,640 --> 00:11:34,740
chocolate outputs a ciphertext and this

321
00:11:34,740 --> 00:11:37,320
key K bar so what the rapid is is it

322
00:11:37,320 --> 00:11:39,120
uses two additional independent hash

323
00:11:39,120 --> 00:11:41,459
functions H and H Prime and then it for

324
00:11:41,459 --> 00:11:44,100
this for its final key it hashes the key

325
00:11:44,100 --> 00:11:46,079
K Prime along with a nested hash of the

326
00:11:46,079 --> 00:11:48,120
ciphertext so this is exactly what's

327
00:11:48,120 --> 00:11:50,279
happening in this NCAP procedure in

328
00:11:50,279 --> 00:11:51,540
kyber as well

329
00:11:51,540 --> 00:11:54,540
and again Decap proceeds similarly so

330
00:11:54,540 --> 00:11:56,220
when in the capsization in this

331
00:11:56,220 --> 00:11:58,800
chocolate outputs or a key K Prime which

332
00:11:58,800 --> 00:12:01,680
is not bought then it means that the

333
00:12:01,680 --> 00:12:03,420
decapitation was performed on a valid

334
00:12:03,420 --> 00:12:05,339
ciphertext then the wrapper it just

335
00:12:05,339 --> 00:12:07,079
again does initiate hashing as we have

336
00:12:07,079 --> 00:12:09,480
just seen just before but what what's

337
00:12:09,480 --> 00:12:11,700
important is that if it returns a book

338
00:12:11,700 --> 00:12:13,560
instead that is a decapulation was

339
00:12:13,560 --> 00:12:15,540
performed on an invalid sulfur text then

340
00:12:15,540 --> 00:12:17,640
the vapor recognize is this and then it

341
00:12:17,640 --> 00:12:19,740
does this implicit rejection by using

342
00:12:19,740 --> 00:12:21,540
the secret key as it sampled at the

343
00:12:21,540 --> 00:12:23,160
beginning that's exactly what's being

344
00:12:23,160 --> 00:12:27,000
done in kyber as well so to summarize

345
00:12:27,000 --> 00:12:29,760
since you have kyber to be like a rapid

346
00:12:29,760 --> 00:12:31,380
scheme which wraps around this

347
00:12:31,380 --> 00:12:33,600
underlying F4 notebook transfer for both

348
00:12:33,600 --> 00:12:36,320
transform it's straightforward to

349
00:12:36,320 --> 00:12:39,420
reduce in CC security of kyber to the

350
00:12:39,420 --> 00:12:41,339
NCC security of this explicitly

351
00:12:41,339 --> 00:12:43,380
rejecting F4 bottom transforms in the

352
00:12:43,380 --> 00:12:45,660
Quran so then it appears that the issue

353
00:12:45,660 --> 00:12:47,040
is solved right then why did you go into

354
00:12:47,040 --> 00:12:48,779
trebles about trying to formally prove

355
00:12:48,779 --> 00:12:51,060
into secretive hybrid in the first place

356
00:12:51,060 --> 00:12:53,339
there is an issue and it has to do with

357
00:12:53,339 --> 00:12:55,920
our Reliance on the in CC security of

358
00:12:55,920 --> 00:12:57,660
these chems in the Quran in the first

359
00:12:57,660 --> 00:12:58,800
place

360
00:12:58,800 --> 00:13:02,339
so uh just uh to uh to be more specific

361
00:13:02,339 --> 00:13:04,680
if you compare the NCC security of this

362
00:13:04,680 --> 00:13:07,560
fobot m transforms with that of its

363
00:13:07,560 --> 00:13:09,720
implicitly rejecting fo not bought M

364
00:13:09,720 --> 00:13:11,820
transform here then it turns out that

365
00:13:11,820 --> 00:13:13,440
all the existing security proofs that we

366
00:13:13,440 --> 00:13:14,639
have for this variant of therefore

367
00:13:14,639 --> 00:13:16,980
transform are significantly non-tight

368
00:13:16,980 --> 00:13:18,720
when you compare with the proof that we

369
00:13:18,720 --> 00:13:21,120
have for these fo not bought M

370
00:13:21,120 --> 00:13:22,800
transforms so implicit rejection makes

371
00:13:22,800 --> 00:13:24,300
it easier to obtain type boost of

372
00:13:24,300 --> 00:13:26,880
security so this non-type message would

373
00:13:26,880 --> 00:13:28,980
also extend to kyber as well

374
00:13:28,980 --> 00:13:31,680
not only that but arguably the the

375
00:13:31,680 --> 00:13:33,480
techniques used to prove the theorem

376
00:13:33,480 --> 00:13:35,700
security of this F of bottom chems they

377
00:13:35,700 --> 00:13:37,800
are quite complicated and they do not

378
00:13:37,800 --> 00:13:39,420
yet allowed for formal verification of

379
00:13:39,420 --> 00:13:41,339
the proofs this is again in contrast to

380
00:13:41,339 --> 00:13:43,139
the implicit rejection variant where we

381
00:13:43,139 --> 00:13:45,000
do we do have means to formally verify

382
00:13:45,000 --> 00:13:47,700
the proofs as shown by unru

383
00:13:47,700 --> 00:13:49,860
and finally recall that the title of

384
00:13:49,860 --> 00:13:51,779
this work was post Quantum anonymity of

385
00:13:51,779 --> 00:13:53,339
kyber so we are also interested in

386
00:13:53,339 --> 00:13:55,800
establishing anonymity of fiber but to

387
00:13:55,800 --> 00:13:57,300
the best of our knowledge the post

388
00:13:57,300 --> 00:13:59,100
Quantum anonymity properties of these

389
00:13:59,100 --> 00:14:00,839
explicit rejecting chems were not

390
00:14:00,839 --> 00:14:02,579
explored in the literature this is in

391
00:14:02,579 --> 00:14:03,959
contrast to the implicit rejection for

392
00:14:03,959 --> 00:14:05,459
which you do have positive anonymity

393
00:14:05,459 --> 00:14:07,380
results by these two papers

394
00:14:07,380 --> 00:14:09,420
so since we have all these ideal

395
00:14:09,420 --> 00:14:11,220
properties of our implicit rejection cam

396
00:14:11,220 --> 00:14:13,440
the question we ask in our work is that

397
00:14:13,440 --> 00:14:15,720
can we somehow base the NCC security of

398
00:14:15,720 --> 00:14:17,940
kyber on the NCC security of these

399
00:14:17,940 --> 00:14:19,800
implicit rejection camps instead ensure

400
00:14:19,800 --> 00:14:21,600
of this explicit rejection

401
00:14:21,600 --> 00:14:24,480
so let's do that so let's try to again

402
00:14:24,480 --> 00:14:26,160
use the similar wrapper based approach

403
00:14:26,160 --> 00:14:28,320
that we used so but here instead of

404
00:14:28,320 --> 00:14:30,180
starting with this explicit rejection

405
00:14:30,180 --> 00:14:31,740
chem so instead of starting with the

406
00:14:31,740 --> 00:14:34,380
chocolate let's change the flavor a bit

407
00:14:34,380 --> 00:14:36,300
and let's start with a caramel chocolate

408
00:14:36,300 --> 00:14:38,519
so the caramel chocolate it outputs not

409
00:14:38,519 --> 00:14:39,839
an error symbol but it outputs a

410
00:14:39,839 --> 00:14:41,579
pseudo-random value

411
00:14:41,579 --> 00:14:43,079
now it's not hard to see that we can

412
00:14:43,079 --> 00:14:45,120
come up with a wrapper the same wrapper

413
00:14:45,120 --> 00:14:46,860
as shown before which can translate the

414
00:14:46,860 --> 00:14:49,680
key generation uh as seen before and

415
00:14:49,680 --> 00:14:52,500
even the end cap as as before as well

416
00:14:52,500 --> 00:14:54,720
because when you're changing the effort

417
00:14:54,720 --> 00:14:56,579
transform we are not touching these

418
00:14:56,579 --> 00:14:58,199
algorithms but we are only touching the

419
00:14:58,199 --> 00:15:00,720
Decap the problem arises when you want

420
00:15:00,720 --> 00:15:02,160
to translate the decapsulation procedure

421
00:15:02,160 --> 00:15:05,160
instead because now when the caramel

422
00:15:05,160 --> 00:15:08,100
chocolate it outputs a key bar so note

423
00:15:08,100 --> 00:15:09,720
that it does not output a special error

424
00:15:09,720 --> 00:15:11,940
symbol at all now so the wrapper does

425
00:15:11,940 --> 00:15:14,699
not know what to Output because this key

426
00:15:14,699 --> 00:15:17,100
can either be a result of decapsulating

427
00:15:17,100 --> 00:15:19,079
a valid sulfur text that is it can be a

428
00:15:19,079 --> 00:15:21,660
hash of M prime or it can be the output

429
00:15:21,660 --> 00:15:24,420
of an invalid because we can invalid

430
00:15:24,420 --> 00:15:26,940
ciphertext so the wrapper cannot decide

431
00:15:26,940 --> 00:15:29,459
which which key is what

432
00:15:29,459 --> 00:15:31,139
so this brings us to the approach we

433
00:15:31,139 --> 00:15:34,019
took in our work so what we did was uh

434
00:15:34,019 --> 00:15:36,360
we started with how invalid ciphertexts

435
00:15:36,360 --> 00:15:37,860
are rejected into capsization by these

436
00:15:37,860 --> 00:15:40,199
two schemes and then we tweaked them a

437
00:15:40,199 --> 00:15:41,760
bit so we tweaked we modified the

438
00:15:41,760 --> 00:15:43,980
rejection values as shown here so these

439
00:15:43,980 --> 00:15:45,300
are just some measured Hashem of the

440
00:15:45,300 --> 00:15:48,260
ciphertext so I will talk um I'll

441
00:15:48,260 --> 00:15:50,820
discuss shortly why we chose such weird

442
00:15:50,820 --> 00:15:53,639
expression so don't be scared by this uh

443
00:15:53,639 --> 00:15:55,440
in the process we ended up modifying the

444
00:15:55,440 --> 00:15:57,779
underlying transforms as well so instead

445
00:15:57,779 --> 00:15:59,760
of caramel chocolate now we have a milk

446
00:15:59,760 --> 00:16:02,760
chocolate which projects like this

447
00:16:02,760 --> 00:16:04,740
and now the reason we chose the specific

448
00:16:04,740 --> 00:16:07,500
values is because now it's easy to come

449
00:16:07,500 --> 00:16:09,959
up with a wrapper which translates this

450
00:16:09,959 --> 00:16:12,120
decapsulation procedure to the new Decap

451
00:16:12,120 --> 00:16:14,880
procedure so specifically when this milk

452
00:16:14,880 --> 00:16:17,579
chocolate outputs uh key K Prime what

453
00:16:17,579 --> 00:16:19,680
the wrapper does is it outputs the

454
00:16:19,680 --> 00:16:21,899
simple value a hash of K Prime along

455
00:16:21,899 --> 00:16:23,940
with initial hash of the ciphertext

456
00:16:23,940 --> 00:16:25,740
so the reason this works is because

457
00:16:25,740 --> 00:16:28,800
let's say this K Prime is output of a

458
00:16:28,800 --> 00:16:30,540
valid decapsulation of a valid

459
00:16:30,540 --> 00:16:32,760
ciphertext so that is the key is of the

460
00:16:32,760 --> 00:16:35,220
form a hash of M Prime so if you replace

461
00:16:35,220 --> 00:16:37,560
this K Prime with this hash of M Prime

462
00:16:37,560 --> 00:16:39,660
this is exactly what's being done in the

463
00:16:39,660 --> 00:16:42,420
CD card procedure so that's all right so

464
00:16:42,420 --> 00:16:44,040
the outputs do match

465
00:16:44,040 --> 00:16:46,800
and interestingly so the when you do uh

466
00:16:46,800 --> 00:16:48,360
when you're dealing with an invalid

467
00:16:48,360 --> 00:16:50,100
Cipher text then this K Prime is this

468
00:16:50,100 --> 00:16:52,380
nested hash of the ciphertext so where H

469
00:16:52,380 --> 00:16:56,040
over line is uh is an independent hash

470
00:16:56,040 --> 00:16:57,899
function so if you replace this K Prime

471
00:16:57,899 --> 00:17:00,540
with this weird value this is exactly

472
00:17:00,540 --> 00:17:02,940
what's being happening here as well so

473
00:17:02,940 --> 00:17:04,980
again the values match

474
00:17:04,980 --> 00:17:08,040
and now because of its observation it is

475
00:17:08,040 --> 00:17:10,439
again easy to reduce the increasing

476
00:17:10,439 --> 00:17:12,480
security of this modified kyber on the

477
00:17:12,480 --> 00:17:15,179
NCC security of this modified fo bottom

478
00:17:15,179 --> 00:17:16,199
transform

479
00:17:16,199 --> 00:17:17,939
but again there's a problem because we

480
00:17:17,939 --> 00:17:19,439
are not really interested in in CC

481
00:17:19,439 --> 00:17:21,599
security of some modified fiber right we

482
00:17:21,599 --> 00:17:22,740
want to potential security of the

483
00:17:22,740 --> 00:17:24,959
original kyber and also we are not sure

484
00:17:24,959 --> 00:17:26,880
we do have type booster security for

485
00:17:26,880 --> 00:17:29,700
this F4 bottom transform which we don't

486
00:17:29,700 --> 00:17:31,320
know what this modification will give

487
00:17:31,320 --> 00:17:32,280
you so

488
00:17:32,280 --> 00:17:34,559
fortunately in our work

489
00:17:34,559 --> 00:17:37,080
um which also showed that we also do

490
00:17:37,080 --> 00:17:39,179
these modifications in such a way so

491
00:17:39,179 --> 00:17:41,520
that the NCCA security of this resulting

492
00:17:41,520 --> 00:17:44,100
schemes are tightly related to their NCC

493
00:17:44,100 --> 00:17:46,020
security of their unmodified original

494
00:17:46,020 --> 00:17:47,340
counterparts

495
00:17:47,340 --> 00:17:50,400
and a computational sense so hence all

496
00:17:50,400 --> 00:17:52,620
these observations then give you that

497
00:17:52,620 --> 00:17:54,960
yes you can in fact base NC Security of

498
00:17:54,960 --> 00:17:57,240
kyber on the NCC security of the

499
00:17:57,240 --> 00:17:59,400
unmodified for bottom transforms for

500
00:17:59,400 --> 00:18:01,140
which we do have titles of security in

501
00:18:01,140 --> 00:18:02,580
the literature

502
00:18:02,580 --> 00:18:04,679
so I don't have much time remaining I

503
00:18:04,679 --> 00:18:06,539
guess I'll quickly go over

504
00:18:06,539 --> 00:18:09,240
um how we establish anonymity as well so

505
00:18:09,240 --> 00:18:11,039
with this infancy security result in

506
00:18:11,039 --> 00:18:13,200
hand one might expect that uh we can

507
00:18:13,200 --> 00:18:14,280
also prove anonymity in the

508
00:18:14,280 --> 00:18:15,360
straightforward fashion by using

509
00:18:15,360 --> 00:18:16,980
anonymity of the underlying for bottom

510
00:18:16,980 --> 00:18:20,820
chems but in our approach we took uh an

511
00:18:20,820 --> 00:18:22,740
indirect approach where we in fact

512
00:18:22,740 --> 00:18:24,240
showed that

513
00:18:24,240 --> 00:18:26,700
um hybrid satisfies a strong notion of

514
00:18:26,700 --> 00:18:28,500
security called strong pseudo Randomness

515
00:18:28,500 --> 00:18:31,440
uh essentially what it means is that uh

516
00:18:31,440 --> 00:18:33,480
NCC security recall that the keys

517
00:18:33,480 --> 00:18:35,460
encapsulated uh keys are

518
00:18:35,460 --> 00:18:36,720
indistinguishable from random bit

519
00:18:36,720 --> 00:18:38,520
strings but in strong sort of Randomness

520
00:18:38,520 --> 00:18:40,400
even the ciphertexts are indisting

521
00:18:40,400 --> 00:18:42,059
indistinguishable from random bit

522
00:18:42,059 --> 00:18:44,520
strings so using rubber based approach

523
00:18:44,520 --> 00:18:46,380
we showed strong silver and subscriber

524
00:18:46,380 --> 00:18:48,000
which straightforwardly impresses

525
00:18:48,000 --> 00:18:49,679
anonymity

526
00:18:49,679 --> 00:18:51,539
I will try to conclude my talk by

527
00:18:51,539 --> 00:18:53,460
discussing some open problems and some

528
00:18:53,460 --> 00:18:57,240
approaches so um okay so this basically

529
00:18:57,240 --> 00:18:58,860
says that um

530
00:18:58,860 --> 00:19:00,059
how we end up with a collision

531
00:19:00,059 --> 00:19:03,360
resistance term so uh yeah this this is

532
00:19:03,360 --> 00:19:04,799
the Collision decision Collision

533
00:19:04,799 --> 00:19:06,660
resistance term that we relied on but

534
00:19:06,660 --> 00:19:08,400
then it's not the only approach to in CC

535
00:19:08,400 --> 00:19:10,679
security of caliber we can also use a

536
00:19:10,679 --> 00:19:12,840
recent result of xanry which essentially

537
00:19:12,840 --> 00:19:15,299
shows that this weird key derivation in

538
00:19:15,299 --> 00:19:19,020
kyber is inferentiable from a normal key

539
00:19:19,020 --> 00:19:20,400
derivation that you use in standard for

540
00:19:20,400 --> 00:19:21,539
transforms

541
00:19:21,539 --> 00:19:23,520
so that means that if you try to use

542
00:19:23,520 --> 00:19:25,260
again a similar wrapper based approach

543
00:19:25,260 --> 00:19:27,480
then initial condition resistance you

544
00:19:27,480 --> 00:19:29,580
incur an additive term which has to do

545
00:19:29,580 --> 00:19:30,840
with the skin differentiability loss

546
00:19:30,840 --> 00:19:33,480
when you replace this weird key

547
00:19:33,480 --> 00:19:35,940
Direction with a normal hashing

548
00:19:35,940 --> 00:19:37,980
and just last year there was another

549
00:19:37,980 --> 00:19:39,419
attempt to concretely provincial

550
00:19:39,419 --> 00:19:41,400
security of fiber where on a high level

551
00:19:41,400 --> 00:19:42,960
they work with random permutations

552
00:19:42,960 --> 00:19:45,059
whatever and that's why they incur this

553
00:19:45,059 --> 00:19:47,820
additive term uh if you compare our

554
00:19:47,820 --> 00:19:50,700
theorem with these bounds so we observe

555
00:19:50,700 --> 00:19:52,500
that so here recall that Q is the number

556
00:19:52,500 --> 00:19:54,240
of hash queries that you allow the

557
00:19:54,240 --> 00:19:56,400
adversary to make and it turns out that

558
00:19:56,400 --> 00:19:57,480
if you do some back of the envelope

559
00:19:57,480 --> 00:20:00,240
calculations then our bound strictly

560
00:20:00,240 --> 00:20:01,860
allows for more number of hash queries

561
00:20:01,860 --> 00:20:03,419
for which the bounds do remain

562
00:20:03,419 --> 00:20:05,160
meaningful

563
00:20:05,160 --> 00:20:07,440
and another nice thing is that so these

564
00:20:07,440 --> 00:20:09,720
two techniques they on a very high level

565
00:20:09,720 --> 00:20:12,600
they rely on some uh on a very powerful

566
00:20:12,600 --> 00:20:14,100
technique was Andre known as a

567
00:20:14,100 --> 00:20:15,960
compressed Oracle technique in the Quran

568
00:20:15,960 --> 00:20:18,900
setting in contrast to their technique

569
00:20:18,900 --> 00:20:21,240
so we rely on arguably simple proof

570
00:20:21,240 --> 00:20:23,460
techniques uh to be specifically

571
00:20:23,460 --> 00:20:25,080
recalled on something known as a one-way

572
00:20:25,080 --> 00:20:27,120
to hydroglammar by a minus at all so

573
00:20:27,120 --> 00:20:29,520
it's not very important but what's nice

574
00:20:29,520 --> 00:20:31,980
about this is that this simple Lemma it

575
00:20:31,980 --> 00:20:33,539
does allow for formal verification of

576
00:20:33,539 --> 00:20:35,700
proofs assured by unrul

577
00:20:35,700 --> 00:20:37,260
so this brings us to my first open

578
00:20:37,260 --> 00:20:39,660
problem namely firmware verification

579
00:20:39,660 --> 00:20:41,880
because just saying that there exists a

580
00:20:41,880 --> 00:20:43,080
framework in the literature which can

581
00:20:43,080 --> 00:20:44,820
formally verify boost for you is not

582
00:20:44,820 --> 00:20:46,620
enough someone needs to actually sit

583
00:20:46,620 --> 00:20:48,900
down and tailored the framework to suit

584
00:20:48,900 --> 00:20:50,940
our concrete proof of security in order

585
00:20:50,940 --> 00:20:53,039
to formally verify it thereby providing

586
00:20:53,039 --> 00:20:55,320
more confidence in the niche standard

587
00:20:55,320 --> 00:20:57,240
and another important open question is

588
00:20:57,240 --> 00:21:00,900
that are our bonds optimal because uh so

589
00:21:00,900 --> 00:21:03,059
one might try to come up with a title

590
00:21:03,059 --> 00:21:05,220
for instance security which does not

591
00:21:05,220 --> 00:21:06,299
have to go through this root of

592
00:21:06,299 --> 00:21:08,880
collision resistance thereby awarding

593
00:21:08,880 --> 00:21:10,559
this term and strictly allowing for more

594
00:21:10,559 --> 00:21:11,760
number of hash queries from the

595
00:21:11,760 --> 00:21:12,780
adversary

596
00:21:12,780 --> 00:21:14,520
on the flip side of coin can someone

597
00:21:14,520 --> 00:21:17,400
show that in the uh this Reliance

598
00:21:17,400 --> 00:21:19,080
operation resistance is indeed necessary

599
00:21:19,080 --> 00:21:21,419
by coming up with a matching attack

600
00:21:21,419 --> 00:21:23,520
where you can attack in security by

601
00:21:23,520 --> 00:21:25,559
exporting collisions in your initial

602
00:21:25,559 --> 00:21:27,419
hashing of ciphertext

603
00:21:27,419 --> 00:21:30,360
uh with this I conclude my talk and um

604
00:21:30,360 --> 00:21:31,860
thanks for your attention and and I'm

605
00:21:31,860 --> 00:21:34,639
happy to take any questions

606
00:21:38,640 --> 00:21:40,740
thank you very much uh there's time for

607
00:21:40,740 --> 00:21:43,460
maybe one question

608
00:21:43,740 --> 00:21:46,140
maybe the next speaker can come set up

609
00:21:46,140 --> 00:21:48,500
otherwise

610
00:21:51,960 --> 00:21:53,360
foreign

611
00:21:53,360 --> 00:21:56,159
okay great all right uh let's thank uh

612
00:21:56,159 --> 00:21:59,419
Varun again great job

613
00:22:02,100 --> 00:22:06,000
okay so our next speaker is online

614
00:22:06,000 --> 00:22:09,539
uh and the next talk is Q CCA secure

615
00:22:09,539 --> 00:22:11,340
generic transformations in the quantum

616
00:22:11,340 --> 00:22:14,159
random Oracle model uh the papers by

617
00:22:14,159 --> 00:22:16,940
Tien shushan uh

618
00:22:16,940 --> 00:22:19,220
and rui

619
00:22:19,220 --> 00:22:23,880
if I pronounced that correctly uh and uh

620
00:22:23,880 --> 00:22:26,520
tenshu will be giving the talk and I

621
00:22:26,520 --> 00:22:28,919
will give the floor over

622
00:22:28,919 --> 00:22:31,620
then can you hear me yes we hear you

623
00:22:31,620 --> 00:22:36,139
fine thank you uh and uh

624
00:22:37,799 --> 00:22:39,470
okay

625
00:22:39,470 --> 00:22:42,680
[Music]

626
00:22:44,039 --> 00:22:47,059
just for a second

627
00:22:50,059 --> 00:22:55,500
from uh CES and today I would like to

628
00:22:55,500 --> 00:22:59,460
introduce the paper entitled ways qcc's

629
00:22:59,460 --> 00:23:02,159
cure generic transformations in the

630
00:23:02,159 --> 00:23:04,919
quantum random Oracle model and this is

631
00:23:04,919 --> 00:23:08,700
a joint work with John Jacob and Russia

632
00:23:08,700 --> 00:23:11,820
and this presentation consists of four

633
00:23:11,820 --> 00:23:12,659
parts

634
00:23:12,659 --> 00:23:16,760
and first of all

635
00:23:16,820 --> 00:23:20,880
I will go over the definition of and the

636
00:23:20,880 --> 00:23:24,419
qcc security and compress the Standard

637
00:23:24,419 --> 00:23:25,740
Oil

638
00:23:25,740 --> 00:23:30,000
so here are we abbreviate public key

639
00:23:30,000 --> 00:23:34,700
encryption scheme cke and

640
00:23:38,760 --> 00:23:41,760
here

641
00:23:44,460 --> 00:23:46,620
or give an application here for an

642
00:23:46,620 --> 00:23:50,640
anniversary in an anti-qcc security game

643
00:23:50,640 --> 00:23:53,880
in the Q room so the other three can

644
00:23:53,880 --> 00:23:56,039
make random local queries and the

645
00:23:56,039 --> 00:23:58,860
decryption queries into proposition

646
00:23:58,860 --> 00:24:02,780
in and it also make one challenge query

647
00:24:02,780 --> 00:24:07,440
and there and one who and one of the

648
00:24:07,440 --> 00:24:10,559
messages and B is encrypted to be the

649
00:24:10,559 --> 00:24:13,020
challenge server text and the other

650
00:24:13,020 --> 00:24:16,380
three when they output a bit a big b

651
00:24:16,380 --> 00:24:20,700
Prime is for any efficient Quantum

652
00:24:20,700 --> 00:24:22,320
matter was three

653
00:24:22,320 --> 00:24:26,159
its output B Prime is B with probability

654
00:24:26,159 --> 00:24:29,159
at most one-half plus a negligible

655
00:24:29,159 --> 00:24:30,299
quantity

656
00:24:30,299 --> 00:24:32,900
then the degree is

657
00:24:32,900 --> 00:24:36,799
ndqcc in the Q row

658
00:24:36,799 --> 00:24:41,000
and the compressed standard Oracle and

659
00:24:41,000 --> 00:24:45,000
csto for sure supplied to simulate

660
00:24:45,000 --> 00:24:48,120
Quantum random model for perfectly

661
00:24:48,120 --> 00:24:52,380
it records run multiple praise into in

662
00:24:52,380 --> 00:24:56,460
the database State and this shows how

663
00:24:56,460 --> 00:25:00,240
the steel operates

664
00:25:00,720 --> 00:25:03,780
after reviewing the definition of then

665
00:25:03,780 --> 00:25:08,580
the qcc security and csto let's look at

666
00:25:08,580 --> 00:25:11,280
the result of this paper and the result

667
00:25:11,280 --> 00:25:15,500
is summarized as three points firstly

668
00:25:15,500 --> 00:25:20,280
from the result scheme of apple and

669
00:25:20,280 --> 00:25:22,380
direct transformation

670
00:25:22,380 --> 00:25:26,039
the common feature of these two skins is

671
00:25:26,039 --> 00:25:29,400
that the description process contains

672
00:25:29,400 --> 00:25:33,120
the re-encryption process as highlighted

673
00:25:33,120 --> 00:25:36,840
in red font and this property is

674
00:25:36,840 --> 00:25:40,080
captured and this type of skins is

675
00:25:40,080 --> 00:25:42,539
formalized as Oracle mask to the skin

676
00:25:42,539 --> 00:25:45,419
and once in Photoshop

677
00:25:45,419 --> 00:25:50,580
next for on schemes in their qcc proof

678
00:25:50,580 --> 00:25:52,200
in the Quran

679
00:25:52,200 --> 00:25:55,080
an upper bound of the error caused by

680
00:25:55,080 --> 00:25:58,520
the simulation of the decryption Oracle

681
00:25:58,520 --> 00:26:03,360
is also given under specifically as

682
00:26:03,360 --> 00:26:06,179
shown in the area circled by the Dutch

683
00:26:06,179 --> 00:26:10,320
line of the quantum random Oracle is

684
00:26:10,320 --> 00:26:14,159
simulated by csto and the random model

685
00:26:14,159 --> 00:26:16,500
queries are recorded in the database

686
00:26:16,500 --> 00:26:18,740
state

687
00:26:20,480 --> 00:26:23,580
the only change is the description

688
00:26:23,580 --> 00:26:27,240
Oracle is simulated by searching in the

689
00:26:27,240 --> 00:26:30,240
database State and an upper bound of

690
00:26:30,240 --> 00:26:33,960
these two games is given under four

691
00:26:33,960 --> 00:26:38,820
examples in the qcc proof of Apple is

692
00:26:38,820 --> 00:26:42,600
underlined key is gamma spread and the

693
00:26:42,600 --> 00:26:46,740
probability difference of this two games

694
00:26:46,740 --> 00:26:50,880
is upper bounded by 5 over the square

695
00:26:50,880 --> 00:26:53,400
root of 2 to the gamma

696
00:26:53,400 --> 00:26:57,320
as the last point they related

697
00:26:57,320 --> 00:27:02,120
the qcc proof of Apple by gender and

698
00:27:02,120 --> 00:27:05,940
provide qcc proofs of transformation

699
00:27:05,940 --> 00:27:09,779
Apple react and the T sub Sage with

700
00:27:09,779 --> 00:27:11,940
concrete Security box

701
00:27:11,940 --> 00:27:16,020
and the table in the bottom map or lists

702
00:27:16,020 --> 00:27:18,900
on the security Assumption of the

703
00:27:18,900 --> 00:27:22,440
underlying pke the security of the cheat

704
00:27:22,440 --> 00:27:25,260
ones as well as additional requirements

705
00:27:25,260 --> 00:27:27,539
for those three Transformations

706
00:27:27,539 --> 00:27:30,539
respective

707
00:27:30,539 --> 00:27:34,100
and after the introduction of the result

708
00:27:34,100 --> 00:27:37,140
let's turn of attention back to the

709
00:27:37,140 --> 00:27:40,260
motivation of this of this work

710
00:27:40,260 --> 00:27:44,100
to begin with we review the classical

711
00:27:44,100 --> 00:27:47,580
security of apple and it combines the

712
00:27:47,580 --> 00:27:50,600
one with pure pke and one times pure

713
00:27:50,600 --> 00:27:54,080
symmetricity encryption scheme into our

714
00:27:54,080 --> 00:27:58,760
ndssa secure application in the room and

715
00:27:58,760 --> 00:28:01,740
this proof is accomplished with four

716
00:28:01,740 --> 00:28:06,659
gains as presented in the bottom of them

717
00:28:06,659 --> 00:28:08,600
on the other hand

718
00:28:08,600 --> 00:28:12,360
as for the research on the post Quantum

719
00:28:12,360 --> 00:28:15,120
security of Apple

720
00:28:15,120 --> 00:28:15,900
um

721
00:28:15,900 --> 00:28:18,900
otherwise rays are capable of computing

722
00:28:18,900 --> 00:28:22,679
and it is reasonable to assume that they

723
00:28:22,679 --> 00:28:25,080
can clearly run Oracle since the

724
00:28:25,080 --> 00:28:28,500
population and furthermore in some cases

725
00:28:28,500 --> 00:28:31,340
it could be possible for them

726
00:28:31,340 --> 00:28:35,400
to to create decryption Oracle into

727
00:28:35,400 --> 00:28:38,400
propagation and through those

728
00:28:38,400 --> 00:28:41,820
considerations or to questions are

729
00:28:41,820 --> 00:28:45,360
proposed as shown in the orange area

730
00:28:45,360 --> 00:28:49,459
and specifically

731
00:28:49,580 --> 00:28:54,480
can apple transform a one-way secure pke

732
00:28:54,480 --> 00:28:59,960
in one ndcca or even qccs

733
00:28:59,960 --> 00:29:02,400
in the Quran

734
00:29:02,400 --> 00:29:06,960
and to answer yes to those through

735
00:29:06,960 --> 00:29:09,559
questions

736
00:29:12,059 --> 00:29:17,100
and it is nature to try to lift the room

737
00:29:17,100 --> 00:29:20,000
proof into the quantum setting

738
00:29:20,000 --> 00:29:23,460
nevertheless in the early stage people

739
00:29:23,460 --> 00:29:26,460
didn't know how to simulate Quantum run

740
00:29:26,460 --> 00:29:29,100
or Quantum random molecule on the Fly

741
00:29:29,100 --> 00:29:32,220
oh and this prevents the Challenger in

742
00:29:32,220 --> 00:29:36,539
the security games from recording

743
00:29:36,539 --> 00:29:39,659
AdWords race random or random or Google

744
00:29:39,659 --> 00:29:43,200
clear race and makes it hard to simulate

745
00:29:43,200 --> 00:29:45,419
the description Oracle without secret

746
00:29:45,419 --> 00:29:46,940
keys

747
00:29:46,940 --> 00:29:51,539
and as shown in the bottom of one

748
00:29:51,539 --> 00:29:54,840
solution to this problem is that apple

749
00:29:54,840 --> 00:30:00,000
is modified by adding a hash value H1 of

750
00:30:00,000 --> 00:30:04,200
Delta uses several tabs and it was

751
00:30:04,200 --> 00:30:08,940
proved that the modified Apple transform

752
00:30:08,940 --> 00:30:13,919
a one-way skill or an anti-cp secure pke

753
00:30:13,919 --> 00:30:19,679
into one and this is qrp in the key role

754
00:30:19,679 --> 00:30:21,600
and after that

755
00:30:21,600 --> 00:30:24,360
the compressed Oracle technique provided

756
00:30:24,360 --> 00:30:27,000
the way to simulate Quantum random

757
00:30:27,000 --> 00:30:29,899
multiple on the Fly

758
00:30:33,380 --> 00:30:36,360
can be recorded in database State

759
00:30:36,360 --> 00:30:39,059
without address detecting

760
00:30:39,059 --> 00:30:41,820
and

761
00:30:41,820 --> 00:30:43,799
um and the Challenger can perform

762
00:30:43,799 --> 00:30:48,419
measurements to a database state to get

763
00:30:48,419 --> 00:30:50,899
some information on other series queries

764
00:30:50,899 --> 00:30:55,260
and this enables to simulate decryption

765
00:30:55,260 --> 00:30:58,320
Oracle eventful concentrate rates

766
00:30:58,320 --> 00:31:01,100
and uh

767
00:31:01,100 --> 00:31:05,000
and it was also proved that

768
00:31:05,000 --> 00:31:08,880
the unmodified rifle transform a

769
00:31:08,880 --> 00:31:12,840
one-ways pure PPE into one and these two

770
00:31:12,840 --> 00:31:16,799
this is pure pke in the Quran

771
00:31:16,799 --> 00:31:20,100
or however in that proof

772
00:31:20,100 --> 00:31:25,919
14 certified to change the simulation of

773
00:31:25,919 --> 00:31:27,360
description

774
00:31:27,360 --> 00:31:30,840
and then during game G5 the secret key

775
00:31:30,840 --> 00:31:32,880
is not needed

776
00:31:32,880 --> 00:31:37,100
so but in contrast

777
00:31:37,100 --> 00:31:41,220
in the room proof that changes more

778
00:31:41,220 --> 00:31:44,279
straightforward and we're wondering if

779
00:31:44,279 --> 00:31:47,159
children proof can be as simple as your

780
00:31:47,159 --> 00:31:49,700
own proof

781
00:31:50,039 --> 00:31:52,279
oh that is to say

782
00:31:52,279 --> 00:31:55,919
can we change the uh

783
00:31:55,919 --> 00:31:58,740
change the way to simulate decryption

784
00:31:58,740 --> 00:32:02,039
article in one step and provide an upper

785
00:32:02,039 --> 00:32:05,279
Bound for this change

786
00:32:05,279 --> 00:32:10,159
and in the last part

787
00:32:10,380 --> 00:32:12,600
to

788
00:32:12,600 --> 00:32:16,320
focus on the details in the proofs of

789
00:32:16,320 --> 00:32:19,679
transformations in this paper and since

790
00:32:19,679 --> 00:32:23,640
their proofs are outlined similarly here

791
00:32:23,640 --> 00:32:27,480
we take Apple for instance and analyze

792
00:32:27,480 --> 00:32:31,580
two points in its proof

793
00:32:31,740 --> 00:32:35,279
the first one is the simulation of

794
00:32:35,279 --> 00:32:38,760
decryption article in the qcc approval

795
00:32:38,760 --> 00:32:43,200
weapon or random Oracle H is simulated

796
00:32:43,200 --> 00:32:46,520
with sto and

797
00:32:46,520 --> 00:32:51,539
random local queries to age are recorded

798
00:32:51,539 --> 00:32:54,140
in the database state

799
00:32:54,140 --> 00:32:58,919
in King G2 or the decryption Oracle is

800
00:32:58,919 --> 00:33:02,640
simulated by just by searching the

801
00:33:02,640 --> 00:33:06,559
database State just follow the way of

802
00:33:06,559 --> 00:33:10,740
simulating description Oracle or in the

803
00:33:10,740 --> 00:33:12,299
romper

804
00:33:12,299 --> 00:33:15,600
uh note that the resulting scheme of

805
00:33:15,600 --> 00:33:19,559
Apple is on skin and with the result of

806
00:33:19,559 --> 00:33:20,640
this paper

807
00:33:20,640 --> 00:33:23,820
by the wealth spreadness of the

808
00:33:23,820 --> 00:33:26,940
underlying pke implies

809
00:33:26,940 --> 00:33:29,059
um implicit

810
00:33:29,059 --> 00:33:34,158
the king G1 and G2

811
00:33:36,260 --> 00:33:39,299
indistinguishable or other series

812
00:33:39,299 --> 00:33:43,019
and the second point is the simulation

813
00:33:43,019 --> 00:33:46,980
of challenging server tax system

814
00:33:46,980 --> 00:33:51,120
and in game G3 so when generating system

815
00:33:51,120 --> 00:33:54,320
this store he star and R star

816
00:33:54,320 --> 00:33:57,899
uniformly chosen to replace G of Delta

817
00:33:57,899 --> 00:34:01,140
star and age of data store D star

818
00:34:01,140 --> 00:34:05,640
and the anniversary wouldn't find this

819
00:34:05,640 --> 00:34:09,239
change if G of Delta store and H of

820
00:34:09,239 --> 00:34:12,480
Delta star D star are uniformly random

821
00:34:12,480 --> 00:34:14,960
in its sphere

822
00:34:14,960 --> 00:34:18,839
and to achieve this goal uh binary

823
00:34:18,839 --> 00:34:22,560
measurement is performed on random or

824
00:34:22,560 --> 00:34:25,918
cochure race to test whether Fury state

825
00:34:25,918 --> 00:34:29,460
contains Delta store or not

826
00:34:29,460 --> 00:34:31,940
but that's not enough

827
00:34:31,940 --> 00:34:33,560
because

828
00:34:33,560 --> 00:34:38,099
uh the decryption process or G2 which is

829
00:34:38,099 --> 00:34:42,179
which is denoted as U sub x t would

830
00:34:42,179 --> 00:34:45,480
disturbs the simulation of age of data

831
00:34:45,480 --> 00:34:47,040
star distal

832
00:34:47,040 --> 00:34:50,460
and here we explain this scene with an

833
00:34:50,460 --> 00:34:54,899
example and as shown in the left yellow

834
00:34:54,899 --> 00:34:57,319
area

835
00:34:57,920 --> 00:35:03,060
in G2 firstly to make the challenge

836
00:35:03,060 --> 00:35:05,540
query and then

837
00:35:05,540 --> 00:35:10,380
queries run multiple into computation

838
00:35:10,380 --> 00:35:13,920
and for any pure state or decryption

839
00:35:13,920 --> 00:35:18,780
query that see isn't sister and DC star

840
00:35:18,780 --> 00:35:22,740
and Delta store can be encrypted to see

841
00:35:22,740 --> 00:35:28,079
U sub XD or the entangle this query

842
00:35:28,079 --> 00:35:31,440
state with the database State on Delta

843
00:35:31,440 --> 00:35:35,180
star distal and this entanglement would

844
00:35:35,180 --> 00:35:38,339
disturb the simulation of H of Delta

845
00:35:38,339 --> 00:35:39,960
star distal

846
00:35:39,960 --> 00:35:42,240
and

847
00:35:42,240 --> 00:35:45,000
to handle this situation

848
00:35:45,000 --> 00:35:50,160
we before Kim G3 we add new game G to a

849
00:35:50,160 --> 00:35:53,640
and in this game the simulation of

850
00:35:53,640 --> 00:35:56,400
description Oracle is changed again

851
00:35:56,400 --> 00:36:00,660
and the encryption process of game G2

852
00:36:00,660 --> 00:36:05,940
and g2a I think are identical and two or

853
00:36:05,940 --> 00:36:09,540
six star assist or this door is defined

854
00:36:09,540 --> 00:36:13,440
after that we're in game g2a for any

855
00:36:13,440 --> 00:36:18,440
decision uh the decryption query state

856
00:36:18,440 --> 00:36:22,440
unitary standard decompressions of Delta

857
00:36:22,440 --> 00:36:24,540
star D star it's performed on the

858
00:36:24,540 --> 00:36:25,920
database state

859
00:36:25,920 --> 00:36:30,240
then use up XT and finally the first

860
00:36:30,240 --> 00:36:33,000
step Again by this change

861
00:36:33,000 --> 00:36:36,480
the simulation of age of data star T

862
00:36:36,480 --> 00:36:39,900
star wouldn't be disturbed by the

863
00:36:39,900 --> 00:36:41,610
decryption per cell

864
00:36:41,610 --> 00:36:44,689
[Music]

865
00:36:48,440 --> 00:36:53,220
G2 are indistinguishable for adversaries

866
00:36:53,220 --> 00:36:56,660
and here's the reason

867
00:36:57,119 --> 00:36:57,720
um

868
00:36:57,720 --> 00:37:01,140
unit very standard compressions of Delta

869
00:37:01,140 --> 00:37:04,380
star destroy almost commutes with use of

870
00:37:04,380 --> 00:37:06,540
XD and

871
00:37:06,540 --> 00:37:10,260
it is indistinguishable to swap the

872
00:37:10,260 --> 00:37:14,160
second step with the last step uh

873
00:37:14,160 --> 00:37:15,960
then

874
00:37:15,960 --> 00:37:19,079
since standard decompression is an

875
00:37:19,079 --> 00:37:23,040
evolution so there's two unitaries are

876
00:37:23,040 --> 00:37:28,560
deleted and the resulting unitary is the

877
00:37:28,560 --> 00:37:33,359
decryption process of being G2 and in

878
00:37:33,359 --> 00:37:34,700
summary

879
00:37:34,700 --> 00:37:39,200
in this paper Oracle mask the skin is

880
00:37:39,200 --> 00:37:42,800
defined to capture the ray encryption

881
00:37:42,800 --> 00:37:45,500
property of

882
00:37:45,500 --> 00:37:48,119
PPE and

883
00:37:48,119 --> 00:37:52,700
for apple and direct who's

884
00:37:52,700 --> 00:37:56,880
resulting skin is oil and skin so we

885
00:37:56,880 --> 00:37:58,640
provide

886
00:37:58,640 --> 00:38:02,099
qcc proofs for them with concrete

887
00:38:02,099 --> 00:38:07,020
security bonds and that's all and thank

888
00:38:07,020 --> 00:38:11,000
you thank you for your attention

889
00:38:17,520 --> 00:38:21,380
we have a couple minutes for questions

890
00:38:27,540 --> 00:38:30,119
uh I have one question can you hear me

891
00:38:30,119 --> 00:38:32,160
uh yeah yeah

892
00:38:32,160 --> 00:38:36,000
the qcca security balance how do they

893
00:38:36,000 --> 00:38:40,140
compare to the CCA and the Q ROM uh

894
00:38:40,140 --> 00:38:42,180
security bounds are they looser do they

895
00:38:42,180 --> 00:38:46,020
do they match how do they uh compare

896
00:38:46,020 --> 00:38:48,000
oh well

897
00:38:48,000 --> 00:38:50,460
um that's that uh let's turn back into

898
00:38:50,460 --> 00:38:55,200
the definition of qcc security

899
00:38:55,200 --> 00:38:59,359
so we can see that the decryption Oracle

900
00:38:59,359 --> 00:39:01,220
is

901
00:39:01,220 --> 00:39:03,619
permitted the

902
00:39:03,619 --> 00:39:07,339
superposition query and

903
00:39:07,339 --> 00:39:12,000
any so any attack in

904
00:39:12,000 --> 00:39:17,460
uh that breaks the anti-cc security to

905
00:39:17,460 --> 00:39:18,960
the

906
00:39:18,960 --> 00:39:20,820
or the implies

907
00:39:20,820 --> 00:39:22,220
[Music]

908
00:39:22,220 --> 00:39:27,359
would implies uh attacks that breaks and

909
00:39:27,359 --> 00:39:30,599
the qcc security

910
00:39:30,599 --> 00:39:33,079
um so

911
00:39:33,320 --> 00:39:37,800
in another world we can see that before

912
00:39:37,800 --> 00:39:43,980
pke is and the qsys is secure then this

913
00:39:43,980 --> 00:39:48,740
PPE is antithesis girl

914
00:39:52,740 --> 00:39:55,200
okay all right uh is there another

915
00:39:55,200 --> 00:39:57,500
question

916
00:39:57,740 --> 00:40:01,980
all right uh let's thank tianshu again

917
00:40:01,980 --> 00:40:04,400
okay

918
00:40:09,800 --> 00:40:12,900
great all right uh we're a little ahead

919
00:40:12,900 --> 00:40:15,599
of schedule which is good uh so our next

920
00:40:15,599 --> 00:40:19,440
uh talk is on a thorough treatment of

921
00:40:19,440 --> 00:40:21,920
Highly efficient and true instantiations

922
00:40:21,920 --> 00:40:25,680
uh the work is by Julian Duman Catherine

923
00:40:25,680 --> 00:40:29,339
hovelman's Ikea Kilts Vadim labashevski

924
00:40:29,339 --> 00:40:32,760
Gregor Seiler and Dominique unru and

925
00:40:32,760 --> 00:40:36,260
Julian will be giving the talk

926
00:40:37,099 --> 00:40:40,140
I think

927
00:40:40,140 --> 00:40:42,680
foreign

928
00:41:25,920 --> 00:41:29,760
it should be paper number 98.

929
00:41:29,760 --> 00:41:34,440
thank you thank you okay sure

930
00:41:36,440 --> 00:41:41,180
okay thank you okay uh

931
00:41:58,680 --> 00:42:00,480
can you hear me

932
00:42:00,480 --> 00:42:02,160
yeah

933
00:42:02,160 --> 00:42:04,680
yes we're all good in Zoom

934
00:42:04,680 --> 00:42:09,240
perfect uh then uh hi uh everyone my

935
00:42:09,240 --> 00:42:11,880
name is Julian I'm a PhD student at

936
00:42:11,880 --> 00:42:14,579
Royal University bochum and today I'm

937
00:42:14,579 --> 00:42:16,320
going to present you our work on a

938
00:42:16,320 --> 00:42:17,700
thorough treatment of high deficient

939
00:42:17,700 --> 00:42:19,380
entry instantiations

940
00:42:19,380 --> 00:42:21,180
this is Joint work with Catherine

941
00:42:21,180 --> 00:42:23,640
hoverman IKEA kids Vladimir bashewski

942
00:42:23,640 --> 00:42:25,099
kriegos Island

943
00:42:25,099 --> 00:42:28,339
Dominican wolf

944
00:42:28,500 --> 00:42:30,260
so

945
00:42:30,260 --> 00:42:33,500
presentation mode

946
00:42:36,180 --> 00:42:39,319
sorry a quick

947
00:42:45,060 --> 00:42:47,599
okay

948
00:42:47,660 --> 00:42:49,680
sorry for that

949
00:42:49,680 --> 00:42:51,839
okay so uh

950
00:42:51,839 --> 00:42:54,359
so let's quickly review a intro

951
00:42:54,359 --> 00:42:56,720
so entry was the really first practical

952
00:42:56,720 --> 00:42:58,980
Quantum secure ladder space encryption

953
00:42:58,980 --> 00:43:00,180
scheme

954
00:43:00,180 --> 00:43:02,280
and the natural we work over ring a

955
00:43:02,280 --> 00:43:04,460
polynomial ring

956
00:43:04,460 --> 00:43:07,380
with public keys of the form G divided

957
00:43:07,380 --> 00:43:09,359
by F where G and F have small

958
00:43:09,359 --> 00:43:12,359
coefficients and the ciphertaxes of the

959
00:43:12,359 --> 00:43:16,500
form of a ring element are Randomness

960
00:43:16,500 --> 00:43:18,359
multiplied by the public key and then

961
00:43:18,359 --> 00:43:20,520
the message added

962
00:43:20,520 --> 00:43:22,740
and we have an error distribution

963
00:43:22,740 --> 00:43:25,079
here called ETA

964
00:43:25,079 --> 00:43:27,900
and so uh Andrew is one way under the

965
00:43:27,900 --> 00:43:30,900
ring lwe and entry assumption

966
00:43:30,900 --> 00:43:32,819
and where roughly the enter assumption

967
00:43:32,819 --> 00:43:35,160
states that the public key has generated

968
00:43:35,160 --> 00:43:37,380
in Andrew is computationally

969
00:43:37,380 --> 00:43:39,000
indistinguishable from a rendering

970
00:43:39,000 --> 00:43:40,260
element

971
00:43:40,260 --> 00:43:42,540
at the ring LW assumption states that

972
00:43:42,540 --> 00:43:44,940
it's difficult to recover the the

973
00:43:44,940 --> 00:43:47,040
message given a

974
00:43:47,040 --> 00:43:49,560
Android ciphertext where the public key

975
00:43:49,560 --> 00:43:52,200
is chosen random

976
00:43:52,200 --> 00:43:54,960
and three of the 17 first launch letters

977
00:43:54,960 --> 00:43:57,720
this pqc candidates use some variant of

978
00:43:57,720 --> 00:43:59,160
intro

979
00:43:59,160 --> 00:44:01,920
and now I want to talk about an

980
00:44:01,920 --> 00:44:03,960
important property of Andrew

981
00:44:03,960 --> 00:44:07,500
and it is a lot of decryption errors so

982
00:44:07,500 --> 00:44:09,480
in the description we multiply

983
00:44:09,480 --> 00:44:11,760
the

984
00:44:11,760 --> 00:44:14,339
remote multiply the ciphertext by the

985
00:44:14,339 --> 00:44:16,380
private key

986
00:44:16,380 --> 00:44:18,720
and then take everything modulo plus

987
00:44:18,720 --> 00:44:21,839
minus q and then modulo plus minus A3

988
00:44:21,839 --> 00:44:24,780
and so here we have what I call here the

989
00:44:24,780 --> 00:44:26,400
correctness term

990
00:44:26,400 --> 00:44:30,060
and uh due to that correctness term

991
00:44:30,060 --> 00:44:33,060
uh for we need for correctness that all

992
00:44:33,060 --> 00:44:34,319
the coefficients of this theorem are

993
00:44:34,319 --> 00:44:35,700
smaller than Q divided by two an

994
00:44:35,700 --> 00:44:37,260
absolute value

995
00:44:37,260 --> 00:44:39,440
but foreign

996
00:44:39,440 --> 00:44:42,420
message uh the coefficients can be

997
00:44:42,420 --> 00:44:44,460
larger than that and this is the reason

998
00:44:44,460 --> 00:44:46,200
that uh

999
00:44:46,200 --> 00:44:49,619
we only have usually only average case

1000
00:44:49,619 --> 00:44:51,060
correctness which means that for an

1001
00:44:51,060 --> 00:44:52,920
honestly generated message

1002
00:44:52,920 --> 00:44:54,839
public key and randomness

1003
00:44:54,839 --> 00:44:56,819
and so this is the reason why can't

1004
00:44:56,819 --> 00:44:59,160
directly obtain a CCA secure camera test

1005
00:44:59,160 --> 00:45:00,720
to do more work

1006
00:45:00,720 --> 00:45:03,480
and in fact I want to highlight that an

1007
00:45:03,480 --> 00:45:05,099
adverse reinforcing decryption errors

1008
00:45:05,099 --> 00:45:08,300
can can leak the secret key

1009
00:45:09,000 --> 00:45:11,040
a possible solution for this problem is

1010
00:45:11,040 --> 00:45:13,380
that one can increase the modulus Q to

1011
00:45:13,380 --> 00:45:15,119
obtain perfect correctness and then

1012
00:45:15,119 --> 00:45:16,920
relatively straightforward get a CCA

1013
00:45:16,920 --> 00:45:18,540
secure cam

1014
00:45:18,540 --> 00:45:22,079
but the effect of doing this is that the

1015
00:45:22,079 --> 00:45:23,880
entry assumption gets weaker and the

1016
00:45:23,880 --> 00:45:27,000
compactness of the schemes also impacted

1017
00:45:27,000 --> 00:45:30,720
so the solution that we have is that we

1018
00:45:30,720 --> 00:45:32,700
apply an error reducing transform first

1019
00:45:32,700 --> 00:45:34,440
to turn the average case correctness

1020
00:45:34,440 --> 00:45:37,140
errors into worst case once and then

1021
00:45:37,140 --> 00:45:39,720
apply the West studied fujisakioka motor

1022
00:45:39,720 --> 00:45:42,119
transform to obtain a CCA secure chem

1023
00:45:42,119 --> 00:45:44,099
and the effect of doing this is a

1024
00:45:44,099 --> 00:45:46,619
smaller modulus Q which leads to a

1025
00:45:46,619 --> 00:45:47,880
better security of the interest function

1026
00:45:47,880 --> 00:45:50,460
and a more compact scheme

1027
00:45:50,460 --> 00:45:52,920
so this is the overview of our work we

1028
00:45:52,920 --> 00:45:55,500
propose three entry variants enter a b

1029
00:45:55,500 --> 00:45:58,020
and c

1030
00:45:58,020 --> 00:45:58,740
um

1031
00:45:58,740 --> 00:46:01,980
the first one entry a is directly with

1032
00:46:01,980 --> 00:46:03,900
the worst case correctness

1033
00:46:03,900 --> 00:46:05,700
and we have two error transforming

1034
00:46:05,700 --> 00:46:08,760
Transformations acvc which is size

1035
00:46:08,760 --> 00:46:13,200
preserving and one scvc 0 which is not

1036
00:46:13,200 --> 00:46:15,119
size preserving and we analyze flow from

1037
00:46:15,119 --> 00:46:16,500
the random molecule model in the quantum

1038
00:46:16,500 --> 00:46:19,140
render article model

1039
00:46:19,140 --> 00:46:21,119
and we properly analyze the worst case

1040
00:46:21,119 --> 00:46:22,500
correctness which allows us then to

1041
00:46:22,500 --> 00:46:24,960
apply the Fuji slap your motor transform

1042
00:46:24,960 --> 00:46:28,940
to obtain the CCA secure camps

1043
00:46:29,280 --> 00:46:32,119
as a practical application

1044
00:46:32,119 --> 00:46:35,880
when we instantiate the schemes with a

1045
00:46:35,880 --> 00:46:37,319
number theoretic transform friendly

1046
00:46:37,319 --> 00:46:40,500
rings of this particular form

1047
00:46:40,500 --> 00:46:43,260
we obtain the scheme which is 15 more

1048
00:46:43,260 --> 00:46:45,720
compact 15 time Improvement in the

1049
00:46:45,720 --> 00:46:48,240
female round trip time 35 times faster

1050
00:46:48,240 --> 00:46:50,520
key generation six times faster key

1051
00:46:50,520 --> 00:46:52,500
encapsulation and nine time faster key

1052
00:46:52,500 --> 00:46:54,680
decapsulation than the nist finalist

1053
00:46:54,680 --> 00:46:59,180
entry hrs700 run

1054
00:46:59,839 --> 00:47:03,480
so now let me walk you through uh how we

1055
00:47:03,480 --> 00:47:06,000
obtained the the final schemes so let's

1056
00:47:06,000 --> 00:47:08,040
start here with a generic entry template

1057
00:47:08,040 --> 00:47:11,040
with average case correctness errors

1058
00:47:11,040 --> 00:47:13,619
so this is a generic control template

1059
00:47:13,619 --> 00:47:14,760
that we use

1060
00:47:14,760 --> 00:47:16,560
uh and decryption we sample from the

1061
00:47:16,560 --> 00:47:19,560
error distribution and generate an F

1062
00:47:19,560 --> 00:47:22,819
and if F or G are not uh

1063
00:47:22,819 --> 00:47:25,800
invertible we restart the algorithm

1064
00:47:25,800 --> 00:47:27,720
and we have a user a well-known

1065
00:47:27,720 --> 00:47:32,220
optimization where we derive F by uh

1066
00:47:32,220 --> 00:47:34,800
multiplying three times F prime plus 1

1067
00:47:34,800 --> 00:47:36,180
which will give some more efficient

1068
00:47:36,180 --> 00:47:38,700
decryption algorithm

1069
00:47:38,700 --> 00:47:40,920
for encryption

1070
00:47:40,920 --> 00:47:43,920
we sample from the error distribution R

1071
00:47:43,920 --> 00:47:45,960
and then multiply the public Key by R

1072
00:47:45,960 --> 00:47:49,200
and that's m and for decryption we

1073
00:47:49,200 --> 00:47:50,880
multiply the ciphertext by the private

1074
00:47:50,880 --> 00:47:52,800
key take everything modulo plus minus q

1075
00:47:52,800 --> 00:47:55,680
and then module plus minus three

1076
00:47:55,680 --> 00:47:57,720
maybe another thing to highlight is that

1077
00:47:57,720 --> 00:47:59,280
the scheme is Randomness recoverable

1078
00:47:59,280 --> 00:48:01,560
which means that given the ciphertext

1079
00:48:01,560 --> 00:48:04,980
the public key and the message one can

1080
00:48:04,980 --> 00:48:08,520
recover the randomness used which was

1081
00:48:08,520 --> 00:48:11,040
obtained used to obtain the ciphertext

1082
00:48:11,040 --> 00:48:15,619
there's a loss for Tata proofs

1083
00:48:16,440 --> 00:48:19,020
so I said uh mentioned that we analyze

1084
00:48:19,020 --> 00:48:20,280
this also in the quantum render Market

1085
00:48:20,280 --> 00:48:23,819
model so let me quickly review uh what

1086
00:48:23,819 --> 00:48:27,119
the quantum random article model is

1087
00:48:27,119 --> 00:48:29,460
so uh do we want to analyze the

1088
00:48:29,460 --> 00:48:32,400
postmodern security of the schemes

1089
00:48:32,400 --> 00:48:34,140
and then we have a random article model

1090
00:48:34,140 --> 00:48:37,020
scheme and the quantum adversary one

1091
00:48:37,020 --> 00:48:39,319
should model the fact that an adversary

1092
00:48:39,319 --> 00:48:41,819
can implement the public hash function

1093
00:48:41,819 --> 00:48:44,460
which is modeled as a random marker on a

1094
00:48:44,460 --> 00:48:46,020
quantum computer and then can make a

1095
00:48:46,020 --> 00:48:48,540
superposition queries

1096
00:48:48,540 --> 00:48:50,520
so because the address you can make

1097
00:48:50,520 --> 00:48:52,640
Quantum superposition queries

1098
00:48:52,640 --> 00:48:54,740
we should

1099
00:48:54,740 --> 00:48:57,119
extend the random output model to allow

1100
00:48:57,119 --> 00:48:58,920
for this Quantum access

1101
00:48:58,920 --> 00:49:01,640
and

1102
00:49:02,099 --> 00:49:06,480
common Lemma which then is used and

1103
00:49:06,480 --> 00:49:08,640
those proofs are well known one way to

1104
00:49:08,640 --> 00:49:09,839
hiding Lemma which I lost one to

1105
00:49:09,839 --> 00:49:12,359
reprogram the quantum random Oracle

1106
00:49:12,359 --> 00:49:13,680
model and bond the difference between

1107
00:49:13,680 --> 00:49:17,899
the original and the reprogrammed one

1108
00:49:20,099 --> 00:49:23,760
next let's look at the simple not size

1109
00:49:23,760 --> 00:49:26,819
preserving acbc transform

1110
00:49:26,819 --> 00:49:29,700
to obtain a worst case character scheme

1111
00:49:29,700 --> 00:49:33,359
which is in CPA secure

1112
00:49:33,359 --> 00:49:35,160
so this is well known for claw

1113
00:49:35,160 --> 00:49:37,520
transformation

1114
00:49:37,920 --> 00:49:40,140
what we do is we pick a random ring

1115
00:49:40,140 --> 00:49:41,099
element

1116
00:49:41,099 --> 00:49:43,920
encrypted using the the entry one-way

1117
00:49:43,920 --> 00:49:46,800
function and use this random ring

1118
00:49:46,800 --> 00:49:48,960
element r as a one-time pad to with a

1119
00:49:48,960 --> 00:49:53,099
random Oracle F and XR with a message

1120
00:49:53,099 --> 00:49:55,140
so because of the second part it's not

1121
00:49:55,140 --> 00:49:57,480
size preserving

1122
00:49:57,480 --> 00:49:59,640
and the nutrition here is then that the

1123
00:49:59,640 --> 00:50:01,740
correctness is now independent of the

1124
00:50:01,740 --> 00:50:03,660
message so even if you pick a worst case

1125
00:50:03,660 --> 00:50:04,740
message here

1126
00:50:04,740 --> 00:50:07,319
because the ring element are the

1127
00:50:07,319 --> 00:50:08,520
correctness only depends on the ring

1128
00:50:08,520 --> 00:50:09,900
element are

1129
00:50:09,900 --> 00:50:11,940
which is chosen randomly as part of the

1130
00:50:11,940 --> 00:50:13,280
randomness

1131
00:50:13,280 --> 00:50:16,200
this scheme is worst case correct

1132
00:50:16,200 --> 00:50:18,839
so as ethereum we show that

1133
00:50:18,839 --> 00:50:21,000
the public key the original public key

1134
00:50:21,000 --> 00:50:22,619
encryption scheme is data average case

1135
00:50:22,619 --> 00:50:24,660
correct which means for an honestly

1136
00:50:24,660 --> 00:50:26,220
generated message

1137
00:50:26,220 --> 00:50:29,700
then it's the transformed schemas data

1138
00:50:29,700 --> 00:50:32,119
was guess correct which means for

1139
00:50:32,119 --> 00:50:34,619
adversarly chosen message

1140
00:50:34,619 --> 00:50:37,560
so no and then what you also shows then

1141
00:50:37,560 --> 00:50:39,119
that if the original scheme is one way

1142
00:50:39,119 --> 00:50:41,700
then the derived scheme is in CPA is

1143
00:50:41,700 --> 00:50:43,380
secure and the quantum random molecular

1144
00:50:43,380 --> 00:50:45,560
model

1145
00:50:45,920 --> 00:50:48,540
uh so now that we have derived the worst

1146
00:50:48,540 --> 00:50:51,660
case correct scheme we can now

1147
00:50:51,660 --> 00:50:53,819
apply the Fujisaki okamoto transform

1148
00:50:53,819 --> 00:50:56,760
here to then obtain a CCA secure chem

1149
00:50:56,760 --> 00:50:59,040
and we'll see

1150
00:50:59,040 --> 00:51:01,500
so let's review the fujizak yokamoto

1151
00:51:01,500 --> 00:51:03,800
transform

1152
00:51:04,020 --> 00:51:06,359
so the fujisakyokamoto transform works

1153
00:51:06,359 --> 00:51:08,460
by de-randomizing the encryption scheme

1154
00:51:08,460 --> 00:51:11,339
using a hash function G

1155
00:51:11,339 --> 00:51:14,460
and then in the decryption

1156
00:51:14,460 --> 00:51:17,460
we recover a

1157
00:51:17,460 --> 00:51:22,140
the r Prime by decrypting the ciphatex C

1158
00:51:22,140 --> 00:51:26,040
and then we re-encrypt because we

1159
00:51:26,040 --> 00:51:27,359
de-randomize the scheme we can

1160
00:51:27,359 --> 00:51:29,880
re-encrypt this R Prime and check

1161
00:51:29,880 --> 00:51:31,800
against the original the ciphertext and

1162
00:51:31,800 --> 00:51:34,440
the equality holds we can return we

1163
00:51:34,440 --> 00:51:38,099
return the chem key h of R Prime

1164
00:51:38,099 --> 00:51:41,520
and otherwise we'll turn a error symbol

1165
00:51:41,520 --> 00:51:42,839
bot

1166
00:51:42,839 --> 00:51:46,380
and this is what gives it the chemists

1167
00:51:46,380 --> 00:51:49,740
CCA security and it's well known that if

1168
00:51:49,740 --> 00:51:53,940
you input worst case correct CPA Secure

1169
00:51:53,940 --> 00:51:55,559
Public key encryption scheme that then

1170
00:51:55,559 --> 00:51:59,880
you would it yields CCA secure can

1171
00:51:59,880 --> 00:52:02,220
and so this explicit rejection variant

1172
00:52:02,220 --> 00:52:04,680
uh has been proven secure in the quantum

1173
00:52:04,680 --> 00:52:06,900
render Market model and the advantage of

1174
00:52:06,900 --> 00:52:09,720
it is uh that deals a slightly more

1175
00:52:09,720 --> 00:52:11,760
efficient uh decryption decapsulation

1176
00:52:11,760 --> 00:52:13,020
algorithm

1177
00:52:13,020 --> 00:52:16,920
uh because we don't have to times uh

1178
00:52:16,920 --> 00:52:19,140
timing sectionally securely implement

1179
00:52:19,140 --> 00:52:22,460
this decapsulation

1180
00:52:24,359 --> 00:52:25,859
okay

1181
00:52:25,859 --> 00:52:27,960
so now that I've talked a little bit

1182
00:52:27,960 --> 00:52:30,240
about the last row here

1183
00:52:30,240 --> 00:52:32,880
and how to obtain obtain the CCS secure

1184
00:52:32,880 --> 00:52:36,180
cam let me now come to the

1185
00:52:36,180 --> 00:52:38,520
maybe a little bit different approach

1186
00:52:38,520 --> 00:52:41,700
that we use which is Andrew a

1187
00:52:41,700 --> 00:52:45,680
which is directly worst case correct

1188
00:52:46,500 --> 00:52:50,099
so the idea of Entry a is to use

1189
00:52:50,099 --> 00:52:53,040
distribution PSI

1190
00:52:53,040 --> 00:52:55,859
which is generated the following way

1191
00:52:55,859 --> 00:53:01,920
we take B1 B2 B3 B4 uniformly random

1192
00:53:01,920 --> 00:53:03,619
from the set

1193
00:53:03,619 --> 00:53:07,079
and compute B1 plus B2 minus B three

1194
00:53:07,079 --> 00:53:09,359
minus B4

1195
00:53:09,359 --> 00:53:12,119
and then turn off alternative way of

1196
00:53:12,119 --> 00:53:14,640
generating this distribution

1197
00:53:14,640 --> 00:53:18,420
is to compute it the following way here

1198
00:53:18,420 --> 00:53:21,680
namely B1 minus 2 times B2

1199
00:53:21,680 --> 00:53:25,380
multiplied by V3 and then multiplied by

1200
00:53:25,380 --> 00:53:27,720
1 minus two times three four

1201
00:53:27,720 --> 00:53:30,960
and now everything my two you can

1202
00:53:30,960 --> 00:53:35,300
actually recover the original B1

1203
00:53:35,460 --> 00:53:36,839
and

1204
00:53:36,839 --> 00:53:37,440
um

1205
00:53:37,440 --> 00:53:40,559
the idea then of Entry a is

1206
00:53:40,559 --> 00:53:45,059
to use the message msb1 and Sample B2 B3

1207
00:53:45,059 --> 00:53:46,980
and B4 random

1208
00:53:46,980 --> 00:53:51,780
so the adversary then only controls uh e

1209
00:53:51,780 --> 00:53:55,020
mat2 and the Android ciphertext

1210
00:53:55,020 --> 00:53:58,079
and we can then show that the worst case

1211
00:53:58,079 --> 00:53:59,420
decryption errors

1212
00:53:59,420 --> 00:54:02,760
about the same as average case R Us

1213
00:54:02,760 --> 00:54:06,180
and because of that we don't need an

1214
00:54:06,180 --> 00:54:09,980
additional error reducing transformation

1215
00:54:10,980 --> 00:54:13,859
so this is what the scheme looks like

1216
00:54:13,859 --> 00:54:16,200
for encryption and decryption notice

1217
00:54:16,200 --> 00:54:19,680
here in line two and three we do what we

1218
00:54:19,680 --> 00:54:22,140
said in the slide before we use the

1219
00:54:22,140 --> 00:54:24,540
message sb1

1220
00:54:24,540 --> 00:54:28,380
and Sample b2b3 before uniformly random

1221
00:54:28,380 --> 00:54:30,540
and then

1222
00:54:30,540 --> 00:54:33,240
constructed as a distribution I showed

1223
00:54:33,240 --> 00:54:34,559
you before

1224
00:54:34,559 --> 00:54:37,800
and then we just do the usual entry

1225
00:54:37,800 --> 00:54:39,240
encryption

1226
00:54:39,240 --> 00:54:42,359
and for decapsulation for sorry for

1227
00:54:42,359 --> 00:54:45,780
decryption we then take things module

1228
00:54:45,780 --> 00:54:47,160
and also in the private key instead of

1229
00:54:47,160 --> 00:54:50,760
multiplying the F Prime by uh by three

1230
00:54:50,760 --> 00:54:52,380
we multiply by two

1231
00:54:52,380 --> 00:54:55,020
and what we show is that then what you

1232
00:54:55,020 --> 00:54:56,640
can show then is that

1233
00:54:56,640 --> 00:54:58,859
the scheme is one way CPA is secure

1234
00:54:58,859 --> 00:55:01,980
based on the Android Ring lwe 2

1235
00:55:01,980 --> 00:55:04,680
assumption The Ring lwe 2 assumption

1236
00:55:04,680 --> 00:55:08,220
states that it's a variant of ring lwe

1237
00:55:08,220 --> 00:55:11,760
which states it's difficult to compute

1238
00:55:11,760 --> 00:55:15,319
EMA 2 instead of E

1239
00:55:16,260 --> 00:55:19,559
so then again we apply we have now skin

1240
00:55:19,559 --> 00:55:21,180
which is in worst case correct and then

1241
00:55:21,180 --> 00:55:22,859
we can apply F all to obtain a CCA

1242
00:55:22,859 --> 00:55:25,920
secure Canon

1243
00:55:25,920 --> 00:55:30,839
so let me now say a few words about the

1244
00:55:30,839 --> 00:55:33,780
size preserving acbc transform

1245
00:55:33,780 --> 00:55:35,819
I'm not going to show you the uh the

1246
00:55:35,819 --> 00:55:38,880
exact scheme but just say a couple of

1247
00:55:38,880 --> 00:55:41,119
things

1248
00:55:41,700 --> 00:55:44,300
so it's similar to the

1249
00:55:44,300 --> 00:55:47,640
acbc zero transform but in contrast to

1250
00:55:47,640 --> 00:55:50,400
it it's size reserving

1251
00:55:50,400 --> 00:55:54,119
and uh to prove it secure and analyze

1252
00:55:54,119 --> 00:55:55,800
the correctness errors we need some a

1253
00:55:55,800 --> 00:55:58,020
little bit different proof techniques

1254
00:55:58,020 --> 00:56:00,599
so we use a measure entry program

1255
00:56:00,599 --> 00:56:04,020
ethereum which is a theorem used in the

1256
00:56:04,020 --> 00:56:06,420
context of proving Fiat chamia a secure

1257
00:56:06,420 --> 00:56:09,420
in the quantum random Oracle model

1258
00:56:09,420 --> 00:56:12,000
and for the worst case error bound we

1259
00:56:12,000 --> 00:56:15,119
use the hefting bound and

1260
00:56:15,119 --> 00:56:17,700
for the exact details of this

1261
00:56:17,700 --> 00:56:21,859
construction I've refer you to the paper

1262
00:56:23,339 --> 00:56:26,040
and then again we apply the therefore to

1263
00:56:26,040 --> 00:56:29,300
obtain a CCA secure cam

1264
00:56:30,359 --> 00:56:33,740
so now let me come to the results

1265
00:56:33,740 --> 00:56:36,180
and talk a little bit about performance

1266
00:56:36,180 --> 00:56:39,119
of the final CCA secure schemes in

1267
00:56:39,119 --> 00:56:43,579
particular more about the CCA and 2A

1268
00:56:44,220 --> 00:56:47,160
so these are some performance results

1269
00:56:47,160 --> 00:56:49,440
here for key generation encapsulation

1270
00:56:49,440 --> 00:56:50,960
and decapsulation

1271
00:56:50,960 --> 00:56:55,800
performed on a Skylake machine

1272
00:56:55,800 --> 00:56:59,160
the public key size the ciphertext size

1273
00:56:59,160 --> 00:57:03,180
and the security level

1274
00:57:03,180 --> 00:57:08,220
and we compare to and through HRS 701

1275
00:57:08,220 --> 00:57:12,480
to enter through Kaiba 512 and kyber

1276
00:57:12,480 --> 00:57:14,400
768.

1277
00:57:14,400 --> 00:57:17,400
here than the 90s version

1278
00:57:17,400 --> 00:57:20,940
so here we instantiate the

1279
00:57:20,940 --> 00:57:24,180
entry a scheme the CCA secure scheme

1280
00:57:24,180 --> 00:57:28,140
with ring Dimension 648

1281
00:57:28,140 --> 00:57:32,339
and modulus 2917.

1282
00:57:33,059 --> 00:57:35,280
and to obtain a scheme which is compared

1283
00:57:35,280 --> 00:57:37,319
to the other schemes

1284
00:57:37,319 --> 00:57:40,140
as efficient as key generation as Sky by

1285
00:57:40,140 --> 00:57:42,660
50012

1286
00:57:42,660 --> 00:57:44,520
significantly more efficient than

1287
00:57:44,520 --> 00:57:47,640
Android RSS 701 and encapsulation and

1288
00:57:47,640 --> 00:57:50,480
decapsulation

1289
00:57:52,020 --> 00:57:54,180
and also more efficient than anti-true

1290
00:57:54,180 --> 00:57:58,140
kyber 50012 and kyber 768

1291
00:57:58,140 --> 00:58:00,540
for the public key and ciphertext size

1292
00:58:00,540 --> 00:58:04,079
we have we are more efficient

1293
00:58:04,079 --> 00:58:07,079
then all the other schemes except for

1294
00:58:07,079 --> 00:58:09,200
Kaiba 50012 which is slightly more

1295
00:58:09,200 --> 00:58:12,359
efficient more compact in public key

1296
00:58:12,359 --> 00:58:14,160
size and ciphertext size

1297
00:58:14,160 --> 00:58:18,379
but at a different security level

1298
00:58:19,260 --> 00:58:20,700
um

1299
00:58:20,700 --> 00:58:22,440
yeah and if one thing maybe you can

1300
00:58:22,440 --> 00:58:24,180
notice is that it's a

1301
00:58:24,180 --> 00:58:27,119
year uh when we compare to enter HRS

1302
00:58:27,119 --> 00:58:29,160
s701 let's set a slightly better

1303
00:58:29,160 --> 00:58:30,660
security level

1304
00:58:30,660 --> 00:58:32,280
so it's more efficient at a slightly

1305
00:58:32,280 --> 00:58:34,740
better security level

1306
00:58:34,740 --> 00:58:37,799
um yeah so that's about it regarding

1307
00:58:37,799 --> 00:58:40,020
performance and compactness

1308
00:58:40,020 --> 00:58:41,819
so to conclude the talk

1309
00:58:41,819 --> 00:58:44,400
we shot different ways to obtain worst

1310
00:58:44,400 --> 00:58:46,920
case correctness for intro

1311
00:58:46,920 --> 00:58:49,740
proving them secure and the random

1312
00:58:49,740 --> 00:58:51,299
Market model and Quantum random molecule

1313
00:58:51,299 --> 00:58:52,619
model

1314
00:58:52,619 --> 00:58:55,440
which allows us then due to the worst

1315
00:58:55,440 --> 00:58:57,059
case correctness to apply the fujisato

1316
00:58:57,059 --> 00:59:01,200
commoto transform to obtain CCA security

1317
00:59:01,200 --> 00:59:04,680
and by doing our analysis it allows us

1318
00:59:04,680 --> 00:59:06,599
to use a smaller modular screw because

1319
00:59:06,599 --> 00:59:09,780
we don't need perfect correctness

1320
00:59:09,780 --> 00:59:11,579
um

1321
00:59:11,579 --> 00:59:15,119
which leads to a better security and

1322
00:59:15,119 --> 00:59:17,160
more compact scheme

1323
00:59:17,160 --> 00:59:19,500
and where we instantiated our design

1324
00:59:19,500 --> 00:59:21,599
with entity friendly Rings we obtain

1325
00:59:21,599 --> 00:59:24,299
three different efficient CCI secure

1326
00:59:24,299 --> 00:59:26,640
entry designs with flexible parameter

1327
00:59:26,640 --> 00:59:27,900
choice

1328
00:59:27,900 --> 00:59:29,940
so

1329
00:59:29,940 --> 00:59:32,700
thank you for listening and that's the

1330
00:59:32,700 --> 00:59:35,359
end of the talk

1331
00:59:40,619 --> 00:59:44,240
minute or so for questions yes

1332
00:59:47,040 --> 00:59:50,220
thanks for the talk uh in your final CC

1333
00:59:50,220 --> 00:59:53,000
security bounce for your three variants

1334
00:59:53,000 --> 00:59:55,500
uh do you recall what is the dependence

1335
00:59:55,500 --> 00:59:59,700
on the worst case uh error

1336
00:59:59,700 --> 01:00:01,500
with respect to the number of quantum

1337
01:00:01,500 --> 01:00:03,660
random order yeah yeah uh you mean in

1338
01:00:03,660 --> 01:00:05,160
the render Markle model on the quantum

1339
01:00:05,160 --> 01:00:07,200
random box

1340
01:00:07,200 --> 01:00:10,200
yeah so we use the bound the exclusive

1341
01:00:10,200 --> 01:00:13,559
reject proof by

1342
01:00:13,559 --> 01:00:17,280
Pharrell and colleagues so the bond is I

1343
01:00:17,280 --> 01:00:18,660
think

1344
01:00:18,660 --> 01:00:21,960
let me not uh something

1345
01:00:21,960 --> 01:00:24,180
like square root yeah square root data

1346
01:00:24,180 --> 01:00:26,099
something but I'm not it's slightly

1347
01:00:26,099 --> 01:00:27,540
worse than the implicit reject Bond

1348
01:00:27,540 --> 01:00:29,040
proof because they first applied the one

1349
01:00:29,040 --> 01:00:30,299
way to hiding Lemma and then do the

1350
01:00:30,299 --> 01:00:32,400
proof when you do the fo with the

1351
01:00:32,400 --> 01:00:35,520
implicit rejection you first do the use

1352
01:00:35,520 --> 01:00:36,839
the data correctness and then use one

1353
01:00:36,839 --> 01:00:38,099
way to hiding and the last step of the

1354
01:00:38,099 --> 01:00:40,260
proof so it's slightly slightly worse

1355
01:00:40,260 --> 01:00:43,020
than that but I don't remember the Excel

1356
01:00:43,020 --> 01:00:44,339
but because you have the square root

1357
01:00:44,339 --> 01:00:46,859
first and then you do do your your data

1358
01:00:46,859 --> 01:00:48,299
correctness it's slightly worse than

1359
01:00:48,299 --> 01:00:49,319
that yeah

1360
01:00:49,319 --> 01:00:51,359
but if you if you want the to

1361
01:00:51,359 --> 01:00:52,920
instantiate it with the better you can

1362
01:00:52,920 --> 01:00:54,480
still always of course do the implicit

1363
01:00:54,480 --> 01:00:57,079
reject variant and then we'll have the

1364
01:00:57,079 --> 01:01:00,059
state-of-the-art bond I see you can ask

1365
01:01:00,059 --> 01:01:01,799
a photo for

1366
01:01:01,799 --> 01:01:03,599
um so uh whole months at all they had

1367
01:01:03,599 --> 01:01:06,780
like a result last year teacher Crypt on

1368
01:01:06,780 --> 01:01:08,760
how to fail gracefully or something

1369
01:01:08,760 --> 01:01:10,740
where they came up with the proof for

1370
01:01:10,740 --> 01:01:12,599
the explicit rejection which with better

1371
01:01:12,599 --> 01:01:13,980
bonds with respect to the correctness

1372
01:01:13,980 --> 01:01:15,720
error where you don't have the square

1373
01:01:15,720 --> 01:01:18,900
root bound yeah but then they had many

1374
01:01:18,900 --> 01:01:21,839
more parameters like a tail bond for

1375
01:01:21,839 --> 01:01:24,660
errors and things like that yeah so did

1376
01:01:24,660 --> 01:01:27,720
you look into their results for your so

1377
01:01:27,720 --> 01:01:29,460
I I didn't look into that

1378
01:01:29,460 --> 01:01:30,359
um

1379
01:01:30,359 --> 01:01:32,099
so one thing about the clock it's an

1380
01:01:32,099 --> 01:01:34,260
interesting work but uh I think it's a

1381
01:01:34,260 --> 01:01:36,599
bit uh difficult to and concretely

1382
01:01:36,599 --> 01:01:38,520
instantiate because it's a very

1383
01:01:38,520 --> 01:01:40,319
different approach maybe you can talk

1384
01:01:40,319 --> 01:01:43,020
about this more offline but it's not as

1385
01:01:43,020 --> 01:01:46,440
straight forward I think yeah thank you

1386
01:01:46,440 --> 01:01:48,599
very much

1387
01:01:48,599 --> 01:01:50,339
thank you uh thanks for the talk thanks

1388
01:01:50,339 --> 01:01:53,480
uh let's thank Julian again

1389
01:01:59,059 --> 01:02:02,579
all right our next talk is

1390
01:02:02,579 --> 01:02:04,740
a lightweight identification protocol

1391
01:02:04,740 --> 01:02:07,740
based on lattices the work is by a

1392
01:02:07,740 --> 01:02:11,099
summit doozlo Julian Cramer Thomas

1393
01:02:11,099 --> 01:02:13,980
popeman and Patrick struck and Thomas

1394
01:02:13,980 --> 01:02:16,260
will be giving the talk and it's paper

1395
01:02:16,260 --> 01:02:18,980
99.

1396
01:02:39,359 --> 01:02:42,180
So yeah thank you uh hope you can hear

1397
01:02:42,180 --> 01:02:45,059
me well um yeah so this is this is a

1398
01:02:45,059 --> 01:02:46,859
work on the lightweight identification

1399
01:02:46,859 --> 01:02:49,260
protocol based on lattices

1400
01:02:49,260 --> 01:02:52,140
as Chris mentions it's a joint work with

1401
01:02:52,140 --> 01:02:54,359
some educator you learn Nick Kramer and

1402
01:02:54,359 --> 01:02:55,619
Patrick shrook from University of

1403
01:02:55,619 --> 01:02:59,339
Regensburg I'm with infinian and yeah I

1404
01:02:59,339 --> 01:03:01,380
would like to to give a short motivation

1405
01:03:01,380 --> 01:03:04,020
for this work what we're looking at is

1406
01:03:04,020 --> 01:03:06,420
an identification problem so there's a

1407
01:03:06,420 --> 01:03:08,400
verifier party that wants to check the

1408
01:03:08,400 --> 01:03:11,220
Identity or authenticity of a party and

1409
01:03:11,220 --> 01:03:13,200
then we have approval and the approver

1410
01:03:13,200 --> 01:03:15,359
wants to interact with the verifier and

1411
01:03:15,359 --> 01:03:17,040
assert

1412
01:03:17,040 --> 01:03:19,920
um that it's uh sort of its identity and

1413
01:03:19,920 --> 01:03:22,380
this is a lot of practical applications

1414
01:03:22,380 --> 01:03:23,579
um

1415
01:03:23,579 --> 01:03:26,400
um also in an industrial setting and

1416
01:03:26,400 --> 01:03:28,260
some practical applications are you want

1417
01:03:28,260 --> 01:03:30,359
to prevent counterfeit and counterfeit

1418
01:03:30,359 --> 01:03:32,040
could be the counterfeit of batteries

1419
01:03:32,040 --> 01:03:34,619
chips machine parts and obviously such

1420
01:03:34,619 --> 01:03:37,020
counterfeit could create of course great

1421
01:03:37,020 --> 01:03:39,900
harm and what we also want to do is we

1422
01:03:39,900 --> 01:03:42,660
want to do this in a in an efficient

1423
01:03:42,660 --> 01:03:45,960
manner using cryptography and then of

1424
01:03:45,960 --> 01:03:47,280
course also using post Quantum

1425
01:03:47,280 --> 01:03:49,980
cryptography and when looking at

1426
01:03:49,980 --> 01:03:52,200
approaches that we know in practice of

1427
01:03:52,200 --> 01:03:53,160
course there are more involved

1428
01:03:53,160 --> 01:03:56,160
approaches in in theory than what we

1429
01:03:56,160 --> 01:03:58,619
usually take is at the moment we either

1430
01:03:58,619 --> 01:04:00,599
use the symmetric keys or the verifier

1431
01:04:00,599 --> 01:04:03,059
encrypts and ons the proof of decrypts

1432
01:04:03,059 --> 01:04:05,099
the nonsense sends back the nons we use

1433
01:04:05,099 --> 01:04:06,839
public key encryption so we encrypt the

1434
01:04:06,839 --> 01:04:08,880
non's the approval decryption nonsense

1435
01:04:08,880 --> 01:04:11,520
back the nons or use a digital signature

1436
01:04:11,520 --> 01:04:13,740
and they are the the verifier just sends

1437
01:04:13,740 --> 01:04:16,380
announced the approver decrypts science

1438
01:04:16,380 --> 01:04:19,020
the nonsense back the the signature and

1439
01:04:19,020 --> 01:04:20,760
this is kind of the toolkit that we have

1440
01:04:20,760 --> 01:04:23,700
available today and

1441
01:04:23,700 --> 01:04:25,759
um

1442
01:04:25,859 --> 01:04:26,640
um

1443
01:04:26,640 --> 01:04:28,740
what's used in practice I think mostly

1444
01:04:28,740 --> 01:04:30,720
are digital signatures but also

1445
01:04:30,720 --> 01:04:32,280
sometimes public key encryption or

1446
01:04:32,280 --> 01:04:35,160
schemes based on Diffie Hermann and when

1447
01:04:35,160 --> 01:04:37,380
looking into this if we want to move

1448
01:04:37,380 --> 01:04:39,299
this into post Quantum into a post

1449
01:04:39,299 --> 01:04:41,460
Quantum setting then

1450
01:04:41,460 --> 01:04:43,380
um it's clear we want active security

1451
01:04:43,380 --> 01:04:46,319
because usually you you can assume

1452
01:04:46,319 --> 01:04:48,020
there's a there's a man in the middle

1453
01:04:48,020 --> 01:04:49,859
that is tampering with the

1454
01:04:49,859 --> 01:04:52,079
identification protocol and we want

1455
01:04:52,079 --> 01:04:54,240
protection against the physical attacks

1456
01:04:54,240 --> 01:04:56,099
because an attacker could try to extract

1457
01:04:56,099 --> 01:04:58,400
secret keys or secret information from

1458
01:04:58,400 --> 01:05:01,020
from approver and then use this for

1459
01:05:01,020 --> 01:05:04,200
example to build counterfeit devices and

1460
01:05:04,200 --> 01:05:06,059
we want an asymmetric scheme because we

1461
01:05:06,059 --> 01:05:07,619
only want a secret in the proverb

1462
01:05:07,619 --> 01:05:09,240
because otherwise we would also have to

1463
01:05:09,240 --> 01:05:13,020
protect the secret in the verifier and I

1464
01:05:13,020 --> 01:05:15,180
think what's quite interesting is on a

1465
01:05:15,180 --> 01:05:16,920
very high level that things are now a

1466
01:05:16,920 --> 01:05:19,140
bit different with pqc and with the

1467
01:05:19,140 --> 01:05:21,900
recent Decisions by nist for for

1468
01:05:21,900 --> 01:05:24,720
standardization because when looking at

1469
01:05:24,720 --> 01:05:27,420
at current pre-quantum schemes then

1470
01:05:27,420 --> 01:05:28,920
usually

1471
01:05:28,920 --> 01:05:31,200
um okay and then usually

1472
01:05:31,200 --> 01:05:34,579
um ECC signature

1473
01:05:34,579 --> 01:05:37,619
roughly costs the same and the physical

1474
01:05:37,619 --> 01:05:40,140
protection is well understood so when

1475
01:05:40,140 --> 01:05:41,880
you when you implement such a scheme or

1476
01:05:41,880 --> 01:05:43,500
when you design a protocol or choose a

1477
01:05:43,500 --> 01:05:45,420
protocol it doesn't matter that much

1478
01:05:45,420 --> 01:05:47,160
there are some considerations how you

1479
01:05:47,160 --> 01:05:48,960
want to move your your

1480
01:05:48,960 --> 01:05:51,780
um scalar multiplications

1481
01:05:51,780 --> 01:05:54,420
um if you want to want to also get a

1482
01:05:54,420 --> 01:05:56,400
secret key out of the identification

1483
01:05:56,400 --> 01:05:59,040
protocol but I think in practice a lot

1484
01:05:59,040 --> 01:06:01,200
of the available schemes

1485
01:06:01,200 --> 01:06:03,000
um that we see to protect against

1486
01:06:03,000 --> 01:06:05,099
counterfeit they use just elliptic curve

1487
01:06:05,099 --> 01:06:07,339
elliptic curve

1488
01:06:07,339 --> 01:06:09,720
digital signature scheme because it's

1489
01:06:09,720 --> 01:06:11,240
well understood

1490
01:06:11,240 --> 01:06:14,339
but the change now is with pqc schemes

1491
01:06:14,339 --> 01:06:16,020
is that signatures are getting much more

1492
01:06:16,020 --> 01:06:18,540
expensive so when looking at kyber

1493
01:06:18,540 --> 01:06:20,940
versus delysium then the lithium

1494
01:06:20,940 --> 01:06:23,460
signature is much much slower it's also

1495
01:06:23,460 --> 01:06:26,220
much larger so this this kind of we

1496
01:06:26,220 --> 01:06:28,020
don't care what we what we use doesn't

1497
01:06:28,020 --> 01:06:30,960
work anymore and we pay more for

1498
01:06:30,960 --> 01:06:32,700
signatures but then also we could of

1499
01:06:32,700 --> 01:06:33,960
course say okay let's not use the

1500
01:06:33,960 --> 01:06:36,119
signature scheme let's just use a

1501
01:06:36,119 --> 01:06:38,280
lattice based public key encryption

1502
01:06:38,280 --> 01:06:39,599
scheme or a cam

1503
01:06:39,599 --> 01:06:42,240
and there the cost is that we see that

1504
01:06:42,240 --> 01:06:44,280
it's very expensive to protect the the

1505
01:06:44,280 --> 01:06:46,740
current uh schemes against such

1506
01:06:46,740 --> 01:06:49,079
analytics because of properties of the

1507
01:06:49,079 --> 01:06:51,599
fujizaki okamoto transform so the the

1508
01:06:51,599 --> 01:06:53,520
fuchsi Zaki okamoto transform we've seen

1509
01:06:53,520 --> 01:06:56,160
this already and in previous talks it

1510
01:06:56,160 --> 01:06:57,960
requires you to perform a re-encryption

1511
01:06:57,960 --> 01:06:59,760
scheme to check that the ciphertext was

1512
01:06:59,760 --> 01:07:02,160
honestly generated but this is also a

1513
01:07:02,160 --> 01:07:03,960
plain text checking Oracle that can be

1514
01:07:03,960 --> 01:07:06,660
used by side Channel attacks to break

1515
01:07:06,660 --> 01:07:08,760
the scheme very easily and and this is a

1516
01:07:08,760 --> 01:07:10,920
really severe attack because usually

1517
01:07:10,920 --> 01:07:12,299
when you when you think about side

1518
01:07:12,299 --> 01:07:14,039
Channel attacks you just think okay I

1519
01:07:14,039 --> 01:07:16,319
have to do some some DPA some Spa

1520
01:07:16,319 --> 01:07:17,700
something like that to extract the

1521
01:07:17,700 --> 01:07:19,740
secret key but in this attack on the

1522
01:07:19,740 --> 01:07:21,599
fujizaki okamoto transform you basically

1523
01:07:21,599 --> 01:07:24,240
just have to check if a computation of a

1524
01:07:24,240 --> 01:07:26,460
large if a large computation was

1525
01:07:26,460 --> 01:07:28,740
different if something changed because

1526
01:07:28,740 --> 01:07:30,780
if you decrypt a different size if you

1527
01:07:30,780 --> 01:07:33,480
if you send malicious Cipher text you do

1528
01:07:33,480 --> 01:07:34,799
a decryption you get a different

1529
01:07:34,799 --> 01:07:36,960
different Randomness out

1530
01:07:36,960 --> 01:07:38,940
and then when one bit of this Randomness

1531
01:07:38,940 --> 01:07:40,680
changes the whole decryption the whole

1532
01:07:40,680 --> 01:07:42,299
re-encryption changes and if you can

1533
01:07:42,299 --> 01:07:43,920
detect this you can attack the scheme

1534
01:07:43,920 --> 01:07:45,539
and this is very hard to to protect

1535
01:07:45,539 --> 01:07:48,240
against and and a very severe attack and

1536
01:07:48,240 --> 01:07:51,000
there's there are a lot of Works um that

1537
01:07:51,000 --> 01:07:53,039
that are trying to protect the F4

1538
01:07:53,039 --> 01:07:55,500
transform again side Channel attacks

1539
01:07:55,500 --> 01:07:58,500
um but if you do this it gets expensive

1540
01:07:58,500 --> 01:08:00,240
so

1541
01:08:00,240 --> 01:08:00,960
um

1542
01:08:00,960 --> 01:08:03,180
what we are looking at then is how can

1543
01:08:03,180 --> 01:08:06,059
we maybe mitigate these uh this impact a

1544
01:08:06,059 --> 01:08:08,039
bit and we just look at the naive

1545
01:08:08,039 --> 01:08:09,539
construction

1546
01:08:09,539 --> 01:08:11,039
um just using a public key encryption

1547
01:08:11,039 --> 01:08:14,339
scheme so usual setting the verify as a

1548
01:08:14,339 --> 01:08:16,198
public key this has been authenticated

1549
01:08:16,198 --> 01:08:18,540
already we have the approval with the

1550
01:08:18,540 --> 01:08:20,040
secret key and then we have a challenge

1551
01:08:20,040 --> 01:08:22,620
computation so you you choose a random

1552
01:08:22,620 --> 01:08:24,660
message the random message is encrypted

1553
01:08:24,660 --> 01:08:27,060
with the public key there's the

1554
01:08:27,060 --> 01:08:28,979
challenge the challenge challenges sent

1555
01:08:28,979 --> 01:08:30,660
over to the approver and then the

1556
01:08:30,660 --> 01:08:32,279
approver is just decrypting it using

1557
01:08:32,279 --> 01:08:34,319
your secret key and the ciphertext and

1558
01:08:34,319 --> 01:08:35,819
then sends over the message and in the

1559
01:08:35,819 --> 01:08:38,040
end the verifier Compares If the message

1560
01:08:38,040 --> 01:08:41,100
matches the matches message that was

1561
01:08:41,100 --> 01:08:44,040
sent over if we would instantiate this

1562
01:08:44,040 --> 01:08:47,100
with with kyber here then we would have

1563
01:08:47,100 --> 01:08:49,198
the issue with size Channel attacks on

1564
01:08:49,198 --> 01:08:51,238
DFO transform if we would just

1565
01:08:51,238 --> 01:08:54,000
instantiate it with the with the CPA in

1566
01:08:54,000 --> 01:08:56,339
CPA secure kyber of course then we

1567
01:08:56,339 --> 01:08:58,100
wouldn't have a security against

1568
01:08:58,100 --> 01:09:01,620
malicious ciphertext attacks so what can

1569
01:09:01,620 --> 01:09:03,719
we do and um

1570
01:09:03,719 --> 01:09:06,179
when looking at this why do we have TFO

1571
01:09:06,179 --> 01:09:08,580
transform asset the goal is to check

1572
01:09:08,580 --> 01:09:10,198
that the ciphertext was honestly

1573
01:09:10,198 --> 01:09:12,000
generated and maybe we can find a

1574
01:09:12,000 --> 01:09:13,259
different way to check that the

1575
01:09:13,259 --> 01:09:16,198
ciphertext was honestly generated

1576
01:09:16,198 --> 01:09:18,299
um and then what we also see is that the

1577
01:09:18,299 --> 01:09:21,179
the in CPA secure decryption of of Kaiba

1578
01:09:21,179 --> 01:09:22,679
is quite fast and straightforward to

1579
01:09:22,679 --> 01:09:23,939
protect

1580
01:09:23,939 --> 01:09:26,100
um because it's fast we also have a lot

1581
01:09:26,100 --> 01:09:27,299
of kind of

1582
01:09:27,299 --> 01:09:29,640
Cycles left or time left to apply

1583
01:09:29,640 --> 01:09:31,920
protection measures it's mostly

1584
01:09:31,920 --> 01:09:33,899
arithmetic so there are not that many

1585
01:09:33,899 --> 01:09:37,140
nasty operations but the re-encryption

1586
01:09:37,140 --> 01:09:39,299
asset is also really nasty and and this

1587
01:09:39,299 --> 01:09:40,859
is also a problem it's a it's a long

1588
01:09:40,859 --> 01:09:43,319
operation it works on on secret

1589
01:09:43,319 --> 01:09:45,420
dependent data and then also we have to

1590
01:09:45,420 --> 01:09:47,219
we have to mask or we have to somehow

1591
01:09:47,219 --> 01:09:49,738
protect binomial sampling hashing Mass

1592
01:09:49,738 --> 01:09:51,899
comparison so a lot of operations that

1593
01:09:51,899 --> 01:09:54,600
are really non-linear and that are ugly

1594
01:09:54,600 --> 01:09:55,860
you know usually

1595
01:09:55,860 --> 01:09:57,900
at least the beauty of elliptic curves

1596
01:09:57,900 --> 01:09:59,460
is that you have a lot of structure a

1597
01:09:59,460 --> 01:10:01,920
lot of arithmetic structure you can use

1598
01:10:01,920 --> 01:10:04,980
to protect the schemes while in in the

1599
01:10:04,980 --> 01:10:07,140
letterspace cams we have a lot of

1600
01:10:07,140 --> 01:10:09,480
arithmetic then some hashing non-linear

1601
01:10:09,480 --> 01:10:11,460
operations arithmetic again and then

1602
01:10:11,460 --> 01:10:14,040
building nice nice protection schemes on

1603
01:10:14,040 --> 01:10:15,540
top of that is very hard because you're

1604
01:10:15,540 --> 01:10:18,900
Crossing these boundaries a lot and um

1605
01:10:18,900 --> 01:10:21,659
in in our construction we now move from

1606
01:10:21,659 --> 01:10:23,520
a true pass protocol to a four pass

1607
01:10:23,520 --> 01:10:25,140
protocol

1608
01:10:25,140 --> 01:10:27,659
um and what we're doing is we reduce the

1609
01:10:27,659 --> 01:10:31,140
the normal challenge computation using a

1610
01:10:31,140 --> 01:10:33,540
an encryption scheme

1611
01:10:33,540 --> 01:10:36,480
um but yeah so we are sampling some some

1612
01:10:36,480 --> 01:10:38,940
Randomness then we use this Randomness

1613
01:10:38,940 --> 01:10:40,739
to extract a message and some random

1614
01:10:40,739 --> 01:10:42,360
coins for the encryption and then we

1615
01:10:42,360 --> 01:10:44,040
feed in the public key the message and

1616
01:10:44,040 --> 01:10:46,080
the coins into the encryption scheme we

1617
01:10:46,080 --> 01:10:48,120
sent over the ciphertext and then we

1618
01:10:48,120 --> 01:10:50,280
have this usual response computation so

1619
01:10:50,280 --> 01:10:53,520
we we store the ciphertext we decrypt

1620
01:10:53,520 --> 01:10:56,940
the message and then instead of sending

1621
01:10:56,940 --> 01:10:59,400
back the message already we are sampling

1622
01:10:59,400 --> 01:11:01,920
a random a random value and we're

1623
01:11:01,920 --> 01:11:03,659
putting the random value and the message

1624
01:11:03,659 --> 01:11:06,239
into a hash function and we we derive a

1625
01:11:06,239 --> 01:11:08,880
value H and we send over this age

1626
01:11:08,880 --> 01:11:10,679
to the

1627
01:11:10,679 --> 01:11:12,600
um

1628
01:11:12,600 --> 01:11:14,820
to the verifier

1629
01:11:14,820 --> 01:11:17,040
so the private prover decrypts a

1630
01:11:17,040 --> 01:11:18,600
challenge and commits to the response

1631
01:11:18,600 --> 01:11:20,340
but it doesn't provide it so at this

1632
01:11:20,340 --> 01:11:23,100
point in time if you've if the if the if

1633
01:11:23,100 --> 01:11:24,780
the prover has sent a malicious Cipher

1634
01:11:24,780 --> 01:11:27,420
text okay well we have decrypted it we

1635
01:11:27,420 --> 01:11:29,580
know how to protect this decryption

1636
01:11:29,580 --> 01:11:31,739
um but you can't learn learn anything

1637
01:11:31,739 --> 01:11:34,920
from this age here right now and what we

1638
01:11:34,920 --> 01:11:36,960
then do is what the approver is then

1639
01:11:36,960 --> 01:11:39,420
doing the approver is um you know the

1640
01:11:39,420 --> 01:11:41,520
the verifiers then opening up its

1641
01:11:41,520 --> 01:11:42,840
Randomness so it's sending over the

1642
01:11:42,840 --> 01:11:45,840
Lambda and this allows um this allows

1643
01:11:45,840 --> 01:11:48,840
the challenge verification to recompute

1644
01:11:48,840 --> 01:11:50,219
the ciphertext

1645
01:11:50,219 --> 01:11:53,219
and with this recomputation we can check

1646
01:11:53,219 --> 01:11:55,320
that the ciphertext was honestly

1647
01:11:55,320 --> 01:11:58,920
generated and this um uh yeah then

1648
01:11:58,920 --> 01:12:01,380
afterwards we compare the the ciphertext

1649
01:12:01,380 --> 01:12:02,340
we've computed doing challenge

1650
01:12:02,340 --> 01:12:04,380
verification with the ciphertext we've

1651
01:12:04,380 --> 01:12:06,239
received at the start of the protocol

1652
01:12:06,239 --> 01:12:09,000
and if they don't match we return we are

1653
01:12:09,000 --> 01:12:10,500
not returning anything because we don't

1654
01:12:10,500 --> 01:12:12,719
want to reveal info in information that

1655
01:12:12,719 --> 01:12:15,120
depend on the secret key otherwise we

1656
01:12:15,120 --> 01:12:17,040
are returning we could either return the

1657
01:12:17,040 --> 01:12:19,020
message itself what we're doing here is

1658
01:12:19,020 --> 01:12:21,060
we're returning just the randomness and

1659
01:12:21,060 --> 01:12:24,480
then during during response verification

1660
01:12:24,480 --> 01:12:25,199
um

1661
01:12:25,199 --> 01:12:27,780
uh the verifier can just

1662
01:12:27,780 --> 01:12:29,940
um also do this this computation of the

1663
01:12:29,940 --> 01:12:32,040
ash of the hash with the randomness the

1664
01:12:32,040 --> 01:12:34,620
message and check if the if the computed

1665
01:12:34,620 --> 01:12:37,679
H Prime matches the the H that was sent

1666
01:12:37,679 --> 01:12:40,699
over before

1667
01:12:41,699 --> 01:12:45,060
and um and then the question is is this

1668
01:12:45,060 --> 01:12:47,100
really uh yeah is this something that

1669
01:12:47,100 --> 01:12:48,840
works well and for this we did an

1670
01:12:48,840 --> 01:12:51,600
implementation based on kyber

1671
01:12:51,600 --> 01:12:54,060
um we have different experiments and

1672
01:12:54,060 --> 01:12:55,739
different implementations because for

1673
01:12:55,739 --> 01:12:58,380
for an implementation of course we could

1674
01:12:58,380 --> 01:13:00,120
use either the reference code or

1675
01:13:00,120 --> 01:13:01,679
something more optimized and we've done

1676
01:13:01,679 --> 01:13:04,199
both so our implementation is done on

1677
01:13:04,199 --> 01:13:07,020
cortex M4 using either picoclean or Pico

1678
01:13:07,020 --> 01:13:12,000
M4 with the MF M4 F speed variant so so

1679
01:13:12,000 --> 01:13:14,520
the cortex M4 this is a microcontroller

1680
01:13:14,520 --> 01:13:15,960
that is very common is also the

1681
01:13:15,960 --> 01:13:17,780
reference platform that missed

1682
01:13:17,780 --> 01:13:20,100
designated as the platform for the

1683
01:13:20,100 --> 01:13:21,840
evaluation of post Quantum cryptography

1684
01:13:21,840 --> 01:13:23,880
on an embedded device

1685
01:13:23,880 --> 01:13:25,500
um this could be yeah

1686
01:13:25,500 --> 01:13:27,960
small microcontroller controlling some

1687
01:13:27,960 --> 01:13:30,199
some machine it could also be

1688
01:13:30,199 --> 01:13:33,540
a smart card or an authentication chip

1689
01:13:33,540 --> 01:13:36,540
that is preventing counterfeit

1690
01:13:36,540 --> 01:13:37,920
um of course there are also different

1691
01:13:37,920 --> 01:13:39,239
microcontrollers with different

1692
01:13:39,239 --> 01:13:41,219
properties but I would argue that this

1693
01:13:41,219 --> 01:13:43,199
gives a good Baseline indication about

1694
01:13:43,199 --> 01:13:45,540
the performance of the scheme

1695
01:13:45,540 --> 01:13:47,219
um what we're used to instantiate is

1696
01:13:47,219 --> 01:13:51,920
kyber 768 so the kind of uh

1697
01:13:51,920 --> 01:13:55,260
what's at least this level three

1698
01:13:55,260 --> 01:13:57,900
um scheme um for measurement

1699
01:13:57,900 --> 01:13:59,219
um

1700
01:13:59,219 --> 01:14:01,560
one word of caution so we are comparing

1701
01:14:01,560 --> 01:14:03,380
here non-mask versus

1702
01:14:03,380 --> 01:14:06,480
mask implementations but in practice

1703
01:14:06,480 --> 01:14:08,280
this is not sufficient so there are also

1704
01:14:08,280 --> 01:14:09,840
other attacks for the tech templates

1705
01:14:09,840 --> 01:14:11,820
attacks so I wouldn't argue that this is

1706
01:14:11,820 --> 01:14:13,679
a secure implementation I just I would

1707
01:14:13,679 --> 01:14:15,420
argue that this is a mask implementation

1708
01:14:15,420 --> 01:14:17,640
or mask at a certain order

1709
01:14:17,640 --> 01:14:20,280
um for a secure implementation in the

1710
01:14:20,280 --> 01:14:22,980
sensor is protected against all attacks

1711
01:14:22,980 --> 01:14:24,900
that are usually in scope you would have

1712
01:14:24,900 --> 01:14:26,460
to do a bit more

1713
01:14:26,460 --> 01:14:27,900
um but of course it would this would

1714
01:14:27,900 --> 01:14:30,300
also skew the evaluation

1715
01:14:30,300 --> 01:14:31,620
and then when looking at this

1716
01:14:31,620 --> 01:14:35,040
implementations you can see that our

1717
01:14:35,040 --> 01:14:36,420
protocol

1718
01:14:36,420 --> 01:14:40,380
on a cortex M4 and just using uh kyber

1719
01:14:40,380 --> 01:14:42,540
in ccas and ID scheme doesn't really

1720
01:14:42,540 --> 01:14:43,739
change much

1721
01:14:43,739 --> 01:14:46,560
so there's not really much saving some

1722
01:14:46,560 --> 01:14:48,480
savings I think are here because we use

1723
01:14:48,480 --> 01:14:51,420
less less hashing but on the other hand

1724
01:14:51,420 --> 01:14:53,340
we also have we're also moving from a

1725
01:14:53,340 --> 01:14:55,260
two pass to a four path protocol which

1726
01:14:55,260 --> 01:14:58,020
itself is also a downside so if you're

1727
01:14:58,020 --> 01:14:59,699
not considering side Channel attacks

1728
01:14:59,699 --> 01:15:01,739
then you're probably well off using just

1729
01:15:01,739 --> 01:15:06,239
kyber the the classical kyber and CCA

1730
01:15:06,239 --> 01:15:08,880
um this is also some data why is the

1731
01:15:08,880 --> 01:15:12,420
lithium the lithium expensive so these

1732
01:15:12,420 --> 01:15:13,980
are the cycle counts for the proof and

1733
01:15:13,980 --> 01:15:15,480
the verifier and here you can see that

1734
01:15:15,480 --> 01:15:16,920
it's almost a factor of 10 more

1735
01:15:16,920 --> 01:15:18,540
expensive for the approver to computer

1736
01:15:18,540 --> 01:15:21,300
to compute a signature

1737
01:15:21,300 --> 01:15:22,440
um and then

1738
01:15:22,440 --> 01:15:24,900
um of course we could use the the kyber

1739
01:15:24,900 --> 01:15:28,140
768 CPA secured scheme but yeah I said

1740
01:15:28,140 --> 01:15:30,420
it's not it's not secure

1741
01:15:30,420 --> 01:15:32,100
um it's really fast

1742
01:15:32,100 --> 01:15:35,100
um but again um yeah there's the the

1743
01:15:35,100 --> 01:15:39,060
time for the re-encryption is is missing

1744
01:15:39,060 --> 01:15:41,940
um and um now the question is how does

1745
01:15:41,940 --> 01:15:43,980
it work or what's the advantage when

1746
01:15:43,980 --> 01:15:46,260
looking into search General protection

1747
01:15:46,260 --> 01:15:48,060
um what we've done is we've implemented

1748
01:15:48,060 --> 01:15:50,400
the schema set with no protection but

1749
01:15:50,400 --> 01:15:52,080
and then also with an open source

1750
01:15:52,080 --> 01:15:54,900
implementation that can do based on an

1751
01:15:54,900 --> 01:15:57,360
open source implementation of kyber 768

1752
01:15:57,360 --> 01:16:00,600
that is protected to the first order and

1753
01:16:00,600 --> 01:16:03,360
then we also use we extrapolate the the

1754
01:16:03,360 --> 01:16:05,340
cycle counts from from a published

1755
01:16:05,340 --> 01:16:06,900
implementation where the source code is

1756
01:16:06,900 --> 01:16:09,360
not available to get some data for the

1757
01:16:09,360 --> 01:16:11,159
second and third order these are then

1758
01:16:11,159 --> 01:16:13,260
approximate speed UPS

1759
01:16:13,260 --> 01:16:14,219
um

1760
01:16:14,219 --> 01:16:16,679
but of course in practice I wouldn't

1761
01:16:16,679 --> 01:16:19,500
chase the last hundred Cycles when

1762
01:16:19,500 --> 01:16:21,000
looking at this so this is just to give

1763
01:16:21,000 --> 01:16:23,280
a rough overview on the performance and

1764
01:16:23,280 --> 01:16:25,980
what we can see is when when we compare

1765
01:16:25,980 --> 01:16:28,679
our protocol to the

1766
01:16:28,679 --> 01:16:31,860
um to the uh to a mast first order kyber

1767
01:16:31,860 --> 01:16:34,620
768 then we can already see a speed of

1768
01:16:34,620 --> 01:16:37,440
of roughly three and this is exactly due

1769
01:16:37,440 --> 01:16:39,480
to the to the um

1770
01:16:39,480 --> 01:16:42,840
to the uh I mean the the performance hit

1771
01:16:42,840 --> 01:16:45,900
for kyber this is due to the um to the

1772
01:16:45,900 --> 01:16:48,540
cost for masking the re-encryption we of

1773
01:16:48,540 --> 01:16:50,100
course also have to protect our secret

1774
01:16:50,100 --> 01:16:53,400
key decryption operation as kyber also

1775
01:16:53,400 --> 01:16:55,260
has to do but I said this is much

1776
01:16:55,260 --> 01:16:57,179
cheaper and then when going to higher

1777
01:16:57,179 --> 01:16:59,340
orders the speed up becomes even even

1778
01:16:59,340 --> 01:17:01,920
larger so when looking into into second

1779
01:17:01,920 --> 01:17:03,960
order masking then we have a speed up of

1780
01:17:03,960 --> 01:17:07,500
roughly 8.5 and then third order nine

1781
01:17:07,500 --> 01:17:10,560
point uh nine point something

1782
01:17:10,560 --> 01:17:13,560
um so a significant speed up

1783
01:17:13,560 --> 01:17:16,020
um and yeah this is basically due to the

1784
01:17:16,020 --> 01:17:17,580
fact that in our scheme there's just

1785
01:17:17,580 --> 01:17:19,260
less code that we have to protect while

1786
01:17:19,260 --> 01:17:21,600
in in the classical kyber there's much

1787
01:17:21,600 --> 01:17:24,320
more to protect

1788
01:17:24,480 --> 01:17:27,600
and then um yeah in conclusion uh what

1789
01:17:27,600 --> 01:17:30,300
we did we gave an approach to use Kaiba

1790
01:17:30,300 --> 01:17:32,460
in an ID Authentication Protocol in a

1791
01:17:32,460 --> 01:17:34,020
practical setting they're of course

1792
01:17:34,020 --> 01:17:36,300
interesting trade-offs involved because

1793
01:17:36,300 --> 01:17:36,960
um

1794
01:17:36,960 --> 01:17:39,540
is it worth to move from a two pass to a

1795
01:17:39,540 --> 01:17:41,880
four pass protocol just to save maybe

1796
01:17:41,880 --> 01:17:45,000
cost for side Channel hardening

1797
01:17:45,000 --> 01:17:46,500
um this is open and this of course

1798
01:17:46,500 --> 01:17:48,840
depends also on on other maybe system

1799
01:17:48,840 --> 01:17:52,080
considerations how complex it is and

1800
01:17:52,080 --> 01:17:54,420
then also the the next question is maybe

1801
01:17:54,420 --> 01:17:56,820
maybe this move to a four pass is not

1802
01:17:56,820 --> 01:17:59,760
necessary if the community is getting

1803
01:17:59,760 --> 01:18:01,560
better in protecting instantiations of

1804
01:18:01,560 --> 01:18:03,780
kyber against such an attacks

1805
01:18:03,780 --> 01:18:05,760
um of course it could be worthwhile if

1806
01:18:05,760 --> 01:18:07,380
the community is also getting better in

1807
01:18:07,380 --> 01:18:09,480
providing a tax against kaiva so it

1808
01:18:09,480 --> 01:18:11,280
really depends on this comparison and

1809
01:18:11,280 --> 01:18:13,380
and the savings

1810
01:18:13,380 --> 01:18:15,960
um that that you can achieve and um yeah

1811
01:18:15,960 --> 01:18:17,219
with this

1812
01:18:17,219 --> 01:18:19,860
um I can I would only I would like to

1813
01:18:19,860 --> 01:18:21,620
refer to the to the details in the paper

1814
01:18:21,620 --> 01:18:24,239
there's also a bit of advertisement here

1815
01:18:24,239 --> 01:18:27,060
for a personal project which is a gpt2

1816
01:18:27,060 --> 01:18:29,280
based paper abstract generator trained

1817
01:18:29,280 --> 01:18:31,080
on ePrint

1818
01:18:31,080 --> 01:18:33,239
um try it off it out if you want to um

1819
01:18:33,239 --> 01:18:35,400
but it's Tech from like ancient Tech

1820
01:18:35,400 --> 01:18:37,980
with the recent advances

1821
01:18:37,980 --> 01:18:40,860
but anyways and yeah with this um thank

1822
01:18:40,860 --> 01:18:42,840
you for your attention and I'm happy to

1823
01:18:42,840 --> 01:18:45,260
answer questions

1824
01:18:48,780 --> 01:18:52,759
so we have a few minutes for questions

1825
01:18:53,940 --> 01:18:55,739
I have a question

1826
01:18:55,739 --> 01:18:58,380
um so the the four pass uh protocol that

1827
01:18:58,380 --> 01:19:00,960
you have what what's the connection or

1828
01:19:00,960 --> 01:19:02,640
is there any relationship between the

1829
01:19:02,640 --> 01:19:05,520
structure of that protocol and uh the

1830
01:19:05,520 --> 01:19:08,460
hopper Blum or or Jules Weiss uh if

1831
01:19:08,460 --> 01:19:09,960
you're familiar with these those are

1832
01:19:09,960 --> 01:19:11,880
based on learning parity with noise and

1833
01:19:11,880 --> 01:19:13,980
they have I think they're also four pass

1834
01:19:13,980 --> 01:19:16,260
so I'm interested if you have any uh

1835
01:19:16,260 --> 01:19:20,239
unfortunately I I'm not qualified

1836
01:19:20,760 --> 01:19:22,800
yeah

1837
01:19:22,800 --> 01:19:25,580
um other questions

1838
01:19:28,140 --> 01:19:31,980
uh hello I have questions so if we

1839
01:19:31,980 --> 01:19:34,580
reduce the protocol from four parts to

1840
01:19:34,580 --> 01:19:37,679
uh three paths for example so what will

1841
01:19:37,679 --> 01:19:41,820
happen for example if we just erase the

1842
01:19:41,820 --> 01:19:45,420
last round what will happen uh yeah I

1843
01:19:45,420 --> 01:19:49,020
just curious about this question

1844
01:19:49,020 --> 01:19:51,600
so so you mean if we would just not do

1845
01:19:51,600 --> 01:19:54,260
this yes for example

1846
01:19:54,260 --> 01:19:58,560
then then the verifier wouldn't get any

1847
01:19:58,560 --> 01:20:00,120
Assurance about the Identity or

1848
01:20:00,120 --> 01:20:02,820
authenticity of this part so so it can

1849
01:20:02,820 --> 01:20:04,800
achieve uh

1850
01:20:04,800 --> 01:20:06,960
single single party authentic

1851
01:20:06,960 --> 01:20:10,320
authentication and is there any security

1852
01:20:10,320 --> 01:20:12,860
issues

1853
01:20:13,699 --> 01:20:17,159
I think you learn nothing in the end if

1854
01:20:17,159 --> 01:20:19,759
you would do that

1855
01:20:19,860 --> 01:20:23,100
what would you gain uh

1856
01:20:23,100 --> 01:20:26,400
yeah since I I think from two parts to

1857
01:20:26,400 --> 01:20:29,159
four paths is uh

1858
01:20:29,159 --> 01:20:32,820
you you know you it it has the wrong

1859
01:20:32,820 --> 01:20:34,699
complexity

1860
01:20:34,699 --> 01:20:37,920
so maybe

1861
01:20:37,920 --> 01:20:40,380
more more secure I'm not sure enough

1862
01:20:40,380 --> 01:20:42,960
yeah of course of course if if we can

1863
01:20:42,960 --> 01:20:45,000
remove one of the passes I think that

1864
01:20:45,000 --> 01:20:47,159
would help I just I mean would be

1865
01:20:47,159 --> 01:20:49,080
interesting to see if this is possible I

1866
01:20:49,080 --> 01:20:50,159
don't know

1867
01:20:50,159 --> 01:20:54,139
okay I know okay thank you

1868
01:20:58,020 --> 01:21:00,920
any other questions

1869
01:21:01,739 --> 01:21:04,199
uh good we're at time so let's thank

1870
01:21:04,199 --> 01:21:06,980
Thomas again

1871
01:21:11,760 --> 01:21:14,760
oops

1872
01:21:18,540 --> 01:21:21,540
foreign

1873
01:21:22,320 --> 01:21:26,040
so our last uh talk of the session is

1874
01:21:26,040 --> 01:21:27,600
entitled polka

1875
01:21:27,600 --> 01:21:29,880
towards leakage resistant post Quantum

1876
01:21:29,880 --> 01:21:32,400
CCA Secure Public key encryption

1877
01:21:32,400 --> 01:21:36,000
and the papers by Clement Hoffman Benoit

1878
01:21:36,000 --> 01:21:36,900
Liber

1879
01:21:36,900 --> 01:21:38,820
Charles Momin

1880
01:21:38,820 --> 01:21:43,440
Thomas Petersburg standards right and

1881
01:21:43,440 --> 01:21:47,159
clemont is the speaker

1882
01:21:47,159 --> 01:21:49,020
it's number 94. do we have enough oh

1883
01:21:49,020 --> 01:21:51,480
great all right the floor is yours

1884
01:21:51,480 --> 01:21:54,480
hello everyone uh so thank you for

1885
01:21:54,480 --> 01:21:58,580
attending this last talk position

1886
01:21:58,580 --> 01:22:01,320
uh this talk will be about basically

1887
01:22:01,320 --> 01:22:04,560
designing a CCA encryption scheme latest

1888
01:22:04,560 --> 01:22:06,960
based that is efficient to protect

1889
01:22:06,960 --> 01:22:09,659
against state general attacks so what's

1890
01:22:09,659 --> 01:22:11,580
going on with post Quantum cryptographic

1891
01:22:11,580 --> 01:22:13,199
General attacks you may have seen this

1892
01:22:13,199 --> 01:22:15,179
have been plenty of attacks sometimes

1893
01:22:15,179 --> 01:22:17,520
against generic against lattice based

1894
01:22:17,520 --> 01:22:19,980
schemes sometimes against number

1895
01:22:19,980 --> 01:22:21,780
theoretic transform against your

1896
01:22:21,780 --> 01:22:23,219
chemical transform

1897
01:22:23,219 --> 01:22:26,280
and the outline is the Contour measures

1898
01:22:26,280 --> 01:22:29,340
are expensive and this is because those

1899
01:22:29,340 --> 01:22:32,460
schemes were not designed with such

1900
01:22:32,460 --> 01:22:35,520
General attacks in the first place like

1901
01:22:35,520 --> 01:22:38,460
it was not taken into account when

1902
01:22:38,460 --> 01:22:41,100
designing the scheme so a little bit of

1903
01:22:41,100 --> 01:22:42,960
background without General attacks I

1904
01:22:42,960 --> 01:22:44,219
don't know if you're all familiar with

1905
01:22:44,219 --> 01:22:46,260
that but most of the time we're working

1906
01:22:46,260 --> 01:22:49,320
in a black box framework we consider the

1907
01:22:49,320 --> 01:22:52,380
algorithm is a black box an address so

1908
01:22:52,380 --> 01:22:54,900
we can only see the input the output

1909
01:22:54,900 --> 01:22:56,640
but if at some point you want to

1910
01:22:56,640 --> 01:22:58,739
implement your scheme and you want it to

1911
01:22:58,739 --> 01:23:02,400
run in real life it will run on a

1912
01:23:02,400 --> 01:23:04,380
physical device like a physical

1913
01:23:04,380 --> 01:23:06,060
processor

1914
01:23:06,060 --> 01:23:07,679
and

1915
01:23:07,679 --> 01:23:09,540
it means that this processor will have

1916
01:23:09,540 --> 01:23:11,340
some physical emissions like for

1917
01:23:11,340 --> 01:23:13,080
instance it's per consumption it's

1918
01:23:13,080 --> 01:23:15,480
electromagnetic fields set an adversary

1919
01:23:15,480 --> 01:23:17,840
will be able to exploit 12 information

1920
01:23:17,840 --> 01:23:20,699
about some values that are handled by

1921
01:23:20,699 --> 01:23:23,760
the processor so basically we can

1922
01:23:23,760 --> 01:23:26,520
consider that an address where we get

1923
01:23:26,520 --> 01:23:27,780
some information about every

1924
01:23:27,780 --> 01:23:30,060
intermittent values and if at some point

1925
01:23:30,060 --> 01:23:32,219
it gets enough information you can get

1926
01:23:32,219 --> 01:23:33,480
back this value let's say it's the

1927
01:23:33,480 --> 01:23:35,460
secret key for instance

1928
01:23:35,460 --> 01:23:38,040
we do not need to get into too much

1929
01:23:38,040 --> 01:23:40,380
detail but let's just highlight that

1930
01:23:40,380 --> 01:23:43,140
there are some different level of search

1931
01:23:43,140 --> 01:23:46,860
General attacks so some categories are

1932
01:23:46,860 --> 01:23:48,600
for instance a simple power analysis

1933
01:23:48,600 --> 01:23:51,719
this one can be used basically anywhere

1934
01:23:51,719 --> 01:23:53,940
it only requires a few trays so it can

1935
01:23:53,940 --> 01:23:56,640
Target some ephemeral secrets

1936
01:23:56,640 --> 01:24:01,020
but it's not too powerful so it's not

1937
01:24:01,020 --> 01:24:02,719
too expensive to protect against

1938
01:24:02,719 --> 01:24:04,920
differential power analysis for instance

1939
01:24:04,920 --> 01:24:07,679
on the contrary they require a large

1940
01:24:07,679 --> 01:24:09,540
amount of Trace so they can only target

1941
01:24:09,540 --> 01:24:12,120
long-term secrets that will be used in

1942
01:24:12,120 --> 01:24:13,620
many executions

1943
01:24:13,620 --> 01:24:15,719
but since they are more powerful it's

1944
01:24:15,719 --> 01:24:18,540
more expensive to protect against them

1945
01:24:18,540 --> 01:24:20,400
if we look at what happened with

1946
01:24:20,400 --> 01:24:23,280
symmetry crypto 20 years ago at the

1947
01:24:23,280 --> 01:24:26,120
beginning of the channel attacks

1948
01:24:26,120 --> 01:24:29,880
people took the schemes they had so

1949
01:24:29,880 --> 01:24:32,340
basically a yes and said okay okay can

1950
01:24:32,340 --> 01:24:34,920
we make this protected against a channel

1951
01:24:34,920 --> 01:24:39,239
and the answer was we need so so strong

1952
01:24:39,239 --> 01:24:43,040
attacks apply everywhere because I guess

1953
01:24:43,040 --> 01:24:46,020
was not made to be secured against such

1954
01:24:46,020 --> 01:24:47,100
Analytics

1955
01:24:47,100 --> 01:24:49,260
so the strong attacks the plane if it

1956
01:24:49,260 --> 01:24:51,120
was a solution was to have strong

1957
01:24:51,120 --> 01:24:52,620
control measure everywhere which is

1958
01:24:52,620 --> 01:24:55,980
expensive nowadays we can have some

1959
01:24:55,980 --> 01:24:58,679
schemes that we have a strong quarter

1960
01:24:58,679 --> 01:25:02,340
mature only needs to be on one part of

1961
01:25:02,340 --> 01:25:05,400
the scheme and the other so the green

1962
01:25:05,400 --> 01:25:08,940
Parts only requires some later

1963
01:25:08,940 --> 01:25:10,460
contaminations

1964
01:25:10,460 --> 01:25:14,580
and this is basically the kind of result

1965
01:25:14,580 --> 01:25:16,320
we want to have for post Quantum

1966
01:25:16,320 --> 01:25:18,659
cryptography we want to design a scheme

1967
01:25:18,659 --> 01:25:21,600
that will be a little bit less efficient

1968
01:25:21,600 --> 01:25:23,580
such a standard let's say kyber for

1969
01:25:23,580 --> 01:25:25,260
instance in an unprotected

1970
01:25:25,260 --> 01:25:28,620
implementation but which will get which

1971
01:25:28,620 --> 01:25:31,140
will be cheaper to protect and we which

1972
01:25:31,140 --> 01:25:33,780
will become more efficient with security

1973
01:25:33,780 --> 01:25:36,000
against each other going up

1974
01:25:36,000 --> 01:25:39,480
so leveling approach can be

1975
01:25:39,480 --> 01:25:41,820
you can have huge factor of gain because

1976
01:25:41,820 --> 01:25:43,040
the

1977
01:25:43,040 --> 01:25:46,199
more secure you want your implementation

1978
01:25:46,199 --> 01:25:48,980
so Biggers again will be

1979
01:25:48,980 --> 01:25:51,840
let's start with an example so it was

1980
01:25:51,840 --> 01:25:53,520
already introduced in the previous talk

1981
01:25:53,520 --> 01:25:55,639
so

1982
01:25:55,639 --> 01:25:58,260
we have the same issue with the photon

1983
01:25:58,260 --> 01:26:03,020
form basically fo transform is used to

1984
01:26:03,020 --> 01:26:07,940
Grant the CCA property from a CPA scheme

1985
01:26:07,940 --> 01:26:10,520
by re-encrypting

1986
01:26:10,520 --> 01:26:13,020
after your decryption you re-encrypt the

1987
01:26:13,020 --> 01:26:14,820
plain text you got in order to check

1988
01:26:14,820 --> 01:26:16,739
that if the safer text was valid so in

1989
01:26:16,739 --> 01:26:18,480
the Black Box framework

1990
01:26:18,480 --> 01:26:21,719
uh it stops IT rejects the invalid

1991
01:26:21,719 --> 01:26:24,000
Cipher text preventing an adversary to

1992
01:26:24,000 --> 01:26:28,560
to get information with this but

1993
01:26:28,560 --> 01:26:31,100
in a side Channel framework

1994
01:26:31,100 --> 01:26:34,080
you can do so that the plain text which

1995
01:26:34,080 --> 01:26:37,020
is the output of the CPA decryption is

1996
01:26:37,020 --> 01:26:39,179
super key dependent let's say it's one

1997
01:26:39,179 --> 01:26:42,179
bit of the key to to make it simple and

1998
01:26:42,179 --> 01:26:44,520
then this one bit of the key will be

1999
01:26:44,520 --> 01:26:46,139
re-encrypted so you just have to

2000
01:26:46,139 --> 01:26:48,120
distinguish if the speed was zero or if

2001
01:26:48,120 --> 01:26:50,840
this bit was one so this is like

2002
01:26:50,840 --> 01:26:54,179
extremely easy so it leads to an attack

2003
01:26:54,179 --> 01:26:56,460
that is super powerful so super

2004
01:26:56,460 --> 01:27:00,120
expensive to protect against

2005
01:27:00,120 --> 01:27:02,520
so this is a feature you don't really

2006
01:27:02,520 --> 01:27:03,300
want

2007
01:27:03,300 --> 01:27:05,580
against such an attacks if you if you're

2008
01:27:05,580 --> 01:27:08,940
able to design your scheme with that in

2009
01:27:08,940 --> 01:27:10,500
mind in the first place you will try to

2010
01:27:10,500 --> 01:27:14,400
avoid so full okay motor transform

2011
01:27:14,400 --> 01:27:17,400
so what we provide is the CCA latest

2012
01:27:17,400 --> 01:27:20,040
based encryption scheme that relies on a

2013
01:27:20,040 --> 01:27:22,980
classical assumption lwe that is

2014
01:27:22,980 --> 01:27:25,620
relatively efficient the same order of

2015
01:27:25,620 --> 01:27:28,320
magnitude as this cable and that is

2016
01:27:28,320 --> 01:27:33,799
proven secured in the classical models

2017
01:27:33,960 --> 01:27:36,960
um our main contribution is that it is

2018
01:27:36,960 --> 01:27:38,940
much cheaper to put things against a

2019
01:27:38,940 --> 01:27:40,199
channel attacks

2020
01:27:40,199 --> 01:27:43,620
and we get that with several tricks that

2021
01:27:43,620 --> 01:27:46,080
they will present so getting rid of the

2022
01:27:46,080 --> 01:27:48,679
effort transform using some tweaks to

2023
01:27:48,679 --> 01:27:51,179
randomize the intermediate values and so

2024
01:27:51,179 --> 01:27:52,739
on and so on

2025
01:27:52,739 --> 01:27:56,159
so the outline of the scheme is it's a

2026
01:27:56,159 --> 01:27:59,820
classic lpr-based scheme so you have lwe

2027
01:27:59,820 --> 01:28:01,159
ciphertext

2028
01:28:01,159 --> 01:28:04,020
classical with A and B being the public

2029
01:28:04,020 --> 01:28:07,020
key uh the errors the random coins being

2030
01:28:07,020 --> 01:28:08,400
small

2031
01:28:08,400 --> 01:28:12,360
and you combine you use this to derive a

2032
01:28:12,360 --> 01:28:14,060
symmetry key

2033
01:28:14,060 --> 01:28:16,800
and to perform an authenticated

2034
01:28:16,800 --> 01:28:20,460
encryption scheme for instance ascon

2035
01:28:20,460 --> 01:28:23,820
um so this is our encryption in order to

2036
01:28:23,820 --> 01:28:25,800
decrypt this we need to be able to

2037
01:28:25,800 --> 01:28:28,560
retrieve the Symmetry key so basically

2038
01:28:28,560 --> 01:28:30,960
we need in the postmodern part we need

2039
01:28:30,960 --> 01:28:33,719
to be able to retrieve one of the r from

2040
01:28:33,719 --> 01:28:36,060
CCR we will be able to get all the

2041
01:28:36,060 --> 01:28:38,460
random coins and send the equipment for

2042
01:28:38,460 --> 01:28:40,100
the rest of the presentation

2043
01:28:40,100 --> 01:28:43,620
I will only focus on the decryption what

2044
01:28:43,620 --> 01:28:45,300
is the decryption because it's the

2045
01:28:45,300 --> 01:28:47,159
operations that use the long-term

2046
01:28:47,159 --> 01:28:50,880
secrets and in the first time we only

2047
01:28:50,880 --> 01:28:53,580
consider the security for the long-term

2048
01:28:53,580 --> 01:28:55,380
sequence against the general attack so

2049
01:28:55,380 --> 01:28:57,239
it's a little bit disappointing

2050
01:28:57,239 --> 01:29:00,239
we also want message confidentiality

2051
01:29:00,239 --> 01:29:02,699
but you have to start somewhere

2052
01:29:02,699 --> 01:29:06,120
how do you decrypt you you introduce an

2053
01:29:06,120 --> 01:29:07,800
intermediate modulus so it's a value

2054
01:29:07,800 --> 01:29:10,739
that is bigger than the coefficient of

2055
01:29:10,739 --> 01:29:13,980
the error but it's still smaller than

2056
01:29:13,980 --> 01:29:16,440
the modulus with this intermediate

2057
01:29:16,440 --> 01:29:18,960
modules and your public keys that are

2058
01:29:18,960 --> 01:29:22,739
built a good way you can get back E2

2059
01:29:22,739 --> 01:29:25,199
then as an E1

2060
01:29:25,199 --> 01:29:27,420
when you get back this value you check

2061
01:29:27,420 --> 01:29:28,440
the numbers

2062
01:29:28,440 --> 01:29:31,800
and with that you can see if they are

2063
01:29:31,800 --> 01:29:33,840
small and if the safer text was valid in

2064
01:29:33,840 --> 01:29:34,920
the first place

2065
01:29:34,920 --> 01:29:37,440
but when you do that you do explicit

2066
01:29:37,440 --> 01:29:40,800
rejection you check the Norms if it's

2067
01:29:40,800 --> 01:29:43,199
too big then you reject you don't need

2068
01:29:43,199 --> 01:29:46,560
to re-encrypt as in fo

2069
01:29:46,560 --> 01:29:48,900
cus this need to be combined with a

2070
01:29:48,900 --> 01:29:51,780
symmetric part you cannot use like only

2071
01:29:51,780 --> 01:29:54,420
these parts as key encryption key

2072
01:29:54,420 --> 01:29:56,219
encapsulation mechanism if you do that

2073
01:29:56,219 --> 01:29:58,739
it would it won't be CCA

2074
01:29:58,739 --> 01:30:01,139
okay so now we got rid of the

2075
01:30:01,139 --> 01:30:02,820
distinguishing attack that was super

2076
01:30:02,820 --> 01:30:04,620
full super expensive to protect against

2077
01:30:04,620 --> 01:30:08,219
but we still see here a DPA attack path

2078
01:30:08,219 --> 01:30:10,980
because we perform directly a

2079
01:30:10,980 --> 01:30:12,719
multiplication between the circuit key

2080
01:30:12,719 --> 01:30:14,880
and the safer text the safer text that

2081
01:30:14,880 --> 01:30:16,800
can be controlled by the adversary in

2082
01:30:16,800 --> 01:30:18,360
the CCA game

2083
01:30:18,360 --> 01:30:21,780
so now we want to get rid of that

2084
01:30:21,780 --> 01:30:24,659
for that we use the homomorphic

2085
01:30:24,659 --> 01:30:29,159
additivity of lwe the ID is that we can

2086
01:30:29,159 --> 01:30:31,739
randomize the social text we generate

2087
01:30:31,739 --> 01:30:34,320
the missile for text so touches

2088
01:30:34,320 --> 01:30:38,280
generated as regular ones with some

2089
01:30:38,280 --> 01:30:41,900
the regular antonyms so we get new

2090
01:30:41,900 --> 01:30:46,580
ciphertexts that are totally randoms

2091
01:30:47,480 --> 01:30:50,460
then we perform all of our decryption

2092
01:30:50,460 --> 01:30:53,340
with Source new Cipher text and in the

2093
01:30:53,340 --> 01:30:56,340
end we are able to retrieve the the

2094
01:30:56,340 --> 01:31:00,560
random coins we needed and to decrypt

2095
01:31:00,560 --> 01:31:04,800
not sets with Source new ciphertext we

2096
01:31:04,800 --> 01:31:07,500
can introduce a new check Norms which

2097
01:31:07,500 --> 01:31:09,300
with a different bones because of the

2098
01:31:09,300 --> 01:31:10,800
addition the norm will be a bit bigger

2099
01:31:10,800 --> 01:31:13,620
but this will still be able to reject

2100
01:31:13,620 --> 01:31:16,139
the internet ciphertext

2101
01:31:16,139 --> 01:31:20,159
and what we did here can seem absurd in

2102
01:31:20,159 --> 01:31:22,139
a black box framework because we only

2103
01:31:22,139 --> 01:31:25,080
added operation like some intermediate

2104
01:31:25,080 --> 01:31:27,540
steps to get to the same values but what

2105
01:31:27,540 --> 01:31:30,139
it means from a sectional perspective

2106
01:31:30,139 --> 01:31:32,820
besides the adversary cannot control the

2107
01:31:32,820 --> 01:31:35,580
safer text anymore so all the values

2108
01:31:35,580 --> 01:31:38,940
that are all the operations that are

2109
01:31:38,940 --> 01:31:41,520
happening after

2110
01:31:41,520 --> 01:31:44,580
the the multiplication with the circuit

2111
01:31:44,580 --> 01:31:48,000
key are no random and so they are not

2112
01:31:48,000 --> 01:31:50,580
GPA attack path anymore

2113
01:31:50,580 --> 01:31:53,960
so if we look at polka

2114
01:31:53,960 --> 01:31:57,179
with this figure we classified all the

2115
01:31:57,179 --> 01:31:58,219
operation

2116
01:31:58,219 --> 01:32:03,239
with the level of security we need two

2117
01:32:03,239 --> 01:32:05,340
grants so basically the left Parts a

2118
01:32:05,340 --> 01:32:09,780
green one is only weak against a simple

2119
01:32:09,780 --> 01:32:12,000
power analysis and it's light

2120
01:32:12,000 --> 01:32:14,460
contamination and we managed to only

2121
01:32:14,460 --> 01:32:15,300
have

2122
01:32:15,300 --> 01:32:17,639
one operation on the post control paths

2123
01:32:17,639 --> 01:32:19,920
that needed to be protecting protected

2124
01:32:19,920 --> 01:32:22,400
against the GPA

2125
01:32:22,400 --> 01:32:24,960
there's also symmetric parts that need

2126
01:32:24,960 --> 01:32:29,040
to be masked but we can hope that the

2127
01:32:29,040 --> 01:32:32,880
symmetric guys provide efficient hash

2128
01:32:32,880 --> 01:32:35,060
function and efficient authenticate

2129
01:32:35,060 --> 01:32:39,139
authenticated encryption schemes

2130
01:32:39,300 --> 01:32:40,679
um

2131
01:32:40,679 --> 01:32:43,139
then we we still want the black box

2132
01:32:43,139 --> 01:32:45,179
security I mean it's there's no point in

2133
01:32:45,179 --> 01:32:47,699
having inside channel security if your

2134
01:32:47,699 --> 01:32:49,440
skin can be broken without that channel

2135
01:32:49,440 --> 01:32:52,100
so the the

2136
01:32:52,100 --> 01:32:55,020
proves the ccns come as we discussed

2137
01:32:55,020 --> 01:32:56,940
with pumps the rigidity property and

2138
01:32:56,940 --> 01:33:00,780
explicit rejection uh the quantum random

2139
01:33:00,780 --> 01:33:03,320
molecule model proof uh

2140
01:33:03,320 --> 01:33:06,960
has to be ready to implicit rejection

2141
01:33:06,960 --> 01:33:09,659
and contradiction uh and then it's known

2142
01:33:09,659 --> 01:33:11,960
results

2143
01:33:13,340 --> 01:33:15,900
what's interesting is that all the

2144
01:33:15,900 --> 01:33:17,639
tweaks I presented are part of the

2145
01:33:17,639 --> 01:33:19,739
scheme and they need to be taken into

2146
01:33:19,739 --> 01:33:21,540
account when performing The Black Box

2147
01:33:21,540 --> 01:33:23,639
security it's not you have a scheme with

2148
01:33:23,639 --> 01:33:26,219
all the tweaks you prove it CCA then you

2149
01:33:26,219 --> 01:33:27,840
add the tweaks on it you have to make

2150
01:33:27,840 --> 01:33:30,719
sure that those tricks do not create any

2151
01:33:30,719 --> 01:33:33,620
vulnerabilities

2152
01:33:34,320 --> 01:33:37,219
um so last tweak we used

2153
01:33:37,219 --> 01:33:40,080
uh is a bit more complicated I will go

2154
01:33:40,080 --> 01:33:44,460
fast on this one but the ID is that when

2155
01:33:44,460 --> 01:33:46,199
you perform your multiplication with the

2156
01:33:46,199 --> 01:33:47,540
circuit key

2157
01:33:47,540 --> 01:33:51,239
it appears to be hard for an accessory

2158
01:33:51,239 --> 01:33:54,060
considering the leakage of this output

2159
01:33:54,060 --> 01:33:57,060
to get back to the secret key it's kind

2160
01:33:57,060 --> 01:33:59,219
of a learning problem because what we

2161
01:33:59,219 --> 01:34:01,260
say is what is the output of this

2162
01:34:01,260 --> 01:34:02,460
multiplication

2163
01:34:02,460 --> 01:34:05,280
uh it's just the simplification actually

2164
01:34:05,280 --> 01:34:07,260
and there's a leakage on it so the

2165
01:34:07,260 --> 01:34:08,940
leakage can be seen as a rounding

2166
01:34:08,940 --> 01:34:10,920
function so the running function here

2167
01:34:10,920 --> 01:34:12,719
won't be discarding the less significant

2168
01:34:12,719 --> 01:34:15,900
bits but it will be for instance so

2169
01:34:15,900 --> 01:34:18,000
anyway which is a classical model for

2170
01:34:18,000 --> 01:34:21,120
the leakage function those things I have

2171
01:34:21,120 --> 01:34:23,880
not be be proven secured like with a

2172
01:34:23,880 --> 01:34:26,840
reduction to LW yet they have been

2173
01:34:26,840 --> 01:34:30,300
studied and we look at some algebraic

2174
01:34:30,300 --> 01:34:33,679
properties that's shown say happy hard

2175
01:34:33,679 --> 01:34:36,239
for some leakage model like the running

2176
01:34:36,239 --> 01:34:38,780
weights

2177
01:34:39,020 --> 01:34:42,659
is a little bit more heuristic even if

2178
01:34:42,659 --> 01:34:44,580
it does not work all the previous

2179
01:34:44,580 --> 01:34:46,980
results old this one only makes things

2180
01:34:46,980 --> 01:34:50,159
easier to be masked

2181
01:34:50,159 --> 01:34:51,420
so

2182
01:34:51,420 --> 01:34:54,840
what what we want to know is to provide

2183
01:34:54,840 --> 01:34:57,239
a concrete implementation so that we can

2184
01:34:57,239 --> 01:34:59,100
really compare in unpredicted

2185
01:34:59,100 --> 01:35:00,540
implementation and protected

2186
01:35:00,540 --> 01:35:02,580
implementation against the standard for

2187
01:35:02,580 --> 01:35:03,900
instance cable

2188
01:35:03,900 --> 01:35:06,840
we also want the message confidentiality

2189
01:35:06,840 --> 01:35:09,360
against H analytics it's great to

2190
01:35:09,360 --> 01:35:12,000
protect the long-term Secrets but it's

2191
01:35:12,000 --> 01:35:14,520
not all you want and also for the last

2192
01:35:14,520 --> 01:35:16,440
part we want to have some proofs for

2193
01:35:16,440 --> 01:35:18,179
those hard physical learning problems

2194
01:35:18,179 --> 01:35:21,600
and we want to consider him against some

2195
01:35:21,600 --> 01:35:23,880
physical assumption

2196
01:35:23,880 --> 01:35:27,179
to conclude uh I just saw this figure

2197
01:35:27,179 --> 01:35:30,600
that is the expected gain you want and

2198
01:35:30,600 --> 01:35:33,420
basically what we have to understand is

2199
01:35:33,420 --> 01:35:35,159
even if the scheme is probably a little

2200
01:35:35,159 --> 01:35:37,739
bit less efficient than cable at some

2201
01:35:37,739 --> 01:35:39,719
point if you want to implement it in a

2202
01:35:39,719 --> 01:35:42,000
secure way it will become more efficient

2203
01:35:42,000 --> 01:35:44,340
because it's cheaper to protect

2204
01:35:44,340 --> 01:35:46,139
thank you for your attention do you have

2205
01:35:46,139 --> 01:35:48,739
any questions

2206
01:35:53,520 --> 01:35:57,000
I was way too fast not too fast but we

2207
01:35:57,000 --> 01:36:00,440
do have a few minutes for questions

2208
01:36:02,159 --> 01:36:04,739
yeah

2209
01:36:04,739 --> 01:36:07,679
I have a question so I'm interested in

2210
01:36:07,679 --> 01:36:09,300
this learning with physical rounding

2211
01:36:09,300 --> 01:36:12,900
yeah uh question so

2212
01:36:12,900 --> 01:36:15,780
is there a realistic model for what the

2213
01:36:15,780 --> 01:36:18,659
noise looks like that the adversary sees

2214
01:36:18,659 --> 01:36:20,880
with yeah the noise is introduced this

2215
01:36:20,880 --> 01:36:23,219
is a good question so model is always a

2216
01:36:23,219 --> 01:36:26,159
big question basically you can have some

2217
01:36:26,159 --> 01:36:27,659
complex models that are close to

2218
01:36:27,659 --> 01:36:31,440
severality but hard to analyze so what's

2219
01:36:31,440 --> 01:36:34,920
at the moment uh on the papers that were

2220
01:36:34,920 --> 01:36:37,219
published on this so model is just

2221
01:36:37,219 --> 01:36:39,480
anniversary has access to the ending

2222
01:36:39,480 --> 01:36:42,780
weights of the output without noise in

2223
01:36:42,780 --> 01:36:45,600
real life the another side we will never

2224
01:36:45,600 --> 01:36:48,600
get so so I mean going directly it will

2225
01:36:48,600 --> 01:36:51,120
have noise on it probably that the noise

2226
01:36:51,120 --> 01:36:54,239
make its gaussian noise probably the

2227
01:36:54,239 --> 01:36:56,580
noise makes the problem harder but it's

2228
01:36:56,580 --> 01:36:58,620
also harder to analyze so even without

2229
01:36:58,620 --> 01:37:02,400
the noise problems appears to be hard

2230
01:37:02,400 --> 01:37:04,679
um there is a follow-up works that will

2231
01:37:04,679 --> 01:37:07,500
be published at crypto that generalize

2232
01:37:07,500 --> 01:37:11,000
this model to linear and quadratic

2233
01:37:11,000 --> 01:37:13,739
leakage model so it's like the ending

2234
01:37:13,739 --> 01:37:16,139
weight but you have coefficient in front

2235
01:37:16,139 --> 01:37:20,280
of you a few different bits some bits

2236
01:37:20,280 --> 01:37:22,739
um weight more in the in the leakage

2237
01:37:22,739 --> 01:37:24,179
Thanos

2238
01:37:24,179 --> 01:37:26,040
and in the end you have the same

2239
01:37:26,040 --> 01:37:29,540
hardness properties than before

2240
01:37:32,460 --> 01:37:35,580
so on a high level is there some way um

2241
01:37:35,580 --> 01:37:38,639
that your technique for using the

2242
01:37:38,639 --> 01:37:40,080
homomorphic properties of the

2243
01:37:40,080 --> 01:37:42,480
cryptosystem does that generalize to any

2244
01:37:42,480 --> 01:37:46,860
like randomizable crypto system uh can

2245
01:37:46,860 --> 01:37:49,320
you show that if a crystal system is

2246
01:37:49,320 --> 01:37:53,940
randomizable then uh DPA is as hard as

2247
01:37:53,940 --> 01:37:55,679
Spa

2248
01:37:55,679 --> 01:37:57,900
it's not so it's not the strict

2249
01:37:57,900 --> 01:38:00,300
equivalence uh it's not like if there

2250
01:38:00,300 --> 01:38:02,340
are some FML values you only have spa

2251
01:38:02,340 --> 01:38:03,840
and if you have some long-term secret

2252
01:38:03,840 --> 01:38:07,739
you only have a DPA uh because

2253
01:38:07,739 --> 01:38:09,719
impossible cryptography sometimes even

2254
01:38:09,719 --> 01:38:11,699
in one execution you have many and many

2255
01:38:11,699 --> 01:38:14,460
traces many many uh point of interest

2256
01:38:14,460 --> 01:38:17,219
because supervisions are heavy and you

2257
01:38:17,219 --> 01:38:19,260
end up being able to perform DPA with a

2258
01:38:19,260 --> 01:38:20,600
single trace

2259
01:38:20,600 --> 01:38:22,679
uh but

2260
01:38:22,679 --> 01:38:25,100
since I did make things harder for sure

2261
01:38:25,100 --> 01:38:28,620
and this is at first what we try to

2262
01:38:28,620 --> 01:38:31,260
achieve is like just takes

2263
01:38:31,260 --> 01:38:33,600
implementation and finds some ideas to

2264
01:38:33,600 --> 01:38:36,900
make things harder without yet being

2265
01:38:36,900 --> 01:38:39,540
able to prove that it will be hardiness

2266
01:38:39,540 --> 01:38:42,239
in the probing model for instance

2267
01:38:42,239 --> 01:38:43,800
so today's understanding correctly

2268
01:38:43,800 --> 01:38:45,540
you're only able to prove it

2269
01:38:45,540 --> 01:38:47,120
specifically

2270
01:38:47,120 --> 01:38:51,500
for uh under lwe

2271
01:38:51,500 --> 01:38:55,320
but you think it works in general

2272
01:38:55,320 --> 01:38:57,960
um if if you can run them as a value it

2273
01:38:57,960 --> 01:39:00,659
will always be harder or much harder it

2274
01:39:00,659 --> 01:39:03,659
is hard to improve but it's for sure

2275
01:39:03,659 --> 01:39:07,199
will be harder and also attacks that are

2276
01:39:07,199 --> 01:39:10,620
used most of the time won't apply

2277
01:39:10,620 --> 01:39:14,420
so probability that it works in general

2278
01:39:18,300 --> 01:39:21,440
any other questions

2279
01:39:23,880 --> 01:39:25,980
so we'll uh we'll wrap up let's thank

2280
01:39:25,980 --> 01:39:28,199
clemon and all the speakers from the

2281
01:39:28,199 --> 01:39:30,379
session

2282
01:39:34,679 --> 01:39:37,620
and we'll resume at 11 o'clock which is

2283
01:39:37,620 --> 01:39:39,840
in 22 minutes

2284
01:39:39,840 --> 01:39:42,080
foreign

