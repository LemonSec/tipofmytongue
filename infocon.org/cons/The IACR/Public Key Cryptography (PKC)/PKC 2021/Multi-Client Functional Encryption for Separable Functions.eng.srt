1
00:00:00,160 --> 00:00:02,800
hi everyone i'm henrik walter and this

2
00:00:02,800 --> 00:00:04,720
talk is about multi-client function

3
00:00:04,720 --> 00:00:06,960
encryption for superable functions which

4
00:00:06,960 --> 00:00:09,360
is joint work with michaela chumpy and

5
00:00:09,360 --> 00:00:11,280
louisa finiscalci

6
00:00:11,280 --> 00:00:13,440
let's start with some motivation let's

7
00:00:13,440 --> 00:00:15,360
consider the example where we have two

8
00:00:15,360 --> 00:00:16,720
encrypted documents

9
00:00:16,720 --> 00:00:18,560
and now we want to allow two different

10
00:00:18,560 --> 00:00:20,560
parties dave and aaron to do some

11
00:00:20,560 --> 00:00:22,720
analysis over these documents

12
00:00:22,720 --> 00:00:24,480
dave wants to know how many times the

13
00:00:24,480 --> 00:00:26,880
word pkc occurs in both of these files

14
00:00:26,880 --> 00:00:27,680
together

15
00:00:27,680 --> 00:00:29,599
and aaron wants to learn how many times

16
00:00:29,599 --> 00:00:31,519
the word crypto appears in both of these

17
00:00:31,519 --> 00:00:33,200
files together

18
00:00:33,200 --> 00:00:35,360
additionally we want to allow two other

19
00:00:35,360 --> 00:00:37,040
parties alice and bob

20
00:00:37,040 --> 00:00:39,040
to be responsible for providing the

21
00:00:39,040 --> 00:00:40,320
different documents

22
00:00:40,320 --> 00:00:42,239
so alice would be in charge of providing

23
00:00:42,239 --> 00:00:44,559
the first file and bob responsible for

24
00:00:44,559 --> 00:00:46,320
providing the second file

25
00:00:46,320 --> 00:00:48,000
we additionally require that the

26
00:00:48,000 --> 00:00:50,000
evaluation of aaron and dave

27
00:00:50,000 --> 00:00:52,640
happens in a privacy preserving way that

28
00:00:52,640 --> 00:00:54,399
means that they should only learn how

29
00:00:54,399 --> 00:00:56,640
many times their requested word appears

30
00:00:56,640 --> 00:00:58,640
in both of these documents together

31
00:00:58,640 --> 00:01:00,879
and nothing beyond that in the next

32
00:01:00,879 --> 00:01:02,480
steps we are going to see what

33
00:01:02,480 --> 00:01:04,640
cryptographic primitives we can use to

34
00:01:04,640 --> 00:01:06,240
achieve this goal

35
00:01:06,240 --> 00:01:08,159
one primitive that might be useful in

36
00:01:08,159 --> 00:01:10,799
this scenario is public key encryption

37
00:01:10,799 --> 00:01:12,720
in public key encryption a setup

38
00:01:12,720 --> 00:01:14,720
algorithm outputs a public key and a

39
00:01:14,720 --> 00:01:15,840
secret key

40
00:01:15,840 --> 00:01:18,159
the public key can then be used by alice

41
00:01:18,159 --> 00:01:19,840
to encrypt the message x

42
00:01:19,840 --> 00:01:21,759
and bob can use the secret key to

43
00:01:21,759 --> 00:01:23,840
decrypt the ciphertext and obtain the

44
00:01:23,840 --> 00:01:25,119
message x

45
00:01:25,119 --> 00:01:27,360
the problem of this notion with respect

46
00:01:27,360 --> 00:01:28,720
to our use case

47
00:01:28,720 --> 00:01:30,799
is that it is not possible to allow for

48
00:01:30,799 --> 00:01:32,880
any fine-grained access control over

49
00:01:32,880 --> 00:01:35,680
x bob either learns x completely or

50
00:01:35,680 --> 00:01:37,119
nothing

51
00:01:37,119 --> 00:01:38,560
a notion that allows for this

52
00:01:38,560 --> 00:01:40,320
fine-grained access control is the

53
00:01:40,320 --> 00:01:42,240
notion of functional encryption which

54
00:01:42,240 --> 00:01:45,079
was introduced by bonesahi and waters in

55
00:01:45,079 --> 00:01:46,720
2011.

56
00:01:46,720 --> 00:01:48,479
in a function encryption scheme the

57
00:01:48,479 --> 00:01:50,720
setup algorithm outputs a master public

58
00:01:50,720 --> 00:01:52,720
key and a master secret key

59
00:01:52,720 --> 00:01:54,720
the master public key can then be used

60
00:01:54,720 --> 00:01:56,399
in the same way as before

61
00:01:56,399 --> 00:01:58,640
by alice to encrypt the message the

62
00:01:58,640 --> 00:02:00,880
master secret key though is not directly

63
00:02:00,880 --> 00:02:02,799
used to decrypt cipher text but to

64
00:02:02,799 --> 00:02:05,280
generate so-called functional keys

65
00:02:05,280 --> 00:02:07,439
every functional key is associated with

66
00:02:07,439 --> 00:02:08,639
a function f

67
00:02:08,639 --> 00:02:10,959
and if bob uses such a functional key to

68
00:02:10,959 --> 00:02:12,480
decrypt the cipher text

69
00:02:12,480 --> 00:02:14,720
he learns the function evaluation of the

70
00:02:14,720 --> 00:02:16,879
function associated with the key

71
00:02:16,879 --> 00:02:19,040
applied on the underlying message

72
00:02:19,040 --> 00:02:21,200
security in such a scheme ensures that

73
00:02:21,200 --> 00:02:23,200
bob learns nothing beyond the specific

74
00:02:23,200 --> 00:02:24,800
function evaluation

75
00:02:24,800 --> 00:02:26,640
this notion can also be considered in

76
00:02:26,640 --> 00:02:28,080
the secret key setting

77
00:02:28,080 --> 00:02:30,239
where the setup algorithm only outputs a

78
00:02:30,239 --> 00:02:31,680
master secret key

79
00:02:31,680 --> 00:02:33,920
that is then used for the encryption and

80
00:02:33,920 --> 00:02:36,000
functional key generation

81
00:02:36,000 --> 00:02:37,599
functional encryption provides us with

82
00:02:37,599 --> 00:02:39,360
the fine grained access control that we

83
00:02:39,360 --> 00:02:40,959
need for our use case

84
00:02:40,959 --> 00:02:42,959
it remains a problem that only single

85
00:02:42,959 --> 00:02:45,920
input functions can be evaluated

86
00:02:45,920 --> 00:02:47,920
a more generalized notion that allows

87
00:02:47,920 --> 00:02:49,920
for the evaluation of multi-input

88
00:02:49,920 --> 00:02:52,160
functions is the notion of multi-input

89
00:02:52,160 --> 00:02:53,360
function encryption

90
00:02:53,360 --> 00:02:56,959
introduced by goldwater all in 2014.

91
00:02:56,959 --> 00:02:59,200
here a functional key can be generated

92
00:02:59,200 --> 00:03:01,680
for example for a two-input function

93
00:03:01,680 --> 00:03:03,599
and bob can use this key together with

94
00:03:03,599 --> 00:03:05,519
two different cipher texts containing

95
00:03:05,519 --> 00:03:07,760
the messages x1 and x2

96
00:03:07,760 --> 00:03:10,560
to obtain f of x1 x2 these two

97
00:03:10,560 --> 00:03:12,319
ciphertexts are generated using

98
00:03:12,319 --> 00:03:14,480
different encryption keys output by the

99
00:03:14,480 --> 00:03:17,040
setup procedure to alice and carol

100
00:03:17,040 --> 00:03:19,200
a problem with this notion is that if

101
00:03:19,200 --> 00:03:20,560
alice and carol create more

102
00:03:20,560 --> 00:03:22,640
ciphertexts of for example the message

103
00:03:22,640 --> 00:03:24,799
x1 prime and x2 prime

104
00:03:24,799 --> 00:03:27,920
bob can not only compute f x1 prime x2

105
00:03:27,920 --> 00:03:28,480
prime

106
00:03:28,480 --> 00:03:32,239
but also f of x1 prime x2 and f of x1

107
00:03:32,239 --> 00:03:35,040
x2 prime a notion that prevents this

108
00:03:35,040 --> 00:03:37,040
leakage is the notion of multi-client

109
00:03:37,040 --> 00:03:38,400
function encryption

110
00:03:38,400 --> 00:03:40,239
in multi-client function encryption

111
00:03:40,239 --> 00:03:42,480
alice and carol use encryption labels

112
00:03:42,480 --> 00:03:44,879
for every ciphertext that they generate

113
00:03:44,879 --> 00:03:47,040
this allows bob to only obtain a valid

114
00:03:47,040 --> 00:03:49,120
decryption for two cipher texts that

115
00:03:49,120 --> 00:03:51,519
have been generated under the same label

116
00:03:51,519 --> 00:03:53,920
otherwise he learns nothing we can see

117
00:03:53,920 --> 00:03:55,760
that this notion prevents the previously

118
00:03:55,760 --> 00:03:57,280
mentioned computation

119
00:03:57,280 --> 00:03:59,680
since bob is not able to compute f of x

120
00:03:59,680 --> 00:04:01,040
1 prime x 2

121
00:04:01,040 --> 00:04:04,159
or f x 1 x 2 prime if the corresponding

122
00:04:04,159 --> 00:04:06,239
cipher texts have been generated using

123
00:04:06,239 --> 00:04:08,560
different encryption labels

124
00:04:08,560 --> 00:04:10,480
in this talk we mainly focus on the

125
00:04:10,480 --> 00:04:12,480
specific function class of the parabola

126
00:04:12,480 --> 00:04:13,200
functions

127
00:04:13,200 --> 00:04:15,120
separable functions are functions that

128
00:04:15,120 --> 00:04:16,798
can be written as the sum of any

129
00:04:16,798 --> 00:04:18,880
individual single input functions

130
00:04:18,880 --> 00:04:21,279
applied on all the different inputs so

131
00:04:21,279 --> 00:04:23,280
in this case bob receives a function a

132
00:04:23,280 --> 00:04:25,120
key corresponding to the separable

133
00:04:25,120 --> 00:04:26,080
function

134
00:04:26,080 --> 00:04:29,120
such that he can learn f1 of x1 plus f2

135
00:04:29,120 --> 00:04:30,160
of x2

136
00:04:30,160 --> 00:04:32,080
this function class is a good match for

137
00:04:32,080 --> 00:04:33,520
our word count example

138
00:04:33,520 --> 00:04:35,680
and allows a function evaluator to learn

139
00:04:35,680 --> 00:04:38,080
the desired information

140
00:04:38,080 --> 00:04:40,080
in this work we show how to realize

141
00:04:40,080 --> 00:04:41,919
multi-client function encryption for

142
00:04:41,919 --> 00:04:44,080
separable functions from secret key

143
00:04:44,080 --> 00:04:46,240
single input function encryption

144
00:04:46,240 --> 00:04:48,320
in the setting of multi-client function

145
00:04:48,320 --> 00:04:50,960
encryption a drawback still remains

146
00:04:50,960 --> 00:04:53,440
the requirement of a trusted party that

147
00:04:53,440 --> 00:04:55,280
is responsible for the setup of the

148
00:04:55,280 --> 00:04:56,080
parameters

149
00:04:56,080 --> 00:04:57,919
and the generation of the functional

150
00:04:57,919 --> 00:05:00,639
keys a notion that operates without a

151
00:05:00,639 --> 00:05:02,400
trusted party is the notion of

152
00:05:02,400 --> 00:05:04,479
decentralized multi-client function

153
00:05:04,479 --> 00:05:05,440
encryption

154
00:05:05,440 --> 00:05:07,919
introduced by shotar at al in a

155
00:05:07,919 --> 00:05:09,919
decentralized multi-client function

156
00:05:09,919 --> 00:05:11,039
encryption scheme

157
00:05:11,039 --> 00:05:13,120
alice and kerola interacting with each

158
00:05:13,120 --> 00:05:15,120
other to generate their own encryption

159
00:05:15,120 --> 00:05:16,479
and secret keys

160
00:05:16,479 --> 00:05:18,400
they can then use their secret keys to

161
00:05:18,400 --> 00:05:20,400
generate functional key shares

162
00:05:20,400 --> 00:05:22,240
that can then be combined to obtain the

163
00:05:22,240 --> 00:05:24,800
full functional key this functional key

164
00:05:24,800 --> 00:05:26,720
can then be used by bob in the usual

165
00:05:26,720 --> 00:05:27,600
manner

166
00:05:27,600 --> 00:05:29,680
in this setting the computations of the

167
00:05:29,680 --> 00:05:31,680
trusted party are completely transferred

168
00:05:31,680 --> 00:05:33,199
to alice and carol

169
00:05:33,199 --> 00:05:35,360
and therefore the trusted party is not

170
00:05:35,360 --> 00:05:37,360
needed anymore

171
00:05:37,360 --> 00:05:39,360
in this talk we are also going to show

172
00:05:39,360 --> 00:05:41,280
how the multi-client function encryption

173
00:05:41,280 --> 00:05:42,400
scheme that we present

174
00:05:42,400 --> 00:05:46,080
can be decentralized now we recap

175
00:05:46,080 --> 00:05:47,520
previous works focusing on

176
00:05:47,520 --> 00:05:49,600
transformations of single input function

177
00:05:49,600 --> 00:05:50,880
encryption schemes

178
00:05:50,880 --> 00:05:54,800
to multi-input and multi-client schemes

179
00:05:54,800 --> 00:05:56,880
the first work in this area is the work

180
00:05:56,880 --> 00:05:59,680
of prokaryote from 2016

181
00:05:59,680 --> 00:06:01,759
in which the authors show how to turn a

182
00:06:01,759 --> 00:06:03,440
secret key single input function

183
00:06:03,440 --> 00:06:04,639
encryption scheme

184
00:06:04,639 --> 00:06:06,960
for general function class into a

185
00:06:06,960 --> 00:06:09,440
multi-input function encryption scheme

186
00:06:09,440 --> 00:06:11,919
with a constant number of inputs this

187
00:06:11,919 --> 00:06:13,919
result was extended one year later by

188
00:06:13,919 --> 00:06:15,440
komargotsky and zegf

189
00:06:15,440 --> 00:06:17,520
allowing for a polylogarithmic number of

190
00:06:17,520 --> 00:06:19,360
inputs

191
00:06:19,360 --> 00:06:22,000
in another line of work by abdullah al

192
00:06:22,000 --> 00:06:24,000
the authors show how to lift the secret

193
00:06:24,000 --> 00:06:25,919
key single input function encryption

194
00:06:25,919 --> 00:06:26,560
scheme

195
00:06:26,560 --> 00:06:28,960
for the inner product functionality into

196
00:06:28,960 --> 00:06:30,720
a multi-input scheme

197
00:06:30,720 --> 00:06:32,720
additionally it has been shown in

198
00:06:32,720 --> 00:06:34,560
another work by abdallah and al

199
00:06:34,560 --> 00:06:37,759
how this scheme can be decentralized in

200
00:06:37,759 --> 00:06:40,000
a follow-up work by abdullah bin hamudah

201
00:06:40,000 --> 00:06:40,800
and gay

202
00:06:40,800 --> 00:06:42,479
the authors extend the previous

203
00:06:42,479 --> 00:06:44,479
construction and allow for handling

204
00:06:44,479 --> 00:06:45,440
labels

205
00:06:45,440 --> 00:06:47,280
instead of a secret key single input

206
00:06:47,280 --> 00:06:49,199
function encryption scheme the authors

207
00:06:49,199 --> 00:06:51,599
here need to rely on a public key scheme

208
00:06:51,599 --> 00:06:54,720
their scheme can also be decentralized

209
00:06:54,720 --> 00:06:56,880
as previously mentioned in this work we

210
00:06:56,880 --> 00:06:58,639
show how to transform a secret key

211
00:06:58,639 --> 00:07:01,039
single input function encryption scheme

212
00:07:01,039 --> 00:07:02,880
for general function class into a

213
00:07:02,880 --> 00:07:04,800
multi-client function encryption scheme

214
00:07:04,800 --> 00:07:06,560
for the parable functions

215
00:07:06,560 --> 00:07:08,800
we also show how our construction can be

216
00:07:08,800 --> 00:07:10,800
decentralized

217
00:07:10,800 --> 00:07:12,880
additionally we introduce a new notion

218
00:07:12,880 --> 00:07:15,120
of multi-client function encryption that

219
00:07:15,120 --> 00:07:17,360
allows for distributed execution of the

220
00:07:17,360 --> 00:07:19,919
decryption procedure

221
00:07:19,919 --> 00:07:22,000
now we present our construction for the

222
00:07:22,000 --> 00:07:24,240
specific case of four parties

223
00:07:24,240 --> 00:07:26,240
a trivial solution that someone could

224
00:07:26,240 --> 00:07:28,400
think of to obtain multi-client function

225
00:07:28,400 --> 00:07:29,280
encryption for

226
00:07:29,280 --> 00:07:32,160
variable functions is by simply running

227
00:07:32,160 --> 00:07:34,000
four different instances of a single

228
00:07:34,000 --> 00:07:34,960
input scheme

229
00:07:34,960 --> 00:07:36,800
and whenever a key for the separable

230
00:07:36,800 --> 00:07:38,319
function is requested

231
00:07:38,319 --> 00:07:40,479
a key for the individual function under

232
00:07:40,479 --> 00:07:42,479
each of the single input instances

233
00:07:42,479 --> 00:07:45,199
is generated the final functional key

234
00:07:45,199 --> 00:07:45,599
then

235
00:07:45,599 --> 00:07:47,360
consists of all the keys of the single

236
00:07:47,360 --> 00:07:48,639
input schemes

237
00:07:48,639 --> 00:07:50,160
the decryption procedure for the

238
00:07:50,160 --> 00:07:52,080
multi-client scheme then executes the

239
00:07:52,080 --> 00:07:53,919
decryption procedure of all the single

240
00:07:53,919 --> 00:07:54,960
input schemes

241
00:07:54,960 --> 00:07:57,440
using the different keys and sums up all

242
00:07:57,440 --> 00:07:59,919
the resulting values

243
00:07:59,919 --> 00:08:01,759
the problem with this solution is that

244
00:08:01,759 --> 00:08:03,599
we have an instance-wise leakage of the

245
00:08:03,599 --> 00:08:05,199
function evaluation

246
00:08:05,199 --> 00:08:06,960
that means that the decryptor not only

247
00:08:06,960 --> 00:08:08,960
learns the evaluation of the separable

248
00:08:08,960 --> 00:08:09,680
function

249
00:08:09,680 --> 00:08:11,680
but also the evaluation of each of the

250
00:08:11,680 --> 00:08:13,919
individual single input functions

251
00:08:13,919 --> 00:08:15,840
so for the case of the word count

252
00:08:15,840 --> 00:08:18,080
example the decryptor will not only

253
00:08:18,080 --> 00:08:20,080
learn how many times the requested word

254
00:08:20,080 --> 00:08:22,000
appears in all of the documents

255
00:08:22,000 --> 00:08:23,919
but also how many times it appears in

256
00:08:23,919 --> 00:08:25,759
every single document

257
00:08:25,759 --> 00:08:27,199
therefore we need to adapt the

258
00:08:27,199 --> 00:08:29,280
construction to prevent the individual

259
00:08:29,280 --> 00:08:30,160
leakage

260
00:08:30,160 --> 00:08:32,000
by hiding the evaluations of the

261
00:08:32,000 --> 00:08:34,399
different single input functions

262
00:08:34,399 --> 00:08:37,039
to achieve this we can rely on a secret

263
00:08:37,039 --> 00:08:40,000
sharing scheme of zero

264
00:08:40,000 --> 00:08:41,919
more detail instead of letting each

265
00:08:41,919 --> 00:08:43,519
function key simply output the

266
00:08:43,519 --> 00:08:46,000
evaluation of the single input function

267
00:08:46,000 --> 00:08:48,000
the key generator generates a secret

268
00:08:48,000 --> 00:08:50,240
sharing of 0 and hard codes one of the

269
00:08:50,240 --> 00:08:50,800
shares

270
00:08:50,800 --> 00:08:54,160
raf into each of the individual keys

271
00:08:54,160 --> 00:08:55,680
when the individual keys are then

272
00:08:55,680 --> 00:08:58,080
evaluated they output the evaluation of

273
00:08:58,080 --> 00:08:59,680
the single input function

274
00:08:59,680 --> 00:09:02,880
plus the share rif summing up all of the

275
00:09:02,880 --> 00:09:04,640
outputs of the individual keys

276
00:09:04,640 --> 00:09:06,399
then gives the desired separable

277
00:09:06,399 --> 00:09:08,720
function evaluation and as long as the

278
00:09:08,720 --> 00:09:10,399
decrypter does not have any knowledge

279
00:09:10,399 --> 00:09:12,000
about the different shares

280
00:09:12,000 --> 00:09:13,839
nothing about the single input function

281
00:09:13,839 --> 00:09:16,640
evaluation is leaked

282
00:09:16,640 --> 00:09:18,480
a related problem occurs for the

283
00:09:18,480 --> 00:09:20,480
generation of the ciphertexts

284
00:09:20,480 --> 00:09:21,920
in the current construction the

285
00:09:21,920 --> 00:09:23,760
encryption labels are not affecting the

286
00:09:23,760 --> 00:09:24,560
decryption

287
00:09:24,560 --> 00:09:26,959
in any way which means that it is still

288
00:09:26,959 --> 00:09:29,360
possible to decrypt ciphertext generated

289
00:09:29,360 --> 00:09:32,080
under different encryption labels

290
00:09:32,080 --> 00:09:34,160
one might think that we can also solve

291
00:09:34,160 --> 00:09:36,240
this problem using a secret sharing of

292
00:09:36,240 --> 00:09:37,120
xero

293
00:09:37,120 --> 00:09:38,720
but the issue is that the different

294
00:09:38,720 --> 00:09:40,480
clients need to agree on the secret

295
00:09:40,480 --> 00:09:42,080
sharing whenever they want to encrypt

296
00:09:42,080 --> 00:09:43,040
the ciphertext

297
00:09:43,040 --> 00:09:45,040
under a new encryption label and there

298
00:09:45,040 --> 00:09:47,120
is no single party that can sample this

299
00:09:47,120 --> 00:09:48,720
secret sharing

300
00:09:48,720 --> 00:09:50,399
therefore we need a non-interactive

301
00:09:50,399 --> 00:09:52,720
solution such that the parties can agree

302
00:09:52,720 --> 00:09:54,480
on a new secret sharing of zero

303
00:09:54,480 --> 00:09:58,000
for every label on the fly to do this we

304
00:09:58,000 --> 00:09:59,680
borrow a technique from abdullah bin

305
00:09:59,680 --> 00:10:01,040
hamudah and gay

306
00:10:01,040 --> 00:10:02,720
this technique works in the following

307
00:10:02,720 --> 00:10:05,040
way we start by considering a more

308
00:10:05,040 --> 00:10:07,120
complicated way to generate a secret

309
00:10:07,120 --> 00:10:08,240
sharing of zero

310
00:10:08,240 --> 00:10:10,000
where the clients have different shared

311
00:10:10,000 --> 00:10:11,519
values with each other

312
00:10:11,519 --> 00:10:14,720
in more detail the client c1 shares rl12

313
00:10:14,720 --> 00:10:16,160
with client c2

314
00:10:16,160 --> 00:10:19,440
rl13 with client c3 and so on

315
00:10:19,440 --> 00:10:21,279
we can then display the shared values

316
00:10:21,279 --> 00:10:22,560
between the clients in this

317
00:10:22,560 --> 00:10:25,120
anti-symmetric matrix

318
00:10:25,120 --> 00:10:27,360
to generate the secret shares of zero

319
00:10:27,360 --> 00:10:29,200
one simply needs to sum up the shared

320
00:10:29,200 --> 00:10:31,440
values in the columns of the matrix

321
00:10:31,440 --> 00:10:34,000
so client c1 for example computes minus

322
00:10:34,000 --> 00:10:36,720
rl12 minus rl13

323
00:10:36,720 --> 00:10:40,720
minus il14 to obtain its share t1l

324
00:10:40,720 --> 00:10:42,800
we can see that this is indeed a valid

325
00:10:42,800 --> 00:10:45,040
secret sharing of 0 since every value

326
00:10:45,040 --> 00:10:47,200
occurs only one time positive and one

327
00:10:47,200 --> 00:10:49,680
time negative inside this matrix

328
00:10:49,680 --> 00:10:51,920
we can also see that summing up only a

329
00:10:51,920 --> 00:10:54,079
subset of the columns of the matrix does

330
00:10:54,079 --> 00:10:55,839
not yield zero

331
00:10:55,839 --> 00:10:57,360
to allow for the non-interactive

332
00:10:57,360 --> 00:10:59,600
generation of several secret sharings we

333
00:10:59,600 --> 00:11:00,000
need to

334
00:11:00,000 --> 00:11:01,760
allow the parties to agree on such a

335
00:11:01,760 --> 00:11:03,200
matrix for every label

336
00:11:03,200 --> 00:11:06,320
l on the fly abdallah and i'll achieve

337
00:11:06,320 --> 00:11:07,920
this by letting the parties share

338
00:11:07,920 --> 00:11:10,320
pairwise prf keys with each other

339
00:11:10,320 --> 00:11:12,079
which can then be used to generate the

340
00:11:12,079 --> 00:11:13,600
different r values

341
00:11:13,600 --> 00:11:15,440
by executing the prf with the

342
00:11:15,440 --> 00:11:17,600
corresponding shared key applied on the

343
00:11:17,600 --> 00:11:18,959
label l

344
00:11:18,959 --> 00:11:20,800
this solution results in a quadratic

345
00:11:20,800 --> 00:11:22,240
blow up of the keys

346
00:11:22,240 --> 00:11:24,160
which means that for any clients we

347
00:11:24,160 --> 00:11:25,519
require n times n

348
00:11:25,519 --> 00:11:29,600
minus 1 divided by two keys overall

349
00:11:29,600 --> 00:11:31,519
using this technique we can now generate

350
00:11:31,519 --> 00:11:34,000
the ciphertext containing the message x

351
00:11:34,000 --> 00:11:37,360
i and the value til generated using the

352
00:11:37,360 --> 00:11:37,920
prf

353
00:11:37,920 --> 00:11:40,160
evaluations of l under the different

354
00:11:40,160 --> 00:11:41,760
keys

355
00:11:41,760 --> 00:11:43,680
to make the scheme work we additionally

356
00:11:43,680 --> 00:11:45,760
need to modify the functional key for

357
00:11:45,760 --> 00:11:48,000
each of the single input instances

358
00:11:48,000 --> 00:11:49,920
to not just output the single input

359
00:11:49,920 --> 00:11:52,079
function evaluation and the hard-coded

360
00:11:52,079 --> 00:11:52,880
secret share

361
00:11:52,880 --> 00:11:56,160
rif but also the value til

362
00:11:56,160 --> 00:11:57,920
furthermore we also need to add the

363
00:11:57,920 --> 00:12:00,240
shared prf keys to the secret keys of

364
00:12:00,240 --> 00:12:01,760
all the different parties

365
00:12:01,760 --> 00:12:04,079
to enable them to generate the t values

366
00:12:04,079 --> 00:12:05,600
for their encryptions

367
00:12:05,600 --> 00:12:07,360
this completes our construction of the

368
00:12:07,360 --> 00:12:09,200
multi-client scheme for separable

369
00:12:09,200 --> 00:12:10,560
functions

370
00:12:10,560 --> 00:12:12,800
the security of our construction can be

371
00:12:12,800 --> 00:12:14,639
shown by relying on the security of the

372
00:12:14,639 --> 00:12:16,000
different primitives

373
00:12:16,000 --> 00:12:17,920
we give a high level overview how the

374
00:12:17,920 --> 00:12:20,800
security of the scheme can be proven

375
00:12:20,800 --> 00:12:22,720
we start by relying on the security of

376
00:12:22,720 --> 00:12:24,240
the prf to argue that the

377
00:12:24,240 --> 00:12:26,480
non-interactive secret shares til

378
00:12:26,480 --> 00:12:28,560
are computationally indistinguishable

379
00:12:28,560 --> 00:12:31,040
from randomly generated shares

380
00:12:31,040 --> 00:12:32,639
in the next step we program the

381
00:12:32,639 --> 00:12:35,120
ciphertext and functional keys in such a

382
00:12:35,120 --> 00:12:37,040
way that they only contain the sum of

383
00:12:37,040 --> 00:12:39,360
the individual function evaluation

384
00:12:39,360 --> 00:12:42,079
the random share raf of the function and

385
00:12:42,079 --> 00:12:44,079
the non-interactive share of the label

386
00:12:44,079 --> 00:12:45,839
til

387
00:12:45,839 --> 00:12:48,000
these program values can then be seen as

388
00:12:48,000 --> 00:12:49,680
a one-time pad encryption of the

389
00:12:49,680 --> 00:12:52,079
individual function evaluation

390
00:12:52,079 --> 00:12:54,639
using the sum of the random share raf

391
00:12:54,639 --> 00:12:56,880
and the non-interactive share til

392
00:12:56,880 --> 00:12:59,760
as the key since the values raf are

393
00:12:59,760 --> 00:13:01,600
different for every function f

394
00:13:01,600 --> 00:13:03,839
and the values til are different from

395
00:13:03,839 --> 00:13:04,880
every label

396
00:13:04,880 --> 00:13:07,040
we obtain a fresh one-time pet key for

397
00:13:07,040 --> 00:13:09,440
every function and label combination

398
00:13:09,440 --> 00:13:11,160
which is sufficient to argue the

399
00:13:11,160 --> 00:13:12,800
indistinguishability of different

400
00:13:12,800 --> 00:13:14,800
ciphertexts

401
00:13:14,800 --> 00:13:16,720
to decentralize our scheme we need to

402
00:13:16,720 --> 00:13:18,880
define function key shares that can be

403
00:13:18,880 --> 00:13:20,480
combined to obtain the complete

404
00:13:20,480 --> 00:13:21,680
functional key

405
00:13:21,680 --> 00:13:23,360
and we need to separate the master

406
00:13:23,360 --> 00:13:25,600
secret key into different secret keys

407
00:13:25,600 --> 00:13:27,279
that can be used to generate these

408
00:13:27,279 --> 00:13:29,760
different functional key shares

409
00:13:29,760 --> 00:13:31,680
the separation of the master secret key

410
00:13:31,680 --> 00:13:33,440
in our scheme is very natural

411
00:13:33,440 --> 00:13:35,200
and the clients can execute the key

412
00:13:35,200 --> 00:13:36,480
exchange protocol

413
00:13:36,480 --> 00:13:39,040
to agree on the different prf keys to

414
00:13:39,040 --> 00:13:40,639
separate the functional key into

415
00:13:40,639 --> 00:13:42,320
different functional key shares

416
00:13:42,320 --> 00:13:44,320
we need to remove the local sampling of

417
00:13:44,320 --> 00:13:46,320
the secret sharing of 0 for every

418
00:13:46,320 --> 00:13:49,120
functional key to achieve this we can

419
00:13:49,120 --> 00:13:51,199
rely again on the prf technique of

420
00:13:51,199 --> 00:13:52,240
abdallah at all

421
00:13:52,240 --> 00:13:54,240
and let the clients generate the secret

422
00:13:54,240 --> 00:13:56,480
sharing for the functional key shares

423
00:13:56,480 --> 00:13:58,959
by evaluating the prf using different

424
00:13:58,959 --> 00:14:01,120
keys on the requested function

425
00:14:01,120 --> 00:14:03,279
this concludes the decentralization of

426
00:14:03,279 --> 00:14:04,880
our construction

427
00:14:04,880 --> 00:14:06,880
in our work we also introduced the

428
00:14:06,880 --> 00:14:09,040
notion of outsourceable multi-client

429
00:14:09,040 --> 00:14:10,720
function encryption

430
00:14:10,720 --> 00:14:12,800
an outsourceable multi-client function

431
00:14:12,800 --> 00:14:14,880
encryption scheme allows to distribute

432
00:14:14,880 --> 00:14:16,480
the decryption procedure

433
00:14:16,480 --> 00:14:18,880
to end different servers that all output

434
00:14:18,880 --> 00:14:21,519
different decryption shares

435
00:14:21,519 --> 00:14:23,360
these decryption shares can then be

436
00:14:23,360 --> 00:14:25,519
combined by the function evaluator to

437
00:14:25,519 --> 00:14:28,480
obtain the final functional output

438
00:14:28,480 --> 00:14:30,800
security in this setting ensures that no

439
00:14:30,800 --> 00:14:32,639
one learns anything about the final

440
00:14:32,639 --> 00:14:34,560
function evaluation who is not in

441
00:14:34,560 --> 00:14:36,959
possession of all the decryption shares

442
00:14:36,959 --> 00:14:38,959
this notion is particularly useful in

443
00:14:38,959 --> 00:14:41,120
use cases where the decryption procedure

444
00:14:41,120 --> 00:14:44,160
is quite computation expensive

445
00:14:44,160 --> 00:14:46,000
more formally in an outsourceable

446
00:14:46,000 --> 00:14:48,079
multi-client function encryption scheme

447
00:14:48,079 --> 00:14:50,160
the key generation procedure outputs

448
00:14:50,160 --> 00:14:52,079
different functional key shares for the

449
00:14:52,079 --> 00:14:53,440
function f

450
00:14:53,440 --> 00:14:55,279
these shares can then be used by the

451
00:14:55,279 --> 00:14:56,880
parties bob and charlie

452
00:14:56,880 --> 00:14:58,800
to execute the partial decryption

453
00:14:58,800 --> 00:15:00,639
procedure and to obtain different

454
00:15:00,639 --> 00:15:02,240
decryption shares

455
00:15:02,240 --> 00:15:04,079
it is noted here that bob who is in

456
00:15:04,079 --> 00:15:05,600
possession of the first part of the

457
00:15:05,600 --> 00:15:06,720
functional key

458
00:15:06,720 --> 00:15:08,639
only needs to execute the partial

459
00:15:08,639 --> 00:15:10,959
decryption on the first cipher text

460
00:15:10,959 --> 00:15:12,880
the same holds for charlie with respect

461
00:15:12,880 --> 00:15:14,800
to the second cipher text

462
00:15:14,800 --> 00:15:16,880
the resulting decryption shares can then

463
00:15:16,880 --> 00:15:19,120
be combined together to obtain the final

464
00:15:19,120 --> 00:15:20,160
output

465
00:15:20,160 --> 00:15:22,240
security here ensures that if not all

466
00:15:22,240 --> 00:15:23,440
the shares are known

467
00:15:23,440 --> 00:15:25,519
nothing about the function evaluation is

468
00:15:25,519 --> 00:15:26,880
leaked

469
00:15:26,880 --> 00:15:28,800
our presented multi-client function

470
00:15:28,800 --> 00:15:30,560
encryption scheme also allows for

471
00:15:30,560 --> 00:15:31,920
outsource ability

472
00:15:31,920 --> 00:15:34,000
by separating the functional key into

473
00:15:34,000 --> 00:15:35,920
different functional key shares

474
00:15:35,920 --> 00:15:37,600
that allow for the generation of

475
00:15:37,600 --> 00:15:39,839
decryption shares

476
00:15:39,839 --> 00:15:42,000
in more detail we output the different

477
00:15:42,000 --> 00:15:43,839
keys for the different single input

478
00:15:43,839 --> 00:15:45,839
function encryption instances to the

479
00:15:45,839 --> 00:15:47,040
different servers

480
00:15:47,040 --> 00:15:48,800
and define the partial decryption

481
00:15:48,800 --> 00:15:50,880
procedure as the decryption procedure of

482
00:15:50,880 --> 00:15:52,639
the single input scheme

483
00:15:52,639 --> 00:15:54,639
the output decryption share is then

484
00:15:54,639 --> 00:15:56,480
blinded using the secret share of the

485
00:15:56,480 --> 00:15:58,320
functional key and the secret share of

486
00:15:58,320 --> 00:16:00,000
the ciphertext label

487
00:16:00,000 --> 00:16:01,680
for the reconstruction of the final

488
00:16:01,680 --> 00:16:03,920
function output the different decryption

489
00:16:03,920 --> 00:16:05,839
shares can then be summed up by the

490
00:16:05,839 --> 00:16:08,160
function evaluator

491
00:16:08,160 --> 00:16:10,000
it is also possible to combine the

492
00:16:10,000 --> 00:16:12,079
notion of decentralization and outsource

493
00:16:12,079 --> 00:16:12,880
ability

494
00:16:12,880 --> 00:16:15,040
to get a decentralized outsourceable

495
00:16:15,040 --> 00:16:17,360
scheme we can decentralize our

496
00:16:17,360 --> 00:16:19,279
outsourceable scheme in the same way as

497
00:16:19,279 --> 00:16:21,839
we decentralized our multi-client scheme

498
00:16:21,839 --> 00:16:22,959
using the prf

499
00:16:22,959 --> 00:16:26,320
generated non-interactive secret shares

500
00:16:26,320 --> 00:16:28,959
in summary we first showed how to obtain

501
00:16:28,959 --> 00:16:30,639
a multi-client function encryption

502
00:16:30,639 --> 00:16:32,639
scheme for separable functions

503
00:16:32,639 --> 00:16:34,800
from a secret key single input function

504
00:16:34,800 --> 00:16:36,000
encryption scheme using

505
00:16:36,000 --> 00:16:38,639
a non-interactive secret sharing scheme

506
00:16:38,639 --> 00:16:40,160
additionally we showed how our

507
00:16:40,160 --> 00:16:42,160
construction can be decentralized by

508
00:16:42,160 --> 00:16:44,320
removing the trusted party for the setup

509
00:16:44,320 --> 00:16:46,000
and key generation

510
00:16:46,000 --> 00:16:48,240
and we also introduced the notion of

511
00:16:48,240 --> 00:16:50,399
outsourceable multi-client function

512
00:16:50,399 --> 00:16:52,880
encryption that allows for a distributed

513
00:16:52,880 --> 00:16:55,440
execution of the decryption procedure

514
00:16:55,440 --> 00:16:57,440
and showed how our construction can be

515
00:16:57,440 --> 00:17:02,639
modified to achieve outsourceability

