1
00:00:02,080 --> 00:00:03,040
hello

2
00:00:03,040 --> 00:00:06,000
my name is eudor vitor lima pedera i'm

3
00:00:06,000 --> 00:00:07,919
going to present the paper bootstrapping

4
00:00:07,919 --> 00:00:09,519
fully homomorphic encryption over the

5
00:00:09,519 --> 00:00:12,480
integers in less than one second

6
00:00:12,480 --> 00:00:15,040
and now i am a postdoctoral researcher

7
00:00:15,040 --> 00:00:18,160
at koziik k11 but this paper was

8
00:00:18,160 --> 00:00:19,359
basically written

9
00:00:19,359 --> 00:00:21,840
while i was working at the university of

10
00:00:21,840 --> 00:00:24,480
luxembourg

11
00:00:25,519 --> 00:00:27,920
so as you may know there are basically

12
00:00:27,920 --> 00:00:29,359
two main families of

13
00:00:29,359 --> 00:00:31,840
full homomorphic encryption schemes the

14
00:00:31,840 --> 00:00:33,360
scheme is based on the learning with

15
00:00:33,360 --> 00:00:34,880
errors problem which we call

16
00:00:34,880 --> 00:00:37,760
lwe and the schemes based on the

17
00:00:37,760 --> 00:00:39,680
approximate greatest common divisor

18
00:00:39,680 --> 00:00:40,559
problem

19
00:00:40,559 --> 00:00:44,239
which we call agcd and

20
00:00:44,239 --> 00:00:46,320
the schemes based on this problem are

21
00:00:46,320 --> 00:00:48,079
the ones that we call

22
00:00:48,079 --> 00:00:51,440
fhe over the integers

23
00:00:51,440 --> 00:00:53,920
the lwe problem is well known so

24
00:00:53,920 --> 00:00:55,280
basically we have

25
00:00:55,280 --> 00:00:59,039
a secret which is a vector mod q

26
00:00:59,039 --> 00:01:03,359
and we sample uniformly random vectors

27
00:01:03,359 --> 00:01:06,720
and then nice terms usually they are

28
00:01:06,720 --> 00:01:08,560
following a discrete gaussian

29
00:01:08,560 --> 00:01:10,240
distribution

30
00:01:10,240 --> 00:01:13,280
and then we compute the inner product

31
00:01:13,280 --> 00:01:16,560
of this uniform vector and this by the

32
00:01:16,560 --> 00:01:17,920
secret

33
00:01:17,920 --> 00:01:21,280
and we add the noise term then given

34
00:01:21,280 --> 00:01:23,200
many of these samples

35
00:01:23,200 --> 00:01:27,200
a ibi we have to find the secret s

36
00:01:27,200 --> 00:01:30,640
there is also the ring version of the

37
00:01:30,640 --> 00:01:32,880
lwe problem in which we basically

38
00:01:32,880 --> 00:01:34,240
replace

39
00:01:34,240 --> 00:01:38,320
vectors by polynomials

40
00:01:38,320 --> 00:01:41,360
so for the agcd problem the secret is

41
00:01:41,360 --> 00:01:42,399
just an integer

42
00:01:42,399 --> 00:01:46,079
p now we also simple uniform elements

43
00:01:46,079 --> 00:01:47,840
but they are not vectors just

44
00:01:47,840 --> 00:01:50,960
integers and

45
00:01:50,960 --> 00:01:53,840
nice terms and then we multiply this

46
00:01:53,840 --> 00:01:55,360
uniform element

47
00:01:55,360 --> 00:01:58,320
by the secret and we add the noise and

48
00:01:58,320 --> 00:01:58,880
then this

49
00:01:58,880 --> 00:02:02,000
x i is what we call an hcd sample and

50
00:02:02,000 --> 00:02:04,880
then given many of these agcd samples we

51
00:02:04,880 --> 00:02:07,680
have to find p

52
00:02:07,680 --> 00:02:09,758
okay so we have these two families of

53
00:02:09,758 --> 00:02:11,360
homomorphic schemes

54
00:02:11,360 --> 00:02:13,760
and every time one technique was

55
00:02:13,760 --> 00:02:15,760
proposed to improve

56
00:02:15,760 --> 00:02:18,640
uh these schemes based on one of these

57
00:02:18,640 --> 00:02:20,080
two problems

58
00:02:20,080 --> 00:02:23,280
uh this technique was quickly adapted to

59
00:02:23,280 --> 00:02:25,040
the schemes based on the other problem

60
00:02:25,040 --> 00:02:26,720
so for instance we have modulus

61
00:02:26,720 --> 00:02:29,360
switching for schemes based on the lwe

62
00:02:29,360 --> 00:02:29,840
problem

63
00:02:29,840 --> 00:02:33,040
and on the agcd problem we also have

64
00:02:33,040 --> 00:02:34,879
batching encryption for both

65
00:02:34,879 --> 00:02:38,879
hardness assumptions we have

66
00:02:38,879 --> 00:02:41,760
schemes with causative noise growth also

67
00:02:41,760 --> 00:02:44,720
based on these two problems

68
00:02:44,720 --> 00:02:47,760
however these new fast boost trapping

69
00:02:47,760 --> 00:02:49,599
methods

70
00:02:49,599 --> 00:02:51,680
that run in less than one second only

71
00:02:51,680 --> 00:02:53,680
exist for schemes

72
00:02:53,680 --> 00:02:57,680
based on the lwe problem

73
00:02:57,680 --> 00:03:00,640
so we can ask ourselves if it's possible

74
00:03:00,640 --> 00:03:01,519
to adapt

75
00:03:01,519 --> 00:03:03,920
these fastbootstrap methods that run in

76
00:03:03,920 --> 00:03:05,280
less than one second

77
00:03:05,280 --> 00:03:08,879
to fhe over the integers and that's the

78
00:03:08,879 --> 00:03:10,159
question that we answer

79
00:03:10,159 --> 00:03:13,840
in this paper but how these fast

80
00:03:13,840 --> 00:03:15,440
bootstrapping procedures

81
00:03:15,440 --> 00:03:18,159
work so in general the bootstrapping is

82
00:03:18,159 --> 00:03:20,159
the evaluation

83
00:03:20,159 --> 00:03:21,840
of the decryption function

84
00:03:21,840 --> 00:03:24,799
homomorphically so that at the end we

85
00:03:24,799 --> 00:03:27,040
generate a new ciphertext encrypting the

86
00:03:27,040 --> 00:03:28,560
same message

87
00:03:28,560 --> 00:03:31,920
but with smaller noise so we have this

88
00:03:31,920 --> 00:03:33,680
base scheme which is the scheme that we

89
00:03:33,680 --> 00:03:35,200
want to bootstrap

90
00:03:35,200 --> 00:03:39,200
it's a simple scheme that encrypts bits

91
00:03:39,200 --> 00:03:42,480
into vectors mod q

92
00:03:42,480 --> 00:03:45,680
and it has this important property that

93
00:03:45,680 --> 00:03:48,400
the encryption is done in a two steps

94
00:03:48,400 --> 00:03:49,200
and the first

95
00:03:49,200 --> 00:03:52,879
step is a linear one in which we

96
00:03:52,879 --> 00:03:56,480
compute the inner product of this

97
00:03:56,480 --> 00:03:59,120
vector which is the ciphertext with this

98
00:03:59,120 --> 00:04:01,519
other vector which is the secret key

99
00:04:01,519 --> 00:04:04,319
and we get the message multiplied by

100
00:04:04,319 --> 00:04:06,000
some scaling vector

101
00:04:06,000 --> 00:04:08,560
plus the noise and then the second step

102
00:04:08,560 --> 00:04:10,000
of the decryption is just

103
00:04:10,000 --> 00:04:13,360
extracting the most significant bit

104
00:04:13,360 --> 00:04:17,040
of this value that we that we computed

105
00:04:17,040 --> 00:04:20,478
so since this step is computed module q

106
00:04:20,478 --> 00:04:22,560
it's natural to use a scheme whose

107
00:04:22,560 --> 00:04:23,600
message space is

108
00:04:23,600 --> 00:04:27,520
eq so the scheme we use

109
00:04:27,520 --> 00:04:30,320
to bootstrap the base scheme is the gsw

110
00:04:30,320 --> 00:04:32,560
scheme because the noise grows slowly

111
00:04:32,560 --> 00:04:34,000
with this scheme

112
00:04:34,000 --> 00:04:37,120
the message space of jsw is actually a

113
00:04:37,120 --> 00:04:38,720
ring of polynomials

114
00:04:38,720 --> 00:04:41,600
so it's not zq but what we do is we

115
00:04:41,600 --> 00:04:42,160
select

116
00:04:42,160 --> 00:04:45,440
an element y which is actually a

117
00:04:45,440 --> 00:04:48,800
power of x such that the order of

118
00:04:48,800 --> 00:04:52,560
y is equal to q in in this

119
00:04:52,560 --> 00:04:56,000
ring then we see that

120
00:04:56,000 --> 00:04:57,919
because the order is skew when we

121
00:04:57,919 --> 00:05:00,000
multiply two powers of y

122
00:05:00,000 --> 00:05:01,840
we are actually adding the exponents

123
00:05:01,840 --> 00:05:03,520
module q

124
00:05:03,520 --> 00:05:05,360
so this means that we can use the

125
00:05:05,360 --> 00:05:06,800
homomorphic

126
00:05:06,800 --> 00:05:10,160
multiplication of gsw to

127
00:05:10,160 --> 00:05:12,720
compute linear functions in the exponent

128
00:05:12,720 --> 00:05:13,520
of of

129
00:05:13,520 --> 00:05:17,759
y in particular we can

130
00:05:17,759 --> 00:05:22,240
compute this first step which is linear

131
00:05:22,479 --> 00:05:24,960
so phi and tfh use the homomorphic

132
00:05:24,960 --> 00:05:27,440
multiplication of gsw

133
00:05:27,440 --> 00:05:31,360
to compute this inner product mod q

134
00:05:31,360 --> 00:05:34,479
in the exponent of y so they start

135
00:05:34,479 --> 00:05:37,280
with the encryption of m that belongs to

136
00:05:37,280 --> 00:05:38,240
the base scheme

137
00:05:38,240 --> 00:05:41,520
and has large noise and then the obtain

138
00:05:41,520 --> 00:05:41,840
and

139
00:05:41,840 --> 00:05:45,120
gsw encryption of y

140
00:05:45,120 --> 00:05:47,360
to the power of this inner product which

141
00:05:47,360 --> 00:05:49,919
is actually

142
00:05:49,919 --> 00:05:52,560
just the noise plus the message and this

143
00:05:52,560 --> 00:05:54,960
cipher text has a small noise itself

144
00:05:54,960 --> 00:05:58,240
although e is is large

145
00:05:58,240 --> 00:06:00,000
then they have this final step in which

146
00:06:00,000 --> 00:06:02,560
they transform a gsw encryption

147
00:06:02,560 --> 00:06:06,319
of a power of y that depends on m into

148
00:06:06,319 --> 00:06:09,120
a base scheme encryption of m and then

149
00:06:09,120 --> 00:06:09,840
the noise

150
00:06:09,840 --> 00:06:12,240
of this final cipher text is just

151
00:06:12,240 --> 00:06:14,319
slightly bigger than the noise

152
00:06:14,319 --> 00:06:18,840
of this gsw encryption so it's a small

153
00:06:18,840 --> 00:06:20,560
noise

154
00:06:20,560 --> 00:06:22,400
so what happens when we try to replace

155
00:06:22,400 --> 00:06:25,120
the lwe by the agcd problem in this

156
00:06:25,120 --> 00:06:27,840
bootstrapping framework

157
00:06:27,840 --> 00:06:31,120
well essentially we have three problems

158
00:06:31,120 --> 00:06:34,319
so the first problem is that we need

159
00:06:34,319 --> 00:06:38,800
a gswe scheme based on the agcd problem

160
00:06:38,800 --> 00:06:41,280
and the existing schemes are are not

161
00:06:41,280 --> 00:06:42,000
practical

162
00:06:42,000 --> 00:06:45,280
especially when we try to use them to

163
00:06:45,280 --> 00:06:48,800
encrypt polynomials the second problem

164
00:06:48,800 --> 00:06:52,160
is entering to fhe over the integers

165
00:06:52,160 --> 00:06:55,199
so here we have to work module p

166
00:06:55,199 --> 00:06:58,080
so we have a base scheme ciphertext with

167
00:06:58,080 --> 00:06:59,840
this format and the first thing we want

168
00:06:59,840 --> 00:07:01,039
to do is

169
00:07:01,039 --> 00:07:04,080
to reduce c module p so that we get the

170
00:07:04,080 --> 00:07:07,360
scaled message plus the noise

171
00:07:07,360 --> 00:07:10,479
but this means that the message space of

172
00:07:10,479 --> 00:07:10,880
the

173
00:07:10,880 --> 00:07:14,160
gswe scheme has to contain a power of

174
00:07:14,160 --> 00:07:17,199
x of order p for the lwe

175
00:07:17,199 --> 00:07:19,599
problem this works fine because here we

176
00:07:19,599 --> 00:07:20,240
have

177
00:07:20,240 --> 00:07:23,840
q and q is small and public

178
00:07:23,840 --> 00:07:26,960
but in our case this implies that

179
00:07:26,960 --> 00:07:30,639
that n is exponentially large

180
00:07:30,639 --> 00:07:33,919
in lambda because p is exponentially

181
00:07:33,919 --> 00:07:35,360
large in lambda

182
00:07:35,360 --> 00:07:37,280
so you can see that in this case even

183
00:07:37,280 --> 00:07:39,120
adding two polynomials

184
00:07:39,120 --> 00:07:41,840
already takes exponential time so this

185
00:07:41,840 --> 00:07:43,280
will not work

186
00:07:43,280 --> 00:07:46,720
and also in our case p is actually the

187
00:07:46,720 --> 00:07:47,919
secret key

188
00:07:47,919 --> 00:07:50,960
so the bootstrapping cannot leak

189
00:07:50,960 --> 00:07:53,599
these modulus but if we choose n such

190
00:07:53,599 --> 00:07:55,840
that we have

191
00:07:55,840 --> 00:07:58,639
a power of x of order p in this ring

192
00:07:58,639 --> 00:07:59,680
then actually n

193
00:07:59,680 --> 00:08:02,720
is leaking information of p third

194
00:08:02,720 --> 00:08:03,759
problem

195
00:08:03,759 --> 00:08:06,160
even if we can perform this reduction

196
00:08:06,160 --> 00:08:07,039
mod p

197
00:08:07,039 --> 00:08:10,879
on the exponent of y at the end we still

198
00:08:10,879 --> 00:08:11,520
have

199
00:08:11,520 --> 00:08:14,560
a gsw encryption of a power of y

200
00:08:14,560 --> 00:08:18,400
and we have to transform this into a

201
00:08:18,400 --> 00:08:23,359
basic scheme ciphertext encrypting m

202
00:08:23,599 --> 00:08:25,599
to solve the first problem let's

203
00:08:25,599 --> 00:08:27,840
construct a jswe scheme that can work

204
00:08:27,840 --> 00:08:29,919
natively with polynomials

205
00:08:29,919 --> 00:08:32,880
so consider a cycloatomic polynomial

206
00:08:32,880 --> 00:08:33,440
ring

207
00:08:33,440 --> 00:08:37,519
r and then we can sample a random

208
00:08:37,519 --> 00:08:38,839
polynomial k from this

209
00:08:38,839 --> 00:08:42,000
ring now given n

210
00:08:42,000 --> 00:08:45,680
agcd samples ci so which ci is an

211
00:08:45,680 --> 00:08:47,279
integer

212
00:08:47,279 --> 00:08:49,839
it's clear that we can multiply each ci

213
00:08:49,839 --> 00:08:50,560
by a power

214
00:08:50,560 --> 00:08:53,680
of x and add all of them and then we

215
00:08:53,680 --> 00:08:56,480
will obtain a polynomial c

216
00:08:56,480 --> 00:08:59,279
that can be written in this format and

217
00:08:59,279 --> 00:09:00,160
then

218
00:09:00,160 --> 00:09:03,680
it's clear that having n

219
00:09:03,680 --> 00:09:07,120
of these agcd samples are just having c

220
00:09:07,120 --> 00:09:11,680
it's the same right now we can randomize

221
00:09:11,680 --> 00:09:14,480
this polynomial c by multiplying it by

222
00:09:14,480 --> 00:09:16,000
this

223
00:09:16,000 --> 00:09:18,720
hidden random polynomial k and then we

224
00:09:18,720 --> 00:09:20,720
obtain a polynomial c bar

225
00:09:20,720 --> 00:09:24,959
now we ask you to to find p and k

226
00:09:24,959 --> 00:09:29,440
so we call this the r agcd problem

227
00:09:29,440 --> 00:09:32,800
and here we see that c

228
00:09:32,800 --> 00:09:36,560
is just equivalent to the agcd basically

229
00:09:36,560 --> 00:09:40,240
and then we are randomizing the agcd

230
00:09:40,240 --> 00:09:41,200
problem here

231
00:09:41,200 --> 00:09:44,800
so this ragcd problem cannot be easier

232
00:09:44,800 --> 00:09:48,640
than the original agcd problem

233
00:09:48,880 --> 00:09:52,240
with this we can encrypt polynomials

234
00:09:52,240 --> 00:09:55,600
in two types of ciphertexts the first

235
00:09:55,600 --> 00:09:57,760
one is the scalar ciphertext in this

236
00:09:57,760 --> 00:09:58,480
case we

237
00:09:58,480 --> 00:10:02,640
take a polynomial m and to encrypt it we

238
00:10:02,640 --> 00:10:05,600
multiply by scaling factor we sample two

239
00:10:05,600 --> 00:10:06,640
polynomials

240
00:10:06,640 --> 00:10:09,839
r and q and we multiply

241
00:10:09,839 --> 00:10:13,040
q by the secret integer p we

242
00:10:13,040 --> 00:10:16,079
add all these three terms

243
00:10:16,079 --> 00:10:19,279
and we randomize them with the

244
00:10:19,279 --> 00:10:21,839
secret polynomial k so we are encrypting

245
00:10:21,839 --> 00:10:23,040
a polynomial m

246
00:10:23,040 --> 00:10:26,800
into another polynomial the second type

247
00:10:26,800 --> 00:10:27,920
is the

248
00:10:27,920 --> 00:10:30,959
vector ciphertext in this case r

249
00:10:30,959 --> 00:10:34,240
and q are vectors of polynomials

250
00:10:34,240 --> 00:10:38,720
g is just this special vector here

251
00:10:38,720 --> 00:10:40,800
so it's just a vector with powers of

252
00:10:40,800 --> 00:10:41,760
some integer

253
00:10:41,760 --> 00:10:44,800
for instance it can be two

254
00:10:44,800 --> 00:10:48,160
and then uh instead of the scanning

255
00:10:48,160 --> 00:10:49,920
factor we are multiplying m by this

256
00:10:49,920 --> 00:10:51,760
vector and we are randomizing

257
00:10:51,760 --> 00:10:54,560
all of this with uh this the secret

258
00:10:54,560 --> 00:10:55,839
polynomial k

259
00:10:55,839 --> 00:10:58,480
so we are encrypting a polynomial m into

260
00:10:58,480 --> 00:10:59,519
a vector of

261
00:10:59,519 --> 00:11:03,200
l polynomials then we define this mixed

262
00:11:03,200 --> 00:11:05,440
homomorphic product

263
00:11:05,440 --> 00:11:09,120
and we should take a scalar ciphertext

264
00:11:09,120 --> 00:11:12,880
vector ciphertext then we decompose

265
00:11:12,880 --> 00:11:16,800
the scalar cipher text in base b

266
00:11:16,800 --> 00:11:20,079
so that we have l polynomials with

267
00:11:20,079 --> 00:11:22,560
small coefficients and then we just have

268
00:11:22,560 --> 00:11:25,040
to compute the inner product of this

269
00:11:25,040 --> 00:11:28,959
vector times the the vector ciphertext

270
00:11:28,959 --> 00:11:29,519
itself

271
00:11:29,519 --> 00:11:31,920
so this is uh inner product so of course

272
00:11:31,920 --> 00:11:32,959
at the end we have

273
00:11:32,959 --> 00:11:37,120
a scalar again and just like for the

274
00:11:37,120 --> 00:11:40,640
tfhe scheme which has this external

275
00:11:40,640 --> 00:11:41,519
product

276
00:11:41,519 --> 00:11:44,079
using this mixed homomorphic product is

277
00:11:44,079 --> 00:11:45,279
more efficient than

278
00:11:45,279 --> 00:11:48,399
simply using the gsw homomorphic

279
00:11:48,399 --> 00:11:50,959
application

280
00:11:51,600 --> 00:11:54,000
with this we solved the first problem so

281
00:11:54,000 --> 00:11:55,760
now we have a gsw

282
00:11:55,760 --> 00:11:58,079
scheme that operates homomorphically on

283
00:11:58,079 --> 00:11:59,440
polynomials

284
00:11:59,440 --> 00:12:01,040
now we are going to solve the problem

285
00:12:01,040 --> 00:12:02,560
related to

286
00:12:02,560 --> 00:12:06,800
the size and the secretness of p

287
00:12:06,880 --> 00:12:09,600
so we have this basic scheme ciphertext

288
00:12:09,600 --> 00:12:11,120
that has this format

289
00:12:11,120 --> 00:12:13,440
and the problem here is p right because

290
00:12:13,440 --> 00:12:16,320
p is secret and it's too big

291
00:12:16,320 --> 00:12:19,120
so maybe one idea would be to apply a

292
00:12:19,120 --> 00:12:20,959
modulo switching like the one described

293
00:12:20,959 --> 00:12:23,680
in this paper so that we replace

294
00:12:23,680 --> 00:12:27,279
p by n and then we have this new cipher

295
00:12:27,279 --> 00:12:27,920
text

296
00:12:27,920 --> 00:12:31,040
c prime in this case we can define y as

297
00:12:31,040 --> 00:12:33,839
x square and then it's clear that in

298
00:12:33,839 --> 00:12:34,959
this ring

299
00:12:34,959 --> 00:12:37,680
since x to the n is minus one x squared

300
00:12:37,680 --> 00:12:38,320
to the n

301
00:12:38,320 --> 00:12:42,160
is equal to 1. so the order of y is n

302
00:12:42,160 --> 00:12:44,079
and then we we could define the

303
00:12:44,079 --> 00:12:45,680
bootstrapping keys

304
00:12:45,680 --> 00:12:48,880
as in gsw encryptions of

305
00:12:48,880 --> 00:12:50,880
these powers of y so what we put in the

306
00:12:50,880 --> 00:12:53,120
exponent are powers of two

307
00:12:53,120 --> 00:12:56,720
multiplied by zero or by one then

308
00:12:56,720 --> 00:12:59,920
given this ciphertext c prime we can

309
00:12:59,920 --> 00:13:01,920
compute the binary decomposition of c

310
00:13:01,920 --> 00:13:04,560
prime and then we have these bits and we

311
00:13:04,560 --> 00:13:06,320
use the bits to select

312
00:13:06,320 --> 00:13:08,959
the bootstrapping keys that we want to

313
00:13:08,959 --> 00:13:11,279
to multiply homomorphically

314
00:13:11,279 --> 00:13:13,440
so we multiply this this bootstrapping

315
00:13:13,440 --> 00:13:15,040
case homomorphically

316
00:13:15,040 --> 00:13:18,839
and you see that if you replace b by c i

317
00:13:18,839 --> 00:13:20,480
here

318
00:13:20,480 --> 00:13:22,880
and we multiply all of them we are

319
00:13:22,880 --> 00:13:24,959
actually adding the exponents

320
00:13:24,959 --> 00:13:26,560
so what we have at the end is this

321
00:13:26,560 --> 00:13:28,880
summation in the exponent of y

322
00:13:28,880 --> 00:13:31,920
but this summation is exactly c prime

323
00:13:31,920 --> 00:13:33,040
right because the

324
00:13:33,040 --> 00:13:34,959
ci's here are just the binary

325
00:13:34,959 --> 00:13:37,200
decomposition of c prime

326
00:13:37,200 --> 00:13:39,920
so what we get at the end is y to the

327
00:13:39,920 --> 00:13:40,720
power of c

328
00:13:40,720 --> 00:13:44,000
prime but module n because the order of

329
00:13:44,000 --> 00:13:44,320
y

330
00:13:44,320 --> 00:13:47,440
is n so c prime module n is exactly the

331
00:13:47,440 --> 00:13:48,320
message

332
00:13:48,320 --> 00:13:50,480
times the scaling factor plus the noise

333
00:13:50,480 --> 00:13:52,560
and this is exactly what we want

334
00:13:52,560 --> 00:13:55,439
in the exponent

335
00:13:55,680 --> 00:13:58,639
well well but things are not that simple

336
00:13:58,639 --> 00:13:59,040
and

337
00:13:59,040 --> 00:14:03,440
what we did here is simply not secure

338
00:14:03,440 --> 00:14:06,079
so the problem is that this modulo

339
00:14:06,079 --> 00:14:08,000
switching is intended to switch

340
00:14:08,000 --> 00:14:11,519
the secret key p to another secret key

341
00:14:11,519 --> 00:14:14,639
but we replaced p by n and

342
00:14:14,639 --> 00:14:17,440
n is public so it's clear that if you

343
00:14:17,440 --> 00:14:17,920
have c

344
00:14:17,920 --> 00:14:19,839
prime and you have n you can simply

345
00:14:19,839 --> 00:14:24,240
decrypt c prime to recover the message m

346
00:14:24,320 --> 00:14:27,199
okay but maybe we can switch from p to n

347
00:14:27,199 --> 00:14:29,680
in a hidden way maybe using the

348
00:14:29,680 --> 00:14:32,880
homomorphic operations of gsw scheme so

349
00:14:32,880 --> 00:14:33,600
that this c

350
00:14:33,600 --> 00:14:37,040
prime is only produced in a encrypted

351
00:14:37,040 --> 00:14:37,760
way

352
00:14:37,760 --> 00:14:40,320
and then having an encryption of c prime

353
00:14:40,320 --> 00:14:44,160
then is safe

354
00:14:44,160 --> 00:14:47,440
but how can we do this so we have

355
00:14:47,440 --> 00:14:49,839
the base scheme ciphertext with this

356
00:14:49,839 --> 00:14:50,800
format

357
00:14:50,800 --> 00:14:53,279
and it's clear that we if we simply

358
00:14:53,279 --> 00:14:55,839
multiply c by n and divide by p

359
00:14:55,839 --> 00:14:59,519
we are replacing p by n and then

360
00:14:59,519 --> 00:15:01,600
the noise and the scaling factor will be

361
00:15:01,600 --> 00:15:03,600
multiplied by n over p

362
00:15:03,600 --> 00:15:05,680
but this is okay because then it means

363
00:15:05,680 --> 00:15:07,600
that we just have a new noise term and a

364
00:15:07,600 --> 00:15:08,399
new scanning

365
00:15:08,399 --> 00:15:11,440
scaling factor moreover if we consider

366
00:15:11,440 --> 00:15:12,000
this

367
00:15:12,000 --> 00:15:15,440
module n then this term disappears

368
00:15:15,440 --> 00:15:18,800
and what we have is the new noise

369
00:15:18,800 --> 00:15:21,040
plus the message times the scaling

370
00:15:21,040 --> 00:15:22,639
factor

371
00:15:22,639 --> 00:15:26,240
so considering this we can try to

372
00:15:26,240 --> 00:15:28,240
include this n over p in the

373
00:15:28,240 --> 00:15:30,000
bootstrapping keys

374
00:15:30,000 --> 00:15:33,279
so that uh this

375
00:15:33,279 --> 00:15:35,120
information that is performing the

376
00:15:35,120 --> 00:15:36,399
modulo switching is

377
00:15:36,399 --> 00:15:38,480
hidden is encrypted in the bootstrapping

378
00:15:38,480 --> 00:15:40,079
keys right

379
00:15:40,079 --> 00:15:42,320
so for instance instead of just using

380
00:15:42,320 --> 00:15:43,360
powers of 2

381
00:15:43,360 --> 00:15:46,079
in the exponents of y we can use powers

382
00:15:46,079 --> 00:15:49,279
of 2 multiplied by n over p

383
00:15:49,279 --> 00:15:52,720
and then we can compute the binary

384
00:15:52,720 --> 00:15:54,160
decomposition of c

385
00:15:54,160 --> 00:15:57,360
itself not of c prime and use these

386
00:15:57,360 --> 00:16:00,240
bits to select the bootstrapping keys

387
00:16:00,240 --> 00:16:02,320
that we want to multiply homomorphically

388
00:16:02,320 --> 00:16:03,759
as we did before

389
00:16:03,759 --> 00:16:07,199
so now when we multiply this

390
00:16:07,199 --> 00:16:09,440
bootstrapping keys again we are adding

391
00:16:09,440 --> 00:16:10,320
the exponents

392
00:16:10,320 --> 00:16:13,519
so what we have at the end is n over p

393
00:16:13,519 --> 00:16:16,480
which is a common factor times this

394
00:16:16,480 --> 00:16:18,079
summation

395
00:16:18,079 --> 00:16:21,199
but this summation is simply c so we

396
00:16:21,199 --> 00:16:21,680
have

397
00:16:21,680 --> 00:16:25,120
n over p times c module n because the

398
00:16:25,120 --> 00:16:26,079
order of y

399
00:16:26,079 --> 00:16:30,240
is n and then this is simply

400
00:16:30,240 --> 00:16:33,279
the noise plus the message times some

401
00:16:33,279 --> 00:16:34,399
scaling factor

402
00:16:34,399 --> 00:16:38,560
so this is exactly what we want to have

403
00:16:39,120 --> 00:16:43,600
oh wait but we have a problem again so

404
00:16:43,600 --> 00:16:44,720
the problem now is that the

405
00:16:44,720 --> 00:16:48,839
bootstrapping keys are not well defined

406
00:16:48,839 --> 00:16:52,320
so here the problem is that these

407
00:16:52,320 --> 00:16:54,240
fractions that we are trying to encrypt

408
00:16:54,240 --> 00:16:55,920
in the exponent they are not

409
00:16:55,920 --> 00:16:58,000
integral right they are really rational

410
00:16:58,000 --> 00:16:59,040
values

411
00:16:59,040 --> 00:17:01,600
so we cannot encrypt these powers of y

412
00:17:01,600 --> 00:17:05,119
in this way

413
00:17:05,119 --> 00:17:07,679
but something that we can do for sure is

414
00:17:07,679 --> 00:17:10,000
rounding these fractions

415
00:17:10,000 --> 00:17:13,199
so we can define the bootstrapping keys

416
00:17:13,199 --> 00:17:16,079
using the same fractions here the powers

417
00:17:16,079 --> 00:17:18,000
of two multiplied by n divided by

418
00:17:18,000 --> 00:17:22,079
p but rounded and then

419
00:17:22,079 --> 00:17:25,439
i we know that for n value x when we

420
00:17:25,439 --> 00:17:25,839
round

421
00:17:25,839 --> 00:17:28,160
x what we get actually is the value

422
00:17:28,160 --> 00:17:29,200
itself plus

423
00:17:29,200 --> 00:17:31,520
some epsilon that is smaller than one

424
00:17:31,520 --> 00:17:33,440
half

425
00:17:33,440 --> 00:17:36,320
so if we do the same sequence of

426
00:17:36,320 --> 00:17:38,320
homomorphic multiplications as before so

427
00:17:38,320 --> 00:17:41,520
we take the basis scheme ciphertext c

428
00:17:41,520 --> 00:17:43,679
we compute a binary decomposition of it

429
00:17:43,679 --> 00:17:44,960
and we use the bits

430
00:17:44,960 --> 00:17:47,919
ci to select the keys and we multiply

431
00:17:47,919 --> 00:17:49,200
the keys

432
00:17:49,200 --> 00:17:51,840
what we will be doing then we will be

433
00:17:51,840 --> 00:17:54,400
summing the same values as before

434
00:17:54,400 --> 00:17:58,160
plus the small epsilons so

435
00:17:58,160 --> 00:18:01,760
as before we will have c times

436
00:18:01,760 --> 00:18:05,280
n divided by p module n this is simply

437
00:18:05,280 --> 00:18:06,400
the

438
00:18:06,400 --> 00:18:09,840
the scale of noise plus the message

439
00:18:09,840 --> 00:18:12,960
times delta prime

440
00:18:12,960 --> 00:18:16,720
and the sum of all these uh

441
00:18:16,720 --> 00:18:19,840
epsilons so we have a new epsilon term

442
00:18:19,840 --> 00:18:20,640
here

443
00:18:20,640 --> 00:18:23,760
which is a smaller than gamma over two

444
00:18:23,760 --> 00:18:24,080
right

445
00:18:24,080 --> 00:18:26,240
gamma is the number of terms in this

446
00:18:26,240 --> 00:18:27,200
product

447
00:18:27,200 --> 00:18:29,039
and over two because each one is smaller

448
00:18:29,039 --> 00:18:30,799
than one half

449
00:18:30,799 --> 00:18:34,799
so this is okay right this um

450
00:18:34,799 --> 00:18:38,480
we can simply consider that this

451
00:18:38,480 --> 00:18:40,960
r prime plus epsilon is the new noise

452
00:18:40,960 --> 00:18:43,039
term so we are really getting something

453
00:18:43,039 --> 00:18:45,120
in the format that we wanted a scaled

454
00:18:45,120 --> 00:18:48,799
message plus some noise

455
00:18:49,520 --> 00:18:52,480
and this time it's secure because c

456
00:18:52,480 --> 00:18:54,480
prime is just being produced

457
00:18:54,480 --> 00:18:58,400
in the exponent of y so it's encrypted

458
00:18:58,400 --> 00:19:00,960
and everything is well defined because

459
00:19:00,960 --> 00:19:04,640
we are just using integers here

460
00:19:04,720 --> 00:19:06,559
so with this we solved the first two

461
00:19:06,559 --> 00:19:09,120
problems now we have a gsw like scheme

462
00:19:09,120 --> 00:19:11,200
that works with polynomials

463
00:19:11,200 --> 00:19:14,480
and we also solved the problem related

464
00:19:14,480 --> 00:19:16,320
to p

465
00:19:16,320 --> 00:19:18,400
now we still need a way to transform

466
00:19:18,400 --> 00:19:19,520
this gsw

467
00:19:19,520 --> 00:19:22,880
encryption of this power of y into a

468
00:19:22,880 --> 00:19:24,080
base scheme

469
00:19:24,080 --> 00:19:27,120
encryption of m

470
00:19:27,120 --> 00:19:29,679
to solve the third problem we propose a

471
00:19:29,679 --> 00:19:31,600
functional key switching procedure

472
00:19:31,600 --> 00:19:34,640
so let's consider two rings r1 and r2

473
00:19:34,640 --> 00:19:37,200
each each ring is defined by these

474
00:19:37,200 --> 00:19:39,039
integers

475
00:19:39,039 --> 00:19:43,280
n1 and n2 so let's also consider two

476
00:19:43,280 --> 00:19:47,280
secret keys each key is composed

477
00:19:47,280 --> 00:19:52,880
of the integer and the secret polynomial

478
00:19:52,880 --> 00:19:56,400
then given the two keys and also one

479
00:19:56,400 --> 00:19:56,960
function

480
00:19:56,960 --> 00:19:59,520
f we can generate a public key it's

481
00:19:59,520 --> 00:20:00,400
actually

482
00:20:00,400 --> 00:20:02,799
the key used to perform the key

483
00:20:02,799 --> 00:20:04,400
switching procedure

484
00:20:04,400 --> 00:20:07,919
this key is essentially one encryption

485
00:20:07,919 --> 00:20:11,919
of sk1 times the

486
00:20:11,919 --> 00:20:15,039
truth table of f under

487
00:20:15,039 --> 00:20:18,720
the secret key sk2

488
00:20:18,960 --> 00:20:23,120
then using this key switching key

489
00:20:23,120 --> 00:20:26,799
we can take an encryption of a message m

490
00:20:26,799 --> 00:20:30,480
under the first key and we can produce

491
00:20:30,480 --> 00:20:34,000
an encryption of f of m under the second

492
00:20:34,000 --> 00:20:38,320
key also this first encryption

493
00:20:38,320 --> 00:20:40,960
belongs to r1 and the second encryption

494
00:20:40,960 --> 00:20:43,280
belongs to r2 so this means that we can

495
00:20:43,280 --> 00:20:45,039
also switch the rings

496
00:20:45,039 --> 00:20:49,600
if we choose our one different of r2

497
00:20:49,600 --> 00:20:53,360
in particular if we set n1 as

498
00:20:53,360 --> 00:20:58,080
an integer n and n2 is simply 1

499
00:20:58,080 --> 00:21:01,919
then the first ring is a polynomial ring

500
00:21:01,919 --> 00:21:03,280
and the second ring is

501
00:21:03,280 --> 00:21:06,720
actually just the integers so this

502
00:21:06,720 --> 00:21:10,159
means that when we switch from r1 to r2

503
00:21:10,159 --> 00:21:12,720
we are actually switching from the ra

504
00:21:12,720 --> 00:21:16,080
gcd problem to the original agcd problem

505
00:21:16,080 --> 00:21:19,200
because now we have something over the

506
00:21:19,200 --> 00:21:20,640
integers

507
00:21:20,640 --> 00:21:23,760
then this also means that we can we are

508
00:21:23,760 --> 00:21:26,240
taking a cipher text

509
00:21:26,240 --> 00:21:28,799
of the gsw and we are producing a

510
00:21:28,799 --> 00:21:31,600
ciphertext of the basis scheme

511
00:21:31,600 --> 00:21:34,159
also because we know some bounds to this

512
00:21:34,159 --> 00:21:35,120
value e

513
00:21:35,120 --> 00:21:38,480
and we know that delta is bigger than e

514
00:21:38,480 --> 00:21:40,400
we can easily choose this function f

515
00:21:40,400 --> 00:21:41,840
such that f of

516
00:21:41,840 --> 00:21:45,919
this power of y is equal to m

517
00:21:45,919 --> 00:21:48,960
so if we put all this together we

518
00:21:48,960 --> 00:21:50,880
see that using the functional key

519
00:21:50,880 --> 00:21:52,480
switching procedure we can actually

520
00:21:52,480 --> 00:21:53,600
switch from a

521
00:21:53,600 --> 00:21:56,799
gsw encryption of some power of

522
00:21:56,799 --> 00:22:00,080
y of this format to an encryption of m

523
00:22:00,080 --> 00:22:02,640
a basis scheme encryption of m and then

524
00:22:02,640 --> 00:22:04,799
this encryption

525
00:22:04,799 --> 00:22:08,400
does not depend on e so we have removed

526
00:22:08,400 --> 00:22:11,280
the original noise that we had before

527
00:22:11,280 --> 00:22:12,000
and the noise

528
00:22:12,000 --> 00:22:14,400
in this encryption is just slightly

529
00:22:14,400 --> 00:22:15,840
bigger than the noise

530
00:22:15,840 --> 00:22:20,959
in this gsw encryption which is small

531
00:22:22,080 --> 00:22:24,240
so our bootstrapping procedure works

532
00:22:24,240 --> 00:22:25,360
like this at the end

533
00:22:25,360 --> 00:22:28,640
we start with an agcd encryption of fm

534
00:22:28,640 --> 00:22:30,320
with large noise

535
00:22:30,320 --> 00:22:32,480
then we use the mixed homomorphic

536
00:22:32,480 --> 00:22:33,600
multiplication of

537
00:22:33,600 --> 00:22:37,360
our gswe scheme to switch

538
00:22:37,360 --> 00:22:39,760
the modulus from p to n and perform the

539
00:22:39,760 --> 00:22:41,840
reduction module n

540
00:22:41,840 --> 00:22:44,799
then this produces an encryption of a

541
00:22:44,799 --> 00:22:46,480
power of y

542
00:22:46,480 --> 00:22:49,760
under the ragcd problem

543
00:22:49,760 --> 00:22:51,360
and then we use the functional key

544
00:22:51,360 --> 00:22:53,039
switching procedure

545
00:22:53,039 --> 00:22:56,080
to transform this encryption of power of

546
00:22:56,080 --> 00:22:59,360
y in a base scheme encryption of m

547
00:22:59,360 --> 00:23:02,320
with a small noise

548
00:23:03,200 --> 00:23:05,679
so we have adapted this bootstrapping

549
00:23:05,679 --> 00:23:08,080
framework from field and tfet to

550
00:23:08,080 --> 00:23:09,679
full homomorph encryption over the

551
00:23:09,679 --> 00:23:12,080
integers and

552
00:23:12,080 --> 00:23:14,559
we implemented the proof of concept in c

553
00:23:14,559 --> 00:23:15,520
plus

554
00:23:15,520 --> 00:23:18,559
and we showed that we can also

555
00:23:18,559 --> 00:23:20,840
perform the bootstrap in less than one

556
00:23:20,840 --> 00:23:22,080
second

557
00:23:22,080 --> 00:23:24,720
and the search code is available on

558
00:23:24,720 --> 00:23:27,200
github

559
00:23:27,200 --> 00:23:29,200
and if you have any questions or

560
00:23:29,200 --> 00:23:30,400
comments please

561
00:23:30,400 --> 00:23:33,280
just contact me and i will be for sure

562
00:23:33,280 --> 00:23:37,840
happy to discuss

