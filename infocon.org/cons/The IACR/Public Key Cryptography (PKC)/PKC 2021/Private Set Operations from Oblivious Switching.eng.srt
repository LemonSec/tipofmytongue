1
00:00:02,879 --> 00:00:03,679
hello

2
00:00:03,679 --> 00:00:05,839
i'm gayathri garimella and i'm happy to

3
00:00:05,839 --> 00:00:07,680
be presenting our work

4
00:00:07,680 --> 00:00:10,000
private set operations from oblivious

5
00:00:10,000 --> 00:00:11,280
switching

6
00:00:11,280 --> 00:00:14,000
this is joint work with my co-authors

7
00:00:14,000 --> 00:00:15,360
payment mohassel

8
00:00:15,360 --> 00:00:18,800
mike rosalek saeed sadegia and jaspal

9
00:00:18,800 --> 00:00:21,119
singh

10
00:00:23,039 --> 00:00:26,320
private set intersection or psi allows

11
00:00:26,320 --> 00:00:28,560
two mutually distrusting parties

12
00:00:28,560 --> 00:00:30,800
to jointly compute the items they have

13
00:00:30,800 --> 00:00:32,000
in common

14
00:00:32,000 --> 00:00:34,880
for example if alice's set has letters

15
00:00:34,880 --> 00:00:36,800
of the word covert 19

16
00:00:36,800 --> 00:00:39,520
and bob has letters of the word virtual

17
00:00:39,520 --> 00:00:40,559
then we expect

18
00:00:40,559 --> 00:00:43,920
alice to learn the letters v vni

19
00:00:43,920 --> 00:00:47,120
and nothing else about bob said in

20
00:00:47,120 --> 00:00:48,320
recent years

21
00:00:48,320 --> 00:00:49,840
there has been much interest and

22
00:00:49,840 --> 00:00:53,039
progress in making psi practically very

23
00:00:53,039 --> 00:00:54,800
fast and efficient

24
00:00:54,800 --> 00:00:56,840
in both the semi honest and malicious

25
00:00:56,840 --> 00:00:58,160
setting

26
00:00:58,160 --> 00:01:00,719
in psi the output reveals the entire

27
00:01:00,719 --> 00:01:02,879
contents of the intersection

28
00:01:02,879 --> 00:01:05,360
but what if alice only wants to learn

29
00:01:05,360 --> 00:01:07,280
some partial information

30
00:01:07,280 --> 00:01:10,240
about the intersection these protocols

31
00:01:10,240 --> 00:01:12,880
don't extend immediately

32
00:01:12,880 --> 00:01:15,119
a motivating example was described in

33
00:01:15,119 --> 00:01:16,159
this paper

34
00:01:16,159 --> 00:01:19,840
by google in 2017 to measure the revenue

35
00:01:19,840 --> 00:01:22,479
from online advertisement viewers who

36
00:01:22,479 --> 00:01:24,840
later perform a related offline

37
00:01:24,840 --> 00:01:26,320
transaction

38
00:01:26,320 --> 00:01:28,159
the functionality they need can be

39
00:01:28,159 --> 00:01:30,159
abstracted out as

40
00:01:30,159 --> 00:01:33,280
alice has a set of items and this time

41
00:01:33,280 --> 00:01:36,720
each item has a payload bob has his set

42
00:01:36,720 --> 00:01:38,240
of items

43
00:01:38,240 --> 00:01:40,720
the goal is for bob to learn the sum of

44
00:01:40,720 --> 00:01:41,759
the payloads

45
00:01:41,759 --> 00:01:44,960
of all the items in the intersection

46
00:01:44,960 --> 00:01:46,479
he needs to learn the sum of the

47
00:01:46,479 --> 00:01:49,200
payloads of vni which is 15

48
00:01:49,200 --> 00:01:52,079
in this example

49
00:01:52,479 --> 00:01:55,759
more generally we want robust protocols

50
00:01:55,759 --> 00:01:59,119
that let alice and bob compute any f

51
00:01:59,119 --> 00:02:00,719
over the intersection

52
00:02:00,719 --> 00:02:03,759
and hide all other information

53
00:02:03,759 --> 00:02:06,159
we call this problem private computation

54
00:02:06,159 --> 00:02:07,759
on set intersection

55
00:02:07,759 --> 00:02:09,520
and it has been studied in the following

56
00:02:09,520 --> 00:02:10,800
works

57
00:02:10,800 --> 00:02:12,720
the state-of-the-art construction was

58
00:02:12,720 --> 00:02:14,080
proposed by

59
00:02:14,080 --> 00:02:17,599
pinkus schneider kochenko and yanai

60
00:02:17,599 --> 00:02:20,480
in 2019. i will refer to their

61
00:02:20,480 --> 00:02:21,520
construction

62
00:02:21,520 --> 00:02:24,000
as psty protocol for the rest of the

63
00:02:24,000 --> 00:02:26,239
talk

64
00:02:27,040 --> 00:02:29,440
we start by identifying a performance

65
00:02:29,440 --> 00:02:30,640
gap

66
00:02:30,640 --> 00:02:32,959
concretely to compute the plane

67
00:02:32,959 --> 00:02:34,000
intersection

68
00:02:34,000 --> 00:02:36,000
of a million items in the semi-honest

69
00:02:36,000 --> 00:02:38,480
setting the best run time is well under

70
00:02:38,480 --> 00:02:40,080
a minute

71
00:02:40,080 --> 00:02:42,239
in contrast computing even the

72
00:02:42,239 --> 00:02:44,400
cardinality over the intersection

73
00:02:44,400 --> 00:02:47,519
by the fastest semi honest pcsi protocol

74
00:02:47,519 --> 00:02:50,640
takes around 9 minutes pcsi

75
00:02:50,640 --> 00:02:53,680
is 20 times slower and need 30 times

76
00:02:53,680 --> 00:02:55,680
more communication

77
00:02:55,680 --> 00:02:58,879
we want to bridge this gap

78
00:02:58,879 --> 00:03:02,560
our starting point is the psty protocol

79
00:03:02,560 --> 00:03:05,040
it starts with a pre-processing phase

80
00:03:05,040 --> 00:03:06,159
where alice has

81
00:03:06,159 --> 00:03:09,840
input x and bob has input y

82
00:03:09,840 --> 00:03:12,800
for the rest of the stock let's assume

83
00:03:12,800 --> 00:03:15,599
the size of the sets is n

84
00:03:15,599 --> 00:03:18,480
at the end of the pre-processing phase

85
00:03:18,480 --> 00:03:19,440
alice learns

86
00:03:19,440 --> 00:03:23,360
a fixed ordering of her items

87
00:03:23,360 --> 00:03:26,879
alice and bob then learn vectors s and t

88
00:03:26,879 --> 00:03:30,480
such that s i and t i are an additive

89
00:03:30,480 --> 00:03:30,959
share

90
00:03:30,959 --> 00:03:34,640
of 0 if xi is in the intersection

91
00:03:34,640 --> 00:03:37,840
if not si and ti are a sharing of a

92
00:03:37,840 --> 00:03:40,239
pseudorandom value

93
00:03:40,239 --> 00:03:41,920
to compute a function over the

94
00:03:41,920 --> 00:03:44,959
intersection the sis and tis now need to

95
00:03:44,959 --> 00:03:46,080
be compared

96
00:03:46,080 --> 00:03:48,720
but in such a way that the outcome of no

97
00:03:48,720 --> 00:03:50,080
individual comparison

98
00:03:50,080 --> 00:03:53,519
is leaked to alice or bob so all the

99
00:03:53,519 --> 00:03:54,400
comparisons

100
00:03:54,400 --> 00:03:58,000
are made inside the secure computation

101
00:03:58,000 --> 00:03:59,920
the output of the comparisons are then

102
00:03:59,920 --> 00:04:01,519
fed into another circuit

103
00:04:01,519 --> 00:04:04,400
that computes f

104
00:04:04,720 --> 00:04:06,640
now let's take a closer look at the

105
00:04:06,640 --> 00:04:11,040
communication cost of comparing strings

106
00:04:11,040 --> 00:04:13,760
comparing two l-bit strings is a boolean

107
00:04:13,760 --> 00:04:14,640
circuit

108
00:04:14,640 --> 00:04:17,759
with order l non-free gates and needs

109
00:04:17,759 --> 00:04:18,160
order

110
00:04:18,160 --> 00:04:21,440
l times kappa communication where kappa

111
00:04:21,440 --> 00:04:25,360
is the security parameter concretely

112
00:04:25,360 --> 00:04:28,240
the circuit for the order n comparisons

113
00:04:28,240 --> 00:04:30,160
accounts for 96

114
00:04:30,160 --> 00:04:32,720
of the communication cost in the psty

115
00:04:32,720 --> 00:04:34,960
protocol

116
00:04:34,960 --> 00:04:37,919
in contrast the state-of-the-art psi

117
00:04:37,919 --> 00:04:38,720
protocols

118
00:04:38,720 --> 00:04:40,840
use a special purpose comparison

119
00:04:40,840 --> 00:04:44,080
protocol to compare two l-bit strings

120
00:04:44,080 --> 00:04:46,960
it requires just 4.5 times kappa bits of

121
00:04:46,960 --> 00:04:48,560
communication

122
00:04:48,560 --> 00:04:50,240
notice that the communication is

123
00:04:50,240 --> 00:04:53,040
independent of the length of the strings

124
00:04:53,040 --> 00:04:56,160
the caveat is that these equality tests

125
00:04:56,160 --> 00:04:58,800
reveal the output of comparison to one

126
00:04:58,800 --> 00:05:01,520
of the parties

127
00:05:02,000 --> 00:05:04,320
since the special purpose equality tests

128
00:05:04,320 --> 00:05:05,919
are very efficient

129
00:05:05,919 --> 00:05:07,360
we are interested in making them

130
00:05:07,360 --> 00:05:10,720
compatible with the preprocessing step

131
00:05:10,720 --> 00:05:12,880
our main idea is that we use an

132
00:05:12,880 --> 00:05:14,639
oblivious switching network

133
00:05:14,639 --> 00:05:16,800
to permute the order of the equality

134
00:05:16,800 --> 00:05:18,000
tests

135
00:05:18,000 --> 00:05:21,440
such a primitive needs order n log n ots

136
00:05:21,440 --> 00:05:23,680
over a switching network making the

137
00:05:23,680 --> 00:05:25,440
communication cost

138
00:05:25,440 --> 00:05:28,720
order n log n times kappa

139
00:05:28,720 --> 00:05:31,280
so asymptotically we replace the

140
00:05:31,280 --> 00:05:33,759
comparisons in the secure computation

141
00:05:33,759 --> 00:05:36,400
with order n log n times kappa for

142
00:05:36,400 --> 00:05:37,440
shuffling

143
00:05:37,440 --> 00:05:39,120
and order n times kappa for the

144
00:05:39,120 --> 00:05:40,960
comparisons

145
00:05:40,960 --> 00:05:43,120
in almost all cases log n is much

146
00:05:43,120 --> 00:05:45,280
smaller than the length of the strings

147
00:05:45,280 --> 00:05:48,638
giving us our improvement

148
00:05:49,600 --> 00:05:51,840
our contributions can be summarized as

149
00:05:51,840 --> 00:05:53,199
follows

150
00:05:53,199 --> 00:05:56,000
we propose a new protocol to compute any

151
00:05:56,000 --> 00:05:58,639
arbitrary function over the intersection

152
00:05:58,639 --> 00:06:01,360
provided that it is always safe to leak

153
00:06:01,360 --> 00:06:04,160
the cardinality of the intersection

154
00:06:04,160 --> 00:06:06,720
this gives us 2.5 to 3 times lower

155
00:06:06,720 --> 00:06:08,880
communication than psty

156
00:06:08,880 --> 00:06:12,800
and faster runtimes on slower networks

157
00:06:12,800 --> 00:06:14,960
our main construction is what we call

158
00:06:14,960 --> 00:06:16,160
the protocol core

159
00:06:16,160 --> 00:06:20,240
or pc as i will show later in this talk

160
00:06:20,240 --> 00:06:21,680
this immediately gives us the

161
00:06:21,680 --> 00:06:23,600
cardinality

162
00:06:23,600 --> 00:06:26,000
next we show how to use the protocol

163
00:06:26,000 --> 00:06:26,880
core

164
00:06:26,880 --> 00:06:29,759
with order n ots to learn the

165
00:06:29,759 --> 00:06:30,639
intersection

166
00:06:30,639 --> 00:06:35,039
or the union of the sets protocol core

167
00:06:35,039 --> 00:06:37,440
with order and ots also can give us

168
00:06:37,440 --> 00:06:39,039
cardinality sum

169
00:06:39,039 --> 00:06:42,160
and more generally more generally f

170
00:06:42,160 --> 00:06:45,759
over the intersection in all these cases

171
00:06:45,759 --> 00:06:48,319
cardinality leak comes from the pc

172
00:06:48,319 --> 00:06:50,880
protocol

173
00:06:50,880 --> 00:06:53,199
protocol core with an additional osn

174
00:06:53,199 --> 00:06:55,199
gives us our most general case

175
00:06:55,199 --> 00:06:57,120
where alice and bob learn the secret

176
00:06:57,120 --> 00:07:00,319
shares of the intersection

177
00:07:01,199 --> 00:07:04,240
finally we have the first private id

178
00:07:04,240 --> 00:07:05,199
protocol

179
00:07:05,199 --> 00:07:07,599
that is dominated by symmetric key based

180
00:07:07,599 --> 00:07:09,520
operations

181
00:07:09,520 --> 00:07:11,840
we get this using order and instances of

182
00:07:11,840 --> 00:07:12,720
an opr

183
00:07:12,720 --> 00:07:15,840
and the union protocol the cost of an

184
00:07:15,840 --> 00:07:17,759
oprf is comparable to ot

185
00:07:17,759 --> 00:07:21,680
making this protocol very efficient

186
00:07:21,759 --> 00:07:23,599
for the rest of this talk i'll discuss

187
00:07:23,599 --> 00:07:25,599
the constructions of all the highlighted

188
00:07:25,599 --> 00:07:28,319
protocols

189
00:07:29,759 --> 00:07:33,039
let's start with the protocol core or pc

190
00:07:33,039 --> 00:07:35,520
which realizes a functionality we call

191
00:07:35,520 --> 00:07:38,080
the permuted characteristic

192
00:07:38,080 --> 00:07:41,199
here alice has her set x

193
00:07:41,199 --> 00:07:43,440
her input to the functionality is a

194
00:07:43,440 --> 00:07:44,960
permutation pi that

195
00:07:44,960 --> 00:07:49,120
she chooses bob sends his input y to the

196
00:07:49,120 --> 00:07:50,319
function

197
00:07:50,319 --> 00:07:53,599
and learns a bit vector e such that

198
00:07:53,599 --> 00:07:56,400
e i is one if alice's permuted item in

199
00:07:56,400 --> 00:07:57,440
that position i

200
00:07:57,440 --> 00:08:01,759
belongs to his set otherwise e i is zero

201
00:08:01,759 --> 00:08:04,800
bob doesn't know alice's input set x or

202
00:08:04,800 --> 00:08:07,280
pi so the contents of the intersection

203
00:08:07,280 --> 00:08:09,120
are hidden from him

204
00:08:09,120 --> 00:08:12,720
however the number of ones in vector e

205
00:08:12,720 --> 00:08:15,280
reveal the number of matches with items

206
00:08:15,280 --> 00:08:16,240
in a set

207
00:08:16,240 --> 00:08:18,000
which is essentially the cardinality

208
00:08:18,000 --> 00:08:20,400
function

209
00:08:21,599 --> 00:08:24,720
one of the main primitives we use for pc

210
00:08:24,720 --> 00:08:27,759
is batch private equality tests

211
00:08:27,759 --> 00:08:29,759
the state of the art was proposed in

212
00:08:29,759 --> 00:08:31,039
kkrt 16

213
00:08:31,039 --> 00:08:34,159
and is very fast computing the equality

214
00:08:34,159 --> 00:08:36,799
of a million strings on a fast network

215
00:08:36,799 --> 00:08:40,000
takes less than 10 seconds

216
00:08:40,000 --> 00:08:42,958
so here if alice and bob have n strings

217
00:08:42,958 --> 00:08:44,159
each

218
00:08:44,159 --> 00:08:46,640
they want to test for equality and one

219
00:08:46,640 --> 00:08:48,880
of them can learn a bit vector

220
00:08:48,880 --> 00:08:52,839
which reveals which of their n strings

221
00:08:52,839 --> 00:08:54,160
match

222
00:08:54,160 --> 00:08:56,880
it's useful for our purposes to see that

223
00:08:56,880 --> 00:08:58,959
if a pair of strings match

224
00:08:58,959 --> 00:09:01,920
then they are an additive share of zero

225
00:09:01,920 --> 00:09:04,000
we can alternatively say

226
00:09:04,000 --> 00:09:07,600
private equality tests help bob learn

227
00:09:07,600 --> 00:09:09,760
which positions in his vector are an

228
00:09:09,760 --> 00:09:12,959
additive share of zero

229
00:09:15,839 --> 00:09:17,760
our protocol core consists of three

230
00:09:17,760 --> 00:09:18,959
steps

231
00:09:18,959 --> 00:09:21,120
first is the pre-processing phase from

232
00:09:21,120 --> 00:09:22,640
pst by it

233
00:09:22,640 --> 00:09:26,080
i'll present a simplified version alice

234
00:09:26,080 --> 00:09:27,839
has her set x

235
00:09:27,839 --> 00:09:30,480
and she uses google hashing with three

236
00:09:30,480 --> 00:09:31,920
hash functions

237
00:09:31,920 --> 00:09:34,560
to place her items into buckets each

238
00:09:34,560 --> 00:09:35,360
bucket has

239
00:09:35,360 --> 00:09:38,720
at most one item and each item is placed

240
00:09:38,720 --> 00:09:41,120
in only one of the three positions

241
00:09:41,120 --> 00:09:44,640
given by the hash functions

242
00:09:44,640 --> 00:09:47,200
bob will use simple hashing again with

243
00:09:47,200 --> 00:09:49,760
the same three hash functions

244
00:09:49,760 --> 00:09:51,839
each of his items is placed in three

245
00:09:51,839 --> 00:09:53,760
buckets determined by

246
00:09:53,760 --> 00:09:57,440
h1 h2 and h3 here each bucket has more

247
00:09:57,440 --> 00:09:59,360
than one item

248
00:09:59,360 --> 00:10:02,480
after this he samples strings uniformly

249
00:10:02,480 --> 00:10:04,320
at random for each bucket

250
00:10:04,320 --> 00:10:08,399
and he calls them t1 t2 and so on

251
00:10:08,399 --> 00:10:12,320
now alice and bob run an oprf protocol

252
00:10:12,320 --> 00:10:15,040
once for each bucket i will leave that

253
00:10:15,040 --> 00:10:17,279
as a black box for now

254
00:10:17,279 --> 00:10:19,680
this step along with the hint that bob

255
00:10:19,680 --> 00:10:21,360
sends to alice

256
00:10:21,360 --> 00:10:24,959
helps alice learn a string s i for each

257
00:10:24,959 --> 00:10:28,000
each of her buckets i

258
00:10:28,000 --> 00:10:30,800
let's focus on alice's cuckoo table to

259
00:10:30,800 --> 00:10:32,399
understand the properties

260
00:10:32,399 --> 00:10:36,000
of these si and ti strings

261
00:10:36,000 --> 00:10:39,279
in the first bucket we have y which is

262
00:10:39,279 --> 00:10:40,800
not in the intersection

263
00:10:40,800 --> 00:10:43,360
so s1 and t1 are an additive share of a

264
00:10:43,360 --> 00:10:45,040
pseudorandom value

265
00:10:45,040 --> 00:10:47,920
similarly in position 5 alice has a

266
00:10:47,920 --> 00:10:49,120
dummy item

267
00:10:49,120 --> 00:10:50,800
so the strings are an additive share of

268
00:10:50,800 --> 00:10:52,720
a pseudorandom value

269
00:10:52,720 --> 00:10:55,519
in the last bucket alice has s which is

270
00:10:55,519 --> 00:10:56,880
in the intersection

271
00:10:56,880 --> 00:10:58,560
here the strings are an additive share

272
00:10:58,560 --> 00:11:01,839
of 0.

273
00:11:01,920 --> 00:11:03,600
before i describe our complete

274
00:11:03,600 --> 00:11:06,480
construction i will show what goes wrong

275
00:11:06,480 --> 00:11:08,640
if we use private equality tests

276
00:11:08,640 --> 00:11:11,920
immediately after the preprocessing step

277
00:11:11,920 --> 00:11:14,880
recall that batch equality tests can be

278
00:11:14,880 --> 00:11:17,440
used to learn positions on your vector

279
00:11:17,440 --> 00:11:21,040
that are an additive share of zero

280
00:11:21,040 --> 00:11:24,000
if alice learns the output as shown here

281
00:11:24,000 --> 00:11:26,160
she can infer if her item in that

282
00:11:26,160 --> 00:11:28,000
position of the cuckoo table belongs to

283
00:11:28,000 --> 00:11:29,600
the intersection

284
00:11:29,600 --> 00:11:33,600
for example s3 is not equal to t3

285
00:11:33,600 --> 00:11:35,920
and is not an additive sharing of zero

286
00:11:35,920 --> 00:11:38,000
therefore she can conclude that t is not

287
00:11:38,000 --> 00:11:39,120
in the intersection

288
00:11:39,120 --> 00:11:43,120
and so on i will not go into the details

289
00:11:43,120 --> 00:11:45,200
but even when bob learns the output of

290
00:11:45,200 --> 00:11:46,399
the equality test

291
00:11:46,399 --> 00:11:48,959
something goes wrong he is able to learn

292
00:11:48,959 --> 00:11:50,639
which of his buckets correspond to

293
00:11:50,639 --> 00:11:51,519
additive shares of

294
00:11:51,519 --> 00:11:54,160
zero and this leaks partial information

295
00:11:54,160 --> 00:11:56,399
about the contents of the intersection

296
00:11:56,399 --> 00:11:58,560
so it's not safe to leak output of the

297
00:11:58,560 --> 00:12:01,600
equality test to alice or bob

298
00:12:01,600 --> 00:12:04,880
and we need to fix this

299
00:12:08,639 --> 00:12:11,279
to fix this problem i highlighted we use

300
00:12:11,279 --> 00:12:12,320
a primitive called

301
00:12:12,320 --> 00:12:15,120
oblivious switching network or osn for

302
00:12:15,120 --> 00:12:16,720
short

303
00:12:16,720 --> 00:12:19,040
what this building block gives us is

304
00:12:19,040 --> 00:12:20,079
this

305
00:12:20,079 --> 00:12:22,240
alice and bob can send their additive

306
00:12:22,240 --> 00:12:24,720
shares 1 and y 2 of a vector

307
00:12:24,720 --> 00:12:28,639
y to the functionality and additionally

308
00:12:28,639 --> 00:12:31,760
alice can choose a permutation pi

309
00:12:31,760 --> 00:12:34,639
as the output alice and bob learn new

310
00:12:34,639 --> 00:12:36,720
additive shares of the permuted vector

311
00:12:36,720 --> 00:12:37,040
pi

312
00:12:37,040 --> 00:12:41,200
y note that alice can correlate between

313
00:12:41,200 --> 00:12:44,240
her input to her output share

314
00:12:44,240 --> 00:12:46,079
however bob is oblivious to the

315
00:12:46,079 --> 00:12:47,680
permutation pi

316
00:12:47,680 --> 00:12:49,839
and he learns a random additive share of

317
00:12:49,839 --> 00:12:50,959
pi or y

318
00:12:50,959 --> 00:12:53,279
so he can't correlate his output to his

319
00:12:53,279 --> 00:12:55,680
input

320
00:12:57,360 --> 00:12:59,440
we use this building block after the

321
00:12:59,440 --> 00:13:02,480
pre-processing step

322
00:13:03,519 --> 00:13:06,240
alice and bob feed their additive shares

323
00:13:06,240 --> 00:13:09,519
s and t as inputs to the osn

324
00:13:09,519 --> 00:13:12,000
then alice chooses a random permutation

325
00:13:12,000 --> 00:13:12,720
pi

326
00:13:12,720 --> 00:13:15,040
and they both get additive shares of pi

327
00:13:15,040 --> 00:13:16,320
of s plus

328
00:13:16,320 --> 00:13:20,000
t or pi of s x or t by the property

329
00:13:20,000 --> 00:13:23,040
of the osn bob can't relate between his

330
00:13:23,040 --> 00:13:24,320
input vector t

331
00:13:24,320 --> 00:13:28,160
to his output vector t prime

332
00:13:29,760 --> 00:13:32,720
now alice and bob use the output vectors

333
00:13:32,720 --> 00:13:36,240
of the osn as input to the equality test

334
00:13:36,240 --> 00:13:39,519
and we make bob learn the output since

335
00:13:39,519 --> 00:13:42,720
alice shows a random permutation pi that

336
00:13:42,720 --> 00:13:44,320
is hidden from bob

337
00:13:44,320 --> 00:13:46,480
he only learns the number of items in

338
00:13:46,480 --> 00:13:47,519
his vector

339
00:13:47,519 --> 00:13:49,839
that are an additive share of 0 from the

340
00:13:49,839 --> 00:13:51,440
equality tests

341
00:13:51,440 --> 00:13:54,000
this reveals the cardinality and nothing

342
00:13:54,000 --> 00:13:56,160
more

343
00:13:56,160 --> 00:13:58,160
so we can see how the pst by

344
00:13:58,160 --> 00:13:59,680
pre-processing

345
00:13:59,680 --> 00:14:02,639
with the osn followed by the equality

346
00:14:02,639 --> 00:14:03,360
tests

347
00:14:03,360 --> 00:14:05,199
give us the permuted characteristic

348
00:14:05,199 --> 00:14:07,680
functionality

349
00:14:07,680 --> 00:14:10,880
alice has a permutation pi bob only

350
00:14:10,880 --> 00:14:11,760
learns

351
00:14:11,760 --> 00:14:14,079
which of alice's items belong to set

352
00:14:14,079 --> 00:14:15,839
according to some ordering

353
00:14:15,839 --> 00:14:18,959
that is unknown to him

354
00:14:20,639 --> 00:14:22,800
next we are ready to see how we can

355
00:14:22,800 --> 00:14:25,040
compute the private set union

356
00:14:25,040 --> 00:14:28,399
using our pc protocol the goal of

357
00:14:28,399 --> 00:14:30,079
private set union is that

358
00:14:30,079 --> 00:14:33,360
if alice has a set x and bob has a set y

359
00:14:33,360 --> 00:14:36,079
then bob can learn x union y as shown in

360
00:14:36,079 --> 00:14:38,240
the example

361
00:14:38,240 --> 00:14:41,120
we can restate this goal as bob needs to

362
00:14:41,120 --> 00:14:41,519
learn

363
00:14:41,519 --> 00:14:43,839
all of alice's items that are outside is

364
00:14:43,839 --> 00:14:46,160
set

365
00:14:46,480 --> 00:14:48,560
so far what we have is the permuted

366
00:14:48,560 --> 00:14:50,720
characteristic functionality

367
00:14:50,720 --> 00:14:53,440
this gives bob an indicator vector e as

368
00:14:53,440 --> 00:14:54,800
output

369
00:14:54,800 --> 00:14:58,240
this vector has value 0 in all positions

370
00:14:58,240 --> 00:15:00,560
where alice has an item that is outside

371
00:15:00,560 --> 00:15:02,079
of bob's set

372
00:15:02,079 --> 00:15:06,719
so bob must somehow obtain these values

373
00:15:07,519 --> 00:15:10,000
so permuted characteristic can be

374
00:15:10,000 --> 00:15:11,680
represented this way

375
00:15:11,680 --> 00:15:14,000
alice has her items permuted according

376
00:15:14,000 --> 00:15:15,199
to pi

377
00:15:15,199 --> 00:15:18,240
and bob has his vector e we need to

378
00:15:18,240 --> 00:15:19,920
ensure that when his bid

379
00:15:19,920 --> 00:15:23,760
b is zero bob learns the item and when

380
00:15:23,760 --> 00:15:26,959
the bit is one he learns nothing

381
00:15:26,959 --> 00:15:29,360
to do this we use an oblivious transfer

382
00:15:29,360 --> 00:15:32,000
protocol as a building block

383
00:15:32,000 --> 00:15:34,800
in ot there's a sender who has two

384
00:15:34,800 --> 00:15:36,800
inputs m0 and m1

385
00:15:36,800 --> 00:15:39,839
and a receiver that has a choice bit b

386
00:15:39,839 --> 00:15:41,199
at the end of the protocol

387
00:15:41,199 --> 00:15:43,279
he learns the message indexed by this

388
00:15:43,279 --> 00:15:45,440
choice

389
00:15:45,440 --> 00:15:47,759
alice doesn't learn the choice bit and

390
00:15:47,759 --> 00:15:51,440
bob doesn't learn the other message

391
00:15:51,519 --> 00:15:55,279
so we can have one ot for every bit in e

392
00:15:55,279 --> 00:15:58,160
alice arranges her messages so that her

393
00:15:58,160 --> 00:15:59,839
m0 message is her item

394
00:15:59,839 --> 00:16:02,959
and m1 is always bought this gives bob

395
00:16:02,959 --> 00:16:05,759
the union of the sets as we can see here

396
00:16:05,759 --> 00:16:07,920
whenever his choice bit is 1 he learns

397
00:16:07,920 --> 00:16:10,320
nothing and when his choice bit is 0 he

398
00:16:10,320 --> 00:16:13,120
learns the item

399
00:16:13,120 --> 00:16:14,880
note that learning the intersection is

400
00:16:14,880 --> 00:16:17,040
very similar to this

401
00:16:17,040 --> 00:16:20,240
alice can flip her ot input messages so

402
00:16:20,240 --> 00:16:20,800
that

403
00:16:20,800 --> 00:16:22,880
bob only learns her items when his

404
00:16:22,880 --> 00:16:24,639
choice bit is now 1

405
00:16:24,639 --> 00:16:29,360
that is when her item belongs to his set

406
00:16:30,079 --> 00:16:32,240
next we look at the private id

407
00:16:32,240 --> 00:16:33,759
functionality

408
00:16:33,759 --> 00:16:36,399
this was introduced by budhavarapu at

409
00:16:36,399 --> 00:16:36,880
all

410
00:16:36,880 --> 00:16:41,040
in 2020 here alice and bob have input

411
00:16:41,040 --> 00:16:42,079
sets

412
00:16:42,079 --> 00:16:44,639
and the goal is for both parties to

413
00:16:44,639 --> 00:16:47,040
learn a set of universal pseudorandom

414
00:16:47,040 --> 00:16:48,240
identifiers

415
00:16:48,240 --> 00:16:50,240
for every item in the union of their

416
00:16:50,240 --> 00:16:51,519
sets

417
00:16:51,519 --> 00:16:53,759
with the property that alice can

418
00:16:53,759 --> 00:16:56,000
identify all the identifiers that are

419
00:16:56,000 --> 00:16:58,399
associated with items in her set

420
00:16:58,399 --> 00:17:00,639
so she can recognize the identifiers of

421
00:17:00,639 --> 00:17:02,079
the letters p

422
00:17:02,079 --> 00:17:06,319
s t y and exclamation mark

423
00:17:06,319 --> 00:17:08,799
similarly bob learns a set of

424
00:17:08,799 --> 00:17:10,000
identifiers

425
00:17:10,000 --> 00:17:12,480
and can recognize those associated with

426
00:17:12,480 --> 00:17:15,520
items in his set

427
00:17:15,520 --> 00:17:17,520
this functionality can be used by the

428
00:17:17,520 --> 00:17:20,079
parties to sort their private data

429
00:17:20,079 --> 00:17:21,839
relative to the global set of all

430
00:17:21,839 --> 00:17:23,359
identifiers

431
00:17:23,359 --> 00:17:25,520
they can proceed item by item and do any

432
00:17:25,520 --> 00:17:27,839
private computation on their data

433
00:17:27,839 --> 00:17:29,840
being assured that identical items are

434
00:17:29,840 --> 00:17:32,400
aligned this is because all their common

435
00:17:32,400 --> 00:17:33,120
items

436
00:17:33,120 --> 00:17:36,320
have the same identifier the original

437
00:17:36,320 --> 00:17:37,440
construction

438
00:17:37,440 --> 00:17:40,240
mainly uses public key operations and

439
00:17:40,240 --> 00:17:42,480
ours is the first construction

440
00:17:42,480 --> 00:17:45,280
based on ot extension which is dominated

441
00:17:45,280 --> 00:17:49,120
by symmetric key based operations

442
00:17:49,760 --> 00:17:52,720
for our private id protocol we start

443
00:17:52,720 --> 00:17:54,400
with the oblivious pseudo-random

444
00:17:54,400 --> 00:17:55,919
function primitive

445
00:17:55,919 --> 00:17:58,799
the sender in this case bob learns the

446
00:17:58,799 --> 00:18:01,039
key of a pseudorandom function

447
00:18:01,039 --> 00:18:03,679
the receiver alice learns the prf

448
00:18:03,679 --> 00:18:04,880
evaluation on

449
00:18:04,880 --> 00:18:08,559
her set of inputs since bob has the key

450
00:18:08,559 --> 00:18:11,280
he can compute the prf evaluation on any

451
00:18:11,280 --> 00:18:13,520
input of his choice

452
00:18:13,520 --> 00:18:16,320
for private id we need two instances of

453
00:18:16,320 --> 00:18:17,679
oprf

454
00:18:17,679 --> 00:18:19,840
in the first one alice access the

455
00:18:19,840 --> 00:18:22,799
receiver and learns the opr evaluation

456
00:18:22,799 --> 00:18:26,880
on her input set bob learns the key k1

457
00:18:26,880 --> 00:18:30,400
and locally computes the prf evaluation

458
00:18:30,400 --> 00:18:34,480
on his set y in the second instance

459
00:18:34,480 --> 00:18:37,600
alice learns a different prf key k2

460
00:18:37,600 --> 00:18:41,039
and bob learns the prf evaluations on y

461
00:18:41,039 --> 00:18:43,039
alice can locally compute prf

462
00:18:43,039 --> 00:18:44,480
evaluations for this

463
00:18:44,480 --> 00:18:48,080
key we define the pseudo-random

464
00:18:48,080 --> 00:18:49,280
identifier

465
00:18:49,280 --> 00:18:52,640
as the xor of both opr outputs

466
00:18:52,640 --> 00:18:55,679
so at this point alice and bob can

467
00:18:55,679 --> 00:18:56,400
compute

468
00:18:56,400 --> 00:18:58,559
and wreck and hence recognize the

469
00:18:58,559 --> 00:19:01,280
identifiers of their own sets

470
00:19:01,280 --> 00:19:03,360
but alice doesn't know the identifiers

471
00:19:03,360 --> 00:19:04,640
of bob's items

472
00:19:04,640 --> 00:19:09,200
that are outside her set and vice versa

473
00:19:09,760 --> 00:19:12,320
for this alice and bob use our private

474
00:19:12,320 --> 00:19:13,679
set union protocol

475
00:19:13,679 --> 00:19:16,640
to learn the set of all the identifiers

476
00:19:16,640 --> 00:19:18,480
we further optimize this approach and

477
00:19:18,480 --> 00:19:22,400
you can find more details in our paper

478
00:19:23,200 --> 00:19:25,200
finally i'd like to comment about our

479
00:19:25,200 --> 00:19:26,799
performance

480
00:19:26,799 --> 00:19:28,960
we implemented all of our protocols and

481
00:19:28,960 --> 00:19:32,320
here are some takeaways

482
00:19:32,880 --> 00:19:35,120
for a million items to compute the

483
00:19:35,120 --> 00:19:36,720
cardinality

484
00:19:36,720 --> 00:19:39,039
we reduce the communication and this

485
00:19:39,039 --> 00:19:40,720
gives us an improved run time

486
00:19:40,720 --> 00:19:42,640
from nine minutes down to five minutes

487
00:19:42,640 --> 00:19:45,039
in the one setting

488
00:19:45,039 --> 00:19:47,280
for computing the union we improve the

489
00:19:47,280 --> 00:19:49,360
run time from 14 minutes down to five

490
00:19:49,360 --> 00:19:52,080
minutes in the van setting

491
00:19:52,080 --> 00:19:53,760
our private id approach has more

492
00:19:53,760 --> 00:19:55,520
communication than the previous public

493
00:19:55,520 --> 00:19:56,960
key based approach

494
00:19:56,960 --> 00:19:59,120
but we achieve a runtime improvement

495
00:19:59,120 --> 00:20:00,799
from six and a half minutes down to two

496
00:20:00,799 --> 00:20:03,360
minutes on faster networks

497
00:20:03,360 --> 00:20:05,520
finally you can find our code and paper

498
00:20:05,520 --> 00:20:06,799
in these links

499
00:20:06,799 --> 00:20:11,280
thank you so much for listening

