1
00:00:02,800 --> 00:00:04,560
hello everyone

2
00:00:04,560 --> 00:00:08,000
in this talk i will present our work

3
00:00:08,000 --> 00:00:11,840
about a generic framework for abe

4
00:00:11,840 --> 00:00:15,200
with master key kdm security

5
00:00:15,200 --> 00:00:19,920
while the notion predicate encoding

6
00:00:19,920 --> 00:00:23,279
this is a joint work with string jin gun

7
00:00:23,279 --> 00:00:26,800
and tier abe

8
00:00:26,800 --> 00:00:30,400
stands for attribute-based encryption

9
00:00:30,400 --> 00:00:34,000
which is an advanced form of public key

10
00:00:34,000 --> 00:00:37,360
encryption it consists

11
00:00:37,360 --> 00:00:40,800
of four ppt algorithms

12
00:00:40,800 --> 00:00:44,320
set up encrypt key generate

13
00:00:44,320 --> 00:00:48,879
and decrypt the state type organism

14
00:00:48,879 --> 00:00:52,879
takes a boolean predicate p associated

15
00:00:52,879 --> 00:00:56,000
with a descriptive domain x

16
00:00:56,000 --> 00:00:59,600
and y such as attribute

17
00:00:59,600 --> 00:01:03,199
x and policy y

18
00:01:03,199 --> 00:01:06,640
and output a master key pair

19
00:01:06,640 --> 00:01:09,600
must the public key and master secret

20
00:01:09,600 --> 00:01:11,200
key

21
00:01:11,200 --> 00:01:14,880
then the encrypt algorithm encrypts the

22
00:01:14,880 --> 00:01:15,600
message

23
00:01:15,600 --> 00:01:19,280
m to value x under the master private

24
00:01:19,280 --> 00:01:21,439
key

25
00:01:21,439 --> 00:01:24,960
and the key generation algorithm uses

26
00:01:24,960 --> 00:01:26,720
the master secret key

27
00:01:26,720 --> 00:01:31,679
to derive sql keys to value y

28
00:01:31,840 --> 00:01:34,960
in the corruption algorithm this is

29
00:01:34,960 --> 00:01:39,040
secret keys have the ability to recover

30
00:01:39,040 --> 00:01:42,399
the message only if p x y

31
00:01:42,399 --> 00:01:45,520
equals to 1. that is

32
00:01:45,520 --> 00:01:48,799
hbox satisfies policy

33
00:01:48,799 --> 00:01:51,840
y for example if

34
00:01:51,840 --> 00:01:55,360
x satisfies y1

35
00:01:55,360 --> 00:01:58,719
then the sql key can recover the message

36
00:01:58,719 --> 00:02:02,159
m if x does not

37
00:02:02,159 --> 00:02:06,799
satisfy y2 y3

38
00:02:06,799 --> 00:02:10,720
then the secret keys cannot obtain any

39
00:02:10,720 --> 00:02:13,920
information of the message m

40
00:02:13,920 --> 00:02:17,120
even combining with other secret key

41
00:02:17,120 --> 00:02:19,920
in some way

42
00:02:21,040 --> 00:02:24,000
in this work we use the notion of

43
00:02:24,000 --> 00:02:24,879
predicate

44
00:02:24,879 --> 00:02:28,640
encoding it is a singular

45
00:02:28,640 --> 00:02:33,040
description of abe with a statistical

46
00:02:33,040 --> 00:02:37,840
long-term squeaky security flavor

47
00:02:37,840 --> 00:02:41,200
typically it consists of five linear

48
00:02:41,200 --> 00:02:42,560
algorithm

49
00:02:42,560 --> 00:02:47,519
of a domain x y and zp

50
00:02:47,519 --> 00:02:51,280
in last example we can use s e

51
00:02:51,280 --> 00:02:56,800
x w to encode the encryption

52
00:02:57,440 --> 00:03:00,560
use k e y alpha plus

53
00:03:00,560 --> 00:03:03,599
r e y w to encode

54
00:03:03,599 --> 00:03:06,799
the key generation

55
00:03:07,120 --> 00:03:11,760
and in the decryption we can use sd

56
00:03:11,760 --> 00:03:15,200
and rd to recover

57
00:03:15,200 --> 00:03:18,480
alpha by the property

58
00:03:18,480 --> 00:03:22,319
of predicate encoding

59
00:03:22,400 --> 00:03:27,200
then we can obtain the message

60
00:03:28,879 --> 00:03:32,720
such predicate encodings are also known

61
00:03:32,720 --> 00:03:36,400
for several predicates such as

62
00:03:36,400 --> 00:03:39,680
equality predicate in identity based

63
00:03:39,680 --> 00:03:44,000
encryption like lw10

64
00:03:44,000 --> 00:03:47,040
that is you can obtain the message

65
00:03:47,040 --> 00:03:51,040
only if x equals to y

66
00:03:51,040 --> 00:03:54,080
and prefix equality predicate in

67
00:03:54,080 --> 00:03:56,080
hierarchical ibe

68
00:03:56,080 --> 00:03:59,280
like bpg5

69
00:03:59,280 --> 00:04:02,720
and arithmetic branching program

70
00:04:02,720 --> 00:04:06,560
in abe like cgw 15

71
00:04:06,560 --> 00:04:09,920
and so on in this talk

72
00:04:09,920 --> 00:04:12,159
we will employ the first simple

73
00:04:12,159 --> 00:04:13,360
predicate

74
00:04:13,360 --> 00:04:17,760
to illustrate our framework

75
00:04:18,160 --> 00:04:21,759
in our framework we study an appealing

76
00:04:21,759 --> 00:04:23,280
security

77
00:04:23,280 --> 00:04:27,199
key dependent message security or kdm

78
00:04:27,199 --> 00:04:28,000
security

79
00:04:28,000 --> 00:04:32,960
for short in the context of abe

80
00:04:32,960 --> 00:04:36,080
namely the message may dependent

81
00:04:36,080 --> 00:04:39,600
on the secret key but no information

82
00:04:39,600 --> 00:04:43,199
will be linked we describe

83
00:04:43,199 --> 00:04:46,479
the dependency by an affine function

84
00:04:46,479 --> 00:04:50,320
over the secret key if the semantic

85
00:04:50,320 --> 00:04:51,199
security

86
00:04:51,199 --> 00:04:54,800
holds on when the message depends on the

87
00:04:54,800 --> 00:04:57,199
master secret key

88
00:04:57,199 --> 00:05:01,280
we say achieves must key kdm security

89
00:05:01,280 --> 00:05:05,440
or mkdm security for short

90
00:05:05,440 --> 00:05:08,880
if the semantic security holds on

91
00:05:08,880 --> 00:05:11,360
when the message dependence on the

92
00:05:11,360 --> 00:05:13,440
user's secret key

93
00:05:13,440 --> 00:05:16,400
will say achieve the user key kdm

94
00:05:16,400 --> 00:05:18,080
security

95
00:05:18,080 --> 00:05:22,639
or ukdm security for sure

96
00:05:22,720 --> 00:05:26,160
in this work we focus on the former

97
00:05:26,160 --> 00:05:27,479
security

98
00:05:27,479 --> 00:05:31,280
mkdm security

99
00:05:31,600 --> 00:05:35,440
formerly we describe mkdm security

100
00:05:35,440 --> 00:05:39,120
by the following game at the beginning

101
00:05:39,120 --> 00:05:42,320
of the game the challenger sets

102
00:05:42,320 --> 00:05:45,520
up the abe schemer

103
00:05:45,520 --> 00:05:48,639
and publish the master property key to

104
00:05:48,639 --> 00:05:51,360
the adversary

105
00:05:51,360 --> 00:05:54,160
receive the master property key the

106
00:05:54,160 --> 00:05:55,120
adversary

107
00:05:55,120 --> 00:05:59,520
can issue the key query repeatedly

108
00:05:59,520 --> 00:06:03,840
on each key query with y

109
00:06:03,840 --> 00:06:06,960
the challenger generates key using

110
00:06:06,960 --> 00:06:10,160
the master secret key and

111
00:06:10,160 --> 00:06:14,319
gives it to the adversary

112
00:06:14,560 --> 00:06:18,080
after that the challenger picks a random

113
00:06:18,080 --> 00:06:18,840
bit

114
00:06:18,840 --> 00:06:21,759
b and the adversary

115
00:06:21,759 --> 00:06:25,680
issue multiple challenges

116
00:06:25,680 --> 00:06:30,160
on each challenger with x and f

117
00:06:30,160 --> 00:06:33,440
the challenger in graphs fmsk

118
00:06:33,440 --> 00:06:37,840
as city 0 and grabs a random message m

119
00:06:37,840 --> 00:06:40,960
as city 1 and always

120
00:06:40,960 --> 00:06:45,680
returns ctb to the adversary

121
00:06:45,680 --> 00:06:48,720
then the adversary can continue

122
00:06:48,720 --> 00:06:52,160
the key query and the

123
00:06:52,160 --> 00:06:55,039
challenger responds by running the key

124
00:06:55,039 --> 00:06:57,840
generation

125
00:06:58,160 --> 00:07:01,440
in final the adversary output

126
00:07:01,440 --> 00:07:04,479
a guess of b

127
00:07:04,479 --> 00:07:07,280
at this point we can give out the

128
00:07:07,280 --> 00:07:08,319
advantage

129
00:07:08,319 --> 00:07:11,520
of the adversary

130
00:07:11,599 --> 00:07:14,720
if the advantage is negligible in the

131
00:07:14,720 --> 00:07:16,960
security parameter

132
00:07:16,960 --> 00:07:20,560
then we see the schema achieves mkdm

133
00:07:20,560 --> 00:07:23,280
security

134
00:07:24,080 --> 00:07:27,599
in this work we propose a generic

135
00:07:27,599 --> 00:07:28,880
framework

136
00:07:28,880 --> 00:07:32,080
of mkdm security abe

137
00:07:32,080 --> 00:07:35,520
under standard parent-based assumption

138
00:07:35,520 --> 00:07:38,720
and support more complex policies

139
00:07:38,720 --> 00:07:42,400
than ibe which has never been

140
00:07:42,400 --> 00:07:46,479
reached since the first ktm square ibe

141
00:07:46,479 --> 00:07:49,919
was proposed in ghv-12

142
00:07:49,919 --> 00:07:53,840
and ap-12 in particular

143
00:07:53,840 --> 00:07:57,360
we obtained the first hibe schema

144
00:07:57,360 --> 00:08:00,800
with mkdm security for a5

145
00:08:00,800 --> 00:08:04,400
functions and the first abe

146
00:08:04,400 --> 00:08:08,240
for abp with mkdm security

147
00:08:08,240 --> 00:08:11,360
for five functions

148
00:08:11,360 --> 00:08:16,160
also thanks to the expressive needs

149
00:08:16,160 --> 00:08:20,319
that is dedicability like hiv

150
00:08:20,319 --> 00:08:24,599
we improve the security to cca security

151
00:08:24,599 --> 00:08:27,919
bioclassical chk cpa26a

152
00:08:27,919 --> 00:08:30,878
transformation

153
00:08:31,360 --> 00:08:35,279
in the context of ibe our generic

154
00:08:35,279 --> 00:08:36,399
framework

155
00:08:36,399 --> 00:08:40,320
also gives us a new ibe schema

156
00:08:40,320 --> 00:08:43,519
with mkdm security

157
00:08:43,519 --> 00:08:46,959
our schema enjoys a constant size

158
00:08:46,959 --> 00:08:50,800
master property and achieves adapted

159
00:08:50,800 --> 00:08:55,200
and cca security in the following

160
00:08:55,200 --> 00:08:59,120
we will employ this single predicate

161
00:08:59,120 --> 00:09:02,480
the quality predicate in ibe

162
00:09:02,480 --> 00:09:06,959
to illustrate our framework

163
00:09:06,959 --> 00:09:10,680
as a start point we first revisit

164
00:09:10,680 --> 00:09:14,399
ggh20 schema which is based on

165
00:09:14,399 --> 00:09:17,760
by linear pairing of a prime order

166
00:09:17,760 --> 00:09:21,200
groups that is

167
00:09:21,200 --> 00:09:24,320
the group description only contains

168
00:09:24,320 --> 00:09:28,480
two prime order groups g1 g2

169
00:09:28,480 --> 00:09:31,920
and relevant generator over g1

170
00:09:31,920 --> 00:09:34,959
g2 informally

171
00:09:34,959 --> 00:09:38,160
all the ciphertexts and the secret keys

172
00:09:38,160 --> 00:09:41,360
lie in the span of releasing basis of a

173
00:09:41,360 --> 00:09:42,160
g1

174
00:09:42,160 --> 00:09:45,200
g2 respectively

175
00:09:45,200 --> 00:09:48,959
and their components in each subspace

176
00:09:48,959 --> 00:09:53,200
play important rules in a proof

177
00:09:53,200 --> 00:09:56,720
looking ahead they use these three bases

178
00:09:56,720 --> 00:09:59,760
a1 a2 a3

179
00:09:59,760 --> 00:10:02,800
to simulate three subgroups

180
00:10:02,800 --> 00:10:06,720
p1 p2 p3 of a composite

181
00:10:06,720 --> 00:10:09,680
of the groups

182
00:10:10,000 --> 00:10:13,760
under these spaces a1 a2

183
00:10:13,760 --> 00:10:16,959
e3 clock etho give

184
00:10:16,959 --> 00:10:20,720
out this mkdm sqa ibe schema

185
00:10:20,720 --> 00:10:23,760
with tight security but

186
00:10:23,760 --> 00:10:26,959
the master public key size is linear

187
00:10:26,959 --> 00:10:30,160
in the security parameter in

188
00:10:30,160 --> 00:10:33,200
actual use all the secret keys and

189
00:10:33,200 --> 00:10:34,480
several tags

190
00:10:34,480 --> 00:10:38,079
lie in p1 subgroup which is of

191
00:10:38,079 --> 00:10:42,480
normal form and in this schema

192
00:10:42,480 --> 00:10:46,000
they show a clever combination of the

193
00:10:46,000 --> 00:10:49,200
kdm square pke as

194
00:10:49,200 --> 00:10:53,040
in bh08 which is highlighted

195
00:10:53,040 --> 00:10:56,800
by solid boxes and a tightly security

196
00:10:56,800 --> 00:11:00,000
ibe as in ahy

197
00:11:00,000 --> 00:11:03,600
15 gdcc 16 which is

198
00:11:03,600 --> 00:11:07,680
highlighted by gray boxes

199
00:11:07,680 --> 00:11:10,640
following the time proof of the thai ibe

200
00:11:10,640 --> 00:11:12,399
over multiple secret keys

201
00:11:12,399 --> 00:11:15,519
and several cybertext one can

202
00:11:15,519 --> 00:11:19,760
extract the entropy of a p2 subgroup

203
00:11:19,760 --> 00:11:23,519
highlighted by the dashed boxes

204
00:11:23,519 --> 00:11:26,640
at this point one can control the

205
00:11:26,640 --> 00:11:27,360
leakage

206
00:11:27,360 --> 00:11:31,519
of master secret key using the entropy

207
00:11:31,519 --> 00:11:35,279
and then carry out the kdm argument

208
00:11:35,279 --> 00:11:39,760
for pke from bh08

209
00:11:39,760 --> 00:11:43,360
however to our best knowledge

210
00:11:43,360 --> 00:11:46,800
they only exist highly security ibe

211
00:11:46,800 --> 00:11:50,320
in the multiple civil text settings

212
00:11:50,320 --> 00:11:52,880
and the type proof in the multiple

213
00:11:52,880 --> 00:11:54,880
server text setting

214
00:11:54,880 --> 00:11:57,519
strongly dependent on the key and the

215
00:11:57,519 --> 00:11:58,399
ciphertext

216
00:11:58,399 --> 00:12:02,480
structures but we can see

217
00:12:02,480 --> 00:12:05,839
the kdm argument only relies on the

218
00:12:05,839 --> 00:12:06,639
entropy

219
00:12:06,639 --> 00:12:10,240
we introduced so

220
00:12:10,240 --> 00:12:12,880
we look back to the following warm-up

221
00:12:12,880 --> 00:12:13,839
schema

222
00:12:13,839 --> 00:12:17,360
presented in ggh20

223
00:12:17,360 --> 00:12:20,800
also derived by the quality predicate

224
00:12:20,800 --> 00:12:25,920
encoding w plus id v

225
00:12:25,920 --> 00:12:29,760
as they reported the schema is mkdm

226
00:12:29,760 --> 00:12:30,800
secure

227
00:12:30,800 --> 00:12:34,079
with respect to a five functions

228
00:12:34,079 --> 00:12:37,200
in a single ciphertext setting by the

229
00:12:37,200 --> 00:12:38,079
new system

230
00:12:38,079 --> 00:12:42,399
technical therefore

231
00:12:42,399 --> 00:12:46,160
our strategy is to upgrade the proof

232
00:12:46,160 --> 00:12:49,680
to the multi-server text setting without

233
00:12:49,680 --> 00:12:53,279
tight reduction

234
00:12:53,279 --> 00:12:56,959
the typical dual system technical uses

235
00:12:56,959 --> 00:13:00,320
two main components one

236
00:13:00,320 --> 00:13:04,800
normal component of a p1 subgroup

237
00:13:04,800 --> 00:13:07,760
and one so-called semi-functional

238
00:13:07,760 --> 00:13:08,959
component

239
00:13:08,959 --> 00:13:12,560
of a p2 subgroup

240
00:13:12,639 --> 00:13:15,519
more informally one first turns the

241
00:13:15,519 --> 00:13:17,600
challenge ciphertext

242
00:13:17,600 --> 00:13:20,800
city star from normal form to

243
00:13:20,800 --> 00:13:22,880
semi-functional form

244
00:13:22,880 --> 00:13:27,519
by the subgroup decision assumption

245
00:13:28,240 --> 00:13:31,519
name performs a hybrid of

246
00:13:31,519 --> 00:13:35,680
the user secret keys from sk1

247
00:13:35,680 --> 00:13:39,040
to xkqk with the help

248
00:13:39,040 --> 00:13:42,320
of the p3 subgroup

249
00:13:42,320 --> 00:13:46,480
since the underlying id of sk1

250
00:13:46,480 --> 00:13:49,760
is independent of the underlying id

251
00:13:49,760 --> 00:13:53,680
of ct star by definition

252
00:13:53,680 --> 00:13:58,560
one can first add the entropy to x1

253
00:13:58,560 --> 00:14:02,320
over p3 subgroup by statistical

254
00:14:02,320 --> 00:14:06,160
argument and then

255
00:14:06,160 --> 00:14:09,279
one can move it to p2 subgroup

256
00:14:09,279 --> 00:14:11,760
by the subgroup decision assumption

257
00:14:11,760 --> 00:14:14,160
again

258
00:14:14,880 --> 00:14:17,920
in this way one can change all secret

259
00:14:17,920 --> 00:14:18,639
keys

260
00:14:18,639 --> 00:14:21,839
to semi-functional form while keep the

261
00:14:21,839 --> 00:14:22,800
ciphertext

262
00:14:22,800 --> 00:14:25,680
unchanged

263
00:14:26,560 --> 00:14:29,760
at this point all the secret keys

264
00:14:29,760 --> 00:14:31,839
and the ciphertext are of the

265
00:14:31,839 --> 00:14:35,120
semi-functional form

266
00:14:36,880 --> 00:14:40,720
as a result the proof adds entropy

267
00:14:40,720 --> 00:14:45,199
to each key one by one

268
00:14:45,199 --> 00:14:48,560
however this only works on the single

269
00:14:48,560 --> 00:14:51,920
challenge ciphertext setting

270
00:14:51,920 --> 00:14:54,880
to handle many challenge ciphertexts at

271
00:14:54,880 --> 00:14:56,880
the same time

272
00:14:56,880 --> 00:15:02,079
as is needed in the context of kdm

273
00:15:02,079 --> 00:15:07,279
we have to add one extra subgroup

274
00:15:07,519 --> 00:15:10,880
concretely we need to use a nest

275
00:15:10,880 --> 00:15:16,160
variant of the dual system technical

276
00:15:17,519 --> 00:15:21,040
in nist dual system technical

277
00:15:21,040 --> 00:15:23,760
one first changes all challenger cipher

278
00:15:23,760 --> 00:15:24,880
tags

279
00:15:24,880 --> 00:15:28,560
from normal form to semi-functional form

280
00:15:28,560 --> 00:15:33,199
by the subgroup decision assumption

281
00:15:33,839 --> 00:15:36,399
then changes all keys into

282
00:15:36,399 --> 00:15:38,079
semi-functional form

283
00:15:38,079 --> 00:15:42,959
one by one but employs another do system

284
00:15:42,959 --> 00:15:46,160
argument where the rules of

285
00:15:46,160 --> 00:15:51,519
civil tax and keys are exchanged

286
00:15:51,519 --> 00:15:54,959
as usual one first changes challenges

287
00:15:54,959 --> 00:15:58,480
for text and then change the secret keys

288
00:15:58,480 --> 00:16:01,839
one by one but

289
00:16:01,839 --> 00:16:05,040
at this point one first changes one

290
00:16:05,040 --> 00:16:06,160
secret key

291
00:16:06,160 --> 00:16:09,839
into semi-functional

292
00:16:10,079 --> 00:16:13,279
then changes the challenge ciphertext

293
00:16:13,279 --> 00:16:16,639
into semi-functional one by one with the

294
00:16:16,639 --> 00:16:17,199
help

295
00:16:17,199 --> 00:16:22,959
of p4 subgroup

296
00:16:22,959 --> 00:16:26,399
next move the entry to p2

297
00:16:26,399 --> 00:16:29,120
subgroup

298
00:16:29,440 --> 00:16:32,720
in this way one finally changes all the

299
00:16:32,720 --> 00:16:33,759
secret keys

300
00:16:33,759 --> 00:16:38,720
and ciphertext into semi-functional form

301
00:16:39,519 --> 00:16:42,880
however this typical nested two-system

302
00:16:42,880 --> 00:16:44,160
technical

303
00:16:44,160 --> 00:16:47,199
uses four subgroups and

304
00:16:47,199 --> 00:16:51,519
complicates the proof

305
00:16:51,519 --> 00:16:55,440
in this work we only use three subgroups

306
00:16:55,440 --> 00:16:59,519
as in ggh20 concretely

307
00:16:59,519 --> 00:17:03,519
we will rely on our variant of unisti to

308
00:17:03,519 --> 00:17:04,079
system

309
00:17:04,079 --> 00:17:07,199
argument which exchanges

310
00:17:07,199 --> 00:17:10,559
the laws of civil text and keys

311
00:17:10,559 --> 00:17:13,760
at first that

312
00:17:13,760 --> 00:17:17,280
is one first change all secret keys

313
00:17:17,280 --> 00:17:20,720
from sk1 to skqk

314
00:17:20,720 --> 00:17:23,599
into the semi-functional by a standard

315
00:17:23,599 --> 00:17:25,599
hybrid argument

316
00:17:25,599 --> 00:17:28,559
going through every keys based on the

317
00:17:28,559 --> 00:17:29,919
subgroup decision

318
00:17:29,919 --> 00:17:35,200
assumption and a statistical argument

319
00:17:36,240 --> 00:17:39,039
then what makes the change of the

320
00:17:39,039 --> 00:17:39,600
challenge

321
00:17:39,600 --> 00:17:43,120
ciphertext in a one by one manner

322
00:17:43,120 --> 00:17:47,840
with the help of p3 subgroup

323
00:17:48,160 --> 00:17:51,280
also in order to change each change

324
00:17:51,280 --> 00:17:54,480
ciphertext into semi-functional

325
00:17:54,480 --> 00:17:57,280
one employees another standard hybrid

326
00:17:57,280 --> 00:17:58,400
argument

327
00:17:58,400 --> 00:18:01,840
over the one transceiver text along with

328
00:18:01,840 --> 00:18:02,240
all

329
00:18:02,240 --> 00:18:05,679
secret keys first

330
00:18:05,679 --> 00:18:10,559
move the ciphertext to p3 subgroup

331
00:18:10,880 --> 00:18:14,160
name perform a hybrid over all secret

332
00:18:14,160 --> 00:18:14,960
keys

333
00:18:14,960 --> 00:18:18,080
by subgroup decision assumption and a

334
00:18:18,080 --> 00:18:20,080
statistical argument

335
00:18:20,080 --> 00:18:25,039
to add entropy over p3 subgroup

336
00:18:26,000 --> 00:18:29,039
next change the challenge ciphertext

337
00:18:29,039 --> 00:18:32,640
into semi-functional form

338
00:18:33,120 --> 00:18:36,480
and perform a hybrid over all secret

339
00:18:36,480 --> 00:18:37,600
keys again

340
00:18:37,600 --> 00:18:43,840
to withdraw entropy of a p3 subgroup

341
00:18:44,640 --> 00:18:47,760
in this way one finally changes all

342
00:18:47,760 --> 00:18:48,880
ciphertext

343
00:18:48,880 --> 00:18:52,480
into semi-functional form

344
00:18:54,799 --> 00:18:57,760
this no longer requires an actual

345
00:18:57,760 --> 00:18:58,799
subgroup

346
00:18:58,799 --> 00:19:02,480
leading to a simple proof

347
00:19:04,480 --> 00:19:09,840
finally we mention several open problems

348
00:19:09,840 --> 00:19:13,440
this work we build mkdm securi

349
00:19:13,440 --> 00:19:19,919
hibe and ape over prime order groups

350
00:19:19,919 --> 00:19:23,679
one problem is to build a mktm secure

351
00:19:23,679 --> 00:19:24,720
ibe

352
00:19:24,720 --> 00:19:28,480
with tight security and a constant size

353
00:19:28,480 --> 00:19:31,520
master public key over prime order

354
00:19:31,520 --> 00:19:33,760
groups

355
00:19:33,760 --> 00:19:37,200
also it will be interesting to build

356
00:19:37,200 --> 00:19:38,799
these schemas

357
00:19:38,799 --> 00:19:42,160
from other assumptions such as

358
00:19:42,160 --> 00:19:45,760
learning with errors assumption

359
00:19:45,760 --> 00:19:49,679
besides this work only focuses

360
00:19:49,679 --> 00:19:52,880
on mkdm security

361
00:19:52,880 --> 00:19:56,160
a formal study of relation of

362
00:19:56,160 --> 00:20:00,960
ukdm security and mkdm security

363
00:20:00,960 --> 00:20:04,400
is also appearing

364
00:20:05,120 --> 00:20:09,918
thank you for your attention

