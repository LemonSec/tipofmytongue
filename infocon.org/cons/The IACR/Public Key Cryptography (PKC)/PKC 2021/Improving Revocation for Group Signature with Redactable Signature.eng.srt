1
00:00:02,159 --> 00:00:03,280
hello everyone

2
00:00:03,280 --> 00:00:05,359
i am olivier sanders and this is my

3
00:00:05,359 --> 00:00:06,560
presentation

4
00:00:06,560 --> 00:00:08,960
of the paper improving revocation for

5
00:00:08,960 --> 00:00:10,000
group signature

6
00:00:10,000 --> 00:00:13,759
with redactable signature in this paper

7
00:00:13,759 --> 00:00:15,519
we will consider the notion of group

8
00:00:15,519 --> 00:00:17,760
signature which is probably

9
00:00:17,760 --> 00:00:20,080
one of the main privacy preserving

10
00:00:20,080 --> 00:00:22,639
primitive

11
00:00:22,880 --> 00:00:26,320
a group signature schemes allows users

12
00:00:26,320 --> 00:00:28,560
to join a group managed by a group

13
00:00:28,560 --> 00:00:29,519
manager

14
00:00:29,519 --> 00:00:32,880
by interacting with this entity at the

15
00:00:32,880 --> 00:00:34,320
end of the interaction

16
00:00:34,320 --> 00:00:37,600
the user receives a signing key which

17
00:00:37,600 --> 00:00:40,399
essentially consists in some certificate

18
00:00:40,399 --> 00:00:43,120
that attests that the user has indeed

19
00:00:43,120 --> 00:00:44,800
joined the group

20
00:00:44,800 --> 00:00:47,520
and the interest of group signature is

21
00:00:47,520 --> 00:00:48,160
that

22
00:00:48,160 --> 00:00:50,800
user once they have joined the group can

23
00:00:50,800 --> 00:00:51,280
sign

24
00:00:51,280 --> 00:00:54,399
on behalf of the group and in particular

25
00:00:54,399 --> 00:00:56,000
the point is that the signature

26
00:00:56,000 --> 00:00:58,960
are anonymous except for an appointed

27
00:00:58,960 --> 00:00:59,760
entity

28
00:00:59,760 --> 00:01:01,840
which can be the group manager or some

29
00:01:01,840 --> 00:01:04,720
other entity depending on the models

30
00:01:04,720 --> 00:01:06,880
the interest of group signature is that

31
00:01:06,880 --> 00:01:08,640
in particular it allows

32
00:01:08,640 --> 00:01:11,360
anonymous access to a service meaning

33
00:01:11,360 --> 00:01:13,439
that the verifier will be able to

34
00:01:13,439 --> 00:01:17,119
check that the user is a valid users

35
00:01:17,119 --> 00:01:22,240
but he won't be able to identify him

36
00:01:22,720 --> 00:01:25,520
group signatures are now standardized at

37
00:01:25,520 --> 00:01:26,479
iso

38
00:01:26,479 --> 00:01:28,640
and many variants such as direct

39
00:01:28,640 --> 00:01:29,920
anonymous attestation

40
00:01:29,920 --> 00:01:32,960
or epid are now embedded in billions

41
00:01:32,960 --> 00:01:35,759
of devices

42
00:01:36,159 --> 00:01:38,720
the main problem with group signature is

43
00:01:38,720 --> 00:01:40,479
that adding users

44
00:01:40,479 --> 00:01:44,000
is very easy for most systems but

45
00:01:44,000 --> 00:01:46,399
once the users have joined the group it

46
00:01:46,399 --> 00:01:47,360
becomes

47
00:01:47,360 --> 00:01:50,560
very difficult to revoke them it's

48
00:01:50,560 --> 00:01:52,720
actually normal for groups for a

49
00:01:52,720 --> 00:01:54,079
signature scheme

50
00:01:54,079 --> 00:01:56,320
which is anonymous because it's very

51
00:01:56,320 --> 00:01:59,200
difficult for the verifier to decide

52
00:01:59,200 --> 00:02:02,719
if a user has produced as groups in yet

53
00:02:02,719 --> 00:02:04,560
you are using a reverb key

54
00:02:04,560 --> 00:02:08,399
or not the this explains

55
00:02:08,399 --> 00:02:11,360
why most group signature schemes do not

56
00:02:11,360 --> 00:02:12,000
consider

57
00:02:12,000 --> 00:02:14,319
revocation but the problem is that you

58
00:02:14,319 --> 00:02:16,000
cannot simply rule out

59
00:02:16,000 --> 00:02:18,959
this event because it is actually quite

60
00:02:18,959 --> 00:02:20,080
quite common

61
00:02:20,080 --> 00:02:23,280
for most systems for example revocation

62
00:02:23,280 --> 00:02:26,640
may be necessary when the subscription

63
00:02:26,640 --> 00:02:27,520
of a user

64
00:02:27,520 --> 00:02:30,800
ends moreover this can happen this can

65
00:02:30,800 --> 00:02:31,200
happen

66
00:02:31,200 --> 00:02:34,560
when the user lose his credentials

67
00:02:34,560 --> 00:02:37,280
or simply when a user does not do not

68
00:02:37,280 --> 00:02:38,239
comply

69
00:02:38,239 --> 00:02:41,680
with the rules of the services

70
00:02:41,680 --> 00:02:44,319
so there are many reasons that may lead

71
00:02:44,319 --> 00:02:45,120
to

72
00:02:45,120 --> 00:02:47,920
revocation and it is necessary to

73
00:02:47,920 --> 00:02:50,800
provide a way to do it efficiently

74
00:02:50,800 --> 00:02:53,200
actually for existing group signatures

75
00:02:53,200 --> 00:02:54,480
there are essentially

76
00:02:54,480 --> 00:02:58,319
three families of revocation system

77
00:02:58,319 --> 00:03:01,040
the first strategy is the one where the

78
00:03:01,040 --> 00:03:01,920
group manager

79
00:03:01,920 --> 00:03:05,760
will generate a new public key and then

80
00:03:05,760 --> 00:03:09,040
run the join algorithms with every

81
00:03:09,040 --> 00:03:12,400
unrevoked users the

82
00:03:12,400 --> 00:03:15,680
interest of this revocation strategy

83
00:03:15,680 --> 00:03:18,879
is that it um does not

84
00:03:18,879 --> 00:03:21,120
impact the signature of or the

85
00:03:21,120 --> 00:03:23,040
verification process

86
00:03:23,040 --> 00:03:25,680
and moreover it works with any grouping

87
00:03:25,680 --> 00:03:26,879
at your scheme

88
00:03:26,879 --> 00:03:29,920
but it is highly unpractical for the

89
00:03:29,920 --> 00:03:30,720
group manager

90
00:03:30,720 --> 00:03:33,680
we will have to run these join

91
00:03:33,680 --> 00:03:35,360
algorithms with every

92
00:03:35,360 --> 00:03:37,440
and revoked users moreover this means

93
00:03:37,440 --> 00:03:40,000
that the users the legitimate users

94
00:03:40,000 --> 00:03:43,200
won't be able to perform to

95
00:03:43,200 --> 00:03:45,840
produce valid group signature until they

96
00:03:45,840 --> 00:03:46,319
have

97
00:03:46,319 --> 00:03:49,440
joined the group again so

98
00:03:49,440 --> 00:03:53,200
it's a revocation strategy that should

99
00:03:53,200 --> 00:03:53,840
be used

100
00:03:53,840 --> 00:03:56,959
only in exceptional cases in particular

101
00:03:56,959 --> 00:04:00,000
you don't want to do that each time a

102
00:04:00,000 --> 00:04:04,000
user unsubscribes to the service

103
00:04:04,720 --> 00:04:06,959
the second revocation strategy is the

104
00:04:06,959 --> 00:04:08,799
one where the group manager

105
00:04:08,799 --> 00:04:13,120
publishes a so-called update information

106
00:04:13,120 --> 00:04:15,599
at the beginning of each time period of

107
00:04:15,599 --> 00:04:17,120
the system

108
00:04:17,120 --> 00:04:20,639
so using this update information

109
00:04:20,639 --> 00:04:23,360
the user will be able to prove that he

110
00:04:23,360 --> 00:04:24,160
is

111
00:04:24,160 --> 00:04:26,240
indeed a group member but also that he

112
00:04:26,240 --> 00:04:27,680
is still active

113
00:04:27,680 --> 00:04:30,800
at this time period so

114
00:04:30,800 --> 00:04:32,880
here the problem is that this means that

115
00:04:32,880 --> 00:04:33,919
the user

116
00:04:33,919 --> 00:04:36,160
must get retrieve this information at

117
00:04:36,160 --> 00:04:38,000
the beginning of each time period

118
00:04:38,000 --> 00:04:41,199
when he wants to generate a signature

119
00:04:41,199 --> 00:04:43,759
which is obviously a problem if his

120
00:04:43,759 --> 00:04:44,720
credentials

121
00:04:44,720 --> 00:04:48,080
are embedded in a non-connected device

122
00:04:48,080 --> 00:04:50,320
moreover this means that the signature

123
00:04:50,320 --> 00:04:51,120
process

124
00:04:51,120 --> 00:04:53,600
will be more complex form because it

125
00:04:53,600 --> 00:04:54,720
will not only

126
00:04:54,720 --> 00:04:56,720
prove that he is a member of the group

127
00:04:56,720 --> 00:04:58,160
he will also have to prove

128
00:04:58,160 --> 00:05:01,440
that he has not been revoked

129
00:05:01,440 --> 00:05:03,840
so it might be tempting at first sight

130
00:05:03,840 --> 00:05:04,560
to

131
00:05:04,560 --> 00:05:07,199
consider a large time period to avoid

132
00:05:07,199 --> 00:05:07,919
too

133
00:05:07,919 --> 00:05:10,800
too often retrieval of update

134
00:05:10,800 --> 00:05:12,160
information

135
00:05:12,160 --> 00:05:15,039
but the problem is that with this system

136
00:05:15,039 --> 00:05:16,160
the revocation

137
00:05:16,160 --> 00:05:18,240
is only postponed to the next time

138
00:05:18,240 --> 00:05:19,840
period so if you consider

139
00:05:19,840 --> 00:05:22,400
large time period you will have to wait

140
00:05:22,400 --> 00:05:24,560
for a long time before revoking a user

141
00:05:24,560 --> 00:05:26,080
which can be a problem

142
00:05:26,080 --> 00:05:28,560
so it's necessary necessary to find a

143
00:05:28,560 --> 00:05:29,280
trade-off

144
00:05:29,280 --> 00:05:32,400
for the time period but none of them

145
00:05:32,400 --> 00:05:36,080
is very satisfying

146
00:05:36,080 --> 00:05:38,880
the last revocation strategy is called

147
00:05:38,880 --> 00:05:40,960
verifier revocation list

148
00:05:40,960 --> 00:05:44,160
with such systems the group managers

149
00:05:44,160 --> 00:05:46,639
can add some specific tokens to a

150
00:05:46,639 --> 00:05:48,960
so-called revocation list

151
00:05:48,960 --> 00:05:50,560
and this token can be used by the

152
00:05:50,560 --> 00:05:52,160
verifier to check

153
00:05:52,160 --> 00:05:55,360
if a given signature has been generated

154
00:05:55,360 --> 00:05:58,639
by one of the revoked user

155
00:05:58,639 --> 00:06:01,919
the main interest of this solution

156
00:06:01,919 --> 00:06:04,960
is that the revoke user are immediately

157
00:06:04,960 --> 00:06:07,440
added to the revocation list so you can

158
00:06:07,440 --> 00:06:08,560
read the user

159
00:06:08,560 --> 00:06:12,000
immediately and for the users it's very

160
00:06:12,000 --> 00:06:13,520
interesting because

161
00:06:13,520 --> 00:06:15,520
they it does not change anything for

162
00:06:15,520 --> 00:06:17,440
them they do not have to retrieve some

163
00:06:17,440 --> 00:06:18,960
specific information

164
00:06:18,960 --> 00:06:21,280
they actually produce their signature as

165
00:06:21,280 --> 00:06:22,560
usual

166
00:06:22,560 --> 00:06:24,880
the main drawback of this solution is

167
00:06:24,880 --> 00:06:27,759
that it's very complex for the verifier

168
00:06:27,759 --> 00:06:30,000
when the revocation lists are large

169
00:06:30,000 --> 00:06:31,120
because for

170
00:06:31,120 --> 00:06:33,280
each reverse user they will have to

171
00:06:33,280 --> 00:06:34,479
perform some

172
00:06:34,479 --> 00:06:37,120
complex operations such as pairings to

173
00:06:37,120 --> 00:06:39,280
check if the group signature were indeed

174
00:06:39,280 --> 00:06:43,520
issued by one of the revoked users

175
00:06:43,520 --> 00:06:46,560
so there is actually no fully satisfying

176
00:06:46,560 --> 00:06:49,280
solution to revoke group signature

177
00:06:49,280 --> 00:06:51,520
this may explain why several variants

178
00:06:51,520 --> 00:06:53,599
have been proposed and are widely used

179
00:06:53,599 --> 00:06:54,960
today

180
00:06:54,960 --> 00:06:57,440
one of this variant is direct anonymous

181
00:06:57,440 --> 00:06:58,400
attestation

182
00:06:58,400 --> 00:07:01,440
where it is possible to force users to

183
00:07:01,440 --> 00:07:02,639
use the same

184
00:07:02,639 --> 00:07:05,360
pseudonym since user can be forced to

185
00:07:05,360 --> 00:07:06,800
use the same pseudonyms it means that

186
00:07:06,800 --> 00:07:08,400
you can relock them

187
00:07:08,400 --> 00:07:10,400
but the problem is that by doing that

188
00:07:10,400 --> 00:07:13,039
you lose anonymity for all signers you

189
00:07:13,039 --> 00:07:14,240
only retain

190
00:07:14,240 --> 00:07:17,680
a weaker notion of pseudonymity another

191
00:07:17,680 --> 00:07:19,440
solution has been proposed under the

192
00:07:19,440 --> 00:07:20,880
name of epid

193
00:07:20,880 --> 00:07:23,440
with epic system it's possible to revoke

194
00:07:23,440 --> 00:07:24,080
a user

195
00:07:24,080 --> 00:07:27,120
by adding one of their signature

196
00:07:27,120 --> 00:07:30,560
on a so-called revocation list and

197
00:07:30,560 --> 00:07:33,039
user to produce a new group signature

198
00:07:33,039 --> 00:07:34,400
will now have to

199
00:07:34,400 --> 00:07:37,039
prove that they did not generate one of

200
00:07:37,039 --> 00:07:38,960
the revoked signatures

201
00:07:38,960 --> 00:07:41,759
so regarding anonymity it's much better

202
00:07:41,759 --> 00:07:43,520
but the problem is that complexity

203
00:07:43,520 --> 00:07:45,280
increases with a number of revoked

204
00:07:45,280 --> 00:07:48,080
signature because if you have a large

205
00:07:48,080 --> 00:07:50,319
revocation list then the user will have

206
00:07:50,319 --> 00:07:51,759
to prove for any

207
00:07:51,759 --> 00:07:53,360
of the signatures that he has not

208
00:07:53,360 --> 00:07:56,240
generated this signature

209
00:07:56,240 --> 00:07:59,039
so here again none of these variants are

210
00:07:59,039 --> 00:08:01,039
fully satisfying

211
00:08:01,039 --> 00:08:04,160
that's why shu et al have proposed

212
00:08:04,160 --> 00:08:06,400
a new variant of group signature which

213
00:08:06,400 --> 00:08:08,400
is called group signature with

214
00:08:08,400 --> 00:08:11,440
time bound keys here's the main idea of

215
00:08:11,440 --> 00:08:13,680
grocery nature with time monkeys is that

216
00:08:13,680 --> 00:08:16,720
there are two kind of revocations

217
00:08:16,720 --> 00:08:18,800
the first one is called natural

218
00:08:18,800 --> 00:08:20,080
revocation

219
00:08:20,080 --> 00:08:21,840
and this is the kind of revocation that

220
00:08:21,840 --> 00:08:24,080
is predictable at the joining

221
00:08:24,080 --> 00:08:27,520
time so typically for example this is um

222
00:08:27,520 --> 00:08:29,840
the case of end of subscription because

223
00:08:29,840 --> 00:08:31,199
for example if you

224
00:08:31,199 --> 00:08:34,479
join the group you subscribe to a group

225
00:08:34,479 --> 00:08:37,039
for one month then you know that the

226
00:08:37,039 --> 00:08:38,080
signing right

227
00:08:38,080 --> 00:08:40,958
might be deactivated must be revoked in

228
00:08:40,958 --> 00:08:42,799
one month

229
00:08:42,799 --> 00:08:45,120
and there are there is also premature

230
00:08:45,120 --> 00:08:46,720
vacation that is due to

231
00:08:46,720 --> 00:08:50,240
unpredictable events so

232
00:08:50,240 --> 00:08:53,040
air natural revocation will be handled

233
00:08:53,040 --> 00:08:53,600
by

234
00:08:53,600 --> 00:08:56,800
assigning an expiry period to each

235
00:08:56,800 --> 00:09:00,000
user key this means that group signature

236
00:09:00,000 --> 00:09:03,440
can't be generated with this key after

237
00:09:03,440 --> 00:09:06,880
this time period and

238
00:09:06,880 --> 00:09:09,600
premature revocation will be deal we

239
00:09:09,600 --> 00:09:10,800
will dealt with the

240
00:09:10,800 --> 00:09:14,080
revocation list as in the strategy 3

241
00:09:14,080 --> 00:09:17,200
of group signature so at first sight it

242
00:09:17,200 --> 00:09:19,040
seems that we still have revocationally

243
00:09:19,040 --> 00:09:20,880
so it seems that we

244
00:09:20,880 --> 00:09:22,720
do not improve anything with this

245
00:09:22,720 --> 00:09:25,440
primitive but here's the idea is that

246
00:09:25,440 --> 00:09:28,959
in cases where natural revocation

247
00:09:28,959 --> 00:09:31,040
will represent the largest part of

248
00:09:31,040 --> 00:09:33,680
revocation it's very interesting

249
00:09:33,680 --> 00:09:36,320
as a solution because this means that

250
00:09:36,320 --> 00:09:37,360
you will have

251
00:09:37,360 --> 00:09:40,320
much shorter revocation list so you will

252
00:09:40,320 --> 00:09:42,240
have a much more efficient verification

253
00:09:42,240 --> 00:09:43,519
process

254
00:09:43,519 --> 00:09:46,080
and the state of the art today is a

255
00:09:46,080 --> 00:09:46,720
scheme by

256
00:09:46,720 --> 00:09:50,320
emul that use the revocation strategy

257
00:09:50,320 --> 00:09:52,320
too that i mentioned earlier

258
00:09:52,320 --> 00:09:56,080
to instantiate natural revocation

259
00:09:56,080 --> 00:09:58,560
so what is what are the contribution of

260
00:09:58,560 --> 00:09:59,920
this paper

261
00:09:59,920 --> 00:10:03,279
our first contribution of this paper

262
00:10:03,279 --> 00:10:06,720
is um is a better grenade

263
00:10:06,720 --> 00:10:10,320
granularity for group signature from

264
00:10:10,320 --> 00:10:12,959
natural revocation of group signature

265
00:10:12,959 --> 00:10:14,959
indeed the previous model

266
00:10:14,959 --> 00:10:17,839
proposed by schweit al only consider the

267
00:10:17,839 --> 00:10:18,720
notion of

268
00:10:18,720 --> 00:10:20,959
expiry time meaning that the signing

269
00:10:20,959 --> 00:10:22,480
keys are useless

270
00:10:22,480 --> 00:10:26,079
after this expiry time in particular

271
00:10:26,079 --> 00:10:29,120
the users

272
00:10:29,120 --> 00:10:32,560
are active members of the group at once

273
00:10:32,560 --> 00:10:33,839
they have joined the group

274
00:10:33,839 --> 00:10:36,399
so you cannot postpone the subscription

275
00:10:36,399 --> 00:10:39,120
of a user to the group

276
00:10:39,120 --> 00:10:43,120
so in our case we can we can deal with

277
00:10:43,120 --> 00:10:45,920
any set of time periods for example we

278
00:10:45,920 --> 00:10:47,519
can consider the case of

279
00:10:47,519 --> 00:10:50,079
a subscription that would start at a

280
00:10:50,079 --> 00:10:51,920
later period

281
00:10:51,920 --> 00:10:54,880
for example if you want to join a group

282
00:10:54,880 --> 00:10:56,640
starting next month for

283
00:10:56,640 --> 00:11:00,480
for a duration of one month you can also

284
00:11:00,480 --> 00:11:02,560
consider a much more complex situation

285
00:11:02,560 --> 00:11:03,680
where for example

286
00:11:03,680 --> 00:11:05,440
there will be a periodic access to a

287
00:11:05,440 --> 00:11:08,000
cervix for example a user that would

288
00:11:08,000 --> 00:11:11,040
use a public transport system but only

289
00:11:11,040 --> 00:11:12,880
during weekends and so on you can

290
00:11:12,880 --> 00:11:14,480
actually consider any

291
00:11:14,480 --> 00:11:17,600
set of time periods

292
00:11:18,079 --> 00:11:21,200
the this has some important consequences

293
00:11:21,200 --> 00:11:21,760
on the

294
00:11:21,760 --> 00:11:23,839
security properties of the system in

295
00:11:23,839 --> 00:11:25,040
particular it means that

296
00:11:25,040 --> 00:11:27,920
revocation is no longer definitive or we

297
00:11:27,920 --> 00:11:29,519
will not speak of

298
00:11:29,519 --> 00:11:32,560
reverb user but rather active user or

299
00:11:32,560 --> 00:11:34,880
inactive user or active keys or inactive

300
00:11:34,880 --> 00:11:35,760
keys that's

301
00:11:35,760 --> 00:11:38,720
roughly the same and in particular we

302
00:11:38,720 --> 00:11:39,519
now need

303
00:11:39,519 --> 00:11:42,640
to deal with the notion of both backward

304
00:11:42,640 --> 00:11:46,000
and forward unlink abilities

305
00:11:46,000 --> 00:11:48,399
and in particular the fact that we

306
00:11:48,399 --> 00:11:49,040
consider

307
00:11:49,040 --> 00:11:51,680
any set of time periods rule out many

308
00:11:51,680 --> 00:11:53,600
solutions such as binary tree to

309
00:11:53,600 --> 00:11:54,639
represent

310
00:11:54,639 --> 00:11:56,639
the the set of time periods because it

311
00:11:56,639 --> 00:11:57,760
won't be very

312
00:11:57,760 --> 00:12:00,160
efficient with this high granularity

313
00:12:00,160 --> 00:12:02,399
that we want

314
00:12:02,399 --> 00:12:05,519
so to constrict such kind of system we

315
00:12:05,519 --> 00:12:07,519
will use a very different tool

316
00:12:07,519 --> 00:12:10,160
we will use unlinkable predictable thing

317
00:12:10,160 --> 00:12:11,040
at your scheme

318
00:12:11,040 --> 00:12:14,000
that was proposed by kamini shettal a

319
00:12:14,000 --> 00:12:15,279
few years ago

320
00:12:15,279 --> 00:12:17,360
the idea of unlikable reductable

321
00:12:17,360 --> 00:12:18,639
signature is that

322
00:12:18,639 --> 00:12:21,920
you can issue one signature on a set

323
00:12:21,920 --> 00:12:25,120
of messages and the idea is that

324
00:12:25,120 --> 00:12:28,000
given this signature sigma you are able

325
00:12:28,000 --> 00:12:28,959
to derive

326
00:12:28,959 --> 00:12:31,519
a new signature sigma prime on the

327
00:12:31,519 --> 00:12:32,240
subset

328
00:12:32,240 --> 00:12:34,240
of these messages for example in my

329
00:12:34,240 --> 00:12:35,360
slide

330
00:12:35,360 --> 00:12:38,079
sigma prime is valid it's derived only

331
00:12:38,079 --> 00:12:39,360
for the message

332
00:12:39,360 --> 00:12:42,639
f2 and by derived

333
00:12:42,639 --> 00:12:45,920
on m2 i mean that you only need

334
00:12:45,920 --> 00:12:49,279
to know m2 to verify this new

335
00:12:49,279 --> 00:12:52,720
signature sigma prime and in particular

336
00:12:52,720 --> 00:12:54,320
the the interest of this relation is

337
00:12:54,320 --> 00:12:56,720
that you the new derived signature

338
00:12:56,720 --> 00:12:59,360
are unlinkable so given several sigma

339
00:12:59,360 --> 00:13:01,839
prime you cannot decide if they were

340
00:13:01,839 --> 00:13:06,399
generated using the same sigma or not

341
00:13:06,399 --> 00:13:10,240
so what is the basic id of our system

342
00:13:10,240 --> 00:13:13,120
in our system we will essentially

343
00:13:13,120 --> 00:13:14,160
associate with

344
00:13:14,160 --> 00:13:17,680
each time period a message

345
00:13:17,680 --> 00:13:20,320
and the properties the following one is

346
00:13:20,320 --> 00:13:20,959
that

347
00:13:20,959 --> 00:13:24,480
the message will be zero if the user

348
00:13:24,480 --> 00:13:27,920
is inactive at this time period

349
00:13:27,920 --> 00:13:30,560
so during the join process the user will

350
00:13:30,560 --> 00:13:32,240
simply interact with the group manager

351
00:13:32,240 --> 00:13:33,360
to receive

352
00:13:33,360 --> 00:13:36,000
a redactable signature on this set of

353
00:13:36,000 --> 00:13:37,519
messages

354
00:13:37,519 --> 00:13:40,399
and now to produce a group signature it

355
00:13:40,399 --> 00:13:42,079
will simply derive

356
00:13:42,079 --> 00:13:45,360
a signature on the current set

357
00:13:45,360 --> 00:13:48,639
on the current time period and

358
00:13:48,639 --> 00:13:50,720
the group signature will be valid if the

359
00:13:50,720 --> 00:13:52,959
reductable signature is valid

360
00:13:52,959 --> 00:13:56,000
and is the associated message is not

361
00:13:56,000 --> 00:13:59,279
zero in particular this means that we do

362
00:13:59,279 --> 00:13:59,680
not

363
00:13:59,680 --> 00:14:02,880
have to publish update information

364
00:14:02,880 --> 00:14:05,680
the user does not have to do anything

365
00:14:05,680 --> 00:14:07,440
once he has joined the group

366
00:14:07,440 --> 00:14:09,360
it's very important as i explained in

367
00:14:09,360 --> 00:14:12,160
particular when

368
00:14:12,160 --> 00:14:15,680
we need to store the credentials in

369
00:14:15,680 --> 00:14:19,040
non-connected devices

370
00:14:19,519 --> 00:14:22,639
regarding security we can prove that the

371
00:14:22,639 --> 00:14:24,880
traceability of the group signature

372
00:14:24,880 --> 00:14:27,600
directly relies on the unforgivability

373
00:14:27,600 --> 00:14:29,680
of the reductable signature scheme

374
00:14:29,680 --> 00:14:32,240
in particular this means that if a user

375
00:14:32,240 --> 00:14:33,920
managed to produce a valid group

376
00:14:33,920 --> 00:14:34,959
signature

377
00:14:34,959 --> 00:14:37,519
without joining the group or if he

378
00:14:37,519 --> 00:14:38,240
managed

379
00:14:38,240 --> 00:14:41,680
to illegally extend his signing rights

380
00:14:41,680 --> 00:14:42,320
by

381
00:14:42,320 --> 00:14:45,120
publishing a signature generated for

382
00:14:45,120 --> 00:14:46,880
time period

383
00:14:46,880 --> 00:14:49,440
where it's his signing keys are

384
00:14:49,440 --> 00:14:50,639
deactivated

385
00:14:50,639 --> 00:14:53,279
then he necessarily have broken the

386
00:14:53,279 --> 00:14:54,720
unforgivability of the reductable

387
00:14:54,720 --> 00:14:56,720
signature scheme

388
00:14:56,720 --> 00:14:59,760
regarding non-probability

389
00:14:59,760 --> 00:15:03,440
we need uh we need to to

390
00:15:03,440 --> 00:15:06,480
define the set of non-zero messages

391
00:15:06,480 --> 00:15:09,360
as the user secret key this will have an

392
00:15:09,360 --> 00:15:11,120
important consequence it means that

393
00:15:11,120 --> 00:15:14,320
the non-zero message cannot

394
00:15:14,320 --> 00:15:17,120
be revealed this would prevent us from

395
00:15:17,120 --> 00:15:17,600
using

396
00:15:17,600 --> 00:15:20,000
some specific unique predictable

397
00:15:20,000 --> 00:15:21,600
signatures

398
00:15:21,600 --> 00:15:24,240
and for premature revocation we will use

399
00:15:24,240 --> 00:15:26,399
the standard strategy which consists in

400
00:15:26,399 --> 00:15:29,440
generating tokens that can be used to

401
00:15:29,440 --> 00:15:30,480
revoke user

402
00:15:30,480 --> 00:15:33,680
at a given time period here we must be

403
00:15:33,680 --> 00:15:34,720
very careful because

404
00:15:34,720 --> 00:15:36,880
we want this token to revoke the user

405
00:15:36,880 --> 00:15:38,320
for this time period

406
00:15:38,320 --> 00:15:41,920
but they must be useless for signature

407
00:15:41,920 --> 00:15:44,480
issues before this time period and after

408
00:15:44,480 --> 00:15:46,160
this takedown this means that we

409
00:15:46,160 --> 00:15:48,959
aim at both backward and forward

410
00:15:48,959 --> 00:15:50,560
unlinkability

411
00:15:50,560 --> 00:15:55,120
and the consequence here that anonymity

412
00:15:55,120 --> 00:15:57,600
will need more than simple unique

413
00:15:57,600 --> 00:15:58,160
ability

414
00:15:58,160 --> 00:16:00,880
of the reductable signature scheme and

415
00:16:00,880 --> 00:16:02,240
in particular this means

416
00:16:02,240 --> 00:16:05,519
that we need some specific predictable

417
00:16:05,519 --> 00:16:07,360
signature schemes and moreover this

418
00:16:07,360 --> 00:16:08,320
means that

419
00:16:08,320 --> 00:16:10,639
the basic idea that i have described in

420
00:16:10,639 --> 00:16:12,240
my previous slide

421
00:16:12,240 --> 00:16:15,199
does not exactly work as it is we need

422
00:16:15,199 --> 00:16:16,000
something

423
00:16:16,000 --> 00:16:17,759
more complex we need to address some

424
00:16:17,759 --> 00:16:19,199
subtleties but

425
00:16:19,199 --> 00:16:21,519
if you have understood the basic idea i

426
00:16:21,519 --> 00:16:23,759
think it will be very easy to understand

427
00:16:23,759 --> 00:16:26,160
the more complex scheme described in the

428
00:16:26,160 --> 00:16:27,440
paper

429
00:16:27,440 --> 00:16:30,800
so we need some something we need some

430
00:16:30,800 --> 00:16:33,360
specific predictable signature schemes

431
00:16:33,360 --> 00:16:34,639
and actually the

432
00:16:34,639 --> 00:16:37,519
one of them was recently proposed in

433
00:16:37,519 --> 00:16:38,560
picasso

434
00:16:38,560 --> 00:16:42,160
2020 and if it fulfills

435
00:16:42,160 --> 00:16:45,440
all the necessary requirements but

436
00:16:45,440 --> 00:16:49,360
it requires quadratic um it has it

437
00:16:49,360 --> 00:16:52,000
it suffers from a limitation regarding

438
00:16:52,000 --> 00:16:53,680
the size of public key because

439
00:16:53,680 --> 00:16:56,160
the public key are of quadratic size

440
00:16:56,160 --> 00:16:58,240
which is obviously a problem

441
00:16:58,240 --> 00:17:01,440
for large number of time periods

442
00:17:01,440 --> 00:17:03,839
for example in our system if we consider

443
00:17:03,839 --> 00:17:06,160
time period of one day for the next

444
00:17:06,160 --> 00:17:08,959
three months we will have the next three

445
00:17:08,959 --> 00:17:09,679
years

446
00:17:09,679 --> 00:17:12,880
we will have a thousands of time periods

447
00:17:12,880 --> 00:17:15,599
which means that we need millions of

448
00:17:15,599 --> 00:17:17,280
elements in the public key of

449
00:17:17,280 --> 00:17:20,559
if we use this specific signature scheme

450
00:17:20,559 --> 00:17:23,520
that's why we propose a new variant with

451
00:17:23,520 --> 00:17:26,319
a much shorter public team

452
00:17:26,319 --> 00:17:28,720
so the valiant works with billionaire

453
00:17:28,720 --> 00:17:29,679
groups

454
00:17:29,679 --> 00:17:32,480
and it consists it considers a secret

455
00:17:32,480 --> 00:17:32,799
key

456
00:17:32,799 --> 00:17:34,320
for the group manager which only

457
00:17:34,320 --> 00:17:36,480
contains two elements

458
00:17:36,480 --> 00:17:39,919
and a signature generated on a set of

459
00:17:39,919 --> 00:17:41,280
messages

460
00:17:41,280 --> 00:17:43,679
only consists of two elements where each

461
00:17:43,679 --> 00:17:45,840
message is associated with a different

462
00:17:45,840 --> 00:17:46,720
power of

463
00:17:46,720 --> 00:17:50,160
i of y so

464
00:17:50,160 --> 00:17:53,360
to generate a derived signature on some

465
00:17:53,360 --> 00:17:55,600
specific subset

466
00:17:55,600 --> 00:17:58,559
there are several steps the first one is

467
00:17:58,559 --> 00:18:00,000
quite classical for

468
00:18:00,000 --> 00:18:03,360
ps signature it's the one where we will

469
00:18:03,360 --> 00:18:05,840
re-randomize the original signature so

470
00:18:05,840 --> 00:18:07,520
we will essentially

471
00:18:07,520 --> 00:18:10,720
rise each element to a random power

472
00:18:10,720 --> 00:18:13,360
and aggregate a signature on some random

473
00:18:13,360 --> 00:18:15,200
message

474
00:18:15,200 --> 00:18:18,320
once we have done that we can simply

475
00:18:18,320 --> 00:18:21,679
aggregate all redacted messages

476
00:18:21,679 --> 00:18:25,200
to generate this new element sigma prime

477
00:18:25,200 --> 00:18:27,919
and the novelty of this variance is that

478
00:18:27,919 --> 00:18:28,480
we now

479
00:18:28,480 --> 00:18:30,799
we will now commit to these three

480
00:18:30,799 --> 00:18:31,679
elements

481
00:18:31,679 --> 00:18:34,720
by simply hashing them with some

482
00:18:34,720 --> 00:18:36,880
additional information

483
00:18:36,880 --> 00:18:39,120
this step is particularly important to

484
00:18:39,120 --> 00:18:41,520
ensure and for examination of our system

485
00:18:41,520 --> 00:18:44,000
it is reminiscent of the the techniques

486
00:18:44,000 --> 00:18:46,480
that is that are used to prevent rocky

487
00:18:46,480 --> 00:18:47,360
attacks

488
00:18:47,360 --> 00:18:50,960
for for aggregate signatures

489
00:18:50,960 --> 00:18:52,559
once we have this new element we can

490
00:18:52,559 --> 00:18:54,080
generate the last

491
00:18:54,080 --> 00:18:56,320
the last element of our signatures that

492
00:18:56,320 --> 00:18:57,360
will be used

493
00:18:57,360 --> 00:18:59,679
to prove that the other elements were

494
00:18:59,679 --> 00:19:00,559
well formed

495
00:19:00,559 --> 00:19:02,799
we essentially prove that the signature

496
00:19:02,799 --> 00:19:04,720
is valid

497
00:19:04,720 --> 00:19:07,679
and it means that our signature only our

498
00:19:07,679 --> 00:19:09,840
derived scenario only consists of four

499
00:19:09,840 --> 00:19:11,679
elements four group elements

500
00:19:11,679 --> 00:19:14,240
and that they can be verified with

501
00:19:14,240 --> 00:19:15,200
essentially

502
00:19:15,200 --> 00:19:19,039
three two pairing equations

503
00:19:19,280 --> 00:19:22,240
actually in our system we will this will

504
00:19:22,240 --> 00:19:22,559
be

505
00:19:22,559 --> 00:19:25,120
very very efficient because we are in a

506
00:19:25,120 --> 00:19:26,799
very favorable case

507
00:19:26,799 --> 00:19:29,760
the first one is that we will only in as

508
00:19:29,760 --> 00:19:31,360
i said a group signature will be

509
00:19:31,360 --> 00:19:32,880
produced by deriving

510
00:19:32,880 --> 00:19:36,240
a signature on uh on

511
00:19:36,240 --> 00:19:38,240
one only one message so it means that

512
00:19:38,240 --> 00:19:39,280
the the set

513
00:19:39,280 --> 00:19:41,919
of non-reductive message only consists

514
00:19:41,919 --> 00:19:44,240
of one element which will

515
00:19:44,240 --> 00:19:47,440
allow us to to greatly simplify

516
00:19:47,440 --> 00:19:50,960
the the generation process

517
00:19:50,960 --> 00:19:53,120
moreover we will only consider two

518
00:19:53,120 --> 00:19:55,120
missed two types of messages

519
00:19:55,120 --> 00:19:57,679
either the message will be zero if the

520
00:19:57,679 --> 00:19:58,799
the signing key

521
00:19:58,799 --> 00:20:01,039
must be deactivated as this time period

522
00:20:01,039 --> 00:20:03,280
or the sign is the message will be

523
00:20:03,280 --> 00:20:06,320
the user secret key if it is active at

524
00:20:06,320 --> 00:20:08,159
this time period

525
00:20:08,159 --> 00:20:11,200
so concretely this means that

526
00:20:11,200 --> 00:20:14,000
the first step of our protocols will

527
00:20:14,000 --> 00:20:14,559
only

528
00:20:14,559 --> 00:20:17,360
require three exponentiation in the

529
00:20:17,360 --> 00:20:17,919
first

530
00:20:17,919 --> 00:20:21,120
pairing group the generation of the

531
00:20:21,120 --> 00:20:23,679
element aggregating

532
00:20:23,679 --> 00:20:26,880
non-reduct reducted messages will be

533
00:20:26,880 --> 00:20:28,080
will only require

534
00:20:28,080 --> 00:20:30,799
two exponentiation in the second pairing

535
00:20:30,799 --> 00:20:32,480
group

536
00:20:32,480 --> 00:20:35,360
there will be some hash computation but

537
00:20:35,360 --> 00:20:37,280
only one hash computation actually

538
00:20:37,280 --> 00:20:40,720
but the computational cost is negligible

539
00:20:40,720 --> 00:20:41,440
compared to

540
00:20:41,440 --> 00:20:44,080
the exponentiation and finally the last

541
00:20:44,080 --> 00:20:44,720
element

542
00:20:44,720 --> 00:20:47,679
of our signature can be generated with

543
00:20:47,679 --> 00:20:48,000
only

544
00:20:48,000 --> 00:20:50,880
three exponentiation in g1 thanks to the

545
00:20:50,880 --> 00:20:53,760
element provided in the public key

546
00:20:53,760 --> 00:20:55,520
finally to to complete our group

547
00:20:55,520 --> 00:20:57,039
signature we only need to

548
00:20:57,039 --> 00:20:59,600
produce a proof of knowledge of the user

549
00:20:59,600 --> 00:21:00,559
secret key

550
00:21:00,559 --> 00:21:02,880
but again this this can be done quite

551
00:21:02,880 --> 00:21:04,640
efficiently because it will essentially

552
00:21:04,640 --> 00:21:06,400
require one exponentiation

553
00:21:06,400 --> 00:21:08,640
and one pairing and actually we can

554
00:21:08,640 --> 00:21:09,520
replace

555
00:21:09,520 --> 00:21:12,320
the pairing by one exponentiation in g1

556
00:21:12,320 --> 00:21:14,080
if we simply add

557
00:21:14,080 --> 00:21:18,639
one element to our signature

558
00:21:19,760 --> 00:21:22,559
so regarding the size if we implement

559
00:21:22,559 --> 00:21:23,760
our scheme with

560
00:21:23,760 --> 00:21:27,039
bls 381 curve

561
00:21:27,039 --> 00:21:30,240
as we can see this leads to to the

562
00:21:30,240 --> 00:21:32,880
signing key which is very very short

563
00:21:32,880 --> 00:21:35,320
that because it only consists of

564
00:21:35,320 --> 00:21:37,840
128 bytes

565
00:21:37,840 --> 00:21:40,080
moreover one of the main events the edge

566
00:21:40,080 --> 00:21:41,120
of our system

567
00:21:41,120 --> 00:21:43,360
is that there is no update information

568
00:21:43,360 --> 00:21:45,039
the again the users

569
00:21:45,039 --> 00:21:48,320
do not have to retrieve uh anything

570
00:21:48,320 --> 00:21:51,919
for when a news a new time period begins

571
00:21:51,919 --> 00:21:54,240
and another very important feature of

572
00:21:54,240 --> 00:21:55,440
our scheme is that

573
00:21:55,440 --> 00:21:57,280
the scene at the group signature are

574
00:21:57,280 --> 00:21:58,480
very short because

575
00:21:58,480 --> 00:22:02,880
they only consist of roughly 300 bytes

576
00:22:02,880 --> 00:22:04,720
finally regarding the complexity as i

577
00:22:04,720 --> 00:22:06,640
explained the signatures

578
00:22:06,640 --> 00:22:09,200
complexity is constant we essentially

579
00:22:09,200 --> 00:22:10,840
require a few

580
00:22:10,840 --> 00:22:13,679
exponentiation and verification can be

581
00:22:13,679 --> 00:22:15,520
performed quite efficiently

582
00:22:15,520 --> 00:22:17,760
as long as the number of premature

583
00:22:17,760 --> 00:22:19,440
revocation

584
00:22:19,440 --> 00:22:22,960
is not too large so

585
00:22:22,960 --> 00:22:26,240
to conclude there's we have explained in

586
00:22:26,240 --> 00:22:26,799
this paper

587
00:22:26,799 --> 00:22:28,960
why group signature we stand on

588
00:22:28,960 --> 00:22:30,880
timebound keys is a very efficient

589
00:22:30,880 --> 00:22:33,280
solution for user revocation

590
00:22:33,280 --> 00:22:36,400
we as explained the user can be

591
00:22:36,400 --> 00:22:38,880
revoked immediately using revocationally

592
00:22:38,880 --> 00:22:42,159
so we keep we retain the the flexibility

593
00:22:42,159 --> 00:22:44,799
of group signature with the revocation

594
00:22:44,799 --> 00:22:45,600
list

595
00:22:45,600 --> 00:22:48,080
and thanks to the the idea of natural

596
00:22:48,080 --> 00:22:49,120
revocation

597
00:22:49,120 --> 00:22:52,320
we can retain short revocation lists

598
00:22:52,320 --> 00:22:54,080
which means that verification can

599
00:22:54,080 --> 00:22:57,120
remain efficient with research kind of

600
00:22:57,120 --> 00:22:57,600
system

601
00:22:57,600 --> 00:23:01,280
despite the revocation moreover in this

602
00:23:01,280 --> 00:23:02,559
system we have

603
00:23:02,559 --> 00:23:04,799
improved the granularity of natural

604
00:23:04,799 --> 00:23:05,840
revocation

605
00:23:05,840 --> 00:23:07,520
by allowing the group member to

606
00:23:07,520 --> 00:23:09,840
associate assigning keys

607
00:23:09,840 --> 00:23:12,480
with any set of time periods which can

608
00:23:12,480 --> 00:23:15,039
be useful in many scenarios

609
00:23:15,039 --> 00:23:18,000
we have also shown how to construct it

610
00:23:18,000 --> 00:23:19,360
very efficiently

611
00:23:19,360 --> 00:23:21,280
with unlinkable reductive signature

612
00:23:21,280 --> 00:23:22,640
scheme in particular

613
00:23:22,640 --> 00:23:25,120
in our system we have a very simple

614
00:23:25,120 --> 00:23:26,960
joint procedure where the group manager

615
00:23:26,960 --> 00:23:30,799
essentially generates

616
00:23:30,799 --> 00:23:33,440
a signature a reductable signature on a

617
00:23:33,440 --> 00:23:35,280
set of messages

618
00:23:35,280 --> 00:23:37,200
we have a very efficient signature

619
00:23:37,200 --> 00:23:39,200
process where the user

620
00:23:39,200 --> 00:23:42,400
simply derives

621
00:23:42,400 --> 00:23:45,200
a signature and proves knowledge of the

622
00:23:45,200 --> 00:23:46,799
of its secret key

623
00:23:46,799 --> 00:23:49,200
and finally the verification is very

624
00:23:49,200 --> 00:23:50,080
simple because it

625
00:23:50,080 --> 00:23:52,799
essentially consists in verifying the

626
00:23:52,799 --> 00:23:54,320
redactable signatures

627
00:23:54,320 --> 00:23:57,600
as the reduct level signature

628
00:23:57,600 --> 00:23:59,440
in particular an important feature is

629
00:23:59,440 --> 00:24:00,960
that we do not need

630
00:24:00,960 --> 00:24:03,039
to publish or retrieve update

631
00:24:03,039 --> 00:24:04,720
information at the beginning of each

632
00:24:04,720 --> 00:24:06,080
time player

633
00:24:06,080 --> 00:24:08,159
finally we have proposed a new

634
00:24:08,159 --> 00:24:10,080
unlinkable predictable signature

635
00:24:10,080 --> 00:24:12,480
with short public keys that can be of

636
00:24:12,480 --> 00:24:13,279
independent

637
00:24:13,279 --> 00:24:16,880
interest in particular if we use this

638
00:24:16,880 --> 00:24:19,120
euro scheme to implement our

639
00:24:19,120 --> 00:24:20,080
construction

640
00:24:20,080 --> 00:24:22,640
this lead to very short and constant

641
00:24:22,640 --> 00:24:23,919
size group signature

642
00:24:23,919 --> 00:24:28,080
and the fast signature generation

643
00:24:28,799 --> 00:24:31,279
thank you for your attention and do not

644
00:24:31,279 --> 00:24:32,240
hesitate to

645
00:24:32,240 --> 00:24:35,159
send me an email if you have any

646
00:24:35,159 --> 00:24:38,159
questions

