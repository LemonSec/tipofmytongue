1
00:00:02,159 --> 00:00:04,560
hi this is jian yoon from the university

2
00:00:04,560 --> 00:00:05,839
of hong kong

3
00:00:05,839 --> 00:00:08,320
today i'll present our paper compassion

4
00:00:08,320 --> 00:00:09,280
knowledge proof

5
00:00:09,280 --> 00:00:12,799
professional ecdsa with trustless setup

6
00:00:12,799 --> 00:00:15,360
this is a john's work with han dong shou

7
00:00:15,360 --> 00:00:16,320
and shan shay

8
00:00:16,320 --> 00:00:20,240
from matrix elements technologies

9
00:00:21,520 --> 00:00:23,519
in this paper i'll first give a brief

10
00:00:23,519 --> 00:00:24,640
introduction about

11
00:00:24,640 --> 00:00:27,359
what is virtual ecdsa and why addictive

12
00:00:27,359 --> 00:00:30,080
homomorphic encryption is used

13
00:00:30,080 --> 00:00:31,599
after that i'll talk about the main

14
00:00:31,599 --> 00:00:33,440
contribution of our paper

15
00:00:33,440 --> 00:00:35,440
which is a pseudo knowledge proof

16
00:00:35,440 --> 00:00:37,440
proving the discrete log relation

17
00:00:37,440 --> 00:00:40,640
in some xsm group and the correctness

18
00:00:40,640 --> 00:00:43,680
of some cipher test called cr encryption

19
00:00:43,680 --> 00:00:45,600
and then we will see how they can be

20
00:00:45,600 --> 00:00:48,320
applied to two-party ecdsa

21
00:00:48,320 --> 00:00:52,480
as well as threshold ecdsa

22
00:00:53,920 --> 00:00:56,800
so firstly what is special ecdsa

23
00:00:56,800 --> 00:00:57,760
actually first

24
00:00:57,760 --> 00:01:01,039
signature allow and parties to share the

25
00:01:01,039 --> 00:01:03,280
message signing ability without trusting

26
00:01:03,280 --> 00:01:04,479
each other

27
00:01:04,479 --> 00:01:06,720
such as if there are n parties there

28
00:01:06,720 --> 00:01:07,680
then with

29
00:01:07,680 --> 00:01:10,400
less tea or less than tea parties they

30
00:01:10,400 --> 00:01:11,680
cannot jointly

31
00:01:11,680 --> 00:01:14,560
generate a wireless signature only with

32
00:01:14,560 --> 00:01:15,520
more than t

33
00:01:15,520 --> 00:01:19,040
plus one users they can jointly generate

34
00:01:19,040 --> 00:01:20,000
a valid

35
00:01:20,000 --> 00:01:22,720
factual signature and fractional ec dsa

36
00:01:22,720 --> 00:01:24,799
signature is useful in practice for

37
00:01:24,799 --> 00:01:25,600
example

38
00:01:25,600 --> 00:01:27,520
in the setting of t is equal to one and

39
00:01:27,520 --> 00:01:29,520
e n is equal to three

40
00:01:29,520 --> 00:01:31,759
it can be used for hot wallet of a

41
00:01:31,759 --> 00:01:33,840
crypto exchange company

42
00:01:33,840 --> 00:01:36,159
such that the company holds sk1 for

43
00:01:36,159 --> 00:01:37,600
online transaction

44
00:01:37,600 --> 00:01:41,040
and they keep sk2 as a paper from backup

45
00:01:41,040 --> 00:01:43,600
and then the separate security firm will

46
00:01:43,600 --> 00:01:45,360
hold the sk3 to whether they

47
00:01:45,360 --> 00:01:46,479
transactions

48
00:01:46,479 --> 00:01:49,360
so in this system they need two keys to

49
00:01:49,360 --> 00:01:50,799
sign a transaction

50
00:01:50,799 --> 00:01:53,119
and losing one key from the exchange or

51
00:01:53,119 --> 00:01:54,799
the security firm cannot

52
00:01:54,799 --> 00:01:56,560
compromise the security of the hot

53
00:01:56,560 --> 00:01:58,320
wallet and that's why

54
00:01:58,320 --> 00:02:02,960
facial ecdsa can be useful in practice

55
00:02:02,960 --> 00:02:05,840
currently how fascial ecdsa is actually

56
00:02:05,840 --> 00:02:06,560
implemented

57
00:02:06,560 --> 00:02:08,959
in some of the existing blockchain um

58
00:02:08,959 --> 00:02:10,720
they are done in a trivial way

59
00:02:10,720 --> 00:02:13,599
that means that if i set the threshold

60
00:02:13,599 --> 00:02:14,319
as t

61
00:02:14,319 --> 00:02:17,360
so we need to append t plus one ec dsa

62
00:02:17,360 --> 00:02:18,080
signature

63
00:02:18,080 --> 00:02:21,360
and we need to verify them one by one

64
00:02:21,360 --> 00:02:24,480
so it is highly inefficient and it costs

65
00:02:24,480 --> 00:02:25,040
quite a lot

66
00:02:25,040 --> 00:02:27,760
in terms of transaction costs because um

67
00:02:27,760 --> 00:02:28,560
this

68
00:02:28,560 --> 00:02:30,480
transition fee in blockchain transaction

69
00:02:30,480 --> 00:02:31,920
is related to the size

70
00:02:31,920 --> 00:02:33,840
of a transaction and then it is

71
00:02:33,840 --> 00:02:36,480
dominated by the signatures there

72
00:02:36,480 --> 00:02:38,800
so appending t plus one signature is

73
00:02:38,800 --> 00:02:40,319
obviously not the best

74
00:02:40,319 --> 00:02:44,720
solution and in this paper what can we

75
00:02:44,720 --> 00:02:45,519
achieve

76
00:02:45,519 --> 00:02:47,840
so the goal the final goal of a scheme

77
00:02:47,840 --> 00:02:50,160
is to improve the efficiency

78
00:02:50,160 --> 00:02:52,720
of the ck-proof in two-party and fascial

79
00:02:52,720 --> 00:02:53,920
ecdsa

80
00:02:53,920 --> 00:02:56,319
because they are the most complicated

81
00:02:56,319 --> 00:02:57,280
parts

82
00:02:57,280 --> 00:03:00,400
in these protocols and when applied to

83
00:03:00,400 --> 00:03:02,239
two-party ecdsa

84
00:03:02,239 --> 00:03:04,560
um the bandwidth of the key gen is

85
00:03:04,560 --> 00:03:06,319
decreased by 47

86
00:03:06,319 --> 00:03:09,519
while the running time is much faster

87
00:03:09,519 --> 00:03:13,040
in both key gen and design parts

88
00:03:13,040 --> 00:03:15,200
and when applied to fascial ecdsa we

89
00:03:15,200 --> 00:03:16,720
have two solutions

90
00:03:16,720 --> 00:03:18,959
scheme one they are very optimized for

91
00:03:18,959 --> 00:03:20,080
key gen

92
00:03:20,080 --> 00:03:23,360
um 70 less bandwidth and 85 percent

93
00:03:23,360 --> 00:03:24,319
faster

94
00:03:24,319 --> 00:03:26,239
than the existing works but at the cost

95
00:03:26,239 --> 00:03:27,440
of higher 20

96
00:03:27,440 --> 00:03:30,400
larger bandwidth in designing parts so

97
00:03:30,400 --> 00:03:31,920
it may be good in some cases but not

98
00:03:31,920 --> 00:03:33,280
good in some other case

99
00:03:33,280 --> 00:03:35,519
so we also propose scheme 2 which

100
00:03:35,519 --> 00:03:37,760
provides an all-round performance

101
00:03:37,760 --> 00:03:40,879
so we have 60 less spend with use with

102
00:03:40,879 --> 00:03:41,920
76

103
00:03:41,920 --> 00:03:44,159
faster in key gen without any additional

104
00:03:44,159 --> 00:03:45,200
cost in

105
00:03:45,200 --> 00:03:48,000
signing parts

106
00:03:48,560 --> 00:03:52,000
so how do we achieve it so actually

107
00:03:52,000 --> 00:03:55,519
we achieve this because many ck proofs

108
00:03:55,519 --> 00:03:58,959
are involved in two-party official ecdsa

109
00:03:58,959 --> 00:04:01,280
and we want to improve the

110
00:04:01,280 --> 00:04:03,760
implementation of the existing ck proof

111
00:04:03,760 --> 00:04:06,000
in those existing work and this is one

112
00:04:06,000 --> 00:04:06,959
example

113
00:04:06,959 --> 00:04:10,239
of facial ecdsa in the pkc 2020

114
00:04:10,239 --> 00:04:13,519
so you can see that they use a ck proof

115
00:04:13,519 --> 00:04:15,120
of discrete log relation

116
00:04:15,120 --> 00:04:17,839
in the keygen part and they use a ck

117
00:04:17,839 --> 00:04:18,399
proof

118
00:04:18,399 --> 00:04:21,358
for some cipher test in the signing part

119
00:04:21,358 --> 00:04:22,000
and

120
00:04:22,000 --> 00:04:25,759
this is the most computationally

121
00:04:25,759 --> 00:04:26,800
expensive

122
00:04:26,800 --> 00:04:28,880
and the bandwidth they use quite a lot

123
00:04:28,880 --> 00:04:31,280
of bandwidth in this part as well so

124
00:04:31,280 --> 00:04:33,759
the um they are these protocols are

125
00:04:33,759 --> 00:04:34,800
dominated

126
00:04:34,800 --> 00:04:36,880
um in running time and bandwidth by

127
00:04:36,880 --> 00:04:38,960
these proto ck protocols

128
00:04:38,960 --> 00:04:43,840
and we want to improve that part

129
00:04:43,919 --> 00:04:46,560
and before going into further details we

130
00:04:46,560 --> 00:04:48,479
just give a brief introduction of the

131
00:04:48,479 --> 00:04:50,479
addictive homomorphic encryption used

132
00:04:50,479 --> 00:04:51,280
there

133
00:04:51,280 --> 00:04:52,960
some of the earlier papers they use

134
00:04:52,960 --> 00:04:54,720
paleo encryption for that

135
00:04:54,720 --> 00:04:58,160
but some of the recent papers they use a

136
00:04:58,160 --> 00:05:00,479
adaptive homomorphic cl encryption which

137
00:05:00,479 --> 00:05:01,600
is based

138
00:05:01,600 --> 00:05:04,400
on an unknown order group g which

139
00:05:04,400 --> 00:05:06,400
contains a subgroup f

140
00:05:06,400 --> 00:05:08,479
which is a non-order subgroup and the

141
00:05:08,479 --> 00:05:10,639
discrete law problem is easy

142
00:05:10,639 --> 00:05:14,240
to compute in this subgroup

143
00:05:14,240 --> 00:05:17,840
and this group is based on the hardness

144
00:05:17,840 --> 00:05:19,520
of a so-called the heart subgroup

145
00:05:19,520 --> 00:05:20,720
membership problem

146
00:05:20,720 --> 00:05:23,440
so we simply call this kind of group the

147
00:05:23,440 --> 00:05:24,400
hsm

148
00:05:24,400 --> 00:05:26,880
groups and it can be constructed from

149
00:05:26,880 --> 00:05:27,840
some class group

150
00:05:27,840 --> 00:05:31,440
of emerging quadratic fields

151
00:05:31,440 --> 00:05:33,280
the cr encryption has certain advantage

152
00:05:33,280 --> 00:05:34,800
as compared to the paleo encryption

153
00:05:34,800 --> 00:05:37,360
like generation of the class group does

154
00:05:37,360 --> 00:05:39,360
not require trust per party

155
00:05:39,360 --> 00:05:41,360
and the group elements in the classroom

156
00:05:41,360 --> 00:05:43,039
is smaller than the paleo group elements

157
00:05:43,039 --> 00:05:45,360
and so on

158
00:05:45,360 --> 00:05:47,680
and we will not go into further details

159
00:05:47,680 --> 00:05:49,039
about the

160
00:05:49,039 --> 00:05:50,960
how it is constructed mathematically we

161
00:05:50,960 --> 00:05:54,240
just need to remember that

162
00:05:54,240 --> 00:05:57,360
the group g there is construct they have

163
00:05:57,360 --> 00:05:58,479
a subgroup f

164
00:05:58,479 --> 00:06:00,560
and in that particular subgroup f of

165
00:06:00,560 --> 00:06:01,600
non-multiple

166
00:06:01,600 --> 00:06:04,400
the discrete law problem is easy to

167
00:06:04,400 --> 00:06:05,520
compute

168
00:06:05,520 --> 00:06:09,120
so we just need to memorize this fact

169
00:06:09,120 --> 00:06:11,360
how do we see our encryption we also

170
00:06:11,360 --> 00:06:12,960
don't need to remember the details we

171
00:06:12,960 --> 00:06:14,639
just need to remember that okay this

172
00:06:14,639 --> 00:06:15,199
form

173
00:06:15,199 --> 00:06:17,360
decipher test and is in this form to

174
00:06:17,360 --> 00:06:18,319
encrypt a message

175
00:06:18,319 --> 00:06:21,680
m we use an encryption randomness of rho

176
00:06:21,680 --> 00:06:23,759
such that we compute f to the power m

177
00:06:23,759 --> 00:06:25,840
times p k to the power rho

178
00:06:25,840 --> 00:06:28,880
this is the c1 and c2 is another

179
00:06:28,880 --> 00:06:30,800
generator gq to the power rho

180
00:06:30,800 --> 00:06:33,919
remember f is the part that discrete law

181
00:06:33,919 --> 00:06:34,319
is

182
00:06:34,319 --> 00:06:36,720
easy to solve just need to remember this

183
00:06:36,720 --> 00:06:38,560
one

184
00:06:38,560 --> 00:06:40,800
and this is just showing that it can be

185
00:06:40,800 --> 00:06:45,199
compute addictive homomorphic operations

186
00:06:46,240 --> 00:06:48,560
so um let's quickly go into the main

187
00:06:48,560 --> 00:06:50,800
contribution of this paper the ck proof

188
00:06:50,800 --> 00:06:53,039
part

189
00:06:53,039 --> 00:06:55,840
so what do we want to solve we want to

190
00:06:55,840 --> 00:06:57,039
solve that

191
00:06:57,039 --> 00:06:59,919
uh two for two relations we want to show

192
00:06:59,919 --> 00:07:01,759
the discrete log relation of some

193
00:07:01,759 --> 00:07:03,360
unknown order group element

194
00:07:03,360 --> 00:07:05,440
such as this one p k is equal to some

195
00:07:05,440 --> 00:07:08,000
generator to power s k

196
00:07:08,000 --> 00:07:10,080
or the relation about the well

197
00:07:10,080 --> 00:07:12,000
fontedness of a c l cipher test

198
00:07:12,000 --> 00:07:14,479
c one is the encryption of the message

199
00:07:14,479 --> 00:07:16,080
together with the encryption randomness

200
00:07:16,080 --> 00:07:19,199
row using some proper key pk so this is

201
00:07:19,199 --> 00:07:20,240
the

202
00:07:20,240 --> 00:07:22,639
second relation we want to show how

203
00:07:22,639 --> 00:07:24,240
about the existing work

204
00:07:24,240 --> 00:07:28,400
um in crypto 2019

205
00:07:28,400 --> 00:07:30,720
they use a ck proof of a single bit

206
00:07:30,720 --> 00:07:32,319
challenge

207
00:07:32,319 --> 00:07:34,160
such that um if you want to achieve a

208
00:07:34,160 --> 00:07:36,560
sinus of 2 to the power minus epsilon s

209
00:07:36,560 --> 00:07:38,720
then the protocol has to be repeated for

210
00:07:38,720 --> 00:07:40,560
epsilon s parts

211
00:07:40,560 --> 00:07:44,800
then it is highly inefficient and

212
00:07:44,800 --> 00:07:48,000
this is uh how they use for both

213
00:07:48,000 --> 00:07:50,800
the relation one and relation two and in

214
00:07:50,800 --> 00:07:51,680
paper two

215
00:07:51,680 --> 00:07:54,720
um pkc 2020 paper they are tackled them

216
00:07:54,720 --> 00:07:57,759
differently um for the dr relation

217
00:07:57,759 --> 00:08:00,639
they use the lcm tracks which reduce the

218
00:08:00,639 --> 00:08:02,319
number of repetition

219
00:08:02,319 --> 00:08:05,759
um by 10 times and they also

220
00:08:05,759 --> 00:08:08,800
tackle the cl cycle test

221
00:08:08,800 --> 00:08:12,080
problem by using some new assumptions

222
00:08:12,080 --> 00:08:14,000
the strong roots assumption into hsm

223
00:08:14,000 --> 00:08:15,759
group and we will look into the

224
00:08:15,759 --> 00:08:20,400
further details in the next field page

225
00:08:21,759 --> 00:08:25,280
so let's see what are the existing

226
00:08:25,280 --> 00:08:28,639
problems so the ck proof

227
00:08:28,639 --> 00:08:31,759
for the discrete law um originally if we

228
00:08:31,759 --> 00:08:33,440
want to achieve a sinus error of 2 to

229
00:08:33,440 --> 00:08:35,360
the power t then we need

230
00:08:35,360 --> 00:08:39,120
f t times for 1b challenge and then

231
00:08:39,120 --> 00:08:42,320
by the um scheme in pkc 2020

232
00:08:42,320 --> 00:08:44,480
it will reduce by the repetition is

233
00:08:44,480 --> 00:08:47,120
rebuilt reduced by 10 times so we need

234
00:08:47,120 --> 00:08:51,279
times for running the same ck protocols

235
00:08:51,279 --> 00:08:54,800
but again it is still not quite a lot of

236
00:08:54,800 --> 00:08:57,360
course needed in terms of bandwidth

237
00:08:57,360 --> 00:08:59,920
as well as computation times so you need

238
00:08:59,920 --> 00:09:00,720
to repeat

239
00:09:00,720 --> 00:09:03,279
the process for eight times also so we

240
00:09:03,279 --> 00:09:04,000
want

241
00:09:04,000 --> 00:09:06,800
to um reduce it to one time only so this

242
00:09:06,800 --> 00:09:09,839
is our first goal for the dl relation

243
00:09:09,839 --> 00:09:11,920
how about the second one the cl cypher

244
00:09:11,920 --> 00:09:13,200
test

245
00:09:13,200 --> 00:09:16,399
actually the problem of um the reference

246
00:09:16,399 --> 00:09:17,120
to here

247
00:09:17,120 --> 00:09:18,959
is that it does not allow a fast and

248
00:09:18,959 --> 00:09:20,959
trustless setup

249
00:09:20,959 --> 00:09:23,839
so um why is that this is big mainly

250
00:09:23,839 --> 00:09:25,440
because they use an assumption called

251
00:09:25,440 --> 00:09:27,120
the strong roots assumption

252
00:09:27,120 --> 00:09:29,279
and this assumption states that when

253
00:09:29,279 --> 00:09:30,399
given a random

254
00:09:30,399 --> 00:09:33,440
group element w it is difficult to

255
00:09:33,440 --> 00:09:34,480
output a group

256
00:09:34,480 --> 00:09:37,519
element u and an integer e such that u

257
00:09:37,519 --> 00:09:39,440
to the power e is equal to w

258
00:09:39,440 --> 00:09:41,839
so this is something similar to a strong

259
00:09:41,839 --> 00:09:43,920
rsa assumption

260
00:09:43,920 --> 00:09:46,160
but here we require that w is a random

261
00:09:46,160 --> 00:09:47,279
group element

262
00:09:47,279 --> 00:09:49,760
but however this random group element

263
00:09:49,760 --> 00:09:51,360
cannot be easily obtained

264
00:09:51,360 --> 00:09:53,600
it can either be obtained from a

265
00:09:53,600 --> 00:09:55,200
standardized group so we

266
00:09:55,200 --> 00:09:57,279
assume that all parties they trust some

267
00:09:57,279 --> 00:09:59,040
standardizing authority

268
00:09:59,040 --> 00:10:01,600
then they can use this but again this is

269
00:10:01,600 --> 00:10:03,760
not desirable for the applications like

270
00:10:03,760 --> 00:10:05,279
public blockchain

271
00:10:05,279 --> 00:10:09,120
where no transfer party exists

272
00:10:09,120 --> 00:10:12,000
then the next available option is that

273
00:10:12,000 --> 00:10:12,480
all

274
00:10:12,480 --> 00:10:14,640
participating parties they can jointly

275
00:10:14,640 --> 00:10:15,680
generate

276
00:10:15,680 --> 00:10:19,360
this random group element interactively

277
00:10:19,360 --> 00:10:22,399
but again this solution greatly

278
00:10:22,399 --> 00:10:24,160
increased the run complexity and the

279
00:10:24,160 --> 00:10:26,000
bandwidth used

280
00:10:26,000 --> 00:10:30,480
so no perfect solution for this one

281
00:10:30,480 --> 00:10:33,920
so let's see how we achieve that

282
00:10:33,920 --> 00:10:36,959
so we first illustrate how a simple dr

283
00:10:36,959 --> 00:10:38,720
relation can be proved

284
00:10:38,720 --> 00:10:40,480
um in our case remember this is an

285
00:10:40,480 --> 00:10:42,720
unknown order group so the discrete knot

286
00:10:42,720 --> 00:10:43,360
is not

287
00:10:43,360 --> 00:10:47,120
easy to um to prove and

288
00:10:47,120 --> 00:10:49,600
also in particular um the main

289
00:10:49,600 --> 00:10:51,839
difficulty here is that um the group g

290
00:10:51,839 --> 00:10:52,880
they have a subgroup

291
00:10:52,880 --> 00:10:56,399
f and it makes the ck proof

292
00:10:56,399 --> 00:10:58,160
much more complicated it can be

293
00:10:58,160 --> 00:11:01,760
illustrated by the following example

294
00:11:01,760 --> 00:11:05,040
so assume that we use an assumption

295
00:11:05,040 --> 00:11:05,920
using

296
00:11:05,920 --> 00:11:07,360
some of the previous work we call the

297
00:11:07,360 --> 00:11:09,120
adaptive root assumption

298
00:11:09,120 --> 00:11:12,480
we try to use this one to make a

299
00:11:12,480 --> 00:11:15,760
algorithm one this as a simple ck proof

300
00:11:15,760 --> 00:11:18,720
so what is the adaptive assumption this

301
00:11:18,720 --> 00:11:20,560
assumption states that

302
00:11:20,560 --> 00:11:23,200
um for a random group element g sorry a

303
00:11:23,200 --> 00:11:23,680
random

304
00:11:23,680 --> 00:11:27,120
element w when you are given a prime l

305
00:11:27,120 --> 00:11:30,320
you cannot output some u such that u to

306
00:11:30,320 --> 00:11:31,040
the power

307
00:11:31,040 --> 00:11:33,519
l is equal to w so it means that uh

308
00:11:33,519 --> 00:11:34,560
computing the l

309
00:11:34,560 --> 00:11:37,920
root of w is difficult so this is the

310
00:11:37,920 --> 00:11:40,720
abductive root assumption

311
00:11:40,720 --> 00:11:43,839
so um if if we simply use this one to

312
00:11:43,839 --> 00:11:44,880
give a ck proof

313
00:11:44,880 --> 00:11:46,800
it can be done in this way so the

314
00:11:46,800 --> 00:11:48,880
verifier sends a random

315
00:11:48,880 --> 00:11:51,760
lambda bit prime l and the prover simply

316
00:11:51,760 --> 00:11:52,399
needs

317
00:11:52,399 --> 00:11:54,720
to find the quotient and the remainder

318
00:11:54,720 --> 00:11:56,079
of the x such that

319
00:11:56,079 --> 00:11:59,519
x is equal to q prime times l plus r

320
00:11:59,519 --> 00:12:01,600
and the prover computes the capital q is

321
00:12:01,600 --> 00:12:03,519
equal to g to the power q prime

322
00:12:03,519 --> 00:12:05,600
and also they will pass the remainder to

323
00:12:05,600 --> 00:12:06,639
the verify

324
00:12:06,639 --> 00:12:08,639
to verify it just check the range of the

325
00:12:08,639 --> 00:12:10,720
remainder as well as

326
00:12:10,720 --> 00:12:12,959
checking this relation the capital q to

327
00:12:12,959 --> 00:12:14,880
power l times g to the power

328
00:12:14,880 --> 00:12:18,800
is equal to w so it makes use of this

329
00:12:18,800 --> 00:12:19,600
adaptive

330
00:12:19,600 --> 00:12:24,320
assumption to show the correctness

331
00:12:24,320 --> 00:12:27,760
but however if this group g

332
00:12:27,760 --> 00:12:31,040
here has a known order subgroup

333
00:12:31,040 --> 00:12:34,160
this ck proof is not secure at all

334
00:12:34,160 --> 00:12:38,480
why is that it is because um

335
00:12:38,480 --> 00:12:41,680
we can give some proof which pass this

336
00:12:41,680 --> 00:12:42,399
protocol

337
00:12:42,399 --> 00:12:44,800
but the w is not the same it's not g to

338
00:12:44,800 --> 00:12:45,839
the power x

339
00:12:45,839 --> 00:12:48,160
in fact if w is equal to g to the power

340
00:12:48,160 --> 00:12:50,320
x times f to the power y

341
00:12:50,320 --> 00:12:53,600
where f belongs to some known order

342
00:12:53,600 --> 00:12:54,639
subgroup

343
00:12:54,639 --> 00:12:58,000
then he can compute an alternative proof

344
00:12:58,000 --> 00:13:00,320
q prime here which is equal to g to the

345
00:13:00,320 --> 00:13:02,000
power q prime times

346
00:13:02,000 --> 00:13:05,839
f to the power y over

347
00:13:05,839 --> 00:13:08,240
why we can compute this one because one

348
00:13:08,240 --> 00:13:09,200
over l

349
00:13:09,200 --> 00:13:12,880
um is can be computed um because the

350
00:13:12,880 --> 00:13:13,519
order of

351
00:13:13,519 --> 00:13:16,959
f is known here so this is one over l

352
00:13:16,959 --> 00:13:21,279
mod the order of f

353
00:13:21,279 --> 00:13:23,040
so it can pass the verification because

354
00:13:23,040 --> 00:13:24,959
we can simply plug in everything there

355
00:13:24,959 --> 00:13:26,560
and then we can see that

356
00:13:26,560 --> 00:13:28,880
it passes the original verification

357
00:13:28,880 --> 00:13:30,399
equation as soon

358
00:13:30,399 --> 00:13:33,680
in the last page here and the r

359
00:13:33,680 --> 00:13:36,480
also fits the range so it can pass this

360
00:13:36,480 --> 00:13:37,200
checking

361
00:13:37,200 --> 00:13:40,399
but we w is not the relation we want to

362
00:13:40,399 --> 00:13:41,680
prove w is not

363
00:13:41,680 --> 00:13:45,120
simply g to the x w is g to the x times

364
00:13:45,120 --> 00:13:46,079
f to the power

365
00:13:46,079 --> 00:13:48,639
y so the relay so this is not secure at

366
00:13:48,639 --> 00:13:49,920
all

367
00:13:49,920 --> 00:13:53,199
so next i will show why we can achieve

368
00:13:53,199 --> 00:13:54,320
this one we can

369
00:13:54,320 --> 00:13:57,920
eliminate this attack so our solution

370
00:13:57,920 --> 00:13:59,120
roughly speaking

371
00:13:59,120 --> 00:14:02,240
is to use an extra run of challenge to

372
00:14:02,240 --> 00:14:05,360
eliminate the elements of order q in w

373
00:14:05,360 --> 00:14:08,399
so this attack appears because we have

374
00:14:08,399 --> 00:14:11,839
some elements with no order so we want

375
00:14:11,839 --> 00:14:12,720
to remove

376
00:14:12,720 --> 00:14:15,680
all those elements with this known order

377
00:14:15,680 --> 00:14:17,839
here

378
00:14:18,560 --> 00:14:22,079
so what we do here is simply use an

379
00:14:22,079 --> 00:14:26,160
extra run using the prime the order

380
00:14:26,160 --> 00:14:28,959
q here or instead of using the prime

381
00:14:28,959 --> 00:14:29,519
number l

382
00:14:29,519 --> 00:14:32,240
so here you can see a protocol with six

383
00:14:32,240 --> 00:14:33,440
steps

384
00:14:33,440 --> 00:14:36,560
well while step five and step

385
00:14:36,560 --> 00:14:39,839
six and also part of the step four is

386
00:14:39,839 --> 00:14:41,600
the same as step one two three in

387
00:14:41,600 --> 00:14:44,079
algorithm one so you can see that the

388
00:14:44,079 --> 00:14:44,639
last

389
00:14:44,639 --> 00:14:47,680
three steps are the same so

390
00:14:47,680 --> 00:14:50,320
the main modification is the addition on

391
00:14:50,320 --> 00:14:51,279
the first

392
00:14:51,279 --> 00:14:53,920
three to four steps so what is done here

393
00:14:53,920 --> 00:14:54,800
is that

394
00:14:54,800 --> 00:14:57,360
the prover computes the commitment r is

395
00:14:57,360 --> 00:14:58,560
equal to g to the power k

396
00:14:58,560 --> 00:15:01,600
first then the refi computes a challenge

397
00:15:01,600 --> 00:15:04,240
c and then the prover computes something

398
00:15:04,240 --> 00:15:06,160
just like a snow signature as it is

399
00:15:06,160 --> 00:15:09,519
equal to k plus cx and then the prover

400
00:15:09,519 --> 00:15:11,120
needs to find

401
00:15:11,120 --> 00:15:13,680
the quotient d and the remainder e such

402
00:15:13,680 --> 00:15:14,480
that s

403
00:15:14,480 --> 00:15:17,519
is equal to d q plus a

404
00:15:17,519 --> 00:15:20,800
so here this format is similar to this

405
00:15:20,800 --> 00:15:21,120
one

406
00:15:21,120 --> 00:15:24,240
q prime l plus r but we replace the

407
00:15:24,240 --> 00:15:25,120
prime l

408
00:15:25,120 --> 00:15:28,320
with a fixed prime q where q

409
00:15:28,320 --> 00:15:31,920
is the order of the subgroup so we send

410
00:15:31,920 --> 00:15:34,639
the the capital d and small e there and

411
00:15:34,639 --> 00:15:36,320
the checking is similar as below

412
00:15:36,320 --> 00:15:39,759
so this is a six round protocol so why

413
00:15:39,759 --> 00:15:40,160
we

414
00:15:40,160 --> 00:15:43,680
it is safe against the previous attack

415
00:15:43,680 --> 00:15:45,680
so if the prover knows x y in this

416
00:15:45,680 --> 00:15:46,720
format

417
00:15:46,720 --> 00:15:49,759
he can pop if and if he can pass the

418
00:15:49,759 --> 00:15:51,040
verification

419
00:15:51,040 --> 00:15:54,000
it means that so here you can see that

420
00:15:54,000 --> 00:15:56,480
on the left hand side of the equation

421
00:15:56,480 --> 00:15:59,600
there are no elements with in the sub

422
00:15:59,600 --> 00:16:00,720
group because

423
00:16:00,720 --> 00:16:03,839
here um capital d to the power q

424
00:16:03,839 --> 00:16:06,959
um this q is the order of f

425
00:16:06,959 --> 00:16:10,720
so all subgroup elements is eliminated

426
00:16:10,720 --> 00:16:13,440
by the q there and g is not the sub

427
00:16:13,440 --> 00:16:15,279
element at all so we have no sub group

428
00:16:15,279 --> 00:16:16,720
elements

429
00:16:16,720 --> 00:16:18,560
on the left hand side so it means that

430
00:16:18,560 --> 00:16:19,759
the right hand side should not have any

431
00:16:19,759 --> 00:16:20,160
sub

432
00:16:20,160 --> 00:16:22,240
element as well if we can pass the

433
00:16:22,240 --> 00:16:23,600
verification

434
00:16:23,600 --> 00:16:25,120
so we can see that what are the subgroup

435
00:16:25,120 --> 00:16:27,120
element on the right hand side so it is

436
00:16:27,120 --> 00:16:30,160
f to the power c y but if we do not have

437
00:16:30,160 --> 00:16:30,880
any sub

438
00:16:30,880 --> 00:16:33,040
element there it means that f to the

439
00:16:33,040 --> 00:16:34,160
power c y

440
00:16:34,160 --> 00:16:37,759
is cancelled out by r but

441
00:16:37,759 --> 00:16:39,839
um by the setting of of the

442
00:16:39,839 --> 00:16:41,120
pseudo-knowledge proof r

443
00:16:41,120 --> 00:16:44,480
appears before we know c so r is the

444
00:16:44,480 --> 00:16:46,320
commitment system challenge

445
00:16:46,320 --> 00:16:49,440
so the probability of this r cancel out

446
00:16:49,440 --> 00:16:52,480
f to the power cy is negligible

447
00:16:52,480 --> 00:16:55,920
that's why our protocol is safe against

448
00:16:55,920 --> 00:16:58,639
this attack

449
00:17:00,399 --> 00:17:02,800
so we can achieve a run run protocol for

450
00:17:02,800 --> 00:17:04,160
proving this dl

451
00:17:04,160 --> 00:17:07,199
relation in the unknown order group so

452
00:17:07,199 --> 00:17:08,799
let's compare our scheme

453
00:17:08,799 --> 00:17:12,400
with the two previous scheme on the same

454
00:17:12,400 --> 00:17:15,280
soundness error and statistical distance

455
00:17:15,280 --> 00:17:15,520
of

456
00:17:15,520 --> 00:17:19,039
activate so compared uh you can simply

457
00:17:19,039 --> 00:17:20,319
see that our scheme is much more

458
00:17:20,319 --> 00:17:20,959
efficient

459
00:17:20,959 --> 00:17:24,959
97 shorter than the ccr plus 19 and 74

460
00:17:24,959 --> 00:17:26,959
percent shorter than the ccl plus 20

461
00:17:26,959 --> 00:17:28,799
paper

462
00:17:28,799 --> 00:17:31,200
so this um this shows our scheme is

463
00:17:31,200 --> 00:17:31,840
highly

464
00:17:31,840 --> 00:17:35,840
efficient in terms of bandwidth

465
00:17:36,000 --> 00:17:39,440
how about other comparisons so um

466
00:17:39,440 --> 00:17:41,679
when we look into the assumptions um the

467
00:17:41,679 --> 00:17:42,559
secret proof

468
00:17:42,559 --> 00:17:46,080
in in the ccl plus 20 they use a strong

469
00:17:46,080 --> 00:17:47,760
root assumption which is similar to the

470
00:17:47,760 --> 00:17:49,039
stronger essay assumption

471
00:17:49,039 --> 00:17:51,600
as i mentioned and we use an adaptive

472
00:17:51,600 --> 00:17:52,720
root assumption

473
00:17:52,720 --> 00:17:54,960
which is more similar to the rsa

474
00:17:54,960 --> 00:17:55,919
assumption

475
00:17:55,919 --> 00:17:58,000
so this is comparison on the assumption

476
00:17:58,000 --> 00:17:59,039
side

477
00:17:59,039 --> 00:18:02,960
and in the ccl plus 20 they use a ck

478
00:18:02,960 --> 00:18:04,480
proof but they only

479
00:18:04,480 --> 00:18:06,799
prove to know uh the relation of a

480
00:18:06,799 --> 00:18:07,520
modified

481
00:18:07,520 --> 00:18:10,000
version which is x to the power y is

482
00:18:10,000 --> 00:18:12,000
equal to g to the power x

483
00:18:12,000 --> 00:18:14,960
for some proper value y they're not

484
00:18:14,960 --> 00:18:15,600
proving h

485
00:18:15,600 --> 00:18:17,840
is equal to g x they're proving actually

486
00:18:17,840 --> 00:18:18,880
y is equal to g

487
00:18:18,880 --> 00:18:20,799
x so the relation is a little bit

488
00:18:20,799 --> 00:18:22,880
modified

489
00:18:22,880 --> 00:18:26,160
and on the other hand our security proof

490
00:18:26,160 --> 00:18:28,559
we need to use generic group model but

491
00:18:28,559 --> 00:18:29,600
the security proof

492
00:18:29,600 --> 00:18:32,559
into does not need that so these are the

493
00:18:32,559 --> 00:18:34,559
difference between our proposal

494
00:18:34,559 --> 00:18:37,600
and the previous work

495
00:18:38,160 --> 00:18:40,400
this is the first contribution and the

496
00:18:40,400 --> 00:18:43,039
second contribution of our paper is

497
00:18:43,039 --> 00:18:46,160
the um ck proof of a real fondness of a

498
00:18:46,160 --> 00:18:47,360
cl cipher test

499
00:18:47,360 --> 00:18:49,760
we recall that a cl cipher test is

500
00:18:49,760 --> 00:18:51,200
something in this format

501
00:18:51,200 --> 00:18:53,200
the c1 is the encryption of some message

502
00:18:53,200 --> 00:18:55,520
and together using some

503
00:18:55,520 --> 00:18:57,840
encryption randomness row here and c2 is

504
00:18:57,840 --> 00:18:58,880
also using the

505
00:18:58,880 --> 00:19:02,480
accuracy randomness row so again the

506
00:19:02,480 --> 00:19:03,039
proof

507
00:19:03,039 --> 00:19:05,360
here for building the co cipher test is

508
00:19:05,360 --> 00:19:07,039
quite similar to the dl blue

509
00:19:07,039 --> 00:19:09,520
but we only need to take care of this

510
00:19:09,520 --> 00:19:10,799
term m there because

511
00:19:10,799 --> 00:19:13,039
m is something related to the unknown

512
00:19:13,039 --> 00:19:14,000
group

513
00:19:14,000 --> 00:19:17,200
so um we can build a similar six step

514
00:19:17,200 --> 00:19:18,080
protocol

515
00:19:18,080 --> 00:19:20,000
for the zero knowledge proof for the cl

516
00:19:20,000 --> 00:19:21,200
cipher test

517
00:19:21,200 --> 00:19:24,320
so this is a diagram for that and for

518
00:19:24,320 --> 00:19:26,480
details you can refer to the paper

519
00:19:26,480 --> 00:19:29,520
but the idea is quite similar to the

520
00:19:29,520 --> 00:19:32,320
dl parts

521
00:19:32,960 --> 00:19:35,679
so let's look at the comparison there

522
00:19:35,679 --> 00:19:38,080
again there are two existing work um

523
00:19:38,080 --> 00:19:42,320
the crypto 19 and the pkc20 paper

524
00:19:42,320 --> 00:19:45,120
we can see that um the crypto 19 paper

525
00:19:45,120 --> 00:19:45,760
is not

526
00:19:45,760 --> 00:19:49,039
efficient at all they use more than 100

527
00:19:49,039 --> 00:19:52,960
000 bytes for for the communication

528
00:19:52,960 --> 00:19:54,960
but they don't need any extra security

529
00:19:54,960 --> 00:19:56,080
requirement

530
00:19:56,080 --> 00:19:59,120
our scheme is somehow in the middle and

531
00:19:59,120 --> 00:20:01,440
we need two assumptions one is the

532
00:20:01,440 --> 00:20:02,480
general generic

533
00:20:02,480 --> 00:20:05,840
model and we also need to

534
00:20:05,840 --> 00:20:09,039
ensure that the proper key is generated

535
00:20:09,039 --> 00:20:10,159
correctly in

536
00:20:10,159 --> 00:20:12,480
the correct group element so this is

537
00:20:12,480 --> 00:20:14,240
what we need

538
00:20:14,240 --> 00:20:17,360
and on the other hand the ccl plus 20

539
00:20:17,360 --> 00:20:19,600
they need a random group generator as i

540
00:20:19,600 --> 00:20:20,799
mentioned before

541
00:20:20,799 --> 00:20:24,559
and they may need an interactive

542
00:20:24,559 --> 00:20:27,039
algorithm for all parties to jointly

543
00:20:27,039 --> 00:20:28,640
generate a random group element and

544
00:20:28,640 --> 00:20:29,360
therefore

545
00:20:29,360 --> 00:20:33,200
although their cl their

546
00:20:33,200 --> 00:20:36,080
ck proof for cr cipher test is less but

547
00:20:36,080 --> 00:20:36,720
they need

548
00:20:36,720 --> 00:20:39,039
some other runs of communication for

549
00:20:39,039 --> 00:20:41,039
generating a random group element so

550
00:20:41,039 --> 00:20:44,879
they have some hidden cost there

551
00:20:45,440 --> 00:20:47,280
so when we when they are all added

552
00:20:47,280 --> 00:20:50,400
together to build threshold ecdsa

553
00:20:50,400 --> 00:20:54,000
then the efficiency is in fact um

554
00:20:54,000 --> 00:20:56,720
less efficient than the method we use

555
00:20:56,720 --> 00:20:57,200
here

556
00:20:57,200 --> 00:21:02,480
using our method here and

557
00:21:02,480 --> 00:21:05,039
let's have a look when we go to the

558
00:21:05,039 --> 00:21:06,080
details about the

559
00:21:06,080 --> 00:21:10,000
two-party and fashionable ecdsa

560
00:21:11,919 --> 00:21:15,039
so for two-party ecb essay we mainly

561
00:21:15,039 --> 00:21:16,000
follows the original

562
00:21:16,000 --> 00:21:19,600
two-party cdsa protocol in crypto19

563
00:21:19,600 --> 00:21:22,960
and um for the ck-proof part we actually

564
00:21:22,960 --> 00:21:25,039
need to prove something extra following

565
00:21:25,039 --> 00:21:26,320
the original protocol

566
00:21:26,320 --> 00:21:28,880
in reference one so we need to prove two

567
00:21:28,880 --> 00:21:31,280
more relations here as shown here

568
00:21:31,280 --> 00:21:33,360
but this adding this relation is simple

569
00:21:33,360 --> 00:21:35,360
because they are all discrete relation

570
00:21:35,360 --> 00:21:37,760
then we can just simply plug in our

571
00:21:37,760 --> 00:21:39,120
existing tools

572
00:21:39,120 --> 00:21:41,600
together and then we can effectively

573
00:21:41,600 --> 00:21:42,880
prove the serial knowledge

574
00:21:42,880 --> 00:21:46,480
for this particular relation and after

575
00:21:46,480 --> 00:21:47,760
plugging that in

576
00:21:47,760 --> 00:21:50,320
this is the result of our overall

577
00:21:50,320 --> 00:21:52,480
two-party ecdsa protocol

578
00:21:52,480 --> 00:21:54,559
we can see that the signature size is

579
00:21:54,559 --> 00:21:55,600
the same

580
00:21:55,600 --> 00:21:59,120
for all these three schemes but

581
00:21:59,120 --> 00:22:01,679
we our scheme has a much better

582
00:22:01,679 --> 00:22:02,400
bandwidth

583
00:22:02,400 --> 00:22:05,919
than the existing two schemes

584
00:22:05,919 --> 00:22:09,039
including the original ccl 19 paper

585
00:22:09,039 --> 00:22:12,000
and their improvement but of course we

586
00:22:12,000 --> 00:22:13,280
need to um use

587
00:22:13,280 --> 00:22:16,480
the extra security assumption that

588
00:22:16,480 --> 00:22:19,520
the adaptive roof support assumption but

589
00:22:19,520 --> 00:22:20,799
we can achieve a much

590
00:22:20,799 --> 00:22:22,559
very significant saving in terms of

591
00:22:22,559 --> 00:22:23,919
bandwidth as

592
00:22:23,919 --> 00:22:26,240
well as running time as well so this is

593
00:22:26,240 --> 00:22:27,679
the comparison

594
00:22:27,679 --> 00:22:30,400
in terms of running time we can see that

595
00:22:30,400 --> 00:22:32,320
the original paper

596
00:22:32,320 --> 00:22:35,600
ccl plus 19 they are

597
00:22:35,600 --> 00:22:39,120
very slow in key generation um the

598
00:22:39,120 --> 00:22:41,679
improvement the the later improvement

599
00:22:41,679 --> 00:22:42,159
they

600
00:22:42,159 --> 00:22:44,080
significantly reduce the key generating

601
00:22:44,080 --> 00:22:46,080
time at the cost of doubling the running

602
00:22:46,080 --> 00:22:47,840
time of the signing part which is not

603
00:22:47,840 --> 00:22:49,039
desirable

604
00:22:49,039 --> 00:22:52,320
and our scheme we can uh we can show a

605
00:22:52,320 --> 00:22:54,320
significant improvement in both the key

606
00:22:54,320 --> 00:22:55,280
gen path

607
00:22:55,280 --> 00:22:57,760
and while keeping the signing time to be

608
00:22:57,760 --> 00:22:58,880
the same

609
00:22:58,880 --> 00:23:04,720
so this is the improvement for our paper

610
00:23:04,799 --> 00:23:08,400
how about fascial ecdsa

611
00:23:08,400 --> 00:23:11,840
actually the factual ec dsa we have two

612
00:23:11,840 --> 00:23:12,640
solutions

613
00:23:12,640 --> 00:23:13,840
they are suitable for different

614
00:23:13,840 --> 00:23:16,559
scenarios for skin one

615
00:23:16,559 --> 00:23:19,919
so we modified the facial ecdsa

616
00:23:19,919 --> 00:23:23,200
in pkc 2020 um so we modify this for

617
00:23:23,200 --> 00:23:25,600
two parts in the key gen part we update

618
00:23:25,600 --> 00:23:26,320
their

619
00:23:26,320 --> 00:23:29,039
ck proof of discrete log relation and in

620
00:23:29,039 --> 00:23:31,679
the eye sign part we update their

621
00:23:31,679 --> 00:23:34,400
proof of cipher test so these are the

622
00:23:34,400 --> 00:23:35,440
two

623
00:23:35,440 --> 00:23:38,559
pluck our scheming

624
00:23:40,960 --> 00:23:44,720
and we have a second solution

625
00:23:44,720 --> 00:23:48,400
by keeping this einstein and the kejan

626
00:23:48,400 --> 00:23:51,279
original protocol as the same but we

627
00:23:51,279 --> 00:23:53,600
modify the interactive eye

628
00:23:53,600 --> 00:23:56,960
set apart the eye setup part is used in

629
00:23:56,960 --> 00:23:57,760
the um

630
00:23:57,760 --> 00:24:00,880
in in as part of the ikea gen the eye

631
00:24:00,880 --> 00:24:01,840
setup part

632
00:24:01,840 --> 00:24:07,199
we modify them using our dl relation

633
00:24:07,679 --> 00:24:12,000
so this is the second the second scheme

634
00:24:12,000 --> 00:24:13,760
we modified in a different place of

635
00:24:13,760 --> 00:24:15,520
differential ecdsa scheme

636
00:24:15,520 --> 00:24:18,559
and we have different improvement

637
00:24:18,559 --> 00:24:21,600
so this table summarize

638
00:24:21,600 --> 00:24:23,440
what are the benefits of these two

639
00:24:23,440 --> 00:24:24,880
schemes

640
00:24:24,880 --> 00:24:27,840
so here this is a complete comparison

641
00:24:27,840 --> 00:24:29,440
and the red rectangle

642
00:24:29,440 --> 00:24:31,279
shows the part that is more efficient

643
00:24:31,279 --> 00:24:33,360
than others in the same category

644
00:24:33,360 --> 00:24:37,760
so we can see that our scheme 2

645
00:24:37,760 --> 00:24:40,320
and the original ccl plus 20 paper they

646
00:24:40,320 --> 00:24:40,960
have

647
00:24:40,960 --> 00:24:44,799
shorter side signatures

648
00:24:44,799 --> 00:24:47,440
so uh but our scheme um comparatively

649
00:24:47,440 --> 00:24:48,400
our scheme two has

650
00:24:48,400 --> 00:24:51,120
a much shorter bandwidth in terms of i

651
00:24:51,120 --> 00:24:51,679
keygen

652
00:24:51,679 --> 00:24:54,159
you can see from here from this table to

653
00:24:54,159 --> 00:24:55,120
this table

654
00:24:55,120 --> 00:24:57,039
but we use one extra assumption of

655
00:24:57,039 --> 00:24:58,240
course

656
00:24:58,240 --> 00:25:00,720
so this is our scheme tool well on skin

657
00:25:00,720 --> 00:25:01,279
one

658
00:25:01,279 --> 00:25:04,400
we can produce a

659
00:25:04,400 --> 00:25:06,159
best solution with the shortest

660
00:25:06,159 --> 00:25:08,000
bandwidth in ikegen

661
00:25:08,000 --> 00:25:10,480
while keeping the assumptions to be a

662
00:25:10,480 --> 00:25:11,440
minimum

663
00:25:11,440 --> 00:25:15,200
but at the cost of a slightly larger

664
00:25:15,200 --> 00:25:18,400
signature size so um maybe

665
00:25:18,400 --> 00:25:20,159
for those who want to implement this

666
00:25:20,159 --> 00:25:21,679
facial ecdsa

667
00:25:21,679 --> 00:25:23,600
then you should choose one which is more

668
00:25:23,600 --> 00:25:26,320
suitable for application

669
00:25:26,320 --> 00:25:30,480
and we can also show some uh

670
00:25:30,480 --> 00:25:32,559
actual parameters for different

671
00:25:32,559 --> 00:25:33,919
threshold using

672
00:25:33,919 --> 00:25:36,240
different key and different end as shown

673
00:25:36,240 --> 00:25:37,600
in this diagram

674
00:25:37,600 --> 00:25:41,840
so this is uh comparing the ccl 20

675
00:25:41,840 --> 00:25:44,400
our scheme 2 in the i keyjoin

676
00:25:44,400 --> 00:25:45,760
communication

677
00:25:45,760 --> 00:25:48,720
and the ikea gen running time so we have

678
00:25:48,720 --> 00:25:51,279
a significant improvement in both the iq

679
00:25:51,279 --> 00:25:52,559
communication size

680
00:25:52,559 --> 00:25:58,000
and running time for different threshold

681
00:25:58,320 --> 00:26:02,320
and how about comparing um skin 1 scheme

682
00:26:02,320 --> 00:26:02,880
2 and

683
00:26:02,880 --> 00:26:05,760
the ccr plus 20 so this is the running

684
00:26:05,760 --> 00:26:06,559
time

685
00:26:06,559 --> 00:26:10,240
for both itgen and i sine so we can see

686
00:26:10,240 --> 00:26:10,960
that um

687
00:26:10,960 --> 00:26:13,120
our skin one is very efficient in terms

688
00:26:13,120 --> 00:26:14,000
of key gen

689
00:26:14,000 --> 00:26:15,840
but we have a high a little bit higher

690
00:26:15,840 --> 00:26:18,000
cost for the signing part

691
00:26:18,000 --> 00:26:20,320
so if you want to keep the sign in part

692
00:26:20,320 --> 00:26:21,120
minimal

693
00:26:21,120 --> 00:26:23,039
then maybe um you can choose skim two

694
00:26:23,039 --> 00:26:24,880
instead

695
00:26:24,880 --> 00:26:27,360
so this is a very rough compression and

696
00:26:27,360 --> 00:26:29,039
there are some further compression in

697
00:26:29,039 --> 00:26:31,600
our paper so you can refer to them

698
00:26:31,600 --> 00:26:34,720
and to conclude we propose a compass ck

699
00:26:34,720 --> 00:26:36,799
proof for the dr relation in hsn

700
00:26:36,799 --> 00:26:39,440
group and also for the cl cipher test

701
00:26:39,440 --> 00:26:40,640
and when applied to

702
00:26:40,640 --> 00:26:42,799
two party and fashion ecdsa it can

703
00:26:42,799 --> 00:26:44,880
significantly improve the performance

704
00:26:44,880 --> 00:26:46,880
in terms of bandwidth used and the

705
00:26:46,880 --> 00:26:48,400
running time

706
00:26:48,400 --> 00:26:53,039
and that's all for my paper thank you

