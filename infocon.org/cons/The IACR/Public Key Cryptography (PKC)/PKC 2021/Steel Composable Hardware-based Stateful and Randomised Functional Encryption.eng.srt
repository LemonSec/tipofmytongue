1
00:00:00,080 --> 00:00:02,080
my name is lorenzo martinico and i'm

2
00:00:02,080 --> 00:00:03,120
here to present

3
00:00:03,120 --> 00:00:05,279
steel a composable hardwood-based

4
00:00:05,279 --> 00:00:06,640
stateful and randomized functional

5
00:00:06,640 --> 00:00:07,680
encryption

6
00:00:07,680 --> 00:00:11,360
for pkc 2021 this is a joint work with

7
00:00:11,360 --> 00:00:13,440
my collaborators prima patotia

8
00:00:13,440 --> 00:00:17,199
markov call vice and janice silicon is

9
00:00:17,199 --> 00:00:18,720
over the past 20 years the cloud

10
00:00:18,720 --> 00:00:20,560
computing paradigm has taken across the

11
00:00:20,560 --> 00:00:21,840
industry

12
00:00:21,840 --> 00:00:23,920
there are many advantages in the cloud

13
00:00:23,920 --> 00:00:25,840
such as increasing efficiency

14
00:00:25,840 --> 00:00:28,000
and usability especially when it comes

15
00:00:28,000 --> 00:00:29,599
to deploying large-scale machine

16
00:00:29,599 --> 00:00:31,439
learning models

17
00:00:31,439 --> 00:00:33,520
however as a consequence of using the

18
00:00:33,520 --> 00:00:35,680
cloud when a client

19
00:00:35,680 --> 00:00:38,239
uploads their data they lose control

20
00:00:38,239 --> 00:00:40,480
over it

21
00:00:40,480 --> 00:00:43,360
as a motivating example take the problem

22
00:00:43,360 --> 00:00:44,160
of detecting

23
00:00:44,160 --> 00:00:47,600
fake news in encrypted messages

24
00:00:47,600 --> 00:00:49,520
when a user receives a suspicious

25
00:00:49,520 --> 00:00:50,640
message

26
00:00:50,640 --> 00:00:52,480
they either have to evaluate by

27
00:00:52,480 --> 00:00:54,399
downloading a heavy machine learning

28
00:00:54,399 --> 00:00:54,960
model

29
00:00:54,960 --> 00:00:57,520
under client which is inefficient and

30
00:00:57,520 --> 00:00:58,079
does not

31
00:00:58,079 --> 00:01:01,280
allow a way for the user to provide some

32
00:01:01,280 --> 00:01:02,239
feedback

33
00:01:02,239 --> 00:01:05,680
to the wider community or

34
00:01:05,680 --> 00:01:07,360
they can decrypt their message and

35
00:01:07,360 --> 00:01:10,159
upload it to the cloud for analysis

36
00:01:10,159 --> 00:01:11,840
this is the consequence of revealing the

37
00:01:11,840 --> 00:01:13,520
user's entire correspondence to the

38
00:01:13,520 --> 00:01:14,000
cloud

39
00:01:14,000 --> 00:01:15,920
a potential solution is that deploying

40
00:01:15,920 --> 00:01:18,880
public key function encryption

41
00:01:18,880 --> 00:01:20,799
this primitive provides a general notion

42
00:01:20,799 --> 00:01:22,479
of private data analysis

43
00:01:22,479 --> 00:01:25,200
where while the user's input remains

44
00:01:25,200 --> 00:01:26,560
secret

45
00:01:26,560 --> 00:01:29,680
the output of a function is revealed

46
00:01:29,680 --> 00:01:30,880
publicly

47
00:01:30,880 --> 00:01:33,759
thus a decrypter can be authorized to

48
00:01:33,759 --> 00:01:34,720
compute

49
00:01:34,720 --> 00:01:37,600
some function in a way that the user's

50
00:01:37,600 --> 00:01:38,479
inputs

51
00:01:38,479 --> 00:01:41,920
remain private let's look at

52
00:01:41,920 --> 00:01:43,759
how the primitive works into a bit more

53
00:01:43,759 --> 00:01:45,680
detail we have three

54
00:01:45,680 --> 00:01:48,240
parties alice who wants to encrypt some

55
00:01:48,240 --> 00:01:49,119
data

56
00:01:49,119 --> 00:01:51,600
bob who is a potentially malicious

57
00:01:51,600 --> 00:01:52,880
decryptor

58
00:01:52,880 --> 00:01:56,479
and charlie a trusted authority charlie

59
00:01:56,479 --> 00:01:58,479
initializes the primitive by generating

60
00:01:58,479 --> 00:01:59,920
some

61
00:01:59,920 --> 00:02:01,600
public parameters and sends them to

62
00:02:01,600 --> 00:02:03,680
alice

63
00:02:03,680 --> 00:02:06,399
bob can request theaterization for

64
00:02:06,399 --> 00:02:08,080
decrypting a function f

65
00:02:08,080 --> 00:02:10,959
from charlie who provides a functional

66
00:02:10,959 --> 00:02:13,040
key

67
00:02:13,040 --> 00:02:16,480
now alice can encrypt a message x

68
00:02:16,480 --> 00:02:18,800
using the public key and send the

69
00:02:18,800 --> 00:02:20,800
ciphertext to bob

70
00:02:20,800 --> 00:02:23,840
who runs the decryption algorithm to

71
00:02:23,840 --> 00:02:24,560
produce

72
00:02:24,560 --> 00:02:26,640
f of x for the function they've been

73
00:02:26,640 --> 00:02:28,560
authorized to decrypt

74
00:02:28,560 --> 00:02:32,480
without ever learning the value of x

75
00:02:32,879 --> 00:02:34,800
while the primitive fits well within our

76
00:02:34,800 --> 00:02:36,239
problem setting there are some

77
00:02:36,239 --> 00:02:37,920
limitations currently

78
00:02:37,920 --> 00:02:40,640
especially when it comes to practical

79
00:02:40,640 --> 00:02:42,400
implementation

80
00:02:42,400 --> 00:02:44,400
there aren't many functions that we are

81
00:02:44,400 --> 00:02:45,920
able to

82
00:02:45,920 --> 00:02:47,920
efficiently compute today these are

83
00:02:47,920 --> 00:02:49,360
limited to

84
00:02:49,360 --> 00:02:52,640
inner products mostly and if you'd like

85
00:02:52,640 --> 00:02:53,360
to

86
00:02:53,360 --> 00:02:56,080
embed this primitive within a larger

87
00:02:56,080 --> 00:02:57,760
protocol

88
00:02:57,760 --> 00:02:59,840
we can't rely on composibility in the

89
00:02:59,840 --> 00:03:02,080
standard model but have to use

90
00:03:02,080 --> 00:03:04,000
other assumptions such as the random

91
00:03:04,000 --> 00:03:06,640
oracle model

92
00:03:06,879 --> 00:03:08,720
a potential solutions to these issues is

93
00:03:08,720 --> 00:03:10,400
that of using trusted execution

94
00:03:10,400 --> 00:03:12,080
environments

95
00:03:12,080 --> 00:03:15,120
these are modern extensions to cpu

96
00:03:15,120 --> 00:03:16,319
architectures

97
00:03:16,319 --> 00:03:19,120
that increase the security properties on

98
00:03:19,120 --> 00:03:20,560
the host

99
00:03:20,560 --> 00:03:23,920
in particular this is a good fit as

100
00:03:23,920 --> 00:03:27,599
in 2016 fishital realized

101
00:03:27,599 --> 00:03:30,159
a functional encryption protocol using

102
00:03:30,159 --> 00:03:33,200
trusted hardware

103
00:03:33,200 --> 00:03:35,360
our contributions in this paper are that

104
00:03:35,360 --> 00:03:36,720
of generalizing

105
00:03:36,720 --> 00:03:39,040
functional encryption to provide

106
00:03:39,040 --> 00:03:40,000
additional

107
00:03:40,000 --> 00:03:42,239
functionalities which include stateful

108
00:03:42,239 --> 00:03:45,040
and randomized functions

109
00:03:45,040 --> 00:03:48,080
we also extend the rm protocol

110
00:03:48,080 --> 00:03:50,560
to compute fessor functions and

111
00:03:50,560 --> 00:03:52,319
formalize its security

112
00:03:52,319 --> 00:03:56,560
under the uc model of pasadel 2017

113
00:03:56,560 --> 00:04:00,319
which we call psd we then relax the psd

114
00:04:00,319 --> 00:04:01,040
model

115
00:04:01,040 --> 00:04:04,319
to capture additional adversaries thus

116
00:04:04,319 --> 00:04:06,239
we have our protocol steel which is

117
00:04:06,239 --> 00:04:08,879
composable as it uses the uc model

118
00:04:08,879 --> 00:04:11,599
of psd hardware based as its security

119
00:04:11,599 --> 00:04:14,480
relies on trusted execution environments

120
00:04:14,480 --> 00:04:16,959
and competes stateful and randomized

121
00:04:16,959 --> 00:04:19,839
functional encryption

122
00:04:20,160 --> 00:04:22,320
let's examine the faster functionality

123
00:04:22,320 --> 00:04:23,440
in a bit more detail

124
00:04:23,440 --> 00:04:25,440
we still have alice bob and charlie in

125
00:04:25,440 --> 00:04:27,280
the same roles as before

126
00:04:27,280 --> 00:04:29,759
and an ideal functionality fester which

127
00:04:29,759 --> 00:04:31,520
holds some state

128
00:04:31,520 --> 00:04:33,440
here at first the state is initialized

129
00:04:33,440 --> 00:04:35,840
to null

130
00:04:35,840 --> 00:04:38,720
charlie can authorize a function f for

131
00:04:38,720 --> 00:04:40,080
decryption

132
00:04:40,080 --> 00:04:43,360
and alex sends her first message

133
00:04:43,360 --> 00:04:46,400
x0 the functionality then samples

134
00:04:46,400 --> 00:04:47,280
randomness

135
00:04:47,280 --> 00:04:50,400
computes f over alice's input

136
00:04:50,400 --> 00:04:53,440
and the state and produces both an

137
00:04:53,440 --> 00:04:54,639
output y 0

138
00:04:54,639 --> 00:04:58,479
and the new state s1 bob is only sent

139
00:04:58,479 --> 00:05:01,680
the output y0

140
00:05:01,680 --> 00:05:05,520
next alice uploads a new ciphertext

141
00:05:05,520 --> 00:05:08,960
a new message x1 and again we compute

142
00:05:08,960 --> 00:05:10,160
the function f

143
00:05:10,160 --> 00:05:13,680
over x1 and s1 which produces a new

144
00:05:13,680 --> 00:05:16,800
public output y1 and updates the state

145
00:05:16,800 --> 00:05:19,440
to s2

146
00:05:20,320 --> 00:05:22,639
the properties for this primitive are

147
00:05:22,639 --> 00:05:25,440
confidentiality and correctness

148
00:05:25,440 --> 00:05:28,000
the former entails that bob our

149
00:05:28,000 --> 00:05:29,280
malicious

150
00:05:29,280 --> 00:05:32,080
party can only learn the output of

151
00:05:32,080 --> 00:05:34,000
authorized functions

152
00:05:34,000 --> 00:05:36,000
in particular it won't be learning the

153
00:05:36,000 --> 00:05:37,759
state either before or after the

154
00:05:37,759 --> 00:05:39,440
function application

155
00:05:39,440 --> 00:05:42,720
nor the input or the randomness

156
00:05:42,720 --> 00:05:45,360
for correctness we mean that the state

157
00:05:45,360 --> 00:05:47,199
at any point during the computation is

158
00:05:47,199 --> 00:05:49,199
determined by the sequence of previous

159
00:05:49,199 --> 00:05:50,160
decryptions

160
00:05:50,160 --> 00:05:52,720
for that particular function for that

161
00:05:52,720 --> 00:05:55,120
particular instance of bob

162
00:05:55,120 --> 00:05:58,639
so the only way for sum bob to influence

163
00:05:58,639 --> 00:06:00,560
the value of the state is that of

164
00:06:00,560 --> 00:06:02,720
providing different

165
00:06:02,720 --> 00:06:06,319
input sects to its decryption functions

166
00:06:06,319 --> 00:06:07,680
let's look at the architecture of

167
00:06:07,680 --> 00:06:09,680
trusted execution environments in a bit

168
00:06:09,680 --> 00:06:11,919
more detail

169
00:06:11,919 --> 00:06:15,680
a te allows a host machine to install to

170
00:06:15,680 --> 00:06:16,800
instantiate

171
00:06:16,800 --> 00:06:19,919
one or more enclaves each of which is

172
00:06:19,919 --> 00:06:20,880
running a program

173
00:06:20,880 --> 00:06:24,240
p where the

174
00:06:24,240 --> 00:06:26,319
contents of the enclaves are kept secure

175
00:06:26,319 --> 00:06:28,080
from other processes running on a

176
00:06:28,080 --> 00:06:28,560
machine

177
00:06:28,560 --> 00:06:30,800
including an adversarial operating

178
00:06:30,800 --> 00:06:32,080
system

179
00:06:32,080 --> 00:06:34,240
in particular an enclave provides

180
00:06:34,240 --> 00:06:35,680
confidentiality

181
00:06:35,680 --> 00:06:39,440
as the host is not able to observe

182
00:06:39,440 --> 00:06:41,199
the behavior of the enclave in terms of

183
00:06:41,199 --> 00:06:43,120
its code nor the data

184
00:06:43,120 --> 00:06:47,120
it's accessing the enclave also provides

185
00:06:47,120 --> 00:06:50,960
integrity by generating an attestation

186
00:06:50,960 --> 00:06:52,400
which corresponds to some kind of

187
00:06:52,400 --> 00:06:54,000
cryptographic signature

188
00:06:54,000 --> 00:06:56,400
over the program being executed within

189
00:06:56,400 --> 00:06:57,199
the enclave

190
00:06:57,199 --> 00:07:00,240
and the output it produces

191
00:07:00,240 --> 00:07:01,759
the details of the many different

192
00:07:01,759 --> 00:07:03,440
architectures for trusted execution

193
00:07:03,440 --> 00:07:04,479
environments

194
00:07:04,479 --> 00:07:07,840
can be nicely abstracted

195
00:07:07,840 --> 00:07:11,120
through the uc global functionality gat

196
00:07:11,120 --> 00:07:14,960
implemented in the pst model

197
00:07:14,960 --> 00:07:18,240
it has a simple interface where at first

198
00:07:18,240 --> 00:07:20,720
the manufacturer can initialize

199
00:07:20,720 --> 00:07:24,240
the functionality by producing some

200
00:07:24,240 --> 00:07:27,840
public parameters and each party

201
00:07:27,840 --> 00:07:29,840
within the protocol regardless of their

202
00:07:29,840 --> 00:07:31,680
access to trusted education environment

203
00:07:31,680 --> 00:07:35,919
machines can get the master public key

204
00:07:35,919 --> 00:07:38,160
then for a machine that does have access

205
00:07:38,160 --> 00:07:40,000
to a te

206
00:07:40,000 --> 00:07:42,639
they're able to install a program on the

207
00:07:42,639 --> 00:07:43,360
machine

208
00:07:43,360 --> 00:07:46,400
which generates a unique enclavidy

209
00:07:46,400 --> 00:07:49,520
or they can resume an enclave

210
00:07:49,520 --> 00:07:51,919
addressed by tank liberty by giving it

211
00:07:51,919 --> 00:07:53,280
some input

212
00:07:53,280 --> 00:07:56,319
this executes the program for the

213
00:07:56,319 --> 00:07:57,599
specific input

214
00:07:57,599 --> 00:08:01,039
and returns both an output value

215
00:08:01,039 --> 00:08:03,840
and a signature sigma which corresponds

216
00:08:03,840 --> 00:08:06,719
to attestation

217
00:08:07,039 --> 00:08:09,120
let's examine the iron and steel

218
00:08:09,120 --> 00:08:10,240
protocols

219
00:08:10,240 --> 00:08:12,639
the two particles are very similar

220
00:08:12,639 --> 00:08:13,919
although they compute

221
00:08:13,919 --> 00:08:17,280
different kinds of functionality in both

222
00:08:17,280 --> 00:08:18,319
we both have

223
00:08:18,319 --> 00:08:21,759
bob and charlie as machines a great sgx

224
00:08:21,759 --> 00:08:24,160
or a trusted execution environment

225
00:08:24,160 --> 00:08:27,919
the encryption phase simply corresponds

226
00:08:27,919 --> 00:08:28,560
to

227
00:08:28,560 --> 00:08:31,120
public key encryption for which the key

228
00:08:31,120 --> 00:08:32,159
material

229
00:08:32,159 --> 00:08:35,599
is kept stored securely within

230
00:08:35,599 --> 00:08:38,080
different enclaves and only exchanged

231
00:08:38,080 --> 00:08:39,919
after the enclaves have attested to each

232
00:08:39,919 --> 00:08:40,399
other

233
00:08:40,399 --> 00:08:43,200
with their valid functional keys

234
00:08:43,200 --> 00:08:44,720
correspond to signatures

235
00:08:44,720 --> 00:08:46,640
over some kind of function

236
00:08:46,640 --> 00:08:47,760
representation

237
00:08:47,760 --> 00:08:50,959
for which the enclaves check whether

238
00:08:50,959 --> 00:08:53,599
they're valid

239
00:08:53,680 --> 00:08:57,359
let's look at the steel protocol

240
00:08:58,320 --> 00:09:00,000
each part in this protocol is equipped

241
00:09:00,000 --> 00:09:02,560
with a crs

242
00:09:02,560 --> 00:09:05,760
we begin by having charlie generating

243
00:09:05,760 --> 00:09:07,440
some public key encryption parameters

244
00:09:07,440 --> 00:09:10,480
within its key management enclave

245
00:09:10,480 --> 00:09:13,200
and returning the public key to user

246
00:09:13,200 --> 00:09:14,480
space

247
00:09:14,480 --> 00:09:16,800
this is now sent to alice for future

248
00:09:16,800 --> 00:09:18,720
encryptions

249
00:09:18,720 --> 00:09:21,519
bob attests the thought that he is

250
00:09:21,519 --> 00:09:22,000
running

251
00:09:22,000 --> 00:09:24,399
a genuine decryption enclave to the key

252
00:09:24,399 --> 00:09:26,640
management enclave in charlie

253
00:09:26,640 --> 00:09:29,519
who in returns sends the master public

254
00:09:29,519 --> 00:09:31,040
key a master secret key

255
00:09:31,040 --> 00:09:34,160
for the pka schemes

256
00:09:34,160 --> 00:09:37,920
now bob can request authorization for

257
00:09:37,920 --> 00:09:40,480
computing some function f for which he

258
00:09:40,480 --> 00:09:41,120
receives

259
00:09:41,120 --> 00:09:43,920
a functional key which corresponds to an

260
00:09:43,920 --> 00:09:45,600
attestation signature

261
00:09:45,600 --> 00:09:48,800
over f this is one of the instances

262
00:09:48,800 --> 00:09:49,760
where

263
00:09:49,760 --> 00:09:52,720
steel and darren the darge a siren

264
00:09:52,720 --> 00:09:53,920
utilizes

265
00:09:53,920 --> 00:09:57,680
a distinct signature scheme

266
00:09:57,920 --> 00:10:01,600
now alice generates a ciphertext

267
00:10:01,600 --> 00:10:04,880
for some message x and the plaintext

268
00:10:04,880 --> 00:10:05,839
proof of knowledge

269
00:10:05,839 --> 00:10:08,000
that she does have access to both x and

270
00:10:08,000 --> 00:10:10,720
r at a time of encryption

271
00:10:10,720 --> 00:10:13,760
she sends these values ct and pi to

272
00:10:13,760 --> 00:10:17,360
bob for decryption now bob initializes

273
00:10:17,360 --> 00:10:18,000
if he hasn't

274
00:10:18,000 --> 00:10:20,800
already a functional enclave for the

275
00:10:20,800 --> 00:10:21,360
function

276
00:10:21,360 --> 00:10:24,240
f that he wants to compute this enclave

277
00:10:24,240 --> 00:10:26,399
is created with initial state

278
00:10:26,399 --> 00:10:30,160
null the functional enclave

279
00:10:30,160 --> 00:10:32,480
sends an attestation to the decryption

280
00:10:32,480 --> 00:10:33,920
enclave to convince it

281
00:10:33,920 --> 00:10:36,240
that it is actually a genuine functional

282
00:10:36,240 --> 00:10:39,519
enclave for the function f

283
00:10:39,519 --> 00:10:41,920
and the decryption enclave returns the

284
00:10:41,920 --> 00:10:43,200
master secret key

285
00:10:43,200 --> 00:10:45,839
to the functional enclave only if it

286
00:10:45,839 --> 00:10:46,480
received

287
00:10:46,480 --> 00:10:51,040
a previous attestation signature for f

288
00:10:52,959 --> 00:10:55,440
now the functional enclave verifies that

289
00:10:55,440 --> 00:10:57,839
the plain text proof of knowledge for

290
00:10:57,839 --> 00:11:00,959
the cipher text is valid

291
00:11:00,959 --> 00:11:03,519
and decrypts the ciphertext using the

292
00:11:03,519 --> 00:11:05,680
master secret key received

293
00:11:05,680 --> 00:11:08,959
it then can evaluate the function over

294
00:11:08,959 --> 00:11:12,000
the original message and the state which

295
00:11:12,000 --> 00:11:13,200
returns

296
00:11:13,200 --> 00:11:17,040
a public output y and the new state

297
00:11:17,040 --> 00:11:19,040
that he can use to update his functional

298
00:11:19,040 --> 00:11:21,439
enclave

299
00:11:22,480 --> 00:11:24,480
a proof is in the uc with global

300
00:11:24,480 --> 00:11:26,079
subroutine setting

301
00:11:26,079 --> 00:11:29,279
an extension over modern uc which

302
00:11:29,279 --> 00:11:30,399
includes global

303
00:11:30,399 --> 00:11:32,480
subroutines as part of a plain uc

304
00:11:32,480 --> 00:11:34,079
protocol

305
00:11:34,079 --> 00:11:36,079
as with all you see proofs we're trying

306
00:11:36,079 --> 00:11:38,160
to construct a simulator

307
00:11:38,160 --> 00:11:40,560
in the ideal world on the right hand

308
00:11:40,560 --> 00:11:41,279
side

309
00:11:41,279 --> 00:11:43,920
which can convince the environment that

310
00:11:43,920 --> 00:11:45,360
is communicating

311
00:11:45,360 --> 00:11:48,560
with the protocol on the left hand side

312
00:11:48,560 --> 00:11:50,399
in the real world whereas it's actually

313
00:11:50,399 --> 00:11:51,920
just communicating with the real

314
00:11:51,920 --> 00:11:54,240
functionality

315
00:11:54,240 --> 00:11:55,760
because of the addition of the global

316
00:11:55,760 --> 00:11:58,320
association global subroutine

317
00:11:58,320 --> 00:12:00,800
we have to set an identity bound on

318
00:12:00,800 --> 00:12:01,600
which

319
00:12:01,600 --> 00:12:04,240
parties can communicate with the gatch

320
00:12:04,240 --> 00:12:05,680
functionality

321
00:12:05,680 --> 00:12:07,839
in particular in the challenge session

322
00:12:07,839 --> 00:12:09,040
we only allow

323
00:12:09,040 --> 00:12:10,959
an adversarially corrupted party to

324
00:12:10,959 --> 00:12:12,880
communicate with god

325
00:12:12,880 --> 00:12:16,320
in our case this is limited to b

326
00:12:16,320 --> 00:12:18,160
this allows us to control all

327
00:12:18,160 --> 00:12:19,519
communications between

328
00:12:19,519 --> 00:12:22,839
gat and environment through the

329
00:12:22,839 --> 00:12:25,760
simulator

330
00:12:25,760 --> 00:12:29,680
since both bob and charlie

331
00:12:29,680 --> 00:12:31,600
in the real world require access to the

332
00:12:31,600 --> 00:12:33,519
global attestation functionality

333
00:12:33,519 --> 00:12:37,279
we're then forced to run both bobs and

334
00:12:37,279 --> 00:12:38,240
charlie's

335
00:12:38,240 --> 00:12:42,079
enclaves under bob

336
00:12:42,079 --> 00:12:44,800
luckily because we're using anonymous at

337
00:12:44,800 --> 00:12:46,880
the station

338
00:12:46,880 --> 00:12:50,000
we do not produce a trace that bob is

339
00:12:50,000 --> 00:12:51,519
actually running the key management

340
00:12:51,519 --> 00:12:52,639
enclave

341
00:12:52,639 --> 00:12:54,560
and because bob is completely controlled

342
00:12:54,560 --> 00:12:56,639
by the simulator they're not able to

343
00:12:56,639 --> 00:12:57,519
report

344
00:12:57,519 --> 00:12:59,360
that they're running charles enclaves as

345
00:12:59,360 --> 00:13:01,120
well

346
00:13:01,120 --> 00:13:02,880
to successfully simulate a state field

347
00:13:02,880 --> 00:13:04,959
functionality in the dealer world

348
00:13:04,959 --> 00:13:08,240
we are required to pass all possible

349
00:13:08,240 --> 00:13:10,000
inputs to the decryption function

350
00:13:10,000 --> 00:13:12,959
professor so that its state continues to

351
00:13:12,959 --> 00:13:14,800
update

352
00:13:14,800 --> 00:13:16,399
if the environment chooses to encrypt

353
00:13:16,399 --> 00:13:17,920
the ciphertext using the public key

354
00:13:17,920 --> 00:13:19,200
encryption scheme

355
00:13:19,200 --> 00:13:22,720
this would be fine in the real world as

356
00:13:22,720 --> 00:13:24,639
bob's functional enclave is allowed to

357
00:13:24,639 --> 00:13:26,880
decrypt using its master secret key

358
00:13:26,880 --> 00:13:29,200
and can then evaluate the function

359
00:13:29,200 --> 00:13:30,000
however

360
00:13:30,000 --> 00:13:32,079
in the real world defessor functionality

361
00:13:32,079 --> 00:13:34,079
does not have any notion of the public

362
00:13:34,079 --> 00:13:36,399
key encryption scheme

363
00:13:36,399 --> 00:13:40,480
thus we introduce

364
00:13:40,480 --> 00:13:42,240
a plain text proof of knowledge to be

365
00:13:42,240 --> 00:13:43,760
sent along with the ciphertext in our

366
00:13:43,760 --> 00:13:44,959
protocol

367
00:13:44,959 --> 00:13:48,480
so that the simulator is able to use its

368
00:13:48,480 --> 00:13:50,399
raptor to extract

369
00:13:50,399 --> 00:13:53,279
the original message from the proof and

370
00:13:53,279 --> 00:13:56,160
can pass it to the ideal functionality

371
00:13:56,160 --> 00:13:59,360
for evaluation

372
00:14:00,839 --> 00:14:03,839
additionally because in the

373
00:14:03,839 --> 00:14:07,600
real world the evaluation of a function

374
00:14:07,600 --> 00:14:10,639
is conducted by

375
00:14:10,720 --> 00:14:13,920
an attested enclave the environment

376
00:14:13,920 --> 00:14:16,480
might expect us to request

377
00:14:16,480 --> 00:14:18,480
the attestation signature for our

378
00:14:18,480 --> 00:14:19,600
evaluation

379
00:14:19,600 --> 00:14:21,600
this is easy to provide in the real

380
00:14:21,600 --> 00:14:22,959
world protocol

381
00:14:22,959 --> 00:14:26,560
but in the real world in the deal world

382
00:14:26,560 --> 00:14:28,160
the function output is produced by the

383
00:14:28,160 --> 00:14:29,839
ideal functionality and this does not

384
00:14:29,839 --> 00:14:31,519
attest it

385
00:14:31,519 --> 00:14:34,560
to resolve this issue we leverage

386
00:14:34,560 --> 00:14:37,040
a solution presented in the original psd

387
00:14:37,040 --> 00:14:38,000
paper

388
00:14:38,000 --> 00:14:41,360
whereas we insert an intentional factor

389
00:14:41,360 --> 00:14:43,920
in the ideal func in the evaluation

390
00:14:43,920 --> 00:14:45,199
subroutine

391
00:14:45,199 --> 00:14:47,920
this factor allows us to sign arbitrary

392
00:14:47,920 --> 00:14:50,320
messages

393
00:14:50,320 --> 00:14:53,120
which you can then present back to the

394
00:14:53,120 --> 00:14:53,920
environment

395
00:14:53,920 --> 00:14:55,920
the insertion of the vector in the real

396
00:14:55,920 --> 00:14:58,399
world does not impact security

397
00:14:58,399 --> 00:15:02,079
because bob is in control of the

398
00:15:02,079 --> 00:15:04,079
function call and thus will be able to

399
00:15:04,079 --> 00:15:05,600
distinguish whether the value of the

400
00:15:05,600 --> 00:15:06,720
function evaluation

401
00:15:06,720 --> 00:15:09,600
is authentic or not our proof relies on

402
00:15:09,600 --> 00:15:10,320
several

403
00:15:10,320 --> 00:15:13,279
cryptographic assumptions in particular

404
00:15:13,279 --> 00:15:15,360
the attestation signature

405
00:15:15,360 --> 00:15:18,240
is existentially informable the secure

406
00:15:18,240 --> 00:15:19,760
channels between

407
00:15:19,760 --> 00:15:23,360
enclaves are cca secure

408
00:15:23,360 --> 00:15:24,639
our plaintiff's proof of knowledge is

409
00:15:24,639 --> 00:15:26,639
simulation sound extractable

410
00:15:26,639 --> 00:15:28,399
and the encryption scheme used for

411
00:15:28,399 --> 00:15:31,600
message encryption is cpa secure

412
00:15:31,600 --> 00:15:33,120
for all these assumptions we have a

413
00:15:33,120 --> 00:15:34,720
corresponding hybrid

414
00:15:34,720 --> 00:15:38,160
and reduction in the proof

415
00:15:39,279 --> 00:15:42,240
we also modeled addition of rollback

416
00:15:42,240 --> 00:15:43,040
adversaries

417
00:15:43,040 --> 00:15:46,000
to the global attestation functionality

418
00:15:46,000 --> 00:15:48,000
these adversaries are able to conduct

419
00:15:48,000 --> 00:15:49,920
both two kinds of attacks rolling and

420
00:15:49,920 --> 00:15:52,719
working attacks

421
00:15:52,880 --> 00:15:54,720
we modify the global attestation

422
00:15:54,720 --> 00:15:56,800
functionality so that rather than

423
00:15:56,800 --> 00:15:58,399
storing a single state

424
00:15:58,399 --> 00:16:01,920
it stores a tree of derived states

425
00:16:01,920 --> 00:16:05,519
in the honest case this will look

426
00:16:05,519 --> 00:16:08,320
very similar to a length list as in the

427
00:16:08,320 --> 00:16:09,279
figure

428
00:16:09,279 --> 00:16:13,120
where between each evaluation

429
00:16:13,120 --> 00:16:16,639
the memory simply advances however

430
00:16:16,639 --> 00:16:19,360
a corrupted party can specify whenever

431
00:16:19,360 --> 00:16:19,680
they

432
00:16:19,680 --> 00:16:22,560
resume the enclave an arbitrary location

433
00:16:22,560 --> 00:16:26,160
in the tree to receive the call from

434
00:16:26,720 --> 00:16:29,680
take as an example an enclave that is

435
00:16:29,680 --> 00:16:30,399
storing

436
00:16:30,399 --> 00:16:34,800
some kind of ledger for each transaction

437
00:16:34,800 --> 00:16:38,399
the ledger state will advance

438
00:16:38,399 --> 00:16:42,079
however if an adversary is trying to

439
00:16:42,079 --> 00:16:44,880
produce a double spend they will be able

440
00:16:44,880 --> 00:16:45,680
to

441
00:16:45,680 --> 00:16:48,079
roll back the state after they have

442
00:16:48,079 --> 00:16:50,000
conducted their first transaction

443
00:16:50,000 --> 00:16:52,800
into the original state which takes

444
00:16:52,800 --> 00:16:54,480
their balance back to what it was before

445
00:16:54,480 --> 00:16:55,839
the transaction

446
00:16:55,839 --> 00:17:00,079
took place this is a rollback attack

447
00:17:00,079 --> 00:17:02,800
alternatively they're able to maintain

448
00:17:02,800 --> 00:17:04,000
two different

449
00:17:04,000 --> 00:17:07,359
histories of the ledger concurrently

450
00:17:07,359 --> 00:17:10,480
this allows them to show a different

451
00:17:10,480 --> 00:17:11,199
balance

452
00:17:11,199 --> 00:17:13,439
to any party that might be trying to

453
00:17:13,439 --> 00:17:15,520
interact with the ledger

454
00:17:15,520 --> 00:17:19,839
this is known as a forking attack

455
00:17:20,400 --> 00:17:22,079
several mitigations have been proposed

456
00:17:22,079 --> 00:17:23,679
in the literature to address

457
00:17:23,679 --> 00:17:27,520
this kind of state continuity issues

458
00:17:28,400 --> 00:17:32,080
the intel sgx te provides a set of other

459
00:17:32,080 --> 00:17:33,360
monotonic counters

460
00:17:33,360 --> 00:17:35,520
that can be used to sync the stability

461
00:17:35,520 --> 00:17:36,640
enclave

462
00:17:36,640 --> 00:17:39,760
however these counters are quite slow to

463
00:17:39,760 --> 00:17:41,440
use in practice

464
00:17:41,440 --> 00:17:46,320
and are vulnerable to wear leveling

465
00:17:46,320 --> 00:17:48,960
an alternative more efficient

466
00:17:48,960 --> 00:17:50,400
formulation is that the

467
00:17:50,400 --> 00:17:54,160
asynchronous counters which need to be

468
00:17:54,160 --> 00:17:57,440
synchronized less frequently than the

469
00:17:57,440 --> 00:18:00,880
monotonic counters however only

470
00:18:00,880 --> 00:18:02,160
protocols where

471
00:18:02,160 --> 00:18:04,320
the history between each countersink can

472
00:18:04,320 --> 00:18:05,919
be reconstructed

473
00:18:05,919 --> 00:18:10,160
are suitable for this defense

474
00:18:10,480 --> 00:18:12,320
other papers such as rote and

475
00:18:12,320 --> 00:18:14,400
lightweight collective memory

476
00:18:14,400 --> 00:18:16,320
of device network protocols where the

477
00:18:16,320 --> 00:18:18,400
security relies on

478
00:18:18,400 --> 00:18:22,080
communicating with other remote parties

479
00:18:22,080 --> 00:18:24,480
and guarantees are dependent on

480
00:18:24,480 --> 00:18:26,640
threshold security

481
00:18:26,640 --> 00:18:32,080
however these incur quite heavy costs

482
00:18:32,640 --> 00:18:35,919
of course another way to avoid rollback

483
00:18:35,919 --> 00:18:36,880
and forking attack

484
00:18:36,880 --> 00:18:39,760
is that of building stateless enclaves

485
00:18:39,760 --> 00:18:40,559
where

486
00:18:40,559 --> 00:18:42,960
between each execution of the program no

487
00:18:42,960 --> 00:18:43,600
state

488
00:18:43,600 --> 00:18:46,799
is held this is what the iron protocol

489
00:18:46,799 --> 00:18:47,760
achieves

490
00:18:47,760 --> 00:18:50,240
as there is no significant state held in

491
00:18:50,240 --> 00:18:51,360
between each of the

492
00:18:51,360 --> 00:18:54,400
deterministic computations iron is

493
00:18:54,400 --> 00:18:58,080
secure against this kind of attackers

494
00:18:58,080 --> 00:19:00,880
when it comes to steel rollback

495
00:19:00,880 --> 00:19:02,000
protection

496
00:19:02,000 --> 00:19:04,799
can be achieved by simply adding it to

497
00:19:04,799 --> 00:19:07,120
the decryption enclave

498
00:19:07,120 --> 00:19:09,760
this can then establish a protocol with

499
00:19:09,760 --> 00:19:11,520
each of the functional enclaves

500
00:19:11,520 --> 00:19:15,120
to check that their counter values are

501
00:19:15,120 --> 00:19:16,559
fresh

502
00:19:16,559 --> 00:19:20,320
this allows increasing efficiency

503
00:19:20,320 --> 00:19:23,200
as any of the above measures would be

504
00:19:23,200 --> 00:19:24,559
quite costly to implement

505
00:19:24,559 --> 00:19:28,320
for all enclaves in the protocol

506
00:19:30,400 --> 00:19:33,919
in conclusion our paper tries to answer

507
00:19:33,919 --> 00:19:36,559
three main research questions how to

508
00:19:36,559 --> 00:19:37,440
strengthen

509
00:19:37,440 --> 00:19:39,360
functional encryption to compute a

510
00:19:39,360 --> 00:19:40,960
larger class of functions

511
00:19:40,960 --> 00:19:44,480
in an efficient manner how to best model

512
00:19:44,480 --> 00:19:46,080
cryptographic protocols that use

513
00:19:46,080 --> 00:19:49,360
thrust equation environments composably

514
00:19:49,360 --> 00:19:51,520
and what are the limitations of trusted

515
00:19:51,520 --> 00:19:52,720
execution environments

516
00:19:52,720 --> 00:19:54,720
if we introduce rollback and working

517
00:19:54,720 --> 00:19:57,120
attacks

518
00:19:57,600 --> 00:19:59,919
thank you for listening you can call me

519
00:19:59,919 --> 00:20:01,200
at this email

520
00:20:01,200 --> 00:20:04,000
and the full print paper is available at

521
00:20:04,000 --> 00:20:04,640
the link

522
00:20:04,640 --> 00:20:07,600
below

