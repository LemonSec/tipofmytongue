1
00:00:00,480 --> 00:00:02,879
hi everyone this talk will be about the

2
00:00:02,879 --> 00:00:04,640
cca compatibility

3
00:00:04,640 --> 00:00:07,120
of public key infrastructure i'm

4
00:00:07,120 --> 00:00:09,519
dakshita karana from uiuc and this is

5
00:00:09,519 --> 00:00:11,759
joint work with brent waters at ut

6
00:00:11,759 --> 00:00:13,440
austin

7
00:00:13,440 --> 00:00:15,440
the notion of public key encryption

8
00:00:15,440 --> 00:00:16,960
which we all know and love

9
00:00:16,960 --> 00:00:19,600
allows bob to set up and publish a

10
00:00:19,600 --> 00:00:20,560
public key

11
00:00:20,560 --> 00:00:22,960
in such a way that alice can send

12
00:00:22,960 --> 00:00:24,960
encrypted communication to bob

13
00:00:24,960 --> 00:00:26,960
which can only be decrypted given

14
00:00:26,960 --> 00:00:28,640
knowledge of the corresponding secret

15
00:00:28,640 --> 00:00:29,359
key

16
00:00:29,359 --> 00:00:31,679
and any adversary that observes this

17
00:00:31,679 --> 00:00:32,640
communication

18
00:00:32,640 --> 00:00:34,800
but cannot compute the secret key will

19
00:00:34,800 --> 00:00:37,040
be unable to distinguish encryptions of

20
00:00:37,040 --> 00:00:37,840
one message

21
00:00:37,840 --> 00:00:40,160
from those of another this notion of

22
00:00:40,160 --> 00:00:42,800
security is called cpa security

23
00:00:42,800 --> 00:00:44,879
alternatively security against chosen

24
00:00:44,879 --> 00:00:47,360
plaintext attacks

25
00:00:47,360 --> 00:00:49,440
now what if the receiver only ever

26
00:00:49,440 --> 00:00:51,680
published a verification key for a

27
00:00:51,680 --> 00:00:53,680
digital signature scheme for which they

28
00:00:53,680 --> 00:00:55,840
possess the corresponding signing key

29
00:00:55,840 --> 00:00:58,559
can we still do public key encryption

30
00:00:58,559 --> 00:01:00,879
or what if the receiver published a hard

31
00:01:00,879 --> 00:01:02,960
puzzle for which they only possessed a

32
00:01:02,960 --> 00:01:04,400
solution

33
00:01:04,400 --> 00:01:06,240
this question was one of the original

34
00:01:06,240 --> 00:01:08,799
motivations for the study of witness

35
00:01:08,799 --> 00:01:10,080
encryption

36
00:01:10,080 --> 00:01:12,479
where garg at all showed that it is

37
00:01:12,479 --> 00:01:14,400
possible to encrypt a message

38
00:01:14,400 --> 00:01:16,479
so that it can only be opened by a

39
00:01:16,479 --> 00:01:19,119
recipient that knows an np witness

40
00:01:19,119 --> 00:01:21,200
and moreover assuming the existence of

41
00:01:21,200 --> 00:01:23,439
an appropriate witness encryption scheme

42
00:01:23,439 --> 00:01:25,600
any adversary that cannot find an np

43
00:01:25,600 --> 00:01:27,840
witness will not be able to distinguish

44
00:01:27,840 --> 00:01:29,200
between encryptions

45
00:01:29,200 --> 00:01:32,479
of two different messages to motivate

46
00:01:32,479 --> 00:01:34,079
our problem statement

47
00:01:34,079 --> 00:01:36,799
let's take a deeper look at the security

48
00:01:36,799 --> 00:01:39,119
of public key encryption schemes

49
00:01:39,119 --> 00:01:41,680
schemes satisfying the notion of cpa

50
00:01:41,680 --> 00:01:42,720
security

51
00:01:42,720 --> 00:01:45,200
offer suffer from malleability attacks

52
00:01:45,200 --> 00:01:47,040
where an adversary can obtain a

53
00:01:47,040 --> 00:01:48,079
ciphertext

54
00:01:48,079 --> 00:01:51,040
and modify it to obtain an encryption of

55
00:01:51,040 --> 00:01:52,960
a related plaintext

56
00:01:52,960 --> 00:01:55,280
to defend against such attacks public

57
00:01:55,280 --> 00:01:56,880
key encryption schemes are now

58
00:01:56,880 --> 00:01:59,439
typically required to satisfy the

59
00:01:59,439 --> 00:02:00,640
stronger notion

60
00:02:00,640 --> 00:02:04,719
of cca security here an adversary cannot

61
00:02:04,719 --> 00:02:05,520
distinguish

62
00:02:05,520 --> 00:02:08,399
encryptions of two plaintexts even given

63
00:02:08,399 --> 00:02:10,479
access to a decryption article

64
00:02:10,479 --> 00:02:12,800
that decrypts all possible related

65
00:02:12,800 --> 00:02:13,920
ciphertexts

66
00:02:13,920 --> 00:02:17,119
for the adversary

67
00:02:18,640 --> 00:02:20,720
one important difference for the

68
00:02:20,720 --> 00:02:22,480
purposes of this talk is going to be the

69
00:02:22,480 --> 00:02:23,760
difference between

70
00:02:23,760 --> 00:02:26,800
cca1 and cca2 security

71
00:02:26,800 --> 00:02:29,440
in cca1 security or often called the

72
00:02:29,440 --> 00:02:31,680
lunchtime attack scenario

73
00:02:31,680 --> 00:02:34,879
the adversary has access to a decryption

74
00:02:34,879 --> 00:02:36,000
oracle

75
00:02:36,000 --> 00:02:38,319
only before it obtains the child in

76
00:02:38,319 --> 00:02:39,360
cipher text

77
00:02:39,360 --> 00:02:42,720
and once it sends two messages m0 m1 and

78
00:02:42,720 --> 00:02:44,400
gets an encryption of one of them

79
00:02:44,400 --> 00:02:48,560
it loses access to the decryption oracle

80
00:02:48,560 --> 00:02:50,720
on the other hand the case of cca2

81
00:02:50,720 --> 00:02:53,120
security which is a stronger definition

82
00:02:53,120 --> 00:02:55,840
allows the adversary to retain access to

83
00:02:55,840 --> 00:02:57,200
the decryption oracle

84
00:02:57,200 --> 00:02:59,200
even after it obtains the challenge

85
00:02:59,200 --> 00:03:01,200
cipher text and this means that in

86
00:03:01,200 --> 00:03:02,239
particular the

87
00:03:02,239 --> 00:03:04,640
adversary can obtain a child in

88
00:03:04,640 --> 00:03:05,519
ciphertext

89
00:03:05,519 --> 00:03:08,000
and modify it to get any related

90
00:03:08,000 --> 00:03:09,920
ciphertext and continue to query the

91
00:03:09,920 --> 00:03:11,200
decryption article

92
00:03:11,200 --> 00:03:12,800
and this is allowed as long as the

93
00:03:12,800 --> 00:03:14,800
adversary does not query the decryption

94
00:03:14,800 --> 00:03:15,519
article

95
00:03:15,519 --> 00:03:18,560
on the exact same text that it obtained

96
00:03:18,560 --> 00:03:21,280
as a challenge

97
00:03:22,080 --> 00:03:25,599
in this work we generalize the examples

98
00:03:25,599 --> 00:03:27,120
discussed so far

99
00:03:27,120 --> 00:03:29,080
and put forth the notion of

100
00:03:29,080 --> 00:03:30,480
compatibility

101
00:03:30,480 --> 00:03:33,519
of any key generation or setup or puzzle

102
00:03:33,519 --> 00:03:35,360
generation algorithm

103
00:03:35,360 --> 00:03:37,519
and we focus on the specific case of

104
00:03:37,519 --> 00:03:39,040
encryption schemes

105
00:03:39,040 --> 00:03:41,760
so specifically focused on encryption we

106
00:03:41,760 --> 00:03:42,879
investigate whether

107
00:03:42,879 --> 00:03:45,120
arbitrary setup key generation or puzzle

108
00:03:45,120 --> 00:03:46,159
puzzle

109
00:03:46,159 --> 00:03:49,200
algorithms can be used to derive cca

110
00:03:49,200 --> 00:03:52,159
secure schemes

111
00:03:53,439 --> 00:03:56,640
in a nutshell we show that any key or

112
00:03:56,640 --> 00:03:58,480
puzzle generation algorithm

113
00:03:58,480 --> 00:04:01,040
that gives rise to a sub-exponentially

114
00:04:01,040 --> 00:04:03,680
in cpa secure encryption scheme

115
00:04:03,680 --> 00:04:06,239
also gives rise to a cca secure

116
00:04:06,239 --> 00:04:09,040
encryption scheme

117
00:04:09,040 --> 00:04:11,840
in some more detail under cryptographic

118
00:04:11,840 --> 00:04:14,000
assumptions that i will elaborate on in

119
00:04:14,000 --> 00:04:15,439
just a bit

120
00:04:15,439 --> 00:04:18,238
any key or puzzle generation algorithm

121
00:04:18,238 --> 00:04:18,798
that

122
00:04:18,798 --> 00:04:21,600
implies a sub-exponential in the cpa

123
00:04:21,600 --> 00:04:23,280
secure encryption scheme

124
00:04:23,280 --> 00:04:26,400
against non-uniform adversaries also

125
00:04:26,400 --> 00:04:27,040
implies

126
00:04:27,040 --> 00:04:29,919
an ncca secure encryption scheme against

127
00:04:29,919 --> 00:04:31,840
uniform adversaries

128
00:04:31,840 --> 00:04:33,759
and i want to emphasize that the goal

129
00:04:33,759 --> 00:04:35,040
here is

130
00:04:35,040 --> 00:04:38,400
to have the key generation step

131
00:04:38,400 --> 00:04:42,320
in the cca secure encryption be exactly

132
00:04:42,320 --> 00:04:44,960
the same as the key generation or the

133
00:04:44,960 --> 00:04:46,000
infrastructure

134
00:04:46,000 --> 00:04:49,120
of the cpa secure encryption scheme

135
00:04:49,120 --> 00:04:52,479
specifically in order to upgrade any key

136
00:04:52,479 --> 00:04:53,440
generation

137
00:04:53,440 --> 00:04:56,880
algorithm for a cpa scheme into one for

138
00:04:56,880 --> 00:04:58,560
a cca1 scheme

139
00:04:58,560 --> 00:05:01,759
we assume the existence of hinting prgs

140
00:05:01,759 --> 00:05:04,000
as well as subexponential keyless

141
00:05:04,000 --> 00:05:06,160
collision resistant hash functions

142
00:05:06,160 --> 00:05:09,360
against uniform adversaries

143
00:05:09,360 --> 00:05:12,160
in order to achieve cca to uh security

144
00:05:12,160 --> 00:05:14,000
we additionally assume

145
00:05:14,000 --> 00:05:16,240
the existence of sub-exponential

146
00:05:16,240 --> 00:05:18,639
non-interactive cca commitments

147
00:05:18,639 --> 00:05:22,400
for small tax bases and these can

148
00:05:22,400 --> 00:05:25,199
in turn be obtained based on time-lock

149
00:05:25,199 --> 00:05:27,680
puzzles with sub-exponential security

150
00:05:27,680 --> 00:05:29,840
that were achieved in a work of lin pass

151
00:05:29,840 --> 00:05:30,880
and sony

152
00:05:30,880 --> 00:05:32,960
alternatively they can be achieved from

153
00:05:32,960 --> 00:05:34,880
quantum hard one-way functions

154
00:05:34,880 --> 00:05:36,800
and classical hardwood quantum easy

155
00:05:36,800 --> 00:05:38,960
one-way functions with sub-exponential

156
00:05:38,960 --> 00:05:39,919
security

157
00:05:39,919 --> 00:05:41,919
that were obtained in a work with yail

158
00:05:41,919 --> 00:05:44,320
kalai

159
00:05:44,800 --> 00:05:48,639
now let me describe some prior work in

160
00:05:48,639 --> 00:05:51,360
idealized models or with setup that

161
00:05:51,360 --> 00:05:53,680
achieves essentially the same objectives

162
00:05:53,680 --> 00:05:56,400
and and then i will discuss how what uh

163
00:05:56,400 --> 00:05:57,919
what we aim to do is a little bit

164
00:05:57,919 --> 00:05:59,360
different

165
00:05:59,360 --> 00:06:03,039
so the fujisaki okamoto transform uh

166
00:06:03,039 --> 00:06:05,360
that is in the random oracle model in

167
00:06:05,360 --> 00:06:06,720
fact does show that

168
00:06:06,720 --> 00:06:09,199
any key generation algorithm that

169
00:06:09,199 --> 00:06:11,520
implies a cpa encryption scheme

170
00:06:11,520 --> 00:06:13,840
can also be used as the key generation

171
00:06:13,840 --> 00:06:14,560
algorithm

172
00:06:14,560 --> 00:06:17,280
for a cca encryption scheme and this is

173
00:06:17,280 --> 00:06:18,720
essentially what we want to do

174
00:06:18,720 --> 00:06:20,960
except that the fujisaki okomoto

175
00:06:20,960 --> 00:06:21,840
transform

176
00:06:21,840 --> 00:06:24,560
assumes the existence of the idealized

177
00:06:24,560 --> 00:06:26,800
random oracle model

178
00:06:26,800 --> 00:06:28,560
and on the other hand we want to focus

179
00:06:28,560 --> 00:06:30,880
on the plane model

180
00:06:30,880 --> 00:06:34,319
the now or young encryption system

181
00:06:34,319 --> 00:06:37,280
gives almost gives such a process in the

182
00:06:37,280 --> 00:06:39,680
crs model

183
00:06:39,680 --> 00:06:41,919
but in this work our focus is on the

184
00:06:41,919 --> 00:06:42,720
plane model

185
00:06:42,720 --> 00:06:46,400
without setup or crs or a random oracle

186
00:06:46,400 --> 00:06:49,039
and we also aim to make black box use of

187
00:06:49,039 --> 00:06:52,000
the underlying cpa scheme

188
00:06:52,000 --> 00:06:54,000
in fact we also end up making black box

189
00:06:54,000 --> 00:06:55,840
use of all the other assumptions

190
00:06:55,840 --> 00:06:57,120
of all the other cryptographic

191
00:06:57,120 --> 00:06:59,599
assumptions and one of our goals

192
00:06:59,599 --> 00:07:02,160
is also to make the weakest possible

193
00:07:02,160 --> 00:07:05,360
cryptographic assumptions

194
00:07:07,280 --> 00:07:09,440
let me give a bird's eye view of our

195
00:07:09,440 --> 00:07:12,639
technique for achieving cca1 security

196
00:07:12,639 --> 00:07:14,800
a key requirement and the main

197
00:07:14,800 --> 00:07:16,319
motivation for our work

198
00:07:16,319 --> 00:07:18,639
is that the key generation algorithm

199
00:07:18,639 --> 00:07:20,720
remain identical to that for an

200
00:07:20,720 --> 00:07:23,440
arbitrary cpa secure encryption scheme

201
00:07:23,440 --> 00:07:25,440
which means key gen is going to output a

202
00:07:25,440 --> 00:07:27,280
cpa public key and

203
00:07:27,280 --> 00:07:29,840
the corresponding secret key the encrypt

204
00:07:29,840 --> 00:07:31,599
algorithm on input a message

205
00:07:31,599 --> 00:07:34,800
m is going to evaluate a prg

206
00:07:34,800 --> 00:07:37,199
on a random seed and then exalt the

207
00:07:37,199 --> 00:07:39,039
result with the message m

208
00:07:39,039 --> 00:07:41,759
this will constitute the first component

209
00:07:41,759 --> 00:07:42,240
of

210
00:07:42,240 --> 00:07:45,199
the ciphertext and the rest of the

211
00:07:45,199 --> 00:07:47,199
ciphertext components will be generated

212
00:07:47,199 --> 00:07:49,039
in the following way

213
00:07:49,039 --> 00:07:52,160
let's say that the seed s is n bits long

214
00:07:52,160 --> 00:07:55,360
and for every index i in n we will

215
00:07:55,360 --> 00:07:55,919
compute

216
00:07:55,919 --> 00:07:59,840
a special commitment to the seed

217
00:08:00,000 --> 00:08:03,280
in addition we will encrypt the opening

218
00:08:03,280 --> 00:08:04,319
of this commitment

219
00:08:04,319 --> 00:08:08,000
twice once using the cpa encryption

220
00:08:08,000 --> 00:08:09,199
scheme

221
00:08:09,199 --> 00:08:11,520
and the other time using a general

222
00:08:11,520 --> 00:08:13,360
purpose statistically binding

223
00:08:13,360 --> 00:08:15,840
commitment

224
00:08:16,479 --> 00:08:19,759
the reason we do this is because

225
00:08:19,759 --> 00:08:22,319
encryption using the cpa scheme and

226
00:08:22,319 --> 00:08:23,440
encryption using

227
00:08:23,440 --> 00:08:25,039
and committing using the statistically

228
00:08:25,039 --> 00:08:27,440
binding commitment actually gives us

229
00:08:27,440 --> 00:08:30,720
two ways to open uh any given cipher

230
00:08:30,720 --> 00:08:31,759
text

231
00:08:31,759 --> 00:08:34,880
one is by decrypting the orange part

232
00:08:34,880 --> 00:08:36,958
which is the public key encryption part

233
00:08:36,958 --> 00:08:39,599
of it using the corresponding secret key

234
00:08:39,599 --> 00:08:42,000
and the other is to break open the

235
00:08:42,000 --> 00:08:43,919
statistically binding commitment

236
00:08:43,919 --> 00:08:46,640
by running in sufficiently large time so

237
00:08:46,640 --> 00:08:48,240
by trying all possible inputs and

238
00:08:48,240 --> 00:08:50,000
randomnesses to this commitment

239
00:08:50,000 --> 00:08:53,279
and figuring out what the y is

240
00:08:53,279 --> 00:08:55,360
and the reason that this helps is

241
00:08:55,360 --> 00:08:58,160
because we will maintain an invariant

242
00:08:58,160 --> 00:09:00,399
that for any query that the adversary

243
00:09:00,399 --> 00:09:02,080
makes to the decryption article to the

244
00:09:02,080 --> 00:09:04,000
cca decryption article

245
00:09:04,000 --> 00:09:07,519
both the decrypting via

246
00:09:07,519 --> 00:09:10,480
decrypting by opening the orange box or

247
00:09:10,480 --> 00:09:11,680
the blue box

248
00:09:11,680 --> 00:09:14,959
is going to give to the is going to lead

249
00:09:14,959 --> 00:09:18,399
to recovering the exact same seed

250
00:09:18,399 --> 00:09:22,160
as seed value s i or the ith bit of the

251
00:09:22,160 --> 00:09:24,480
seed

252
00:09:25,519 --> 00:09:28,000
i'll talk in a little bit i'll talk more

253
00:09:28,000 --> 00:09:30,720
about why this is helpful

254
00:09:30,720 --> 00:09:33,120
let me just complete this picture of

255
00:09:33,120 --> 00:09:34,880
cca1 security

256
00:09:34,880 --> 00:09:37,760
by saying that the decrypt algorithm

257
00:09:37,760 --> 00:09:39,440
given a ciphertext c

258
00:09:39,440 --> 00:09:42,800
is going to simply decrypt using the

259
00:09:42,800 --> 00:09:44,160
orange box

260
00:09:44,160 --> 00:09:45,920
using the corresponding secret key of

261
00:09:45,920 --> 00:09:47,600
the cpa secure scheme

262
00:09:47,600 --> 00:09:51,120
to recover an si and then note that once

263
00:09:51,120 --> 00:09:51,920
you recovered

264
00:09:51,920 --> 00:09:54,720
the entire seed s you can compute prg of

265
00:09:54,720 --> 00:09:55,200
s

266
00:09:55,200 --> 00:09:57,600
and xor it with the first component of

267
00:09:57,600 --> 00:09:58,720
the ciphertext

268
00:09:58,720 --> 00:10:03,200
which is c to recover the message m

269
00:10:03,760 --> 00:10:06,959
zooming in a little bit into what

270
00:10:06,959 --> 00:10:09,600
into why we build our cipher texts this

271
00:10:09,600 --> 00:10:10,720
way

272
00:10:10,720 --> 00:10:13,360
um note that we want to enforce any

273
00:10:13,360 --> 00:10:15,600
variant that says whether we

274
00:10:15,600 --> 00:10:17,760
decrypt using the orange box or the blue

275
00:10:17,760 --> 00:10:20,000
box they both lead to recovering the

276
00:10:20,000 --> 00:10:22,240
exact same seed

277
00:10:22,240 --> 00:10:25,680
this is a little bit reminiscent of

278
00:10:25,680 --> 00:10:27,519
of many different templates to achieve

279
00:10:27,519 --> 00:10:29,120
cca security including

280
00:10:29,120 --> 00:10:32,480
our young template etc however here

281
00:10:32,480 --> 00:10:35,200
uh to enforce that these both of these

282
00:10:35,200 --> 00:10:37,760
will lead to recovering the same seed

283
00:10:37,760 --> 00:10:42,000
we're going to uh rely on redundancy

284
00:10:42,000 --> 00:10:44,560
and more specifically we will enforce

285
00:10:44,560 --> 00:10:45,600
this

286
00:10:45,600 --> 00:10:48,399
by means of a hinting prg via a

287
00:10:48,399 --> 00:10:50,560
mechanism that's inspired by the work of

288
00:10:50,560 --> 00:10:52,160
copulo and waters

289
00:10:52,160 --> 00:10:57,040
and kitagawa at all

290
00:10:57,440 --> 00:10:59,760
so opening things up a little bit note

291
00:10:59,760 --> 00:11:01,600
that the way i've used randomness here

292
00:11:01,600 --> 00:11:03,600
is i'm using pi

293
00:11:03,600 --> 00:11:06,320
as the randomness used for the orange

294
00:11:06,320 --> 00:11:07,200
box and q

295
00:11:07,200 --> 00:11:09,360
i as the randomness for the blue box for

296
00:11:09,360 --> 00:11:11,760
the statistically binding commitment

297
00:11:11,760 --> 00:11:14,399
and the way these are generated is they

298
00:11:14,399 --> 00:11:15,600
will actually depend

299
00:11:15,600 --> 00:11:18,320
on the ith bit of the seed s and more

300
00:11:18,320 --> 00:11:19,360
specifically if

301
00:11:19,360 --> 00:11:22,160
s i is zero then p i is going to be the

302
00:11:22,160 --> 00:11:23,760
output of the prg

303
00:11:23,760 --> 00:11:26,399
and the value q i is going to be uniform

304
00:11:26,399 --> 00:11:28,000
and if s i is 1

305
00:11:28,000 --> 00:11:30,720
then p i is going to be uniform and q y

306
00:11:30,720 --> 00:11:34,480
will be the output of the prg

307
00:11:35,600 --> 00:11:38,079
in some way the ps and q's can be

308
00:11:38,079 --> 00:11:39,760
thought of as being hints about the

309
00:11:39,760 --> 00:11:40,240
secret

310
00:11:40,240 --> 00:11:44,000
s so that what can be done

311
00:11:44,000 --> 00:11:46,560
more specifically is if someone wants to

312
00:11:46,560 --> 00:11:48,560
extract the id bit of the seed

313
00:11:48,560 --> 00:11:50,880
by decrypting the orange by decrypting

314
00:11:50,880 --> 00:11:53,200
the cipher text in the orange box

315
00:11:53,200 --> 00:11:56,720
what they would do is obtain y i

316
00:11:56,720 --> 00:11:58,959
which would be a candidate opening for

317
00:11:58,959 --> 00:12:01,200
the special commitment on the left

318
00:12:01,200 --> 00:12:04,240
and use it to obtain a candidate

319
00:12:04,240 --> 00:12:07,360
ith bit of seed

320
00:12:07,600 --> 00:12:10,480
once they have computed all the bits of

321
00:12:10,480 --> 00:12:11,760
the seed

322
00:12:11,760 --> 00:12:14,720
for one by decrypting all possible and

323
00:12:14,720 --> 00:12:15,920
orange boxes

324
00:12:15,920 --> 00:12:19,200
they'll compute all the p's and q's uh

325
00:12:19,200 --> 00:12:21,920
relevant p's and q's by evaluating the

326
00:12:21,920 --> 00:12:23,040
prg

327
00:12:23,040 --> 00:12:26,240
on the candidate seed s once this

328
00:12:26,240 --> 00:12:29,440
is done they will use the p's and q's

329
00:12:29,440 --> 00:12:30,560
that were recovered

330
00:12:30,560 --> 00:12:34,160
to actually re-encrypt and check

331
00:12:34,160 --> 00:12:36,839
whether the candidate s was correct or

332
00:12:36,839 --> 00:12:38,320
incorrect

333
00:12:38,320 --> 00:12:42,320
and it is these checks that can

334
00:12:42,560 --> 00:12:46,959
used to ensure that in a hybrid game

335
00:12:46,959 --> 00:12:49,360
one can switch to answering the

336
00:12:49,360 --> 00:12:51,360
adversary's oracle queries

337
00:12:51,360 --> 00:12:53,360
without ever relying on the decryption

338
00:12:53,360 --> 00:12:54,880
key sk

339
00:12:54,880 --> 00:12:57,200
instead what is going to be done is in

340
00:12:57,200 --> 00:13:00,000
this in this hybrid experiment

341
00:13:00,000 --> 00:13:01,519
the decryption oracle will be

342
00:13:01,519 --> 00:13:04,079
implemented by brute force breaking the

343
00:13:04,079 --> 00:13:06,079
statistically binding commitment

344
00:13:06,079 --> 00:13:08,079
and using it to obtain a candidate

345
00:13:08,079 --> 00:13:09,279
opening y i

346
00:13:09,279 --> 00:13:11,920
and using that to obtain a candidate bit

347
00:13:11,920 --> 00:13:13,120
of the seed s i

348
00:13:13,120 --> 00:13:15,920
as before and then as before once the

349
00:13:15,920 --> 00:13:17,279
seed has been obtained

350
00:13:17,279 --> 00:13:19,839
one can compute the p's and q's and use

351
00:13:19,839 --> 00:13:22,240
them to perform a series of checks

352
00:13:22,240 --> 00:13:24,959
and it is ensured that as long as the

353
00:13:24,959 --> 00:13:26,000
checks pass

354
00:13:26,000 --> 00:13:27,680
it's computationally hard for the

355
00:13:27,680 --> 00:13:30,240
adversary to come up with a decryption

356
00:13:30,240 --> 00:13:31,680
query

357
00:13:31,680 --> 00:13:34,320
such that the orange box and the blue

358
00:13:34,320 --> 00:13:36,079
box would lead to different decryption

359
00:13:36,079 --> 00:13:38,560
results

360
00:13:39,920 --> 00:13:42,800
to enable this the special commitment on

361
00:13:42,800 --> 00:13:43,600
the left

362
00:13:43,600 --> 00:13:46,399
is devised as a computationally binding

363
00:13:46,399 --> 00:13:48,959
statistically equivocal commitment

364
00:13:48,959 --> 00:13:51,360
and what one can show is that if the

365
00:13:51,360 --> 00:13:52,480
checks passed

366
00:13:52,480 --> 00:13:54,320
and the adversary was able to come up

367
00:13:54,320 --> 00:13:56,480
with a query where the orange and blue

368
00:13:56,480 --> 00:13:57,360
boxes

369
00:13:57,360 --> 00:13:59,839
resulted in different decryption results

370
00:13:59,839 --> 00:14:01,920
then the adversary must necessarily be

371
00:14:01,920 --> 00:14:02,639
breaking

372
00:14:02,639 --> 00:14:04,560
the computational binding property of

373
00:14:04,560 --> 00:14:06,480
the special commitment

374
00:14:06,480 --> 00:14:08,160
and it is also here that we need to

375
00:14:08,160 --> 00:14:09,519
restrict the adversary

376
00:14:09,519 --> 00:14:12,800
to being a uniform machine and and rely

377
00:14:12,800 --> 00:14:14,720
on

378
00:14:14,720 --> 00:14:17,920
specific types of assumptions like

379
00:14:17,920 --> 00:14:19,760
keyless collision resistant hashing

380
00:14:19,760 --> 00:14:21,680
against uniform adversaries

381
00:14:21,680 --> 00:14:23,680
to get such a computationally binding

382
00:14:23,680 --> 00:14:26,079
commitment

383
00:14:26,079 --> 00:14:28,399
moreover in our hybrid experiments it's

384
00:14:28,399 --> 00:14:30,639
going to be important to modify

385
00:14:30,639 --> 00:14:35,199
the challenge ciphertext slowly so that

386
00:14:35,199 --> 00:14:37,760
in in some of these games the channel

387
00:14:37,760 --> 00:14:39,440
and ciphertext contains

388
00:14:39,440 --> 00:14:41,600
special commitments that are actually

389
00:14:41,600 --> 00:14:44,000
generated in equivocal mode

390
00:14:44,000 --> 00:14:46,079
and so that the orange and blue boxes

391
00:14:46,079 --> 00:14:47,199
actually do

392
00:14:47,199 --> 00:14:49,920
encrypt different types of openings but

393
00:14:49,920 --> 00:14:50,800
again we will

394
00:14:50,800 --> 00:14:52,560
ensure that this is only done for the

395
00:14:52,560 --> 00:14:53,839
child in ciphertext

396
00:14:53,839 --> 00:14:55,440
whereas the adversaries challenge

397
00:14:55,440 --> 00:14:57,360
queries can never have such

398
00:14:57,360 --> 00:14:59,440
equivocation going on unless the

399
00:14:59,440 --> 00:15:01,040
adversary breaks some underlying

400
00:15:01,040 --> 00:15:04,399
computational assumptions

401
00:15:04,399 --> 00:15:07,440
another key tool that we make use of is

402
00:15:07,440 --> 00:15:09,680
a hinting prg

403
00:15:09,680 --> 00:15:12,480
these were developed by coppola and

404
00:15:12,480 --> 00:15:13,360
waters

405
00:15:13,360 --> 00:15:14,959
and are known based on various

406
00:15:14,959 --> 00:15:16,560
assumptions like computational

407
00:15:16,560 --> 00:15:18,160
diffie-hellman or the learning with

408
00:15:18,160 --> 00:15:19,839
errors assumption

409
00:15:19,839 --> 00:15:22,320
these are just a special type of prg

410
00:15:22,320 --> 00:15:24,079
where instead of requiring that the

411
00:15:24,079 --> 00:15:26,240
output of the prg be indistinguishable

412
00:15:26,240 --> 00:15:27,279
from uniform

413
00:15:27,279 --> 00:15:29,440
we require that the adversary not be

414
00:15:29,440 --> 00:15:30,800
able to distinguish

415
00:15:30,800 --> 00:15:33,680
between the following two games in game

416
00:15:33,680 --> 00:15:34,320
zero

417
00:15:34,320 --> 00:15:37,600
a seed s is sampled at random

418
00:15:37,600 --> 00:15:39,920
and the output of the prg is computed on

419
00:15:39,920 --> 00:15:40,800
the c

420
00:15:40,800 --> 00:15:42,560
and then the adversary instead of

421
00:15:42,560 --> 00:15:44,720
getting just the output of the prg

422
00:15:44,720 --> 00:15:47,839
instead gets what looks like an entire

423
00:15:47,839 --> 00:15:49,839
block of values

424
00:15:49,839 --> 00:15:53,519
where the first block consists of the

425
00:15:53,519 --> 00:15:55,839
first part of the output of the prg

426
00:15:55,839 --> 00:15:58,240
the second block contains the output of

427
00:15:58,240 --> 00:15:59,360
the prg

428
00:15:59,360 --> 00:16:02,000
as well as a uniformly random string but

429
00:16:02,000 --> 00:16:03,040
these are arranged

430
00:16:03,040 --> 00:16:06,079
in such a way that if the first bit of

431
00:16:06,079 --> 00:16:07,360
the seed is zero

432
00:16:07,360 --> 00:16:09,360
then the output of the prg is placed on

433
00:16:09,360 --> 00:16:11,279
top and a uniformly random string is

434
00:16:11,279 --> 00:16:12,560
placed on the bottom

435
00:16:12,560 --> 00:16:14,880
and if the first bit of the seed is one

436
00:16:14,880 --> 00:16:16,000
then um

437
00:16:16,000 --> 00:16:17,279
then these are placed the other way

438
00:16:17,279 --> 00:16:19,040
around meaning that there will be a

439
00:16:19,040 --> 00:16:20,000
uniform

440
00:16:20,000 --> 00:16:22,880
value on the top block and the output of

441
00:16:22,880 --> 00:16:23,680
the prg

442
00:16:23,680 --> 00:16:26,800
on the bottom and this is done for every

443
00:16:26,800 --> 00:16:27,360
index

444
00:16:27,360 --> 00:16:29,920
i in n where n is also the length of the

445
00:16:29,920 --> 00:16:30,639
seed

446
00:16:30,639 --> 00:16:32,880
and the adversary gets this entire set

447
00:16:32,880 --> 00:16:34,399
of blocks

448
00:16:34,399 --> 00:16:37,440
in game one the adversary simply gets a

449
00:16:37,440 --> 00:16:38,480
uniform set

450
00:16:38,480 --> 00:16:41,199
of blocks and the idea is that the

451
00:16:41,199 --> 00:16:42,639
adversary should not be able to

452
00:16:42,639 --> 00:16:43,600
distinguish

453
00:16:43,600 --> 00:16:45,759
between these two games in polynomial

454
00:16:45,759 --> 00:16:46,880
time

455
00:16:46,880 --> 00:16:48,320
so really the difference from the

456
00:16:48,320 --> 00:16:50,240
regular prg is here

457
00:16:50,240 --> 00:16:52,720
the the location of these blocks the

458
00:16:52,720 --> 00:16:54,639
output versus uniform

459
00:16:54,639 --> 00:16:56,639
actually depends on the seed itself and

460
00:16:56,639 --> 00:16:58,639
can be thought of as giving out hints

461
00:16:58,639 --> 00:16:59,920
about the seed

462
00:16:59,920 --> 00:17:02,480
and and this type of structure is

463
00:17:02,480 --> 00:17:04,240
actually important to our proof of

464
00:17:04,240 --> 00:17:06,319
security

465
00:17:06,319 --> 00:17:08,400
now let me move on to say a little bit

466
00:17:08,400 --> 00:17:10,240
about our technique for achieving

467
00:17:10,240 --> 00:17:13,679
cca2 security the overall template for

468
00:17:13,679 --> 00:17:15,039
our construction

469
00:17:15,039 --> 00:17:17,520
is very similar to the cca1 setting

470
00:17:17,520 --> 00:17:19,760
except for one important difference

471
00:17:19,760 --> 00:17:22,240
the difference is that instead of using

472
00:17:22,240 --> 00:17:24,319
a statistically binding commitment to

473
00:17:24,319 --> 00:17:26,079
set up our alternative decryption

474
00:17:26,079 --> 00:17:26,880
mechanism

475
00:17:26,880 --> 00:17:30,559
we actually use a cca secure commitment

476
00:17:30,559 --> 00:17:32,720
as before we will ensure that there are

477
00:17:32,720 --> 00:17:34,240
two ways to open

478
00:17:34,240 --> 00:17:36,799
any cipher text that the adversary sends

479
00:17:36,799 --> 00:17:38,400
to the decryption article

480
00:17:38,400 --> 00:17:40,720
one is to decrypt using the secret key

481
00:17:40,720 --> 00:17:42,640
of the cpa encryption scheme

482
00:17:42,640 --> 00:17:45,120
which means open the orange box and the

483
00:17:45,120 --> 00:17:46,880
other is to open a blue open the blue

484
00:17:46,880 --> 00:17:47,360
box

485
00:17:47,360 --> 00:17:49,760
which is to break open the cca secure

486
00:17:49,760 --> 00:17:50,799
commitment

487
00:17:50,799 --> 00:17:52,320
and we're going to ensure the same

488
00:17:52,320 --> 00:17:54,480
invariant which is that both lead to the

489
00:17:54,480 --> 00:17:55,360
recovery

490
00:17:55,360 --> 00:17:58,400
of the same seed si now recall that the

491
00:17:58,400 --> 00:18:00,480
difference in the cca2 setting from the

492
00:18:00,480 --> 00:18:01,760
cca1 setting

493
00:18:01,760 --> 00:18:04,080
is that the adversary continues to have

494
00:18:04,080 --> 00:18:04,880
access

495
00:18:04,880 --> 00:18:07,520
to the decryption oracle even after it

496
00:18:07,520 --> 00:18:10,720
has obtained the challenge ciphertext

497
00:18:10,720 --> 00:18:13,120
this makes the proof for the cca2

498
00:18:13,120 --> 00:18:14,960
settings significantly trickier

499
00:18:14,960 --> 00:18:17,280
and in particular this means that

500
00:18:17,280 --> 00:18:18,640
despite the fact

501
00:18:18,640 --> 00:18:21,440
that in certain hybrids the challenger

502
00:18:21,440 --> 00:18:22,240
is going to

503
00:18:22,240 --> 00:18:24,480
uh be cheating in the challenge

504
00:18:24,480 --> 00:18:26,160
ciphertext in the way it generates the

505
00:18:26,160 --> 00:18:28,000
style in ciphertext which will contain

506
00:18:28,000 --> 00:18:30,160
all these equivocations we need to

507
00:18:30,160 --> 00:18:31,600
continue to ensure

508
00:18:31,600 --> 00:18:34,640
that the adversary maintains this

509
00:18:34,640 --> 00:18:35,280
invariant

510
00:18:35,280 --> 00:18:36,960
in all of their queries and this should

511
00:18:36,960 --> 00:18:38,400
be despite the fact

512
00:18:38,400 --> 00:18:40,480
that the challenge queries that the the

513
00:18:40,480 --> 00:18:42,240
challenge cipher texts that are being

514
00:18:42,240 --> 00:18:43,679
sent to the adversary

515
00:18:43,679 --> 00:18:46,080
actually do not satisfy this invariant

516
00:18:46,080 --> 00:18:48,960
at various steps in the game

517
00:18:48,960 --> 00:18:51,280
this is where we rely on the cca

518
00:18:51,280 --> 00:18:54,840
property of the commitment scheme

519
00:18:54,840 --> 00:18:58,000
um let me also mention

520
00:18:58,000 --> 00:19:01,360
that we only require the cca commitments

521
00:19:01,360 --> 00:19:04,320
to satisfy a special type of security a

522
00:19:04,320 --> 00:19:06,400
special type of uniform security

523
00:19:06,400 --> 00:19:08,640
we do not need full-fledged non-uniform

524
00:19:08,640 --> 00:19:09,600
security

525
00:19:09,600 --> 00:19:12,000
and what we actually need is for the cca

526
00:19:12,000 --> 00:19:12,799
commitments

527
00:19:12,799 --> 00:19:15,600
to be secure against computation enabled

528
00:19:15,600 --> 00:19:17,360
uniform adversaries

529
00:19:17,360 --> 00:19:20,080
this is a new type of notion of uniform

530
00:19:20,080 --> 00:19:22,080
security which lies somewhere in between

531
00:19:22,080 --> 00:19:24,000
uniform and non-uniform

532
00:19:24,000 --> 00:19:26,080
where the adversary is uniform except

533
00:19:26,080 --> 00:19:27,520
getting access to an

534
00:19:27,520 --> 00:19:29,679
oracle in the beginning of the game that

535
00:19:29,679 --> 00:19:30,880
allows it to perform

536
00:19:30,880 --> 00:19:34,480
some more than polynomial time

537
00:19:34,480 --> 00:19:36,720
computations

538
00:19:36,720 --> 00:19:38,160
these types of commitments were

539
00:19:38,160 --> 00:19:40,080
constructed in

540
00:19:40,080 --> 00:19:43,360
joint work with rachet gerg george lu

541
00:19:43,360 --> 00:19:44,960
and brent waters

542
00:19:44,960 --> 00:19:47,360
and they only require black box use of

543
00:19:47,360 --> 00:19:48,720
base commitment schemes

544
00:19:48,720 --> 00:19:50,720
like i said these can be based for

545
00:19:50,720 --> 00:19:52,640
example on sub exponential time log

546
00:19:52,640 --> 00:19:53,919
puzzles

547
00:19:53,919 --> 00:19:56,400
and along with this they assume the

548
00:19:56,400 --> 00:19:57,200
existence of

549
00:19:57,200 --> 00:19:59,679
hinting prgs and keyless collision

550
00:19:59,679 --> 00:20:01,200
resistant hash functions

551
00:20:01,200 --> 00:20:03,200
which are assumptions that we are making

552
00:20:03,200 --> 00:20:06,880
anyway for our construction

553
00:20:06,880 --> 00:20:09,520
in summary we show that the setup or key

554
00:20:09,520 --> 00:20:11,120
generation algorithm

555
00:20:11,120 --> 00:20:13,600
used for any ncpa secure public key

556
00:20:13,600 --> 00:20:14,880
encryption scheme

557
00:20:14,880 --> 00:20:18,240
also gives rise to an int cca to secure

558
00:20:18,240 --> 00:20:20,000
public key encryption scheme

559
00:20:20,000 --> 00:20:22,720
under suitable cryptographic assumptions

560
00:20:22,720 --> 00:20:25,200
in more detail we assume that the cpa

561
00:20:25,200 --> 00:20:27,039
secure scheme satisfies

562
00:20:27,039 --> 00:20:29,760
sub-exponential cpa security and we

563
00:20:29,760 --> 00:20:32,000
additionally assume black box access to

564
00:20:32,000 --> 00:20:33,440
hinting prgs

565
00:20:33,440 --> 00:20:35,039
keyless collision resistant hash

566
00:20:35,039 --> 00:20:37,840
functions and for the case of cca2

567
00:20:37,840 --> 00:20:40,880
security we assume access to a base

568
00:20:40,880 --> 00:20:45,120
cca2 secure commitment scheme

569
00:20:45,360 --> 00:20:47,280
an interesting direction for future

570
00:20:47,280 --> 00:20:49,120
research is to understand

571
00:20:49,120 --> 00:20:51,039
whether the setup or key generation

572
00:20:51,039 --> 00:20:53,280
algorithms for any public key encryption

573
00:20:53,280 --> 00:20:53,919
scheme

574
00:20:53,919 --> 00:20:55,440
can give rise to something like a

575
00:20:55,440 --> 00:20:58,159
digital signature and more generally

576
00:20:58,159 --> 00:21:01,520
when can set up that was originally used

577
00:21:01,520 --> 00:21:04,559
for one type of crypto system be used to

578
00:21:04,559 --> 00:21:05,200
realize

579
00:21:05,200 --> 00:21:07,120
a completely different crypto system

580
00:21:07,120 --> 00:21:09,520
altogether without the need to assume

581
00:21:09,520 --> 00:21:11,200
any additional setup or

582
00:21:11,200 --> 00:21:14,320
infrastructure with that i'd like to

583
00:21:14,320 --> 00:21:16,000
conclude my talk thank you so much

584
00:21:16,000 --> 00:21:19,840
for listening

