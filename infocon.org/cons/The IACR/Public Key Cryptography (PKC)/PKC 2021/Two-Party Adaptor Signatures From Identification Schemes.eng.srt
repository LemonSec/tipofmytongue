1
00:00:01,280 --> 00:00:02,720
hello everyone and welcome to this

2
00:00:02,720 --> 00:00:03,600
presentation

3
00:00:03,600 --> 00:00:05,359
my name is siva shree and today i will

4
00:00:05,359 --> 00:00:06,879
present the paper two-party adapter

5
00:00:06,879 --> 00:00:09,040
signatures from identification schemes

6
00:00:09,040 --> 00:00:10,800
this is a joint work with andreas eric

7
00:00:10,800 --> 00:00:13,120
sebastian faust christina ostakova

8
00:00:13,120 --> 00:00:16,239
monastic mitra and me sieve andreas

9
00:00:16,239 --> 00:00:18,080
sebastian monocy and i are from two

10
00:00:18,080 --> 00:00:19,279
dumpsters in germany

11
00:00:19,279 --> 00:00:22,320
and christina is from eth surge in

12
00:00:22,320 --> 00:00:24,400
switzerland

13
00:00:24,400 --> 00:00:26,480
okay let's start with some motivation

14
00:00:26,480 --> 00:00:28,320
consider the following scenario we have

15
00:00:28,320 --> 00:00:29,199
two parties

16
00:00:29,199 --> 00:00:31,599
alice and bob where alice has a secret

17
00:00:31,599 --> 00:00:32,558
value w

18
00:00:32,558 --> 00:00:34,399
which she would give to bob in exchange

19
00:00:34,399 --> 00:00:37,280
for bob's signature on a message

20
00:00:37,280 --> 00:00:39,440
bob on the other hand would give alice's

21
00:00:39,440 --> 00:00:40,960
signature but he would like to be sure

22
00:00:40,960 --> 00:00:43,600
that upon his signature being revealed

23
00:00:43,600 --> 00:00:46,000
he would learn the witness w that alice

24
00:00:46,000 --> 00:00:46,800
promised

25
00:00:46,800 --> 00:00:48,800
and by revealed here i mean that the

26
00:00:48,800 --> 00:00:51,760
signature is published on for example

27
00:00:51,760 --> 00:00:54,000
a bulletin board a website or a

28
00:00:54,000 --> 00:00:55,199
blockchain

29
00:00:55,199 --> 00:00:57,199
now you might be asking is this a

30
00:00:57,199 --> 00:00:59,120
scenario which happens in protocols

31
00:00:59,120 --> 00:01:00,079
actually

32
00:01:00,079 --> 00:01:02,160
and the answer is yes there are many

33
00:01:02,160 --> 00:01:03,600
protocols

34
00:01:03,600 --> 00:01:06,479
over the blockchain that need to tackle

35
00:01:06,479 --> 00:01:06,880
with

36
00:01:06,880 --> 00:01:09,040
such an exchange for example we have

37
00:01:09,040 --> 00:01:10,799
conditional payments atomic swaps and

38
00:01:10,799 --> 00:01:14,320
payment channels as examples

39
00:01:14,799 --> 00:01:19,200
let's see on a high level what type of

40
00:01:19,200 --> 00:01:22,159
protocol do we need in order to handle

41
00:01:22,159 --> 00:01:24,320
this exchange

42
00:01:24,320 --> 00:01:27,119
so alice and bob uh would start to

43
00:01:27,119 --> 00:01:28,560
communicate with each other at least

44
00:01:28,560 --> 00:01:31,759
send some message t1 to bob bob since d2

45
00:01:31,759 --> 00:01:34,560
and eventually alice would like to be

46
00:01:34,560 --> 00:01:36,640
able to get a signature

47
00:01:36,640 --> 00:01:39,680
on him on the message m that she wanted

48
00:01:39,680 --> 00:01:42,320
from bob and she can extract his

49
00:01:42,320 --> 00:01:44,079
signature given the transcript of her

50
00:01:44,079 --> 00:01:45,360
communication with bob

51
00:01:45,360 --> 00:01:48,000
and her witness she can now of course

52
00:01:48,000 --> 00:01:49,680
send the signature and message pair to

53
00:01:49,680 --> 00:01:51,040
the blockchain

54
00:01:51,040 --> 00:01:53,759
pop would be able to get this signature

55
00:01:53,759 --> 00:01:54,560
from the blockchain

56
00:01:54,560 --> 00:01:56,799
and paul wants to on the other hand have

57
00:01:56,799 --> 00:01:59,680
the guarantee that given his transcript

58
00:01:59,680 --> 00:02:01,759
and the signature which he extracted

59
00:02:01,759 --> 00:02:03,439
from the blockchain he would be able to

60
00:02:03,439 --> 00:02:06,559
get alice's witness

61
00:02:07,040 --> 00:02:08,800
a recent primitive called adapter

62
00:02:08,800 --> 00:02:10,318
signatures

63
00:02:10,318 --> 00:02:13,120
satisfy what i just described here i

64
00:02:13,120 --> 00:02:14,720
will later in this call go into more

65
00:02:14,720 --> 00:02:16,400
details how adapter signatures work

66
00:02:16,400 --> 00:02:18,000
but now i want to give you the history

67
00:02:18,000 --> 00:02:21,440
of adapter signatures first

68
00:02:21,440 --> 00:02:23,280
adapter signatures were introduced in

69
00:02:23,280 --> 00:02:25,840
march 2017 by postra

70
00:02:25,840 --> 00:02:28,480
uh in a mailing list he proposed a

71
00:02:28,480 --> 00:02:30,160
schnorr based construction for adapter

72
00:02:30,160 --> 00:02:31,920
signatures

73
00:02:31,920 --> 00:02:34,959
a year later pedro monero sanchez and

74
00:02:34,959 --> 00:02:36,560
anakin kate proposed

75
00:02:36,560 --> 00:02:39,120
a threshold ecdsa-based variant of

76
00:02:39,120 --> 00:02:40,800
adapter signatures

77
00:02:40,800 --> 00:02:43,680
in a mailing list

78
00:02:44,239 --> 00:02:47,440
in 2019 adapter signatures were used by

79
00:02:47,440 --> 00:02:48,800
molovolta ital

80
00:02:48,800 --> 00:02:51,120
in order to construct payment channels

81
00:02:51,120 --> 00:02:52,640
they of course require the threshold

82
00:02:52,640 --> 00:02:53,840
variant of

83
00:02:53,840 --> 00:02:56,640
adapter signatures however they did not

84
00:02:56,640 --> 00:02:58,319
formalize adapter signatures as a

85
00:02:58,319 --> 00:03:00,720
standalone primitive

86
00:03:00,720 --> 00:03:04,720
it was first in 2020 that aomaya ital

87
00:03:04,720 --> 00:03:06,879
for the first time proposed the

88
00:03:06,879 --> 00:03:09,200
formalization of a single party adapter

89
00:03:09,200 --> 00:03:10,480
signature scheme

90
00:03:10,480 --> 00:03:12,560
and provided constructions based on

91
00:03:12,560 --> 00:03:16,400
snore and ecdsa signatures

92
00:03:16,400 --> 00:03:18,879
later that year eskin it allah tyre it

93
00:03:18,879 --> 00:03:21,280
all proposed two different post-quantum

94
00:03:21,280 --> 00:03:23,200
secure adapter signatures from different

95
00:03:23,200 --> 00:03:25,519
underlying assumptions

96
00:03:25,519 --> 00:03:28,560
however until this point

97
00:03:28,560 --> 00:03:32,000
it was unclear from

98
00:03:32,000 --> 00:03:35,920
which class of signature schemes one can

99
00:03:35,920 --> 00:03:39,280
design and produce adapter signatures

100
00:03:39,280 --> 00:03:40,799
it seemed a little bit ad hoc the

101
00:03:40,799 --> 00:03:42,560
construction that were presented from

102
00:03:42,560 --> 00:03:46,159
uh schnoor or acdsa and it wasn't really

103
00:03:46,159 --> 00:03:46,879
clear if

104
00:03:46,879 --> 00:03:48,560
there is really an inherent property

105
00:03:48,560 --> 00:03:50,239
that can be used from signatures

106
00:03:50,239 --> 00:03:51,840
in order to transform them into adapter

107
00:03:51,840 --> 00:03:54,080
signatures furthermore the threshold

108
00:03:54,080 --> 00:03:55,439
variant of adapter solutions was never

109
00:03:55,439 --> 00:03:57,360
formalized until this point

110
00:03:57,360 --> 00:04:01,840
this brings us to our contribution

111
00:04:02,159 --> 00:04:05,599
we know from the work by klits

112
00:04:05,599 --> 00:04:08,239
mazney and pan that id scheme

113
00:04:08,239 --> 00:04:09,519
identification schemes

114
00:04:09,519 --> 00:04:11,280
can be generically transformed into

115
00:04:11,280 --> 00:04:12,640
signature schemes

116
00:04:12,640 --> 00:04:14,159
i will call this class of signature

117
00:04:14,159 --> 00:04:16,959
schemes sig id

118
00:04:16,959 --> 00:04:20,079
in our work we show how sig id schemes

119
00:04:20,079 --> 00:04:22,800
can be transformed into adapter

120
00:04:22,800 --> 00:04:23,680
signatures

121
00:04:23,680 --> 00:04:27,440
in the single party case furthermore

122
00:04:27,440 --> 00:04:29,360
we show how sig id schemes can be

123
00:04:29,360 --> 00:04:31,280
transformed into two-party signature

124
00:04:31,280 --> 00:04:32,800
schemes

125
00:04:32,800 --> 00:04:34,320
and how these two-party signature

126
00:04:34,320 --> 00:04:36,080
schemes can be transformed

127
00:04:36,080 --> 00:04:38,800
into two-party adapter signature schemes

128
00:04:38,800 --> 00:04:40,320
note that our transformations are not

129
00:04:40,320 --> 00:04:43,040
generic and the underlying sig id

130
00:04:43,040 --> 00:04:45,600
must satisfy some properties which i

131
00:04:45,600 --> 00:04:46,400
will go into

132
00:04:46,400 --> 00:04:50,320
more details later in this talk

133
00:04:50,880 --> 00:04:52,880
okay now that i have given you some

134
00:04:52,880 --> 00:04:54,320
introduction and motivation

135
00:04:54,320 --> 00:04:55,840
i will next follow with some background

136
00:04:55,840 --> 00:04:57,919
adapter signatures then give you the

137
00:04:57,919 --> 00:04:59,280
generic transformation in the single

138
00:04:59,280 --> 00:05:00,960
party case and finally

139
00:05:00,960 --> 00:05:04,720
present our two-party adapter signature

140
00:05:04,720 --> 00:05:08,160
let's continue with some backgrounds

141
00:05:08,639 --> 00:05:11,759
other signatures in in a more formal

142
00:05:11,759 --> 00:05:14,800
uh explanation work as follows

143
00:05:14,800 --> 00:05:18,080
alice has a pair of statement of witness

144
00:05:18,080 --> 00:05:22,000
where the statement of witness are from

145
00:05:22,000 --> 00:05:24,400
something which i call a hard relation

146
00:05:24,400 --> 00:05:26,720
which means that given the statement

147
00:05:26,720 --> 00:05:30,560
the witness cannot be extracted

148
00:05:32,400 --> 00:05:35,440
alice now sent the statement and

149
00:05:35,440 --> 00:05:37,120
the message from which for which she

150
00:05:37,120 --> 00:05:39,759
wants to receive the signature to bob

151
00:05:39,759 --> 00:05:42,080
bob at this point generates something we

152
00:05:42,080 --> 00:05:43,840
call a pre-signature

153
00:05:43,840 --> 00:05:45,840
a pre-signature which is basically an

154
00:05:45,840 --> 00:05:47,280
incomplete signature

155
00:05:47,280 --> 00:05:49,440
bob sends this precinct back to alice

156
00:05:49,440 --> 00:05:51,360
and alice can now

157
00:05:51,360 --> 00:05:53,520
verify if this pre-signature was indeed

158
00:05:53,520 --> 00:05:55,759
valid

159
00:05:55,759 --> 00:05:57,919
if so she would adapt this pre-signature

160
00:05:57,919 --> 00:06:00,080
to a full signature

161
00:06:00,080 --> 00:06:02,160
this full signature looks just like a

162
00:06:02,160 --> 00:06:03,919
normal signature that bob would have

163
00:06:03,919 --> 00:06:04,560
produced

164
00:06:04,560 --> 00:06:06,720
using his secret key so from the naked

165
00:06:06,720 --> 00:06:08,960
eye

166
00:06:08,960 --> 00:06:12,080
it is it is not really clear

167
00:06:12,080 --> 00:06:13,919
for someone who just sees this signature

168
00:06:13,919 --> 00:06:16,240
that alice and bob actually executed

169
00:06:16,240 --> 00:06:18,880
an adapter signature protocol alice can

170
00:06:18,880 --> 00:06:20,240
of course not submit this message and

171
00:06:20,240 --> 00:06:22,400
signature pair to the blockchain

172
00:06:22,400 --> 00:06:24,400
bob would naturally be able to see it

173
00:06:24,400 --> 00:06:26,160
and he would be able to run an

174
00:06:26,160 --> 00:06:28,319
algorithm called extract which would

175
00:06:28,319 --> 00:06:29,280
give him

176
00:06:29,280 --> 00:06:31,759
uh a witness which is in relation with

177
00:06:31,759 --> 00:06:34,560
the original statement

178
00:06:34,560 --> 00:06:36,319
so as you can see an adapter signature

179
00:06:36,319 --> 00:06:39,039
has four additional algorithms pre-sign

180
00:06:39,039 --> 00:06:43,440
pre-verify adapt and extract

181
00:06:46,319 --> 00:06:48,479
the high-level idea when designing an

182
00:06:48,479 --> 00:06:49,919
adapter signature scheme

183
00:06:49,919 --> 00:06:51,599
is to hide the sweetness in the

184
00:06:51,599 --> 00:06:53,520
randomness used for signing

185
00:06:53,520 --> 00:06:55,199
i will go into more details regarding

186
00:06:55,199 --> 00:06:56,560
this idea later

187
00:06:56,560 --> 00:06:58,639
but first i would like to give you the

188
00:06:58,639 --> 00:06:59,919
four properties

189
00:06:59,919 --> 00:07:02,000
that adapter signatures must satisfy in

190
00:07:02,000 --> 00:07:04,319
order for them to be called secure

191
00:07:04,319 --> 00:07:06,240
the four properties are correctness

192
00:07:06,240 --> 00:07:07,840
unforgeability pre-signature

193
00:07:07,840 --> 00:07:10,240
adaptability and weakness extractability

194
00:07:10,240 --> 00:07:13,039
let's start with correctness in correct

195
00:07:13,039 --> 00:07:16,080
as we have honest alice and bob who

196
00:07:16,080 --> 00:07:17,759
started executing the protocol honestly

197
00:07:17,759 --> 00:07:20,000
bob honestly generates a pre-signature

198
00:07:20,000 --> 00:07:21,680
in this case we expect the procedure to

199
00:07:21,680 --> 00:07:23,120
be valid

200
00:07:23,120 --> 00:07:24,720
then alice would of course adapt this

201
00:07:24,720 --> 00:07:26,800
pre-signature to a full signature

202
00:07:26,800 --> 00:07:28,960
and sensitive to the blockchain we again

203
00:07:28,960 --> 00:07:31,039
expect that the full signature

204
00:07:31,039 --> 00:07:33,759
generated in this case would be valid

205
00:07:33,759 --> 00:07:34,880
finally

206
00:07:34,880 --> 00:07:37,919
bob would be able to extract a witness

207
00:07:37,919 --> 00:07:39,520
for the statement originally provided by

208
00:07:39,520 --> 00:07:41,039
alice given the signature and

209
00:07:41,039 --> 00:07:42,000
pre-signature

210
00:07:42,000 --> 00:07:44,240
basically by correctness we just want

211
00:07:44,240 --> 00:07:45,440
everything to check out and the

212
00:07:45,440 --> 00:07:46,879
algorithm to behave

213
00:07:46,879 --> 00:07:50,639
as we expect a similar property

214
00:07:50,639 --> 00:07:54,319
but which is uh a little bit different

215
00:07:54,319 --> 00:07:56,479
is pre-signature adaptability

216
00:07:56,479 --> 00:07:58,160
pre-section of the ability is

217
00:07:58,160 --> 00:08:00,319
uh the situation where alice is honest

218
00:08:00,319 --> 00:08:03,440
but bob might be malicious

219
00:08:03,440 --> 00:08:05,120
alice sends a statement and message to

220
00:08:05,120 --> 00:08:07,280
bob bob generates a pre-signature but he

221
00:08:07,280 --> 00:08:08,879
may actually deviate from the

222
00:08:08,879 --> 00:08:10,840
algorithm which generates the

223
00:08:10,840 --> 00:08:12,560
pre-signature

224
00:08:12,560 --> 00:08:14,720
we want that if the pre-signature is

225
00:08:14,720 --> 00:08:17,039
valid and alice adapts it to a

226
00:08:17,039 --> 00:08:19,360
full signature the resulting full

227
00:08:19,360 --> 00:08:20,080
signature

228
00:08:20,080 --> 00:08:22,960
is valid so bob cannot cheat by

229
00:08:22,960 --> 00:08:24,960
generating a valid pre-signature

230
00:08:24,960 --> 00:08:27,840
which cannot be adapted to a valid full

231
00:08:27,840 --> 00:08:28,720
signature

232
00:08:28,720 --> 00:08:30,400
this is a guarantee for alice because

233
00:08:30,400 --> 00:08:33,120
alice wants to be sure that

234
00:08:33,120 --> 00:08:35,039
uh when getting a valid free security

235
00:08:35,039 --> 00:08:36,320
she would actually be able to use it to

236
00:08:36,320 --> 00:08:37,039
get a

237
00:08:37,039 --> 00:08:39,039
valid signature and send that signature

238
00:08:39,039 --> 00:08:41,120
to somewhere as as an evidence that bob

239
00:08:41,120 --> 00:08:43,919
signed the message

240
00:08:45,440 --> 00:08:48,320
okay let's continue to unforgeability

241
00:08:48,320 --> 00:08:50,560
unforgetability for adapter signatures

242
00:08:50,560 --> 00:08:53,279
is similar to unforgetability for normal

243
00:08:53,279 --> 00:08:55,040
signatures except the adversary has an

244
00:08:55,040 --> 00:08:56,800
additional capability

245
00:08:56,800 --> 00:09:00,880
the adversary can get pre-signatures

246
00:09:00,880 --> 00:09:04,800
on his challenge messages

247
00:09:04,800 --> 00:09:08,800
this means that the adversary

248
00:09:08,800 --> 00:09:12,160
should not be able to generate a valid

249
00:09:12,160 --> 00:09:13,360
signature

250
00:09:13,360 --> 00:09:16,000
on a message m even if he knows a

251
00:09:16,000 --> 00:09:18,959
pre-signature on the message f

252
00:09:18,959 --> 00:09:20,640
this is a guarantee for bob because bob

253
00:09:20,640 --> 00:09:22,560
wants to be sure that

254
00:09:22,560 --> 00:09:25,279
no malicious party who is listening to

255
00:09:25,279 --> 00:09:27,440
his communication with alice

256
00:09:27,440 --> 00:09:29,120
would be able to actually forge a

257
00:09:29,120 --> 00:09:32,240
signature on his behalf

258
00:09:33,920 --> 00:09:35,600
finally let's talk about witness

259
00:09:35,600 --> 00:09:37,200
extractability and with this

260
00:09:37,200 --> 00:09:38,080
extractability

261
00:09:38,080 --> 00:09:40,240
bob is honest and he's communicating

262
00:09:40,240 --> 00:09:42,720
with a malicious alice

263
00:09:42,720 --> 00:09:44,720
what pope wants as a guarantee is that

264
00:09:44,720 --> 00:09:47,519
if alice is able to generate

265
00:09:47,519 --> 00:09:51,040
a full signature a valid full signature

266
00:09:51,040 --> 00:09:51,519
uh

267
00:09:51,519 --> 00:09:54,959
by executing this protocol

268
00:09:55,519 --> 00:09:59,519
it should not hold that

269
00:09:59,519 --> 00:10:03,040
bob is unable to extract

270
00:10:03,040 --> 00:10:05,760
a witness for the original statement in

271
00:10:05,760 --> 00:10:07,440
other words

272
00:10:07,440 --> 00:10:10,000
alice should not be able to adapt the

273
00:10:10,000 --> 00:10:10,880
pre-signature

274
00:10:10,880 --> 00:10:15,120
in somewhat of a malicious way such that

275
00:10:15,120 --> 00:10:17,440
she would get a valid signature but bob

276
00:10:17,440 --> 00:10:20,640
is not able to extract the weakness

277
00:10:20,640 --> 00:10:22,800
okay at this point i will stop talking

278
00:10:22,800 --> 00:10:24,240
about our background regarding adapter

279
00:10:24,240 --> 00:10:24,880
signatures

280
00:10:24,880 --> 00:10:27,839
and we'll continue with our generic

281
00:10:27,839 --> 00:10:28,959
transformation

282
00:10:28,959 --> 00:10:33,839
in the single party case

283
00:10:35,040 --> 00:10:37,440
to give our to to present our generic

284
00:10:37,440 --> 00:10:39,440
transformation i would start with how

285
00:10:39,440 --> 00:10:42,079
schnoor adapter signatures work

286
00:10:42,079 --> 00:10:44,640
and then motivate how our transformation

287
00:10:44,640 --> 00:10:45,680
actually works

288
00:10:45,680 --> 00:10:48,000
so let's recall what schnorr is well for

289
00:10:48,000 --> 00:10:50,399
forshner we need a cyclic group of order

290
00:10:50,399 --> 00:10:52,640
prime order queue and a hash function we

291
00:10:52,640 --> 00:10:53,839
maps elements

292
00:10:53,839 --> 00:10:58,640
to zq the generation algorithm

293
00:10:58,640 --> 00:11:02,320
simply samples a random element from zq

294
00:11:02,320 --> 00:11:03,760
and the public key would be g to the

295
00:11:03,760 --> 00:11:05,760
power of x

296
00:11:05,760 --> 00:11:08,880
signing would inc would start by

297
00:11:08,880 --> 00:11:10,560
sampling a random element from z q and

298
00:11:10,560 --> 00:11:11,920
computing g to the power of r

299
00:11:11,920 --> 00:11:13,600
this would be the public randomness and

300
00:11:13,600 --> 00:11:16,399
r would be the private randomness

301
00:11:16,399 --> 00:11:18,320
then the signer computes the hash of g

302
00:11:18,320 --> 00:11:20,320
is the power of r concatenated with m

303
00:11:20,320 --> 00:11:23,200
and this uh s would be r plus h times x

304
00:11:23,200 --> 00:11:23,600
this

305
00:11:23,600 --> 00:11:25,279
the whole signature would be the hash

306
00:11:25,279 --> 00:11:27,279
value plus s

307
00:11:27,279 --> 00:11:30,560
verifying would involve extracting

308
00:11:30,560 --> 00:11:33,279
the public randomness using g to the

309
00:11:33,279 --> 00:11:33,839
power of s

310
00:11:33,839 --> 00:11:37,120
times p k to the power of minus h

311
00:11:37,120 --> 00:11:40,800
and seeing if hashing this r prime with

312
00:11:40,800 --> 00:11:42,959
m would result in the same hash value

313
00:11:42,959 --> 00:11:44,480
that the

314
00:11:44,480 --> 00:11:47,680
signature included i will not open this

315
00:11:47,680 --> 00:11:48,800
statement here but

316
00:11:48,800 --> 00:11:50,560
you can verify that if the signature is

317
00:11:50,560 --> 00:11:53,519
valid this would actually return

318
00:11:53,519 --> 00:11:56,800
g to the power of r now how can

319
00:11:56,800 --> 00:11:59,760
schnorr signatures signature scheme be

320
00:11:59,760 --> 00:12:01,760
transformed into an adapter signature

321
00:12:01,760 --> 00:12:05,120
well uh first let's let's say that the

322
00:12:05,120 --> 00:12:06,800
hard relation required for schnorr

323
00:12:06,800 --> 00:12:08,720
is a d-log relation so the statement

324
00:12:08,720 --> 00:12:10,240
would be g to the power of w

325
00:12:10,240 --> 00:12:13,600
and w would be an element from z q

326
00:12:13,600 --> 00:12:16,639
the pre-sig signing algorithm

327
00:12:16,639 --> 00:12:18,160
simply differs with the sign-in

328
00:12:18,160 --> 00:12:19,839
algorithm in how

329
00:12:19,839 --> 00:12:22,480
the hash value is computed basically

330
00:12:22,480 --> 00:12:23,680
instead of g to the power of

331
00:12:23,680 --> 00:12:27,040
r g to the power of w times e to the

332
00:12:27,040 --> 00:12:27,760
power of r

333
00:12:27,760 --> 00:12:30,240
is computed so we're shifting the public

334
00:12:30,240 --> 00:12:31,040
randomness

335
00:12:31,040 --> 00:12:34,720
with the offset w here verifying

336
00:12:34,720 --> 00:12:38,240
would also simply involved putting back

337
00:12:38,240 --> 00:12:42,560
this this offset when computing r

338
00:12:44,560 --> 00:12:46,720
now what's what would we get as a

339
00:12:46,720 --> 00:12:48,079
pre-signature upon running this

340
00:12:48,079 --> 00:12:48,880
algorithm

341
00:12:48,880 --> 00:12:52,320
well we would get r plus h of g to the

342
00:12:52,320 --> 00:12:53,120
power of w

343
00:12:53,120 --> 00:12:54,880
times u the power of r so as you can see

344
00:12:54,880 --> 00:12:56,800
the randomness used here

345
00:12:56,800 --> 00:12:59,120
and here do not match the same way that

346
00:12:59,120 --> 00:13:01,920
it matched here

347
00:13:01,920 --> 00:13:03,440
but you might already see how we can

348
00:13:03,440 --> 00:13:05,200
actually adapt this into a valid

349
00:13:05,200 --> 00:13:07,440
signature we simply have to add

350
00:13:07,440 --> 00:13:11,120
the witness to this pre-signature

351
00:13:11,120 --> 00:13:14,240
because now the randomness used here and

352
00:13:14,240 --> 00:13:15,680
in the hash function

353
00:13:15,680 --> 00:13:17,920
are exactly the same exactly the same

354
00:13:17,920 --> 00:13:18,959
meaning that

355
00:13:18,959 --> 00:13:22,560
this value is now in the exponent

356
00:13:23,440 --> 00:13:25,600
extracting would also only involve

357
00:13:25,600 --> 00:13:26,800
subtracting

358
00:13:26,800 --> 00:13:31,760
the pre-signature and the signature

359
00:13:31,920 --> 00:13:33,680
this brings me back to my high level

360
00:13:33,680 --> 00:13:35,440
idea which i explained

361
00:13:35,440 --> 00:13:38,639
originally the idea is to hide this

362
00:13:38,639 --> 00:13:39,279
witness

363
00:13:39,279 --> 00:13:41,199
in the public randomness used when

364
00:13:41,199 --> 00:13:43,680
generating the signature

365
00:13:43,680 --> 00:13:46,399
but but let's let's back up a little bit

366
00:13:46,399 --> 00:13:49,440
what is the schnorr signature scheme

367
00:13:49,440 --> 00:13:51,600
schnorr signatures are basically

368
00:13:51,600 --> 00:13:54,320
applying fiat xiaomi heuristic

369
00:13:54,320 --> 00:13:57,760
to schnoor identification scheme

370
00:13:57,920 --> 00:14:01,120
so if we do the translation to seek id

371
00:14:01,120 --> 00:14:03,199
they would get the following first

372
00:14:03,199 --> 00:14:04,800
generate the private and public

373
00:14:04,800 --> 00:14:05,519
randomness

374
00:14:05,519 --> 00:14:07,920
apply fiat sharing heuristic generate a

375
00:14:07,920 --> 00:14:09,839
signature

376
00:14:09,839 --> 00:14:11,839
and for the verification we simply need

377
00:14:11,839 --> 00:14:13,440
an algorithm that extracts a randomness

378
00:14:13,440 --> 00:14:14,399
but that is given

379
00:14:14,399 --> 00:14:17,440
in sig id schemes

380
00:14:17,440 --> 00:14:20,720
so it seems possible that cigar id

381
00:14:20,720 --> 00:14:23,120
schemes

382
00:14:23,519 --> 00:14:26,320
may be able to be transformed into

383
00:14:26,320 --> 00:14:31,120
adapter signatures

384
00:14:31,120 --> 00:14:32,480
let's see how such a transformation

385
00:14:32,480 --> 00:14:34,240
would look like

386
00:14:34,240 --> 00:14:36,000
well let's say we have a statement

387
00:14:36,000 --> 00:14:37,760
witness pair from a hard

388
00:14:37,760 --> 00:14:39,760
relation pre-signing would look as

389
00:14:39,760 --> 00:14:40,800
follows

390
00:14:40,800 --> 00:14:42,560
generate the randomness shift the

391
00:14:42,560 --> 00:14:44,639
randomness and continue

392
00:14:44,639 --> 00:14:47,040
as in sega id which means apply the

393
00:14:47,040 --> 00:14:48,639
feature heuristic generate the signature

394
00:14:48,639 --> 00:14:49,600
and output h

395
00:14:49,600 --> 00:14:53,839
and the precinct for verifying

396
00:14:53,839 --> 00:14:55,600
the the verification algorithm first

397
00:14:55,600 --> 00:14:57,519
extracts the randomness and then shifts

398
00:14:57,519 --> 00:14:59,440
it

399
00:14:59,440 --> 00:15:02,800
and checks if h is equal to the shifted

400
00:15:02,800 --> 00:15:05,920
randomness concatenated with m

401
00:15:05,920 --> 00:15:08,320
naturally we would need two additional

402
00:15:08,320 --> 00:15:09,440
algorithms

403
00:15:09,440 --> 00:15:11,040
adapt which would adapt the

404
00:15:11,040 --> 00:15:12,959
pre-signature into a full signature

405
00:15:12,959 --> 00:15:15,199
and extract witness which would extract

406
00:15:15,199 --> 00:15:16,880
the witness given a full signature

407
00:15:16,880 --> 00:15:20,320
and a pre-signature

408
00:15:20,480 --> 00:15:22,880
naturally we cannot expect that this

409
00:15:22,880 --> 00:15:24,320
transformation would work for

410
00:15:24,320 --> 00:15:26,959
any hard relation and any sig id scheme

411
00:15:26,959 --> 00:15:28,639
there must be some properties that these

412
00:15:28,639 --> 00:15:29,600
two

413
00:15:29,600 --> 00:15:31,440
that the signature schemes must satisfy

414
00:15:31,440 --> 00:15:34,800
with respect to the heart relation

415
00:15:36,399 --> 00:15:38,480
in more detail there are two properties

416
00:15:38,480 --> 00:15:40,160
that seek id schemes must satisfy

417
00:15:40,160 --> 00:15:42,800
for such a transformation to work the

418
00:15:42,800 --> 00:15:43,680
property one

419
00:15:43,680 --> 00:15:45,440
is as follows let's say we have a

420
00:15:45,440 --> 00:15:48,560
pre-signature we adapt it

421
00:15:48,560 --> 00:15:51,279
and then we extract the randomness from

422
00:15:51,279 --> 00:15:52,839
the adapted

423
00:15:52,839 --> 00:15:56,240
pre-signature we would get some random

424
00:15:56,240 --> 00:15:58,639
value

425
00:15:59,600 --> 00:16:02,720
on the other hand if we first extract

426
00:16:02,720 --> 00:16:06,160
the randomness from the pre-signature

427
00:16:06,160 --> 00:16:09,440
and then shift this randomness

428
00:16:09,440 --> 00:16:13,440
we expect to get the same random value

429
00:16:13,440 --> 00:16:16,639
so if we adapt first and then extract

430
00:16:16,639 --> 00:16:18,639
or if we extract first and then shift

431
00:16:18,639 --> 00:16:20,880
the randomness we should get the same

432
00:16:20,880 --> 00:16:23,519
public randomness this is for example

433
00:16:23,519 --> 00:16:26,240
necessary in order to prove

434
00:16:26,240 --> 00:16:27,759
pre-signature adaptability where you

435
00:16:27,759 --> 00:16:29,120
have a valid pre-signature and you want

436
00:16:29,120 --> 00:16:30,240
to make sure

437
00:16:30,240 --> 00:16:32,560
that if you adapt it you would get a

438
00:16:32,560 --> 00:16:33,920
valid final signature

439
00:16:33,920 --> 00:16:36,399
a valid full signature the second

440
00:16:36,399 --> 00:16:37,279
property is

441
00:16:37,279 --> 00:16:39,120
uh simpler than the first property it

442
00:16:39,120 --> 00:16:41,360
simply states that

443
00:16:41,360 --> 00:16:44,240
if you adapt a pre-signature and then

444
00:16:44,240 --> 00:16:45,600
extract

445
00:16:45,600 --> 00:16:48,880
uh the witness from this signature and

446
00:16:48,880 --> 00:16:50,240
pre-signature pair

447
00:16:50,240 --> 00:16:52,079
you would get the same weakness as it

448
00:16:52,079 --> 00:16:54,160
was used originally in order to adapt

449
00:16:54,160 --> 00:16:55,680
this is of course needed for for example

450
00:16:55,680 --> 00:16:58,880
proving extractability

451
00:16:59,279 --> 00:17:00,800
now at this point i will not go into

452
00:17:00,800 --> 00:17:06,720
more details regarding our single party

453
00:17:06,880 --> 00:17:08,559
transformer a single party

454
00:17:08,559 --> 00:17:10,640
transformation of sig id

455
00:17:10,640 --> 00:17:12,880
to adapter signatures and i would now

456
00:17:12,880 --> 00:17:14,640
summarize our contribution with respect

457
00:17:14,640 --> 00:17:15,359
to

458
00:17:15,359 --> 00:17:18,959
uh single party adapter signatures

459
00:17:18,959 --> 00:17:21,280
first i would like to point out that

460
00:17:21,280 --> 00:17:22,720
many signature schemes

461
00:17:22,720 --> 00:17:24,160
satisfy these two properties that i've

462
00:17:24,160 --> 00:17:26,000
mentioned before it is

463
00:17:26,000 --> 00:17:28,160
not only schnoor but for example caswang

464
00:17:28,160 --> 00:17:29,760
and julio quisquad

465
00:17:29,760 --> 00:17:31,840
so it was not a coincidence that that

466
00:17:31,840 --> 00:17:32,799
that

467
00:17:32,799 --> 00:17:34,720
schnorr could have been turned into

468
00:17:34,720 --> 00:17:36,160
another situation actually these other

469
00:17:36,160 --> 00:17:37,200
two

470
00:17:37,200 --> 00:17:38,640
schemes can also be transformed into

471
00:17:38,640 --> 00:17:41,440
adapter signatures

472
00:17:42,640 --> 00:17:45,520
second unique signatures such as bls

473
00:17:45,520 --> 00:17:46,960
cannot be transformed to adapter

474
00:17:46,960 --> 00:17:48,080
signatures

475
00:17:48,080 --> 00:17:51,200
because there is no randomness to

476
00:17:51,200 --> 00:17:53,440
actually play with in order to transform

477
00:17:53,440 --> 00:17:55,919
them into adapter signatures

478
00:17:55,919 --> 00:17:57,679
we actually proved this in our paper and

479
00:17:57,679 --> 00:17:59,600
if you're interested in the proofs

480
00:17:59,600 --> 00:18:04,080
please take a look at our full paper

481
00:18:04,160 --> 00:18:07,919
okay let me continue to go to the final

482
00:18:07,919 --> 00:18:09,360
part of this talk and talk about

483
00:18:09,360 --> 00:18:14,480
two-party adapter signatures so what we

484
00:18:14,480 --> 00:18:16,160
saw by now we saw that

485
00:18:16,160 --> 00:18:18,799
we can transform ciga id schemes into

486
00:18:18,799 --> 00:18:20,480
adapter signatures

487
00:18:20,480 --> 00:18:22,480
we i will now talk how to transform

488
00:18:22,480 --> 00:18:24,400
cigarette schemes into two-party

489
00:18:24,400 --> 00:18:26,960
signature schemes and how we can

490
00:18:26,960 --> 00:18:28,799
transform two-party signature schemes

491
00:18:28,799 --> 00:18:31,840
into two-party adapter signature schemes

492
00:18:31,840 --> 00:18:34,400
i will not go into too much detail on

493
00:18:34,400 --> 00:18:36,000
how these transformations work i will

494
00:18:36,000 --> 00:18:37,200
give a high-level

495
00:18:37,200 --> 00:18:39,200
overview regarding them if you're

496
00:18:39,200 --> 00:18:41,200
interested you can check our full paper

497
00:18:41,200 --> 00:18:44,320
for more explanation

498
00:18:47,520 --> 00:18:49,440
first let me motivate why we need two

499
00:18:49,440 --> 00:18:51,200
party signatures

500
00:18:51,200 --> 00:18:53,679
and adapter signatures there are some

501
00:18:53,679 --> 00:18:54,880
applications

502
00:18:54,880 --> 00:18:58,000
which require signatures from

503
00:18:58,000 --> 00:19:02,000
both parties however

504
00:19:02,000 --> 00:19:04,720
we would like to have a single signature

505
00:19:04,720 --> 00:19:06,400
instead of two signatures so we don't

506
00:19:06,400 --> 00:19:07,280
want to get

507
00:19:07,280 --> 00:19:09,360
one signature from alice one signature

508
00:19:09,360 --> 00:19:10,960
from bob and concatenate them

509
00:19:10,960 --> 00:19:13,039
we want to have a single signature on

510
00:19:13,039 --> 00:19:16,400
behalf of both parties

511
00:19:17,039 --> 00:19:20,720
on the other hand we do not wish to run

512
00:19:20,720 --> 00:19:25,440
a distributed key generation protocol

513
00:19:25,440 --> 00:19:28,320
because some some some applications

514
00:19:28,320 --> 00:19:30,400
would require alice and bob to generate

515
00:19:30,400 --> 00:19:31,679
such signatures

516
00:19:31,679 --> 00:19:34,799
uh time and time and time and again and

517
00:19:34,799 --> 00:19:36,320
if you have to run a distributed key

518
00:19:36,320 --> 00:19:38,320
generation algorithm for every execution

519
00:19:38,320 --> 00:19:39,360
of the protocol

520
00:19:39,360 --> 00:19:42,799
this would be quite inefficient

521
00:19:43,200 --> 00:19:45,200
so what we want to have is that alice

522
00:19:45,200 --> 00:19:47,039
would run her

523
00:19:47,039 --> 00:19:50,400
key generation algorithm

524
00:19:50,480 --> 00:19:52,160
separately and bob would do that also

525
00:19:52,160 --> 00:19:54,320
separately so they have

526
00:19:54,320 --> 00:19:57,120
functioning secret and public key pairs

527
00:19:57,120 --> 00:19:59,039
but

528
00:19:59,039 --> 00:20:02,320
they would be able to generate

529
00:20:02,320 --> 00:20:05,679
a single signature after running a

530
00:20:05,679 --> 00:20:06,480
protocol

531
00:20:06,480 --> 00:20:08,480
which is valid under the aggregated

532
00:20:08,480 --> 00:20:09,679
public keys

533
00:20:09,679 --> 00:20:11,760
so the solution to what we want

534
00:20:11,760 --> 00:20:12,960
basically

535
00:20:12,960 --> 00:20:15,679
a mechanism which alice and bob can use

536
00:20:15,679 --> 00:20:17,760
in order to generate a single signature

537
00:20:17,760 --> 00:20:19,440
without using a distributed key

538
00:20:19,440 --> 00:20:21,679
generation is two party signature

539
00:20:21,679 --> 00:20:25,440
schemes with aggregateable public keys

540
00:20:26,880 --> 00:20:30,320
now let me show how we can transform

541
00:20:30,320 --> 00:20:32,840
cigar id schemes into two-party

542
00:20:32,840 --> 00:20:35,520
signatures

543
00:20:35,520 --> 00:20:38,000
with aggregateable public keys first

544
00:20:38,000 --> 00:20:39,840
alice and bob need to need to exchange

545
00:20:39,840 --> 00:20:40,240
some

546
00:20:40,240 --> 00:20:43,200
some randomness this is a very

547
00:20:43,200 --> 00:20:45,600
traditional random exchange protocol

548
00:20:45,600 --> 00:20:47,120
where one party commits to their

549
00:20:47,120 --> 00:20:48,880
randomness the other party then uh

550
00:20:48,880 --> 00:20:49,360
submits

551
00:20:49,360 --> 00:20:50,720
genres and and they can open the

552
00:20:50,720 --> 00:20:52,960
commitment eventually what they get

553
00:20:52,960 --> 00:20:54,799
uh after running this protocol is alice

554
00:20:54,799 --> 00:20:56,559
would get her private randomness and two

555
00:20:56,559 --> 00:20:57,840
public random values

556
00:20:57,840 --> 00:20:59,200
and bob would also get his private

557
00:20:59,200 --> 00:21:02,000
randomness and two public random values

558
00:21:02,000 --> 00:21:04,159
then both party would generate a

559
00:21:04,159 --> 00:21:05,039
signature

560
00:21:05,039 --> 00:21:08,159
how does this actually work well first

561
00:21:08,159 --> 00:21:10,000
the two public random values must be

562
00:21:10,000 --> 00:21:11,200
combined

563
00:21:11,200 --> 00:21:13,600
then the future heuristic must be

564
00:21:13,600 --> 00:21:14,960
applied and then the

565
00:21:14,960 --> 00:21:16,240
signature can be generated as we

566
00:21:16,240 --> 00:21:18,000
discussed previously bob also does the

567
00:21:18,000 --> 00:21:18,880
same

568
00:21:18,880 --> 00:21:22,320
uh but he uses his secret key alice uses

569
00:21:22,320 --> 00:21:24,320
her secret key

570
00:21:24,320 --> 00:21:27,520
by this point alice

571
00:21:27,520 --> 00:21:29,760
and bob both have the same hash value

572
00:21:29,760 --> 00:21:31,360
but they have different

573
00:21:31,360 --> 00:21:34,480
sis they now exchange their sis

574
00:21:34,480 --> 00:21:37,120
and they would combine these two

575
00:21:37,120 --> 00:21:38,640
signature shares that they had

576
00:21:38,640 --> 00:21:41,520
and they would eventually get one full

577
00:21:41,520 --> 00:21:42,240
signature

578
00:21:42,240 --> 00:21:44,080
which is valid under the aggregated

579
00:21:44,080 --> 00:21:46,639
public key

580
00:21:49,039 --> 00:21:51,919
now the question is how can this

581
00:21:51,919 --> 00:21:53,520
transformation this this two-party

582
00:21:53,520 --> 00:21:54,320
adapter

583
00:21:54,320 --> 00:21:56,000
this two-party signature scheme be

584
00:21:56,000 --> 00:21:57,760
transformed into a two-party adapter

585
00:21:57,760 --> 00:21:59,280
signature scheme

586
00:21:59,280 --> 00:22:01,600
well the only thing that we need to

587
00:22:01,600 --> 00:22:02,480
change

588
00:22:02,480 --> 00:22:04,799
is to shift the randomness first before

589
00:22:04,799 --> 00:22:06,559
applying the fiat heuristic

590
00:22:06,559 --> 00:22:10,320
and that's it okay

591
00:22:10,320 --> 00:22:12,720
i will not go into more details

592
00:22:12,720 --> 00:22:13,919
regarding

593
00:22:13,919 --> 00:22:17,120
uh two-party signatures and two-party

594
00:22:17,120 --> 00:22:18,240
adapter signatures from

595
00:22:18,240 --> 00:22:21,280
uh sig id if you're interested please

596
00:22:21,280 --> 00:22:22,640
take a look at our

597
00:22:22,640 --> 00:22:26,640
full paper um

598
00:22:26,640 --> 00:22:30,960
let me conclude the talk uh talk now

599
00:22:30,960 --> 00:22:33,760
we actually analyzed which signature

600
00:22:33,760 --> 00:22:35,919
schemes can be transformed into adapter

601
00:22:35,919 --> 00:22:37,679
signatures

602
00:22:37,679 --> 00:22:39,440
and we provided the generic

603
00:22:39,440 --> 00:22:41,039
transformation from

604
00:22:41,039 --> 00:22:44,640
sig id schemes to adapter signatures

605
00:22:44,640 --> 00:22:47,200
furthermore we for the first time

606
00:22:47,200 --> 00:22:48,960
formally defined what two-party adapter

607
00:22:48,960 --> 00:22:50,320
signatures are

608
00:22:50,320 --> 00:22:52,880
and provided the generic transformation

609
00:22:52,880 --> 00:22:53,520
from

610
00:22:53,520 --> 00:22:55,600
sig id to two-party signatures and

611
00:22:55,600 --> 00:22:58,320
two-party adapter signatures

612
00:22:58,320 --> 00:22:59,919
now the area of adapter signatures have

613
00:22:59,919 --> 00:23:01,600
gained a lot of attraction

614
00:23:01,600 --> 00:23:03,919
in the past few years especially in the

615
00:23:03,919 --> 00:23:06,000
blockchain area

616
00:23:06,000 --> 00:23:07,679
so there are there are there are many

617
00:23:07,679 --> 00:23:10,000
things that can be uh analyzed

618
00:23:10,000 --> 00:23:14,720
uh here i would mention two future works

619
00:23:14,720 --> 00:23:17,760
one would be to analyze other uh

620
00:23:17,760 --> 00:23:20,480
classes of uh signatures and see if they

621
00:23:20,480 --> 00:23:22,080
can be transformed into

622
00:23:22,080 --> 00:23:25,120
adapter signatures for example we can

623
00:23:25,120 --> 00:23:26,159
think about

624
00:23:26,159 --> 00:23:28,640
transforming signatures in the standard

625
00:23:28,640 --> 00:23:29,679
assumption

626
00:23:29,679 --> 00:23:31,520
uh in the standard model from from

627
00:23:31,520 --> 00:23:32,720
different assumptions

628
00:23:32,720 --> 00:23:35,360
and by standard model i mean that we are

629
00:23:35,360 --> 00:23:36,000
not in the

630
00:23:36,000 --> 00:23:39,039
random oracle model

631
00:23:41,679 --> 00:23:44,880
second the

632
00:23:44,880 --> 00:23:46,720
main applications of adapter signatures

633
00:23:46,720 --> 00:23:48,080
by now have been

634
00:23:48,080 --> 00:23:50,960
in the blockchain area it would be quite

635
00:23:50,960 --> 00:23:53,039
interesting to see if this primitive

636
00:23:53,039 --> 00:23:57,360
can actually be used in other areas

637
00:23:57,360 --> 00:24:00,000
uh similar to the way that it was used

638
00:24:00,000 --> 00:24:00,400
uh

639
00:24:00,400 --> 00:24:03,200
in in the blockchain area to solve some

640
00:24:03,200 --> 00:24:04,640
some

641
00:24:04,640 --> 00:24:07,600
different problems

642
00:24:08,400 --> 00:24:10,799
with this i would like to thank you all

643
00:24:10,799 --> 00:24:11,919
for your attention

644
00:24:11,919 --> 00:24:13,840
and if you have any questions please

645
00:24:13,840 --> 00:24:15,840
feel free to contact me

646
00:24:15,840 --> 00:24:18,880
any of the co-authors or use the

647
00:24:18,880 --> 00:24:21,440
live session to ask your questions thank

648
00:24:21,440 --> 00:24:25,919
you very much

