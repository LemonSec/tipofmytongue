1
00:00:00,640 --> 00:00:02,000
and you're ready to go have a good

2
00:00:02,000 --> 00:00:03,520
session

3
00:00:03,520 --> 00:00:06,560
yeah thank you uh hi everyone

4
00:00:06,560 --> 00:00:09,120
uh welcome to the last session of pkc

5
00:00:09,120 --> 00:00:10,880
2021

6
00:00:10,880 --> 00:00:13,840
and my name is eden and we are a

7
00:00:13,840 --> 00:00:15,360
coaching researcher with

8
00:00:15,360 --> 00:00:18,640
mkhitaryan champion and the

9
00:00:18,640 --> 00:00:21,680
i think this is a session consists of

10
00:00:21,680 --> 00:00:24,320
four talks on the launch proof and the

11
00:00:24,320 --> 00:00:24,720
first

12
00:00:24,720 --> 00:00:28,720
talk is on publicly account brazilian

13
00:00:28,720 --> 00:00:30,800
small sharp argument

14
00:00:30,800 --> 00:00:34,640
by leos fleischheck and

15
00:00:34,640 --> 00:00:38,320
mark simking and the speakers it is

16
00:00:38,320 --> 00:00:41,040
yes please

17
00:00:43,040 --> 00:00:47,440
yes i sure should i start yeah um

18
00:00:47,440 --> 00:00:51,280
let me share my screen

19
00:00:55,680 --> 00:00:59,520
okay so i'm talking about uh publicly

20
00:00:59,520 --> 00:01:00,320
accountable

21
00:01:00,320 --> 00:01:02,879
uh zero knowledge um and small shuffle

22
00:01:02,879 --> 00:01:04,400
arguments um

23
00:01:04,400 --> 00:01:06,479
and i'm niels flash and this is uh joint

24
00:01:06,479 --> 00:01:08,880
work with mark zimkin

25
00:01:08,880 --> 00:01:10,640
so we're talking about shuffle arguments

26
00:01:10,640 --> 00:01:12,240
so what is a shuffle argument if you

27
00:01:12,240 --> 00:01:13,920
consider that you have a list or a

28
00:01:13,920 --> 00:01:14,880
vector of

29
00:01:14,880 --> 00:01:16,640
commitments and these commitments are

30
00:01:16,640 --> 00:01:18,320
re-randomizable

31
00:01:18,320 --> 00:01:20,400
then we can re-randomize those all of

32
00:01:20,400 --> 00:01:21,759
those commitments and then

33
00:01:21,759 --> 00:01:24,880
permute them randomly and this results

34
00:01:24,880 --> 00:01:25,520
in a

35
00:01:25,520 --> 00:01:28,479
vector v prime and we can also write

36
00:01:28,479 --> 00:01:30,320
this as some procedure that basically

37
00:01:30,320 --> 00:01:32,079
does the shuffling

38
00:01:32,079 --> 00:01:36,799
given randomness r and a permutation p

39
00:01:36,799 --> 00:01:39,600
and the basic idea is that we can get a

40
00:01:39,600 --> 00:01:41,680
super simple shuffle argument

41
00:01:41,680 --> 00:01:43,439
which is basically an argument that

42
00:01:43,439 --> 00:01:45,119
indeed this b

43
00:01:45,119 --> 00:01:48,560
prime is a shuffling of v by just

44
00:01:48,560 --> 00:01:49,520
splitting up

45
00:01:49,520 --> 00:01:52,399
the original shuffle into two shuffles

46
00:01:52,399 --> 00:01:53,119
such that

47
00:01:53,119 --> 00:01:55,360
after applying both shuffles you end up

48
00:01:55,360 --> 00:01:56,719
at the same

49
00:01:56,719 --> 00:02:00,000
v prime and

50
00:02:00,000 --> 00:02:01,840
if we do that then we can get a super

51
00:02:01,840 --> 00:02:03,280
simple um

52
00:02:03,280 --> 00:02:05,759
sigma protocol basically where in the

53
00:02:05,759 --> 00:02:06,479
first round

54
00:02:06,479 --> 00:02:08,080
the prover will just send this

55
00:02:08,080 --> 00:02:10,399
intermediate vector

56
00:02:10,399 --> 00:02:12,720
the verifier will request that one of

57
00:02:12,720 --> 00:02:14,640
the two shuffles is opened

58
00:02:14,640 --> 00:02:18,080
and once one of those shuffles is opened

59
00:02:18,080 --> 00:02:20,000
the verifier can basically recompute

60
00:02:20,000 --> 00:02:22,239
this intermediate vector either from

61
00:02:22,239 --> 00:02:24,640
the front or from the back this assumes

62
00:02:24,640 --> 00:02:26,160
that the commitment scheme has some

63
00:02:26,160 --> 00:02:26,959
special

64
00:02:26,959 --> 00:02:29,840
properties for re-randomization but most

65
00:02:29,840 --> 00:02:30,800
commitment schemes

66
00:02:30,800 --> 00:02:33,599
that are re-randomized will have those

67
00:02:33,599 --> 00:02:35,200
and if you can do that

68
00:02:35,200 --> 00:02:37,440
then this is a very nice shuffle

69
00:02:37,440 --> 00:02:38,400
argument and you can

70
00:02:38,400 --> 00:02:39,920
make the shuffle argument a bit better

71
00:02:39,920 --> 00:02:42,080
by lowering the

72
00:02:42,080 --> 00:02:43,760
soundness error from one half to one

73
00:02:43,760 --> 00:02:46,239
over t by splitting up the shuffle not

74
00:02:46,239 --> 00:02:47,840
into two shuffles but into t

75
00:02:47,840 --> 00:02:50,640
shuffles okay and this is a very nice

76
00:02:50,640 --> 00:02:51,519
shuffle argument

77
00:02:51,519 --> 00:02:54,400
this is fully zero knowledge this is a

78
00:02:54,400 --> 00:02:55,040
sound

79
00:02:55,040 --> 00:02:56,560
it's actually a proof not just an

80
00:02:56,560 --> 00:02:58,879
argument however it has an issue

81
00:02:58,879 --> 00:03:01,360
that um the first round message and the

82
00:03:01,360 --> 00:03:03,920
third message both proven messages

83
00:03:03,920 --> 00:03:06,319
are very large they scale with the

84
00:03:06,319 --> 00:03:08,400
length of the vector that we have as an

85
00:03:08,400 --> 00:03:09,519
input

86
00:03:09,519 --> 00:03:11,599
and generally we want our shuffle

87
00:03:11,599 --> 00:03:13,360
arguments to be short

88
00:03:13,360 --> 00:03:16,159
in ideally independent of the size of

89
00:03:16,159 --> 00:03:18,239
the vector if we are shuffling

90
00:03:18,239 --> 00:03:20,239
now for the first method this is easily

91
00:03:20,239 --> 00:03:22,159
achieved we can just hash all of those

92
00:03:22,159 --> 00:03:25,599
intermediate vectors and now this

93
00:03:25,599 --> 00:03:27,360
protocol is only an argument and not a

94
00:03:27,360 --> 00:03:28,720
proof anymore but

95
00:03:28,720 --> 00:03:32,560
generally we're fine with that but

96
00:03:32,560 --> 00:03:35,680
the last message is a bigger problem

97
00:03:35,680 --> 00:03:38,000
because um this is basically the

98
00:03:38,000 --> 00:03:40,080
randomness and the permutation and this

99
00:03:40,080 --> 00:03:43,360
inherently means that this must be

100
00:03:43,360 --> 00:03:45,599
as large as the length of the vector

101
00:03:45,599 --> 00:03:47,040
we're shuffling

102
00:03:47,040 --> 00:03:49,280
so the question is given this protocol

103
00:03:49,280 --> 00:03:50,239
how could we

104
00:03:50,239 --> 00:03:53,920
possibly compress those values

105
00:03:53,920 --> 00:03:57,040
and we can imagine that basically what

106
00:03:57,040 --> 00:03:58,080
these values are

107
00:03:58,080 --> 00:04:00,080
just randomness for the re-randomization

108
00:04:00,080 --> 00:04:01,840
of a commitment scheme and a random

109
00:04:01,840 --> 00:04:03,519
permutation so basically these are just

110
00:04:03,519 --> 00:04:05,040
random values

111
00:04:05,040 --> 00:04:06,640
so why don't we replace them with

112
00:04:06,640 --> 00:04:08,799
pseudorandom values so

113
00:04:08,799 --> 00:04:10,879
we just replace those with the output of

114
00:04:10,879 --> 00:04:12,239
a pog

115
00:04:12,239 --> 00:04:14,159
and now only we only need to send the

116
00:04:14,159 --> 00:04:15,840
seeds for the prg

117
00:04:15,840 --> 00:04:17,759
which can be independent of the length

118
00:04:17,759 --> 00:04:19,839
of the vector

119
00:04:19,839 --> 00:04:21,519
and even better we could replace the

120
00:04:21,519 --> 00:04:22,960
output of the prg

121
00:04:22,960 --> 00:04:26,000
with the output of a punctual prf now if

122
00:04:26,000 --> 00:04:26,880
we do that

123
00:04:26,880 --> 00:04:28,560
that means that if we only need to send

124
00:04:28,560 --> 00:04:30,400
the punctured key

125
00:04:30,400 --> 00:04:32,880
and that means if we for example

126
00:04:32,880 --> 00:04:35,040
instantiate this with a ggm

127
00:04:35,040 --> 00:04:38,160
then the completely the communication

128
00:04:38,160 --> 00:04:39,919
cost of this complete protocol

129
00:04:39,919 --> 00:04:42,479
only scales logarithmically in t and is

130
00:04:42,479 --> 00:04:44,080
independent of the length of the vector

131
00:04:44,080 --> 00:04:45,759
b

132
00:04:45,759 --> 00:04:48,639
but there is an issue with this because

133
00:04:48,639 --> 00:04:49,360
if we have

134
00:04:49,360 --> 00:04:53,040
some arbitrary vectors v and v prime

135
00:04:53,040 --> 00:04:55,120
then the probability that it will be

136
00:04:55,120 --> 00:04:56,400
possible

137
00:04:56,400 --> 00:04:59,120
to actually split up the shuffle into t

138
00:04:59,120 --> 00:04:59,600
such

139
00:04:59,600 --> 00:05:01,600
pseudo-random shuffles is actually

140
00:05:01,600 --> 00:05:04,720
negligible you generally can't do that

141
00:05:04,720 --> 00:05:06,880
um but because this is so nice we

142
00:05:06,880 --> 00:05:07,919
figured out that

143
00:05:07,919 --> 00:05:09,680
well usually you don't actually have to

144
00:05:09,680 --> 00:05:13,039
prove an arbitrary shuffle

145
00:05:13,039 --> 00:05:16,240
in most applications of a shuffle

146
00:05:16,240 --> 00:05:17,759
argument what you have is that

147
00:05:17,759 --> 00:05:20,160
you shuffle something at random or

148
00:05:20,160 --> 00:05:21,759
pseudo-randomly

149
00:05:21,759 --> 00:05:23,360
and then you want to prove that what i

150
00:05:23,360 --> 00:05:24,960
shuffled at random

151
00:05:24,960 --> 00:05:27,039
is actually a shuffling of the original

152
00:05:27,039 --> 00:05:28,400
list

153
00:05:28,400 --> 00:05:31,440
and so we can read we can define a new

154
00:05:31,440 --> 00:05:34,479
notion of arguments which we call

155
00:05:34,479 --> 00:05:36,560
arguments for partially fixed statements

156
00:05:36,560 --> 00:05:38,400
where basically the approver is split

157
00:05:38,400 --> 00:05:39,280
into two

158
00:05:39,280 --> 00:05:41,280
in the first phase the approver only

159
00:05:41,280 --> 00:05:42,960
gets the initial list of

160
00:05:42,960 --> 00:05:45,840
commitments and then the approver gets

161
00:05:45,840 --> 00:05:47,919
to choose the final list of commitments

162
00:05:47,919 --> 00:05:48,160
v

163
00:05:48,160 --> 00:05:50,560
prime together with some auxiliary

164
00:05:50,560 --> 00:05:51,840
information which in this case will

165
00:05:51,840 --> 00:05:53,840
basically just be this punctuable prf

166
00:05:53,840 --> 00:05:55,039
key

167
00:05:55,039 --> 00:05:57,919
and after that you run the protocol with

168
00:05:57,919 --> 00:05:58,800
the verifier

169
00:05:58,800 --> 00:06:00,720
where the approver shows proves to the

170
00:06:00,720 --> 00:06:02,560
verifier that indeed

171
00:06:02,560 --> 00:06:07,840
this v prime is a shuffling of v

172
00:06:08,000 --> 00:06:11,280
and with this new definition basically

173
00:06:11,280 --> 00:06:13,360
our construction works

174
00:06:13,360 --> 00:06:15,680
and we can get a very nice shuffle

175
00:06:15,680 --> 00:06:16,479
argument

176
00:06:16,479 --> 00:06:18,400
however i at this point i have to

177
00:06:18,400 --> 00:06:20,080
address the elephant in the room which

178
00:06:20,080 --> 00:06:21,120
is

179
00:06:21,120 --> 00:06:24,479
with this definition we no longer can do

180
00:06:24,479 --> 00:06:26,479
sequential repetition because if we

181
00:06:26,479 --> 00:06:28,560
sequentially repeat the protocol the

182
00:06:28,560 --> 00:06:30,479
approval will choose a new statement

183
00:06:30,479 --> 00:06:31,520
every time

184
00:06:31,520 --> 00:06:34,639
the proof is redone which means that we

185
00:06:34,639 --> 00:06:35,759
cannot reduce

186
00:06:35,759 --> 00:06:38,240
the soundness error through sequential

187
00:06:38,240 --> 00:06:39,680
repetition

188
00:06:39,680 --> 00:06:42,560
and this means that our protocol has a

189
00:06:42,560 --> 00:06:43,840
constant soundness error

190
00:06:43,840 --> 00:06:47,039
which is a problem in probably most

191
00:06:47,039 --> 00:06:48,560
applications

192
00:06:48,560 --> 00:06:50,160
and we can't really change anything

193
00:06:50,160 --> 00:06:52,400
about that this sounds error is

194
00:06:52,400 --> 00:06:55,759
inherent however we can somewhat

195
00:06:55,759 --> 00:06:57,599
mitigate the problems that a constant

196
00:06:57,599 --> 00:06:57,919
sound

197
00:06:57,919 --> 00:06:59,919
error causes and this is where we

198
00:06:59,919 --> 00:07:00,960
introduce

199
00:07:00,960 --> 00:07:03,039
public accountability for zero knowledge

200
00:07:03,039 --> 00:07:04,479
arguments

201
00:07:04,479 --> 00:07:08,319
public accountability means yes

202
00:07:08,319 --> 00:07:12,240
so in one minute we should conclude

203
00:07:12,240 --> 00:07:15,440
yes i'm basically done the public

204
00:07:15,440 --> 00:07:16,080
accountability

205
00:07:16,080 --> 00:07:18,000
means that the verifier can basically

206
00:07:18,000 --> 00:07:19,360
prove to a judge

207
00:07:19,360 --> 00:07:22,000
when the approver cheated but he cannot

208
00:07:22,000 --> 00:07:22,880
prove it

209
00:07:22,880 --> 00:07:25,919
if the approval was honest and

210
00:07:25,919 --> 00:07:28,000
with this basically we get a shuffle

211
00:07:28,000 --> 00:07:29,440
argument

212
00:07:29,440 --> 00:07:32,319
that where the communication size is

213
00:07:32,319 --> 00:07:34,240
comparable to that of the snark

214
00:07:34,240 --> 00:07:36,800
from much better assumptions albeit with

215
00:07:36,800 --> 00:07:38,400
a constant soundness error which we can

216
00:07:38,400 --> 00:07:40,720
mitigate somewhat with accountability

217
00:07:40,720 --> 00:07:45,680
and interaction thank you

218
00:07:45,680 --> 00:07:49,120
okay any questions

219
00:07:54,160 --> 00:07:57,759
so here i just have a question to you i

220
00:07:57,759 --> 00:07:59,520
lord said that you choose a t

221
00:07:59,520 --> 00:08:00,800
permutations

222
00:08:00,800 --> 00:08:04,160
and then do t times j office right

223
00:08:04,160 --> 00:08:06,879
and i just want to in practice how large

224
00:08:06,879 --> 00:08:07,440
t

225
00:08:07,440 --> 00:08:11,199
should be so the thing is that the

226
00:08:11,199 --> 00:08:14,400
um the computation uh

227
00:08:14,400 --> 00:08:17,120
scaled linearly with t so you have to

228
00:08:17,120 --> 00:08:19,199
keep that in mind

229
00:08:19,199 --> 00:08:22,000
um because basically what the prover

230
00:08:22,000 --> 00:08:23,360
needs to do is he needs to actually

231
00:08:23,360 --> 00:08:25,680
compute all of those shuffles

232
00:08:25,680 --> 00:08:30,080
so you should not choose t too large um

233
00:08:30,080 --> 00:08:33,279
yes but i mean choosing

234
00:08:33,279 --> 00:08:37,120
t say as

235
00:08:38,559 --> 00:08:41,839
100 or something would be fine um which

236
00:08:41,839 --> 00:08:43,679
basically mean that you get a soundness

237
00:08:43,679 --> 00:08:45,519
error of uh one over

238
00:08:45,519 --> 00:08:49,040
um 100.

239
00:08:49,120 --> 00:08:51,440
okay um but if it depends on the

240
00:08:51,440 --> 00:08:52,800
application basically what kind of

241
00:08:52,800 --> 00:08:54,399
sounds error you can live with

242
00:08:54,399 --> 00:08:56,320
because it it will always be a constant

243
00:08:56,320 --> 00:08:58,399
sound to zero

244
00:08:58,399 --> 00:09:03,600
okay any other questions

245
00:09:04,880 --> 00:09:08,240
so you flow other questions let's just

246
00:09:08,240 --> 00:09:13,440
proceed to let's talk mechanic please

247
00:09:13,440 --> 00:09:18,080
yep so the next stop

248
00:09:18,080 --> 00:09:21,920
uh is on single to multi

249
00:09:21,920 --> 00:09:24,080
theorem transformations for an

250
00:09:24,080 --> 00:09:26,800
interactive statistical zero knowledge

251
00:09:26,800 --> 00:09:30,080
this is a work um of mark fishley

252
00:09:30,080 --> 00:09:33,279
and felix rochberg and

253
00:09:33,279 --> 00:09:36,000
felix will give the talk so felix if

254
00:09:36,000 --> 00:09:36,640
you're ready

255
00:09:36,640 --> 00:09:40,080
and the floor is yours yeah

256
00:09:40,080 --> 00:09:43,519
um thank you for the introduction um i'm

257
00:09:43,519 --> 00:09:45,040
presenting single to multitherium

258
00:09:45,040 --> 00:09:46,959
transformations for non-technological

259
00:09:46,959 --> 00:09:48,160
zero knowledge and this

260
00:09:48,160 --> 00:09:52,480
is joint work with mark fishling first

261
00:09:52,480 --> 00:09:55,279
let me remind you what a non-intact as

262
00:09:55,279 --> 00:09:56,880
your knowledge argument is

263
00:09:56,880 --> 00:09:59,040
so it consists of approver and the

264
00:09:59,040 --> 00:10:00,240
verifier

265
00:10:00,240 --> 00:10:02,240
and the prover wants to convince the

266
00:10:02,240 --> 00:10:04,640
verifier that a statement x

267
00:10:04,640 --> 00:10:08,160
is indeed in the language l

268
00:10:09,200 --> 00:10:10,720
because this is non-interactive the

269
00:10:10,720 --> 00:10:12,880
prover may only send one message to the

270
00:10:12,880 --> 00:10:13,839
verifier

271
00:10:13,839 --> 00:10:15,920
however both parties have access to a

272
00:10:15,920 --> 00:10:17,200
common random string

273
00:10:17,200 --> 00:10:19,120
which must not be influenced by either

274
00:10:19,120 --> 00:10:21,600
party

275
00:10:21,760 --> 00:10:23,120
there are two non-interactive

276
00:10:23,120 --> 00:10:24,880
theological variants

277
00:10:24,880 --> 00:10:27,519
first non-tech to zero-knowledge proofs

278
00:10:27,519 --> 00:10:29,040
where soundness holds against

279
00:10:29,040 --> 00:10:31,360
unbounded malicious provers however geo

280
00:10:31,360 --> 00:10:33,680
knowledge is only computational

281
00:10:33,680 --> 00:10:35,200
and non-interactive statistical

282
00:10:35,200 --> 00:10:37,120
zero-knowledge arguments

283
00:10:37,120 --> 00:10:39,760
where this soundness only holds against

284
00:10:39,760 --> 00:10:41,200
bounded brewers but

285
00:10:41,200 --> 00:10:43,600
statistical we have statistical zero

286
00:10:43,600 --> 00:10:45,279
knowledge we will concentrate on the

287
00:10:45,279 --> 00:10:47,600
second one

288
00:10:47,600 --> 00:10:50,160
further our common random string can be

289
00:10:50,160 --> 00:10:50,720
either

290
00:10:50,720 --> 00:10:53,440
uniformly random or according to some

291
00:10:53,440 --> 00:10:55,440
distribution in which case we call it a

292
00:10:55,440 --> 00:10:57,120
common reference string

293
00:10:57,120 --> 00:11:00,320
accurately it's harder to generate

294
00:11:00,320 --> 00:11:02,959
a common reference string which is not

295
00:11:02,959 --> 00:11:04,560
influenced by either party

296
00:11:04,560 --> 00:11:09,279
so we concentrate here on the first one

297
00:11:09,279 --> 00:11:11,920
unfortunately many constructions can't

298
00:11:11,920 --> 00:11:13,040
reuse

299
00:11:13,040 --> 00:11:15,200
the common random string are only for

300
00:11:15,200 --> 00:11:17,360
fixed polynomial number of times we call

301
00:11:17,360 --> 00:11:17,760
these

302
00:11:17,760 --> 00:11:21,440
single theorem in contrast multitheorem

303
00:11:21,440 --> 00:11:23,839
arguments can reuse the common random

304
00:11:23,839 --> 00:11:26,839
string for any polynomial number of

305
00:11:26,839 --> 00:11:29,920
arguments our contributions are twofold

306
00:11:29,920 --> 00:11:31,600
first we give a more fine-grained

307
00:11:31,600 --> 00:11:33,200
analysis of soundness for

308
00:11:33,200 --> 00:11:34,480
non-interactive statistical

309
00:11:34,480 --> 00:11:36,480
zero-knowledge arguments

310
00:11:36,480 --> 00:11:39,200
and second we give two transformations

311
00:11:39,200 --> 00:11:41,519
from single to multitheorem

312
00:11:41,519 --> 00:11:43,839
um for non-detective statistical

313
00:11:43,839 --> 00:11:45,279
knowledge arguments

314
00:11:45,279 --> 00:11:47,519
one assuming one-way permutations and

315
00:11:47,519 --> 00:11:48,480
one assuming

316
00:11:48,480 --> 00:11:51,360
learning with errors first let me talk

317
00:11:51,360 --> 00:11:52,399
about sadness

318
00:11:52,399 --> 00:11:55,680
so soundness captures the property that

319
00:11:55,680 --> 00:11:57,680
a malicious approver should not be able

320
00:11:57,680 --> 00:11:59,279
to convince the verifier

321
00:11:59,279 --> 00:12:01,839
for an x that is not in the language l

322
00:12:01,839 --> 00:12:03,440
and here the prover gets to

323
00:12:03,440 --> 00:12:07,040
choose x commonly there are two types

324
00:12:07,040 --> 00:12:08,000
depending on

325
00:12:08,000 --> 00:12:12,160
when the malicious prover chooses x

326
00:12:12,160 --> 00:12:14,160
for non-adaptive soundness the prover

327
00:12:14,160 --> 00:12:16,079
must decide before seeing the common

328
00:12:16,079 --> 00:12:16,880
random string

329
00:12:16,880 --> 00:12:19,440
while for adapter soundness the prover

330
00:12:19,440 --> 00:12:20,959
can decide after seeing the common

331
00:12:20,959 --> 00:12:23,360
random string

332
00:12:23,360 --> 00:12:25,200
however there is another dimension which

333
00:12:25,200 --> 00:12:26,959
often goes unnoticed

334
00:12:26,959 --> 00:12:30,800
um how to measure the success for um

335
00:12:30,800 --> 00:12:33,120
the malicious prover clearly the

336
00:12:33,120 --> 00:12:34,560
verifier should deny

337
00:12:34,560 --> 00:12:37,120
if x is not an l however it's not quite

338
00:12:37,120 --> 00:12:38,160
clear how to measure

339
00:12:38,160 --> 00:12:41,120
that membership requirement so we could

340
00:12:41,120 --> 00:12:41,839
disallow

341
00:12:41,839 --> 00:12:43,760
the malicious prover to output an x and

342
00:12:43,760 --> 00:12:45,680
l at all we call this exclusive

343
00:12:45,680 --> 00:12:46,800
soundness

344
00:12:46,800 --> 00:12:50,079
or we allow it but punish the prover for

345
00:12:50,079 --> 00:12:50,480
it

346
00:12:50,480 --> 00:12:53,760
that one we call penalizing soundness

347
00:12:53,760 --> 00:12:55,600
in total we get five different

348
00:12:55,600 --> 00:12:56,800
definitions

349
00:12:56,800 --> 00:12:58,399
all combinations of adaptive and

350
00:12:58,399 --> 00:13:00,000
non-adaptive and exclusive and

351
00:13:00,000 --> 00:13:01,279
penalizing

352
00:13:01,279 --> 00:13:03,760
plus a non-uniform variant that only

353
00:13:03,760 --> 00:13:06,000
exists for non-adaptive

354
00:13:06,000 --> 00:13:08,560
soundness adaptive soundness always

355
00:13:08,560 --> 00:13:10,240
implies non-adaptive soundness and

356
00:13:10,240 --> 00:13:12,160
penalizing soundness always implies

357
00:13:12,160 --> 00:13:13,519
exclusive soundness

358
00:13:13,519 --> 00:13:16,079
therefore adaptive penalizing soundness

359
00:13:16,079 --> 00:13:17,200
is the strongest

360
00:13:17,200 --> 00:13:22,160
definition here however pastured in 2016

361
00:13:22,160 --> 00:13:23,680
that there exists no black box

362
00:13:23,680 --> 00:13:25,839
construction

363
00:13:25,839 --> 00:13:29,120
of adaptive penalizing

364
00:13:29,120 --> 00:13:31,040
sound non-intact to statistical your

365
00:13:31,040 --> 00:13:34,800
knowledge arguments from hard primitives

366
00:13:34,800 --> 00:13:36,800
further we show in our paper that for

367
00:13:36,800 --> 00:13:38,399
non-uniform brewers

368
00:13:38,399 --> 00:13:40,720
all non-adaptive definitions are

369
00:13:40,720 --> 00:13:42,079
equivalent

370
00:13:42,079 --> 00:13:44,959
therefore adaptive exclusive is probably

371
00:13:44,959 --> 00:13:46,639
the strongest

372
00:13:46,639 --> 00:13:49,519
notion achievable here further adaptive

373
00:13:49,519 --> 00:13:51,199
exclusive indeed implies

374
00:13:51,199 --> 00:13:53,839
a further definition called adaptive

375
00:13:53,839 --> 00:13:54,720
culpable

376
00:13:54,720 --> 00:13:56,720
which was shown to suffice for many

377
00:13:56,720 --> 00:13:58,480
applications which we

378
00:13:58,480 --> 00:14:01,680
which is why we think um reaching

379
00:14:01,680 --> 00:14:03,680
adaptive exclusive soundness is indeed

380
00:14:03,680 --> 00:14:06,240
meaningful

381
00:14:06,240 --> 00:14:08,560
so our second contributions are two

382
00:14:08,560 --> 00:14:10,160
transformations from non-integer

383
00:14:10,160 --> 00:14:11,120
statistical

384
00:14:11,120 --> 00:14:13,680
knowledge arguments from signal to

385
00:14:13,680 --> 00:14:15,360
multiplier

386
00:14:15,360 --> 00:14:17,360
both work in the common random string

387
00:14:17,360 --> 00:14:18,560
model and both

388
00:14:18,560 --> 00:14:22,560
retain adaptive exclusive soundness

389
00:14:22,560 --> 00:14:26,320
for both the idea is based on the

390
00:14:26,320 --> 00:14:28,079
construction by feiger labido and

391
00:14:28,079 --> 00:14:29,440
chemier

392
00:14:29,440 --> 00:14:33,040
who did this for non-active

393
00:14:33,040 --> 00:14:36,000
zero knowledge proofs um but a dual

394
00:14:36,000 --> 00:14:37,199
version of this however

395
00:14:37,199 --> 00:14:39,199
i don't write i don't have time right

396
00:14:39,199 --> 00:14:40,240
now to talk

397
00:14:40,240 --> 00:14:44,399
more about this so our first

398
00:14:44,399 --> 00:14:45,360
construction

399
00:14:45,360 --> 00:14:48,880
um uses one-way permutations

400
00:14:48,880 --> 00:14:51,920
and we can even extend this um

401
00:14:51,920 --> 00:14:54,880
to retain perfect zero knowledge however

402
00:14:54,880 --> 00:14:57,120
then the simulator has run in expected

403
00:14:57,120 --> 00:14:58,480
polynomial time

404
00:14:58,480 --> 00:15:01,279
and the second one is based on the

405
00:15:01,279 --> 00:15:04,639
hardness of learning with errors

406
00:15:05,199 --> 00:15:06,880
this fits in nicely with the recent

407
00:15:06,880 --> 00:15:08,560
construction of picad

408
00:15:08,560 --> 00:15:12,000
and xi'an who built a single theorem

409
00:15:12,000 --> 00:15:14,160
non-deactive statistical knowledge

410
00:15:14,160 --> 00:15:16,880
argument from plain lve

411
00:15:16,880 --> 00:15:19,600
um here you see a comparison to a few

412
00:15:19,600 --> 00:15:21,279
other works you can see that

413
00:15:21,279 --> 00:15:23,760
only a few of them work on the comrade

414
00:15:23,760 --> 00:15:25,040
string model

415
00:15:25,040 --> 00:15:27,040
and we're the first one in the common

416
00:15:27,040 --> 00:15:28,560
random string model

417
00:15:28,560 --> 00:15:31,920
which and to retain adaptive exclusive

418
00:15:31,920 --> 00:15:34,399
soundness

419
00:15:34,880 --> 00:15:38,880
um yeah so if you want to learn more

420
00:15:38,880 --> 00:15:41,279
check out our youtube video and you can

421
00:15:41,279 --> 00:15:43,199
find our paper on eprint

422
00:15:43,199 --> 00:15:45,040
thank you very much for your attention

423
00:15:45,040 --> 00:15:48,560
and i'm happy to take any questions

424
00:15:48,560 --> 00:15:52,000
okay thank you very much felix

425
00:15:52,000 --> 00:15:55,120
this was nice um so

426
00:15:55,120 --> 00:15:58,800
if there are questions please uh um

427
00:15:58,800 --> 00:16:02,639
austin posted them on

428
00:16:02,639 --> 00:16:05,279
on the chat and i'll be happy to forward

429
00:16:05,279 --> 00:16:07,040
it to felix

430
00:16:07,040 --> 00:16:08,560
in the meantime maybe i can ask a

431
00:16:08,560 --> 00:16:10,399
question um

432
00:16:10,399 --> 00:16:13,600
so do you have um a general

433
00:16:13,600 --> 00:16:17,440
view of applications where

434
00:16:17,440 --> 00:16:19,440
adaptive exclusive soundness could be

435
00:16:19,440 --> 00:16:20,959
helpful like in general

436
00:16:20,959 --> 00:16:23,519
what what's the general paradigm where

437
00:16:23,519 --> 00:16:24,240
you

438
00:16:24,240 --> 00:16:26,320
you know you know this notion can be can

439
00:16:26,320 --> 00:16:27,920
be useful

440
00:16:27,920 --> 00:16:31,680
um so mainly this um is via the

441
00:16:31,680 --> 00:16:34,800
the adaptive culpable soundness

442
00:16:34,800 --> 00:16:39,519
um which was shown by code at all

443
00:16:41,920 --> 00:16:44,079
i don't have an example at the back of

444
00:16:44,079 --> 00:16:46,000
my mind

445
00:16:46,000 --> 00:16:49,199
right now but i think they gave

446
00:16:49,199 --> 00:16:54,399
multiple applications in their paper

447
00:16:54,399 --> 00:16:58,320
okay okay

448
00:16:58,320 --> 00:17:02,240
i think that's that's fine um

449
00:17:02,240 --> 00:17:05,760
let's see there are questions so um so

450
00:17:05,760 --> 00:17:08,559
it can be used for correctness uh proofs

451
00:17:08,559 --> 00:17:09,599
for shuffles

452
00:17:09,599 --> 00:17:12,879
um or e-voting

453
00:17:13,760 --> 00:17:18,319
for evoting okay yeah okay

454
00:17:18,319 --> 00:17:20,559
i don't i will not ask further and want

455
00:17:20,559 --> 00:17:21,599
to

456
00:17:21,599 --> 00:17:24,959
um to take more of your time uh

457
00:17:24,959 --> 00:17:28,160
so if there are other questions i think

458
00:17:28,160 --> 00:17:29,039
we can uh

459
00:17:29,039 --> 00:17:32,960
we can go to the next speaker

460
00:17:33,120 --> 00:17:34,880
okay could you please okay my screen

461
00:17:34,880 --> 00:17:36,320
because this

462
00:17:36,320 --> 00:17:39,280
seems not to work for me

463
00:17:39,440 --> 00:17:43,120
okay the the leg talk is compact still

464
00:17:43,120 --> 00:17:44,960
on the proofs for a threshold

465
00:17:44,960 --> 00:17:48,799
ucdsa with the trustless setup

466
00:17:48,799 --> 00:17:52,320
by the whole year

467
00:17:54,160 --> 00:17:57,039
to speak is

468
00:17:58,880 --> 00:18:00,020
yes

469
00:18:00,020 --> 00:18:06,460
[Music]

470
00:18:09,600 --> 00:18:12,640
hi um

471
00:18:12,640 --> 00:18:15,760
okay see my screen yeah yeah yeah we

472
00:18:15,760 --> 00:18:16,640
can't see

473
00:18:16,640 --> 00:18:19,760
okay thank you all right

474
00:18:25,600 --> 00:18:29,200
sorry can you put it in full screen um

475
00:18:29,200 --> 00:18:33,120
present yes perfect yes yes

476
00:18:33,120 --> 00:18:36,160
okay thank you all right um all right um

477
00:18:36,160 --> 00:18:38,480
today uh my name is um yoon and

478
00:18:38,480 --> 00:18:40,480
um this paper combination knowledge

479
00:18:40,480 --> 00:18:42,640
proof for facial dc dsa with chestnut

480
00:18:42,640 --> 00:18:44,480
setup it's john work with han long choi

481
00:18:44,480 --> 00:18:47,600
and shan shay

482
00:18:47,679 --> 00:18:50,720
um so firstly um what is special

483
00:18:50,720 --> 00:18:52,960
signature so this is a signature scheme

484
00:18:52,960 --> 00:18:53,600
that

485
00:18:53,600 --> 00:18:55,840
shares the signing ability to end

486
00:18:55,840 --> 00:18:56,720
parties

487
00:18:56,720 --> 00:19:00,080
such that if the attacker can attack

488
00:19:00,080 --> 00:19:02,160
and get the shares of t or fewer user

489
00:19:02,160 --> 00:19:03,760
shares they cannot generate a random

490
00:19:03,760 --> 00:19:05,039
signature so you need t

491
00:19:05,039 --> 00:19:06,880
plus one or more users to generate a

492
00:19:06,880 --> 00:19:08,480
valid signature

493
00:19:08,480 --> 00:19:11,360
and why we consider facial ecdsa because

494
00:19:11,360 --> 00:19:12,880
um dcdsa

495
00:19:12,880 --> 00:19:14,559
is used it's why they're using

496
00:19:14,559 --> 00:19:17,280
blockchain and facial ecdsa is

497
00:19:17,280 --> 00:19:20,400
useful in a lot of applications like

498
00:19:20,400 --> 00:19:22,840
hot wallets for crypto exchange and so

499
00:19:22,840 --> 00:19:25,200
on

500
00:19:25,200 --> 00:19:27,440
um but um theoretically um to do the

501
00:19:27,440 --> 00:19:28,960
threshold ecdsa is not

502
00:19:28,960 --> 00:19:30,960
that easy um it is a little bit more

503
00:19:30,960 --> 00:19:32,799
difficult than thresholds nor signature

504
00:19:32,799 --> 00:19:34,960
because the ecdsa structure is

505
00:19:34,960 --> 00:19:37,280
a little bit non-linear so make it

506
00:19:37,280 --> 00:19:38,080
threshold is

507
00:19:38,080 --> 00:19:40,400
a little bit difficult and it usually

508
00:19:40,400 --> 00:19:41,600
involves some kind of

509
00:19:41,600 --> 00:19:44,000
additive homomorphic encryption and zero

510
00:19:44,000 --> 00:19:45,520
knowledge proof

511
00:19:45,520 --> 00:19:48,240
and some of the best factual ecdsa

512
00:19:48,240 --> 00:19:49,760
signature um

513
00:19:49,760 --> 00:19:52,880
the main major bottleneck of the scheme

514
00:19:52,880 --> 00:19:55,919
is on the serial edge proof there so we

515
00:19:55,919 --> 00:19:57,039
want to improve

516
00:19:57,039 --> 00:19:59,280
the efficiency of the zero knowledge

517
00:19:59,280 --> 00:20:00,160
proof used there

518
00:20:00,160 --> 00:20:03,120
and then to bring a good boost in

519
00:20:03,120 --> 00:20:03,919
performance

520
00:20:03,919 --> 00:20:06,559
in both two-party ecdsa as well as

521
00:20:06,559 --> 00:20:09,678
special ecdsa

522
00:20:10,480 --> 00:20:13,520
so this is one example from the paper or

523
00:20:13,520 --> 00:20:16,559
from pkc last year on factual ecdsa

524
00:20:16,559 --> 00:20:19,520
so you can see that there are these are

525
00:20:19,520 --> 00:20:20,000
in this

526
00:20:20,000 --> 00:20:22,480
protocol um they use quite a lot of zero

527
00:20:22,480 --> 00:20:23,919
knowledge proof for certain relations

528
00:20:23,919 --> 00:20:25,679
like this one is a relation

529
00:20:25,679 --> 00:20:27,440
in um discrete logarithm while at the

530
00:20:27,440 --> 00:20:29,840
bottom they use a relation

531
00:20:29,840 --> 00:20:31,919
on a zero knowledge proof for proving

532
00:20:31,919 --> 00:20:33,360
some kind of cipher test

533
00:20:33,360 --> 00:20:36,400
is well-formed so um these are the major

534
00:20:36,400 --> 00:20:38,880
bottleneck for in terms of computation

535
00:20:38,880 --> 00:20:41,840
as well as bandwidth

536
00:20:42,880 --> 00:20:45,600
so um they according to the

537
00:20:45,600 --> 00:20:46,559
state-of-the-art

538
00:20:46,559 --> 00:20:49,280
schemes they use a new additive memorial

539
00:20:49,280 --> 00:20:51,200
encryption called the cr encryption

540
00:20:51,200 --> 00:20:54,400
which is based on some group called the

541
00:20:54,400 --> 00:20:55,440
hsm group

542
00:20:55,440 --> 00:20:57,360
where the hot subgroup membership

543
00:20:57,360 --> 00:20:58,960
assumption holds

544
00:20:58,960 --> 00:21:02,000
so um i will not go into the details of

545
00:21:02,000 --> 00:21:04,799
uh is set up because of the time limit

546
00:21:04,799 --> 00:21:06,960
but i just want to point out that um

547
00:21:06,960 --> 00:21:09,520
in this group agent we have a generator

548
00:21:09,520 --> 00:21:10,960
g which is equal to f

549
00:21:10,960 --> 00:21:14,000
times g q so um the f belongs to the

550
00:21:14,000 --> 00:21:16,080
generator of a subgroup

551
00:21:16,080 --> 00:21:18,720
of g where this in this subgroup the

552
00:21:18,720 --> 00:21:21,120
discrete logarithm problem is easy to

553
00:21:21,120 --> 00:21:23,280
solve so it is easy to solve

554
00:21:23,280 --> 00:21:25,760
the discriminant of f to the power x and

555
00:21:25,760 --> 00:21:27,039
get x instead so

556
00:21:27,039 --> 00:21:28,840
this is the property um you need to

557
00:21:28,840 --> 00:21:30,159
remember

558
00:21:30,159 --> 00:21:33,120
and um in the cl encryption they make

559
00:21:33,120 --> 00:21:35,360
use of this property and they generate

560
00:21:35,360 --> 00:21:37,760
a cipher test which is quite similar to

561
00:21:37,760 --> 00:21:38,559
um

562
00:21:38,559 --> 00:21:42,159
a algoma encryption but they can we can

563
00:21:42,159 --> 00:21:44,880
get the original message back because

564
00:21:44,880 --> 00:21:46,480
the discrete law

565
00:21:46,480 --> 00:21:50,080
in the base f is easy to solve

566
00:21:50,080 --> 00:21:53,440
so um so what we need to do

567
00:21:53,440 --> 00:21:55,760
is um actually doing the zero knowledge

568
00:21:55,760 --> 00:21:56,559
proof for

569
00:21:56,559 --> 00:21:59,760
this relation so the technical

570
00:21:59,760 --> 00:22:01,120
difficulty is to do

571
00:22:01,120 --> 00:22:03,679
this efficiency knowledge proof for this

572
00:22:03,679 --> 00:22:05,200
exam group

573
00:22:05,200 --> 00:22:07,520
for discrete law and because it is

574
00:22:07,520 --> 00:22:09,039
difficult because it is a non-order

575
00:22:09,039 --> 00:22:09,600
group

576
00:22:09,600 --> 00:22:11,760
so working on this discrete logarithm is

577
00:22:11,760 --> 00:22:12,960
not a simple task

578
00:22:12,960 --> 00:22:15,840
and we also want to give a ck proof for

579
00:22:15,840 --> 00:22:16,799
the well-fondness

580
00:22:16,799 --> 00:22:20,400
of a cl ciphertext so the existing work

581
00:22:20,400 --> 00:22:22,799
in um crypto19 um they use a

582
00:22:22,799 --> 00:22:23,679
serialization

583
00:22:23,679 --> 00:22:26,000
with a single bit challenge to do this

584
00:22:26,000 --> 00:22:27,679
discrete log problem so it is rather

585
00:22:27,679 --> 00:22:29,039
inefficient

586
00:22:29,039 --> 00:22:32,159
so um in pkc last year they tackled the

587
00:22:32,159 --> 00:22:33,679
discrete log problem by some trick

588
00:22:33,679 --> 00:22:35,039
called the lcm track

589
00:22:35,039 --> 00:22:38,799
and reduced the repetition by 10 times

590
00:22:38,799 --> 00:22:41,280
but still if you want it to have a sinus

591
00:22:41,280 --> 00:22:42,559
of 2 to the

592
00:22:42,559 --> 00:22:44,320
active then you still need to run the ck

593
00:22:44,320 --> 00:22:46,080
group for 8 times

594
00:22:46,080 --> 00:22:49,520
so it is rather inefficient

595
00:22:50,240 --> 00:22:53,760
and there are some other problems

596
00:22:53,760 --> 00:22:57,039
for the uh for the pkc last year

597
00:22:57,039 --> 00:22:59,520
um for example they need a random

598
00:22:59,520 --> 00:23:00,720
general group generator

599
00:23:00,720 --> 00:23:03,600
and we need some further interaction to

600
00:23:03,600 --> 00:23:05,919
generate a random group generator

601
00:23:05,919 --> 00:23:10,240
without the attack from the f3

602
00:23:11,440 --> 00:23:13,440
and actually um in this paper the main

603
00:23:13,440 --> 00:23:15,919
major contribution is to um give a new

604
00:23:15,919 --> 00:23:16,720
ck proof

605
00:23:16,720 --> 00:23:18,640
for these two relations discrete lot and

606
00:23:18,640 --> 00:23:20,880
the um cipher test relation

607
00:23:20,880 --> 00:23:23,360
so firstly let's consider this discrete

608
00:23:23,360 --> 00:23:26,240
log relation

609
00:23:26,240 --> 00:23:29,120
so um we get a first attempt to solve

610
00:23:29,120 --> 00:23:30,240
this problem

611
00:23:30,240 --> 00:23:32,480
actually it's based on some assumption

612
00:23:32,480 --> 00:23:34,400
used in a previous paper

613
00:23:34,400 --> 00:23:37,440
and then in this in this ck proof

614
00:23:37,440 --> 00:23:39,760
um the verify first send a random prime

615
00:23:39,760 --> 00:23:40,640
l there

616
00:23:40,640 --> 00:23:43,919
and the proofer try to um find

617
00:23:43,919 --> 00:23:46,159
uh try um the secret sx and then they

618
00:23:46,159 --> 00:23:47,520
will try to factorize it

619
00:23:47,520 --> 00:23:49,200
and then get the quotient q prime and

620
00:23:49,200 --> 00:23:51,120
the remainder r and then the proofer

621
00:23:51,120 --> 00:23:52,000
will send the q

622
00:23:52,000 --> 00:23:53,840
capital q is equal to g to the q prime

623
00:23:53,840 --> 00:23:55,360
and the remainder out

624
00:23:55,360 --> 00:23:57,200
to the verify and the rule fired just

625
00:23:57,200 --> 00:23:58,640
simply check it

626
00:23:58,640 --> 00:24:00,880
q to the l times g to the l is equal to

627
00:24:00,880 --> 00:24:02,080
w or not

628
00:24:02,080 --> 00:24:05,919
and but it's simple um ck proof is not

629
00:24:05,919 --> 00:24:07,039
secure

630
00:24:07,039 --> 00:24:11,039
um you can refer to um in my uh

631
00:24:11,039 --> 00:24:13,120
uh presentation in youtube for the for

632
00:24:13,120 --> 00:24:15,200
the attack but um the attack

633
00:24:15,200 --> 00:24:18,320
will show that if we the witness if the

634
00:24:18,320 --> 00:24:20,159
relation if the witness is in this form

635
00:24:20,159 --> 00:24:22,320
g to the x f to the y so we have some

636
00:24:22,320 --> 00:24:22,880
sub group

637
00:24:22,880 --> 00:24:25,919
element appended there then it can break

638
00:24:25,919 --> 00:24:28,480
this simple um construction so we need

639
00:24:28,480 --> 00:24:31,120
something to eliminate this

640
00:24:31,120 --> 00:24:34,880
subgroup f element so our solution

641
00:24:34,880 --> 00:24:37,679
is to use an extra round of challenge to

642
00:24:37,679 --> 00:24:38,799
eliminate

643
00:24:38,799 --> 00:24:42,320
the element of this order q in w

644
00:24:42,320 --> 00:24:45,440
so we need to run another run of extra

645
00:24:45,440 --> 00:24:47,120
run or serialization proof

646
00:24:47,120 --> 00:24:49,840
um but in that particular run the prime

647
00:24:49,840 --> 00:24:51,600
number we use the prime number q

648
00:24:51,600 --> 00:24:55,039
there um to eliminate um all the older

649
00:24:55,039 --> 00:24:56,720
queue element there

650
00:24:56,720 --> 00:24:58,640
and then for the step four to six is the

651
00:24:58,640 --> 00:25:00,000
original protocol

652
00:25:00,000 --> 00:25:02,640
from the algorithm one so we combine

653
00:25:02,640 --> 00:25:04,080
these two parts together

654
00:25:04,080 --> 00:25:06,080
we are able to give a completion

655
00:25:06,080 --> 00:25:08,080
knowledge proof

656
00:25:08,080 --> 00:25:11,520
in the generic group model

657
00:25:12,720 --> 00:25:14,720
and we also showed that it is secure

658
00:25:14,720 --> 00:25:18,400
against the previous attack

659
00:25:20,240 --> 00:25:22,720
so um the advantage of this protocol is

660
00:25:22,720 --> 00:25:23,360
that it

661
00:25:23,360 --> 00:25:26,159
is run for one time only um to be

662
00:25:26,159 --> 00:25:27,039
already achieved

663
00:25:27,039 --> 00:25:29,039
a high level of sunless error as

664
00:25:29,039 --> 00:25:30,720
compared to the previous works

665
00:25:30,720 --> 00:25:33,279
and as a result we don't need to run the

666
00:25:33,279 --> 00:25:35,279
ck proof for many many times

667
00:25:35,279 --> 00:25:37,120
so we save a lot in terms of both

668
00:25:37,120 --> 00:25:38,880
bandwidth as well as com

669
00:25:38,880 --> 00:25:41,520
computation as well so it is much much

670
00:25:41,520 --> 00:25:43,600
shorter than the crypto 19 paper as well

671
00:25:43,600 --> 00:25:44,240
as the

672
00:25:44,240 --> 00:25:47,120
pkc paper last year with the same level

673
00:25:47,120 --> 00:25:49,678
of soundness

674
00:25:52,480 --> 00:25:55,600
and as compared to previous work we use

675
00:25:55,600 --> 00:25:58,480
a slightly different assumptions and in

676
00:25:58,480 --> 00:25:59,679
the pkc

677
00:25:59,679 --> 00:26:02,080
paper last year actually the ck proof is

678
00:26:02,080 --> 00:26:03,600
not a direct

679
00:26:03,600 --> 00:26:05,279
dl relation but they prove it in a

680
00:26:05,279 --> 00:26:07,440
modified relation so um

681
00:26:07,440 --> 00:26:09,440
it's changed a bit while on the other

682
00:26:09,440 --> 00:26:11,679
hand the weakness of this paper is that

683
00:26:11,679 --> 00:26:13,279
we use a generic group

684
00:26:13,279 --> 00:26:15,360
while the previous paper does not need

685
00:26:15,360 --> 00:26:19,600
that so it is some kind of a trade-off

686
00:26:20,960 --> 00:26:23,919
and then i'm equipped with our dl

687
00:26:23,919 --> 00:26:25,360
relations ck proof then

688
00:26:25,360 --> 00:26:28,159
it is not very difficult to do the ck

689
00:26:28,159 --> 00:26:30,080
proof for the well fundedness of a cyber

690
00:26:30,080 --> 00:26:32,240
test because it is quite similar to

691
00:26:32,240 --> 00:26:34,799
to our multiple dia relations so we can

692
00:26:34,799 --> 00:26:36,240
construct similarly

693
00:26:36,240 --> 00:26:38,559
and again i skipped the details here in

694
00:26:38,559 --> 00:26:41,360
this presentation

695
00:26:41,600 --> 00:26:43,279
and you can refer to the full paper for

696
00:26:43,279 --> 00:26:44,960
the construction but this is quite

697
00:26:44,960 --> 00:26:47,279
similar it is also a six round protocol

698
00:26:47,279 --> 00:26:52,000
like this one

699
00:26:52,000 --> 00:26:54,559
and um so let's look at the um

700
00:26:54,559 --> 00:26:55,840
communication size

701
00:26:55,840 --> 00:26:58,240
you can see that um when you just

702
00:26:58,240 --> 00:27:00,400
directly compare with previous works

703
00:27:00,400 --> 00:27:02,080
our scheme is not best in terms of

704
00:27:02,080 --> 00:27:03,679
communication size but

705
00:27:03,679 --> 00:27:07,840
remember that

706
00:27:08,960 --> 00:27:10,400
they have a requirement that they need a

707
00:27:10,400 --> 00:27:12,559
randomized group generator

708
00:27:12,559 --> 00:27:14,480
and again they need some further

709
00:27:14,480 --> 00:27:15,760
overhead in

710
00:27:15,760 --> 00:27:18,559
generating that and eventually when it

711
00:27:18,559 --> 00:27:18,960
put

712
00:27:18,960 --> 00:27:21,440
into the threshold or two-party ecdsa

713
00:27:21,440 --> 00:27:22,399
they will

714
00:27:22,399 --> 00:27:25,440
becomes a much much larger than um

715
00:27:25,440 --> 00:27:28,399
our scheme so um this is why our scheme

716
00:27:28,399 --> 00:27:29,039
will

717
00:27:29,039 --> 00:27:31,600
outperform them when it is used in

718
00:27:31,600 --> 00:27:35,840
facial or two-party ecdsa

719
00:27:37,600 --> 00:27:41,039
so um we can we also we just give a

720
00:27:41,039 --> 00:27:42,000
brief um

721
00:27:42,000 --> 00:27:44,640
comparison when we put our scheme into

722
00:27:44,640 --> 00:27:47,679
two-party and facial ectsa

723
00:27:47,679 --> 00:27:51,039
and um we mainly use the two party esa

724
00:27:51,039 --> 00:27:53,120
protocol in crypto19 and we change the

725
00:27:53,120 --> 00:27:54,080
relation a bit

726
00:27:54,080 --> 00:27:56,159
to this one in order to satisfy their

727
00:27:56,159 --> 00:27:58,480
scheme

728
00:27:58,559 --> 00:28:02,720
and this is the final final

729
00:28:02,720 --> 00:28:04,559
of comparison in terms of communication

730
00:28:04,559 --> 00:28:06,880
so um we save a lot in terms of the key

731
00:28:06,880 --> 00:28:09,120
generation parts

732
00:28:09,120 --> 00:28:11,760
and in terms of running time we are the

733
00:28:11,760 --> 00:28:12,240
best

734
00:28:12,240 --> 00:28:15,279
when we um compare in terms of both key

735
00:28:15,279 --> 00:28:17,039
generation running time as well as

736
00:28:17,039 --> 00:28:20,960
signing time so we are the best in

737
00:28:20,960 --> 00:28:23,919
when compared to the previous works and

738
00:28:23,919 --> 00:28:24,480
for

739
00:28:24,480 --> 00:28:28,320
fresh oecdsa we propose to scheme

740
00:28:28,320 --> 00:28:31,520
which changes the ck proof in different

741
00:28:31,520 --> 00:28:33,039
part of the paper

742
00:28:33,039 --> 00:28:36,320
so um i will leave the details about our

743
00:28:36,320 --> 00:28:38,399
the difference between schema and schem2

744
00:28:38,399 --> 00:28:40,080
um in the

745
00:28:40,080 --> 00:28:42,880
in the paper but we can see that this

746
00:28:42,880 --> 00:28:44,000
table gives you a

747
00:28:44,000 --> 00:28:47,440
brief overview of which part performs

748
00:28:47,440 --> 00:28:48,240
better

749
00:28:48,240 --> 00:28:51,919
um so um the part with red rectangle is

750
00:28:51,919 --> 00:28:52,240
the

751
00:28:52,240 --> 00:28:53,600
part that is better than the other

752
00:28:53,600 --> 00:28:55,360
scheme so we can see that our skin one

753
00:28:55,360 --> 00:28:57,279
is better in terms of key generation and

754
00:28:57,279 --> 00:28:58,000
less assumption

755
00:28:58,000 --> 00:29:00,559
used while our scheme 2 is better in

756
00:29:00,559 --> 00:29:02,320
terms of signing time

757
00:29:02,320 --> 00:29:04,640
and the key generation time is

758
00:29:04,640 --> 00:29:05,600
outperformed the

759
00:29:05,600 --> 00:29:08,960
previous work as well and we can see

760
00:29:08,960 --> 00:29:09,679
this is the

761
00:29:09,679 --> 00:29:11,200
actual comparison when we setting the

762
00:29:11,200 --> 00:29:13,679
threshold tn threshold to one three two

763
00:29:13,679 --> 00:29:14,000
four

764
00:29:14,000 --> 00:29:16,799
two five so um we are much better in

765
00:29:16,799 --> 00:29:17,679
terms of

766
00:29:17,679 --> 00:29:20,880
communication size running time

767
00:29:20,880 --> 00:29:23,520
and also the same when we are comparing

768
00:29:23,520 --> 00:29:24,159
in

769
00:29:24,159 --> 00:29:27,840
different perspectives

770
00:29:28,559 --> 00:29:31,919
so to conclude um this paper proposed a

771
00:29:31,919 --> 00:29:33,679
very competitive knowledge proof for the

772
00:29:33,679 --> 00:29:35,120
discrete log relation

773
00:29:35,120 --> 00:29:37,520
as well as the uh for the

774
00:29:37,520 --> 00:29:39,520
well-foundedness of the cl cycle test

775
00:29:39,520 --> 00:29:41,360
and when applied to two-party and

776
00:29:41,360 --> 00:29:42,720
fractional ectsa

777
00:29:42,720 --> 00:29:45,039
it can significantly improve the

778
00:29:45,039 --> 00:29:45,840
performance

779
00:29:45,840 --> 00:29:47,840
in terms of bandwidth as well as the

780
00:29:47,840 --> 00:29:49,440
running time

781
00:29:49,440 --> 00:29:51,440
so that's the end of my presentation and

782
00:29:51,440 --> 00:29:53,360
i'm happy to take any questions from you

783
00:29:53,360 --> 00:29:57,520
thank you okay thank you for a nice talk

784
00:29:57,520 --> 00:30:00,559
and any questions

785
00:30:00,559 --> 00:30:09,520
you may ask your questions in zuni

786
00:30:09,520 --> 00:30:11,760
okay in the meantime i want to ask you a

787
00:30:11,760 --> 00:30:14,880
a simple question i i

788
00:30:14,880 --> 00:30:16,799
i think you should launch the

789
00:30:16,799 --> 00:30:19,360
construction for the dl relation

790
00:30:19,360 --> 00:30:22,799
uh that toko consists of

791
00:30:22,799 --> 00:30:26,880
two sub-protocols right yeah

792
00:30:26,880 --> 00:30:30,159
uh can we run the two sub-protocols in

793
00:30:30,159 --> 00:30:31,919
parallel

794
00:30:31,919 --> 00:30:34,960
um actually it's um

795
00:30:34,960 --> 00:30:37,039
i think this is uh i will have a little

796
00:30:37,039 --> 00:30:38,880
bit problem because um

797
00:30:38,880 --> 00:30:40,960
for in the security proof when i do the

798
00:30:40,960 --> 00:30:42,399
rewind i actually need

799
00:30:42,399 --> 00:30:44,480
the information from the previous one to

800
00:30:44,480 --> 00:30:46,799
to get the security proof to go through

801
00:30:46,799 --> 00:30:50,320
so i cannot do it in parallel oh

802
00:30:50,320 --> 00:30:53,600
okay see just for the visa or security

803
00:30:53,600 --> 00:30:54,240
proof

804
00:30:54,240 --> 00:30:57,679
yeah that's right all right let's see

805
00:30:57,679 --> 00:31:05,120
can you ask questions

806
00:31:05,120 --> 00:31:10,240
okay low says let's move to the desktop

807
00:31:10,240 --> 00:31:14,000
okay so the next stock is on publicly

808
00:31:14,000 --> 00:31:15,440
verifiable zero knowledge from

809
00:31:15,440 --> 00:31:18,080
collapsing blockchains

810
00:31:18,080 --> 00:31:20,399
of alessandra scafuro luisa siniscalc

811
00:31:20,399 --> 00:31:22,240
and evan visconti

812
00:31:22,240 --> 00:31:25,440
and luisa will have the honor

813
00:31:25,440 --> 00:31:28,399
to present the last talk of this

814
00:31:28,399 --> 00:31:30,240
conference

815
00:31:30,240 --> 00:31:33,840
luis are you ready

816
00:31:33,919 --> 00:31:37,200
yeah what's up

817
00:31:40,559 --> 00:31:43,519
can you see my screen

818
00:31:44,399 --> 00:31:47,840
yes perfect

819
00:31:51,120 --> 00:31:54,399
please god so hi everyone this is a

820
00:31:54,399 --> 00:31:56,159
joint work with alessandra scanpoor and

821
00:31:56,159 --> 00:31:57,200
evan visconti

822
00:31:57,200 --> 00:31:59,600
and today i'm gonna talk about publicly

823
00:31:59,600 --> 00:32:01,200
verifiable zero knowledge from

824
00:32:01,200 --> 00:32:03,200
collapsing blockchain

825
00:32:03,200 --> 00:32:04,799
so first of all what is a general

826
00:32:04,799 --> 00:32:07,039
knowledge proof well it's a protocol

827
00:32:07,039 --> 00:32:08,880
between approval and a verifier where

828
00:32:08,880 --> 00:32:10,399
the approval want to prove

829
00:32:10,399 --> 00:32:12,480
that that some statement is true to the

830
00:32:12,480 --> 00:32:13,600
verifier

831
00:32:13,600 --> 00:32:16,559
now if this pro is publicly verifiable

832
00:32:16,559 --> 00:32:17,840
means that one proof

833
00:32:17,840 --> 00:32:21,039
can convince many verifier and uh

834
00:32:21,039 --> 00:32:22,559
we are going to ask that this proof

835
00:32:22,559 --> 00:32:24,399
should be sound and zero knowledge

836
00:32:24,399 --> 00:32:26,559
soundness means that a malicious proverb

837
00:32:26,559 --> 00:32:28,880
cannot convince an honest verifier

838
00:32:28,880 --> 00:32:32,000
of a statement that is not true while a

839
00:32:32,000 --> 00:32:33,039
zero knowledge proof

840
00:32:33,039 --> 00:32:35,360
a zero knowledge property ensures that

841
00:32:35,360 --> 00:32:36,320
nothing

842
00:32:36,320 --> 00:32:38,480
else is revealed except that the

843
00:32:38,480 --> 00:32:40,399
statement is true

844
00:32:40,399 --> 00:32:43,679
if proof is publicly verifiable it's

845
00:32:43,679 --> 00:32:45,840
especially useful in a context of a

846
00:32:45,840 --> 00:32:47,600
blockchain because one can put this

847
00:32:47,600 --> 00:32:49,679
proof on the production and everyone

848
00:32:49,679 --> 00:32:51,679
just looking at the proof can verify

849
00:32:51,679 --> 00:32:53,120
that can be convinced

850
00:32:53,120 --> 00:32:57,200
that the statement is true so

851
00:32:57,200 --> 00:32:59,600
publicly verifiable proof are important

852
00:32:59,600 --> 00:33:00,960
and example of that

853
00:33:00,960 --> 00:33:02,799
can be non-interactive zero knowledge

854
00:33:02,799 --> 00:33:04,559
but there is just one message from the

855
00:33:04,559 --> 00:33:06,640
proverb to the verifier

856
00:33:06,640 --> 00:33:08,559
that but they usually come at the cost

857
00:33:08,559 --> 00:33:11,200
that are a holistic assumption like

858
00:33:11,200 --> 00:33:13,840
random miracle or a trusses setup

859
00:33:13,840 --> 00:33:16,159
so our question is can we use instead

860
00:33:16,159 --> 00:33:17,360
something that is already

861
00:33:17,360 --> 00:33:19,840
running in the world like a blockchain

862
00:33:19,840 --> 00:33:21,039
and in particular

863
00:33:21,039 --> 00:33:23,120
the the question is can we use the

864
00:33:23,120 --> 00:33:24,799
blockchain and the assumption that are

865
00:33:24,799 --> 00:33:26,720
we making on the blockchain to construct

866
00:33:26,720 --> 00:33:28,799
a cryptographic protocol on top of it

867
00:33:28,799 --> 00:33:31,120
in particular a publicly verifiable

868
00:33:31,120 --> 00:33:32,640
zero-knowledge one

869
00:33:32,640 --> 00:33:35,679
so this question was

870
00:33:35,679 --> 00:33:38,159
answered partially by goyal goyal in

871
00:33:38,159 --> 00:33:39,760
2017

872
00:33:39,760 --> 00:33:41,440
where they constructed non-interactive

873
00:33:41,440 --> 00:33:43,760
zero knowledge just from proof-of-stake

874
00:33:43,760 --> 00:33:44,799
blockchain

875
00:33:44,799 --> 00:33:47,919
but actually in that type of proof

876
00:33:47,919 --> 00:33:49,840
they are making some additional

877
00:33:49,840 --> 00:33:51,440
assumption on the blockchain

878
00:33:51,440 --> 00:33:54,960
in particular they are considering uh uh

879
00:33:54,960 --> 00:33:56,799
that the adversary of the blockchain

880
00:33:56,799 --> 00:33:58,159
cannot be uh

881
00:33:58,159 --> 00:34:01,600
corrupting player adaptably and moreover

882
00:34:01,600 --> 00:34:04,640
also the there are some limitations on

883
00:34:04,640 --> 00:34:06,399
the behavior stakeholder

884
00:34:06,399 --> 00:34:08,879
for instance the the honesty called they

885
00:34:08,879 --> 00:34:10,719
can never reveal their secret key even

886
00:34:10,719 --> 00:34:11,359
if there is

887
00:34:11,359 --> 00:34:14,800
little stick associated to them so

888
00:34:14,800 --> 00:34:17,119
the contribution that we are making in

889
00:34:17,119 --> 00:34:19,119
our talk are two

890
00:34:19,119 --> 00:34:23,359
uh so first of all we are gonna

891
00:34:23,359 --> 00:34:25,119
see we are gonna show that when you are

892
00:34:25,119 --> 00:34:26,719
using the blockchain

893
00:34:26,719 --> 00:34:28,239
and the assumption that they are making

894
00:34:28,239 --> 00:34:29,599
on the blockchain to construct a

895
00:34:29,599 --> 00:34:32,159
cryptographic protocol on top of it

896
00:34:32,159 --> 00:34:34,079
if you bound the security of your

897
00:34:34,079 --> 00:34:36,719
protocol to the secrets of the honest

898
00:34:36,719 --> 00:34:37,520
player

899
00:34:37,520 --> 00:34:40,239
then there can be some subtlety that uh

900
00:34:40,239 --> 00:34:42,480
an adversary can exploit

901
00:34:42,480 --> 00:34:46,879
so uh we define a new security notion

902
00:34:46,879 --> 00:34:49,040
where uh we are gonna ask that this

903
00:34:49,040 --> 00:34:50,159
security should

904
00:34:50,159 --> 00:34:53,679
old even when all the um

905
00:34:53,679 --> 00:34:55,520
all the secrets of the honest prayers

906
00:34:55,520 --> 00:34:57,119
are immediate and on the

907
00:34:57,119 --> 00:34:59,359
in all the players are corrupting and we

908
00:34:59,359 --> 00:35:00,160
are called this

909
00:35:00,160 --> 00:35:02,079
notion security against collapsing

910
00:35:02,079 --> 00:35:04,320
blockchain and we are asking that

911
00:35:04,320 --> 00:35:07,119
a protocol should be zero knowledge even

912
00:35:07,119 --> 00:35:09,119
in this regime

913
00:35:09,119 --> 00:35:12,000
so we are constructing a publicly and

914
00:35:12,000 --> 00:35:13,839
then we are giving a construction

915
00:35:13,839 --> 00:35:16,480
let's satisfy this uh this security

916
00:35:16,480 --> 00:35:17,200
notion

917
00:35:17,200 --> 00:35:19,680
and in particular our protocol can be

918
00:35:19,680 --> 00:35:21,359
running on any blockchain

919
00:35:21,359 --> 00:35:24,000
so we don't care about the underlying

920
00:35:24,000 --> 00:35:24,880
mechanism

921
00:35:24,880 --> 00:35:26,800
it can be a proof of mistake or a proof

922
00:35:26,800 --> 00:35:28,960
of work blockchain it's okay

923
00:35:28,960 --> 00:35:31,359
and as long as it's satisfying some

924
00:35:31,359 --> 00:35:33,359
generic consumption that we make on the

925
00:35:33,359 --> 00:35:34,880
blockchain

926
00:35:34,880 --> 00:35:38,480
so to conclude our

927
00:35:38,480 --> 00:35:40,400
i want to summarize the difference

928
00:35:40,400 --> 00:35:42,000
between our throttle and the one of

929
00:35:42,000 --> 00:35:44,480
goyalan

930
00:35:45,599 --> 00:35:47,680
is non-interactive which means that

931
00:35:47,680 --> 00:35:49,760
there is just one message to the private

932
00:35:49,760 --> 00:35:50,240
uh

933
00:35:50,240 --> 00:35:52,800
to the from the proverb to the verify

934
00:35:52,800 --> 00:35:54,480
while our protocol

935
00:35:54,480 --> 00:35:56,800
is a non-interactive with respect to

936
00:35:56,800 --> 00:35:57,839
verifier

937
00:35:57,839 --> 00:36:00,960
but the prover needs to talk with the

938
00:36:00,960 --> 00:36:02,560
blockchain is actually interacting with

939
00:36:02,560 --> 00:36:04,320
the blockchain and posting multiple

940
00:36:04,320 --> 00:36:05,680
messages in blockchain

941
00:36:05,680 --> 00:36:09,599
so this can seems a drawback because

942
00:36:09,599 --> 00:36:12,240
the proverb is uh interacting multiple

943
00:36:12,240 --> 00:36:13,119
times with it

944
00:36:13,119 --> 00:36:16,000
but actually we are uh we are testing

945
00:36:16,000 --> 00:36:17,760
multiple messages from the blockchain

946
00:36:17,760 --> 00:36:18,640
but just last

947
00:36:18,640 --> 00:36:22,079
the last message needs the theorem so

948
00:36:22,079 --> 00:36:24,000
all the previous message can be just

949
00:36:24,000 --> 00:36:25,359
pre-computed and

950
00:36:25,359 --> 00:36:28,240
posted in the blockchain from the to the

951
00:36:28,240 --> 00:36:28,960
from the

952
00:36:28,960 --> 00:36:32,240
to the by the program sorry so

953
00:36:32,240 --> 00:36:35,280
moreover as i said our

954
00:36:35,280 --> 00:36:38,079
protocol can be worked on any blockchain

955
00:36:38,079 --> 00:36:40,800
as long as satisfying our assumption

956
00:36:40,800 --> 00:36:43,760
and uh so it doesn't need to be a

957
00:36:43,760 --> 00:36:45,680
profile mistake or a proof of work or

958
00:36:45,680 --> 00:36:46,160
any

959
00:36:46,160 --> 00:36:50,160
other type moreover we are based

960
00:36:50,160 --> 00:36:51,920
just on one vapor mutation we require

961
00:36:51,920 --> 00:36:53,359
the existence of just one with the

962
00:36:53,359 --> 00:36:54,079
mutation

963
00:36:54,079 --> 00:36:56,800
while the work of goyal goyal required

964
00:36:56,800 --> 00:36:59,119
the existency of a non-interactive

965
00:36:59,119 --> 00:37:02,800
wi finally we are not making

966
00:37:02,800 --> 00:37:06,320
any restriction on how the player should

967
00:37:06,320 --> 00:37:08,960
use the secret key or their secrets and

968
00:37:08,960 --> 00:37:10,400
our protocol remain

969
00:37:10,400 --> 00:37:12,160
zero knowledge even in presence of

970
00:37:12,160 --> 00:37:13,920
collapsing blockchain

971
00:37:13,920 --> 00:37:16,160
so even when all the secrets are

972
00:37:16,160 --> 00:37:20,400
revealed and players are all corrupted

973
00:37:20,400 --> 00:37:23,680
thanks a lot

974
00:37:23,680 --> 00:37:27,359
okay thank you very much

975
00:37:27,359 --> 00:37:30,240
we have a couple of minutes uh to take

976
00:37:30,240 --> 00:37:31,119
uh

977
00:37:31,119 --> 00:37:35,440
questions so in that case

978
00:37:35,440 --> 00:37:37,119
could you give us a brief idea of how

979
00:37:37,119 --> 00:37:39,440
you do this

980
00:37:39,440 --> 00:37:43,599
uh yeah so basically

981
00:37:43,599 --> 00:37:46,400
um our assumption that we are making on

982
00:37:46,400 --> 00:37:47,200
the

983
00:37:47,200 --> 00:37:50,400
on the blockchain is that the blocks

984
00:37:50,400 --> 00:37:51,280
contain a

985
00:37:51,280 --> 00:37:53,680
field that is unpredictable that

986
00:37:53,680 --> 00:37:55,599
contains some mean entropy

987
00:37:55,599 --> 00:37:58,079
so from a point of view of even an

988
00:37:58,079 --> 00:37:59,280
adversary

989
00:37:59,280 --> 00:38:02,320
uh if he's in a point on time

990
00:38:02,320 --> 00:38:04,720
in the he cannot predict that these mean

991
00:38:04,720 --> 00:38:05,680
entropies thing that

992
00:38:05,680 --> 00:38:07,119
will appear in the future in the

993
00:38:07,119 --> 00:38:10,720
blockchain so this in some sense will be

994
00:38:10,720 --> 00:38:13,359
uh and then we are just applying the lfs

995
00:38:13,359 --> 00:38:14,240
paradigm

996
00:38:14,240 --> 00:38:17,040
so we are just proving x is in l or i

997
00:38:17,040 --> 00:38:20,880
can predict these unpredictable strings

998
00:38:20,880 --> 00:38:24,160
and the key tool why our

999
00:38:24,160 --> 00:38:26,240
and so we are going to use something

1000
00:38:26,240 --> 00:38:28,320
that is a

1001
00:38:28,320 --> 00:38:31,280
a publicly verifiable wi which is

1002
00:38:31,280 --> 00:38:32,000
already

1003
00:38:32,000 --> 00:38:33,920
secured in the context of a collapsing

1004
00:38:33,920 --> 00:38:36,079
blockchain

1005
00:38:36,079 --> 00:38:39,359
and uh basically

1006
00:38:39,359 --> 00:38:41,839
this is the thing so i am committing

1007
00:38:41,839 --> 00:38:44,880
ahead of time to the witness for example

1008
00:38:44,880 --> 00:38:47,440
then i am waiting that the other blocks

1009
00:38:47,440 --> 00:38:48,880
appear in the blockchain

1010
00:38:48,880 --> 00:38:51,359
and then as a proverb i am computing

1011
00:38:51,359 --> 00:38:53,839
this publicly verifiable wi

1012
00:38:53,839 --> 00:38:57,599
where i prove this or statement

1013
00:38:57,760 --> 00:39:00,480
and you still get entropy even when all

1014
00:39:00,480 --> 00:39:00,880
the

1015
00:39:00,880 --> 00:39:04,320
parties are corrupt so

1016
00:39:04,320 --> 00:39:07,440
so the thing is that uh

1017
00:39:07,440 --> 00:39:09,920
in that case not anymore but we are

1018
00:39:09,920 --> 00:39:11,440
requiring that

1019
00:39:11,440 --> 00:39:13,200
only if a proof is posted in the

1020
00:39:13,200 --> 00:39:15,119
blockchain just the things that are

1021
00:39:15,119 --> 00:39:16,960
already posted on the blockchain

1022
00:39:16,960 --> 00:39:19,119
they should remain zero knowledge we are

1023
00:39:19,119 --> 00:39:20,320
not making

1024
00:39:20,320 --> 00:39:23,520
any security when the blockchain is

1025
00:39:23,520 --> 00:39:26,640
completely corrupted

1026
00:39:26,880 --> 00:39:29,839
thanks

1027
00:39:31,680 --> 00:39:34,240
okay so i think that we are right on

1028
00:39:34,240 --> 00:39:34,960
time

1029
00:39:34,960 --> 00:39:38,000
and uh so thank you very much uh for

1030
00:39:38,000 --> 00:39:39,440
attending this session i

1031
00:39:39,440 --> 00:39:43,520
hope you you all enjoyed and

1032
00:39:43,520 --> 00:39:46,720
yeah i suppose i'll leave uh the 42

1033
00:39:46,720 --> 00:39:49,200
one mark with and petrus for the closing

1034
00:39:49,200 --> 00:39:51,200
remark

1035
00:39:51,200 --> 00:39:54,839
great uh thanks amy keller

1036
00:39:54,839 --> 00:39:58,160
and so this is it guys

1037
00:39:58,160 --> 00:39:59,760
it wasn't hurting bro but it was the

1038
00:39:59,760 --> 00:40:01,280
best thing we could uh

1039
00:40:01,280 --> 00:40:04,960
come up with mostly due to

1040
00:40:04,960 --> 00:40:08,079
kevin and kay who did a terrific job

1041
00:40:08,079 --> 00:40:10,640
and do you guys want to share oh wait

1042
00:40:10,640 --> 00:40:12,880
there's a puzzle solution thing coming

1043
00:40:12,880 --> 00:40:14,960
up

1044
00:40:15,119 --> 00:40:18,319
kevin yeah um

1045
00:40:18,319 --> 00:40:21,920
i'll see him just a couple of words

1046
00:40:21,920 --> 00:40:25,280
about that

1047
00:40:25,280 --> 00:40:28,720
i'm not showing the solution

1048
00:40:29,440 --> 00:40:32,800
but this gives you an idea of what the

1049
00:40:32,800 --> 00:40:34,640
score is

1050
00:40:34,640 --> 00:40:37,680
it's actually rather close and we have

1051
00:40:37,680 --> 00:40:39,280
uh three people have gotten all the

1052
00:40:39,280 --> 00:40:40,800
answers but one person

1053
00:40:40,800 --> 00:40:42,640
has all the answers with the smallest

1054
00:40:42,640 --> 00:40:44,240
number of incorrect

1055
00:40:44,240 --> 00:40:46,640
answers however i'm going to let this go

1056
00:40:46,640 --> 00:40:47,520
until the end

1057
00:40:47,520 --> 00:40:52,000
of the the social event after this

1058
00:40:52,000 --> 00:40:53,520
and then we'll determine a winner at the

1059
00:40:53,520 --> 00:40:56,160
end of that so if you look down the list

1060
00:40:56,160 --> 00:40:57,760
there are a couple people who could

1061
00:40:57,760 --> 00:40:59,760
theoretically get the last answer and

1062
00:40:59,760 --> 00:41:03,359
have fewer incorrect answers

1063
00:41:04,400 --> 00:41:07,359
okay so i'll i'll let it go and i if if

1064
00:41:07,359 --> 00:41:09,040
people have complaints about the clues

1065
00:41:09,040 --> 00:41:10,640
you have to blame me not k

1066
00:41:10,640 --> 00:41:13,920
because they're kind of obscure

1067
00:41:15,920 --> 00:41:20,079
all right thanks kevin um

1068
00:41:20,079 --> 00:41:23,359
so again thank you kevin and kay for

1069
00:41:23,359 --> 00:41:25,040
this enormous

1070
00:41:25,040 --> 00:41:26,800
uh job we couldn't we couldn't have done

1071
00:41:26,800 --> 00:41:28,720
it without you um

1072
00:41:28,720 --> 00:41:32,839
thanks to all the authors that submitted

1073
00:41:32,839 --> 00:41:34,000
papers

1074
00:41:34,000 --> 00:41:35,920
all the program committee members worked

1075
00:41:35,920 --> 00:41:37,520
really hard and did a

1076
00:41:37,520 --> 00:41:40,640
magnificent job and

1077
00:41:40,640 --> 00:41:43,680
finally to you know general chairs were

1078
00:41:43,680 --> 00:41:45,280
coming up next

1079
00:41:45,280 --> 00:41:48,319
but that's it from me now and

1080
00:41:48,319 --> 00:41:50,960
i hope to see you in person next time

1081
00:41:50,960 --> 00:41:52,960
japan

1082
00:41:52,960 --> 00:41:56,960
all right mark golf and um

1083
00:41:56,960 --> 00:42:00,240
petros i just like to say that uh

1084
00:42:00,240 --> 00:42:03,200
it's really a difficult job for juan to

1085
00:42:03,200 --> 00:42:03,920
do the

1086
00:42:03,920 --> 00:42:05,440
the program chair job i think we should

1087
00:42:05,440 --> 00:42:08,400
give him a round of applause for that

1088
00:42:08,400 --> 00:42:10,560
thank you thank you and i'd like to show

1089
00:42:10,560 --> 00:42:11,599
off my new mic

1090
00:42:11,599 --> 00:42:14,319
which you can you complain about oh yeah

1091
00:42:14,319 --> 00:42:15,440
that's very nice

1092
00:42:15,440 --> 00:42:17,200
very expensive mic but it doesn't always

1093
00:42:17,200 --> 00:42:19,359
work

1094
00:42:20,160 --> 00:42:25,839
okay thanks internal chairs

1095
00:42:26,560 --> 00:42:29,920
i think i think before us kay

1096
00:42:29,920 --> 00:42:32,079
may say a few statistics about the

1097
00:42:32,079 --> 00:42:35,119
attendance of the

1098
00:42:35,119 --> 00:42:38,160
talks and yes

1099
00:42:38,160 --> 00:42:40,960
so uh compared to pkc last year which

1100
00:42:40,960 --> 00:42:42,960
was one of the first virtual conferences

1101
00:42:42,960 --> 00:42:44,160
that we ran

1102
00:42:44,160 --> 00:42:47,680
um during the covid pandemic

1103
00:42:47,680 --> 00:42:51,200
we actually have improved in terms of um

1104
00:42:51,200 --> 00:42:54,000
percentage of people who attend sessions

1105
00:42:54,000 --> 00:42:56,560
versus the amount of people

1106
00:42:56,560 --> 00:42:59,119
registered for the conference so well

1107
00:42:59,119 --> 00:43:00,000
done

1108
00:43:00,000 --> 00:43:03,119
and uh generally the attendance uh per

1109
00:43:03,119 --> 00:43:05,040
session was hovering around

1110
00:43:05,040 --> 00:43:08,079
i believe 29

1111
00:43:08,079 --> 00:43:12,240
um up from 23 uh this time last year

1112
00:43:12,240 --> 00:43:14,960
so that's pretty good that's all i've

1113
00:43:14,960 --> 00:43:17,200
got

1114
00:43:23,440 --> 00:43:27,839
you know you're muted

1115
00:43:28,720 --> 00:43:31,680
right yeah

1116
00:43:36,400 --> 00:43:39,520
okay uh right

1117
00:43:39,520 --> 00:43:43,520
so um thanks all for coming so i'll say

1118
00:43:43,520 --> 00:43:47,280
pretty much what juan said but a bit uh

1119
00:43:47,280 --> 00:43:51,040
longer uh so we tried twice to

1120
00:43:51,040 --> 00:43:54,000
uh to have the pkc in edinburgh

1121
00:43:54,000 --> 00:43:55,119
unfortunately

1122
00:43:55,119 --> 00:43:57,280
we weren't lucky enough so after trying

1123
00:43:57,280 --> 00:43:58,400
two times

1124
00:43:58,400 --> 00:44:00,400
and both times having a pandemic next

1125
00:44:00,400 --> 00:44:02,240
time we won't have it in edinburgh and

1126
00:44:02,240 --> 00:44:03,440
hopefully we're not going to have a

1127
00:44:03,440 --> 00:44:06,400
pandemic next year

1128
00:44:06,640 --> 00:44:10,960
right so um i want to

1129
00:44:11,200 --> 00:44:13,119
start with thanking many people and

1130
00:44:13,119 --> 00:44:14,400
mainly uh

1131
00:44:14,400 --> 00:44:16,880
above all uh kevin and kay because they

1132
00:44:16,880 --> 00:44:17,520
i mean

1133
00:44:17,520 --> 00:44:19,040
basically they run the conference i mean

1134
00:44:19,040 --> 00:44:21,680
we are general chairs

1135
00:44:21,680 --> 00:44:24,480
for the for not holding the conference

1136
00:44:24,480 --> 00:44:25,680
in edinburgh but

1137
00:44:25,680 --> 00:44:28,560
i mean they were the the real people uh

1138
00:44:28,560 --> 00:44:30,880
running the show

1139
00:44:30,880 --> 00:44:33,680
uh and would like also to thank uh the

1140
00:44:33,680 --> 00:44:34,880
support from iacr

1141
00:44:34,880 --> 00:44:38,160
both borg

1142
00:44:38,240 --> 00:44:42,560
meetings and the pkc steering committee

1143
00:44:42,560 --> 00:44:46,160
and the rest organizing team juan as

1144
00:44:46,160 --> 00:44:49,280
already said markle and the dimitris

1145
00:44:49,280 --> 00:44:50,000
caracostas

1146
00:44:50,000 --> 00:44:53,760
who was helped with a local organization

1147
00:44:53,760 --> 00:44:56,160
uh until the point that we decided that

1148
00:44:56,160 --> 00:44:57,839
it goes virtual both years

1149
00:44:57,839 --> 00:45:01,359
he was helping a lot and

1150
00:45:01,599 --> 00:45:03,200
taking care of the website and other

1151
00:45:03,200 --> 00:45:05,760
things

1152
00:45:05,760 --> 00:45:08,560
and of course uh we want to thank the

1153
00:45:08,560 --> 00:45:10,400
speakers

1154
00:45:10,400 --> 00:45:12,240
because that's what was this conference

1155
00:45:12,240 --> 00:45:14,560
about and the moderators for uh

1156
00:45:14,560 --> 00:45:17,440
making this work and of course the

1157
00:45:17,440 --> 00:45:19,040
audience because without the audience

1158
00:45:19,040 --> 00:45:22,560
there is no conference uh

1159
00:45:22,560 --> 00:45:25,040
right and finally we want to thank the

1160
00:45:25,040 --> 00:45:26,319
for the generosity

1161
00:45:26,319 --> 00:45:29,359
uh our sponsors uh input output

1162
00:45:29,359 --> 00:45:32,560
dfinity and uh

1163
00:45:33,040 --> 00:45:36,400
which stuck with us both

1164
00:45:36,400 --> 00:45:38,800
years even though there was no actual

1165
00:45:38,800 --> 00:45:40,640
conference and there was a

1166
00:45:40,640 --> 00:45:42,720
i mean impersonal conference there was

1167
00:45:42,720 --> 00:45:45,119
an actual conference

1168
00:45:45,119 --> 00:45:48,560
um okay so i'll give some statistics

1169
00:45:48,560 --> 00:45:50,400
also in terms of registration not in

1170
00:45:50,400 --> 00:45:52,240
terms of attendance

1171
00:45:52,240 --> 00:45:55,440
so there were 303 registrations

1172
00:45:55,440 --> 00:45:58,000
100 of those were students and 203 were

1173
00:45:58,000 --> 00:45:59,680
not students

1174
00:45:59,680 --> 00:46:02,079
and you can see the distribution of

1175
00:46:02,079 --> 00:46:03,280
different countries

1176
00:46:03,280 --> 00:46:06,240
or many people from us then there were

1177
00:46:06,240 --> 00:46:07,680
many people from europe

1178
00:46:07,680 --> 00:46:10,079
given the time zone was centered

1179
00:46:10,079 --> 00:46:11,520
eurocentric this time

1180
00:46:11,520 --> 00:46:14,880
i guess that was sensible

1181
00:46:14,880 --> 00:46:17,440
and among the european countries you can

1182
00:46:17,440 --> 00:46:18,319
also see

1183
00:46:18,319 --> 00:46:20,720
japan and this hints where the

1184
00:46:20,720 --> 00:46:21,680
conference will take

1185
00:46:21,680 --> 00:46:24,079
place next year i guess juan already

1186
00:46:24,079 --> 00:46:26,480
gave it

1187
00:46:27,280 --> 00:46:29,760
yeah so it's a it's gonna be in uh

1188
00:46:29,760 --> 00:46:31,200
yokohama in japan

1189
00:46:31,200 --> 00:46:34,720
uh and um here we have some dates

1190
00:46:34,720 --> 00:46:37,839
um already so uh this is in the

1191
00:46:37,839 --> 00:46:40,640
optimistic case that there will be a

1192
00:46:40,640 --> 00:46:43,119
physical in-person conference

1193
00:46:43,119 --> 00:46:46,319
with no other things happening

1194
00:46:46,319 --> 00:46:50,160
if of course they're planning for

1195
00:46:50,160 --> 00:46:52,640
plan b and c like hybrid or virtual

1196
00:46:52,640 --> 00:46:54,640
conferences

1197
00:46:54,640 --> 00:46:56,480
if necessary and the people that will

1198
00:46:56,480 --> 00:46:59,599
run the show next year will be

1199
00:46:59,599 --> 00:47:03,599
junji sikata and yohey watanabe

1200
00:47:03,599 --> 00:47:06,060
the two chairs

1201
00:47:06,060 --> 00:47:07,599
[Music]

1202
00:47:07,599 --> 00:47:11,680
and koichiro will be the

1203
00:47:11,680 --> 00:47:13,599
program chair and there are a number of

1204
00:47:13,599 --> 00:47:15,760
people in the local

1205
00:47:15,760 --> 00:47:19,119
organizing committee and

1206
00:47:19,119 --> 00:47:22,480
i guess from our side this

1207
00:47:22,480 --> 00:47:24,480
this is it i mean thanks for attending

1208
00:47:24,480 --> 00:47:26,160
this conference

1209
00:47:26,160 --> 00:47:30,160
and yeah we'll see you hopefully

1210
00:47:30,160 --> 00:47:39,839
in person and next year thanks

1211
00:47:42,880 --> 00:47:46,319
thank you is a great job

1212
00:47:46,800 --> 00:47:50,839
hey hi

1213
00:47:50,839 --> 00:47:54,799
okay okay thanks guys

