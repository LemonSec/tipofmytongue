1
00:00:01,040 --> 00:00:02,879
hi my name is fernando and i will be

2
00:00:02,879 --> 00:00:05,359
presenting on the success probability of

3
00:00:05,359 --> 00:00:06,720
solving unique svp

4
00:00:06,720 --> 00:00:10,480
via bkz in our work we investigate the

5
00:00:10,480 --> 00:00:10,960
cost

6
00:00:10,960 --> 00:00:12,639
of solving the learning with errors

7
00:00:12,639 --> 00:00:15,440
problem via lattice reduction

8
00:00:15,440 --> 00:00:17,520
our contributions are the following we

9
00:00:17,520 --> 00:00:18,720
extend previous work

10
00:00:18,720 --> 00:00:21,359
by alki metal and dagman soledad to

11
00:00:21,359 --> 00:00:22,640
estimate the cost of

12
00:00:22,640 --> 00:00:25,199
low probability attacks we

13
00:00:25,199 --> 00:00:26,400
experimentally verify

14
00:00:26,400 --> 00:00:29,599
the resulting model a gauss against

15
00:00:29,599 --> 00:00:32,399
gaussian secrets but also against binary

16
00:00:32,399 --> 00:00:34,239
and ternary secrets and errors

17
00:00:34,239 --> 00:00:37,280
as found sometimes in the literature

18
00:00:37,280 --> 00:00:38,800
we will also explain some low

19
00:00:38,800 --> 00:00:40,320
probability attacks that have been

20
00:00:40,320 --> 00:00:41,120
reported

21
00:00:41,120 --> 00:00:43,120
in the previous literature by albrecht

22
00:00:43,120 --> 00:00:44,960
at all

23
00:00:44,960 --> 00:00:47,120
and we finally determine the effect that

24
00:00:47,120 --> 00:00:48,640
this low probability attacks could

25
00:00:48,640 --> 00:00:50,000
potentially have

26
00:00:50,000 --> 00:00:54,239
on security estimates for cryptosystems

27
00:00:55,039 --> 00:00:57,520
i will now present some preliminaries we

28
00:00:57,520 --> 00:00:59,440
look in particular at the search variant

29
00:00:59,440 --> 00:01:01,440
of the learning with error problems

30
00:01:01,440 --> 00:01:04,799
where there is a fixed secret vector s

31
00:01:04,799 --> 00:01:06,320
which coefficients have been sampled

32
00:01:06,320 --> 00:01:07,920
from some distribution

33
00:01:07,920 --> 00:01:11,360
and that has dimension n and then we

34
00:01:11,360 --> 00:01:12,320
have an

35
00:01:12,320 --> 00:01:15,600
error vector e of dimension m

36
00:01:15,600 --> 00:01:17,280
where the coefficients have also been

37
00:01:17,280 --> 00:01:19,600
sampled from some distribution

38
00:01:19,600 --> 00:01:21,920
and usually the two distributions for s

39
00:01:21,920 --> 00:01:22,960
and e

40
00:01:22,960 --> 00:01:27,759
are the discrete gaussian then we have

41
00:01:27,759 --> 00:01:31,840
matrix a of uniformly sampled entries

42
00:01:31,840 --> 00:01:35,280
over zq and we are given the tuple

43
00:01:35,280 --> 00:01:38,560
a and a s plus e modulo q

44
00:01:38,560 --> 00:01:40,159
and we are also given the task of

45
00:01:40,159 --> 00:01:43,680
recovering the secret s

46
00:01:44,159 --> 00:01:46,320
one possible way of doing this is via

47
00:01:46,320 --> 00:01:48,560
the primal attack strategy

48
00:01:48,560 --> 00:01:51,040
where we construct a lattice containing

49
00:01:51,040 --> 00:01:53,040
a target vector t

50
00:01:53,040 --> 00:01:54,960
which is essentially a concatenation of

51
00:01:54,960 --> 00:01:56,640
the vectors

52
00:01:56,640 --> 00:01:58,960
s the vector e and the vector and the

53
00:01:58,960 --> 00:02:00,399
number one

54
00:02:00,399 --> 00:02:02,799
and we know that by construction our

55
00:02:02,799 --> 00:02:04,159
lattice contains this

56
00:02:04,159 --> 00:02:08,080
as the unique shortest vector up to sine

57
00:02:08,080 --> 00:02:10,000
then we use lattice reduction to recover

58
00:02:10,000 --> 00:02:12,160
this unique shortest vector

59
00:02:12,160 --> 00:02:13,840
essentially this is reducing the

60
00:02:13,840 --> 00:02:15,360
learning with errors problem

61
00:02:15,360 --> 00:02:17,840
to the unique shortest vector problem

62
00:02:17,840 --> 00:02:19,360
now when looking at the strategy there

63
00:02:19,360 --> 00:02:21,520
are two immediate questions

64
00:02:21,520 --> 00:02:24,160
first is how do we go about costing the

65
00:02:24,160 --> 00:02:25,680
attack

66
00:02:25,680 --> 00:02:29,200
and second is what happens if we change

67
00:02:29,200 --> 00:02:31,200
some of the parameters for example if we

68
00:02:31,200 --> 00:02:31,680
change

69
00:02:31,680 --> 00:02:34,080
the probability distribution from which

70
00:02:34,080 --> 00:02:34,800
s and e

71
00:02:34,800 --> 00:02:37,840
are sampled

72
00:02:38,400 --> 00:02:41,760
we now define some more useful objects

73
00:02:41,760 --> 00:02:44,319
given the linearly independent vectors

74
00:02:44,319 --> 00:02:46,400
b1 to bd

75
00:02:46,400 --> 00:02:48,800
of dimension d we say that these form a

76
00:02:48,800 --> 00:02:49,519
basis

77
00:02:49,519 --> 00:02:52,000
for the full rank lattice lambda compose

78
00:02:52,000 --> 00:02:53,120
essentially

79
00:02:53,120 --> 00:02:55,920
of the integer linear combinations of

80
00:02:55,920 --> 00:02:58,560
the vectors b

81
00:02:58,560 --> 00:03:01,840
given a basis we can also run

82
00:03:01,840 --> 00:03:03,760
the grange meat orthogonalization

83
00:03:03,760 --> 00:03:05,200
algorithm to obtain

84
00:03:05,200 --> 00:03:08,400
vectors that we denote as b star

85
00:03:08,400 --> 00:03:11,599
and now we define with these a basis

86
00:03:11,599 --> 00:03:12,720
profile this

87
00:03:12,720 --> 00:03:15,760
the set of the norms or the square norms

88
00:03:15,760 --> 00:03:16,879
in this case

89
00:03:16,879 --> 00:03:19,200
of our grand schmidt orthogonalized

90
00:03:19,200 --> 00:03:21,679
vectors

91
00:03:21,760 --> 00:03:24,400
finally we also define given a basis

92
00:03:24,400 --> 00:03:26,239
with the final projection operation

93
00:03:26,239 --> 00:03:29,840
pi that takes the basis and takes a

94
00:03:29,840 --> 00:03:33,200
index and then essentially maps

95
00:03:33,200 --> 00:03:37,120
any vectors in a d-dimensional space

96
00:03:37,120 --> 00:03:41,040
onto the orthogonal subspace

97
00:03:41,040 --> 00:03:43,120
that is orthogonal to the first in this

98
00:03:43,120 --> 00:03:44,400
case

99
00:03:44,400 --> 00:03:49,280
the first k minus 1 vectors in our basis

100
00:03:49,360 --> 00:03:51,599
given a lattice basis and a reduction

101
00:03:51,599 --> 00:03:52,959
algorithm a

102
00:03:52,959 --> 00:03:55,599
it is possible to predict the resulting

103
00:03:55,599 --> 00:03:57,200
basis profile

104
00:03:57,200 --> 00:04:00,959
for a reduced basis there are two ways

105
00:04:00,959 --> 00:04:02,239
of doing this

106
00:04:02,239 --> 00:04:03,760
the first is the geometric series

107
00:04:03,760 --> 00:04:05,599
assumption

108
00:04:05,599 --> 00:04:07,920
that states that for every algorithm a

109
00:04:07,920 --> 00:04:08,799
there is some

110
00:04:08,799 --> 00:04:11,840
coefficient alpha between 0 and 1 such

111
00:04:11,840 --> 00:04:14,000
that if we use that algorithm to reduce

112
00:04:14,000 --> 00:04:17,199
a basis its profile is going to be

113
00:04:17,199 --> 00:04:21,279
in a geometric series with alpha as the

114
00:04:21,279 --> 00:04:24,320
multiplicative coefficient

115
00:04:24,320 --> 00:04:26,199
the other way instead is to use an

116
00:04:26,199 --> 00:04:28,240
algorithm-specific simulator

117
00:04:28,240 --> 00:04:31,360
such as the bkc simulator by

118
00:04:31,360 --> 00:04:33,600
chen and nuyen which can predict the

119
00:04:33,600 --> 00:04:35,840
effect of running multiple tours

120
00:04:35,840 --> 00:04:38,960
of the reduction algorithm on the given

121
00:04:38,960 --> 00:04:39,680
basis

122
00:04:39,680 --> 00:04:42,960
and then it predicts the profile

123
00:04:42,960 --> 00:04:45,840
of the basis output after these tau

124
00:04:45,840 --> 00:04:46,400
tours

125
00:04:46,400 --> 00:04:49,520
let's say now i mentioned

126
00:04:49,520 --> 00:04:51,520
tours of bkz and we will see that these

127
00:04:51,520 --> 00:04:53,360
are the main step in lattice reduction

128
00:04:53,360 --> 00:04:54,800
algorithms that we will be

129
00:04:54,800 --> 00:04:58,560
analyzing in this work so uh and now

130
00:04:58,560 --> 00:05:04,639
talk briefly about what a bkz tour is

131
00:05:05,680 --> 00:05:08,880
on the left you can see a pseudocode

132
00:05:08,880 --> 00:05:12,000
describing what bkz2 does and

133
00:05:12,000 --> 00:05:15,840
on the right you can see a basis profile

134
00:05:15,840 --> 00:05:18,000
for a certain lattice

135
00:05:18,000 --> 00:05:19,440
essentially on the right we're plotting

136
00:05:19,440 --> 00:05:22,080
on the x axis the index

137
00:05:22,080 --> 00:05:25,120
of the basis vector and then on the y

138
00:05:25,120 --> 00:05:26,000
axis we are

139
00:05:26,000 --> 00:05:29,919
plotting a log plot of the norm of its

140
00:05:29,919 --> 00:05:33,520
grange mid vector what a big easy beta

141
00:05:33,520 --> 00:05:35,280
tour does

142
00:05:35,280 --> 00:05:38,320
is that we first look at the first

143
00:05:38,320 --> 00:05:43,039
beta coefficients in the lattice basis

144
00:05:43,039 --> 00:05:45,919
and we look at an orthogonal projection

145
00:05:45,919 --> 00:05:47,440
of the

146
00:05:47,440 --> 00:05:50,240
lattice spanned by those vector basis

147
00:05:50,240 --> 00:05:51,280
vectors

148
00:05:51,280 --> 00:05:54,720
and it calls a shortest vector problem

149
00:05:54,720 --> 00:05:57,360
oracle that is able to solve exactly the

150
00:05:57,360 --> 00:05:59,199
shortest vector problem

151
00:05:59,199 --> 00:06:02,319
in this sub lattice then

152
00:06:02,319 --> 00:06:04,560
if it finds a vector that is shorter

153
00:06:04,560 --> 00:06:06,080
than what was before

154
00:06:06,080 --> 00:06:08,479
it will insert that vector at the

155
00:06:08,479 --> 00:06:09,199
beginning

156
00:06:09,199 --> 00:06:13,600
of this local block of dimension beta

157
00:06:13,600 --> 00:06:15,360
and then we will run some it will run

158
00:06:15,360 --> 00:06:17,120
some ll to remove some linear

159
00:06:17,120 --> 00:06:18,720
dependencies

160
00:06:18,720 --> 00:06:20,960
and then we move our attention down to

161
00:06:20,960 --> 00:06:22,800
the right

162
00:06:22,800 --> 00:06:24,240
and essentially we'll repeat this

163
00:06:24,240 --> 00:06:26,240
process on the

164
00:06:26,240 --> 00:06:29,360
next beta coefficients that will be

165
00:06:29,360 --> 00:06:31,360
overlapping

166
00:06:31,360 --> 00:06:33,600
uh oracle for solving the shortest

167
00:06:33,600 --> 00:06:35,199
vector problem is called

168
00:06:35,199 --> 00:06:39,360
and then a shortest vector is found and

169
00:06:39,360 --> 00:06:40,960
is inserted at the beginning of this

170
00:06:40,960 --> 00:06:42,319
local block

171
00:06:42,319 --> 00:06:45,039
and this is repeated multiple times and

172
00:06:45,039 --> 00:06:46,720
as is repeated we can see

173
00:06:46,720 --> 00:06:49,520
that the lattice basis profile is

174
00:06:49,520 --> 00:06:51,039
changing and somewhat

175
00:06:51,039 --> 00:06:54,160
its slope is growing

176
00:06:54,160 --> 00:06:56,639
a little bit and then we get to the end

177
00:06:56,639 --> 00:06:57,680
of the basis

178
00:06:57,680 --> 00:06:59,440
and at that point it is not possible to

179
00:06:59,440 --> 00:07:01,440
keep moving to the right

180
00:07:01,440 --> 00:07:04,479
and so instead one reduces

181
00:07:04,479 --> 00:07:07,759
the dimensionality of the projective sub

182
00:07:07,759 --> 00:07:09,199
lattice that is being

183
00:07:09,199 --> 00:07:12,400
searched for short vectors

184
00:07:12,400 --> 00:07:15,440
now after enough tools are run the

185
00:07:15,440 --> 00:07:18,400
basis profile will start to converge to

186
00:07:18,400 --> 00:07:20,560
what the geometric series assumption

187
00:07:20,560 --> 00:07:23,680
predicted for for our lattice and for

188
00:07:23,680 --> 00:07:25,120
our algorithm

189
00:07:25,120 --> 00:07:28,160
here for example we can see in blue the

190
00:07:28,160 --> 00:07:30,960
basis profile of our radius basis and in

191
00:07:30,960 --> 00:07:32,960
orange we can see that almost exactly

192
00:07:32,960 --> 00:07:35,039
below the blue line we can

193
00:07:35,039 --> 00:07:38,000
the gsa had already predicted that this

194
00:07:38,000 --> 00:07:38,400
was

195
00:07:38,400 --> 00:07:41,599
uh going to be the basis profile output

196
00:07:41,599 --> 00:07:44,720
by bkz

197
00:07:44,720 --> 00:07:47,919
now the bkz beta tour as we said

198
00:07:47,919 --> 00:07:50,800
is a fundamental component of block-wise

199
00:07:50,800 --> 00:07:52,080
lattice reduction

200
00:07:52,080 --> 00:07:53,919
and from it we can define two different

201
00:07:53,919 --> 00:07:55,680
algorithms

202
00:07:55,680 --> 00:07:59,199
first we have bkz beta where in uh

203
00:07:59,199 --> 00:08:02,160
in our definition we run a fixed number

204
00:08:02,160 --> 00:08:02,960
of tours

205
00:08:02,960 --> 00:08:07,280
tau using a fixed block size beta

206
00:08:07,280 --> 00:08:10,000
the other algorithm is progressive bkz

207
00:08:10,000 --> 00:08:10,840
where we run

208
00:08:10,840 --> 00:08:14,240
bkz tours with an increasing block size

209
00:08:14,240 --> 00:08:17,280
again we have an input parameter tau

210
00:08:17,280 --> 00:08:19,440
and basically this says for every block

211
00:08:19,440 --> 00:08:21,199
size starting at three

212
00:08:21,199 --> 00:08:24,800
run tau tours of bkz beta

213
00:08:24,800 --> 00:08:26,720
now if we were trying to use one of

214
00:08:26,720 --> 00:08:28,479
these two algorithms as part of the

215
00:08:28,479 --> 00:08:30,160
primal attack

216
00:08:30,160 --> 00:08:32,000
we would not necessarily wait for the

217
00:08:32,000 --> 00:08:34,399
two algorithms to naturally return

218
00:08:34,399 --> 00:08:37,120
but rather after every bkc beta tour we

219
00:08:37,120 --> 00:08:37,760
would check

220
00:08:37,760 --> 00:08:40,880
if we were able to find a solution to

221
00:08:40,880 --> 00:08:41,200
the

222
00:08:41,200 --> 00:08:42,958
learning with errors instant that we are

223
00:08:42,958 --> 00:08:45,680
trying to solve

224
00:08:46,240 --> 00:08:48,640
now uh going back to our question we are

225
00:08:48,640 --> 00:08:49,360
trying to

226
00:08:49,360 --> 00:08:51,440
see what the cost of solving the

227
00:08:51,440 --> 00:08:53,600
learning with errors problem is

228
00:08:53,600 --> 00:08:56,000
so our objective as a reminder is to

229
00:08:56,000 --> 00:08:58,320
recover this vector t

230
00:08:58,320 --> 00:09:02,800
inside the lattice and in practice

231
00:09:02,800 --> 00:09:05,760
the recovery of t follows directly from

232
00:09:05,760 --> 00:09:06,640
recovering

233
00:09:06,640 --> 00:09:09,600
an orthogonal projection of t during a

234
00:09:09,600 --> 00:09:12,800
bkc beta tour

235
00:09:13,440 --> 00:09:16,560
now the analysis for this was done

236
00:09:16,560 --> 00:09:20,880
by alchemy tall in the new hope paper

237
00:09:20,880 --> 00:09:22,959
and essentially the idea is since

238
00:09:22,959 --> 00:09:25,360
recovery of t follows from recovery of

239
00:09:25,360 --> 00:09:27,600
this projection

240
00:09:27,600 --> 00:09:30,399
and recovery of this projection requires

241
00:09:30,399 --> 00:09:31,760
all the vectors

242
00:09:31,760 --> 00:09:34,720
in the basis to be taken account for

243
00:09:34,720 --> 00:09:37,200
this will most likely happen

244
00:09:37,200 --> 00:09:40,560
when we are running the

245
00:09:40,560 --> 00:09:44,000
svp oracle over the last

246
00:09:44,000 --> 00:09:47,120
beta indices of our basis

247
00:09:47,120 --> 00:09:51,360
after it reached almost the gsa

248
00:09:51,360 --> 00:09:54,880
the geometric series assumption profile

249
00:09:54,880 --> 00:09:57,120
so really what we're doing is if we want

250
00:09:57,120 --> 00:09:58,320
to solve

251
00:09:58,320 --> 00:10:00,480
the problem we want this projection to

252
00:10:00,480 --> 00:10:02,240
be the shortest vector

253
00:10:02,240 --> 00:10:05,519
in that subspace therefore what we have

254
00:10:05,519 --> 00:10:06,079
to do is

255
00:10:06,079 --> 00:10:09,519
estimate the length of a projection

256
00:10:09,519 --> 00:10:12,240
of the shortest vector and then we

257
00:10:12,240 --> 00:10:12,959
estimate

258
00:10:12,959 --> 00:10:16,560
what the lattice basis profile is going

259
00:10:16,560 --> 00:10:18,160
to be after reduction

260
00:10:18,160 --> 00:10:20,320
and we try to choose a block size that

261
00:10:20,320 --> 00:10:21,920
here we denote by

262
00:10:21,920 --> 00:10:25,600
beta star to mark it as the

263
00:10:25,600 --> 00:10:28,640
as the prediction done using this model

264
00:10:28,640 --> 00:10:31,519
we choose a beta star such that the

265
00:10:31,519 --> 00:10:33,519
projection of our target vector

266
00:10:33,519 --> 00:10:36,560
is shorter than what

267
00:10:36,560 --> 00:10:39,360
what the gsa says that we will find at

268
00:10:39,360 --> 00:10:39,760
that

269
00:10:39,760 --> 00:10:43,279
index in the basis and if it is the svp

270
00:10:43,279 --> 00:10:45,360
oracle will essentially recover this

271
00:10:45,360 --> 00:10:46,240
projection

272
00:10:46,240 --> 00:10:48,160
and place it into our basis and this

273
00:10:48,160 --> 00:10:50,640
will lead to recovery of the full

274
00:10:50,640 --> 00:10:54,079
secret vector this approach

275
00:10:54,079 --> 00:10:56,240
by alkyne metal was originally

276
00:10:56,240 --> 00:10:58,160
experimentally verified

277
00:10:58,160 --> 00:11:02,800
in albert at all in 2017.

278
00:11:02,800 --> 00:11:06,640
what the authors do is uh they set up

279
00:11:06,640 --> 00:11:09,920
for various secret dimensions uh some

280
00:11:09,920 --> 00:11:13,040
search lw instances and then they

281
00:11:13,040 --> 00:11:16,720
look for what is the predicted optimal

282
00:11:16,720 --> 00:11:17,839
block size for

283
00:11:17,839 --> 00:11:20,959
solving the lw problem using the

284
00:11:20,959 --> 00:11:24,079
alka metal analysis and then they try to

285
00:11:24,079 --> 00:11:25,839
solve the problem by using the primal

286
00:11:25,839 --> 00:11:27,440
attack strategy

287
00:11:27,440 --> 00:11:29,519
and indeed in this table we can see on

288
00:11:29,519 --> 00:11:31,839
the top row that if one chooses exactly

289
00:11:31,839 --> 00:11:34,800
the optimal block size

290
00:11:34,800 --> 00:11:38,320
one is then able to recover the

291
00:11:38,320 --> 00:11:41,279
lwe solution with very high probability

292
00:11:41,279 --> 00:11:42,880
however they also observed

293
00:11:42,880 --> 00:11:45,120
that if one were to choose a less than

294
00:11:45,120 --> 00:11:46,399
optimal block size

295
00:11:46,399 --> 00:11:48,720
that the theory would not directly

296
00:11:48,720 --> 00:11:50,560
predict to be successful

297
00:11:50,560 --> 00:11:53,519
it is still possible with a relatively

298
00:11:53,519 --> 00:11:55,519
high success probability to recover a

299
00:11:55,519 --> 00:11:56,720
solution to the lw

300
00:11:56,720 --> 00:12:00,560
problem now in this table we show

301
00:12:00,560 --> 00:12:03,600
the results where the gap between the

302
00:12:03,600 --> 00:12:04,639
block size

303
00:12:04,639 --> 00:12:07,680
and the optimal block size beta star was

304
00:12:07,680 --> 00:12:12,480
5 10 or 15 relatively small

305
00:12:12,480 --> 00:12:15,040
however it is not a priori clear whether

306
00:12:15,040 --> 00:12:16,560
this gap could increase

307
00:12:16,560 --> 00:12:19,360
as the secret dimension increases if

308
00:12:19,360 --> 00:12:19,839
that

309
00:12:19,839 --> 00:12:22,560
were the case one could imagine that for

310
00:12:22,560 --> 00:12:26,079
cryptographically size parameters

311
00:12:26,079 --> 00:12:30,479
maybe bigger gaps still allow for

312
00:12:30,560 --> 00:12:33,680
for high probability attacks and this of

313
00:12:33,680 --> 00:12:35,519
course could be a problem because

314
00:12:35,519 --> 00:12:38,560
the shortest vector oracle used inside

315
00:12:38,560 --> 00:12:40,800
the bkz beta tour is the main component

316
00:12:40,800 --> 00:12:42,880
of complexity in the attack

317
00:12:42,880 --> 00:12:44,560
and this complexity is exponential in

318
00:12:44,560 --> 00:12:46,639
the block size so reducing the block

319
00:12:46,639 --> 00:12:47,519
size too much

320
00:12:47,519 --> 00:12:49,360
would lead to a significantly cheaper

321
00:12:49,360 --> 00:12:51,440
attack our main contribution in this

322
00:12:51,440 --> 00:12:54,240
paper is to extend work by alki metal

323
00:12:54,240 --> 00:12:57,920
by doc mansoletal to predict exactly

324
00:12:57,920 --> 00:13:00,320
these success probabilities for lower

325
00:13:00,320 --> 00:13:03,040
than expected block size

326
00:13:03,040 --> 00:13:05,920
essentially what we do is that we try to

327
00:13:05,920 --> 00:13:07,360
simulate

328
00:13:07,360 --> 00:13:09,839
the probability of solving the unique

329
00:13:09,839 --> 00:13:11,279
shortest vector problem

330
00:13:11,279 --> 00:13:14,160
instant that is part of the primal

331
00:13:14,160 --> 00:13:15,680
attack strategy

332
00:13:15,680 --> 00:13:18,839
as we would be reducing the lattice

333
00:13:18,839 --> 00:13:21,279
basis so here more or less what we're

334
00:13:21,279 --> 00:13:23,279
doing is we're taking a description of

335
00:13:23,279 --> 00:13:25,760
an lwe instance

336
00:13:25,760 --> 00:13:28,000
and then we're starting to account for

337
00:13:28,000 --> 00:13:30,079
the probability of having solved it so

338
00:13:30,079 --> 00:13:30,959
far

339
00:13:30,959 --> 00:13:33,680
so we say okay we're running tau tools

340
00:13:33,680 --> 00:13:35,279
of bkz

341
00:13:35,279 --> 00:13:40,000
so for one to tau we will first simulate

342
00:13:40,000 --> 00:13:42,880
what the what the bkz simulator such as

343
00:13:42,880 --> 00:13:43,199
the

344
00:13:43,199 --> 00:13:46,240
one in chennai new yen

345
00:13:46,240 --> 00:13:48,240
predicts our basis profile is going to

346
00:13:48,240 --> 00:13:51,360
be at this point in time

347
00:13:51,360 --> 00:13:55,120
and then we are essentially looking at

348
00:13:55,120 --> 00:13:56,560
the probability

349
00:13:56,560 --> 00:13:59,760
that if we're at this point where we

350
00:13:59,760 --> 00:14:02,399
still have not reached what the

351
00:14:02,399 --> 00:14:04,160
geometric series assumption

352
00:14:04,160 --> 00:14:06,160
assumes to be the state of a reduced

353
00:14:06,160 --> 00:14:08,639
basis what is the probability that we

354
00:14:08,639 --> 00:14:10,160
are able to

355
00:14:10,160 --> 00:14:13,519
recover the projection of the target

356
00:14:13,519 --> 00:14:16,560
vector t that would lead to a solution

357
00:14:16,560 --> 00:14:18,959
and this can be done by computing the

358
00:14:18,959 --> 00:14:21,040
probability that such projection

359
00:14:21,040 --> 00:14:24,399
is the shortest vector

360
00:14:24,480 --> 00:14:27,120
in the local block that is being reduced

361
00:14:27,120 --> 00:14:29,360
at that moment

362
00:14:29,360 --> 00:14:32,079
and what we do is we essentially model

363
00:14:32,079 --> 00:14:32,560
these

364
00:14:32,560 --> 00:14:34,160
then the square norms of these

365
00:14:34,160 --> 00:14:35,760
projections to be

366
00:14:35,760 --> 00:14:38,399
um essentially a chi-square distribution

367
00:14:38,399 --> 00:14:39,680
that is scaled

368
00:14:39,680 --> 00:14:43,120
to match the variance of the lw

369
00:14:43,120 --> 00:14:46,399
secret distribution

370
00:14:47,680 --> 00:14:49,760
then what we do is that we essentially

371
00:14:49,760 --> 00:14:50,959
accumulate

372
00:14:50,959 --> 00:14:54,720
the probabilities of having indeed found

373
00:14:54,720 --> 00:14:58,399
this this short projection

374
00:14:58,399 --> 00:15:00,959
and and we move on to the first step

375
00:15:00,959 --> 00:15:02,079
again in the loop

376
00:15:02,079 --> 00:15:04,560
where we assume okay uh if if we have

377
00:15:04,560 --> 00:15:05,440
not found

378
00:15:05,440 --> 00:15:08,079
yet uh the target the shortest vector we

379
00:15:08,079 --> 00:15:09,360
will run another tour

380
00:15:09,360 --> 00:15:11,279
and so we will again use the big bkcc

381
00:15:11,279 --> 00:15:13,519
simulator to see what the state of the

382
00:15:13,519 --> 00:15:14,079
base is

383
00:15:14,079 --> 00:15:15,680
going to be at the end of the second

384
00:15:15,680 --> 00:15:17,519
tour we will compute the probability of

385
00:15:17,519 --> 00:15:19,040
winning at the second tour

386
00:15:19,040 --> 00:15:21,279
and we will accumulate it and so on for

387
00:15:21,279 --> 00:15:22,639
all touters

388
00:15:22,639 --> 00:15:25,680
finally we return the um what is

389
00:15:25,680 --> 00:15:28,079
essentially the probability of solving

390
00:15:28,079 --> 00:15:29,199
lw

391
00:15:29,199 --> 00:15:34,880
with a block size beta or smaller

392
00:15:35,440 --> 00:15:38,079
for progressive bkz the idea is exactly

393
00:15:38,079 --> 00:15:39,199
the same

394
00:15:39,199 --> 00:15:42,959
but we are increasing beta

395
00:15:42,959 --> 00:15:46,240
as the tours go and we do

396
00:15:46,240 --> 00:15:48,800
we simulate tools happening until the

397
00:15:48,800 --> 00:15:50,880
probability of solving a we is

398
00:15:50,880 --> 00:15:55,040
essentially one there is here a

399
00:15:55,040 --> 00:15:58,000
um a gotcha in the fact that we are

400
00:15:58,000 --> 00:15:58,880
assuming that

401
00:15:58,880 --> 00:16:01,600
these probabilities that we are uh

402
00:16:01,600 --> 00:16:02,880
accumulating

403
00:16:02,880 --> 00:16:06,240
are for independent events and indeed

404
00:16:06,240 --> 00:16:06,800
this is

405
00:16:06,800 --> 00:16:08,800
um this seems to be enough the case

406
00:16:08,800 --> 00:16:10,079
because

407
00:16:10,079 --> 00:16:12,480
the bkz tools are not just looking for

408
00:16:12,480 --> 00:16:13,920
these um

409
00:16:13,920 --> 00:16:15,519
projection of the target vector but

410
00:16:15,519 --> 00:16:17,199
they're also rerandomizing

411
00:16:17,199 --> 00:16:20,320
the bases and so although

412
00:16:20,320 --> 00:16:21,839
there are some exceptions that we

413
00:16:21,839 --> 00:16:24,160
address in the paper overall this seems

414
00:16:24,160 --> 00:16:25,279
to be a valid

415
00:16:25,279 --> 00:16:28,320
simplification next

416
00:16:28,320 --> 00:16:31,440
we run experiments to verify whether

417
00:16:31,440 --> 00:16:34,959
our algorithms that we call

418
00:16:34,959 --> 00:16:38,880
usvp simulators um are successfully able

419
00:16:38,880 --> 00:16:39,759
to predict

420
00:16:39,759 --> 00:16:42,880
um the probability of

421
00:16:42,880 --> 00:16:45,759
solving lwg given a certain block size

422
00:16:45,759 --> 00:16:47,680
in a certain algorithm

423
00:16:47,680 --> 00:16:51,120
how we went about it is that we chose lw

424
00:16:51,120 --> 00:16:52,079
parameters

425
00:16:52,079 --> 00:16:55,120
that were expected to require a block

426
00:16:55,120 --> 00:16:55,600
size

427
00:16:55,600 --> 00:16:59,839
of around 60 to be solved

428
00:16:59,920 --> 00:17:02,079
where we assume lwe to be parameterized

429
00:17:02,079 --> 00:17:04,799
such that the secret and the error terms

430
00:17:04,799 --> 00:17:08,000
are sampled from a gaussian distribution

431
00:17:08,000 --> 00:17:10,799
with a certain standard deviation sigma

432
00:17:10,799 --> 00:17:12,640
in this table we summarize the

433
00:17:12,640 --> 00:17:14,799
parameters that we used

434
00:17:14,799 --> 00:17:17,520
and we also show what the expected

435
00:17:17,520 --> 00:17:19,359
successful block size would be

436
00:17:19,359 --> 00:17:21,439
if we were to follow the alkyl metal

437
00:17:21,439 --> 00:17:23,359
analysis

438
00:17:23,359 --> 00:17:26,799
then we decided to study mainly two

439
00:17:26,799 --> 00:17:28,160
batches of experiments

440
00:17:28,160 --> 00:17:30,720
in sum we kept we use a discrete

441
00:17:30,720 --> 00:17:32,000
gaussian distribution to

442
00:17:32,000 --> 00:17:35,200
sample error in secret and

443
00:17:35,200 --> 00:17:37,039
in the other set we decided to instead

444
00:17:37,039 --> 00:17:38,480
try to

445
00:17:38,480 --> 00:17:41,919
attack binary instances of lwe that have

446
00:17:41,919 --> 00:17:42,640
either

447
00:17:42,640 --> 00:17:45,280
binary error in secret or ternary error

448
00:17:45,280 --> 00:17:46,160
and secret

449
00:17:46,160 --> 00:17:48,640
because we also we wanted also to see if

450
00:17:48,640 --> 00:17:49,360
uh

451
00:17:49,360 --> 00:17:51,440
these analysis holds in those cases

452
00:17:51,440 --> 00:17:53,200
where the distribution is much more

453
00:17:53,200 --> 00:17:54,400
concentrated

454
00:17:54,400 --> 00:17:57,039
than in a discrete gaussian case and

455
00:17:57,039 --> 00:17:58,080
indeed what we do

456
00:17:58,080 --> 00:18:01,600
is that um we reuse the same parameters

457
00:18:01,600 --> 00:18:03,440
for the secret dimension the same in the

458
00:18:03,440 --> 00:18:04,400
same queue

459
00:18:04,400 --> 00:18:06,559
and we observe that a ternary secret

460
00:18:06,559 --> 00:18:08,000
distribution

461
00:18:08,000 --> 00:18:10,080
will have standard deviation square root

462
00:18:10,080 --> 00:18:11,760
of two thirds

463
00:18:11,760 --> 00:18:14,240
just like we have chosen for the

464
00:18:14,240 --> 00:18:15,360
discrete gaussian

465
00:18:15,360 --> 00:18:19,520
case in the case of secret dimension 100

466
00:18:19,520 --> 00:18:22,799
and the centered binary distribution

467
00:18:22,799 --> 00:18:25,679
that we described in the paper has a

468
00:18:25,679 --> 00:18:27,280
standard deviation 1

469
00:18:27,280 --> 00:18:30,160
just like we had chosen for smaller than

470
00:18:30,160 --> 00:18:31,760
100 secret

471
00:18:31,760 --> 00:18:34,400
dimensions and so this will allow us to

472
00:18:34,400 --> 00:18:37,039
compare directly the cost of solving lw

473
00:18:37,039 --> 00:18:39,039
with a discrete gaussian secret an error

474
00:18:39,039 --> 00:18:41,039
or with a binary or ternary secret

475
00:18:41,039 --> 00:18:42,160
another

476
00:18:42,160 --> 00:18:45,039
and we would like to point out that the

477
00:18:45,039 --> 00:18:46,640
usbp simulators

478
00:18:46,640 --> 00:18:49,440
are not able to see the difference both

479
00:18:49,440 --> 00:18:50,080
rely

480
00:18:50,080 --> 00:18:53,520
essentially on on the standard deviation

481
00:18:53,520 --> 00:18:56,080
of the secret and error distribution and

482
00:18:56,080 --> 00:18:57,360
so they should

483
00:18:57,360 --> 00:18:59,440
both be able to predict the same

484
00:18:59,440 --> 00:19:02,320
hardness for the two different problems

485
00:19:02,320 --> 00:19:04,400
we also run multiple other variants of

486
00:19:04,400 --> 00:19:05,840
these experiments

487
00:19:05,840 --> 00:19:07,679
we will now look at some results but

488
00:19:07,679 --> 00:19:11,280
more can be found in the paper

489
00:19:11,280 --> 00:19:12,960
first we're going to look at gaussian

490
00:19:12,960 --> 00:19:14,640
error and secret

491
00:19:14,640 --> 00:19:18,240
when we reduce the bases using bkz

492
00:19:18,240 --> 00:19:21,919
and progressive bkz these are

493
00:19:21,919 --> 00:19:23,600
lots of plots but they are essentially

494
00:19:23,600 --> 00:19:25,679
the same plot repeated for different

495
00:19:25,679 --> 00:19:27,520
secret dimension

496
00:19:27,520 --> 00:19:32,240
um and what we are showing here is um

497
00:19:32,240 --> 00:19:35,760
for bkz run only for five tours

498
00:19:35,760 --> 00:19:38,799
or only for 10 tours or only for 15

499
00:19:38,799 --> 00:19:39,679
tours

500
00:19:39,679 --> 00:19:43,039
and for progressive bkz where every

501
00:19:43,039 --> 00:19:45,840
block size is used once

502
00:19:45,840 --> 00:19:50,559
we printed in a dashed line what the

503
00:19:50,559 --> 00:19:53,679
usb simulator predicts to be the

504
00:19:53,679 --> 00:19:58,080
success probability of solving lwe

505
00:19:58,080 --> 00:20:00,480
with the algorithm and when a block size

506
00:20:00,480 --> 00:20:01,280
that is

507
00:20:01,280 --> 00:20:04,240
smaller or equal than beta on the x-axis

508
00:20:04,240 --> 00:20:06,240
we have beta and on the y-axis we have

509
00:20:06,240 --> 00:20:08,240
this probability

510
00:20:08,240 --> 00:20:11,600
then the crosses are the experimental

511
00:20:11,600 --> 00:20:13,600
frequencies with which these algorithms

512
00:20:13,600 --> 00:20:14,960
are able to solve

513
00:20:14,960 --> 00:20:18,880
lwe from what we can see

514
00:20:18,880 --> 00:20:21,760
the simulators are able to relatively

515
00:20:21,760 --> 00:20:23,280
well predict the fact

516
00:20:23,280 --> 00:20:25,360
that this probability will not go

517
00:20:25,360 --> 00:20:27,360
instantly from 0 to 1

518
00:20:27,360 --> 00:20:31,360
at exactly the expected value of beta

519
00:20:31,360 --> 00:20:34,559
but rather that they grow and it also

520
00:20:34,559 --> 00:20:36,480
uh successfully predicts the fact that

521
00:20:36,480 --> 00:20:37,919
it's more likely

522
00:20:37,919 --> 00:20:41,919
to solve lw using 15 tours of bkz

523
00:20:41,919 --> 00:20:44,000
rather than just using five tours of big

524
00:20:44,000 --> 00:20:45,200
easy

525
00:20:45,200 --> 00:20:47,039
on the other hand if one wanted to only

526
00:20:47,039 --> 00:20:49,760
run five tools of pkz

527
00:20:49,760 --> 00:20:51,679
would need a larger block size to reach

528
00:20:51,679 --> 00:20:52,799
the same

529
00:20:52,799 --> 00:20:56,240
success probabilities then we look at

530
00:20:56,240 --> 00:20:56,960
the case of

531
00:20:56,960 --> 00:21:00,000
binary and ternary error in secret we

532
00:21:00,000 --> 00:21:02,480
will just plot

533
00:21:02,480 --> 00:21:04,960
progressive bkz here for simplicity and

534
00:21:04,960 --> 00:21:06,480
we plot three different

535
00:21:06,480 --> 00:21:08,799
cases of progressive bkz where every

536
00:21:08,799 --> 00:21:09,520
block size

537
00:21:09,520 --> 00:21:14,159
is used once or five times or 10 times

538
00:21:14,159 --> 00:21:16,720
here we can see again that the

539
00:21:16,720 --> 00:21:19,039
predictions from the usb simulator seems

540
00:21:19,039 --> 00:21:19,919
to

541
00:21:19,919 --> 00:21:22,640
more or less match what we find

542
00:21:22,640 --> 00:21:23,840
experimentally

543
00:21:23,840 --> 00:21:26,240
and that is that the probability of

544
00:21:26,240 --> 00:21:28,559
winning without certain block size or

545
00:21:28,559 --> 00:21:29,520
smaller

546
00:21:29,520 --> 00:21:33,039
grows as the expected blocked block size

547
00:21:33,039 --> 00:21:34,000
is approached

548
00:21:34,000 --> 00:21:35,919
and does not just go immediately of

549
00:21:35,919 --> 00:21:38,320
course from zero to one

550
00:21:38,320 --> 00:21:41,760
um something interesting of course

551
00:21:41,760 --> 00:21:43,760
is that uh the dashed lines which are

552
00:21:43,760 --> 00:21:44,799
the predictions

553
00:21:44,799 --> 00:21:46,480
are not aware of the fact that the

554
00:21:46,480 --> 00:21:49,520
secret is binary or ternary

555
00:21:49,520 --> 00:21:52,320
but rather they are only aware of the

556
00:21:52,320 --> 00:21:53,760
standard deviation

557
00:21:53,760 --> 00:21:55,840
of the distribution from which the

558
00:21:55,840 --> 00:21:58,159
secret and error were sampled

559
00:21:58,159 --> 00:22:00,480
therefore it would look like that

560
00:22:00,480 --> 00:22:01,280
ignoring

561
00:22:01,280 --> 00:22:03,520
possible combinatorial attacks like in

562
00:22:03,520 --> 00:22:05,200
the case of the hybrid attack

563
00:22:05,200 --> 00:22:08,880
if one were just to pick a binary say

564
00:22:08,880 --> 00:22:11,039
learning with our instance and try to

565
00:22:11,039 --> 00:22:12,720
run the primal attack

566
00:22:12,720 --> 00:22:14,880
without exploiting the fact that the

567
00:22:14,880 --> 00:22:17,120
error is binary in any sort of

568
00:22:17,120 --> 00:22:19,280
combinatorial way then the hardness

569
00:22:19,280 --> 00:22:20,400
seems to be the same

570
00:22:20,400 --> 00:22:22,799
as if the learning without instant had a

571
00:22:22,799 --> 00:22:24,320
discrete gaussian

572
00:22:24,320 --> 00:22:26,559
error and secret with a variance

573
00:22:26,559 --> 00:22:27,440
matching that

574
00:22:27,440 --> 00:22:30,960
of a binary distribution

575
00:22:30,960 --> 00:22:32,720
now we would like to look at one

576
00:22:32,720 --> 00:22:35,039
particular case of an effect that was

577
00:22:35,039 --> 00:22:35,840
somewhat

578
00:22:35,840 --> 00:22:38,640
disturbing our predictions here the plot

579
00:22:38,640 --> 00:22:40,080
that we're seeing is a similar

580
00:22:40,080 --> 00:22:42,400
plot on the x-axis we have the block

581
00:22:42,400 --> 00:22:43,919
size and on the y-axis we have the

582
00:22:43,919 --> 00:22:45,760
probability of solving

583
00:22:45,760 --> 00:22:49,120
lwe with a smaller or equal block size

584
00:22:49,120 --> 00:22:50,640
to beta

585
00:22:50,640 --> 00:22:53,919
in this case we're looking at secret

586
00:22:53,919 --> 00:22:56,159
dimension 72 which is the smallest that

587
00:22:56,159 --> 00:22:58,159
we use

588
00:22:58,159 --> 00:23:00,799
um and we're using progressive bkc to

589
00:23:00,799 --> 00:23:01,520
solve some

590
00:23:01,520 --> 00:23:05,360
gaussian lwe instance

591
00:23:05,360 --> 00:23:07,679
and we can notice that although

592
00:23:07,679 --> 00:23:08,559
generally

593
00:23:08,559 --> 00:23:11,440
the prediction by the usb simulator

594
00:23:11,440 --> 00:23:12,720
seems to be located

595
00:23:12,720 --> 00:23:16,080
around what the experiments find

596
00:23:16,080 --> 00:23:18,240
lots of experiments seems to be

597
00:23:18,240 --> 00:23:20,159
succeeding at solving the problem with

598
00:23:20,159 --> 00:23:21,600
significantly

599
00:23:21,600 --> 00:23:25,200
lower block size on the left

600
00:23:25,200 --> 00:23:29,039
and also that some experiments

601
00:23:29,200 --> 00:23:31,200
seem to have a lower than expected

602
00:23:31,200 --> 00:23:35,039
success probability on the top right

603
00:23:35,039 --> 00:23:37,200
we believe we found the cause for this

604
00:23:37,200 --> 00:23:38,480
discrepancy

605
00:23:38,480 --> 00:23:40,240
and that the cause is essentially the

606
00:23:40,240 --> 00:23:43,679
effect of sample variance

607
00:23:43,679 --> 00:23:47,520
now when we are given a lwe

608
00:23:47,520 --> 00:23:50,720
instance to solve we're essentially

609
00:23:50,720 --> 00:23:51,600
building

610
00:23:51,600 --> 00:23:55,919
this lattice basis that contains as we

611
00:23:55,919 --> 00:23:58,400
said a target vector t

612
00:23:58,400 --> 00:24:00,400
which has been sampled from a certain

613
00:24:00,400 --> 00:24:02,320
distribution

614
00:24:02,320 --> 00:24:05,840
and in our case we had this distribution

615
00:24:05,840 --> 00:24:07,919
be the secret the secret and the error

616
00:24:07,919 --> 00:24:08,960
distribution

617
00:24:08,960 --> 00:24:11,200
for example a gaussian distribution with

618
00:24:11,200 --> 00:24:13,039
variance one

619
00:24:13,039 --> 00:24:14,799
then the coefficients of t are

620
00:24:14,799 --> 00:24:16,240
essentially

621
00:24:16,240 --> 00:24:18,159
identically and independently

622
00:24:18,159 --> 00:24:19,600
distributed a

623
00:24:19,600 --> 00:24:23,520
coefficient sample from this gaussian

624
00:24:23,919 --> 00:24:25,840
now while the gaussian theoretically has

625
00:24:25,840 --> 00:24:27,520
variance one

626
00:24:27,520 --> 00:24:29,440
in practice we're only given a finite

627
00:24:29,440 --> 00:24:32,559
amount of samples from this distribution

628
00:24:32,559 --> 00:24:34,240
which are the coefficients of the target

629
00:24:34,240 --> 00:24:36,000
vector and

630
00:24:36,000 --> 00:24:38,880
these coefficients we have a certain

631
00:24:38,880 --> 00:24:39,679
sample mean

632
00:24:39,679 --> 00:24:42,720
which is the mean of the coefficients

633
00:24:42,720 --> 00:24:44,960
the mean value of the coefficients and

634
00:24:44,960 --> 00:24:46,080
also we can define

635
00:24:46,080 --> 00:24:48,320
something called the sample variance of

636
00:24:48,320 --> 00:24:50,080
these coefficients

637
00:24:50,080 --> 00:24:53,440
that um essentially plays the role of

638
00:24:53,440 --> 00:24:55,679
uh the variance of the distribution that

639
00:24:55,679 --> 00:24:57,600
the coefficients were sampled from

640
00:24:57,600 --> 00:25:01,840
in that we expect it to be the same

641
00:25:01,840 --> 00:25:04,960
however given a particular instance

642
00:25:04,960 --> 00:25:07,120
not necessarily it would be the case

643
00:25:07,120 --> 00:25:08,640
that the sample variance

644
00:25:08,640 --> 00:25:11,840
exactly matches the variance of the

645
00:25:11,840 --> 00:25:13,440
secret distribution

646
00:25:13,440 --> 00:25:16,960
and since the projections of the target

647
00:25:16,960 --> 00:25:18,000
vector

648
00:25:18,000 --> 00:25:20,000
really depend on the sample variance

649
00:25:20,000 --> 00:25:21,840
because the target vector has been

650
00:25:21,840 --> 00:25:22,480
sampled

651
00:25:22,480 --> 00:25:25,279
already when is given to us in the form

652
00:25:25,279 --> 00:25:26,080
of a

653
00:25:26,080 --> 00:25:28,640
learning with error instance our

654
00:25:28,640 --> 00:25:30,080
simulations will be off

655
00:25:30,080 --> 00:25:33,279
if the sample variance is not

656
00:25:33,279 --> 00:25:35,120
it's not close to the variance of the

657
00:25:35,120 --> 00:25:37,440
secret distribution

658
00:25:37,440 --> 00:25:40,000
to verify this theory that is that the

659
00:25:40,000 --> 00:25:42,240
sample variance

660
00:25:42,240 --> 00:25:44,799
being off causes our predictions to be

661
00:25:44,799 --> 00:25:46,240
off as well

662
00:25:46,240 --> 00:25:49,039
we decided to rerun these experiments

663
00:25:49,039 --> 00:25:50,799
but we

664
00:25:50,799 --> 00:25:54,080
specifically tried to sample instances

665
00:25:54,080 --> 00:25:57,039
of lwe with the sample variance was at

666
00:25:57,039 --> 00:25:58,240
mass two percent

667
00:25:58,240 --> 00:26:00,799
off from the variance of the secret and

668
00:26:00,799 --> 00:26:02,559
error distribution

669
00:26:02,559 --> 00:26:04,960
this way we know that uh the sample

670
00:26:04,960 --> 00:26:05,679
variant

671
00:26:05,679 --> 00:26:07,679
will not differ and so our predictions

672
00:26:07,679 --> 00:26:08,720
uh for the

673
00:26:08,720 --> 00:26:11,440
projections of the target vector should

674
00:26:11,440 --> 00:26:12,720
match

675
00:26:12,720 --> 00:26:14,320
what we can see in this plot is that

676
00:26:14,320 --> 00:26:16,400
indeed for the same predictions

677
00:26:16,400 --> 00:26:18,960
once the sample variant is controlled

678
00:26:18,960 --> 00:26:20,400
the success probability

679
00:26:20,400 --> 00:26:22,840
significantly better matches our

680
00:26:22,840 --> 00:26:25,360
predictions a good note about this is

681
00:26:25,360 --> 00:26:25,919
that

682
00:26:25,919 --> 00:26:28,480
well it might seem artificial to limit

683
00:26:28,480 --> 00:26:29,279
the lw

684
00:26:29,279 --> 00:26:32,640
instances only to quote unquote good lw

685
00:26:32,640 --> 00:26:34,320
instances where the sample variant is

686
00:26:34,320 --> 00:26:36,240
close to the standard deviation

687
00:26:36,240 --> 00:26:38,720
the sample variance itself has a

688
00:26:38,720 --> 00:26:39,520
variance that

689
00:26:39,520 --> 00:26:41,200
decreases with the dimension of the

690
00:26:41,200 --> 00:26:43,120
problem and so really for

691
00:26:43,120 --> 00:26:45,200
uh cryptographically size instances we

692
00:26:45,200 --> 00:26:46,559
don't expect

693
00:26:46,559 --> 00:26:48,480
the sample variance to deviate

694
00:26:48,480 --> 00:26:49,760
significantly

695
00:26:49,760 --> 00:26:51,840
from the variance of the secret and

696
00:26:51,840 --> 00:26:53,679
error distributions

697
00:26:53,679 --> 00:26:56,559
finally we use the usvp simulators to

698
00:26:56,559 --> 00:26:57,360
also

699
00:26:57,360 --> 00:26:59,440
explain the success probabilities

700
00:26:59,440 --> 00:27:00,880
reported in

701
00:27:00,880 --> 00:27:03,520
albrecht all indeed we can see that our

702
00:27:03,520 --> 00:27:04,960
simulator seems to

703
00:27:04,960 --> 00:27:07,679
explain why for some slightly smaller

704
00:27:07,679 --> 00:27:09,120
block sizes

705
00:27:09,120 --> 00:27:11,279
we could see non-negligible success

706
00:27:11,279 --> 00:27:12,240
probabilities

707
00:27:12,240 --> 00:27:16,240
with bkz having found a way of

708
00:27:16,240 --> 00:27:18,480
predicting the success probability that

709
00:27:18,480 --> 00:27:20,080
smaller than optimal block

710
00:27:20,080 --> 00:27:23,440
size will have we could now wonder what

711
00:27:23,440 --> 00:27:26,080
its impact will be on the security

712
00:27:26,080 --> 00:27:27,360
estimates for

713
00:27:27,360 --> 00:27:30,320
lattice-based cryptographic protocols

714
00:27:30,320 --> 00:27:32,159
here we are looking at a table

715
00:27:32,159 --> 00:27:34,960
that contains some estimates that would

716
00:27:34,960 --> 00:27:35,360
run

717
00:27:35,360 --> 00:27:38,320
for the three finalists chem finalists

718
00:27:38,320 --> 00:27:39,120
from the

719
00:27:39,120 --> 00:27:40,480
post quantum cryptography

720
00:27:40,480 --> 00:27:43,520
standardization process run by nist

721
00:27:43,520 --> 00:27:45,600
what we did is we took the parameters

722
00:27:45,600 --> 00:27:47,200
available at the time of writing

723
00:27:47,200 --> 00:27:49,520
that is the parameters from the second

724
00:27:49,520 --> 00:27:51,200
round of these schemes

725
00:27:51,200 --> 00:27:54,720
and we use the lwe estimator

726
00:27:54,720 --> 00:27:58,960
script to find what is the block size

727
00:27:58,960 --> 00:28:01,760
predicted using the methodology by

728
00:28:01,760 --> 00:28:02,799
alchemy tall

729
00:28:02,799 --> 00:28:05,520
that is beta star and we reported here

730
00:28:05,520 --> 00:28:08,879
on the leftmost column

731
00:28:08,960 --> 00:28:11,360
and then we decided to use our usb

732
00:28:11,360 --> 00:28:13,840
simulators to see whether

733
00:28:13,840 --> 00:28:16,000
what is the expected successful block

734
00:28:16,000 --> 00:28:16,880
size

735
00:28:16,880 --> 00:28:20,320
uh if instead we were to use a bkz

736
00:28:20,320 --> 00:28:23,360
2.0 with 15 tools or if they were you

737
00:28:23,360 --> 00:28:25,919
to use progressive bkz with either one

738
00:28:25,919 --> 00:28:27,919
or five doors

739
00:28:27,919 --> 00:28:32,159
for every block size and these are the

740
00:28:32,159 --> 00:28:35,200
numbers now

741
00:28:35,200 --> 00:28:37,760
you can see that actually all these

742
00:28:37,760 --> 00:28:38,480
numbers

743
00:28:38,480 --> 00:28:41,520
uh appear to be larger than the

744
00:28:41,520 --> 00:28:44,559
successful block size predicted using

745
00:28:44,559 --> 00:28:44,960
the

746
00:28:44,960 --> 00:28:48,559
alkyl metal methodology

747
00:28:48,559 --> 00:28:51,840
and this result was already found uh

748
00:28:51,840 --> 00:28:55,679
for some other schemes by dachman solid

749
00:28:55,679 --> 00:28:58,640
where their scripts were essentially

750
00:28:58,640 --> 00:29:00,240
just recovering these expected

751
00:29:00,240 --> 00:29:02,480
successful block size and also these

752
00:29:02,480 --> 00:29:04,399
seem to be larger than what the alkyl

753
00:29:04,399 --> 00:29:07,600
metal methodology

754
00:29:07,600 --> 00:29:11,200
originally predicted but then since we

755
00:29:11,200 --> 00:29:12,320
are extrapolating

756
00:29:12,320 --> 00:29:14,559
um somehow the full probability

757
00:29:14,559 --> 00:29:16,080
distribution

758
00:29:16,080 --> 00:29:19,279
of uh the successful block size of

759
00:29:19,279 --> 00:29:21,200
solving lwe

760
00:29:21,200 --> 00:29:23,200
we can also look at what is the standard

761
00:29:23,200 --> 00:29:24,399
deviation

762
00:29:24,399 --> 00:29:28,799
of the successful block size

763
00:29:30,880 --> 00:29:32,480
what we can see here is that the

764
00:29:32,480 --> 00:29:34,480
standard deviation stays relatively

765
00:29:34,480 --> 00:29:35,600
small

766
00:29:35,600 --> 00:29:38,840
even for cryptographically sized

767
00:29:38,840 --> 00:29:40,720
parameters

768
00:29:40,720 --> 00:29:42,799
and throughout it seems never to reach a

769
00:29:42,799 --> 00:29:46,399
value of 4 for example

770
00:29:47,679 --> 00:29:50,320
so summarizing we see that actually the

771
00:29:50,320 --> 00:29:52,399
expected successful block size is larger

772
00:29:52,399 --> 00:29:53,679
than alkyl metal

773
00:29:53,679 --> 00:29:55,440
and that is the variance of the

774
00:29:55,440 --> 00:29:59,279
successful blocks stays relatively small

775
00:29:59,279 --> 00:30:01,360
now both observe observations should be

776
00:30:01,360 --> 00:30:02,880
good news

777
00:30:02,880 --> 00:30:05,360
the fact that the variance stays small

778
00:30:05,360 --> 00:30:06,080
means that

779
00:30:06,080 --> 00:30:08,120
a successful block size cannot be

780
00:30:08,120 --> 00:30:09,600
significantly

781
00:30:09,600 --> 00:30:11,600
smaller than the expected successful

782
00:30:11,600 --> 00:30:12,640
block size

783
00:30:12,640 --> 00:30:14,320
that is that if we were to choose

784
00:30:14,320 --> 00:30:16,720
something significantly smaller we would

785
00:30:16,720 --> 00:30:19,200
uh very quickly incur in an attack that

786
00:30:19,200 --> 00:30:20,880
has essentially

787
00:30:20,880 --> 00:30:24,240
zero success probability so it should

788
00:30:24,240 --> 00:30:26,000
not be possible to run

789
00:30:26,000 --> 00:30:28,080
low probability attacks by just saying

790
00:30:28,080 --> 00:30:30,000
let's pick a much smaller

791
00:30:30,000 --> 00:30:33,520
a much smaller block size

792
00:30:33,760 --> 00:30:35,520
then on the other hand the fact that the

793
00:30:35,520 --> 00:30:37,120
expected block size is larger than

794
00:30:37,120 --> 00:30:38,720
predicted before

795
00:30:38,720 --> 00:30:40,960
means that the alkyl metal methodology

796
00:30:40,960 --> 00:30:43,360
underestimates the hardness of

797
00:30:43,360 --> 00:30:45,600
the learning with other problems and

798
00:30:45,600 --> 00:30:48,080
this is good news because it means that

799
00:30:48,080 --> 00:30:50,799
previously choosing parameters uh should

800
00:30:50,799 --> 00:30:52,480
still be secure against the primary

801
00:30:52,480 --> 00:30:53,200
attack

802
00:30:53,200 --> 00:30:54,679
but it it is a little bit

803
00:30:54,679 --> 00:30:56,960
counterintuitive because these usvp

804
00:30:56,960 --> 00:31:00,159
simulators are essentially accounting

805
00:31:00,159 --> 00:31:02,399
for the success probability of smaller

806
00:31:02,399 --> 00:31:04,799
than optimal or than previously

807
00:31:04,799 --> 00:31:06,240
predicted block sizes

808
00:31:06,240 --> 00:31:08,559
so how is it possible that the expected

809
00:31:08,559 --> 00:31:09,360
block size

810
00:31:09,360 --> 00:31:13,039
is is growing overall

811
00:31:13,600 --> 00:31:16,480
now we believe that we have identified

812
00:31:16,480 --> 00:31:16,880
why

813
00:31:16,880 --> 00:31:20,480
these expected block size is growing

814
00:31:20,480 --> 00:31:22,720
and this is not really caused by the usb

815
00:31:22,720 --> 00:31:23,840
simulation

816
00:31:23,840 --> 00:31:25,440
but rather is used by the fact that

817
00:31:25,440 --> 00:31:27,679
internally we are not using the

818
00:31:27,679 --> 00:31:29,279
geometric series assumption but we are

819
00:31:29,279 --> 00:31:30,000
using

820
00:31:30,000 --> 00:31:33,440
a bkz simulator um so

821
00:31:33,440 --> 00:31:35,840
just to recap here and ex and show this

822
00:31:35,840 --> 00:31:37,039
effect

823
00:31:37,039 --> 00:31:40,320
here we are looking at the um at part

824
00:31:40,320 --> 00:31:43,919
of the base as the gsa profile

825
00:31:43,919 --> 00:31:48,000
predicted predicted for kyber 512

826
00:31:48,000 --> 00:31:50,080
and in red we have the gsa line that we

827
00:31:50,080 --> 00:31:51,120
saw before

828
00:31:51,120 --> 00:31:54,559
while in purple we have the logarithm of

829
00:31:54,559 --> 00:31:55,840
the expected norm

830
00:31:55,840 --> 00:32:00,799
of the target vector during the attack

831
00:32:00,799 --> 00:32:04,559
now what the alchemy methodology does

832
00:32:04,559 --> 00:32:07,279
is to say let's find the point of

833
00:32:07,279 --> 00:32:09,120
intersection between these two lines and

834
00:32:09,120 --> 00:32:12,960
we choose beta the block size

835
00:32:12,960 --> 00:32:15,760
such that it reaches from the end of the

836
00:32:15,760 --> 00:32:19,279
basis to this intersection

837
00:32:19,279 --> 00:32:21,360
however since we're not using the

838
00:32:21,360 --> 00:32:23,679
geometric series assumption

839
00:32:23,679 --> 00:32:27,120
the line for the predicted uh

840
00:32:27,120 --> 00:32:29,200
reduced basis profile is slightly

841
00:32:29,200 --> 00:32:30,320
different and is the one

842
00:32:30,320 --> 00:32:32,640
predicted by the chennai yen bkc

843
00:32:32,640 --> 00:32:34,720
simulator

844
00:32:34,720 --> 00:32:37,840
with this line if we were to look at the

845
00:32:37,840 --> 00:32:41,760
intersection between the basis profile

846
00:32:41,760 --> 00:32:44,320
and the purple line that represents the

847
00:32:44,320 --> 00:32:46,000
norm of the projections of the target

848
00:32:46,000 --> 00:32:46,880
vector

849
00:32:46,880 --> 00:32:48,960
this intersection has moved to the left

850
00:32:48,960 --> 00:32:52,799
and so choosing the block size

851
00:32:52,799 --> 00:32:56,000
using the simulator output will lead to

852
00:32:56,000 --> 00:32:59,679
bigger block sizes

853
00:33:00,159 --> 00:33:02,720
now this effect will carry then to our

854
00:33:02,720 --> 00:33:05,279
usb simulator and similarly to the code

855
00:33:05,279 --> 00:33:08,000
by darkman solid at all

856
00:33:08,000 --> 00:33:11,039
simply because the gsa is never directly

857
00:33:11,039 --> 00:33:13,519
considered and instead

858
00:33:13,519 --> 00:33:17,039
simulations are always done

859
00:33:17,039 --> 00:33:18,640
this should then explain why the

860
00:33:18,640 --> 00:33:20,559
expected block size reported by

861
00:33:20,559 --> 00:33:23,760
this work is bigger than that by

862
00:33:23,760 --> 00:33:27,440
reported by the lwe estimator which

863
00:33:27,440 --> 00:33:29,120
internally uses

864
00:33:29,120 --> 00:33:31,600
the alchemical methodology and hence the

865
00:33:31,600 --> 00:33:34,880
geometric series assumption

866
00:33:34,880 --> 00:33:37,840
in conclusion in our work we capture the

867
00:33:37,840 --> 00:33:39,120
success probabilities

868
00:33:39,120 --> 00:33:41,279
of smaller than expected successful

869
00:33:41,279 --> 00:33:43,440
block sizes

870
00:33:43,440 --> 00:33:46,240
and we show a methodology that allows us

871
00:33:46,240 --> 00:33:47,519
to predict

872
00:33:47,519 --> 00:33:50,720
these probabilities the effects

873
00:33:50,720 --> 00:33:53,760
seem to be consistent across a secret

874
00:33:53,760 --> 00:33:56,559
and error distribution so we also

875
00:33:56,559 --> 00:33:59,679
show that using a

876
00:33:59,679 --> 00:34:01,840
binary or ternary distribution does not

877
00:34:01,840 --> 00:34:02,960
directly

878
00:34:02,960 --> 00:34:06,559
impact the cause of the primal attack

879
00:34:06,559 --> 00:34:09,679
without any extra combinatorial step

880
00:34:09,679 --> 00:34:12,480
finally uh we showed that uh the even

881
00:34:12,480 --> 00:34:13,599
accounting for the

882
00:34:13,599 --> 00:34:16,800
uh low success probability block sizes

883
00:34:16,800 --> 00:34:18,639
overall the hardness of the learning

884
00:34:18,639 --> 00:34:20,879
with error problems does not seem to be

885
00:34:20,879 --> 00:34:24,719
significantly impacted more details and

886
00:34:24,719 --> 00:34:27,040
many more experiments can be found on

887
00:34:27,040 --> 00:34:28,399
our eprint

888
00:34:28,399 --> 00:34:31,520
and also the code and the data used

889
00:34:31,520 --> 00:34:34,480
for producing all the plots and also the

890
00:34:34,480 --> 00:34:36,800
code for the usb simulators can be found

891
00:34:36,800 --> 00:34:38,560
on github

892
00:34:38,560 --> 00:34:42,960
thank you very much for your attention

