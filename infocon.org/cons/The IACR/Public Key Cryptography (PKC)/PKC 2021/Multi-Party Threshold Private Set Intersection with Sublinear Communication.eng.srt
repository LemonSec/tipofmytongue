1
00:00:00,799 --> 00:00:02,960
hello i'm pehan i'm going to present

2
00:00:02,960 --> 00:00:04,640
multiparty threshold privacy at

3
00:00:04,640 --> 00:00:05,520
intersection

4
00:00:05,520 --> 00:00:07,919
with sublinear communication this is

5
00:00:07,919 --> 00:00:09,519
joint work with sai krishna

6
00:00:09,519 --> 00:00:13,120
srinivasan and peter from visa research

7
00:00:13,120 --> 00:00:15,280
we start with the problem of private set

8
00:00:15,280 --> 00:00:17,440
intersection or psi for short

9
00:00:17,440 --> 00:00:19,600
well there are two parties alice and bob

10
00:00:19,600 --> 00:00:22,320
each of them has a private set x and y

11
00:00:22,320 --> 00:00:23,920
and they want to jointly compute the

12
00:00:23,920 --> 00:00:26,240
intersection of the two sets

13
00:00:26,240 --> 00:00:29,359
but nothing more in particular we don't

14
00:00:29,359 --> 00:00:31,679
want alice to learn anything about bob's

15
00:00:31,679 --> 00:00:32,719
other elements

16
00:00:32,719 --> 00:00:36,480
and vice versa they can run the secure

17
00:00:36,480 --> 00:00:37,120
two-party

18
00:00:37,120 --> 00:00:39,280
computation protocol and by the end of

19
00:00:39,280 --> 00:00:40,160
the protocol

20
00:00:40,160 --> 00:00:42,160
they can learn the intersection in this

21
00:00:42,160 --> 00:00:44,480
case it has two elements b and d

22
00:00:44,480 --> 00:00:48,000
but nothing more in particular alice

23
00:00:48,000 --> 00:00:50,000
would have no idea about bob's other

24
00:00:50,000 --> 00:00:50,640
elements

25
00:00:50,640 --> 00:00:54,000
and vice versa more generally

26
00:00:54,000 --> 00:00:56,559
we can consider multi-party psi where

27
00:00:56,559 --> 00:00:58,079
there are multiple parties

28
00:00:58,079 --> 00:01:01,280
each party has a private set x1 x2 up to

29
00:01:01,280 --> 00:01:02,399
xn

30
00:01:02,399 --> 00:01:04,239
and they want to jointly compute the

31
00:01:04,239 --> 00:01:07,680
intersection of all the sets

32
00:01:08,080 --> 00:01:09,760
similarly they can run a secure

33
00:01:09,760 --> 00:01:12,240
multi-party computation protocol

34
00:01:12,240 --> 00:01:14,159
and by the end of the protocol they can

35
00:01:14,159 --> 00:01:16,159
learn the intersection of all the sets

36
00:01:16,159 --> 00:01:19,840
but nothing more the psi problem

37
00:01:19,840 --> 00:01:22,479
has a lot of applications in practice

38
00:01:22,479 --> 00:01:23,680
for example

39
00:01:23,680 --> 00:01:26,799
private contact discovery as conversion

40
00:01:26,799 --> 00:01:27,840
measurement

41
00:01:27,840 --> 00:01:30,720
password bridge monitoring and alert and

42
00:01:30,720 --> 00:01:32,799
many more

43
00:01:32,799 --> 00:01:35,520
but in certain scenarios psi as a

44
00:01:35,520 --> 00:01:37,600
functionality is not sufficient

45
00:01:37,600 --> 00:01:40,640
we need something stronger for example

46
00:01:40,640 --> 00:01:43,119
threshold psi where the two parties are

47
00:01:43,119 --> 00:01:45,200
only supposed to learn the intersection

48
00:01:45,200 --> 00:01:47,439
if the intersection is sufficiently

49
00:01:47,439 --> 00:01:49,679
large

50
00:01:50,399 --> 00:01:51,920
and similarly in the multi-party

51
00:01:51,920 --> 00:01:53,759
scenario they're only supposed to learn

52
00:01:53,759 --> 00:01:55,680
the intersection if the intersection of

53
00:01:55,680 --> 00:01:56,560
all the sets

54
00:01:56,560 --> 00:01:59,600
is sufficiently large and social psi

55
00:01:59,600 --> 00:02:01,600
also has a lot of potential

56
00:02:01,600 --> 00:02:04,560
applications for example in privacy

57
00:02:04,560 --> 00:02:06,079
preserving machine learning

58
00:02:06,079 --> 00:02:08,479
multiple parties might want to jointly

59
00:02:08,479 --> 00:02:10,399
perform some machine learning algorithm

60
00:02:10,399 --> 00:02:13,920
on their common data but they might

61
00:02:13,920 --> 00:02:16,800
only want to collaborate if the common

62
00:02:16,800 --> 00:02:19,920
data is sufficiently large

63
00:02:19,920 --> 00:02:22,080
in privacy preserving right sharing

64
00:02:22,080 --> 00:02:23,920
multiple parties might only want to

65
00:02:23,920 --> 00:02:24,720
share a right

66
00:02:24,720 --> 00:02:26,560
if their common trajectory is

67
00:02:26,560 --> 00:02:29,280
sufficiently long

68
00:02:29,280 --> 00:02:31,280
now the next question is how to achieve

69
00:02:31,280 --> 00:02:33,519
threshold psi

70
00:02:33,519 --> 00:02:36,640
a natural approach is to first compute

71
00:02:36,640 --> 00:02:39,519
psi cardinality which is the size of the

72
00:02:39,519 --> 00:02:40,400
intersection

73
00:02:40,400 --> 00:02:42,400
and then check if it is sufficiently

74
00:02:42,400 --> 00:02:43,920
large

75
00:02:43,920 --> 00:02:46,319
and the best communication complexity

76
00:02:46,319 --> 00:02:48,400
that we can achieve

77
00:02:48,400 --> 00:02:51,599
using this approach is of order m

78
00:02:51,599 --> 00:02:55,120
where m is the size of the smallest set

79
00:02:55,120 --> 00:02:56,879
on the other hand there is a

80
00:02:56,879 --> 00:02:58,400
communication lower bound

81
00:02:58,400 --> 00:03:01,440
for psi cardinality that's also of order

82
00:03:01,440 --> 00:03:02,720
m

83
00:03:02,720 --> 00:03:04,720
so by looking at this upper bound and

84
00:03:04,720 --> 00:03:06,879
lower bound it seems like this is the

85
00:03:06,879 --> 00:03:08,879
best communication complexity

86
00:03:08,879 --> 00:03:12,560
that we can hope for for threshold psi

87
00:03:12,560 --> 00:03:16,400
but is it true surprisingly the answer

88
00:03:16,400 --> 00:03:18,080
is no

89
00:03:18,080 --> 00:03:21,200
in a recent work by gaussian simkin

90
00:03:21,200 --> 00:03:24,720
in 2019 they developed a new approach

91
00:03:24,720 --> 00:03:28,159
for two-party threshold psi where

92
00:03:28,159 --> 00:03:31,360
instead of computing the psi cardinality

93
00:03:31,360 --> 00:03:33,120
and then checking if it is sufficiently

94
00:03:33,120 --> 00:03:34,080
large

95
00:03:34,080 --> 00:03:35,920
they perform a private intersection

96
00:03:35,920 --> 00:03:37,599
cardinality testing

97
00:03:37,599 --> 00:03:39,680
to test if the intersection is

98
00:03:39,680 --> 00:03:41,200
sufficiently large

99
00:03:41,200 --> 00:03:43,519
and this way they can get around this

100
00:03:43,519 --> 00:03:47,200
lower bound for psi cardinality

101
00:03:47,200 --> 00:03:48,560
they can achieve communication

102
00:03:48,560 --> 00:03:51,200
complexity that only grows with the

103
00:03:51,200 --> 00:03:54,959
size of the set difference in particular

104
00:03:54,959 --> 00:03:57,439
they achieve the functionality that the

105
00:03:57,439 --> 00:03:58,879
two parties can only learn the

106
00:03:58,879 --> 00:04:00,080
intersection

107
00:04:00,080 --> 00:04:03,120
if the total set difference

108
00:04:03,120 --> 00:04:05,599
is of size at most t where t is the

109
00:04:05,599 --> 00:04:07,200
threshold

110
00:04:07,200 --> 00:04:09,200
so if the intersection is sufficiently

111
00:04:09,200 --> 00:04:11,280
large then the set difference is

112
00:04:11,280 --> 00:04:12,640
sufficiently small

113
00:04:12,640 --> 00:04:15,439
so this threshold t can be very small it

114
00:04:15,439 --> 00:04:16,320
could be

115
00:04:16,320 --> 00:04:19,918
sublinear in the set sizes

116
00:04:20,160 --> 00:04:22,800
and they achieve two protocols one based

117
00:04:22,800 --> 00:04:25,440
on fully homomorphic encryption or fhe

118
00:04:25,440 --> 00:04:28,960
with communication complexity order t

119
00:04:28,960 --> 00:04:31,600
and another protocol based on additively

120
00:04:31,600 --> 00:04:32,960
homomorphic encryption

121
00:04:32,960 --> 00:04:35,680
or ahg with communication complexity

122
00:04:35,680 --> 00:04:36,400
roughly t

123
00:04:36,400 --> 00:04:39,840
squared where this altitude here has a

124
00:04:39,840 --> 00:04:42,240
polylog factor

125
00:04:42,240 --> 00:04:43,919
and they further show a communication

126
00:04:43,919 --> 00:04:46,639
lower bound for such kind of cardinality

127
00:04:46,639 --> 00:04:47,680
testing

128
00:04:47,680 --> 00:04:51,280
of order t in the rest of the talk i

129
00:04:51,280 --> 00:04:52,160
will refer to

130
00:04:52,160 --> 00:04:55,280
this work as gs19

131
00:04:55,280 --> 00:04:58,720
and in this work um

132
00:04:58,720 --> 00:05:02,240
we ask uh two questions the first

133
00:05:02,240 --> 00:05:04,639
question is whether we can

134
00:05:04,639 --> 00:05:06,960
extend this new approach for two-party

135
00:05:06,960 --> 00:05:08,160
threshold psi

136
00:05:08,160 --> 00:05:11,600
to the multi-party case and second

137
00:05:11,600 --> 00:05:13,680
we notice there's a gap between the

138
00:05:13,680 --> 00:05:15,199
upper bound and lower bound

139
00:05:15,199 --> 00:05:17,199
for threshold psi from additively

140
00:05:17,199 --> 00:05:19,039
homomorphic encryption

141
00:05:19,039 --> 00:05:22,240
so can we can we bridge this gap can we

142
00:05:22,240 --> 00:05:23,840
achieve a better communication

143
00:05:23,840 --> 00:05:24,880
complexity

144
00:05:24,880 --> 00:05:28,479
from assumptions weaker than fhe

145
00:05:28,479 --> 00:05:30,320
i will talk about our results in a

146
00:05:30,320 --> 00:05:32,880
minute but before we dive into our

147
00:05:32,880 --> 00:05:33,919
results

148
00:05:33,919 --> 00:05:37,520
i want to take a step back to consider

149
00:05:37,520 --> 00:05:39,680
how to formally define multi-party

150
00:05:39,680 --> 00:05:41,680
threshold psi

151
00:05:41,680 --> 00:05:44,800
at a high level uh the parties will only

152
00:05:44,800 --> 00:05:46,800
be able to learn the intersection

153
00:05:46,800 --> 00:05:48,639
if the intersection is sufficiently

154
00:05:48,639 --> 00:05:49,840
large

155
00:05:49,840 --> 00:05:52,400
but what does sufficiently large mean

156
00:05:52,400 --> 00:05:55,440
how should we define sufficiently large

157
00:05:55,440 --> 00:05:57,120
and there are actually different ways to

158
00:05:57,120 --> 00:05:59,039
define it

159
00:05:59,039 --> 00:06:01,600
the first option is to define it as they

160
00:06:01,600 --> 00:06:03,680
can only learn the intersection

161
00:06:03,680 --> 00:06:07,840
if the set difference of every set x

162
00:06:07,840 --> 00:06:11,199
i and the intersection i is of size at

163
00:06:11,199 --> 00:06:12,800
most t

164
00:06:12,800 --> 00:06:15,360
this is equivalent to saying the set

165
00:06:15,360 --> 00:06:17,440
intersection is sufficiently large

166
00:06:17,440 --> 00:06:21,440
it is at least the size of each set

167
00:06:21,440 --> 00:06:25,039
minus t so this is one way to define

168
00:06:25,039 --> 00:06:28,319
multiply threshold psi and another way

169
00:06:28,319 --> 00:06:30,720
to define it

170
00:06:30,720 --> 00:06:32,840
is that the parties can only learn the

171
00:06:32,840 --> 00:06:34,080
intersection

172
00:06:34,080 --> 00:06:36,160
if the set difference between the union

173
00:06:36,160 --> 00:06:37,840
of all the sets

174
00:06:37,840 --> 00:06:41,199
and the intersection is of size at most

175
00:06:41,199 --> 00:06:42,479
t

176
00:06:42,479 --> 00:06:44,639
so this is essentially saying that the

177
00:06:44,639 --> 00:06:46,319
entire set difference

178
00:06:46,319 --> 00:06:49,680
is sufficiently small if you think about

179
00:06:49,680 --> 00:06:51,120
these two definitions

180
00:06:51,120 --> 00:06:53,440
they seem to be very similar and they

181
00:06:53,440 --> 00:06:55,599
seem to be defining the same thing from

182
00:06:55,599 --> 00:06:59,360
two different perspectives and in fact

183
00:06:59,360 --> 00:07:01,680
in the two-party scenario these two

184
00:07:01,680 --> 00:07:04,080
definitions are equivalent

185
00:07:04,080 --> 00:07:06,319
and the reason is that when there are

186
00:07:06,319 --> 00:07:07,759
only two sets

187
00:07:07,759 --> 00:07:10,400
then this set difference between the

188
00:07:10,400 --> 00:07:11,039
union

189
00:07:11,039 --> 00:07:14,400
and the intersection is exactly

190
00:07:14,400 --> 00:07:16,880
the first set difference plus the second

191
00:07:16,880 --> 00:07:18,479
set difference

192
00:07:18,479 --> 00:07:20,400
and if we further assume the two sets

193
00:07:20,400 --> 00:07:21,759
have the same size

194
00:07:21,759 --> 00:07:24,960
then this is exactly two times a single

195
00:07:24,960 --> 00:07:27,039
set difference

196
00:07:27,039 --> 00:07:29,680
however this is not true in the

197
00:07:29,680 --> 00:07:31,599
multi-party scenario

198
00:07:31,599 --> 00:07:34,400
in particular this equation no longer

199
00:07:34,400 --> 00:07:35,360
holds

200
00:07:35,360 --> 00:07:37,919
in the multi-party case and this is not

201
00:07:37,919 --> 00:07:40,319
a constant anymore

202
00:07:40,319 --> 00:07:42,560
and the reason is that in a multi-party

203
00:07:42,560 --> 00:07:43,440
scenario

204
00:07:43,440 --> 00:07:46,319
apart from the intersection the rest of

205
00:07:46,319 --> 00:07:48,000
the sets

206
00:07:48,000 --> 00:07:51,440
could be overlapping by very little

207
00:07:51,440 --> 00:07:54,319
or they could be could be overlapping by

208
00:07:54,319 --> 00:07:56,000
a lot

209
00:07:56,000 --> 00:07:58,080
and that's why these two definitions are

210
00:07:58,080 --> 00:07:59,599
so different

211
00:07:59,599 --> 00:08:02,000
and in fact the set difference between

212
00:08:02,000 --> 00:08:02,960
the union

213
00:08:02,960 --> 00:08:05,280
and the intersection could be anywhere

214
00:08:05,280 --> 00:08:06,479
between two times

215
00:08:06,479 --> 00:08:09,840
a single set difference to n times a

216
00:08:09,840 --> 00:08:11,280
single set difference

217
00:08:11,280 --> 00:08:14,000
where ends the number of parties and

218
00:08:14,000 --> 00:08:15,759
because these two definitions are so

219
00:08:15,759 --> 00:08:16,960
different

220
00:08:16,960 --> 00:08:20,240
in our work we consider both

221
00:08:20,240 --> 00:08:21,440
functionalities

222
00:08:21,440 --> 00:08:23,520
we refer to the first functionality as

223
00:08:23,520 --> 00:08:25,199
tpsi inc

224
00:08:25,199 --> 00:08:28,240
which considers the intersection to be

225
00:08:28,240 --> 00:08:31,280
sufficiently large and with we refer to

226
00:08:31,280 --> 00:08:34,640
the second functionality as tpsi div

227
00:08:34,640 --> 00:08:37,599
where the we consider the set difference

228
00:08:37,599 --> 00:08:40,000
to be sufficiently small

229
00:08:40,000 --> 00:08:41,599
and now we're ready to present our

230
00:08:41,599 --> 00:08:44,080
results

231
00:08:44,159 --> 00:08:47,600
so we consider both functionalities for

232
00:08:47,600 --> 00:08:49,600
multi-party threshold psi and we

233
00:08:49,600 --> 00:08:51,040
consider

234
00:08:51,040 --> 00:08:52,560
communication lower bound and

235
00:08:52,560 --> 00:08:55,440
communication upper bound

236
00:08:55,440 --> 00:08:58,080
in terms of lower bound we show a lower

237
00:08:58,080 --> 00:08:58,959
bound of order

238
00:08:58,959 --> 00:09:02,160
n times t for both functionalities where

239
00:09:02,160 --> 00:09:05,040
n is the number of parties and t is the

240
00:09:05,040 --> 00:09:06,399
threshold

241
00:09:06,399 --> 00:09:08,640
and the lower bound is proved in point

242
00:09:08,640 --> 00:09:11,279
to point fully connected networks

243
00:09:11,279 --> 00:09:14,640
in terms of upper bound we construct

244
00:09:14,640 --> 00:09:17,920
three different protocols two

245
00:09:17,920 --> 00:09:20,880
from n out of n threshold fully

246
00:09:20,880 --> 00:09:22,240
homomorphic encryption

247
00:09:22,240 --> 00:09:26,640
or tfhe and one protocol from

248
00:09:26,640 --> 00:09:29,440
nato and threshold additively homophobic

249
00:09:29,440 --> 00:09:30,080
encryption

250
00:09:30,080 --> 00:09:33,279
or tahe with the communication

251
00:09:33,279 --> 00:09:34,320
complexity

252
00:09:34,320 --> 00:09:38,080
listed in the table so tfhe and

253
00:09:38,080 --> 00:09:41,120
thc can be thought of as fh

254
00:09:41,120 --> 00:09:44,800
and ahe in a distributed manner by

255
00:09:44,800 --> 00:09:46,560
multiple parties

256
00:09:46,560 --> 00:09:49,360
so all the parties can jointly generate

257
00:09:49,360 --> 00:09:51,120
a public key and a secret key

258
00:09:51,120 --> 00:09:53,040
that supports fully homomorphic

259
00:09:53,040 --> 00:09:54,880
encryption or additively homophobic

260
00:09:54,880 --> 00:09:55,680
encryption

261
00:09:55,680 --> 00:09:58,160
but the secret key is shared by all the

262
00:09:58,160 --> 00:09:58,959
parties

263
00:09:58,959 --> 00:10:01,839
so they can only do a decryption jointly

264
00:10:01,839 --> 00:10:05,120
by other parties together

265
00:10:05,120 --> 00:10:07,120
and all these upper bound all these

266
00:10:07,120 --> 00:10:08,560
protocols are secure

267
00:10:08,560 --> 00:10:10,560
against semi-honest adversaries

268
00:10:10,560 --> 00:10:13,360
corrupting up to minus one parties

269
00:10:13,360 --> 00:10:16,160
so these are our main results next i

270
00:10:16,160 --> 00:10:17,519
want to mention a few

271
00:10:17,519 --> 00:10:20,880
implications from these results

272
00:10:20,880 --> 00:10:22,880
first as i mentioned these two

273
00:10:22,880 --> 00:10:24,880
functionalities are equivalent

274
00:10:24,880 --> 00:10:27,360
in the two-party scenario and if we if

275
00:10:27,360 --> 00:10:29,200
we set n equals two

276
00:10:29,200 --> 00:10:31,760
then actually we can achieve a two-party

277
00:10:31,760 --> 00:10:32,880
threshold psi

278
00:10:32,880 --> 00:10:34,880
from additively homophobic encryption

279
00:10:34,880 --> 00:10:37,120
with communication complexity roughly

280
00:10:37,120 --> 00:10:38,880
order t

281
00:10:38,880 --> 00:10:41,040
this solves an open problem from the

282
00:10:41,040 --> 00:10:42,399
gs19 work

283
00:10:42,399 --> 00:10:45,760
as i mentioned earlier and second

284
00:10:45,760 --> 00:10:48,240
although these functionalities are only

285
00:10:48,240 --> 00:10:48,959
for threat

286
00:10:48,959 --> 00:10:51,680
for multi-party threshold psi they can

287
00:10:51,680 --> 00:10:52,800
actually be used

288
00:10:52,800 --> 00:10:55,440
to achieve multi-party psi with

289
00:10:55,440 --> 00:10:56,959
communication complexity

290
00:10:56,959 --> 00:10:59,440
that only grows with the size of the set

291
00:10:59,440 --> 00:11:00,399
difference

292
00:11:00,399 --> 00:11:03,200
which could be sublinear in the set

293
00:11:03,200 --> 00:11:04,000
sizes

294
00:11:04,000 --> 00:11:07,120
if the set difference is very small and

295
00:11:07,120 --> 00:11:08,399
this can be done by

296
00:11:08,399 --> 00:11:10,320
doing a binary search on the set

297
00:11:10,320 --> 00:11:11,440
difference

298
00:11:11,440 --> 00:11:14,560
on the size of the set difference

299
00:11:14,560 --> 00:11:17,040
and finally these protocols can be

300
00:11:17,040 --> 00:11:17,920
thought of

301
00:11:17,920 --> 00:11:20,560
as a compact mpc for specific

302
00:11:20,560 --> 00:11:21,920
functionalities

303
00:11:21,920 --> 00:11:23,839
where the communication complexity is

304
00:11:23,839 --> 00:11:26,320
sub-linear in the output size

305
00:11:26,320 --> 00:11:29,519
in the output length because in these

306
00:11:29,519 --> 00:11:30,959
functionalities

307
00:11:30,959 --> 00:11:33,440
the output is the intersection which

308
00:11:33,440 --> 00:11:35,120
could be much larger than the set

309
00:11:35,120 --> 00:11:36,240
difference

310
00:11:36,240 --> 00:11:37,760
could be much larger than the

311
00:11:37,760 --> 00:11:40,839
communication complexity

312
00:11:40,839 --> 00:11:43,760
okay these are our results

313
00:11:43,760 --> 00:11:45,920
next i want to briefly talk about the

314
00:11:45,920 --> 00:11:49,120
high level ideas of our techniques

315
00:11:49,120 --> 00:11:52,800
for lower bound we do a reduction from

316
00:11:52,800 --> 00:11:55,040
two-party threshold psi to multi-party

317
00:11:55,040 --> 00:11:56,160
threshold psi

318
00:11:56,160 --> 00:11:58,800
and then we can rely on the lower bound

319
00:11:58,800 --> 00:12:00,720
proved in the gs19 work

320
00:12:00,720 --> 00:12:04,320
for two-party threshold psi and then for

321
00:12:04,320 --> 00:12:07,440
upper bound all these three protocols

322
00:12:07,440 --> 00:12:09,839
follow the same paradigm that is the

323
00:12:09,839 --> 00:12:11,680
protocol has two steps

324
00:12:11,680 --> 00:12:14,480
the first step is a multi-party private

325
00:12:14,480 --> 00:12:15,279
intersection

326
00:12:15,279 --> 00:12:18,320
cardinality testing to test whether the

327
00:12:18,320 --> 00:12:20,560
intersection is sufficiently large

328
00:12:20,560 --> 00:12:22,560
or the set difference is sufficiently

329
00:12:22,560 --> 00:12:24,560
small and in this step

330
00:12:24,560 --> 00:12:27,200
the parties will only learn a single bit

331
00:12:27,200 --> 00:12:28,560
indicating

332
00:12:28,560 --> 00:12:30,880
if the cardinality testing is passed or

333
00:12:30,880 --> 00:12:32,240
not

334
00:12:32,240 --> 00:12:34,480
if it is passed then they will move on

335
00:12:34,480 --> 00:12:35,680
to the second step

336
00:12:35,680 --> 00:12:39,600
to compute the actual set intersection

337
00:12:39,600 --> 00:12:41,519
for the first step again we will

338
00:12:41,519 --> 00:12:42,880
consider two

339
00:12:42,880 --> 00:12:46,240
functionalities c test inc and c

340
00:12:46,240 --> 00:12:49,200
test diff for whether the intersection

341
00:12:49,200 --> 00:12:51,040
is sufficiently large or the set

342
00:12:51,040 --> 00:12:53,519
difference is sufficiently small

343
00:12:53,519 --> 00:12:54,720
corresponding to

344
00:12:54,720 --> 00:12:58,480
these two these two functionalities

345
00:12:58,480 --> 00:13:00,079
and we construct three different

346
00:13:00,079 --> 00:13:01,600
protocols two

347
00:13:01,600 --> 00:13:05,200
from tfhe and one from tahe

348
00:13:05,200 --> 00:13:07,680
with communication complexity listed in

349
00:13:07,680 --> 00:13:09,600
the table

350
00:13:09,600 --> 00:13:11,680
for the second step we construct a

351
00:13:11,680 --> 00:13:13,680
single protocol from tahee

352
00:13:13,680 --> 00:13:16,639
with communication complexity n times t

353
00:13:16,639 --> 00:13:19,120
that works for both functionalities

354
00:13:19,120 --> 00:13:21,600
and then by combining the cardinality

355
00:13:21,600 --> 00:13:22,480
testing

356
00:13:22,480 --> 00:13:25,440
and the second step we can achieve these

357
00:13:25,440 --> 00:13:26,800
three protocols

358
00:13:26,800 --> 00:13:29,600
for the two multiparty threshold psi

359
00:13:29,600 --> 00:13:32,480
functionalities

360
00:13:32,880 --> 00:13:34,560
and next i want to mention two

361
00:13:34,560 --> 00:13:37,040
concurrent work

362
00:13:37,040 --> 00:13:40,560
the first is the full version of gs19

363
00:13:40,560 --> 00:13:42,320
where they extend the two-party

364
00:13:42,320 --> 00:13:45,120
threshold psi to the multi-party case

365
00:13:45,120 --> 00:13:47,279
and they consider the first

366
00:13:47,279 --> 00:13:49,040
functionality

367
00:13:49,040 --> 00:13:52,399
tpsi inc and they present a protocol

368
00:13:52,399 --> 00:13:55,279
from tfh

369
00:13:55,279 --> 00:13:57,760
and the second concurrent work is by

370
00:13:57,760 --> 00:14:00,079
brand called dotli and poo

371
00:14:00,079 --> 00:14:02,160
which was also published in pkc this

372
00:14:02,160 --> 00:14:03,199
year

373
00:14:03,199 --> 00:14:05,199
they considered the cardinality testing

374
00:14:05,199 --> 00:14:06,639
for the first functionality

375
00:14:06,639 --> 00:14:09,920
c-test int and they construct a protocol

376
00:14:09,920 --> 00:14:12,399
with communication complexity roughly n

377
00:14:12,399 --> 00:14:14,160
times t-square

378
00:14:14,160 --> 00:14:17,519
from tahee and by

379
00:14:17,519 --> 00:14:19,199
combining this cardinality testing

380
00:14:19,199 --> 00:14:21,519
protocol with the second step

381
00:14:21,519 --> 00:14:24,720
they can achieve a protocol for tpsi

382
00:14:24,720 --> 00:14:27,519
inc with the same function with the same

383
00:14:27,519 --> 00:14:28,480
communication

384
00:14:28,480 --> 00:14:31,600
complexity from tihe so they complement

385
00:14:31,600 --> 00:14:34,079
our work

386
00:14:34,959 --> 00:14:37,920
in the rest of the talk i want to focus

387
00:14:37,920 --> 00:14:38,639
on

388
00:14:38,639 --> 00:14:41,680
two of our protocols one is for c

389
00:14:41,680 --> 00:14:45,839
test int from tfhe and the other is for

390
00:14:45,839 --> 00:14:48,880
c-test diff from tihe

391
00:14:48,880 --> 00:14:51,120
and these ideas are also used in the

392
00:14:51,120 --> 00:14:53,519
other protocols

393
00:14:53,519 --> 00:14:55,519
for simplicity we will assume all the

394
00:14:55,519 --> 00:14:57,040
sets have the same size

395
00:14:57,040 --> 00:14:59,760
but if they don't then we can pad the

396
00:14:59,760 --> 00:15:02,000
smaller sets with dummy elements

397
00:15:02,000 --> 00:15:04,959
to make all the sets have to make all

398
00:15:04,959 --> 00:15:05,920
the sets

399
00:15:05,920 --> 00:15:09,519
have the same size so first

400
00:15:09,519 --> 00:15:13,760
uh protocol for c testing

401
00:15:13,760 --> 00:15:16,800
the functionality is the following the

402
00:15:16,800 --> 00:15:18,880
parties will learn a single bit

403
00:15:18,880 --> 00:15:21,839
from this functionality and the output

404
00:15:21,839 --> 00:15:22,720
bit

405
00:15:22,720 --> 00:15:25,760
is is equal to one if and only if the

406
00:15:25,760 --> 00:15:26,079
set

407
00:15:26,079 --> 00:15:28,959
difference between every set x i and the

408
00:15:28,959 --> 00:15:30,160
intersection

409
00:15:30,160 --> 00:15:33,360
is of size at most t

410
00:15:33,360 --> 00:15:36,560
so this is the functionality and the

411
00:15:36,560 --> 00:15:38,320
high level idea for the

412
00:15:38,320 --> 00:15:41,759
tfh-based protocol is the following

413
00:15:41,759 --> 00:15:43,839
first every party will define a

414
00:15:43,839 --> 00:15:44,800
polynomial

415
00:15:44,800 --> 00:15:49,279
based on their private set that is

416
00:15:49,279 --> 00:15:52,320
defined as the product of x

417
00:15:52,320 --> 00:15:55,839
minus each element in their set

418
00:15:55,839 --> 00:15:58,959
so in this example there are three sets

419
00:15:58,959 --> 00:16:00,959
and each party will define their own

420
00:16:00,959 --> 00:16:05,759
polynomial p1 of x p2 of x and p3 of x

421
00:16:05,759 --> 00:16:08,880
and then we consider a rational

422
00:16:08,880 --> 00:16:11,839
function p of x which is a fraction of

423
00:16:11,839 --> 00:16:13,759
two polynomials

424
00:16:13,759 --> 00:16:16,240
where the numerator is a summation of

425
00:16:16,240 --> 00:16:17,680
the polynomials from

426
00:16:17,680 --> 00:16:20,880
p2 of x up to pn of x

427
00:16:20,880 --> 00:16:22,560
and the denominator is a single

428
00:16:22,560 --> 00:16:25,199
polynomial p 1 of x

429
00:16:25,199 --> 00:16:28,079
if we write out this rational function

430
00:16:28,079 --> 00:16:29,279
in this example

431
00:16:29,279 --> 00:16:32,000
then we can see that the elements in the

432
00:16:32,000 --> 00:16:34,720
intersection will be cancelled out

433
00:16:34,720 --> 00:16:36,639
and what's remaining in the numerator

434
00:16:36,639 --> 00:16:37,839
and denominator

435
00:16:37,839 --> 00:16:40,880
are exactly the set differences so now

436
00:16:40,880 --> 00:16:42,480
we only need to check

437
00:16:42,480 --> 00:16:45,120
if the numerator and denominator both

438
00:16:45,120 --> 00:16:47,440
have degree at most t

439
00:16:47,440 --> 00:16:50,240
that is to test whether the rational

440
00:16:50,240 --> 00:16:50,959
function p

441
00:16:50,959 --> 00:16:54,639
of x has degree at most 2t

442
00:16:54,639 --> 00:16:58,160
or equivalently whether the rational

443
00:16:58,160 --> 00:16:58,880
function p

444
00:16:58,880 --> 00:17:02,160
of x can be interpolated from 2t plus 1

445
00:17:02,160 --> 00:17:03,360
evaluations

446
00:17:03,360 --> 00:17:05,520
and this can be done homomorphically

447
00:17:05,520 --> 00:17:08,000
under tfhe

448
00:17:08,000 --> 00:17:10,160
in more detail the protocol works as

449
00:17:10,160 --> 00:17:11,520
follows

450
00:17:11,520 --> 00:17:13,760
first the end parties were joined to

451
00:17:13,760 --> 00:17:16,079
jointly generate a public key and secret

452
00:17:16,079 --> 00:17:16,720
key

453
00:17:16,720 --> 00:17:20,240
for the tfh scheme where the public key

454
00:17:20,240 --> 00:17:21,039
is known

455
00:17:21,039 --> 00:17:23,280
to every party and the secret key is

456
00:17:23,280 --> 00:17:25,839
shared by all the parties

457
00:17:25,839 --> 00:17:27,919
so decryption can only be done jointly

458
00:17:27,919 --> 00:17:30,080
by all the parties together

459
00:17:30,080 --> 00:17:32,880
and next every party will evaluate their

460
00:17:32,880 --> 00:17:34,240
own polynomial

461
00:17:34,240 --> 00:17:36,960
on two t plus one different points alpha

462
00:17:36,960 --> 00:17:38,480
one up to alpha two t

463
00:17:38,480 --> 00:17:41,520
plus one and additionally evaluated

464
00:17:41,520 --> 00:17:44,960
uh on a random point z and then

465
00:17:44,960 --> 00:17:47,520
all the parties will encrypt all these

466
00:17:47,520 --> 00:17:48,559
evaluations

467
00:17:48,559 --> 00:17:51,120
and send these encryptions to the first

468
00:17:51,120 --> 00:17:52,559
party

469
00:17:52,559 --> 00:17:54,000
and then the first party can

470
00:17:54,000 --> 00:17:56,000
homomorphically interpolate

471
00:17:56,000 --> 00:17:58,559
the rational function p of x from 2t

472
00:17:58,559 --> 00:18:00,160
plus 1 evaluations

473
00:18:00,160 --> 00:18:02,799
and then homomorphically test if the

474
00:18:02,799 --> 00:18:04,799
interpolation is correct

475
00:18:04,799 --> 00:18:08,000
by verifying if p of z is equal to

476
00:18:08,000 --> 00:18:10,799
the value computed from p one of z up to

477
00:18:10,799 --> 00:18:11,039
p

478
00:18:11,039 --> 00:18:15,600
n of z and this homomorphic evaluation

479
00:18:15,600 --> 00:18:18,720
will result in an encryption of a single

480
00:18:18,720 --> 00:18:19,840
bit b

481
00:18:19,840 --> 00:18:21,840
and finally the parties can jointly

482
00:18:21,840 --> 00:18:25,600
decrypt the final result b

483
00:18:25,600 --> 00:18:29,200
and then we're done this protocol

484
00:18:29,200 --> 00:18:31,760
seems to be correct but there is

485
00:18:31,760 --> 00:18:32,400
actually

486
00:18:32,400 --> 00:18:36,640
a subtle issue that's related to

487
00:18:36,640 --> 00:18:39,840
the polynomial cancellation

488
00:18:39,840 --> 00:18:42,880
so if we look at this cancellation step

489
00:18:42,880 --> 00:18:44,799
the elements in the intersection will be

490
00:18:44,799 --> 00:18:45,919
cancelled out

491
00:18:45,919 --> 00:18:48,240
for sure from the numerator and

492
00:18:48,240 --> 00:18:50,000
denominator

493
00:18:50,000 --> 00:18:52,320
but there actually might be some

494
00:18:52,320 --> 00:18:53,360
unexpected

495
00:18:53,360 --> 00:18:56,400
cancelling out and here is a concrete

496
00:18:56,400 --> 00:18:57,280
example

497
00:18:57,280 --> 00:18:59,600
where we consider three sets and every

498
00:18:59,600 --> 00:19:00,480
set contains

499
00:19:00,480 --> 00:19:03,520
two elements and if we write out this

500
00:19:03,520 --> 00:19:07,360
rational function we notice that

501
00:19:07,360 --> 00:19:11,120
the the interest uh the elements in the

502
00:19:11,120 --> 00:19:11,919
intersection

503
00:19:11,919 --> 00:19:16,000
will be cancelled out but additionally

504
00:19:16,000 --> 00:19:18,320
uh the polynomials might be cancelled

505
00:19:18,320 --> 00:19:19,919
out

506
00:19:19,919 --> 00:19:23,200
uh in an unexpected way

507
00:19:23,200 --> 00:19:26,320
so to fix this issue we add a random

508
00:19:26,320 --> 00:19:27,440
term to every

509
00:19:27,440 --> 00:19:30,000
polynomial the first party will add a

510
00:19:30,000 --> 00:19:31,039
random

511
00:19:31,039 --> 00:19:33,679
term x minus r1 to the first polynomial

512
00:19:33,679 --> 00:19:34,400
p1

513
00:19:34,400 --> 00:19:37,039
the second party will add the random

514
00:19:37,039 --> 00:19:37,679
term

515
00:19:37,679 --> 00:19:39,919
x minus r2 to the second polynomial and

516
00:19:39,919 --> 00:19:40,960
so on

517
00:19:40,960 --> 00:19:43,840
and after adding all these random terms

518
00:19:43,840 --> 00:19:46,640
we can make sure that

519
00:19:46,640 --> 00:19:48,960
we can make sure that the unexpected

520
00:19:48,960 --> 00:19:50,160
cancelling out would

521
00:19:50,160 --> 00:19:53,360
no longer happen and this same idea

522
00:19:53,360 --> 00:19:55,280
is also used in the second step to

523
00:19:55,280 --> 00:19:59,120
compute the actual set intersection

524
00:19:59,120 --> 00:20:00,720
and that's the high level idea for the

525
00:20:00,720 --> 00:20:02,320
first protocol and next

526
00:20:02,320 --> 00:20:04,640
let's see the protocol for c-test diff

527
00:20:04,640 --> 00:20:07,120
from t-he

528
00:20:07,120 --> 00:20:10,640
again the the functionality for seed has

529
00:20:10,640 --> 00:20:12,799
to deal with the following

530
00:20:12,799 --> 00:20:14,880
the parties will learn a single bit from

531
00:20:14,880 --> 00:20:16,799
this functionality

532
00:20:16,799 --> 00:20:19,360
and the bit is one if and only if the

533
00:20:19,360 --> 00:20:20,880
set difference between

534
00:20:20,880 --> 00:20:23,360
the union of all the sets and the

535
00:20:23,360 --> 00:20:24,480
intersection

536
00:20:24,480 --> 00:20:28,480
is of size at most t the high level idea

537
00:20:28,480 --> 00:20:29,280
for

538
00:20:29,280 --> 00:20:32,480
tihe based protocol is the following

539
00:20:32,480 --> 00:20:35,280
first every party will construct another

540
00:20:35,280 --> 00:20:36,880
polynomial

541
00:20:36,880 --> 00:20:39,360
that's different from before now it's a

542
00:20:39,360 --> 00:20:41,360
summation of

543
00:20:41,360 --> 00:20:44,720
x to the power of each element

544
00:20:44,720 --> 00:20:46,559
so they will construct the polynomial as

545
00:20:46,559 --> 00:20:48,000
p 1 x p 2

546
00:20:48,000 --> 00:20:51,440
of x and p 3 of x and then we consider a

547
00:20:51,440 --> 00:20:52,320
polynomial p

548
00:20:52,320 --> 00:20:55,360
of x which is defined as n minus 1 times

549
00:20:55,360 --> 00:20:56,799
the first polynomial

550
00:20:56,799 --> 00:20:59,840
minus the remaining polynomials p 2 of x

551
00:20:59,840 --> 00:21:03,840
up to p n of x and if we write it out

552
00:21:03,840 --> 00:21:06,320
we will see that only the intersection

553
00:21:06,320 --> 00:21:08,080
only the elements in the intersection

554
00:21:08,080 --> 00:21:09,600
will be cancelled out

555
00:21:09,600 --> 00:21:12,799
and the polynomial becomes like this

556
00:21:12,799 --> 00:21:16,320
if we look at it the number of monomials

557
00:21:16,320 --> 00:21:17,520
in this polynomial

558
00:21:17,520 --> 00:21:22,240
is exactly the total set difference

559
00:21:22,320 --> 00:21:24,559
so we only need to test if the number of

560
00:21:24,559 --> 00:21:25,520
monomials

561
00:21:25,520 --> 00:21:27,919
in the polynomial p of x is less than or

562
00:21:27,919 --> 00:21:30,159
equal to t

563
00:21:30,159 --> 00:21:34,080
to test that the work of grigor rescue

564
00:21:34,080 --> 00:21:35,679
at all in 2010

565
00:21:35,679 --> 00:21:39,600
and gs19 noticed that this problem can

566
00:21:39,600 --> 00:21:40,799
be reduced to

567
00:21:40,799 --> 00:21:43,200
the problem of testing singularity of a

568
00:21:43,200 --> 00:21:44,559
hanko matrix

569
00:21:44,559 --> 00:21:47,039
that looks like this where u is a random

570
00:21:47,039 --> 00:21:47,760
element

571
00:21:47,760 --> 00:21:49,440
and p is the polynomial that we're

572
00:21:49,440 --> 00:21:51,120
interested in

573
00:21:51,120 --> 00:21:53,840
and the gs19 work stopped here and let

574
00:21:53,840 --> 00:21:55,440
the two parties jointly

575
00:21:55,440 --> 00:21:57,120
test the singularity of this temple

576
00:21:57,120 --> 00:21:58,480
matrix

577
00:21:58,480 --> 00:22:02,240
but in our work we further noticed that

578
00:22:02,240 --> 00:22:05,760
this problem can be further reduced to

579
00:22:05,760 --> 00:22:08,880
another problem called half gcd

580
00:22:08,880 --> 00:22:12,799
by the work of brent at all in 1980

581
00:22:12,799 --> 00:22:15,520
and this half gcd problem can be solved

582
00:22:15,520 --> 00:22:16,960
in time

583
00:22:16,960 --> 00:22:20,480
t log square t by the work of thor and

584
00:22:20,480 --> 00:22:24,400
yep in 1990

585
00:22:24,400 --> 00:22:26,799
so by doing this additional step we can

586
00:22:26,799 --> 00:22:28,159
reduce the

587
00:22:28,159 --> 00:22:30,720
communication capacity from roughly t

588
00:22:30,720 --> 00:22:31,520
squared to

589
00:22:31,520 --> 00:22:34,720
roughly t to summarize

590
00:22:34,720 --> 00:22:37,440
we formalize the problem of multi-party

591
00:22:37,440 --> 00:22:38,559
threshold psi

592
00:22:38,559 --> 00:22:40,640
by two different functionalities and we

593
00:22:40,640 --> 00:22:42,640
study its communication lower bound and

594
00:22:42,640 --> 00:22:45,280
upper bound

595
00:22:45,360 --> 00:22:47,280
finally i want to mention a few open

596
00:22:47,280 --> 00:22:49,039
problems in terms of

597
00:22:49,039 --> 00:22:51,760
efficiency can we achieve better upper

598
00:22:51,760 --> 00:22:53,440
bound for c test int

599
00:22:53,440 --> 00:22:56,640
from tihe can we achieve better around

600
00:22:56,640 --> 00:22:57,679
complexity

601
00:22:57,679 --> 00:23:00,640
and practically more efficient protocols

602
00:23:00,640 --> 00:23:01,360
for

603
00:23:01,360 --> 00:23:04,960
threshold psi and in terms of security

604
00:23:04,960 --> 00:23:07,440
can we achieve threshold psi with

605
00:23:07,440 --> 00:23:08,960
malicious security

606
00:23:08,960 --> 00:23:11,600
and finally our lower bound our

607
00:23:11,600 --> 00:23:13,440
communication lower bond are approved

608
00:23:13,440 --> 00:23:16,080
for net for networks with point-to-point

609
00:23:16,080 --> 00:23:17,840
communication channels

610
00:23:17,840 --> 00:23:20,320
is there any difference in networks with

611
00:23:20,320 --> 00:23:22,880
broadcast channels

612
00:23:22,880 --> 00:23:24,400
and that's it thank you for your

613
00:23:24,400 --> 00:23:27,360
attention

