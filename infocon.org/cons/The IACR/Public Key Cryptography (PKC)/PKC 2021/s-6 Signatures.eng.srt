1
00:00:01,040 --> 00:00:02,399
okay you're good to go have a good

2
00:00:02,399 --> 00:00:04,240
session

3
00:00:04,240 --> 00:00:07,170
okay uh hello everyone good morning

4
00:00:07,170 --> 00:00:10,259
[Music]

5
00:00:11,120 --> 00:00:13,599
good afternoon good evening we have six

6
00:00:13,599 --> 00:00:15,200
stocks in the session

7
00:00:15,200 --> 00:00:17,199
please use this zulip chat for posting

8
00:00:17,199 --> 00:00:18,240
questions so

9
00:00:18,240 --> 00:00:20,480
if not you can post even on zoom here

10
00:00:20,480 --> 00:00:21,359
okay the first

11
00:00:21,359 --> 00:00:24,800
talk is on uh uh

12
00:00:24,800 --> 00:00:28,240
signatures and uh max

13
00:00:28,240 --> 00:00:32,159
and uh valerio cena

14
00:00:36,160 --> 00:00:39,280
uh can you

15
00:00:39,280 --> 00:00:42,840
see the slides yes

16
00:00:42,840 --> 00:00:45,920
okay perfect so uh

17
00:00:45,920 --> 00:00:47,920
so thanks for the introduction and so i

18
00:00:47,920 --> 00:00:49,680
said uh i will be talking about

19
00:00:49,680 --> 00:00:51,520
uh updatable signature and message

20
00:00:51,520 --> 00:00:53,280
authentication codes

21
00:00:53,280 --> 00:00:55,520
so the the motivation for this work was

22
00:00:55,520 --> 00:00:57,440
the observation that as in the context

23
00:00:57,440 --> 00:00:58,559
of encryption

24
00:00:58,559 --> 00:01:00,559
also for authentication so for signature

25
00:01:00,559 --> 00:01:02,320
and max it's important to follow

26
00:01:02,320 --> 00:01:05,119
good key management practices and to

27
00:01:05,119 --> 00:01:06,960
periodically switch keys

28
00:01:06,960 --> 00:01:10,080
so this to avoid the risk of the key be

29
00:01:10,080 --> 00:01:12,000
compromise if used for uh for an

30
00:01:12,000 --> 00:01:13,920
extended period of time

31
00:01:13,920 --> 00:01:15,680
so the the solution for this program

32
00:01:15,680 --> 00:01:17,119
that we envision

33
00:01:17,119 --> 00:01:20,320
is the is a primitive where

34
00:01:20,320 --> 00:01:23,439
the the user can rotate keys and at the

35
00:01:23,439 --> 00:01:24,320
same time

36
00:01:24,320 --> 00:01:27,439
uh compute school update token that

37
00:01:27,439 --> 00:01:29,600
allows the user to update signatures or

38
00:01:29,600 --> 00:01:31,840
max from the old key to the to the new

39
00:01:31,840 --> 00:01:32,799
one

40
00:01:32,799 --> 00:01:35,360
so the the framework we have in mind is

41
00:01:35,360 --> 00:01:36,079
the following

42
00:01:36,079 --> 00:01:38,320
we the the timeline is divided into

43
00:01:38,320 --> 00:01:39,680
different epochs

44
00:01:39,680 --> 00:01:42,000
and in each epoch the user has an

45
00:01:42,000 --> 00:01:42,799
associated

46
00:01:42,799 --> 00:01:46,000
key pair using the this keeper it can

47
00:01:46,000 --> 00:01:46,399
sign

48
00:01:46,399 --> 00:01:48,640
arbitrary messages and then store the

49
00:01:48,640 --> 00:01:49,840
signature in some

50
00:01:49,840 --> 00:01:52,399
database for example and then whenever

51
00:01:52,399 --> 00:01:54,079
it wants to rotate keys

52
00:01:54,079 --> 00:01:58,159
it will next algorithm

53
00:01:58,159 --> 00:01:59,920
which computes the the keeper for the

54
00:01:59,920 --> 00:02:01,680
following epoch together with this

55
00:02:01,680 --> 00:02:03,920
so-called update token

56
00:02:03,920 --> 00:02:06,960
that can be sent to the database and

57
00:02:06,960 --> 00:02:09,280
and be used to update the the signature

58
00:02:09,280 --> 00:02:10,318
it was storing

59
00:02:10,318 --> 00:02:13,040
so now this new signature will verify

60
00:02:13,040 --> 00:02:14,879
will verify for the same message under

61
00:02:14,879 --> 00:02:17,520
the new public key of the user

62
00:02:17,520 --> 00:02:20,000
so in our in our work we formally define

63
00:02:20,000 --> 00:02:21,840
these new primitives so updatable

64
00:02:21,840 --> 00:02:23,440
signature and updatable message

65
00:02:23,440 --> 00:02:25,200
authentication codes

66
00:02:25,200 --> 00:02:27,040
and we also provided two different

67
00:02:27,040 --> 00:02:28,720
security notions for these new

68
00:02:28,720 --> 00:02:29,760
primitives

69
00:02:29,760 --> 00:02:32,560
so one is unlinkable updates which

70
00:02:32,560 --> 00:02:33,440
basically says

71
00:02:33,440 --> 00:02:36,480
that updated signatures and macs

72
00:02:36,480 --> 00:02:39,519
are indistinguishable from fresh ones

73
00:02:39,519 --> 00:02:42,319
and also existential affordability under

74
00:02:42,319 --> 00:02:44,000
choose a message attack

75
00:02:44,000 --> 00:02:46,640
so here as in the con as done for

76
00:02:46,640 --> 00:02:48,640
updatable encryption

77
00:02:48,640 --> 00:02:50,800
we have to define what is a the school

78
00:02:50,800 --> 00:02:52,239
leakage profile

79
00:02:52,239 --> 00:02:54,640
so since the the primitive allows for

80
00:02:54,640 --> 00:02:55,599
updating

81
00:02:55,599 --> 00:02:59,040
old cryptographic objects to a new one

82
00:02:59,040 --> 00:03:02,000
the the adversary can can gain extra

83
00:03:02,000 --> 00:03:03,760
information besides what is modeled by

84
00:03:03,760 --> 00:03:04,480
the

85
00:03:04,480 --> 00:03:06,800
oracle in the security experiment so we

86
00:03:06,800 --> 00:03:08,800
have we have to define what kind of

87
00:03:08,800 --> 00:03:10,400
leakages we allow

88
00:03:10,400 --> 00:03:13,519
for the adversary and we settled for

89
00:03:13,519 --> 00:03:16,319
along bi-directional updates of

90
00:03:16,319 --> 00:03:17,519
signatures and

91
00:03:17,519 --> 00:03:21,040
keys since uh this allows for a more

92
00:03:21,040 --> 00:03:22,959
simpler and cleaner uh security

93
00:03:22,959 --> 00:03:24,400
definition of the

94
00:03:24,400 --> 00:03:28,400
model and also uh and it doesn't really

95
00:03:28,400 --> 00:03:31,760
give a weaker model since in the in the

96
00:03:31,760 --> 00:03:32,799
real world

97
00:03:32,799 --> 00:03:35,920
anyway all keys are revoked and we also

98
00:03:35,920 --> 00:03:37,519
allow the

99
00:03:37,519 --> 00:03:40,959
the adversary to derive intermediate

100
00:03:40,959 --> 00:03:43,680
tokens once it has access to

101
00:03:43,680 --> 00:03:46,640
pairs of consecutive secret keys so to

102
00:03:46,640 --> 00:03:48,080
give a short example

103
00:03:48,080 --> 00:03:49,680
suppose the adversary in the security

104
00:03:49,680 --> 00:03:51,760
experiment queries the oracle

105
00:03:51,760 --> 00:03:53,760
to have access to all the information in

106
00:03:53,760 --> 00:03:54,879
green

107
00:03:54,879 --> 00:03:57,360
then using the updatability property of

108
00:03:57,360 --> 00:03:58,879
the primitive we can derive extra

109
00:03:58,879 --> 00:04:00,080
information so for example

110
00:04:00,080 --> 00:04:02,239
you can use this token to downgrade the

111
00:04:02,239 --> 00:04:03,519
secret key from apple

112
00:04:03,519 --> 00:04:06,560
emails2 to apoc e minus 3 then it could

113
00:04:06,560 --> 00:04:08,159
derive the intermediate token

114
00:04:08,159 --> 00:04:11,120
using this pair of consecutive keys and

115
00:04:11,120 --> 00:04:12,799
then you could use the token to upgrade

116
00:04:12,799 --> 00:04:15,360
this signature to the to the next epoch

117
00:04:15,360 --> 00:04:16,880
and similarly it can derive other

118
00:04:16,880 --> 00:04:19,519
information till all the information

119
00:04:19,519 --> 00:04:21,440
in that is color either in green or in

120
00:04:21,440 --> 00:04:25,520
blue is accessible to the adversary

121
00:04:25,520 --> 00:04:28,960
given the so moreover we also provided

122
00:04:28,960 --> 00:04:29,360
some

123
00:04:29,360 --> 00:04:31,440
concrete construction of this uh new

124
00:04:31,440 --> 00:04:32,400
primitive

125
00:04:32,400 --> 00:04:34,800
so we we provided a generic construction

126
00:04:34,800 --> 00:04:36,160
of updatable max

127
00:04:36,160 --> 00:04:38,880
from chemomorphic prfs and of updatable

128
00:04:38,880 --> 00:04:41,440
signature from chemomorphic signatures

129
00:04:41,440 --> 00:04:43,759
we also provided message independent

130
00:04:43,759 --> 00:04:46,080
variants of the above construction

131
00:04:46,080 --> 00:04:48,080
so by message independent variance we

132
00:04:48,080 --> 00:04:49,680
mean that the update algorithm

133
00:04:49,680 --> 00:04:52,560
does not take uh does not need to take

134
00:04:52,560 --> 00:04:53,919
the message as input

135
00:04:53,919 --> 00:04:55,520
and this allows for a more efficient

136
00:04:55,520 --> 00:04:58,000
construction and we also provide

137
00:04:58,000 --> 00:05:00,320
post-quantum association from lattices

138
00:05:00,320 --> 00:05:01,120
of both

139
00:05:01,120 --> 00:05:04,160
umac from almost chemotherapy prfs and

140
00:05:04,160 --> 00:05:05,759
of updatable signature from a

141
00:05:05,759 --> 00:05:08,880
modification of the gbv signature scheme

142
00:05:08,880 --> 00:05:11,360
which however we were not able to prove

143
00:05:11,360 --> 00:05:12,639
uh secure in the

144
00:05:12,639 --> 00:05:14,479
in the general security model but only

145
00:05:14,479 --> 00:05:17,199
in a weakened version of it

146
00:05:17,199 --> 00:05:20,560
so like a short overview is this of the

147
00:05:20,560 --> 00:05:21,919
following construction for

148
00:05:21,919 --> 00:05:25,360
available signature and i said the gpv

149
00:05:25,360 --> 00:05:26,880
lattice-based construction is a little

150
00:05:26,880 --> 00:05:28,880
secure in this weekend model

151
00:05:28,880 --> 00:05:32,080
and these are the umx construction

152
00:05:32,080 --> 00:05:34,400
where again for the lattice-based

153
00:05:34,400 --> 00:05:37,440
construction we only are able to have a

154
00:05:37,440 --> 00:05:40,160
limited number of possible updates since

155
00:05:40,160 --> 00:05:41,600
we displayed

156
00:05:41,600 --> 00:05:43,360
the error increases and we cannot

157
00:05:43,360 --> 00:05:46,000
guarantee correctness otherwise

158
00:05:46,000 --> 00:05:48,000
and i will conclude with a couple of

159
00:05:48,000 --> 00:05:49,520
open questions so as

160
00:05:49,520 --> 00:05:51,440
i said we were not able to prove the

161
00:05:51,440 --> 00:05:53,120
security of the lattice base the full

162
00:05:53,120 --> 00:05:55,360
security of the lattice base us

163
00:05:55,360 --> 00:05:58,720
so one this is one open question to be

164
00:05:58,720 --> 00:05:59,680
solved and also

165
00:05:59,680 --> 00:06:01,759
to concrete uh to provide concrete

166
00:06:01,759 --> 00:06:03,919
bounce for the number of updates allowed

167
00:06:03,919 --> 00:06:04,240
in the

168
00:06:04,240 --> 00:06:06,000
eu map construction from almost

169
00:06:06,000 --> 00:06:09,120
geomorphic grf

170
00:06:10,960 --> 00:06:13,039
i'm happy to take any question if if

171
00:06:13,039 --> 00:06:15,440
there are

172
00:06:15,759 --> 00:06:18,319
thanks valerie perhaps you can wait for

173
00:06:18,319 --> 00:06:18,960
a minute

174
00:06:18,960 --> 00:06:23,120
while people post questions on zolin

175
00:06:23,120 --> 00:06:26,400
i have a question uh

176
00:06:26,400 --> 00:06:28,319
so even the eco security model is

177
00:06:28,319 --> 00:06:30,000
achieved in the random occult

178
00:06:30,000 --> 00:06:32,319
model for the lack of space construction

179
00:06:32,319 --> 00:06:35,600
yeah yes yes because

180
00:06:36,720 --> 00:06:40,560
uh not that we worked on

181
00:06:40,560 --> 00:06:42,080
we will have to take a different

182
00:06:42,080 --> 00:06:44,000
signature skin base from

183
00:06:44,000 --> 00:06:45,759
lattices which is proven the standard

184
00:06:45,759 --> 00:06:47,680
model and then try to also achieve

185
00:06:47,680 --> 00:06:50,240
updatability and see how it

186
00:06:50,240 --> 00:06:52,720
would work

187
00:06:54,560 --> 00:06:57,039
and another question is uh so you all

188
00:06:57,039 --> 00:06:57,599
consider

189
00:06:57,599 --> 00:07:00,000
bi-directional update ability if you

190
00:07:00,000 --> 00:07:02,240
have a token then you can

191
00:07:02,240 --> 00:07:04,400
yes

192
00:07:07,280 --> 00:07:10,560
right would it make sense to look at

193
00:07:10,560 --> 00:07:13,440
a unidirectional one would that make it

194
00:07:13,440 --> 00:07:15,759
easy

195
00:07:17,520 --> 00:07:21,199
uh no actually i mean so this gpb

196
00:07:21,199 --> 00:07:24,479
based scheme is actually uh only has

197
00:07:24,479 --> 00:07:27,280
unidirectional updates and that's why we

198
00:07:27,280 --> 00:07:28,319
were not able

199
00:07:28,319 --> 00:07:31,840
to even prove the um

200
00:07:31,840 --> 00:07:35,120
the updates unlikability

201
00:07:35,120 --> 00:07:38,960
property of the scheme and yes and also

202
00:07:38,960 --> 00:07:41,280
although basically all the security

203
00:07:41,280 --> 00:07:43,039
proofs that we have

204
00:07:43,039 --> 00:07:45,440
required the scheme satisfy these

205
00:07:45,440 --> 00:07:47,199
bi-directional updates

206
00:07:47,199 --> 00:07:49,199
and we improve the security of the

207
00:07:49,199 --> 00:07:50,560
updatable scheme

208
00:07:50,560 --> 00:07:52,240
by relying on the affordability of the

209
00:07:52,240 --> 00:07:54,080
underlying signature scheme

210
00:07:54,080 --> 00:07:55,919
updating in both directions signatures

211
00:07:55,919 --> 00:07:57,280
or max

212
00:07:57,280 --> 00:07:59,840
so actually having only unity direction

213
00:07:59,840 --> 00:08:00,960
would make it

214
00:08:00,960 --> 00:08:05,198
more difficult to to instantiate

215
00:08:06,080 --> 00:08:10,160
let's see okay um looks like there are

216
00:08:10,160 --> 00:08:13,599
no other questions so

217
00:08:13,599 --> 00:08:16,319
thanks again thanks for having me on to

218
00:08:16,319 --> 00:08:17,919
the next talk

219
00:08:17,919 --> 00:08:20,560
um the next talk is uh on more efficient

220
00:08:20,560 --> 00:08:22,400
digital signatures with tight user

221
00:08:22,400 --> 00:08:23,199
security

222
00:08:23,199 --> 00:08:26,560
and uh dennis damert will give the talk

223
00:08:26,560 --> 00:08:28,639
yeah thank you for the introduction let

224
00:08:28,639 --> 00:08:31,919
me quickly share my screen

225
00:08:32,240 --> 00:08:35,839
okay so can you see my slides yes

226
00:08:35,839 --> 00:08:39,440
great okay so hi this is joint work with

227
00:08:39,440 --> 00:08:41,039
kai gellard tibor yaga

228
00:08:41,039 --> 00:08:44,159
and lin liu so let me give you

229
00:08:44,159 --> 00:08:47,360
a short introduction to our paper

230
00:08:47,360 --> 00:08:49,120
so in our paper we consider tightly

231
00:08:49,120 --> 00:08:50,880
secured signatures in the multi-user

232
00:08:50,880 --> 00:08:52,880
setting with adaptive corruptions

233
00:08:52,880 --> 00:08:55,120
this setting seems to reflect the

234
00:08:55,120 --> 00:08:57,360
security requirements we have

235
00:08:57,360 --> 00:08:58,800
in applications where signatures are

236
00:08:58,800 --> 00:09:00,160
used as a building block much more

237
00:09:00,160 --> 00:09:01,279
directly than the

238
00:09:01,279 --> 00:09:04,160
usually considered single user setting

239
00:09:04,160 --> 00:09:07,200
in the form of eocma security

240
00:09:07,200 --> 00:09:08,880
a prime example for such an application

241
00:09:08,880 --> 00:09:10,480
is authenticated key exchange which

242
00:09:10,480 --> 00:09:11,680
often uses

243
00:09:11,680 --> 00:09:14,320
signatures to authenticate its protocol

244
00:09:14,320 --> 00:09:15,519
messages

245
00:09:15,519 --> 00:09:17,440
our construction is the first generic

246
00:09:17,440 --> 00:09:19,040
construction of this kind and it's based

247
00:09:19,040 --> 00:09:20,560
on loss identification schemes and

248
00:09:20,560 --> 00:09:22,320
sequential or proofs

249
00:09:22,320 --> 00:09:24,000
uh signatures from sequential or proofs

250
00:09:24,000 --> 00:09:26,080
were originally proposed by albert's eye

251
00:09:26,080 --> 00:09:28,880
at asia crypto2 and further study by

252
00:09:28,880 --> 00:09:29,920
fischle net al at

253
00:09:29,920 --> 00:09:33,440
eurocrypt 2020. furthermore our

254
00:09:33,440 --> 00:09:35,440
construction is the first

255
00:09:35,440 --> 00:09:38,080
strongly unforgeable one and again this

256
00:09:38,080 --> 00:09:39,680
is particularly useful

257
00:09:39,680 --> 00:09:41,920
in this in the context of authenticated

258
00:09:41,920 --> 00:09:42,880
key exchange

259
00:09:42,880 --> 00:09:44,800
because it gives you a strong notion of

260
00:09:44,800 --> 00:09:46,399
authentication which is called matching

261
00:09:46,399 --> 00:09:48,480
conversations

262
00:09:48,480 --> 00:09:51,680
um for uh furthermore we were able to

263
00:09:51,680 --> 00:09:53,360
refine the construction that were

264
00:09:53,360 --> 00:09:55,760
uh that was considered by albert allen

265
00:09:55,760 --> 00:09:58,160
fischer netal to shorten the signatures

266
00:09:58,160 --> 00:09:59,920
concretely this means that when

267
00:09:59,920 --> 00:10:01,839
instantiated with ddh

268
00:10:01,839 --> 00:10:04,399
our signature scheme our signatures

269
00:10:04,399 --> 00:10:04,959
consist

270
00:10:04,959 --> 00:10:07,519
only of three zq elements so just to

271
00:10:07,519 --> 00:10:08,320
give you an

272
00:10:08,320 --> 00:10:11,360
comparison um compared to dsa which has

273
00:10:11,360 --> 00:10:12,720
like two zq elements

274
00:10:12,720 --> 00:10:15,600
um but it doesn't have a tight security

275
00:10:15,600 --> 00:10:17,120
proof not even in the single user

276
00:10:17,120 --> 00:10:19,120
setting

277
00:10:19,120 --> 00:10:21,680
and all of these properties so tightness

278
00:10:21,680 --> 00:10:23,120
strong unforgeability and short

279
00:10:23,120 --> 00:10:24,320
signatures

280
00:10:24,320 --> 00:10:26,240
make our signature a perfect candidate

281
00:10:26,240 --> 00:10:27,600
to instantiate

282
00:10:27,600 --> 00:10:29,200
a tightly secure authenticated key

283
00:10:29,200 --> 00:10:30,959
exchange with

284
00:10:30,959 --> 00:10:32,640
so the title of our paper is more

285
00:10:32,640 --> 00:10:34,480
efficient digital signatures with tight

286
00:10:34,480 --> 00:10:35,920
mud user security so

287
00:10:35,920 --> 00:10:38,160
um let's look uh let's have a look at

288
00:10:38,160 --> 00:10:40,160
the current state of the art so to the

289
00:10:40,160 --> 00:10:41,760
best of our knowledge

290
00:10:41,760 --> 00:10:44,959
there are only two tightly secure

291
00:10:44,959 --> 00:10:46,480
signatures in the multi-user setting

292
00:10:46,480 --> 00:10:48,240
with adaptive corruptions and the

293
00:10:48,240 --> 00:10:50,079
important part here is the adaptive

294
00:10:50,079 --> 00:10:51,519
corruptions part because there are a

295
00:10:51,519 --> 00:10:52,240
couple of

296
00:10:52,240 --> 00:10:55,519
multi-user secure signatures but they

297
00:10:55,519 --> 00:10:58,079
do not support adaptive corruptions on

298
00:10:58,079 --> 00:11:00,320
the one hand we have the bhjkl scheme

299
00:11:00,320 --> 00:11:02,079
tcc 15

300
00:11:02,079 --> 00:11:03,920
which was basically the first such

301
00:11:03,920 --> 00:11:06,079
signature scheme and it was introduced

302
00:11:06,079 --> 00:11:07,839
in the context of tightly secure

303
00:11:07,839 --> 00:11:10,160
um authenticated key exchange but

304
00:11:10,160 --> 00:11:11,440
unfortunately as you see here on the

305
00:11:11,440 --> 00:11:14,320
slide it suffers from quite a large

306
00:11:14,320 --> 00:11:16,720
signature size so it's linear in the

307
00:11:16,720 --> 00:11:19,279
security parameter many group elements

308
00:11:19,279 --> 00:11:21,920
however it is pairing based and it is in

309
00:11:21,920 --> 00:11:23,680
the standard model

310
00:11:23,680 --> 00:11:25,839
on the other hand we have gyoza and jaga

311
00:11:25,839 --> 00:11:27,360
crypto 18

312
00:11:27,360 --> 00:11:30,560
which significantly were able to reduce

313
00:11:30,560 --> 00:11:32,079
the signature size

314
00:11:32,079 --> 00:11:33,839
by requiring a programmable random

315
00:11:33,839 --> 00:11:35,600
oracle

316
00:11:35,600 --> 00:11:37,760
and now we were able to even further

317
00:11:37,760 --> 00:11:39,839
reduce the signature size to three that

318
00:11:39,839 --> 00:11:43,040
q elements when associated with ddh

319
00:11:43,040 --> 00:11:46,480
and however we have slightly larger keys

320
00:11:46,480 --> 00:11:47,120
so

321
00:11:47,120 --> 00:11:49,839
four group elements instead of two but

322
00:11:49,839 --> 00:11:51,760
uh we do not require a programmable

323
00:11:51,760 --> 00:11:54,160
random oracle but only a

324
00:11:54,160 --> 00:11:55,839
non-programmable one this was already

325
00:11:55,839 --> 00:11:57,360
shown by efficient all in the single

326
00:11:57,360 --> 00:11:58,959
user setting

327
00:11:58,959 --> 00:12:00,639
and we were able to carry it over to the

328
00:12:00,639 --> 00:12:02,160
multi-user setting

329
00:12:02,160 --> 00:12:04,639
and as you see here in the last column

330
00:12:04,639 --> 00:12:06,480
our scheme is also the only scheme that

331
00:12:06,480 --> 00:12:09,519
is strongly unforgeable

332
00:12:09,519 --> 00:12:12,160
next let me briefly talk about our the

333
00:12:12,160 --> 00:12:14,240
impact of our scheme on authenticated

334
00:12:14,240 --> 00:12:15,760
key exchange protocols so tight

335
00:12:15,760 --> 00:12:17,680
multi-user secure signatures

336
00:12:17,680 --> 00:12:20,160
um uh with adaptive corruptions are the

337
00:12:20,160 --> 00:12:21,680
main building block for

338
00:12:21,680 --> 00:12:23,279
a tightly secure authenticated key

339
00:12:23,279 --> 00:12:25,040
exchange as i already said

340
00:12:25,040 --> 00:12:27,360
this seems to exactly reflect what we

341
00:12:27,360 --> 00:12:28,880
need from a signature scheme in this

342
00:12:28,880 --> 00:12:29,680
context

343
00:12:29,680 --> 00:12:32,079
so um yeah in fact the notion was

344
00:12:32,079 --> 00:12:34,320
introduced to construct the first

345
00:12:34,320 --> 00:12:35,600
tightly secure authenticated key

346
00:12:35,600 --> 00:12:37,440
exchange protocol and

347
00:12:37,440 --> 00:12:38,800
tight security is something that's

348
00:12:38,800 --> 00:12:40,399
particularly interesting in the context

349
00:12:40,399 --> 00:12:41,519
of ake

350
00:12:41,519 --> 00:12:43,760
due to its large-scale use so if you

351
00:12:43,760 --> 00:12:45,360
think of the most prominent example of

352
00:12:45,360 --> 00:12:48,240
the key exchange protocol tls

353
00:12:48,240 --> 00:12:51,279
then yeah you quite uh

354
00:12:51,279 --> 00:12:54,240
quickly see the the the large scale that

355
00:12:54,240 --> 00:12:55,200
we have here

356
00:12:55,200 --> 00:12:57,839
and usually the security proof of

357
00:12:57,839 --> 00:12:59,519
authenticated key exchange protocols are

358
00:12:59,519 --> 00:13:00,800
particularly loose

359
00:13:00,800 --> 00:13:03,120
which makes them um not that meaningful

360
00:13:03,120 --> 00:13:04,320
for practice

361
00:13:04,320 --> 00:13:05,760
and if you now look at this table here

362
00:13:05,760 --> 00:13:08,240
on the slide you see that for all

363
00:13:08,240 --> 00:13:09,680
recently proposed

364
00:13:09,680 --> 00:13:12,079
or proven to be tightly secure

365
00:13:12,079 --> 00:13:14,079
authenticated key exchange protocols

366
00:13:14,079 --> 00:13:15,680
our signature scheme improves the

367
00:13:15,680 --> 00:13:17,360
communication complexity

368
00:13:17,360 --> 00:13:19,920
measured in bytes for security parameter

369
00:13:19,920 --> 00:13:21,600
128 bits

370
00:13:21,600 --> 00:13:23,600
and com compared with the previously

371
00:13:23,600 --> 00:13:25,360
most efficient scheme by gilston and

372
00:13:25,360 --> 00:13:26,240
jagger

373
00:13:26,240 --> 00:13:29,279
we were almost able to halve

374
00:13:29,279 --> 00:13:32,399
the bytes that need to be transferred

375
00:13:32,399 --> 00:13:34,959
so let's recap the key points of our

376
00:13:34,959 --> 00:13:35,440
work

377
00:13:35,440 --> 00:13:37,279
so we construct the first strong and

378
00:13:37,279 --> 00:13:38,959
currently most efficient multi-user

379
00:13:38,959 --> 00:13:40,320
secure signature with adaptive

380
00:13:40,320 --> 00:13:42,320
corruptions that is tightly secure

381
00:13:42,320 --> 00:13:43,920
our construction is perfectly suitable

382
00:13:43,920 --> 00:13:45,360
for instantiating tightly cpu

383
00:13:45,360 --> 00:13:46,959
authenticated key exchange because we

384
00:13:46,959 --> 00:13:48,480
have strong unfoldability

385
00:13:48,480 --> 00:13:50,639
which gives you strong authentication in

386
00:13:50,639 --> 00:13:53,120
the sense of matching conversation

387
00:13:53,120 --> 00:13:55,680
and we have short signatures which gives

388
00:13:55,680 --> 00:13:56,480
you an

389
00:13:56,480 --> 00:13:59,279
overall efficient key exchange um thank

390
00:13:59,279 --> 00:14:00,079
you very much

391
00:14:00,079 --> 00:14:01,600
for your attention i'm happy to receive

392
00:14:01,600 --> 00:14:03,120
any questions and if you're interested

393
00:14:03,120 --> 00:14:04,320
in our work then

394
00:14:04,320 --> 00:14:06,160
please consider reading the paper the

395
00:14:06,160 --> 00:14:09,120
link is on the slide

396
00:14:09,760 --> 00:14:13,279
thanks dennis let's wait for

397
00:14:13,279 --> 00:14:16,240
maybe to post questions in the meanwhile

398
00:14:16,240 --> 00:14:17,680
i have a couple of quick questions

399
00:14:17,680 --> 00:14:19,360
uh yeah what are the concrete

400
00:14:19,360 --> 00:14:20,880
instantiations uh

401
00:14:20,880 --> 00:14:24,240
for your scheme so we have one

402
00:14:24,240 --> 00:14:27,600
yeah yes so we have one

403
00:14:27,600 --> 00:14:30,800
we have essentially two instantiations

404
00:14:30,800 --> 00:14:31,680
one

405
00:14:31,680 --> 00:14:34,959
based on ddh and one based on the hiding

406
00:14:34,959 --> 00:14:36,800
assumption

407
00:14:36,800 --> 00:14:39,600
so these are extension instantiations of

408
00:14:39,600 --> 00:14:41,519
the lossy identification scheme

409
00:14:41,519 --> 00:14:45,199
which then can be can be used um

410
00:14:45,199 --> 00:14:48,240
directly in the construction i see

411
00:14:48,240 --> 00:14:52,560
okay uh secondly uh so this is a

412
00:14:52,560 --> 00:14:55,199
one by end loss immediate construction

413
00:14:55,199 --> 00:14:56,480
that you can get from

414
00:14:56,480 --> 00:14:59,040
any signature scheme right are there

415
00:14:59,040 --> 00:14:59,760
anything

416
00:14:59,760 --> 00:15:02,160
that's uh you know better than one by n

417
00:15:02,160 --> 00:15:04,000
but uh say not as good as

418
00:15:04,000 --> 00:15:08,079
of one loss and uh secondly

419
00:15:08,079 --> 00:15:11,040
uh are there any barriers to the

420
00:15:11,040 --> 00:15:12,480
reductions based on generic

421
00:15:12,480 --> 00:15:16,079
just generic uh signature schemes

422
00:15:16,079 --> 00:15:18,320
um sorry you you broke up a little bit

423
00:15:18,320 --> 00:15:19,760
from me can you repeat the first

424
00:15:19,760 --> 00:15:20,560
question

425
00:15:20,560 --> 00:15:22,480
sorry yeah i think this issue with my

426
00:15:22,480 --> 00:15:24,720
wi-fi so my question was uh

427
00:15:24,720 --> 00:15:27,279
is there anything in between one by n

428
00:15:27,279 --> 00:15:30,399
security loss and of one security loss

429
00:15:30,399 --> 00:15:32,639
so one by n you can achieve from any

430
00:15:32,639 --> 00:15:33,920
signature scheme

431
00:15:33,920 --> 00:15:36,240
yeah yeah uh so is there anything in

432
00:15:36,240 --> 00:15:37,040
between

433
00:15:37,040 --> 00:15:40,480
one by n and r1 yeah so in fact there is

434
00:15:40,480 --> 00:15:43,199
an optimization of this bh

435
00:15:43,199 --> 00:15:47,040
jkl scheme which has a loss that is

436
00:15:47,040 --> 00:15:50,079
linear in the security parameter

437
00:15:50,079 --> 00:15:52,720
which is called almost tight but i was

438
00:15:52,720 --> 00:15:54,000
informed by one of the authors that

439
00:15:54,000 --> 00:15:56,000
there is a flaw in the proof so i didn't

440
00:15:56,000 --> 00:15:58,240
mention it in this table here but in the

441
00:15:58,240 --> 00:15:59,120
video version

442
00:15:59,120 --> 00:16:02,240
i mentioned this briefly so

443
00:16:02,240 --> 00:16:04,320
yeah so there is something in between

444
00:16:04,320 --> 00:16:06,639
which is called almost tight

445
00:16:06,639 --> 00:16:08,639
and the second question were i forgot

446
00:16:08,639 --> 00:16:10,240
about it sorry uh can you repeat

447
00:16:10,240 --> 00:16:13,519
so i was asking is there any barrier to

448
00:16:13,519 --> 00:16:17,040
uh can we prove that we cannot build

449
00:16:17,040 --> 00:16:19,920
uh multi we cannot achieve multi-user

450
00:16:19,920 --> 00:16:22,639
security based on just uh single user

451
00:16:22,639 --> 00:16:24,079
security is there any

452
00:16:24,079 --> 00:16:26,160
barrier yeah so there is an

453
00:16:26,160 --> 00:16:27,920
impossibility result exactly

454
00:16:27,920 --> 00:16:31,360
but this uh only holds for uh certain

455
00:16:31,360 --> 00:16:33,120
signature schemes i think if i remember

456
00:16:33,120 --> 00:16:34,320
correctly they need to be key

457
00:16:34,320 --> 00:16:35,680
re-randomizable

458
00:16:35,680 --> 00:16:38,880
so given a verification key

459
00:16:38,880 --> 00:16:41,360
you need to be able to efficiently

460
00:16:41,360 --> 00:16:44,160
randomize the

461
00:16:44,160 --> 00:16:47,199
the corresponding secret key

462
00:16:47,199 --> 00:16:49,120
so only for those the impossibility

463
00:16:49,120 --> 00:16:50,880
result applies and this is not the case

464
00:16:50,880 --> 00:16:51,440
for our

465
00:16:51,440 --> 00:16:54,560
scheme okay uh

466
00:16:54,560 --> 00:16:56,880
great looks like there are no other

467
00:16:56,880 --> 00:17:00,079
questions in the chat

468
00:17:00,160 --> 00:17:03,360
depending on depending on what you mean

469
00:17:03,360 --> 00:17:03,680
by

470
00:17:03,680 --> 00:17:07,520
random right uh

471
00:17:07,520 --> 00:17:10,319
yeah so uh what what do you exactly mean

472
00:17:10,319 --> 00:17:11,599
by that

473
00:17:11,599 --> 00:17:14,640
so um well

474
00:17:14,640 --> 00:17:16,880
no one has ever been able to prove

475
00:17:16,880 --> 00:17:18,480
randomness

476
00:17:18,480 --> 00:17:22,559
yeah exactly yeah that's all i mean

477
00:17:22,559 --> 00:17:26,160
yeah yeah yeah yes you're right

478
00:17:29,440 --> 00:17:33,360
okay uh any other questions comments

479
00:17:33,360 --> 00:17:36,480
okay if not uh thanks dennis thank you

480
00:17:36,480 --> 00:17:38,559
very much next talk

481
00:17:38,559 --> 00:17:41,520
the next talk will be by olivia sanders

482
00:17:41,520 --> 00:17:46,320
and olivia will tell us about

483
00:17:46,320 --> 00:17:48,320
improving revoking for group signatures

484
00:17:48,320 --> 00:17:50,160
and detectives

485
00:17:50,160 --> 00:17:53,360
okay thank you do you hear me

486
00:17:53,360 --> 00:17:57,200
yes okay so this talk is about

487
00:17:57,200 --> 00:18:00,559
revoking group signature so briefly

488
00:18:00,559 --> 00:18:03,200
a group signature is a primitive that

489
00:18:03,200 --> 00:18:05,360
allows users to join a group

490
00:18:05,360 --> 00:18:07,360
by interacting with the so-called group

491
00:18:07,360 --> 00:18:08,720
manager

492
00:18:08,720 --> 00:18:11,440
once this is done they can sign on br

493
00:18:11,440 --> 00:18:12,559
for the group meaning that

494
00:18:12,559 --> 00:18:15,520
the signature are anonymous except for a

495
00:18:15,520 --> 00:18:17,039
specific entity

496
00:18:17,039 --> 00:18:19,360
and we can use group's nature for many

497
00:18:19,360 --> 00:18:21,520
use cases in particular for

498
00:18:21,520 --> 00:18:24,320
anonymous access to the service because

499
00:18:24,320 --> 00:18:24,880
using

500
00:18:24,880 --> 00:18:26,799
a group signature the user can prove for

501
00:18:26,799 --> 00:18:29,440
example that he has subscribed to the

502
00:18:29,440 --> 00:18:31,840
to the service without revealing his

503
00:18:31,840 --> 00:18:34,000
identity

504
00:18:34,000 --> 00:18:36,559
but the main problem of groups in nature

505
00:18:36,559 --> 00:18:37,120
is that

506
00:18:37,120 --> 00:18:40,880
adding new users is easy but revoking

507
00:18:40,880 --> 00:18:44,559
older ones are much much harder

508
00:18:44,559 --> 00:18:47,440
and the problem is that we cannot simply

509
00:18:47,440 --> 00:18:48,000
dismiss

510
00:18:48,000 --> 00:18:50,320
revocation because this is a very common

511
00:18:50,320 --> 00:18:52,240
invent event

512
00:18:52,240 --> 00:18:54,720
for example you may have to revoke a

513
00:18:54,720 --> 00:18:55,600
user because

514
00:18:55,600 --> 00:18:58,320
his subscription has ended or you may

515
00:18:58,320 --> 00:18:59,679
have to revoke him because

516
00:18:59,679 --> 00:19:01,440
he has lost his credentials because he

517
00:19:01,440 --> 00:19:04,559
did not comply with the code of conduct

518
00:19:04,559 --> 00:19:06,960
and the problem is that also there are

519
00:19:06,960 --> 00:19:08,559
several

520
00:19:08,559 --> 00:19:10,799
solutions to manage revocation for good

521
00:19:10,799 --> 00:19:11,600
signature

522
00:19:11,600 --> 00:19:13,600
none of them is fully satisfying as i

523
00:19:13,600 --> 00:19:15,520
explained in the paper

524
00:19:15,520 --> 00:19:18,400
but actually a shoe at all proposed a

525
00:19:18,400 --> 00:19:20,720
new variety of procedure which is called

526
00:19:20,720 --> 00:19:22,799
gucci nature with time-bound keys

527
00:19:22,799 --> 00:19:25,840
that distinguish two kind of revocations

528
00:19:25,840 --> 00:19:28,080
there is first the natural revocation

529
00:19:28,080 --> 00:19:30,080
that you can predict as a joining time

530
00:19:30,080 --> 00:19:31,200
so typically

531
00:19:31,200 --> 00:19:34,240
when a user joins a service for let's

532
00:19:34,240 --> 00:19:34,720
say

533
00:19:34,720 --> 00:19:36,840
one month you know that you will have to

534
00:19:36,840 --> 00:19:39,600
deactivate is assigning keys after one

535
00:19:39,600 --> 00:19:40,240
month so

536
00:19:40,240 --> 00:19:42,880
you can predict it at the joining plane

537
00:19:42,880 --> 00:19:45,360
and there is also premature revocation

538
00:19:45,360 --> 00:19:47,760
that you cannot predict so for example

539
00:19:47,760 --> 00:19:50,960
uh relocation due to um

540
00:19:50,960 --> 00:19:53,840
due to the non-compliance with the code

541
00:19:53,840 --> 00:19:55,200
of conduct

542
00:19:55,200 --> 00:19:57,520
and the point is that uh natural

543
00:19:57,520 --> 00:19:58,400
revocation

544
00:19:58,400 --> 00:20:00,559
and premature evocation are dealt with

545
00:20:00,559 --> 00:20:02,080
very differently because

546
00:20:02,080 --> 00:20:05,600
natural revocation will be done with

547
00:20:05,600 --> 00:20:08,000
uh by associating hidden set of time

548
00:20:08,000 --> 00:20:08,880
periods with

549
00:20:08,880 --> 00:20:12,159
each signing keys whereas premature

550
00:20:12,159 --> 00:20:14,320
revocation will be managed by

551
00:20:14,320 --> 00:20:17,600
uh with the revocation list and

552
00:20:17,600 --> 00:20:20,799
in most scenarios you will be

553
00:20:20,799 --> 00:20:24,159
you will be able to to manage revocation

554
00:20:24,159 --> 00:20:26,000
with natural revocation which is very

555
00:20:26,000 --> 00:20:26,960
efficient

556
00:20:26,960 --> 00:20:29,520
so we you will have few premature

557
00:20:29,520 --> 00:20:31,360
revocation and so you will have

558
00:20:31,360 --> 00:20:33,360
short avocation list which is very

559
00:20:33,360 --> 00:20:34,799
important

560
00:20:34,799 --> 00:20:38,000
regarding efficiency

561
00:20:38,400 --> 00:20:41,440
to construct to construct

562
00:20:41,440 --> 00:20:43,520
this group signature with time one keys

563
00:20:43,520 --> 00:20:44,480
we propose to

564
00:20:44,480 --> 00:20:48,320
use unlikable reductable signature and

565
00:20:48,320 --> 00:20:50,240
this is a primitive that was introduced

566
00:20:50,240 --> 00:20:51,679
a few years ago

567
00:20:51,679 --> 00:20:53,919
that allows signer to generate the

568
00:20:53,919 --> 00:20:56,720
signature sigma on a set of messages

569
00:20:56,720 --> 00:21:00,000
and given this signature sigma you can

570
00:21:00,000 --> 00:21:00,640
derive

571
00:21:00,640 --> 00:21:03,200
a new signature sigma prime on any

572
00:21:03,200 --> 00:21:04,159
subset

573
00:21:04,159 --> 00:21:06,880
of the signed messages and the point is

574
00:21:06,880 --> 00:21:08,240
that sigma prime

575
00:21:08,240 --> 00:21:10,960
can be verified with the sole knowledge

576
00:21:10,960 --> 00:21:11,840
of the

577
00:21:11,840 --> 00:21:14,320
of the subset of messages in particular

578
00:21:14,320 --> 00:21:16,960
all the other messages are redacted

579
00:21:16,960 --> 00:21:19,440
moreover you can make this derived

580
00:21:19,440 --> 00:21:20,240
signature

581
00:21:20,240 --> 00:21:22,559
unlinkable which will be very important

582
00:21:22,559 --> 00:21:24,080
in our construction

583
00:21:24,080 --> 00:21:26,240
so just to provide the basic idea for

584
00:21:26,240 --> 00:21:28,720
construction it's actually very simple

585
00:21:28,720 --> 00:21:30,720
during the joining time the group

586
00:21:30,720 --> 00:21:32,480
manager will simply issue a predictable

587
00:21:32,480 --> 00:21:34,799
signature on a set of messages

588
00:21:34,799 --> 00:21:38,240
where the message will be zero if the

589
00:21:38,240 --> 00:21:41,120
user is inactive at this time period and

590
00:21:41,120 --> 00:21:42,080
given this

591
00:21:42,080 --> 00:21:45,280
signature the user can simply prove that

592
00:21:45,280 --> 00:21:45,600
is

593
00:21:45,600 --> 00:21:47,440
active at the current time at the

594
00:21:47,440 --> 00:21:50,000
current time period by simply deriving a

595
00:21:50,000 --> 00:21:51,440
signature on the message

596
00:21:51,440 --> 00:21:53,840
corresponding to this time period and by

597
00:21:53,840 --> 00:21:55,200
showing that this message

598
00:21:55,200 --> 00:21:57,520
is not zero and the point is that it can

599
00:21:57,520 --> 00:21:59,360
be done very efficiently with

600
00:21:59,360 --> 00:22:02,080
the construction proposed in the paper

601
00:22:02,080 --> 00:22:03,280
moreover

602
00:22:03,280 --> 00:22:06,159
conversely to to previous works we do

603
00:22:06,159 --> 00:22:08,159
not need update information that is

604
00:22:08,159 --> 00:22:09,679
information that the group manager

605
00:22:09,679 --> 00:22:11,919
publishes at the beginning of each time

606
00:22:11,919 --> 00:22:12,720
period

607
00:22:12,720 --> 00:22:15,440
which is very very interesting because

608
00:22:15,440 --> 00:22:17,840
it's not very convenient to to

609
00:22:17,840 --> 00:22:19,440
update the public key with this

610
00:22:19,440 --> 00:22:21,600
information at the beginning of

611
00:22:21,600 --> 00:22:26,080
time obviously this is just the basic

612
00:22:26,080 --> 00:22:27,840
idea of the construction there are

613
00:22:27,840 --> 00:22:30,000
several additional elements in the paper

614
00:22:30,000 --> 00:22:31,840
to achieve security but

615
00:22:31,840 --> 00:22:34,159
i think that if you have understood this

616
00:22:34,159 --> 00:22:35,280
basic id

617
00:22:35,280 --> 00:22:37,520
it should be rather simple to understand

618
00:22:37,520 --> 00:22:41,840
the the remaining parts of the paper

619
00:22:42,159 --> 00:22:45,600
so as i said just the previous

620
00:22:45,600 --> 00:22:48,159
it is just some kind of framework but

621
00:22:48,159 --> 00:22:50,159
the point is that it can be instantiated

622
00:22:50,159 --> 00:22:52,000
very efficiently with the construction

623
00:22:52,000 --> 00:22:53,520
described in the paper

624
00:22:53,520 --> 00:22:55,919
in particular with this construction of

625
00:22:55,919 --> 00:22:58,240
unlikable reductable signature

626
00:22:58,240 --> 00:23:00,559
we can achieve very short derived

627
00:23:00,559 --> 00:23:02,880
signature consisting of only four group

628
00:23:02,880 --> 00:23:03,679
elements

629
00:23:03,679 --> 00:23:06,640
and that can be verified with only two

630
00:23:06,640 --> 00:23:09,200
pairing equations

631
00:23:09,200 --> 00:23:12,480
so this leads to a very efficient

632
00:23:12,480 --> 00:23:15,600
group signature scheme with a script

633
00:23:15,600 --> 00:23:17,520
signature that only consists of

634
00:23:17,520 --> 00:23:21,120
300 bytes which is rather small for a

635
00:23:21,120 --> 00:23:22,080
scheme supporting

636
00:23:22,080 --> 00:23:25,440
such revocation features as i said

637
00:23:25,440 --> 00:23:27,280
there is no need to publish update

638
00:23:27,280 --> 00:23:29,840
information information meaning that the

639
00:23:29,840 --> 00:23:33,760
group manager can publish a group public

640
00:23:33,760 --> 00:23:35,360
key once and for all

641
00:23:35,360 --> 00:23:38,720
there are short signing keys and for the

642
00:23:38,720 --> 00:23:40,000
signer for the

643
00:23:40,000 --> 00:23:42,320
the user that produce the good signature

644
00:23:42,320 --> 00:23:43,679
there is only a few

645
00:23:43,679 --> 00:23:46,080
computations to perform to to issue this

646
00:23:46,080 --> 00:23:47,520
group signature

647
00:23:47,520 --> 00:23:49,440
similarly for the verification this is

648
00:23:49,440 --> 00:23:51,520
rather efficient as long as the

649
00:23:51,520 --> 00:23:53,120
relocation list

650
00:23:53,120 --> 00:23:56,400
does not grow too much

651
00:23:56,400 --> 00:23:59,840
so okay thank you then do not edit that

652
00:23:59,840 --> 00:24:02,799
if you have any questions

653
00:24:03,440 --> 00:24:07,679
uh yes i have a question um

654
00:24:07,679 --> 00:24:11,360
this seems ideal for

655
00:24:11,360 --> 00:24:15,679
uh electronic passports

656
00:24:15,679 --> 00:24:19,440
and such which are already

657
00:24:19,440 --> 00:24:23,200
issued internationally by uh

658
00:24:23,200 --> 00:24:25,919
some sort of international presumably

659
00:24:25,919 --> 00:24:26,480
u.s

660
00:24:26,480 --> 00:24:29,760
imposed standard uh

661
00:24:29,760 --> 00:24:34,400
how does your scheme improve on that

662
00:24:34,559 --> 00:24:36,720
for example with electronic base but

663
00:24:36,720 --> 00:24:37,840
there is indeed

664
00:24:37,840 --> 00:24:41,200
a signature scheme that is used for that

665
00:24:41,200 --> 00:24:41,520
but

666
00:24:41,520 --> 00:24:43,760
this is a standard digital signature

667
00:24:43,760 --> 00:24:45,039
without any

668
00:24:45,039 --> 00:24:48,320
privacy notions so it means that you

669
00:24:48,320 --> 00:24:51,440
use a basic digital signature scheme and

670
00:24:51,440 --> 00:24:51,840
so

671
00:24:51,840 --> 00:24:53,840
for example you each time you use your

672
00:24:53,840 --> 00:24:56,400
passport you you can be traced

673
00:24:56,400 --> 00:24:58,320
with this kind of solution such as group

674
00:24:58,320 --> 00:24:59,440
centers you have

675
00:24:59,440 --> 00:25:02,400
you are totally unlinkable so you can

676
00:25:02,400 --> 00:25:04,080
you can use your passport at

677
00:25:04,080 --> 00:25:06,559
different places and no one will be able

678
00:25:06,559 --> 00:25:08,000
to say that you are the

679
00:25:08,000 --> 00:25:10,720
same person

680
00:25:13,679 --> 00:25:16,960
but still be able to verify

681
00:25:16,960 --> 00:25:19,600
that the passport you were presenting to

682
00:25:19,600 --> 00:25:20,320
them

683
00:25:20,320 --> 00:25:24,400
was been has been what

684
00:25:24,400 --> 00:25:26,799
been issued by a trusted third party

685
00:25:26,799 --> 00:25:28,320
that you trust

686
00:25:28,320 --> 00:25:32,159
exactly exactly you prove that you are

687
00:25:32,159 --> 00:25:35,760
for example a french citizen but you

688
00:25:35,760 --> 00:25:38,799
you you no one can know that you

689
00:25:38,799 --> 00:25:40,840
who you are exactly and no one can trace

690
00:25:40,840 --> 00:25:42,159
you

691
00:25:42,159 --> 00:25:46,960
brilliant thank you yeah

692
00:25:46,960 --> 00:25:49,120
thanks olivia i think there's a question

693
00:25:49,120 --> 00:25:51,120
and um

694
00:25:51,120 --> 00:25:52,720
so what is the size of the public key

695
00:25:52,720 --> 00:25:54,159
and does it depend on the number of time

696
00:25:54,159 --> 00:25:55,520
videos

697
00:25:55,520 --> 00:25:58,640
yes as you can see on the slide the

698
00:25:58,640 --> 00:25:59,120
public

699
00:25:59,120 --> 00:26:03,200
is the last cell on my first table

700
00:26:03,200 --> 00:26:06,720
and yes it depends linearly on the

701
00:26:06,720 --> 00:26:10,960
set of time periods but i provide some

702
00:26:10,960 --> 00:26:14,159
concrete estimation in my paper and

703
00:26:14,159 --> 00:26:17,679
you have to you even if you

704
00:26:17,679 --> 00:26:20,240
consider one day time period for the

705
00:26:20,240 --> 00:26:21,360
next three years you

706
00:26:21,360 --> 00:26:23,600
you end up with something with a few

707
00:26:23,600 --> 00:26:24,559
kilobytes

708
00:26:24,559 --> 00:26:27,440
that's not a lot of store for public

709
00:26:27,440 --> 00:26:27,919
that's

710
00:26:27,919 --> 00:26:32,000
that can be uh that can be quite complex

711
00:26:32,000 --> 00:26:34,400
thank you

712
00:26:37,120 --> 00:26:40,080
are there other questions

713
00:26:42,720 --> 00:26:44,640
since we have a couple of minutes i have

714
00:26:44,640 --> 00:26:46,000
a quick question uh

715
00:26:46,000 --> 00:26:50,000
so here in this slide

716
00:26:50,559 --> 00:26:53,600
our location list

717
00:26:53,600 --> 00:26:56,240
and i'm sorry i have uh trouble to hear

718
00:26:56,240 --> 00:26:56,880
you

719
00:26:56,880 --> 00:27:00,400
sir sorry i

720
00:27:00,400 --> 00:27:03,279
i asked uh so in this life r is the size

721
00:27:03,279 --> 00:27:05,120
of the revocation list

722
00:27:05,120 --> 00:27:08,720
right yes yes r is a number of persons

723
00:27:08,720 --> 00:27:10,960
but only people that have been

724
00:27:10,960 --> 00:27:12,640
prematurely revoked

725
00:27:12,640 --> 00:27:14,799
and as i said the point is that for

726
00:27:14,799 --> 00:27:16,240
natural revocation

727
00:27:16,240 --> 00:27:18,799
you will use other techniques to to do

728
00:27:18,799 --> 00:27:19,520
that

729
00:27:19,520 --> 00:27:22,000
so you this will have no impact on the

730
00:27:22,000 --> 00:27:24,080
revocation list so here

731
00:27:24,080 --> 00:27:25,919
there is only the people that you need

732
00:27:25,919 --> 00:27:28,080
to to

733
00:27:28,080 --> 00:27:30,559
revoke in uh immediately for example

734
00:27:30,559 --> 00:27:32,320
because they are

735
00:27:32,320 --> 00:27:35,520
for very exceptional cases so you

736
00:27:35,520 --> 00:27:38,799
should be able in many scenarios are

737
00:27:38,799 --> 00:27:41,840
relatively small

738
00:27:43,919 --> 00:27:46,960
okay thanks

739
00:27:46,960 --> 00:27:49,570
are there any other questions let's see

740
00:27:49,570 --> 00:27:51,360
[Music]

741
00:27:51,360 --> 00:27:53,520
okay uh markov has another question how

742
00:27:53,520 --> 00:27:56,960
do you do premature revocations

743
00:27:56,960 --> 00:28:00,640
uh with a revocation list so it's um

744
00:28:00,640 --> 00:28:02,799
some rather standard techniques that

745
00:28:02,799 --> 00:28:04,799
consist in adding some

746
00:28:04,799 --> 00:28:08,399
revocation token in in a public list and

747
00:28:08,399 --> 00:28:10,640
anyone that verifies the signature will

748
00:28:10,640 --> 00:28:11,760
check that

749
00:28:11,760 --> 00:28:14,480
the signature has not been issued with

750
00:28:14,480 --> 00:28:16,399
with the key corresponding to the token

751
00:28:16,399 --> 00:28:18,159
in your list

752
00:28:18,159 --> 00:28:21,679
so it's difficult to describe how it

753
00:28:21,679 --> 00:28:23,200
works exactly uh

754
00:28:23,200 --> 00:28:26,559
without uh reserved paper because it's

755
00:28:26,559 --> 00:28:28,159
not very simple in particular because

756
00:28:28,159 --> 00:28:30,159
you have to ensure both

757
00:28:30,159 --> 00:28:33,600
it's a blacklist it's a blacklist

758
00:28:33,600 --> 00:28:36,159
yes it's it's a form of blacklist but a

759
00:28:36,159 --> 00:28:38,159
bit more complex because

760
00:28:38,159 --> 00:28:41,279
this as this is an anonymous system you

761
00:28:41,279 --> 00:28:42,640
cannot just

762
00:28:42,640 --> 00:28:46,799
provide some some the name of

763
00:28:46,799 --> 00:28:48,640
of the user or something like that you

764
00:28:48,640 --> 00:28:51,120
have to to be able to

765
00:28:51,120 --> 00:28:53,440
to make it compatible with an anonymous

766
00:28:53,440 --> 00:28:54,480
system and the

767
00:28:54,480 --> 00:28:57,840
revoking anonymous signature is not hard

768
00:28:57,840 --> 00:29:00,080
so it's a kind of blacklist as you say

769
00:29:00,080 --> 00:29:01,159
but

770
00:29:01,159 --> 00:29:05,679
notoriously an unsolved problem

771
00:29:11,120 --> 00:29:15,279
i'm sorry i didn't here's the last part

772
00:29:19,320 --> 00:29:23,840
establishing an anonymous blacklist

773
00:29:23,840 --> 00:29:27,120
is notoriously an unsolved

774
00:29:27,120 --> 00:29:30,320
problem correct

775
00:29:30,320 --> 00:29:34,640
does your solution solve that problem

776
00:29:34,640 --> 00:29:38,000
um actually i'm not the only paper to

777
00:29:38,000 --> 00:29:39,919
solve this issue

778
00:29:39,919 --> 00:29:43,279
the idea is that you you anonymity

779
00:29:43,279 --> 00:29:45,440
in our case anonymity rely on some

780
00:29:45,440 --> 00:29:47,919
specific computational problem

781
00:29:47,919 --> 00:29:50,960
but if you provide some

782
00:29:50,960 --> 00:29:53,120
additional information in the relocation

783
00:29:53,120 --> 00:29:54,720
list then you can

784
00:29:54,720 --> 00:29:56,880
break this problem and so you can

785
00:29:56,880 --> 00:29:58,720
identify the

786
00:29:58,720 --> 00:30:01,520
issue of the group signature so this is

787
00:30:01,520 --> 00:30:01,840
not

788
00:30:01,840 --> 00:30:04,559
a technique that is specific to my paper

789
00:30:04,559 --> 00:30:06,240
it has been already used

790
00:30:06,240 --> 00:30:09,039
in in previous papers but in our case

791
00:30:09,039 --> 00:30:10,799
it's a bit more complex because

792
00:30:10,799 --> 00:30:13,760
i have to ensure both forward and

793
00:30:13,760 --> 00:30:16,960
backward and linkability

794
00:30:17,919 --> 00:30:21,120
thank you that was great

795
00:30:21,120 --> 00:30:23,840
uh thanks olivia uh yes we can move on

796
00:30:23,840 --> 00:30:25,760
to the next talk uh adam

797
00:30:25,760 --> 00:30:28,960
do you want to take over yeah

798
00:30:28,960 --> 00:30:33,200
hi um so

799
00:30:33,200 --> 00:30:37,520
the next talk uh is going to be

800
00:30:37,520 --> 00:30:40,640
uh group signatures with

801
00:30:40,640 --> 00:30:44,080
unc user controlled uh and sequential

802
00:30:44,080 --> 00:30:45,520
link ability

803
00:30:45,520 --> 00:30:48,720
by jesus diaz and anya lehman

804
00:30:48,720 --> 00:30:51,760
and jesus will give the talk okay

805
00:30:51,760 --> 00:30:56,320
yes thank you let them come

806
00:30:56,320 --> 00:30:59,918
let me serve my screen

807
00:31:01,440 --> 00:31:05,600
you see those lights

808
00:31:05,600 --> 00:31:09,360
yes that looks good okay great so

809
00:31:09,360 --> 00:31:12,240
um thank you for the introduction uh

810
00:31:12,240 --> 00:31:13,200
saddam said

811
00:31:13,200 --> 00:31:15,279
um my name is kasia and i'm going to

812
00:31:15,279 --> 00:31:16,960
present uh joint work with danielle

813
00:31:16,960 --> 00:31:18,320
element

814
00:31:18,320 --> 00:31:20,000
entitled group scenarios with uh

815
00:31:20,000 --> 00:31:22,159
controlled and sequential incapability

816
00:31:22,159 --> 00:31:25,360
um i was going to introduce group

817
00:31:25,360 --> 00:31:27,600
signatures but in solid year already

818
00:31:27,600 --> 00:31:30,320
need that brilliantly i will skip that

819
00:31:30,320 --> 00:31:32,000
part and just mentioned that

820
00:31:32,000 --> 00:31:34,240
group signatures typically rely on a

821
00:31:34,240 --> 00:31:37,200
central party who can

822
00:31:37,200 --> 00:31:39,120
extract some kind of identify

823
00:31:39,120 --> 00:31:41,840
information from the signers

824
00:31:41,840 --> 00:31:43,440
now this is the bad part of this is that

825
00:31:43,440 --> 00:31:45,760
this is privacy invasive and

826
00:31:45,760 --> 00:31:48,880
we need to place some trust on this

827
00:31:48,880 --> 00:31:52,799
central entity so our challenge

828
00:31:52,799 --> 00:31:55,440
uh is whether we can get rid of this

829
00:31:55,440 --> 00:31:56,000
this

830
00:31:56,000 --> 00:31:59,440
trusted party which by the way is

831
00:31:59,440 --> 00:32:01,039
typically called opener

832
00:32:01,039 --> 00:32:04,159
um so think of this uh scenario

833
00:32:04,159 --> 00:32:07,120
in the study here in which we have uh to

834
00:32:07,120 --> 00:32:08,000
a group

835
00:32:08,000 --> 00:32:10,240
with two users a reducing a blue user

836
00:32:10,240 --> 00:32:11,519
who sent

837
00:32:11,519 --> 00:32:14,559
digitally signed to a

838
00:32:14,559 --> 00:32:18,080
data lake for instance we want all these

839
00:32:18,080 --> 00:32:20,399
signatures to be completely anonymous

840
00:32:20,399 --> 00:32:22,960
to any observer included any possible

841
00:32:22,960 --> 00:32:24,320
trusted party

842
00:32:24,320 --> 00:32:28,960
unless the users themselves decide to

843
00:32:29,039 --> 00:32:31,919
link a subset of their signatures in

844
00:32:31,919 --> 00:32:34,159
that case

845
00:32:34,159 --> 00:32:36,000
any observer not only trusted parties

846
00:32:36,000 --> 00:32:37,600
would be able to verify

847
00:32:37,600 --> 00:32:41,039
that linked claim

848
00:32:41,039 --> 00:32:45,120
um concerning the functionality that we

849
00:32:45,120 --> 00:32:47,440
propose for this ucl group signatures is

850
00:32:47,440 --> 00:32:49,120
very it is very similar to

851
00:32:49,120 --> 00:32:51,760
to that of conventional group signatures

852
00:32:51,760 --> 00:32:53,120
uh basically we just

853
00:32:53,120 --> 00:32:56,000
replace the open function with this link

854
00:32:56,000 --> 00:32:56,559
function

855
00:32:56,559 --> 00:33:00,159
in which which needs to be run by the

856
00:33:00,159 --> 00:33:01,039
user

857
00:33:01,039 --> 00:33:03,919
who wants to link his or her signatures

858
00:33:03,919 --> 00:33:05,200
and instead of

859
00:33:05,200 --> 00:33:07,120
being parameterized by the group secret

860
00:33:07,120 --> 00:33:09,200
key it is parameterized by the group

861
00:33:09,200 --> 00:33:11,519
security of that specific

862
00:33:11,519 --> 00:33:13,440
group member and of course we have a

863
00:33:13,440 --> 00:33:15,360
verified link

864
00:33:15,360 --> 00:33:17,039
operation who just says whether this

865
00:33:17,039 --> 00:33:20,000
proof is valid or not

866
00:33:20,000 --> 00:33:21,919
a few words on the motor and

867
00:33:21,919 --> 00:33:23,120
instantiation

868
00:33:23,120 --> 00:33:25,039
the mole is the model is very similar to

869
00:33:25,039 --> 00:33:26,880
that of

870
00:33:26,880 --> 00:33:28,320
conventional group signatures we have

871
00:33:28,320 --> 00:33:29,679
anonymity and unflammability and

872
00:33:29,679 --> 00:33:31,360
traceability although

873
00:33:31,360 --> 00:33:33,679
since we want to provide two types of

874
00:33:33,679 --> 00:33:34,799
linkability

875
00:33:34,799 --> 00:33:36,799
are similar but different basically we

876
00:33:36,799 --> 00:33:38,399
call them explicit and implicitly

877
00:33:38,399 --> 00:33:39,440
capability

878
00:33:39,440 --> 00:33:41,600
we need to introduce two variants for

879
00:33:41,600 --> 00:33:43,519
the non-primability and traceability

880
00:33:43,519 --> 00:33:44,320
properties

881
00:33:44,320 --> 00:33:46,960
um we also have to account for more

882
00:33:46,960 --> 00:33:48,640
several wins that are derived from the

883
00:33:48,640 --> 00:33:49,039
link

884
00:33:49,039 --> 00:33:51,360
function introduced and we have to

885
00:33:51,360 --> 00:33:52,720
follow a different approach because

886
00:33:52,720 --> 00:33:53,360
basically

887
00:33:53,360 --> 00:33:55,760
we don't have an open function which is

888
00:33:55,760 --> 00:33:56,880
crucial for the

889
00:33:56,880 --> 00:33:59,200
traditional definitions so we have to

890
00:33:59,200 --> 00:34:02,240
give a different one

891
00:34:02,559 --> 00:34:04,880
concerning our instantiation we use pps

892
00:34:04,880 --> 00:34:07,519
plus signatures for the mems credentials

893
00:34:07,519 --> 00:34:09,359
and then the signed randomization proof

894
00:34:09,359 --> 00:34:10,639
approach for creating the actual

895
00:34:10,639 --> 00:34:12,879
signatures and we also introduce a trick

896
00:34:12,879 --> 00:34:14,960
for efficient for creating efficient

897
00:34:14,960 --> 00:34:16,239
improves

898
00:34:16,239 --> 00:34:19,839
um okay so so far security uh ucl

899
00:34:19,839 --> 00:34:22,000
signatures are great for privacy because

900
00:34:22,000 --> 00:34:24,480
they give users full control basically

901
00:34:24,480 --> 00:34:28,239
but this means that users can also very

902
00:34:28,239 --> 00:34:29,359
easily hide

903
00:34:29,359 --> 00:34:31,679
data which can be good in some cases but

904
00:34:31,679 --> 00:34:34,000
can also be not good in other cases and

905
00:34:34,000 --> 00:34:35,679
specifically in the use case that we

906
00:34:35,679 --> 00:34:37,679
were targeting we were interested in

907
00:34:37,679 --> 00:34:40,320
ensuring that users cannot alter the

908
00:34:40,320 --> 00:34:41,440
order in which

909
00:34:41,440 --> 00:34:45,119
uh setup signatures were were created

910
00:34:45,119 --> 00:34:47,119
meaning that they cannot commit insert

911
00:34:47,119 --> 00:34:48,639
or insert signatures not

912
00:34:48,639 --> 00:34:51,760
uh swap and swap them

913
00:34:51,760 --> 00:34:55,199
to to illustrate this think of a

914
00:34:55,199 --> 00:34:57,440
scenario in which we have smart vehicles

915
00:34:57,440 --> 00:34:58,640
that send

916
00:34:58,640 --> 00:35:01,359
telemetry data that gets gets stored

917
00:35:01,359 --> 00:35:02,880
into our data lake

918
00:35:02,880 --> 00:35:05,359
so in the case of this example we have

919
00:35:05,359 --> 00:35:05,920
the

920
00:35:05,920 --> 00:35:07,599
blue car who is driving through a

921
00:35:07,599 --> 00:35:09,280
highway with a 100

922
00:35:09,280 --> 00:35:11,440
kilometers per hour speed limit and

923
00:35:11,440 --> 00:35:13,520
since the driver respects the speed

924
00:35:13,520 --> 00:35:14,079
limit

925
00:35:14,079 --> 00:35:17,040
in case of needing to link all the

926
00:35:17,040 --> 00:35:18,960
signatures that he created he would

927
00:35:18,960 --> 00:35:21,520
probably not have any problem to do so

928
00:35:21,520 --> 00:35:23,280
but in this other case in which the red

929
00:35:23,280 --> 00:35:25,040
car eventually goes beyond the speed

930
00:35:25,040 --> 00:35:25,839
limit

931
00:35:25,839 --> 00:35:28,880
yeah then maybe it has an accident

932
00:35:28,880 --> 00:35:31,920
um in case for instance a

933
00:35:31,920 --> 00:35:34,400
an insurance company asks the driver to

934
00:35:34,400 --> 00:35:36,480
link the signatures that he produced in

935
00:35:36,480 --> 00:35:36,960
that

936
00:35:36,960 --> 00:35:39,359
time interval then the driver would be

937
00:35:39,359 --> 00:35:40,640
interested in hiding this

938
00:35:40,640 --> 00:35:42,640
specific signature because it was

939
00:35:42,640 --> 00:35:44,000
actually the one in he

940
00:35:44,000 --> 00:35:48,079
overspeed um so that's the the

941
00:35:48,079 --> 00:35:52,480
one of the use cases we consider

942
00:35:52,480 --> 00:35:56,160
then we extend the ucl signatures

943
00:35:56,160 --> 00:35:59,760
yes briefly basically the signature

944
00:35:59,760 --> 00:36:01,040
algorithm becomes

945
00:36:01,040 --> 00:36:03,440
stateful and we have to pass some

946
00:36:03,440 --> 00:36:04,320
sequential

947
00:36:04,320 --> 00:36:06,480
some sequencing information and then and

948
00:36:06,480 --> 00:36:08,320
also the link and very finally

949
00:36:08,320 --> 00:36:10,560
processes become sequential link and

950
00:36:10,560 --> 00:36:12,000
verify sequentially

951
00:36:12,000 --> 00:36:14,480
the proof now carries some extra order

952
00:36:14,480 --> 00:36:15,599
information and the

953
00:36:15,599 --> 00:36:18,079
set of signatures that is given is an

954
00:36:18,079 --> 00:36:19,680
ordered set

955
00:36:19,680 --> 00:36:22,160
uh the model is similar to that of ucl

956
00:36:22,160 --> 00:36:24,079
we have to add of course a new property

957
00:36:24,079 --> 00:36:25,760
and syrian spirituality

958
00:36:25,760 --> 00:36:28,800
the property that we want to ensure and

959
00:36:28,800 --> 00:36:30,880
we have to account for more severe wings

960
00:36:30,880 --> 00:36:34,160
the stemmed from the

961
00:36:34,160 --> 00:36:37,200
order that we leak the instantiation is

962
00:36:37,200 --> 00:36:38,000
also

963
00:36:38,000 --> 00:36:39,920
very similar to ucl signatures we

964
00:36:39,920 --> 00:36:41,040
introduce a hash

965
00:36:41,040 --> 00:36:43,760
chain for ensuring the order and we also

966
00:36:43,760 --> 00:36:46,160
rely on a penalty bulletin board

967
00:36:46,160 --> 00:36:49,200
where designers send their signatures

968
00:36:49,200 --> 00:36:50,800
disappointing on the ability mode is

969
00:36:50,800 --> 00:36:52,480
trusted to verify signatures before

970
00:36:52,480 --> 00:36:53,359
appending them but

971
00:36:53,359 --> 00:36:56,560
otherwise cannot link or open the

972
00:36:56,560 --> 00:37:00,480
signatures i will not go into details

973
00:37:00,480 --> 00:37:01,520
here the scheme the

974
00:37:01,520 --> 00:37:03,599
instance is that we propose are

975
00:37:03,599 --> 00:37:05,200
reasonably efficient

976
00:37:05,200 --> 00:37:06,880
yeah you have more measurements in the

977
00:37:06,880 --> 00:37:09,040
paper

978
00:37:09,040 --> 00:37:11,040
which have been obtained using this

979
00:37:11,040 --> 00:37:12,079
library which is

980
00:37:12,079 --> 00:37:14,480
open source it has support several

981
00:37:14,480 --> 00:37:15,920
languages and also

982
00:37:15,920 --> 00:37:18,480
several schemes can be extended if

983
00:37:18,480 --> 00:37:19,359
needed

984
00:37:19,359 --> 00:37:21,119
and there is a demo that you can play

985
00:37:21,119 --> 00:37:23,599
with it's a table for docker

986
00:37:23,599 --> 00:37:26,480
maybe you want to play around a bit and

987
00:37:26,480 --> 00:37:26,800
for

988
00:37:26,800 --> 00:37:29,839
further work i'll just mention some it

989
00:37:29,839 --> 00:37:30,880
would be interesting to

990
00:37:30,880 --> 00:37:34,160
create proofs of not links images sorry

991
00:37:34,160 --> 00:37:36,000
because that would allow us to introduce

992
00:37:36,000 --> 00:37:37,839
some important functionality like

993
00:37:37,839 --> 00:37:40,480
blacklisting or something like that

994
00:37:40,480 --> 00:37:42,560
uh it would be interesting to study what

995
00:37:42,560 --> 00:37:43,839
security we can get

996
00:37:43,839 --> 00:37:46,320
against initially for corrupt users and

997
00:37:46,320 --> 00:37:47,839
also bad specification

998
00:37:47,839 --> 00:37:50,800
would be would be nice and that was

999
00:37:50,800 --> 00:37:51,599
everything

1000
00:37:51,599 --> 00:37:53,520
uh thank you media attention and happy

1001
00:37:53,520 --> 00:37:56,800
to answer any question

1002
00:37:57,040 --> 00:38:00,480
okay so let's thank jesus i have a

1003
00:38:00,480 --> 00:38:01,359
question

1004
00:38:01,359 --> 00:38:05,760
yeah how does this different

1005
00:38:05,760 --> 00:38:09,040
than current

1006
00:38:09,040 --> 00:38:14,560
uh ssbn which stands for

1007
00:38:14,560 --> 00:38:17,359
submarine nuclear ballistic missile

1008
00:38:17,359 --> 00:38:18,960
submarines

1009
00:38:18,960 --> 00:38:23,520
initial launch tracking systems

1010
00:38:30,839 --> 00:38:33,119
yes

1011
00:38:33,119 --> 00:38:36,160
uh so i'm not familiar with that with

1012
00:38:36,160 --> 00:38:36,560
that

1013
00:38:36,560 --> 00:38:40,160
uh uh functionality or system so i

1014
00:38:40,160 --> 00:38:40,640
cannot

1015
00:38:40,640 --> 00:38:42,079
really comment on that i don't know if

1016
00:38:42,079 --> 00:38:44,880
you have any specific question maybe

1017
00:38:44,880 --> 00:38:47,839
about it

1018
00:38:52,160 --> 00:38:55,359
hello can you hear me

1019
00:38:57,119 --> 00:39:01,839
sorry for sure um but

1020
00:39:02,720 --> 00:39:06,720
the history of american

1021
00:39:06,720 --> 00:39:10,560
submarine ballistic missiles

1022
00:39:10,560 --> 00:39:13,839
has been an increase

1023
00:39:13,839 --> 00:39:16,960
in their accuracy or their 50

1024
00:39:16,960 --> 00:39:20,960
cpm or whatever it is um

1025
00:39:20,960 --> 00:39:25,280
and that seems fundamentally

1026
00:39:25,280 --> 00:39:29,119
associated with your research into

1027
00:39:29,119 --> 00:39:33,040
motion tracking and the accuracy

1028
00:39:33,040 --> 00:39:37,359
and authenticity of that measurement

1029
00:39:37,359 --> 00:39:40,960
that's my question i suppose

1030
00:39:41,599 --> 00:39:44,800
so about the authenticity i i guess that

1031
00:39:44,800 --> 00:39:46,960
this could be used for that about the

1032
00:39:46,960 --> 00:39:48,079
accuracy

1033
00:39:48,079 --> 00:39:52,160
i would say i i i can

1034
00:39:52,160 --> 00:39:53,359
i don't really know i guess that the

1035
00:39:53,359 --> 00:39:55,040
accuracy part is something like

1036
00:39:55,040 --> 00:39:56,960
depending on a gps or

1037
00:39:56,960 --> 00:39:59,440
some triangulation or something but

1038
00:39:59,440 --> 00:40:00,400
that's

1039
00:40:00,400 --> 00:40:02,400
not something that a group signature

1040
00:40:02,400 --> 00:40:05,520
seems to be able to address

1041
00:40:05,520 --> 00:40:09,520
unless it's in orbit oh yeah but then

1042
00:40:09,520 --> 00:40:12,079
the same i guess the same uh comment

1043
00:40:12,079 --> 00:40:12,880
applies

1044
00:40:12,880 --> 00:40:15,520
but for if ensuring order of the

1045
00:40:15,520 --> 00:40:17,040
messages that are sent or the

1046
00:40:17,040 --> 00:40:18,240
measurements or something

1047
00:40:18,240 --> 00:40:21,200
is something uh important in that case

1048
00:40:21,200 --> 00:40:22,560
and also anonymity or

1049
00:40:22,560 --> 00:40:26,160
privacy of the missiles is relevant and

1050
00:40:26,160 --> 00:40:26,800
i guess

1051
00:40:26,800 --> 00:40:29,920
uh that this can be related to that uh i

1052
00:40:29,920 --> 00:40:31,520
would have to study that that complete

1053
00:40:31,520 --> 00:40:32,560
that use case i

1054
00:40:32,560 --> 00:40:35,520
honestly don't know i guess it comes

1055
00:40:35,520 --> 00:40:38,079
down to the authenticity

1056
00:40:38,079 --> 00:40:41,200
the anticipatory the authenticity of

1057
00:40:41,200 --> 00:40:42,160
orders

1058
00:40:42,160 --> 00:40:45,599
right yeah

1059
00:40:45,599 --> 00:40:46,170
yes

1060
00:40:46,170 --> 00:40:48,880
[Music]

1061
00:40:48,880 --> 00:40:52,240
okay any other questions

1062
00:40:52,240 --> 00:40:54,640
so i had just had one uh are your

1063
00:40:54,640 --> 00:40:55,680
techniques related

1064
00:40:55,680 --> 00:40:57,040
you think they can be applied to any

1065
00:40:57,040 --> 00:40:59,680
other types of signature schemes like

1066
00:40:59,680 --> 00:41:04,319
ring signatures or uh

1067
00:41:04,839 --> 00:41:06,560
threshold

1068
00:41:06,560 --> 00:41:09,440
maybe i honestly have not think about

1069
00:41:09,440 --> 00:41:09,839
that

1070
00:41:09,839 --> 00:41:12,880
so basically our signatures

1071
00:41:12,880 --> 00:41:16,480
um uh work by proving ownership of

1072
00:41:16,480 --> 00:41:19,359
our potential which has been issued by a

1073
00:41:19,359 --> 00:41:20,079
group manager

1074
00:41:20,079 --> 00:41:22,240
and group managers do not exist in green

1075
00:41:22,240 --> 00:41:23,200
signatures

1076
00:41:23,200 --> 00:41:25,599
so i know maybe it can be adapted

1077
00:41:25,599 --> 00:41:26,319
somehow

1078
00:41:26,319 --> 00:41:28,240
certainly the the techniques used to

1079
00:41:28,240 --> 00:41:29,760
prove order are

1080
00:41:29,760 --> 00:41:32,800
orthogonal to that so and we have not

1081
00:41:32,800 --> 00:41:34,000
invented them i mean we

1082
00:41:34,000 --> 00:41:36,720
use hash chains so that's uh well known

1083
00:41:36,720 --> 00:41:37,359
technique

1084
00:41:37,359 --> 00:41:38,960
so i guess that something similar could

1085
00:41:38,960 --> 00:41:40,720
be used in the ring signature yeah

1086
00:41:40,720 --> 00:41:44,399
okay cool

1087
00:41:46,839 --> 00:41:48,240
thanks

1088
00:41:48,240 --> 00:41:52,319
uh wait there's a

1089
00:41:52,319 --> 00:41:56,560
question does that just ask

1090
00:41:57,040 --> 00:42:00,079
yeah so marcus uh

1091
00:42:00,079 --> 00:42:03,580
marco has a question uh do

1092
00:42:03,580 --> 00:42:05,440
[Music]

1093
00:42:05,440 --> 00:42:08,800
uh do you have a particular automotive

1094
00:42:08,800 --> 00:42:11,599
use case in mind are there other use

1095
00:42:11,599 --> 00:42:13,119
cases

1096
00:42:13,119 --> 00:42:15,680
yeah so well actually the illustration

1097
00:42:15,680 --> 00:42:16,640
that you use

1098
00:42:16,640 --> 00:42:18,960
that i used in the slides is one very

1099
00:42:18,960 --> 00:42:19,680
probable

1100
00:42:19,680 --> 00:42:22,720
um use case the speed

1101
00:42:22,720 --> 00:42:26,160
is a very um clear

1102
00:42:26,160 --> 00:42:29,200
example to to use us because it's it's

1103
00:42:29,200 --> 00:42:30,800
very uh

1104
00:42:30,800 --> 00:42:32,960
easy to understand but in general any

1105
00:42:32,960 --> 00:42:34,160
any kind of

1106
00:42:34,160 --> 00:42:36,000
sensory information that's in which

1107
00:42:36,000 --> 00:42:37,200
order is relevant

1108
00:42:37,200 --> 00:42:41,200
um uh could be applied here

1109
00:42:41,200 --> 00:42:43,280
maybe even contract tracing in which the

1110
00:42:43,280 --> 00:42:44,720
order in which you visit

1111
00:42:44,720 --> 00:42:47,920
some places uh is of course relevant to

1112
00:42:47,920 --> 00:42:50,319
track the order that the people who may

1113
00:42:50,319 --> 00:42:52,079
have been impacted by you or

1114
00:42:52,079 --> 00:42:54,560
or otherwise and then you have to take

1115
00:42:54,560 --> 00:42:56,640
another other problem like the size of

1116
00:42:56,640 --> 00:42:58,880
the data packets that you can transmit

1117
00:42:58,880 --> 00:42:59,440
and

1118
00:42:59,440 --> 00:43:02,319
so on but yeah and in general any any

1119
00:43:02,319 --> 00:43:05,119
scenario in which order is relevant

1120
00:43:05,119 --> 00:43:08,160
can be applied here

1121
00:43:09,680 --> 00:43:13,520
okay so let's thank jesus again

1122
00:43:13,520 --> 00:43:18,480
and uh we'll move to the next talk

1123
00:43:18,480 --> 00:43:22,000
the next talk is gonna be uh

1124
00:43:22,000 --> 00:43:23,760
two-party adapter signatures from

1125
00:43:23,760 --> 00:43:25,359
identification schemes

1126
00:43:25,359 --> 00:43:28,880
uh and it's by andreas erwig sebastian

1127
00:43:28,880 --> 00:43:29,920
faust

1128
00:43:29,920 --> 00:43:32,480
christina

1129
00:43:32,960 --> 00:43:36,240
hostovska sorry

1130
00:43:36,240 --> 00:43:41,839
um and uh

1131
00:43:46,050 --> 00:43:49,129
[Music]

1132
00:43:49,920 --> 00:43:52,880
is going to give the talk

1133
00:43:53,680 --> 00:43:55,839
yes uh thank you very much for the

1134
00:43:55,839 --> 00:43:56,800
introduction

1135
00:43:56,800 --> 00:43:59,040
hi i'm siabee and i will present the

1136
00:43:59,040 --> 00:44:00,800
paper to party advertise signatures from

1137
00:44:00,800 --> 00:44:02,240
identification schemes

1138
00:44:02,240 --> 00:44:04,720
this is a joint

1139
00:44:07,359 --> 00:44:09,839
andrea foreign monastery and i are from

1140
00:44:09,839 --> 00:44:11,599
teodomshire in germany and christina is

1141
00:44:11,599 --> 00:44:13,760
from ethioric in switzerland

1142
00:44:13,760 --> 00:44:16,880
so uh let's start with some

1143
00:44:16,880 --> 00:44:19,520
motivation consider the following

1144
00:44:19,520 --> 00:44:21,359
scenario where we have two parties

1145
00:44:21,359 --> 00:44:23,920
alice and bob where alice has a secret

1146
00:44:23,920 --> 00:44:25,119
value w

1147
00:44:25,119 --> 00:44:26,960
which is willing to give to bob in

1148
00:44:26,960 --> 00:44:28,560
exchange for bob's signature on a

1149
00:44:28,560 --> 00:44:30,720
message of alice's choice

1150
00:44:30,720 --> 00:44:33,440
on the other hand we have bob who is

1151
00:44:33,440 --> 00:44:34,960
okay with revealing his signature to

1152
00:44:34,960 --> 00:44:37,119
alice but he wants to be sure that if

1153
00:44:37,119 --> 00:44:38,560
his signature is revealed he would

1154
00:44:38,560 --> 00:44:40,720
indeed learn this witness w

1155
00:44:40,720 --> 00:44:45,200
and by revealed here i mean that

1156
00:44:45,200 --> 00:44:47,920
the signature is publicly accessible for

1157
00:44:47,920 --> 00:44:49,200
example it's published on

1158
00:44:49,200 --> 00:44:51,040
a bulletin board a website or a

1159
00:44:51,040 --> 00:44:53,280
blockchain now you might be wondering

1160
00:44:53,280 --> 00:44:54,960
does this scenario actually happen

1161
00:44:54,960 --> 00:44:56,880
in protocols and do we have to tackle

1162
00:44:56,880 --> 00:44:59,680
this and the answer is actually yes

1163
00:44:59,680 --> 00:45:01,520
there are many blockchain related

1164
00:45:01,520 --> 00:45:02,960
applications which need to

1165
00:45:02,960 --> 00:45:05,040
deal with such a scenario such as

1166
00:45:05,040 --> 00:45:06,800
conditional payments atomic swaps and

1167
00:45:06,800 --> 00:45:08,720
payment channels

1168
00:45:08,720 --> 00:45:12,079
let me give a high level idea

1169
00:45:12,079 --> 00:45:14,880
on what exactly or how exactly we're

1170
00:45:14,880 --> 00:45:15,920
going to address

1171
00:45:15,920 --> 00:45:18,319
such a trade on the left-hand side again

1172
00:45:18,319 --> 00:45:20,079
we have alice which with w and the

1173
00:45:20,079 --> 00:45:21,680
message m and on the right-hand side we

1174
00:45:21,680 --> 00:45:22,400
have bob with

1175
00:45:22,400 --> 00:45:24,960
a secret and public key for a signature

1176
00:45:24,960 --> 00:45:26,240
scheme

1177
00:45:26,240 --> 00:45:27,839
alice and bob start communicating with

1178
00:45:27,839 --> 00:45:29,599
each other and at the end of their

1179
00:45:29,599 --> 00:45:32,800
communication alice wants to

1180
00:45:32,800 --> 00:45:35,200
be able to extract from the transcript

1181
00:45:35,200 --> 00:45:36,640
of her communication with bob

1182
00:45:36,640 --> 00:45:39,599
and the witness a signature which is

1183
00:45:39,599 --> 00:45:40,400
valid

1184
00:45:40,400 --> 00:45:43,680
under bob's public key for the message

1185
00:45:43,680 --> 00:45:45,760
you can think of this m being a

1186
00:45:45,760 --> 00:45:47,440
transaction which can be accepted by the

1187
00:45:47,440 --> 00:45:49,280
blockchain

1188
00:45:49,280 --> 00:45:50,880
then alice at some point would publish

1189
00:45:50,880 --> 00:45:52,800
this to the blockchain and bob would be

1190
00:45:52,800 --> 00:45:53,760
able to

1191
00:45:53,760 --> 00:45:56,880
read the signature from the blockchain

1192
00:45:56,880 --> 00:45:59,760
bob then would be able to call a

1193
00:45:59,760 --> 00:46:00,880
function

1194
00:46:00,880 --> 00:46:02,079
given the transcript of its

1195
00:46:02,079 --> 00:46:03,599
communication with alice and the

1196
00:46:03,599 --> 00:46:05,760
signature and extract

1197
00:46:05,760 --> 00:46:10,160
the secret value w a recent primitive

1198
00:46:10,160 --> 00:46:13,520
called adapter signatures actually

1199
00:46:13,520 --> 00:46:15,599
give us the tools in order to build such

1200
00:46:15,599 --> 00:46:17,359
a protocol

1201
00:46:17,359 --> 00:46:18,880
i will not get into more details how

1202
00:46:18,880 --> 00:46:20,880
does it actually work in practice for

1203
00:46:20,880 --> 00:46:22,640
that i would refer you to our

1204
00:46:22,640 --> 00:46:26,319
paper and also previous work on this

1205
00:46:26,319 --> 00:46:29,119
topic and i will continue for this talk

1206
00:46:29,119 --> 00:46:30,960
uh for the purpose of this short talk

1207
00:46:30,960 --> 00:46:32,720
for the history of adapter signatures

1208
00:46:32,720 --> 00:46:35,119
and where our contribution lands

1209
00:46:35,119 --> 00:46:36,720
so adapter signatures were first

1210
00:46:36,720 --> 00:46:39,599
introduced in march 2017 by polstra

1211
00:46:39,599 --> 00:46:41,359
in a mail mailing list he presented a

1212
00:46:41,359 --> 00:46:45,040
version based on schloer signatures

1213
00:46:45,359 --> 00:46:48,319
a year later in april 2018 monero

1214
00:46:48,319 --> 00:46:49,359
sanchez and kate

1215
00:46:49,359 --> 00:46:51,599
presented an ecdsa threshold variant of

1216
00:46:51,599 --> 00:46:54,079
adapter signatures

1217
00:46:54,079 --> 00:46:57,599
in 2019 molovolt it all

1218
00:46:57,599 --> 00:46:59,040
used the concept of threshold adapter

1219
00:46:59,040 --> 00:47:00,640
signatures to build

1220
00:47:00,640 --> 00:47:02,800
payment channels with certain properties

1221
00:47:02,800 --> 00:47:03,839
but

1222
00:47:03,839 --> 00:47:06,240
the adapter signature as a primitive as

1223
00:47:06,240 --> 00:47:07,920
a standalone primitive

1224
00:47:07,920 --> 00:47:10,560
was not formalized until this point it

1225
00:47:10,560 --> 00:47:13,359
was in 2020 that almaya ital for the

1226
00:47:13,359 --> 00:47:15,119
first time formalized the concept of

1227
00:47:15,119 --> 00:47:16,079
single-party

1228
00:47:16,079 --> 00:47:18,319
adapter signatures provided snore-based

1229
00:47:18,319 --> 00:47:20,079
and ecdsa-based constructions

1230
00:47:20,079 --> 00:47:21,359
and proved that these constructions are

1231
00:47:21,359 --> 00:47:24,559
secure in their settings in the same

1232
00:47:24,559 --> 00:47:24,960
year

1233
00:47:24,960 --> 00:47:27,680
uh same uh year uh as gain it all

1234
00:47:27,680 --> 00:47:28,720
entirely it's all

1235
00:47:28,720 --> 00:47:30,800
uh proposed two different post quantum

1236
00:47:30,800 --> 00:47:32,640
secure adapter signatures and by post

1237
00:47:32,640 --> 00:47:33,920
quantum i mean that

1238
00:47:33,920 --> 00:47:36,720
the adversary has access to a quantum

1239
00:47:36,720 --> 00:47:39,280
computer but the users the normal

1240
00:47:39,280 --> 00:47:41,920
people do not their constructions are

1241
00:47:41,920 --> 00:47:44,160
from different assumptions and also

1242
00:47:44,160 --> 00:47:47,839
achieve slightly different properties

1243
00:47:47,839 --> 00:47:50,720
but until this point there were two

1244
00:47:50,720 --> 00:47:52,000
major open problems that

1245
00:47:52,000 --> 00:47:53,680
have not been answered regarding electro

1246
00:47:53,680 --> 00:47:55,280
signatures despite them being quite

1247
00:47:55,280 --> 00:47:57,520
popular in the blockchain area

1248
00:47:57,520 --> 00:48:00,480
first it was unclear from which class of

1249
00:48:00,480 --> 00:48:01,760
signature schemes

1250
00:48:01,760 --> 00:48:04,720
one can build adapter signatures it

1251
00:48:04,720 --> 00:48:06,640
seemed a little bit ad hoc that

1252
00:48:06,640 --> 00:48:09,040
we first had snore then ecdsa and then

1253
00:48:09,040 --> 00:48:10,880
eventually we had a post quantum

1254
00:48:10,880 --> 00:48:13,680
it wasn't really uh organized or clear

1255
00:48:13,680 --> 00:48:15,200
uh whether there's a class of signature

1256
00:48:15,200 --> 00:48:16,480
schemes that can be transformed with

1257
00:48:16,480 --> 00:48:18,640
other signatures

1258
00:48:18,640 --> 00:48:21,200
and then there is the threshold

1259
00:48:21,200 --> 00:48:22,800
variation adapted which was never

1260
00:48:22,800 --> 00:48:24,480
formalized

1261
00:48:24,480 --> 00:48:27,920
this brings me to our contribution um

1262
00:48:27,920 --> 00:48:30,559
we already know based on the work of

1263
00:48:30,559 --> 00:48:33,119
klitschmanze and pan how to transform

1264
00:48:33,119 --> 00:48:36,559
id schemes into signature schemes

1265
00:48:36,559 --> 00:48:38,880
we show how signature schemes from

1266
00:48:38,880 --> 00:48:40,640
identification schemes short stick id

1267
00:48:40,640 --> 00:48:42,400
can be transformed into adaptive

1268
00:48:42,400 --> 00:48:44,480
signatures

1269
00:48:44,480 --> 00:48:46,160
we then show how this type of signature

1270
00:48:46,160 --> 00:48:47,599
schemes can be transformed to two-party

1271
00:48:47,599 --> 00:48:48,000
signature

1272
00:48:48,000 --> 00:48:50,880
schemes and how these two participants

1273
00:48:50,880 --> 00:48:52,400
can be transformed into two-party

1274
00:48:52,400 --> 00:48:53,599
adapter signatures

1275
00:48:53,599 --> 00:48:55,359
note that our transformation is not

1276
00:48:55,359 --> 00:48:56,720
generic and

1277
00:48:56,720 --> 00:48:58,800
requires the underlying cig-id scheme to

1278
00:48:58,800 --> 00:49:01,280
satisfy certain properties

1279
00:49:01,280 --> 00:49:03,760
okay uh if you want to know more about

1280
00:49:03,760 --> 00:49:04,960
this transformation and

1281
00:49:04,960 --> 00:49:07,280
uh how we prove them i would refer you

1282
00:49:07,280 --> 00:49:08,400
to our paper

1283
00:49:08,400 --> 00:49:11,440
i would not conclude this talk um in in

1284
00:49:11,440 --> 00:49:12,319
our work we

1285
00:49:12,319 --> 00:49:14,079
analyze which class of others uh

1286
00:49:14,079 --> 00:49:15,280
signature schemes can be transformed

1287
00:49:15,280 --> 00:49:17,280
into other signatures

1288
00:49:17,280 --> 00:49:20,400
for the first time we define formally

1289
00:49:20,400 --> 00:49:21,680
the concept of two-party address

1290
00:49:21,680 --> 00:49:22,960
signatures

1291
00:49:22,960 --> 00:49:25,040
and we provide generic transformations

1292
00:49:25,040 --> 00:49:26,000
from sig id

1293
00:49:26,000 --> 00:49:28,319
to adapter signatures uh two-party

1294
00:49:28,319 --> 00:49:29,040
signatures and

1295
00:49:29,040 --> 00:49:31,119
party admiral signatures our generic

1296
00:49:31,119 --> 00:49:32,400
transformation also

1297
00:49:32,400 --> 00:49:35,760
works for schnorr katzman and

1298
00:49:35,760 --> 00:49:39,839
julio cuiscota we show this in our paper

1299
00:49:39,839 --> 00:49:43,599
as future works well analyzing other uh

1300
00:49:43,599 --> 00:49:44,880
whether other classes of signature

1301
00:49:44,880 --> 00:49:45,359
schemes

1302
00:49:45,359 --> 00:49:47,040
uh can be transformed into other

1303
00:49:47,040 --> 00:49:48,800
signatures would be very interesting

1304
00:49:48,800 --> 00:49:51,760
for example can we transform uh in the

1305
00:49:51,760 --> 00:49:52,720
standard model

1306
00:49:52,720 --> 00:49:54,640
from other assumptions signatures into

1307
00:49:54,640 --> 00:49:55,760
adapter synthesis that would be an

1308
00:49:55,760 --> 00:49:58,319
interesting open question

1309
00:49:58,319 --> 00:50:00,000
and furthermore it would be interesting

1310
00:50:00,000 --> 00:50:02,480
to see if there are applications of

1311
00:50:02,480 --> 00:50:04,000
adapter signatures or the two-party

1312
00:50:04,000 --> 00:50:07,440
variant in other contexts

1313
00:50:07,440 --> 00:50:09,200
and not necessarily in the blockchain

1314
00:50:09,200 --> 00:50:10,880
setting

1315
00:50:10,880 --> 00:50:13,280
okay i would like to thank you all for

1316
00:50:13,280 --> 00:50:14,800
your attention if you have any questions

1317
00:50:14,800 --> 00:50:15,920
feel free to ask

1318
00:50:15,920 --> 00:50:19,040
me contact the co-authors uh or me

1319
00:50:19,040 --> 00:50:22,720
uh yeah thank you very much

1320
00:50:22,720 --> 00:50:26,240
okay let's thank claus um

1321
00:50:26,240 --> 00:50:30,720
and uh let's see of any questions

1322
00:50:30,720 --> 00:50:34,000
for sure uh dr riani

1323
00:50:34,000 --> 00:50:38,559
uh or mr riyani thank you very much for

1324
00:50:38,559 --> 00:50:40,079
your paper

1325
00:50:40,079 --> 00:50:45,920
um so this applies only to

1326
00:50:46,079 --> 00:50:49,880
two-party trusted third-party

1327
00:50:49,880 --> 00:50:52,240
verifications of a signature is that

1328
00:50:52,240 --> 00:50:53,440
correct

1329
00:50:53,440 --> 00:50:56,480
um i would say so yes so basically the

1330
00:50:56,480 --> 00:50:58,880
setting that we have at the moment

1331
00:50:58,880 --> 00:51:02,400
is as follows we we want this signature

1332
00:51:02,400 --> 00:51:05,440
to be published on some platform

1333
00:51:05,440 --> 00:51:08,160
and this signature should look identical

1334
00:51:08,160 --> 00:51:10,000
to a signature that was generated

1335
00:51:10,000 --> 00:51:13,680
without running this protocol right so

1336
00:51:13,680 --> 00:51:16,880
exactly as you said and um the the

1337
00:51:16,880 --> 00:51:17,599
context

1338
00:51:17,599 --> 00:51:20,160
so i wouldn't call it but it takes two

1339
00:51:20,160 --> 00:51:21,200
third party

1340
00:51:21,200 --> 00:51:24,400
two trusted third parties or is it a

1341
00:51:24,400 --> 00:51:25,280
subset

1342
00:51:25,280 --> 00:51:28,800
is it either or what do you mean two

1343
00:51:28,800 --> 00:51:32,480
third parties well

1344
00:51:32,480 --> 00:51:36,880
um it seemed to me that

1345
00:51:36,880 --> 00:51:40,000
your signatures were being signed by

1346
00:51:40,000 --> 00:51:43,440
two parties um

1347
00:51:43,440 --> 00:51:46,559
okay so so basically let me put it this

1348
00:51:46,559 --> 00:51:47,839
way

1349
00:51:47,839 --> 00:51:49,680
at least one of alice or bob must be

1350
00:51:49,680 --> 00:51:51,440
honest because otherwise if both of them

1351
00:51:51,440 --> 00:51:52,319
are corrupted

1352
00:51:52,319 --> 00:51:54,079
if both of them are malicious then we

1353
00:51:54,079 --> 00:51:55,440
have nothing to prove

1354
00:51:55,440 --> 00:51:57,359
all right so one of them no it's an n

1355
00:51:57,359 --> 00:52:00,880
it's so it's an and function

1356
00:52:00,960 --> 00:52:05,359
or or is it an or function

1357
00:52:05,359 --> 00:52:09,760
at least one at least one must be honest

1358
00:52:09,760 --> 00:52:11,680
at least one must be honest at least one

1359
00:52:11,680 --> 00:52:12,880
of alice and bob was to be honest

1360
00:52:12,880 --> 00:52:14,160
because otherwise we don't have anything

1361
00:52:14,160 --> 00:52:15,200
to prove

1362
00:52:15,200 --> 00:52:18,480
i mean if both of them are

1363
00:52:18,480 --> 00:52:20,400
usually if there is no honest party we

1364
00:52:20,400 --> 00:52:22,000
don't have we don't have any obligation

1365
00:52:22,000 --> 00:52:23,359
to guarantee anything for them or

1366
00:52:23,359 --> 00:52:24,720
we can't because they can behave

1367
00:52:24,720 --> 00:52:26,480
arbitrarily right so

1368
00:52:26,480 --> 00:52:30,800
well so how does bitcoin work

1369
00:52:31,119 --> 00:52:33,440
um well there you have basically a set

1370
00:52:33,440 --> 00:52:34,400
of miners

1371
00:52:34,400 --> 00:52:37,119
and uh you have to assume that at least

1372
00:52:37,119 --> 00:52:37,920
50

1373
00:52:37,920 --> 00:52:40,480
of the computation power is honest right

1374
00:52:40,480 --> 00:52:42,960
so that's

1375
00:52:44,839 --> 00:52:48,079
circular probability right

1376
00:52:48,079 --> 00:52:51,119
um well the point is that

1377
00:52:51,119 --> 00:52:54,319
blockchains exist and and we want to

1378
00:52:54,319 --> 00:52:56,640
know how we can actually utilize them

1379
00:52:56,640 --> 00:52:58,880
and there are some protocols that are

1380
00:52:58,880 --> 00:53:00,240
being executed on top of them

1381
00:53:00,240 --> 00:53:02,079
okay so maybe in the personal time we'll

1382
00:53:02,079 --> 00:53:03,920
move to the next uh

1383
00:53:03,920 --> 00:53:07,440
question uh

1384
00:53:07,440 --> 00:53:10,800
or if there's no more announcement

1385
00:53:10,800 --> 00:53:11,599
question maybe

1386
00:53:11,599 --> 00:53:14,880
so so you you mentioned um two-party

1387
00:53:14,880 --> 00:53:16,880
adapter signatures is so this i assume

1388
00:53:16,880 --> 00:53:17,520
this is

1389
00:53:17,520 --> 00:53:19,599
what is needed for the payment channels

1390
00:53:19,599 --> 00:53:20,720
application

1391
00:53:20,720 --> 00:53:22,640
so um what are applications where you

1392
00:53:22,640 --> 00:53:24,319
have more than two parties

1393
00:53:24,319 --> 00:53:27,359
maybe that's a very interesting question

1394
00:53:27,359 --> 00:53:31,359
so at least we couldn't find

1395
00:53:31,359 --> 00:53:35,119
any uh reasonable applications where you

1396
00:53:35,119 --> 00:53:35,359
have

1397
00:53:35,359 --> 00:53:37,520
more than two parties like we could

1398
00:53:37,520 --> 00:53:38,880
artificially extend the number of

1399
00:53:38,880 --> 00:53:40,400
parties to more than two parties

1400
00:53:40,400 --> 00:53:42,480
but we couldn't come up with an n-party

1401
00:53:42,480 --> 00:53:43,839
application

1402
00:53:43,839 --> 00:53:46,319
uh that that that requires adapter

1403
00:53:46,319 --> 00:53:47,520
signatures

1404
00:53:47,520 --> 00:53:50,720
um so

1405
00:53:50,720 --> 00:53:52,079
if there is one it would be interesting

1406
00:53:52,079 --> 00:53:54,839
to design uh an end party out of their

1407
00:53:54,839 --> 00:53:57,839
signatures

1408
00:54:09,119 --> 00:54:12,240
so uh we have one more question

1409
00:54:12,240 --> 00:54:15,440
uh can one yield a lot of space adapter

1410
00:54:15,440 --> 00:54:18,160
signature for from your generic

1411
00:54:18,160 --> 00:54:19,760
construction

1412
00:54:19,760 --> 00:54:24,960
uh so

1413
00:54:24,960 --> 00:54:27,920
okay so there is one thing that the the

1414
00:54:27,920 --> 00:54:29,599
short answer is yes but but

1415
00:54:29,599 --> 00:54:31,440
i have to be a little bit careful here

1416
00:54:31,440 --> 00:54:33,440
the one of the works that i

1417
00:54:33,440 --> 00:54:35,119
mentioned previously is based on

1418
00:54:35,119 --> 00:54:36,880
lattice-based constructions

1419
00:54:36,880 --> 00:54:39,119
but there is there is a there is a

1420
00:54:39,119 --> 00:54:40,640
slight difference in on the security

1421
00:54:40,640 --> 00:54:41,839
guarantee as i

1422
00:54:41,839 --> 00:54:46,160
pointed out shortly the problem is that

1423
00:54:46,160 --> 00:54:47,599
this the secret value that you're

1424
00:54:47,599 --> 00:54:49,520
extracting here uh

1425
00:54:49,520 --> 00:54:52,559
must be from a certain relation and

1426
00:54:52,559 --> 00:54:53,040
there

1427
00:54:53,040 --> 00:54:54,880
you do not have to necessarily extract

1428
00:54:54,880 --> 00:54:57,280
the same value or a value from the

1429
00:54:57,280 --> 00:54:59,200
that relation but a subset of that

1430
00:54:59,200 --> 00:55:00,319
relation

1431
00:55:00,319 --> 00:55:02,559
so there is a slightly weaker guarantee

1432
00:55:02,559 --> 00:55:03,839
there but but

1433
00:55:03,839 --> 00:55:06,799
yes the short answer is yes it requires

1434
00:55:06,799 --> 00:55:08,559
a little bit of modification

1435
00:55:08,559 --> 00:55:12,799
to the to the definition that we have

1436
00:55:12,799 --> 00:55:15,520
i see which actually the authors of that

1437
00:55:15,520 --> 00:55:17,359
paper

1438
00:55:17,359 --> 00:55:19,839
weaken the definition in their paper so

1439
00:55:19,839 --> 00:55:22,240
i see

1440
00:55:22,480 --> 00:55:25,920
okay um yeah so let's thank uh

1441
00:55:25,920 --> 00:55:30,160
siawash again and um

1442
00:55:30,160 --> 00:55:33,440
we'll move to the next talk

1443
00:55:33,440 --> 00:55:36,559
uh the next talk

1444
00:55:36,559 --> 00:55:39,520
is gonna be banquet short and fast

1445
00:55:39,520 --> 00:55:42,640
signatures from aes by carson baum

1446
00:55:42,640 --> 00:55:49,839
uh sorry

1447
00:56:00,000 --> 00:56:03,839
greg zever

1448
00:56:04,040 --> 00:56:08,079
zavarucha uh sorry for

1449
00:56:08,079 --> 00:56:11,680
the speaker is uh carson

1450
00:56:12,160 --> 00:56:14,559
yeah thanks for the introduction um yeah

1451
00:56:14,559 --> 00:56:16,720
i'm going to talk about uh bankers

1452
00:56:16,720 --> 00:56:19,760
which is a uh signature scheme that

1453
00:56:19,760 --> 00:56:20,240
gives you

1454
00:56:20,240 --> 00:56:23,359
short and uh fastly generated signatures

1455
00:56:23,359 --> 00:56:26,079
uh based on aes and this is joint work

1456
00:56:26,079 --> 00:56:26,880
as mentioned

1457
00:56:26,880 --> 00:56:31,040
with the manuela and cyprian from

1458
00:56:31,280 --> 00:56:33,440
peter shaw from osun university daniel

1459
00:56:33,440 --> 00:56:35,119
from tu grads and greg

1460
00:56:35,119 --> 00:56:38,640
from microsoft research

1461
00:56:38,640 --> 00:56:41,680
so in the interest of time as this has

1462
00:56:41,680 --> 00:56:43,359
to be a short talk let me go through the

1463
00:56:43,359 --> 00:56:46,000
key points of our constructions

1464
00:56:46,000 --> 00:56:49,119
which is uh our construction bank

1465
00:56:49,119 --> 00:56:50,720
is a signature scheme that is based on

1466
00:56:50,720 --> 00:56:52,880
the so-called npc in the head paradigm

1467
00:56:52,880 --> 00:56:54,720
that recently generated a bit more

1468
00:56:54,720 --> 00:56:56,880
interest

1469
00:56:56,880 --> 00:57:00,319
it's signs messages as follows well

1470
00:57:00,319 --> 00:57:02,720
you generate a zero knowledge proof of

1471
00:57:02,720 --> 00:57:03,760
knowledge

1472
00:57:03,760 --> 00:57:07,040
for a key for a aes

1473
00:57:07,040 --> 00:57:09,359
plaintext ciphertext pair and this proof

1474
00:57:09,359 --> 00:57:10,400
of knowledge then

1475
00:57:10,400 --> 00:57:14,000
yields your signature and what we do is

1476
00:57:14,000 --> 00:57:14,640
we achieve

1477
00:57:14,640 --> 00:57:18,319
a better proof size for similar run

1478
00:57:18,319 --> 00:57:18,960
times

1479
00:57:18,960 --> 00:57:21,520
in comparison to previous works such as

1480
00:57:21,520 --> 00:57:22,480
kkw

1481
00:57:22,480 --> 00:57:26,000
and another work called barbecue and we

1482
00:57:26,000 --> 00:57:27,040
do this by

1483
00:57:27,040 --> 00:57:30,240
exploiting the structure of aes

1484
00:57:30,240 --> 00:57:33,119
and the way how mpc in the head works a

1485
00:57:33,119 --> 00:57:35,920
bit more efficiently

1486
00:57:35,920 --> 00:57:39,200
so how do previous signature skills

1487
00:57:39,200 --> 00:57:40,880
based on npc in the head

1488
00:57:40,880 --> 00:57:44,480
work so the uh i guess the most popular

1489
00:57:44,480 --> 00:57:47,280
constructions are picnic and kkw

1490
00:57:47,280 --> 00:57:49,119
uh where you start up uh from a block

1491
00:57:49,119 --> 00:57:50,720
cipher over

1492
00:57:50,720 --> 00:57:53,280
let's say the field of two such as aes

1493
00:57:53,280 --> 00:57:54,160
or

1494
00:57:54,160 --> 00:57:55,920
low mc for example which is just a

1495
00:57:55,920 --> 00:57:57,839
picnic you define your

1496
00:57:57,839 --> 00:58:01,520
signing key to be a block cipher key

1497
00:58:01,520 --> 00:58:03,839
and your verification key is going to be

1498
00:58:03,839 --> 00:58:05,920
a plain text ciphertext pair

1499
00:58:05,920 --> 00:58:07,599
where the ciphertext is encrypted under

1500
00:58:07,599 --> 00:58:08,960
the uh key

1501
00:58:08,960 --> 00:58:12,319
k that was used uh as a as a signing key

1502
00:58:12,319 --> 00:58:12,640
or

1503
00:58:12,640 --> 00:58:16,000
defined as a signing key now uh giving

1504
00:58:16,000 --> 00:58:16,400
this

1505
00:58:16,400 --> 00:58:18,640
uh this verification key how do you sign

1506
00:58:18,640 --> 00:58:19,920
well first we construct

1507
00:58:19,920 --> 00:58:22,160
a an identification scheme like you

1508
00:58:22,160 --> 00:58:23,119
prove

1509
00:58:23,119 --> 00:58:25,760
in zero knowledge that you know a key k

1510
00:58:25,760 --> 00:58:27,040
that encrypts

1511
00:58:27,040 --> 00:58:30,240
x to the given cipher text

1512
00:58:30,240 --> 00:58:31,599
and because it's improved knowledge is

1513
00:58:31,599 --> 00:58:33,520
not going to be any anything about your

1514
00:58:33,520 --> 00:58:34,079
key k

1515
00:58:34,079 --> 00:58:36,000
and this gives you if interactive and

1516
00:58:36,000 --> 00:58:37,599
identification scheme

1517
00:58:37,599 --> 00:58:39,280
and now if you apply the phma transform

1518
00:58:39,280 --> 00:58:41,680
to this and uh hash your message

1519
00:58:41,680 --> 00:58:44,400
into the future may transform you get a

1520
00:58:44,400 --> 00:58:46,079
signature scheme

1521
00:58:46,079 --> 00:58:49,119
in a standard way and uh the

1522
00:58:49,119 --> 00:58:51,040
rationale for the efficiency here is

1523
00:58:51,040 --> 00:58:52,640
that you know

1524
00:58:52,640 --> 00:58:54,559
but what matters for the signature size

1525
00:58:54,559 --> 00:58:56,400
is the size of the proof

1526
00:58:56,400 --> 00:58:58,640
and an npc in the head that is that

1527
00:58:58,640 --> 00:59:00,160
scales with the number of inputs and the

1528
00:59:00,160 --> 00:59:02,000
number of non-linear gates to this

1529
00:59:02,000 --> 00:59:05,040
encryption function

1530
00:59:05,040 --> 00:59:07,760
now um an interesting observation in the

1531
00:59:07,760 --> 00:59:09,920
so-called barbecue scheme was that

1532
00:59:09,920 --> 00:59:13,440
the aes block cipher is

1533
00:59:13,440 --> 00:59:15,680
well as as is publicly known is is not

1534
00:59:15,680 --> 00:59:16,880
just you know

1535
00:59:16,880 --> 00:59:19,119
defined over bits but actually you can

1536
00:59:19,119 --> 00:59:20,559
look at this as

1537
00:59:20,559 --> 00:59:22,880
uh you know all operations happening on

1538
00:59:22,880 --> 00:59:25,040
uh on blocks of bytes

1539
00:59:25,040 --> 00:59:26,960
and actually everything that is

1540
00:59:26,960 --> 00:59:28,319
happening is happening

1541
00:59:28,319 --> 00:59:31,040
is linear and therefore free and mpc in

1542
00:59:31,040 --> 00:59:31,520
the head

1543
00:59:31,520 --> 00:59:33,920
doesn't cost in your in your signature

1544
00:59:33,920 --> 00:59:34,720
what costs

1545
00:59:34,720 --> 00:59:36,880
is the s box that's the only non-linear

1546
00:59:36,880 --> 00:59:38,319
step and the s box

1547
00:59:38,319 --> 00:59:41,040
is actually computing an inversion of

1548
00:59:41,040 --> 00:59:42,559
the field in the field f two to the

1549
00:59:42,559 --> 00:59:43,920
eighth so you take your

1550
00:59:43,920 --> 00:59:46,960
you know bit string you take your byte

1551
00:59:46,960 --> 00:59:48,319
you invert it over this field and you

1552
00:59:48,319 --> 00:59:50,480
map zero to zero in order to get them

1553
00:59:50,480 --> 00:59:54,079
you know uh to have a complete uh

1554
00:59:54,079 --> 00:59:57,359
uh s box and that is that right

1555
00:59:57,359 --> 01:00:00,400
so uh what they did in barbecue was then

1556
01:00:00,400 --> 01:00:00,960
to

1557
01:00:00,960 --> 01:00:04,799
uh to make a better and

1558
01:00:04,799 --> 01:00:07,040
more efficient signature scheme by uh

1559
01:00:07,040 --> 01:00:08,000
evaluating

1560
01:00:08,000 --> 01:00:10,880
um the the circuits for the encryption

1561
01:00:10,880 --> 01:00:12,960
function over f2 to the eight instead of

1562
01:00:12,960 --> 01:00:15,760
f2 as was done before

1563
01:00:15,760 --> 01:00:18,799
our observation in banquet is

1564
01:00:18,799 --> 01:00:21,280
well instead of computing the encryption

1565
01:00:21,280 --> 01:00:23,200
function forward of the block cipher

1566
01:00:23,200 --> 01:00:26,880
why not just verify that the encryption

1567
01:00:26,880 --> 01:00:27,680
function was

1568
01:00:27,680 --> 01:00:29,040
applied correctly or you can do this

1569
01:00:29,040 --> 01:00:30,720
correctly the idea is

1570
01:00:30,720 --> 01:00:33,359
well the prover or designer in this case

1571
01:00:33,359 --> 01:00:35,119
he knows for each s-box what is the

1572
01:00:35,119 --> 01:00:36,799
input because he has the key and he has

1573
01:00:36,799 --> 01:00:38,799
the plaintext and the ssi for text right

1574
01:00:38,799 --> 01:00:41,280
so he also knows the output of the s-box

1575
01:00:41,280 --> 01:00:42,640
so he could provide

1576
01:00:42,640 --> 01:00:44,880
the output of the xbox as part of the

1577
01:00:44,880 --> 01:00:46,720
verification circuit

1578
01:00:46,720 --> 01:00:48,880
uh as input to the verification circuit

1579
01:00:48,880 --> 01:00:49,760
so instead of

1580
01:00:49,760 --> 01:00:52,880
forward evaluating

1581
01:00:52,880 --> 01:00:54,960
the encryption function in the zero

1582
01:00:54,960 --> 01:00:56,000
knowledge proof

1583
01:00:56,000 --> 01:00:58,079
you just check that all of these you

1584
01:00:58,079 --> 01:01:00,079
know inputs and outputs of s boxes uh

1585
01:01:00,079 --> 01:01:01,920
you know multiply to one

1586
01:01:01,920 --> 01:01:03,760
and now you do the same operation all

1587
01:01:03,760 --> 01:01:05,119
over again and again and again it just

1588
01:01:05,119 --> 01:01:06,079
gives rise to

1589
01:01:06,079 --> 01:01:07,839
uh you know being able to use

1590
01:01:07,839 --> 01:01:09,280
amortization

1591
01:01:09,280 --> 01:01:12,160
and so for ms boxes that you have to do

1592
01:01:12,160 --> 01:01:12,400
in

1593
01:01:12,400 --> 01:01:15,200
aes right we only have to communicate

1594
01:01:15,200 --> 01:01:17,119
square root of m

1595
01:01:17,119 --> 01:01:20,400
field elements using a um

1596
01:01:20,400 --> 01:01:23,520
amortized proof by bonnet at all and

1597
01:01:23,520 --> 01:01:25,520
this allows us to save in terms of

1598
01:01:25,520 --> 01:01:27,040
signature size because we reduce the

1599
01:01:27,040 --> 01:01:29,440
communication of the zero merge proof

1600
01:01:29,440 --> 01:01:31,359
uh in terms of implementation so we

1601
01:01:31,359 --> 01:01:33,520
fully implemented our scheme and

1602
01:01:33,520 --> 01:01:35,839
gave a proof of security in the random

1603
01:01:35,839 --> 01:01:36,799
oracle model

1604
01:01:36,799 --> 01:01:40,079
assuming that aes in certain way acts as

1605
01:01:40,079 --> 01:01:40,480
a

1606
01:01:40,480 --> 01:01:43,119
as a one-way function we lose two to

1607
01:01:43,119 --> 01:01:44,319
three bits of

1608
01:01:44,319 --> 01:01:47,440
security as we can only support a choice

1609
01:01:47,440 --> 01:01:48,480
of keys and

1610
01:01:48,480 --> 01:01:50,640
plain text that don't lead to s-boxes

1611
01:01:50,640 --> 01:01:53,280
that have zero input because you know

1612
01:01:53,280 --> 01:01:54,640
zero times something is never going to

1613
01:01:54,640 --> 01:01:56,079
be one so verification is going to be a

1614
01:01:56,079 --> 01:01:57,280
bit hard

1615
01:01:57,280 --> 01:02:00,799
uh in terms of runtime our construction

1616
01:02:00,799 --> 01:02:03,760
uh that you can see here for for runtime

1617
01:02:03,760 --> 01:02:04,480
numbers

1618
01:02:04,480 --> 01:02:07,200
is comparable with picnic 3 which is a

1619
01:02:07,200 --> 01:02:08,160
candidate

1620
01:02:08,160 --> 01:02:11,359
uh for the post quantum

1621
01:02:11,359 --> 01:02:14,799
post quantum challenge uh so for the

1622
01:02:14,799 --> 01:02:15,280
same

1623
01:02:15,280 --> 01:02:18,480
sign and verification time we get say 50

1624
01:02:18,480 --> 01:02:21,039
larger signature size but if you scale

1625
01:02:21,039 --> 01:02:22,240
up the number of parties

1626
01:02:22,240 --> 01:02:25,280
uh we get you know something that is

1627
01:02:25,280 --> 01:02:27,119
uh that's comparable in size to picking

1628
01:02:27,119 --> 01:02:28,400
three

1629
01:02:28,400 --> 01:02:30,400
interestingly uh we don't have to use a

1630
01:02:30,400 --> 01:02:31,920
non-standard block cipher but we can use

1631
01:02:31,920 --> 01:02:33,760
aes instead of low mc where there have

1632
01:02:33,760 --> 01:02:34,799
been a bit of

1633
01:02:34,799 --> 01:02:36,480
you know it has been a bit shaky

1634
01:02:36,480 --> 01:02:38,960
recently if this is a good block cipher

1635
01:02:38,960 --> 01:02:39,760
for

1636
01:02:39,760 --> 01:02:42,400
uh you know signatures or not and then

1637
01:02:42,400 --> 01:02:43,920
if we take another candidate and compare

1638
01:02:43,920 --> 01:02:45,119
with that which would be for example

1639
01:02:45,119 --> 01:02:46,559
sphinx plus

1640
01:02:46,559 --> 01:02:49,039
then we can see uh that we can you know

1641
01:02:49,039 --> 01:02:51,760
if we compare with as things plus fast

1642
01:02:51,760 --> 01:02:54,319
that uh well our verification time is is

1643
01:02:54,319 --> 01:02:55,920
not as good but we have comparable

1644
01:02:55,920 --> 01:02:57,359
signature size

1645
01:02:57,359 --> 01:02:59,520
and if we look at things small well we

1646
01:02:59,520 --> 01:03:00,880
can't reach their

1647
01:03:00,880 --> 01:03:04,720
signature size unfortunately but our

1648
01:03:04,720 --> 01:03:08,160
signing time is definitely a lot better

1649
01:03:08,160 --> 01:03:10,720
and with this i'd like to thank you for

1650
01:03:10,720 --> 01:03:11,839
your attention if you

1651
01:03:11,839 --> 01:03:14,559
would like to know more i highly

1652
01:03:14,559 --> 01:03:16,720
recommend cyprion's extended talk that

1653
01:03:16,720 --> 01:03:17,200
was

1654
01:03:17,200 --> 01:03:19,440
uploaded to the website of the

1655
01:03:19,440 --> 01:03:20,559
conference and

1656
01:03:20,559 --> 01:03:22,160
i'd also recommend you have a look at

1657
01:03:22,160 --> 01:03:26,319
our full version which is on eprint

1658
01:03:28,839 --> 01:03:31,839
thanks

1659
01:03:38,240 --> 01:03:41,280
and adam you muted

1660
01:03:41,280 --> 01:03:43,920
uh sorry i was saying with stan carson

1661
01:03:43,920 --> 01:03:45,200
and uh

1662
01:03:45,200 --> 01:03:48,879
take any questions so

1663
01:03:51,280 --> 01:03:53,440
yeah there's i think there's a question

1664
01:03:53,440 --> 01:03:54,720
by stanislav

1665
01:03:54,720 --> 01:03:56,480
uh intuitively if you reveal the

1666
01:03:56,480 --> 01:03:58,160
immediate values in the aes computation

1667
01:03:58,160 --> 01:04:00,400
you put outputs of s-boxes

1668
01:04:00,400 --> 01:04:03,280
why is it then that you are not leaking

1669
01:04:03,280 --> 01:04:05,680
any info on the aes key

1670
01:04:05,680 --> 01:04:07,920
which is the signature key so the

1671
01:04:07,920 --> 01:04:09,680
signature remains unforgeable so

1672
01:04:09,680 --> 01:04:13,119
um good question uh

1673
01:04:13,119 --> 01:04:15,119
so we don't actually reveal all these

1674
01:04:15,119 --> 01:04:16,559
intermediate values so

1675
01:04:16,559 --> 01:04:17,839
since it's a zero knowledge proof

1676
01:04:17,839 --> 01:04:20,319
everything that happens uh in the in the

1677
01:04:20,319 --> 01:04:21,760
verification

1678
01:04:21,760 --> 01:04:24,720
uh is uh only happening inside the zero

1679
01:04:24,720 --> 01:04:25,760
launch group so you can

1680
01:04:25,760 --> 01:04:28,880
you can neatly simulate that uh all you

1681
01:04:28,880 --> 01:04:29,520
actually know

1682
01:04:29,520 --> 01:04:31,920
what is going on uh and this is true is

1683
01:04:31,920 --> 01:04:33,359
that uh

1684
01:04:33,359 --> 01:04:36,480
you know that certain that the inputs to

1685
01:04:36,480 --> 01:04:38,400
the s boxes will never be zero but we

1686
01:04:38,400 --> 01:04:38,880
argue

1687
01:04:38,880 --> 01:04:41,920
in our paper uh why this is actually not

1688
01:04:41,920 --> 01:04:42,559
a problem

1689
01:04:42,559 --> 01:04:46,079
for security actually um let me say that

1690
01:04:46,079 --> 01:04:49,680
uh approximately i think 30

1691
01:04:49,680 --> 01:04:52,000
of all aes instances if you choose your

1692
01:04:52,000 --> 01:04:53,839
key and your input

1693
01:04:53,839 --> 01:04:57,119
that what you encrypt at random

1694
01:04:57,119 --> 01:04:59,599
would give you s boxes that have nonzero

1695
01:04:59,599 --> 01:05:00,319
input so if

1696
01:05:00,319 --> 01:05:01,760
you know this would be easy to solve

1697
01:05:01,760 --> 01:05:05,200
then we have broken a lot of aes

1698
01:05:06,839 --> 01:05:09,440
instances

1699
01:05:09,440 --> 01:05:11,680
okay so there's another question from

1700
01:05:11,680 --> 01:05:13,680
daniel which says

1701
01:05:13,680 --> 01:05:16,880
banquet uses using aes instead of low mc

1702
01:05:16,880 --> 01:05:18,960
is great for security it seems

1703
01:05:18,960 --> 01:05:20,720
to cost a little more than the other

1704
01:05:20,720 --> 01:05:22,079
options do you think there's a good

1705
01:05:22,079 --> 01:05:23,440
chance to further

1706
01:05:23,440 --> 01:05:25,359
improve the efficiency of future banquet

1707
01:05:25,359 --> 01:05:27,039
variants or iterations while maintaining

1708
01:05:27,039 --> 01:05:30,000
the stronger security posture

1709
01:05:30,000 --> 01:05:33,119
um very good questions um very good

1710
01:05:33,119 --> 01:05:33,520
question

1711
01:05:33,520 --> 01:05:36,720
so i think that's uh so i

1712
01:05:36,720 --> 01:05:38,559
unfortunately don't see an immediate way

1713
01:05:38,559 --> 01:05:41,200
of uh improving bank hits

1714
01:05:41,200 --> 01:05:44,480
um i'd recommend you to have a look at

1715
01:05:44,480 --> 01:05:47,680
uh this year's ccs as some of

1716
01:05:47,680 --> 01:05:51,520
our co-authors have been working on a

1717
01:05:51,520 --> 01:05:55,039
similar protocol that

1718
01:05:55,039 --> 01:05:58,319
does a better signature size with

1719
01:05:58,319 --> 01:06:00,960
comparable

1720
01:06:00,960 --> 01:06:04,559
signing verification time and uh

1721
01:06:04,559 --> 01:06:08,000
yeah that's all i can say what about

1722
01:06:08,000 --> 01:06:11,839
what about uh versions of rhinedale

1723
01:06:11,839 --> 01:06:13,599
itself

1724
01:06:13,599 --> 01:06:18,000
like rheindol 256.

1725
01:06:18,000 --> 01:06:21,039
um so

1726
01:06:21,039 --> 01:06:24,079
we could get away with uh

1727
01:06:24,079 --> 01:06:27,119
less uh rounds of aes

1728
01:06:27,119 --> 01:06:31,359
of the of the the of the round function

1729
01:06:31,359 --> 01:06:34,160
as what was proposed uh but the whole

1730
01:06:34,160 --> 01:06:35,119
point of our

1731
01:06:35,119 --> 01:06:38,880
work was to have a uh to use a standard

1732
01:06:38,880 --> 01:06:40,160
primitive such as aes

1733
01:06:40,160 --> 01:06:41,599
as it has been standardized in the

1734
01:06:41,599 --> 01:06:43,440
process and not uh

1735
01:06:43,440 --> 01:06:45,680
do you know simplifications of aes

1736
01:06:45,680 --> 01:06:46,960
that's uh

1737
01:06:46,960 --> 01:06:49,200
let's say more non-standard uh that

1738
01:06:49,200 --> 01:06:51,039
would uh allow for a

1739
01:06:51,039 --> 01:06:54,319
a better proof size like if if if we say

1740
01:06:54,319 --> 01:06:56,079
if we want to replace low mc with a

1741
01:06:56,079 --> 01:06:58,160
better block cipher uh or more tested

1742
01:06:58,160 --> 01:07:00,160
block cipher then we shouldn't go to

1743
01:07:00,160 --> 01:07:04,000
and we remove rounds from uh

1744
01:07:04,000 --> 01:07:06,079
from the block cipher that we're using

1745
01:07:06,079 --> 01:07:08,160
no

1746
01:07:08,160 --> 01:07:11,680
absolutely but i thought that rhinedau

1747
01:07:11,680 --> 01:07:17,359
had been proved out to 256.

1748
01:07:18,640 --> 01:07:20,160
yeah so the proof techniques in the

1749
01:07:20,160 --> 01:07:21,760
paper will work for rhinel

1750
01:07:21,760 --> 01:07:24,160
just as as well as i guess they should

1751
01:07:24,160 --> 01:07:25,440
yeah yeah

1752
01:07:25,440 --> 01:07:27,359
i think we even have some size estimates

1753
01:07:27,359 --> 01:07:28,880
there for um

1754
01:07:28,880 --> 01:07:32,079
the 256 bit block size

1755
01:07:32,079 --> 01:07:34,319
yep

1756
01:07:36,160 --> 01:07:40,839
okay that's great yeah any other

1757
01:07:40,839 --> 01:07:44,080
questions um

1758
01:07:44,080 --> 01:07:46,960
[Music]

1759
01:07:46,960 --> 01:07:48,880
so how does the performance compare to

1760
01:07:48,880 --> 01:07:50,799
more standard signature schemes like

1761
01:07:50,799 --> 01:07:54,319
uh not post quantum signature schemes

1762
01:07:54,319 --> 01:07:56,160
what's the overhead

1763
01:07:56,160 --> 01:07:59,520
um so let me first say we uh so

1764
01:07:59,520 --> 01:08:01,760
we don't have a proof that this is a uh

1765
01:08:01,760 --> 01:08:03,440
you know post-quantum candidate

1766
01:08:03,440 --> 01:08:05,280
uh secure schema so it falls in the same

1767
01:08:05,280 --> 01:08:06,960
category as other schemes such as picnic

1768
01:08:06,960 --> 01:08:07,839
but

1769
01:08:07,839 --> 01:08:09,839
uh you know i'd be careful to claim that

1770
01:08:09,839 --> 01:08:11,599
it's quantum secure

1771
01:08:11,599 --> 01:08:14,319
um i don't have runtimes in mind i i

1772
01:08:14,319 --> 01:08:14,799
guess

1773
01:08:14,799 --> 01:08:17,839
we do uh quite a bit worse than uh

1774
01:08:17,839 --> 01:08:19,279
some public key schemes that are out

1775
01:08:19,279 --> 01:08:21,198
there okay um

1776
01:08:21,198 --> 01:08:22,799
in particular in particular when it

1777
01:08:22,799 --> 01:08:24,960
comes to signature size i mean

1778
01:08:24,960 --> 01:08:27,279
all that you've seen before in this in

1779
01:08:27,279 --> 01:08:28,640
this session is

1780
01:08:28,640 --> 01:08:30,158
having signatures a lot smaller than

1781
01:08:30,158 --> 01:08:32,639
what we have

1782
01:08:33,198 --> 01:08:36,319
uh merkel asks

1783
01:08:36,319 --> 01:08:38,960
a couple of other questions uh what do

1784
01:08:38,960 --> 01:08:39,679
you think

1785
01:08:39,679 --> 01:08:41,600
about improving mpc-friendly block

1786
01:08:41,600 --> 01:08:44,158
ciphers and should we standardize

1787
01:08:44,158 --> 01:08:47,120
block ciphers for special cryptographic

1788
01:08:47,120 --> 01:08:48,799
applications such as

1789
01:08:48,799 --> 01:08:52,960
zero knowledge proof or mpc um

1790
01:08:52,960 --> 01:08:57,040
goods uh good question marco thanks um

1791
01:08:57,040 --> 01:08:59,359
so i'm i haven't i have i am not an

1792
01:08:59,359 --> 01:09:00,319
expert in

1793
01:09:00,319 --> 01:09:03,759
um uh symmetric key cryptography so i

1794
01:09:03,759 --> 01:09:05,439
can't say much about if this is a good

1795
01:09:05,439 --> 01:09:06,080
idea or not

1796
01:09:06,080 --> 01:09:09,120
the approaches that have been there uh

1797
01:09:09,120 --> 01:09:12,000
have a bit some of them have failed uh

1798
01:09:12,000 --> 01:09:13,198
some of them

1799
01:09:13,198 --> 01:09:15,359
are uh doing well at this now this

1800
01:09:15,359 --> 01:09:17,040
rescue prime for example which has been

1801
01:09:17,040 --> 01:09:18,000
proposed

1802
01:09:18,000 --> 01:09:19,759
which is a hash function this is zero

1803
01:09:19,759 --> 01:09:21,040
knowledge proof friendly

1804
01:09:21,040 --> 01:09:23,198
what we tried to show in our uh in our

1805
01:09:23,198 --> 01:09:25,040
work here was well if you use standard

1806
01:09:25,040 --> 01:09:26,640
tested primitives

1807
01:09:26,640 --> 01:09:28,880
you're not so far away from you know

1808
01:09:28,880 --> 01:09:31,520
what you can do with highly optimized

1809
01:09:31,520 --> 01:09:34,479
uh you know block ciphers for that

1810
01:09:34,479 --> 01:09:35,198
setting

1811
01:09:35,198 --> 01:09:37,198
and actually there exists other you know

1812
01:09:37,198 --> 01:09:39,279
block ciphers uh that are used that are

1813
01:09:39,279 --> 01:09:40,719
based on

1814
01:09:40,719 --> 01:09:43,040
uh uh for example the gender legendre

1815
01:09:43,040 --> 01:09:44,158
symbol

1816
01:09:44,158 --> 01:09:49,679
uh which would give you a lot smaller uh

1817
01:09:49,679 --> 01:09:51,520
you know it's not smaller signature size

1818
01:09:51,520 --> 01:09:52,960
but again it's you know we want to use

1819
01:09:52,960 --> 01:09:54,640
something that is

1820
01:09:54,640 --> 01:09:58,560
tested for 20 years such as aes

1821
01:09:59,199 --> 01:10:01,040
but it's always obviously an interesting

1822
01:10:01,040 --> 01:10:03,360
research direction

1823
01:10:03,360 --> 01:10:06,640
cool okay um any other question or

1824
01:10:06,640 --> 01:10:07,120
should we

1825
01:10:07,120 --> 01:10:09,599
wrap up

1826
01:10:10,800 --> 01:10:13,600
okay so let's think uh carson again and

1827
01:10:13,600 --> 01:10:15,280
uh

1828
01:10:15,280 --> 01:10:18,400
don't know if uh

1829
01:10:18,400 --> 01:10:21,280
i think there's a social hour i don't

1830
01:10:21,280 --> 01:10:22,640
know how we transition to that

1831
01:10:22,640 --> 01:10:25,600
one being up

