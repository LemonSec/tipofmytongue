1
00:00:01,520 --> 00:00:03,439
now you can welcome everybody

2
00:00:03,439 --> 00:00:06,480
thanks so welcome again everybody to

3
00:00:06,480 --> 00:00:10,880
um our second invited talk

4
00:00:10,880 --> 00:00:14,639
by a speaker who had made

5
00:00:14,639 --> 00:00:16,560
who has made many fundamental

6
00:00:16,560 --> 00:00:18,560
contributions to uh

7
00:00:18,560 --> 00:00:22,240
design and analysis of cryptosystems

8
00:00:22,240 --> 00:00:25,279
he's a professor at rural university at

9
00:00:25,279 --> 00:00:26,480
bochum

10
00:00:26,480 --> 00:00:29,560
did a postdoc in san diego and then

11
00:00:29,560 --> 00:00:33,760
cwi i think that's what i met him

12
00:00:33,760 --> 00:00:36,559
uh he has published over 100

13
00:00:36,559 --> 00:00:38,640
publications in conference and journals

14
00:00:38,640 --> 00:00:42,000
received the sophia kovalevsky

15
00:00:42,000 --> 00:00:44,879
award for developing quantum system

16
00:00:44,879 --> 00:00:45,440
crypto

17
00:00:45,440 --> 00:00:48,879
resistant crypto he got an

18
00:00:48,879 --> 00:00:52,480
erc consolidator grant for building fast

19
00:00:52,480 --> 00:00:55,120
cryptography on small devices

20
00:00:55,120 --> 00:00:57,840
and currently is the spokesperson for

21
00:00:57,840 --> 00:01:00,000
the cluster of excellence cyber security

22
00:01:00,000 --> 00:01:02,800
in the age of large-scale adversaries

23
00:01:02,800 --> 00:01:07,040
of the dfg which stands for german

24
00:01:07,040 --> 00:01:10,720
national foundation no german

25
00:01:10,720 --> 00:01:13,760
research foundation all right

26
00:01:13,760 --> 00:01:16,960
so we're happy to have here ike

27
00:01:16,960 --> 00:01:20,240
like kelts and ike welcome and the floor

28
00:01:20,240 --> 00:01:22,720
is yours

29
00:01:22,960 --> 00:01:26,000
okay yeah thanks juan

30
00:01:26,000 --> 00:01:29,439
for this introduction and uh well thanks

31
00:01:29,439 --> 00:01:30,159
for the

32
00:01:30,159 --> 00:01:32,479
program committee to to inviting me uh

33
00:01:32,479 --> 00:01:34,240
to give this talk

34
00:01:34,240 --> 00:01:36,799
um so when i thought about the topic uh

35
00:01:36,799 --> 00:01:37,840
well i looked at

36
00:01:37,840 --> 00:01:41,759
leo duca gave a we'll give a talk on

37
00:01:41,759 --> 00:01:46,079
something more well

38
00:01:46,079 --> 00:01:49,119
some some modern cryptography so i

39
00:01:49,119 --> 00:01:50,399
thought i'd give a talk on some

40
00:01:50,399 --> 00:01:52,079
old-fashioned cryptography

41
00:01:52,079 --> 00:01:54,560
so that's why my title is how provable

42
00:01:54,560 --> 00:01:55,200
secure

43
00:01:55,200 --> 00:01:59,280
are ec dsa signatures

44
00:01:59,280 --> 00:02:02,640
um okay all right let's start

45
00:02:02,640 --> 00:02:06,240
um okay so let me start by giving you a

46
00:02:06,240 --> 00:02:08,560
little bit of a history uh

47
00:02:08,560 --> 00:02:11,038
over a digital digital signature

48
00:02:11,038 --> 00:02:13,120
algorithm so dsa

49
00:02:13,120 --> 00:02:17,920
uh well this started in 1982.

50
00:02:17,920 --> 00:02:20,239
some of the audience will remember so

51
00:02:20,239 --> 00:02:22,239
1982 the u.s government

52
00:02:22,239 --> 00:02:24,720
solicited proposals for a public key

53
00:02:24,720 --> 00:02:26,640
signature standard

54
00:02:26,640 --> 00:02:30,879
and uh well meanwhile in 1984

55
00:02:30,879 --> 00:02:33,599
taher al gamal invented a proposed

56
00:02:33,599 --> 00:02:36,640
agamal signatures it's the same

57
00:02:36,640 --> 00:02:38,879
uh algamal that you know from public

58
00:02:38,879 --> 00:02:40,560
encryption so he also invented

59
00:02:40,560 --> 00:02:42,319
or he also gave fundamental

60
00:02:42,319 --> 00:02:43,760
contributions to

61
00:02:43,760 --> 00:02:47,360
signature schemes a couple of years

62
00:02:47,360 --> 00:02:48,319
later there's

63
00:02:48,319 --> 00:02:51,360
a schnorr signatures proposed

64
00:02:51,360 --> 00:02:52,560
essentially there are a couple of

65
00:02:52,560 --> 00:02:56,640
improvements over algamal signatures

66
00:02:56,640 --> 00:02:59,599
but unfortunately and that might be a

67
00:02:59,599 --> 00:03:00,400
lesson

68
00:03:00,400 --> 00:03:03,680
for for today he filed a patent

69
00:03:03,680 --> 00:03:06,239
that was granted and well with insight

70
00:03:06,239 --> 00:03:07,360
we would probably it's

71
00:03:07,360 --> 00:03:08,879
probably safe to say that's probably the

72
00:03:08,879 --> 00:03:10,239
reason why they were not used in the

73
00:03:10,239 --> 00:03:10,640
last

74
00:03:10,640 --> 00:03:14,560
20 or 30 years um in 1991

75
00:03:14,560 --> 00:03:18,239
the nist so that's the uh

76
00:03:18,239 --> 00:03:20,319
national institute of standardization

77
00:03:20,319 --> 00:03:21,599
and technology

78
00:03:21,599 --> 00:03:25,120
proposed the dss which is uh synonymous

79
00:03:25,120 --> 00:03:27,680
with dsa so dss is digital signature

80
00:03:27,680 --> 00:03:28,959
standard and dsa's

81
00:03:28,959 --> 00:03:31,360
digital signature algorithm the have

82
00:03:31,360 --> 00:03:33,360
also filed a patent

83
00:03:33,360 --> 00:03:35,840
which is uh attributed to david uh

84
00:03:35,840 --> 00:03:36,560
kravitz

85
00:03:36,560 --> 00:03:38,560
who at that time was an employee of the

86
00:03:38,560 --> 00:03:39,920
nsa

87
00:03:39,920 --> 00:03:42,480
uh but they gave it uh the algorithm to

88
00:03:42,480 --> 00:03:46,400
public domain so it was free cheats

89
00:03:46,400 --> 00:03:49,440
uh interestingly so there was uh since

90
00:03:49,440 --> 00:03:51,040
there was an involvement by the

91
00:03:51,040 --> 00:03:54,560
nsa there was a 1992 panel discussion at

92
00:03:54,560 --> 00:03:54,879
the

93
00:03:54,879 --> 00:03:58,400
eurocrypt if there's possibly a trapdoor

94
00:03:58,400 --> 00:04:02,080
in the dss at the dsa and i read out the

95
00:04:02,080 --> 00:04:03,599
the panelists because some of them are

96
00:04:03,599 --> 00:04:05,120
in the audience today it's interesting

97
00:04:05,120 --> 00:04:05,360
so

98
00:04:05,360 --> 00:04:07,360
it's never destined landrock leinster

99
00:04:07,360 --> 00:04:08,480
kevin mccurley

100
00:04:08,480 --> 00:04:11,840
andy lisco ripple and and smith it was a

101
00:04:11,840 --> 00:04:12,640
lively uh

102
00:04:12,640 --> 00:04:14,159
panel discussion i mean there is no

103
00:04:14,159 --> 00:04:15,680
video of that but there is some

104
00:04:15,680 --> 00:04:18,399
something like formal statements of each

105
00:04:18,399 --> 00:04:19,358
of the panelists

106
00:04:19,358 --> 00:04:23,680
in in the proceedings of youtube 1992.

107
00:04:23,680 --> 00:04:25,840
um in in the same year there were some

108
00:04:25,840 --> 00:04:27,520
public comments

109
00:04:27,520 --> 00:04:30,639
most notably by rivest and

110
00:04:30,639 --> 00:04:33,759
and hellman and let me read out some of

111
00:04:33,759 --> 00:04:34,560
the comments

112
00:04:34,560 --> 00:04:36,800
so these are comments about the nist

113
00:04:36,800 --> 00:04:38,000
proposal

114
00:04:38,000 --> 00:04:41,600
so rivest says it is my belief that the

115
00:04:41,600 --> 00:04:43,680
nist proposal represents an attack an

116
00:04:43,680 --> 00:04:45,759
attempt to install v cryptography as a

117
00:04:45,759 --> 00:04:47,120
national incentive

118
00:04:47,120 --> 00:04:49,120
and that nist is doing so in order to

119
00:04:49,120 --> 00:04:51,040
please the nsa and federal law

120
00:04:51,040 --> 00:04:53,199
enforcement agency

121
00:04:53,199 --> 00:04:55,840
uh a u.s standard even if weak and

122
00:04:55,840 --> 00:04:57,759
flawed may be widely used

123
00:04:57,759 --> 00:05:01,600
overseas making nsa's job easier

124
00:05:01,600 --> 00:05:04,639
uh another nowadays famous uh

125
00:05:04,639 --> 00:05:06,479
comment from that from that position

126
00:05:06,479 --> 00:05:07,840
paper is that uh

127
00:05:07,840 --> 00:05:10,320
runways also said the poor user is given

128
00:05:10,320 --> 00:05:11,680
enough rope

129
00:05:11,680 --> 00:05:16,479
with which to hang himself about dss

130
00:05:16,880 --> 00:05:21,440
interesting and

131
00:05:21,440 --> 00:05:23,520
well some more some more technical

132
00:05:23,520 --> 00:05:25,759
objections so obviously that

133
00:05:25,759 --> 00:05:29,039
dsa was limited to 512-bit modelly

134
00:05:29,039 --> 00:05:30,720
which means it's obviously breakable

135
00:05:30,720 --> 00:05:32,639
into to the 60 time

136
00:05:32,639 --> 00:05:34,400
uh it was criticized dsa prove

137
00:05:34,400 --> 00:05:35,919
performance is a

138
00:05:35,919 --> 00:05:38,720
honest necessarity to a computation of

139
00:05:38,720 --> 00:05:39,520
an inverse

140
00:05:39,520 --> 00:05:41,759
each time a message is to be signed

141
00:05:41,759 --> 00:05:43,360
these a is a requirement of a

142
00:05:43,360 --> 00:05:45,199
cryptographically strong random number

143
00:05:45,199 --> 00:05:46,960
for each signature

144
00:05:46,960 --> 00:05:50,400
and in 1992 the list itself publishes a

145
00:05:50,400 --> 00:05:52,000
paper which was called response to

146
00:05:52,000 --> 00:05:53,759
comments and then this proposed digital

147
00:05:53,759 --> 00:05:55,280
signatures on that

148
00:05:55,280 --> 00:05:57,520
um it's interesting because that at that

149
00:05:57,520 --> 00:06:00,319
time there was actually crypto paper

150
00:06:00,319 --> 00:06:02,560
right so like a couple of years ago you

151
00:06:02,560 --> 00:06:03,360
got with

152
00:06:03,360 --> 00:06:05,039
such a response you could make a crypto

153
00:06:05,039 --> 00:06:07,840
paper i don't think this works anymore

154
00:06:07,840 --> 00:06:09,520
let me again read out from this answer

155
00:06:09,520 --> 00:06:11,600
so it's an interesting quote i want to

156
00:06:11,600 --> 00:06:12,160
say

157
00:06:12,160 --> 00:06:14,000
so while government agencies tend to

158
00:06:14,000 --> 00:06:15,280
support

159
00:06:15,280 --> 00:06:17,199
the proposed standard the number of

160
00:06:17,199 --> 00:06:20,400
negative comments was significant

161
00:06:20,400 --> 00:06:22,720
larger than normally received for such a

162
00:06:22,720 --> 00:06:24,479
proposal

163
00:06:24,479 --> 00:06:27,520
so there was a lot of objections but

164
00:06:27,520 --> 00:06:29,520
nevertheless in 1994

165
00:06:29,520 --> 00:06:32,800
the uh standard was fired into the fips

166
00:06:32,800 --> 00:06:36,560
one 86 than that and well one thing that

167
00:06:36,560 --> 00:06:37,120
they

168
00:06:37,120 --> 00:06:38,919
they amended is that they included a

169
00:06:38,919 --> 00:06:40,479
124-bit

170
00:06:40,479 --> 00:06:42,880
modulus interestingly it was also the

171
00:06:42,880 --> 00:06:44,319
first digital signature

172
00:06:44,319 --> 00:06:48,160
uh recognized by any government uh

173
00:06:48,160 --> 00:06:50,080
two years earlier right so this is not

174
00:06:50,080 --> 00:06:51,680
linear so two years earlier actually

175
00:06:51,680 --> 00:06:53,039
winston proposed in the

176
00:06:53,039 --> 00:06:56,880
curve variant of dsa and in 1995 the

177
00:06:56,880 --> 00:07:01,280
ieee p1363 working group

178
00:07:01,280 --> 00:07:04,160
uh proposed the current form of ccsa and

179
00:07:04,160 --> 00:07:05,919
then a couple of uh standards were

180
00:07:05,919 --> 00:07:08,000
involved in iso on c

181
00:07:08,000 --> 00:07:11,199
and then finally in u3000 the ieee

182
00:07:11,199 --> 00:07:15,520
standard um also in the year 2000

183
00:07:15,520 --> 00:07:18,880
the fips updated its standard in 186.2

184
00:07:18,880 --> 00:07:21,440
it included also ecdsa

185
00:07:21,440 --> 00:07:23,599
in particular included 15 elliptic

186
00:07:23,599 --> 00:07:25,440
curves that were chosen by

187
00:07:25,440 --> 00:07:28,720
jerry salinas at that time at the nsa

188
00:07:28,720 --> 00:07:32,280
including the sort of the most used uh

189
00:07:32,280 --> 00:07:34,720
nistp2556 curve

190
00:07:34,720 --> 00:07:36,560
so the most recent thing that happens at

191
00:07:36,560 --> 00:07:38,240
a couple of updates in the years on the

192
00:07:38,240 --> 00:07:39,360
standard so fips

193
00:07:39,360 --> 00:07:41,680
186 three and four happened and then

194
00:07:41,680 --> 00:07:45,120
finally in 2019 fips 1865

195
00:07:45,120 --> 00:07:47,360
which is currently a draft standard

196
00:07:47,360 --> 00:07:49,120
interestingly it forbids signing with

197
00:07:49,120 --> 00:07:50,080
dsa

198
00:07:50,080 --> 00:07:52,080
right but verification is still looking

199
00:07:52,080 --> 00:07:53,280
but also

200
00:07:53,280 --> 00:07:55,919
interestingly includes adverts dsa which

201
00:07:55,919 --> 00:07:56,800
is

202
00:07:56,800 --> 00:07:59,360
a snore variant of what it's a snore

203
00:07:59,360 --> 00:08:01,840
signature essentially

204
00:08:01,840 --> 00:08:03,440
okay so now the question now we're in

205
00:08:03,440 --> 00:08:04,960
the year 2 2021

206
00:08:04,960 --> 00:08:08,240
and who is actually using ecdsa or dsa

207
00:08:08,240 --> 00:08:09,520
signatures

208
00:08:09,520 --> 00:08:13,280
well first answer is i did use it so i

209
00:08:13,280 --> 00:08:17,039
used my laptop and you know said open

210
00:08:17,039 --> 00:08:19,919
ssl client connect wikipedia and there

211
00:08:19,919 --> 00:08:20,800
it actually says

212
00:08:20,800 --> 00:08:23,919
uh yeah

213
00:08:23,919 --> 00:08:26,639
did you have different encryption and

214
00:08:26,639 --> 00:08:28,240
ecdsa so

215
00:08:28,240 --> 00:08:32,479
in this used uh cdsa for signatures

216
00:08:32,479 --> 00:08:37,200
um you can also uh look at sources

217
00:08:37,200 --> 00:08:39,440
and uh well i'm thankful for for a

218
00:08:39,440 --> 00:08:41,120
number of people for providing these

219
00:08:41,120 --> 00:08:41,839
sources

220
00:08:41,839 --> 00:08:44,399
so there's a web page called the notary

221
00:08:44,399 --> 00:08:45,600
ic

222
00:08:45,600 --> 00:08:49,440
at berkeley uh has data from july 2018

223
00:08:49,440 --> 00:08:50,080
and it says

224
00:08:50,080 --> 00:08:54,000
by over ssl connections we have more or

225
00:08:54,000 --> 00:08:54,320
less

226
00:08:54,320 --> 00:08:57,600
twenty percent of ecdsa signatures and

227
00:08:57,600 --> 00:08:58,000
uh

228
00:08:58,000 --> 00:09:02,000
the other part is eighty percent is rsa

229
00:09:02,000 --> 00:09:05,440
the picture is a bit it's similar in tls

230
00:09:05,440 --> 00:09:06,959
which is twenty five percent of

231
00:09:06,959 --> 00:09:09,360
bcdsa but now we have a bit more uh

232
00:09:09,360 --> 00:09:11,519
recent data from from this month from

233
00:09:11,519 --> 00:09:15,200
mozilla interestingly almost 100 support

234
00:09:15,200 --> 00:09:16,160
ecdsa

235
00:09:16,160 --> 00:09:18,399
of a certain type no but of course this

236
00:09:18,399 --> 00:09:19,839
is always a negotiation

237
00:09:19,839 --> 00:09:23,440
and not always this algorithm is used

238
00:09:23,440 --> 00:09:24,880
it's just that the

239
00:09:24,880 --> 00:09:27,920
the servers depart this in terms of

240
00:09:27,920 --> 00:09:29,040
certificates

241
00:09:29,040 --> 00:09:32,160
you can lose look at the census io

242
00:09:32,160 --> 00:09:36,000
and uh well the the computation that i

243
00:09:36,000 --> 00:09:36,959
did

244
00:09:36,959 --> 00:09:39,120
and again this month is that like seven

245
00:09:39,120 --> 00:09:40,959
percent of the uh

246
00:09:40,959 --> 00:09:44,480
certificates are based on ecdsa

247
00:09:44,480 --> 00:09:47,920
so car 2x communication um i ask a

248
00:09:47,920 --> 00:09:48,800
couple of people and

249
00:09:48,800 --> 00:09:50,720
they tell me it's mostly ecdsa

250
00:09:50,720 --> 00:09:52,800
interestingly so in cars that's actually

251
00:09:52,800 --> 00:09:54,720
used it's also a campaign

252
00:09:54,720 --> 00:09:58,560
in a in the in the standard ieee 1609

253
00:09:58,560 --> 00:10:01,760
too uh mainstream cryptocurrencies there

254
00:10:01,760 --> 00:10:04,240
are mostly ecdsas like let's

255
00:10:04,240 --> 00:10:08,000
say bitcoin and and others

256
00:10:08,000 --> 00:10:09,760
and that's also the reason why there's a

257
00:10:09,760 --> 00:10:12,800
more recent interest in ecdsa signatures

258
00:10:12,800 --> 00:10:14,800
people constructed threshold signature

259
00:10:14,800 --> 00:10:16,560
schemes multi-party

260
00:10:16,560 --> 00:10:18,959
signing protocols adapter signature

261
00:10:18,959 --> 00:10:20,000
schemes

262
00:10:20,000 --> 00:10:21,760
i think we also seen a couple of works

263
00:10:21,760 --> 00:10:25,519
here at a pkc

264
00:10:25,760 --> 00:10:28,640
and i was not able to find any usage of

265
00:10:28,640 --> 00:10:30,320
dsa at this moment so

266
00:10:30,320 --> 00:10:32,640
if someone from the audience knows where

267
00:10:32,640 --> 00:10:34,720
dsa is still being used uh

268
00:10:34,720 --> 00:10:36,079
please let me know or write it in the

269
00:10:36,079 --> 00:10:38,160
chat i was not aware i asked a couple of

270
00:10:38,160 --> 00:10:40,399
people but also that's not my expertise

271
00:10:40,399 --> 00:10:43,360
anyway so the summary is that the ecdsa

272
00:10:43,360 --> 00:10:45,040
in still in 2021

273
00:10:45,040 --> 00:10:47,760
like 20 25 percent of users is still

274
00:10:47,760 --> 00:10:48,320
high

275
00:10:48,320 --> 00:10:51,760
and the other half is rsis inches

276
00:10:51,760 --> 00:10:54,720
okay um so what is dsa and then what i

277
00:10:54,720 --> 00:10:56,320
will do here is i will present you

278
00:10:56,320 --> 00:10:59,120
an abstraction of dsa it's called

279
00:10:59,120 --> 00:11:00,720
generic dsa

280
00:11:00,720 --> 00:11:05,440
gen dsa and is using a group

281
00:11:05,440 --> 00:11:09,519
of prime order p and lg is a generator

282
00:11:09,519 --> 00:11:10,640
of the group

283
00:11:10,640 --> 00:11:13,440
it's using a hash function that hashes

284
00:11:13,440 --> 00:11:14,880
bit strings to zp

285
00:11:14,880 --> 00:11:16,480
so p is the order of the group it's the

286
00:11:16,480 --> 00:11:19,120
prime but also hashes that use

287
00:11:19,120 --> 00:11:21,360
also uses so something which is called a

288
00:11:21,360 --> 00:11:23,200
conversion function

289
00:11:23,200 --> 00:11:25,600
a conversion function uh we'll see that

290
00:11:25,600 --> 00:11:26,399
later is

291
00:11:26,399 --> 00:11:29,519
some abstract function that uh well

292
00:11:29,519 --> 00:11:31,600
takes group elements and outputs element

293
00:11:31,600 --> 00:11:34,399
again elements from zp

294
00:11:34,399 --> 00:11:37,360
okay so we need the these two uh tools

295
00:11:37,360 --> 00:11:39,200
in order to build a

296
00:11:39,200 --> 00:11:41,839
generic dsa signature by the way this

297
00:11:41,839 --> 00:11:44,720
abstraction is due to brown

298
00:11:44,720 --> 00:11:48,079
the examples that i want to mention

299
00:11:48,079 --> 00:11:51,120
are first of all in dsa ge

300
00:11:51,120 --> 00:11:54,839
the group is a subgroup of finite field

301
00:11:54,839 --> 00:11:58,560
and uh wait

302
00:11:58,880 --> 00:12:01,040
and

303
00:12:02,560 --> 00:12:07,040
suck technical problems

304
00:12:07,040 --> 00:12:11,120
all right and uh the conversion function

305
00:12:11,120 --> 00:12:12,320
is actually taking

306
00:12:12,320 --> 00:12:16,240
an element from the group right which is

307
00:12:16,240 --> 00:12:19,519
the sub group of f fq so this is an

308
00:12:19,519 --> 00:12:21,120
element modulo q

309
00:12:21,120 --> 00:12:23,040
and just take this element which is an

310
00:12:23,040 --> 00:12:25,040
element between zero and q minus one

311
00:12:25,040 --> 00:12:27,519
just take it model u p right that's the

312
00:12:27,519 --> 00:12:29,040
conversion function for

313
00:12:29,040 --> 00:12:32,079
dsa and for ecdsa

314
00:12:32,079 --> 00:12:34,639
the g is actually an elliptic curve over

315
00:12:34,639 --> 00:12:35,120
f q

316
00:12:35,120 --> 00:12:38,320
in wire star's form so

317
00:12:38,320 --> 00:12:41,600
um an element from the curve no an r

318
00:12:41,600 --> 00:12:42,959
from the curve has actually an x

319
00:12:42,959 --> 00:12:44,880
coordinate in the y coordinate

320
00:12:44,880 --> 00:12:46,639
each of them it's a little curve over f

321
00:12:46,639 --> 00:12:49,120
q so each of them is an element of fq

322
00:12:49,120 --> 00:12:51,120
and the conversion function is

323
00:12:51,120 --> 00:12:54,079
essentially just take the x-coordinate

324
00:12:54,079 --> 00:12:57,680
right so from the group to

325
00:12:57,680 --> 00:13:06,320
take the x-coordinate and a modulo key

326
00:13:06,320 --> 00:13:08,160
i think this should be a final video fp

327
00:13:08,160 --> 00:13:10,320
i think i'm i was mistaken so just

328
00:13:10,320 --> 00:13:12,320
taking the x coordinate and then we are

329
00:13:12,320 --> 00:13:13,360
done

330
00:13:13,360 --> 00:13:15,680
okay so these are the two examples of uh

331
00:13:15,680 --> 00:13:17,440
generic dsa

332
00:13:17,440 --> 00:13:21,040
um building blocks how does dsa

333
00:13:21,040 --> 00:13:23,600
look like so key generation so the um

334
00:13:23,600 --> 00:13:25,600
the secret key is a deluxe so the public

335
00:13:25,600 --> 00:13:27,440
key is the g2 dx and that's all

336
00:13:27,440 --> 00:13:30,240
plus the prescription in order to sign a

337
00:13:30,240 --> 00:13:31,120
message

338
00:13:31,120 --> 00:13:32,720
a message is again an arbitrary big

339
00:13:32,720 --> 00:13:34,480
thing what do you do so you first

340
00:13:34,480 --> 00:13:37,760
pick a uniformly random exponent

341
00:13:37,760 --> 00:13:40,880
from zp star little r and compute

342
00:13:40,880 --> 00:13:44,399
capital r is due to the r

343
00:13:44,399 --> 00:13:46,800
and next you compute you apply this

344
00:13:46,800 --> 00:13:48,320
conversion function

345
00:13:48,320 --> 00:13:51,120
to r and compute the little t so um this

346
00:13:51,120 --> 00:13:52,800
is now an element in

347
00:13:52,800 --> 00:13:56,000
zp you also hash the message here

348
00:13:56,000 --> 00:13:58,639
right so hash of m is a little h and

349
00:13:58,639 --> 00:13:59,360
then sort of

350
00:13:59,360 --> 00:14:00,880
so that's this is sort of the signing

351
00:14:00,880 --> 00:14:03,279
equation so the s is h plus t times

352
00:14:03,279 --> 00:14:06,160
x divided by r the whole thing but so

353
00:14:06,160 --> 00:14:07,760
what do you return you return a

354
00:14:07,760 --> 00:14:09,120
signature which is

355
00:14:09,120 --> 00:14:12,880
s and t in zp times zp

356
00:14:12,880 --> 00:14:16,399
so that's a signature and verification

357
00:14:16,399 --> 00:14:18,320
inputs the public key and the message of

358
00:14:18,320 --> 00:14:19,839
the signature and essentially what it

359
00:14:19,839 --> 00:14:21,600
does i want to go through it but

360
00:14:21,600 --> 00:14:24,320
essentially recovers the the capital r

361
00:14:24,320 --> 00:14:24,720
here

362
00:14:24,720 --> 00:14:28,160
right so that so the commitment to speak

363
00:14:28,160 --> 00:14:28,560
no

364
00:14:28,560 --> 00:14:31,519
and checks if the t in the signature

365
00:14:31,519 --> 00:14:33,760
right that one that is output here

366
00:14:33,760 --> 00:14:36,639
equals the conversion function applied

367
00:14:36,639 --> 00:14:37,279
to the

368
00:14:37,279 --> 00:14:40,160
recovered r so the r prime and outputs

369
00:14:40,160 --> 00:14:40,480
one

370
00:14:40,480 --> 00:14:42,880
if and only this is the case all right

371
00:14:42,880 --> 00:14:44,480
so that's that's

372
00:14:44,480 --> 00:14:46,240
the stage so what i forgot here of

373
00:14:46,240 --> 00:14:48,240
course because i just overly simplified

374
00:14:48,240 --> 00:14:48,720
we need to

375
00:14:48,720 --> 00:14:50,880
make some containment checks for a

376
00:14:50,880 --> 00:14:51,920
little s

377
00:14:51,920 --> 00:14:54,160
uh to gt and r prime and signing and

378
00:14:54,160 --> 00:14:56,160
verification but i don't wanna

379
00:14:56,160 --> 00:14:57,760
go into details here so they cannot be

380
00:14:57,760 --> 00:14:59,760
zero or something like that so

381
00:14:59,760 --> 00:15:03,120
that's clear um these a signatures are

382
00:15:03,120 --> 00:15:04,800
actually a special case of elgamal

383
00:15:04,800 --> 00:15:06,480
signatures

384
00:15:06,480 --> 00:15:10,240
um there's a deterministic variant

385
00:15:10,240 --> 00:15:12,240
called ecdsa

386
00:15:12,240 --> 00:15:16,560
it's specified in rfc 696979

387
00:15:16,560 --> 00:15:19,760
and instead of choosing a random r e

388
00:15:19,760 --> 00:15:22,160
times a signature is being signed

389
00:15:22,160 --> 00:15:24,399
it deterministically derives the

390
00:15:24,399 --> 00:15:26,959
randomness and the signature process

391
00:15:26,959 --> 00:15:29,759
by applying it to a hash function and

392
00:15:29,759 --> 00:15:30,240
the c

393
00:15:30,240 --> 00:15:33,120
key right this is like a common a common

394
00:15:33,120 --> 00:15:34,079
way in

395
00:15:34,079 --> 00:15:37,600
in order to de-randomize signatures um

396
00:15:37,600 --> 00:15:39,680
remember this was one of the criticism

397
00:15:39,680 --> 00:15:41,120
like each time a

398
00:15:41,120 --> 00:15:42,880
signing process it's randomized that you

399
00:15:42,880 --> 00:15:44,639
have to choose

400
00:15:44,639 --> 00:15:47,040
a perfect random generator here oh and

401
00:15:47,040 --> 00:15:48,079
this is also where

402
00:15:48,079 --> 00:15:50,079
things went around a couple of times

403
00:15:50,079 --> 00:15:51,759
also in the difficult

404
00:15:51,759 --> 00:15:53,600
version this doesn't really work this

405
00:15:53,600 --> 00:15:54,880
attacks

406
00:15:54,880 --> 00:15:55,839
there's also a couple of

407
00:15:55,839 --> 00:15:58,000
country-specific variants

408
00:15:58,000 --> 00:16:00,079
so there's the russian version you see

409
00:16:00,079 --> 00:16:02,480
ghost there's the chinese version which

410
00:16:02,480 --> 00:16:02,959
is called

411
00:16:02,959 --> 00:16:04,800
sem2 and there's the german version

412
00:16:04,800 --> 00:16:07,519
which is called ec

413
00:16:07,519 --> 00:16:10,639
stands for germany i suppose uh

414
00:16:10,639 --> 00:16:13,120
i mean they're mostly the same they i

415
00:16:13,120 --> 00:16:13,920
mean there's

416
00:16:13,920 --> 00:16:17,360
there's um the only thing the only way

417
00:16:17,360 --> 00:16:17,839
that is

418
00:16:17,839 --> 00:16:20,839
where they're different is that the s is

419
00:16:20,839 --> 00:16:22,959
sometimes computed in a slightly

420
00:16:22,959 --> 00:16:24,000
different way

421
00:16:24,000 --> 00:16:26,560
but i'm not really sure why they which

422
00:16:26,560 --> 00:16:30,160
country needed their own version

423
00:16:30,160 --> 00:16:32,720
all right so that's the definition of uh

424
00:16:32,720 --> 00:16:34,839
dsa

425
00:16:34,839 --> 00:16:37,360
um all right so i want to talk about the

426
00:16:37,360 --> 00:16:38,320
security of

427
00:16:38,320 --> 00:16:41,839
the approval security of dsa signatures

428
00:16:41,839 --> 00:16:45,199
um let's uh say what i want let's define

429
00:16:45,199 --> 00:16:46,720
what i'm going to say about the security

430
00:16:46,720 --> 00:16:47,680
so

431
00:16:47,680 --> 00:16:50,079
standard security notions unforgeability

432
00:16:50,079 --> 00:16:51,759
against chosen message attack or

433
00:16:51,759 --> 00:16:56,240
simply security you have cma security

434
00:16:56,240 --> 00:16:58,320
where the game is the following so the

435
00:16:58,320 --> 00:16:59,839
challenger

436
00:16:59,839 --> 00:17:01,680
generates a public unicycle he sends the

437
00:17:01,680 --> 00:17:03,040
public key to the

438
00:17:03,040 --> 00:17:07,039
bursary that well that can specify a

439
00:17:07,039 --> 00:17:08,079
couple of messages

440
00:17:08,079 --> 00:17:11,520
and one until mq and which he gets

441
00:17:11,520 --> 00:17:14,319
signed and then has to specify a message

442
00:17:14,319 --> 00:17:14,640
and

443
00:17:14,640 --> 00:17:17,520
a signature m star and sigma star sort

444
00:17:17,520 --> 00:17:18,480
of in wins

445
00:17:18,480 --> 00:17:22,319
if the sigma star of the signature is

446
00:17:22,319 --> 00:17:24,640
valid and the message was not varied

447
00:17:24,640 --> 00:17:25,679
before right

448
00:17:25,679 --> 00:17:27,119
i mean this of course captures the

449
00:17:27,119 --> 00:17:28,960
scenario that

450
00:17:28,960 --> 00:17:31,120
the adversary have seen a couple of

451
00:17:31,120 --> 00:17:32,880
signatures on message of his

452
00:17:32,880 --> 00:17:35,200
choice and then still is not able to

453
00:17:35,200 --> 00:17:36,320
forge a

454
00:17:36,320 --> 00:17:39,600
signature on a fresh message there's

455
00:17:39,600 --> 00:17:41,280
also a stronger variant called strong

456
00:17:41,280 --> 00:17:42,799
enforceability

457
00:17:42,799 --> 00:17:47,200
essentially the adversary um

458
00:17:47,200 --> 00:17:50,559
has to as the adversity um

459
00:17:50,559 --> 00:17:53,520
even breaks the experiment if he can

460
00:17:53,520 --> 00:17:54,080
forge

461
00:17:54,080 --> 00:17:57,440
a signature on a message that he has

462
00:17:57,440 --> 00:17:59,280
seen before a signature on

463
00:17:59,280 --> 00:18:02,000
so m star sigma star as a tuple has to

464
00:18:02,000 --> 00:18:02,559
be non

465
00:18:02,559 --> 00:18:04,799
equal m i and sigma i right that's a

466
00:18:04,799 --> 00:18:07,440
strong unforge ability in some scenarios

467
00:18:07,440 --> 00:18:08,799
you actually want to have strong

468
00:18:08,799 --> 00:18:10,640
unforgeability

469
00:18:10,640 --> 00:18:12,799
let me also define two more variants of

470
00:18:12,799 --> 00:18:14,000
this so

471
00:18:14,000 --> 00:18:16,240
unforgeability against one per message

472
00:18:16,240 --> 00:18:18,160
chosen message attack so that's a bit of

473
00:18:18,160 --> 00:18:19,440
an artificial notion

474
00:18:19,440 --> 00:18:21,840
notion that essentially means that all

475
00:18:21,840 --> 00:18:23,120
of the signing queries

476
00:18:23,120 --> 00:18:26,160
mi they have to be distinct

477
00:18:26,160 --> 00:18:28,160
of course this only makes sense that the

478
00:18:28,160 --> 00:18:30,000
signing process is probabilistic because

479
00:18:30,000 --> 00:18:31,679
otherwise the signatures would look the

480
00:18:31,679 --> 00:18:32,720
same so if i asked

481
00:18:32,720 --> 00:18:34,480
twice on the same message then the

482
00:18:34,480 --> 00:18:37,360
signature would look the same if the

483
00:18:37,360 --> 00:18:39,520
if the signing process was deterministic

484
00:18:39,520 --> 00:18:42,400
but in dsa and ecdsa the signing process

485
00:18:42,400 --> 00:18:43,760
is probabilistic so here it actually

486
00:18:43,760 --> 00:18:45,120
makes a different

487
00:18:45,120 --> 00:18:47,440
uh difference and of course this is

488
00:18:47,440 --> 00:18:48,400
equivalent to

489
00:18:48,400 --> 00:18:52,080
standard ufc main ufcma security for

490
00:18:52,080 --> 00:18:56,480
domestic sign

491
00:18:56,480 --> 00:18:58,799
one more um attack goal i want to give

492
00:18:58,799 --> 00:19:00,720
you so this is uniford unforgeability

493
00:19:00,720 --> 00:19:02,080
against

494
00:19:02,080 --> 00:19:05,039
no message attack also known as key only

495
00:19:05,039 --> 00:19:06,000
attack

496
00:19:06,000 --> 00:19:08,640
which is a weaker form again an

497
00:19:08,640 --> 00:19:09,520
artificial form

498
00:19:09,520 --> 00:19:11,679
but i will use it later in my security

499
00:19:11,679 --> 00:19:14,000
setting of the security results

500
00:19:14,000 --> 00:19:16,160
here the adversary does not get any

501
00:19:16,160 --> 00:19:17,919
signatures he is not allowed to make

502
00:19:17,919 --> 00:19:18,960
signing queries

503
00:19:18,960 --> 00:19:23,600
to the experiment right so three notions

504
00:19:23,600 --> 00:19:25,200
unforgeability against chosen message

505
00:19:25,200 --> 00:19:27,039
attack and forged agility against one

506
00:19:27,039 --> 00:19:28,559
per message shows a message attack and

507
00:19:28,559 --> 00:19:30,320
then forge ability against no message

508
00:19:30,320 --> 00:19:31,840
attack

509
00:19:31,840 --> 00:19:34,240
um so maybe one thing about approval

510
00:19:34,240 --> 00:19:35,120
security

511
00:19:35,120 --> 00:19:39,039
just to to define what i mean by that

512
00:19:39,039 --> 00:19:41,520
um brewer security means that security

513
00:19:41,520 --> 00:19:44,960
of a implies a security of b so we

514
00:19:44,960 --> 00:19:47,360
do statements of this firm which is

515
00:19:47,360 --> 00:19:49,120
usually it means

516
00:19:49,120 --> 00:19:51,200
we do that by uh in terms of reduction

517
00:19:51,200 --> 00:19:53,520
so suppose there's an adversary

518
00:19:53,520 --> 00:19:57,039
this orange elephant against uh

519
00:19:57,039 --> 00:20:00,160
a b um against uh primitive

520
00:20:00,160 --> 00:20:03,200
b um then we'd build a reduction that

521
00:20:03,200 --> 00:20:06,400
uses this orange elephant to attack a

522
00:20:06,400 --> 00:20:09,679
and then hopefully this production is

523
00:20:09,679 --> 00:20:11,280
smaller successful whenever b is

524
00:20:11,280 --> 00:20:13,120
successful so that means

525
00:20:13,120 --> 00:20:14,559
that if the existing errors are at

526
00:20:14,559 --> 00:20:16,240
breaks b they also exist and first here

527
00:20:16,240 --> 00:20:16,799
that

528
00:20:16,799 --> 00:20:20,080
breaks a so that means that a implies b

529
00:20:20,080 --> 00:20:22,799
so these kind of statements is what we

530
00:20:22,799 --> 00:20:25,360
prove and prove the security

531
00:20:25,360 --> 00:20:27,840
um well then i wanted to make a standard

532
00:20:27,840 --> 00:20:29,120
disclaimer so

533
00:20:29,120 --> 00:20:30,880
of course crypto can be secure in

534
00:20:30,880 --> 00:20:32,880
practice without like having the label

535
00:20:32,880 --> 00:20:34,000
of google security

536
00:20:34,000 --> 00:20:35,760
no things can be secure in practice

537
00:20:35,760 --> 00:20:37,280
that's that's no problem we don't need

538
00:20:37,280 --> 00:20:38,240
to prove it

539
00:20:38,240 --> 00:20:40,799
but of course a proof gives us a fuzzy

540
00:20:40,799 --> 00:20:42,400
warm feeling that i mean we haven't

541
00:20:42,400 --> 00:20:43,200
really

542
00:20:43,200 --> 00:20:46,480
overlooked something and well but

543
00:20:46,480 --> 00:20:48,640
when students ask me why do you do this

544
00:20:48,640 --> 00:20:49,840
approval security

545
00:20:49,840 --> 00:20:52,000
why i mean i mean engineers are smart

546
00:20:52,000 --> 00:20:53,679
people and they know what they're doing

547
00:20:53,679 --> 00:20:55,679
and they always uh tell the story of uh

548
00:20:55,679 --> 00:20:57,200
of pierre de femme

549
00:20:57,200 --> 00:20:59,200
and i mean you know fema's last theory

550
00:20:59,200 --> 00:21:00,400
you know from um

551
00:21:00,400 --> 00:21:03,919
so i'm looking at the numbers from 1637

552
00:21:03,919 --> 00:21:06,960
so that's the the famous uh

553
00:21:06,960 --> 00:21:09,200
uh theorem that there's no the integers

554
00:21:09,200 --> 00:21:10,640
abc such that

555
00:21:10,640 --> 00:21:12,640
a to the n plus b to the n equals c to

556
00:21:12,640 --> 00:21:13,840
the n for any n

557
00:21:13,840 --> 00:21:17,039
uh greater than two right and that was

558
00:21:17,039 --> 00:21:19,440
proved only in 1994 by

559
00:21:19,440 --> 00:21:22,799
the famous libra and ryers but not

560
00:21:22,799 --> 00:21:24,960
everybody knows that female also made a

561
00:21:24,960 --> 00:21:26,320
conjecture

562
00:21:26,320 --> 00:21:28,320
and he conjectures that the female

563
00:21:28,320 --> 00:21:30,960
numbers female numbers are

564
00:21:30,960 --> 00:21:33,120
numbers of the form two to the two to

565
00:21:33,120 --> 00:21:34,320
the n plus one

566
00:21:34,320 --> 00:21:38,000
right that those numbers are prime um

567
00:21:38,000 --> 00:21:40,080
and it took almost one century so this

568
00:21:40,080 --> 00:21:42,559
conjecture was made in 1650 it took

569
00:21:42,559 --> 00:21:44,320
almost one century

570
00:21:44,320 --> 00:21:47,760
for euler to disprove it in 1732.

571
00:21:47,760 --> 00:21:49,919
so we actually showed that for n equals

572
00:21:49,919 --> 00:21:50,880
five

573
00:21:50,880 --> 00:21:53,039
this number the fifth phenol number is

574
00:21:53,039 --> 00:21:54,190
actually not prime

575
00:21:54,190 --> 00:21:55,840
[Music]

576
00:21:55,840 --> 00:21:57,440
and these are two conjectures that i

577
00:21:57,440 --> 00:21:59,120
think at the time being both looked

578
00:21:59,120 --> 00:22:00,000
reasonable

579
00:22:00,000 --> 00:22:02,480
for for one now we have a proof and for

580
00:22:02,480 --> 00:22:04,240
the other one uh i mean

581
00:22:04,240 --> 00:22:06,799
it was uh clearly wrong right so that

582
00:22:06,799 --> 00:22:07,520
should give you

583
00:22:07,520 --> 00:22:09,440
some idea why a proof is actually

584
00:22:09,440 --> 00:22:11,200
important and gives you this

585
00:22:11,200 --> 00:22:14,159
warm fuzzy feeling i'm talking about and

586
00:22:14,159 --> 00:22:15,919
even in crypto i think it's even more

587
00:22:15,919 --> 00:22:17,280
important now because we're talking

588
00:22:17,280 --> 00:22:19,280
about the security of things so that if

589
00:22:19,280 --> 00:22:20,799
there is actually an attack right

590
00:22:20,799 --> 00:22:22,880
account example an attack

591
00:22:22,880 --> 00:22:25,679
um then things are broken and then this

592
00:22:25,679 --> 00:22:27,039
i mean if it's used in practice this

593
00:22:27,039 --> 00:22:28,960
stuff usually translates to the loss of

594
00:22:28,960 --> 00:22:30,480
money

595
00:22:30,480 --> 00:22:32,799
on the other hand crypto can be insecure

596
00:22:32,799 --> 00:22:33,520
in practice

597
00:22:33,520 --> 00:22:35,280
even being proven secure and that's

598
00:22:35,280 --> 00:22:36,640
sometimes that uh

599
00:22:36,640 --> 00:22:38,080
mathematicians they don't really

600
00:22:38,080 --> 00:22:40,799
understand because improvement is secure

601
00:22:40,799 --> 00:22:42,480
if you write a theorem then things

602
00:22:42,480 --> 00:22:44,400
should be secure but i mean in practice

603
00:22:44,400 --> 00:22:45,840
this is not the case and one of the

604
00:22:45,840 --> 00:22:48,000
famous examples is of course knowing

605
00:22:48,000 --> 00:22:50,080
not talking about uh flaws improves

606
00:22:50,080 --> 00:22:51,280
right but uh

607
00:22:51,280 --> 00:22:53,840
it's a side channel attacks right so

608
00:22:53,840 --> 00:22:55,760
which is like the adversary goes outside

609
00:22:55,760 --> 00:22:56,720
of the model

610
00:22:56,720 --> 00:22:58,320
and this isn't particularly important

611
00:22:58,320 --> 00:23:00,720
for ecdsa because it's very very prone

612
00:23:00,720 --> 00:23:02,559
to side channel attacks

613
00:23:02,559 --> 00:23:05,039
and i'm i'm quoting then bernstein and

614
00:23:05,039 --> 00:23:05,600
he says

615
00:23:05,600 --> 00:23:07,760
every natural implementation of ecsa

616
00:23:07,760 --> 00:23:10,159
makes heavy use of secret branches and

617
00:23:10,159 --> 00:23:12,480
secret area in this case which i mean in

618
00:23:12,480 --> 00:23:14,640
a couple of

619
00:23:14,640 --> 00:23:18,159
timing observations natural observation

620
00:23:18,159 --> 00:23:20,880
natural implementation of ccdsa you can

621
00:23:20,880 --> 00:23:23,200
easily break it

622
00:23:23,200 --> 00:23:26,080
and i will also not did my talk will

623
00:23:26,080 --> 00:23:28,559
also not cover about randomness

624
00:23:28,559 --> 00:23:31,840
which famously uh was the playstation 3

625
00:23:31,840 --> 00:23:34,000
hack from 2010 which also relied on

626
00:23:34,000 --> 00:23:35,679
ecdsa signatures

627
00:23:35,679 --> 00:23:39,600
their bad randomness was used uh

628
00:23:39,600 --> 00:23:41,760
to extract actually the secret key of

629
00:23:41,760 --> 00:23:44,559
ccdsa

630
00:23:44,720 --> 00:23:47,360
well having said that let's look at what

631
00:23:47,360 --> 00:23:48,000
kind of

632
00:23:48,000 --> 00:23:51,919
security research was done on ecdsa

633
00:23:51,919 --> 00:23:55,200
and dsa well these are eprint papers and

634
00:23:55,200 --> 00:23:58,320
what i did i looked i i searched through

635
00:23:58,320 --> 00:23:58,799
the

636
00:23:58,799 --> 00:24:01,200
papers in a very very simple way and

637
00:24:01,200 --> 00:24:02,640
probably it's not very accurate but i

638
00:24:02,640 --> 00:24:04,400
think it gives you a nice picture

639
00:24:04,400 --> 00:24:06,880
so you probably see three waves well i

640
00:24:06,880 --> 00:24:07,600
mean the

641
00:24:07,600 --> 00:24:10,320
covet crisis we all know how these waves

642
00:24:10,320 --> 00:24:12,159
work so this was the first wave

643
00:24:12,159 --> 00:24:14,720
and these first wave of uh security of

644
00:24:14,720 --> 00:24:15,520
results and

645
00:24:15,520 --> 00:24:18,000
dsa and ecds very mostly theory papers

646
00:24:18,000 --> 00:24:19,760
on on the prover security

647
00:24:19,760 --> 00:24:21,840
then there was another peak and then

648
00:24:21,840 --> 00:24:23,200
people sort of invented

649
00:24:23,200 --> 00:24:24,640
well not invented but looked at site

650
00:24:24,640 --> 00:24:26,240
channel security

651
00:24:26,240 --> 00:24:30,960
of uh dsa and then like in 2014

652
00:24:30,960 --> 00:24:33,600
cryptocurrencies uh uh peaked again and

653
00:24:33,600 --> 00:24:35,440
then there was like now it's sort of

654
00:24:35,440 --> 00:24:37,200
it goes up you know i mean i think the

655
00:24:37,200 --> 00:24:39,679
third wave is not over yet

656
00:24:39,679 --> 00:24:42,080
um but overall there's little on

657
00:24:42,080 --> 00:24:44,640
approval security of

658
00:24:44,640 --> 00:24:48,720
ac dsa and dcsa and why is that actually

659
00:24:48,720 --> 00:24:50,640
well my intuition is that this

660
00:24:50,640 --> 00:24:53,039
conversion function of ecdsa

661
00:24:53,039 --> 00:24:57,360
so this f of r is fr moduluq

662
00:24:57,360 --> 00:25:00,400
and or f r

663
00:25:00,400 --> 00:25:02,960
is the x coordinate of the elliptic

664
00:25:02,960 --> 00:25:04,960
curve this is actually

665
00:25:04,960 --> 00:25:07,440
algebraically this is quite ugly oh to

666
00:25:07,440 --> 00:25:08,720
be honest and this

667
00:25:08,720 --> 00:25:12,320
sort of makes any proof very difficult

668
00:25:12,320 --> 00:25:13,120
and this is

669
00:25:13,120 --> 00:25:15,360
i guess by many theoreticians that i

670
00:25:15,360 --> 00:25:17,279
don't want to deal with that i

671
00:25:17,279 --> 00:25:18,799
i don't know what to prove with that and

672
00:25:18,799 --> 00:25:20,240
that's what but many people didn't

673
00:25:20,240 --> 00:25:20,799
really

674
00:25:20,799 --> 00:25:23,440
look at the security of of dsi

675
00:25:23,440 --> 00:25:26,000
signatures

676
00:25:26,320 --> 00:25:29,360
so the question is still like the 2021

677
00:25:29,360 --> 00:25:30,799
how approval secure are

678
00:25:30,799 --> 00:25:32,880
you csa signatures and that's by

679
00:25:32,880 --> 00:25:34,640
coincidence that's the title of this

680
00:25:34,640 --> 00:25:38,080
this talk okay so

681
00:25:38,080 --> 00:25:40,960
how brutal secure is uh do you say cdsa

682
00:25:40,960 --> 00:25:41,279
or

683
00:25:41,279 --> 00:25:44,799
this talk do you say so i will give you

684
00:25:44,799 --> 00:25:46,240
four results here i want to present you

685
00:25:46,240 --> 00:25:47,039
four results

686
00:25:47,039 --> 00:25:50,240
um and i found out that out of these

687
00:25:50,240 --> 00:25:52,240
four security results that there are in

688
00:25:52,240 --> 00:25:52,559
in

689
00:25:52,559 --> 00:25:56,320
the literature only one is well known

690
00:25:56,320 --> 00:25:58,320
um and the one that is well known and

691
00:25:58,320 --> 00:25:59,760
decided all the times

692
00:25:59,760 --> 00:26:03,200
i think it has well some problems at

693
00:26:03,200 --> 00:26:03,919
least

694
00:26:03,919 --> 00:26:06,400
i will come to that later so the first

695
00:26:06,400 --> 00:26:08,240
result that i mentioned is that

696
00:26:08,240 --> 00:26:11,200
so remember that dsa had a hash function

697
00:26:11,200 --> 00:26:12,960
h and this conversion function as the

698
00:26:12,960 --> 00:26:13,600
sphere

699
00:26:13,600 --> 00:26:16,000
conversion function f the first result

700
00:26:16,000 --> 00:26:17,360
considered modeling

701
00:26:17,360 --> 00:26:20,240
both h and f as venom oracles that's as

702
00:26:20,240 --> 00:26:21,120
early as

703
00:26:21,120 --> 00:26:25,520
uh brickell in 96 and many fallout works

704
00:26:25,520 --> 00:26:28,720
the second result was modeling the

705
00:26:28,720 --> 00:26:30,960
group ge the underlying group as a

706
00:26:30,960 --> 00:26:33,039
generic group and that's due to brown in

707
00:26:33,039 --> 00:26:34,240
2002

708
00:26:34,240 --> 00:26:36,720
the third result was modeling age as a

709
00:26:36,720 --> 00:26:38,000
random oracle

710
00:26:38,000 --> 00:26:42,559
so that is an f is arbitrary actually

711
00:26:42,559 --> 00:26:46,000
and that is due to brown and

712
00:26:46,240 --> 00:26:49,279
together with uh manuel farsch

713
00:26:49,279 --> 00:26:52,159
and bertrand petering in 2017 i did some

714
00:26:52,159 --> 00:26:55,279
work and some recent work with the

715
00:26:55,279 --> 00:26:58,799
dometic hartmann unpublished stuff and

716
00:26:58,799 --> 00:27:00,799
the fourth result is that modeling this

717
00:27:00,799 --> 00:27:02,000
conversion function

718
00:27:02,000 --> 00:27:04,159
well using something which we called in

719
00:27:04,159 --> 00:27:05,679
this work again with

720
00:27:05,679 --> 00:27:09,520
manual fashion bedroom puttering

721
00:27:09,600 --> 00:27:11,440
using something which called bijective

722
00:27:11,440 --> 00:27:13,200
random oracle well these are the four

723
00:27:13,200 --> 00:27:15,520
results that i want to give you

724
00:27:15,520 --> 00:27:17,760
um

725
00:27:18,559 --> 00:27:21,520
before i go into details uh i would like

726
00:27:21,520 --> 00:27:22,559
to say there's

727
00:27:22,559 --> 00:27:24,960
other results on the security of ecdsa

728
00:27:24,960 --> 00:27:27,120
that i will not talk about

729
00:27:27,120 --> 00:27:30,320
um there has been several results

730
00:27:30,320 --> 00:27:32,960
of several observations by by brown

731
00:27:32,960 --> 00:27:34,000
who's been really the

732
00:27:34,000 --> 00:27:36,480
the driving force behind the analysis of

733
00:27:36,480 --> 00:27:38,320
dsa signatures

734
00:27:38,320 --> 00:27:41,360
um very interesting reads all of them um

735
00:27:41,360 --> 00:27:43,520
sashford in a uh did some on i think

736
00:27:43,520 --> 00:27:45,600
sufficient conditions for security

737
00:27:45,600 --> 00:27:48,880
and there's other people uh that did

738
00:27:48,880 --> 00:27:51,039
a lot of work in particular uh on the

739
00:27:51,039 --> 00:27:51,919
insecurity

740
00:27:51,919 --> 00:27:54,960
like breaking side channel attacks and

741
00:27:54,960 --> 00:27:58,000
uh breaking the security of dc

742
00:27:58,000 --> 00:28:01,279
um okay so now i want to give you

743
00:28:01,279 --> 00:28:03,440
the result of modeling h and f as a

744
00:28:03,440 --> 00:28:04,320
random oracle

745
00:28:04,320 --> 00:28:08,159
by raquel all right so let's uh recall

746
00:28:08,159 --> 00:28:09,760
what our

747
00:28:09,760 --> 00:28:12,159
gen dsa signatures so this is again

748
00:28:12,159 --> 00:28:13,679
designing routine

749
00:28:13,679 --> 00:28:15,279
just for your reference and the first

750
00:28:15,279 --> 00:28:17,200
theorem was that if

751
00:28:17,200 --> 00:28:20,559
f the conversion function is a

752
00:28:20,559 --> 00:28:23,200
programmable random article the hash

753
00:28:23,200 --> 00:28:24,880
function is also a programmer when a

754
00:28:24,880 --> 00:28:25,679
marker

755
00:28:25,679 --> 00:28:28,480
the group the underlying group is hard

756
00:28:28,480 --> 00:28:30,159
has a hard d-lot so it's

757
00:28:30,159 --> 00:28:33,279
hard with a hot dog problem then this

758
00:28:33,279 --> 00:28:35,440
theorem shows that the generic dsa

759
00:28:35,440 --> 00:28:39,120
incented with gf and h is secure ufc in

760
00:28:39,120 --> 00:28:39,520
a

761
00:28:39,520 --> 00:28:42,960
cm well us cma secure they should be ufc

762
00:28:42,960 --> 00:28:45,200
and my secure

763
00:28:45,200 --> 00:28:47,600
um the proof is based i'm not going to

764
00:28:47,600 --> 00:28:49,120
give the details of the proof it's proof

765
00:28:49,120 --> 00:28:50,799
is based on the forking lemma uh by

766
00:28:50,799 --> 00:28:53,279
ponchov and stern the famous one

767
00:28:53,279 --> 00:28:55,120
um but the observation is of course that

768
00:28:55,120 --> 00:28:57,440
f this conversion function no that was

769
00:28:57,440 --> 00:28:59,039
like the x coordinate of the elliptic

770
00:28:59,039 --> 00:29:00,720
curve this is actually not a random

771
00:29:00,720 --> 00:29:01,520
oracle

772
00:29:01,520 --> 00:29:03,440
right this makes sense to to model this

773
00:29:03,440 --> 00:29:04,640
as a random oracle

774
00:29:04,640 --> 00:29:07,600
in particular in the ecdsa case now it's

775
00:29:07,600 --> 00:29:09,360
the x coordinate of the elliptic curve

776
00:29:09,360 --> 00:29:10,559
this is invertible

777
00:29:10,559 --> 00:29:12,480
random oracle is not invertible and

778
00:29:12,480 --> 00:29:14,240
that's also the reason why

779
00:29:14,240 --> 00:29:17,279
uh by uh why brickell and all the other

780
00:29:17,279 --> 00:29:19,760
authors they don't call this a security

781
00:29:19,760 --> 00:29:20,960
result on

782
00:29:20,960 --> 00:29:24,159
dsa or vcdsa or 10dsa they say

783
00:29:24,159 --> 00:29:26,480
it's a you such a security result on a

784
00:29:26,480 --> 00:29:29,600
variant of dsa which they call dsa-1

785
00:29:29,600 --> 00:29:32,720
when we take dsa and replace this time

786
00:29:32,720 --> 00:29:34,480
96 there was only dsa

787
00:29:34,480 --> 00:29:37,600
so if you take dsa and replace f

788
00:29:37,600 --> 00:29:39,679
by hash function then our security

789
00:29:39,679 --> 00:29:41,520
results apply so it's like

790
00:29:41,520 --> 00:29:45,120
an observation that on a variant of

791
00:29:45,120 --> 00:29:48,880
of dsa another variant was also

792
00:29:48,880 --> 00:29:50,399
considered in these early works

793
00:29:50,399 --> 00:29:55,200
by um

794
00:29:55,200 --> 00:29:58,320
i think in 96 which is dsa2

795
00:29:58,320 --> 00:30:01,200
so instead of it uses the standard

796
00:30:01,200 --> 00:30:02,880
conversion function but instead of just

797
00:30:02,880 --> 00:30:04,000
hashing

798
00:30:04,000 --> 00:30:07,360
um the message it hashes message

799
00:30:07,360 --> 00:30:09,440
and the t that comes up out of the

800
00:30:09,440 --> 00:30:10,880
conversion function

801
00:30:10,880 --> 00:30:13,279
and then again you can apply the forking

802
00:30:13,279 --> 00:30:15,039
lemma and then you can again prove

803
00:30:15,039 --> 00:30:16,399
security

804
00:30:16,399 --> 00:30:18,960
right this was exactly the difference

805
00:30:18,960 --> 00:30:20,320
between

806
00:30:20,320 --> 00:30:23,919
elgamar signatures no which uh

807
00:30:23,919 --> 00:30:26,960
the dsa is a special case of and

808
00:30:26,960 --> 00:30:28,720
a schwa signature so as they mentioned

809
00:30:28,720 --> 00:30:30,720
by schnorr to also hash sort of the

810
00:30:30,720 --> 00:30:32,720
the random nuns or parts of the random

811
00:30:32,720 --> 00:30:34,880
nouns no this was not done by an ipsa

812
00:30:34,880 --> 00:30:35,440
and that

813
00:30:35,440 --> 00:30:38,000
actually has perhaps the proof of schwa

814
00:30:38,000 --> 00:30:40,399
signatures

815
00:30:40,399 --> 00:30:43,200
all right so so much about the security

816
00:30:43,200 --> 00:30:45,279
of modeling fnh as a random oracle but

817
00:30:45,279 --> 00:30:46,720
again as we've seen

818
00:30:46,720 --> 00:30:48,720
this is not really about dsa this is

819
00:30:48,720 --> 00:30:50,880
about a variant of tsa so that shouldn't

820
00:30:50,880 --> 00:30:53,039
matter so much about the security of tsa

821
00:30:53,039 --> 00:30:55,120
so the next is next result is on

822
00:30:55,120 --> 00:30:56,320
modeling the group

823
00:30:56,320 --> 00:30:59,519
as a generic group and this now becomes

824
00:30:59,519 --> 00:31:00,159
a bit

825
00:31:00,159 --> 00:31:03,279
subtle no but it's not too technical so

826
00:31:03,279 --> 00:31:04,960
again here is the

827
00:31:04,960 --> 00:31:08,240
as a reminder that's the dsa function

828
00:31:08,240 --> 00:31:11,039
signing process and the theorem of brown

829
00:31:11,039 --> 00:31:11,600
in the

830
00:31:11,600 --> 00:31:14,799
year 2002 says as follows suppose

831
00:31:14,799 --> 00:31:18,480
f the conversion function is almost

832
00:31:18,480 --> 00:31:19,360
invertible

833
00:31:19,360 --> 00:31:22,000
and almost objective i don't want to

834
00:31:22,000 --> 00:31:23,600
give formal definition of these two

835
00:31:23,600 --> 00:31:24,000
things

836
00:31:24,000 --> 00:31:27,519
but uh these are um

837
00:31:27,519 --> 00:31:30,000
information these are properties of the

838
00:31:30,000 --> 00:31:31,440
function f i mean there's like

839
00:31:31,440 --> 00:31:33,120
they're almost invertible and always

840
00:31:33,120 --> 00:31:34,480
explains itself they're almost

841
00:31:34,480 --> 00:31:36,960
adjective it almost explains itself

842
00:31:36,960 --> 00:31:37,519
these are

843
00:31:37,519 --> 00:31:40,960
um two properties that ecc ecdsa

844
00:31:40,960 --> 00:31:42,799
definitely has

845
00:31:42,799 --> 00:31:45,279
uh so that's the first thing that is

846
00:31:45,279 --> 00:31:46,880
almost invertible and

847
00:31:46,880 --> 00:31:50,399
almost objective uh the hash function is

848
00:31:50,399 --> 00:31:52,159
like these are three security properties

849
00:31:52,159 --> 00:31:53,679
has to be one way

850
00:31:53,679 --> 00:31:55,600
it has to be second pre-match resistance

851
00:31:55,600 --> 00:31:58,399
and it has to be zero finder resistance

852
00:31:58,399 --> 00:31:59,919
i think again i don't want to go into

853
00:31:59,919 --> 00:32:01,760
details here but these are three

854
00:32:01,760 --> 00:32:03,039
reasonable i mean the first two

855
00:32:03,039 --> 00:32:05,120
definitely the third one is also

856
00:32:05,120 --> 00:32:07,919
you cannot you cannot find a a you

857
00:32:07,919 --> 00:32:09,039
cannot find a premature

858
00:32:09,039 --> 00:32:11,760
zero so that's also a reasonable

859
00:32:11,760 --> 00:32:13,360
property of a hash function

860
00:32:13,360 --> 00:32:15,840
the third thing is that g is a generic

861
00:32:15,840 --> 00:32:17,840
group

862
00:32:17,840 --> 00:32:21,120
then a generic dsa is strongly ufcma

863
00:32:21,120 --> 00:32:21,919
secure

864
00:32:21,919 --> 00:32:26,080
that's the theorem of brown

865
00:32:26,720 --> 00:32:28,480
brown also knows this is only applicable

866
00:32:28,480 --> 00:32:30,480
to ecdsa no the

867
00:32:30,480 --> 00:32:32,480
conversion function in dsa is actually

868
00:32:32,480 --> 00:32:34,240
not almost invertible

869
00:32:34,240 --> 00:32:37,440
it's not invertible at all um

870
00:32:37,440 --> 00:32:40,640
but and that was uh an observation made

871
00:32:40,640 --> 00:32:43,919
by sternidol at crypto 2002

872
00:32:43,919 --> 00:32:49,039
ecdsa is actually it's malleable boom

873
00:32:49,039 --> 00:32:50,640
which in particular means it's not

874
00:32:50,640 --> 00:32:53,200
strongly ufc made secure

875
00:32:53,200 --> 00:32:56,000
so why is that the case so ge and ecdsa

876
00:32:56,000 --> 00:32:57,039
is indeed the curve

877
00:32:57,039 --> 00:33:00,880
right so um uh so a

878
00:33:00,880 --> 00:33:02,640
point in elliptic verb has the x and y

879
00:33:02,640 --> 00:33:04,640
coordinates no if if we fix a point

880
00:33:04,640 --> 00:33:05,760
elliptic curve

881
00:33:05,760 --> 00:33:09,360
then it's inverse right so remember now

882
00:33:09,360 --> 00:33:10,880
we're using weird notation

883
00:33:10,880 --> 00:33:12,720
we use multiplicative notation for the

884
00:33:12,720 --> 00:33:14,880
group so usually we use additive

885
00:33:14,880 --> 00:33:16,399
notation for the curve so

886
00:33:16,399 --> 00:33:18,320
inverse is r to the minus one and

887
00:33:18,320 --> 00:33:19,760
multiplicative notation

888
00:33:19,760 --> 00:33:23,200
is r x and minus r y knows that maps on

889
00:33:23,200 --> 00:33:24,720
the y-axis

890
00:33:24,720 --> 00:33:27,840
the point so that means if if f of r is

891
00:33:27,840 --> 00:33:28,320
rx

892
00:33:28,320 --> 00:33:29,840
it's the x-coordinate of the elliptic

893
00:33:29,840 --> 00:33:32,080
curve then f of r is the same as

894
00:33:32,080 --> 00:33:35,360
f of r to the minus one

895
00:33:35,360 --> 00:33:39,440
okay because it forgets the y-coordinate

896
00:33:39,440 --> 00:33:41,440
so that means if you look at the signing

897
00:33:41,440 --> 00:33:42,559
equation that if

898
00:33:42,559 --> 00:33:46,080
s and t is a signature on a message

899
00:33:46,080 --> 00:33:49,760
right and then uh the minus s

900
00:33:49,760 --> 00:33:52,799
essentially well corresponds to the r to

901
00:33:52,799 --> 00:33:54,880
the minus one which has the same t

902
00:33:54,880 --> 00:33:57,440
value which also means it's easy to

903
00:33:57,440 --> 00:33:58,559
verify that minus

904
00:33:58,559 --> 00:34:02,480
s and t is a six also signature on them

905
00:34:02,480 --> 00:34:04,640
so that's what it's called malleability

906
00:34:04,640 --> 00:34:06,960
and that's why it's not strongly

907
00:34:06,960 --> 00:34:10,239
ufcma secure but

908
00:34:10,239 --> 00:34:13,280
um but the proof actually shows that

909
00:34:13,280 --> 00:34:15,440
strongly ufc may secure

910
00:34:15,440 --> 00:34:18,399
and so something is going wrong actually

911
00:34:18,399 --> 00:34:20,480
the proof of brown itself

912
00:34:20,480 --> 00:34:22,320
actually does this bounce the theory of

913
00:34:22,320 --> 00:34:23,839
brown himself actually does not so

914
00:34:23,839 --> 00:34:25,520
bronzer doesn't show that it's strongly

915
00:34:25,520 --> 00:34:26,800
used he may secure

916
00:34:26,800 --> 00:34:29,918
but the truth technique like one to one

917
00:34:29,918 --> 00:34:31,440
like almost riveting

918
00:34:31,440 --> 00:34:33,918
as shown by stern at all is that the

919
00:34:33,918 --> 00:34:35,520
same proof techniques also shows that

920
00:34:35,520 --> 00:34:37,440
strongly ufc masque so that's why i

921
00:34:37,440 --> 00:34:39,760
credited the strong ucma security to

922
00:34:39,760 --> 00:34:40,879
brown

923
00:34:40,879 --> 00:34:44,399
and uh what

924
00:34:44,399 --> 00:34:47,839
so all right so i have to change my

925
00:34:47,839 --> 00:34:49,520
setup otherwise i cannot see what it's

926
00:34:49,520 --> 00:34:50,719
written there

927
00:34:50,719 --> 00:34:53,918
um what sternite i'll actually say about

928
00:34:53,918 --> 00:34:54,320
this

929
00:34:54,320 --> 00:34:57,520
is what goes wrong here is the adequacy

930
00:34:57,520 --> 00:35:00,640
of the model the proof is correct

931
00:35:00,640 --> 00:35:02,720
right but the underlying model is flawed

932
00:35:02,720 --> 00:35:04,880
since it disallows production of

933
00:35:04,880 --> 00:35:08,079
malleable signatures and here in this

934
00:35:08,079 --> 00:35:09,920
talk i think i want to explain a bit

935
00:35:09,920 --> 00:35:10,320
what's

936
00:35:10,320 --> 00:35:11,920
what's really going on here i think

937
00:35:11,920 --> 00:35:14,480
there's a there's a

938
00:35:14,480 --> 00:35:17,760
much deeper reason why why things uh

939
00:35:17,760 --> 00:35:21,680
go wrong here and uh the problem is that

940
00:35:21,680 --> 00:35:22,640
it's exactly

941
00:35:22,640 --> 00:35:24,400
it's not really clear what this means

942
00:35:24,400 --> 00:35:25,760
like um

943
00:35:25,760 --> 00:35:28,880
if you model dsa or generic dsa

944
00:35:28,880 --> 00:35:30,320
in a generic group what does this

945
00:35:30,320 --> 00:35:32,720
actually mean what does this model

946
00:35:32,720 --> 00:35:35,520
how do you model this actually let's try

947
00:35:35,520 --> 00:35:36,240
that in

948
00:35:36,240 --> 00:35:39,839
a let's go through this and let's go

949
00:35:39,839 --> 00:35:42,160
uh let's maybe uh let me start with

950
00:35:42,160 --> 00:35:43,520
giving shupes generic

951
00:35:43,520 --> 00:35:46,800
model from shoepin97 so suppose we have

952
00:35:46,800 --> 00:35:48,400
a cryptographic experiment

953
00:35:48,400 --> 00:35:50,480
defined over some group you might think

954
00:35:50,480 --> 00:35:51,599
of uh just

955
00:35:51,599 --> 00:35:53,839
the discrete logarithm logarithm problem

956
00:35:53,839 --> 00:35:55,200
so g to the x

957
00:35:55,200 --> 00:35:58,400
given due to the x and g uh compute x

958
00:35:58,400 --> 00:36:00,640
okay and the general group model idea is

959
00:36:00,640 --> 00:36:02,800
that adversely can only exploit the

960
00:36:02,800 --> 00:36:05,440
group structure to solve this problem

961
00:36:05,440 --> 00:36:07,440
and the implementation of this idea is

962
00:36:07,440 --> 00:36:09,119
that the access

963
00:36:09,119 --> 00:36:11,040
access to the group is restricted to

964
00:36:11,040 --> 00:36:12,960
random encodings

965
00:36:12,960 --> 00:36:14,800
this is actually in the following way so

966
00:36:14,800 --> 00:36:16,160
the first the

967
00:36:16,160 --> 00:36:18,160
experiment chooses a random injective

968
00:36:18,160 --> 00:36:19,359
encoding pi

969
00:36:19,359 --> 00:36:23,200
from g to some a so a is some subtype of

970
00:36:23,200 --> 00:36:23,920
zero one two

971
00:36:23,920 --> 00:36:25,680
so some bit string is some set that has

972
00:36:25,680 --> 00:36:27,599
to be as these as large as g

973
00:36:27,599 --> 00:36:30,800
sufficiently large and uh

974
00:36:30,800 --> 00:36:33,520
well in when then pi of g says

975
00:36:33,520 --> 00:36:35,599
experiment is executed where each

976
00:36:35,599 --> 00:36:37,359
appearance of a group element is

977
00:36:37,359 --> 00:36:39,280
substituted by its encoding

978
00:36:39,280 --> 00:36:42,640
pi of a and the adversary

979
00:36:42,640 --> 00:36:45,359
only has access to the group with

980
00:36:45,359 --> 00:36:47,040
oracles

981
00:36:47,040 --> 00:36:49,040
um let's go through them to the full

982
00:36:49,040 --> 00:36:50,400
example so this is the

983
00:36:50,400 --> 00:36:53,359
the famous dispute locked example in the

984
00:36:53,359 --> 00:36:54,960
general group model so first of all the

985
00:36:54,960 --> 00:36:56,640
experiment picks a random encoding from

986
00:36:56,640 --> 00:36:58,160
g to a

987
00:36:58,160 --> 00:37:00,240
and then experiment displeatlock picks a

988
00:37:00,240 --> 00:37:01,760
random exponent x

989
00:37:01,760 --> 00:37:05,119
and then sends an encoding of

990
00:37:05,119 --> 00:37:08,400
the generator and an encoding of g to

991
00:37:08,400 --> 00:37:09,119
the x

992
00:37:09,119 --> 00:37:12,720
okay and the adversary wins if he

993
00:37:12,720 --> 00:37:16,160
outputs the x in the end and doing so he

994
00:37:16,160 --> 00:37:17,119
can make

995
00:37:17,119 --> 00:37:20,400
um maximum of q queries

996
00:37:20,400 --> 00:37:22,320
the queries are of the form he sends two

997
00:37:22,320 --> 00:37:24,400
encodings like

998
00:37:24,400 --> 00:37:27,359
editing in a and what is being done is

999
00:37:27,359 --> 00:37:29,440
like here the experiment

1000
00:37:29,440 --> 00:37:31,680
inverts these encodings so this is a

1001
00:37:31,680 --> 00:37:33,599
group element here

1002
00:37:33,599 --> 00:37:36,640
this is a group element here and then

1003
00:37:36,640 --> 00:37:38,960
um combines these two group elements

1004
00:37:38,960 --> 00:37:41,359
like using the secret

1005
00:37:41,359 --> 00:37:44,560
group law and then applies now this is a

1006
00:37:44,560 --> 00:37:46,320
group element here what's inside of this

1007
00:37:46,320 --> 00:37:47,440
big bracket here

1008
00:37:47,440 --> 00:37:49,760
and then and can encodes it again and

1009
00:37:49,760 --> 00:37:52,400
this encoding is being outputted

1010
00:37:52,400 --> 00:37:54,240
right this is the way the adversary can

1011
00:37:54,240 --> 00:37:56,240
access the group this makes sure that

1012
00:37:56,240 --> 00:37:57,200
the adversary can

1013
00:37:57,200 --> 00:38:01,440
only exploit the group properties and

1014
00:38:01,440 --> 00:38:04,720
nothing else and then there's the

1015
00:38:04,720 --> 00:38:06,480
shoot bound that the probability and the

1016
00:38:06,480 --> 00:38:08,240
probability is over the adversary and

1017
00:38:08,240 --> 00:38:10,000
over the encoding that reduces solves

1018
00:38:10,000 --> 00:38:11,359
the discrete log in the

1019
00:38:11,359 --> 00:38:13,440
jail group model is upper bounded by the

1020
00:38:13,440 --> 00:38:15,119
number of fair square divided by the

1021
00:38:15,119 --> 00:38:16,079
kubota

1022
00:38:16,079 --> 00:38:17,599
which means it's impossible and that

1023
00:38:17,599 --> 00:38:20,240
actually matches the lower bound

1024
00:38:20,240 --> 00:38:23,920
now um now if we want to mix

1025
00:38:23,920 --> 00:38:26,000
the general group model with algebraic

1026
00:38:26,000 --> 00:38:26,960
functions

1027
00:38:26,960 --> 00:38:30,079
so suppose the experiment no not no not

1028
00:38:30,079 --> 00:38:31,680
don't think anymore of the discrete log

1029
00:38:31,680 --> 00:38:33,760
now think of more of dsa

1030
00:38:33,760 --> 00:38:36,560
involves some non-algebraic function in

1031
00:38:36,560 --> 00:38:38,000
the non-algebraic function

1032
00:38:38,000 --> 00:38:40,000
it's some function in this case that

1033
00:38:40,000 --> 00:38:41,599
like takes elements

1034
00:38:41,599 --> 00:38:45,040
from g and outputs some element in set p

1035
00:38:45,040 --> 00:38:47,440
like in dsa and think of maybe after the

1036
00:38:47,440 --> 00:38:49,520
ecdsa example g is a group and it'll be

1037
00:38:49,520 --> 00:38:50,079
curve

1038
00:38:50,079 --> 00:38:53,599
group and the um the conversion function

1039
00:38:53,599 --> 00:38:55,359
is just taking the x coordinate of the

1040
00:38:55,359 --> 00:38:57,040
elliptic curve representation

1041
00:38:57,040 --> 00:38:59,200
so here's the group and here is the zp

1042
00:38:59,200 --> 00:39:00,320
element

1043
00:39:00,320 --> 00:39:02,960
now we live in the soviet genetic group

1044
00:39:02,960 --> 00:39:03,680
model

1045
00:39:03,680 --> 00:39:06,240
so the adversary can only has access to

1046
00:39:06,240 --> 00:39:08,000
encoding so he doesn't see ge but he

1047
00:39:08,000 --> 00:39:09,040
sees pi f

1048
00:39:09,040 --> 00:39:12,839
elements in g so how do we actually now

1049
00:39:12,839 --> 00:39:14,320
model um

1050
00:39:14,320 --> 00:39:18,160
so what is fgg so how do you model the

1051
00:39:18,160 --> 00:39:19,760
conversion function in the generic group

1052
00:39:19,760 --> 00:39:20,720
model

1053
00:39:20,720 --> 00:39:24,720
so this so the the conversion function

1054
00:39:24,720 --> 00:39:28,000
of ecdsa it's only defined

1055
00:39:28,000 --> 00:39:30,079
if r is actually a point on the elliptic

1056
00:39:30,079 --> 00:39:31,920
curve

1057
00:39:31,920 --> 00:39:34,960
um so it's undefined for like an r which

1058
00:39:34,960 --> 00:39:35,280
is

1059
00:39:35,280 --> 00:39:37,680
an encoding right so how do you define

1060
00:39:37,680 --> 00:39:39,040
this function

1061
00:39:39,040 --> 00:39:41,599
i don't know let's try so the first

1062
00:39:41,599 --> 00:39:43,280
approach which turns out to be stupid

1063
00:39:43,280 --> 00:39:45,119
but i want to give it to you anyway

1064
00:39:45,119 --> 00:39:47,119
um nobody has done that so far but just

1065
00:39:47,119 --> 00:39:48,320
to make sure that uh

1066
00:39:48,320 --> 00:39:51,440
this is not a triple way so which is we

1067
00:39:51,440 --> 00:39:52,160
just use

1068
00:39:52,160 --> 00:39:55,280
right okay so instead of we just use uh

1069
00:39:55,280 --> 00:39:57,119
so we have to define this function so we

1070
00:39:57,119 --> 00:39:58,640
just use all right so the

1071
00:39:58,640 --> 00:40:01,280
inverse of pi right so we from the

1072
00:40:01,280 --> 00:40:02,240
encoding

1073
00:40:02,240 --> 00:40:04,240
we go back to the group element and then

1074
00:40:04,240 --> 00:40:06,240
we apply the original conversion

1075
00:40:06,240 --> 00:40:07,680
function

1076
00:40:07,680 --> 00:40:09,200
right that could be an idea at least

1077
00:40:09,200 --> 00:40:10,880
this is well-defined okay

1078
00:40:10,880 --> 00:40:13,760
but of course then during the experiment

1079
00:40:13,760 --> 00:40:14,800
you would output

1080
00:40:14,800 --> 00:40:19,119
uh uh the um um

1081
00:40:19,119 --> 00:40:23,119
um ftg of r which but really information

1082
00:40:23,119 --> 00:40:25,599
about the inverse of encoding which

1083
00:40:25,599 --> 00:40:26,800
would uh

1084
00:40:26,800 --> 00:40:28,960
which would output some information

1085
00:40:28,960 --> 00:40:31,119
about the group element possibly no if f

1086
00:40:31,119 --> 00:40:31,520
is

1087
00:40:31,520 --> 00:40:33,119
invertible then you would this would

1088
00:40:33,119 --> 00:40:34,960
legal elements uh some information about

1089
00:40:34,960 --> 00:40:35,839
the group

1090
00:40:35,839 --> 00:40:37,680
right so this doesn't make any sense no

1091
00:40:37,680 --> 00:40:39,599
that's in the general group model

1092
00:40:39,599 --> 00:40:41,119
because it leaks information about the

1093
00:40:41,119 --> 00:40:42,800
group and this is what the general model

1094
00:40:42,800 --> 00:40:43,760
wants to avoid

1095
00:40:43,760 --> 00:40:45,200
right so that doesn't make any sense all

1096
00:40:45,200 --> 00:40:47,280
right next try and this is what

1097
00:40:47,280 --> 00:40:49,680
so far everybody did so assume actually

1098
00:40:49,680 --> 00:40:51,280
now we make the assumption that the

1099
00:40:51,280 --> 00:40:52,640
group

1100
00:40:52,640 --> 00:40:54,720
so that things actually is the things

1101
00:40:54,720 --> 00:40:56,480
are well defined that the group is

1102
00:40:56,480 --> 00:40:57,119
actually

1103
00:40:57,119 --> 00:40:58,960
well most cases the same as this

1104
00:40:58,960 --> 00:41:00,560
encoding set

1105
00:41:00,560 --> 00:41:03,760
and then just in fine define the uh

1106
00:41:03,760 --> 00:41:06,160
this function here now the the

1107
00:41:06,160 --> 00:41:08,400
conversion function for the encoding as

1108
00:41:08,400 --> 00:41:11,520
the same as the conversion function here

1109
00:41:11,520 --> 00:41:13,440
right so assume that this is a subset

1110
00:41:13,440 --> 00:41:15,040
base so it's just to make it well

1111
00:41:15,040 --> 00:41:16,640
defined

1112
00:41:16,640 --> 00:41:20,319
um well now the problem is that

1113
00:41:20,319 --> 00:41:23,599
this implicitly so now what have

1114
00:41:23,599 --> 00:41:26,000
we done so we fixed this thing here so

1115
00:41:26,000 --> 00:41:26,640
this is

1116
00:41:26,640 --> 00:41:30,560
actually fg here right this is fixed

1117
00:41:30,560 --> 00:41:32,720
right so let's look what is this

1118
00:41:32,720 --> 00:41:34,160
function here

1119
00:41:34,160 --> 00:41:36,720
and this function here is actually now

1120
00:41:36,720 --> 00:41:38,160
now this function here is actually

1121
00:41:38,160 --> 00:41:41,760
f g um connected composed with

1122
00:41:41,760 --> 00:41:45,280
pi right so i mean we go from from here

1123
00:41:45,280 --> 00:41:45,920
to here

1124
00:41:45,920 --> 00:41:47,440
right this is how this function is

1125
00:41:47,440 --> 00:41:50,480
defined so this implicitly

1126
00:41:50,480 --> 00:41:52,240
modeling it like this implicitly

1127
00:41:52,240 --> 00:41:53,680
considers the

1128
00:41:53,680 --> 00:41:57,119
uh the initial experiment with

1129
00:41:57,119 --> 00:41:59,119
um the conversion function the original

1130
00:41:59,119 --> 00:42:00,720
converged function the one we actually

1131
00:42:00,720 --> 00:42:02,160
wanted to model

1132
00:42:02,160 --> 00:42:06,160
composed with this um

1133
00:42:06,160 --> 00:42:08,000
this encoding function which is the

1134
00:42:08,000 --> 00:42:10,079
uniformly random encoding function

1135
00:42:10,079 --> 00:42:12,880
so this actually means that we modeled

1136
00:42:12,880 --> 00:42:13,440
things

1137
00:42:13,440 --> 00:42:16,880
with as an model that um conversion

1138
00:42:16,880 --> 00:42:18,880
function at an idealized object

1139
00:42:18,880 --> 00:42:21,359
which has entropy in it and the bad

1140
00:42:21,359 --> 00:42:22,480
thing is that now the

1141
00:42:22,480 --> 00:42:24,960
ggm proof can and in some cases did

1142
00:42:24,960 --> 00:42:26,640
exploit the entropy

1143
00:42:26,640 --> 00:42:30,720
of this of this encoding function um

1144
00:42:30,720 --> 00:42:33,680
well this is exactly what happened uh in

1145
00:42:33,680 --> 00:42:34,160
in this

1146
00:42:34,160 --> 00:42:36,319
sort of the flaw and the security proof

1147
00:42:36,319 --> 00:42:37,359
why is

1148
00:42:37,359 --> 00:42:39,760
uh ecdsa signatures it's not strongly

1149
00:42:39,760 --> 00:42:41,280
secured even though one can prove it

1150
00:42:41,280 --> 00:42:42,319
strongly secure

1151
00:42:42,319 --> 00:42:44,880
right because there's entropy in it and

1152
00:42:44,880 --> 00:42:45,760
so that in the j

1153
00:42:45,760 --> 00:42:48,960
group model fgg of r is not fgg of

1154
00:42:48,960 --> 00:42:50,640
r to the minus one even though in the

1155
00:42:50,640 --> 00:42:52,160
real world it is

1156
00:42:52,160 --> 00:42:55,680
like even worse one can even show that

1157
00:42:55,680 --> 00:42:58,400
if you define f of r using this way in

1158
00:42:58,400 --> 00:42:58,960
the g

1159
00:42:58,960 --> 00:43:02,480
group model uh take just cut off half of

1160
00:43:02,480 --> 00:43:03,280
the bits

1161
00:43:03,280 --> 00:43:05,440
right and like the remaining bits is the

1162
00:43:05,440 --> 00:43:06,640
output so half bits of

1163
00:43:06,640 --> 00:43:09,359
r f of r is half bits of r this acts

1164
00:43:09,359 --> 00:43:11,520
like a random oracle

1165
00:43:11,520 --> 00:43:13,440
like this is as good as a random oracle

1166
00:43:13,440 --> 00:43:15,040
in the jankwoop model

1167
00:43:15,040 --> 00:43:18,240
so this is not very useful

1168
00:43:18,240 --> 00:43:20,240
okay so this i hope this was not too

1169
00:43:20,240 --> 00:43:22,400
technical i just wanted to show you that

1170
00:43:22,400 --> 00:43:26,160
um when you try to model non-algebraic

1171
00:43:26,160 --> 00:43:27,920
functions in the jaguar model you have

1172
00:43:27,920 --> 00:43:30,160
to take extremely care

1173
00:43:30,160 --> 00:43:34,640
um and this was exactly what was done

1174
00:43:34,640 --> 00:43:36,960
by brown so the the modeling was was

1175
00:43:36,960 --> 00:43:38,160
done like this that

1176
00:43:38,160 --> 00:43:41,040
this was the the fgg was uh defined as

1177
00:43:41,040 --> 00:43:42,800
fg of r right so that

1178
00:43:42,800 --> 00:43:45,839
this modeling was done and that was why

1179
00:43:45,839 --> 00:43:46,480
the

1180
00:43:46,480 --> 00:43:48,640
proof gives er security result that this

1181
00:43:48,640 --> 00:43:50,720
strongly ufcm is secure but i think it's

1182
00:43:50,720 --> 00:43:51,520
even

1183
00:43:51,520 --> 00:43:53,680
that's even worse and that's like my my

1184
00:43:53,680 --> 00:43:55,359
opinion is that don't mix g

1185
00:43:55,359 --> 00:43:56,720
and general coup model with nonjab

1186
00:43:56,720 --> 00:43:58,720
algebraic operations

1187
00:43:58,720 --> 00:44:01,760
um that makes a formal

1188
00:44:01,760 --> 00:44:03,680
that the proof is informally correct but

1189
00:44:03,680 --> 00:44:05,200
again the

1190
00:44:05,200 --> 00:44:07,280
what's the interpretation no so if you

1191
00:44:07,280 --> 00:44:08,880
had entropy to it

1192
00:44:08,880 --> 00:44:10,960
um then you probably can prove anything

1193
00:44:10,960 --> 00:44:12,880
and then as i said this this half bits

1194
00:44:12,880 --> 00:44:14,079
uh

1195
00:44:14,079 --> 00:44:16,720
example this even is as good as a random

1196
00:44:16,720 --> 00:44:18,000
oracle so you're probably

1197
00:44:18,000 --> 00:44:22,000
able to prove a lot with this um

1198
00:44:22,000 --> 00:44:24,800
unfortunately this the same problems

1199
00:44:24,800 --> 00:44:25,359
were

1200
00:44:25,359 --> 00:44:27,680
repeated over and over again so for

1201
00:44:27,680 --> 00:44:30,160
example in threshold ecdsa

1202
00:44:30,160 --> 00:44:34,319
uh the the proof was repeated again um

1203
00:44:34,319 --> 00:44:37,040
in in in other crypto that was done

1204
00:44:37,040 --> 00:44:37,599
myself

1205
00:44:37,599 --> 00:44:40,560
and uh that was done as well and uh even

1206
00:44:40,560 --> 00:44:41,680
had my paper uh

1207
00:44:41,680 --> 00:44:43,520
more than 10 years ago that sort of did

1208
00:44:43,520 --> 00:44:45,599
the same it's not a mistake but it's

1209
00:44:45,599 --> 00:44:46,560
like a

1210
00:44:46,560 --> 00:44:49,200
it's a it's a sort of a meaningless

1211
00:44:49,200 --> 00:44:50,079
result i think

1212
00:44:50,079 --> 00:44:51,760
so there are very model things in j

1213
00:44:51,760 --> 00:44:53,119
group model with the non-algebraic

1214
00:44:53,119 --> 00:44:54,800
function and then sort of concluded that

1215
00:44:54,800 --> 00:44:56,960
this is secure but i

1216
00:44:56,960 --> 00:44:58,880
with insight i don't think this uh this

1217
00:44:58,880 --> 00:45:00,079
this is uh

1218
00:45:00,079 --> 00:45:01,920
this is secure it's just an artifact of

1219
00:45:01,920 --> 00:45:04,800
the model

1220
00:45:04,800 --> 00:45:07,200
my advice here if you want to be strict

1221
00:45:07,200 --> 00:45:08,640
and you want to be precise

1222
00:45:08,640 --> 00:45:11,440
use not do not use shupes general group

1223
00:45:11,440 --> 00:45:14,480
model no because this has always entropy

1224
00:45:14,480 --> 00:45:16,560
use maura's genetic group model which is

1225
00:45:16,560 --> 00:45:18,560
much more precise because it doesn't

1226
00:45:18,560 --> 00:45:20,640
generate any entropy it has just unique

1227
00:45:20,640 --> 00:45:22,480
handles and that makes things easier

1228
00:45:22,480 --> 00:45:23,839
because there is no

1229
00:45:23,839 --> 00:45:26,640
non-algebraic primitives in there you

1230
00:45:26,640 --> 00:45:28,160
have to somehow define them and you have

1231
00:45:28,160 --> 00:45:29,599
to make that explicit

1232
00:45:29,599 --> 00:45:33,520
so such yeah and

1233
00:45:33,520 --> 00:45:35,599
such unclear security results will be

1234
00:45:35,599 --> 00:45:38,560
much more difficult to state

1235
00:45:38,560 --> 00:45:41,599
um and one thing i wanted to say is that

1236
00:45:41,599 --> 00:45:43,680
you might argue that well this is the

1237
00:45:43,680 --> 00:45:45,280
jackhoop model this is an

1238
00:45:45,280 --> 00:45:46,960
this is the engineering model i mean

1239
00:45:46,960 --> 00:45:48,400
somehow similar the rom probably has

1240
00:45:48,400 --> 00:45:50,240
similar problems but the rom doesn't

1241
00:45:50,240 --> 00:45:51,599
have similar problems

1242
00:45:51,599 --> 00:45:53,200
because the hash function the random

1243
00:45:53,200 --> 00:45:56,319
oracle models the hash function as

1244
00:45:56,319 --> 00:46:00,240
as perfect and ideal

1245
00:46:00,240 --> 00:46:02,240
but uh the hash function is still has

1246
00:46:02,240 --> 00:46:04,079
the same domain in range

1247
00:46:04,079 --> 00:46:06,960
so the random argument does not have any

1248
00:46:06,960 --> 00:46:08,240
similar problems

1249
00:46:08,240 --> 00:46:10,240
right because it's not it's not algebic

1250
00:46:10,240 --> 00:46:11,280
because it's not about

1251
00:46:11,280 --> 00:46:12,960
algebra it's just about hash function

1252
00:46:12,960 --> 00:46:14,800
and making

1253
00:46:14,800 --> 00:46:16,720
modeling hash functions perfectly random

1254
00:46:16,720 --> 00:46:18,079
i think is useful

1255
00:46:18,079 --> 00:46:22,400
a group in this setting might not

1256
00:46:22,640 --> 00:46:25,760
uh okay so that's the result on the uh

1257
00:46:25,760 --> 00:46:28,400
security in the jail group model so the

1258
00:46:28,400 --> 00:46:28,800
next

1259
00:46:28,800 --> 00:46:30,800
result i want to give is that modeling

1260
00:46:30,800 --> 00:46:33,280
age as a random article that was brown

1261
00:46:33,280 --> 00:46:34,480
and

1262
00:46:34,480 --> 00:46:37,599
and then later a bit formalized into

1263
00:46:37,599 --> 00:46:40,079
more papers

1264
00:46:40,079 --> 00:46:43,119
so in the random oracle model um

1265
00:46:43,119 --> 00:46:45,599
the model h the hash function as a

1266
00:46:45,599 --> 00:46:46,880
random article

1267
00:46:46,880 --> 00:46:49,839
and the model f as something arbitrary

1268
00:46:49,839 --> 00:46:51,280
so can we whatever you want for the

1269
00:46:51,280 --> 00:46:52,640
moment

1270
00:46:52,640 --> 00:46:54,800
okay let's see what you would like to

1271
00:46:54,800 --> 00:46:56,800
prove is that the discrete log

1272
00:46:56,800 --> 00:46:59,680
implies ufc may security but of course

1273
00:46:59,680 --> 00:47:01,280
we cannot prove that we can prove

1274
00:47:01,280 --> 00:47:04,319
only that the semi d log implies ufc

1275
00:47:04,319 --> 00:47:05,839
male security so what is the simi

1276
00:47:05,839 --> 00:47:07,119
dialogue that was

1277
00:47:07,119 --> 00:47:10,160
that is again was proposed by brown

1278
00:47:10,160 --> 00:47:12,319
so the cme d log essentially given a

1279
00:47:12,319 --> 00:47:13,520
public key

1280
00:47:13,520 --> 00:47:16,560
you want to forge a gsa a signature on a

1281
00:47:16,560 --> 00:47:17,040
message

1282
00:47:17,040 --> 00:47:20,319
that attaches to one what does it mean

1283
00:47:20,319 --> 00:47:22,720
it's like input g and x compute and s

1284
00:47:22,720 --> 00:47:24,079
prime and t such that t

1285
00:47:24,079 --> 00:47:27,200
equals f of g times x to the t the whole

1286
00:47:27,200 --> 00:47:28,240
to the s prime

1287
00:47:28,240 --> 00:47:31,598
so that's the cmd log

1288
00:47:31,760 --> 00:47:34,000
what we can prove is the first theorem

1289
00:47:34,000 --> 00:47:36,720
that if f is arbitrary

1290
00:47:36,720 --> 00:47:39,760
h is a programmer random oracle and g is

1291
00:47:39,760 --> 00:47:40,880
a group with heart

1292
00:47:40,880 --> 00:47:44,880
simi d log the first result is that then

1293
00:47:44,880 --> 00:47:48,319
these a is uf anime secure so no message

1294
00:47:48,319 --> 00:47:49,200
secure

1295
00:47:49,200 --> 00:47:51,200
so it means that these two things are

1296
00:47:51,200 --> 00:47:53,040
actually equivalent

1297
00:47:53,040 --> 00:47:55,280
okay the second result that there is

1298
00:47:55,280 --> 00:47:56,319
that

1299
00:47:56,319 --> 00:47:59,680
um but the same with the same so f is

1300
00:47:59,680 --> 00:48:01,280
again arbitrary h is a programmable

1301
00:48:01,280 --> 00:48:02,400
random oracle

1302
00:48:02,400 --> 00:48:06,640
then and the third thing is that the dsa

1303
00:48:06,640 --> 00:48:09,839
is nma secure so we start from here then

1304
00:48:09,839 --> 00:48:13,680
it's also uf one cma secure and remember

1305
00:48:13,680 --> 00:48:16,480
that one cma security was

1306
00:48:16,480 --> 00:48:20,079
um only one

1307
00:48:20,079 --> 00:48:23,440
so each message can only be queried once

1308
00:48:23,440 --> 00:48:25,920
okay and of course for digitalistic

1309
00:48:25,920 --> 00:48:28,160
fertilistic schemes these two things are

1310
00:48:28,160 --> 00:48:30,720
equivalent the third result that there

1311
00:48:30,720 --> 00:48:32,079
is is that

1312
00:48:32,079 --> 00:48:34,160
from you might ask yourself if you can

1313
00:48:34,160 --> 00:48:36,960
go from non-message security to cma

1314
00:48:36,960 --> 00:48:38,160
security

1315
00:48:38,160 --> 00:48:40,640
a full cma security not one cma is a

1316
00:48:40,640 --> 00:48:42,079
full cma security

1317
00:48:42,079 --> 00:48:43,599
the third theorem actually says that

1318
00:48:43,599 --> 00:48:46,160
this is impossible

1319
00:48:46,160 --> 00:48:48,400
with some restrictions of restrictions

1320
00:48:48,400 --> 00:48:49,440
of course

1321
00:48:49,440 --> 00:48:52,640
all right um all right so uh

1322
00:48:52,640 --> 00:48:55,119
let's uh try at least to prove something

1323
00:48:55,119 --> 00:48:56,480
or to give you an idea how to prove

1324
00:48:56,480 --> 00:48:57,440
something like that

1325
00:48:57,440 --> 00:48:59,760
so let's prove that no message security

1326
00:48:59,760 --> 00:49:02,160
implies one scene execute the third

1327
00:49:02,160 --> 00:49:04,400
the second tier so suppose on that side

1328
00:49:04,400 --> 00:49:05,760
we have an adversary against

1329
00:49:05,760 --> 00:49:09,119
one message uh one cma security

1330
00:49:09,119 --> 00:49:11,520
um we want to build in diversity b

1331
00:49:11,520 --> 00:49:12,319
against

1332
00:49:12,319 --> 00:49:15,440
no message security okay all right this

1333
00:49:15,440 --> 00:49:17,440
is the experiment this experiment sends

1334
00:49:17,440 --> 00:49:18,640
a public key that

1335
00:49:18,640 --> 00:49:20,800
the green experiment the reduction sends

1336
00:49:20,800 --> 00:49:21,839
over

1337
00:49:21,839 --> 00:49:25,119
um the one cma adversary will ask

1338
00:49:25,119 --> 00:49:28,000
some signatures on messages they have to

1339
00:49:28,000 --> 00:49:28,800
be distinct

1340
00:49:28,800 --> 00:49:31,839
might do some random oracle queries um

1341
00:49:31,839 --> 00:49:33,680
and then in the end i'll put the forgery

1342
00:49:33,680 --> 00:49:35,280
m star on the

1343
00:49:35,280 --> 00:49:38,400
forgery sigma star on the message star

1344
00:49:38,400 --> 00:49:42,000
um okay and then the

1345
00:49:42,000 --> 00:49:46,400
reduction also outputs the same fortune

1346
00:49:46,400 --> 00:49:48,800
all right and then the idea is that here

1347
00:49:48,800 --> 00:49:50,720
we they cannot ask for signing queries

1348
00:49:50,720 --> 00:49:52,640
so some of you have to simulate all the

1349
00:49:52,640 --> 00:49:53,520
signatures

1350
00:49:53,520 --> 00:49:55,359
without knowing the secret key so that's

1351
00:49:55,359 --> 00:49:56,720
going to be the tough part

1352
00:49:56,720 --> 00:49:58,079
the other tough part is going to be

1353
00:49:58,079 --> 00:49:59,359
sometimes you're going to program the

1354
00:49:59,359 --> 00:50:00,319
random article

1355
00:50:00,319 --> 00:50:03,920
and h is the random oracle that is uh

1356
00:50:03,920 --> 00:50:06,960
by this one c made vsp and h prime is

1357
00:50:06,960 --> 00:50:08,319
the random oracle just to make them

1358
00:50:08,319 --> 00:50:10,400
distinct by the anime

1359
00:50:10,400 --> 00:50:12,400
experiment okay so sometimes you want to

1360
00:50:12,400 --> 00:50:14,000
program and sometimes you want to

1361
00:50:14,000 --> 00:50:16,240
you know you want to query and hand over

1362
00:50:16,240 --> 00:50:17,440
the result

1363
00:50:17,440 --> 00:50:19,440
right so how do you simulate these

1364
00:50:19,440 --> 00:50:20,880
signatures here

1365
00:50:20,880 --> 00:50:24,720
so this is again the real signing of uh

1366
00:50:24,720 --> 00:50:26,800
of dsa signatures and how do you

1367
00:50:26,800 --> 00:50:28,319
simulate things right

1368
00:50:28,319 --> 00:50:31,680
so um you pick a random am and a bm for

1369
00:50:31,680 --> 00:50:32,160
each m

1370
00:50:32,160 --> 00:50:35,200
m is not fixed and instead of defining

1371
00:50:35,200 --> 00:50:38,640
r as d to the r you do define r as

1372
00:50:38,640 --> 00:50:42,079
d to the b i'm going to leave at the

1373
00:50:42,079 --> 00:50:44,720
subscripts g to the b times x to the a

1374
00:50:44,720 --> 00:50:45,680
which means the r

1375
00:50:45,680 --> 00:50:48,079
little r is implicit explicitly defined

1376
00:50:48,079 --> 00:50:48,720
as b

1377
00:50:48,720 --> 00:50:52,160
plus a times x okay that's the pick

1378
00:50:52,160 --> 00:50:54,559
and while you compute your t the way

1379
00:50:54,559 --> 00:50:56,319
it's done in the real signing

1380
00:50:56,319 --> 00:50:58,880
and now what you do that's that's that's

1381
00:50:58,880 --> 00:50:59,520
the

1382
00:50:59,520 --> 00:51:01,520
main trick so you program the random

1383
00:51:01,520 --> 00:51:03,040
article as b times t

1384
00:51:03,040 --> 00:51:06,240
divided by a right and note that

1385
00:51:06,240 --> 00:51:08,720
this is still uniformly random because

1386
00:51:08,720 --> 00:51:09,760
the b and the

1387
00:51:09,760 --> 00:51:11,440
a you only know one linear equation

1388
00:51:11,440 --> 00:51:13,280
about this so this is still uniformly

1389
00:51:13,280 --> 00:51:14,400
random

1390
00:51:14,400 --> 00:51:17,680
and now we can look at the the the s

1391
00:51:17,680 --> 00:51:18,800
value which is

1392
00:51:18,800 --> 00:51:21,119
which is h of m plus t times x divided

1393
00:51:21,119 --> 00:51:23,040
by r so you can plug things in

1394
00:51:23,040 --> 00:51:24,640
blah blah blah and you will see the x

1395
00:51:24,640 --> 00:51:26,880
cancels out so you can actually define

1396
00:51:26,880 --> 00:51:27,440
the s

1397
00:51:27,440 --> 00:51:30,160
as t divided by a and which is

1398
00:51:30,160 --> 00:51:31,920
independent of x so you can simulate

1399
00:51:31,920 --> 00:51:32,960
things

1400
00:51:32,960 --> 00:51:36,559
right so sigma is s smt as defined here

1401
00:51:36,559 --> 00:51:38,480
is actually a valid signature on m and

1402
00:51:38,480 --> 00:51:41,680
it has actually the right distinction

1403
00:51:41,680 --> 00:51:43,520
okay and that's essentially the whole

1404
00:51:43,520 --> 00:51:45,520
trick here and the only thing where you

1405
00:51:45,520 --> 00:51:46,480
have to take care

1406
00:51:46,480 --> 00:51:49,599
is that um well sometimes you want to

1407
00:51:49,599 --> 00:51:51,280
program the renault here

1408
00:51:51,280 --> 00:51:52,880
right and sometimes you want to carry

1409
00:51:52,880 --> 00:51:55,200
the the function here why

1410
00:51:55,200 --> 00:51:58,559
because if the adversary outputs a

1411
00:51:58,559 --> 00:52:00,559
forgery on m star

1412
00:52:00,559 --> 00:52:03,839
right so only if we

1413
00:52:03,839 --> 00:52:05,760
vary the random market so we hand over

1414
00:52:05,760 --> 00:52:08,400
this if the the random oracle values

1415
00:52:08,400 --> 00:52:11,599
they are they agree on m star

1416
00:52:11,599 --> 00:52:14,160
only then a forgery here will also be a

1417
00:52:14,160 --> 00:52:15,839
forgery up here

1418
00:52:15,839 --> 00:52:17,760
and here you have to apply something

1419
00:52:17,760 --> 00:52:20,480
which is usually called a coron trick

1420
00:52:20,480 --> 00:52:23,119
some some guessing is involved which

1421
00:52:23,119 --> 00:52:24,319
means that the reduction

1422
00:52:24,319 --> 00:52:28,160
loses a number of signing queries

1423
00:52:28,160 --> 00:52:31,280
in in tightness okay

1424
00:52:31,280 --> 00:52:33,760
so that's this proof and note that sort

1425
00:52:33,760 --> 00:52:35,359
of the proof

1426
00:52:35,359 --> 00:52:37,520
makes use of the fact that this is a one

1427
00:52:37,520 --> 00:52:38,960
seaman adversary

1428
00:52:38,960 --> 00:52:41,040
because if the adversary had asked for

1429
00:52:41,040 --> 00:52:43,040
two twice the same

1430
00:52:43,040 --> 00:52:46,559
message here we could only so this this

1431
00:52:46,559 --> 00:52:47,920
technique only allows

1432
00:52:47,920 --> 00:52:50,640
us to simulate one of the signing varies

1433
00:52:50,640 --> 00:52:52,240
because so that we committed

1434
00:52:52,240 --> 00:52:54,400
here in the age of n be committed to b

1435
00:52:54,400 --> 00:52:56,319
times t divided by a and that only

1436
00:52:56,319 --> 00:52:57,680
allows us to

1437
00:52:57,680 --> 00:53:00,720
um to establish one signing query not

1438
00:53:00,720 --> 00:53:02,800
button not another signing query with

1439
00:53:02,800 --> 00:53:06,720
distinct randomness okay

1440
00:53:06,720 --> 00:53:06,990
um

1441
00:53:06,990 --> 00:53:10,240
[Music]

1442
00:53:10,240 --> 00:53:13,680
okay so um one can also show that

1443
00:53:13,680 --> 00:53:16,319
there is no algebraic reduction from

1444
00:53:16,319 --> 00:53:17,200
that shows that

1445
00:53:17,200 --> 00:53:20,319
ufc nma implies full ufcma

1446
00:53:20,319 --> 00:53:22,240
so this is sort of optimal but i don't

1447
00:53:22,240 --> 00:53:25,839
wanna an interest of time and i wanna go

1448
00:53:25,839 --> 00:53:28,079
give you details here so let me skip

1449
00:53:28,079 --> 00:53:29,359
that

1450
00:53:29,359 --> 00:53:31,839
um and let me go to the conclusions so

1451
00:53:31,839 --> 00:53:33,520
what we showed in the random oracle

1452
00:53:33,520 --> 00:53:35,280
model so if f is arbitrary

1453
00:53:35,280 --> 00:53:37,200
h is a random oracle then we showed

1454
00:53:37,200 --> 00:53:38,880
actually the semi-dispute logarithm

1455
00:53:38,880 --> 00:53:40,480
problems equivalent to one

1456
00:53:40,480 --> 00:53:42,880
you've one cma security that for

1457
00:53:42,880 --> 00:53:43,680
deterministic

1458
00:53:43,680 --> 00:53:47,040
uh dsa this is equivalent to ufc my

1459
00:53:47,040 --> 00:53:48,000
security

1460
00:53:48,000 --> 00:53:50,880
but you're not able to prove um you've

1461
00:53:50,880 --> 00:53:53,200
an mma secure you've seen my full ufc my

1462
00:53:53,200 --> 00:53:54,319
security

1463
00:53:54,319 --> 00:53:55,760
all right that's forbidden by a theorem

1464
00:53:55,760 --> 00:53:57,760
figure that i didn't show the proof of

1465
00:53:57,760 --> 00:53:59,440
and interesting so we can boil it down

1466
00:53:59,440 --> 00:54:01,119
to see me discrete log

1467
00:54:01,119 --> 00:54:02,800
but we cannot go to this the discrete

1468
00:54:02,800 --> 00:54:04,559
log and of course this is not possible

1469
00:54:04,559 --> 00:54:05,040
because

1470
00:54:05,040 --> 00:54:07,040
all these results that i gave here are

1471
00:54:07,040 --> 00:54:08,400
for arbitrary f

1472
00:54:08,400 --> 00:54:10,000
i mean here at some point you have to

1473
00:54:10,000 --> 00:54:11,440
exploit some

1474
00:54:11,440 --> 00:54:13,520
some properties of f to show that this

1475
00:54:13,520 --> 00:54:15,760
implies this no and this would be

1476
00:54:15,760 --> 00:54:17,440
would be here but here we don't know if

1477
00:54:17,440 --> 00:54:19,359
the discrete log and c minus g log are

1478
00:54:19,359 --> 00:54:21,280
equivalent

1479
00:54:21,280 --> 00:54:24,720
what we know is that by um

1480
00:54:24,720 --> 00:54:26,720
from 2005 that there is no algebraic

1481
00:54:26,720 --> 00:54:27,920
reduction that proved

1482
00:54:27,920 --> 00:54:30,720
discrete block implies youth in a new

1483
00:54:30,720 --> 00:54:32,160
anime security but in the

1484
00:54:32,160 --> 00:54:34,880
in the standard model right no random

1485
00:54:34,880 --> 00:54:36,240
orders involved

1486
00:54:36,240 --> 00:54:39,040
right what are the takeaway messages uh

1487
00:54:39,040 --> 00:54:39,520
for this

1488
00:54:39,520 --> 00:54:42,400
the first use deterministic ecdsa if you

1489
00:54:42,400 --> 00:54:43,440
can

1490
00:54:43,440 --> 00:54:45,760
right because then you get full uc may

1491
00:54:45,760 --> 00:54:46,960
security

1492
00:54:46,960 --> 00:54:48,640
but of course in some applications this

1493
00:54:48,640 --> 00:54:50,160
is not possible like

1494
00:54:50,160 --> 00:54:53,280
threshold signing might be difficult to

1495
00:54:53,280 --> 00:54:57,040
deterministically agree on on randomness

1496
00:54:57,040 --> 00:54:58,319
and of course if you want to try to

1497
00:54:58,319 --> 00:55:00,559
break the dsa or ecdsa

1498
00:55:00,559 --> 00:55:03,920
then try to exploit that no so ask

1499
00:55:03,920 --> 00:55:06,160
so we gathered two signatures on the

1500
00:55:06,160 --> 00:55:07,040
same message

1501
00:55:07,040 --> 00:55:09,440
and somehow try to exploit special

1502
00:55:09,440 --> 00:55:10,480
properties of s

1503
00:55:10,480 --> 00:55:13,760
f to break it that's the only way

1504
00:55:13,760 --> 00:55:17,040
that there is okay

1505
00:55:17,040 --> 00:55:18,720
so let's also extend to ergamal

1506
00:55:18,720 --> 00:55:20,319
signatures and

1507
00:55:20,319 --> 00:55:25,200
and to sm2 ghost and eg gtsa

1508
00:55:25,200 --> 00:55:29,119
okay um so the fourth thing i wanted to

1509
00:55:29,119 --> 00:55:29,520
say

1510
00:55:29,520 --> 00:55:32,880
is the model f using a bijective random

1511
00:55:32,880 --> 00:55:34,079
oracle

1512
00:55:34,079 --> 00:55:35,920
and i think i only have five more

1513
00:55:35,920 --> 00:55:38,240
minutes so i'll try to go through that

1514
00:55:38,240 --> 00:55:41,760
quickly skipping all the proofs um

1515
00:55:41,760 --> 00:55:45,920
all right so um in the bijective random

1516
00:55:45,920 --> 00:55:48,319
oracle model the model f

1517
00:55:48,319 --> 00:55:50,079
not as a random oracle as it's been done

1518
00:55:50,079 --> 00:55:52,000
before but a bijective

1519
00:55:52,000 --> 00:55:54,400
random oracle what does it mean so the

1520
00:55:54,400 --> 00:55:55,839
problem with modeling the conversion

1521
00:55:55,839 --> 00:55:57,760
function f as a random article as done

1522
00:55:57,760 --> 00:55:58,880
in dsa-1

1523
00:55:58,880 --> 00:56:01,440
is that f is invertible now the idea is

1524
00:56:01,440 --> 00:56:02,240
to model f

1525
00:56:02,240 --> 00:56:04,799
to be invertible and at the same time to

1526
00:56:04,799 --> 00:56:05,760
destroy

1527
00:56:05,760 --> 00:56:08,960
all algebraic structure right and we do

1528
00:56:08,960 --> 00:56:09,359
that

1529
00:56:09,359 --> 00:56:13,599
by um decomposing f into

1530
00:56:13,599 --> 00:56:16,640
phi times pi times psi

1531
00:56:16,640 --> 00:56:20,720
so phi maps g into

1532
00:56:20,720 --> 00:56:23,359
its strings zero into the l and then we

1533
00:56:23,359 --> 00:56:24,160
apply

1534
00:56:24,160 --> 00:56:27,359
a permutation here pi that

1535
00:56:27,359 --> 00:56:30,400
outputs an integer same format and then

1536
00:56:30,400 --> 00:56:31,200
implies

1537
00:56:31,200 --> 00:56:34,480
psi to get an element in zp for example

1538
00:56:34,480 --> 00:56:36,240
in ecdsa

1539
00:56:36,240 --> 00:56:39,680
the five function would be take

1540
00:56:39,680 --> 00:56:41,760
an ep curve element and then compute the

1541
00:56:41,760 --> 00:56:43,200
field to string

1542
00:56:43,200 --> 00:56:45,119
right it's a field and then computer

1543
00:56:45,119 --> 00:56:46,319
string out of it

1544
00:56:46,319 --> 00:56:49,520
of the x coordinate the pi

1545
00:56:49,520 --> 00:56:52,799
function is the bijective random oracle

1546
00:56:52,799 --> 00:56:56,000
which is well what is a budget random

1547
00:56:56,000 --> 00:56:57,440
oracle it's like a

1548
00:56:57,440 --> 00:56:59,200
random oracle but it's objective you can

1549
00:56:59,200 --> 00:57:00,880
query it on x it will give you pi

1550
00:57:00,880 --> 00:57:03,599
of x uh and you query it on y and it

1551
00:57:03,599 --> 00:57:05,440
gives you pi of minus one of i so you

1552
00:57:05,440 --> 00:57:05,920
can

1553
00:57:05,920 --> 00:57:08,000
create both directions pi and pi to the

1554
00:57:08,000 --> 00:57:10,240
minus one but otherwise

1555
00:57:10,240 --> 00:57:13,119
it acts as a perfectly random object and

1556
00:57:13,119 --> 00:57:13,920
the psi

1557
00:57:13,920 --> 00:57:17,680
is well just inputs a t and outputs an

1558
00:57:17,680 --> 00:57:18,240
integer

1559
00:57:18,240 --> 00:57:20,160
which is essentially the same as the

1560
00:57:20,160 --> 00:57:23,520
string just converts it to an integer

1561
00:57:23,520 --> 00:57:26,079
um what we can show with this modeling

1562
00:57:26,079 --> 00:57:27,119
and that was

1563
00:57:27,119 --> 00:57:30,720
again a paper from uh 2016

1564
00:57:30,720 --> 00:57:34,240
that the first of all the discrete log

1565
00:57:34,240 --> 00:57:36,640
assumption or the discrete problem is is

1566
00:57:36,640 --> 00:57:38,319
equivalent to uf

1567
00:57:38,319 --> 00:57:40,960
mma security in the random oracle model

1568
00:57:40,960 --> 00:57:43,119
in the projector freedom oracle model

1569
00:57:43,119 --> 00:57:45,599
and the ufma security is equivalent to

1570
00:57:45,599 --> 00:57:47,760
ucma security again in the budget of

1571
00:57:47,760 --> 00:57:49,359
random oracle model

1572
00:57:49,359 --> 00:57:51,599
and so that shows that the street lock

1573
00:57:51,599 --> 00:57:54,240
implies ucma security

1574
00:57:54,240 --> 00:57:57,359
and we only need division cycle division

1575
00:57:57,359 --> 00:57:59,920
resistance for the hash function h

1576
00:57:59,920 --> 00:58:02,240
which is defined here so that is a bit

1577
00:58:02,240 --> 00:58:04,160
unusual definition but it's

1578
00:58:04,160 --> 00:58:07,680
true for example if h is a random arca

1579
00:58:07,680 --> 00:58:10,799
um for random beta and beta prime

1580
00:58:10,799 --> 00:58:12,319
that are given to the adversary as

1581
00:58:12,319 --> 00:58:13,920
defined in m and m prime

1582
00:58:13,920 --> 00:58:16,720
such that hash of m times size beta is

1583
00:58:16,720 --> 00:58:18,559
hash of m prime times

1584
00:58:18,559 --> 00:58:21,440
psi theta prime whole thing model of p

1585
00:58:21,440 --> 00:58:23,280
right that's unusual but uh

1586
00:58:23,280 --> 00:58:25,839
anyway so that's what we found out and

1587
00:58:25,839 --> 00:58:27,280
the theorem says that

1588
00:58:27,280 --> 00:58:29,920
if f is decomposed is semi-injective

1589
00:58:29,920 --> 00:58:31,280
it's again some information with the

1590
00:58:31,280 --> 00:58:32,240
property

1591
00:58:32,240 --> 00:58:34,640
it's a pi is a programmable objective

1592
00:58:34,640 --> 00:58:35,760
random oracle

1593
00:58:35,760 --> 00:58:38,480
the aegis has this property of being psi

1594
00:58:38,480 --> 00:58:40,559
division resistant the group is

1595
00:58:40,559 --> 00:58:43,839
hard discrete log group then the generic

1596
00:58:43,839 --> 00:58:44,640
dsa is

1597
00:58:44,640 --> 00:58:47,760
european anime security and in

1598
00:58:47,760 --> 00:58:50,880
that assumption we can also prove that

1599
00:58:50,880 --> 00:58:52,799
genetically is a if you've seen a

1600
00:58:52,799 --> 00:58:55,119
security

1601
00:58:55,119 --> 00:58:59,359
okay psi being semi-injective is that

1602
00:58:59,359 --> 00:59:02,880
it's either two to one or it's injective

1603
00:59:02,880 --> 00:59:05,920
okay um all right

1604
00:59:05,920 --> 00:59:09,119
so i will skip the proof

1605
00:59:09,119 --> 00:59:12,640
um it essentially it's using the

1606
00:59:12,640 --> 00:59:16,240
fork lemma and rewinding um to

1607
00:59:16,240 --> 00:59:19,520
extract the discrete log um

1608
00:59:19,520 --> 00:59:22,720
well maybe the the

1609
00:59:22,720 --> 00:59:24,720
breaker the takeaway messages i want to

1610
00:59:24,720 --> 00:59:26,240
give is that

1611
00:59:26,240 --> 00:59:28,079
what we did is we saw in this in this

1612
00:59:28,079 --> 00:59:29,760
work we modeled this uh

1613
00:59:29,760 --> 00:59:33,280
conversion function where pi is a

1614
00:59:33,280 --> 00:59:36,480
bijective random oracle um i think it's

1615
00:59:36,480 --> 00:59:38,640
a bit more realistic than just modeling

1616
00:59:38,640 --> 00:59:40,720
f as a random oracle but it's possibly a

1617
00:59:40,720 --> 00:59:41,040
bit

1618
00:59:41,040 --> 00:59:43,760
too strong abstraction of f so it's not

1619
00:59:43,760 --> 00:59:44,400
really

1620
00:59:44,400 --> 00:59:46,160
i'm not entirely sure what it means in

1621
00:59:46,160 --> 00:59:47,599
practice but at least it's a step

1622
00:59:47,599 --> 00:59:48,240
towards

1623
00:59:48,240 --> 00:59:51,359
proving something about east dsa and

1624
00:59:51,359 --> 00:59:52,079
that's

1625
00:59:52,079 --> 00:59:53,920
so far as i as i know it's the best

1626
00:59:53,920 --> 00:59:56,079
known pool security guarantee for

1627
00:59:56,079 --> 00:59:59,280
full ufc my security of vcdsa

1628
00:59:59,280 --> 01:00:02,880
remember if just um just having

1629
01:00:02,880 --> 01:00:06,079
a h2 random article only gives you

1630
01:00:06,079 --> 01:00:11,040
you've one cma security of cdsa

1631
01:00:11,280 --> 01:00:14,000
okay so these are my conclusions my

1632
01:00:14,000 --> 01:00:15,359
summary so to speak

1633
01:00:15,359 --> 01:00:18,559
um so i showed you four security results

1634
01:00:18,559 --> 01:00:19,359
and here's sort of

1635
01:00:19,359 --> 01:00:20,960
some rating in terms of how good is the

1636
01:00:20,960 --> 01:00:23,440
modeling how how well does it

1637
01:00:23,440 --> 01:00:26,160
represent reality and what is the

1638
01:00:26,160 --> 01:00:28,240
quality of the security result

1639
01:00:28,240 --> 01:00:30,319
so first of all was the h and f are

1640
01:00:30,319 --> 01:00:32,640
random oracles no then we have full uc

1641
01:00:32,640 --> 01:00:34,400
mail security from discrete log

1642
01:00:34,400 --> 01:00:36,000
the modeling is pretty bad because f is

1643
01:00:36,000 --> 01:00:38,079
not a random oracle no so that doesn't

1644
01:00:38,079 --> 01:00:39,599
get any star for modeling

1645
01:00:39,599 --> 01:00:42,000
security is great because we have ufcma

1646
01:00:42,000 --> 01:00:43,359
security from the d-lock

1647
01:00:43,359 --> 01:00:46,319
but anyway the modeling is is not useful

1648
01:00:46,319 --> 01:00:48,160
again if g was a generic group

1649
01:00:48,160 --> 01:00:50,799
then we have full uc-ma security no

1650
01:00:50,799 --> 01:00:52,960
information therapy general group model

1651
01:00:52,960 --> 01:00:55,680
again i hope i convinced you that i

1652
01:00:55,680 --> 01:00:57,359
don't really like the modeling no

1653
01:00:57,359 --> 01:00:59,200
because of this non-algebraic properties

1654
01:00:59,200 --> 01:00:59,920
of f

1655
01:00:59,920 --> 01:01:01,520
but the security still would be a great

1656
01:01:01,520 --> 01:01:03,520
result but some other modeling is not

1657
01:01:03,520 --> 01:01:06,720
really not really right the third result

1658
01:01:06,720 --> 01:01:07,280
is that

1659
01:01:07,280 --> 01:01:10,319
h is a random oracle f can be arbitrary

1660
01:01:10,319 --> 01:01:12,480
then you have one cma security

1661
01:01:12,480 --> 01:01:16,319
is implied by the semi d log

1662
01:01:16,319 --> 01:01:19,119
problem again the the modeling is great

1663
01:01:19,119 --> 01:01:20,640
because the only thing that we do is the

1664
01:01:20,640 --> 01:01:22,240
model h is the random article right

1665
01:01:22,240 --> 01:01:25,119
that's pretty realistic and there's no

1666
01:01:25,119 --> 01:01:28,160
almost there's no um property if we have

1667
01:01:28,160 --> 01:01:28,960
to assume

1668
01:01:28,960 --> 01:01:30,960
of f so bonding is great but the

1669
01:01:30,960 --> 01:01:32,400
security is not as great

1670
01:01:32,400 --> 01:01:34,559
right because we only prove it from a

1671
01:01:34,559 --> 01:01:36,319
non-standard assumption and we only have

1672
01:01:36,319 --> 01:01:38,400
one cma security

1673
01:01:38,400 --> 01:01:39,760
the fourth result where i didn't give

1674
01:01:39,760 --> 01:01:41,440
you too much details is that if you

1675
01:01:41,440 --> 01:01:42,240
model

1676
01:01:42,240 --> 01:01:46,000
if you could decompose f um and the pi

1677
01:01:46,000 --> 01:01:47,920
like the inside thing is a bijective

1678
01:01:47,920 --> 01:01:49,359
random oracle that destroys all

1679
01:01:49,359 --> 01:01:50,880
algebraic structure

1680
01:01:50,880 --> 01:01:53,280
then we get ufc may security from the d

1681
01:01:53,280 --> 01:01:54,480
street lock assumption

1682
01:01:54,480 --> 01:01:56,720
again the modeling is not as good but

1683
01:01:56,720 --> 01:01:59,119
it's better than nothing i would say

1684
01:01:59,119 --> 01:02:01,760
um and the security is good because it

1685
01:02:01,760 --> 01:02:03,839
again shows full ufc mail security from

1686
01:02:03,839 --> 01:02:07,680
the g speed clock assumption

1687
01:02:07,680 --> 01:02:10,720
okay so a couple of open problems

1688
01:02:10,720 --> 01:02:13,680
um so the the second result talks about

1689
01:02:13,680 --> 01:02:14,960
generic group

1690
01:02:14,960 --> 01:02:16,880
model with non-algebraic operations and

1691
01:02:16,880 --> 01:02:18,240
i gave you my opinion that i don't

1692
01:02:18,240 --> 01:02:19,200
really like the

1693
01:02:19,200 --> 01:02:20,720
the current proofs at least not the

1694
01:02:20,720 --> 01:02:22,640
interpretations but i think

1695
01:02:22,640 --> 01:02:24,559
more people should think about that and

1696
01:02:24,559 --> 01:02:25,760
verify maybe

1697
01:02:25,760 --> 01:02:28,160
maybe i'm wrong no but uh let's see what

1698
01:02:28,160 --> 01:02:29,760
is what is the exact meaning of these

1699
01:02:29,760 --> 01:02:30,240
proofs

1700
01:02:30,240 --> 01:02:31,839
in the gen group model that involve

1701
01:02:31,839 --> 01:02:34,799
non-algebraic objects

1702
01:02:34,799 --> 01:02:37,440
um like talking about the third result

1703
01:02:37,440 --> 01:02:38,400
um

1704
01:02:38,400 --> 01:02:40,799
so this bootstrap security from the

1705
01:02:40,799 --> 01:02:42,640
hardness of the cme d-lock

1706
01:02:42,640 --> 01:02:46,160
problem um it's not really well

1707
01:02:46,160 --> 01:02:47,920
understood this problem nobody studied

1708
01:02:47,920 --> 01:02:49,760
it so far but i think it's as

1709
01:02:49,760 --> 01:02:51,440
as far as we can go and this should

1710
01:02:51,440 --> 01:02:53,039
deserve some more

1711
01:02:53,039 --> 01:02:55,280
some more uh analysis not cryptanalysis

1712
01:02:55,280 --> 01:02:56,240
but maybe we can

1713
01:02:56,240 --> 01:02:59,599
sort of prove it doesn't uh it's it's

1714
01:02:59,599 --> 01:03:01,680
not implied but this could block or

1715
01:03:01,680 --> 01:03:04,400
i don't know some more realistic

1716
01:03:04,400 --> 01:03:05,680
modeling of f would be

1717
01:03:05,680 --> 01:03:07,839
it would be great and so there are

1718
01:03:07,839 --> 01:03:10,559
several issues in terms of tightness

1719
01:03:10,559 --> 01:03:12,480
all those reductions that i gave some of

1720
01:03:12,480 --> 01:03:14,000
them are not really tight

1721
01:03:14,000 --> 01:03:17,359
and uh okay so that's the state of the

1722
01:03:17,359 --> 01:03:18,000
art of

1723
01:03:18,000 --> 01:03:21,119
generic gsa's signatures

1724
01:03:21,119 --> 01:03:24,000
um that's my last slide so i'm gonna

1725
01:03:24,000 --> 01:03:26,000
give you my conclusions

1726
01:03:26,000 --> 01:03:29,520
and my personal conclusion is that ecdsa

1727
01:03:29,520 --> 01:03:30,960
signatures are nice

1728
01:03:30,960 --> 01:03:32,480
but we don't really understand their

1729
01:03:32,480 --> 01:03:34,240
security yet there's some preliminary

1730
01:03:34,240 --> 01:03:35,039
results but

1731
01:03:35,039 --> 01:03:36,640
we don't really know if their approval

1732
01:03:36,640 --> 01:03:38,319
is secure or not so what i would

1733
01:03:38,319 --> 01:03:39,200
actually recommend

1734
01:03:39,200 --> 01:03:42,559
is use adverts dsa

1735
01:03:42,559 --> 01:03:45,839
um the csa is not

1736
01:03:45,839 --> 01:03:49,680
ecdsa instantiate with a adverse curve

1737
01:03:49,680 --> 01:03:52,000
is actually a schnoor signature together

1738
01:03:52,000 --> 01:03:53,760
with a specific adwords curse

1739
01:03:53,760 --> 01:03:55,839
plus statistic signing plus some more

1740
01:03:55,839 --> 01:03:57,760
tricks to make it more efficiency

1741
01:03:57,760 --> 01:04:01,119
make it more efficient it is actually

1742
01:04:01,119 --> 01:04:04,400
superior to ecgsa and all

1743
01:04:04,400 --> 01:04:06,480
measurable metrics so it's more simple

1744
01:04:06,480 --> 01:04:07,920
it's easier to implement it's more

1745
01:04:07,920 --> 01:04:08,960
efficient it has

1746
01:04:08,960 --> 01:04:11,680
proven security it's more versatile it's

1747
01:04:11,680 --> 01:04:12,079
like

1748
01:04:12,079 --> 01:04:16,160
it's more like really more everything um

1749
01:04:16,160 --> 01:04:17,839
schnoor was not used because it was

1750
01:04:17,839 --> 01:04:20,160
patented in the in the 90s but 20 years

1751
01:04:20,160 --> 01:04:22,079
later no uh

1752
01:04:22,079 --> 01:04:25,760
the pattern expired a long time ago so

1753
01:04:25,760 --> 01:04:27,200
that's why it's not used

1754
01:04:27,200 --> 01:04:29,920
and surprisingly like it's good to see

1755
01:04:29,920 --> 01:04:32,160
that adverse gsa is used in gls

1756
01:04:32,160 --> 01:04:35,359
ssh signal tor and a couple of

1757
01:04:35,359 --> 01:04:39,280
major major projects

1758
01:04:39,280 --> 01:04:41,039
alternatively fleet you could also use

1759
01:04:41,039 --> 01:04:43,119
bls it's full domain hash signatures of

1760
01:04:43,119 --> 01:04:44,640
verbal linear maps

1761
01:04:44,640 --> 01:04:47,680
and that's used in the version 2 of the

1762
01:04:47,680 --> 01:04:49,119
blockchain ethereum

1763
01:04:49,119 --> 01:04:52,799
of igrund and also it's used in in gea

1764
01:04:52,799 --> 01:04:54,720
and it has the advantages even more

1765
01:04:54,720 --> 01:04:57,119
versatile than adverse gsa so there are

1766
01:04:57,119 --> 01:04:59,039
some more so all these protocols

1767
01:04:59,039 --> 01:05:00,400
threshold and

1768
01:05:00,400 --> 01:05:03,440
aggregation these are much more natural

1769
01:05:03,440 --> 01:05:06,880
with bls signatures now of course

1770
01:05:06,880 --> 01:05:08,640
and i want to conclude with that also if

1771
01:05:08,640 --> 01:05:10,400
you want to have post quantum security

1772
01:05:10,400 --> 01:05:12,640
so we talked about the discrete log

1773
01:05:12,640 --> 01:05:15,280
i just use uh the lithium or any other

1774
01:05:15,280 --> 01:05:15,760
of the

1775
01:05:15,760 --> 01:05:18,880
round through pre uh post quantum

1776
01:05:18,880 --> 01:05:22,799
candidates so far they're secure and

1777
01:05:22,799 --> 01:05:24,720
they're efficient and they offer

1778
01:05:24,720 --> 01:05:27,919
post-quantum security

1779
01:05:28,079 --> 01:05:31,359
okay um i think that concludes my talk

1780
01:05:31,359 --> 01:05:33,839
and i want to say thank you for your

1781
01:05:33,839 --> 01:05:34,880
attention

1782
01:05:34,880 --> 01:05:37,359
all right thanks very much okay we'll

1783
01:05:37,359 --> 01:05:40,559
owe you the round of applause

1784
01:05:40,559 --> 01:05:44,480
uh very impressive uh nice uh overview

1785
01:05:44,480 --> 01:05:49,200
so unfortunately we are already

1786
01:05:49,200 --> 01:05:52,000
uh five six minutes into the break and

1787
01:05:52,000 --> 01:05:54,240
we have to start in a few more minutes

1788
01:05:54,240 --> 01:05:55,760
but i think you have access to there are

1789
01:05:55,760 --> 01:05:57,280
a few interesting questions in

1790
01:05:57,280 --> 01:06:00,640
both uh both uh zulip and the chad

1791
01:06:00,640 --> 01:06:02,880
it'd be helpful if you just look at them

1792
01:06:02,880 --> 01:06:04,000
and questions about

1793
01:06:04,000 --> 01:06:07,760
the a the algebraic the agm

1794
01:06:07,760 --> 01:06:11,200
and some more questions on zolip

1795
01:06:11,200 --> 01:06:14,319
so if you have a chance just you know

1796
01:06:14,319 --> 01:06:17,520
take a look and answer them all right

1797
01:06:17,520 --> 01:06:19,200
and again thanks a lot

1798
01:06:19,200 --> 01:06:22,000
for giving this talk and we are going

1799
01:06:22,000 --> 01:06:26,079
into the break

