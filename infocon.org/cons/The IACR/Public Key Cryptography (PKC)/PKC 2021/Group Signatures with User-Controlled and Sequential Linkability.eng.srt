1
00:00:02,879 --> 00:00:05,279
hello everyone my name is jesus diaz

2
00:00:05,279 --> 00:00:06,960
and i'm going to present joint work with

3
00:00:06,960 --> 00:00:09,280
daniel mann entitled

4
00:00:09,280 --> 00:00:11,599
uh group signatures with user control

5
00:00:11,599 --> 00:00:12,320
and

6
00:00:12,320 --> 00:00:15,120
sequential legality so as probably many

7
00:00:15,120 --> 00:00:15,759
of you know

8
00:00:15,759 --> 00:00:18,400
the group symptoms are very well studied

9
00:00:18,400 --> 00:00:20,240
cryptographic primitive

10
00:00:20,240 --> 00:00:22,720
by means of which a group of users can

11
00:00:22,720 --> 00:00:23,760
create

12
00:00:23,760 --> 00:00:26,800
a digital signature that does not reveal

13
00:00:26,800 --> 00:00:28,320
the identity of designer and

14
00:00:28,320 --> 00:00:31,279
can be verified by anyone that has a

15
00:00:31,279 --> 00:00:33,520
group public key

16
00:00:33,520 --> 00:00:37,440
uh there is however a central party

17
00:00:37,440 --> 00:00:41,440
that is able to extract

18
00:00:41,440 --> 00:00:44,239
given any group signature that is able

19
00:00:44,239 --> 00:00:46,160
to extract the

20
00:00:46,160 --> 00:00:49,360
um identity of its signer

21
00:00:49,360 --> 00:00:52,320
this operation is really called open or

22
00:00:52,320 --> 00:00:53,199
in other cases

23
00:00:53,199 --> 00:00:57,199
uh with a similar united

24
00:00:57,199 --> 00:01:00,800
like st however in all cases this

25
00:01:00,800 --> 00:01:03,520
operation is quite as invasive but this

26
00:01:03,520 --> 00:01:05,360
needs trust on the party the

27
00:01:05,360 --> 00:01:07,200
transparency that's that

28
00:01:07,200 --> 00:01:09,840
is able to execute it so the question

29
00:01:09,840 --> 00:01:10,799
that we make

30
00:01:10,799 --> 00:01:12,000
and the challenge that we place

31
00:01:12,000 --> 00:01:14,000
ourselves is whether we are able to get

32
00:01:14,000 --> 00:01:14,479
rid

33
00:01:14,479 --> 00:01:17,840
altogether of this uh central party

34
00:01:17,840 --> 00:01:20,479
of course we know that there are schemes

35
00:01:20,479 --> 00:01:21,119
in which

36
00:01:21,119 --> 00:01:24,400
it's possible to distribute this trust

37
00:01:24,400 --> 00:01:26,560
this distrusted party but we can't get

38
00:01:26,560 --> 00:01:27,920
rid of it

39
00:01:27,920 --> 00:01:31,119
at all completely

40
00:01:31,200 --> 00:01:35,520
so um take this

41
00:01:35,520 --> 00:01:39,040
example as a illustration

42
00:01:39,040 --> 00:01:41,759
so say that we have a group of two users

43
00:01:41,759 --> 00:01:42,079
our

44
00:01:42,079 --> 00:01:45,840
user and the user who are create

45
00:01:45,840 --> 00:01:47,680
signatures over some data and these

46
00:01:47,680 --> 00:01:50,479
editors are

47
00:01:50,560 --> 00:01:53,600
stored in a data lake

48
00:01:53,600 --> 00:01:56,159
now we want all these signatures to be

49
00:01:56,159 --> 00:01:56,960
uh

50
00:01:56,960 --> 00:01:59,360
animals not to not reveal the identity

51
00:01:59,360 --> 00:02:00,159
of designer

52
00:02:00,159 --> 00:02:03,200
uh including any trusted party that was

53
00:02:03,200 --> 00:02:04,560
involved in the creation of the group of

54
00:02:04,560 --> 00:02:06,079
the group or or something

55
00:02:06,079 --> 00:02:09,440
like that um with the exception of

56
00:02:09,440 --> 00:02:11,680
uh the cases in which users are

57
00:02:11,680 --> 00:02:12,959
themselves interested

58
00:02:12,959 --> 00:02:15,440
on revealing the links uh between that

59
00:02:15,440 --> 00:02:16,480
that uh

60
00:02:16,480 --> 00:02:18,160
so they created some sicknesses for

61
00:02:18,160 --> 00:02:20,319
instance uh the reducer may be

62
00:02:20,319 --> 00:02:22,000
interested in showing that he

63
00:02:22,000 --> 00:02:24,400
was the creator of signature one and

64
00:02:24,400 --> 00:02:25,200
singapore iii

65
00:02:25,200 --> 00:02:26,720
and the blue user may be interested in

66
00:02:26,720 --> 00:02:28,959
showing that he was interrupting

67
00:02:28,959 --> 00:02:33,200
two four and five and in that case

68
00:02:33,200 --> 00:02:35,599
any observer not only any possible

69
00:02:35,599 --> 00:02:37,360
trusted party like the group issuer but

70
00:02:37,360 --> 00:02:40,239
also any other observer

71
00:02:40,239 --> 00:02:42,239
should be able to verify these these

72
00:02:42,239 --> 00:02:44,319
proofs

73
00:02:44,319 --> 00:02:47,200
the functionality that this group seems

74
00:02:47,200 --> 00:02:48,840
variant

75
00:02:48,840 --> 00:02:50,959
uh

76
00:02:50,959 --> 00:02:53,519
provides is very similar to the useful

77
00:02:53,519 --> 00:02:54,000
one

78
00:02:54,000 --> 00:02:56,160
so there is a setup function which

79
00:02:56,160 --> 00:02:57,519
creates the group public key and the

80
00:02:57,519 --> 00:02:59,200
group security

81
00:02:59,200 --> 00:03:02,239
then there is an interactive join ecu

82
00:03:02,239 --> 00:03:04,000
protocol between the prospective member

83
00:03:04,000 --> 00:03:05,840
and the group manager by means of which

84
00:03:05,840 --> 00:03:07,280
the

85
00:03:07,280 --> 00:03:10,720
new member receives a membership

86
00:03:10,720 --> 00:03:15,200
secret key or potential then of course

87
00:03:15,200 --> 00:03:17,760
signing and refine operations as usual

88
00:03:17,760 --> 00:03:18,879
and instead of

89
00:03:18,879 --> 00:03:23,360
opening we have

90
00:03:23,360 --> 00:03:24,879
which opening which is typically

91
00:03:24,879 --> 00:03:27,360
parameterized by the group secret key

92
00:03:27,360 --> 00:03:29,599
we replace it with a link operation that

93
00:03:29,599 --> 00:03:33,440
in this case is parameterized by the

94
00:03:33,440 --> 00:03:36,720
specific member that transit but the

95
00:03:36,720 --> 00:03:38,239
secret key of the specific member that

96
00:03:38,239 --> 00:03:40,000
runs this operation

97
00:03:40,000 --> 00:03:43,040
and given a set of messages and its

98
00:03:43,040 --> 00:03:44,959
corresponding signatures it creates a

99
00:03:44,959 --> 00:03:46,799
proof uh

100
00:03:46,799 --> 00:03:48,959
showing that these signatures were

101
00:03:48,959 --> 00:03:50,799
created by the same group member

102
00:03:50,799 --> 00:03:52,400
and the very filing operation just

103
00:03:52,400 --> 00:03:54,400
verifies that

104
00:03:54,400 --> 00:03:57,120
and i emphasize that only the users can

105
00:03:57,120 --> 00:03:57,840
run link

106
00:03:57,840 --> 00:03:59,950
on their own signatures of course

107
00:03:59,950 --> 00:04:01,519
[Music]

108
00:04:01,519 --> 00:04:03,360
now the functionality is very similar to

109
00:04:03,360 --> 00:04:04,640
conventional digital

110
00:04:04,640 --> 00:04:07,040
conventional group scenario schemes but

111
00:04:07,040 --> 00:04:08,080
the modeling

112
00:04:08,080 --> 00:04:11,200
is not so similar mainly because

113
00:04:11,200 --> 00:04:14,400
traditionally in order to

114
00:04:14,400 --> 00:04:16,238
state the non-promobility and

115
00:04:16,238 --> 00:04:17,519
traceability properties of your

116
00:04:17,519 --> 00:04:18,720
signature

117
00:04:18,720 --> 00:04:21,279
we rely on the open function which we do

118
00:04:21,279 --> 00:04:22,880
not have here

119
00:04:22,880 --> 00:04:24,479
so usually in a nutshell the

120
00:04:24,479 --> 00:04:26,720
non-flammability is

121
00:04:26,720 --> 00:04:28,960
stated by saying that no signatures

122
00:04:28,960 --> 00:04:30,639
should open

123
00:04:30,639 --> 00:04:34,080
to the identity of a member who did not

124
00:04:34,080 --> 00:04:35,280
create it

125
00:04:35,280 --> 00:04:37,280
and all valid signatures the truth

126
00:04:37,280 --> 00:04:38,320
ability property

127
00:04:38,320 --> 00:04:41,680
is by saying that all

128
00:04:41,680 --> 00:04:44,960
signatures should open to

129
00:04:44,960 --> 00:04:48,160
a valid member of the group but since we

130
00:04:48,160 --> 00:04:50,160
do not have open we cannot

131
00:04:50,160 --> 00:04:52,960
phrase them like this instead what we do

132
00:04:52,960 --> 00:04:54,639
is to leverage the name approach of

133
00:04:54,639 --> 00:04:56,560
dynamic economic statistician and other

134
00:04:56,560 --> 00:05:00,080
similar group signature schemes

135
00:05:00,880 --> 00:05:05,440
and instead what we do is to accompany

136
00:05:05,440 --> 00:05:08,639
every group signature with a pseudonym

137
00:05:08,639 --> 00:05:11,680
or neem which is deterministically

138
00:05:11,680 --> 00:05:12,960
produced

139
00:05:12,960 --> 00:05:15,919
from a usage ocean scope which is chosen

140
00:05:15,919 --> 00:05:18,160
per signature

141
00:05:18,160 --> 00:05:22,000
so this name is computed from the scope

142
00:05:22,000 --> 00:05:24,160
and the user secret key of course and

143
00:05:24,160 --> 00:05:27,680
it has the property that

144
00:05:27,680 --> 00:05:30,479
if the user picks the same scope it

145
00:05:30,479 --> 00:05:33,360
always will produce the same name

146
00:05:33,360 --> 00:05:36,479
so just by looking at the

147
00:05:36,479 --> 00:05:39,759
names of a set of signatures if this set

148
00:05:39,759 --> 00:05:43,280
of signatures have the same name

149
00:05:43,280 --> 00:05:45,759
then we know we will know that they came

150
00:05:45,759 --> 00:05:46,479
from the

151
00:05:46,479 --> 00:05:48,320
same user of course they will have also

152
00:05:48,320 --> 00:05:50,240
the same scope this gives us what we

153
00:05:50,240 --> 00:05:51,520
call

154
00:05:51,520 --> 00:05:54,479
implicit user control linkability but we

155
00:05:54,479 --> 00:05:55,520
want more we want

156
00:05:55,520 --> 00:05:59,440
also to be able to

157
00:05:59,680 --> 00:06:03,360
our users to create to

158
00:06:03,360 --> 00:06:05,600
create what we call explicit user

159
00:06:05,600 --> 00:06:07,199
controlling community groups

160
00:06:07,199 --> 00:06:09,440
so this means that even though two

161
00:06:09,440 --> 00:06:10,479
signatures

162
00:06:10,479 --> 00:06:12,080
have different names and different

163
00:06:12,080 --> 00:06:14,319
scopes if they come

164
00:06:14,319 --> 00:06:16,479
from the same user then we want this

165
00:06:16,479 --> 00:06:18,400
user to be able to create a proof that

166
00:06:18,400 --> 00:06:18,880
he

167
00:06:18,880 --> 00:06:22,000
or she created those signatures and this

168
00:06:22,000 --> 00:06:22,560
is the

169
00:06:22,560 --> 00:06:26,000
explicit linkability that we

170
00:06:26,000 --> 00:06:28,240
named

171
00:06:29,440 --> 00:06:32,560
so now non-flammability and traceability

172
00:06:32,560 --> 00:06:35,840
we have to praise them and

173
00:06:35,840 --> 00:06:38,479
in a manner that captures the same

174
00:06:38,479 --> 00:06:39,840
meaning

175
00:06:39,840 --> 00:06:42,160
or similar meaning that than usual

176
00:06:42,160 --> 00:06:44,560
commercial groups here the schemes but

177
00:06:44,560 --> 00:06:47,759
instead of using the open function uh

178
00:06:47,759 --> 00:06:50,880
we use other well the other link

179
00:06:50,880 --> 00:06:52,800
uh other alternatives that we have the

180
00:06:52,800 --> 00:06:53,919
link function

181
00:06:53,919 --> 00:06:56,160
and specifically we state

182
00:06:56,160 --> 00:06:57,520
non-flammability by saying that

183
00:06:57,520 --> 00:06:59,199
sequences by different users

184
00:06:59,199 --> 00:07:02,720
cannot be linked and the traceability

185
00:07:02,720 --> 00:07:05,440
we stated by saying that all sequences

186
00:07:05,440 --> 00:07:06,479
should be

187
00:07:06,479 --> 00:07:10,479
must be associated be identified to a

188
00:07:10,479 --> 00:07:10,880
valid

189
00:07:10,880 --> 00:07:14,319
group member here identify is a

190
00:07:14,319 --> 00:07:17,440
helper function that given um

191
00:07:17,440 --> 00:07:19,360
a signature and a user secret key

192
00:07:19,360 --> 00:07:21,919
returns uh true or false so meaning that

193
00:07:21,919 --> 00:07:25,360
this group signature comes from the

194
00:07:25,360 --> 00:07:28,800
user in control of that split

195
00:07:28,800 --> 00:07:31,680
this is also this has also been used in

196
00:07:31,680 --> 00:07:33,759
in related work

197
00:07:33,759 --> 00:07:37,199
um and of course since we've support

198
00:07:37,199 --> 00:07:39,919
both implicit and explicitly capability

199
00:07:39,919 --> 00:07:41,120
we have to create variance of

200
00:07:41,120 --> 00:07:43,199
nonframeability and traceability

201
00:07:43,199 --> 00:07:46,319
for those cases

202
00:07:46,319 --> 00:07:49,919
but still the the east of the properties

203
00:07:49,919 --> 00:07:52,479
are the same

204
00:07:55,199 --> 00:07:58,240
our specific instantiation is built from

205
00:07:58,240 --> 00:08:00,000
bbs plus signatures

206
00:08:00,000 --> 00:08:01,840
for the membership credentials and these

207
00:08:01,840 --> 00:08:03,520
movies plus signatures the thing is that

208
00:08:03,520 --> 00:08:04,319
they allow

209
00:08:04,319 --> 00:08:06,400
efficiency knowledge special knowledge

210
00:08:06,400 --> 00:08:07,840
of the signature

211
00:08:07,840 --> 00:08:10,400
uh which is what we use for creating

212
00:08:10,400 --> 00:08:12,160
intel signatures

213
00:08:12,160 --> 00:08:13,840
and then we also introduced a matching

214
00:08:13,840 --> 00:08:15,599
technique that allows us to create

215
00:08:15,599 --> 00:08:16,639
efficient

216
00:08:16,639 --> 00:08:19,120
link proofs completely explicit to link

217
00:08:19,120 --> 00:08:20,479
groups

218
00:08:20,479 --> 00:08:25,280
um okay so so far so good the

219
00:08:25,280 --> 00:08:26,879
user controlling capability group search

220
00:08:26,879 --> 00:08:28,560
scheme that we present is

221
00:08:28,560 --> 00:08:32,080
efficient we model it um

222
00:08:32,080 --> 00:08:34,760
and private security

223
00:08:34,760 --> 00:08:36,080
[Music]

224
00:08:36,080 --> 00:08:39,519
but there may be cases in the real world

225
00:08:39,519 --> 00:08:40,958
in which

226
00:08:40,958 --> 00:08:43,839
this full privacy that we give to the

227
00:08:43,839 --> 00:08:45,279
users is not good so

228
00:08:45,279 --> 00:08:47,440
um in the ucl group sensor scheme the

229
00:08:47,440 --> 00:08:49,920
use of users have full control of their

230
00:08:49,920 --> 00:08:51,519
privacy meaning that

231
00:08:51,519 --> 00:08:53,990
they are the only ones who can um

232
00:08:53,990 --> 00:08:56,480
[Music]

233
00:08:56,480 --> 00:08:59,600
decide to reveal their that

234
00:08:59,600 --> 00:09:02,959
some signatures came from them

235
00:09:02,959 --> 00:09:05,440
uh since there is no opener there is no

236
00:09:05,440 --> 00:09:08,000
other entity who can do that

237
00:09:08,000 --> 00:09:10,000
and this can be good and that can be not

238
00:09:10,000 --> 00:09:11,760
good for real use cases

239
00:09:11,760 --> 00:09:13,680
uh specifically for some use cases that

240
00:09:13,680 --> 00:09:14,880
we were targeting

241
00:09:14,880 --> 00:09:19,200
we were interested in proving statements

242
00:09:19,519 --> 00:09:22,800
that gave some certainty about the

243
00:09:22,800 --> 00:09:23,360
sequence

244
00:09:23,360 --> 00:09:24,640
the order in which a sequence of

245
00:09:24,640 --> 00:09:26,959
signatures was created meaning that

246
00:09:26,959 --> 00:09:30,320
we wanted the prover to be able to show

247
00:09:30,320 --> 00:09:33,600
that he is presenting a sequence of

248
00:09:33,600 --> 00:09:34,640
signatures

249
00:09:34,640 --> 00:09:36,560
in the same order in which they were

250
00:09:36,560 --> 00:09:37,680
created originally

251
00:09:37,680 --> 00:09:39,760
without omitting or inserting signatures

252
00:09:39,760 --> 00:09:42,480
or swapping the order

253
00:09:42,480 --> 00:09:45,519
this is what we call sequence healing so

254
00:09:45,519 --> 00:09:46,160
take this

255
00:09:46,160 --> 00:09:49,839
example for illustration again

256
00:09:49,839 --> 00:09:53,519
think of an automatic driving use case

257
00:09:53,519 --> 00:09:56,160
in which we have smart vehicles that are

258
00:09:56,160 --> 00:09:58,160
sending telemetry data continuously to a

259
00:09:58,160 --> 00:10:00,480
data lake

260
00:10:00,480 --> 00:10:03,839
um and for instance look

261
00:10:03,839 --> 00:10:05,760
in this case this blue car is sending

262
00:10:05,760 --> 00:10:09,279
speed measurements

263
00:10:09,279 --> 00:10:13,600
so it sends four digital signatures

264
00:10:13,600 --> 00:10:15,839
while he is driving through a highway

265
00:10:15,839 --> 00:10:18,160
with a speed limit of 100 kilometers per

266
00:10:18,160 --> 00:10:20,320
hour

267
00:10:20,320 --> 00:10:24,160
in this specific case the driver

268
00:10:24,160 --> 00:10:26,240
respects the speed limit never goes

269
00:10:26,240 --> 00:10:27,680
beyond 100

270
00:10:27,680 --> 00:10:31,279
so if for whatever reason he needs to

271
00:10:31,279 --> 00:10:34,000
reveal that he was the originator of

272
00:10:34,000 --> 00:10:34,640
these

273
00:10:34,640 --> 00:10:37,040
signatures he will probably have no

274
00:10:37,040 --> 00:10:38,560
problem in doing so because he

275
00:10:38,560 --> 00:10:42,880
kept he he kept the limits

276
00:10:42,880 --> 00:10:44,959
but in this other case in which this red

277
00:10:44,959 --> 00:10:46,880
car at some point goes beyond the speed

278
00:10:46,880 --> 00:10:48,320
limit

279
00:10:48,320 --> 00:10:52,720
sorry um and then

280
00:10:52,720 --> 00:10:55,760
it has an accident if

281
00:10:55,760 --> 00:10:59,360
after the fact probably the

282
00:10:59,360 --> 00:11:01,839
the insurance company will ask him to

283
00:11:01,839 --> 00:11:02,640
reveal

284
00:11:02,640 --> 00:11:06,240
the to link all the information

285
00:11:06,240 --> 00:11:08,560
that was sent to this data lake

286
00:11:08,560 --> 00:11:11,040
anonymously signed

287
00:11:11,040 --> 00:11:13,279
so the red car has probably good

288
00:11:13,279 --> 00:11:14,640
motivation to hide this

289
00:11:14,640 --> 00:11:17,839
this this message and in playing ucl

290
00:11:17,839 --> 00:11:19,440
signatures he can just

291
00:11:19,440 --> 00:11:22,079
not exclude this from the set of

292
00:11:22,079 --> 00:11:23,839
signatures that he links

293
00:11:23,839 --> 00:11:26,560
and the very fire will have no way of

294
00:11:26,560 --> 00:11:28,240
detecting that

295
00:11:28,240 --> 00:11:30,320
and the driver would be interested in

296
00:11:30,320 --> 00:11:31,279
doing source

297
00:11:31,279 --> 00:11:34,000
because he overspeed it in that in that

298
00:11:34,000 --> 00:11:36,240
case

299
00:11:36,399 --> 00:11:37,600
so we want to prevent that kind of

300
00:11:37,600 --> 00:11:39,600
misbehavior

301
00:11:39,600 --> 00:11:41,200
the functionality that we support is

302
00:11:41,200 --> 00:11:42,640
very similar to the

303
00:11:42,640 --> 00:11:45,680
basic ucl case

304
00:11:45,680 --> 00:11:48,720
uh basically just the design function is

305
00:11:48,720 --> 00:11:50,079
extended with some sequencing

306
00:11:50,079 --> 00:11:52,000
information this makes this function

307
00:11:52,000 --> 00:11:52,880
stateful

308
00:11:52,880 --> 00:11:55,200
rather than stainless as before and the

309
00:11:55,200 --> 00:11:57,360
linking number five link operations now

310
00:11:57,360 --> 00:11:58,160
become

311
00:11:58,160 --> 00:12:00,160
sequencing link and verify sequential

312
00:12:00,160 --> 00:12:02,720
link uh the sets of

313
00:12:02,720 --> 00:12:04,399
signatures that are passed are now

314
00:12:04,399 --> 00:12:06,560
ordered sets rather than unordered and

315
00:12:06,560 --> 00:12:08,720
the proof carries some extra meaning

316
00:12:08,720 --> 00:12:11,200
the conveying the order in which the

317
00:12:11,200 --> 00:12:11,920
signatures

318
00:12:11,920 --> 00:12:14,639
are created

319
00:12:15,120 --> 00:12:18,000
with respect to the modeling the

320
00:12:18,000 --> 00:12:19,120
non-primability

321
00:12:19,120 --> 00:12:21,440
and flexibility properties are basically

322
00:12:21,440 --> 00:12:22,560
the same

323
00:12:22,560 --> 00:12:25,440
and for anonymity although this the

324
00:12:25,440 --> 00:12:26,160
notion is

325
00:12:26,160 --> 00:12:28,959
is very similar uh we have to account

326
00:12:28,959 --> 00:12:30,720
for more trivial wins that the adversary

327
00:12:30,720 --> 00:12:31,760
can exploit

328
00:12:31,760 --> 00:12:34,320
uh by means of whichever side you can

329
00:12:34,320 --> 00:12:36,000
exploit the ordering point and to get

330
00:12:36,000 --> 00:12:38,480
to achieve the serial needs so it's

331
00:12:38,480 --> 00:12:40,800
cumbersome but uh however the notion is

332
00:12:40,800 --> 00:12:41,120
is

333
00:12:41,120 --> 00:12:42,959
similar there are you have more details

334
00:12:42,959 --> 00:12:45,200
in the paper you are interested

335
00:12:45,200 --> 00:12:48,480
um what's interesting here is

336
00:12:48,480 --> 00:12:52,240
how to model the sequential property um

337
00:12:52,240 --> 00:12:54,000
and what we do for honest and corrupt

338
00:12:54,000 --> 00:12:56,160
users

339
00:12:56,160 --> 00:12:59,440
and what we want to to capture here is a

340
00:12:59,440 --> 00:13:02,079
security that we get that no honest then

341
00:13:02,079 --> 00:13:03,360
corrupt user will be

342
00:13:03,360 --> 00:13:05,600
will be able to swap omit or insert

343
00:13:05,600 --> 00:13:06,800
signatures

344
00:13:06,800 --> 00:13:09,680
in uh and then create a valid proof a

345
00:13:09,680 --> 00:13:10,880
valid sequence

346
00:13:10,880 --> 00:13:13,839
sequential group so this definition is

347
00:13:13,839 --> 00:13:15,040
is raised

348
00:13:15,040 --> 00:13:18,639
as a game with two phases

349
00:13:18,639 --> 00:13:22,000
yeah in the first two in the two's phase

350
00:13:22,000 --> 00:13:23,279
the adversary has to commit to a

351
00:13:23,279 --> 00:13:24,880
sequence of signatures which can be

352
00:13:24,880 --> 00:13:26,560
honest or dishonest and

353
00:13:26,560 --> 00:13:29,760
by different uh um users

354
00:13:29,760 --> 00:13:32,959
and he also has to pick a target user

355
00:13:32,959 --> 00:13:35,519
which up to this point is honest then in

356
00:13:35,519 --> 00:13:37,279
the in the fourth phase the adversary

357
00:13:37,279 --> 00:13:38,000
receives the

358
00:13:38,000 --> 00:13:40,800
the secret key of this target user and

359
00:13:40,800 --> 00:13:42,240
then he is challenged

360
00:13:42,240 --> 00:13:45,120
to create a sequence a sequential proof

361
00:13:45,120 --> 00:13:46,959
that includes at least one known as

362
00:13:46,959 --> 00:13:48,720
missing one on a signature but this

363
00:13:48,720 --> 00:13:50,720
target user

364
00:13:50,720 --> 00:13:52,639
and also any other signature that the

365
00:13:52,639 --> 00:13:54,079
adversary wants but

366
00:13:54,079 --> 00:13:55,839
as long as it was included in a

367
00:13:55,839 --> 00:13:59,040
previously committed set of signatures

368
00:13:59,040 --> 00:14:02,079
so the challenge is that the adversary

369
00:14:02,079 --> 00:14:03,279
has to create a

370
00:14:03,279 --> 00:14:05,040
valid sequential proof with these

371
00:14:05,040 --> 00:14:06,320
conditions

372
00:14:06,320 --> 00:14:10,160
uh and he wins if he does so

373
00:14:10,160 --> 00:14:13,279
um now for the

374
00:14:13,279 --> 00:14:15,600
instantiation in our case wouldn't lie

375
00:14:15,600 --> 00:14:17,600
on an append on the bulletin board

376
00:14:17,600 --> 00:14:19,360
which of course can be seen as a kind of

377
00:14:19,360 --> 00:14:20,959
trust identity

378
00:14:20,959 --> 00:14:23,199
but i want to emphasize that we only

379
00:14:23,199 --> 00:14:24,000
trust it

380
00:14:24,000 --> 00:14:26,880
to verify uh all synapses before

381
00:14:26,880 --> 00:14:28,480
appending them to the bulletin board

382
00:14:28,480 --> 00:14:31,040
and specifically this support this

383
00:14:31,040 --> 00:14:33,040
baltimore does not need and cannot

384
00:14:33,040 --> 00:14:37,040
open or link any signature uh so

385
00:14:37,040 --> 00:14:39,040
we can think of this as any kind of

386
00:14:39,040 --> 00:14:40,720
uploadability mode it's also easily

387
00:14:40,720 --> 00:14:43,120
implementable through a kind of

388
00:14:43,120 --> 00:14:45,839
decentralized blockchain or similar

389
00:14:45,839 --> 00:14:46,560
application

390
00:14:46,560 --> 00:14:50,000
or similar infrastructure

391
00:14:50,000 --> 00:14:52,320
then for the sequencing information in

392
00:14:52,320 --> 00:14:53,760
our case we

393
00:14:53,760 --> 00:14:57,199
use basically a hasting approach

394
00:14:57,199 --> 00:14:59,760
every roughly every every signature

395
00:14:59,760 --> 00:15:00,320
contains

396
00:15:00,320 --> 00:15:03,680
some random value x i the i f signature

397
00:15:03,680 --> 00:15:06,880
within x by value

398
00:15:06,880 --> 00:15:09,920
which is obtained from a prf function

399
00:15:09,920 --> 00:15:13,199
um then the sequencing information

400
00:15:13,199 --> 00:15:14,800
included in the signature not this xi

401
00:15:14,800 --> 00:15:16,000
the sequence information

402
00:15:16,000 --> 00:15:19,440
uh contains a hash of this x i value and

403
00:15:19,440 --> 00:15:20,639
also a hash that

404
00:15:20,639 --> 00:15:23,760
combines the x i value the x value of

405
00:15:23,760 --> 00:15:24,240
this

406
00:15:24,240 --> 00:15:25,680
i have signature and the one in the

407
00:15:25,680 --> 00:15:27,600
previous image so in order to

408
00:15:27,600 --> 00:15:30,800
sequentially link to signatures the user

409
00:15:30,800 --> 00:15:32,160
just has to reveal

410
00:15:32,160 --> 00:15:34,959
these two values

411
00:15:35,839 --> 00:15:39,040
now for evaluation we did some

412
00:15:39,040 --> 00:15:41,600
measurements of our implementations

413
00:15:41,600 --> 00:15:45,440
sorry um signatures and linkability

414
00:15:45,440 --> 00:15:46,800
proofs are pretty

415
00:15:46,800 --> 00:15:49,519
efficient here the underlying and in red

416
00:15:49,519 --> 00:15:50,880
letters so the

417
00:15:50,880 --> 00:15:53,040
the overhead of adding the sequential

418
00:15:53,040 --> 00:15:54,639
functionality

419
00:15:54,639 --> 00:15:57,600
and the time of every major computation

420
00:15:57,600 --> 00:15:59,040
is also quite good

421
00:15:59,040 --> 00:16:02,320
it's also worth

422
00:16:02,320 --> 00:16:05,360
noting that we made some tests for

423
00:16:05,360 --> 00:16:08,639
up to linking up to 100 signatures and

424
00:16:08,639 --> 00:16:11,440
it's still in the order of what a few

425
00:16:11,440 --> 00:16:13,360
milliseconds

426
00:16:13,360 --> 00:16:15,920
um this implementation these these

427
00:16:15,920 --> 00:16:17,120
results are based

428
00:16:17,120 --> 00:16:19,440
have been obtained through this library

429
00:16:19,440 --> 00:16:21,680
that is open sourced

430
00:16:21,680 --> 00:16:24,079
the libraries in c but has wrappers for

431
00:16:24,079 --> 00:16:26,720
python java node.js and it's also

432
00:16:26,720 --> 00:16:28,800
it does not contain also this this

433
00:16:28,800 --> 00:16:30,800
scheme contains much more

434
00:16:30,800 --> 00:16:33,600
and it's easily extendable just in case

435
00:16:33,600 --> 00:16:36,000
someone wants to replicate

436
00:16:36,000 --> 00:16:41,040
there is also a demo for for

437
00:16:43,040 --> 00:16:46,399
this for our scheme just in case someone

438
00:16:46,399 --> 00:16:46,959
wants to

439
00:16:46,959 --> 00:16:52,399
play a bit with it let me show it

440
00:16:54,000 --> 00:16:56,160
okay so this is the demo that we have

441
00:16:56,160 --> 00:16:58,160
prepared hopefully it will help

442
00:16:58,160 --> 00:17:01,600
convey the main idea of our schemes

443
00:17:01,600 --> 00:17:03,440
anyway please note that the user

444
00:17:03,440 --> 00:17:05,280
interface and user experience has not

445
00:17:05,280 --> 00:17:06,240
been tested so

446
00:17:06,240 --> 00:17:09,039
it might not be very good but it

447
00:17:09,039 --> 00:17:09,919
hopefully will help

448
00:17:09,919 --> 00:17:13,199
anyway so you can choose the mode by

449
00:17:13,199 --> 00:17:14,079
clicking this

450
00:17:14,079 --> 00:17:17,760
toggle here you can also start by adding

451
00:17:17,760 --> 00:17:19,039
members and then

452
00:17:19,039 --> 00:17:21,119
using others and so on or you may just

453
00:17:21,119 --> 00:17:22,160
want to reveal

454
00:17:22,160 --> 00:17:24,000
as the system to produce some data for

455
00:17:24,000 --> 00:17:25,760
you so that you don't have to

456
00:17:25,760 --> 00:17:29,360
create everything um

457
00:17:29,440 --> 00:17:32,799
then to create a signature big one scope

458
00:17:32,799 --> 00:17:35,200
and message that's the user you want to

459
00:17:35,200 --> 00:17:36,720
you want to create it

460
00:17:36,720 --> 00:17:38,799
and break and click sign you will see

461
00:17:38,799 --> 00:17:40,400
that and your schedule appears here to

462
00:17:40,400 --> 00:17:41,679
the right

463
00:17:41,679 --> 00:17:44,880
with the data that you specified and

464
00:17:44,880 --> 00:17:45,200
some

465
00:17:45,200 --> 00:17:47,280
visualization of the of the previous

466
00:17:47,280 --> 00:17:48,320
image

467
00:17:48,320 --> 00:17:50,400
if you want to verify any signature that

468
00:17:50,400 --> 00:17:51,760
has already been created

469
00:17:51,760 --> 00:17:54,160
say to 10 and what the one that has

470
00:17:54,160 --> 00:17:55,280
produced

471
00:17:55,280 --> 00:17:58,640
uh just click enter

472
00:17:58,640 --> 00:18:02,720
the information scope message

473
00:18:04,559 --> 00:18:08,080
choose the signature

474
00:18:08,080 --> 00:18:11,440
and and it says validity

475
00:18:11,440 --> 00:18:13,360
as it should i want to emphasize that

476
00:18:13,360 --> 00:18:14,960
this runs under the hood

477
00:18:14,960 --> 00:18:18,480
the real crypto um so

478
00:18:18,480 --> 00:18:21,520
you can also add new

479
00:18:21,520 --> 00:18:23,840
sequential proofs so make sure to link

480
00:18:23,840 --> 00:18:25,520
proofs or verify

481
00:18:25,520 --> 00:18:28,480
existing ones let's say that we will go

482
00:18:28,480 --> 00:18:30,559
slightly to the very five

483
00:18:30,559 --> 00:18:33,280
part so we have to have three uh

484
00:18:33,280 --> 00:18:34,559
sequential link groups that have been

485
00:18:34,559 --> 00:18:35,520
derived for us

486
00:18:35,520 --> 00:18:38,960
the first proof is about

487
00:18:38,960 --> 00:18:41,200
a sequence that contains first section

488
00:18:41,200 --> 00:18:42,000
one listing at

489
00:18:42,000 --> 00:18:44,720
two and then second to three so let's

490
00:18:44,720 --> 00:18:45,520
pick here

491
00:18:45,520 --> 00:18:48,559
group one and then drag signature

492
00:18:48,559 --> 00:18:51,919
one two

493
00:18:51,919 --> 00:18:54,960
and three please be patient in this part

494
00:18:54,960 --> 00:18:58,160
it may not be easy at first uh if we

495
00:18:58,160 --> 00:18:59,760
click verify this should

496
00:18:59,760 --> 00:19:02,320
work okay valid proof because it's

497
00:19:02,320 --> 00:19:04,000
actually the order that

498
00:19:04,000 --> 00:19:07,120
was used to generate this but then if we

499
00:19:07,120 --> 00:19:09,120
change the original order say for

500
00:19:09,120 --> 00:19:10,080
instance

501
00:19:10,080 --> 00:19:12,160
signature one singular two three and

502
00:19:12,160 --> 00:19:13,919
single to two

503
00:19:13,919 --> 00:19:16,000
since we are in the sequential mode this

504
00:19:16,000 --> 00:19:18,640
proof does not verify

505
00:19:18,640 --> 00:19:21,520
for that for that order uh which is good

506
00:19:21,520 --> 00:19:21,840
it's

507
00:19:21,840 --> 00:19:23,840
this is what we want okay so now let's

508
00:19:23,840 --> 00:19:26,160
go to the

509
00:19:26,160 --> 00:19:30,400
to the basic mode

510
00:19:30,640 --> 00:19:33,360
to the non-sequential mode and again

511
00:19:33,360 --> 00:19:35,120
back to the

512
00:19:35,120 --> 00:19:37,760
verification of link proofs we have the

513
00:19:37,760 --> 00:19:39,120
same sequence

514
00:19:39,120 --> 00:19:41,200
which has been completely generated for

515
00:19:41,200 --> 00:19:43,600
us for the non-sequential mode

516
00:19:43,600 --> 00:19:47,120
and then we pick signature one signature

517
00:19:47,120 --> 00:19:52,080
two and symmetry

518
00:19:52,080 --> 00:19:54,879
also proof one

519
00:19:55,600 --> 00:19:57,440
and the proof verifies correctly for

520
00:19:57,440 --> 00:19:58,640
this case but

521
00:19:58,640 --> 00:20:01,919
if now if we enter

522
00:20:01,919 --> 00:20:03,919
a wrong order since we are in the

523
00:20:03,919 --> 00:20:05,840
non-sequential node in the basic mode

524
00:20:05,840 --> 00:20:07,679
this should also be applied

525
00:20:07,679 --> 00:20:10,960
again make verifies so it

526
00:20:10,960 --> 00:20:14,000
works as it should so you can

527
00:20:14,000 --> 00:20:15,760
keep playing with it hopefully it will

528
00:20:15,760 --> 00:20:17,280
help you understand or

529
00:20:17,280 --> 00:20:18,960
[Music]

530
00:20:18,960 --> 00:20:22,080
i don't know uh get a

531
00:20:22,080 --> 00:20:25,520
better idea of how things work

532
00:20:25,520 --> 00:20:28,640
and that was the demo okay so

533
00:20:28,640 --> 00:20:31,679
just to end the presentation uh some

534
00:20:31,679 --> 00:20:34,480
notes some part of the work

535
00:20:34,480 --> 00:20:38,640
our scheme does not support

536
00:20:38,640 --> 00:20:40,559
proofs of not link signatures meaning

537
00:20:40,559 --> 00:20:42,880
that there is no way for a user to prove

538
00:20:42,880 --> 00:20:44,159
that he was not

539
00:20:44,159 --> 00:20:47,360
the creator of some signature or that he

540
00:20:47,360 --> 00:20:48,080
was not

541
00:20:48,080 --> 00:20:51,440
the creator of uh so he could

542
00:20:51,440 --> 00:20:53,280
if he created signature one and he had

543
00:20:53,280 --> 00:20:55,360
to but not created signature two he

544
00:20:55,360 --> 00:20:56,559
cannot create

545
00:20:56,559 --> 00:20:59,760
any proof so in that fact which could be

546
00:20:59,760 --> 00:21:01,760
useful for instance to build somehow

547
00:21:01,760 --> 00:21:03,440
something like blacklisting

548
00:21:03,440 --> 00:21:05,120
functionality and

549
00:21:05,120 --> 00:21:07,039
this can come in handy for real-world

550
00:21:07,039 --> 00:21:09,440
applications

551
00:21:09,440 --> 00:21:12,799
also we model security against

552
00:21:12,799 --> 00:21:15,200
initially honest but then corrupted

553
00:21:15,200 --> 00:21:17,200
users

554
00:21:17,200 --> 00:21:19,039
it also would we would also be

555
00:21:19,039 --> 00:21:20,480
interested to

556
00:21:20,480 --> 00:21:22,720
study what security can we get against

557
00:21:22,720 --> 00:21:24,559
initially corrupt users probably not

558
00:21:24,559 --> 00:21:26,159
match but

559
00:21:26,159 --> 00:21:28,720
may we may be able to get something and

560
00:21:28,720 --> 00:21:29,760
of course

561
00:21:29,760 --> 00:21:32,960
efficiency efficiency wise uh

562
00:21:32,960 --> 00:21:36,159
it would be very very interesting to uh

563
00:21:36,159 --> 00:21:38,240
include some kind of past verification

564
00:21:38,240 --> 00:21:39,520
of independence

565
00:21:39,520 --> 00:21:44,240
not not links link groups but uh

566
00:21:44,240 --> 00:21:46,960
individual signatures and that was all

567
00:21:46,960 --> 00:21:48,960
uh thank you for your attention

568
00:21:48,960 --> 00:21:51,120
if you have any questions i would will

569
00:21:51,120 --> 00:21:52,799
be much

570
00:21:52,799 --> 00:21:54,890
more than happy to answer them

571
00:21:54,890 --> 00:21:57,039
[Music]

572
00:21:57,039 --> 00:21:59,840
thank you

