1
00:00:01,520 --> 00:00:03,600
hello everyone i'm david from paderborn

2
00:00:03,600 --> 00:00:04,799
university in germany

3
00:00:04,799 --> 00:00:06,879
and today i will speak about the optimal

4
00:00:06,879 --> 00:00:10,960
tightness of verifiable random functions

5
00:00:11,120 --> 00:00:13,120
intuitively we can think of very very

6
00:00:13,120 --> 00:00:14,240
random functions

7
00:00:14,240 --> 00:00:16,160
or short vrf as a combination of

8
00:00:16,160 --> 00:00:17,760
pseudorandom functions

9
00:00:17,760 --> 00:00:20,720
and digital signatures that is a very

10
00:00:20,720 --> 00:00:22,880
vibrant function just like a prf a

11
00:00:22,880 --> 00:00:24,960
subsidiary an impede function

12
00:00:24,960 --> 00:00:27,840
however in contrast to a prf vrf when

13
00:00:27,840 --> 00:00:30,240
evaluated additionally produces a

14
00:00:30,240 --> 00:00:31,679
non-interactive proof

15
00:00:31,679 --> 00:00:33,440
that allows to publicly verify the

16
00:00:33,440 --> 00:00:35,680
correctness of the vrf output

17
00:00:35,680 --> 00:00:37,760
with respect to the input and the public

18
00:00:37,760 --> 00:00:39,120
key

19
00:00:39,120 --> 00:00:41,280
due to these properties vfs have found

20
00:00:41,280 --> 00:00:42,719
several applications

21
00:00:42,719 --> 00:00:44,800
the most prominent one probably being in

22
00:00:44,800 --> 00:00:46,399
the consensus mechanisms

23
00:00:46,399 --> 00:00:48,160
of several proof-of-stake blockchains

24
00:00:48,160 --> 00:00:51,520
like algorand dfinity or cardano

25
00:00:51,520 --> 00:00:53,360
other applications include ensuring

26
00:00:53,360 --> 00:00:55,440
privacy in key transparency systems and

27
00:00:55,440 --> 00:00:57,120
in preventing zone enumeration attacks

28
00:00:57,120 --> 00:00:58,160
in the nsx

29
00:00:58,160 --> 00:01:01,920
in the proposed nzec5 protocol

30
00:01:01,920 --> 00:01:04,080
during this talk i will first quickly

31
00:01:04,080 --> 00:01:05,760
recall the syntax and the concrete

32
00:01:05,760 --> 00:01:07,439
properties of vrfs

33
00:01:07,439 --> 00:01:09,520
then i will discuss the tightness of

34
00:01:09,520 --> 00:01:12,320
security reductions for vrfs why it is

35
00:01:12,320 --> 00:01:14,080
difficult to construct optimally tight

36
00:01:14,080 --> 00:01:15,759
reductions for vrfs

37
00:01:15,759 --> 00:01:18,080
and finally how we can address these

38
00:01:18,080 --> 00:01:19,119
difficulties

39
00:01:19,119 --> 00:01:21,600
and actually construct an optimally

40
00:01:21,600 --> 00:01:23,520
tight

41
00:01:23,520 --> 00:01:26,799
reduction for vrf

42
00:01:26,799 --> 00:01:28,560
so let us start with recalling the

43
00:01:28,560 --> 00:01:31,119
syntax and properties of vrfs

44
00:01:31,119 --> 00:01:33,360
so technically a vrf consists of three

45
00:01:33,360 --> 00:01:34,320
algorithms

46
00:01:34,320 --> 00:01:36,159
first a generation algorithm that

47
00:01:36,159 --> 00:01:38,159
produces a pair of secret key and public

48
00:01:38,159 --> 00:01:39,759
verification key

49
00:01:39,759 --> 00:01:41,759
then an evaluation algorithm that

50
00:01:41,759 --> 00:01:44,960
produces a brf output y for an input x

51
00:01:44,960 --> 00:01:46,880
just like for a prf the algorithm

52
00:01:46,880 --> 00:01:48,799
requires a secret key sk

53
00:01:48,799 --> 00:01:50,799
and the output y is supposed to be to

54
00:01:50,799 --> 00:01:51,840
the random

55
00:01:51,840 --> 00:01:54,799
however the evaluation algorithm also

56
00:01:54,799 --> 00:01:56,399
produces a non-interactive proof of

57
00:01:56,399 --> 00:01:58,000
correctness pi

58
00:01:58,000 --> 00:01:59,840
this proof can then be used with the

59
00:01:59,840 --> 00:02:01,360
verification algorithm

60
00:02:01,360 --> 00:02:03,520
to verify the correctness of y with

61
00:02:03,520 --> 00:02:05,119
respect to the input x

62
00:02:05,119 --> 00:02:08,160
and the public verification key we

63
00:02:08,160 --> 00:02:08,878
require from

64
00:02:08,878 --> 00:02:11,360
vrf that is correct meaning all

65
00:02:11,360 --> 00:02:13,440
endlessly generated vrf outputs are

66
00:02:13,440 --> 00:02:16,080
accepted by the verification algorithm

67
00:02:16,080 --> 00:02:18,239
we furthermore require unique

68
00:02:18,239 --> 00:02:19,200
probability

69
00:02:19,200 --> 00:02:21,360
from a react meaning that for every

70
00:02:21,360 --> 00:02:24,480
input x and every verification key vk

71
00:02:24,480 --> 00:02:26,879
there is a unique output y for which a

72
00:02:26,879 --> 00:02:27,840
valid proof pi

73
00:02:27,840 --> 00:02:31,040
exists note that we also require this

74
00:02:31,040 --> 00:02:33,040
for maliciously generated verification

75
00:02:33,040 --> 00:02:34,000
keys

76
00:02:34,000 --> 00:02:36,959
not only for only generated ones

77
00:02:36,959 --> 00:02:38,400
naturally we also require

78
00:02:38,400 --> 00:02:40,160
pseudorandomness from a vrf which we

79
00:02:40,160 --> 00:02:42,080
model using the following security

80
00:02:42,080 --> 00:02:42,800
experiment

81
00:02:42,800 --> 00:02:46,640
between a challenger and an adversary

82
00:02:46,879 --> 00:02:48,800
the challenger first computes a keypair

83
00:02:48,800 --> 00:02:50,160
and gives the public verification

84
00:02:50,160 --> 00:02:52,560
key to the adversary which can then make

85
00:02:52,560 --> 00:02:55,120
evaluation queries to the challenger

86
00:02:55,120 --> 00:02:57,120
at some point the adversary has to state

87
00:02:57,120 --> 00:02:59,040
a challenge input x-star for which it

88
00:02:59,040 --> 00:03:01,519
has not created an evaluation before

89
00:03:01,519 --> 00:03:03,440
the challenger answers the adversary's

90
00:03:03,440 --> 00:03:04,560
challenge input

91
00:03:04,560 --> 00:03:07,280
with either the honest evaluation or

92
00:03:07,280 --> 00:03:09,040
with the uniformly random element from

93
00:03:09,040 --> 00:03:10,400
the vf's range

94
00:03:10,400 --> 00:03:12,560
however the proof of correctness is not

95
00:03:12,560 --> 00:03:14,400
given to the adversary for the challenge

96
00:03:14,400 --> 00:03:15,920
input

97
00:03:15,920 --> 00:03:17,599
the adversary then may make further

98
00:03:17,599 --> 00:03:19,920
evaluation queries for arbitrary inputs

99
00:03:19,920 --> 00:03:20,480
of course

100
00:03:20,480 --> 00:03:24,000
except for the challenge input

101
00:03:24,000 --> 00:03:25,760
at some point the adversary has to

102
00:03:25,760 --> 00:03:27,760
submit a guess on whether it was given

103
00:03:27,760 --> 00:03:29,920
the honest evaluation of the vrf or a

104
00:03:29,920 --> 00:03:31,920
random element from the zvf's range for

105
00:03:31,920 --> 00:03:34,080
the challenge

106
00:03:34,080 --> 00:03:35,440
it's common with such security

107
00:03:35,440 --> 00:03:37,599
experiments we say that the vrf is

108
00:03:37,599 --> 00:03:38,879
pseudorandim

109
00:03:38,879 --> 00:03:40,959
if every polynomial time adverse we only

110
00:03:40,959 --> 00:03:42,400
has a negligible advantage in

111
00:03:42,400 --> 00:03:44,319
distinguishing an anonymous evaluation

112
00:03:44,319 --> 00:03:45,519
of the vrf

113
00:03:45,519 --> 00:03:47,440
from a uniformly random element from the

114
00:03:47,440 --> 00:03:50,239
rear app's range

115
00:03:52,000 --> 00:03:53,840
in terms of contribution this paper

116
00:03:53,840 --> 00:03:55,680
revisits the lower bounds on the loss of

117
00:03:55,680 --> 00:03:57,920
public key cryptography from eurocup 16

118
00:03:57,920 --> 00:03:59,200
by badat isle

119
00:03:59,200 --> 00:04:02,480
and accents them to also apply to vrfs

120
00:04:02,480 --> 00:04:05,840
furthermore it also introduces the first

121
00:04:05,840 --> 00:04:08,000
construction of a vrf that can be proven

122
00:04:08,000 --> 00:04:10,480
secure with this optimal security loss

123
00:04:10,480 --> 00:04:12,640
the construction is based on the vrf by

124
00:04:12,640 --> 00:04:14,000
yamada from crypto

125
00:04:14,000 --> 00:04:18,079
17. next we will look at

126
00:04:18,079 --> 00:04:20,000
the tightness of security reductions for

127
00:04:20,000 --> 00:04:21,680
rfs and first of all

128
00:04:21,680 --> 00:04:23,680
what tightness actually means and why we

129
00:04:23,680 --> 00:04:26,479
should care about it

130
00:04:27,120 --> 00:04:29,199
when we speak about tightness we usually

131
00:04:29,199 --> 00:04:30,720
do that in the context of complete

132
00:04:30,720 --> 00:04:31,600
security

133
00:04:31,600 --> 00:04:33,440
that is we want to choose theoretically

134
00:04:33,440 --> 00:04:34,960
sound key sizes

135
00:04:34,960 --> 00:04:36,639
such that it takes at least a certain

136
00:04:36,639 --> 00:04:39,040
amount of time to break a scheme

137
00:04:39,040 --> 00:04:40,880
using a reduction from some established

138
00:04:40,880 --> 00:04:42,160
hardness assumption

139
00:04:42,160 --> 00:04:44,400
we can choose the key sizes such that

140
00:04:44,400 --> 00:04:46,320
any adversary that is faster than what

141
00:04:46,320 --> 00:04:47,440
we aimed for

142
00:04:47,440 --> 00:04:49,040
would imply an algorithm for the

143
00:04:49,040 --> 00:04:50,720
underlying hardness assumption

144
00:04:50,720 --> 00:04:52,560
that is faster than the conjecture

145
00:04:52,560 --> 00:04:54,240
fastest possible algorithm for the

146
00:04:54,240 --> 00:04:55,040
assumption

147
00:04:55,040 --> 00:04:57,440
and in particular faster than the most

148
00:04:57,440 --> 00:05:00,240
efficient noun algorithm

149
00:05:00,240 --> 00:05:02,479
however some reductions incur in

150
00:05:02,479 --> 00:05:04,479
significant computational overhead

151
00:05:04,479 --> 00:05:06,720
or only carry over a small fraction of

152
00:05:06,720 --> 00:05:08,720
the adversary's advantage

153
00:05:08,720 --> 00:05:10,720
this means that the reduction can be of

154
00:05:10,720 --> 00:05:12,720
a better or worse quality

155
00:05:12,720 --> 00:05:14,880
we quantify this quality with a loss of

156
00:05:14,880 --> 00:05:16,800
a reduction

157
00:05:16,800 --> 00:05:19,919
this loss of a reduction is a factor l

158
00:05:19,919 --> 00:05:22,320
by which the run time of the algorithm

159
00:05:22,320 --> 00:05:24,000
for the hardness assumption that is

160
00:05:24,000 --> 00:05:25,840
implied by the reduction

161
00:05:25,840 --> 00:05:28,479
over the algorithm's success probability

162
00:05:28,479 --> 00:05:31,039
is larger than the respective

163
00:05:31,039 --> 00:05:34,400
refraction for the original adversary

164
00:05:34,400 --> 00:05:36,720
thus the loss captures how much less

165
00:05:36,720 --> 00:05:38,000
efficient the reduction

166
00:05:38,000 --> 00:05:40,400
is in breaking the hardness assumption

167
00:05:40,400 --> 00:05:42,080
compared to the efficiency of the

168
00:05:42,080 --> 00:05:42,960
adversary

169
00:05:42,960 --> 00:05:44,880
in breaking the security of the

170
00:05:44,880 --> 00:05:47,360
considered scheme

171
00:05:47,360 --> 00:05:50,400
for the key sizes that we decided on

172
00:05:50,400 --> 00:05:52,880
in this way this means that they can be

173
00:05:52,880 --> 00:05:54,400
significantly larger

174
00:05:54,400 --> 00:05:56,639
or smaller depending on the quality of

175
00:05:56,639 --> 00:05:58,080
the reduction

176
00:05:58,080 --> 00:06:00,400
thus a tight reduction allows us to use

177
00:06:00,400 --> 00:06:03,280
theoretically sound small key sizes

178
00:06:03,280 --> 00:06:05,199
and by that improves the efficiency of

179
00:06:05,199 --> 00:06:07,840
our scheme

180
00:06:08,479 --> 00:06:11,280
before we look into the loss of brfs let

181
00:06:11,280 --> 00:06:11,600
us

182
00:06:11,600 --> 00:06:13,520
first look into the loss of a closely

183
00:06:13,520 --> 00:06:14,960
related primitive

184
00:06:14,960 --> 00:06:17,840
unique signatures that is signatures

185
00:06:17,840 --> 00:06:19,680
where there only exists a unique

186
00:06:19,680 --> 00:06:23,840
valid signature for each message

187
00:06:25,280 --> 00:06:27,680
these are close related to vrfs in the

188
00:06:27,680 --> 00:06:28,400
sense

189
00:06:28,400 --> 00:06:31,039
that if only not only the vrf output y

190
00:06:31,039 --> 00:06:33,120
but also the proof pi of a vrf

191
00:06:33,120 --> 00:06:36,160
is unique then the vrf is also a unique

192
00:06:36,160 --> 00:06:37,520
signature scheme

193
00:06:37,520 --> 00:06:39,520
process transformation intensifies us to

194
00:06:39,520 --> 00:06:40,960
just consider the pair of

195
00:06:40,960 --> 00:06:44,720
vf output and proof as a signature

196
00:06:44,720 --> 00:06:46,880
indeed most vfs in the standard model

197
00:06:46,880 --> 00:06:48,639
have this property

198
00:06:48,639 --> 00:06:50,639
thus let us look into lower bounds for

199
00:06:50,639 --> 00:06:52,400
the tightness of reductions

200
00:06:52,400 --> 00:06:55,759
for unique signatures for unique

201
00:06:55,759 --> 00:06:58,160
signature scheme schemes we know that

202
00:06:58,160 --> 00:07:00,080
informally every reduction from a

203
00:07:00,080 --> 00:07:02,080
non-interactive hardness assumption

204
00:07:02,080 --> 00:07:04,080
to the unforgetability of the signature

205
00:07:04,080 --> 00:07:06,639
scheme has a loss of at least the number

206
00:07:06,639 --> 00:07:08,000
of signature queries

207
00:07:08,000 --> 00:07:12,400
of sephora which we will denote as q

208
00:07:12,400 --> 00:07:15,120
furthermore this bound is typed since

209
00:07:15,120 --> 00:07:15,440
are

210
00:07:15,440 --> 00:07:17,599
there are unique signature schemes that

211
00:07:17,599 --> 00:07:19,759
can be proven secure with such a loss

212
00:07:19,759 --> 00:07:22,720
under non-interactive assumptions the

213
00:07:22,720 --> 00:07:24,880
unique signature scheme by lucianskaia

214
00:07:24,880 --> 00:07:26,400
from crypto 2002

215
00:07:26,400 --> 00:07:29,280
is such an example

216
00:07:29,759 --> 00:07:33,120
the question now is is the situation for

217
00:07:33,120 --> 00:07:35,680
vf similar or different and if it's

218
00:07:35,680 --> 00:07:36,319
different

219
00:07:36,319 --> 00:07:39,199
how different is it

220
00:07:39,759 --> 00:07:41,759
and indeed what we find is surprising

221
00:07:41,759 --> 00:07:42,880
namely

222
00:07:42,880 --> 00:07:45,199
we find that the current bounds only

223
00:07:45,199 --> 00:07:46,560
apply to vrfs

224
00:07:46,560 --> 00:07:49,440
with re-randomizer proofs pi and not to

225
00:07:49,440 --> 00:07:50,879
all vrfs

226
00:07:50,879 --> 00:07:53,039
more precisely it only applies to vrfs

227
00:07:53,039 --> 00:07:54,160
that have a unique

228
00:07:54,160 --> 00:07:59,680
or re-randomizer proof pi

229
00:07:59,680 --> 00:08:01,520
however we are able to address this in

230
00:08:01,520 --> 00:08:02,879
the context of brefs

231
00:08:02,879 --> 00:08:04,960
that is to extend the proof by badadar

232
00:08:04,960 --> 00:08:06,800
from eurocrypt 2016

233
00:08:06,800 --> 00:08:09,360
to also apply to vrfs we won't be able

234
00:08:09,360 --> 00:08:11,039
to go into the details of the proof

235
00:08:11,039 --> 00:08:12,639
but i'd like to give the quick overview

236
00:08:12,639 --> 00:08:14,879
of the technique and give an intuition

237
00:08:14,879 --> 00:08:18,160
on why the extension works the lower

238
00:08:18,160 --> 00:08:20,160
bound is indeed slightly more general

239
00:08:20,160 --> 00:08:22,240
than just for realfs namely it is

240
00:08:22,240 --> 00:08:24,639
for verifiable unpredictable functions

241
00:08:24,639 --> 00:08:26,560
or short vrefs

242
00:08:26,560 --> 00:08:28,400
these are syntactically identical to

243
00:08:28,400 --> 00:08:31,039
vrfs but for security we require the

244
00:08:31,039 --> 00:08:32,000
adversary

245
00:08:32,000 --> 00:08:33,760
to forge an output instead of

246
00:08:33,760 --> 00:08:36,479
distinguishing ramp from randomness

247
00:08:36,479 --> 00:08:38,640
note that this forgery does not contain

248
00:08:38,640 --> 00:08:40,159
the proof of correctness but

249
00:08:40,159 --> 00:08:43,760
only the vrf output thus every secure

250
00:08:43,760 --> 00:08:44,399
vrf

251
00:08:44,399 --> 00:08:47,680
is also secure vuf but not the other way

252
00:08:47,680 --> 00:08:49,440
around

253
00:08:49,440 --> 00:08:52,480
if we now consider a security reduction

254
00:08:52,480 --> 00:08:55,200
this usually looks as follows we have a

255
00:08:55,200 --> 00:08:56,959
reduction that receives an instance of

256
00:08:56,959 --> 00:08:58,399
the hardness assumption

257
00:08:58,399 --> 00:09:00,240
simulates security experiment for the

258
00:09:00,240 --> 00:09:02,000
adversary and in the end

259
00:09:02,000 --> 00:09:04,480
uses the adversary solution to solve the

260
00:09:04,480 --> 00:09:06,800
instance of the hardness assumption

261
00:09:06,800 --> 00:09:09,360
when we want to prove lower bounds on

262
00:09:09,360 --> 00:09:11,040
the tightness of a reduction

263
00:09:11,040 --> 00:09:13,279
we we usually do that with the meter

264
00:09:13,279 --> 00:09:14,720
reduction

265
00:09:14,720 --> 00:09:17,279
technique by ground that is we build a

266
00:09:17,279 --> 00:09:18,640
meter reduction

267
00:09:18,640 --> 00:09:20,720
around the reduction that also solves

268
00:09:20,720 --> 00:09:22,560
the same hardness assumption

269
00:09:22,560 --> 00:09:25,440
however instead of using an adversary

270
00:09:25,440 --> 00:09:26,640
the meter reduction

271
00:09:26,640 --> 00:09:30,000
simulates an adversary for the reduction

272
00:09:30,000 --> 00:09:32,320
therefore in this proof it is actually

273
00:09:32,320 --> 00:09:33,279
the reduction

274
00:09:33,279 --> 00:09:35,279
that solves the instance of the hardness

275
00:09:35,279 --> 00:09:38,000
assumption not some adversary

276
00:09:38,000 --> 00:09:40,160
this way we can show that any polynomial

277
00:09:40,160 --> 00:09:41,600
time reduction

278
00:09:41,600 --> 00:09:44,000
that has a loss of a less than q would

279
00:09:44,000 --> 00:09:46,560
be able to break the hardness assumption

280
00:09:46,560 --> 00:09:50,560
without the help of an adversary

281
00:09:50,560 --> 00:09:53,320
in the meter reduction by badat eye the

282
00:09:53,320 --> 00:09:54,720
re-randomizability

283
00:09:54,720 --> 00:09:57,360
or uniqueness of the signature scheme is

284
00:09:57,360 --> 00:09:59,200
used by the meter reduction

285
00:09:59,200 --> 00:10:01,360
when it produces when it produces the

286
00:10:01,360 --> 00:10:03,519
forged signature of the simulated

287
00:10:03,519 --> 00:10:04,320
adversary

288
00:10:04,320 --> 00:10:08,160
for the reduction however for vuf

289
00:10:08,160 --> 00:10:10,480
this forgery only contains the voip

290
00:10:10,480 --> 00:10:11,519
output and

291
00:10:11,519 --> 00:10:14,079
not the proof of correctness thus the

292
00:10:14,079 --> 00:10:14,959
proof goes through

293
00:10:14,959 --> 00:10:17,519
even if the proof of correctness is not

294
00:10:17,519 --> 00:10:18,800
re-randomizable

295
00:10:18,800 --> 00:10:21,600
because the meta reduction never needs

296
00:10:21,600 --> 00:10:22,640
to give it

297
00:10:22,640 --> 00:10:25,519
to the reduction

298
00:10:26,480 --> 00:10:28,160
now that we have established the lower

299
00:10:28,160 --> 00:10:30,000
bound on the loss of vrfs

300
00:10:30,000 --> 00:10:31,839
let us consider the loss of previous

301
00:10:31,839 --> 00:10:34,399
brfs

302
00:10:34,640 --> 00:10:36,320
this table shows the loss of most

303
00:10:36,320 --> 00:10:38,560
previous brfs in the standard model

304
00:10:38,560 --> 00:10:40,160
in some cases for reasonable

305
00:10:40,160 --> 00:10:42,079
parametrizations

306
00:10:42,079 --> 00:10:44,839
unfortunately the loss in the last

307
00:10:44,839 --> 00:10:47,680
column of all these constructions

308
00:10:47,680 --> 00:10:49,600
is significantly worse than what is

309
00:10:49,600 --> 00:10:52,320
indicated by our bound

310
00:10:52,320 --> 00:10:54,880
next let us look into why there is such

311
00:10:54,880 --> 00:10:56,320
significant difference between the

312
00:10:56,320 --> 00:10:58,480
tightness of reductions for vrfs and for

313
00:10:58,480 --> 00:11:00,640
unique signatures

314
00:11:00,640 --> 00:11:02,320
for this purpose let us recall the

315
00:11:02,320 --> 00:11:04,320
uniqueness property of vrfs

316
00:11:04,320 --> 00:11:06,560
that requires that there is a unique brf

317
00:11:06,560 --> 00:11:07,440
output

318
00:11:07,440 --> 00:11:09,600
y for each combination of input and

319
00:11:09,600 --> 00:11:10,640
verification key

320
00:11:10,640 --> 00:11:13,760
for which an executive proof exists

321
00:11:13,760 --> 00:11:16,399
for the reduction this means that it

322
00:11:16,399 --> 00:11:18,720
implicitly has to commit to all vrf

323
00:11:18,720 --> 00:11:19,279
outputs

324
00:11:19,279 --> 00:11:21,120
the moment it gives the verification key

325
00:11:21,120 --> 00:11:22,640
to the adversary

326
00:11:22,640 --> 00:11:24,800
it could also not generate something

327
00:11:24,800 --> 00:11:27,200
like a lossy verification key

328
00:11:27,200 --> 00:11:29,240
that would that would allow it to

329
00:11:29,240 --> 00:11:30,399
indistinguishably

330
00:11:30,399 --> 00:11:33,040
forge vf outputs because the uniqueness

331
00:11:33,040 --> 00:11:34,880
property also has to hold

332
00:11:34,880 --> 00:11:36,720
for maliciously generated verification

333
00:11:36,720 --> 00:11:39,600
keys hence there is no room

334
00:11:39,600 --> 00:11:41,200
for the reduction to lie to the

335
00:11:41,200 --> 00:11:44,160
adversary without being caught

336
00:11:44,160 --> 00:11:47,519
in consequence this limits us to doing

337
00:11:47,519 --> 00:11:49,680
a so-called partitioning proof in order

338
00:11:49,680 --> 00:11:53,519
to prove substituted randomness of a vrf

339
00:11:53,519 --> 00:11:56,160
in such a proof the reduction randomly

340
00:11:56,160 --> 00:11:58,720
partitions the input space of the vrf in

341
00:11:58,720 --> 00:11:59,440
two

342
00:11:59,440 --> 00:12:02,639
disjoint sets a so-called controlled set

343
00:12:02,639 --> 00:12:05,600
and an uncontrolled set

344
00:12:05,600 --> 00:12:07,680
for inputs in the controlled set the

345
00:12:07,680 --> 00:12:09,600
reduction can simulate answers to the

346
00:12:09,600 --> 00:12:11,600
adversary's evaluation queries

347
00:12:11,600 --> 00:12:13,920
but it cannot extract the solution to

348
00:12:13,920 --> 00:12:15,519
the underlying hardness assumption if

349
00:12:15,519 --> 00:12:17,519
the adversary chooses the challenge

350
00:12:17,519 --> 00:12:21,600
input in it for the uncontrolled set

351
00:12:21,600 --> 00:12:24,160
it is exactly the other way around this

352
00:12:24,160 --> 00:12:25,839
means that for the reduction to be

353
00:12:25,839 --> 00:12:26,880
successful

354
00:12:26,880 --> 00:12:29,120
we need the adversary to choose all

355
00:12:29,120 --> 00:12:31,200
evaluation queries from the controlled

356
00:12:31,200 --> 00:12:31,920
set

357
00:12:31,920 --> 00:12:33,360
but a challenge query from the

358
00:12:33,360 --> 00:12:34,959
uncontrolled set

359
00:12:34,959 --> 00:12:36,800
if this is not the case the reduction

360
00:12:36,800 --> 00:12:40,079
can only abort and output a random bit

361
00:12:40,079 --> 00:12:42,880
indeed this strategy suffices to prove

362
00:12:42,880 --> 00:12:46,639
optimal titans for unique signatures

363
00:12:46,639 --> 00:12:48,480
the analysis of such a reduction in the

364
00:12:48,480 --> 00:12:49,839
computational setting

365
00:12:49,839 --> 00:12:52,639
like for signatures is straightforward

366
00:12:52,639 --> 00:12:53,839
we only need to show

367
00:12:53,839 --> 00:12:55,920
that the probability for the reduction

368
00:12:55,920 --> 00:12:58,079
to not about and for the adversary to be

369
00:12:58,079 --> 00:12:58,959
successful

370
00:12:58,959 --> 00:13:02,399
is non-negligibly large here depicted as

371
00:13:02,399 --> 00:13:05,839
the green part of the picture

372
00:13:05,839 --> 00:13:07,680
the decisional setting however like for

373
00:13:07,680 --> 00:13:09,040
example for vreps

374
00:13:09,040 --> 00:13:12,399
this becomes more difficult

375
00:13:13,519 --> 00:13:16,079
let us thus consider this visualization

376
00:13:16,079 --> 00:13:18,560
on the left side we have the probability

377
00:13:18,560 --> 00:13:20,720
that the adversary wins which we assume

378
00:13:20,720 --> 00:13:22,399
to be one half plus

379
00:13:22,399 --> 00:13:25,519
its non-negligible advantage now we

380
00:13:25,519 --> 00:13:26,959
again have the event

381
00:13:26,959 --> 00:13:29,760
that the reduction does not abort and

382
00:13:29,760 --> 00:13:32,000
obviously if the adversary wins

383
00:13:32,000 --> 00:13:34,720
and the reduction does not abort then

384
00:13:34,720 --> 00:13:37,519
the reduction is successful

385
00:13:37,519 --> 00:13:40,800
however this fraction is much too small

386
00:13:40,800 --> 00:13:42,959
to reduce to a decision assumption like

387
00:13:42,959 --> 00:13:45,040
for example ddh

388
00:13:45,040 --> 00:13:47,440
we thus also have to consider that the

389
00:13:47,440 --> 00:13:48,079
reduction

390
00:13:48,079 --> 00:13:50,800
is also correct in half of the cases

391
00:13:50,800 --> 00:13:52,480
where it aborts and just outputs a

392
00:13:52,480 --> 00:13:54,560
random bit

393
00:13:54,560 --> 00:13:56,880
unfortunately we are still not there

394
00:13:56,880 --> 00:13:58,800
because the reduction wins in less than

395
00:13:58,800 --> 00:14:00,079
half of the cases

396
00:14:00,079 --> 00:14:02,880
where it doesn't abort and what we need

397
00:14:02,880 --> 00:14:04,639
is more like this

398
00:14:04,639 --> 00:14:08,000
where the case where in the no abort

399
00:14:08,000 --> 00:14:09,199
case

400
00:14:09,199 --> 00:14:13,439
the reduction wins with much more

401
00:14:13,760 --> 00:14:16,240
showing that this holds has been rather

402
00:14:16,240 --> 00:14:17,920
cumbersome for most of the partitioning

403
00:14:17,920 --> 00:14:18,959
strategies

404
00:14:18,959 --> 00:14:21,120
with whole papers on optimizing this

405
00:14:21,120 --> 00:14:22,720
part of the proof like the run by the

406
00:14:22,720 --> 00:14:27,279
land risen part at eurocrypt 2009

407
00:14:27,920 --> 00:14:29,920
however we actually can achieve this

408
00:14:29,920 --> 00:14:31,120
optimal tightness

409
00:14:31,120 --> 00:14:33,920
and that is what we look into next for

410
00:14:33,920 --> 00:14:35,519
the intuition behind our

411
00:14:35,519 --> 00:14:37,680
technique let us slightly move the goal

412
00:14:37,680 --> 00:14:39,360
post and assume that the adverse

413
00:14:39,360 --> 00:14:40,399
reversal nice

414
00:14:40,399 --> 00:14:42,320
to choose all its queries and its

415
00:14:42,320 --> 00:14:44,160
challenge uniformly at random from the

416
00:14:44,160 --> 00:14:46,399
domain of the vrf

417
00:14:46,399 --> 00:14:48,240
if this were the case we could just

418
00:14:48,240 --> 00:14:50,480
guess the first log q plus 1 bits of the

419
00:14:50,480 --> 00:14:51,600
challenge input

420
00:14:51,600 --> 00:14:53,440
meaning the reduction would abort if the

421
00:14:53,440 --> 00:14:55,680
first log q plus 1 bits of the challenge

422
00:14:55,680 --> 00:14:57,519
do not match the guess

423
00:14:57,519 --> 00:15:00,880
or if the log q plus one bits of any

424
00:15:00,880 --> 00:15:03,440
evaluation where we do match the guess

425
00:15:03,440 --> 00:15:05,920
then proving that this strategy yields a

426
00:15:05,920 --> 00:15:07,440
loss of only eight q

427
00:15:07,440 --> 00:15:09,440
is rather straightforward and we refer

428
00:15:09,440 --> 00:15:11,920
to the paper for the prominent proof

429
00:15:11,920 --> 00:15:14,000
however it only holds in this very

430
00:15:14,000 --> 00:15:15,440
simplified scenario

431
00:15:15,440 --> 00:15:17,360
and the adversary usually won't be that

432
00:15:17,360 --> 00:15:18,480
nice

433
00:15:18,480 --> 00:15:21,519
so in order to use this strategy we have

434
00:15:21,519 --> 00:15:24,320
to use some further trick

435
00:15:24,320 --> 00:15:26,880
this trick is to pass all inputs through

436
00:15:26,880 --> 00:15:27,760
appear first

437
00:15:27,760 --> 00:15:29,759
before comparing them to the guest

438
00:15:29,759 --> 00:15:31,360
prefix

439
00:15:31,360 --> 00:15:34,240
then even if they are adversely chosen

440
00:15:34,240 --> 00:15:36,320
they will be distributed computationally

441
00:15:36,320 --> 00:15:37,920
indistinguishable from independent

442
00:15:37,920 --> 00:15:40,959
uniformly random values

443
00:15:40,959 --> 00:15:43,040
however this evaluation has to happen

444
00:15:43,040 --> 00:15:45,279
outside of the viewers of the adversary

445
00:15:45,279 --> 00:15:47,279
and has to be incorporated into proof of

446
00:15:47,279 --> 00:15:49,360
correctness

447
00:15:49,360 --> 00:15:51,600
fortunately one of yamada's vrfs from

448
00:15:51,600 --> 00:15:57,199
crypto 2017 allows us to do exactly that

449
00:15:57,839 --> 00:15:59,920
more specifically it allows us to embed

450
00:15:59,920 --> 00:16:01,920
an arbitrary nand circuit in the vrf

451
00:16:01,920 --> 00:16:04,000
such that the reduction can simulate an

452
00:16:04,000 --> 00:16:05,600
evaluation of the vrf

453
00:16:05,600 --> 00:16:07,519
if and only if the circuit evaluates to

454
00:16:07,519 --> 00:16:10,000
zero and that it can extract a solution

455
00:16:10,000 --> 00:16:12,079
to the underlying hardness assumption

456
00:16:12,079 --> 00:16:14,000
if and only if the circuit evaluates to

457
00:16:14,000 --> 00:16:17,759
one on the challenge input x star

458
00:16:17,759 --> 00:16:20,000
this embedding hides some chosen input

459
00:16:20,000 --> 00:16:22,320
bits and also the internal state

460
00:16:22,320 --> 00:16:24,079
and the output bit of the circuit from

461
00:16:24,079 --> 00:16:26,000
the adversary

462
00:16:26,000 --> 00:16:28,160
thus we can embed the evaluation of the

463
00:16:28,160 --> 00:16:29,120
prf

464
00:16:29,120 --> 00:16:31,279
and the comparison of the guess by

465
00:16:31,279 --> 00:16:33,360
setting the prf key and the guess as the

466
00:16:33,360 --> 00:16:35,199
secret input bits

467
00:16:35,199 --> 00:16:37,360
then the partitioning proof we discussed

468
00:16:37,360 --> 00:16:40,880
before works out without any flaws

469
00:16:40,880 --> 00:16:43,920
yamada's vrf is based on the qdb.hi

470
00:16:43,920 --> 00:16:44,720
assumption

471
00:16:44,720 --> 00:16:46,079
where the queue is exponential in

472
00:16:46,079 --> 00:16:48,320
circuit depth meaning we may only use

473
00:16:48,320 --> 00:16:50,160
logarithmic depth circuits

474
00:16:50,160 --> 00:16:52,800
and even then this assumption obeyed

475
00:16:52,800 --> 00:16:54,240
being non-interactive

476
00:16:54,240 --> 00:16:56,880
is still relatively strong however proof

477
00:16:56,880 --> 00:16:57,839
and key sizes

478
00:16:57,839 --> 00:16:59,759
are modest but certainly not as good as

479
00:16:59,759 --> 00:17:01,360
constructions designed for

480
00:17:01,360 --> 00:17:04,400
for efficiency nonetheless

481
00:17:04,400 --> 00:17:07,280
this construction allows us to achieve a

482
00:17:07,280 --> 00:17:08,720
loss that is at most

483
00:17:08,720 --> 00:17:11,919
8q and thus attain in up to a constant

484
00:17:11,919 --> 00:17:12,640
factor

485
00:17:12,640 --> 00:17:16,079
optimally tied reduction however there

486
00:17:16,079 --> 00:17:17,919
are still some interesting research

487
00:17:17,919 --> 00:17:19,280
questions remaining

488
00:17:19,280 --> 00:17:21,119
first of all it would be interesting to

489
00:17:21,119 --> 00:17:22,480
apply these techniques

490
00:17:22,480 --> 00:17:24,559
to prove more constructions optimally

491
00:17:24,559 --> 00:17:26,160
tightly secure

492
00:17:26,160 --> 00:17:28,720
but also whether we can strengthen the

493
00:17:28,720 --> 00:17:29,679
lower bound

494
00:17:29,679 --> 00:17:32,240
to also apply to interactive assumptions

495
00:17:32,240 --> 00:17:34,400
and larger classes of reductions

496
00:17:34,400 --> 00:17:36,240
a good starting point for this would be

497
00:17:36,240 --> 00:17:38,240
the meter reduction technique by morgan

498
00:17:38,240 --> 00:17:39,039
and pass

499
00:17:39,039 --> 00:17:41,360
for you for unique signatures from tcc

500
00:17:41,360 --> 00:17:43,760
2018

501
00:17:43,760 --> 00:17:46,000
finally achieving optimally tight

502
00:17:46,000 --> 00:17:46,960
reductions

503
00:17:46,960 --> 00:17:48,720
from weaker or maybe even standard

504
00:17:48,720 --> 00:17:51,200
assumptions would also be nice

505
00:17:51,200 --> 00:17:54,000
since our current reconstruction only

506
00:17:54,000 --> 00:17:54,799
works

507
00:17:54,799 --> 00:17:57,919
from the qdbhi assumption

508
00:17:57,919 --> 00:18:00,480
but there exists vrf constructions from

509
00:18:00,480 --> 00:18:02,320
standard assumptions like the one from

510
00:18:02,320 --> 00:18:03,520
wufensenjaga

511
00:18:03,520 --> 00:18:08,160
from tcc 2016 also runs by rosia

512
00:18:08,160 --> 00:18:12,960
or cool from 2018 and 2019.

513
00:18:12,960 --> 00:18:15,039
in conclusion we first showed that the

514
00:18:15,039 --> 00:18:16,720
lower bound on the loss of many public

515
00:18:16,720 --> 00:18:18,720
key primitives verbati from eurocrypt

516
00:18:18,720 --> 00:18:20,000
2016

517
00:18:20,000 --> 00:18:22,000
also applies to all vrfs in the standard

518
00:18:22,000 --> 00:18:24,240
model thus every reduction from a

519
00:18:24,240 --> 00:18:26,000
non-interactive complexity assumption to

520
00:18:26,000 --> 00:18:27,600
the security of the vrf

521
00:18:27,600 --> 00:18:30,880
necessarily has a loss of at least q

522
00:18:30,880 --> 00:18:33,039
we then showed that this bound is tied

523
00:18:33,039 --> 00:18:35,280
by presenting vrf with an accompanying

524
00:18:35,280 --> 00:18:37,039
partitioning proof that achieves this

525
00:18:37,039 --> 00:18:38,799
optimal loss up to a small constant

526
00:18:38,799 --> 00:18:40,000
vector

527
00:18:40,000 --> 00:18:41,760
the technique builds on homomorphically

528
00:18:41,760 --> 00:18:43,760
evaluating a prf

529
00:18:43,760 --> 00:18:45,440
and might also be applicable to more

530
00:18:45,440 --> 00:18:47,520
scenarios where this is possible

531
00:18:47,520 --> 00:18:49,200
and partitioning proofs are a suitable

532
00:18:49,200 --> 00:18:50,880
technique

533
00:18:50,880 --> 00:18:53,120
finally if you have any questions feel

534
00:18:53,120 --> 00:18:54,720
free to send me mail or contact me

535
00:18:54,720 --> 00:18:56,320
during the conference

536
00:18:56,320 --> 00:18:57,840
thank you all for your attention and

537
00:18:57,840 --> 00:19:01,439
have a nice day

