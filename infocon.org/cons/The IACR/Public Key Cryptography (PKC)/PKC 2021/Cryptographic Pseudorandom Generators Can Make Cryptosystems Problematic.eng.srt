1
00:00:01,680 --> 00:00:03,199
hello everyone

2
00:00:03,199 --> 00:00:06,080
i'm coach nida from kyushu university

3
00:00:06,080 --> 00:00:08,080
and aisd

4
00:00:08,080 --> 00:00:10,800
today i explain a research result on

5
00:00:10,800 --> 00:00:12,080
what may happen

6
00:00:12,080 --> 00:00:14,639
when we use cryptographic pseudorandom

7
00:00:14,639 --> 00:00:16,400
generators to implement

8
00:00:16,400 --> 00:00:19,840
cryptographic schemes

9
00:00:20,720 --> 00:00:23,600
cryptographic schemes are expected to

10
00:00:23,600 --> 00:00:24,000
have

11
00:00:24,000 --> 00:00:26,480
nice properties such as security and

12
00:00:26,480 --> 00:00:27,680
correctness

13
00:00:27,680 --> 00:00:30,640
and its theoretical design supposes to

14
00:00:30,640 --> 00:00:31,119
use

15
00:00:31,119 --> 00:00:34,960
true randomness but it is expensive to

16
00:00:34,960 --> 00:00:35,680
implement

17
00:00:35,680 --> 00:00:39,200
the true randomness in practice so

18
00:00:39,200 --> 00:00:42,840
the use of cryptographic prg is usually

19
00:00:42,840 --> 00:00:44,160
recommended

20
00:00:44,160 --> 00:00:47,440
and we expect that the scheme

21
00:00:47,440 --> 00:00:50,800
still has nice property when the prg is

22
00:00:50,800 --> 00:00:52,879
used

23
00:00:52,879 --> 00:00:56,800
however actually my results show that

24
00:00:56,800 --> 00:01:01,520
this picture is not true in general

25
00:01:01,520 --> 00:01:04,640
as far as i found the only result of

26
00:01:04,640 --> 00:01:05,600
such a kind

27
00:01:05,600 --> 00:01:09,280
in the literature is crypto 2011 paper

28
00:01:09,280 --> 00:01:10,400
by barack at

29
00:01:10,400 --> 00:01:14,159
all where the authors mentioned that

30
00:01:14,159 --> 00:01:17,040
the computational security of randomness

31
00:01:17,040 --> 00:01:18,080
extractors

32
00:01:18,080 --> 00:01:22,159
can be lost by using prg

33
00:01:22,159 --> 00:01:25,280
my result extends such possibility

34
00:01:25,280 --> 00:01:28,400
to the case of multiparty computation

35
00:01:28,400 --> 00:01:32,400
and public key encryption mpc

36
00:01:32,400 --> 00:01:35,840
and pke are quite fundamental

37
00:01:35,840 --> 00:01:38,560
so i expect that similar situations

38
00:01:38,560 --> 00:01:40,479
might be found more widely

39
00:01:40,479 --> 00:01:43,600
in cryptography

40
00:01:45,439 --> 00:01:49,119
we have two parts in this presentation

41
00:01:49,119 --> 00:01:54,240
first we consider the case of npc

42
00:01:54,240 --> 00:01:57,680
first i briefly explain the mpc

43
00:01:57,680 --> 00:02:00,719
itself let us suppose that

44
00:02:00,719 --> 00:02:03,040
multiple properties have their own

45
00:02:03,040 --> 00:02:04,079
inputs

46
00:02:04,079 --> 00:02:06,719
and they want to know some property for

47
00:02:06,719 --> 00:02:10,000
the whole of the party's inputs

48
00:02:10,000 --> 00:02:13,760
by using mpc we will be able to extract

49
00:02:13,760 --> 00:02:16,080
such information on the whole of the

50
00:02:16,080 --> 00:02:17,200
parties

51
00:02:17,200 --> 00:02:19,680
without knowing each party's input

52
00:02:19,680 --> 00:02:21,760
itself

53
00:02:21,760 --> 00:02:24,800
nowadays npc is not just our theoretical

54
00:02:24,800 --> 00:02:26,000
topic

55
00:02:26,000 --> 00:02:28,800
many practical applications of npc are

56
00:02:28,800 --> 00:02:31,840
also expected

57
00:02:34,319 --> 00:02:36,800
this is the last picture of two-party

58
00:02:36,800 --> 00:02:38,000
computation

59
00:02:38,000 --> 00:02:41,120
in the semi-honest model both properties

60
00:02:41,120 --> 00:02:43,040
have their inputs

61
00:02:43,040 --> 00:02:45,840
they communicate with each other and

62
00:02:45,840 --> 00:02:46,560
finally

63
00:02:46,560 --> 00:02:50,400
they derive their own outputs here we

64
00:02:50,400 --> 00:02:51,599
suppose that the first

65
00:02:51,599 --> 00:02:56,239
party p1 is corrupted by an anniversary

66
00:02:56,239 --> 00:02:58,560
and an important point for today's talk

67
00:02:58,560 --> 00:03:00,319
is that

68
00:03:00,319 --> 00:03:02,959
both parties also use their internal

69
00:03:02,959 --> 00:03:04,319
randomness

70
00:03:04,319 --> 00:03:07,120
which is usually assumed to be ideally

71
00:03:07,120 --> 00:03:09,599
random

72
00:03:10,959 --> 00:03:14,000
in order to formulate the security we

73
00:03:14,000 --> 00:03:15,599
compare this picture

74
00:03:15,599 --> 00:03:18,319
with the ideal situation for two party

75
00:03:18,319 --> 00:03:20,239
completion

76
00:03:20,239 --> 00:03:23,200
in the ideal case there is a trusted

77
00:03:23,200 --> 00:03:24,319
third party

78
00:03:24,319 --> 00:03:27,120
between the two parties who is given the

79
00:03:27,120 --> 00:03:28,400
party's inputs

80
00:03:28,400 --> 00:03:30,840
and just returns the outputs to the

81
00:03:30,840 --> 00:03:33,840
parties

82
00:03:34,159 --> 00:03:36,879
now in the real situation the crafted

83
00:03:36,879 --> 00:03:37,519
party

84
00:03:37,519 --> 00:03:41,040
p1 has some additional objects indicated

85
00:03:41,040 --> 00:03:43,200
by red circles

86
00:03:43,200 --> 00:03:45,519
these objects should be simulated in the

87
00:03:45,519 --> 00:03:47,440
security proof

88
00:03:47,440 --> 00:03:50,799
and the important point is that p1's

89
00:03:50,799 --> 00:03:51,680
randomness

90
00:03:51,680 --> 00:03:54,319
is also included in the object to be

91
00:03:54,319 --> 00:03:56,958
simulated

92
00:03:58,879 --> 00:04:02,480
this is our picture when a plg

93
00:04:02,480 --> 00:04:06,560
is used to implement p1's randomness

94
00:04:06,560 --> 00:04:09,920
it is important that now the random seed

95
00:04:09,920 --> 00:04:13,519
of the plg is included in what the

96
00:04:13,519 --> 00:04:14,080
simulator

97
00:04:14,080 --> 00:04:17,600
has to simulate in the security proof

98
00:04:17,600 --> 00:04:20,560
this is intuitively reasonable because

99
00:04:20,560 --> 00:04:21,918
when the party is

100
00:04:21,918 --> 00:04:25,040
corrupted in practice the adversary can

101
00:04:25,040 --> 00:04:27,360
view the party's device in which the

102
00:04:27,360 --> 00:04:28,000
seed is

103
00:04:28,000 --> 00:04:31,520
recorded therefore any information

104
00:04:31,520 --> 00:04:35,919
may not be leaked from the land of seed

105
00:04:37,520 --> 00:04:40,720
for the difference between the cases of

106
00:04:40,720 --> 00:04:44,000
true randomness and prg

107
00:04:44,000 --> 00:04:48,160
the main observation is that using plg

108
00:04:48,160 --> 00:04:51,199
instead of true randomness is

109
00:04:51,199 --> 00:04:53,759
seemingly small but certainly a

110
00:04:53,759 --> 00:04:55,040
modification

111
00:04:55,040 --> 00:04:57,759
of the original protocol on the other

112
00:04:57,759 --> 00:04:58,479
hand

113
00:04:58,479 --> 00:05:01,360
the semi-honest model supposes that the

114
00:05:01,360 --> 00:05:02,080
properties

115
00:05:02,080 --> 00:05:04,400
perfectly follow the original protocol

116
00:05:04,400 --> 00:05:05,759
itself

117
00:05:05,759 --> 00:05:09,759
therefore in theory it might happen that

118
00:05:09,759 --> 00:05:12,479
security of the original protocol in the

119
00:05:12,479 --> 00:05:15,039
seminalist model does not guarantee

120
00:05:15,039 --> 00:05:19,520
the security after using prg

121
00:05:20,800 --> 00:05:25,199
indeed one of the main results today is

122
00:05:25,199 --> 00:05:28,240
giving as a counter example

123
00:05:28,240 --> 00:05:32,960
a pair of a two-party protocol and a plg

124
00:05:32,960 --> 00:05:36,080
both are secure individually but it

125
00:05:36,080 --> 00:05:40,320
becomes not secure when combined

126
00:05:41,039 --> 00:05:44,560
i think that the essential reason behind

127
00:05:44,560 --> 00:05:47,440
such a counter example is the security

128
00:05:47,440 --> 00:05:48,160
notion of

129
00:05:48,160 --> 00:05:51,360
mpc where the random sheet

130
00:05:51,360 --> 00:05:54,720
is visible by the adversary

131
00:05:54,720 --> 00:05:56,960
this is a stronger situation than the

132
00:05:56,960 --> 00:05:59,440
security notion for plg

133
00:05:59,440 --> 00:06:02,319
where the distinguisher cannot view the

134
00:06:02,319 --> 00:06:03,919
london seed

135
00:06:03,919 --> 00:06:07,680
therefore it is not a contradiction that

136
00:06:07,680 --> 00:06:10,800
the security of prg does not guarantee

137
00:06:10,800 --> 00:06:11,759
the security of

138
00:06:11,759 --> 00:06:14,319
npc

139
00:06:16,800 --> 00:06:20,720
i gave two counter examples but today

140
00:06:20,720 --> 00:06:24,720
i explained about the second result only

141
00:06:24,720 --> 00:06:26,639
the protocol is chosen from the

142
00:06:26,639 --> 00:06:28,240
literature it is

143
00:06:28,240 --> 00:06:30,800
the oblivious transfer protocol by

144
00:06:30,800 --> 00:06:31,520
azeroth

145
00:06:31,520 --> 00:06:35,680
atar in 2013

146
00:06:35,680 --> 00:06:39,759
i skipped detail but the point is that

147
00:06:39,759 --> 00:06:42,960
a receiver in the ot protocol is

148
00:06:42,960 --> 00:06:44,960
supposed to randomly sample

149
00:06:44,960 --> 00:06:48,479
a group element in a certain tricky way

150
00:06:48,479 --> 00:06:51,520
to ensure the security now

151
00:06:51,520 --> 00:06:54,960
our prg is designed in a way that

152
00:06:54,960 --> 00:06:58,160
it cancels the tricky sampling and

153
00:06:58,160 --> 00:07:01,039
makes it a straightforward sampling

154
00:07:01,039 --> 00:07:02,000
therefore

155
00:07:02,000 --> 00:07:05,440
the security is lost

156
00:07:05,919 --> 00:07:07,919
we note that the computational

157
00:07:07,919 --> 00:07:10,639
assumptions for the two counter examples

158
00:07:10,639 --> 00:07:13,919
are non-standard ones one of the future

159
00:07:13,919 --> 00:07:15,120
research topics

160
00:07:15,120 --> 00:07:19,039
is to improve this point

161
00:07:20,080 --> 00:07:22,800
let me show a story to emphasize a

162
00:07:22,800 --> 00:07:24,400
practical importance

163
00:07:24,400 --> 00:07:27,840
of such a counter example

164
00:07:27,840 --> 00:07:30,880
there are a user of a cryptosystem

165
00:07:30,880 --> 00:07:33,039
a cryptographer who designs a

166
00:07:33,039 --> 00:07:34,479
cryptosystem

167
00:07:34,479 --> 00:07:36,960
and an engineer who implements the

168
00:07:36,960 --> 00:07:39,759
cryptosystem

169
00:07:39,759 --> 00:07:43,039
the engineer is honest so he properly

170
00:07:43,039 --> 00:07:43,520
used

171
00:07:43,520 --> 00:07:45,840
a cryptographic prg in the

172
00:07:45,840 --> 00:07:48,719
implementation

173
00:07:48,960 --> 00:07:52,160
but one day the user

174
00:07:52,160 --> 00:07:55,360
told the engineer to claim that

175
00:07:55,360 --> 00:07:58,720
the implemented system is not secure

176
00:07:58,720 --> 00:08:02,000
the engineer is quite surprised and

177
00:08:02,000 --> 00:08:04,479
he asked the cryptographer about the

178
00:08:04,479 --> 00:08:06,240
situation

179
00:08:06,240 --> 00:08:09,919
then the cryptographer said my protocol

180
00:08:09,919 --> 00:08:12,879
has security proof did you implement it

181
00:08:12,879 --> 00:08:15,520
correctly

182
00:08:15,520 --> 00:08:19,039
and he also said my security proof

183
00:08:19,039 --> 00:08:20,000
supports it

184
00:08:20,000 --> 00:08:23,280
using ideal randomness so that

185
00:08:23,280 --> 00:08:26,319
even using cryptographically secure plg

186
00:08:26,319 --> 00:08:28,319
is not following the protocol

187
00:08:28,319 --> 00:08:30,639
specification

188
00:08:30,639 --> 00:08:33,839
therefore you are responsible for the

189
00:08:33,839 --> 00:08:35,599
insecurity

190
00:08:35,599 --> 00:08:38,640
but of course such a claim to use

191
00:08:38,640 --> 00:08:41,760
ideal randomness in implementation is

192
00:08:41,760 --> 00:08:44,560
quite infeasible in practice

193
00:08:44,560 --> 00:08:46,720
so it's not reasonable from the

194
00:08:46,720 --> 00:08:50,160
engineer's standpoint

195
00:08:53,440 --> 00:08:56,560
in order to save the engineer i also

196
00:08:56,560 --> 00:08:58,560
gave a sufficient condition

197
00:08:58,560 --> 00:09:02,000
for a protocol under plg to guarantee

198
00:09:02,000 --> 00:09:02,880
the security

199
00:09:02,880 --> 00:09:06,160
when combined this result is

200
00:09:06,160 --> 00:09:09,040
actually not very strong so i skipped

201
00:09:09,040 --> 00:09:10,399
detail

202
00:09:10,399 --> 00:09:13,200
it is also a future research topic to

203
00:09:13,200 --> 00:09:15,519
improve such a sufficient condition for

204
00:09:15,519 --> 00:09:19,200
guaranteeing the security

205
00:09:21,120 --> 00:09:24,480
from now we move to the second topic

206
00:09:24,480 --> 00:09:28,399
the correctness for pke

207
00:09:29,120 --> 00:09:31,920
before discussing the correctness i

208
00:09:31,920 --> 00:09:34,480
start with a well-known observation

209
00:09:34,480 --> 00:09:38,080
that security of pke is preserved

210
00:09:38,080 --> 00:09:41,040
when cryptographically secure prg is

211
00:09:41,040 --> 00:09:41,839
used

212
00:09:41,839 --> 00:09:45,839
in key generation or encryption

213
00:09:45,839 --> 00:09:50,320
here we consider the indus gpa security

214
00:09:50,320 --> 00:09:53,200
this is a picture of the indo-cpa game

215
00:09:53,200 --> 00:09:54,640
between the challenger

216
00:09:54,640 --> 00:09:57,600
as the left side and the adversary as

217
00:09:57,600 --> 00:10:00,399
the right side

218
00:10:01,440 --> 00:10:05,200
in this case the essential point is that

219
00:10:05,200 --> 00:10:08,800
the plaintext to be encrypted are chosen

220
00:10:08,800 --> 00:10:11,120
by a probabilistic polynomial time

221
00:10:11,120 --> 00:10:13,920
algorithm by the adversary

222
00:10:13,920 --> 00:10:16,240
now when the randomness for key

223
00:10:16,240 --> 00:10:17,040
generation

224
00:10:17,040 --> 00:10:20,480
is replaced with a prg the whole

225
00:10:20,480 --> 00:10:21,360
situation

226
00:10:21,360 --> 00:10:24,640
surrounded by red lines can be described

227
00:10:24,640 --> 00:10:28,000
as a ppt algorithm therefore

228
00:10:28,000 --> 00:10:31,120
the security of the prg guarantees the

229
00:10:31,120 --> 00:10:34,480
security of the implemented scheme

230
00:10:34,480 --> 00:10:36,640
and the same holds for the case of

231
00:10:36,640 --> 00:10:39,279
encryption

232
00:10:41,120 --> 00:10:44,880
ok we move to the case of correctness

233
00:10:44,880 --> 00:10:47,040
i notice that the correctness notion

234
00:10:47,040 --> 00:10:49,120
here is considering

235
00:10:49,120 --> 00:10:51,680
non-zero but negligible decryption error

236
00:10:51,680 --> 00:10:52,880
probability

237
00:10:52,880 --> 00:10:55,839
if the error probability is zero then of

238
00:10:55,839 --> 00:10:56,480
course

239
00:10:56,480 --> 00:10:59,200
the use of prg doesn't compromise the

240
00:10:59,200 --> 00:11:01,839
correctness

241
00:11:01,920 --> 00:11:04,240
this is an analogous picture for the

242
00:11:04,240 --> 00:11:05,839
correctness

243
00:11:05,839 --> 00:11:07,839
the essential difference from the case

244
00:11:07,839 --> 00:11:08,880
of security

245
00:11:08,880 --> 00:11:12,399
is that now the correctness is usually

246
00:11:12,399 --> 00:11:13,120
modeled

247
00:11:13,120 --> 00:11:16,399
to satisfy for any plaintext

248
00:11:16,399 --> 00:11:19,600
where no condition for efficiency to

249
00:11:19,600 --> 00:11:21,279
sample the plaintext is

250
00:11:21,279 --> 00:11:24,880
explicitly stated

251
00:11:25,680 --> 00:11:28,800
accordingly when considering that

252
00:11:28,800 --> 00:11:31,519
the randomness for encryption is

253
00:11:31,519 --> 00:11:34,160
replaced with a plg

254
00:11:34,160 --> 00:11:37,120
now in general the whole situation

255
00:11:37,120 --> 00:11:37,920
cannot be

256
00:11:37,920 --> 00:11:42,160
modeled as a uniform ppt algorithm

257
00:11:42,160 --> 00:11:45,120
and i indeed gave a counter example in

258
00:11:45,120 --> 00:11:46,880
this situation

259
00:11:46,880 --> 00:11:48,959
i skipped the detail of the example

260
00:11:48,959 --> 00:11:50,639
today

261
00:11:50,639 --> 00:11:53,040
it is interesting that now the

262
00:11:53,040 --> 00:11:54,560
difference between

263
00:11:54,560 --> 00:11:57,600
uniform ppt algorithms and

264
00:11:57,600 --> 00:12:01,200
non-uniform ppt algorithms matters

265
00:12:01,200 --> 00:12:03,440
which would be not so obvious from the

266
00:12:03,440 --> 00:12:06,079
definition of the correctness

267
00:12:06,079 --> 00:12:10,959
i will give some explanation later

268
00:12:10,959 --> 00:12:13,519
similar thing happens when considering

269
00:12:13,519 --> 00:12:14,720
the randomness in

270
00:12:14,720 --> 00:12:19,040
key generation i also skipped the detail

271
00:12:19,040 --> 00:12:22,959
but emphasized that now even a plg

272
00:12:22,959 --> 00:12:26,000
secure against no uniform distinguishers

273
00:12:26,000 --> 00:12:28,880
is not sufficient for guaranteeing the

274
00:12:28,880 --> 00:12:31,600
correctness

275
00:12:33,360 --> 00:12:36,639
at the end of my presentation i give

276
00:12:36,639 --> 00:12:39,760
an intuitive explanation of why

277
00:12:39,760 --> 00:12:42,160
the difference between uniform and

278
00:12:42,160 --> 00:12:44,560
non-uniform algorithms

279
00:12:44,560 --> 00:12:47,920
is relevant to the case of encryption

280
00:12:47,920 --> 00:12:51,680
but is not to the case of key generation

281
00:12:51,680 --> 00:12:54,480
i show something like a logical formula

282
00:12:54,480 --> 00:12:55,920
expressing the case

283
00:12:55,920 --> 00:12:59,839
that a pke scheme is not correct

284
00:12:59,839 --> 00:13:03,120
here the data mark means that

285
00:13:03,120 --> 00:13:05,440
the following condition is satisfied

286
00:13:05,440 --> 00:13:06,959
with high probability

287
00:13:06,959 --> 00:13:09,360
when the current object is randomly

288
00:13:09,360 --> 00:13:11,760
chosen

289
00:13:14,079 --> 00:13:18,160
when a prg is applied to encryption

290
00:13:18,160 --> 00:13:20,560
this affects a part of the logical

291
00:13:20,560 --> 00:13:21,200
formula

292
00:13:21,200 --> 00:13:24,639
inside the choice of plaintext in this

293
00:13:24,639 --> 00:13:25,519
case

294
00:13:25,519 --> 00:13:29,120
we may focus on only a single plaintext

295
00:13:29,120 --> 00:13:32,480
appearing the formula and a non-uniform

296
00:13:32,480 --> 00:13:33,279
algorithm

297
00:13:33,279 --> 00:13:36,320
can have the unique target plaintext as

298
00:13:36,320 --> 00:13:38,880
a device

299
00:13:40,000 --> 00:13:43,360
on the other hand when a plg is applied

300
00:13:43,360 --> 00:13:43,680
to

301
00:13:43,680 --> 00:13:46,959
key generation this affects a part

302
00:13:46,959 --> 00:13:49,839
of the logical formula outside the

303
00:13:49,839 --> 00:13:51,760
choice of parenthesis

304
00:13:51,760 --> 00:13:54,959
in this case the choice of plaintext

305
00:13:54,959 --> 00:13:58,079
may depend on the key pairs and

306
00:13:58,079 --> 00:14:00,959
it is possible that the dependency

307
00:14:00,959 --> 00:14:02,320
cannot be described

308
00:14:02,320 --> 00:14:07,440
even by using non-uniform ppt algorithms

309
00:14:08,800 --> 00:14:11,440
this is the end of my talk thank you for

310
00:14:11,440 --> 00:14:17,040
your attention

311
00:14:17,040 --> 00:14:20,720
hello everyone again it's my mistake

312
00:14:20,720 --> 00:14:21,760
that

313
00:14:21,760 --> 00:14:25,360
my video is shorter than 20 minutes

314
00:14:25,360 --> 00:14:28,800
so i add some slides showing

315
00:14:28,800 --> 00:14:32,720
some frequently asked questions for

316
00:14:32,720 --> 00:14:36,399
my research result and also my

317
00:14:36,399 --> 00:14:40,240
answers to the questions

318
00:14:43,040 --> 00:14:46,399
the first question here is about

319
00:14:46,399 --> 00:14:49,600
whether such a counterexample for the

320
00:14:49,600 --> 00:14:52,480
case of two-party computations

321
00:14:52,480 --> 00:14:57,360
is found from the practical schemes

322
00:14:57,360 --> 00:15:00,560
actually i expect that

323
00:15:00,560 --> 00:15:04,560
the natural schemes would not have

324
00:15:04,560 --> 00:15:07,600
not caused such

325
00:15:07,600 --> 00:15:11,199
a problem but

326
00:15:11,199 --> 00:15:14,720
actually to ensure that we need

327
00:15:14,720 --> 00:15:18,639
some definition of the natural scheme

328
00:15:18,639 --> 00:15:26,399
and it would be also a futuristic topic

329
00:15:26,399 --> 00:15:29,600
the second question here is about the

330
00:15:29,600 --> 00:15:30,480
relation

331
00:15:30,480 --> 00:15:34,560
between our result regarding the

332
00:15:34,560 --> 00:15:37,920
pseudorandom generator or the classical

333
00:15:37,920 --> 00:15:38,480
result

334
00:15:38,480 --> 00:15:41,680
of canadian gold like harley b

335
00:15:41,680 --> 00:15:43,920
about the impossibility of

336
00:15:43,920 --> 00:15:46,480
implementation of random oracle by using

337
00:15:46,480 --> 00:15:47,440
the plot

338
00:15:47,440 --> 00:15:51,360
concrete hash functions actually these

339
00:15:51,360 --> 00:15:54,959
are somehow similar results

340
00:15:54,959 --> 00:15:58,880
but we have some strength

341
00:15:58,880 --> 00:16:02,079
and weakness in contrast to

342
00:16:02,079 --> 00:16:09,839
the previous episode

343
00:16:12,399 --> 00:16:15,519
the third question here is

344
00:16:15,519 --> 00:16:18,320
whether such a loss of correctness by

345
00:16:18,320 --> 00:16:18,880
using

346
00:16:18,880 --> 00:16:22,079
plg can happen for practical

347
00:16:22,079 --> 00:16:26,800
pk schemes my feeling is that

348
00:16:26,800 --> 00:16:30,240
for most of us existing pk schemes in

349
00:16:30,240 --> 00:16:31,839
the literature

350
00:16:31,839 --> 00:16:37,399
we can prove that any

351
00:16:37,399 --> 00:16:41,519
cryptographically secure ple plg

352
00:16:41,519 --> 00:16:45,360
preserves the correctness of the scheme

353
00:16:45,360 --> 00:16:48,720
but we need individual argument for

354
00:16:48,720 --> 00:16:52,880
age schemes that's my feeling

355
00:16:56,320 --> 00:16:59,839
the final question here is that

356
00:16:59,839 --> 00:17:03,120
it seems somehow natural to define the

357
00:17:03,120 --> 00:17:04,400
correctness of

358
00:17:04,400 --> 00:17:07,439
pke by

359
00:17:07,439 --> 00:17:11,199
assuming that the plaintext

360
00:17:11,199 --> 00:17:15,679
should be sampled efficiently

361
00:17:15,679 --> 00:17:19,119
by using the ppt algorithm

362
00:17:19,119 --> 00:17:22,799
i think that that would be a possible

363
00:17:22,799 --> 00:17:24,559
option

364
00:17:24,559 --> 00:17:28,160
but but it seems that

365
00:17:28,160 --> 00:17:31,600
such a definition with the condition

366
00:17:31,600 --> 00:17:33,760
of the efficient some probability of

367
00:17:33,760 --> 00:17:35,679
brain decays

368
00:17:35,679 --> 00:17:38,559
seems not a standard definition at the

369
00:17:38,559 --> 00:17:40,960
present

370
00:17:45,360 --> 00:17:50,240
that's all thank you for your attention

371
00:17:58,840 --> 00:18:01,840
again

372
00:20:03,360 --> 00:20:05,439
you

