1
00:00:00,719 --> 00:00:03,760
hi i'm ariel hamlin from northeastern

2
00:00:03,760 --> 00:00:05,040
university

3
00:00:05,040 --> 00:00:07,839
today i will be talking about two server

4
00:00:07,839 --> 00:00:09,120
distributed oram

5
00:00:09,120 --> 00:00:11,840
with sublinear computation and constant

6
00:00:11,840 --> 00:00:12,960
rounds

7
00:00:12,960 --> 00:00:15,280
this is a joint work with mayanqvaria

8
00:00:15,280 --> 00:00:17,520
from boston university

9
00:00:17,520 --> 00:00:20,720
the distributed oram model or do-ram was

10
00:00:20,720 --> 00:00:23,119
first introduced by ostrovsky and shupe

11
00:00:23,119 --> 00:00:24,800
in 1997

12
00:00:24,800 --> 00:00:27,279
and formerly defined by lou nastrovsky

13
00:00:27,279 --> 00:00:29,199
in 2013.

14
00:00:29,199 --> 00:00:31,199
it was originally introduced as a

15
00:00:31,199 --> 00:00:33,280
variant of traditional oram

16
00:00:33,280 --> 00:00:35,360
that sought to get around the lower

17
00:00:35,360 --> 00:00:38,559
bound results in the single server model

18
00:00:38,559 --> 00:00:41,040
in this setting multiple non-colluding

19
00:00:41,040 --> 00:00:42,239
servers act as the

20
00:00:42,239 --> 00:00:45,039
oram server the client interacts with

21
00:00:45,039 --> 00:00:46,160
each of them in turn

22
00:00:46,160 --> 00:00:48,160
and is able to recover records in this

23
00:00:48,160 --> 00:00:51,280
way while maintaining obliviousness

24
00:00:51,280 --> 00:00:53,520
the servers may have the same data or

25
00:00:53,520 --> 00:00:55,520
individual databases depending on the

26
00:00:55,520 --> 00:00:56,800
scheme

27
00:00:56,800 --> 00:00:58,719
there are many papers that consider the

28
00:00:58,719 --> 00:00:59,920
doram setting

29
00:00:59,920 --> 00:01:01,840
but in this talk we will specifically

30
00:01:01,840 --> 00:01:03,840
discuss the secure computation

31
00:01:03,840 --> 00:01:07,600
variant in the secure computation

32
00:01:07,600 --> 00:01:10,159
variant servers work together to emulate

33
00:01:10,159 --> 00:01:11,680
the client

34
00:01:11,680 --> 00:01:14,640
while maintaining non-collusion and

35
00:01:14,640 --> 00:01:16,240
obliviousness

36
00:01:16,240 --> 00:01:18,799
as first noted by luan ostrovsky

37
00:01:18,799 --> 00:01:20,640
multi-server do-ram schemes are

38
00:01:20,640 --> 00:01:21,360
especially

39
00:01:21,360 --> 00:01:24,479
adaptable to secure computation

40
00:01:24,479 --> 00:01:27,040
and highly useful for secure computation

41
00:01:27,040 --> 00:01:27,920
programs

42
00:01:27,920 --> 00:01:30,320
where one wishes to run a program in the

43
00:01:30,320 --> 00:01:32,720
ram model

44
00:01:32,720 --> 00:01:34,799
in the secure computation setting

45
00:01:34,799 --> 00:01:36,560
latency between the number of rounds of

46
00:01:36,560 --> 00:01:38,400
communication can be high

47
00:01:38,400 --> 00:01:40,240
which motivates the need for constant

48
00:01:40,240 --> 00:01:43,040
rounds we also wish to limit the amount

49
00:01:43,040 --> 00:01:45,119
of work the servers have to do to be

50
00:01:45,119 --> 00:01:47,119
sub-linear in the data size

51
00:01:47,119 --> 00:01:49,439
as this scales poorly for large data

52
00:01:49,439 --> 00:01:51,840
sets otherwise

53
00:01:51,840 --> 00:01:55,600
there are many schemes in this setting

54
00:01:55,600 --> 00:01:58,479
see the paper for full comparison but in

55
00:01:58,479 --> 00:01:59,680
this limited table

56
00:01:59,680 --> 00:02:02,479
we examine previous work that either

57
00:02:02,479 --> 00:02:03,119
managed

58
00:02:03,119 --> 00:02:05,680
constant rounds or sublinear local

59
00:02:05,680 --> 00:02:07,280
computation

60
00:02:07,280 --> 00:02:09,919
gordon cats and wang for example have

61
00:02:09,919 --> 00:02:11,038
constant rounds

62
00:02:11,038 --> 00:02:14,720
but linear server computation jerecchian

63
00:02:14,720 --> 00:02:16,879
way

64
00:02:16,879 --> 00:02:19,760
achieves the best overall parameters but

65
00:02:19,760 --> 00:02:20,720
does not obtain

66
00:02:20,720 --> 00:02:23,760
constant rounds in sublinear work

67
00:02:23,760 --> 00:02:25,920
we are the first work to obtain

68
00:02:25,920 --> 00:02:27,840
sublinear local computation

69
00:02:27,840 --> 00:02:31,120
and constant rounds simultaneously

70
00:02:31,120 --> 00:02:33,760
we present two different constructions

71
00:02:33,760 --> 00:02:34,239
first

72
00:02:34,239 --> 00:02:36,959
an adaptation of square root oram to the

73
00:02:36,959 --> 00:02:40,080
secure computation do-ram setting

74
00:02:40,080 --> 00:02:43,280
this obtains square root log n local

75
00:02:43,280 --> 00:02:44,480
computation

76
00:02:44,480 --> 00:02:46,640
and a second construction that extends

77
00:02:46,640 --> 00:02:48,319
the first in such a way that

78
00:02:48,319 --> 00:02:50,480
reads are no longer indistinguishable

79
00:02:50,480 --> 00:02:51,680
from rights

80
00:02:51,680 --> 00:02:54,080
to obtain a better end to the epsilon

81
00:02:54,080 --> 00:02:56,400
for any epsilon greater than zero

82
00:02:56,400 --> 00:02:59,680
local computation we do so by adapting

83
00:02:59,680 --> 00:03:00,480
techniques

84
00:03:00,480 --> 00:03:02,159
from doubly efficient private

85
00:03:02,159 --> 00:03:05,360
information retrieval

86
00:03:05,360 --> 00:03:08,159
i next we'll discuss our sublinear doram

87
00:03:08,159 --> 00:03:09,360
construction

88
00:03:09,360 --> 00:03:11,280
first by reviewing the traditional

89
00:03:11,280 --> 00:03:13,760
square root oram construction

90
00:03:13,760 --> 00:03:15,920
then discuss how we adapt it to our

91
00:03:15,920 --> 00:03:18,800
secure computation setting

92
00:03:18,800 --> 00:03:21,280
next i will explain how we extend it to

93
00:03:21,280 --> 00:03:24,400
the unlimited reads setting

94
00:03:24,400 --> 00:03:27,200
square root oram was first introduced by

95
00:03:27,200 --> 00:03:30,239
goldright and ostrovsky in 96

96
00:03:30,239 --> 00:03:32,959
and is in the standard single client

97
00:03:32,959 --> 00:03:35,040
single server model

98
00:03:35,040 --> 00:03:37,200
in their construction the server stores

99
00:03:37,200 --> 00:03:39,519
two separate data structures

100
00:03:39,519 --> 00:03:41,120
the first of which is a copy of the

101
00:03:41,120 --> 00:03:43,599
database called the store

102
00:03:43,599 --> 00:03:46,080
this is a permuted read-only data

103
00:03:46,080 --> 00:03:46,959
structure

104
00:03:46,959 --> 00:03:48,560
where the client holds the key to the

105
00:03:48,560 --> 00:03:51,040
permutation

106
00:03:51,040 --> 00:03:52,799
the second data structure is an

107
00:03:52,799 --> 00:03:55,599
updatable stash

108
00:03:55,599 --> 00:03:57,920
when the client wishes to make a read

109
00:03:57,920 --> 00:04:00,000
the server first scans the stash

110
00:04:00,000 --> 00:04:02,159
to see if the record has been previously

111
00:04:02,159 --> 00:04:04,159
read or written to

112
00:04:04,159 --> 00:04:06,000
the next step is to read a single

113
00:04:06,000 --> 00:04:08,159
location in the store

114
00:04:08,159 --> 00:04:10,400
the exact element will depend on whether

115
00:04:10,400 --> 00:04:12,480
the element is present in the stash

116
00:04:12,480 --> 00:04:15,599
in the previous step if it is the

117
00:04:15,599 --> 00:04:16,160
element

118
00:04:16,160 --> 00:04:19,279
read is a dummy record if not present in

119
00:04:19,279 --> 00:04:21,519
the stash the record is read itself from

120
00:04:21,519 --> 00:04:22,960
the store

121
00:04:22,960 --> 00:04:25,520
the invariant maintained is that each

122
00:04:25,520 --> 00:04:29,040
location in the store is only read once

123
00:04:29,040 --> 00:04:31,440
finally the element is written back to

124
00:04:31,440 --> 00:04:32,560
the stash

125
00:04:32,560 --> 00:04:35,199
and the most recent location this

126
00:04:35,199 --> 00:04:36,479
location is updated

127
00:04:36,479 --> 00:04:39,759
after every access whether it be a read

128
00:04:39,759 --> 00:04:42,880
or a write for a write

129
00:04:42,880 --> 00:04:45,440
the first two steps are similar only a

130
00:04:45,440 --> 00:04:47,040
dummy element is read

131
00:04:47,040 --> 00:04:49,600
from the stash and the element written

132
00:04:49,600 --> 00:04:51,440
to the stash in the final step

133
00:04:51,440 --> 00:04:54,080
is the input element when the stash

134
00:04:54,080 --> 00:04:55,280
becomes full

135
00:04:55,280 --> 00:04:57,600
at the end of an epoch the stash is

136
00:04:57,600 --> 00:04:58,400
reshuffled

137
00:04:58,400 --> 00:05:00,880
back into the store removing any

138
00:05:00,880 --> 00:05:03,360
duplicated elements

139
00:05:03,360 --> 00:05:06,479
each access for square root oram takes

140
00:05:06,479 --> 00:05:09,120
square root of the database size and is

141
00:05:09,120 --> 00:05:10,800
constant rounds

142
00:05:10,800 --> 00:05:12,720
this is a good starting point for our

143
00:05:12,720 --> 00:05:14,639
own scheme but there are two main

144
00:05:14,639 --> 00:05:15,919
problems that prevent

145
00:05:15,919 --> 00:05:19,039
a generic adaptation using a standard

146
00:05:19,039 --> 00:05:21,840
secure computation compiler

147
00:05:21,840 --> 00:05:24,000
the first is supporting the reshuffling

148
00:05:24,000 --> 00:05:26,000
at the end of an epoch in constant

149
00:05:26,000 --> 00:05:27,280
rounds

150
00:05:27,280 --> 00:05:30,000
this is often done using oblivious

151
00:05:30,000 --> 00:05:30,960
sorting

152
00:05:30,960 --> 00:05:33,360
and the only known secure computation

153
00:05:33,360 --> 00:05:35,600
variants of oblivious sort

154
00:05:35,600 --> 00:05:39,039
are not constant round the second

155
00:05:39,039 --> 00:05:41,039
is representing the permutation of the

156
00:05:41,039 --> 00:05:43,120
store in a compact way

157
00:05:43,120 --> 00:05:45,440
when the client is emulated by the two

158
00:05:45,440 --> 00:05:46,720
servers

159
00:05:46,720 --> 00:05:48,320
these are the two main issues that we

160
00:05:48,320 --> 00:05:50,080
will focus on addressing

161
00:05:50,080 --> 00:05:53,120
during our construction

162
00:05:53,120 --> 00:05:54,880
i will now introduce our first

163
00:05:54,880 --> 00:05:56,639
construction that obtains

164
00:05:56,639 --> 00:05:58,639
sub-linear server work and constant

165
00:05:58,639 --> 00:06:00,080
rounds

166
00:06:00,080 --> 00:06:02,560
as with traditional square root o-ram we

167
00:06:02,560 --> 00:06:04,400
store the data in a permuted

168
00:06:04,400 --> 00:06:07,840
store only the data is additively secret

169
00:06:07,840 --> 00:06:10,240
shared between the two servers

170
00:06:10,240 --> 00:06:12,160
each of them store the data under the

171
00:06:12,160 --> 00:06:13,680
same permutation

172
00:06:13,680 --> 00:06:16,000
and have a secret shared copy of the

173
00:06:16,000 --> 00:06:18,080
permutation key

174
00:06:18,080 --> 00:06:21,360
we also store the stash as a secret

175
00:06:21,360 --> 00:06:22,639
sharing

176
00:06:22,639 --> 00:06:25,280
in practice the stash is instantiated

177
00:06:25,280 --> 00:06:28,319
with a linear doram with constant rounds

178
00:06:28,319 --> 00:06:31,759
specifically flowram by dorner at all

179
00:06:31,759 --> 00:06:34,479
because the stash is sublinear in the

180
00:06:34,479 --> 00:06:36,240
overall database size

181
00:06:36,240 --> 00:06:39,759
the linearity of our stash doram scheme

182
00:06:39,759 --> 00:06:43,280
does not affect the overall sublinearity

183
00:06:43,280 --> 00:06:47,039
of our doram construction

184
00:06:47,520 --> 00:06:51,039
when a read is performed the operation

185
00:06:51,039 --> 00:06:53,520
and the index to be read are additively

186
00:06:53,520 --> 00:06:56,639
secret shared among the two servers

187
00:06:56,639 --> 00:06:58,880
operations then proceed as with

188
00:06:58,880 --> 00:07:01,120
traditional square root orim

189
00:07:01,120 --> 00:07:03,039
first by checking that the element is

190
00:07:03,039 --> 00:07:05,120
not in the stash

191
00:07:05,120 --> 00:07:07,360
the next step is then to read an element

192
00:07:07,360 --> 00:07:09,039
from the store

193
00:07:09,039 --> 00:07:10,639
this is where we deviate from the

194
00:07:10,639 --> 00:07:12,400
original square root oram

195
00:07:12,400 --> 00:07:14,479
and solve our first problem how to

196
00:07:14,479 --> 00:07:15,599
represent the

197
00:07:15,599 --> 00:07:18,160
represent the permutation of of the

198
00:07:18,160 --> 00:07:19,520
store

199
00:07:19,520 --> 00:07:22,080
we do this by leveraging a cryptographic

200
00:07:22,080 --> 00:07:22,720
primitive

201
00:07:22,720 --> 00:07:26,080
called oblivious pseudorandom functions

202
00:07:26,080 --> 00:07:29,280
as a primitive oprfs mean

203
00:07:29,280 --> 00:07:31,599
that each server holds a share of the

204
00:07:31,599 --> 00:07:32,639
prf key

205
00:07:32,639 --> 00:07:36,000
and the input they jointly evaluate the

206
00:07:36,000 --> 00:07:36,880
prf

207
00:07:36,880 --> 00:07:38,720
while not learning anything about the

208
00:07:38,720 --> 00:07:40,960
other server's input

209
00:07:40,960 --> 00:07:43,360
at the end of the protocol each server

210
00:07:43,360 --> 00:07:44,000
learns the

211
00:07:44,000 --> 00:07:47,440
output of the prf it is this output that

212
00:07:47,440 --> 00:07:49,039
represents the location

213
00:07:49,039 --> 00:07:51,759
that each server looks for the element

214
00:07:51,759 --> 00:07:53,199
being searched for

215
00:07:53,199 --> 00:07:56,479
whether it be a dummy or index i

216
00:07:56,479 --> 00:08:00,240
in the store in practice we sort the prf

217
00:08:00,240 --> 00:08:02,039
outputs for each element

218
00:08:02,039 --> 00:08:03,440
lexiographically

219
00:08:03,440 --> 00:08:05,599
and then do a binary search over those

220
00:08:05,599 --> 00:08:08,000
tags to find elements

221
00:08:08,000 --> 00:08:11,039
finally once an element is found

222
00:08:11,039 --> 00:08:13,360
in the store we write it back to the

223
00:08:13,360 --> 00:08:15,840
stash

224
00:08:16,160 --> 00:08:18,960
for the right the process is identical

225
00:08:18,960 --> 00:08:20,000
until this third

226
00:08:20,000 --> 00:08:22,400
step and this is where we solve the

227
00:08:22,400 --> 00:08:25,599
reshuffling and constant rounds problem

228
00:08:25,599 --> 00:08:27,840
when we go to write the element that is

229
00:08:27,840 --> 00:08:29,599
already in the stash

230
00:08:29,599 --> 00:08:31,919
instead of writing to the next location

231
00:08:31,919 --> 00:08:33,200
in the stash

232
00:08:33,200 --> 00:08:36,159
as in traditional square root oram we

233
00:08:36,159 --> 00:08:36,799
instead

234
00:08:36,799 --> 00:08:39,760
update the element already in the stash

235
00:08:39,760 --> 00:08:42,159
in that specific location

236
00:08:42,159 --> 00:08:44,480
this means that each element is only in

237
00:08:44,480 --> 00:08:45,200
the stash

238
00:08:45,200 --> 00:08:48,320
once which is key for our reshuffling

239
00:08:48,320 --> 00:08:50,640
face

240
00:08:51,760 --> 00:08:54,240
we consider the following invariant to

241
00:08:54,240 --> 00:08:57,040
be key to our reshuffling process

242
00:08:57,040 --> 00:08:59,360
if an element has been read or written

243
00:08:59,360 --> 00:09:01,519
to it is in the stash

244
00:09:01,519 --> 00:09:03,519
and each element only occurs in the

245
00:09:03,519 --> 00:09:05,519
stash once

246
00:09:05,519 --> 00:09:07,279
this eliminates the issue that was

247
00:09:07,279 --> 00:09:09,440
present in the initial square root oram

248
00:09:09,440 --> 00:09:10,480
construction

249
00:09:10,480 --> 00:09:13,120
that he used oblivious sort to remove

250
00:09:13,120 --> 00:09:14,320
duplicates

251
00:09:14,320 --> 00:09:17,839
and thus was not constant rounds

252
00:09:17,839 --> 00:09:20,640
we also rely on the observation that

253
00:09:20,640 --> 00:09:22,080
each server knows

254
00:09:22,080 --> 00:09:24,480
without loss of privacy the set of

255
00:09:24,480 --> 00:09:26,640
elements that have not been read

256
00:09:26,640 --> 00:09:29,600
in the store during the current epoch

257
00:09:29,600 --> 00:09:32,000
reshuffling is a simple process that

258
00:09:32,000 --> 00:09:33,600
takes the elements

259
00:09:33,600 --> 00:09:36,560
in the stash and the unread elements in

260
00:09:36,560 --> 00:09:38,240
the store

261
00:09:38,240 --> 00:09:41,200
and simply privately re-permutes them

262
00:09:41,200 --> 00:09:44,000
under a new oprf key

263
00:09:44,000 --> 00:09:46,399
the stash is then filled with new dummy

264
00:09:46,399 --> 00:09:47,200
blocks

265
00:09:47,200 --> 00:09:50,560
to be overwritten during the new epoch

266
00:09:50,560 --> 00:09:52,560
because the permutations between the two

267
00:09:52,560 --> 00:09:54,240
epochs cannot be linked

268
00:09:54,240 --> 00:09:57,360
obliviousness is preserved and the

269
00:09:57,360 --> 00:09:59,360
permutation process can be done in

270
00:09:59,360 --> 00:10:01,040
constant rounds

271
00:10:01,040 --> 00:10:04,959
though in linear time

272
00:10:04,959 --> 00:10:07,440
in summary we are able to achieve the

273
00:10:07,440 --> 00:10:08,000
first

274
00:10:08,000 --> 00:10:11,120
secure computation do-ram variant with

275
00:10:11,120 --> 00:10:13,040
sublinear local computation

276
00:10:13,040 --> 00:10:15,519
and constant rounds our local

277
00:10:15,519 --> 00:10:16,399
computation

278
00:10:16,399 --> 00:10:19,600
is square root log n where n is database

279
00:10:19,600 --> 00:10:20,640
size

280
00:10:20,640 --> 00:10:22,480
the square root comes from the linear

281
00:10:22,480 --> 00:10:24,959
operations performed on the stash

282
00:10:24,959 --> 00:10:27,200
and the log n comes from the binary

283
00:10:27,200 --> 00:10:29,600
search performed defined elements in the

284
00:10:29,600 --> 00:10:31,040
store

285
00:10:31,040 --> 00:10:33,440
i now want to discuss how we extend this

286
00:10:33,440 --> 00:10:34,480
construction

287
00:10:34,480 --> 00:10:37,040
to support unlimited reads without

288
00:10:37,040 --> 00:10:39,200
having to update the stash

289
00:10:39,200 --> 00:10:41,120
overall this creates far better

290
00:10:41,120 --> 00:10:42,959
performance when the number of reads

291
00:10:42,959 --> 00:10:43,600
greatly

292
00:10:43,600 --> 00:10:47,040
outnumbers the number of writes

293
00:10:47,040 --> 00:10:49,440
now we move on to our sublinear doram

294
00:10:49,440 --> 00:10:52,240
with unlimited reads construction

295
00:10:52,240 --> 00:10:54,240
our motivating thought for this

296
00:10:54,240 --> 00:10:56,560
construction is the question

297
00:10:56,560 --> 00:10:58,480
if we are willing to leak the difference

298
00:10:58,480 --> 00:10:59,760
between reads and

299
00:10:59,760 --> 00:11:02,480
writes can we support reads without

300
00:11:02,480 --> 00:11:04,240
updating the internal state of the

301
00:11:04,240 --> 00:11:05,279
servers

302
00:11:05,279 --> 00:11:07,519
and thus put off the costly reshuffling

303
00:11:07,519 --> 00:11:08,480
process

304
00:11:08,480 --> 00:11:11,839
at the end of an epoch

305
00:11:12,240 --> 00:11:15,120
to do this we turn to another technique

306
00:11:15,120 --> 00:11:17,120
to hide data accesses

307
00:11:17,120 --> 00:11:20,240
private information retrieval or peer

308
00:11:20,240 --> 00:11:23,279
peer is a read only protocol

309
00:11:23,279 --> 00:11:26,000
and the servers are stateless during a

310
00:11:26,000 --> 00:11:26,480
read

311
00:11:26,480 --> 00:11:28,640
access meaning they provide

312
00:11:28,640 --> 00:11:29,680
obliviousness

313
00:11:29,680 --> 00:11:31,680
without having to update the server's

314
00:11:31,680 --> 00:11:32,880
state

315
00:11:32,880 --> 00:11:35,600
using peer the simplest solution is to

316
00:11:35,600 --> 00:11:35,920
add

317
00:11:35,920 --> 00:11:38,880
a peer store in addition to the store

318
00:11:38,880 --> 00:11:39,760
and the stash

319
00:11:39,760 --> 00:11:41,600
already existing from our previous

320
00:11:41,600 --> 00:11:42,959
scheme

321
00:11:42,959 --> 00:11:45,200
due to the overall modularity of our

322
00:11:45,200 --> 00:11:46,399
first scheme

323
00:11:46,399 --> 00:11:48,320
writes remain the same as the first

324
00:11:48,320 --> 00:11:49,680
protocol but

325
00:11:49,680 --> 00:11:52,800
reads now first scan the stash

326
00:11:52,800 --> 00:11:55,120
where the latest copy of the element

327
00:11:55,120 --> 00:11:57,680
would be if there was a previous right

328
00:11:57,680 --> 00:11:59,600
and then read the element from the peer

329
00:11:59,600 --> 00:12:01,760
store

330
00:12:01,760 --> 00:12:04,000
they then take the element from the

331
00:12:04,000 --> 00:12:05,600
stash if it exists

332
00:12:05,600 --> 00:12:08,880
or the one from the peer store because

333
00:12:08,880 --> 00:12:11,600
peer essentially supports an unlimited

334
00:12:11,600 --> 00:12:13,040
number of reads

335
00:12:13,040 --> 00:12:15,040
we can support any number of reads

336
00:12:15,040 --> 00:12:16,399
between epochs

337
00:12:16,399 --> 00:12:18,480
and refreshing only depends on the

338
00:12:18,480 --> 00:12:20,160
number of rights

339
00:12:20,160 --> 00:12:22,639
however we must be careful in selecting

340
00:12:22,639 --> 00:12:25,839
an individual peer scheme to instantiate

341
00:12:25,839 --> 00:12:28,800
this version as we wish to maintain our

342
00:12:28,800 --> 00:12:31,120
sublinear server computation

343
00:12:31,120 --> 00:12:32,959
and constant rounds in our new

344
00:12:32,959 --> 00:12:35,599
construction

345
00:12:36,880 --> 00:12:39,600
as previously mentioned the trick to

346
00:12:39,600 --> 00:12:41,279
choosing the pure scheme

347
00:12:41,279 --> 00:12:43,839
depends on two things the peer scheme

348
00:12:43,839 --> 00:12:46,320
must be sublinear computation for the

349
00:12:46,320 --> 00:12:47,200
server

350
00:12:47,200 --> 00:12:49,040
and we must be able to emulate the

351
00:12:49,040 --> 00:12:51,440
client in constant rounds

352
00:12:51,440 --> 00:12:53,680
this is an issue as traditionally peer

353
00:12:53,680 --> 00:12:54,959
schemes require

354
00:12:54,959 --> 00:12:58,079
linear server work which because this

355
00:12:58,079 --> 00:12:59,279
pure store

356
00:12:59,279 --> 00:13:02,399
would contain our entire database would

357
00:13:02,399 --> 00:13:02,880
not

358
00:13:02,880 --> 00:13:06,000
work unlike our stash which is square

359
00:13:06,000 --> 00:13:09,200
root in size thus we turn

360
00:13:09,200 --> 00:13:12,639
to doubly efficient peer or dpir

361
00:13:12,639 --> 00:13:14,959
where the double efficiency here refers

362
00:13:14,959 --> 00:13:16,800
to the fact that both the client

363
00:13:16,800 --> 00:13:18,839
and the server have sub-linear

364
00:13:18,839 --> 00:13:20,480
computation

365
00:13:20,480 --> 00:13:22,720
d-pair is also known as pure with

366
00:13:22,720 --> 00:13:24,000
pre-processing

367
00:13:24,000 --> 00:13:25,920
due to the fact that the database is

368
00:13:25,920 --> 00:13:28,560
processed during the setup phase

369
00:13:28,560 --> 00:13:31,279
in addition the constructions for dpr

370
00:13:31,279 --> 00:13:33,440
rely on coding constructions

371
00:13:33,440 --> 00:13:35,519
that are highly amenable to secure

372
00:13:35,519 --> 00:13:36,880
computation

373
00:13:36,880 --> 00:13:39,120
leading to an emulated client that only

374
00:13:39,120 --> 00:13:41,360
takes constant rounds

375
00:13:41,360 --> 00:13:44,160
i will note that there are other two

376
00:13:44,160 --> 00:13:46,160
server peer constructions

377
00:13:46,160 --> 00:13:49,440
namely korgan and gibbs that do meet

378
00:13:49,440 --> 00:13:52,480
the sub-linear server computation

379
00:13:52,480 --> 00:13:55,920
but those constructions rely on

380
00:13:55,920 --> 00:13:57,760
primitives that are not conducive to

381
00:13:57,760 --> 00:14:00,160
secure computation emulation

382
00:14:00,160 --> 00:14:03,440
particularly punctured pseudorandom sets

383
00:14:03,440 --> 00:14:05,440
which are not clear how to convert to a

384
00:14:05,440 --> 00:14:07,600
constant round protocol when emulating

385
00:14:07,600 --> 00:14:09,519
the client

386
00:14:09,519 --> 00:14:11,760
the construction of d-pier first

387
00:14:11,760 --> 00:14:14,160
introduced concurrently by canadian all

388
00:14:14,160 --> 00:14:16,560
and boil it all are based on new

389
00:14:16,560 --> 00:14:17,360
assumptions

390
00:14:17,360 --> 00:14:20,959
on noisy permuted read molar codes

391
00:14:20,959 --> 00:14:22,959
i want to take the rest of the talk to

392
00:14:22,959 --> 00:14:25,519
introduce some of the challenges we had

393
00:14:25,519 --> 00:14:27,839
when converting the dpr client to a

394
00:14:27,839 --> 00:14:29,680
secure computation

395
00:14:29,680 --> 00:14:31,920
and how we solved them by introducing a

396
00:14:31,920 --> 00:14:34,320
secure computation variant of fast

397
00:14:34,320 --> 00:14:35,279
fourier

398
00:14:35,279 --> 00:14:38,320
transform protocols which

399
00:14:38,320 --> 00:14:40,160
we believe is a contribution of

400
00:14:40,160 --> 00:14:43,120
independent interest

401
00:14:43,120 --> 00:14:45,120
i want to go through at a very high

402
00:14:45,120 --> 00:14:48,160
level the process of how dpr works

403
00:14:48,160 --> 00:14:51,519
using read muller codes read molar codes

404
00:14:51,519 --> 00:14:54,399
are a family of locally decodable codes

405
00:14:54,399 --> 00:14:56,160
that represent the database as a

406
00:14:56,160 --> 00:14:57,600
polynomial

407
00:14:57,600 --> 00:15:00,160
in particular they use a t degree

408
00:15:00,160 --> 00:15:02,480
multivariate polynomial over a finite

409
00:15:02,480 --> 00:15:03,360
field

410
00:15:03,360 --> 00:15:05,120
and the encoding is a low degree

411
00:15:05,120 --> 00:15:08,480
extension of the database

412
00:15:09,920 --> 00:15:12,480
in general however consider the setup

413
00:15:12,480 --> 00:15:14,720
process that takes in a database

414
00:15:14,720 --> 00:15:16,720
and then viewing each element of that

415
00:15:16,720 --> 00:15:18,240
database as a point

416
00:15:18,240 --> 00:15:20,720
interpolates a degree t polynomial we

417
00:15:20,720 --> 00:15:23,040
will call psi

418
00:15:23,040 --> 00:15:26,639
this is what the server stores

419
00:15:26,639 --> 00:15:28,880
when a client wishes to read the value

420
00:15:28,880 --> 00:15:29,920
at index i

421
00:15:29,920 --> 00:15:32,240
the client first represents that index

422
00:15:32,240 --> 00:15:33,839
as a random polynomial

423
00:15:33,839 --> 00:15:37,120
v this random polynomial is also of

424
00:15:37,120 --> 00:15:38,160
degree t

425
00:15:38,160 --> 00:15:40,959
and evaluates at zero to the index being

426
00:15:40,959 --> 00:15:42,160
read

427
00:15:42,160 --> 00:15:43,920
the client then evaluates this

428
00:15:43,920 --> 00:15:45,440
polynomial at several

429
00:15:45,440 --> 00:15:48,480
preset points and obtains the output

430
00:15:48,480 --> 00:15:51,920
here represented as a b and c

431
00:15:51,920 --> 00:15:54,720
these are the points that the client now

432
00:15:54,720 --> 00:15:57,120
asks the server to return the values

433
00:15:57,120 --> 00:16:00,560
of the database function at the server

434
00:16:00,560 --> 00:16:01,759
obtains the points

435
00:16:01,759 --> 00:16:04,800
y sub a y sub b and y sub c

436
00:16:04,800 --> 00:16:07,199
and sends them back to the client the

437
00:16:07,199 --> 00:16:08,000
client is then

438
00:16:08,000 --> 00:16:10,240
able to interpolate across these t

439
00:16:10,240 --> 00:16:11,920
points in order to recover

440
00:16:11,920 --> 00:16:15,279
the database value at index i

441
00:16:15,279 --> 00:16:17,680
when emulating this process using two

442
00:16:17,680 --> 00:16:18,639
servers

443
00:16:18,639 --> 00:16:21,600
the only steps that are non-local or

444
00:16:21,600 --> 00:16:23,440
non-linear operations

445
00:16:23,440 --> 00:16:25,360
are the two interpolations and the

446
00:16:25,360 --> 00:16:27,920
random polynomial evaluation

447
00:16:27,920 --> 00:16:30,160
as it depends on the secret shared

448
00:16:30,160 --> 00:16:31,600
record i

449
00:16:31,600 --> 00:16:34,160
the naive way to compute these steps is

450
00:16:34,160 --> 00:16:34,720
an n

451
00:16:34,720 --> 00:16:36,959
squared operation of a matrix

452
00:16:36,959 --> 00:16:38,800
multiplication

453
00:16:38,800 --> 00:16:40,800
this would not work for our reshuffling

454
00:16:40,800 --> 00:16:42,639
process has to be less than

455
00:16:42,639 --> 00:16:45,920
n squared however these operations are

456
00:16:45,920 --> 00:16:47,279
also computable

457
00:16:47,279 --> 00:16:52,720
by fast for a transform or fft algorithm

458
00:16:54,079 --> 00:16:57,839
we introduce an fft secure computation

459
00:16:57,839 --> 00:16:58,639
protocol

460
00:16:58,639 --> 00:17:00,639
that can evaluate or interpolate the

461
00:17:00,639 --> 00:17:03,360
polynomials in quasi-linear time

462
00:17:03,360 --> 00:17:06,000
n log squared n with only local

463
00:17:06,000 --> 00:17:07,359
computation

464
00:17:07,359 --> 00:17:09,520
meaning that computing the fft during

465
00:17:09,520 --> 00:17:10,799
these steps

466
00:17:10,799 --> 00:17:13,839
does not incur any additional rounds we

467
00:17:13,839 --> 00:17:15,839
believe this protocol may also be of

468
00:17:15,839 --> 00:17:17,119
independent interest

469
00:17:17,119 --> 00:17:20,559
to the crypto community

470
00:17:20,559 --> 00:17:23,280
to wrap up we are able to obtain two

471
00:17:23,280 --> 00:17:24,480
constructions

472
00:17:24,480 --> 00:17:26,720
the first of which is the first secure

473
00:17:26,720 --> 00:17:28,240
computation doram

474
00:17:28,240 --> 00:17:30,320
with sublinear local computation and

475
00:17:30,320 --> 00:17:32,080
constant rounds

476
00:17:32,080 --> 00:17:35,679
the second is an unlimited reads doram

477
00:17:35,679 --> 00:17:38,559
that leverages doubly efficient peer

478
00:17:38,559 --> 00:17:40,320
when we leak the difference between

479
00:17:40,320 --> 00:17:42,480
reads and writes to obtain better

480
00:17:42,480 --> 00:17:44,480
asthmatic performance

481
00:17:44,480 --> 00:17:46,400
for that construction we are able to

482
00:17:46,400 --> 00:17:48,640
obtain an n to the epsilon for any

483
00:17:48,640 --> 00:17:50,400
epsilon greater than zero

484
00:17:50,400 --> 00:17:53,280
local computation and bandwidth we also

485
00:17:53,280 --> 00:17:54,160
present an

486
00:17:54,160 --> 00:17:58,000
fft algorithm that in quasi-linear time

487
00:17:58,000 --> 00:18:00,640
with only local computation is able to

488
00:18:00,640 --> 00:18:01,039
do

489
00:18:01,039 --> 00:18:03,440
multivariate interpolation and

490
00:18:03,440 --> 00:18:05,280
evaluation

491
00:18:05,280 --> 00:18:07,440
and we believe may be a primitive of

492
00:18:07,440 --> 00:18:09,520
independent interest

493
00:18:09,520 --> 00:18:11,679
thank you for listening to my talk

494
00:18:11,679 --> 00:18:13,440
please feel free to reach out if you

495
00:18:13,440 --> 00:18:14,640
have any questions

496
00:18:14,640 --> 00:18:17,520
our emails can be found on our paper and

497
00:18:17,520 --> 00:18:19,280
thank you for the additional soundtrack

498
00:18:19,280 --> 00:18:20,320
of my cat

499
00:18:20,320 --> 00:18:22,480
who you may have heard in the background

500
00:18:22,480 --> 00:18:26,720
karina i love you

