1
00:00:01,280 --> 00:00:02,639
and you're ready to go have a good

2
00:00:02,639 --> 00:00:03,840
session

3
00:00:03,840 --> 00:00:06,879
thank you so uh welcome to today's first

4
00:00:06,879 --> 00:00:07,919
session of pkc

5
00:00:07,919 --> 00:00:11,200
2021 uh this is the second session

6
00:00:11,200 --> 00:00:13,200
of pkc focusing on cryptographic

7
00:00:13,200 --> 00:00:14,480
primitives

8
00:00:14,480 --> 00:00:16,000
i'm christian and i'm co-chairing this

9
00:00:16,000 --> 00:00:18,480
session together with lisa cole

10
00:00:18,480 --> 00:00:20,480
so as in previous days please respect

11
00:00:20,480 --> 00:00:22,240
the code of conduct which in particular

12
00:00:22,240 --> 00:00:22,880
includes

13
00:00:22,880 --> 00:00:26,480
displaying your full names here in zoom

14
00:00:26,480 --> 00:00:28,160
in this session we look forward to seven

15
00:00:28,160 --> 00:00:30,560
important contributions uh to the space

16
00:00:30,560 --> 00:00:32,479
of cryptographic primitives

17
00:00:32,479 --> 00:00:34,640
where each speaker gets roughly five

18
00:00:34,640 --> 00:00:36,160
minutes to present the result

19
00:00:36,160 --> 00:00:37,680
which is then followed by one or two

20
00:00:37,680 --> 00:00:39,920
questions from the audience

21
00:00:39,920 --> 00:00:43,760
and please ask your questions by uh

22
00:00:43,760 --> 00:00:46,800
and we will then read them out

23
00:00:46,800 --> 00:00:49,840
and if time allows we will have more

24
00:00:49,840 --> 00:00:51,680
time for questions to all offers at the

25
00:00:51,680 --> 00:00:54,079
end of the session

26
00:00:54,079 --> 00:00:57,280
so without much further ado let's

27
00:00:57,280 --> 00:00:59,440
proceed to the first talk of this

28
00:00:59,440 --> 00:01:00,800
session

29
00:01:00,800 --> 00:01:03,120
uh it's the paper with the title a

30
00:01:03,120 --> 00:01:05,360
geometric approach to homomorphic secret

31
00:01:05,360 --> 00:01:06,320
sharing

32
00:01:06,320 --> 00:01:09,520
it's joint work by evolution

33
00:01:09,520 --> 00:01:12,479
and julio malavolta russell is giving

34
00:01:12,479 --> 00:01:14,159
the talk

35
00:01:14,159 --> 00:01:17,439
uh please go ahead thanks thanks for the

36
00:01:17,439 --> 00:01:18,479
introduction

37
00:01:18,479 --> 00:01:20,560
so i yeah i'm russell i'm going to talk

38
00:01:20,560 --> 00:01:22,000
about a geometric approach to

39
00:01:22,000 --> 00:01:23,840
homomorphic secret sharing

40
00:01:23,840 --> 00:01:26,479
and as uh said in this introduction is

41
00:01:26,479 --> 00:01:27,520
the joint work

42
00:01:27,520 --> 00:01:30,720
between yuvai shai and julio malavota

43
00:01:30,720 --> 00:01:32,720
so what is a homomorphic secret sharing

44
00:01:32,720 --> 00:01:34,960
scheme in our definition an

45
00:01:34,960 --> 00:01:38,320
nmt hss scheme is first of all a t out

46
00:01:38,320 --> 00:01:40,240
of m square sharing scheme

47
00:01:40,240 --> 00:01:42,560
where n input clients secret share

48
00:01:42,560 --> 00:01:44,240
inputs to m servers

49
00:01:44,240 --> 00:01:46,720
out of them t can be corrupt but

50
00:01:46,720 --> 00:01:48,479
additionally these m servers can

51
00:01:48,479 --> 00:01:49,360
evaluate

52
00:01:49,360 --> 00:01:52,640
evaluate some function on the shares

53
00:01:52,640 --> 00:01:54,720
and produce some output shares and send

54
00:01:54,720 --> 00:01:56,640
them to another client called the input

55
00:01:56,640 --> 00:01:57,759
client

56
00:01:57,759 --> 00:01:59,600
and to capture even more schemes we

57
00:01:59,600 --> 00:02:02,000
allow the share algorithm to produce

58
00:02:02,000 --> 00:02:04,000
some extra recovery information which

59
00:02:04,000 --> 00:02:05,920
are also sent to the output client

60
00:02:05,920 --> 00:02:07,600
so this deviates from existing

61
00:02:07,600 --> 00:02:09,679
definitions slightly

62
00:02:09,679 --> 00:02:11,840
and we will focus on evaluate the

63
00:02:11,840 --> 00:02:12,720
evaluation

64
00:02:12,720 --> 00:02:16,239
of n variate degree d polynomials f

65
00:02:16,239 --> 00:02:19,280
and in general we can think of

66
00:02:19,280 --> 00:02:21,200
a high supported degree d being

67
00:02:21,200 --> 00:02:24,160
correlated to a high communication cost

68
00:02:24,160 --> 00:02:26,959
so we can we are incentivized to

69
00:02:26,959 --> 00:02:28,879
maximize the supported degree d

70
00:02:28,879 --> 00:02:32,319
while minimizing the communication cost

71
00:02:32,319 --> 00:02:34,160
so in this context we present three

72
00:02:34,160 --> 00:02:36,720
results the first is a generic compiler

73
00:02:36,720 --> 00:02:39,360
based on degree k homomorphic encryption

74
00:02:39,360 --> 00:02:41,440
these are more encryptions which are

75
00:02:41,440 --> 00:02:42,720
able to evaluate

76
00:02:42,720 --> 00:02:45,840
degree k polynomials and this compiler

77
00:02:45,840 --> 00:02:47,040
turns a family of

78
00:02:47,040 --> 00:02:50,239
hss scheme where the recovery algorithm

79
00:02:50,239 --> 00:02:53,280
is a degree l polynomial in the recovery

80
00:02:53,280 --> 00:02:54,560
information

81
00:02:54,560 --> 00:02:57,120
and and they could have high

82
00:02:57,120 --> 00:02:58,959
communication cost such as

83
00:02:58,959 --> 00:03:01,840
in order of n to the power l and after

84
00:03:01,840 --> 00:03:03,360
the compilation we get

85
00:03:03,360 --> 00:03:05,680
some xss scheme for the same kind of

86
00:03:05,680 --> 00:03:07,760
polynomials for the same degree

87
00:03:07,760 --> 00:03:10,080
but with much lower communication cost

88
00:03:10,080 --> 00:03:11,120
in the order of

89
00:03:11,120 --> 00:03:14,159
n to the power l minus k

90
00:03:14,159 --> 00:03:16,000
so from another perspective we can

91
00:03:16,000 --> 00:03:18,720
interpret this result as follows

92
00:03:18,720 --> 00:03:21,840
if we assume that we have

93
00:03:21,840 --> 00:03:25,040
so we insist to pay only order n

94
00:03:25,040 --> 00:03:26,959
communication then this compiler can

95
00:03:26,959 --> 00:03:27,440
boost

96
00:03:27,440 --> 00:03:30,400
the supported degree from 2m over t all

97
00:03:30,400 --> 00:03:33,200
the way to k plus 2 over m

98
00:03:33,200 --> 00:03:36,799
k plus 2 times m over t where k is the k

99
00:03:36,799 --> 00:03:40,400
of the homomorph encryption and the idea

100
00:03:40,400 --> 00:03:42,640
of the compiler is that we can push

101
00:03:42,640 --> 00:03:44,400
the k degrees of the recovery

102
00:03:44,400 --> 00:03:47,200
computation to the servers using khe

103
00:03:47,200 --> 00:03:49,680
and let the output layer let the output

104
00:03:49,680 --> 00:03:51,920
client complete the remaining l minus k

105
00:03:51,920 --> 00:03:53,599
degrees

106
00:03:53,599 --> 00:03:55,120
and for the second result we will

107
00:03:55,120 --> 00:03:57,200
extract some compatible

108
00:03:57,200 --> 00:03:59,680
information periodic hss schemes from

109
00:03:59,680 --> 00:04:01,439
the private information retrieval

110
00:04:01,439 --> 00:04:02,319
literature

111
00:04:02,319 --> 00:04:04,480
and specifically we are looking at the

112
00:04:04,480 --> 00:04:06,640
beautiful pir scheme of woodruff and

113
00:04:06,640 --> 00:04:08,239
japanese

114
00:04:08,239 --> 00:04:10,400
extracted scheme will be parameterized

115
00:04:10,400 --> 00:04:12,000
by an integer l

116
00:04:12,000 --> 00:04:14,720
a natural number l and they will support

117
00:04:14,720 --> 00:04:15,840
a degree d

118
00:04:15,840 --> 00:04:19,120
equal to l plus one times m over t

119
00:04:19,120 --> 00:04:21,600
and note that when l equals zero we we

120
00:04:21,600 --> 00:04:22,560
will recover

121
00:04:22,560 --> 00:04:24,720
the well-known xiaomi secret sharing

122
00:04:24,720 --> 00:04:26,080
scheme

123
00:04:26,080 --> 00:04:29,840
so the w yl scheme is uh

124
00:04:29,840 --> 00:04:31,600
shares many components with the xiaomi

125
00:04:31,600 --> 00:04:34,080
square sharing scheme but on top of that

126
00:04:34,080 --> 00:04:36,800
the sharing and the evaluation algorithm

127
00:04:36,800 --> 00:04:38,960
will compute a bunch of high order

128
00:04:38,960 --> 00:04:40,160
derivatives

129
00:04:40,160 --> 00:04:44,160
up to order l and correspondingly in the

130
00:04:44,160 --> 00:04:45,840
recovery algorithm

131
00:04:45,840 --> 00:04:47,759
instead of using the lagrange

132
00:04:47,759 --> 00:04:50,639
interpolation like in the xiaomi scheme

133
00:04:50,639 --> 00:04:53,280
we will use a generalization of it

134
00:04:53,280 --> 00:04:55,919
called the emit interpolation scheme to

135
00:04:55,919 --> 00:04:56,960
interpolation

136
00:04:56,960 --> 00:05:00,800
to take advantage of the derivatives

137
00:05:00,800 --> 00:05:02,960
and finally as our third result we

138
00:05:02,960 --> 00:05:05,440
construct pre-processing mpc protocols

139
00:05:05,440 --> 00:05:07,520
from pre-processing hss

140
00:05:07,520 --> 00:05:10,720
to recall a pre-processing mpc protocol

141
00:05:10,720 --> 00:05:13,039
is one that has two phases offline an

142
00:05:13,039 --> 00:05:15,039
offline phase and an online phase

143
00:05:15,039 --> 00:05:16,800
the offline phase is potentially

144
00:05:16,800 --> 00:05:19,120
expensive but it only depends on the

145
00:05:19,120 --> 00:05:19,840
function f

146
00:05:19,840 --> 00:05:22,720
but not the online inputs it can be done

147
00:05:22,720 --> 00:05:24,000
by just the party or

148
00:05:24,000 --> 00:05:27,199
by another mpc protocol and

149
00:05:27,199 --> 00:05:30,880
all this is uh the goal is that with all

150
00:05:30,880 --> 00:05:32,000
these pre-processing

151
00:05:32,000 --> 00:05:34,800
we hopefully achieve a online

152
00:05:34,800 --> 00:05:36,400
communication cost

153
00:05:36,400 --> 00:05:38,080
which is much smaller than the

154
00:05:38,080 --> 00:05:41,039
description side description size of f

155
00:05:41,039 --> 00:05:43,039
which could be as high as n to the power

156
00:05:43,039 --> 00:05:45,600
d and to do this we will use something

157
00:05:45,600 --> 00:05:47,919
called p preprocessing hss

158
00:05:47,919 --> 00:05:50,080
in which p out of the m shares are

159
00:05:50,080 --> 00:05:52,560
independent of the online inputs x1 to

160
00:05:52,560 --> 00:05:53,440
xn

161
00:05:53,440 --> 00:05:55,680
and for our schemes we have p equals to

162
00:05:55,680 --> 00:05:56,960
the floor of t

163
00:05:56,960 --> 00:06:00,960
over l plus one and the idea behind this

164
00:06:00,960 --> 00:06:01,919
transformation

165
00:06:01,919 --> 00:06:04,960
is that since the p out of m shares of

166
00:06:04,960 --> 00:06:07,199
the xss are independent of the inputs

167
00:06:07,199 --> 00:06:10,160
we can generate them in advance and push

168
00:06:10,160 --> 00:06:11,360
the computation of

169
00:06:11,360 --> 00:06:14,080
ps hss servers to the offline phase of

170
00:06:14,080 --> 00:06:15,600
the mpc

171
00:06:15,600 --> 00:06:17,520
and again assuming order of n

172
00:06:17,520 --> 00:06:18,800
communication

173
00:06:18,800 --> 00:06:21,520
and if some conditions are met namely l

174
00:06:21,520 --> 00:06:22,720
plus 1 divides t

175
00:06:22,720 --> 00:06:24,400
then we can hope to get one more

176
00:06:24,400 --> 00:06:26,960
supported degree so in conclusion these

177
00:06:26,960 --> 00:06:27,520
are the

178
00:06:27,520 --> 00:06:30,000
results presented in this paper and for

179
00:06:30,000 --> 00:06:31,440
some concrete feeling of

180
00:06:31,440 --> 00:06:33,680
how the supported degree b looks like

181
00:06:33,680 --> 00:06:35,360
here are some examples

182
00:06:35,360 --> 00:06:37,120
and finally feel free to check out the

183
00:06:37,120 --> 00:06:39,199
eprint version for more details

184
00:06:39,199 --> 00:06:41,520
thanks

185
00:06:42,240 --> 00:06:45,360
thanks a lot for this desktop

186
00:06:45,360 --> 00:06:46,880
so i haven't seen any questions in

187
00:06:46,880 --> 00:06:49,599
philip chat but it's also feel free to

188
00:06:49,599 --> 00:06:54,000
unmute now and and ask directly

189
00:06:54,000 --> 00:06:56,479
in zoom if there is a pressing question

190
00:06:56,479 --> 00:06:59,359
from the audience

191
00:07:00,560 --> 00:07:02,880
otherwise we have uh you've got a

192
00:07:02,880 --> 00:07:05,599
question so um

193
00:07:05,599 --> 00:07:08,720
can you can you give like you you talked

194
00:07:08,720 --> 00:07:10,160
a lot about this uh

195
00:07:10,160 --> 00:07:12,080
pre-processing application so did you

196
00:07:12,080 --> 00:07:14,880
think about a concrete example where

197
00:07:14,880 --> 00:07:16,080
you know where you expect is

198
00:07:16,080 --> 00:07:18,080
pre-processing mpc

199
00:07:18,080 --> 00:07:19,759
protocol to improve over other

200
00:07:19,759 --> 00:07:21,759
approaches

201
00:07:21,759 --> 00:07:24,800
um so i don't remember the food details

202
00:07:24,800 --> 00:07:26,319
right now but in the paper we

203
00:07:26,319 --> 00:07:28,160
we have a special paragraph talking

204
00:07:28,160 --> 00:07:30,400
about this saying that you can use this

205
00:07:30,400 --> 00:07:32,479
pre-processing mpc protocol as a

206
00:07:32,479 --> 00:07:33,919
building block for

207
00:07:33,919 --> 00:07:37,039
a bigger mpc protocol so and this bigger

208
00:07:37,039 --> 00:07:38,800
npc protocol is used to compute the

209
00:07:38,800 --> 00:07:40,560
arithmetic circuits

210
00:07:40,560 --> 00:07:44,639
with with degree d gates so each gate

211
00:07:44,639 --> 00:07:46,479
computes the degree t polynomial and you

212
00:07:46,479 --> 00:07:47,599
can

213
00:07:47,599 --> 00:07:50,639
change these protocols to and then yeah

214
00:07:50,639 --> 00:07:52,720
high degree polynomials are i guess in

215
00:07:52,720 --> 00:07:54,400
general useful for a lot of

216
00:07:54,400 --> 00:07:56,639
purposes like machine learning computing

217
00:07:56,639 --> 00:07:58,479
statistics and then so on

218
00:07:58,479 --> 00:08:00,080
and this brings me actually to an uh

219
00:08:00,080 --> 00:08:02,000
follow-up so this so what other

220
00:08:02,000 --> 00:08:04,000
functions could be of interest to you

221
00:08:04,000 --> 00:08:05,440
i mean you you said it low degree

222
00:08:05,440 --> 00:08:07,039
volumes are interesting

223
00:08:07,039 --> 00:08:08,960
machine learning but uh so what other

224
00:08:08,960 --> 00:08:10,800
functions are there in the

225
00:08:10,800 --> 00:08:12,720
literature that might be you know

226
00:08:12,720 --> 00:08:15,360
verified to look at

227
00:08:15,360 --> 00:08:17,440
um i don't fully understand the question

228
00:08:17,440 --> 00:08:18,400
but people have

229
00:08:18,400 --> 00:08:21,440
looked at other computation model so in

230
00:08:21,440 --> 00:08:23,440
instead of polynomials they look at

231
00:08:23,440 --> 00:08:25,039
if i remember correctly branching

232
00:08:25,039 --> 00:08:26,479
programs

233
00:08:26,479 --> 00:08:29,520
so yeah other computation model and

234
00:08:29,520 --> 00:08:32,159
try to build hss for them or even

235
00:08:32,159 --> 00:08:33,200
arbitrary

236
00:08:33,200 --> 00:08:36,799
boolean circuits something like that

237
00:08:36,799 --> 00:08:38,799
we thanks a lot so any other questions

238
00:08:38,799 --> 00:08:40,000
from the audience we would have

239
00:08:40,000 --> 00:08:44,000
time for some at least one more question

240
00:08:44,000 --> 00:08:47,120
otherwise we proceed

241
00:08:49,519 --> 00:08:52,000
doesn't seem to be the case so thanks to

242
00:08:52,000 --> 00:08:54,880
the speaker again and let's move to the

243
00:08:54,880 --> 00:08:57,439
next stop

244
00:08:58,080 --> 00:09:01,839
uh so then i will take over

245
00:09:01,839 --> 00:09:05,200
uh you can already start sharing your

246
00:09:05,200 --> 00:09:05,680
spring

247
00:09:05,680 --> 00:09:10,480
so a screen so the next talk will be um

248
00:09:10,480 --> 00:09:12,880
revisiting rcca security and replay

249
00:09:12,880 --> 00:09:13,839
protection

250
00:09:13,839 --> 00:09:16,640
uh this is joint work by christian

251
00:09:16,640 --> 00:09:18,880
ulimara christopher portman and julian

252
00:09:18,880 --> 00:09:20,080
rito and

253
00:09:20,080 --> 00:09:22,320
william will give the talk so stage is

254
00:09:22,320 --> 00:09:23,519
yours

255
00:09:23,519 --> 00:09:26,640
thank you okay so hi yes i'm yam and

256
00:09:26,640 --> 00:09:30,080
welcome to my presentation on revisiting

257
00:09:30,080 --> 00:09:32,880
rcc security and regular protection this

258
00:09:32,880 --> 00:09:34,240
is joint work with christian

259
00:09:34,240 --> 00:09:37,600
really and christopher so security

260
00:09:37,600 --> 00:09:39,360
notions are usually designed with

261
00:09:39,360 --> 00:09:42,240
concrete applications in mind however

262
00:09:42,240 --> 00:09:43,279
they often do not

263
00:09:43,279 --> 00:09:45,519
match the exact security requirements of

264
00:09:45,519 --> 00:09:48,080
their intended applications

265
00:09:48,080 --> 00:09:51,040
what is their purpose then for example

266
00:09:51,040 --> 00:09:53,279
what is the purpose of cc2 security for

267
00:09:53,279 --> 00:09:55,200
pk schemes

268
00:09:55,200 --> 00:09:58,000
we know on one hand that cc2 security is

269
00:09:58,000 --> 00:09:59,680
sufficient to achieve confidential

270
00:09:59,680 --> 00:10:01,120
communication

271
00:10:01,120 --> 00:10:03,839
however there are also non-cc2 secure

272
00:10:03,839 --> 00:10:04,560
schemes

273
00:10:04,560 --> 00:10:05,920
that also offer this type of

274
00:10:05,920 --> 00:10:08,480
communication

275
00:10:08,480 --> 00:10:11,519
the same happens with rcca security so

276
00:10:11,519 --> 00:10:14,399
rcc security is just a relaxation of cc2

277
00:10:14,399 --> 00:10:15,519
security

278
00:10:15,519 --> 00:10:18,640
relaxation in the sense that cca2

279
00:10:18,640 --> 00:10:20,640
implies rcc security

280
00:10:20,640 --> 00:10:23,360
but rcc security does not imply cc2

281
00:10:23,360 --> 00:10:24,880
security

282
00:10:24,880 --> 00:10:27,839
so it is known that confidential

283
00:10:27,839 --> 00:10:29,360
communication

284
00:10:29,360 --> 00:10:32,880
requires indar cca security however

285
00:10:32,880 --> 00:10:34,959
in general industry security is not

286
00:10:34,959 --> 00:10:36,959
sufficient to achieve confidential

287
00:10:36,959 --> 00:10:38,880
communication

288
00:10:38,880 --> 00:10:41,440
so in his work we identify technical

289
00:10:41,440 --> 00:10:42,800
inconsistencies with

290
00:10:42,800 --> 00:10:45,519
existing game-based notions and we

291
00:10:45,519 --> 00:10:46,320
showed that

292
00:10:46,320 --> 00:10:49,040
they are not implied by cc2 for the case

293
00:10:49,040 --> 00:10:50,959
of probabilistic decryption

294
00:10:50,959 --> 00:10:52,959
this actually contradicts a claim made

295
00:10:52,959 --> 00:10:54,640
in earlier work

296
00:10:54,640 --> 00:10:56,480
furthermore they also have no

297
00:10:56,480 --> 00:10:59,279
non-operational meaning

298
00:10:59,279 --> 00:11:02,000
so we showed that cc2 does not imply pd

299
00:11:02,000 --> 00:11:03,600
rcc security

300
00:11:03,600 --> 00:11:05,519
and as it turns out it does not even

301
00:11:05,519 --> 00:11:06,800
imply the weaker

302
00:11:06,800 --> 00:11:10,959
in sd rcc security

303
00:11:11,200 --> 00:11:13,040
so we clean up the space of

304
00:11:13,040 --> 00:11:15,760
game-by-security notions for pke schemes

305
00:11:15,760 --> 00:11:18,320
for capturing confidential communication

306
00:11:18,320 --> 00:11:20,399
and we do so by following a systematic

307
00:11:20,399 --> 00:11:20,959
approach

308
00:11:20,959 --> 00:11:23,200
for characterizing security using a

309
00:11:23,200 --> 00:11:24,959
composable framework

310
00:11:24,959 --> 00:11:26,800
which essentially consists of defining

311
00:11:26,800 --> 00:11:29,200
different applications of pke schemes

312
00:11:29,200 --> 00:11:31,680
as benchmarks which are composable

313
00:11:31,680 --> 00:11:32,880
security notions

314
00:11:32,880 --> 00:11:34,720
and we consider three different

315
00:11:34,720 --> 00:11:36,079
benchmarks

316
00:11:36,079 --> 00:11:37,680
the first one is one i was just

317
00:11:37,680 --> 00:11:39,120
referring to before

318
00:11:39,120 --> 00:11:41,360
and this one is taken from earlier work

319
00:11:41,360 --> 00:11:43,040
and then we consider a variant

320
00:11:43,040 --> 00:11:45,519
of confidential communication where this

321
00:11:45,519 --> 00:11:48,079
time the receiver is responsible for

322
00:11:48,079 --> 00:11:50,720
detecting and filtering out ciphertext

323
00:11:50,720 --> 00:11:52,000
replays

324
00:11:52,000 --> 00:11:54,639
and finally there is yet another variant

325
00:11:54,639 --> 00:11:56,720
of confidential communication

326
00:11:56,720 --> 00:11:59,519
where this time it is a third party who

327
00:11:59,519 --> 00:12:01,440
is responsible for detecting and

328
00:12:01,440 --> 00:12:04,480
filtering out ciphertext replays

329
00:12:04,480 --> 00:12:08,000
so we consider these three applications

330
00:12:08,000 --> 00:12:11,120
or benchmarks and for each one of them

331
00:12:11,120 --> 00:12:13,839
we propose a gameplay security notion

332
00:12:13,839 --> 00:12:16,240
capturing the intended application

333
00:12:16,240 --> 00:12:19,440
so for the first benchmark we introduced

334
00:12:19,440 --> 00:12:22,959
ncl rcca security for the

335
00:12:22,959 --> 00:12:26,000
second we introduced in srp rcca

336
00:12:26,000 --> 00:12:26,800
security

337
00:12:26,800 --> 00:12:29,519
and for the third we introduced in prp

338
00:12:29,519 --> 00:12:32,639
rcc security

339
00:12:32,639 --> 00:12:35,600
so we showed that these notions captured

340
00:12:35,600 --> 00:12:36,320
intended

341
00:12:36,320 --> 00:12:39,680
benchmark so clrcca captures benchmark

342
00:12:39,680 --> 00:12:43,440
one srprca captures benchmark 2

343
00:12:43,440 --> 00:12:46,480
and prp rcga security captures benchmark

344
00:12:46,480 --> 00:12:48,399
3.

345
00:12:48,399 --> 00:12:50,720
finally we give a full characterization

346
00:12:50,720 --> 00:12:52,079
of our game-based security

347
00:12:52,079 --> 00:12:55,200
notions we show that they are correctly

348
00:12:55,200 --> 00:12:56,160
placed between

349
00:12:56,160 --> 00:13:00,000
cc2 and rcc security and we also give

350
00:13:00,000 --> 00:13:03,200
all possible relations between them

351
00:13:03,200 --> 00:13:06,079
for instance we show that cc2 implies

352
00:13:06,079 --> 00:13:08,000
prp rcc security

353
00:13:08,000 --> 00:13:11,600
which implies srp rcc security cl rcc

354
00:13:11,600 --> 00:13:12,720
security

355
00:13:12,720 --> 00:13:16,160
and finally nclrcca security implies in

356
00:13:16,160 --> 00:13:19,519
rcc security and you also give

357
00:13:19,519 --> 00:13:22,720
the converse non-implications so indar

358
00:13:22,720 --> 00:13:25,279
cca does not prove cl or cca which does

359
00:13:25,279 --> 00:13:26,399
not

360
00:13:26,399 --> 00:13:31,120
imply srp prp and finally prp rca

361
00:13:31,120 --> 00:13:32,160
security

362
00:13:32,160 --> 00:13:36,000
does not imply cc to security

363
00:13:36,000 --> 00:13:37,680
so for more details please have a look

364
00:13:37,680 --> 00:13:39,519
at the full version of this talk

365
00:13:39,519 --> 00:13:43,040
and thank you for your attention

366
00:13:44,320 --> 00:13:46,639
thank you very much for the nice talk

367
00:13:46,639 --> 00:13:48,079
are there any questions

368
00:13:48,079 --> 00:13:51,120
in the audience either speak up or

369
00:13:51,120 --> 00:14:03,839
write it in tulip or in the chat

370
00:14:05,519 --> 00:14:08,399
yeah maybe maybe i can ask your view

371
00:14:08,399 --> 00:14:10,480
about like what is the practical impact

372
00:14:10,480 --> 00:14:13,839
of having all these different notions

373
00:14:18,720 --> 00:14:24,079
so um the main thing is

374
00:14:24,079 --> 00:14:27,360
uh i mean domain there could be an issue

375
00:14:27,360 --> 00:14:28,480
with

376
00:14:28,480 --> 00:14:31,360
schemes which are just proven rcc secure

377
00:14:31,360 --> 00:14:32,800
in particular if their

378
00:14:32,800 --> 00:14:36,240
message space size is small um i mean if

379
00:14:36,240 --> 00:14:38,000
it is large then they are fine

380
00:14:38,000 --> 00:14:40,399
but if the message space size is small

381
00:14:40,399 --> 00:14:41,120
then

382
00:14:41,120 --> 00:14:43,360
there might actually be like molding

383
00:14:43,360 --> 00:14:45,120
attacks that you can mount on them

384
00:14:45,120 --> 00:14:48,480
so even though they are in rcc secure

385
00:14:48,480 --> 00:14:49,519
and

386
00:14:49,519 --> 00:14:53,120
one would expect that they could be used

387
00:14:53,120 --> 00:14:54,880
because for large message spaces they

388
00:14:54,880 --> 00:14:57,519
can for a small message species there

389
00:14:57,519 --> 00:14:59,760
might actually be attacks

390
00:14:59,760 --> 00:15:02,880
on the malleability

391
00:15:04,720 --> 00:15:06,639
does this answer your question yes thank

392
00:15:06,639 --> 00:15:08,560
you yeah i mean i think one conclusion

393
00:15:08,560 --> 00:15:10,240
i would voice that even for simple

394
00:15:10,240 --> 00:15:12,320
things like

395
00:15:12,320 --> 00:15:13,920
security of encryption there are many

396
00:15:13,920 --> 00:15:16,720
subtle notions and

397
00:15:16,720 --> 00:15:19,440
differences and that we should not

398
00:15:19,440 --> 00:15:21,120
expect it to be

399
00:15:21,120 --> 00:15:22,720
less complicated for more complicated

400
00:15:22,720 --> 00:15:24,160
notions it's just that we haven't looked

401
00:15:24,160 --> 00:15:24,639
in

402
00:15:24,639 --> 00:15:27,920
as much detail that is that a fair

403
00:15:27,920 --> 00:15:31,199
uh conjecture sorry

404
00:15:31,199 --> 00:15:34,480
could you repeat sorry so so i my

405
00:15:34,480 --> 00:15:36,959
i said that even for things as simple as

406
00:15:36,959 --> 00:15:38,480
public key encryption and

407
00:15:38,480 --> 00:15:40,959
cca security there are so many different

408
00:15:40,959 --> 00:15:42,240
notions depending on

409
00:15:42,240 --> 00:15:45,279
what exactly we want to construct so

410
00:15:45,279 --> 00:15:48,320
we should be kind of we should expect

411
00:15:48,320 --> 00:15:49,759
for more complicated cryptographic

412
00:15:49,759 --> 00:15:51,600
primitives or particles

413
00:15:51,600 --> 00:15:54,000
there will be just as many complications

414
00:15:54,000 --> 00:15:56,000
and this is kind of like a

415
00:15:56,000 --> 00:15:59,199
a good good thing to be aware of

416
00:15:59,199 --> 00:16:02,320
yes yes i mean it's i mean at least i

417
00:16:02,320 --> 00:16:04,000
found it a bit surprising but

418
00:16:04,000 --> 00:16:08,480
like something as fundamental as like bk

419
00:16:08,480 --> 00:16:10,959
has like some issues and if this is the

420
00:16:10,959 --> 00:16:11,920
case for

421
00:16:11,920 --> 00:16:15,199
very simple uh primitives like pke

422
00:16:15,199 --> 00:16:17,120
then yes for more complicated ones i

423
00:16:17,120 --> 00:16:18,720
mean one can certainly

424
00:16:18,720 --> 00:16:21,759
expect i mean more

425
00:16:21,759 --> 00:16:24,959
other issues to arise

426
00:16:27,199 --> 00:16:30,959
well i hope not but it might happen

427
00:16:34,320 --> 00:16:36,800
are there any other questions so i don't

428
00:16:36,800 --> 00:16:37,759
see a question

429
00:16:37,759 --> 00:16:41,440
on sulip currently anyone also wants to

430
00:16:41,440 --> 00:16:45,279
ask a question we still have time

431
00:16:47,040 --> 00:16:49,759
ah so we have a question on shulip so

432
00:16:49,759 --> 00:16:50,160
i'm

433
00:16:50,160 --> 00:16:51,759
just going to read it out um the

434
00:16:51,759 --> 00:16:53,360
question is by daniel avon

435
00:16:53,360 --> 00:16:55,279
is there a natural example of a pke

436
00:16:55,279 --> 00:16:57,120
scheme that is more efficient or simpler

437
00:16:57,120 --> 00:16:58,320
to describe in

438
00:16:58,320 --> 00:17:01,120
a design to hit rcca security or another

439
00:17:01,120 --> 00:17:03,120
relaxed variant rather than designing to

440
00:17:03,120 --> 00:17:05,520
hit cca security

441
00:17:05,520 --> 00:17:07,280
and in brackets i don't think this

442
00:17:07,280 --> 00:17:09,199
overlaps with the small message space

443
00:17:09,199 --> 00:17:11,679
example

444
00:17:12,079 --> 00:17:15,119
so the question is if there is like some

445
00:17:15,119 --> 00:17:16,959
big gain scheme which is

446
00:17:16,959 --> 00:17:20,160
more efficient if we only restrict

447
00:17:20,160 --> 00:17:23,599
rcc security rather than cc2 security

448
00:17:23,599 --> 00:17:27,359
yes yes exactly or simpler to construct

449
00:17:27,359 --> 00:17:31,919
generally i mean there are some that

450
00:17:31,919 --> 00:17:33,840
simply cannot be achieved by cc2

451
00:17:33,840 --> 00:17:35,280
security

452
00:17:35,280 --> 00:17:38,400
um so i mean in one hand on one hand

453
00:17:38,400 --> 00:17:38,799
they're

454
00:17:38,799 --> 00:17:40,640
easier to construct because otherwise

455
00:17:40,640 --> 00:17:42,880
it's impossible for example for

456
00:17:42,880 --> 00:17:45,919
a re-randomizable encryption for which

457
00:17:45,919 --> 00:17:49,280
cc2 is just too strong

458
00:17:50,240 --> 00:17:52,799
i hope this answers the question

459
00:17:52,799 --> 00:17:56,960
regarding efficiency i'm not sure

460
00:17:58,000 --> 00:18:00,000
okay thanks so i guess if there is a

461
00:18:00,000 --> 00:18:02,880
follow-up question

462
00:18:02,960 --> 00:18:07,120
please write in the in the chat any any

463
00:18:07,120 --> 00:18:15,039
more questions

464
00:18:15,039 --> 00:18:18,799
um so maybe um you you already mentioned

465
00:18:18,799 --> 00:18:21,039
that there is a problem with the rcca

466
00:18:21,039 --> 00:18:22,000
security

467
00:18:22,000 --> 00:18:24,640
uh with the that you have with uh with

468
00:18:24,640 --> 00:18:25,120
small

469
00:18:25,120 --> 00:18:26,880
like when the message space is small

470
00:18:26,880 --> 00:18:28,400
because you don't get actually

471
00:18:28,400 --> 00:18:31,039
uh confidential communication like your

472
00:18:31,039 --> 00:18:31,760
benchmark

473
00:18:31,760 --> 00:18:35,679
mark one can you say uh why like

474
00:18:35,679 --> 00:18:38,000
why this is the case or or kind of what

475
00:18:38,000 --> 00:18:39,760
goes wrong

476
00:18:39,760 --> 00:18:42,320
uh so why benchmark one is not achieved

477
00:18:42,320 --> 00:18:43,520
for us

478
00:18:43,520 --> 00:18:46,880
yes yes exactly so the issue is that

479
00:18:46,880 --> 00:18:49,360
there might be pk schemes which are

480
00:18:49,360 --> 00:18:50,480
malleable

481
00:18:50,480 --> 00:18:53,440
uh and still all are in darcy secure for

482
00:18:53,440 --> 00:18:54,240
example

483
00:18:54,240 --> 00:18:56,960
if you consider the binary message space

484
00:18:56,960 --> 00:18:57,440
then

485
00:18:57,440 --> 00:18:59,200
when you submit two challenges to the

486
00:18:59,200 --> 00:19:01,120
game you just get well

487
00:19:01,120 --> 00:19:03,039
presumably one encryption of zero and

488
00:19:03,039 --> 00:19:05,039
one encryption of one

489
00:19:05,039 --> 00:19:08,160
and then you simply are in the

490
00:19:08,160 --> 00:19:09,919
decryption oracle is very useless

491
00:19:09,919 --> 00:19:10,720
because

492
00:19:10,720 --> 00:19:13,760
it you it just tells you whether the the

493
00:19:13,760 --> 00:19:15,679
ciphertext like it's a valid ciphertext

494
00:19:15,679 --> 00:19:17,360
in which case it outputs test

495
00:19:17,360 --> 00:19:19,840
or if it is some some bad ciphertext and

496
00:19:19,840 --> 00:19:21,120
it replies with blood but

497
00:19:21,120 --> 00:19:23,840
otherwise it just does not help so even

498
00:19:23,840 --> 00:19:25,600
mulling attacks cannot be translated

499
00:19:25,600 --> 00:19:26,799
into something that

500
00:19:26,799 --> 00:19:31,440
allowed to win the rcc security game

501
00:19:31,440 --> 00:19:33,360
yes thanks that makes sense thanks very

502
00:19:33,360 --> 00:19:34,640
much thanks

503
00:19:34,640 --> 00:19:37,600
okay so i think we can move on to the

504
00:19:37,600 --> 00:19:39,360
next session thanks again very much for

505
00:19:39,360 --> 00:19:41,280
your time thank you

506
00:19:41,280 --> 00:19:43,200
okay so the next talk is on group

507
00:19:43,200 --> 00:19:44,960
encryption so please uh good

508
00:19:44,960 --> 00:19:48,720
speaker yeah perfect

509
00:19:48,720 --> 00:19:50,840
so this is talk this talk is about the

510
00:19:50,840 --> 00:19:52,080
paper

511
00:19:52,080 --> 00:19:54,799
group encryption full dynamicity message

512
00:19:54,799 --> 00:19:57,120
filtering co-paste instantiation

513
00:19:57,120 --> 00:20:01,520
it's a joint work by uh

514
00:20:15,440 --> 00:20:18,480
probably have to unmute

515
00:20:19,360 --> 00:20:22,640
okay perfect introduction

516
00:20:22,640 --> 00:20:24,640
yeah and i'm going to talk about fully

517
00:20:24,640 --> 00:20:26,559
dynamical encryption uh message

518
00:20:26,559 --> 00:20:27,840
filtering and the code based

519
00:20:27,840 --> 00:20:29,280
instantiation

520
00:20:29,280 --> 00:20:32,000
and so first i will start with group

521
00:20:32,000 --> 00:20:32,640
encryption

522
00:20:32,640 --> 00:20:35,360
then briefly state our three results in

523
00:20:35,360 --> 00:20:36,320
retirement group

524
00:20:36,320 --> 00:20:38,320
encryption message filtering and the

525
00:20:38,320 --> 00:20:40,559
purpose instantiation

526
00:20:40,559 --> 00:20:44,000
so first group encryption was

527
00:20:44,000 --> 00:20:46,880
introduced by chiani janis and young in

528
00:20:46,880 --> 00:20:48,240
2007

529
00:20:48,240 --> 00:20:50,960
and it is the encryption analog of group

530
00:20:50,960 --> 00:20:51,919
signature

531
00:20:51,919 --> 00:20:54,799
and there are four parties involved the

532
00:20:54,799 --> 00:20:55,360
center

533
00:20:55,360 --> 00:20:57,600
the receiver the group manager who

534
00:20:57,600 --> 00:20:59,679
manages a group of receiver

535
00:20:59,679 --> 00:21:02,320
and also there is an opening authority

536
00:21:02,320 --> 00:21:04,559
who is capable of identifying

537
00:21:04,559 --> 00:21:08,000
the recipient of ciphertext

538
00:21:08,000 --> 00:21:09,679
group encryption allows the sender

539
00:21:09,679 --> 00:21:11,679
verifiably encrypts message

540
00:21:11,679 --> 00:21:13,840
to a certified group members while

541
00:21:13,840 --> 00:21:15,760
keeping the anonymity of the

542
00:21:15,760 --> 00:21:19,280
receiver and more formally

543
00:21:19,280 --> 00:21:21,200
group encryption allows encrypting while

544
00:21:21,200 --> 00:21:23,280
the following holds

545
00:21:23,280 --> 00:21:25,679
the ciphertext is well-formed and can be

546
00:21:25,679 --> 00:21:27,520
decrypted by some registered group

547
00:21:27,520 --> 00:21:28,400
members

548
00:21:28,400 --> 00:21:30,480
second the opening authority can

549
00:21:30,480 --> 00:21:32,880
identify the intended receiver

550
00:21:32,880 --> 00:21:35,840
and sir the prem tags satisfy certain

551
00:21:35,840 --> 00:21:37,039
requirements

552
00:21:37,039 --> 00:21:39,600
such as being a witness for some public

553
00:21:39,600 --> 00:21:41,120
relation

554
00:21:41,120 --> 00:21:43,360
and group encryption skin have many

555
00:21:43,360 --> 00:21:44,960
appealing privacy preserving

556
00:21:44,960 --> 00:21:45,919
applications

557
00:21:45,919 --> 00:21:48,720
such as in encrypted email filtering

558
00:21:48,720 --> 00:21:51,039
anonymous chess asset party applications

559
00:21:51,039 --> 00:21:55,679
and secure obvious retrieval storage

560
00:21:55,679 --> 00:21:58,480
and so far group encryption has been

561
00:21:58,480 --> 00:21:59,120
much

562
00:21:59,120 --> 00:22:01,280
less well-studied and we aim to

563
00:22:01,280 --> 00:22:02,960
contribute to the development

564
00:22:02,960 --> 00:22:05,679
of group encryption given its compiling

565
00:22:05,679 --> 00:22:07,760
features and mass application

566
00:22:07,760 --> 00:22:10,480
and now i will identify several

567
00:22:10,480 --> 00:22:12,960
limitations of existing group encryption

568
00:22:12,960 --> 00:22:14,159
schemes

569
00:22:14,159 --> 00:22:16,720
and the first limitation exists in use

570
00:22:16,720 --> 00:22:17,600
certification

571
00:22:17,600 --> 00:22:20,799
and the kty model allows dynamic

572
00:22:20,799 --> 00:22:22,559
enrollment of new users

573
00:22:22,559 --> 00:22:25,039
to the group it does not provide any

574
00:22:25,039 --> 00:22:27,760
mechanism to prevent revoked users from

575
00:22:27,760 --> 00:22:30,320
decrypting new ciphertext intended for

576
00:22:30,320 --> 00:22:31,280
them

577
00:22:31,280 --> 00:22:35,919
even though this revoked user

578
00:22:35,919 --> 00:22:39,200
will expel from some misbehaviors

579
00:22:39,200 --> 00:22:41,280
or they are retired from the

580
00:22:41,280 --> 00:22:42,559
organizations

581
00:22:42,559 --> 00:22:45,039
so a formal treatment of free dynamic

582
00:22:45,039 --> 00:22:46,240
group encryption

583
00:22:46,240 --> 00:22:49,440
is highly desirable the second

584
00:22:49,440 --> 00:22:51,679
limitation is about the usefulness of

585
00:22:51,679 --> 00:22:54,240
existing group encryption skin scheme in

586
00:22:54,240 --> 00:22:55,760
the context of email

587
00:22:55,760 --> 00:22:59,440
filtering so in all no instantiation of

588
00:22:59,440 --> 00:23:00,720
group encryption

589
00:23:00,720 --> 00:23:03,760
the relations for messages are defined

590
00:23:03,760 --> 00:23:05,520
according to the computationally hard

591
00:23:05,520 --> 00:23:08,799
problems and for example the discrete

592
00:23:08,799 --> 00:23:11,200
log relation is employed

593
00:23:11,200 --> 00:23:14,320
in the kty model for message filtering

594
00:23:14,320 --> 00:23:16,640
and this treatment fit the definition of

595
00:23:16,640 --> 00:23:18,400
good encryption

596
00:23:18,400 --> 00:23:20,880
but in our real life it is hard to

597
00:23:20,880 --> 00:23:22,240
sample a witness

598
00:23:22,240 --> 00:23:25,280
to satisfy the relation so

599
00:23:25,280 --> 00:23:28,080
can we design a group encryption with

600
00:23:28,080 --> 00:23:28,640
some

601
00:23:28,640 --> 00:23:32,080
expressive policies and

602
00:23:32,080 --> 00:23:33,840
third regarding the diversity of

603
00:23:33,840 --> 00:23:35,679
concrete computational

604
00:23:35,679 --> 00:23:37,840
assumptions used in building group

605
00:23:37,840 --> 00:23:39,039
encryption

606
00:23:39,039 --> 00:23:41,200
among all existing schemes the only one

607
00:23:41,200 --> 00:23:42,559
that is known

608
00:23:42,559 --> 00:23:44,000
to be content resistant is the

609
00:23:44,000 --> 00:23:45,919
lattice-based construction

610
00:23:45,919 --> 00:23:49,039
and this reads the question of realizing

611
00:23:49,039 --> 00:23:51,840
group encryption based on alternative

612
00:23:51,840 --> 00:23:53,520
quantum resistance assumption

613
00:23:53,520 --> 00:23:56,159
such as can we can share code-based

614
00:23:56,159 --> 00:23:58,159
group encryption

615
00:23:58,159 --> 00:24:01,120
so we have three contributions the first

616
00:24:01,120 --> 00:24:03,200
is the formization of free dynamic

617
00:24:03,200 --> 00:24:06,000
encryption and we realize message

618
00:24:06,000 --> 00:24:06,640
filtering

619
00:24:06,640 --> 00:24:09,440
with two expressive policies and we can

620
00:24:09,440 --> 00:24:11,200
check the first code based group

621
00:24:11,200 --> 00:24:11,840
encryption

622
00:24:11,840 --> 00:24:14,960
scheme follow our this model and these

623
00:24:14,960 --> 00:24:16,840
two suggested

624
00:24:16,840 --> 00:24:19,520
policies so i will go to the first

625
00:24:19,520 --> 00:24:20,799
contribution

626
00:24:20,799 --> 00:24:23,520
uh briefly uh introduce the model of

627
00:24:23,520 --> 00:24:25,440
free dynamical encryption

628
00:24:25,440 --> 00:24:26,960
then in this the opening authority and

629
00:24:26,960 --> 00:24:28,559
the group manager can

630
00:24:28,559 --> 00:24:30,559
run the setup algorithm to produce their

631
00:24:30,559 --> 00:24:32,720
public or secret keep here

632
00:24:32,720 --> 00:24:35,440
in this joint and the issue this is an

633
00:24:35,440 --> 00:24:37,600
interactive practical security run

634
00:24:37,600 --> 00:24:39,840
between a user and the good manager

635
00:24:39,840 --> 00:24:42,000
and the user obtains our own copy on

636
00:24:42,000 --> 00:24:44,559
secret key and groupmanager updates

637
00:24:44,559 --> 00:24:46,960
the good information and our model

638
00:24:46,960 --> 00:24:47,679
enables

639
00:24:47,679 --> 00:24:50,240
the group manager to remove some users

640
00:24:50,240 --> 00:24:51,360
from the group

641
00:24:51,360 --> 00:24:53,840
through a group updating algorithm so in

642
00:24:53,840 --> 00:24:55,120
this aggregation

643
00:24:55,120 --> 00:24:58,080
the group manager advance the input and

644
00:24:58,080 --> 00:25:00,480
update the group information

645
00:25:00,480 --> 00:25:02,960
and this is an encryption algorithm and

646
00:25:02,960 --> 00:25:04,159
the

647
00:25:04,159 --> 00:25:07,120
sender can encrypt weakness for its

648
00:25:07,120 --> 00:25:08,640
chosen user

649
00:25:08,640 --> 00:25:11,279
so in the proof and the verification the

650
00:25:11,279 --> 00:25:12,880
proof acquisition is run by

651
00:25:12,880 --> 00:25:15,919
the sender and who act as approver

652
00:25:15,919 --> 00:25:18,559
and demonstrate the honest computation

653
00:25:18,559 --> 00:25:19,840
of the

654
00:25:19,840 --> 00:25:22,799
cipher text and this verification reason

655
00:25:22,799 --> 00:25:24,320
can by

656
00:25:24,320 --> 00:25:26,840
any verifier to check if the proof is

657
00:25:26,840 --> 00:25:28,480
valid

658
00:25:28,480 --> 00:25:30,559
and also there is a decryption agreement

659
00:25:30,559 --> 00:25:31,840
aggregation for

660
00:25:31,840 --> 00:25:34,080
the user to decrypt the ciphertext and

661
00:25:34,080 --> 00:25:36,559
the opening authority can

662
00:25:36,559 --> 00:25:40,158
anonymize the sample text

663
00:25:40,320 --> 00:25:43,679
next is the message filtering

664
00:25:43,679 --> 00:25:46,799
so our goal is to equip our

665
00:25:46,799 --> 00:25:48,880
group encryption scheme with some basic

666
00:25:48,880 --> 00:25:51,840
yet commonly used policies for filtering

667
00:25:51,840 --> 00:25:54,720
and more precisely we consider a public

668
00:25:54,720 --> 00:25:55,120
list

669
00:25:55,120 --> 00:25:59,679
s with s1 to sk of k binary keywords

670
00:25:59,679 --> 00:26:02,720
and each of them has a bit less t

671
00:26:02,720 --> 00:26:05,039
and we want to test against less t

672
00:26:05,039 --> 00:26:06,080
substring

673
00:26:06,080 --> 00:26:09,279
of the encrypted message w

674
00:26:09,279 --> 00:26:11,440
and by the way the list can be regularly

675
00:26:11,440 --> 00:26:13,440
updated by the group manager

676
00:26:13,440 --> 00:26:16,640
depending on the interest and the needs

677
00:26:16,640 --> 00:26:18,640
of the organization

678
00:26:18,640 --> 00:26:20,880
all these keywords as i could be some

679
00:26:20,880 --> 00:26:21,919
either

680
00:26:21,919 --> 00:26:24,480
it could be some good keywords or some

681
00:26:24,480 --> 00:26:26,080
bad keywords

682
00:26:26,080 --> 00:26:29,039
so we can define two policies in the

683
00:26:29,039 --> 00:26:30,480
permissive policies

684
00:26:30,480 --> 00:26:33,039
you will accept the message if it

685
00:26:33,039 --> 00:26:35,120
contains some good keywords

686
00:26:35,120 --> 00:26:38,320
and informally w uh is a

687
00:26:38,320 --> 00:26:40,880
legitimate message even only if there

688
00:26:40,880 --> 00:26:41,440
exists

689
00:26:41,440 --> 00:26:44,799
a si keywords which is the substring of

690
00:26:44,799 --> 00:26:46,400
the message w

691
00:26:46,400 --> 00:26:49,679
and all messages do not contain any of

692
00:26:49,679 --> 00:26:50,960
these keywords are

693
00:26:50,960 --> 00:26:54,640
rejected and in the prohibitive policy

694
00:26:54,640 --> 00:26:57,360
you will accept the message if it is far

695
00:26:57,360 --> 00:26:59,840
from some bad keywords

696
00:26:59,840 --> 00:27:03,600
and the bad keywords can maybe

697
00:27:03,600 --> 00:27:05,360
corresponding to some topics that are

698
00:27:05,360 --> 00:27:07,919
illegal or simply out of groups

699
00:27:07,919 --> 00:27:11,760
or interest so we will accept the

700
00:27:11,760 --> 00:27:14,640
message if it is far from some bad cures

701
00:27:14,640 --> 00:27:17,039
and here we want to make sure even the

702
00:27:17,039 --> 00:27:17,840
adversary

703
00:27:17,840 --> 00:27:20,080
changes minor parts the bacteria are

704
00:27:20,080 --> 00:27:21,120
still

705
00:27:21,120 --> 00:27:24,640
recognizable and how we model this

706
00:27:24,640 --> 00:27:26,320
so we will make sure the distance

707
00:27:26,320 --> 00:27:29,360
between the bacterius and the message

708
00:27:29,360 --> 00:27:32,640
and is at least d so in formal words

709
00:27:32,640 --> 00:27:36,080
the for every less t substring y

710
00:27:36,080 --> 00:27:39,279
of the message and every keywords is i

711
00:27:39,279 --> 00:27:43,039
their harming distance is at least d

712
00:27:43,200 --> 00:27:45,360
and following the model of the free

713
00:27:45,360 --> 00:27:47,279
dynamical encryption and the policies we

714
00:27:47,279 --> 00:27:48,240
just mentioned

715
00:27:48,240 --> 00:27:49,840
so we can have our code-based

716
00:27:49,840 --> 00:27:51,600
instantiation

717
00:27:51,600 --> 00:27:54,240
and the idea of our code-based fully

718
00:27:54,240 --> 00:27:54,960
dynamic

719
00:27:54,960 --> 00:27:58,240
encryption so at first when a user

720
00:27:58,240 --> 00:27:59,679
requests to join the group

721
00:27:59,679 --> 00:28:01,840
it genera generates its own public and

722
00:28:01,840 --> 00:28:02,880
secret key

723
00:28:02,880 --> 00:28:05,120
then he sends the public and the zero

724
00:28:05,120 --> 00:28:06,480
hash value d to the

725
00:28:06,480 --> 00:28:09,520
manager and second to

726
00:28:09,520 --> 00:28:12,000
achieve dynamicity you will following

727
00:28:12,000 --> 00:28:14,559
the updating algorithm

728
00:28:14,559 --> 00:28:17,120
and third when sending the message

729
00:28:17,120 --> 00:28:18,240
satisfying

730
00:28:18,240 --> 00:28:21,440
uh list either of the two policies

731
00:28:21,440 --> 00:28:23,440
to the user the sender will use the

732
00:28:23,440 --> 00:28:25,600
private key to encrypt the message

733
00:28:25,600 --> 00:28:28,240
and use the public open authorities

734
00:28:28,240 --> 00:28:29,200
fabric key to

735
00:28:29,200 --> 00:28:32,399
encrypts the identity

736
00:28:32,399 --> 00:28:35,520
also the sender proves in zero knowledge

737
00:28:35,520 --> 00:28:37,520
that the message satisfies the given

738
00:28:37,520 --> 00:28:38,240
policy

739
00:28:38,240 --> 00:28:40,880
and the cipher text of the open society

740
00:28:40,880 --> 00:28:41,360
is an

741
00:28:41,360 --> 00:28:43,200
honest computer cipher text of the

742
00:28:43,200 --> 00:28:44,480
identity and

743
00:28:44,480 --> 00:28:47,360
also the this one is a correct

744
00:28:47,360 --> 00:28:48,720
ciphertext of the

745
00:28:48,720 --> 00:28:51,679
message and computing undersigned hidden

746
00:28:51,679 --> 00:28:52,960
public key

747
00:28:52,960 --> 00:28:57,279
and we satisfy this constraint

748
00:28:57,279 --> 00:28:59,840
so we construct the first code based

749
00:28:59,840 --> 00:29:01,679
fully dynamical encryption

750
00:29:01,679 --> 00:29:04,080
so compared to uh the only known group

751
00:29:04,080 --> 00:29:05,279
encryption from

752
00:29:05,279 --> 00:29:07,760
lattice-based construction and us is

753
00:29:07,760 --> 00:29:09,200
more efficient

754
00:29:09,200 --> 00:29:12,480
since we use a macro tree can see as a

755
00:29:12,480 --> 00:29:15,600
weak form of signature but

756
00:29:15,600 --> 00:29:18,080
our construction is still not practical

757
00:29:18,080 --> 00:29:19,520
due to the improvement of

758
00:29:19,520 --> 00:29:22,320
heavy zero knowledge agreement so we

759
00:29:22,320 --> 00:29:23,679
have a open question

760
00:29:23,679 --> 00:29:27,600
is can we construct practically usable

761
00:29:27,600 --> 00:29:29,919
free dynamic group encryption skin from

762
00:29:29,919 --> 00:29:33,120
post-content assumptions

763
00:29:33,200 --> 00:29:35,440
so thank you for listening and any

764
00:29:35,440 --> 00:29:37,919
questions

765
00:29:38,000 --> 00:29:39,679
thank you for the great talk so are

766
00:29:39,679 --> 00:29:41,679
there any questions from the audience

767
00:29:41,679 --> 00:29:43,600
we have time for maybe one quick

768
00:29:43,600 --> 00:29:46,080
question

769
00:29:47,039 --> 00:29:49,520
i don't see anything on suli but also

770
00:29:49,520 --> 00:29:50,159
please

771
00:29:50,159 --> 00:29:53,200
feel free to unmute maybe you mentioned

772
00:29:53,200 --> 00:29:55,279
that it has privacy applications so i

773
00:29:55,279 --> 00:29:56,720
was i was wondering whether

774
00:29:56,720 --> 00:29:59,440
it's whether this is like not doesn't

775
00:29:59,440 --> 00:30:00,880
need to be balanced a bit more because

776
00:30:00,880 --> 00:30:02,320
isn't that essentially

777
00:30:02,320 --> 00:30:04,880
as a form of keyscroll or at least

778
00:30:04,880 --> 00:30:06,320
identity escrow so

779
00:30:06,320 --> 00:30:08,240
it can be seen kind of as not

780
00:30:08,240 --> 00:30:09,840
necessarily being good for privacy to

781
00:30:09,840 --> 00:30:12,320
use group encryption

782
00:30:12,320 --> 00:30:14,320
so i was wondering whether you discussed

783
00:30:14,320 --> 00:30:16,000
that in the paper

784
00:30:16,000 --> 00:30:20,640
uh pattern i'm not very

785
00:30:20,640 --> 00:30:23,200
so can you repeat again for the question

786
00:30:23,200 --> 00:30:23,760
so the

787
00:30:23,760 --> 00:30:25,840
i think as i see the goal of group

788
00:30:25,840 --> 00:30:27,440
encryption is to also allow

789
00:30:27,440 --> 00:30:29,200
kind of the identity to be leaked so

790
00:30:29,200 --> 00:30:31,360
it's less private than just anonymous

791
00:30:31,360 --> 00:30:35,279
or key private encryption

792
00:30:35,279 --> 00:30:37,840
uh you mean compared to the key privacy

793
00:30:37,840 --> 00:30:38,960
encryption

794
00:30:38,960 --> 00:30:42,480
yeah this one is uh

795
00:30:42,480 --> 00:30:45,039
allow the sender verifiably uh encrypts

796
00:30:45,039 --> 00:30:45,760
message to

797
00:30:45,760 --> 00:30:48,000
certified group members but this one

798
00:30:48,000 --> 00:30:51,279
keep the anonymity of the receiver

799
00:30:51,279 --> 00:30:54,799
yeah but for the

800
00:30:54,799 --> 00:30:57,679
key privacy

801
00:31:01,279 --> 00:31:05,120
okay but this one

802
00:31:05,120 --> 00:31:08,480
a key privacy but this one the public

803
00:31:08,480 --> 00:31:08,960
key

804
00:31:08,960 --> 00:31:12,720
is hidden in this when we encrypting

805
00:31:12,720 --> 00:31:19,840
the messages

806
00:31:20,320 --> 00:31:24,158
okay so does this answer the question

807
00:31:25,279 --> 00:31:27,120
i think the public key is also hidden in

808
00:31:27,120 --> 00:31:28,960
in key private encryption so maybe this

809
00:31:28,960 --> 00:31:31,679
is true for both schemes

810
00:31:31,679 --> 00:31:34,159
i'm not very familiar with key privacy

811
00:31:34,159 --> 00:31:37,200
encryption yes sorry

812
00:31:37,200 --> 00:31:38,799
i mean if there is time we can discuss

813
00:31:38,799 --> 00:31:40,799
this at the end of the session because i

814
00:31:40,799 --> 00:31:43,679
i feel we have to move to the next talk

815
00:31:43,679 --> 00:31:44,640
okay thank you

816
00:31:44,640 --> 00:31:46,399
it's quite time constrained but we would

817
00:31:46,399 --> 00:31:47,679
definitely get back

818
00:31:47,679 --> 00:31:49,760
to this if if there is enough time at

819
00:31:49,760 --> 00:31:50,880
the end

820
00:31:50,880 --> 00:31:53,600
so yes and with this uh please lisa go

821
00:31:53,600 --> 00:31:55,039
ahead and the next speak can

822
00:31:55,039 --> 00:31:58,159
already sell off

823
00:31:58,159 --> 00:32:01,519
yes so the next talk will be okay thanks

824
00:32:01,519 --> 00:32:03,440
thanks for sharing the screen so the

825
00:32:03,440 --> 00:32:05,200
next talk will be bootstrapping fully

826
00:32:05,200 --> 00:32:07,200
homomorphic encryption over the integers

827
00:32:07,200 --> 00:32:08,399
in less than

828
00:32:08,399 --> 00:32:12,080
one second um this is a word by

829
00:32:12,080 --> 00:32:15,039
either vito lima pereira and the paper

830
00:32:15,039 --> 00:32:16,799
is invited to the journal of

831
00:32:16,799 --> 00:32:20,080
propoligy and uh there will

832
00:32:20,080 --> 00:32:24,080
well give the talk so please go ahead

833
00:32:24,080 --> 00:32:27,919
hi hello everybody so

834
00:32:27,919 --> 00:32:31,120
um okay so for the fully homomorphic

835
00:32:31,120 --> 00:32:32,559
encryption schemes

836
00:32:32,559 --> 00:32:34,960
nowadays we have basically two main

837
00:32:34,960 --> 00:32:36,880
families okay we have the

838
00:32:36,880 --> 00:32:40,399
schemes based on the lwe problem which i

839
00:32:40,399 --> 00:32:42,000
guess you already know

840
00:32:42,000 --> 00:32:44,640
and we have the schemes based on the

841
00:32:44,640 --> 00:32:45,440
approximate

842
00:32:45,440 --> 00:32:48,799
greatest commodivizer problem so we

843
00:32:48,799 --> 00:32:52,080
call this simply agcd and in this

844
00:32:52,080 --> 00:32:55,600
problem the secret is simply an integer

845
00:32:55,600 --> 00:32:59,360
okay and then we simple uniform elements

846
00:32:59,360 --> 00:32:59,919
like

847
00:32:59,919 --> 00:33:03,679
here we sample noise elements and then

848
00:33:03,679 --> 00:33:08,480
we have the agcd samples which are

849
00:33:08,480 --> 00:33:11,679
of this form so p times q plus uh

850
00:33:11,679 --> 00:33:14,880
some noise so a multiple of p of p plus

851
00:33:14,880 --> 00:33:17,039
some noise okay and the problem is given

852
00:33:17,039 --> 00:33:18,960
these approximate multiples of

853
00:33:18,960 --> 00:33:22,080
p uh we have to recover p

854
00:33:22,080 --> 00:33:26,000
itself so the fhe schemes based on this

855
00:33:26,000 --> 00:33:26,720
problem

856
00:33:26,720 --> 00:33:31,919
are what we call fhe over the integers

857
00:33:31,919 --> 00:33:35,600
okay now for the schemes based on the lw

858
00:33:35,600 --> 00:33:38,640
problem we have fee and tfhe

859
00:33:38,640 --> 00:33:40,399
which implement about strapping that

860
00:33:40,399 --> 00:33:42,559
runs in less than one second

861
00:33:42,559 --> 00:33:46,399
but for his schemes uh of this family

862
00:33:46,399 --> 00:33:48,399
fhe over the integers we have no such

863
00:33:48,399 --> 00:33:49,519
bootstrapping

864
00:33:49,519 --> 00:33:52,720
so the goal of this paper is

865
00:33:52,720 --> 00:33:55,760
closing this gap between these two

866
00:33:55,760 --> 00:33:59,679
families of schemes okay

867
00:33:59,679 --> 00:34:03,760
so i will now briefly present

868
00:34:03,760 --> 00:34:05,919
what i did in this paper to try to close

869
00:34:05,919 --> 00:34:07,519
this gap so the first thing was

870
00:34:07,519 --> 00:34:09,679
proposing a gsw

871
00:34:09,679 --> 00:34:12,560
like a scheme that's based on this

872
00:34:12,560 --> 00:34:13,760
problem

873
00:34:13,760 --> 00:34:16,960
so first we

874
00:34:16,960 --> 00:34:19,359
defined a new problem which we call a g

875
00:34:19,359 --> 00:34:20,159
c d

876
00:34:20,159 --> 00:34:21,760
and in this problem we still have the

877
00:34:21,760 --> 00:34:23,679
secret p which is an integer

878
00:34:23,679 --> 00:34:26,800
but now q and r are simply uh

879
00:34:26,800 --> 00:34:28,719
polynomials they are polynomials that

880
00:34:28,719 --> 00:34:31,040
are just uh

881
00:34:31,040 --> 00:34:34,159
composed by the old q and rs that we

882
00:34:34,159 --> 00:34:35,440
have

883
00:34:35,440 --> 00:34:37,760
for the agcd problem and then we

884
00:34:37,760 --> 00:34:39,839
randomize this polynomial with a secret

885
00:34:39,839 --> 00:34:40,719
polynomial k

886
00:34:40,719 --> 00:34:44,159
in some cycloatomic ring r

887
00:34:44,159 --> 00:34:46,960
now using this problem we we can

888
00:34:46,960 --> 00:34:48,560
construct a gsw

889
00:34:48,560 --> 00:34:51,760
scheme that can encrypt polynomials

890
00:34:51,760 --> 00:34:53,839
m in two formats so we can encrypt the

891
00:34:53,839 --> 00:34:55,280
polynomial m into

892
00:34:55,280 --> 00:34:58,000
another polynomial or we can encrypt a

893
00:34:58,000 --> 00:34:59,200
polynomial m

894
00:34:59,200 --> 00:35:02,640
into a vector of polynomials and then

895
00:35:02,640 --> 00:35:04,720
we define the mixed homomorphic

896
00:35:04,720 --> 00:35:06,800
multiplication

897
00:35:06,800 --> 00:35:09,280
that can multiply this ciphertext of

898
00:35:09,280 --> 00:35:11,359
these two formats okay so this is

899
00:35:11,359 --> 00:35:14,800
more or less like the tfhe external

900
00:35:14,800 --> 00:35:15,599
product

901
00:35:15,599 --> 00:35:17,760
and it's more efficient than simply

902
00:35:17,760 --> 00:35:19,440
using the gsw

903
00:35:19,440 --> 00:35:22,720
homomorphic multiplication

904
00:35:22,720 --> 00:35:24,800
now the second contribution of the paper

905
00:35:24,800 --> 00:35:26,000
is what we called

906
00:35:26,000 --> 00:35:28,000
hidden approximate modulo switching so

907
00:35:28,000 --> 00:35:30,320
we have the base scheme ciphertext

908
00:35:30,320 --> 00:35:33,920
which is an integer c and

909
00:35:33,920 --> 00:35:36,160
here we have r which is the noise and

910
00:35:36,160 --> 00:35:38,000
the noise is large so what we want to do

911
00:35:38,000 --> 00:35:40,560
is to use the jswe scheme

912
00:35:40,560 --> 00:35:42,800
to compute the decryption function of

913
00:35:42,800 --> 00:35:45,280
this basis scheme homomorphically

914
00:35:45,280 --> 00:35:47,680
but this means that that we have to

915
00:35:47,680 --> 00:35:48,480
reduce c

916
00:35:48,480 --> 00:35:51,440
module p homomorphically and this is a

917
00:35:51,440 --> 00:35:52,400
problem because

918
00:35:52,400 --> 00:35:56,240
p is secret and also in the

919
00:35:56,240 --> 00:35:59,040
a gcd problem p is exponentially large

920
00:35:59,040 --> 00:36:01,839
in the security parameter lambda

921
00:36:01,839 --> 00:36:05,839
so the gsw scheme cannot handle this

922
00:36:05,839 --> 00:36:09,119
okay so what we do is we encrypt the

923
00:36:09,119 --> 00:36:10,800
values that are close

924
00:36:10,800 --> 00:36:14,000
to these fractions and over p

925
00:36:14,000 --> 00:36:17,119
in the bootstrapping keys and then we

926
00:36:17,119 --> 00:36:20,480
can use the bootstrapping keys to

927
00:36:20,480 --> 00:36:24,000
switch to replace this b here by this

928
00:36:24,000 --> 00:36:24,480
value

929
00:36:24,480 --> 00:36:27,280
n which is public so it's no more no

930
00:36:27,280 --> 00:36:28,560
longer secret and it's

931
00:36:28,560 --> 00:36:31,440
small enough for the gsw scheme to

932
00:36:31,440 --> 00:36:33,119
handle it

933
00:36:33,119 --> 00:36:36,000
so at the end of this step what we get

934
00:36:36,000 --> 00:36:38,160
is a gsw encryption

935
00:36:38,160 --> 00:36:41,680
of a power of y that depends on m okay

936
00:36:41,680 --> 00:36:45,440
y is simply x square in this case

937
00:36:45,440 --> 00:36:47,440
now what we have to do to finish the

938
00:36:47,440 --> 00:36:48,720
bootstrap is to

939
00:36:48,720 --> 00:36:51,599
get this to transform this gsw

940
00:36:51,599 --> 00:36:52,720
encryption

941
00:36:52,720 --> 00:36:55,920
that depends on m into a base scheme

942
00:36:55,920 --> 00:36:56,720
encryption

943
00:36:56,720 --> 00:36:59,680
of this format again so here we have an

944
00:36:59,680 --> 00:37:01,280
encryption that is actually a polynomial

945
00:37:01,280 --> 00:37:04,000
and here we have an integer

946
00:37:04,000 --> 00:37:07,920
so to do so we propose a functional key

947
00:37:07,920 --> 00:37:09,599
switching procedure so we

948
00:37:09,599 --> 00:37:11,440
we with this procedure we can take a

949
00:37:11,440 --> 00:37:13,200
cipher text that belongs

950
00:37:13,200 --> 00:37:16,079
to a ring r1 and encrypts a message me

951
00:37:16,079 --> 00:37:17,040
when there's some

952
00:37:17,040 --> 00:37:20,560
key and we can output the ciphertext in

953
00:37:20,560 --> 00:37:23,119
another ring encrypting a function of

954
00:37:23,119 --> 00:37:24,079
the message

955
00:37:24,079 --> 00:37:27,280
under a second key okay

956
00:37:27,280 --> 00:37:29,680
so in particular you see that if we set

957
00:37:29,680 --> 00:37:31,359
n2 here to one

958
00:37:31,359 --> 00:37:34,839
then this ring r2 is is just the

959
00:37:34,839 --> 00:37:36,160
integers

960
00:37:36,160 --> 00:37:38,320
and also because we know some bounds to

961
00:37:38,320 --> 00:37:39,520
r into

962
00:37:39,520 --> 00:37:42,640
delta here we can choose m

963
00:37:42,640 --> 00:37:45,760
such that m of this power of y is

964
00:37:45,760 --> 00:37:49,040
sorry f of this power of y is m

965
00:37:49,040 --> 00:37:53,040
okay so this means that we can use this

966
00:37:53,040 --> 00:37:56,079
um general procedure to

967
00:37:56,079 --> 00:37:59,599
switch from a gsw encryption of a power

968
00:37:59,599 --> 00:38:03,359
of y that depends on m to a base scheme

969
00:38:03,359 --> 00:38:04,240
ciphertext

970
00:38:04,240 --> 00:38:06,720
of m

971
00:38:07,359 --> 00:38:09,920
so when we put all this together what we

972
00:38:09,920 --> 00:38:11,280
have is

973
00:38:11,280 --> 00:38:13,520
this bootstrapping we start with an agcd

974
00:38:13,520 --> 00:38:15,920
encryption with them with large noise

975
00:38:15,920 --> 00:38:19,200
we use the mixed homomorphic product of

976
00:38:19,200 --> 00:38:21,280
the gsw scheme

977
00:38:21,280 --> 00:38:23,920
and then we produce a jsw encryption of

978
00:38:23,920 --> 00:38:24,800
a power

979
00:38:24,800 --> 00:38:27,839
of y that depends on m and this is the

980
00:38:27,839 --> 00:38:28,960
step that

981
00:38:28,960 --> 00:38:32,160
reduces the noise and then we use the

982
00:38:32,160 --> 00:38:32,960
functional

983
00:38:32,960 --> 00:38:36,240
key switching to change the format and

984
00:38:36,240 --> 00:38:39,520
set back an encryption of m under the

985
00:38:39,520 --> 00:38:40,400
agcd

986
00:38:40,400 --> 00:38:44,400
uh problem okay so

987
00:38:44,400 --> 00:38:46,400
in this paper we have adapted the

988
00:38:46,400 --> 00:38:47,839
bootstrapping from

989
00:38:47,839 --> 00:38:51,119
fiu and tf80 to fhe over the integers

990
00:38:51,119 --> 00:38:54,640
and there is also a proof of concept

991
00:38:54,640 --> 00:38:57,839
implementation in c plus and you can

992
00:38:57,839 --> 00:39:01,680
find the source code on github

993
00:39:01,680 --> 00:39:04,079
and well if you think this is

994
00:39:04,079 --> 00:39:05,680
interesting you can check the paper

995
00:39:05,680 --> 00:39:08,079
and of course you can send me messages

996
00:39:08,079 --> 00:39:09,599
emails and i will be

997
00:39:09,599 --> 00:39:14,240
glad to discuss thank you

998
00:39:14,240 --> 00:39:16,560
thank you very much uh for the nice talk

999
00:39:16,560 --> 00:39:19,040
this sounds uh very cool uh so it are

1000
00:39:19,040 --> 00:39:19,440
there

1001
00:39:19,440 --> 00:39:23,520
any questions in the audience or on

1002
00:39:23,520 --> 00:39:26,480
yes russell yeah so i have two questions

1003
00:39:26,480 --> 00:39:27,599
so first

1004
00:39:27,599 --> 00:39:30,880
what are the advantages of schemes based

1005
00:39:30,880 --> 00:39:33,839
on hcd than those based on lwe

1006
00:39:33,839 --> 00:39:35,760
and the second question is that as i

1007
00:39:35,760 --> 00:39:37,280
understand you

1008
00:39:37,280 --> 00:39:39,440
in this short talk that you constructed

1009
00:39:39,440 --> 00:39:42,160
a new scheme based on agct so but

1010
00:39:42,160 --> 00:39:44,880
does this mean that the existing agcd

1011
00:39:44,880 --> 00:39:46,000
based schemes

1012
00:39:46,000 --> 00:39:50,320
still don't have fast bootstrapping

1013
00:39:50,800 --> 00:39:52,480
okay so the first one is about the

1014
00:39:52,480 --> 00:39:54,960
advantage of agcd over other schemes

1015
00:39:54,960 --> 00:39:56,320
right

1016
00:39:56,320 --> 00:39:59,200
well this is actually a trick question

1017
00:39:59,200 --> 00:40:00,320
so

1018
00:40:00,320 --> 00:40:03,119
the first papers that proposed uh

1019
00:40:03,119 --> 00:40:05,680
schemes based on the agcd problem

1020
00:40:05,680 --> 00:40:08,640
argued that you have advantages because

1021
00:40:08,640 --> 00:40:10,240
all the primitives that you use are

1022
00:40:10,240 --> 00:40:11,359
simpler

1023
00:40:11,359 --> 00:40:14,000
so for instance you don't have discrete

1024
00:40:14,000 --> 00:40:15,839
gaussian distributions you see

1025
00:40:15,839 --> 00:40:19,359
you just have integers uh maybe

1026
00:40:19,359 --> 00:40:22,720
it's uh maybe it's easier to

1027
00:40:22,720 --> 00:40:26,400
to do a constant time implementation for

1028
00:40:26,400 --> 00:40:27,280
instance

1029
00:40:27,280 --> 00:40:31,740
yeah but yeah i would say that simply

1030
00:40:31,740 --> 00:40:33,040
[Music]

1031
00:40:33,040 --> 00:40:36,319
having schemes based on another

1032
00:40:36,319 --> 00:40:38,079
hardness assumption is already

1033
00:40:38,079 --> 00:40:40,000
interesting enough

1034
00:40:40,000 --> 00:40:43,040
for us to work with them okay and

1035
00:40:43,040 --> 00:40:46,079
um yeah the second question is

1036
00:40:46,079 --> 00:40:49,920
why why i construct another scheme right

1037
00:40:49,920 --> 00:40:53,200
so actually construct actually i

1038
00:40:53,200 --> 00:40:55,920
construct a gsw scheme

1039
00:40:55,920 --> 00:40:59,040
based on the agcd problem because the

1040
00:40:59,040 --> 00:41:02,560
gsw schemes that exist they are not

1041
00:41:02,560 --> 00:41:04,079
efficient enough to work with

1042
00:41:04,079 --> 00:41:05,760
polynomials you see that i had to

1043
00:41:05,760 --> 00:41:07,520
encrypt and multiply

1044
00:41:07,520 --> 00:41:11,680
polynomials yeah but um

1045
00:41:11,680 --> 00:41:13,680
yeah of course there are already fully

1046
00:41:13,680 --> 00:41:15,520
homomorphic encryption based on the

1047
00:41:15,520 --> 00:41:17,440
gcd so you have these schemes that can

1048
00:41:17,440 --> 00:41:18,720
be bootstrapped

1049
00:41:18,720 --> 00:41:20,880
but not in this framing work that allows

1050
00:41:20,880 --> 00:41:22,960
us to bootstrap

1051
00:41:22,960 --> 00:41:25,119
uh in less than one second you see with

1052
00:41:25,119 --> 00:41:26,720
uh in which you have

1053
00:41:26,720 --> 00:41:30,000
fastboot strapping okay so those games

1054
00:41:30,000 --> 00:41:31,119
do don't have

1055
00:41:31,119 --> 00:41:34,319
fast bootstrap no no there's a scheme

1056
00:41:34,319 --> 00:41:37,040
the existing schemes are more like the

1057
00:41:37,040 --> 00:41:38,079
gsw

1058
00:41:38,079 --> 00:41:41,200
so it's very hard to bootstrap

1059
00:41:41,200 --> 00:41:44,960
or let's say they are like uh

1060
00:41:44,960 --> 00:41:47,680
bgv but not really but you can see it's

1061
00:41:47,680 --> 00:41:49,839
also hard to bootstrap

1062
00:41:49,839 --> 00:41:53,200
but which step takes a lot of time

1063
00:41:53,200 --> 00:41:55,520
thanks

1064
00:41:57,520 --> 00:42:03,080
any other questions

1065
00:42:03,080 --> 00:42:05,920
[Music]

1066
00:42:05,920 --> 00:42:10,079
here's the question so the question is

1067
00:42:10,079 --> 00:42:12,480
does the security of your scheme reduce

1068
00:42:12,480 --> 00:42:14,359
to this new

1069
00:42:14,359 --> 00:42:17,200
ragcd assumption can we have confidence

1070
00:42:17,200 --> 00:42:19,520
in the hardness of that assumption

1071
00:42:19,520 --> 00:42:23,680
um well yeah this problem cannot be

1072
00:42:23,680 --> 00:42:24,880
easier than the

1073
00:42:24,880 --> 00:42:28,240
original gcd problem the catch here

1074
00:42:28,240 --> 00:42:31,280
so this is for sure but the catch here

1075
00:42:31,280 --> 00:42:32,880
is that actually i used

1076
00:42:32,880 --> 00:42:35,280
uh this problem to select this uh

1077
00:42:35,280 --> 00:42:36,319
parameters that are

1078
00:42:36,319 --> 00:42:39,440
smaller than what i would select

1079
00:42:39,440 --> 00:42:44,160
uh if i simply had used the agcd

1080
00:42:44,160 --> 00:42:47,359
huh so this is the catch but

1081
00:42:47,359 --> 00:42:50,079
you can also prove the security under

1082
00:42:50,079 --> 00:42:50,400
the

1083
00:42:50,400 --> 00:42:53,920
agcd itself but then you

1084
00:42:53,920 --> 00:42:57,200
yeah but i mean we have the sketch with

1085
00:42:57,200 --> 00:43:00,720
the parameters that's that's true

1086
00:43:00,800 --> 00:43:03,280
so if you just if you simply select the

1087
00:43:03,280 --> 00:43:04,480
parameters

1088
00:43:04,480 --> 00:43:06,960
take into account the attacks against

1089
00:43:06,960 --> 00:43:08,960
the

1090
00:43:08,960 --> 00:43:12,079
acd the agcd problem

1091
00:43:12,079 --> 00:43:14,240
then you basically have to increase the

1092
00:43:14,240 --> 00:43:15,599
parameters by a factor

1093
00:43:15,599 --> 00:43:18,000
of n

1094
00:43:18,720 --> 00:43:20,960
okay thank you very much i hope this

1095
00:43:20,960 --> 00:43:22,560
answers the question and i think we

1096
00:43:22,560 --> 00:43:23,760
should move on to the

1097
00:43:23,760 --> 00:43:26,880
next talk for timing so thank you again

1098
00:43:26,880 --> 00:43:29,440
very nice

1099
00:43:30,800 --> 00:43:33,440
thanks a lot so the next talk is about

1100
00:43:33,440 --> 00:43:34,720
the paper

1101
00:43:34,720 --> 00:43:38,160
rate one key dependent message security

1102
00:43:38,160 --> 00:43:40,319
via reusable homomorphic extractor

1103
00:43:40,319 --> 00:43:42,560
against correlated source attacks

1104
00:43:42,560 --> 00:43:46,160
it's a joint work um by gg ly

1105
00:43:46,160 --> 00:43:48,720
feng hang liu and jalon wang and she

1106
00:43:48,720 --> 00:43:50,400
should give the talk

1107
00:43:50,400 --> 00:43:53,520
please go ahead thanks thank you for

1108
00:43:53,520 --> 00:43:54,319
introduction

1109
00:43:54,319 --> 00:43:57,520
uh hello everyone i'm chili my paper is

1110
00:43:57,520 --> 00:43:57,920
a real

1111
00:43:57,920 --> 00:44:00,240
wine kdm security very usable morphing

1112
00:44:00,240 --> 00:44:01,119
structure

1113
00:44:01,119 --> 00:44:02,800
this is a joint work with heart and

1114
00:44:02,800 --> 00:44:04,400
jordan

1115
00:44:04,400 --> 00:44:06,960
when considering security for inclusion

1116
00:44:06,960 --> 00:44:07,520
schemes

1117
00:44:07,520 --> 00:44:10,400
we always assume that the the messages

1118
00:44:10,400 --> 00:44:11,760
are independent of the

1119
00:44:11,760 --> 00:44:14,400
uh the strict key however in some

1120
00:44:14,400 --> 00:44:16,800
special

1121
00:44:16,800 --> 00:44:20,160
sorry in some in some situations

1122
00:44:20,160 --> 00:44:23,440
the message depends on the secret key

1123
00:44:23,440 --> 00:44:25,760
in order to solve the security issue in

1124
00:44:25,760 --> 00:44:27,599
this special case

1125
00:44:27,599 --> 00:44:30,640
the notion of kdm security has been

1126
00:44:30,640 --> 00:44:32,960
proposed

1127
00:44:32,960 --> 00:44:35,280
and the relationship between message and

1128
00:44:35,280 --> 00:44:36,720
the sixth key

1129
00:44:36,720 --> 00:44:38,640
can be generally described by a function

1130
00:44:38,640 --> 00:44:40,000
class

1131
00:44:40,000 --> 00:44:42,640
in this case the queries from adversary

1132
00:44:42,640 --> 00:44:43,280
is modded

1133
00:44:43,280 --> 00:44:46,640
as a function f and the answer is the

1134
00:44:46,640 --> 00:44:50,800
corresponding subtitle more formally

1135
00:44:50,800 --> 00:44:53,280
the kdm security can be described by a

1136
00:44:53,280 --> 00:44:54,240
security

1137
00:44:54,240 --> 00:44:56,000
game between the challenger and the

1138
00:44:56,000 --> 00:44:58,079
adversary at the beginning

1139
00:44:58,079 --> 00:45:00,400
the challenger first choose a run bid

1140
00:45:00,400 --> 00:45:01,440
and understand

1141
00:45:01,440 --> 00:45:03,599
the most public key to the adversary

1142
00:45:03,599 --> 00:45:05,680
then otherwise we can conduct

1143
00:45:05,680 --> 00:45:09,599
a key extraction and the kdm queries

1144
00:45:09,599 --> 00:45:12,000
finally the reverse will respond a bit b

1145
00:45:12,000 --> 00:45:13,280
prime we see that

1146
00:45:13,280 --> 00:45:17,200
adversary wins again if b equals b prime

1147
00:45:17,200 --> 00:45:19,359
in this formal definition the class of

1148
00:45:19,359 --> 00:45:20,800
function f

1149
00:45:20,800 --> 00:45:22,960
is an important parameter which is

1150
00:45:22,960 --> 00:45:25,200
called the kdm challenge function class

1151
00:45:25,200 --> 00:45:26,880
there is also another important

1152
00:45:26,880 --> 00:45:29,920
parameter um

1153
00:45:29,920 --> 00:45:32,640
the number of number of different public

1154
00:45:32,640 --> 00:45:34,480
keys in the security

1155
00:45:34,480 --> 00:45:37,440
industry game in a modular case we call

1156
00:45:37,440 --> 00:45:40,480
this ktm umbra security

1157
00:45:40,480 --> 00:45:43,599
there uses many pku-ib schemes that are

1158
00:45:43,599 --> 00:45:46,000
ktm circuit with respect to different

1159
00:45:46,000 --> 00:45:49,200
ktm challenge function class and

1160
00:45:49,200 --> 00:45:52,240
the number uh umbra however

1161
00:45:52,240 --> 00:45:54,800
all the schemes have a common drawback

1162
00:45:54,800 --> 00:45:56,160
their information

1163
00:45:56,160 --> 00:45:59,599
their information rates are quite small

1164
00:45:59,599 --> 00:46:01,520
my question in this paper is how to

1165
00:46:01,520 --> 00:46:03,839
construct a ktm circuit pke

1166
00:46:03,839 --> 00:46:07,200
with optimal information rate and

1167
00:46:07,200 --> 00:46:10,800
the my result of this paper consists of

1168
00:46:10,800 --> 00:46:13,200
ktm1 circuit pke with optimal

1169
00:46:13,200 --> 00:46:14,079
information rate

1170
00:46:14,079 --> 00:46:17,200
kdm umbra circle pke with optimal

1171
00:46:17,200 --> 00:46:18,720
general measure rate for unbounded

1172
00:46:18,720 --> 00:46:19,920
polynomial number

1173
00:46:19,920 --> 00:46:22,160
ktm and browse cycle ibe with optimal

1174
00:46:22,160 --> 00:46:23,040
information rate

1175
00:46:23,040 --> 00:46:24,720
for unbounded polynomial umbra

1176
00:46:24,720 --> 00:46:27,920
innovation about pku or ib schemes

1177
00:46:27,920 --> 00:46:30,800
is also leakage resilient with the

1178
00:46:30,800 --> 00:46:32,560
optimal liquid rate against the blood

1179
00:46:32,560 --> 00:46:33,520
leakage from

1180
00:46:33,520 --> 00:46:36,240
blood like function here i just focus on

1181
00:46:36,240 --> 00:46:37,520
the first result

1182
00:46:37,520 --> 00:46:40,839
and others can be viewed as each

1183
00:46:40,839 --> 00:46:43,839
extensions

1184
00:46:45,280 --> 00:46:48,000
in order to introduce our technique more

1185
00:46:48,000 --> 00:46:48,640
clearly

1186
00:46:48,640 --> 00:46:51,520
i adopted the following framework view

1187
00:46:51,520 --> 00:46:52,720
first

1188
00:46:52,720 --> 00:46:55,359
this paper tells us that homomorphic wps

1189
00:46:55,359 --> 00:46:57,359
implies ktm1 security

1190
00:46:57,359 --> 00:46:59,440
second broker's key at all the people

1191
00:46:59,440 --> 00:47:00,480
tells us that

1192
00:47:00,480 --> 00:47:02,800
batch encryption plus xo operation

1193
00:47:02,800 --> 00:47:04,880
implies ktm1 security

1194
00:47:04,880 --> 00:47:07,920
and leakage resilience inspired by these

1195
00:47:07,920 --> 00:47:09,119
two papers

1196
00:47:09,119 --> 00:47:11,119
we consider whether we can get much

1197
00:47:11,119 --> 00:47:13,280
better ktm circuit constructions

1198
00:47:13,280 --> 00:47:16,480
from wgps with additional structure

1199
00:47:16,480 --> 00:47:19,599
and homogeneous charter of course of

1200
00:47:19,599 --> 00:47:21,680
course

1201
00:47:21,680 --> 00:47:24,640
due to of course due to time limit the

1202
00:47:24,640 --> 00:47:25,440
detailed

1203
00:47:25,440 --> 00:47:27,200
introductions of building blocks are

1204
00:47:27,200 --> 00:47:29,920
different to a paper

1205
00:47:29,920 --> 00:47:32,480
in particular with two building blocks

1206
00:47:32,480 --> 00:47:34,400
or basic constructions can be described

1207
00:47:34,400 --> 00:47:36,400
can be described in the following way

1208
00:47:36,400 --> 00:47:39,520
first location algorithm is that runs

1209
00:47:39,520 --> 00:47:40,720
the center of algorithm

1210
00:47:40,720 --> 00:47:43,680
of wps

1211
00:47:44,079 --> 00:47:48,079
oh sorry and

1212
00:47:48,079 --> 00:47:51,280
the encryption algorithm is that run the

1213
00:47:51,280 --> 00:47:54,480
valid income solution algorithm of wps

1214
00:47:54,480 --> 00:47:58,400
and compute the advertising in this way

1215
00:47:58,480 --> 00:48:03,599
um next through using the properties of

1216
00:48:03,599 --> 00:48:07,040
the used dual hps and the extructor

1217
00:48:07,040 --> 00:48:09,760
we can prove the security of a basic

1218
00:48:09,760 --> 00:48:10,880
construction for just

1219
00:48:10,880 --> 00:48:13,520
one ktm surface test furthermore with

1220
00:48:13,520 --> 00:48:14,640
the leveraging

1221
00:48:14,640 --> 00:48:16,559
the correlated source security of

1222
00:48:16,559 --> 00:48:18,319
extractor we can achieve

1223
00:48:18,319 --> 00:48:21,920
the normal ktm1 security we also notice

1224
00:48:21,920 --> 00:48:22,400
that

1225
00:48:22,400 --> 00:48:26,000
batch encryption here is already implies

1226
00:48:26,000 --> 00:48:30,880
the required the required wps

1227
00:48:30,880 --> 00:48:34,559
next we focus on each parameter clearly

1228
00:48:34,559 --> 00:48:37,040
for physical for basic construction with

1229
00:48:37,040 --> 00:48:38,880
this form of a test

1230
00:48:38,880 --> 00:48:41,520
each information rate is one over lambda

1231
00:48:41,520 --> 00:48:42,000
and

1232
00:48:42,000 --> 00:48:44,319
the ktm function class is a function is

1233
00:48:44,319 --> 00:48:46,720
a is a fine function

1234
00:48:46,720 --> 00:48:49,359
so is still far away from or desired

1235
00:48:49,359 --> 00:48:49,920
target

1236
00:48:49,920 --> 00:48:54,319
optimal information rate so

1237
00:48:54,319 --> 00:48:57,280
next we try to improve information rate

1238
00:48:57,280 --> 00:48:58,000
through

1239
00:48:58,000 --> 00:49:01,040
uh using reusable property and

1240
00:49:01,040 --> 00:49:03,920
blog so setting in particular our first

1241
00:49:03,920 --> 00:49:04,319
step

1242
00:49:04,319 --> 00:49:07,839
is to replace the instructor with a

1243
00:49:07,839 --> 00:49:08,960
reusable version

1244
00:49:08,960 --> 00:49:11,359
in this case and in this case the

1245
00:49:11,359 --> 00:49:13,520
information rate is one over constant

1246
00:49:13,520 --> 00:49:16,640
our second step is to oscillate step

1247
00:49:16,640 --> 00:49:20,000
is to replace oscillator

1248
00:49:20,000 --> 00:49:22,880
is to replace the original source with

1249
00:49:22,880 --> 00:49:23,440
the

1250
00:49:23,440 --> 00:49:26,480
y in the block so setting

1251
00:49:26,480 --> 00:49:28,480
in this case the information rate is

1252
00:49:28,480 --> 00:49:32,400
optimal and the ktm challenge function

1253
00:49:32,400 --> 00:49:35,440
is a power source for a fine function so

1254
00:49:35,440 --> 00:49:38,720
next we need to try to amplify

1255
00:49:38,720 --> 00:49:40,319
the profile and function class for

1256
00:49:40,319 --> 00:49:42,079
audience security

1257
00:49:42,079 --> 00:49:45,200
in order to do this we can encode

1258
00:49:45,200 --> 00:49:47,680
the labels of a coupled circuit into the

1259
00:49:47,680 --> 00:49:48,960
massive space

1260
00:49:48,960 --> 00:49:53,280
uh besides moreover

1261
00:49:53,280 --> 00:49:55,920
we can adjust the parameters of a

1262
00:49:55,920 --> 00:49:57,119
message space

1263
00:49:57,119 --> 00:50:00,480
sorry message space to achieve

1264
00:50:00,480 --> 00:50:03,920
optimal information rate so far

1265
00:50:03,920 --> 00:50:06,240
and many more details can be found in

1266
00:50:06,240 --> 00:50:07,440
all paper

1267
00:50:07,440 --> 00:50:10,319
so after putting all about things

1268
00:50:10,319 --> 00:50:10,880
together

1269
00:50:10,880 --> 00:50:13,280
we can get ktm one circuit pke for any

1270
00:50:13,280 --> 00:50:14,480
bonus size circuit

1271
00:50:14,480 --> 00:50:16,960
with optimal information rate and all

1272
00:50:16,960 --> 00:50:18,720
the building blocks can be extensioned

1273
00:50:18,720 --> 00:50:21,839
from tdhrwe

1274
00:50:22,400 --> 00:50:26,240
next for kdm umbra circle pke

1275
00:50:26,240 --> 00:50:28,960
we roughly adopted the following three

1276
00:50:28,960 --> 00:50:29,920
steps

1277
00:50:29,920 --> 00:50:32,720
finally for ibe starting we roughly

1278
00:50:32,720 --> 00:50:34,720
adapted the following four steps

1279
00:50:34,720 --> 00:50:37,200
details for detailed construction placer

1280
00:50:37,200 --> 00:50:38,000
paper

1281
00:50:38,000 --> 00:50:41,040
thank you for your attention

1282
00:50:41,040 --> 00:50:42,880
thank you very much are there any

1283
00:50:42,880 --> 00:50:44,559
questions from the audience

1284
00:50:44,559 --> 00:50:48,319
we would have time for a quick question

1285
00:50:48,319 --> 00:50:52,839
please feel free to unmute ask the

1286
00:50:52,839 --> 00:50:55,200
question

1287
00:50:55,200 --> 00:50:58,000
otherwise i have i have a question so

1288
00:50:58,000 --> 00:50:59,119
you have this

1289
00:50:59,119 --> 00:51:01,440
okay two main results so one for public

1290
00:51:01,440 --> 00:51:02,640
encryption one for

1291
00:51:02,640 --> 00:51:05,680
ibe right yeah and there

1292
00:51:05,680 --> 00:51:07,440
and the kdm security always involves

1293
00:51:07,440 --> 00:51:08,880
some function class

1294
00:51:08,880 --> 00:51:11,440
right so and and they're different for

1295
00:51:11,440 --> 00:51:13,040
those two cases

1296
00:51:13,040 --> 00:51:15,119
yeah right right right is there an easy

1297
00:51:15,119 --> 00:51:16,400
explanation

1298
00:51:16,400 --> 00:51:19,040
what is exactly different and maybe why

1299
00:51:19,040 --> 00:51:21,119
even

1300
00:51:21,119 --> 00:51:25,200
here for i for pke

1301
00:51:25,200 --> 00:51:28,640
for p for pku or

1302
00:51:28,640 --> 00:51:31,119
function class is a can be said to be

1303
00:51:31,119 --> 00:51:33,440
any bounded size circuit

1304
00:51:33,440 --> 00:51:36,240
uh and besides we can achieve optimal

1305
00:51:36,240 --> 00:51:37,359
information rate

1306
00:51:37,359 --> 00:51:40,480
and in the case of ibe

1307
00:51:40,480 --> 00:51:43,119
in order to achieve optimal information

1308
00:51:43,119 --> 00:51:44,000
rate

1309
00:51:44,000 --> 00:51:47,760
we need to start a particular

1310
00:51:47,760 --> 00:51:51,040
function class for optimal rate and

1311
00:51:51,040 --> 00:51:54,319
it's a little complicated

1312
00:51:54,319 --> 00:51:57,680
and it can be fun forever

1313
00:51:57,680 --> 00:52:00,720
okay yeah i think in interest of time

1314
00:52:00,720 --> 00:52:01,599
you already have to

1315
00:52:01,599 --> 00:52:04,800
to move on uh yes so please go to the

1316
00:52:04,800 --> 00:52:06,160
next speaker

1317
00:52:06,160 --> 00:52:09,599
i already set up the slides

1318
00:52:09,599 --> 00:52:11,920
so thanks again for this very nice talk

1319
00:52:11,920 --> 00:52:13,680
and let's move on for

1320
00:52:13,680 --> 00:52:16,720
uh to the next stop

1321
00:52:16,720 --> 00:52:20,640
so uh yes i say that thanks to you for

1322
00:52:20,640 --> 00:52:23,119
sharing your screen uh the next talk

1323
00:52:23,119 --> 00:52:24,960
will be

1324
00:52:24,960 --> 00:52:26,960
impossibility on temporary auxiliary and

1325
00:52:26,960 --> 00:52:29,440
cryptography with uniqueness properties

1326
00:52:29,440 --> 00:52:31,680
this is joint work uh by yu yuvang

1327
00:52:31,680 --> 00:52:34,400
takahiro matsuda

1328
00:52:34,400 --> 00:52:38,160
hanaoka and uh

1329
00:52:38,160 --> 00:52:41,680
tanaka and uh you will give the talk so

1330
00:52:41,680 --> 00:52:43,680
please

1331
00:52:43,680 --> 00:52:46,400
okay thanks for the introduction i'm

1332
00:52:46,400 --> 00:52:47,200
yuang

1333
00:52:47,200 --> 00:52:49,839
uh today i will talk about the

1334
00:52:49,839 --> 00:52:51,520
impossibility on tampa brazilian

1335
00:52:51,520 --> 00:52:54,079
cryptography with uniqueness properties

1336
00:52:54,079 --> 00:52:56,960
let's join work with takahiro matsukoi

1337
00:52:56,960 --> 00:52:58,839
and

1338
00:52:58,839 --> 00:53:00,319
quesada

1339
00:53:00,319 --> 00:53:02,960
uh usually uh when proving the security

1340
00:53:02,960 --> 00:53:04,960
we assume that the keys are perfectly

1341
00:53:04,960 --> 00:53:06,160
protected

1342
00:53:06,160 --> 00:53:09,280
but in the real world the adversary may

1343
00:53:09,280 --> 00:53:11,280
execute some temporary attacks such as

1344
00:53:11,280 --> 00:53:12,960
heating up the devices and

1345
00:53:12,960 --> 00:53:16,240
injecting ports to tamper with the keys

1346
00:53:16,240 --> 00:53:19,040
and then the anniversary may observe the

1347
00:53:19,040 --> 00:53:19,760
signatures

1348
00:53:19,760 --> 00:53:22,079
or the ciphertext generated by the top

1349
00:53:22,079 --> 00:53:24,000
marquee

1350
00:53:24,000 --> 00:53:27,680
so it can get some extra advantage

1351
00:53:27,680 --> 00:53:31,920
from this to break the security

1352
00:53:31,920 --> 00:53:33,680
uh by now there have been several

1353
00:53:33,680 --> 00:53:35,119
positive results

1354
00:53:35,119 --> 00:53:37,359
in the crs model in this model the

1355
00:53:37,359 --> 00:53:38,160
adversary

1356
00:53:38,160 --> 00:53:40,400
can tamper with both the public and

1357
00:53:40,400 --> 00:53:42,720
secret keys in any way it wants

1358
00:53:42,720 --> 00:53:45,440
but it's assumed that there are temporal

1359
00:53:45,440 --> 00:53:46,000
proof

1360
00:53:46,000 --> 00:53:49,200
camera reference strings but it's still

1361
00:53:49,200 --> 00:53:50,240
unclear

1362
00:53:50,240 --> 00:53:52,079
whether we can have secure schemes in

1363
00:53:52,079 --> 00:53:54,000
the plain model where we assume

1364
00:53:54,000 --> 00:53:57,920
no tamper-proof crs in this work we show

1365
00:53:57,920 --> 00:53:58,319
that

1366
00:53:58,319 --> 00:54:00,720
it's impossible to derive the temporal

1367
00:54:00,720 --> 00:54:02,400
resilience of a broad class of

1368
00:54:02,400 --> 00:54:03,280
primitives

1369
00:54:03,280 --> 00:54:05,359
from any internal assumption by black

1370
00:54:05,359 --> 00:54:08,000
box reductions

1371
00:54:08,000 --> 00:54:10,319
here by a broad class of primitives we

1372
00:54:10,319 --> 00:54:11,200
mean

1373
00:54:11,200 --> 00:54:14,240
several types of primitives including a

1374
00:54:14,240 --> 00:54:16,720
unique signature signature with unique

1375
00:54:16,720 --> 00:54:17,920
signing key

1376
00:54:17,920 --> 00:54:21,359
randomizable signatures and also pku

1377
00:54:21,359 --> 00:54:22,800
with unique message

1378
00:54:22,800 --> 00:54:26,480
injective one-way functions and vrf

1379
00:54:26,480 --> 00:54:29,520
here by pke with unique message we don't

1380
00:54:29,520 --> 00:54:31,599
mean the deterministic

1381
00:54:31,599 --> 00:54:34,400
pke we mean that in such a scheme for

1382
00:54:34,400 --> 00:54:36,079
each ciphertext

1383
00:54:36,079 --> 00:54:38,799
all the value secret keys with respect

1384
00:54:38,799 --> 00:54:41,040
to a same pk will lead to the same

1385
00:54:41,040 --> 00:54:44,000
decryption result

1386
00:54:44,079 --> 00:54:46,079
also we showed how it captures the

1387
00:54:46,079 --> 00:54:48,079
chromaship encryption and pku with

1388
00:54:48,079 --> 00:54:49,119
unique

1389
00:54:49,119 --> 00:54:52,160
secret keys in our paper and

1390
00:54:52,160 --> 00:54:55,440
now i will briefly introduce our

1391
00:54:55,440 --> 00:54:57,760
intuition we will use the unique

1392
00:54:57,760 --> 00:54:58,720
signature as the

1393
00:54:58,720 --> 00:55:02,559
example here is our temporal resilience

1394
00:55:02,559 --> 00:55:03,119
model

1395
00:55:03,119 --> 00:55:05,119
in our model the anniversary consists of

1396
00:55:05,119 --> 00:55:06,480
three components

1397
00:55:06,480 --> 00:55:09,680
temper brick one and group two notice

1398
00:55:09,680 --> 00:55:10,240
that

1399
00:55:10,240 --> 00:55:12,480
the three components are indeed

1400
00:55:12,480 --> 00:55:14,079
independent with each other

1401
00:55:14,079 --> 00:55:16,480
and they cannot communicate with each

1402
00:55:16,480 --> 00:55:17,280
other

1403
00:55:17,280 --> 00:55:21,680
temper can be treated as selectively

1404
00:55:21,680 --> 00:55:24,000
a selective tempering function which

1405
00:55:24,000 --> 00:55:24,799
take a

1406
00:55:24,799 --> 00:55:26,880
text size into the public key and the

1407
00:55:26,880 --> 00:55:27,920
secret key and

1408
00:55:27,920 --> 00:55:30,720
outputs a timbre secret key which is sk

1409
00:55:30,720 --> 00:55:31,599
prime

1410
00:55:31,599 --> 00:55:33,839
week one takes size into the public key

1411
00:55:33,839 --> 00:55:36,240
and makes the signing query which is m

1412
00:55:36,240 --> 00:55:38,720
and greek two uh texas include the

1413
00:55:38,720 --> 00:55:39,839
public key

1414
00:55:39,839 --> 00:55:42,240
the signature generated by the time

1415
00:55:42,240 --> 00:55:43,280
party which is

1416
00:55:43,280 --> 00:55:46,319
sk prime and tries to forge a message

1417
00:55:46,319 --> 00:55:48,000
and signature

1418
00:55:48,000 --> 00:55:51,040
notice that this temporal resilience is

1419
00:55:51,040 --> 00:55:53,839
quite weak since we just allowed the

1420
00:55:53,839 --> 00:55:55,040
adversary to make

1421
00:55:55,040 --> 00:55:58,000
only one tampering query and one sending

1422
00:55:58,000 --> 00:55:58,799
query

1423
00:55:58,799 --> 00:56:00,559
but since we consider the negative

1424
00:56:00,559 --> 00:56:03,040
result the weaker the security is

1425
00:56:03,040 --> 00:56:06,480
the stronger our results are

1426
00:56:07,920 --> 00:56:10,640
to show the impossibility of the

1427
00:56:10,640 --> 00:56:12,720
reduction from tamper resilience for any

1428
00:56:12,720 --> 00:56:14,160
common assumption we just

1429
00:56:14,160 --> 00:56:16,880
have to show that the reductions do not

1430
00:56:16,880 --> 00:56:19,119
benefit from having access to the

1431
00:56:19,119 --> 00:56:23,680
adversary so we consider two cases

1432
00:56:23,680 --> 00:56:25,760
in the first case the reduction gives

1433
00:56:25,760 --> 00:56:28,240
the onus keys to the first component

1434
00:56:28,240 --> 00:56:30,400
which is temper

1435
00:56:30,400 --> 00:56:32,480
in this case the reduction has already

1436
00:56:32,480 --> 00:56:34,240
known the secret key by himself

1437
00:56:34,240 --> 00:56:37,599
so he can sign the uh message in the

1438
00:56:37,599 --> 00:56:40,160
forgery which is same style by himself

1439
00:56:40,160 --> 00:56:43,200
and due to uniqueness the signature

1440
00:56:43,200 --> 00:56:44,000
generated by

1441
00:56:44,000 --> 00:56:45,599
the reduction will be the same as the

1442
00:56:45,599 --> 00:56:48,480
one generated by break two

1443
00:56:48,480 --> 00:56:51,040
which means that the communication with

1444
00:56:51,040 --> 00:56:52,160
the adversary is

1445
00:56:52,160 --> 00:56:55,359
meaningless for the reduction

1446
00:56:55,359 --> 00:56:57,599
in the second case the reduction gives

1447
00:56:57,599 --> 00:56:59,200
invalid keys to the

1448
00:56:59,200 --> 00:57:02,480
first component and since

1449
00:57:02,480 --> 00:57:05,440
the temper doesn't receive the owner's

1450
00:57:05,440 --> 00:57:06,160
keys

1451
00:57:06,160 --> 00:57:09,520
it doesn't have to give the tamper keys

1452
00:57:09,520 --> 00:57:12,720
which is sk-prime to reduction so in

1453
00:57:12,720 --> 00:57:14,400
this case the reduction

1454
00:57:14,400 --> 00:57:17,760
learns no information on sk prime

1455
00:57:17,760 --> 00:57:21,760
which means that he cannot answer the

1456
00:57:21,760 --> 00:57:23,760
sending query since it doesn't know the

1457
00:57:23,760 --> 00:57:26,480
secret key

1458
00:57:26,480 --> 00:57:28,880
so the the reduction cannot simulate the

1459
00:57:28,880 --> 00:57:30,480
view of the adversary

1460
00:57:30,480 --> 00:57:33,040
and the adversary does not have to give

1461
00:57:33,040 --> 00:57:34,240
a valid forgery

1462
00:57:34,240 --> 00:57:37,440
to reduction so the reduction cannot get

1463
00:57:37,440 --> 00:57:39,680
any useful information from the

1464
00:57:39,680 --> 00:57:40,960
adversary in this case

1465
00:57:40,960 --> 00:57:44,079
as well which means that the

1466
00:57:44,079 --> 00:57:46,480
this reduction should not exist

1467
00:57:46,480 --> 00:57:48,640
otherwise it can break the assumption by

1468
00:57:48,640 --> 00:57:51,680
himself in polynomial time

1469
00:57:51,680 --> 00:57:54,640
we show in the strict proof we have to

1470
00:57:54,640 --> 00:57:56,160
take care of several points

1471
00:57:56,160 --> 00:57:58,720
such as that the reduction can make

1472
00:57:58,720 --> 00:58:01,040
adaptive queries to the three components

1473
00:58:01,040 --> 00:58:02,160
in any order

1474
00:58:02,160 --> 00:58:04,799
and we have to find a way for timer

1475
00:58:04,799 --> 00:58:06,240
which is the first component

1476
00:58:06,240 --> 00:58:09,599
to check the validity of the keys

1477
00:58:09,599 --> 00:58:12,640
and we showed the street proof

1478
00:58:12,640 --> 00:58:15,599
under the framework of simulator well

1479
00:58:15,599 --> 00:58:16,400
attacks

1480
00:58:16,400 --> 00:58:19,599
defined by wix so this is

1481
00:58:19,599 --> 00:58:23,839
my talk thank you

1482
00:58:24,319 --> 00:58:26,640
thank you very much for the great talk

1483
00:58:26,640 --> 00:58:30,558
um are there any questions

1484
00:58:34,319 --> 00:58:37,839
if yes then please just

1485
00:58:38,160 --> 00:58:41,040
unmute yourself and ask or post it on

1486
00:58:41,040 --> 00:58:43,440
sule

1487
00:58:46,319 --> 00:58:49,520
okay then maybe i i will ask a question

1488
00:58:49,520 --> 00:58:52,640
in the meanwhile um okay

1489
00:58:52,640 --> 00:58:54,880
can you say something like what happens

1490
00:58:54,880 --> 00:58:56,799
uh if for example you

1491
00:58:56,799 --> 00:59:00,400
you allow random oracles as you have in

1492
00:59:00,400 --> 00:59:03,119
brf constructions do your impossibility

1493
00:59:03,119 --> 00:59:04,000
results

1494
00:59:04,000 --> 00:59:07,760
still hold or do like are there known

1495
00:59:07,760 --> 00:59:10,480
uh like positive examples if you know

1496
00:59:10,480 --> 00:59:11,119
this or

1497
00:59:11,119 --> 00:59:14,640
what can you say okay i mean

1498
00:59:14,640 --> 00:59:16,880
uh for example if the hash function

1499
00:59:16,880 --> 00:59:18,880
which is the random oracle

1500
00:59:18,880 --> 00:59:21,920
is part of the crs

1501
00:59:21,920 --> 00:59:24,960
and the crs is temper proof then our

1502
00:59:24,960 --> 00:59:27,040
result doesn't capture it

1503
00:59:27,040 --> 00:59:30,160
but if the we if we treat the hash

1504
00:59:30,160 --> 00:59:32,799
function as part of the public key

1505
00:59:32,799 --> 00:59:35,839
then and it's not temper proof then our

1506
00:59:35,839 --> 00:59:36,799
result

1507
00:59:36,799 --> 00:59:40,000
captures it so i mean

1508
00:59:40,000 --> 00:59:41,760
we are not sure if there is any positive

1509
00:59:41,760 --> 00:59:44,799
result if there is time per proof

1510
00:59:44,799 --> 00:59:46,559
for example a random oracle hash

1511
00:59:46,559 --> 00:59:48,160
function in the public key but

1512
00:59:48,160 --> 00:59:51,280
if we allow it to be a time per

1513
00:59:51,280 --> 00:59:56,319
then the negative results hold

1514
00:59:56,319 --> 00:59:59,520
okay okay thank you very much

1515
00:59:59,520 --> 01:00:03,839
um uh anyone else

1516
01:00:03,839 --> 01:00:06,240
yeah maybe you can elaborate a little

1517
01:00:06,240 --> 01:00:07,280
bit on

1518
01:00:07,280 --> 01:00:09,839
when when your kind of result breaks

1519
01:00:09,839 --> 01:00:10,799
down so

1520
01:00:10,799 --> 01:00:13,440
like when you don't have uniqueness why

1521
01:00:13,440 --> 01:00:14,079
does

1522
01:00:14,079 --> 01:00:16,319
like where does your where does it break

1523
01:00:16,319 --> 01:00:17,200
down why

1524
01:00:17,200 --> 01:00:19,040
why are there why does the impossibility

1525
01:00:19,040 --> 01:00:20,799
not vote for other schemes

1526
01:00:20,799 --> 01:00:24,880
okay so

1527
01:00:24,880 --> 01:00:26,839
[Music]

1528
01:00:26,839 --> 01:00:28,319
um

1529
01:00:28,319 --> 01:00:31,520
uniqueness uh appears here here we will

1530
01:00:31,520 --> 01:00:33,280
use the uniqueness to

1531
01:00:33,280 --> 01:00:36,079
show that the signature generated by the

1532
01:00:36,079 --> 01:00:38,160
reduction will be the same as the one

1533
01:00:38,160 --> 01:00:40,960
generated by the adversary which means

1534
01:00:40,960 --> 01:00:42,240
that uh

1535
01:00:42,240 --> 01:00:44,240
what what the reduction receives from

1536
01:00:44,240 --> 01:00:45,280
the adversary

1537
01:00:45,280 --> 01:00:48,480
can be generated by himself uh if

1538
01:00:48,480 --> 01:00:51,680
uh the uniqueness doesn't hold then

1539
01:00:51,680 --> 01:00:54,839
maybe the the signature uh returned by

1540
01:00:54,839 --> 01:00:57,599
the uh adversary will be different from

1541
01:00:57,599 --> 01:00:58,240
the one

1542
01:00:58,240 --> 01:01:00,079
by the reduction then the reduction may

1543
01:01:00,079 --> 01:01:01,760
make use of the two different

1544
01:01:01,760 --> 01:01:04,960
signatures to do something uh

1545
01:01:04,960 --> 01:01:08,079
that's why the unique uh the unique uh

1546
01:01:08,079 --> 01:01:08,960
the

1547
01:01:08,960 --> 01:01:12,480
uniqueness is uh necessary

1548
01:01:12,480 --> 01:01:14,319
okay thank you yeah would be interesting

1549
01:01:14,319 --> 01:01:15,839
whether it could be replaced by some

1550
01:01:15,839 --> 01:01:16,720
some other property

1551
01:01:16,720 --> 01:01:20,720
maybe weaker yeah um maybe i mean

1552
01:01:20,720 --> 01:01:22,839
as explained before we can use the

1553
01:01:22,839 --> 01:01:24,440
randomizable

1554
01:01:24,440 --> 01:01:28,559
randomizability as explained before

1555
01:01:28,559 --> 01:01:31,520
if we have the randomizable signature

1556
01:01:31,520 --> 01:01:32,400
then

1557
01:01:32,400 --> 01:01:35,119
the negative result also holds since we

1558
01:01:35,119 --> 01:01:36,880
can randomize the signatures

1559
01:01:36,880 --> 01:01:40,640
so the we can randomize the signature

1560
01:01:40,640 --> 01:01:42,559
generated by the reduction and the one

1561
01:01:42,559 --> 01:01:44,160
generated by the adversary

1562
01:01:44,160 --> 01:01:47,200
and they will be the the

1563
01:01:47,200 --> 01:01:48,880
distribution of the signature will be

1564
01:01:48,880 --> 01:01:50,720
the same

1565
01:01:50,720 --> 01:01:53,839
which also uh gives the negative result

1566
01:01:53,839 --> 01:01:56,960
since the the one given by the

1567
01:01:56,960 --> 01:01:59,119
adversary can be simulated by the

1568
01:01:59,119 --> 01:02:01,520
reduction

1569
01:02:01,520 --> 01:02:04,839
but i'm not sure if we can have other

1570
01:02:04,839 --> 01:02:06,640
probabilities

1571
01:02:06,640 --> 01:02:10,480
that will be a good direction i think

1572
01:02:10,480 --> 01:02:14,240
okay thank you very much for the

1573
01:02:14,240 --> 01:02:16,400
nice talk and and also for your answers

1574
01:02:16,400 --> 01:02:17,680
and i think we should move on

1575
01:02:17,680 --> 01:02:21,599
to the last talk thank you

1576
01:02:21,599 --> 01:02:24,720
yes um so could the next speaker uh

1577
01:02:24,720 --> 01:02:26,799
already pretend start presenting the

1578
01:02:26,799 --> 01:02:28,319
slides

1579
01:02:28,319 --> 01:02:32,240
please yeah

1580
01:02:32,240 --> 01:02:35,280
thank you so uh the last

1581
01:02:35,280 --> 01:02:37,599
talk in this session is the title

1582
01:02:37,599 --> 01:02:39,839
adventures in crypto dark

1583
01:02:39,839 --> 01:02:42,319
matter attacks and fixes for weeks of

1584
01:02:42,319 --> 01:02:44,160
random functions

1585
01:02:44,160 --> 01:02:48,799
uh it's a joint work by uh chung

1586
01:02:52,970 --> 01:02:55,760
[Music]

1587
01:02:55,760 --> 01:02:58,160
please go ahead thank you for

1588
01:02:58,160 --> 01:03:00,799
introduction

1589
01:03:01,039 --> 01:03:04,000
in our paper we introduced a new direct

1590
01:03:04,000 --> 01:03:06,480
statistical attack on recovery candidate

1591
01:03:06,480 --> 01:03:07,440
presented by

1592
01:03:07,440 --> 01:03:09,280
bonnie adele using conditional

1593
01:03:09,280 --> 01:03:11,520
probability with exponentially many

1594
01:03:11,520 --> 01:03:13,359
samples

1595
01:03:13,359 --> 01:03:15,920
bona adel proposed two week prf

1596
01:03:15,920 --> 01:03:17,119
candidates and

1597
01:03:17,119 --> 01:03:20,160
we break uh break both suggested

1598
01:03:20,160 --> 01:03:20,960
parameters

1599
01:03:20,960 --> 01:03:24,000
with special case and also we propose

1600
01:03:24,000 --> 01:03:27,599
fix to prevent our attack

1601
01:03:27,599 --> 01:03:30,160
their weak pr candidates have many con

1602
01:03:30,160 --> 01:03:31,599
many contributions

1603
01:03:31,599 --> 01:03:33,760
they are very simple construction they

1604
01:03:33,760 --> 01:03:36,400
just mix linear computation

1605
01:03:36,400 --> 01:03:38,960
over different moduli and they have low

1606
01:03:38,960 --> 01:03:41,119
depth circuit complexity

1607
01:03:41,119 --> 01:03:43,599
uh they are first proposed depth two

1608
01:03:43,599 --> 01:03:45,039
week prior candidates

1609
01:03:45,039 --> 01:03:48,240
and also they are assumed to have

1610
01:03:48,240 --> 01:03:51,200
exponential security but these are

1611
01:03:51,200 --> 01:03:53,039
constructed based on the

1612
01:03:53,039 --> 01:03:55,280
newly proposed problems so it is

1613
01:03:55,280 --> 01:03:56,480
necessary to prove

1614
01:03:56,480 --> 01:04:00,079
insecurity through various attacks

1615
01:04:00,079 --> 01:04:02,720
in this presentation we present only

1616
01:04:02,720 --> 01:04:04,480
alternative weak piano candidate

1617
01:04:04,480 --> 01:04:07,680
case so other cases explain

1618
01:04:07,680 --> 01:04:10,400
the on loaded video so if you want to

1619
01:04:10,400 --> 01:04:11,599
know

1620
01:04:11,599 --> 01:04:14,799
please watch the video the alternative

1621
01:04:14,799 --> 01:04:16,160
weak periodic candidate

1622
01:04:16,160 --> 01:04:19,520
is defined did as follows

1623
01:04:19,520 --> 01:04:22,880
the secret key is a ambit vector

1624
01:04:22,880 --> 01:04:26,400
which is chosen by is children

1625
01:04:26,400 --> 01:04:29,520
uniformly and lambda and also the input

1626
01:04:29,520 --> 01:04:33,200
input x is n bit so

1627
01:04:33,200 --> 01:04:35,839
they compute the inner product inner

1628
01:04:35,839 --> 01:04:36,480
product

1629
01:04:36,480 --> 01:04:39,119
input and secret key for different

1630
01:04:39,119 --> 01:04:40,640
modulus and

1631
01:04:40,640 --> 01:04:43,039
and then finally the sum of them in

1632
01:04:43,039 --> 01:04:44,319
modulo 2.

1633
01:04:44,319 --> 01:04:46,400
this is very simple construction and

1634
01:04:46,400 --> 01:04:48,480
also they suggest the

1635
01:04:48,480 --> 01:04:51,520
dimension n is 384 from

1636
01:04:51,520 --> 01:04:55,839
the 84 which comes from vkw

1637
01:04:55,839 --> 01:04:59,760
attack our attack is also simpler

1638
01:04:59,760 --> 01:05:02,319
let h be the number of ones in the

1639
01:05:02,319 --> 01:05:03,119
secret key

1640
01:05:03,119 --> 01:05:07,039
then compute the conditional probability

1641
01:05:07,039 --> 01:05:10,240
the jc element element

1642
01:05:10,240 --> 01:05:13,280
j of vector input x is zero

1643
01:05:13,280 --> 01:05:17,039
when the output of prf is zero

1644
01:05:17,039 --> 01:05:20,720
uh we prove that if the

1645
01:05:20,720 --> 01:05:24,720
secret key j's element is one then the

1646
01:05:24,720 --> 01:05:26,960
difference of conditional probability

1647
01:05:26,960 --> 01:05:27,920
and half

1648
01:05:27,920 --> 01:05:31,280
half and one half is

1649
01:05:31,280 --> 01:05:36,240
uh one out of two to the power 0.21 h

1650
01:05:36,240 --> 01:05:38,319
and also the secret key k is drawn

1651
01:05:38,319 --> 01:05:40,319
uniformly and random so

1652
01:05:40,319 --> 01:05:44,400
we can assume that h is half program

1653
01:05:44,400 --> 01:05:47,760
so therefore if the number of samples

1654
01:05:47,760 --> 01:05:51,000
is larger than 2 to the power of

1655
01:05:51,000 --> 01:05:54,559
0.21 n then we can distinguish the

1656
01:05:54,559 --> 01:05:57,839
wikipedia samples and random samples

1657
01:05:57,839 --> 01:06:01,039
so if we can get exponentially many

1658
01:06:01,039 --> 01:06:02,240
samples then

1659
01:06:02,240 --> 01:06:05,920
we can uh then dimension end must

1660
01:06:05,920 --> 01:06:09,200
must grow from 384 to

1661
01:06:09,200 --> 01:06:13,000
610 to be robust against our attack for

1662
01:06:13,000 --> 01:06:16,079
128 bit security

1663
01:06:16,079 --> 01:06:19,599
and also uh we our attack is just

1664
01:06:19,599 --> 01:06:22,240
to average the sample so we do not have

1665
01:06:22,240 --> 01:06:22,799
store

1666
01:06:22,799 --> 01:06:26,559
or center so we need only one bit memory

1667
01:06:26,559 --> 01:06:27,760
for precision

1668
01:06:27,760 --> 01:06:31,119
uh unlike pkw

1669
01:06:31,119 --> 01:06:34,319
then how to prevent our attack uh our

1670
01:06:34,319 --> 01:06:36,559
attack only depends on the number of

1671
01:06:36,559 --> 01:06:39,839
ones in secret key case so to prevent

1672
01:06:39,839 --> 01:06:40,559
our attack

1673
01:06:40,559 --> 01:06:43,280
change the distribution of securities uh

1674
01:06:43,280 --> 01:06:46,160
from uniform distribution to

1675
01:06:46,160 --> 01:06:49,200
the distribution of the secret k

1676
01:06:49,200 --> 01:06:52,079
whose number of one is three three

1677
01:06:52,079 --> 01:06:52,559
hundred

1678
01:06:52,559 --> 01:06:55,440
five so it also withstand the brute

1679
01:06:55,440 --> 01:06:58,160
force attack

1680
01:06:58,240 --> 01:07:01,280
finally our open question is how to

1681
01:07:01,280 --> 01:07:02,079
attack

1682
01:07:02,079 --> 01:07:05,119
uh wikipedia candidate when when

1683
01:07:05,119 --> 01:07:07,359
polynomially many samples are given

1684
01:07:07,359 --> 01:07:11,280
and also we use the circular

1685
01:07:11,280 --> 01:07:14,640
circular matrix a to attack other

1686
01:07:14,640 --> 01:07:18,160
other wikipedia categories so it

1687
01:07:18,160 --> 01:07:21,839
still remains the open problem when

1688
01:07:21,839 --> 01:07:25,200
the matrix a is full random thank you

1689
01:07:25,200 --> 01:07:25,599
for

1690
01:07:25,599 --> 01:07:29,119
listening my presentation

1691
01:07:29,119 --> 01:07:32,240
thanks a lot um so we have time for

1692
01:07:32,240 --> 01:07:34,960
some questions for you so please feel

1693
01:07:34,960 --> 01:07:35,839
free to

1694
01:07:35,839 --> 01:07:41,039
ask them in sule or just right away here

1695
01:07:41,039 --> 01:07:43,760
in the meantime uh let me ask a question

1696
01:07:43,760 --> 01:07:44,720
so

1697
01:07:44,720 --> 01:07:48,319
your your attack needs uh samples

1698
01:07:48,319 --> 01:07:52,880
right and it needs a lot of them

1699
01:07:53,119 --> 01:07:56,799
uh do you suspect you can also do

1700
01:07:56,799 --> 01:07:58,160
you know perform your attack with

1701
01:07:58,160 --> 01:07:59,920
polynomial numbers an efficient number

1702
01:07:59,920 --> 01:08:01,590
of samples

1703
01:08:01,590 --> 01:08:03,520
[Music]

1704
01:08:03,520 --> 01:08:05,039
i think what's your like what's your

1705
01:08:05,039 --> 01:08:07,680
feeling about that

1706
01:08:07,680 --> 01:08:10,880
i i think it it can

1707
01:08:10,880 --> 01:08:13,760
cannot protect the pulling with

1708
01:08:13,760 --> 01:08:17,280
polynomial many samples

1709
01:08:18,238 --> 01:08:20,880
i have i have a lot of experiments about

1710
01:08:20,880 --> 01:08:21,920
this

1711
01:08:21,920 --> 01:08:26,158
pr episode but it cannot work

1712
01:08:26,158 --> 01:08:27,600
okay so this brings me actually to a

1713
01:08:27,600 --> 01:08:29,439
follow-up question so is it so you

1714
01:08:29,439 --> 01:08:31,359
presented a text but these are also good

1715
01:08:31,359 --> 01:08:31,839
news

1716
01:08:31,839 --> 01:08:34,960
in that like that so so do you think

1717
01:08:34,960 --> 01:08:37,279
the scheme is like stays at that level

1718
01:08:37,279 --> 01:08:38,238
of security you

1719
01:08:38,238 --> 01:08:40,479
figured or do you think this was just

1720
01:08:40,479 --> 01:08:42,640
one step towards better attacks

1721
01:08:42,640 --> 01:08:46,880
in the future so what's your

1722
01:08:47,120 --> 01:08:49,358
oh

1723
01:08:50,319 --> 01:08:52,560
i don't know about that yeah it would be

1724
01:08:52,560 --> 01:08:54,399
speculation but maybe maybe you know

1725
01:08:54,399 --> 01:08:57,600
might be that you you see some uh nice

1726
01:08:57,600 --> 01:08:58,640
nice uh

1727
01:08:58,640 --> 01:09:01,040
follow-up or you know some further ideas

1728
01:09:01,040 --> 01:09:01,759
how to

1729
01:09:01,759 --> 01:09:04,238
you know to to improve this attack even

1730
01:09:04,238 --> 01:09:05,279
more

1731
01:09:05,279 --> 01:09:08,960
um yes so any other question

1732
01:09:08,960 --> 01:09:11,359
from the audience yeah maybe um can you

1733
01:09:11,359 --> 01:09:13,520
go to the previous slide the

1734
01:09:13,520 --> 01:09:16,480
future work slide

1735
01:09:16,960 --> 01:09:18,560
one is one was the question that

1736
01:09:18,560 --> 01:09:20,640
christian asked about polynomially many

1737
01:09:20,640 --> 01:09:24,319
samples yeah um what

1738
01:09:24,319 --> 01:09:26,719
so what can you can i was curious about

1739
01:09:26,719 --> 01:09:27,759
the second point

1740
01:09:27,759 --> 01:09:29,679
i wasn't quite sure what what the goal

1741
01:09:29,679 --> 01:09:31,920
there is it's a it's a new scheme right

1742
01:09:31,920 --> 01:09:35,040
or yeah

1743
01:09:38,000 --> 01:09:41,040
so this is uh another

1744
01:09:41,040 --> 01:09:44,560
candidate i don't uh i don't explain

1745
01:09:44,560 --> 01:09:47,279
in this presentation but i i explained

1746
01:09:47,279 --> 01:09:47,679
this

1747
01:09:47,679 --> 01:09:51,520
this uh our attack for this

1748
01:09:51,520 --> 01:09:53,520
candidate is unloaded video in

1749
01:09:53,520 --> 01:09:56,480
downloading video

1750
01:09:56,640 --> 01:09:58,080
so do you have an attack on that scheme

1751
01:09:58,080 --> 01:09:59,360
as well or that's that's an open

1752
01:09:59,360 --> 01:10:01,440
question no you don't right

1753
01:10:01,440 --> 01:10:04,560
yeah yeah i guess one question would be

1754
01:10:04,560 --> 01:10:06,800
what kind of mattresses allow for an

1755
01:10:06,800 --> 01:10:07,760
attack

1756
01:10:07,760 --> 01:10:11,199
rather than a fully random one

1757
01:10:13,600 --> 01:10:16,880
in in documentary paper there is no

1758
01:10:16,880 --> 01:10:19,600
attack for full random case they they

1759
01:10:19,600 --> 01:10:20,400
are just

1760
01:10:20,400 --> 01:10:24,560
uh some rationers for security

1761
01:10:24,560 --> 01:10:27,920
they uh i think that

1762
01:10:27,920 --> 01:10:31,120
they they said that uh it is hard to

1763
01:10:31,120 --> 01:10:35,120
hard to convert the rational polynomial

1764
01:10:35,120 --> 01:10:38,239
so they they are

1765
01:10:38,239 --> 01:10:41,280
they they uh argue that

1766
01:10:41,280 --> 01:10:45,040
n n is just 200 by 56

1767
01:10:45,040 --> 01:10:48,320
is secure so

1768
01:10:48,320 --> 01:10:50,400
there is no attack for full random

1769
01:10:50,400 --> 01:10:52,879
metrics

1770
01:10:53,679 --> 01:10:56,960
thanks great so we are already

1771
01:10:56,960 --> 01:10:59,199
uh time-wise at least at the end of this

1772
01:10:59,199 --> 01:11:00,159
session but i'm

1773
01:11:00,159 --> 01:11:02,080
i'm sure there are more questions around

1774
01:11:02,080 --> 01:11:03,520
for all speakers

1775
01:11:03,520 --> 01:11:06,159
uh so let's thank all speakers of this

1776
01:11:06,159 --> 01:11:07,360
session again

1777
01:11:07,360 --> 01:11:10,960
you did a great job and so this ends

1778
01:11:10,960 --> 01:11:12,640
this this formal part

1779
01:11:12,640 --> 01:11:17,440
of the session um

1780
01:11:17,840 --> 01:11:19,199
but in case you have questions i mean

1781
01:11:19,199 --> 01:11:20,719
now it's the break until the invited

1782
01:11:20,719 --> 01:11:21,120
talk

1783
01:11:21,120 --> 01:11:24,960
of anchor kills so feel free also to

1784
01:11:24,960 --> 01:11:26,840
stay and then ask

1785
01:11:26,840 --> 01:11:29,840
questions

