1
00:00:00,399 --> 00:00:02,320
one very long moment later you're ready

2
00:00:02,320 --> 00:00:04,080
to go have a good session

3
00:00:04,080 --> 00:00:07,759
okay so hello everyone welcome to the

4
00:00:07,759 --> 00:00:08,559
lattice

5
00:00:08,559 --> 00:00:11,200
session i'm happy to share it uh to

6
00:00:11,200 --> 00:00:11,920
co-chair it

7
00:00:11,920 --> 00:00:15,200
with alice polemari so

8
00:00:15,200 --> 00:00:19,119
uh we have we have several uh papers

9
00:00:19,119 --> 00:00:22,640
uh uh presenting here uh and we will

10
00:00:22,640 --> 00:00:23,119
start

11
00:00:23,119 --> 00:00:25,680
uh with a two-round n out of n and

12
00:00:25,680 --> 00:00:27,039
multi-signatures and trap door

13
00:00:27,039 --> 00:00:28,720
commitment from lattice

14
00:00:28,720 --> 00:00:32,079
um by ivan damgard claudio olandi akira

15
00:00:32,079 --> 00:00:33,840
takashi and meti tibuchi

16
00:00:33,840 --> 00:00:37,360
and akira will give the talk

17
00:00:37,680 --> 00:00:40,399
thank you for the introduction so let me

18
00:00:40,399 --> 00:00:45,840
share the screen

19
00:00:46,079 --> 00:00:49,760
um can you see my slides

20
00:00:49,760 --> 00:00:53,120
yes it works good

21
00:00:53,120 --> 00:00:56,800
so yes um so this token is based on a

22
00:00:56,800 --> 00:00:58,320
joint work with ivan dam guard

23
00:00:58,320 --> 00:01:00,160
claudio randy from austin university and

24
00:01:00,160 --> 00:01:02,480
many tips from ntt

25
00:01:02,480 --> 00:01:06,000
so um background

26
00:01:06,000 --> 00:01:08,320
so as everybody probably knows at the

27
00:01:08,320 --> 00:01:11,280
moment we have a

28
00:01:11,280 --> 00:01:12,720
nist or post quantum crypto

29
00:01:12,720 --> 00:01:14,479
standardization going on

30
00:01:14,479 --> 00:01:16,320
and then there's essentially uh two

31
00:01:16,320 --> 00:01:18,479
different approaches uh to construct

32
00:01:18,479 --> 00:01:20,080
lattice-based signatures

33
00:01:20,080 --> 00:01:22,720
and falcon and the division uh concrete

34
00:01:22,720 --> 00:01:23,920
instantiations

35
00:01:23,920 --> 00:01:26,159
of hash and sign and the fifth shaming

36
00:01:26,159 --> 00:01:29,360
of isabo's paradigm respectively

37
00:01:29,360 --> 00:01:32,400
on the other hand recently there's a

38
00:01:32,400 --> 00:01:33,280
renewed

39
00:01:33,280 --> 00:01:35,759
interest in multiparty signing protocols

40
00:01:35,759 --> 00:01:37,360
thanks to the upcoming

41
00:01:37,360 --> 00:01:40,159
standardization for threshold signatures

42
00:01:40,159 --> 00:01:41,439
or

43
00:01:41,439 --> 00:01:44,000
a new applications to blockchain in

44
00:01:44,000 --> 00:01:44,720
particular

45
00:01:44,720 --> 00:01:46,560
there have been many existing works on

46
00:01:46,560 --> 00:01:49,200
round efficient and end party signatures

47
00:01:49,200 --> 00:01:52,560
based on the display log so if you look

48
00:01:52,560 --> 00:01:54,079
at the fiat champion with both style

49
00:01:54,079 --> 00:01:55,119
signatures

50
00:01:55,119 --> 00:01:56,799
uh their structure is actually very

51
00:01:56,799 --> 00:01:58,640
similar uh to snow

52
00:01:58,640 --> 00:02:02,079
at least syntactically so the natural

53
00:02:02,079 --> 00:02:02,719
question is

54
00:02:02,719 --> 00:02:04,719
can we construct a lattice-based round

55
00:02:04,719 --> 00:02:06,880
efficient multiple design protocols

56
00:02:06,880 --> 00:02:08,639
by making the most of these recent

57
00:02:08,639 --> 00:02:10,959
observations so in this paper we address

58
00:02:10,959 --> 00:02:14,160
this question so what is an autobahn

59
00:02:14,160 --> 00:02:14,959
signature

60
00:02:14,959 --> 00:02:17,120
for the simplest case let's say there

61
00:02:17,120 --> 00:02:19,599
are two parties alice and bob

62
00:02:19,599 --> 00:02:22,480
and they don't know the original secret

63
00:02:22,480 --> 00:02:24,080
key but they only know the share of the

64
00:02:24,080 --> 00:02:25,760
secret key

65
00:02:25,760 --> 00:02:28,000
and then they agree on some message to

66
00:02:28,000 --> 00:02:29,040
be signed

67
00:02:29,040 --> 00:02:31,680
after some interaction alice and bob

68
00:02:31,680 --> 00:02:33,760
output some signature

69
00:02:33,760 --> 00:02:35,440
so of course the security requirement

70
00:02:35,440 --> 00:02:37,599
should be as follows

71
00:02:37,599 --> 00:02:39,519
so even if the one of the parties is

72
00:02:39,519 --> 00:02:40,959
corrupt

73
00:02:40,959 --> 00:02:43,760
and even if the craft party is able to

74
00:02:43,760 --> 00:02:45,920
query the honest party with some message

75
00:02:45,920 --> 00:02:47,440
and then obtain the corresponding

76
00:02:47,440 --> 00:02:49,519
signature

77
00:02:49,519 --> 00:02:51,840
then the output forcibly should not be

78
00:02:51,840 --> 00:02:52,560
verified

79
00:02:52,560 --> 00:02:56,640
uh with the uh overlapping probability

80
00:02:56,640 --> 00:02:58,159
so we want to construct the signature

81
00:02:58,159 --> 00:03:01,040
that satisfies this property

82
00:03:01,040 --> 00:03:03,040
so then our results can be summarized as

83
00:03:03,040 --> 00:03:05,200
follows so we construct a two-round

84
00:03:05,200 --> 00:03:06,720
multi-party fiat chamber which are both

85
00:03:06,720 --> 00:03:08,800
signing with security proof

86
00:03:08,800 --> 00:03:11,360
in the classical random oracle model

87
00:03:11,360 --> 00:03:14,159
based on the standard assumptions

88
00:03:14,159 --> 00:03:17,360
like module awe or sis

89
00:03:17,360 --> 00:03:19,200
and the only required primitive is

90
00:03:19,200 --> 00:03:21,040
trapped or additively homomorphic

91
00:03:21,040 --> 00:03:22,560
commitment

92
00:03:22,560 --> 00:03:24,319
and then thanks to our approach we are

93
00:03:24,319 --> 00:03:25,840
also able to circumvent

94
00:03:25,840 --> 00:03:28,879
uh the potential driver itself like

95
00:03:28,879 --> 00:03:32,000
attack against a naive two-round

96
00:03:32,000 --> 00:03:35,120
instantiations and then following the

97
00:03:35,120 --> 00:03:36,080
same paradigm

98
00:03:36,080 --> 00:03:39,360
we present two schemes and out-of-band

99
00:03:39,360 --> 00:03:40,159
signatures

100
00:03:40,159 --> 00:03:43,840
and mod signatures also in order to

101
00:03:43,840 --> 00:03:46,159
instantiate the concrete trapdoor

102
00:03:46,159 --> 00:03:47,200
commitment scheme

103
00:03:47,200 --> 00:03:50,080
we combined essentially two previous

104
00:03:50,080 --> 00:03:51,360
works

105
00:03:51,360 --> 00:03:53,360
biometals commitment and the mechanical

106
00:03:53,360 --> 00:03:56,480
particle drop 2.

107
00:03:56,480 --> 00:03:58,560
it's a comparison with the previous

108
00:03:58,560 --> 00:04:00,480
multi-party signing protocols based on

109
00:04:00,480 --> 00:04:01,280
lattices

110
00:04:01,280 --> 00:04:02,640
so before our work there have been a

111
00:04:02,640 --> 00:04:04,799
couple of t-auto ban

112
00:04:04,799 --> 00:04:08,000
threshold signatures they either require

113
00:04:08,000 --> 00:04:11,200
a threshold fhe or honest majority

114
00:04:11,200 --> 00:04:13,439
multi-party computation on the other

115
00:04:13,439 --> 00:04:14,319
hand our

116
00:04:14,319 --> 00:04:17,279
protocols only require homomorphic trap

117
00:04:17,279 --> 00:04:18,399
door commitment

118
00:04:18,399 --> 00:04:20,639
uh while trading the round complexity of

119
00:04:20,639 --> 00:04:21,680
it so in

120
00:04:21,680 --> 00:04:24,240
our protocol we require at least two

121
00:04:24,240 --> 00:04:25,040
rounds

122
00:04:25,040 --> 00:04:28,320
and also uh in our case we only achieved

123
00:04:28,320 --> 00:04:31,440
an outbound functionality in the case of

124
00:04:31,440 --> 00:04:32,479
multisignature

125
00:04:32,479 --> 00:04:34,800
uh to the best of of our knowledge uh

126
00:04:34,800 --> 00:04:36,240
the previous constructions

127
00:04:36,240 --> 00:04:37,680
required at least three rounds of

128
00:04:37,680 --> 00:04:39,840
interaction so we were able to

129
00:04:39,840 --> 00:04:44,719
reduce round complexity by one round

130
00:04:44,960 --> 00:04:47,360
so since our resulting construction is

131
00:04:47,360 --> 00:04:48,240
very simple

132
00:04:48,240 --> 00:04:50,960
let me quickly go over the protocols so

133
00:04:50,960 --> 00:04:51,520
here

134
00:04:51,520 --> 00:04:54,320
both parties hold the secret key shares

135
00:04:54,320 --> 00:04:55,199
as a first step

136
00:04:55,199 --> 00:04:59,280
they hash the input message and then uh

137
00:04:59,280 --> 00:05:01,680
it's hashed into the commitment key this

138
00:05:01,680 --> 00:05:03,039
is a critical

139
00:05:03,039 --> 00:05:06,479
part and then since we rely on

140
00:05:06,479 --> 00:05:09,440
additively homomorphic commitment so we

141
00:05:09,440 --> 00:05:11,440
let each party commit to the first

142
00:05:11,440 --> 00:05:14,320
message and then we can take the sum of

143
00:05:14,320 --> 00:05:15,360
these commitments

144
00:05:15,360 --> 00:05:18,720
in a meaningful way then after

145
00:05:18,720 --> 00:05:20,800
both parties successfully pass the

146
00:05:20,800 --> 00:05:22,639
rejection sampling

147
00:05:22,639 --> 00:05:24,880
they output the sum of commitments uh

148
00:05:24,880 --> 00:05:25,919
response and

149
00:05:25,919 --> 00:05:28,160
commitment randomness and basically

150
00:05:28,160 --> 00:05:30,720
that's about it

151
00:05:30,720 --> 00:05:33,039
okay so to conclude in this work uh we

152
00:05:33,039 --> 00:05:34,720
present the multi-party fiat champion

153
00:05:34,720 --> 00:05:35,840
support signing

154
00:05:35,840 --> 00:05:39,120
protocols with a low random complexity

155
00:05:39,120 --> 00:05:41,039
and then i want to remark that

156
00:05:41,039 --> 00:05:42,639
essentially any progress

157
00:05:42,639 --> 00:05:44,800
in the multi-party discrete log-based

158
00:05:44,800 --> 00:05:46,240
sign-in

159
00:05:46,240 --> 00:05:48,560
also affects lattice-based counterparts

160
00:05:48,560 --> 00:05:50,000
so whenever there's some updates we

161
00:05:50,000 --> 00:05:50,960
should always

162
00:05:50,960 --> 00:05:53,039
look at the applicability to the at this

163
00:05:53,039 --> 00:05:54,560
setting

164
00:05:54,560 --> 00:05:56,720
but of course there are subtle several

165
00:05:56,720 --> 00:05:58,000
subtle differences

166
00:05:58,000 --> 00:06:00,160
for example in our construction uh we

167
00:06:00,160 --> 00:06:02,240
had to actually change the parameters

168
00:06:02,240 --> 00:06:04,000
and the signature size depending on the

169
00:06:04,000 --> 00:06:05,520
number of parties which is not the case

170
00:06:05,520 --> 00:06:06,479
for the

171
00:06:06,479 --> 00:06:10,400
discrete log based instantiations also

172
00:06:10,400 --> 00:06:12,800
due to the additional step of rejection

173
00:06:12,800 --> 00:06:13,759
sampling

174
00:06:13,759 --> 00:06:16,080
security proof is a bit more involved

175
00:06:16,080 --> 00:06:18,000
also we have to wait for all the parties

176
00:06:18,000 --> 00:06:19,680
to pass the rejection sampling

177
00:06:19,680 --> 00:06:22,720
so there should be sufficiently many

178
00:06:22,720 --> 00:06:25,840
power repetitions uh for a large end

179
00:06:25,840 --> 00:06:28,639
so scalability uh so improving the

180
00:06:28,639 --> 00:06:29,520
scalability is

181
00:06:29,520 --> 00:06:32,160
interesting future work there are a

182
00:06:32,160 --> 00:06:33,120
couple of

183
00:06:33,120 --> 00:06:36,080
open questions so of course it would be

184
00:06:36,080 --> 00:06:37,440
very interesting if we can make the

185
00:06:37,440 --> 00:06:38,720
signature size

186
00:06:38,720 --> 00:06:41,280
less dependent on the number of parties

187
00:06:41,280 --> 00:06:42,240
also since

188
00:06:42,240 --> 00:06:44,639
in our work we only gave a security

189
00:06:44,639 --> 00:06:46,160
proof in the classical random

190
00:06:46,160 --> 00:06:48,479
model also we relied on the forking

191
00:06:48,479 --> 00:06:49,440
lemma

192
00:06:49,440 --> 00:06:51,759
giving tighter security reduction and

193
00:06:51,759 --> 00:06:53,120
the proof in the qram

194
00:06:53,120 --> 00:06:54,800
would be a very interesting follow-up

195
00:06:54,800 --> 00:06:56,240
work

196
00:06:56,240 --> 00:06:58,479
so thank you for your attention if you

197
00:06:58,479 --> 00:07:00,840
have any questions i'll be happy to

198
00:07:00,840 --> 00:07:03,440
answer

199
00:07:03,440 --> 00:07:05,759
thank you akira for this presentation

200
00:07:05,759 --> 00:07:06,479
and also for

201
00:07:06,479 --> 00:07:09,759
the video online so are there any

202
00:07:09,759 --> 00:07:11,120
questions don't hesitate

203
00:07:11,120 --> 00:07:14,319
to ask on so there is the chat here

204
00:07:14,319 --> 00:07:17,440
there is also the chat on zulip and

205
00:07:17,440 --> 00:07:20,800
if you want you can raise hands

206
00:07:26,080 --> 00:07:29,360
oh yes there is a question on the

207
00:07:29,360 --> 00:07:32,400
on the on the chat uh so uh can you

208
00:07:32,400 --> 00:07:34,319
elaborate a bit more on the difficulty

209
00:07:34,319 --> 00:07:34,960
of proving

210
00:07:34,960 --> 00:07:38,800
uh the security in the qram please

211
00:07:38,800 --> 00:07:42,240
sure okay so basically uh the use of

212
00:07:42,240 --> 00:07:44,000
traptor commitment

213
00:07:44,000 --> 00:07:47,759
inevitably requires the computationally

214
00:07:47,759 --> 00:07:50,879
binding property of the commitment and

215
00:07:50,879 --> 00:07:51,759
in order to

216
00:07:51,759 --> 00:07:54,479
give security reduction to binding it

217
00:07:54,479 --> 00:07:55,120
seems like

218
00:07:55,120 --> 00:07:57,120
we need some kind of rewinding technique

219
00:07:57,120 --> 00:07:58,240
because we have to

220
00:07:58,240 --> 00:08:00,639
ask the advisor to submit two openings

221
00:08:00,639 --> 00:08:02,240
to the commitments

222
00:08:02,240 --> 00:08:05,520
so this is this seems to be a major

223
00:08:05,520 --> 00:08:09,759
uh block uh for the q rom because uh

224
00:08:09,759 --> 00:08:11,680
my understanding about the kilometer

225
00:08:11,680 --> 00:08:13,599
fierce shamir in the quran is that

226
00:08:13,599 --> 00:08:16,400
we aren't we are not able to rewind

227
00:08:16,400 --> 00:08:17,599
adversary

228
00:08:17,599 --> 00:08:21,039
so i just don't see how uh curant proof

229
00:08:21,039 --> 00:08:21,840
can be made

230
00:08:21,840 --> 00:08:27,840
with structure commitment

231
00:08:28,479 --> 00:08:30,560
i see thank you there is another

232
00:08:30,560 --> 00:08:32,320
question

233
00:08:32,320 --> 00:08:34,719
have you explored if this approach would

234
00:08:34,719 --> 00:08:38,839
work in the two-party dishonest majority

235
00:08:38,839 --> 00:08:40,000
setting

236
00:08:40,000 --> 00:08:44,399
um so so i'm not sure what the

237
00:08:44,399 --> 00:08:47,040
two-party dishonest majority so

238
00:08:47,040 --> 00:08:48,640
basically what we achieved is a

239
00:08:48,640 --> 00:08:51,120
two-party signing and even if one of the

240
00:08:51,120 --> 00:08:51,680
parties

241
00:08:51,680 --> 00:08:54,560
corrupt the security is a chemistry

242
00:08:54,560 --> 00:08:55,680
problem

243
00:08:55,680 --> 00:08:59,200
so so i'm not sure what

244
00:08:59,200 --> 00:09:01,600
exactly true party dishonest majority

245
00:09:01,600 --> 00:09:02,340
yeah

246
00:09:02,340 --> 00:09:04,959
[Music]

247
00:09:04,959 --> 00:09:08,720
frank can you explain what were your

248
00:09:08,720 --> 00:09:11,360
what you had in mind in this question

249
00:09:11,360 --> 00:09:11,760
yes

250
00:09:11,760 --> 00:09:13,600
you know the partners were going to be

251
00:09:13,600 --> 00:09:16,000
uh um semi honest or

252
00:09:16,000 --> 00:09:19,279
or can this work in a dishonest majority

253
00:09:19,279 --> 00:09:21,360
setting

254
00:09:21,360 --> 00:09:24,160
but it looks like it you you answered it

255
00:09:24,160 --> 00:09:25,839
so it looks like it will work

256
00:09:25,839 --> 00:09:29,120
in that um when one party is

257
00:09:29,120 --> 00:09:32,399
is dishonest exactly yeah so

258
00:09:32,399 --> 00:09:34,320
yes of course so in our setting we

259
00:09:34,320 --> 00:09:36,720
assume that the adverse is malicious

260
00:09:36,720 --> 00:09:39,360
so yeah so it's it's essentially

261
00:09:39,360 --> 00:09:40,320
dishonest

262
00:09:40,320 --> 00:09:44,880
malicious security thanks

263
00:09:47,200 --> 00:09:50,480
i had one question also so i'm not sure

264
00:09:50,480 --> 00:09:50,880
aggress

265
00:09:50,880 --> 00:09:52,640
the difference but what is exactly the

266
00:09:52,640 --> 00:09:54,640
difference between a multi-signature and

267
00:09:54,640 --> 00:09:57,519
an n out of n signature in terms of use

268
00:09:57,519 --> 00:09:58,240
case

269
00:09:58,240 --> 00:10:01,440
can we build the one from another maybe

270
00:10:01,440 --> 00:10:06,079
um so that's uh interesting question so

271
00:10:06,079 --> 00:10:08,959
so at least in uh our paper we define uh

272
00:10:08,959 --> 00:10:11,279
as follows so an autobahn signature

273
00:10:11,279 --> 00:10:13,600
uh you have some dedicated interactive

274
00:10:13,600 --> 00:10:15,920
key generation protocol and then

275
00:10:15,920 --> 00:10:18,240
all parties agree on some single public

276
00:10:18,240 --> 00:10:19,120
key

277
00:10:19,120 --> 00:10:20,959
but for multi-signature you don't need

278
00:10:20,959 --> 00:10:22,240
any uh

279
00:10:22,240 --> 00:10:24,560
key generation protocol each party just

280
00:10:24,560 --> 00:10:26,160
outputs their own

281
00:10:26,160 --> 00:10:29,839
key pair and then whenever they want to

282
00:10:29,839 --> 00:10:33,040
sign something they agree on

283
00:10:33,040 --> 00:10:35,839
some sort of aggregated public key and

284
00:10:35,839 --> 00:10:37,200
then the signature

285
00:10:37,200 --> 00:10:39,600
is also verified with respect to this

286
00:10:39,600 --> 00:10:40,399
aggregated

287
00:10:40,399 --> 00:10:44,399
public keys so at least

288
00:10:44,399 --> 00:10:46,720
i guess signature is more often used in

289
00:10:46,720 --> 00:10:48,959
uh blockchain applications

290
00:10:48,959 --> 00:10:51,120
um i'm not sure about an out of band

291
00:10:51,120 --> 00:10:54,160
signature that's uh

292
00:10:54,160 --> 00:10:56,720
yeah so for concrete application i'm

293
00:10:56,720 --> 00:10:59,519
actually not completely sure

294
00:10:59,519 --> 00:11:01,920
okay and we cannot build uh uh so we

295
00:11:01,920 --> 00:11:02,720
cannot build

296
00:11:02,720 --> 00:11:06,000
um um multi-signature from and out of

297
00:11:06,000 --> 00:11:08,720
end signatures

298
00:11:09,519 --> 00:11:11,040
so yeah that's that's interesting so

299
00:11:11,040 --> 00:11:13,200
because they uh they behave very

300
00:11:13,200 --> 00:11:14,000
similarly but

301
00:11:14,000 --> 00:11:15,760
uh i'm not sure if there's any generic

302
00:11:15,760 --> 00:11:18,320
way to transform uh one to the other

303
00:11:18,320 --> 00:11:22,640
okay yeah okay

304
00:11:22,720 --> 00:11:26,399
so i think we can go to the next talk

305
00:11:26,399 --> 00:11:28,640
and maybe come back if there is still

306
00:11:28,640 --> 00:11:30,240
question in the end or answer in the

307
00:11:30,240 --> 00:11:32,399
zulip chat

308
00:11:32,399 --> 00:11:34,640
so our next talk is going to be on

309
00:11:34,640 --> 00:11:36,240
shorter let his base zero knowledge

310
00:11:36,240 --> 00:11:36,880
proof

311
00:11:36,880 --> 00:11:39,760
via one time commitment uh this is a

312
00:11:39,760 --> 00:11:43,200
work by vladimirsky

313
00:11:43,200 --> 00:11:45,920
sorry if i missed say your name and

314
00:11:45,920 --> 00:11:46,959
gregor

315
00:11:46,959 --> 00:11:51,119
and ken is going to to give the talk

316
00:11:52,320 --> 00:11:56,959
are you here

317
00:11:56,959 --> 00:11:58,639
oh sorry i just lost internet can you

318
00:11:58,639 --> 00:12:00,720
hear me yes

319
00:12:00,720 --> 00:12:11,760
okay uh yeah let me share my screen

320
00:12:11,760 --> 00:12:14,560
okay great okay um thank you very much

321
00:12:14,560 --> 00:12:15,040
for the

322
00:12:15,040 --> 00:12:17,200
introduction actually i didn't actually

323
00:12:17,200 --> 00:12:18,720
yeah i didn't hear it because of the

324
00:12:18,720 --> 00:12:20,399
internet lost but yeah

325
00:12:20,399 --> 00:12:23,760
uh yeah uh so um

326
00:12:23,760 --> 00:12:26,240
yeah hi my name is khan i'm a pg student

327
00:12:26,240 --> 00:12:28,399
at ibm research theory and ethereum and

328
00:12:28,399 --> 00:12:29,760
today i'm going to talk about

329
00:12:29,760 --> 00:12:31,200
shorter lattice base your knowledge

330
00:12:31,200 --> 00:12:33,200
proofs by one-time commitments

331
00:12:33,200 --> 00:12:34,720
so this is joint work with vadim

332
00:12:34,720 --> 00:12:37,440
yuvashevsky and gregor scila

333
00:12:37,440 --> 00:12:39,200
okay let's start with rejection sampling

334
00:12:39,200 --> 00:12:40,880
which was kind of mentioned in the

335
00:12:40,880 --> 00:12:42,240
previous talk

336
00:12:42,240 --> 00:12:44,079
so it is used in many lattice-based

337
00:12:44,079 --> 00:12:46,079
zero-knowledge proofs protocols and

338
00:12:46,079 --> 00:12:49,120
it is used to ensure the zero-knowledge

339
00:12:49,120 --> 00:12:49,839
property

340
00:12:49,839 --> 00:12:52,160
so let's just illustrate uh this idea

341
00:12:52,160 --> 00:12:53,760
with the following example

342
00:12:53,760 --> 00:12:55,440
which is a simple fiat chamber with a

343
00:12:55,440 --> 00:12:57,680
boards protocol

344
00:12:57,680 --> 00:12:59,680
so suppose we want to prove knowledge of

345
00:12:59,680 --> 00:13:02,160
a vector s which has small coefficients

346
00:13:02,160 --> 00:13:04,560
such that a s is equal to u over some

347
00:13:04,560 --> 00:13:06,320
ring let's say integers modulus and

348
00:13:06,320 --> 00:13:07,600
prime q

349
00:13:07,600 --> 00:13:10,639
so what we do is the prover starts

350
00:13:10,639 --> 00:13:12,720
by generating and masking y from the

351
00:13:12,720 --> 00:13:14,320
discrete gaussian

352
00:13:14,320 --> 00:13:16,560
with standard deviation sigma and then

353
00:13:16,560 --> 00:13:17,600
it sends w

354
00:13:17,600 --> 00:13:21,279
which is a times y then the verifier

355
00:13:21,279 --> 00:13:23,360
samples a challenge c and then sends it

356
00:13:23,360 --> 00:13:24,720
to the approver

357
00:13:24,720 --> 00:13:26,800
and then finally the prover computes set

358
00:13:26,800 --> 00:13:29,040
equal to y plus cs

359
00:13:29,040 --> 00:13:30,880
so the main idea of rejection sampling

360
00:13:30,880 --> 00:13:32,720
here is that as you can see the

361
00:13:32,720 --> 00:13:33,839
distribution of z

362
00:13:33,839 --> 00:13:36,399
is kind of dependent on the secret right

363
00:13:36,399 --> 00:13:37,360
it is

364
00:13:37,360 --> 00:13:38,959
the distribution is the discrete

365
00:13:38,959 --> 00:13:40,880
gaussian shifted by c times

366
00:13:40,880 --> 00:13:43,760
s so the idea here is to force the

367
00:13:43,760 --> 00:13:45,920
distribution of z to be independent of

368
00:13:45,920 --> 00:13:46,800
the secret

369
00:13:46,800 --> 00:13:49,040
so that we can actually simulate the z

370
00:13:49,040 --> 00:13:51,519
and then simulate the transcript

371
00:13:51,519 --> 00:13:54,880
so let's say we want uh z to behave like

372
00:13:54,880 --> 00:13:56,480
it's taken from a discrete gaussian

373
00:13:56,480 --> 00:13:57,519
centered at zero

374
00:13:57,519 --> 00:14:00,639
then it's independent of the secret

375
00:14:00,639 --> 00:14:02,720
so in practice what we do is that we

376
00:14:02,720 --> 00:14:04,240
have one more step where we say

377
00:14:04,240 --> 00:14:05,839
okay we output z with certain

378
00:14:05,839 --> 00:14:08,560
probability and then this probability is

379
00:14:08,560 --> 00:14:10,560
as you can see here is the minimum of

380
00:14:10,560 --> 00:14:13,440
one and uh and probability of getting

381
00:14:13,440 --> 00:14:15,360
set from the discrete gaussian divided

382
00:14:15,360 --> 00:14:17,040
by the probability of getting

383
00:14:17,040 --> 00:14:19,839
the discrete probability of getting said

384
00:14:19,839 --> 00:14:20,639
from the

385
00:14:20,639 --> 00:14:22,639
shifted discrete gaussian times some

386
00:14:22,639 --> 00:14:24,720
parameter m

387
00:14:24,720 --> 00:14:26,880
and then this parameter m dictates how

388
00:14:26,880 --> 00:14:29,040
many repetitions we need to make

389
00:14:29,040 --> 00:14:32,480
until well the prover doesn't import or

390
00:14:32,480 --> 00:14:35,920
output something so let's recall how we

391
00:14:35,920 --> 00:14:36,560
choose

392
00:14:36,560 --> 00:14:38,160
usually choose m and the standard

393
00:14:38,160 --> 00:14:40,639
deviation so to choose m we have

394
00:14:40,639 --> 00:14:44,160
we want to we want this fraction here

395
00:14:44,160 --> 00:14:47,600
this term here to be less than one for

396
00:14:47,600 --> 00:14:50,399
almost all the sets so what we do is we

397
00:14:50,399 --> 00:14:51,040
look at

398
00:14:51,040 --> 00:14:54,320
the maximum over sets of this term so if

399
00:14:54,320 --> 00:14:55,920
we just do the math this is just the

400
00:14:55,920 --> 00:14:58,320
maximum over set of e to the

401
00:14:58,320 --> 00:15:01,440
minus two inner product of z and v plus

402
00:15:01,440 --> 00:15:03,360
the norm of v squared divided by two

403
00:15:03,360 --> 00:15:04,639
sigma squared

404
00:15:04,639 --> 00:15:08,639
and our case v is the c times s part

405
00:15:08,639 --> 00:15:10,399
so the next step where we choose the

406
00:15:10,399 --> 00:15:12,800
parameters is we use the tailbone

407
00:15:12,800 --> 00:15:13,839
inequality

408
00:15:13,839 --> 00:15:15,839
which says that if z is chosen from a

409
00:15:15,839 --> 00:15:17,199
discrete gaussian

410
00:15:17,199 --> 00:15:19,040
then the absolute value of the inner

411
00:15:19,040 --> 00:15:20,560
product is at most 12

412
00:15:20,560 --> 00:15:23,839
times sigma times the normal v with an

413
00:15:23,839 --> 00:15:25,600
overwhelming probability

414
00:15:25,600 --> 00:15:28,560
and by applying the inequality up there

415
00:15:28,560 --> 00:15:30,720
we can just set m to be equal to

416
00:15:30,720 --> 00:15:33,920
yeah e to the 24 sigma times the norm of

417
00:15:33,920 --> 00:15:34,240
v

418
00:15:34,240 --> 00:15:36,160
plus normal v squared divided by two

419
00:15:36,160 --> 00:15:37,680
sigma squared

420
00:15:37,680 --> 00:15:40,880
so practically if we say okay let's uh

421
00:15:40,880 --> 00:15:42,639
have the number of repetitions equal to

422
00:15:42,639 --> 00:15:44,079
three then we

423
00:15:44,079 --> 00:15:46,639
then by using this equation we can set

424
00:15:46,639 --> 00:15:47,519
the standard

425
00:15:47,519 --> 00:15:50,000
standard deviation to be around 11 times

426
00:15:50,000 --> 00:15:51,279
the normal v

427
00:15:51,279 --> 00:15:53,600
so the question is if we can do better

428
00:15:53,600 --> 00:15:55,920
so the main idea of this paper

429
00:15:55,920 --> 00:15:58,320
is the following observation so what if

430
00:15:58,320 --> 00:15:59,120
we

431
00:15:59,120 --> 00:16:02,639
force the inner product of z and v to be

432
00:16:02,639 --> 00:16:05,519
non-negative so the fir one question is

433
00:16:05,519 --> 00:16:07,199
what do we mean by forcing and the

434
00:16:07,199 --> 00:16:08,240
second question is

435
00:16:08,240 --> 00:16:10,560
what's the motivation for that so to

436
00:16:10,560 --> 00:16:12,480
answer the first question

437
00:16:12,480 --> 00:16:14,639
we have to go back to the protocol so

438
00:16:14,639 --> 00:16:15,759
what's new

439
00:16:15,759 --> 00:16:18,560
is that the prover in the end also

440
00:16:18,560 --> 00:16:20,320
checks if the inner product of z

441
00:16:20,320 --> 00:16:23,199
and cs is non-negative so if it's

442
00:16:23,199 --> 00:16:24,560
negative

443
00:16:24,560 --> 00:16:27,120
then it aborts and if it's not negative

444
00:16:27,120 --> 00:16:29,279
it continues just like before

445
00:16:29,279 --> 00:16:32,959
so what's the motivation behind it well

446
00:16:32,959 --> 00:16:35,519
if we force this condition then we don't

447
00:16:35,519 --> 00:16:37,759
really have to rely on the tail bound

448
00:16:37,759 --> 00:16:39,680
inequality anymore because it's kind of

449
00:16:39,680 --> 00:16:41,040
loose instead

450
00:16:41,040 --> 00:16:44,399
we can just bounce this expression by

451
00:16:44,399 --> 00:16:46,639
e to the norm of v squared divided by

452
00:16:46,639 --> 00:16:47,839
two sigma squared

453
00:16:47,839 --> 00:16:49,519
because here we know that the inner

454
00:16:49,519 --> 00:16:51,199
product is not negative

455
00:16:51,199 --> 00:16:54,480
and because we can just set m to be this

456
00:16:54,480 --> 00:16:56,000
so if we want to keep the number of

457
00:16:56,000 --> 00:16:58,000
repetitions to be around three

458
00:16:58,000 --> 00:17:00,880
then we set the standard va deviation to

459
00:17:00,880 --> 00:17:02,560
be around 1.11

460
00:17:02,560 --> 00:17:05,520
times normal fee which is now around 10

461
00:17:05,520 --> 00:17:07,520
times

462
00:17:07,520 --> 00:17:10,559
10 times less than the previous uh

463
00:17:10,559 --> 00:17:13,280
than the previous balance okay so now

464
00:17:13,280 --> 00:17:14,640
the question is

465
00:17:14,640 --> 00:17:16,839
if if it comes for free if there are any

466
00:17:16,839 --> 00:17:18,000
issues

467
00:17:18,000 --> 00:17:20,559
well if we go back to the previous

468
00:17:20,559 --> 00:17:22,559
protocol it gets a bit fishy right

469
00:17:22,559 --> 00:17:24,240
because

470
00:17:24,240 --> 00:17:27,679
if the verify gets the z then they know

471
00:17:27,679 --> 00:17:30,480
that the inner product is non-negative

472
00:17:30,480 --> 00:17:32,640
so uh if we for example want to

473
00:17:32,640 --> 00:17:34,960
construct the signature scheme out of it

474
00:17:34,960 --> 00:17:37,200
then if the verify gathers a lot of

475
00:17:37,200 --> 00:17:38,880
signatures then it gets

476
00:17:38,880 --> 00:17:40,960
more and more information about the s

477
00:17:40,960 --> 00:17:43,280
which is let's say the secret key

478
00:17:43,280 --> 00:17:45,280
so what we do is that we find a nice

479
00:17:45,280 --> 00:17:46,640
application

480
00:17:46,640 --> 00:17:49,520
in the so-called one-time commitments so

481
00:17:49,520 --> 00:17:50,080
there

482
00:17:50,080 --> 00:17:52,799
have there have been well a few recent

483
00:17:52,799 --> 00:17:53,679
works

484
00:17:53,679 --> 00:17:56,559
which uh where they propose efficient

485
00:17:56,559 --> 00:17:57,520
protocols for

486
00:17:57,520 --> 00:18:00,000
proving uh certain linear and

487
00:18:00,000 --> 00:18:01,679
multiplicative relations between the

488
00:18:01,679 --> 00:18:03,120
committed messages

489
00:18:03,120 --> 00:18:05,440
uh using lattice-based uh commitment

490
00:18:05,440 --> 00:18:06,160
scheme

491
00:18:06,160 --> 00:18:09,440
so so yeah so the general structure of

492
00:18:09,440 --> 00:18:11,520
the protocol is that the prover starts

493
00:18:11,520 --> 00:18:12,240
by

494
00:18:12,240 --> 00:18:15,200
committing to some messages under some

495
00:18:15,200 --> 00:18:16,640
fresh randomness and then

496
00:18:16,640 --> 00:18:19,039
they send the commitment and then

497
00:18:19,039 --> 00:18:20,960
there's some fancy stuff going on

498
00:18:20,960 --> 00:18:22,720
and then in the end the approver wants

499
00:18:22,720 --> 00:18:24,799
to do the opening proof

500
00:18:24,799 --> 00:18:26,880
so what does it mean then the verifier

501
00:18:26,880 --> 00:18:28,480
sends the challenge c

502
00:18:28,480 --> 00:18:31,120
and then the prover does similar thing

503
00:18:31,120 --> 00:18:32,240
as before

504
00:18:32,240 --> 00:18:34,640
and then yeah it computes z equal to y

505
00:18:34,640 --> 00:18:35,520
plus c r

506
00:18:35,520 --> 00:18:37,520
where r is the randomness and here we

507
00:18:37,520 --> 00:18:39,120
add this additional step

508
00:18:39,120 --> 00:18:40,960
where we check if the inner product is

509
00:18:40,960 --> 00:18:42,480
not negative

510
00:18:42,480 --> 00:18:44,480
and then yeah if if if all the

511
00:18:44,480 --> 00:18:46,480
constitutions are satisfied then we send

512
00:18:46,480 --> 00:18:47,840
the set

513
00:18:47,840 --> 00:18:50,320
um so yeah so the problem might still

514
00:18:50,320 --> 00:18:52,799
appear right if the verifier gets the z

515
00:18:52,799 --> 00:18:54,720
they know that the inner product of z

516
00:18:54,720 --> 00:18:56,640
and c cr is not negative

517
00:18:56,640 --> 00:19:00,320
well uh can you uh can you finish in uh

518
00:19:00,320 --> 00:19:01,760
like uh

519
00:19:01,760 --> 00:19:05,039
yes just now

520
00:19:05,039 --> 00:19:08,080
sorry sorry um

521
00:19:08,080 --> 00:19:11,200
uh yeah so it's still fine because

522
00:19:11,200 --> 00:19:14,000
we uh the prover when we run the

523
00:19:14,000 --> 00:19:15,520
protocol the approver will

524
00:19:15,520 --> 00:19:18,320
get fresh randomness so this means that

525
00:19:18,320 --> 00:19:18,720
we

526
00:19:18,720 --> 00:19:21,840
just um lose one bit well we just

527
00:19:21,840 --> 00:19:25,120
leak one bit of the randomness

528
00:19:25,120 --> 00:19:27,360
uh so yeah so so basically we applied

529
00:19:27,360 --> 00:19:29,360
the strategy to some previous works

530
00:19:29,360 --> 00:19:32,799
to to obtain proof sizes by around

531
00:19:32,799 --> 00:19:35,600
20 to 30 smaller than previous works so

532
00:19:35,600 --> 00:19:37,360
yeah

533
00:19:37,360 --> 00:19:39,280
so yeah we are running out of time so

534
00:19:39,280 --> 00:19:42,160
that's it thanks

535
00:19:42,320 --> 00:19:44,240
thank you for the for the short talk and

536
00:19:44,240 --> 00:19:46,080
for the long video online

537
00:19:46,080 --> 00:19:49,760
uh is there any question so either you

538
00:19:49,760 --> 00:19:51,120
can

539
00:19:51,120 --> 00:19:53,200
mute yourself or raise your hand and

540
00:19:53,200 --> 00:19:56,480
then unmute yourself or

541
00:19:59,280 --> 00:20:02,480
okay it was a a quick question yeah

542
00:20:02,480 --> 00:20:06,320
your so you keep i forgot the notation

543
00:20:06,320 --> 00:20:08,559
you keep on is a z such that the inner

544
00:20:08,559 --> 00:20:09,600
product with

545
00:20:09,600 --> 00:20:13,120
what are the um cs i guess

546
00:20:13,120 --> 00:20:15,360
i mean the inner product is non-negative

547
00:20:15,360 --> 00:20:17,120
z and v is not negative

548
00:20:17,120 --> 00:20:18,960
this is a geometric condition do you

549
00:20:18,960 --> 00:20:20,400
have any nutrition and

550
00:20:20,400 --> 00:20:22,480
what's happening and so i mean why do

551
00:20:22,480 --> 00:20:24,159
you want to give the z that are close to

552
00:20:24,159 --> 00:20:25,039
v and not the z

553
00:20:25,039 --> 00:20:27,600
that are away from v is there any

554
00:20:27,600 --> 00:20:28,720
geometric

555
00:20:28,720 --> 00:20:34,400
stuff we can understand

556
00:20:34,400 --> 00:20:37,520
well in terms of geometry well the main

557
00:20:37,520 --> 00:20:38,720
motivation is

558
00:20:38,720 --> 00:20:41,600
literally just to have a bounds a tight

559
00:20:41,600 --> 00:20:43,200
bound on this expression

560
00:20:43,200 --> 00:20:45,600
up there so that we can get the lowest

561
00:20:45,600 --> 00:20:46,720
uh

562
00:20:46,720 --> 00:20:48,480
the lowest standard deviation as

563
00:20:48,480 --> 00:20:50,320
possible um

564
00:20:50,320 --> 00:20:52,320
as you can see there is one more thing

565
00:20:52,320 --> 00:20:54,080
which i kind of uh

566
00:20:54,080 --> 00:20:57,200
ignored for the presentation

567
00:20:57,200 --> 00:20:58,880
is that we have this additional

568
00:20:58,880 --> 00:21:01,200
condition additional if here right

569
00:21:01,200 --> 00:21:04,240
so we say if the uh in the product is

570
00:21:04,240 --> 00:21:05,760
negative then we abort right

571
00:21:05,760 --> 00:21:08,960
but we see um so

572
00:21:08,960 --> 00:21:11,919
this zero is this i know this threshold

573
00:21:11,919 --> 00:21:13,360
zero is important

574
00:21:13,360 --> 00:21:15,440
because if z is chosen from a discrete

575
00:21:15,440 --> 00:21:16,400
gaussian

576
00:21:16,400 --> 00:21:17,760
then the probability that it's

577
00:21:17,760 --> 00:21:20,640
non-negative is at least one half

578
00:21:20,640 --> 00:21:23,840
so this is this also affects how many

579
00:21:23,840 --> 00:21:26,559
times we need to repeat the protocol so

580
00:21:26,559 --> 00:21:30,400
so um so yeah so we also try to play

581
00:21:30,400 --> 00:21:30,880
around

582
00:21:30,880 --> 00:21:33,039
with uh having different threshold than

583
00:21:33,039 --> 00:21:37,039
zero i don't know 10 or something but uh

584
00:21:37,039 --> 00:21:40,400
uh we didn't get much yet we didn't yeah

585
00:21:40,400 --> 00:21:42,240
it does not change too much

586
00:21:42,240 --> 00:21:45,919
yeah yeah okay okay i think i need to go

587
00:21:45,919 --> 00:21:47,200
to the next talk

588
00:21:47,200 --> 00:21:49,760
yeah i think

589
00:21:50,240 --> 00:21:53,600
go ahead so it's still okay uh okay so

590
00:21:53,600 --> 00:21:55,440
the next turk is going to be on

591
00:21:55,440 --> 00:21:59,600
uh something something in lattice is

592
00:21:59,600 --> 00:22:01,440
something non-gushan distribution in

593
00:22:01,440 --> 00:22:04,720
lattices exactly so this is a

594
00:22:04,720 --> 00:22:07,840
work by maxim plonson pressed and maxim

595
00:22:07,840 --> 00:22:09,760
is going i guess maximum is going to

596
00:22:09,760 --> 00:22:12,960
give the torque yes can you hear me

597
00:22:12,960 --> 00:22:14,799
can you see the slides and okay

598
00:22:14,799 --> 00:22:16,240
everything's good

599
00:22:16,240 --> 00:22:18,880
okay so thank you for the introduction

600
00:22:18,880 --> 00:22:19,360
and

601
00:22:19,360 --> 00:22:20,880
indeed i'm going to talk about sampling

602
00:22:20,880 --> 00:22:23,039
distributions on lattices

603
00:22:23,039 --> 00:22:26,400
um wait um

604
00:22:26,400 --> 00:22:28,240
okay so we are given the basis of a

605
00:22:28,240 --> 00:22:30,080
lattice and a target vector in the space

606
00:22:30,080 --> 00:22:31,280
and we want to sample from some

607
00:22:31,280 --> 00:22:32,799
distribution that's defined on the

608
00:22:32,799 --> 00:22:33,919
lattice

609
00:22:33,919 --> 00:22:36,559
now for cryptography we want uh d to be

610
00:22:36,559 --> 00:22:37,360
independent

611
00:22:37,360 --> 00:22:39,679
of the basis because usually the basis

612
00:22:39,679 --> 00:22:40,880
is a secret

613
00:22:40,880 --> 00:22:43,200
and we want the center of d to be the

614
00:22:43,200 --> 00:22:44,080
target

615
00:22:44,080 --> 00:22:45,600
and finally we want the standard

616
00:22:45,600 --> 00:22:47,200
deviation to be as

617
00:22:47,200 --> 00:22:50,720
small as possible so why do we want to

618
00:22:50,720 --> 00:22:51,360
do this

619
00:22:51,360 --> 00:22:54,559
uh we want to do this because for many

620
00:22:54,559 --> 00:22:56,559
constructions in lattice cryptography

621
00:22:56,559 --> 00:22:57,760
lattice numbers are

622
00:22:57,760 --> 00:23:00,000
very useful it's a useful tool for these

623
00:23:00,000 --> 00:23:00,880
so here's a

624
00:23:00,880 --> 00:23:03,440
list of examples of what you can do with

625
00:23:03,440 --> 00:23:06,480
a lattice sampler

626
00:23:07,360 --> 00:23:10,640
yeah so uh the list of

627
00:23:10,640 --> 00:23:12,960
existing practical lattice samplers is

628
00:23:12,960 --> 00:23:14,080
not very long

629
00:23:14,080 --> 00:23:16,000
for unsearchable analysis we have client

630
00:23:16,000 --> 00:23:18,000
sampler and bike out some player

631
00:23:18,000 --> 00:23:20,640
uh just a quick mention for specific

632
00:23:20,640 --> 00:23:22,240
types of cryptographic lattices there

633
00:23:22,240 --> 00:23:23,760
exists some other samples but i only

634
00:23:23,760 --> 00:23:25,440
have five minutes so i'll just

635
00:23:25,440 --> 00:23:28,640
uh go back to general lattices so

636
00:23:28,640 --> 00:23:31,200
these two unstructured lattice numbers

637
00:23:31,200 --> 00:23:31,840
have

638
00:23:31,840 --> 00:23:35,360
uh some common similarities which are

639
00:23:35,360 --> 00:23:37,360
they're constructed as randomized

640
00:23:37,360 --> 00:23:39,360
variants of decoding algorithms

641
00:23:39,360 --> 00:23:40,799
they're they sample from discrete

642
00:23:40,799 --> 00:23:42,400
gaussians and they have a

643
00:23:42,400 --> 00:23:45,600
precision to width trade-off so

644
00:23:45,600 --> 00:23:48,799
this brings me to our contribution which

645
00:23:48,799 --> 00:23:49,200
is

646
00:23:49,200 --> 00:23:51,200
uh the design of a framework for which

647
00:23:51,200 --> 00:23:52,320
an instantiation

648
00:23:52,320 --> 00:23:55,360
is a lattice simpler

649
00:23:55,360 --> 00:23:58,559
so from a high level uh the framework

650
00:23:58,559 --> 00:24:02,480
is based on uh geometric uh natural ids

651
00:24:02,480 --> 00:24:05,440
that have been around a while so i

652
00:24:05,440 --> 00:24:06,000
describe

653
00:24:06,000 --> 00:24:08,880
this idea really quick say you want to

654
00:24:08,880 --> 00:24:11,200
sample from a discrete gaussian

655
00:24:11,200 --> 00:24:14,000
on the lattice first you sample from the

656
00:24:14,000 --> 00:24:15,600
continuous usual

657
00:24:15,600 --> 00:24:17,919
gaussian in the space this gives you

658
00:24:17,919 --> 00:24:18,960
some points

659
00:24:18,960 --> 00:24:22,400
uh here and you

660
00:24:22,400 --> 00:24:24,240
map this point to a closed lattice point

661
00:24:24,240 --> 00:24:26,480
using a decoding algorithm

662
00:24:26,480 --> 00:24:30,080
so intuitively this strategy

663
00:24:30,080 --> 00:24:31,600
as the standard deviation goes to

664
00:24:31,600 --> 00:24:33,120
infinity it should

665
00:24:33,120 --> 00:24:35,440
output the discrete gaussian

666
00:24:35,440 --> 00:24:37,520
distribution

667
00:24:37,520 --> 00:24:39,840
um and this is actually what regard used

668
00:24:39,840 --> 00:24:40,640
in this uh

669
00:24:40,640 --> 00:24:44,640
bootstrapping step of the lwe paper

670
00:24:44,640 --> 00:24:48,000
um but uh as we show in the paper the

671
00:24:48,000 --> 00:24:49,840
gaussian distributions are not the best

672
00:24:49,840 --> 00:24:51,840
for this method

673
00:24:51,840 --> 00:24:55,600
um so we defined two notions

674
00:24:55,600 --> 00:24:57,679
which are regularity for the decoding

675
00:24:57,679 --> 00:24:58,799
algorithm and

676
00:24:58,799 --> 00:25:02,320
carbonicity for the distribution um that

677
00:25:02,320 --> 00:25:05,600
make the framework uh correct

678
00:25:05,600 --> 00:25:08,960
so i move on to instantiation so just

679
00:25:08,960 --> 00:25:11,120
a quick summary of what's the main

680
00:25:11,120 --> 00:25:12,720
takeaway for this

681
00:25:12,720 --> 00:25:15,120
uh so with uh this framework we can

682
00:25:15,120 --> 00:25:15,840
sample from

683
00:25:15,840 --> 00:25:17,760
various distributions that are suitable

684
00:25:17,760 --> 00:25:20,000
to various norms and not only

685
00:25:20,000 --> 00:25:23,120
euclidean as for the the gaussian

686
00:25:23,120 --> 00:25:24,640
distributions

687
00:25:24,640 --> 00:25:28,320
uh second the expected l2 norm of

688
00:25:28,320 --> 00:25:32,400
our samplers is usually

689
00:25:32,400 --> 00:25:35,120
n to the 1.5 worse than the gaussian

690
00:25:35,120 --> 00:25:36,799
samplers

691
00:25:36,799 --> 00:25:40,080
so this is the main caveat of the

692
00:25:40,080 --> 00:25:43,039
framework but if you take the relevant

693
00:25:43,039 --> 00:25:45,120
norm to measure the size of the output

694
00:25:45,120 --> 00:25:48,000
then this uh you win a factor root n on

695
00:25:48,000 --> 00:25:48,960
this and it's

696
00:25:48,960 --> 00:25:52,720
only worse by a factor n but still worse

697
00:25:52,720 --> 00:25:55,120
and also we have a runtime to width

698
00:25:55,120 --> 00:25:56,000
tradeoff because

699
00:25:56,000 --> 00:25:58,400
the sampler is always going to be exact

700
00:25:58,400 --> 00:26:00,400
the output distribution is the

701
00:26:00,400 --> 00:26:02,480
ideal distribution you want to sample

702
00:26:02,480 --> 00:26:03,760
and so if you

703
00:26:03,760 --> 00:26:05,520
decrease the standard deviation too much

704
00:26:05,520 --> 00:26:07,919
then the algorithm will struggle

705
00:26:07,919 --> 00:26:11,520
outputting a lattice points

706
00:26:11,520 --> 00:26:15,440
and finally our size of the basis factor

707
00:26:15,440 --> 00:26:18,320
which is on quotes for a reason uh in

708
00:26:18,320 --> 00:26:20,480
the minimum width

709
00:26:20,480 --> 00:26:22,880
has a very different nature than the one

710
00:26:22,880 --> 00:26:25,600
from uh klein and bikeout some players

711
00:26:25,600 --> 00:26:28,720
meaning that for very specific pieces of

712
00:26:28,720 --> 00:26:30,320
very specific lattices

713
00:26:30,320 --> 00:26:33,760
it could even be close to zero um

714
00:26:33,760 --> 00:26:36,559
so yeah this is a kind of a major uh

715
00:26:36,559 --> 00:26:37,520
difference with the

716
00:26:37,520 --> 00:26:40,720
state-of-the-art algorithms

717
00:26:40,720 --> 00:26:43,679
so just some final words uh when can

718
00:26:43,679 --> 00:26:45,120
this framework be useful

719
00:26:45,120 --> 00:26:46,799
so if you need to sample from some

720
00:26:46,799 --> 00:26:48,320
distribution that's suitable to some

721
00:26:48,320 --> 00:26:50,240
other norm then euclidean

722
00:26:50,240 --> 00:26:53,279
this might be useful for you and if you

723
00:26:53,279 --> 00:26:54,159
want to cons

724
00:26:54,159 --> 00:26:56,320
if you are able to construct a basis

725
00:26:56,320 --> 00:26:57,679
that minimizes this

726
00:26:57,679 --> 00:27:01,120
uh new size of the basis factor then uh

727
00:27:01,120 --> 00:27:04,400
this algorithm could be uh

728
00:27:04,400 --> 00:27:05,919
this framework could be could be

729
00:27:05,919 --> 00:27:08,080
something efficiently

730
00:27:08,080 --> 00:27:11,200
uh okay and also just a quick mention

731
00:27:11,200 --> 00:27:11,600
there's

732
00:27:11,600 --> 00:27:14,320
there may be some room for improvement

733
00:27:14,320 --> 00:27:15,120
and there are

734
00:27:15,120 --> 00:27:18,240
interesting uh open questions uh arising

735
00:27:18,240 --> 00:27:19,039
from it

736
00:27:19,039 --> 00:27:22,240
and that's that's about it thank you for

737
00:27:22,240 --> 00:27:24,159
listening

738
00:27:24,159 --> 00:27:26,720
thank you maxim are there any questions

739
00:27:26,720 --> 00:27:30,399
for maxim i see something in the chat

740
00:27:30,480 --> 00:27:34,399
okay so it's a question from iman

741
00:27:34,399 --> 00:27:36,640
so are there any natural examples of

742
00:27:36,640 --> 00:27:38,880
bases that performs well under your new

743
00:27:38,880 --> 00:27:40,480
size of basis

744
00:27:40,480 --> 00:27:44,080
and can you mention briefly what is the

745
00:27:44,080 --> 00:27:44,880
new function

746
00:27:44,880 --> 00:27:48,640
what this new function looks like

747
00:27:48,640 --> 00:27:52,240
uh yeah so for example if you take um

748
00:27:52,240 --> 00:27:55,360
so i'll have to go back a bit um here

749
00:27:55,360 --> 00:27:55,679
the

750
00:27:55,679 --> 00:27:58,559
there's harmonic distribution that we

751
00:27:58,559 --> 00:27:59,520
introduce

752
00:27:59,520 --> 00:28:01,279
for example constant functions are

753
00:28:01,279 --> 00:28:02,960
uniform and they yield

754
00:28:02,960 --> 00:28:05,840
a uniform distribution and for example

755
00:28:05,840 --> 00:28:07,039
if you sample from a uniform

756
00:28:07,039 --> 00:28:08,880
distribution and a hypercube

757
00:28:08,880 --> 00:28:11,600
then for example the lattice zn is going

758
00:28:11,600 --> 00:28:12,320
to be

759
00:28:12,320 --> 00:28:15,360
uh with the basis identity is going to

760
00:28:15,360 --> 00:28:17,039
give you a

761
00:28:17,039 --> 00:28:20,480
zero like a perfect sampling regardless

762
00:28:20,480 --> 00:28:22,240
of the standard deviation

763
00:28:22,240 --> 00:28:25,120
and so if you slightly modify this

764
00:28:25,120 --> 00:28:26,480
identity

765
00:28:26,480 --> 00:28:28,559
if your basis is close to identity then

766
00:28:28,559 --> 00:28:30,159
this factor is going to be

767
00:28:30,159 --> 00:28:33,279
close to but like anyway

768
00:28:33,279 --> 00:28:35,279
it does depend a lot on the distribution

769
00:28:35,279 --> 00:28:36,880
you use but for example

770
00:28:36,880 --> 00:28:40,000
uh uniform and zn is

771
00:28:40,000 --> 00:28:42,480
a good example uh here if that answers

772
00:28:42,480 --> 00:28:43,679
your question

773
00:28:43,679 --> 00:28:46,880
okay thanks i think that answers it

774
00:28:46,880 --> 00:28:49,279
is there another question i think we

775
00:28:49,279 --> 00:28:50,320
still have

776
00:28:50,320 --> 00:28:54,000
maybe time for one question

777
00:28:56,799 --> 00:28:59,600
so i kind of a very short one maybe

778
00:28:59,600 --> 00:29:00,960
about runtime

779
00:29:00,960 --> 00:29:03,039
do you like if you don't care about

780
00:29:03,039 --> 00:29:04,399
having

781
00:29:04,399 --> 00:29:06,320
elements that are n or n square or ten

782
00:29:06,320 --> 00:29:08,799
times larger than gaussian samplers

783
00:29:08,799 --> 00:29:11,840
uh can you have them faster than

784
00:29:11,840 --> 00:29:13,760
gaussian samplers

785
00:29:13,760 --> 00:29:17,919
um yeah i mean you can

786
00:29:17,919 --> 00:29:19,600
it's not it's not really fast it's

787
00:29:19,600 --> 00:29:21,039
probably not faster

788
00:29:21,039 --> 00:29:24,000
uh but uh yeah if you increase the

789
00:29:24,000 --> 00:29:25,279
standard division a lot

790
00:29:25,279 --> 00:29:28,640
then uh you will have uh

791
00:29:28,640 --> 00:29:31,440
you you you will have a fast run time

792
00:29:31,440 --> 00:29:32,799
the runtime is more like the number of

793
00:29:32,799 --> 00:29:34,240
repetiti because there is a rejection

794
00:29:34,240 --> 00:29:35,679
sampling step which i know it's in the

795
00:29:35,679 --> 00:29:37,120
presentation

796
00:29:37,120 --> 00:29:39,039
uh and as you increase the standard

797
00:29:39,039 --> 00:29:40,480
deviation then

798
00:29:40,480 --> 00:29:45,039
you reduce the the rejection rates so

799
00:29:45,039 --> 00:29:48,640
yeah spencer's uh question okay

800
00:29:48,640 --> 00:29:53,520
thank you so we move on to the next arc

801
00:29:53,520 --> 00:29:56,159
okay so the next talk is on the success

802
00:29:56,159 --> 00:29:58,320
probability of solving unique svp via

803
00:29:58,320 --> 00:29:59,600
bkz

804
00:29:59,600 --> 00:30:03,760
uh it's uh from iman w post less weight

805
00:30:03,760 --> 00:30:06,240
and fernando verdia i hope i pronounced

806
00:30:06,240 --> 00:30:06,880
correctly

807
00:30:06,880 --> 00:30:09,919
and fernando will give the talk

808
00:30:09,919 --> 00:30:13,440
hi can you hear me um

809
00:30:13,440 --> 00:30:15,279
awesome thank you for the introduction

810
00:30:15,279 --> 00:30:17,039
um yeah i'll be talking about the joint

811
00:30:17,039 --> 00:30:18,480
work with aim and possible wave

812
00:30:18,480 --> 00:30:21,760
and essentially what we're looking at in

813
00:30:21,760 --> 00:30:23,520
this paper is we're looking at the

814
00:30:23,520 --> 00:30:25,200
complexity of solving the learning with

815
00:30:25,200 --> 00:30:26,559
errors problems

816
00:30:26,559 --> 00:30:29,120
um using the primal attack strategy that

817
00:30:29,120 --> 00:30:31,200
essentially reduces it to a unique

818
00:30:31,200 --> 00:30:33,679
shortest vector problem instance by

819
00:30:33,679 --> 00:30:35,600
constructing a lattice that contains

820
00:30:35,600 --> 00:30:37,760
as its unique shortest vector what is

821
00:30:37,760 --> 00:30:39,200
essentially a concatenation of the

822
00:30:39,200 --> 00:30:39,840
secret

823
00:30:39,840 --> 00:30:41,840
and the error vectors from the lwe

824
00:30:41,840 --> 00:30:44,080
instance

825
00:30:44,080 --> 00:30:46,000
so of course what we're interested in is

826
00:30:46,000 --> 00:30:47,440
the cause of this attack

827
00:30:47,440 --> 00:30:49,520
and the key observation is that in

828
00:30:49,520 --> 00:30:51,200
practice uh recovery

829
00:30:51,200 --> 00:30:52,799
and that was known already in previous

830
00:30:52,799 --> 00:30:54,320
literature is that recovery of the

831
00:30:54,320 --> 00:30:55,919
target vector follows from

832
00:30:55,919 --> 00:30:58,399
recovery of an orthogonal projection of

833
00:30:58,399 --> 00:30:59,279
um

834
00:30:59,279 --> 00:31:02,000
of this target vector and uh currently

835
00:31:02,000 --> 00:31:03,440
the analysis

836
00:31:03,440 --> 00:31:06,000
usually used for estimating this cost is

837
00:31:06,000 --> 00:31:07,279
by alki metal

838
00:31:07,279 --> 00:31:09,440
and says that if one were to pick bkz

839
00:31:09,440 --> 00:31:10,399
for a

840
00:31:10,399 --> 00:31:11,840
lattice for a lattice reduction

841
00:31:11,840 --> 00:31:13,360
algorithm to to try to find this

842
00:31:13,360 --> 00:31:15,039
target's vector

843
00:31:15,039 --> 00:31:17,279
they should aim to choose the smallest

844
00:31:17,279 --> 00:31:19,039
block size beta

845
00:31:19,039 --> 00:31:21,840
such that the the condition on screen um

846
00:31:21,840 --> 00:31:23,120
holds and then

847
00:31:23,120 --> 00:31:24,720
essentially it says at the end of

848
00:31:24,720 --> 00:31:27,120
lattice reduction

849
00:31:27,120 --> 00:31:28,640
we expect to find this projection and

850
00:31:28,640 --> 00:31:31,519
then recover the full vector

851
00:31:31,519 --> 00:31:34,640
alchemy heuristic was verifiably

852
00:31:34,640 --> 00:31:37,360
verified experimentally in 2017 by

853
00:31:37,360 --> 00:31:38,480
albert de doll

854
00:31:38,480 --> 00:31:41,200
and in their paper they run multiple

855
00:31:41,200 --> 00:31:42,559
experiments and they observed that

856
00:31:42,559 --> 00:31:43,919
indeed if one chooses

857
00:31:43,919 --> 00:31:47,039
the block size following the metal

858
00:31:47,039 --> 00:31:49,120
heuristic one can see that the success

859
00:31:49,120 --> 00:31:51,200
probability for solving ldap is very

860
00:31:51,200 --> 00:31:52,159
high

861
00:31:52,159 --> 00:31:54,320
however they also observe that if one

862
00:31:54,320 --> 00:31:56,080
were to choose slightly smaller

863
00:31:56,080 --> 00:31:58,080
block sizes hence resulting in a cheaper

864
00:31:58,080 --> 00:31:59,120
attack

865
00:31:59,120 --> 00:32:01,200
still to some extent this is possible to

866
00:32:01,200 --> 00:32:02,799
get relatively high success

867
00:32:02,799 --> 00:32:03,840
probabilities

868
00:32:03,840 --> 00:32:07,200
um for solving lwe

869
00:32:07,200 --> 00:32:09,519
so the main contribution in in our paper

870
00:32:09,519 --> 00:32:11,519
is that we extend the alkynal model

871
00:32:11,519 --> 00:32:13,679
and also related work by dark man

872
00:32:13,679 --> 00:32:14,799
soledad

873
00:32:14,799 --> 00:32:17,679
and to approach to predict the success

874
00:32:17,679 --> 00:32:18,960
probability of

875
00:32:18,960 --> 00:32:21,279
any given block size and in particularly

876
00:32:21,279 --> 00:32:22,960
particularly of these smaller slightly

877
00:32:22,960 --> 00:32:25,440
smaller block sizes

878
00:32:25,440 --> 00:32:28,640
for those in the know the way this work

879
00:32:28,640 --> 00:32:31,919
is that we try to simulate the state of

880
00:32:31,919 --> 00:32:32,960
the

881
00:32:32,960 --> 00:32:35,200
basis of the lattice being reduced as it

882
00:32:35,200 --> 00:32:36,480
is being reduced

883
00:32:36,480 --> 00:32:38,159
um and we try to compute what is the

884
00:32:38,159 --> 00:32:40,000
probability at the end of every

885
00:32:40,000 --> 00:32:43,120
tour of bkz or of progressive bkz what

886
00:32:43,120 --> 00:32:44,559
is the probability of recovering this

887
00:32:44,559 --> 00:32:46,399
orthogonal projection

888
00:32:46,399 --> 00:32:48,559
so we start and what we do is we model

889
00:32:48,559 --> 00:32:50,320
the norm of the orthogonal projection as

890
00:32:50,320 --> 00:32:51,600
a random variable

891
00:32:51,600 --> 00:32:53,679
and then we use bkz simulators to tell

892
00:32:53,679 --> 00:32:55,519
us what is the norm

893
00:32:55,519 --> 00:32:57,679
uh for the uh grunge meat vectors of the

894
00:32:57,679 --> 00:32:59,679
bases that are those that are uh

895
00:32:59,679 --> 00:33:01,120
involved directly in the recovery of

896
00:33:01,120 --> 00:33:03,200
this orthogonal projection so we start

897
00:33:03,200 --> 00:33:03,519
from

898
00:33:03,519 --> 00:33:05,360
the profile that we expect for an input

899
00:33:05,360 --> 00:33:07,919
basis and we simulate a tour of bkz and

900
00:33:07,919 --> 00:33:09,600
then we ask okay what is the probability

901
00:33:09,600 --> 00:33:10,480
that the

902
00:33:10,480 --> 00:33:12,799
uh the inequality holds and lead us to

903
00:33:12,799 --> 00:33:13,679
recovery of this

904
00:33:13,679 --> 00:33:15,760
of the projection and then we accumulate

905
00:33:15,760 --> 00:33:17,440
this probability and we simulate another

906
00:33:17,440 --> 00:33:18,960
tour of vkg and then we compute the

907
00:33:18,960 --> 00:33:20,080
probability again

908
00:33:20,080 --> 00:33:22,640
and so on for as many tours as requested

909
00:33:22,640 --> 00:33:24,720
for bkc and at the end this will tell us

910
00:33:24,720 --> 00:33:27,360
what is overall the expected probability

911
00:33:27,360 --> 00:33:28,320
of uh

912
00:33:28,320 --> 00:33:29,600
finding the projection using that

913
00:33:29,600 --> 00:33:31,760
particular block size

914
00:33:31,760 --> 00:33:34,880
we run many experiments and we run them

915
00:33:34,880 --> 00:33:36,320
over different

916
00:33:36,320 --> 00:33:38,240
distributions for the secret and the

917
00:33:38,240 --> 00:33:39,519
other vector

918
00:33:39,519 --> 00:33:41,760
um and so here are for example two two

919
00:33:41,760 --> 00:33:42,880
characteristic

920
00:33:42,880 --> 00:33:45,039
plots that come out of these experiments

921
00:33:45,039 --> 00:33:47,200
many more are present in the paper and

922
00:33:47,200 --> 00:33:49,600
we go in in a lot more detail of course

923
00:33:49,600 --> 00:33:51,440
about various phenomenons that we

924
00:33:51,440 --> 00:33:52,720
observe happening

925
00:33:52,720 --> 00:33:54,559
but overall what we're looking at is

926
00:33:54,559 --> 00:33:56,080
we're looking at the dashed lines that

927
00:33:56,080 --> 00:33:58,480
tell us the predicted probability

928
00:33:58,480 --> 00:34:00,640
for a given block size of solving lw and

929
00:34:00,640 --> 00:34:02,080
then a crosses that say what is the

930
00:34:02,080 --> 00:34:03,360
major probability

931
00:34:03,360 --> 00:34:05,519
for that algorithm or for that secret or

932
00:34:05,519 --> 00:34:07,440
error distribution

933
00:34:07,440 --> 00:34:09,440
we chose instances that we expected to

934
00:34:09,440 --> 00:34:10,960
be able to solve with a block size of

935
00:34:10,960 --> 00:34:13,119
around 60 and then we investigated

936
00:34:13,119 --> 00:34:14,719
running the algorithms with slightly

937
00:34:14,719 --> 00:34:17,119
smaller or larger block sizes

938
00:34:17,119 --> 00:34:19,040
and overall it seems that the simulators

939
00:34:19,040 --> 00:34:20,960
are indeed able to tell us

940
00:34:20,960 --> 00:34:22,639
what uh what the probability of solving

941
00:34:22,639 --> 00:34:24,560
lw should be

942
00:34:24,560 --> 00:34:26,159
for the algorithms even if the block

943
00:34:26,159 --> 00:34:28,320
size is not optimal

944
00:34:28,320 --> 00:34:30,879
of course the natural question is um

945
00:34:30,879 --> 00:34:32,480
whether this has an impact on

946
00:34:32,480 --> 00:34:35,359
current cryptographic parameters and to

947
00:34:35,359 --> 00:34:37,359
see this we chose um parameters that

948
00:34:37,359 --> 00:34:38,960
were available at the time of writing

949
00:34:38,960 --> 00:34:42,239
for the um three chem finalists for the

950
00:34:42,239 --> 00:34:44,000
niche pqc process

951
00:34:44,000 --> 00:34:46,960
and we chose first the expected block

952
00:34:46,960 --> 00:34:48,000
size from the

953
00:34:48,000 --> 00:34:51,040
given by the previous methodology um

954
00:34:51,040 --> 00:34:52,639
and then we use our simulator to

955
00:34:52,639 --> 00:34:54,239
simulate what would be uh the

956
00:34:54,239 --> 00:34:55,760
probability distribution

957
00:34:55,760 --> 00:34:58,640
of a successful block size uh on these

958
00:34:58,640 --> 00:35:00,320
parameters and what we can see is that

959
00:35:00,320 --> 00:35:00,640
the

960
00:35:00,640 --> 00:35:03,040
expected successful block size that we

961
00:35:03,040 --> 00:35:04,240
see in the middle column

962
00:35:04,240 --> 00:35:05,920
is slightly larger than what the

963
00:35:05,920 --> 00:35:07,760
previous theory suggested

964
00:35:07,760 --> 00:35:09,359
we explain why this happens it's a bit

965
00:35:09,359 --> 00:35:10,800
counter-intuitively but

966
00:35:10,800 --> 00:35:12,480
can't control intuitive but we explain

967
00:35:12,480 --> 00:35:14,560
why it happens in the paper

968
00:35:14,560 --> 00:35:17,119
and we also can measure uh the standard

969
00:35:17,119 --> 00:35:18,079
deviation

970
00:35:18,079 --> 00:35:20,160
of the successful block size and this

971
00:35:20,160 --> 00:35:21,280
somehow tells us

972
00:35:21,280 --> 00:35:23,920
how much smaller we can pick a block

973
00:35:23,920 --> 00:35:26,079
size while still expecting to have a

974
00:35:26,079 --> 00:35:29,040
successful attack on lw and the

975
00:35:29,040 --> 00:35:30,880
observations here are good news

976
00:35:30,880 --> 00:35:32,480
because the standard deviation still

977
00:35:32,480 --> 00:35:34,320
stays small saying that

978
00:35:34,320 --> 00:35:37,200
uh low probability attacks by just

979
00:35:37,200 --> 00:35:38,400
running the primary attack with a

980
00:35:38,400 --> 00:35:40,960
smaller block size should not be

981
00:35:40,960 --> 00:35:42,800
particularly cheaper because it should

982
00:35:42,800 --> 00:35:44,640
not be possible to pick a significantly

983
00:35:44,640 --> 00:35:46,800
smaller block size to run the attack

984
00:35:46,800 --> 00:35:48,240
and also the expected block size is

985
00:35:48,240 --> 00:35:49,920
higher than before so really it looks

986
00:35:49,920 --> 00:35:52,160
like uh the alchemical methodology

987
00:35:52,160 --> 00:35:55,200
um using at the time some in the way was

988
00:35:55,200 --> 00:35:55,680
used

989
00:35:55,680 --> 00:35:58,560
when when first when first detailed was

990
00:35:58,560 --> 00:35:59,520
underestimating

991
00:35:59,520 --> 00:36:02,880
the hardness of lwe so in conclusion

992
00:36:02,880 --> 00:36:04,400
we believe that our simulators are able

993
00:36:04,400 --> 00:36:06,000
to capture the success probability of

994
00:36:06,000 --> 00:36:08,720
smaller than expected block sizes

995
00:36:08,720 --> 00:36:10,560
the effect seems to be consistent across

996
00:36:10,560 --> 00:36:12,880
secret and narrow distributions for lwe

997
00:36:12,880 --> 00:36:15,119
and the harness of cryptographically

998
00:36:15,119 --> 00:36:16,960
specified parameters so far does not

999
00:36:16,960 --> 00:36:17,920
seem to be

1000
00:36:17,920 --> 00:36:22,240
significantly impacted thank you

1001
00:36:24,320 --> 00:36:26,480
station sorry thank you fernando for

1002
00:36:26,480 --> 00:36:27,760
this presentation and the

1003
00:36:27,760 --> 00:36:31,040
the video online uh

1004
00:36:31,040 --> 00:36:33,280
don't hesitate to ask questions so i'm

1005
00:36:33,280 --> 00:36:34,880
monitoring the chat and

1006
00:36:34,880 --> 00:36:38,160
the zulip uh if not i can start to

1007
00:36:38,160 --> 00:36:41,280
start with one um so in the experiment

1008
00:36:41,280 --> 00:36:43,520
uh that you showed in the first table uh

1009
00:36:43,520 --> 00:36:44,720
it seems

1010
00:36:44,720 --> 00:36:47,040
uh it seems that the success probability

1011
00:36:47,040 --> 00:36:49,040
decrease decreases when the dimension

1012
00:36:49,040 --> 00:36:52,079
increases like it goes from 83 to 8 to

1013
00:36:52,079 --> 00:36:54,160
80. sorry

1014
00:36:54,160 --> 00:36:56,640
do you mean yes here it seems to

1015
00:36:56,640 --> 00:36:57,440
decrease when

1016
00:36:57,440 --> 00:36:59,920
n increases is there is it like a

1017
00:36:59,920 --> 00:37:00,480
general

1018
00:37:00,480 --> 00:37:02,400
uh thing that you notices or is

1019
00:37:02,400 --> 00:37:04,079
artifacts from the

1020
00:37:04,079 --> 00:37:07,119
from uh from the experiments yeah we

1021
00:37:07,119 --> 00:37:09,280
so we it might be artifacts we didn't

1022
00:37:09,280 --> 00:37:11,119
see specifically something like this uh

1023
00:37:11,119 --> 00:37:12,960
what worried us the most of course was

1024
00:37:12,960 --> 00:37:13,599
that

1025
00:37:13,599 --> 00:37:16,240
um there seems always that the gap of 10

1026
00:37:16,240 --> 00:37:17,920
would still result in a high probability

1027
00:37:17,920 --> 00:37:19,200
attack and we were worried that maybe

1028
00:37:19,200 --> 00:37:20,400
this would depend on the secret

1029
00:37:20,400 --> 00:37:22,079
dimension

1030
00:37:22,079 --> 00:37:23,520
but from running the simulator on the

1031
00:37:23,520 --> 00:37:25,359
cryptographically sized parameters

1032
00:37:25,359 --> 00:37:27,040
it doesn't look like that's the case the

1033
00:37:27,040 --> 00:37:28,880
the standard deviation stays

1034
00:37:28,880 --> 00:37:31,920
relatively tight um so yeah i think it

1035
00:37:31,920 --> 00:37:33,359
might just be an artifact of the

1036
00:37:33,359 --> 00:37:36,320
particular instances that were chosen

1037
00:37:36,320 --> 00:37:39,200
okay okay because the simulator uh

1038
00:37:39,200 --> 00:37:40,480
doesn't use uh

1039
00:37:40,480 --> 00:37:44,079
here you you run uh specific instances

1040
00:37:44,079 --> 00:37:46,720
uh without simulation these were yeah

1041
00:37:46,720 --> 00:37:48,720
these are the numbers from the 2017

1042
00:37:48,720 --> 00:37:49,280
paper

1043
00:37:49,280 --> 00:37:52,320
and at the time these were just

1044
00:37:52,320 --> 00:37:54,640
by choosing fixed block sizes and and

1045
00:37:54,640 --> 00:37:55,680
seeing what happened

1046
00:37:55,680 --> 00:37:58,000
there was no simulation before it behind

1047
00:37:58,000 --> 00:37:58,960
it

1048
00:37:58,960 --> 00:38:02,160
okay um but yeah with the now within

1049
00:38:02,160 --> 00:38:05,200
newer numbers um it does seem that

1050
00:38:05,200 --> 00:38:06,000
indeed one when

1051
00:38:06,000 --> 00:38:07,920
one can stay close to it and and the

1052
00:38:07,920 --> 00:38:09,359
slope of the curve doesn't seem to

1053
00:38:09,359 --> 00:38:10,400
change even if one

1054
00:38:10,400 --> 00:38:12,800
increases significantly the dimension at

1055
00:38:12,800 --> 00:38:14,320
least as far as the output of the

1056
00:38:14,320 --> 00:38:16,400
simulator is concerned

1057
00:38:16,400 --> 00:38:21,839
okay i see are there other questions

1058
00:38:21,839 --> 00:38:24,960
no and on this slide it seems that

1059
00:38:24,960 --> 00:38:27,599
uh the like there is some noise around

1060
00:38:27,599 --> 00:38:28,240
the

1061
00:38:28,240 --> 00:38:33,440
the expected uh simulation

1062
00:38:33,440 --> 00:38:36,400
can you explain that uh other than above

1063
00:38:36,400 --> 00:38:38,079
when we see that there is a

1064
00:38:38,079 --> 00:38:40,000
like a phenomenon that you explain in

1065
00:38:40,000 --> 00:38:42,000
the paper but below

1066
00:38:42,000 --> 00:38:43,599
for example on the right side it seems

1067
00:38:43,599 --> 00:38:45,680
that it's always below

1068
00:38:45,680 --> 00:38:49,760
is there yes yes mostly has to do with

1069
00:38:49,760 --> 00:38:52,400
how we define the probability i think in

1070
00:38:52,400 --> 00:38:54,160
the sense that in progressive bkz one is

1071
00:38:54,160 --> 00:38:56,079
trying every block size and increasing

1072
00:38:56,079 --> 00:38:58,720
and so the one can really get a strictly

1073
00:38:58,720 --> 00:39:00,000
increasing function for

1074
00:39:00,000 --> 00:39:03,280
the cumulative humidity mass function

1075
00:39:03,280 --> 00:39:04,960
for the probability distribution

1076
00:39:04,960 --> 00:39:08,400
while on the left with bkz it is not

1077
00:39:08,400 --> 00:39:10,720
it is not necessarily always the case

1078
00:39:10,720 --> 00:39:11,520
that

1079
00:39:11,520 --> 00:39:12,800
since there is some randomness in the

1080
00:39:12,800 --> 00:39:14,400
algorithm itself it is possible to

1081
00:39:14,400 --> 00:39:16,000
observe an instance that can

1082
00:39:16,000 --> 00:39:18,240
that happens to be sold by running bkz

1083
00:39:18,240 --> 00:39:20,160
60 let's say

1084
00:39:20,160 --> 00:39:23,280
but it's not sold by running 61 and this

1085
00:39:23,280 --> 00:39:24,480
could have to do with the

1086
00:39:24,480 --> 00:39:25,920
pre-processing strategies we

1087
00:39:25,920 --> 00:39:28,160
investigated a little bit about that but

1088
00:39:28,160 --> 00:39:31,200
um but yes formally

1089
00:39:31,200 --> 00:39:33,920
it seems to just be the case and um yeah

1090
00:39:33,920 --> 00:39:35,280
so there is a little bit of noise it

1091
00:39:35,280 --> 00:39:36,480
might be possible to

1092
00:39:36,480 --> 00:39:39,599
maybe defend a variant of bkz that

1093
00:39:39,599 --> 00:39:41,920
gives some guarantee in that sense but

1094
00:39:41,920 --> 00:39:43,200
but yeah that's for example where we see

1095
00:39:43,200 --> 00:39:44,800
that the line goes up and down the major

1096
00:39:44,800 --> 00:39:45,680
probability

1097
00:39:45,680 --> 00:39:48,240
so there is a bit of a technicality

1098
00:39:48,240 --> 00:39:49,359
there

1099
00:39:49,359 --> 00:39:52,400
okay and on the right uh oh sorry uh on

1100
00:39:52,400 --> 00:39:53,280
the left

1101
00:39:53,280 --> 00:39:56,480
the the big progressive bkz is in black

1102
00:39:56,480 --> 00:39:59,200
so we still equal to one and did you try

1103
00:39:59,200 --> 00:39:59,839
we stole

1104
00:39:59,839 --> 00:40:02,320
higher in this uh how does it compare

1105
00:40:02,320 --> 00:40:05,280
with the bkz

1106
00:40:06,480 --> 00:40:09,359
yes superimposition yes i think we have

1107
00:40:09,359 --> 00:40:10,720
a table on the paper

1108
00:40:10,720 --> 00:40:14,400
um okay it does in um it does increase a

1109
00:40:14,400 --> 00:40:15,040
little bit

1110
00:40:15,040 --> 00:40:18,640
uh but uh so as in uh the curve moves a

1111
00:40:18,640 --> 00:40:20,079
little bit to the left

1112
00:40:20,079 --> 00:40:22,800
but not as much because we notice that

1113
00:40:22,800 --> 00:40:24,720
if one increase is tall too much

1114
00:40:24,720 --> 00:40:26,800
um it happens a lot of the time that

1115
00:40:26,800 --> 00:40:28,160
progressive be that

1116
00:40:28,160 --> 00:40:29,760
the big easy step inside progressive

1117
00:40:29,760 --> 00:40:31,200
because they will just auto board

1118
00:40:31,200 --> 00:40:32,160
because they cannot

1119
00:40:32,160 --> 00:40:33,839
make any significant progress on the

1120
00:40:33,839 --> 00:40:35,200
state of the bases

1121
00:40:35,200 --> 00:40:36,319
because in some sense progressive

1122
00:40:36,319 --> 00:40:37,680
because it does so much lattice

1123
00:40:37,680 --> 00:40:39,680
reduction and it increases so slowly the

1124
00:40:39,680 --> 00:40:40,720
block size

1125
00:40:40,720 --> 00:40:42,160
but very often because it just has

1126
00:40:42,160 --> 00:40:43,839
nothing that it can do and one

1127
00:40:43,839 --> 00:40:46,160
ends up not doing as much as what the

1128
00:40:46,160 --> 00:40:48,319
simulator would assume by just saying oh

1129
00:40:48,319 --> 00:40:49,119
every third

1130
00:40:49,119 --> 00:40:52,000
gives you some progress so in that sense

1131
00:40:52,000 --> 00:40:52,880
one would need us

1132
00:40:52,880 --> 00:40:54,800
as some sort maybe of stricter modeling

1133
00:40:54,800 --> 00:40:56,240
to be able to predict

1134
00:40:56,240 --> 00:40:58,800
when progressive bkc will uh will run a

1135
00:40:58,800 --> 00:41:00,400
tour but get no progress

1136
00:41:00,400 --> 00:41:02,480
and and in that case one might be able

1137
00:41:02,480 --> 00:41:03,760
to tell but yes

1138
00:41:03,760 --> 00:41:05,920
um it improves but not significantly

1139
00:41:05,920 --> 00:41:07,440
because of this phenomenon

1140
00:41:07,440 --> 00:41:09,440
maybe some basis randomization inside of

1141
00:41:09,440 --> 00:41:12,319
progressive big case it could help there

1142
00:41:12,319 --> 00:41:15,200
okay okay thanks are there other

1143
00:41:15,200 --> 00:41:17,760
questions

1144
00:41:17,760 --> 00:41:20,880
okay do you plan on publishing the code

1145
00:41:20,880 --> 00:41:24,079
for the estimation somewhere uh yes so

1146
00:41:24,079 --> 00:41:26,880
we the code for both the experiments and

1147
00:41:26,880 --> 00:41:27,520
for the

1148
00:41:27,520 --> 00:41:30,079
simulator is there we have not planned

1149
00:41:30,079 --> 00:41:32,640
of uh i have not

1150
00:41:32,640 --> 00:41:34,800
looked into we tried looking into

1151
00:41:34,800 --> 00:41:36,560
attaching it to the estimator a little

1152
00:41:36,560 --> 00:41:39,520
the lw estimator uh but it's a little

1153
00:41:39,520 --> 00:41:40,240
bit tricky

1154
00:41:40,240 --> 00:41:43,440
um so at the moment not really

1155
00:41:43,440 --> 00:41:46,880
okay um yeah thanks

1156
00:41:46,880 --> 00:41:51,119
so i guess we can move to the next paper

1157
00:41:51,119 --> 00:41:54,319
okay so let's go for the next

1158
00:41:54,319 --> 00:41:57,040
last talk of this session about slight

1159
00:41:57,040 --> 00:41:57,520
tap

1160
00:41:57,520 --> 00:42:00,640
slide type reduction sorry and how fast

1161
00:42:00,640 --> 00:42:02,960
it converges and so this is

1162
00:42:02,960 --> 00:42:06,079
a work by michael walter and

1163
00:42:06,079 --> 00:42:07,760
michael i guess is going to give the

1164
00:42:07,760 --> 00:42:10,079
talk

1165
00:42:11,359 --> 00:42:14,839
we cannot hear you michael at least i

1166
00:42:14,839 --> 00:42:17,280
cannot

1167
00:42:17,280 --> 00:42:21,200
uh i yeah are you talking

1168
00:42:21,200 --> 00:42:25,599
yeah now i think i hear you yeah

1169
00:42:25,599 --> 00:42:28,720
okay yeah it's a bit slow can you try

1170
00:42:28,720 --> 00:42:30,480
i can try to increase her okay so it's

1171
00:42:30,480 --> 00:42:31,920
not that good

1172
00:42:31,920 --> 00:42:34,000
it's good okay cool yeah sorry about

1173
00:42:34,000 --> 00:42:36,000
that okay yeah thanks alice

1174
00:42:36,000 --> 00:42:38,880
so uh black fernando i also want to talk

1175
00:42:38,880 --> 00:42:40,560
about lettuce reduction

1176
00:42:40,560 --> 00:42:42,079
and if you're not familiar with the

1177
00:42:42,079 --> 00:42:43,760
literature

1178
00:42:43,760 --> 00:42:45,520
this might surprise you but there are

1179
00:42:45,520 --> 00:42:47,200
actually other latest reduction

1180
00:42:47,200 --> 00:42:49,920
algorithms out there except for bkz but

1181
00:42:49,920 --> 00:42:53,040
bkd tends to grab all the headlines

1182
00:42:53,040 --> 00:42:54,480
because it seems to perform best in

1183
00:42:54,480 --> 00:42:57,119
practice but in this talk i want to

1184
00:42:57,119 --> 00:42:59,520
focus on a class of algorithms called

1185
00:42:59,520 --> 00:43:01,760
well which i call slide type reductions

1186
00:43:01,760 --> 00:43:03,839
and so far these type of algorithms have

1187
00:43:03,839 --> 00:43:05,040
been considered more of

1188
00:43:05,040 --> 00:43:07,119
theoretical interest because we can

1189
00:43:07,119 --> 00:43:08,640
actually prove better bounds

1190
00:43:08,640 --> 00:43:11,119
for them on the trade-off between

1191
00:43:11,119 --> 00:43:12,000
running time and output

1192
00:43:12,000 --> 00:43:14,400
quality but in practice it seems somehow

1193
00:43:14,400 --> 00:43:16,720
inferior to bkz

1194
00:43:16,720 --> 00:43:19,040
so what we what i do with this work is i

1195
00:43:19,040 --> 00:43:19,920
apply a more

1196
00:43:19,920 --> 00:43:22,560
um fine grade analysis to this class of

1197
00:43:22,560 --> 00:43:24,000
algorithms

1198
00:43:24,000 --> 00:43:26,240
and this actually reveals a new

1199
00:43:26,240 --> 00:43:27,040
parameter

1200
00:43:27,040 --> 00:43:28,319
to control this trade-off between

1201
00:43:28,319 --> 00:43:30,960
running time and uh quality

1202
00:43:30,960 --> 00:43:34,480
and this um and then we show that uh

1203
00:43:34,480 --> 00:43:36,160
you know you can tweak this parameter to

1204
00:43:36,160 --> 00:43:37,599
improve slight reduction in practice

1205
00:43:37,599 --> 00:43:38,160
actually

1206
00:43:38,160 --> 00:43:40,240
actually significantly up to the point

1207
00:43:40,240 --> 00:43:41,359
where it's actually competitive and

1208
00:43:41,359 --> 00:43:42,400
practical with the stadium

1209
00:43:42,400 --> 00:43:45,920
yeah aka bkz and

1210
00:43:45,920 --> 00:43:48,079
this is interesting because this type of

1211
00:43:48,079 --> 00:43:49,200
algorithm is actually

1212
00:43:49,200 --> 00:43:51,280
very easily paralyzable which is in

1213
00:43:51,280 --> 00:43:52,720
contrast to bkz

1214
00:43:52,720 --> 00:43:56,079
which is inherently sequential

1215
00:43:56,079 --> 00:43:58,960
so also our analysis gives us a couple

1216
00:43:58,960 --> 00:43:59,520
of

1217
00:43:59,520 --> 00:44:02,800
side results for

1218
00:44:02,800 --> 00:44:04,640
running times on a algorithm called

1219
00:44:04,640 --> 00:44:06,000
block ranking reduction

1220
00:44:06,000 --> 00:44:08,000
but i'm going to focus on the other part

1221
00:44:08,000 --> 00:44:10,240
in uh for this

1222
00:44:10,240 --> 00:44:13,599
so um so you know

1223
00:44:13,599 --> 00:44:15,040
fernando hindered that in the previous

1224
00:44:15,040 --> 00:44:17,119
talk but the bases can be represented

1225
00:44:17,119 --> 00:44:19,440
effectively by by its shape

1226
00:44:19,440 --> 00:44:22,560
or gram-schmidt profile same thing

1227
00:44:22,560 --> 00:44:24,240
and the goal of lettuce reduction is

1228
00:44:24,240 --> 00:44:26,079
effectively at least in my view

1229
00:44:26,079 --> 00:44:27,920
or you can define it this way to

1230
00:44:27,920 --> 00:44:29,680
minimize the first entry

1231
00:44:29,680 --> 00:44:34,000
and what fernando also hinted at is that

1232
00:44:34,240 --> 00:44:36,079
the shapes of bases can often be just

1233
00:44:36,079 --> 00:44:37,680
you know approximated by a line

1234
00:44:37,680 --> 00:44:39,520
so for this talk i'm just going to use

1235
00:44:39,520 --> 00:44:41,359
these idealized versions of the laser

1236
00:44:41,359 --> 00:44:42,240
shape

1237
00:44:42,240 --> 00:44:44,000
and the way that latex reduction works

1238
00:44:44,000 --> 00:44:45,680
is by

1239
00:44:45,680 --> 00:44:47,680
picking out projected sub-blocks of the

1240
00:44:47,680 --> 00:44:48,880
bases and

1241
00:44:48,880 --> 00:44:51,760
applying an svp or go to it and then the

1242
00:44:51,760 --> 00:44:52,800
shape of the beta that might look

1243
00:44:52,800 --> 00:44:54,400
something like this

1244
00:44:54,400 --> 00:44:56,240
and this this operation is actually

1245
00:44:56,240 --> 00:44:57,760
fairly expensive but it can help to

1246
00:44:57,760 --> 00:44:59,280
improve the basis globally

1247
00:44:59,280 --> 00:45:02,640
if you do it in a smart way um if you

1248
00:45:02,640 --> 00:45:04,400
apply it in a smart strategy over and

1249
00:45:04,400 --> 00:45:06,480
over again and the trade-off of latest

1250
00:45:06,480 --> 00:45:08,240
reduction is usually controlled by the

1251
00:45:08,240 --> 00:45:09,200
size of the block

1252
00:45:09,200 --> 00:45:10,640
that you're considering because the

1253
00:45:10,640 --> 00:45:12,560
larger the block size and

1254
00:45:12,560 --> 00:45:15,040
the more expensive the sap oracle but

1255
00:45:15,040 --> 00:45:16,880
the output quality actually

1256
00:45:16,880 --> 00:45:18,480
of the entire basis will be better in

1257
00:45:18,480 --> 00:45:20,400
the end and there's another

1258
00:45:20,400 --> 00:45:21,760
operation that you can do which is

1259
00:45:21,760 --> 00:45:24,800
called dual sap reduction

1260
00:45:24,800 --> 00:45:26,400
which effectively instead of minimizing

1261
00:45:26,400 --> 00:45:29,200
the first entry in a project sub-block

1262
00:45:29,200 --> 00:45:31,760
actually maximizes last entry and

1263
00:45:31,760 --> 00:45:33,440
complexity-wise these two are

1264
00:45:33,440 --> 00:45:36,160
exactly the same though and so slight

1265
00:45:36,160 --> 00:45:37,200
reduction actually works in the

1266
00:45:37,200 --> 00:45:38,000
following way

1267
00:45:38,000 --> 00:45:40,319
it will break up your bases in in

1268
00:45:40,319 --> 00:45:42,000
disjoint sub-blocks

1269
00:45:42,000 --> 00:45:45,359
and apply the sap oracle to it and note

1270
00:45:45,359 --> 00:45:46,079
that this

1271
00:45:46,079 --> 00:45:48,240
happens completely independently so this

1272
00:45:48,240 --> 00:45:51,200
can be paralyzed very easily

1273
00:45:51,200 --> 00:45:52,880
and then in the second step a slight

1274
00:45:52,880 --> 00:45:55,200
reaction shifts the block by one

1275
00:45:55,200 --> 00:45:57,680
and applies a dual sap algorithm to it

1276
00:45:57,680 --> 00:45:59,680
the dual sap reduction

1277
00:45:59,680 --> 00:46:01,760
and these two steps are looped over and

1278
00:46:01,760 --> 00:46:03,520
over again and you should notice that

1279
00:46:03,520 --> 00:46:04,880
there are these pivot elements in the

1280
00:46:04,880 --> 00:46:05,760
middle

1281
00:46:05,760 --> 00:46:07,359
which are in the first step minimize

1282
00:46:07,359 --> 00:46:09,280
with regards to the block to the right

1283
00:46:09,280 --> 00:46:11,280
and the second step maximized with

1284
00:46:11,280 --> 00:46:12,960
regards to the block to the left

1285
00:46:12,960 --> 00:46:14,720
and this way information flows through

1286
00:46:14,720 --> 00:46:16,560
the basis and

1287
00:46:16,560 --> 00:46:18,319
minimizes the first entry or helps to

1288
00:46:18,319 --> 00:46:19,839
minimize the first entry

1289
00:46:19,839 --> 00:46:21,599
and i want to briefly show what this

1290
00:46:21,599 --> 00:46:22,800
looks like in action so here's a

1291
00:46:22,800 --> 00:46:24,160
simulation of

1292
00:46:24,160 --> 00:46:26,400
how this works i hope you can see the

1293
00:46:26,400 --> 00:46:27,760
video

1294
00:46:27,760 --> 00:46:31,599
and as you see the entry on the

1295
00:46:31,599 --> 00:46:33,200
far left actually starts creeping

1296
00:46:33,200 --> 00:46:35,200
towards this red line

1297
00:46:35,200 --> 00:46:37,280
and the red line is what we would expect

1298
00:46:37,280 --> 00:46:39,359
as a result here

1299
00:46:39,359 --> 00:46:41,280
so this is what you expect for the for

1300
00:46:41,280 --> 00:46:43,280
the length of the first entry

1301
00:46:43,280 --> 00:46:45,280
right um and so this continues for a

1302
00:46:45,280 --> 00:46:46,800
while um

1303
00:46:46,800 --> 00:46:49,040
which i don't want to bore you with any

1304
00:46:49,040 --> 00:46:50,000
further

1305
00:46:50,000 --> 00:46:53,440
so to understand what um what we do in

1306
00:46:53,440 --> 00:46:56,240
this work we have to go back briefly

1307
00:46:56,240 --> 00:46:59,040
to the svp reduction what we modeled we

1308
00:46:59,040 --> 00:46:59,520
said

1309
00:46:59,520 --> 00:47:01,680
that if we apply the sap reduction to a

1310
00:47:01,680 --> 00:47:02,720
projected sub-block

1311
00:47:02,720 --> 00:47:04,800
we said the shape that comes out looks

1312
00:47:04,800 --> 00:47:06,480
something like this

1313
00:47:06,480 --> 00:47:09,280
but recently it was observed in in the

1314
00:47:09,280 --> 00:47:10,000
work on the general

1315
00:47:10,000 --> 00:47:13,359
siege kernel from eurocrypt 2019 that

1316
00:47:13,359 --> 00:47:15,280
if you use a modern svp solver this is

1317
00:47:15,280 --> 00:47:16,560
actually a pretty bad

1318
00:47:16,560 --> 00:47:18,880
model of what actually happens so what

1319
00:47:18,880 --> 00:47:20,400
happens is actually something closer to

1320
00:47:20,400 --> 00:47:21,119
this

1321
00:47:21,119 --> 00:47:23,119
not only is the first entry minimized

1322
00:47:23,119 --> 00:47:24,720
but actually the entire head of the

1323
00:47:24,720 --> 00:47:26,960
basis is reduced to some degree

1324
00:47:26,960 --> 00:47:28,640
and analogously obviously for the for

1325
00:47:28,640 --> 00:47:31,119
the for the dual operation

1326
00:47:31,119 --> 00:47:33,119
and so what does this mean well let's

1327
00:47:33,119 --> 00:47:34,880
have a look at slide reduction again

1328
00:47:34,880 --> 00:47:37,200
after the first step and what the shape

1329
00:47:37,200 --> 00:47:38,640
of the basis looks like it's more like

1330
00:47:38,640 --> 00:47:40,240
this than what we had before

1331
00:47:40,240 --> 00:47:42,559
and now it seems natural to actually

1332
00:47:42,559 --> 00:47:45,119
shift the dual blocks not by one

1333
00:47:45,119 --> 00:47:47,200
vector by one entry but actually do it

1334
00:47:47,200 --> 00:47:48,160
by more than one

1335
00:47:48,160 --> 00:47:50,960
by the entire head of the bases and the

1336
00:47:50,960 --> 00:47:52,319
question is what happens what does it do

1337
00:47:52,319 --> 00:47:53,599
to the algorithm

1338
00:47:53,599 --> 00:47:56,079
um and there's another animation here

1339
00:47:56,079 --> 00:47:57,280
that i want to show i hope this is the

1340
00:47:57,280 --> 00:47:58,640
right one yes so this is

1341
00:47:58,640 --> 00:48:01,280
uh what now happens and as you can see

1342
00:48:01,280 --> 00:48:02,400
this algorithm

1343
00:48:02,400 --> 00:48:04,000
seems to converge much faster than the

1344
00:48:04,000 --> 00:48:06,160
one before

1345
00:48:06,160 --> 00:48:08,319
although if you look very closely or

1346
00:48:08,319 --> 00:48:10,079
paid attention very closely

1347
00:48:10,079 --> 00:48:11,839
it also converges to a red line but this

1348
00:48:11,839 --> 00:48:13,440
red line now is slightly higher than the

1349
00:48:13,440 --> 00:48:15,760
one that we saw before

1350
00:48:15,760 --> 00:48:18,319
and what this means is that this shift

1351
00:48:18,319 --> 00:48:19,599
by the dual blocks

1352
00:48:19,599 --> 00:48:22,480
actually offers a trade-off between the

1353
00:48:22,480 --> 00:48:24,800
running time and the output quality

1354
00:48:24,800 --> 00:48:26,640
um and and this is sort of the

1355
00:48:26,640 --> 00:48:28,319
contribution of this work

1356
00:48:28,319 --> 00:48:30,960
is that we analyze this trade-off and

1357
00:48:30,960 --> 00:48:31,839
you know we show

1358
00:48:31,839 --> 00:48:33,599
like we actually show that there is

1359
00:48:33,599 --> 00:48:34,880
actually a trade-off

1360
00:48:34,880 --> 00:48:36,640
and we show that you can tweak it so

1361
00:48:36,640 --> 00:48:38,160
that it becomes that side reduction

1362
00:48:38,160 --> 00:48:38,559
becomes

1363
00:48:38,559 --> 00:48:40,720
quite a different practice which uh we

1364
00:48:40,720 --> 00:48:42,559
backed up by experiments

1365
00:48:42,559 --> 00:48:45,839
um you know where um yeah where we show

1366
00:48:45,839 --> 00:48:47,280
that if you if you choose this overlap

1367
00:48:47,280 --> 00:48:49,200
well this overlap parameter is a shift

1368
00:48:49,200 --> 00:48:50,880
by the two of the dual blocks

1369
00:48:50,880 --> 00:48:51,839
then you get something that is

1370
00:48:51,839 --> 00:48:54,480
competitive uh and that is

1371
00:48:54,480 --> 00:48:58,720
all i have thank you thank you

1372
00:48:58,720 --> 00:49:02,880
any question for michael

1373
00:49:02,880 --> 00:49:06,960
on the chat anywhere okay maybe i can

1374
00:49:06,960 --> 00:49:09,040
[Music]

1375
00:49:09,040 --> 00:49:11,839
i can start but i had a question on the

1376
00:49:11,839 --> 00:49:12,720
long talk

1377
00:49:12,720 --> 00:49:16,079
but i mean naturally

1378
00:49:16,079 --> 00:49:18,559
so uh yeah so when you increase the

1379
00:49:18,559 --> 00:49:19,920
overlap

1380
00:49:19,920 --> 00:49:23,280
you reduce the number of svp calls but

1381
00:49:23,280 --> 00:49:23,760
you

1382
00:49:23,760 --> 00:49:27,680
also increase like the retirement factor

1383
00:49:27,680 --> 00:49:29,839
and if you decrease the block size you

1384
00:49:29,839 --> 00:49:31,839
also increase the return factor

1385
00:49:31,839 --> 00:49:34,559
and each svp code is going to be faster

1386
00:49:34,559 --> 00:49:35,440
so in

1387
00:49:35,440 --> 00:49:37,920
it's kind of seemed like you reduce the

1388
00:49:37,920 --> 00:49:39,839
time but you decrease the quality how

1389
00:49:39,839 --> 00:49:41,280
does that compare

1390
00:49:41,280 --> 00:49:44,720
like yeah so so these are two um

1391
00:49:44,720 --> 00:49:46,079
two similar trade-offs right like the

1392
00:49:46,079 --> 00:49:48,079
block size you know you can control the

1393
00:49:48,079 --> 00:49:48,720
blocks

1394
00:49:48,720 --> 00:49:52,240
the trade-off and uh this um yeah

1395
00:49:52,240 --> 00:49:54,240
this is overlap you can control the the

1396
00:49:54,240 --> 00:49:55,920
trade-off and

1397
00:49:55,920 --> 00:49:57,920
uh what we show in this work effectively

1398
00:49:57,920 --> 00:49:59,520
is um

1399
00:49:59,520 --> 00:50:01,680
that choosing it to be one is very

1400
00:50:01,680 --> 00:50:03,839
sub-optimal like you can gain

1401
00:50:03,839 --> 00:50:06,319
very much practical um like

1402
00:50:06,319 --> 00:50:07,599
independently of the block size

1403
00:50:07,599 --> 00:50:08,640
effectively

1404
00:50:08,640 --> 00:50:10,160
uh that you chose in the beginning you

1405
00:50:10,160 --> 00:50:11,680
can always get a little bit better

1406
00:50:11,680 --> 00:50:13,040
by choosing the overlap a little bit

1407
00:50:13,040 --> 00:50:15,359
better like or you know like you can

1408
00:50:15,359 --> 00:50:16,960
we actually have some some some

1409
00:50:16,960 --> 00:50:20,000
arguments um or we do some numerical um

1410
00:50:20,000 --> 00:50:23,280
estimations that show you know like that

1411
00:50:23,280 --> 00:50:24,480
actually compare exactly the two

1412
00:50:24,480 --> 00:50:26,000
trade-offs like what's better it's just

1413
00:50:26,000 --> 00:50:27,599
like if you have a baseline block size

1414
00:50:27,599 --> 00:50:28,400
what's better

1415
00:50:28,400 --> 00:50:29,920
if you want to reduce the running time

1416
00:50:29,920 --> 00:50:31,680
reducing the block size or switching the

1417
00:50:31,680 --> 00:50:32,480
overlap

1418
00:50:32,480 --> 00:50:35,839
yeah and so this is yeah so

1419
00:50:35,839 --> 00:50:37,760
but again we didn't do much uh much

1420
00:50:37,760 --> 00:50:39,200
optimization here so i

1421
00:50:39,200 --> 00:50:42,079
i believe there's much more uh work to

1422
00:50:42,079 --> 00:50:43,599
be done here to actually optimize this a

1423
00:50:43,599 --> 00:50:44,400
little bit more but

1424
00:50:44,400 --> 00:50:49,359
yeah yeah okay

1425
00:50:50,079 --> 00:50:54,319
any other questions on the chat

1426
00:50:54,319 --> 00:50:56,160
i'm also open for emails or anything

1427
00:50:56,160 --> 00:50:58,000
else

1428
00:50:58,000 --> 00:51:01,359
i also have another knife question

1429
00:51:01,359 --> 00:51:04,319
so you say slide reduction is easily

1430
00:51:04,319 --> 00:51:05,599
parallelizable

1431
00:51:05,599 --> 00:51:08,240
so what you described it seems indeed so

1432
00:51:08,240 --> 00:51:10,319
there is no like hidden stuff that

1433
00:51:10,319 --> 00:51:12,319
if you have n processors you can expect

1434
00:51:12,319 --> 00:51:13,599
a gain of

1435
00:51:13,599 --> 00:51:17,520
n basically or if you have that many

1436
00:51:17,520 --> 00:51:18,559
blocks

1437
00:51:18,559 --> 00:51:20,720
so if your bases right like you need you

1438
00:51:20,720 --> 00:51:22,079
need to have this many blocks on your

1439
00:51:22,079 --> 00:51:22,880
bases

1440
00:51:22,880 --> 00:51:24,480
and this might be the limiting factor in

1441
00:51:24,480 --> 00:51:26,160
many cases if you have

1442
00:51:26,160 --> 00:51:28,000
you know like if you think of a typical

1443
00:51:28,000 --> 00:51:30,240
example where the letter spaces might be

1444
00:51:30,240 --> 00:51:32,480
i don't know like like 300 and you want

1445
00:51:32,480 --> 00:51:34,839
a block size of 180 well there's two

1446
00:51:34,839 --> 00:51:36,240
blocks

1447
00:51:36,240 --> 00:51:38,720
and that's all you can gain from this so

1448
00:51:38,720 --> 00:51:40,400
but in other cases when you have like

1449
00:51:40,400 --> 00:51:41,920
qre letters for example of

1450
00:51:41,920 --> 00:51:43,520
dimension 800 or something and you want

1451
00:51:43,520 --> 00:51:45,520
to reduce with a block size 200

1452
00:51:45,520 --> 00:51:47,520
then you can get a factor for just for

1453
00:51:47,520 --> 00:51:49,119
the parallelization trivially in this

1454
00:51:49,119 --> 00:51:50,480
case

1455
00:51:50,480 --> 00:51:53,760
okay thanks so there is one question now

1456
00:51:53,760 --> 00:51:56,400
in the chat

1457
00:51:56,400 --> 00:51:58,880
so a question of iman are there any new

1458
00:51:58,880 --> 00:52:00,160
heuristic on the

1459
00:52:00,160 --> 00:52:03,280
tails of the slide block using this new

1460
00:52:03,280 --> 00:52:05,839
technique

1461
00:52:09,599 --> 00:52:12,559
uh what if can you can you read that

1462
00:52:12,559 --> 00:52:13,359
again so

1463
00:52:13,359 --> 00:52:15,680
say it again yeah maybe also iman if you

1464
00:52:15,680 --> 00:52:17,359
want to unmute you can unmute

1465
00:52:17,359 --> 00:52:20,480
otherwise i just read it again so

1466
00:52:20,480 --> 00:52:22,400
he's asking for if there is any new

1467
00:52:22,400 --> 00:52:24,240
heuristics on the tails

1468
00:52:24,240 --> 00:52:27,520
of the block of the slide block when you

1469
00:52:27,520 --> 00:52:28,720
use

1470
00:52:28,720 --> 00:52:32,559
i guess a new technique of overlapping

1471
00:52:32,559 --> 00:52:36,160
uh well not not really right like um the

1472
00:52:36,160 --> 00:52:38,960
like inside the block i mean we we just

1473
00:52:38,960 --> 00:52:40,800
assume that the first part is hkz

1474
00:52:40,800 --> 00:52:41,520
reduced

1475
00:52:41,520 --> 00:52:44,800
which is pretty typical uh assumption

1476
00:52:44,800 --> 00:52:46,640
on the tail i i don't really know what's

1477
00:52:46,640 --> 00:52:48,319
happening there i think that's

1478
00:52:48,319 --> 00:52:50,400
i'm guessing it'll i don't know i'm not

1479
00:52:50,400 --> 00:52:51,680
quite sure what sap

1480
00:52:51,680 --> 00:52:53,599
it'll depend on what sap solver is doing

1481
00:52:53,599 --> 00:52:55,119
there i think that was a question like

1482
00:52:55,119 --> 00:52:57,119
the tail inside the block right

1483
00:52:57,119 --> 00:52:59,680
and yeah thanks michael just wondering

1484
00:52:59,680 --> 00:53:01,040
if it was steeper

1485
00:53:01,040 --> 00:53:02,960
um it could actually make solving the

1486
00:53:02,960 --> 00:53:07,040
primal attack in the final block easier

1487
00:53:07,040 --> 00:53:08,640
but it was just uh just in case you'd

1488
00:53:08,640 --> 00:53:10,319
noticed any new uh

1489
00:53:10,319 --> 00:53:12,839
any new phenomena in the tales because

1490
00:53:12,839 --> 00:53:15,680
uh sort of uh inspiration of this work

1491
00:53:15,680 --> 00:53:16,559
seemed to be

1492
00:53:16,559 --> 00:53:20,240
experimental new uh you know

1493
00:53:20,240 --> 00:53:21,680
new experimental evidence i just

1494
00:53:21,680 --> 00:53:22,880
wondered if you'd seen anything in the

1495
00:53:22,880 --> 00:53:24,079
tale as well

1496
00:53:24,079 --> 00:53:26,240
i mean in some sense you can you can you

1497
00:53:26,240 --> 00:53:27,760
can choose a little bit right like you

1498
00:53:27,760 --> 00:53:29,680
you can either terminate this algorithm

1499
00:53:29,680 --> 00:53:31,599
after like a step where all the

1500
00:53:31,599 --> 00:53:34,960
uh blocks were or where the blocks

1501
00:53:34,960 --> 00:53:37,520
were uh reduced using the sdp oracle or

1502
00:53:37,520 --> 00:53:38,880
you can terminate after

1503
00:53:38,880 --> 00:53:40,640
a dual sap reduction right and after the

1504
00:53:40,640 --> 00:53:42,480
dual svp reduction then the tail

1505
00:53:42,480 --> 00:53:43,599
actually looks pretty good it looks like

1506
00:53:43,599 --> 00:53:44,079
a

1507
00:53:44,079 --> 00:53:47,200
like a dual hkz uh basis at least in the

1508
00:53:47,200 --> 00:53:48,079
tail

1509
00:53:48,079 --> 00:53:50,160
right the last few like for the overlap

1510
00:53:50,160 --> 00:53:52,240
um does that help

1511
00:53:52,240 --> 00:53:53,599
but it's effectively the same as

1512
00:53:53,599 --> 00:53:54,880
applying the whole algorithm to the dual

1513
00:53:54,880 --> 00:53:57,839
lattice so

1514
00:53:59,760 --> 00:54:03,040
okay thank you so if there is no more

1515
00:54:03,040 --> 00:54:04,480
question

1516
00:54:04,480 --> 00:54:07,119
i think we are almost on time to finish

1517
00:54:07,119 --> 00:54:08,960
this session

1518
00:54:08,960 --> 00:54:12,480
um i don't know so now is

1519
00:54:12,480 --> 00:54:15,200
social health so maybe if some people

1520
00:54:15,200 --> 00:54:17,440
want to continue asking questions

1521
00:54:17,440 --> 00:54:19,680
there were just one question on the chat

1522
00:54:19,680 --> 00:54:21,520
from young you to maxim but maybe they

1523
00:54:21,520 --> 00:54:21,920
can

1524
00:54:21,920 --> 00:54:24,960
uh answer directly there

1525
00:54:24,960 --> 00:54:29,200
in the chat on zulu or here on uh

1526
00:54:29,200 --> 00:54:30,720
but it's not for you michael it's for

1527
00:54:30,720 --> 00:54:33,200
maxim okay sorry

1528
00:54:33,200 --> 00:54:35,440
yeah okay anyone wants to put one on

1529
00:54:35,440 --> 00:54:38,160
zilla from me i'm also happy to yeah

1530
00:54:38,160 --> 00:54:40,319
yeah i mean one question you can

1531
00:54:40,319 --> 00:54:43,119
continue asking questions

1532
00:54:43,119 --> 00:54:46,480
for whatever time you want and

1533
00:54:46,480 --> 00:54:48,720
if there is no more question here maybe

1534
00:54:48,720 --> 00:54:50,480
we

1535
00:54:50,480 --> 00:54:53,839
we conclude

1536
00:54:54,160 --> 00:54:57,680
okay so thank you everyone for

