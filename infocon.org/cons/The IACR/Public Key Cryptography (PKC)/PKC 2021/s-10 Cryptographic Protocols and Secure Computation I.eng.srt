1
00:00:01,199 --> 00:00:03,519
okay uh you're good to go have a good

2
00:00:03,520 --> 00:00:05,840
meeting

3
00:00:06,000 --> 00:00:09,840
yes thank you um

4
00:00:09,840 --> 00:00:12,799
yeah so hello good afternoon or good

5
00:00:12,799 --> 00:00:14,000
morning

6
00:00:14,000 --> 00:00:17,520
my name is i will be

7
00:00:17,520 --> 00:00:20,160
the co-chair together with giorgio's

8
00:00:20,160 --> 00:00:21,039
pana

9
00:00:21,039 --> 00:00:24,960
tacos um so we will have

10
00:00:24,960 --> 00:00:26,880
six talks about cryptographic protocols

11
00:00:26,880 --> 00:00:28,960
and secure computation

12
00:00:28,960 --> 00:00:32,238
and the first speaker is already up uh

13
00:00:32,238 --> 00:00:35,600
it will be stars jerichy with the

14
00:00:35,600 --> 00:00:38,079
talk about the security or insecurity of

15
00:00:38,079 --> 00:00:40,000
the divi hellman oblivious

16
00:00:40,000 --> 00:00:43,120
prf with multi-notification blinding

17
00:00:43,120 --> 00:00:46,879
let's just please go ahead

18
00:00:50,000 --> 00:00:53,199
okay thank you so much barry welcome

19
00:00:53,199 --> 00:00:54,719
everyone

20
00:00:54,719 --> 00:00:58,640
and very nice seeing you so

21
00:00:58,640 --> 00:01:01,280
this is a talk on a paper on about

22
00:01:01,280 --> 00:01:02,719
insecurity of

23
00:01:02,719 --> 00:01:05,920
this method of oblivious prf and it's a

24
00:01:05,920 --> 00:01:08,159
paper with hugo craft chicken

25
00:01:08,159 --> 00:01:13,840
so i'm standing sofiaretsky

26
00:01:14,960 --> 00:01:19,039
okay sorry um

27
00:01:19,920 --> 00:01:22,159
i i didn't switch on i go to the laser

28
00:01:22,159 --> 00:01:23,840
pointer okay now i have it

29
00:01:23,840 --> 00:01:27,280
okay what's oblique is prf so

30
00:01:27,280 --> 00:01:30,560
a classic definition by friedman at all

31
00:01:30,560 --> 00:01:33,600
is that it's a secure computation

32
00:01:33,600 --> 00:01:35,920
uh for the following functionality so

33
00:01:35,920 --> 00:01:37,759
say you have some trf

34
00:01:37,759 --> 00:01:41,360
f the client inputs an argument

35
00:01:41,360 --> 00:01:44,560
the server inputs a key and the client

36
00:01:44,560 --> 00:01:47,600
computes just one value of the prf

37
00:01:47,600 --> 00:01:50,079
at the argument the client provided and

38
00:01:50,079 --> 00:01:50,960
the server

39
00:01:50,960 --> 00:01:52,880
learns nothing in particular does not

40
00:01:52,880 --> 00:01:55,040
learn the argument on which the prf was

41
00:01:55,040 --> 00:01:58,719
blindly obliviously computed

42
00:01:58,719 --> 00:02:02,240
okay so prf is a fundamental tool right

43
00:02:02,240 --> 00:02:04,479
this can be a blind decryption blind

44
00:02:04,479 --> 00:02:06,399
encryption blind max

45
00:02:06,399 --> 00:02:10,000
it has tons of applications uh beautiful

46
00:02:10,000 --> 00:02:12,480
applications uh set intercession as i

47
00:02:12,480 --> 00:02:14,879
learned there are tons of other stuff

48
00:02:14,879 --> 00:02:18,319
in particular uh you know this is our

49
00:02:18,319 --> 00:02:22,720
application from the previous paper uh

50
00:02:22,720 --> 00:02:26,080
about uh the particular method for um

51
00:02:26,080 --> 00:02:29,920
as asymmetric password authentication

52
00:02:29,920 --> 00:02:32,640
where you build in the strong property

53
00:02:32,640 --> 00:02:33,280
of

54
00:02:33,280 --> 00:02:36,319
randomized password hashes

55
00:02:36,319 --> 00:02:39,040
as follows the client computes this in a

56
00:02:39,040 --> 00:02:40,080
blind way

57
00:02:40,080 --> 00:02:43,040
on a password and basically it changes

58
00:02:43,040 --> 00:02:45,920
the low entropy string to a high entropy

59
00:02:45,920 --> 00:02:48,239
one and this is an older adria sighting

60
00:02:48,239 --> 00:02:52,000
from paul kaliski and sergio boyan

61
00:02:52,000 --> 00:02:53,760
and then this high entropy string is the

62
00:02:53,760 --> 00:02:56,000
key so it can be used for

63
00:02:56,000 --> 00:02:58,720
signing encryption uh whatever public

64
00:02:58,720 --> 00:02:59,280
key

65
00:02:59,280 --> 00:03:02,400
authentication method right so

66
00:03:02,400 --> 00:03:04,800
all of these applications uh basically

67
00:03:04,800 --> 00:03:05,519
motivate

68
00:03:05,519 --> 00:03:08,400
how do you do this uh obvious qrf in a

69
00:03:08,400 --> 00:03:10,800
fast and secure way

70
00:03:10,800 --> 00:03:13,680
here is one protocol we call it hashed

71
00:03:13,680 --> 00:03:15,200
dv hellmann

72
00:03:15,200 --> 00:03:18,640
um let hp hash onto a group

73
00:03:18,640 --> 00:03:20,480
uh cyclic group where d herman

74
00:03:20,480 --> 00:03:21,840
assumption holds

75
00:03:21,840 --> 00:03:24,319
so k is the exponent right of the order

76
00:03:24,319 --> 00:03:25,840
of the group

77
00:03:25,840 --> 00:03:28,239
this already inside is a pseudorandom

78
00:03:28,239 --> 00:03:29,280
function

79
00:03:29,280 --> 00:03:31,360
uh under the definitional difficultman

80
00:03:31,360 --> 00:03:33,680
assumption computational one

81
00:03:33,680 --> 00:03:36,120
is the new outward hash there is some

82
00:03:36,120 --> 00:03:37,280
technicalities

83
00:03:37,280 --> 00:03:40,400
that are related to this protocol so

84
00:03:40,400 --> 00:03:43,280
here is how to blindly compute it uh the

85
00:03:43,280 --> 00:03:44,480
client on x

86
00:03:44,480 --> 00:03:47,519
maps to the group and

87
00:03:47,519 --> 00:03:49,680
exponentially to a blinding factor the

88
00:03:49,680 --> 00:03:51,440
server exponentiates to the key

89
00:03:51,440 --> 00:03:54,560
so the client deep lines write and

90
00:03:54,560 --> 00:03:55,840
computes the right value

91
00:03:55,840 --> 00:03:58,080
and then okay so this is a very

92
00:03:58,080 --> 00:04:00,319
inexpensive protocol a one

93
00:04:00,319 --> 00:04:02,239
two exponentiation for the client one

94
00:04:02,239 --> 00:04:04,000
expectation for the server

95
00:04:04,000 --> 00:04:06,560
and in this paper with aguilos kayas

96
00:04:06,560 --> 00:04:08,239
which shows that it realizes a very

97
00:04:08,239 --> 00:04:09,200
strong

98
00:04:09,200 --> 00:04:11,760
uh notion of universally composable or

99
00:04:11,760 --> 00:04:13,519
prf in particular

100
00:04:13,519 --> 00:04:17,279
the strength implies that this server

101
00:04:17,279 --> 00:04:19,199
has a choice over key which is like a

102
00:04:19,199 --> 00:04:21,600
choice of a random function

103
00:04:21,600 --> 00:04:24,479
in every on every key this function is

104
00:04:24,479 --> 00:04:25,120
different

105
00:04:25,120 --> 00:04:27,040
has no correlations between different

106
00:04:27,040 --> 00:04:29,600
functions for different keys

107
00:04:29,600 --> 00:04:32,960
so okay this grade is very fast um

108
00:04:32,960 --> 00:04:35,199
okay or fast enough uh perhaps but

109
00:04:35,199 --> 00:04:37,440
actually it can be done even faster

110
00:04:37,440 --> 00:04:40,320
so here is a change okay so look look

111
00:04:40,320 --> 00:04:41,120
here

112
00:04:41,120 --> 00:04:43,120
and look here okay that's the place that

113
00:04:43,120 --> 00:04:44,320
you change it

114
00:04:44,320 --> 00:04:47,360
uh it's blinding instead of taking h to

115
00:04:47,360 --> 00:04:48,160
the next

116
00:04:48,160 --> 00:04:51,520
random you're multiplying by a random

117
00:04:51,520 --> 00:04:53,040
group element

118
00:04:53,040 --> 00:04:55,600
and then you can de-blind if you were

119
00:04:55,600 --> 00:04:56,960
given an extra

120
00:04:56,960 --> 00:04:59,040
set information g to the k right because

121
00:04:59,040 --> 00:05:01,120
g to the k to the minus r is the same as

122
00:05:01,120 --> 00:05:02,240
g to the r

123
00:05:02,240 --> 00:05:06,240
to decay okay so this is the terms blind

124
00:05:06,240 --> 00:05:09,280
rsa protocol it has a long history

125
00:05:09,280 --> 00:05:12,560
many uses and what why what's the point

126
00:05:12,560 --> 00:05:14,400
because we changed variable based

127
00:05:14,400 --> 00:05:16,479
exponentiation in the previous one was h

128
00:05:16,479 --> 00:05:16,800
of

129
00:05:16,800 --> 00:05:19,600
x was a variable base and b was a random

130
00:05:19,600 --> 00:05:20,639
group element right

131
00:05:20,639 --> 00:05:24,320
to fixed base right this one for surefix

132
00:05:24,320 --> 00:05:27,120
this one fixed in many many applications

133
00:05:27,120 --> 00:05:27,600
because it's

134
00:05:27,600 --> 00:05:29,680
one key and you authenticate to it all

135
00:05:29,680 --> 00:05:32,400
the time for example

136
00:05:32,400 --> 00:05:34,639
so this is the significant speed up um

137
00:05:34,639 --> 00:05:36,000
okay

138
00:05:36,000 --> 00:05:38,400
and uh the question obviously is is this

139
00:05:38,400 --> 00:05:40,160
just as secure it should be right

140
00:05:40,160 --> 00:05:41,520
because it looks

141
00:05:41,520 --> 00:05:43,520
kind of like these things are

142
00:05:43,520 --> 00:05:44,720
interchangeable

143
00:05:44,720 --> 00:05:48,720
not exactly here is um

144
00:05:48,720 --> 00:05:50,880
server without loss of generality he can

145
00:05:50,880 --> 00:05:52,400
exponentiate this part

146
00:05:52,400 --> 00:05:54,800
i mean for whatever discrete logarithm

147
00:05:54,800 --> 00:05:55,759
is here

148
00:05:55,759 --> 00:05:58,720
he can use it with a multiplicative

149
00:05:58,720 --> 00:05:59,360
shift

150
00:05:59,360 --> 00:06:02,319
okay so this multiplication whatever it

151
00:06:02,319 --> 00:06:03,520
was it comes out

152
00:06:03,520 --> 00:06:06,240
in you know from these equations so

153
00:06:06,240 --> 00:06:07,520
effectively

154
00:06:07,520 --> 00:06:08,960
what he computes what the server

155
00:06:08,960 --> 00:06:10,800
computes is this function for the

156
00:06:10,800 --> 00:06:13,520
for the client what does it mean

157
00:06:13,520 --> 00:06:15,039
effectively he chooses two values

158
00:06:15,039 --> 00:06:16,560
instead of one not just k

159
00:06:16,560 --> 00:06:20,000
but k comma delta and for every q comma

160
00:06:20,000 --> 00:06:23,280
delta the function is different so

161
00:06:23,280 --> 00:06:24,720
are they substantially different being

162
00:06:24,720 --> 00:06:26,720
so this is also a prf

163
00:06:26,720 --> 00:06:29,520
so who cares that it's a different prf

164
00:06:29,520 --> 00:06:30,800
right for all these applications should

165
00:06:30,800 --> 00:06:31,280
work

166
00:06:31,280 --> 00:06:33,919
not exactly they have the what this

167
00:06:33,919 --> 00:06:35,520
gives to the client is the ability to

168
00:06:35,520 --> 00:06:36,880
program collisions

169
00:06:36,880 --> 00:06:40,960
two keys k delta and k delta prime

170
00:06:40,960 --> 00:06:43,440
can map to the same value on one

171
00:06:43,440 --> 00:06:45,120
argument x star

172
00:06:45,120 --> 00:06:46,639
and this is what we show in the paper so

173
00:06:46,639 --> 00:06:48,160
first of all we observe that

174
00:06:48,160 --> 00:06:50,319
easy to observe think and also we

175
00:06:50,319 --> 00:06:51,599
analyze it showing

176
00:06:51,599 --> 00:06:54,720
there is no more uh abilities to

177
00:06:54,720 --> 00:06:56,479
correlate anything

178
00:06:56,479 --> 00:06:58,880
for all the other arguments x different

179
00:06:58,880 --> 00:06:59,759
from x star

180
00:06:59,759 --> 00:07:01,919
x are chosen by the server these

181
00:07:01,919 --> 00:07:04,639
functions are decorated

182
00:07:04,639 --> 00:07:08,880
okay so now my last slide uh

183
00:07:08,880 --> 00:07:10,720
so the short thing about what's the rest

184
00:07:10,720 --> 00:07:12,400
what do we do here with this

185
00:07:12,400 --> 00:07:16,080
so first of all we show some

186
00:07:16,080 --> 00:07:17,840
applications where this ability to

187
00:07:17,840 --> 00:07:19,360
program collisions

188
00:07:19,360 --> 00:07:21,680
actually builds in an attack it builds

189
00:07:21,680 --> 00:07:24,319
an attack that is like an online test

190
00:07:24,319 --> 00:07:27,360
he guesses he chooses some x-star the

191
00:07:27,360 --> 00:07:28,720
server is a malicious server

192
00:07:28,720 --> 00:07:30,560
on which two functions are correlated

193
00:07:30,560 --> 00:07:32,160
and in applications where somebody

194
00:07:32,160 --> 00:07:33,759
repeatedly asked

195
00:07:33,759 --> 00:07:35,440
the op ref on the same value like for

196
00:07:35,440 --> 00:07:38,400
example password authentication

197
00:07:38,400 --> 00:07:41,120
this is an online test for a password

198
00:07:41,120 --> 00:07:42,720
because you can see whether the values

199
00:07:42,720 --> 00:07:45,360
or outputs are the same or not

200
00:07:45,360 --> 00:07:48,080
uh this can be stopped in many ways put

201
00:07:48,080 --> 00:07:49,120
an isak

202
00:07:49,120 --> 00:07:50,879
you add some exponentiations actually

203
00:07:50,879 --> 00:07:52,400
certify this public key

204
00:07:52,400 --> 00:07:54,160
well you rely on certification or on

205
00:07:54,160 --> 00:07:57,360
storage very easy fix here

206
00:07:57,360 --> 00:08:00,319
okay and it is the k to the hush and the

207
00:08:00,319 --> 00:08:02,560
only thing that we see that is not quite

208
00:08:02,560 --> 00:08:03,919
okay with this is that it

209
00:08:03,919 --> 00:08:06,280
stops being interoperable with the

210
00:08:06,280 --> 00:08:08,240
exponentiation method

211
00:08:08,240 --> 00:08:12,080
which is has smaller band so you cannot

212
00:08:12,080 --> 00:08:15,840
do like we iot

213
00:08:15,840 --> 00:08:17,520
uh internet of things people who said

214
00:08:17,520 --> 00:08:19,280
like we want the low bandwidth protocol

215
00:08:19,280 --> 00:08:20,160
to work as well

216
00:08:20,160 --> 00:08:23,280
with the same function

217
00:08:23,280 --> 00:08:27,039
okay and it just doesn't work in that uh

218
00:08:27,039 --> 00:08:30,160
okay so what do we do with this we throw

219
00:08:30,160 --> 00:08:32,159
that it doesn't realize something we

220
00:08:32,159 --> 00:08:33,839
call correlated opioid rep so it's a

221
00:08:33,839 --> 00:08:35,039
relaxation of the

222
00:08:35,039 --> 00:08:37,679
prf model strong model with one i was

223
00:08:37,679 --> 00:08:38,958
talking about with agueros at the

224
00:08:38,958 --> 00:08:40,159
beginning

225
00:08:40,159 --> 00:08:41,919
these are random functions except for

226
00:08:41,919 --> 00:08:43,919
one point

227
00:08:43,919 --> 00:08:46,800
and uh what's the class of uh protocols

228
00:08:46,800 --> 00:08:48,320
that this is okay with because it's

229
00:08:48,320 --> 00:08:49,839
built as an online test

230
00:08:49,839 --> 00:08:52,240
it pays if you're using it for opaque

231
00:08:52,240 --> 00:08:53,760
like in opaque

232
00:08:53,760 --> 00:08:56,959
it is fine uh you drive down the cost of

233
00:08:56,959 --> 00:08:57,360
tech

234
00:08:57,360 --> 00:08:59,440
in this way right by using the

235
00:08:59,440 --> 00:09:00,480
multiplication

236
00:09:00,480 --> 00:09:05,600
right and you allow interoperability

237
00:09:05,600 --> 00:09:07,920
and you can use it in other places but i

238
00:09:07,920 --> 00:09:08,640
think that it's

239
00:09:08,640 --> 00:09:10,399
only there is a need if you want to be

240
00:09:10,399 --> 00:09:12,320
interoperable with other things because

241
00:09:12,320 --> 00:09:12,640
in

242
00:09:12,640 --> 00:09:15,440
most applications one of these fixes is

243
00:09:15,440 --> 00:09:16,480
going to be fine

244
00:09:16,480 --> 00:09:20,000
uh for you okay

245
00:09:20,000 --> 00:09:23,839
thank you thanks sir

246
00:09:24,320 --> 00:09:27,440
nice to hear uh any questions from the

247
00:09:27,440 --> 00:09:29,839
audience

248
00:09:35,440 --> 00:09:38,480
we already have run out of time

249
00:09:38,480 --> 00:09:42,320
almost one quick question maybe so um

250
00:09:42,320 --> 00:09:45,200
so there's adversarial behavior by the

251
00:09:45,200 --> 00:09:46,000
server

252
00:09:46,000 --> 00:09:49,519
for the additive blinding case

253
00:09:49,519 --> 00:09:51,200
it also possible that the client can do

254
00:09:51,200 --> 00:09:52,959
some harm

255
00:09:52,959 --> 00:09:56,320
no the client cannot cheat no he cannot

256
00:09:56,320 --> 00:09:57,200
cheat he got

257
00:09:57,200 --> 00:09:59,920
exactly one value it is under the

258
00:09:59,920 --> 00:10:00,959
assumption sorry i

259
00:10:00,959 --> 00:10:03,920
never said that the assumption is uh

260
00:10:03,920 --> 00:10:04,880
pretty similar

261
00:10:04,880 --> 00:10:08,800
in the proof as in here uh which is gap

262
00:10:08,800 --> 00:10:11,920
one more dh so it's uh it is a gap

263
00:10:11,920 --> 00:10:13,279
assumption right the server

264
00:10:13,279 --> 00:10:15,120
exponentiates to the key

265
00:10:15,120 --> 00:10:17,920
so how can you argue that if you cannot

266
00:10:17,920 --> 00:10:19,519
exponentiate many values

267
00:10:19,519 --> 00:10:21,760
it's a gap it's a one more type of sorry

268
00:10:21,760 --> 00:10:23,360
not one yeah the one more type of

269
00:10:23,360 --> 00:10:24,560
assumption

270
00:10:24,560 --> 00:10:27,600
right here spanish it's n things you can

271
00:10:27,600 --> 00:10:28,720
only compute n

272
00:10:28,720 --> 00:10:30,720
points under the one more type of

273
00:10:30,720 --> 00:10:32,640
assumption and then we need a gap

274
00:10:32,640 --> 00:10:36,160
for you see uh shenanigans

275
00:10:36,160 --> 00:10:38,240
and that's in both cases yeah but it's

276
00:10:38,240 --> 00:10:39,760
not negative and additive

277
00:10:39,760 --> 00:10:42,240
yeah i mean nothing changes except

278
00:10:42,240 --> 00:10:43,200
actually

279
00:10:43,200 --> 00:10:46,720
the stronger we call it gap

280
00:10:46,720 --> 00:10:49,920
plus the uh the oracle access we

281
00:10:49,920 --> 00:10:51,839
couldn't get it from just gap

282
00:10:51,839 --> 00:10:54,640
uh because we we needed more than just a

283
00:10:54,640 --> 00:10:56,160
ddh oracle to

284
00:10:56,160 --> 00:10:59,600
simulate uh the gap pla it extended ddh

285
00:10:59,600 --> 00:11:00,240
oracle

286
00:11:00,240 --> 00:11:04,160
it's uh secure for example anyway

287
00:11:04,160 --> 00:11:06,399
okay well thanks a lot uh i think we

288
00:11:06,399 --> 00:11:08,240
have to move on to the next talk

289
00:11:08,240 --> 00:11:11,279
so there's a question there's a question

290
00:11:11,279 --> 00:11:12,880
yes there's a question in the solubles

291
00:11:12,880 --> 00:11:15,680
of our stash if you have diamond

292
00:11:15,680 --> 00:11:18,240
what should i do uh there's another

293
00:11:18,240 --> 00:11:18,880
question in

294
00:11:18,880 --> 00:11:22,000
uh zulib you guys okay

295
00:11:22,000 --> 00:11:24,959
great okay you can move it it's sorry

296
00:11:24,959 --> 00:11:26,480
for running out of time but i will go to

297
00:11:26,480 --> 00:11:28,399
the tulip and and

298
00:11:28,399 --> 00:11:31,040
please anybody ask me questions on this

299
00:11:31,040 --> 00:11:32,959
tulip

300
00:11:32,959 --> 00:11:36,640
yeah yeah enjoy

301
00:11:38,079 --> 00:11:43,839
enjoy just please

302
00:11:47,279 --> 00:11:49,279
of uh unefficient generic construction

303
00:11:49,279 --> 00:11:50,639
for singles hand's sake

304
00:11:50,639 --> 00:11:52,320
post quantum stately got secure and

305
00:11:52,320 --> 00:11:54,959
deniable and uh guitar is gonna

306
00:11:54,959 --> 00:12:11,839
give us the talk

307
00:12:14,880 --> 00:12:19,440
i muted can you hear me yep

308
00:12:19,440 --> 00:12:22,079
thanks for introduction my name is

309
00:12:22,079 --> 00:12:22,959
kataro

310
00:12:22,959 --> 00:12:24,959
today we will tell you about an

311
00:12:24,959 --> 00:12:26,800
efficient anxiety construction for

312
00:12:26,800 --> 00:12:28,079
signals handshake

313
00:12:28,079 --> 00:12:30,160
foster quantum degree secure and

314
00:12:30,160 --> 00:12:31,200
reliable

315
00:12:31,200 --> 00:12:32,880
and this is your interval with street

316
00:12:32,880 --> 00:12:36,839
fights mata please quickly

317
00:12:36,839 --> 00:12:38,560
anatomically

318
00:12:38,560 --> 00:12:41,120
in this work we realize the first

319
00:12:41,120 --> 00:12:42,880
practical and custom quantum signal

320
00:12:42,880 --> 00:12:44,160
protocol

321
00:12:44,160 --> 00:12:47,600
let's realize this in fact we formalize

322
00:12:47,600 --> 00:12:50,320
signals initially agreement protocol for

323
00:12:50,320 --> 00:12:52,000
xcds proposed

324
00:12:52,000 --> 00:12:54,240
and proposed genetic construction as

325
00:12:54,240 --> 00:12:56,880
relative to its series

326
00:12:56,880 --> 00:12:59,120
initial we provide the implementation

327
00:12:59,120 --> 00:13:00,240
result of

328
00:13:00,240 --> 00:13:03,519
our proposed platform

329
00:13:03,519 --> 00:13:06,320
so let's talk about background and

330
00:13:06,320 --> 00:13:07,120
recently

331
00:13:07,120 --> 00:13:10,480
a lot of people use infinite messaging

332
00:13:10,480 --> 00:13:13,040
applications to communicate each other

333
00:13:13,040 --> 00:13:14,639
in instant messaging

334
00:13:14,639 --> 00:13:16,839
users send and receive messages

335
00:13:16,839 --> 00:13:19,360
asynchronously through the server

336
00:13:19,360 --> 00:13:22,000
and for example when alice wants to send

337
00:13:22,000 --> 00:13:22,560
a message

338
00:13:22,560 --> 00:13:25,120
to bob and she sends a message to the

339
00:13:25,120 --> 00:13:25,680
server

340
00:13:25,680 --> 00:13:29,680
and the server stores it temporarily

341
00:13:30,240 --> 00:13:32,720
then when bob becomes online he access

342
00:13:32,720 --> 00:13:36,000
the server and receive messages to him

343
00:13:36,000 --> 00:13:38,079
in this way we can send and receive

344
00:13:38,079 --> 00:13:40,000
messages in when

345
00:13:40,000 --> 00:13:43,839
the communication partner is offline

346
00:13:44,000 --> 00:13:46,720
however there is a risk that malicious

347
00:13:46,720 --> 00:13:49,120
server may reveal messages

348
00:13:49,120 --> 00:13:52,480
in fact it was revealed that a service

349
00:13:52,480 --> 00:13:53,680
provider helped

350
00:13:53,680 --> 00:13:55,600
intelligent agencies with correct

351
00:13:55,600 --> 00:13:59,199
messaging like this figure

352
00:13:59,680 --> 00:14:02,560
therefore to interactivity and privacy

353
00:14:02,560 --> 00:14:03,760
or messages

354
00:14:03,760 --> 00:14:06,000
a secure instant messaging is widely

355
00:14:06,000 --> 00:14:07,040
used

356
00:14:07,040 --> 00:14:10,639
in instance in secure instant messaging

357
00:14:10,639 --> 00:14:13,199
messages are encrypted with appreciated

358
00:14:13,199 --> 00:14:15,440
secret key

359
00:14:15,440 --> 00:14:17,600
yes the server cannot access the

360
00:14:17,600 --> 00:14:20,639
encrypted contents

361
00:14:21,680 --> 00:14:24,720
in this work we focus on signal

362
00:14:24,720 --> 00:14:27,120
signal is a widespread secure instant

363
00:14:27,120 --> 00:14:29,279
messaging application

364
00:14:29,279 --> 00:14:33,040
to encrypt messages a signal uses

365
00:14:33,040 --> 00:14:35,680
a signal protocol based on difficult

366
00:14:35,680 --> 00:14:37,279
assumption

367
00:14:37,279 --> 00:14:40,240
and a signal protocol is destroyed in a

368
00:14:40,240 --> 00:14:41,600
lot of messaging

369
00:14:41,600 --> 00:14:44,959
applications such as signal for support

370
00:14:44,959 --> 00:14:48,320
and facebook messengers hence

371
00:14:48,320 --> 00:14:50,560
billions of users use this and signal

372
00:14:50,560 --> 00:14:53,599
protocol in the world

373
00:14:55,360 --> 00:14:57,839
and let's see particular protocol works

374
00:14:57,839 --> 00:14:58,880
signal protocol

375
00:14:58,880 --> 00:15:02,399
consists of two phases

376
00:15:03,040 --> 00:15:06,480
first alice and both establish a shared

377
00:15:06,480 --> 00:15:10,720
secret key via excellence protocol

378
00:15:10,720 --> 00:15:13,360
then they start the actually encrypted

379
00:15:13,360 --> 00:15:15,120
communication by a double ratchet

380
00:15:15,120 --> 00:15:16,480
protocol

381
00:15:16,480 --> 00:15:19,360
when alice sends the messages she choose

382
00:15:19,360 --> 00:15:21,600
a new secret key showing that

383
00:15:21,600 --> 00:15:24,639
and encrypts the messages under the key

384
00:15:24,639 --> 00:15:27,600
in the pre-shared secrets then see and

385
00:15:27,600 --> 00:15:30,800
sends them to the server

386
00:15:30,800 --> 00:15:33,279
when both becomes online he receives the

387
00:15:33,279 --> 00:15:34,720
message from the server

388
00:15:34,720 --> 00:15:38,959
and the eclipse and them with breaking

389
00:15:38,959 --> 00:15:42,160
then both obtain the messages and the

390
00:15:42,160 --> 00:15:42,880
new

391
00:15:42,880 --> 00:15:48,240
ncr secret this is a signal protocol

392
00:15:48,480 --> 00:15:50,720
this the wretched protocol and the

393
00:15:50,720 --> 00:15:51,920
exegesis protocol

394
00:15:51,920 --> 00:15:55,519
were proposed in 2016 afterwards

395
00:15:55,519 --> 00:15:57,360
congoldon had already analyzed the

396
00:15:57,360 --> 00:16:00,560
security of signal protocol

397
00:16:00,560 --> 00:16:03,920
in 2019 rwang

398
00:16:03,920 --> 00:16:06,240
and or formalized the security models of

399
00:16:06,240 --> 00:16:08,320
double rotate protocol and

400
00:16:08,320 --> 00:16:11,120
they propose a generic construction of

401
00:16:11,120 --> 00:16:12,880
double-digit protocols

402
00:16:12,880 --> 00:16:14,800
which can be instantiated from

403
00:16:14,800 --> 00:16:17,040
post-quantum assumptions

404
00:16:17,040 --> 00:16:19,519
thus we already have a post-quantum

405
00:16:19,519 --> 00:16:22,720
doublet protocol

406
00:16:22,720 --> 00:16:26,399
on the other hand as for x-rays protocol

407
00:16:26,399 --> 00:16:28,480
the security modulus has not been

408
00:16:28,480 --> 00:16:29,839
formalized

409
00:16:29,839 --> 00:16:32,160
in addition there are no known

410
00:16:32,160 --> 00:16:33,440
construction from

411
00:16:33,440 --> 00:16:36,240
other than diffident assumptions as well

412
00:16:36,240 --> 00:16:38,639
as genetic construction

413
00:16:38,639 --> 00:16:44,160
thus post-quantum xcvh protocol is lag

414
00:16:44,320 --> 00:16:47,759
therefore it's work our

415
00:16:47,759 --> 00:16:50,639
purpose over this work is formalizing

416
00:16:50,639 --> 00:16:52,480
the security models of

417
00:16:52,480 --> 00:16:55,680
excellence protocol and design

418
00:16:55,680 --> 00:16:57,680
in a generic construction of the

419
00:16:57,680 --> 00:16:59,040
exchange protocol

420
00:16:59,040 --> 00:17:00,959
that can be instantiated from

421
00:17:00,959 --> 00:17:05,520
post-quantum assumptions

422
00:17:05,520 --> 00:17:08,400
then this is our contribution our

423
00:17:08,400 --> 00:17:10,160
contribution is a design

424
00:17:10,160 --> 00:17:12,000
and implementation of genetic

425
00:17:12,000 --> 00:17:14,400
construction as authority

426
00:17:14,400 --> 00:17:17,439
like cds protocol

427
00:17:17,439 --> 00:17:19,839
and our contribution is three false

428
00:17:19,839 --> 00:17:20,480
first

429
00:17:20,480 --> 00:17:23,280
we formalize the cds protocol as a

430
00:17:23,280 --> 00:17:24,799
specific type

431
00:17:24,799 --> 00:17:27,679
of authenticated key exchange protocol

432
00:17:27,679 --> 00:17:28,240
we call

433
00:17:28,240 --> 00:17:31,679
it signal conforming ada protocol

434
00:17:31,679 --> 00:17:35,600
and we provide the performance ability

435
00:17:35,600 --> 00:17:39,360
model and require functionality

436
00:17:39,520 --> 00:17:41,679
and second we propose generic

437
00:17:41,679 --> 00:17:42,559
construction

438
00:17:42,559 --> 00:17:46,160
of post control and signal confirming ak

439
00:17:46,160 --> 00:17:48,720
protocol based on key encapsulation and

440
00:17:48,720 --> 00:17:51,520
signature scheme

441
00:17:52,000 --> 00:17:55,120
and finally we implement

442
00:17:55,120 --> 00:17:58,840
our ck protocol with insta ptc

443
00:17:58,840 --> 00:18:00,400
candidates then

444
00:18:00,400 --> 00:18:02,240
we evaluate the computation and

445
00:18:02,240 --> 00:18:05,280
communication costs

446
00:18:06,880 --> 00:18:09,200
in this lab we focus on the initial key

447
00:18:09,200 --> 00:18:10,320
exchange protocol

448
00:18:10,320 --> 00:18:15,039
of signal protocol and propose the

449
00:18:15,120 --> 00:18:17,840
and combining it with the post quantum

450
00:18:17,840 --> 00:18:19,200
double digit protocol

451
00:18:19,200 --> 00:18:22,480
proposed by arvin atoll and we obtained

452
00:18:22,480 --> 00:18:23,039
the

453
00:18:23,039 --> 00:18:27,039
first postal contents in our portfolio

454
00:18:27,440 --> 00:18:29,200
thank you for you thank you for your

455
00:18:29,200 --> 00:18:32,000
kind attention

456
00:18:37,200 --> 00:18:40,840
thanks hidara so any questions from the

457
00:18:40,840 --> 00:18:43,840
audience

458
00:18:51,120 --> 00:18:55,280
can i ask i'm curious i really like that

459
00:18:55,280 --> 00:18:57,600
the goals of the work but i'm a bit

460
00:18:57,600 --> 00:18:59,120
curious what makes an

461
00:18:59,120 --> 00:19:01,120
authenticated keys change protocol

462
00:19:01,120 --> 00:19:02,559
signal

463
00:19:02,559 --> 00:19:06,000
um compliant or so what are the what are

464
00:19:06,000 --> 00:19:09,360
some of the properties that you need uh

465
00:19:09,360 --> 00:19:13,120
so you ask you the required property of

466
00:19:13,120 --> 00:19:13,840
the

467
00:19:13,840 --> 00:19:17,280
cnn protocol for authentic exchange

468
00:19:17,280 --> 00:19:21,280
yes after authenticating okay yeah

469
00:19:21,280 --> 00:19:24,400
to achieve a synchronous the first

470
00:19:24,400 --> 00:19:25,039
message

471
00:19:25,039 --> 00:19:27,440
is independent from communication

472
00:19:27,440 --> 00:19:29,200
partner

473
00:19:29,200 --> 00:19:31,919
so we call this property receivable

474
00:19:31,919 --> 00:19:33,280
obviousness

475
00:19:33,280 --> 00:19:36,320
and existing protocol doesn't some

476
00:19:36,320 --> 00:19:38,960
existing protocol does not achieve this

477
00:19:38,960 --> 00:19:40,160
probability

478
00:19:40,160 --> 00:19:43,520
i know we defined a required security

479
00:19:43,520 --> 00:19:45,919
property called state liquidity security

480
00:19:45,919 --> 00:19:46,799
this is a strong

481
00:19:46,799 --> 00:19:49,200
security notion for an authenticated key

482
00:19:49,200 --> 00:19:50,320
exchange

483
00:19:50,320 --> 00:19:53,360
and there are no known

484
00:19:53,360 --> 00:19:56,320
postal contaminated exchange that

485
00:19:56,320 --> 00:19:56,960
satisfies

486
00:19:56,960 --> 00:20:00,480
both properties so we create a new

487
00:20:00,480 --> 00:20:03,200
genetic construction that achieves to

488
00:20:03,200 --> 00:20:04,080
avoid

489
00:20:04,080 --> 00:20:07,840
a required property

490
00:20:15,840 --> 00:20:21,840
any other questions

491
00:20:23,440 --> 00:20:26,159
um i guess we're we're on time to move

492
00:20:26,159 --> 00:20:26,799
to the

493
00:20:26,799 --> 00:20:28,559
to the next talk and you can take other

494
00:20:28,559 --> 00:20:30,480
questions on julip

495
00:20:30,480 --> 00:20:34,000
buddy please

496
00:20:34,000 --> 00:20:36,159
please yeah for the other questions

497
00:20:36,159 --> 00:20:37,280
please uh

498
00:20:37,280 --> 00:20:40,240
turn to zulu um so we will have our

499
00:20:40,240 --> 00:20:41,440
third speaker

500
00:20:41,440 --> 00:20:44,880
it's alex davison uh presenting

501
00:20:44,880 --> 00:20:48,240
a joint work with three co-authors on uh

502
00:20:48,240 --> 00:20:50,559
round optimal verifiable oblivious pluto

503
00:20:50,559 --> 00:20:51,840
random functions from

504
00:20:51,840 --> 00:20:56,080
ideal letters uh alex please go ahead

505
00:20:56,080 --> 00:20:59,360
hi can you hear me okay yes

506
00:20:59,360 --> 00:21:02,000
yeah cool yes so hi i'm alex thank you

507
00:21:02,000 --> 00:21:02,880
for the introduction

508
00:21:02,880 --> 00:21:03,919
i'm going to be talking about some joint

509
00:21:03,919 --> 00:21:05,440
work with martin albert at tomatillo and

510
00:21:05,440 --> 00:21:06,240
nigel smart

511
00:21:06,240 --> 00:21:08,720
on round optimal verifiable obliviously

512
00:21:08,720 --> 00:21:10,559
random function protocols or video prfs

513
00:21:10,559 --> 00:21:11,360
from

514
00:21:11,360 --> 00:21:14,480
ideal lattices so our construction is

515
00:21:14,480 --> 00:21:15,440
the first

516
00:21:15,440 --> 00:21:17,600
vioprf protocol to be built from

517
00:21:17,600 --> 00:21:19,039
lattice-based hardness assumptions and

518
00:21:19,039 --> 00:21:20,559
it's kind of related to these

519
00:21:20,559 --> 00:21:23,840
um classic classical aprf um

520
00:21:23,840 --> 00:21:27,200
protocols that stanks as uh ricky

521
00:21:27,200 --> 00:21:29,840
presented in the talk earlier in the

522
00:21:29,840 --> 00:21:30,720
session

523
00:21:30,720 --> 00:21:32,640
um our protocol holds in the quantum

524
00:21:32,640 --> 00:21:34,400
value uh quantum random

525
00:21:34,400 --> 00:21:36,880
oracle model um which like strengthens

526
00:21:36,880 --> 00:21:37,600
the

527
00:21:37,600 --> 00:21:40,000
uh quantum credentials for the security

528
00:21:40,000 --> 00:21:40,799
argument

529
00:21:40,799 --> 00:21:42,559
but um one of the caveats i kind of want

530
00:21:42,559 --> 00:21:44,080
to offer um

531
00:21:44,080 --> 00:21:45,600
firstly is that this is entirely a

532
00:21:45,600 --> 00:21:48,000
feasibility result and so we saw many

533
00:21:48,000 --> 00:21:49,760
applications for these protocols

534
00:21:49,760 --> 00:21:51,440
and that they require like very

535
00:21:51,440 --> 00:21:52,720
efficient constructions but our

536
00:21:52,720 --> 00:21:53,600
construction

537
00:21:53,600 --> 00:21:56,400
is going to be focused purely as like a

538
00:21:56,400 --> 00:21:57,120
theoretical

539
00:21:57,120 --> 00:22:00,480
and we'll see why soon so um these

540
00:22:00,480 --> 00:22:03,200
protocols uh kind of rely on two parties

541
00:22:03,200 --> 00:22:04,480
so we have a client the server

542
00:22:04,480 --> 00:22:06,320
the client has an input x and the server

543
00:22:06,320 --> 00:22:07,760
has an input k

544
00:22:07,760 --> 00:22:10,159
and the client wants to learn the output

545
00:22:10,159 --> 00:22:11,679
of a pseudo-random function on those two

546
00:22:11,679 --> 00:22:14,320
inputs the security properties that we

547
00:22:14,320 --> 00:22:16,000
guarantee are that the server learns

548
00:22:16,000 --> 00:22:16,799
nothing about the

549
00:22:16,799 --> 00:22:18,799
client's input x and the client learns

550
00:22:18,799 --> 00:22:20,960
nothing about the server's input key k

551
00:22:20,960 --> 00:22:24,080
and then for verifiability we have this

552
00:22:24,080 --> 00:22:25,679
like extra property which is that the

553
00:22:25,679 --> 00:22:26,000
server

554
00:22:26,000 --> 00:22:27,280
proves that the output was also

555
00:22:27,280 --> 00:22:30,400
evaluated using its key

556
00:22:30,400 --> 00:22:32,320
so the reason that i'm talking about vpr

557
00:22:32,320 --> 00:22:33,440
specifically is because

558
00:22:33,440 --> 00:22:36,240
um they're used in some applications so

559
00:22:36,240 --> 00:22:37,840
in particular they are like quite quite

560
00:22:37,840 --> 00:22:38,400
critical

561
00:22:38,400 --> 00:22:39,760
building blocks in many internet

562
00:22:39,760 --> 00:22:41,600
protocols particularly some are being

563
00:22:41,600 --> 00:22:42,960
standardized by the internet engineering

564
00:22:42,960 --> 00:22:44,559
task force so we have the privacy class

565
00:22:44,559 --> 00:22:46,480
protocol which is used quite widely

566
00:22:46,480 --> 00:22:48,720
and by like cloudflare and google chrome

567
00:22:48,720 --> 00:22:49,919
and that's a private optimization

568
00:22:49,919 --> 00:22:52,400
protocol and that uses the oprs

569
00:22:52,400 --> 00:22:53,919
and then we saw before that opaque was

570
00:22:53,919 --> 00:22:55,120
mentioned and this is a password

571
00:22:55,120 --> 00:22:56,000
authentication

572
00:22:56,000 --> 00:22:58,960
key exchange which uses oprs um without

573
00:22:58,960 --> 00:23:00,400
the verifiability is like a building

574
00:23:00,400 --> 00:23:02,400
block

575
00:23:02,400 --> 00:23:04,559
um so in the interest of time i'm kind

576
00:23:04,559 --> 00:23:05,520
of just going to talk about our

577
00:23:05,520 --> 00:23:06,240
construction

578
00:23:06,240 --> 00:23:09,360
um as it is so uh to set the scene we're

579
00:23:09,360 --> 00:23:10,799
going to be focusing on like a classic

580
00:23:10,799 --> 00:23:12,240
ring lwe setting

581
00:23:12,240 --> 00:23:14,080
uh one thing i want to know is that we

582
00:23:14,080 --> 00:23:15,520
have this like modulus p

583
00:23:15,520 --> 00:23:17,120
um which is going to be used for

584
00:23:17,120 --> 00:23:18,960
rounding and this divides like the rings

585
00:23:18,960 --> 00:23:20,240
modulus q

586
00:23:20,240 --> 00:23:21,679
and then the other things i kind of want

587
00:23:21,679 --> 00:23:23,120
to draw attention to are kind of the

588
00:23:23,120 --> 00:23:24,720
error distribution setup that we have

589
00:23:24,720 --> 00:23:26,960
so we have this um error distribution in

590
00:23:26,960 --> 00:23:28,480
violet which is the same as the key

591
00:23:28,480 --> 00:23:29,120
space

592
00:23:29,120 --> 00:23:30,240
and this is going to be a gaussian

593
00:23:30,240 --> 00:23:31,919
distribution parameterized by the

594
00:23:31,919 --> 00:23:34,080
standard deviation parameter of sigma

595
00:23:34,080 --> 00:23:35,360
and then we're going to use this like

596
00:23:35,360 --> 00:23:37,360
wider distribution

597
00:23:37,360 --> 00:23:39,280
in green which has this parameter sigma

598
00:23:39,280 --> 00:23:40,720
prime and the

599
00:23:40,720 --> 00:23:43,760
um the guarantee that we have is that um

600
00:23:43,760 --> 00:23:45,600
hopefully the sample were not guaranteed

601
00:23:45,600 --> 00:23:47,360
but uh we hope that samples from this

602
00:23:47,360 --> 00:23:48,640
server distribution will drown

603
00:23:48,640 --> 00:23:51,279
samples from the the other distributions

604
00:23:51,279 --> 00:23:52,480
and then the other things are that we

605
00:23:52,480 --> 00:23:53,919
internally are going to use this

606
00:23:53,919 --> 00:23:55,520
uh pseudorandom function from banerjee

607
00:23:55,520 --> 00:23:57,039
and pika which is based on

608
00:23:57,039 --> 00:23:59,840
uh ringo wwe from crypto 2014 i'm also

609
00:23:59,840 --> 00:24:00,480
going to use

610
00:24:00,480 --> 00:24:02,159
a series of knowledge proofs which we

611
00:24:02,159 --> 00:24:04,559
can instantiate using

612
00:24:04,559 --> 00:24:06,159
recent lattice-based methods some of

613
00:24:06,159 --> 00:24:08,000
which are quantum random oracle model

614
00:24:08,000 --> 00:24:09,039
compatible

615
00:24:09,039 --> 00:24:11,760
um and so i'm going to um in the next

616
00:24:11,760 --> 00:24:12,720
few slides i'm going to talk through our

617
00:24:12,720 --> 00:24:13,360
protocol

618
00:24:13,360 --> 00:24:14,880
and i'm going to assume throughout that

619
00:24:14,880 --> 00:24:16,559
the zero knowledge proofs kind of assert

620
00:24:16,559 --> 00:24:17,120
the

621
00:24:17,120 --> 00:24:18,480
the construction of each message and

622
00:24:18,480 --> 00:24:19,919
that they are verified during the

623
00:24:19,919 --> 00:24:20,960
postfill

624
00:24:20,960 --> 00:24:24,559
so in the offline phase of our protocol

625
00:24:24,559 --> 00:24:26,240
firstly the server is going to commit to

626
00:24:26,240 --> 00:24:27,200
its key k

627
00:24:27,200 --> 00:24:28,480
essentially all it does is construct

628
00:24:28,480 --> 00:24:30,159
like the right hand side of a ring lwd

629
00:24:30,159 --> 00:24:30,960
sample

630
00:24:30,960 --> 00:24:32,559
whether it's key as a secret and then

631
00:24:32,559 --> 00:24:34,400
the public element there is kind of this

632
00:24:34,400 --> 00:24:34,880
known

633
00:24:34,880 --> 00:24:37,840
uh value that the client also knows um

634
00:24:37,840 --> 00:24:39,440
and this is to prove verifiability of

635
00:24:39,440 --> 00:24:40,480
the online phase

636
00:24:40,480 --> 00:24:42,400
so in the online phase the client

637
00:24:42,400 --> 00:24:43,919
essentially what it does is it encodes

638
00:24:43,919 --> 00:24:44,240
its

639
00:24:44,240 --> 00:24:46,640
input x to the ring using this um

640
00:24:46,640 --> 00:24:48,400
internal prf i mentioned

641
00:24:48,400 --> 00:24:50,799
and adds on this blinding factor and

642
00:24:50,799 --> 00:24:51,520
which is

643
00:24:51,520 --> 00:24:53,520
again the right hand side of every lwe

644
00:24:53,520 --> 00:24:55,279
sample with secret set to s so the

645
00:24:55,279 --> 00:24:57,600
client is like sampled and then stores

646
00:24:57,600 --> 00:24:59,919
and the server gets this message and

647
00:24:59,919 --> 00:25:02,080
then responds with dx which is kind of

648
00:25:02,080 --> 00:25:02,400
just

649
00:25:02,400 --> 00:25:04,559
cx multiplied by its qk and then added

650
00:25:04,559 --> 00:25:06,480
on with this like drowning error

651
00:25:06,480 --> 00:25:09,039
that i mentioned so the output of the

652
00:25:09,039 --> 00:25:10,480
prf eventually is going to be the

653
00:25:10,480 --> 00:25:11,440
rounded

654
00:25:11,440 --> 00:25:14,640
form of ax multiplied by k and i'm just

655
00:25:14,640 --> 00:25:15,919
going to talk about how like

656
00:25:15,919 --> 00:25:19,440
correctness and security holds so

657
00:25:19,440 --> 00:25:21,360
um in order for correctness to hold we

658
00:25:21,360 --> 00:25:22,480
have we have this

659
00:25:22,480 --> 00:25:24,240
um equation we kind of need this error

660
00:25:24,240 --> 00:25:26,000
term highlighted in green to like go to

661
00:25:26,000 --> 00:25:26,880
zero

662
00:25:26,880 --> 00:25:30,320
um so what we can do because um k s and

663
00:25:30,320 --> 00:25:31,600
all the errors are kind of sample from

664
00:25:31,600 --> 00:25:33,360
these short distributions we can bound

665
00:25:33,360 --> 00:25:34,880
to the total level term within this

666
00:25:34,880 --> 00:25:38,000
uh small interval of minus t to t and

667
00:25:38,000 --> 00:25:39,520
what we show is that our correctness

668
00:25:39,520 --> 00:25:41,279
argument is kind of like computational

669
00:25:41,279 --> 00:25:42,799
in the sense that um

670
00:25:42,799 --> 00:25:44,000
correctness doesn't hold if a

671
00:25:44,000 --> 00:25:46,000
coefficient of the polynomial ax

672
00:25:46,000 --> 00:25:47,200
multiplied by k

673
00:25:47,200 --> 00:25:48,960
is within minus t and t of a rounding

674
00:25:48,960 --> 00:25:50,320
boundary um

675
00:25:50,320 --> 00:25:51,919
but we show that any such coefficient

676
00:25:51,919 --> 00:25:53,360
would also lead to a break of the

677
00:25:53,360 --> 00:25:55,279
one-dimensional short integer

678
00:25:55,279 --> 00:25:57,200
short integer solution problem or one

679
00:25:57,200 --> 00:25:58,559
dsis

680
00:25:58,559 --> 00:26:01,520
um and then later on as well we um we

681
00:26:01,520 --> 00:26:02,000
proved

682
00:26:02,000 --> 00:26:03,200
uh security against malicious

683
00:26:03,200 --> 00:26:05,120
adversaries um i'm not going to talk

684
00:26:05,120 --> 00:26:06,320
right here but you can refer to the

685
00:26:06,320 --> 00:26:07,120
paper in the

686
00:26:07,120 --> 00:26:09,200
longer version of the talk for that

687
00:26:09,200 --> 00:26:10,320
argument but and this

688
00:26:10,320 --> 00:26:12,240
argument relies on the hardness of ring

689
00:26:12,240 --> 00:26:15,279
lwe and again one dsas

690
00:26:15,279 --> 00:26:17,600
so in terms of why our protocol isn't um

691
00:26:17,600 --> 00:26:19,039
yet efficient enough to be used in like

692
00:26:19,039 --> 00:26:20,880
common applications in the real world

693
00:26:20,880 --> 00:26:23,760
so um essentially we have this um super

694
00:26:23,760 --> 00:26:25,200
polynomial

695
00:26:25,200 --> 00:26:28,960
dependence of q and sigma prime

696
00:26:28,960 --> 00:26:31,760
on the security parameter and so q is

697
00:26:31,760 --> 00:26:33,200
super polynomial because of the

698
00:26:33,200 --> 00:26:34,640
underlying pseudo-annual function that

699
00:26:34,640 --> 00:26:36,799
we use the vanishing pocket

700
00:26:36,799 --> 00:26:39,279
pof and sigma prime is uh super

701
00:26:39,279 --> 00:26:40,720
polynomial because of this

702
00:26:40,720 --> 00:26:44,159
noise drowning approach that we use so

703
00:26:44,159 --> 00:26:46,000
with these asymptotic costs in mind we

704
00:26:46,000 --> 00:26:47,360
can kind of like estimate like the

705
00:26:47,360 --> 00:26:48,799
concrete costs and we get

706
00:26:48,799 --> 00:26:51,840
um our our solution if we compare it to

707
00:26:51,840 --> 00:26:53,039
kind of like the state of the art in

708
00:26:53,039 --> 00:26:55,120
viopos in terms of the classical cases

709
00:26:55,120 --> 00:26:56,640
orders of magnitude

710
00:26:56,640 --> 00:26:59,440
um less efficient and that's even before

711
00:26:59,440 --> 00:26:59,760
we

712
00:26:59,760 --> 00:27:01,039
uh take into account like the zero

713
00:27:01,039 --> 00:27:02,880
knowledge proofs that we we have to use

714
00:27:02,880 --> 00:27:03,120
and

715
00:27:03,120 --> 00:27:05,360
um it's kind of a similar case as well

716
00:27:05,360 --> 00:27:07,120
for other post-quantum another

717
00:27:07,120 --> 00:27:08,640
post-content candidate and based on

718
00:27:08,640 --> 00:27:09,840
misogynist

719
00:27:09,840 --> 00:27:12,880
uh by bone marrow so just to finish up

720
00:27:12,880 --> 00:27:14,960
um so yeah we've built the first

721
00:27:14,960 --> 00:27:16,799
post-quantum vapf from lattice-based

722
00:27:16,799 --> 00:27:18,320
hardness assumptions

723
00:27:18,320 --> 00:27:20,000
um but all post quantum proposals

724
00:27:20,000 --> 00:27:21,360
currently suffer from very expensive

725
00:27:21,360 --> 00:27:22,960
costs due to these zero-image proofs

726
00:27:22,960 --> 00:27:24,960
and the large parameter settings and so

727
00:27:24,960 --> 00:27:26,480
in terms of future work we think

728
00:27:26,480 --> 00:27:28,000
um it'd be really valuable to try and

729
00:27:28,000 --> 00:27:29,360
reduce or remove some of the

730
00:27:29,360 --> 00:27:30,880
zero-knowledge proofs that we consider

731
00:27:30,880 --> 00:27:33,679
while still ensuring verifiability and

732
00:27:33,679 --> 00:27:36,000
then also to try and um

733
00:27:36,000 --> 00:27:38,399
mitigate for either the noise drowning

734
00:27:38,399 --> 00:27:40,320
um well either mitigate four remove the

735
00:27:40,320 --> 00:27:41,760
noise draining approach that we use

736
00:27:41,760 --> 00:27:44,159
and maybe try and uh use a more

737
00:27:44,159 --> 00:27:45,120
efficient internal

738
00:27:45,120 --> 00:27:48,159
uh pseudorandom function um in

739
00:27:48,159 --> 00:27:49,760
in order to encode the inputs to the

740
00:27:49,760 --> 00:27:51,840
ring um but yeah that's

741
00:27:51,840 --> 00:27:55,520
that's it thank you yeah thank you too

742
00:27:55,520 --> 00:27:56,559
alex

743
00:27:56,559 --> 00:27:58,840
um any questions quick questions

744
00:27:58,840 --> 00:28:00,480
[Music]

745
00:28:00,480 --> 00:28:03,760
one or two minutes so so i have a

746
00:28:03,760 --> 00:28:04,399
question

747
00:28:04,399 --> 00:28:07,760
um did you consider like generic

748
00:28:07,760 --> 00:28:09,520
constructions in the sense of breaking

749
00:28:09,520 --> 00:28:10,720
the primitive into

750
00:28:10,720 --> 00:28:14,240
into building from similar primitives

751
00:28:14,240 --> 00:28:18,240
the revival obligatory function

752
00:28:18,240 --> 00:28:20,399
um do you mean generic in the sense that

753
00:28:20,399 --> 00:28:21,840
using like standard two-party

754
00:28:21,840 --> 00:28:23,279
computation

755
00:28:23,279 --> 00:28:24,960
protocols or do you mean generic in a

756
00:28:24,960 --> 00:28:26,480
different sense

757
00:28:26,480 --> 00:28:27,919
now starting from similar primitives

758
00:28:27,919 --> 00:28:29,600
where you instantiate them using

759
00:28:29,600 --> 00:28:31,039
lattices and then

760
00:28:31,039 --> 00:28:33,120
building up to oblivious random

761
00:28:33,120 --> 00:28:34,559
functions

762
00:28:34,559 --> 00:28:37,360
just wondering um we didn't we didn't

763
00:28:37,360 --> 00:28:38,080
really

764
00:28:38,080 --> 00:28:41,600
um consider generic

765
00:28:41,600 --> 00:28:44,320
approaches merely because um it was

766
00:28:44,320 --> 00:28:44,720
diffic

767
00:28:44,720 --> 00:28:46,960
like typically the most efficient

768
00:28:46,960 --> 00:28:48,240
constructions in the classical setting

769
00:28:48,240 --> 00:28:49,279
are like custom built

770
00:28:49,279 --> 00:28:51,600
approaches and we we went down the

771
00:28:51,600 --> 00:28:53,440
custom built approach to try and emulate

772
00:28:53,440 --> 00:28:54,880
kind of what was going on in the classic

773
00:28:54,880 --> 00:28:57,200
world in the post quantum letter space

774
00:28:57,200 --> 00:28:59,440
setting but i'm i'm pretty convinced

775
00:28:59,440 --> 00:29:00,880
that there would be genetic approaches

776
00:29:00,880 --> 00:29:02,000
to this and it would be

777
00:29:02,000 --> 00:29:04,000
it'd be interesting to know to like

778
00:29:04,000 --> 00:29:05,919
compare which of those

779
00:29:05,919 --> 00:29:07,840
methods would be best in terms of like

780
00:29:07,840 --> 00:29:13,840
practicality and efficiency

781
00:29:15,520 --> 00:29:19,200
okay then yeah i think

782
00:29:19,200 --> 00:29:22,000
well georges you can continue with the

783
00:29:22,000 --> 00:29:22,799
next talk

784
00:29:22,799 --> 00:29:26,320
introducing okay

785
00:29:26,320 --> 00:29:28,480
okay so the next next talk is beyond

786
00:29:28,480 --> 00:29:30,159
security and efficiency on demand

787
00:29:30,159 --> 00:29:32,080
ratcheting with security awareness

788
00:29:32,080 --> 00:29:36,960
and bet tool is gonna present

789
00:29:38,559 --> 00:29:42,559
so uh hello everyone

790
00:29:42,559 --> 00:29:44,799
my name is bitchell drug from bosch

791
00:29:44,799 --> 00:29:46,080
research the uh

792
00:29:46,080 --> 00:29:48,399
context of this talk is secure messaging

793
00:29:48,399 --> 00:29:49,919
with the ratcheting

794
00:29:49,919 --> 00:29:51,840
it's a joint work with andreia corforio

795
00:29:51,840 --> 00:29:54,399
and the serge warden from epf

796
00:29:54,399 --> 00:29:58,159
um so in secure

797
00:29:58,159 --> 00:30:00,399
end and messaging we worked with two

798
00:30:00,399 --> 00:30:01,200
party

799
00:30:01,200 --> 00:30:03,360
settings where the communication between

800
00:30:03,360 --> 00:30:04,720
participants

801
00:30:04,720 --> 00:30:08,000
uh is bidirectional and asynchronous

802
00:30:08,000 --> 00:30:10,960
and in terms of security we looked into

803
00:30:10,960 --> 00:30:12,960
two different notions the first one is a

804
00:30:12,960 --> 00:30:14,480
forward security

805
00:30:14,480 --> 00:30:17,840
and it says that whenever an

806
00:30:17,840 --> 00:30:19,760
internal state of a participant is

807
00:30:19,760 --> 00:30:22,320
exposed forward security preserves the

808
00:30:22,320 --> 00:30:24,640
confidentiality of all the messages

809
00:30:24,640 --> 00:30:26,480
that have been sent or received in the

810
00:30:26,480 --> 00:30:28,480
past and the

811
00:30:28,480 --> 00:30:31,039
construction constructions providing

812
00:30:31,039 --> 00:30:32,799
forward security can be achieved by

813
00:30:32,799 --> 00:30:33,279
using

814
00:30:33,279 --> 00:30:35,600
a very cheap cryptographic primitives

815
00:30:35,600 --> 00:30:37,600
such as one-way functions

816
00:30:37,600 --> 00:30:40,080
and this ratcheting this is this concept

817
00:30:40,080 --> 00:30:42,559
is known as ratcheting in the literature

818
00:30:42,559 --> 00:30:45,120
the second security notion we looked

819
00:30:45,120 --> 00:30:46,640
into is post-compromise

820
00:30:46,640 --> 00:30:50,720
security or pcs known as pcs

821
00:30:50,720 --> 00:30:53,520
and the idea in pcs is to protect the

822
00:30:53,520 --> 00:30:55,679
security after future communication

823
00:30:55,679 --> 00:30:58,880
after an exposure happens and indeed

824
00:30:58,880 --> 00:30:59,360
with

825
00:30:59,360 --> 00:31:02,640
pcs after a rounded trip exchange

826
00:31:02,640 --> 00:31:05,200
between participants alice and bob

827
00:31:05,200 --> 00:31:08,240
the security is restored or or

828
00:31:08,240 --> 00:31:11,600
healed and the

829
00:31:11,600 --> 00:31:13,679
unlike the forward uh secure

830
00:31:13,679 --> 00:31:14,640
constructions

831
00:31:14,640 --> 00:31:17,279
pcs requires public key cryptosystems

832
00:31:17,279 --> 00:31:19,279
therefore they are more expensive to

833
00:31:19,279 --> 00:31:22,720
to to achieve in the literature we have

834
00:31:22,720 --> 00:31:23,519
seen

835
00:31:23,519 --> 00:31:27,039
various uh proposals of community secure

836
00:31:27,039 --> 00:31:28,720
communication providing these two type

837
00:31:28,720 --> 00:31:29,679
of security

838
00:31:29,679 --> 00:31:31,600
and in our work we compare them in terms

839
00:31:31,600 --> 00:31:32,799
of efficiency and

840
00:31:32,799 --> 00:31:34,320
at the end of this talk i will briefly

841
00:31:34,320 --> 00:31:36,559
mention them as well

842
00:31:36,559 --> 00:31:38,159
so when we look at the real world

843
00:31:38,159 --> 00:31:40,159
cryptography the

844
00:31:40,159 --> 00:31:42,399
the popular application that we have is

845
00:31:42,399 --> 00:31:43,279
a signal

846
00:31:43,279 --> 00:31:44,960
and signal uses a double ratcheting

847
00:31:44,960 --> 00:31:46,480
mechanism and

848
00:31:46,480 --> 00:31:48,320
in there what happens is that whenever

849
00:31:48,320 --> 00:31:50,240
the direction of the communication

850
00:31:50,240 --> 00:31:53,600
between participants is the same

851
00:31:53,600 --> 00:31:56,240
then the protocol only uses the forward

852
00:31:56,240 --> 00:31:58,240
secure primitives which are cheap

853
00:31:58,240 --> 00:32:00,320
and every time the direction of the

854
00:32:00,320 --> 00:32:01,600
communication changes

855
00:32:01,600 --> 00:32:04,960
then it uses both so the uh the both

856
00:32:04,960 --> 00:32:06,480
the the forward secure and post

857
00:32:06,480 --> 00:32:08,240
compromise secure primitives are

858
00:32:08,240 --> 00:32:11,279
in play so uh what is uh not

859
00:32:11,279 --> 00:32:14,159
uh this is not flexible at all so it

860
00:32:14,159 --> 00:32:14,480
only

861
00:32:14,480 --> 00:32:16,320
it really depends on the direction of

862
00:32:16,320 --> 00:32:17,840
the communication and

863
00:32:17,840 --> 00:32:20,480
uh it doesn't for instance if alice is

864
00:32:20,480 --> 00:32:20,960
uh

865
00:32:20,960 --> 00:32:23,360
keeps sending messages to bob in staying

866
00:32:23,360 --> 00:32:25,120
in the same direction but

867
00:32:25,120 --> 00:32:28,399
uh leaving her phone unattended or

868
00:32:28,399 --> 00:32:31,120
leaving lots of time between messages

869
00:32:31,120 --> 00:32:32,000
still

870
00:32:32,000 --> 00:32:34,399
the weak security is preserved and on

871
00:32:34,399 --> 00:32:35,279
the

872
00:32:35,279 --> 00:32:38,480
and similarly if there is a active

873
00:32:38,480 --> 00:32:40,320
communication happening between alice

874
00:32:40,320 --> 00:32:41,200
and bob

875
00:32:41,200 --> 00:32:44,000
even though direction is changing often

876
00:32:44,000 --> 00:32:45,120
that means that it is using

877
00:32:45,120 --> 00:32:46,640
post-compromise secure primitives which

878
00:32:46,640 --> 00:32:48,240
is expensive maybe it is not

879
00:32:48,240 --> 00:32:50,480
required to change the direction all the

880
00:32:50,480 --> 00:32:52,399
time with the message exchange because

881
00:32:52,399 --> 00:32:54,000
because there is an active messaging

882
00:32:54,000 --> 00:32:56,240
going on so what i'm trying to say is

883
00:32:56,240 --> 00:32:56,880
that we

884
00:32:56,880 --> 00:33:00,480
propose a new method uh which

885
00:33:00,480 --> 00:33:02,960
which is which turns on and off the post

886
00:33:02,960 --> 00:33:04,880
compromise secure primitives on

887
00:33:04,880 --> 00:33:07,519
demand instead of by fixing it with the

888
00:33:07,519 --> 00:33:09,200
direction of the message changes

889
00:33:09,200 --> 00:33:12,399
so we the idea is to have two layers of

890
00:33:12,399 --> 00:33:14,399
protocols the the first layer

891
00:33:14,399 --> 00:33:16,799
is a main we call it upper layer it's

892
00:33:16,799 --> 00:33:18,480
called main in this picture

893
00:33:18,480 --> 00:33:20,640
um and it provides both types of

894
00:33:20,640 --> 00:33:21,679
security

895
00:33:21,679 --> 00:33:25,360
and this can be turned off the pcs can

896
00:33:25,360 --> 00:33:26,320
be turned off

897
00:33:26,320 --> 00:33:28,799
uh to provide only forward security has

898
00:33:28,799 --> 00:33:31,200
making the communication faster

899
00:33:31,200 --> 00:33:33,600
when necessary and the post-compromised

900
00:33:33,600 --> 00:33:35,679
security can be turned back on by

901
00:33:35,679 --> 00:33:38,080
calling the main upper layer protocol

902
00:33:38,080 --> 00:33:40,240
again and this can continue arbitrarily

903
00:33:40,240 --> 00:33:41,120
throughout

904
00:33:41,120 --> 00:33:44,880
the communication between parties okay

905
00:33:44,880 --> 00:33:47,600
so the second contribution we had is

906
00:33:47,600 --> 00:33:49,519
called security awareness and

907
00:33:49,519 --> 00:33:52,799
it comes with a few properties

908
00:33:52,799 --> 00:33:55,120
um the first one is recover security

909
00:33:55,120 --> 00:33:56,960
this has been studied in drag quadrant

910
00:33:56,960 --> 00:33:57,440
paper

911
00:33:57,440 --> 00:34:00,320
before the the half of it was studied

912
00:34:00,320 --> 00:34:01,519
before

913
00:34:01,519 --> 00:34:04,799
so the the idea here is that whenever an

914
00:34:04,799 --> 00:34:06,880
forgery happens and this forgery can

915
00:34:06,880 --> 00:34:07,360
happen

916
00:34:07,360 --> 00:34:08,879
with as an active attack when the

917
00:34:08,879 --> 00:34:10,879
external internal state of the

918
00:34:10,879 --> 00:34:12,879
participant is exposed

919
00:34:12,879 --> 00:34:16,000
it can be used for impersonation um so

920
00:34:16,000 --> 00:34:18,399
suppose bob received the forgery

921
00:34:18,399 --> 00:34:21,839
and what we want is to uh what we want

922
00:34:21,839 --> 00:34:22,320
is

923
00:34:22,320 --> 00:34:24,320
from the application is that bob will

924
00:34:24,320 --> 00:34:26,000
not be able to receive any genuine

925
00:34:26,000 --> 00:34:27,280
messages from his

926
00:34:27,280 --> 00:34:30,879
counterpart anymore and uh not only that

927
00:34:30,879 --> 00:34:31,599
but also

928
00:34:31,599 --> 00:34:33,918
bob we don't want bob to be able to send

929
00:34:33,918 --> 00:34:35,839
any genuine messages to his counterpart

930
00:34:35,839 --> 00:34:36,480
either

931
00:34:36,480 --> 00:34:39,199
so the uh the what this means is that

932
00:34:39,199 --> 00:34:41,280
the communication between participants

933
00:34:41,280 --> 00:34:42,399
will be cut off

934
00:34:42,399 --> 00:34:44,320
as soon as there is a there is an active

935
00:34:44,320 --> 00:34:46,159
attack and this is kind of

936
00:34:46,159 --> 00:34:48,560
making a making aware the participants

937
00:34:48,560 --> 00:34:50,159
that there is an attack going on in the

938
00:34:50,159 --> 00:34:51,679
communication

939
00:34:51,679 --> 00:34:54,639
um so the another uh property we have is

940
00:34:54,639 --> 00:34:56,159
acknowledgement extractors

941
00:34:56,159 --> 00:34:59,040
it's kind of more intuitive uh property

942
00:34:59,040 --> 00:34:59,680
whenever

943
00:34:59,680 --> 00:35:03,760
uh so when bob sends multiple messages

944
00:35:03,760 --> 00:35:06,160
when he receives the response for his uh

945
00:35:06,160 --> 00:35:07,200
some of messages

946
00:35:07,200 --> 00:35:08,800
he will be able to also see an

947
00:35:08,800 --> 00:35:10,320
acknowledgement on the scene

948
00:35:10,320 --> 00:35:13,359
and received messages and in which order

949
00:35:13,359 --> 00:35:13,920
they are

950
00:35:13,920 --> 00:35:17,599
seen and received so

951
00:35:17,599 --> 00:35:20,000
this provides the security awareness in

952
00:35:20,000 --> 00:35:20,960
the paper

953
00:35:20,960 --> 00:35:24,240
the last contribution that we had is the

954
00:35:24,240 --> 00:35:26,000
implementation of various different

955
00:35:26,000 --> 00:35:27,839
types of protocols from the literature

956
00:35:27,839 --> 00:35:28,320
that

957
00:35:28,320 --> 00:35:30,960
have studied the secure communication

958
00:35:30,960 --> 00:35:31,760
and in

959
00:35:31,760 --> 00:35:33,599
this slide i only showed the runtime but

960
00:35:33,599 --> 00:35:35,280
we have more in the in the paper with

961
00:35:35,280 --> 00:35:36,079
the

962
00:35:36,079 --> 00:35:39,200
state size and maybe more uh maybe

963
00:35:39,200 --> 00:35:41,200
maybe also more different settings other

964
00:35:41,200 --> 00:35:43,040
than just alternating and different

965
00:35:43,040 --> 00:35:44,960
unidirectional

966
00:35:44,960 --> 00:35:48,320
settings so um we did not

967
00:35:48,320 --> 00:35:51,359
implement on-demand ratcheting but

968
00:35:51,359 --> 00:35:54,800
so intuitively what we propose is a

969
00:35:54,800 --> 00:35:56,320
generic construction

970
00:35:56,320 --> 00:35:59,440
and the main layer which is the upper

971
00:35:59,440 --> 00:36:00,880
layer which provides both types of

972
00:36:00,880 --> 00:36:03,119
security can be replaced can be used

973
00:36:03,119 --> 00:36:06,160
with like it could be any protocol which

974
00:36:06,160 --> 00:36:07,760
provides both types of security for

975
00:36:07,760 --> 00:36:09,040
instance the

976
00:36:09,040 --> 00:36:11,520
uh pr protocol for telling rustler

977
00:36:11,520 --> 00:36:12,160
protocol

978
00:36:12,160 --> 00:36:16,400
or jager stefano or jmm all this uh

979
00:36:16,400 --> 00:36:18,800
provides all directory they all provide

980
00:36:18,800 --> 00:36:20,640
both types of security they can be used

981
00:36:20,640 --> 00:36:22,160
as the upper layer

982
00:36:22,160 --> 00:36:25,359
and for the lower layer which is

983
00:36:25,359 --> 00:36:28,079
the uh only forward secure primitive we

984
00:36:28,079 --> 00:36:29,839
implemented uh january

985
00:36:29,839 --> 00:36:33,200
uh young wooden protocol which is

986
00:36:33,200 --> 00:36:35,599
extremely efficient and the on-demand

987
00:36:35,599 --> 00:36:37,520
ratcheting would be for instance if we

988
00:36:37,520 --> 00:36:39,119
use the drag quad in a paper

989
00:36:39,119 --> 00:36:41,520
protocol it will be in between this blue

990
00:36:41,520 --> 00:36:43,440
uh circled curve and the red

991
00:36:43,440 --> 00:36:45,839
triangle curve the the complexity will

992
00:36:45,839 --> 00:36:48,240
be to stay between these two

993
00:36:48,240 --> 00:36:52,079
two curves um so that concludes my talk

994
00:36:52,079 --> 00:36:53,440
uh thank you very much i can take the

995
00:36:53,440 --> 00:36:55,839
questions

996
00:36:58,000 --> 00:37:00,960
yeah any questions

997
00:37:02,320 --> 00:37:09,839
thank you so yeah

998
00:37:12,000 --> 00:37:15,280
okay so i have a question

999
00:37:15,280 --> 00:37:18,880
so um do you think

1000
00:37:18,880 --> 00:37:21,119
it is possible to get this property

1001
00:37:21,119 --> 00:37:22,400
somehow adapt

1002
00:37:22,400 --> 00:37:24,800
your protocol to work on signal let's

1003
00:37:24,800 --> 00:37:25,440
say as a

1004
00:37:25,440 --> 00:37:29,200
as a on a higher layer with change

1005
00:37:29,200 --> 00:37:32,320
signal okay so

1006
00:37:32,320 --> 00:37:33,920
uh i would just repeat the question

1007
00:37:33,920 --> 00:37:35,680
because there was a

1008
00:37:35,680 --> 00:37:37,520
voice broken up so you said that is

1009
00:37:37,520 --> 00:37:39,359
there any way to integrate these

1010
00:37:39,359 --> 00:37:40,560
properties to

1011
00:37:40,560 --> 00:37:44,240
signal is that correct

1012
00:37:44,240 --> 00:37:46,800
yes uh yeah i i think so i believe so

1013
00:37:46,800 --> 00:37:48,560
the question is i think if they want or

1014
00:37:48,560 --> 00:37:49,040
not

1015
00:37:49,040 --> 00:37:51,760
so um so this will imply for instance

1016
00:37:51,760 --> 00:37:53,359
recover security will imply a

1017
00:37:53,359 --> 00:37:54,720
communication cut

1018
00:37:54,720 --> 00:37:58,079
so this i don't know if if signal wants

1019
00:37:58,079 --> 00:37:59,119
to do that

1020
00:37:59,119 --> 00:38:01,920
but uh um communication cut usually

1021
00:38:01,920 --> 00:38:02,480
people

1022
00:38:02,480 --> 00:38:05,119
don't prefer to do it it's kind of uh

1023
00:38:05,119 --> 00:38:06,400
not desirable

1024
00:38:06,400 --> 00:38:10,320
but what i can say is that in our paper

1025
00:38:10,320 --> 00:38:12,560
instead of having two different types of

1026
00:38:12,560 --> 00:38:13,680
uh you know

1027
00:38:13,680 --> 00:38:15,599
stronger secure and weaker secure

1028
00:38:15,599 --> 00:38:17,760
primitives to switch between

1029
00:38:17,760 --> 00:38:20,800
it can be the lower layer uh can be also

1030
00:38:20,800 --> 00:38:23,440
same as main layer and the communication

1031
00:38:23,440 --> 00:38:25,359
goes in direct in this direction and as

1032
00:38:25,359 --> 00:38:26,960
soon as a recover

1033
00:38:26,960 --> 00:38:30,160
security act security is

1034
00:38:30,160 --> 00:38:33,280
is in play then recovery could go back

1035
00:38:33,280 --> 00:38:35,040
to the upper layer to recover to

1036
00:38:35,040 --> 00:38:36,400
continue communication so the

1037
00:38:36,400 --> 00:38:37,920
communication in this

1038
00:38:37,920 --> 00:38:40,960
part is going to be cut uh and it will

1039
00:38:40,960 --> 00:38:42,800
be activating the upper layer to

1040
00:38:42,800 --> 00:38:44,880
continue communicating so i think this

1041
00:38:44,880 --> 00:38:46,640
is uh this is feasible

1042
00:38:46,640 --> 00:38:49,620
i don't know what would prevent that

1043
00:38:49,620 --> 00:38:51,520
[Music]

1044
00:38:51,520 --> 00:38:54,480
does that answer the question yep yeah

1045
00:38:54,480 --> 00:38:55,359
okay

1046
00:38:55,359 --> 00:38:58,400
um has this proposal been discussed with

1047
00:38:58,400 --> 00:39:00,320
people in the mls standardization for

1048
00:39:00,320 --> 00:39:02,079
instance

1049
00:39:02,079 --> 00:39:05,359
uh yes we gave a presentation uh

1050
00:39:05,359 --> 00:39:08,720
in a small workshop when after europe

1051
00:39:08,720 --> 00:39:10,000
2019

1052
00:39:10,000 --> 00:39:12,720
i think they are aware of this proposal

1053
00:39:12,720 --> 00:39:13,520
yes

1054
00:39:13,520 --> 00:39:16,720
i i believe also the uh mls

1055
00:39:16,720 --> 00:39:18,560
proposed something similar to recover

1056
00:39:18,560 --> 00:39:20,000
security because what we do with the

1057
00:39:20,000 --> 00:39:21,839
recovery security is essentially kind of

1058
00:39:21,839 --> 00:39:23,040
having a chain of

1059
00:39:23,040 --> 00:39:24,800
uh hashes of the history of the

1060
00:39:24,800 --> 00:39:26,560
communication to provide the security

1061
00:39:26,560 --> 00:39:28,000
it's not too expensive it's

1062
00:39:28,000 --> 00:39:30,640
actually quite cheap to to to edit i

1063
00:39:30,640 --> 00:39:32,400
believe it is that there's a proposal in

1064
00:39:32,400 --> 00:39:34,560
mls about recovery security as well

1065
00:39:34,560 --> 00:39:36,000
but i may be wrong actually though this

1066
00:39:36,000 --> 00:39:38,000
was quite involved or

1067
00:39:38,000 --> 00:39:39,599
paul wrestler they were quite involved

1068
00:39:39,599 --> 00:39:41,359
they may answer better than me

1069
00:39:41,359 --> 00:39:45,920
i was not so much involved in the mrs

1070
00:39:47,920 --> 00:39:51,280
does that does that answer the question

1071
00:39:51,280 --> 00:39:54,839
yes thank you yeah so interesting thank

1072
00:39:54,839 --> 00:39:57,280
you

1073
00:39:57,280 --> 00:40:00,640
okay so i think we can go

1074
00:40:00,640 --> 00:40:02,800
to the next stock thanks again matul

1075
00:40:02,800 --> 00:40:05,599
thank you very much

1076
00:40:05,599 --> 00:40:08,800
yes um we will

1077
00:40:08,800 --> 00:40:13,200
have our next speaker lakshita gohan

1078
00:40:13,200 --> 00:40:15,680
and her talk will be on the cca

1079
00:40:15,680 --> 00:40:16,800
compatibility

1080
00:40:16,800 --> 00:40:18,400
of the public key of public

1081
00:40:18,400 --> 00:40:20,319
infrastructures so i hope

1082
00:40:20,319 --> 00:40:23,760
she's ready yeah i'll see her

1083
00:40:23,760 --> 00:40:28,640
so please go ahead thank you

1084
00:40:35,680 --> 00:40:39,520
yes that works good right

1085
00:40:40,160 --> 00:40:43,280
okay um so hello everyone uh

1086
00:40:43,280 --> 00:40:44,800
this is going to this talk is going to

1087
00:40:44,800 --> 00:40:47,280
be on the ccr compatibility of public

1088
00:40:47,280 --> 00:40:48,720
key infrastructure

1089
00:40:48,720 --> 00:40:50,960
uh this is joint work with brent waters

1090
00:40:50,960 --> 00:40:53,520
at ut austin

1091
00:40:53,520 --> 00:40:55,520
so the notion of public key encryption

1092
00:40:55,520 --> 00:40:56,720
that we you know all

1093
00:40:56,720 --> 00:40:59,359
know and love allows bob to set up and

1094
00:40:59,359 --> 00:41:00,960
publish a public key

1095
00:41:00,960 --> 00:41:03,520
in such a way that alice can send

1096
00:41:03,520 --> 00:41:05,520
encrypted communication to bob

1097
00:41:05,520 --> 00:41:07,520
that can only be decrypted given

1098
00:41:07,520 --> 00:41:09,200
knowledge of the corresponding secret

1099
00:41:09,200 --> 00:41:10,160
key

1100
00:41:10,160 --> 00:41:12,720
and any adversary that observes this

1101
00:41:12,720 --> 00:41:13,839
communication

1102
00:41:13,839 --> 00:41:16,000
but cannot compute the secret key will

1103
00:41:16,000 --> 00:41:17,599
be unable to distinguish

1104
00:41:17,599 --> 00:41:19,440
encryptions of one message from

1105
00:41:19,440 --> 00:41:22,079
encryptions of another

1106
00:41:22,079 --> 00:41:24,160
this notion is called cpa security or

1107
00:41:24,160 --> 00:41:25,920
security against chosen plaintext

1108
00:41:25,920 --> 00:41:27,760
attacks

1109
00:41:27,760 --> 00:41:29,119
sorry i just want to make sure that

1110
00:41:29,119 --> 00:41:30,720
everyone can see the right side portion

1111
00:41:30,720 --> 00:41:32,880
of my screen i see some

1112
00:41:32,880 --> 00:41:36,640
so is my slide completely visible

1113
00:41:36,640 --> 00:41:40,079
okay thank you yes okay

1114
00:41:40,079 --> 00:41:42,720
okay but what if the receiver actually

1115
00:41:42,720 --> 00:41:44,960
only ever published a verification key

1116
00:41:44,960 --> 00:41:46,880
for a digital signature scheme for which

1117
00:41:46,880 --> 00:41:48,800
they possessed a signing key

1118
00:41:48,800 --> 00:41:50,720
or more generally what if the receiver

1119
00:41:50,720 --> 00:41:52,720
publishes a puzzle for which only they

1120
00:41:52,720 --> 00:41:53,040
know

1121
00:41:53,040 --> 00:41:54,560
a solution and the solution is in

1122
00:41:54,560 --> 00:41:57,280
general hard to compute

1123
00:41:57,280 --> 00:41:58,880
can we still use this together with

1124
00:41:58,880 --> 00:42:00,560
maybe other assumptions but can we use

1125
00:42:00,560 --> 00:42:01,280
this puzzle

1126
00:42:01,280 --> 00:42:03,280
as a setup to do public key encryption

1127
00:42:03,280 --> 00:42:04,800
instead

1128
00:42:04,800 --> 00:42:06,640
this question was one of the original

1129
00:42:06,640 --> 00:42:08,079
motivations

1130
00:42:08,079 --> 00:42:10,880
for the problem of witness encryption so

1131
00:42:10,880 --> 00:42:12,480
garget all showed

1132
00:42:12,480 --> 00:42:15,680
that one can indeed encrypt a message

1133
00:42:15,680 --> 00:42:18,400
so that it can only be opened by a

1134
00:42:18,400 --> 00:42:19,359
recipient

1135
00:42:19,359 --> 00:42:22,720
that knows an np witness and they use

1136
00:42:22,720 --> 00:42:25,200
this primitive called witness encryption

1137
00:42:25,200 --> 00:42:29,119
to build this sort of compiler

1138
00:42:29,119 --> 00:42:31,200
moreover assuming the existence of an

1139
00:42:31,200 --> 00:42:33,280
appropriate witness encryption scheme

1140
00:42:33,280 --> 00:42:36,720
uh no adversary can will be able to

1141
00:42:36,720 --> 00:42:37,920
distinguish encryption

1142
00:42:37,920 --> 00:42:39,280
encryptions of one message from

1143
00:42:39,280 --> 00:42:41,359
encryptions of another unless

1144
00:42:41,359 --> 00:42:44,720
they are able to also find a solution to

1145
00:42:44,720 --> 00:42:47,280
this hard bus

1146
00:42:47,280 --> 00:42:50,800
so so to motivate our problem statement

1147
00:42:50,800 --> 00:42:53,040
let's take a deeper look at the security

1148
00:42:53,040 --> 00:42:55,280
of public key encryption schemes

1149
00:42:55,280 --> 00:42:57,440
schemes that satisfy the notion of cpa

1150
00:42:57,440 --> 00:42:58,400
security

1151
00:42:58,400 --> 00:42:59,920
often suffer from what are known as

1152
00:42:59,920 --> 00:43:02,240
malleability attacks when an attacker

1153
00:43:02,240 --> 00:43:02,560
can

1154
00:43:02,560 --> 00:43:04,960
obtain a plaintext a ciphertext that

1155
00:43:04,960 --> 00:43:06,960
encrypts a plaintext and the attacker

1156
00:43:06,960 --> 00:43:09,359
doesn't know what plaintext this is

1157
00:43:09,359 --> 00:43:12,560
but is able to modify this cipher text

1158
00:43:12,560 --> 00:43:14,560
to come up with a different cipher text

1159
00:43:14,560 --> 00:43:17,520
that encrypts a related message to

1160
00:43:17,520 --> 00:43:19,119
defend against such attacks

1161
00:43:19,119 --> 00:43:21,200
uh public key encryption schemes are now

1162
00:43:21,200 --> 00:43:22,480
typically required

1163
00:43:22,480 --> 00:43:25,440
to satisfy a stronger notion of cca

1164
00:43:25,440 --> 00:43:26,720
security

1165
00:43:26,720 --> 00:43:29,359
so here an adversary cannot distinguish

1166
00:43:29,359 --> 00:43:31,280
encryptions of two plaintexts

1167
00:43:31,280 --> 00:43:33,920
from each other even given access to a

1168
00:43:33,920 --> 00:43:35,119
decryption oracle

1169
00:43:35,119 --> 00:43:37,599
that decrypts all possible related

1170
00:43:37,599 --> 00:43:38,640
cipher texts

1171
00:43:38,640 --> 00:43:40,480
that the adversary can submit to this

1172
00:43:40,480 --> 00:43:42,960
article

1173
00:43:43,440 --> 00:43:46,560
so now going back our motivating

1174
00:43:46,560 --> 00:43:50,000
question for this work is

1175
00:43:50,000 --> 00:43:51,839
going back to the setting of where bob

1176
00:43:51,839 --> 00:43:53,920
publishes a puzzle and alice is able to

1177
00:43:53,920 --> 00:43:55,119
encrypt a message

1178
00:43:55,119 --> 00:43:57,200
so that only someone that can solve this

1179
00:43:57,200 --> 00:43:59,119
puzzle is able to decrypt it

1180
00:43:59,119 --> 00:44:01,599
we know a solution based on witness

1181
00:44:01,599 --> 00:44:02,319
encryption

1182
00:44:02,319 --> 00:44:04,240
that gives us cpa security in this

1183
00:44:04,240 --> 00:44:06,400
setting and the question is what about

1184
00:44:06,400 --> 00:44:08,640
cca security

1185
00:44:08,640 --> 00:44:12,240
or more generally and and this brings me

1186
00:44:12,240 --> 00:44:12,560
to

1187
00:44:12,560 --> 00:44:14,800
also a statement of our results what we

1188
00:44:14,800 --> 00:44:16,640
show is that any key generation

1189
00:44:16,640 --> 00:44:17,520
algorithm

1190
00:44:17,520 --> 00:44:20,480
that gives rise to a sub-exponentially

1191
00:44:20,480 --> 00:44:22,480
cpa secure encryption scheme

1192
00:44:22,480 --> 00:44:24,960
can be used as is the so the exact same

1193
00:44:24,960 --> 00:44:27,040
key generation and the exact same public

1194
00:44:27,040 --> 00:44:27,680
key

1195
00:44:27,680 --> 00:44:30,400
can be used to obtain also an ncca

1196
00:44:30,400 --> 00:44:32,000
secure encryption scheme

1197
00:44:32,000 --> 00:44:33,920
of course under additional cryptographic

1198
00:44:33,920 --> 00:44:35,760
assumptions

1199
00:44:35,760 --> 00:44:37,760
so in more detail if we make appropriate

1200
00:44:37,760 --> 00:44:39,359
cryptographic assumptions and i'll get

1201
00:44:39,359 --> 00:44:41,359
to the exact assumptions in a minute

1202
00:44:41,359 --> 00:44:44,240
any keygen algorithm that gives rise to

1203
00:44:44,240 --> 00:44:45,440
a sub-exponential

1204
00:44:45,440 --> 00:44:47,760
cpa secure encryption scheme against

1205
00:44:47,760 --> 00:44:49,440
non-uniform adversaries

1206
00:44:49,440 --> 00:44:52,000
we show also gives rise to a cca secure

1207
00:44:52,000 --> 00:44:53,040
encryption scheme

1208
00:44:53,040 --> 00:44:56,160
against uniform adversities and the

1209
00:44:56,160 --> 00:44:57,760
assumptions that we make

1210
00:44:57,760 --> 00:45:00,880
are the existence of hinting prgs

1211
00:45:00,880 --> 00:45:03,040
so this was a primitive that was defined

1212
00:45:03,040 --> 00:45:04,240
and constructed

1213
00:45:04,240 --> 00:45:07,440
in a work of copula and waters in a

1214
00:45:07,440 --> 00:45:09,359
different context they wanted to obtain

1215
00:45:09,359 --> 00:45:11,760
cca encryption from cpa encryption but

1216
00:45:11,760 --> 00:45:12,560
were okay

1217
00:45:12,560 --> 00:45:16,240
modifying the setup um and so they they

1218
00:45:16,240 --> 00:45:17,839
constructed this based on

1219
00:45:17,839 --> 00:45:19,200
the computational diffie-hellman

1220
00:45:19,200 --> 00:45:20,800
assumption and the learning with errors

1221
00:45:20,800 --> 00:45:21,760
assumption

1222
00:45:21,760 --> 00:45:23,839
in addition to this we assume the

1223
00:45:23,839 --> 00:45:25,839
existence of keyless collision resistant

1224
00:45:25,839 --> 00:45:27,119
hash functions

1225
00:45:27,119 --> 00:45:28,960
against uniform adversaries and with

1226
00:45:28,960 --> 00:45:31,359
sub-exponential security

1227
00:45:31,359 --> 00:45:33,119
and so this is just a hash function that

1228
00:45:33,119 --> 00:45:35,359
is not keyed and where it is assumed

1229
00:45:35,359 --> 00:45:37,359
that a uniform adversary cannot find

1230
00:45:37,359 --> 00:45:38,720
collisions

1231
00:45:38,720 --> 00:45:41,760
um candidates for this can be sha or aes

1232
00:45:41,760 --> 00:45:45,280
scaled appropriately um

1233
00:45:45,280 --> 00:45:49,520
so and so so the first result is about

1234
00:45:49,520 --> 00:45:52,640
going from cpa to cca1 security

1235
00:45:52,640 --> 00:45:55,040
we also show that you can go from cpa to

1236
00:45:55,040 --> 00:45:56,640
cca to security

1237
00:45:56,640 --> 00:45:58,480
while preserving the exact same key

1238
00:45:58,480 --> 00:46:00,079
generation algorithm

1239
00:46:00,079 --> 00:46:03,119
uh if you if we additionally rely on

1240
00:46:03,119 --> 00:46:04,160
sub-exponential

1241
00:46:04,160 --> 00:46:07,119
non-interactive cca commitments for

1242
00:46:07,119 --> 00:46:08,640
small tag spaces

1243
00:46:08,640 --> 00:46:11,280
and so this is a lot of words uh but in

1244
00:46:11,280 --> 00:46:12,560
in some more detail

1245
00:46:12,560 --> 00:46:15,040
uh these these types of cca commitments

1246
00:46:15,040 --> 00:46:16,720
that we need to use can be based for

1247
00:46:16,720 --> 00:46:17,680
example

1248
00:46:17,680 --> 00:46:20,400
on uh the existence of time lock puzzles

1249
00:46:20,400 --> 00:46:21,119
or

1250
00:46:21,119 --> 00:46:24,319
on the quantum hardness as well as

1251
00:46:24,319 --> 00:46:25,839
quantum hard runway functions and

1252
00:46:25,839 --> 00:46:27,440
classically hard with quantum easy

1253
00:46:27,440 --> 00:46:30,240
one-way functions

1254
00:46:30,800 --> 00:46:32,960
so now let me say a little bit about a

1255
00:46:32,960 --> 00:46:33,839
prior work

1256
00:46:33,839 --> 00:46:37,200
and what we do that is different so

1257
00:46:37,200 --> 00:46:40,560
prior to this work there have been

1258
00:46:40,560 --> 00:46:42,720
many different constructions of cca

1259
00:46:42,720 --> 00:46:44,240
secured encryption schemes

1260
00:46:44,240 --> 00:46:46,640
and a few templates actually do manage

1261
00:46:46,640 --> 00:46:48,319
to preserve key generation

1262
00:46:48,319 --> 00:46:50,960
for for example the fujisaki okamoto

1263
00:46:50,960 --> 00:46:53,119
transform

1264
00:46:53,119 --> 00:46:55,119
maintains the exact same public key but

1265
00:46:55,119 --> 00:46:57,359
it relies on a random oracle

1266
00:46:57,359 --> 00:46:59,599
and in this work one of our focuses uh

1267
00:46:59,599 --> 00:47:02,240
is on preserving the exact same setup

1268
00:47:02,240 --> 00:47:04,880
and and and uh giving a solution in the

1269
00:47:04,880 --> 00:47:06,240
playing model

1270
00:47:06,240 --> 00:47:09,359
uh the nar young encryption system uh

1271
00:47:09,359 --> 00:47:11,760
does modify the public key actually and

1272
00:47:11,760 --> 00:47:13,680
requires two keys

1273
00:47:13,680 --> 00:47:16,960
and relies on the crs model it can be

1274
00:47:16,960 --> 00:47:19,280
modified to remove one of those keys

1275
00:47:19,280 --> 00:47:21,280
however we also want to eliminate the

1276
00:47:21,280 --> 00:47:22,400
crs

1277
00:47:22,400 --> 00:47:24,880
so our focus in this work is no crs no

1278
00:47:24,880 --> 00:47:26,160
random oracle or set

1279
00:47:26,160 --> 00:47:28,559
up and to make black box use of the

1280
00:47:28,559 --> 00:47:32,480
underlying cpa secure encryption scheme

1281
00:47:32,480 --> 00:47:34,880
um in the remaining one or two minutes i

1282
00:47:34,880 --> 00:47:36,319
have let me just

1283
00:47:36,319 --> 00:47:37,599
give a bird's eye view of our

1284
00:47:37,599 --> 00:47:42,240
construction so like i said an important

1285
00:47:42,240 --> 00:47:44,240
property that we want to preserve is

1286
00:47:44,240 --> 00:47:46,079
that the key generation algorithm should

1287
00:47:46,079 --> 00:47:48,160
simply output the public key of a cpa

1288
00:47:48,160 --> 00:47:49,760
secure encryption scheme

1289
00:47:49,760 --> 00:47:52,000
and nevertheless just by modifying the

1290
00:47:52,000 --> 00:47:53,920
encryption and decryption algorithms

1291
00:47:53,920 --> 00:47:55,920
we should be able to get cca security

1292
00:47:55,920 --> 00:47:56,960
instead

1293
00:47:56,960 --> 00:47:59,839
uh so the encryption algorithm outputs

1294
00:47:59,839 --> 00:48:00,720
uh

1295
00:48:00,720 --> 00:48:03,680
sorry samples a random prg seed and

1296
00:48:03,680 --> 00:48:05,599
outputs the result of this prg let's

1297
00:48:05,599 --> 00:48:06,319
call it

1298
00:48:06,319 --> 00:48:09,760
z zero xor with the message m uh that

1299
00:48:09,760 --> 00:48:10,240
that

1300
00:48:10,240 --> 00:48:12,480
uh we want to encrypt i'm sorry this

1301
00:48:12,480 --> 00:48:13,839
should have been a small

1302
00:48:13,839 --> 00:48:17,200
m instead of a capital m and for every

1303
00:48:17,200 --> 00:48:18,079
index i

1304
00:48:18,079 --> 00:48:20,640
that is in this in n where n is the size

1305
00:48:20,640 --> 00:48:22,240
of the prg seed

1306
00:48:22,240 --> 00:48:25,119
we we construct special commitments to

1307
00:48:25,119 --> 00:48:27,119
every bit of the seed

1308
00:48:27,119 --> 00:48:29,119
and encrypt the opening of these

1309
00:48:29,119 --> 00:48:30,240
commitments

1310
00:48:30,240 --> 00:48:32,800
via the cpa secure encryption scheme and

1311
00:48:32,800 --> 00:48:34,720
via a different statistically binding

1312
00:48:34,720 --> 00:48:36,240
commitment

1313
00:48:36,240 --> 00:48:39,119
the reason to do this is that uh

1314
00:48:39,119 --> 00:48:40,559
somewhat similar to

1315
00:48:40,559 --> 00:48:43,040
the nar young template and which which

1316
00:48:43,040 --> 00:48:44,160
has been used in many other

1317
00:48:44,160 --> 00:48:46,240
constructions of cca security

1318
00:48:46,240 --> 00:48:48,559
and also a template developed more

1319
00:48:48,559 --> 00:48:50,640
recently in coppola waters

1320
00:48:50,640 --> 00:48:54,720
and in um um

1321
00:48:54,960 --> 00:48:57,359
and subsequent works we want that there

1322
00:48:57,359 --> 00:48:58,240
should be

1323
00:48:58,240 --> 00:49:00,960
two ways to open any uh given cipher

1324
00:49:00,960 --> 00:49:01,599
text

1325
00:49:01,599 --> 00:49:03,520
one is by decrypting using the

1326
00:49:03,520 --> 00:49:04,800
encryption secret key

1327
00:49:04,800 --> 00:49:07,119
and the other in our case because we do

1328
00:49:07,119 --> 00:49:09,040
not want to add up a different public

1329
00:49:09,040 --> 00:49:10,880
key the other is going to be

1330
00:49:10,880 --> 00:49:12,559
to just brute force break the

1331
00:49:12,559 --> 00:49:15,280
statistically binding commitment

1332
00:49:15,280 --> 00:49:17,119
because we need to brute force break the

1333
00:49:17,119 --> 00:49:18,880
statistically binding commitment in our

1334
00:49:18,880 --> 00:49:19,920
proof

1335
00:49:19,920 --> 00:49:21,240
this is where the reliance on

1336
00:49:21,240 --> 00:49:23,839
sub-exponential cpa security of the

1337
00:49:23,839 --> 00:49:26,800
encryption scheme comes from

1338
00:49:26,800 --> 00:49:28,800
the invariant that we want to maintain

1339
00:49:28,800 --> 00:49:31,599
is that decrypting the first cipher text

1340
00:49:31,599 --> 00:49:33,119
or brute force breaking the second

1341
00:49:33,119 --> 00:49:35,119
commitment should both lead to

1342
00:49:35,119 --> 00:49:36,079
recovering

1343
00:49:36,079 --> 00:49:38,880
the same seed si which would mean that

1344
00:49:38,880 --> 00:49:40,240
we would recover the same z

1345
00:49:40,240 --> 00:49:42,960
zero by computing the prg on this seed

1346
00:49:42,960 --> 00:49:43,760
which would mean

1347
00:49:43,760 --> 00:49:45,359
in turn that we would recover the same

1348
00:49:45,359 --> 00:49:47,760
message m

1349
00:49:47,760 --> 00:49:50,079
um and the decryption algorithm is

1350
00:49:50,079 --> 00:49:52,000
simple it's just going to decrypt

1351
00:49:52,000 --> 00:49:54,319
uh the opening y i use it to obtain a

1352
00:49:54,319 --> 00:49:56,319
candidate csi

1353
00:49:56,319 --> 00:49:58,400
you perform a few checks if all those

1354
00:49:58,400 --> 00:49:59,440
checks pass

1355
00:49:59,440 --> 00:50:01,680
use that to recover the message m like i

1356
00:50:01,680 --> 00:50:03,040
just said

1357
00:50:03,040 --> 00:50:04,480
so that's going to be roughly our

1358
00:50:04,480 --> 00:50:06,160
construction um

1359
00:50:06,160 --> 00:50:08,880
and note again here that we did not need

1360
00:50:08,880 --> 00:50:11,119
to modify the public key beyond

1361
00:50:11,119 --> 00:50:13,280
the public key for the underlying cpa

1362
00:50:13,280 --> 00:50:15,599
scheme

1363
00:50:17,040 --> 00:50:21,119
in cca2 we just have on my cheetah

1364
00:50:21,119 --> 00:50:24,079
please try to wrap up a bit yes this is

1365
00:50:24,079 --> 00:50:25,440
just my

1366
00:50:25,440 --> 00:50:27,200
second to last slide so i'll wrap up in

1367
00:50:27,200 --> 00:50:29,280
less than a minute um

1368
00:50:29,280 --> 00:50:32,480
so well already overtime

1369
00:50:32,480 --> 00:50:34,720
oh sorry about that okay so so let me

1370
00:50:34,720 --> 00:50:36,000
just wrap up then

1371
00:50:36,000 --> 00:50:38,720
uh cca2 we we have a minor difference

1372
00:50:38,720 --> 00:50:40,720
the commitment is a little bit different

1373
00:50:40,720 --> 00:50:43,680
and in summary uh we show um i've

1374
00:50:43,680 --> 00:50:44,559
already said

1375
00:50:44,559 --> 00:50:46,000
stated the theorem statement so let me

1376
00:50:46,000 --> 00:50:48,160
not say that again let me just point out

1377
00:50:48,160 --> 00:50:49,280
uh to conclude one

1378
00:50:49,280 --> 00:50:52,079
interesting open uh direction that our

1379
00:50:52,079 --> 00:50:53,040
work points to

1380
00:50:53,040 --> 00:50:54,880
which is can you take the setup or key

1381
00:50:54,880 --> 00:50:56,800
generation algorithm for one scheme

1382
00:50:56,800 --> 00:50:58,480
and use it to implement a completely

1383
00:50:58,480 --> 00:50:59,920
different scheme so

1384
00:50:59,920 --> 00:51:01,839
can we take the key generation algorithm

1385
00:51:01,839 --> 00:51:03,440
for a public key encryption scheme

1386
00:51:03,440 --> 00:51:05,359
and use it to implement as is a digital

1387
00:51:05,359 --> 00:51:06,800
signature scheme instead

1388
00:51:06,800 --> 00:51:08,319
without having to do any additional

1389
00:51:08,319 --> 00:51:10,319
setup

1390
00:51:10,319 --> 00:51:12,079
this would be an interesting question to

1391
00:51:12,079 --> 00:51:13,680
consider not just for signatures and

1392
00:51:13,680 --> 00:51:16,880
publicly encryption great question

1393
00:51:16,880 --> 00:51:20,839
thanks thank you for the talk

1394
00:51:20,839 --> 00:51:23,839
thanks

1395
00:51:32,640 --> 00:51:35,839
no no immediate questions has a question

1396
00:51:35,839 --> 00:51:38,079
maybe what do you want to

1397
00:51:38,079 --> 00:51:40,000
motivate a question on the chat so do

1398
00:51:40,000 --> 00:51:42,000
you want it do you want to

1399
00:51:42,000 --> 00:51:44,640
give it to yourself

1400
00:51:46,480 --> 00:51:49,920
or to repeat that question or what i can

1401
00:51:49,920 --> 00:51:50,240
say

1402
00:51:50,240 --> 00:51:53,280
that uh young is not is not in the crs

1403
00:51:53,280 --> 00:51:54,319
model

1404
00:51:54,319 --> 00:51:56,480
the crs is an abstraction and it's part

1405
00:51:56,480 --> 00:51:58,319
of the public key

1406
00:51:58,319 --> 00:52:01,680
right uh absolutely yes uh this is true

1407
00:52:01,680 --> 00:52:04,559
um and in in our case we don't want to

1408
00:52:04,559 --> 00:52:06,079
add anything to the public key so

1409
00:52:06,079 --> 00:52:08,000
including the crs foreign we just want

1410
00:52:08,000 --> 00:52:08,960
to have the

1411
00:52:08,960 --> 00:52:11,280
exact same public key as any general cpa

1412
00:52:11,280 --> 00:52:12,880
secured encryption scheme so

1413
00:52:12,880 --> 00:52:14,319
uh the motivation is a little bit

1414
00:52:14,319 --> 00:52:16,000
different i'm sorry if i was not very

1415
00:52:16,000 --> 00:52:17,119
clear in the way i

1416
00:52:17,119 --> 00:52:19,359
said yeah you said you said now young is

1417
00:52:19,359 --> 00:52:21,440
this in the crs model no it is in the

1418
00:52:21,440 --> 00:52:23,280
public key model

1419
00:52:23,280 --> 00:52:25,040
i mean the desire to do it in a

1420
00:52:25,040 --> 00:52:27,520
different way is fine but

1421
00:52:27,520 --> 00:52:29,599
you know you have to be truthful about

1422
00:52:29,599 --> 00:52:32,319
our model

1423
00:52:36,400 --> 00:52:38,480
okay thanks moji i think it has been

1424
00:52:38,480 --> 00:52:39,680
settled then

1425
00:52:39,680 --> 00:52:42,240
it's clear to everyone that it was in

1426
00:52:42,240 --> 00:52:42,960
the

1427
00:52:42,960 --> 00:52:46,079
public key model all right so i think in

1428
00:52:46,079 --> 00:52:47,119
the interest of time we

1429
00:52:47,119 --> 00:52:49,280
quickly have to move on to the final

1430
00:52:49,280 --> 00:52:50,880
talk of the session and georges will

1431
00:52:50,880 --> 00:52:52,559
announce

1432
00:52:52,559 --> 00:52:54,960
yeah so next we have a cryptographic

1433
00:52:54,960 --> 00:52:56,000
surround generator

1434
00:52:56,000 --> 00:52:57,760
and generators can make cryptosystem

1435
00:52:57,760 --> 00:52:59,040
problematic and

1436
00:52:59,040 --> 00:53:02,800
cause is gonna give the talk

1437
00:53:03,040 --> 00:53:06,319
okay uh can you hear me yeah

1438
00:53:06,319 --> 00:53:08,640
okay

1439
00:53:11,520 --> 00:53:14,720
okay so i'm coaching leader from

1440
00:53:14,720 --> 00:53:18,079
kyushu university and aisd so uh

1441
00:53:18,079 --> 00:53:20,880
actually this is midnight in my time

1442
00:53:20,880 --> 00:53:23,760
zone this is my first time to give a

1443
00:53:23,760 --> 00:53:26,880
talk even after the day changes okay

1444
00:53:26,880 --> 00:53:28,160
anyway i started

1445
00:53:28,160 --> 00:53:30,640
presentation and this is the summary of

1446
00:53:30,640 --> 00:53:31,359
my talks

1447
00:53:31,359 --> 00:53:34,640
this actually the my result is that this

1448
00:53:34,640 --> 00:53:35,839
picture is not

1449
00:53:35,839 --> 00:53:39,520
true so i mean that so when we

1450
00:53:39,520 --> 00:53:42,079
have some cryptographic scheme with some

1451
00:53:42,079 --> 00:53:44,079
good property like the computational

1452
00:53:44,079 --> 00:53:46,160
security or correctness

1453
00:53:46,160 --> 00:53:50,480
and so this this such a

1454
00:53:50,480 --> 00:53:53,200
such a property is expected to be

1455
00:53:53,200 --> 00:53:54,000
preserved

1456
00:53:54,000 --> 00:53:57,760
if we use cryptographically secure prg

1457
00:53:57,760 --> 00:54:01,359
but actually this is not always true

1458
00:54:01,359 --> 00:54:04,400
that's my main result and actually

1459
00:54:04,400 --> 00:54:07,760
there is only a few

1460
00:54:07,760 --> 00:54:10,880
research in the literature that concerns

1461
00:54:10,880 --> 00:54:14,000
this behavior and

1462
00:54:14,000 --> 00:54:17,119
i extend them to the case of the

1463
00:54:17,119 --> 00:54:18,720
the marriage party competition and the

1464
00:54:18,720 --> 00:54:22,400
correctness of the public key encryption

1465
00:54:22,400 --> 00:54:25,920
okay for the case of mpc

1466
00:54:25,920 --> 00:54:28,400
here we can only concern the two-party

1467
00:54:28,400 --> 00:54:29,680
computation case

1468
00:54:29,680 --> 00:54:31,599
and this is a rough picture of the

1469
00:54:31,599 --> 00:54:33,280
two-party computation in the seminars

1470
00:54:33,280 --> 00:54:34,160
model

1471
00:54:34,160 --> 00:54:37,440
here we assume that the

1472
00:54:37,440 --> 00:54:40,880
party p1 is a crop is corrupted

1473
00:54:40,880 --> 00:54:44,319
and the important point is that p1

1474
00:54:44,319 --> 00:54:47,359
or uses random number inside

1475
00:54:47,359 --> 00:54:51,598
the inside him or her

1476
00:54:51,760 --> 00:54:54,880
so by comparing this with the ideal case

1477
00:54:54,880 --> 00:54:58,160
where the trusted cell party helps

1478
00:54:58,160 --> 00:55:01,440
there are some additional objects uh

1479
00:55:01,440 --> 00:55:04,960
like this and this should be simulated

1480
00:55:04,960 --> 00:55:06,319
in the security proof

1481
00:55:06,319 --> 00:55:09,440
and the important point is that here it

1482
00:55:09,440 --> 00:55:11,839
includes the random random number inside

1483
00:55:11,839 --> 00:55:14,319
the corrupted party

1484
00:55:14,319 --> 00:55:17,920
when we use the p and when the this

1485
00:55:17,920 --> 00:55:20,160
pro and such a protocol is implemented

1486
00:55:20,160 --> 00:55:21,520
by using a plg

1487
00:55:21,520 --> 00:55:24,640
inside the corrupted party then

1488
00:55:24,640 --> 00:55:27,839
the this random sieve for the prg

1489
00:55:27,839 --> 00:55:30,640
should also be assimilated by the secret

1490
00:55:30,640 --> 00:55:32,960
proof

1491
00:55:33,119 --> 00:55:35,839
and the important point is that the

1492
00:55:35,839 --> 00:55:38,000
using the plg

1493
00:55:38,000 --> 00:55:40,720
is a kind of modification of the

1494
00:55:40,720 --> 00:55:41,599
protocol

1495
00:55:41,599 --> 00:55:45,040
and the semi honest model is some model

1496
00:55:45,040 --> 00:55:49,200
where it is assumed that the the parties

1497
00:55:49,200 --> 00:55:52,640
exactly follow the original protocol

1498
00:55:52,640 --> 00:55:55,760
so the same model may not

1499
00:55:55,760 --> 00:55:59,119
guarantee the security when the prg is

1500
00:55:59,119 --> 00:56:00,160
used because

1501
00:56:00,160 --> 00:56:02,559
using prg is a kind of modification

1502
00:56:02,559 --> 00:56:04,240
protocol

1503
00:56:04,240 --> 00:56:07,920
and actually i gave some

1504
00:56:07,920 --> 00:56:11,680
example that the security is

1505
00:56:11,680 --> 00:56:15,200
actually lost when the even secure

1506
00:56:15,200 --> 00:56:19,359
plg is used so i skipped the detail of

1507
00:56:19,359 --> 00:56:21,359
the such an account example because it's

1508
00:56:21,359 --> 00:56:22,240
somehow

1509
00:56:22,240 --> 00:56:25,359
complicated but the point is

1510
00:56:25,359 --> 00:56:28,400
that in the case of mpc

1511
00:56:28,400 --> 00:56:31,839
the the london seed in the plg

1512
00:56:31,839 --> 00:56:34,720
is visible for the adversary for in this

1513
00:56:34,720 --> 00:56:35,599
case

1514
00:56:35,599 --> 00:56:38,720
the p1's internal london seed

1515
00:56:38,720 --> 00:56:41,760
is visible for the corrupted party p1

1516
00:56:41,760 --> 00:56:43,920
and this is very different from the

1517
00:56:43,920 --> 00:56:46,240
security notion of the plg

1518
00:56:46,240 --> 00:56:48,960
where the london machine is not visible

1519
00:56:48,960 --> 00:56:50,079
to the

1520
00:56:50,079 --> 00:56:52,319
distinguisher for the prg so this

1521
00:56:52,319 --> 00:56:53,440
difference is

1522
00:56:53,440 --> 00:56:56,079
essential reason of such a kind of

1523
00:56:56,079 --> 00:56:57,520
problem problematic

1524
00:56:57,520 --> 00:57:00,880
behavior i think

1525
00:57:01,520 --> 00:57:04,799
and this is this may be somehow the

1526
00:57:04,799 --> 00:57:08,079
problem in the in practice so

1527
00:57:08,079 --> 00:57:11,359
we consider the case that there is some

1528
00:57:11,359 --> 00:57:14,400
some protocol and some engineer

1529
00:57:14,400 --> 00:57:15,599
implemented this

1530
00:57:15,599 --> 00:57:17,520
by using the cryptographically secure

1531
00:57:17,520 --> 00:57:19,839
plg it's a good way i

1532
00:57:19,839 --> 00:57:23,680
we think it's a good way but

1533
00:57:23,680 --> 00:57:26,079
it may happen that the implemented

1534
00:57:26,079 --> 00:57:27,040
scheme becomes

1535
00:57:27,040 --> 00:57:30,880
insecure and the protocol designer says

1536
00:57:30,880 --> 00:57:31,440
that

1537
00:57:31,440 --> 00:57:33,839
the security proof assumes ideal

1538
00:57:33,839 --> 00:57:35,040
randomness so

1539
00:57:35,040 --> 00:57:37,920
the implementation should use the ideal

1540
00:57:37,920 --> 00:57:38,799
randomness

1541
00:57:38,799 --> 00:57:41,680
otherwise the security proof doesn't

1542
00:57:41,680 --> 00:57:43,440
guarantee the security

1543
00:57:43,440 --> 00:57:46,559
in practice but it's it's very

1544
00:57:46,559 --> 00:57:49,680
um not reasonable because

1545
00:57:49,680 --> 00:57:52,400
implementing the a year randomness is

1546
00:57:52,400 --> 00:57:52,880
not

1547
00:57:52,880 --> 00:57:55,920
not feasible in practice so that's the

1548
00:57:55,920 --> 00:57:58,400
program

1549
00:57:58,720 --> 00:58:01,280
and in order to guarantee the security

1550
00:58:01,280 --> 00:58:03,359
after the use of prg

1551
00:58:03,359 --> 00:58:06,960
i gave some sufficient condition

1552
00:58:06,960 --> 00:58:10,319
to guarantee security but i i'll or

1553
00:58:10,319 --> 00:58:12,960
i again skips the detail but actually

1554
00:58:12,960 --> 00:58:14,079
this is not a very

1555
00:58:14,079 --> 00:58:17,280
uh strong result but

1556
00:58:17,280 --> 00:58:20,480
so this is very first

1557
00:58:20,480 --> 00:58:22,559
result for such a consumption condition

1558
00:58:22,559 --> 00:58:23,680
so we should

1559
00:58:23,680 --> 00:58:27,839
uh improve in in the future work i think

1560
00:58:27,839 --> 00:58:30,079
okay i'll move to the case of the

1561
00:58:30,079 --> 00:58:30,960
correctness

1562
00:58:30,960 --> 00:58:34,640
of the pke before

1563
00:58:34,640 --> 00:58:37,200
considering the correctness i firstly

1564
00:58:37,200 --> 00:58:38,240
consider the

1565
00:58:38,240 --> 00:58:41,440
security where everything is fine

1566
00:58:41,440 --> 00:58:43,520
so this is a picture of the industry

1567
00:58:43,520 --> 00:58:45,359
security of the pke

1568
00:58:45,359 --> 00:58:49,040
and here the plaintext are chosen by the

1569
00:58:49,040 --> 00:58:50,000
ppt

1570
00:58:50,000 --> 00:58:53,200
the ppt algorithms and

1571
00:58:53,200 --> 00:58:54,960
the security is related to the

1572
00:58:54,960 --> 00:58:56,720
probability of this

1573
00:58:56,720 --> 00:59:00,000
event and in this case

1574
00:59:00,000 --> 00:59:03,599
when we consider the changing the

1575
00:59:03,599 --> 00:59:05,520
randomness in the key generation by

1576
00:59:05,520 --> 00:59:06,960
using the prg

1577
00:59:06,960 --> 00:59:09,680
the from the viewpoint of prg the

1578
00:59:09,680 --> 00:59:10,960
everything in the world

1579
00:59:10,960 --> 00:59:14,880
is a ppt algorithm so so this

1580
00:59:14,880 --> 00:59:17,040
the probability of this event doesn't

1581
00:59:17,040 --> 00:59:20,000
change it changes only negligibly

1582
00:59:20,000 --> 00:59:22,720
and the same holds for the the case of

1583
00:59:22,720 --> 00:59:23,040
the

1584
00:59:23,040 --> 00:59:26,000
randomness in encryption so if this is

1585
00:59:26,000 --> 00:59:26,640
the case

1586
00:59:26,640 --> 00:59:30,000
this is the situation for the security

1587
00:59:30,000 --> 00:59:31,680
on the other hand in the case of

1588
00:59:31,680 --> 00:59:34,240
correctness the main difference

1589
00:59:34,240 --> 00:59:37,280
here is that in this case

1590
00:59:37,280 --> 00:59:40,880
the correctness should be satisfied for

1591
00:59:40,880 --> 00:59:43,920
any plaintext so

1592
00:59:43,920 --> 00:59:46,480
this choice of plaintext is very

1593
00:59:46,480 --> 00:59:48,079
arbitrary

1594
00:59:48,079 --> 00:59:52,480
so it may not be it's it's not always

1595
00:59:52,480 --> 00:59:55,040
the efficiently sampled printing is

1596
00:59:55,040 --> 00:59:55,920
that's the

1597
00:59:55,920 --> 00:59:59,680
the main problem here

1598
00:59:59,680 --> 01:00:02,400
in this case when we consider the

1599
01:00:02,400 --> 01:00:03,440
randomizing

1600
01:00:03,440 --> 01:00:07,200
the prg used used in size encryption

1601
01:00:07,200 --> 01:00:10,400
algorithm so in this case

1602
01:00:10,400 --> 01:00:13,520
this picture this the whole picture

1603
01:00:13,520 --> 01:00:17,520
is not a uniform ppt algorithm

1604
01:00:17,520 --> 01:00:20,880
so if we assume that there is a gap

1605
01:00:20,880 --> 01:00:22,000
between the unit

1606
01:00:22,000 --> 01:00:25,200
the security for of the prg against

1607
01:00:25,200 --> 01:00:28,160
uniform modules the distinguisher and

1608
01:00:28,160 --> 01:00:29,920
against the knowing from distinguished

1609
01:00:29,920 --> 01:00:30,559
if we

1610
01:00:30,559 --> 01:00:32,720
have that if you have the some gap

1611
01:00:32,720 --> 01:00:34,079
between these two

1612
01:00:34,079 --> 01:00:37,599
then we have a counter example that the

1613
01:00:37,599 --> 01:00:40,720
when we use the prg

1614
01:00:40,720 --> 01:00:42,960
in for encryption then the correctness

1615
01:00:42,960 --> 01:00:43,760
is lost

1616
01:00:43,760 --> 01:00:46,960
so i i i forgot to say that here

1617
01:00:46,960 --> 01:00:47,839
correctness

1618
01:00:47,839 --> 01:00:50,480
means that correctness with only

1619
01:00:50,480 --> 01:00:52,400
negligible probability so

1620
01:00:52,400 --> 01:00:55,760
that's an important point right so so

1621
01:00:55,760 --> 01:00:57,119
cody maybe you

1622
01:00:57,119 --> 01:01:00,160
can wrap up so you can uh okay one one

1623
01:01:00,160 --> 01:01:01,200
or two questions

1624
01:01:01,200 --> 01:01:04,240
okay i see thanks so the

1625
01:01:04,240 --> 01:01:06,799
in the key generation for the same

1626
01:01:06,799 --> 01:01:08,960
almost the same thing holds for the key

1627
01:01:08,960 --> 01:01:10,720
generation algorithm

1628
01:01:10,720 --> 01:01:15,040
so now i again gave some counter example

1629
01:01:15,040 --> 01:01:17,920
in this situation okay this is very

1630
01:01:17,920 --> 01:01:18,799
minor

1631
01:01:18,799 --> 01:01:21,760
thing so i skipped the things and this

1632
01:01:21,760 --> 01:01:23,040
is the summary of my talks

1633
01:01:23,040 --> 01:01:26,160
thank you for your attention

1634
01:01:26,160 --> 01:01:31,598
thanks kanji so any questions

1635
01:01:33,359 --> 01:01:34,960
okay so i have a question so what did

1636
01:01:34,960 --> 01:01:36,839
you mean before in this theorem that

1637
01:01:36,839 --> 01:01:40,640
randomness should be used uh as it is

1638
01:01:40,640 --> 01:01:43,839
at this here and earlier on

1639
01:01:43,839 --> 01:01:45,920
randomly should be used as is so what do

1640
01:01:45,920 --> 01:01:47,599
you mean by that

1641
01:01:47,599 --> 01:01:50,880
you mean this slide

1642
01:01:50,880 --> 01:01:54,319
you yeah okay okay so

1643
01:01:54,319 --> 01:01:58,319
uh in in some in some security proof for

1644
01:01:58,319 --> 01:01:59,119
the mpc

1645
01:01:59,119 --> 01:02:02,720
protocol uh so so the

1646
01:02:02,720 --> 01:02:05,920
uh the um the versa is viewed

1647
01:02:05,920 --> 01:02:08,400
and should be assimilated and the view

1648
01:02:08,400 --> 01:02:09,039
includes

1649
01:02:09,039 --> 01:02:12,880
randomness and sometimes the simulator

1650
01:02:12,880 --> 01:02:16,480
is constructed in a way that it firstly

1651
01:02:16,480 --> 01:02:20,400
simulates the the messages um

1652
01:02:20,400 --> 01:02:24,160
are received sent from the other people

1653
01:02:24,160 --> 01:02:27,359
and then the simulator

1654
01:02:27,359 --> 01:02:31,119
adjusts the randomness part by using the

1655
01:02:31,119 --> 01:02:34,400
messages this is

1656
01:02:34,400 --> 01:02:37,760
into my um

1657
01:02:37,760 --> 01:02:41,440
this means that uh such a kind of

1658
01:02:41,440 --> 01:02:43,119
adjustment of the randomness

1659
01:02:43,119 --> 01:02:46,160
doesn't happen so simulate

1660
01:02:46,160 --> 01:02:49,280
this simulator firstly chooses the

1661
01:02:49,280 --> 01:02:50,880
simulated randomness

1662
01:02:50,880 --> 01:02:54,400
and then the the simulator outputs the

1663
01:02:54,400 --> 01:02:55,119
other part

1664
01:02:55,119 --> 01:02:58,720
of the the simulated view so this is

1665
01:02:58,720 --> 01:03:02,000
the meaning of this condition

1666
01:03:03,920 --> 01:03:07,680
yep okay so then i guess this is the end

1667
01:03:07,680 --> 01:03:08,799
of this session

1668
01:03:08,799 --> 01:03:12,000
thank you for watching last question and

1669
01:03:12,000 --> 01:03:16,079
um for questions put your own chat

1670
01:03:16,079 --> 01:03:19,760
if you have time uh yeah sounds good

1671
01:03:21,119 --> 01:03:24,640
i'm not reading the chat yeah yeah so

1672
01:03:24,640 --> 01:03:28,000
okay okay i okay if if

1673
01:03:28,000 --> 01:03:32,160
i have no time i um i answered on the

1674
01:03:32,160 --> 01:03:32,559
chat

1675
01:03:32,559 --> 01:03:35,680
later is it okay

1676
01:03:38,160 --> 01:03:40,240
yeah so should we go on or or stop

1677
01:03:40,240 --> 01:03:43,680
position here and take this offline

1678
01:03:43,680 --> 01:03:45,520
we're a bit over time so what what

1679
01:03:45,520 --> 01:03:47,680
should we do okay i see

1680
01:03:47,680 --> 01:03:49,760
it's all right if you eat into the break

1681
01:03:49,760 --> 01:03:51,280
a little bit because this session is

1682
01:03:51,280 --> 01:03:53,200
followed by a break

1683
01:03:53,200 --> 01:03:55,520
okay okay so then mark what do you want

1684
01:03:55,520 --> 01:03:56,559
to make to

1685
01:03:56,559 --> 01:03:59,359
state your question um yeah so my

1686
01:03:59,359 --> 01:04:00,000
question was

1687
01:04:00,000 --> 01:04:01,520
so it seems to be a problem of

1688
01:04:01,520 --> 01:04:03,359
composition between the prg

1689
01:04:03,359 --> 01:04:05,200
and the npc protocol i mean the first

1690
01:04:05,200 --> 01:04:06,640
thing that he presented

1691
01:04:06,640 --> 01:04:08,160
and this composition is always the

1692
01:04:08,160 --> 01:04:10,160
question of who is more to blame like

1693
01:04:10,160 --> 01:04:13,359
is it more like the the prg definition

1694
01:04:13,359 --> 01:04:15,119
is not strong enough to compose

1695
01:04:15,119 --> 01:04:18,000
with the mpc protocol or the npc

1696
01:04:18,000 --> 01:04:19,280
protocol definition is

1697
01:04:19,280 --> 01:04:21,440
is not suitable for for the two things

1698
01:04:21,440 --> 01:04:23,280
to compose securely

1699
01:04:23,280 --> 01:04:25,599
so it seems to me it seemed that you

1700
01:04:25,599 --> 01:04:27,039
kind of adapted both

1701
01:04:27,039 --> 01:04:29,119
both parts but like where do you see

1702
01:04:29,119 --> 01:04:30,319
more more

1703
01:04:30,319 --> 01:04:33,760
the need to adjust things okay thank you

1704
01:04:33,760 --> 01:04:37,920
yeah okay so first the one thing is that

1705
01:04:37,920 --> 01:04:38,559
the same

1706
01:04:38,559 --> 01:04:40,599
the same the security in the

1707
01:04:40,599 --> 01:04:42,559
semi-seminalist model

1708
01:04:42,559 --> 01:04:46,000
is not sufficiently strong to preserve

1709
01:04:46,000 --> 01:04:46,640
security

1710
01:04:46,640 --> 01:04:48,880
on the other hand the security of the

1711
01:04:48,880 --> 01:04:49,680
plg

1712
01:04:49,680 --> 01:04:53,440
is not all not also sufficiently strong

1713
01:04:53,440 --> 01:04:57,280
in order to be used in size prg because

1714
01:04:57,280 --> 01:05:00,880
of because of the visibility or in

1715
01:05:00,880 --> 01:05:02,640
the difference of visibility or

1716
01:05:02,640 --> 01:05:04,000
invisibility of the

1717
01:05:04,000 --> 01:05:07,760
random seed in the security notion

1718
01:05:07,760 --> 01:05:10,720
do i make sense yeah thanks a lot thank

1719
01:05:10,720 --> 01:05:12,879
you

1720
01:05:13,760 --> 01:05:16,880
and then tadaki also has a question

1721
01:05:16,880 --> 01:05:21,200
do you want to set yourself today

1722
01:05:21,200 --> 01:05:23,839
okay this is a bogus question sorry and

1723
01:05:23,839 --> 01:05:24,880
so that's

1724
01:05:24,880 --> 01:05:28,000
for attackers so uh it's quite good so

1725
01:05:28,000 --> 01:05:29,680
uh questions

1726
01:05:29,680 --> 01:05:32,240
if we can succeed in so distinguished

1727
01:05:32,240 --> 01:05:33,039
attack for

1728
01:05:33,039 --> 01:05:37,440
uh asctr or on this 890a

1729
01:05:37,440 --> 01:05:40,079
what will happen to pk i want to know

1730
01:05:40,079 --> 01:05:41,599
because so this is good news

1731
01:05:41,599 --> 01:05:44,480
if so pk is wrong it is this is good

1732
01:05:44,480 --> 01:05:47,119
news for attackers

1733
01:05:47,119 --> 01:05:50,880
yeah i think so so first of all

1734
01:05:50,880 --> 01:05:54,400
so my my the second part of my

1735
01:05:54,400 --> 01:05:57,359
result is about the correctness not

1736
01:05:57,359 --> 01:05:58,799
about the security

1737
01:05:58,799 --> 01:06:01,920
so the okay and the correct

1738
01:06:01,920 --> 01:06:05,119
and it is about the correctness with

1739
01:06:05,119 --> 01:06:07,680
non-zero but negligible decryption error

1740
01:06:07,680 --> 01:06:08,720
probability

1741
01:06:08,720 --> 01:06:12,160
and the my result means that the

1742
01:06:12,160 --> 01:06:15,599
use of prg may increase

1743
01:06:15,599 --> 01:06:18,480
the decryption the decryption error

1744
01:06:18,480 --> 01:06:19,599
probability

1745
01:06:19,599 --> 01:06:22,799
uh in the negligible way

1746
01:06:22,799 --> 01:06:26,400
and actually but actually i actually i

1747
01:06:26,400 --> 01:06:29,680
i haven't found any uh

1748
01:06:29,680 --> 01:06:33,280
example in the in the practical pke in

1749
01:06:33,280 --> 01:06:34,240
the literature

1750
01:06:34,240 --> 01:06:37,760
my encounter example is very artificial

1751
01:06:37,760 --> 01:06:38,720
one so

1752
01:06:38,720 --> 01:06:41,920
i'm i'm not so so i

1753
01:06:41,920 --> 01:06:44,799
haven't found any counter example in the

1754
01:06:44,799 --> 01:06:46,640
real world i mean

1755
01:06:46,640 --> 01:06:51,440
okay thank you thank you

1756
01:06:52,640 --> 01:06:55,039
okay so if if there are no other

1757
01:06:55,039 --> 01:06:55,680
questions

1758
01:06:55,680 --> 01:06:57,920
uh thank you all for for watching this

1759
01:06:57,920 --> 01:06:59,200
session

1760
01:06:59,200 --> 01:07:01,920
and then key i guess okay you're gonna

1761
01:07:01,920 --> 01:07:03,599
say what's coming next right

1762
01:07:03,599 --> 01:07:06,559
uh yes i shall and um we're going into

1763
01:07:06,559 --> 01:07:07,599
an eight minute

1764
01:07:07,599 --> 01:07:10,079
break right

