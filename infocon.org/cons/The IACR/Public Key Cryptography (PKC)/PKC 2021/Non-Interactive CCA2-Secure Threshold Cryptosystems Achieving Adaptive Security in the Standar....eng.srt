1
00:00:00,640 --> 00:00:02,720
hello and thank you for clicking on this

2
00:00:02,720 --> 00:00:03,600
video

3
00:00:03,600 --> 00:00:06,000
where i will try to explain in the next

4
00:00:06,000 --> 00:00:07,919
20 to 25 minutes

5
00:00:07,919 --> 00:00:11,440
how to achieve cca2 security under

6
00:00:11,440 --> 00:00:13,599
adaptive corruptions in the standard

7
00:00:13,599 --> 00:00:15,440
model without pairings

8
00:00:15,440 --> 00:00:17,680
in the case of non-interactive threshold

9
00:00:17,680 --> 00:00:19,279
cryptography

10
00:00:19,279 --> 00:00:21,680
this is a joint work with ben waliber ko

11
00:00:21,680 --> 00:00:22,320
and guinea

12
00:00:22,320 --> 00:00:25,920
toma peters and moti yong and

13
00:00:25,920 --> 00:00:28,160
i will first give you a brief overview

14
00:00:28,160 --> 00:00:29,359
of what

15
00:00:29,359 --> 00:00:32,719
we did then i'll give you more formal

16
00:00:32,719 --> 00:00:33,680
definitions

17
00:00:33,680 --> 00:00:35,920
of threshold cryptography building

18
00:00:35,920 --> 00:00:38,480
blocks and hardness assumptions

19
00:00:38,480 --> 00:00:40,559
and then i'll give you for the first

20
00:00:40,559 --> 00:00:42,079
country construction

21
00:00:42,079 --> 00:00:45,039
based on the dcr assumption the full

22
00:00:45,039 --> 00:00:46,480
construction

23
00:00:46,480 --> 00:00:49,039
and for the second construction uh based

24
00:00:49,039 --> 00:00:50,559
on learning with errors

25
00:00:50,559 --> 00:00:52,079
and which can be seen as a

26
00:00:52,079 --> 00:00:55,199
fractionalized version of dual regif

27
00:00:55,199 --> 00:00:58,000
i'll give you the intuition of how we

28
00:00:58,000 --> 00:00:59,840
did it

29
00:00:59,840 --> 00:01:04,000
because of the time constraint

30
00:01:05,040 --> 00:01:08,640
first what is threshold cryptography so

31
00:01:08,640 --> 00:01:11,439
in this talk we'll be mainly focusing on

32
00:01:11,439 --> 00:01:12,159
threshold

33
00:01:12,159 --> 00:01:14,240
public key encryptions because this is

34
00:01:14,240 --> 00:01:16,000
what we did

35
00:01:16,000 --> 00:01:19,520
so the idea in the case of tpke

36
00:01:19,520 --> 00:01:22,960
threshold public encryption

37
00:01:23,520 --> 00:01:25,759
is to distribute the decryption

38
00:01:25,759 --> 00:01:26,720
algorithm

39
00:01:26,720 --> 00:01:30,320
so the sender of the message does not

40
00:01:30,320 --> 00:01:33,040
change its behavior at all so it has a

41
00:01:33,040 --> 00:01:33,759
message

42
00:01:33,759 --> 00:01:36,560
encrypts it with the public key and

43
00:01:36,560 --> 00:01:38,960
sends it to bob

44
00:01:38,960 --> 00:01:41,360
uh but bob instead of decrypting the

45
00:01:41,360 --> 00:01:42,320
message

46
00:01:42,320 --> 00:01:45,520
itself it sends the message to

47
00:01:45,520 --> 00:01:49,520
n servers which are all going to compute

48
00:01:49,520 --> 00:01:54,000
a partial decryption called mu i am

49
00:01:54,000 --> 00:01:56,320
and this is important they do it alone

50
00:01:56,320 --> 00:01:58,399
they do not cooperate between each other

51
00:01:58,399 --> 00:01:59,200
so

52
00:01:59,200 --> 00:02:01,119
that's where the non-interactive part

53
00:02:01,119 --> 00:02:02,640
comes from

54
00:02:02,640 --> 00:02:06,320
and the combiner that bob has when it is

55
00:02:06,320 --> 00:02:09,679
fed at least k out of n partial

56
00:02:09,679 --> 00:02:10,639
decryptions

57
00:02:10,639 --> 00:02:12,959
is able to recover the message hence the

58
00:02:12,959 --> 00:02:14,480
name threshold

59
00:02:14,480 --> 00:02:18,720
cryptography our goal was to build a

60
00:02:18,720 --> 00:02:20,640
threshold public key encryption scheme

61
00:02:20,640 --> 00:02:22,720
which satisfies

62
00:02:22,720 --> 00:02:25,680
which satisfied four constraints the

63
00:02:25,680 --> 00:02:26,400
first one

64
00:02:26,400 --> 00:02:28,239
is the compactness the size of the

65
00:02:28,239 --> 00:02:30,080
public key and ciphertext

66
00:02:30,080 --> 00:02:32,239
must be independent of the number of

67
00:02:32,239 --> 00:02:33,760
servers

68
00:02:33,760 --> 00:02:37,440
the cca2 security which is very similar

69
00:02:37,440 --> 00:02:38,239
to the

70
00:02:38,239 --> 00:02:42,160
security in non-threshold pk

71
00:02:42,160 --> 00:02:44,800
and it must be satisfied under adaptive

72
00:02:44,800 --> 00:02:45,920
corruptions

73
00:02:45,920 --> 00:02:48,720
where the adversary can obtain any ski

74
00:02:48,720 --> 00:02:50,080
at any time

75
00:02:50,080 --> 00:02:52,000
and this should be done without using

76
00:02:52,000 --> 00:02:53,760
pairings

77
00:02:53,760 --> 00:02:56,959
if we survey what was done in the latest

78
00:02:56,959 --> 00:03:00,800
20 in the previous 20 years

79
00:03:00,800 --> 00:03:03,120
which is when non-interactive threshold

80
00:03:03,120 --> 00:03:06,080
cryptography started to emerge

81
00:03:06,080 --> 00:03:09,360
we see that this was previously not

82
00:03:09,360 --> 00:03:10,720
achieved

83
00:03:10,720 --> 00:03:12,959
except maybe for the construction from

84
00:03:12,959 --> 00:03:14,319
nebulae but young

85
00:03:14,319 --> 00:03:16,959
liberal jung which achieved cca2

86
00:03:16,959 --> 00:03:18,000
security under

87
00:03:18,000 --> 00:03:20,480
adaptive corruptions and also has

88
00:03:20,480 --> 00:03:22,159
compactness

89
00:03:22,159 --> 00:03:24,400
but it uses pairings which is something

90
00:03:24,400 --> 00:03:27,440
we would like to avoid

91
00:03:28,319 --> 00:03:30,840
to give you more insight on our

92
00:03:30,840 --> 00:03:31,970
constructions

93
00:03:31,970 --> 00:03:33,680
[Music]

94
00:03:33,680 --> 00:03:35,280
the ciphertext size of the first

95
00:03:35,280 --> 00:03:37,040
construction is about

96
00:03:37,040 --> 00:03:39,440
three times the size of a communist shop

97
00:03:39,440 --> 00:03:41,360
encryption which is a verifiable

98
00:03:41,360 --> 00:03:45,200
encryption not threshold at all

99
00:03:45,200 --> 00:03:48,480
so that's pretty good but the second

100
00:03:48,480 --> 00:03:49,680
construction

101
00:03:49,680 --> 00:03:51,920
needs the super polynomial modulus to

102
00:03:51,920 --> 00:03:54,640
have its security

103
00:03:54,640 --> 00:03:58,319
and this is less

104
00:03:58,319 --> 00:04:00,080
interesting but it's still worth

105
00:04:00,080 --> 00:04:01,760
mentioning because

106
00:04:01,760 --> 00:04:03,439
the learning with era's assumption is

107
00:04:03,439 --> 00:04:06,239
quantum safe

108
00:04:07,519 --> 00:04:10,720
so a formal definition of

109
00:04:10,720 --> 00:04:13,680
tpke is that it is comprised of five

110
00:04:13,680 --> 00:04:15,040
algorithms

111
00:04:15,040 --> 00:04:18,160
which interact uh the following in the

112
00:04:18,160 --> 00:04:20,238
as in the following diagram

113
00:04:20,238 --> 00:04:23,120
so when we compare this to standard

114
00:04:23,120 --> 00:04:24,880
public key encryption

115
00:04:24,880 --> 00:04:26,880
we notice that the key generation

116
00:04:26,880 --> 00:04:29,280
algorithm takes the threshold

117
00:04:29,280 --> 00:04:33,440
t as input and it generates

118
00:04:33,440 --> 00:04:37,680
l secret keys instead of one

119
00:04:37,680 --> 00:04:39,520
but the interaction with bob is

120
00:04:39,520 --> 00:04:41,120
unchanged

121
00:04:41,120 --> 00:04:42,960
bob gets the public key encrypts the

122
00:04:42,960 --> 00:04:46,320
message returns the cipher text

123
00:04:46,320 --> 00:04:48,639
this is where everything says everything

124
00:04:48,639 --> 00:04:50,880
changes because alice now

125
00:04:50,880 --> 00:04:54,560
forwards the ciphertext to all servers

126
00:04:54,560 --> 00:04:56,960
which are all going to compute a partial

127
00:04:56,960 --> 00:04:58,800
decryption query

128
00:04:58,800 --> 00:05:01,360
except if they are offline or something

129
00:05:01,360 --> 00:05:04,080
happened to them

130
00:05:04,080 --> 00:05:07,199
uh alice is then able to compute

131
00:05:07,199 --> 00:05:10,240
with the partial verification algorithm

132
00:05:10,240 --> 00:05:12,880
whether the partial decryptions are

133
00:05:12,880 --> 00:05:14,800
truthful or not

134
00:05:14,800 --> 00:05:19,120
and when she has enough transfer

135
00:05:19,120 --> 00:05:22,000
decryptions she can compute m prime

136
00:05:22,000 --> 00:05:22,639
which

137
00:05:22,639 --> 00:05:26,240
hopefully will be equal to m

138
00:05:26,240 --> 00:05:28,639
it is compact if public key and

139
00:05:28,639 --> 00:05:29,680
ciphertexts

140
00:05:29,680 --> 00:05:34,479
have a polynomial in lambda size

141
00:05:34,479 --> 00:05:37,280
and it is correct if as long as i have

142
00:05:37,280 --> 00:05:38,080
at least

143
00:05:38,080 --> 00:05:41,440
two partial decryptions then m is equal

144
00:05:41,440 --> 00:05:42,479
to m prime

145
00:05:42,479 --> 00:05:46,080
with non-negligible probability

146
00:05:46,400 --> 00:05:49,680
in this talk i will be ignoring the

147
00:05:49,680 --> 00:05:51,759
partial verification algorithm this is

148
00:05:51,759 --> 00:05:53,919
something that is taken care of in

149
00:05:53,919 --> 00:05:56,880
our full paper

150
00:05:56,960 --> 00:06:00,400
but is it its role is some

151
00:06:00,400 --> 00:06:03,759
somewhat apart and

152
00:06:03,759 --> 00:06:06,479
due to time constraints i won't be able

153
00:06:06,479 --> 00:06:07,440
to explain

154
00:06:07,440 --> 00:06:11,280
in detail this role i can however

155
00:06:11,280 --> 00:06:14,240
explain what is the adaptive in cca2

156
00:06:14,240 --> 00:06:17,280
security for the tpke

157
00:06:17,280 --> 00:06:20,479
the idea is to take the cca2

158
00:06:20,479 --> 00:06:24,639
security game for pke and to adapt it

159
00:06:24,639 --> 00:06:27,759
for threshold publicly encryptions so

160
00:06:27,759 --> 00:06:30,000
instead of having a decryption oracle

161
00:06:30,000 --> 00:06:32,400
the adversary has access to a partial

162
00:06:32,400 --> 00:06:34,000
decryption oracle for

163
00:06:34,000 --> 00:06:37,120
any server the

164
00:06:37,120 --> 00:06:40,080
another difference is that a at the

165
00:06:40,080 --> 00:06:41,120
beginning of the game

166
00:06:41,120 --> 00:06:43,280
chooses the threshold on which the key

167
00:06:43,280 --> 00:06:46,840
generation algorithm is run

168
00:06:46,840 --> 00:06:49,759
and afterwards everything plays

169
00:06:49,759 --> 00:06:53,039
as usual it gets a public key it chooses

170
00:06:53,039 --> 00:06:56,240
two messages one of which is encrypted

171
00:06:56,240 --> 00:06:58,880
and the adversary has to guess which one

172
00:06:58,880 --> 00:07:01,280
was encrypted

173
00:07:01,280 --> 00:07:03,280
it also has the following power the

174
00:07:03,280 --> 00:07:05,840
following uh

175
00:07:05,840 --> 00:07:09,759
advantage it can obtain any secret key

176
00:07:09,759 --> 00:07:12,720
secret key share at any time this is the

177
00:07:12,720 --> 00:07:15,280
adaptive corruption setting

178
00:07:15,280 --> 00:07:17,840
and we also allow the adversary to make

179
00:07:17,840 --> 00:07:19,440
partial decryption queries for the

180
00:07:19,440 --> 00:07:20,560
challenge

181
00:07:20,560 --> 00:07:23,680
of course as long as it does not uh

182
00:07:23,680 --> 00:07:27,280
trivially break the the game

183
00:07:27,280 --> 00:07:30,000
and the definition of the advantage is

184
00:07:30,000 --> 00:07:32,800
pretty standard

185
00:07:33,599 --> 00:07:36,639
from this we move to

186
00:07:36,639 --> 00:07:39,520
the building blocks that were used in

187
00:07:39,520 --> 00:07:40,720
our constructions

188
00:07:40,720 --> 00:07:44,319
the most important one of which being

189
00:07:44,319 --> 00:07:46,560
the linear integer secret sharing at a

190
00:07:46,560 --> 00:07:48,560
very high level the idea is that

191
00:07:48,560 --> 00:07:51,759
you have a secret s which is an integer

192
00:07:51,759 --> 00:07:54,800
and it's shared into n

193
00:07:54,800 --> 00:07:58,080
key shares among n persons

194
00:07:58,080 --> 00:08:02,160
and when k of them are working together

195
00:08:02,160 --> 00:08:05,199
they can recover the secret s and if k

196
00:08:05,199 --> 00:08:07,199
minus one of them are working together

197
00:08:07,199 --> 00:08:10,720
they cannot recover the secret

198
00:08:10,879 --> 00:08:14,479
more formally it is actually the given

199
00:08:14,479 --> 00:08:17,680
of a matrix m parameters d

200
00:08:17,680 --> 00:08:21,199
e and a subjective map psi

201
00:08:21,199 --> 00:08:24,479
from d to the set of servers

202
00:08:24,479 --> 00:08:26,560
such that when i want to share an

203
00:08:26,560 --> 00:08:27,840
integer

204
00:08:27,840 --> 00:08:31,280
i choose random elements

205
00:08:31,280 --> 00:08:35,760
and complete s into a vector of size e

206
00:08:35,760 --> 00:08:38,958
multiply it on the left with m to get

207
00:08:38,958 --> 00:08:40,240
another vector

208
00:08:40,240 --> 00:08:44,159
of size d of length d

209
00:08:44,159 --> 00:08:47,519
and each coordinate of s i give to party

210
00:08:47,519 --> 00:08:48,800
psi of i

211
00:08:48,800 --> 00:08:52,800
thanks to my map psi

212
00:08:52,880 --> 00:08:56,080
this can be very quickly generalized to

213
00:08:56,080 --> 00:08:59,360
the sharing of vector s instead of just

214
00:08:59,360 --> 00:09:01,040
an integer s

215
00:09:01,040 --> 00:09:04,560
and we share it into matrices which have

216
00:09:04,560 --> 00:09:08,160
different size depending on the number

217
00:09:08,160 --> 00:09:08,560
of

218
00:09:08,560 --> 00:09:11,760
row are given by psi to

219
00:09:11,760 --> 00:09:15,839
server i and it has the following nice

220
00:09:15,839 --> 00:09:17,120
property

221
00:09:17,120 --> 00:09:19,600
if i take any subset which has at least

222
00:09:19,600 --> 00:09:20,399
two elements

223
00:09:20,399 --> 00:09:22,880
out of l then there exists a

224
00:09:22,880 --> 00:09:24,640
reconstruction vector

225
00:09:24,640 --> 00:09:27,279
whose coefficients are small so small

226
00:09:27,279 --> 00:09:27,920
that

227
00:09:27,920 --> 00:09:30,959
actually it's minus one zero or one

228
00:09:30,959 --> 00:09:33,680
such that if i multiply the key share on

229
00:09:33,680 --> 00:09:34,720
the left by the

230
00:09:34,720 --> 00:09:38,560
reconstruction vector and some all

231
00:09:38,560 --> 00:09:41,920
vector that i get like that i

232
00:09:41,920 --> 00:09:50,240
find the secret back

233
00:09:50,240 --> 00:09:53,519
uh something important also are the

234
00:09:53,519 --> 00:09:56,080
hardness assumptions used in our

235
00:09:56,080 --> 00:09:57,839
constructions

236
00:09:57,839 --> 00:09:59,839
for the first one we need the decision

237
00:09:59,839 --> 00:10:02,560
composite residuosity assumption

238
00:10:02,560 --> 00:10:05,839
it states that uh

239
00:10:05,839 --> 00:10:09,200
and to the zeta f residue

240
00:10:09,200 --> 00:10:13,600
if i take one uh uniformly

241
00:10:13,600 --> 00:10:16,720
mod n to the zeta plus one it's actually

242
00:10:16,720 --> 00:10:17,519
computation

243
00:10:17,519 --> 00:10:20,640
computationally indistinguishable from

244
00:10:20,640 --> 00:10:22,680
the uniform distribution over

245
00:10:22,680 --> 00:10:23,920
[Music]

246
00:10:23,920 --> 00:10:25,920
the invertible elements of zn to the

247
00:10:25,920 --> 00:10:28,719
theta plus one

248
00:10:28,880 --> 00:10:30,640
the second problem the learning with

249
00:10:30,640 --> 00:10:32,000
errors problem is

250
00:10:32,000 --> 00:10:35,760
used in both constructions and it states

251
00:10:35,760 --> 00:10:37,760
that if i take a random matrix

252
00:10:37,760 --> 00:10:40,880
a a random vector s

253
00:10:40,880 --> 00:10:45,120
and a small random error vector e

254
00:10:45,120 --> 00:10:48,160
the distribution of a a s plus e

255
00:10:48,160 --> 00:10:51,279
is indistinguishable from a b where b

256
00:10:51,279 --> 00:10:54,720
is just a uniform vector

257
00:10:55,120 --> 00:10:58,399
so with all of that we can now

258
00:10:58,399 --> 00:11:01,920
move to the constructions

259
00:11:01,920 --> 00:11:06,079
and we see yeah let me first give you a

260
00:11:06,079 --> 00:11:07,600
bit of intuition on

261
00:11:07,600 --> 00:11:10,560
our first construction so it's a bearing

262
00:11:10,560 --> 00:11:13,040
free adaptation of an already existing

263
00:11:13,040 --> 00:11:16,880
scheme and our idea

264
00:11:16,880 --> 00:11:20,399
is to i mean our id is similar to the

265
00:11:20,399 --> 00:11:22,720
one used in the comedy shop verifiable

266
00:11:22,720 --> 00:11:23,920
encryption scheme

267
00:11:23,920 --> 00:11:26,320
where they exploit the entropy of shared

268
00:11:26,320 --> 00:11:28,000
secret keys

269
00:11:28,000 --> 00:11:33,519
and build a dcr-based hashproof system

270
00:11:33,760 --> 00:11:37,040
to get the security we will have

271
00:11:37,040 --> 00:11:38,480
ciphertexts

272
00:11:38,480 --> 00:11:40,720
comprised of two elements and we need to

273
00:11:40,720 --> 00:11:42,240
prove that the first one

274
00:11:42,240 --> 00:11:45,680
is an end to the zeta for residue in zm

275
00:11:45,680 --> 00:11:47,120
to the zeta plus one

276
00:11:47,120 --> 00:11:50,160
star and this

277
00:11:50,160 --> 00:11:53,600
proof system is an easy instantiated

278
00:11:53,600 --> 00:11:56,000
from the fiat xiaomi transform and

279
00:11:56,000 --> 00:11:58,880
correlation interactable hash functions

280
00:11:58,880 --> 00:12:00,800
and this is where the learning with

281
00:12:00,800 --> 00:12:02,480
errors assumption

282
00:12:02,480 --> 00:12:05,519
comes into play because

283
00:12:05,519 --> 00:12:07,279
the correlation interactable hash

284
00:12:07,279 --> 00:12:09,440
functions are built from

285
00:12:09,440 --> 00:12:12,399
learning weavers

286
00:12:12,800 --> 00:12:16,079
however the sigma protocol used and

287
00:12:16,079 --> 00:12:19,440
turned from fiat chamier

288
00:12:19,440 --> 00:12:23,519
into a music is something we provide

289
00:12:23,519 --> 00:12:24,240
ourselves

290
00:12:24,240 --> 00:12:27,279
it's a new construction for an argument

291
00:12:27,279 --> 00:12:27,680
which

292
00:12:27,680 --> 00:12:30,320
satisfies the one-time simulations on

293
00:12:30,320 --> 00:12:31,360
property

294
00:12:31,360 --> 00:12:34,959
uh which i will come back to later

295
00:12:35,040 --> 00:12:38,000
so to give you the full construction the

296
00:12:38,000 --> 00:12:39,360
idea is to

297
00:12:39,360 --> 00:12:42,480
set an rsa modulus with pq

298
00:12:42,480 --> 00:12:44,800
save primes and to generate a common

299
00:12:44,800 --> 00:12:46,480
reference string

300
00:12:46,480 --> 00:12:49,600
for the music for

301
00:12:49,600 --> 00:12:52,959
the language of n to the z f residue

302
00:12:52,959 --> 00:12:56,560
mod n to the zeta plus one

303
00:12:57,920 --> 00:13:00,639
next we set the public key which is the

304
00:13:00,639 --> 00:13:01,360
couple

305
00:13:01,360 --> 00:13:04,959
j0 h

306
00:13:04,959 --> 00:13:07,680
and the secret is the small x which is

307
00:13:07,680 --> 00:13:08,880
used to build

308
00:13:08,880 --> 00:13:12,000
h so now that we have a secret

309
00:13:12,000 --> 00:13:15,519
we simply share it using the list

310
00:13:15,519 --> 00:13:19,600
as we have learned to do

311
00:13:19,600 --> 00:13:23,279
and we are done we can output the public

312
00:13:23,279 --> 00:13:23,839
key

313
00:13:23,839 --> 00:13:27,519
and the key shares so to encrypt

314
00:13:27,519 --> 00:13:30,959
one can simply sample small r

315
00:13:30,959 --> 00:13:34,240
compute j0 to the two and that are r but

316
00:13:34,240 --> 00:13:36,959
enter the zeta plus 1 and use the

317
00:13:36,959 --> 00:13:37,600
message

318
00:13:37,600 --> 00:13:39,600
in the second site and second part of

319
00:13:39,600 --> 00:13:41,839
the ciphertext

320
00:13:41,839 --> 00:13:43,760
for the decryption it's interesting to

321
00:13:43,760 --> 00:13:45,040
notice that

322
00:13:45,040 --> 00:13:48,160
c0 to the 2x is actually h

323
00:13:48,160 --> 00:13:51,279
to the r and then

324
00:13:51,279 --> 00:13:55,279
it can be removed from the c1 from c1

325
00:13:55,279 --> 00:13:58,560
and we can recover the message but first

326
00:13:58,560 --> 00:14:01,519
we are encrypting so we compute the

327
00:14:01,519 --> 00:14:04,160
proof that we did the truthful

328
00:14:04,160 --> 00:14:07,279
encryption by proving that c0 is indeed

329
00:14:07,279 --> 00:14:07,600
an

330
00:14:07,600 --> 00:14:10,000
f to the zeta for residue mod n to the

331
00:14:10,000 --> 00:14:11,760
zeta plus one

332
00:14:11,760 --> 00:14:14,839
and we return the ciphertext and the

333
00:14:14,839 --> 00:14:16,959
proof

334
00:14:16,959 --> 00:14:19,279
to compute a partial decryption we first

335
00:14:19,279 --> 00:14:21,920
check the proof

336
00:14:21,920 --> 00:14:24,880
if the proof is accepted then we compute

337
00:14:24,880 --> 00:14:25,600
c0

338
00:14:25,600 --> 00:14:28,639
to d2 times

339
00:14:28,639 --> 00:14:33,120
every coordinates that were given to us

340
00:14:33,120 --> 00:14:36,880
by the list and we returned the set of

341
00:14:36,880 --> 00:14:39,839
everything of every partial encryption

342
00:14:39,839 --> 00:14:42,240
we did

343
00:14:42,959 --> 00:14:46,160
finally when we have enough of

344
00:14:46,160 --> 00:14:49,519
these partial decryptions we can

345
00:14:49,519 --> 00:14:52,639
find a reconstruction vector

346
00:14:52,639 --> 00:14:56,480
and we can compute this big product

347
00:14:56,880 --> 00:14:59,360
this product is actually turned into a

348
00:14:59,360 --> 00:15:00,079
sum

349
00:15:00,079 --> 00:15:03,360
when you put it in the exponent

350
00:15:03,360 --> 00:15:06,480
and when you do so it's actually c0

351
00:15:06,480 --> 00:15:09,519
times the sum of the

352
00:15:09,519 --> 00:15:11,920
reconstruction vector times the

353
00:15:11,920 --> 00:15:13,040
coordinates

354
00:15:13,040 --> 00:15:17,120
of time some coordinates are sj

355
00:15:17,120 --> 00:15:20,480
of the key shares so in the end

356
00:15:20,480 --> 00:15:24,480
you should get c0 to 2x

357
00:15:24,480 --> 00:15:27,839
from this you compute c one hat which is

358
00:15:27,839 --> 00:15:28,800
c one over

359
00:15:28,800 --> 00:15:31,360
mu hat mod n to the zeta plus one and

360
00:15:31,360 --> 00:15:32,560
you actually remove

361
00:15:32,560 --> 00:15:35,759
the h to the r part so normally if

362
00:15:35,759 --> 00:15:38,480
everything is done uh correctly see this

363
00:15:38,480 --> 00:15:39,120
is now

364
00:15:39,120 --> 00:15:43,600
just one plus n to the message

365
00:15:43,600 --> 00:15:46,880
you check that it is the case by looking

366
00:15:46,880 --> 00:15:48,399
at this

367
00:15:48,399 --> 00:15:49,839
and if everything is all right you can

368
00:15:49,839 --> 00:15:52,720
recover the message

369
00:15:52,959 --> 00:15:56,160
and this is it for the construction it's

370
00:15:56,160 --> 00:15:59,199
of course correct and compact

371
00:15:59,199 --> 00:16:02,480
because if we take a look at the public

372
00:16:02,480 --> 00:16:03,040
key

373
00:16:03,040 --> 00:16:04,639
it's actually independent from the

374
00:16:04,639 --> 00:16:06,480
number of servers

375
00:16:06,480 --> 00:16:08,880
and an encryption is also independent

376
00:16:08,880 --> 00:16:12,320
from the number of servers

377
00:16:12,880 --> 00:16:16,000
it's then cca2 secure under adaptive

378
00:16:16,000 --> 00:16:16,880
corruptions

379
00:16:16,880 --> 00:16:19,360
under the assumptions that the dcr

380
00:16:19,360 --> 00:16:20,079
assumption

381
00:16:20,079 --> 00:16:23,040
holds and the music we use is one time

382
00:16:23,040 --> 00:16:26,000
simulation sound

383
00:16:26,399 --> 00:16:29,040
it's one time simulation sound this

384
00:16:29,040 --> 00:16:29,680
means that

385
00:16:29,680 --> 00:16:33,040
if an adversary sees one simulated proof

386
00:16:33,040 --> 00:16:36,240
for any statement of its choice it does

387
00:16:36,240 --> 00:16:37,279
not help

388
00:16:37,279 --> 00:16:40,959
the adversary to forge a non-trivial

389
00:16:40,959 --> 00:16:44,079
uh a proof for a non-trivial false

390
00:16:44,079 --> 00:16:45,680
statement

391
00:16:45,680 --> 00:16:50,079
so as i've said we give such

392
00:16:50,079 --> 00:16:53,600
such argument system under the dcr

393
00:16:53,600 --> 00:16:56,240
and learning withers assumptions it's

394
00:16:56,240 --> 00:16:56,959
actually an

395
00:16:56,959 --> 00:16:59,759
improvement of an unbounded simulation

396
00:16:59,759 --> 00:17:01,600
sound construction

397
00:17:01,600 --> 00:17:04,959
which was already existing

398
00:17:04,959 --> 00:17:07,199
but we get shorter public parameters

399
00:17:07,199 --> 00:17:09,039
because instead of unbounded

400
00:17:09,039 --> 00:17:11,280
simulation soundness we only need one

401
00:17:11,280 --> 00:17:14,720
time simulation soundness

402
00:17:14,959 --> 00:17:17,599
finally the proof is inspired by a

403
00:17:17,599 --> 00:17:19,520
previous work

404
00:17:19,520 --> 00:17:22,720
which concerns distributed pseudorandom

405
00:17:22,720 --> 00:17:23,919
functions

406
00:17:23,919 --> 00:17:26,319
and it exploits the fact that secret

407
00:17:26,319 --> 00:17:28,480
keys still have a lot of entropies even

408
00:17:28,480 --> 00:17:28,960
after

409
00:17:28,960 --> 00:17:31,840
every queries done by the adversary and

410
00:17:31,840 --> 00:17:34,640
it uses the properties of elise

411
00:17:34,640 --> 00:17:36,960
because i did not give you all

412
00:17:36,960 --> 00:17:37,760
properties of

413
00:17:37,760 --> 00:17:40,480
release but only the one useful for the

414
00:17:40,480 --> 00:17:42,720
constructions

415
00:17:42,720 --> 00:17:45,760
to give you an idea of the proof the dcr

416
00:17:45,760 --> 00:17:48,320
assumption allows you to move to a game

417
00:17:48,320 --> 00:17:51,440
where the challenge encryption is made

418
00:17:51,440 --> 00:17:54,880
using the secret key so the message

419
00:17:54,880 --> 00:17:59,840
is now hidden by by x modern to the zeta

420
00:17:59,840 --> 00:18:02,640
however you know that

421
00:18:02,640 --> 00:18:06,240
if you condition on a's view x

422
00:18:06,240 --> 00:18:09,520
is gaussian in some shift of p

423
00:18:09,520 --> 00:18:12,559
prime q prime times z and thanks to a

424
00:18:12,559 --> 00:18:13,120
lemma

425
00:18:13,120 --> 00:18:17,200
from gentry by cut by kutanatan

426
00:18:17,200 --> 00:18:20,400
of 2008 the distribution of x mod

427
00:18:20,400 --> 00:18:21,760
entered zeta is

428
00:18:21,760 --> 00:18:24,880
statistically close to uniform so it's

429
00:18:24,880 --> 00:18:25,360
hard

430
00:18:25,360 --> 00:18:27,760
to it's impossible to retrieve which

431
00:18:27,760 --> 00:18:29,039
message was encrypted

432
00:18:29,039 --> 00:18:30,640
by looking at the side of the challenge

433
00:18:30,640 --> 00:18:33,280
cipher text

434
00:18:33,280 --> 00:18:36,000
finally to give you a quick idea on how

435
00:18:36,000 --> 00:18:38,559
we build a

436
00:18:38,559 --> 00:18:40,840
threshold publicly encryption from jubal

437
00:18:40,840 --> 00:18:43,840
rgf

438
00:18:44,240 --> 00:18:46,080
we do the for we we have the following

439
00:18:46,080 --> 00:18:47,280
remarks first

440
00:18:47,280 --> 00:18:49,280
uh if you remember how jewelry gets is

441
00:18:49,280 --> 00:18:50,480
made

442
00:18:50,480 --> 00:18:53,039
you take a random the secret key is some

443
00:18:53,039 --> 00:18:54,799
random matrix

444
00:18:54,799 --> 00:18:57,840
and the public key is two matrices a

445
00:18:57,840 --> 00:19:01,120
and u which is a times r and even

446
00:19:01,120 --> 00:19:04,400
conditionally on una the

447
00:19:04,400 --> 00:19:06,880
secret key r still has a lot of entropy

448
00:19:06,880 --> 00:19:07,520
which is

449
00:19:07,520 --> 00:19:10,640
important for us uh

450
00:19:10,640 --> 00:19:13,440
as you may have guessed we share each

451
00:19:13,440 --> 00:19:14,960
column of the secret key

452
00:19:14,960 --> 00:19:18,240
using a list scheme

453
00:19:18,320 --> 00:19:20,960
then when someone wants to encrypt it

454
00:19:20,960 --> 00:19:21,679
encrypts

455
00:19:21,679 --> 00:19:25,280
as individual regif fr

456
00:19:25,280 --> 00:19:28,320
non threshold case

457
00:19:28,320 --> 00:19:31,200
however when you decrypt to compute

458
00:19:31,200 --> 00:19:33,120
partial decryption you do not have the

459
00:19:33,120 --> 00:19:34,160
full

460
00:19:34,160 --> 00:19:37,360
secret but only a share of it so you

461
00:19:37,360 --> 00:19:39,520
still use your secret as you would use

462
00:19:39,520 --> 00:19:41,600
the secret key

463
00:19:41,600 --> 00:19:43,280
but at the end of your partial

464
00:19:43,280 --> 00:19:45,120
decryption you still

465
00:19:45,120 --> 00:19:47,280
you need to add some noise to do some

466
00:19:47,280 --> 00:19:48,640
noise flooding

467
00:19:48,640 --> 00:19:51,600
uh to avoid leaking too much information

468
00:19:51,600 --> 00:19:53,679
on your secret key share

469
00:19:53,679 --> 00:19:56,480
and this is where the super polynomial

470
00:19:56,480 --> 00:19:58,720
modulus comes from

471
00:19:58,720 --> 00:20:01,840
once more our security proof follows

472
00:20:01,840 --> 00:20:06,559
from follows ids from the distributed

473
00:20:06,559 --> 00:20:08,000
prf's

474
00:20:08,000 --> 00:20:11,679
paper and

475
00:20:11,679 --> 00:20:15,440
this is almost we are almost done except

476
00:20:15,440 --> 00:20:18,799
that we need to get

477
00:20:18,799 --> 00:20:21,200
ncca to security which is something that

478
00:20:21,200 --> 00:20:23,840
your regex does not satisfy

479
00:20:23,840 --> 00:20:26,960
uh even in the non-threshold case so we

480
00:20:26,960 --> 00:20:29,520
add the simulation sound argument that

481
00:20:29,520 --> 00:20:30,880
the ciphertext are

482
00:20:30,880 --> 00:20:33,360
well formed this means that they are the

483
00:20:33,360 --> 00:20:35,039
form of the following form

484
00:20:35,039 --> 00:20:38,080
and this is some argument system which

485
00:20:38,080 --> 00:20:39,679
already exists

486
00:20:39,679 --> 00:20:44,640
and we bid on the top of the top of it

487
00:20:45,039 --> 00:20:46,960
so to quickly conclude on this

488
00:20:46,960 --> 00:20:48,960
construction we still have an open

489
00:20:48,960 --> 00:20:50,559
problem which is

490
00:20:50,559 --> 00:20:53,520
how do we avoid noise flooding and how

491
00:20:53,520 --> 00:20:55,600
do we get

492
00:20:55,600 --> 00:20:58,559
to use a polynomial modulus while

493
00:20:58,559 --> 00:21:02,320
keeping compact cipher texts

494
00:21:02,320 --> 00:21:06,720
this is it for this video presentation

495
00:21:06,720 --> 00:21:09,520
i hope you liked it thank you for for

496
00:21:09,520 --> 00:21:10,640
listening

497
00:21:10,640 --> 00:21:14,960
and see you later

