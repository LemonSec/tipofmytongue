1
00:00:00,719 --> 00:00:03,040
hello and welcome to my talk on a

2
00:00:03,040 --> 00:00:05,680
geometric approach to homomorphic secret

3
00:00:05,680 --> 00:00:06,560
sharing

4
00:00:06,560 --> 00:00:09,200
my name is russo lai this is a joint

5
00:00:09,200 --> 00:00:13,440
work with yuval ishai and julio malavota

6
00:00:13,440 --> 00:00:16,160
what is homomorphic secret sharing a

7
00:00:16,160 --> 00:00:18,480
homomorphic secret sharing scheme

8
00:00:18,480 --> 00:00:21,279
or hss scheme can be used to build

9
00:00:21,279 --> 00:00:23,359
two-round npc protocols

10
00:00:23,359 --> 00:00:26,000
on multi-party computation protocols

11
00:00:26,000 --> 00:00:29,199
with a special network topology

12
00:00:29,199 --> 00:00:30,960
in this talk we will consider the

13
00:00:30,960 --> 00:00:32,800
arithmetic circuit model

14
00:00:32,800 --> 00:00:35,120
that means our mpc protocols will be

15
00:00:35,120 --> 00:00:37,200
computing polynomials f

16
00:00:37,200 --> 00:00:40,800
of some bounded degree d represented by

17
00:00:40,800 --> 00:00:44,239
arithmetic circuits in more detail

18
00:00:44,239 --> 00:00:47,280
an nmt hss scheme involves

19
00:00:47,280 --> 00:00:51,120
n input clients m servers and one output

20
00:00:51,120 --> 00:00:52,320
client

21
00:00:52,320 --> 00:00:54,800
among the m servers t of them can be

22
00:00:54,800 --> 00:00:56,559
corrupt

23
00:00:56,559 --> 00:01:00,000
the goal of an hss scheme as opposed to

24
00:01:00,000 --> 00:01:02,960
general purpose mpc protocols is to

25
00:01:02,960 --> 00:01:05,920
minimize the communication complexity

26
00:01:05,920 --> 00:01:07,680
that is we aim to achieve a

27
00:01:07,680 --> 00:01:09,680
communication complexity

28
00:01:09,680 --> 00:01:12,000
that is much much smaller than the

29
00:01:12,000 --> 00:01:13,360
description size of

30
00:01:13,360 --> 00:01:18,080
f a two round npc protocol built from

31
00:01:18,080 --> 00:01:19,280
hss

32
00:01:19,280 --> 00:01:22,080
involves the following phases first

33
00:01:22,080 --> 00:01:23,680
there is the setup phase

34
00:01:23,680 --> 00:01:25,600
which happens in the public key model

35
00:01:25,600 --> 00:01:27,840
only in which the output client

36
00:01:27,840 --> 00:01:30,880
generates a public key secret key pair

37
00:01:30,880 --> 00:01:34,320
then in the actual protocol in round 1

38
00:01:34,320 --> 00:01:36,640
the input client i would secret share

39
00:01:36,640 --> 00:01:38,240
its input x i

40
00:01:38,240 --> 00:01:42,079
as sij for j ranging from 1 to m

41
00:01:42,079 --> 00:01:44,880
for each server it then sends the share

42
00:01:44,880 --> 00:01:45,600
sij

43
00:01:45,600 --> 00:01:49,040
to server j the input client could also

44
00:01:49,040 --> 00:01:52,799
generate some recovery information rij

45
00:01:52,799 --> 00:01:56,079
and send them to the output client then

46
00:01:56,079 --> 00:01:59,119
in round 2 each server j would evaluate

47
00:01:59,119 --> 00:02:02,079
the function f on its shares and send

48
00:02:02,079 --> 00:02:04,240
the resulting output share yj

49
00:02:04,240 --> 00:02:07,920
to the output client finally the output

50
00:02:07,920 --> 00:02:09,119
client can recover

51
00:02:09,119 --> 00:02:12,319
the computation result y equals f of

52
00:02:12,319 --> 00:02:15,760
x1 up to xn using the output shares

53
00:02:15,760 --> 00:02:19,200
yj sent from the servers and also

54
00:02:19,200 --> 00:02:22,319
optionally the recovery information rij

55
00:02:22,319 --> 00:02:26,080
sent by the input clients

56
00:02:26,080 --> 00:02:28,800
for security we assume that the clients

57
00:02:28,800 --> 00:02:30,239
are always honest

58
00:02:30,239 --> 00:02:33,360
and at most t servers can be corrupt

59
00:02:33,360 --> 00:02:36,000
even so any t servers should learn

60
00:02:36,000 --> 00:02:37,040
nothing about

61
00:02:37,040 --> 00:02:40,879
each input x i in a special case where

62
00:02:40,879 --> 00:02:43,440
there are no public and secret keys

63
00:02:43,440 --> 00:02:46,080
and we actually achieve information

64
00:02:46,080 --> 00:02:47,760
theoretic security

65
00:02:47,760 --> 00:02:52,879
then we call the hss scheme and i t hss

66
00:02:52,879 --> 00:02:55,360
for efficiency we are mostly interested

67
00:02:55,360 --> 00:02:57,599
in the sizes of the input and output

68
00:02:57,599 --> 00:02:58,640
shares

69
00:02:58,640 --> 00:03:01,440
typically an input share sij is of

70
00:03:01,440 --> 00:03:02,959
constant size

71
00:03:02,959 --> 00:03:05,040
on the other hand an output share could

72
00:03:05,040 --> 00:03:07,120
either be of constant size

73
00:03:07,120 --> 00:03:09,440
in which case we call the hss scheme

74
00:03:09,440 --> 00:03:10,239
compact

75
00:03:10,239 --> 00:03:13,200
or it is of size linear in the number of

76
00:03:13,200 --> 00:03:13,760
inputs

77
00:03:13,760 --> 00:03:16,400
n in which case we call the xss scheme

78
00:03:16,400 --> 00:03:17,680
balanced

79
00:03:17,680 --> 00:03:20,480
intuitively a balanced xss scheme would

80
00:03:20,480 --> 00:03:23,360
support polynomials of higher degrees

81
00:03:23,360 --> 00:03:26,000
either way regardless of whether the xss

82
00:03:26,000 --> 00:03:26,480
scheme

83
00:03:26,480 --> 00:03:28,879
is compact or balanced the total

84
00:03:28,879 --> 00:03:30,159
communication

85
00:03:30,159 --> 00:03:33,440
is linear in m times n in this sense a

86
00:03:33,440 --> 00:03:35,680
compact hss scheme is wasteful

87
00:03:35,680 --> 00:03:37,760
as far as the symptotic communication

88
00:03:37,760 --> 00:03:40,480
complexity goes

89
00:03:40,480 --> 00:03:43,200
given the background of xss in this work

90
00:03:43,200 --> 00:03:45,440
we present three results

91
00:03:45,440 --> 00:03:48,000
first we present a generic compiler

92
00:03:48,000 --> 00:03:50,720
which can compile a certain class of it

93
00:03:50,720 --> 00:03:52,000
hsn schemes

94
00:03:52,000 --> 00:03:54,799
whose recover algorithm can be expressed

95
00:03:54,799 --> 00:03:55,680
as a degree

96
00:03:55,680 --> 00:03:58,799
l polynomial in the recovery information

97
00:03:58,799 --> 00:04:02,720
into pkhss schemes using khe

98
00:04:02,720 --> 00:04:05,280
which stands for homomorphic encryption

99
00:04:05,280 --> 00:04:06,000
supporting

100
00:04:06,000 --> 00:04:09,840
degree k polynomials note that the xss

101
00:04:09,840 --> 00:04:10,400
schemes

102
00:04:10,400 --> 00:04:13,040
before and after the compilation both

103
00:04:13,040 --> 00:04:14,000
support the same

104
00:04:14,000 --> 00:04:16,798
degree d which is strictly less than l

105
00:04:16,798 --> 00:04:17,680
plus 1

106
00:04:17,680 --> 00:04:21,918
times m over t however the it-hss scheme

107
00:04:21,918 --> 00:04:23,440
that we start with

108
00:04:23,440 --> 00:04:26,320
could have much larger output share for

109
00:04:26,320 --> 00:04:29,120
example of size n to the power l

110
00:04:29,120 --> 00:04:32,080
compared to that of the resulting pk hss

111
00:04:32,080 --> 00:04:32,960
scheme

112
00:04:32,960 --> 00:04:35,759
which is only of size n to the power l

113
00:04:35,759 --> 00:04:37,840
minus k

114
00:04:37,840 --> 00:04:40,639
as our second result we extract a family

115
00:04:40,639 --> 00:04:40,880
of

116
00:04:40,880 --> 00:04:43,919
i it-hss schemes which were implicit in

117
00:04:43,919 --> 00:04:45,919
the private information retrieval

118
00:04:45,919 --> 00:04:47,120
literature

119
00:04:47,120 --> 00:04:50,000
these extracted it-hss schemes are going

120
00:04:50,000 --> 00:04:51,919
to be compatible with our generic

121
00:04:51,919 --> 00:04:55,680
compiler presented in result 1.

122
00:04:55,680 --> 00:04:58,320
finally for our third result we defined

123
00:04:58,320 --> 00:05:01,199
the notion of pre-processing hss

124
00:05:01,199 --> 00:05:03,520
and show how they are useful in building

125
00:05:03,520 --> 00:05:04,400
pre-processing

126
00:05:04,400 --> 00:05:07,599
mpc protocols

127
00:05:08,080 --> 00:05:10,400
our starting point is the work of myself

128
00:05:10,400 --> 00:05:11,919
a levota and schroeder

129
00:05:11,919 --> 00:05:15,759
back in asia crypt 18 which we refer to

130
00:05:15,759 --> 00:05:16,080
as

131
00:05:16,080 --> 00:05:20,160
lms 18. the work of lms18

132
00:05:20,160 --> 00:05:22,960
built public key hss schemes for degree

133
00:05:22,960 --> 00:05:24,400
d polynomials

134
00:05:24,400 --> 00:05:27,759
from k h e where d is strictly smaller

135
00:05:27,759 --> 00:05:28,240
than k

136
00:05:28,240 --> 00:05:31,759
plus 1 times m a significant drawback of

137
00:05:31,759 --> 00:05:33,120
this scheme however

138
00:05:33,120 --> 00:05:35,199
is that it is only efficient when the

139
00:05:35,199 --> 00:05:36,240
number of servers

140
00:05:36,240 --> 00:05:38,720
m is logarithmic in the security

141
00:05:38,720 --> 00:05:40,800
parameter

142
00:05:40,800 --> 00:05:43,680
in order to improve this old result we

143
00:05:43,680 --> 00:05:44,720
revisit it

144
00:05:44,720 --> 00:05:47,919
from a new perspective specifically if

145
00:05:47,919 --> 00:05:49,680
we view the xss scheme

146
00:05:49,680 --> 00:05:52,720
as the result of compiling an it hss

147
00:05:52,720 --> 00:05:54,720
scheme with a homomorphic encryption

148
00:05:54,720 --> 00:05:55,759
scheme

149
00:05:55,759 --> 00:05:58,160
then we can see that the underlying hss

150
00:05:58,160 --> 00:06:00,160
scheme is actually the so-called

151
00:06:00,160 --> 00:06:03,759
cnf secret sharing scheme

152
00:06:03,759 --> 00:06:06,000
if you don't know what the cnf secret

153
00:06:06,000 --> 00:06:07,520
sharing scheme is

154
00:06:07,520 --> 00:06:09,520
what you need to know for this talk is

155
00:06:09,520 --> 00:06:11,840
that it collapses to the additive secret

156
00:06:11,840 --> 00:06:12,639
sharing scheme

157
00:06:12,639 --> 00:06:15,120
when the number of parties is 2 which is

158
00:06:15,120 --> 00:06:17,199
the setting that we are going to use in

159
00:06:17,199 --> 00:06:20,080
the following example

160
00:06:20,080 --> 00:06:22,400
speaking of which we will set the number

161
00:06:22,400 --> 00:06:24,160
of servers m to be 2

162
00:06:24,160 --> 00:06:27,280
the degree d to be 3 and consider the

163
00:06:27,280 --> 00:06:28,240
function

164
00:06:28,240 --> 00:06:31,759
x1 times x2 times x3

165
00:06:31,759 --> 00:06:33,840
in the additive secret sharing scheme

166
00:06:33,840 --> 00:06:35,039
the input client

167
00:06:35,039 --> 00:06:37,680
would secret share x i as the sum

168
00:06:37,680 --> 00:06:40,240
between si1 and si2

169
00:06:40,240 --> 00:06:43,360
where si1 will be sent to server 1

170
00:06:43,360 --> 00:06:46,160
highlighted in red and si2 will be sent

171
00:06:46,160 --> 00:06:49,199
to server 2 highlighted in green

172
00:06:49,199 --> 00:06:51,120
the input client would also set the

173
00:06:51,120 --> 00:06:52,720
recovery information

174
00:06:52,720 --> 00:06:56,000
ri 1 and ri 2 to be nothing but

175
00:06:56,000 --> 00:07:00,000
si2 and si1 this looks stupid right now

176
00:07:00,000 --> 00:07:00,560
because

177
00:07:00,560 --> 00:07:03,039
given such recovery information the

178
00:07:03,039 --> 00:07:05,680
output client could have just computed

179
00:07:05,680 --> 00:07:09,840
x1 times x2 times x3 itself

180
00:07:09,840 --> 00:07:11,680
however the reason for setting the

181
00:07:11,680 --> 00:07:13,840
recovery information in this way

182
00:07:13,840 --> 00:07:16,960
will become clear later

183
00:07:16,960 --> 00:07:19,759
now let us expand the product x1 times

184
00:07:19,759 --> 00:07:21,280
x2 times x3

185
00:07:21,280 --> 00:07:24,400
in terms of the sijs we see that the

186
00:07:24,400 --> 00:07:25,919
product can be expressed

187
00:07:25,919 --> 00:07:28,639
as a sum of eight terms as shown on the

188
00:07:28,639 --> 00:07:31,599
screen right now

189
00:07:31,599 --> 00:07:33,680
the components of these terms that are

190
00:07:33,680 --> 00:07:35,680
computable by server 1

191
00:07:35,680 --> 00:07:38,000
are highlighted in red while the

192
00:07:38,000 --> 00:07:40,319
components computable by server 2 are

193
00:07:40,319 --> 00:07:43,440
highlighted in green

194
00:07:43,759 --> 00:07:45,840
with this coloring it is easy to see

195
00:07:45,840 --> 00:07:47,520
that this product of

196
00:07:47,520 --> 00:07:51,120
x1 times x2 times x3 is nothing but

197
00:07:51,120 --> 00:07:53,280
a linear function in the recovery

198
00:07:53,280 --> 00:07:54,400
information

199
00:07:54,400 --> 00:07:56,800
with coefficients given by the output

200
00:07:56,800 --> 00:07:58,000
shares y1 and

201
00:07:58,000 --> 00:08:02,000
y2 therefore a natural strategy to get

202
00:08:02,000 --> 00:08:04,240
rid of the recovery information

203
00:08:04,240 --> 00:08:06,160
is to encrypt them with a linearly

204
00:08:06,160 --> 00:08:07,919
homomorphic encryption scheme

205
00:08:07,919 --> 00:08:10,960
or one he and delegate the work to the

206
00:08:10,960 --> 00:08:12,240
servers

207
00:08:12,240 --> 00:08:15,440
this results in a compact public key xss

208
00:08:15,440 --> 00:08:16,000
scheme

209
00:08:16,000 --> 00:08:19,599
for degree-free polynomials

210
00:08:20,160 --> 00:08:22,479
generalizing this idea we obtain a

211
00:08:22,479 --> 00:08:24,000
generic compiler

212
00:08:24,000 --> 00:08:26,960
that is if we are given an i t hss

213
00:08:26,960 --> 00:08:27,680
scheme

214
00:08:27,680 --> 00:08:30,319
whose recover algorithm can be expressed

215
00:08:30,319 --> 00:08:31,199
as a degree

216
00:08:31,199 --> 00:08:34,399
l polynomial of the recovery information

217
00:08:34,399 --> 00:08:36,880
with coefficients given by the output

218
00:08:36,880 --> 00:08:37,519
shares

219
00:08:37,519 --> 00:08:40,958
y1 up to ym then we can perform the

220
00:08:40,958 --> 00:08:42,240
following to turn this

221
00:08:42,240 --> 00:08:45,360
it hss scheme into a public key hss

222
00:08:45,360 --> 00:08:46,800
scheme

223
00:08:46,800 --> 00:08:49,120
first we let the input clients encrypt

224
00:08:49,120 --> 00:08:49,920
the recovery

225
00:08:49,920 --> 00:08:52,240
information using a homomorphic

226
00:08:52,240 --> 00:08:54,480
encryption scheme supporting degree k

227
00:08:54,480 --> 00:08:55,519
polynomials

228
00:08:55,519 --> 00:08:58,800
to each server next the server would

229
00:08:58,800 --> 00:09:00,000
compute the it

230
00:09:00,000 --> 00:09:03,200
hss output shares as before but

231
00:09:03,200 --> 00:09:05,600
also greedily and homomorphically

232
00:09:05,600 --> 00:09:06,480
evaluate

233
00:09:06,480 --> 00:09:08,399
the polynomials representing the

234
00:09:08,399 --> 00:09:10,240
recovery algorithm

235
00:09:10,240 --> 00:09:13,519
up to degree k components they then

236
00:09:13,519 --> 00:09:14,160
finally

237
00:09:14,160 --> 00:09:17,519
send up to n to the power l minus k

238
00:09:17,519 --> 00:09:20,160
many ciphertexts of these components to

239
00:09:20,160 --> 00:09:22,240
the output kind

240
00:09:22,240 --> 00:09:24,720
finally the output client could recover

241
00:09:24,720 --> 00:09:26,720
the computation result y

242
00:09:26,720 --> 00:09:29,360
by first decrypting the ciphertext sent

243
00:09:29,360 --> 00:09:30,560
by the server

244
00:09:30,560 --> 00:09:33,279
and then finishing the remaining l minus

245
00:09:33,279 --> 00:09:33,600
k

246
00:09:33,600 --> 00:09:37,360
degrees of the recovery algorithm

247
00:09:37,360 --> 00:09:40,080
in conclusion we obtain a public key hss

248
00:09:40,080 --> 00:09:40,800
scheme

249
00:09:40,800 --> 00:09:42,640
supporting polynomials of the same

250
00:09:42,640 --> 00:09:45,120
degree but with no more recovery

251
00:09:45,120 --> 00:09:46,480
information

252
00:09:46,480 --> 00:09:49,200
and with much smaller output share size

253
00:09:49,200 --> 00:09:49,519
of

254
00:09:49,519 --> 00:09:53,200
n to the power l minus k

255
00:09:54,560 --> 00:09:56,800
let's now move to the second result that

256
00:09:56,800 --> 00:09:58,000
is to extract an

257
00:09:58,000 --> 00:10:01,680
it hss scheme from the pir literature

258
00:10:01,680 --> 00:10:03,839
specifically we are going to extract the

259
00:10:03,839 --> 00:10:05,040
scheme which we called

260
00:10:05,040 --> 00:10:08,480
wy1 which was implicit in the private

261
00:10:08,480 --> 00:10:10,160
information retrieval scheme

262
00:10:10,160 --> 00:10:13,040
of root roof and yakanin we then

263
00:10:13,040 --> 00:10:15,440
generalized the wy1 scheme

264
00:10:15,440 --> 00:10:18,399
to the wil scheme for all natural

265
00:10:18,399 --> 00:10:19,200
numbers l

266
00:10:19,200 --> 00:10:22,399
as well as l equals 0. note that when

267
00:10:22,399 --> 00:10:25,120
l equals 0 we recover the shamir secret

268
00:10:25,120 --> 00:10:27,279
sharing scheme

269
00:10:27,279 --> 00:10:30,160
the best way to explain the wyl scheme

270
00:10:30,160 --> 00:10:32,959
is to just show you the algorithms

271
00:10:32,959 --> 00:10:35,440
first the share algorithm as in the

272
00:10:35,440 --> 00:10:37,440
shamia secret sharing scheme

273
00:10:37,440 --> 00:10:40,079
the input client samples a degree t

274
00:10:40,079 --> 00:10:41,040
polynomial

275
00:10:41,040 --> 00:10:44,800
phi i such that phi i evaluated at zero

276
00:10:44,800 --> 00:10:48,800
is x i then the j share is just

277
00:10:48,800 --> 00:10:52,320
phi of i evaluated at j for l

278
00:10:52,320 --> 00:10:54,959
greater than 0 however the input client

279
00:10:54,959 --> 00:10:56,720
is also going to compute

280
00:10:56,720 --> 00:10:59,680
all the derivatives of phi i up to order

281
00:10:59,680 --> 00:11:00,320
l

282
00:11:00,320 --> 00:11:04,560
and evaluate them at j for all j

283
00:11:04,560 --> 00:11:06,560
these derivatives will then be used as

284
00:11:06,560 --> 00:11:09,120
recovery information

285
00:11:09,120 --> 00:11:11,519
for the evaluation algorithm as in

286
00:11:11,519 --> 00:11:13,040
shamiyah's secret sharing

287
00:11:13,040 --> 00:11:15,360
the server would first evaluate f on the

288
00:11:15,360 --> 00:11:17,360
share sij

289
00:11:17,360 --> 00:11:20,640
however for l greater than 0 the server

290
00:11:20,640 --> 00:11:22,399
is also going to compute

291
00:11:22,399 --> 00:11:25,040
all the partial derivatives of f up to

292
00:11:25,040 --> 00:11:26,399
the elf order

293
00:11:26,399 --> 00:11:30,399
and evaluate all of them at sij as well

294
00:11:30,399 --> 00:11:32,720
all of these evaluation results will be

295
00:11:32,720 --> 00:11:36,399
included in the output share

296
00:11:36,640 --> 00:11:39,120
finally in the recovery algorithm the

297
00:11:39,120 --> 00:11:40,959
output client would first recover

298
00:11:40,959 --> 00:11:44,399
all the derivatives of f composite phi

299
00:11:44,399 --> 00:11:47,440
up to the elf order evaluated at j for

300
00:11:47,440 --> 00:11:49,920
all j

301
00:11:50,399 --> 00:11:52,240
the output client then recovers the

302
00:11:52,240 --> 00:11:53,920
computation result y

303
00:11:53,920 --> 00:11:56,320
which is nothing but f composite phi

304
00:11:56,320 --> 00:11:57,920
evaluated at 0

305
00:11:57,920 --> 00:12:00,000
by interpolating the data points

306
00:12:00,000 --> 00:12:02,079
presented on the screen right now

307
00:12:02,079 --> 00:12:04,639
using amid interpolation which is a

308
00:12:04,639 --> 00:12:06,399
generalization of the lagrange

309
00:12:06,399 --> 00:12:08,560
interpolation

310
00:12:08,560 --> 00:12:10,880
for sanity check we note that the output

311
00:12:10,880 --> 00:12:11,760
client has

312
00:12:11,760 --> 00:12:14,880
l plus 1 times m data points

313
00:12:14,880 --> 00:12:16,399
on the other hand we know that the

314
00:12:16,399 --> 00:12:18,720
polynomial f has degree

315
00:12:18,720 --> 00:12:21,600
strictly less than l plus 1 times m over

316
00:12:21,600 --> 00:12:22,320
t

317
00:12:22,320 --> 00:12:26,000
and the polynomial phi has degree t

318
00:12:26,000 --> 00:12:28,959
therefore the degree of f composite phi

319
00:12:28,959 --> 00:12:29,279
is

320
00:12:29,279 --> 00:12:32,399
strictly less than l plus 1 times m and

321
00:12:32,399 --> 00:12:35,680
therefore the interpolation works

322
00:12:35,680 --> 00:12:37,920
more importantly one can check that the

323
00:12:37,920 --> 00:12:39,279
recovery algorithm

324
00:12:39,279 --> 00:12:41,839
is indeed a degree l polynomial in the

325
00:12:41,839 --> 00:12:43,760
recovery information

326
00:12:43,760 --> 00:12:46,000
therefore this scheme is compatible with

327
00:12:46,000 --> 00:12:50,399
the compiler presented in result 1.

328
00:12:50,639 --> 00:12:53,040
for the third and last result we show

329
00:12:53,040 --> 00:12:55,519
how pre-processing hss schemes can be

330
00:12:55,519 --> 00:12:56,320
used to

331
00:12:56,320 --> 00:12:59,440
construct pre-processing mpc schemes

332
00:12:59,440 --> 00:13:01,440
but for that i need to first define the

333
00:13:01,440 --> 00:13:04,880
notion of p preprocessing hss

334
00:13:04,880 --> 00:13:07,120
we say that an xss scheme has p

335
00:13:07,120 --> 00:13:08,399
preprocessing

336
00:13:08,399 --> 00:13:11,760
if p of the m shares are totally random

337
00:13:11,760 --> 00:13:13,600
which means that they are independent of

338
00:13:13,600 --> 00:13:14,800
the inputs x1

339
00:13:14,800 --> 00:13:17,519
up to xn in fact they can even be

340
00:13:17,519 --> 00:13:19,760
generated before knowing the inputs x1

341
00:13:19,760 --> 00:13:20,000
to

342
00:13:20,000 --> 00:13:23,200
xn therefore the work of p servers can

343
00:13:23,200 --> 00:13:25,600
be pre-computed

344
00:13:25,600 --> 00:13:27,839
for example the shamia secret sharing

345
00:13:27,839 --> 00:13:30,079
scheme or wy0

346
00:13:30,079 --> 00:13:33,440
has t preprocessing in general

347
00:13:33,440 --> 00:13:36,560
the scheme w i l has t over l

348
00:13:36,560 --> 00:13:39,760
plus one preprocessing since t

349
00:13:39,760 --> 00:13:42,399
over l plus one is not necessarily an

350
00:13:42,399 --> 00:13:43,360
integer

351
00:13:43,360 --> 00:13:45,519
we are better off as far as the level of

352
00:13:45,519 --> 00:13:46,880
preprocessing goes

353
00:13:46,880 --> 00:13:50,399
when l plus 1 divides t

354
00:13:50,399 --> 00:13:52,480
next let me recall the notion of

355
00:13:52,480 --> 00:13:54,639
preprocessing mpc

356
00:13:54,639 --> 00:13:57,360
a preprocessing mpc protocol consists of

357
00:13:57,360 --> 00:13:58,320
two phases

358
00:13:58,320 --> 00:14:01,760
an offline phase and an online phase

359
00:14:01,760 --> 00:14:03,920
the offline phase is dependent on the

360
00:14:03,920 --> 00:14:05,760
function f to be computed

361
00:14:05,760 --> 00:14:09,279
but not on the inputs x1 up to xn

362
00:14:09,279 --> 00:14:11,600
this phase can be performed by a trusted

363
00:14:11,600 --> 00:14:12,639
party or by

364
00:14:12,639 --> 00:14:15,680
another npc protocol although this phase

365
00:14:15,680 --> 00:14:17,440
is potentially expensive

366
00:14:17,440 --> 00:14:20,000
it can be done overnight since it is not

367
00:14:20,000 --> 00:14:23,519
dependent on the inputs

368
00:14:23,519 --> 00:14:25,680
the online phase is run when the inputs

369
00:14:25,680 --> 00:14:28,639
x1 to xn become available

370
00:14:28,639 --> 00:14:30,639
the goal of a pre-processing mpc

371
00:14:30,639 --> 00:14:32,320
protocol is to minimize the

372
00:14:32,320 --> 00:14:34,720
communication complexity of the online

373
00:14:34,720 --> 00:14:35,839
phase

374
00:14:35,839 --> 00:14:37,920
such that it is much smaller than the

375
00:14:37,920 --> 00:14:39,120
description size of

376
00:14:39,120 --> 00:14:42,240
f with this background we have the

377
00:14:42,240 --> 00:14:44,560
following result

378
00:14:44,560 --> 00:14:48,079
given an n input m plus p server

379
00:14:48,079 --> 00:14:50,959
and t secure xss scheme with p

380
00:14:50,959 --> 00:14:52,240
preprocessing

381
00:14:52,240 --> 00:14:55,120
for degree d polynomials we can

382
00:14:55,120 --> 00:14:56,240
construct a t

383
00:14:56,240 --> 00:14:59,440
secure m party pre-processing npc for

384
00:14:59,440 --> 00:15:03,040
the same kind of polynomials

385
00:15:03,279 --> 00:15:06,320
if the xss scheme is instantiated with

386
00:15:06,320 --> 00:15:09,680
the result of compiling the wyl scheme

387
00:15:09,680 --> 00:15:12,160
with the degree k homomorphic encryption

388
00:15:12,160 --> 00:15:13,279
scheme

389
00:15:13,279 --> 00:15:15,680
then the resulting preprocessing mpc

390
00:15:15,680 --> 00:15:16,560
protocol

391
00:15:16,560 --> 00:15:19,600
has communication complexity linear in

392
00:15:19,600 --> 00:15:24,480
m times n to the power l minus k

393
00:15:24,639 --> 00:15:26,880
the idea behind this result is quite

394
00:15:26,880 --> 00:15:27,760
straightforward

395
00:15:27,760 --> 00:15:30,320
that is to push the computation of the p

396
00:15:30,320 --> 00:15:30,880
servers

397
00:15:30,880 --> 00:15:34,320
to the preprocessing phase

398
00:15:34,320 --> 00:15:36,639
in more detail in the offline phase of

399
00:15:36,639 --> 00:15:38,880
the preprocessing mpc protocol

400
00:15:38,880 --> 00:15:41,839
we would generate the p shares which are

401
00:15:41,839 --> 00:15:44,240
independent of the online inputs

402
00:15:44,240 --> 00:15:46,399
and run the evaluation algorithm for the

403
00:15:46,399 --> 00:15:47,920
p servers

404
00:15:47,920 --> 00:15:49,759
we then seek to share everything to the

405
00:15:49,759 --> 00:15:53,279
participants of the mpc protocol

406
00:15:53,279 --> 00:15:55,279
then in the online phase when the

407
00:15:55,279 --> 00:15:57,120
participants received their online

408
00:15:57,120 --> 00:15:57,680
inputs

409
00:15:57,680 --> 00:16:00,240
x1 up to xn they would generate the

410
00:16:00,240 --> 00:16:00,880
remaining

411
00:16:00,880 --> 00:16:03,839
m shares using a general purpose npc

412
00:16:03,839 --> 00:16:05,120
protocol

413
00:16:05,120 --> 00:16:08,560
the j party would get the j plus p share

414
00:16:08,560 --> 00:16:11,680
and run the hss evaluation algorithm to

415
00:16:11,680 --> 00:16:13,199
evaluate the function f

416
00:16:13,199 --> 00:16:16,800
on its shares locally finally

417
00:16:16,800 --> 00:16:19,199
the participants can recover the output

418
00:16:19,199 --> 00:16:21,120
using yet another general purpose

419
00:16:21,120 --> 00:16:25,120
npc protocol although we are using

420
00:16:25,120 --> 00:16:26,079
general purpose

421
00:16:26,079 --> 00:16:29,199
mpc protocols in our construction

422
00:16:29,199 --> 00:16:31,199
we note that we are using these general

423
00:16:31,199 --> 00:16:33,120
purpose mpc protocols

424
00:16:33,120 --> 00:16:35,360
to perform computations which are

425
00:16:35,360 --> 00:16:36,160
independent

426
00:16:36,160 --> 00:16:38,720
of the description size of f and

427
00:16:38,720 --> 00:16:40,880
therefore the resulting preprocessing

428
00:16:40,880 --> 00:16:42,240
npc protocol

429
00:16:42,240 --> 00:16:43,920
would still have communication

430
00:16:43,920 --> 00:16:45,839
complexity independent of the

431
00:16:45,839 --> 00:16:48,839
description size of

432
00:16:48,839 --> 00:16:50,160
f

433
00:16:50,160 --> 00:16:52,079
finally i would like to show you some

434
00:16:52,079 --> 00:16:54,240
interesting numbers

435
00:16:54,240 --> 00:16:56,480
first here is a table comparing the

436
00:16:56,480 --> 00:16:58,880
supported degree of different schemes

437
00:16:58,880 --> 00:17:01,279
assuming a communication complexity

438
00:17:01,279 --> 00:17:02,079
linear in

439
00:17:02,079 --> 00:17:06,000
m times n we highlighted our main hss

440
00:17:06,000 --> 00:17:06,959
scheme

441
00:17:06,959 --> 00:17:08,799
which is the scheme obtained by

442
00:17:08,799 --> 00:17:10,400
compiling the wy

443
00:17:10,400 --> 00:17:12,640
k plus 1 scheme with a degree k

444
00:17:12,640 --> 00:17:14,720
homomorphic encryption scheme

445
00:17:14,720 --> 00:17:17,039
supports a degree higher than that of

446
00:17:17,039 --> 00:17:17,760
lms

447
00:17:17,760 --> 00:17:20,799
18 by an additive factor of m

448
00:17:20,799 --> 00:17:24,000
over t furthermore if we allow

449
00:17:24,000 --> 00:17:25,039
preprocessing

450
00:17:25,039 --> 00:17:27,039
then an extra one degree can be

451
00:17:27,039 --> 00:17:29,039
supported

452
00:17:29,039 --> 00:17:31,520
for concrete parameters we are mostly

453
00:17:31,520 --> 00:17:32,160
interested

454
00:17:32,160 --> 00:17:34,559
in linearly homomorphic encryption

455
00:17:34,559 --> 00:17:36,320
scheme or one he

456
00:17:36,320 --> 00:17:38,400
because they are available from a lot of

457
00:17:38,400 --> 00:17:39,919
assumptions

458
00:17:39,919 --> 00:17:43,039
also we will set l equals k plus 1 which

459
00:17:43,039 --> 00:17:44,000
is 2

460
00:17:44,000 --> 00:17:46,240
so that the resulting hss scheme is

461
00:17:46,240 --> 00:17:48,799
balanced

462
00:17:49,120 --> 00:17:51,520
finally for pre-processing mpc

463
00:17:51,520 --> 00:17:53,760
interesting examples can be obtained by

464
00:17:53,760 --> 00:17:54,400
setting t

465
00:17:54,400 --> 00:17:57,600
equals 3 which is equal and hence is a

466
00:17:57,600 --> 00:17:58,559
multiple of

467
00:17:58,559 --> 00:18:01,679
l plus one to conclude

468
00:18:01,679 --> 00:18:03,520
in this work we have presented three

469
00:18:03,520 --> 00:18:05,360
results

470
00:18:05,360 --> 00:18:07,280
first we have constructed a generic

471
00:18:07,280 --> 00:18:10,720
compiler based on homomorphic encryption

472
00:18:10,720 --> 00:18:14,240
compiling it hss schemes to public key

473
00:18:14,240 --> 00:18:17,600
hss schemes for polynomials second we

474
00:18:17,600 --> 00:18:18,640
have extracted

475
00:18:18,640 --> 00:18:21,679
it hss schemes from existing pird

476
00:18:21,679 --> 00:18:22,640
teacher

477
00:18:22,640 --> 00:18:24,720
and finally we show how pre-processing

478
00:18:24,720 --> 00:18:26,799
hss can be used to construct

479
00:18:26,799 --> 00:18:27,600
pre-processing

480
00:18:27,600 --> 00:18:31,360
npc an e-print version of this work

481
00:18:31,360 --> 00:18:36,479
can be found in the link ia.cr

482
00:18:38,360 --> 00:18:41,360
2021-260

