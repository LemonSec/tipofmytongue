1
00:00:02,240 --> 00:00:03,199
hello everyone

2
00:00:03,199 --> 00:00:05,279
thank you for joining this pre-recorded

3
00:00:05,279 --> 00:00:07,839
talk for our paper titled banquet

4
00:00:07,839 --> 00:00:10,160
short and fast signatures from aes

5
00:00:10,160 --> 00:00:11,519
presented for pkc

6
00:00:11,519 --> 00:00:15,440
2021 this is joint work with carsten

7
00:00:15,440 --> 00:00:17,199
baum daniel kallus

8
00:00:17,199 --> 00:00:19,439
emmanuella orsini peter scholl and greg

9
00:00:19,439 --> 00:00:22,080
zavarucha

10
00:00:23,119 --> 00:00:24,800
in this video i'll be going through

11
00:00:24,800 --> 00:00:26,720
first some key facts of the paper

12
00:00:26,720 --> 00:00:29,119
then i'll be explaining the idea of zero

13
00:00:29,119 --> 00:00:31,599
knowledge produces knowledge from mpc

14
00:00:31,599 --> 00:00:34,480
i will present our technical

15
00:00:34,480 --> 00:00:37,120
contribution for inverse verification

16
00:00:37,120 --> 00:00:39,440
which will enable us to build the

17
00:00:39,440 --> 00:00:40,960
banquet signature scheme

18
00:00:40,960 --> 00:00:42,480
finally i'll touch about some

19
00:00:42,480 --> 00:00:45,839
implementation details

20
00:00:46,719 --> 00:00:49,920
first with the key facts

21
00:00:50,559 --> 00:00:53,760
our banquet signature scheme is built

22
00:00:53,760 --> 00:00:54,239
using

23
00:00:54,239 --> 00:00:57,760
an mpc in the h-based zero knowledge

24
00:00:57,760 --> 00:01:00,079
zero knowledge proof of knowledge with

25
00:01:00,079 --> 00:01:01,600
for which we use a feature mere

26
00:01:01,600 --> 00:01:03,000
transform to achieve

27
00:01:03,000 --> 00:01:06,000
non-interactivity and its

28
00:01:06,000 --> 00:01:09,119
uh euf cma security is based on the

29
00:01:09,119 --> 00:01:11,600
one-way function assumption of the aes

30
00:01:11,600 --> 00:01:14,000
block cipher with a slightly modified

31
00:01:14,000 --> 00:01:15,759
key generation algorithm

32
00:01:15,759 --> 00:01:18,320
in the random oracle model one key

33
00:01:18,320 --> 00:01:20,080
feature here is that

34
00:01:20,080 --> 00:01:22,240
it has no public key assumptions which

35
00:01:22,240 --> 00:01:24,320
is the same as for other mpc

36
00:01:24,320 --> 00:01:26,720
in the h-based signature schemes which

37
00:01:26,720 --> 00:01:29,759
makes it quite attractive

38
00:01:30,079 --> 00:01:33,520
it's work that follows the same line as

39
00:01:33,520 --> 00:01:36,400
picnic which is now in its third

40
00:01:36,400 --> 00:01:37,200
iteration

41
00:01:37,200 --> 00:01:41,759
as a nist alternative finalist

42
00:01:41,759 --> 00:01:43,040
and i will highlight here that the

43
00:01:43,040 --> 00:01:45,040
picnic scheme is based on the low mc

44
00:01:45,040 --> 00:01:46,159
block cipher

45
00:01:46,159 --> 00:01:49,040
which has about 600 and gates and it's

46
00:01:49,040 --> 00:01:50,479
also a continuation of

47
00:01:50,479 --> 00:01:53,680
previous world work called bbq

48
00:01:53,680 --> 00:01:55,840
which was the first attempt to

49
00:01:55,840 --> 00:01:57,920
instantiate picnic style signatures with

50
00:01:57,920 --> 00:01:59,439
the aes block cipher

51
00:01:59,439 --> 00:02:01,920
which has about 11 times more and gates

52
00:02:01,920 --> 00:02:04,799
than low mc

53
00:02:06,719 --> 00:02:08,560
our paper presents uh several

54
00:02:08,560 --> 00:02:10,399
improvements over these two previous

55
00:02:10,399 --> 00:02:11,120
work

56
00:02:11,120 --> 00:02:13,360
not only do we have a better assumption

57
00:02:13,360 --> 00:02:15,200
in the sense that we use aes

58
00:02:15,200 --> 00:02:18,000
or over low mc but we achieve better

59
00:02:18,000 --> 00:02:20,840
performance in both signature size and

60
00:02:20,840 --> 00:02:22,959
speed

61
00:02:22,959 --> 00:02:25,599
here are some numbers i've highlighted

62
00:02:25,599 --> 00:02:28,160
picnic 3 and the banquet results

63
00:02:28,160 --> 00:02:30,560
we see that our latest implementation

64
00:02:30,560 --> 00:02:31,200
achieves

65
00:02:31,200 --> 00:02:34,319
almost comparable running times

66
00:02:34,319 --> 00:02:37,680
only one millisecond more than picnic

67
00:02:37,680 --> 00:02:38,879
three

68
00:02:38,879 --> 00:02:40,800
four only seven kilobytes more in

69
00:02:40,800 --> 00:02:41,920
signature size

70
00:02:41,920 --> 00:02:43,680
considering that we use a circuit that

71
00:02:43,680 --> 00:02:46,239
is 11 times bigger

72
00:02:46,239 --> 00:02:48,319
we can further reduce our signature size

73
00:02:48,319 --> 00:02:50,400
by increasing this parameter n

74
00:02:50,400 --> 00:02:52,160
which is the number of parties which

75
00:02:52,160 --> 00:02:54,160
i'll explain later

76
00:02:54,160 --> 00:02:56,000
but at the same time here we have to pay

77
00:02:56,000 --> 00:02:59,599
for increased computation time

78
00:03:00,640 --> 00:03:03,599
now i will first describe the general

79
00:03:03,599 --> 00:03:05,360
idea behind the proof of knowledge

80
00:03:05,360 --> 00:03:07,760
framework

81
00:03:08,400 --> 00:03:10,480
to build a zero-knowledge proof of

82
00:03:10,480 --> 00:03:11,440
knowledge from

83
00:03:11,440 --> 00:03:14,959
npc we are aiming to prove claims of

84
00:03:14,959 --> 00:03:16,640
this form which is that we know a

85
00:03:16,640 --> 00:03:18,159
witness such that

86
00:03:18,159 --> 00:03:20,239
a circuit evaluated on a public

87
00:03:20,239 --> 00:03:21,200
statement

88
00:03:21,200 --> 00:03:25,040
and this witness will output one

89
00:03:25,040 --> 00:03:27,280
and the proof of this claim is the

90
00:03:27,280 --> 00:03:28,640
ability to simulate an

91
00:03:28,640 --> 00:03:31,519
n-party mpc protocol which computes this

92
00:03:31,519 --> 00:03:33,840
circuit

93
00:03:35,760 --> 00:03:38,159
in a simplified way we can say that the

94
00:03:38,159 --> 00:03:40,400
approver generates and commits to the

95
00:03:40,400 --> 00:03:41,360
view of these

96
00:03:41,360 --> 00:03:45,440
end parties and the verifier will then

97
00:03:45,440 --> 00:03:47,120
ask to see some of them

98
00:03:47,120 --> 00:03:48,159
and it will check that they are

99
00:03:48,159 --> 00:03:50,959
consistent so that each message sent by

100
00:03:50,959 --> 00:03:53,280
one party to another was indeed received

101
00:03:53,280 --> 00:03:56,480
correctly and without modification

102
00:03:56,480 --> 00:03:58,720
and it will also check that the circuit

103
00:03:58,720 --> 00:04:01,840
outputs the correct value

104
00:04:02,879 --> 00:04:04,319
the soundness of the zero knowledge

105
00:04:04,319 --> 00:04:07,040
proof will be guaranteed by

106
00:04:07,040 --> 00:04:09,120
the probability that the verifier sees

107
00:04:09,120 --> 00:04:11,200
inconsistent views

108
00:04:11,200 --> 00:04:12,879
so if the prover cheated in the

109
00:04:12,879 --> 00:04:14,720
construction of one of these views

110
00:04:14,720 --> 00:04:16,399
that's there's a high probability that

111
00:04:16,399 --> 00:04:18,560
the verifier will see this

112
00:04:18,560 --> 00:04:20,160
and the zero knowledge property comes

113
00:04:20,160 --> 00:04:22,240
from the semi-honest security of the mpc

114
00:04:22,240 --> 00:04:24,639
protocol because the verifier opens only

115
00:04:24,639 --> 00:04:26,639
part of the views and therefore the

116
00:04:26,639 --> 00:04:28,479
secret sharing will prevent

117
00:04:28,479 --> 00:04:31,359
knowledge leakage

118
00:04:31,840 --> 00:04:34,160
so building signature schemes from the

119
00:04:34,160 --> 00:04:37,919
zero knowledge proof was done before

120
00:04:37,919 --> 00:04:40,560
the latest advancement in the picnic

121
00:04:40,560 --> 00:04:41,280
scheme

122
00:04:41,280 --> 00:04:44,479
uses the kkw technique

123
00:04:44,479 --> 00:04:47,759
which is which was presented at ccs 2018

124
00:04:47,759 --> 00:04:49,520
where here the idea is to compute the

125
00:04:49,520 --> 00:04:53,280
circuit with an mpc protocol

126
00:04:53,440 --> 00:04:56,960
this circuit uses correlated randomness

127
00:04:56,960 --> 00:05:00,000
so binary masks or triples

128
00:05:00,000 --> 00:05:02,080
which must be verified so the the

129
00:05:02,080 --> 00:05:04,400
verifier must be convinced by the prover

130
00:05:04,400 --> 00:05:06,160
that these correlated randomness are

131
00:05:06,160 --> 00:05:07,520
correct

132
00:05:07,520 --> 00:05:09,520
here the picnic scheme uses a cut and

133
00:05:09,520 --> 00:05:11,440
choose technique

134
00:05:11,440 --> 00:05:13,600
which then allows for a communication

135
00:05:13,600 --> 00:05:16,320
efficient mpc protocol

136
00:05:16,320 --> 00:05:19,039
the drawback is that hundreds of cut and

137
00:05:19,039 --> 00:05:20,240
choose

138
00:05:20,240 --> 00:05:23,120
triples have to be generated for only a

139
00:05:23,120 --> 00:05:25,600
few tens to be kept

140
00:05:25,600 --> 00:05:27,120
not only this but if you want to

141
00:05:27,120 --> 00:05:30,240
compress the proof to a three round

142
00:05:30,240 --> 00:05:33,120
uh then um the circuit has to be

143
00:05:33,120 --> 00:05:34,080
executed

144
00:05:34,080 --> 00:05:35,680
for each of the hundreds of cut and

145
00:05:35,680 --> 00:05:37,440
choose and

146
00:05:37,440 --> 00:05:39,680
uh all of these executions have to be

147
00:05:39,680 --> 00:05:41,360
discarded when only tens

148
00:05:41,360 --> 00:05:44,479
are kept so to give an idea in in picnic

149
00:05:44,479 --> 00:05:47,520
you have to generate 252 copies of the

150
00:05:47,520 --> 00:05:48,160
circuit

151
00:05:48,160 --> 00:05:50,400
when only 36 will actually be challenged

152
00:05:50,400 --> 00:05:53,840
by the verifier

153
00:05:54,800 --> 00:05:58,080
now once the this is set up

154
00:05:58,080 --> 00:06:01,120
the circuit that the picnic uses is this

155
00:06:01,120 --> 00:06:03,280
low mc binary

156
00:06:03,280 --> 00:06:06,639
this low mc binary circuit over f2

157
00:06:06,639 --> 00:06:09,199
for which we have a plain text x a

158
00:06:09,199 --> 00:06:11,280
cipher text y and a key w

159
00:06:11,280 --> 00:06:13,440
and the circuit evaluates to one if and

160
00:06:13,440 --> 00:06:16,000
only if the block cipher produces y

161
00:06:16,000 --> 00:06:20,160
on input x with kw

162
00:06:20,160 --> 00:06:22,960
now when we first thought to do the

163
00:06:22,960 --> 00:06:25,360
barbecue signature scheme

164
00:06:25,360 --> 00:06:27,360
the idea was to move away from low mc

165
00:06:27,360 --> 00:06:28,400
and use aes

166
00:06:28,400 --> 00:06:31,440
instead now because aes is 11 times

167
00:06:31,440 --> 00:06:33,280
bigger as a binary circuit we had to

168
00:06:33,280 --> 00:06:35,039
change the framework there and we

169
00:06:35,039 --> 00:06:35,919
decided to use

170
00:06:35,919 --> 00:06:37,919
arithmetic circuit over f to the d8

171
00:06:37,919 --> 00:06:39,120
instead

172
00:06:39,120 --> 00:06:41,360
this meant that instead of using n gates

173
00:06:41,360 --> 00:06:42,880
we used inversion

174
00:06:42,880 --> 00:06:45,120
gates which are pretty much equivalent

175
00:06:45,120 --> 00:06:49,280
to the s-box operation in aes

176
00:06:49,280 --> 00:06:51,680
to do these inversion operations we used

177
00:06:51,680 --> 00:06:54,160
a masked inversion technique

178
00:06:54,160 --> 00:06:57,280
where the input s is first masked with a

179
00:06:57,280 --> 00:06:58,160
random r

180
00:06:58,160 --> 00:07:00,240
which costs one of these pre-processed

181
00:07:00,240 --> 00:07:01,520
triples

182
00:07:01,520 --> 00:07:04,560
this masking is opened inverted

183
00:07:04,560 --> 00:07:08,080
and the r inverse is then removed

184
00:07:08,080 --> 00:07:11,120
locally by the parties and this produces

185
00:07:11,120 --> 00:07:13,360
the inverse of s

186
00:07:13,360 --> 00:07:15,520
this technique has two drawbacks the

187
00:07:15,520 --> 00:07:16,960
first is that it requires

188
00:07:16,960 --> 00:07:19,919
the randomness to be non-zero since it's

189
00:07:19,919 --> 00:07:21,919
random this happens

190
00:07:21,919 --> 00:07:25,120
very with little probability

191
00:07:25,120 --> 00:07:27,199
and the parties simply restart if that

192
00:07:27,199 --> 00:07:28,479
happens

193
00:07:28,479 --> 00:07:30,240
the other drawback is that it requires

194
00:07:30,240 --> 00:07:31,840
the input to be non-zero

195
00:07:31,840 --> 00:07:33,440
and this is where we modify the key

196
00:07:33,440 --> 00:07:35,599
generation of aes to simply

197
00:07:35,599 --> 00:07:39,120
state that the plain text x

198
00:07:39,120 --> 00:07:41,599
the block cipher and the key w should be

199
00:07:41,599 --> 00:07:44,000
chosen such that this never happens in

200
00:07:44,000 --> 00:07:45,840
practice this only reduces concrete

201
00:07:45,840 --> 00:07:46,720
security by

202
00:07:46,720 --> 00:07:49,759
one to three bits

203
00:07:50,240 --> 00:07:53,360
the next paradigm that we can explore in

204
00:07:53,360 --> 00:07:54,639
npc in the head

205
00:07:54,639 --> 00:07:57,360
is to move away from this cut and choose

206
00:07:57,360 --> 00:07:59,759
for verified randomness

207
00:07:59,759 --> 00:08:03,120
and instead lets the mpc protocol itself

208
00:08:03,120 --> 00:08:06,080
do the verification this comes from

209
00:08:06,080 --> 00:08:08,800
sacrificing techniques in npc

210
00:08:08,800 --> 00:08:12,319
where a lot of correlated randomness

211
00:08:12,319 --> 00:08:15,280
is created and some of it is sacrificed

212
00:08:15,280 --> 00:08:18,400
to verify the rest

213
00:08:18,720 --> 00:08:20,800
here we would have the prover inject the

214
00:08:20,800 --> 00:08:22,800
result of multiplication as part of the

215
00:08:22,800 --> 00:08:23,360
witness

216
00:08:23,360 --> 00:08:26,240
for the relation this means that there

217
00:08:26,240 --> 00:08:27,520
is no need to compute

218
00:08:27,520 --> 00:08:30,080
through the circuit anymore instead the

219
00:08:30,080 --> 00:08:32,399
mpc parties execute a verification

220
00:08:32,399 --> 00:08:33,440
protocol

221
00:08:33,440 --> 00:08:36,080
um for example they can satisfy one

222
00:08:36,080 --> 00:08:38,399
suspicion they can sacrifice sorry

223
00:08:38,399 --> 00:08:41,039
one suspicious triple to verify another

224
00:08:41,039 --> 00:08:42,640
and this leads to efficiency

225
00:08:42,640 --> 00:08:44,240
optimization such as batching

226
00:08:44,240 --> 00:08:46,640
possibilities

227
00:08:46,640 --> 00:08:49,279
so now we can have a quick sketch of a

228
00:08:49,279 --> 00:08:50,480
protocol where

229
00:08:50,480 --> 00:08:52,800
we see that npc parties receive

230
00:08:52,800 --> 00:08:55,279
suspicious multiplication results

231
00:08:55,279 --> 00:08:58,560
from some god-like prover

232
00:08:58,560 --> 00:09:00,000
and then they can verify them by

233
00:09:00,000 --> 00:09:02,160
sacrificing equally suspicious

234
00:09:02,160 --> 00:09:05,839
random triples and this would result in

235
00:09:05,839 --> 00:09:07,519
a protocol which requires the

236
00:09:07,519 --> 00:09:09,040
communication of

237
00:09:09,040 --> 00:09:11,760
four elements for each gate of this each

238
00:09:11,760 --> 00:09:13,279
non-linear gate of the circuit

239
00:09:13,279 --> 00:09:17,279
plus one extra this however

240
00:09:17,279 --> 00:09:19,120
leads to a protocol which has inherently

241
00:09:19,120 --> 00:09:20,959
more than five rounds

242
00:09:20,959 --> 00:09:22,480
which means that the non-interactive

243
00:09:22,480 --> 00:09:24,480
soundness cannot be proved

244
00:09:24,480 --> 00:09:27,680
proven straightforwardly

245
00:09:28,480 --> 00:09:31,760
however this first way of doing

246
00:09:31,760 --> 00:09:34,640
inverse verification is quite naive so

247
00:09:34,640 --> 00:09:36,000
now i'm going to describe how we can

248
00:09:36,000 --> 00:09:38,720
improve on this

249
00:09:39,279 --> 00:09:41,040
so uh first to describe a little bit

250
00:09:41,040 --> 00:09:42,959
this naive approach

251
00:09:42,959 --> 00:09:45,600
in the context of having inversions the

252
00:09:45,600 --> 00:09:46,480
prover here would

253
00:09:46,480 --> 00:09:49,040
be injecting these suspicious inverses

254
00:09:49,040 --> 00:09:51,920
into the mpc and the head executions

255
00:09:51,920 --> 00:09:53,760
that means that at the end the parties

256
00:09:53,760 --> 00:09:55,440
end up with m pairs

257
00:09:55,440 --> 00:09:58,399
which allegedly should each multiply to

258
00:09:58,399 --> 00:09:59,519
1.

259
00:09:59,519 --> 00:10:02,640
so the naive protocol is then to cast

260
00:10:02,640 --> 00:10:04,640
each of these pairs as a multiplication

261
00:10:04,640 --> 00:10:05,360
triple with

262
00:10:05,360 --> 00:10:08,399
expected output one and verify

263
00:10:08,399 --> 00:10:10,079
each of these multiplications with a

264
00:10:10,079 --> 00:10:12,480
triple that is random

265
00:10:12,480 --> 00:10:14,399
and this leads to this this

266
00:10:14,399 --> 00:10:16,079
communication cost of

267
00:10:16,079 --> 00:10:19,839
four times the size of the circuit

268
00:10:20,640 --> 00:10:22,880
so the first the beginning of our

269
00:10:22,880 --> 00:10:24,160
improved check

270
00:10:24,160 --> 00:10:27,200
uses these polynomials s and t defined

271
00:10:27,200 --> 00:10:28,240
using

272
00:10:28,240 --> 00:10:30,720
well the inputs s and the injected

273
00:10:30,720 --> 00:10:32,399
inverses t

274
00:10:32,399 --> 00:10:34,240
the polynomial p is defined as their

275
00:10:34,240 --> 00:10:35,600
product and

276
00:10:35,600 --> 00:10:39,040
we see that by defining the evaluation

277
00:10:39,040 --> 00:10:39,600
of p

278
00:10:39,600 --> 00:10:43,040
on these points 1 to m to be equal to 1

279
00:10:43,040 --> 00:10:44,640
this is where we are setting the

280
00:10:44,640 --> 00:10:46,560
relation that we are verifying

281
00:10:46,560 --> 00:10:48,959
so if we wanted to verify a different

282
00:10:48,959 --> 00:10:50,320
relation between s and t

283
00:10:50,320 --> 00:10:53,600
this is what we would change here

284
00:10:53,920 --> 00:10:56,560
now what we are left to do is to ask for

285
00:10:56,560 --> 00:10:57,600
the proof to check

286
00:10:57,600 --> 00:11:00,000
that p is indeed equal to the product of

287
00:11:00,000 --> 00:11:01,279
s and t

288
00:11:01,279 --> 00:11:02,959
to do this we can sample a random

289
00:11:02,959 --> 00:11:04,399
element of the field

290
00:11:04,399 --> 00:11:07,519
open the three polynomials

291
00:11:07,519 --> 00:11:09,760
at that point and check that the

292
00:11:09,760 --> 00:11:10,800
equality holds

293
00:11:10,800 --> 00:11:14,320
for this point our soundness bound at

294
00:11:14,320 --> 00:11:15,279
this point

295
00:11:15,279 --> 00:11:17,680
comes from the schwarz zipple lemma

296
00:11:17,680 --> 00:11:20,320
where we see that a non-zero polynomial

297
00:11:20,320 --> 00:11:22,880
has a bounded probability of being equal

298
00:11:22,880 --> 00:11:23,600
to zero

299
00:11:23,600 --> 00:11:26,640
when evaluated on a random point

300
00:11:26,640 --> 00:11:29,760
in our case the q polynomial is defined

301
00:11:29,760 --> 00:11:30,000
as

302
00:11:30,000 --> 00:11:33,200
p minus s times t which is nonzero

303
00:11:33,200 --> 00:11:36,399
if one of the inverses t has been

304
00:11:36,399 --> 00:11:38,800
wrongfully injected so it's actually not

305
00:11:38,800 --> 00:11:43,440
equal to the corresponding input

306
00:11:43,440 --> 00:11:45,519
one thing to note here is that opening

307
00:11:45,519 --> 00:11:47,040
these values of

308
00:11:47,040 --> 00:11:49,040
s and t at a random point will leak

309
00:11:49,040 --> 00:11:50,160
information

310
00:11:50,160 --> 00:11:52,160
because the polynomials are not

311
00:11:52,160 --> 00:11:54,240
randomized so we do exactly this

312
00:11:54,240 --> 00:11:57,279
and we add an additional random point

313
00:11:57,279 --> 00:12:00,720
to prevent this leakage

314
00:12:01,600 --> 00:12:04,639
so uh this is how we can

315
00:12:04,639 --> 00:12:06,560
bound our soundness for this part of the

316
00:12:06,560 --> 00:12:08,000
the verification

317
00:12:08,000 --> 00:12:10,959
by noting that p is of degree two times

318
00:12:10,959 --> 00:12:12,480
m

319
00:12:12,480 --> 00:12:14,639
and therefore uh we we need to ensure

320
00:12:14,639 --> 00:12:16,240
that if we choose a field which is much

321
00:12:16,240 --> 00:12:17,760
larger than the number of gates in the

322
00:12:17,760 --> 00:12:18,720
circuit

323
00:12:18,720 --> 00:12:21,920
then uh this this soundless bound will

324
00:12:21,920 --> 00:12:25,200
tend to negligible

325
00:12:25,200 --> 00:12:26,880
so here we can have our improved

326
00:12:26,880 --> 00:12:28,320
protocol

327
00:12:28,320 --> 00:12:29,920
where we commit to a randomized

328
00:12:29,920 --> 00:12:32,560
polynomial s which contains the inputs

329
00:12:32,560 --> 00:12:34,720
and the polynomial t which contains the

330
00:12:34,720 --> 00:12:36,800
inverses

331
00:12:36,800 --> 00:12:39,519
the p can be defined for its first

332
00:12:39,519 --> 00:12:40,320
endpoints

333
00:12:40,320 --> 00:12:42,880
uh in the in the clear because we are

334
00:12:42,880 --> 00:12:43,920
expecting

335
00:12:43,920 --> 00:12:46,240
the first m points to be equal to one

336
00:12:46,240 --> 00:12:48,399
however the prover needs to specify

337
00:12:48,399 --> 00:12:51,279
the remaining m plus one points to

338
00:12:51,279 --> 00:12:54,320
because p is of degree to m

339
00:12:54,320 --> 00:12:56,320
so this adds an additional communication

340
00:12:56,320 --> 00:12:59,040
cost and the parties can now open

341
00:12:59,040 --> 00:13:02,079
p s and t evaluated at the random point

342
00:13:02,079 --> 00:13:02,800
r

343
00:13:02,800 --> 00:13:05,519
uh which has a further constant cost of

344
00:13:05,519 --> 00:13:07,200
three rounds

345
00:13:07,200 --> 00:13:09,279
so in total we see here that we have

346
00:13:09,279 --> 00:13:12,240
only two times the number of gates

347
00:13:12,240 --> 00:13:14,320
in our communication costs so we've

348
00:13:14,320 --> 00:13:15,519
almost halved

349
00:13:15,519 --> 00:13:17,600
the the cost of the communication

350
00:13:17,600 --> 00:13:18,560
already

351
00:13:18,560 --> 00:13:20,720
and we've removed any kind of cut and

352
00:13:20,720 --> 00:13:22,320
choose so we're not

353
00:13:22,320 --> 00:13:24,800
executing the circuit wastefully anymore

354
00:13:24,800 --> 00:13:25,440
and we

355
00:13:25,440 --> 00:13:28,560
don't have any triples except that we do

356
00:13:28,560 --> 00:13:30,880
it's hidden in the the point evaluated

357
00:13:30,880 --> 00:13:34,160
as zero required for randomization

358
00:13:34,160 --> 00:13:35,680
here i'll just note that the extra

359
00:13:35,680 --> 00:13:37,760
randomness in the polynomial s

360
00:13:37,760 --> 00:13:41,440
is prevented to prevent is added sorry

361
00:13:41,440 --> 00:13:43,279
to prevent

362
00:13:43,279 --> 00:13:44,959
pairs interacting with each other and

363
00:13:44,959 --> 00:13:46,560
correcting off each other

364
00:13:46,560 --> 00:13:47,920
but it doesn't add anything to

365
00:13:47,920 --> 00:13:50,560
communication

366
00:13:51,120 --> 00:13:53,440
but now that we have this check we can

367
00:13:53,440 --> 00:13:54,720
further improve it

368
00:13:54,720 --> 00:13:57,199
and to see how we do this uh first let

369
00:13:57,199 --> 00:13:57,920
me

370
00:13:57,920 --> 00:13:59,600
rewrite in some sense what we are

371
00:13:59,600 --> 00:14:02,000
verifying so

372
00:14:02,000 --> 00:14:04,480
the horizontal vector here is the s

373
00:14:04,480 --> 00:14:06,399
polynomial with the randomized

374
00:14:06,399 --> 00:14:08,320
coefficients added

375
00:14:08,320 --> 00:14:10,240
and what essentially we are checking is

376
00:14:10,240 --> 00:14:12,000
that the inner product of this

377
00:14:12,000 --> 00:14:13,120
randomized vector

378
00:14:13,120 --> 00:14:15,519
with the vector of injected inverses

379
00:14:15,519 --> 00:14:17,360
should equal to the sum of the random

380
00:14:17,360 --> 00:14:19,839
coefficients

381
00:14:19,839 --> 00:14:22,639
what we can do is factor our number of

382
00:14:22,639 --> 00:14:23,680
nonlinear gates

383
00:14:23,680 --> 00:14:27,120
m into m1 and m2 and instead of varying

384
00:14:27,120 --> 00:14:29,680
or verifying one inner product of size m

385
00:14:29,680 --> 00:14:31,040
we're going to verify

386
00:14:31,040 --> 00:14:34,160
m2 inner products each of size m1 so we

387
00:14:34,160 --> 00:14:35,279
just rearrange our

388
00:14:35,279 --> 00:14:38,000
s and t values to fit into these inner

389
00:14:38,000 --> 00:14:39,920
products

390
00:14:39,920 --> 00:14:41,440
to do this we're going to define

391
00:14:41,440 --> 00:14:44,399
multiple s and t polynomials

392
00:14:44,399 --> 00:14:46,079
to match with the vectors i was just

393
00:14:46,079 --> 00:14:48,079
describing but we're going to use a

394
00:14:48,079 --> 00:14:48,800
single p

395
00:14:48,800 --> 00:14:51,040
polynomial which is going to be the sum

396
00:14:51,040 --> 00:14:53,839
of the products

397
00:14:54,399 --> 00:14:56,240
now we can directly lead to this

398
00:14:56,240 --> 00:14:58,639
generalized verification protocol

399
00:14:58,639 --> 00:15:00,959
now the commitments to the t polynomials

400
00:15:00,959 --> 00:15:02,399
are still going to cost

401
00:15:02,399 --> 00:15:04,880
m elements but the commitment to the p

402
00:15:04,880 --> 00:15:06,720
polynomial is going to require

403
00:15:06,720 --> 00:15:10,880
m2 because its degree has changed

404
00:15:10,959 --> 00:15:14,079
and uh when we open the

405
00:15:14,079 --> 00:15:16,720
the polynomials evaluated at r here we

406
00:15:16,720 --> 00:15:17,120
are we

407
00:15:17,120 --> 00:15:20,000
require more than before because we're

408
00:15:20,000 --> 00:15:20,720
evaluating

409
00:15:20,720 --> 00:15:23,360
we're evaluating more polynomials but

410
00:15:23,360 --> 00:15:25,760
when we sum it all up we see that

411
00:15:25,760 --> 00:15:28,639
the total cost is equal to the size of

412
00:15:28,639 --> 00:15:29,360
the circuit

413
00:15:29,360 --> 00:15:31,920
plus some terms in the square root of

414
00:15:31,920 --> 00:15:32,800
the size

415
00:15:32,800 --> 00:15:35,680
instead of twice the size so for a high

416
00:15:35,680 --> 00:15:36,800
number of gates

417
00:15:36,800 --> 00:15:40,959
this is significant

418
00:15:40,959 --> 00:15:43,120
so now we can put all of this together

419
00:15:43,120 --> 00:15:44,160
into uh

420
00:15:44,160 --> 00:15:47,360
the final signature scheme

421
00:15:47,360 --> 00:15:49,360
the key generation as i said before is

422
00:15:49,360 --> 00:15:51,279
that we sample an aes key

423
00:15:51,279 --> 00:15:53,920
and a plain text of an appropriate

424
00:15:53,920 --> 00:15:55,360
length

425
00:15:55,360 --> 00:15:58,000
such that the execution of the aes

426
00:15:58,000 --> 00:15:58,720
algorithm

427
00:15:58,720 --> 00:16:01,519
doesn't present any zero input to its

428
00:16:01,519 --> 00:16:03,920
xboxes

429
00:16:03,920 --> 00:16:06,079
so in the bbq paper there was an

430
00:16:06,079 --> 00:16:08,560
analysis already which showed that this

431
00:16:08,560 --> 00:16:10,560
reduced the security of the assumption

432
00:16:10,560 --> 00:16:12,560
by only one to three

433
00:16:12,560 --> 00:16:15,839
bits concretely then

434
00:16:15,839 --> 00:16:17,759
uh for the signatures we have the

435
00:16:17,759 --> 00:16:20,160
parameters of m the number of gates

436
00:16:20,160 --> 00:16:22,639
m1 which is the factorization the number

437
00:16:22,639 --> 00:16:24,560
of parties and the

438
00:16:24,560 --> 00:16:27,199
mpc tau is the number of parallel

439
00:16:27,199 --> 00:16:29,120
repetition of the proof to increase

440
00:16:29,120 --> 00:16:30,160
soundness

441
00:16:30,160 --> 00:16:32,160
and lambda is a lifting parameter

442
00:16:32,160 --> 00:16:33,839
because

443
00:16:33,839 --> 00:16:37,839
the aes is executed over f2 to the 8

444
00:16:37,839 --> 00:16:39,600
but because of the soundness requirement

445
00:16:39,600 --> 00:16:41,680
for our check we need to

446
00:16:41,680 --> 00:16:44,000
embed the values we are checking in a

447
00:16:44,000 --> 00:16:45,279
much larger field

448
00:16:45,279 --> 00:16:47,440
to ensure that the soundness is

449
00:16:47,440 --> 00:16:49,360
negligible

450
00:16:49,360 --> 00:16:52,160
to create a signature the prover then

451
00:16:52,160 --> 00:16:52,800
simulates

452
00:16:52,800 --> 00:16:55,040
tau parallel instances each of them with

453
00:16:55,040 --> 00:16:56,639
n parties

454
00:16:56,639 --> 00:17:00,160
and when it's running the parties

455
00:17:00,160 --> 00:17:01,759
together with a sharing of the secret

456
00:17:01,759 --> 00:17:02,480
key

457
00:17:02,480 --> 00:17:04,640
the witness will also include the

458
00:17:04,640 --> 00:17:05,679
sharing of the

459
00:17:05,679 --> 00:17:07,839
inverses this is the injection of the

460
00:17:07,839 --> 00:17:10,079
non-linear outputs

461
00:17:10,079 --> 00:17:12,160
and we use random oracles to generate

462
00:17:12,160 --> 00:17:14,079
randomizing coefficients

463
00:17:14,079 --> 00:17:17,199
the opening polynomial

464
00:17:17,199 --> 00:17:20,160
point and to select the view which leads

465
00:17:20,160 --> 00:17:22,720
to a seven round protocol

466
00:17:22,720 --> 00:17:26,400
which we then make non-interactive

467
00:17:26,400 --> 00:17:28,480
um the verification is just a

468
00:17:28,480 --> 00:17:30,480
recomputation which is why we achieve

469
00:17:30,480 --> 00:17:32,480
very similar runtimes for prover and

470
00:17:32,480 --> 00:17:35,120
verifier

471
00:17:35,200 --> 00:17:38,320
we state here our theorem which

472
00:17:38,320 --> 00:17:40,320
shows that the security depends on some

473
00:17:40,320 --> 00:17:42,000
random oracle assumption

474
00:17:42,000 --> 00:17:46,320
some pseudorandom distributions um

475
00:17:46,320 --> 00:17:48,960
and most most importantly the fact that

476
00:17:48,960 --> 00:17:50,400
the function which maps

477
00:17:50,400 --> 00:17:53,840
the key to the ciphertext block uh

478
00:17:53,840 --> 00:17:56,160
because the plain text is public here

479
00:17:56,160 --> 00:17:58,080
this is a one-way function so this is

480
00:17:58,080 --> 00:17:59,919
where our one-way function on

481
00:17:59,919 --> 00:18:02,960
a yes the assumption on aes

482
00:18:02,960 --> 00:18:07,200
lies finally to discuss a little bit the

483
00:18:07,200 --> 00:18:09,919
implementation

484
00:18:09,919 --> 00:18:12,160
to explain our parameter selection we

485
00:18:12,160 --> 00:18:14,240
consider that an attacker can cheat

486
00:18:14,240 --> 00:18:16,400
by resampling the challenges of each

487
00:18:16,400 --> 00:18:18,480
intermediary round until they match

488
00:18:18,480 --> 00:18:21,760
a guess that it's made so say that the

489
00:18:21,760 --> 00:18:23,600
adversary would guess

490
00:18:23,600 --> 00:18:26,799
tao 1 of the first round

491
00:18:26,799 --> 00:18:29,039
challenge and tau two of the second

492
00:18:29,039 --> 00:18:29,919
round

493
00:18:29,919 --> 00:18:31,760
then he will have to guess the remaining

494
00:18:31,760 --> 00:18:33,360
tau three to win

495
00:18:33,360 --> 00:18:36,160
uh each ex to reach to win all of the

496
00:18:36,160 --> 00:18:38,799
executions

497
00:18:39,200 --> 00:18:42,080
now um if we let pi denote the

498
00:18:42,080 --> 00:18:43,919
probability that he has correctly

499
00:18:43,919 --> 00:18:45,840
guessed these challenges we can write

500
00:18:45,840 --> 00:18:46,240
the

501
00:18:46,240 --> 00:18:49,600
cost formula for a particularly

502
00:18:49,600 --> 00:18:52,879
particular given strategy

503
00:18:53,039 --> 00:18:55,600
then we simply require that this cost be

504
00:18:55,600 --> 00:18:56,720
greater than

505
00:18:56,720 --> 00:18:58,400
2 to the kappa for our security

506
00:18:58,400 --> 00:19:00,960
parameter for every possible strategy

507
00:19:00,960 --> 00:19:04,000
and we increase our parameters until

508
00:19:04,000 --> 00:19:06,240
this is reached

509
00:19:06,240 --> 00:19:08,799
and we furthermore added by choosing m1

510
00:19:08,799 --> 00:19:10,799
to be about the square root of m

511
00:19:10,799 --> 00:19:12,640
gives an appropriate balance between

512
00:19:12,640 --> 00:19:16,320
speed and signature size

513
00:19:16,720 --> 00:19:19,760
so this table demonstrate the variation

514
00:19:19,760 --> 00:19:21,120
in performance as we

515
00:19:21,120 --> 00:19:24,480
vary the parameters so these are all for

516
00:19:24,480 --> 00:19:27,840
uh 120 as128

517
00:19:27,840 --> 00:19:29,760
then below you can see the factorization

518
00:19:29,760 --> 00:19:30,960
of the number of uh

519
00:19:30,960 --> 00:19:34,000
s boxes that we use and we see that by

520
00:19:34,000 --> 00:19:37,760
increasing n the number of parties we

521
00:19:37,760 --> 00:19:40,000
of course increase the computation time

522
00:19:40,000 --> 00:19:41,919
because the prover has to simulate more

523
00:19:41,919 --> 00:19:44,480
parties but we also reduce the signature

524
00:19:44,480 --> 00:19:45,039
size

525
00:19:45,039 --> 00:19:48,720
um and then each line further divides

526
00:19:48,720 --> 00:19:52,000
uh the results between the

527
00:19:52,000 --> 00:19:54,000
different lambda values which is how

528
00:19:54,000 --> 00:19:55,039
high we lift

529
00:19:55,039 --> 00:19:57,840
the values during the check and this

530
00:19:57,840 --> 00:19:59,520
affects sounders because we see that the

531
00:19:59,520 --> 00:20:00,559
tau requirement

532
00:20:00,559 --> 00:20:02,159
differs as well the number of parallel

533
00:20:02,159 --> 00:20:04,720
repetitions

534
00:20:04,720 --> 00:20:07,600
um we've optimized the implementation in

535
00:20:07,600 --> 00:20:09,120
different

536
00:20:09,120 --> 00:20:12,320
ways first we noticed

537
00:20:12,320 --> 00:20:14,320
that all interpolation points have the

538
00:20:14,320 --> 00:20:16,480
same x coordinates so we can pre-compute

539
00:20:16,480 --> 00:20:18,080
some coefficients

540
00:20:18,080 --> 00:20:20,720
instead of interpolating polynomials for

541
00:20:20,720 --> 00:20:21,840
each party

542
00:20:21,840 --> 00:20:24,080
the prover has an overview of everything

543
00:20:24,080 --> 00:20:24,960
so

544
00:20:24,960 --> 00:20:27,440
it can reconstruct the polynomials in an

545
00:20:27,440 --> 00:20:28,799
unshared fashion

546
00:20:28,799 --> 00:20:30,559
and then interpolate which takes a

547
00:20:30,559 --> 00:20:32,840
factor of n out of the computational

548
00:20:32,840 --> 00:20:35,039
load

549
00:20:35,039 --> 00:20:37,679
and also for the s and t polynomials

550
00:20:37,679 --> 00:20:38,480
we're

551
00:20:38,480 --> 00:20:40,240
the inputs are the same for each

552
00:20:40,240 --> 00:20:41,600
parallel execution they're just

553
00:20:41,600 --> 00:20:44,000
shared in different random ways so we

554
00:20:44,000 --> 00:20:45,120
can use this

555
00:20:45,120 --> 00:20:47,600
common values across them to further

556
00:20:47,600 --> 00:20:50,159
optimize the lagrange interpolation

557
00:20:50,159 --> 00:20:52,559
and all of this reduces runtime by

558
00:20:52,559 --> 00:20:55,039
almost 30 times

559
00:20:55,039 --> 00:20:57,600
and then using some further improvements

560
00:20:57,600 --> 00:20:59,600
we can reduce to the runtimes that we've

561
00:20:59,600 --> 00:21:01,760
achieved

562
00:21:01,760 --> 00:21:04,240
finally i've included a table which

563
00:21:04,240 --> 00:21:05,440
compares our

564
00:21:05,440 --> 00:21:08,000
uh banquet scheme for the three bottom

565
00:21:08,000 --> 00:21:10,159
lines with some of the other

566
00:21:10,159 --> 00:21:13,200
state-of-the-art signature sizes

567
00:21:13,200 --> 00:21:15,919
for post-quantum candidates and as

568
00:21:15,919 --> 00:21:18,080
before we see that we are competitive

569
00:21:18,080 --> 00:21:19,600
with picnic 3

570
00:21:19,600 --> 00:21:22,480
in run time and we're really not far off

571
00:21:22,480 --> 00:21:24,559
in signature size

572
00:21:24,559 --> 00:21:28,000
especially with our higher number of

573
00:21:28,000 --> 00:21:29,039
parties

574
00:21:29,039 --> 00:21:30,640
and i'll highlight again here that we

575
00:21:30,640 --> 00:21:32,400
use the

576
00:21:32,400 --> 00:21:35,200
aes circuit which is much more complex

577
00:21:35,200 --> 00:21:36,559
than the picnic

578
00:21:36,559 --> 00:21:40,320
picnic slow mc so thank you for your

579
00:21:40,320 --> 00:21:42,480
attention during this video

580
00:21:42,480 --> 00:21:46,480
here is the imprint number for our paper

581
00:21:46,480 --> 00:21:48,960
and please feel free to contact me or my

582
00:21:48,960 --> 00:21:55,679
co-authors if you have further questions

