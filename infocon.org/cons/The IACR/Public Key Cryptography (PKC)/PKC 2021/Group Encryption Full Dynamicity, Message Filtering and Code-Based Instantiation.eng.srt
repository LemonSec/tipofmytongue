1
00:00:04,000 --> 00:00:05,359
and hello everyone

2
00:00:05,359 --> 00:00:06,960
and i'm going to talk about fully

3
00:00:06,960 --> 00:00:08,800
dynamic group encryption message

4
00:00:08,800 --> 00:00:11,360
filtering and code based instantiation

5
00:00:11,360 --> 00:00:13,200
and it's a joint work with choi and

6
00:00:13,200 --> 00:00:17,040
harness the 590 release to 0

7
00:00:17,760 --> 00:00:20,000
and so first i will record some

8
00:00:20,000 --> 00:00:22,080
background on group encryption

9
00:00:22,080 --> 00:00:23,920
and discuss the limitations and our

10
00:00:23,920 --> 00:00:26,480
motivation then i will state our three

11
00:00:26,480 --> 00:00:28,800
contributions a fully dynamic good

12
00:00:28,800 --> 00:00:30,480
encryption message filtering and the

13
00:00:30,480 --> 00:00:32,079
code-based instantiation

14
00:00:32,079 --> 00:00:35,360
besides our described techniques

15
00:00:35,360 --> 00:00:39,040
unless in summary so that means that we

16
00:00:39,040 --> 00:00:39,440
scroll

17
00:00:39,440 --> 00:00:41,280
encryption group encryption was

18
00:00:41,280 --> 00:00:43,520
introduced by canis cernis and young in

19
00:00:43,520 --> 00:00:45,039
2007

20
00:00:45,039 --> 00:00:47,039
it is the encryption analog of group

21
00:00:47,039 --> 00:00:48,480
signatures

22
00:00:48,480 --> 00:00:50,559
and there are four parties involved the

23
00:00:50,559 --> 00:00:52,559
sender the receiver

24
00:00:52,559 --> 00:00:54,719
and the group manager who manages a

25
00:00:54,719 --> 00:00:56,000
group of receivers

26
00:00:56,000 --> 00:00:58,480
and also there is an opening authority

27
00:00:58,480 --> 00:01:00,559
and who is capable of identifying the

28
00:01:00,559 --> 00:01:03,120
recipient of the ciphertext

29
00:01:03,120 --> 00:01:04,959
and group encryption allows send

30
00:01:04,959 --> 00:01:07,200
verifiably encrypts messages

31
00:01:07,200 --> 00:01:10,080
and to certify boot members while

32
00:01:10,080 --> 00:01:11,680
keeping the anonymity of

33
00:01:11,680 --> 00:01:15,520
the receiver more formally

34
00:01:15,520 --> 00:01:18,159
group encryption allow encrypting while

35
00:01:18,159 --> 00:01:19,520
the following hosts

36
00:01:19,520 --> 00:01:22,080
first the cipher text is well-formed and

37
00:01:22,080 --> 00:01:23,360
can be decrypted

38
00:01:23,360 --> 00:01:26,640
by some registered group members second

39
00:01:26,640 --> 00:01:28,880
the opening authority can identify the

40
00:01:28,880 --> 00:01:30,400
intended receiver

41
00:01:30,400 --> 00:01:33,280
and third the context satisfies certain

42
00:01:33,280 --> 00:01:34,560
requirements

43
00:01:34,560 --> 00:01:36,960
such as being a witness for some public

44
00:01:36,960 --> 00:01:39,439
relation

45
00:01:39,680 --> 00:01:41,280
group encryption scheme have many

46
00:01:41,280 --> 00:01:42,960
appealing privacy preserving

47
00:01:42,960 --> 00:01:45,439
applications a natural application is

48
00:01:45,439 --> 00:01:47,600
for encrypted email filtering

49
00:01:47,600 --> 00:01:50,479
and it allows a firewall to accept only

50
00:01:50,479 --> 00:01:52,320
rails incoming emails

51
00:01:52,320 --> 00:01:54,560
that are intended for some certified

52
00:01:54,560 --> 00:01:56,320
organization user

53
00:01:56,320 --> 00:01:57,840
and it can also find interesting

54
00:01:57,840 --> 00:02:00,560
applications in anonymous trusted

55
00:02:00,560 --> 00:02:03,600
parties and obvious retrieval storage

56
00:02:03,600 --> 00:02:06,079
systems

57
00:02:06,079 --> 00:02:08,639
and now let me briefly review some

58
00:02:08,639 --> 00:02:11,038
previous books on group encryption

59
00:02:11,038 --> 00:02:14,319
and in 2007 kty

60
00:02:14,319 --> 00:02:17,360
introduced the model of group encryption

61
00:02:17,360 --> 00:02:19,599
they also provide concrete instantiation

62
00:02:19,599 --> 00:02:20,959
based on the number theoretical

63
00:02:20,959 --> 00:02:22,400
assumptions

64
00:02:22,400 --> 00:02:24,720
and two years later catalan at all

65
00:02:24,720 --> 00:02:25,599
proposed

66
00:02:25,599 --> 00:02:28,400
a non-interactive realization based on

67
00:02:28,400 --> 00:02:29,280
parents

68
00:02:29,280 --> 00:02:32,239
in the standard model and subsequently

69
00:02:32,239 --> 00:02:34,400
emery and joey they presented a

70
00:02:34,400 --> 00:02:37,440
various efficiency improvements for

71
00:02:37,440 --> 00:02:40,800
parent-based group encryption and libido

72
00:02:40,800 --> 00:02:43,680
proposed a refined tracing mechanism and

73
00:02:43,680 --> 00:02:46,160
enriched the kty model

74
00:02:46,160 --> 00:02:50,640
in 2017 the first construction from

75
00:02:50,640 --> 00:02:53,440
lattice assumptions was presented by

76
00:02:53,440 --> 00:02:56,239
libertado

77
00:02:56,400 --> 00:02:59,200
but so far the group encryption has been

78
00:02:59,200 --> 00:03:00,959
much less well-studied

79
00:03:00,959 --> 00:03:02,720
and we aim to contribute to the

80
00:03:02,720 --> 00:03:04,000
development of

81
00:03:04,000 --> 00:03:06,800
group encryption given its comparing

82
00:03:06,800 --> 00:03:09,760
features and mass application

83
00:03:09,760 --> 00:03:13,360
now we will identify several limitations

84
00:03:13,360 --> 00:03:16,480
of existing group encryption schemes

85
00:03:16,480 --> 00:03:18,800
first limitation exists in user

86
00:03:18,800 --> 00:03:19,840
revocation

87
00:03:19,840 --> 00:03:23,760
the kty model they allow

88
00:03:23,760 --> 00:03:26,480
the dynamic enrollments of new users to

89
00:03:26,480 --> 00:03:27,360
the group

90
00:03:27,360 --> 00:03:30,000
but it does not provide any mechanism to

91
00:03:30,000 --> 00:03:31,760
prevent revoked users

92
00:03:31,760 --> 00:03:34,080
from decrypting new cipher text intended

93
00:03:34,080 --> 00:03:35,360
for them

94
00:03:35,360 --> 00:03:37,920
even though these revoked users were

95
00:03:37,920 --> 00:03:39,200
expelled

96
00:03:39,200 --> 00:03:42,239
from some misbehaviors or

97
00:03:42,239 --> 00:03:46,080
just they already retired from the

98
00:03:46,080 --> 00:03:48,000
organization

99
00:03:48,000 --> 00:03:50,560
so a formal treatment of fully dynamic

100
00:03:50,560 --> 00:03:51,599
group encryption

101
00:03:51,599 --> 00:03:54,879
is fully desirable

102
00:03:54,879 --> 00:03:56,720
the second limitation is about the

103
00:03:56,720 --> 00:03:59,200
usefulness of existing group encryption

104
00:03:59,200 --> 00:04:02,560
in the context of email filtering and

105
00:04:02,560 --> 00:04:04,400
which we have mentioned as the most

106
00:04:04,400 --> 00:04:06,560
natural application

107
00:04:06,560 --> 00:04:08,799
and in all no instantiation of group

108
00:04:08,799 --> 00:04:09,680
encryption

109
00:04:09,680 --> 00:04:11,840
the relations for message are defined

110
00:04:11,840 --> 00:04:13,760
according to the computationally hard

111
00:04:13,760 --> 00:04:14,879
problems

112
00:04:14,879 --> 00:04:17,759
for example the discrete log relation is

113
00:04:17,759 --> 00:04:18,399
employed

114
00:04:18,399 --> 00:04:22,240
in kty model for message filtering

115
00:04:22,240 --> 00:04:24,560
and this treatment fit the definition of

116
00:04:24,560 --> 00:04:26,000
good encryption

117
00:04:26,000 --> 00:04:28,880
but in our real life it is hard to

118
00:04:28,880 --> 00:04:30,080
sample the witness

119
00:04:30,080 --> 00:04:33,600
satisfy the relation so

120
00:04:33,600 --> 00:04:35,840
can we design good encryption with

121
00:04:35,840 --> 00:04:37,520
expressive policies

122
00:04:37,520 --> 00:04:41,120
instead of using some heart problem

123
00:04:41,120 --> 00:04:43,759
and third regarding the diversity of

124
00:04:43,759 --> 00:04:45,280
concrete computational

125
00:04:45,280 --> 00:04:48,400
assumptions are used in constructing

126
00:04:48,400 --> 00:04:50,479
group encryptions

127
00:04:50,479 --> 00:04:52,720
among all existing skins the only one

128
00:04:52,720 --> 00:04:55,440
that is known to be content resistant

129
00:04:55,440 --> 00:04:57,360
is the lattice-based construction from

130
00:04:57,360 --> 00:04:58,639
libel at all

131
00:04:58,639 --> 00:05:01,759
and this reads the question of realizing

132
00:05:01,759 --> 00:05:02,639
group

133
00:05:02,639 --> 00:05:05,520
encryption based on alternative quantum

134
00:05:05,520 --> 00:05:07,440
resistant assumptions

135
00:05:07,440 --> 00:05:10,479
such as can we construct code-based

136
00:05:10,479 --> 00:05:11,039
group

137
00:05:11,039 --> 00:05:13,919
encryption scheme

138
00:05:14,400 --> 00:05:16,160
so in our work we have three

139
00:05:16,160 --> 00:05:18,400
contributions and first

140
00:05:18,400 --> 00:05:21,199
the formalization of fully dynamic group

141
00:05:21,199 --> 00:05:22,320
encryption

142
00:05:22,320 --> 00:05:24,720
and second we realize message filtering

143
00:05:24,720 --> 00:05:25,600
with two

144
00:05:25,600 --> 00:05:29,600
expressive policies and third

145
00:05:29,600 --> 00:05:31,680
we can share the first code based

146
00:05:31,680 --> 00:05:32,639
encryption scheme

147
00:05:32,639 --> 00:05:34,479
that follows our fully dynamic group

148
00:05:34,479 --> 00:05:35,759
encryption model

149
00:05:35,759 --> 00:05:38,000
and support both of the two message

150
00:05:38,000 --> 00:05:41,039
filtering policies

151
00:05:41,199 --> 00:05:43,600
now i will go to the first contribution

152
00:05:43,600 --> 00:05:46,720
fully dynamic code encryption

153
00:05:46,720 --> 00:05:49,440
fully dynamic encryption is an

154
00:05:49,440 --> 00:05:51,520
encryption analog to the fully dynamic

155
00:05:51,520 --> 00:05:53,360
group signatures

156
00:05:53,360 --> 00:05:55,759
as for the fully dynamicity this means

157
00:05:55,759 --> 00:05:56,639
the user

158
00:05:56,639 --> 00:05:59,120
has flexibility in joining and leaving

159
00:05:59,120 --> 00:06:00,479
the groups

160
00:06:00,479 --> 00:06:03,600
at the choice of group manager and also

161
00:06:03,600 --> 00:06:06,960
the group manager can update the group

162
00:06:06,960 --> 00:06:12,318
periodically to reflect user revocation

163
00:06:12,639 --> 00:06:14,400
and now i will briefly introduce the

164
00:06:14,400 --> 00:06:17,039
model of free dynamic group encryption

165
00:06:17,039 --> 00:06:19,680
and first the open authority and the

166
00:06:19,680 --> 00:06:20,880
group manager

167
00:06:20,880 --> 00:06:23,280
ran set up regulations to produce their

168
00:06:23,280 --> 00:06:24,319
own

169
00:06:24,319 --> 00:06:27,120
public and secret key pair in this

170
00:06:27,120 --> 00:06:27,759
drawing and

171
00:06:27,759 --> 00:06:30,720
issue disease and interactive practical

172
00:06:30,720 --> 00:06:31,600
securely

173
00:06:31,600 --> 00:06:34,479
run between the user and the group

174
00:06:34,479 --> 00:06:35,440
manager

175
00:06:35,440 --> 00:06:38,880
and the user can obtain its own public

176
00:06:38,880 --> 00:06:40,240
key and secret key

177
00:06:40,240 --> 00:06:42,319
and the good manager updates the group

178
00:06:42,319 --> 00:06:44,880
information

179
00:06:44,880 --> 00:06:46,800
since our model enables the group

180
00:06:46,800 --> 00:06:48,240
manager to remove

181
00:06:48,240 --> 00:06:50,800
some users from the group through a

182
00:06:50,800 --> 00:06:52,880
group updating and reason

183
00:06:52,880 --> 00:06:55,520
so in this updating algorithm the group

184
00:06:55,520 --> 00:06:56,160
manager

185
00:06:56,160 --> 00:06:59,199
can advance the input and update

186
00:06:59,199 --> 00:07:02,800
the group information

187
00:07:02,800 --> 00:07:05,840
the sender can encrypt the witness w for

188
00:07:05,840 --> 00:07:07,039
its chosen

189
00:07:07,039 --> 00:07:11,599
users in this encryption acquisition

190
00:07:11,599 --> 00:07:14,560
so this is proof and verification as the

191
00:07:14,560 --> 00:07:16,319
proof algorithm is run by

192
00:07:16,319 --> 00:07:19,280
a sender who acts as a proofer and

193
00:07:19,280 --> 00:07:20,800
demonstrates the

194
00:07:20,800 --> 00:07:24,000
honest computation of the cipher text

195
00:07:24,000 --> 00:07:26,639
and this verification aggregation is run

196
00:07:26,639 --> 00:07:28,319
by any verifier to

197
00:07:28,319 --> 00:07:31,840
check if the proof is valid

198
00:07:31,840 --> 00:07:34,560
and then the user can decrease the

199
00:07:34,560 --> 00:07:36,080
cipher text to get the

200
00:07:36,080 --> 00:07:40,319
messages and open the authority can

201
00:07:40,319 --> 00:07:44,000
anonymize the cipher text in the opening

202
00:07:44,000 --> 00:07:46,560
operation

203
00:07:47,199 --> 00:07:49,840
and we also define three security

204
00:07:49,840 --> 00:07:50,479
notions

205
00:07:50,479 --> 00:07:53,440
message sequency anonymity in cca2 sems

206
00:07:53,440 --> 00:07:55,039
and songness

207
00:07:55,039 --> 00:07:57,440
and all these three notions are

208
00:07:57,440 --> 00:08:00,639
carefully extended from the ktoi model

209
00:08:00,639 --> 00:08:03,919
message sequency protects the appointed

210
00:08:03,919 --> 00:08:06,560
receiver from a malicious adversary who

211
00:08:06,560 --> 00:08:07,840
tries to extract

212
00:08:07,840 --> 00:08:10,000
the information about the encrypted

213
00:08:10,000 --> 00:08:11,360
messages

214
00:08:11,360 --> 00:08:14,479
and the adversary can fully corrupt the

215
00:08:14,479 --> 00:08:17,520
group manager and open society

216
00:08:17,520 --> 00:08:21,199
cchu anonymity in cca2 says

217
00:08:21,199 --> 00:08:24,240
this aims to prevent the adversary from

218
00:08:24,240 --> 00:08:26,479
learning information about the identity

219
00:08:26,479 --> 00:08:28,479
of the receiver

220
00:08:28,479 --> 00:08:31,840
and also the adversary can fully corrupt

221
00:08:31,840 --> 00:08:34,320
group manager and we have an honest

222
00:08:34,320 --> 00:08:36,799
opponent authority

223
00:08:36,799 --> 00:08:39,440
as for soundness soundness protects the

224
00:08:39,440 --> 00:08:40,479
verifier

225
00:08:40,479 --> 00:08:42,719
from accepting a ciphertext that either

226
00:08:42,719 --> 00:08:43,839
does not have the

227
00:08:43,839 --> 00:08:46,880
required structure or cannot be

228
00:08:46,880 --> 00:08:49,920
decrypted by a registered group member

229
00:08:49,920 --> 00:08:52,560
and only partial corruption of open

230
00:08:52,560 --> 00:08:55,440
society here

231
00:08:55,440 --> 00:08:58,399
now i'm going to talk about our second

232
00:08:58,399 --> 00:08:59,680
contribution

233
00:08:59,680 --> 00:09:04,399
message filtering and our goal is to

234
00:09:04,399 --> 00:09:07,279
equip group encryption skin with some

235
00:09:07,279 --> 00:09:10,480
basic yet commonly used policies for

236
00:09:10,480 --> 00:09:14,640
filtering so more precisely

237
00:09:14,640 --> 00:09:18,000
we consider a public list s with s1 to

238
00:09:18,000 --> 00:09:18,880
sk

239
00:09:18,880 --> 00:09:22,320
of k binary keywords and each of them

240
00:09:22,320 --> 00:09:25,040
has bit less t and we need to test

241
00:09:25,040 --> 00:09:25,839
against

242
00:09:25,839 --> 00:09:28,240
the less t sub strings of the encrypted

243
00:09:28,240 --> 00:09:29,920
message w

244
00:09:29,920 --> 00:09:32,959
by the way the public list s can be

245
00:09:32,959 --> 00:09:34,480
regularly updated by

246
00:09:34,480 --> 00:09:37,120
the group manager depending on the

247
00:09:37,120 --> 00:09:38,880
interests or the needs of the

248
00:09:38,880 --> 00:09:40,160
organization

249
00:09:40,160 --> 00:09:43,279
and the keywords si could either be some

250
00:09:43,279 --> 00:09:46,480
good keywords or bad ones then we will

251
00:09:46,480 --> 00:09:48,839
define two policies

252
00:09:48,839 --> 00:09:51,760
permissive and prohibitive

253
00:09:51,760 --> 00:09:55,279
so in the permissive policies we accept

254
00:09:55,279 --> 00:09:58,480
the message w if it contains some good

255
00:09:58,480 --> 00:10:00,160
keywords

256
00:10:00,160 --> 00:10:03,839
informally this means they

257
00:10:03,839 --> 00:10:07,200
some i such that the keywords as i

258
00:10:07,200 --> 00:10:12,160
is a substring of the message w

259
00:10:12,959 --> 00:10:16,160
all the messages that do not contain

260
00:10:16,160 --> 00:10:19,680
any of these keywords are rejected

261
00:10:19,680 --> 00:10:22,959
so and in the prohibitive policy

262
00:10:22,959 --> 00:10:26,000
we accept the message w if it is far

263
00:10:26,000 --> 00:10:26,720
from

264
00:10:26,720 --> 00:10:30,000
some bad keywords and informal words

265
00:10:30,000 --> 00:10:32,720
this means for a freelance t substring y

266
00:10:32,720 --> 00:10:33,600
of w

267
00:10:33,600 --> 00:10:37,680
and for every keyword si uh

268
00:10:37,680 --> 00:10:40,160
they having their hamming distance is at

269
00:10:40,160 --> 00:10:41,360
least d

270
00:10:41,360 --> 00:10:44,800
here the keyword si could correspond to

271
00:10:44,800 --> 00:10:47,040
some topics that are illegal or simply

272
00:10:47,040 --> 00:10:47,839
out of the

273
00:10:47,839 --> 00:10:51,279
group's interest yeah and

274
00:10:51,279 --> 00:10:54,000
also i i will explain the minimum

275
00:10:54,000 --> 00:10:55,040
humming distance d

276
00:10:55,040 --> 00:10:58,399
here is to address spammers who might

277
00:10:58,399 --> 00:10:59,120
slightly

278
00:10:59,120 --> 00:11:01,680
change as i so that it passes the

279
00:11:01,680 --> 00:11:02,640
filtering

280
00:11:02,640 --> 00:11:07,279
while still being somewhat readable yeah

281
00:11:07,279 --> 00:11:09,680
so now now let me introduce our

282
00:11:09,680 --> 00:11:10,399
techniques

283
00:11:10,399 --> 00:11:13,200
regarding to these two policies

284
00:11:13,200 --> 00:11:15,440
regarding the permissive policy

285
00:11:15,440 --> 00:11:18,320
we need to prove that they exist i such

286
00:11:18,320 --> 00:11:18,640
that

287
00:11:18,640 --> 00:11:22,320
s i is a substring of w

288
00:11:22,320 --> 00:11:25,600
first we form a matrix

289
00:11:25,600 --> 00:11:29,440
a capital w here who is colon let's t

290
00:11:29,440 --> 00:11:32,880
sub strings of the message and then

291
00:11:32,880 --> 00:11:35,920
we for matrix s whose column are all the

292
00:11:35,920 --> 00:11:37,040
keywords as i

293
00:11:37,040 --> 00:11:40,959
here we have s12 xk then we will prove

294
00:11:40,959 --> 00:11:44,160
w is legitimate if and only if there

295
00:11:44,160 --> 00:11:48,079
exists a colon wi and

296
00:11:48,079 --> 00:11:52,160
qssg such that wi equal to sj

297
00:11:52,160 --> 00:11:56,480
then this means the message w contains

298
00:11:56,480 --> 00:11:59,680
some good cures

299
00:11:59,680 --> 00:12:02,800
this equivalent to proof that they exist

300
00:12:02,800 --> 00:12:03,600
with one

301
00:12:03,600 --> 00:12:06,959
vectors g and h such that w times vector

302
00:12:06,959 --> 00:12:07,600
g

303
00:12:07,600 --> 00:12:10,959
equal to s times vector h

304
00:12:10,959 --> 00:12:14,000
then in order to handle this relation we

305
00:12:14,000 --> 00:12:14,959
will imply

306
00:12:14,959 --> 00:12:18,079
uh stance permutating techniques

307
00:12:18,079 --> 00:12:21,120
to proof knowledge of such a vector g

308
00:12:21,120 --> 00:12:24,160
and h and then adapt to liberty at those

309
00:12:24,160 --> 00:12:25,360
techniques

310
00:12:25,360 --> 00:12:27,920
uh for proving the welfareness of the

311
00:12:27,920 --> 00:12:30,160
quadratic term

312
00:12:30,160 --> 00:12:34,160
the matrix w times vector g here

313
00:12:34,160 --> 00:12:38,800
w are is squared and g is the secret

314
00:12:38,800 --> 00:12:40,560
we follow the zero knowledge four

315
00:12:40,560 --> 00:12:42,079
quadratic relation

316
00:12:42,079 --> 00:12:44,800
a times r for secret matrix a times the

317
00:12:44,800 --> 00:12:45,839
creative vector f

318
00:12:45,839 --> 00:12:49,200
with some constraint

319
00:12:49,440 --> 00:12:51,839
after we introduce the techniques for

320
00:12:51,839 --> 00:12:53,200
permissive policy then

321
00:12:53,200 --> 00:12:56,160
we go and go ahead to techniques for

322
00:12:56,160 --> 00:12:58,240
prohibitive policy

323
00:12:58,240 --> 00:13:00,720
as for prohibitive policy we need to

324
00:13:00,720 --> 00:13:01,440
prove

325
00:13:01,440 --> 00:13:04,720
for everyone's t substring y of w

326
00:13:04,720 --> 00:13:07,760
and every keywords as i uh their humming

327
00:13:07,760 --> 00:13:10,079
distance is at least d

328
00:13:10,079 --> 00:13:13,200
so we can see the all pairs

329
00:13:13,200 --> 00:13:16,399
of w i and sj and n to prove that

330
00:13:16,399 --> 00:13:19,680
other sums the sums of them

331
00:13:19,680 --> 00:13:22,320
we got we get z here have a humming

332
00:13:22,320 --> 00:13:25,279
weight at least d

333
00:13:25,440 --> 00:13:28,160
and to prove this statement we adapt

334
00:13:28,160 --> 00:13:30,240
techniques in link and o

335
00:13:30,240 --> 00:13:34,399
and we will prove that

336
00:13:34,399 --> 00:13:37,360
perform an extension tricks here first

337
00:13:37,360 --> 00:13:38,399
we append

338
00:13:38,399 --> 00:13:42,399
t minus d coordinates to the vector z

339
00:13:42,399 --> 00:13:45,920
and we get z star this or z star with

340
00:13:45,920 --> 00:13:48,000
length 2 t minus d and humming weight to

341
00:13:48,000 --> 00:13:48,959
be exactly t

342
00:13:48,959 --> 00:13:53,120
here then we have z star with weight t

343
00:13:53,120 --> 00:13:55,920
the original vector z must have wait at

344
00:13:55,920 --> 00:13:56,800
least

345
00:13:56,800 --> 00:13:59,519
t minus t minus d here since we append t

346
00:13:59,519 --> 00:14:00,959
minus d coordinates

347
00:14:00,959 --> 00:14:04,320
here at this point it's satisfied

348
00:14:04,320 --> 00:14:06,560
to use stance permutating technique for

349
00:14:06,560 --> 00:14:07,360
proving

350
00:14:07,360 --> 00:14:12,160
knowledge of fixed weight binary vectors

351
00:14:14,079 --> 00:14:17,040
then follow the model of fully dynamic

352
00:14:17,040 --> 00:14:18,000
group encryption

353
00:14:18,000 --> 00:14:21,040
and the policies we just mentioned we

354
00:14:21,040 --> 00:14:21,839
can

355
00:14:21,839 --> 00:14:25,839
have a code based instantiation

356
00:14:26,240 --> 00:14:29,279
then to design a scheme satisfying

357
00:14:29,279 --> 00:14:31,040
our model of fully dynamic group

358
00:14:31,040 --> 00:14:33,760
encryption we have a modular design

359
00:14:33,760 --> 00:14:36,560
then we need three ingredients here the

360
00:14:36,560 --> 00:14:37,519
first ingredient

361
00:14:37,519 --> 00:14:40,720
is an anonymous cca to secure public key

362
00:14:40,720 --> 00:14:42,079
encryption

363
00:14:42,079 --> 00:14:45,839
skin we need it to encrypt the messages

364
00:14:45,839 --> 00:14:49,279
under the user private key and we will

365
00:14:49,279 --> 00:14:52,079
encrypt the private key and the open

366
00:14:52,079 --> 00:14:54,079
authorities private key

367
00:14:54,079 --> 00:14:57,760
the second ingredient is secure digital

368
00:14:57,760 --> 00:14:58,959
signature

369
00:14:58,959 --> 00:15:00,880
to verify the public keys of good

370
00:15:00,880 --> 00:15:02,480
members

371
00:15:02,480 --> 00:15:06,240
and third we need a group zero knowledge

372
00:15:06,240 --> 00:15:09,040
proof compatible with the encryption and

373
00:15:09,040 --> 00:15:10,399
signature layer

374
00:15:10,399 --> 00:15:12,240
and as well as with the message

375
00:15:12,240 --> 00:15:15,120
filtering layer

376
00:15:15,920 --> 00:15:18,880
and we will adapt the module design to

377
00:15:18,880 --> 00:15:20,639
the code based setting

378
00:15:20,639 --> 00:15:23,600
so the first gradient in code-based

379
00:15:23,600 --> 00:15:24,959
setting we can obtain

380
00:15:24,959 --> 00:15:27,920
from uh we use the randomized mac alice

381
00:15:27,920 --> 00:15:29,040
encryption skin

382
00:15:29,040 --> 00:15:31,839
and the non-neon transformation and the

383
00:15:31,839 --> 00:15:32,639
second

384
00:15:32,639 --> 00:15:36,000
ingredient the secure digital signature

385
00:15:36,000 --> 00:15:36,720
this one

386
00:15:36,720 --> 00:15:40,079
seemed not readily available as

387
00:15:40,079 --> 00:15:42,320
the code based signatures with efficient

388
00:15:42,320 --> 00:15:43,440
xeon argument

389
00:15:43,440 --> 00:15:46,320
are not known to date to tackle this

390
00:15:46,320 --> 00:15:46,800
issue

391
00:15:46,800 --> 00:15:50,480
we replaced this signature scheme by an

392
00:15:50,480 --> 00:15:52,480
accumulator scheme equipped with zero

393
00:15:52,480 --> 00:15:55,839
knowledge argument of membership

394
00:15:55,839 --> 00:15:58,320
and the third ingredient we use the zero

395
00:15:58,320 --> 00:16:02,240
large argument within stance framework

396
00:16:03,680 --> 00:16:05,680
now i will introduce the main idea of

397
00:16:05,680 --> 00:16:08,800
our code-based free dynamical encryption

398
00:16:08,800 --> 00:16:11,759
at first step when the user requests to

399
00:16:11,759 --> 00:16:12,560
join the

400
00:16:12,560 --> 00:16:14,880
group it generates its own public key

401
00:16:14,880 --> 00:16:16,079
and secret key

402
00:16:16,079 --> 00:16:18,800
and then the user sends his public key

403
00:16:18,800 --> 00:16:19,199
and

404
00:16:19,199 --> 00:16:23,279
a non-zero hash value d to group manager

405
00:16:23,279 --> 00:16:26,800
and here we use the macro3 accumulator

406
00:16:26,800 --> 00:16:28,079
to certify

407
00:16:28,079 --> 00:16:31,120
his public key and get the non-zero hash

408
00:16:31,120 --> 00:16:31,759
value d

409
00:16:31,759 --> 00:16:35,040
here second the group manager

410
00:16:35,040 --> 00:16:37,120
first encrypts random messages under the

411
00:16:37,120 --> 00:16:38,399
user's

412
00:16:38,399 --> 00:16:40,320
encryption key and to show that the

413
00:16:40,320 --> 00:16:42,800
user's encryption key are valid

414
00:16:42,800 --> 00:16:45,759
so if the user correctly decrypt it then

415
00:16:45,759 --> 00:16:46,800
the group manager

416
00:16:46,800 --> 00:16:50,000
computes the mac attribute will

417
00:16:50,000 --> 00:16:52,959
or all lymph nodes are the order hash

418
00:16:52,959 --> 00:16:56,399
value of or usd

419
00:16:57,120 --> 00:17:00,399
in our fully dynamic group encryption

420
00:17:00,399 --> 00:17:03,839
in order to achieve the fully dynamicity

421
00:17:03,839 --> 00:17:06,079
we will follow the updating algorithm in

422
00:17:06,079 --> 00:17:09,119
and o so let me explain how user

423
00:17:09,119 --> 00:17:11,359
rotation and the dynamic user enrollment

424
00:17:11,359 --> 00:17:12,400
can be done

425
00:17:12,400 --> 00:17:14,959
in a simple manner based on this

426
00:17:14,959 --> 00:17:18,240
efficiently updatable accumulator so

427
00:17:18,240 --> 00:17:21,280
at the setup phase all leaves in the

428
00:17:21,280 --> 00:17:21,760
tree

429
00:17:21,760 --> 00:17:24,799
are set as zero and

430
00:17:24,799 --> 00:17:27,839
when a new user joins the group then

431
00:17:27,839 --> 00:17:28,480
this

432
00:17:28,480 --> 00:17:31,760
zero is changed to the

433
00:17:31,760 --> 00:17:35,120
zero hash value d of the user

434
00:17:35,120 --> 00:17:37,840
and if the user is later revoked from

435
00:17:37,840 --> 00:17:38,640
the group

436
00:17:38,640 --> 00:17:41,600
then the value is set back to zero and

437
00:17:41,600 --> 00:17:44,559
for each change

438
00:17:44,720 --> 00:17:47,120
the group manager can efficiently update

439
00:17:47,120 --> 00:17:48,400
the the tree

440
00:17:48,400 --> 00:17:51,919
by recomputing the pass in time

441
00:17:51,919 --> 00:17:54,799
big o log n

442
00:17:55,679 --> 00:17:58,080
and then when sender sending a message w

443
00:17:58,080 --> 00:18:00,320
satisfying the permissive or prohibitive

444
00:18:00,320 --> 00:18:01,200
policies

445
00:18:01,200 --> 00:18:04,880
to userj the sender uses the public key

446
00:18:04,880 --> 00:18:06,720
to encrypt the message

447
00:18:06,720 --> 00:18:09,600
and uses the opening authorities public

448
00:18:09,600 --> 00:18:11,200
key to encrypt the

449
00:18:11,200 --> 00:18:14,960
identity of j

450
00:18:14,960 --> 00:18:17,760
as four wheel firmness of ciphertext

451
00:18:17,760 --> 00:18:18,559
sender

452
00:18:18,559 --> 00:18:21,360
need to prove in zero knowledge that the

453
00:18:21,360 --> 00:18:22,480
message

454
00:18:22,480 --> 00:18:26,720
w satisfies the given policy and the

455
00:18:26,720 --> 00:18:29,840
ciphertext of the

456
00:18:30,000 --> 00:18:33,200
identity is an honestly computed

457
00:18:33,200 --> 00:18:36,480
ciphertext of j and cw is a

458
00:18:36,480 --> 00:18:40,320
correct ciphertext of w and it computed

459
00:18:40,320 --> 00:18:43,360
under some hidden private key and whose

460
00:18:43,360 --> 00:18:44,960
hash value

461
00:18:44,960 --> 00:18:47,520
d is not zero at the tree leaf

462
00:18:47,520 --> 00:18:49,200
corresponding to

463
00:18:49,200 --> 00:18:51,840
zj

464
00:18:52,400 --> 00:18:54,400
and i will now introduce the main

465
00:18:54,400 --> 00:18:55,679
difficulty

466
00:18:55,679 --> 00:18:59,200
in our construction and here

467
00:18:59,200 --> 00:19:02,480
we know c w has the form of

468
00:19:02,480 --> 00:19:05,520
p k times r w plus e so

469
00:19:05,520 --> 00:19:08,000
it would require to prove a learning

470
00:19:08,000 --> 00:19:09,679
parity with noise like

471
00:19:09,679 --> 00:19:12,640
relation with hidden by certified matrix

472
00:19:12,640 --> 00:19:14,000
pk

473
00:19:14,000 --> 00:19:16,720
to well-formed encryption readiness r

474
00:19:16,720 --> 00:19:17,679
and e

475
00:19:17,679 --> 00:19:20,960
and a secret message sw which satisfy

476
00:19:20,960 --> 00:19:23,440
some relations

477
00:19:23,440 --> 00:19:25,919
so we will adapt techniques from liberty

478
00:19:25,919 --> 00:19:27,120
o

479
00:19:27,120 --> 00:19:30,160
and follow the zionish argument for

480
00:19:30,160 --> 00:19:33,440
a times r plus e for secret matrix a

481
00:19:33,440 --> 00:19:38,240
secret vector r and some small weight e

482
00:19:38,240 --> 00:19:41,280
now we are able to obtain the first

483
00:19:41,280 --> 00:19:43,280
construction of code-based fully dynamic

484
00:19:43,280 --> 00:19:45,200
group encryption

485
00:19:45,200 --> 00:19:47,360
so in comparison with the only known

486
00:19:47,360 --> 00:19:48,640
group encryption

487
00:19:48,640 --> 00:19:51,840
scheme from post-quantum assumptions

488
00:19:51,840 --> 00:19:52,799
from the label at

489
00:19:52,799 --> 00:19:56,000
all and ours is more efficient and

490
00:19:56,000 --> 00:19:59,120
the main reason is we use

491
00:19:59,120 --> 00:20:02,240
a method tree which can be viewed as

492
00:20:02,240 --> 00:20:05,760
a weak form of signature

493
00:20:05,760 --> 00:20:09,039
however it is still not practical

494
00:20:09,039 --> 00:20:11,360
due to the involvement of havision large

495
00:20:11,360 --> 00:20:13,200
agreement

496
00:20:13,200 --> 00:20:15,520
then there is an interesting open

497
00:20:15,520 --> 00:20:16,320
question

498
00:20:16,320 --> 00:20:19,200
so can we construct practically usable

499
00:20:19,200 --> 00:20:20,240
fully dynamically

500
00:20:20,240 --> 00:20:22,400
encryption skin from post quantum

501
00:20:22,400 --> 00:20:24,720
assumptions

502
00:20:24,720 --> 00:20:28,000
last is summary so

503
00:20:28,000 --> 00:20:30,400
we give a formalization of fully dynamic

504
00:20:30,400 --> 00:20:31,600
group encryption

505
00:20:31,600 --> 00:20:34,080
we realize two basic and commonly used

506
00:20:34,080 --> 00:20:36,159
policies for message filtering

507
00:20:36,159 --> 00:20:38,320
and we can check the first code based

508
00:20:38,320 --> 00:20:40,000
group encryption

509
00:20:40,000 --> 00:20:46,320
so thank you for listening

