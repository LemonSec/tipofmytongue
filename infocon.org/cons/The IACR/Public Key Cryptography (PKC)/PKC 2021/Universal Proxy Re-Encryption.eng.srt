1
00:00:01,199 --> 00:00:04,240
hi i'm leo i'm going to talk about

2
00:00:04,240 --> 00:00:07,120
universal proxy encryption this is a

3
00:00:07,120 --> 00:00:08,320
joint work with

4
00:00:08,320 --> 00:00:11,200
nico doctoring

5
00:00:11,679 --> 00:00:14,400
in this work we put forward the notion

6
00:00:14,400 --> 00:00:16,400
of universal proxy encryption

7
00:00:16,400 --> 00:00:18,720
which is a generalization of proxy

8
00:00:18,720 --> 00:00:20,080
encryption

9
00:00:20,080 --> 00:00:23,680
we present two constructions one is upre

10
00:00:23,680 --> 00:00:24,800
scheme based on

11
00:00:24,800 --> 00:00:27,920
obfuscation the other one is a relaxed

12
00:00:27,920 --> 00:00:30,480
version of upre based on garbage

13
00:00:30,480 --> 00:00:33,039
circuits

14
00:00:33,680 --> 00:00:36,880
first i introduce standard proxy

15
00:00:36,880 --> 00:00:39,440
encryption

16
00:00:39,600 --> 00:00:42,879
let's consider the following scenario

17
00:00:42,879 --> 00:00:46,800
alice sends an encrypted email to bob

18
00:00:46,800 --> 00:00:50,320
bob is on vacation so he want to forward

19
00:00:50,320 --> 00:00:54,160
emails to chris during his vacation

20
00:00:54,160 --> 00:00:57,120
however chris cannot decrypt the

21
00:00:57,120 --> 00:00:58,239
encrypted email

22
00:00:58,239 --> 00:01:00,320
since chris does not have bob's

23
00:01:00,320 --> 00:01:02,960
decryption key

24
00:01:02,960 --> 00:01:06,560
proxy encryption solves this problem

25
00:01:06,560 --> 00:01:09,439
in proxy re-encryption we have a weak

26
00:01:09,439 --> 00:01:10,799
encryption key generation

27
00:01:10,799 --> 00:01:13,600
algorithm that takes the relator's key

28
00:01:13,600 --> 00:01:13,840
and

29
00:01:13,840 --> 00:01:17,360
delegates key as inputs and outputs are

30
00:01:17,360 --> 00:01:19,520
re-encryption key

31
00:01:19,520 --> 00:01:22,400
bob is a delegator and chris is a

32
00:01:22,400 --> 00:01:23,920
delegate

33
00:01:23,920 --> 00:01:27,840
there is a proxy which

34
00:01:28,400 --> 00:01:31,360
is given a re-encryption key and runs a

35
00:01:31,360 --> 00:01:34,880
re-encryption algorithm

36
00:01:34,880 --> 00:01:37,040
the re-encryption algorithm takes

37
00:01:37,040 --> 00:01:38,560
delegated ciphertext

38
00:01:38,560 --> 00:01:41,759
and the re-encryption key as inputs and

39
00:01:41,759 --> 00:01:44,560
outputs are re-encrypted ciphertext for

40
00:01:44,560 --> 00:01:46,640
delegate

41
00:01:46,640 --> 00:01:50,000
the derogative quiz can decrypt

42
00:01:50,000 --> 00:01:53,119
the lee encrypted ciphertext by using

43
00:01:53,119 --> 00:01:56,240
the derivatives key

44
00:01:59,119 --> 00:02:01,920
there are many applications of proxy

45
00:02:01,920 --> 00:02:03,119
encryption

46
00:02:03,119 --> 00:02:06,320
encrypted email forwarding encrypted

47
00:02:06,320 --> 00:02:09,520
file storage secure published subscribe

48
00:02:09,520 --> 00:02:10,639
operation

49
00:02:10,639 --> 00:02:15,359
secure payment system for credit cards

50
00:02:16,319 --> 00:02:19,760
however all existing pre schemes are

51
00:02:19,760 --> 00:02:20,640
constructed

52
00:02:20,640 --> 00:02:23,680
from scratch that is we need to

53
00:02:23,680 --> 00:02:27,440
deploy a new pre scheme we cannot

54
00:02:27,440 --> 00:02:30,160
directly use already deployed

55
00:02:30,160 --> 00:02:31,120
cryptography

56
00:02:31,120 --> 00:02:34,959
as it is for achieving pre

57
00:02:34,959 --> 00:02:38,000
we want to use existing pke schemes

58
00:02:38,000 --> 00:02:40,239
as they are for achieving proxy

59
00:02:40,239 --> 00:02:43,200
re-encryption mechanism

60
00:02:43,200 --> 00:02:46,400
moreover existing pre scheme cannot

61
00:02:46,400 --> 00:02:47,920
convert a ciphertext

62
00:02:47,920 --> 00:02:52,238
into a ciphertext of another scheme

63
00:02:53,040 --> 00:02:55,680
our question is can we convert the

64
00:02:55,680 --> 00:02:56,400
ciphertext

65
00:02:56,400 --> 00:02:59,599
of some pke scheme into a ciphertext of

66
00:02:59,599 --> 00:03:01,680
another pk scheme

67
00:03:01,680 --> 00:03:04,800
for example an ergomal ciphertext into a

68
00:03:04,800 --> 00:03:07,840
regular ciphertext

69
00:03:09,599 --> 00:03:12,720
universal proxy encryption enables such

70
00:03:12,720 --> 00:03:16,319
conversions there are two different pke

71
00:03:16,319 --> 00:03:17,120
schemes

72
00:03:17,120 --> 00:03:21,280
elgamal and regiff for example

73
00:03:21,360 --> 00:03:23,760
each key generation algorithm generates

74
00:03:23,760 --> 00:03:25,920
a key pair

75
00:03:25,920 --> 00:03:30,238
each encryption algorithm generates a

76
00:03:30,840 --> 00:03:32,080
ciphertext

77
00:03:32,080 --> 00:03:35,200
uplv scheme consists of re-encryption

78
00:03:35,200 --> 00:03:36,799
key generation algorithm

79
00:03:36,799 --> 00:03:40,400
and re-encryption algorithm

80
00:03:40,400 --> 00:03:43,120
a re-encryption key generation algorithm

81
00:03:43,120 --> 00:03:45,440
takes delegator's decryption key

82
00:03:45,440 --> 00:03:49,120
and delegate is public key as inputs

83
00:03:49,120 --> 00:03:53,440
and outputs are re-encryption key

84
00:03:54,480 --> 00:03:57,680
a re-encryption algorithm takes a

85
00:03:57,680 --> 00:04:01,040
delegated ciphertext and re-encryption

86
00:04:01,040 --> 00:04:01,840
key

87
00:04:01,840 --> 00:04:06,480
and outputs are re-encrypted ciphertext

88
00:04:06,799 --> 00:04:09,840
here the re-encrypted ciphertext is in

89
00:04:09,840 --> 00:04:11,360
the ciphertext space

90
00:04:11,360 --> 00:04:15,280
of delete's scheme so we can decrypt

91
00:04:15,280 --> 00:04:17,918
the re-encrypted ciphertext by using the

92
00:04:17,918 --> 00:04:19,199
decryption algorithm

93
00:04:19,199 --> 00:04:21,519
of delegates scheme and delegate's

94
00:04:21,519 --> 00:04:24,400
decryption key

95
00:04:27,440 --> 00:04:30,560
we can consider a relaxed version of

96
00:04:30,560 --> 00:04:34,160
upre the difference is that

97
00:04:34,160 --> 00:04:37,280
a re-encrypted ciphertext is not in the

98
00:04:37,280 --> 00:04:38,000
ciphertext

99
00:04:38,000 --> 00:04:42,320
space of delegates scheme

100
00:04:42,320 --> 00:04:45,040
we need a modified decryption algorithm

101
00:04:45,040 --> 00:04:48,240
in relaxed upre

102
00:04:48,240 --> 00:04:50,720
although we cannot use the original

103
00:04:50,720 --> 00:04:52,000
decryption algorithm

104
00:04:52,000 --> 00:04:55,440
of derivative we can use the original

105
00:04:55,440 --> 00:04:56,000
decryption

106
00:04:56,000 --> 00:04:59,360
key of delegated scheme this is

107
00:04:59,360 --> 00:05:02,720
relaxed upre

108
00:05:04,880 --> 00:05:07,680
there are two important notions in pre

109
00:05:07,680 --> 00:05:09,520
and upre

110
00:05:09,520 --> 00:05:13,360
one is the number of re-encryption

111
00:05:13,360 --> 00:05:16,000
if a re-encrypted ciphertext cannot be

112
00:05:16,000 --> 00:05:17,039
re-encrypted

113
00:05:17,039 --> 00:05:21,599
anymore we call singlehop

114
00:05:21,759 --> 00:05:24,320
if we can re-encrypt a re-encrypted

115
00:05:24,320 --> 00:05:26,479
ciphertext again and again

116
00:05:26,479 --> 00:05:30,080
we call multi-hope

117
00:05:31,120 --> 00:05:33,440
the other one is the direction of

118
00:05:33,440 --> 00:05:36,160
re-encryption

119
00:05:36,720 --> 00:05:39,120
if a re-encryption key can convert the

120
00:05:39,120 --> 00:05:41,919
delegator's ciphertext into a delegated

121
00:05:41,919 --> 00:05:42,880
ciphertext

122
00:05:42,880 --> 00:05:48,479
and vice versa we call bi-directional

123
00:05:48,960 --> 00:05:51,600
if a re-encryption key can convert in

124
00:05:51,600 --> 00:05:53,199
one way direction

125
00:05:53,199 --> 00:05:56,800
we call unidirectional

126
00:05:57,600 --> 00:06:01,120
upre has a new application

127
00:06:01,120 --> 00:06:04,639
let's consider the following scenario

128
00:06:04,639 --> 00:06:07,759
we upload tremendous amount of encrypted

129
00:06:07,759 --> 00:06:10,960
data to a cloud storage

130
00:06:10,960 --> 00:06:13,680
at some point a practical quantum

131
00:06:13,680 --> 00:06:14,560
computer is

132
00:06:14,560 --> 00:06:19,520
available or a pk scheme is impelled

133
00:06:19,520 --> 00:06:22,319
then we need to migrate to another pk

134
00:06:22,319 --> 00:06:24,319
scheme

135
00:06:24,319 --> 00:06:27,440
however we do not want to download all

136
00:06:27,440 --> 00:06:28,800
ciphertexts

137
00:06:28,800 --> 00:06:32,880
from the cloud upre enables us

138
00:06:32,880 --> 00:06:35,360
to delegate the cloud to convert

139
00:06:35,360 --> 00:06:36,319
ciphertext

140
00:06:36,319 --> 00:06:39,440
of all the schemes into ciphertexts of

141
00:06:39,440 --> 00:06:42,160
new schemes

142
00:06:43,759 --> 00:06:46,880
in this work we present definitions of

143
00:06:46,880 --> 00:06:48,080
upre

144
00:06:48,080 --> 00:06:51,360
and constructions of upre

145
00:06:51,360 --> 00:06:54,240
the first scheme is multi-hop upre

146
00:06:54,240 --> 00:06:54,800
scheme

147
00:06:54,800 --> 00:06:58,000
for some class of pk based on

148
00:06:58,000 --> 00:07:00,160
probabilistic indistinguishability

149
00:07:00,160 --> 00:07:01,360
obviously

150
00:07:01,360 --> 00:07:05,199
and one-way functions the second scheme

151
00:07:05,199 --> 00:07:08,240
is multi-top relaxed upre scheme

152
00:07:08,240 --> 00:07:13,520
for any pke based on global circuit

153
00:07:15,280 --> 00:07:17,840
let's see more formal definitions of

154
00:07:17,840 --> 00:07:20,560
upre

155
00:07:21,680 --> 00:07:24,880
this is the syntax of upre

156
00:07:24,880 --> 00:07:27,199
re-encryption key generation algorithm

157
00:07:27,199 --> 00:07:29,440
takes two descriptions of

158
00:07:29,440 --> 00:07:32,400
schemes a decryption key and a public

159
00:07:32,400 --> 00:07:33,039
key

160
00:07:33,039 --> 00:07:37,199
as input and output re-encryption key

161
00:07:37,199 --> 00:07:41,280
note that two schemes could be different

162
00:07:41,280 --> 00:07:43,599
re-encryption algorithm takes two

163
00:07:43,599 --> 00:07:45,280
descriptions of schemes

164
00:07:45,280 --> 00:07:47,680
a re-encryption key and the delegated

165
00:07:47,680 --> 00:07:48,639
ciphertext as

166
00:07:48,639 --> 00:07:51,680
inputs and outputs are re-encrypted

167
00:07:51,680 --> 00:07:54,160
ciphertext

168
00:07:54,160 --> 00:07:57,440
in upre a re-encrypted ciphertext is a

169
00:07:57,440 --> 00:07:58,160
ciphertext

170
00:07:58,160 --> 00:08:01,520
of scheme sigma b

171
00:08:03,280 --> 00:08:06,560
in relaxed upr e our

172
00:08:06,560 --> 00:08:09,120
encrypted ciphertext is not a ciphertext

173
00:08:09,120 --> 00:08:11,520
of sigma b

174
00:08:11,520 --> 00:08:15,280
so in relaxed upre we have a modified

175
00:08:15,280 --> 00:08:17,599
decryption algorithm

176
00:08:17,599 --> 00:08:19,759
this is different from the decryption

177
00:08:19,759 --> 00:08:21,520
algorithm of sigma b

178
00:08:21,520 --> 00:08:24,560
but we can use the decryption key skb of

179
00:08:24,560 --> 00:08:25,199
sigma b

180
00:08:25,199 --> 00:08:27,840
as it is

181
00:08:30,319 --> 00:08:32,958
we can define in the cpa security for

182
00:08:32,958 --> 00:08:33,760
upre

183
00:08:33,760 --> 00:08:38,719
by extending in the cpa security of pre

184
00:08:38,719 --> 00:08:41,599
in this talk we introduce the single hop

185
00:08:41,599 --> 00:08:42,159
case

186
00:08:42,159 --> 00:08:45,360
for simplicity but we also define the

187
00:08:45,360 --> 00:08:48,000
merge of case

188
00:08:48,000 --> 00:08:54,080
please see the paper for the detail

189
00:08:54,080 --> 00:08:56,640
the setup phase the adversary sends

190
00:08:56,640 --> 00:08:59,680
honest or cooperated key queries

191
00:08:59,680 --> 00:09:01,920
in the case of corrupted key quiz the

192
00:09:01,920 --> 00:09:03,360
adversary obtain

193
00:09:03,360 --> 00:09:06,959
both the public key and decryption key

194
00:09:06,959 --> 00:09:10,000
in upre the adversary can select a

195
00:09:10,000 --> 00:09:11,920
scheme in key queries

196
00:09:11,920 --> 00:09:15,200
for example sigma i is leg fpe

197
00:09:15,200 --> 00:09:20,480
and pki and ski are keys of reg fpk

198
00:09:21,120 --> 00:09:24,640
in the second phase the other battery

199
00:09:24,640 --> 00:09:25,120
select

200
00:09:25,120 --> 00:09:28,720
a target user ister messages m0

201
00:09:28,720 --> 00:09:32,160
and m1 the challenger

202
00:09:32,160 --> 00:09:35,440
chooses a bit b and sender target

203
00:09:35,440 --> 00:09:36,080
ciphertext

204
00:09:36,080 --> 00:09:39,920
city star to the adversary

205
00:09:40,399 --> 00:09:42,800
during the second phase the adversary

206
00:09:42,800 --> 00:09:43,839
can send

207
00:09:43,839 --> 00:09:47,440
re-encryption key queries

208
00:09:47,920 --> 00:09:50,720
the adversary selects two indices and

209
00:09:50,720 --> 00:09:51,600
receives

210
00:09:51,600 --> 00:09:56,480
a re-encryption key from user i to j

211
00:09:56,480 --> 00:09:59,600
at some point the adversary output

212
00:09:59,600 --> 00:10:02,800
are guess b prime if

213
00:10:02,800 --> 00:10:05,680
the probability b prime is equal to b is

214
00:10:05,680 --> 00:10:07,519
half plus negligible

215
00:10:07,519 --> 00:10:11,920
we say it is cpa secure

216
00:10:12,320 --> 00:10:14,880
in fact we define a stronger security

217
00:10:14,880 --> 00:10:15,680
notion

218
00:10:15,680 --> 00:10:18,079
called security against honest

219
00:10:18,079 --> 00:10:20,720
re-encryption attacks

220
00:10:20,720 --> 00:10:24,880
in this attack model in addition to

221
00:10:24,880 --> 00:10:27,519
the re-encryption key oracle the

222
00:10:27,519 --> 00:10:29,040
adversary also has

223
00:10:29,040 --> 00:10:32,399
access to honest3 encryption oracle and

224
00:10:32,399 --> 00:10:36,000
re-encryption oracle this is a natural

225
00:10:36,000 --> 00:10:37,200
extension of

226
00:10:37,200 --> 00:10:41,680
hrs security in pre introduced by coin

227
00:10:41,680 --> 00:10:44,959
however it is a bit complex so we omit

228
00:10:44,959 --> 00:10:45,519
it

229
00:10:45,519 --> 00:10:48,560
in this talk please see the paper for

230
00:10:48,560 --> 00:10:51,199
the detail

231
00:10:52,720 --> 00:10:55,040
we also define security against

232
00:10:55,040 --> 00:10:58,959
corrupted delegatory encryption attacks

233
00:10:58,959 --> 00:11:02,560
in this security game delegatee eister

234
00:11:02,560 --> 00:11:05,279
is not corrupted but the adversary

235
00:11:05,279 --> 00:11:08,160
corrupts the regulator ic

236
00:11:08,160 --> 00:11:10,480
so the other bus array has delegator's

237
00:11:10,480 --> 00:11:11,440
decryption key

238
00:11:11,440 --> 00:11:14,959
ski ic the adversary sends

239
00:11:14,959 --> 00:11:18,480
m0 and m1 then the challenger chooses a

240
00:11:18,480 --> 00:11:19,200
bit b

241
00:11:19,200 --> 00:11:22,320
and does the following first

242
00:11:22,320 --> 00:11:24,480
the challenger generates a ciphertext of

243
00:11:24,480 --> 00:11:28,000
the corrupted delegator

244
00:11:28,000 --> 00:11:30,560
next the challenger generates a

245
00:11:30,560 --> 00:11:31,680
re-encryption key

246
00:11:31,680 --> 00:11:35,199
from ic to i-star

247
00:11:36,240 --> 00:11:39,040
finally the challenger combats the

248
00:11:39,040 --> 00:11:41,519
delegated ciphertext into a delegate's

249
00:11:41,519 --> 00:11:43,839
ciphertext

250
00:11:45,040 --> 00:11:47,360
the adversary is given the re-encrypted

251
00:11:47,360 --> 00:11:50,720
ciphertext and re-encryption key

252
00:11:50,720 --> 00:11:53,120
note that the delegated ciphertext is

253
00:11:53,120 --> 00:11:54,720
not given

254
00:11:54,720 --> 00:11:57,519
since it if it is given the adversary

255
00:11:57,519 --> 00:11:58,720
trivially wins

256
00:11:58,720 --> 00:12:01,200
the game

257
00:12:02,560 --> 00:12:04,720
the other battery has access to the

258
00:12:04,720 --> 00:12:09,360
oracles as in the hra security game

259
00:12:09,519 --> 00:12:12,000
this security notion is required in the

260
00:12:12,000 --> 00:12:12,560
applica

261
00:12:12,560 --> 00:12:14,800
in the application to migration of

262
00:12:14,800 --> 00:12:17,680
encryption system

263
00:12:20,720 --> 00:12:23,839
in the rest of this talk we'll see how

264
00:12:23,839 --> 00:12:24,160
to

265
00:12:24,160 --> 00:12:27,360
achieve upre

266
00:12:28,720 --> 00:12:31,920
our upre scheme based on obfuscation is

267
00:12:31,920 --> 00:12:34,639
quite simple

268
00:12:35,440 --> 00:12:39,040
we consider the following circuit

269
00:12:39,040 --> 00:12:41,120
a derivative's decryption key and

270
00:12:41,120 --> 00:12:42,480
delegates public key

271
00:12:42,480 --> 00:12:46,160
are hardcoded in the circuit

272
00:12:47,120 --> 00:12:49,680
it takes a delegated ciphertext as an

273
00:12:49,680 --> 00:12:50,639
input

274
00:12:50,639 --> 00:12:53,839
decrypts the ciphertext

275
00:12:53,920 --> 00:12:57,279
and encrypts the resulting message by

276
00:12:57,279 --> 00:13:00,639
delegate's public key and outputs the

277
00:13:00,639 --> 00:13:04,079
delegate's ciphertext

278
00:13:04,639 --> 00:13:07,839
an obfuscated version of this circuit is

279
00:13:07,839 --> 00:13:11,040
a re-encryption key

280
00:13:11,279 --> 00:13:13,279
delegate's encryption algorithm is

281
00:13:13,279 --> 00:13:14,720
probabilistic

282
00:13:14,720 --> 00:13:18,560
so we need pio

283
00:13:19,839 --> 00:13:23,440
however if pke is really randomizable

284
00:13:23,440 --> 00:13:26,639
we can use sub-exponentially secure i o

285
00:13:26,639 --> 00:13:30,160
and one-way functions instead of pio

286
00:13:30,160 --> 00:13:35,839
see the paper for the details

287
00:13:36,000 --> 00:13:39,199
i explain the high level overview of the

288
00:13:39,199 --> 00:13:41,519
security proof

289
00:13:41,519 --> 00:13:44,240
we want to use in the cpa security of

290
00:13:44,240 --> 00:13:46,000
delegated scheme

291
00:13:46,000 --> 00:13:48,880
but decryption key ski stir is embedded

292
00:13:48,880 --> 00:13:49,279
in

293
00:13:49,279 --> 00:13:53,440
the encryption keys so we need to erase

294
00:13:53,440 --> 00:13:55,680
information about ski server in

295
00:13:55,680 --> 00:13:58,480
re-encryption keys

296
00:13:58,480 --> 00:14:01,120
we change the re-encryption circuit as

297
00:14:01,120 --> 00:14:03,839
follows

298
00:14:06,880 --> 00:14:10,160
first we do not decrypt the delegated

299
00:14:10,160 --> 00:14:10,959
ciphertext

300
00:14:10,959 --> 00:14:14,240
anymore second

301
00:14:14,240 --> 00:14:17,839
we encrypt a dummy message

302
00:14:17,920 --> 00:14:20,480
this change cannot be detected due to

303
00:14:20,480 --> 00:14:21,600
the security of

304
00:14:21,600 --> 00:14:24,399
obvious station

305
00:14:25,680 --> 00:14:27,839
the modified circuit does not need

306
00:14:27,839 --> 00:14:28,959
information about

307
00:14:28,959 --> 00:14:32,320
delegates description key

308
00:14:32,320 --> 00:14:34,639
we gradually erase decryption keys in

309
00:14:34,639 --> 00:14:37,680
the encryption keys

310
00:14:37,920 --> 00:14:41,040
we can model the relationships among

311
00:14:41,040 --> 00:14:45,680
kids as a directed acyclic graph

312
00:14:45,680 --> 00:14:48,880
we start from the leaf node and change

313
00:14:48,880 --> 00:14:51,760
the re-encryption keys from real one to

314
00:14:51,760 --> 00:14:54,639
simulated one

315
00:14:54,800 --> 00:14:57,360
we move from the leaf node to a junction

316
00:14:57,360 --> 00:14:58,079
node

317
00:14:58,079 --> 00:15:01,279
and background force

318
00:15:06,320 --> 00:15:10,079
when we finish erasing ski star

319
00:15:10,079 --> 00:15:13,279
we use in the cpa security of scheme iso

320
00:15:13,279 --> 00:15:16,639
and complete the proof

321
00:15:19,680 --> 00:15:22,880
our relaxed upr scheme uses

322
00:15:22,880 --> 00:15:27,199
secret sharing and global circuit

323
00:15:27,199 --> 00:15:29,680
the encryption key generation algorithm

324
00:15:29,680 --> 00:15:30,480
split

325
00:15:30,480 --> 00:15:32,720
delegator's decryption key into two

326
00:15:32,720 --> 00:15:35,040
shares

327
00:15:35,040 --> 00:15:38,480
the first share s1 is encrypted

328
00:15:38,480 --> 00:15:42,079
by delegates public key the second share

329
00:15:42,079 --> 00:15:42,959
s2 is

330
00:15:42,959 --> 00:15:45,600
directly used as a part of a

331
00:15:45,600 --> 00:15:48,639
re-encryption key

332
00:15:49,920 --> 00:15:52,959
in the encryption algorithm we define

333
00:15:52,959 --> 00:15:57,518
the following reconstruction circuit re

334
00:15:58,959 --> 00:16:01,600
the second shear s2 and delegated

335
00:16:01,600 --> 00:16:02,399
ciphertext

336
00:16:02,399 --> 00:16:09,040
cte are hardcoded in circuit re

337
00:16:09,040 --> 00:16:12,079
the circuit takes the first shear s1 as

338
00:16:12,079 --> 00:16:12,320
an

339
00:16:12,320 --> 00:16:15,759
input reconstruct delegates decryption

340
00:16:15,759 --> 00:16:16,240
key

341
00:16:16,240 --> 00:16:19,680
from the shares decrypt the delegated

342
00:16:19,680 --> 00:16:21,279
ciphertext

343
00:16:21,279 --> 00:16:25,439
and output the message mu

344
00:16:27,120 --> 00:16:29,839
re-encryption algorithm doubles this

345
00:16:29,839 --> 00:16:32,160
circuit

346
00:16:32,160 --> 00:16:35,519
the guard circuit and labels are sent to

347
00:16:35,519 --> 00:16:36,880
the derivatives

348
00:16:36,880 --> 00:16:41,279
with encryption of the first share

349
00:16:41,600 --> 00:16:44,720
note that encryption of the first share

350
00:16:44,720 --> 00:16:48,959
is the part of the re-encryption key

351
00:16:49,120 --> 00:16:52,480
the delegatee decrypts ciphertex ctl

352
00:16:52,480 --> 00:16:56,800
shielder and obtain the fast share s1

353
00:16:56,800 --> 00:17:00,079
then select corresponding levels and

354
00:17:00,079 --> 00:17:04,240
evaluate the gauge circuit by the

355
00:17:04,240 --> 00:17:06,400
definition of circuit re

356
00:17:06,400 --> 00:17:10,160
we can obtain the message mu

357
00:17:10,160 --> 00:17:13,119
however this construction is not secure

358
00:17:13,119 --> 00:17:14,079
since

359
00:17:14,079 --> 00:17:17,439
if the proxy sends all

360
00:17:17,439 --> 00:17:21,119
levels of the garbage circuit

361
00:17:21,119 --> 00:17:23,679
the delegate can obtain information

362
00:17:23,679 --> 00:17:27,360
about the second share s2

363
00:17:30,080 --> 00:17:32,559
to solve the problem in the previous

364
00:17:32,559 --> 00:17:33,360
slide

365
00:17:33,360 --> 00:17:36,480
we introduced weak batch encryption

366
00:17:36,480 --> 00:17:39,039
this is a non-succinct variant of batch

367
00:17:39,039 --> 00:17:41,200
encryption introduced by brokerski

368
00:17:41,200 --> 00:17:44,799
at all a key generation algorithm

369
00:17:44,799 --> 00:17:47,440
takes the string s as an input and

370
00:17:47,440 --> 00:17:51,440
outputs the public key and secret key

371
00:17:51,440 --> 00:17:54,880
the string s means choice bits

372
00:17:54,880 --> 00:17:57,120
a public key does not reveal any

373
00:17:57,120 --> 00:18:00,080
information about the choice bits

374
00:18:00,080 --> 00:18:01,760
choice bits are information

375
00:18:01,760 --> 00:18:05,039
theoretically hidden

376
00:18:06,240 --> 00:18:09,039
an encryption algorithm takes public key

377
00:18:09,039 --> 00:18:09,360
and

378
00:18:09,360 --> 00:18:12,480
two l plain text as input

379
00:18:12,480 --> 00:18:15,840
and outputs the ciphertext

380
00:18:21,440 --> 00:18:23,919
a decryption algorithm takes the secret

381
00:18:23,919 --> 00:18:24,559
key

382
00:18:24,559 --> 00:18:27,679
and the ciphertext as inputs and outputs

383
00:18:27,679 --> 00:18:30,720
else plaintext

384
00:18:30,799 --> 00:18:33,360
in each column apprentice corresponding

385
00:18:33,360 --> 00:18:35,039
to the choice

386
00:18:35,039 --> 00:18:38,879
bits is rebuild

387
00:18:40,640 --> 00:18:43,760
even if the secret key bsk is given we

388
00:18:43,760 --> 00:18:45,919
cannot obtain information about

389
00:18:45,919 --> 00:18:49,440
the other side plain text

390
00:18:50,480 --> 00:18:52,880
unlike batch encryption we can achieve

391
00:18:52,880 --> 00:18:54,320
weak batch encryption

392
00:18:54,320 --> 00:18:58,000
from in the cpa pke

393
00:19:00,240 --> 00:19:02,720
by using weak batch encryption we can

394
00:19:02,720 --> 00:19:05,919
fix the first id

395
00:19:06,080 --> 00:19:08,480
we split delegates decryption key by

396
00:19:08,480 --> 00:19:10,799
secret sharing

397
00:19:10,799 --> 00:19:13,679
next we use the first share s1 as the

398
00:19:13,679 --> 00:19:14,559
choice bits

399
00:19:14,559 --> 00:19:17,760
of weak batch encryption

400
00:19:18,240 --> 00:19:20,480
that is we generate a key pair of weak

401
00:19:20,480 --> 00:19:24,000
batch encryption from s1

402
00:19:24,000 --> 00:19:26,559
then we encrypt the secret key of weak

403
00:19:26,559 --> 00:19:28,720
batch encryption by delegate's public

404
00:19:28,720 --> 00:19:31,039
key

405
00:19:31,520 --> 00:19:34,720
so a re-encryption key consists of

406
00:19:34,720 --> 00:19:41,039
st bpk and re-encryption of bsk

407
00:19:42,559 --> 00:19:45,440
in the encryption algorithm we consider

408
00:19:45,440 --> 00:19:46,640
the same circuit

409
00:19:46,640 --> 00:19:53,520
re and gabriet

410
00:19:53,520 --> 00:19:56,960
unlike the first idea we encrypt

411
00:19:56,960 --> 00:20:00,799
labels by weak batch encryption

412
00:20:01,440 --> 00:20:03,760
a re-encrypted ciphertext consists of

413
00:20:03,760 --> 00:20:05,200
the global circuit

414
00:20:05,200 --> 00:20:07,679
encryption of bsk and weak battery

415
00:20:07,679 --> 00:20:10,960
encryption of the labels

416
00:20:12,640 --> 00:20:15,520
the delegatey decrypt ctr shield and

417
00:20:15,520 --> 00:20:17,600
obtain the secret key of weak batch

418
00:20:17,600 --> 00:20:19,120
encryption

419
00:20:19,120 --> 00:20:23,280
then obtain levels corresponding to the

420
00:20:23,280 --> 00:20:23,679
first

421
00:20:23,679 --> 00:20:26,559
share by decrypting the first ciphertext

422
00:20:26,559 --> 00:20:29,918
of weak batch encryption

423
00:20:31,600 --> 00:20:34,640
so the derivative can evaluate the

424
00:20:34,640 --> 00:20:35,600
grouped circuit

425
00:20:35,600 --> 00:20:38,000
by levels corresponding to the fast

426
00:20:38,000 --> 00:20:40,320
share

427
00:20:41,600 --> 00:20:43,919
a re-encryption key does not leak

428
00:20:43,919 --> 00:20:45,679
information about delegator's

429
00:20:45,679 --> 00:20:48,960
decryption key

430
00:20:48,960 --> 00:20:51,360
first we need to erase information about

431
00:20:51,360 --> 00:20:53,120
delegator's location key

432
00:20:53,120 --> 00:20:56,799
from re-encrypted ciphertext

433
00:20:59,919 --> 00:21:02,080
by the center security of weak batch

434
00:21:02,080 --> 00:21:03,039
encryption

435
00:21:03,039 --> 00:21:06,080
we can change levels into labels

436
00:21:06,080 --> 00:21:09,360
corresponding to s1

437
00:21:09,360 --> 00:21:13,200
next by the security of global circuit

438
00:21:13,200 --> 00:21:15,679
we can simulate the global circuit only

439
00:21:15,679 --> 00:21:16,720
by using

440
00:21:16,720 --> 00:21:19,600
the message mu

441
00:21:22,080 --> 00:21:25,200
that is we do not need information about

442
00:21:25,200 --> 00:21:25,520
the

443
00:21:25,520 --> 00:21:28,840
second share s2 for simulated global

444
00:21:28,840 --> 00:21:31,840
circuit

445
00:21:32,720 --> 00:21:35,200
next we move to the re-encryption key

446
00:21:35,200 --> 00:21:37,440
part

447
00:21:38,000 --> 00:21:41,360
we can erase information about bsk

448
00:21:41,360 --> 00:21:45,840
by delegates encryption security

449
00:21:46,480 --> 00:21:49,440
next we can invest information about the

450
00:21:49,440 --> 00:21:50,480
past

451
00:21:50,480 --> 00:21:52,480
share by the security of weak watch

452
00:21:52,480 --> 00:21:54,640
encryption

453
00:21:54,640 --> 00:21:57,440
then we can use the security of secret

454
00:21:57,440 --> 00:21:58,400
sharing

455
00:21:58,400 --> 00:21:59,840
and u.s information about the

456
00:21:59,840 --> 00:22:04,000
delegator's degretion key

457
00:22:04,000 --> 00:22:07,200
i explained the single hop case but we

458
00:22:07,200 --> 00:22:08,480
can generalize this

459
00:22:08,480 --> 00:22:12,240
idea to the merge hop case

460
00:22:12,240 --> 00:22:15,679
as in our upre scheme we gradually

461
00:22:15,679 --> 00:22:16,159
change

462
00:22:16,159 --> 00:22:18,559
the encryption keys in a directed

463
00:22:18,559 --> 00:22:20,880
acyclic graph

464
00:22:20,880 --> 00:22:26,320
this completes the proof outline

465
00:22:26,320 --> 00:22:28,559
the scheme in the previous slide does

466
00:22:28,559 --> 00:22:31,039
not satisfy security against corrupted

467
00:22:31,039 --> 00:22:33,840
delegated re-encryption attacks because

468
00:22:33,840 --> 00:22:34,320
the

469
00:22:34,320 --> 00:22:36,559
governed sect might wreak information

470
00:22:36,559 --> 00:22:37,840
about the message

471
00:22:37,840 --> 00:22:39,919
if the adversary has derivatives

472
00:22:39,919 --> 00:22:42,720
decryption key

473
00:22:43,600 --> 00:22:46,480
we can solve this problem by encrypting

474
00:22:46,480 --> 00:22:48,720
the governed circuit by delegates public

475
00:22:48,720 --> 00:22:50,960
key

476
00:22:51,760 --> 00:22:55,600
however this incurs size probe blow up

477
00:22:55,600 --> 00:22:57,440
so the number of re-encryption is

478
00:22:57,440 --> 00:22:59,120
restricted

479
00:22:59,120 --> 00:23:01,600
we can re-encrypt only a constant number

480
00:23:01,600 --> 00:23:04,158
of times

481
00:23:06,640 --> 00:23:10,000
this is the summary of this talk we put

482
00:23:10,000 --> 00:23:12,880
forth the notion of universal proxy

483
00:23:12,880 --> 00:23:14,159
encryption

484
00:23:14,159 --> 00:23:16,720
and present generic constructions of

485
00:23:16,720 --> 00:23:18,000
upre

486
00:23:18,000 --> 00:23:23,840
and relaxed upre thank you

