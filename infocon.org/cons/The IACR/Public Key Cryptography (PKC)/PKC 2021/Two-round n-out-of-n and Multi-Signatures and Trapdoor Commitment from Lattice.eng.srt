1
00:00:00,240 --> 00:00:02,960
hello everyone welcome to my talk my

2
00:00:02,960 --> 00:00:04,880
name is akira takashi i'm currently a

3
00:00:04,880 --> 00:00:05,839
phd student

4
00:00:05,839 --> 00:00:08,800
at office university in denmark so in

5
00:00:08,800 --> 00:00:10,639
this video i'm going to be talking about

6
00:00:10,639 --> 00:00:13,440
our recent work two-round and autobahn

7
00:00:13,440 --> 00:00:14,880
and multi-signatures

8
00:00:14,880 --> 00:00:17,680
and trap door commitment from lattices

9
00:00:17,680 --> 00:00:19,439
this talk is based on the joint work

10
00:00:19,439 --> 00:00:22,000
with ivan dam gord claudio randy from

11
00:00:22,000 --> 00:00:23,279
austin university

12
00:00:23,279 --> 00:00:26,480
and meditech from ntt

13
00:00:26,480 --> 00:00:28,880
so let me briefly introduce the topic

14
00:00:28,880 --> 00:00:31,039
and the background

15
00:00:31,039 --> 00:00:33,680
so as everybody probably knows right now

16
00:00:33,680 --> 00:00:34,640
there's the ongoing

17
00:00:34,640 --> 00:00:37,200
nist post quantum crypto standardization

18
00:00:37,200 --> 00:00:38,160
process

19
00:00:38,160 --> 00:00:40,239
in particular last year they announced a

20
00:00:40,239 --> 00:00:41,680
finalist

21
00:00:41,680 --> 00:00:43,280
so if you look at the lattice-based

22
00:00:43,280 --> 00:00:45,440
candidates they are essentially

23
00:00:45,440 --> 00:00:47,840
two different approaches in order to

24
00:00:47,840 --> 00:00:49,840
achieve native space signatures

25
00:00:49,840 --> 00:00:52,160
the first one is called hash and sign

26
00:00:52,160 --> 00:00:54,640
falcon is a concrete instantiation

27
00:00:54,640 --> 00:00:56,800
and the other one which we are going to

28
00:00:56,800 --> 00:00:59,199
look at is a fiat shammy with

29
00:00:59,199 --> 00:01:02,160
boards paradigm and diligence is a

30
00:01:02,160 --> 00:01:02,800
concrete

31
00:01:02,800 --> 00:01:06,159
instantiation among the finalists

32
00:01:06,159 --> 00:01:09,439
on the other hand in recent years

33
00:01:09,439 --> 00:01:10,799
there is a renewed interest in

34
00:01:10,799 --> 00:01:13,360
multi-party signing protocols

35
00:01:13,360 --> 00:01:16,479
in relation to for example upcoming

36
00:01:16,479 --> 00:01:19,439
news standardization for the threshold

37
00:01:19,439 --> 00:01:20,400
signature

38
00:01:20,400 --> 00:01:23,520
or a new application to blockchain and

39
00:01:23,520 --> 00:01:26,720
so on and so forth so if you look at the

40
00:01:26,720 --> 00:01:28,000
literature

41
00:01:28,000 --> 00:01:30,560
uh there are many existing works on

42
00:01:30,560 --> 00:01:31,680
round efficient

43
00:01:31,680 --> 00:01:33,759
end party signatures in the disclaimer

44
00:01:33,759 --> 00:01:36,079
setting

45
00:01:36,479 --> 00:01:38,799
so since fiat samia with about style

46
00:01:38,799 --> 00:01:40,159
signature has a very

47
00:01:40,159 --> 00:01:42,880
similar structure to the scenar signing

48
00:01:42,880 --> 00:01:43,920
protocol

49
00:01:43,920 --> 00:01:46,240
general signing of course here the

50
00:01:46,240 --> 00:01:47,520
natural question is

51
00:01:47,520 --> 00:01:50,000
can we construct a lattice-based round

52
00:01:50,000 --> 00:01:52,479
efficient multi-party signing protocols

53
00:01:52,479 --> 00:01:54,320
by making the most of the observations

54
00:01:54,320 --> 00:01:56,399
in the discrete log setting

55
00:01:56,399 --> 00:02:01,600
so in our paper we address this question

56
00:02:02,159 --> 00:02:04,719
so what is uh and out of been assigning

57
00:02:04,719 --> 00:02:06,560
for simplicity in this talk i'm going to

58
00:02:06,560 --> 00:02:06,880
be

59
00:02:06,880 --> 00:02:10,318
focusing on uh two out of and two

60
00:02:10,318 --> 00:02:13,520
case so here there are two parties

61
00:02:13,520 --> 00:02:16,239
involving signing and there is a single

62
00:02:16,239 --> 00:02:18,160
signing key

63
00:02:18,160 --> 00:02:20,239
not known to either of the parties at

64
00:02:20,239 --> 00:02:22,560
least anybody

65
00:02:22,560 --> 00:02:25,200
so this secret signing key is split two

66
00:02:25,200 --> 00:02:27,360
into two shares

67
00:02:27,360 --> 00:02:30,560
and then first both parties agree on

68
00:02:30,560 --> 00:02:33,040
some message to be signed

69
00:02:33,040 --> 00:02:35,680
then after some interaction they output

70
00:02:35,680 --> 00:02:36,800
some signature

71
00:02:36,800 --> 00:02:38,959
so of course the correctness should

72
00:02:38,959 --> 00:02:40,400
guarantee that

73
00:02:40,400 --> 00:02:42,879
with the corresponding public key the

74
00:02:42,879 --> 00:02:44,160
output message

75
00:02:44,160 --> 00:02:46,720
and the signature should be verified so

76
00:02:46,720 --> 00:02:48,879
what about the security

77
00:02:48,879 --> 00:02:52,160
uh there are a few different ways to uh

78
00:02:52,160 --> 00:02:55,120
define the security for two automan two

79
00:02:55,120 --> 00:02:56,480
signing

80
00:02:56,480 --> 00:02:59,599
but uh for example we can uh

81
00:02:59,599 --> 00:03:03,120
extend the existing uh unposibility game

82
00:03:03,120 --> 00:03:06,159
in a straightforward fashion so here we

83
00:03:06,159 --> 00:03:07,519
assume that

84
00:03:07,519 --> 00:03:10,400
one of the parties is corrupted and then

85
00:03:10,400 --> 00:03:11,680
adversely obtains

86
00:03:11,680 --> 00:03:14,480
a share of the secret design key then

87
00:03:14,480 --> 00:03:16,319
the adversary is able to create honest

88
00:03:16,319 --> 00:03:16,800
body

89
00:03:16,800 --> 00:03:19,360
with some message to be signed then

90
00:03:19,360 --> 00:03:20,640
after some

91
00:03:20,640 --> 00:03:23,519
signature queries the adversary outputs

92
00:03:23,519 --> 00:03:24,480
4gb

93
00:03:24,480 --> 00:03:27,760
together with some message so

94
00:03:27,760 --> 00:03:30,159
the unforgetability requirement should

95
00:03:30,159 --> 00:03:31,200
guarantee that

96
00:03:31,200 --> 00:03:34,239
should say that the output message and

97
00:03:34,239 --> 00:03:35,920
the signature

98
00:03:35,920 --> 00:03:38,720
should not be verified with the public

99
00:03:38,720 --> 00:03:40,560
key as long as the message has never

100
00:03:40,560 --> 00:03:42,480
been queried

101
00:03:42,480 --> 00:03:45,040
so this is relatively simple and this is

102
00:03:45,040 --> 00:03:47,360
the security notion that we want to

103
00:03:47,360 --> 00:03:52,000
satisfy when constructing the protocol

104
00:03:52,159 --> 00:03:54,640
so now uh what about fiat shamil with

105
00:03:54,640 --> 00:03:55,680
above paradigm

106
00:03:55,680 --> 00:03:58,000
so here i'm briefly going over the

107
00:03:58,000 --> 00:03:58,959
division

108
00:03:58,959 --> 00:04:01,200
identification protocol which follows

109
00:04:01,200 --> 00:04:02,720
this kind of standard

110
00:04:02,720 --> 00:04:05,760
three-round identification protocol so

111
00:04:05,760 --> 00:04:08,319
here uh they are prover and assigner

112
00:04:08,319 --> 00:04:10,799
and as user approval first generates

113
00:04:10,799 --> 00:04:11,920
some randomness

114
00:04:11,920 --> 00:04:14,480
from some distribution either gaussian

115
00:04:14,480 --> 00:04:16,000
or uniform distribution

116
00:04:16,000 --> 00:04:17,839
over some small range depending on the

117
00:04:17,839 --> 00:04:20,000
instantiation

118
00:04:20,000 --> 00:04:21,120
and then the prober sends some

119
00:04:21,120 --> 00:04:23,919
commitment w and after receiving

120
00:04:23,919 --> 00:04:26,320
challenge from the verifier

121
00:04:26,320 --> 00:04:27,919
the prover performs the so-called

122
00:04:27,919 --> 00:04:29,840
rejection sampling because

123
00:04:29,840 --> 00:04:32,400
uh in the fyat xiaomi of both paradigm

124
00:04:32,400 --> 00:04:33,120
uh

125
00:04:33,120 --> 00:04:36,560
all of the secret key and the

126
00:04:36,560 --> 00:04:39,759
randomness y and the challenge are

127
00:04:39,759 --> 00:04:43,280
relatively small so in order to

128
00:04:43,280 --> 00:04:45,680
make the distribution of response z

129
00:04:45,680 --> 00:04:47,759
independent of the secret signing key

130
00:04:47,759 --> 00:04:49,120
you have to perform the rejection

131
00:04:49,120 --> 00:04:51,360
sampling

132
00:04:51,360 --> 00:04:53,919
and then after receiving the response z

133
00:04:53,919 --> 00:04:54,400
z

134
00:04:54,400 --> 00:04:57,680
the verifier checks that the equation

135
00:04:57,680 --> 00:05:00,720
should hold and then

136
00:05:00,720 --> 00:05:04,240
the verifier should also check that the

137
00:05:04,240 --> 00:05:06,479
norm on the response z is sufficiently

138
00:05:06,479 --> 00:05:08,800
small

139
00:05:09,199 --> 00:05:12,639
so as i mentioned uh

140
00:05:12,639 --> 00:05:15,280
paradigm is somewhat similar to snore

141
00:05:15,280 --> 00:05:16,479
identification protocol

142
00:05:16,479 --> 00:05:19,600
at least syntactically so you can

143
00:05:19,600 --> 00:05:23,280
see some correspondence by replacing

144
00:05:23,280 --> 00:05:26,240
the public matrix with space point and

145
00:05:26,240 --> 00:05:27,680
the randomness with the

146
00:05:27,680 --> 00:05:31,039
uh uniformly generated uh nouns

147
00:05:31,039 --> 00:05:33,120
from uh integer module uh the group

148
00:05:33,120 --> 00:05:34,560
order

149
00:05:34,560 --> 00:05:35,840
but of course in additional

150
00:05:35,840 --> 00:05:37,759
identification there's no rejection

151
00:05:37,759 --> 00:05:38,880
something so there's some

152
00:05:38,880 --> 00:05:41,759
subtle difference here

153
00:05:41,919 --> 00:05:44,479
so what about the security at a high

154
00:05:44,479 --> 00:05:45,199
level

155
00:05:45,199 --> 00:05:47,039
soundness of the fierce shame of this

156
00:05:47,039 --> 00:05:48,240
abort

157
00:05:48,240 --> 00:05:50,160
identification protocol can be argued as

158
00:05:50,160 --> 00:05:51,360
follows

159
00:05:51,360 --> 00:05:53,919
so we assume that some cheating proverb

160
00:05:53,919 --> 00:05:55,840
can correctly answer distinct

161
00:05:55,840 --> 00:05:58,160
challenge c and c prime then this

162
00:05:58,160 --> 00:05:58,880
equation

163
00:05:58,880 --> 00:06:01,680
should hold due to the verification

164
00:06:01,680 --> 00:06:03,840
condition

165
00:06:03,840 --> 00:06:07,520
then thanks to the lwe assumption

166
00:06:07,520 --> 00:06:10,479
essentially we can argue that the public

167
00:06:10,479 --> 00:06:12,000
key t

168
00:06:12,000 --> 00:06:14,080
is indistinguishable from a uniformly

169
00:06:14,080 --> 00:06:15,680
chosen

170
00:06:15,680 --> 00:06:20,160
value a uniformly chosen module element

171
00:06:20,160 --> 00:06:23,680
then using this cheating prover

172
00:06:23,680 --> 00:06:26,240
we are actually able to find the nonzero

173
00:06:26,240 --> 00:06:27,280
solution

174
00:06:27,280 --> 00:06:29,120
to the cis problem with respect to the

175
00:06:29,120 --> 00:06:30,800
random matrix a

176
00:06:30,800 --> 00:06:34,240
concatenated by the public

177
00:06:34,240 --> 00:06:37,440
random public key t so this way we can

178
00:06:37,440 --> 00:06:40,479
reduce the soundness of the protocol

179
00:06:40,479 --> 00:06:43,759
to cs and lw

180
00:06:43,759 --> 00:06:45,919
and for the honest verifies and

181
00:06:45,919 --> 00:06:47,759
knowledge

182
00:06:47,759 --> 00:06:49,199
usually we are interested in the

183
00:06:49,199 --> 00:06:51,360
non-aborting case

184
00:06:51,360 --> 00:06:53,520
because uh in a concrete application

185
00:06:53,520 --> 00:06:55,120
like a signature or interactive

186
00:06:55,120 --> 00:06:56,160
knowledge

187
00:06:56,160 --> 00:06:58,960
we don't have to argue security about

188
00:06:58,960 --> 00:06:59,680
the

189
00:06:59,680 --> 00:07:02,160
rejected transcript so here are usually

190
00:07:02,160 --> 00:07:03,919
non-aborting a statistic

191
00:07:03,919 --> 00:07:06,479
on a spray file generally simulator

192
00:07:06,479 --> 00:07:07,120
first

193
00:07:07,120 --> 00:07:10,880
picks challenge and the response c

194
00:07:10,880 --> 00:07:14,560
and then later determine the the w

195
00:07:14,560 --> 00:07:17,280
the first message and this is actually

196
00:07:17,280 --> 00:07:18,319
statistically

197
00:07:18,319 --> 00:07:20,160
indistinguishable from the actual

198
00:07:20,160 --> 00:07:22,639
transcript

199
00:07:22,880 --> 00:07:25,759
so now uh let's talk about the actual

200
00:07:25,759 --> 00:07:26,639
two-party

201
00:07:26,639 --> 00:07:30,080
signing protocol so

202
00:07:30,080 --> 00:07:32,319
in this work our results can be

203
00:07:32,319 --> 00:07:34,720
essentially summarized as follows

204
00:07:34,720 --> 00:07:36,800
so in the paper we present two-round

205
00:07:36,800 --> 00:07:39,039
multi-party aviation use about

206
00:07:39,039 --> 00:07:41,280
signing with full security proof in the

207
00:07:41,280 --> 00:07:44,400
classical random oracle model and

208
00:07:44,400 --> 00:07:47,120
we present two instantiations and

209
00:07:47,120 --> 00:07:47,840
out-of-band

210
00:07:47,840 --> 00:07:50,240
signatures and the mod signatures in

211
00:07:50,240 --> 00:07:51,360
this talk i'm

212
00:07:51,360 --> 00:07:53,360
mainly talking about an autobahn

213
00:07:53,360 --> 00:07:54,960
signatures

214
00:07:54,960 --> 00:07:59,280
also from simplicity going to

215
00:07:59,280 --> 00:08:01,759
assume that the number of parties too

216
00:08:01,759 --> 00:08:03,280
but the approach

217
00:08:03,280 --> 00:08:05,360
uh mentioned in this talk can be

218
00:08:05,360 --> 00:08:07,039
essentially generalized to

219
00:08:07,039 --> 00:08:09,680
arbitrary number of parties by

220
00:08:09,680 --> 00:08:10,639
appropriately

221
00:08:10,639 --> 00:08:13,840
adjusting the parameters

222
00:08:13,840 --> 00:08:16,080
here's a comparison with the previous

223
00:08:16,080 --> 00:08:17,440
solutions

224
00:08:17,440 --> 00:08:19,120
so before our work there have been a

225
00:08:19,120 --> 00:08:21,520
couple of uh t out of n

226
00:08:21,520 --> 00:08:23,280
lattice-based threshold signatures

227
00:08:23,280 --> 00:08:25,919
following either fiat xiaomi reports or

228
00:08:25,919 --> 00:08:27,360
hashing sign

229
00:08:27,360 --> 00:08:30,720
however they either require

230
00:08:30,720 --> 00:08:34,640
fhg or generic multiparty computation in

231
00:08:34,640 --> 00:08:35,599
order to

232
00:08:35,599 --> 00:08:40,000
carry out threshold signing operations

233
00:08:40,000 --> 00:08:42,320
so so of course these building blocks

234
00:08:42,320 --> 00:08:43,120
are somewhat

235
00:08:43,120 --> 00:08:47,120
heavy even though they allows

236
00:08:47,120 --> 00:08:49,839
you to they allow you to achieve t out

237
00:08:49,839 --> 00:08:50,480
of n

238
00:08:50,480 --> 00:08:53,839
with no interactive signing

239
00:08:53,839 --> 00:08:56,560
our approach is uh different from these

240
00:08:56,560 --> 00:08:58,000
previous works

241
00:08:58,000 --> 00:09:01,120
so in this work uh we only achieve

242
00:09:01,120 --> 00:09:04,800
an ultra band a case however

243
00:09:04,800 --> 00:09:08,320
without requiring uh expensive building

244
00:09:08,320 --> 00:09:11,360
blocks like fh or mbc

245
00:09:11,360 --> 00:09:14,160
we can achieve a low protocol with low

246
00:09:14,160 --> 00:09:15,120
round complexity

247
00:09:15,120 --> 00:09:17,920
either three round or two rounds and the

248
00:09:17,920 --> 00:09:18,480
only

249
00:09:18,480 --> 00:09:21,120
additional beating block is a

250
00:09:21,120 --> 00:09:22,880
homomorphic commitment or

251
00:09:22,880 --> 00:09:25,920
uh trapdoor commitment

252
00:09:26,080 --> 00:09:28,080
also for the multi-signature there have

253
00:09:28,080 --> 00:09:29,920
been uh again couple of

254
00:09:29,920 --> 00:09:32,959
suggestions but the these protocols at

255
00:09:32,959 --> 00:09:34,080
least required

256
00:09:34,080 --> 00:09:37,360
three rounds of interactions in our work

257
00:09:37,360 --> 00:09:40,000
thanks to our technique we are able to

258
00:09:40,000 --> 00:09:40,959
reduce the

259
00:09:40,959 --> 00:09:44,640
run complexity to two rounds

260
00:09:45,279 --> 00:09:48,560
so let's look at the actual construction

261
00:09:48,560 --> 00:09:48,880
so

262
00:09:48,880 --> 00:09:51,600
our starting point is this bare-bone

263
00:09:51,600 --> 00:09:52,800
two-party signing

264
00:09:52,800 --> 00:09:56,720
based on snore which is so this barebone

265
00:09:56,720 --> 00:09:59,200
protocol is very simple but actually not

266
00:09:59,200 --> 00:09:59,920
secure

267
00:09:59,920 --> 00:10:03,680
i'm going to explain why sue so

268
00:10:03,680 --> 00:10:06,320
so here's a simple approach so in the

269
00:10:06,320 --> 00:10:07,200
first round

270
00:10:07,200 --> 00:10:09,360
uh both party uh generate the

271
00:10:09,360 --> 00:10:10,880
commitments as usual

272
00:10:10,880 --> 00:10:13,600
and then exchange the commitment and

273
00:10:13,600 --> 00:10:13,920
then

274
00:10:13,920 --> 00:10:16,079
they take the sum of the commitments and

275
00:10:16,079 --> 00:10:17,760
hash the result

276
00:10:17,760 --> 00:10:20,880
into the challenge then

277
00:10:20,880 --> 00:10:24,240
both parties generate the response share

278
00:10:24,240 --> 00:10:27,040
and after exchanging the response they

279
00:10:27,040 --> 00:10:29,040
output the sum of the commit

280
00:10:29,040 --> 00:10:32,480
and response as a signature so this is

281
00:10:32,480 --> 00:10:34,399
very simple

282
00:10:34,399 --> 00:10:36,800
and we can actually put all these

283
00:10:36,800 --> 00:10:38,800
operations to the

284
00:10:38,800 --> 00:10:42,720
lattice setting so here's a two party

285
00:10:42,720 --> 00:10:46,079
deletion signing so now the public key

286
00:10:46,079 --> 00:10:50,399
is uh random metrics uh multiplied by

287
00:10:50,399 --> 00:10:53,680
the secret signing shares and then

288
00:10:53,680 --> 00:10:58,000
uh as usual they generate commitments

289
00:10:58,000 --> 00:10:59,839
and the only additional operation is

290
00:10:59,839 --> 00:11:02,240
again rejection sampling

291
00:11:02,240 --> 00:11:05,200
so here both parties perform rejection

292
00:11:05,200 --> 00:11:06,480
sampling locally

293
00:11:06,480 --> 00:11:09,600
on their own shares and then

294
00:11:09,600 --> 00:11:11,839
if the rejection sampling is successful

295
00:11:11,839 --> 00:11:12,959
they output the

296
00:11:12,959 --> 00:11:15,839
response z otherwise they restart the

297
00:11:15,839 --> 00:11:17,440
product

298
00:11:17,440 --> 00:11:20,399
and this protocol actually satisfies the

299
00:11:20,399 --> 00:11:23,040
correctness

300
00:11:24,240 --> 00:11:27,040
so why is it is not secure so they are

301
00:11:27,040 --> 00:11:28,560
essentially two issues

302
00:11:28,560 --> 00:11:30,560
the first one is a simulation of

303
00:11:30,560 --> 00:11:31,760
rejected transcript

304
00:11:31,760 --> 00:11:34,959
w a and c so

305
00:11:34,959 --> 00:11:36,880
as i mentioned that this is usually not

306
00:11:36,880 --> 00:11:38,079
a problem

307
00:11:38,079 --> 00:11:40,320
for a single user setting or

308
00:11:40,320 --> 00:11:42,000
non-interactive zero knowledge

309
00:11:42,000 --> 00:11:45,040
however this uh becomes a problematic

310
00:11:45,040 --> 00:11:48,240
in interactive setting because in the

311
00:11:48,240 --> 00:11:49,519
two-party signing

312
00:11:49,519 --> 00:11:52,639
we actually have to compute the uh

313
00:11:52,639 --> 00:11:55,839
some of the the commitments w and w1 and

314
00:11:55,839 --> 00:11:57,120
w2

315
00:11:57,120 --> 00:11:58,959
and this has to be done before you

316
00:11:58,959 --> 00:12:00,399
compute the challenge

317
00:12:00,399 --> 00:12:02,880
so the approach inevitably requires post

318
00:12:02,880 --> 00:12:04,560
party to reveal

319
00:12:04,560 --> 00:12:06,880
the value of w before the rejection

320
00:12:06,880 --> 00:12:08,639
sampling

321
00:12:08,639 --> 00:12:10,880
so of course in the literature there's a

322
00:12:10,880 --> 00:12:12,399
standard trick

323
00:12:12,399 --> 00:12:16,160
that asks the proverb to commit

324
00:12:16,160 --> 00:12:19,040
to the first message w and then only

325
00:12:19,040 --> 00:12:19,839
reveal

326
00:12:19,839 --> 00:12:22,320
w if the rejection sampling is

327
00:12:22,320 --> 00:12:23,760
successful

328
00:12:23,760 --> 00:12:26,320
but in our uh application this is

329
00:12:26,320 --> 00:12:27,279
actually not enough

330
00:12:27,279 --> 00:12:28,959
because again you have to compute the

331
00:12:28,959 --> 00:12:32,240
sum of w before the challenge

332
00:12:32,240 --> 00:12:34,880
so we have we somehow have to come up

333
00:12:34,880 --> 00:12:35,920
with a way to

334
00:12:35,920 --> 00:12:39,040
circumvent this issue the second

335
00:12:39,040 --> 00:12:39,519
approach

336
00:12:39,519 --> 00:12:42,639
the second issue is that essentially the

337
00:12:42,639 --> 00:12:43,839
malicious party

338
00:12:43,839 --> 00:12:45,839
can choose the first message depending

339
00:12:45,839 --> 00:12:48,399
on the honest party's fast input

340
00:12:48,399 --> 00:12:51,680
first output so

341
00:12:51,680 --> 00:12:54,160
somehow we have to uh make sure that the

342
00:12:54,160 --> 00:12:55,519
militia's party

343
00:12:55,519 --> 00:12:58,800
does not uh depend their uh

344
00:12:58,800 --> 00:13:02,079
message on the the other party's output

345
00:13:02,079 --> 00:13:04,000
so there's of course a naive approach to

346
00:13:04,000 --> 00:13:05,279
circumvent the issue

347
00:13:05,279 --> 00:13:07,920
so if we introduce an extra round for

348
00:13:07,920 --> 00:13:10,800
essentially committing to the commitment

349
00:13:10,800 --> 00:13:13,440
then we can indeed construct an honest

350
00:13:13,440 --> 00:13:14,480
body simulator

351
00:13:14,480 --> 00:13:17,440
but of course this requires additional

352
00:13:17,440 --> 00:13:19,600
round of interaction

353
00:13:19,600 --> 00:13:21,040
and not only the proof doesn't go

354
00:13:21,040 --> 00:13:22,639
through but also

355
00:13:22,639 --> 00:13:24,639
we can actually describe a potential

356
00:13:24,639 --> 00:13:25,920
concurrent attack

357
00:13:25,920 --> 00:13:27,680
which can be seen as a variant of

358
00:13:27,680 --> 00:13:29,680
drivers that house a famous

359
00:13:29,680 --> 00:13:32,839
concurrent attack against the snow mod

360
00:13:32,839 --> 00:13:35,760
signatures

361
00:13:35,760 --> 00:13:38,399
so in order to circumvent these two

362
00:13:38,399 --> 00:13:38,880
issues

363
00:13:38,880 --> 00:13:41,440
uh our solutions can be summarized as

364
00:13:41,440 --> 00:13:42,480
follows

365
00:13:42,480 --> 00:13:45,360
so instead of sending just commitment we

366
00:13:45,360 --> 00:13:48,399
employ a homomorphic commitment

367
00:13:48,399 --> 00:13:50,560
in order to carry out the exchange of

368
00:13:50,560 --> 00:13:53,440
the commitment in the first round

369
00:13:53,440 --> 00:13:55,680
and this way we can indeed hide the

370
00:13:55,680 --> 00:13:57,199
value of w

371
00:13:57,199 --> 00:14:00,839
until the rejection sampling is

372
00:14:00,839 --> 00:14:02,320
successful

373
00:14:02,320 --> 00:14:04,240
on the other hand this also allows us to

374
00:14:04,240 --> 00:14:06,639
compute the first the sum of the first

375
00:14:06,639 --> 00:14:07,279
message

376
00:14:07,279 --> 00:14:10,320
thanks to the homomorphic property

377
00:14:10,320 --> 00:14:13,440
for the second issue

378
00:14:13,440 --> 00:14:15,680
we use a trapdoor homomorphic commitment

379
00:14:15,680 --> 00:14:17,440
in order to avoid an extra round i'm

380
00:14:17,440 --> 00:14:18,320
going to explain

381
00:14:18,320 --> 00:14:21,839
a bit later how we do this

382
00:14:21,839 --> 00:14:25,519
for now uh let's look at how we can

383
00:14:25,519 --> 00:14:26,399
certain bend

384
00:14:26,399 --> 00:14:30,000
the first issue so here

385
00:14:30,000 --> 00:14:32,240
we apply the homomorphic commitment to

386
00:14:32,240 --> 00:14:33,839
the first message w

387
00:14:33,839 --> 00:14:36,240
and then both parties exchange the

388
00:14:36,240 --> 00:14:36,959
commitment

389
00:14:36,959 --> 00:14:40,399
1 and com2 and then thanks to the

390
00:14:40,399 --> 00:14:41,839
homogenous property

391
00:14:41,839 --> 00:14:43,760
we can indeed take the sum of

392
00:14:43,760 --> 00:14:46,240
commitments in a meaningful way

393
00:14:46,240 --> 00:14:49,199
and then derive a challenge then if the

394
00:14:49,199 --> 00:14:51,519
rejection sampling is successful

395
00:14:51,519 --> 00:14:55,279
they open z and randomness for the

396
00:14:55,279 --> 00:14:56,880
commitment

397
00:14:56,880 --> 00:15:00,240
otherwise there will be nothing

398
00:15:01,120 --> 00:15:04,320
and for the second issue for now we

399
00:15:04,320 --> 00:15:06,240
employed naive solution

400
00:15:06,240 --> 00:15:08,399
so you just send the hash of the

401
00:15:08,399 --> 00:15:09,519
commitments

402
00:15:09,519 --> 00:15:11,920
and then later check that the reviewed

403
00:15:11,920 --> 00:15:14,240
commitment com1 and com2

404
00:15:14,240 --> 00:15:17,360
is indeed a pre-image of the hash which

405
00:15:17,360 --> 00:15:20,880
was previous previously sent

406
00:15:21,440 --> 00:15:23,440
so this construction is actually secure

407
00:15:23,440 --> 00:15:25,760
and passed

408
00:15:25,760 --> 00:15:28,160
the verification works as follows so

409
00:15:28,160 --> 00:15:28,800
first

410
00:15:28,800 --> 00:15:31,120
the verifier derives a challenge and

411
00:15:31,120 --> 00:15:32,720
then reconstruct

412
00:15:32,720 --> 00:15:35,920
a committed w then what the verifier

413
00:15:35,920 --> 00:15:37,279
checks is that

414
00:15:37,279 --> 00:15:40,079
as usual first they have to check that

415
00:15:40,079 --> 00:15:40,720
the norm

416
00:15:40,720 --> 00:15:43,199
of the response value is sufficiently

417
00:15:43,199 --> 00:15:44,480
small

418
00:15:44,480 --> 00:15:46,560
also they should check that the

419
00:15:46,560 --> 00:15:47,759
commitment com

420
00:15:47,759 --> 00:15:50,880
is a correct opening commitment

421
00:15:50,880 --> 00:15:54,320
com actually contains the randomness r

422
00:15:54,320 --> 00:15:56,720
and the sum of the commitments some of

423
00:15:56,720 --> 00:15:57,759
the first message

424
00:15:57,759 --> 00:16:02,480
w and the correctness indeed holds

425
00:16:02,480 --> 00:16:04,399
because of the linearity of the cis

426
00:16:04,399 --> 00:16:05,600
function

427
00:16:05,600 --> 00:16:09,680
and homomorphism commitment

428
00:16:09,680 --> 00:16:12,560
so what about the security so this is

429
00:16:12,560 --> 00:16:14,639
provably secure

430
00:16:14,639 --> 00:16:17,680
so here's the simulation sketch

431
00:16:17,680 --> 00:16:20,240
so if protocol doesn't abort honest

432
00:16:20,240 --> 00:16:21,600
party oracle

433
00:16:21,600 --> 00:16:23,839
can be simulated with the user

434
00:16:23,839 --> 00:16:25,759
non-voting when it's verified the notice

435
00:16:25,759 --> 00:16:27,279
simulator

436
00:16:27,279 --> 00:16:30,399
if the protocol doesn't avoid then

437
00:16:30,399 --> 00:16:32,240
thanks to the hiding property of the

438
00:16:32,240 --> 00:16:33,519
commitment

439
00:16:33,519 --> 00:16:36,480
the rejected com together with the

440
00:16:36,480 --> 00:16:37,360
challenge

441
00:16:37,360 --> 00:16:41,199
revealed nothing about the rejected w

442
00:16:41,199 --> 00:16:44,320
so this way we can easily argue the

443
00:16:44,320 --> 00:16:48,480
simulation of the honest party oracle

444
00:16:48,560 --> 00:16:50,959
and then in our paper uh we present a

445
00:16:50,959 --> 00:16:52,399
security reduction

446
00:16:52,399 --> 00:16:54,959
to lwe without relying on the forking

447
00:16:54,959 --> 00:16:55,839
number

448
00:16:55,839 --> 00:16:58,880
so this was made possible uh by

449
00:16:58,880 --> 00:17:00,639
making use of the existing technique or

450
00:17:00,639 --> 00:17:04,559
the lossy identification

451
00:17:04,559 --> 00:17:08,000
so what about efficiency so as mentioned

452
00:17:08,000 --> 00:17:11,280
um so this approach doesn't require any

453
00:17:11,280 --> 00:17:14,319
expensive machinery like fhe

454
00:17:14,319 --> 00:17:17,439
mpc or even a gaussian sampling of

455
00:17:17,439 --> 00:17:18,959
lattices

456
00:17:18,959 --> 00:17:22,240
because as an underlying protocol uh we

457
00:17:22,240 --> 00:17:24,559
employ viajamir supports so what we need

458
00:17:24,559 --> 00:17:26,400
is just a local

459
00:17:26,400 --> 00:17:30,240
gaussian sampling over the integers

460
00:17:30,799 --> 00:17:33,520
and then um but of course this uh

461
00:17:33,520 --> 00:17:35,679
somehow sacrifice to some extent

462
00:17:35,679 --> 00:17:39,120
uh sacrifices uh the scalability

463
00:17:39,120 --> 00:17:42,960
so if we uh if you think about

464
00:17:42,960 --> 00:17:46,080
the general number of parties n

465
00:17:46,080 --> 00:17:49,760
then because we take the sum of response

466
00:17:49,760 --> 00:17:51,840
the euclidean norm of the resonance

467
00:17:51,840 --> 00:17:53,919
value z grows by a factor of

468
00:17:53,919 --> 00:17:57,039
a square root number of parties so this

469
00:17:57,039 --> 00:17:58,799
is why we have to somehow

470
00:17:58,799 --> 00:18:02,000
adjust adjusted parameters

471
00:18:02,320 --> 00:18:05,120
and also another issue is that we have

472
00:18:05,120 --> 00:18:05,840
to wait for

473
00:18:05,840 --> 00:18:08,240
all n parties to pass the rejection

474
00:18:08,240 --> 00:18:09,360
sampling

475
00:18:09,360 --> 00:18:12,799
simultaneously so of course the if the

476
00:18:12,799 --> 00:18:14,799
number of parties is large

477
00:18:14,799 --> 00:18:17,919
the this probability that the protocol

478
00:18:17,919 --> 00:18:18,799
succeeds is

479
00:18:18,799 --> 00:18:22,160
exponentially small so this is why uh

480
00:18:22,160 --> 00:18:25,919
in order to make the protocol

481
00:18:25,919 --> 00:18:28,960
a practical we have to either adjust the

482
00:18:28,960 --> 00:18:31,360
value of the standard deviation

483
00:18:31,360 --> 00:18:34,160
uh depending on the number of parties or

484
00:18:34,160 --> 00:18:35,919
uh you have to

485
00:18:35,919 --> 00:18:38,720
execute sufficient number of protocol

486
00:18:38,720 --> 00:18:39,440
executions

487
00:18:39,440 --> 00:18:42,480
of protocol instances so that

488
00:18:42,480 --> 00:18:46,080
at least one of the protocol instances

489
00:18:46,080 --> 00:18:48,400
in the protocol instances we can hope

490
00:18:48,400 --> 00:18:50,960
that all parties simultaneously

491
00:18:50,960 --> 00:18:54,080
pass the rejection sample

492
00:18:55,200 --> 00:18:59,280
so how do we achieve two round vertical

493
00:18:59,280 --> 00:19:02,559
so as mentioned earlier this first round

494
00:19:02,559 --> 00:19:04,320
the committing to the commitment looks a

495
00:19:04,320 --> 00:19:06,320
bit redundant so what if we

496
00:19:06,320 --> 00:19:10,000
just remove this round so the protocol

497
00:19:10,000 --> 00:19:12,880
looks much simpler first uh both parties

498
00:19:12,880 --> 00:19:14,160
generate commitment

499
00:19:14,160 --> 00:19:17,840
and exchange commitments however

500
00:19:17,840 --> 00:19:21,440
if you try to give a security reduction

501
00:19:21,440 --> 00:19:24,559
we actually face some issues

502
00:19:24,559 --> 00:19:27,200
so in the standard uh security uh

503
00:19:27,200 --> 00:19:27,919
reduction

504
00:19:27,919 --> 00:19:31,120
for the fiat xiaomi type signatures you

505
00:19:31,120 --> 00:19:32,240
actually have to

506
00:19:32,240 --> 00:19:36,400
simulate the honest party

507
00:19:36,400 --> 00:19:39,520
signing oracle so

508
00:19:39,520 --> 00:19:41,200
for the honest party signing oracle

509
00:19:41,200 --> 00:19:43,200
simulation uh you first

510
00:19:43,200 --> 00:19:45,840
generate the response z and the

511
00:19:45,840 --> 00:19:46,799
challenge

512
00:19:46,799 --> 00:19:49,520
and then determine the the first message

513
00:19:49,520 --> 00:19:50,720
w

514
00:19:50,720 --> 00:19:52,559
and then accordingly you have to program

515
00:19:52,559 --> 00:19:53,760
the random oracle

516
00:19:53,760 --> 00:19:57,440
such that uh that this corresponding

517
00:19:57,440 --> 00:20:00,480
output becomes indeed previously chosen

518
00:20:00,480 --> 00:20:04,159
chinese c so this is not the issue

519
00:20:04,159 --> 00:20:07,200
for a single user scheme but for an end

520
00:20:07,200 --> 00:20:08,320
party scheme

521
00:20:08,320 --> 00:20:11,200
you actually fail to program the random

522
00:20:11,200 --> 00:20:12,080
occult

523
00:20:12,080 --> 00:20:14,880
the ift honest party first sends out

524
00:20:14,880 --> 00:20:16,000
commitment

525
00:20:16,000 --> 00:20:18,240
so in this case after you send out

526
00:20:18,240 --> 00:20:19,360
commitment

527
00:20:19,360 --> 00:20:22,880
the simulator doesn't know what

528
00:20:22,880 --> 00:20:26,000
commitment the adversity will send

529
00:20:26,000 --> 00:20:28,240
so the simulation sorry the program of

530
00:20:28,240 --> 00:20:30,400
the programming on the random oracle

531
00:20:30,400 --> 00:20:32,840
requires some contribution from the

532
00:20:32,840 --> 00:20:35,200
adversary

533
00:20:35,200 --> 00:20:37,039
so the simulation actually doesn't work

534
00:20:37,039 --> 00:20:39,039
here

535
00:20:39,039 --> 00:20:42,720
also uh so it's not just about a

536
00:20:42,720 --> 00:20:46,240
probable security issue so you actually

537
00:20:46,240 --> 00:20:48,720
you're actually able to describe some

538
00:20:48,720 --> 00:20:50,240
potential concurrent attack

539
00:20:50,240 --> 00:20:53,440
uh as a variant of drivers a trials

540
00:20:53,440 --> 00:20:56,480
attack against the channel signatures so

541
00:20:56,480 --> 00:20:58,320
in order to circumvent this

542
00:20:58,320 --> 00:21:02,320
we essentially borrow the idea

543
00:21:02,320 --> 00:21:05,600
that the you you hashed the message to

544
00:21:05,600 --> 00:21:06,400
be signed

545
00:21:06,400 --> 00:21:08,559
into the commitment key anyway so in

546
00:21:08,559 --> 00:21:09,840
order to circumvent

547
00:21:09,840 --> 00:21:14,159
uh this issue of the simulation so we

548
00:21:14,159 --> 00:21:16,159
make use of the the so-called straight

549
00:21:16,159 --> 00:21:17,600
line simulation

550
00:21:17,600 --> 00:21:20,880
uh with trap door commitment so we

551
00:21:20,880 --> 00:21:22,720
strapped our commitment

552
00:21:22,720 --> 00:21:24,720
uh scheme uh the commitment key

553
00:21:24,720 --> 00:21:26,159
generation

554
00:21:26,159 --> 00:21:28,480
additionally outputs an extra attractor

555
00:21:28,480 --> 00:21:30,159
uh td

556
00:21:30,159 --> 00:21:33,600
and given this trapdoor the commitment

557
00:21:33,600 --> 00:21:36,080
can be opened to any message so we

558
00:21:36,080 --> 00:21:37,200
exploit this

559
00:21:37,200 --> 00:21:40,080
a useful feature

560
00:21:40,240 --> 00:21:43,280
so here's how the simulation goes

561
00:21:43,280 --> 00:21:46,320
so the simulator now sends out some

562
00:21:46,320 --> 00:21:50,000
fake commitment uh with a which is not

563
00:21:50,000 --> 00:21:52,880
associated with any message yet

564
00:21:52,880 --> 00:21:54,320
and then this fake commitment can be

565
00:21:54,320 --> 00:21:56,720
later equivocated to anything

566
00:21:56,720 --> 00:22:00,240
depending on the derived joint challenge

567
00:22:00,240 --> 00:22:02,559
so more concretely the simulation goes

568
00:22:02,559 --> 00:22:03,679
like this

569
00:22:03,679 --> 00:22:05,360
so here the simulator of course doesn't

570
00:22:05,360 --> 00:22:07,360
have any secret signing key

571
00:22:07,360 --> 00:22:10,720
but it has some trap door then during

572
00:22:10,720 --> 00:22:12,159
the first round uh

573
00:22:12,159 --> 00:22:14,080
the simulator just sends a fake

574
00:22:14,080 --> 00:22:16,080
commitment

575
00:22:16,080 --> 00:22:19,120
then you just

576
00:22:19,120 --> 00:22:22,320
generate a challenge after receiving

577
00:22:22,320 --> 00:22:26,880
the adversary's shares of commitment too

578
00:22:26,880 --> 00:22:29,760
then you can invoke the honest verified

579
00:22:29,760 --> 00:22:30,880
general simulator

580
00:22:30,880 --> 00:22:32,960
for the underlying protocol and then

581
00:22:32,960 --> 00:22:34,400
once you determine the

582
00:22:34,400 --> 00:22:36,480
the pre-image of the commitment you can

583
00:22:36,480 --> 00:22:39,679
equivocate the commitment

584
00:22:39,679 --> 00:22:44,159
to this simulated message w

585
00:22:44,400 --> 00:22:48,159
so this is how the simulation works

586
00:22:48,240 --> 00:22:51,280
also you have to take care of the

587
00:22:51,280 --> 00:22:54,400
hashing to the commitment key

588
00:22:54,400 --> 00:22:56,880
so as i said we actually have to

589
00:22:56,880 --> 00:22:58,320
generate the commitment key

590
00:22:58,320 --> 00:23:01,679
for each message to be signed

591
00:23:01,679 --> 00:23:04,799
so this requires additional uh random

592
00:23:04,799 --> 00:23:06,880
oracle simulation

593
00:23:06,880 --> 00:23:09,440
so for the simulation to work uh

594
00:23:09,440 --> 00:23:11,840
basically for each message to be signed

595
00:23:11,840 --> 00:23:14,080
you invoke trapdoor commitment key

596
00:23:14,080 --> 00:23:15,039
generation

597
00:23:15,039 --> 00:23:17,120
and then program the run number call

598
00:23:17,120 --> 00:23:18,080
such that

599
00:23:18,080 --> 00:23:21,360
uh the output commitment key is

600
00:23:21,360 --> 00:23:25,280
associated with a message to be signed

601
00:23:25,280 --> 00:23:29,440
so this completes the proof essentially

602
00:23:30,159 --> 00:23:33,919
so uh let's look at the final form of

603
00:23:33,919 --> 00:23:36,320
our two round protocol

604
00:23:36,320 --> 00:23:39,360
so in this protocol commitment key is

605
00:23:39,360 --> 00:23:41,120
first generated

606
00:23:41,120 --> 00:23:43,760
depending on the message and then both

607
00:23:43,760 --> 00:23:44,880
parties

608
00:23:44,880 --> 00:23:47,600
exchange the commitment from one com2

609
00:23:47,600 --> 00:23:48,640
and then

610
00:23:48,640 --> 00:23:51,760
they perform rejection sampling if

611
00:23:51,760 --> 00:23:52,720
that's successful

612
00:23:52,720 --> 00:23:55,520
they open the commitment and send the

613
00:23:55,520 --> 00:23:57,760
response otherwise they restart

614
00:23:57,760 --> 00:24:04,240
this concludes the protocol

615
00:24:04,240 --> 00:24:07,360
so uh a bit more about the security

616
00:24:07,360 --> 00:24:10,000
actually uh the inevitably the trapdoor

617
00:24:10,000 --> 00:24:10,880
commitment scheme

618
00:24:10,880 --> 00:24:14,000
requires computational binding

619
00:24:14,000 --> 00:24:16,240
so this seems to require some kind of

620
00:24:16,240 --> 00:24:18,480
rewinding technique actually

621
00:24:18,480 --> 00:24:20,640
in our security proof we had to rely on

622
00:24:20,640 --> 00:24:21,919
the forking lemma

623
00:24:21,919 --> 00:24:23,600
which leads to a larger significant

624
00:24:23,600 --> 00:24:27,279
security loss than the lossy

625
00:24:27,279 --> 00:24:30,559
identification technique

626
00:24:30,640 --> 00:24:33,440
also although i didn't have time to uh

627
00:24:33,440 --> 00:24:35,279
talk about the trapdoor commitment

628
00:24:35,279 --> 00:24:36,159
scheme

629
00:24:36,159 --> 00:24:39,120
uh and the concrete installation uh in

630
00:24:39,120 --> 00:24:40,000
our paper

631
00:24:40,000 --> 00:24:43,120
uh we have some concrete instantiation

632
00:24:43,120 --> 00:24:44,840
uh based on solidly based on

633
00:24:44,840 --> 00:24:46,159
lattice-based

634
00:24:46,159 --> 00:24:48,799
assumptions

635
00:24:49,440 --> 00:24:52,320
so to conclude in this work we

636
00:24:52,320 --> 00:24:52,960
introduced

637
00:24:52,960 --> 00:24:54,880
multi-party field xiaomi visa board

638
00:24:54,880 --> 00:24:57,760
signing with low round complexity

639
00:24:57,760 --> 00:25:01,200
yet without a heavy primitives like fhe

640
00:25:01,200 --> 00:25:05,279
or generic multibody computations

641
00:25:05,520 --> 00:25:07,679
i didn't talk about the multi-signatures

642
00:25:07,679 --> 00:25:08,640
but essentially

643
00:25:08,640 --> 00:25:10,960
you can easily extend this technique to

644
00:25:10,960 --> 00:25:12,799
the mod signatures

645
00:25:12,799 --> 00:25:16,640
by deriving uh the challenge for each uh

646
00:25:16,640 --> 00:25:20,240
for each signer

647
00:25:20,240 --> 00:25:23,360
and uh thanks to this uh replacement uh

648
00:25:23,360 --> 00:25:25,200
we can actually uh

649
00:25:25,200 --> 00:25:26,559
we actually don't have to require a

650
00:25:26,559 --> 00:25:28,320
dedicated interactive

651
00:25:28,320 --> 00:25:31,279
key generation protocol and then the the

652
00:25:31,279 --> 00:25:32,480
construction can be

653
00:25:32,480 --> 00:25:34,559
proven secure in the plain public key

654
00:25:34,559 --> 00:25:35,919
model

655
00:25:35,919 --> 00:25:37,679
and we still have a couple of open

656
00:25:37,679 --> 00:25:39,360
questions for example

657
00:25:39,360 --> 00:25:42,720
uh this approach inevitably

658
00:25:42,720 --> 00:25:44,720
increases the the normal bound for the

659
00:25:44,720 --> 00:25:46,480
output signature

660
00:25:46,480 --> 00:25:48,640
so uh of course the interesting question

661
00:25:48,640 --> 00:25:49,679
is whether

662
00:25:49,679 --> 00:25:52,559
we can make the signature size less

663
00:25:52,559 --> 00:25:56,400
dependent on the number of parties n

664
00:25:56,400 --> 00:25:59,440
also our two round uh protocols had to

665
00:25:59,440 --> 00:26:00,720
rely on the forking number

666
00:26:00,720 --> 00:26:04,000
uh for the sake of security so can we

667
00:26:04,000 --> 00:26:06,960
even give a tighter security reduction

668
00:26:06,960 --> 00:26:07,840
as well as

669
00:26:07,840 --> 00:26:09,840
security proof in the quantum random

670
00:26:09,840 --> 00:26:11,520
oracle model

671
00:26:11,520 --> 00:26:13,440
these are very interesting follow-up

672
00:26:13,440 --> 00:26:15,840
questions

673
00:26:16,080 --> 00:26:18,240
so that's it from me thank you very much

674
00:26:18,240 --> 00:26:19,360
for your attention

675
00:26:19,360 --> 00:26:21,039
if you have any questions i'll be happy

676
00:26:21,039 --> 00:26:25,360
to answer

