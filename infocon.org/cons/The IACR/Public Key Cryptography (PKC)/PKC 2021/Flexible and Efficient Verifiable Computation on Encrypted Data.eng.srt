1
00:00:00,480 --> 00:00:03,040
hi everyone i'm dhong kim and i'll talk

2
00:00:03,040 --> 00:00:04,880
about flexible and action verify

3
00:00:04,880 --> 00:00:07,120
recommendation on encrypted data

4
00:00:07,120 --> 00:00:09,599
this is a joint work with alexander boyd

5
00:00:09,599 --> 00:00:11,040
ignacio cascudo

6
00:00:11,040 --> 00:00:15,120
and dario fury let me start with the

7
00:00:15,120 --> 00:00:16,800
motivation of our work

8
00:00:16,800 --> 00:00:18,480
the motivation is on our source

9
00:00:18,480 --> 00:00:20,320
computation where a client

10
00:00:20,320 --> 00:00:22,880
outsources its data and computation to a

11
00:00:22,880 --> 00:00:23,760
server

12
00:00:23,760 --> 00:00:25,840
then the server server gets back the

13
00:00:25,840 --> 00:00:26,800
result

14
00:00:26,800 --> 00:00:29,039
in this case we can think about two

15
00:00:29,039 --> 00:00:30,000
security concerns

16
00:00:30,000 --> 00:00:33,120
or concerns of client the first one is

17
00:00:33,120 --> 00:00:34,640
the data privacy

18
00:00:34,640 --> 00:00:36,880
that the client doesn't want to expose

19
00:00:36,880 --> 00:00:38,640
its data

20
00:00:38,640 --> 00:00:40,559
the second one is computational

21
00:00:40,559 --> 00:00:41,760
integrity that

22
00:00:41,760 --> 00:00:43,920
the client wants to be guaranteed that

23
00:00:43,920 --> 00:00:45,520
the result

24
00:00:45,520 --> 00:00:49,039
is correct our goal is to provide

25
00:00:49,039 --> 00:00:51,680
solution to these problems with an

26
00:00:51,680 --> 00:00:52,399
efficiency

27
00:00:52,399 --> 00:00:54,559
here efficiency means that the

28
00:00:54,559 --> 00:00:55,520
computation

29
00:00:55,520 --> 00:00:58,399
the storage and the communication usage

30
00:00:58,399 --> 00:00:58,719
in

31
00:00:58,719 --> 00:01:01,199
this protocol should be as small as

32
00:01:01,199 --> 00:01:03,680
possible

33
00:01:04,080 --> 00:01:06,880
on data privacy fully home encryption

34
00:01:06,880 --> 00:01:08,960
can be a great solution

35
00:01:08,960 --> 00:01:11,600
with smooth encryption one can compute

36
00:01:11,600 --> 00:01:13,760
any function on encrypted data without

37
00:01:13,760 --> 00:01:15,040
decrypting it

38
00:01:15,040 --> 00:01:17,920
if a client outsources its data which is

39
00:01:17,920 --> 00:01:19,520
encrypted with

40
00:01:19,520 --> 00:01:22,000
home of encryption the client can't get

41
00:01:22,000 --> 00:01:24,479
a result without exposing the data

42
00:01:24,479 --> 00:01:28,320
to anyone following gentry's blueprint

43
00:01:28,320 --> 00:01:30,560
many work have improved the efficiency

44
00:01:30,560 --> 00:01:32,000
of home encryption

45
00:01:32,000 --> 00:01:35,280
and most schemes are usable in practice

46
00:01:35,280 --> 00:01:37,600
we remarked that client is efficient

47
00:01:37,600 --> 00:01:39,280
since it only performs

48
00:01:39,280 --> 00:01:41,600
encryption and decryption while the

49
00:01:41,600 --> 00:01:43,680
server's computational burden has been

50
00:01:43,680 --> 00:01:46,159
improved

51
00:01:46,960 --> 00:01:49,600
on computational integrity verifiable

52
00:01:49,600 --> 00:01:52,399
computation can be a good solution

53
00:01:52,399 --> 00:01:54,799
in verified documentation a server

54
00:01:54,799 --> 00:01:57,280
provides a proof for the computation

55
00:01:57,280 --> 00:01:59,360
and the client can verify the result

56
00:01:59,360 --> 00:02:01,520
with it

57
00:02:01,520 --> 00:02:04,079
there has been many work on breezy and

58
00:02:04,079 --> 00:02:06,159
now we can see that they are used in

59
00:02:06,159 --> 00:02:07,200
practice as

60
00:02:07,200 --> 00:02:11,440
snarks on efficiency of this solution

61
00:02:11,440 --> 00:02:13,920
the verification is usually efficient

62
00:02:13,920 --> 00:02:16,080
independent of the computation

63
00:02:16,080 --> 00:02:20,160
and server's burden has been improved

64
00:02:21,840 --> 00:02:24,080
then what is the solution for both

65
00:02:24,080 --> 00:02:26,400
privacy and integrity

66
00:02:26,400 --> 00:02:28,640
there are only a few work on this and

67
00:02:28,640 --> 00:02:30,800
only fgpa14

68
00:02:30,800 --> 00:02:33,200
provides a solution with actual

69
00:02:33,200 --> 00:02:35,840
instantiation

70
00:02:35,840 --> 00:02:38,959
solution of fgp14 is to outsource the

71
00:02:38,959 --> 00:02:40,080
computation with

72
00:02:40,080 --> 00:02:43,120
fully hoof encryption then verify the

73
00:02:43,120 --> 00:02:45,840
ruling of encryption computation with

74
00:02:45,840 --> 00:02:48,560
verifiable computation

75
00:02:48,560 --> 00:02:52,000
this can be a quite simple solution but

76
00:02:52,000 --> 00:02:55,200
the problem is to design an action 3c

77
00:02:55,200 --> 00:02:58,720
for the freehold encryption computation

78
00:02:58,720 --> 00:03:00,959
only a framework provides a solution to

79
00:03:00,959 --> 00:03:02,319
this and

80
00:03:02,319 --> 00:03:04,879
our main contribution is to provide a

81
00:03:04,879 --> 00:03:06,080
solution to this

82
00:03:06,080 --> 00:03:09,760
problem more precisely

83
00:03:09,760 --> 00:03:11,760
we can compare the previous work with

84
00:03:11,760 --> 00:03:13,360
ours as files

85
00:03:13,360 --> 00:03:16,480
as if we see on fhg at first

86
00:03:16,480 --> 00:03:19,519
our solution can verify fha with any

87
00:03:19,519 --> 00:03:21,120
self-test modulus

88
00:03:21,120 --> 00:03:23,360
while the previous one work only with

89
00:03:23,360 --> 00:03:25,760
prime modules of size bigger than

90
00:03:25,760 --> 00:03:28,799
for example 256 bit

91
00:03:28,799 --> 00:03:32,319
for 128 bit security

92
00:03:32,319 --> 00:03:35,599
it enables more flexible choice of fh

93
00:03:35,599 --> 00:03:37,519
parameters and gives more action

94
00:03:37,519 --> 00:03:41,120
usage of fhe we also generalized

95
00:03:41,120 --> 00:03:43,120
the previous solution so that we can

96
00:03:43,120 --> 00:03:45,599
verify non-deterministic computation on

97
00:03:45,599 --> 00:03:47,920
encrypted data

98
00:03:47,920 --> 00:03:49,840
technically the main point is the

99
00:03:49,840 --> 00:03:51,599
introduction of our new home

100
00:03:51,599 --> 00:03:54,319
cache from h functions which will be

101
00:03:54,319 --> 00:03:55,680
explained later

102
00:03:55,680 --> 00:03:58,400
we also adapted gkr protocol for rings

103
00:03:58,400 --> 00:04:00,879
to verify the fh computation

104
00:04:00,879 --> 00:04:04,000
and also provided a model for vc on

105
00:04:04,000 --> 00:04:05,280
encrypted data

106
00:04:05,280 --> 00:04:09,280
for non-deterministic computation

107
00:04:10,080 --> 00:04:12,560
now we will talk about the basic syntax

108
00:04:12,560 --> 00:04:15,280
and generic scheme

109
00:04:15,280 --> 00:04:18,399
at first b5 computation is composed of

110
00:04:18,399 --> 00:04:20,000
four algorithms

111
00:04:20,000 --> 00:04:22,000
and the pre-processing algorithm

112
00:04:22,000 --> 00:04:24,720
generates a crs for a function f

113
00:04:24,720 --> 00:04:26,880
and verification algorithm verify the

114
00:04:26,880 --> 00:04:28,160
computation result

115
00:04:28,160 --> 00:04:30,479
with the proof generated from the proof

116
00:04:30,479 --> 00:04:31,919
algorithm

117
00:04:31,919 --> 00:04:34,960
we see satisfies correctness soundness

118
00:04:34,960 --> 00:04:38,000
and success succinctly's property

119
00:04:38,000 --> 00:04:40,400
the suddenly says that an adversary

120
00:04:40,400 --> 00:04:41,360
cannot pass

121
00:04:41,360 --> 00:04:43,280
the verification with an incorrect

122
00:04:43,280 --> 00:04:44,560
result

123
00:04:44,560 --> 00:04:47,199
while succinctness says that the proof

124
00:04:47,199 --> 00:04:48,639
site is small

125
00:04:48,639 --> 00:04:50,720
and verification is faster than

126
00:04:50,720 --> 00:04:54,080
computing the function f

127
00:04:54,080 --> 00:04:56,400
the home encryption is composed of four

128
00:04:56,400 --> 00:04:58,160
algorithms called kejan

129
00:04:58,160 --> 00:05:01,199
encryption event and decryption the

130
00:05:01,199 --> 00:05:03,199
correct correctness property ensures

131
00:05:03,199 --> 00:05:03,600
that

132
00:05:03,600 --> 00:05:05,520
the computation on self text is

133
00:05:05,520 --> 00:05:07,360
morphically preserved

134
00:05:07,360 --> 00:05:10,800
to the computation on the message and

135
00:05:10,800 --> 00:05:14,240
the save text also satisfies the user

136
00:05:14,240 --> 00:05:18,320
user in the cpa security

137
00:05:19,280 --> 00:05:21,680
now we can introduce the generic scheme

138
00:05:21,680 --> 00:05:23,280
of fgp 14

139
00:05:23,280 --> 00:05:26,400
which describes the v5 computation on

140
00:05:26,400 --> 00:05:27,919
encrypted data

141
00:05:27,919 --> 00:05:30,400
the generic scheme is composed of setup

142
00:05:30,400 --> 00:05:31,039
keygen

143
00:05:31,039 --> 00:05:33,680
problem gen compute verify and decoding

144
00:05:33,680 --> 00:05:34,880
algorithm

145
00:05:34,880 --> 00:05:37,280
and it actually describes the schema at

146
00:05:37,280 --> 00:05:38,720
the figure on the right

147
00:05:38,720 --> 00:05:41,440
side which verifies the average

148
00:05:41,440 --> 00:05:42,479
computation with

149
00:05:42,479 --> 00:05:45,840
vc we can see that

150
00:05:45,840 --> 00:05:48,400
this generic scheme constructed from vc

151
00:05:48,400 --> 00:05:49,520
and fha

152
00:05:49,520 --> 00:05:52,160
satisfies the required properties such

153
00:05:52,160 --> 00:05:53,280
as privacy

154
00:05:53,280 --> 00:05:56,479
integrity or sociability from the

155
00:05:56,479 --> 00:06:00,160
properties of vc and fhe

156
00:06:00,160 --> 00:06:03,600
here the main problem is that vc for fh

157
00:06:03,600 --> 00:06:04,400
computation

158
00:06:04,400 --> 00:06:07,600
can be efficient

159
00:06:07,600 --> 00:06:09,440
let me explain a bit more about the

160
00:06:09,440 --> 00:06:11,120
efficiency of vc

161
00:06:11,120 --> 00:06:13,680
on home encryption computation usually

162
00:06:13,680 --> 00:06:15,039
in half encryption

163
00:06:15,039 --> 00:06:17,520
the safe text is much bigger than the

164
00:06:17,520 --> 00:06:18,800
plain text

165
00:06:18,800 --> 00:06:21,280
and computational self text is also much

166
00:06:21,280 --> 00:06:23,759
heavier than those on the plain text

167
00:06:23,759 --> 00:06:27,360
for example in bb of encryption scheme

168
00:06:27,360 --> 00:06:30,240
ciphertext operation is at least d times

169
00:06:30,240 --> 00:06:32,639
bigger than those on the plain text

170
00:06:32,639 --> 00:06:38,319
and this d can be 2 to the 11 or 15.

171
00:06:38,319 --> 00:06:41,280
therefore if we apply vc on hoof

172
00:06:41,280 --> 00:06:42,880
encryption directly

173
00:06:42,880 --> 00:06:45,199
it is also that d times costly than

174
00:06:45,199 --> 00:06:46,960
vision plaintext

175
00:06:46,960 --> 00:06:49,280
and it makes the overall vc's came on

176
00:06:49,280 --> 00:06:50,319
encrypted data

177
00:06:50,319 --> 00:06:53,919
not action for practical use

178
00:06:53,919 --> 00:06:56,800
therefore it is inevitable to design an

179
00:06:56,800 --> 00:06:57,759
efficient pc

180
00:06:57,759 --> 00:07:00,840
for home encryption computation for

181
00:07:00,840 --> 00:07:02,319
efficiency

182
00:07:02,319 --> 00:07:04,560
a solution to this problem is to apply

183
00:07:04,560 --> 00:07:07,039
vc on the image of of cache

184
00:07:07,039 --> 00:07:10,080
on the hg computation here

185
00:07:10,080 --> 00:07:11,840
the homework cache is a ring

186
00:07:11,840 --> 00:07:14,240
homomorphism which preserves the site

187
00:07:14,240 --> 00:07:16,400
text action and multiplication

188
00:07:16,400 --> 00:07:19,680
and the range of home cache richness dh

189
00:07:19,680 --> 00:07:22,240
can be much smaller than the domain the

190
00:07:22,240 --> 00:07:24,000
site text face

191
00:07:24,000 --> 00:07:27,280
therefore vc on this image can be much

192
00:07:27,280 --> 00:07:29,599
more efficient than that on the site

193
00:07:29,599 --> 00:07:31,440
text

194
00:07:31,440 --> 00:07:33,919
since this hash is homophilic if the

195
00:07:33,919 --> 00:07:35,680
result is correct

196
00:07:35,680 --> 00:07:38,319
then the homophilic image is also

197
00:07:38,319 --> 00:07:40,720
verified to be correct

198
00:07:40,720 --> 00:07:43,199
however an adversary can send the wrong

199
00:07:43,199 --> 00:07:44,000
result

200
00:07:44,000 --> 00:07:46,319
which has the same image under this hash

201
00:07:46,319 --> 00:07:49,039
as the correct result

202
00:07:49,039 --> 00:07:51,919
to prevent this a verifier sample hash

203
00:07:51,919 --> 00:07:52,560
from

204
00:07:52,560 --> 00:07:56,000
family hashes which satisfies an

205
00:07:56,000 --> 00:07:59,199
epsilon universal property this property

206
00:07:59,199 --> 00:08:00,400
guarantees that

207
00:08:00,400 --> 00:08:03,440
if two size texts are different their

208
00:08:03,440 --> 00:08:05,520
images under the hedge are also

209
00:08:05,520 --> 00:08:07,759
different with high probability

210
00:08:07,759 --> 00:08:11,120
given that the hash is uniformly sampled

211
00:08:11,120 --> 00:08:11,520
from

212
00:08:11,520 --> 00:08:14,719
the family of hashes

213
00:08:14,800 --> 00:08:17,440
with the previous idea on qualification

214
00:08:17,440 --> 00:08:20,560
we can describe our pc on encrypted data

215
00:08:20,560 --> 00:08:23,599
this was also implicitly exploited in

216
00:08:23,599 --> 00:08:25,520
the previous work

217
00:08:25,520 --> 00:08:28,080
after approval or server gets back the

218
00:08:28,080 --> 00:08:29,039
result

219
00:08:29,039 --> 00:08:32,640
a verifier or client samples a hash from

220
00:08:32,640 --> 00:08:35,360
family of hashes then sends it to the

221
00:08:35,360 --> 00:08:36,559
proofer

222
00:08:36,559 --> 00:08:39,039
then the proverb provides a proof on

223
00:08:39,039 --> 00:08:40,320
this image of hash

224
00:08:40,320 --> 00:08:43,360
on the site text computation finally

225
00:08:43,360 --> 00:08:46,160
the verifier can verify this image then

226
00:08:46,160 --> 00:08:47,360
confirms that

227
00:08:47,360 --> 00:08:49,600
the result is correct or not according

228
00:08:49,600 --> 00:08:52,080
to this verification

229
00:08:52,080 --> 00:08:54,560
we can say that given that the hashes

230
00:08:54,560 --> 00:08:55,360
same from

231
00:08:55,360 --> 00:08:57,839
excellent universal hash family the

232
00:08:57,839 --> 00:08:59,839
success probability of

233
00:08:59,839 --> 00:09:02,959
on adversary in shooting is less than

234
00:09:02,959 --> 00:09:04,800
the absolute

235
00:09:04,800 --> 00:09:07,560
also the cost of vc can be reduced

236
00:09:07,560 --> 00:09:08,959
significantly

237
00:09:08,959 --> 00:09:11,760
and we checked it with our instantiation

238
00:09:11,760 --> 00:09:12,800
which will be explained

239
00:09:12,800 --> 00:09:15,279
later we also remarked that the

240
00:09:15,279 --> 00:09:17,120
interaction between verifier

241
00:09:17,120 --> 00:09:19,120
and prover can be made to be

242
00:09:19,120 --> 00:09:23,200
non-interactive with vr xiaomi heuristic

243
00:09:23,200 --> 00:09:25,600
now let me introduce the instantiation

244
00:09:25,600 --> 00:09:28,399
of our vc scheme on encrypted data

245
00:09:28,399 --> 00:09:30,880
for home of encryption we can use pivot

246
00:09:30,880 --> 00:09:32,160
home encryption

247
00:09:32,160 --> 00:09:35,279
and for verifier computation we can use

248
00:09:35,279 --> 00:09:38,560
gkr protocol our main contribution

249
00:09:38,560 --> 00:09:40,800
a construction of hoof cache will be

250
00:09:40,800 --> 00:09:43,760
mainly explained

251
00:09:44,080 --> 00:09:46,560
at first let's record the vivi home

252
00:09:46,560 --> 00:09:48,480
encryption scheme briefly

253
00:09:48,480 --> 00:09:50,959
let cavalry phi be a cycloatomic

254
00:09:50,959 --> 00:09:51,760
polynomial

255
00:09:51,760 --> 00:09:54,880
and let r sub t or r sub q be a

256
00:09:54,880 --> 00:09:56,160
polynomial ring mode

257
00:09:56,160 --> 00:09:59,839
t or mod q quantity by phi

258
00:09:59,839 --> 00:10:02,240
we will focus on the ciphertext space

259
00:10:02,240 --> 00:10:04,720
which is composed of polynomials in y

260
00:10:04,720 --> 00:10:08,320
with coefficient from rq then the set of

261
00:10:08,320 --> 00:10:09,440
text addition

262
00:10:09,440 --> 00:10:11,360
and multiplications are just the

263
00:10:11,360 --> 00:10:13,519
addition and multiplications on this

264
00:10:13,519 --> 00:10:14,880
polynomial ring

265
00:10:14,880 --> 00:10:18,079
which is equivalent to the z zq xy

266
00:10:18,079 --> 00:10:22,079
mode 5. also we assume that

267
00:10:22,079 --> 00:10:24,959
both phi will be done later then we can

268
00:10:24,959 --> 00:10:27,440
regard the size text space as simply

269
00:10:27,440 --> 00:10:31,040
zq xy and in other words all

270
00:10:31,040 --> 00:10:34,320
two varied polynomials on the queue

271
00:10:34,320 --> 00:10:36,560
therefore when we consider the home of

272
00:10:36,560 --> 00:10:38,399
cache the domain of hash

273
00:10:38,399 --> 00:10:42,480
is simply this z q x y

274
00:10:42,480 --> 00:10:45,120
finally we recall that in this

275
00:10:45,120 --> 00:10:46,640
encryption to compute

276
00:10:46,640 --> 00:10:48,720
function f with more multiplicative

277
00:10:48,720 --> 00:10:51,279
depth the size of q must be increased

278
00:10:51,279 --> 00:10:52,640
for correctness

279
00:10:52,640 --> 00:10:55,440
and the degree of five must be increased

280
00:10:55,440 --> 00:10:58,079
for security

281
00:10:58,079 --> 00:11:00,720
now let me introduce our home homework

282
00:11:00,720 --> 00:11:02,800
cache on the site text phase

283
00:11:02,800 --> 00:11:06,959
zq xy as i told we can simply consider

284
00:11:06,959 --> 00:11:09,360
the function have had on the space jet

285
00:11:09,360 --> 00:11:10,560
qxy

286
00:11:10,560 --> 00:11:13,519
and the f head is composed of addition

287
00:11:13,519 --> 00:11:15,040
and multiplication on this

288
00:11:15,040 --> 00:11:18,640
page then what can be a ramification on

289
00:11:18,640 --> 00:11:20,880
this page

290
00:11:20,880 --> 00:11:23,839
in the previous work one used an

291
00:11:23,839 --> 00:11:25,680
evaluation map which outputs

292
00:11:25,680 --> 00:11:28,240
an evaluation of constants alpha and

293
00:11:28,240 --> 00:11:30,240
beta on the input polynomial

294
00:11:30,240 --> 00:11:33,760
c x y this is simple and useful

295
00:11:33,760 --> 00:11:35,920
but it works only when the ciphertext

296
00:11:35,920 --> 00:11:36,800
modulus q

297
00:11:36,800 --> 00:11:40,000
is prime in our work

298
00:11:40,000 --> 00:11:42,560
we generalized the previous work and

299
00:11:42,560 --> 00:11:44,000
proposed the home of cache

300
00:11:44,000 --> 00:11:46,640
which also work on the subtext modules

301
00:11:46,640 --> 00:11:47,279
with q

302
00:11:47,279 --> 00:11:50,720
a power of prime in fact our of cache is

303
00:11:50,720 --> 00:11:53,040
a generalization of the previous

304
00:11:53,040 --> 00:11:54,720
evaluation map

305
00:11:54,720 --> 00:11:57,760
for an impulse polynomial c x y we

306
00:11:57,760 --> 00:11:59,040
substitute y

307
00:11:59,040 --> 00:12:02,240
with a polynomial r x in x then modulus

308
00:12:02,240 --> 00:12:02,800
reduce

309
00:12:02,800 --> 00:12:05,360
the polynomial with another polynomial h

310
00:12:05,360 --> 00:12:06,320
x

311
00:12:06,320 --> 00:12:08,720
then we can see that the previous

312
00:12:08,720 --> 00:12:11,120
evaluation map corresponds to the case

313
00:12:11,120 --> 00:12:11,920
with

314
00:12:11,920 --> 00:12:15,839
rx equal to beta and hx equal to

315
00:12:15,839 --> 00:12:19,519
x minus alpha we can easily see that

316
00:12:19,519 --> 00:12:22,560
this hash is homomorphic however

317
00:12:22,560 --> 00:12:25,040
determining where the when this hash

318
00:12:25,040 --> 00:12:27,279
family can be after the universal

319
00:12:27,279 --> 00:12:31,120
is more complicated to give a solution

320
00:12:31,120 --> 00:12:33,920
we need some facts on the coloring and

321
00:12:33,920 --> 00:12:35,360
shortcut dilemma

322
00:12:35,360 --> 00:12:38,079
at first recall that organic field is an

323
00:12:38,079 --> 00:12:39,040
extension field

324
00:12:39,040 --> 00:12:42,000
which is a zq polynomial questioned by

325
00:12:42,000 --> 00:12:43,760
an irregular polynomial h

326
00:12:43,760 --> 00:12:47,920
x where q is a prime the carrier ring is

327
00:12:47,920 --> 00:12:48,160
an

328
00:12:48,160 --> 00:12:50,240
analog of the scalar field when you

329
00:12:50,240 --> 00:12:51,200
consider

330
00:12:51,200 --> 00:12:54,639
visit so p to the power

331
00:12:54,639 --> 00:12:58,320
instead of zq recall that austral's z

332
00:12:58,320 --> 00:13:00,399
prolema states that a non-zero

333
00:13:00,399 --> 00:13:02,480
polynomial of degree d

334
00:13:02,480 --> 00:13:05,519
can have as at most d zeros in a subset

335
00:13:05,519 --> 00:13:07,680
a with some property

336
00:13:07,680 --> 00:13:10,240
with this one can show the epsilon

337
00:13:10,240 --> 00:13:12,160
universality of the hashes

338
00:13:12,160 --> 00:13:14,959
when q is prime since it is in fact

339
00:13:14,959 --> 00:13:15,920
equivalent to

340
00:13:15,920 --> 00:13:18,160
the statement that every nonzero

341
00:13:18,160 --> 00:13:21,279
polynomial will not be evaluated to be 0

342
00:13:21,279 --> 00:13:24,880
with high probability

343
00:13:25,120 --> 00:13:27,760
to show the epsilon universality in our

344
00:13:27,760 --> 00:13:28,639
case with power

345
00:13:28,639 --> 00:13:31,120
prime modulus the same argument can be

346
00:13:31,120 --> 00:13:32,160
used

347
00:13:32,160 --> 00:13:34,720
however the problem is that the size of

348
00:13:34,720 --> 00:13:35,920
a

349
00:13:35,920 --> 00:13:39,760
in the final ring is quite small

350
00:13:39,760 --> 00:13:42,800
therefore we exploit the coloring

351
00:13:42,800 --> 00:13:46,480
which has enough size of the set a then

352
00:13:46,480 --> 00:13:49,120
with this we can show that the epsilon

353
00:13:49,120 --> 00:13:50,240
universality

354
00:13:50,240 --> 00:13:54,000
with negligible epsilon

355
00:13:54,399 --> 00:13:57,519
now let me describe our home cache on z

356
00:13:57,519 --> 00:14:00,800
fit to the e x y for our h to be epsilon

357
00:14:00,800 --> 00:14:01,760
universal

358
00:14:01,760 --> 00:14:04,160
we separate hx from irreducible

359
00:14:04,160 --> 00:14:05,440
polynomials

360
00:14:05,440 --> 00:14:07,839
then the intermediate ring that p to the

361
00:14:07,839 --> 00:14:08,560
e x

362
00:14:08,560 --> 00:14:11,760
questioned by h x is a coloring

363
00:14:11,760 --> 00:14:14,959
then we sample rx from the set a of the

364
00:14:14,959 --> 00:14:16,560
scar roaring

365
00:14:16,560 --> 00:14:19,600
then with the charge dilemma on this

366
00:14:19,600 --> 00:14:21,680
coloring we can show the epstein

367
00:14:21,680 --> 00:14:23,360
universality

368
00:14:23,360 --> 00:14:25,680
in fact this is just an overview and i

369
00:14:25,680 --> 00:14:28,160
recommend to see our paper for detailed

370
00:14:28,160 --> 00:14:29,680
proof

371
00:14:29,680 --> 00:14:31,839
here we remark that there are plenty

372
00:14:31,839 --> 00:14:32,959
number of r

373
00:14:32,959 --> 00:14:36,480
h x and rx on all prime p if we increase

374
00:14:36,480 --> 00:14:38,240
the degree of h x

375
00:14:38,240 --> 00:14:41,199
therefore we can set our omega cache to

376
00:14:41,199 --> 00:14:42,560
satisfy

377
00:14:42,560 --> 00:14:45,680
after universality with negligible

378
00:14:45,680 --> 00:14:48,240
note that the degree of edge is not very

379
00:14:48,240 --> 00:14:49,040
large

380
00:14:49,040 --> 00:14:51,600
it can be similar to or less than the

381
00:14:51,600 --> 00:14:54,639
security parameter lambda

382
00:14:54,639 --> 00:14:56,720
one important and interesting detail is

383
00:14:56,720 --> 00:14:58,079
that we used to provide

384
00:14:58,079 --> 00:15:00,800
a public sampling process for the

385
00:15:00,800 --> 00:15:03,680
irreducible polynomial hx

386
00:15:03,680 --> 00:15:05,680
this can be done by simple rejection

387
00:15:05,680 --> 00:15:07,120
sampling where

388
00:15:07,120 --> 00:15:09,279
one samples a random polynomial then

389
00:15:09,279 --> 00:15:10,839
checks if it is

390
00:15:10,839 --> 00:15:14,560
reducible in our work we also provide

391
00:15:14,560 --> 00:15:17,199
more efficient sampling process 4-h

392
00:15:17,199 --> 00:15:20,160
which uses much less land of coins than

393
00:15:20,160 --> 00:15:22,399
the name method

394
00:15:22,399 --> 00:15:24,639
with this the sampling of home of cash

395
00:15:24,639 --> 00:15:27,120
can also make to be non-interactive with

396
00:15:27,120 --> 00:15:30,800
fiat xiaomi heuristic finally

397
00:15:30,800 --> 00:15:34,079
we can see that our home cache is good

398
00:15:34,079 --> 00:15:36,320
except that the range of the hash is the

399
00:15:36,320 --> 00:15:37,920
gallery

400
00:15:37,920 --> 00:15:39,839
since we have to prove and verify the

401
00:15:39,839 --> 00:15:40,959
image of hash

402
00:15:40,959 --> 00:15:44,320
we have to provide a v5 computation

403
00:15:44,320 --> 00:15:48,160
that works on this coloring

404
00:15:48,160 --> 00:15:50,959
for this we propose to adapt the jk

405
00:15:50,959 --> 00:15:53,519
protocol on the coloring as our freezy

406
00:15:53,519 --> 00:15:55,199
on discovery

407
00:15:55,199 --> 00:15:58,320
at first record that a gkr protocol

408
00:15:58,320 --> 00:16:00,800
which is introduced by goldwater

409
00:16:00,800 --> 00:16:03,440
karli and raptrom is a kind of b5

410
00:16:03,440 --> 00:16:04,480
computation

411
00:16:04,480 --> 00:16:07,040
called an interactive proof with this

412
00:16:07,040 --> 00:16:07,839
protocol

413
00:16:07,839 --> 00:16:10,000
with interactions between verifier and

414
00:16:10,000 --> 00:16:10,959
prover

415
00:16:10,959 --> 00:16:13,920
they can prove and verify the evaluation

416
00:16:13,920 --> 00:16:16,160
of zp arithmetic circuit

417
00:16:16,160 --> 00:16:18,480
or computation composed of addition and

418
00:16:18,480 --> 00:16:22,399
multiplication on the finite field

419
00:16:22,399 --> 00:16:23,839
the protocol can be made to be

420
00:16:23,839 --> 00:16:25,440
non-interactive with

421
00:16:25,440 --> 00:16:28,959
via xiaomi vst and the original

422
00:16:28,959 --> 00:16:31,120
the original protocol does not using

423
00:16:31,120 --> 00:16:33,199
crypto cryptographic schemes

424
00:16:33,199 --> 00:16:36,079
and its soundness only depends on the

425
00:16:36,079 --> 00:16:38,800
shot's triple lemma on the final field

426
00:16:38,800 --> 00:16:42,399
or zp therefore

427
00:16:42,399 --> 00:16:44,720
one can naturally think of this gkr

428
00:16:44,720 --> 00:16:45,600
protocol

429
00:16:45,600 --> 00:16:48,000
working over the color ring since the

430
00:16:48,000 --> 00:16:49,199
short zip lamba

431
00:16:49,199 --> 00:16:52,160
also holds in the coloring the protocol

432
00:16:52,160 --> 00:16:54,160
description is almost the same as the

433
00:16:54,160 --> 00:16:55,360
original one

434
00:16:55,360 --> 00:16:57,920
and the only difference is that every

435
00:16:57,920 --> 00:16:59,600
element is from the case

436
00:16:59,600 --> 00:17:02,800
the color ring instead of the zt or

437
00:17:02,800 --> 00:17:06,079
the final field then with this protocol

438
00:17:06,079 --> 00:17:07,280
over gathering

439
00:17:07,280 --> 00:17:09,359
one can directly prove and verify the

440
00:17:09,359 --> 00:17:10,880
computations over

441
00:17:10,880 --> 00:17:14,720
the gallery i also remarked that

442
00:17:14,720 --> 00:17:17,520
the degree of h or the degree recoloring

443
00:17:17,520 --> 00:17:18,240
can be set

444
00:17:18,240 --> 00:17:21,280
similarly as the case of home of cache

445
00:17:21,280 --> 00:17:23,439
to make the sound's probability

446
00:17:23,439 --> 00:17:25,919
negligible

447
00:17:25,919 --> 00:17:28,319
finally i can give the summary of our

448
00:17:28,319 --> 00:17:30,160
instantiation of vc

449
00:17:30,160 --> 00:17:33,200
on encrypted data a verifier sends b

450
00:17:33,200 --> 00:17:34,320
resize text

451
00:17:34,320 --> 00:17:36,720
and a computation function to the filter

452
00:17:36,720 --> 00:17:40,000
then the approver gives back the result

453
00:17:40,000 --> 00:17:42,480
here note that the site text and the

454
00:17:42,480 --> 00:17:44,480
result is regarded as two varied

455
00:17:44,480 --> 00:17:45,600
polynomials

456
00:17:45,600 --> 00:17:48,080
over integers modulus prime power by

457
00:17:48,080 --> 00:17:48,720
delaying

458
00:17:48,720 --> 00:17:52,559
the modular deduction by phi to the end

459
00:17:52,559 --> 00:17:55,360
then verify your samples are of cache

460
00:17:55,360 --> 00:17:57,679
which transforms the oversight text and

461
00:17:57,679 --> 00:17:58,480
computations

462
00:17:58,480 --> 00:18:01,200
to the elements and computations of a

463
00:18:01,200 --> 00:18:03,280
gallery

464
00:18:03,280 --> 00:18:06,160
in response approval sends a proof on

465
00:18:06,160 --> 00:18:08,559
the scattering with the gk protocol on

466
00:18:08,559 --> 00:18:09,840
this ring

467
00:18:09,840 --> 00:18:13,600
then the verifier can verify the result

468
00:18:13,600 --> 00:18:16,480
finally the wave file gets the result by

469
00:18:16,480 --> 00:18:17,919
computing modulo file

470
00:18:17,919 --> 00:18:21,919
then decrypting it the save text

471
00:18:21,919 --> 00:18:25,200
then finally the degree of edge can be

472
00:18:25,200 --> 00:18:26,320
set according to

473
00:18:26,320 --> 00:18:29,840
the security parameter lander

474
00:18:30,320 --> 00:18:33,520
now i'll give the performance of our vc

475
00:18:33,520 --> 00:18:35,840
on encrypted data

476
00:18:35,840 --> 00:18:38,960
recall that our our vc on encrypted

477
00:18:38,960 --> 00:18:42,000
data runs as the over figure then

478
00:18:42,000 --> 00:18:44,320
we can see that the time complexity of

479
00:18:44,320 --> 00:18:46,160
verifier and approval

480
00:18:46,160 --> 00:18:48,559
are composed of hash evaluation and cost

481
00:18:48,559 --> 00:18:49,600
for

482
00:18:49,600 --> 00:18:52,640
wave file computation on the range th

483
00:18:52,640 --> 00:18:56,720
of the hash for more concrete analysis

484
00:18:56,720 --> 00:18:58,880
we can consider the instantiation with a

485
00:18:58,880 --> 00:19:00,160
function f

486
00:19:00,160 --> 00:19:03,039
whose degree is capital d and number of

487
00:19:03,039 --> 00:19:05,039
additions and multiplications are

488
00:19:05,039 --> 00:19:09,280
s then assuming that we used our move

489
00:19:09,280 --> 00:19:10,000
cache and

490
00:19:10,000 --> 00:19:13,120
gkr protocol over coloring the cost of

491
00:19:13,120 --> 00:19:14,880
verifier improver

492
00:19:14,880 --> 00:19:17,600
measured by the number of zq operations

493
00:19:17,600 --> 00:19:19,679
can be summarized as

494
00:19:19,679 --> 00:19:23,360
these equations i note that

495
00:19:23,360 --> 00:19:26,400
since modulo 5 is delayed to the end the

496
00:19:26,400 --> 00:19:27,440
cluster compares

497
00:19:27,440 --> 00:19:31,280
a term quadratic in d while the original

498
00:19:31,280 --> 00:19:32,320
bf encryption

499
00:19:32,320 --> 00:19:35,440
would give a term linear in d

500
00:19:35,440 --> 00:19:38,160
still the time complexity for approval

501
00:19:38,160 --> 00:19:39,440
can be even less than

502
00:19:39,440 --> 00:19:42,480
the time complexity for homomorphic

503
00:19:42,480 --> 00:19:43,760
computation

504
00:19:43,760 --> 00:19:45,919
which shows that our scheme is quite

505
00:19:45,919 --> 00:19:48,400
efficient

506
00:19:49,360 --> 00:19:51,840
we can also see the performance of our

507
00:19:51,840 --> 00:19:52,400
vc

508
00:19:52,400 --> 00:19:55,440
more concretely with an example stroke

509
00:19:55,440 --> 00:19:57,760
we can think of two example circuit

510
00:19:57,760 --> 00:19:58,640
which computes

511
00:19:58,640 --> 00:20:01,280
an inner product of two vectors or which

512
00:20:01,280 --> 00:20:02,080
can

513
00:20:02,080 --> 00:20:04,559
compute the parallel evaluation of a

514
00:20:04,559 --> 00:20:05,760
polynomial

515
00:20:05,760 --> 00:20:09,200
on multiple inputs the parameters for

516
00:20:09,200 --> 00:20:10,799
our scheme is given in

517
00:20:10,799 --> 00:20:13,840
the table let z cube x

518
00:20:13,840 --> 00:20:16,480
quotiented by phi be the ciphertext

519
00:20:16,480 --> 00:20:17,039
space

520
00:20:17,039 --> 00:20:20,559
and let zqx questioned by hp

521
00:20:20,559 --> 00:20:23,840
the range of cache the performance

522
00:20:23,840 --> 00:20:26,159
improvement can be estimated by

523
00:20:26,159 --> 00:20:27,120
comparing

524
00:20:27,120 --> 00:20:30,720
the degree phi to the degree dh

525
00:20:30,720 --> 00:20:34,080
of h the range of hash is about 15

526
00:20:34,080 --> 00:20:38,400
to 200 400 of 240 times smaller

527
00:20:38,400 --> 00:20:41,039
than the site text page and therefore

528
00:20:41,039 --> 00:20:42,720
our vc is at least

529
00:20:42,720 --> 00:20:46,080
that times faster than applying user vc

530
00:20:46,080 --> 00:20:48,559
directly on the ciphertext space without

531
00:20:48,559 --> 00:20:50,559
hash

532
00:20:50,559 --> 00:20:55,200
if one uses the previous work f and p20

533
00:20:55,200 --> 00:20:57,360
the problem is that we must take low q

534
00:20:57,360 --> 00:21:00,080
to be bigger than 250

535
00:21:00,080 --> 00:21:03,200
it has the degree of phi of the fhe

536
00:21:03,200 --> 00:21:05,919
must be bigger than two to the fourteen

537
00:21:05,919 --> 00:21:07,039
which means that

538
00:21:07,039 --> 00:21:09,280
we have to use less efficient freehold

539
00:21:09,280 --> 00:21:10,880
encryption parameters

540
00:21:10,880 --> 00:21:13,679
even though it is not required for the

541
00:21:13,679 --> 00:21:14,840
average

542
00:21:14,840 --> 00:21:18,080
computation i finally mentioned that

543
00:21:18,080 --> 00:21:20,320
this parameter assumes the worst case

544
00:21:20,320 --> 00:21:23,760
where the prime p is 2

545
00:21:23,760 --> 00:21:26,640
and if prime p is bigger than 2 the

546
00:21:26,640 --> 00:21:28,720
degree d h can be much smaller

547
00:21:28,720 --> 00:21:32,720
and our vc can be more absorbed as well

548
00:21:32,720 --> 00:21:35,039
finally i'll give a short overview on

549
00:21:35,039 --> 00:21:36,159
our business scheme for

550
00:21:36,159 --> 00:21:38,000
non-deterministic computation and

551
00:21:38,000 --> 00:21:39,679
context tidying

552
00:21:39,679 --> 00:21:41,760
non-deterministic computations means a

553
00:21:41,760 --> 00:21:44,240
computation where approval can enter

554
00:21:44,240 --> 00:21:47,360
its additional input and context styling

555
00:21:47,360 --> 00:21:49,679
means that the decryption of cell text

556
00:21:49,679 --> 00:21:51,440
does not leak additional information

557
00:21:51,440 --> 00:21:54,000
than the message it has

558
00:21:54,000 --> 00:21:55,679
non-deterministic computation and

559
00:21:55,679 --> 00:21:57,520
context styling property

560
00:21:57,520 --> 00:21:59,919
allows the visual encrypted data to be

561
00:21:59,919 --> 00:22:02,320
used in more diverse cases

562
00:22:02,320 --> 00:22:05,120
for example we can think of the case

563
00:22:05,120 --> 00:22:06,320
where a party

564
00:22:06,320 --> 00:22:08,960
prepares and encrypts the data and the

565
00:22:08,960 --> 00:22:10,240
party decrypted

566
00:22:10,240 --> 00:22:13,600
result are different

567
00:22:13,600 --> 00:22:15,760
we provide we provide the model for

568
00:22:15,760 --> 00:22:17,280
vision encrypted data

569
00:22:17,280 --> 00:22:20,720
with cache that comprises the

570
00:22:20,720 --> 00:22:23,520
non-deterministic computations roughly

571
00:22:23,520 --> 00:22:25,520
this was done by generalizing the

572
00:22:25,520 --> 00:22:26,000
previous

573
00:22:26,000 --> 00:22:29,520
work ff 20 that performed noise floating

574
00:22:29,520 --> 00:22:30,080
by you

575
00:22:30,080 --> 00:22:33,840
using public size encryptions of zero

576
00:22:33,840 --> 00:22:37,120
then we also combined this with omf

577
00:22:37,120 --> 00:22:40,159
cache i refer to the paper

578
00:22:40,159 --> 00:22:43,200
for the detail

579
00:22:43,360 --> 00:22:45,840
finally i will end this talk proposing

580
00:22:45,840 --> 00:22:46,400
some

581
00:22:46,400 --> 00:22:49,760
problems at first it will be good if one

582
00:22:49,760 --> 00:22:51,600
can provide an efficient combination

583
00:22:51,600 --> 00:22:51,919
proof

584
00:22:51,919 --> 00:22:55,120
argument for half cash evaluation

585
00:22:55,120 --> 00:22:57,679
or more generally computations offer or

586
00:22:57,679 --> 00:22:59,280
gallery

587
00:22:59,280 --> 00:23:01,919
in our paper we only provided a generic

588
00:23:01,919 --> 00:23:04,400
crisis came for a non-determinist

589
00:23:04,400 --> 00:23:05,520
computation

590
00:23:05,520 --> 00:23:08,880
with our home of cash and on efficient

591
00:23:08,880 --> 00:23:11,039
instantiation of this scheme will be

592
00:23:11,039 --> 00:23:13,919
possible with an instantiation of those

593
00:23:13,919 --> 00:23:17,039
argument systems a second

594
00:23:17,039 --> 00:23:19,360
our instantiation uses beef encryption

595
00:23:19,360 --> 00:23:20,400
scheme

596
00:23:20,400 --> 00:23:24,320
but this moving creation scheme is

597
00:23:24,320 --> 00:23:27,360
not very action as the current level two

598
00:23:27,360 --> 00:23:29,440
function schemes

599
00:23:29,440 --> 00:23:32,480
the problem is that our voicey should

600
00:23:32,480 --> 00:23:32,960
support

601
00:23:32,960 --> 00:23:34,840
other operations than addition and

602
00:23:34,840 --> 00:23:36,000
multiplication

603
00:23:36,000 --> 00:23:39,360
to come up with those leveled move

604
00:23:39,360 --> 00:23:41,200
encryption schemes

605
00:23:41,200 --> 00:23:43,200
it will be very interesting if one can

606
00:23:43,200 --> 00:23:45,200
propose an efficient with the schemes

607
00:23:45,200 --> 00:23:45,600
with

608
00:23:45,600 --> 00:23:49,120
social ability finally we expect that

609
00:23:49,120 --> 00:23:50,640
our vc scheme is still

610
00:23:50,640 --> 00:23:53,760
very efficient for limited use cases and

611
00:23:53,760 --> 00:23:56,159
it will be fascinating if one can find a

612
00:23:56,159 --> 00:23:58,400
good application

613
00:23:58,400 --> 00:24:02,640
thank you very much

