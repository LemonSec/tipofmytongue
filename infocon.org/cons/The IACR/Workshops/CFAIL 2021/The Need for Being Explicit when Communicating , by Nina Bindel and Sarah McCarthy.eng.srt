1
00:00:00,080 --> 00:00:02,880
always how it works

2
00:00:04,080 --> 00:00:06,720
all right so our our last talk of the

3
00:00:06,720 --> 00:00:09,920
day uh appropriately titled the need for

4
00:00:09,920 --> 00:00:12,639
being explicit when communicating and

5
00:00:12,639 --> 00:00:14,000
it'll be a

6
00:00:14,000 --> 00:00:18,000
video talk and then a q a

7
00:00:31,519 --> 00:00:33,840
hello everybody my name is nina binlet

8
00:00:33,840 --> 00:00:35,600
and i'm a researcher at the university

9
00:00:35,600 --> 00:00:38,079
of waterloo at the iqc

10
00:00:38,079 --> 00:00:39,440
together with my colleague sarah

11
00:00:39,440 --> 00:00:42,000
mccarthy i tried to construct implicit

12
00:00:42,000 --> 00:00:43,760
certificates from lettuce-based

13
00:00:43,760 --> 00:00:46,480
cryptography

14
00:00:48,559 --> 00:00:50,879
in this talk today i will first explain

15
00:00:50,879 --> 00:00:52,879
briefly why we are interested in this

16
00:00:52,879 --> 00:00:55,440
problem more concretely i will first

17
00:00:55,440 --> 00:00:57,840
explain the quantum threat and why we

18
00:00:57,840 --> 00:00:59,760
need to transition to post quantum

19
00:00:59,760 --> 00:01:02,399
secure algorithms such as latest based

20
00:01:02,399 --> 00:01:04,000
algorithms

21
00:01:04,000 --> 00:01:06,799
afterwards i will explain an application

22
00:01:06,799 --> 00:01:09,520
in which implicit certificates are used

23
00:01:09,520 --> 00:01:13,760
namely vehicle-to-vehicle communication

24
00:01:13,760 --> 00:01:15,840
next i will discuss the differences of

25
00:01:15,840 --> 00:01:18,960
explicit and implicit certificates how

26
00:01:18,960 --> 00:01:21,280
implicit certificate schemes can be

27
00:01:21,280 --> 00:01:23,520
constructed and i will explain

28
00:01:23,520 --> 00:01:25,600
difficulties when constructing them from

29
00:01:25,600 --> 00:01:26,880
lattices

30
00:01:26,880 --> 00:01:29,119
this will also include a presentation of

31
00:01:29,119 --> 00:01:31,840
our most promising but nevertheless

32
00:01:31,840 --> 00:01:33,840
failed construction

33
00:01:33,840 --> 00:01:36,000
i will conclude my talk by explaining

34
00:01:36,000 --> 00:01:39,439
potential future directions

35
00:01:39,439 --> 00:01:41,360
so let's start with the transition to

36
00:01:41,360 --> 00:01:44,640
quantum secure algorithms

37
00:01:46,159 --> 00:01:48,720
ever since shaw published his polynomial

38
00:01:48,720 --> 00:01:51,280
time quantum algorithm to solve the

39
00:01:51,280 --> 00:01:53,920
prime factorization and discrete regular

40
00:01:53,920 --> 00:01:56,960
problem it is clear that most of our

41
00:01:56,960 --> 00:02:00,159
public key crypto in use will be broken

42
00:02:00,159 --> 00:02:02,719
as soon as large quantum computers can

43
00:02:02,719 --> 00:02:05,119
be built

44
00:02:05,360 --> 00:02:07,439
while important progress has been made

45
00:02:07,439 --> 00:02:09,679
during the last years a recent study

46
00:02:09,679 --> 00:02:12,239
estimates that a quad computer operating

47
00:02:12,239 --> 00:02:15,440
on 20 million qubits would be necessary

48
00:02:15,440 --> 00:02:17,440
to break rsa

49
00:02:17,440 --> 00:02:19,360
when can we expect such large quantum

50
00:02:19,360 --> 00:02:22,959
computers to be built

51
00:02:22,959 --> 00:02:24,959
in a recent study by the global risk

52
00:02:24,959 --> 00:02:27,920
institute of canada 22 quantum experts

53
00:02:27,920 --> 00:02:29,680
were asked to answer exactly this

54
00:02:29,680 --> 00:02:31,040
question

55
00:02:31,040 --> 00:02:33,280
their opinions differ of course but they

56
00:02:33,280 --> 00:02:34,720
seem to agree

57
00:02:34,720 --> 00:02:37,840
that within the next 30 years

58
00:02:37,840 --> 00:02:40,480
quantum computers will be able to break

59
00:02:40,480 --> 00:02:44,560
rsl 2048 with a probability of at least

60
00:02:44,560 --> 00:02:46,480
50 percent

61
00:02:46,480 --> 00:02:49,120
about half of them estimate that this

62
00:02:49,120 --> 00:02:52,000
will be possible within the next 15

63
00:02:52,000 --> 00:02:54,319
years

64
00:02:55,760 --> 00:02:58,959
but even if this gives us about 15 to 30

65
00:02:58,959 --> 00:03:00,959
years to prepare for the transition to

66
00:03:00,959 --> 00:03:03,280
quantum secure algorithms some

67
00:03:03,280 --> 00:03:05,200
applications just need to make this

68
00:03:05,200 --> 00:03:06,879
transition earlier

69
00:03:06,879 --> 00:03:08,800
consider for example

70
00:03:08,800 --> 00:03:11,599
vehicle to vehicle communication

71
00:03:11,599 --> 00:03:14,159
cars usually have a lifespan of about 10

72
00:03:14,159 --> 00:03:17,120
to 15 years which means that they might

73
00:03:17,120 --> 00:03:18,879
still be around when large quantum

74
00:03:18,879 --> 00:03:22,480
computers already exist

75
00:03:24,000 --> 00:03:26,000
therefore we need to prepare a

76
00:03:26,000 --> 00:03:28,319
transition to quantum secure algorithms

77
00:03:28,319 --> 00:03:32,119
as soon as possible

78
00:03:32,640 --> 00:03:35,280
fortunately preparations are already

79
00:03:35,280 --> 00:03:36,400
underway

80
00:03:36,400 --> 00:03:38,560
such as this post-quantum

81
00:03:38,560 --> 00:03:41,080
standardization process which started in

82
00:03:41,080 --> 00:03:44,480
2017 and which aims at standardizing

83
00:03:44,480 --> 00:03:47,120
digital signature schemes and public key

84
00:03:47,120 --> 00:03:49,760
encryption schemes or key encapsulation

85
00:03:49,760 --> 00:03:51,920
mechanisms

86
00:03:51,920 --> 00:03:54,879
at the moment the competition is in its

87
00:03:54,879 --> 00:03:57,439
third round with six candy dates for

88
00:03:57,439 --> 00:04:00,640
digital signature schemes left

89
00:04:00,640 --> 00:04:02,319
the two remaining ladder space

90
00:04:02,319 --> 00:04:07,599
algorithms are called falcon and delivio

91
00:04:08,239 --> 00:04:10,080
before i explain more details about

92
00:04:10,080 --> 00:04:12,480
these two algorithms let me give a short

93
00:04:12,480 --> 00:04:14,480
introduction to vehicle to vehicle

94
00:04:14,480 --> 00:04:17,200
communication

95
00:04:18,560 --> 00:04:20,560
vehicle to vehicle communication in this

96
00:04:20,560 --> 00:04:22,400
talks means direct wireless

97
00:04:22,400 --> 00:04:24,720
communication between vehicles to

98
00:04:24,720 --> 00:04:27,120
increase the situational awareness of

99
00:04:27,120 --> 00:04:28,479
drivers

100
00:04:28,479 --> 00:04:30,160
this might prevent up to six hundred

101
00:04:30,160 --> 00:04:32,160
thousand collisions per year in the us

102
00:04:32,160 --> 00:04:33,919
alone

103
00:04:33,919 --> 00:04:36,639
basic b2b communication is described in

104
00:04:36,639 --> 00:04:41,000
these two different standards

105
00:04:42,000 --> 00:04:44,160
at the core of these standards or at the

106
00:04:44,160 --> 00:04:46,880
core of v2v communication are so-called

107
00:04:46,880 --> 00:04:48,960
basic safety messages that are

108
00:04:48,960 --> 00:04:52,320
broadcasted by every car about 10 times

109
00:04:52,320 --> 00:04:54,960
per second

110
00:04:54,960 --> 00:04:56,560
information that are collected in the

111
00:04:56,560 --> 00:04:59,840
bsms are for example the location the

112
00:04:59,840 --> 00:05:01,600
time direction

113
00:05:01,600 --> 00:05:04,400
speed or the status of the brake and gas

114
00:05:04,400 --> 00:05:07,840
pedal of the vehicle

115
00:05:08,400 --> 00:05:11,120
how to transmit these messages securely

116
00:05:11,120 --> 00:05:13,360
is described in yet another standard

117
00:05:13,360 --> 00:05:17,520
namely the ieee 1609.2 standard

118
00:05:17,520 --> 00:05:20,000
more concretely the standard describes

119
00:05:20,000 --> 00:05:21,680
how to transmission the messages

120
00:05:21,680 --> 00:05:22,880
securely

121
00:05:22,880 --> 00:05:25,520
the needed cryptographic operations and

122
00:05:25,520 --> 00:05:27,520
a certificate management

123
00:05:27,520 --> 00:05:30,160
the entire standard uses elliptic curve

124
00:05:30,160 --> 00:05:34,639
cryptography such as ecdsa

125
00:05:35,039 --> 00:05:37,360
all right so how are these messages

126
00:05:37,360 --> 00:05:39,039
actually transmitted

127
00:05:39,039 --> 00:05:41,600
let's assume we have two cards a sender

128
00:05:41,600 --> 00:05:43,039
and a receiver

129
00:05:43,039 --> 00:05:45,199
the sender owning a private and public

130
00:05:45,199 --> 00:05:48,080
key first generates the bsm that means

131
00:05:48,080 --> 00:05:50,880
it first collects all the information

132
00:05:50,880 --> 00:05:53,680
then it signs the bsm using its private

133
00:05:53,680 --> 00:05:56,639
key and broadcasts the message the

134
00:05:56,639 --> 00:06:00,240
signature and its key

135
00:06:01,120 --> 00:06:04,400
the receiver extracts the public key

136
00:06:04,400 --> 00:06:07,199
verifies the signature and eventually

137
00:06:07,199 --> 00:06:10,000
sends the bsm to the driver's visual

138
00:06:10,000 --> 00:06:11,440
board

139
00:06:11,440 --> 00:06:13,440
the crucial point here is that a

140
00:06:13,440 --> 00:06:16,720
certificate has to be sent almost every

141
00:06:16,720 --> 00:06:19,039
time the message is set

142
00:06:19,039 --> 00:06:20,880
that means it is very important that a

143
00:06:20,880 --> 00:06:23,840
certificate is as small as possible

144
00:06:23,840 --> 00:06:28,000
enter implicit certificates

145
00:06:28,080 --> 00:06:30,479
to explain implicit certificates i would

146
00:06:30,479 --> 00:06:33,039
actually like to first remind you how

147
00:06:33,039 --> 00:06:37,120
explicit certificates are constructed

148
00:06:38,560 --> 00:06:41,039
simplified we assume that is a

149
00:06:41,039 --> 00:06:42,880
self-signed certificate

150
00:06:42,880 --> 00:06:46,720
generated by a certificate authority

151
00:06:46,720 --> 00:06:51,120
including the cas public key

152
00:06:51,120 --> 00:06:54,160
an explicit user certificate includes

153
00:06:54,160 --> 00:06:56,319
among many other information

154
00:06:56,319 --> 00:06:59,199
the user's public key and the id of the

155
00:06:59,199 --> 00:07:01,120
issuing ca

156
00:07:01,120 --> 00:07:03,759
moreover and very importantly it is

157
00:07:03,759 --> 00:07:07,120
signed by the ca

158
00:07:07,280 --> 00:07:09,599
assume now a verifier receives some

159
00:07:09,599 --> 00:07:13,680
signed data including designers identity

160
00:07:13,680 --> 00:07:15,520
this identity points to the

161
00:07:15,520 --> 00:07:17,599
corresponding certificate

162
00:07:17,599 --> 00:07:22,080
which in turn identifies the issuing ca

163
00:07:22,080 --> 00:07:24,160
the ca's public key

164
00:07:24,160 --> 00:07:26,639
is used to first validate the user's

165
00:07:26,639 --> 00:07:28,240
public key

166
00:07:28,240 --> 00:07:31,360
which in turn is then used to verify the

167
00:07:31,360 --> 00:07:35,680
signature on the send data

168
00:07:36,400 --> 00:07:38,080
this is different for implicit

169
00:07:38,080 --> 00:07:39,840
certificates

170
00:07:39,840 --> 00:07:43,120
while the ca certificate is the same

171
00:07:43,120 --> 00:07:46,319
the user's implicit certificate includes

172
00:07:46,319 --> 00:07:49,440
a so-called reconstruction value instead

173
00:07:49,440 --> 00:07:51,280
of the public key

174
00:07:51,280 --> 00:07:53,280
moreover it is very important to point

175
00:07:53,280 --> 00:07:56,080
out that there is no signature included

176
00:07:56,080 --> 00:07:59,039
in an implicit certificate

177
00:07:59,039 --> 00:08:01,599
an implicit certificate is smaller than

178
00:08:01,599 --> 00:08:04,800
a corresponding explicit certificate as

179
00:08:04,800 --> 00:08:07,680
long as the size of the signature plus

180
00:08:07,680 --> 00:08:10,400
the size of the public key is larger

181
00:08:10,400 --> 00:08:13,759
than the reconstruction value

182
00:08:13,759 --> 00:08:15,840
so how does verification work in this

183
00:08:15,840 --> 00:08:17,840
case

184
00:08:17,840 --> 00:08:20,720
again the idea of designer first points

185
00:08:20,720 --> 00:08:22,240
to the corresponding implicit

186
00:08:22,240 --> 00:08:25,039
certificate which then identifies the

187
00:08:25,039 --> 00:08:28,160
issuing ca certificate

188
00:08:28,160 --> 00:08:31,360
now using the ca's public key and the

189
00:08:31,360 --> 00:08:34,279
reconstruction value the verifier

190
00:08:34,279 --> 00:08:37,599
reconstructs the user's public key

191
00:08:37,599 --> 00:08:39,919
which is then used to verify the

192
00:08:39,919 --> 00:08:44,478
signature over the sent data

193
00:08:45,680 --> 00:08:47,920
the next question is of course how can

194
00:08:47,920 --> 00:08:50,080
such implicit certificates be

195
00:08:50,080 --> 00:08:53,080
constructed

196
00:08:54,560 --> 00:08:57,120
as far as i know the only efficient one

197
00:08:57,120 --> 00:08:59,360
that is also standardized is the

198
00:08:59,360 --> 00:09:02,080
elliptic curve cuban stone scheme

199
00:09:02,080 --> 00:09:04,880
let me walk you through it

200
00:09:04,880 --> 00:09:08,560
dc and qc are the long-term ecd's a keys

201
00:09:08,560 --> 00:09:10,399
of the ca

202
00:09:10,399 --> 00:09:12,720
the first step is that the user

203
00:09:12,720 --> 00:09:15,920
essentially chooses some randomness ku

204
00:09:15,920 --> 00:09:19,920
hides it and sends it over to the ca

205
00:09:19,920 --> 00:09:22,560
dca chooses its own randomness and

206
00:09:22,560 --> 00:09:25,279
computes the reconstruction value as the

207
00:09:25,279 --> 00:09:28,000
sum of both

208
00:09:28,480 --> 00:09:30,800
the last step is then to essentially

209
00:09:30,800 --> 00:09:33,600
sign the certificate

210
00:09:33,600 --> 00:09:36,320
the resulting long-term key of the user

211
00:09:36,320 --> 00:09:38,720
is essentially the sum of the user's

212
00:09:38,720 --> 00:09:40,240
randomness

213
00:09:40,240 --> 00:09:43,680
and the signature of the ca

214
00:09:43,680 --> 00:09:46,800
also the hash of the certificate is

215
00:09:46,800 --> 00:09:49,279
included to link the secret key to the

216
00:09:49,279 --> 00:09:51,839
certificate

217
00:09:52,399 --> 00:09:54,720
the public key can be computed by the

218
00:09:54,720 --> 00:09:57,680
user as d u times g

219
00:09:57,680 --> 00:09:58,959
like a

220
00:09:58,959 --> 00:10:02,880
normal ecdsa key pair

221
00:10:03,040 --> 00:10:05,360
every other party however can compute

222
00:10:05,360 --> 00:10:07,600
the public key as the hash of the

223
00:10:07,600 --> 00:10:08,800
certificate

224
00:10:08,800 --> 00:10:11,680
times the reconstruction value plus the

225
00:10:11,680 --> 00:10:15,959
ca's public key

226
00:10:18,160 --> 00:10:19,839
i won't give a formal security

227
00:10:19,839 --> 00:10:22,800
definition for this scheme but instead i

228
00:10:22,800 --> 00:10:24,640
will summarize a few construction

229
00:10:24,640 --> 00:10:26,480
requirements

230
00:10:26,480 --> 00:10:29,040
the first one as mentioned earlier is

231
00:10:29,040 --> 00:10:31,360
that the reconstruction value should be

232
00:10:31,360 --> 00:10:33,360
smaller than the signature plus the

233
00:10:33,360 --> 00:10:35,760
public key otherwise we wouldn't really

234
00:10:35,760 --> 00:10:37,760
save space

235
00:10:37,760 --> 00:10:38,959
secondly

236
00:10:38,959 --> 00:10:41,600
only the user should be able to compute

237
00:10:41,600 --> 00:10:43,680
its own secret key

238
00:10:43,680 --> 00:10:46,000
but every other party should be able to

239
00:10:46,000 --> 00:10:47,839
compute a public key from the

240
00:10:47,839 --> 00:10:50,800
reconstruction value ru and the ca's

241
00:10:50,800 --> 00:10:52,720
public key

242
00:10:52,720 --> 00:10:56,240
dca's secret of course needs to be kept

243
00:10:56,240 --> 00:10:59,360
secret at all times

244
00:10:59,360 --> 00:11:01,920
last but not least the user should not

245
00:11:01,920 --> 00:11:05,839
be able to generate its own certificate

246
00:11:05,839 --> 00:11:07,920
this means essentially that the ca

247
00:11:07,920 --> 00:11:10,560
signature is part of the user's secret

248
00:11:10,560 --> 00:11:12,800
key

249
00:11:13,440 --> 00:11:14,480
all right

250
00:11:14,480 --> 00:11:16,399
now we are ready to switch back to

251
00:11:16,399 --> 00:11:19,519
ladder space crypto

252
00:11:20,959 --> 00:11:23,200
let me start by explaining the two

253
00:11:23,200 --> 00:11:25,839
lettuce-based third-round candidates

254
00:11:25,839 --> 00:11:28,079
falcon and diliphium

255
00:11:28,079 --> 00:11:30,320
i will only explain simplified versions

256
00:11:30,320 --> 00:11:32,240
of the schemes as this is sufficient for

257
00:11:32,240 --> 00:11:35,519
the remainder of this talk

258
00:11:35,680 --> 00:11:38,399
the secret falcon keys are polynomials

259
00:11:38,399 --> 00:11:40,959
for very small coefficients

260
00:11:40,959 --> 00:11:43,040
after choosing some randomness and

261
00:11:43,040 --> 00:11:45,200
hashing it together with the message

262
00:11:45,200 --> 00:11:47,839
the core operation doing signing is the

263
00:11:47,839 --> 00:11:50,399
sampling function f1

264
00:11:50,399 --> 00:11:53,120
i will not define this function formally

265
00:11:53,120 --> 00:11:55,120
at this point it is only important to

266
00:11:55,120 --> 00:11:58,399
know that the output of ff1 are two

267
00:11:58,399 --> 00:12:01,600
polynomials with small coefficients

268
00:12:01,600 --> 00:12:05,120
such that set one plus set two times the

269
00:12:05,120 --> 00:12:06,800
public key h

270
00:12:06,800 --> 00:12:11,319
equals the hash value

271
00:12:11,440 --> 00:12:13,920
as h is constructed

272
00:12:13,920 --> 00:12:16,320
as g times the inverse of f the

273
00:12:16,320 --> 00:12:18,480
underlying hardness assumption used in

274
00:12:18,480 --> 00:12:21,200
falcon is the intro problem

275
00:12:21,200 --> 00:12:22,959
for the purpose of this talk it is

276
00:12:22,959 --> 00:12:26,160
important to point out that h

277
00:12:26,160 --> 00:12:29,920
and hence also h times set 2 are

278
00:12:29,920 --> 00:12:31,920
polynomials with large coefficients

279
00:12:31,920 --> 00:12:34,160
modulo q

280
00:12:34,160 --> 00:12:37,040
from this description some issues for

281
00:12:37,040 --> 00:12:38,399
the construction of implicit

282
00:12:38,399 --> 00:12:42,000
certificates can already be seen

283
00:12:42,000 --> 00:12:44,639
for example while both signature and

284
00:12:44,639 --> 00:12:47,120
secret key coefficients are small

285
00:12:47,120 --> 00:12:49,600
for implicit certificates the signature

286
00:12:49,600 --> 00:12:51,040
needs to be

287
00:12:51,040 --> 00:12:54,480
at least as small as the secret key

288
00:12:54,480 --> 00:12:57,360
as you would add the signature somehow

289
00:12:57,360 --> 00:12:59,200
to the secret key

290
00:12:59,200 --> 00:13:01,120
but this is unfortunately not the case

291
00:13:01,120 --> 00:13:02,959
for falcon

292
00:13:02,959 --> 00:13:06,160
moreover by construction of set one and

293
00:13:06,160 --> 00:13:07,360
set two

294
00:13:07,360 --> 00:13:10,160
it seems difficult to use the signature

295
00:13:10,160 --> 00:13:13,200
in the secret and public user key

296
00:13:13,200 --> 00:13:15,600
without either adding the signature as

297
00:13:15,600 --> 00:13:18,160
part of the reconstruction value which

298
00:13:18,160 --> 00:13:21,279
then increases the size of the implicit

299
00:13:21,279 --> 00:13:22,320
cert

300
00:13:22,320 --> 00:13:24,880
or without using large elements in the

301
00:13:24,880 --> 00:13:27,279
secret key

302
00:13:27,279 --> 00:13:29,519
furthermore by definition of the entro

303
00:13:29,519 --> 00:13:33,120
problem information about g or f leak

304
00:13:33,120 --> 00:13:36,079
the entire secret key

305
00:13:36,079 --> 00:13:38,880
therefore g and f always need to be

306
00:13:38,880 --> 00:13:41,680
hidden with some larger element which

307
00:13:41,680 --> 00:13:45,040
then again makes it difficult to use the

308
00:13:45,040 --> 00:13:49,519
ca secret without any any large elements

309
00:13:49,519 --> 00:13:52,399
in the signature

310
00:13:55,680 --> 00:13:57,600
we have a similar situation for the

311
00:13:57,600 --> 00:13:59,760
deletion signature scheme

312
00:13:59,760 --> 00:14:02,160
the secret key consists also of very

313
00:14:02,160 --> 00:14:04,800
small polynomials while the signature

314
00:14:04,800 --> 00:14:07,680
consists only of somewhat small

315
00:14:07,680 --> 00:14:10,639
polynomials more concretely by design

316
00:14:10,639 --> 00:14:12,480
the signature must be larger than the

317
00:14:12,480 --> 00:14:16,079
secret key as the random value y heights

318
00:14:16,079 --> 00:14:19,040
the secret key

319
00:14:19,120 --> 00:14:21,920
delivium in contrast to falcon dilufium

320
00:14:21,920 --> 00:14:23,680
is based on the learning with errors

321
00:14:23,680 --> 00:14:25,519
problem

322
00:14:25,519 --> 00:14:28,240
which means that also here information

323
00:14:28,240 --> 00:14:30,639
about part of the secret reveals the

324
00:14:30,639 --> 00:14:32,639
entire key

325
00:14:32,639 --> 00:14:35,680
similarly to the entry problem the small

326
00:14:35,680 --> 00:14:38,160
secret key values have to be hidden in

327
00:14:38,160 --> 00:14:41,519
some large public values

328
00:14:41,519 --> 00:14:43,199
so we can summarize that the main

329
00:14:43,199 --> 00:14:45,600
problem in both falcon and diliphium are

330
00:14:45,600 --> 00:14:48,160
the contradicting requirements on the

331
00:14:48,160 --> 00:14:53,360
size of the secret key and the signature

332
00:14:54,480 --> 00:14:56,800
unfortunately this is also the case with

333
00:14:56,800 --> 00:14:59,600
our most promising construction

334
00:14:59,600 --> 00:15:02,240
our core idea had been to combine the

335
00:15:02,240 --> 00:15:05,360
falcon signatures of the ca with the

336
00:15:05,360 --> 00:15:08,000
lithium keys of the user

337
00:15:08,000 --> 00:15:10,480
as the falcon signatures are smaller

338
00:15:10,480 --> 00:15:12,720
than the diliphium signatures and at the

339
00:15:12,720 --> 00:15:15,839
same time the delivium secret keys allow

340
00:15:15,839 --> 00:15:18,480
for larger coefficients than the falcon

341
00:15:18,480 --> 00:15:21,199
secret keys

342
00:15:21,279 --> 00:15:23,519
so let me walk you through this protocol

343
00:15:23,519 --> 00:15:24,959
again

344
00:15:24,959 --> 00:15:27,519
as mentioned before the ca's long-term

345
00:15:27,519 --> 00:15:30,160
keys are essentially falcon keys

346
00:15:30,160 --> 00:15:32,959
while the user's resulting keys will

347
00:15:32,959 --> 00:15:36,000
essentially be deletion keys

348
00:15:36,000 --> 00:15:38,959
let's ignore this value vc

349
00:15:38,959 --> 00:15:43,359
for now but i will come back to it later

350
00:15:44,720 --> 00:15:47,519
the user's randomness is essentially a

351
00:15:47,519 --> 00:15:49,839
learning of errors volume that is sent

352
00:15:49,839 --> 00:15:51,839
together with the seed to generate the

353
00:15:51,839 --> 00:15:53,839
value

354
00:15:53,839 --> 00:15:56,560
the ca's randomness following the falcon

355
00:15:56,560 --> 00:16:00,320
signing description is just a seed

356
00:16:00,320 --> 00:16:02,399
the reconstruction value

357
00:16:02,399 --> 00:16:05,360
consists of the two seeds rho and r and

358
00:16:05,360 --> 00:16:09,839
the lwe value t the next step is then to

359
00:16:09,839 --> 00:16:12,880
essentially compute a file consignature

360
00:16:12,880 --> 00:16:18,160
using the sampling function f1 again

361
00:16:19,279 --> 00:16:22,000
the resulting secret key uses part of

362
00:16:22,000 --> 00:16:25,279
the initial lwe sample but with a new

363
00:16:25,279 --> 00:16:26,959
error term eu

364
00:16:26,959 --> 00:16:29,680
otherwise so if we would reuse the same

365
00:16:29,680 --> 00:16:32,560
error term the awe problem would be easy

366
00:16:32,560 --> 00:16:34,560
to solve

367
00:16:34,560 --> 00:16:38,320
to the secret s1 we essentially add the

368
00:16:38,320 --> 00:16:41,440
falcon signature

369
00:16:41,600 --> 00:16:43,360
so the biggest change

370
00:16:43,360 --> 00:16:46,160
um comparing this protocol to the

371
00:16:46,160 --> 00:16:49,440
original falcon scheme is introducing

372
00:16:49,440 --> 00:16:52,399
this value vc which we introduced to

373
00:16:52,399 --> 00:16:54,959
decrease the value that is added to the

374
00:16:54,959 --> 00:16:58,079
user secret key

375
00:16:58,480 --> 00:17:01,279
so you can see that it's also

376
00:17:01,279 --> 00:17:04,720
used over here in the in the trapdoor

377
00:17:04,720 --> 00:17:06,480
function

378
00:17:06,480 --> 00:17:10,000
and so by constructing this fc prime

379
00:17:10,000 --> 00:17:13,039
the output of the trapdoor function

380
00:17:13,039 --> 00:17:15,760
leads to this equation

381
00:17:15,760 --> 00:17:19,359
instead of the original equation set

382
00:17:19,359 --> 00:17:24,000
plus set times h is equal to z

383
00:17:24,000 --> 00:17:26,400
and so by decreasing

384
00:17:26,400 --> 00:17:29,919
the size of the value set times vc

385
00:17:29,919 --> 00:17:30,720
or

386
00:17:30,720 --> 00:17:34,160
compared to set times h we also decrease

387
00:17:34,160 --> 00:17:37,520
the size of the value that is added to

388
00:17:37,520 --> 00:17:40,400
the secret key

389
00:17:42,720 --> 00:17:45,039
unfortunately it does not decrease the

390
00:17:45,039 --> 00:17:47,039
size enough and that's also the main

391
00:17:47,039 --> 00:17:49,120
issue with this construction

392
00:17:49,120 --> 00:17:51,840
but let me give a few more details

393
00:17:51,840 --> 00:17:54,160
the problem is that while the values are

394
00:17:54,160 --> 00:17:56,640
smaller they are not small enough in the

395
00:17:56,640 --> 00:17:59,120
sense that delivering parameters would

396
00:17:59,120 --> 00:18:01,440
probably be so large that there is no

397
00:18:01,440 --> 00:18:03,760
efficiency benefit in using this

398
00:18:03,760 --> 00:18:07,280
construction compared to using explicit

399
00:18:07,280 --> 00:18:09,520
certificates

400
00:18:09,520 --> 00:18:11,760
this problem actually gets even worse

401
00:18:11,760 --> 00:18:13,440
since there is a trade-off between the

402
00:18:13,440 --> 00:18:16,160
input and the output size of the f1

403
00:18:16,160 --> 00:18:17,919
sampling function

404
00:18:17,919 --> 00:18:20,080
namely the larger the coefficients of

405
00:18:20,080 --> 00:18:22,799
the input the larger the coefficients of

406
00:18:22,799 --> 00:18:24,240
the

407
00:18:24,240 --> 00:18:26,720
output and hence the larger the

408
00:18:26,720 --> 00:18:29,120
signature

409
00:18:29,120 --> 00:18:32,320
but maybe we can find a small vc

410
00:18:32,320 --> 00:18:35,360
such that also fc prime is small

411
00:18:35,360 --> 00:18:36,160
well

412
00:18:36,160 --> 00:18:38,240
unfortunately not

413
00:18:38,240 --> 00:18:40,559
at least not without decreasing the

414
00:18:40,559 --> 00:18:42,880
security of the entry problem

415
00:18:42,880 --> 00:18:46,559
as fc prime is given by this equation

416
00:18:46,559 --> 00:18:49,200
over here

417
00:18:49,760 --> 00:18:52,640
you can see that if fc prime

418
00:18:52,640 --> 00:18:55,440
and vc are both small

419
00:18:55,440 --> 00:18:57,760
that means that fc prime would be a

420
00:18:57,760 --> 00:19:00,320
small multiple of fc

421
00:19:00,320 --> 00:19:04,720
and hence it would leak the secret key

422
00:19:07,919 --> 00:19:09,840
i would like to conclude my talk on a

423
00:19:09,840 --> 00:19:12,080
more positive note by explaining how

424
00:19:12,080 --> 00:19:14,559
this problem the problem of constructing

425
00:19:14,559 --> 00:19:17,520
implicit certificates from lattices

426
00:19:17,520 --> 00:19:20,240
is related to other constructions and

427
00:19:20,240 --> 00:19:22,559
hence might explore ideas how to solve

428
00:19:22,559 --> 00:19:25,559
it

429
00:19:26,880 --> 00:19:28,960
cryptographic primitives which face

430
00:19:28,960 --> 00:19:31,520
similar constraints are for example

431
00:19:31,520 --> 00:19:33,919
certificate less signatures where the

432
00:19:33,919 --> 00:19:37,039
user's secret key is constructed from a

433
00:19:37,039 --> 00:19:40,480
partial master secret key and a secret

434
00:19:40,480 --> 00:19:42,960
value chosen by the user

435
00:19:42,960 --> 00:19:45,600
another crypto primitive are certificate

436
00:19:45,600 --> 00:19:47,360
based signatures

437
00:19:47,360 --> 00:19:50,400
where signing a message requires a valid

438
00:19:50,400 --> 00:19:54,400
user certificate signed by a ca

439
00:19:54,400 --> 00:19:58,000
moreover also identity based signatures

440
00:19:58,000 --> 00:20:01,440
might use the same idea

441
00:20:01,440 --> 00:20:04,000
current proposals for these

442
00:20:04,000 --> 00:20:06,799
primitives from lettuces

443
00:20:06,799 --> 00:20:09,600
range greatly in the reciting signature

444
00:20:09,600 --> 00:20:10,559
size

445
00:20:10,559 --> 00:20:13,039
but in summary they are still all too

446
00:20:13,039 --> 00:20:15,200
large to be used in size restricted

447
00:20:15,200 --> 00:20:18,159
applications such as vehicle to vehicle

448
00:20:18,159 --> 00:20:21,159
communication

449
00:20:22,799 --> 00:20:24,960
that means one potential future research

450
00:20:24,960 --> 00:20:27,679
direction is to use modern and more

451
00:20:27,679 --> 00:20:30,159
efficient instantiations of other

452
00:20:30,159 --> 00:20:31,600
constructions

453
00:20:31,600 --> 00:20:34,480
apply them to implicit certificates and

454
00:20:34,480 --> 00:20:36,240
see how much this improves the

455
00:20:36,240 --> 00:20:38,159
efficiency

456
00:20:38,159 --> 00:20:40,400
another but potentially much more

457
00:20:40,400 --> 00:20:42,559
difficult approach is to improve the

458
00:20:42,559 --> 00:20:45,039
falcon sampler even further

459
00:20:45,039 --> 00:20:48,159
such a result has potential impact to

460
00:20:48,159 --> 00:20:50,640
constructions well beyond implicit

461
00:20:50,640 --> 00:20:52,480
certificates

462
00:20:52,480 --> 00:20:54,640
moreover a next step would be to

463
00:20:54,640 --> 00:20:56,400
consider constructing implicit

464
00:20:56,400 --> 00:20:57,600
certificates

465
00:20:57,600 --> 00:20:59,840
over mathematical structures other than

466
00:20:59,840 --> 00:21:02,840
lattices

467
00:21:04,080 --> 00:21:06,720
to summarize

468
00:21:06,720 --> 00:21:09,280
constructing implicit certificates from

469
00:21:09,280 --> 00:21:12,159
lattices seems inherently difficult due

470
00:21:12,159 --> 00:21:15,440
to the contradicting requirements

471
00:21:15,440 --> 00:21:16,400
moreover

472
00:21:16,400 --> 00:21:18,559
even if constructions and parameter

473
00:21:18,559 --> 00:21:21,520
choices work out a major breakthrough is

474
00:21:21,520 --> 00:21:23,440
needed to make them efficient enough to

475
00:21:23,440 --> 00:21:25,919
be used in applications that are size

476
00:21:25,919 --> 00:21:28,480
constrained

477
00:21:28,480 --> 00:21:30,960
for our starting example of v2v

478
00:21:30,960 --> 00:21:32,240
communication

479
00:21:32,240 --> 00:21:34,559
in a recent analysis we studied the use

480
00:21:34,559 --> 00:21:38,320
of explicit falcon or explicit implicit

481
00:21:38,320 --> 00:21:42,320
falcon ecdsa hybrid certificates and v2v

482
00:21:42,320 --> 00:21:44,159
communication

483
00:21:44,159 --> 00:21:46,240
preliminary results were presented at

484
00:21:46,240 --> 00:21:48,559
nist standardization conference and a

485
00:21:48,559 --> 00:21:52,320
full paper will be published soon

486
00:21:52,400 --> 00:21:55,280
i would like to thank john skank for

487
00:21:55,280 --> 00:21:57,520
very enjoyable and fulfilled discussions

488
00:21:57,520 --> 00:21:59,360
in particular about the hardness of the

489
00:21:59,360 --> 00:22:00,720
advocate problem

490
00:22:00,720 --> 00:22:02,960
and moreover i would like to thank you

491
00:22:02,960 --> 00:22:05,600
for listening

492
00:22:10,000 --> 00:22:12,400
all right thank you for that talk

493
00:22:12,400 --> 00:22:15,840
excellent job um do we have any

494
00:22:15,840 --> 00:22:17,679
questions

495
00:22:17,679 --> 00:22:19,280
feel free to put them in the chat or

496
00:22:19,280 --> 00:22:22,320
just chime in

497
00:22:25,440 --> 00:22:27,200
uh kevin yes

498
00:22:27,200 --> 00:22:29,039
what is the real reason for the implicit

499
00:22:29,039 --> 00:22:32,080
signatures why are they used

500
00:22:32,080 --> 00:22:34,480
so they're actually used in the

501
00:22:34,480 --> 00:22:36,799
vehicle um

502
00:22:36,799 --> 00:22:39,200
vehicle vehicle to communication so this

503
00:22:39,200 --> 00:22:41,200
ieee 16

504
00:22:41,200 --> 00:22:43,200
online what's the motivation for using

505
00:22:43,200 --> 00:22:45,120
them in the first place i see because

506
00:22:45,120 --> 00:22:48,080
they lead to smaller certificates

507
00:22:48,080 --> 00:22:50,640
so they're about half the size of

508
00:22:50,640 --> 00:22:53,520
the explicit ecds a certificates and

509
00:22:53,520 --> 00:22:54,400
since

510
00:22:54,400 --> 00:22:56,159
these communications are so size

511
00:22:56,159 --> 00:22:58,960
constrained um really every every bite

512
00:22:58,960 --> 00:23:01,120
counts

513
00:23:01,120 --> 00:23:03,120
they're constrained by packet size or

514
00:23:03,120 --> 00:23:05,039
because i think cars have a lot of power

515
00:23:05,039 --> 00:23:06,880
in them and no it's just because it

516
00:23:06,880 --> 00:23:07,600
would

517
00:23:07,600 --> 00:23:10,720
to compute them or broadcast them

518
00:23:10,720 --> 00:23:12,240
but it's really yeah as you said it's

519
00:23:12,240 --> 00:23:14,960
the packet size so um and the bigger the

520
00:23:14,960 --> 00:23:17,039
packets the higher the

521
00:23:17,039 --> 00:23:19,120
likelihood that um packets are getting

522
00:23:19,120 --> 00:23:22,559
lost and so yeah i think so um

523
00:23:22,559 --> 00:23:23,360
the

524
00:23:23,360 --> 00:23:26,880
package size is 2 300 bytes is the

525
00:23:26,880 --> 00:23:29,440
absolute maximum size but the current

526
00:23:29,440 --> 00:23:32,320
ecd's eight packets if i'm uh remember

527
00:23:32,320 --> 00:23:34,880
this correctly range between 200 and 500

528
00:23:34,880 --> 00:23:37,360
bytes and so if we add post quantum to

529
00:23:37,360 --> 00:23:39,919
that or yeah sorry if we have explicit

530
00:23:39,919 --> 00:23:41,520
certificates then these sizes are

531
00:23:41,520 --> 00:23:44,320
getting increased

532
00:23:45,279 --> 00:23:48,080
and then i mean maybe not like if i look

533
00:23:48,080 --> 00:23:49,679
outside my window and there's a very

534
00:23:49,679 --> 00:23:52,080
small intersection so packets are

535
00:23:52,080 --> 00:23:53,679
probably not getting lost but if you

536
00:23:53,679 --> 00:23:57,520
think of very high density um situations

537
00:23:57,520 --> 00:24:00,080
like rush hour highway or like um

538
00:24:00,080 --> 00:24:02,720
intersection new york then it's just so

539
00:24:02,720 --> 00:24:06,240
many um packets or so many messages need

540
00:24:06,240 --> 00:24:08,799
to be signed and broadcasted then that

541
00:24:08,799 --> 00:24:11,679
then um package loss is yeah it's just

542
00:24:11,679 --> 00:24:15,200
it gets a real issue

543
00:24:17,200 --> 00:24:19,039
have you looked at other aspects of the

544
00:24:19,039 --> 00:24:21,279
wave protocol

545
00:24:21,279 --> 00:24:24,640
the the ieee 1609.2

546
00:24:24,640 --> 00:24:25,440
um

547
00:24:25,440 --> 00:24:26,320
so

548
00:24:26,320 --> 00:24:28,559
i'm happy to talk about this other paper

549
00:24:28,559 --> 00:24:30,159
of course but

550
00:24:30,159 --> 00:24:33,279
so in this paper we look at different um

551
00:24:33,279 --> 00:24:35,360
ways to instead

552
00:24:35,360 --> 00:24:36,960
of different post quantum classical

553
00:24:36,960 --> 00:24:41,919
hybrids uh in this ieee 1609 um

554
00:24:41,919 --> 00:24:44,240
protocol and we are also planning on

555
00:24:44,240 --> 00:24:47,440
looking so they don't in addition to the

556
00:24:47,440 --> 00:24:48,960
authentication they also look at

557
00:24:48,960 --> 00:24:50,400
encryption

558
00:24:50,400 --> 00:24:52,960
um and we are planning as a future work

559
00:24:52,960 --> 00:24:55,120
to look also at encryption but haven't

560
00:24:55,120 --> 00:24:57,120
done so but um other than that we

561
00:24:57,120 --> 00:25:01,719
haven't looked at any other aspects

562
00:25:01,840 --> 00:25:04,158
okay

563
00:25:06,159 --> 00:25:09,520
any other questions

564
00:25:10,880 --> 00:25:12,080
all right let's thank all of our

565
00:25:12,080 --> 00:25:14,559
speakers one last time and thank you all

566
00:25:14,559 --> 00:25:17,200
for attending see fail

567
00:25:17,200 --> 00:25:18,240
um

568
00:25:18,240 --> 00:25:20,240
i'm going to play us out with this

569
00:25:20,240 --> 00:25:22,559
year's music video so if you haven't

570
00:25:22,559 --> 00:25:24,559
already checked that out feel free to

571
00:25:24,559 --> 00:25:26,960
stick around

