1
00:00:00,960 --> 00:00:03,199
hi everyone welcome to my

2
00:00:03,199 --> 00:00:05,839
uh extended version uh of my talk about

3
00:00:05,839 --> 00:00:06,960
baby sharks

4
00:00:06,960 --> 00:00:08,480
this talk is about small subgroup

5
00:00:08,480 --> 00:00:10,480
attacks which is

6
00:00:10,480 --> 00:00:13,840
uh not a new type of attack

7
00:00:13,840 --> 00:00:17,680
it actually was discussed and found

8
00:00:17,680 --> 00:00:20,880
uh many years ago and uh

9
00:00:20,880 --> 00:00:24,000
i think here it just manifests itself

10
00:00:24,000 --> 00:00:25,920
in a very interesting concept a context

11
00:00:25,920 --> 00:00:27,359
of

12
00:00:27,359 --> 00:00:30,720
systems which run multipath computation

13
00:00:30,720 --> 00:00:33,120
and specifically threshold cryptography

14
00:00:33,120 --> 00:00:35,040
so before we dive in let me tell you a

15
00:00:35,040 --> 00:00:36,320
bit about myself

16
00:00:36,320 --> 00:00:39,520
my name is omar and i'm doing research

17
00:00:39,520 --> 00:00:42,879
for xengo zengo is a company

18
00:00:42,879 --> 00:00:44,800
doing key management in the blockchain

19
00:00:44,800 --> 00:00:47,120
space i've co-founded a few years ago

20
00:00:47,120 --> 00:00:49,520
my main focus is on applied cryptography

21
00:00:49,520 --> 00:00:50,239
and uh

22
00:00:50,239 --> 00:00:52,719
specifically threshold cryptography you

23
00:00:52,719 --> 00:00:53,520
can uh

24
00:00:53,520 --> 00:00:55,680
check my work it's all open source over

25
00:00:55,680 --> 00:00:57,680
on my webpage

26
00:00:57,680 --> 00:01:00,719
i'm also a board member in npc alliance

27
00:01:00,719 --> 00:01:03,600
and pc alliance is a consortium of

28
00:01:03,600 --> 00:01:05,360
companies

29
00:01:05,360 --> 00:01:08,640
with the goal of accelerating

30
00:01:08,640 --> 00:01:12,720
adoption for npc technology

31
00:01:12,720 --> 00:01:16,240
in in in industries so

32
00:01:16,240 --> 00:01:18,640
i already mentioned mpc a bunch of times

33
00:01:18,640 --> 00:01:20,240
by now and i want to give you

34
00:01:20,240 --> 00:01:23,920
um some idea to what i mean by that

35
00:01:23,920 --> 00:01:26,479
so this is kind of an abstract way to

36
00:01:26,479 --> 00:01:27,920
define mpc

37
00:01:27,920 --> 00:01:29,600
so as you can see we have minions and

38
00:01:29,600 --> 00:01:32,159
each of them holds some input

39
00:01:32,159 --> 00:01:34,640
what we want to have is uh so they would

40
00:01:34,640 --> 00:01:36,479
like to learn some function that is a

41
00:01:36,479 --> 00:01:37,759
function this function f that is a

42
00:01:37,759 --> 00:01:40,880
function over the inputs however

43
00:01:40,880 --> 00:01:42,399
the tough thing is the hard thing is

44
00:01:42,399 --> 00:01:44,720
that we want to keep the inputs private

45
00:01:44,720 --> 00:01:46,640
so they would want to find a way that

46
00:01:46,640 --> 00:01:47,920
they can

47
00:01:47,920 --> 00:01:51,040
somehow exchange information but

48
00:01:51,040 --> 00:01:53,600
would not reveal their secret input so

49
00:01:53,600 --> 00:01:54,799
as an example you can

50
00:01:54,799 --> 00:01:57,439
think about this function f as like who

51
00:01:57,439 --> 00:01:59,200
gets the who got who is

52
00:01:59,200 --> 00:02:01,360
uh who makes the most right in terms of

53
00:02:01,360 --> 00:02:03,680
salary and each one of the secret inputs

54
00:02:03,680 --> 00:02:05,520
is the salary of this minion and they

55
00:02:05,520 --> 00:02:07,280
want to learn the answer but they don't

56
00:02:07,280 --> 00:02:08,959
want to actually

57
00:02:08,959 --> 00:02:12,239
tell the precise number to to to their

58
00:02:12,239 --> 00:02:12,560
uh

59
00:02:12,560 --> 00:02:14,800
other to the other minion side because

60
00:02:14,800 --> 00:02:16,239
what we assume is that

61
00:02:16,239 --> 00:02:18,239
minions cannot trust each other okay so

62
00:02:18,239 --> 00:02:20,480
we have a bunch of parties that do not

63
00:02:20,480 --> 00:02:21,680
trust each other still they need to

64
00:02:21,680 --> 00:02:23,200
compute some function

65
00:02:23,200 --> 00:02:26,879
but maintain some input privacy right

66
00:02:26,879 --> 00:02:29,680
so am i talking about npc anyhow and the

67
00:02:29,680 --> 00:02:30,800
reason is that

68
00:02:30,800 --> 00:02:34,800
npc found some killer applications

69
00:02:34,800 --> 00:02:36,560
nowadays one of them is definitely

70
00:02:36,560 --> 00:02:38,080
cryptocurrency wallets

71
00:02:38,080 --> 00:02:40,319
this is uh due to the use uh in some

72
00:02:40,319 --> 00:02:41,280
ways

73
00:02:41,280 --> 00:02:43,519
with a dkg distributed key generation

74
00:02:43,519 --> 00:02:44,560
and also uh

75
00:02:44,560 --> 00:02:47,120
threshold signing uh and then also

76
00:02:47,120 --> 00:02:48,480
there's privacy presenting machine

77
00:02:48,480 --> 00:02:50,640
learning that i can mention here

78
00:02:50,640 --> 00:02:53,760
however uh i would like to focus in this

79
00:02:53,760 --> 00:02:54,720
talk on

80
00:02:54,720 --> 00:02:56,160
what i call a distributed computing

81
00:02:56,160 --> 00:02:58,080
which is a very broad

82
00:02:58,080 --> 00:03:00,560
uh category and maybe cryptocurrency

83
00:03:00,560 --> 00:03:02,640
wallets is like one application

84
00:03:02,640 --> 00:03:04,800
under this category but there are of

85
00:03:04,800 --> 00:03:06,640
course other uh protocols and

86
00:03:06,640 --> 00:03:08,319
applications like you can

87
00:03:08,319 --> 00:03:10,720
think of i mean conservo's protocol is

88
00:03:10,720 --> 00:03:11,840
probably the

89
00:03:11,840 --> 00:03:14,080
uh the most famous but we'll uh discuss

90
00:03:14,080 --> 00:03:16,640
describe some other uh applications

91
00:03:16,640 --> 00:03:19,680
uh towards the end of this talk

92
00:03:19,680 --> 00:03:22,720
so because we're going to attack mpc

93
00:03:22,720 --> 00:03:24,720
systems i think it is important to

94
00:03:24,720 --> 00:03:27,120
uh learn a bit about the implementation

95
00:03:27,120 --> 00:03:29,200
stack of mpc so this is

96
00:03:29,200 --> 00:03:31,840
how i analyze it at the bottom we have

97
00:03:31,840 --> 00:03:32,959
uh

98
00:03:32,959 --> 00:03:35,599
the math okay so it's usually discrete

99
00:03:35,599 --> 00:03:36,239
math

100
00:03:36,239 --> 00:03:39,519
and uh here i'm referring to the fields

101
00:03:39,519 --> 00:03:40,239
the groups

102
00:03:40,239 --> 00:03:42,159
and and the hardness assumptions that

103
00:03:42,159 --> 00:03:43,519
that we can

104
00:03:43,519 --> 00:03:46,799
uh make on them so as

105
00:03:46,799 --> 00:03:48,799
like our building blocks to build

106
00:03:48,799 --> 00:03:50,400
cryptographic primitives

107
00:03:50,400 --> 00:03:52,239
so in our talk we're going to focus on

108
00:03:52,239 --> 00:03:54,159
elliptic curves uh

109
00:03:54,159 --> 00:03:57,439
i mean this is uh would be our focus and

110
00:03:57,439 --> 00:04:00,400
and we will need to go all the way

111
00:04:00,400 --> 00:04:00,799
through

112
00:04:00,799 --> 00:04:04,000
uh to find the tax there but still

113
00:04:04,000 --> 00:04:06,000
going up uh in the leather we have

114
00:04:06,000 --> 00:04:07,439
cryptographic primitives that can be

115
00:04:07,439 --> 00:04:08,080
built on

116
00:04:08,080 --> 00:04:11,360
using this math so there you can find

117
00:04:11,360 --> 00:04:14,239
uh i mean ones that are well known like

118
00:04:14,239 --> 00:04:16,079
i don't know rsa encryption scheme and

119
00:04:16,079 --> 00:04:18,560
ecdsa so elliptical digital signature

120
00:04:18,560 --> 00:04:19,680
algorithm

121
00:04:19,680 --> 00:04:21,759
uh and there are maybe some other more

122
00:04:21,759 --> 00:04:23,919
exotic cryptographic primitives

123
00:04:23,919 --> 00:04:26,160
so using cryptographic primitives as

124
00:04:26,160 --> 00:04:27,600
building blocks we now can

125
00:04:27,600 --> 00:04:29,360
build some logic and what i mean by

126
00:04:29,360 --> 00:04:31,120
logic is like a protocol of a sub

127
00:04:31,120 --> 00:04:32,479
protocol where

128
00:04:32,479 --> 00:04:35,520
some party would get an input uh would

129
00:04:35,520 --> 00:04:37,680
then do some uh processing to this input

130
00:04:37,680 --> 00:04:39,440
using the cryptographic primitives so i

131
00:04:39,440 --> 00:04:40,560
don't know may

132
00:04:40,560 --> 00:04:42,400
will make a commitment maybe a zero

133
00:04:42,400 --> 00:04:44,400
knowledge proof and eventually

134
00:04:44,400 --> 00:04:47,600
uh would send i would share some output

135
00:04:47,600 --> 00:04:49,440
with the other parties

136
00:04:49,440 --> 00:04:51,520
and obviously to facilitate all this we

137
00:04:51,520 --> 00:04:53,360
need a network so in mpc we usually

138
00:04:53,360 --> 00:04:55,840
assume synchronous network and therefore

139
00:04:55,840 --> 00:04:56,240
uh

140
00:04:56,240 --> 00:04:59,360
propagation uh is is done in rounds

141
00:04:59,360 --> 00:05:01,759
so each round would be for me like a

142
00:05:01,759 --> 00:05:03,199
logic here okay so

143
00:05:03,199 --> 00:05:05,840
an input processing and output now

144
00:05:05,840 --> 00:05:06,720
looking

145
00:05:06,720 --> 00:05:09,440
at it from an attacker point of view um

146
00:05:09,440 --> 00:05:11,280
i want to

147
00:05:11,280 --> 00:05:15,120
separate separate the stack into two

148
00:05:15,120 --> 00:05:16,880
one is what i call the attack surface so

149
00:05:16,880 --> 00:05:18,880
i'm going to use the network here

150
00:05:18,880 --> 00:05:22,080
to for

151
00:05:22,080 --> 00:05:23,440
the attack surface so you can see on the

152
00:05:23,440 --> 00:05:26,720
right for example thanos is the the

153
00:05:26,720 --> 00:05:30,800
nice guy uh with purple arms

154
00:05:30,800 --> 00:05:33,600
he can send in one of the rounds some

155
00:05:33,600 --> 00:05:36,160
malicious

156
00:05:36,400 --> 00:05:39,199
information packet to hear captain

157
00:05:39,199 --> 00:05:40,000
america

158
00:05:40,000 --> 00:05:41,919
and then at the later on captain america

159
00:05:41,919 --> 00:05:43,440
after some processing would

160
00:05:43,440 --> 00:05:46,560
uh share uh would send back some output

161
00:05:46,560 --> 00:05:47,199
to

162
00:05:47,199 --> 00:05:49,759
uh tutanos and also to the other parties

163
00:05:49,759 --> 00:05:51,600
so this is where corruption can

164
00:05:51,600 --> 00:05:54,720
can be how corruption can be uh can be

165
00:05:54,720 --> 00:05:56,000
made and

166
00:05:56,000 --> 00:05:58,080
the uh to exploit it we're actually

167
00:05:58,080 --> 00:05:59,840
going to use all the complexities

168
00:05:59,840 --> 00:06:02,880
of the lower layers of

169
00:06:02,880 --> 00:06:05,120
the of the implementation stack right

170
00:06:05,120 --> 00:06:06,000
and again in this

171
00:06:06,000 --> 00:06:09,440
talk we're going to go all the way down

172
00:06:11,919 --> 00:06:15,600
so uh i mean last year at blackett

173
00:06:15,600 --> 00:06:17,840
there was a talk uh that i gave gently

174
00:06:17,840 --> 00:06:19,440
with jp and it was

175
00:06:19,440 --> 00:06:23,039
uh targeting uh

176
00:06:23,039 --> 00:06:24,960
cryptocurrency wallets so i just wanted

177
00:06:24,960 --> 00:06:26,080
to point it

178
00:06:26,080 --> 00:06:28,720
to to put it here on the same framework

179
00:06:28,720 --> 00:06:29,120
and

180
00:06:29,120 --> 00:06:31,520
uh show that back there back then we

181
00:06:31,520 --> 00:06:33,280
need didn't need to go the way to them

182
00:06:33,280 --> 00:06:35,600
to find attacks here we're going to use

183
00:06:35,600 --> 00:06:36,400
the same

184
00:06:36,400 --> 00:06:39,199
stack but but i need to go a bit more

185
00:06:39,199 --> 00:06:39,759
into the

186
00:06:39,759 --> 00:06:43,280
foundations right so

187
00:06:43,280 --> 00:06:45,360
uh what we're going to discuss next is

188
00:06:45,360 --> 00:06:46,479
for us i'm going to

189
00:06:46,479 --> 00:06:48,560
i'm going to discuss elliptic curves

190
00:06:48,560 --> 00:06:50,400
which is the discrete method

191
00:06:50,400 --> 00:06:52,560
that we will need to work with and

192
00:06:52,560 --> 00:06:53,680
specific type of

193
00:06:53,680 --> 00:06:57,440
uh of group so we'll talk only on what

194
00:06:57,440 --> 00:06:59,199
we need to take from this

195
00:06:59,199 --> 00:07:01,840
then i will talk about distributed key

196
00:07:01,840 --> 00:07:04,479
generation so this is the protocol

197
00:07:04,479 --> 00:07:09,440
that is part of this class of

198
00:07:10,560 --> 00:07:14,319
distributed computation

199
00:07:14,319 --> 00:07:16,160
and this is what we're going to try to

200
00:07:16,160 --> 00:07:18,560
attack and eventually bypass

201
00:07:18,560 --> 00:07:20,479
and in particular i'm going to focus on

202
00:07:20,479 --> 00:07:22,240
verifiable secret sharing and proof of

203
00:07:22,240 --> 00:07:24,160
knowledge which are two

204
00:07:24,160 --> 00:07:26,720
sub-protocols or cryptographic

205
00:07:26,720 --> 00:07:27,520
primitives

206
00:07:27,520 --> 00:07:30,000
in in my terminology that we're going to

207
00:07:30,000 --> 00:07:31,360
try to

208
00:07:31,360 --> 00:07:35,199
again break once we

209
00:07:35,199 --> 00:07:37,360
have a good understanding on how we can

210
00:07:37,360 --> 00:07:39,360
use small subgroup attacks to

211
00:07:39,360 --> 00:07:41,759
bypass distributed key generation we can

212
00:07:41,759 --> 00:07:43,360
discuss some applications

213
00:07:43,360 --> 00:07:47,120
of what it what it actually means great

214
00:07:47,120 --> 00:07:50,319
so first as a background i want to start

215
00:07:50,319 --> 00:07:51,919
with this sentence let g be a group of

216
00:07:51,919 --> 00:07:53,759
prime order q and generate og

217
00:07:53,759 --> 00:07:57,440
so this is a probably a familiar

218
00:07:57,440 --> 00:07:58,240
sentence to

219
00:07:58,240 --> 00:08:00,800
uh to most of you and the reason is that

220
00:08:00,800 --> 00:08:01,759
this defines

221
00:08:01,759 --> 00:08:03,520
requirements for the main group in many

222
00:08:03,520 --> 00:08:05,039
cryptographic systems so

223
00:08:05,039 --> 00:08:06,720
when we want to build our cryptographic

224
00:08:06,720 --> 00:08:08,800
primitives this is what we need

225
00:08:08,800 --> 00:08:12,000
right um and

226
00:08:12,000 --> 00:08:14,160
and uh i'm going to use it by the way

227
00:08:14,160 --> 00:08:16,000
just you know this obstruction of

228
00:08:16,000 --> 00:08:18,240
i'm going to take the generator and and

229
00:08:18,240 --> 00:08:19,199
use it

230
00:08:19,199 --> 00:08:22,000
uh to describe uh points and and

231
00:08:22,000 --> 00:08:23,440
obviously i'm also need to define the

232
00:08:23,440 --> 00:08:24,960
point and infinity which would just

233
00:08:24,960 --> 00:08:28,000
be uh for me a zero

234
00:08:28,000 --> 00:08:29,280
like when you take the generator or

235
00:08:29,280 --> 00:08:31,360
multiply it by the order

236
00:08:31,360 --> 00:08:34,399
of the of the group so going back to

237
00:08:34,399 --> 00:08:35,279
this sentence

238
00:08:35,279 --> 00:08:37,200
uh what i want to focus on first is this

239
00:08:37,200 --> 00:08:39,039
word prime because in many

240
00:08:39,039 --> 00:08:40,958
practical implementations this is not

241
00:08:40,958 --> 00:08:43,360
something that we we always get

242
00:08:43,360 --> 00:08:44,959
we do get something which is a bit

243
00:08:44,959 --> 00:08:46,640
different so two examples of

244
00:08:46,640 --> 00:08:49,360
why this is the case uh for two curves

245
00:08:49,360 --> 00:08:49,839
that we

246
00:08:49,839 --> 00:08:53,040
analyzed in this work one is kf2509 and

247
00:08:53,040 --> 00:08:54,000
uh the reason

248
00:08:54,000 --> 00:08:57,120
that there is mainly

249
00:08:57,120 --> 00:09:00,800
efficiency so it allows us to get

250
00:09:00,800 --> 00:09:03,519
faster computation and the other the

251
00:09:03,519 --> 00:09:05,360
other type of curve bls 12

252
00:09:05,360 --> 00:09:09,279
381 gives you the ability to actually

253
00:09:09,279 --> 00:09:12,399
do uh more cryptography using

254
00:09:12,399 --> 00:09:14,640
uh the same primitive so these are kind

255
00:09:14,640 --> 00:09:16,880
of two motivations uh so what what we

256
00:09:16,880 --> 00:09:18,240
actually do get

257
00:09:18,240 --> 00:09:20,640
in this type of curves is something we

258
00:09:20,640 --> 00:09:22,480
call curves with cofacto

259
00:09:22,480 --> 00:09:24,560
and for our purposes let's define a

260
00:09:24,560 --> 00:09:26,320
point where we have

261
00:09:26,320 --> 00:09:28,880
uh actually two sub groups as part of

262
00:09:28,880 --> 00:09:30,720
the point so we have

263
00:09:30,720 --> 00:09:33,279
a group that can be defined using this

264
00:09:33,279 --> 00:09:34,640
generator g

265
00:09:34,640 --> 00:09:37,040
and it has a prime order so this is one

266
00:09:37,040 --> 00:09:37,760
subgroup

267
00:09:37,760 --> 00:09:39,360
and the other one would have another

268
00:09:39,360 --> 00:09:42,240
generic ot and it would be a small group

269
00:09:42,240 --> 00:09:45,279
uh usually at least in our case so the

270
00:09:45,279 --> 00:09:46,320
small order group would

271
00:09:46,320 --> 00:09:49,839
be of size of older age

272
00:09:49,839 --> 00:09:51,760
right so this is what we call co-factor

273
00:09:51,760 --> 00:09:53,680
and this is how we define a point

274
00:09:53,680 --> 00:09:56,240
so i'm just to to make it clear so i'm

275
00:09:56,240 --> 00:09:56,959
gonna uh

276
00:09:56,959 --> 00:10:00,240
um uh so i'm saying that

277
00:10:00,240 --> 00:10:02,399
what i'm saying is that the order of uh

278
00:10:02,399 --> 00:10:04,320
a point that uh

279
00:10:04,320 --> 00:10:06,160
of the points that we can define using

280
00:10:06,160 --> 00:10:08,000
this uh

281
00:10:08,000 --> 00:10:09,360
writing is going to be the

282
00:10:09,360 --> 00:10:11,279
multiplication of the prime order

283
00:10:11,279 --> 00:10:14,880
uh and the small order okay so you can

284
00:10:14,880 --> 00:10:17,360
uh you can uh check it out by with this

285
00:10:17,360 --> 00:10:18,160
example

286
00:10:18,160 --> 00:10:20,880
to kind of you know train on on my

287
00:10:20,880 --> 00:10:21,920
terminology

288
00:10:21,920 --> 00:10:24,399
so just if you take q the order of the

289
00:10:24,399 --> 00:10:25,920
prime model group to be three and then

290
00:10:25,920 --> 00:10:27,600
the order of the small

291
00:10:27,600 --> 00:10:30,079
uh subgroup to b2 you can see that you

292
00:10:30,079 --> 00:10:31,040
can define

293
00:10:31,040 --> 00:10:33,200
six points which is three times two yeah

294
00:10:33,200 --> 00:10:35,440
so it makes sense

295
00:10:35,440 --> 00:10:36,880
right so before describing the attack

296
00:10:36,880 --> 00:10:39,279
let's talk about uh how to protect or

297
00:10:39,279 --> 00:10:41,680
how to sanitize in this case so our goal

298
00:10:41,680 --> 00:10:43,040
in sanitization here is

299
00:10:43,040 --> 00:10:45,440
eventually we do want to work with

300
00:10:45,440 --> 00:10:46,160
cryptography

301
00:10:46,160 --> 00:10:48,240
that is done on the prime order sub loop

302
00:10:48,240 --> 00:10:50,320
so we need to take this general

303
00:10:50,320 --> 00:10:53,360
uh structure of of a point and somehow

304
00:10:53,360 --> 00:10:56,720
uh make it such that it will just be

305
00:10:56,720 --> 00:10:58,800
from sj plus kt is just sg so we need to

306
00:10:58,800 --> 00:11:00,079
eliminate somehow

307
00:11:00,079 --> 00:11:03,360
the sub or the the small order subgroup

308
00:11:03,360 --> 00:11:04,560
element

309
00:11:04,560 --> 00:11:07,279
so two ways to do it one is uh

310
00:11:07,279 --> 00:11:08,160
multiplying

311
00:11:08,160 --> 00:11:11,040
by the cofactor or the order of the

312
00:11:11,040 --> 00:11:11,519
small

313
00:11:11,519 --> 00:11:13,279
smaller subgroup here i'm also

314
00:11:13,279 --> 00:11:14,959
multiplying by the inverse

315
00:11:14,959 --> 00:11:18,880
just to get back the same uh element

316
00:11:18,880 --> 00:11:22,320
uh back to get the same s

317
00:11:22,320 --> 00:11:25,600
and the other um i can follow the

318
00:11:25,600 --> 00:11:27,279
computation and the other way

319
00:11:27,279 --> 00:11:29,360
uh that i propose here is just you know

320
00:11:29,360 --> 00:11:30,560
to multiply by the

321
00:11:30,560 --> 00:11:32,800
prime or the sub by the plan the prime

322
00:11:32,800 --> 00:11:34,000
order q

323
00:11:34,000 --> 00:11:35,440
and then we should get a point and

324
00:11:35,440 --> 00:11:38,320
infinity right because uh

325
00:11:38,320 --> 00:11:40,959
in the first case we get uh the first

326
00:11:40,959 --> 00:11:42,160
element uh

327
00:11:42,160 --> 00:11:44,800
generator g we should get point infinity

328
00:11:44,800 --> 00:11:46,160
and the other element

329
00:11:46,160 --> 00:11:49,040
uh we assume it doesn't exist right so

330
00:11:49,040 --> 00:11:50,560
if it exists we get something which is

331
00:11:50,560 --> 00:11:52,320
not the point infinity or

332
00:11:52,320 --> 00:11:55,360
the way i use it as zero right good

333
00:11:55,360 --> 00:11:57,680
so the first question i want to ask here

334
00:11:57,680 --> 00:11:59,600
is if this is a real issue

335
00:11:59,600 --> 00:12:02,000
uh and what i mean by that is that uh so

336
00:12:02,000 --> 00:12:03,360
it's really easy to send it that's

337
00:12:03,360 --> 00:12:04,560
really easy to protect so

338
00:12:04,560 --> 00:12:06,639
why are we even discussing it or how

339
00:12:06,639 --> 00:12:08,240
come we found it in the wild

340
00:12:08,240 --> 00:12:11,600
still although this is a known uh attack

341
00:12:11,600 --> 00:12:13,760
and uh what i want to claim is that

342
00:12:13,760 --> 00:12:14,800
first that

343
00:12:14,800 --> 00:12:16,959
it is uh something that might happen

344
00:12:16,959 --> 00:12:19,200
like it it really is it's really easy to

345
00:12:19,200 --> 00:12:20,320
forget this is um

346
00:12:20,320 --> 00:12:21,760
a script of a transcript of a

347
00:12:21,760 --> 00:12:23,279
conversation with a very talented

348
00:12:23,279 --> 00:12:24,480
developer that

349
00:12:24,480 --> 00:12:27,920
developed uh a great library

350
00:12:27,920 --> 00:12:30,800
for uh in in our category and then we

351
00:12:30,800 --> 00:12:31,920
forgot it and it

352
00:12:31,920 --> 00:12:34,079
it makes perfect sense i mean this is

353
00:12:34,079 --> 00:12:35,440
something that you usually do again

354
00:12:35,440 --> 00:12:36,480
before you even

355
00:12:36,480 --> 00:12:38,000
like use it for your cryptographic

356
00:12:38,000 --> 00:12:40,079
primitives so you'll receive a point

357
00:12:40,079 --> 00:12:42,639
but uh and it also happens you know in

358
00:12:42,639 --> 00:12:44,720
the communication level so it's

359
00:12:44,720 --> 00:12:46,800
it's often uh detached from the actual

360
00:12:46,800 --> 00:12:47,760
cryptography

361
00:12:47,760 --> 00:12:49,120
and it's also not something you need to

362
00:12:49,120 --> 00:12:51,279
do for every curve right so it's just

363
00:12:51,279 --> 00:12:55,120
in a specific uh

364
00:12:55,120 --> 00:12:59,120
uh family of curves as we you use here

365
00:12:59,120 --> 00:13:02,240
okay so now we can go on and talk about

366
00:13:02,240 --> 00:13:04,320
distributed key generation

367
00:13:04,320 --> 00:13:07,760
uh so what is uh a dkg dkg

368
00:13:07,760 --> 00:13:12,240
is basically a way for us uh to generate

369
00:13:12,240 --> 00:13:15,040
uh a keeper we want to generate a public

370
00:13:15,040 --> 00:13:16,079
key and also

371
00:13:16,079 --> 00:13:18,240
i in a way that no one would be able to

372
00:13:18,240 --> 00:13:20,320
know single party would be able to learn

373
00:13:20,320 --> 00:13:23,600
uh the private key okay so let's try to

374
00:13:23,600 --> 00:13:25,120
see it in our framework of the meaning

375
00:13:25,120 --> 00:13:27,440
so the function f that we want to output

376
00:13:27,440 --> 00:13:28,079
here

377
00:13:28,079 --> 00:13:30,560
and be known to all in this case would

378
00:13:30,560 --> 00:13:31,120
be

379
00:13:31,120 --> 00:13:34,560
uh sg okay and

380
00:13:34,560 --> 00:13:36,880
uh what we assume here is that it is how

381
00:13:36,880 --> 00:13:38,639
to go from you know sg to s

382
00:13:38,639 --> 00:13:41,279
this is kind of our assumption i hope

383
00:13:41,279 --> 00:13:42,639
that you're all familiar with

384
00:13:42,639 --> 00:13:46,079
uh how to uh explain it to yourself

385
00:13:46,079 --> 00:13:47,360
uh and and i would just you know for

386
00:13:47,360 --> 00:13:48,720
simplification let's just assume that

387
00:13:48,720 --> 00:13:50,000
here the inputs are

388
00:13:50,000 --> 00:13:53,040
just random uh numbers uh that

389
00:13:53,040 --> 00:13:54,639
uh for each one of the parties so x1

390
00:13:54,639 --> 00:13:56,560
would be this random number si and

391
00:13:56,560 --> 00:13:58,240
to compute sg so what the function does

392
00:13:58,240 --> 00:13:59,760
is just addition of

393
00:13:59,760 --> 00:14:03,360
uh all of these elements okay so pretty

394
00:14:03,360 --> 00:14:06,000
putting it uh uh anymore a bit

395
00:14:06,000 --> 00:14:07,279
differently with uh using the

396
00:14:07,279 --> 00:14:09,279
terminology of secret key in public key

397
00:14:09,279 --> 00:14:11,040
so again the public here is is gonna be

398
00:14:11,040 --> 00:14:13,120
sg and and the secret key is gonna be

399
00:14:13,120 --> 00:14:13,440
this

400
00:14:13,440 --> 00:14:15,839
s right it's gonna be uh using this

401
00:14:15,839 --> 00:14:16,720
hardness

402
00:14:16,720 --> 00:14:19,920
assumption but no one knows this what we

403
00:14:19,920 --> 00:14:21,040
do know is that s

404
00:14:21,040 --> 00:14:23,920
is the addition in this case of all of

405
00:14:23,920 --> 00:14:25,199
the secrets

406
00:14:25,199 --> 00:14:27,120
uh input of the secret inputs of the

407
00:14:27,120 --> 00:14:28,240
parties

408
00:14:28,240 --> 00:14:31,279
and to make this uh such a protocol uh

409
00:14:31,279 --> 00:14:34,240
secure what usually happens and i'm not

410
00:14:34,240 --> 00:14:35,600
going to describe it uh

411
00:14:35,600 --> 00:14:38,720
a dkg i mean there are a few uh

412
00:14:38,720 --> 00:14:40,639
protocols in literature

413
00:14:40,639 --> 00:14:43,839
that you can follow uh some of them very

414
00:14:43,839 --> 00:14:45,680
popular i do want to mention that

415
00:14:45,680 --> 00:14:48,079
usually or commonly what we use in dkg

416
00:14:48,079 --> 00:14:50,240
to make it secure against again again

417
00:14:50,240 --> 00:14:52,560
parties that we do not trust so

418
00:14:52,560 --> 00:14:54,560
we need to kind of verify that they

419
00:14:54,560 --> 00:14:57,360
acted um

420
00:14:57,360 --> 00:15:00,560
according to uh to the protocol so we

421
00:15:00,560 --> 00:15:02,720
have this verifiable secret sharing

422
00:15:02,720 --> 00:15:05,040
that uh each one of the parties uh would

423
00:15:05,040 --> 00:15:07,120
do and i would describe exactly what it

424
00:15:07,120 --> 00:15:07,680
means

425
00:15:07,680 --> 00:15:10,560
but we need to kind of secret share our

426
00:15:10,560 --> 00:15:12,720
secret si so each party would do this

427
00:15:12,720 --> 00:15:14,079
and also we need to prove that we

428
00:15:14,079 --> 00:15:16,160
actually computed as i correctly that we

429
00:15:16,160 --> 00:15:16,880
actually know

430
00:15:16,880 --> 00:15:20,160
such s i i such like each part would

431
00:15:20,160 --> 00:15:21,680
show that it knows

432
00:15:21,680 --> 00:15:23,360
the inputs this is a zero knowledge

433
00:15:23,360 --> 00:15:25,279
proof that will again uh

434
00:15:25,279 --> 00:15:28,560
describe in a moment so what's our goal

435
00:15:28,560 --> 00:15:29,120
here

436
00:15:29,120 --> 00:15:32,720
in uh bypassing dkg or attacking dkg the

437
00:15:32,720 --> 00:15:33,040
goal

438
00:15:33,040 --> 00:15:36,079
is simply to get to a point where the

439
00:15:36,079 --> 00:15:37,040
public key

440
00:15:37,040 --> 00:15:40,880
is this composite or we that we can

441
00:15:40,880 --> 00:15:43,920
somehow uh inject or bias

442
00:15:43,920 --> 00:15:46,240
the public esg with another small order

443
00:15:46,240 --> 00:15:48,480
subgroup element kt

444
00:15:48,480 --> 00:15:50,480
we obviously assume that we use uh one

445
00:15:50,480 --> 00:15:53,120
of the curves that we

446
00:15:53,120 --> 00:15:55,600
that we discussed and and also that for

447
00:15:55,600 --> 00:15:57,279
some reason sanitization did not happen

448
00:15:57,279 --> 00:15:59,279
okay so the attack actually

449
00:15:59,279 --> 00:16:01,839
uh means that now the attacker in the

450
00:16:01,839 --> 00:16:03,680
communication layer can send points that

451
00:16:03,680 --> 00:16:04,560
are biased

452
00:16:04,560 --> 00:16:05,920
and we need to somehow make sure that

453
00:16:05,920 --> 00:16:08,000
the public becomes

454
00:16:08,000 --> 00:16:11,199
also biased with kt okay

455
00:16:11,199 --> 00:16:13,440
so starting with uh proof of knowledge

456
00:16:13,440 --> 00:16:16,240
of elliptic of discrete log so

457
00:16:16,240 --> 00:16:18,399
this is going to be uh the easier uh of

458
00:16:18,399 --> 00:16:20,240
the two primitives

459
00:16:20,240 --> 00:16:22,480
uh to explain uh because it's going to

460
00:16:22,480 --> 00:16:24,320
be very straightforward

461
00:16:24,320 --> 00:16:27,680
what is uh is it log um proof knowledge

462
00:16:27,680 --> 00:16:29,519
so the prover here which we played by

463
00:16:29,519 --> 00:16:31,600
any one of the parties at some point

464
00:16:31,600 --> 00:16:33,600
wants to show that he knows so uh we

465
00:16:33,600 --> 00:16:35,120
have this cesil which let's call it a

466
00:16:35,120 --> 00:16:36,639
commitment so it's going to be a public

467
00:16:36,639 --> 00:16:37,600
commitment and

468
00:16:37,600 --> 00:16:39,920
we want to show that the approval knows

469
00:16:39,920 --> 00:16:42,320
the discrete log

470
00:16:42,320 --> 00:16:45,519
s of of this c 0 so s is instead of

471
00:16:45,519 --> 00:16:48,959
s i just to make it cleaner right

472
00:16:48,959 --> 00:16:52,880
so i'm describing you a very

473
00:16:52,880 --> 00:16:54,720
in in just you know i'm not going to

474
00:16:54,720 --> 00:16:57,040
explain all the details of white walks

475
00:16:57,040 --> 00:16:58,399
and the security and

476
00:16:58,399 --> 00:17:00,399
what are the properties here just going

477
00:17:00,399 --> 00:17:01,440
to give it to you

478
00:17:01,440 --> 00:17:03,519
this is one way of describing this such

479
00:17:03,519 --> 00:17:04,880
a protocol and what

480
00:17:04,880 --> 00:17:06,959
what's important to see here is that

481
00:17:06,959 --> 00:17:08,640
first look at the approval would be

482
00:17:08,640 --> 00:17:10,959
the attacker in the in our context so

483
00:17:10,959 --> 00:17:12,640
the attacker can pick a point

484
00:17:12,640 --> 00:17:15,839
a then there is this uh computation of

485
00:17:15,839 --> 00:17:18,240
a public challenge e which as you can

486
00:17:18,240 --> 00:17:20,559
see takes just public elements

487
00:17:20,559 --> 00:17:22,000
uh and then the approval would compute

488
00:17:22,000 --> 00:17:23,679
this uh uh z

489
00:17:23,679 --> 00:17:27,199
okay which is just a number in our case

490
00:17:27,199 --> 00:17:29,039
and then you would send the point a and

491
00:17:29,039 --> 00:17:30,320
z to the very fire field

492
00:17:30,320 --> 00:17:32,480
the verifier can also compute the same

493
00:17:32,480 --> 00:17:33,840
challenge and then he needs to check and

494
00:17:33,840 --> 00:17:35,039
as you can see you can

495
00:17:35,039 --> 00:17:37,919
call it like a check uh over the points

496
00:17:37,919 --> 00:17:38,320
that

497
00:17:38,320 --> 00:17:41,919
uh some equation holds okay so

498
00:17:41,919 --> 00:17:43,280
you can do the sanity check if you're

499
00:17:43,280 --> 00:17:45,840
not familiar with this uh very simple uh

500
00:17:45,840 --> 00:17:47,440
sigma protocol so you can do the sanity

501
00:17:47,440 --> 00:17:48,480
check just to see that

502
00:17:48,480 --> 00:17:50,799
we have correctness here that indeed

503
00:17:50,799 --> 00:17:52,400
this equation three of the verifier

504
00:17:52,400 --> 00:17:53,760
holds

505
00:17:53,760 --> 00:17:56,000
and now looking it as assuming that the

506
00:17:56,000 --> 00:17:57,360
prover is

507
00:17:57,360 --> 00:18:00,559
uh attacker so the approval would like

508
00:18:00,559 --> 00:18:02,799
to replace c0 so you would like to send

509
00:18:02,799 --> 00:18:04,960
the public this public commitment but

510
00:18:04,960 --> 00:18:07,360
also with this biased kt okay so this

511
00:18:07,360 --> 00:18:09,840
would eventually allow us to propagate

512
00:18:09,840 --> 00:18:12,840
uh this bias to the output public key

513
00:18:12,840 --> 00:18:14,080
now

514
00:18:14,080 --> 00:18:16,720
actually the in this case is not doing

515
00:18:16,720 --> 00:18:18,000
anything okay so

516
00:18:18,000 --> 00:18:21,360
the verifier uh i would simply do the

517
00:18:21,360 --> 00:18:22,080
check with

518
00:18:22,080 --> 00:18:25,760
c 0 which is biased instead of

519
00:18:25,760 --> 00:18:28,960
the original one and for some curves

520
00:18:28,960 --> 00:18:31,200
when we have a very small order subgroup

521
00:18:31,200 --> 00:18:33,200
this actually would work would pass with

522
00:18:33,200 --> 00:18:34,799
a very high probability just in the case

523
00:18:34,799 --> 00:18:37,120
of k25519 when the order is eight

524
00:18:37,120 --> 00:18:39,679
this would happen uh without probability

525
00:18:39,679 --> 00:18:41,600
one small tweak that we can do is that

526
00:18:41,600 --> 00:18:43,440
remember that the prover also can pick a

527
00:18:43,440 --> 00:18:45,679
random point a so we can also tweak this

528
00:18:45,679 --> 00:18:47,120
point and then it might or might not

529
00:18:47,120 --> 00:18:48,000
help him

530
00:18:48,000 --> 00:18:51,520
eventually achieve his uh his goal of

531
00:18:51,520 --> 00:18:53,919
tweaking the commitment

532
00:18:53,919 --> 00:18:56,240
right so this was the easier one now

533
00:18:56,240 --> 00:18:58,000
let's talk about verifiable secret

534
00:18:58,000 --> 00:18:59,760
sharing so first what is very fabulous

535
00:18:59,760 --> 00:19:01,280
sketching and i'm going to take just

536
00:19:01,280 --> 00:19:04,160
what's important for us in blue is the

537
00:19:04,160 --> 00:19:04,559
uh

538
00:19:04,559 --> 00:19:06,400
you can see the very the parts that are

539
00:19:06,400 --> 00:19:07,679
verifiable

540
00:19:07,679 --> 00:19:09,280
uh other than that we have a secret

541
00:19:09,280 --> 00:19:10,960
sharing so a secret sharing basically

542
00:19:10,960 --> 00:19:11,919
means that

543
00:19:11,919 --> 00:19:13,520
we have now a dealer it's not approval

544
00:19:13,520 --> 00:19:14,960
it's a dealer the dealer would have this

545
00:19:14,960 --> 00:19:16,400
secret s

546
00:19:16,400 --> 00:19:18,240
that he wants to seek a chair the way he

547
00:19:18,240 --> 00:19:20,320
can do it is to

548
00:19:20,320 --> 00:19:22,400
compute or to to pick random

549
00:19:22,400 --> 00:19:24,080
coefficients of a polynomial of some

550
00:19:24,080 --> 00:19:25,440
degree t

551
00:19:25,440 --> 00:19:28,080
and then he can compute points in this

552
00:19:28,080 --> 00:19:29,679
polynomial

553
00:19:29,679 --> 00:19:31,440
and send to each one of the parties a

554
00:19:31,440 --> 00:19:33,520
point on the polynomial and

555
00:19:33,520 --> 00:19:35,840
and and as as you know it it means that

556
00:19:35,840 --> 00:19:37,360
the other part is at some point would be

557
00:19:37,360 --> 00:19:39,440
able also to reconstruct but here we

558
00:19:39,440 --> 00:19:41,039
don't care about the reconstruction

559
00:19:41,039 --> 00:19:43,440
we do care about the verification so we

560
00:19:43,440 --> 00:19:45,280
want each one of the parties that

561
00:19:45,280 --> 00:19:46,320
receive

562
00:19:46,320 --> 00:19:49,520
from the dealer uh a secret share to be

563
00:19:49,520 --> 00:19:51,200
also be able to check that this

564
00:19:51,200 --> 00:19:52,880
signature

565
00:19:52,880 --> 00:19:55,919
uh corresponds to the same polynomial so

566
00:19:55,919 --> 00:19:57,520
to do it the verifier uh

567
00:19:57,520 --> 00:19:59,520
the the dealer also shares these

568
00:19:59,520 --> 00:20:01,039
commitments to the coefficients and to

569
00:20:01,039 --> 00:20:02,159
the secret

570
00:20:02,159 --> 00:20:05,440
um and then he uh and

571
00:20:05,440 --> 00:20:07,440
then each party can basically run a

572
00:20:07,440 --> 00:20:08,480
check over the

573
00:20:08,480 --> 00:20:11,440
uh like the exponent over the points

574
00:20:11,440 --> 00:20:11,840
that

575
00:20:11,840 --> 00:20:14,880
uh the point she got actually um

576
00:20:14,880 --> 00:20:16,320
is the result of evaluating the

577
00:20:16,320 --> 00:20:18,240
polynomial at some point i

578
00:20:18,240 --> 00:20:21,039
right so putting it uh on the side here

579
00:20:21,039 --> 00:20:22,799
is just you know a quick example if you

580
00:20:22,799 --> 00:20:23,840
want to

581
00:20:23,840 --> 00:20:26,159
uh to see for yourself that this check

582
00:20:26,159 --> 00:20:28,400
works this is the check for party two

583
00:20:28,400 --> 00:20:30,559
when you have a polynomial with a secret

584
00:20:30,559 --> 00:20:32,960
one and and coefficients one two three

585
00:20:32,960 --> 00:20:33,520
okay

586
00:20:33,520 --> 00:20:36,960
so you can see it for yourself

587
00:20:36,960 --> 00:20:39,440
now putting the head of the attacker now

588
00:20:39,440 --> 00:20:42,240
assuming the dealer is the attacker

589
00:20:42,240 --> 00:20:44,320
the degree of freedom we have here is

590
00:20:44,320 --> 00:20:45,280
same as before the

591
00:20:45,280 --> 00:20:48,080
the attacker can now tweak the

592
00:20:48,080 --> 00:20:49,600
commitments that are public and send

593
00:20:49,600 --> 00:20:51,280
like points that are sent to

594
00:20:51,280 --> 00:20:53,440
uh they are broadcasted and said to to

595
00:20:53,440 --> 00:20:54,480
everyone

596
00:20:54,480 --> 00:20:57,120
so the c01 is the one that would

597
00:20:57,120 --> 00:20:58,159
eventually

598
00:20:58,159 --> 00:21:00,080
propagate to the public key so it says g

599
00:21:00,080 --> 00:21:01,440
plus k zero t

600
00:21:01,440 --> 00:21:04,159
obviously we want k 0 to not be equal to

601
00:21:04,159 --> 00:21:04,640
0

602
00:21:04,640 --> 00:21:06,880
otherwise we are not achieving anything

603
00:21:06,880 --> 00:21:08,240
with this attack

604
00:21:08,240 --> 00:21:10,880
and we can also take the other

605
00:21:10,880 --> 00:21:14,240
commitments to the coefficients cj and

606
00:21:14,240 --> 00:21:16,400
corrupt them as well and now the

607
00:21:16,400 --> 00:21:18,640
verifier or the receiver

608
00:21:18,640 --> 00:21:21,200
would basically run the same test and

609
00:21:21,200 --> 00:21:22,640
would check if it works

610
00:21:22,640 --> 00:21:24,559
and as you can see at the bottom uh

611
00:21:24,559 --> 00:21:26,080
there is an equation that now we need to

612
00:21:26,080 --> 00:21:26,880
make sure that

613
00:21:26,880 --> 00:21:29,120
uh works in order for the attack to

614
00:21:29,120 --> 00:21:30,080
succeed

615
00:21:30,080 --> 00:21:33,360
so let's try to um to describe it in a

616
00:21:33,360 --> 00:21:34,799
bit more details

617
00:21:34,799 --> 00:21:36,400
now i want to describe it using an

618
00:21:36,400 --> 00:21:38,000
example so for this example

619
00:21:38,000 --> 00:21:39,600
i would have an attacker that controls

620
00:21:39,600 --> 00:21:41,440
two parties let's say we have five

621
00:21:41,440 --> 00:21:42,720
minions right so we

622
00:21:42,720 --> 00:21:45,520
have p1 p2 p3 that are honest but

623
00:21:45,520 --> 00:21:47,919
attacker controls p4 and p5

624
00:21:47,919 --> 00:21:51,440
now let's play p4 okay as the dealer

625
00:21:51,440 --> 00:21:54,880
and p4 can choose um you know his secret

626
00:21:54,880 --> 00:21:57,360
coefficients and also these ki

627
00:21:57,360 --> 00:21:58,880
endpoints and we need to make sure that

628
00:21:58,880 --> 00:22:01,200
this equation holds so to translate this

629
00:22:01,200 --> 00:22:02,960
equation or to open it up it means that

630
00:22:02,960 --> 00:22:04,480
each one of the honest parties would

631
00:22:04,480 --> 00:22:06,640
receive one of these lines

632
00:22:06,640 --> 00:22:10,880
and would have to check that this

633
00:22:10,880 --> 00:22:14,080
equation that he got actually holds

634
00:22:14,080 --> 00:22:16,320
okay and remember by the way that uh

635
00:22:16,320 --> 00:22:18,320
there was actually another equation

636
00:22:18,320 --> 00:22:20,240
that was supposed to be received by p5

637
00:22:20,240 --> 00:22:21,360
but p5

638
00:22:21,360 --> 00:22:23,679
in our case is malicious so whatever he

639
00:22:23,679 --> 00:22:24,880
gets you just

640
00:22:24,880 --> 00:22:27,120
output that everything is fine so now

641
00:22:27,120 --> 00:22:29,120
let's break down the equations

642
00:22:29,120 --> 00:22:32,159
uh or group them uh with

643
00:22:32,159 --> 00:22:35,360
by g and and group them uh with t so

644
00:22:35,360 --> 00:22:37,280
uh on the right hand you can see the

645
00:22:37,280 --> 00:22:38,880
equations are grouped by g

646
00:22:38,880 --> 00:22:40,480
so this is the regular secret sharing

647
00:22:40,480 --> 00:22:42,400
equations so it's really easy to make

648
00:22:42,400 --> 00:22:43,919
sure that it holds

649
00:22:43,919 --> 00:22:45,760
on the left we have this uh condition

650
00:22:45,760 --> 00:22:47,440
that k0 cannot be zero otherwise the

651
00:22:47,440 --> 00:22:48,640
attack is meaningless

652
00:22:48,640 --> 00:22:50,000
and then we have this set of equation in

653
00:22:50,000 --> 00:22:51,440
the middle that we need to make sure so

654
00:22:51,440 --> 00:22:51,840
this is

655
00:22:51,840 --> 00:22:55,200
uh k1 2 and k 0 is something that the

656
00:22:55,200 --> 00:22:56,880
attacker can pick and we need to see if

657
00:22:56,880 --> 00:22:57,679
it works

658
00:22:57,679 --> 00:22:59,440
now if you notice if you are quick to

659
00:22:59,440 --> 00:23:00,960
notice you see that this would actually

660
00:23:00,960 --> 00:23:01,280
not

661
00:23:01,280 --> 00:23:04,240
work very easily so it requires some

662
00:23:04,240 --> 00:23:06,000
some luck such that this equation

663
00:23:06,000 --> 00:23:07,919
set of questions would hold it it is

664
00:23:07,919 --> 00:23:09,440
possible but

665
00:23:09,440 --> 00:23:11,679
not really easy we want to make sure our

666
00:23:11,679 --> 00:23:12,559
probabilities

667
00:23:12,559 --> 00:23:15,120
uh probability of attack is higher so

668
00:23:15,120 --> 00:23:16,000
here i'm going to need

669
00:23:16,000 --> 00:23:17,679
another assumption and this assumption

670
00:23:17,679 --> 00:23:19,360
is that the target can actually pick the

671
00:23:19,360 --> 00:23:21,360
indices of the parties okay

672
00:23:21,360 --> 00:23:24,480
so each one of the parties

673
00:23:24,480 --> 00:23:27,200
uh now before it was party i gets point

674
00:23:27,200 --> 00:23:28,640
pi in our party i would

675
00:23:28,640 --> 00:23:30,960
get an index x i and we'll get a point

676
00:23:30,960 --> 00:23:32,159
pxi

677
00:23:32,159 --> 00:23:35,600
this is um no implication on security

678
00:23:35,600 --> 00:23:36,000
okay

679
00:23:36,000 --> 00:23:38,400
in in verifiable secret sharing it's

680
00:23:38,400 --> 00:23:40,320
supposed to work with with any index

681
00:23:40,320 --> 00:23:42,960
so it's supposed to be okay and indeed

682
00:23:42,960 --> 00:23:43,600
uh

683
00:23:43,600 --> 00:23:46,000
uh this is something that in some

684
00:23:46,000 --> 00:23:46,720
application

685
00:23:46,720 --> 00:23:49,520
uh can be done relatively easily now

686
00:23:49,520 --> 00:23:50,960
what i want to claim is that now

687
00:23:50,960 --> 00:23:53,679
we actually it's enough to have a single

688
00:23:53,679 --> 00:23:54,159
uh

689
00:23:54,159 --> 00:23:56,400
party only the deal area to be corrupted

690
00:23:56,400 --> 00:23:57,919
to pull this attack

691
00:23:57,919 --> 00:23:59,840
which is something that i didn't

692
00:23:59,840 --> 00:24:01,600
explicitly explain but

693
00:24:01,600 --> 00:24:03,440
our previous attack we did have some

694
00:24:03,440 --> 00:24:05,360
condition also on

695
00:24:05,360 --> 00:24:07,360
who can be on how many parties are

696
00:24:07,360 --> 00:24:08,480
corrupted

697
00:24:08,480 --> 00:24:10,799
and the way that it works is that now

698
00:24:10,799 --> 00:24:12,400
the dealer has this another degree of

699
00:24:12,400 --> 00:24:13,679
freedom and he can actually choose the

700
00:24:13,679 --> 00:24:14,960
indices in a way

701
00:24:14,960 --> 00:24:16,559
that would make the set of equations

702
00:24:16,559 --> 00:24:18,960
over the ki much more easy to solve

703
00:24:18,960 --> 00:24:20,960
and guarantee that it will be solved

704
00:24:20,960 --> 00:24:22,400
with probability one

705
00:24:22,400 --> 00:24:25,200
so going back to our example now the

706
00:24:25,200 --> 00:24:27,120
attacker controls only p4

707
00:24:27,120 --> 00:24:28,640
still it means that i have another

708
00:24:28,640 --> 00:24:30,080
equation here but as you will see in a

709
00:24:30,080 --> 00:24:32,240
moment this doesn't really matter so we

710
00:24:32,240 --> 00:24:34,400
stay with the three equations i do need

711
00:24:34,400 --> 00:24:36,000
to mention here the small order group

712
00:24:36,000 --> 00:24:37,679
size let's take eight but it would work

713
00:24:37,679 --> 00:24:38,640
for any one

714
00:24:38,640 --> 00:24:41,679
for any um uh order

715
00:24:41,679 --> 00:24:44,640
and uh here the attacker chose indices 1

716
00:24:44,640 --> 00:24:46,240
9 and 17

717
00:24:46,240 --> 00:24:50,240
and let's see uh what it gets us so

718
00:24:50,240 --> 00:24:52,480
let's just focus on one element just to

719
00:24:52,480 --> 00:24:53,600
uh to show it

720
00:24:53,600 --> 00:24:56,080
so we can take this element of 9 k1 t

721
00:24:56,080 --> 00:24:56,880
and you can see that

722
00:24:56,880 --> 00:25:00,480
like opening if we can open it up we get

723
00:25:00,480 --> 00:25:03,360
that we have uh it basically equals to

724
00:25:03,360 --> 00:25:04,080
k1t

725
00:25:04,080 --> 00:25:06,880
it's really easy to see we can just uh

726
00:25:06,880 --> 00:25:08,640
subtract the

727
00:25:08,640 --> 00:25:11,520
anyway it's very easy to see and uh what

728
00:25:11,520 --> 00:25:12,080
it means

729
00:25:12,080 --> 00:25:14,000
is that we it happens with every one of

730
00:25:14,000 --> 00:25:15,840
the elements in the equations and

731
00:25:15,840 --> 00:25:18,000
basically we get the same equation over

732
00:25:18,000 --> 00:25:19,120
and over again

733
00:25:19,120 --> 00:25:20,799
right so we can even make it a bit more

734
00:25:20,799 --> 00:25:22,240
difficult depends on the indexes and the

735
00:25:22,240 --> 00:25:23,600
attackers so there is

736
00:25:23,600 --> 00:25:26,400
a bit more uh to it in terms of what is

737
00:25:26,400 --> 00:25:28,000
the exact scenario but this is like a

738
00:25:28,000 --> 00:25:28,880
very

739
00:25:28,880 --> 00:25:30,720
easy one that we can just fold all of

740
00:25:30,720 --> 00:25:32,400
the equations into one equation which is

741
00:25:32,400 --> 00:25:35,279
very easy to pick

742
00:25:36,000 --> 00:25:39,279
such that the equation would hold so

743
00:25:39,279 --> 00:25:42,320
to summarize this part of attacking dkg

744
00:25:42,320 --> 00:25:43,600
as i mentioned we have proof of

745
00:25:43,600 --> 00:25:46,400
knowledge in vss

746
00:25:46,400 --> 00:25:50,000
and in both cases we can manage with a

747
00:25:50,000 --> 00:25:51,440
single attacker

748
00:25:51,440 --> 00:25:53,840
in the vss case it does require us to

749
00:25:53,840 --> 00:25:54,720
make this

750
00:25:54,720 --> 00:25:56,480
another assumption about picking the

751
00:25:56,480 --> 00:25:57,760
right indexes

752
00:25:57,760 --> 00:26:00,159
otherwise it is more involved and i

753
00:26:00,159 --> 00:26:01,600
would not go into the details of what

754
00:26:01,600 --> 00:26:03,039
exactly are the conditions but it means

755
00:26:03,039 --> 00:26:04,799
that probability is

756
00:26:04,799 --> 00:26:08,080
uh is smaller

757
00:26:08,080 --> 00:26:10,240
and for the proof knowledge of course it

758
00:26:10,240 --> 00:26:11,120
would work

759
00:26:11,120 --> 00:26:13,760
the smaller the group uh the the

760
00:26:13,760 --> 00:26:14,720
subgroup order

761
00:26:14,720 --> 00:26:17,120
is the better our chances and with the

762
00:26:17,120 --> 00:26:19,279
vss it would work with any co-factor

763
00:26:19,279 --> 00:26:22,159
okay so now going into the interesting

764
00:26:22,159 --> 00:26:23,760
part of the application so again let's

765
00:26:23,760 --> 00:26:25,600
assume we managed to bypass dkg and

766
00:26:25,600 --> 00:26:27,760
therefore our public key

767
00:26:27,760 --> 00:26:30,080
although secret key the joint one the

768
00:26:30,080 --> 00:26:31,279
one that will

769
00:26:31,279 --> 00:26:33,520
never get at one place is gonna be s our

770
00:26:33,520 --> 00:26:34,880
public is gonna be different it's gonna

771
00:26:34,880 --> 00:26:36,480
be sg plus kt

772
00:26:36,480 --> 00:26:39,600
okay so what does it mean

773
00:26:39,600 --> 00:26:41,760
starting from cryptocurrency wallet but

774
00:26:41,760 --> 00:26:43,360
now based on one of the elliptic curves

775
00:26:43,360 --> 00:26:43,919
that we

776
00:26:43,919 --> 00:26:47,600
um uh focus on we now have

777
00:26:47,600 --> 00:26:50,880
this uh public key of pk as we mentioned

778
00:26:50,880 --> 00:26:52,880
and what it means is that for some high

779
00:26:52,880 --> 00:26:54,000
probability

780
00:26:54,000 --> 00:26:56,640
uh we'll have a failure to verify

781
00:26:56,640 --> 00:26:58,080
signature so

782
00:26:58,080 --> 00:27:00,000
the parties would jointly produce a

783
00:27:00,000 --> 00:27:01,520
signature that would fail with high

784
00:27:01,520 --> 00:27:02,720
probability

785
00:27:02,720 --> 00:27:06,720
uh in some cases it might even i mean

786
00:27:06,720 --> 00:27:08,720
for deterministic if the randomness

787
00:27:08,720 --> 00:27:10,640
chosen in at least indeed this is a

788
00:27:10,640 --> 00:27:12,400
deterministic we even show that

789
00:27:12,400 --> 00:27:14,159
it can fail for the same message over

790
00:27:14,159 --> 00:27:15,919
and over but

791
00:27:15,919 --> 00:27:19,279
uh this is uh not very much

792
00:27:19,279 --> 00:27:21,440
interesting what is interesting is that

793
00:27:21,440 --> 00:27:23,440
this attack can be somehow mitigated or

794
00:27:23,440 --> 00:27:24,960
sanitized even after

795
00:27:24,960 --> 00:27:28,000
uh uh after the fact so

796
00:27:28,000 --> 00:27:30,480
uh i mean you can sanitize the local

797
00:27:30,480 --> 00:27:31,039
public

798
00:27:31,039 --> 00:27:33,039
if you if you suspect that this is the

799
00:27:33,039 --> 00:27:34,399
case so you can still

800
00:27:34,399 --> 00:27:37,120
after dkgr and this protocol to sanitize

801
00:27:37,120 --> 00:27:39,360
anyway we found uh vulnerable code

802
00:27:39,360 --> 00:27:43,520
it was binance uh threshold club

803
00:27:43,520 --> 00:27:47,520
wallet library and it was fixed already

804
00:27:47,520 --> 00:27:48,799
and uh

805
00:27:48,799 --> 00:27:52,640
and that's it so going from a wallet

806
00:27:52,640 --> 00:27:54,720
to a different application which is a

807
00:27:54,720 --> 00:27:56,480
validator so a validator

808
00:27:56,480 --> 00:28:00,000
is uh an entity that usually

809
00:28:00,000 --> 00:28:04,240
uh take part in running a blockchain

810
00:28:04,240 --> 00:28:06,880
so i'm not sure what is the exact

811
00:28:06,880 --> 00:28:09,120
definition of a validator but what's

812
00:28:09,120 --> 00:28:10,720
important in our case

813
00:28:10,720 --> 00:28:13,039
is that this is another type of

814
00:28:13,039 --> 00:28:14,840
signature generating

815
00:28:14,840 --> 00:28:18,559
um or jointly uh signature generating

816
00:28:18,559 --> 00:28:21,679
application that uh has on on

817
00:28:21,679 --> 00:28:23,360
and what we know for sure that is is

818
00:28:23,360 --> 00:28:24,880
that because it is really critical to

819
00:28:24,880 --> 00:28:26,559
the function of the blockchain

820
00:28:26,559 --> 00:28:28,080
it usually comes with some and

821
00:28:28,080 --> 00:28:30,080
application level some form of

822
00:28:30,080 --> 00:28:32,640
penalty some form of reward or penalty

823
00:28:32,640 --> 00:28:34,240
if if

824
00:28:34,240 --> 00:28:36,640
it fails to operate so in this case

825
00:28:36,640 --> 00:28:38,320
failing verification which would be the

826
00:28:38,320 --> 00:28:39,440
same case

827
00:28:39,440 --> 00:28:41,679
as was done before the same outcome

828
00:28:41,679 --> 00:28:42,840
would have some

829
00:28:42,840 --> 00:28:46,240
financial uh impact might be that

830
00:28:46,240 --> 00:28:49,279
some reward would be avoided or some

831
00:28:49,279 --> 00:28:51,840
some reward do not get to the party or

832
00:28:51,840 --> 00:28:55,520
uh even some slashing meaning that

833
00:28:55,520 --> 00:28:59,679
they can lose some

834
00:28:59,679 --> 00:29:02,480
some money by not verifying it okay we

835
00:29:02,480 --> 00:29:03,840
did find some

836
00:29:03,840 --> 00:29:05,840
code that we claim to be vulnerable here

837
00:29:05,840 --> 00:29:07,520
i would say that this code

838
00:29:07,520 --> 00:29:11,440
might have some other issues as well and

839
00:29:11,440 --> 00:29:13,200
but still this is uh an interesting

840
00:29:13,200 --> 00:29:14,640
example if you want to check out how

841
00:29:14,640 --> 00:29:15,760
this works in

842
00:29:15,760 --> 00:29:20,159
for validators okay so now this is uh

843
00:29:20,159 --> 00:29:21,600
going to random bitcoin this is a very

844
00:29:21,600 --> 00:29:23,279
interesting application and for that

845
00:29:23,279 --> 00:29:25,360
reason this is why it's here because

846
00:29:25,360 --> 00:29:28,640
uh i'm going to the bottom line diran

847
00:29:28,640 --> 00:29:30,480
which is the application we looked at

848
00:29:30,480 --> 00:29:32,880
based by the on bls12381 so it's

849
00:29:32,880 --> 00:29:35,120
like the the other curve it was not

850
00:29:35,120 --> 00:29:36,640
vulnerable but it was not vulnerable

851
00:29:36,640 --> 00:29:37,279
because

852
00:29:37,279 --> 00:29:39,200
there was there is a sanitization so

853
00:29:39,200 --> 00:29:41,279
they do the sanitization properly and

854
00:29:41,279 --> 00:29:43,279
everything works fine

855
00:29:43,279 --> 00:29:45,600
however if sanitization was missing i

856
00:29:45,600 --> 00:29:46,960
think this is a very interesting

857
00:29:46,960 --> 00:29:48,799
application to attack

858
00:29:48,799 --> 00:29:50,559
why is that so let's understand what is

859
00:29:50,559 --> 00:29:52,240
decentralized random bitcoin

860
00:29:52,240 --> 00:29:55,120
so here we use bls threshold signatures

861
00:29:55,120 --> 00:29:55,600
and

862
00:29:55,600 --> 00:29:58,399
uh we actually take the result to be the

863
00:29:58,399 --> 00:29:59,679
output randomness

864
00:29:59,679 --> 00:30:02,320
and then we chain and take this uh

865
00:30:02,320 --> 00:30:04,159
output to be the input for a new

866
00:30:04,159 --> 00:30:06,880
bls treasure bls signature so we have a

867
00:30:06,880 --> 00:30:08,640
bunch of parties computing together the

868
00:30:08,640 --> 00:30:09,520
signature

869
00:30:09,520 --> 00:30:12,880
the output is uh taking to be

870
00:30:12,880 --> 00:30:14,720
some verifiable randomness so everyone

871
00:30:14,720 --> 00:30:16,080
can verify the signature and see that

872
00:30:16,080 --> 00:30:16,480
this

873
00:30:16,480 --> 00:30:19,360
was how the randomness was generated and

874
00:30:19,360 --> 00:30:19,840
then it

875
00:30:19,840 --> 00:30:23,200
is also taken as an input as the message

876
00:30:23,200 --> 00:30:25,120
input for a new threshold bls signature

877
00:30:25,120 --> 00:30:26,640
and therefore this is how you can chain

878
00:30:26,640 --> 00:30:27,440
those

879
00:30:27,440 --> 00:30:29,279
and what happens is that if for some

880
00:30:29,279 --> 00:30:31,200
reason uh and this is what will happen

881
00:30:31,200 --> 00:30:32,720
in our attack if the public key

882
00:30:32,720 --> 00:30:35,919
is tweaked we get that at some point

883
00:30:35,919 --> 00:30:37,039
verification

884
00:30:37,039 --> 00:30:39,840
will fail so you can no longer publicly

885
00:30:39,840 --> 00:30:40,320
verify

886
00:30:40,320 --> 00:30:42,880
verify that the randomness was generated

887
00:30:42,880 --> 00:30:43,919
correctly

888
00:30:43,919 --> 00:30:45,679
and it can have some implication like

889
00:30:45,679 --> 00:30:47,840
stopping or getting the the chain the

890
00:30:47,840 --> 00:30:49,600
random bicon chain to

891
00:30:49,600 --> 00:30:52,640
to get stuck so this is uh maybe uh

892
00:30:52,640 --> 00:30:55,760
one hint about the civility of this kind

893
00:30:55,760 --> 00:30:56,480
of attacks

894
00:30:56,480 --> 00:30:59,840
on on distributed uh system uh which

895
00:30:59,840 --> 00:31:03,200
is more focused on the liveness and not

896
00:31:03,200 --> 00:31:04,000
on the

897
00:31:04,000 --> 00:31:07,200
um safety in in in a sense

898
00:31:07,200 --> 00:31:09,360
and another example that we found for it

899
00:31:09,360 --> 00:31:11,120
and this is i would say the most of it

900
00:31:11,120 --> 00:31:12,640
is with consensus protocol so some

901
00:31:12,640 --> 00:31:14,080
consensus protocols

902
00:31:14,080 --> 00:31:16,559
are relying on cryptographic primitives

903
00:31:16,559 --> 00:31:18,159
like threshold or protocols like

904
00:31:18,159 --> 00:31:19,840
threshold bls signatures

905
00:31:19,840 --> 00:31:22,720
and also in this case failing to verify

906
00:31:22,720 --> 00:31:23,600
signature would

907
00:31:23,600 --> 00:31:25,600
cause the protocol or the consensus to

908
00:31:25,600 --> 00:31:26,960
not be able to

909
00:31:26,960 --> 00:31:31,039
um to terminate correctly

910
00:31:31,039 --> 00:31:33,200
and it would stop right so we did

911
00:31:33,200 --> 00:31:34,559
actually find uh

912
00:31:34,559 --> 00:31:37,200
um some examples to it i cannot disclose

913
00:31:37,200 --> 00:31:38,720
it yet i mean this is still work in

914
00:31:38,720 --> 00:31:39,440
progress

915
00:31:39,440 --> 00:31:42,640
uh to fix it reason is that um

916
00:31:42,640 --> 00:31:45,919
the what we found was uh that they

917
00:31:45,919 --> 00:31:47,840
use at least in one blockchain they use

918
00:31:47,840 --> 00:31:49,039
a very old library

919
00:31:49,039 --> 00:31:51,519
or an old version of a library and it

920
00:31:51,519 --> 00:31:53,200
means that there's a lot of dependencies

921
00:31:53,200 --> 00:31:53,600
to

922
00:31:53,600 --> 00:31:56,480
uh to update so it's a major change but

923
00:31:56,480 --> 00:31:58,320
we do can say is that the conclusion

924
00:31:58,320 --> 00:31:59,840
here again is that failing verification

925
00:31:59,840 --> 00:32:01,120
would impact liveness so this is at

926
00:32:01,120 --> 00:32:02,399
least how we

927
00:32:02,399 --> 00:32:05,519
what we found so far going forward

928
00:32:05,519 --> 00:32:08,399
so first i hope that i was able to raise

929
00:32:08,399 --> 00:32:09,919
awareness back to this

930
00:32:09,919 --> 00:32:11,360
interesting attack of small other

931
00:32:11,360 --> 00:32:12,960
subgroup attacks

932
00:32:12,960 --> 00:32:15,760
uh and uh maybe the other i mean more

933
00:32:15,760 --> 00:32:16,559
because we focused

934
00:32:16,559 --> 00:32:20,240
on advanced cryptography uh there are uh

935
00:32:20,240 --> 00:32:21,840
more advanced cryptography type of

936
00:32:21,840 --> 00:32:24,080
protocols that might be of interest

937
00:32:24,080 --> 00:32:26,640
for example zero knowledge proofs i'm

938
00:32:26,640 --> 00:32:28,320
giving you some just you know couple of

939
00:32:28,320 --> 00:32:30,080
examples but there are many others

940
00:32:30,080 --> 00:32:32,480
and and uh there's also then the

941
00:32:32,480 --> 00:32:34,159
question of so how we can mitigate it

942
00:32:34,159 --> 00:32:36,159
maybe in a better way right because as

943
00:32:36,159 --> 00:32:37,440
we mentioned it is kind of easy to

944
00:32:37,440 --> 00:32:38,480
forget

945
00:32:38,480 --> 00:32:40,720
standards are always good and there's

946
00:32:40,720 --> 00:32:42,000
also maybe cryptographic

947
00:32:42,000 --> 00:32:44,399
way uh mathematical ways to to handle

948
00:32:44,399 --> 00:32:46,640
this sturto is one type of elliptical

949
00:32:46,640 --> 00:32:47,200
that

950
00:32:47,200 --> 00:32:49,279
kind of enjoys uh the good of both

951
00:32:49,279 --> 00:32:50,320
worlds because it

952
00:32:50,320 --> 00:32:53,360
also has a very fast implementation

953
00:32:53,360 --> 00:32:55,519
uh it provides this first addition and

954
00:32:55,519 --> 00:32:56,559
also

955
00:32:56,559 --> 00:32:59,279
has no small order subup so it

956
00:32:59,279 --> 00:33:00,240
eliminates this

957
00:33:00,240 --> 00:33:02,480
security so there might be hope also

958
00:33:02,480 --> 00:33:03,919
there

959
00:33:03,919 --> 00:33:07,519
um and that's it uh i guess that would

960
00:33:07,519 --> 00:33:09,440
be how to take questions now

961
00:33:09,440 --> 00:33:12,480
but if you want please bring me or find

962
00:33:12,480 --> 00:33:13,120
me

963
00:33:13,120 --> 00:33:16,640
on twitter or in my email and would be

964
00:33:16,640 --> 00:33:17,840
happy to

965
00:33:17,840 --> 00:33:19,919
talk further about this topic thank you

966
00:33:19,919 --> 00:33:23,600
very much

