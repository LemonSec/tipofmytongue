1
00:00:05,709 --> 00:00:10,789
so today I'll<font color="#CCCCCC"> be</font><font color="#E5E5E5"> talking about a</font>

2
00:00:08,629 --> 00:00:12,590
<font color="#CCCCCC">fine-grain approach to algorithms and</font>

3
00:00:10,789 --> 00:00:15,980
complexity<font color="#CCCCCC"> and at the end I'll try to</font>

4
00:00:12,590 --> 00:00:20,210
tie it up<font color="#CCCCCC"> with what u.s. cryptographers</font>

5
00:00:15,980 --> 00:00:25,220
study<font color="#CCCCCC"> alright so what are</font><font color="#E5E5E5"> the problems</font>

6
00:00:20,210 --> 00:00:27,860
that<font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> I love</font>

7
00:00:25,220 --> 00:00:29,689
algorithms and what what do people in

8
00:00:27,860 --> 00:00:31,820
algorithms research<font color="#CCCCCC"> actually study so</font>

9
00:00:29,690 --> 00:00:34,820
when you<font color="#CCCCCC"> open an algorithms textbook</font>

10
00:00:31,820 --> 00:00:36,649
<font color="#E5E5E5">what do you see you see</font><font color="#CCCCCC"> the following</font>

11
00:00:34,820 --> 00:00:39,109
<font color="#E5E5E5">this is the fundamental</font><font color="#CCCCCC"> questions</font><font color="#E5E5E5"> of</font>

12
00:00:36,649 --> 00:00:41,719
algorithms research is how fast<font color="#E5E5E5"> can we</font>

13
00:00:39,109 --> 00:00:42,229
<font color="#E5E5E5">solve fundamental problems in</font><font color="#CCCCCC"> the worst</font>

14
00:00:41,719 --> 00:00:44,510
case

15
00:00:42,229 --> 00:00:46,399
okay so parse it<font color="#CCCCCC"> for your a</font><font color="#E5E5E5"> little bit</font>

16
00:00:44,510 --> 00:00:47,748
you probably<font color="#E5E5E5"> all</font><font color="#CCCCCC"> know what it means but</font>

17
00:00:46,399 --> 00:00:50,299
<font color="#CCCCCC">let me do it anyway</font>

18
00:00:47,749 --> 00:00:51,979
<font color="#CCCCCC">so we're on the same page page so we</font>

19
00:00:50,299 --> 00:00:55,010
have some function<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to compute</font>

20
00:00:51,979 --> 00:00:57,350
<font color="#E5E5E5">its computable we have some reasonable</font>

21
00:00:55,010 --> 00:00:59,870
model of computation such as a Turing

22
00:00:57,350 --> 00:01:02,030
machine or a random<font color="#E5E5E5"> access machine this</font>

23
00:00:59,870 --> 00:01:05,000
reasonable model of computation defines

24
00:01:02,030 --> 00:01:08,450
<font color="#CCCCCC">based basic primitives</font><font color="#E5E5E5"> which take</font>

25
00:01:05,000 --> 00:01:10,520
constant time for<font color="#CCCCCC"> operation and</font><font color="#E5E5E5"> now we</font>

26
00:01:08,450 --> 00:01:14,930
want to compute<font color="#E5E5E5"> a function on n bit</font>

27
00:01:10,520 --> 00:01:17,479
inputs<font color="#E5E5E5"> on that machine</font><font color="#CCCCCC"> and now we we</font>

28
00:01:14,930 --> 00:01:19,520
want<font color="#E5E5E5"> to know how many operations does it</font>

29
00:01:17,480 --> 00:01:21,620
take to<font color="#E5E5E5"> compute a particular</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> and</font>

30
00:01:19,520 --> 00:01:24,020
what is the<font color="#E5E5E5"> worst-case asymptotic</font>

31
00:01:21,620 --> 00:01:26,180
running time that<font color="#CCCCCC"> is as the length of</font>

32
00:01:24,020 --> 00:01:27,979
<font color="#CCCCCC">the input grows what does the</font><font color="#E5E5E5"> runtime</font>

33
00:01:26,180 --> 00:01:29,840
look like<font color="#E5E5E5"> and in particular we want to</font>

34
00:01:27,980 --> 00:01:31,340
get a handle<font color="#CCCCCC"> on what is the</font><font color="#E5E5E5"> best running</font>

35
00:01:29,840 --> 00:01:35,960
time that<font color="#CCCCCC"> we can achieve with an</font>

36
00:01:31,340 --> 00:01:39,350
algorithm<font color="#E5E5E5"> now what what is our</font><font color="#CCCCCC"> holy</font>

37
00:01:35,960 --> 00:01:42,770
<font color="#CCCCCC">grail it's a linear time algorithm so</font>

38
00:01:39,350 --> 00:01:45,199
some algorithm<font color="#E5E5E5"> there runs in time</font><font color="#CCCCCC"> this</font>

39
00:01:42,770 --> 00:01:48,020
<font color="#E5E5E5">linear in the length of the input</font><font color="#CCCCCC"> and</font>

40
00:01:45,200 --> 00:01:49,610
<font color="#CCCCCC">why is this interesting well it's for</font>

41
00:01:48,020 --> 00:01:51,800
most of the problems we study we

42
00:01:49,610 --> 00:01:53,780
<font color="#CCCCCC">actually have to read the input so</font>

43
00:01:51,800 --> 00:01:57,229
therefore<font color="#E5E5E5"> it's asymptotically optimal up</font>

44
00:01:53,780 --> 00:02:00,230
<font color="#E5E5E5">to constants so this is what we want and</font>

45
00:01:57,230 --> 00:02:02,810
the good news<font color="#E5E5E5"> is we have</font><font color="#CCCCCC"> a huge</font><font color="#E5E5E5"> tool of</font>

46
00:02:00,230 --> 00:02:05,420
techniques<font color="#E5E5E5"> and many problems we can just</font>

47
00:02:02,810 --> 00:02:08,869
solve<font color="#E5E5E5"> very fast</font><font color="#CCCCCC"> so we've</font><font color="#E5E5E5"> developed a ton</font>

48
00:02:05,420 --> 00:02:11,269
of<font color="#E5E5E5"> different tools they have a wonderful</font>

49
00:02:08,869 --> 00:02:13,159
<font color="#E5E5E5">toolbox and we can just</font><font color="#CCCCCC"> use it you give</font>

50
00:02:11,269 --> 00:02:14,689
me some problem<font color="#CCCCCC"> that you want</font><font color="#E5E5E5"> to solve</font>

51
00:02:13,159 --> 00:02:16,219
I'm<font color="#E5E5E5"> gonna try to throw all these</font>

52
00:02:14,689 --> 00:02:18,920
techniques<font color="#CCCCCC"> at it and I'll come up with</font>

53
00:02:16,219 --> 00:02:23,829
<font color="#CCCCCC">some algorithm</font><font color="#E5E5E5"> yeah and</font>

54
00:02:18,920 --> 00:02:26,839
so on<font color="#CCCCCC"> no</font><font color="#E5E5E5"> unfortunately</font><font color="#CCCCCC"> there's also this</font>

55
00:02:23,830 --> 00:02:29,810
big algorithm called exhaustive search

56
00:02:26,840 --> 00:02:32,390
<font color="#E5E5E5">this is the first thing you try now in</font>

57
00:02:29,810 --> 00:02:36,080
for<font color="#E5E5E5"> most thorough problems in NP for</font>

58
00:02:32,390 --> 00:02:39,200
example you have a natural<font color="#E5E5E5"> notion of a</font>

59
00:02:36,080 --> 00:02:41,540
verifier<font color="#CCCCCC"> well that is when you when</font>

60
00:02:39,200 --> 00:02:43,760
<font color="#E5E5E5">you'd have you have a solution to the</font>

61
00:02:41,540 --> 00:02:45,709
problem the<font color="#CCCCCC"> verifier checks</font><font color="#E5E5E5"> it right so</font>

62
00:02:43,760 --> 00:02:48,560
this<font color="#E5E5E5"> defines</font><font color="#CCCCCC"> a notion of a search space</font>

63
00:02:45,709 --> 00:02:50,090
and there is this algorithm the

64
00:02:48,560 --> 00:02:52,250
<font color="#E5E5E5">exhaustive search algorithm</font><font color="#CCCCCC"> to just</font>

65
00:02:50,090 --> 00:02:56,239
brute forces over the<font color="#E5E5E5"> search space</font><font color="#CCCCCC"> and</font>

66
00:02:52,250 --> 00:02:59,000
this<font color="#E5E5E5"> is and</font><font color="#CCCCCC"> unfortunately for many</font>

67
00:02:56,239 --> 00:03:00,650
<font color="#E5E5E5">problems this is</font><font color="#CCCCCC"> the only way we know</font>

68
00:02:59,000 --> 00:03:03,739
<font color="#CCCCCC">how</font><font color="#E5E5E5"> to solve them there's no</font>

69
00:03:00,650 --> 00:03:06,830
significantly faster algorithm and the

70
00:03:03,739 --> 00:03:09,650
even in the 50s for<font color="#E5E5E5"> girdle wrote a</font>

71
00:03:06,830 --> 00:03:11,900
letter<font color="#E5E5E5"> to fajn diamond and he asked can</font>

72
00:03:09,650 --> 00:03:13,489
<font color="#CCCCCC">we improve over exhaustive search in</font>

73
00:03:11,900 --> 00:03:15,230
<font color="#CCCCCC">general for the problems we care about</font>

74
00:03:13,489 --> 00:03:17,150
and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't have the answer to this</font>

75
00:03:15,230 --> 00:03:20,000
question<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is something</font><font color="#E5E5E5"> I really</font>

76
00:03:17,150 --> 00:03:25,790
<font color="#E5E5E5">care about and</font><font color="#CCCCCC"> this is what this talk is</font>

77
00:03:20,000 --> 00:03:27,709
about<font color="#E5E5E5"> partially</font><font color="#CCCCCC"> ok so as</font><font color="#E5E5E5"> I said</font><font color="#CCCCCC"> for many</font>

78
00:03:25,790 --> 00:03:29,690
fundamental problems we<font color="#CCCCCC"> just don't have</font>

79
00:03:27,709 --> 00:03:31,579
<font color="#E5E5E5">a very fast algorithm not even anything</font>

80
00:03:29,690 --> 00:03:35,720
that improves upon<font color="#E5E5E5"> the</font><font color="#CCCCCC"> brute-force</font>

81
00:03:31,579 --> 00:03:39,140
<font color="#E5E5E5">algorithm</font><font color="#CCCCCC"> the exhaustive search okay so</font>

82
00:03:35,720 --> 00:03:41,450
I will<font color="#E5E5E5"> try to hand wave a definition of</font>

83
00:03:39,140 --> 00:03:44,260
<font color="#CCCCCC">what I think is a hard problem</font><font color="#E5E5E5"> and then</font>

84
00:03:41,450 --> 00:03:46,429
I'll narrow it down a little<font color="#E5E5E5"> bit so</font>

85
00:03:44,260 --> 00:03:49,280
roughly<font color="#CCCCCC"> a hard problem is a problem</font>

86
00:03:46,430 --> 00:03:53,299
<font color="#CCCCCC">where our techniques get stuck we just</font>

87
00:03:49,280 --> 00:03:54,620
can't solve it<font color="#CCCCCC"> very fast</font><font color="#E5E5E5"> and what are</font>

88
00:03:53,299 --> 00:03:56,299
these problems<font color="#E5E5E5"> they're problems that</font>

89
00:03:54,620 --> 00:04:00,410
come<font color="#E5E5E5"> from all over the place they come</font>

90
00:03:56,299 --> 00:04:03,069
<font color="#E5E5E5">from very diverse areas and they have</font><font color="#CCCCCC"> a</font>

91
00:04:00,410 --> 00:04:05,120
very<font color="#E5E5E5"> simple often exhaustive search</font>

92
00:04:03,069 --> 00:04:07,458
<font color="#E5E5E5">textbook algorithm what do I</font><font color="#CCCCCC"> mean by</font>

93
00:04:05,120 --> 00:04:08,510
this<font color="#E5E5E5"> somebody gives you the problem you</font>

94
00:04:07,459 --> 00:04:10,250
throw<font color="#E5E5E5"> their known</font>

95
00:04:08,510 --> 00:04:12,290
tools at it and you come<font color="#CCCCCC"> up with a</font><font color="#E5E5E5"> very</font>

96
00:04:10,250 --> 00:04:14,000
simple<font color="#E5E5E5"> looking algorithm but usually</font>

97
00:04:12,290 --> 00:04:15,260
just exhaustive search sometimes maybe

98
00:04:14,000 --> 00:04:18,889
like breadth-first search or whatever

99
00:04:15,260 --> 00:04:20,630
<font color="#E5E5E5">but it's very simple and if you had seen</font>

100
00:04:18,889 --> 00:04:22,150
<font color="#E5E5E5">it in the 50s and 60s you would have</font>

101
00:04:20,630 --> 00:04:25,430
come up<font color="#CCCCCC"> with the same algorithm</font>

102
00:04:22,150 --> 00:04:27,739
<font color="#E5E5E5">unfortunately for many many decades</font>

103
00:04:25,430 --> 00:04:31,070
nobody improved on this run time

104
00:04:27,740 --> 00:04:33,260
significantly<font color="#CCCCCC"> so this is what I mean</font>

105
00:04:31,070 --> 00:04:35,780
my<font color="#E5E5E5"> heart so it's very easy</font><font color="#CCCCCC"> to come up</font>

106
00:04:33,260 --> 00:04:38,080
<font color="#E5E5E5">with some solution yet improving upon</font>

107
00:04:35,780 --> 00:04:41,059
<font color="#CCCCCC">this solution</font><font color="#E5E5E5"> seems kind of difficult</font>

108
00:04:38,080 --> 00:04:43,580
<font color="#CCCCCC">all right</font><font color="#E5E5E5"> so let</font><font color="#CCCCCC"> me give you some</font>

109
00:04:41,060 --> 00:04:46,520
examples<font color="#CCCCCC"> just so so</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can see what's</font>

110
00:04:43,580 --> 00:04:48,890
<font color="#CCCCCC">going on</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> here is a canonical heart</font>

111
00:04:46,520 --> 00:04:51,320
problem in computer<font color="#CCCCCC"> science</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the</font>

112
00:04:48,890 --> 00:04:53,539
satisfiability problem you're<font color="#E5E5E5"> given and</font>

113
00:04:51,320 --> 00:04:55,190
boolean variables you're given<font color="#CCCCCC"> a</font><font color="#E5E5E5"> formula</font>

114
00:04:53,540 --> 00:04:57,470
in conjunctive normal form so you a

115
00:04:55,190 --> 00:04:59,000
bunch<font color="#E5E5E5"> of clauses and you want to know if</font>

116
00:04:57,470 --> 00:05:03,580
there's a boolean assignment to the

117
00:04:59,000 --> 00:05:06,440
variables<font color="#CCCCCC"> that satisfies the formula</font><font color="#E5E5E5"> now</font>

118
00:05:03,580 --> 00:05:08,330
what's the exhaustive search solution so

119
00:05:06,440 --> 00:05:10,190
the very far<font color="#CCCCCC"> just checks are given</font>

120
00:05:08,330 --> 00:05:12,740
boolean assignments<font color="#CCCCCC"> or the exhaustive</font>

121
00:05:10,190 --> 00:05:15,110
search solution is to try<font color="#E5E5E5"> all possible</font>

122
00:05:12,740 --> 00:05:16,640
boolean assignments to the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> variables</font>

123
00:05:15,110 --> 00:05:19,100
and there's<font color="#E5E5E5"> two to the end of them and</font>

124
00:05:16,640 --> 00:05:20,990
then then after you try them you plug

125
00:05:19,100 --> 00:05:23,450
them into the formula and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> get a</font><font color="#CCCCCC"> two</font>

126
00:05:20,990 --> 00:05:25,850
to the<font color="#CCCCCC"> N times MN algorithm all</font><font color="#E5E5E5"> right</font>

127
00:05:23,450 --> 00:05:29,510
<font color="#E5E5E5">now what are</font><font color="#CCCCCC"> the best known algorithms</font>

128
00:05:25,850 --> 00:05:31,520
<font color="#E5E5E5">well</font><font color="#CCCCCC"> see here</font><font color="#E5E5E5"> K is the width of the</font>

129
00:05:29,510 --> 00:05:33,500
clause how many literals you have in the

130
00:05:31,520 --> 00:05:36,020
clause and the best known algorithms

131
00:05:33,500 --> 00:05:38,360
<font color="#E5E5E5">shave a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit over this</font><font color="#CCCCCC"> 2 to the</font><font color="#E5E5E5"> N</font>

132
00:05:36,020 --> 00:05:41,240
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> 2 to the N minus some constant</font>

133
00:05:38,360 --> 00:05:43,880
times n over<font color="#CCCCCC"> K</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> a polynomial</font><font color="#E5E5E5"> in</font>

134
00:05:41,240 --> 00:05:46,550
<font color="#E5E5E5">the number of clauses</font><font color="#CCCCCC"> now unfortunately</font>

135
00:05:43,880 --> 00:05:50,030
<font color="#E5E5E5">you know as the length of the clauses</font>

136
00:05:46,550 --> 00:05:53,000
<font color="#E5E5E5">grows this runtime actually goes to the</font>

137
00:05:50,030 --> 00:05:54,530
<font color="#CCCCCC">to 2dn runtime so even though we've</font>

138
00:05:53,000 --> 00:05:58,010
worked really really hard to improve

139
00:05:54,530 --> 00:06:00,049
<font color="#E5E5E5">this running time for many values</font><font color="#CCCCCC"> of K</font>

140
00:05:58,010 --> 00:06:02,420
for<font color="#CCCCCC"> each value</font><font color="#E5E5E5"> of K we have</font><font color="#CCCCCC"> a different</font>

141
00:06:00,050 --> 00:06:04,880
you know<font color="#E5E5E5"> running time but as K grows to</font>

142
00:06:02,420 --> 00:06:06,860
TD n is where we're<font color="#E5E5E5"> at and we could have</font>

143
00:06:04,880 --> 00:06:14,090
<font color="#E5E5E5">just done</font><font color="#CCCCCC"> that by doing</font><font color="#E5E5E5"> the exhaustive</font>

144
00:06:06,860 --> 00:06:17,480
search<font color="#E5E5E5"> so sad CNF set I consider it hard</font>

145
00:06:14,090 --> 00:06:19,280
because<font color="#E5E5E5"> there's no known</font><font color="#CCCCCC"> 2 to the n to</font>

146
00:06:17,480 --> 00:06:22,520
the 1 minus<font color="#CCCCCC"> epsilon</font><font color="#E5E5E5"> time algorithm for</font>

147
00:06:19,280 --> 00:06:24,349
<font color="#CCCCCC">any epsilon greater</font><font color="#E5E5E5"> than 0</font><font color="#CCCCCC"> where 2 to</font>

148
00:06:22,520 --> 00:06:29,960
the N is<font color="#CCCCCC"> the exhaustive search</font><font color="#E5E5E5"> runtime</font>

149
00:06:24,350 --> 00:06:32,570
<font color="#E5E5E5">ok</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> now here's another example of what</font>

150
00:06:29,960 --> 00:06:35,270
I<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> a different problem</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> time</font>

151
00:06:32,570 --> 00:06:37,370
<font color="#CCCCCC">it's a problem in polynomial</font><font color="#E5E5E5"> time so</font>

152
00:06:35,270 --> 00:06:40,219
this<font color="#CCCCCC"> is the longest common</font><font color="#E5E5E5"> subsequence</font>

153
00:06:37,370 --> 00:06:40,910
problem you may have seen it or<font color="#CCCCCC"> tated</font>

154
00:06:40,220 --> 00:06:45,040
and<font color="#CCCCCC"> our</font>

155
00:06:40,910 --> 00:06:47,300
courses<font color="#E5E5E5"> so you're given two</font><font color="#CCCCCC"> sequences of</font>

156
00:06:45,040 --> 00:06:50,000
<font color="#E5E5E5">letters the</font><font color="#CCCCCC"> letters</font><font color="#E5E5E5"> come from some</font>

157
00:06:47,300 --> 00:06:53,120
finite alphabet for example<font color="#CCCCCC"> AC T</font><font color="#E5E5E5"> and G</font>

158
00:06:50,000 --> 00:06:56,420
and roughly you want to know how similar

159
00:06:53,120 --> 00:07:00,050
these sequences<font color="#E5E5E5"> and one notion of</font>

160
00:06:56,420 --> 00:07:01,640
similarity is what is the<font color="#CCCCCC"> subs longest</font>

161
00:07:00,050 --> 00:07:04,040
subsequence of both of them<font color="#E5E5E5"> a</font>

162
00:07:01,640 --> 00:07:06,469
subsequence is a sequence<font color="#E5E5E5"> of letters</font>

163
00:07:04,040 --> 00:07:08,750
<font color="#CCCCCC">that</font><font color="#E5E5E5"> appears in the same order in both</font>

164
00:07:06,470 --> 00:07:10,280
sequences<font color="#E5E5E5"> in other words you can</font><font color="#CCCCCC"> think</font>

165
00:07:08,750 --> 00:07:12,260
of<font color="#E5E5E5"> it as kind of an alignment problem</font>

166
00:07:10,280 --> 00:07:13,880
<font color="#CCCCCC">you place the letters on top of each</font>

167
00:07:12,260 --> 00:07:15,920
other<font color="#CCCCCC"> you introduce some gaps</font>

168
00:07:13,880 --> 00:07:18,650
potentially and you<font color="#E5E5E5"> cannot how many</font>

169
00:07:15,920 --> 00:07:21,230
<font color="#E5E5E5">matches you get so the blue sequence is</font>

170
00:07:18,650 --> 00:07:23,239
<font color="#CCCCCC">the longest</font><font color="#E5E5E5"> common subsequence here</font><font color="#CCCCCC"> in</font>

171
00:07:21,230 --> 00:07:25,310
<font color="#E5E5E5">this problem because it's a sequence</font>

172
00:07:23,240 --> 00:07:28,550
similarity problem pops up all over<font color="#E5E5E5"> the</font>

173
00:07:25,310 --> 00:07:30,290
<font color="#CCCCCC">place</font><font color="#E5E5E5"> you can think of biology</font>

174
00:07:28,550 --> 00:07:32,150
<font color="#CCCCCC">applications for example someone gives</font>

175
00:07:30,290 --> 00:07:34,520
you two DNA sequences you want to know

176
00:07:32,150 --> 00:07:36,440
are they close<font color="#CCCCCC"> to each other</font><font color="#E5E5E5"> somebody</font>

177
00:07:34,520 --> 00:07:38,419
writes down<font color="#CCCCCC"> a</font><font color="#E5E5E5"> sentence introduces a</font>

178
00:07:36,440 --> 00:07:40,490
bunch of spelling<font color="#CCCCCC"> mistakes and you want</font>

179
00:07:38,420 --> 00:07:43,870
to know what is the<font color="#E5E5E5"> true sentence and so</font>

180
00:07:40,490 --> 00:07:47,210
on so there<font color="#CCCCCC"> are lots of examples now</font>

181
00:07:43,870 --> 00:07:49,730
<font color="#E5E5E5">it's a very</font><font color="#CCCCCC"> simple</font><font color="#E5E5E5"> problem</font><font color="#CCCCCC"> there's a</font>

182
00:07:47,210 --> 00:07:51,710
<font color="#E5E5E5">textbook quadratic time algorithm and</font><font color="#CCCCCC"> is</font>

183
00:07:49,730 --> 00:07:53,690
the length of<font color="#E5E5E5"> the sequences and you can</font>

184
00:07:51,710 --> 00:07:56,810
just run dynamic program and you get<font color="#CCCCCC"> N</font>

185
00:07:53,690 --> 00:07:59,270
squared<font color="#E5E5E5"> now if if you work really really</font>

186
00:07:56,810 --> 00:08:02,510
hard<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> a slight improvement of N</font>

187
00:07:59,270 --> 00:08:06,289
squared<font color="#CCCCCC"> to the / log squared of n which</font>

188
00:08:02,510 --> 00:08:08,180
is very small unfortunately neither<font color="#E5E5E5"> of</font>

189
00:08:06,290 --> 00:08:11,420
these algorithms are<font color="#CCCCCC"> particularly fast</font>

190
00:08:08,180 --> 00:08:13,780
if n is huge and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> remember we want a</font>

191
00:08:11,420 --> 00:08:17,390
much faster algorithm like<font color="#E5E5E5"> linear time</font>

192
00:08:13,780 --> 00:08:19,669
but again I consider this problem hard

193
00:08:17,390 --> 00:08:20,270
because<font color="#E5E5E5"> N squared was very easy to</font>

194
00:08:19,670 --> 00:08:22,100
achieve

195
00:08:20,270 --> 00:08:24,409
you<font color="#E5E5E5"> had</font><font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> better than N squared to</font>

196
00:08:22,100 --> 00:08:29,330
<font color="#E5E5E5">the 1 minus epsilon is</font><font color="#CCCCCC"> not for any</font>

197
00:08:24,410 --> 00:08:32,180
epsilon bigger than<font color="#E5E5E5"> 0 okay and</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

198
00:08:29,330 --> 00:08:34,760
<font color="#E5E5E5">so now I can redefine what I mean by</font>

199
00:08:32,179 --> 00:08:37,130
hard what do I mean<font color="#E5E5E5"> by hard you have</font>

200
00:08:34,760 --> 00:08:39,349
these very important problems they have

201
00:08:37,130 --> 00:08:41,270
some simple algorithms<font color="#CCCCCC"> you'd analyze</font>

202
00:08:39,349 --> 00:08:44,210
<font color="#E5E5E5">them and get some function T</font><font color="#CCCCCC"> of n that's</font>

203
00:08:41,270 --> 00:08:46,670
much bigger than<font color="#CCCCCC"> linear and there's</font>

204
00:08:44,210 --> 00:08:51,550
nothing<font color="#E5E5E5"> better than T of</font><font color="#CCCCCC"> n</font><font color="#E5E5E5"> in the</font>

205
00:08:46,670 --> 00:08:55,449
exponent known from in<font color="#E5E5E5"> many decades</font><font color="#CCCCCC"> ok</font>

206
00:08:51,550 --> 00:08:58,120
and there's a lot<font color="#E5E5E5"> of these problems</font><font color="#CCCCCC"> you</font>

207
00:08:55,450 --> 00:09:00,220
can just come up<font color="#CCCCCC"> with an example you and</font>

208
00:08:58,120 --> 00:09:04,690
it's<font color="#E5E5E5"> very easy</font><font color="#CCCCCC"> to come up with them and</font>

209
00:09:00,220 --> 00:09:08,830
I want to know why<font color="#CCCCCC"> are</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> stuck</font><font color="#E5E5E5"> okay</font>

210
00:09:04,690 --> 00:09:11,640
are we<font color="#CCCCCC"> is it because like</font><font color="#E5E5E5"> really these</font>

211
00:09:08,830 --> 00:09:15,610
problems are intrinsically hard or

212
00:09:11,640 --> 00:09:17,890
because we<font color="#E5E5E5"> just lack</font><font color="#CCCCCC"> the techniques</font><font color="#E5E5E5"> also</font>

213
00:09:15,610 --> 00:09:21,250
more importantly are they are we stuck

214
00:09:17,890 --> 00:09:22,930
for the<font color="#E5E5E5"> same reason</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> if we were stuck</font>

215
00:09:21,250 --> 00:09:25,180
<font color="#CCCCCC">for all these two problems for the same</font>

216
00:09:22,930 --> 00:09:27,370
reason maybe the<font color="#E5E5E5"> reason is that there's</font>

217
00:09:25,180 --> 00:09:29,829
<font color="#CCCCCC">just</font><font color="#E5E5E5"> one algorithm out there somebody's</font>

218
00:09:27,370 --> 00:09:32,830
gonna hand it<font color="#CCCCCC"> to me and I solve all the</font>

219
00:09:29,830 --> 00:09:36,190
problems that<font color="#E5E5E5"> I ever need to solve okay</font>

220
00:09:32,830 --> 00:09:38,140
can I show this<font color="#E5E5E5"> and how</font><font color="#CCCCCC"> can I even</font>

221
00:09:36,190 --> 00:09:43,960
address<font color="#E5E5E5"> this so what this is what this</font>

222
00:09:38,140 --> 00:09:46,780
talk is talk is about so what I'll do

223
00:09:43,960 --> 00:09:49,540
now<font color="#E5E5E5"> I'll show you two approaches in</font>

224
00:09:46,780 --> 00:09:51,579
complexity<font color="#E5E5E5"> I'll tell you why they don't</font>

225
00:09:49,540 --> 00:10:00,280
quite work and then we'll modify one of

226
00:09:51,580 --> 00:10:03,490
<font color="#CCCCCC">them to</font><font color="#E5E5E5"> make it kind of work so as you</font>

227
00:10:00,280 --> 00:10:05,560
probably know for<font color="#E5E5E5"> almost any model of</font>

228
00:10:03,490 --> 00:10:07,390
computation that<font color="#CCCCCC"> you pick Turing machine</font>

229
00:10:05,560 --> 00:10:09,849
<font color="#CCCCCC">random asses access machine and so on</font>

230
00:10:07,390 --> 00:10:14,500
<font color="#E5E5E5">you can prove these theorems for example</font>

231
00:10:09,850 --> 00:10:16,540
<font color="#CCCCCC">you can show that for</font><font color="#E5E5E5"> any see</font><font color="#CCCCCC"> there</font>

232
00:10:14,500 --> 00:10:18,550
problems in n to the C<font color="#E5E5E5"> term that are</font><font color="#CCCCCC"> not</font>

233
00:10:16,540 --> 00:10:20,860
in like<font color="#E5E5E5"> n to the C minus epsilon time</font>

234
00:10:18,550 --> 00:10:23,319
<font color="#E5E5E5">and there is even tighter theorems known</font>

235
00:10:20,860 --> 00:10:26,740
than this and they're<font color="#E5E5E5"> just beautiful</font>

236
00:10:23,320 --> 00:10:29,560
<font color="#CCCCCC">however</font><font color="#E5E5E5"> if I give you my favorite</font>

237
00:10:26,740 --> 00:10:33,120
<font color="#E5E5E5">problem whatever</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> maybe it's</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I</font>

238
00:10:29,560 --> 00:10:35,469
can't<font color="#CCCCCC"> even show it is</font><font color="#E5E5E5"> not in linear time</font>

239
00:10:33,120 --> 00:10:37,240
<font color="#E5E5E5">just the lower bound techniques that we</font>

240
00:10:35,470 --> 00:10:39,070
have<font color="#CCCCCC"> in complexity</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> seems</font>

241
00:10:37,240 --> 00:10:40,780
insufficient to prove such things and

242
00:10:39,070 --> 00:10:43,420
<font color="#E5E5E5">now maybe</font><font color="#CCCCCC"> satis in linear time who knows</font>

243
00:10:40,780 --> 00:10:47,829
<font color="#CCCCCC">but we don't</font><font color="#E5E5E5"> think so yet we can now</font>

244
00:10:43,420 --> 00:10:50,290
prove it so so we have<font color="#CCCCCC"> to deal with</font><font color="#E5E5E5"> this</font>

245
00:10:47,830 --> 00:10:52,560
lack of<font color="#E5E5E5"> techniques so we have to do</font>

246
00:10:50,290 --> 00:10:55,270
<font color="#E5E5E5">something else</font>

247
00:10:52,560 --> 00:10:58,030
all right so then there's this other

248
00:10:55,270 --> 00:10:59,829
<font color="#CCCCCC">thing called NP completeness</font><font color="#E5E5E5"> that we now</font>

249
00:10:58,030 --> 00:11:03,250
all know and love

250
00:10:59,830 --> 00:11:05,020
I said why I think<font color="#CCCCCC"> Kay</font><font color="#E5E5E5"> said it's hard</font>

251
00:11:03,250 --> 00:11:06,760
but the reason why you guys

252
00:11:05,020 --> 00:11:09,600
we think<font color="#E5E5E5"> a side as hard is</font><font color="#CCCCCC"> because it's</font>

253
00:11:06,760 --> 00:11:13,330
<font color="#E5E5E5">np-hard not not because</font><font color="#CCCCCC"> of what I said</font>

254
00:11:09,600 --> 00:11:19,150
<font color="#CCCCCC">and people</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> believe P is not</font><font color="#E5E5E5"> equal</font>

255
00:11:13,330 --> 00:11:20,740
<font color="#CCCCCC">to NP</font><font color="#E5E5E5"> for various reasons</font><font color="#CCCCCC"> and so because</font>

256
00:11:19,150 --> 00:11:23,530
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> steer in the case that is</font><font color="#CCCCCC"> np-hard</font>

257
00:11:20,740 --> 00:11:25,210
for all K<font color="#E5E5E5"> greater than equal</font><font color="#CCCCCC"> to 3 and we</font>

258
00:11:23,530 --> 00:11:28,319
because we really believe<font color="#E5E5E5"> the P is not</font>

259
00:11:25,210 --> 00:11:30,790
<font color="#CCCCCC">equal to</font><font color="#E5E5E5"> NP</font><font color="#CCCCCC"> it must be that case</font><font color="#E5E5E5"> that</font>

260
00:11:28,320 --> 00:11:33,640
cannot have a polynomial<font color="#E5E5E5"> time algorithm</font>

261
00:11:30,790 --> 00:11:37,300
<font color="#E5E5E5">otherwise people would be</font><font color="#CCCCCC"> ok ok so it's</font>

262
00:11:33,640 --> 00:11:38,770
a this<font color="#CCCCCC"> what we</font><font color="#E5E5E5"> have here is the reason</font>

263
00:11:37,300 --> 00:11:42,579
why it's hard<font color="#E5E5E5"> is</font><font color="#CCCCCC"> because of this</font>

264
00:11:38,770 --> 00:11:44,560
<font color="#CCCCCC">condition that we really believe and and</font>

265
00:11:42,580 --> 00:11:46,900
the reason<font color="#CCCCCC"> why we believe</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> because</font>

266
00:11:44,560 --> 00:11:50,109
if you read<font color="#E5E5E5"> cooks paper he said it's</font>

267
00:11:46,900 --> 00:11:52,240
just<font color="#E5E5E5"> we can't</font><font color="#CCCCCC"> possibly think that</font><font color="#E5E5E5"> we can</font>

268
00:11:50,110 --> 00:11:54,010
solve all these wonderful problems in NP

269
00:11:52,240 --> 00:11:55,840
<font color="#CCCCCC">and in polynomial</font><font color="#E5E5E5"> time it's just</font>

270
00:11:54,010 --> 00:11:57,850
<font color="#CCCCCC">impossible yet if you could do this with</font>

271
00:11:55,840 --> 00:12:01,330
<font color="#E5E5E5">said now they would all be</font><font color="#CCCCCC"> in polynomial</font>

272
00:11:57,850 --> 00:12:04,840
time<font color="#CCCCCC"> therefore I think it's hard so this</font>

273
00:12:01,330 --> 00:12:06,670
is why so what<font color="#E5E5E5"> we want to do is is</font><font color="#CCCCCC"> have</font>

274
00:12:04,840 --> 00:12:09,580
something<font color="#E5E5E5"> like this for</font><font color="#CCCCCC"> the problems</font>

275
00:12:06,670 --> 00:12:12,579
that we care about<font color="#E5E5E5"> right we want to say</font>

276
00:12:09,580 --> 00:12:15,190
that the reason<font color="#CCCCCC"> why I think longest</font>

277
00:12:12,580 --> 00:12:17,020
common subsequence is<font color="#E5E5E5"> hard is because</font>

278
00:12:15,190 --> 00:12:19,090
well if it weren't<font color="#E5E5E5"> hard if I had a</font>

279
00:12:17,020 --> 00:12:20,920
faster than<font color="#E5E5E5"> quadratic time algorithm</font>

280
00:12:19,090 --> 00:12:22,900
<font color="#E5E5E5">then I could solve all these other</font>

281
00:12:20,920 --> 00:12:23,380
<font color="#CCCCCC">problems and I I don't</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can do</font>

282
00:12:22,900 --> 00:12:25,990
<font color="#E5E5E5">that</font>

283
00:12:23,380 --> 00:12:30,030
and so on so<font color="#E5E5E5"> we want something</font><font color="#CCCCCC"> like this</font>

284
00:12:25,990 --> 00:12:35,350
now can we use NP hardness to do this

285
00:12:30,030 --> 00:12:37,209
no<font color="#E5E5E5"> because well you can't you can't have</font>

286
00:12:35,350 --> 00:12:38,950
<font color="#CCCCCC">a</font><font color="#E5E5E5"> problem that already has a polynomial</font>

287
00:12:37,210 --> 00:12:40,930
time algorithm be<font color="#E5E5E5"> np-hard because</font>

288
00:12:38,950 --> 00:12:43,230
<font color="#E5E5E5">otherwise because</font><font color="#CCCCCC"> would P would</font><font color="#E5E5E5"> be equal</font>

289
00:12:40,930 --> 00:12:45,370
to<font color="#E5E5E5"> NP</font><font color="#CCCCCC"> so we cannot</font><font color="#E5E5E5"> use this particular</font>

290
00:12:43,230 --> 00:12:51,730
hardness<font color="#CCCCCC"> but would do</font><font color="#E5E5E5"> something like</font>

291
00:12:45,370 --> 00:12:54,910
<font color="#CCCCCC">this okay so let's just revisit very</font>

292
00:12:51,730 --> 00:12:57,820
simplistically what NP hardness means so

293
00:12:54,910 --> 00:12:59,500
NP hardness just you know starts by

294
00:12:57,820 --> 00:13:01,480
assuming a particular hardness

295
00:12:59,500 --> 00:13:05,770
hypothesis<font color="#E5E5E5"> let's say P</font><font color="#CCCCCC"> is not equal to</font>

296
00:13:01,480 --> 00:13:07,870
NP then you use reductions to<font color="#E5E5E5"> show that</font>

297
00:13:05,770 --> 00:13:10,480
if your problem cute that you<font color="#CCCCCC"> think it's</font>

298
00:13:07,870 --> 00:13:12,010
hard<font color="#E5E5E5"> had a fast algorithm</font><font color="#CCCCCC"> a polynomial</font>

299
00:13:10,480 --> 00:13:15,460
time algorithm<font color="#E5E5E5"> that P wouldn't be</font><font color="#CCCCCC"> n</font>

300
00:13:12,010 --> 00:13:18,010
equal<font color="#E5E5E5"> to NP and therefore we we say that</font>

301
00:13:15,460 --> 00:13:20,280
this Q cannot have<font color="#E5E5E5"> for Pournami</font>

302
00:13:18,010 --> 00:13:23,670
it must require<font color="#E5E5E5"> a super polynomial time</font>

303
00:13:20,280 --> 00:13:26,740
<font color="#E5E5E5">this is what the three steps are and</font>

304
00:13:23,670 --> 00:13:31,000
<font color="#E5E5E5">we'll we want to mimic these steps in</font>

305
00:13:26,740 --> 00:13:33,760
our approach<font color="#E5E5E5"> okay so this is what I</font>

306
00:13:31,000 --> 00:13:36,160
<font color="#CCCCCC">already said we if we use these three</font>

307
00:13:33,760 --> 00:13:38,200
steps we cannot show that problems in<font color="#CCCCCC"> an</font>

308
00:13:36,160 --> 00:13:45,339
in quadratic time are hard for<font color="#CCCCCC"> this</font>

309
00:13:38,200 --> 00:13:49,450
approach<font color="#E5E5E5"> so it will</font><font color="#CCCCCC"> change it alright so</font>

310
00:13:45,340 --> 00:13:52,180
<font color="#CCCCCC">let me take a step back and say why do</font>

311
00:13:49,450 --> 00:13:54,220
you even<font color="#E5E5E5"> care about polynomial</font><font color="#CCCCCC"> vs. non</font>

312
00:13:52,180 --> 00:13:55,959
polynomial<font color="#CCCCCC"> in the first place</font><font color="#E5E5E5"> is it</font>

313
00:13:54,220 --> 00:13:59,230
<font color="#E5E5E5">because we thought polynomial is</font>

314
00:13:55,960 --> 00:14:00,910
efficient<font color="#E5E5E5"> no and</font><font color="#CCCCCC"> so the 100 is</font><font color="#E5E5E5"> not</font>

315
00:13:59,230 --> 00:14:03,520
efficient neither is N squared<font color="#CCCCCC"> in</font>

316
00:14:00,910 --> 00:14:05,800
practice if the<font color="#E5E5E5"> N is really large so the</font>

317
00:14:03,520 --> 00:14:08,800
reason why is for other technical

318
00:14:05,800 --> 00:14:10,569
reasons<font color="#E5E5E5"> for example remember</font><font color="#CCCCCC"> I said</font><font color="#E5E5E5"> that</font>

319
00:14:08,800 --> 00:14:13,390
when we analyze algorithms we<font color="#CCCCCC"> have to</font>

320
00:14:10,570 --> 00:14:15,910
fix the computational<font color="#CCCCCC"> model but if we</font>

321
00:14:13,390 --> 00:14:18,670
only<font color="#E5E5E5"> talk about polynomial</font><font color="#CCCCCC"> vs. part not</font>

322
00:14:15,910 --> 00:14:20,439
polynomial we<font color="#E5E5E5"> can afford modeled</font>

323
00:14:18,670 --> 00:14:22,599
independence<font color="#E5E5E5"> because there's theorems</font>

324
00:14:20,440 --> 00:14:24,280
that translate between computational

325
00:14:22,600 --> 00:14:26,890
models and they have told<font color="#E5E5E5"> on the</font>

326
00:14:24,280 --> 00:14:29,350
overhead and<font color="#CCCCCC"> because this</font><font color="#E5E5E5"> is one very</font>

327
00:14:26,890 --> 00:14:32,439
nice reason to think about polynomial

328
00:14:29,350 --> 00:14:34,060
versus not polynomial<font color="#E5E5E5"> but for me I fixed</font>

329
00:14:32,440 --> 00:14:38,200
the model so I don't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> care about</font>

330
00:14:34,060 --> 00:14:40,630
<font color="#E5E5E5">this</font><font color="#CCCCCC"> okay another reason</font><font color="#E5E5E5"> is because if I</font>

331
00:14:38,200 --> 00:14:43,000
define efficiency<font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of having a</font>

332
00:14:40,630 --> 00:14:45,189
polynomial time algorithm<font color="#CCCCCC"> then when I</font>

333
00:14:43,000 --> 00:14:47,230
compose an efficient algorithm with an

334
00:14:45,190 --> 00:14:48,880
efficient algorithm<font color="#CCCCCC"> I get an efficient</font>

335
00:14:47,230 --> 00:14:53,170
<font color="#E5E5E5">algorithm because polynomial of a</font>

336
00:14:48,880 --> 00:14:55,090
polynomial<font color="#CCCCCC"> is a polynomial</font><font color="#E5E5E5"> right but for</font>

337
00:14:53,170 --> 00:15:01,390
me maybe maybe efficiency is linear time

338
00:14:55,090 --> 00:15:03,130
and then I can't<font color="#E5E5E5"> use this okay so what</font>

339
00:15:01,390 --> 00:15:05,560
we'll<font color="#E5E5E5"> do</font><font color="#CCCCCC"> is I mentioned we'll develop</font>

340
00:15:03,130 --> 00:15:08,470
<font color="#E5E5E5">this more fine-grained notion of</font>

341
00:15:05,560 --> 00:15:10,660
<font color="#E5E5E5">hardness they will distinguish between</font>

342
00:15:08,470 --> 00:15:12,910
<font color="#E5E5E5">different polynomial times at different</font>

343
00:15:10,660 --> 00:15:15,250
<font color="#CCCCCC">times in general different</font><font color="#E5E5E5"> functions of</font>

344
00:15:12,910 --> 00:15:18,760
<font color="#E5E5E5">the running time of the input size and</font>

345
00:15:15,250 --> 00:15:20,320
then it<font color="#E5E5E5"> will be conditional because we</font>

346
00:15:18,760 --> 00:15:23,230
still<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the techniques to prove</font>

347
00:15:20,320 --> 00:15:27,430
unconditional lower bounds<font color="#CCCCCC"> and no kind</font>

348
00:15:23,230 --> 00:15:29,360
of mimic<font color="#CCCCCC"> NP hardness</font><font color="#E5E5E5"> all right so what</font>

349
00:15:27,430 --> 00:15:31,819
I'll do now<font color="#CCCCCC"> is our</font>

350
00:15:29,360 --> 00:15:34,279
give you the fine<font color="#CCCCCC"> grade approach that</font>

351
00:15:31,819 --> 00:15:36,579
we've developed<font color="#E5E5E5"> and the way I'll do it</font>

352
00:15:34,279 --> 00:15:37,759
<font color="#E5E5E5">is I'll go</font><font color="#CCCCCC"> through the</font><font color="#E5E5E5"> steps of</font>

353
00:15:36,579 --> 00:15:40,279
<font color="#E5E5E5">np-hardness</font>

354
00:15:37,759 --> 00:15:42,679
and give you the corresponding<font color="#E5E5E5"> steps</font>

355
00:15:40,279 --> 00:15:44,299
that we have in fine<font color="#E5E5E5"> grain hardness just</font>

356
00:15:42,679 --> 00:15:49,850
to see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is kind</font><font color="#E5E5E5"> of a direct</font>

357
00:15:44,299 --> 00:15:50,989
<font color="#E5E5E5">correspondence all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so here</font><font color="#CCCCCC"> just</font>

358
00:15:49,850 --> 00:15:53,059
like this

359
00:15:50,989 --> 00:15:56,480
cartoonish view of what<font color="#CCCCCC"> empty hardness</font>

360
00:15:53,059 --> 00:15:58,549
is you have an assumption<font color="#CCCCCC"> P not equal</font><font color="#E5E5E5"> to</font>

361
00:15:56,480 --> 00:16:01,009
NP<font color="#E5E5E5"> or equivalently sad doesn't have a</font>

362
00:15:58,549 --> 00:16:03,350
<font color="#CCCCCC">polynomial time algorithm then you have</font>

363
00:16:01,009 --> 00:16:05,600
this reduction<font color="#E5E5E5"> step which says if your</font>

364
00:16:03,350 --> 00:16:07,819
problem<font color="#E5E5E5"> Q had a polynomial time</font>

365
00:16:05,600 --> 00:16:10,759
algorithm<font color="#CCCCCC"> that's at would as</font><font color="#E5E5E5"> well and</font>

366
00:16:07,819 --> 00:16:13,549
then<font color="#E5E5E5"> you conclude with this conditional</font>

367
00:16:10,759 --> 00:16:15,889
hardness because<font color="#CCCCCC"> you believe step</font><font color="#E5E5E5"> one by</font>

368
00:16:13,549 --> 00:16:18,470
step two you must have the<font color="#CCCCCC"> Q</font><font color="#E5E5E5"> cannot have</font>

369
00:16:15,889 --> 00:16:22,249
a polynomial<font color="#E5E5E5"> time algorithm so here's</font>

370
00:16:18,470 --> 00:16:25,220
what we'll do instead we will have some

371
00:16:22,249 --> 00:16:27,410
other hardness hypotheses<font color="#E5E5E5"> okay there</font>

372
00:16:25,220 --> 00:16:29,839
won't be P not equal<font color="#E5E5E5"> to NP it will be</font>

373
00:16:27,410 --> 00:16:32,660
<font color="#CCCCCC">something</font><font color="#E5E5E5"> of the form</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> pick a problem</font><font color="#CCCCCC"> H</font>

374
00:16:29,839 --> 00:16:34,399
for<font color="#CCCCCC"> example set that I think is really</font>

375
00:16:32,660 --> 00:16:37,699
<font color="#E5E5E5">really hard because lots of</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> have</font>

376
00:16:34,399 --> 00:16:40,519
<font color="#E5E5E5">worked on it</font><font color="#CCCCCC"> okay and then I'll say</font>

377
00:16:37,699 --> 00:16:44,059
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> H of M be</font><font color="#CCCCCC"> the textbook or</font>

378
00:16:40,519 --> 00:16:46,160
exhaustive exhaustive search<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> for</font>

379
00:16:44,059 --> 00:16:49,879
this<font color="#E5E5E5"> problem and then I will assert</font><font color="#CCCCCC"> that</font>

380
00:16:46,160 --> 00:16:52,069
each requires roughly H of n<font color="#CCCCCC"> times</font><font color="#E5E5E5"> H of</font>

381
00:16:49,879 --> 00:16:55,100
n to the 1 minus<font color="#E5E5E5"> little of</font><font color="#CCCCCC"> 1 time on</font>

382
00:16:52,069 --> 00:16:59,748
inputs of size<font color="#E5E5E5"> n on let's say a</font><font color="#CCCCCC"> Ram</font><font color="#E5E5E5"> so I</font>

383
00:16:55,100 --> 00:17:03,169
fixed my machine model<font color="#E5E5E5"> then what I do is</font>

384
00:16:59,749 --> 00:17:07,220
I have a reduction<font color="#E5E5E5"> step when I want to</font>

385
00:17:03,169 --> 00:17:10,099
show the<font color="#CCCCCC"> queue is hard then I reduce</font>

386
00:17:07,220 --> 00:17:13,339
this problem H to<font color="#E5E5E5"> Q in such a way to</font>

387
00:17:10,099 --> 00:17:15,619
imply that if<font color="#E5E5E5"> Q had a faster than Q</font>

388
00:17:13,339 --> 00:17:18,438
event time<font color="#CCCCCC"> algorithm where Q of n is</font><font color="#E5E5E5"> the</font>

389
00:17:15,619 --> 00:17:20,869
natural<font color="#E5E5E5"> run time for</font><font color="#CCCCCC"> Q then I would get</font>

390
00:17:18,439 --> 00:17:22,970
a faster than H of n time algorithm for

391
00:17:20,869 --> 00:17:24,619
problem<font color="#E5E5E5"> H both of these algorithms are</font>

392
00:17:22,970 --> 00:17:28,010
running on the particular<font color="#E5E5E5"> model of</font>

393
00:17:24,619 --> 00:17:30,590
<font color="#E5E5E5">computation I picked and I finally</font><font color="#CCCCCC"> I get</font>

394
00:17:28,010 --> 00:17:32,950
my conclusion that under this hypothesis

395
00:17:30,590 --> 00:17:36,740
<font color="#E5E5E5">Q must required as much time on</font><font color="#CCCCCC"> the RAM</font>

396
00:17:32,950 --> 00:17:38,450
so these are the<font color="#E5E5E5"> three</font><font color="#CCCCCC"> steps</font><font color="#E5E5E5"> so it's not</font>

397
00:17:36,740 --> 00:17:39,830
very<font color="#E5E5E5"> well-defined right now because I</font>

398
00:17:38,450 --> 00:17:42,710
<font color="#CCCCCC">haven't</font><font color="#E5E5E5"> told you what these hardness</font>

399
00:17:39,830 --> 00:17:45,470
hypotheses are I<font color="#E5E5E5"> haven't told you what</font>

400
00:17:42,710 --> 00:17:47,240
reductions are and so<font color="#E5E5E5"> on so what I'll do</font>

401
00:17:45,470 --> 00:17:50,000
<font color="#CCCCCC">now is I'll go through these</font><font color="#E5E5E5"> steps one</font>

402
00:17:47,240 --> 00:17:52,760
by one<font color="#E5E5E5"> I'll tell you what hypotheses we</font>

403
00:17:50,000 --> 00:17:55,100
usually pick and then I'll define this

404
00:17:52,760 --> 00:17:57,170
<font color="#CCCCCC">fine-grain reduction formula and I'll</font>

405
00:17:55,100 --> 00:18:05,050
and then I'll give you some consequences

406
00:17:57,170 --> 00:18:09,230
things we know<font color="#CCCCCC"> about from from this so</font>

407
00:18:05,050 --> 00:18:11,659
as I mentioned before<font color="#CCCCCC"> sat we know it's a</font>

408
00:18:09,230 --> 00:18:13,940
<font color="#E5E5E5">really hard</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> but not</font><font color="#CCCCCC"> only is it</font>

409
00:18:11,660 --> 00:18:17,020
np-hard but people<font color="#E5E5E5"> think it's really</font>

410
00:18:13,940 --> 00:18:19,100
<font color="#E5E5E5">really hard and there's these two</font>

411
00:18:17,020 --> 00:18:21,800
hypotheses<font color="#E5E5E5"> that</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> been formulated</font>

412
00:18:19,100 --> 00:18:24,980
<font color="#CCCCCC">about that and one</font><font color="#E5E5E5"> of them is the</font>

413
00:18:21,800 --> 00:18:27,710
<font color="#E5E5E5">exponential time hypothesis it says that</font>

414
00:18:24,980 --> 00:18:30,230
there is no<font color="#CCCCCC"> such exponential time</font>

415
00:18:27,710 --> 00:18:33,380
algorithm for Saturday and equivalently

416
00:18:30,230 --> 00:18:35,270
there's no Delta<font color="#E5E5E5"> such</font><font color="#CCCCCC"> a three-set for</font>

417
00:18:33,380 --> 00:18:38,870
<font color="#E5E5E5">example cannot be solved in two to the</font>

418
00:18:35,270 --> 00:18:41,330
Delta n time there is another one which

419
00:18:38,870 --> 00:18:43,070
<font color="#CCCCCC">is truly stronger than this one it's</font>

420
00:18:41,330 --> 00:18:45,409
called<font color="#E5E5E5"> the</font><font color="#CCCCCC"> strong exponential time</font>

421
00:18:43,070 --> 00:18:48,200
hypothesis and if true<font color="#CCCCCC"> it would imply</font><font color="#E5E5E5"> a</font>

422
00:18:45,410 --> 00:18:51,290
th as well<font color="#E5E5E5"> so strong the strongest</font>

423
00:18:48,200 --> 00:18:56,030
<font color="#CCCCCC">potential tiny pulses are safe roughly</font>

424
00:18:51,290 --> 00:18:58,070
says that CNF sat on n variables in a

425
00:18:56,030 --> 00:19:01,420
<font color="#E5E5E5">linear number of clauses requires</font>

426
00:18:58,070 --> 00:19:03,679
roughly<font color="#E5E5E5"> 2</font><font color="#CCCCCC"> to the N time the original</font>

427
00:19:01,420 --> 00:19:06,380
<font color="#E5E5E5">formulation is something like this for</font>

428
00:19:03,680 --> 00:19:09,710
every epsilon there's some<font color="#E5E5E5"> clause with K</font>

429
00:19:06,380 --> 00:19:11,570
such that K set cannot be solved and<font color="#E5E5E5"> 2</font>

430
00:19:09,710 --> 00:19:14,480
to the<font color="#CCCCCC"> n to the 1 minus epsilon times</font>

431
00:19:11,570 --> 00:19:17,120
<font color="#CCCCCC">Pauline</font><font color="#E5E5E5"> the number of clauses</font><font color="#CCCCCC"> x so this</font>

432
00:19:14,480 --> 00:19:19,370
<font color="#E5E5E5">is some hypothesis</font><font color="#CCCCCC"> it just says this</font>

433
00:19:17,120 --> 00:19:21,350
brute force<font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> the n running time is</font>

434
00:19:19,370 --> 00:19:25,429
essentially optimal<font color="#E5E5E5"> that's all it says</font>

435
00:19:21,350 --> 00:19:27,639
and what<font color="#E5E5E5"> we'll do is we'll just use</font>

436
00:19:25,430 --> 00:19:32,210
these<font color="#E5E5E5"> hypotheses and see what follows</font>

437
00:19:27,640 --> 00:19:36,170
<font color="#CCCCCC">that's one</font><font color="#E5E5E5"> of the things you can do but</font>

438
00:19:32,210 --> 00:19:38,180
just<font color="#CCCCCC"> one thing you</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> remember what</font>

439
00:19:36,170 --> 00:19:41,630
<font color="#E5E5E5">we're assuming here</font><font color="#CCCCCC"> is much much much</font>

440
00:19:38,180 --> 00:19:44,510
stronger than<font color="#E5E5E5"> P not equal NP it's not</font>

441
00:19:41,630 --> 00:19:46,580
only<font color="#CCCCCC"> this</font><font color="#E5E5E5"> does that have no</font><font color="#CCCCCC"> Superpole no</font>

442
00:19:44,510 --> 00:19:48,050
it doesn't have a polynomial<font color="#E5E5E5"> time</font>

443
00:19:46,580 --> 00:19:51,560
algorithm but also it<font color="#E5E5E5"> doesn't have</font>

444
00:19:48,050 --> 00:19:52,809
better than<font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> GN</font><font color="#CCCCCC"> run time</font><font color="#E5E5E5"> so 2 to</font><font color="#CCCCCC"> the</font>

445
00:19:51,560 --> 00:19:58,269
N<font color="#E5E5E5"> and polynomial there</font>

446
00:19:52,809 --> 00:20:00,309
<font color="#CCCCCC">far apart yeah it's like it's very</font><font color="#E5E5E5"> very</font>

447
00:19:58,269 --> 00:20:02,440
<font color="#CCCCCC">super</font><font color="#E5E5E5"> strong yet somehow it is still</font>

448
00:20:00,309 --> 00:20:08,168
believable<font color="#E5E5E5"> it's still possible</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> two</font>

449
00:20:02,440 --> 00:20:09,759
to<font color="#E5E5E5"> the N is required</font><font color="#CCCCCC"> so let's see</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> I</font>

450
00:20:08,169 --> 00:20:12,129
<font color="#E5E5E5">just want to point out the nice thing</font>

451
00:20:09,759 --> 00:20:14,950
about these<font color="#E5E5E5"> reductions implications as</font>

452
00:20:12,129 --> 00:20:16,840
you all know is that<font color="#E5E5E5"> if I if I have some</font>

453
00:20:14,950 --> 00:20:18,639
implication<font color="#E5E5E5"> and somehow I get a better</font>

454
00:20:16,840 --> 00:20:22,620
algorithm I<font color="#CCCCCC"> would refute this</font><font color="#E5E5E5"> and this</font>

455
00:20:18,639 --> 00:20:26,799
<font color="#E5E5E5">is very meaningful anyway so okay so</font>

456
00:20:22,620 --> 00:20:31,360
<font color="#CCCCCC">besides these there's three</font><font color="#E5E5E5"> other</font>

457
00:20:26,799 --> 00:20:33,460
problems<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have worked on so it</font>

458
00:20:31,360 --> 00:20:35,740
<font color="#CCCCCC">doesn't exactly matter what they are</font><font color="#E5E5E5"> but</font>

459
00:20:33,460 --> 00:20:37,450
<font color="#E5E5E5">I would define them what's important is</font>

460
00:20:35,740 --> 00:20:39,639
that<font color="#E5E5E5"> a lot of different communities have</font>

461
00:20:37,450 --> 00:20:41,679
<font color="#E5E5E5">worked on them they're extremely simple</font>

462
00:20:39,639 --> 00:20:44,799
and the algorithms are<font color="#E5E5E5"> also extremely</font>

463
00:20:41,679 --> 00:20:47,289
simple<font color="#E5E5E5"> so here</font><font color="#CCCCCC"> this one here</font><font color="#E5E5E5"> the</font>

464
00:20:44,799 --> 00:20:51,908
<font color="#E5E5E5">threesome problem it's a problem which</font>

465
00:20:47,289 --> 00:20:54,460
is which is become at the heart of<font color="#E5E5E5"> many</font>

466
00:20:51,909 --> 00:20:58,269
research papers<font color="#CCCCCC"> in computational</font>

467
00:20:54,460 --> 00:21:00,580
<font color="#E5E5E5">geometry</font><font color="#CCCCCC"> so you're given</font><font color="#E5E5E5"> n numbers</font><font color="#CCCCCC"> let's</font>

468
00:20:58,269 --> 00:21:02,710
<font color="#E5E5E5">say they're integers</font><font color="#CCCCCC"> and all you want to</font>

469
00:21:00,580 --> 00:21:06,100
know if three<font color="#CCCCCC"> of the numbers sum to zero</font>

470
00:21:02,710 --> 00:21:08,710
<font color="#E5E5E5">and there's various</font><font color="#CCCCCC"> ways to solve this</font>

471
00:21:06,100 --> 00:21:11,080
problem<font color="#CCCCCC"> in N squared time N squared log</font>

472
00:21:08,710 --> 00:21:12,999
<font color="#E5E5E5">n is super easy</font><font color="#CCCCCC"> you just</font><font color="#E5E5E5"> try every pair</font>

473
00:21:11,080 --> 00:21:15,158
of<font color="#E5E5E5"> numbers and check if the negative of</font>

474
00:21:12,999 --> 00:21:17,799
their sum<font color="#CCCCCC"> is in the set and</font><font color="#E5E5E5"> the</font>

475
00:21:15,159 --> 00:21:22,029
hypothesis here is<font color="#E5E5E5"> that threesome</font>

476
00:21:17,799 --> 00:21:24,700
requires roughly N squared time there

477
00:21:22,029 --> 00:21:28,119
are<font color="#E5E5E5"> improved algorithms and squared over</font>

478
00:21:24,700 --> 00:21:29,889
log<font color="#CCCCCC"> squared of n however log squared</font><font color="#E5E5E5"> of</font>

479
00:21:28,119 --> 00:21:33,699
n is tiny and we don't have<font color="#E5E5E5"> an end to</font>

480
00:21:29,889 --> 00:21:35,019
the 1.999 time now<font color="#CCCCCC"> okay so this is</font>

481
00:21:33,700 --> 00:21:37,899
threesome there's another one called

482
00:21:35,019 --> 00:21:42,039
orthogonal<font color="#E5E5E5"> vectors problem which again</font>

483
00:21:37,899 --> 00:21:44,918
it's super<font color="#E5E5E5"> simple you're given n vectors</font>

484
00:21:42,039 --> 00:21:47,139
<font color="#E5E5E5">they're very short</font><font color="#CCCCCC"> they're dimension is</font>

485
00:21:44,919 --> 00:21:51,249
let's say a<font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> more than log</font><font color="#E5E5E5"> n</font>

486
00:21:47,139 --> 00:21:53,289
<font color="#E5E5E5">and you want to know if the two of these</font>

487
00:21:51,249 --> 00:21:57,779
vectors orthogonal<font color="#CCCCCC"> moreover these</font>

488
00:21:53,289 --> 00:22:01,750
vectors<font color="#E5E5E5"> their entries are either 0</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> 1</font>

489
00:21:57,779 --> 00:22:03,580
<font color="#CCCCCC">so and the brute force</font><font color="#E5E5E5"> algorithm just</font>

490
00:22:01,750 --> 00:22:05,860
tries every pair of<font color="#E5E5E5"> vectors computes the</font>

491
00:22:03,580 --> 00:22:07,020
inner product and checks you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> it's</font>

492
00:22:05,860 --> 00:22:09,689
<font color="#CCCCCC">one a one of the</font>

493
00:22:07,020 --> 00:22:13,650
<font color="#CCCCCC">Paris</font><font color="#E5E5E5"> or thousand or not this gives you</font>

494
00:22:09,690 --> 00:22:15,780
l squared times D now<font color="#CCCCCC"> their reason</font>

495
00:22:13,650 --> 00:22:17,370
improved algorithm<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a little bit</font>

496
00:22:15,780 --> 00:22:20,310
hard to<font color="#E5E5E5"> parse but basically it says that</font>

497
00:22:17,370 --> 00:22:22,169
<font color="#CCCCCC">if the</font><font color="#E5E5E5"> dimension is actually order log n</font>

498
00:22:20,310 --> 00:22:24,840
you get<font color="#E5E5E5"> a better than N squared</font>

499
00:22:22,170 --> 00:22:27,030
algorithm into<font color="#CCCCCC"> the 1.999 depending on</font>

500
00:22:24,840 --> 00:22:29,639
the constant in front<font color="#CCCCCC"> of the login but</font>

501
00:22:27,030 --> 00:22:32,240
once the dimension becomes bigger faster

502
00:22:29,640 --> 00:22:35,370
<font color="#E5E5E5">growing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> login this is no longer</font>

503
00:22:32,240 --> 00:22:37,110
<font color="#E5E5E5">truly faster than n squared and it</font>

504
00:22:35,370 --> 00:22:39,149
motivates this hypothesis<font color="#CCCCCC"> that</font>

505
00:22:37,110 --> 00:22:44,070
orthogonal vectors requires N squared

506
00:22:39,150 --> 00:22:48,000
time ization now<font color="#E5E5E5"> one thing to point out</font>

507
00:22:44,070 --> 00:22:49,889
<font color="#E5E5E5">is that Williams in 2005 showed that if</font>

508
00:22:48,000 --> 00:22:52,530
you<font color="#E5E5E5"> believe the strong exponential time</font>

509
00:22:49,890 --> 00:22:54,030
hypothesis for satisfiability<font color="#CCCCCC"> then you</font>

510
00:22:52,530 --> 00:22:57,030
should definitely believe this one

511
00:22:54,030 --> 00:22:59,160
because you can<font color="#CCCCCC"> actually reduce</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> to</font>

512
00:22:57,030 --> 00:23:01,410
<font color="#E5E5E5">orthogonal vectors so that if you have a</font>

513
00:22:59,160 --> 00:23:03,810
faster algorithm<font color="#E5E5E5"> faster than N squared</font>

514
00:23:01,410 --> 00:23:06,060
for set you get a faster than<font color="#CCCCCC"> 2 to DN</font>

515
00:23:03,810 --> 00:23:08,010
sorry faster<font color="#E5E5E5"> than</font><font color="#CCCCCC"> n squared for</font>

516
00:23:06,060 --> 00:23:11,429
orthogonal<font color="#E5E5E5"> vectors you get a faster than</font>

517
00:23:08,010 --> 00:23:13,530
2 to<font color="#E5E5E5"> the N</font><font color="#CCCCCC"> fro set so so this is a</font>

518
00:23:11,430 --> 00:23:16,440
<font color="#E5E5E5">really believable hypothesis here in</font>

519
00:23:13,530 --> 00:23:19,020
fact even if<font color="#E5E5E5"> sad had a faster than to</font>

520
00:23:16,440 --> 00:23:20,940
the end of the algorithm<font color="#CCCCCC"> this hypothesis</font>

521
00:23:19,020 --> 00:23:28,139
might still be true<font color="#E5E5E5"> so it could</font><font color="#CCCCCC"> actually</font>

522
00:23:20,940 --> 00:23:31,710
be<font color="#CCCCCC"> very believable</font><font color="#E5E5E5"> yeah I mean CNF set</font>

523
00:23:28,140 --> 00:23:35,310
with a linear<font color="#E5E5E5"> number of clauses however</font>

524
00:23:31,710 --> 00:23:38,460
actually this<font color="#E5E5E5"> if you if you extend</font><font color="#CCCCCC"> this</font>

525
00:23:35,310 --> 00:23:41,010
hypothesis to say there's no end<font color="#E5E5E5"> to the</font>

526
00:23:38,460 --> 00:23:44,910
<font color="#CCCCCC">to minus little</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> 1 times poly detail</font>

527
00:23:41,010 --> 00:23:49,320
algorithm then actually even full CNF

528
00:23:44,910 --> 00:23:53,610
<font color="#E5E5E5">said would but it still CNF</font><font color="#CCCCCC"> it's still</font>

529
00:23:49,320 --> 00:23:55,379
CNF yeah<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are other hypotheses</font>

530
00:23:53,610 --> 00:23:56,760
we can there are<font color="#E5E5E5"> better</font><font color="#CCCCCC"> hypotheses but</font>

531
00:23:55,380 --> 00:23:59,690
<font color="#E5E5E5">in this talk I'll just talk about</font><font color="#CCCCCC"> the</font>

532
00:23:56,760 --> 00:24:02,940
<font color="#CCCCCC">NSA</font><font color="#E5E5E5"> a good point</font>

533
00:23:59,690 --> 00:24:05,280
<font color="#CCCCCC">all right</font><font color="#E5E5E5"> finally the third slightly</font>

534
00:24:02,940 --> 00:24:07,740
different problem<font color="#E5E5E5"> is all pair shortest</font>

535
00:24:05,280 --> 00:24:10,320
paths classical problem<font color="#E5E5E5"> in graph</font>

536
00:24:07,740 --> 00:24:10,710
algorithms we teach it study it<font color="#E5E5E5"> and so</font>

537
00:24:10,320 --> 00:24:13,530
on

538
00:24:10,710 --> 00:24:15,990
again you're<font color="#E5E5E5"> giving an</font><font color="#CCCCCC"> EndNote</font><font color="#E5E5E5"> graph it</font>

539
00:24:13,530 --> 00:24:18,180
has weights on its<font color="#E5E5E5"> edges let's say</font>

540
00:24:15,990 --> 00:24:19,830
<font color="#E5E5E5">they're even polynomial in N and you</font>

541
00:24:18,180 --> 00:24:21,330
want to know for<font color="#E5E5E5"> every pair of vertices</font>

542
00:24:19,830 --> 00:24:23,908
<font color="#CCCCCC">CAES what is their shortest</font><font color="#E5E5E5"> path</font>

543
00:24:21,330 --> 00:24:25,710
distance<font color="#E5E5E5"> there's like many many</font>

544
00:24:23,909 --> 00:24:28,100
different ways<font color="#CCCCCC"> to solve this</font><font color="#E5E5E5"> problem in</font>

545
00:24:25,710 --> 00:24:31,649
n<font color="#CCCCCC"> cubed time and is</font><font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> nodes</font>

546
00:24:28,100 --> 00:24:34,168
<font color="#CCCCCC">and</font><font color="#E5E5E5"> there's a slightly faster</font><font color="#CCCCCC"> than cube</font>

547
00:24:31,649 --> 00:24:36,149
time algorithm like by Williams again

548
00:24:34,169 --> 00:24:38,700
and then<font color="#E5E5E5"> n cubed divided</font><font color="#CCCCCC"> by the</font>

549
00:24:36,149 --> 00:24:40,229
exponential<font color="#CCCCCC"> of square root log n</font><font color="#E5E5E5"> but</font>

550
00:24:38,700 --> 00:24:42,779
this<font color="#E5E5E5"> is still not</font><font color="#CCCCCC"> entered a two point</font>

551
00:24:40,230 --> 00:24:44,850
nine nine nine nine nine<font color="#E5E5E5"> so there's this</font>

552
00:24:42,779 --> 00:24:48,240
hypothesis<font color="#E5E5E5"> that has been around in</font><font color="#CCCCCC"> the</font>

553
00:24:44,850 --> 00:24:50,639
graphic algorithms community<font color="#E5E5E5"> that says</font>

554
00:24:48,240 --> 00:24:52,409
all<font color="#CCCCCC"> pressures past</font><font color="#E5E5E5"> requires roughly</font><font color="#CCCCCC"> and</font>

555
00:24:50,640 --> 00:24:55,649
<font color="#E5E5E5">cube time and another thing is that</font>

556
00:24:52,409 --> 00:24:57,419
<font color="#E5E5E5">these three problems are central to</font>

557
00:24:55,649 --> 00:24:59,309
different communities<font color="#CCCCCC"> in computer</font>

558
00:24:57,419 --> 00:25:01,380
science<font color="#CCCCCC"> this one has</font><font color="#E5E5E5"> been in</font>

559
00:24:59,309 --> 00:25:04,019
computational<font color="#E5E5E5"> geometry this one in graph</font>

560
00:25:01,380 --> 00:25:06,510
algorithms<font color="#E5E5E5"> and this one is essentially a</font>

561
00:25:04,019 --> 00:25:09,840
<font color="#E5E5E5">said disjointness question if you think</font>

562
00:25:06,510 --> 00:25:11,669
<font color="#E5E5E5">about it so it's it appears all over the</font>

563
00:25:09,840 --> 00:25:14,549
place the<font color="#E5E5E5"> data's basis people care about</font>

564
00:25:11,669 --> 00:25:18,149
it a<font color="#E5E5E5"> lot for</font><font color="#CCCCCC"> example so okay so these</font>

565
00:25:14,549 --> 00:25:22,500
are<font color="#CCCCCC"> these three other problems</font><font color="#E5E5E5"> and so</font>

566
00:25:18,149 --> 00:25:24,539
this answer<font color="#E5E5E5"> is like what what are</font><font color="#CCCCCC"> the</font>

567
00:25:22,500 --> 00:25:26,610
<font color="#E5E5E5">central problems we care about now you</font>

568
00:25:24,539 --> 00:25:28,830
may<font color="#E5E5E5"> ask why three why don't you just</font>

569
00:25:26,610 --> 00:25:31,830
have one yes I'd love<font color="#CCCCCC"> to have one</font>

570
00:25:28,830 --> 00:25:34,889
<font color="#E5E5E5">however there's some research that</font>

571
00:25:31,830 --> 00:25:38,158
<font color="#E5E5E5">suggests that if you strengthen strong</font>

572
00:25:34,889 --> 00:25:41,399
<font color="#CCCCCC">ETH a little bit then there were there's</font>

573
00:25:38,159 --> 00:25:43,500
no<font color="#E5E5E5"> deterministic reduction between these</font>

574
00:25:41,399 --> 00:25:45,149
three problems<font color="#CCCCCC"> so at</font><font color="#E5E5E5"> least there's</font><font color="#CCCCCC"> some</font>

575
00:25:43,500 --> 00:25:48,090
barrier to showing<font color="#E5E5E5"> that these are</font>

576
00:25:45,149 --> 00:25:50,219
equivalent<font color="#CCCCCC"> so it's possible that we more</font>

577
00:25:48,090 --> 00:25:55,580
<font color="#CCCCCC">than one</font><font color="#E5E5E5"> problem to explain the hardness</font>

578
00:25:50,220 --> 00:25:57,990
<font color="#E5E5E5">of things now also if we allow</font><font color="#CCCCCC"> more</font>

579
00:25:55,580 --> 00:26:00,269
<font color="#E5E5E5">hypotheses of course we'll be able to</font>

580
00:25:57,990 --> 00:26:01,889
<font color="#E5E5E5">prove more but I want to restrict it to</font>

581
00:26:00,269 --> 00:26:07,490
have fewer so let's just stick with

582
00:26:01,889 --> 00:26:10,529
<font color="#E5E5E5">these all right so we've covered this</font>

583
00:26:07,490 --> 00:26:13,080
and now the most technical part<font color="#E5E5E5"> of this</font>

584
00:26:10,529 --> 00:26:15,889
talk will be one slide which<font color="#E5E5E5"> will talk</font>

585
00:26:13,080 --> 00:26:18,720
<font color="#E5E5E5">about what a</font><font color="#CCCCCC"> fine-grained reduction is</font>

586
00:26:15,889 --> 00:26:22,379
yes

587
00:26:18,720 --> 00:26:24,300
this is all for<font color="#CCCCCC"> worst-case</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do</font>

588
00:26:22,380 --> 00:26:26,250
the same thing for average case but<font color="#E5E5E5"> it</font>

589
00:26:24,300 --> 00:26:31,680
need to be<font color="#E5E5E5"> a little bit more careful so</font>

590
00:26:26,250 --> 00:26:32,610
<font color="#E5E5E5">yeah I'll get back to</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> all right so</font>

591
00:26:31,680 --> 00:26:35,850
let's<font color="#E5E5E5"> do it</font>

592
00:26:32,610 --> 00:26:38,490
so in order<font color="#CCCCCC"> to get there let</font><font color="#E5E5E5"> me remind</font>

593
00:26:35,850 --> 00:26:40,860
you<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> two main notions of</font>

594
00:26:38,490 --> 00:26:42,840
reductions<font color="#E5E5E5"> we're used to and then P</font>

595
00:26:40,860 --> 00:26:45,090
hardness<font color="#E5E5E5"> for example so there's a menu</font>

596
00:26:42,840 --> 00:26:48,149
one reduction which essentially says if

597
00:26:45,090 --> 00:26:49,949
I<font color="#E5E5E5"> have a and B and a is many one</font>

598
00:26:48,150 --> 00:26:51,750
reducible to<font color="#E5E5E5"> B if there's some</font>

599
00:26:49,950 --> 00:26:54,180
polynomial time algorithm that takes<font color="#E5E5E5"> an</font>

600
00:26:51,750 --> 00:26:57,180
instance of a it produces an instance of

601
00:26:54,180 --> 00:26:59,970
<font color="#E5E5E5">B a single instance so that</font><font color="#CCCCCC"> the answer B</font>

602
00:26:57,180 --> 00:27:02,190
is exactly<font color="#CCCCCC"> the answer</font><font color="#E5E5E5"> to a and a and B</font>

603
00:26:59,970 --> 00:27:06,480
<font color="#CCCCCC">are decision problems so this is what</font>

604
00:27:02,190 --> 00:27:08,160
many<font color="#E5E5E5"> one reduction is and maybe we could</font>

605
00:27:06,480 --> 00:27:09,630
<font color="#E5E5E5">do something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this except</font><font color="#CCCCCC"> Polly</font><font color="#E5E5E5"> and</font>

606
00:27:08,160 --> 00:27:11,880
maybe<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can put</font><font color="#CCCCCC"> something in there</font>

607
00:27:09,630 --> 00:27:15,330
however this<font color="#E5E5E5"> sort of reduction has a</font>

608
00:27:11,880 --> 00:27:18,720
variety<font color="#CCCCCC"> of weaknesses</font><font color="#E5E5E5"> so for example I</font>

609
00:27:15,330 --> 00:27:20,250
can't take a function<font color="#CCCCCC"> problem and reduce</font>

610
00:27:18,720 --> 00:27:23,130
to a<font color="#E5E5E5"> decision problem in this way</font>

611
00:27:20,250 --> 00:27:24,720
<font color="#E5E5E5">because just naturally this</font><font color="#CCCCCC"> is the</font>

612
00:27:23,130 --> 00:27:28,650
answer to<font color="#CCCCCC"> B has to</font><font color="#E5E5E5"> be the answer to</font><font color="#CCCCCC"> a</font>

613
00:27:24,720 --> 00:27:30,510
and<font color="#E5E5E5"> moreover if I even if I</font><font color="#CCCCCC"> were</font>

614
00:27:28,650 --> 00:27:32,310
slightly<font color="#CCCCCC"> generalize that if I have a</font>

615
00:27:30,510 --> 00:27:34,920
<font color="#E5E5E5">problem like</font><font color="#CCCCCC"> okay shortest path we have</font>

616
00:27:32,310 --> 00:27:37,470
<font color="#CCCCCC">N squared</font><font color="#E5E5E5"> answers I have</font><font color="#CCCCCC"> 2n squared</font>

617
00:27:34,920 --> 00:27:39,240
<font color="#E5E5E5">distances I have to return</font><font color="#CCCCCC"> I can't</font>

618
00:27:37,470 --> 00:27:40,800
reduce<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> decision problem</font><font color="#CCCCCC"> by</font>

619
00:27:39,240 --> 00:27:42,720
creating<font color="#CCCCCC"> a single</font><font color="#E5E5E5"> instance because the</font>

620
00:27:40,800 --> 00:27:45,240
<font color="#E5E5E5">single instance just give me one bit</font>

621
00:27:42,720 --> 00:27:48,030
answer and I have to<font color="#E5E5E5"> answer I have to</font>

622
00:27:45,240 --> 00:27:50,070
<font color="#CCCCCC">give N squared log</font><font color="#E5E5E5"> n bits in fact so we</font>

623
00:27:48,030 --> 00:27:52,410
can't exactly use this and I want<font color="#E5E5E5"> to be</font>

624
00:27:50,070 --> 00:27:55,770
<font color="#E5E5E5">very general and I have to I want to</font>

625
00:27:52,410 --> 00:27:59,000
<font color="#E5E5E5">have problems</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are equivalent</font><font color="#CCCCCC"> no</font>

626
00:27:55,770 --> 00:28:02,460
matter what their range of answers<font color="#CCCCCC"> are</font>

627
00:27:59,000 --> 00:28:04,260
all right<font color="#E5E5E5"> so because</font><font color="#CCCCCC"> of this let's take</font>

628
00:28:02,460 --> 00:28:06,570
<font color="#E5E5E5">Turing reductions instead</font>

629
00:28:04,260 --> 00:28:09,180
so in Turing reductions now I'm allowed

630
00:28:06,570 --> 00:28:11,070
for every instance I run a polynomial

631
00:28:09,180 --> 00:28:15,150
time algorithm<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> produce many</font>

632
00:28:11,070 --> 00:28:17,370
instances of<font color="#E5E5E5"> B</font><font color="#CCCCCC"> ok and now if I had</font>

633
00:28:15,150 --> 00:28:19,680
<font color="#E5E5E5">Oracle access so some magical being</font>

634
00:28:17,370 --> 00:28:23,310
gives me answers to the instances of<font color="#E5E5E5"> P</font>

635
00:28:19,680 --> 00:28:26,850
then<font color="#E5E5E5"> in polynomial time</font><font color="#CCCCCC"> I resolve a so</font>

636
00:28:23,310 --> 00:28:28,480
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is a Turing reduction</font><font color="#E5E5E5"> and this is</font>

637
00:28:26,850 --> 00:28:31,120
more<font color="#E5E5E5"> along the lines</font>

638
00:28:28,480 --> 00:28:33,340
<font color="#CCCCCC">what I want</font><font color="#E5E5E5"> the reason</font><font color="#CCCCCC"> why people don't</font>

639
00:28:31,120 --> 00:28:35,049
use<font color="#E5E5E5"> it is for technical reasons</font><font color="#CCCCCC"> right</font>

640
00:28:33,340 --> 00:28:39,490
because it doesn't<font color="#E5E5E5"> distinguish between</font>

641
00:28:35,049 --> 00:28:41,290
<font color="#E5E5E5">and P and currently for example but for</font>

642
00:28:39,490 --> 00:28:42,669
us it's better<font color="#E5E5E5"> however is still to</font>

643
00:28:41,290 --> 00:28:44,200
<font color="#CCCCCC">coarse-grained because it doesn't</font><font color="#E5E5E5"> really</font>

644
00:28:42,669 --> 00:28:46,000
care<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the running time it just</font>

645
00:28:44,200 --> 00:28:48,610
cares about polynomial<font color="#E5E5E5"> versus non</font>

646
00:28:46,000 --> 00:28:50,500
<font color="#CCCCCC">polynomial so what I'm going to do is</font>

647
00:28:48,610 --> 00:28:52,780
I'm<font color="#E5E5E5"> going to take Turing reductions and</font>

648
00:28:50,500 --> 00:28:59,890
<font color="#E5E5E5">I'm gonna find make them more</font>

649
00:28:52,780 --> 00:29:04,299
fine-grained<font color="#CCCCCC"> alright so here's a notion</font>

650
00:28:59,890 --> 00:29:07,600
<font color="#E5E5E5">that we came</font><font color="#CCCCCC"> up with</font><font color="#E5E5E5"> in 2010</font><font color="#CCCCCC"> so imagine</font>

651
00:29:04,299 --> 00:29:10,389
you have<font color="#CCCCCC"> two problems a</font><font color="#E5E5E5"> and B and you</font>

652
00:29:07,600 --> 00:29:13,750
think that the natural run time for<font color="#CCCCCC"> a is</font>

653
00:29:10,390 --> 00:29:17,650
a of<font color="#CCCCCC"> n</font><font color="#E5E5E5"> and the natural run time for B is</font>

654
00:29:13,750 --> 00:29:20,080
B of<font color="#CCCCCC"> F and I want my reduction to be so</font>

655
00:29:17,650 --> 00:29:22,510
that when I take if I had<font color="#CCCCCC"> a</font><font color="#E5E5E5"> faster than</font>

656
00:29:20,080 --> 00:29:24,570
B of n time<font color="#E5E5E5"> algorithm for B then I would</font>

657
00:29:22,510 --> 00:29:29,200
get a faster than a of n<font color="#E5E5E5"> algorithm for a</font>

658
00:29:24,570 --> 00:29:31,750
<font color="#E5E5E5">alright so let's define</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> then the</font>

659
00:29:29,200 --> 00:29:33,790
reduction<font color="#CCCCCC"> I want to have so a and B</font><font color="#E5E5E5"> are</font>

660
00:29:31,750 --> 00:29:36,010
<font color="#E5E5E5">problems in little a and little B are</font>

661
00:29:33,790 --> 00:29:39,100
some<font color="#CCCCCC"> fine</font><font color="#E5E5E5"> constructible functions</font><font color="#CCCCCC"> okay</font>

662
00:29:36,010 --> 00:29:42,600
<font color="#CCCCCC">there are the</font><font color="#E5E5E5"> run times</font><font color="#CCCCCC"> I say that a is</font>

663
00:29:39,100 --> 00:29:45,909
a be reducible<font color="#E5E5E5"> to B if for every epsilon</font>

664
00:29:42,600 --> 00:29:47,830
there is some Delta<font color="#E5E5E5"> so</font><font color="#CCCCCC"> epsilon is the</font>

665
00:29:45,910 --> 00:29:50,260
advantage you<font color="#E5E5E5"> want to have over</font><font color="#CCCCCC"> the B of</font>

666
00:29:47,830 --> 00:29:52,928
n time algorithm<font color="#E5E5E5"> so then for every</font>

667
00:29:50,260 --> 00:29:55,540
<font color="#CCCCCC">episode there's a</font><font color="#E5E5E5"> delta</font><font color="#CCCCCC"> and an elven to</font>

668
00:29:52,929 --> 00:29:58,360
the<font color="#E5E5E5"> 1 minus Delta time algorithm they</font>

669
00:29:55,540 --> 00:30:00,700
can solve instances of a of size n by

670
00:29:58,360 --> 00:30:05,080
<font color="#E5E5E5">making</font><font color="#CCCCCC"> Oracle calls for B this is</font><font color="#E5E5E5"> the</font>

671
00:30:00,700 --> 00:30:07,150
<font color="#CCCCCC">touring part and here's a picture ok</font><font color="#E5E5E5"> so</font>

672
00:30:05,080 --> 00:30:08,949
you take<font color="#CCCCCC"> an instance of a you run some</font>

673
00:30:07,150 --> 00:30:11,020
<font color="#E5E5E5">event to</font><font color="#CCCCCC"> the 1</font><font color="#E5E5E5"> minus Delta time</font>

674
00:30:08,950 --> 00:30:13,780
algorithm<font color="#E5E5E5"> it</font><font color="#CCCCCC"> produces instances would be</font>

675
00:30:11,020 --> 00:30:17,230
they can have various<font color="#CCCCCC"> sizes and want</font><font color="#E5E5E5"> to</font>

676
00:30:13,780 --> 00:30:20,410
n sub K and<font color="#CCCCCC"> there's this funny condition</font>

677
00:30:17,230 --> 00:30:23,860
over<font color="#E5E5E5"> here on what their sizes can</font><font color="#CCCCCC"> be and</font>

678
00:30:20,410 --> 00:30:26,590
the condition<font color="#CCCCCC"> just says that if I had a</font>

679
00:30:23,860 --> 00:30:29,350
<font color="#E5E5E5">B of n to the 1 minus</font><font color="#CCCCCC"> epsilon</font><font color="#E5E5E5"> algorithm</font>

680
00:30:26,590 --> 00:30:31,540
for B I can run it here<font color="#E5E5E5"> in this this is</font>

681
00:30:29,350 --> 00:30:34,719
<font color="#E5E5E5">instead of the Oracle</font><font color="#CCCCCC"> I just run the</font>

682
00:30:31,540 --> 00:30:37,360
algorithm here and because the run time

683
00:30:34,720 --> 00:30:38,060
over<font color="#E5E5E5"> here which</font><font color="#CCCCCC"> is the sum of B of n</font>

684
00:30:37,360 --> 00:30:40,729
<font color="#E5E5E5">only</font>

685
00:30:38,060 --> 00:30:42,620
of these instances<font color="#E5E5E5"> right okay</font><font color="#CCCCCC"> and this</font>

686
00:30:40,730 --> 00:30:44,660
if this is<font color="#E5E5E5"> less</font><font color="#CCCCCC"> than a of n to the 1</font>

687
00:30:42,620 --> 00:30:46,790
minus<font color="#E5E5E5"> Delta and the reduction time</font>

688
00:30:44,660 --> 00:30:49,280
producing the instances and getting the

689
00:30:46,790 --> 00:30:51,620
answer back is a<font color="#CCCCCC"> over n to the 1 minus</font>

690
00:30:49,280 --> 00:30:54,590
Delta time then I get an a over<font color="#E5E5E5"> N to</font><font color="#CCCCCC"> the</font>

691
00:30:51,620 --> 00:30:58,459
<font color="#CCCCCC">1 times</font><font color="#E5E5E5"> Delta time algorithm</font><font color="#CCCCCC"> ok so this</font>

692
00:30:54,590 --> 00:31:01,550
is<font color="#E5E5E5"> the definition</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> two propositions</font>

693
00:30:58,460 --> 00:31:04,970
immediately follow<font color="#E5E5E5"> but the first one</font><font color="#CCCCCC"> is</font>

694
00:31:01,550 --> 00:31:07,280
that<font color="#E5E5E5"> if a is a be reducible to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> B</font>

695
00:31:04,970 --> 00:31:09,950
<font color="#CCCCCC">is in</font><font color="#E5E5E5"> B of n to the 1 minus</font><font color="#CCCCCC"> epsilon</font><font color="#E5E5E5"> time</font>

696
00:31:07,280 --> 00:31:13,399
that a<font color="#E5E5E5"> is in a of n to the</font><font color="#CCCCCC"> 1 was</font><font color="#E5E5E5"> Delta</font>

697
00:31:09,950 --> 00:31:15,650
time and also<font color="#E5E5E5"> conversely if I believe a</font>

698
00:31:13,400 --> 00:31:17,780
is hard and be as hard as well if a<font color="#E5E5E5"> is</font>

699
00:31:15,650 --> 00:31:20,170
hard for<font color="#E5E5E5"> a read time B is hard to be a</font>

700
00:31:17,780 --> 00:31:23,480
<font color="#CCCCCC">red</font><font color="#E5E5E5"> time all right</font>

701
00:31:20,170 --> 00:31:27,170
<font color="#E5E5E5">the second other nice property is true</font>

702
00:31:23,480 --> 00:31:29,060
that<font color="#CCCCCC"> it's transitive if is a be</font>

703
00:31:27,170 --> 00:31:32,840
reducible<font color="#E5E5E5"> to be please be serious about</font>

704
00:31:29,060 --> 00:31:34,580
C then a is a serious whoopsie<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> oh</font>

705
00:31:32,840 --> 00:31:36,919
there's lots<font color="#E5E5E5"> of nice properties you can</font>

706
00:31:34,580 --> 00:31:40,429
get out of<font color="#CCCCCC"> this and now you can start</font>

707
00:31:36,920 --> 00:31:43,310
reducing things<font color="#E5E5E5"> to each other now</font>

708
00:31:40,430 --> 00:31:47,030
I want<font color="#E5E5E5"> to take a step back now you have</font>

709
00:31:43,310 --> 00:31:50,419
this<font color="#E5E5E5"> fine-grained notion and imagine</font>

710
00:31:47,030 --> 00:31:52,129
that now I start<font color="#E5E5E5"> I I have all these</font>

711
00:31:50,420 --> 00:31:54,290
problems in<font color="#CCCCCC"> front</font><font color="#E5E5E5"> of me all the problems</font>

712
00:31:52,130 --> 00:31:56,840
that you<font color="#CCCCCC"> ever care about</font><font color="#E5E5E5"> and I know what</font>

713
00:31:54,290 --> 00:31:59,120
their natural run times are and somehow

714
00:31:56,840 --> 00:32:01,570
I use this notion to reduce them all to

715
00:31:59,120 --> 00:32:03,649
each other<font color="#E5E5E5"> there's currently no reason</font>

716
00:32:01,570 --> 00:32:05,929
convincing reason to believe<font color="#CCCCCC"> that you</font>

717
00:32:03,650 --> 00:32:07,670
can't do that so now you can now have

718
00:32:05,930 --> 00:32:09,410
everything<font color="#CCCCCC"> being equivalent</font><font color="#E5E5E5"> to each</font>

719
00:32:07,670 --> 00:32:12,320
other and<font color="#E5E5E5"> really there's only one</font>

720
00:32:09,410 --> 00:32:14,060
problem<font color="#CCCCCC"> you see and also there's only</font>

721
00:32:12,320 --> 00:32:16,490
one algorithm<font color="#E5E5E5"> is the exhaustive search</font>

722
00:32:14,060 --> 00:32:18,500
algorithm for that problem<font color="#CCCCCC"> so we could</font>

723
00:32:16,490 --> 00:32:20,300
live<font color="#CCCCCC"> in a world where there's only</font><font color="#E5E5E5"> one</font>

724
00:32:18,500 --> 00:32:22,640
<font color="#E5E5E5">algorithm and only one problem</font>

725
00:32:20,300 --> 00:32:31,490
and maybe this<font color="#E5E5E5"> is how</font><font color="#CCCCCC"> I'll do it all</font>

726
00:32:22,640 --> 00:32:34,850
<font color="#CCCCCC">right you never</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> okay so what we did</font>

727
00:32:31,490 --> 00:32:37,820
is we picked some harness<font color="#E5E5E5"> hypotheses we</font>

728
00:32:34,850 --> 00:32:43,310
<font color="#E5E5E5">have some notion of reduction and now</font>

729
00:32:37,820 --> 00:32:45,919
what<font color="#CCCCCC"> can we</font><font color="#E5E5E5"> prove so what what were</font>

730
00:32:43,310 --> 00:32:47,659
people were able<font color="#CCCCCC"> to prove for set so</font>

731
00:32:45,920 --> 00:32:51,390
well

732
00:32:47,660 --> 00:32:54,900
first<font color="#E5E5E5"> cook showed that all of NP is</font>

733
00:32:51,390 --> 00:32:56,310
reducible<font color="#E5E5E5"> to set and then carp got 21</font>

734
00:32:54,900 --> 00:32:59,970
problems and said that they're all

735
00:32:56,310 --> 00:33:02,820
<font color="#E5E5E5">equivalent to set and this started</font><font color="#CCCCCC"> NP</font>

736
00:32:59,970 --> 00:33:04,740
<font color="#E5E5E5">completeness</font><font color="#CCCCCC"> all right and then more</font>

737
00:33:02,820 --> 00:33:08,340
<font color="#E5E5E5">stuff happens many many</font><font color="#CCCCCC"> problems were</font>

738
00:33:04,740 --> 00:33:11,940
added to this and<font color="#E5E5E5"> also you can reduce</font>

739
00:33:08,340 --> 00:33:15,990
that<font color="#CCCCCC"> to problems outside</font><font color="#E5E5E5"> of NP is a</font>

740
00:33:11,940 --> 00:33:17,880
beautiful<font color="#E5E5E5"> theory out there now the</font>

741
00:33:15,990 --> 00:33:20,730
beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our theory is not as pretty</font>

742
00:33:17,880 --> 00:33:23,190
<font color="#E5E5E5">so we don't have</font><font color="#CCCCCC"> 21 problems</font>

743
00:33:20,730 --> 00:33:28,620
well maybe we do I haven't counted<font color="#E5E5E5"> but</font>

744
00:33:23,190 --> 00:33:30,990
we<font color="#CCCCCC"> uh you were paying attention you</font><font color="#E5E5E5"> know</font>

745
00:33:28,620 --> 00:33:35,820
he's very<font color="#E5E5E5"> smart</font><font color="#CCCCCC"> okay so what's going on</font>

746
00:33:30,990 --> 00:33:38,280
here there's they are<font color="#CCCCCC"> there indeed only</font>

747
00:33:35,820 --> 00:33:40,590
<font color="#E5E5E5">20 the reason why is the Hamiltonian</font>

748
00:33:38,280 --> 00:33:52,470
cycle had two<font color="#E5E5E5"> versions undirected and</font>

749
00:33:40,590 --> 00:33:54,720
directed yeah<font color="#CCCCCC"> so</font><font color="#E5E5E5"> what do we know so we</font>

750
00:33:52,470 --> 00:33:56,340
<font color="#CCCCCC">have these three</font><font color="#E5E5E5"> problems for if it</font>

751
00:33:54,720 --> 00:34:01,560
comes out but you know I have<font color="#E5E5E5"> this</font>

752
00:33:56,340 --> 00:34:05,610
implication<font color="#E5E5E5"> so from the 90s</font><font color="#CCCCCC"> threesome</font>

753
00:34:01,560 --> 00:34:07,440
<font color="#E5E5E5">has been shown to imply harness for many</font>

754
00:34:05,610 --> 00:34:10,109
<font color="#E5E5E5">problems in geometry</font><font color="#CCCCCC"> it started with a</font>

755
00:34:07,440 --> 00:34:12,570
paper by<font color="#E5E5E5"> Catherine ton and</font><font color="#CCCCCC"> Overmars</font><font color="#E5E5E5"> in</font>

756
00:34:10,110 --> 00:34:14,580
95 and they said well<font color="#CCCCCC"> let's assume that</font>

757
00:34:12,570 --> 00:34:16,500
this simple problem<font color="#E5E5E5"> requires quadratic</font>

758
00:34:14,580 --> 00:34:18,569
time can we<font color="#E5E5E5"> show that all these other</font>

759
00:34:16,500 --> 00:34:21,960
<font color="#CCCCCC">problems also require a quadratic time</font>

760
00:34:18,570 --> 00:34:25,679
and<font color="#E5E5E5"> indeed they do and it spawned a</font><font color="#CCCCCC"> lot</font>

761
00:34:21,960 --> 00:34:27,630
of papers<font color="#E5E5E5"> on this topic and</font><font color="#CCCCCC"> now many</font>

762
00:34:25,679 --> 00:34:30,740
many<font color="#E5E5E5"> problems in geometry are known to</font>

763
00:34:27,630 --> 00:34:32,550
be<font color="#E5E5E5"> hard under the threesome hypothesis</font>

764
00:34:30,739 --> 00:34:34,649
<font color="#CCCCCC">recently more recently we started</font>

765
00:34:32,550 --> 00:34:36,300
<font color="#E5E5E5">showing that if he believed in the</font>

766
00:34:34,649 --> 00:34:38,639
threesome hypothesis then problems

767
00:34:36,300 --> 00:34:41,370
outside<font color="#E5E5E5"> of geometry are also hard so you</font>

768
00:34:38,639 --> 00:34:43,230
can use some<font color="#E5E5E5"> other techniques</font><font color="#CCCCCC"> to also</font>

769
00:34:41,370 --> 00:34:47,850
show things about sequence alignment

770
00:34:43,230 --> 00:34:50,699
problems and so<font color="#CCCCCC"> on</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> here for</font>

771
00:34:47,850 --> 00:34:53,279
<font color="#E5E5E5">terminal vectors the said the darkness</font>

772
00:34:50,699 --> 00:34:56,069
problem I mentioned<font color="#E5E5E5"> it has many many</font>

773
00:34:53,280 --> 00:34:58,410
implications<font color="#E5E5E5"> so soon we started</font><font color="#CCCCCC"> this</font>

774
00:34:56,070 --> 00:35:00,359
<font color="#E5E5E5">work we showed we</font><font color="#CCCCCC"> another</font>

775
00:34:58,410 --> 00:35:02,848
like for example longest common

776
00:35:00,359 --> 00:35:05,759
subsequence<font color="#CCCCCC"> it requires quadratic time</font>

777
00:35:02,849 --> 00:35:08,280
under the orthogonal vectors<font color="#E5E5E5"> hypothesis</font>

778
00:35:05,760 --> 00:35:11,069
<font color="#E5E5E5">lots of problems subtree isomorphism</font>

779
00:35:08,280 --> 00:35:13,470
<font color="#CCCCCC">Graham diameter and so on</font><font color="#E5E5E5"> so it's a very</font>

780
00:35:11,069 --> 00:35:17,520
very fruitful hypothesis to start from

781
00:35:13,470 --> 00:35:20,430
you get a lot of<font color="#CCCCCC"> stuff and one</font><font color="#E5E5E5"> of the</font>

782
00:35:17,520 --> 00:35:22,049
<font color="#E5E5E5">interesting things here</font><font color="#CCCCCC"> is all pair</font>

783
00:35:20,430 --> 00:35:24,450
shortest paths we actually have an

784
00:35:22,049 --> 00:35:26,220
equivalence class so there's all these

785
00:35:24,450 --> 00:35:27,960
problems<font color="#CCCCCC"> they're actually</font><font color="#E5E5E5"> n cubed</font><font color="#CCCCCC"> n</font>

786
00:35:26,220 --> 00:35:30,569
cubed equivalent<font color="#E5E5E5"> to a pair shortest</font><font color="#CCCCCC"> path</font>

787
00:35:27,960 --> 00:35:33,299
<font color="#E5E5E5">and you use the full power of</font><font color="#CCCCCC"> fine-grain</font>

788
00:35:30,569 --> 00:35:35,579
reductions here<font color="#CCCCCC"> so this problem</font><font color="#E5E5E5"> in white</font>

789
00:35:33,299 --> 00:35:37,920
over<font color="#CCCCCC"> here is a</font><font color="#E5E5E5"> very simple problem</font><font color="#CCCCCC"> so</font>

790
00:35:35,579 --> 00:35:39,599
you're given a graph<font color="#E5E5E5"> on n nodes then you</font>

791
00:35:37,920 --> 00:35:41,789
have weights<font color="#E5E5E5"> on the edges or some</font>

792
00:35:39,599 --> 00:35:43,799
integers and<font color="#E5E5E5"> I want to know if there's</font>

793
00:35:41,789 --> 00:35:45,270
<font color="#E5E5E5">three nodes that form a triangle so</font>

794
00:35:43,799 --> 00:35:47,280
there's edges between<font color="#E5E5E5"> all three of them</font>

795
00:35:45,270 --> 00:35:50,849
and the sum of<font color="#E5E5E5"> the weights</font><font color="#CCCCCC"> on the edges</font>

796
00:35:47,280 --> 00:35:53,430
is negative<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I can easily solve this</font>

797
00:35:50,849 --> 00:35:55,470
problem in cubic time<font color="#E5E5E5"> I take every trip</font>

798
00:35:53,430 --> 00:35:57,450
over the season I check the condition is

799
00:35:55,470 --> 00:35:58,890
it just some negative or not<font color="#E5E5E5"> yeah</font>

800
00:35:57,450 --> 00:36:00,990
there's this<font color="#E5E5E5"> there's nothing better</font>

801
00:35:58,890 --> 00:36:03,420
known<font color="#E5E5E5"> and in fact if you could solve</font>

802
00:36:00,990 --> 00:36:05,368
this decision problem is there triangle

803
00:36:03,420 --> 00:36:07,799
there<font color="#CCCCCC"> then you can compute</font><font color="#E5E5E5"> all the</font>

804
00:36:05,369 --> 00:36:11,640
distances<font color="#E5E5E5"> all pairwise distances</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in</font>

805
00:36:07,799 --> 00:36:14,250
<font color="#E5E5E5">a graph very fast</font><font color="#CCCCCC"> it's very nice and it</font>

806
00:36:11,640 --> 00:36:15,420
also kind<font color="#E5E5E5"> of led me to believe actually</font>

807
00:36:14,250 --> 00:36:21,119
I don't<font color="#E5E5E5"> know if I</font><font color="#CCCCCC"> believe it but let's</font>

808
00:36:15,420 --> 00:36:24,000
put<font color="#CCCCCC"> it out there</font><font color="#E5E5E5"> suppose maybe maybe you</font>

809
00:36:21,119 --> 00:36:25,680
can take a problem and<font color="#E5E5E5"> maybe the natural</font>

810
00:36:24,000 --> 00:36:28,289
<font color="#CCCCCC">algorithm for it is</font><font color="#E5E5E5"> not exhaustive</font>

811
00:36:25,680 --> 00:36:30,270
search but it's<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> that it's just</font>

812
00:36:28,289 --> 00:36:32,849
<font color="#E5E5E5">fine-grained equivalent to some problem</font>

813
00:36:30,270 --> 00:36:34,890
<font color="#E5E5E5">whose best algorithm is exhaustive</font>

814
00:36:32,849 --> 00:36:38,579
search<font color="#E5E5E5"> just</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> all pair shortest</font>

815
00:36:34,890 --> 00:36:40,470
<font color="#CCCCCC">paths</font><font color="#E5E5E5"> take the search space</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> it normal</font>

816
00:36:38,579 --> 00:36:42,779
there's so many shortest paths out there

817
00:36:40,470 --> 00:36:45,598
<font color="#E5E5E5">okay exponential number yeah we can</font>

818
00:36:42,779 --> 00:36:47,099
solve it in cubic time and really the

819
00:36:45,599 --> 00:36:49,289
reason is because<font color="#E5E5E5"> it's equivalent to</font>

820
00:36:47,099 --> 00:36:52,380
<font color="#E5E5E5">this triangle</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> and there is</font>

821
00:36:49,289 --> 00:36:54,779
actually a cubic number things<font color="#E5E5E5"> are</font><font color="#CCCCCC"> match</font>

822
00:36:52,380 --> 00:36:57,720
in the natural search space<font color="#E5E5E5"> but anyway I</font>

823
00:36:54,779 --> 00:36:59,760
digress<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> get back to this so here</font>

824
00:36:57,720 --> 00:37:01,680
and<font color="#CCCCCC"> also you know there's</font><font color="#E5E5E5"> all these</font>

825
00:36:59,760 --> 00:37:03,000
<font color="#E5E5E5">problems they're known</font><font color="#CCCCCC"> to be hard</font><font color="#E5E5E5"> under</font>

826
00:37:01,680 --> 00:37:05,129
all<font color="#E5E5E5"> three hypotheses</font>

827
00:37:03,000 --> 00:37:07,680
there's problems<font color="#CCCCCC"> there are not only</font>

828
00:37:05,130 --> 00:37:09,690
<font color="#CCCCCC">about static</font><font color="#E5E5E5"> input sometimes inputs</font>

829
00:37:07,680 --> 00:37:11,750
change you need to update<font color="#E5E5E5"> the runtime</font>

830
00:37:09,690 --> 00:37:13,250
and then you can show tight

831
00:37:11,750 --> 00:37:15,980
conditional lower bounds for such

832
00:37:13,250 --> 00:37:18,860
<font color="#E5E5E5">problems under one</font><font color="#CCCCCC"> or more of these</font>

833
00:37:15,980 --> 00:37:20,780
<font color="#E5E5E5">hypothesis so this field is really</font>

834
00:37:18,860 --> 00:37:26,270
<font color="#CCCCCC">growing there's a lot of results out</font>

835
00:37:20,780 --> 00:37:26,480
there<font color="#E5E5E5"> how much my time</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> all</font>

836
00:37:26,270 --> 00:37:30,230
<font color="#CCCCCC">right</font>

837
00:37:26,480 --> 00:37:32,030
<font color="#CCCCCC">so and</font><font color="#E5E5E5"> again as I</font><font color="#CCCCCC"> said if you use more</font>

838
00:37:30,230 --> 00:37:34,700
hardness assumptions you<font color="#CCCCCC"> can prove more</font>

839
00:37:32,030 --> 00:37:39,770
but even<font color="#CCCCCC"> with these you can</font><font color="#E5E5E5"> prove a lot</font>

840
00:37:34,700 --> 00:37:41,870
all right<font color="#E5E5E5"> okay so now I'll spend the</font>

841
00:37:39,770 --> 00:37:46,759
next<font color="#CCCCCC"> ten minutes</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> less</font>

842
00:37:41,870 --> 00:37:49,370
on the conclusion good<font color="#E5E5E5"> so what's the</font>

843
00:37:46,760 --> 00:37:51,470
conclusion well first

844
00:37:49,370 --> 00:37:54,920
besides what I told you about<font color="#E5E5E5"> there has</font>

845
00:37:51,470 --> 00:37:57,799
been kind of an explosion<font color="#E5E5E5"> of research</font><font color="#CCCCCC"> on</font>

846
00:37:54,920 --> 00:38:01,940
this<font color="#E5E5E5"> and people started applying</font>

847
00:37:57,800 --> 00:38:03,920
<font color="#E5E5E5">fine-grained ideas and in places</font><font color="#CCCCCC"> where</font>

848
00:38:01,940 --> 00:38:05,660
it's not<font color="#CCCCCC"> really about running time so</font>

849
00:38:03,920 --> 00:38:09,140
<font color="#E5E5E5">sometimes you're making about</font><font color="#CCCCCC"> how much</font>

850
00:38:05,660 --> 00:38:11,359
<font color="#E5E5E5">space your algorithms use what is like</font>

851
00:38:09,140 --> 00:38:14,990
<font color="#E5E5E5">the trade-off between</font><font color="#CCCCCC"> the approximation</font>

852
00:38:11,360 --> 00:38:17,320
and<font color="#CCCCCC"> runtime and other stuff</font><font color="#E5E5E5"> also in</font>

853
00:38:14,990 --> 00:38:21,200
<font color="#E5E5E5">different</font><font color="#CCCCCC"> models of</font><font color="#E5E5E5"> computation like IO</font>

854
00:38:17,320 --> 00:38:23,240
complexity or data<font color="#E5E5E5"> structures and also</font>

855
00:38:21,200 --> 00:38:25,399
<font color="#E5E5E5">there has been a little bit of work on</font>

856
00:38:23,240 --> 00:38:27,859
<font color="#E5E5E5">fine</font><font color="#CCCCCC"> grained cryptography</font><font color="#E5E5E5"> so I'll</font>

857
00:38:25,400 --> 00:38:34,910
mention a<font color="#E5E5E5"> few things that people have</font>

858
00:38:27,860 --> 00:38:37,490
done<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this domain so this paper by</font>

859
00:38:34,910 --> 00:38:40,399
<font color="#CCCCCC">balla doubt they had two papers in 2017</font>

860
00:38:37,490 --> 00:38:42,350
and 2018<font color="#E5E5E5"> and they were concerned with</font>

861
00:38:40,400 --> 00:38:44,930
can we build some cryptographic

862
00:38:42,350 --> 00:38:48,020
primitives<font color="#CCCCCC"> out of the fine-grained</font>

863
00:38:44,930 --> 00:38:50,210
<font color="#E5E5E5">assumptions that we have and in</font>

864
00:38:48,020 --> 00:38:52,640
particular our assumptions I was pointed

865
00:38:50,210 --> 00:38:54,590
out<font color="#E5E5E5"> our</font><font color="#CCCCCC"> worst case assumptions</font><font color="#E5E5E5"> so can we</font>

866
00:38:52,640 --> 00:38:58,420
get<font color="#E5E5E5"> average case assumptions and build</font>

867
00:38:54,590 --> 00:39:01,630
crypto out of it and what they did was

868
00:38:58,420 --> 00:39:05,720
they<font color="#CCCCCC"> developed these techniques where</font>

869
00:39:01,630 --> 00:39:07,760
they<font color="#E5E5E5"> could get these other problems out</font>

870
00:39:05,720 --> 00:39:09,500
<font color="#E5E5E5">of our three things out of</font><font color="#CCCCCC"> avi</font>

871
00:39:07,760 --> 00:39:12,140
orthogonal vectors three seminal paper

872
00:39:09,500 --> 00:39:14,420
<font color="#E5E5E5">this past they were able to get related</font>

873
00:39:12,140 --> 00:39:16,850
algebraic looking problems<font color="#E5E5E5"> there are</font>

874
00:39:14,420 --> 00:39:19,700
actually hard on average in under nice

875
00:39:16,850 --> 00:39:22,310
distributions and then they were<font color="#E5E5E5"> able to</font>

876
00:39:19,700 --> 00:39:23,689
get<font color="#CCCCCC"> proofs of</font><font color="#E5E5E5"> work from them which is</font>

877
00:39:22,310 --> 00:39:26,538
<font color="#CCCCCC">very nice</font>

878
00:39:23,690 --> 00:39:29,569
and the<font color="#CCCCCC"> theorem they proved or something</font>

879
00:39:26,539 --> 00:39:32,930
of the<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> generate a challenge</font>

880
00:39:29,569 --> 00:39:35,180
<font color="#CCCCCC">like roughly linear time there is a way</font>

881
00:39:32,930 --> 00:39:38,359
to get<font color="#CCCCCC"> a proof-of-work and then to the K</font>

882
00:39:35,180 --> 00:39:40,970
time for some small<font color="#E5E5E5"> K and then you can</font>

883
00:39:38,359 --> 00:39:43,190
check this proof in roughly<font color="#E5E5E5"> linear time</font>

884
00:39:40,970 --> 00:39:45,770
and every proof must<font color="#E5E5E5"> require roughly</font><font color="#CCCCCC"> n</font>

885
00:39:43,190 --> 00:39:49,599
to the K<font color="#CCCCCC"> per</font><font color="#E5E5E5"> okay so this is very nice</font>

886
00:39:45,770 --> 00:39:52,970
and<font color="#CCCCCC"> this is exactly what</font><font color="#E5E5E5"> one cares about</font>

887
00:39:49,599 --> 00:39:55,940
<font color="#E5E5E5">yeah and</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> then the question</font><font color="#CCCCCC"> is can you</font>

888
00:39:52,970 --> 00:39:57,770
get more out of<font color="#E5E5E5"> this can you get besides</font>

889
00:39:55,940 --> 00:39:59,690
<font color="#E5E5E5">proofs of work can we get other</font>

890
00:39:57,770 --> 00:40:03,020
cryptographic primitives could we get

891
00:39:59,690 --> 00:40:05,900
public key encryption and so on from

892
00:40:03,020 --> 00:40:08,630
this<font color="#E5E5E5"> now unfortunately from their</font>

893
00:40:05,900 --> 00:40:10,280
approach there is some there<font color="#E5E5E5"> are</font><font color="#CCCCCC"> some</font>

894
00:40:08,630 --> 00:40:12,920
barriers to even getting<font color="#E5E5E5"> one-way</font>

895
00:40:10,280 --> 00:40:14,000
functions<font color="#CCCCCC"> but it</font><font color="#E5E5E5"> doesn't mean</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

896
00:40:12,920 --> 00:40:15,980
can't do it maybe<font color="#E5E5E5"> there's a different</font>

897
00:40:14,000 --> 00:40:19,119
<font color="#CCCCCC">way</font><font color="#E5E5E5"> to go</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it and get different</font>

898
00:40:15,980 --> 00:40:22,640
<font color="#CCCCCC">average-case hard problems to get there</font>

899
00:40:19,119 --> 00:40:26,030
<font color="#E5E5E5">all right so then there's another</font>

900
00:40:22,640 --> 00:40:28,700
problem<font color="#E5E5E5"> so what if I ask I take my</font>

901
00:40:26,030 --> 00:40:30,289
favorite<font color="#E5E5E5"> problems orthogonal vectors</font>

902
00:40:28,700 --> 00:40:33,078
<font color="#E5E5E5">threesome and all pair shortest paths</font>

903
00:40:30,289 --> 00:40:36,130
<font color="#E5E5E5">can I show</font><font color="#CCCCCC"> that they themselves are hard</font>

904
00:40:33,079 --> 00:40:38,960
<font color="#E5E5E5">on average for some nice distribution</font>

905
00:40:36,130 --> 00:40:41,150
<font color="#CCCCCC">this would be nice</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> I don't go to</font>

906
00:40:38,960 --> 00:40:43,819
these<font color="#CCCCCC"> very messy looking algebraic</font>

907
00:40:41,150 --> 00:40:45,289
problems I<font color="#CCCCCC"> just I'm stuck I will be with</font>

908
00:40:43,819 --> 00:40:48,470
working with these very simple

909
00:40:45,289 --> 00:40:50,869
combinatorial problems it's easy to work

910
00:40:48,470 --> 00:40:53,509
with<font color="#CCCCCC"> unfortunately it's</font><font color="#E5E5E5"> not too hard to</font>

911
00:40:50,869 --> 00:40:55,579
show<font color="#CCCCCC"> that for many natural distributions</font>

912
00:40:53,510 --> 00:40:57,529
<font color="#E5E5E5">orthogonal vectors and all pair shortest</font>

913
00:40:55,579 --> 00:41:00,109
paths are actually not<font color="#CCCCCC"> hard</font><font color="#E5E5E5"> there's much</font>

914
00:40:57,529 --> 00:41:02,180
faster algorithms for them<font color="#CCCCCC"> on</font><font color="#E5E5E5"> average</font>

915
00:41:00,109 --> 00:41:05,690
for example if I<font color="#E5E5E5"> take all pair shortest</font>

916
00:41:02,180 --> 00:41:07,640
paths on a graph<font color="#CCCCCC"> where he started with a</font>

917
00:41:05,690 --> 00:41:10,160
complete graph and you put weights on

918
00:41:07,640 --> 00:41:12,799
<font color="#E5E5E5">the edges which are between 0 & 1</font>

919
00:41:10,160 --> 00:41:14,538
there's some real numbers<font color="#E5E5E5"> then you can</font>

920
00:41:12,799 --> 00:41:16,339
compute<font color="#E5E5E5"> all pair shortest paths in N</font>

921
00:41:14,539 --> 00:41:19,180
<font color="#E5E5E5">squared time which is optimal</font><font color="#CCCCCC"> because</font>

922
00:41:16,339 --> 00:41:22,490
the input size is<font color="#E5E5E5"> N squared so also</font>

923
00:41:19,180 --> 00:41:25,819
<font color="#CCCCCC">orthogonal vectors if you sample your</font>

924
00:41:22,490 --> 00:41:28,640
instances by you have some<font color="#CCCCCC"> probability P</font>

925
00:41:25,819 --> 00:41:32,089
bigger than<font color="#E5E5E5"> 0 and your sample instances</font>

926
00:41:28,640 --> 00:41:35,660
by putting making the coordinates each

927
00:41:32,089 --> 00:41:37,640
each entry is 0 with probability P R

928
00:41:35,660 --> 00:41:39,440
<font color="#E5E5E5">one probability</font><font color="#CCCCCC"> one minus</font><font color="#E5E5E5"> P the</font><font color="#CCCCCC"> other</font>

929
00:41:37,640 --> 00:41:42,230
way<font color="#E5E5E5"> around and then you</font><font color="#CCCCCC"> can actually</font>

930
00:41:39,440 --> 00:41:43,670
show<font color="#CCCCCC"> solve that problem into two n to</font>

931
00:41:42,230 --> 00:41:51,710
the 2 minus<font color="#E5E5E5"> epsilon</font><font color="#CCCCCC"> 2 and epsilon</font>

932
00:41:43,670 --> 00:41:54,109
<font color="#E5E5E5">depends on P so yeah absolutely</font>

933
00:41:51,710 --> 00:41:55,930
I'm saying<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in fact this is</font><font color="#CCCCCC"> great</font>

934
00:41:54,109 --> 00:41:59,420
<font color="#E5E5E5">question there is</font><font color="#CCCCCC"> a nice distribution</font>

935
00:41:55,930 --> 00:42:02,118
for<font color="#CCCCCC"> Ella</font><font color="#E5E5E5"> for orthogonal vectors if you</font>

936
00:41:59,420 --> 00:42:05,150
assume that<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is hard</font><font color="#E5E5E5"> on average then</font>

937
00:42:02,119 --> 00:42:06,410
I did I perform my reduction<font color="#E5E5E5"> to</font>

938
00:42:05,150 --> 00:42:08,690
orthogonal vectors and<font color="#E5E5E5"> I get a</font>

939
00:42:06,410 --> 00:42:09,890
distribution<font color="#E5E5E5"> for vectors under the</font>

940
00:42:08,690 --> 00:42:12,319
assumption<font color="#CCCCCC"> that that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> harder than</font>

941
00:42:09,890 --> 00:42:12,618
average<font color="#CCCCCC"> so there exist some some ways to</font>

942
00:42:12,319 --> 00:42:21,950
do it

943
00:42:12,619 --> 00:42:23,780
<font color="#E5E5E5">yeah yeah they're</font><font color="#CCCCCC"> correlated because</font><font color="#E5E5E5"> you</font>

944
00:42:21,950 --> 00:42:28,009
have<font color="#E5E5E5"> these clauses</font><font color="#CCCCCC"> and so on so they</font>

945
00:42:23,780 --> 00:42:31,099
will not look nice<font color="#E5E5E5"> it may be I mean but</font>

946
00:42:28,010 --> 00:42:33,410
we're not start with<font color="#CCCCCC"> that it's I don't</font>

947
00:42:31,099 --> 00:42:35,780
<font color="#E5E5E5">know it's it's a great question</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

948
00:42:33,410 --> 00:42:37,670
just<font color="#E5E5E5"> this all this is</font><font color="#CCCCCC"> saying is for</font>

949
00:42:35,780 --> 00:42:39,829
these very nice distributions they're

950
00:42:37,670 --> 00:42:42,230
easy to solve<font color="#CCCCCC"> they could exist some</font>

951
00:42:39,829 --> 00:42:44,089
other distributions you can work with

952
00:42:42,230 --> 00:42:46,069
very well for which they're not that

953
00:42:44,089 --> 00:42:48,980
easy<font color="#E5E5E5"> to solve but we haven't</font><font color="#CCCCCC"> worked we</font>

954
00:42:46,069 --> 00:42:50,599
haven't looked at it<font color="#E5E5E5"> very closely</font><font color="#CCCCCC"> now</font>

955
00:42:48,980 --> 00:42:53,150
what I want to<font color="#E5E5E5"> say is that as I</font>

956
00:42:50,599 --> 00:42:55,400
<font color="#CCCCCC">mentioned CNF set and</font><font color="#E5E5E5"> threesome they</font>

957
00:42:53,150 --> 00:42:58,670
might even be<font color="#E5E5E5"> hard for the simple</font>

958
00:42:55,400 --> 00:42:59,809
distribution<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> threesome</font><font color="#E5E5E5"> in</font>

959
00:42:58,670 --> 00:43:01,970
fact I will<font color="#CCCCCC"> show you in</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> next</font>

960
00:42:59,809 --> 00:43:04,760
slide but<font color="#E5E5E5"> threesome could just be hard</font>

961
00:43:01,970 --> 00:43:06,589
by when if you take your integers

962
00:43:04,760 --> 00:43:08,960
completely<font color="#CCCCCC"> at random</font><font color="#E5E5E5"> from a large enough</font>

963
00:43:06,589 --> 00:43:10,609
range uniformly at random and we still

964
00:43:08,960 --> 00:43:12,430
<font color="#E5E5E5">don't know how to solve</font><font color="#CCCCCC"> it faster than N</font>

965
00:43:10,609 --> 00:43:14,598
<font color="#E5E5E5">squared time so there's some</font><font color="#CCCCCC"> very simple</font>

966
00:43:12,430 --> 00:43:16,960
<font color="#E5E5E5">distributions for which these problems</font>

967
00:43:14,599 --> 00:43:16,960
could<font color="#E5E5E5"> be</font>

968
00:43:22,210 --> 00:43:27,980
so the question is whether these

969
00:43:25,790 --> 00:43:29,990
problems are<font color="#CCCCCC"> conjectured</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> hard over</font>

970
00:43:27,980 --> 00:43:31,850
finite fields<font color="#CCCCCC"> so we're talking of actors</font>

971
00:43:29,990 --> 00:43:34,430
is actually not<font color="#E5E5E5"> hard even in the worst</font>

972
00:43:31,850 --> 00:43:36,770
case<font color="#CCCCCC"> for over random</font><font color="#E5E5E5"> hour over finite</font>

973
00:43:34,430 --> 00:43:42,560
<font color="#CCCCCC">fields you can</font><font color="#E5E5E5"> solve in a sub quadratic</font>

974
00:43:36,770 --> 00:43:46,759
time for any finite field over rings<font color="#E5E5E5"> it</font>

975
00:43:42,560 --> 00:43:53,840
is<font color="#E5E5E5"> hard like over mod six</font><font color="#CCCCCC"> not rings</font>

976
00:43:46,760 --> 00:43:55,940
<font color="#E5E5E5">whatever yeah okay so</font><font color="#CCCCCC"> yeah where was I</font>

977
00:43:53,840 --> 00:43:57,740
<font color="#CCCCCC">so you could start</font><font color="#E5E5E5"> working with these</font>

978
00:43:55,940 --> 00:44:00,800
two problems<font color="#CCCCCC"> even</font><font color="#E5E5E5"> with the simple</font>

979
00:43:57,740 --> 00:44:03,649
distributions<font color="#CCCCCC"> of course we would love</font><font color="#E5E5E5"> to</font>

980
00:44:00,800 --> 00:44:05,540
<font color="#CCCCCC">have</font><font color="#E5E5E5"> worst case</font><font color="#CCCCCC"> two average case</font>

981
00:44:03,650 --> 00:44:08,180
reductions and<font color="#E5E5E5"> this was done recently</font>

982
00:44:05,540 --> 00:44:09,620
for<font color="#CCCCCC"> a particular version</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> these</font>

983
00:44:08,180 --> 00:44:11,990
problems namely they're counting

984
00:44:09,620 --> 00:44:14,410
versions so instead of the decision

985
00:44:11,990 --> 00:44:17,000
<font color="#E5E5E5">version when you want to know whether</font>

986
00:44:14,410 --> 00:44:18,680
there is a threesome solution whether

987
00:44:17,000 --> 00:44:20,870
orthogonal vectors there is an

988
00:44:18,680 --> 00:44:22,910
orthogonal pair<font color="#E5E5E5"> I want you to count the</font>

989
00:44:20,870 --> 00:44:26,600
<font color="#E5E5E5">number this</font><font color="#CCCCCC"> is a much harder</font><font color="#E5E5E5"> problem</font>

990
00:44:22,910 --> 00:44:28,970
<font color="#E5E5E5">okay but then you can actually get a</font>

991
00:44:26,600 --> 00:44:31,460
<font color="#CCCCCC">worst case to average case reduction in</font>

992
00:44:28,970 --> 00:44:33,049
particular<font color="#CCCCCC"> gold rack</font><font color="#E5E5E5"> and rough loom did</font>

993
00:44:31,460 --> 00:44:36,080
this just<font color="#CCCCCC"> recently I think</font><font color="#E5E5E5"> this is a</font>

994
00:44:33,050 --> 00:44:38,750
very<font color="#E5E5E5"> exciting result and I think this I</font>

995
00:44:36,080 --> 00:44:41,150
<font color="#E5E5E5">think this should</font><font color="#CCCCCC"> be true for</font><font color="#E5E5E5"> all these</font>

996
00:44:38,750 --> 00:44:47,290
<font color="#E5E5E5">problems that the counting version</font>

997
00:44:41,150 --> 00:44:47,290
<font color="#E5E5E5">should</font><font color="#CCCCCC"> be hard on average good</font>

998
00:44:50,989 --> 00:44:54,539
absolutely

999
00:44:52,109 --> 00:44:56,910
for every fixed<font color="#CCCCCC"> problem it's solvable</font>

1000
00:44:54,539 --> 00:45:03,660
<font color="#E5E5E5">and then to the 2 minus epsilon time or</font>

1001
00:44:56,910 --> 00:45:06,930
<font color="#CCCCCC">epsilon depends on P sure yes if P is</font>

1002
00:45:03,660 --> 00:45:12,288
<font color="#CCCCCC">very large</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> yeah it's probably</font><font color="#E5E5E5"> hard</font>

1003
00:45:06,930 --> 00:45:20,940
<font color="#E5E5E5">might as well work with the real version</font>

1004
00:45:12,289 --> 00:45:24,180
<font color="#E5E5E5">if P is large okay good so this</font><font color="#CCCCCC"> is where</font>

1005
00:45:20,940 --> 00:45:26,519
we act now<font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have very nice</font>

1006
00:45:24,180 --> 00:45:32,450
<font color="#E5E5E5">worst-case to average case reductions</font>

1007
00:45:26,519 --> 00:45:36,629
for the decision versions<font color="#E5E5E5"> so what if I</font>

1008
00:45:32,450 --> 00:45:39,509
<font color="#E5E5E5">just a third</font><font color="#CCCCCC"> there there that they're</font>

1009
00:45:36,630 --> 00:45:41,849
hard on average and then later<font color="#E5E5E5"> hopefully</font>

1010
00:45:39,509 --> 00:45:43,019
prove that they are what<font color="#CCCCCC"> doesn't work</font>

1011
00:45:41,849 --> 00:45:44,819
even<font color="#E5E5E5"> what follows</font>

1012
00:45:43,019 --> 00:45:47,910
can we show something<font color="#E5E5E5"> interesting there</font>

1013
00:45:44,819 --> 00:45:50,009
follows<font color="#E5E5E5"> so for example let's</font><font color="#CCCCCC"> take this</font>

1014
00:45:47,910 --> 00:45:53,700
problem<font color="#CCCCCC"> threesome which</font><font color="#E5E5E5"> is related to</font>

1015
00:45:50,009 --> 00:45:55,890
subset sum<font color="#E5E5E5"> okay but for threesome we</font>

1016
00:45:53,700 --> 00:45:58,319
could make this assumption which is

1017
00:45:55,890 --> 00:46:00,629
completely plausible<font color="#E5E5E5"> with respect to all</font>

1018
00:45:58,319 --> 00:46:03,930
we know<font color="#E5E5E5"> so what is the assumption you're</font>

1019
00:46:00,630 --> 00:46:06,420
given three sets of<font color="#E5E5E5"> size n each is drawn</font>

1020
00:46:03,930 --> 00:46:08,279
uniformly at random from minus n to<font color="#CCCCCC"> the</font>

1021
00:46:06,420 --> 00:46:13,019
<font color="#CCCCCC">D to n to the D I</font><font color="#E5E5E5"> think of these like a</font>

1022
00:46:08,279 --> 00:46:15,720
hundred<font color="#CCCCCC"> okay and then we say that every</font>

1023
00:46:13,019 --> 00:46:17,160
sub quadratic time algorithm<font color="#E5E5E5"> that's</font>

1024
00:46:15,720 --> 00:46:19,439
supposed to<font color="#E5E5E5"> solve three some of the</font>

1025
00:46:17,160 --> 00:46:21,629
<font color="#E5E5E5">instances makes a mistake like on half</font>

1026
00:46:19,440 --> 00:46:24,089
<font color="#CCCCCC">the instance it could</font><font color="#E5E5E5"> be this could be</font>

1027
00:46:21,630 --> 00:46:26,700
<font color="#E5E5E5">true we don't have algorithms ruling</font>

1028
00:46:24,089 --> 00:46:29,880
<font color="#E5E5E5">this out does this give you anything new</font>

1029
00:46:26,700 --> 00:46:31,348
in<font color="#CCCCCC"> cryptography so we know that you can</font>

1030
00:46:29,880 --> 00:46:34,019
build<font color="#E5E5E5"> crypto</font><font color="#CCCCCC"> care of cryptographic</font>

1031
00:46:31,349 --> 00:46:37,559
primitives from<font color="#CCCCCC"> subset sample</font><font color="#E5E5E5"> if we have</font>

1032
00:46:34,019 --> 00:46:40,828
<font color="#E5E5E5">these results</font><font color="#CCCCCC"> but can you also get ones</font>

1033
00:46:37,559 --> 00:46:44,789
from threesome<font color="#CCCCCC"> and this would also</font><font color="#E5E5E5"> be</font>

1034
00:46:40,829 --> 00:46:47,009
interesting right so why not<font color="#E5E5E5"> and maybe</font>

1035
00:46:44,789 --> 00:46:52,559
someday we'll prove this this is<font color="#E5E5E5"> fine</font>

1036
00:46:47,009 --> 00:46:56,400
<font color="#E5E5E5">going hard I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know okay so in</font>

1037
00:46:52,559 --> 00:46:58,859
conclusion<font color="#CCCCCC"> I mentioned that this few has</font>

1038
00:46:56,400 --> 00:47:00,130
<font color="#E5E5E5">been growing and I'm really excited to</font>

1039
00:46:58,859 --> 00:47:02,500
see what's next

1040
00:47:00,130 --> 00:47:06,270
I don't know what's<font color="#CCCCCC"> gonna come next and</font>

1041
00:47:02,500 --> 00:47:06,270
I hope you guys<font color="#E5E5E5"> can help</font>

1042
00:47:06,710 --> 00:47:15,539
[Applause]

1043
00:47:30,610 --> 00:47:35,680
oh yeah<font color="#CCCCCC"> if I believe these I should</font>

1044
00:47:34,420 --> 00:47:38,290
<font color="#CCCCCC">definitely believe</font><font color="#E5E5E5"> their hardness</font>

1045
00:47:35,680 --> 00:47:39,970
<font color="#E5E5E5">business the algebraic</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> yes I think</font>

1046
00:47:38,290 --> 00:47:49,509
<font color="#E5E5E5">they're probably much harder</font><font color="#CCCCCC"> actually</font>

1047
00:47:39,970 --> 00:47:54,399
<font color="#E5E5E5">run these ones yeah yes for fine-grained</font>

1048
00:47:49,510 --> 00:47:56,140
<font color="#E5E5E5">space complexity so so actually it's a</font>

1049
00:47:54,400 --> 00:47:59,860
good<font color="#E5E5E5"> question so you know the threesome</font>

1050
00:47:56,140 --> 00:48:02,500
problem<font color="#CCCCCC"> if you consider algorithms that</font>

1051
00:47:59,860 --> 00:48:06,280
take square<font color="#E5E5E5"> root of n space</font><font color="#CCCCCC"> less than</font>

1052
00:48:02,500 --> 00:48:08,260
square root<font color="#E5E5E5"> of n space then actually</font>

1053
00:48:06,280 --> 00:48:10,380
turns out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> a threesome hypothesis is</font>

1054
00:48:08,260 --> 00:48:13,240
equivalent to the hypothesis that

1055
00:48:10,380 --> 00:48:16,260
<font color="#E5E5E5">algorithms that take less</font><font color="#CCCCCC"> than square</font>

1056
00:48:13,240 --> 00:48:19,899
<font color="#E5E5E5">root of n space must take n square times</font>

1057
00:48:16,260 --> 00:48:22,860
which seems more<font color="#E5E5E5"> believable right but</font>

1058
00:48:19,900 --> 00:48:22,860
<font color="#E5E5E5">actually it's the same</font>

1059
00:48:44,340 --> 00:48:48,990
so the question is is there a notion<font color="#E5E5E5"> of</font>

1060
00:48:47,010 --> 00:48:50,520
a<font color="#E5E5E5"> shortcut for this</font><font color="#CCCCCC"> problems way if you</font>

1061
00:48:48,990 --> 00:48:53,759
know the shortcut then<font color="#CCCCCC"> you could get a</font>

1062
00:48:50,520 --> 00:48:57,210
better algorithm<font color="#E5E5E5"> so so one thing I can</font>

1063
00:48:53,760 --> 00:48:59,070
think of is suppose your input has some

1064
00:48:57,210 --> 00:49:03,150
special structure and you<font color="#E5E5E5"> know what it</font>

1065
00:48:59,070 --> 00:49:05,190
<font color="#E5E5E5">is for</font><font color="#CCCCCC"> example there</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have a graph</font>

1066
00:49:03,150 --> 00:49:06,540
let's<font color="#E5E5E5"> say and it has small tree with and</font>

1067
00:49:05,190 --> 00:49:08,910
I have the tree with the<font color="#E5E5E5"> cheetah</font>

1068
00:49:06,540 --> 00:49:15,450
composition then I can solve<font color="#E5E5E5"> it faster</font>

1069
00:49:08,910 --> 00:49:20,520
<font color="#E5E5E5">and there's arch it's so secret a secret</font>

1070
00:49:15,450 --> 00:49:22,259
<font color="#CCCCCC">okay okay I have to think</font><font color="#E5E5E5"> about it I</font>

1071
00:49:20,520 --> 00:49:49,440
think<font color="#E5E5E5"> yes I think</font><font color="#CCCCCC"> the answer is L do I</font>

1072
00:49:22,260 --> 00:49:58,050
have<font color="#E5E5E5"> to think about we should said D</font>

1073
00:49:49,440 --> 00:50:00,540
equals<font color="#CCCCCC"> 3 well what I</font><font color="#E5E5E5"> need to do is</font>

1074
00:49:58,050 --> 00:50:04,200
change<font color="#CCCCCC"> half to something that</font><font color="#E5E5E5"> depends on</font>

1075
00:50:00,540 --> 00:50:06,090
on D I need<font color="#E5E5E5"> to change this half over</font>

1076
00:50:04,200 --> 00:50:08,160
here you're right it's a mistake here

1077
00:50:06,090 --> 00:50:10,110
but this half over here dependents

1078
00:50:08,160 --> 00:50:12,240
should depend on D on how large the

1079
00:50:10,110 --> 00:50:17,450
things but for D equals 3<font color="#E5E5E5"> you should</font><font color="#CCCCCC"> be</font>

1080
00:50:12,240 --> 00:50:17,450
like some constant<font color="#CCCCCC"> okay thanks yeah</font>

1081
00:50:21,040 --> 00:50:31,120
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> oh yes okay</font><font color="#CCCCCC"> so what he's saying is I</font>

1082
00:50:28,330 --> 00:50:33,370
am<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about this fine great notion</font>

1083
00:50:31,120 --> 00:50:36,310
where I have a function<font color="#CCCCCC"> divided</font><font color="#E5E5E5"> to the</font>

1084
00:50:33,370 --> 00:50:37,779
<font color="#CCCCCC">one minus</font><font color="#E5E5E5"> Epsilon he's saying</font><font color="#CCCCCC"> it doesn't</font>

1085
00:50:36,310 --> 00:50:39,880
<font color="#E5E5E5">make sense to</font><font color="#CCCCCC"> also talk about</font>

1086
00:50:37,780 --> 00:50:42,040
improvements in<font color="#E5E5E5"> terms of</font><font color="#CCCCCC"> Polly logs and</font>

1087
00:50:39,880 --> 00:50:44,380
<font color="#E5E5E5">terms of the constant factors</font><font color="#CCCCCC"> and so on</font>

1088
00:50:42,040 --> 00:50:46,660
<font color="#E5E5E5">and yes it does</font><font color="#CCCCCC"> make sense and</font><font color="#E5E5E5"> in fact</font>

1089
00:50:44,380 --> 00:50:49,660
some of these fine<font color="#CCCCCC"> grade reductions do</font>

1090
00:50:46,660 --> 00:50:52,830
preserve<font color="#E5E5E5"> Polly logs in many instances</font>

1091
00:50:49,660 --> 00:50:56,319
and you can use this to show very strong

1092
00:50:52,830 --> 00:50:58,330
hardness<font color="#E5E5E5"> so you can show for example</font>

1093
00:50:56,320 --> 00:51:00,670
<font color="#CCCCCC">that the</font><font color="#E5E5E5"> longest common subsequence</font>

1094
00:50:58,330 --> 00:51:03,279
problem if you get<font color="#CCCCCC"> a faster than N</font>

1095
00:51:00,670 --> 00:51:07,600
squared over<font color="#E5E5E5"> log to</font><font color="#CCCCCC"> the ten for</font><font color="#E5E5E5"> example</font>

1096
00:51:03,280 --> 00:51:09,880
an algorithm then very strange results

1097
00:51:07,600 --> 00:51:12,130
in circuit complexity come about<font color="#E5E5E5"> so you</font>

1098
00:51:09,880 --> 00:51:15,040
<font color="#E5E5E5">can you can</font><font color="#CCCCCC"> actually do this but for the</font>

1099
00:51:12,130 --> 00:51:19,170
purposes of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> talk on art</font><font color="#E5E5E5"> I didn't go</font>

1100
00:51:15,040 --> 00:51:19,170
into<font color="#E5E5E5"> this yeah</font>

1101
00:51:22,700 --> 00:51:29,720
yeah yeah

1102
00:51:35,770 --> 00:51:41,670
<font color="#CCCCCC">Oh so I I</font><font color="#E5E5E5"> don't remember exactly</font><font color="#CCCCCC"> what</font>

1103
00:51:39,250 --> 00:51:45,220
<font color="#CCCCCC">the dependence of epsilon</font><font color="#E5E5E5"> on peers I</font>

1104
00:51:41,670 --> 00:51:47,530
think I'm<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna say the wrong things</font>

1105
00:51:45,220 --> 00:51:49,720
<font color="#CCCCCC">per Lisa it's important o me o and</font><font color="#E5E5E5"> P</font><font color="#CCCCCC"> but</font>

1106
00:51:47,530 --> 00:51:51,490
I<font color="#E5E5E5"> don't know</font><font color="#CCCCCC"> inverse polynomial but</font><font color="#E5E5E5"> I</font>

1107
00:51:49,720 --> 00:51:54,540
<font color="#E5E5E5">don't remember maybes quadratics</font><font color="#CCCCCC"> you</font>

1108
00:51:51,490 --> 00:51:54,540
<font color="#E5E5E5">have to check the paper</font>

1109
00:51:57,640 --> 00:52:02,600
[Applause]

