1
00:00:05,110 --> 00:00:09,440
does this work yeah oh there we go great

2
00:00:07,580 --> 00:00:09,980
um so thank you very much thanks the

3
00:00:09,440 --> 00:00:11,660
organizers

4
00:00:09,980 --> 00:00:12,980
more generally and actually before we

5
00:00:11,660 --> 00:00:14,719
get started I just want to highlight a

6
00:00:12,980 --> 00:00:17,539
few excellent people that Dan and I have

7
00:00:14,719 --> 00:00:18,860
working with in and around the IETF so

8
00:00:17,539 --> 00:00:20,720
there are the other authors of the BLS

9
00:00:18,860 --> 00:00:21,560
signatures and hash to curve drafts and

10
00:00:20,720 --> 00:00:23,119
there are plenty of people who have

11
00:00:21,560 --> 00:00:25,729
given very careful and very useful

12
00:00:23,120 --> 00:00:29,000
feedback and if I've forgotten anyone

13
00:00:25,730 --> 00:00:30,830
I'm very sorry I think you too so let's

14
00:00:29,000 --> 00:00:33,710
start we've seen this a couple times but

15
00:00:30,830 --> 00:00:36,260
maybe we'll think about it one more time

16
00:00:33,710 --> 00:00:38,120
what why are we standardizing things so

17
00:00:36,260 --> 00:00:39,379
one obvious thing is well we wanna be

18
00:00:38,120 --> 00:00:41,358
able to interoperate so if I tell you

19
00:00:39,379 --> 00:00:43,010
I'm gonna be using H max sha-256 and I

20
00:00:41,359 --> 00:00:44,659
send you a Mac tag you're gonna be able

21
00:00:43,010 --> 00:00:47,178
to you know understand what it means and

22
00:00:44,659 --> 00:00:48,890
verify it and this means that we want to

23
00:00:47,179 --> 00:00:50,749
be sort of detail-oriented and precise

24
00:00:48,890 --> 00:00:53,899
about you know how things are specified

25
00:00:50,749 --> 00:00:56,239
but that feels almost like a like a

26
00:00:53,899 --> 00:00:57,679
bother like a cost whereas maybe we

27
00:00:56,239 --> 00:01:00,078
should be thinking about this in terms

28
00:00:57,679 --> 00:01:01,699
of an opportunity like we can do careful

29
00:01:00,079 --> 00:01:04,070
thinking up front and we can make sure

30
00:01:01,699 --> 00:01:05,089
that things are secure and efficient so

31
00:01:04,069 --> 00:01:07,009
that you know there aren't these

32
00:01:05,089 --> 00:01:08,960
problems later so let's think about a

33
00:01:07,010 --> 00:01:10,670
specific example just to see the kind of

34
00:01:08,960 --> 00:01:12,140
thinking that maybe we want to do and

35
00:01:10,670 --> 00:01:14,300
why maybe those things tend to get

36
00:01:12,140 --> 00:01:15,890
missed so let's think about the invalid

37
00:01:14,300 --> 00:01:18,289
curve attack so this was described at

38
00:01:15,890 --> 00:01:20,450
crypto 2000 bill Meyer and Mueller and

39
00:01:18,290 --> 00:01:22,040
so here's some cartoon protocol right

40
00:01:20,450 --> 00:01:24,200
I'm going to send you and I looked at

41
00:01:22,040 --> 00:01:25,790
curve point and you're gonna take your

42
00:01:24,200 --> 00:01:28,100
secret scalar multiply it by the curve

43
00:01:25,790 --> 00:01:29,870
point and send me back the result but

44
00:01:28,100 --> 00:01:31,640
the problem is your software was badly

45
00:01:29,870 --> 00:01:33,170
written and it doesn't bother to check

46
00:01:31,640 --> 00:01:35,060
that the point is on the curve so the

47
00:01:33,170 --> 00:01:36,500
result is that I can sneak a lower to

48
00:01:35,060 --> 00:01:39,230
point to you and you will send me back

49
00:01:36,500 --> 00:01:41,570
the the you're essentially your scalar

50
00:01:39,230 --> 00:01:43,220
mod some small value and then since

51
00:01:41,570 --> 00:01:45,169
discrete log is easy mod small values

52
00:01:43,220 --> 00:01:46,640
I'll be able to figure out your point so

53
00:01:45,170 --> 00:01:48,710
if we interact in a you know a dozen

54
00:01:46,640 --> 00:01:52,400
times it's game over I have your your

55
00:01:48,710 --> 00:01:54,229
secret so this actually happens for real

56
00:01:52,400 --> 00:01:56,600
and things like blind signatures Oh prfs

57
00:01:54,230 --> 00:01:57,940
and actually even in key exchanges we

58
00:01:56,600 --> 00:02:00,140
can get something very close to this and

59
00:01:57,940 --> 00:02:02,810
so the question is something like okay

60
00:02:00,140 --> 00:02:04,040
why why is this happening well there are

61
00:02:02,810 --> 00:02:05,960
a couple things that come to mind so

62
00:02:04,040 --> 00:02:08,209
first when we think about protocols in

63
00:02:05,960 --> 00:02:09,318
general we tend to think like you know

64
00:02:08,209 --> 00:02:11,180
in a crypto paper we think about

65
00:02:09,318 --> 00:02:12,920
mathematical objects right I told you

66
00:02:11,180 --> 00:02:14,300
I'm sending you an elliptic curve point

67
00:02:12,920 --> 00:02:15,950
but in some times that doesn't make any

68
00:02:14,300 --> 00:02:17,600
sense right what I'm really going to

69
00:02:15,950 --> 00:02:17,760
send you is a string of bytes and then

70
00:02:17,600 --> 00:02:20,640
you

71
00:02:17,760 --> 00:02:22,590
have to interpret that as a point on a

72
00:02:20,640 --> 00:02:26,548
curve right and that interpretation is

73
00:02:22,590 --> 00:02:27,780
prone to error why well we have some in

74
00:02:26,549 --> 00:02:29,459
some sense we have some ambient

75
00:02:27,780 --> 00:02:30,900
knowledge right all around us there are

76
00:02:29,459 --> 00:02:32,579
these attacks and we know that they're

77
00:02:30,900 --> 00:02:33,870
there but we ignore them because look

78
00:02:32,579 --> 00:02:35,670
there's only so much room in the

79
00:02:33,870 --> 00:02:37,200
background section of the paper right so

80
00:02:35,670 --> 00:02:38,369
you don't write it down every attack you

81
00:02:37,200 --> 00:02:39,929
just say of course well there are other

82
00:02:38,370 --> 00:02:41,909
attacks okay but but when we actually

83
00:02:39,930 --> 00:02:43,799
write a standard we need to sort of

84
00:02:41,909 --> 00:02:45,959
distill that ambient knowledge into

85
00:02:43,799 --> 00:02:48,689
concrete statements on the page like

86
00:02:45,959 --> 00:02:51,720
check this point this sort of thing okay

87
00:02:48,689 --> 00:02:54,510
so this is again maybe this feels like a

88
00:02:51,720 --> 00:02:56,700
bother but actually maybe what we should

89
00:02:54,510 --> 00:02:58,470
call it is polite crypto with apologies

90
00:02:56,700 --> 00:03:00,298
to Dijkstra so the idea is something

91
00:02:58,470 --> 00:03:03,420
like lifts this look if I can spend an

92
00:03:00,299 --> 00:03:05,159
hour and make sure that you know you

93
00:03:03,420 --> 00:03:07,409
don't have to you know read the standard

94
00:03:05,159 --> 00:03:09,060
ten times and maybe go off to ten other

95
00:03:07,409 --> 00:03:11,310
documents or maybe I save you from

96
00:03:09,060 --> 00:03:13,950
writing bad software that's definitely a

97
00:03:11,310 --> 00:03:15,269
worthwhile trade-off okay and in some

98
00:03:13,950 --> 00:03:16,888
sense we should regard that as like a

99
00:03:15,269 --> 00:03:19,109
statement of like an optimistic

100
00:03:16,889 --> 00:03:20,459
statement right like of course a hundred

101
00:03:19,109 --> 00:03:22,109
people are gonna read this document or

102
00:03:20,459 --> 00:03:23,940
maybe even a thousand right and so of

103
00:03:22,109 --> 00:03:26,069
course it's worthwhile to spend an hour

104
00:03:23,940 --> 00:03:28,799
on this right so let's let's be polite

105
00:03:26,069 --> 00:03:30,780
in our standards okay and okay so

106
00:03:28,799 --> 00:03:33,139
finally one maybe one more reason that

107
00:03:30,780 --> 00:03:36,209
maybe this only applies to me to

108
00:03:33,139 --> 00:03:38,190
standardize things is we have to be

109
00:03:36,209 --> 00:03:40,560
pragmatic about it and look I have a

110
00:03:38,190 --> 00:03:41,940
tendency writing software oh there's a

111
00:03:40,560 --> 00:03:43,650
little knob that I could add a little

112
00:03:41,940 --> 00:03:45,150
dial that I could add that would give us

113
00:03:43,650 --> 00:03:47,340
you know two percent more efficiency in

114
00:03:45,150 --> 00:03:48,810
this case well the problem is every one

115
00:03:47,340 --> 00:03:49,889
of these knobs has a correct setting

116
00:03:48,810 --> 00:03:51,239
that gives us two percent more

117
00:03:49,889 --> 00:03:53,129
efficiency and then it has a hundred

118
00:03:51,239 --> 00:03:54,510
incorrect settings that gives us you

119
00:03:53,129 --> 00:03:56,698
know sort of a hundred percent overhead

120
00:03:54,510 --> 00:03:59,370
right the users don't want that they

121
00:03:56,699 --> 00:04:01,859
want sort of a reasonable set of

122
00:03:59,370 --> 00:04:03,569
defaults and and you know make some

123
00:04:01,859 --> 00:04:04,739
decisions for them so this is a good

124
00:04:03,569 --> 00:04:06,000
thing in the sense that you have to make

125
00:04:04,739 --> 00:04:08,310
decisions but it's a bad thing in that

126
00:04:06,000 --> 00:04:09,900
you have to make the right ones okay so

127
00:04:08,310 --> 00:04:11,340
that's enough philosophy so let's talk a

128
00:04:09,900 --> 00:04:12,750
little bit about what it is to

129
00:04:11,340 --> 00:04:15,180
standardize scripted with the IETF and

130
00:04:12,750 --> 00:04:16,620
then at the end I'll give you maybe last

131
00:04:15,180 --> 00:04:18,930
half I'll give you sort of specific

132
00:04:16,620 --> 00:04:20,789
information about what we're doing with

133
00:04:18,930 --> 00:04:24,210
pls signatures and hash the curve and

134
00:04:20,789 --> 00:04:26,360
things like this okay so the IETF is

135
00:04:24,210 --> 00:04:28,560
sort of this fascinating organization

136
00:04:26,360 --> 00:04:30,250
and I say this sort of as an outsider

137
00:04:28,560 --> 00:04:32,290
it's almost like a

138
00:04:30,250 --> 00:04:35,500
it's like a testament to the power of

139
00:04:32,290 --> 00:04:37,240
almost constrained chaos and that's a

140
00:04:35,500 --> 00:04:39,070
loving statement like if you go to an

141
00:04:37,240 --> 00:04:40,570
IETF meeting there's something like very

142
00:04:39,070 --> 00:04:42,099
impressive about it there's a lot of

143
00:04:40,570 --> 00:04:44,650
work going on there are people who are

144
00:04:42,100 --> 00:04:47,470
excited and there's just a lot of people

145
00:04:44,650 --> 00:04:49,270
who are very good at what they do it's

146
00:04:47,470 --> 00:04:51,460
so the unofficial motto that they have

147
00:04:49,270 --> 00:04:53,049
kind of reflects this anyone can go to

148
00:04:51,460 --> 00:04:54,340
an IETF meeting and you don't have to be

149
00:04:53,050 --> 00:04:55,690
a member or anything you just go you

150
00:04:54,340 --> 00:04:57,250
show up and you shout into the

151
00:04:55,690 --> 00:04:59,800
microphone because you've got a problem

152
00:04:57,250 --> 00:05:01,570
and maybe they listen to you but maybe

153
00:04:59,800 --> 00:05:03,880
they don't because not everyone has to

154
00:05:01,570 --> 00:05:06,400
agree it's only rough consensus and the

155
00:05:03,880 --> 00:05:07,990
running code part maybe we can interpret

156
00:05:06,400 --> 00:05:09,909
it a bit broadly to mean something like

157
00:05:07,990 --> 00:05:12,010
this look the stuff is made to be used

158
00:05:09,910 --> 00:05:15,280
so it's our responsibility to make it

159
00:05:12,010 --> 00:05:18,130
usable okay so how about crypto well the

160
00:05:15,280 --> 00:05:21,489
CFR G is sort of the research group

161
00:05:18,130 --> 00:05:23,680
within the IETF whose job is to sort of

162
00:05:21,490 --> 00:05:26,020
consult on security matters and also to

163
00:05:23,680 --> 00:05:27,310
standardize kind of new crypto and since

164
00:05:26,020 --> 00:05:29,500
what we're here to talk about today is

165
00:05:27,310 --> 00:05:31,480
advanced crypto I'm gonna ignore like

166
00:05:29,500 --> 00:05:33,430
the other routes that you might take to

167
00:05:31,480 --> 00:05:35,260
standardizing crypto so for example the

168
00:05:33,430 --> 00:05:38,050
TLS working group doesn't fall under the

169
00:05:35,260 --> 00:05:40,539
CFR G they do their own thing but but

170
00:05:38,050 --> 00:05:42,070
you know that's sort of more that's not

171
00:05:40,540 --> 00:05:45,729
the advanced stuff so we're gonna ignore

172
00:05:42,070 --> 00:05:47,260
that so the standards that the CFR G

173
00:05:45,729 --> 00:05:48,940
publishes well they're not actually

174
00:05:47,260 --> 00:05:52,479
standards they're called informational

175
00:05:48,940 --> 00:05:54,880
RFC s RFC is requests for commentary RFC

176
00:05:52,479 --> 00:05:58,719
793 is TCP so like lots of things there

177
00:05:54,880 --> 00:06:01,300
are EFI RFC's and informational ones

178
00:05:58,720 --> 00:06:04,140
aren't standards per se but things like

179
00:06:01,300 --> 00:06:06,340
TLS can incorporate informational RFC's

180
00:06:04,140 --> 00:06:08,020
into you know the document so for

181
00:06:06,340 --> 00:06:10,869
example the curve two five four one nine

182
00:06:08,020 --> 00:06:12,849
RFC is incorporated into TLS 1.3 it's an

183
00:06:10,870 --> 00:06:15,070
official thing even though it's only an

184
00:06:12,850 --> 00:06:16,300
informational RFC so you know don't

185
00:06:15,070 --> 00:06:18,790
don't be disheartened you should write

186
00:06:16,300 --> 00:06:20,710
informational RFC and finally a lot of

187
00:06:18,790 --> 00:06:23,169
the business in the CFR G is transacted

188
00:06:20,710 --> 00:06:26,200
on the mailing list you know if you have

189
00:06:23,169 --> 00:06:28,630
fond memories of like the news groups I

190
00:06:26,200 --> 00:06:30,250
crypt from 25 years ago then this will

191
00:06:28,630 --> 00:06:32,050
be very familiar except probably they're

192
00:06:30,250 --> 00:06:32,979
a bit more polite on the see of our G

193
00:06:32,050 --> 00:06:35,740
mailing list than they were on sigh

194
00:06:32,979 --> 00:06:37,360
crypt so it's a good first step to you

195
00:06:35,740 --> 00:06:38,800
know jump on in and and sort of

196
00:06:37,360 --> 00:06:40,960
acculturate yourself on the mailing list

197
00:06:38,800 --> 00:06:41,979
and get an idea of how things are going

198
00:06:40,960 --> 00:06:44,080
okay

199
00:06:41,979 --> 00:06:46,270
so what is it like to write a draft

200
00:06:44,080 --> 00:06:49,060
well the official process is documented

201
00:06:46,270 --> 00:06:51,430
in an RFC and

202
00:06:49,060 --> 00:06:53,349
for for research groups like the CFR G

203
00:06:51,430 --> 00:06:55,319
basically there are four steps written

204
00:06:53,349 --> 00:06:58,750
in the official document prepare a draft

205
00:06:55,319 --> 00:07:00,819
review it a few times and then publish

206
00:06:58,750 --> 00:07:02,500
it and so like really the CFR G is

207
00:07:00,819 --> 00:07:05,199
responsible for the technical content

208
00:07:02,500 --> 00:07:06,909
the IRT F is sort of there to make sure

209
00:07:05,199 --> 00:07:08,979
that competent implementers who aren't

210
00:07:06,909 --> 00:07:11,020
experts in the area can parse the

211
00:07:08,979 --> 00:07:12,609
document the IES G is there to make sure

212
00:07:11,020 --> 00:07:14,438
you're not stepping on any toes so for

213
00:07:12,610 --> 00:07:16,599
example if you really want to you know

214
00:07:14,439 --> 00:07:18,250
standardize a new kind of DNS the the

215
00:07:16,599 --> 00:07:20,289
CFR G isn't the right place for that

216
00:07:18,250 --> 00:07:22,509
and so the IES G is going to tell you no

217
00:07:20,289 --> 00:07:24,219
and then finally the RFC editor is doing

218
00:07:22,509 --> 00:07:26,050
copy editing they do an excellent job

219
00:07:24,219 --> 00:07:29,139
but they're very card or very overworked

220
00:07:26,050 --> 00:07:31,750
so nice to them please okay that's the

221
00:07:29,139 --> 00:07:33,430
official view of the world but it all of

222
00:07:31,750 --> 00:07:35,349
the work that you will do if you write a

223
00:07:33,430 --> 00:07:38,440
standard is hidden in step one so let's

224
00:07:35,349 --> 00:07:39,819
zoom in a little bit so the first thing

225
00:07:38,440 --> 00:07:41,289
that you should do if you're going to

226
00:07:39,819 --> 00:07:43,300
standardize something at the IETF is

227
00:07:41,289 --> 00:07:45,520
make sure you should be standardizing

228
00:07:43,300 --> 00:07:47,229
something at the IETF in particular like

229
00:07:45,520 --> 00:07:48,400
identify some people who actually want

230
00:07:47,229 --> 00:07:50,169
to use the thing that you want to

231
00:07:48,400 --> 00:07:52,029
standardize and talk to them about it

232
00:07:50,169 --> 00:07:54,370
also talk to the CFR G chairs maybe

233
00:07:52,029 --> 00:07:55,810
other people in the CFR G and kind of

234
00:07:54,370 --> 00:07:57,490
get an idea look there's a consensus

235
00:07:55,810 --> 00:07:58,870
that we need this thing and that we

236
00:07:57,490 --> 00:08:01,089
should be the we should be writing down

237
00:07:58,870 --> 00:08:03,699
a standard for it so once you've got

238
00:08:01,089 --> 00:08:05,259
that idea in your head then it's time to

239
00:08:03,699 --> 00:08:07,990
write an individual draft so this is

240
00:08:05,259 --> 00:08:09,759
like the first draft of the standard and

241
00:08:07,990 --> 00:08:11,830
you know it's it's not gonna be perfect

242
00:08:09,759 --> 00:08:14,050
that's okay can I have to do spread all

243
00:08:11,830 --> 00:08:16,479
over the place totally fine the idea is

244
00:08:14,050 --> 00:08:18,699
to give people a notion of what it's

245
00:08:16,479 --> 00:08:20,770
going to eventually look like so that

246
00:08:18,699 --> 00:08:22,839
now people on the CFR G and you know

247
00:08:20,770 --> 00:08:24,339
your users that you've identified can

248
00:08:22,839 --> 00:08:26,050
give you feedback like well what we

249
00:08:24,339 --> 00:08:27,789
really need is this other functionality

250
00:08:26,050 --> 00:08:29,529
that that's not covered here that's the

251
00:08:27,789 --> 00:08:30,669
kind of feedback you want once you've

252
00:08:29,529 --> 00:08:33,070
gotten to the point where oh I should

253
00:08:30,669 --> 00:08:35,890
mention before I continue um when you

254
00:08:33,070 --> 00:08:38,140
write an RFC the the official format is

255
00:08:35,890 --> 00:08:39,729
this horrific XML thing you don't want

256
00:08:38,140 --> 00:08:40,029
to write that by hand it's it's a total

257
00:08:39,729 --> 00:08:42,669
nightmare

258
00:08:40,029 --> 00:08:43,990
the the workflow I probably will feel a

259
00:08:42,669 --> 00:08:46,300
little primitive if you're coming from

260
00:08:43,990 --> 00:08:48,160
tech but you know it's getting better

261
00:08:46,300 --> 00:08:50,800
nowadays you can use markdown and sort

262
00:08:48,160 --> 00:08:53,079
of automatically transform things there

263
00:08:50,800 --> 00:08:54,279
there's a github workflow I totally

264
00:08:53,079 --> 00:08:56,050
recommend that because it's really nice

265
00:08:54,279 --> 00:08:57,850
to be able to get you know feedback from

266
00:08:56,050 --> 00:09:00,519
people via issues and polar

267
00:08:57,850 --> 00:09:03,009
Quest's and this sort of thing okay so

268
00:09:00,519 --> 00:09:04,779
now we have an individual draft people

269
00:09:03,009 --> 00:09:06,550
are basically okay with it so it's time

270
00:09:04,779 --> 00:09:08,620
to call for adoption so now the CFR G

271
00:09:06,550 --> 00:09:10,660
says yes this is a thing that we're

272
00:09:08,620 --> 00:09:12,399
going to work on sort of as a group and

273
00:09:10,660 --> 00:09:15,639
at this point it becomes a working

274
00:09:12,399 --> 00:09:16,660
document in the CFR G and people on the

275
00:09:15,639 --> 00:09:19,509
mailing list are going to you know

276
00:09:16,660 --> 00:09:21,550
volunteer to read your document to give

277
00:09:19,509 --> 00:09:22,899
you feedback that sort of thing okay so

278
00:09:21,550 --> 00:09:24,639
now at this point this is where you're

279
00:09:22,899 --> 00:09:26,589
really going to get to get the document

280
00:09:24,639 --> 00:09:28,029
in shape so you can edit it

281
00:09:26,589 --> 00:09:30,480
you're gonna implement most likely a

282
00:09:28,029 --> 00:09:32,860
reference implementation of it and

283
00:09:30,480 --> 00:09:34,360
probably you'll go to at least one ITF

284
00:09:32,860 --> 00:09:35,860
meeting and give a presentation there

285
00:09:34,360 --> 00:09:37,089
short five or ten minutes there's a lot

286
00:09:35,860 --> 00:09:38,980
of interaction people come up to the

287
00:09:37,089 --> 00:09:42,519
microphone you know it's kind of a fun

288
00:09:38,980 --> 00:09:44,980
interesting atmosphere this is where all

289
00:09:42,519 --> 00:09:47,920
the work is getting done and so it's

290
00:09:44,980 --> 00:09:49,380
kind of nice to go at some point you're

291
00:09:47,920 --> 00:09:51,639
gonna say look this is it we're done

292
00:09:49,380 --> 00:09:52,959
then there will be a last call which is

293
00:09:51,639 --> 00:09:55,209
sort of a speak now or forever hold your

294
00:09:52,959 --> 00:09:57,489
peace once that's done then we you know

295
00:09:55,209 --> 00:09:59,258
we go to those other steps so that you

296
00:09:57,490 --> 00:10:01,690
know that we're in the last slide so the

297
00:09:59,259 --> 00:10:05,560
irt off etc okay so how long does all

298
00:10:01,690 --> 00:10:07,930
this take well an example is the curfew

299
00:10:05,560 --> 00:10:09,880
509 RFC which took about a year end to

300
00:10:07,930 --> 00:10:12,040
end so from the first individual draft

301
00:10:09,880 --> 00:10:14,500
that got uploaded to RFC editor

302
00:10:12,040 --> 00:10:16,240
releasing the document was you know I

303
00:10:14,500 --> 00:10:18,459
don't know within 30 days of one year

304
00:10:16,240 --> 00:10:20,980
and there were in that time there about

305
00:10:18,459 --> 00:10:22,839
twelve drafts and most of them were

306
00:10:20,980 --> 00:10:24,430
small edits but you know there was sort

307
00:10:22,839 --> 00:10:26,800
of a bunch of editing process going on

308
00:10:24,430 --> 00:10:28,870
and if you look in the data tracker a

309
00:10:26,800 --> 00:10:29,920
etf torge they give you sort of all the

310
00:10:28,870 --> 00:10:31,329
information about the history of

311
00:10:29,920 --> 00:10:34,990
documents and so what's interesting here

312
00:10:31,329 --> 00:10:36,819
is IRT F and iesg basically takes zero

313
00:10:34,990 --> 00:10:39,360
time and the reason for this is there

314
00:10:36,819 --> 00:10:41,410
they don't just happen sort of in series

315
00:10:39,360 --> 00:10:42,610
everyone is sort of paying attention to

316
00:10:41,410 --> 00:10:44,350
documents as they go through the process

317
00:10:42,610 --> 00:10:46,029
and so you'll already have gotten some

318
00:10:44,350 --> 00:10:47,529
feedback from you know for example if

319
00:10:46,029 --> 00:10:49,750
you're trying to standardize DNS under

320
00:10:47,529 --> 00:10:51,579
the CFR G the RFC editor queue

321
00:10:49,750 --> 00:10:53,199
unfortunately it takes a little while

322
00:10:51,579 --> 00:10:55,149
that's because like I said they're a

323
00:10:53,199 --> 00:10:57,359
little overworked but you know they do

324
00:10:55,149 --> 00:11:00,519
very high quality work so work with them

325
00:10:57,360 --> 00:11:02,139
so the drafts that we're working on BLS

326
00:11:00,519 --> 00:11:03,160
in hash to curve BLS has been in

327
00:11:02,139 --> 00:11:05,709
progress for about six months

328
00:11:03,160 --> 00:11:08,290
hash to curve is more like a year and a

329
00:11:05,709 --> 00:11:09,430
half we'll see why I think a little bit

330
00:11:08,290 --> 00:11:11,560
later but the

331
00:11:09,430 --> 00:11:13,270
the high level reason is hash the curve

332
00:11:11,560 --> 00:11:15,369
is more like a toolbox than a than a

333
00:11:13,270 --> 00:11:16,210
protocol and the result is you know we

334
00:11:15,370 --> 00:11:19,300
get pulled in a lot of different

335
00:11:16,210 --> 00:11:21,130
directions okay so I want to jump into

336
00:11:19,300 --> 00:11:22,780
these two standards but first there's

337
00:11:21,130 --> 00:11:23,470
one more maybe slightly unpleasant thing

338
00:11:22,780 --> 00:11:26,170
to talk about

339
00:11:23,470 --> 00:11:28,840
that's patents so you might guess that

340
00:11:26,170 --> 00:11:30,579
there's an RFC for that and there is and

341
00:11:28,840 --> 00:11:31,510
here's the idea if you're gonna if

342
00:11:30,580 --> 00:11:33,550
you're gonna standardize something with

343
00:11:31,510 --> 00:11:34,780
the IETF and you own a patent on it or

344
00:11:33,550 --> 00:11:37,839
your employer does then you must

345
00:11:34,780 --> 00:11:40,420
disclose that if you know of a patent

346
00:11:37,840 --> 00:11:41,680
but you don't own it still it would be

347
00:11:40,420 --> 00:11:44,229
nice if you disclose it though you're

348
00:11:41,680 --> 00:11:46,630
not formally required to and so once

349
00:11:44,230 --> 00:11:49,240
once any kind of intellectual property

350
00:11:46,630 --> 00:11:51,310
issues have been identified the CFR G

351
00:11:49,240 --> 00:11:53,740
chairs and the IETF Administration will

352
00:11:51,310 --> 00:11:55,449
go to the company that owns the patents

353
00:11:53,740 --> 00:11:57,580
and they'll say hey can you please

354
00:11:55,450 --> 00:11:59,800
promise that anyone who implements the

355
00:11:57,580 --> 00:12:01,360
standard will you know have some fair

356
00:11:59,800 --> 00:12:04,420
reasonable and non-discriminatory terms

357
00:12:01,360 --> 00:12:06,160
under which the they'll be licensed the

358
00:12:04,420 --> 00:12:07,000
problem with this I mean that's that's

359
00:12:06,160 --> 00:12:09,160
great

360
00:12:07,000 --> 00:12:10,270
but there is this issue that I'm nothing

361
00:12:09,160 --> 00:12:11,740
like a patent lawyer but my

362
00:12:10,270 --> 00:12:13,689
understanding is that the words fair

363
00:12:11,740 --> 00:12:15,790
reasonable and non-discriminatory can be

364
00:12:13,690 --> 00:12:17,770
interpreted very broadly and so

365
00:12:15,790 --> 00:12:19,270
understandably there's a lot of you know

366
00:12:17,770 --> 00:12:21,579
trepidation when something that's

367
00:12:19,270 --> 00:12:24,160
patented gets standardized and as a

368
00:12:21,580 --> 00:12:25,600
result basically the IETF security area

369
00:12:24,160 --> 00:12:27,550
that's not the CFR G that's things like

370
00:12:25,600 --> 00:12:29,680
the TLS working group and the IPSec

371
00:12:27,550 --> 00:12:32,890
working group they have essentially a

372
00:12:29,680 --> 00:12:35,140
policy that they won't require anyone to

373
00:12:32,890 --> 00:12:37,630
implement things that are encumbered by

374
00:12:35,140 --> 00:12:39,850
royalties so if I have to pay a royalty

375
00:12:37,630 --> 00:12:42,550
to implement this thing it will at best

376
00:12:39,850 --> 00:12:44,500
be optional there are other ways that

377
00:12:42,550 --> 00:12:46,420
you that even if it's patented maybe

378
00:12:44,500 --> 00:12:48,730
it's okay so reasonable and

379
00:12:46,420 --> 00:12:52,630
non-discriminatory with zero licensing

380
00:12:48,730 --> 00:12:54,580
Ramzi that's okay even better is if the

381
00:12:52,630 --> 00:12:57,490
owner sort of says we promise we won't

382
00:12:54,580 --> 00:12:59,010
patent but really from everyone's

383
00:12:57,490 --> 00:13:01,150
perspective in terms of standardizing

384
00:12:59,010 --> 00:13:03,700
the the best ones are the ones that

385
00:13:01,150 --> 00:13:06,030
don't have any patents associated so in

386
00:13:03,700 --> 00:13:08,950
short if you want your work to be used

387
00:13:06,030 --> 00:13:12,010
it probably it's best not to patent it

388
00:13:08,950 --> 00:13:13,510
because people will be nervous and you

389
00:13:12,010 --> 00:13:15,640
know rightfully so even if right now

390
00:13:13,510 --> 00:13:17,110
everyone is happy with the you know with

391
00:13:15,640 --> 00:13:18,970
the way that the patents are being

392
00:13:17,110 --> 00:13:20,620
treated you know in five years they can

393
00:13:18,970 --> 00:13:22,720
get to sold to somebody who will act

394
00:13:20,620 --> 00:13:25,990
very differently

395
00:13:22,720 --> 00:13:27,160
okay so let's take a deeper look at the

396
00:13:25,990 --> 00:13:28,509
specific stuff that we've been working

397
00:13:27,160 --> 00:13:30,459
on which BLS signatures in hashed a

398
00:13:28,509 --> 00:13:32,379
curve and I'm just gonna sort of review

399
00:13:30,459 --> 00:13:33,758
the technical content but then along the

400
00:13:32,379 --> 00:13:35,740
way sort of point out little things

401
00:13:33,759 --> 00:13:37,240
where you know the stuff that you write

402
00:13:35,740 --> 00:13:39,310
in Section two differs from the stuff

403
00:13:37,240 --> 00:13:43,750
that you write in the standard

404
00:13:39,310 --> 00:13:45,969
okay so BLS signatures draft is you know

405
00:13:43,750 --> 00:13:47,589
it's one document and it needs pairing

406
00:13:45,970 --> 00:13:49,839
friendly curves so it's going to rely on

407
00:13:47,589 --> 00:13:51,129
a separate document the different that

408
00:13:49,839 --> 00:13:53,319
defines pairing friendly curves and

409
00:13:51,129 --> 00:13:55,089
that's also currently being worked on it

410
00:13:53,319 --> 00:13:56,649
also relies on hashing to curves so it

411
00:13:55,089 --> 00:13:58,329
depends on that document and in fact

412
00:13:56,649 --> 00:13:59,709
hashed a curve defines hashes to pairing

413
00:13:58,329 --> 00:14:01,599
friendly curve so it depends on pairing

414
00:13:59,709 --> 00:14:03,310
friendly curves and then there are a few

415
00:14:01,600 --> 00:14:04,899
other documents that I think right now

416
00:14:03,310 --> 00:14:06,939
don't actually depend on hashed a curve

417
00:14:04,899 --> 00:14:10,209
but at some point in the near future may

418
00:14:06,939 --> 00:14:12,459
depend so you end up with these sort of

419
00:14:10,209 --> 00:14:14,680
interesting dependency graphs this is I

420
00:14:12,459 --> 00:14:16,839
would say not unusual it's frequently

421
00:14:14,680 --> 00:14:19,120
the case that documents depend heavily

422
00:14:16,839 --> 00:14:20,050
on other rfcs and that's kind of a good

423
00:14:19,120 --> 00:14:21,540
thing it means you're gonna be

424
00:14:20,050 --> 00:14:23,740
interacting a lot with those people and

425
00:14:21,540 --> 00:14:26,560
it means that you don't have to you know

426
00:14:23,740 --> 00:14:28,809
write down everything that your protocol

427
00:14:26,560 --> 00:14:30,119
needs because probably it's already been

428
00:14:28,809 --> 00:14:33,100
standardized somewhere else

429
00:14:30,120 --> 00:14:34,209
okay so topologically sorting we'll

430
00:14:33,100 --> 00:14:36,309
start with pairing friendly curves and

431
00:14:34,209 --> 00:14:37,899
go from there so just very generally as

432
00:14:36,309 --> 00:14:40,360
a reminder so a parent friendly curve

433
00:14:37,899 --> 00:14:42,579
defines sort of two groups G 1 and G 2

434
00:14:40,360 --> 00:14:45,069
both of the same prime order Q that are

435
00:14:42,579 --> 00:14:47,170
subgroups of some elliptic curves and

436
00:14:45,069 --> 00:14:48,699
we'll say that with our generators p1 p2

437
00:14:47,170 --> 00:14:51,189
and then there's a third group the

438
00:14:48,699 --> 00:14:52,809
target group of prime order Q as well

439
00:14:51,189 --> 00:14:55,660
and of course there's the pairing

440
00:14:52,809 --> 00:14:59,379
operation so the idea is it's a bilinear

441
00:14:55,660 --> 00:15:01,389
map from G 1 cross G 2 to GT and you

442
00:14:59,379 --> 00:15:03,189
know very intuitively what's going on is

443
00:15:01,389 --> 00:15:05,559
the bilinear map multiplies the

444
00:15:03,189 --> 00:15:09,129
exponents of its arguments so as we'll

445
00:15:05,559 --> 00:15:10,480
see this is very useful so this is you

446
00:15:09,129 --> 00:15:11,889
know sort of the background section

447
00:15:10,480 --> 00:15:13,029
version of it but let's think about what

448
00:15:11,889 --> 00:15:14,439
else do we need to write down if we're

449
00:15:13,029 --> 00:15:16,990
actually gonna make a standard for this

450
00:15:14,439 --> 00:15:18,910
well presumably one thing that we want

451
00:15:16,990 --> 00:15:20,259
is we again we don't want to be talking

452
00:15:18,910 --> 00:15:21,279
about mathematical objects we want to be

453
00:15:20,259 --> 00:15:24,040
talking about bytes on the wire

454
00:15:21,279 --> 00:15:25,779
eventually so we probably need to define

455
00:15:24,040 --> 00:15:27,699
serialization and deserialization and

456
00:15:25,779 --> 00:15:30,220
you'll notice that the pairing operation

457
00:15:27,699 --> 00:15:31,929
it takes points in the subgroups not

458
00:15:30,220 --> 00:15:33,699
points on the curve generally so

459
00:15:31,929 --> 00:15:35,079
probably we have to tell people look if

460
00:15:33,699 --> 00:15:36,040
there's a fast way to do a subgroup

461
00:15:35,079 --> 00:15:37,300
check you're gonna have to do

462
00:15:36,040 --> 00:15:38,589
sub-group checks so we may as well

463
00:15:37,300 --> 00:15:40,060
standardize the ones that are good or

464
00:15:38,589 --> 00:15:43,089
fat and fast or at least point you to

465
00:15:40,060 --> 00:15:44,680
them right and probably maybe the

466
00:15:43,089 --> 00:15:46,449
surprisingly we want to probably put the

467
00:15:44,680 --> 00:15:48,069
test vectors of a document and you might

468
00:15:46,449 --> 00:15:49,089
say well look it would be even better if

469
00:15:48,070 --> 00:15:51,040
we just had a reference implementation

470
00:15:49,089 --> 00:15:52,540
and that's true and probably you should

471
00:15:51,040 --> 00:15:54,639
have a reference implementation but the

472
00:15:52,540 --> 00:15:56,529
reason to put a test vector is well if I

473
00:15:54,639 --> 00:15:57,970
just I mean just imagine you print out

474
00:15:56,529 --> 00:15:59,350
the document and you start writing code

475
00:15:57,970 --> 00:16:00,970
and at some point you want to test

476
00:15:59,350 --> 00:16:02,740
whether your code is correct it's nice

477
00:16:00,970 --> 00:16:04,300
that you can sort of type in a you know

478
00:16:02,740 --> 00:16:05,740
a few hundred hex digits and then make

479
00:16:04,300 --> 00:16:07,930
sure that your code actually does the

480
00:16:05,740 --> 00:16:10,810
right thing no probably you have to do

481
00:16:07,930 --> 00:16:11,888
some spell checking first okay so that's

482
00:16:10,810 --> 00:16:13,599
enough preparing friendly curves let's

483
00:16:11,889 --> 00:16:14,500
think about hashing to curves so the way

484
00:16:13,600 --> 00:16:16,420
that we're gonna define it in the

485
00:16:14,500 --> 00:16:18,790
document is in terms of three primitives

486
00:16:16,420 --> 00:16:20,500
I think you can see that this will kind

487
00:16:18,790 --> 00:16:22,420
of fall out nicely so first we're gonna

488
00:16:20,500 --> 00:16:24,100
need some family of hash functions from

489
00:16:22,420 --> 00:16:25,509
arbitrary strings to field elements and

490
00:16:24,100 --> 00:16:27,790
we're going to model them as random

491
00:16:25,509 --> 00:16:29,860
Oracle's second we're gonna need some

492
00:16:27,790 --> 00:16:31,689
deterministic map from field elements to

493
00:16:29,860 --> 00:16:33,610
points on a curve and there's been a lot

494
00:16:31,690 --> 00:16:35,319
of work on this and in fact dan and I

495
00:16:33,610 --> 00:16:35,829
have a paper appearing at chess next

496
00:16:35,319 --> 00:16:37,630
week

497
00:16:35,829 --> 00:16:39,579
that makes hashing to lots of curves

498
00:16:37,630 --> 00:16:42,220
including pairing friendly curves a bit

499
00:16:39,579 --> 00:16:44,469
faster so in particular we can basically

500
00:16:42,220 --> 00:16:46,810
match the cost of elliegator like one

501
00:16:44,470 --> 00:16:51,490
square root in the field for almost any

502
00:16:46,810 --> 00:16:52,989
curve okay so so that's map to curve and

503
00:16:51,490 --> 00:16:54,370
of course for any curve with non unity

504
00:16:52,990 --> 00:16:56,260
cofactor we're gonna want to hash into

505
00:16:54,370 --> 00:16:57,850
the prime order subgroup so probably we

506
00:16:56,260 --> 00:16:59,290
want to talk about how to clear the

507
00:16:57,850 --> 00:17:00,880
cofactor and obviously there's a naive

508
00:16:59,290 --> 00:17:02,139
way to do it but it turns out that there

509
00:17:00,880 --> 00:17:04,990
that pairing friendly curves tend to

510
00:17:02,139 --> 00:17:06,880
have very big cofactors and so in a lot

511
00:17:04,990 --> 00:17:08,740
of cases we want to have some you know

512
00:17:06,880 --> 00:17:10,540
exploits them into morphism or something

513
00:17:08,740 --> 00:17:13,689
like this in order to make the the

514
00:17:10,540 --> 00:17:15,250
cofactor clearing faster okay so there's

515
00:17:13,689 --> 00:17:17,350
all of that now the question is how do

516
00:17:15,250 --> 00:17:18,490
we put put all this together and there

517
00:17:17,349 --> 00:17:20,260
are some very beautiful results from

518
00:17:18,490 --> 00:17:22,449
briar at all in fresh ie at all that

519
00:17:20,260 --> 00:17:25,658
show basically for all the maps that

520
00:17:22,449 --> 00:17:27,579
I've listed here evaluating the map

521
00:17:25,659 --> 00:17:29,080
twice on independent inputs and summing

522
00:17:27,579 --> 00:17:31,000
the result is in differentiable from a

523
00:17:29,080 --> 00:17:33,120
random Oracle assuming that the hash to

524
00:17:31,000 --> 00:17:36,970
field is modeled as a random Oracle

525
00:17:33,120 --> 00:17:39,489
okay so this is again sort of background

526
00:17:36,970 --> 00:17:41,080
section I'm not going to belabor this

527
00:17:39,490 --> 00:17:42,460
point about all we need to specify this

528
00:17:41,080 --> 00:17:43,570
thing and this thing but I want to point

529
00:17:42,460 --> 00:17:45,730
out something that actually took a

530
00:17:43,570 --> 00:17:47,590
surprising amount of thought so here's

531
00:17:45,730 --> 00:17:49,660
the thing like I said earlier this is

532
00:17:47,590 --> 00:17:52,810
kind of more like a toolbox than

533
00:17:49,660 --> 00:17:53,650
all right so what we want to do is give

534
00:17:52,810 --> 00:17:56,080
people who are actually building

535
00:17:53,650 --> 00:17:57,940
protocols on top of hash to curve some

536
00:17:56,080 --> 00:18:00,490
you know some dials that they can turn

537
00:17:57,940 --> 00:18:03,430
so for example a lot of people are going

538
00:18:00,490 --> 00:18:05,920
to want to say well my you know my hash

539
00:18:03,430 --> 00:18:07,450
function is orthogonal to your hash

540
00:18:05,920 --> 00:18:08,950
function right so we need to give them

541
00:18:07,450 --> 00:18:11,560
some way of doing domain separation and

542
00:18:08,950 --> 00:18:14,620
the the the clear easy way to do that is

543
00:18:11,560 --> 00:18:16,419
in the hash to field function so but

544
00:18:14,620 --> 00:18:18,820
here's the thing okay let's think

545
00:18:16,420 --> 00:18:20,350
defensively for a second protocol X is

546
00:18:18,820 --> 00:18:21,669
going to you know read the document

547
00:18:20,350 --> 00:18:23,230
carefully and they're gonna specify a

548
00:18:21,670 --> 00:18:25,030
domain separation tag in just the right

549
00:18:23,230 --> 00:18:28,180
way and life is gonna be good

550
00:18:25,030 --> 00:18:30,070
protocol Z well they're in a rush they

551
00:18:28,180 --> 00:18:32,500
didn't quite get things all right and

552
00:18:30,070 --> 00:18:34,720
the result is that now their domain

553
00:18:32,500 --> 00:18:35,890
separation tag let's say is broken so

554
00:18:34,720 --> 00:18:38,020
here's the question can we write the

555
00:18:35,890 --> 00:18:40,600
document in such a way that even if

556
00:18:38,020 --> 00:18:42,730
protocol Z breaks things for themselves

557
00:18:40,600 --> 00:18:45,639
they won't ruin like for protocol X

558
00:18:42,730 --> 00:18:48,130
right so this is you know the obvious

559
00:18:45,640 --> 00:18:50,620
approaches to this are maybe not gonna

560
00:18:48,130 --> 00:18:52,270
give us that assurance but we want to

561
00:18:50,620 --> 00:18:54,580
have that sort of paranoid sort of

562
00:18:52,270 --> 00:18:56,110
defensive attitude like not everyone is

563
00:18:54,580 --> 00:18:57,850
going to read the document and implement

564
00:18:56,110 --> 00:18:59,490
it correctly let's make sure that it

565
00:18:57,850 --> 00:19:01,689
doesn't break for the people who did

566
00:18:59,490 --> 00:19:03,910
okay so the details get a little tedious

567
00:19:01,690 --> 00:19:05,680
I won't talk about them anymore but the

568
00:19:03,910 --> 00:19:09,130
high-level message is maybe be paranoid

569
00:19:05,680 --> 00:19:11,110
a little bit okay and finally a the topo

570
00:19:09,130 --> 00:19:13,570
sort has led us to BLS signatures so

571
00:19:11,110 --> 00:19:16,120
just a quick reminder a public key is a

572
00:19:13,570 --> 00:19:18,760
point in one of the groups let's say the

573
00:19:16,120 --> 00:19:20,320
public key is in G - and the secret is

574
00:19:18,760 --> 00:19:22,660
the discrete log of the public key to

575
00:19:20,320 --> 00:19:25,149
the base point and so to sign a message

576
00:19:22,660 --> 00:19:27,070
we're going to hash the message into the

577
00:19:25,150 --> 00:19:28,450
opposite group from the public key so in

578
00:19:27,070 --> 00:19:30,159
this case we're gonna bash it into G 1

579
00:19:28,450 --> 00:19:33,760
and then we're gonna you know raise it

580
00:19:30,160 --> 00:19:37,300
to the you know to the secret exponent

581
00:19:33,760 --> 00:19:39,430
value and then verification checks that

582
00:19:37,300 --> 00:19:41,230
the pairing of what the hash of the

583
00:19:39,430 --> 00:19:43,450
message with the public key is equal to

584
00:19:41,230 --> 00:19:45,580
the pairing of the signature with the

585
00:19:43,450 --> 00:19:47,140
base point and at least maybe I can

586
00:19:45,580 --> 00:19:49,750
convince you that it that you know it's

587
00:19:47,140 --> 00:19:51,720
it's correct security is another

588
00:19:49,750 --> 00:19:54,760
question we'll leave that to the paper

589
00:19:51,720 --> 00:19:57,370
but okay in this theory in this theme of

590
00:19:54,760 --> 00:20:00,670
pointing out practical issues so here's

591
00:19:57,370 --> 00:20:03,129
one I've written down key Jen as a

592
00:20:00,670 --> 00:20:05,470
randomized algorithm which is total

593
00:20:03,130 --> 00:20:07,450
fine if we're just specifying it but

594
00:20:05,470 --> 00:20:08,950
it's pretty bad if we're talking you

595
00:20:07,450 --> 00:20:11,560
know if we're talking about it again in

596
00:20:08,950 --> 00:20:12,820
section 2 that's fine but in document

597
00:20:11,560 --> 00:20:14,080
it's probably not so fine because I

598
00:20:12,820 --> 00:20:16,240
don't want to have to tell you for

599
00:20:14,080 --> 00:20:18,280
example how to build a random number

600
00:20:16,240 --> 00:20:19,960
generator so maybe instead what do I

601
00:20:18,280 --> 00:20:22,090
should do is make key gen deterministic

602
00:20:19,960 --> 00:20:23,920
and have it take in some randomness and

603
00:20:22,090 --> 00:20:25,270
then I specify to you well it needs to

604
00:20:23,920 --> 00:20:27,280
be 32 bytes and please make it

605
00:20:25,270 --> 00:20:31,000
high-quality and see this other document

606
00:20:27,280 --> 00:20:34,629
for you know for details on that and

607
00:20:31,000 --> 00:20:36,220
then you know again this issue we don't

608
00:20:34,630 --> 00:20:38,230
want to talk about points we want to

609
00:20:36,220 --> 00:20:39,790
talk about strings of bytes so probably

610
00:20:38,230 --> 00:20:41,850
we have to rewrite this interface in

611
00:20:39,790 --> 00:20:43,810
terms of serialized strings of bytes

612
00:20:41,850 --> 00:20:45,129
deserialize the string of bytes make

613
00:20:43,810 --> 00:20:46,810
sure that it's on the curve make sure

614
00:20:45,130 --> 00:20:49,630
that it's in the correct subgroup this

615
00:20:46,810 --> 00:20:52,000
sort of thing okay but the real reason

616
00:20:49,630 --> 00:20:53,920
that people are thinking today about

617
00:20:52,000 --> 00:20:57,760
standardizing VLS signatures is because

618
00:20:53,920 --> 00:21:00,130
their aggregate able so here's the idea

619
00:20:57,760 --> 00:21:01,750
so to aggregate signatures and we can

620
00:21:00,130 --> 00:21:03,340
sort of you know squash all the points

621
00:21:01,750 --> 00:21:04,570
together into one point so we take the

622
00:21:03,340 --> 00:21:06,100
let's say the product of all the

623
00:21:04,570 --> 00:21:07,750
signatures give me a point in g1 and

624
00:21:06,100 --> 00:21:08,889
that's the aggregated signature and then

625
00:21:07,750 --> 00:21:11,560
there are kind of two things that I can

626
00:21:08,890 --> 00:21:13,390
do with that first I can check a multi

627
00:21:11,560 --> 00:21:15,310
signature so that is what you know many

628
00:21:13,390 --> 00:21:18,010
public keys all signing the same message

629
00:21:15,310 --> 00:21:19,629
and that's that's kind of fast what I

630
00:21:18,010 --> 00:21:21,700
can do there is I can aggregate all the

631
00:21:19,630 --> 00:21:23,980
public keys together and then do use the

632
00:21:21,700 --> 00:21:26,170
verification equation and the other

633
00:21:23,980 --> 00:21:27,910
approach is is maybe we can think of it

634
00:21:26,170 --> 00:21:30,310
as a batch signature so in this case we

635
00:21:27,910 --> 00:21:32,020
have one aggregated signature but we

636
00:21:30,310 --> 00:21:34,149
have a bunch of different messages and

637
00:21:32,020 --> 00:21:35,860
public keys paired together and we want

638
00:21:34,150 --> 00:21:37,930
to check that sort of the aggregated

639
00:21:35,860 --> 00:21:41,169
signature corresponds to all of the

640
00:21:37,930 --> 00:21:42,520
message public key pairs and there well

641
00:21:41,170 --> 00:21:44,050
it's a little more expensive because now

642
00:21:42,520 --> 00:21:46,750
I have to do sort of n pairing

643
00:21:44,050 --> 00:21:49,300
operations rather than n point additions

644
00:21:46,750 --> 00:21:51,430
but so it still saved us kind of a

645
00:21:49,300 --> 00:21:53,560
factor of 2 in terms of computation over

646
00:21:51,430 --> 00:21:57,250
the naive approach and also it squashes

647
00:21:53,560 --> 00:22:02,470
the signature down ok but so here's a

648
00:21:57,250 --> 00:22:07,420
question is this secure and no give you

649
00:22:02,470 --> 00:22:09,430
yeah no so there's this nice idea called

650
00:22:07,420 --> 00:22:11,260
a rogue key attack so let's let's

651
00:22:09,430 --> 00:22:13,420
imagine that Alice has some public key

652
00:22:11,260 --> 00:22:14,820
and Bob has some public key and then

653
00:22:13,420 --> 00:22:16,799
Mallory comes along

654
00:22:14,820 --> 00:22:19,309
and creates a public key that's

655
00:22:16,799 --> 00:22:21,629
specifically designed to allow him to

656
00:22:19,309 --> 00:22:23,940
Forge signatures that look like they're

657
00:22:21,630 --> 00:22:25,380
from Alice Bob and Mallory okay so in

658
00:22:23,940 --> 00:22:27,450
particular he's gonna engineer his key

659
00:22:25,380 --> 00:22:30,179
so that it kind of cancels out Alice's

660
00:22:27,450 --> 00:22:32,029
and Bob's key and then if we go back to

661
00:22:30,179 --> 00:22:34,529
the multi signature verification

662
00:22:32,029 --> 00:22:36,330
equation what we see is look as long as

663
00:22:34,529 --> 00:22:38,190
Mallory can sort of cancel out Alice's

664
00:22:36,330 --> 00:22:40,080
and Bob's keys then he can forge a multi

665
00:22:38,190 --> 00:22:42,120
signature for any message okay so how do

666
00:22:40,080 --> 00:22:44,460
we defend against this well there are

667
00:22:42,120 --> 00:22:46,639
kind of four four ways of doing it in

668
00:22:44,460 --> 00:22:50,490
the literature one is that we can

669
00:22:46,639 --> 00:22:52,469
require all messages to be unique

670
00:22:50,490 --> 00:22:54,059
the downside there is well we can't do a

671
00:22:52,470 --> 00:22:55,740
multi signature verification anymore so

672
00:22:54,059 --> 00:22:57,090
verification gets a little maybe a

673
00:22:55,740 --> 00:22:59,879
little slower because we can only sort

674
00:22:57,090 --> 00:23:02,250
of get the batch improvement another

675
00:22:59,879 --> 00:23:04,320
approach is message augmentation so here

676
00:23:02,250 --> 00:23:06,509
we just pretend the public key to the

677
00:23:04,320 --> 00:23:07,710
message before signing which essentially

678
00:23:06,509 --> 00:23:09,779
you can think about that as ensuring

679
00:23:07,710 --> 00:23:13,110
uniqueness but once again we lose the

680
00:23:09,779 --> 00:23:14,639
multi signature thing when we normally

681
00:23:13,110 --> 00:23:15,899
that we can keep the multi signatures is

682
00:23:14,639 --> 00:23:18,139
using what are called proofs of

683
00:23:15,899 --> 00:23:20,610
possession so here we ask the the

684
00:23:18,139 --> 00:23:22,258
everyone who donates a public key to

685
00:23:20,610 --> 00:23:24,090
also prove that they know the secret

686
00:23:22,259 --> 00:23:26,580
corresponding to it how well they just

687
00:23:24,090 --> 00:23:28,470
sign their public key and intuitively

688
00:23:26,580 --> 00:23:30,120
what what's going on is now if you've

689
00:23:28,470 --> 00:23:31,710
engineered a key to cancel out someone

690
00:23:30,120 --> 00:23:33,479
else's key well unless you've broken

691
00:23:31,710 --> 00:23:35,490
their key you can't you don't know the

692
00:23:33,480 --> 00:23:39,149
secret corresponding to your own claimed

693
00:23:35,490 --> 00:23:40,080
key so now this is a little complicated

694
00:23:39,149 --> 00:23:41,668
right because it means you have to

695
00:23:40,080 --> 00:23:44,309
generate proofs of possession and I have

696
00:23:41,669 --> 00:23:45,750
to verify them but the signatures are

697
00:23:44,309 --> 00:23:47,039
deterministic so you only have to

698
00:23:45,750 --> 00:23:49,620
generate the proof of possession once

699
00:23:47,039 --> 00:23:51,029
and obviously I can sort of cache my

700
00:23:49,620 --> 00:23:52,500
decisions right if I've checked your key

701
00:23:51,029 --> 00:23:55,590
before I don't have to check it again

702
00:23:52,500 --> 00:23:58,740
I finally there's sort of the most

703
00:23:55,590 --> 00:24:00,629
recent work in this areas using sort of

704
00:23:58,740 --> 00:24:02,399
a random linear combination of the keys

705
00:24:00,629 --> 00:24:04,320
and the signatures and the idea here is

706
00:24:02,399 --> 00:24:06,090
you know even if the messages are the

707
00:24:04,320 --> 00:24:07,918
same we can sort of orthogonalize the

708
00:24:06,090 --> 00:24:10,889
signatures to make sure that there's

709
00:24:07,919 --> 00:24:13,919
none of this sort of rogue key issue so

710
00:24:10,889 --> 00:24:15,750
this ends up requiring sort of a multi

711
00:24:13,919 --> 00:24:17,519
exponentiation to do the aggregation

712
00:24:15,750 --> 00:24:20,279
which is maybe a little bit of a

713
00:24:17,519 --> 00:24:21,990
disadvantage but but the advantage is

714
00:24:20,279 --> 00:24:23,610
that we sort of recover without proofs

715
00:24:21,990 --> 00:24:26,370
of possession we recover are sort of the

716
00:24:23,610 --> 00:24:28,479
sort of only one pairing in order to

717
00:24:26,370 --> 00:24:30,939
check a signature so in this

718
00:24:28,480 --> 00:24:32,260
and right now we're going to standardize

719
00:24:30,940 --> 00:24:34,210
it seems like we're gonna standardize

720
00:24:32,260 --> 00:24:35,620
the first three of these and you might

721
00:24:34,210 --> 00:24:36,070
say wait a second that doesn't make any

722
00:24:35,620 --> 00:24:37,780
sense

723
00:24:36,070 --> 00:24:40,030
because look message augmentation

724
00:24:37,780 --> 00:24:41,530
already gives you unique messages why do

725
00:24:40,030 --> 00:24:44,110
you need to have the unique messages one

726
00:24:41,530 --> 00:24:45,580
and the message augmentation one and the

727
00:24:44,110 --> 00:24:47,020
answer is again because we're being

728
00:24:45,580 --> 00:24:48,879
paranoid so here's the here's the

729
00:24:47,020 --> 00:24:51,070
worried somebody is gonna look at the

730
00:24:48,880 --> 00:24:53,290
standard and say message augmentation

731
00:24:51,070 --> 00:24:54,668
seems like a problem proof of possession

732
00:24:53,290 --> 00:24:56,710
seems like a problem okay here's what

733
00:24:54,669 --> 00:24:58,450
I'm gonna do I'm just gonna pretend that

734
00:24:56,710 --> 00:24:59,559
I'm using proofs of possession but I'm

735
00:24:58,450 --> 00:25:01,720
not actually going to generate any

736
00:24:59,559 --> 00:25:03,520
proofs of possession okay so what we

737
00:25:01,720 --> 00:25:05,470
don't want is for somebody who is

738
00:25:03,520 --> 00:25:10,000
honestly and correctly using proofs of

739
00:25:05,470 --> 00:25:12,940
possession to get confused and interpret

740
00:25:10,000 --> 00:25:15,760
those signatures as actual correct proof

741
00:25:12,940 --> 00:25:17,440
of possession signatures so we have sort

742
00:25:15,760 --> 00:25:18,820
of a domain separation between the

743
00:25:17,440 --> 00:25:20,590
unique message and the proof of his

744
00:25:18,820 --> 00:25:22,299
ession case and actually along all three

745
00:25:20,590 --> 00:25:24,549
and that way at least we build a fire

746
00:25:22,299 --> 00:25:27,309
firewall between the people who sort of

747
00:25:24,549 --> 00:25:29,379
maybe may or may not do things right and

748
00:25:27,309 --> 00:25:32,410
the people who really we hope are doing

749
00:25:29,380 --> 00:25:35,940
things right okay so I think I'm running

750
00:25:32,410 --> 00:25:38,350
out of time so let's briefly recap so

751
00:25:35,940 --> 00:25:40,419
I've hit this over and over again but

752
00:25:38,350 --> 00:25:42,219
it's worthwhile to think about making

753
00:25:40,419 --> 00:25:43,630
things hard to break but also it's

754
00:25:42,220 --> 00:25:45,880
worthwhile to assume that people will

755
00:25:43,630 --> 00:25:49,809
break them anyway so maybe build in some

756
00:25:45,880 --> 00:25:53,500
extra firewalls here and there implement

757
00:25:49,809 --> 00:25:55,230
implement your stuff if other people are

758
00:25:53,500 --> 00:25:57,160
going to implement your standard

759
00:25:55,230 --> 00:25:58,870
probably you should be your own first

760
00:25:57,160 --> 00:26:01,179
customer because certainly if you can't

761
00:25:58,870 --> 00:26:03,340
understand it then they won't either so

762
00:26:01,179 --> 00:26:06,030
it's nice to implement and give people

763
00:26:03,340 --> 00:26:09,730
at least a reference implementation and

764
00:26:06,030 --> 00:26:10,960
what I've sort of become what I've sort

765
00:26:09,730 --> 00:26:14,320
of realized more and more as I've

766
00:26:10,960 --> 00:26:15,669
interacted with with folks is any

767
00:26:14,320 --> 00:26:17,409
decision that you make is gonna make

768
00:26:15,669 --> 00:26:18,580
someone unhappy right somebody's gonna

769
00:26:17,410 --> 00:26:19,750
want that last three percent of

770
00:26:18,580 --> 00:26:21,639
performance or somebody's gonna say

771
00:26:19,750 --> 00:26:24,220
you're crazy there's a much better way

772
00:26:21,640 --> 00:26:26,049
of writing this down you can't take it

773
00:26:24,220 --> 00:26:27,820
personally but certainly you can take

774
00:26:26,049 --> 00:26:29,950
their feedback and say thank you for the

775
00:26:27,820 --> 00:26:31,960
parts of it that are useful and finally

776
00:26:29,950 --> 00:26:33,580
I hope I've convinced you that maybe the

777
00:26:31,960 --> 00:26:36,280
ITF is kind of a pretty cool place to

778
00:26:33,580 --> 00:26:38,379
standardize your crypto and I'm happy to

779
00:26:36,280 --> 00:26:41,580
take more quota to take questions now or

780
00:26:38,380 --> 00:26:41,580
to talk about that more offline

781
00:26:42,370 --> 00:26:47,800
[Applause]

