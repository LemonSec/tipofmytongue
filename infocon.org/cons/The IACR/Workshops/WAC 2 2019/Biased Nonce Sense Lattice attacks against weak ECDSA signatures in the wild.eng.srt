1
00:00:04,900 --> 00:00:13,350
okay great so I'm going to talk

2
00:00:09,330 --> 00:00:16,020
about some this is like a fun paper but

3
00:00:13,350 --> 00:00:17,369
we're here for fun so that's good this

4
00:00:16,020 --> 00:00:20,640
is not there's no sort of major

5
00:00:17,369 --> 00:00:24,529
vulnerabilities here which is good so

6
00:00:20,640 --> 00:00:29,009
we'll just have some fun the sort of

7
00:00:24,529 --> 00:00:30,710
setting for this work is this is kind of

8
00:00:29,010 --> 00:00:33,210
the theme of like a lot of my research

9
00:00:30,710 --> 00:00:34,980
so you guys are all familiar with the

10
00:00:33,210 --> 00:00:37,500
law of large numbers right that these

11
00:00:34,980 --> 00:00:39,269
sort of statistics your the average

12
00:00:37,500 --> 00:00:41,460
behavior converges almost surely to the

13
00:00:39,269 --> 00:00:44,309
expected value as the number of samples

14
00:00:41,460 --> 00:00:46,379
increases you know kind of you expect

15
00:00:44,309 --> 00:00:49,110
things to essentially converge this way

16
00:00:46,379 --> 00:00:51,150
so there is a sort of counterpoint to

17
00:00:49,110 --> 00:00:53,460
this law which was formulated by

18
00:00:51,150 --> 00:00:55,049
diaconis and most eller which is that

19
00:00:53,460 --> 00:00:56,610
when a sample size is large enough any

20
00:00:55,049 --> 00:00:59,280
outrageous thing is likely to happen

21
00:00:56,610 --> 00:01:05,960
okay so if you want to show the

22
00:00:59,280 --> 00:01:09,060
existence of some kind of strange then

23
00:01:05,960 --> 00:01:11,720
you just collect enough data points and

24
00:01:09,060 --> 00:01:15,120
you will find some weird outliers then

25
00:01:11,720 --> 00:01:16,590
okay so in the cryptographic context I

26
00:01:15,120 --> 00:01:18,960
would like to formulate a cryptographic

27
00:01:16,590 --> 00:01:20,220
law of truly large numbers which is that

28
00:01:18,960 --> 00:01:21,029
if you're given samples from enough

29
00:01:20,220 --> 00:01:23,100
independent cryptographic

30
00:01:21,030 --> 00:01:25,860
implementations any outrageous

31
00:01:23,100 --> 00:01:29,250
vulnerability is likely to be present so

32
00:01:25,860 --> 00:01:31,260
this is essentially this is my

33
00:01:29,250 --> 00:01:32,310
conjecture i conjecture the space off of

34
00:01:31,260 --> 00:01:34,260
a number of data points which is

35
00:01:32,310 --> 00:01:36,810
essentially my publication record so

36
00:01:34,260 --> 00:01:38,280
this is my form you know this is how i

37
00:01:36,810 --> 00:01:43,560
got tenure i don't know about you guys

38
00:01:38,280 --> 00:01:46,140
so so in that spirit this paper this

39
00:01:43,560 --> 00:01:47,550
work which i should mention is joint

40
00:01:46,140 --> 00:01:52,350
with you walking Breitner who has a

41
00:01:47,550 --> 00:01:56,520
Definity is taking advantage of this

42
00:01:52,350 --> 00:01:58,140
observation so i guess it was sort of

43
00:01:56,520 --> 00:01:59,940
nice that we got an introduction to

44
00:01:58,140 --> 00:02:01,110
elliptic curve diffie-hellman in the

45
00:01:59,940 --> 00:02:02,670
last talks and now we're going to talk

46
00:02:01,110 --> 00:02:05,970
about ECDSA

47
00:02:02,670 --> 00:02:07,830
in this talk so we don't care about the

48
00:02:05,970 --> 00:02:10,739
elliptic curve aspect at all

49
00:02:07,830 --> 00:02:12,959
we just care about the DSA aspect but

50
00:02:10,739 --> 00:02:15,000
most people are using ECDSA and not find

51
00:02:12,959 --> 00:02:17,930
that field DSA so we'll push ahead with

52
00:02:15,000 --> 00:02:20,220
elliptic curves so ECDSA we have a

53
00:02:17,930 --> 00:02:22,670
global parameters we have an elliptic

54
00:02:20,220 --> 00:02:26,000
curve e we have some generator

55
00:02:22,670 --> 00:02:29,540
which has order and your private key is

56
00:02:26,000 --> 00:02:31,780
some integer your public key is you know

57
00:02:29,540 --> 00:02:33,950
that integer times your generator point

58
00:02:31,780 --> 00:02:36,320
we also don't really care about those

59
00:02:33,950 --> 00:02:38,810
details so in order to sign a message

60
00:02:36,320 --> 00:02:40,430
you hash it possibly in some complicated

61
00:02:38,810 --> 00:02:42,020
way did you know that most ECDSA

62
00:02:40,430 --> 00:02:50,120
implementations hash the message twice

63
00:02:42,020 --> 00:02:52,310
it's kind of weird or one bit less

64
00:02:50,120 --> 00:02:55,340
secure than than once it's yeah it's a

65
00:02:52,310 --> 00:02:57,940
little odd I did not know this until

66
00:02:55,340 --> 00:03:01,820
doing this paper for whatever reason so

67
00:02:57,940 --> 00:03:03,410
you learn amazing things okay so you

68
00:03:01,820 --> 00:03:04,820
hashed the message and we really we

69
00:03:03,410 --> 00:03:06,500
don't care about the details of that

70
00:03:04,820 --> 00:03:07,640
that doesn't really come into this so

71
00:03:06,500 --> 00:03:09,680
we'll just say the message hatch we're

72
00:03:07,640 --> 00:03:13,100
going to treat it as an integer H and we

73
00:03:09,680 --> 00:03:14,959
don't really care so each signature so

74
00:03:13,100 --> 00:03:17,150
the ECDSA their waves originally written

75
00:03:14,959 --> 00:03:19,640
it is a randomized signature scheme so

76
00:03:17,150 --> 00:03:21,140
you have a person ature nonce which is

77
00:03:19,640 --> 00:03:23,239
really like an ephemeral private key at

78
00:03:21,140 --> 00:03:25,339
some integer K this K is extremely

79
00:03:23,240 --> 00:03:28,760
important as we will see very shortly

80
00:03:25,340 --> 00:03:30,560
and so this should be generated sort of

81
00:03:28,760 --> 00:03:33,350
person ature and then your signature

82
00:03:30,560 --> 00:03:35,660
itself is a pair of values R and s R is

83
00:03:33,350 --> 00:03:38,390
the x-coordinate of K times your

84
00:03:35,660 --> 00:03:41,930
generator point and this s value is

85
00:03:38,390 --> 00:03:44,029
computed as written down K inverse times

86
00:03:41,930 --> 00:03:46,459
the hash of the message plus the private

87
00:03:44,030 --> 00:03:49,220
key times this R value mod n so that's

88
00:03:46,459 --> 00:03:52,519
just an integer and for our purposes is

89
00:03:49,220 --> 00:03:54,830
useful that like this is just an integer

90
00:03:52,519 --> 00:03:57,290
and this is done using normal integer

91
00:03:54,830 --> 00:03:59,000
modulo arithmetic so we don't care about

92
00:03:57,290 --> 00:04:00,620
like all of this elliptic curve garbage

93
00:03:59,000 --> 00:04:05,750
we can ignore that part because that's

94
00:04:00,620 --> 00:04:08,660
hard and confusing so okay as much many

95
00:04:05,750 --> 00:04:11,510
of you put in this room probably know as

96
00:04:08,660 --> 00:04:13,850
I said the value of K is extremely

97
00:04:11,510 --> 00:04:15,739
important so this K must remain secret

98
00:04:13,850 --> 00:04:17,810
for all of the signatures you ever

99
00:04:15,739 --> 00:04:21,649
generate or else your long-term secret

100
00:04:17,810 --> 00:04:23,750
key D is revealed and using basic

101
00:04:21,649 --> 00:04:25,310
integer arithmetic you just like invert

102
00:04:23,750 --> 00:04:27,650
this question okay

103
00:04:25,310 --> 00:04:30,229
very straightforward like good good

104
00:04:27,650 --> 00:04:33,890
undergrad intro crypto like exercise

105
00:04:30,229 --> 00:04:36,289
probably you can amplify this a little

106
00:04:33,890 --> 00:04:40,399
bit this is also super well-known

107
00:04:36,289 --> 00:04:43,009
if this secret nonce K is ever reused to

108
00:04:40,399 --> 00:04:45,979
sign two distinct messages with

109
00:04:43,009 --> 00:04:48,580
different hashes H 1 and H 2 then it is

110
00:04:45,979 --> 00:04:51,558
trivial to compute this value of K

111
00:04:48,580 --> 00:04:52,188
basically by solving two equations with

112
00:04:51,559 --> 00:04:54,589
two unknowns

113
00:04:52,189 --> 00:04:56,869
and then you get this value of K and

114
00:04:54,589 --> 00:04:58,399
then using the sort of equation on the

115
00:04:56,869 --> 00:05:00,080
previous slide then you can Peete the

116
00:04:58,399 --> 00:05:03,619
long term secret key and then you're

117
00:05:00,080 --> 00:05:05,389
good so this comes up over and over

118
00:05:03,619 --> 00:05:07,789
again random number generation issues

119
00:05:05,389 --> 00:05:09,349
blah blah blah this is well-known flaw

120
00:05:07,789 --> 00:05:10,669
people have been explaining it for a

121
00:05:09,349 --> 00:05:14,119
long time ok

122
00:05:10,669 --> 00:05:15,948
also a fun undergrad project the thing

123
00:05:14,119 --> 00:05:18,469
that we are going to be playing with in

124
00:05:15,949 --> 00:05:20,209
this talk is kind of an amplification of

125
00:05:18,469 --> 00:05:24,740
this maybe but it's much more

126
00:05:20,209 --> 00:05:26,599
complicated so this these nonsense must

127
00:05:24,740 --> 00:05:31,309
be generated sort of perfectly uniformly

128
00:05:26,599 --> 00:05:33,319
at random or else if they haven't been

129
00:05:31,309 --> 00:05:34,879
we can possibly use a number of

130
00:05:33,319 --> 00:05:37,969
signatures to compute the long term

131
00:05:34,879 --> 00:05:40,819
secret key D so and the way this works

132
00:05:37,969 --> 00:05:43,639
is we essentially have some nice linear

133
00:05:40,819 --> 00:05:45,589
relations that we can dump into a

134
00:05:43,639 --> 00:05:46,939
lattice there's also an algorithm that

135
00:05:45,589 --> 00:05:48,169
uses Fourier analysis we're going to

136
00:05:46,939 --> 00:05:50,870
ignore that for the purposes of this

137
00:05:48,169 --> 00:05:53,709
talk so we dump this into a lattice and

138
00:05:50,870 --> 00:05:58,939
then it the secret key is just spat out

139
00:05:53,709 --> 00:06:02,599
and kind of the high-level version of

140
00:05:58,939 --> 00:06:05,839
these attacks is that if these secret

141
00:06:02,599 --> 00:06:07,610
nonces ki are small then the system of

142
00:06:05,839 --> 00:06:09,740
equations likely has only one solution

143
00:06:07,610 --> 00:06:12,409
and the lattice map like lattices can

144
00:06:09,740 --> 00:06:15,349
magically find it and if they are not

145
00:06:12,409 --> 00:06:17,479
smaller than an other other there are

146
00:06:15,349 --> 00:06:20,269
other kinds of biases that that can be

147
00:06:17,479 --> 00:06:22,909
exploited so that's the big picture of

148
00:06:20,269 --> 00:06:24,740
of what we're doing here the sort of

149
00:06:22,909 --> 00:06:26,990
formulation of this problem we're going

150
00:06:24,740 --> 00:06:28,819
to be you we already heard about the

151
00:06:26,990 --> 00:06:34,669
hidden number problem invoked once

152
00:06:28,819 --> 00:06:36,110
earlier this morning so the way that you

153
00:06:34,669 --> 00:06:37,959
the way that we will formulate this

154
00:06:36,110 --> 00:06:40,399
problem is that essentially we have a

155
00:06:37,959 --> 00:06:42,830
system of equations with some unknowns

156
00:06:40,399 --> 00:06:45,230
in the signature nonces and the secret

157
00:06:42,830 --> 00:06:46,520
key D and

158
00:06:45,230 --> 00:06:48,440
it looks something like this these are

159
00:06:46,520 --> 00:06:50,450
nice linear equations we know the

160
00:06:48,440 --> 00:06:54,500
coefficients here and so we're just

161
00:06:50,450 --> 00:06:57,229
trying to solve for this secret key d

162
00:06:54,500 --> 00:06:59,440
this is a alternative formulation of the

163
00:06:57,230 --> 00:07:01,910
hidden number problem which was

164
00:06:59,440 --> 00:07:03,370
originally described by Pony and Vic

165
00:07:01,910 --> 00:07:06,970
Edison

166
00:07:03,370 --> 00:07:11,120
in the context of actually breaking

167
00:07:06,970 --> 00:07:13,450
diffie-hellman with its known I haven't

168
00:07:11,120 --> 00:07:19,160
seen that exploited in the wild actually

169
00:07:13,450 --> 00:07:22,840
just sort of interesting move around I

170
00:07:19,160 --> 00:07:26,260
like moving around they'll deal with it

171
00:07:22,840 --> 00:07:29,080
will prioritize the people in the room

172
00:07:26,260 --> 00:07:38,270
okay I've been tied to my podium

173
00:07:29,080 --> 00:07:42,289
tragically so roomful of attackers okay

174
00:07:38,270 --> 00:07:44,539
anyway so this is this is where we will

175
00:07:42,290 --> 00:07:47,210
briefly get into the scary lattice

176
00:07:44,540 --> 00:07:49,340
section so half of you will be happy and

177
00:07:47,210 --> 00:07:52,340
half of you will be unhappy but it's

178
00:07:49,340 --> 00:07:53,330
only a few slides so then then everybody

179
00:07:52,340 --> 00:07:55,099
can be happy because we'll start

180
00:07:53,330 --> 00:07:56,510
breaking things okay

181
00:07:55,100 --> 00:07:59,360
so we've already seen we've already seen

182
00:07:56,510 --> 00:08:02,150
some of these lattice constructions this

183
00:07:59,360 --> 00:08:03,500
is all sort of well-known so I will just

184
00:08:02,150 --> 00:08:06,530
go through the lattice constructions

185
00:08:03,500 --> 00:08:09,200
briefly so the hidden number problem as

186
00:08:06,530 --> 00:08:12,969
I said the way that I'm thinking about

187
00:08:09,200 --> 00:08:16,789
it we want to find solutions to a set of

188
00:08:12,970 --> 00:08:19,730
linear system of linear equations that

189
00:08:16,790 --> 00:08:22,400
look something like this where we have

190
00:08:19,730 --> 00:08:26,510
unknowns K 1 through K m and the secret

191
00:08:22,400 --> 00:08:28,940
key D and for the moment we're going to

192
00:08:26,510 --> 00:08:31,420
say that all of the K eyes are small so

193
00:08:28,940 --> 00:08:35,539
they're less than some bound capital B

194
00:08:31,420 --> 00:08:37,430
in absolute value so the if you read

195
00:08:35,539 --> 00:08:38,659
Bonet and Mecca descends paper they

196
00:08:37,429 --> 00:08:43,069
construct a lot of spaces that look

197
00:08:38,659 --> 00:08:45,880
something like this so you have your

198
00:08:43,070 --> 00:08:50,810
modulus and on the diagonal and then you

199
00:08:45,880 --> 00:08:52,310
have your one of your 1 set of

200
00:08:50,810 --> 00:08:54,079
coefficients kind of along the bottom

201
00:08:52,310 --> 00:08:55,910
row and then you want to solve the

202
00:08:54,080 --> 00:08:59,750
closest vector problem with a target

203
00:08:55,910 --> 00:09:02,930
vector that consists of the other set of

204
00:08:59,750 --> 00:09:05,120
coefficients and it just so happens that

205
00:09:02,930 --> 00:09:07,189
once you find the closest lattice vector

206
00:09:05,120 --> 00:09:09,440
conveniently the distance will consist

207
00:09:07,190 --> 00:09:11,480
of a vector of all the nonsense so you

208
00:09:09,440 --> 00:09:13,340
expect this to be small since we said

209
00:09:11,480 --> 00:09:15,020
the nonces are all small and so then

210
00:09:13,340 --> 00:09:19,460
this is just sort of spat out the

211
00:09:15,020 --> 00:09:21,920
solution and we can solve for ok you can

212
00:09:19,460 --> 00:09:23,600
you can work out how well this works we

213
00:09:21,920 --> 00:09:28,099
don't have if you actually try to

214
00:09:23,600 --> 00:09:33,530
implement this you know solving CVP is

215
00:09:28,100 --> 00:09:36,340
annoying we have if you just want to

216
00:09:33,530 --> 00:09:38,930
like press a button it's much easier to

217
00:09:36,340 --> 00:09:41,930
find short vectors than closest vectors

218
00:09:38,930 --> 00:09:43,459
unless if you're super lazy so what

219
00:09:41,930 --> 00:09:46,339
everybody who is doing side channel

220
00:09:43,460 --> 00:09:48,650
attacks and stuff does now is basically

221
00:09:46,340 --> 00:09:51,920
sort of embed this lattice into one

222
00:09:48,650 --> 00:09:53,569
dimension larger lattice and then you

223
00:09:51,920 --> 00:09:54,920
can just find a short vector and it will

224
00:09:53,570 --> 00:09:56,270
just spit out the answer for you and so

225
00:09:54,920 --> 00:10:00,110
you don't even have to like back solve

226
00:09:56,270 --> 00:10:02,630
for anything so here we've just sort of

227
00:10:00,110 --> 00:10:04,970
added the target vector to the bottom

228
00:10:02,630 --> 00:10:06,200
and added some scaling factors and it

229
00:10:04,970 --> 00:10:12,650
will just spit out the private key as a

230
00:10:06,200 --> 00:10:14,570
shortest vector so that's cool so this

231
00:10:12,650 --> 00:10:16,250
is what we are doing there's a lot of

232
00:10:14,570 --> 00:10:17,480
papers actually that get these scaling

233
00:10:16,250 --> 00:10:20,180
factors I'm going to get off the stage

234
00:10:17,480 --> 00:10:21,410
again okay there's a bunch of papers

235
00:10:20,180 --> 00:10:26,199
that get these scaling factors wrong

236
00:10:21,410 --> 00:10:28,130
actually which is kind of interesting ok

237
00:10:26,200 --> 00:10:29,540
but the only thing that matter that

238
00:10:28,130 --> 00:10:31,750
means is that like you have to look hard

239
00:10:29,540 --> 00:10:36,680
a little bit harder for the secret key

240
00:10:31,750 --> 00:10:37,970
ok so this works how well does this work

241
00:10:36,680 --> 00:10:39,709
well we do a little bit of

242
00:10:37,970 --> 00:10:42,290
back-of-the-envelope lattice math

243
00:10:39,710 --> 00:10:44,000
ignoring all of the approximation

244
00:10:42,290 --> 00:10:46,400
factors because we're only dealing with

245
00:10:44,000 --> 00:10:48,080
really small lattices here so the

246
00:10:46,400 --> 00:10:49,400
dimension of our lattice is say the

247
00:10:48,080 --> 00:10:52,580
number of signatures that we have plus

248
00:10:49,400 --> 00:10:54,280
two the determinant is whatever this is

249
00:10:52,580 --> 00:10:56,750
it depends on the bound and the modulus

250
00:10:54,280 --> 00:10:58,400
so ignoring the approximation factors

251
00:10:56,750 --> 00:11:01,760
cuz the largest lattice that we look at

252
00:10:58,400 --> 00:11:04,699
is like 40 dimensions if we use the lol

253
00:11:01,760 --> 00:11:06,140
or bkz lattice reduction algorithms we

254
00:11:04,700 --> 00:11:07,730
should find some vector that is

255
00:11:06,140 --> 00:11:09,460
approximately determinate of the lattice

256
00:11:07,730 --> 00:11:11,380
to the one over dimension

257
00:11:09,460 --> 00:11:13,900
and we're looking for a vector with

258
00:11:11,380 --> 00:11:17,080
length that's basically square root of M

259
00:11:13,900 --> 00:11:20,470
times whatever our bound is and if we

260
00:11:17,080 --> 00:11:22,000
plug that in and solve then we get that

261
00:11:20,470 --> 00:11:25,140
the log of our bounds should be less

262
00:11:22,000 --> 00:11:27,880
than that and if you want to put in the

263
00:11:25,140 --> 00:11:30,550
approximation factor for a lattice

264
00:11:27,880 --> 00:11:33,640
reduction then that adds like a little

265
00:11:30,550 --> 00:11:36,040
turn here okay

266
00:11:33,640 --> 00:11:44,110
but generally the thing that we care

267
00:11:36,040 --> 00:11:45,819
about as we as we increase the number of

268
00:11:44,110 --> 00:11:47,380
signatures we expect this to grow

269
00:11:45,820 --> 00:11:51,880
towards log in but never actually reach

270
00:11:47,380 --> 00:11:54,100
it so this means that our bound you know

271
00:11:51,880 --> 00:11:59,830
it starts relatively small so we expect

272
00:11:54,100 --> 00:12:03,460
it to start like and over to four for

273
00:11:59,830 --> 00:12:07,960
two signatures and then grow to approach

274
00:12:03,460 --> 00:12:13,990
but never quite reach and the length of

275
00:12:07,960 --> 00:12:15,460
it okay so the original point McKenna's

276
00:12:13,990 --> 00:12:17,980
on paper they cared about the limiting

277
00:12:15,460 --> 00:12:21,190
behavior so you can reach that limit

278
00:12:17,980 --> 00:12:24,430
essentially or you can't really get past

279
00:12:21,190 --> 00:12:26,290
setting m equals square root of log n if

280
00:12:24,430 --> 00:12:29,199
we care much more about concrete

281
00:12:26,290 --> 00:12:32,170
parameters so with two signatures we we

282
00:12:29,200 --> 00:12:36,940
get a pretty good success rate with and

283
00:12:32,170 --> 00:12:39,880
we specialize for a 256-bit curve curve

284
00:12:36,940 --> 00:12:43,330
so we have a 256-bit and so the length

285
00:12:39,880 --> 00:12:45,939
of a small knots that we can solve for

286
00:12:43,330 --> 00:12:50,080
with two signatures is 128 bits this has

287
00:12:45,940 --> 00:12:52,540
some failure rate with three signatures

288
00:12:50,080 --> 00:12:54,250
we can solve for 170 bit nonce with four

289
00:12:52,540 --> 00:12:55,930
signatures we can solve for 190 bit

290
00:12:54,250 --> 00:13:01,600
knots and so on and so forth I got these

291
00:12:55,930 --> 00:13:03,069
empirically so yeah and the point at

292
00:13:01,600 --> 00:13:05,530
which lattice reduction starts to get

293
00:13:03,070 --> 00:13:08,320
sort of too slow to run millions of

294
00:13:05,530 --> 00:13:10,839
times is like say forty dimensional

295
00:13:08,320 --> 00:13:13,480
lattices so we stop there with so we can

296
00:13:10,840 --> 00:13:16,510
solve for 248 bit nonces with the forty

297
00:13:13,480 --> 00:13:17,920
dimensional lattice yeah sure do you

298
00:13:16,510 --> 00:13:22,509
want to come to a mic

299
00:13:17,920 --> 00:13:23,799
okay so in order for this to be solvable

300
00:13:22,509 --> 00:13:26,199
that you need the prot you need a

301
00:13:23,799 --> 00:13:28,209
property of these nonces that they are

302
00:13:26,199 --> 00:13:30,549
you keep saying that they're short yes

303
00:13:28,209 --> 00:13:31,748
they're small so this is a little

304
00:13:30,549 --> 00:13:33,339
different from the way you'd normally

305
00:13:31,749 --> 00:13:34,989
think of this where the problem is that

306
00:13:33,339 --> 00:13:36,220
the Nazis have like a few bits that are

307
00:13:34,989 --> 00:13:37,839
predictable mm-hmm

308
00:13:36,220 --> 00:13:40,239
so if they've danced if the Nazis have a

309
00:13:37,839 --> 00:13:42,129
few bits that are predictable then you

310
00:13:40,239 --> 00:13:43,389
have you just add the term of like the

311
00:13:42,129 --> 00:13:45,040
most significant bits and then you have

312
00:13:43,389 --> 00:13:46,779
like the rest of it is this short piece

313
00:13:45,040 --> 00:13:48,699
okay so it would have to be specific

314
00:13:46,779 --> 00:13:49,869
bits it wouldn't just be that there's

315
00:13:48,699 --> 00:13:51,368
something about them that's slightly

316
00:13:49,869 --> 00:13:52,839
distinguishable or something they'd have

317
00:13:51,369 --> 00:13:54,609
to be like some specific bits are biased

318
00:13:52,839 --> 00:13:56,319
yeah okay so with the with the lattice

319
00:13:54,609 --> 00:13:57,660
attacks basically if you have a side

320
00:13:56,319 --> 00:14:00,219
channel attack that's giving you some

321
00:13:57,660 --> 00:14:01,540
predictable bits you can say shift them

322
00:14:00,220 --> 00:14:04,119
to the most significant bits and then

323
00:14:01,540 --> 00:14:05,769
you have a small piece that is not

324
00:14:04,119 --> 00:14:06,910
predictable or that's not predictable

325
00:14:05,769 --> 00:14:08,350
that's what you're solving for and then

326
00:14:06,910 --> 00:14:09,999
you just add the term that corresponds

327
00:14:08,350 --> 00:14:10,869
to the bits that you do know and you

328
00:14:09,999 --> 00:14:14,139
have to know where they are

329
00:14:10,869 --> 00:14:16,269
okay thanks oh yeah Fourier analysis is

330
00:14:14,139 --> 00:14:17,889
a little bit works a little bit

331
00:14:16,269 --> 00:14:20,470
differently we are specializing to the

332
00:14:17,889 --> 00:14:24,220
lattice attacks this is great really

333
00:14:20,470 --> 00:14:26,110
breaking all the rules here okay a few

334
00:14:24,220 --> 00:14:28,029
variants of this so we don't necessarily

335
00:14:26,110 --> 00:14:31,059
have to have most significant bits all

336
00:14:28,029 --> 00:14:34,119
zeroes we can solve for most significant

337
00:14:31,059 --> 00:14:36,339
bits known and this are not not known

338
00:14:34,119 --> 00:14:39,149
but the same by adding one more

339
00:14:36,339 --> 00:14:39,149
signature so

340
00:14:41,970 --> 00:14:46,440
say we have to nonces that our have most

341
00:14:44,819 --> 00:14:47,969
significant bits that are the same but

342
00:14:46,440 --> 00:14:49,620
we don't know what they are we just know

343
00:14:47,970 --> 00:14:52,079
that the same we can subtract them and

344
00:14:49,620 --> 00:14:53,279
then the difference we can subtract the

345
00:14:52,079 --> 00:14:55,829
signatures and subtracting the

346
00:14:53,279 --> 00:14:57,750
signatures gives you a difference of

347
00:14:55,829 --> 00:14:59,370
nonces that's going to be all the all

348
00:14:57,750 --> 00:15:03,540
zeroes and so now we're back in the

349
00:14:59,370 --> 00:15:05,699
short nods case so that that is totally

350
00:15:03,540 --> 00:15:07,589
straightforward so we can just add if if

351
00:15:05,699 --> 00:15:08,910
for some reason somebody has generated a

352
00:15:07,589 --> 00:15:10,470
bunch of signatures with most of you

353
00:15:08,910 --> 00:15:11,819
think it's all the same we can just

354
00:15:10,470 --> 00:15:13,860
subtract one from all the rest of them

355
00:15:11,819 --> 00:15:15,300
and solve and then we're done so we just

356
00:15:13,860 --> 00:15:17,480
added one more signature to the number

357
00:15:15,300 --> 00:15:21,240
of signatures we need to solve for and

358
00:15:17,480 --> 00:15:24,269
if we can also do pretty easily the

359
00:15:21,240 --> 00:15:25,410
least significant bits case or middle

360
00:15:24,269 --> 00:15:27,600
bits but we didn't even bother looking

361
00:15:25,410 --> 00:15:30,870
at that it works the same so you can

362
00:15:27,600 --> 00:15:32,519
subtract your your signatures which

363
00:15:30,870 --> 00:15:34,560
results in just subtracting the nonces

364
00:15:32,519 --> 00:15:36,569
which gives you Sayle significant bits

365
00:15:34,560 --> 00:15:38,369
better all zeros and then we can

366
00:15:36,569 --> 00:15:40,529
multiply by a power of two to shift

367
00:15:38,370 --> 00:15:43,350
those know and Lisa needs to the most

368
00:15:40,529 --> 00:15:46,319
significant bits and then we get the

369
00:15:43,350 --> 00:15:49,620
same cases before of a short unknown

370
00:15:46,319 --> 00:15:51,420
sequence of bits so everybody on board

371
00:15:49,620 --> 00:15:52,800
with our lattice technique so we have a

372
00:15:51,420 --> 00:15:54,180
magic box we can dump a bunch of

373
00:15:52,800 --> 00:15:56,008
signatures in and it will spit out the

374
00:15:54,180 --> 00:15:58,258
private key that's the part that we care

375
00:15:56,009 --> 00:16:00,449
about so that is the end of the scary

376
00:15:58,259 --> 00:16:05,130
lattice section we are done with math

377
00:16:00,449 --> 00:16:06,329
for this talk no now we start breaking

378
00:16:05,130 --> 00:16:09,329
stuff all right

379
00:16:06,329 --> 00:16:11,370
so fun times where can we possibly find

380
00:16:09,329 --> 00:16:12,899
billions of ECDSA keys and signatures

381
00:16:11,370 --> 00:16:15,649
many of them generated by amateur

382
00:16:12,899 --> 00:16:15,649
enthusiasts

383
00:16:18,740 --> 00:16:32,510
cryptocurrencies this is so great so I

384
00:16:28,830 --> 00:16:32,510
wore I wore my theme shirt today

385
00:16:33,710 --> 00:16:41,400
this was the shirt is not my fault I'm

386
00:16:36,300 --> 00:16:42,810
just wearing it so okay unfortunately we

387
00:16:41,400 --> 00:16:44,730
do have to worry about some of the

388
00:16:42,810 --> 00:16:50,160
details of the way that cryptocurrencies

389
00:16:44,730 --> 00:16:53,130
use cryptography in order to implement

390
00:16:50,160 --> 00:16:54,449
this stuff and this caused a huge amount

391
00:16:53,130 --> 00:16:55,800
of grief you have no idea how

392
00:16:54,450 --> 00:16:58,350
complicated this is unless you've tried

393
00:16:55,800 --> 00:17:02,490
to do it in which case like I'm with you

394
00:16:58,350 --> 00:17:04,680
in our shared sort of suffering so

395
00:17:02,490 --> 00:17:09,959
Bitcoin aetherium and ripple all use the

396
00:17:04,680 --> 00:17:13,680
same elliptic curve for ECDSA SEC P 256

397
00:17:09,959 --> 00:17:16,170
K one widely known weird choice so the

398
00:17:13,680 --> 00:17:17,459
weight like sort of the cartoon version

399
00:17:16,170 --> 00:17:19,020
of the way that they use it is that the

400
00:17:17,459 --> 00:17:21,360
sender is signing some hash of a

401
00:17:19,020 --> 00:17:28,770
transaction and this gets recorded on

402
00:17:21,359 --> 00:17:32,909
the blockchain Jane look and sort of

403
00:17:28,770 --> 00:17:35,129
publish to the internet so identities

404
00:17:32,910 --> 00:17:38,370
are addresses and these addresses are

405
00:17:35,130 --> 00:17:40,860
hashes of a public key which is

406
00:17:38,370 --> 00:17:42,629
interesting because the hashes are both

407
00:17:40,860 --> 00:17:44,729
like a cryptographic hash and it loses

408
00:17:42,630 --> 00:17:47,370
information so in fact if you sort of

409
00:17:44,730 --> 00:17:50,100
parse the blockchain and you see a bunch

410
00:17:47,370 --> 00:17:52,020
of hashes and or you see a bunch of

411
00:17:50,100 --> 00:17:57,500
addresses you don't actually know the

412
00:17:52,020 --> 00:17:59,370
public keys until an address sends

413
00:17:57,500 --> 00:18:02,790
currency somewhere else

414
00:17:59,370 --> 00:18:04,949
by and generates a signature which is

415
00:18:02,790 --> 00:18:08,340
which is interesting so there can be

416
00:18:04,950 --> 00:18:10,410
lots of cryptocurrency associated with

417
00:18:08,340 --> 00:18:12,330
an address in going but until it

418
00:18:10,410 --> 00:18:14,850
generates a signature itself with an

419
00:18:12,330 --> 00:18:16,770
outgoing transaction we are

420
00:18:14,850 --> 00:18:18,540
cryptographically we have our

421
00:18:16,770 --> 00:18:19,620
cryptographic hands tied because we

422
00:18:18,540 --> 00:18:23,340
can't do anything with the address

423
00:18:19,620 --> 00:18:26,020
itself so we are we can only look at

424
00:18:23,340 --> 00:18:27,610
addresses that have already spent money

425
00:18:26,020 --> 00:18:29,379
so okay so these transactions are

426
00:18:27,610 --> 00:18:31,959
recorded on each currencies blockchain

427
00:18:29,380 --> 00:18:35,710
which is convenient for the attacker

428
00:18:31,960 --> 00:18:38,830
everything is public so if you want to

429
00:18:35,710 --> 00:18:40,720
say start analyzing the cryptography you

430
00:18:38,830 --> 00:18:42,639
can download a client you can sync the

431
00:18:40,720 --> 00:18:44,950
blockchain and you can start parsing and

432
00:18:42,640 --> 00:18:47,280
extracting the signatures and there's a

433
00:18:44,950 --> 00:18:49,510
star here because this is way more

434
00:18:47,280 --> 00:18:52,270
annoying at practice than it sounds how

435
00:18:49,510 --> 00:18:55,270
many of you have tried to do this is it

436
00:18:52,270 --> 00:18:57,639
like painful and the grief inducing like

437
00:18:55,270 --> 00:18:59,710
this is I have no idea why it's so

438
00:18:57,640 --> 00:19:01,630
complicated like the way that and I

439
00:18:59,710 --> 00:19:04,390
should say that my co-author yaki him

440
00:19:01,630 --> 00:19:06,460
was the one who did kind of this last

441
00:19:04,390 --> 00:19:09,750
part and I was just like can you please

442
00:19:06,460 --> 00:19:13,570
send me signatures I think this is

443
00:19:09,750 --> 00:19:16,780
because the way that Bitcoin like

444
00:19:13,570 --> 00:19:19,330
generates hashes of transactions is

445
00:19:16,780 --> 00:19:22,210
incredibly complicated and it's like

446
00:19:19,330 --> 00:19:23,379
changed and so the only way that like we

447
00:19:22,210 --> 00:19:25,270
could figure out to do this is to just

448
00:19:23,380 --> 00:19:27,670
like modify the client to have it like

449
00:19:25,270 --> 00:19:28,990
print stuff out because like while it

450
00:19:27,670 --> 00:19:31,260
was validating the signature because it

451
00:19:28,990 --> 00:19:34,870
was just impossible to compute otherwise

452
00:19:31,260 --> 00:19:39,190
and let's see are there other

453
00:19:34,870 --> 00:19:41,860
weirdnesses I think there's a few more

454
00:19:39,190 --> 00:19:42,970
so okay but the the cartoon version of

455
00:19:41,860 --> 00:19:44,229
this is that you can just download the

456
00:19:42,970 --> 00:19:47,590
blockchain you get a bunch of signatures

457
00:19:44,230 --> 00:19:49,780
and and it's great the non cartoon and

458
00:19:47,590 --> 00:19:52,629
the non cartoon version is that if you

459
00:19:49,780 --> 00:19:54,428
start looking at all of the like Bitcoin

460
00:19:52,630 --> 00:19:56,410
analysis libraries that are that people

461
00:19:54,429 --> 00:19:57,850
have published out there for some reason

462
00:19:56,410 --> 00:19:59,350
they assume that people don't want to

463
00:19:57,850 --> 00:20:00,790
actually examine the signatures so they

464
00:19:59,350 --> 00:20:02,290
don't make it easy to get get to them

465
00:20:00,790 --> 00:20:03,340
and they for some reason they assume

466
00:20:02,290 --> 00:20:06,250
that you don't actually want the

467
00:20:03,340 --> 00:20:07,750
concrete value of a hash of like the

468
00:20:06,250 --> 00:20:09,190
hash of the transaction why would

469
00:20:07,750 --> 00:20:12,790
anybody ever want that so it's hard to

470
00:20:09,190 --> 00:20:14,380
get anyway okay so this like much

471
00:20:12,790 --> 00:20:16,659
research so like what you know Matt was

472
00:20:14,380 --> 00:20:18,460
talking about earlier today where

473
00:20:16,660 --> 00:20:19,990
there's like a great little

474
00:20:18,460 --> 00:20:22,179
cryptographic component and then there's

475
00:20:19,990 --> 00:20:23,800
like months of engineering this is like

476
00:20:22,179 --> 00:20:29,340
the months of engineering for this this

477
00:20:23,800 --> 00:20:31,720
work so all right once we have a

478
00:20:29,340 --> 00:20:33,669
convenient way of extracting the

479
00:20:31,720 --> 00:20:34,580
signatures here is our cryptanalysis

480
00:20:33,670 --> 00:20:38,300
program

481
00:20:34,580 --> 00:20:39,770
so we will scrape the blockchains

482
00:20:38,300 --> 00:20:41,240
so the Bitcoin blockchain when we were

483
00:20:39,770 --> 00:20:43,970
looking at it had a billion signatures

484
00:20:41,240 --> 00:20:46,070
in it which is pretty cool we can group

485
00:20:43,970 --> 00:20:48,530
them by public key that generated each

486
00:20:46,070 --> 00:20:50,780
signature so this resulted in say sixty

487
00:20:48,530 --> 00:20:55,879
million public keys for Bitcoin that had

488
00:20:50,780 --> 00:20:58,490
generated more than one signature then

489
00:20:55,880 --> 00:21:01,130
we can check for the two attacks that we

490
00:20:58,490 --> 00:21:03,830
we talked about so the easy attack is

491
00:21:01,130 --> 00:21:05,900
checking for repeated nonces which is

492
00:21:03,830 --> 00:21:09,409
you can just look for a duplicated R

493
00:21:05,900 --> 00:21:12,200
value in the signature or you can also

494
00:21:09,410 --> 00:21:15,260
look for latus attacks on the biased

495
00:21:12,200 --> 00:21:20,030
nonces as we described we spent about 50

496
00:21:15,260 --> 00:21:24,260
CPU years running these and at that

497
00:21:20,030 --> 00:21:26,360
point either you're rich and you can

498
00:21:24,260 --> 00:21:30,230
retire to some island without an

499
00:21:26,360 --> 00:21:31,820
extradition treaty or you are not rich

500
00:21:30,230 --> 00:21:37,870
in which case you publish a paper and

501
00:21:31,820 --> 00:21:37,870
I'm here so you can see what happened

502
00:21:38,710 --> 00:21:48,410
all right so sort of the details of what

503
00:21:43,490 --> 00:21:53,930
we ran we clustered the signatures by

504
00:21:48,410 --> 00:21:56,270
the public key we selected random

505
00:21:53,930 --> 00:21:58,250
subsets of two three four and forty

506
00:21:56,270 --> 00:22:00,110
signatures and optimistically just ran

507
00:21:58,250 --> 00:22:04,790
the attacks for the short prefix and

508
00:22:00,110 --> 00:22:06,649
suffix nonces so kind of if the

509
00:22:04,790 --> 00:22:08,180
collection of signatures that we chose

510
00:22:06,650 --> 00:22:10,000
happen to be vulnerable we would get the

511
00:22:08,180 --> 00:22:13,430
private key if not we would get nothing

512
00:22:10,000 --> 00:22:15,680
and so I want to add one little extra

513
00:22:13,430 --> 00:22:17,810
weird snag in the way that these crypto

514
00:22:15,680 --> 00:22:19,610
currencies generate signatures which is

515
00:22:17,810 --> 00:22:22,970
that they're really worried about having

516
00:22:19,610 --> 00:22:25,250
unique signatures so fact about you see

517
00:22:22,970 --> 00:22:28,940
DSA the signatures are an S and are a

518
00:22:25,250 --> 00:22:30,410
negative s both validate and Bitcoin

519
00:22:28,940 --> 00:22:32,600
makes the signatures unique by choosing

520
00:22:30,410 --> 00:22:34,910
this smaller of s and negative s Mata

521
00:22:32,600 --> 00:22:37,459
to make them unique this has the effect

522
00:22:34,910 --> 00:22:40,370
of negating K like the the nonce

523
00:22:37,460 --> 00:22:42,170
so for the prefix and suffix attacks

524
00:22:40,370 --> 00:22:44,270
where we had to do the the

525
00:22:42,170 --> 00:22:46,670
subtraction we actually have to root for

526
00:22:44,270 --> 00:22:49,480
the signs of all the nonces which is

527
00:22:46,670 --> 00:22:51,440
like super annoying

528
00:22:49,480 --> 00:22:53,240
maybe there's a clever way to get around

529
00:22:51,440 --> 00:22:56,570
this maybe for analysis gets around this

530
00:22:53,240 --> 00:23:00,800
but uh we did not do that so there's

531
00:22:56,570 --> 00:23:01,669
some brute-forcing going on ok so what

532
00:23:00,800 --> 00:23:03,980
did we find

533
00:23:01,670 --> 00:23:06,320
okay so I'll start with the easy case

534
00:23:03,980 --> 00:23:08,210
which is the repeated nonce K values so

535
00:23:06,320 --> 00:23:12,200
this has been analyzed many times by

536
00:23:08,210 --> 00:23:16,190
academics since 2013 so we'll just sort

537
00:23:12,200 --> 00:23:22,220
of summarize what you find so here is so

538
00:23:16,190 --> 00:23:25,400
the x axis is signatures over time with

539
00:23:22,220 --> 00:23:28,550
repeated values and then the size of the

540
00:23:25,400 --> 00:23:31,670
little circles there is the number of

541
00:23:28,550 --> 00:23:37,040
signatures on that date with repeated

542
00:23:31,670 --> 00:23:38,480
with a repeated knots so Bitcoin out of

543
00:23:37,040 --> 00:23:41,090
the billions signature is two and a half

544
00:23:38,480 --> 00:23:45,320
million of them have a non unique K this

545
00:23:41,090 --> 00:23:47,780
come from 1,300 unique keys etherium

546
00:23:45,320 --> 00:23:49,550
there's a smaller number of keys and

547
00:23:47,780 --> 00:23:53,840
smaller number of signatures and ripple

548
00:23:49,550 --> 00:23:55,399
also there there are multiple attackers

549
00:23:53,840 --> 00:23:56,840
who are systematically scanning the

550
00:23:55,400 --> 00:23:59,350
Bitcoin blockchain and stealing all the

551
00:23:56,840 --> 00:24:01,909
money from anybody who produces a

552
00:23:59,350 --> 00:24:07,969
signature with a non unique nonce so

553
00:24:01,910 --> 00:24:09,440
there was no money in the Bitcoin there

554
00:24:07,970 --> 00:24:11,630
there actually were funds in the

555
00:24:09,440 --> 00:24:13,370
etherium and ripple cases so people were

556
00:24:11,630 --> 00:24:17,440
not looking for this yet and aetherium

557
00:24:13,370 --> 00:24:20,449
and ripple you may notice that there's a

558
00:24:17,440 --> 00:24:21,830
interesting something interesting going

559
00:24:20,450 --> 00:24:26,660
on here with one of the values so I'll

560
00:24:21,830 --> 00:24:28,490
talk about that shortly okay what do we

561
00:24:26,660 --> 00:24:29,630
find with a lattice attacks you might

562
00:24:28,490 --> 00:24:31,040
expect that we would find nothing

563
00:24:29,630 --> 00:24:32,270
because of course who would be stupid

564
00:24:31,040 --> 00:24:34,310
enough to input like make a mistake

565
00:24:32,270 --> 00:24:37,760
there but in fact we found a number of

566
00:24:34,310 --> 00:24:39,800
things so the y-axis is the sort of

567
00:24:37,760 --> 00:24:41,720
format of the nonce that we found

568
00:24:39,800 --> 00:24:46,550
prefixes or suffixes in the lung length

569
00:24:41,720 --> 00:24:50,060
of the random part and so we actually

570
00:24:46,550 --> 00:24:51,490
found 6,000 signatures from 300 keys in

571
00:24:50,060 --> 00:24:54,668
Bitcoin these can

572
00:24:51,490 --> 00:24:59,340
it contained point 0:08 Bitcoin which is

573
00:24:54,669 --> 00:25:01,510
I think 30 something dollars and

574
00:24:59,340 --> 00:25:03,699
etherium there were five signatures from

575
00:25:01,510 --> 00:25:06,460
one key they contained some ether and we

576
00:25:03,700 --> 00:25:10,630
also found some SSH keys that were

577
00:25:06,460 --> 00:25:18,370
vulnerable due to this attack so I will

578
00:25:10,630 --> 00:25:23,039
now go through a few stories so what is

579
00:25:18,370 --> 00:25:28,989
going on with this giant circle here so

580
00:25:23,039 --> 00:25:32,559
this value so 99.9% of the repeated

581
00:25:28,990 --> 00:25:35,980
Bitcoin nonce values are that that

582
00:25:32,559 --> 00:25:37,960
number this is n minus 1 over 2 where n

583
00:25:35,980 --> 00:25:43,059
is the order of the elliptic curve used

584
00:25:37,960 --> 00:25:46,659
for a Bitcoin and it is weird fact the x

585
00:25:43,059 --> 00:25:50,230
coordinate of 1/2 times the generator

586
00:25:46,659 --> 00:25:53,289
point has 166 bits instead of 256 so all

587
00:25:50,230 --> 00:25:59,440
of these signatures the R value is

588
00:25:53,289 --> 00:26:00,929
shorter by 11 bytes I I'm really I'm

589
00:25:59,440 --> 00:26:04,360
doing

590
00:26:00,929 --> 00:26:11,080
Kelsie's expression right now for those

591
00:26:04,360 --> 00:26:12,549
of you at home ok so why are people

592
00:26:11,080 --> 00:26:14,918
doing this well apparently the

593
00:26:12,549 --> 00:26:16,539
suggestion to do this in the context of

594
00:26:14,919 --> 00:26:17,830
Bitcoin and like well the reason that

595
00:26:16,539 --> 00:26:19,510
people are generating these these

596
00:26:17,830 --> 00:26:21,399
signature values is that Greg Maxwell

597
00:26:19,510 --> 00:26:23,289
suggested this to clear dust transaction

598
00:26:21,399 --> 00:26:25,149
so like sort of small amounts of

599
00:26:23,289 --> 00:26:27,730
cryptocurrency left in particular

600
00:26:25,149 --> 00:26:29,320
addresses and I guess you pay for the

601
00:26:27,730 --> 00:26:32,049
length of your transaction and so by

602
00:26:29,320 --> 00:26:34,029
having a signature that is shorter by 11

603
00:26:32,049 --> 00:26:35,980
bytes you save a small amount in

604
00:26:34,029 --> 00:26:37,570
transaction fees ok that's what people

605
00:26:35,980 --> 00:26:40,929
are doing this but the bigger question

606
00:26:37,570 --> 00:26:45,970
is why does this value have this

607
00:26:40,929 --> 00:26:47,860
property and somehow the Bitcoin people

608
00:26:45,970 --> 00:26:51,760
figured this out and are taking

609
00:26:47,860 --> 00:26:53,770
advantage of it but then like this isn't

610
00:26:51,760 --> 00:26:56,200
actually like a documented property of

611
00:26:53,770 --> 00:26:58,929
this curve it seems to be an artifact

612
00:26:56,200 --> 00:27:01,000
from the way it was generated and nobody

613
00:26:58,929 --> 00:27:02,980
I have talked to you know knows why it

614
00:27:01,000 --> 00:27:03,800
has this property but it is the case

615
00:27:02,980 --> 00:27:06,980
that a number of the

616
00:27:03,800 --> 00:27:09,050
the other purpose of this type also have

617
00:27:06,980 --> 00:27:11,690
this property

618
00:27:09,050 --> 00:27:17,270
some of them produce the same value and

619
00:27:11,690 --> 00:27:20,260
some of them have kind of variants of

620
00:27:17,270 --> 00:27:22,490
this value it also turns out that the

621
00:27:20,260 --> 00:27:28,129
generation procedure for these curves

622
00:27:22,490 --> 00:27:30,020
was not documented so this this is this

623
00:27:28,130 --> 00:27:32,090
tells us something perhaps I mean so

624
00:27:30,020 --> 00:27:34,490
I've talked to a number of people about

625
00:27:32,090 --> 00:27:37,280
this and is an ongoing mystery but if

626
00:27:34,490 --> 00:27:39,170
you we're discovering more things as we

627
00:27:37,280 --> 00:27:40,340
go along so this is this is telling us

628
00:27:39,170 --> 00:27:42,470
something about how these curves is

629
00:27:40,340 --> 00:27:44,120
generate are generated properly probably

630
00:27:42,470 --> 00:27:56,720
because you would never expect this to

631
00:27:44,120 --> 00:27:59,510
happen at random and you you may notice

632
00:27:56,720 --> 00:28:02,390
that 166 bits is intriguingly close to

633
00:27:59,510 --> 00:28:05,840
160 bits which is the length of say a

634
00:28:02,390 --> 00:28:08,090
sha-1 hash of something but it's not 160

635
00:28:05,840 --> 00:28:10,699
bits it's 166 bits so they're not just

636
00:28:08,090 --> 00:28:11,990
like merely like hashing something and

637
00:28:10,700 --> 00:28:16,280
incrementing it's like hashing and then

638
00:28:11,990 --> 00:28:17,750
appending and like I can I can like if

639
00:28:16,280 --> 00:28:19,670
people would like to see more I can show

640
00:28:17,750 --> 00:28:23,630
you a little bit of what we figured out

641
00:28:19,670 --> 00:28:24,500
but so this is fun things that you find

642
00:28:23,630 --> 00:28:28,100
when you look at public key

643
00:28:24,500 --> 00:28:31,100
infrastructure so okay we will continue

644
00:28:28,100 --> 00:28:33,740
on to further fun things that we found

645
00:28:31,100 --> 00:28:37,459
so one of the compromise keys from

646
00:28:33,740 --> 00:28:40,120
repeated nonces we traced to dark wallet

647
00:28:37,460 --> 00:28:42,800
is we were basically just like googling

648
00:28:40,120 --> 00:28:44,000
addresses to figure out what they were

649
00:28:42,800 --> 00:28:46,760
because of course there isn't much

650
00:28:44,000 --> 00:28:48,890
metadata in Bitcoin itself that would

651
00:28:46,760 --> 00:28:50,390
tell us so this was part of a three out

652
00:28:48,890 --> 00:28:53,330
of five multi signature address so that

653
00:28:50,390 --> 00:28:55,040
means that you need signatures like this

654
00:28:53,330 --> 00:28:57,860
address is associated with a number of

655
00:28:55,040 --> 00:28:59,240
keys and you need signatures from at

656
00:28:57,860 --> 00:29:02,360
least three of those keys in order to

657
00:28:59,240 --> 00:29:06,010
send money out of the address and this

658
00:29:02,360 --> 00:29:08,740
was used for donations to dark wallet is

659
00:29:06,010 --> 00:29:11,240
at the time that we were looking this

660
00:29:08,740 --> 00:29:13,820
address held a large number of funds

661
00:29:11,240 --> 00:29:15,620
like pretty pretty significant so we

662
00:29:13,820 --> 00:29:17,290
thought that they might care

663
00:29:15,620 --> 00:29:22,159
the fact that one of their keys had been

664
00:29:17,290 --> 00:29:25,820
compromised and so I got in contact with

665
00:29:22,160 --> 00:29:27,680
one of the authors of this site who is

666
00:29:25,820 --> 00:29:31,149
very interesting person both of the

667
00:29:27,680 --> 00:29:35,030
people are very interesting

668
00:29:31,150 --> 00:29:37,370
cryptocurrency people are strange so so

669
00:29:35,030 --> 00:29:39,320
I'm chatting with him and I was like so

670
00:29:37,370 --> 00:29:41,929
can you like tell me how you generated

671
00:29:39,320 --> 00:29:43,309
these signatures because it would be

672
00:29:41,930 --> 00:29:45,710
interesting to know what implementation

673
00:29:43,309 --> 00:29:47,899
it was and we could like sort of trace

674
00:29:45,710 --> 00:29:49,760
this down and he said it's either me I

675
00:29:47,900 --> 00:29:51,470
was calculating the signatures manually

676
00:29:49,760 --> 00:29:52,460
or my friend who was working on dark

677
00:29:51,470 --> 00:29:55,970
wallet it might have been an earlier

678
00:29:52,460 --> 00:29:57,290
version so calculating the signatures

679
00:29:55,970 --> 00:30:00,530
manual there's like a lot of money in

680
00:29:57,290 --> 00:30:03,020
here and it's just like kind of hand

681
00:30:00,530 --> 00:30:05,178
generating ECDSA signatures and oops you

682
00:30:03,020 --> 00:30:08,600
forget to seed your your energy and and

683
00:30:05,179 --> 00:30:11,950
then you've compromised your key so this

684
00:30:08,600 --> 00:30:11,949
is the state of cryptographic software

685
00:30:13,300 --> 00:30:18,860
so some more human factors so after

686
00:30:17,090 --> 00:30:21,889
finding some very small announces we've

687
00:30:18,860 --> 00:30:24,860
forced all the 32-bit nonces so this

688
00:30:21,890 --> 00:30:26,809
compromise 275 signatures from 52 keys

689
00:30:24,860 --> 00:30:29,750
some of the nonce values that we

690
00:30:26,809 --> 00:30:34,960
observed were obviously not randomly

691
00:30:29,750 --> 00:30:34,960
generated so people are

692
00:30:35,450 --> 00:30:48,120
having fun yes I mean I guess we could

693
00:30:46,440 --> 00:30:49,890
like try to get some confidence values

694
00:30:48,120 --> 00:30:52,860
like if we had some prior here then I

695
00:30:49,890 --> 00:30:56,270
could like I don't know what the with

696
00:30:52,860 --> 00:31:02,370
the confidence interval for this is

697
00:30:56,270 --> 00:31:03,780
anyway so okay sort of more like on a

698
00:31:02,370 --> 00:31:05,250
slightly more serious note there there

699
00:31:03,780 --> 00:31:07,230
have been a number of random number

700
00:31:05,250 --> 00:31:10,290
generation of vulnerabilities that have

701
00:31:07,230 --> 00:31:12,990
impacted Bitcoin over several years two

702
00:31:10,290 --> 00:31:15,720
of the most prominent ones there was a

703
00:31:12,990 --> 00:31:17,820
bad vulnerability and Android secure

704
00:31:15,720 --> 00:31:20,250
random they were I think he was not like

705
00:31:17,820 --> 00:31:21,960
getting a fresh state on a fork and so

706
00:31:20,250 --> 00:31:24,299
there were a number of repeated nonces

707
00:31:21,960 --> 00:31:26,870
and a lot of people got large numbers of

708
00:31:24,299 --> 00:31:30,418
funds stolen because it repeated nonces

709
00:31:26,870 --> 00:31:33,510
generated from Android Bitcoin wallets

710
00:31:30,419 --> 00:31:40,200
in 2013 there was also a vulnerability

711
00:31:33,510 --> 00:31:42,390
in the blockchain dot info wallet from

712
00:31:40,200 --> 00:31:46,860
25th I think the vulnerability started

713
00:31:42,390 --> 00:31:48,450
in 2015 there was an issue where they

714
00:31:46,860 --> 00:31:53,100
were seeding from random.org and

715
00:31:48,450 --> 00:31:58,559
random.org to redirect from HTTP to

716
00:31:53,100 --> 00:32:00,809
HTTPS and so the blockchain info was

717
00:31:58,559 --> 00:32:03,000
pulling the the data from here but then

718
00:32:00,809 --> 00:32:04,918
when this redirect happened they were

719
00:32:03,000 --> 00:32:07,230
just getting the 403 redirect rather

720
00:32:04,919 --> 00:32:10,679
than the actual output that was supposed

721
00:32:07,230 --> 00:32:13,020
to be coming from random.org and so this

722
00:32:10,679 --> 00:32:15,530
resulted in a constant seed for the

723
00:32:13,020 --> 00:32:15,530
random number generator

724
00:32:15,710 --> 00:32:21,420
so we can see I mean it's it's hard to

725
00:32:19,890 --> 00:32:23,220
tell I mean these were two of the like

726
00:32:21,420 --> 00:32:25,410
most highly publicized random number

727
00:32:23,220 --> 00:32:29,160
generator vulnerabilities in Bitcoin

728
00:32:25,410 --> 00:32:30,900
wallets but these don't really seem to

729
00:32:29,160 --> 00:32:33,750
quite line up with with what's going on

730
00:32:30,900 --> 00:32:38,370
here so there's clue what a lot of other

731
00:32:33,750 --> 00:32:40,740
stuff happening okay I would like to

732
00:32:38,370 --> 00:32:43,050
talk about sort of the small knots as

733
00:32:40,740 --> 00:32:44,760
what is going on there so most of the

734
00:32:43,050 --> 00:32:48,149
small announces that we found were in

735
00:32:44,760 --> 00:32:50,690
like one cluster of 64-bit nonces almost

736
00:32:48,150 --> 00:32:54,480
all of which were multi signature

737
00:32:50,690 --> 00:32:57,360
addresses and they seem to be confined

738
00:32:54,480 --> 00:32:59,280
to a particular set of dates but this

739
00:32:57,360 --> 00:33:01,050
was like all of the metadata that we had

740
00:32:59,280 --> 00:33:03,360
we like looked for the addresses we

741
00:33:01,050 --> 00:33:06,840
cannot figure this out and so actually

742
00:33:03,360 --> 00:33:08,340
after we posted our paper online Greg

743
00:33:06,840 --> 00:33:10,470
Maxwell wrote to us and he's like based

744
00:33:08,340 --> 00:33:14,159
off of the set of characteristics I

745
00:33:10,470 --> 00:33:17,220
think I know what caused this and so it

746
00:33:14,160 --> 00:33:18,660
turns out that there was this library

747
00:33:17,220 --> 00:33:22,730
written by bitpay

748
00:33:18,660 --> 00:33:25,460
this bitpay organization and when they

749
00:33:22,730 --> 00:33:29,310
they made an update to their library

750
00:33:25,460 --> 00:33:32,010
update sign function to use elliptic in

751
00:33:29,310 --> 00:33:36,000
which they gave the wrong length of

752
00:33:32,010 --> 00:33:37,440
buffer for the length of the knots that

753
00:33:36,000 --> 00:33:40,730
they were the length of the randomness

754
00:33:37,440 --> 00:33:43,320
that they were generating and this

755
00:33:40,730 --> 00:33:44,580
update corresponds exactly with the

756
00:33:43,320 --> 00:33:47,100
beginning of the generation of these

757
00:33:44,580 --> 00:33:49,409
nonces this was fixed relatively quickly

758
00:33:47,100 --> 00:33:52,409
this was fixed only a few weeks later to

759
00:33:49,410 --> 00:33:57,810
have the correct length of knot so what

760
00:33:52,410 --> 00:33:59,640
is going on here well so I've marked the

761
00:33:57,810 --> 00:34:01,110
two dates here so this is this is the

762
00:33:59,640 --> 00:34:03,350
beginning date and this is the the date

763
00:34:01,110 --> 00:34:05,669
at which it was fixed but by this point

764
00:34:03,350 --> 00:34:07,350
the data which had been fixed this

765
00:34:05,670 --> 00:34:09,420
library had already been fortunate was

766
00:34:07,350 --> 00:34:11,670
being used in a number of other projects

767
00:34:09,420 --> 00:34:15,060
and the bug fix did not make it into

768
00:34:11,670 --> 00:34:17,780
these downstream projects and so it

769
00:34:15,060 --> 00:34:20,290
continued to be used for quite a while

770
00:34:17,780 --> 00:34:25,149
afterward before being fixed

771
00:34:20,290 --> 00:34:30,969
so yes I think this has something about

772
00:34:25,149 --> 00:34:32,350
the fragility of ECDSA general okay this

773
00:34:30,969 --> 00:34:33,489
may also be a familiar story to

774
00:34:32,350 --> 00:34:35,168
everybody who's tried to report a

775
00:34:33,489 --> 00:34:43,299
vulnerability or fix a vulnerability in

776
00:34:35,168 --> 00:34:45,460
a product so okay more fun we can we

777
00:34:43,300 --> 00:34:46,780
tried looking for more 64-bit nonces

778
00:34:45,460 --> 00:34:48,760
since our lattice attacks we were just

779
00:34:46,780 --> 00:34:50,679
sort of running them on a random subset

780
00:34:48,760 --> 00:34:52,840
of signatures we were not guaranteed to

781
00:34:50,679 --> 00:34:55,690
find all of the vulnerable keys but a

782
00:34:52,840 --> 00:34:57,310
64-bit nan so you can actually compute

783
00:34:55,690 --> 00:35:00,670
outright if you want

784
00:34:57,310 --> 00:35:02,500
so using Pollard Rho or baby steps ient

785
00:35:00,670 --> 00:35:07,330
stuff you could basically compute a

786
00:35:02,500 --> 00:35:10,720
64-bit nonsan in 32 and 2 to the 32 work

787
00:35:07,330 --> 00:35:14,520
2 to the 32 work times a billion

788
00:35:10,720 --> 00:35:17,259
signatures is not feasible still so we

789
00:35:14,520 --> 00:35:18,910
altered the parameters a little bit to

790
00:35:17,260 --> 00:35:21,700
try to search for this so essentially we

791
00:35:18,910 --> 00:35:25,029
did a pre computation we can pre

792
00:35:21,700 --> 00:35:27,189
computed a hash table of two to the

793
00:35:25,030 --> 00:35:27,930
thirty nine elements this took up 2.2

794
00:35:27,190 --> 00:35:31,020
terabytes

795
00:35:27,930 --> 00:35:33,430
this was sized because the largest

796
00:35:31,020 --> 00:35:35,650
amount of RAM that I had on a single

797
00:35:33,430 --> 00:35:39,190
machine was three terabytes so this is

798
00:35:35,650 --> 00:35:41,440
intended to fit into RAM and then we pre

799
00:35:39,190 --> 00:35:43,720
computed a 232 lookup table of the logs

800
00:35:41,440 --> 00:35:45,970
of these elements so this took a few

801
00:35:43,720 --> 00:35:47,049
days on a few hundred nodes of my

802
00:35:45,970 --> 00:35:50,290
cluster to pre-compute

803
00:35:47,050 --> 00:35:53,520
so then this led us do 2 to the 25 work

804
00:35:50,290 --> 00:35:56,680
to lookup signature

805
00:35:53,520 --> 00:35:58,750
unfortunately the lookup was still 2 to

806
00:35:56,680 --> 00:36:03,310
the 25 should be feasible but because

807
00:35:58,750 --> 00:36:05,680
you're looking up in this huge amount of

808
00:36:03,310 --> 00:36:08,110
memory there is no caching possible and

809
00:36:05,680 --> 00:36:10,440
so it turns out to actually be pretty

810
00:36:08,110 --> 00:36:13,570
slow it's about 10 seconds per lookup

811
00:36:10,440 --> 00:36:16,360
our machines to do this so we ran it for

812
00:36:13,570 --> 00:36:20,380
a couple weeks and checked a random

813
00:36:16,360 --> 00:36:21,850
subset of 140,000 signatures and the

814
00:36:20,380 --> 00:36:23,530
conclude tentative conclusion that we

815
00:36:21,850 --> 00:36:24,670
have is that 64-bit nonces are not much

816
00:36:23,530 --> 00:36:27,740
more common than the ones that we found

817
00:36:24,670 --> 00:36:35,350
so we found most of them probably

818
00:36:27,740 --> 00:36:38,270
okay so other fun here is a set of

819
00:36:35,350 --> 00:36:42,860
signatures that were generated by SSH

820
00:36:38,270 --> 00:36:48,310
servers that had a shared 32 bit suffix

821
00:36:42,860 --> 00:36:51,560
so you can see this value in blue is

822
00:36:48,310 --> 00:36:55,580
shared among all of these signatures so

823
00:36:51,560 --> 00:36:58,130
what is this if you google this value it

824
00:36:55,580 --> 00:37:05,810
turns out to be one of the round

825
00:36:58,130 --> 00:37:13,820
constants for sha-2 with change byte

826
00:37:05,810 --> 00:37:15,350
order of course but I don't know how

827
00:37:13,820 --> 00:37:17,810
this happened I don't know how you like

828
00:37:15,350 --> 00:37:21,290
I mean I assume somebody was trying to

829
00:37:17,810 --> 00:37:23,390
like use like sha to to generate their

830
00:37:21,290 --> 00:37:25,070
nonces which is like a good procedure

831
00:37:23,390 --> 00:37:27,799
but I don't know how you screw up your

832
00:37:25,070 --> 00:37:30,860
shot to implementation so that you get

833
00:37:27,800 --> 00:37:37,609
like a fixed value in the least

834
00:37:30,860 --> 00:37:40,040
significant bits of this so interesting

835
00:37:37,609 --> 00:37:44,390
we also have no idea what implementation

836
00:37:40,040 --> 00:37:49,220
this is so the final sort of screw up

837
00:37:44,390 --> 00:37:51,500
that I want to talk about is probably

838
00:37:49,220 --> 00:37:53,919
memory unsafe code so there were 54

839
00:37:51,500 --> 00:37:59,570
signatures with a shared 128-bit suffix

840
00:37:53,920 --> 00:38:01,390
and the shared suffix is you can look so

841
00:37:59,570 --> 00:38:04,880
they have been grouped by suffix here

842
00:38:01,390 --> 00:38:07,970
and you can see that actually if you

843
00:38:04,880 --> 00:38:12,650
compare these to the secret keys that

844
00:38:07,970 --> 00:38:14,419
were associated with the nonces the 128

845
00:38:12,650 --> 00:38:16,850
least significant bits of the nonce

846
00:38:14,420 --> 00:38:21,859
where the same as the 128 most

847
00:38:16,850 --> 00:38:25,700
significant bits of the secret key just

848
00:38:21,859 --> 00:38:27,109
weird so you might hypothesize that you

849
00:38:25,700 --> 00:38:29,118
know a possible explanation is that

850
00:38:27,109 --> 00:38:31,040
somebody writes some code where they get

851
00:38:29,119 --> 00:38:33,500
the length of the the secret key wrong

852
00:38:31,040 --> 00:38:37,340
and they accidentally like sort of

853
00:38:33,500 --> 00:38:39,140
overwrite a buffer and

854
00:38:37,340 --> 00:38:46,820
or sort of cops start copying things

855
00:38:39,140 --> 00:38:48,410
into the the key but the thing that's

856
00:38:46,820 --> 00:38:52,130
really interesting about this case is

857
00:38:48,410 --> 00:38:55,640
that these signatures when we looked at

858
00:38:52,130 --> 00:39:00,080
the addresses that were where the money

859
00:38:55,640 --> 00:39:01,549
was being transferred out of a lot of

860
00:39:00,080 --> 00:39:03,410
them had been published on the web

861
00:39:01,550 --> 00:39:05,960
somewhere so they were associated with

862
00:39:03,410 --> 00:39:08,750
mem like memory while many memory

863
00:39:05,960 --> 00:39:14,170
wallets that had easy to guess passwords

864
00:39:08,750 --> 00:39:19,580
like Android or something or they were

865
00:39:14,170 --> 00:39:22,730
contained in like example code from

866
00:39:19,580 --> 00:39:24,529
various implementations that had like

867
00:39:22,730 --> 00:39:25,970
just you know here's a sample address

868
00:39:24,530 --> 00:39:27,530
and here's how you generate like a

869
00:39:25,970 --> 00:39:29,330
transaction to sent to that address and

870
00:39:27,530 --> 00:39:31,520
people had like sent money to that

871
00:39:29,330 --> 00:39:36,819
address presumably copying the sample

872
00:39:31,520 --> 00:39:38,930
code and then someone had like then

873
00:39:36,820 --> 00:39:41,590
taken the money out of that address

874
00:39:38,930 --> 00:39:44,480
because the the secret key was there and

875
00:39:41,590 --> 00:39:46,190
so our hypothesis is that these

876
00:39:44,480 --> 00:39:48,620
transactions were actually generated by

877
00:39:46,190 --> 00:39:50,000
an attacker who is stealing money from

878
00:39:48,620 --> 00:39:52,339
these vulnerable addresses that have

879
00:39:50,000 --> 00:39:55,190
been revealed somehow already on the web

880
00:39:52,340 --> 00:39:56,600
and that the attackers code is the one

881
00:39:55,190 --> 00:39:58,940
with the memory safety vulnerabilities

882
00:39:56,600 --> 00:40:03,290
so I don't feel that bad about sort of

883
00:39:58,940 --> 00:40:04,610
dropping O'Dea here so there is a simple

884
00:40:03,290 --> 00:40:05,930
and well-known countermeasure to

885
00:40:04,610 --> 00:40:07,460
everything that I have been talking

886
00:40:05,930 --> 00:40:10,310
about and this has been known for years

887
00:40:07,460 --> 00:40:12,710
which is to use determining terminus to

888
00:40:10,310 --> 00:40:15,350
ECDSA you can generate your secret nonce

889
00:40:12,710 --> 00:40:18,500
by you know hashing or H Mac or whatever

890
00:40:15,350 --> 00:40:20,779
your secret key and your message hash

891
00:40:18,500 --> 00:40:22,640
and probably like basically any

892
00:40:20,780 --> 00:40:26,630
combination of this is essentially

893
00:40:22,640 --> 00:40:29,029
secure if and there's an RFC that does

894
00:40:26,630 --> 00:40:30,410
this all of the official libraries for

895
00:40:29,030 --> 00:40:32,360
the cryptocurrencies that we looked at

896
00:40:30,410 --> 00:40:34,399
Bitcoin etherion ripple or already do

897
00:40:32,360 --> 00:40:35,780
this and have been doing it for years so

898
00:40:34,400 --> 00:40:38,960
everything that we have been talking

899
00:40:35,780 --> 00:40:41,960
about is not from the official core

900
00:40:38,960 --> 00:40:43,250
libraries of these crypto currencies at

901
00:40:41,960 --> 00:40:44,750
two five five one nine bills and

902
00:40:43,250 --> 00:40:45,580
deterministic non generation from the

903
00:40:44,750 --> 00:40:48,670
start

904
00:40:45,580 --> 00:40:53,259
ECDSA probably should have but it didn't

905
00:40:48,670 --> 00:40:58,930
so sort of backing up a little bit sort

906
00:40:53,260 --> 00:40:59,920
of what are we doing here essentially we

907
00:40:58,930 --> 00:41:01,299
spend a lot of time thinking about

908
00:40:59,920 --> 00:41:02,950
cryptographic assumptions like as

909
00:41:01,299 --> 00:41:04,660
cryptographers these explicit

910
00:41:02,950 --> 00:41:06,009
assumptions like discrete log as hard a

911
00:41:04,660 --> 00:41:07,868
hash function behaves like a random

912
00:41:06,010 --> 00:41:09,369
Oracle you can argue about these maybe

913
00:41:07,869 --> 00:41:11,410
they're secure maybe they're not but you

914
00:41:09,369 --> 00:41:13,119
can actually sort of this is what we

915
00:41:11,410 --> 00:41:14,710
talked about like at conferences like

916
00:41:13,119 --> 00:41:16,779
this but there's a lot of implicit

917
00:41:14,710 --> 00:41:18,490
assumptions and cryptography also like

918
00:41:16,779 --> 00:41:20,559
the implementation is correct the random

919
00:41:18,490 --> 00:41:22,029
number generator is functioning the code

920
00:41:20,559 --> 00:41:24,549
implements all the required validation

921
00:41:22,029 --> 00:41:27,640
checks we've seen this be violated

922
00:41:24,549 --> 00:41:29,950
multiple times today and so like it

923
00:41:27,640 --> 00:41:31,750
seems useful to say to think more about

924
00:41:29,950 --> 00:41:36,038
these implicit assumptions when we're

925
00:41:31,750 --> 00:41:39,819
designing cryptographic schemes so I

926
00:41:36,039 --> 00:41:41,349
would sort of hypothesize that

927
00:41:39,819 --> 00:41:42,609
essentially fragility under human error

928
00:41:41,349 --> 00:41:44,799
should be a cryptographic design

929
00:41:42,609 --> 00:41:46,180
consideration we know that developers

930
00:41:44,799 --> 00:41:49,359
will make mistakes how do you minimize

931
00:41:46,180 --> 00:41:51,788
the damage one idea is to tie security

932
00:41:49,359 --> 00:41:53,619
to basic functionality like say a two

933
00:41:51,789 --> 00:41:54,910
five five one nine is trying to do that

934
00:41:53,619 --> 00:41:56,589
like it that your scheme is not

935
00:41:54,910 --> 00:42:02,589
correctly implemented if you don't do

936
00:41:56,589 --> 00:42:05,109
this and we'll see how this go like goes

937
00:42:02,589 --> 00:42:05,950
moving forward and sort of in general

938
00:42:05,109 --> 00:42:07,930
there's sort of a tension between

939
00:42:05,950 --> 00:42:09,339
diversity of having like a bunch of

940
00:42:07,930 --> 00:42:12,609
different primitives and implementations

941
00:42:09,339 --> 00:42:14,558
and baseline security so what we would

942
00:42:12,609 --> 00:42:16,058
like is to have like one library that's

943
00:42:14,559 --> 00:42:18,970
like really great it's been like

944
00:42:16,059 --> 00:42:20,710
formally verified it's been vetted but

945
00:42:18,970 --> 00:42:23,169
then if that library breaks them like

946
00:42:20,710 --> 00:42:24,759
everything breaks all at once so then

947
00:42:23,170 --> 00:42:25,960
you might think well okay maybe it's

948
00:42:24,759 --> 00:42:27,250
good to have diversity like not

949
00:42:25,960 --> 00:42:28,869
everything would break at once but then

950
00:42:27,250 --> 00:42:30,640
you get kind of this long tail of

951
00:42:28,869 --> 00:42:34,599
implementations which is what I've been

952
00:42:30,640 --> 00:42:38,740
exploiting in this talk so here is my

953
00:42:34,599 --> 00:42:40,390
last slide so we have other stuff in the

954
00:42:38,740 --> 00:42:42,250
paper like tables with numbers and more

955
00:42:40,390 --> 00:42:43,868
examples about implementations this

956
00:42:42,250 --> 00:42:48,640
paper was at financial crypto this year

957
00:42:43,869 --> 00:42:54,529
and it is on ePrint so thank you

958
00:42:48,640 --> 00:42:56,970
[Applause]

959
00:42:54,529 --> 00:42:58,440
okay thank you very much Nadia and there

960
00:42:56,970 --> 00:43:01,169
are already some questions I can imagine

961
00:42:58,440 --> 00:43:05,819
that there are other questions after

962
00:43:01,170 --> 00:43:08,700
this as well so anybody question or

963
00:43:05,819 --> 00:43:14,670
everybody wants to go to enjoy the

964
00:43:08,700 --> 00:43:18,839
reception okay so maybe I asked about

965
00:43:14,670 --> 00:43:20,519
this char to overflow or what was it can

966
00:43:18,839 --> 00:43:22,589
you imagine oh that it could be some

967
00:43:20,519 --> 00:43:28,288
other flow or boundary valuation that

968
00:43:22,589 --> 00:43:30,558
could be produced in the code or

969
00:43:28,289 --> 00:43:30,559
something

970
00:43:32,240 --> 00:43:35,069
possibly I mean I guess it feels sort of

971
00:43:34,829 --> 00:43:38,480
like

972
00:43:35,069 --> 00:43:41,308
but I mean it's unclear like why sort of

973
00:43:38,480 --> 00:43:45,059
these values would be sort of allocated

974
00:43:41,309 --> 00:43:52,680
next to the value that you're producing

975
00:43:45,059 --> 00:43:54,119
yeah yeah I mean I guess if you I guess

976
00:43:52,680 --> 00:43:55,740
if you like allocated this whole table

977
00:43:54,119 --> 00:43:57,450
and then like the next thing that's

978
00:43:55,740 --> 00:43:59,669
allocated is like the buffer your copy

979
00:43:57,450 --> 00:44:01,319
and then you and then it's the wrong

980
00:43:59,670 --> 00:44:08,190
length and so you accidentally like copy

981
00:44:01,319 --> 00:44:10,140
over into the last value yeah maybe so

982
00:44:08,190 --> 00:44:13,710
we have we have no idea what this

983
00:44:10,140 --> 00:44:16,019
library is so I mean you can rerun the

984
00:44:13,710 --> 00:44:19,319
calculation and find the same list of

985
00:44:16,019 --> 00:44:22,859
hosts and play with them maybe without

986
00:44:19,319 --> 00:44:28,730
violating the CFA and but yes we don't

987
00:44:22,859 --> 00:44:31,140
know what they are okay so I would say

988
00:44:28,730 --> 00:44:34,230
thank you very much for attending this

989
00:44:31,140 --> 00:44:38,129
workshop and enjoy the reception the

990
00:44:34,230 --> 00:44:39,059
second workshop day tomorrow and the

991
00:44:38,130 --> 00:44:40,030
rest of the conference

992
00:44:39,059 --> 00:44:41,290
so thank you very much

993
00:44:40,030 --> 00:44:46,219
[Music]

994
00:44:41,290 --> 00:44:46,219
[Applause]

