1
00:00:04,890 --> 00:00:08,820
so hello everyone thanks for the

2
00:00:07,529 --> 00:00:12,480
introductions and thanks for the

3
00:00:08,820 --> 00:00:14,429
invitation so yeah this was part of my

4
00:00:12,480 --> 00:00:16,110
master thesis this is a joint research

5
00:00:14,429 --> 00:00:20,009
with my adviser professor

6
00:00:16,110 --> 00:00:22,350
ldbl Daniel and we're talking about

7
00:00:20,009 --> 00:00:26,130
bluetooth and specifically the bluetooth

8
00:00:22,350 --> 00:00:28,230
pairing and a very end of in our body

9
00:00:26,130 --> 00:00:30,448
curve attack fixed coordinate invalid

10
00:00:28,230 --> 00:00:31,019
key of attack which is slightly

11
00:00:30,449 --> 00:00:34,500
different

12
00:00:31,019 --> 00:00:36,870
all right so I'm sure all of you are

13
00:00:34,500 --> 00:00:39,150
familiar with Bluetooth it's becoming

14
00:00:36,870 --> 00:00:41,250
one of the most popular protocol or

15
00:00:39,150 --> 00:00:43,680
specifically radio protocols in the

16
00:00:41,250 --> 00:00:45,750
world right now all of you probably have

17
00:00:43,680 --> 00:00:46,290
this one Bluetooth capable device in

18
00:00:45,750 --> 00:00:52,080
your pocket

19
00:00:46,290 --> 00:00:53,400
and more than one in your bag yes so

20
00:00:52,080 --> 00:00:56,010
today booth is becoming very very

21
00:00:53,400 --> 00:00:59,930
popular I owe t devices audio clip

22
00:00:56,010 --> 00:01:02,129
equipments and nowadays wearables and

23
00:00:59,930 --> 00:01:05,790
computer peripherals all move to

24
00:01:02,129 --> 00:01:08,369
bluetooth but what most of you probably

25
00:01:05,790 --> 00:01:10,710
don't know is that Bluetooth today is

26
00:01:08,369 --> 00:01:13,950
actually two protocols so there is

27
00:01:10,710 --> 00:01:15,960
Bluetooth be our idea and Bluetooth Low

28
00:01:13,950 --> 00:01:17,840
Energy be our idea is the formal version

29
00:01:15,960 --> 00:01:20,820
of Bluetooth the regional

30
00:01:17,840 --> 00:01:24,990
standardization and no energy is more

31
00:01:20,820 --> 00:01:29,130
recent but they coexist together used

32
00:01:24,990 --> 00:01:31,100
for slightly different scenarios also

33
00:01:29,130 --> 00:01:33,479
both protocols promise to provide

34
00:01:31,100 --> 00:01:35,309
confidentiality and many the middle

35
00:01:33,480 --> 00:01:37,580
protection in the link layer so the

36
00:01:35,310 --> 00:01:39,650
application in theory shouldn't

37
00:01:37,580 --> 00:01:42,690
shouldn't provide their own

38
00:01:39,650 --> 00:01:46,880
authentication and in this talk we'll

39
00:01:42,690 --> 00:01:52,080
talk about this promise and if it's

40
00:01:46,880 --> 00:01:54,270
provided as as it should be all right so

41
00:01:52,080 --> 00:01:57,240
the bluetooth pairing which is the

42
00:01:54,270 --> 00:01:59,880
connection establishment process is the

43
00:01:57,240 --> 00:02:02,789
process where two devices authenticate

44
00:01:59,880 --> 00:02:05,850
with each other and exchange their

45
00:02:02,790 --> 00:02:09,599
shared secret and assured TV among key

46
00:02:05,850 --> 00:02:12,329
and the main that the most recent

47
00:02:09,598 --> 00:02:14,609
pairing protocols for Bluetooth via

48
00:02:12,330 --> 00:02:17,310
India and the flow energy are securing

49
00:02:14,610 --> 00:02:18,310
preparing or SSP and le secure

50
00:02:17,310 --> 00:02:21,370
connection

51
00:02:18,310 --> 00:02:24,550
and for a Bluetooth low-energy and

52
00:02:21,370 --> 00:02:28,330
they're both very very very similar they

53
00:02:24,550 --> 00:02:30,459
share a lot of a lot of things and

54
00:02:28,330 --> 00:02:34,050
they're both variants of authenticated

55
00:02:30,459 --> 00:02:34,050
elliptic curve diffie-hellman protocol

56
00:02:34,260 --> 00:02:41,160
so the first attack that made me list

57
00:02:38,050 --> 00:02:43,989
are curious about attacking bluetooth

58
00:02:41,160 --> 00:02:47,099
there was many many many attacks before

59
00:02:43,989 --> 00:02:51,069
that but the one of the recent attacks

60
00:02:47,099 --> 00:02:52,679
was shown over the first release of

61
00:02:51,069 --> 00:02:56,560
Bluetooth Low Energy

62
00:02:52,680 --> 00:03:00,610
by Mike Ryan and he showed that the

63
00:02:56,560 --> 00:03:03,989
original pairing protocol used in the

64
00:03:00,610 --> 00:03:06,310
low energy was susceptible to

65
00:03:03,989 --> 00:03:08,560
eavesdropping attack without any

66
00:03:06,310 --> 00:03:10,660
interaction from the attacker the

67
00:03:08,560 --> 00:03:17,130
attacker could simply eavesdrop to the

68
00:03:10,660 --> 00:03:22,000
pairing iterate through two to the 20

69
00:03:17,130 --> 00:03:24,549
keys temporary keys and that that way

70
00:03:22,000 --> 00:03:26,739
breaking the session key and decrypting

71
00:03:24,549 --> 00:03:29,019
all of the remaining traffic without

72
00:03:26,739 --> 00:03:31,329
interaction at all so that's that's like

73
00:03:29,019 --> 00:03:35,109
really bad that's does not provide any

74
00:03:31,329 --> 00:03:37,239
security whatsoever because two to the

75
00:03:35,109 --> 00:03:40,239
20 operations today it's less than

76
00:03:37,239 --> 00:03:42,819
attacked a second in every computer and

77
00:03:40,239 --> 00:03:46,030
he also provided an open-source software

78
00:03:42,819 --> 00:03:50,429
which recovers the session key of

79
00:03:46,030 --> 00:03:55,150
Bluetooth sessions from capture traffic

80
00:03:50,430 --> 00:03:58,600
right but now are they addressed this

81
00:03:55,150 --> 00:04:02,380
problem and they move to the new early

82
00:03:58,600 --> 00:04:05,200
secure connections protocol which relies

83
00:04:02,380 --> 00:04:07,660
on elliptic curve cryptography so a very

84
00:04:05,200 --> 00:04:09,760
very short and extremely shallow

85
00:04:07,660 --> 00:04:11,829
introduction to a elliptic curve

86
00:04:09,760 --> 00:04:16,750
cryptography so what is an elliptic

87
00:04:11,829 --> 00:04:18,880
curve analytic earth is a group which is

88
00:04:16,750 --> 00:04:20,709
defined by an equation and a field and

89
00:04:18,880 --> 00:04:22,960
there are underlying field so the

90
00:04:20,709 --> 00:04:26,050
equation we are looking at short varsity

91
00:04:22,960 --> 00:04:29,030
violence transforms which are defined

92
00:04:26,050 --> 00:04:32,390
with two parameters and B so we

93
00:04:29,030 --> 00:04:35,599
have y squared equals x to the third

94
00:04:32,390 --> 00:04:37,789
plus ax plus B and all of the figures

95
00:04:35,600 --> 00:04:41,660
you you're about to see are drawn over

96
00:04:37,790 --> 00:04:43,790
the real field but we because in

97
00:04:41,660 --> 00:04:48,290
cryptography we always use final field

98
00:04:43,790 --> 00:04:49,940
so the equations are over FQ all right

99
00:04:48,290 --> 00:04:52,370
so we're talking about groups so we have

100
00:04:49,940 --> 00:04:54,950
a group elements so the elements in

101
00:04:52,370 --> 00:04:58,550
elliptic curves are points or pairs of

102
00:04:54,950 --> 00:05:03,250
coordinates x and y which satisfy the

103
00:04:58,550 --> 00:05:06,410
curve equation over the underlying field

104
00:05:03,250 --> 00:05:09,320
we include another point which is very

105
00:05:06,410 --> 00:05:11,570
important for this attack call the point

106
00:05:09,320 --> 00:05:13,550
at infinity which will be the identity

107
00:05:11,570 --> 00:05:17,870
element of the group this is a new point

108
00:05:13,550 --> 00:05:21,350
that we introduced to this set of points

109
00:05:17,870 --> 00:05:23,030
set of elements of the group and because

110
00:05:21,350 --> 00:05:24,800
it's a group you have an operation in

111
00:05:23,030 --> 00:05:27,260
this case the operation is addition

112
00:05:24,800 --> 00:05:30,710
so we'll denote it by the plus symbol

113
00:05:27,260 --> 00:05:38,830
and we'll use the inverse notation of

114
00:05:30,710 --> 00:05:41,210
minus 1 with bracket 4 for a point P and

115
00:05:38,830 --> 00:05:43,490
we would also need our scalar

116
00:05:41,210 --> 00:05:45,320
multiplications misapplication which is

117
00:05:43,490 --> 00:05:47,780
simply adding a point to itself several

118
00:05:45,320 --> 00:05:52,490
times right so this is the notations

119
00:05:47,780 --> 00:05:55,630
we're going to use so point addition

120
00:05:52,490 --> 00:05:59,240
will divide the point addition into

121
00:05:55,630 --> 00:06:01,460
sorry I have the notation for scalar

122
00:05:59,240 --> 00:06:02,960
multiplication twice anyway a point

123
00:06:01,460 --> 00:06:04,820
addition will divide it two point

124
00:06:02,960 --> 00:06:07,070
addition and point doubling doubling

125
00:06:04,820 --> 00:06:08,870
will be adding a point to itself and

126
00:06:07,070 --> 00:06:13,610
point addition is adding two different

127
00:06:08,870 --> 00:06:15,740
points so how the inverse is defined the

128
00:06:13,610 --> 00:06:17,600
inverse is defined very very simply all

129
00:06:15,740 --> 00:06:19,400
you have to do in order to inverse the

130
00:06:17,600 --> 00:06:22,010
point is to negate the y-coordinate

131
00:06:19,400 --> 00:06:24,429
reflect it across the x-axis and then

132
00:06:22,010 --> 00:06:29,020
get the inverse of that point right so

133
00:06:24,430 --> 00:06:31,790
this is how it works and point addition

134
00:06:29,020 --> 00:06:34,940
adding two different points is done by

135
00:06:31,790 --> 00:06:37,160
taking the line that grows both points P

136
00:06:34,940 --> 00:06:39,670
and Q finding the third intersection

137
00:06:37,160 --> 00:06:42,980
with the curve and

138
00:06:39,670 --> 00:06:44,960
reflecting that point across the exactly

139
00:06:42,980 --> 00:06:47,630
you getting the inverse of that point

140
00:06:44,960 --> 00:06:51,739
and this will be the result of P plus Q

141
00:06:47,630 --> 00:06:56,570
and you can see here the simple one way

142
00:06:51,740 --> 00:06:58,730
to compute this this formula and as you

143
00:06:56,570 --> 00:07:02,120
can see this formula do not involve the

144
00:06:58,730 --> 00:07:04,910
curve parameter B this means that you

145
00:07:02,120 --> 00:07:07,070
can compute all of this computation find

146
00:07:04,910 --> 00:07:09,230
the result point without even knowing

147
00:07:07,070 --> 00:07:12,680
what the parameter for the B parameter

148
00:07:09,230 --> 00:07:14,600
of the curve now we'll move on to point

149
00:07:12,680 --> 00:07:17,180
doubling so very similarly but instead

150
00:07:14,600 --> 00:07:18,740
of taking two points and finding the

151
00:07:17,180 --> 00:07:21,890
line across both point we simply take

152
00:07:18,740 --> 00:07:23,510
the tangent line at point B and then

153
00:07:21,890 --> 00:07:26,780
again find the second point of

154
00:07:23,510 --> 00:07:28,849
intersection we inverse that point and

155
00:07:26,780 --> 00:07:31,400
get the resultant point note that this

156
00:07:28,850 --> 00:07:36,560
formula also do not involve the B

157
00:07:31,400 --> 00:07:38,929
parameter of the curve finally I want

158
00:07:36,560 --> 00:07:42,380
you to know this last observation which

159
00:07:38,930 --> 00:07:46,160
is that there are some special points of

160
00:07:42,380 --> 00:07:47,810
some sort that of an order of two that

161
00:07:46,160 --> 00:07:50,120
means that if you add these points to

162
00:07:47,810 --> 00:07:53,090
themselves you will always get the

163
00:07:50,120 --> 00:07:55,070
identity element the simplest way to see

164
00:07:53,090 --> 00:07:58,369
that is that if you have the

165
00:07:55,070 --> 00:08:00,560
y-coordinate equals zero then when you

166
00:07:58,370 --> 00:08:02,750
negate the y-coordinate when you get the

167
00:08:00,560 --> 00:08:03,890
inverse of this point you will always

168
00:08:02,750 --> 00:08:06,170
get at the same point and therefore

169
00:08:03,890 --> 00:08:11,740
adding them to themselves will give you

170
00:08:06,170 --> 00:08:13,640
the identity element great so now I'll

171
00:08:11,740 --> 00:08:15,050
briefly about elliptic curve

172
00:08:13,640 --> 00:08:16,550
diffie-hellman I'm sure all of you are

173
00:08:15,050 --> 00:08:18,530
familiar with the different particles so

174
00:08:16,550 --> 00:08:20,450
I'll do this very very fast all you have

175
00:08:18,530 --> 00:08:24,109
to remember is that instead of doing

176
00:08:20,450 --> 00:08:25,760
things in multiplicative modular group

177
00:08:24,110 --> 00:08:27,590
we're doing these things on elliptic

178
00:08:25,760 --> 00:08:29,480
curve groups and therefore we have to

179
00:08:27,590 --> 00:08:32,089
agree on an elliptic curve which means

180
00:08:29,480 --> 00:08:35,210
the parameters a B and the underlying

181
00:08:32,090 --> 00:08:39,710
field FQ and we also have to agree on

182
00:08:35,210 --> 00:08:43,010
generate or Point P so both party select

183
00:08:39,710 --> 00:08:46,640
the secret key to be a scholar in this

184
00:08:43,010 --> 00:08:48,589
case they multiply this color with the

185
00:08:46,640 --> 00:08:51,819
generator of point P they get the public

186
00:08:48,589 --> 00:08:55,680
keys they exchange these public keys

187
00:08:51,820 --> 00:08:59,290
and then they multiplied the secret key

188
00:08:55,680 --> 00:09:03,849
by the correspondent public key to get a

189
00:08:59,290 --> 00:09:05,829
shirt defy my key and since this process

190
00:09:03,850 --> 00:09:08,230
is commutative and associative they will

191
00:09:05,830 --> 00:09:13,630
get the same they will get the same

192
00:09:08,230 --> 00:09:15,850
cheap shirt key great so now we can talk

193
00:09:13,630 --> 00:09:21,010
about the first major attack against

194
00:09:15,850 --> 00:09:23,050
protocols that use elliptic curve

195
00:09:21,010 --> 00:09:25,569
diffie-hellman which is the invalid

196
00:09:23,050 --> 00:09:29,170
curve attack so introduced by be a

197
00:09:25,570 --> 00:09:32,260
little this cryptographic attack uses

198
00:09:29,170 --> 00:09:34,959
points which do not satisfy the curve

199
00:09:32,260 --> 00:09:38,290
equation in order to extract in the in

200
00:09:34,960 --> 00:09:42,370
our case the secret key of the of a

201
00:09:38,290 --> 00:09:45,069
victim so how it works so what we're

202
00:09:42,370 --> 00:09:46,840
doing here is the attacker we are in

203
00:09:45,070 --> 00:09:48,700
scenario again of elliptic curve

204
00:09:46,840 --> 00:09:51,580
diffie-hellman so we have a victim and

205
00:09:48,700 --> 00:09:54,190
you have an attacker and attacker

206
00:09:51,580 --> 00:09:56,500
selects a different group a different

207
00:09:54,190 --> 00:09:58,990
elliptic curve which differs from the

208
00:09:56,500 --> 00:10:02,680
original elliptic curve that was agreed

209
00:09:58,990 --> 00:10:04,810
upon by the B parameter and what's

210
00:10:02,680 --> 00:10:08,739
special about this new curve is that it

211
00:10:04,810 --> 00:10:11,050
has subgroups of small size so he finds

212
00:10:08,740 --> 00:10:13,510
this kind of elliptic curve it's very

213
00:10:11,050 --> 00:10:16,780
very easy to find and when he finds one

214
00:10:13,510 --> 00:10:21,030
he simply select a generator point of a

215
00:10:16,780 --> 00:10:24,459
small subgroup I will call this point p1

216
00:10:21,030 --> 00:10:27,819
he then the victim transmit is public

217
00:10:24,460 --> 00:10:29,950
key the attacker transmits a q1 sorry Q

218
00:10:27,820 --> 00:10:34,440
1 will be the point R with a small

219
00:10:29,950 --> 00:10:38,500
subgroup it transmitted translates q1

220
00:10:34,440 --> 00:10:39,850
and then the victim will try to compute

221
00:10:38,500 --> 00:10:42,040
the share with your monkey by

222
00:10:39,850 --> 00:10:42,700
multiplying its secret key by the point

223
00:10:42,040 --> 00:10:44,890
Q 1

224
00:10:42,700 --> 00:10:47,500
note that this since this is a generator

225
00:10:44,890 --> 00:10:49,810
of a small subgroup there are a very

226
00:10:47,500 --> 00:10:55,140
small amount of possibilities for this

227
00:10:49,810 --> 00:10:59,199
should differ among key we will have the

228
00:10:55,140 --> 00:11:01,420
the assumption that in as happens in a

229
00:10:59,200 --> 00:11:03,670
lot of protocols now the victim will set

230
00:11:01,420 --> 00:11:04,599
transmit some message encrypted using

231
00:11:03,670 --> 00:11:08,709
the share Divya

232
00:11:04,600 --> 00:11:10,329
key to the attacker and again for

233
00:11:08,709 --> 00:11:12,819
simplicity let's assume that this

234
00:11:10,329 --> 00:11:15,519
message is known to the attacker so the

235
00:11:12,819 --> 00:11:18,729
attacker can now try to find the

236
00:11:15,519 --> 00:11:22,480
disparate log of the secret key under

237
00:11:18,730 --> 00:11:24,940
this small subgroup right so what the

238
00:11:22,480 --> 00:11:26,500
attacker is doing is simply iterating

239
00:11:24,940 --> 00:11:30,630
through all of the possibilities for

240
00:11:26,500 --> 00:11:33,910
this shared key under the small subgroup

241
00:11:30,630 --> 00:11:36,370
and thus finding after finding the

242
00:11:33,910 --> 00:11:39,939
correct value the correct shared key it

243
00:11:36,370 --> 00:11:42,850
actually reveals the information of what

244
00:11:39,940 --> 00:11:45,490
is the secret key modulo the size of the

245
00:11:42,850 --> 00:11:48,459
small subgroup in our case p1 right so

246
00:11:45,490 --> 00:11:52,540
by extracting this information the

247
00:11:48,459 --> 00:11:54,969
attacker can now continue this procedure

248
00:11:52,540 --> 00:11:57,579
using a different subgroup a different

249
00:11:54,970 --> 00:11:59,560
elliptic curve or even the same elliptic

250
00:11:57,579 --> 00:12:02,199
curve in a different subgroup and then

251
00:11:59,560 --> 00:12:04,920
extract another information about

252
00:12:02,199 --> 00:12:07,290
another module of the secret key and

253
00:12:04,920 --> 00:12:11,800
finally after extracting enough

254
00:12:07,290 --> 00:12:14,469
information enough co-prime modules the

255
00:12:11,800 --> 00:12:16,449
attacker can reveal the secret key by

256
00:12:14,470 --> 00:12:19,360
applying the Chinese remainder theorem

257
00:12:16,449 --> 00:12:21,599
right so that's that's the idea behind

258
00:12:19,360 --> 00:12:24,639
the original invalid key of attack

259
00:12:21,600 --> 00:12:27,970
note that the original Divya invalid

260
00:12:24,639 --> 00:12:30,819
curve attack uses two basic assumptions

261
00:12:27,970 --> 00:12:33,730
one of them is that we should initiate

262
00:12:30,819 --> 00:12:36,579
the key exchange multiple times with the

263
00:12:33,730 --> 00:12:40,000
same private key and the second one is

264
00:12:36,579 --> 00:12:44,258
that we could send any pair of points X

265
00:12:40,000 --> 00:12:46,449
and coordinates x and y which will not

266
00:12:44,259 --> 00:12:49,000
satisfy the curve equation right so

267
00:12:46,449 --> 00:12:53,290
these are two assumptions that I used

268
00:12:49,000 --> 00:12:54,850
during the original attack and this

269
00:12:53,290 --> 00:12:56,740
attack is known for a very long time and

270
00:12:54,850 --> 00:13:00,850
therefore the Bluetooth specification

271
00:12:56,740 --> 00:13:02,769
suggested as a mitigation to the stack

272
00:13:00,850 --> 00:13:05,560
to simply refresh the diffie-hellman

273
00:13:02,769 --> 00:13:07,480
Keeper every pairing attempt and thus

274
00:13:05,560 --> 00:13:11,109
preventing this attack because the first

275
00:13:07,480 --> 00:13:14,410
assumption will no longer be valid

276
00:13:11,110 --> 00:13:16,670
because if you refresh the keeper every

277
00:13:14,410 --> 00:13:19,699
attempt the secret key will not will

278
00:13:16,670 --> 00:13:22,430
be different on the on the next attempt

279
00:13:19,700 --> 00:13:24,800
and as we saw later of the

280
00:13:22,430 --> 00:13:27,790
implementation we've tested follow this

281
00:13:24,800 --> 00:13:32,390
addition this suggestion sorry

282
00:13:27,790 --> 00:13:34,520
alright so the bluetooth pairing and now

283
00:13:32,390 --> 00:13:38,000
what now we'll go a bit deeper into the

284
00:13:34,520 --> 00:13:42,680
pairing procedure so it responsible for

285
00:13:38,000 --> 00:13:47,600
generating the sure encryption keys as

286
00:13:42,680 --> 00:13:50,449
we previously said and due to the a lot

287
00:13:47,600 --> 00:13:53,720
of the similarities between SSP and

288
00:13:50,450 --> 00:13:54,830
Elias C we will only talk about Elias II

289
00:13:53,720 --> 00:13:58,130
but everything I'm going to say

290
00:13:54,830 --> 00:14:01,370
regarding Elias II will also apply to

291
00:13:58,130 --> 00:14:06,740
SSP and vice-versa so don't worry about

292
00:14:01,370 --> 00:14:10,130
that so how how the blue to support

293
00:14:06,740 --> 00:14:12,740
other training protocol is comprised so

294
00:14:10,130 --> 00:14:14,990
it's comprised of four phases the first

295
00:14:12,740 --> 00:14:17,450
phase as feature exchange it has no

296
00:14:14,990 --> 00:14:21,050
cryptographic properties so we're gonna

297
00:14:17,450 --> 00:14:23,330
leave it in the side for now phase two

298
00:14:21,050 --> 00:14:25,609
is the key exchange phase 3 is the

299
00:14:23,330 --> 00:14:27,380
authentication and which is very

300
00:14:25,610 --> 00:14:30,110
important to us we'll take it into it

301
00:14:27,380 --> 00:14:34,760
very soon and phase 4 is the Aikido

302
00:14:30,110 --> 00:14:37,490
evasion phase all right so the key

303
00:14:34,760 --> 00:14:39,319
exchange is simply an elliptic curve

304
00:14:37,490 --> 00:14:43,760
diffie-hellman key exchange as we saw

305
00:14:39,320 --> 00:14:47,180
just to cite few slides ago and it uses

306
00:14:43,760 --> 00:14:49,490
the standardized P 256 elliptic curve

307
00:14:47,180 --> 00:14:56,540
NIST elliptic curve which is I think the

308
00:14:49,490 --> 00:14:58,430
most widely used curve today that's in a

309
00:14:56,540 --> 00:15:01,069
least acute connection in the Bluetooth

310
00:14:58,430 --> 00:15:05,209
VR idea it uses a different curve but

311
00:15:01,070 --> 00:15:08,150
also on East standarized these two

312
00:15:05,210 --> 00:15:09,980
functions F 4 and G 2 you don't really

313
00:15:08,150 --> 00:15:12,530
have to remember them I just put in him

314
00:15:09,980 --> 00:15:14,270
here for completeness of the sector you

315
00:15:12,530 --> 00:15:16,100
are - these are two cryptographic

316
00:15:14,270 --> 00:15:20,090
functions that will be used during the

317
00:15:16,100 --> 00:15:22,120
authentication phase all right so now we

318
00:15:20,090 --> 00:15:25,949
can dig into the authentication phase I

319
00:15:22,120 --> 00:15:29,859
hope you can see this diagram

320
00:15:25,949 --> 00:15:33,599
I'll go I'll go every step so and then

321
00:15:29,859 --> 00:15:37,720
explain it so if not that's not horrible

322
00:15:33,600 --> 00:15:39,910
so the authentication phase begin when

323
00:15:37,720 --> 00:15:42,669
both parties device a and device B so

324
00:15:39,910 --> 00:15:47,079
that's a random nonce na and NB both of

325
00:15:42,669 --> 00:15:49,689
them are 128 bits long then they both

326
00:15:47,079 --> 00:15:51,599
set some value that called our a and our

327
00:15:49,689 --> 00:15:54,730
B in this case they said either 0

328
00:15:51,600 --> 00:15:57,999
doesn't really matter for us right now

329
00:15:54,730 --> 00:16:01,540
then device B commits to both public

330
00:15:57,999 --> 00:16:05,249
keys and it's knowns using function f4

331
00:16:01,540 --> 00:16:08,469
and transmits the commitment volume CB

332
00:16:05,249 --> 00:16:10,419
then device a transmitted nonce and

333
00:16:08,470 --> 00:16:12,899
device B reveal his nonce

334
00:16:10,419 --> 00:16:17,169
following by a check of the commitment

335
00:16:12,899 --> 00:16:20,290
this process is merely to make sure that

336
00:16:17,169 --> 00:16:21,309
no device have advantage regarding the

337
00:16:20,290 --> 00:16:23,829
selection of the nonce

338
00:16:21,309 --> 00:16:25,899
because otherwise attacker that tries to

339
00:16:23,829 --> 00:16:30,488
device a man-in-the-middle attack might

340
00:16:25,899 --> 00:16:32,079
use the ability to know the nonce that

341
00:16:30,489 --> 00:16:34,230
the nonce is selected in one device

342
00:16:32,079 --> 00:16:37,358
before it was selected in the other and

343
00:16:34,230 --> 00:16:39,269
my might devise some attack according to

344
00:16:37,359 --> 00:16:44,910
that so that's supposed to prevent it

345
00:16:39,269 --> 00:16:47,499
because again both both the device B

346
00:16:44,910 --> 00:16:50,949
commits to the nonce and then device a

347
00:16:47,499 --> 00:16:53,439
reveals it it's not and then device be

348
00:16:50,949 --> 00:16:55,089
revealed it's not right but the most

349
00:16:53,439 --> 00:16:58,059
important part of the authentication

350
00:16:55,089 --> 00:16:59,980
phase is what comes next which is the

351
00:16:58,059 --> 00:17:03,759
application of function G to on both

352
00:16:59,980 --> 00:17:06,069
public keys and both nonces this process

353
00:17:03,759 --> 00:17:08,230
should prevent any min man in the middle

354
00:17:06,069 --> 00:17:11,980
attack to happen in the bluetooth

355
00:17:08,230 --> 00:17:14,230
pairing since I'm sure most of you at

356
00:17:11,980 --> 00:17:16,480
least have encountered the fact that

357
00:17:14,230 --> 00:17:18,579
when you pair two Bluetooth devices you

358
00:17:16,480 --> 00:17:20,589
are presented with two numbers and you

359
00:17:18,579 --> 00:17:23,109
have to confirm on both devices that

360
00:17:20,589 --> 00:17:26,230
these numbers are in fact equal or in

361
00:17:23,109 --> 00:17:27,849
some cases you have you are displayed

362
00:17:26,230 --> 00:17:29,559
one number and you have to add to this

363
00:17:27,849 --> 00:17:32,260
number into the other device that also

364
00:17:29,559 --> 00:17:33,389
happens that's another different way to

365
00:17:32,260 --> 00:17:36,669
do it

366
00:17:33,389 --> 00:17:38,159
but the this process is actually the

367
00:17:36,669 --> 00:17:40,290
authentication of Bluetooth

368
00:17:38,160 --> 00:17:43,170
and what this number should mean is the

369
00:17:40,290 --> 00:17:48,629
sort of hash function on both public

370
00:17:43,170 --> 00:17:51,900
keys and both nonsense and by confirming

371
00:17:48,630 --> 00:17:53,640
that both numbers are equal you supposed

372
00:17:51,900 --> 00:17:58,500
to prevent any man in the middle who

373
00:17:53,640 --> 00:18:01,800
wish to change these public keys and

374
00:17:58,500 --> 00:18:04,530
devise simple naive man the minute

375
00:18:01,800 --> 00:18:08,520
attack because if you try to change

376
00:18:04,530 --> 00:18:11,340
these public keys then you cannot make

377
00:18:08,520 --> 00:18:13,470
sure that the nonce s will be equal in

378
00:18:11,340 --> 00:18:15,449
both devices and the user will

379
00:18:13,470 --> 00:18:18,690
immediately notice it and say ace of

380
00:18:15,450 --> 00:18:20,910
someone and tacking me right so that's

381
00:18:18,690 --> 00:18:23,340
the that's the basic idea of the

382
00:18:20,910 --> 00:18:27,900
Bluetooth authentication now to the

383
00:18:23,340 --> 00:18:31,080
confusing part so despite the fact that

384
00:18:27,900 --> 00:18:34,710
these diagrams show that the function G

385
00:18:31,080 --> 00:18:37,740
2 and F 4 is applied to both public keys

386
00:18:34,710 --> 00:18:39,720
BK n PK B it is actually applied only to

387
00:18:37,740 --> 00:18:43,260
the x coordinate of post public keys

388
00:18:39,720 --> 00:18:47,460
right so this is later in the

389
00:18:43,260 --> 00:18:49,170
specification is defined as PK x + PK b

390
00:18:47,460 --> 00:18:52,170
x but not in the diagrams all the

391
00:18:49,170 --> 00:18:55,050
diagrams show only PK a and p kb right

392
00:18:52,170 --> 00:19:01,380
so very confusing but that's the case in

393
00:18:55,050 --> 00:19:02,610
Bluetooth alright so so now after we

394
00:19:01,380 --> 00:19:05,310
know that after we know how the

395
00:19:02,610 --> 00:19:09,990
authentication works we can think of

396
00:19:05,310 --> 00:19:13,320
some attack so the attack is sort of

397
00:19:09,990 --> 00:19:15,180
based on the fact that the y coordinate

398
00:19:13,320 --> 00:19:17,639
is simply unattended ated doing all this

399
00:19:15,180 --> 00:19:19,740
authentication procedure is it is not

400
00:19:17,640 --> 00:19:24,540
info it's not involved in any of the

401
00:19:19,740 --> 00:19:28,920
computations and with that we can also

402
00:19:24,540 --> 00:19:31,830
remember that the Bluetooth standard do

403
00:19:28,920 --> 00:19:33,720
not require implementation to validate

404
00:19:31,830 --> 00:19:35,970
whether a given point satisfy the curve

405
00:19:33,720 --> 00:19:40,940
equation again the mitigation that was

406
00:19:35,970 --> 00:19:40,940
used is not that it's a different one so

407
00:19:41,450 --> 00:19:49,040
what we can do in order to attack this

408
00:19:44,460 --> 00:19:51,310
particle by changing the y coordinate to

409
00:19:49,040 --> 00:19:53,950
any value that we want

410
00:19:51,310 --> 00:19:55,870
without affecting the authentication so

411
00:19:53,950 --> 00:19:57,850
we'll describe two versions of our

412
00:19:55,870 --> 00:19:59,790
attack the first one is the semi passive

413
00:19:57,850 --> 00:20:02,800
and the second one is the fully active

414
00:19:59,790 --> 00:20:05,800
so the semi passive is extremely simple

415
00:20:02,800 --> 00:20:08,620
all you have to do is you're an attacker

416
00:20:05,800 --> 00:20:11,230
you are wearing a man-in-the-middle

417
00:20:08,620 --> 00:20:13,419
scenario so both devices devices and

418
00:20:11,230 --> 00:20:17,620
device be want to pair with each other

419
00:20:13,420 --> 00:20:19,870
so they both computer public keys device

420
00:20:17,620 --> 00:20:22,570
a transmitted public key to device be

421
00:20:19,870 --> 00:20:24,989
all the attacker do is modify the

422
00:20:22,570 --> 00:20:28,810
y-coordinate to 0 before transmitting it

423
00:20:24,990 --> 00:20:32,050
forward to device B we'll call new

424
00:20:28,810 --> 00:20:34,360
publicly PKA Prime similarly divided

425
00:20:32,050 --> 00:20:36,610
speech and transmits its public key and

426
00:20:34,360 --> 00:20:41,379
the attacker set the y-coordinate is 0

427
00:20:36,610 --> 00:20:44,199
and transmits PK b prime what happens

428
00:20:41,380 --> 00:20:46,960
now so now if you think about it they

429
00:20:44,200 --> 00:20:50,200
might not get the same Divya monkey

430
00:20:46,960 --> 00:20:54,340
anymore no we have no such promise

431
00:20:50,200 --> 00:20:56,050
because we're working in totally

432
00:20:54,340 --> 00:20:59,230
different elliptic curves total

433
00:20:56,050 --> 00:21:01,090
different subgroups this is not

434
00:20:59,230 --> 00:21:02,980
necessarily will provide the same value

435
00:21:01,090 --> 00:21:06,429
and we'll call this value D H key a and

436
00:21:02,980 --> 00:21:10,150
h vb but to be more exact we can say

437
00:21:06,430 --> 00:21:13,390
that with rate of 25% with the rate of

438
00:21:10,150 --> 00:21:16,360
model we will always get a both point to

439
00:21:13,390 --> 00:21:19,720
equal both DVR monkeys to equal that

440
00:21:16,360 --> 00:21:24,370
point at infinity why is that we just

441
00:21:19,720 --> 00:21:27,490
set to public keys to be generator of

442
00:21:24,370 --> 00:21:31,060
points generator points of subgroup of

443
00:21:27,490 --> 00:21:34,960
order 2 so we multiply that by some

444
00:21:31,060 --> 00:21:37,450
random value and with a chance of half

445
00:21:34,960 --> 00:21:40,590
each of the random values will be even

446
00:21:37,450 --> 00:21:44,080
if this value is even we're adding

447
00:21:40,590 --> 00:21:46,990
generator point of order to even number

448
00:21:44,080 --> 00:21:50,649
of times and then therefore getting the

449
00:21:46,990 --> 00:21:53,830
identity element so with rate with a

450
00:21:50,650 --> 00:21:55,990
probability of quarter both are secret

451
00:21:53,830 --> 00:21:58,120
keys are even and therefore both of both

452
00:21:55,990 --> 00:22:03,130
of the shared key will be the point at

453
00:21:58,120 --> 00:22:05,800
infinity right so what happens if

454
00:22:03,130 --> 00:22:10,000
this event occurs so if this event

455
00:22:05,800 --> 00:22:12,520
occurs the attacker knows what Shirdi

456
00:22:10,000 --> 00:22:13,300
fire monkey was because everything

457
00:22:12,520 --> 00:22:18,250
worked fine

458
00:22:13,300 --> 00:22:20,470
the third key is is synchronized between

459
00:22:18,250 --> 00:22:22,660
the two devices the authentication

460
00:22:20,470 --> 00:22:25,900
succeeded everything works perfectly and

461
00:22:22,660 --> 00:22:28,180
therefore the attacker knows that shared

462
00:22:25,900 --> 00:22:30,490
key was the point at infinity it can

463
00:22:28,180 --> 00:22:33,280
derive he can derive the long term key

464
00:22:30,490 --> 00:22:36,250
and the Makah key and decrypt and

465
00:22:33,280 --> 00:22:39,010
encrypt messages however he likes

466
00:22:36,250 --> 00:22:42,040
without further intervention with the

467
00:22:39,010 --> 00:22:46,750
protocol without anything else so that's

468
00:22:42,040 --> 00:22:49,510
very simple very straightforward now we

469
00:22:46,750 --> 00:22:50,830
need to look at another two functions

470
00:22:49,510 --> 00:22:56,800
again you don't really have to remember

471
00:22:50,830 --> 00:22:58,389
them this is function f5 and f6 we need

472
00:22:56,800 --> 00:23:02,490
them in order to consider their key

473
00:22:58,390 --> 00:23:04,870
derivation how could we improve this

474
00:23:02,490 --> 00:23:07,450
probability this success probability of

475
00:23:04,870 --> 00:23:11,500
quarter we want to do something better

476
00:23:07,450 --> 00:23:14,320
so how could we how could you get a

477
00:23:11,500 --> 00:23:18,100
better success probability so in order

478
00:23:14,320 --> 00:23:21,189
to do that we first have to introduce

479
00:23:18,100 --> 00:23:23,050
yourself to the key derivation phase so

480
00:23:21,190 --> 00:23:26,650
they get the key derivation phase begin

481
00:23:23,050 --> 00:23:28,930
where the word function f5 is applied on

482
00:23:26,650 --> 00:23:33,540
the shirt if you Marquis both nonsense

483
00:23:28,930 --> 00:23:36,040
as and both Mac values and Mike address

484
00:23:33,540 --> 00:23:39,129
we then derive the long term key and the

485
00:23:36,040 --> 00:23:42,340
Mac key using functioning f5 and then

486
00:23:39,130 --> 00:23:46,120
two confirmation values are exchanged EA

487
00:23:42,340 --> 00:23:48,429
and EB these values are exchanged in

488
00:23:46,120 --> 00:23:51,459
order to make sure that both devices

489
00:23:48,430 --> 00:23:54,040
actually got the same Divya monkey which

490
00:23:51,460 --> 00:23:55,630
which is something important if you want

491
00:23:54,040 --> 00:24:02,500
to continue encrypting and decrypting

492
00:23:55,630 --> 00:24:04,900
messages so as you remember from the

493
00:24:02,500 --> 00:24:06,880
semi passive attack we can't be succeed

494
00:24:04,900 --> 00:24:10,750
at the attacker at least succeed only if

495
00:24:06,880 --> 00:24:14,030
the two should differ keys are the point

496
00:24:10,750 --> 00:24:17,390
at infinity but in

497
00:24:14,030 --> 00:24:23,240
fully active attack we want to increase

498
00:24:17,390 --> 00:24:26,120
this probability by also by also using

499
00:24:23,240 --> 00:24:29,799
different scenarios so the scenario

500
00:24:26,120 --> 00:24:33,469
we'll be using as the scenario

501
00:24:29,799 --> 00:24:36,980
specifically when the diffie-hellman key

502
00:24:33,470 --> 00:24:39,140
one DHEA equals a PK B Prime

503
00:24:36,980 --> 00:24:40,790
the attacker already knows that the

504
00:24:39,140 --> 00:24:44,240
attack is the attack is going to fail

505
00:24:40,790 --> 00:24:46,370
and in the semi passive version because

506
00:24:44,240 --> 00:24:50,090
in the sinai passive version if divya

507
00:24:46,370 --> 00:24:53,178
DHT a equals p kb prime there is no

508
00:24:50,090 --> 00:24:55,040
chance that th key B will equal this

509
00:24:53,179 --> 00:24:57,799
value and therefore the same passive

510
00:24:55,040 --> 00:25:00,110
attack will fail for for sure and the

511
00:24:57,799 --> 00:25:02,179
attacker can do nothing about it and the

512
00:25:00,110 --> 00:25:04,159
semi passive scenario so how could we

513
00:25:02,179 --> 00:25:06,470
use this information in order to improve

514
00:25:04,160 --> 00:25:09,559
our success our success rate so what

515
00:25:06,470 --> 00:25:12,110
we're going to do is simply test during

516
00:25:09,559 --> 00:25:14,480
the key derivation phase whether this

517
00:25:12,110 --> 00:25:17,570
event occurred so the attacker could

518
00:25:14,480 --> 00:25:21,320
check the value of EA the confirmation

519
00:25:17,570 --> 00:25:23,928
value sent by device a tested to be

520
00:25:21,320 --> 00:25:26,450
either PK b prime or the point at

521
00:25:23,929 --> 00:25:28,790
infinity the identity element if it

522
00:25:26,450 --> 00:25:30,679
equals the point at infinity it could

523
00:25:28,790 --> 00:25:34,629
continue as with the same passive attack

524
00:25:30,679 --> 00:25:38,059
and it will have a chance of 50%

525
00:25:34,630 --> 00:25:40,070
otherwise it knows the site passive

526
00:25:38,059 --> 00:25:41,510
attack already will always fail and

527
00:25:40,070 --> 00:25:45,049
therefore it should do something

528
00:25:41,510 --> 00:25:47,990
different so what exactly to do so it

529
00:25:45,049 --> 00:25:51,860
should add arbitrarily select some value

530
00:25:47,990 --> 00:25:56,620
d HT b prime to be one of the two

531
00:25:51,860 --> 00:25:59,570
possibilities for d h gb it should then

532
00:25:56,620 --> 00:26:04,760
compute the correct confirmation value

533
00:25:59,570 --> 00:26:07,580
ei to be ei prime by simply inserting

534
00:26:04,760 --> 00:26:11,360
the gas target the gas of the DHT B

535
00:26:07,580 --> 00:26:17,750
prime to the function f5 and compute all

536
00:26:11,360 --> 00:26:20,110
the confirmation computation as usual f6

537
00:26:17,750 --> 00:26:20,110
sorry

538
00:26:21,920 --> 00:26:27,050
what device he will then do he will try

539
00:26:24,560 --> 00:26:31,580
to verify that again

540
00:26:27,050 --> 00:26:35,930
with probability of 50% of half he will

541
00:26:31,580 --> 00:26:41,149
this verification will pass otherwise he

542
00:26:35,930 --> 00:26:43,310
will abort pairing a process and if the

543
00:26:41,150 --> 00:26:47,060
verification succeeded the attacker

544
00:26:43,310 --> 00:26:51,139
knows what what is the different key

545
00:26:47,060 --> 00:26:54,139
chosen by device B because it's he got

546
00:26:51,140 --> 00:26:58,340
the correct yes so he know that th key B

547
00:26:54,140 --> 00:27:00,410
prime just equals th GB and then device

548
00:26:58,340 --> 00:27:04,610
B will compute and send his confirmation

549
00:27:00,410 --> 00:27:06,830
about ue b and the attacker will compute

550
00:27:04,610 --> 00:27:09,620
and transmit the correct country measure

551
00:27:06,830 --> 00:27:15,409
value eb prime which he already know

552
00:27:09,620 --> 00:27:17,899
because he knows that th key DHG a right

553
00:27:15,410 --> 00:27:22,310
note that in this scenario are now the

554
00:27:17,900 --> 00:27:23,990
attacker the the there are two different

555
00:27:22,310 --> 00:27:26,840
session keys and therefore the attacker

556
00:27:23,990 --> 00:27:28,940
needs to decrypt and we encrypt every

557
00:27:26,840 --> 00:27:30,949
message every packet have we got a

558
00:27:28,940 --> 00:27:34,040
packet that is being transmitted between

559
00:27:30,950 --> 00:27:36,590
device B and device a which make it a

560
00:27:34,040 --> 00:27:39,200
lot harder to implement and the original

561
00:27:36,590 --> 00:27:42,980
sorry passive era but with the added

562
00:27:39,200 --> 00:27:47,030
benefit of a better success rate so this

563
00:27:42,980 --> 00:27:49,340
is like very very simplifying slide to

564
00:27:47,030 --> 00:27:54,590
show you that success rate of the semi

565
00:27:49,340 --> 00:27:57,590
passive attack is only with the

566
00:27:54,590 --> 00:28:01,010
possibilities and fully active attack we

567
00:27:57,590 --> 00:28:03,439
have quarter of half depending on your

568
00:28:01,010 --> 00:28:05,540
guess but again it doesn't really matter

569
00:28:03,440 --> 00:28:10,790
what what your guess is movie let's

570
00:28:05,540 --> 00:28:13,970
arbitrarily alright so after we talked

571
00:28:10,790 --> 00:28:17,420
about all the details of the attack we

572
00:28:13,970 --> 00:28:20,600
can move on and talk about higher level

573
00:28:17,420 --> 00:28:27,200
details and implementation and real-life

574
00:28:20,600 --> 00:28:29,750
consideration right so not unlike Wi-Fi

575
00:28:27,200 --> 00:28:32,330
and other radio frequency based

576
00:28:29,750 --> 00:28:34,280
protocols bluetooth has a freak with

577
00:28:32,330 --> 00:28:37,428
frequency hopping

578
00:28:34,280 --> 00:28:40,580
there are the radio based protocol that

579
00:28:37,429 --> 00:28:44,600
use frequency hopping but some some

580
00:28:40,580 --> 00:28:46,010
don't and when we are trying to

581
00:28:44,600 --> 00:28:48,770
implement this kind of attacks we also

582
00:28:46,010 --> 00:28:51,110
have to consider this even though most

583
00:28:48,770 --> 00:28:53,889
of the time this frequency hopping do

584
00:28:51,110 --> 00:28:56,030
not provide any cryptographic security

585
00:28:53,890 --> 00:28:58,730
specifically in Bluetooth I can tell you

586
00:28:56,030 --> 00:29:01,789
that the frequency hopping in Bluetooth

587
00:28:58,730 --> 00:29:07,220
Low Energy is extremely simple and could

588
00:29:01,789 --> 00:29:11,559
be broken in seconds if not less as

589
00:29:07,220 --> 00:29:14,120
shown again by Mike Ryan and in 2013 and

590
00:29:11,559 --> 00:29:16,399
to be honest it doesn't really matter

591
00:29:14,120 --> 00:29:19,178
because Bluetooth protocol is so simple

592
00:29:16,400 --> 00:29:21,830
that you can buy slightly more expensive

593
00:29:19,179 --> 00:29:24,200
equipment that will simply transmit and

594
00:29:21,830 --> 00:29:29,480
listen to all of the local channels

595
00:29:24,200 --> 00:29:35,780
simultaneously and then thus eliminate

596
00:29:29,480 --> 00:29:38,450
this problem once for we should also

597
00:29:35,780 --> 00:29:40,908
consider the over the air pocket

598
00:29:38,450 --> 00:29:45,710
manipulation because as you saw during

599
00:29:40,909 --> 00:29:49,730
the attack we we had to capture packet

600
00:29:45,710 --> 00:29:54,700
and then change it before we

601
00:29:49,730 --> 00:29:57,320
transmitting it to the other party so

602
00:29:54,700 --> 00:30:00,350
there are some projects that try to do

603
00:29:57,320 --> 00:30:03,320
it today as far as I know but last time

604
00:30:00,350 --> 00:30:07,549
I checked was about a year ago or even

605
00:30:03,320 --> 00:30:09,970
more there are no commercially available

606
00:30:07,549 --> 00:30:13,760
equipment that could do it reliably for

607
00:30:09,970 --> 00:30:19,610
Bluetooth 4.2 with at least secure

608
00:30:13,760 --> 00:30:27,110
connections or Bluetooth VR EDR but I'm

609
00:30:19,610 --> 00:30:29,059
sure that I don't think it's such a big

610
00:30:27,110 --> 00:30:31,908
problem that that couldn't be resolved

611
00:30:29,059 --> 00:30:34,879
in the following years again it really

612
00:30:31,909 --> 00:30:38,360
depends on the incentive for companies

613
00:30:34,880 --> 00:30:41,899
or individuals to design this equipment

614
00:30:38,360 --> 00:30:44,240
if somebody wants I will be happy to

615
00:30:41,899 --> 00:30:45,540
talk about how exactly this thing could

616
00:30:44,240 --> 00:30:49,230
be implemented

617
00:30:45,540 --> 00:30:50,720
and exactly what is the process that

618
00:30:49,230 --> 00:30:53,300
needs to be taken in order to

619
00:30:50,720 --> 00:30:56,670
device-to-device these kind of attacks

620
00:30:53,300 --> 00:30:58,950
but it's possible that there has been a

621
00:30:56,670 --> 00:31:04,590
lot of work in different protocols that

622
00:30:58,950 --> 00:31:06,600
do similar things all right so now we

623
00:31:04,590 --> 00:31:08,040
can move on to talk about the design

624
00:31:06,600 --> 00:31:11,100
flaws in the protocol that made its

625
00:31:08,040 --> 00:31:14,540
attack possible so I think one of the

626
00:31:11,100 --> 00:31:18,179
major design flaws again I have been

627
00:31:14,540 --> 00:31:20,070
approached several times after after I

628
00:31:18,180 --> 00:31:22,650
gave this talk by several

629
00:31:20,070 --> 00:31:28,470
standardization people who told me that

630
00:31:22,650 --> 00:31:31,380
as I already knew there was a lot of

631
00:31:28,470 --> 00:31:34,500
problems when standardizing elliptic

632
00:31:31,380 --> 00:31:38,730
curve cryptography over the years and

633
00:31:34,500 --> 00:31:44,130
especially when we go back to 2007 when

634
00:31:38,730 --> 00:31:48,630
security preparing was first design so I

635
00:31:44,130 --> 00:31:52,440
know some of these critics might be due

636
00:31:48,630 --> 00:31:56,690
to these patenting things but I think it

637
00:31:52,440 --> 00:31:59,970
should still be in this slide for future

638
00:31:56,690 --> 00:32:03,750
implementations and design of protocols

639
00:31:59,970 --> 00:32:09,120
so using both coordinates during the key

640
00:32:03,750 --> 00:32:11,490
exchange is very unadvisable a very it

641
00:32:09,120 --> 00:32:14,939
pad increases the attack surface and

642
00:32:11,490 --> 00:32:17,340
it's really unnecessary today you have

643
00:32:14,940 --> 00:32:18,990
multiple way to compress points such

644
00:32:17,340 --> 00:32:21,830
that you wouldn't have to send both

645
00:32:18,990 --> 00:32:25,050
coordinates there are different

646
00:32:21,830 --> 00:32:28,560
ellipticals that you can work with do

647
00:32:25,050 --> 00:32:30,389
not need the second y-coordinate and you

648
00:32:28,560 --> 00:32:32,429
can also simply send the x-coordinate

649
00:32:30,390 --> 00:32:35,910
and assign and then compute the

650
00:32:32,430 --> 00:32:38,070
y-coordinate from that and secondly and

651
00:32:35,910 --> 00:32:40,500
maybe the most the more important one is

652
00:32:38,070 --> 00:32:42,780
the fact that the protocol authenticates

653
00:32:40,500 --> 00:32:48,240
only the x-coordinate we couldn't find

654
00:32:42,780 --> 00:32:50,460
any strong reasoning to for doing this I

655
00:32:48,240 --> 00:32:51,090
mean if you already send both

656
00:32:50,460 --> 00:32:52,980
coordinates

657
00:32:51,090 --> 00:32:55,939
you should authenticate both coordinates

658
00:32:52,980 --> 00:32:55,940
I don't see why not

659
00:32:57,340 --> 00:33:03,850
I should also point out that the

660
00:33:01,749 --> 00:33:05,580
original mitigation that was suggested

661
00:33:03,850 --> 00:33:08,980
during the standard of refreshing the

662
00:33:05,580 --> 00:33:12,730
the secret key every Bank attempt do not

663
00:33:08,980 --> 00:33:14,710
apply to this attack at all we don't

664
00:33:12,730 --> 00:33:17,019
rely on previous pairing attempt in

665
00:33:14,710 --> 00:33:18,129
order to extract information on the

666
00:33:17,019 --> 00:33:23,200
current pairing attempt

667
00:33:18,129 --> 00:33:25,449
so this mitigation is irrelevant sorry

668
00:33:23,200 --> 00:33:26,950
so and the obvious and recommended

669
00:33:25,450 --> 00:33:30,940
mitigation against this attack is

670
00:33:26,950 --> 00:33:33,009
obviously to start to validate whether

671
00:33:30,940 --> 00:33:35,529
the given public key satisfied the curve

672
00:33:33,009 --> 00:33:38,190
equation if you would do this validation

673
00:33:35,529 --> 00:33:41,549
this attack would be prevented

674
00:33:38,190 --> 00:33:43,749
all right now as with all the other

675
00:33:41,549 --> 00:33:47,200
presentations we will move on to the

676
00:33:43,749 --> 00:33:51,220
disclosure part and the test of

677
00:33:47,200 --> 00:33:53,169
vulnerable devices so we've tested a lot

678
00:33:51,220 --> 00:33:56,860
of vulnerable devices and multiple

679
00:33:53,169 --> 00:33:58,600
vendors first we informed the Pluto

680
00:33:56,860 --> 00:34:02,709
special interest group which responsible

681
00:33:58,600 --> 00:34:06,549
for standardization of Bluetooth the CVE

682
00:34:02,710 --> 00:34:11,530
was assigned to this vulnerability and

683
00:34:06,549 --> 00:34:13,690
then we started hunting implementations

684
00:34:11,530 --> 00:34:16,419
and checking whether they're vulnerable

685
00:34:13,690 --> 00:34:19,000
or not so first we have we had to

686
00:34:16,418 --> 00:34:21,328
consider the fact that Bluetooth le

687
00:34:19,000 --> 00:34:23,619
secure connections and bluetooth

688
00:34:21,329 --> 00:34:26,319
security in preparing the to pairing

689
00:34:23,619 --> 00:34:29,919
protocols are implemented in two

690
00:34:26,319 --> 00:34:31,629
different places early secure

691
00:34:29,918 --> 00:34:33,879
connections is implemented in the

692
00:34:31,629 --> 00:34:36,969
operating system and therefore we had to

693
00:34:33,879 --> 00:34:40,469
look at the implementation of multiple

694
00:34:36,969 --> 00:34:44,259
multiple Pub popular operating systems

695
00:34:40,469 --> 00:34:47,020
so the implementation we tested was the

696
00:34:44,260 --> 00:34:51,190
implementation of blue droid foundry

697
00:34:47,020 --> 00:34:53,770
which called dude read we actually

698
00:34:51,190 --> 00:34:57,250
haven't tested but was were informed by

699
00:34:53,770 --> 00:34:59,859
Apple that both iOS and the blue twindom

700
00:34:57,250 --> 00:35:01,180
implementation was vulnerable iOS and

701
00:34:59,859 --> 00:35:03,790
Mac OS implementations were both

702
00:35:01,180 --> 00:35:06,220
vulnerable Microsoft actually at the

703
00:35:03,790 --> 00:35:08,500
time didn't have an implementation of

704
00:35:06,220 --> 00:35:10,850
early secure connections instead it had

705
00:35:08,500 --> 00:35:14,780
only the implementation of

706
00:35:10,850 --> 00:35:16,940
the legacy thing which as you might

707
00:35:14,780 --> 00:35:19,130
remember is vulnerable to the passive

708
00:35:16,940 --> 00:35:22,060
very very simple attack so that's not

709
00:35:19,130 --> 00:35:22,060
like a good thing

710
00:35:22,840 --> 00:35:29,900
next we moved on to an implementation of

711
00:35:26,330 --> 00:35:33,470
secure simple pairing so security

712
00:35:29,900 --> 00:35:34,850
preparing opposed to the any secure

713
00:35:33,470 --> 00:35:37,819
connection is actually implemented by

714
00:35:34,850 --> 00:35:40,610
the Bluetooth chip so we've tested all

715
00:35:37,820 --> 00:35:42,650
of the three major vendors of Bluetooth

716
00:35:40,610 --> 00:35:43,850
chips which is Qualcomm Broadcom and in

717
00:35:42,650 --> 00:35:48,800
tow and found all of them to be

718
00:35:43,850 --> 00:35:51,620
vulnerable so that was I don't know

719
00:35:48,800 --> 00:35:53,840
which surprising or not because by now

720
00:35:51,620 --> 00:35:58,339
we already knew that probably all stand

721
00:35:53,840 --> 00:35:59,780
lamentation will be vulnerable and the

722
00:35:58,340 --> 00:36:00,610
industry reaction was actually pretty

723
00:35:59,780 --> 00:36:04,130
good

724
00:36:00,610 --> 00:36:06,560
it it requires a lot of effort in order

725
00:36:04,130 --> 00:36:11,120
to coordinate between all these vendors

726
00:36:06,560 --> 00:36:15,759
but after we overcome this obstacle all

727
00:36:11,120 --> 00:36:15,759
of the vendors acted very responsibly

728
00:36:16,120 --> 00:36:22,940
they all provided patch to their devices

729
00:36:21,350 --> 00:36:25,040
some of them released the patches

730
00:36:22,940 --> 00:36:27,620
through their vendor partners like

731
00:36:25,040 --> 00:36:30,590
Qualcomm and Broadcom others simply

732
00:36:27,620 --> 00:36:35,240
released the patch online and all

733
00:36:30,590 --> 00:36:37,040
through the update procedures so yeah

734
00:36:35,240 --> 00:36:39,500
all of the operating system have been

735
00:36:37,040 --> 00:36:43,070
updated but the more important thing is

736
00:36:39,500 --> 00:36:47,600
that the Bluetooth actually addressed

737
00:36:43,070 --> 00:36:51,320
this finding very seriously and released

738
00:36:47,600 --> 00:36:53,920
a formal statement saying that yes this

739
00:36:51,320 --> 00:36:58,880
problem occurs and yes we are aware

740
00:36:53,920 --> 00:37:01,840
aware of it and we're also at least as

741
00:36:58,880 --> 00:37:03,860
they promised here will add

742
00:37:01,840 --> 00:37:06,680
vulnerability testing to their

743
00:37:03,860 --> 00:37:09,860
qualification program so that no

744
00:37:06,680 --> 00:37:12,020
Bluetooth compatible device could be

745
00:37:09,860 --> 00:37:13,670
released to the market with this

746
00:37:12,020 --> 00:37:18,380
vulnerability in the future which is

747
00:37:13,670 --> 00:37:21,480
very encouraging and and that's thus the

748
00:37:18,380 --> 00:37:25,020
the specification was was changed and

749
00:37:21,480 --> 00:37:27,950
and hopefully this vulnerability will

750
00:37:25,020 --> 00:37:27,950
not occur in the future

751
00:37:28,010 --> 00:37:33,720
finally I want to sum up by saying that

752
00:37:31,140 --> 00:37:37,410
we have introduced a fixed coordinate

753
00:37:33,720 --> 00:37:39,480
invalid curve attack which uses the

754
00:37:37,410 --> 00:37:42,509
peaks x coordinate you know but in order

755
00:37:39,480 --> 00:37:48,089
to device in value of attack in a

756
00:37:42,510 --> 00:37:49,560
different way which is might be useful

757
00:37:48,089 --> 00:37:51,720
in some other particles

758
00:37:49,560 --> 00:37:55,400
I currently haven't encountered another

759
00:37:51,720 --> 00:38:01,740
protocol that have this special design

760
00:37:55,400 --> 00:38:03,089
issue but maybe we presented this

761
00:38:01,740 --> 00:38:06,629
application on the bluetooth pairing

762
00:38:03,089 --> 00:38:08,810
protocol we proven that all of the

763
00:38:06,630 --> 00:38:13,560
current pairing protocols are insecure

764
00:38:08,810 --> 00:38:15,390
none of them was were was secured

765
00:38:13,560 --> 00:38:20,369
against his back and previous attacks

766
00:38:15,390 --> 00:38:22,140
together and we've discovered multiple

767
00:38:20,369 --> 00:38:25,290
design flaws in the Bluetooth protocol

768
00:38:22,140 --> 00:38:28,650
which again were addressed when in

769
00:38:25,290 --> 00:38:30,540
protocol specification change and we

770
00:38:28,650 --> 00:38:34,349
found that all of the vendors all of the

771
00:38:30,540 --> 00:38:37,140
big vendors are vulnerable and what and

772
00:38:34,349 --> 00:38:42,650
according to this finding protocol was

773
00:38:37,140 --> 00:38:42,650
modified and our findings were addressed

774
00:38:43,490 --> 00:38:47,578
finally I want to thank the third

775
00:38:45,780 --> 00:38:49,829
Coordination Center for helping us to

776
00:38:47,579 --> 00:38:51,690
coordinate between all the vendors again

777
00:38:49,829 --> 00:38:55,710
it was very difficult with a lot of

778
00:38:51,690 --> 00:38:59,030
vendors and for all of the vendors for

779
00:38:55,710 --> 00:39:02,160
patching their system and not having to

780
00:38:59,030 --> 00:39:08,119
go through a trouble of ping pong

781
00:39:02,160 --> 00:39:08,118
between us a lot about this that's it

782
00:39:11,960 --> 00:39:16,290
thank you for the great talk earlier if

783
00:39:14,460 --> 00:39:28,290
you have any question please come to the

784
00:39:16,290 --> 00:39:29,820
mic thank you good work by the way not a

785
00:39:28,290 --> 00:39:34,110
criticism of the work but do you have

786
00:39:29,820 --> 00:39:36,450
any understanding for how this happened

787
00:39:34,110 --> 00:39:38,190
in the Bluetooth process the checking

788
00:39:36,450 --> 00:39:41,160
for the point Infiniti checking for the

789
00:39:38,190 --> 00:39:43,440
point on the curve those tests were in

790
00:39:41,160 --> 00:39:43,859
x9 a gazillion years ago what twenty

791
00:39:43,440 --> 00:39:46,380
years ago

792
00:39:43,860 --> 00:39:48,360
do we have any insight into how the

793
00:39:46,380 --> 00:39:50,430
Bluetooth people didn't even refer to

794
00:39:48,360 --> 00:39:53,040
the ansi standards that probably existed

795
00:39:50,430 --> 00:39:55,020
so that's totally not an insight

796
00:39:53,040 --> 00:39:57,090
information I really don't know what

797
00:39:55,020 --> 00:39:58,980
went through the process but what I've

798
00:39:57,090 --> 00:40:01,650
heard from people that came to me after

799
00:39:58,980 --> 00:40:05,430
the starts that was that the patenting

800
00:40:01,650 --> 00:40:08,460
regarding of point validation is very

801
00:40:05,430 --> 00:40:12,720
very very what made things very

802
00:40:08,460 --> 00:40:16,050
complicated in the time there is

803
00:40:12,720 --> 00:40:18,950
actually a patent against that covers

804
00:40:16,050 --> 00:40:23,940
point validation which is very broad

805
00:40:18,950 --> 00:40:26,220
thing to cover which again if companies

806
00:40:23,940 --> 00:40:29,400
were trying to validate their point by

807
00:40:26,220 --> 00:40:33,049
simply testing the curve equation that

808
00:40:29,400 --> 00:40:38,490
might result in a patent violation so

809
00:40:33,050 --> 00:40:40,460
that made things very complicated so I

810
00:40:38,490 --> 00:40:43,049
just had a completely weird question

811
00:40:40,460 --> 00:40:44,880
when you're talking about the type of

812
00:40:43,050 --> 00:40:48,240
the existing technology that does

813
00:40:44,880 --> 00:40:50,100
over-the-air packet manipulation is that

814
00:40:48,240 --> 00:40:51,089
doing it as it's being broadcast or is

815
00:40:50,100 --> 00:40:55,799
it doing some sort of man-in-the-middle

816
00:40:51,090 --> 00:40:57,930
thing so I'm actually not like I haven't

817
00:40:55,800 --> 00:41:00,390
tested it fully to understand exactly

818
00:40:57,930 --> 00:41:05,580
what it's doing and again it doesn't

819
00:41:00,390 --> 00:41:07,830
work with the defilement side so maybe

820
00:41:05,580 --> 00:41:13,290
equalize on the fact that you can simply

821
00:41:07,830 --> 00:41:16,860
break the encryption key and thus simply

822
00:41:13,290 --> 00:41:21,000
yeah Jam the one device and transmit

823
00:41:16,860 --> 00:41:23,130
another packet yeah together I'm not

824
00:41:21,000 --> 00:41:25,009
sure I don't want to confuse you alright

825
00:41:23,130 --> 00:41:29,400
that's fine thanks

826
00:41:25,009 --> 00:41:31,650
okay any other question this is not a

827
00:41:29,400 --> 00:41:33,220
case then please find the speaker once

828
00:41:31,650 --> 00:41:37,810
again

829
00:41:33,220 --> 00:41:37,810
[Applause]

