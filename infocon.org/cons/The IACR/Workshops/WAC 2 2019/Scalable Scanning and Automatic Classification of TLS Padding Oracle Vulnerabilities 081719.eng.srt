1
00:00:04,880 --> 00:00:10,879
okay hi i'm robert i'm from university

2
00:00:09,139 --> 00:00:12,350
Bohan and i'm presenting our work on

3
00:00:10,879 --> 00:00:13,850
scalable scanning an automatic

4
00:00:12,350 --> 00:00:16,369
classification of tiers padding Oracle

5
00:00:13,850 --> 00:00:19,698
inabilities joint work with the people

6
00:00:16,369 --> 00:00:21,290
you can see on the slide so before we

7
00:00:19,699 --> 00:00:22,760
start I would like to get you all on the

8
00:00:21,290 --> 00:00:24,740
same page what this talk is about so

9
00:00:22,760 --> 00:00:26,510
that we all can understand what I'm

10
00:00:24,740 --> 00:00:28,549
talking about later so this talk is

11
00:00:26,510 --> 00:00:30,260
about yes that's the protocol which

12
00:00:28,550 --> 00:00:33,530
you're using a browser for example if

13
00:00:30,260 --> 00:00:35,390
you make an HTTP connection and we are

14
00:00:33,530 --> 00:00:38,719
today trying to attack this protocol and

15
00:00:35,390 --> 00:00:41,780
for example see a cookie to break a user

16
00:00:38,719 --> 00:00:43,429
session and the protocol itself consists

17
00:00:41,780 --> 00:00:45,710
of mainly two phases a handshake phase

18
00:00:43,429 --> 00:00:47,960
and an application interface and in the

19
00:00:45,710 --> 00:00:49,879
handshake phase cryptographic algorithms

20
00:00:47,960 --> 00:00:52,159
are negotiated and cryptographic keys

21
00:00:49,879 --> 00:00:53,839
while the keys and Agron's have been

22
00:00:52,159 --> 00:00:55,460
used in the application later phase to

23
00:00:53,839 --> 00:00:58,219
actually encrypt the application data

24
00:00:55,460 --> 00:01:00,019
and today we try to attack the

25
00:00:58,219 --> 00:01:03,559
application data so we can actually save

26
00:01:00,019 --> 00:01:05,720
a copy for example so of TS uses this

27
00:01:03,559 --> 00:01:08,240
concept of cipher suit so most of you

28
00:01:05,720 --> 00:01:10,009
probably know but cypher suit is a set

29
00:01:08,240 --> 00:01:12,679
of cryptographic algorithms which you

30
00:01:10,009 --> 00:01:14,119
can negotiate in a TS session so this is

31
00:01:12,680 --> 00:01:17,149
an example cypher suit and in this

32
00:01:14,119 --> 00:01:19,520
example we choose RSA key exchange

33
00:01:17,149 --> 00:01:21,920
algorithm we use a e as it's a block

34
00:01:19,520 --> 00:01:25,670
cipher and this block ciphers use in the

35
00:01:21,920 --> 00:01:27,950
mode of operation CBC and we use sha-1

36
00:01:25,670 --> 00:01:30,770
as an HTML and in the website a random

37
00:01:27,950 --> 00:01:33,649
function so this talk is mainly about

38
00:01:30,770 --> 00:01:36,259
CBC pairing or occurred so we will focus

39
00:01:33,649 --> 00:01:38,719
on all the cipher suits which use CBC so

40
00:01:36,259 --> 00:01:40,039
if you are negotiating a surface suit

41
00:01:38,719 --> 00:01:44,689
which is not CBC you are not vulnerable

42
00:01:40,039 --> 00:01:46,030
but if you do you might be so let's talk

43
00:01:44,689 --> 00:01:50,178
about the CBC mode first

44
00:01:46,030 --> 00:01:52,609
so this TAS and CBC mode uses a concept

45
00:01:50,179 --> 00:01:54,920
of Mack van het van encrypt this means

46
00:01:52,609 --> 00:01:57,559
that your data is if you have some data

47
00:01:54,920 --> 00:02:01,069
you want to encrypt you first compute an

48
00:01:57,560 --> 00:02:03,140
H Mac and then you have to fill this

49
00:02:01,069 --> 00:02:05,659
data app with additional padding bytes

50
00:02:03,140 --> 00:02:06,950
so you had some padding and depending on

51
00:02:05,659 --> 00:02:08,330
how long your padding as your pending

52
00:02:06,950 --> 00:02:09,979
look at padding looks a little bit

53
00:02:08,330 --> 00:02:12,290
different so for example if you have one

54
00:02:09,979 --> 00:02:13,940
bite of padding you just add a zero byte

55
00:02:12,290 --> 00:02:16,160
if you have two bytes of padding you

56
00:02:13,940 --> 00:02:18,560
just at to one bytes and if you are

57
00:02:16,160 --> 00:02:20,600
Freebirds at free to guides and so on

58
00:02:18,560 --> 00:02:23,209
so if the basis structure and with

59
00:02:20,600 --> 00:02:25,400
padding so after that you put all your

60
00:02:23,209 --> 00:02:27,620
data into the CBC encryption function

61
00:02:25,400 --> 00:02:30,590
and then you get some cipher text which

62
00:02:27,620 --> 00:02:33,230
you can when transmitting but how does

63
00:02:30,590 --> 00:02:35,150
the CBC encryption look like so I have a

64
00:02:33,230 --> 00:02:37,429
CBC decryption you're sorry service VD

65
00:02:35,150 --> 00:02:39,650
corruption so if you want to decrypt a

66
00:02:37,430 --> 00:02:41,300
block of ciphertext what you can do is

67
00:02:39,650 --> 00:02:43,610
you can just put it through a block

68
00:02:41,300 --> 00:02:45,800
cipher and when you compute the

69
00:02:43,610 --> 00:02:47,930
exclusive-or with some initialization

70
00:02:45,800 --> 00:02:50,270
vector and then you get the resulting

71
00:02:47,930 --> 00:02:52,700
plain text and if you have more than one

72
00:02:50,270 --> 00:02:56,209
by a block of cipher text what you do is

73
00:02:52,700 --> 00:02:57,829
you use previous block and echo it with

74
00:02:56,209 --> 00:02:59,870
the result of a block safe operation to

75
00:02:57,830 --> 00:03:01,910
get the next place in text message block

76
00:02:59,870 --> 00:03:03,700
and you continue with that till you get

77
00:03:01,910 --> 00:03:05,989
all the plaintext message block and

78
00:03:03,700 --> 00:03:08,959
eventually there will be some padding at

79
00:03:05,989 --> 00:03:12,769
the end of a message because you have to

80
00:03:08,959 --> 00:03:14,530
fill a message up so the CBC mode has an

81
00:03:12,769 --> 00:03:17,269
interesting property meaning that it's

82
00:03:14,530 --> 00:03:19,430
malleable what does this mean that if an

83
00:03:17,269 --> 00:03:22,220
attacker flips a bit in the cipher text

84
00:03:19,430 --> 00:03:25,040
he will know that he will also flip for

85
00:03:22,220 --> 00:03:27,560
corresponding bit in the plain text of

86
00:03:25,040 --> 00:03:31,130
the next block so he can inject

87
00:03:27,560 --> 00:03:33,500
arbitrary bit flips in the plaintext and

88
00:03:31,130 --> 00:03:35,660
so why it was problematic what an

89
00:03:33,500 --> 00:03:38,209
attacker can do is he can just cut off

90
00:03:35,660 --> 00:03:40,489
for example the last part of a cipher

91
00:03:38,209 --> 00:03:42,140
text and then suddenly the receiving

92
00:03:40,489 --> 00:03:46,090
server will interpret the message as

93
00:03:42,140 --> 00:03:48,920
padding and this can get quite dangerous

94
00:03:46,090 --> 00:03:51,859
so this is an example of a pairing

95
00:03:48,920 --> 00:03:55,160
Oracle where server receives a net phone

96
00:03:51,859 --> 00:03:58,640
message from a attacker and what he can

97
00:03:55,160 --> 00:04:01,220
if a server responds with even if even

98
00:03:58,640 --> 00:04:04,220
if a message was invalid of message was

99
00:04:01,220 --> 00:04:05,840
valid an attacker can deduce information

100
00:04:04,220 --> 00:04:09,170
about the plain text of a message in

101
00:04:05,840 --> 00:04:10,730
this case namely that m2x on this

102
00:04:09,170 --> 00:04:13,250
modification from the attacker is a

103
00:04:10,730 --> 00:04:15,470
valid padding and this can allow the

104
00:04:13,250 --> 00:04:17,390
attacker if he continues to send my

105
00:04:15,470 --> 00:04:19,608
phone messages to the or occur to

106
00:04:17,390 --> 00:04:21,380
decrypt the whole message and this is

107
00:04:19,608 --> 00:04:25,430
absolutely obviously bad so we don't

108
00:04:21,380 --> 00:04:28,010
found that so why is this applicable in

109
00:04:25,430 --> 00:04:30,080
TS so if you may have noticed yes as an

110
00:04:28,010 --> 00:04:31,940
H Mac so you would think or if you

111
00:04:30,080 --> 00:04:34,609
manipulate the cipher text

112
00:04:31,940 --> 00:04:40,490
eh make it's invalidated this might be

113
00:04:34,610 --> 00:04:42,290
true but usually you cannot tell if we H

114
00:04:40,490 --> 00:04:45,080
Marcus valid or invalid before you have

115
00:04:42,290 --> 00:04:47,060
checked the padding this is because the

116
00:04:45,080 --> 00:04:49,010
H makers in an arbitrary position in

117
00:04:47,060 --> 00:04:50,330
this plain text and you have to check

118
00:04:49,010 --> 00:04:52,760
the pairing to find out where the H

119
00:04:50,330 --> 00:04:55,969
makers before you can check it so in TS

120
00:04:52,760 --> 00:04:57,740
and a vulnerable server actually does

121
00:04:55,970 --> 00:05:00,100
not leak valid padding invalid padding

122
00:04:57,740 --> 00:05:03,020
but he leaks usually invalid H make

123
00:05:00,100 --> 00:05:05,780
invalid padding so you can still deduce

124
00:05:03,020 --> 00:05:08,900
of information if a padding was valid or

125
00:05:05,780 --> 00:05:10,940
invalid and secure server should always

126
00:05:08,900 --> 00:05:13,760
respond the same way and should not give

127
00:05:10,940 --> 00:05:16,790
an attacker the opportunity to know if a

128
00:05:13,760 --> 00:05:18,380
padding was valid or invalid so this is

129
00:05:16,790 --> 00:05:20,180
actually an implementation vulnerability

130
00:05:18,380 --> 00:05:23,060
it's not a one ability understand out in

131
00:05:20,180 --> 00:05:25,880
tears so we have been quite a few

132
00:05:23,060 --> 00:05:27,950
padding Oracle's in the past and TS and

133
00:05:25,880 --> 00:05:30,800
I'm quickly going to talk about the

134
00:05:27,950 --> 00:05:32,300
various types so the first one is for

135
00:05:30,800 --> 00:05:34,250
voting a padding or okay check and it's

136
00:05:32,300 --> 00:05:38,300
basically the first padding Oracle Tech

137
00:05:34,250 --> 00:05:40,340
on CBC mode and was discovered in 2002

138
00:05:38,300 --> 00:05:42,800
and it was originally not really

139
00:05:40,340 --> 00:05:45,950
exploitable in tears because and yes if

140
00:05:42,800 --> 00:05:48,220
you receive an errand like the H make

141
00:05:45,950 --> 00:05:50,900
was invalid the connection is closed and

142
00:05:48,220 --> 00:05:53,270
additionally the error messages are

143
00:05:50,900 --> 00:05:55,940
encrypted so even if the server sends

144
00:05:53,270 --> 00:05:59,330
different error messages you could not

145
00:05:55,940 --> 00:06:01,669
tear that which error message she

146
00:05:59,330 --> 00:06:03,320
actually got so there were later

147
00:06:01,669 --> 00:06:05,120
improvements to this attack which is

148
00:06:03,320 --> 00:06:07,669
timing to deduce with different arrows

149
00:06:05,120 --> 00:06:10,370
States and so on but this was was first

150
00:06:07,669 --> 00:06:12,169
kind of aesthetic then later on there

151
00:06:10,370 --> 00:06:14,750
was reported attacks so maybe your third

152
00:06:12,169 --> 00:06:16,760
of us attack and it's attack against s

153
00:06:14,750 --> 00:06:20,480
every free which is an early version of

154
00:06:16,760 --> 00:06:22,430
the TS protocol and as version free has

155
00:06:20,480 --> 00:06:24,440
been ability but it does not enforce for

156
00:06:22,430 --> 00:06:26,600
padding to be very strict so you have a

157
00:06:24,440 --> 00:06:28,790
lot of freedoms and the other will

158
00:06:26,600 --> 00:06:30,740
penalize you choose and this can be

159
00:06:28,790 --> 00:06:33,500
exploited by an attacker so what an

160
00:06:30,740 --> 00:06:36,680
attack address if he sees as if you see

161
00:06:33,500 --> 00:06:38,450
some message which looks like data H

162
00:06:36,680 --> 00:06:41,060
make padding what he can do is he can

163
00:06:38,450 --> 00:06:43,640
transform this message and cut off the

164
00:06:41,060 --> 00:06:45,140
padding bytes in the end and move a

165
00:06:43,640 --> 00:06:45,860
block from the plaintext he wants to

166
00:06:45,140 --> 00:06:47,690
decrypt

167
00:06:45,860 --> 00:06:50,210
into the end and the receiving server

168
00:06:47,690 --> 00:06:53,180
will interpret for data in the end as

169
00:06:50,210 --> 00:06:55,789
petting and if this worked and 4h makers

170
00:06:53,180 --> 00:06:59,450
developed he knows or did know some

171
00:06:55,790 --> 00:07:01,880
information about the data so this is

172
00:06:59,450 --> 00:07:05,599
quite dangerous but this attack also

173
00:07:01,880 --> 00:07:08,060
affects some TS version so there's

174
00:07:05,600 --> 00:07:10,070
nothing in TS which forces the server to

175
00:07:08,060 --> 00:07:12,740
validate that each pairing by it was

176
00:07:10,070 --> 00:07:15,469
actually valid so server can actually

177
00:07:12,740 --> 00:07:17,870
just check the last paying by it and

178
00:07:15,470 --> 00:07:20,960
when just happily continue ever work

179
00:07:17,870 --> 00:07:23,990
perfectly fine without any problems but

180
00:07:20,960 --> 00:07:27,859
this can again be exploited for the pure

181
00:07:23,990 --> 00:07:29,270
check so this was actually found in a

182
00:07:27,860 --> 00:07:31,990
lot of implementations in the past so

183
00:07:29,270 --> 00:07:34,490
they have many name service attacks and

184
00:07:31,990 --> 00:07:36,800
they are mostly oftentimes sushi

185
00:07:34,490 --> 00:07:38,750
off-by-one errors and what this text

186
00:07:36,800 --> 00:07:40,730
taught us that you need to check each

187
00:07:38,750 --> 00:07:42,590
byte of the padding and you also need to

188
00:07:40,730 --> 00:07:44,330
check each byte of hmx or some

189
00:07:42,590 --> 00:07:47,179
implementations do not check all the h

190
00:07:44,330 --> 00:07:51,590
mac bytes which is quite weird but this

191
00:07:47,180 --> 00:07:54,050
and then this does happen so then i

192
00:07:51,590 --> 00:07:57,159
would like to talk about the CVE this is

193
00:07:54,050 --> 00:08:00,890
an openness SUV from three years ago and

194
00:07:57,160 --> 00:08:02,420
it was introduced when we try to fix the

195
00:08:00,890 --> 00:08:06,320
lucky 13 attack which I'm going to talk

196
00:08:02,420 --> 00:08:08,510
about later and the problem here is that

197
00:08:06,320 --> 00:08:10,849
he has TS allows it to do more padding

198
00:08:08,510 --> 00:08:13,490
bytes when you actually want need so if

199
00:08:10,850 --> 00:08:16,400
you just need 13 padding bytes and you

200
00:08:13,490 --> 00:08:18,620
use AES you can also use 29 padding

201
00:08:16,400 --> 00:08:21,020
bytes yeah the idea was that you could

202
00:08:18,620 --> 00:08:25,220
hide the length of a message with this

203
00:08:21,020 --> 00:08:27,859
feature and in this ve taught us that

204
00:08:25,220 --> 00:08:29,750
you could also create metaphor messages

205
00:08:27,860 --> 00:08:32,690
which only contain padding so they do

206
00:08:29,750 --> 00:08:35,210
not container H make at all and this

207
00:08:32,690 --> 00:08:37,850
could then be exploited also in the

208
00:08:35,210 --> 00:08:39,310
padding Oracle attack so if your normal

209
00:08:37,850 --> 00:08:41,540
message looks like this you could also

210
00:08:39,309 --> 00:08:43,880
construct messages which look like this

211
00:08:41,539 --> 00:08:46,370
so they contain two blocks of padding

212
00:08:43,880 --> 00:08:48,590
and an H Mac and we receive of such

213
00:08:46,370 --> 00:08:50,120
message cannot tell that there's no data

214
00:08:48,590 --> 00:08:51,620
in it before he checked the padding so

215
00:08:50,120 --> 00:08:53,390
you might be able to trick the

216
00:08:51,620 --> 00:08:55,610
implementation into showing different

217
00:08:53,390 --> 00:08:58,790
behavior and it also taught us that you

218
00:08:55,610 --> 00:08:59,720
could do this so you could also get rid

219
00:08:58,790 --> 00:09:02,719
of eh make and

220
00:08:59,720 --> 00:09:05,870
sent padding bytes and the receiver has

221
00:09:02,720 --> 00:09:09,410
no possibility to tell before because he

222
00:09:05,870 --> 00:09:12,500
cannot check the h meg so this was quite

223
00:09:09,410 --> 00:09:13,790
dangerous and there's never openness SV

224
00:09:12,500 --> 00:09:15,500
I want to talk about which was quite

225
00:09:13,790 --> 00:09:18,230
surprising to me it was from last year

226
00:09:15,500 --> 00:09:20,720
and the important part of his CV is this

227
00:09:18,230 --> 00:09:23,300
year so there was an implementation back

228
00:09:20,720 --> 00:09:25,790
in some men compared function and it

229
00:09:23,300 --> 00:09:27,620
effectively reduced to only comparing

230
00:09:25,790 --> 00:09:30,980
the least significant bit of each byte

231
00:09:27,620 --> 00:09:32,540
and I was always like okay this is some

232
00:09:30,980 --> 00:09:33,829
weird architecture service is not

233
00:09:32,540 --> 00:09:35,750
affected in all the open myself

234
00:09:33,829 --> 00:09:37,550
limitations but I felt like okay I

235
00:09:35,750 --> 00:09:41,509
thought it does not matter which bit you

236
00:09:37,550 --> 00:09:42,859
actually check but this K gave us the

237
00:09:41,509 --> 00:09:44,540
idea that you actually need to check

238
00:09:42,860 --> 00:09:46,759
that the implementation checks each bit

239
00:09:44,540 --> 00:09:48,709
because maybe they only check the most

240
00:09:46,759 --> 00:09:50,209
significant bits maybe they choose and

241
00:09:48,709 --> 00:09:52,878
check the least significant bits maybe

242
00:09:50,209 --> 00:09:56,560
they only chose to check those bits so

243
00:09:52,879 --> 00:09:58,879
this was quite interesting for us and

244
00:09:56,560 --> 00:10:01,219
then I want to talk about the lucky 14

245
00:09:58,879 --> 00:10:04,550
attack so the lucky 13 attack is also

246
00:10:01,220 --> 00:10:06,199
pairing Oracle attack and it exploits a

247
00:10:04,550 --> 00:10:08,628
side changes which is actually present

248
00:10:06,199 --> 00:10:10,939
in the tier specification and the

249
00:10:08,629 --> 00:10:13,309
quality of attack is that if you have

250
00:10:10,939 --> 00:10:16,219
longer padding this might result in a

251
00:10:13,309 --> 00:10:18,019
faster HTML computation and if you have

252
00:10:16,220 --> 00:10:20,089
shorter padding in this result might

253
00:10:18,019 --> 00:10:22,970
result in a slower age may computation

254
00:10:20,089 --> 00:10:24,980
the reason for this is that if padding

255
00:10:22,970 --> 00:10:28,279
is longer you actually have to H make

256
00:10:24,980 --> 00:10:30,740
less data but if padding a shorter you

257
00:10:28,279 --> 00:10:33,589
have to H make more data and this can

258
00:10:30,740 --> 00:10:36,019
result in this timing difference so in

259
00:10:33,589 --> 00:10:37,759
order to fix this vulnerability you have

260
00:10:36,019 --> 00:10:39,559
to have a constant time implementation

261
00:10:37,759 --> 00:10:40,879
which is quite hard to achieve in

262
00:10:39,559 --> 00:10:44,930
practice if you will still want to be

263
00:10:40,879 --> 00:10:47,420
reasonably fast so but these timing

264
00:10:44,930 --> 00:10:48,680
attacks like in the lucky 14 where you

265
00:10:47,420 --> 00:10:51,649
have to measure some age make

266
00:10:48,680 --> 00:10:53,180
computation timing it's not relevant for

267
00:10:51,649 --> 00:10:55,850
this talk so this is quite hard as you

268
00:10:53,180 --> 00:10:57,800
can imagine and there's a lot of room

269
00:10:55,850 --> 00:10:59,540
for arose because what some network in

270
00:10:57,800 --> 00:11:01,729
tolerances and so on so we do not

271
00:10:59,540 --> 00:11:03,920
consider any timing interest level at

272
00:11:01,730 --> 00:11:06,350
all so our timings are in the second

273
00:11:03,920 --> 00:11:09,380
range so like 10 seconds or something so

274
00:11:06,350 --> 00:11:10,880
you can see it with your bare eyes and

275
00:11:09,380 --> 00:11:13,250
finally I want to talk about the robot

276
00:11:10,880 --> 00:11:15,260
attack and the robot attack is not

277
00:11:13,250 --> 00:11:16,970
see padding Oracle vulnerability but as

278
00:11:15,260 --> 00:11:20,480
a blacksmith availability if it was

279
00:11:16,970 --> 00:11:22,460
presented last year do snakes and the

280
00:11:20,480 --> 00:11:24,470
interesting part for our research from

281
00:11:22,460 --> 00:11:26,960
this attack was that they found some new

282
00:11:24,470 --> 00:11:29,090
site records so they found that some

283
00:11:26,960 --> 00:11:31,400
service do not show different error

284
00:11:29,090 --> 00:11:32,900
messages when you send invalid messages

285
00:11:31,400 --> 00:11:35,180
but they actually show different

286
00:11:32,900 --> 00:11:37,520
behavior on the underlying layer so on

287
00:11:35,180 --> 00:11:40,310
the TCP layer so namely they could see

288
00:11:37,520 --> 00:11:42,170
that sometimes the server was leaving

289
00:11:40,310 --> 00:11:43,130
the TCP connection open so he didn't

290
00:11:42,170 --> 00:11:45,920
reclose it

291
00:11:43,130 --> 00:11:47,900
other times he normally closed for TCP

292
00:11:45,920 --> 00:11:50,240
connection with a TCP finish message and

293
00:11:47,900 --> 00:11:52,819
other times he terminated the connection

294
00:11:50,240 --> 00:11:54,320
with a TCP rst so there are different

295
00:11:52,820 --> 00:11:56,030
interfaces you can call him the

296
00:11:54,320 --> 00:11:59,180
operating system to show these different

297
00:11:56,030 --> 00:12:00,680
behaviors and this was quite nice and we

298
00:11:59,180 --> 00:12:03,170
thought oh they might be also relevant

299
00:12:00,680 --> 00:12:07,339
for pairing oracle vulnerabilities cbc

300
00:12:03,170 --> 00:12:09,469
padding Oracle new beauties so let's now

301
00:12:07,340 --> 00:12:12,350
talk about our research and petting

302
00:12:09,470 --> 00:12:14,210
orcas and white so we know that he's

303
00:12:12,350 --> 00:12:16,130
petting Oracle's are known since 2002 so

304
00:12:14,210 --> 00:12:19,730
it's quite a lot of time for developers

305
00:12:16,130 --> 00:12:22,580
and engineers to figure this the tech

306
00:12:19,730 --> 00:12:26,720
art but we asked us how come an away

307
00:12:22,580 --> 00:12:28,730
today in 2018 2019 so our idea was let's

308
00:12:26,720 --> 00:12:30,589
scan the Alexa top 1 million list and

309
00:12:28,730 --> 00:12:33,050
find out how many service actually won't

310
00:12:30,589 --> 00:12:34,910
go to visit tech but when we asked

311
00:12:33,050 --> 00:12:36,770
ourselves also how how would you

312
00:12:34,910 --> 00:12:40,189
actually do this so we are quite a few

313
00:12:36,770 --> 00:12:42,020
ways to do this so first of what we

314
00:12:40,190 --> 00:12:43,910
wanted to know is which made for

315
00:12:42,020 --> 00:12:45,800
messages represent so as I've already

316
00:12:43,910 --> 00:12:47,930
introduced where I'm multiple message

317
00:12:45,800 --> 00:12:50,630
formats which you could do so with H

318
00:12:47,930 --> 00:12:52,819
make without H make only padding you

319
00:12:50,630 --> 00:12:54,350
could flip different bits and bytes and

320
00:12:52,820 --> 00:12:55,940
padding you could different flip

321
00:12:54,350 --> 00:12:58,370
different parts bits and bytes and the H

322
00:12:55,940 --> 00:13:01,339
max so we were not entirely sure which

323
00:12:58,370 --> 00:13:03,560
messages we should actually send when we

324
00:13:01,339 --> 00:13:05,030
asked ourselves doesn't matter if we

325
00:13:03,560 --> 00:13:07,040
test different versions so if it's

326
00:13:05,030 --> 00:13:09,319
service gonna be on tiers one at - is it

327
00:13:07,040 --> 00:13:12,339
also gonna be on tiers one at 0 or maybe

328
00:13:09,320 --> 00:13:15,110
the other way around or are there some

329
00:13:12,339 --> 00:13:17,060
some statistical properties here do we

330
00:13:15,110 --> 00:13:18,470
need to test actually everything so our

331
00:13:17,060 --> 00:13:21,890
service which are only going to be on

332
00:13:18,470 --> 00:13:23,540
one version the same for block cipher so

333
00:13:21,890 --> 00:13:26,030
if you are going to be on Triple DES are

334
00:13:23,540 --> 00:13:27,099
you also going to be on a yes so in our

335
00:13:26,030 --> 00:13:29,920
minds naturally

336
00:13:27,100 --> 00:13:32,110
good thing probably yes but we were not

337
00:13:29,920 --> 00:13:34,060
so sure whoever some indication but this

338
00:13:32,110 --> 00:13:35,170
is actually not the case and we ask

339
00:13:34,060 --> 00:13:37,209
yourself does not matter which key

340
00:13:35,170 --> 00:13:39,280
exchange algorithms you use so usually

341
00:13:37,210 --> 00:13:40,960
it should be independent if you use RSA

342
00:13:39,280 --> 00:13:43,030
or elliptic curve diffie-hellman if

343
00:13:40,960 --> 00:13:46,480
you're gonna be an EVA you should not be

344
00:13:43,030 --> 00:13:48,250
vulnerable in the other or you should if

345
00:13:46,480 --> 00:13:50,470
you have only been one you should also

346
00:13:48,250 --> 00:13:53,590
be wannabe in the other and we have our

347
00:13:50,470 --> 00:13:55,120
way around so but the robot prepared

348
00:13:53,590 --> 00:13:56,860
some indication that this is also not

349
00:13:55,120 --> 00:13:58,360
the case for all service for blackmail

350
00:13:56,860 --> 00:14:01,900
so it might also not be the case for

351
00:13:58,360 --> 00:14:03,010
pairing or CBC pairing or occurs so what

352
00:14:01,900 --> 00:14:04,810
we did is we did some brainstorming

353
00:14:03,010 --> 00:14:07,569
session and we came up with different

354
00:14:04,810 --> 00:14:09,699
methyl messages which I would like to

355
00:14:07,570 --> 00:14:12,700
present here so the most trivial ones is

356
00:14:09,700 --> 00:14:14,710
this here so it has some data is MH mag

357
00:14:12,700 --> 00:14:17,230
and it has some padding and the padding

358
00:14:14,710 --> 00:14:19,750
is actually flipped in the last position

359
00:14:17,230 --> 00:14:21,580
and we created variations of this

360
00:14:19,750 --> 00:14:24,460
attacks or what we could find false but

361
00:14:21,580 --> 00:14:26,020
flipped arose so we flipped once a bit

362
00:14:24,460 --> 00:14:30,070
in the middle of a padding and once a

363
00:14:26,020 --> 00:14:33,069
bit in the end of a petting or wrong and

364
00:14:30,070 --> 00:14:34,270
we also did the same for VH mix so maybe

365
00:14:33,070 --> 00:14:35,830
some implementations are not checking

366
00:14:34,270 --> 00:14:38,310
the entire H max so we created the

367
00:14:35,830 --> 00:14:41,650
variance of that too and we also created

368
00:14:38,310 --> 00:14:43,119
combinations of the two so some flu bit

369
00:14:41,650 --> 00:14:45,850
flip and VH makes some bit flip in

370
00:14:43,120 --> 00:14:49,840
repairing when we came up with special

371
00:14:45,850 --> 00:14:52,090
vectors which do not contain application

372
00:14:49,840 --> 00:14:53,890
data but they do contain padding and

373
00:14:52,090 --> 00:14:56,320
they are all actually the same lengths

374
00:14:53,890 --> 00:14:58,330
or receive of such rumors and messages

375
00:14:56,320 --> 00:14:59,950
would not be able to tell if it's one of

376
00:14:58,330 --> 00:15:02,170
these messages or one off from the slide

377
00:14:59,950 --> 00:15:05,140
before before it can it has decrypted

378
00:15:02,170 --> 00:15:07,750
the message when we came up with these

379
00:15:05,140 --> 00:15:09,850
two messages so what we thought is so

380
00:15:07,750 --> 00:15:11,410
maybe if there is not after you deep

381
00:15:09,850 --> 00:15:13,540
edit the message was not enough room for

382
00:15:11,410 --> 00:15:16,480
the complete H MEK maybe some service

383
00:15:13,540 --> 00:15:18,099
would leak different behavior and what

384
00:15:16,480 --> 00:15:21,040
we did is we remove the first part of

385
00:15:18,100 --> 00:15:24,640
the H Mac and once the last part of eh

386
00:15:21,040 --> 00:15:27,670
max so so where's partially valid H mech

387
00:15:24,640 --> 00:15:30,850
in the record and finally we came up

388
00:15:27,670 --> 00:15:32,319
with was metaphor messages from CV I

389
00:15:30,850 --> 00:15:33,820
talked about earlier which contain only

390
00:15:32,320 --> 00:15:35,830
padding and once where they only contain

391
00:15:33,820 --> 00:15:37,690
valid padding and one server control

392
00:15:35,830 --> 00:15:39,660
only pairing but even vet padding is

393
00:15:37,690 --> 00:15:43,110
invalid so there's not enough room and

394
00:15:39,660 --> 00:15:47,120
message to fit for opening so we came up

395
00:15:43,110 --> 00:15:50,580
with 25 med phone messages in children

396
00:15:47,120 --> 00:15:52,320
then we build a tool based on TSO tika

397
00:15:50,580 --> 00:15:56,340
which is the framework which was

398
00:15:52,320 --> 00:15:58,590
developed by Ryan 2016 on for CCS and it

399
00:15:56,340 --> 00:16:00,900
allows you to send arbitrary TAS

400
00:15:58,590 --> 00:16:03,750
marriage messages with our charity as

401
00:16:00,900 --> 00:16:05,250
contents in an arbitrary order and this

402
00:16:03,750 --> 00:16:07,470
is quite nice for us so we developed

403
00:16:05,250 --> 00:16:10,160
this framework since three years now at

404
00:16:07,470 --> 00:16:13,410
all share so it's quite mature now and

405
00:16:10,160 --> 00:16:16,339
based on our twit on top of TS attacker

406
00:16:13,410 --> 00:16:18,600
we with TS crawler which is a

407
00:16:16,340 --> 00:16:20,010
distributed crawling infrastructure I'm

408
00:16:18,600 --> 00:16:21,180
not going to go into the details because

409
00:16:20,010 --> 00:16:23,640
not very interesting a lot of

410
00:16:21,180 --> 00:16:26,040
engineering just and it's built on top

411
00:16:23,640 --> 00:16:28,199
of MongoDB and read us to basically

412
00:16:26,040 --> 00:16:32,939
crawl a large amount of service at the

413
00:16:28,200 --> 00:16:35,040
same time so now I want to talk about

414
00:16:32,940 --> 00:16:37,710
some difficulties we had during scanning

415
00:16:35,040 --> 00:16:39,360
and how we take it for problems so first

416
00:16:37,710 --> 00:16:41,460
off I want to talk about non determinism

417
00:16:39,360 --> 00:16:43,170
so and we have the problem that some

418
00:16:41,460 --> 00:16:45,600
service if you send a metaphor message

419
00:16:43,170 --> 00:16:48,390
to them we might respond with a bad

420
00:16:45,600 --> 00:16:52,170
record Mac but if I send another mail

421
00:16:48,390 --> 00:16:56,580
for messages you might get no response

422
00:16:52,170 --> 00:16:59,280
so it's for server vulnerable because we

423
00:16:56,580 --> 00:17:01,080
did not receive an answer yet so maybe

424
00:16:59,280 --> 00:17:03,870
we should just wait longer maybe it will

425
00:17:01,080 --> 00:17:05,160
answer eventually so this is quite bad

426
00:17:03,870 --> 00:17:07,260
if you want to scan a large amount of

427
00:17:05,160 --> 00:17:09,930
service so what we did is we said okay

428
00:17:07,260 --> 00:17:11,879
we wait always one second after we send

429
00:17:09,930 --> 00:17:13,560
a metaphor messages on whatever the

430
00:17:11,880 --> 00:17:16,080
server responded with we will take as

431
00:17:13,560 --> 00:17:18,750
the answer from the server so but we

432
00:17:16,079 --> 00:17:20,520
still has a problem it might be that the

433
00:17:18,750 --> 00:17:22,589
server was just on a high load and it

434
00:17:20,520 --> 00:17:25,050
eventually answers with a bad record Mac

435
00:17:22,589 --> 00:17:27,510
so it's actually not vulnerable even

436
00:17:25,050 --> 00:17:30,330
after one second so it's not a silver

437
00:17:27,510 --> 00:17:32,510
bullet here so this confuses us if we

438
00:17:30,330 --> 00:17:34,830
want to say that servers wanna be or not

439
00:17:32,510 --> 00:17:37,710
but even worse we had service which

440
00:17:34,830 --> 00:17:39,750
responded to a method message a with a

441
00:17:37,710 --> 00:17:42,300
bad record Mac and if you send the same

442
00:17:39,750 --> 00:17:45,570
message again with Sun lay you get a

443
00:17:42,300 --> 00:17:46,980
different alert message so this makes it

444
00:17:45,570 --> 00:17:48,629
even worse for us and we are totally

445
00:17:46,980 --> 00:17:51,300
confused what we should say in this case

446
00:17:48,630 --> 00:17:53,120
is for survivability I don't know so

447
00:17:51,300 --> 00:17:55,580
what we did is

448
00:17:53,120 --> 00:17:56,899
what we believe reason for this is that

449
00:17:55,580 --> 00:18:00,710
there's some content distribution

450
00:17:56,899 --> 00:18:02,689
network or some Ruta behind the scenes

451
00:18:00,710 --> 00:18:04,129
which is actually distributing our

452
00:18:02,690 --> 00:18:06,279
packets too and our handshakes to

453
00:18:04,129 --> 00:18:08,480
different servers and visa service are

454
00:18:06,279 --> 00:18:10,700
maintained in different configurations

455
00:18:08,480 --> 00:18:12,620
so one server might be not vulnerable

456
00:18:10,700 --> 00:18:14,419
and respond always with bad record Mac

457
00:18:12,620 --> 00:18:16,279
the other server might be not vulnerable

458
00:18:14,419 --> 00:18:18,320
and always respond with record overflow

459
00:18:16,279 --> 00:18:20,120
but we sometimes get this we had

460
00:18:18,320 --> 00:18:25,009
non-determinism our scanning results so

461
00:18:20,120 --> 00:18:26,449
it was quite bad so if we think during

462
00:18:25,009 --> 00:18:29,629
the scanning process where the server's

463
00:18:26,450 --> 00:18:31,580
vulnerable we rescan Basava twice and we

464
00:18:29,629 --> 00:18:33,469
check that he responded on each and

465
00:18:31,580 --> 00:18:35,210
every message every time identical and

466
00:18:33,470 --> 00:18:38,269
if he did this we consider the servers

467
00:18:35,210 --> 00:18:41,659
actually warn about him and if it's not

468
00:18:38,269 --> 00:18:44,509
if it says some variants in its answers

469
00:18:41,659 --> 00:18:48,289
we consider it as not relevant for the

470
00:18:44,509 --> 00:18:51,830
study so we excluded and we had another

471
00:18:48,289 --> 00:18:53,450
problem so if you have 25 messages and

472
00:18:51,830 --> 00:18:55,908
you want to scan all the available

473
00:18:53,450 --> 00:18:58,220
cipher suits to find other possible

474
00:18:55,909 --> 00:18:59,809
vulnerabilities and maybe two supported

475
00:18:58,220 --> 00:19:01,039
versions you end up with already a lot

476
00:18:59,809 --> 00:19:03,529
of handshakes you have to do for each

477
00:19:01,039 --> 00:19:05,629
server and with very scanning on one of

478
00:19:03,529 --> 00:19:07,070
your servers which gets even worse and

479
00:19:05,629 --> 00:19:08,840
if you want to scan the Alexa top 1

480
00:19:07,070 --> 00:19:10,820
million list which can may contain 1

481
00:19:08,840 --> 00:19:12,619
million servers you end up with a lot of

482
00:19:10,820 --> 00:19:14,779
handshakes so what we also service is

483
00:19:12,619 --> 00:19:16,730
actually necessary to scan all the

484
00:19:14,779 --> 00:19:19,580
different cipher suits this is necessary

485
00:19:16,730 --> 00:19:23,029
to skin with all 25 messages or maybe

486
00:19:19,580 --> 00:19:24,529
our messages are just bad and we just

487
00:19:23,029 --> 00:19:27,529
choose them wrong so we came up with him

488
00:19:24,529 --> 00:19:29,659
in a brainstorming session after all and

489
00:19:27,529 --> 00:19:31,759
our solution was that we test 50,000

490
00:19:29,659 --> 00:19:33,289
service and check what is actually

491
00:19:31,759 --> 00:19:35,659
necessary to scan so maybe we can cut

492
00:19:33,289 --> 00:19:38,960
some corners for the larger skin of

493
00:19:35,659 --> 00:19:40,789
Alexa top 1 million list so what we did

494
00:19:38,960 --> 00:19:43,129
is was in this pre scanning face with

495
00:19:40,789 --> 00:19:45,169
scan 50s one at zero and avati as one at

496
00:19:43,129 --> 00:19:48,289
1 or T as one or two because we looked

497
00:19:45,169 --> 00:19:50,629
very similar we scan with all available

498
00:19:48,289 --> 00:19:52,100
CBC cipher suits from the server and we

499
00:19:50,629 --> 00:19:54,498
scan with all the 25-minute four

500
00:19:52,100 --> 00:20:00,259
messages and check for a check for

501
00:19:54,499 --> 00:20:02,480
results for yeah so mm from result with

502
00:20:00,259 --> 00:20:04,009
shows that yes you actually do need to

503
00:20:02,480 --> 00:20:05,389
check different yes version so some

504
00:20:04,009 --> 00:20:06,510
servers are only going to be on tiers

505
00:20:05,389 --> 00:20:10,050
one or two but

506
00:20:06,510 --> 00:20:11,280
wanna be on tiers 1 or 0 so if we want

507
00:20:10,050 --> 00:20:14,610
to find all the roots we need to check

508
00:20:11,280 --> 00:20:16,230
that and block cyphers yes some servers

509
00:20:14,610 --> 00:20:21,330
are only going to be on Triple DES for

510
00:20:16,230 --> 00:20:22,740
example and not on a yes and the other

511
00:20:21,330 --> 00:20:25,830
way around by the still support you have

512
00:20:22,740 --> 00:20:28,620
a mode so this bad and kicks change

513
00:20:25,830 --> 00:20:30,179
algorithms sadly yes so there are some

514
00:20:28,620 --> 00:20:34,409
service which are only gonna be if you

515
00:20:30,180 --> 00:20:36,750
use AES CBC and RSA but they are not

516
00:20:34,410 --> 00:20:38,790
going to be or if you use AES CBC on

517
00:20:36,750 --> 00:20:40,980
ecliptic curve diffie-hellman so if you

518
00:20:38,790 --> 00:20:43,159
want to find all the mobility also a key

519
00:20:40,980 --> 00:20:45,870
exchange a girls have to be scanned and

520
00:20:43,160 --> 00:20:47,190
finally we looked at the messages which

521
00:20:45,870 --> 00:20:49,050
were required to find all the

522
00:20:47,190 --> 00:20:51,120
vulnerabilities so if you we would have

523
00:20:49,050 --> 00:20:54,629
sentient own evolves for messages during

524
00:20:51,120 --> 00:20:57,060
the evaluation mmm we would stay found

525
00:20:54,630 --> 00:20:59,160
the same burnable servers so there's

526
00:20:57,060 --> 00:21:01,320
quite a lot of improvement we can do

527
00:20:59,160 --> 00:21:03,540
here so all the other messages are not

528
00:21:01,320 --> 00:21:06,810
entirely relevant if you just want to

529
00:21:03,540 --> 00:21:09,480
know if a service going to be or not so

530
00:21:06,810 --> 00:21:10,590
when we went to scanning by Alexa top 1

531
00:21:09,480 --> 00:21:12,540
million s with exactly this

532
00:21:10,590 --> 00:21:17,879
configuration so all the cipher suits

533
00:21:12,540 --> 00:21:19,620
two sets of versions and these four

534
00:21:17,880 --> 00:21:21,360
former four messages and look at those

535
00:21:19,620 --> 00:21:22,560
results so the Stoker's referee is

536
00:21:21,360 --> 00:21:23,100
seventy-two hours with all the

537
00:21:22,560 --> 00:21:25,710
rescanning

538
00:21:23,100 --> 00:21:27,659
and roughly is 78 percent of a service

539
00:21:25,710 --> 00:21:30,210
responded on part for for free so I

540
00:21:27,660 --> 00:21:32,220
wanted to speak TS with us and from both

541
00:21:30,210 --> 00:21:34,110
service at at least one point eight

542
00:21:32,220 --> 00:21:36,060
three percent are considered boondoggle

543
00:21:34,110 --> 00:21:39,689
path so they responded identically to

544
00:21:36,060 --> 00:21:41,310
free risk ends the same and there were

545
00:21:39,690 --> 00:21:44,780
no beyond all three of them in the exact

546
00:21:41,310 --> 00:21:48,770
same way and this is quite a lot for

547
00:21:44,780 --> 00:21:51,960
2018 2019 so 17 year old who nobility

548
00:21:48,770 --> 00:21:53,040
so what we ask ourself is how many

549
00:21:51,960 --> 00:21:54,690
actually different winnable

550
00:21:53,040 --> 00:21:57,510
implementations did we it so this is all

551
00:21:54,690 --> 00:21:59,040
just one vulnerable implementation I've

552
00:21:57,510 --> 00:22:01,650
actually multiple implementations at

553
00:21:59,040 --> 00:22:03,629
work so what we've ended is we think I

554
00:22:01,650 --> 00:22:06,390
printed all the vulnerable service and

555
00:22:03,630 --> 00:22:08,520
away with where we send over 25 ml for

556
00:22:06,390 --> 00:22:10,020
messages and creates some sort of

557
00:22:08,520 --> 00:22:13,530
fingerprint which we could use to

558
00:22:10,020 --> 00:22:15,240
compare with vulnerabilities so miss

559
00:22:13,530 --> 00:22:16,500
fingerprints look like this so for in

560
00:22:15,240 --> 00:22:18,360
this example on the left side you can

561
00:22:16,500 --> 00:22:19,600
see the message we send and then right

562
00:22:18,360 --> 00:22:21,219
side you can see response

563
00:22:19,600 --> 00:22:23,500
from service so in this case I'd

564
00:22:21,220 --> 00:22:26,620
responded with a bad record Mac and TCP

565
00:22:23,500 --> 00:22:28,179
thin and if you add all the other

566
00:22:26,620 --> 00:22:30,459
messages you suddenly get something like

567
00:22:28,179 --> 00:22:32,169
this and you can see that the the

568
00:22:30,460 --> 00:22:33,970
servers actually vulnerable because it

569
00:22:32,169 --> 00:22:35,890
has a behavior different so it responds

570
00:22:33,970 --> 00:22:40,090
different to our metaphor messages so an

571
00:22:35,890 --> 00:22:43,059
attacker can observers also in this case

572
00:22:40,090 --> 00:22:45,610
with a record overflow so in total we

573
00:22:43,059 --> 00:22:47,530
found 93 different vulnerable

574
00:22:45,610 --> 00:22:49,570
fingerprints so if you assume that

575
00:22:47,530 --> 00:22:52,360
there's no possibility in implementation

576
00:22:49,570 --> 00:22:54,070
to change your fingerprint because why

577
00:22:52,360 --> 00:22:55,870
would there this means that we are

578
00:22:54,070 --> 00:22:57,639
likely 93 different vulnerable

579
00:22:55,870 --> 00:23:01,780
implementations deployed and well exit

580
00:22:57,640 --> 00:23:04,900
up 1 million so this was quite bad but

581
00:23:01,780 --> 00:23:07,330
we wanted to class abuse vulnerabilities

582
00:23:04,900 --> 00:23:10,510
even more so and we've discovered that

583
00:23:07,330 --> 00:23:12,399
some servers are not vulnerable in the

584
00:23:10,510 --> 00:23:14,110
same way even all if they have the same

585
00:23:12,400 --> 00:23:16,179
vulnerable fingerprint so in this

586
00:23:14,110 --> 00:23:17,678
example all the servers have the same

587
00:23:16,179 --> 00:23:19,360
vulnerability fingerprint so they all

588
00:23:17,679 --> 00:23:22,120
respond to the same ad for messages in

589
00:23:19,360 --> 00:23:24,340
the exactly the same way but we are not

590
00:23:22,120 --> 00:23:27,010
vulnerable on all the cyber suits of ver

591
00:23:24,340 --> 00:23:30,129
support in this example server a is only

592
00:23:27,010 --> 00:23:32,559
one of them on a AES 256 cbc sha and

593
00:23:30,130 --> 00:23:35,140
this is not gonna be on Kripa des but it

594
00:23:32,559 --> 00:23:37,539
supports Triple DES so ABI is one a bit

595
00:23:35,140 --> 00:23:41,230
on both side for suits and service e is

596
00:23:37,539 --> 00:23:42,760
only one a bit on a as 256 but it does

597
00:23:41,230 --> 00:23:45,250
not support Triple DES so we could not

598
00:23:42,760 --> 00:23:47,260
test if he is one way a lot at all so

599
00:23:45,250 --> 00:23:49,720
what do we know from this so we know

600
00:23:47,260 --> 00:23:52,419
that Sarah a is clearly not server B

601
00:23:49,720 --> 00:23:54,100
because you cannot configure your Triple

602
00:23:52,419 --> 00:23:56,380
DES implementation to not be vulnerable

603
00:23:54,100 --> 00:23:59,408
so they are likely using a different

604
00:23:56,380 --> 00:24:02,289
implementation and we also know that a

605
00:23:59,409 --> 00:24:04,120
could be the same server server C and B

606
00:24:02,289 --> 00:24:07,480
could be the same service a obviously so

607
00:24:04,120 --> 00:24:09,189
they are not contradicting each other so

608
00:24:07,480 --> 00:24:12,100
what we did is to find if Marwan

609
00:24:09,190 --> 00:24:14,470
abilities is we ran some clustering so

610
00:24:12,100 --> 00:24:17,678
what we did is we draw some graph where

611
00:24:14,470 --> 00:24:19,600
each node in the graph is a server we

612
00:24:17,679 --> 00:24:21,940
scan for and when we drew an edge

613
00:24:19,600 --> 00:24:23,770
between these nodes if the server could

614
00:24:21,940 --> 00:24:26,110
be the same implementation so if they

615
00:24:23,770 --> 00:24:31,780
could not be no edge if it could be the

616
00:24:26,110 --> 00:24:33,370
same way odd Runet so then we ask

617
00:24:31,780 --> 00:24:35,710
ourselves ok there are quite a lot of

618
00:24:33,370 --> 00:24:38,050
how do you actually visualize this so to

619
00:24:35,710 --> 00:24:39,370
do this we used the GAVI software which

620
00:24:38,050 --> 00:24:41,260
is a graph software which you can

621
00:24:39,370 --> 00:24:43,840
manipulate large graphs and the faucet

622
00:24:41,260 --> 00:24:47,080
s2 algorithm the first at least two

623
00:24:43,840 --> 00:24:48,879
algorithm is a simulation based graph

624
00:24:47,080 --> 00:24:51,309
drawing algorithm so what it does is it

625
00:24:48,880 --> 00:24:54,970
runs some sort of physical simulation

626
00:24:51,309 --> 00:24:55,629
where each nodes in general we pass each

627
00:24:54,970 --> 00:24:57,730
other

628
00:24:55,630 --> 00:25:01,030
why edges force minutes to attract each

629
00:24:57,730 --> 00:25:02,980
other and when it's just mmm that's the

630
00:25:01,030 --> 00:25:05,410
way it's run out and there's some

631
00:25:02,980 --> 00:25:08,230
distribution and this is what I'm

632
00:25:05,410 --> 00:25:11,920
actually going to show you now how this

633
00:25:08,230 --> 00:25:15,309
looks like so this is a giffy software

634
00:25:11,920 --> 00:25:17,860
and here is our graph and as you can see

635
00:25:15,309 --> 00:25:20,260
you can see not a lot because there are

636
00:25:17,860 --> 00:25:21,850
a lot of edges and a lot of nodes but

637
00:25:20,260 --> 00:25:24,190
you can actually pull them aside so

638
00:25:21,850 --> 00:25:26,949
you'll get an idea of how many edges

639
00:25:24,190 --> 00:25:28,929
where huh and what I want to do now is I

640
00:25:26,950 --> 00:25:30,670
want to color these nodes so that we can

641
00:25:28,929 --> 00:25:32,350
actually seek a little bit more and what

642
00:25:30,670 --> 00:25:35,290
I'm going to do is I'm going to color

643
00:25:32,350 --> 00:25:37,928
this notes based on very grease so based

644
00:25:35,290 --> 00:25:39,370
on the number of edges so all the nodes

645
00:25:37,929 --> 00:25:42,160
which have the same number of edges get

646
00:25:39,370 --> 00:25:45,550
the same color and I can do this like

647
00:25:42,160 --> 00:25:47,500
this and suddenly you can still seen not

648
00:25:45,550 --> 00:25:49,780
quite a lot but a little bit more and

649
00:25:47,500 --> 00:25:51,550
but now you can run the force at least

650
00:25:49,780 --> 00:25:53,470
two algorithm and I'm actually going to

651
00:25:51,550 --> 00:25:58,120
run it slow motion because it looks

652
00:25:53,470 --> 00:25:59,440
quite cool if you do this but it will

653
00:25:58,120 --> 00:26:03,270
actually cluster with vulnerabilities

654
00:25:59,440 --> 00:26:03,270
for us so I'm going to start this now

655
00:26:03,630 --> 00:26:07,690
and you get something like this so as

656
00:26:06,460 --> 00:26:10,600
you can see this is a physical

657
00:26:07,690 --> 00:26:13,030
simulation sort of so you can see this

658
00:26:10,600 --> 00:26:15,909
is a movement so it will never stop - we

659
00:26:13,030 --> 00:26:18,550
get around but what we can actually see

660
00:26:15,910 --> 00:26:21,160
is that there are at least two big

661
00:26:18,550 --> 00:26:22,690
groups of servers and I'm going to

662
00:26:21,160 --> 00:26:30,190
analyze me now on the slides back again

663
00:26:22,690 --> 00:26:32,050
so okay so this is basically our example

664
00:26:30,190 --> 00:26:35,080
I just rotated in shows different colors

665
00:26:32,050 --> 00:26:37,030
and what you can see is that the top

666
00:26:35,080 --> 00:26:38,800
group so the green group is actually the

667
00:26:37,030 --> 00:26:41,860
ones which is gonna be on both sides

668
00:26:38,800 --> 00:26:43,510
while the tier group between the two

669
00:26:41,860 --> 00:26:45,520
bigger groups the ones which are only

670
00:26:43,510 --> 00:26:46,740
gonna be on Triple DES so there could be

671
00:26:45,520 --> 00:26:48,960
an eva group so

672
00:26:46,740 --> 00:26:51,360
either the green group of a perfect

673
00:26:48,960 --> 00:26:54,210
group so we have edges of both so we are

674
00:26:51,360 --> 00:26:59,340
torn apart by was larger groups and the

675
00:26:54,210 --> 00:27:01,080
group below is not fun we're on AES it's

676
00:26:59,340 --> 00:27:02,820
only one of you on Triple DES so it it

677
00:27:01,080 --> 00:27:05,370
clearly is not the same implementation

678
00:27:02,820 --> 00:27:07,559
as between group but but it could be the

679
00:27:05,370 --> 00:27:09,809
same as for ta group and also vest for

680
00:27:07,559 --> 00:27:12,570
one some service in red you and at the

681
00:27:09,809 --> 00:27:13,678
bottom you can see so they are red

682
00:27:12,570 --> 00:27:16,919
because they have a different degree

683
00:27:13,679 --> 00:27:18,740
because I do not share edges with the

684
00:27:16,920 --> 00:27:21,320
tier group so they are very likely

685
00:27:18,740 --> 00:27:25,650
purple but they are very likely not here

686
00:27:21,320 --> 00:27:27,510
so you can use this information now to

687
00:27:25,650 --> 00:27:30,270
pick the biggest sides of each group and

688
00:27:27,510 --> 00:27:31,800
to contact the vendor to try to ask them

689
00:27:30,270 --> 00:27:33,950
politely if I tell you which

690
00:27:31,800 --> 00:27:37,470
implementation is responsible for this

691
00:27:33,950 --> 00:27:43,679
so now let me talk quickly about exploit

692
00:27:37,470 --> 00:27:44,940
abilities so a big factor of if you are

693
00:27:43,679 --> 00:27:46,679
actually vulnerable to this attack

694
00:27:44,940 --> 00:27:51,000
tonight it's actually portable in fact

695
00:27:46,679 --> 00:27:52,830
if it's observable so this is an example

696
00:27:51,000 --> 00:27:54,750
of a vulnerable service or sometimes

697
00:27:52,830 --> 00:27:57,059
response with a bad record Mac sometimes

698
00:27:54,750 --> 00:28:00,390
responds with record overflow but in

699
00:27:57,059 --> 00:28:01,678
tears in general was allowed messages we

700
00:28:00,390 --> 00:28:03,870
during the scanning process we have four

701
00:28:01,679 --> 00:28:05,640
keys for a false message er so we can

702
00:28:03,870 --> 00:28:07,139
decrypt them but not during the

703
00:28:05,640 --> 00:28:08,730
exploitation phase so if you had four

704
00:28:07,140 --> 00:28:11,700
keys we could also decrypt the message

705
00:28:08,730 --> 00:28:13,230
so we have to see this difference

706
00:28:11,700 --> 00:28:14,820
without having the keys so what we

707
00:28:13,230 --> 00:28:16,950
actually see is we see two encrypted

708
00:28:14,820 --> 00:28:19,290
alerts and we as an attacker I have to

709
00:28:16,950 --> 00:28:24,450
differentiate them so it's not trivial

710
00:28:19,290 --> 00:28:25,830
in some cases but in other cases we

711
00:28:24,450 --> 00:28:27,990
actually get some side-channel for

712
00:28:25,830 --> 00:28:29,639
example this case we get a two encrypted

713
00:28:27,990 --> 00:28:33,030
alerts in both cases but sometimes we

714
00:28:29,640 --> 00:28:35,520
get in a TCP fin and sometimes we get

715
00:28:33,030 --> 00:28:37,500
none so in this case it's clearly from

716
00:28:35,520 --> 00:28:39,360
the attacker you can just skin and look

717
00:28:37,500 --> 00:28:41,670
at the behavior of a server and then he

718
00:28:39,360 --> 00:28:45,149
knows if he receives a fin the pairing

719
00:28:41,670 --> 00:28:48,050
was what was a record overflow and then

720
00:28:45,150 --> 00:28:51,030
we have a case it was a better economic

721
00:28:48,050 --> 00:28:53,669
so this can be exploited by an attacker

722
00:28:51,030 --> 00:28:54,750
so this is observable we call this and

723
00:28:53,670 --> 00:28:56,520
we are other cases where you have

724
00:28:54,750 --> 00:28:58,410
something like this so sometimes you get

725
00:28:56,520 --> 00:29:00,340
only one alert or two alerts this is

726
00:28:58,410 --> 00:29:03,340
also clearly observed by by and

727
00:29:00,340 --> 00:29:06,699
he does not need imperfect side channels

728
00:29:03,340 --> 00:29:09,250
to deduce if the pairing was very minute

729
00:29:06,700 --> 00:29:10,779
he can directly see this so if you open

730
00:29:09,250 --> 00:29:13,419
Wireshark you can also see this so

731
00:29:10,779 --> 00:29:14,970
there's no no sub nanosecond side

732
00:29:13,419 --> 00:29:18,250
channel or something

733
00:29:14,970 --> 00:29:19,929
so and then we classified our pairing

734
00:29:18,250 --> 00:29:22,779
orchids in different groups namely weak

735
00:29:19,929 --> 00:29:25,210
strong and pure Oracle's so the cooler

736
00:29:22,779 --> 00:29:27,510
occurs usually do not check all the

737
00:29:25,210 --> 00:29:30,100
padding bytes of metaphor messages and

738
00:29:27,510 --> 00:29:31,510
but they still require invalid H mix so

739
00:29:30,100 --> 00:29:33,370
if you would want to exploit them you

740
00:29:31,510 --> 00:29:35,110
would need to run some Poulos style

741
00:29:33,370 --> 00:29:36,699
attack so it's always the first a little

742
00:29:35,110 --> 00:29:38,830
bit depending on the exact vulnerability

743
00:29:36,700 --> 00:29:41,799
but with your general attack strategy

744
00:29:38,830 --> 00:29:43,809
here and they are definitely exploitable

745
00:29:41,799 --> 00:29:46,840
because the Pula auric attack actually

746
00:29:43,809 --> 00:29:50,559
works so this is definitely true and

747
00:29:46,840 --> 00:29:53,260
when we as strong or occurred so this

748
00:29:50,559 --> 00:29:54,820
can be exploited with a classic padding

749
00:29:53,260 --> 00:29:58,059
our case you would see it in a textbook

750
00:29:54,820 --> 00:29:59,860
so there's no not much magic here but

751
00:29:58,059 --> 00:30:02,470
when we as with weak or records and the

752
00:29:59,860 --> 00:30:04,990
weak orchids oftentimes require more

753
00:30:02,470 --> 00:30:07,090
than one block of padding to be to show

754
00:30:04,990 --> 00:30:09,010
this behavior difference and if you want

755
00:30:07,090 --> 00:30:11,110
to exploit this was can get quite

756
00:30:09,010 --> 00:30:13,270
problematic as I want to show you now so

757
00:30:11,110 --> 00:30:15,189
when I showed you was graphic where

758
00:30:13,270 --> 00:30:16,960
shorty Burton TECA can introduce bit

759
00:30:15,190 --> 00:30:19,240
flips I actually lied it quite a little

760
00:30:16,960 --> 00:30:22,419
bit so maybe I've seen it because Ivan

761
00:30:19,240 --> 00:30:25,419
Chekhov flips a bit in c1 he also flips

762
00:30:22,419 --> 00:30:27,190
the plain text of message and one to

763
00:30:25,419 --> 00:30:29,380
something completely random which you

764
00:30:27,190 --> 00:30:32,309
cannot control and this makes it quite

765
00:30:29,380 --> 00:30:33,789
hard for the attacker to construct all

766
00:30:32,309 --> 00:30:37,110
arbitrary

767
00:30:33,789 --> 00:30:41,679
metaphor messages from an HTTP request

768
00:30:37,110 --> 00:30:44,020
so and this is just one example so

769
00:30:41,679 --> 00:30:45,490
sometimes Atika is limited in a way to

770
00:30:44,020 --> 00:30:47,889
create first method for messages which

771
00:30:45,490 --> 00:30:50,350
create and sure we behavior difference

772
00:30:47,890 --> 00:30:52,120
so we call this our weeks or records and

773
00:30:50,350 --> 00:30:54,059
we consider them not exploitable because

774
00:30:52,120 --> 00:30:57,129
we oftentimes allow you only to reduce

775
00:30:54,059 --> 00:31:01,389
to decrypt one block of plaintext or

776
00:30:57,130 --> 00:31:03,490
something and not consecutive blocks so

777
00:31:01,390 --> 00:31:05,500
in total we consider a server to be a

778
00:31:03,490 --> 00:31:07,330
pairing Oracle to be exploited but it's

779
00:31:05,500 --> 00:31:09,220
either a poodle or strong or occur and

780
00:31:07,330 --> 00:31:11,408
it is observable so in the checker does

781
00:31:09,220 --> 00:31:12,160
not need any additional side channels or

782
00:31:11,409 --> 00:31:15,039
tricks

783
00:31:12,160 --> 00:31:17,860
to see the behavior difference and from

784
00:31:15,039 --> 00:31:19,900
our scanning which could show that 61.4%

785
00:31:17,860 --> 00:31:24,610
of honorable service actually observable

786
00:31:19,900 --> 00:31:26,289
so most of them and in total 57 57

787
00:31:24,610 --> 00:31:28,689
percent of a wannabes hosts are

788
00:31:26,289 --> 00:31:31,870
practically exploitable so they are born

789
00:31:28,690 --> 00:31:37,419
Eva a poodle Erica or strong Erica and

790
00:31:31,870 --> 00:31:41,350
they are also observable so let me go to

791
00:31:37,419 --> 00:31:45,820
our findings now so we found quite a few

792
00:31:41,350 --> 00:31:49,270
CVE so we found a biomass citrix a five

793
00:31:45,820 --> 00:31:51,280
SonicWALL Erica and we could not

794
00:31:49,270 --> 00:31:53,860
atribute all our vulnerabilities so we

795
00:31:51,280 --> 00:31:55,299
and politely asked the website owners if

796
00:31:53,860 --> 00:31:57,340
they could tell us which implementations

797
00:31:55,299 --> 00:31:59,289
they used but sometimes told us

798
00:31:57,340 --> 00:32:02,289
sometimes we didn't and then we

799
00:31:59,289 --> 00:32:03,460
cooperate with the vendors to actually

800
00:32:02,289 --> 00:32:05,590
fix we're gonna get a fix for

801
00:32:03,460 --> 00:32:07,360
vulnerability and the most prominent one

802
00:32:05,590 --> 00:32:11,080
is here the optimus-sir vulnerability

803
00:32:07,360 --> 00:32:15,580
and it was actually found with the help

804
00:32:11,080 --> 00:32:17,439
of an Amazon security team and this one

805
00:32:15,580 --> 00:32:19,600
which is very special because we

806
00:32:17,440 --> 00:32:22,570
obviously scanned Optimus before in a

807
00:32:19,600 --> 00:32:24,340
lab setting so we actually checked and

808
00:32:22,570 --> 00:32:26,110
it was not verbal because there's an

809
00:32:24,340 --> 00:32:28,928
example application with openness which

810
00:32:26,110 --> 00:32:31,270
we tested and everything was fine so we

811
00:32:28,929 --> 00:32:32,980
were quite surprised when Amazon told us

812
00:32:31,270 --> 00:32:37,150
whether this is actually openness which

813
00:32:32,980 --> 00:32:41,020
was winnable and for problem is that

814
00:32:37,150 --> 00:32:45,120
openness responds differently if you use

815
00:32:41,020 --> 00:32:48,460
the API in a certain unintended way so

816
00:32:45,120 --> 00:32:51,070
and this is how we saw the openness when

817
00:32:48,460 --> 00:32:53,500
ability so you may you may be able to

818
00:32:51,070 --> 00:32:54,879
spot for vulnerabilities so as you can

819
00:32:53,500 --> 00:32:57,100
see the response from the service

820
00:32:54,880 --> 00:32:59,110
whereas the TCP finished message missing

821
00:32:57,100 --> 00:33:02,199
and the messages which do not contain

822
00:32:59,110 --> 00:33:04,330
application data but to contain valid

823
00:33:02,200 --> 00:33:09,340
padding but an invalid hmx so supporter

824
00:33:04,330 --> 00:33:10,780
stability and this is quite bad but

825
00:33:09,340 --> 00:33:12,250
there might be other vulnerabilities

826
00:33:10,780 --> 00:33:13,809
which just showed to us differently

827
00:33:12,250 --> 00:33:15,880
because depending on the application

828
00:33:13,809 --> 00:33:17,500
they might respond a little bit

829
00:33:15,880 --> 00:33:20,710
differently but for general pattern is

830
00:33:17,500 --> 00:33:22,929
the same so during the disclosure

831
00:33:20,710 --> 00:33:23,700
process we notified the biggest sites

832
00:33:22,929 --> 00:33:25,220
and

833
00:33:23,700 --> 00:33:28,430
[Music]

834
00:33:25,220 --> 00:33:30,980
try to get those problems resolved and

835
00:33:28,430 --> 00:33:32,870
as you can see we were quite

836
00:33:30,980 --> 00:33:36,470
unsuccessful with that so from five

837
00:33:32,870 --> 00:33:39,520
reports we got to no response or we just

838
00:33:36,470 --> 00:33:42,680
didn't care and we have two x we get

839
00:33:39,520 --> 00:33:44,300
non-applicable which means you get

840
00:33:42,680 --> 00:33:46,910
negative points you should not bother

841
00:33:44,300 --> 00:33:49,120
them with such a text again and actually

842
00:33:46,910 --> 00:33:52,250
only one side

843
00:33:49,120 --> 00:33:53,629
fixed we're gonna be by disabling CBC

844
00:33:52,250 --> 00:33:56,900
cipher suits and they gave us seven

845
00:33:53,630 --> 00:34:00,830
points so and totally we got minnows -

846
00:33:56,900 --> 00:34:03,400
three points on hecka one so if you also

847
00:34:00,830 --> 00:34:06,409
want to get minus points on hecka one

848
00:34:03,400 --> 00:34:09,410
you can download our tool TSK now it's

849
00:34:06,410 --> 00:34:10,760
on github you can also check for padding

850
00:34:09,409 --> 00:34:12,199
Oracle universities and maybe you can

851
00:34:10,760 --> 00:34:13,610
help attribute forsworn abilities

852
00:34:12,199 --> 00:34:15,168
because we're certainly a lot of fun

853
00:34:13,610 --> 00:34:18,350
abilities which are not attributed yet

854
00:34:15,168 --> 00:34:20,449
and what I'm going to do now is I'm

855
00:34:18,350 --> 00:34:25,100
going to show you a demo office - so you

856
00:34:20,449 --> 00:34:27,620
get an idea how this looks like so yeah

857
00:34:25,100 --> 00:34:29,270
I have openness and an old one bit

858
00:34:27,620 --> 00:34:31,819
version so it's not formally we found

859
00:34:29,270 --> 00:34:34,520
but it works quite well in this demo and

860
00:34:31,820 --> 00:34:36,110
on the left side you can see our two TS

861
00:34:34,520 --> 00:34:39,020
kena and what I'm going to routes with

862
00:34:36,110 --> 00:34:40,940
in Java so excuse me but what you can do

863
00:34:39,020 --> 00:34:42,830
is to specify to which server you want

864
00:34:40,940 --> 00:34:45,860
to connect so I'm running localhost so

865
00:34:42,830 --> 00:34:48,110
I'm scanning that and when I say I want

866
00:34:45,860 --> 00:34:50,300
detailed report so we can actually look

867
00:34:48,110 --> 00:34:52,130
at the pairing or equipment ability so

868
00:34:50,300 --> 00:34:53,750
if I run with it we take some time

869
00:34:52,130 --> 00:34:56,300
because I'm running at in single

870
00:34:53,750 --> 00:34:57,770
threaded mode because I do not want to

871
00:34:56,300 --> 00:35:01,760
overwhelm the singer Fred openness

872
00:34:57,770 --> 00:35:03,860
server with requests and after some time

873
00:35:01,760 --> 00:35:06,110
we should get a report if service

874
00:35:03,860 --> 00:35:08,500
burnable or not so it's white some

875
00:35:06,110 --> 00:35:08,500
seconds

876
00:35:16,829 --> 00:35:21,029
it's quite a lot of handshake yes sir

877
00:35:44,110 --> 00:35:47,690
okay actually I'm thinking I'm not going

878
00:35:46,430 --> 00:35:49,910
to let it run to the end I think it

879
00:35:47,690 --> 00:35:52,400
takes like two minutes but I what I'm

880
00:35:49,910 --> 00:35:58,069
going to show you is this year so this

881
00:35:52,400 --> 00:36:00,860
is the finished report so so it gets a

882
00:35:58,070 --> 00:36:02,810
lot of noisy input because a lot of Safa

883
00:36:00,860 --> 00:36:04,520
suits so you can see basic information

884
00:36:02,810 --> 00:36:06,410
from which we like which cypher suits

885
00:36:04,520 --> 00:36:09,220
that support similar to our GS can ask

886
00:36:06,410 --> 00:36:11,569
and it also reports you about the

887
00:36:09,220 --> 00:36:13,069
vulnerable vulnerabilities to service

888
00:36:11,570 --> 00:36:14,930
and as you can see this one has a lot of

889
00:36:13,070 --> 00:36:17,390
vulnerabilities but for us the most

890
00:36:14,930 --> 00:36:18,710
interesting one is this here and it's

891
00:36:17,390 --> 00:36:21,350
one of the two padding our cuts that's

892
00:36:18,710 --> 00:36:22,880
true and what you can see is oh it could

893
00:36:21,350 --> 00:36:24,830
not identify which server this here was

894
00:36:22,880 --> 00:36:26,810
but I scanned and show you something

895
00:36:24,830 --> 00:36:29,330
like this so you can see the different

896
00:36:26,810 --> 00:36:31,040
cypher suits we scan for you can see the

897
00:36:29,330 --> 00:36:33,020
different version we scan for and you

898
00:36:31,040 --> 00:36:37,100
can see if we found a different behavior

899
00:36:33,020 --> 00:36:39,230
difference so in this case ours a EDR

900
00:36:37,100 --> 00:36:41,870
and CBC mode seems not to be vulnerable

901
00:36:39,230 --> 00:36:44,330
but if you look here and there's an a

902
00:36:41,870 --> 00:36:46,460
cypher suit and it's actually vulnerable

903
00:36:44,330 --> 00:36:48,680
because it says you can differentiate

904
00:36:46,460 --> 00:36:51,350
the alert message contents so it's

905
00:36:48,680 --> 00:36:53,720
vulnerable and what you can see below as

906
00:36:51,350 --> 00:36:56,990
we actually response fingerprint we got

907
00:36:53,720 --> 00:36:58,339
so on the left side there's graphics I

908
00:36:56,990 --> 00:37:00,140
showed you before encoded in some

909
00:36:58,340 --> 00:37:01,790
strings and on the right side you can

910
00:37:00,140 --> 00:37:04,430
see the actual responses so two most

911
00:37:01,790 --> 00:37:07,250
messages it responded with a bad record

912
00:37:04,430 --> 00:37:09,529
Mac alert and it's in the mecha alert

913
00:37:07,250 --> 00:37:12,260
was encrypted and then it closed the

914
00:37:09,530 --> 00:37:14,420
connection with the TCP fin but for

915
00:37:12,260 --> 00:37:17,570
these two records it's responded with

916
00:37:14,420 --> 00:37:20,090
record overflow and also closed book

917
00:37:17,570 --> 00:37:24,620
connection so it's not observable but

918
00:37:20,090 --> 00:37:27,890
it's definitely one of them okay I think

919
00:37:24,620 --> 00:37:33,319
we have time for another demo or I think

920
00:37:27,890 --> 00:37:35,660
I skipped it so so let me come now to

921
00:37:33,320 --> 00:37:38,300
our contributions in conclusion so we

922
00:37:35,660 --> 00:37:40,609
found 93 different vulnerabilities in

923
00:37:38,300 --> 00:37:42,890
Val X a top 1 million we will try to

924
00:37:40,610 --> 00:37:44,840
responsibly disclose our findings as

925
00:37:42,890 --> 00:37:47,690
good as possible to the affected vendors

926
00:37:44,840 --> 00:37:50,090
and websites and we released open source

927
00:37:47,690 --> 00:37:53,030
tools so that you can actually reproduce

928
00:37:50,090 --> 00:37:54,120
our research and find when abilities

929
00:37:53,030 --> 00:37:58,080
yourself

930
00:37:54,120 --> 00:37:59,490
so in conclusion I hopefully I convinced

931
00:37:58,080 --> 00:38:01,020
see that large gas cans can help to

932
00:37:59,490 --> 00:38:02,819
uncover new vulnerabilities which do not

933
00:38:01,020 --> 00:38:04,500
show in lab settings because actual

934
00:38:02,820 --> 00:38:07,650
service sometimes useful suffer in a

935
00:38:04,500 --> 00:38:10,320
different way and what I also want to

936
00:38:07,650 --> 00:38:13,260
emphasize is that CBC with an egg

937
00:38:10,320 --> 00:38:15,090
McMahon encrypt scheme is really really

938
00:38:13,260 --> 00:38:16,920
hard to implement correctly so it has to

939
00:38:15,090 --> 00:38:19,830
be side-channel free completely it has

940
00:38:16,920 --> 00:38:21,750
to be constant time is quite hard and so

941
00:38:19,830 --> 00:38:24,540
maybe it's time for us as a community to

942
00:38:21,750 --> 00:38:26,130
remove cbc support entirely from client

943
00:38:24,540 --> 00:38:36,240
software as well as from source software

944
00:38:26,130 --> 00:38:37,950
and in fact I'm ready for questions ok

945
00:38:36,240 --> 00:38:40,640
if you have any questions please come to

946
00:38:37,950 --> 00:38:46,439
the micro and maybe introduce yourself

947
00:38:40,640 --> 00:38:48,120
so I'm John Kelsey so I just wanted to

948
00:38:46,440 --> 00:38:51,180
ask you said that there were 93

949
00:38:48,120 --> 00:38:52,710
different fingerprints you found it's

950
00:38:51,180 --> 00:38:54,960
hard for me to imagine that there are

951
00:38:52,710 --> 00:38:57,990
really 93 entirely different

952
00:38:54,960 --> 00:38:59,640
implementations of TLS maybe that's just

953
00:38:57,990 --> 00:39:01,890
me being naive I'm a cryptographer I'm

954
00:38:59,640 --> 00:39:04,440
not a software guy but I was kind of

955
00:39:01,890 --> 00:39:06,390
wondering it it sounds like you found an

956
00:39:04,440 --> 00:39:08,450
instance where just the same toolkit was

957
00:39:06,390 --> 00:39:11,190
being used slightly different ways

958
00:39:08,450 --> 00:39:12,990
giving you like with open SSL I was

959
00:39:11,190 --> 00:39:14,700
wondering if you think that you where

960
00:39:12,990 --> 00:39:16,379
you think this large number comes from

961
00:39:14,700 --> 00:39:17,899
like could it be a hardware you know

962
00:39:16,380 --> 00:39:20,850
like I know sometimes you'll have

963
00:39:17,900 --> 00:39:21,960
assembly language implementations for

964
00:39:20,850 --> 00:39:23,009
different hardware that seems like

965
00:39:21,960 --> 00:39:26,670
that's a place we could get very

966
00:39:23,010 --> 00:39:28,980
different behavior yeah so I think most

967
00:39:26,670 --> 00:39:31,740
probably the reason for this is this

968
00:39:28,980 --> 00:39:34,800
long history of TS version so even if

969
00:39:31,740 --> 00:39:36,930
you run a now secure version and maybe

970
00:39:34,800 --> 00:39:38,340
you're an older version of that same one

971
00:39:36,930 --> 00:39:41,009
which is wonderful maybe one ability

972
00:39:38,340 --> 00:39:43,980
changed among different versions but the

973
00:39:41,010 --> 00:39:46,020
most thing I learned just recently is

974
00:39:43,980 --> 00:39:48,270
that there's some Venice which have most

975
00:39:46,020 --> 00:39:50,190
products in combination so they have

976
00:39:48,270 --> 00:39:51,900
some application firewall and some

977
00:39:50,190 --> 00:39:53,840
service and maybe both avoidable and

978
00:39:51,900 --> 00:39:57,510
varied you produce some weird

979
00:39:53,840 --> 00:40:00,240
combination of one of our nobility and

980
00:39:57,510 --> 00:40:02,820
this is why we sometimes see was those

981
00:40:00,240 --> 00:40:04,109
large numbers but if you would look at

982
00:40:02,820 --> 00:40:05,950
the distribution of our burner which is

983
00:40:04,110 --> 00:40:08,349
most of us at the same language

984
00:40:05,950 --> 00:40:09,970
like ten prominent ones or something and

985
00:40:08,349 --> 00:40:11,589
when there's a large number of women

986
00:40:09,970 --> 00:40:22,990
bishops which are only affected by force

987
00:40:11,589 --> 00:40:24,849
or something I don't have any question I

988
00:40:22,990 --> 00:40:27,000
just protect your mistake on one of the

989
00:40:24,849 --> 00:40:29,410
slight can you go to that results light

990
00:40:27,000 --> 00:40:31,690
excuse me can you can you speak up

991
00:40:29,410 --> 00:40:33,430
sorry I don't have questions but I just

992
00:40:31,690 --> 00:40:35,440
spotted a mistake in you at one of your

993
00:40:33,430 --> 00:40:39,430
flight can you go to the results like

994
00:40:35,440 --> 00:40:41,280
through which that result the narrating

995
00:40:39,430 --> 00:40:44,618
the results you are talking about right

996
00:40:41,280 --> 00:40:46,660
the previous one here the third one six

997
00:40:44,619 --> 00:40:50,280
four nine three is probably it's not a

998
00:40:46,660 --> 00:40:57,390
five CV I think it's six five nine three

999
00:40:50,280 --> 00:40:57,390
[Laughter]

1000
00:41:00,089 --> 00:41:03,279
okay

1001
00:41:01,270 --> 00:41:06,150
thank you very much I think we have to

1002
00:41:03,280 --> 00:41:06,150
correct it on our website

1003
00:41:06,299 --> 00:41:15,040
okay thank you please thank robot again

1004
00:41:09,580 --> 00:41:15,040
[Applause]

