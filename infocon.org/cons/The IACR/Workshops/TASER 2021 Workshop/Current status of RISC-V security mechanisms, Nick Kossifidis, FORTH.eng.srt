1
00:00:00,000 --> 00:00:01,360
thanks a lot

2
00:00:01,360 --> 00:00:03,679
welcome

3
00:00:03,679 --> 00:00:05,839
um

4
00:00:05,839 --> 00:00:07,600
so our fifth talk

5
00:00:07,600 --> 00:00:08,480
is

6
00:00:08,480 --> 00:00:09,280
by

7
00:00:09,280 --> 00:00:10,960
nick cosifidus

8
00:00:10,960 --> 00:00:13,440
nick's company research engineer at ics

9
00:00:13,440 --> 00:00:14,320
fourth

10
00:00:14,320 --> 00:00:17,119
and helena teed him up nicely i think to

11
00:00:17,119 --> 00:00:18,400
suggest that

12
00:00:18,400 --> 00:00:20,160
the topic is really

13
00:00:20,160 --> 00:00:21,760
um mainly to do with the trusted

14
00:00:21,760 --> 00:00:23,760
execution environment type work that's

15
00:00:23,760 --> 00:00:25,920
going on within risk fife

16
00:00:25,920 --> 00:00:28,640
i hope that's right

17
00:00:29,599 --> 00:00:31,840
yep hello uh let me share my screen

18
00:00:31,840 --> 00:00:34,480
[Music]

19
00:00:34,480 --> 00:00:37,200
okay can you see it now

20
00:00:37,200 --> 00:00:38,640
yes we can

21
00:00:38,640 --> 00:00:40,079
okay

22
00:00:40,079 --> 00:00:41,040
uh

23
00:00:41,040 --> 00:00:41,920
so

24
00:00:41,920 --> 00:00:42,879
um

25
00:00:42,879 --> 00:00:45,120
i'm nick i'm the chair of the transit

26
00:00:45,120 --> 00:00:47,440
execution environment task group

27
00:00:47,440 --> 00:00:48,320
and

28
00:00:48,320 --> 00:00:50,160
let's walk through what we currently

29
00:00:50,160 --> 00:00:52,160
have on risk 5 for memory safety to

30
00:00:52,160 --> 00:00:54,399
begin with so memory safety is a

31
00:00:54,399 --> 00:00:55,920
priority because in order to build

32
00:00:55,920 --> 00:00:56,879
anything

33
00:00:56,879 --> 00:00:59,120
we need memory isolation

34
00:00:59,120 --> 00:01:01,440
for secure boot for implementing other

35
00:01:01,440 --> 00:01:03,120
security mechanisms this is where we

36
00:01:03,120 --> 00:01:03,840
should

37
00:01:03,840 --> 00:01:05,519
this is

38
00:01:05,519 --> 00:01:07,520
what we need to have

39
00:01:07,520 --> 00:01:09,920
uh so

40
00:01:09,920 --> 00:01:12,560
uh helena gave you an overview before we

41
00:01:12,560 --> 00:01:13,920
have uh

42
00:01:13,920 --> 00:01:15,840
three privilege modes basically on risk

43
00:01:15,840 --> 00:01:18,400
5 we have machine mode which is the most

44
00:01:18,400 --> 00:01:19,759
privileged mode

45
00:01:19,759 --> 00:01:22,080
and there we only have physical memory

46
00:01:22,080 --> 00:01:24,000
addressing we do not have an mmu for

47
00:01:24,000 --> 00:01:25,600
machine mode and then we have the

48
00:01:25,600 --> 00:01:27,439
supervisor mode where the operating

49
00:01:27,439 --> 00:01:31,200
system leaves and manages an mmu

50
00:01:31,200 --> 00:01:33,680
and then we have the user mode where

51
00:01:33,680 --> 00:01:36,560
applications run so uh there's also

52
00:01:36,560 --> 00:01:38,560
hypervisor mode which is basically a

53
00:01:38,560 --> 00:01:41,680
more privileged uh in a more privileged

54
00:01:41,680 --> 00:01:44,000
instance of s mode so basically we have

55
00:01:44,000 --> 00:01:46,640
hs mode and vs mode hs mode is a

56
00:01:46,640 --> 00:01:48,000
hypervisor

57
00:01:48,000 --> 00:01:49,840
version of uh

58
00:01:49,840 --> 00:01:51,439
the previous version of the small that

59
00:01:51,439 --> 00:01:53,280
can manage other guests and the vs

60
00:01:53,280 --> 00:01:55,600
that's the virtualized s mode is where

61
00:01:55,600 --> 00:01:57,119
the guest would be

62
00:01:57,119 --> 00:01:59,840
uh and in order to do that on h mode we

63
00:01:59,840 --> 00:02:01,520
have the second level of translation

64
00:02:01,520 --> 00:02:03,600
which i'm going to go through later on

65
00:02:03,600 --> 00:02:05,360
so uh

66
00:02:05,360 --> 00:02:07,360
let's begin with

67
00:02:07,360 --> 00:02:09,280
when we are on m mode and we do not have

68
00:02:09,280 --> 00:02:12,560
an mmu there and we want to isolate the

69
00:02:12,560 --> 00:02:15,200
memory of uh m mode from the memory of

70
00:02:15,200 --> 00:02:18,239
uh the less less privilege mode such as

71
00:02:18,239 --> 00:02:19,680
s and u mode

72
00:02:19,680 --> 00:02:21,680
uh by default m mode can access

73
00:02:21,680 --> 00:02:23,040
everything

74
00:02:23,040 --> 00:02:24,080
and

75
00:02:24,080 --> 00:02:27,440
you can only restrict access to a mode

76
00:02:27,440 --> 00:02:30,319
using this mechanism we call physical

77
00:02:30,319 --> 00:02:31,760
memory protection

78
00:02:31,760 --> 00:02:34,400
and the moment you have and then a mode

79
00:02:34,400 --> 00:02:37,440
can allow access to s and you because by

80
00:02:37,440 --> 00:02:39,200
default the less privileged modes cannot

81
00:02:39,200 --> 00:02:40,959
access anything so

82
00:02:40,959 --> 00:02:42,400
when you would the system mode can

83
00:02:42,400 --> 00:02:44,480
access all physical memory and snu they

84
00:02:44,480 --> 00:02:46,720
cannot access anything so m mode should

85
00:02:46,720 --> 00:02:48,480
go there and configure

86
00:02:48,480 --> 00:02:52,879
um a set of areas where the s mode and

87
00:02:52,879 --> 00:02:55,120
iu mode can access

88
00:02:55,120 --> 00:02:57,760
uh so this is the kind of isolation we

89
00:02:57,760 --> 00:03:00,319
have right now mode can allow

90
00:03:00,319 --> 00:03:02,720
access to smu mode that can restrict

91
00:03:02,720 --> 00:03:05,120
access to everybody

92
00:03:05,120 --> 00:03:06,640
uh we cannot

93
00:03:06,640 --> 00:03:08,879
restrict access only to you mode and

94
00:03:08,879 --> 00:03:11,440
allow access to snu mode this is what we

95
00:03:11,440 --> 00:03:12,720
are trying to accomplish with an

96
00:03:12,720 --> 00:03:15,200
extension of pmp we are working on

97
00:03:15,200 --> 00:03:17,360
so pnp you can think of it as a firewall

98
00:03:17,360 --> 00:03:19,280
basically you have a request coming up

99
00:03:19,280 --> 00:03:21,599
for a specific address and then it goes

100
00:03:21,599 --> 00:03:22,640
through a

101
00:03:22,640 --> 00:03:25,120
roots ruleset

102
00:03:25,120 --> 00:03:26,560
where you basically have a set of

103
00:03:26,560 --> 00:03:29,360
registers describing memory regions

104
00:03:29,360 --> 00:03:31,920
and from lower to higher priority those

105
00:03:31,920 --> 00:03:33,120
uh

106
00:03:33,120 --> 00:03:34,879
those registers are being checked for

107
00:03:34,879 --> 00:03:36,879
the address you just requested so you

108
00:03:36,879 --> 00:03:39,120
can protect you can have read write and

109
00:03:39,120 --> 00:03:40,879
execute permissions for different memory

110
00:03:40,879 --> 00:03:43,040
regions physical memory regions

111
00:03:43,040 --> 00:03:45,040
and your typical use would be that the m

112
00:03:45,040 --> 00:03:47,280
mode the firmware on the mode would put

113
00:03:47,280 --> 00:03:50,480
and would allow the whole i would

114
00:03:50,480 --> 00:03:52,879
allow s mode to have read write execute

115
00:03:52,879 --> 00:03:54,720
permission on the memory it's going to

116
00:03:54,720 --> 00:03:56,959
use and then s mode would come and use

117
00:03:56,959 --> 00:03:58,080
mmu

118
00:03:58,080 --> 00:04:00,879
and virtual memory to further restrict

119
00:04:00,879 --> 00:04:03,840
access to itself and the applications

120
00:04:03,840 --> 00:04:05,200
that

121
00:04:05,200 --> 00:04:06,480
are managed that are running on the

122
00:04:06,480 --> 00:04:07,840
system so

123
00:04:07,840 --> 00:04:09,519
um

124
00:04:09,519 --> 00:04:11,040
we have various addressing modes for

125
00:04:11,040 --> 00:04:12,799
physical memory protection we can go

126
00:04:12,799 --> 00:04:15,280
down to four byte regions using the

127
00:04:15,280 --> 00:04:17,759
natural line powered of two uh

128
00:04:17,759 --> 00:04:20,238
addressing scheme and you can have uh

129
00:04:20,238 --> 00:04:22,800
more fine more uh don't have larger

130
00:04:22,800 --> 00:04:25,520
regions and you can also have uh use two

131
00:04:25,520 --> 00:04:28,720
registers to define memory range

132
00:04:28,720 --> 00:04:30,639
you can have one register to define the

133
00:04:30,639 --> 00:04:32,240
beginning of the range and another to

134
00:04:32,240 --> 00:04:34,400
begin to define the end so we have a

135
00:04:34,400 --> 00:04:37,680
very flexible way of describing uh the

136
00:04:37,680 --> 00:04:41,199
memory regions that pmp can use

137
00:04:41,199 --> 00:04:42,160
uh

138
00:04:42,160 --> 00:04:44,160
but that's what i want to to notice at

139
00:04:44,160 --> 00:04:46,240
this point is that we can either have a

140
00:04:46,240 --> 00:04:47,120
rule

141
00:04:47,120 --> 00:04:48,800
for allowing

142
00:04:48,800 --> 00:04:51,120
access to s mode or a rule to block

143
00:04:51,120 --> 00:04:54,720
access to everyone including a mode

144
00:04:54,720 --> 00:04:56,639
so that's what we currently have this is

145
00:04:56,639 --> 00:04:58,400
on privilege spec uh the current

146
00:04:58,400 --> 00:05:00,320
privilege spec it's ratified so you can

147
00:05:00,320 --> 00:05:02,479
use this various projects use this for

148
00:05:02,479 --> 00:05:05,199
uh providing te for providing uh

149
00:05:05,199 --> 00:05:07,919
isolation from the firmware from so that

150
00:05:07,919 --> 00:05:10,400
s and you cannot access the memory of

151
00:05:10,400 --> 00:05:12,720
the firmware

152
00:05:12,720 --> 00:05:13,840
and

153
00:05:13,840 --> 00:05:16,000
isolate different

154
00:05:16,000 --> 00:05:17,199
regions

155
00:05:17,199 --> 00:05:19,199
on while on my firmware you can

156
00:05:19,199 --> 00:05:21,120
basically restrict access from less

157
00:05:21,120 --> 00:05:22,400
privilege modes

158
00:05:22,400 --> 00:05:24,639
to they cannot map for example physical

159
00:05:24,639 --> 00:05:26,479
memory though so if you have a memory

160
00:05:26,479 --> 00:05:28,720
region that's blocked from um

161
00:05:28,720 --> 00:05:30,720
using pmp the

162
00:05:30,720 --> 00:05:32,240
s small the operating system cannot

163
00:05:32,240 --> 00:05:34,320
create a mapping for that virtual for

164
00:05:34,320 --> 00:05:35,919
that physical region if it creates a

165
00:05:35,919 --> 00:05:38,240
mapping and someone tries to access this

166
00:05:38,240 --> 00:05:40,960
region it will get default

167
00:05:40,960 --> 00:05:43,039
so virtual memory is what we have on s

168
00:05:43,039 --> 00:05:45,520
mode where so what we are now we are now

169
00:05:45,520 --> 00:05:46,639
in the operating system and the

170
00:05:46,639 --> 00:05:48,720
operating system as a page table

171
00:05:48,720 --> 00:05:50,720
and we have uh

172
00:05:50,720 --> 00:05:52,800
and this is used the page table is

173
00:05:52,800 --> 00:05:55,039
used to isolate uh basically

174
00:05:55,039 --> 00:05:56,479
applications from each other and from

175
00:05:56,479 --> 00:05:59,199
the operating system to distinguish uh

176
00:05:59,199 --> 00:06:01,120
pages that belong to the user to the

177
00:06:01,120 --> 00:06:02,720
application from

178
00:06:02,720 --> 00:06:04,319
pages that belong to the operating

179
00:06:04,319 --> 00:06:06,720
system we have the u-bit on the page

180
00:06:06,720 --> 00:06:10,240
table entries and by default

181
00:06:10,240 --> 00:06:12,400
the operating system the s mode cannot

182
00:06:12,400 --> 00:06:14,800
access cannot execute

183
00:06:14,800 --> 00:06:16,479
pages that belong to the user this is

184
00:06:16,479 --> 00:06:18,240
always in place you cannot disable this

185
00:06:18,240 --> 00:06:21,759
behavior in s mode can ever can never

186
00:06:21,759 --> 00:06:24,800
execute pages that belong to the user so

187
00:06:24,800 --> 00:06:27,440
we have the supervisor memory execution

188
00:06:27,440 --> 00:06:30,000
prevention always in place we also have

189
00:06:30,000 --> 00:06:31,919
supervisor memory access prevention in

190
00:06:31,919 --> 00:06:34,560
place meaning that by default s mode

191
00:06:34,560 --> 00:06:36,639
cannot access pages that belong to the

192
00:06:36,639 --> 00:06:39,759
user uh this also this

193
00:06:39,759 --> 00:06:42,240
enhances security because together with

194
00:06:42,240 --> 00:06:43,840
um

195
00:06:43,840 --> 00:06:45,600
so together with the execution

196
00:06:45,600 --> 00:06:48,400
prevention it blocks a certain some

197
00:06:48,400 --> 00:06:50,880
classes of exploits where uh

198
00:06:50,880 --> 00:06:55,280
attackers can place data or code on

199
00:06:55,280 --> 00:06:57,440
an application and then somehow trick

200
00:06:57,440 --> 00:06:59,520
the supervisor in executing and reading

201
00:06:59,520 --> 00:07:03,360
or reading those the data so um

202
00:07:03,360 --> 00:07:04,560
by default

203
00:07:04,560 --> 00:07:07,039
uh supervisor cannot access user memory

204
00:07:07,039 --> 00:07:09,680
but we have a way of disabling this for

205
00:07:09,680 --> 00:07:12,000
specific code paths when we want

206
00:07:12,000 --> 00:07:13,199
uh

207
00:07:13,199 --> 00:07:14,880
when we are in the kernel and we want to

208
00:07:14,880 --> 00:07:17,280
read data from the user in the normal

209
00:07:17,280 --> 00:07:19,840
code path and we can disable for a

210
00:07:19,840 --> 00:07:22,000
specific for specific

211
00:07:22,000 --> 00:07:24,160
code segment and then enable back

212
00:07:24,160 --> 00:07:28,000
so it's basically there to prevent

213
00:07:28,000 --> 00:07:30,720
buggy or let's say uh

214
00:07:30,720 --> 00:07:33,039
it's the we are we're trying to uh

215
00:07:33,039 --> 00:07:35,039
reduce the attack surface there it's not

216
00:07:35,039 --> 00:07:37,680
uh it won't solve the bug i mean if you

217
00:07:37,680 --> 00:07:39,680
if the kernel is compromised you can

218
00:07:39,680 --> 00:07:40,639
obviously

219
00:07:40,639 --> 00:07:42,160
tamper with the page table and do

220
00:07:42,160 --> 00:07:44,240
whatever you want but these measures are

221
00:07:44,240 --> 00:07:45,759
there to prevent due to reduce the

222
00:07:45,759 --> 00:07:47,520
attack surface now also as i mentioned

223
00:07:47,520 --> 00:07:49,520
we also have the hypervisor mode which

224
00:07:49,520 --> 00:07:51,680
is the another instance a more

225
00:07:51,680 --> 00:07:53,840
privileged instance of the

226
00:07:53,840 --> 00:07:55,759
of the supervisor mode so we have an

227
00:07:55,759 --> 00:07:58,400
operating system but can also

228
00:07:58,400 --> 00:08:00,800
create another page table which is the

229
00:08:00,800 --> 00:08:01,919
second

230
00:08:01,919 --> 00:08:03,840
uh it's the second stage of translation

231
00:08:03,840 --> 00:08:05,840
for guests so each guest

232
00:08:05,840 --> 00:08:08,560
can see can have its own page table and

233
00:08:08,560 --> 00:08:10,319
on top of that and we have a second

234
00:08:10,319 --> 00:08:12,960
translation stage where you can

235
00:08:12,960 --> 00:08:15,199
show when we can display a different

236
00:08:15,199 --> 00:08:17,440
view of the physical memory to the guest

237
00:08:17,440 --> 00:08:19,440
so this way you can isolate guests from

238
00:08:19,440 --> 00:08:20,560
each other

239
00:08:20,560 --> 00:08:22,319
so if a guest

240
00:08:22,319 --> 00:08:25,120
can a guest will not be able to map the

241
00:08:25,120 --> 00:08:27,199
physical memory of the host or of

242
00:08:27,199 --> 00:08:28,479
another

243
00:08:28,479 --> 00:08:30,560
guest

244
00:08:30,560 --> 00:08:33,200
so um the hypervisor extension is not

245
00:08:33,200 --> 00:08:35,760
there yet but virtual memory is there so

246
00:08:35,760 --> 00:08:37,919
this is mostly uh we mostly have this

247
00:08:37,919 --> 00:08:40,240
right now in the previous spec the part

248
00:08:40,240 --> 00:08:42,320
where about the second stage of

249
00:08:42,320 --> 00:08:44,320
translation is part of the hypervisor

250
00:08:44,320 --> 00:08:45,120
spec

251
00:08:45,120 --> 00:08:47,519
and we are looking for ratifying this at

252
00:08:47,519 --> 00:08:49,519
the end of the year

253
00:08:49,519 --> 00:08:51,600
so um

254
00:08:51,600 --> 00:08:53,519
as i mentioned we have this we have this

255
00:08:53,519 --> 00:08:56,320
issue with pmp that we are not able to

256
00:08:56,320 --> 00:08:58,480
we can either block access to everybody

257
00:08:58,480 --> 00:09:01,360
or allow access to smu mode we do not

258
00:09:01,360 --> 00:09:03,920
have a way of blocking access only to

259
00:09:03,920 --> 00:09:06,480
machine mode or for allowing access

260
00:09:06,480 --> 00:09:10,000
to or have a fine grain uh

261
00:09:10,000 --> 00:09:11,200
um

262
00:09:11,200 --> 00:09:13,040
to or be able to find more specific

263
00:09:13,040 --> 00:09:15,279
rules more flexible for only for machine

264
00:09:15,279 --> 00:09:17,040
mode and only for supervisor in user

265
00:09:17,040 --> 00:09:19,920
mode uh that's why we created the we

266
00:09:19,920 --> 00:09:21,600
started this enhanced physical memory

267
00:09:21,600 --> 00:09:23,839
protection mechanism

268
00:09:23,839 --> 00:09:25,680
and basically the first thing we want to

269
00:09:25,680 --> 00:09:27,760
do is to be able to define rules that

270
00:09:27,760 --> 00:09:29,680
apply only to m-mode so that we can

271
00:09:29,680 --> 00:09:32,240
create this the equivalent of memory

272
00:09:32,240 --> 00:09:33,839
access prevention and memory execution

273
00:09:33,839 --> 00:09:36,880
prevention to a mode the attack scenario

274
00:09:36,880 --> 00:09:39,519
here is that someone on s mode has

275
00:09:39,519 --> 00:09:40,480
placed

276
00:09:40,480 --> 00:09:43,440
code or data somewhere and in a way with

277
00:09:43,440 --> 00:09:45,279
through some bug on the firmware has

278
00:09:45,279 --> 00:09:47,040
tricked the firmware to execute this

279
00:09:47,040 --> 00:09:49,760
code or access this data

280
00:09:49,760 --> 00:09:50,800
so

281
00:09:50,800 --> 00:09:52,880
with the enhance so with the previews

282
00:09:52,880 --> 00:09:55,120
with a normal pnp we can only we can

283
00:09:55,120 --> 00:09:57,600
block access to uh and if we block

284
00:09:57,600 --> 00:09:59,440
access to mode we will block access to

285
00:09:59,440 --> 00:10:02,560
xmd mode as well so we're not able to

286
00:10:02,560 --> 00:10:05,279
limit us to to allow access to s mode

287
00:10:05,279 --> 00:10:07,680
and block it from a mode so that's what

288
00:10:07,680 --> 00:10:09,600
we started with that's that's the init

289
00:10:09,600 --> 00:10:12,079
that was the initial idea between epmp

290
00:10:12,079 --> 00:10:14,880
to be able to access to implement access

291
00:10:14,880 --> 00:10:16,800
and execution prevention from memo to

292
00:10:16,800 --> 00:10:19,600
snp mode and from that it evolved

293
00:10:19,600 --> 00:10:21,120
and

294
00:10:21,120 --> 00:10:22,160
we

295
00:10:22,160 --> 00:10:24,079
we added the concept of the concept of

296
00:10:24,079 --> 00:10:26,160
blacklist so as i mentioned before

297
00:10:26,160 --> 00:10:28,560
machine mode can access everything and

298
00:10:28,560 --> 00:10:31,120
by default and with this approach

299
00:10:31,120 --> 00:10:33,600
machine mode can access and can't access

300
00:10:33,600 --> 00:10:36,880
anything it can only uh access specific

301
00:10:36,880 --> 00:10:39,519
regions that are allowed by pnp so now

302
00:10:39,519 --> 00:10:42,720
uh instead so now pmp can be used as a

303
00:10:42,720 --> 00:10:44,640
white list for machine mode as well we

304
00:10:44,640 --> 00:10:46,320
can block access to everything and allow

305
00:10:46,320 --> 00:10:49,040
access to specific regions and we also

306
00:10:49,040 --> 00:10:51,279
have this flexibility because

307
00:10:51,279 --> 00:10:53,839
once m mode puts a rule on pnp it can

308
00:10:53,839 --> 00:10:56,399
obviously remove it so in order to avoid

309
00:10:56,399 --> 00:10:58,399
that the rules that apply on machine

310
00:10:58,399 --> 00:11:00,240
mode are locked so once you set the

311
00:11:00,240 --> 00:11:02,160
register you cannot

312
00:11:02,160 --> 00:11:04,720
tamper with a register or that with the

313
00:11:04,720 --> 00:11:06,160
register that says the permission or

314
00:11:06,160 --> 00:11:08,160
with the registers that set the address

315
00:11:08,160 --> 00:11:09,920
of the of the region

316
00:11:09,920 --> 00:11:11,680
um

317
00:11:11,680 --> 00:11:13,360
in order so once you set this rule

318
00:11:13,360 --> 00:11:14,640
cannot modify it this is a bit

319
00:11:14,640 --> 00:11:16,800
impractical during the during every boot

320
00:11:16,800 --> 00:11:18,640
because you'd want to still have

321
00:11:18,640 --> 00:11:20,640
protection but in order for example to

322
00:11:20,640 --> 00:11:22,160
catch bugs uh

323
00:11:22,160 --> 00:11:22,959
and

324
00:11:22,959 --> 00:11:24,800
but you will you want to be able to

325
00:11:24,800 --> 00:11:27,279
modify these rules until you reach the

326
00:11:27,279 --> 00:11:29,600
final stages of when you finish with the

327
00:11:29,600 --> 00:11:31,279
initialization of your firmware and

328
00:11:31,279 --> 00:11:32,800
you're ready to jump to the operating

329
00:11:32,800 --> 00:11:34,959
system so we have added some more

330
00:11:34,959 --> 00:11:36,480
flexibility there

331
00:11:36,480 --> 00:11:40,240
and to cover more cases and with this

332
00:11:40,240 --> 00:11:42,720
protection mechanism we are we are

333
00:11:42,720 --> 00:11:44,880
focusing on we are we're hoping to get

334
00:11:44,880 --> 00:11:45,920
more

335
00:11:45,920 --> 00:11:48,240
fine-grained uh security controls and

336
00:11:48,240 --> 00:11:50,480
more better uh control on more

337
00:11:50,480 --> 00:11:53,519
flexibility and cover more use cases for

338
00:11:53,519 --> 00:11:57,680
very small devices to very large devices

339
00:11:57,680 --> 00:12:00,240
i'm going to come back to this because

340
00:12:00,240 --> 00:12:02,959
when i mention small devices we had and

341
00:12:02,959 --> 00:12:05,680
now we have another extension on top of

342
00:12:05,680 --> 00:12:07,839
enhanced pnp for that

343
00:12:07,839 --> 00:12:10,560
so a memory protection unit this is to

344
00:12:10,560 --> 00:12:12,240
uh basically

345
00:12:12,240 --> 00:12:13,680
uh

346
00:12:13,680 --> 00:12:15,519
it's an alternative to virtual memory

347
00:12:15,519 --> 00:12:17,360
okay when you do not have

348
00:12:17,360 --> 00:12:20,000
you you will have s mode in this case

349
00:12:20,000 --> 00:12:21,680
but you do not want to use the mmu or

350
00:12:21,680 --> 00:12:23,680
you do not have an mmu this is a for

351
00:12:23,680 --> 00:12:26,079
example this happens on iot devices or

352
00:12:26,079 --> 00:12:28,880
very small devices or you may just want

353
00:12:28,880 --> 00:12:31,519
to have uh mpu only for the second stage

354
00:12:31,519 --> 00:12:33,279
of translation because you just want to

355
00:12:33,279 --> 00:12:35,360
isolate guests from each other and not

356
00:12:35,360 --> 00:12:37,519
have different present them with a

357
00:12:37,519 --> 00:12:38,959
different uh

358
00:12:38,959 --> 00:12:40,959
with a virtualized let's say physical

359
00:12:40,959 --> 00:12:43,600
memory so um

360
00:12:43,600 --> 00:12:45,279
it's straightforward it basically

361
00:12:45,279 --> 00:12:47,360
follows the encoding of epmp we are

362
00:12:47,360 --> 00:12:50,880
using a table very similar to epmp

363
00:12:50,880 --> 00:12:52,800
to again provide

364
00:12:52,800 --> 00:12:54,800
the same a similar functionality to s

365
00:12:54,800 --> 00:12:57,279
mode this time so we can use the mpu to

366
00:12:57,279 --> 00:12:59,680
isolate s mode from view mode and

367
00:12:59,680 --> 00:13:01,839
various applications on remote from each

368
00:13:01,839 --> 00:13:04,079
other

369
00:13:04,480 --> 00:13:07,839
uh lightweight tea this is now uh we are

370
00:13:07,839 --> 00:13:10,560
focusing we you have devices very small

371
00:13:10,560 --> 00:13:12,800
devices that they do not have supervisor

372
00:13:12,800 --> 00:13:15,040
mode at all you only have machine mode

373
00:13:15,040 --> 00:13:16,399
and user mode

374
00:13:16,399 --> 00:13:19,279
uh and in this case we will will end up

375
00:13:19,279 --> 00:13:21,760
running multiple things on machine mode

376
00:13:21,760 --> 00:13:23,680
that are privileged so you have your

377
00:13:23,680 --> 00:13:25,200
firmware and you may have an operating

378
00:13:25,200 --> 00:13:27,279
system you may have a service there a

379
00:13:27,279 --> 00:13:29,920
trusted service and

380
00:13:29,920 --> 00:13:33,120
right now we even with the enhanced pmp

381
00:13:33,120 --> 00:13:35,600
we do not have the capability of uh

382
00:13:35,600 --> 00:13:38,880
splitting of isolating things within

383
00:13:38,880 --> 00:13:41,440
where inside m mode so you either have

384
00:13:41,440 --> 00:13:44,240
everything is in everything on mode is

385
00:13:44,240 --> 00:13:46,240
one context and

386
00:13:46,240 --> 00:13:48,880
the firmware for example can see the

387
00:13:48,880 --> 00:13:51,199
the memory of the os and the os can see

388
00:13:51,199 --> 00:13:52,720
the memory of the firmware and the

389
00:13:52,720 --> 00:13:53,839
service and

390
00:13:53,839 --> 00:13:56,399
uh they can tamper with uh with data

391
00:13:56,399 --> 00:13:58,079
there so we want

392
00:13:58,079 --> 00:14:00,160
on systems that they do not have s mode

393
00:14:00,160 --> 00:14:02,639
to have another privilege mode for

394
00:14:02,639 --> 00:14:06,000
controlling access uh for via virtual

395
00:14:06,000 --> 00:14:08,800
machine or virtual memory or the mpu we

396
00:14:08,800 --> 00:14:10,880
want to be able to uh have a better

397
00:14:10,880 --> 00:14:12,880
isolation within a mode so we define the

398
00:14:12,880 --> 00:14:14,720
secondary context without within the

399
00:14:14,720 --> 00:14:16,240
mode

400
00:14:16,240 --> 00:14:16,959
and

401
00:14:16,959 --> 00:14:20,079
we extended the ebmp to have to be able

402
00:14:20,079 --> 00:14:22,480
to define rules that that apply only to

403
00:14:22,480 --> 00:14:24,480
that secondary context and those rules

404
00:14:24,480 --> 00:14:25,279
are

405
00:14:25,279 --> 00:14:27,519
they are locked but they are

406
00:14:27,519 --> 00:14:30,079
so the secondary context cannot modify

407
00:14:30,079 --> 00:14:32,000
them but the

408
00:14:32,000 --> 00:14:33,600
pre-primary context where the firmware

409
00:14:33,600 --> 00:14:35,760
runs can modify and so you can use the

410
00:14:35,760 --> 00:14:38,480
firmware context switch also between the

411
00:14:38,480 --> 00:14:41,040
various the things that are running on

412
00:14:41,040 --> 00:14:42,959
secondary context so you may have your

413
00:14:42,959 --> 00:14:45,760
firmware it in it will be isolated from

414
00:14:45,760 --> 00:14:47,600
the os and when you want to

415
00:14:47,600 --> 00:14:49,360
switch to and do a service running on

416
00:14:49,360 --> 00:14:50,800
the secondary context you go to the

417
00:14:50,800 --> 00:14:53,360
firmware and the firmware will swap

418
00:14:53,360 --> 00:14:55,920
those uh rules on bmp that are editable

419
00:14:55,920 --> 00:14:58,480
and for to allow access to the memory of

420
00:14:58,480 --> 00:14:59,920
the service

421
00:14:59,920 --> 00:15:01,600
this is under development we are looking

422
00:15:01,600 --> 00:15:03,760
for this to be uh frozen by the end of

423
00:15:03,760 --> 00:15:05,120
the year

424
00:15:05,120 --> 00:15:07,519
uh io pmp

425
00:15:07,519 --> 00:15:09,600
uh this is basically uh physical memory

426
00:15:09,600 --> 00:15:11,600
protection for devices okay we want to

427
00:15:11,600 --> 00:15:13,760
be able to prevent devices from

428
00:15:13,760 --> 00:15:15,519
accessing memory

429
00:15:15,519 --> 00:15:16,880
uh

430
00:15:16,880 --> 00:15:19,279
protected memory so okay you have pnp

431
00:15:19,279 --> 00:15:21,199
that blocks your cpu from accessing a

432
00:15:21,199 --> 00:15:23,760
specific region but your gpu for example

433
00:15:23,760 --> 00:15:25,360
or a dma engine

434
00:15:25,360 --> 00:15:28,079
can access this so we want to have this

435
00:15:28,079 --> 00:15:29,680
mechanism for

436
00:15:29,680 --> 00:15:30,720
basically

437
00:15:30,720 --> 00:15:32,240
you can think of it as a subset of an

438
00:15:32,240 --> 00:15:34,079
immune to

439
00:15:34,079 --> 00:15:36,240
restrict access to the device from the

440
00:15:36,240 --> 00:15:37,839
device to the memory so the device

441
00:15:37,839 --> 00:15:38,959
cannot

442
00:15:38,959 --> 00:15:40,560
we are protecting the memory from the

443
00:15:40,560 --> 00:15:42,399
cpu from other

444
00:15:42,399 --> 00:15:44,320
parts for example other threads and we

445
00:15:44,320 --> 00:15:46,240
can also use iopmp to prevent access

446
00:15:46,240 --> 00:15:49,759
from the device to the same memory

447
00:15:49,920 --> 00:15:51,440
so

448
00:15:51,440 --> 00:15:53,600
that's all with memory safety we are we

449
00:15:53,600 --> 00:15:56,320
also have some other mechanisms in place

450
00:15:56,320 --> 00:15:58,399
uh pointer masking is an interesting one

451
00:15:58,399 --> 00:16:00,240
pointer masking is can also be thought

452
00:16:00,240 --> 00:16:02,800
as a memory safety mechanism basically

453
00:16:02,800 --> 00:16:04,720
uh the address

454
00:16:04,720 --> 00:16:07,199
you request an address and instead of

455
00:16:07,199 --> 00:16:09,279
accessing uh before accessing the

456
00:16:09,279 --> 00:16:11,680
address you have you mask it

457
00:16:11,680 --> 00:16:14,560
uh with a mask and then you or with a

458
00:16:14,560 --> 00:16:17,199
base register so this way you may the

459
00:16:17,199 --> 00:16:19,600
hardware will ignore the bits of the

460
00:16:19,600 --> 00:16:21,120
address that are in the mask and will

461
00:16:21,120 --> 00:16:22,800
replace them with the bits in the base

462
00:16:22,800 --> 00:16:24,959
register

463
00:16:24,959 --> 00:16:27,040
this is very useful for

464
00:16:27,040 --> 00:16:30,320
many things for example

465
00:16:30,320 --> 00:16:31,839
dynamically compiled

466
00:16:31,839 --> 00:16:33,440
virtual machines

467
00:16:33,440 --> 00:16:35,279
java vm and dynamically compared

468
00:16:35,279 --> 00:16:36,720
languages can use this for tracking

469
00:16:36,720 --> 00:16:39,440
ownership of memory and

470
00:16:39,440 --> 00:16:41,120
they can use this for the garbage

471
00:16:41,120 --> 00:16:42,560
collector and

472
00:16:42,560 --> 00:16:44,240
all sorts of stuff it's basically a way

473
00:16:44,240 --> 00:16:46,000
of memory tagging

474
00:16:46,000 --> 00:16:47,680
but it's don't talk done by the hardware

475
00:16:47,680 --> 00:16:49,279
that hardware does not check the tags

476
00:16:49,279 --> 00:16:51,920
the hardware ignores the tags and

477
00:16:51,920 --> 00:16:53,920
that are placed on the bits that are

478
00:16:53,920 --> 00:16:56,480
masked of the address and then the

479
00:16:56,480 --> 00:16:59,600
software is there to check them

480
00:16:59,600 --> 00:17:00,560
so

481
00:17:00,560 --> 00:17:02,560
it can be used as a memory tagging

482
00:17:02,560 --> 00:17:04,559
software based memory attacking

483
00:17:04,559 --> 00:17:07,199
mechanism uh but it can also be used to

484
00:17:07,199 --> 00:17:10,640
is for restricting access to uh

485
00:17:10,640 --> 00:17:12,640
for specif for example when you're

486
00:17:12,640 --> 00:17:14,799
running inside the library when you're

487
00:17:14,799 --> 00:17:16,559
jumping in in the library the library

488
00:17:16,559 --> 00:17:18,880
itself can set the mask register so that

489
00:17:18,880 --> 00:17:21,280
it so that any calls that are outside

490
00:17:21,280 --> 00:17:23,760
the range of the library are ignored

491
00:17:23,760 --> 00:17:26,880
so or code okay so you have for example

492
00:17:26,880 --> 00:17:28,720
you're you're jumping to a library that

493
00:17:28,720 --> 00:17:30,799
only wants that you want to you want the

494
00:17:30,799 --> 00:17:32,640
library to prevent

495
00:17:32,640 --> 00:17:35,120
any calls to outside the code that's

496
00:17:35,120 --> 00:17:36,960
outside of the library you can use

497
00:17:36,960 --> 00:17:40,080
memory masking to to limit the range of

498
00:17:40,080 --> 00:17:42,160
addresses the library can call

499
00:17:42,160 --> 00:17:44,240
or access in general

500
00:17:44,240 --> 00:17:46,880
control flow integrity well you've

501
00:17:46,880 --> 00:17:48,640
probably heard of uh

502
00:17:48,640 --> 00:17:50,400
other architectures doing similar things

503
00:17:50,400 --> 00:17:52,880
we want to protect the control flow of

504
00:17:52,880 --> 00:17:55,520
the program meaning that uh an attacker

505
00:17:55,520 --> 00:17:57,120
would not be able to tamper with a

506
00:17:57,120 --> 00:17:59,280
return address or

507
00:17:59,280 --> 00:18:00,799
jump somewhere else

508
00:18:00,799 --> 00:18:02,480
so we have uh

509
00:18:02,480 --> 00:18:05,760
backwards uh protection using a shadow

510
00:18:05,760 --> 00:18:06,720
stack

511
00:18:06,720 --> 00:18:10,240
so every time you return from a call you

512
00:18:10,240 --> 00:18:11,760
check the shadow stack to see if the

513
00:18:11,760 --> 00:18:14,080
return address is there if so if you are

514
00:18:14,080 --> 00:18:16,240
if you are called from a function you

515
00:18:16,240 --> 00:18:18,080
are only able to return back to that

516
00:18:18,080 --> 00:18:19,760
function you are not able to return

517
00:18:19,760 --> 00:18:22,000
somewhere else uh and we also have

518
00:18:22,000 --> 00:18:23,679
forward edge protection which means that

519
00:18:23,679 --> 00:18:25,520
you are only able from one faction you

520
00:18:25,520 --> 00:18:28,640
are able to jump to other functions uh

521
00:18:28,640 --> 00:18:32,000
using labels so this is another

522
00:18:32,000 --> 00:18:33,840
novelty let's say because right now you

523
00:18:33,840 --> 00:18:35,840
there is uh this there is a similar

524
00:18:35,840 --> 00:18:38,880
mechanism that you can declare call

525
00:18:38,880 --> 00:18:41,120
sites so that you they are these these

526
00:18:41,120 --> 00:18:42,720
are places that you are allowed to jump

527
00:18:42,720 --> 00:18:46,000
to but in our case because we use labels

528
00:18:46,000 --> 00:18:47,840
you are not you are also checking that

529
00:18:47,840 --> 00:18:49,520
you came from the right function so it's

530
00:18:49,520 --> 00:18:51,360
not you know we're not just checking

531
00:18:51,360 --> 00:18:54,240
that we landed on a valid landing point

532
00:18:54,240 --> 00:18:56,320
but we are also checking that we came to

533
00:18:56,320 --> 00:18:58,799
that landing point with a valid label

534
00:18:58,799 --> 00:19:01,760
so it's very interesting it has its very

535
00:19:01,760 --> 00:19:03,760
early stages of development

536
00:19:03,760 --> 00:19:05,280
but uh

537
00:19:05,280 --> 00:19:06,880
we hope we will have something more

538
00:19:06,880 --> 00:19:09,440
concrete let's say

539
00:19:09,440 --> 00:19:11,200
by the end of the year i'm not i don't

540
00:19:11,200 --> 00:19:12,960
think we'll get we'll freeze this any

541
00:19:12,960 --> 00:19:14,720
time soon i believe it's we are looking

542
00:19:14,720 --> 00:19:17,679
next year for freezing this

543
00:19:17,679 --> 00:19:20,080
other proposals in progress so

544
00:19:20,080 --> 00:19:21,280
uh

545
00:19:21,280 --> 00:19:23,120
we have uh what ronan mentioned

546
00:19:23,120 --> 00:19:25,679
previously when we are working on fence

547
00:19:25,679 --> 00:19:27,919
tea or security flash which is basically

548
00:19:27,919 --> 00:19:29,520
the flash everything approach ronan

549
00:19:29,520 --> 00:19:30,559
mentioned

550
00:19:30,559 --> 00:19:32,240
uh

551
00:19:32,240 --> 00:19:33,679
and um

552
00:19:33,679 --> 00:19:35,760
this started from cash management

553
00:19:35,760 --> 00:19:38,240
operations and it ended up being a

554
00:19:38,240 --> 00:19:39,679
separate discussion we haven't reached

555
00:19:39,679 --> 00:19:42,160
consensus on that basically because of

556
00:19:42,160 --> 00:19:44,480
the question i i asked previously about

557
00:19:44,480 --> 00:19:47,760
the speculative execution so uh it's not

558
00:19:47,760 --> 00:19:50,720
easy to just use this this approach when

559
00:19:50,720 --> 00:19:52,960
you have out of order course

560
00:19:52,960 --> 00:19:55,200
and we are looking for ways to

561
00:19:55,200 --> 00:19:59,200
make this look clean and do the job

562
00:19:59,200 --> 00:20:01,039
so secure function calling this is

563
00:20:01,039 --> 00:20:03,280
another thing we are talking about

564
00:20:03,280 --> 00:20:05,360
basically we are basically we want to be

565
00:20:05,360 --> 00:20:07,360
able to switch

566
00:20:07,360 --> 00:20:09,600
uh to

567
00:20:09,600 --> 00:20:11,200
to and from a trusted environment

568
00:20:11,200 --> 00:20:13,440
without another context without going

569
00:20:13,440 --> 00:20:14,960
through uh

570
00:20:14,960 --> 00:20:17,280
through a mode so when you want we the

571
00:20:17,280 --> 00:20:19,120
the concept here is that we are having

572
00:20:19,120 --> 00:20:21,440
people that we have pmp limiting access

573
00:20:21,440 --> 00:20:24,240
to the physical memory of a process

574
00:20:24,240 --> 00:20:26,720
and when we want to call that process we

575
00:20:26,720 --> 00:20:28,960
should we we need to go through the

576
00:20:28,960 --> 00:20:31,280
firmware so that the firmware will allow

577
00:20:31,280 --> 00:20:33,520
us access to the physical memory so

578
00:20:33,520 --> 00:20:35,520
we're looking of a way to accelerating

579
00:20:35,520 --> 00:20:38,720
this so that we can have uh we can

580
00:20:38,720 --> 00:20:41,120
talk we can call something on this

581
00:20:41,120 --> 00:20:43,919
on this secured area without going

582
00:20:43,919 --> 00:20:44,960
through uh

583
00:20:44,960 --> 00:20:46,400
without going through the context switch

584
00:20:46,400 --> 00:20:48,080
and everything we want to make it a

585
00:20:48,080 --> 00:20:50,159
faster way of

586
00:20:50,159 --> 00:20:52,350
jumping in and out of um

587
00:20:52,350 --> 00:20:53,760
[Music]

588
00:20:53,760 --> 00:20:54,640
of

589
00:20:54,640 --> 00:20:57,039
enclaves basically

590
00:20:57,039 --> 00:20:58,159
so uh

591
00:20:58,159 --> 00:21:02,080
that's all i hope i didn't i'm on time

592
00:21:02,080 --> 00:21:04,320
so uh please let me know if you have any

593
00:21:04,320 --> 00:21:06,720
questions

594
00:21:07,360 --> 00:21:08,880
yeah that's great thanks a lot nick for

595
00:21:08,880 --> 00:21:11,120
the the overview it's quite a lot to to

596
00:21:11,120 --> 00:21:13,200
pack into 20 minutes i realized we give

597
00:21:13,200 --> 00:21:14,720
you a hard task in that respect so

598
00:21:14,720 --> 00:21:16,480
thanks a lot

599
00:21:16,480 --> 00:21:17,919
um so we do have a couple of minutes for

600
00:21:17,919 --> 00:21:19,520
questions for sure

601
00:21:19,520 --> 00:21:22,720
um if there are any

602
00:21:22,720 --> 00:21:24,960
um

603
00:21:25,840 --> 00:21:27,600
if there aren't any questions because

604
00:21:27,600 --> 00:21:29,039
we've had a pretty long session i'm

605
00:21:29,039 --> 00:21:31,039
tempted to say we just move on to the

606
00:21:31,039 --> 00:21:33,679
final talk

607
00:21:34,480 --> 00:21:35,679
oh there we go

608
00:21:35,679 --> 00:21:37,440
is there any relationship between your

609
00:21:37,440 --> 00:21:40,240
task force and the keystone enclave

610
00:21:40,240 --> 00:21:43,440
okay so uh we've worked with

611
00:21:43,440 --> 00:21:44,480
various

612
00:21:44,480 --> 00:21:46,240
with various groups that have done

613
00:21:46,240 --> 00:21:47,360
enclaves

614
00:21:47,360 --> 00:21:50,240
we've we've worked with uh

615
00:21:50,240 --> 00:21:52,320
with hex five when they created

616
00:21:52,320 --> 00:21:54,320
multi-zone and we've worked with

617
00:21:54,320 --> 00:21:56,159
keystone and cleveland with the keystone

618
00:21:56,159 --> 00:22:00,159
people as well uh so

619
00:22:00,480 --> 00:22:03,039
keystone is a software based uh it's a

620
00:22:03,039 --> 00:22:06,640
software implementation so it relies on

621
00:22:06,640 --> 00:22:09,280
it it relies on what we have right now

622
00:22:09,280 --> 00:22:12,159
with they can do what they want with pmp

623
00:22:12,159 --> 00:22:14,480
but with epmp they have more flexibility

624
00:22:14,480 --> 00:22:17,440
so that keystone will use ebmp at some

625
00:22:17,440 --> 00:22:18,960
point

626
00:22:18,960 --> 00:22:21,440
but i don't know if they will be using

627
00:22:21,440 --> 00:22:23,679
the mpu or the other or lightweight t

628
00:22:23,679 --> 00:22:25,039
for example

629
00:22:25,039 --> 00:22:27,280
but remember that we are talking about

630
00:22:27,280 --> 00:22:28,720
hardware mechanisms here we're not

631
00:22:28,720 --> 00:22:30,559
talking about uh

632
00:22:30,559 --> 00:22:32,559
software implementations or

633
00:22:32,559 --> 00:22:33,840
how would you

634
00:22:33,840 --> 00:22:36,799
for example opt the global platform spec

635
00:22:36,799 --> 00:22:38,640
can also run on respi right now just

636
00:22:38,640 --> 00:22:40,799
using the pmp

637
00:22:40,799 --> 00:22:42,720
so what we want is to create mechanisms

638
00:22:42,720 --> 00:22:45,360
for others to use so for the software to

639
00:22:45,360 --> 00:22:47,520
use we are not looking to

640
00:22:47,520 --> 00:22:49,520
create a spec that covers both hardware

641
00:22:49,520 --> 00:22:51,840
and so on

642
00:22:52,320 --> 00:22:54,320
but yeah we are in we are in contact

643
00:22:54,320 --> 00:22:56,240
with keystone with the x5 with global

644
00:22:56,240 --> 00:22:58,320
flat platform with anyone that because

645
00:22:58,320 --> 00:23:00,320
we want to know what they need in

646
00:23:00,320 --> 00:23:02,720
hardware

647
00:23:05,919 --> 00:23:09,600
okay so thanks again nick um okay

648
00:23:09,600 --> 00:23:12,080
thank you please free feel free to reach

649
00:23:12,080 --> 00:23:14,720
out and join our group and uh

650
00:23:14,720 --> 00:23:16,880
because we are we are we're changing a

651
00:23:16,880 --> 00:23:18,880
bit of the organization now where we

652
00:23:18,880 --> 00:23:21,039
have we will have multiple task groups

653
00:23:21,039 --> 00:23:22,720
for each of one of the tasks that i

654
00:23:22,720 --> 00:23:24,320
mentioned it's going to become a

655
00:23:24,320 --> 00:23:25,919
separate task group so

656
00:23:25,919 --> 00:23:28,080
feel free to join and we need more

657
00:23:28,080 --> 00:23:29,120
people

658
00:23:29,120 --> 00:23:30,480
and this is an

659
00:23:30,480 --> 00:23:32,480
ongoing process and it's really really

660
00:23:32,480 --> 00:23:35,440
interesting for those in the security

661
00:23:35,440 --> 00:23:36,880
domain

662
00:23:36,880 --> 00:23:39,280
so see you around

663
00:23:39,280 --> 00:23:41,760
great thanks

