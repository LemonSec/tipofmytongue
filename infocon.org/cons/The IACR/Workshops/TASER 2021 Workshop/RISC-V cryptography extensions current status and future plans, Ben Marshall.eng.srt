1
00:00:00,240 --> 00:00:02,399
she explained the sort of organization

2
00:00:02,399 --> 00:00:04,400
and hierarchy um because it means i

3
00:00:04,400 --> 00:00:05,759
won't have to i can skip a couple of

4
00:00:05,759 --> 00:00:07,200
slides and hopefully just take a few

5
00:00:07,200 --> 00:00:08,559
more questions

6
00:00:08,559 --> 00:00:09,519
um

7
00:00:09,519 --> 00:00:11,759
so yeah very brief history of history of

8
00:00:11,759 --> 00:00:13,599
risk five i would skip entirely because

9
00:00:13,599 --> 00:00:15,200
helena covered it

10
00:00:15,200 --> 00:00:17,840
and again i think helena and i must have

11
00:00:17,840 --> 00:00:19,520
stumbled on the same orb chart to try

12
00:00:19,520 --> 00:00:20,960
and show all of this

13
00:00:20,960 --> 00:00:23,600
um so there's been many reorganizations

14
00:00:23,600 --> 00:00:26,560
of risk five as well i've been involved

15
00:00:26,560 --> 00:00:27,920
with it the current structure looks as

16
00:00:27,920 --> 00:00:30,880
helena described and

17
00:00:30,880 --> 00:00:33,360
we are the crypto the k crypto task

18
00:00:33,360 --> 00:00:34,559
group um

19
00:00:34,559 --> 00:00:36,160
why it's spelt with k i feel like this

20
00:00:36,160 --> 00:00:39,120
is important to explain um c was taken

21
00:00:39,120 --> 00:00:40,960
uh that is the compressed instruction

22
00:00:40,960 --> 00:00:43,440
set extension risk five and k happily

23
00:00:43,440 --> 00:00:45,280
overlaps with kryptos which was the

24
00:00:45,280 --> 00:00:47,360
original greek meaning for hidden or

25
00:00:47,360 --> 00:00:49,680
secret i think so that's sort of a bit

26
00:00:49,680 --> 00:00:51,199
of serendipity there

27
00:00:51,199 --> 00:00:52,000
um

28
00:00:52,000 --> 00:00:52,960
so in terms of what the actual

29
00:00:52,960 --> 00:00:55,120
cryptography task group has been up to

30
00:00:55,120 --> 00:00:58,640
so way back in 2018 it was founded with

31
00:00:58,640 --> 00:01:01,600
the brief to create large

32
00:01:01,600 --> 00:01:04,640
um sort of aesni class instructions that

33
00:01:04,640 --> 00:01:06,560
would reuse the

34
00:01:06,560 --> 00:01:08,880
currently still work in progress risk 5

35
00:01:08,880 --> 00:01:10,880
vector extension to do extremely high

36
00:01:10,880 --> 00:01:13,439
performance implementations of things

37
00:01:13,439 --> 00:01:15,680
like aes shah

38
00:01:15,680 --> 00:01:17,600
and big integer arithmetic

39
00:01:17,600 --> 00:01:19,439
and the cryptography world has changed

40
00:01:19,439 --> 00:01:21,759
since then in various different ways as

41
00:01:21,759 --> 00:01:23,439
has the risk five world

42
00:01:23,439 --> 00:01:26,400
so back in 2019 the brief was sort of

43
00:01:26,400 --> 00:01:29,840
expanded a little bit to include um

44
00:01:29,840 --> 00:01:32,079
scalar acceleration so this is

45
00:01:32,079 --> 00:01:33,600
cryptography that is designed to run on

46
00:01:33,600 --> 00:01:35,759
microcontrollers so you imagine your arm

47
00:01:35,759 --> 00:01:38,880
cortex m4 class kind of device um that

48
00:01:38,880 --> 00:01:40,479
yeah everyone at ches i'm pretty sure is

49
00:01:40,479 --> 00:01:42,240
quite familiar with at this point

50
00:01:42,240 --> 00:01:44,079
um and what we sort of proposed that

51
00:01:44,079 --> 00:01:45,840
actually there's a whole big class of

52
00:01:45,840 --> 00:01:48,240
devices that um don't have the space for

53
00:01:48,240 --> 00:01:50,079
big vector instructions but can still

54
00:01:50,079 --> 00:01:51,920
benefit from uh sort of accelerated

55
00:01:51,920 --> 00:01:53,520
cryptography and this would be something

56
00:01:53,520 --> 00:01:55,600
that risk 5 would be doing new that no

57
00:01:55,600 --> 00:01:57,439
other iso has done so this was added to

58
00:01:57,439 --> 00:01:58,479
the brief

59
00:01:58,479 --> 00:02:00,159
and then in 2020 we kind of realized

60
00:02:00,159 --> 00:02:02,159
that actually the vector extension is so

61
00:02:02,159 --> 00:02:04,399
big it's taking a long time to do we'll

62
00:02:04,399 --> 00:02:05,680
put the vector extension for

63
00:02:05,680 --> 00:02:07,280
cryptography to bed for a bit and we'll

64
00:02:07,280 --> 00:02:08,959
just focus on the scale of crypto stuff

65
00:02:08,959 --> 00:02:10,720
and that's why the scalar cryptography

66
00:02:10,720 --> 00:02:13,360
specification has come out earlier

67
00:02:13,360 --> 00:02:15,680
and it includes the spec for the entropy

68
00:02:15,680 --> 00:02:17,200
source so this is where you generate

69
00:02:17,200 --> 00:02:19,200
your random keys

70
00:02:19,200 --> 00:02:21,760
um random keys secret keys from random

71
00:02:21,760 --> 00:02:22,879
values

72
00:02:22,879 --> 00:02:23,920
um

73
00:02:23,920 --> 00:02:26,319
so that specification is now out it is

74
00:02:26,319 --> 00:02:28,239
ready um

75
00:02:28,239 --> 00:02:30,000
you can go and download it i will give

76
00:02:30,000 --> 00:02:32,640
you all of the links later um

77
00:02:32,640 --> 00:02:34,480
and yeah we're pretty proud of it it's

78
00:02:34,480 --> 00:02:36,239
the the world's first instruction set

79
00:02:36,239 --> 00:02:38,239
extension to provide lightweight

80
00:02:38,239 --> 00:02:40,720
cryptography accelerations this means uh

81
00:02:40,720 --> 00:02:42,400
kind of like helena was saying a minute

82
00:02:42,400 --> 00:02:44,800
ago because risk five caters to all

83
00:02:44,800 --> 00:02:47,280
class of device from small embedded

84
00:02:47,280 --> 00:02:48,959
little microchips all the way up to

85
00:02:48,959 --> 00:02:51,519
allegedly big server class systems you

86
00:02:51,519 --> 00:02:53,599
need cryptography acceleration for all

87
00:02:53,599 --> 00:02:55,360
of those kinds of device and that can't

88
00:02:55,360 --> 00:02:57,120
really look the same for a server or a

89
00:02:57,120 --> 00:02:59,519
microcontroller so because risk 5 is

90
00:02:59,519 --> 00:03:01,280
popular in the embedded space we started

91
00:03:01,280 --> 00:03:03,200
with embedded systems

92
00:03:03,200 --> 00:03:05,360
um so this is the pdf

93
00:03:05,360 --> 00:03:07,840
you can find it on github literally all

94
00:03:07,840 --> 00:03:10,560
our work is um available on github so

95
00:03:10,560 --> 00:03:12,800
you can see that um you can't see my

96
00:03:12,800 --> 00:03:15,519
mouse can you damn anyway it's uh

97
00:03:15,519 --> 00:03:18,560
riskvis5 crypto this is this repository

98
00:03:18,560 --> 00:03:21,040
has um the entire history of our work in

99
00:03:21,040 --> 00:03:22,800
there including the specifications

100
00:03:22,800 --> 00:03:24,080
benchmarks

101
00:03:24,080 --> 00:03:26,720
um modified tool chains the whole lot um

102
00:03:26,720 --> 00:03:28,319
so we really weren't kidding when we say

103
00:03:28,319 --> 00:03:30,239
the work is public which has you know

104
00:03:30,239 --> 00:03:33,440
lots of interesting side effects um

105
00:03:33,440 --> 00:03:35,120
in terms of what the

106
00:03:35,120 --> 00:03:38,080
scalar cryptography extension contains

107
00:03:38,080 --> 00:03:39,760
so we broke it into basically three

108
00:03:39,760 --> 00:03:40,879
components

109
00:03:40,879 --> 00:03:42,799
um the easiest ones to explain are a

110
00:03:42,799 --> 00:03:44,480
small number of very specific

111
00:03:44,480 --> 00:03:47,040
instructions for particular very popular

112
00:03:47,040 --> 00:03:49,920
algorithms like aes and sha2

113
00:03:49,920 --> 00:03:51,360
and i'm actually talking about the aes

114
00:03:51,360 --> 00:03:52,879
instructions tomorrow in one of the

115
00:03:52,879 --> 00:03:56,000
chess sessions um so that you know shout

116
00:03:56,000 --> 00:03:57,760
out i guess um

117
00:03:57,760 --> 00:04:00,080
so yeah the aes instructions we split

118
00:04:00,080 --> 00:04:02,319
into one for 32 bits one for 64 bits

119
00:04:02,319 --> 00:04:04,400
because again different classes of cpu

120
00:04:04,400 --> 00:04:06,000
you you can afford to specialize the

121
00:04:06,000 --> 00:04:07,360
instructions slightly to take good

122
00:04:07,360 --> 00:04:08,480
advantage

123
00:04:08,480 --> 00:04:08,780
um

124
00:04:08,780 --> 00:04:10,000
[Music]

125
00:04:10,000 --> 00:04:12,640
instructions for sha2 and then sm3 and

126
00:04:12,640 --> 00:04:16,079
sm4 which aren't as well known uh is my

127
00:04:16,079 --> 00:04:17,839
understanding but they are the uh

128
00:04:17,839 --> 00:04:20,399
chinese standard equivalents of aes and

129
00:04:20,399 --> 00:04:23,360
sha2 and risk5 being sort of an

130
00:04:23,360 --> 00:04:25,120
international standard they were they

131
00:04:25,120 --> 00:04:27,840
merited inclusion on on that basis alone

132
00:04:27,840 --> 00:04:29,040
so these are

133
00:04:29,040 --> 00:04:31,040
these these classes of instructions are

134
00:04:31,040 --> 00:04:32,639
designed to be extremely lightweight to

135
00:04:32,639 --> 00:04:33,600
implement

136
00:04:33,600 --> 00:04:35,840
um around about 1k and two gates for

137
00:04:35,840 --> 00:04:38,560
those of you who are sort of hardware as

138
00:04:38,560 --> 00:04:41,040
more hardware focused

139
00:04:41,040 --> 00:04:42,880
and you get an enormous speed up for

140
00:04:42,880 --> 00:04:45,120
your um for your small investment in

141
00:04:45,120 --> 00:04:46,639
gates and because it's a standard

142
00:04:46,639 --> 00:04:48,400
interface you can write your crypto

143
00:04:48,400 --> 00:04:49,520
library to just look at these

144
00:04:49,520 --> 00:04:51,600
instructions rather than have to cater

145
00:04:51,600 --> 00:04:52,720
to all the different kinds of

146
00:04:52,720 --> 00:04:54,800
cryptography accelerator that different

147
00:04:54,800 --> 00:04:57,360
you know your nxp or your stm32

148
00:04:57,360 --> 00:05:00,000
microcontroller might support so

149
00:05:00,000 --> 00:05:02,000
those are the sort of algorithm specific

150
00:05:02,000 --> 00:05:03,440
instructions

151
00:05:03,440 --> 00:05:04,320
but

152
00:05:04,320 --> 00:05:06,000
there's more to cryptography than aes

153
00:05:06,000 --> 00:05:06,960
and sha

154
00:05:06,960 --> 00:05:08,479
and we needed to keep the extension as

155
00:05:08,479 --> 00:05:10,800
generic as possible and we did a whole

156
00:05:10,800 --> 00:05:12,320
load of research on what kind of

157
00:05:12,320 --> 00:05:13,759
instructions and operations would be

158
00:05:13,759 --> 00:05:15,840
useful for sort of

159
00:05:15,840 --> 00:05:17,360
basically other classes of block cipher

160
00:05:17,360 --> 00:05:18,639
or hash function

161
00:05:18,639 --> 00:05:21,520
and happily the bitmanip extension was

162
00:05:21,520 --> 00:05:22,960
already defining a load of these

163
00:05:22,960 --> 00:05:24,479
instructions

164
00:05:24,479 --> 00:05:27,199
so rather than reinvent the wheel we

165
00:05:27,199 --> 00:05:28,800
caused a whole lot of fuss with inside

166
00:05:28,800 --> 00:05:30,960
risk five by borrowing instructions from

167
00:05:30,960 --> 00:05:33,520
this other extension and these include

168
00:05:33,520 --> 00:05:35,680
things like rotations which frankly you

169
00:05:35,680 --> 00:05:37,120
can't do a lot of cryptography

170
00:05:37,120 --> 00:05:38,720
reasonably without rotation as we all

171
00:05:38,720 --> 00:05:40,479
know um and then you've got other sort

172
00:05:40,479 --> 00:05:42,400
of logic and not instructions that are

173
00:05:42,400 --> 00:05:44,639
good for bit slicing and star three and

174
00:05:44,639 --> 00:05:46,639
then some weird permutation instructions

175
00:05:46,639 --> 00:05:49,520
which help various parts of sha-3 or for

176
00:05:49,520 --> 00:05:51,360
some small s boxes they're extremely

177
00:05:51,360 --> 00:05:53,840
quick and help with things like side

178
00:05:53,840 --> 00:05:55,120
channel

179
00:05:55,120 --> 00:05:57,039
parasite channel security

180
00:05:57,039 --> 00:05:58,479
we hope and

181
00:05:58,479 --> 00:06:01,280
circle back to that a little bit later

182
00:06:01,280 --> 00:06:03,759
um but yeah the emphasis from the start

183
00:06:03,759 --> 00:06:06,479
was always on in on algorithms which

184
00:06:06,479 --> 00:06:08,319
are already standardized and already

185
00:06:08,319 --> 00:06:10,240
very popular so that meant things like

186
00:06:10,240 --> 00:06:11,919
post quantum crypto or lightweight

187
00:06:11,919 --> 00:06:14,080
crypto though important and to some

188
00:06:14,080 --> 00:06:16,240
extent we can anticipate things like uh

189
00:06:16,240 --> 00:06:18,240
shutter 3 or shake being useful for post

190
00:06:18,240 --> 00:06:20,000
quantum crypto we didn't actually go all

191
00:06:20,000 --> 00:06:21,199
in on trying to accelerate those

192
00:06:21,199 --> 00:06:22,960
algorithms yet because we've got to wait

193
00:06:22,960 --> 00:06:24,400
a little while for the standards so

194
00:06:24,400 --> 00:06:26,160
that's why what what's in there is in

195
00:06:26,160 --> 00:06:27,600
there and what's not in there isn't that

196
00:06:27,600 --> 00:06:29,199
if that makes sense

197
00:06:29,199 --> 00:06:31,280
and then the final component is the

198
00:06:31,280 --> 00:06:32,840
entropy source

199
00:06:32,840 --> 00:06:35,039
um far and away one of the most

200
00:06:35,039 --> 00:06:36,720
difficult parts of the specification

201
00:06:36,720 --> 00:06:39,039
because we had a lot of sort of past

202
00:06:39,039 --> 00:06:41,680
designs to learn from from people like

203
00:06:41,680 --> 00:06:43,600
x86 and arm

204
00:06:43,600 --> 00:06:45,360
and a lot of design mistakes there's an

205
00:06:45,360 --> 00:06:46,880
impressive amount of literature about

206
00:06:46,880 --> 00:06:47,840
how

207
00:06:47,840 --> 00:06:50,080
people get entropy sources wrong the

208
00:06:50,080 --> 00:06:52,000
selling point of the risk five entropy

209
00:06:52,000 --> 00:06:54,080
source is that it works with the same

210
00:06:54,080 --> 00:06:56,240
interface across microcontrollers all

211
00:06:56,240 --> 00:06:59,360
the way to servers so i won't spoil the

212
00:06:59,360 --> 00:07:00,639
thrill of reading the technical

213
00:07:00,639 --> 00:07:02,479
specification for you suffice to say

214
00:07:02,479 --> 00:07:03,840
that if you're interested in entropy

215
00:07:03,840 --> 00:07:05,840
sources it's a really good thing to

216
00:07:05,840 --> 00:07:07,440
start looking at right now um the

217
00:07:07,440 --> 00:07:09,759
advantage from a sort of commercial side

218
00:07:09,759 --> 00:07:12,400
is it's been designed to work perfectly

219
00:07:12,400 --> 00:07:15,360
with the new fips 140-3

220
00:07:15,360 --> 00:07:17,199
certifications which came out this year

221
00:07:17,199 --> 00:07:18,560
so if you want to sell to the us

222
00:07:18,560 --> 00:07:19,919
government or people to take your

223
00:07:19,919 --> 00:07:22,000
cryptographic product seriously you need

224
00:07:22,000 --> 00:07:24,000
it to be certified or common criteria

225
00:07:24,000 --> 00:07:26,720
certified and this spec is was designed

226
00:07:26,720 --> 00:07:28,960
to be that way from the start so a lot

227
00:07:28,960 --> 00:07:30,479
of people have been sort of fans of it

228
00:07:30,479 --> 00:07:32,080
from that regard

229
00:07:32,080 --> 00:07:33,759
um and then sort of

230
00:07:33,759 --> 00:07:35,919
meta component so

231
00:07:35,919 --> 00:07:37,759
cryptographers love constant time they

232
00:07:37,759 --> 00:07:40,080
love instructions that randomly break

233
00:07:40,080 --> 00:07:43,360
their assumptions about how

234
00:07:43,360 --> 00:07:44,879
computations work and whether or not

235
00:07:44,879 --> 00:07:47,199
they are data dependent and we have

236
00:07:47,199 --> 00:07:49,440
defined a mechanism for cpus to tell

237
00:07:49,440 --> 00:07:51,840
software i promise that all of these

238
00:07:51,840 --> 00:07:54,319
instructions under certain conditions do

239
00:07:54,319 --> 00:07:56,639
not have data dependent latency

240
00:07:56,639 --> 00:07:59,039
um there are a few more caveats to it um

241
00:07:59,039 --> 00:08:00,639
it doesn't stop you being willfully

242
00:08:00,639 --> 00:08:03,120
silly like doing um secret dependent

243
00:08:03,120 --> 00:08:05,280
branches but as long as you write your

244
00:08:05,280 --> 00:08:07,039
code in a particular way it means you

245
00:08:07,039 --> 00:08:08,639
can make fewer assumptions about your

246
00:08:08,639 --> 00:08:10,960
code being constant which again it's a

247
00:08:10,960 --> 00:08:13,039
first like no other iso has this this

248
00:08:13,039 --> 00:08:14,319
capability to sort of tell the

249
00:08:14,319 --> 00:08:16,560
programmer that yes it's safe to do a

250
00:08:16,560 --> 00:08:17,919
multiplier on my platform because the

251
00:08:17,919 --> 00:08:19,440
multiplier is constant

252
00:08:19,440 --> 00:08:21,599
to take a basic example so it's got some

253
00:08:21,599 --> 00:08:23,120
interesting parts and that's that's a

254
00:08:23,120 --> 00:08:24,720
very very quick overview of everything

255
00:08:24,720 --> 00:08:27,360
that's in the in the extension

256
00:08:27,360 --> 00:08:28,160
so

257
00:08:28,160 --> 00:08:30,240
the short-term roadmap is to get it all

258
00:08:30,240 --> 00:08:33,440
uh ratified in december there's a big um

259
00:08:33,440 --> 00:08:35,200
the risk five summit is a big yearly

260
00:08:35,200 --> 00:08:37,200
sort of jamboree of everyone involved in

261
00:08:37,200 --> 00:08:38,799
risk five and it's there that the board

262
00:08:38,799 --> 00:08:41,519
of directors meet and vote to

263
00:08:41,519 --> 00:08:43,440
accept things allegedly it's a rubber

264
00:08:43,440 --> 00:08:44,880
stamp but i intend to go there and lock

265
00:08:44,880 --> 00:08:46,399
them in a room until they actually

266
00:08:46,399 --> 00:08:49,040
gratify our extension um and then we'll

267
00:08:49,040 --> 00:08:50,240
be moving back onto the vector

268
00:08:50,240 --> 00:08:52,320
cryptography stuff so this is about

269
00:08:52,320 --> 00:08:54,959
taking um yeah getting the sort of more

270
00:08:54,959 --> 00:08:56,880
high performance instructions together

271
00:08:56,880 --> 00:08:58,320
we have a fairly good idea of what those

272
00:08:58,320 --> 00:09:00,959
instructions will look like um but by

273
00:09:00,959 --> 00:09:02,640
the time december rolls around we'll

274
00:09:02,640 --> 00:09:05,519
hopefully have nist telling us which

275
00:09:05,519 --> 00:09:06,880
post-quantum algorithms have become

276
00:09:06,880 --> 00:09:09,200
standardized so the scope for looking at

277
00:09:09,200 --> 00:09:10,800
what new instructions or which other

278
00:09:10,800 --> 00:09:13,040
instructions that already exist would we

279
00:09:13,040 --> 00:09:14,399
want to include in a cryptography

280
00:09:14,399 --> 00:09:16,320
extension and then the final component

281
00:09:16,320 --> 00:09:17,519
is is what we're doing right now it's

282
00:09:17,519 --> 00:09:19,760
pushing risk 5 into the community so

283
00:09:19,760 --> 00:09:21,680
that researchers and industry know that

284
00:09:21,680 --> 00:09:23,760
as a platform for sort of security

285
00:09:23,760 --> 00:09:25,920
oriented products risk fires is a really

286
00:09:25,920 --> 00:09:27,920
good starting point so that's the short

287
00:09:27,920 --> 00:09:29,040
term

288
00:09:29,040 --> 00:09:31,279
medium and long term well post quantum

289
00:09:31,279 --> 00:09:32,800
is going to be around that transition

290
00:09:32,800 --> 00:09:34,880
isn't going to happen overnight so we

291
00:09:34,880 --> 00:09:36,320
want to look at things like efficient

292
00:09:36,320 --> 00:09:38,320
implementations of its on-risk fire

293
00:09:38,320 --> 00:09:40,480
specifically a lot of the previous work

294
00:09:40,480 --> 00:09:41,760
that i've been aware of has mainly

295
00:09:41,760 --> 00:09:44,160
looked at um things like arm and x86 so

296
00:09:44,160 --> 00:09:46,240
there's a lot to do there on risk five

297
00:09:46,240 --> 00:09:47,360
um

298
00:09:47,360 --> 00:09:48,560
the next lightweight cryptography

299
00:09:48,560 --> 00:09:52,000
competition has um in my humble opinion

300
00:09:52,000 --> 00:09:53,360
wrongly picked only one sort of

301
00:09:53,360 --> 00:09:55,360
benchmarking platform the armed cortex

302
00:09:55,360 --> 00:09:56,320
m4

303
00:09:56,320 --> 00:09:57,680
what happens if you put these things to

304
00:09:57,680 --> 00:10:00,240
risk five do does does nist's evaluation

305
00:10:00,240 --> 00:10:02,399
criteria completely change this would be

306
00:10:02,399 --> 00:10:04,720
an interesting thing to look at um and

307
00:10:04,720 --> 00:10:06,640
again a lot of these algorithms you know

308
00:10:06,640 --> 00:10:08,640
they're being designed explicitly with

309
00:10:08,640 --> 00:10:10,560
sort of side channel security

310
00:10:10,560 --> 00:10:13,040
um considerations there uh how do those

311
00:10:13,040 --> 00:10:14,959
translate across risk five these are a

312
00:10:14,959 --> 00:10:16,720
lot of really interesting questions and

313
00:10:16,720 --> 00:10:18,880
then more generally we want uh to

314
00:10:18,880 --> 00:10:20,320
produce things like advice and guidance

315
00:10:20,320 --> 00:10:23,120
for people how do i do an efficient

316
00:10:23,120 --> 00:10:25,680
x on risk five related to um

317
00:10:25,680 --> 00:10:28,320
cryptography um and that's you know

318
00:10:28,320 --> 00:10:29,600
slightly less technical but more just

319
00:10:29,600 --> 00:10:30,800
making sure that people don't have to

320
00:10:30,800 --> 00:10:32,560
reinvent the wheel

321
00:10:32,560 --> 00:10:34,800
um

322
00:10:35,040 --> 00:10:36,720
and we want your help you know does this

323
00:10:36,720 --> 00:10:38,240
align with your research are we are we

324
00:10:38,240 --> 00:10:39,839
missing anything uh the reason i got

325
00:10:39,839 --> 00:10:41,200
involved with risk in the first place

326
00:10:41,200 --> 00:10:42,959
was because i thought oh there's a gap

327
00:10:42,959 --> 00:10:44,640
here we can do fast cryptography for

328
00:10:44,640 --> 00:10:47,600
small devices and i you know if you

329
00:10:47,600 --> 00:10:49,360
offer to if you offer to do some work

330
00:10:49,360 --> 00:10:51,680
they will take you up on it um so bear

331
00:10:51,680 --> 00:10:52,880
that in mind

332
00:10:52,880 --> 00:10:55,120
um

333
00:10:55,120 --> 00:10:56,399
and

334
00:10:56,399 --> 00:10:58,240
yeah it's basically

335
00:10:58,240 --> 00:11:01,360
yeah okay that was easy um so in terms

336
00:11:01,360 --> 00:11:02,880
of getting started how do you actually

337
00:11:02,880 --> 00:11:04,320
get involved and start looking at this

338
00:11:04,320 --> 00:11:05,680
extension because it's very new there

339
00:11:05,680 --> 00:11:08,000
are no chips you can buy with it in

340
00:11:08,000 --> 00:11:10,079
um the first place to go is our github

341
00:11:10,079 --> 00:11:11,920
which i've mentioned already um you can

342
00:11:11,920 --> 00:11:13,839
see the the spec on the on the right

343
00:11:13,839 --> 00:11:14,720
there

344
00:11:14,720 --> 00:11:15,920
and then everything else is pretty

345
00:11:15,920 --> 00:11:17,519
self-explanatory but this has everything

346
00:11:17,519 --> 00:11:19,440
in it that you need to get going

347
00:11:19,440 --> 00:11:20,240
um

348
00:11:20,240 --> 00:11:22,399
we also have a wiki which is uh linked

349
00:11:22,399 --> 00:11:25,760
to there um which sort of uh basically

350
00:11:25,760 --> 00:11:27,600
can it gets updated weekly with

351
00:11:27,600 --> 00:11:29,040
everything we've done in the last week

352
00:11:29,040 --> 00:11:30,880
or so as a task group and where we're

353
00:11:30,880 --> 00:11:32,560
going in the short term

354
00:11:32,560 --> 00:11:34,880
um this is mostly used by the the people

355
00:11:34,880 --> 00:11:36,640
who manage the risk five standardization

356
00:11:36,640 --> 00:11:38,480
process but it's quite good as a sort of

357
00:11:38,480 --> 00:11:40,399
at a glance these are all the known

358
00:11:40,399 --> 00:11:41,680
implementations these are all the

359
00:11:41,680 --> 00:11:44,240
example codes that sort of thing

360
00:11:44,240 --> 00:11:45,120
um

361
00:11:45,120 --> 00:11:46,800
and then yeah like helena mentioned all

362
00:11:46,800 --> 00:11:49,920
the mailing lists are public

363
00:11:49,920 --> 00:11:52,399
so you can view this um just yourself

364
00:11:52,399 --> 00:11:54,079
normally if you want to actually

365
00:11:54,079 --> 00:11:57,360
sort of subscribe and join in

366
00:11:57,360 --> 00:11:59,839
oh that's terrible they always turn up

367
00:11:59,839 --> 00:12:01,120
when you're in the middle of a meeting

368
00:12:01,120 --> 00:12:02,639
sorry about that folks

369
00:12:02,639 --> 00:12:04,079
um

370
00:12:04,079 --> 00:12:06,480
my blooming doorbell um

371
00:12:06,480 --> 00:12:09,200
where was i oh yeah the mailing list

372
00:12:09,200 --> 00:12:12,000
it's all public um if you want to

373
00:12:12,000 --> 00:12:13,920
join it's free for academic members

374
00:12:13,920 --> 00:12:15,360
which i think probably accounts for a

375
00:12:15,360 --> 00:12:16,800
lot of the chess crowd so you've really

376
00:12:16,800 --> 00:12:18,800
got no excuse not to get involved

377
00:12:18,800 --> 00:12:19,680
um

378
00:12:19,680 --> 00:12:21,200
the actual links for these will make

379
00:12:21,200 --> 00:12:23,360
sure that you have the slides uh later

380
00:12:23,360 --> 00:12:25,360
on so those are all the sort of direct

381
00:12:25,360 --> 00:12:26,800
links to the slides that i just showed

382
00:12:26,800 --> 00:12:28,880
you and yeah like i say what we're

383
00:12:28,880 --> 00:12:30,480
actually looking for is efficient

384
00:12:30,480 --> 00:12:32,399
implementations and guidance on how to

385
00:12:32,399 --> 00:12:33,440
do that

386
00:12:33,440 --> 00:12:36,320
novel uses of risk five uh sort of the

387
00:12:36,320 --> 00:12:37,839
existing instructions and new

388
00:12:37,839 --> 00:12:39,519
instructions there's a high bar for

389
00:12:39,519 --> 00:12:41,760
introducing new instructions but we've

390
00:12:41,760 --> 00:12:43,279
shown that you you can be novel and

391
00:12:43,279 --> 00:12:45,440
introduce them there's been you know

392
00:12:45,440 --> 00:12:47,040
it's one of those things that's sort of

393
00:12:47,040 --> 00:12:48,480
making risk quite a bit different from

394
00:12:48,480 --> 00:12:50,839
things like arm

395
00:12:50,839 --> 00:12:53,440
um and yeah what what other things are

396
00:12:53,440 --> 00:12:54,880
we missing we would like to hear from

397
00:12:54,880 --> 00:12:57,040
you basically uh so that has been quite

398
00:12:57,040 --> 00:12:59,440
a whistle stop tour of the extension i

399
00:12:59,440 --> 00:13:01,120
have no idea how i'm doing for time but

400
00:13:01,120 --> 00:13:02,639
i hope there's still time for questions

401
00:13:02,639 --> 00:13:03,920
so yeah thank you very much for

402
00:13:03,920 --> 00:13:05,040
listening

403
00:13:05,040 --> 00:13:06,880
and i will stop

404
00:13:06,880 --> 00:13:09,439
sharing

405
00:13:10,000 --> 00:13:12,000
god that was exhausting

406
00:13:12,000 --> 00:13:13,519
so you're well ahead of time we've got

407
00:13:13,519 --> 00:13:16,399
plenty of time questions and there's

408
00:13:16,399 --> 00:13:19,600
a few flooding into the chats

409
00:13:19,600 --> 00:13:20,959
so

410
00:13:20,959 --> 00:13:22,160
i don't know if you can see the chat

411
00:13:22,160 --> 00:13:24,079
then but let me read them out anyway so

412
00:13:24,079 --> 00:13:26,320
marcel asks did i understand correctly

413
00:13:26,320 --> 00:13:28,959
risk five with crypto extensions

414
00:13:28,959 --> 00:13:30,800
provides guarantees about the constant

415
00:13:30,800 --> 00:13:32,160
timeless of assembly language

416
00:13:32,160 --> 00:13:33,600
instructions

417
00:13:33,600 --> 00:13:37,040
yes so it can provide that guarantee it

418
00:13:37,040 --> 00:13:37,839
um

419
00:13:37,839 --> 00:13:40,800
basically uh for a subset of common risk

420
00:13:40,800 --> 00:13:43,199
five instructions which

421
00:13:43,199 --> 00:13:44,560
uh are known to be useful for

422
00:13:44,560 --> 00:13:46,240
cryptography so that's everything from

423
00:13:46,240 --> 00:13:48,480
sort of rotations to shifts to bitwise

424
00:13:48,480 --> 00:13:51,279
operations to integer multipliers

425
00:13:51,279 --> 00:13:53,040
um if

426
00:13:53,040 --> 00:13:55,120
the cpu vendor has implemented the

427
00:13:55,120 --> 00:13:57,199
constant time extension

428
00:13:57,199 --> 00:14:00,079
there's a way to interrogate that and

429
00:14:00,079 --> 00:14:02,720
you can you can be sure that uh your

430
00:14:02,720 --> 00:14:04,880
particular risk five core has a constant

431
00:14:04,880 --> 00:14:07,920
time multiplier or you know um

432
00:14:07,920 --> 00:14:09,199
won't undermine your assumptions that

433
00:14:09,199 --> 00:14:12,320
way it doesn't cover things like caching

434
00:14:12,320 --> 00:14:14,240
it doesn't cover loads and stores and it

435
00:14:14,240 --> 00:14:16,959
doesn't cover branching on secret values

436
00:14:16,959 --> 00:14:17,920
so

437
00:14:17,920 --> 00:14:20,000
it doesn't cover the really dumb stuff

438
00:14:20,000 --> 00:14:21,519
but some of the more subtle things that

439
00:14:21,519 --> 00:14:23,279
can undermine your assumptions

440
00:14:23,279 --> 00:14:25,760
that it's got you covered yes

441
00:14:25,760 --> 00:14:27,360
and this is new so we want people to

442
00:14:27,360 --> 00:14:28,880
sort of use it and interrogate it like

443
00:14:28,880 --> 00:14:30,560
have we done a good job about defining

444
00:14:30,560 --> 00:14:32,240
that yeah

445
00:14:32,240 --> 00:14:34,399
so i guess that kind of touches on a

446
00:14:34,399 --> 00:14:37,360
follow-up question so mike h asks has

447
00:14:37,360 --> 00:14:39,279
data independent latency being

448
00:14:39,279 --> 00:14:40,959
formalized at least when i tried to

449
00:14:40,959 --> 00:14:42,639
formalize this property the statement

450
00:14:42,639 --> 00:14:44,880
ended up including also the cpu is not

451
00:14:44,880 --> 00:14:46,800
from the spectre

452
00:14:46,800 --> 00:14:48,240
yes so

453
00:14:48,240 --> 00:14:50,720
we have quite a narrow definition of

454
00:14:50,720 --> 00:14:52,800
data independent latency because we are

455
00:14:52,800 --> 00:14:54,720
only dealing with individual

456
00:14:54,720 --> 00:14:56,839
instructions we're not dealing with the

457
00:14:56,839 --> 00:14:59,360
wider execution apparatus of the

458
00:14:59,360 --> 00:15:02,000
processor like reorder buffers or branch

459
00:15:02,000 --> 00:15:03,920
predictors or anything like that our

460
00:15:03,920 --> 00:15:05,920
definition is simply that

461
00:15:05,920 --> 00:15:07,519
regardless of the inputs to the

462
00:15:07,519 --> 00:15:09,120
instruction so the values going in the

463
00:15:09,120 --> 00:15:10,160
registers

464
00:15:10,160 --> 00:15:11,839
this instruction will always take the

465
00:15:11,839 --> 00:15:14,639
same amount of time to execute in terms

466
00:15:14,639 --> 00:15:16,560
of latency or throughput uh there's no

467
00:15:16,560 --> 00:15:18,399
like early out mechanism or whatnot so

468
00:15:18,399 --> 00:15:19,440
we have we have quite a narrow

469
00:15:19,440 --> 00:15:22,000
definition um it wasn't designed to get

470
00:15:22,000 --> 00:15:23,519
around issues like

471
00:15:23,519 --> 00:15:25,440
um meltdown inspector it was it was

472
00:15:25,440 --> 00:15:29,600
really just starting with the basics

473
00:15:30,079 --> 00:15:31,279
um

474
00:15:31,279 --> 00:15:34,079
so a question about the entropy source

475
00:15:34,079 --> 00:15:34,880
uh

476
00:15:34,880 --> 00:15:35,920
boan

477
00:15:35,920 --> 00:15:38,000
asks will the entropy source of risk

478
00:15:38,000 --> 00:15:40,480
five stick to or rely on one random

479
00:15:40,480 --> 00:15:42,880
physical phenomena or open

480
00:15:42,880 --> 00:15:44,639
uh be open to other noise sources

481
00:15:44,639 --> 00:15:46,560
compliant with some rules

482
00:15:46,560 --> 00:15:49,600
uh the latter so we don't care where you

483
00:15:49,600 --> 00:15:51,199
get your entropy from

484
00:15:51,199 --> 00:15:53,519
we do care that the entropy is of

485
00:15:53,519 --> 00:15:56,079
sufficient quality and we link to

486
00:15:56,079 --> 00:15:59,120
various different standards and

487
00:15:59,120 --> 00:16:01,839
uh sort of in industry bodies about the

488
00:16:01,839 --> 00:16:03,360
quality of the entropy requirements but

489
00:16:03,360 --> 00:16:04,639
whether you get that from something like

490
00:16:04,639 --> 00:16:06,160
a ring oscillator

491
00:16:06,160 --> 00:16:09,600
or um various other sources i forget

492
00:16:09,600 --> 00:16:11,440
them exactly right oscillators the easy

493
00:16:11,440 --> 00:16:13,279
one for me to ring it's a reason about

494
00:16:13,279 --> 00:16:15,839
yeah we don't mind uh as long as it's of

495
00:16:15,839 --> 00:16:17,360
high quality

496
00:16:17,360 --> 00:16:19,120
so i guess the difficulty there is the

497
00:16:19,120 --> 00:16:22,399
remit of being an instruction set versus

498
00:16:22,399 --> 00:16:24,240
kind of straying into the implementation

499
00:16:24,240 --> 00:16:28,000
of that yeah that is difficult and

500
00:16:28,000 --> 00:16:29,680
the thing about an entropy source is of

501
00:16:29,680 --> 00:16:31,120
course it only takes one person to

502
00:16:31,120 --> 00:16:32,800
implement a bad entropy source before

503
00:16:32,800 --> 00:16:34,160
the rest of the risk five name is

504
00:16:34,160 --> 00:16:35,279
tarnished

505
00:16:35,279 --> 00:16:37,759
um so we're sort of expecting people to

506
00:16:37,759 --> 00:16:39,440
to look at the particular cpu they're

507
00:16:39,440 --> 00:16:41,360
running on maybe and say you know do i

508
00:16:41,360 --> 00:16:43,680
trust this entropy source um we're also

509
00:16:43,680 --> 00:16:45,920
hoping that market forces vigorously

510
00:16:45,920 --> 00:16:48,160
punish anyone who puts out a bad entropy

511
00:16:48,160 --> 00:16:49,199
source

512
00:16:49,199 --> 00:16:50,720
yes

513
00:16:50,720 --> 00:16:52,000
okay so there's a few more questions

514
00:16:52,000 --> 00:16:53,199
we've got plenty of time so i'm just

515
00:16:53,199 --> 00:16:55,279
going to keep keep asking them

516
00:16:55,279 --> 00:16:56,959
yeah i've dug myself this hole that's

517
00:16:56,959 --> 00:17:00,399
fine so alexandra asks regarding the

518
00:17:00,399 --> 00:17:02,000
vectoring instructions do you plan to

519
00:17:02,000 --> 00:17:03,519
make

520
00:17:03,519 --> 00:17:05,599
make them work on extended size

521
00:17:05,599 --> 00:17:08,160
registers like arm neon

522
00:17:08,160 --> 00:17:09,199
um

523
00:17:09,199 --> 00:17:10,559
so

524
00:17:10,559 --> 00:17:13,119
yes uh without being an expert on arm

525
00:17:13,119 --> 00:17:15,760
neon um the risk biovector extension is

526
00:17:15,760 --> 00:17:17,839
quite different in the sense that it's

527
00:17:17,839 --> 00:17:20,640
it is designed to work on any unknown

528
00:17:20,640 --> 00:17:21,839
length of

529
00:17:21,839 --> 00:17:24,640
data um with as long as you write your

530
00:17:24,640 --> 00:17:26,559
code in a particular way

531
00:17:26,559 --> 00:17:27,839
um

532
00:17:27,839 --> 00:17:29,360
for the aes instructions which are

533
00:17:29,360 --> 00:17:31,200
probably the easier ones to sort of

534
00:17:31,200 --> 00:17:34,640
imagine um as long as you can do 128

535
00:17:34,640 --> 00:17:35,600
bits of

536
00:17:35,600 --> 00:17:36,799
um

537
00:17:36,799 --> 00:17:39,200
input you can do a whole sort of a well

538
00:17:39,200 --> 00:17:40,720
256 bits because you've got to get the

539
00:17:40,720 --> 00:17:42,799
round key in there um

540
00:17:42,799 --> 00:17:43,840
yeah we're expecting to have an

541
00:17:43,840 --> 00:17:45,039
instruction that does a whole round's

542
00:17:45,039 --> 00:17:47,360
worth and if you've got vector registers

543
00:17:47,360 --> 00:17:48,640
that are

544
00:17:48,640 --> 00:17:49,600
um

545
00:17:49,600 --> 00:17:52,480
256 bits long you can do two separate

546
00:17:52,480 --> 00:17:55,360
instances of aes at once

547
00:17:55,360 --> 00:17:57,840
and i think the risk five uh vector

548
00:17:57,840 --> 00:17:59,280
registers cannot go all the way up to

549
00:17:59,280 --> 00:18:03,200
being like 4k bits or something crazy so

550
00:18:03,200 --> 00:18:05,760
yes the idea is to make it work properly

551
00:18:05,760 --> 00:18:08,799
with the vector extension

552
00:18:10,160 --> 00:18:10,450
um

553
00:18:10,450 --> 00:18:12,080
[Music]

554
00:18:12,080 --> 00:18:13,679
seal view

555
00:18:13,679 --> 00:18:15,679
i guess the question here is basically

556
00:18:15,679 --> 00:18:17,679
to provide a bit more detail about what

557
00:18:17,679 --> 00:18:20,320
the vector extension supports in terms

558
00:18:20,320 --> 00:18:21,520
of

559
00:18:21,520 --> 00:18:23,280
instructions and

560
00:18:23,280 --> 00:18:25,440
yeah constructions based based on those

561
00:18:25,440 --> 00:18:26,480
so

562
00:18:26,480 --> 00:18:27,919
for example does it support elliptic

563
00:18:27,919 --> 00:18:29,280
curves i guess

564
00:18:29,280 --> 00:18:31,440
yeah so a lot of our work will be

565
00:18:31,440 --> 00:18:33,600
looking at the existing risk five vector

566
00:18:33,600 --> 00:18:36,160
instructions and making sure that they

567
00:18:36,160 --> 00:18:38,559
are used they are appropriate for for

568
00:18:38,559 --> 00:18:40,320
whatever sort of public key crypto that

569
00:18:40,320 --> 00:18:42,000
your your asymmetric crypto that you're

570
00:18:42,000 --> 00:18:43,840
trying to do because the last thing we

571
00:18:43,840 --> 00:18:45,440
will actually want to do is define new

572
00:18:45,440 --> 00:18:47,360
instructions that that's a pain for

573
00:18:47,360 --> 00:18:49,200
everyone so if we can do it well with

574
00:18:49,200 --> 00:18:51,120
the existing existing instructions and i

575
00:18:51,120 --> 00:18:53,360
think the common consensus is that we

576
00:18:53,360 --> 00:18:54,240
can

577
00:18:54,240 --> 00:18:56,559
we will simply put guidance in to say

578
00:18:56,559 --> 00:18:57,760
these are the instructions you should

579
00:18:57,760 --> 00:18:59,600
use and

580
00:18:59,600 --> 00:19:01,200
hey by the way we've got a constant time

581
00:19:01,200 --> 00:19:02,720
extension that you should

582
00:19:02,720 --> 00:19:04,880
factor into your considerations because

583
00:19:04,880 --> 00:19:06,960
the vector extension you know has

584
00:19:06,960 --> 00:19:08,799
doesn't necessarily um

585
00:19:08,799 --> 00:19:10,400
get included in our current constant

586
00:19:10,400 --> 00:19:12,799
time extension so we we might define a

587
00:19:12,799 --> 00:19:14,400
new version for that

588
00:19:14,400 --> 00:19:16,720
um

589
00:19:16,880 --> 00:19:19,039
i think that answers your question uh if

590
00:19:19,039 --> 00:19:20,480
if we need new instructions because

591
00:19:20,480 --> 00:19:22,080
there's a particularly fiddly thing that

592
00:19:22,080 --> 00:19:23,760
will get you a big speed up on something

593
00:19:23,760 --> 00:19:25,520
like a post quantum algorithm we'll

594
00:19:25,520 --> 00:19:28,640
consider it yes um

595
00:19:28,640 --> 00:19:30,080
yeah

596
00:19:30,080 --> 00:19:31,840
so i've got a quick question related to

597
00:19:31,840 --> 00:19:33,200
that you mentioned that adding

598
00:19:33,200 --> 00:19:35,360
instructions was a pain for everyone and

599
00:19:35,360 --> 00:19:36,960
i think that there was a high barrier of

600
00:19:36,960 --> 00:19:39,520
entry to selecting so maybe you could

601
00:19:39,520 --> 00:19:41,440
say a bit about how that decision making

602
00:19:41,440 --> 00:19:43,840
process works because i could see that's

603
00:19:43,840 --> 00:19:46,160
one area where you get some

604
00:19:46,160 --> 00:19:48,080
translation from

605
00:19:48,080 --> 00:19:50,080
output that appears in shares into into

606
00:19:50,080 --> 00:19:53,520
sort of standards maybe yeah so

607
00:19:53,520 --> 00:19:54,400
it's

608
00:19:54,400 --> 00:19:56,400
it's easy to propose an instruction for

609
00:19:56,400 --> 00:19:57,679
cryptography

610
00:19:57,679 --> 00:19:58,720
um

611
00:19:58,720 --> 00:20:00,640
the challenge is getting it accepted

612
00:20:00,640 --> 00:20:04,159
into a system that 99.9 of the time

613
00:20:04,159 --> 00:20:06,559
doesn't do any cryptography right risk

614
00:20:06,559 --> 00:20:08,640
five is a general purpose architecture

615
00:20:08,640 --> 00:20:11,120
so if you want to add the you know the

616
00:20:11,120 --> 00:20:14,000
ketchup accelerator instruction that's

617
00:20:14,000 --> 00:20:15,039
great

618
00:20:15,039 --> 00:20:16,559
but most of the time you're not doing

619
00:20:16,559 --> 00:20:21,039
ketchups so is that cost worth it is the

620
00:20:21,039 --> 00:20:22,640
performance increase you get from that

621
00:20:22,640 --> 00:20:24,240
worth the cost and you've got to

622
00:20:24,240 --> 00:20:25,919
convince an awful lot of people not all

623
00:20:25,919 --> 00:20:27,520
of them cryptographers most of them not

624
00:20:27,520 --> 00:20:29,600
cryptographers that what you're doing is

625
00:20:29,600 --> 00:20:30,799
worthwhile

626
00:20:30,799 --> 00:20:32,640
um and then you've got other

627
00:20:32,640 --> 00:20:34,480
considerations like

628
00:20:34,480 --> 00:20:35,840
um say you've implemented your

629
00:20:35,840 --> 00:20:37,360
instruction and it works great on your

630
00:20:37,360 --> 00:20:38,640
fpga

631
00:20:38,640 --> 00:20:39,520
but

632
00:20:39,520 --> 00:20:41,360
you're only running your fpga at sort of

633
00:20:41,360 --> 00:20:43,760
50 100 megahertz well

634
00:20:43,760 --> 00:20:45,280
someone in the risk five space will ask

635
00:20:45,280 --> 00:20:46,559
you okay what happens if i try and

636
00:20:46,559 --> 00:20:48,400
implement your instruction with my cpu

637
00:20:48,400 --> 00:20:50,559
running at a gigahertz is that extra

638
00:20:50,559 --> 00:20:52,799
instruction really implementable

639
00:20:52,799 --> 00:20:54,720
in in that sort of performance envelope

640
00:20:54,720 --> 00:20:56,720
basically there's a whole other bunch of

641
00:20:56,720 --> 00:20:58,720
considerations that

642
00:20:58,720 --> 00:20:59,840
come very much from the sort of

643
00:20:59,840 --> 00:21:01,679
industrial computer architecture space

644
00:21:01,679 --> 00:21:03,360
that the crypto community doesn't

645
00:21:03,360 --> 00:21:05,760
necessarily engage with all the time

646
00:21:05,760 --> 00:21:07,360
um and that's that's just the

647
00:21:07,360 --> 00:21:08,960
implementation side then you've also got

648
00:21:08,960 --> 00:21:11,520
to verify the instruction is it correct

649
00:21:11,520 --> 00:21:14,640
um can you verify that it's correct uh

650
00:21:14,640 --> 00:21:16,320
you know these are all all various

651
00:21:16,320 --> 00:21:17,679
different challenges when it comes to

652
00:21:17,679 --> 00:21:19,280
getting instructions accepted to risk

653
00:21:19,280 --> 00:21:20,320
five and

654
00:21:20,320 --> 00:21:22,400
um it helps when you come to us that

655
00:21:22,400 --> 00:21:24,400
you've got an answer i certainly didn't

656
00:21:24,400 --> 00:21:25,760
have all those answers when i started

657
00:21:25,760 --> 00:21:27,200
engaging with risk five and it was a

658
00:21:27,200 --> 00:21:28,799
heck of a learning curve to sort of go

659
00:21:28,799 --> 00:21:30,720
oh gosh okay these are the the extra

660
00:21:30,720 --> 00:21:33,679
things i've got to think about

661
00:21:35,760 --> 00:21:38,880
oh and while i'm at it um risk five

662
00:21:38,880 --> 00:21:41,440
really does not like instructions that

663
00:21:41,440 --> 00:21:44,960
source more than two registers uh

664
00:21:44,960 --> 00:21:47,039
that they really do put the r in risk so

665
00:21:47,039 --> 00:21:48,799
for those of you who want to have loads

666
00:21:48,799 --> 00:21:51,039
and loads of inputs to instructions

667
00:21:51,039 --> 00:21:53,039
that is a great way to sort of make

668
00:21:53,039 --> 00:21:56,960
everyone shout and get scared yeah

669
00:21:57,280 --> 00:21:58,960
okay good to know

670
00:21:58,960 --> 00:22:01,120
so i think that's about it let's maybe

671
00:22:01,120 --> 00:22:03,440
uh yeah say thanks to ben and move on to

672
00:22:03,440 --> 00:22:05,760
the next

