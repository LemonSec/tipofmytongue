1
00:00:00,080 --> 00:00:03,520
we've we've reached the halfway mark the

2
00:00:03,520 --> 00:00:06,080
fourth talk is by

3
00:00:06,080 --> 00:00:08,639
ronan lashmirez

4
00:00:08,639 --> 00:00:10,400
uh ronan is a currently a research

5
00:00:10,400 --> 00:00:12,080
engineer at inria and he's going to

6
00:00:12,080 --> 00:00:14,240
answer for us the question can we solve

7
00:00:14,240 --> 00:00:16,800
timing side channels in the cpu i hope

8
00:00:16,800 --> 00:00:18,560
the answer is yes otherwise

9
00:00:18,560 --> 00:00:21,520
it's going to be an anti-climax

10
00:00:21,520 --> 00:00:25,160
so over to you running

11
00:00:34,000 --> 00:00:36,480
ah ronin it appears your mic is not

12
00:00:36,480 --> 00:00:38,959
working

13
00:00:43,120 --> 00:00:44,559
now can you hear me

14
00:00:44,559 --> 00:00:46,480
yes

15
00:00:46,480 --> 00:00:48,800
okay so i'm going through with the

16
00:00:48,800 --> 00:00:50,399
webcam

17
00:00:50,399 --> 00:00:52,640
so can you see my slides

18
00:00:52,640 --> 00:00:54,719
yes we can

19
00:00:54,719 --> 00:00:56,079
okay perfect

20
00:00:56,079 --> 00:00:56,800
so

21
00:00:56,800 --> 00:00:59,440
thank you for the introduction then um

22
00:00:59,440 --> 00:01:02,559
and for that please uh the answer is

23
00:01:02,559 --> 00:01:04,400
more balanced than that

24
00:01:04,400 --> 00:01:06,400
so i'm ronald

25
00:01:06,400 --> 00:01:09,360
from india in france and i want to

26
00:01:09,360 --> 00:01:11,760
talk about styling such a names

27
00:01:11,760 --> 00:01:15,200
in the cpu and this talk will be related

28
00:01:15,200 --> 00:01:17,920
to the fancy informal group

29
00:01:17,920 --> 00:01:20,960
so this is my personal take on the ideas

30
00:01:20,960 --> 00:01:22,320
that we have

31
00:01:22,320 --> 00:01:24,159
so keep in mind that this is not the

32
00:01:24,159 --> 00:01:26,640
official stance of the of the group but

33
00:01:26,640 --> 00:01:29,920
just my personal opinion

34
00:01:30,240 --> 00:01:34,720
so i want to start by motivating

35
00:01:36,880 --> 00:01:39,920
i want to start by motivating the talk

36
00:01:39,920 --> 00:01:41,200
by

37
00:01:41,200 --> 00:01:43,920
showing you that the issue is far more

38
00:01:43,920 --> 00:01:46,960
general than just cash timing attacks

39
00:01:46,960 --> 00:01:49,439
and then i want to give you

40
00:01:49,439 --> 00:01:52,640
mental models on how to think this issue

41
00:01:52,640 --> 00:01:53,840
through

42
00:01:53,840 --> 00:01:55,920
then we'll talk about the isa

43
00:01:55,920 --> 00:01:57,920
modifications that we can

44
00:01:57,920 --> 00:02:02,000
propose and what are the traders

45
00:02:02,159 --> 00:02:04,479
so the motivation first so basically

46
00:02:04,479 --> 00:02:07,520
this is a meltdown attack

47
00:02:07,520 --> 00:02:10,720
what we want to do is load a secret

48
00:02:10,720 --> 00:02:12,720
at a given noun address

49
00:02:12,720 --> 00:02:14,800
and for that we'll first load the

50
00:02:14,800 --> 00:02:16,480
address then

51
00:02:16,480 --> 00:02:19,280
touch a cache line

52
00:02:19,280 --> 00:02:22,239
with the address depends on the secret

53
00:02:22,239 --> 00:02:25,040
so we'll want to chain two loads

54
00:02:25,040 --> 00:02:28,319
with one within the secret

55
00:02:29,040 --> 00:02:31,519
then the attacker can find the secret by

56
00:02:31,519 --> 00:02:33,519
finding the addresses of the data in the

57
00:02:33,519 --> 00:02:34,560
cache

58
00:02:34,560 --> 00:02:36,959
that depends now on the secret

59
00:02:36,959 --> 00:02:38,800
so there are two in fact vulnerabilities

60
00:02:38,800 --> 00:02:41,120
there the first one is the access

61
00:02:41,120 --> 00:02:42,319
control

62
00:02:42,319 --> 00:02:44,720
we normally shouldn't be able to

63
00:02:44,720 --> 00:02:46,239
load the secrets

64
00:02:46,239 --> 00:02:48,239
but there is another one that is that

65
00:02:48,239 --> 00:02:51,519
the attacker can exfiltrate data it can

66
00:02:51,519 --> 00:02:54,080
create a covert channel in order to

67
00:02:54,080 --> 00:02:56,080
transmit data where normally it

68
00:02:56,080 --> 00:02:59,040
shouldn't be possible

69
00:02:59,120 --> 00:03:01,440
so for the vocabulary vocabulary of

70
00:03:01,440 --> 00:03:02,879
cover channel

71
00:03:02,879 --> 00:03:04,959
is just a communication channel between

72
00:03:04,959 --> 00:03:07,599
two entities that are controlled by the

73
00:03:07,599 --> 00:03:10,239
same attacker so the trojan

74
00:03:10,239 --> 00:03:12,640
tries to communicate to send information

75
00:03:12,640 --> 00:03:15,040
to the spine

76
00:03:15,040 --> 00:03:17,360
in this particular case that we are

77
00:03:17,360 --> 00:03:18,480
looking into

78
00:03:18,480 --> 00:03:20,480
we just want to focus on micro

79
00:03:20,480 --> 00:03:22,720
architectural leakages meaning that the

80
00:03:22,720 --> 00:03:23,920
attacker can

81
00:03:23,920 --> 00:03:26,640
cannot send information using registers

82
00:03:26,640 --> 00:03:28,799
memories special registers

83
00:03:28,799 --> 00:03:31,760
or any architectural features

84
00:03:31,760 --> 00:03:33,920
only micro-cultural architectural

85
00:03:33,920 --> 00:03:36,159
filters will be used

86
00:03:36,159 --> 00:03:38,159
the communication will be done like that

87
00:03:38,159 --> 00:03:41,680
the trojan want to send the value i

88
00:03:41,680 --> 00:03:43,760
and will try to encode it into the

89
00:03:43,760 --> 00:03:45,680
microarchitecture

90
00:03:45,680 --> 00:03:48,000
then we'll switch to the domain of the

91
00:03:48,000 --> 00:03:51,760
spy and the spy will test a value o

92
00:03:51,760 --> 00:03:52,560
then

93
00:03:52,560 --> 00:03:54,319
we have a success if the spy can

94
00:03:54,319 --> 00:03:58,480
determine if i is equal to o

95
00:03:58,480 --> 00:03:59,439
ok

96
00:03:59,439 --> 00:04:01,040
with these two

97
00:04:01,040 --> 00:04:02,799
informations i want to give you an

98
00:04:02,799 --> 00:04:04,560
example

99
00:04:04,560 --> 00:04:07,200
so cash training attacks are well known

100
00:04:07,200 --> 00:04:09,680
now and a bit too much because a lot of

101
00:04:09,680 --> 00:04:11,200
people think that they are the only

102
00:04:11,200 --> 00:04:12,640
vulnerabilities

103
00:04:12,640 --> 00:04:14,400
so i want to show you that we can create

104
00:04:14,400 --> 00:04:16,560
a cover channel really similarly to

105
00:04:16,560 --> 00:04:18,478
caching attacks

106
00:04:18,478 --> 00:04:21,040
with for example the bht which is the

107
00:04:21,040 --> 00:04:24,240
branch historic table

108
00:04:24,240 --> 00:04:26,080
so this is the

109
00:04:26,080 --> 00:04:29,040
simplest way to do branch prediction

110
00:04:29,040 --> 00:04:30,240
basically

111
00:04:30,240 --> 00:04:32,320
you will look at the branch instruction

112
00:04:32,320 --> 00:04:35,520
addresses you will keep like the four

113
00:04:35,520 --> 00:04:37,520
lowest bits for example

114
00:04:37,520 --> 00:04:39,440
and for each of these

115
00:04:39,440 --> 00:04:41,440
values for the lowest bits you will have

116
00:04:41,440 --> 00:04:46,240
a counter from 0 to 3 that counts the

117
00:04:46,240 --> 00:04:49,759
number of taken branches out of the last

118
00:04:49,759 --> 00:04:52,000
three branches

119
00:04:52,000 --> 00:04:54,720
okay so you will see it when we replace

120
00:04:54,720 --> 00:04:57,280
the attack

121
00:04:57,280 --> 00:04:58,960
to do the communication will have a

122
00:04:58,960 --> 00:05:01,600
gadget which is filled with

123
00:05:01,600 --> 00:05:02,479
branch

124
00:05:02,479 --> 00:05:03,919
instructions

125
00:05:03,919 --> 00:05:05,840
and more precisely will have

126
00:05:05,840 --> 00:05:08,800
instructions that branches to the end if

127
00:05:08,800 --> 00:05:12,800
a0 is lower than a1 b2's branch if lower

128
00:05:12,800 --> 00:05:15,039
than

129
00:05:15,039 --> 00:05:17,360
so first we want to clear all the

130
00:05:17,360 --> 00:05:18,479
counters

131
00:05:18,479 --> 00:05:20,080
for that we'll call the first

132
00:05:20,080 --> 00:05:23,600
instructions with a not taken condition

133
00:05:23,600 --> 00:05:27,120
so the first instruction is executed

134
00:05:27,120 --> 00:05:29,520
not taken the corresponding counter is

135
00:05:29,520 --> 00:05:30,800
decremented

136
00:05:30,800 --> 00:05:32,400
then we go to the next instructions the

137
00:05:32,400 --> 00:05:34,880
contact is decremented etc extra until

138
00:05:34,880 --> 00:05:36,720
the end

139
00:05:36,720 --> 00:05:39,120
now the treasurer wants to encode a code

140
00:05:39,120 --> 00:05:42,320
value i it will just execute one

141
00:05:42,320 --> 00:05:43,840
instructions

142
00:05:43,840 --> 00:05:47,360
at address i with the taken conditions

143
00:05:47,360 --> 00:05:50,320
so the counter will be incremented

144
00:05:50,320 --> 00:05:53,680
and we just jump to the end now

145
00:05:53,680 --> 00:05:56,400
then the spy can test for o it will do

146
00:05:56,400 --> 00:05:58,639
the same operation as the trojan with

147
00:05:58,639 --> 00:06:01,600
the taken condition

148
00:06:01,600 --> 00:06:03,840
but it will measure the time taken by

149
00:06:03,840 --> 00:06:06,400
the instruction execution

150
00:06:06,400 --> 00:06:09,520
so now if o is different than i we have

151
00:06:09,520 --> 00:06:11,360
mispredicted the branch

152
00:06:11,360 --> 00:06:13,919
so basically we have to

153
00:06:13,919 --> 00:06:16,400
rewind the execution

154
00:06:16,400 --> 00:06:18,880
execution in the hardware so it will

155
00:06:18,880 --> 00:06:22,960
take time but if i is equal to o

156
00:06:22,960 --> 00:06:25,520
then we'll have a fast execution and so

157
00:06:25,520 --> 00:06:27,919
we can measure this difference

158
00:06:27,919 --> 00:06:30,560
and this will give you that kind of

159
00:06:30,560 --> 00:06:33,120
diagrams so you have seen similar one

160
00:06:33,120 --> 00:06:36,080
from generator for example

161
00:06:36,080 --> 00:06:37,840
it's a bit simpler because i have

162
00:06:37,840 --> 00:06:40,479
deterministic benchmarks that benchmarks

163
00:06:40,479 --> 00:06:43,120
so we are visualizing

164
00:06:43,120 --> 00:06:46,560
really directly the timings the cycles

165
00:06:46,560 --> 00:06:49,599
what we see is clearly that the diagonal

166
00:06:49,599 --> 00:06:51,520
where i is equal to o

167
00:06:51,520 --> 00:06:56,080
have lower timings so this is a leakage

168
00:06:56,080 --> 00:06:58,319
in a secure design we shouldn't be

169
00:06:58,319 --> 00:07:00,319
shouldn't be able to see that so you can

170
00:07:00,319 --> 00:07:02,720
see on the right that you don't have any

171
00:07:02,720 --> 00:07:05,599
horizontal variation so you don't have

172
00:07:05,599 --> 00:07:07,759
leakage in this case

173
00:07:07,759 --> 00:07:10,000
so these diagrams are

174
00:07:10,000 --> 00:07:12,560
built using our benchmark suits which is

175
00:07:12,560 --> 00:07:14,960
open source and you can find

176
00:07:14,960 --> 00:07:17,680
on our gitlab with the name timestag

177
00:07:17,680 --> 00:07:18,639
patch

178
00:07:18,639 --> 00:07:21,599
if you want to test it

179
00:07:21,759 --> 00:07:22,880
so now

180
00:07:22,880 --> 00:07:24,960
how do you how do we think about this

181
00:07:24,960 --> 00:07:25,919
issue

182
00:07:25,919 --> 00:07:30,000
i've shown you an attack with the bht

183
00:07:30,000 --> 00:07:31,680
the bench history table

184
00:07:31,680 --> 00:07:34,880
but in fact the problem lies in any

185
00:07:34,880 --> 00:07:36,720
shared resource

186
00:07:36,720 --> 00:07:38,479
any shared resource can be the support

187
00:07:38,479 --> 00:07:41,360
of the covert channel and buffer and

188
00:07:41,360 --> 00:07:44,160
execution units because its availability

189
00:07:44,160 --> 00:07:45,840
is one bit of information

190
00:07:45,840 --> 00:07:48,560
any finite state machine any abuse boost

191
00:07:48,560 --> 00:07:49,680
etc

192
00:07:49,680 --> 00:07:51,440
any memory

193
00:07:51,440 --> 00:07:53,759
so now you can see the scope of the

194
00:07:53,759 --> 00:07:54,960
issue we have

195
00:07:54,960 --> 00:07:57,039
on our hands

196
00:07:57,039 --> 00:07:59,440
caches are not superb

197
00:07:59,440 --> 00:08:02,960
it's really the world macro architecture

198
00:08:02,960 --> 00:08:04,800
but in fact the fact that we have this

199
00:08:04,800 --> 00:08:07,120
to catch is usually okay

200
00:08:07,120 --> 00:08:09,759
so the leakage is the this is

201
00:08:09,759 --> 00:08:13,039
because it's enhanced performances

202
00:08:13,039 --> 00:08:14,639
but sometimes

203
00:08:14,639 --> 00:08:16,639
you'd want to prevent it and that's

204
00:08:16,639 --> 00:08:17,919
where we have a problem because the

205
00:08:17,919 --> 00:08:20,400
hardware cannot know when it could

206
00:08:20,400 --> 00:08:24,000
prevent leakage and when it is okay

207
00:08:24,000 --> 00:08:26,479
so this is the distance between

208
00:08:26,479 --> 00:08:29,360
the gay newspaper uh the new hardware

209
00:08:29,360 --> 00:08:32,560
software contracts

210
00:08:33,120 --> 00:08:36,399
and how can we do this now

211
00:08:36,399 --> 00:08:38,958
in today's hardware so we have mainly

212
00:08:38,958 --> 00:08:42,240
two way to do security

213
00:08:42,240 --> 00:08:44,080
to interface for securities the first

214
00:08:44,080 --> 00:08:45,920
one is the interface between kernel and

215
00:08:45,920 --> 00:08:48,160
users so the privileges

216
00:08:48,160 --> 00:08:49,760
which is an access control to the core

217
00:08:49,760 --> 00:08:51,360
configuration

218
00:08:51,360 --> 00:08:53,760
but we also have processes

219
00:08:53,760 --> 00:08:55,120
where

220
00:08:55,120 --> 00:08:57,519
where each process defines the memory

221
00:08:57,519 --> 00:09:00,480
mapping and so define a memory space

222
00:09:00,480 --> 00:09:02,399
so processes define an access control to

223
00:09:02,399 --> 00:09:05,200
memory addresses

224
00:09:05,200 --> 00:09:07,519
so we can use these tools in order to

225
00:09:07,519 --> 00:09:09,920
improve our security but what about unix

226
00:09:09,920 --> 00:09:12,080
server dealing simultaneously different

227
00:09:12,080 --> 00:09:13,120
users

228
00:09:13,120 --> 00:09:14,560
today we are using

229
00:09:14,560 --> 00:09:16,320
insecure servers by using different

230
00:09:16,320 --> 00:09:19,760
processes to deal with each user

231
00:09:19,760 --> 00:09:22,640
but it is not really

232
00:09:22,640 --> 00:09:25,200
a tool to do that or you can think about

233
00:09:25,200 --> 00:09:26,959
a clone machine with several vms

234
00:09:26,959 --> 00:09:28,160
runnings how do you prevent

235
00:09:28,160 --> 00:09:29,760
communications between the virtual

236
00:09:29,760 --> 00:09:32,240
machines

237
00:09:32,800 --> 00:09:36,240
so basically what we want is explicit

238
00:09:36,240 --> 00:09:38,720
security domains

239
00:09:38,720 --> 00:09:40,959
so we are we want to have domain

240
00:09:40,959 --> 00:09:43,040
boundaries defined by the application

241
00:09:43,040 --> 00:09:45,680
logic but enforced in the

242
00:09:45,680 --> 00:09:47,360
microarchitecture

243
00:09:47,360 --> 00:09:49,440
and of course the boundaries must be

244
00:09:49,440 --> 00:09:51,440
communicated to the hardware this is

245
00:09:51,440 --> 00:09:53,040
where the iss instruction set

246
00:09:53,040 --> 00:09:56,880
architecture must be modified

247
00:09:58,320 --> 00:10:00,640
now we have two kinds of showing

248
00:10:00,640 --> 00:10:03,519
temporal sharings so this is where when

249
00:10:03,519 --> 00:10:05,600
security domains use the same resource

250
00:10:05,600 --> 00:10:08,480
alternatively in time

251
00:10:08,480 --> 00:10:10,720
think about about a cache when you have

252
00:10:10,720 --> 00:10:13,360
a process then a new process

253
00:10:13,360 --> 00:10:15,040
okay they are using the same resource or

254
00:10:15,040 --> 00:10:16,160
cache

255
00:10:16,160 --> 00:10:18,480
alternatively in time and you have also

256
00:10:18,480 --> 00:10:20,880
special sharings where

257
00:10:20,880 --> 00:10:22,800
you can use the same resource

258
00:10:22,800 --> 00:10:24,880
simply simultaneously

259
00:10:24,880 --> 00:10:27,040
by for example two domains

260
00:10:27,040 --> 00:10:28,800
so in this case think about a

261
00:10:28,800 --> 00:10:32,079
multi-threaded core with two arts

262
00:10:32,079 --> 00:10:33,920
accessing to the same

263
00:10:33,920 --> 00:10:36,000
cache again

264
00:10:36,000 --> 00:10:38,000
so now you have to split the cache to

265
00:10:38,000 --> 00:10:40,530
have indebted independence

266
00:10:40,530 --> 00:10:41,680
[Music]

267
00:10:41,680 --> 00:10:43,440
in order to be able to independently

268
00:10:43,440 --> 00:10:46,399
deal with the two domains

269
00:10:46,399 --> 00:10:48,560
i want to stress out that secure

270
00:10:48,560 --> 00:10:51,440
methylene is possible so mature escrow

271
00:10:51,440 --> 00:10:53,040
fluid

272
00:10:53,040 --> 00:10:54,720
phd students

273
00:10:54,720 --> 00:10:56,000
de-design

274
00:10:56,000 --> 00:10:57,760
the cellular score with secure

275
00:10:57,760 --> 00:10:59,120
multi-threading

276
00:10:59,120 --> 00:11:02,000
so it can guarantee that the two hearts

277
00:11:02,000 --> 00:11:02,800
are

278
00:11:02,800 --> 00:11:05,040
perfectly

279
00:11:05,040 --> 00:11:07,040
independent with respect to timing

280
00:11:07,040 --> 00:11:08,959
channels

281
00:11:08,959 --> 00:11:11,440
and it's not a small a small

282
00:11:11,440 --> 00:11:13,680
fit

283
00:11:13,680 --> 00:11:15,839
you have two solutions for the two kinds

284
00:11:15,839 --> 00:11:18,320
of showings first for temple sharings

285
00:11:18,320 --> 00:11:21,040
what do you do you flush all the things

286
00:11:21,040 --> 00:11:22,720
basically when you are switching to the

287
00:11:22,720 --> 00:11:25,600
new domain you flush all the states

288
00:11:25,600 --> 00:11:27,440
remember it means that you have to

289
00:11:27,440 --> 00:11:28,560
flinch

290
00:11:28,560 --> 00:11:32,000
buffers but also finance submissions

291
00:11:32,000 --> 00:11:37,279
the access to execution units etc etc

292
00:11:37,279 --> 00:11:38,959
but it can be done

293
00:11:38,959 --> 00:11:40,959
quite easily if you modify it a bit the

294
00:11:40,959 --> 00:11:43,120
macro architecture

295
00:11:43,120 --> 00:11:45,519
but either you do secure special shanks

296
00:11:45,519 --> 00:11:47,040
now you cannot flush everything now

297
00:11:47,040 --> 00:11:48,800
because they are

298
00:11:48,800 --> 00:11:52,560
shared simultaneously it does no meaning

299
00:11:52,560 --> 00:11:54,720
and then you have a bunch of solutions

300
00:11:54,720 --> 00:11:57,200
that are quite okay but not great so you

301
00:11:57,200 --> 00:11:59,360
can partition resources in order to

302
00:11:59,360 --> 00:12:00,320
split

303
00:12:00,320 --> 00:12:03,120
each resource in for example two slots

304
00:12:03,120 --> 00:12:04,720
you can use fine-grained mutual

305
00:12:04,720 --> 00:12:06,000
threadings

306
00:12:06,000 --> 00:12:09,360
where you will lock time slots for each

307
00:12:09,360 --> 00:12:11,680
secured security domains

308
00:12:11,680 --> 00:12:13,519
for example an even

309
00:12:13,519 --> 00:12:16,959
clock cycle domain i will have access

310
00:12:16,959 --> 00:12:20,079
and on the odds clock cycle

311
00:12:20,079 --> 00:12:22,160
domain b will have access

312
00:12:22,160 --> 00:12:24,639
you can also lock the resources for the

313
00:12:24,639 --> 00:12:27,120
whole lifetime of the security domains

314
00:12:27,120 --> 00:12:29,120
so this is the kind of strategy that you

315
00:12:29,120 --> 00:12:31,440
can do

316
00:12:32,160 --> 00:12:37,800
but for that we have to modify the isa

317
00:12:38,000 --> 00:12:39,440
first i want to

318
00:12:39,440 --> 00:12:40,720
start

319
00:12:40,720 --> 00:12:42,560
by stressing out that we have a

320
00:12:42,560 --> 00:12:45,440
fundamental philosophy problems of what

321
00:12:45,440 --> 00:12:47,200
is the iso world

322
00:12:47,200 --> 00:12:50,079
you have two visions first the isis air

323
00:12:50,079 --> 00:12:52,560
is an interface to allow the software to

324
00:12:52,560 --> 00:12:54,079
control the machine

325
00:12:54,079 --> 00:12:55,600
so you have instructions in order to

326
00:12:55,600 --> 00:12:58,160
tune the machine to do exactly what you

327
00:12:58,160 --> 00:12:59,360
want to do

328
00:12:59,360 --> 00:13:01,760
or it can also be an abstract interface

329
00:13:01,760 --> 00:13:04,480
to the hardware now to hide

330
00:13:04,480 --> 00:13:06,639
the implementations

331
00:13:06,639 --> 00:13:09,040
for the software use

332
00:13:09,040 --> 00:13:11,680
but you can only pick one either you add

333
00:13:11,680 --> 00:13:14,240
the implementations or you allow to

334
00:13:14,240 --> 00:13:16,480
control the machine

335
00:13:16,480 --> 00:13:17,920
and it will give

336
00:13:17,920 --> 00:13:20,880
two ways to modify the isa either you

337
00:13:20,880 --> 00:13:22,800
add restrictions to control all the

338
00:13:22,800 --> 00:13:25,519
micro architectural structures or you

339
00:13:25,519 --> 00:13:27,839
add instructions in order to define and

340
00:13:27,839 --> 00:13:31,120
end up secreted domains

341
00:13:32,320 --> 00:13:34,880
then you have two semantics another two

342
00:13:34,880 --> 00:13:36,240
control domains

343
00:13:36,240 --> 00:13:38,959
the first one are the fancies so this is

344
00:13:38,959 --> 00:13:41,279
the stateless definition of security

345
00:13:41,279 --> 00:13:44,399
domains you only delimit the boundaries

346
00:13:44,399 --> 00:13:46,480
of the security domains so i'm now

347
00:13:46,480 --> 00:13:49,360
switching to a new security domain

348
00:13:49,360 --> 00:13:50,320
buy it

349
00:13:50,320 --> 00:13:52,560
or you have context stateful security

350
00:13:52,560 --> 00:13:54,639
domains where when you switch

351
00:13:54,639 --> 00:13:55,519
you

352
00:13:55,519 --> 00:13:58,639
define the new security domain id

353
00:13:58,639 --> 00:14:00,959
now i switch to the secretive domain

354
00:14:00,959 --> 00:14:04,560
with the id number one for example

355
00:14:04,560 --> 00:14:06,880
and so we have two proposals academic

356
00:14:06,880 --> 00:14:08,880
proposal funnel the first one is the

357
00:14:08,880 --> 00:14:10,880
fence t proposal from

358
00:14:10,880 --> 00:14:13,040
generalizer and all

359
00:14:13,040 --> 00:14:16,959
published for example at diets this year

360
00:14:16,959 --> 00:14:19,519
to simplify bits you have a fancy

361
00:14:19,519 --> 00:14:22,320
instructions that is able to flush all

362
00:14:22,320 --> 00:14:24,320
necessary microstructures

363
00:14:24,320 --> 00:14:26,720
and you can give

364
00:14:26,720 --> 00:14:29,040
an argument to these instructions with a

365
00:14:29,040 --> 00:14:30,399
register

366
00:14:30,399 --> 00:14:33,360
where you have several possibilities

367
00:14:33,360 --> 00:14:35,519
either this register is a bitmap in

368
00:14:35,519 --> 00:14:36,959
order to address the microstructure you

369
00:14:36,959 --> 00:14:38,240
want to flash

370
00:14:38,240 --> 00:14:40,560
or it's a value that designates the

371
00:14:40,560 --> 00:14:43,600
interface for example this is a flush

372
00:14:43,600 --> 00:14:45,440
between the process to

373
00:14:45,440 --> 00:14:47,199
go into a channel or we are going from

374
00:14:47,199 --> 00:14:50,079
process to another process etc

375
00:14:50,079 --> 00:14:52,639
or it can be also valued designating the

376
00:14:52,639 --> 00:14:53,680
risk

377
00:14:53,680 --> 00:14:56,079
of the security domain switch

378
00:14:56,079 --> 00:14:56,800
so

379
00:14:56,800 --> 00:14:58,320
i'm now switching to new security

380
00:14:58,320 --> 00:14:59,920
domains but i don't care if i leak

381
00:14:59,920 --> 00:15:03,120
information or the the old secret domain

382
00:15:03,120 --> 00:15:05,360
is critical and must not leak any

383
00:15:05,360 --> 00:15:08,079
information at all

384
00:15:08,079 --> 00:15:10,800
so as we have seen if we flush

385
00:15:10,800 --> 00:15:13,920
everything it's nice but only for temple

386
00:15:13,920 --> 00:15:14,959
sharing

387
00:15:14,959 --> 00:15:17,600
so this proposal cannot deal in itself

388
00:15:17,600 --> 00:15:19,760
with special shines

389
00:15:19,760 --> 00:15:21,440
in order to do that

390
00:15:21,440 --> 00:15:23,760
in the paper what they basically say is

391
00:15:23,760 --> 00:15:24,560
that

392
00:15:24,560 --> 00:15:27,279
you of course that only shared

393
00:15:27,279 --> 00:15:29,680
high level cash and for that you do a

394
00:15:29,680 --> 00:15:32,399
cash coloring at a level

395
00:15:32,399 --> 00:15:34,480
but so you are totally forbidden

396
00:15:34,480 --> 00:15:35,920
forbidding

397
00:15:35,920 --> 00:15:40,360
any multi-threading course

398
00:15:40,560 --> 00:15:43,519
the other proposal by us at indriya with

399
00:15:43,519 --> 00:15:46,800
mature and jack funny and john milaney

400
00:15:46,800 --> 00:15:48,800
published later this year

401
00:15:48,800 --> 00:15:51,520
is consists of domes so stateful

402
00:15:51,520 --> 00:15:52,839
[Music]

403
00:15:52,839 --> 00:15:56,079
context and what we are doing basically

404
00:15:56,079 --> 00:15:58,160
is that we will tag the domains with an

405
00:15:58,160 --> 00:16:00,000
ids that we can use in the

406
00:16:00,000 --> 00:16:02,560
microarchitecture in order to know when

407
00:16:02,560 --> 00:16:03,920
we want to flash when we want to

408
00:16:03,920 --> 00:16:06,160
partition it when we want to lock

409
00:16:06,160 --> 00:16:09,120
resources excellent later and so this

410
00:16:09,120 --> 00:16:10,160
allow

411
00:16:10,160 --> 00:16:12,240
this kind of stuff where you have two

412
00:16:12,240 --> 00:16:13,120
arts

413
00:16:13,120 --> 00:16:15,759
systems two two arts running

414
00:16:15,759 --> 00:16:18,079
simultaneously and you can prevent any

415
00:16:18,079 --> 00:16:20,560
communications using the

416
00:16:20,560 --> 00:16:24,399
for example airs l1 data cache

417
00:16:24,399 --> 00:16:26,480
what we see is that we have a cost in

418
00:16:26,480 --> 00:16:29,279
cycles here in all accesses and this is

419
00:16:29,279 --> 00:16:31,120
because we are doing fine grain test

420
00:16:31,120 --> 00:16:33,600
reading so we are we have reserved time

421
00:16:33,600 --> 00:16:36,800
slots for each security domains

422
00:16:36,800 --> 00:16:39,680
so the issue here in this proposal is

423
00:16:39,680 --> 00:16:42,720
that who choose the security domain ids

424
00:16:42,720 --> 00:16:44,880
if the attacker can choose the ids

425
00:16:44,880 --> 00:16:46,160
the world

426
00:16:46,160 --> 00:16:49,279
culture measures for

427
00:16:49,279 --> 00:16:52,399
another possibility also that we are

428
00:16:52,399 --> 00:16:54,639
investigating is that can we use process

429
00:16:54,639 --> 00:16:55,759
ids

430
00:16:55,759 --> 00:16:56,480
and

431
00:16:56,480 --> 00:16:59,519
as domain ids because the process id is

432
00:16:59,519 --> 00:17:00,720
used

433
00:17:00,720 --> 00:17:04,720
today in order to tag the tlb for the

434
00:17:04,720 --> 00:17:06,799
address translations in order to improve

435
00:17:06,799 --> 00:17:08,240
the performances

436
00:17:08,240 --> 00:17:12,640
can we infuse the two concepts maybe

437
00:17:15,199 --> 00:17:17,520
so now a bit a small slide in order to

438
00:17:17,520 --> 00:17:19,919
show you that we can go further with

439
00:17:19,919 --> 00:17:22,720
confidentiality so basically what we are

440
00:17:22,720 --> 00:17:26,079
doing with turnings is we want to ensure

441
00:17:26,079 --> 00:17:27,520
confidentiality

442
00:17:27,520 --> 00:17:30,480
in the microactual architectural states

443
00:17:30,480 --> 00:17:33,200
that basically fancy or any other

444
00:17:33,200 --> 00:17:35,679
solutions against these leakages should

445
00:17:35,679 --> 00:17:38,240
be part of a more global confidentiality

446
00:17:38,240 --> 00:17:40,160
extension

447
00:17:40,160 --> 00:17:42,320
i want to give you small ideas that show

448
00:17:42,320 --> 00:17:44,640
you that we can do stuff really easily

449
00:17:44,640 --> 00:17:46,720
for example with confidential registers

450
00:17:46,720 --> 00:17:48,240
like you declare for example four

451
00:17:48,240 --> 00:17:50,799
registers as as confidential and we are

452
00:17:50,799 --> 00:17:53,679
no longer authorized to leak data just

453
00:17:53,679 --> 00:17:56,080
just as as easy

454
00:17:56,080 --> 00:17:58,000
you cannot use them to branch you cannot

455
00:17:58,000 --> 00:18:00,480
use them for load and store analysis any

456
00:18:00,480 --> 00:18:02,799
constant time assumptions can be used

457
00:18:02,799 --> 00:18:05,200
with respect to these registers

458
00:18:05,200 --> 00:18:06,400
and you can

459
00:18:06,400 --> 00:18:09,120
add any additional other hardening that

460
00:18:09,120 --> 00:18:11,280
you want for example masking adword

461
00:18:11,280 --> 00:18:14,080
masking

462
00:18:14,080 --> 00:18:16,160
or you can also use security domain ids

463
00:18:16,160 --> 00:18:17,919
in order to perform in line memory

464
00:18:17,919 --> 00:18:20,720
encryptions where you encrypt

465
00:18:20,720 --> 00:18:22,960
data in memory upon load and stores

466
00:18:22,960 --> 00:18:24,240
instructions

467
00:18:24,240 --> 00:18:26,559
so these are quite easy to define when

468
00:18:26,559 --> 00:18:27,520
you have

469
00:18:27,520 --> 00:18:31,440
the basis for confidentiality extension

470
00:18:32,480 --> 00:18:34,160
so the conclusions

471
00:18:34,160 --> 00:18:36,640
so here's the problem we have a bunch of

472
00:18:36,640 --> 00:18:39,760
solutions but we are not exactly sure on

473
00:18:39,760 --> 00:18:42,320
the best design and we really want to

474
00:18:42,320 --> 00:18:44,480
avoid bad bad design

475
00:18:44,480 --> 00:18:45,600
and i think

476
00:18:45,600 --> 00:18:46,720
that we should learn from the

477
00:18:46,720 --> 00:18:48,720
cryptographic community

478
00:18:48,720 --> 00:18:50,880
where they show that you cannot think

479
00:18:50,880 --> 00:18:52,000
about just

480
00:18:52,000 --> 00:18:54,400
being reactive by batching new shoes as

481
00:18:54,400 --> 00:18:55,840
they happen

482
00:18:55,840 --> 00:18:58,000
which is a bit where we are now

483
00:18:58,000 --> 00:18:59,600
considering the timing issues in

484
00:18:59,600 --> 00:19:01,919
hardware

485
00:19:01,919 --> 00:19:03,440
we also have to deal with

486
00:19:03,440 --> 00:19:05,840
complexity as a security topic

487
00:19:05,840 --> 00:19:07,440
on its own

488
00:19:07,440 --> 00:19:09,280
because if we have too many security

489
00:19:09,280 --> 00:19:11,440
decisions if you have

490
00:19:11,440 --> 00:19:13,840
an extension that is too complex it

491
00:19:13,840 --> 00:19:16,240
increases the attack surface and reduces

492
00:19:16,240 --> 00:19:18,880
the security

493
00:19:18,880 --> 00:19:21,760
and at the end it must also be clear and

494
00:19:21,760 --> 00:19:24,400
simple everybody should be able to use

495
00:19:24,400 --> 00:19:25,039
it

496
00:19:25,039 --> 00:19:27,520
because if not again the security goal

497
00:19:27,520 --> 00:19:28,960
is not achieved

498
00:19:28,960 --> 00:19:30,960
and in this example i want to give you

499
00:19:30,960 --> 00:19:32,480
the example of the

500
00:19:32,480 --> 00:19:34,880
last generation crypto library so you

501
00:19:34,880 --> 00:19:37,919
don't use anymore the ies were in cbc

502
00:19:37,919 --> 00:19:40,799
mode for example with your own

503
00:19:40,799 --> 00:19:44,320
iv and when you you want your own

504
00:19:44,320 --> 00:19:46,960
library what you do is use

505
00:19:46,960 --> 00:19:49,440
lip sodium for example where you box

506
00:19:49,440 --> 00:19:50,640
encrypts

507
00:19:50,640 --> 00:19:53,120
and that's it and you let the library

508
00:19:53,120 --> 00:19:54,080
decide

509
00:19:54,080 --> 00:19:56,559
and we should i think in my opinion have

510
00:19:56,559 --> 00:20:00,720
something as easy if possible

511
00:20:00,720 --> 00:20:03,280
so thank you for listening and i'm i

512
00:20:03,280 --> 00:20:04,960
really would love to hear your opinion

513
00:20:04,960 --> 00:20:07,200
of this topic

514
00:20:07,200 --> 00:20:08,960
in order to see

515
00:20:08,960 --> 00:20:11,600
really what's everybody thinking

516
00:20:11,600 --> 00:20:14,000
thank you

517
00:20:16,480 --> 00:20:18,559
great thanks a lot ronan so i guess

518
00:20:18,559 --> 00:20:20,320
that's an invitation for questions in

519
00:20:20,320 --> 00:20:21,280
itself

520
00:20:21,280 --> 00:20:23,520
um

521
00:20:24,240 --> 00:20:25,360
so there's a

522
00:20:25,360 --> 00:20:26,880
couple appearing in the chat already let

523
00:20:26,880 --> 00:20:29,120
me let me read those out for you so nick

524
00:20:29,120 --> 00:20:31,679
asks what about out of order cpus where

525
00:20:31,679 --> 00:20:34,720
speculative execution may continue using

526
00:20:34,720 --> 00:20:36,400
and even bring back the state just

527
00:20:36,400 --> 00:20:37,840
flushed

528
00:20:37,840 --> 00:20:40,880
from the domain we just switched from

529
00:20:40,880 --> 00:20:43,280
okay so

530
00:20:43,280 --> 00:20:45,840
the two answer properties is that we

531
00:20:45,840 --> 00:20:48,240
only need a few academic papers but

532
00:20:48,240 --> 00:20:51,440
basically the idea is if you are able to

533
00:20:51,440 --> 00:20:53,760
tag the security domain in the

534
00:20:53,760 --> 00:20:55,280
microarchitecture

535
00:20:55,280 --> 00:20:58,480
you are able to revert the state also in

536
00:20:58,480 --> 00:21:00,159
the macro architecture

537
00:21:00,159 --> 00:21:03,520
for example tag your audio um

538
00:21:03,520 --> 00:21:04,640
let's say your

539
00:21:04,640 --> 00:21:07,200
control flow pass into

540
00:21:07,200 --> 00:21:09,679
your speculation

541
00:21:09,679 --> 00:21:10,720
let's say

542
00:21:10,720 --> 00:21:12,799
to say that

543
00:21:12,799 --> 00:21:14,799
you tag you take every speculation with

544
00:21:14,799 --> 00:21:17,520
the security domains and if

545
00:21:17,520 --> 00:21:20,960
the speculation is not correct you

546
00:21:20,960 --> 00:21:24,240
just slice everything that is in the

547
00:21:24,240 --> 00:21:26,559
security domains that is not in this

548
00:21:26,559 --> 00:21:28,640
element so you evade the states you

549
00:21:28,640 --> 00:21:31,200
invalidate the cache and validate all

550
00:21:31,200 --> 00:21:32,720
your microstructures

551
00:21:32,720 --> 00:21:33,840
that are

552
00:21:33,840 --> 00:21:35,760
no androids

553
00:21:35,760 --> 00:21:37,679
and basically speculations

554
00:21:37,679 --> 00:21:39,280
in two

555
00:21:39,280 --> 00:21:41,200
different security domains should be

556
00:21:41,200 --> 00:21:42,799
completely

557
00:21:42,799 --> 00:21:44,880
invisible to each other

558
00:21:44,880 --> 00:21:47,120
you cannot use any

559
00:21:47,120 --> 00:21:49,280
you will lose performance but you will

560
00:21:49,280 --> 00:21:52,080
again in security

561
00:21:52,080 --> 00:21:54,240
i'm not sure if i'm

562
00:21:54,240 --> 00:21:56,640
clear

563
00:21:56,960 --> 00:21:59,679
so of course uh the way to do properly

564
00:21:59,679 --> 00:22:02,480
that's it's far harder in practice than

565
00:22:02,480 --> 00:22:05,600
just injury

566
00:22:06,400 --> 00:22:08,880
okay so

567
00:22:08,880 --> 00:22:10,960
ben

568
00:22:10,960 --> 00:22:12,960
i asks

569
00:22:12,960 --> 00:22:15,600
so then ask if we can if it's easy to

570
00:22:15,600 --> 00:22:17,440
clear large amounts of micro

571
00:22:17,440 --> 00:22:20,000
architectural states quickly

572
00:22:20,000 --> 00:22:20,960
and

573
00:22:20,960 --> 00:22:24,080
the answer is today no

574
00:22:24,080 --> 00:22:26,559
basically you will have to

575
00:22:26,559 --> 00:22:28,000
make different products in the

576
00:22:28,000 --> 00:22:29,360
microstructures

577
00:22:29,360 --> 00:22:31,360
so the best example i think for that are

578
00:22:31,360 --> 00:22:34,640
the cache the l1 data cache and you have

579
00:22:34,640 --> 00:22:37,360
let's say two modes wide backwards

580
00:22:37,360 --> 00:22:39,520
where you will write the data back to

581
00:22:39,520 --> 00:22:41,520
the upper level cache only when you want

582
00:22:41,520 --> 00:22:43,200
to clear the states

583
00:22:43,200 --> 00:22:45,679
or you will have right through mods

584
00:22:45,679 --> 00:22:48,080
where you will update upper level cache

585
00:22:48,080 --> 00:22:51,280
as you write to the first cache

586
00:22:51,280 --> 00:22:53,120
if you have a white back and you want to

587
00:22:53,120 --> 00:22:55,360
flush everything it will take a lot of

588
00:22:55,360 --> 00:22:58,000
times you will have to transfer the wall

589
00:22:58,000 --> 00:23:01,120
l1 cache to l2 for example

590
00:23:01,120 --> 00:23:03,520
but if you have a right through cache

591
00:23:03,520 --> 00:23:06,400
then it will be fast

592
00:23:06,400 --> 00:23:08,960
what i think i think is that now

593
00:23:08,960 --> 00:23:10,880
today we are using right by cash mainly

594
00:23:10,880 --> 00:23:12,400
for performances

595
00:23:12,400 --> 00:23:14,960
but for security we should use right

596
00:23:14,960 --> 00:23:17,039
through caches you know that were the

597
00:23:17,039 --> 00:23:18,720
best trade-off between security and

598
00:23:18,720 --> 00:23:20,640
performances

599
00:23:20,640 --> 00:23:22,799
so this can be done for caches and in

600
00:23:22,799 --> 00:23:24,880
fact you can have the centered off for

601
00:23:24,880 --> 00:23:26,400
nearly every microarchitecture

602
00:23:26,400 --> 00:23:28,799
architectural state but you will have to

603
00:23:28,799 --> 00:23:31,918
design your core fonts

604
00:23:34,880 --> 00:23:38,640
okay i think it answers the questions

605
00:23:38,640 --> 00:23:41,039
so andre asked is there any public

606
00:23:41,039 --> 00:23:42,720
implementation of them switch

607
00:23:42,720 --> 00:23:46,000
instructions uh so

608
00:23:46,000 --> 00:23:47,760
today is not available it will be part

609
00:23:47,760 --> 00:23:50,240
of the artifact of our paper that will

610
00:23:50,240 --> 00:23:51,840
be out

611
00:23:51,840 --> 00:23:54,400
in november so we have to clean up the

612
00:23:54,400 --> 00:23:56,559
code but it will be available

613
00:23:56,559 --> 00:23:58,480
for november normally

614
00:23:58,480 --> 00:24:01,279
for the cadis

615
00:24:01,279 --> 00:24:04,159
so basically you have a updated

616
00:24:04,159 --> 00:24:06,080
toolchain

617
00:24:06,080 --> 00:24:10,400
programs and course that use this

618
00:24:10,400 --> 00:24:12,000
instructions

619
00:24:12,000 --> 00:24:13,520
which core are you using to implement

620
00:24:13,520 --> 00:24:16,080
this side of interest

621
00:24:16,080 --> 00:24:18,320
so we are from the sketch

622
00:24:18,320 --> 00:24:20,480
they've been done from scratch

623
00:24:20,480 --> 00:24:22,799
so typically for the for the point that

624
00:24:22,799 --> 00:24:24,159
ben uh

625
00:24:24,159 --> 00:24:26,880
was the point been made that's we try to

626
00:24:26,880 --> 00:24:29,520
modify a crow but in fact it's a lot

627
00:24:29,520 --> 00:24:31,520
harder to modify an existing core in

628
00:24:31,520 --> 00:24:33,120
order to modify all the microstructures

629
00:24:33,120 --> 00:24:35,840
to handle quick flashing then just make

630
00:24:35,840 --> 00:24:36,880
your own

631
00:24:36,880 --> 00:24:38,240
so we have two

632
00:24:38,240 --> 00:24:41,520
completely new cores for that

633
00:24:44,400 --> 00:24:46,720
okay great so well actually one last

634
00:24:46,720 --> 00:24:48,320
question we

635
00:24:48,320 --> 00:24:49,840
i guess we're up against time but maybe

636
00:24:49,840 --> 00:24:51,919
we just squeeze this in so

637
00:24:51,919 --> 00:24:54,240
yunsi asks if you revise the icy with

638
00:24:54,240 --> 00:24:56,480
additional instructions where

639
00:24:56,480 --> 00:24:58,799
where do you add these instructions to

640
00:24:58,799 --> 00:25:02,879
what stage source code or compiler

641
00:25:06,400 --> 00:25:08,960
i i think that the answer is not no so i

642
00:25:08,960 --> 00:25:10,320
think that's the question is should

643
00:25:10,320 --> 00:25:11,840
these instructions

644
00:25:11,840 --> 00:25:14,159
should be transparent to the developer

645
00:25:14,159 --> 00:25:15,679
or should they

646
00:25:15,679 --> 00:25:17,520
be available to developers

647
00:25:17,520 --> 00:25:19,760
and i think it's a good question i don't

648
00:25:19,760 --> 00:25:20,720
have

649
00:25:20,720 --> 00:25:22,880
a nice answer too

650
00:25:22,880 --> 00:25:25,679
easily of course the compilers and

651
00:25:25,679 --> 00:25:27,440
i think the operating systems should

652
00:25:27,440 --> 00:25:29,039
hide them item

653
00:25:29,039 --> 00:25:30,720
but it may be interested

654
00:25:30,720 --> 00:25:33,600
uh interesting to use them in

655
00:25:33,600 --> 00:25:35,440
applications like for example you are

656
00:25:35,440 --> 00:25:38,080
doing your server and you want to switch

657
00:25:38,080 --> 00:25:38,960
to

658
00:25:38,960 --> 00:25:41,520
to serve a new user then now you should

659
00:25:41,520 --> 00:25:43,520
use these instructions

660
00:25:43,520 --> 00:25:45,840
so the answer will depend on how easy

661
00:25:45,840 --> 00:25:48,159
they are to use and how they interact

662
00:25:48,159 --> 00:25:51,200
with the patching systems

663
00:25:53,039 --> 00:25:54,640
great okay so let's

664
00:25:54,640 --> 00:25:55,760
um

665
00:25:55,760 --> 00:25:58,080
call time thank ronan and move on to the

666
00:25:58,080 --> 00:26:00,799
next talk

