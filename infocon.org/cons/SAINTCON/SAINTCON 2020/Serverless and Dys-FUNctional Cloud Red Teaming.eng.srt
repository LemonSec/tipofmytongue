1
00:00:02,639 --> 00:00:06,080
hey

2
00:00:03,120 --> 00:00:07,279
welcome to the st con session today i'm

3
00:00:06,080 --> 00:00:10,080
going to be covering

4
00:00:07,279 --> 00:00:11,120
serverless and dysfunctional cloud red

5
00:00:10,080 --> 00:00:12,719
teaming

6
00:00:11,120 --> 00:00:14,639
uh so specifically we're going to be

7
00:00:12,719 --> 00:00:17,279
talking about how

8
00:00:14,639 --> 00:00:19,439
red teamers can leverage various

9
00:00:17,279 --> 00:00:23,359
services within cloud providers

10
00:00:19,439 --> 00:00:26,480
to get more work done

11
00:00:23,359 --> 00:00:29,279
faster better smarter

12
00:00:26,480 --> 00:00:30,480
by leveraging serverless technologies

13
00:00:29,279 --> 00:00:32,079
and i'll walk you through some of the

14
00:00:30,480 --> 00:00:33,040
options with those technologies in this

15
00:00:32,079 --> 00:00:35,920
section

16
00:00:33,040 --> 00:00:37,280
as well as a few common use cases that

17
00:00:35,920 --> 00:00:38,960
i've come up with

18
00:00:37,280 --> 00:00:40,719
that i think are you know a little bit

19
00:00:38,960 --> 00:00:44,399
outside the box so

20
00:00:40,719 --> 00:00:48,320
um yeah stay tuned it's gonna be awesome

21
00:00:44,399 --> 00:00:52,320
all right introduction so i'm bryce

22
00:00:48,320 --> 00:00:54,719
on twitter my name is tweek fox i am

23
00:00:52,320 --> 00:00:55,920
was part of the founding team of stage

24
00:00:54,719 --> 00:00:58,800
two security

25
00:00:55,920 --> 00:00:59,760
uh prior to that i founded a red team at

26
00:00:58,800 --> 00:01:02,078
adobe

27
00:00:59,760 --> 00:01:03,920
and prior to that i was a technical

28
00:01:02,079 --> 00:01:06,400
director of the nsa

29
00:01:03,920 --> 00:01:08,000
over an offensive unit and then prior to

30
00:01:06,400 --> 00:01:11,119
that i was over

31
00:01:08,000 --> 00:01:14,320
incident response and focus operations

32
00:01:11,119 --> 00:01:16,400
at homeland where we you know hunted

33
00:01:14,320 --> 00:01:19,839
down apts and

34
00:01:16,400 --> 00:01:22,960
got them off networks right so

35
00:01:19,840 --> 00:01:26,320
i in my spare time

36
00:01:22,960 --> 00:01:28,479
i also uh you know and run

37
00:01:26,320 --> 00:01:30,479
the b-side salt lake city conference uh

38
00:01:28,479 --> 00:01:33,360
with a great team

39
00:01:30,479 --> 00:01:34,799
um executing that conference every year

40
00:01:33,360 --> 00:01:36,560
as well as

41
00:01:34,799 --> 00:01:38,079
um you know big supporter love what

42
00:01:36,560 --> 00:01:41,520
troy's done with st conn

43
00:01:38,079 --> 00:01:44,559
and uh look forward to this

44
00:01:41,520 --> 00:01:44,560
event every year

45
00:01:44,799 --> 00:01:51,280
stage two security i am currently the

46
00:01:48,399 --> 00:01:51,520
chief strategy officer there and um you

47
00:01:51,280 --> 00:01:53,840
know

48
00:01:51,520 --> 00:01:54,720
it's grown quite large over the last few

49
00:01:53,840 --> 00:01:56,560
years

50
00:01:54,720 --> 00:01:59,280
we're still kind of a boutique shop that

51
00:01:56,560 --> 00:02:01,200
focuses on cyber security services

52
00:01:59,280 --> 00:02:03,119
and namely we kind of have the two sides

53
00:02:01,200 --> 00:02:05,840
of those services

54
00:02:03,119 --> 00:02:06,799
one side is adversary simulation that's

55
00:02:05,840 --> 00:02:09,360
really where our

56
00:02:06,799 --> 00:02:10,560
pen testing and red teaming services

57
00:02:09,360 --> 00:02:12,480
come into play

58
00:02:10,560 --> 00:02:13,599
we do a lot of pen testing and red

59
00:02:12,480 --> 00:02:16,640
teaming

60
00:02:13,599 --> 00:02:21,839
of cloud environments you know aws

61
00:02:16,640 --> 00:02:24,958
azure gzp you know o365

62
00:02:21,840 --> 00:02:28,080
suite that type of stuff and

63
00:02:24,959 --> 00:02:30,560
you know for both uh you know small

64
00:02:28,080 --> 00:02:32,239
startups that maybe are looking to get

65
00:02:30,560 --> 00:02:35,519
acquired in the near future

66
00:02:32,239 --> 00:02:37,519
as well as for large tech companies

67
00:02:35,519 --> 00:02:38,959
in addition we have an adversary

68
00:02:37,519 --> 00:02:42,239
prevention side of the house

69
00:02:38,959 --> 00:02:43,920
that services that helps find hackers

70
00:02:42,239 --> 00:02:48,239
inside networks

71
00:02:43,920 --> 00:02:51,839
we have a lot of expertise on the

72
00:02:48,239 --> 00:02:52,879
phantom and splunk platform uh we have i

73
00:02:51,840 --> 00:02:55,519
believe

74
00:02:52,879 --> 00:02:57,599
six splunk trusters in the company which

75
00:02:55,519 --> 00:03:01,040
are kind of like the mvps on the splunk

76
00:02:57,599 --> 00:03:04,319
platform and um some of the world's best

77
00:03:01,040 --> 00:03:07,200
on uh

78
00:03:04,319 --> 00:03:07,839
soar implementation known as phantom so

79
00:03:07,200 --> 00:03:09,599
uh

80
00:03:07,840 --> 00:03:11,360
yeah if you're interested in a pen test

81
00:03:09,599 --> 00:03:13,760
or need some security engineering

82
00:03:11,360 --> 00:03:16,560
services we'd love to come help you

83
00:03:13,760 --> 00:03:17,518
um you know we're a relatively you know

84
00:03:16,560 --> 00:03:20,560
specialized shop

85
00:03:17,519 --> 00:03:23,280
so uh we try to provide high value

86
00:03:20,560 --> 00:03:24,159
right and then uh we've been working on

87
00:03:23,280 --> 00:03:27,200
a series of

88
00:03:24,159 --> 00:03:29,599
managed products uh just kind of help

89
00:03:27,200 --> 00:03:31,040
our clients more as we start to automate

90
00:03:29,599 --> 00:03:32,079
our processes

91
00:03:31,040 --> 00:03:34,560
and make some of these products

92
00:03:32,080 --> 00:03:36,720
available uh publicly

93
00:03:34,560 --> 00:03:38,159
so you know specifically some of you

94
00:03:36,720 --> 00:03:40,319
probably heard me talk about in the past

95
00:03:38,159 --> 00:03:41,200
are our voodoo platform which is kind of

96
00:03:40,319 --> 00:03:43,839
our

97
00:03:41,200 --> 00:03:45,359
toolkit for performing red teaming

98
00:03:43,840 --> 00:03:48,400
operations it's a uh

99
00:03:45,360 --> 00:03:49,440
cross-platform so supports linux mac and

100
00:03:48,400 --> 00:03:51,360
windows

101
00:03:49,440 --> 00:03:52,799
and you can go you can chain those

102
00:03:51,360 --> 00:03:53,840
agents together to go as deep as you

103
00:03:52,799 --> 00:03:56,400
want into a network

104
00:03:53,840 --> 00:03:58,799
um so you know namely you can go like

105
00:03:56,400 --> 00:04:01,599
you know 15 hops deep into a network if

106
00:03:58,799 --> 00:04:03,280
you want to get crazy um and it will

107
00:04:01,599 --> 00:04:06,319
relay columns as deep as

108
00:04:03,280 --> 00:04:08,159
you want to go you know in addition and

109
00:04:06,319 --> 00:04:09,760
in this year we've launched smite which

110
00:04:08,159 --> 00:04:12,879
is basically our

111
00:04:09,760 --> 00:04:13,679
xdr service uh which we can also kind of

112
00:04:12,879 --> 00:04:17,120
deliver in a

113
00:04:13,680 --> 00:04:19,120
sock as a service type platform

114
00:04:17,120 --> 00:04:20,399
on the offensive side we also have a

115
00:04:19,120 --> 00:04:23,840
mage service which is

116
00:04:20,399 --> 00:04:26,000
uh more of a cloud attack service

117
00:04:23,840 --> 00:04:27,679
monitoring platform or management

118
00:04:26,000 --> 00:04:29,520
platform

119
00:04:27,680 --> 00:04:31,120
and you know we have some additional

120
00:04:29,520 --> 00:04:33,120
services we'll be

121
00:04:31,120 --> 00:04:35,280
investing in more over the coming years

122
00:04:33,120 --> 00:04:35,280
so

123
00:04:35,919 --> 00:04:41,198
i just wanted to give a special thanks

124
00:04:38,960 --> 00:04:42,560
at this point in the presentation to

125
00:04:41,199 --> 00:04:44,320
michael butler

126
00:04:42,560 --> 00:04:46,080
you know a lot of these cloud techniques

127
00:04:44,320 --> 00:04:48,400
we

128
00:04:46,080 --> 00:04:50,240
went back and forth and kind of talked

129
00:04:48,400 --> 00:04:53,520
about and developed

130
00:04:50,240 --> 00:04:55,680
as we did engagements and he is our pen

131
00:04:53,520 --> 00:04:58,799
testing lead over those services

132
00:04:55,680 --> 00:05:01,280
also i consulted with scott pack who's a

133
00:04:58,800 --> 00:05:03,600
senior cloud security architect at adobe

134
00:05:01,280 --> 00:05:04,960
awesome guy he was very helpful in

135
00:05:03,600 --> 00:05:06,800
explaining the way some of these apis

136
00:05:04,960 --> 00:05:08,960
work a lot better to me

137
00:05:06,800 --> 00:05:11,600
and then i consulted wayland grange on

138
00:05:08,960 --> 00:05:13,440
some of the ozent as well as the voodoo

139
00:05:11,600 --> 00:05:15,120
capabilities for this presentation um

140
00:05:13,440 --> 00:05:16,719
he's kind of the creator of that voodoo

141
00:05:15,120 --> 00:05:20,000
platform and

142
00:05:16,720 --> 00:05:22,080
he's done a lot of research in the past

143
00:05:20,000 --> 00:05:23,600
been part of you know kind of that cyber

144
00:05:22,080 --> 00:05:25,680
threat intelligence community

145
00:05:23,600 --> 00:05:27,840
so thanks thank you guys i appreciate

146
00:05:25,680 --> 00:05:30,320
your help

147
00:05:27,840 --> 00:05:32,239
okay now for a little bit of an overview

148
00:05:30,320 --> 00:05:34,320
on the presentation

149
00:05:32,240 --> 00:05:35,600
so what we're going to be doing first is

150
00:05:34,320 --> 00:05:36,800
going to be talking about service

151
00:05:35,600 --> 00:05:39,520
technologies

152
00:05:36,800 --> 00:05:40,960
ask you know cloud provider services and

153
00:05:39,520 --> 00:05:42,240
the frameworks that

154
00:05:40,960 --> 00:05:43,359
are going to enable us to kind of do

155
00:05:42,240 --> 00:05:44,479
some of these red teaming type

156
00:05:43,360 --> 00:05:45,759
operations so

157
00:05:44,479 --> 00:05:48,560
namely we're going to be talking a lot

158
00:05:45,759 --> 00:05:51,360
about aws is api gateway

159
00:05:48,560 --> 00:05:52,720
aws is lambda service aws is cloud

160
00:05:51,360 --> 00:05:54,960
formation service

161
00:05:52,720 --> 00:05:56,000
those type of things right in addition

162
00:05:54,960 --> 00:05:57,680
we're going to be talking about some of

163
00:05:56,000 --> 00:05:59,199
the frameworks or other technologies

164
00:05:57,680 --> 00:06:00,639
that are really going to enable us to

165
00:05:59,199 --> 00:06:02,479
leverage these services to their full

166
00:06:00,639 --> 00:06:04,000
potential uh so we're going to talk

167
00:06:02,479 --> 00:06:05,680
briefly about zappa

168
00:06:04,000 --> 00:06:07,199
and then we're going to jump into and

169
00:06:05,680 --> 00:06:09,840
talk more about

170
00:06:07,199 --> 00:06:11,680
the aws serverless application model

171
00:06:09,840 --> 00:06:13,198
which is also known as sam

172
00:06:11,680 --> 00:06:14,639
and there's there's a few other options

173
00:06:13,199 --> 00:06:15,840
out there but those are kind of the ones

174
00:06:14,639 --> 00:06:17,440
we're going to focus on for this

175
00:06:15,840 --> 00:06:20,400
presentation

176
00:06:17,440 --> 00:06:21,840
uh so hopefully you know you can stay

177
00:06:20,400 --> 00:06:23,039
focused a little bit

178
00:06:21,840 --> 00:06:25,679
and then we're going to take those

179
00:06:23,039 --> 00:06:26,400
technologies and apply them to three use

180
00:06:25,680 --> 00:06:28,080
cases

181
00:06:26,400 --> 00:06:30,159
so we're going to apply them to the use

182
00:06:28,080 --> 00:06:33,198
case of where we want to discover

183
00:06:30,160 --> 00:06:34,000
um aws account ids and if you don't know

184
00:06:33,199 --> 00:06:35,680
what that is

185
00:06:34,000 --> 00:06:37,919
we'll be explaining that in a minute

186
00:06:35,680 --> 00:06:39,759
also be talking about how we can

187
00:06:37,919 --> 00:06:41,440
leverage these technologies to do

188
00:06:39,759 --> 00:06:43,759
command and control or c2

189
00:06:41,440 --> 00:06:45,039
through these aws services and why we

190
00:06:43,759 --> 00:06:46,319
would want to do that

191
00:06:45,039 --> 00:06:48,719
and then we'll also be talking about how

192
00:06:46,319 --> 00:06:51,840
we can leverage these technologies to

193
00:06:48,720 --> 00:06:53,759
disrupt aws's logging services um so

194
00:06:51,840 --> 00:06:56,719
that an attacker could stay on an aws

195
00:06:53,759 --> 00:06:57,840
attack account longer without being

196
00:06:56,720 --> 00:07:03,840
detected

197
00:06:57,840 --> 00:07:03,840
so great let's jump into it

198
00:07:04,319 --> 00:07:07,360
okay aws services that are going to be

199
00:07:06,720 --> 00:07:10,800
relevant

200
00:07:07,360 --> 00:07:11,919
to today's presentation include api

201
00:07:10,800 --> 00:07:14,240
gateway

202
00:07:11,919 --> 00:07:15,680
and this is just basically a proxy

203
00:07:14,240 --> 00:07:17,599
that's going to sit in front of

204
00:07:15,680 --> 00:07:19,120
another service right but it's going to

205
00:07:17,599 --> 00:07:23,039
be a managed service

206
00:07:19,120 --> 00:07:23,360
provided by aws so this can sit in front

207
00:07:23,039 --> 00:07:25,199
of

208
00:07:23,360 --> 00:07:26,560
lambda functions that are serverless

209
00:07:25,199 --> 00:07:29,360
this can sit in front of

210
00:07:26,560 --> 00:07:30,800
ec2 servers it's kind of like your more

211
00:07:29,360 --> 00:07:33,440
traditional vms

212
00:07:30,800 --> 00:07:35,280
and could kind of act as a front door uh

213
00:07:33,440 --> 00:07:39,120
as others call apis

214
00:07:35,280 --> 00:07:39,119
and send data into these services

215
00:07:39,360 --> 00:07:43,280
uh there's two different ways this can

216
00:07:40,720 --> 00:07:44,319
really operate hdp apis are really

217
00:07:43,280 --> 00:07:46,960
designed for

218
00:07:44,319 --> 00:07:48,400
uh to be really cost efficient and have

219
00:07:46,960 --> 00:07:50,400
low latency

220
00:07:48,400 --> 00:07:52,638
um because that's a really common use

221
00:07:50,400 --> 00:07:55,758
case with api gateway

222
00:07:52,639 --> 00:07:56,879
rest apis offer a lot more features and

223
00:07:55,759 --> 00:07:57,599
you can see a full breakdown of the

224
00:07:56,879 --> 00:08:00,879
differences

225
00:07:57,599 --> 00:08:02,800
of these modes that api gateway can

226
00:08:00,879 --> 00:08:05,039
operate in by checking out this link at

227
00:08:02,800 --> 00:08:06,639
the bottom of the slide

228
00:08:05,039 --> 00:08:08,318
on the last side of this presentation

229
00:08:06,639 --> 00:08:09,039
there'll be a link to where i'm storing

230
00:08:08,319 --> 00:08:11,440
the slides

231
00:08:09,039 --> 00:08:13,039
and you can download the slides and go

232
00:08:11,440 --> 00:08:14,240
to any of these references to get more

233
00:08:13,039 --> 00:08:16,800
information

234
00:08:14,240 --> 00:08:18,240
at any time yeah i try to include

235
00:08:16,800 --> 00:08:18,960
references at the bottom of the slides

236
00:08:18,240 --> 00:08:21,840
to

237
00:08:18,960 --> 00:08:23,710
to help both myself and you guys

238
00:08:21,840 --> 00:08:24,960
research these topics more

239
00:08:23,710 --> 00:08:27,359
[Music]

240
00:08:24,960 --> 00:08:28,479
okay and so then lambda what's really

241
00:08:27,360 --> 00:08:31,120
that

242
00:08:28,479 --> 00:08:32,000
well this is one of the core serverless

243
00:08:31,120 --> 00:08:36,399
services

244
00:08:32,000 --> 00:08:36,399
that aws provides and

245
00:08:36,880 --> 00:08:42,320
lambda applications can get complex

246
00:08:40,000 --> 00:08:43,599
but oftentimes they're they're kind of

247
00:08:42,320 --> 00:08:47,360
better described as

248
00:08:43,599 --> 00:08:50,800
scripts that are used

249
00:08:47,360 --> 00:08:52,560
as kind of duct tape to process data

250
00:08:50,800 --> 00:08:55,680
between other aws services

251
00:08:52,560 --> 00:08:56,560
so for example a really simple workflow

252
00:08:55,680 --> 00:08:59,359
right here

253
00:08:56,560 --> 00:09:00,479
a photograph is taken it is put into an

254
00:08:59,360 --> 00:09:02,640
s3 bucket

255
00:09:00,480 --> 00:09:03,600
for storage uh where it's stored as an

256
00:09:02,640 --> 00:09:06,640
object

257
00:09:03,600 --> 00:09:09,680
and then when that occurs

258
00:09:06,640 --> 00:09:10,080
uh a lambda function is triggered and

259
00:09:09,680 --> 00:09:13,120
then

260
00:09:10,080 --> 00:09:14,959
that lambda function or script runs and

261
00:09:13,120 --> 00:09:17,279
does something meaningful with the image

262
00:09:14,959 --> 00:09:18,079
like resizes it to make a thumbnail

263
00:09:17,279 --> 00:09:19,760
version

264
00:09:18,080 --> 00:09:21,519
and maybe stores that back in the s3

265
00:09:19,760 --> 00:09:24,240
bucket

266
00:09:21,519 --> 00:09:26,160
you know so that way an application can

267
00:09:24,240 --> 00:09:26,880
access both the original image as well

268
00:09:26,160 --> 00:09:28,800
as

269
00:09:26,880 --> 00:09:32,560
the thumbnail version of the image that

270
00:09:28,800 --> 00:09:32,560
has been created through this workflow

271
00:09:33,600 --> 00:09:37,519
and um you know in this manner lambda

272
00:09:36,399 --> 00:09:39,519
functions can kick off

273
00:09:37,519 --> 00:09:40,800
in response to other actions that other

274
00:09:39,519 --> 00:09:43,839
services are taking inside

275
00:09:40,800 --> 00:09:45,760
aws there seems to be really good

276
00:09:43,839 --> 00:09:46,959
integrations here whether the services

277
00:09:45,760 --> 00:09:50,080
that you know you most

278
00:09:46,959 --> 00:09:51,199
want to automate and have workflows

279
00:09:50,080 --> 00:09:53,279
going through

280
00:09:51,200 --> 00:09:55,760
um you know frequently this is chained

281
00:09:53,279 --> 00:09:56,800
together with objects in s3 buckets as

282
00:09:55,760 --> 00:09:59,040
well as

283
00:09:56,800 --> 00:10:00,959
data coming in through api gateways you

284
00:09:59,040 --> 00:10:02,719
know as well as things like data being

285
00:10:00,959 --> 00:10:05,439
stored in databases

286
00:10:02,720 --> 00:10:06,240
and you can even chain lambda functions

287
00:10:05,440 --> 00:10:09,680
together

288
00:10:06,240 --> 00:10:11,279
by using step functions which basically

289
00:10:09,680 --> 00:10:14,239
allows you to define

290
00:10:11,279 --> 00:10:15,439
you know if a certain condition occurs

291
00:10:14,240 --> 00:10:17,600
at the end of your function

292
00:10:15,440 --> 00:10:19,040
call this other function you know and if

293
00:10:17,600 --> 00:10:20,399
another condition happens call a

294
00:10:19,040 --> 00:10:21,760
different function

295
00:10:20,399 --> 00:10:24,240
and so that way you can almost build

296
00:10:21,760 --> 00:10:27,040
these complex logic trees that

297
00:10:24,240 --> 00:10:28,720
will pass data between functions albeit

298
00:10:27,040 --> 00:10:29,680
there are some limitations there when

299
00:10:28,720 --> 00:10:32,000
you actually get into

300
00:10:29,680 --> 00:10:33,599
developing applications that may

301
00:10:32,000 --> 00:10:36,399
frustrate developers at first

302
00:10:33,600 --> 00:10:37,839
but feels like every year aws continues

303
00:10:36,399 --> 00:10:39,519
to invest more and more resources

304
00:10:37,839 --> 00:10:41,360
into making this into a full-featured

305
00:10:39,519 --> 00:10:43,600
platform um so

306
00:10:41,360 --> 00:10:46,320
you know over the next decade i expect

307
00:10:43,600 --> 00:10:47,279
that this will be able to do everything

308
00:10:46,320 --> 00:10:49,519
that you'll be able to do in a

309
00:10:47,279 --> 00:10:52,880
traditional web programming language

310
00:10:49,519 --> 00:10:56,160
but entirely serverless but yeah today

311
00:10:52,880 --> 00:10:59,360
there are there are a few limitations

312
00:10:56,160 --> 00:11:00,079
but great for really discreetly defined

313
00:10:59,360 --> 00:11:02,320
task

314
00:11:00,079 --> 00:11:03,359
right um you can program in whatever

315
00:11:02,320 --> 00:11:05,440
languages are

316
00:11:03,360 --> 00:11:06,399
you know most comfortable you for the

317
00:11:05,440 --> 00:11:09,920
most part

318
00:11:06,399 --> 00:11:12,880
you know a lot of developers are

319
00:11:09,920 --> 00:11:14,399
developing lambdas in node using

320
00:11:12,880 --> 00:11:16,320
javascript or

321
00:11:14,399 --> 00:11:18,399
in a python 2 or python 3 type

322
00:11:16,320 --> 00:11:19,120
environment there's also some support

323
00:11:18,399 --> 00:11:23,360
for like go

324
00:11:19,120 --> 00:11:26,000
ruby java and other languages

325
00:11:23,360 --> 00:11:26,720
you know really slick integrations with

326
00:11:26,000 --> 00:11:30,160
the

327
00:11:26,720 --> 00:11:31,839
aws supported sdks you know especially

328
00:11:30,160 --> 00:11:33,199
boto 3 will be seen throughout this

329
00:11:31,839 --> 00:11:36,240
presentation

330
00:11:33,200 --> 00:11:38,480
um super easy to

331
00:11:36,240 --> 00:11:40,880
configure permissions around your lambda

332
00:11:38,480 --> 00:11:42,720
function at least in my opinion

333
00:11:40,880 --> 00:11:45,040
you know by default if you just next

334
00:11:42,720 --> 00:11:46,800
next and exit each lambda function is

335
00:11:45,040 --> 00:11:48,000
going to have a new role created

336
00:11:46,800 --> 00:11:50,479
associated with it

337
00:11:48,000 --> 00:11:52,880
and then you can go in and modify the

338
00:11:50,480 --> 00:11:56,079
policies associated with that role

339
00:11:52,880 --> 00:11:57,040
to kind of tailor what exactly this code

340
00:11:56,079 --> 00:12:00,479
that's going to execute

341
00:11:57,040 --> 00:12:02,079
has access to you know some of those

342
00:12:00,480 --> 00:12:05,680
limitations really are

343
00:12:02,079 --> 00:12:07,519
scripts have a max runtime of 15 minutes

344
00:12:05,680 --> 00:12:09,599
these are not things that are designed

345
00:12:07,519 --> 00:12:12,959
to be long persistent

346
00:12:09,600 --> 00:12:14,399
running operations um so

347
00:12:12,959 --> 00:12:16,239
you know that that can get a little bit

348
00:12:14,399 --> 00:12:18,880
tricky at times depending on what you're

349
00:12:16,240 --> 00:12:20,639
trying to accomplish

350
00:12:18,880 --> 00:12:22,399
but you know for the most part if

351
00:12:20,639 --> 00:12:24,560
there's a spree input

352
00:12:22,399 --> 00:12:25,760
or processing it and discrete output

353
00:12:24,560 --> 00:12:28,880
there's a very good option

354
00:12:25,760 --> 00:12:31,040
for automating and

355
00:12:28,880 --> 00:12:32,160
one common workflow that we will see

356
00:12:31,040 --> 00:12:36,079
throughout today

357
00:12:32,160 --> 00:12:39,519
is that similar to this where

358
00:12:36,079 --> 00:12:43,120
you know a user or another application

359
00:12:39,519 --> 00:12:45,760
is going to send data to an api gateway

360
00:12:43,120 --> 00:12:48,160
then the api gateway is going to pass

361
00:12:45,760 --> 00:12:49,839
that data along to a lambda function

362
00:12:48,160 --> 00:12:52,000
and that lambda function is going to

363
00:12:49,839 --> 00:12:54,800
process the data and

364
00:12:52,000 --> 00:12:56,320
may also interact with other aws

365
00:12:54,800 --> 00:12:57,760
services

366
00:12:56,320 --> 00:12:59,760
you know like if you need storage it

367
00:12:57,760 --> 00:13:00,480
might store some data in a dynamodb

368
00:12:59,760 --> 00:13:03,360
database

369
00:13:00,480 --> 00:13:03,839
that's very common for laminar functions

370
00:13:03,360 --> 00:13:05,920
you know

371
00:13:03,839 --> 00:13:07,600
or it might need a more persistent

372
00:13:05,920 --> 00:13:09,279
long-term storage and it might store the

373
00:13:07,600 --> 00:13:10,880
data back to an s3 bucket

374
00:13:09,279 --> 00:13:13,360
like like i was just talking about the

375
00:13:10,880 --> 00:13:16,639
image processing example from before

376
00:13:13,360 --> 00:13:18,160
you know both very common and you know

377
00:13:16,639 --> 00:13:20,480
really sky's the limit

378
00:13:18,160 --> 00:13:21,199
that lambda function that you're writing

379
00:13:20,480 --> 00:13:23,920
can

380
00:13:21,200 --> 00:13:27,360
interact with any adress service that is

381
00:13:23,920 --> 00:13:27,360
given permission to talk with

382
00:13:28,320 --> 00:13:34,639
so another service that

383
00:13:31,600 --> 00:13:37,760
we'll be using and is cloud formation

384
00:13:34,639 --> 00:13:39,519
so basically cloud formation it's a

385
00:13:37,760 --> 00:13:41,920
service that enables us to

386
00:13:39,519 --> 00:13:44,240
set up other aws services in a

387
00:13:41,920 --> 00:13:46,000
predefined configuration

388
00:13:44,240 --> 00:13:48,079
you know it really enables an

389
00:13:46,000 --> 00:13:51,040
infrastructure as code type methodology

390
00:13:48,079 --> 00:13:52,000
you can have you know a single yaml file

391
00:13:51,040 --> 00:13:54,639
and

392
00:13:52,000 --> 00:13:55,440
pass that to the cloud formation service

393
00:13:54,639 --> 00:13:58,160
and it will

394
00:13:55,440 --> 00:13:59,839
attempt to deploy all the others and

395
00:13:58,160 --> 00:14:01,360
configure all the other services as

396
00:13:59,839 --> 00:14:04,240
defined in that yaml file

397
00:14:01,360 --> 00:14:05,760
right so you can you know really get a

398
00:14:04,240 --> 00:14:07,279
really well defined infrastructure as a

399
00:14:05,760 --> 00:14:10,160
service type process going

400
00:14:07,279 --> 00:14:12,639
if you are strictly enforcing and making

401
00:14:10,160 --> 00:14:17,279
people use the cloud formation service

402
00:14:12,639 --> 00:14:19,600
and you know there is some notable

403
00:14:17,279 --> 00:14:21,519
you know issues which is you know one

404
00:14:19,600 --> 00:14:23,920
this is another service in aws

405
00:14:21,519 --> 00:14:26,160
and the way aws generally operates is

406
00:14:23,920 --> 00:14:27,920
each service is kind of its own team

407
00:14:26,160 --> 00:14:29,519
usually like a small team of i don't

408
00:14:27,920 --> 00:14:32,880
know like eight people

409
00:14:29,519 --> 00:14:35,519
and then the so

410
00:14:32,880 --> 00:14:36,800
sometimes teams will release features

411
00:14:35,519 --> 00:14:40,320
for their service

412
00:14:36,800 --> 00:14:42,319
and then the cloud formation team is

413
00:14:40,320 --> 00:14:44,560
a little bit behind and has not updated

414
00:14:42,320 --> 00:14:47,360
their service to enable you to

415
00:14:44,560 --> 00:14:49,518
automate the setup and deployment of

416
00:14:47,360 --> 00:14:50,959
that new feature on the other service

417
00:14:49,519 --> 00:14:52,800
so there's a little bit of lag time

418
00:14:50,959 --> 00:14:55,119
there but you know generally

419
00:14:52,800 --> 00:14:56,240
they do try to implement you know all

420
00:14:55,120 --> 00:15:00,000
the common tasks that you

421
00:14:56,240 --> 00:15:03,120
need to do um so

422
00:15:00,000 --> 00:15:07,040
i'm not perfect but you know close to it

423
00:15:03,120 --> 00:15:08,560
um you know and i i like cloud formation

424
00:15:07,040 --> 00:15:10,719
especially if you know you just want to

425
00:15:08,560 --> 00:15:13,279
configure things for aws

426
00:15:10,720 --> 00:15:13,839
gives you a lot more granularity you

427
00:15:13,279 --> 00:15:15,920
know

428
00:15:13,839 --> 00:15:17,360
other options like uh like a terraform

429
00:15:15,920 --> 00:15:19,680
type option would

430
00:15:17,360 --> 00:15:21,360
allow you to build a template that you

431
00:15:19,680 --> 00:15:23,519
know theoretically could be used across

432
00:15:21,360 --> 00:15:26,800
multiple cloud providers like aws

433
00:15:23,519 --> 00:15:27,120
azure and gcp but the reality behind

434
00:15:26,800 --> 00:15:30,399
that

435
00:15:27,120 --> 00:15:32,560
is frequently you end up using services

436
00:15:30,399 --> 00:15:35,360
or features in each platform

437
00:15:32,560 --> 00:15:37,199
like aws azure and gcp that aren't in

438
00:15:35,360 --> 00:15:39,199
other platforms and so then

439
00:15:37,199 --> 00:15:40,319
you basically end up forking your

440
00:15:39,199 --> 00:15:43,920
terraform scripts

441
00:15:40,320 --> 00:15:45,279
to kind of be tailored for each cloud

442
00:15:43,920 --> 00:15:46,319
platform anyways

443
00:15:45,279 --> 00:15:47,680
so i mean there's still some more

444
00:15:46,320 --> 00:15:49,920
synergies there with a terraform

445
00:15:47,680 --> 00:15:51,680
approached but

446
00:15:49,920 --> 00:15:53,199
you know the net result is often the

447
00:15:51,680 --> 00:15:54,479
same you end up with three different

448
00:15:53,199 --> 00:15:57,279
templates that you have to

449
00:15:54,480 --> 00:15:59,279
maintain so and i feel like when you go

450
00:15:57,279 --> 00:16:02,079
directly to the cloud providers like

451
00:15:59,279 --> 00:16:02,800
to cloudformation or on azure you go to

452
00:16:02,079 --> 00:16:06,160
arms

453
00:16:02,800 --> 00:16:07,680
templates you gain a lot more power

454
00:16:06,160 --> 00:16:09,040
there's a lot more ability to configure

455
00:16:07,680 --> 00:16:11,680
those services exactly

456
00:16:09,040 --> 00:16:12,959
the way you specify so anyways that's

457
00:16:11,680 --> 00:16:13,439
just kind of a personal preference of

458
00:16:12,959 --> 00:16:17,359
mine

459
00:16:13,440 --> 00:16:19,920
but uh you know obviously

460
00:16:17,360 --> 00:16:20,399
you know use the right tool for the job

461
00:16:19,920 --> 00:16:23,439
you know

462
00:16:20,399 --> 00:16:24,000
a lot of engineers will you know have a

463
00:16:23,440 --> 00:16:26,079
hammer

464
00:16:24,000 --> 00:16:27,360
and then i think everything's a nail um

465
00:16:26,079 --> 00:16:29,040
it's definitely not the right approach

466
00:16:27,360 --> 00:16:30,480
especially cloud providers

467
00:16:29,040 --> 00:16:32,160
there's definitely pros and cons with

468
00:16:30,480 --> 00:16:33,600
each of these technologies that

469
00:16:32,160 --> 00:16:35,199
you know you should carefully weigh

470
00:16:33,600 --> 00:16:36,959
before you know

471
00:16:35,199 --> 00:16:39,680
getting kind of locked in on a

472
00:16:36,959 --> 00:16:42,319
technology base

473
00:16:39,680 --> 00:16:43,839
so at a high level cloud providers they

474
00:16:42,320 --> 00:16:45,120
all kind of operate the same way

475
00:16:43,839 --> 00:16:46,959
and they basically have these three

476
00:16:45,120 --> 00:16:47,519
different layers they have a management

477
00:16:46,959 --> 00:16:49,279
ui

478
00:16:47,519 --> 00:16:50,800
this is typically what you see when you

479
00:16:49,279 --> 00:16:52,800
first sign up for an account

480
00:16:50,800 --> 00:16:54,639
it's basically the web interface or web

481
00:16:52,800 --> 00:16:55,920
console that a user is going to browse

482
00:16:54,639 --> 00:16:58,399
around in

483
00:16:55,920 --> 00:17:00,479
and generally the cloud providers the

484
00:16:58,399 --> 00:17:03,519
big ones like aws azure gcp

485
00:17:00,480 --> 00:17:05,839
they do a good job of for

486
00:17:03,519 --> 00:17:06,880
exposing the features inside of these

487
00:17:05,839 --> 00:17:09,280
web consoles

488
00:17:06,880 --> 00:17:10,160
that they want you to be using and want

489
00:17:09,280 --> 00:17:12,639
you to know about

490
00:17:10,160 --> 00:17:13,919
or are the most common ones but really

491
00:17:12,640 --> 00:17:15,600
under the hood as you're clicking

492
00:17:13,919 --> 00:17:17,360
buttons inside that website

493
00:17:15,599 --> 00:17:18,879
it's just talking to these control plane

494
00:17:17,359 --> 00:17:20,159
apis

495
00:17:18,880 --> 00:17:22,160
most of the time it's talking to

496
00:17:20,160 --> 00:17:24,000
documented control plane apis

497
00:17:22,160 --> 00:17:26,319
albeit there are some notable exceptions

498
00:17:24,000 --> 00:17:28,079
on all the major cloud providers

499
00:17:26,319 --> 00:17:30,000
where they also do sometimes talk to

500
00:17:28,079 --> 00:17:32,720
undocumented apis

501
00:17:30,000 --> 00:17:34,720
so you know if you install like for

502
00:17:32,720 --> 00:17:36,320
example the aws cli

503
00:17:34,720 --> 00:17:38,559
um you can talk directly to the control

504
00:17:36,320 --> 00:17:40,320
plane apis using the cli

505
00:17:38,559 --> 00:17:41,918
and you know bypass that whole web

506
00:17:40,320 --> 00:17:45,520
interface altogether

507
00:17:41,919 --> 00:17:48,160
generally speaking and then as you

508
00:17:45,520 --> 00:17:49,760
you know deploy instances or create api

509
00:17:48,160 --> 00:17:51,679
gateways or lambda functions

510
00:17:49,760 --> 00:17:53,919
that's really creating resources in time

511
00:17:51,679 --> 00:17:58,000
inside your data plane

512
00:17:53,919 --> 00:17:59,520
and um you know enabling users to get to

513
00:17:58,000 --> 00:18:03,280
you know the great applications or great

514
00:17:59,520 --> 00:18:05,600
services that you're building for them

515
00:18:03,280 --> 00:18:07,120
you know so it's all well and good that

516
00:18:05,600 --> 00:18:09,520
you can click around

517
00:18:07,120 --> 00:18:11,918
the web interface or you can use the cli

518
00:18:09,520 --> 00:18:15,360
but at some point

519
00:18:11,919 --> 00:18:17,120
when you have defined well what you want

520
00:18:15,360 --> 00:18:18,159
your infrastructure or your data plan to

521
00:18:17,120 --> 00:18:19,840
look like

522
00:18:18,160 --> 00:18:22,000
you're going to want to automate that

523
00:18:19,840 --> 00:18:23,678
and you know as we discussed there's a

524
00:18:22,000 --> 00:18:25,039
there's a lot of options here

525
00:18:23,679 --> 00:18:27,440
you know each of the cloud providers

526
00:18:25,039 --> 00:18:29,360
kind of has their own built-in

527
00:18:27,440 --> 00:18:30,880
option that they're pushing for as well

528
00:18:29,360 --> 00:18:32,959
as there's a lot of third parties

529
00:18:30,880 --> 00:18:33,919
that just leverage the apis and they do

530
00:18:32,960 --> 00:18:36,960
a fabulous job

531
00:18:33,919 --> 00:18:37,760
like terraform is very common salt cloud

532
00:18:36,960 --> 00:18:39,760
is

533
00:18:37,760 --> 00:18:41,679
great as well and you know a lot of

534
00:18:39,760 --> 00:18:43,280
teams they'll just kind of build their

535
00:18:41,679 --> 00:18:45,679
own custom scripts maybe using the

536
00:18:43,280 --> 00:18:46,240
supported sdks like botto and things

537
00:18:45,679 --> 00:18:48,880
like that

538
00:18:46,240 --> 00:18:50,240
so um no matter how you're achieving

539
00:18:48,880 --> 00:18:52,160
automation

540
00:18:50,240 --> 00:18:54,640
um you know generally anytime you're

541
00:18:52,160 --> 00:18:57,919
repeating tasks that's the route that

542
00:18:54,640 --> 00:19:00,080
um you know sres are going to push

543
00:18:57,919 --> 00:19:02,160
towards

544
00:19:00,080 --> 00:19:03,918
and as the automation kicks off that's

545
00:19:02,160 --> 00:19:04,960
going to automatically deploy those

546
00:19:03,919 --> 00:19:06,960
resources

547
00:19:04,960 --> 00:19:08,080
and hopefully you know a repeatable and

548
00:19:06,960 --> 00:19:10,559
audible way if you're doing

549
00:19:08,080 --> 00:19:13,120
infrastructure as code

550
00:19:10,559 --> 00:19:14,559
and as developers you know push more

551
00:19:13,120 --> 00:19:17,039
features into the code base

552
00:19:14,559 --> 00:19:17,678
they'll push that into a code repository

553
00:19:17,039 --> 00:19:20,879
system

554
00:19:17,679 --> 00:19:23,679
like a get server and then you know

555
00:19:20,880 --> 00:19:25,360
you'll probably have some cicd pipeline

556
00:19:23,679 --> 00:19:27,039
uh maybe you know you'll have a jinxing

557
00:19:25,360 --> 00:19:28,959
server that will

558
00:19:27,039 --> 00:19:30,480
you know leverage apis or some type of

559
00:19:28,960 --> 00:19:32,960
other automation system

560
00:19:30,480 --> 00:19:34,160
to seamlessly roll out new revisions of

561
00:19:32,960 --> 00:19:37,679
the code

562
00:19:34,160 --> 00:19:41,200
um as developers continue to push out

563
00:19:37,679 --> 00:19:44,480
you know new features so you kind of get

564
00:19:41,200 --> 00:19:44,480
this nice workflow going

565
00:19:45,120 --> 00:19:49,199
and frankly there's a lot of services in

566
00:19:48,240 --> 00:19:52,720
aws

567
00:19:49,200 --> 00:19:54,880
and azure and gcp it would be

568
00:19:52,720 --> 00:19:56,880
really hard for anyone to be an expert

569
00:19:54,880 --> 00:19:59,600
on every one of these services

570
00:19:56,880 --> 00:20:00,080
so you know what at a high level though

571
00:19:59,600 --> 00:20:04,240
they all

572
00:20:00,080 --> 00:20:06,799
offer services that are very similar

573
00:20:04,240 --> 00:20:08,240
so my advice is really try not to be

574
00:20:06,799 --> 00:20:09,360
overwhelmed when you go into cloud

575
00:20:08,240 --> 00:20:11,600
providers

576
00:20:09,360 --> 00:20:13,439
um you know pick a use case and then

577
00:20:11,600 --> 00:20:14,879
just kind of learn the technologies or

578
00:20:13,440 --> 00:20:16,640
services that support that

579
00:20:14,880 --> 00:20:18,000
use case and kind of ignore everything

580
00:20:16,640 --> 00:20:20,640
else and then

581
00:20:18,000 --> 00:20:22,400
as you do more and more use cases inside

582
00:20:20,640 --> 00:20:24,640
of the cloud provider you can

583
00:20:22,400 --> 00:20:27,679
expand and kind of get to know these

584
00:20:24,640 --> 00:20:27,679
other services better

585
00:20:29,440 --> 00:20:32,080
okay great

586
00:20:33,520 --> 00:20:37,120
yeah and you know once your resources

587
00:20:35,600 --> 00:20:39,199
are deployed and that data

588
00:20:37,120 --> 00:20:40,239
data plane you know that's really what

589
00:20:39,200 --> 00:20:41,600
all the users see

590
00:20:40,240 --> 00:20:44,080
you know the users don't see your slick

591
00:20:41,600 --> 00:20:47,039
automation or how great your ci cd

592
00:20:44,080 --> 00:20:48,480
pipeline is or how smart your sres are

593
00:20:47,039 --> 00:20:50,240
they just you know pretty much hit those

594
00:20:48,480 --> 00:20:51,679
resources that have been deployed and

595
00:20:50,240 --> 00:20:54,400
interact with the applications you guys

596
00:20:51,679 --> 00:20:54,400
have designed

597
00:20:54,480 --> 00:20:57,600
all right so serverless frameworks you

598
00:20:56,880 --> 00:20:59,120
know

599
00:20:57,600 --> 00:21:01,360
we're going to be talking about a couple

600
00:20:59,120 --> 00:21:03,439
today and

601
00:21:01,360 --> 00:21:05,280
you know trying to make you more

602
00:21:03,440 --> 00:21:08,400
acquainted with them so

603
00:21:05,280 --> 00:21:12,639
so zappa is a great serverless framework

604
00:21:08,400 --> 00:21:12,640
uh basically it will take a

605
00:21:12,960 --> 00:21:18,400
python application like a flask

606
00:21:15,679 --> 00:21:20,960
application or django application

607
00:21:18,400 --> 00:21:22,000
and what it will do is it will analyze

608
00:21:20,960 --> 00:21:23,919
it

609
00:21:22,000 --> 00:21:25,120
and it will build a cloudformation

610
00:21:23,919 --> 00:21:28,159
template

611
00:21:25,120 --> 00:21:31,439
to deploy to configure and deploy

612
00:21:28,159 --> 00:21:32,400
api gateway and lambda in a manner that

613
00:21:31,440 --> 00:21:34,159
will replicate

614
00:21:32,400 --> 00:21:36,000
what is needed to run that flask or

615
00:21:34,159 --> 00:21:38,559
django application

616
00:21:36,000 --> 00:21:39,440
so this is really sweet for developers

617
00:21:38,559 --> 00:21:41,200
who have been on

618
00:21:39,440 --> 00:21:42,880
you know those python platforms before

619
00:21:41,200 --> 00:21:44,720
because they don't need to know that

620
00:21:42,880 --> 00:21:47,200
much about the cloud providers

621
00:21:44,720 --> 00:21:48,240
um you know they continue to just

622
00:21:47,200 --> 00:21:50,080
develop

623
00:21:48,240 --> 00:21:51,679
those applications on their laptops and

624
00:21:50,080 --> 00:21:55,280
then they can use the zappa

625
00:21:51,679 --> 00:21:58,320
to push out releases um

626
00:21:55,280 --> 00:22:01,918
to their aws account

627
00:21:58,320 --> 00:22:04,799
and you know it it kind of uh obfuscates

628
00:22:01,919 --> 00:22:05,840
or maybe you know hides the cloud

629
00:22:04,799 --> 00:22:08,000
formation piece

630
00:22:05,840 --> 00:22:09,918
um you know which building confirmation

631
00:22:08,000 --> 00:22:12,400
templates is is not

632
00:22:09,919 --> 00:22:13,600
it's not overly complex but um it is

633
00:22:12,400 --> 00:22:16,000
something that you have to learn

634
00:22:13,600 --> 00:22:17,918
where if you use the zap framework you

635
00:22:16,000 --> 00:22:20,400
really don't learn that technology

636
00:22:17,919 --> 00:22:20,960
um you can kind of bypass a few layers

637
00:22:20,400 --> 00:22:23,440
and

638
00:22:20,960 --> 00:22:25,520
get you know skip to the end result so

639
00:22:23,440 --> 00:22:27,039
this is great for red teamers

640
00:22:25,520 --> 00:22:28,639
you know if you write a command and

641
00:22:27,039 --> 00:22:32,240
control tool and

642
00:22:28,640 --> 00:22:33,440
the listening post side that the red

643
00:22:32,240 --> 00:22:36,640
teamer would operate on

644
00:22:33,440 --> 00:22:38,799
is written in django or flask i mean

645
00:22:36,640 --> 00:22:40,720
with very little effort you can push

646
00:22:38,799 --> 00:22:44,320
that out and make it entirely

647
00:22:40,720 --> 00:22:47,520
serverless running inside of aws account

648
00:22:44,320 --> 00:22:49,918
so very cool hope you guys all go and

649
00:22:47,520 --> 00:22:53,120
check it out

650
00:22:49,919 --> 00:22:55,520
okay a more comprehensive solution

651
00:22:53,120 --> 00:22:56,639
though that would support additional

652
00:22:55,520 --> 00:22:59,520
configurations

653
00:22:56,640 --> 00:23:02,320
for developing service applications is

654
00:22:59,520 --> 00:23:05,760
aws serverless application model

655
00:23:02,320 --> 00:23:07,520
also known as sam and we will walk

656
00:23:05,760 --> 00:23:11,440
through an example of this today

657
00:23:07,520 --> 00:23:13,280
so yeah so

658
00:23:11,440 --> 00:23:15,120
but this this is pretty comprehensive

659
00:23:13,280 --> 00:23:18,480
solution that builds

660
00:23:15,120 --> 00:23:22,000
on top of cloud formation

661
00:23:18,480 --> 00:23:24,720
and enables you to build a serverless

662
00:23:22,000 --> 00:23:26,240
application um and less much much less

663
00:23:24,720 --> 00:23:27,600
lines of code than it would take if

664
00:23:26,240 --> 00:23:30,080
you're trying to build

665
00:23:27,600 --> 00:23:33,520
a service application using a pure

666
00:23:30,080 --> 00:23:33,520
cloudformation implementation

667
00:23:34,159 --> 00:23:38,240
okay and uh you know really tries to

668
00:23:36,640 --> 00:23:38,960
push for that infrastructure as code

669
00:23:38,240 --> 00:23:40,960
model

670
00:23:38,960 --> 00:23:43,600
um based on cloud formation but much

671
00:23:40,960 --> 00:23:44,720
simpler and uh the application

672
00:23:43,600 --> 00:23:46,879
example that we're going to be looking

673
00:23:44,720 --> 00:23:48,320
at today will be similar to this where

674
00:23:46,880 --> 00:23:51,679
we're going to be deploying an

675
00:23:48,320 --> 00:23:52,399
api gateway and when we hit that api

676
00:23:51,679 --> 00:23:54,400
gateway

677
00:23:52,400 --> 00:23:56,960
via using like a command line tool like

678
00:23:54,400 --> 00:23:57,679
curl we are going to trigger a lambda

679
00:23:56,960 --> 00:23:59,120
function

680
00:23:57,679 --> 00:24:00,559
and that lambda function's going to take

681
00:23:59,120 --> 00:24:02,879
certain actions and then it's going to

682
00:24:00,559 --> 00:24:04,158
store data

683
00:24:02,880 --> 00:24:06,320
you know typically you might store that

684
00:24:04,159 --> 00:24:08,559
in dynamodb but just to keep things

685
00:24:06,320 --> 00:24:10,879
super simple in this example i just

686
00:24:08,559 --> 00:24:12,480
um have the results being stored inside

687
00:24:10,880 --> 00:24:16,840
an s3 bucket

688
00:24:12,480 --> 00:24:19,679
which is also a common use case so

689
00:24:16,840 --> 00:24:23,279
yeah one thing that i do want to be

690
00:24:19,679 --> 00:24:26,320
clear about is uh

691
00:24:23,279 --> 00:24:29,360
sam is not an aws service so

692
00:24:26,320 --> 00:24:30,559
it's like a framework kind of like

693
00:24:29,360 --> 00:24:33,760
terraform

694
00:24:30,559 --> 00:24:34,559
that builds these cloud formation

695
00:24:33,760 --> 00:24:37,840
templates

696
00:24:34,559 --> 00:24:40,320
and uh helps deploy the resources

697
00:24:37,840 --> 00:24:42,399
and um you know so it's more similar to

698
00:24:40,320 --> 00:24:44,960
like a zappa or terraform

699
00:24:42,400 --> 00:24:46,880
um it's not like a service in aws that

700
00:24:44,960 --> 00:24:47,919
has its own set of apis or anything like

701
00:24:46,880 --> 00:24:50,880
that

702
00:24:47,919 --> 00:24:52,320
um you know sam has its own cli that you

703
00:24:50,880 --> 00:24:54,880
download and you can use

704
00:24:52,320 --> 00:24:56,240
as you're building and deploying these

705
00:24:54,880 --> 00:24:59,679
sam applications

706
00:24:56,240 --> 00:25:02,159
or service applications and um you know

707
00:24:59,679 --> 00:25:03,840
the three big things it does that really

708
00:25:02,159 --> 00:25:05,600
reduce the amount of

709
00:25:03,840 --> 00:25:07,120
uh code you have to write in your

710
00:25:05,600 --> 00:25:08,799
templates is they

711
00:25:07,120 --> 00:25:10,158
they basically have these uh new

712
00:25:08,799 --> 00:25:12,960
resource types uh

713
00:25:10,159 --> 00:25:14,640
one for lambda one for api gateway and

714
00:25:12,960 --> 00:25:16,320
one for dynamodb

715
00:25:14,640 --> 00:25:19,679
they just make interacting with those

716
00:25:16,320 --> 00:25:22,720
services a lot easier

717
00:25:19,679 --> 00:25:24,320
at the templating level

718
00:25:22,720 --> 00:25:25,760
okay so let's just kind of walk through

719
00:25:24,320 --> 00:25:28,799
some use cases

720
00:25:25,760 --> 00:25:29,440
um you know i think it's nice to learn

721
00:25:28,799 --> 00:25:31,760
about

722
00:25:29,440 --> 00:25:32,960
about services and technologies but

723
00:25:31,760 --> 00:25:33,840
probably doesn't make a lot of sense

724
00:25:32,960 --> 00:25:35,039
until

725
00:25:33,840 --> 00:25:37,199
you know we start actually seeing them

726
00:25:35,039 --> 00:25:39,600
be applied right so

727
00:25:37,200 --> 00:25:40,480
um you know use case number one we're

728
00:25:39,600 --> 00:25:43,840
going to talk about

729
00:25:40,480 --> 00:25:47,120
discovering aws account ids

730
00:25:43,840 --> 00:25:49,120
and you know what you could do after you

731
00:25:47,120 --> 00:25:51,760
discover aws account ids

732
00:25:49,120 --> 00:25:52,320
and how we could discover them by

733
00:25:51,760 --> 00:25:56,559
writing

734
00:25:52,320 --> 00:26:00,000
you know a serverless application using

735
00:25:56,559 --> 00:26:01,918
you know a framework like sam okay so

736
00:26:00,000 --> 00:26:03,840
what's an aws account id so when you

737
00:26:01,919 --> 00:26:06,400
sign up for an aws account

738
00:26:03,840 --> 00:26:07,360
aws automatically generates a 12-digit

739
00:26:06,400 --> 00:26:09,120
number

740
00:26:07,360 --> 00:26:11,199
and if you go under your billing section

741
00:26:09,120 --> 00:26:12,479
you'll see that under account settings

742
00:26:11,200 --> 00:26:14,320
account id

743
00:26:12,480 --> 00:26:15,919
or if you just look at the drop down at

744
00:26:14,320 --> 00:26:16,639
least in the version of the web

745
00:26:15,919 --> 00:26:19,520
interface

746
00:26:16,640 --> 00:26:20,400
right now it shows you the number albeit

747
00:26:19,520 --> 00:26:22,240
aws is

748
00:26:20,400 --> 00:26:24,159
constantly changing and updating their

749
00:26:22,240 --> 00:26:25,520
web interface so

750
00:26:24,159 --> 00:26:27,279
if you're watching this talk a year from

751
00:26:25,520 --> 00:26:29,120
now you know it

752
00:26:27,279 --> 00:26:31,039
may not be there anymore that's just

753
00:26:29,120 --> 00:26:34,320
kind of the nature of

754
00:26:31,039 --> 00:26:36,879
aws the apis generally stay

755
00:26:34,320 --> 00:26:38,240
the same but the web interface when you

756
00:26:36,880 --> 00:26:41,919
log in is

757
00:26:38,240 --> 00:26:45,440
always being updated now

758
00:26:41,919 --> 00:26:46,880
aws tries to keep the ids

759
00:26:45,440 --> 00:26:48,480
private right like their own

760
00:26:46,880 --> 00:26:50,480
recommendation to their own employees

761
00:26:48,480 --> 00:26:53,200
when they give presentations is do not

762
00:26:50,480 --> 00:26:54,799
disclose these ids

763
00:26:53,200 --> 00:26:56,720
so that you'll see in the documentation

764
00:26:54,799 --> 00:26:58,240
they're often rejected you'll see at you

765
00:26:56,720 --> 00:27:01,919
know the re-event conferences

766
00:26:58,240 --> 00:27:04,159
that they're actively trying to um

767
00:27:01,919 --> 00:27:05,360
you know you know if employees are

768
00:27:04,159 --> 00:27:07,120
following

769
00:27:05,360 --> 00:27:08,719
policy they're they're trying not to

770
00:27:07,120 --> 00:27:11,120
show this data

771
00:27:08,720 --> 00:27:11,760
um so you could say you know it's

772
00:27:11,120 --> 00:27:15,439
sensitive

773
00:27:11,760 --> 00:27:18,480
right but uh you know

774
00:27:15,440 --> 00:27:21,919
there's kind of two sides of the coin uh

775
00:27:18,480 --> 00:27:23,600
i i kind of deem this is semi-sensitive

776
00:27:21,919 --> 00:27:25,039
it historically it's really been

777
00:27:23,600 --> 00:27:27,360
considered equivalent to

778
00:27:25,039 --> 00:27:28,320
like kind of like a username exposure in

779
00:27:27,360 --> 00:27:31,120
my opinion

780
00:27:28,320 --> 00:27:31,918
but um you know recently there's been a

781
00:27:31,120 --> 00:27:34,639
lot more

782
00:27:31,919 --> 00:27:35,360
services that have been using this kind

783
00:27:34,640 --> 00:27:38,320
of as a

784
00:27:35,360 --> 00:27:39,600
additional layer or control before

785
00:27:38,320 --> 00:27:41,678
interacting with the service and we'll

786
00:27:39,600 --> 00:27:45,120
kind of talk about that in a minute

787
00:27:41,679 --> 00:27:48,000
so you know as more services use this

788
00:27:45,120 --> 00:27:48,639
as an additional you know security layer

789
00:27:48,000 --> 00:27:50,240
um

790
00:27:48,640 --> 00:27:52,080
you know the impact of it being

791
00:27:50,240 --> 00:27:55,840
disclosed obviously goes up

792
00:27:52,080 --> 00:27:57,279
right so you know maybe slightly higher

793
00:27:55,840 --> 00:28:00,480
than a username disclosure

794
00:27:57,279 --> 00:28:02,159
which generally is not a big deal right

795
00:28:00,480 --> 00:28:03,840
all right so if you have an account id

796
00:28:02,159 --> 00:28:06,640
it's a 12 digit number

797
00:28:03,840 --> 00:28:07,600
that means you know there's 10 possible

798
00:28:06,640 --> 00:28:10,799
digits you know

799
00:28:07,600 --> 00:28:11,279
0 through 9 and it's 12 digits long so

800
00:28:10,799 --> 00:28:14,480
that's

801
00:28:11,279 --> 00:28:18,559
10 to the 12th which means there's

802
00:28:14,480 --> 00:28:21,039
one trillion possible account ids right

803
00:28:18,559 --> 00:28:21,760
um you know i'm not a math house expert

804
00:28:21,039 --> 00:28:25,600
at all

805
00:28:21,760 --> 00:28:28,480
but uh that seems like a lot

806
00:28:25,600 --> 00:28:29,678
uh i'm sure it's intentional but uh yeah

807
00:28:28,480 --> 00:28:33,520
it just seems

808
00:28:29,679 --> 00:28:36,799
like a lot right um

809
00:28:33,520 --> 00:28:39,200
you know many vendors

810
00:28:36,799 --> 00:28:40,399
they share their account ids like if you

811
00:28:39,200 --> 00:28:44,240
want to do

812
00:28:40,399 --> 00:28:47,520
cross account um sharing of services uh

813
00:28:44,240 --> 00:28:50,559
like specifically to send maybe like

814
00:28:47,520 --> 00:28:51,520
logs from one aws account to another ews

815
00:28:50,559 --> 00:28:53,600
account

816
00:28:51,520 --> 00:28:55,200
you're gonna have to share some data

817
00:28:53,600 --> 00:28:56,639
with somebody and generally that means

818
00:28:55,200 --> 00:28:57,200
you're gonna end up sharing your account

819
00:28:56,640 --> 00:29:00,559
ids

820
00:28:57,200 --> 00:29:03,919
so duo labs has

821
00:29:00,559 --> 00:29:04,639
a list of vendor accounts under this

822
00:29:03,919 --> 00:29:06,399
project here

823
00:29:04,640 --> 00:29:08,240
the github link that you guys can check

824
00:29:06,399 --> 00:29:09,279
out

825
00:29:08,240 --> 00:29:11,520
you know these are all vendors that

826
00:29:09,279 --> 00:29:12,000
actively provide their aws account ids

827
00:29:11,520 --> 00:29:14,960
so that

828
00:29:12,000 --> 00:29:16,559
their services will work as expected um

829
00:29:14,960 --> 00:29:17,440
you can see a list of these vendors here

830
00:29:16,559 --> 00:29:19,360
on the right

831
00:29:17,440 --> 00:29:21,120
and you know these aren't like small

832
00:29:19,360 --> 00:29:23,918
companies i mean these are

833
00:29:21,120 --> 00:29:25,120
some of the industry's largest companies

834
00:29:23,919 --> 00:29:27,200
um

835
00:29:25,120 --> 00:29:28,799
you know and they're disclosing this

836
00:29:27,200 --> 00:29:30,880
information primarily

837
00:29:28,799 --> 00:29:32,480
to get certain features to work in their

838
00:29:30,880 --> 00:29:34,080
platforms

839
00:29:32,480 --> 00:29:35,919
i mean so you kind of get the vendors or

840
00:29:34,080 --> 00:29:39,360
the tech industry saying

841
00:29:35,919 --> 00:29:42,880
you know should account ids be protected

842
00:29:39,360 --> 00:29:45,760
no you know um so

843
00:29:42,880 --> 00:29:48,320
that's kind of industry interesting in

844
00:29:45,760 --> 00:29:48,320
and of itself

845
00:29:49,039 --> 00:29:55,120
so what could you do if you knew

846
00:29:52,080 --> 00:29:57,199
someone's account id right what's like

847
00:29:55,120 --> 00:30:01,120
what's the big deal here

848
00:29:57,200 --> 00:30:04,080
well you can interact with some

849
00:30:01,120 --> 00:30:05,600
aws services and based on their error

850
00:30:04,080 --> 00:30:08,960
messages

851
00:30:05,600 --> 00:30:11,600
um you can tell whether you know

852
00:30:08,960 --> 00:30:14,399
certain resources are there or certain

853
00:30:11,600 --> 00:30:16,959
things are configured so for example

854
00:30:14,399 --> 00:30:17,918
roles right generally speaking when you

855
00:30:16,960 --> 00:30:20,960
want to provide

856
00:30:17,919 --> 00:30:22,960
access to a resource um

857
00:30:20,960 --> 00:30:25,360
you will create a role and then you'll

858
00:30:22,960 --> 00:30:27,440
sign you'll attach the policies

859
00:30:25,360 --> 00:30:29,039
to that role and then you'll attach that

860
00:30:27,440 --> 00:30:32,480
role to

861
00:30:29,039 --> 00:30:34,399
uh resources right so if you can guess

862
00:30:32,480 --> 00:30:36,320
if you know the account id number you

863
00:30:34,399 --> 00:30:38,000
can guess role names

864
00:30:36,320 --> 00:30:39,678
and based on the errors that come back

865
00:30:38,000 --> 00:30:41,679
you can see whether those roles exist in

866
00:30:39,679 --> 00:30:43,440
the other person's account or not

867
00:30:41,679 --> 00:30:44,880
and then you know you can use this data

868
00:30:43,440 --> 00:30:46,720
to figure out like what

869
00:30:44,880 --> 00:30:48,799
aws services are being used because

870
00:30:46,720 --> 00:30:50,080
certain aws services the first time you

871
00:30:48,799 --> 00:30:51,918
use them are gonna

872
00:30:50,080 --> 00:30:53,360
create roles that have kind of

873
00:30:51,919 --> 00:30:56,480
predictable names

874
00:30:53,360 --> 00:30:58,719
you know also like third-party vendors

875
00:30:56,480 --> 00:31:00,320
they have predictable role names so if

876
00:30:58,720 --> 00:31:02,159
you know an account id

877
00:31:00,320 --> 00:31:03,360
and you want to see if a particular

878
00:31:02,159 --> 00:31:06,080
defensive technology

879
00:31:03,360 --> 00:31:06,479
is in use with that account id you could

880
00:31:06,080 --> 00:31:08,000
guess

881
00:31:06,480 --> 00:31:09,919
the role names associated with some of

882
00:31:08,000 --> 00:31:11,840
those defensive technologies and kind of

883
00:31:09,919 --> 00:31:13,519
recon that out before you even start

884
00:31:11,840 --> 00:31:17,039
attacking the account

885
00:31:13,519 --> 00:31:18,799
um you know you can you know see if

886
00:31:17,039 --> 00:31:20,559
third-party integrations are being used

887
00:31:18,799 --> 00:31:21,360
like octa integrations and things like

888
00:31:20,559 --> 00:31:24,480
that

889
00:31:21,360 --> 00:31:26,639
um you know really the only defense

890
00:31:24,480 --> 00:31:28,320
is vendors would have to kind of more

891
00:31:26,640 --> 00:31:29,279
randomize their role names when they're

892
00:31:28,320 --> 00:31:32,080
deploying

893
00:31:29,279 --> 00:31:33,360
um yeah so that it wouldn't be as easy

894
00:31:32,080 --> 00:31:35,840
to guess

895
00:31:33,360 --> 00:31:37,039
um albeit you you need to know the

896
00:31:35,840 --> 00:31:38,720
user's account id

897
00:31:37,039 --> 00:31:40,720
first before you can even you know

898
00:31:38,720 --> 00:31:43,919
attempt to do kind of a rolling

899
00:31:40,720 --> 00:31:47,279
name disclosure type attack um

900
00:31:43,919 --> 00:31:48,480
so you know once you know a role

901
00:31:47,279 --> 00:31:50,320
existing account

902
00:31:48,480 --> 00:31:52,320
um you could try to assume into that

903
00:31:50,320 --> 00:31:53,918
role and

904
00:31:52,320 --> 00:31:55,360
you know it so if there's a policy

905
00:31:53,919 --> 00:31:57,360
attached to that role

906
00:31:55,360 --> 00:31:59,519
and if that policy attached to the role

907
00:31:57,360 --> 00:32:02,639
is either one overly permissive

908
00:31:59,519 --> 00:32:04,159
or two misconfigured you you know

909
00:32:02,640 --> 00:32:05,600
there's a remote chance you may be able

910
00:32:04,159 --> 00:32:07,840
to assume into that role

911
00:32:05,600 --> 00:32:09,439
if you consume into that role you can do

912
00:32:07,840 --> 00:32:09,840
anything that that role has permissions

913
00:32:09,440 --> 00:32:11,440
to do

914
00:32:09,840 --> 00:32:12,959
and the permissions for that role are

915
00:32:11,440 --> 00:32:13,760
really dependent on what policies are

916
00:32:12,960 --> 00:32:16,399
attached to it

917
00:32:13,760 --> 00:32:17,360
and what they'll specify um but you know

918
00:32:16,399 --> 00:32:19,840
that could be

919
00:32:17,360 --> 00:32:21,039
a foothold or a one way to get initial

920
00:32:19,840 --> 00:32:25,519
access into

921
00:32:21,039 --> 00:32:25,519
kind of an aws account um

922
00:32:26,399 --> 00:32:30,000
you know you can kind of do the same

923
00:32:27,519 --> 00:32:31,360
thing for iem user names um

924
00:32:30,000 --> 00:32:33,279
you can kind of enumerate based off the

925
00:32:31,360 --> 00:32:36,000
error messages whether those are

926
00:32:33,279 --> 00:32:37,360
are available in the account um most of

927
00:32:36,000 --> 00:32:40,480
the research relating to this

928
00:32:37,360 --> 00:32:42,000
comes from um you know rhino security

929
00:32:40,480 --> 00:32:43,360
labs has these two blogs that kind of

930
00:32:42,000 --> 00:32:47,120
describe that

931
00:32:43,360 --> 00:32:48,320
as well as i just wanted to mention that

932
00:32:47,120 --> 00:32:49,918
daniel

933
00:32:48,320 --> 00:32:52,480
did have a script to kind of enumerate

934
00:32:49,919 --> 00:32:52,880
some of this data i mean his repo from

935
00:32:52,480 --> 00:32:56,159
like

936
00:32:52,880 --> 00:32:58,159
i think 2016. so um you know

937
00:32:56,159 --> 00:33:00,159
this this is not new this is you know

938
00:32:58,159 --> 00:33:02,000
stuff that's been around for years

939
00:33:00,159 --> 00:33:05,120
um it doesn't look like it's going to be

940
00:33:02,000 --> 00:33:05,120
changing anytime soon

941
00:33:06,240 --> 00:33:10,159
um you know other areas that are kind of

942
00:33:09,519 --> 00:33:12,240
interesting

943
00:33:10,159 --> 00:33:15,760
that i've thought about and i think

944
00:33:12,240 --> 00:33:15,760
others have also thought about is

945
00:33:16,880 --> 00:33:23,440
a lot of people use sns or sqs

946
00:33:20,080 --> 00:33:26,480
thing services with topics and cues

947
00:33:23,440 --> 00:33:27,519
and they oftentimes have predictable

948
00:33:26,480 --> 00:33:30,159
names

949
00:33:27,519 --> 00:33:31,760
and they could be misconfigured so that

950
00:33:30,159 --> 00:33:33,760
you could subscribe to those

951
00:33:31,760 --> 00:33:36,559
and potentially get messages that you're

952
00:33:33,760 --> 00:33:36,559
not supposed to get

953
00:33:36,840 --> 00:33:41,039
um but you would need to

954
00:33:39,039 --> 00:33:42,240
know the account id right and then you

955
00:33:41,039 --> 00:33:43,600
would also need to guess

956
00:33:42,240 --> 00:33:45,919
the name of that queue or the name of

957
00:33:43,600 --> 00:33:47,600
that topic so this is pretty similar to

958
00:33:45,919 --> 00:33:50,799
what we're just talking about

959
00:33:47,600 --> 00:33:52,480
albeit i haven't seen anybody do it but

960
00:33:50,799 --> 00:33:54,000
i definitely know this is possible based

961
00:33:52,480 --> 00:33:56,750
on you know

962
00:33:54,000 --> 00:33:59,809
uh what i've seen in aws accounts

963
00:33:56,750 --> 00:33:59,809
[Music]

964
00:33:59,840 --> 00:34:03,678
okay and then you know how would you

965
00:34:02,080 --> 00:34:05,678
even get an account id

966
00:34:03,679 --> 00:34:08,159
right now right so like the known ways

967
00:34:05,679 --> 00:34:09,760
to get account ids is really

968
00:34:08,159 --> 00:34:11,919
i don't know the easiest way for me

969
00:34:09,760 --> 00:34:13,679
personally is i just compromise some

970
00:34:11,918 --> 00:34:15,759
type of resource like in

971
00:34:13,679 --> 00:34:17,200
laying the function or an ec2 instance

972
00:34:15,760 --> 00:34:19,280
or something like that but

973
00:34:17,199 --> 00:34:21,040
that's because you know i got years of

974
00:34:19,280 --> 00:34:23,359
experience with

975
00:34:21,040 --> 00:34:25,040
knowing how to hack stuff right and you

976
00:34:23,359 --> 00:34:27,359
know generally speaking once you're

977
00:34:25,040 --> 00:34:29,040
inside a lambda function or inside on an

978
00:34:27,359 --> 00:34:32,560
ec2 instance

979
00:34:29,040 --> 00:34:34,159
um it's it's uh it's not trying to

980
00:34:32,560 --> 00:34:35,759
stop you from knowing what account id

981
00:34:34,159 --> 00:34:38,079
it's running under so

982
00:34:35,760 --> 00:34:39,040
so that's pretty trivial but you know

983
00:34:38,079 --> 00:34:40,480
other ways are

984
00:34:39,040 --> 00:34:43,359
you know that's hard for most people to

985
00:34:40,480 --> 00:34:46,079
do right so the you know other ways are

986
00:34:43,359 --> 00:34:48,319
a few services that allow you to share

987
00:34:46,079 --> 00:34:49,359
data publicly will disclose your account

988
00:34:48,320 --> 00:34:52,480
id when they do so

989
00:34:49,359 --> 00:34:54,319
like if you share a snapshot or an ami

990
00:34:52,480 --> 00:34:55,599
any of that stuff publicly and you're

991
00:34:54,320 --> 00:34:57,040
also going to be disclosing your account

992
00:34:55,599 --> 00:34:59,920
id when you do that

993
00:34:57,040 --> 00:35:01,119
you know another way is you know source

994
00:34:59,920 --> 00:35:02,880
code review

995
00:35:01,119 --> 00:35:04,640
you might check something into github

996
00:35:02,880 --> 00:35:05,359
and maybe it doesn't have credentials

997
00:35:04,640 --> 00:35:06,960
but

998
00:35:05,359 --> 00:35:10,480
maybe it's got the account id for your

999
00:35:06,960 --> 00:35:13,760
yoga account hard coded into it so

1000
00:35:10,480 --> 00:35:16,160
you know it's kind of unclear you know

1001
00:35:13,760 --> 00:35:17,440
feels like aws tries to protect their

1002
00:35:16,160 --> 00:35:19,118
account ids but

1003
00:35:17,440 --> 00:35:20,480
they're not like straight up saying

1004
00:35:19,119 --> 00:35:23,680
others shouldn't disclose it

1005
00:35:20,480 --> 00:35:25,440
so you know you may be able to get this

1006
00:35:23,680 --> 00:35:26,879
from error messages from services or

1007
00:35:25,440 --> 00:35:28,560
applications you may be able to look

1008
00:35:26,880 --> 00:35:30,160
through screen shots or documentation

1009
00:35:28,560 --> 00:35:32,400
that the company provides

1010
00:35:30,160 --> 00:35:33,598
um you know especially if they have you

1011
00:35:32,400 --> 00:35:34,880
know screenshots inside their

1012
00:35:33,599 --> 00:35:37,040
documentation on how to

1013
00:35:34,880 --> 00:35:38,720
like integrate with their cloud services

1014
00:35:37,040 --> 00:35:40,160
and also you can just check out forums

1015
00:35:38,720 --> 00:35:43,520
that are discussion boards

1016
00:35:40,160 --> 00:35:46,078
um you know and i think a lot of these

1017
00:35:43,520 --> 00:35:48,960
were detailed in in the rhino blog post

1018
00:35:46,079 --> 00:35:50,240
so uh go back and check those out uh but

1019
00:35:48,960 --> 00:35:52,640
you know these are just pretty common

1020
00:35:50,240 --> 00:35:55,680
pen testing like ozin techniques

1021
00:35:52,640 --> 00:35:58,078
um nothing no no like rocket science

1022
00:35:55,680 --> 00:36:01,200
here in my opinion but uh

1023
00:35:58,079 --> 00:36:04,160
um you know daniel he did

1024
00:36:01,200 --> 00:36:06,000
disclose this in i think 2016 right

1025
00:36:04,160 --> 00:36:10,000
which is really

1026
00:36:06,000 --> 00:36:12,720
um when you sign up for an aws account

1027
00:36:10,000 --> 00:36:13,520
your account id is going to be by

1028
00:36:12,720 --> 00:36:16,399
default

1029
00:36:13,520 --> 00:36:17,200
the in the sign in url and the sign in

1030
00:36:16,400 --> 00:36:19,280
url

1031
00:36:17,200 --> 00:36:20,640
is going to react differently it's going

1032
00:36:19,280 --> 00:36:23,200
to give you a 404

1033
00:36:20,640 --> 00:36:24,160
if that account id is invalid or it's

1034
00:36:23,200 --> 00:36:27,279
going to give you a

1035
00:36:24,160 --> 00:36:29,680
302 if that account id is valid

1036
00:36:27,280 --> 00:36:30,640
um so you know it is a quick way to

1037
00:36:29,680 --> 00:36:33,118
check

1038
00:36:30,640 --> 00:36:34,160
for account ids to see if they're valid

1039
00:36:33,119 --> 00:36:37,200
or not

1040
00:36:34,160 --> 00:36:39,040
um you know one thing to note here is

1041
00:36:37,200 --> 00:36:41,200
your sign in url can be changed that's

1042
00:36:39,040 --> 00:36:43,839
just a configuration in your settings

1043
00:36:41,200 --> 00:36:45,919
and it frequently is changed because who

1044
00:36:43,839 --> 00:36:48,000
wants to remember a 12 digit number

1045
00:36:45,920 --> 00:36:50,000
no one right so a lot of companies will

1046
00:36:48,000 --> 00:36:53,040
go in and change these to

1047
00:36:50,000 --> 00:36:54,320
you know be a name or you know something

1048
00:36:53,040 --> 00:36:56,079
that's much more memorable

1049
00:36:54,320 --> 00:36:57,920
so it's easier to sign into their aws

1050
00:36:56,079 --> 00:37:00,960
accounts more quickly

1051
00:36:57,920 --> 00:37:03,280
um yeah

1052
00:37:00,960 --> 00:37:04,640
and we'll look around around this in a

1053
00:37:03,280 --> 00:37:06,000
second too

1054
00:37:04,640 --> 00:37:08,879
um you know another thing he talked

1055
00:37:06,000 --> 00:37:11,119
about was virustotal um

1056
00:37:08,880 --> 00:37:13,280
basically you know looking at that to

1057
00:37:11,119 --> 00:37:16,320
find valid account ids

1058
00:37:13,280 --> 00:37:20,079
um you know as it types

1059
00:37:16,320 --> 00:37:22,160
as it types as it indexes data about dns

1060
00:37:20,079 --> 00:37:24,640
you know this is clearly in the domain

1061
00:37:22,160 --> 00:37:26,480
so it's gonna also index account ids as

1062
00:37:24,640 --> 00:37:29,839
it's doing this

1063
00:37:26,480 --> 00:37:31,839
and um you know fire's total has

1064
00:37:29,839 --> 00:37:34,560
subsequently updated their api

1065
00:37:31,839 --> 00:37:36,880
to a new version version two um which

1066
00:37:34,560 --> 00:37:41,040
has a slightly different syntax

1067
00:37:36,880 --> 00:37:43,920
uh so i i wrote a um a script

1068
00:37:41,040 --> 00:37:44,400
that is at this url at the bottom here

1069
00:37:43,920 --> 00:37:47,599
that will

1070
00:37:44,400 --> 00:37:50,560
query virustotal version 2 api and

1071
00:37:47,599 --> 00:37:52,160
return you back the results and kind of

1072
00:37:50,560 --> 00:37:52,960
store those off in a couple different

1073
00:37:52,160 --> 00:37:55,598
formats

1074
00:37:52,960 --> 00:37:56,880
to make it easier for you to process

1075
00:37:55,599 --> 00:38:00,160
anyways if you're interested

1076
00:37:56,880 --> 00:38:02,240
yeah it's down there on the stage 2 sac

1077
00:38:00,160 --> 00:38:04,078
github account under the capture the

1078
00:38:02,240 --> 00:38:04,640
cloud repo which is kind of where i

1079
00:38:04,079 --> 00:38:07,520
throw

1080
00:38:04,640 --> 00:38:09,520
scripts uh for this presentation and

1081
00:38:07,520 --> 00:38:12,560
some of the previous presentations i did

1082
00:38:09,520 --> 00:38:14,000
um in the past

1083
00:38:12,560 --> 00:38:16,480
you know but anything that really does

1084
00:38:14,000 --> 00:38:18,400
owes in or captures data about dns is

1085
00:38:16,480 --> 00:38:20,880
going to be really useful to you right

1086
00:38:18,400 --> 00:38:21,440
so um you know all the way from like

1087
00:38:20,880 --> 00:38:23,920
past

1088
00:38:21,440 --> 00:38:25,440
uh we we've used password total for

1089
00:38:23,920 --> 00:38:28,240
penthouse engagements in the past

1090
00:38:25,440 --> 00:38:29,839
and you know i tried this we tried this

1091
00:38:28,240 --> 00:38:31,279
with passive total and

1092
00:38:29,839 --> 00:38:33,279
we got a lot more results than we did

1093
00:38:31,280 --> 00:38:34,480
from virustotal and you know it looks

1094
00:38:33,280 --> 00:38:36,160
like virustotal kind of

1095
00:38:34,480 --> 00:38:37,599
caps us on the results at about a

1096
00:38:36,160 --> 00:38:39,680
hundred um

1097
00:38:37,599 --> 00:38:41,040
or past the total we can get a lot more

1098
00:38:39,680 --> 00:38:43,759
back so

1099
00:38:41,040 --> 00:38:44,800
um you know we get in the magnitude of

1100
00:38:43,760 --> 00:38:48,000
like thousands back

1101
00:38:44,800 --> 00:38:49,760
right so um you know you can also just

1102
00:38:48,000 --> 00:38:50,800
try standard pen testing it was in tools

1103
00:38:49,760 --> 00:38:53,359
like a mask

1104
00:38:50,800 --> 00:38:54,960
um that would query multiple sources you

1105
00:38:53,359 --> 00:38:55,680
know i'm sure google doorking and other

1106
00:38:54,960 --> 00:38:58,400
stuff like that

1107
00:38:55,680 --> 00:38:59,680
would provide you account ids as well

1108
00:38:58,400 --> 00:39:00,000
and then the one thing i just want to

1109
00:38:59,680 --> 00:39:03,279
mention

1110
00:39:00,000 --> 00:39:06,400
here that isn't in the slides um but

1111
00:39:03,280 --> 00:39:08,720
is important to note is there's a lot of

1112
00:39:06,400 --> 00:39:10,079
other aws services and i should probably

1113
00:39:08,720 --> 00:39:13,118
make a list

1114
00:39:10,079 --> 00:39:15,359
but that when you configure them and

1115
00:39:13,119 --> 00:39:18,400
deploy them by default

1116
00:39:15,359 --> 00:39:21,279
they will add in your account id

1117
00:39:18,400 --> 00:39:22,400
um in some part of the url for that

1118
00:39:21,280 --> 00:39:24,320
service so

1119
00:39:22,400 --> 00:39:26,720
so instead of just mining purely for

1120
00:39:24,320 --> 00:39:28,960
this sign in page there's other urls

1121
00:39:26,720 --> 00:39:30,319
that you can mine for

1122
00:39:28,960 --> 00:39:32,720
at least a couple that i know off the

1123
00:39:30,320 --> 00:39:35,040
top my head that would also

1124
00:39:32,720 --> 00:39:35,839
by default disclose account ids so you

1125
00:39:35,040 --> 00:39:37,440
can maybe

1126
00:39:35,839 --> 00:39:39,759
collect a lot more account ids that way

1127
00:39:37,440 --> 00:39:39,760
as well

1128
00:39:40,480 --> 00:39:46,800
okay but you know um

1129
00:39:44,240 --> 00:39:48,078
how would we really build a service

1130
00:39:46,800 --> 00:39:51,520
application

1131
00:39:48,079 --> 00:39:54,160
that would mine and find

1132
00:39:51,520 --> 00:39:54,960
account valid account ids for us right

1133
00:39:54,160 --> 00:39:58,399
without any

1134
00:39:54,960 --> 00:40:00,800
prior knowledge um so we're gonna use

1135
00:39:58,400 --> 00:40:03,119
the sam to do this that little squirrel

1136
00:40:00,800 --> 00:40:05,680
guy is the logo for sam

1137
00:40:03,119 --> 00:40:06,720
you know and uh sam's gonna produce a

1138
00:40:05,680 --> 00:40:08,560
cloud formation

1139
00:40:06,720 --> 00:40:11,200
it's gonna kind of we're gonna pass it

1140
00:40:08,560 --> 00:40:12,960
two main things which is a template

1141
00:40:11,200 --> 00:40:14,560
that's going to kind of define how we

1142
00:40:12,960 --> 00:40:16,240
want our service application

1143
00:40:14,560 --> 00:40:18,640
deployed and then we're also going to

1144
00:40:16,240 --> 00:40:19,598
pass it a python application that's a

1145
00:40:18,640 --> 00:40:20,960
app.pi

1146
00:40:19,599 --> 00:40:22,800
and that's what's going to get deployed

1147
00:40:20,960 --> 00:40:24,720
inside our lambda function and really

1148
00:40:22,800 --> 00:40:26,000
have a lot of our logic for this

1149
00:40:24,720 --> 00:40:28,240
application

1150
00:40:26,000 --> 00:40:29,440
so and when we execute sam it's going to

1151
00:40:28,240 --> 00:40:31,680
build a cloud permissioned

1152
00:40:29,440 --> 00:40:33,680
template it's going to deploy that and

1153
00:40:31,680 --> 00:40:35,118
that that's basically going to leverage

1154
00:40:33,680 --> 00:40:36,879
and work this is a pretty simple

1155
00:40:35,119 --> 00:40:39,760
scenario right it's going to just use

1156
00:40:36,880 --> 00:40:40,160
stand up like an api gateway so we can

1157
00:40:39,760 --> 00:40:43,599
you know

1158
00:40:40,160 --> 00:40:46,480
curl an api and trigger

1159
00:40:43,599 --> 00:40:48,079
this chain and then it's going to pass

1160
00:40:46,480 --> 00:40:50,480
data from the curl to

1161
00:40:48,079 --> 00:40:52,400
the lambda function and then the lambda

1162
00:40:50,480 --> 00:40:55,440
function is going to try and discover

1163
00:40:52,400 --> 00:40:58,319
valid aws account ids and then

1164
00:40:55,440 --> 00:40:59,760
based on whatever results it has in the

1165
00:40:58,319 --> 00:41:02,000
15 minutes or left

1166
00:40:59,760 --> 00:41:03,599
less time window it has to execute it's

1167
00:41:02,000 --> 00:41:08,079
going to store those results

1168
00:41:03,599 --> 00:41:11,119
inside of an s3 bucket so

1169
00:41:08,079 --> 00:41:13,680
sam has recently

1170
00:41:11,119 --> 00:41:14,560
provided very strong integrations and

1171
00:41:13,680 --> 00:41:18,399
supports for

1172
00:41:14,560 --> 00:41:19,839
common ides so specifically

1173
00:41:18,400 --> 00:41:22,480
they have a strong integration with

1174
00:41:19,839 --> 00:41:25,920
pycharm so while you can do

1175
00:41:22,480 --> 00:41:26,319
all this using the sam cli the way that

1176
00:41:25,920 --> 00:41:28,079
i

1177
00:41:26,319 --> 00:41:29,520
like to develop at least python

1178
00:41:28,079 --> 00:41:33,359
applications is

1179
00:41:29,520 --> 00:41:35,680
by using the sam extensions for pycharm

1180
00:41:33,359 --> 00:41:37,119
and uh pycharm's free there's like a

1181
00:41:35,680 --> 00:41:38,160
community edition you just go to and

1182
00:41:37,119 --> 00:41:40,560
download

1183
00:41:38,160 --> 00:41:42,000
and it has some pretty slick

1184
00:41:40,560 --> 00:41:45,119
integrations

1185
00:41:42,000 --> 00:41:48,319
that would allow you to test your

1186
00:41:45,119 --> 00:41:51,119
lambda code locally as well as automate

1187
00:41:48,319 --> 00:41:52,319
uh pushing out new code bases and

1188
00:41:51,119 --> 00:41:55,280
reconfiguring and deploying these

1189
00:41:52,319 --> 00:41:59,680
services as needed

1190
00:41:55,280 --> 00:42:03,440
so here is an example template

1191
00:41:59,680 --> 00:42:06,560
for sam and you know

1192
00:42:03,440 --> 00:42:08,480
when you build a sam project it deploys

1193
00:42:06,560 --> 00:42:12,240
a sample template

1194
00:42:08,480 --> 00:42:14,000
um and there's more in amazon's github

1195
00:42:12,240 --> 00:42:16,479
if you're interested so you can check

1196
00:42:14,000 --> 00:42:18,079
those out for other options but

1197
00:42:16,480 --> 00:42:20,000
you know basically this is going to

1198
00:42:18,079 --> 00:42:22,720
create an api gateway

1199
00:42:20,000 --> 00:42:24,240
that gatepay is basically going to have

1200
00:42:22,720 --> 00:42:26,959
one endpoint

1201
00:42:24,240 --> 00:42:28,319
called slash hello that accepts a get

1202
00:42:26,960 --> 00:42:30,880
request

1203
00:42:28,319 --> 00:42:32,160
and then it's going to take whatever's

1204
00:42:30,880 --> 00:42:34,960
passed to that

1205
00:42:32,160 --> 00:42:35,680
um get request and pass it to a lambda

1206
00:42:34,960 --> 00:42:37,599
function

1207
00:42:35,680 --> 00:42:39,000
if execution or runtime environment for

1208
00:42:37,599 --> 00:42:40,720
that lambda function is going to be

1209
00:42:39,000 --> 00:42:43,359
python37

1210
00:42:40,720 --> 00:42:44,640
um you know one thing that i did here in

1211
00:42:43,359 --> 00:42:48,319
this example

1212
00:42:44,640 --> 00:42:50,319
is i attached a policy to this so that

1213
00:42:48,319 --> 00:42:51,920
we could write out files to the s3

1214
00:42:50,319 --> 00:42:53,839
bucket

1215
00:42:51,920 --> 00:42:56,800
you know in this example i just attached

1216
00:42:53,839 --> 00:42:58,480
the amazon s3 full access policy

1217
00:42:56,800 --> 00:42:59,920
in real life you you wouldn't want to do

1218
00:42:58,480 --> 00:43:01,920
that because you know

1219
00:42:59,920 --> 00:43:03,680
that would give you access to all the s3

1220
00:43:01,920 --> 00:43:05,599
buckets inside of this account

1221
00:43:03,680 --> 00:43:07,040
and you'd want to create kind of a more

1222
00:43:05,599 --> 00:43:10,319
granular policy

1223
00:43:07,040 --> 00:43:13,359
and then just attach that so

1224
00:43:10,319 --> 00:43:14,560
so um but for you know simplicity's sake

1225
00:43:13,359 --> 00:43:16,720
this will work

1226
00:43:14,560 --> 00:43:18,720
and um it's just kind of running inside

1227
00:43:16,720 --> 00:43:22,720
a test aws account anyways

1228
00:43:18,720 --> 00:43:25,598
so um and then also i you want to modify

1229
00:43:22,720 --> 00:43:26,720
the max timeout by default it's like set

1230
00:43:25,599 --> 00:43:29,520
to three seconds

1231
00:43:26,720 --> 00:43:31,520
or something ridiculously low uh so i

1232
00:43:29,520 --> 00:43:32,640
just move that to the max which is 15

1233
00:43:31,520 --> 00:43:34,240
minutes

1234
00:43:32,640 --> 00:43:36,640
you know which theoretically might cost

1235
00:43:34,240 --> 00:43:38,720
you more money but um

1236
00:43:36,640 --> 00:43:40,160
you know for what we're trying to do you

1237
00:43:38,720 --> 00:43:42,240
know i calculate

1238
00:43:40,160 --> 00:43:44,000
that you know this thing is going to run

1239
00:43:42,240 --> 00:43:46,720
between you know

1240
00:43:44,000 --> 00:43:48,000
around five minutes at the top so i just

1241
00:43:46,720 --> 00:43:48,480
want to make sure there's plenty of time

1242
00:43:48,000 --> 00:43:54,880
there

1243
00:43:48,480 --> 00:43:57,440
a buffer and um for what we need

1244
00:43:54,880 --> 00:43:58,160
okay and then for application source

1245
00:43:57,440 --> 00:44:00,319
code

1246
00:43:58,160 --> 00:44:01,279
um we're just gonna do keep it really

1247
00:44:00,319 --> 00:44:03,279
simple

1248
00:44:01,280 --> 00:44:05,599
we're gonna use we're gonna generate an

1249
00:44:03,280 --> 00:44:06,160
id right we're gonna generate a 12 digit

1250
00:44:05,599 --> 00:44:07,280
number

1251
00:44:06,160 --> 00:44:09,118
and we're going to use the secrets

1252
00:44:07,280 --> 00:44:09,680
library to do that so that that should

1253
00:44:09,119 --> 00:44:13,119
be

1254
00:44:09,680 --> 00:44:16,240
truly random um not like you know

1255
00:44:13,119 --> 00:44:18,640
fake random right uh so

1256
00:44:16,240 --> 00:44:19,839
and then we're going to just try to do

1257
00:44:18,640 --> 00:44:23,040
use the request

1258
00:44:19,839 --> 00:44:26,160
library in python to you know

1259
00:44:23,040 --> 00:44:28,319
hit the web console with that

1260
00:44:26,160 --> 00:44:29,759
in the sub domain list and then we're

1261
00:44:28,319 --> 00:44:32,640
going to analyze the results

1262
00:44:29,760 --> 00:44:33,760
right if we see a 302 then we'll know

1263
00:44:32,640 --> 00:44:36,240
that that account

1264
00:44:33,760 --> 00:44:37,359
exists and we'll write the account id

1265
00:44:36,240 --> 00:44:40,399
out to an s3 but

1266
00:44:37,359 --> 00:44:42,720
a file or an object in s3 bucket and if

1267
00:44:40,400 --> 00:44:43,599
we see our 40410 the count does not

1268
00:44:42,720 --> 00:44:46,000
exist

1269
00:44:43,599 --> 00:44:47,839
um and i think the script also writes

1270
00:44:46,000 --> 00:44:49,440
that data out as well but

1271
00:44:47,839 --> 00:44:50,960
you know you could just discard it

1272
00:44:49,440 --> 00:44:51,839
because we're not really interested in

1273
00:44:50,960 --> 00:44:54,079
valid accounts

1274
00:44:51,839 --> 00:44:54,078
right

1275
00:44:55,200 --> 00:44:59,439
okay and then if you have pycharm

1276
00:44:57,599 --> 00:45:01,920
configured which is actually

1277
00:44:59,440 --> 00:45:04,000
surprisingly easy to do you can follow

1278
00:45:01,920 --> 00:45:06,319
this blog post at the bottom here

1279
00:45:04,000 --> 00:45:07,280
uh that walks you through how to you

1280
00:45:06,319 --> 00:45:10,720
know add

1281
00:45:07,280 --> 00:45:12,640
sam to pycharm um you know

1282
00:45:10,720 --> 00:45:14,000
you just right click on your project in

1283
00:45:12,640 --> 00:45:16,720
pycharm and you say

1284
00:45:14,000 --> 00:45:18,000
deploy service application uh it gives

1285
00:45:16,720 --> 00:45:19,759
you like a pop-up

1286
00:45:18,000 --> 00:45:21,040
you have to like have an s3 bucket where

1287
00:45:19,760 --> 00:45:21,680
you're gonna store the cloud formation

1288
00:45:21,040 --> 00:45:23,440
template

1289
00:45:21,680 --> 00:45:25,118
and other data that it needs as part of

1290
00:45:23,440 --> 00:45:27,119
the deployment process

1291
00:45:25,119 --> 00:45:29,200
um but you know that's as easy as just

1292
00:45:27,119 --> 00:45:30,880
specifying a random name because

1293
00:45:29,200 --> 00:45:33,598
s3 buckets names have to be globally

1294
00:45:30,880 --> 00:45:35,119
unique across all aws accounts

1295
00:45:33,599 --> 00:45:37,440
and then once it finishes the deployment

1296
00:45:35,119 --> 00:45:38,560
process you click on the cloudformation

1297
00:45:37,440 --> 00:45:40,079
tab in pi term

1298
00:45:38,560 --> 00:45:42,640
and you'll see you know either

1299
00:45:40,079 --> 00:45:43,920
deployment complete or update complete

1300
00:45:42,640 --> 00:45:46,000
update complete if you've already

1301
00:45:43,920 --> 00:45:48,240
deployed it you know

1302
00:45:46,000 --> 00:45:50,480
things like that and then you know if

1303
00:45:48,240 --> 00:45:54,319
you click over to the outputs tab

1304
00:45:50,480 --> 00:45:59,040
um you will see the url

1305
00:45:54,319 --> 00:46:02,560
that it created by default to that

1306
00:45:59,040 --> 00:46:04,160
api gateway created by default that will

1307
00:46:02,560 --> 00:46:05,920
trigger and pass this data off to the

1308
00:46:04,160 --> 00:46:07,359
lambda function so

1309
00:46:05,920 --> 00:46:09,040
that's that's the url we're going to

1310
00:46:07,359 --> 00:46:12,960
want to curl to kind of

1311
00:46:09,040 --> 00:46:12,960
start the code execution process here

1312
00:46:13,119 --> 00:46:16,480
so um just to kind of highlight what

1313
00:46:15,280 --> 00:46:19,440
we're going to be doing

1314
00:46:16,480 --> 00:46:19,440
so we're going to

1315
00:46:20,079 --> 00:46:26,480
use curl to call the api gateway url

1316
00:46:24,400 --> 00:46:27,599
when that happens it's going to call

1317
00:46:26,480 --> 00:46:30,319
this lambda function

1318
00:46:27,599 --> 00:46:31,920
that's going to reach out with the

1319
00:46:30,319 --> 00:46:34,480
python request library

1320
00:46:31,920 --> 00:46:36,560
to the web console to see if the random

1321
00:46:34,480 --> 00:46:37,839
number it generated is valid or not

1322
00:46:36,560 --> 00:46:39,920
and then if it's valid it's going to

1323
00:46:37,839 --> 00:46:42,000
store it in the s3 bucket and then we

1324
00:46:39,920 --> 00:46:44,880
can analyze the results in the s3 bucket

1325
00:46:42,000 --> 00:46:47,200
to get a complete list of all the valid

1326
00:46:44,880 --> 00:46:49,040
account ids this system was able to find

1327
00:46:47,200 --> 00:46:50,640
we're going to deploy this using sam

1328
00:46:49,040 --> 00:46:51,520
sam's going to create a cloudformation

1329
00:46:50,640 --> 00:46:53,040
template

1330
00:46:51,520 --> 00:46:54,880
and use the confirmation service to

1331
00:46:53,040 --> 00:46:57,200
really deploy

1332
00:46:54,880 --> 00:46:58,720
out this and if you want this to

1333
00:46:57,200 --> 00:47:01,279
continually run

1334
00:46:58,720 --> 00:47:02,720
we could just throw our curl command in

1335
00:47:01,280 --> 00:47:04,400
a cron job

1336
00:47:02,720 --> 00:47:06,399
and that will make sure that this

1337
00:47:04,400 --> 00:47:11,119
process just keeps running

1338
00:47:06,400 --> 00:47:12,079
perpetually so um in this pre-contrived

1339
00:47:11,119 --> 00:47:13,920
example

1340
00:47:12,079 --> 00:47:15,920
uh you know i just set the crown job to

1341
00:47:13,920 --> 00:47:19,119
run every three minutes

1342
00:47:15,920 --> 00:47:22,000
and then i put a random delay

1343
00:47:19,119 --> 00:47:23,280
in the lambda function uh between zero

1344
00:47:22,000 --> 00:47:27,680
and three seconds

1345
00:47:23,280 --> 00:47:30,400
between each request to the console

1346
00:47:27,680 --> 00:47:32,160
with a max runtime of 15 minutes and

1347
00:47:30,400 --> 00:47:33,760
then i just kind of pick some arbitrary

1348
00:47:32,160 --> 00:47:34,078
numbers that i thought would work inside

1349
00:47:33,760 --> 00:47:36,880
this

1350
00:47:34,079 --> 00:47:38,000
15 minute window so i just said every

1351
00:47:36,880 --> 00:47:41,280
time the lando function

1352
00:47:38,000 --> 00:47:43,520
gets executed it's going to try 33 times

1353
00:47:41,280 --> 00:47:45,119
so it's going to generate 33

1354
00:47:43,520 --> 00:47:46,720
account id numbers it's going to have a

1355
00:47:45,119 --> 00:47:48,000
random delay between zero and three

1356
00:47:46,720 --> 00:47:49,839
seconds and then it's going to try and

1357
00:47:48,000 --> 00:47:52,400
hit the portal

1358
00:47:49,839 --> 00:47:53,920
with those and analyze the results and

1359
00:47:52,400 --> 00:47:56,800
jam those into an s3 bucket

1360
00:47:53,920 --> 00:47:57,920
before the lambda function dies off and

1361
00:47:56,800 --> 00:47:59,599
then you know if

1362
00:47:57,920 --> 00:48:01,599
it gets stuck for any reason which i put

1363
00:47:59,599 --> 00:48:04,079
the max time out of the

1364
00:48:01,599 --> 00:48:05,440
request library at five seconds so

1365
00:48:04,079 --> 00:48:07,200
theoretically it shouldn't

1366
00:48:05,440 --> 00:48:08,800
but if it does um you know this whole

1367
00:48:07,200 --> 00:48:10,399
thing's going to kill over in 15 minutes

1368
00:48:08,800 --> 00:48:14,319
anyways

1369
00:48:10,400 --> 00:48:18,160
so when i tested this

1370
00:48:14,319 --> 00:48:21,279
for every hour i let this run

1371
00:48:18,160 --> 00:48:24,960
i collected approximately 40 valid

1372
00:48:21,280 --> 00:48:27,599
account ids um so i got about 302 on 40

1373
00:48:24,960 --> 00:48:30,800
different randomly generated accounts

1374
00:48:27,599 --> 00:48:32,640
i feel like you know you could up these

1375
00:48:30,800 --> 00:48:34,240
you could tweak this setup to be a lot

1376
00:48:32,640 --> 00:48:37,200
more aggressive than i did

1377
00:48:34,240 --> 00:48:38,078
um you know i was really just trying to

1378
00:48:37,200 --> 00:48:41,200
um

1379
00:48:38,079 --> 00:48:44,559
you know see if this was possible um

1380
00:48:41,200 --> 00:48:47,680
and looks like as of today at least

1381
00:48:44,559 --> 00:48:50,160
it is possible so

1382
00:48:47,680 --> 00:48:50,160
there you go

1383
00:48:50,800 --> 00:48:53,920
all right and so you can kind of see in

1384
00:48:52,640 --> 00:48:56,879
my bucket

1385
00:48:53,920 --> 00:48:58,640
the 302 files that got created and then

1386
00:48:56,880 --> 00:49:00,079
kind of a sampling and i just opened up

1387
00:48:58,640 --> 00:49:01,839
three of those files

1388
00:49:00,079 --> 00:49:03,280
and it shows some account ids it was

1389
00:49:01,839 --> 00:49:06,400
able to get three or twos on

1390
00:49:03,280 --> 00:49:08,720
that it thinks exists right or

1391
00:49:06,400 --> 00:49:10,000
it should exist based off the response

1392
00:49:08,720 --> 00:49:11,598
codes we're getting back from these

1393
00:49:10,000 --> 00:49:14,640
requests

1394
00:49:11,599 --> 00:49:16,160
so um yeah so

1395
00:49:14,640 --> 00:49:17,759
that's kind of a simple example of how

1396
00:49:16,160 --> 00:49:21,040
to build a

1397
00:49:17,760 --> 00:49:24,319
serverless application using sam that

1398
00:49:21,040 --> 00:49:24,319
would allow you to discover

1399
00:49:24,480 --> 00:49:28,319
aws account ids that are valid

1400
00:49:28,480 --> 00:49:31,680
um you know a better way to design this

1401
00:49:31,280 --> 00:49:33,839
but

1402
00:49:31,680 --> 00:49:34,799
uh i just wanted to keep it as simple as

1403
00:49:33,839 --> 00:49:37,759
possible

1404
00:49:34,800 --> 00:49:39,599
uh for the purposes of the presentation

1405
00:49:37,760 --> 00:49:41,599
is really to use cloudwatch

1406
00:49:39,599 --> 00:49:44,240
uh rather than you know a cron job with

1407
00:49:41,599 --> 00:49:46,000
curl so you can actually

1408
00:49:44,240 --> 00:49:47,359
like we talked about before you can have

1409
00:49:46,000 --> 00:49:49,599
other aws services

1410
00:49:47,359 --> 00:49:50,960
kick off and kind of use land as the

1411
00:49:49,599 --> 00:49:53,119
glue between them

1412
00:49:50,960 --> 00:49:54,160
um so you would use cloudwatch as kind

1413
00:49:53,119 --> 00:49:56,559
of like a timer

1414
00:49:54,160 --> 00:49:58,720
type service or scheduler type service

1415
00:49:56,559 --> 00:50:00,720
so you can use that to

1416
00:49:58,720 --> 00:50:02,240
trigger an event that would kick off the

1417
00:50:00,720 --> 00:50:04,640
lambda function

1418
00:50:02,240 --> 00:50:07,520
and then you wouldn't need that cron job

1419
00:50:04,640 --> 00:50:07,520
and curl command

1420
00:50:08,480 --> 00:50:13,119
i oftentimes find when i'm building

1421
00:50:10,240 --> 00:50:14,879
scripts for red team engagements that

1422
00:50:13,119 --> 00:50:17,599
you know i'm not not really doing a

1423
00:50:14,880 --> 00:50:20,319
chrome thing like this i'm more just

1424
00:50:17,599 --> 00:50:22,559
you know wanting the lambda to do some

1425
00:50:20,319 --> 00:50:23,599
processing so that's why i typically do

1426
00:50:22,559 --> 00:50:26,160
that kind of

1427
00:50:23,599 --> 00:50:27,119
api gateway curl type of implementation

1428
00:50:26,160 --> 00:50:29,279
but

1429
00:50:27,119 --> 00:50:30,640
you know for this project this probably

1430
00:50:29,280 --> 00:50:33,839
would have been a slightly better

1431
00:50:30,640 --> 00:50:36,480
implementation overall well it'd be a

1432
00:50:33,839 --> 00:50:38,078
more cloud native implementation

1433
00:50:36,480 --> 00:50:41,760
[Music]

1434
00:50:38,079 --> 00:50:45,040
so let's say you have an account id

1435
00:50:41,760 --> 00:50:48,319
but you're unsure

1436
00:50:45,040 --> 00:50:50,319
you know if a resource is actually

1437
00:50:48,319 --> 00:50:54,640
associated with that account id

1438
00:50:50,319 --> 00:50:58,558
um one interesting thing to note is

1439
00:50:54,640 --> 00:51:01,440
recently aws has been

1440
00:50:58,559 --> 00:51:03,520
using account ids is kind of an optional

1441
00:51:01,440 --> 00:51:05,520
extra layer of security

1442
00:51:03,520 --> 00:51:07,280
and i'll kind of explain why they did

1443
00:51:05,520 --> 00:51:08,800
this and then

1444
00:51:07,280 --> 00:51:10,960
you know what this means from an

1445
00:51:08,800 --> 00:51:14,480
attacker's perspective right

1446
00:51:10,960 --> 00:51:19,040
so um a long-standing issue

1447
00:51:14,480 --> 00:51:22,319
in cloud providers is that of

1448
00:51:19,040 --> 00:51:25,440
a takeover attack

1449
00:51:22,319 --> 00:51:25,920
right where let's say you have an s3

1450
00:51:25,440 --> 00:51:28,480
bucket

1451
00:51:25,920 --> 00:51:29,280
and the s3 bucket has a globally unique

1452
00:51:28,480 --> 00:51:32,000
name so this

1453
00:51:29,280 --> 00:51:33,440
name is unique across all aws accounts

1454
00:51:32,000 --> 00:51:36,480
across the world

1455
00:51:33,440 --> 00:51:39,440
um so let's say it's like bryce rocks

1456
00:51:36,480 --> 00:51:41,839
you know but then one day i just decide

1457
00:51:39,440 --> 00:51:45,760
like you know bryce doesn't rock anymore

1458
00:51:41,839 --> 00:51:48,558
so i'm gonna delete this s3 bucket

1459
00:51:45,760 --> 00:51:50,640
you know but then uh you know somebody

1460
00:51:48,559 --> 00:51:54,160
else on our team has written

1461
00:51:50,640 --> 00:51:57,759
a script or has created a website

1462
00:51:54,160 --> 00:52:00,879
and that script or website is

1463
00:51:57,760 --> 00:52:01,440
reaching out to the bryce rocks s3

1464
00:52:00,880 --> 00:52:03,839
bucket

1465
00:52:01,440 --> 00:52:05,520
for resources due to the objects that

1466
00:52:03,839 --> 00:52:08,160
were previously stored in there

1467
00:52:05,520 --> 00:52:09,200
so maybe for example there was like a

1468
00:52:08,160 --> 00:52:11,839
javascript file

1469
00:52:09,200 --> 00:52:12,960
stored in there previously and the

1470
00:52:11,839 --> 00:52:16,078
website would reach out

1471
00:52:12,960 --> 00:52:19,200
grab that javascript file and load it

1472
00:52:16,079 --> 00:52:21,680
as expected well um if

1473
00:52:19,200 --> 00:52:23,919
i you know decide bryce no longer rocks

1474
00:52:21,680 --> 00:52:26,720
and i delete the bryce rocks

1475
00:52:23,920 --> 00:52:28,400
s3 bucket somebody else could come along

1476
00:52:26,720 --> 00:52:31,439
and in their aws account

1477
00:52:28,400 --> 00:52:32,240
they could register the bryce rocks as

1478
00:52:31,440 --> 00:52:34,400
three bucket

1479
00:52:32,240 --> 00:52:36,640
and then our website would pull

1480
00:52:34,400 --> 00:52:37,359
javascript from somebody else's s3

1481
00:52:36,640 --> 00:52:38,640
bucket

1482
00:52:37,359 --> 00:52:40,400
and load it in the context of the

1483
00:52:38,640 --> 00:52:41,680
website and

1484
00:52:40,400 --> 00:52:43,760
you know that could be a really bad

1485
00:52:41,680 --> 00:52:45,759
scenario right so

1486
00:52:43,760 --> 00:52:48,240
so in order to prevent these type of

1487
00:52:45,760 --> 00:52:50,800
resource takeover tax

1488
00:52:48,240 --> 00:52:52,720
aws has implemented recently this

1489
00:52:50,800 --> 00:52:55,359
expected bucker own it

1490
00:52:52,720 --> 00:52:55,839
option right and what expected buttocker

1491
00:52:55,359 --> 00:52:58,960
owner

1492
00:52:55,839 --> 00:53:02,640
option does is it

1493
00:52:58,960 --> 00:53:05,760
you know you can specify as a client

1494
00:53:02,640 --> 00:53:07,118
an account id number and if the resource

1495
00:53:05,760 --> 00:53:09,200
or the s3 bucket

1496
00:53:07,119 --> 00:53:11,119
is uh has the right name but doesn't

1497
00:53:09,200 --> 00:53:13,680
have the right account id number

1498
00:53:11,119 --> 00:53:14,480
then the lookup is going to fail the 403

1499
00:53:13,680 --> 00:53:16,399
is going to fail

1500
00:53:14,480 --> 00:53:17,839
and so this basically lets you have this

1501
00:53:16,400 --> 00:53:20,800
extra check

1502
00:53:17,839 --> 00:53:22,000
that uh you're pulling a resource or

1503
00:53:20,800 --> 00:53:25,200
static content

1504
00:53:22,000 --> 00:53:25,680
from a from a you know trusted aws

1505
00:53:25,200 --> 00:53:28,799
account

1506
00:53:25,680 --> 00:53:30,720
right you know that's all

1507
00:53:28,800 --> 00:53:32,880
well and good i think this is actually a

1508
00:53:30,720 --> 00:53:34,799
great feature takeover attacks are

1509
00:53:32,880 --> 00:53:36,400
really common and you know a lot of the

1510
00:53:34,800 --> 00:53:38,079
bug bounty hunters were really big on

1511
00:53:36,400 --> 00:53:41,599
them for a while because they're

1512
00:53:38,079 --> 00:53:42,800
super easy to find and um and all that

1513
00:53:41,599 --> 00:53:44,880
and you know there really wasn't any

1514
00:53:42,800 --> 00:53:45,839
defense like clients really had no way

1515
00:53:44,880 --> 00:53:47,839
to

1516
00:53:45,839 --> 00:53:49,119
just you know someone deleted a bucket

1517
00:53:47,839 --> 00:53:50,480
and then somebody else registered there

1518
00:53:49,119 --> 00:53:51,839
was no way for someone who wrote an

1519
00:53:50,480 --> 00:53:52,800
application that depended on that bucket

1520
00:53:51,839 --> 00:53:55,839
to really know that

1521
00:53:52,800 --> 00:53:57,760
so so i think that's great but as a

1522
00:53:55,839 --> 00:53:58,558
consequence or unintended side effect of

1523
00:53:57,760 --> 00:54:02,000
that

1524
00:53:58,559 --> 00:54:04,800
if we have an aws account id

1525
00:54:02,000 --> 00:54:05,920
but we're unsure if that account id is

1526
00:54:04,800 --> 00:54:08,000
associated

1527
00:54:05,920 --> 00:54:09,040
with the account that's running this s3

1528
00:54:08,000 --> 00:54:13,119
bucket

1529
00:54:09,040 --> 00:54:14,480
you know we can now and we can now

1530
00:54:13,119 --> 00:54:17,359
let's say there's a publicly available

1531
00:54:14,480 --> 00:54:19,520
resource like an image and an s3 bucket

1532
00:54:17,359 --> 00:54:22,000
we could request that resource we could

1533
00:54:19,520 --> 00:54:23,599
see okay we can get to that resource

1534
00:54:22,000 --> 00:54:25,280
and then we can request that resource

1535
00:54:23,599 --> 00:54:28,000
again with

1536
00:54:25,280 --> 00:54:29,839
the account id that we think might be

1537
00:54:28,000 --> 00:54:32,319
hosting that resource

1538
00:54:29,839 --> 00:54:33,920
and if it comes back successful we'll

1539
00:54:32,319 --> 00:54:36,160
know okay that is the account id that

1540
00:54:33,920 --> 00:54:37,760
that s3 bucket is associated with

1541
00:54:36,160 --> 00:54:39,279
and if we get back at 403 then we'll be

1542
00:54:37,760 --> 00:54:41,119
like okay that's not the account id

1543
00:54:39,280 --> 00:54:42,960
let's try the next account id and in

1544
00:54:41,119 --> 00:54:44,720
that manner we can kind of

1545
00:54:42,960 --> 00:54:46,880
use this layer of reconnaissance to

1546
00:54:44,720 --> 00:54:48,000
figure out you know which accounts are

1547
00:54:46,880 --> 00:54:51,280
hosting

1548
00:54:48,000 --> 00:54:54,559
what resources at least when it comes to

1549
00:54:51,280 --> 00:54:55,760
s3 right which is a very common service

1550
00:54:54,559 --> 00:54:57,920
used on aws

1551
00:54:55,760 --> 00:55:00,240
so so i'm not saying this is an end of

1552
00:54:57,920 --> 00:55:01,440
the world or doomsday type scenario or

1553
00:55:00,240 --> 00:55:03,839
anything like that

1554
00:55:01,440 --> 00:55:05,599
all i'm saying is you know you implement

1555
00:55:03,839 --> 00:55:06,078
one security feature to try and improve

1556
00:55:05,599 --> 00:55:07,760
things

1557
00:55:06,079 --> 00:55:09,359
and you know the unintended side effect

1558
00:55:07,760 --> 00:55:12,079
of that is really

1559
00:55:09,359 --> 00:55:13,279
you know if someone is trying to scope

1560
00:55:12,079 --> 00:55:16,160
out someone's

1561
00:55:13,280 --> 00:55:16,480
aws environment and they're trying to

1562
00:55:16,160 --> 00:55:18,960
map

1563
00:55:16,480 --> 00:55:20,880
out what resources are inside which

1564
00:55:18,960 --> 00:55:23,040
accounts so then they know which

1565
00:55:20,880 --> 00:55:25,040
accounts they need to be targeting more

1566
00:55:23,040 --> 00:55:27,200
um you know this is one way they could

1567
00:55:25,040 --> 00:55:29,759
kind of do that recon

1568
00:55:27,200 --> 00:55:30,399
um that you know previously was not

1569
00:55:29,760 --> 00:55:32,640
available

1570
00:55:30,400 --> 00:55:36,640
i mean this is a you know a very new

1571
00:55:32,640 --> 00:55:36,640
feature in the aws platform

1572
00:55:46,480 --> 00:55:54,880
okay so use case number two

1573
00:55:50,400 --> 00:55:58,480
and uh you know i realize

1574
00:55:54,880 --> 00:56:01,760
you know this is not new right i mean

1575
00:55:58,480 --> 00:56:03,520
if there is a way if there's a service

1576
00:56:01,760 --> 00:56:04,880
it has inputs and outputs

1577
00:56:03,520 --> 00:56:07,200
somebody's going to figure out a way to

1578
00:56:04,880 --> 00:56:09,680
do command and control through it right

1579
00:56:07,200 --> 00:56:10,558
that's not that's not it i just wanted

1580
00:56:09,680 --> 00:56:13,200
to

1581
00:56:10,559 --> 00:56:14,319
show how we get kind of elegant using

1582
00:56:13,200 --> 00:56:16,319
these services

1583
00:56:14,319 --> 00:56:18,480
and why you might want to consider that

1584
00:56:16,319 --> 00:56:19,520
as a way to augment your existing red

1585
00:56:18,480 --> 00:56:23,119
team operations

1586
00:56:19,520 --> 00:56:23,839
so so um you know just to kind of

1587
00:56:23,119 --> 00:56:26,880
reiterate

1588
00:56:23,839 --> 00:56:28,319
you know tons of blog posts about using

1589
00:56:26,880 --> 00:56:30,799
cloud providers

1590
00:56:28,319 --> 00:56:32,319
for domain fronting um you know i'm not

1591
00:56:30,799 --> 00:56:33,280
going to go into depth into main

1592
00:56:32,319 --> 00:56:35,680
fronting here

1593
00:56:33,280 --> 00:56:37,280
but um there's a great blog post on this

1594
00:56:35,680 --> 00:56:38,078
slide that you can go check out in more

1595
00:56:37,280 --> 00:56:40,480
depth if you

1596
00:56:38,079 --> 00:56:41,680
want to see how to do that on azure you

1597
00:56:40,480 --> 00:56:44,960
know in addition

1598
00:56:41,680 --> 00:56:46,799
on azure we saw 40 north security

1599
00:56:44,960 --> 00:56:48,960
they released a blog post talking about

1600
00:56:46,799 --> 00:56:51,359
how to build an azure function

1601
00:56:48,960 --> 00:56:52,160
and an azure function is basically the

1602
00:56:51,359 --> 00:56:55,200
equivalent

1603
00:56:52,160 --> 00:56:59,200
of the api gateway and

1604
00:56:55,200 --> 00:57:02,960
lambda function combined um

1605
00:56:59,200 --> 00:57:05,680
yeah so it it's their serverless

1606
00:57:02,960 --> 00:57:06,319
competitor on the azure platform and

1607
00:57:05,680 --> 00:57:08,240
frankly

1608
00:57:06,319 --> 00:57:09,520
functions is pretty great i like

1609
00:57:08,240 --> 00:57:12,160
functions

1610
00:57:09,520 --> 00:57:14,079
but they have a much tighter integration

1611
00:57:12,160 --> 00:57:16,399
between the

1612
00:57:14,079 --> 00:57:17,599
mechanism that kicks off the function

1613
00:57:16,400 --> 00:57:20,160
and uh

1614
00:57:17,599 --> 00:57:21,680
you know the functions code which has

1615
00:57:20,160 --> 00:57:24,399
some pros and cons right

1616
00:57:21,680 --> 00:57:26,160
but uh but anyways uh here's a blog

1617
00:57:24,400 --> 00:57:27,920
right up on how you can redirect comms

1618
00:57:26,160 --> 00:57:30,049
through an azure function

1619
00:57:27,920 --> 00:57:31,520
it's pretty straightforward

1620
00:57:30,050 --> 00:57:35,359
[Music]

1621
00:57:31,520 --> 00:57:38,480
and then you know notably xpn

1622
00:57:35,359 --> 00:57:41,759
sec he released a blog post

1623
00:57:38,480 --> 00:57:43,440
and this uses the serverless framework

1624
00:57:41,760 --> 00:57:45,040
now the service framework is another

1625
00:57:43,440 --> 00:57:46,559
framework you could consider it to be

1626
00:57:45,040 --> 00:57:49,759
like a competitor to

1627
00:57:46,559 --> 00:57:52,720
sam or to zappa or to

1628
00:57:49,760 --> 00:57:53,200
uh you know terraform or something like

1629
00:57:52,720 --> 00:57:56,959
that

1630
00:57:53,200 --> 00:58:00,319
that makes it easy to template

1631
00:57:56,960 --> 00:58:03,440
serverless applications and deploy them

1632
00:58:00,319 --> 00:58:04,160
to cloud providers so he released a

1633
00:58:03,440 --> 00:58:06,960
template

1634
00:58:04,160 --> 00:58:08,240
specific for deploying an api gateway

1635
00:58:06,960 --> 00:58:11,440
with a lambda function

1636
00:58:08,240 --> 00:58:14,319
that would redirect columns

1637
00:58:11,440 --> 00:58:17,520
from a victim you know back to a

1638
00:58:14,319 --> 00:58:20,000
listening post or the red team server

1639
00:58:17,520 --> 00:58:21,280
so check that out if you're interested

1640
00:58:20,000 --> 00:58:24,079
the serverless

1641
00:58:21,280 --> 00:58:26,799
framework seems really popular among

1642
00:58:24,079 --> 00:58:29,440
pentesters and red teamers

1643
00:58:26,799 --> 00:58:30,960
you know but it's it's like a terraform

1644
00:58:29,440 --> 00:58:33,359
right it's like a third party that

1645
00:58:30,960 --> 00:58:35,359
built it and it's leveraging the apis of

1646
00:58:33,359 --> 00:58:37,839
the providers to deploy it

1647
00:58:35,359 --> 00:58:39,680
so you know you get some pros with that

1648
00:58:37,839 --> 00:58:43,279
approach and also some cons

1649
00:58:39,680 --> 00:58:45,279
right so

1650
00:58:43,280 --> 00:58:46,319
at stage two we developed our own

1651
00:58:45,280 --> 00:58:48,799
cross-platform

1652
00:58:46,319 --> 00:58:49,759
post exploitation toolkit i mean this is

1653
00:58:48,799 --> 00:58:51,759
really designed

1654
00:58:49,760 --> 00:58:53,520
just for red teaming with the intention

1655
00:58:51,760 --> 00:58:56,799
of never getting caught

1656
00:58:53,520 --> 00:58:58,319
right so um and we you know

1657
00:58:56,799 --> 00:58:59,920
make quite a bit of updates on this

1658
00:58:58,319 --> 00:59:02,720
every year

1659
00:58:59,920 --> 00:59:04,720
as we run into operational issues for

1660
00:59:02,720 --> 00:59:06,000
ourselves we'll roll more features in or

1661
00:59:04,720 --> 00:59:07,598
as

1662
00:59:06,000 --> 00:59:09,680
you know existing clients on the

1663
00:59:07,599 --> 00:59:11,599
platform request features we'll kind of

1664
00:59:09,680 --> 00:59:13,680
add those to the roadmap and roll those

1665
00:59:11,599 --> 00:59:15,680
out

1666
00:59:13,680 --> 00:59:17,279
so uh you know it's got a really

1667
00:59:15,680 --> 00:59:19,520
intuitive web interface

1668
00:59:17,280 --> 00:59:21,200
that's multi-user anybody who types a

1669
00:59:19,520 --> 00:59:24,160
command everybody else can see

1670
00:59:21,200 --> 00:59:25,598
both the command they wrote and uh the

1671
00:59:24,160 --> 00:59:27,440
results from it

1672
00:59:25,599 --> 00:59:29,839
really designed to be object friendly

1673
00:59:27,440 --> 00:59:32,160
from the ground up we try to make this

1674
00:59:29,839 --> 00:59:34,558
as memory only as possible we try to get

1675
00:59:32,160 --> 00:59:37,759
off disk as quick as possible

1676
00:59:34,559 --> 00:59:39,920
there's support for pivoting and i mean

1677
00:59:37,760 --> 00:59:41,119
deep pivoting right i mean you can go

1678
00:59:39,920 --> 00:59:44,559
1415

1679
00:59:41,119 --> 00:59:46,000
agents deep into networks and this guy

1680
00:59:44,559 --> 00:59:48,799
will continue to run like a rock

1681
00:59:46,000 --> 00:59:50,559
star one of our major drivers building

1682
00:59:48,799 --> 00:59:52,799
this tool to begin with was

1683
00:59:50,559 --> 00:59:54,079
a lot of the ozin open source tools that

1684
00:59:52,799 --> 00:59:56,559
are out there are great

1685
00:59:54,079 --> 00:59:57,839
for short-term engagements you know

1686
00:59:56,559 --> 01:00:01,520
maybe two weeks or less

1687
00:59:57,839 --> 01:00:04,160
but um they really lacked the longevity

1688
01:00:01,520 --> 01:00:06,559
right like a lot of them would stop

1689
01:00:04,160 --> 01:00:08,240
functioning properly altogether

1690
01:00:06,559 --> 01:00:09,839
um you know when you're talking about

1691
01:00:08,240 --> 01:00:12,720
operations spanning over

1692
01:00:09,839 --> 01:00:14,240
years right and you know when you get

1693
01:00:12,720 --> 01:00:15,919
access to a server

1694
01:00:14,240 --> 01:00:17,839
and you just kind of need some backup

1695
01:00:15,920 --> 01:00:20,400
beachheads and the network

1696
01:00:17,839 --> 01:00:22,240
and you know it's a long-term red

1697
01:00:20,400 --> 01:00:24,160
teaming engagement where

1698
01:00:22,240 --> 01:00:26,078
you know you're not you're not on a

1699
01:00:24,160 --> 01:00:28,558
two-week schedule you're more like

1700
01:00:26,079 --> 01:00:30,000
i'm working for this organization and i

1701
01:00:28,559 --> 01:00:31,520
need to be able to continually test

1702
01:00:30,000 --> 01:00:32,640
their systems from a red team

1703
01:00:31,520 --> 01:00:34,079
perspective

1704
01:00:32,640 --> 01:00:36,720
you know you can kind of leave this guy

1705
01:00:34,079 --> 01:00:37,920
behind and know that he's always going

1706
01:00:36,720 --> 01:00:38,558
to be there for you when you need it

1707
01:00:37,920 --> 01:00:42,480
most

1708
01:00:38,559 --> 01:00:43,839
so so um and then it's got other cool

1709
01:00:42,480 --> 01:00:47,119
features like

1710
01:00:43,839 --> 01:00:50,400
in memory only python interpreter and

1711
01:00:47,119 --> 01:00:53,520
c-sharp and powershell

1712
01:00:50,400 --> 01:00:56,640
so you you know and uh you know can do

1713
01:00:53,520 --> 01:00:57,200
binaries in memory only so i mean we

1714
01:00:56,640 --> 01:01:00,078
really

1715
01:00:57,200 --> 01:01:01,359
try hard not to ever touch disk once we

1716
01:01:00,079 --> 01:01:04,720
get running on the box

1717
01:01:01,359 --> 01:01:06,720
right so so that means you know

1718
01:01:04,720 --> 01:01:08,480
your pen testers they can be writing

1719
01:01:06,720 --> 01:01:10,399
scripts and

1720
01:01:08,480 --> 01:01:12,480
you know even if python's not installed

1721
01:01:10,400 --> 01:01:14,000
on the target that's fine we just load

1722
01:01:12,480 --> 01:01:14,960
up into memory and the scripts can run

1723
01:01:14,000 --> 01:01:17,440
from there right

1724
01:01:14,960 --> 01:01:18,079
or same with powershell or you know same

1725
01:01:17,440 --> 01:01:22,079
with

1726
01:01:18,079 --> 01:01:24,319
c-sharp and all that stuff um so

1727
01:01:22,079 --> 01:01:25,520
yeah anyways that that's kind of our

1728
01:01:24,319 --> 01:01:27,839
thing and then you know

1729
01:01:25,520 --> 01:01:29,599
cross-platform uh most the engagements

1730
01:01:27,839 --> 01:01:31,440
we do are for tech companies so

1731
01:01:29,599 --> 01:01:33,839
that means a lot of mac laptops and a

1732
01:01:31,440 --> 01:01:38,319
lot of production linux servers

1733
01:01:33,839 --> 01:01:40,799
with windows scattered throughout

1734
01:01:38,319 --> 01:01:42,960
okay so um you know i'm not going to go

1735
01:01:40,799 --> 01:01:45,280
in depth and all these slides here but

1736
01:01:42,960 --> 01:01:46,079
you know there's a nice like interface

1737
01:01:45,280 --> 01:01:47,680
you know with

1738
01:01:46,079 --> 01:01:50,839
where it like maps the systems when you

1739
01:01:47,680 --> 01:01:53,598
first log into the web web

1740
01:01:50,839 --> 01:01:54,558
console um

1741
01:01:53,599 --> 01:01:56,160
you know you can have different

1742
01:01:54,559 --> 01:01:58,079
permissions on different users inside of

1743
01:01:56,160 --> 01:01:59,598
the platform which is kind of nice so if

1744
01:01:58,079 --> 01:02:01,520
you have a more junior person

1745
01:01:59,599 --> 01:02:02,640
they can just have read-only rights and

1746
01:02:01,520 --> 01:02:04,000
then you can kind of your senior

1747
01:02:02,640 --> 01:02:05,440
operators that uh

1748
01:02:04,000 --> 01:02:07,920
you know are actually able to execute

1749
01:02:05,440 --> 01:02:09,119
commands on targets

1750
01:02:07,920 --> 01:02:11,760
and there'll be some more changes coming

1751
01:02:09,119 --> 01:02:15,440
to that in the next year um

1752
01:02:11,760 --> 01:02:17,039
yeah just as you uh clients have

1753
01:02:15,440 --> 01:02:18,480
requested more of a tiering system for

1754
01:02:17,039 --> 01:02:20,240
operators

1755
01:02:18,480 --> 01:02:22,079
um you know a lot of different options

1756
01:02:20,240 --> 01:02:24,479
when how you build your stagers

1757
01:02:22,079 --> 01:02:25,839
uh which are basically you know

1758
01:02:24,480 --> 01:02:27,280
lightweight way to get

1759
01:02:25,839 --> 01:02:29,440
you know the full-blown implant running

1760
01:02:27,280 --> 01:02:31,760
on your target you have both call-out

1761
01:02:29,440 --> 01:02:33,680
options as well as call-in options

1762
01:02:31,760 --> 01:02:37,440
you can do some customization of the

1763
01:02:33,680 --> 01:02:40,000
comps as far as customizing your urls

1764
01:02:37,440 --> 01:02:40,880
your domain names your ports you know

1765
01:02:40,000 --> 01:02:44,960
there's

1766
01:02:40,880 --> 01:02:48,559
tcp com callback udp coms callbacks

1767
01:02:44,960 --> 01:02:51,280
https callbacks um

1768
01:02:48,559 --> 01:02:51,839
and everything is double encrypted so we

1769
01:02:51,280 --> 01:02:54,400
don't ever

1770
01:02:51,839 --> 01:02:55,359
just straight up trust tls even if

1771
01:02:54,400 --> 01:02:56,559
you're in an environment where they're

1772
01:02:55,359 --> 01:02:58,240
breaking tls

1773
01:02:56,559 --> 01:03:00,559
it's still encrypted again with their

1774
01:02:58,240 --> 01:03:04,720
own um

1775
01:03:00,559 --> 01:03:04,720
cha cha poly encryption underneath it so

1776
01:03:06,640 --> 01:03:10,640
um you know we have some pretty unique

1777
01:03:11,200 --> 01:03:15,279
techniques especially on the linux and

1778
01:03:12,720 --> 01:03:15,680
mac side especially on the linux side

1779
01:03:15,280 --> 01:03:18,960
for

1780
01:03:15,680 --> 01:03:19,759
defeating tools like osquery or you know

1781
01:03:18,960 --> 01:03:22,240
other process

1782
01:03:19,760 --> 01:03:24,960
or netstat monitoring tools um you know

1783
01:03:22,240 --> 01:03:27,839
we're basically able to

1784
01:03:24,960 --> 01:03:28,240
masquerade as any binary on the system

1785
01:03:27,839 --> 01:03:30,078
you know

1786
01:03:28,240 --> 01:03:31,520
just make sure you pick a binary that

1787
01:03:30,079 --> 01:03:34,799
should call out to the internet

1788
01:03:31,520 --> 01:03:36,640
right it's not helpful if you you know

1789
01:03:34,799 --> 01:03:38,000
masquerade the echo binary that should

1790
01:03:36,640 --> 01:03:40,400
never call out to the internet

1791
01:03:38,000 --> 01:03:41,839
right that doesn't make sense but you

1792
01:03:40,400 --> 01:03:42,720
know you can pretty much pick any binary

1793
01:03:41,839 --> 01:03:45,680
that would normally

1794
01:03:42,720 --> 01:03:46,078
call it to the internet like an apt or a

1795
01:03:45,680 --> 01:03:48,240
yum

1796
01:03:46,079 --> 01:03:49,839
or something like that and it'll load

1797
01:03:48,240 --> 01:03:52,000
that up suspend it

1798
01:03:49,839 --> 01:03:59,839
replace it with the code and then resume

1799
01:03:52,000 --> 01:03:59,839
the process

1800
01:04:01,920 --> 01:04:06,720
all right so typically an engagement we

1801
01:04:04,079 --> 01:04:09,440
exploit the web application server

1802
01:04:06,720 --> 01:04:11,118
we get a call back across the firewall

1803
01:04:09,440 --> 01:04:13,359
then we you know pick up some additional

1804
01:04:11,119 --> 01:04:15,599
credits maybe to the database server

1805
01:04:13,359 --> 01:04:17,920
we move on to there and then from there

1806
01:04:15,599 --> 01:04:19,920
we kind of scan up the data center

1807
01:04:17,920 --> 01:04:22,640
maybe we'll find like a monitoring or

1808
01:04:19,920 --> 01:04:25,440
master configuration management server

1809
01:04:22,640 --> 01:04:27,440
we'll kind of you know exploit that you

1810
01:04:25,440 --> 01:04:29,200
know as we go we can load up nmap or

1811
01:04:27,440 --> 01:04:31,520
python into memory only

1812
01:04:29,200 --> 01:04:33,359
food has no issues with that and then we

1813
01:04:31,520 --> 01:04:35,599
can pick up some more keys and maybe get

1814
01:04:33,359 --> 01:04:37,038
to a file server that has the secrets

1815
01:04:35,599 --> 01:04:38,720
that was for the engagement that we

1816
01:04:37,039 --> 01:04:40,720
wanted to collect

1817
01:04:38,720 --> 01:04:42,078
and you know we can kind of pivot or

1818
01:04:40,720 --> 01:04:43,759
chain through the network

1819
01:04:42,079 --> 01:04:45,760
even though these systems that are in

1820
01:04:43,760 --> 01:04:47,039
the private subnet should never be

1821
01:04:45,760 --> 01:04:48,799
talking out to the internet

1822
01:04:47,039 --> 01:04:51,119
so so you could do the same thing to get

1823
01:04:48,799 --> 01:04:54,559
into scada networks or pci

1824
01:04:51,119 --> 01:04:56,400
segments or things like that you know

1825
01:04:54,559 --> 01:04:58,240
if two systems can talk to each other

1826
01:04:56,400 --> 01:04:58,559
and we can get a foothold on each of

1827
01:04:58,240 --> 01:05:01,598
them

1828
01:04:58,559 --> 01:05:03,520
we can chain them together using vodou

1829
01:05:01,599 --> 01:05:05,359
now where typically on red team

1830
01:05:03,520 --> 01:05:07,440
engagements you get caught

1831
01:05:05,359 --> 01:05:09,359
is right here because typically at the

1832
01:05:07,440 --> 01:05:12,000
border when

1833
01:05:09,359 --> 01:05:14,000
um your beachhead calls out to your

1834
01:05:12,000 --> 01:05:15,119
listening post or the red team server on

1835
01:05:14,000 --> 01:05:16,880
the internet

1836
01:05:15,119 --> 01:05:18,400
that's where the blue team is going to

1837
01:05:16,880 --> 01:05:20,319
focus on that's where they're going to

1838
01:05:18,400 --> 01:05:21,440
have the most monitoring detection

1839
01:05:20,319 --> 01:05:24,400
that's where you know they're gonna have

1840
01:05:21,440 --> 01:05:27,280
their like you know you know their

1841
01:05:24,400 --> 01:05:27,680
zeke box or their bro or their uh you

1842
01:05:27,280 --> 01:05:30,000
know

1843
01:05:27,680 --> 01:05:30,879
source fire ideas or things like that

1844
01:05:30,000 --> 01:05:33,599
right

1845
01:05:30,880 --> 01:05:34,240
cera cotta um that's where they're gonna

1846
01:05:33,599 --> 01:05:36,720
you know do

1847
01:05:34,240 --> 01:05:37,598
certificate inspections things like that

1848
01:05:36,720 --> 01:05:39,919
so

1849
01:05:37,599 --> 01:05:42,240
so you really want to make sure that

1850
01:05:39,920 --> 01:05:45,359
your server that's on the internet looks

1851
01:05:42,240 --> 01:05:47,200
as trusted as humanly possible and

1852
01:05:45,359 --> 01:05:50,319
that's where these services come into

1853
01:05:47,200 --> 01:05:51,598
play right api gateway you know it's an

1854
01:05:50,319 --> 01:05:53,119
aws service

1855
01:05:51,599 --> 01:05:55,280
a lot of people are using this thing to

1856
01:05:53,119 --> 01:05:58,640
proxy their web applications

1857
01:05:55,280 --> 01:06:03,680
it looks very trustworthy so

1858
01:05:58,640 --> 01:06:07,038
um you know one thing

1859
01:06:03,680 --> 01:06:07,759
i just wanted to illustrate is api

1860
01:06:07,039 --> 01:06:09,520
gateway

1861
01:06:07,760 --> 01:06:10,799
doesn't need to forward back to a lambda

1862
01:06:09,520 --> 01:06:12,960
function i mean it can

1863
01:06:10,799 --> 01:06:14,960
literally just by default forward data

1864
01:06:12,960 --> 01:06:17,920
back to any server you want

1865
01:06:14,960 --> 01:06:19,839
so in this example here you have curl

1866
01:06:17,920 --> 01:06:22,160
you curl for a website

1867
01:06:19,839 --> 01:06:23,680
you hit the api gateway and the api

1868
01:06:22,160 --> 01:06:27,920
gateway can just be configured

1869
01:06:23,680 --> 01:06:31,359
to send that to any ec2 instance or

1870
01:06:27,920 --> 01:06:33,520
a digital ocean droplet anything that's

1871
01:06:31,359 --> 01:06:35,279
you know running a web server so it

1872
01:06:33,520 --> 01:06:36,000
doesn't even have to go back to an aws

1873
01:06:35,280 --> 01:06:39,520
account

1874
01:06:36,000 --> 01:06:42,000
so um so you know in this example

1875
01:06:39,520 --> 01:06:42,559
we could have you know a voodoo agent

1876
01:06:42,000 --> 01:06:45,119
could hit

1877
01:06:42,559 --> 01:06:46,480
an api gateway it's a call back and i

1878
01:06:45,119 --> 01:06:47,440
could just give forward to maybe like

1879
01:06:46,480 --> 01:06:50,160
another voodoo

1880
01:06:47,440 --> 01:06:50,880
lp that's sitting on a digital ocean

1881
01:06:50,160 --> 01:06:52,960
droplet

1882
01:06:50,880 --> 01:06:54,079
there's nothing there to stop that i

1883
01:06:52,960 --> 01:06:56,000
mean that's

1884
01:06:54,079 --> 01:06:57,280
a feature of the platform right

1885
01:06:56,000 --> 01:06:59,200
[Music]

1886
01:06:57,280 --> 01:07:00,319
so you know you kind of get calms like

1887
01:06:59,200 --> 01:07:03,680
this rolling and

1888
01:07:00,319 --> 01:07:04,160
what's great about this is typically you

1889
01:07:03,680 --> 01:07:07,359
would have

1890
01:07:04,160 --> 01:07:10,720
a product like zeke um looking

1891
01:07:07,359 --> 01:07:14,240
at the comms between the agent and

1892
01:07:10,720 --> 01:07:15,038
the voodoo lp which you know then you

1893
01:07:14,240 --> 01:07:17,359
would have to

1894
01:07:15,039 --> 01:07:18,640
get a certificate um which maybe you

1895
01:07:17,359 --> 01:07:19,680
could use like a let's encrypt

1896
01:07:18,640 --> 01:07:21,520
certificate

1897
01:07:19,680 --> 01:07:23,440
and you would have to register a domain

1898
01:07:21,520 --> 01:07:25,520
name which maybe you could get a

1899
01:07:23,440 --> 01:07:26,960
good domain name and kind of you know

1900
01:07:25,520 --> 01:07:29,759
seed that so it has

1901
01:07:26,960 --> 01:07:30,240
it's considered trusted um but you know

1902
01:07:29,760 --> 01:07:32,000
it takes

1903
01:07:30,240 --> 01:07:34,640
takes work right it's a lot easier just

1904
01:07:32,000 --> 01:07:38,240
to spin up an api gateway on aws

1905
01:07:34,640 --> 01:07:39,680
and um then all the zeek box is gonna

1906
01:07:38,240 --> 01:07:42,240
see it's gonna see

1907
01:07:39,680 --> 01:07:43,520
you know amazon's tls certificates which

1908
01:07:42,240 --> 01:07:46,319
are clearly trusted

1909
01:07:43,520 --> 01:07:47,119
it's also going to see an api gateway

1910
01:07:46,319 --> 01:07:49,119
domain

1911
01:07:47,119 --> 01:07:50,559
which is hosted by amazon which is also

1912
01:07:49,119 --> 01:07:52,160
considered trusted

1913
01:07:50,559 --> 01:07:54,319
and it's just you know it doesn't have

1914
01:07:52,160 --> 01:07:56,960
any visibility after that where it goes

1915
01:07:54,319 --> 01:07:57,440
so you know there's a great cheap easy

1916
01:07:56,960 --> 01:08:00,160
way

1917
01:07:57,440 --> 01:08:00,960
to establish callbacks i mean you know

1918
01:08:00,160 --> 01:08:02,480
the only

1919
01:08:00,960 --> 01:08:04,160
issue you're going to run into in this

1920
01:08:02,480 --> 01:08:05,839
scenario is if

1921
01:08:04,160 --> 01:08:07,680
you know they have nothing in their

1922
01:08:05,839 --> 01:08:10,240
environment ever talking to anything

1923
01:08:07,680 --> 01:08:12,078
at an api gateway which you know might

1924
01:08:10,240 --> 01:08:14,959
be the case for a smaller environment

1925
01:08:12,079 --> 01:08:15,760
but as your servers grow and grow and

1926
01:08:14,960 --> 01:08:17,600
grow

1927
01:08:15,760 --> 01:08:19,199
chances are there's at least one team

1928
01:08:17,600 --> 01:08:20,640
out there that's also using api gateway

1929
01:08:19,198 --> 01:08:22,879
for their services

1930
01:08:20,640 --> 01:08:24,719
and you know chances are high the

1931
01:08:22,880 --> 01:08:26,000
servers are gonna talk to that

1932
01:08:24,719 --> 01:08:28,799
so you can kind of blend in with that

1933
01:08:26,000 --> 01:08:28,799
noise hopefully

1934
01:08:28,880 --> 01:08:32,319
okay another way is api gateway with

1935
01:08:31,439 --> 01:08:35,759
lambda

1936
01:08:32,319 --> 01:08:36,719
right so you know this has a couple more

1937
01:08:35,759 --> 01:08:37,920
steps but

1938
01:08:36,719 --> 01:08:39,920
i just wanted to show you the basic

1939
01:08:37,920 --> 01:08:43,040
process as

1940
01:08:39,920 --> 01:08:44,719
red teamers often ask about this so um

1941
01:08:43,040 --> 01:08:46,000
you know you have the voodoo agent and

1942
01:08:44,719 --> 01:08:47,040
you just configure it to call back to

1943
01:08:46,000 --> 01:08:49,759
the api gateway

1944
01:08:47,040 --> 01:08:52,000
so you can use you know aws certificates

1945
01:08:49,759 --> 01:08:54,479
and their trusted domains

1946
01:08:52,000 --> 01:08:56,319
and then it's going to take that data

1947
01:08:54,479 --> 01:08:59,198
and

1948
01:08:56,319 --> 01:09:00,799
what it does by default is a base64

1949
01:08:59,198 --> 01:09:01,759
encodes it and then passes it over to

1950
01:09:00,799 --> 01:09:03,759
the lambda function

1951
01:09:01,759 --> 01:09:05,439
so so if you want your lambda function

1952
01:09:03,759 --> 01:09:07,520
to do any processing of it you just need

1953
01:09:05,439 --> 01:09:11,599
a base64 decoded there

1954
01:09:07,520 --> 01:09:14,560
and then you can use url lab which is

1955
01:09:11,600 --> 01:09:14,960
you know built in built in by default

1956
01:09:14,560 --> 01:09:17,839
into

1957
01:09:14,960 --> 01:09:20,239
most the python runtimes that lamba uses

1958
01:09:17,839 --> 01:09:23,359
to forward the data on to your lp

1959
01:09:20,238 --> 01:09:25,519
you know optionally you could also use

1960
01:09:23,359 --> 01:09:26,719
like install the request library in the

1961
01:09:25,520 --> 01:09:28,719
lambda function which

1962
01:09:26,719 --> 01:09:29,759
previously you used to be installed by

1963
01:09:28,719 --> 01:09:30,960
default but it's

1964
01:09:29,759 --> 01:09:32,399
it's not there anymore they've kind of

1965
01:09:30,960 --> 01:09:34,319
stripped down the python running time

1966
01:09:32,399 --> 01:09:36,799
environment a lot more

1967
01:09:34,319 --> 01:09:38,319
so if you're having issues getting

1968
01:09:36,799 --> 01:09:41,359
python dependencies

1969
01:09:38,319 --> 01:09:42,319
into a lambda function in my opinion the

1970
01:09:41,359 --> 01:09:45,440
easiest way to

1971
01:09:42,319 --> 01:09:48,480
resolve this is via sam templates when

1972
01:09:45,439 --> 01:09:49,278
you use sam it will analyze your python

1973
01:09:48,479 --> 01:09:51,040
code

1974
01:09:49,279 --> 01:09:53,359
and it will actually say like okay your

1975
01:09:51,040 --> 01:09:54,800
python code is using the request library

1976
01:09:53,359 --> 01:09:56,560
i need to make sure i package up the

1977
01:09:54,800 --> 01:09:57,920
request library and

1978
01:09:56,560 --> 01:10:00,320
make sure that's available inside the

1979
01:09:57,920 --> 01:10:02,960
lambda function so sam will actually

1980
01:10:00,320 --> 01:10:04,799
automate some of that process for you

1981
01:10:02,960 --> 01:10:07,679
and help you out there

1982
01:10:04,800 --> 01:10:09,120
so as of right now if you deploy a

1983
01:10:07,679 --> 01:10:10,400
landing function you'll be stuck with

1984
01:10:09,120 --> 01:10:12,800
url lib

1985
01:10:10,400 --> 01:10:13,759
which is pretty limiting but you know

1986
01:10:12,800 --> 01:10:16,880
obviously you could

1987
01:10:13,760 --> 01:10:18,560
very easily build a sam template to

1988
01:10:16,880 --> 01:10:20,560
deploy this infrastructure

1989
01:10:18,560 --> 01:10:22,239
i'm just using you know slight

1990
01:10:20,560 --> 01:10:23,440
modification of the code that we saw in

1991
01:10:22,239 --> 01:10:26,879
the previous example

1992
01:10:23,440 --> 01:10:28,839
so i just wanted to reiterate that if

1993
01:10:26,880 --> 01:10:30,640
you're having dependency issues with

1994
01:10:28,840 --> 01:10:32,719
lambda

1995
01:10:30,640 --> 01:10:33,760
okay and there is a pretty thorough blog

1996
01:10:32,719 --> 01:10:36,239
post on this

1997
01:10:33,760 --> 01:10:36,960
if you go over to the stage 2 security

1998
01:10:36,239 --> 01:10:39,919
medium

1999
01:10:36,960 --> 01:10:42,400
page that weyland wrote up that talks

2000
01:10:39,920 --> 01:10:44,560
all about how to redirect food columns

2001
01:10:42,400 --> 01:10:46,000
through api gateway and why you want to

2002
01:10:44,560 --> 01:10:48,320
do that and how it helps

2003
01:10:46,000 --> 01:10:49,600
reduce your detection and all that stuff

2004
01:10:48,320 --> 01:10:51,440
so

2005
01:10:49,600 --> 01:10:52,880
so if you're red teamer and you know you

2006
01:10:51,440 --> 01:10:55,280
care a lot about this definitely check

2007
01:10:52,880 --> 01:10:55,280
that out

2008
01:10:56,480 --> 01:11:02,799
all right so the last use case is really

2009
01:11:00,080 --> 01:11:04,080
land-a-log disruption and there's a lot

2010
01:11:02,800 --> 01:11:06,719
more that could be done here

2011
01:11:04,080 --> 01:11:08,000
than what i've done to date but uh i

2012
01:11:06,719 --> 01:11:09,360
think this is going to give you a really

2013
01:11:08,000 --> 01:11:10,960
good base

2014
01:11:09,360 --> 01:11:12,719
and you know this is really only

2015
01:11:10,960 --> 01:11:13,600
applicable to an aws account that's

2016
01:11:12,719 --> 01:11:15,600
already been

2017
01:11:13,600 --> 01:11:17,199
completely compromised right so the only

2018
01:11:15,600 --> 01:11:19,679
purpose of this is really to

2019
01:11:17,199 --> 01:11:20,879
stay in the account longer and to avoid

2020
01:11:19,679 --> 01:11:22,960
detection

2021
01:11:20,880 --> 01:11:25,040
um you know which typically isn't a goal

2022
01:11:22,960 --> 01:11:26,480
of like a pen test or even a short red

2023
01:11:25,040 --> 01:11:28,320
team um

2024
01:11:26,480 --> 01:11:30,400
this would typically be more of a goal

2025
01:11:28,320 --> 01:11:33,280
like a nation-state or apt

2026
01:11:30,400 --> 01:11:33,679
group that would be out there all right

2027
01:11:33,280 --> 01:11:36,480
so

2028
01:11:33,679 --> 01:11:38,080
an overview of the aws logging service

2029
01:11:36,480 --> 01:11:40,080
it's called cloudtrail

2030
01:11:38,080 --> 01:11:41,920
that's where the service we're gonna be

2031
01:11:40,080 --> 01:11:44,239
talking about today and

2032
01:11:41,920 --> 01:11:45,760
primarily what it does is uh i mean

2033
01:11:44,239 --> 01:11:46,320
there's other services that create logs

2034
01:11:45,760 --> 01:11:49,040
but

2035
01:11:46,320 --> 01:11:50,719
cloudtrail will log interactions with

2036
01:11:49,040 --> 01:11:53,040
the control plane apis

2037
01:11:50,719 --> 01:11:54,080
so anytime you're in the web interface

2038
01:11:53,040 --> 01:11:56,000
and you click a button

2039
01:11:54,080 --> 01:11:57,519
that's going to call control plane api

2040
01:11:56,000 --> 01:11:58,800
and if cloud trail's enabled that's

2041
01:11:57,520 --> 01:12:01,840
going to get locked

2042
01:11:58,800 --> 01:12:02,960
anytime you use an sdk that calls a

2043
01:12:01,840 --> 01:12:05,440
documented api

2044
01:12:02,960 --> 01:12:06,560
that api is going to get logged or at

2045
01:12:05,440 --> 01:12:09,839
least should get logged

2046
01:12:06,560 --> 01:12:12,719
right there's some notable edge cases

2047
01:12:09,840 --> 01:12:13,920
but when amazon gets aware of pen

2048
01:12:12,719 --> 01:12:17,280
testers or red teaming or

2049
01:12:13,920 --> 01:12:20,159
abusing those they generally try to

2050
01:12:17,280 --> 01:12:22,800
patch those out or you know fix that so

2051
01:12:20,159 --> 01:12:26,239
you know cloudtrail supports logging in

2052
01:12:22,800 --> 01:12:28,000
um so you know if you use the aws cli

2053
01:12:26,239 --> 01:12:29,678
that just hits the control plane apis

2054
01:12:28,000 --> 01:12:31,199
and that gets locked as well

2055
01:12:29,679 --> 01:12:32,640
i mean this actually does a pretty good

2056
01:12:31,199 --> 01:12:33,519
job of logging everything inside your

2057
01:12:32,640 --> 01:12:36,239
account

2058
01:12:33,520 --> 01:12:38,080
um so you know you should always have

2059
01:12:36,239 --> 01:12:38,639
the cloud trail service enabled inside

2060
01:12:38,080 --> 01:12:42,400
of

2061
01:12:38,640 --> 01:12:42,400
all your aws accounts so

2062
01:12:42,800 --> 01:12:48,800
and really talking about that

2063
01:12:45,920 --> 01:12:49,679
automation and cloud management diagram

2064
01:12:48,800 --> 01:12:51,600
before

2065
01:12:49,679 --> 01:12:53,360
every time anything talks to these

2066
01:12:51,600 --> 01:12:56,159
control plane apis

2067
01:12:53,360 --> 01:12:57,679
which is generally always required in

2068
01:12:56,159 --> 01:12:58,719
order to spin up resources in the data

2069
01:12:57,679 --> 01:13:01,199
plane which is

2070
01:12:58,719 --> 01:13:02,239
generally your goal when you're using a

2071
01:13:01,199 --> 01:13:05,519
cloud provider

2072
01:13:02,239 --> 01:13:08,480
that gets locked right

2073
01:13:05,520 --> 01:13:09,199
all right so what's an attacker to do

2074
01:13:08,480 --> 01:13:12,159
right

2075
01:13:09,199 --> 01:13:12,639
so let's say we have this environment um

2076
01:13:12,159 --> 01:13:14,960
you know

2077
01:13:12,640 --> 01:13:16,239
and every time we as an attacker even

2078
01:13:14,960 --> 01:13:18,239
though we have

2079
01:13:16,239 --> 01:13:19,759
you know full access to this aws account

2080
01:13:18,239 --> 01:13:21,599
every time we talk to an api

2081
01:13:19,760 --> 01:13:23,679
cloud trial is generating a log and is

2082
01:13:21,600 --> 01:13:25,760
storing it in an s3 bucket

2083
01:13:23,679 --> 01:13:27,520
which which is a common configuration

2084
01:13:25,760 --> 01:13:30,000
albeit the cloud trail service

2085
01:13:27,520 --> 01:13:30,960
can send logs to other locations besides

2086
01:13:30,000 --> 01:13:34,880
s3 buckets

2087
01:13:30,960 --> 01:13:37,440
but due to

2088
01:13:34,880 --> 01:13:39,280
complexities with getting logs to other

2089
01:13:37,440 --> 01:13:39,839
systems like for example getting logs to

2090
01:13:39,280 --> 01:13:42,639
splunk

2091
01:13:39,840 --> 01:13:43,920
or getting locks to elk or elastic sl

2092
01:13:42,640 --> 01:13:47,040
like an elastic stack

2093
01:13:43,920 --> 01:13:49,840
or even other aws accounts

2094
01:13:47,040 --> 01:13:50,159
frequently cloudtrail logs are written

2095
01:13:49,840 --> 01:13:52,880
to

2096
01:13:50,159 --> 01:13:54,879
an s3 bucket at least at the very

2097
01:13:52,880 --> 01:13:57,280
minimum at least as an interim step

2098
01:13:54,880 --> 01:13:59,520
i'm not saying they have to be or even

2099
01:13:57,280 --> 01:14:02,239
they should be

2100
01:13:59,520 --> 01:14:02,960
it just is commonly implemented that way

2101
01:14:02,239 --> 01:14:07,440
because

2102
01:14:02,960 --> 01:14:11,360
it's reliable and easy to do so

2103
01:14:07,440 --> 01:14:14,799
okay so we could

2104
01:14:11,360 --> 01:14:18,000
write a laminate function right remember

2105
01:14:14,800 --> 01:14:19,840
lambda functions can trigger on more

2106
01:14:18,000 --> 01:14:22,640
events than just an api gateway

2107
01:14:19,840 --> 01:14:23,280
or cron job they can actually trigger

2108
01:14:22,640 --> 01:14:25,840
whenever

2109
01:14:23,280 --> 01:14:27,840
a file is written to an s3 bucket so

2110
01:14:25,840 --> 01:14:29,120
imagine we have cloudtrail writing to an

2111
01:14:27,840 --> 01:14:31,040
s3 bucket in an account

2112
01:14:29,120 --> 01:14:33,199
and imagine that account is compromised

2113
01:14:31,040 --> 01:14:35,040
attacker has full access to that account

2114
01:14:33,199 --> 01:14:36,480
an attacker can actually write another

2115
01:14:35,040 --> 01:14:38,640
function that

2116
01:14:36,480 --> 01:14:41,280
will trigger whenever a file is written

2117
01:14:38,640 --> 01:14:43,360
to that's three buckets during the logs

2118
01:14:41,280 --> 01:14:45,040
and then that lambda function can open

2119
01:14:43,360 --> 01:14:46,639
up the log and see if it has the

2120
01:14:45,040 --> 01:14:48,480
attacker's ip address

2121
01:14:46,640 --> 01:14:50,159
or maybe some other magic string that

2122
01:14:48,480 --> 01:14:53,199
the attacker wants

2123
01:14:50,159 --> 01:14:55,360
and if it sees that it could remove

2124
01:14:53,199 --> 01:14:57,919
his action from the log and then write

2125
01:14:55,360 --> 01:15:00,960
the log back to the s3 bucket

2126
01:14:57,920 --> 01:15:05,120
so the only one tricky part about this

2127
01:15:00,960 --> 01:15:06,960
is you kind of get in an infinite loop

2128
01:15:05,120 --> 01:15:09,760
type scenario right so if you think

2129
01:15:06,960 --> 01:15:12,080
about this logically

2130
01:15:09,760 --> 01:15:13,120
if a lambda function executes every time

2131
01:15:12,080 --> 01:15:14,880
you write

2132
01:15:13,120 --> 01:15:16,559
every time a log is written to an s3

2133
01:15:14,880 --> 01:15:19,760
bucket and then the

2134
01:15:16,560 --> 01:15:21,760
lambda function modifies the log

2135
01:15:19,760 --> 01:15:23,040
and then writes the file to the s3

2136
01:15:21,760 --> 01:15:24,719
bucket

2137
01:15:23,040 --> 01:15:26,239
then when the land function writes the

2138
01:15:24,719 --> 01:15:27,600
modified block to that three bucket is

2139
01:15:26,239 --> 01:15:29,040
going to trigger the lambda function

2140
01:15:27,600 --> 01:15:32,239
again

2141
01:15:29,040 --> 01:15:34,400
um so if you're not careful

2142
01:15:32,239 --> 01:15:35,599
your code could get stuck in kind of an

2143
01:15:34,400 --> 01:15:37,280
infinite loop where you're just

2144
01:15:35,600 --> 01:15:38,880
triggering a million lambda functions

2145
01:15:37,280 --> 01:15:39,840
for no reason

2146
01:15:38,880 --> 01:15:42,000
so you just want to take that into

2147
01:15:39,840 --> 01:15:44,320
account when you're analyzing the logs

2148
01:15:42,000 --> 01:15:45,840
the way that i handle this in this

2149
01:15:44,320 --> 01:15:50,480
implementation is

2150
01:15:45,840 --> 01:15:52,560
if i open up a log file that has

2151
01:15:50,480 --> 01:15:54,559
not does not have the magic string in it

2152
01:15:52,560 --> 01:15:56,480
or doesn't have the attackers ipna

2153
01:15:54,560 --> 01:15:58,159
then i just quit the lambda function

2154
01:15:56,480 --> 01:15:58,799
like you know hard exit out of the

2155
01:15:58,159 --> 01:16:00,879
python

2156
01:15:58,800 --> 01:16:02,239
application and that kind of ends the

2157
01:16:00,880 --> 01:16:04,239
cycle

2158
01:16:02,239 --> 01:16:05,360
but what that does mean is that when i

2159
01:16:04,239 --> 01:16:07,919
modify a log

2160
01:16:05,360 --> 01:16:08,880
i trigger the lambda function twice at a

2161
01:16:07,920 --> 01:16:11,840
bare minimum

2162
01:16:08,880 --> 01:16:12,320
before um you know the execution state

2163
01:16:11,840 --> 01:16:14,080
ends

2164
01:16:12,320 --> 01:16:15,599
which you know you could probably be

2165
01:16:14,080 --> 01:16:18,840
done cleaner than that

2166
01:16:15,600 --> 01:16:20,960
um but uh that that works that's good

2167
01:16:18,840 --> 01:16:24,800
enough

2168
01:16:20,960 --> 01:16:26,480
okay so um you know we go through this

2169
01:16:24,800 --> 01:16:29,280
with a hands-on example

2170
01:16:26,480 --> 01:16:31,280
in uh the cloud red teaming course that

2171
01:16:29,280 --> 01:16:34,400
we teach at black hat and

2172
01:16:31,280 --> 01:16:35,840
to companies across the world um

2173
01:16:34,400 --> 01:16:38,000
you know we go in great depth on how to

2174
01:16:35,840 --> 01:16:39,760
do this and and much more we also go

2175
01:16:38,000 --> 01:16:43,120
into depth on how we uh

2176
01:16:39,760 --> 01:16:45,360
you know defeat log file validation

2177
01:16:43,120 --> 01:16:47,120
um which is an optional setting that can

2178
01:16:45,360 --> 01:16:48,320
be enabled when you enable cloudtrail

2179
01:16:47,120 --> 01:16:50,719
logs

2180
01:16:48,320 --> 01:16:52,080
um you know the solution to this stuff

2181
01:16:50,719 --> 01:16:54,000
really guys is

2182
01:16:52,080 --> 01:16:55,840
you know don't don't store your logs in

2183
01:16:54,000 --> 01:16:58,320
the same account that they're monitoring

2184
01:16:55,840 --> 01:16:59,440
right you need to kind of set up across

2185
01:16:58,320 --> 01:17:02,799
account trust

2186
01:16:59,440 --> 01:17:05,280
and enable um

2187
01:17:02,800 --> 01:17:06,800
cloudtrail to write logs to buckets that

2188
01:17:05,280 --> 01:17:10,239
are in another

2189
01:17:06,800 --> 01:17:11,920
trusted aws account so and uh you know

2190
01:17:10,239 --> 01:17:12,639
there's a lot of documentation out there

2191
01:17:11,920 --> 01:17:14,880
provided

2192
01:17:12,640 --> 01:17:16,719
from amazon and third parties on how to

2193
01:17:14,880 --> 01:17:18,480
set that up so

2194
01:17:16,719 --> 01:17:22,080
that's not like a crazy setup or

2195
01:17:18,480 --> 01:17:22,080
anything it's pretty straightforward

2196
01:17:22,159 --> 01:17:25,759
um one thing that's pretty interesting

2197
01:17:24,400 --> 01:17:28,400
that i just wanted to

2198
01:17:25,760 --> 01:17:28,400
show you guys

2199
01:17:29,120 --> 01:17:32,239
is uh i call it the buffering dominoes

2200
01:17:31,440 --> 01:17:35,519
technique

2201
01:17:32,239 --> 01:17:38,718
so let's say you have

2202
01:17:35,520 --> 01:17:40,880
an attacker on the internet and he's

2203
01:17:38,719 --> 01:17:43,199
interacting with an aws account

2204
01:17:40,880 --> 01:17:45,120
so he has full access to the aws account

2205
01:17:43,199 --> 01:17:45,678
and the aws account has cloudtrail

2206
01:17:45,120 --> 01:17:47,599
enable

2207
01:17:45,679 --> 01:17:49,120
so it's logging all those interactions

2208
01:17:47,600 --> 01:17:50,640
at the api level

2209
01:17:49,120 --> 01:17:52,480
and then it's writing those out to an s3

2210
01:17:50,640 --> 01:17:55,679
bucket in the account so

2211
01:17:52,480 --> 01:17:57,599
um well the

2212
01:17:55,679 --> 01:17:59,440
files getting right into the s3 bucket

2213
01:17:57,600 --> 01:18:00,320
those don't happen instantaneously what

2214
01:17:59,440 --> 01:18:02,799
happens is

2215
01:18:00,320 --> 01:18:03,840
cloudtrail has kind of a buffering

2216
01:18:02,800 --> 01:18:06,000
system where

2217
01:18:03,840 --> 01:18:07,760
multiple events occur and when that

2218
01:18:06,000 --> 01:18:10,960
buffer hits a certain

2219
01:18:07,760 --> 01:18:13,600
size or when the buffer

2220
01:18:10,960 --> 01:18:14,719
hits a time limit it will then write it

2221
01:18:13,600 --> 01:18:16,400
out to the s3 bucket

2222
01:18:14,719 --> 01:18:18,560
that way it's not constantly writing to

2223
01:18:16,400 --> 01:18:21,839
the s3 bucket because that'd be

2224
01:18:18,560 --> 01:18:23,360
you know kind of intensive right

2225
01:18:21,840 --> 01:18:25,440
and not really the way the s3 is

2226
01:18:23,360 --> 01:18:27,839
designed to operate

2227
01:18:25,440 --> 01:18:29,360
so um you know an attacker does

2228
01:18:27,840 --> 01:18:31,840
something suspicious

2229
01:18:29,360 --> 01:18:32,799
cloudtrail buffers an event associated

2230
01:18:31,840 --> 01:18:36,480
with that

2231
01:18:32,800 --> 01:18:38,480
you know and in some point in the future

2232
01:18:36,480 --> 01:18:40,400
that gets rid into an s3 bucket

2233
01:18:38,480 --> 01:18:41,678
and then maybe another process like a

2234
01:18:40,400 --> 01:18:43,920
lambda function or

2235
01:18:41,679 --> 01:18:44,960
some other process picks that up and

2236
01:18:43,920 --> 01:18:48,159
moves it into

2237
01:18:44,960 --> 01:18:50,239
a splunk server and uh

2238
01:18:48,159 --> 01:18:51,280
you know that suspicious event gets fed

2239
01:18:50,239 --> 01:18:54,080
into splunk

2240
01:18:51,280 --> 01:18:54,400
and you know this hacker gets detected

2241
01:18:54,080 --> 01:18:57,040
so

2242
01:18:54,400 --> 01:18:58,159
for example like if he does a delete

2243
01:18:57,040 --> 01:19:00,960
trail

2244
01:18:58,159 --> 01:19:01,839
then that will stop cloudtrail logging

2245
01:19:00,960 --> 01:19:04,080
but

2246
01:19:01,840 --> 01:19:04,960
then the delete trail event will get put

2247
01:19:04,080 --> 01:19:07,280
in buffer

2248
01:19:04,960 --> 01:19:08,159
and eventually when the time limit or

2249
01:19:07,280 --> 01:19:09,840
buffer

2250
01:19:08,159 --> 01:19:11,280
size gets met that's going to get pushed

2251
01:19:09,840 --> 01:19:13,360
to an s3 bucket

2252
01:19:11,280 --> 01:19:14,960
that'll get pushed to splunk or splunk

2253
01:19:13,360 --> 01:19:16,559
with enterprise security

2254
01:19:14,960 --> 01:19:18,560
and then there'll be some type of

2255
01:19:16,560 --> 01:19:19,920
detection where you know you'll get

2256
01:19:18,560 --> 01:19:22,880
busted by a red team

2257
01:19:19,920 --> 01:19:24,080
so so you know that's no good so as an

2258
01:19:22,880 --> 01:19:27,760
attacker

2259
01:19:24,080 --> 01:19:28,480
how can i delete a trail without getting

2260
01:19:27,760 --> 01:19:30,080
busted

2261
01:19:28,480 --> 01:19:32,000
right or turn off logging without

2262
01:19:30,080 --> 01:19:35,280
getting busted

2263
01:19:32,000 --> 01:19:38,480
um well if this is kind of

2264
01:19:35,280 --> 01:19:40,320
ridiculously dumb but uh this did work

2265
01:19:38,480 --> 01:19:42,718
and to the best of my knowledge still

2266
01:19:40,320 --> 01:19:45,679
works albeit i imagine

2267
01:19:42,719 --> 01:19:47,040
now that that expected owner feature is

2268
01:19:45,679 --> 01:19:48,560
implemented in s3

2269
01:19:47,040 --> 01:19:50,080
that uh you know hopefully the

2270
01:19:48,560 --> 01:19:51,679
cloudtrail block team will

2271
01:19:50,080 --> 01:19:53,840
implement that as part of their logging

2272
01:19:51,679 --> 01:19:56,560
process to prevent this

2273
01:19:53,840 --> 01:19:58,320
um but uh you know i don't know if

2274
01:19:56,560 --> 01:20:01,199
they've done that or not today

2275
01:19:58,320 --> 01:20:02,639
so if you delete trail and then you

2276
01:20:01,199 --> 01:20:04,960
create a trail that's

2277
01:20:02,640 --> 01:20:07,840
very very similar to the deleted trail

2278
01:20:04,960 --> 01:20:12,000
like for example has the exact same name

2279
01:20:07,840 --> 01:20:15,520
but instead of specifying the bucket

2280
01:20:12,000 --> 01:20:17,040
you specify and bucket name remembering

2281
01:20:15,520 --> 01:20:19,520
s3 bucket names are globally unique

2282
01:20:17,040 --> 01:20:21,360
across all different aws accounts

2283
01:20:19,520 --> 01:20:22,800
so you specify a bucket name that's in

2284
01:20:21,360 --> 01:20:26,480
an attacker owned

2285
01:20:22,800 --> 01:20:28,800
account then what will happen

2286
01:20:26,480 --> 01:20:31,040
is the delete trail and the crete trail

2287
01:20:28,800 --> 01:20:32,719
event will end up in the buffer

2288
01:20:31,040 --> 01:20:34,320
but when the buffer fills or the time

2289
01:20:32,719 --> 01:20:36,320
limit gets hit

2290
01:20:34,320 --> 01:20:38,639
all those events they don't get written

2291
01:20:36,320 --> 01:20:41,519
to the owner's s3 bucket that's

2292
01:20:38,639 --> 01:20:42,080
splunk or another system is slurping up

2293
01:20:41,520 --> 01:20:43,920
they

2294
01:20:42,080 --> 01:20:45,280
will read the current configuration

2295
01:20:43,920 --> 01:20:48,560
which the current configuration

2296
01:20:45,280 --> 01:20:50,639
says write this data out to

2297
01:20:48,560 --> 01:20:52,320
the attacker on s3 bucket so the

2298
01:20:50,639 --> 01:20:54,960
attacker will actually get

2299
01:20:52,320 --> 01:20:55,599
the delete trail message and the

2300
01:20:54,960 --> 01:20:57,600
attacker

2301
01:20:55,600 --> 01:20:58,639
and the defender will never see that so

2302
01:20:57,600 --> 01:21:01,280
if a defender

2303
01:20:58,639 --> 01:21:02,400
is trying to alert on looking for delete

2304
01:21:01,280 --> 01:21:05,679
trail events

2305
01:21:02,400 --> 01:21:08,320
this is a way to defeat that and now

2306
01:21:05,679 --> 01:21:10,639
if you get the events in the s3 bucket

2307
01:21:08,320 --> 01:21:12,000
you could attach a lambda function

2308
01:21:10,639 --> 01:21:14,400
to whenever something gets written to

2309
01:21:12,000 --> 01:21:15,600
that s3 bucket and if you have enough

2310
01:21:14,400 --> 01:21:17,280
rights

2311
01:21:15,600 --> 01:21:18,719
you could use that landmine function to

2312
01:21:17,280 --> 01:21:21,519
clean out delete

2313
01:21:18,719 --> 01:21:22,719
and delete trail events that are done by

2314
01:21:21,520 --> 01:21:25,280
the attacker

2315
01:21:22,719 --> 01:21:26,239
and then send those data back to the s3

2316
01:21:25,280 --> 01:21:29,360
bucket

2317
01:21:26,239 --> 01:21:31,440
of the targeted account so that way

2318
01:21:29,360 --> 01:21:33,280
um you know logs continue to flow

2319
01:21:31,440 --> 01:21:36,000
normally to the targeted account

2320
01:21:33,280 --> 01:21:38,400
um but they don't contain the suspicious

2321
01:21:36,000 --> 01:21:38,400
events

2322
01:21:40,159 --> 01:21:43,679
um so you think that might be like

2323
01:21:42,080 --> 01:21:45,120
really complex and you know kind of

2324
01:21:43,679 --> 01:21:46,480
developing that lambda function does

2325
01:21:45,120 --> 01:21:48,000
take a little bit of time but

2326
01:21:46,480 --> 01:21:49,759
you know just doing what i showed you in

2327
01:21:48,000 --> 01:21:50,159
the previous slides is not that much i

2328
01:21:49,760 --> 01:21:53,040
mean

2329
01:21:50,159 --> 01:21:55,360
you just delete the trail using this

2330
01:21:53,040 --> 01:21:57,760
this aws cli syntax here

2331
01:21:55,360 --> 01:21:59,199
then you create the trail again and you

2332
01:21:57,760 --> 01:22:01,040
want to do that really fast

2333
01:21:59,199 --> 01:22:03,360
as fast as you can right so it's going

2334
01:22:01,040 --> 01:22:05,280
to like back to back

2335
01:22:03,360 --> 01:22:07,280
um but then you specify a bucket

2336
01:22:05,280 --> 01:22:10,800
controlled by the attacker

2337
01:22:07,280 --> 01:22:12,559
and then the you know you start back up

2338
01:22:10,800 --> 01:22:14,400
the logging right with the last one so

2339
01:22:12,560 --> 01:22:16,080
that way when it reads the configuration

2340
01:22:14,400 --> 01:22:16,400
it will send the delete trail event to

2341
01:22:16,080 --> 01:22:19,920
you

2342
01:22:16,400 --> 01:22:19,920
the attacker owned a bucket

2343
01:22:20,239 --> 01:22:23,519
um if you want to see like a full demo

2344
01:22:22,239 --> 01:22:25,759
of this

2345
01:22:23,520 --> 01:22:28,400
or there's a full blog write-up you can

2346
01:22:25,760 --> 01:22:31,840
check out this medium post here

2347
01:22:28,400 --> 01:22:35,920
um yeah so

2348
01:22:31,840 --> 01:22:36,400
it's um yeah i did a whole webinar on

2349
01:22:35,920 --> 01:22:38,800
this

2350
01:22:36,400 --> 01:22:39,759
and went into it and in much more detail

2351
01:22:38,800 --> 01:22:42,719
so

2352
01:22:39,760 --> 01:22:45,600
so check that out um or you know hit me

2353
01:22:42,719 --> 01:22:45,600
up if you have questions

2354
01:22:47,280 --> 01:22:52,000
well in conclusion i just want to say

2355
01:22:50,840 --> 01:22:55,440
this

2356
01:22:52,000 --> 01:22:58,719
cloud aws azure gcp

2357
01:22:55,440 --> 01:22:59,919
it's awesome it's the future super

2358
01:22:58,719 --> 01:23:01,920
powerful

2359
01:22:59,920 --> 01:23:04,000
i think infrastructure is code it's

2360
01:23:01,920 --> 01:23:07,040
going to become the new norm

2361
01:23:04,000 --> 01:23:10,320
namely because you know it's going to be

2362
01:23:07,040 --> 01:23:12,000
a great audible way to prove that your

2363
01:23:10,320 --> 01:23:14,559
infrastructure is secure

2364
01:23:12,000 --> 01:23:16,239
but in the meantime as we're kind of all

2365
01:23:14,560 --> 01:23:18,000
learning these technologies together and

2366
01:23:16,239 --> 01:23:19,280
all implementing them together

2367
01:23:18,000 --> 01:23:21,199
you know we're going to continue to make

2368
01:23:19,280 --> 01:23:22,719
mistakes so we just need to come

2369
01:23:21,199 --> 01:23:23,599
together as community to help each other

2370
01:23:22,719 --> 01:23:25,280
out

2371
01:23:23,600 --> 01:23:26,880
um you know if you have any questions

2372
01:23:25,280 --> 01:23:27,559
feel free to hit me up my email is just

2373
01:23:26,880 --> 01:23:29,920
bryce

2374
01:23:27,560 --> 01:23:31,360
stage2sec.com you know there's a lot

2375
01:23:29,920 --> 01:23:32,800
more information on our blogs and

2376
01:23:31,360 --> 01:23:35,599
webinars

2377
01:23:32,800 --> 01:23:38,239
so feel free to you know hit us up if

2378
01:23:35,600 --> 01:23:40,320
you want any more information

2379
01:23:38,239 --> 01:23:42,159
we do teach trainings at blackhead

2380
01:23:40,320 --> 01:23:44,880
events and a lot to

2381
01:23:42,159 --> 01:23:45,519
companies directly specifically you know

2382
01:23:44,880 --> 01:23:48,800
we have a two

2383
01:23:45,520 --> 01:23:51,440
and four day hands-on cloud red teaming

2384
01:23:48,800 --> 01:23:52,239
like hacking training that uh people

2385
01:23:51,440 --> 01:23:53,919
seem to love

2386
01:23:52,239 --> 01:23:55,199
so if you're interested in that feel

2387
01:23:53,920 --> 01:23:56,159
free to go to our website follow the

2388
01:23:55,199 --> 01:23:57,919
forum

2389
01:23:56,159 --> 01:23:59,599
if you're interested in the scripts or

2390
01:23:57,920 --> 01:24:01,440
applications that i wrote in support of

2391
01:23:59,600 --> 01:24:04,159
this uh

2392
01:24:01,440 --> 01:24:05,759
you know talk feel free to you know

2393
01:24:04,159 --> 01:24:08,000
check out our github there

2394
01:24:05,760 --> 01:24:09,520
um i just throw random scripts and i

2395
01:24:08,000 --> 01:24:11,600
capture the cloud so

2396
01:24:09,520 --> 01:24:12,880
you know there's not much there but uh

2397
01:24:11,600 --> 01:24:14,960
there should be the examples from this

2398
01:24:12,880 --> 01:24:16,880
talk and from the previous talk i did at

2399
01:24:14,960 --> 01:24:18,639
tor con last year

2400
01:24:16,880 --> 01:24:20,639
and then if you want the deck with the

2401
01:24:18,639 --> 01:24:23,600
references and the slides

2402
01:24:20,639 --> 01:24:25,040
uh you can go to my speaker deck account

2403
01:24:23,600 --> 01:24:26,320
you know um

2404
01:24:25,040 --> 01:24:28,080
really appreciate you guys taking time

2405
01:24:26,320 --> 01:24:31,559
to watch this presentation

2406
01:24:28,080 --> 01:24:34,559
and uh you know stay safe out there

2407
01:24:31,560 --> 01:24:34,560
thanks

