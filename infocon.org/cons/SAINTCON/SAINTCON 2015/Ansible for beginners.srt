1
00:01:25,370 --> 00:01:42,710
education management possible

2
00:01:42,710 --> 00:01:47,539
the idea behind this presentation is
that this is going to be hopefully very

3
00:01:47,540 --> 00:01:50,150
hands-on lab for those who are
interested

4
00:01:50,150 --> 00:01:56,540
those who just want to watch as well
this will be a lot of walking around and

5
00:01:56,540 --> 00:02:04,040
hopefully show you guys found this cool
software so if you have to has used

6
00:02:04,040 --> 00:02:08,450
figure-four ansible has to be at this
point

7
00:02:08,960 --> 00:02:15,830
ok you guys probably notice know more
about that I do start to get my seat

8
00:02:15,830 --> 00:02:23,900
with it went with about nine months ago
but production work with it

9
00:02:23,900 --> 00:02:34,010
previous jobs at this point so merchant
on the IRC forums that saying available

10
00:02:34,010 --> 00:02:41,179
but it's Coffman Twitter occasionally as
i was telling everybody earlier

11
00:02:41,180 --> 00:02:46,880
presentation materials for this for this
talk are available on my github

12
00:02:46,880 --> 00:02:51,950
repository if you are interested in
following along grab them now grab the

13
00:02:51,950 --> 00:03:01,940
back of the same file as well so this
talk is going to talk about this

14
00:03:01,940 --> 00:03:08,060
presentation is going to talk about to
kind of core applications that were used

15
00:03:08,060 --> 00:03:15,709
to build dynamic dynamic environments
through configuration templates the

16
00:03:15,709 --> 00:03:19,459
baseline application that will be using
this demonstration right

17
00:03:19,459 --> 00:03:27,290
favorite at its core configuration
front-end hypervisor primarily

18
00:03:27,290 --> 00:03:29,989
virtualbox that you also have

19
00:03:29,990 --> 00:03:33,560
proprietary like it's available for
$TIME p.m. we're just be covering the

20
00:03:33,560 --> 00:03:39,830
virtualbox horsemen this presentation so
for those of you who have not used

21
00:03:39,830 --> 00:03:47,750
vagrant previous environments previous
task he probably got a different tool

22
00:03:47,750 --> 00:03:51,650
box or some sort of similar hypervisor
got to the process of downloading I so

23
00:03:51,650 --> 00:03:59,990
manually run through a bunch of steps
manually potentially have to blow away

24
00:03:59,990 --> 00:04:08,210
it's time to me from two error prone to
all kinds of configuration nightmares

25
00:04:08,210 --> 00:04:13,610
what favorite does for you is it
introduces the concept of infrastructure

26
00:04:13,610 --> 00:04:19,790
in scopus so instead of taking all those
manual steps what you're going to do is

27
00:04:19,790 --> 00:04:24,740
you're going to create favorite file
that was as basic as possible

28
00:04:25,310 --> 00:04:28,100
similar to the one you're sitting up on
the screen right now you're going to

29
00:04:28,100 --> 00:04:33,800
define more or less of glue that is
going to have a number of configuration

30
00:04:33,800 --> 00:04:38,330
steps that you walk through you will
define a box what box is bigger in terms

31
00:04:38,330 --> 00:04:44,900
or less a freak and my so it's somewhat
optimized for the favorite environment

32
00:04:44,900 --> 00:04:53,330
published on repositories find that has
your box you're going to configure basic

33
00:04:53,330 --> 00:04:59,180
a couple of configuration items like
boarding a local port configuration

34
00:04:59,180 --> 00:05:06,230
through the browser you can from this
example you can also see gravity like

35
00:05:06,230 --> 00:05:14,570
passing traditional shell script to it
so if you copy this file to copy the

36
00:05:14,570 --> 00:05:23,840
content of this my lead to a text
document world will more or less what

37
00:05:23,840 --> 00:05:27,560
you will do at that point you will
download the ISO it will cause all those

38
00:05:27,560 --> 00:05:33,890
configuration parameters toolbox start
the start the operating system and

39
00:05:33,890 --> 00:05:35,520
you're ready to go

40
00:05:35,520 --> 00:05:40,318
if not already installed a grant is
available in two big enough dot com /

41
00:05:40,319 --> 00:05:45,900
downloads fantastic documentation on
their website to get a really top-notch

42
00:05:45,900 --> 00:05:56,849
tutorials second only to but let's get a
show of hands who is actually planning

43
00:05:56,849 --> 00:06:05,699
on Porsha okay go ahead and if you
haven't already downloaded the grand

44
00:06:05,699 --> 00:06:08,789
start to start getting integration files

45
00:06:09,870 --> 00:06:19,680
the rest were just going to our slides
here you two concepts so the second

46
00:06:19,680 --> 00:06:23,580
piece of this presentation is a possible
where vagrants the configurations front

47
00:06:23,580 --> 00:06:28,979
end for your hypervisor ansible takes
that configuration abstraction to

48
00:06:28,979 --> 00:06:37,860
machines and devices hypervisor itself
so we're defining basically OS really

49
00:06:37,860 --> 00:06:42,870
simple parameters within vagrant
sensible kind of disguise 11 using their

50
00:06:42,870 --> 00:06:51,240
weekend modules using configuration
playbooks and lets you define entire

51
00:06:51,240 --> 00:06:57,300
environments through this concept of
configuration is this is the idea my

52
00:06:57,300 --> 00:07:08,190
traditional network engineers out of a
job next frame so we're already probably

53
00:07:08,190 --> 00:07:13,710
the majority of us are probably already
behind but the beautiful thing about

54
00:07:13,710 --> 00:07:21,900
applications like ansible to take the
power infrastructure as code makes it a

55
00:07:21,900 --> 00:07:26,789
little bit more accessible to
programming backward background like

56
00:07:26,789 --> 00:07:34,889
myself so makes it even simpler to
configure our second vironment shell

57
00:07:34,889 --> 00:07:37,889
scripts scripts things like

58
00:07:38,800 --> 00:07:45,430
get in here just second start putting
this presentation together about a month

59
00:07:45,430 --> 00:07:51,250
ago that time ansible has been acquired
by a little company called red hat so

60
00:07:51,250 --> 00:07:58,900
this should make things interesting
while here so i think the position was

61
00:07:58,900 --> 00:08:03,729
officially announced on the 16th through
their about so that's something you

62
00:08:03,729 --> 00:08:11,289
wanted radar Johanns who is used
configuration management tools like chef

63
00:08:11,289 --> 00:08:12,400
for puppets

64
00:08:12,400 --> 00:08:18,489
those are the ones that everybody has
heard this point the big difference

65
00:08:18,490 --> 00:08:24,819
between the way those things the way you
do things which have been popping the

66
00:08:24,819 --> 00:08:29,409
other proprietary integration management
applications out there you can stick an

67
00:08:29,409 --> 00:08:38,860
agent on your machine service like that
are constantly sort of centralized

68
00:08:38,860 --> 00:08:47,740
configuration management dealing with
ansible kind of the reverse is true

69
00:08:47,740 --> 00:08:57,880
there's no agent every command is run
over ssh there's no real concept ability

70
00:08:57,880 --> 00:09:02,350
to push mentality so if you want to make
a change if you want to get any

71
00:09:02,350 --> 00:09:09,730
reporting from managing by a ball really
all you're doing is grabbing a bunch of

72
00:09:09,730 --> 00:09:17,290
processes through application and
pushing your stations so there are

73
00:09:17,290 --> 00:09:26,469
definitely pros and cons to this model
not get live reporting you get with

74
00:09:26,470 --> 00:09:31,690
Jeffrey puppet but on the flip side I
think personally one of the biggest

75
00:09:31,690 --> 00:09:37,510
advantages you get with the ansible
model it's a lot less disruptive going

76
00:09:37,510 --> 00:09:42,550
with an introduction configuration
management lot quicker

77
00:09:43,350 --> 00:09:46,770
so we kind of touched on this already

78
00:09:47,370 --> 00:09:52,830
the problem we're trying to solve with
deterioration management not just those

79
00:09:52,830 --> 00:10:00,600
guys in the entire idea is the manual
configuration everybody has been doing

80
00:10:00,600 --> 00:10:01,980
this ring like the time

81
00:10:01,980 --> 00:10:13,650
perfect we got time constraints we're
probably perfect machines where heart

82
00:10:13,650 --> 00:10:23,220
and soul to them find out later the
organization changed such that package

83
00:10:23,220 --> 00:10:34,080
on their way so created with the concept
of infrastructure as code what you're

84
00:10:34,080 --> 00:10:40,680
gonna be doing with that right off the
bat eliminating potential for human

85
00:10:40,680 --> 00:10:46,260
error through copy-pasting steps in
particular traditional process finding

86
00:10:46,260 --> 00:10:56,520
everything playbooks space files that
can easily read parts actually running

87
00:10:56,520 --> 00:11:06,329
screams so sensible specific the last
section of the slides before getting the

88
00:11:06,330 --> 00:11:11,550
hands-on ansible kind of breaks things
down into a couple of concepts for the

89
00:11:11,550 --> 00:11:14,699
purposes of this lab we're going to know
about you think we're going to need to

90
00:11:14,700 --> 00:11:19,380
know first about inventory file and this
is just as simple as it looks like these

91
00:11:19,380 --> 00:11:26,939
are the notes that you're going to be
managing with your station break it down

92
00:11:26,940 --> 00:11:32,550
really however your environment you can
bring down my group you can have

93
00:11:32,550 --> 00:11:39,479
multiple devices individual really big
dynamic deployment will recommend that

94
00:11:39,480 --> 00:11:43,500
you have these on some sort of back in
database for the purposes of what we're

95
00:11:43,500 --> 00:11:44,190
doing

96
00:11:44,190 --> 00:11:51,930
levels inventory by looks just as simple
as that

97
00:11:52,530 --> 00:12:04,740
if you were to call this romantic
balance reference individual powerful

98
00:12:04,740 --> 00:12:23,130
concept is executed management states in
its most basic level you're going to run

99
00:12:23,130 --> 00:12:32,010
the executable you're gonna run against
device with your inventory file that we

100
00:12:32,010 --> 00:12:38,069
touched on her later and run a command
or service command this is the basic

101
00:12:38,070 --> 00:12:42,300
example the ansible documentation which
started with you are just against the

102
00:12:42,300 --> 00:12:49,199
web group you are running as long as a
sport can talk back to each of those

103
00:12:49,200 --> 00:12:53,820
machines as long as they're accessible
over ssh school management stage n these

104
00:12:53,820 --> 00:12:59,610
are the sorts of results this is where
imaginations kind of going a little bit

105
00:12:59,610 --> 00:13:03,780
while at this point from a reporting
standpoint if you've got a large

106
00:13:03,780 --> 00:13:10,770
environment where you can get a bunch of
machines dynamically are coming in not

107
00:13:10,770 --> 00:13:18,960
have the time or inclination to run some
sort of application on all of your

108
00:13:18,960 --> 00:13:23,850
systems but you've got to achieve got
ssh access to everything you can get

109
00:13:23,850 --> 00:13:31,380
feedback using freaking super helpful
you can see compliance standpoint you

110
00:13:31,380 --> 00:13:32,460
would be able to see ok

111
00:13:32,460 --> 00:13:39,600
users are installed user if I don't file

112
00:13:40,190 --> 00:13:49,580
this difference between survey over here
you go through what its gonna take to

113
00:13:49,580 --> 00:13:56,450
get all of your systems that is one of
the real beauties of this really about

114
00:13:56,450 --> 00:14:06,260
reporting compliance it's a fantastic
win just take a deep dive into the time

115
00:14:06,260 --> 00:14:15,319
systems the next concept advance about
that we're going to touch on playbooks

116
00:14:15,320 --> 00:14:22,100
playbooks takes the concept of the
individual ad-hoc commands and wraps

117
00:14:22,100 --> 00:14:30,350
those into a lot more robust and usable
configuration configuration is code

118
00:14:30,350 --> 00:14:39,410
templates so we can see from the example
here that we've got our web service

119
00:14:39,410 --> 00:14:43,310
group that's defined at the top we're
defining a couple of variables here

120
00:14:43,310 --> 00:14:50,390
we're sitting all of these web servers
gonna have a HTTP port of defining max

121
00:14:50,390 --> 00:14:58,670
200 we are getting used remote user that
we call the actual employment ask

122
00:14:58,670 --> 00:15:08,599
themselves is just 3 for 34 stream that
lets you both and that will actually

123
00:15:08,600 --> 00:15:14,510
look back as you were executing the
ansible playbooks from your asshole

124
00:15:14,510 --> 00:15:20,090
management stations you see we're at in
the process you are so it should be

125
00:15:20,090 --> 00:15:28,280
pretty straightforward that that is also
enjoys working with ansible it takes it

126
00:15:28,280 --> 00:15:32,870
takes very little time to kind of wrap
your head around the syntax of it you're

127
00:15:32,870 --> 00:15:40,670
you're simply saying i want my computer
or my servers run against them which

128
00:15:40,670 --> 00:15:43,020
takes the whole concept

129
00:15:43,020 --> 00:15:52,079
trying to bash script somebody 10 years
ago

130
00:15:53,790 --> 00:16:09,180
easy easy also compliance
troubleshooting issues so that is kind

131
00:16:09,180 --> 00:16:20,550
of it for the slide presentation that
those who are interested presentation

132
00:16:20,550 --> 00:16:26,670
had sufficient time to install bigger on
the laptop installed helper files that i

133
00:16:26,670 --> 00:16:33,599
placed on github repo we get our hamster
at this point so if anybody answers to

134
00:16:33,600 --> 00:16:36,870
your time sir we all kind of setup this
point

135
00:17:24,849 --> 00:17:37,689
if you download the demonstration
materials from repository should stuff

136
00:17:37,690 --> 00:17:44,919
now have two directors first one that
we're going to go into big project

137
00:17:44,919 --> 00:17:47,919
directory

138
00:18:02,130 --> 00:18:08,040
the configuration file for making the
kind of handles the magic figure

139
00:18:08,040 --> 00:18:13,860
environment favorite file this is the
example that I gave you earlier to

140
00:18:13,860 --> 00:18:19,800
execute this we are simply going to have
a working bigger environment you are

141
00:18:19,800 --> 00:18:27,480
going to run the command big rig up and
kind of walks you through what's

142
00:18:27,480 --> 00:18:32,340
happening on the back end of a grant as
i mentioned before is more or less front

143
00:18:32,340 --> 00:18:38,550
end for your hypervisor you can see that
we're executing virtualbox here we are

144
00:18:38,550 --> 00:18:46,950
downloading that trustee 64 box has been
pre-assigned environment you're saying

145
00:18:46,950 --> 00:18:55,650
all those configuration parameters were
doing forwarding is a general public key

146
00:18:55,650 --> 00:19:04,410
of the default one should just take two
minutes here the bigger box to download

147
00:19:04,410 --> 00:19:13,170
environment like a constant

148
00:19:27,700 --> 00:19:31,899
yeah the question was this big grown-up
just initiate whatever paper files in

149
00:19:31,899 --> 00:19:32,918
the directory yes

150
00:19:32,919 --> 00:19:37,960
by default unless you specify some funky
parameter it's going to look for a file

151
00:19:37,960 --> 00:19:44,889
named make file bigger command is going
to call that and so now we can see that

152
00:19:54,429 --> 00:19:57,429
one bigger machine

153
00:20:10,750 --> 00:20:16,750
as I mentioned vagrant is really just a
front end for your vm hypervisors and

154
00:20:16,750 --> 00:20:24,010
now you can see that we have really just
created a very simple a simple p.m. on

155
00:20:24,010 --> 00:20:27,040
our supervisor here

156
00:20:27,850 --> 00:20:34,870
well that is not a super powerful
example of power vagrant the next

157
00:20:34,870 --> 00:20:39,669
example is kinda go into a little bit
more detail really what you can do those

158
00:20:39,670 --> 00:20:44,770
configuration steps that are defined in
the background file those are capable

159
00:20:44,770 --> 00:20:53,860
loose so look at more complex
environment second we got our we've got

160
00:20:53,860 --> 00:21:02,020
a virtual machine running we wanted to
actually connect to that machine which

161
00:21:02,020 --> 00:21:08,139
is going to use the application ssh to
our machine which is the default now see

162
00:21:08,140 --> 00:21:22,240
that we are we're now I in our favor
environment virtual machine pretty

163
00:21:22,240 --> 00:21:27,490
pretty vanilla to solution at this point
so we've got all of our work on that

164
00:21:27,490 --> 00:21:38,440
bigger machine that we want to have
broken it sufficiently we now want to

165
00:21:45,650 --> 00:21:55,160
we want to destroy our environment start
from scratch so we no longer now no

166
00:21:55,160 --> 00:21:58,190
longer have a bigger machine learning
environments

167
00:22:04,710 --> 00:22:09,419
but the grant application is still aware
of that configuration file

168
00:22:09,419 --> 00:22:17,070
it's ready to be deployed this couple of
times bigger application is

169
00:22:17,070 --> 00:22:23,639
theoretically going to a capsule of the
box files such a tedious process talking

170
00:22:23,640 --> 00:22:27,149
through there and you can see if you
actually watch our toolbox what is

171
00:22:27,149 --> 00:22:34,469
happening . so that's bigger and a
really super basic well

172
00:22:52,410 --> 00:22:58,470
so you remember from be a configuration
file out one of the grammars that we

173
00:22:58,470 --> 00:23:08,970
passed to the environment was we are
four port forward cb2 so if we

174
00:24:07,990 --> 00:24:10,990
thanks to work

175
00:24:51,490 --> 00:24:55,900
the spread of our favorite things down
to work as you expected first time

176
00:24:55,900 --> 00:25:04,150
around a lot of time buggy just make
your change blow redeploy supposed to

177
00:25:04,150 --> 00:25:08,650
spend a lot of time particular direction

178
00:25:09,250 --> 00:25:12,580
well that doesn't say time with
detective environment we have right now

179
00:25:13,780 --> 00:25:18,850
huge

180
00:25:36,830 --> 00:25:39,830
it's got the high score the challenge

181
00:27:04,940 --> 00:27:12,230
so we've got a successful for forward
between our local machine so we can

182
00:27:12,230 --> 00:27:31,370
start production locally easily
recyclable development so the next step

183
00:27:31,370 --> 00:27:39,110
in our hands on demo we're going to
complicate things a little bit we're

184
00:27:39,110 --> 00:27:46,909
going to build a much more dynamic
favorite environment i can see from the

185
00:27:46,910 --> 00:27:54,950
stick here that we are we are we are
passing our configuration parameters

186
00:27:54,950 --> 00:28:00,290
through a loop here in our favorite file
we're not only going to create the

187
00:28:00,290 --> 00:28:04,399
single machine here we're now going to
create a management node it'll actually

188
00:28:04,400 --> 00:28:12,650
be used to to deploy a bar or actually
run all of our ansible commands from we

189
00:28:12,650 --> 00:28:15,590
are going to create some machines to
actually we're going to create a load

190
00:28:15,590 --> 00:28:22,820
balancer and we are going to create to
achieve to web servers right now we can

191
00:28:22,820 --> 00:28:28,850
have loops in here as well if we wanted
to create an environment with six

192
00:28:28,850 --> 00:28:30,620
machines we do it right there as well

193
00:28:30,620 --> 00:28:42,199
this kind of quick and simple just do
take a look balancer into so go ahead

194
00:28:42,200 --> 00:28:49,190
and if you're following along trash your
current bigger environment because we're

195
00:28:49,190 --> 00:28:57,350
going to do another port forwarding x
124 to collect

196
00:29:17,779 --> 00:29:22,429
so when we run our Baker command in this
environment gonna be basically the same

197
00:29:22,429 --> 00:29:29,179
thing we saw before we're going to just
call the parameters of this this time

198
00:29:29,179 --> 00:29:37,519
we're going to use traditional shell
script it's called by that bigger file

199
00:29:37,519 --> 00:29:43,700
to set of acute few parameters in our
animal management station

200
00:29:43,700 --> 00:29:47,749
we're just going to add the ansible
repository that management stage and

201
00:29:47,749 --> 00:29:51,589
install it create a few centuries

202
00:29:52,519 --> 00:29:59,179
lets you know smile is around $TIME
games the other thing that we're going

203
00:29:59,179 --> 00:30:06,409
to be doing is setting up a local file
forward so if we want to drop any files

204
00:30:06,409 --> 00:30:12,649
that these are aware of we could just
drop a local directory disposable

205
00:30:12,649 --> 00:30:26,718
environment so we destroyed our previous
environments the concept of a grant we

206
00:30:26,719 --> 00:30:32,119
didn't touch on earlier but should be
obvious bigger files are locally

207
00:30:32,119 --> 00:30:37,999
significant vagrant file is where the
big application is really only where the

208
00:30:37,999 --> 00:30:42,259
files and directories been working out
so it's not going to be conflicted with

209
00:30:42,259 --> 00:30:50,899
that makes having a bunch of different
kind of isolated environments so you can

210
00:30:50,899 --> 00:30:56,779
see that the bigger application is aware
these machines that will be defined by

211
00:30:56,779 --> 00:31:02,330
our configuration template and with a
bigger it up but we go

212
00:31:02,839 --> 00:31:11,809
all of these are being sourced from the
same box template so really have to

213
00:31:11,809 --> 00:31:15,030
download that trustee is a one-time

214
00:31:15,030 --> 00:31:21,480
ideally quite as long as we would expect
for five machines

215
00:31:44,850 --> 00:31:53,429
for its grasp the question you can
install ansible system i probably should

216
00:31:53,430 --> 00:31:57,900
have mentioned that for this lab all the
ansible commands are going to be done

217
00:31:57,900 --> 00:32:02,910
from this ansible management station we
are defining so now you can definitely

218
00:32:02,910 --> 00:32:10,110
install a system for the purpose of this
lab change

219
00:32:44,039 --> 00:32:50,639
the processes superpose every step is
being echoed out here terminal so makes

220
00:32:50,639 --> 00:32:55,228
it really handy for troubleshooting
debugging processes anytime the best

221
00:32:55,229 --> 00:32:56,159
failure

222
00:32:56,159 --> 00:33:11,940
it's gonna be usually painfully obvious
where the tweets and changes continue to

223
00:33:11,940 --> 00:33:17,129
see now that he's using cash box of all
of these subsequent machines that file

224
00:33:17,129 --> 00:33:23,820
is creating you go quicker gonna have to
make changes

225
00:33:34,070 --> 00:33:37,070
ok

226
00:33:42,720 --> 00:33:47,190
our environment is now built so you can
see here we have our management station

227
00:33:47,190 --> 00:33:58,470
we have our load balancer we have our
two web front-ends and again these

228
00:33:58,470 --> 00:34:04,740
adjustments scenes that have been
created virtual box so at this point we

229
00:34:04,740 --> 00:34:12,570
are going to use the bigger application
to SSH into our management station this

230
00:34:12,570 --> 00:34:17,820
is the machine that we will be using our
command control station to run all the

231
00:34:17,820 --> 00:34:20,820
bar and school at Hawkman playbooks

232
00:34:42,370 --> 00:34:48,310
so what things we get it ti
configuration file is downloaded a

233
00:34:48,310 --> 00:34:59,200
couple of pubs major credit Justin y 6
from this admin cast for this content

234
00:35:15,570 --> 00:35:22,410
at this point we're going to go through
and you will see that in that closet or

235
00:35:22,410 --> 00:35:32,460
that i get there is a text file all
syllabus

236
00:35:43,050 --> 00:35:45,660
these are all the commands that we're
going to be actually running from our

237
00:35:45,660 --> 00:35:51,600
management station so feel free to bring
stuff that's part of you what we

238
00:35:51,600 --> 00:35:58,830
demonstrate that disposable environment
so we can easily go back and figure out

239
00:35:58,830 --> 00:36:03,509
where we are destructive changes trash
the environment start from scratch here

240
00:36:37,630 --> 00:36:46,059
everybody have a copy of that simple
smile that's you have a couple of drives

241
00:36:46,059 --> 00:36:49,059
up here at the credit but yeah this is
not the time

242
00:37:02,740 --> 00:37:14,140
so a couple of things slides boys only
going to be aware of devices that you

243
00:37:14,140 --> 00:37:23,980
call out explicitly or it's going to be
aware so this is what files that our

244
00:37:23,980 --> 00:37:32,290
bigger commit configuration file copied
over for us to find our load balancer we

245
00:37:32,290 --> 00:37:37,390
find our to impose these are completely
different independent of the cloud

246
00:37:37,390 --> 00:37:53,560
structure described all of your ad hoc
commands via ansible are executed via

247
00:37:53,560 --> 00:38:05,920
the executable for our first command
we're going to just call against friends

248
00:38:05,920 --> 00:38:17,890
standard except ok so what happened so
right now

249
00:38:18,580 --> 00:38:25,090
ansible is able to talk over ssh but it
doesn't happen there's a couple of ways

250
00:38:25,090 --> 00:38:32,260
to get around that for simple app
commands you kind of getting started you

251
00:38:32,260 --> 00:38:38,170
know it's silly to do key exchange but
that's what's going to prudential some

252
00:38:38,170 --> 00:38:45,490
local system the password on all of
these machines is just simply vagrant so

253
00:38:45,490 --> 00:38:51,490
fully is able to run that interactive
committed against their we receive

254
00:38:51,490 --> 00:38:59,680
receive a co-worker results so that's
great for one-off commands but the next

255
00:38:59,680 --> 00:39:03,279
thing we want to do clearly is large
environments we don't worry about typing

256
00:39:03,280 --> 00:39:05,940
the password every time so cute

257
00:39:05,940 --> 00:39:19,859
so first thing we want to do a scan
system we are then going to go get us

258
00:39:19,859 --> 00:39:37,078
the guess the keys for just the website
that we want to have all of those key

259
00:39:37,079 --> 00:39:43,230
signatures to our station file so
response for everything

260
00:39:52,349 --> 00:39:59,670
command again against instead of doing a
single single device in our inventory

261
00:39:59,670 --> 00:40:04,259
file now we're going to just run command
that is one of the parameters the

262
00:40:04,259 --> 00:40:10,890
program will accept like I said it's
also where individual items mandatory

263
00:40:10,890 --> 00:40:22,410
last or groups so now we get to practice
for our password again and since we

264
00:40:22,410 --> 00:40:28,078
already went through and get all those
signatures to our house we do not get

265
00:40:28,079 --> 00:40:34,799
prompted by one for each about get a
good result of everything when you'll

266
00:40:34,799 --> 00:40:40,140
notice here is that that we've got a
response back

267
00:40:40,739 --> 00:40:49,920
not necessarily order order the items
will be canceled at rockband we just ran

268
00:40:49,920 --> 00:40:58,619
we can tweak that to our liking ass will
let you tweak parameters parallel

269
00:40:58,619 --> 00:41:08,069
synchronously transportation systems
just pretty simple commands right now

270
00:41:08,069 --> 00:41:11,069
its first

271
00:41:21,650 --> 00:41:28,279
so it worked our ass pass but we don't
want to get the keys over there so let's

272
00:41:28,279 --> 00:41:35,630
get generated on our management station
that we are going to use to manage all

273
00:41:35,630 --> 00:41:40,400
of these are total system so super
secure enough of the password in here

274
00:41:40,400 --> 00:41:55,640
now let's take a look at our first
playbook

275
00:41:55,640 --> 00:42:01,940
so up until now we've just been running
commands which lend themselves well to

276
00:42:01,940 --> 00:42:06,500
scriptable dynamic environments which is
great for troubleshooting getting

277
00:42:06,500 --> 00:42:10,549
started our first playbook is our essay

278
00:42:23,310 --> 00:42:29,820
senior your home directory here on the
management States you gotta play books

279
00:42:29,820 --> 00:42:43,020
that are already created auditory RSA
Jackie really basic we're going to call

280
00:42:43,020 --> 00:42:48,840
all of the most defining that inventory
file the proper sudo password you can

281
00:42:48,840 --> 00:42:54,480
also call this directly from sometimes
it's really just depends on the

282
00:42:54,480 --> 00:43:06,630
specified from the PlayBook execute the
command line gathers backs is about that

283
00:43:06,630 --> 00:43:16,050
will touch on later but really that is
ansibles answer to reporting requirement

284
00:43:16,050 --> 00:43:25,500
for big round our task we are going to
give us the name fields are free for

285
00:43:25,500 --> 00:43:30,540
definition this is just for
troubleshooting we're going to call that

286
00:43:30,540 --> 00:43:34,290
we're going to take that authorized key
and what we're doing here is this

287
00:43:34,290 --> 00:43:37,290
authorized this playbook

288
00:43:38,700 --> 00:43:47,939
we can't module has already supplied
cancel has . modules that are included

289
00:43:47,940 --> 00:43:53,520
with the application itself the best
place to kind of you handle on what's

290
00:43:53,520 --> 00:43:57,720
available what you do it is there
documentation as i mentioned before I

291
00:43:57,720 --> 00:44:07,529
never seen application super top-notch
we're going to take that authorized keep

292
00:44:07,530 --> 00:44:14,010
module is our favorite user again this
is a little bit redundant each of these

293
00:44:14,010 --> 00:44:18,990
parameters are something that could be
broken out into a different section

294
00:44:18,990 --> 00:44:22,000
called by

295
00:44:22,000 --> 00:44:31,840
really that we're just saying look for
that this key here is just about the

296
00:44:31,840 --> 00:44:40,630
grammar authorized key module with it
we're gonna look for ourselves

297
00:44:40,630 --> 00:44:45,580
well this is the file that we're
defining this state president this is an

298
00:44:45,580 --> 00:44:49,870
suppose way of saying I'm looking at the
remote machine and I managing if it's

299
00:44:49,870 --> 00:45:09,250
their great if not putting their so at
this point is that some sort of copy

300
00:45:09,250 --> 00:45:24,820
paste to get all right he's over there
just playbook instantly we have the

301
00:45:24,820 --> 00:45:35,530
ability to deploy our key as many items
as you want to put into your inventory

302
00:45:35,530 --> 00:45:42,850
file so that should be something that
you don't use ansible for any other

303
00:45:42,850 --> 00:45:45,850
tasks that

304
00:45:52,170 --> 00:45:59,190
yes I'll show that all these are all of
the command center right here are

305
00:45:59,190 --> 00:46:14,520
straight out of the syllabus file that's
on the github repo so we ran from our

306
00:46:14,520 --> 00:46:21,000
management station ansible playbook
differs from our rockband we're just

307
00:46:21,000 --> 00:46:25,650
doing one of commands against systems
systems now we're actually calling the

308
00:46:25,650 --> 00:46:30,540
PlayBook playbook as we mentioned
earlier is the ssh key that we showed

309
00:46:30,540 --> 00:46:36,180
you and we are passing of one parameter
to ask for the password on there and

310
00:46:36,180 --> 00:46:41,910
that is now the last time we ever have
to have a particular command because

311
00:46:41,910 --> 00:46:44,910
that we've got beyond their life is good

312
00:46:50,380 --> 00:46:55,360
so now that we've kind of configure
baseline for management station be able

313
00:46:55,360 --> 00:47:00,430
to talk to all of these systems we've
got a couple of have McMahon's we can

314
00:47:00,430 --> 00:47:03,220
run against there were no longer get
prompted for a password

315
00:47:03,220 --> 00:47:08,230
so this is where i was mentioning
earlier that compliance sort of

316
00:47:08,230 --> 00:47:13,900
reporting standpoint as well as a huge
time-saver once you take it just kind of

317
00:47:13,900 --> 00:47:21,730
make steps at second patina can control
center get info back from machines piece

318
00:47:21,730 --> 00:47:28,570
of cake for each you say i have this
particular version go running do I have

319
00:47:28,570 --> 00:47:34,180
this particular configuration file do i
want something crazy

320
00:47:41,829 --> 00:48:00,640
bunch of machines you can specify that
right now reporting time-saver i cannot

321
00:48:00,640 --> 00:48:07,719
stress questions up to this point these
are kind of the baby steps of ansible

322
00:48:07,719 --> 00:48:13,509
rest of the examples that I've given in
there i really like to see everybody

323
00:48:13,509 --> 00:48:18,219
just kind of this point I'll be right
through them as well

324
00:48:19,119 --> 00:48:26,650
question number

325
00:48:28,150 --> 00:48:34,119
never play books that are to find just
gonna go through right now look at a

326
00:48:34,119 --> 00:48:40,450
couple of them at this point we're gonna
get gradually more complex as we go

327
00:48:40,450 --> 00:48:47,859
along but from what we've shown already
the baseline touchdown should be pretty

328
00:48:47,859 --> 00:48:49,749
obvious

329
00:48:49,749 --> 00:48:54,459
this one is going to go through our
mandatory for the ntp is installed out

330
00:48:54,459 --> 00:49:00,698
there again we are so we're looking at
another ansible module here this one is

331
00:49:00,699 --> 00:49:07,630
just going to call look for package name
ntp we're going to get that concept of

332
00:49:07,630 --> 00:49:11,769
state installed again so again it's
going to cancel its going to look at the

333
00:49:11,769 --> 00:49:19,899
remote machine its facts back say is it
sold or not otherwise do it once we got

334
00:49:19,900 --> 00:49:25,089
it on there we can look into the copy
command here this is where you've got a

335
00:49:25,089 --> 00:49:29,259
goal copy of the file you need to go out
to a bunch of machines whether it's a

336
00:49:29,259 --> 00:49:35,170
configuration file some sort of custom
HTML script putting out a bunch of

337
00:49:35,170 --> 00:49:39,489
machines whatever file you have you are
just going to copy that file out their

338
00:49:39,489 --> 00:49:41,420
source destination

339
00:49:41,420 --> 00:49:45,829
century set your permission

340
00:49:50,900 --> 00:50:07,069
notify is another module that do a task
basically spit back the results not

341
00:50:07,069 --> 00:50:21,770
super candy with super happy with that
individual services to the terminal so

342
00:50:21,770 --> 00:50:29,089
you can use it for purposes notify you
are doing basically anything that is

343
00:50:29,089 --> 00:50:32,299
going to back to back to the terminal

344
00:50:33,170 --> 00:50:37,069
this is this is suppose way of making
sure that the management station see

345
00:50:37,069 --> 00:50:44,089
information we've got to have one more
play in our playbook here we're looking

346
00:50:44,089 --> 00:50:48,710
at the service called in making sure
it's not possible

347
00:50:48,710 --> 00:50:58,790
we'll put in Star State what we've done
here is we have created handler does

348
00:50:58,790 --> 00:51:10,970
sensible out-of-the-box going to be
where a certain number way of saying

349
00:51:10,970 --> 00:51:19,040
okay I want to not only restart this but
as part of my customer returns parameter

350
00:51:19,040 --> 00:51:26,599
that i'm defining here i also want to
wrap smile or anything like that so it's

351
00:51:26,599 --> 00:51:37,520
a way of wrapping multiple commanded to
a single source custom command so let's

352
00:51:37,520 --> 00:51:39,220
go ahead

353
00:51:39,220 --> 00:51:52,750
let's go ahead and see how we would do
this with so we're going to run a

354
00:51:52,750 --> 00:51:54,700
document against wet one

355
00:51:54,700 --> 00:52:04,180
we're going to look at the apt module
and packaged ftp it's not actually it

356
00:52:04,180 --> 00:52:07,180
failed because we are not

357
00:52:16,970 --> 00:52:19,970
so we can see here that

358
00:52:29,090 --> 00:52:34,130
yes

359
00:52:50,250 --> 00:52:54,990
so that's how you do it again it's a
one-off command against a one-off system

360
00:52:54,990 --> 00:53:00,120
we can now actually install call that
playbook from ansible playbook

361
00:53:00,120 --> 00:53:08,310
executable will go against our inventory
file that we've already installed since

362
00:53:08,310 --> 00:53:11,970
we did not specify the parameter
inhibitory parameters it's going to look

363
00:53:11,970 --> 00:53:15,899
for a file called inventory I everything
on that list

364
00:53:24,470 --> 00:53:27,470
we're getting feedback

365
00:53:52,460 --> 00:54:00,740
got our next task here so we can go
through and see that we have ansible is

366
00:54:00,740 --> 00:54:03,950
aware that there has been a change made
to each of the items in our inventory

367
00:54:03,950 --> 00:54:10,460
file so this is our feedback saying yes
to successfully installed and beyond to

368
00:54:10,460 --> 00:54:16,339
be shades our next task we went through
we copy that TP config file over there

369
00:54:16,339 --> 00:54:23,000
so that's our pre can't just copy
machines we've got an Arab and so our

370
00:54:23,000 --> 00:54:30,440
change handler here we start at TP is
not defined who knows what the problems

371
00:55:17,970 --> 00:55:29,640
so in our playbook here we have to find
a half-dollar named restarts and TV up

372
00:55:29,640 --> 00:55:35,580
here we have to find a handler we are
calling it all starts activity so just

373
00:55:35,580 --> 00:55:49,348
have a simple files is going to sort of
going syntax

374
00:56:09,070 --> 00:56:16,660
yeah so the question wives so we're
we're we're actually trying to restart

375
00:56:16,660 --> 00:56:21,490
the MTP up here with our kevlar that
we've defined further down the line and

376
00:56:21,490 --> 00:56:26,919
since we've got it listed up here as we
start we need to make sure that those

377
00:56:26,920 --> 00:56:29,920
two simple stuff like that

378
00:56:30,610 --> 00:56:40,870
well well as the rope to hang yourself
with the feedbag messages are super

379
00:56:40,870 --> 00:56:43,870
useful they're not going to take place

380
00:56:55,190 --> 00:57:07,520
so that's that's kind of our precursor
to deploy really comfortable as possible

381
00:57:07,520 --> 00:57:15,710
you're gonna start to kind of your
little little toolbox of play playbooks

382
00:57:15,710 --> 00:57:21,230
another thing that i should mention
about playbooks we're seeing here in the

383
00:57:21,230 --> 00:57:24,650
format of each of these playbooks right
now they're single monolithic file so

384
00:57:24,650 --> 00:57:29,300
we're we're calling out of our mention
all of our hosts and the file of our

385
00:57:29,300 --> 00:57:30,890
variables in there

386
00:57:30,890 --> 00:57:34,819
this is by no means met best practice
production environment

387
00:57:35,450 --> 00:57:39,589
ideally what you would want to do is you
want would want to have a breakdown

388
00:57:39,589 --> 00:57:43,849
directory of poems breakdown of a
directory of variable breakdown

389
00:57:43,849 --> 00:57:48,020
directory of individual place and then
within those individual plays there's

390
00:57:48,020 --> 00:57:51,440
another concept that we're going to
we're going to move on to sex and that's

391
00:57:51,440 --> 00:57:55,880
a concept of the role so we've seen
playbooks and call individual place up

392
00:57:55,880 --> 00:58:02,480
to this point one of the one of the X
level features looking at with the

393
00:58:02,480 --> 00:58:12,800
ansible the concept that's so basically
what role is not really not really about

394
00:58:12,800 --> 00:58:14,540
about what we've done already

395
00:58:14,540 --> 00:58:21,680
you're just going to say I've got this
rule defined it says for web servers i'm

396
00:58:21,680 --> 00:58:26,930
going to always make sure that I've got
installed within your PlayBook you're

397
00:58:26,930 --> 00:58:32,029
going to that I just kind of logically
bring out i guess this inventory against

398
00:58:32,030 --> 00:58:37,460
this set of parameters i'm going to use
individual plays but then wrap those

399
00:58:37,460 --> 00:58:44,450
plays so let's say you had a server
where you want to make sure that you got

400
00:58:44,450 --> 00:58:48,680
the web server role on it you also want
the ntp server install you also want

401
00:58:48,680 --> 00:58:56,450
your what every single server construct
your PlayBook in such a way that you've

402
00:58:56,450 --> 00:58:58,049
only written that role

403
00:58:58,050 --> 00:59:07,560
time to test it out on the box and like
grab those roles to your master playbook

404
00:59:07,560 --> 00:59:13,170
and that's kind of what we're going to
see so the

405
00:59:32,190 --> 00:59:35,849
plastic complicated playbook that we're
going to look at here together is the

406
00:59:35,849 --> 00:59:46,200
site back in a little bit about format
that possible uses for all its playbooks

407
00:59:46,200 --> 00:59:57,118
sample syntax there's there's a nice
little tutorial how to gamble on the

408
00:59:57,119 --> 00:59:58,170
website

409
00:59:58,170 --> 01:00:05,160
one of the big takeaways from it is
super dependent upon whitespace other

410
01:00:05,160 --> 01:00:13,109
configuration files so things like
making sure that your your items are

411
01:00:13,109 --> 01:00:22,259
properly invented child processes space
for spaces about their process critical

412
01:00:22,260 --> 01:00:37,890
to function correctly around something
for the answer but don't make spaces

413
01:00:37,890 --> 01:00:46,410
tabs standard apple syntaxes four spaces
so you like this a lot of the smart

414
01:00:46,410 --> 01:00:59,609
money to your tacky for spaces it so
let's look at our big-boy playbook here

415
01:00:59,609 --> 01:01:06,240
so now what we're going to do is we are
actually going to deploy our site

416
01:01:19,420 --> 01:01:22,839
go through this line by line everything
should start looking pretty familiar at

417
01:01:22,839 --> 01:01:28,299
this point we've got all of our folks
that are defined up here we're doing

418
01:01:28,299 --> 01:01:31,960
this via pseudo we're not gathering
facts on this will touch on that again

419
01:01:31,960 --> 01:01:35,890
in a second here that we get to our
tasks

420
01:01:35,890 --> 01:01:41,859
this is where I mention that for from
the best practices standpoint of your

421
01:01:41,859 --> 01:01:48,670
playbooks will start separating out some
of the some of the different segments of

422
01:01:48,670 --> 01:01:53,530
a playbook separate records so real
production environment you would

423
01:01:53,530 --> 01:02:04,000
probably have all your hosts file file a
tax filing find it i'll be so we're

424
01:02:04,000 --> 01:02:11,799
calling the module with an ansible to
make sure that gets installed the update

425
01:02:11,799 --> 01:02:25,450
cash feature just basically gonna be
running this event system downloading

426
01:02:25,450 --> 01:02:37,328
that same ability to catch them we got
another section here we are we are again

427
01:02:37,329 --> 01:02:44,079
calling this task against all of our web
host so here we call it gets the hose

428
01:02:44,079 --> 01:02:52,299
down here we're going to just call it to
where we're going to get coffee out

429
01:02:52,299 --> 01:03:02,079
after module installing tax copy over
next generation file to our to our data

430
01:03:02,079 --> 01:03:06,400
center here that we're deploying copy a
couple more files into various

431
01:03:06,400 --> 01:03:16,180
directories and then we are going to
restart index this is another one where

432
01:03:16,180 --> 01:03:23,529
everybody saw that previous one so right
off the bat

433
01:03:24,160 --> 01:03:26,040
this will fail because

434
01:03:26,040 --> 01:03:36,630
because now we get to the section where
we're just calling task against our load

435
01:03:36,630 --> 01:03:48,510
balancer group so i get to the proxy
copy files so I line file this is

436
01:03:48,510 --> 01:03:54,930
another super useful module with the
ball until we see where we go wild on

437
01:03:54,930 --> 01:04:02,009
our water management station it's copied
over to manage clients but like it file

438
01:04:02,010 --> 01:04:09,420
does it uses standard regex syntax to
instead just modify the contents of the

439
01:04:09,420 --> 01:04:18,270
file that is probably our existing
system lifestyle has it is listed in

440
01:04:18,270 --> 01:04:23,250
this example doesn't have a whole lot of
sanity checks built into it you can also

441
01:04:23,250 --> 01:04:34,140
wrap it inside of a state exists exists
copy over this file from our management

442
01:04:34,140 --> 01:04:40,799
station but the nice thing about this
one is this is really coming and the

443
01:04:40,800 --> 01:04:53,730
production environments that this
moderate changes between change moderate

444
01:04:53,730 --> 01:04:57,930
little tweet each file to constraints
requirement you don't want to

445
01:04:57,930 --> 01:05:04,890
necessarily overwrite the right
configuration file the manufacturer of

446
01:05:04,890 --> 01:05:07,890
the software manufacturer includes with
it you just want me

447
01:05:12,980 --> 01:05:24,500
we're coming over for files using copy
and telling the and here we are going to

448
01:05:24,500 --> 01:05:27,500
restart ancient prophecy

449
01:06:01,180 --> 01:06:07,210
conferenza playbook command we get all
of our super useful feedback from the

450
01:06:07,210 --> 01:06:13,750
ansible executable along with it with
the PlayBook that we can see to the

451
01:06:13,750 --> 01:06:22,660
passes there as they're executed on our
client system we are first installing

452
01:06:22,660 --> 01:06:29,920
all of our machines that is called
against it's all of our machines post

453
01:06:29,920 --> 01:06:35,680
definition for interrupting the file so
successful nowhere is there got your red

454
01:06:35,680 --> 01:06:44,410
terminal station notice that all of the
feedback from analysts color-coded so

455
01:06:44,410 --> 01:06:51,250
make some really nice to your running a
complex a configuration file to be able

456
01:06:51,250 --> 01:06:55,660
to say okay this one was successful it
was change this was Green change this

457
01:06:55,660 --> 01:07:06,520
thread without your text editor debug it
so that we get our feedback recap at the

458
01:07:06,520 --> 01:07:17,109
end of the play here we can see that see
that all of our machines succeeded

459
01:07:17,109 --> 01:07:24,308
without her we have seven ok messages 0
failed messages impotency is the next

460
01:07:24,309 --> 01:07:32,109
time we should talk about what happens
if i run this command again is it going

461
01:07:32,109 --> 01:07:37,509
to rewrite everything or is it just
going to check and see definitions that

462
01:07:37,510 --> 01:07:42,160
we defined our configuration flower are
applied to our clients station the

463
01:07:42,160 --> 01:07:46,450
concept of my potency basically says do
it once

464
01:07:47,079 --> 01:07:53,349
don't change it if you don't need to do
so I canceled right quick wrap quite a

465
01:07:53,349 --> 01:07:57,579
bit quicker that time again start manage
client which means we can see that it

466
01:07:57,579 --> 01:08:02,230
already said that everything is ok to
make any changes and all of our systems

467
01:08:02,230 --> 01:08:06,369
are in a good state this one is where

468
01:08:07,430 --> 01:08:23,389
it's kind of super environment
constantly acceptable state this is

469
01:08:23,390 --> 01:08:27,739
where the magic happens you're going to
have people out there no matter what

470
01:08:27,738 --> 01:08:31,519
your requirements like to make little
tweaks change this configuration file

471
01:08:31,520 --> 01:08:36,799
this file type of this director if you
properly define your ansible playbooks

472
01:08:36,799 --> 01:08:41,359
one of the really nice things you're
gonna be able to do is ensure that

473
01:08:41,359 --> 01:08:52,699
you've got an environment . so the
remainder of the time that we have here

474
01:08:52,698 --> 01:09:01,969
we've got about thanked 2 3 next one
starts you'll see that the management

475
01:09:01,969 --> 01:09:08,689
station directory there are number
playbooks in there have a terrible start

476
01:09:08,689 --> 01:09:11,960
making a little configuration changes
try and break your environment

477
01:09:18,270 --> 01:09:21,270
time questions

478
01:09:43,569 --> 01:09:46,929
that's exactly correct so the question
was is it

479
01:09:46,929 --> 01:09:51,040
his background is from a puppet
environment as i mentioned earlier the

480
01:09:51,040 --> 01:09:55,300
key difference between the philosophy
behind chef and puppet possible is

481
01:09:55,300 --> 01:10:01,480
passable is this environment where you
do not have a local agent running on any

482
01:10:01,480 --> 01:10:06,940
of your systems so that process of
deploying out that agent to the systems

483
01:10:06,940 --> 01:10:10,928
depending on the environment at one
point in life cycle you're coming on

484
01:10:10,929 --> 01:10:17,679
back Mary and so that is I think one of
the big strengths of ansible as long as

485
01:10:17,679 --> 01:10:23,260
you can talk about his age to each of
your managed systems you can read all of

486
01:10:23,260 --> 01:10:26,260
the books all the commands that you want

487
01:10:27,310 --> 01:10:34,960
now that is not without its drawbacks as
you saw from this demo there is

488
01:10:34,960 --> 01:10:39,670
definitely a short of running your
double play books again against your

489
01:10:39,670 --> 01:10:45,190
environment scheduling job something
like that there is no definitive way to

490
01:10:45,190 --> 01:10:48,610
make sure that your environment is the
state you want

491
01:10:48,610 --> 01:10:52,360
so take that for what it is a different
philosophy

492
01:10:53,349 --> 01:10:59,260
there's no talk back from school systems
the ball way of doing things so that

493
01:10:59,260 --> 01:11:00,880
works for your environment grades

494
01:11:00,880 --> 01:11:05,800
it's not a chef and puppet or fantastic
systems that it's not the galaxy be

495
01:11:05,800 --> 01:11:15,070
accessible to employ out the agent to
your assistant touch again that's go

496
01:11:15,070 --> 01:11:18,070
ahead please

497
01:11:32,250 --> 01:11:35,250
yes

498
01:11:42,060 --> 01:11:49,800
sorry part of our strategy was that
website marketing department every

499
01:11:49,800 --> 01:12:12,600
different so that trust

500
01:12:13,200 --> 01:12:23,880
yeah that's the question so that is at
its core no matter what configuration

501
01:12:23,880 --> 01:12:27,930
management tool you're using i think
really the beauty of this concept of

502
01:12:27,930 --> 01:12:33,270
infrastructure as code you can hack data
center if you've got all of your

503
01:12:33,270 --> 01:12:37,350
consideration to find these templates or
whatever management system for doing who

504
01:12:37,350 --> 01:12:42,330
cares throw away the vm redeploy into a
brand-new fresh environment fix whatever

505
01:12:42,330 --> 01:12:47,730
vulnerability apply whatever packages
you do it your configuration management

506
01:12:47,730 --> 01:12:54,000
environment and redeploy and that makes
it its it's incredibly time setting so

507
01:12:54,000 --> 01:12:58,470
I'm gonna spend all your time on the
front supposed to troubleshooting it's

508
01:12:58,470 --> 01:13:01,620
not a syllable like you said you're
still going to get back to find

509
01:13:01,620 --> 01:13:08,130
compromises you're gonna fail to apply
this package of the time break things

510
01:13:08,130 --> 01:13:13,260
you're deploying our code and
application things like that but so what

511
01:13:13,260 --> 01:13:18,030
this makes our requirements completely
disposable it makes get rid of those

512
01:13:18,030 --> 01:13:24,240
little special snowflake environments
that this particular server has to be

513
01:13:24,240 --> 01:13:31,620
set up with this pregnancy can only talk
in this environment that way doesn't

514
01:13:31,620 --> 01:13:32,160
work

515
01:13:32,160 --> 01:13:37,680
we've got we've got too much stuff to do
not enough resources not enough time

516
01:13:37,680 --> 01:13:43,350
whatever we can automate we have to it's
not a matter of times at this point it's

517
01:13:43,350 --> 01:13:46,200
a matter of we've got to do this weekend

518
01:13:46,200 --> 01:13:49,380
the next thing we can take the time to

519
01:13:49,380 --> 01:14:03,989
to waste all our installation else heads
down in the lab apartment now I

520
01:14:03,989 --> 01:14:10,409
mentioned a lot of these come a lot of
these playbooks and overall the concept

521
01:14:10,409 --> 01:14:20,909
of the presentation comes from butchers
last name just my sig fantastic webcast

522
01:14:20,909 --> 01:14:30,269
colts is it's admin Cass I believe he's
now employed by stalker cool companies

523
01:14:30,270 --> 01:14:40,170
to publish content graciously gave me
permission to blatantly create a lot of

524
01:14:40,170 --> 01:14:45,300
its content for this presentation look
for sysadmin

525
01:14:52,930 --> 01:15:09,790
okay I think we've got until three so
that the labs or sometime thanks

