1
00:00:01,879 --> 00:00:07,589
all right thanks everybody for coming to

2
00:00:05,430 --> 00:00:11,879
my talk thanks for sticking around until

3
00:00:07,589 --> 00:00:13,280
the end if we can grab a seat that'd be

4
00:00:11,880 --> 00:00:16,230
great

5
00:00:13,280 --> 00:00:19,198
so my talk is about rolling your own pen

6
00:00:16,230 --> 00:00:21,060
test distro hopefully getting your own

7
00:00:19,199 --> 00:00:23,550
system set up and configured the way you

8
00:00:21,060 --> 00:00:25,799
want it my name is corey paycheck and

9
00:00:23,550 --> 00:00:30,150
you can follow me on twitter at scott

10
00:00:25,800 --> 00:00:31,380
punker I am a cyber security consultant

11
00:00:30,150 --> 00:00:34,379
with LG security

12
00:00:31,380 --> 00:00:37,589
I'm also our pentest team lead so that

13
00:00:34,380 --> 00:00:40,050
means one of the things I'm responsible

14
00:00:37,590 --> 00:00:42,210
for is making sure that all our tools

15
00:00:40,050 --> 00:00:44,910
and techniques are the latest and

16
00:00:42,210 --> 00:00:48,750
up-to-date and usable and so that's what

17
00:00:44,910 --> 00:00:50,250
led to this talk is making sure that we

18
00:00:48,750 --> 00:00:52,530
have systems that are ready to use for

19
00:00:50,250 --> 00:00:54,780
pen testing I have 10 plus years

20
00:00:52,530 --> 00:00:57,300
experience in IT I do all kinds of

21
00:00:54,780 --> 00:01:00,420
security testing and before that I was

22
00:00:57,300 --> 00:01:02,550
an engineer at an MSP just really quick

23
00:01:00,420 --> 00:01:05,430
about AMD security we're a small

24
00:01:02,550 --> 00:01:08,280
cybersecurity consulting firm were based

25
00:01:05,430 --> 00:01:10,110
out of Missoula Montana and our CEO and

26
00:01:08,280 --> 00:01:15,140
founder Sheri Davidoff gave the keynote

27
00:01:10,110 --> 00:01:18,030
about data breaches so let's get started

28
00:01:15,140 --> 00:01:19,950
choosing your Linux distribution this be

29
00:01:18,030 --> 00:01:21,960
you know your first place to start this

30
00:01:19,950 --> 00:01:26,400
is very personal choice for a lot of

31
00:01:21,960 --> 00:01:29,520
people this thought specifically is

32
00:01:26,400 --> 00:01:31,829
about pen testing so cally bakbox pair

33
00:01:29,520 --> 00:01:33,960
black arch pen two samurai you might be

34
00:01:31,829 --> 00:01:36,899
familiar with these penetration testing

35
00:01:33,960 --> 00:01:39,360
focused distributions these are great

36
00:01:36,900 --> 00:01:41,030
projects projects and they're really

37
00:01:39,360 --> 00:01:43,890
nice if you need to spin up a temporary

38
00:01:41,030 --> 00:01:46,020
OS to get some testing done and just

39
00:01:43,890 --> 00:01:47,369
kind of have tools already installed

40
00:01:46,020 --> 00:01:49,048
ready to go

41
00:01:47,369 --> 00:01:51,860
they shouldn't however be your

42
00:01:49,049 --> 00:01:55,140
day-to-day operating system they're not

43
00:01:51,860 --> 00:01:57,360
intended for stability daily use and

44
00:01:55,140 --> 00:01:59,460
likely you'll end up with a buggy system

45
00:01:57,360 --> 00:02:02,100
you might have experienced this at some

46
00:01:59,460 --> 00:02:05,610
point if you've used any of those so I

47
00:02:02,100 --> 00:02:08,128
want to talk about using something more

48
00:02:05,610 --> 00:02:12,360
reliable my top two recommendations

49
00:02:08,128 --> 00:02:13,480
would be Ubuntu and fedora I'm a big a

50
00:02:12,360 --> 00:02:14,860
bun to fan I think

51
00:02:13,480 --> 00:02:16,420
it's great I think it's one of the most

52
00:02:14,860 --> 00:02:19,569
stable and kind of well-put-together

53
00:02:16,420 --> 00:02:22,480
distributions I think if you're kind of

54
00:02:19,569 --> 00:02:24,518
starting out or if it's this is going to

55
00:02:22,480 --> 00:02:27,369
be for a system that is not used on a

56
00:02:24,519 --> 00:02:31,450
regular basis there LTS releases are

57
00:02:27,370 --> 00:02:33,160
perfect a lot more stable released every

58
00:02:31,450 --> 00:02:37,030
two years so they're still fairly up to

59
00:02:33,160 --> 00:02:40,660
date for my desktop daily use system I

60
00:02:37,030 --> 00:02:44,280
do use the latest version Fedora is also

61
00:02:40,660 --> 00:02:47,500
a great choice they also have a two-year

62
00:02:44,280 --> 00:02:50,890
release cycle but they don't have an LTS

63
00:02:47,500 --> 00:02:52,810
release so if it's something that you're

64
00:02:50,890 --> 00:02:54,268
not going to be using on a somewhat

65
00:02:52,810 --> 00:02:56,590
regular basis and keeping up to date

66
00:02:54,269 --> 00:02:59,859
it's a lot easier to fall behind I think

67
00:02:56,590 --> 00:03:05,879
on that so I like a bun to for kind of

68
00:02:59,859 --> 00:03:05,879
that choice between most recent and LTS

69
00:03:06,629 --> 00:03:13,060
so the first kind of step to getting

70
00:03:09,970 --> 00:03:16,440
your own environment setup would be to

71
00:03:13,060 --> 00:03:19,900
build a custom ISO something to get your

72
00:03:16,440 --> 00:03:24,549
system up and running initially having

73
00:03:19,900 --> 00:03:28,750
your own ISO is also really handy for us

74
00:03:24,549 --> 00:03:30,280
when we have a client that we need to

75
00:03:28,750 --> 00:03:32,139
have a system spun up with in their

76
00:03:30,280 --> 00:03:36,760
environment so for doing an internal

77
00:03:32,139 --> 00:03:38,769
penetration test if we want a system on

78
00:03:36,760 --> 00:03:41,440
their network this is kind of the

79
00:03:38,769 --> 00:03:43,269
easiest way to do it having an ISO makes

80
00:03:41,440 --> 00:03:44,620
it really generic so whatever virtual

81
00:03:43,269 --> 00:03:46,599
environment they have or even if they

82
00:03:44,620 --> 00:03:49,090
want to spin it up on the hardware it

83
00:03:46,599 --> 00:03:50,768
makes it really easy to do rather than

84
00:03:49,090 --> 00:03:52,780
dealing with some sort of virtual image

85
00:03:50,769 --> 00:03:54,459
that you know might be different from

86
00:03:52,780 --> 00:03:55,840
the virtual environment that they have

87
00:03:54,459 --> 00:03:59,410
something that needs to be converted

88
00:03:55,840 --> 00:04:02,109
most of the time our clients are not

89
00:03:59,410 --> 00:04:05,200
super tech savvy so they may not be

90
00:04:02,109 --> 00:04:07,629
familiar with installing Linux so having

91
00:04:05,200 --> 00:04:11,319
an ISO that they can just spin up and

92
00:04:07,629 --> 00:04:14,590
does everything for them makes it really

93
00:04:11,319 --> 00:04:17,589
easy to get our system up and running

94
00:04:14,590 --> 00:04:19,750
within their environment when you build

95
00:04:17,589 --> 00:04:23,679
a custom ISO I would recommend keeping

96
00:04:19,750 --> 00:04:26,480
it as simple and generic as possible I

97
00:04:23,680 --> 00:04:29,180
wouldn't add a lot of customizations

98
00:04:26,480 --> 00:04:32,270
when you need to update it you want to

99
00:04:29,180 --> 00:04:34,610
be fairly simple so that switching to a

100
00:04:32,270 --> 00:04:38,479
new version of a distribution is going

101
00:04:34,610 --> 00:04:41,390
to be fairly easy for you to do the main

102
00:04:38,480 --> 00:04:45,410
reason for creating that custom ISO is

103
00:04:41,390 --> 00:04:47,060
the unattended install so this is the

104
00:04:45,410 --> 00:04:48,620
really nice part and what makes it

105
00:04:47,060 --> 00:04:50,930
really easy on the client if they don't

106
00:04:48,620 --> 00:04:53,420
have to answer any questions during the

107
00:04:50,930 --> 00:04:56,840
installation process it'll just go

108
00:04:53,420 --> 00:04:59,420
through and and do the basics that we

109
00:04:56,840 --> 00:05:04,280
need to get it up and running so there's

110
00:04:59,420 --> 00:05:06,770
a couple links here for doing that with

111
00:05:04,280 --> 00:05:09,619
debian so it's method is called precede

112
00:05:06,770 --> 00:05:12,770
there's instructions the documentation

113
00:05:09,620 --> 00:05:16,730
on this has generally not been very good

114
00:05:12,770 --> 00:05:20,390
unfortunately the system has changed a

115
00:05:16,730 --> 00:05:23,150
little bit and uses new directives but

116
00:05:20,390 --> 00:05:27,890
it has gotten a lot better

117
00:05:23,150 --> 00:05:28,729
there's also a github project net son he

118
00:05:27,890 --> 00:05:30,680
has a script

119
00:05:28,730 --> 00:05:34,070
that'll help kind of automate the whole

120
00:05:30,680 --> 00:05:36,980
process of building a customized so it

121
00:05:34,070 --> 00:05:39,050
is a few years old but it still works

122
00:05:36,980 --> 00:05:40,790
great I've been using it and kind of

123
00:05:39,050 --> 00:05:43,490
have my own custom version of this which

124
00:05:40,790 --> 00:05:47,120
I hope to have up on github as well

125
00:05:43,490 --> 00:05:48,710
pretty soon if you're using fedora the

126
00:05:47,120 --> 00:05:56,120
process for doing the same thing would

127
00:05:48,710 --> 00:05:59,120
be a kickstart file as so the tasks for

128
00:05:56,120 --> 00:06:02,000
an unattended install these are the

129
00:05:59,120 --> 00:06:04,760
basic things that we set the ISO up to

130
00:06:02,000 --> 00:06:08,750
do to get you kind of up and running

131
00:06:04,760 --> 00:06:11,990
initially so enabling DHCP if it's going

132
00:06:08,750 --> 00:06:16,160
to be available or we also build another

133
00:06:11,990 --> 00:06:18,290
ISO for static IPS if the client knows

134
00:06:16,160 --> 00:06:20,300
that they're gonna have to give it an IP

135
00:06:18,290 --> 00:06:22,220
address this would be the only prompt

136
00:06:20,300 --> 00:06:23,840
during installation that they would need

137
00:06:22,220 --> 00:06:25,730
to mess with and so this is usually

138
00:06:23,840 --> 00:06:28,969
fairly easy for them to do to just plug

139
00:06:25,730 --> 00:06:31,700
in the static IP the other thing we have

140
00:06:28,970 --> 00:06:33,650
our custom ISO do is we run an egress

141
00:06:31,700 --> 00:06:36,110
shell script so this will create a

142
00:06:33,650 --> 00:06:38,030
reverse shell back to a system that we

143
00:06:36,110 --> 00:06:39,719
have up and running and this will give

144
00:06:38,030 --> 00:06:43,169
us that an

145
00:06:39,719 --> 00:06:45,748
access to that system once it's actually

146
00:06:43,169 --> 00:06:49,318
installed and up and running and has a

147
00:06:45,749 --> 00:06:52,019
connection outbound so we run this in

148
00:06:49,319 --> 00:06:54,059
the RC local script this will let it run

149
00:06:52,019 --> 00:06:57,749
on startup and then the only other thing

150
00:06:54,059 --> 00:07:01,289
would be enabling SSH setting your SSH

151
00:06:57,749 --> 00:07:03,479
keys and then add your own key to the

152
00:07:01,289 --> 00:07:06,209
authorized keys file so this will give

153
00:07:03,479 --> 00:07:09,179
us access to actually log into that

154
00:07:06,209 --> 00:07:12,089
system when it's made that reverse shell

155
00:07:09,179 --> 00:07:14,248
connection back to us so that's that's

156
00:07:12,089 --> 00:07:17,939
pretty much it there's not much

157
00:07:14,249 --> 00:07:20,759
customization that we do on the ISO it's

158
00:07:17,939 --> 00:07:25,679
pretty basic and this keeps it pretty

159
00:07:20,759 --> 00:07:28,289
standard and easy to maintain so once we

160
00:07:25,679 --> 00:07:31,229
have that reverse shell connection back

161
00:07:28,289 --> 00:07:34,589
to us we have a script for doing post

162
00:07:31,229 --> 00:07:37,469
installation tasks so this will do 99%

163
00:07:34,589 --> 00:07:41,849
of the setup of all the tools everything

164
00:07:37,469 --> 00:07:44,869
we need this is a basic version of a

165
00:07:41,849 --> 00:07:48,808
script that's up on my github right now

166
00:07:44,869 --> 00:07:50,809
and I will be adding to it continually

167
00:07:48,809 --> 00:07:55,319
I'll have a link to my github at the end

168
00:07:50,809 --> 00:07:58,199
this is just to kind of briefly give you

169
00:07:55,319 --> 00:08:00,839
an idea of how easy it can be to create

170
00:07:58,199 --> 00:08:05,009
a script that will set everything up for

171
00:08:00,839 --> 00:08:06,989
you you know so rather than anytime you

172
00:08:05,009 --> 00:08:10,489
spin up a system getting on and

173
00:08:06,989 --> 00:08:12,839
installing packages as you go you know

174
00:08:10,489 --> 00:08:14,729
it's great to get in the habit of having

175
00:08:12,839 --> 00:08:15,899
your own script that sets up your system

176
00:08:14,729 --> 00:08:17,399
for you

177
00:08:15,899 --> 00:08:20,519
so just going through this the first

178
00:08:17,399 --> 00:08:22,559
thing it does is update the distribution

179
00:08:20,519 --> 00:08:25,829
packages gets the system completely

180
00:08:22,559 --> 00:08:27,809
up-to-date to that point the next thing

181
00:08:25,829 --> 00:08:30,300
it does is just some basic installs from

182
00:08:27,809 --> 00:08:34,229
the repository as some other packages

183
00:08:30,300 --> 00:08:37,438
that we need to install the rest of the

184
00:08:34,229 --> 00:08:41,039
tools and then it sets up my team ux--

185
00:08:37,438 --> 00:08:44,339
environment which I'll get into later on

186
00:08:41,039 --> 00:08:46,470
in the talk here as well and then runs

187
00:08:44,339 --> 00:08:49,230
the PDF tool which I'm going to talk

188
00:08:46,470 --> 00:08:51,569
about next and that's it so it does a

189
00:08:49,230 --> 00:08:52,350
doesn't update does a few installs and

190
00:08:51,569 --> 00:08:54,089
this

191
00:08:52,350 --> 00:08:56,480
pretty much gets it up and ready for pan

192
00:08:54,090 --> 00:08:56,480
testing

193
00:08:56,850 --> 00:09:02,400
so the penetration testers framework

194
00:08:58,590 --> 00:09:04,680
it's a fantastic tool it's written by

195
00:09:02,400 --> 00:09:08,100
Dave Kennedy I think it's one of his

196
00:09:04,680 --> 00:09:10,859
best it's one of my favorites before I

197
00:09:08,100 --> 00:09:13,800
started using this there was just such a

198
00:09:10,860 --> 00:09:17,340
mess of trying to keep all our tools

199
00:09:13,800 --> 00:09:18,930
installed up to date make sure everybody

200
00:09:17,340 --> 00:09:21,420
had what they wanted because some

201
00:09:18,930 --> 00:09:25,079
testers like other tools better than

202
00:09:21,420 --> 00:09:27,270
others so even if I wasn't using that

203
00:09:25,080 --> 00:09:30,110
tool that have to maintain it

204
00:09:27,270 --> 00:09:32,160
this just greatly simplifies everything

205
00:09:30,110 --> 00:09:35,940
it's super easy to use

206
00:09:32,160 --> 00:09:38,939
super easy to customize just a little

207
00:09:35,940 --> 00:09:41,010
overview on the tool of how to use it's

208
00:09:38,940 --> 00:09:45,990
pretty simple you can install modules

209
00:09:41,010 --> 00:09:48,450
individually which I think it's not the

210
00:09:45,990 --> 00:09:50,370
most ideal way to use it you can use a

211
00:09:48,450 --> 00:09:53,520
custom config file for automatic

212
00:09:50,370 --> 00:09:55,230
installs so there's a config file you

213
00:09:53,520 --> 00:09:58,579
just list the modules that you want to

214
00:09:55,230 --> 00:10:01,620
install and then you can automate the

215
00:09:58,580 --> 00:10:05,880
installation of all those modules with

216
00:10:01,620 --> 00:10:08,250
one command to just run PTF with the

217
00:10:05,880 --> 00:10:11,250
command update all which was in that

218
00:10:08,250 --> 00:10:13,290
initial setup script and it installs

219
00:10:11,250 --> 00:10:17,760
everything for you and will update

220
00:10:13,290 --> 00:10:20,099
everything for you it's also super easy

221
00:10:17,760 --> 00:10:23,130
to create your own custom modules with

222
00:10:20,100 --> 00:10:25,500
the PDF framework so this is an example

223
00:10:23,130 --> 00:10:27,020
of a module you see it's not very

224
00:10:25,500 --> 00:10:30,570
complicated not that many lines

225
00:10:27,020 --> 00:10:33,750
basically just set your installation

226
00:10:30,570 --> 00:10:36,900
type so you it can be from get it can be

227
00:10:33,750 --> 00:10:40,650
from SVN or it can just be downloading a

228
00:10:36,900 --> 00:10:43,110
file so you specify that you specify any

229
00:10:40,650 --> 00:10:46,470
distribution specific dependencies that

230
00:10:43,110 --> 00:10:49,050
that tool might need and then you can

231
00:10:46,470 --> 00:10:51,570
also list any commands to run afterwards

232
00:10:49,050 --> 00:10:54,719
for setup so basically any commands at

233
00:10:51,570 --> 00:10:57,090
all as many as you need you just stick

234
00:10:54,720 --> 00:11:00,120
in the after commands and will be run

235
00:10:57,090 --> 00:11:01,860
and get everything configured you set a

236
00:11:00,120 --> 00:11:03,630
launcher name and that'll create a

237
00:11:01,860 --> 00:11:04,550
launcher for use - no worrying about

238
00:11:03,630 --> 00:11:06,740
make

239
00:11:04,550 --> 00:11:08,870
the script executable or making sure

240
00:11:06,740 --> 00:11:11,630
it's in your path in the right location

241
00:11:08,870 --> 00:11:16,690
it automates that for you and just makes

242
00:11:11,630 --> 00:11:20,209
it ready to run from your shell prompt

243
00:11:16,690 --> 00:11:25,899
so it's really great and that has taken

244
00:11:20,209 --> 00:11:25,899
care of most of our tools and updating

245
00:11:25,930 --> 00:11:32,630
so kind of the next big issue people

246
00:11:29,990 --> 00:11:34,360
usually run into if you're trying to use

247
00:11:32,630 --> 00:11:36,620
something that's not Callie is

248
00:11:34,360 --> 00:11:38,930
permissions you know it drops you in as

249
00:11:36,620 --> 00:11:41,060
a route if you're on a normal and

250
00:11:38,930 --> 00:11:43,699
accessor bution you're probably starting

251
00:11:41,060 --> 00:11:45,768
out as a regular user you know so why

252
00:11:43,700 --> 00:11:47,930
not just switch to route you don't need

253
00:11:45,769 --> 00:11:51,160
sudo to run certain commands you can

254
00:11:47,930 --> 00:11:53,029
just run that I wouldn't recommend it

255
00:11:51,160 --> 00:11:56,180
but yet there's there's definitely

256
00:11:53,029 --> 00:11:58,790
problems with running as routes and I

257
00:11:56,180 --> 00:12:00,500
think as security professionals we

258
00:11:58,790 --> 00:12:05,060
should take our own advice

259
00:12:00,500 --> 00:12:08,120
and not run as routes and really well

260
00:12:05,060 --> 00:12:10,699
you know when do you need route when is

261
00:12:08,120 --> 00:12:12,440
route actually required

262
00:12:10,700 --> 00:12:15,170
does anybody know typically like when

263
00:12:12,440 --> 00:12:20,810
pen testing what you need root

264
00:12:15,170 --> 00:12:22,339
privileges for yeah changing Wi-Fi

265
00:12:20,810 --> 00:12:25,910
modern remote that would definitely be

266
00:12:22,339 --> 00:12:26,839
one anything else is kind of one big one

267
00:12:25,910 --> 00:12:31,160
I'm thinking of

268
00:12:26,839 --> 00:12:32,899
I mean probably don't need that if

269
00:12:31,160 --> 00:12:38,510
you're just running pen test tools

270
00:12:32,899 --> 00:12:43,670
here's a hint port port listening rulers

271
00:12:38,510 --> 00:12:46,000
ports right 1 through 10 23 you have to

272
00:12:43,670 --> 00:12:48,620
be rude to listen on those ports

273
00:12:46,000 --> 00:12:51,320
anything after that you don't but that's

274
00:12:48,620 --> 00:12:54,290
typically when pen testing that's what I

275
00:12:51,320 --> 00:12:57,320
usually the only thing I run into needy

276
00:12:54,290 --> 00:12:59,990
and root access for you know so for

277
00:12:57,320 --> 00:13:07,000
example as to be relaying you need to

278
00:12:59,990 --> 00:13:11,600
listen on port 443 or or 4 or 5 or

279
00:13:07,000 --> 00:13:16,760
responder poisoning 80 and 443 so that's

280
00:13:11,600 --> 00:13:17,840
typically the only time I find eating

281
00:13:16,760 --> 00:13:25,360
route

282
00:13:17,840 --> 00:13:28,880
in most cases so you might also run into

283
00:13:25,360 --> 00:13:30,680
permission issues though with files that

284
00:13:28,880 --> 00:13:32,660
you're accessing scripts that you're

285
00:13:30,680 --> 00:13:34,790
running I definitely think it's

286
00:13:32,660 --> 00:13:39,079
important to kind of have a basic

287
00:13:34,790 --> 00:13:40,760
understanding of Linux permissions it's

288
00:13:39,080 --> 00:13:42,290
pretty simple I'm going to go through

289
00:13:40,760 --> 00:13:44,960
just like the two things that will

290
00:13:42,290 --> 00:13:49,370
probably solve all your permission

291
00:13:44,960 --> 00:13:52,390
issues so the chmod command for changing

292
00:13:49,370 --> 00:13:56,660
permissions don't just set everything to

293
00:13:52,390 --> 00:14:00,650
777 I hope you're not I hope you're not

294
00:13:56,660 --> 00:14:03,890
using that chmod plus x to make a script

295
00:14:00,650 --> 00:14:05,660
executable is typically what you'll need

296
00:14:03,890 --> 00:14:07,520
most of time if you're or if you're if

297
00:14:05,660 --> 00:14:09,410
you're switching back and forth between

298
00:14:07,520 --> 00:14:10,910
user and routes you're probably going to

299
00:14:09,410 --> 00:14:13,610
run into a lot of permission issues if

300
00:14:10,910 --> 00:14:14,120
you're if you're staying running as

301
00:14:13,610 --> 00:14:18,200
Reuther

302
00:14:14,120 --> 00:14:19,490
as a user and only running as with sudo

303
00:14:18,200 --> 00:14:20,990
permissions when you absolutely need

304
00:14:19,490 --> 00:14:24,310
them chances are you're not going to run

305
00:14:20,990 --> 00:14:27,680
into file permissions most of the time

306
00:14:24,310 --> 00:14:30,040
if you are running like a one-off to a

307
00:14:27,680 --> 00:14:33,290
one-off script

308
00:14:30,040 --> 00:14:36,260
you don't even need to to set that

309
00:14:33,290 --> 00:14:38,209
script is executable so for example if

310
00:14:36,260 --> 00:14:40,610
it's a Python script just run python

311
00:14:38,210 --> 00:14:42,050
script up high rather than changing

312
00:14:40,610 --> 00:14:45,130
permissions and then running the script

313
00:14:42,050 --> 00:14:48,770
or run bash script SH for a bash script

314
00:14:45,130 --> 00:14:50,930
if it's a if it's a one-off script it's

315
00:14:48,770 --> 00:14:54,430
easy enough to just run it that way and

316
00:14:50,930 --> 00:14:58,310
you don't have to change permissions the

317
00:14:54,430 --> 00:15:02,359
other one to know is CH own change owner

318
00:14:58,310 --> 00:15:05,420
and group so change your user and user

319
00:15:02,360 --> 00:15:08,420
group on a file or recursively on a on a

320
00:15:05,420 --> 00:15:11,959
directory that's typically all you

321
00:15:08,420 --> 00:15:14,660
really need to know occasionally I know

322
00:15:11,960 --> 00:15:16,730
some people just change the user I like

323
00:15:14,660 --> 00:15:18,740
keeping my permissions consistent so I

324
00:15:16,730 --> 00:15:24,890
always like changing the user and the

325
00:15:18,740 --> 00:15:26,330
user group at the same time so

326
00:15:24,890 --> 00:15:28,550
installing all the tools and their

327
00:15:26,330 --> 00:15:29,089
dependencies this is kind of a quick

328
00:15:28,550 --> 00:15:31,639
over

329
00:15:29,089 --> 00:15:34,189
you of the most common methods that

330
00:15:31,639 --> 00:15:38,120
you'll run into you for installing tools

331
00:15:34,189 --> 00:15:41,899
for pen testing so a get clone and an

332
00:15:38,120 --> 00:15:45,110
executable script that's pretty common

333
00:15:41,899 --> 00:15:47,199
the most basic if it's a Python script

334
00:15:45,110 --> 00:15:49,999
hopefully they've included a

335
00:15:47,199 --> 00:15:52,878
requirements text file within that

336
00:15:49,999 --> 00:15:55,759
project and so typically that's the case

337
00:15:52,879 --> 00:15:57,350
and you can run pip install - our

338
00:15:55,759 --> 00:15:59,689
requirements not tax and I'll install

339
00:15:57,350 --> 00:16:03,290
all the Python dependencies for you

340
00:15:59,689 --> 00:16:04,969
pretty straightforward go which I'm

341
00:16:03,290 --> 00:16:08,349
going to be talking about a little bit

342
00:16:04,970 --> 00:16:12,110
more because the setup is complicated

343
00:16:08,350 --> 00:16:14,930
you can just run the go get command with

344
00:16:12,110 --> 00:16:17,689
the location of the tool repository and

345
00:16:14,930 --> 00:16:19,579
it'll install it for you and if

346
00:16:17,689 --> 00:16:24,620
everything is set up correctly should be

347
00:16:19,579 --> 00:16:27,290
executable so that makes go tools pretty

348
00:16:24,620 --> 00:16:31,569
easy to install and get all the

349
00:16:27,290 --> 00:16:34,849
dependencies Ruby if there's a gem file

350
00:16:31,569 --> 00:16:36,649
which commonly there is then you can run

351
00:16:34,850 --> 00:16:40,249
a bundle install and it will install

352
00:16:36,649 --> 00:16:43,249
your gem dependencies for you and so on

353
00:16:40,249 --> 00:16:46,209
from source has been a lot less common

354
00:16:43,249 --> 00:16:50,420
lately I don't run into that very often

355
00:16:46,209 --> 00:16:55,008
anymore you know it occasionally comes

356
00:16:50,420 --> 00:16:56,809
up but typically you'll have your after

357
00:16:55,009 --> 00:16:59,509
yum repositories you have your stool in

358
00:16:56,809 --> 00:17:03,079
there tool in there and that's kind of

359
00:16:59,509 --> 00:17:07,760
the simplest and easiest way to have

360
00:17:03,079 --> 00:17:10,639
your tools installed and updated so go

361
00:17:07,760 --> 00:17:13,970
set up as I said this can be a little

362
00:17:10,640 --> 00:17:15,829
complicated a little frustrating it's a

363
00:17:13,970 --> 00:17:18,770
little bit newer so installation

364
00:17:15,829 --> 00:17:22,059
instructions on their website have you

365
00:17:18,770 --> 00:17:26,470
just install download the latest version

366
00:17:22,059 --> 00:17:30,350
extract it into a directory and then add

367
00:17:26,470 --> 00:17:33,470
the path to your system just not ideal

368
00:17:30,350 --> 00:17:35,240
you know maintaining this is gonna be

369
00:17:33,470 --> 00:17:37,010
cumbersome if you want to update it

370
00:17:35,240 --> 00:17:40,820
you're gonna have to install the latest

371
00:17:37,010 --> 00:17:41,530
version again extract it into it over

372
00:17:40,820 --> 00:17:45,310
over

373
00:17:41,530 --> 00:17:48,570
that existing directory so not easy to

374
00:17:45,310 --> 00:17:52,600
maintain fortunately as finally I found

375
00:17:48,570 --> 00:17:54,760
started getting updated more regularly

376
00:17:52,600 --> 00:17:56,879
within the repositories so at this point

377
00:17:54,760 --> 00:18:00,700
I think installing go from the

378
00:17:56,880 --> 00:18:03,250
repositories is the best way to go so a

379
00:18:00,700 --> 00:18:06,160
bun - is just an app stall apt install

380
00:18:03,250 --> 00:18:09,640
going you'll still have to set up a go

381
00:18:06,160 --> 00:18:14,470
path for your tools to be able to run

382
00:18:09,640 --> 00:18:17,620
immediately so the example here at the

383
00:18:14,470 --> 00:18:20,650
bottom I have this is what is the most

384
00:18:17,620 --> 00:18:24,120
common way it's being done right now and

385
00:18:20,650 --> 00:18:27,490
the PPF framework for tools that use go

386
00:18:24,120 --> 00:18:30,580
unfortunately this is not really ideal

387
00:18:27,490 --> 00:18:35,350
either if you look at that command it's

388
00:18:30,580 --> 00:18:38,350
gonna put that export line into your dot

389
00:18:35,350 --> 00:18:41,139
profile file so there's a couple issues

390
00:18:38,350 --> 00:18:45,310
with this first thing I copied this line

391
00:18:41,140 --> 00:18:46,840
exactly and so if you look at it

392
00:18:45,310 --> 00:18:48,580
carefully it's actually gonna overwrite

393
00:18:46,840 --> 00:18:51,070
that file so hopefully you didn't have

394
00:18:48,580 --> 00:18:53,740
anything important in there it's not

395
00:18:51,070 --> 00:18:55,990
great each one is overriding every time

396
00:18:53,740 --> 00:19:00,220
and then and then it sources that

397
00:18:55,990 --> 00:19:02,470
profile file so that means it executes

398
00:19:00,220 --> 00:19:05,890
that file and makes those changes apply

399
00:19:02,470 --> 00:19:08,050
to the current shell so if you if that

400
00:19:05,890 --> 00:19:12,010
runs and then you run your tool it's

401
00:19:08,050 --> 00:19:15,159
probably going to work my abun -

402
00:19:12,010 --> 00:19:18,670
headless systems never call that profile

403
00:19:15,160 --> 00:19:21,820
file so if I exit that shell and log in

404
00:19:18,670 --> 00:19:23,710
again or reboot it may have worked the

405
00:19:21,820 --> 00:19:28,030
first time but it then is not gonna work

406
00:19:23,710 --> 00:19:31,210
the second time so obviously that's can

407
00:19:28,030 --> 00:19:35,230
be frustrating currently right now eh

408
00:19:31,210 --> 00:19:38,290
I put that go path line into my bash RC

409
00:19:35,230 --> 00:19:40,630
or VC shell RC file whichever terminal

410
00:19:38,290 --> 00:19:42,879
I'm using and that's the better location

411
00:19:40,630 --> 00:19:46,500
for it I still don't have a great answer

412
00:19:42,880 --> 00:19:49,240
on really where we should put that it's

413
00:19:46,500 --> 00:19:52,110
kind of not standardized at the moment

414
00:19:49,240 --> 00:19:53,950
and I think we need a better solution so

415
00:19:52,110 --> 00:19:58,928
hopefully

416
00:19:53,950 --> 00:20:01,830
figure something out alright the next

417
00:19:58,929 --> 00:20:04,240
usually big thing managing a firewall

418
00:20:01,830 --> 00:20:06,250
typically your Callie you know whatever

419
00:20:04,240 --> 00:20:08,889
pentest distribution isn't gonna have a

420
00:20:06,250 --> 00:20:12,250
firewall sometimes you don't want to

421
00:20:08,889 --> 00:20:14,529
hack naked right depending on your

422
00:20:12,250 --> 00:20:19,330
environment I mean if you're spinning up

423
00:20:14,529 --> 00:20:20,799
a distribution for say your pen testing

424
00:20:19,330 --> 00:20:22,600
your company's environment you're gonna

425
00:20:20,799 --> 00:20:25,658
have the system up and running for a

426
00:20:22,600 --> 00:20:28,809
while are you just leaving a vulnerable

427
00:20:25,659 --> 00:20:32,350
box on your network you know open

428
00:20:28,809 --> 00:20:36,639
firewall not not the most ideal

429
00:20:32,350 --> 00:20:39,939
situation so I'd highly recommend we

430
00:20:36,639 --> 00:20:42,870
actually use a firewall as a normal

431
00:20:39,940 --> 00:20:46,630
Linux distribution typically would so

432
00:20:42,870 --> 00:20:48,668
kind of similar to what I talked about

433
00:20:46,630 --> 00:20:51,120
before with root privileges there's only

434
00:20:48,669 --> 00:20:54,399
certain attacks that actually require

435
00:20:51,120 --> 00:20:59,918
open ports so actually I think it's

436
00:20:54,399 --> 00:21:00,789
pretty easy to maintain a firewall so

437
00:20:59,919 --> 00:21:04,000
again

438
00:21:00,789 --> 00:21:06,399
does anybody have ideas of what a

439
00:21:04,000 --> 00:21:09,130
typical like pentest attack when would

440
00:21:06,399 --> 00:21:14,340
you need actually need to open app or on

441
00:21:09,130 --> 00:21:17,519
your firewall or shell yep definitely

442
00:21:14,340 --> 00:21:17,519
anything else

443
00:21:21,330 --> 00:21:28,000
possibly yeah if you have some sort of

444
00:21:23,500 --> 00:21:29,789
callback yeah could be fishing these are

445
00:21:28,000 --> 00:21:34,779
what I came up with so poisoning attacks

446
00:21:29,789 --> 00:21:38,289
responder needs to open ports SMB real

447
00:21:34,779 --> 00:21:42,429
Ain is gonna need open ports and as you

448
00:21:38,289 --> 00:21:44,679
said reverse shells that's about it so

449
00:21:42,429 --> 00:21:48,820
that's pretty easy to maintain within a

450
00:21:44,679 --> 00:21:51,250
firewall if you're you know if all you

451
00:21:48,820 --> 00:21:54,549
need is maybe eighty maybe four four

452
00:21:51,250 --> 00:21:56,529
five four four three and whatever you

453
00:21:54,549 --> 00:22:01,299
want to use for reverse shell say four

454
00:21:56,529 --> 00:22:04,990
four four four just open those ports so

455
00:22:01,299 --> 00:22:07,029
for doing that you I pick tables in ufw

456
00:22:04,990 --> 00:22:08,200
those would be the two most common ways

457
00:22:07,029 --> 00:22:10,690
of doing it

458
00:22:08,200 --> 00:22:11,800
I really like using IP tables and a lot

459
00:22:10,690 --> 00:22:13,840
of people don't

460
00:22:11,800 --> 00:22:17,680
this command might look kind of long and

461
00:22:13,840 --> 00:22:19,959
complicated but if you just save this

462
00:22:17,680 --> 00:22:22,620
command have this ready just change the

463
00:22:19,960 --> 00:22:27,130
port each time to what you need to open

464
00:22:22,620 --> 00:22:29,350
it's really easy to run and I really

465
00:22:27,130 --> 00:22:31,990
like that it's not persistent

466
00:22:29,350 --> 00:22:34,120
you know if you're opening a perverse

467
00:22:31,990 --> 00:22:36,610
shell chances are you don't need to

468
00:22:34,120 --> 00:22:40,179
always keep that open it's really nice

469
00:22:36,610 --> 00:22:42,340
to either reload your IP table service

470
00:22:40,180 --> 00:22:45,430
or reboot your system and know you're

471
00:22:42,340 --> 00:22:48,189
kind of starting off fresh again with no

472
00:22:45,430 --> 00:22:49,240
open ports only open them when you need

473
00:22:48,190 --> 00:22:52,540
them

474
00:22:49,240 --> 00:22:54,370
Ubuntu by default will use ufw it's

475
00:22:52,540 --> 00:22:57,340
actually that's super easy to use I do

476
00:22:54,370 --> 00:23:00,790
like ufw keep in mind that it is

477
00:22:57,340 --> 00:23:02,889
persistent so if you allow a port you're

478
00:23:00,790 --> 00:23:05,379
gonna have to deny a port to close it

479
00:23:02,890 --> 00:23:07,300
back again so just keep in mind I think

480
00:23:05,380 --> 00:23:10,390
it's worth knowing what ports you have

481
00:23:07,300 --> 00:23:17,560
open when you have open and keeping them

482
00:23:10,390 --> 00:23:19,960
closed if you're not using them all

483
00:23:17,560 --> 00:23:21,820
right so next thing I want to talk about

484
00:23:19,960 --> 00:23:25,930
is using virtual environments this will

485
00:23:21,820 --> 00:23:27,639
help getting your tools running with if

486
00:23:25,930 --> 00:23:30,190
there's specific dependencies that they

487
00:23:27,640 --> 00:23:32,800
need you know a lot of tools do not play

488
00:23:30,190 --> 00:23:35,020
nice with others unfortunately so in

489
00:23:32,800 --> 00:23:36,610
virtual environments I'm going to talk

490
00:23:35,020 --> 00:23:40,440
about kind of the simplest version of

491
00:23:36,610 --> 00:23:40,439
that for using tools

492
00:23:41,400 --> 00:23:48,670
so there's pythons pip and V I really

493
00:23:46,060 --> 00:23:51,179
like this tool for maintaining Python

494
00:23:48,670 --> 00:23:54,370
virtual environments really easy to use

495
00:23:51,180 --> 00:23:58,570
pip install pipe and V installs

496
00:23:54,370 --> 00:24:00,580
the tool for you pip and V install sets

497
00:23:58,570 --> 00:24:02,919
up your virtual environment so it

498
00:24:00,580 --> 00:24:05,770
installs a Python virtual environment

499
00:24:02,920 --> 00:24:08,080
for you if you need a specific version

500
00:24:05,770 --> 00:24:10,900
of Python maybe you need an old version

501
00:24:08,080 --> 00:24:13,990
for a tool or maybe your system is still

502
00:24:10,900 --> 00:24:17,140
set to Python 2 by default and the tool

503
00:24:13,990 --> 00:24:21,250
needs Python 3 this is a really easy way

504
00:24:17,140 --> 00:24:23,110
to maintain that and then you can enter

505
00:24:21,250 --> 00:24:27,450
that virtual environment with PIP and V

506
00:24:23,110 --> 00:24:32,709
shell and that's pretty much it

507
00:24:27,450 --> 00:24:36,790
similarly with Ruby our VM does the same

508
00:24:32,710 --> 00:24:41,110
sort of thing who here's ever had issues

509
00:24:36,790 --> 00:24:43,540
with our with Ruby dependencies right

510
00:24:41,110 --> 00:24:47,850
definitely definitely an issue our VM I

511
00:24:43,540 --> 00:24:51,159
love solves that one line installation

512
00:24:47,850 --> 00:24:54,669
so I have an example here

513
00:24:51,160 --> 00:24:58,060
getting the Ruby version that Metasploit

514
00:24:54,670 --> 00:25:00,250
requires so if you set that you can just

515
00:24:58,060 --> 00:25:02,500
our VM install that Ruby version for

516
00:25:00,250 --> 00:25:05,590
Metasploit our VM use that really

517
00:25:02,500 --> 00:25:12,310
version and then your Ruby is set up to

518
00:25:05,590 --> 00:25:13,300
run Metasploit properly all right now on

519
00:25:12,310 --> 00:25:16,389
to some of the kind of the cool stuff

520
00:25:13,300 --> 00:25:21,310
the fun stuff customizing your system

521
00:25:16,390 --> 00:25:24,370
making it your own the biggest thing for

522
00:25:21,310 --> 00:25:26,169
this I recommend script everything you

523
00:25:24,370 --> 00:25:29,199
can script your preferences make sure

524
00:25:26,170 --> 00:25:31,840
they're saved you know once you

525
00:25:29,200 --> 00:25:34,630
customize the system it's so easy to

526
00:25:31,840 --> 00:25:36,730
forget what you did how you did it and

527
00:25:34,630 --> 00:25:39,640
get that set up the same way on your

528
00:25:36,730 --> 00:25:43,570
next system you know you could use the

529
00:25:39,640 --> 00:25:45,450
default but I love starting a pen test

530
00:25:43,570 --> 00:25:48,010
with a system that's already configured

531
00:25:45,450 --> 00:25:50,140
the way I want it I know how everything

532
00:25:48,010 --> 00:25:52,470
is set up it's set up just the way I

533
00:25:50,140 --> 00:25:52,470
like it

534
00:25:52,500 --> 00:25:57,160
so to do that setting up your

535
00:25:54,700 --> 00:25:58,720
environment and use dot files and load

536
00:25:57,160 --> 00:26:02,110
your settings that way so here's some

537
00:25:58,720 --> 00:26:05,260
examples the bash RC would be your most

538
00:26:02,110 --> 00:26:08,709
common one for bash dot profile can be

539
00:26:05,260 --> 00:26:11,110
if it talked about that Z shell or see

540
00:26:08,710 --> 00:26:14,980
if you're using Z show which I will get

541
00:26:11,110 --> 00:26:17,560
into a little bit more vim file dot T

542
00:26:14,980 --> 00:26:19,900
MUX kampf I'll talk more about T MUX as

543
00:26:17,560 --> 00:26:24,300
well and dot config are some of the most

544
00:26:19,900 --> 00:26:27,340
common ones if you don't have dot files

545
00:26:24,300 --> 00:26:32,379
that you regularly use and save

546
00:26:27,340 --> 00:26:34,658
somewhere say github here's a link from

547
00:26:32,380 --> 00:26:36,789
github that talked

548
00:26:34,659 --> 00:26:39,190
about using dot file saving down files

549
00:26:36,789 --> 00:26:40,960
and give some great examples I'd highly

550
00:26:39,190 --> 00:26:41,919
recommend going to that and starting to

551
00:26:40,960 --> 00:26:44,259
do that

552
00:26:41,919 --> 00:26:48,399
having your dot file saved and ready to

553
00:26:44,259 --> 00:26:50,499
go to load on to any new system it's

554
00:26:48,399 --> 00:26:55,449
just a huge time-saver and it's it's

555
00:26:50,499 --> 00:26:58,090
great t bux this is one of my favorite

556
00:26:55,450 --> 00:27:01,389
tools for pen testing if you're not

557
00:26:58,090 --> 00:27:03,399
familiar it's a terminal multiplexer so

558
00:27:01,389 --> 00:27:07,840
similar to screen if you've ever used

559
00:27:03,399 --> 00:27:11,469
that keeps your session consistent so if

560
00:27:07,840 --> 00:27:12,759
you're running tools over SSH

561
00:27:11,470 --> 00:27:15,639
you won't lose it if you get

562
00:27:12,759 --> 00:27:19,149
disconnected makes a lot easier for

563
00:27:15,639 --> 00:27:22,178
opening multiple windows running tools

564
00:27:19,149 --> 00:27:23,918
side-by-side highly recommend it it's

565
00:27:22,179 --> 00:27:26,559
fantastic one of my favorite things I

566
00:27:23,919 --> 00:27:29,229
use I use it all the time

567
00:27:26,559 --> 00:27:32,710
it also supports plugins so the one

568
00:27:29,229 --> 00:27:35,499
plug-in that I use the most is T MUX

569
00:27:32,710 --> 00:27:36,399
logging so on a pen test this is

570
00:27:35,499 --> 00:27:39,399
fantastic

571
00:27:36,399 --> 00:27:44,830
logs everything in your shell the way I

572
00:27:39,399 --> 00:27:48,428
do that is in the bash profile file or

573
00:27:44,830 --> 00:27:52,539
whatever environment file for the system

574
00:27:48,429 --> 00:27:56,799
I'm using loads if you add a line to run

575
00:27:52,539 --> 00:27:58,739
this toggle logging the SH script any

576
00:27:56,799 --> 00:28:02,859
new window you create an T MUX

577
00:27:58,739 --> 00:28:05,129
automatically gets logged started

578
00:28:02,859 --> 00:28:07,689
immediately so it makes it really easy

579
00:28:05,129 --> 00:28:10,449
you know you get distracted on pen pass

580
00:28:07,690 --> 00:28:13,359
you're going for da you forget to save a

581
00:28:10,450 --> 00:28:16,539
command it's right there really easy to

582
00:28:13,359 --> 00:28:18,639
to go back to your logs and view it on

583
00:28:16,539 --> 00:28:23,200
the terminal take your screen shot after

584
00:28:18,639 --> 00:28:32,320
the fact T MUX is fantastic when your

585
00:28:23,200 --> 00:28:35,710
pen testing the other tool I want to

586
00:28:32,320 --> 00:28:38,279
talk about is Z shell I was definitely

587
00:28:35,710 --> 00:28:40,960
hesitant to move over to this initially

588
00:28:38,279 --> 00:28:41,639
I've been a Linux user for a long time

589
00:28:40,960 --> 00:28:46,049
very

590
00:28:41,639 --> 00:28:47,668
- I love bash it's great Z show based on

591
00:28:46,049 --> 00:28:50,789
bash so it's gonna be very familiar

592
00:28:47,669 --> 00:28:53,129
nothing's really gonna be different

593
00:28:50,789 --> 00:28:55,200
so don't be afraid to give it a try it

594
00:28:53,129 --> 00:28:58,498
just adds some extra features so adds

595
00:28:55,200 --> 00:29:00,869
path expansion auto-completion spelling

596
00:28:58,499 --> 00:29:03,959
correction i find these are huge time

597
00:29:00,869 --> 00:29:05,759
savers and really intuitive to use I

598
00:29:03,959 --> 00:29:09,809
really didn't have to spend any time

599
00:29:05,759 --> 00:29:13,049
learning Z shell it just kind of happens

600
00:29:09,809 --> 00:29:16,469
automatically I think it's fantastic

601
00:29:13,049 --> 00:29:18,959
oh my Z show is a really cool framework

602
00:29:16,469 --> 00:29:21,709
for getting an initial configuration of

603
00:29:18,959 --> 00:29:24,269
Z show for you up and running it also

604
00:29:21,709 --> 00:29:28,079
does some auto updating so it keeps

605
00:29:24,269 --> 00:29:33,329
everything fresh for you that's also a

606
00:29:28,079 --> 00:29:36,029
really cool tool for using Z show and Z

607
00:29:33,329 --> 00:29:41,700
shells super easy to install on a bun -

608
00:29:36,029 --> 00:29:44,070
it's just app install Z shell so going a

609
00:29:41,700 --> 00:29:47,339
little bit further from that if you are

610
00:29:44,070 --> 00:29:50,129
using these are a little sea shell

611
00:29:47,339 --> 00:29:54,529
specific but if you're sticking with

612
00:29:50,129 --> 00:29:59,779
bash I'd also recommend kind of similar

613
00:29:54,529 --> 00:30:03,059
changes so your font your theme

614
00:29:59,779 --> 00:30:06,209
customizing these really help out I find

615
00:30:03,059 --> 00:30:08,399
I really like using a different font

616
00:30:06,209 --> 00:30:11,399
makes everything a little bit more clear

617
00:30:08,399 --> 00:30:14,728
you know being able to differentiate

618
00:30:11,399 --> 00:30:19,589
between a G and a Q and Alan and I all

619
00:30:14,729 --> 00:30:23,369
that so this is kind of the base of what

620
00:30:19,589 --> 00:30:25,739
I set up I customized a little further

621
00:30:23,369 --> 00:30:27,208
beyond this but this will get you most

622
00:30:25,739 --> 00:30:30,419
of the way to a really nice-looking

623
00:30:27,209 --> 00:30:35,909
terminal something that's really great

624
00:30:30,419 --> 00:30:38,309
to use so the first line there downloads

625
00:30:35,909 --> 00:30:40,649
and installs the oh my Z shell framework

626
00:30:38,309 --> 00:30:43,739
that I just talked about at the second

627
00:30:40,649 --> 00:30:47,958
line installs the power line fonts

628
00:30:43,739 --> 00:30:52,940
you'll need that for most of the themes

629
00:30:47,959 --> 00:30:57,809
that are used within Z shell and then I

630
00:30:52,940 --> 00:31:00,079
really like the power level 9 K theme it

631
00:30:57,809 --> 00:31:02,099
gives you a really nice terminal prompt

632
00:31:00,079 --> 00:31:04,289
gives you some really great base

633
00:31:02,099 --> 00:31:07,229
settings and then then is also easily

634
00:31:04,289 --> 00:31:09,989
customizable if you want to change how

635
00:31:07,229 --> 00:31:12,869
your terminal prompt looks so to set

636
00:31:09,989 --> 00:31:17,789
that theme you just change your Z shell

637
00:31:12,869 --> 00:31:25,799
our C file and set the seashell theme to

638
00:31:17,789 --> 00:31:30,359
power level 9 K so once you've done all

639
00:31:25,799 --> 00:31:33,179
that this is just gives you an idea of

640
00:31:30,359 --> 00:31:34,949
what it will look like so that's the

641
00:31:33,179 --> 00:31:37,919
screen fetch tool that gives you some

642
00:31:34,950 --> 00:31:39,659
information about your distribution you

643
00:31:37,919 --> 00:31:43,499
can kind of see everything's nicely

644
00:31:39,659 --> 00:31:46,289
colorized the terminal prompt indicates

645
00:31:43,499 --> 00:31:48,779
you're at home gives you the time which

646
00:31:46,289 --> 00:31:51,809
can be handy to have available on a pen

647
00:31:48,779 --> 00:31:55,469
test a lot of times I'll modify this to

648
00:31:51,809 --> 00:31:57,418
have an even smaller prompt so if you're

649
00:31:55,469 --> 00:32:01,429
yeah if you have a long command you've

650
00:31:57,419 --> 00:32:04,249
got a screen shot it's nice not having

651
00:32:01,429 --> 00:32:06,690
necessarily your user name and host name

652
00:32:04,249 --> 00:32:13,829
on the terminal prompt itself so I'll

653
00:32:06,690 --> 00:32:16,109
usually get rid of that keeping

654
00:32:13,829 --> 00:32:19,229
everything up to date this is as I've

655
00:32:16,109 --> 00:32:22,439
mentioned a couple times one of the most

656
00:32:19,229 --> 00:32:23,819
important but difficult things to do

657
00:32:22,440 --> 00:32:26,999
you know when you have all these

658
00:32:23,819 --> 00:32:28,589
different tools you know updating

659
00:32:26,999 --> 00:32:31,619
everything individually it would be a

660
00:32:28,589 --> 00:32:34,229
nightmare that's why I love PTF you run

661
00:32:31,619 --> 00:32:36,228
that PTF update all command I'll just

662
00:32:34,229 --> 00:32:38,249
update everything for you

663
00:32:36,229 --> 00:32:41,700
anything that's in there and that's why

664
00:32:38,249 --> 00:32:44,309
I think it's also important if you use

665
00:32:41,700 --> 00:32:46,019
tools that aren't in the PTF framework

666
00:32:44,309 --> 00:32:47,609
to just create your own module it's

667
00:32:46,019 --> 00:32:50,700
worth spending the extra couple minutes

668
00:32:47,609 --> 00:32:53,509
to set that up to keep them maintained

669
00:32:50,700 --> 00:32:56,639
and be able to replicate that install

670
00:32:53,509 --> 00:33:01,319
automate the repository updates so

671
00:32:56,639 --> 00:33:04,199
unlike one-off installations for clients

672
00:33:01,319 --> 00:33:06,809
that typically won't set this up but for

673
00:33:04,200 --> 00:33:09,090
a system that we're going to be using

674
00:33:06,809 --> 00:33:11,310
consistently for pen test

675
00:33:09,090 --> 00:33:14,250
this is nice to kind of set it and

676
00:33:11,310 --> 00:33:17,159
forget it you know I know people worry

677
00:33:14,250 --> 00:33:18,720
about stuff getting broken you can set

678
00:33:17,160 --> 00:33:22,170
it to do the basic at least security

679
00:33:18,720 --> 00:33:24,300
updates I find most of the time I don't

680
00:33:22,170 --> 00:33:27,420
have stuff break you know something does

681
00:33:24,300 --> 00:33:30,540
then it's something to worth looking

682
00:33:27,420 --> 00:33:32,810
into to figure out why so bun too you

683
00:33:30,540 --> 00:33:35,460
can use the package unattended upgrades

684
00:33:32,810 --> 00:33:38,010
to keep your system updated

685
00:33:35,460 --> 00:33:42,210
automatically fedora there's a package

686
00:33:38,010 --> 00:33:44,129
DNF automatic for doing that virtual

687
00:33:42,210 --> 00:33:47,310
installations would be the only other

688
00:33:44,130 --> 00:33:49,950
thing that typically kind of gets left

689
00:33:47,310 --> 00:33:52,470
not being updated just keep those in

690
00:33:49,950 --> 00:33:54,120
mind typically if we're using a virtual

691
00:33:52,470 --> 00:33:56,040
installation it's probably because we

692
00:33:54,120 --> 00:33:57,479
need a specific version of something and

693
00:33:56,040 --> 00:34:00,540
so it's something we're not going to

694
00:33:57,480 --> 00:34:05,610
update but something to just kind of

695
00:34:00,540 --> 00:34:08,969
keep in mind cool and that's all I have

696
00:34:05,610 --> 00:34:10,679
so yeah I'll post where the slides will

697
00:34:08,969 --> 00:34:13,138
be at on my Twitter if you want to give

698
00:34:10,679 --> 00:34:17,030
me a follow I have my pen test setup

699
00:34:13,139 --> 00:34:19,620
script on my github and I'll do a

700
00:34:17,030 --> 00:34:22,679
write-up I'm sure at some point on our

701
00:34:19,620 --> 00:34:27,359
blog so you'll be able to find it at lmg

702
00:34:22,679 --> 00:34:29,990
securacom slash blog alright any

703
00:34:27,360 --> 00:34:29,990
questions

704
00:34:31,330 --> 00:34:34,449
[Applause]

705
00:34:36,090 --> 00:35:01,960
yeah okay gotcha

706
00:34:57,610 --> 00:35:07,900
I mean so the question is is instead of

707
00:35:01,960 --> 00:35:09,880
just opening access to port say 443 to

708
00:35:07,900 --> 00:35:11,110
set a firewall rule such you open up a

709
00:35:09,880 --> 00:35:14,440
higher-level port that then just

710
00:35:11,110 --> 00:35:16,120
redirects to 443 instead yeah you could

711
00:35:14,440 --> 00:35:19,270
definitely do it that way

712
00:35:16,120 --> 00:35:23,470
I don't I mean just kind of for ease of

713
00:35:19,270 --> 00:35:27,400
use just to keep it uncomplicated that'd

714
00:35:23,470 --> 00:35:30,060
be the only reason yeah anybody else

715
00:35:27,400 --> 00:35:30,060
yeah

716
00:35:41,590 --> 00:35:44,720
yeah

717
00:35:42,890 --> 00:35:46,310
so these are machines that were pen

718
00:35:44,720 --> 00:35:50,000
testing with so these would be our

719
00:35:46,310 --> 00:35:52,520
systems you know but when we're doing an

720
00:35:50,000 --> 00:35:55,010
internal pen test you know if it's not a

721
00:35:52,520 --> 00:35:56,630
Ren team engagement typically the you

722
00:35:55,010 --> 00:35:59,440
know we're gonna start from a position

723
00:35:56,630 --> 00:36:02,120
of already being on the clients Network

724
00:35:59,440 --> 00:36:04,640
we have done pen tests where the client

725
00:36:02,120 --> 00:36:06,710
wants us to kind of start on their

726
00:36:04,640 --> 00:36:09,140
system and see if we can you know escape

727
00:36:06,710 --> 00:36:11,120
out of their sandbox system and so

728
00:36:09,140 --> 00:36:14,480
install tools so that be a method but

729
00:36:11,120 --> 00:36:17,779
most commonly we're gonna be having them

730
00:36:14,480 --> 00:36:20,510
load up our system on their network so

731
00:36:17,780 --> 00:36:22,670
from the perspective of a malicious

732
00:36:20,510 --> 00:36:26,840
insider who can or somebody that can

733
00:36:22,670 --> 00:36:29,270
plug a box in so yeah it would be our

734
00:36:26,840 --> 00:36:36,800
system fully under our control just on

735
00:36:29,270 --> 00:36:39,220
their network well anybody else all

736
00:36:36,800 --> 00:36:39,220
right thank you

