1
00:00:03,859 --> 00:00:08,969
all righty so thank you for coming to my

2
00:00:06,540 --> 00:00:11,280
talk today my name is Spencer Haywood

3
00:00:08,970 --> 00:00:14,670
and today I'll be sharing some ways I've

4
00:00:11,280 --> 00:00:16,919
been using docker to augment my security

5
00:00:14,670 --> 00:00:18,270
role for those of you who don't know I

6
00:00:16,920 --> 00:00:20,029
work at the U taja keishon and

7
00:00:18,270 --> 00:00:23,400
telehealth network as a security analyst

8
00:00:20,029 --> 00:00:25,410
I hope to share some ideas on how docker

9
00:00:23,400 --> 00:00:29,759
can be a great tool in your tool set

10
00:00:25,410 --> 00:00:32,070
especially for security workflows today

11
00:00:29,760 --> 00:00:34,020
I'll be sharing some ways that you can

12
00:00:32,070 --> 00:00:38,399
integrate docker in with your shell

13
00:00:34,020 --> 00:00:40,980
specifically so on UNIX specifically

14
00:00:38,399 --> 00:00:42,719
I'll be going over the bash shell and

15
00:00:40,980 --> 00:00:46,440
the fish shell because fish is what I

16
00:00:42,719 --> 00:00:48,600
use is my daily driver for my shell as

17
00:00:46,440 --> 00:00:50,370
noted on the first slide please check

18
00:00:48,600 --> 00:00:54,510
out the slideshow and the links for your

19
00:00:50,370 --> 00:00:59,370
own reference at HTTP Heywood LH - st.

20
00:00:54,510 --> 00:01:00,629
Conn 2019 dotnet Lafitte comm another

21
00:00:59,370 --> 00:01:03,269
objective that I hope to accomplish

22
00:01:00,629 --> 00:01:05,700
during this presentation is I hope to

23
00:01:03,270 --> 00:01:08,040
also shed some light on the potential

24
00:01:05,700 --> 00:01:09,990
risks with using docker as well we're

25
00:01:08,040 --> 00:01:11,580
going to be going over a lot about how

26
00:01:09,990 --> 00:01:13,920
to weaponize docker quickly and

27
00:01:11,580 --> 00:01:16,740
efficiently for me as a security analyst

28
00:01:13,920 --> 00:01:18,659
that's a great tool but in the hands of

29
00:01:16,740 --> 00:01:21,479
a malicious user docker can be

30
00:01:18,659 --> 00:01:22,950
weaponized super quickly so hopefully by

31
00:01:21,479 --> 00:01:24,780
the end of this talk you have some ideas

32
00:01:22,950 --> 00:01:26,490
on how you could use docker to augment

33
00:01:24,780 --> 00:01:28,259
your own security workflows but also

34
00:01:26,490 --> 00:01:33,060
some things to look out for while using

35
00:01:28,259 --> 00:01:35,670
docker to give a little bit more of a

36
00:01:33,060 --> 00:01:37,290
background from of myself again I'm a

37
00:01:35,670 --> 00:01:38,970
security analyst a senior security

38
00:01:37,290 --> 00:01:40,920
analyst at the Utah Education and

39
00:01:38,970 --> 00:01:43,170
telehealth network been there for about

40
00:01:40,920 --> 00:01:45,600
two years my background is in Linux

41
00:01:43,170 --> 00:01:46,979
systems administration and I really

42
00:01:45,600 --> 00:01:50,100
enjoy learning how to use open source

43
00:01:46,979 --> 00:01:53,729
tools to greatly improve my own life and

44
00:01:50,100 --> 00:01:56,339
also my career professionally I've been

45
00:01:53,729 --> 00:01:58,500
using doctor for about four years now

46
00:01:56,340 --> 00:02:00,540
but throughout that time I would say

47
00:01:58,500 --> 00:02:02,430
I've only maybe spent about two years

48
00:02:00,540 --> 00:02:05,100
actually learning how it works and

49
00:02:02,430 --> 00:02:08,009
getting used to all of the jargon and

50
00:02:05,100 --> 00:02:10,169
things that come along with it so one of

51
00:02:08,008 --> 00:02:12,319
my objectives today is for those who

52
00:02:10,169 --> 00:02:13,839
aren't super familiar with docker to

53
00:02:12,319 --> 00:02:16,869
distill some of the

54
00:02:13,840 --> 00:02:19,360
basic concepts behind what docker is

55
00:02:16,870 --> 00:02:21,519
what a container is and then move

56
00:02:19,360 --> 00:02:23,230
eventually over into how you can use it

57
00:02:21,519 --> 00:02:28,209
to augment your red team security

58
00:02:23,230 --> 00:02:29,619
workflows as the title of my

59
00:02:28,209 --> 00:02:31,239
presentation suggests I'll be talking

60
00:02:29,620 --> 00:02:31,900
about using your shell in conjunction

61
00:02:31,239 --> 00:02:34,299
with this

62
00:02:31,900 --> 00:02:34,989
so again relevant disclaimer I use fish

63
00:02:34,299 --> 00:02:36,910
as my shell

64
00:02:34,989 --> 00:02:39,099
but since bash is most common on most

65
00:02:36,910 --> 00:02:41,950
UNIX systems I'm going to be covering

66
00:02:39,099 --> 00:02:43,750
bash as my main focus and unfortunately

67
00:02:41,950 --> 00:02:46,480
for Windows users you could do a lot of

68
00:02:43,750 --> 00:02:48,250
the same stuff in PowerShell I just I

69
00:02:46,480 --> 00:02:50,768
don't use Windows so I haven't taken the

70
00:02:48,250 --> 00:02:52,540
time to do the work to make this work on

71
00:02:50,769 --> 00:02:57,519
Windows but I know you can do the same

72
00:02:52,540 --> 00:03:00,040
thing so first we'll get into what

73
00:02:57,519 --> 00:03:01,989
docker is docker is a cross-platform

74
00:03:00,040 --> 00:03:04,480
container service that can run Linux and

75
00:03:01,989 --> 00:03:06,730
windows applications docker used this OS

76
00:03:04,480 --> 00:03:08,709
level virtualization and docker

77
00:03:06,730 --> 00:03:11,230
containers utilize a single operating

78
00:03:08,709 --> 00:03:13,450
system kernel this means that a docker

79
00:03:11,230 --> 00:03:15,480
container is typically more resource

80
00:03:13,450 --> 00:03:18,040
efficient than using a virtual machine

81
00:03:15,480 --> 00:03:19,540
another thing to note is that if you're

82
00:03:18,040 --> 00:03:21,760
going to use Windows docker containers

83
00:03:19,540 --> 00:03:24,340
those only run on Windows from what I

84
00:03:21,760 --> 00:03:26,560
understand docker leverages some hyper-v

85
00:03:24,340 --> 00:03:28,840
magic so if you want to run Windows

86
00:03:26,560 --> 00:03:32,500
containers on Linux or Mac OS it's not

87
00:03:28,840 --> 00:03:34,450
going to be possible now what exactly is

88
00:03:32,500 --> 00:03:36,160
a container so I've said the word

89
00:03:34,450 --> 00:03:37,540
container a few times so I think it's

90
00:03:36,160 --> 00:03:40,239
good to define it so that way we're all

91
00:03:37,540 --> 00:03:42,040
in the same common ground so a container

92
00:03:40,239 --> 00:03:45,220
is a very tiny machine with a

93
00:03:42,040 --> 00:03:47,980
prepackaged piece of software so I often

94
00:03:45,220 --> 00:03:50,919
compare them to very very small virtual

95
00:03:47,980 --> 00:03:52,750
machines on Linux containers are

96
00:03:50,919 --> 00:03:55,030
possible due to a functionality of the

97
00:03:52,750 --> 00:03:57,569
Linux kernel called cgroups which was

98
00:03:55,030 --> 00:04:00,430
mainlined into the linux kernel in 2007

99
00:03:57,569 --> 00:04:02,950
cgroups allow associated or allow

100
00:04:00,430 --> 00:04:06,790
multiple isolated Linux systems to exist

101
00:04:02,950 --> 00:04:08,349
on a single control host and cgroups are

102
00:04:06,790 --> 00:04:10,840
also in charge of negotiating research

103
00:04:08,349 --> 00:04:13,298
resource usage and assignments between

104
00:04:10,840 --> 00:04:15,250
those containers a comparable function

105
00:04:13,299 --> 00:04:17,200
exists on Windows called Java objects

106
00:04:15,250 --> 00:04:18,970
which I believe if I was doing my

107
00:04:17,200 --> 00:04:21,728
research right I believe Java objects

108
00:04:18,970 --> 00:04:25,419
were introduced in 2014 and I believe it

109
00:04:21,728 --> 00:04:28,419
was for containers and that kind of

110
00:04:25,419 --> 00:04:31,390
workflow to exist on Windows

111
00:04:28,420 --> 00:04:34,480
unfortunately Mac OS does not have any

112
00:04:31,390 --> 00:04:36,640
sort of C group like functionality so if

113
00:04:34,480 --> 00:04:40,030
you run a if you want to run docker on

114
00:04:36,640 --> 00:04:42,700
Mac OS you can but it installs a Linux

115
00:04:40,030 --> 00:04:45,250
virtual machine that allows you to mean

116
00:04:42,700 --> 00:04:47,979
have that C group functionality in the

117
00:04:45,250 --> 00:04:50,890
background that being said though I use

118
00:04:47,980 --> 00:04:54,100
Mac OS for my position every day and I

119
00:04:50,890 --> 00:04:56,560
have not seen any significant

120
00:04:54,100 --> 00:05:01,780
performance issues or latency caused by

121
00:04:56,560 --> 00:05:03,130
that virtual machine so docker isn't the

122
00:05:01,780 --> 00:05:04,869
only container technology that's

123
00:05:03,130 --> 00:05:07,780
available I think that's good to go over

124
00:05:04,870 --> 00:05:09,880
as well docker actually leverages a

125
00:05:07,780 --> 00:05:11,830
container runtime called container D on

126
00:05:09,880 --> 00:05:13,950
Linux which was actually developed with

127
00:05:11,830 --> 00:05:16,479
docker containers and kubernetes in mind

128
00:05:13,950 --> 00:05:20,770
nowadays you can actually use container

129
00:05:16,480 --> 00:05:23,590
D without needing to use docker but

130
00:05:20,770 --> 00:05:26,440
there are also some others there's LX C

131
00:05:23,590 --> 00:05:29,440
which stands for Linux containers that

132
00:05:26,440 --> 00:05:31,000
is actually present on Chromebooks so if

133
00:05:29,440 --> 00:05:33,070
you have a new ish Chromebook and you

134
00:05:31,000 --> 00:05:35,560
run the Linux apps functionality that's

135
00:05:33,070 --> 00:05:39,490
made possible through LX e and Linux

136
00:05:35,560 --> 00:05:42,010
containers BSD has also had containers

137
00:05:39,490 --> 00:05:44,650
for a very long time since the year 2000

138
00:05:42,010 --> 00:05:46,630
they introduced jails so from what I

139
00:05:44,650 --> 00:05:48,729
understand I think BSD was the first one

140
00:05:46,630 --> 00:05:53,980
to ever start using containers and that

141
00:05:48,730 --> 00:05:56,950
type of functionality so the primary

142
00:05:53,980 --> 00:05:57,760
reason that I use docker is because it's

143
00:05:56,950 --> 00:06:00,250
cross-platform

144
00:05:57,760 --> 00:06:03,070
you can have these workflows exist

145
00:06:00,250 --> 00:06:05,890
between Windows Mac or s or Linux

146
00:06:03,070 --> 00:06:09,550
although the docker daemon on Windows is

147
00:06:05,890 --> 00:06:13,030
a little bit different than on Linux or

148
00:06:09,550 --> 00:06:14,740
Mac it again all of the same workflows

149
00:06:13,030 --> 00:06:16,869
that I'm about to share today can exist

150
00:06:14,740 --> 00:06:20,650
on Windows I just haven't tested it

151
00:06:16,870 --> 00:06:22,270
myself so the reason I prefer to be

152
00:06:20,650 --> 00:06:23,950
cross-platform is because I use Linux

153
00:06:22,270 --> 00:06:25,719
and Mac OS it's nice to be able to just

154
00:06:23,950 --> 00:06:27,370
move between platforms and have the same

155
00:06:25,720 --> 00:06:31,000
types of applications available and

156
00:06:27,370 --> 00:06:32,980
workflows available docker is also

157
00:06:31,000 --> 00:06:35,289
really popular so it makes it really

158
00:06:32,980 --> 00:06:39,190
easy to find support and also

159
00:06:35,289 --> 00:06:41,110
applications available on docker hub the

160
00:06:39,190 --> 00:06:44,350
doctor documentation is also very

161
00:06:41,110 --> 00:06:46,240
well developed and readable however I do

162
00:06:44,350 --> 00:06:47,830
have to admit that in order for the

163
00:06:46,240 --> 00:06:49,960
docker documentation actually be useful

164
00:06:47,830 --> 00:06:53,080
you kind of have to understand the

165
00:06:49,960 --> 00:06:55,930
jargon and a lot of the ecosystem before

166
00:06:53,080 --> 00:06:58,359
you get into the the documentation

167
00:06:55,930 --> 00:07:00,730
itself so hopefully by the end of this

168
00:06:58,360 --> 00:07:03,900
presentation you'll have a lot of that

169
00:07:00,730 --> 00:07:06,190
jargon understood if you didn't already

170
00:07:03,900 --> 00:07:07,840
finally another big win for me is that

171
00:07:06,190 --> 00:07:11,440
you can use docker for free and it's

172
00:07:07,840 --> 00:07:13,630
open source to clarify a docker

173
00:07:11,440 --> 00:07:15,130
enterprise is not free and open source

174
00:07:13,630 --> 00:07:18,820
that's a paid service that's offered by

175
00:07:15,130 --> 00:07:21,430
docker itself but the core engine

176
00:07:18,820 --> 00:07:23,820
powering the docker Community Edition

177
00:07:21,430 --> 00:07:25,990
and the Enterprise Edition are the same

178
00:07:23,820 --> 00:07:27,280
some of the features that come with the

179
00:07:25,990 --> 00:07:29,560
Enterprise Edition are things like

180
00:07:27,280 --> 00:07:32,409
vulnerability scanning same-day doctor

181
00:07:29,560 --> 00:07:33,820
support but overall the same core

182
00:07:32,410 --> 00:07:35,560
functionality is present in the

183
00:07:33,820 --> 00:07:38,290
community edition versus the Enterprise

184
00:07:35,560 --> 00:07:41,020
Edition so don't shy away from using the

185
00:07:38,290 --> 00:07:42,400
docker community edition because it's

186
00:07:41,020 --> 00:07:44,620
labeled community it's definitely

187
00:07:42,400 --> 00:07:46,570
enterprise radiant and in production by

188
00:07:44,620 --> 00:07:50,500
lots of different companies that are out

189
00:07:46,570 --> 00:07:54,880
there so now let's take a look at a

190
00:07:50,500 --> 00:07:56,740
docker file so a docker file is the file

191
00:07:54,880 --> 00:07:59,469
that contains the build instructions for

192
00:07:56,740 --> 00:08:01,960
a docker image so these are all of the

193
00:07:59,470 --> 00:08:05,170
commands that will be run when you build

194
00:08:01,960 --> 00:08:07,030
a docker image so as a result looking at

195
00:08:05,170 --> 00:08:08,890
the docker file of a container tells you

196
00:08:07,030 --> 00:08:13,869
a lot about what that container is for

197
00:08:08,890 --> 00:08:15,580
how its provisioned and so on so some of

198
00:08:13,870 --> 00:08:17,080
the base if if we look at the front

199
00:08:15,580 --> 00:08:19,830
there at the beginning of this docker

200
00:08:17,080 --> 00:08:23,200
file we see we can see this from Ubuntu

201
00:08:19,830 --> 00:08:24,849
statement and that states that we will

202
00:08:23,200 --> 00:08:27,310
be using the official docker image

203
00:08:24,850 --> 00:08:30,310
ubuntu docker image as the base image

204
00:08:27,310 --> 00:08:32,799
for this newly created image that we'll

205
00:08:30,310 --> 00:08:35,470
be running and then you see the next

206
00:08:32,799 --> 00:08:38,140
command the run apt update and app to

207
00:08:35,470 --> 00:08:40,510
install telnet or netcat we're just

208
00:08:38,140 --> 00:08:43,419
telling the container to install telnet

209
00:08:40,510 --> 00:08:45,670
or netcat and then finally the CMD bin

210
00:08:43,419 --> 00:08:47,650
bash that tells us what the default

211
00:08:45,670 --> 00:08:50,650
command will be within the docker

212
00:08:47,650 --> 00:08:53,020
container itself so this kind of

213
00:08:50,650 --> 00:08:54,220
workflow would be really useful if you

214
00:08:53,020 --> 00:08:58,990
wanted to

215
00:08:54,220 --> 00:09:01,420
telnet or netcat 4 at a time so like

216
00:08:58,990 --> 00:09:02,800
kind of an ad-hoc container creation run

217
00:09:01,420 --> 00:09:05,170
telnet and then the container could

218
00:09:02,800 --> 00:09:07,240
destroy itself and not exist anymore

219
00:09:05,170 --> 00:09:09,160
until you need it to run again to run

220
00:09:07,240 --> 00:09:11,019
those single commands that would be kind

221
00:09:09,160 --> 00:09:16,750
of the workflow behind this type of

222
00:09:11,019 --> 00:09:19,779
docker file so before getting into

223
00:09:16,750 --> 00:09:21,610
docker for security I think it I think

224
00:09:19,779 --> 00:09:25,569
it's a good idea to understand a little

225
00:09:21,610 --> 00:09:27,759
bit of the commands behind it so if you

226
00:09:25,569 --> 00:09:29,439
look here we have the docker pull

227
00:09:27,759 --> 00:09:32,589
command this will pull down a docker

228
00:09:29,439 --> 00:09:34,599
image for you and then the docker run

229
00:09:32,589 --> 00:09:36,069
command will if you don't have that

230
00:09:34,600 --> 00:09:37,959
image pulled down already it will pull

231
00:09:36,069 --> 00:09:40,060
it down for you and then it will run

232
00:09:37,959 --> 00:09:42,670
whatever command you tell it to next so

233
00:09:40,060 --> 00:09:44,829
in this example we're running docker run

234
00:09:42,670 --> 00:09:47,050
and it will echo hello world that will

235
00:09:44,829 --> 00:09:49,839
be the command it runs once the

236
00:09:47,050 --> 00:09:52,060
container is provisioned in the next

237
00:09:49,839 --> 00:09:54,250
command we see that we're running an

238
00:09:52,060 --> 00:09:56,589
ubuntu container again but this time

239
00:09:54,250 --> 00:09:59,560
we're gonna try to get an interactive

240
00:09:56,589 --> 00:10:02,920
show using bash on the container itself

241
00:09:59,560 --> 00:10:04,839
and once you exit out of that shell the

242
00:10:02,920 --> 00:10:09,189
container will destroy itself with the -

243
00:10:04,839 --> 00:10:10,870
- RM flag then here are some other basic

244
00:10:09,189 --> 00:10:13,449
commands as well such as docker PS

245
00:10:10,870 --> 00:10:15,189
Felicio running containers docker

246
00:10:13,449 --> 00:10:18,639
stopped to stop your container and

247
00:10:15,189 --> 00:10:21,189
docker RM to remove the container that

248
00:10:18,639 --> 00:10:22,449
you have stopped and then finally if a

249
00:10:21,189 --> 00:10:24,699
container is stopped and you want to

250
00:10:22,449 --> 00:10:29,229
start it you can just do docker start

251
00:10:24,699 --> 00:10:30,670
container ID so again before getting

252
00:10:29,230 --> 00:10:33,130
into the security portion I think it's

253
00:10:30,670 --> 00:10:35,139
good to understand the design principles

254
00:10:33,130 --> 00:10:37,389
behind docker so that way you can know

255
00:10:35,139 --> 00:10:40,089
what docker is good for and what it's

256
00:10:37,389 --> 00:10:41,529
not good for because I know for me

257
00:10:40,089 --> 00:10:42,970
especially when I started first getting

258
00:10:41,529 --> 00:10:44,949
into this technology I just wanted to

259
00:10:42,970 --> 00:10:47,019
use docker for everything and while I

260
00:10:44,949 --> 00:10:49,660
think it can be used for a lot there are

261
00:10:47,019 --> 00:10:51,490
times where a something else should be

262
00:10:49,660 --> 00:10:54,959
used such as a virtual machine or maybe

263
00:10:51,490 --> 00:10:54,959
not any virtualization at all

264
00:10:57,590 --> 00:11:02,060
so first docker containers are meant to

265
00:10:59,570 --> 00:11:03,830
be super minimal typically the

266
00:11:02,060 --> 00:11:05,689
underlying operating system within the

267
00:11:03,830 --> 00:11:07,670
container is very small in relation to

268
00:11:05,690 --> 00:11:10,370
the axial storage space it consumes on

269
00:11:07,670 --> 00:11:12,199
the host for example a common Linux

270
00:11:10,370 --> 00:11:15,100
operating system used in containers is

271
00:11:12,200 --> 00:11:17,870
called Alpine Linux and the 64-bit

272
00:11:15,100 --> 00:11:20,690
64-bit version of Alpine Linux meant for

273
00:11:17,870 --> 00:11:23,360
use in containers is a 2.6 megabyte

274
00:11:20,690 --> 00:11:25,250
download I checked that yesterday and if

275
00:11:23,360 --> 00:11:28,640
you go to download Alpine Linux the

276
00:11:25,250 --> 00:11:30,800
container run time again 2.6 megabyte

277
00:11:28,640 --> 00:11:32,930
tar.gz file it's a really small

278
00:11:30,800 --> 00:11:35,390
operating system as a result you have a

279
00:11:32,930 --> 00:11:38,060
really small footprint and lots of

280
00:11:35,390 --> 00:11:39,890
resource that's not dedicated to the

281
00:11:38,060 --> 00:11:42,369
operating system on the container but

282
00:11:39,890 --> 00:11:45,589
actually whatever application you need

283
00:11:42,370 --> 00:11:47,360
being so small containers often lack

284
00:11:45,589 --> 00:11:49,370
applications and system tools that are

285
00:11:47,360 --> 00:11:51,500
most often present in a typical Linux

286
00:11:49,370 --> 00:11:53,930
environment containers often only

287
00:11:51,500 --> 00:11:55,580
provide the most basic tools specific to

288
00:11:53,930 --> 00:11:57,050
their function such as network

289
00:11:55,580 --> 00:11:59,779
functionality a package manager and

290
00:11:57,050 --> 00:12:01,370
other very basic network tools so if

291
00:11:59,779 --> 00:12:02,570
you're tempted to bootstrap a tool atop

292
00:12:01,370 --> 00:12:04,430
on top of a container

293
00:12:02,570 --> 00:12:07,510
you probably shouldn't or you should

294
00:12:04,430 --> 00:12:10,370
make your own container image yourself I

295
00:12:07,510 --> 00:12:12,380
found that when I when I find that a

296
00:12:10,370 --> 00:12:14,630
docker container application that I want

297
00:12:12,380 --> 00:12:16,310
to use doesn't have an application

298
00:12:14,630 --> 00:12:17,839
sometimes I've been tempted to do this

299
00:12:16,310 --> 00:12:20,000
as well so I'm talking from experience

300
00:12:17,839 --> 00:12:21,380
if you want to throw something on top of

301
00:12:20,000 --> 00:12:23,960
the docker container you probably

302
00:12:21,380 --> 00:12:25,310
shouldn't make your own image it kind of

303
00:12:23,960 --> 00:12:28,730
defeats the purpose of the design

304
00:12:25,310 --> 00:12:30,650
principles behind this with the minimal

305
00:12:28,730 --> 00:12:33,650
nature of containers in mind they are

306
00:12:30,650 --> 00:12:35,089
typically built for a single purpose so

307
00:12:33,650 --> 00:12:36,860
typically they have a single piece of

308
00:12:35,089 --> 00:12:38,990
software that accomplishes a single task

309
00:12:36,860 --> 00:12:41,060
if you have an application that requires

310
00:12:38,990 --> 00:12:43,430
a stack of software to run such as a web

311
00:12:41,060 --> 00:12:46,010
application it is often most common for

312
00:12:43,430 --> 00:12:47,839
each piece of software to be running in

313
00:12:46,010 --> 00:12:50,270
separate containers that get linked

314
00:12:47,839 --> 00:12:52,220
together so as an example we could look

315
00:12:50,270 --> 00:12:54,410
at a web application a web application

316
00:12:52,220 --> 00:12:56,720
typically requires database

317
00:12:54,410 --> 00:12:59,510
functionality which isn't necessarily

318
00:12:56,720 --> 00:13:03,080
exclusive to the web application so as a

319
00:12:59,510 --> 00:13:05,510
result for a web application let's say

320
00:13:03,080 --> 00:13:07,280
WordPress or Joomla often you will have

321
00:13:05,510 --> 00:13:09,990
a separate container created for the

322
00:13:07,280 --> 00:13:11,670
database and then another separate

323
00:13:09,990 --> 00:13:13,589
container that links to that database

324
00:13:11,670 --> 00:13:15,599
that actually runs your web application

325
00:13:13,589 --> 00:13:18,270
hopefully that makes sense but I think

326
00:13:15,600 --> 00:13:19,860
that illustrates the point of why it's

327
00:13:18,270 --> 00:13:22,050
important to keep things modular and

328
00:13:19,860 --> 00:13:24,240
docker because you can reuse database

329
00:13:22,050 --> 00:13:28,439
containers wherever you need to based on

330
00:13:24,240 --> 00:13:30,270
your application while that may not be a

331
00:13:28,440 --> 00:13:32,130
specific feature we care as much about

332
00:13:30,270 --> 00:13:34,730
insecurity I think it's still good to go

333
00:13:32,130 --> 00:13:34,730
over

334
00:13:35,029 --> 00:13:40,260
so next running applications and

335
00:13:38,310 --> 00:13:42,599
containers provides a layer of security

336
00:13:40,260 --> 00:13:44,910
as the containers have their own kernel

337
00:13:42,600 --> 00:13:46,560
processes and isolated environment they

338
00:13:44,910 --> 00:13:48,329
can protect the host running docker and

339
00:13:46,560 --> 00:13:51,779
other containers from getting exploited

340
00:13:48,330 --> 00:13:54,300
should a container get compromised and

341
00:13:51,779 --> 00:13:56,640
by default containers are completely

342
00:13:54,300 --> 00:13:59,699
isolated and cannot be communicated with

343
00:13:56,640 --> 00:14:00,870
unless you explicitly explicitly specify

344
00:13:59,700 --> 00:14:03,270
them to be accessible from other

345
00:14:00,870 --> 00:14:05,190
machines so again if you spin up a

346
00:14:03,270 --> 00:14:07,410
docker container and you don't expose

347
00:14:05,190 --> 00:14:08,940
any ports any networking in within that

348
00:14:07,410 --> 00:14:10,439
container you won't be able to

349
00:14:08,940 --> 00:14:12,930
communicate with that container except

350
00:14:10,440 --> 00:14:15,149
through the dr. Damon so again once you

351
00:14:12,930 --> 00:14:18,120
create a container it's totally isolated

352
00:14:15,149 --> 00:14:19,860
from whatever resources or it's totally

353
00:14:18,120 --> 00:14:24,149
isolated unless you specify what

354
00:14:19,860 --> 00:14:25,890
resources it should be able to access so

355
00:14:24,149 --> 00:14:27,480
with some understanding of dr.

356
00:14:25,890 --> 00:14:29,130
principles I think it's time to start

357
00:14:27,480 --> 00:14:32,700
going into docker for security since

358
00:14:29,130 --> 00:14:35,010
that's what this talk is about one of

359
00:14:32,700 --> 00:14:36,959
the ways that I've been using docker for

360
00:14:35,010 --> 00:14:38,880
my security workflows is by running my

361
00:14:36,959 --> 00:14:40,529
security tools and docker containers

362
00:14:38,880 --> 00:14:42,870
rather than installing them on my

363
00:14:40,529 --> 00:14:45,000
machines some of the tools that I have

364
00:14:42,870 --> 00:14:48,600
started running in docker are nmap

365
00:14:45,000 --> 00:14:52,440
Metasploit Derb which is short for dirt

366
00:14:48,600 --> 00:14:54,390
buster Hydra and G script my primary

367
00:14:52,440 --> 00:14:56,279
reason for doing this is because it

368
00:14:54,390 --> 00:14:58,740
allows my security workflows to be

369
00:14:56,279 --> 00:15:00,810
totally portable between machines all I

370
00:14:58,740 --> 00:15:03,209
have to do is install docker on my new

371
00:15:00,810 --> 00:15:05,459
machine and then configure my shell to

372
00:15:03,209 --> 00:15:07,709
begin using those tools this allows for

373
00:15:05,459 --> 00:15:10,529
docker to behave almost behave like my

374
00:15:07,709 --> 00:15:12,329
past a package manager traditionally

375
00:15:10,529 --> 00:15:15,660
before I started doing this I would use

376
00:15:12,329 --> 00:15:17,609
a Kali BM which I think most people do

377
00:15:15,660 --> 00:15:19,469
there's nothing wrong with a VM but what

378
00:15:17,610 --> 00:15:21,690
I found is that it's kind of a

379
00:15:19,470 --> 00:15:23,670
cumbersome task too especially if you

380
00:15:21,690 --> 00:15:25,830
just want to run a simple tool very

381
00:15:23,670 --> 00:15:28,050
quickly within Cali it's kind of

382
00:15:25,830 --> 00:15:30,690
cumbersome to have to power on the VM

383
00:15:28,050 --> 00:15:32,370
wait for it to boot up login and then

384
00:15:30,690 --> 00:15:34,290
run it run whatever you need only to

385
00:15:32,370 --> 00:15:37,950
power it off again unless you leave your

386
00:15:34,290 --> 00:15:39,870
VM in a permanently suspended state so

387
00:15:37,950 --> 00:15:42,150
docker kind of supplements that for me

388
00:15:39,870 --> 00:15:44,250
it's it gives me my ability to just run

389
00:15:42,150 --> 00:15:46,230
commands super quick in another

390
00:15:44,250 --> 00:15:50,880
environment and then have that by our

391
00:15:46,230 --> 00:15:53,040
environment destroy itself so running

392
00:15:50,880 --> 00:15:54,950
your security tools in docker also keeps

393
00:15:53,040 --> 00:15:57,480
your tools isolated from your machine

394
00:15:54,950 --> 00:15:59,070
many security tools aren't necessarily

395
00:15:57,480 --> 00:16:01,350
built using the best development

396
00:15:59,070 --> 00:16:04,620
practices and they're often just meant

397
00:16:01,350 --> 00:16:07,050
to get the job done I know that I've

398
00:16:04,620 --> 00:16:08,820
written my own security tools that they

399
00:16:07,050 --> 00:16:11,280
get the job done and then I don't take

400
00:16:08,820 --> 00:16:13,740
too much time worrying about development

401
00:16:11,280 --> 00:16:15,750
best practices so likewise there are

402
00:16:13,740 --> 00:16:18,120
lots of other security tools that aren't

403
00:16:15,750 --> 00:16:20,070
necessarily following best practices so

404
00:16:18,120 --> 00:16:21,570
it it's probably not best for you to

405
00:16:20,070 --> 00:16:26,700
install them on your daily driver if you

406
00:16:21,570 --> 00:16:28,350
don't have to so finally docker

407
00:16:26,700 --> 00:16:30,720
containers typically use less resources

408
00:16:28,350 --> 00:16:34,470
than a virtual machine and that's due to

409
00:16:30,720 --> 00:16:36,000
the single kernel operating I think

410
00:16:34,470 --> 00:16:38,580
that's what the term that they they

411
00:16:36,000 --> 00:16:41,400
phrased but anyway because it's so

412
00:16:38,580 --> 00:16:44,160
minimal docker containers will consume a

413
00:16:41,400 --> 00:16:47,130
lot less disk space ram consumption cpu

414
00:16:44,160 --> 00:16:49,890
typically income in comparison to a

415
00:16:47,130 --> 00:16:52,170
virtual machine especially Kali Kali

416
00:16:49,890 --> 00:16:54,530
isn't necessarily the most lightweight

417
00:16:52,170 --> 00:16:57,959
machine to have around

418
00:16:54,530 --> 00:16:59,760
so one significant downside to running

419
00:16:57,960 --> 00:17:02,330
all your security tools and docker is

420
00:16:59,760 --> 00:17:06,660
that docker commands can get pretty long

421
00:17:02,330 --> 00:17:09,690
so in order for me to fix that I started

422
00:17:06,660 --> 00:17:11,490
writing these aliases so in bash you can

423
00:17:09,690 --> 00:17:13,770
have aliases which essentially serve as

424
00:17:11,490 --> 00:17:16,050
shortcuts to longer commands or commands

425
00:17:13,770 --> 00:17:18,599
you just don't want to memorize so if

426
00:17:16,050 --> 00:17:20,520
you use a bash alias you can have a

427
00:17:18,599 --> 00:17:23,550
super complex long docker command

428
00:17:20,520 --> 00:17:26,430
distilled into a single a single command

429
00:17:23,550 --> 00:17:28,349
so for example the following and map

430
00:17:26,430 --> 00:17:31,830
command and docker which looks like that

431
00:17:28,349 --> 00:17:33,179
huge command could be made into a bash

432
00:17:31,830 --> 00:17:36,540
alias which you would only have to

433
00:17:33,180 --> 00:17:37,440
create once and then as you can see in

434
00:17:36,540 --> 00:17:39,750
the bottom portion

435
00:17:37,440 --> 00:17:43,260
you would all you could run the nmap

436
00:17:39,750 --> 00:17:45,060
docker command or alias just using nmap

437
00:17:43,260 --> 00:17:48,780
and then whatever arguments you need

438
00:17:45,060 --> 00:17:51,120
after that so initially this sounds like

439
00:17:48,780 --> 00:17:53,639
a lot of work and believe me it is I've

440
00:17:51,120 --> 00:17:56,129
done a lot of this for my own personal

441
00:17:53,640 --> 00:17:58,950
use and it is a lot of work to get this

442
00:17:56,130 --> 00:18:03,020
type of workflow in place but you only

443
00:17:58,950 --> 00:18:06,810
have to do it once and on top of that I

444
00:18:03,020 --> 00:18:10,290
compiled a huge list of bash aliases as

445
00:18:06,810 --> 00:18:11,850
well as fish functions in order for you

446
00:18:10,290 --> 00:18:14,490
to start using them today so all you

447
00:18:11,850 --> 00:18:15,600
would have to do is copy the aliases

448
00:18:14,490 --> 00:18:18,020
that are linked in that github

449
00:18:15,600 --> 00:18:20,399
repository that's on the on this slide

450
00:18:18,020 --> 00:18:22,230
copy those those shell functions

451
00:18:20,400 --> 00:18:24,810
configure them in your shell to be

452
00:18:22,230 --> 00:18:27,780
loaded on each every time you get into

453
00:18:24,810 --> 00:18:29,669
the shell and then once that's done you

454
00:18:27,780 --> 00:18:31,950
basically have an entire pentesting kit

455
00:18:29,670 --> 00:18:33,330
on your machine which is really nice

456
00:18:31,950 --> 00:18:34,950
because again you don't have to worry

457
00:18:33,330 --> 00:18:36,360
about moving virtual machines you don't

458
00:18:34,950 --> 00:18:43,650
have to worry about creating virtual

459
00:18:36,360 --> 00:18:45,060
machines it's super portable so here

460
00:18:43,650 --> 00:18:46,650
here are some examples and I'm actually

461
00:18:45,060 --> 00:18:48,659
going to go over these I'll demo these

462
00:18:46,650 --> 00:18:50,520
for you it's not anything super fancy

463
00:18:48,660 --> 00:18:53,340
but here are some of the commands that

464
00:18:50,520 --> 00:18:56,760
I've been able to throw in those fish

465
00:18:53,340 --> 00:19:01,050
functions and bash aliases so for

466
00:18:56,760 --> 00:19:03,510
example we have nmap Metasploit and open

467
00:19:01,050 --> 00:19:04,889
boss so that way you could use these

468
00:19:03,510 --> 00:19:06,300
tools on the fly on our new machine

469
00:19:04,890 --> 00:19:08,610
assuming your shell is configured in

470
00:19:06,300 --> 00:19:10,080
docker is installed so I'll give you a

471
00:19:08,610 --> 00:19:20,159
little bit of a demo so you can see it

472
00:19:10,080 --> 00:19:25,879
in action so so yes ok you can see much

473
00:19:20,160 --> 00:19:25,880
my shell so let me see if I can

474
00:19:31,760 --> 00:19:40,290
can you guys see that okay or is that

475
00:19:33,930 --> 00:19:49,500
too small too small okay I'll see if I

476
00:19:40,290 --> 00:19:53,120
can increase the size real quick looks

477
00:19:49,500 --> 00:19:59,270
like that won't work okay well anyway

478
00:19:53,120 --> 00:19:59,270
let me this

479
00:20:02,600 --> 00:20:12,418
try this yeah that's even smaller okay

480
00:20:05,639 --> 00:20:21,178
well anyway yeah I'm trying that it's

481
00:20:12,419 --> 00:20:23,549
not working so let's see yeah it looks

482
00:20:21,179 --> 00:20:26,220
like this demo is gonna fail well anyway

483
00:20:23,549 --> 00:20:27,749
I'll just write I'll just read out for

484
00:20:26,220 --> 00:20:29,999
you what I'm doing so that way you can

485
00:20:27,749 --> 00:20:32,340
understand so again I have these Bosch

486
00:20:29,999 --> 00:20:34,350
aliases and fish so I'm using fish as my

487
00:20:32,340 --> 00:20:39,480
shelf so again get this same workflow

488
00:20:34,350 --> 00:20:40,918
running in Bosch but anyway so in order

489
00:20:39,480 --> 00:20:42,450
for this to work you have to have those

490
00:20:40,919 --> 00:20:44,909
pre-configured which I've already done

491
00:20:42,450 --> 00:20:46,379
and then let's say I wanted to run nmap

492
00:20:44,909 --> 00:20:48,119
and let's say I wanted to do a privilege

493
00:20:46,379 --> 00:20:48,539
scan so right now I'm VPN into my home

494
00:20:48,119 --> 00:20:50,549
network

495
00:20:48,539 --> 00:20:52,440
yeah with how small it is you guys

496
00:20:50,549 --> 00:20:54,330
probably can't see this at all so sorry

497
00:20:52,440 --> 00:20:57,119
about that well anyway so I'm typing an

498
00:20:54,330 --> 00:20:59,340
nmap - SS and then I'm just gonna do the

499
00:20:57,119 --> 00:21:03,029
port scan that I want to do so normally

500
00:20:59,340 --> 00:21:04,320
this is a privilege scan but in doubt

501
00:21:03,029 --> 00:21:06,629
curse and stalker is a privileged

502
00:21:04,320 --> 00:21:09,210
service I can run it without needing to

503
00:21:06,629 --> 00:21:11,248
provide sudo of any sort anyway so that

504
00:21:09,210 --> 00:21:12,240
runs and I'm just going to quit that

505
00:21:11,249 --> 00:21:14,879
because I don't really care about

506
00:21:12,240 --> 00:21:16,499
scanning my home network but anyway so

507
00:21:14,879 --> 00:21:19,830
that will run and that works

508
00:21:16,499 --> 00:21:21,960
another example is Metasploit rather

509
00:21:19,830 --> 00:21:25,678
than spinning up a Kali VM I can just

510
00:21:21,960 --> 00:21:29,009
type in the MSF console and hit enter

511
00:21:25,679 --> 00:21:31,139
and again I'm aware that you guys can't

512
00:21:29,009 --> 00:21:34,320
see any of this so it was have to take

513
00:21:31,139 --> 00:21:36,928
my word a nice graphic so yeah there's

514
00:21:34,320 --> 00:21:39,178
Metasploit I don't need to install Kali

515
00:21:36,929 --> 00:21:41,460
I just installed docker in my show

516
00:21:39,179 --> 00:21:44,279
I've been exploited available for me for

517
00:21:41,460 --> 00:21:47,369
quick use then finally if I wanted to

518
00:21:44,279 --> 00:21:49,559
quick I wouldn't say open Voss's

519
00:21:47,369 --> 00:21:51,689
necessarily the greatest vulnerability

520
00:21:49,559 --> 00:21:53,369
scanning tool out there but if I wanted

521
00:21:51,690 --> 00:22:00,749
to do some quick vulnerability scanning

522
00:21:53,369 --> 00:22:02,279
I had open Voss that runs up and there's

523
00:22:00,749 --> 00:22:03,749
open Voss so I can start doing some

524
00:22:02,279 --> 00:22:05,549
vulnerability scanning on the fly

525
00:22:03,749 --> 00:22:07,590
without needing to take the time to

526
00:22:05,549 --> 00:22:08,759
learn how to install it or I mean I

527
00:22:07,590 --> 00:22:11,549
already know how to install it but

528
00:22:08,759 --> 00:22:13,649
without taking the time to set it up

529
00:22:11,549 --> 00:22:15,560
it's I know that can be quite a

530
00:22:13,649 --> 00:22:18,860
cantankerous process so

531
00:22:15,560 --> 00:22:20,840
again it's just a shortcut for you to

532
00:22:18,860 --> 00:22:25,820
start using these tools very quickly on

533
00:22:20,840 --> 00:22:29,060
the fly so just one sec just gonna stop

534
00:22:25,820 --> 00:22:31,330
that docker container so my CPU stops

535
00:22:29,060 --> 00:22:31,330
flying

536
00:22:38,280 --> 00:22:41,060
all right

537
00:22:43,230 --> 00:22:49,240
so anyway as I've shared this is a

538
00:22:46,630 --> 00:22:51,340
really awesome tool for you to start

539
00:22:49,240 --> 00:22:54,340
doing stuff start to start doing your

540
00:22:51,340 --> 00:22:57,580
security stuff on the fly but as I said

541
00:22:54,340 --> 00:23:00,639
earlier this is also in the hands of the

542
00:22:57,580 --> 00:23:02,770
wrong person access to the docker Damon

543
00:23:00,640 --> 00:23:05,350
can do quite a bit of damage as you saw

544
00:23:02,770 --> 00:23:08,200
I can spin up Metasploit I can have a

545
00:23:05,350 --> 00:23:10,270
Metasploit shell in an instant I can

546
00:23:08,200 --> 00:23:11,830
start using that I could start

547
00:23:10,270 --> 00:23:14,350
vulnerability scanning on the fly

548
00:23:11,830 --> 00:23:21,000
so again docker is kind of a dangerous

549
00:23:14,350 --> 00:23:21,000
tool in the hands of the wrong user so

550
00:23:22,500 --> 00:23:26,560
the potential risks from docker come

551
00:23:25,360 --> 00:23:29,979
from the fact that it's a privilege

552
00:23:26,560 --> 00:23:32,020
service so I'm not talking I'm not going

553
00:23:29,980 --> 00:23:33,850
to be focusing mainly on the potential

554
00:23:32,020 --> 00:23:34,870
resource oft where that's available at

555
00:23:33,850 --> 00:23:37,360
docker hub because that can be

556
00:23:34,870 --> 00:23:39,909
questionable as well but the potential

557
00:23:37,360 --> 00:23:42,550
abuse that can happen while having

558
00:23:39,910 --> 00:23:44,770
access to the dr. Damon is is tremendous

559
00:23:42,550 --> 00:23:46,360
so again please keep that in mind as you

560
00:23:44,770 --> 00:23:51,510
start using this for your security

561
00:23:46,360 --> 00:23:54,580
workflows some simple security tips to

562
00:23:51,510 --> 00:23:56,920
to secure your docker instance would be

563
00:23:54,580 --> 00:24:00,189
would go a long way to make it a lot

564
00:23:56,920 --> 00:24:02,230
less risky so for example if docker

565
00:24:00,190 --> 00:24:05,530
won't be used regularly don't install it

566
00:24:02,230 --> 00:24:08,860
and especially in shared environments

567
00:24:05,530 --> 00:24:10,450
this is where it's most risky if a user

568
00:24:08,860 --> 00:24:12,340
in a shared environment doesn't need

569
00:24:10,450 --> 00:24:14,350
access that dr. Damon for example by

570
00:24:12,340 --> 00:24:18,720
adding them to the dr. group on a Linux

571
00:24:14,350 --> 00:24:21,189
system don't don't give them that access

572
00:24:18,720 --> 00:24:24,430
another thing is that you can always use

573
00:24:21,190 --> 00:24:27,340
or you should always use official and

574
00:24:24,430 --> 00:24:29,470
verified images from docker hub if for a

575
00:24:27,340 --> 00:24:31,959
specific reason and official image won't

576
00:24:29,470 --> 00:24:34,000
do I would first recommend writing your

577
00:24:31,960 --> 00:24:35,740
own image as you know as we saw earlier

578
00:24:34,000 --> 00:24:38,350
docker files are not very complicated

579
00:24:35,740 --> 00:24:40,480
but if you're gonna resort to a

580
00:24:38,350 --> 00:24:42,129
third-party image always look at the

581
00:24:40,480 --> 00:24:45,070
docker file associated with that image

582
00:24:42,130 --> 00:24:47,290
if it is available some sometimes it's

583
00:24:45,070 --> 00:24:49,090
not available but if you do some digging

584
00:24:47,290 --> 00:24:51,639
typically you can find the docker file

585
00:24:49,090 --> 00:24:56,049
on github on docker hub itself if you

586
00:24:51,640 --> 00:24:59,030
just look around hard enough and then

587
00:24:56,049 --> 00:25:00,860
if it's being used if Dockers being used

588
00:24:59,030 --> 00:25:03,139
in a corporate environment I would also

589
00:25:00,860 --> 00:25:04,820
recommend that you look into self

590
00:25:03,140 --> 00:25:07,240
hosting your own docker registry instead

591
00:25:04,820 --> 00:25:09,740
of allowing access docker hub because

592
00:25:07,240 --> 00:25:13,130
malware being embedded within docker

593
00:25:09,740 --> 00:25:15,500
containers has been found before so if

594
00:25:13,130 --> 00:25:19,490
you want to just maintain your own safe

595
00:25:15,500 --> 00:25:21,650
set of docker images tools like Portis

596
00:25:19,490 --> 00:25:24,740
and the get lab docker registry as well

597
00:25:21,650 --> 00:25:26,330
as docker themselves allow you to use

598
00:25:24,740 --> 00:25:28,520
the docker command to host your own

599
00:25:26,330 --> 00:25:29,960
registry I would highly recommend that

600
00:25:28,520 --> 00:25:31,639
you host your own registry in an

601
00:25:29,960 --> 00:25:38,270
enterprise environment if you're unsure

602
00:25:31,640 --> 00:25:40,130
about trusting docker hub and again all

603
00:25:38,270 --> 00:25:42,260
of these risks they don't mean that you

604
00:25:40,130 --> 00:25:44,120
shouldn't use docker but I think they

605
00:25:42,260 --> 00:25:46,820
definitely are they should be kept in

606
00:25:44,120 --> 00:25:48,799
mind as you start using docker and as

607
00:25:46,820 --> 00:25:51,830
you rely on it heavily and I think it's

608
00:25:48,799 --> 00:25:53,330
really important that you understand

609
00:25:51,830 --> 00:25:54,918
this for your end-users especially if

610
00:25:53,330 --> 00:25:57,770
you're giving them access to docker is

611
00:25:54,919 --> 00:26:00,409
again like like has been shown it's so

612
00:25:57,770 --> 00:26:02,150
easy for docker to be used maliciously

613
00:26:00,409 --> 00:26:08,860
as there's so much security software

614
00:26:02,150 --> 00:26:11,000
that's available on docker hub so I

615
00:26:08,860 --> 00:26:12,530
would highly recommend that everyone

616
00:26:11,000 --> 00:26:15,169
start using docker if you haven't yet

617
00:26:12,530 --> 00:26:18,668
it's really maximized a lot of

618
00:26:15,169 --> 00:26:21,200
convenience and a lot of my security

619
00:26:18,669 --> 00:26:24,169
functions it's really helped me out a

620
00:26:21,200 --> 00:26:26,330
lot and I definitely suggest you check

621
00:26:24,169 --> 00:26:27,650
it out so if you want to get started I

622
00:26:26,330 --> 00:26:30,260
would first recommend installing docker

623
00:26:27,650 --> 00:26:32,900
desktop on your machine and then I would

624
00:26:30,260 --> 00:26:34,100
just start messing around with it next I

625
00:26:32,900 --> 00:26:35,570
would look at the shell config files

626
00:26:34,100 --> 00:26:37,158
that I've shared in this presentation if

627
00:26:35,570 --> 00:26:38,809
you want to start using it for security

628
00:26:37,159 --> 00:26:40,970
specifically especially if you want to

629
00:26:38,809 --> 00:26:44,809
have highly accessible highly available

630
00:26:40,970 --> 00:26:46,730
security tools in your shell and then

631
00:26:44,809 --> 00:26:48,590
the docker command itself has lots of

632
00:26:46,730 --> 00:26:50,360
arguments and features and you could

633
00:26:48,590 --> 00:26:53,539
probably spend tons of time just digging

634
00:26:50,360 --> 00:26:54,860
into that as well and then finally once

635
00:26:53,539 --> 00:26:56,480
you rely heavily on docker I would

636
00:26:54,860 --> 00:26:57,830
recommend looking into best practices

637
00:26:56,480 --> 00:27:02,090
with Dockers there's just so much that

638
00:26:57,830 --> 00:27:05,240
you can improve so that's all I have for

639
00:27:02,090 --> 00:27:07,480
today before we conclude are there any

640
00:27:05,240 --> 00:27:07,480
questions

641
00:27:07,770 --> 00:27:16,470
any questions about docker or these

642
00:27:09,929 --> 00:27:18,419
security board yes yeah yeah that's a

643
00:27:16,470 --> 00:27:20,429
good question so the question was do I

644
00:27:18,419 --> 00:27:22,409
use a program to manage my dot file so

645
00:27:20,429 --> 00:27:24,990
yeah I have a so for those who don't

646
00:27:22,409 --> 00:27:26,580
know what dot files are they're a set of

647
00:27:24,990 --> 00:27:30,419
config files that you store somewhere

648
00:27:26,580 --> 00:27:33,059
and so I have my dot files on github so

649
00:27:30,419 --> 00:27:35,700
I can sync all my bash and fish stuff

650
00:27:33,059 --> 00:27:37,440
immediately between machines I use git

651
00:27:35,700 --> 00:27:40,380
obviously to clone my dot files and then

652
00:27:37,440 --> 00:27:41,669
I use Peru to download third-party stuff

653
00:27:40,380 --> 00:27:45,000
that's not in there and then I just use

654
00:27:41,669 --> 00:27:48,210
siblings to link all of the config files

655
00:27:45,000 --> 00:27:52,830
where they need to be linked to yeah any

656
00:27:48,210 --> 00:27:55,700
other questions all right it looks like

657
00:27:52,830 --> 00:28:00,419
that's it thank you very much

658
00:27:55,700 --> 00:28:00,420
[Applause]

