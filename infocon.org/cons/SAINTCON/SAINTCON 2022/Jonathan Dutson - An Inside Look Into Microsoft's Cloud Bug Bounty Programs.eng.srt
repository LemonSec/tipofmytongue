1
00:00:00,000 --> 00:00:01,220
hello everyone

2
00:00:01,220 --> 00:00:03,679
I'm really really excited to be here

3
00:00:03,680 --> 00:00:06,120
thanks for coming I'm going to talk

4
00:00:06,120 --> 00:00:07,500
today about Trends in web security

5
00:00:07,500 --> 00:00:09,780
looking into Microsoft's Cloud bug

6
00:00:09,780 --> 00:00:11,519
Bounty programs I'm a little embarrassed

7
00:00:11,519 --> 00:00:13,740
I did not prepare a musical number like

8
00:00:13,740 --> 00:00:18,779
Doug did so uh I'm sorry uh so just a

9
00:00:18,779 --> 00:00:19,859
little bit of an intro I'm a security

10
00:00:19,859 --> 00:00:22,199
researcher at with the vulnerability

11
00:00:22,199 --> 00:00:24,060
mitigations team at the Microsoft

12
00:00:24,060 --> 00:00:27,119
security Response Center at msrc

13
00:00:27,119 --> 00:00:29,160
but I'm familiar with Utah I did my

14
00:00:29,160 --> 00:00:30,240
bachelor's in Master's in computer

15
00:00:30,240 --> 00:00:32,640
science here at BYU

16
00:00:32,640 --> 00:00:35,340
um in Provo my research was focused most

17
00:00:35,340 --> 00:00:37,620
mostly on usable security specifically

18
00:00:37,620 --> 00:00:39,480
the usability of different different

19
00:00:39,480 --> 00:00:42,660
two-factor authentication methods then I

20
00:00:42,660 --> 00:00:44,340
moved to Washington a few years after I

21
00:00:44,340 --> 00:00:48,300
graduated uh with Microsoft but I'm back

22
00:00:48,300 --> 00:00:50,219
I actually moved back to Provo just this

23
00:00:50,219 --> 00:00:52,100
summer so it's nice to be back in Utah

24
00:00:52,100 --> 00:00:54,960
my fiance is an English teacher at Provo

25
00:00:54,960 --> 00:00:56,640
High now so so we love being in Utah

26
00:00:56,640 --> 00:00:59,340
County I love board games getting

27
00:00:59,340 --> 00:01:02,100
outside running uh I I'm not a great

28
00:01:02,100 --> 00:01:04,559
cook but I I'm trying to be

29
00:01:04,559 --> 00:01:06,840
so just to start off who's this talk for

30
00:01:06,840 --> 00:01:08,939
of course all of you who attended thanks

31
00:01:08,939 --> 00:01:11,580
for coming but specifically I hope that

32
00:01:11,580 --> 00:01:12,960
this talk will be helpful for people who

33
00:01:12,960 --> 00:01:15,900
are new to security or curious and about

34
00:01:15,900 --> 00:01:17,820
bug bounties and and web vulnerabilities

35
00:01:17,820 --> 00:01:20,220
that's the place that I was while I was

36
00:01:20,220 --> 00:01:23,159
at University so I was I knew even

37
00:01:23,159 --> 00:01:25,020
before I started University that I

38
00:01:25,020 --> 00:01:27,000
wanted to do be in security

39
00:01:27,000 --> 00:01:29,880
but I didn't know what that path would

40
00:01:29,880 --> 00:01:31,259
look like I took as many security

41
00:01:31,259 --> 00:01:34,140
classes as I could but beyond that I

42
00:01:34,140 --> 00:01:35,640
didn't really know where I would go I

43
00:01:35,640 --> 00:01:37,320
was curious about bug bounties I didn't

44
00:01:37,320 --> 00:01:39,780
know what those looked like so I've

45
00:01:39,780 --> 00:01:41,640
tried to make this talk with my past

46
00:01:41,640 --> 00:01:43,320
self in mind I've tried to make it

47
00:01:43,320 --> 00:01:45,780
pretty high level and accessible so if

48
00:01:45,780 --> 00:01:47,460
you're also new to the security space

49
00:01:47,460 --> 00:01:49,320
and interested in web vulnerabilities I

50
00:01:49,320 --> 00:01:50,399
hope this will be a helpful starting

51
00:01:50,399 --> 00:01:52,220
place for you

52
00:01:52,220 --> 00:01:54,600
so first I'll talk a little bit about

53
00:01:54,600 --> 00:01:57,240
Microsoft's Bounty programs then I'll go

54
00:01:57,240 --> 00:01:59,280
over the most common web vulnerabilities

55
00:01:59,280 --> 00:02:02,280
that we've seen over the last year then

56
00:02:02,280 --> 00:02:03,659
I'll talk about what do we do when we

57
00:02:03,659 --> 00:02:05,759
see all these vulnerabilities how do we

58
00:02:05,759 --> 00:02:08,160
mitigate those and all end with learning

59
00:02:08,160 --> 00:02:12,180
resources some of my favorite resources

60
00:02:12,180 --> 00:02:14,459
so at Microsoft we have kind of a dual

61
00:02:14,459 --> 00:02:17,819
approach to security so internal

62
00:02:17,819 --> 00:02:19,739
security is really really important we

63
00:02:19,739 --> 00:02:23,220
have over 8 500 Security Professionals

64
00:02:23,220 --> 00:02:25,020
doing a variety of things to secure

65
00:02:25,020 --> 00:02:26,580
Microsoft

66
00:02:26,580 --> 00:02:28,980
um so of course we have a lot of red and

67
00:02:28,980 --> 00:02:31,379
blue teams working to see if we can find

68
00:02:31,379 --> 00:02:33,000
vulnerabilities so we can fix those

69
00:02:33,000 --> 00:02:35,459
early this year I participated in an

70
00:02:35,459 --> 00:02:37,379
internal red teaming exercise which was

71
00:02:37,379 --> 00:02:39,480
really a lot of fun

72
00:02:39,480 --> 00:02:42,060
um we also this picture that you see

73
00:02:42,060 --> 00:02:43,620
here is from our cyber defense

74
00:02:43,620 --> 00:02:46,980
operations center the CDOC which is

75
00:02:46,980 --> 00:02:48,599
basically where everybody comes together

76
00:02:48,599 --> 00:02:50,640
when there's a security event so

77
00:02:50,640 --> 00:02:53,099
Microsoft has a ton of different

78
00:02:53,099 --> 00:02:57,180
products and um so when a security event

79
00:02:57,180 --> 00:02:59,220
impacts a lot of people across a lot of

80
00:02:59,220 --> 00:03:01,200
groups the CDOC is where everybody can

81
00:03:01,200 --> 00:03:03,420
come together work together we can get

82
00:03:03,420 --> 00:03:06,780
all the experts in one room to to handle

83
00:03:06,780 --> 00:03:09,060
the event

84
00:03:09,060 --> 00:03:11,580
um and also important is external

85
00:03:11,580 --> 00:03:13,440
collaboration

86
00:03:13,440 --> 00:03:15,500
um

87
00:03:17,159 --> 00:03:19,379
so we we really love partnering with

88
00:03:19,379 --> 00:03:21,420
independent security researchers and

89
00:03:21,420 --> 00:03:22,800
security industry Partners from around

90
00:03:22,800 --> 00:03:24,599
the world we do that through our bug

91
00:03:24,599 --> 00:03:26,640
Bounty program to help incentivize

92
00:03:26,640 --> 00:03:28,440
researchers to report high impact

93
00:03:28,440 --> 00:03:30,840
security vulnerabilities to us

94
00:03:30,840 --> 00:03:33,060
Microsoft runs one of the largest bug

95
00:03:33,060 --> 00:03:36,120
Bounty programs in the world we we love

96
00:03:36,120 --> 00:03:37,920
all the researchers who work with us so

97
00:03:37,920 --> 00:03:39,659
in fact one of my co-workers was a

98
00:03:39,659 --> 00:03:42,120
topped researcher and now works with us

99
00:03:42,120 --> 00:03:44,819
so he's moved from the external world to

100
00:03:44,819 --> 00:03:47,519
the internal world if any of you have

101
00:03:47,519 --> 00:03:49,860
reported vulnerability through us a big

102
00:03:49,860 --> 00:03:53,840
thanks for partnering with us

103
00:03:55,560 --> 00:03:57,599
um so here's our year in review at

104
00:03:57,599 --> 00:03:59,580
Microsoft we go by our the fiscal year

105
00:03:59,580 --> 00:04:01,980
which for US starts in July and goes

106
00:04:01,980 --> 00:04:05,459
through June so from June 20 July 2021

107
00:04:05,459 --> 00:04:07,560
to June 2022

108
00:04:07,560 --> 00:04:09,959
we issued 13.7 million dollars in Bounty

109
00:04:09,959 --> 00:04:12,780
rewards that's across 17 Bounty programs

110
00:04:12,780 --> 00:04:14,360
with over a thousand eligible

111
00:04:14,360 --> 00:04:17,940
vulnerability reports and 335

112
00:04:17,940 --> 00:04:21,839
researchers from over 4 40 45 countries

113
00:04:21,839 --> 00:04:23,880
so it's quite a diversity of researchers

114
00:04:23,880 --> 00:04:27,479
a lot of different programs of those 17

115
00:04:27,479 --> 00:04:30,360
programs we divide them into two main

116
00:04:30,360 --> 00:04:31,560
groups

117
00:04:31,560 --> 00:04:34,139
so we have platform programs which

118
00:04:34,139 --> 00:04:36,660
includes products like Windows Microsoft

119
00:04:36,660 --> 00:04:39,960
Defender Microsoft Edge hyper-v even

120
00:04:39,960 --> 00:04:42,120
products like election guard which is an

121
00:04:42,120 --> 00:04:44,940
open source SDK that's election system

122
00:04:44,940 --> 00:04:48,000
vendors can use to make voting uh more

123
00:04:48,000 --> 00:04:50,400
transparent and accessible and then we

124
00:04:50,400 --> 00:04:52,440
have on the other side our Cloud Bounty

125
00:04:52,440 --> 00:04:54,240
programs anything that's cloud-based we

126
00:04:54,240 --> 00:04:57,600
have Azure Azure devops Office 365 Xbox

127
00:04:57,600 --> 00:04:58,759
Live

128
00:04:58,759 --> 00:05:01,320
and that's where iWork is in the cloud

129
00:05:01,320 --> 00:05:03,000
Bounty space so that's what this

130
00:05:03,000 --> 00:05:04,979
presentation is going to be focusing on

131
00:05:04,979 --> 00:05:07,139
and these slides are going crazy

132
00:05:07,139 --> 00:05:11,820
okay I asked uh the Bounty team to share

133
00:05:11,820 --> 00:05:15,120
some data with me about what growth in

134
00:05:15,120 --> 00:05:16,440
the cloud Bounty space has looked like

135
00:05:16,440 --> 00:05:17,940
over the last few years and this is what

136
00:05:17,940 --> 00:05:21,540
they gave me so thanks a lot Bounty team

137
00:05:21,540 --> 00:05:22,500
um

138
00:05:22,500 --> 00:05:24,479
but it is actually kind of accurate so

139
00:05:24,479 --> 00:05:27,120
uh they also shared some real stats with

140
00:05:27,120 --> 00:05:29,280
me so over the last about three years

141
00:05:29,280 --> 00:05:32,580
we've seen a 92 percent increase in

142
00:05:32,580 --> 00:05:35,400
researcher participation about 140

143
00:05:35,400 --> 00:05:37,020
percent increase in cases submitted

144
00:05:37,020 --> 00:05:39,479
through our program and about a 500

145
00:05:39,479 --> 00:05:41,160
percent increase in Bounty Awards

146
00:05:41,160 --> 00:05:42,539
annually

147
00:05:42,539 --> 00:05:44,460
we've also launched a lot of those

148
00:05:44,460 --> 00:05:47,220
Bounty programs have been of the 17 were

149
00:05:47,220 --> 00:05:48,240
launched in the last three years

150
00:05:48,240 --> 00:05:51,660
including identity Azure Dynamics uh

151
00:05:51,660 --> 00:05:53,460
devops so there's the point of all this

152
00:05:53,460 --> 00:05:55,199
is there's really a lot happening in the

153
00:05:55,199 --> 00:05:57,060
Bounty space

154
00:05:57,060 --> 00:05:58,620
um and

155
00:05:58,620 --> 00:06:01,680
uh through these bounding programs we we

156
00:06:01,680 --> 00:06:04,020
get a lot of really great data a lot of

157
00:06:04,020 --> 00:06:05,699
insight through our researchers into

158
00:06:05,699 --> 00:06:07,460
what are some of the most common

159
00:06:07,460 --> 00:06:10,620
vulnerabilities we see

160
00:06:10,620 --> 00:06:12,960
and so here are the top five these are

161
00:06:12,960 --> 00:06:15,600
the top five over the last year issues

162
00:06:15,600 --> 00:06:17,699
that we saw through our Cloud Bounty

163
00:06:17,699 --> 00:06:20,280
programs I'll note the top issues do

164
00:06:20,280 --> 00:06:22,319
vary a little bit year to year so for

165
00:06:22,319 --> 00:06:25,259
example SQL injection actually isn't a

166
00:06:25,259 --> 00:06:27,300
vulnerability we see very often but it

167
00:06:27,300 --> 00:06:28,560
happened to be there this year because

168
00:06:28,560 --> 00:06:30,419
there was one security researcher who

169
00:06:30,419 --> 00:06:32,639
found one product with a lot of bugs

170
00:06:32,639 --> 00:06:35,400
there so it actually made the top five

171
00:06:35,400 --> 00:06:36,300
um

172
00:06:36,300 --> 00:06:39,960
if you look in percentages xss is a

173
00:06:39,960 --> 00:06:42,000
really big portion of those and then the

174
00:06:42,000 --> 00:06:44,759
rest it's uh something like 20 just over

175
00:06:44,759 --> 00:06:47,039
25 percent the rest are like four to

176
00:06:47,039 --> 00:06:48,539
seven percent and then there's a very

177
00:06:48,539 --> 00:06:51,180
long tail because there's really a lot

178
00:06:51,180 --> 00:06:53,580
of vulnerabilities that we see

179
00:06:53,580 --> 00:06:54,419
um

180
00:06:54,419 --> 00:06:56,880
like I like I mentioned Microsoft really

181
00:06:56,880 --> 00:06:59,400
it's very there's a whole lot of bounty

182
00:06:59,400 --> 00:07:01,620
programs a whole lot of products so it's

183
00:07:01,620 --> 00:07:04,139
very Broad and this of course is just a

184
00:07:04,139 --> 00:07:06,180
piece of the overall like Trend picture

185
00:07:06,180 --> 00:07:09,120
but it does map with what a lot of uh

186
00:07:09,120 --> 00:07:11,880
other industry is seeing elsewhere in

187
00:07:11,880 --> 00:07:13,380
the industry so it does map with broader

188
00:07:13,380 --> 00:07:16,740
trends like the OAS pop 10.

189
00:07:16,740 --> 00:07:18,419
um which you know we have injection

190
00:07:18,419 --> 00:07:19,919
vulnerabilities broken Access Control

191
00:07:19,919 --> 00:07:21,360
Security in this configuration that's

192
00:07:21,360 --> 00:07:22,740
also what we're seeing in our Bounty

193
00:07:22,740 --> 00:07:25,080
programs

194
00:07:25,080 --> 00:07:27,479
uh one thing I'll note most common

195
00:07:27,479 --> 00:07:30,599
definitely does not mean most severe

196
00:07:30,599 --> 00:07:33,240
um so to just demonstrate that I compare

197
00:07:33,240 --> 00:07:35,400
two different vulnerabilities here so we

198
00:07:35,400 --> 00:07:37,080
have cross-site scripting xss or

199
00:07:37,080 --> 00:07:40,259
server-side request forgery ssrf

200
00:07:40,259 --> 00:07:41,220
um

201
00:07:41,220 --> 00:07:44,280
so so the first row here percent that me

202
00:07:44,280 --> 00:07:47,280
are our msrc bar what does that mean we

203
00:07:47,280 --> 00:07:49,740
give security vulnerabilities ratings uh

204
00:07:49,740 --> 00:07:51,900
if it's a you know critical or important

205
00:07:51,900 --> 00:07:54,060
severity or maybe it's a low or moderate

206
00:07:54,060 --> 00:07:56,220
issue and that basically just helps us

207
00:07:56,220 --> 00:07:59,340
decide what issues to prioritize

208
00:07:59,340 --> 00:08:01,680
so any issue that impacts customers or

209
00:08:01,680 --> 00:08:04,020
that can be exploited needs to be fixed

210
00:08:04,020 --> 00:08:06,000
with priority that that'll meet our msrc

211
00:08:06,000 --> 00:08:08,340
bar for servicing cases that are only

212
00:08:08,340 --> 00:08:11,039
potential issues or more of Defense

213
00:08:11,039 --> 00:08:12,780
in-depth things that don't have a

214
00:08:12,780 --> 00:08:15,720
present risk those uh we still want to

215
00:08:15,720 --> 00:08:17,160
address those but they don't need the

216
00:08:17,160 --> 00:08:18,319
same urgency

217
00:08:18,319 --> 00:08:21,960
so of xss cases about 39 percent meet

218
00:08:21,960 --> 00:08:24,000
our bar for servicing compared with

219
00:08:24,000 --> 00:08:26,819
about 29 of ssrf cases

220
00:08:26,819 --> 00:08:28,379
and then if you look at all the cases

221
00:08:28,379 --> 00:08:32,159
that meet our msrc bar about 29 of those

222
00:08:32,159 --> 00:08:35,099
are xsr xss and only about one percent

223
00:08:35,099 --> 00:08:39,419
is ssrf but of our critical cases xss is

224
00:08:39,419 --> 00:08:41,219
just one percent while about half of the

225
00:08:41,219 --> 00:08:43,320
ssrf cases that meet our bar are are

226
00:08:43,320 --> 00:08:45,839
critical so that just goes to show you

227
00:08:45,839 --> 00:08:48,120
know issues that are very common uh

228
00:08:48,120 --> 00:08:49,860
might not always be the most impactful

229
00:08:49,860 --> 00:08:51,480
and issues that are less common are

230
00:08:51,480 --> 00:08:55,399
still really really important to address

231
00:08:58,380 --> 00:08:59,519
foreign

232
00:08:59,519 --> 00:09:03,000
so like I mentioned at msrc we see this

233
00:09:03,000 --> 00:09:05,100
constant stream of vulnerability reports

234
00:09:05,100 --> 00:09:07,440
it's a really incredible source of data

235
00:09:07,440 --> 00:09:09,959
and we want to fix every uh report we

236
00:09:09,959 --> 00:09:12,360
get individually but in addition to that

237
00:09:12,360 --> 00:09:14,760
sometimes we'll notice patterns if we

238
00:09:14,760 --> 00:09:16,620
see a product with a lot of a certain

239
00:09:16,620 --> 00:09:19,200
type of vulnerability in addition to

240
00:09:19,200 --> 00:09:21,360
fixing those individually we ask

241
00:09:21,360 --> 00:09:22,860
ourselves is there a way that we can

242
00:09:22,860 --> 00:09:25,019
mitigate this entire pattern of issues

243
00:09:25,019 --> 00:09:28,200
or a class of issues so that we can fix

244
00:09:28,200 --> 00:09:30,000
it at a higher level

245
00:09:30,000 --> 00:09:31,740
and there are two kind of main ways that

246
00:09:31,740 --> 00:09:34,740
we think about this so a lot of times in

247
00:09:34,740 --> 00:09:36,420
4A here there's something that already

248
00:09:36,420 --> 00:09:38,339
exists that works really well to

249
00:09:38,339 --> 00:09:40,740
mitigate issues other times if there's

250
00:09:40,740 --> 00:09:42,839
something that's not quite what we need

251
00:09:42,839 --> 00:09:45,180
there's nothing existing then we'll see

252
00:09:45,180 --> 00:09:46,500
if there's something we can come up with

253
00:09:46,500 --> 00:09:48,000
that's a that's a little bit new that we

254
00:09:48,000 --> 00:09:50,160
can use to mitigate issues

255
00:09:50,160 --> 00:09:52,380
um and whatever thing we choose to do

256
00:09:52,380 --> 00:09:54,899
afterwards we can use that msrc case

257
00:09:54,899 --> 00:09:56,880
data the reports vulnerability reports

258
00:09:56,880 --> 00:09:58,740
that we see to Monitor and see if the

259
00:09:58,740 --> 00:10:02,300
mitigation was successful or not

260
00:10:02,580 --> 00:10:04,740
so I'm going to go through just two

261
00:10:04,740 --> 00:10:08,459
examples of things we've done noticed a

262
00:10:08,459 --> 00:10:10,620
pattern and then used some sort of

263
00:10:10,620 --> 00:10:12,060
mitigation to address it at a higher

264
00:10:12,060 --> 00:10:15,480
level like I mentioned improper access

265
00:10:15,480 --> 00:10:17,399
control and cross-site scripting they're

266
00:10:17,399 --> 00:10:18,779
two of the most common vulnerabilities

267
00:10:18,779 --> 00:10:20,940
that we saw over the last year

268
00:10:20,940 --> 00:10:22,920
and so I'm going to talk about a service

269
00:10:22,920 --> 00:10:24,899
where we saw a lot of xss issues what we

270
00:10:24,899 --> 00:10:26,700
did and then there was an API where we

271
00:10:26,700 --> 00:10:28,440
saw improper Access Control issues and

272
00:10:28,440 --> 00:10:30,800
what we did there

273
00:10:30,800 --> 00:10:34,080
so before discussing the first issue I

274
00:10:34,080 --> 00:10:35,399
just want to give a little overview

275
00:10:35,399 --> 00:10:39,000
about what xss is so I really love this

276
00:10:39,000 --> 00:10:41,399
image from portswigger which shows an

277
00:10:41,399 --> 00:10:43,680
attacker who steals sensitive data from

278
00:10:43,680 --> 00:10:44,940
a victim through a cross-site scripting

279
00:10:44,940 --> 00:10:48,060
bug so in the image you see a script

280
00:10:48,060 --> 00:10:50,420
pointing to eviluser.net at the top

281
00:10:50,420 --> 00:10:53,040
which a victim user when they click this

282
00:10:53,040 --> 00:10:56,519
link that the script from eviluser.net

283
00:10:56,519 --> 00:10:58,140
loads into this website that the victim

284
00:10:58,140 --> 00:11:00,240
user trusts and so then the attacker is

285
00:11:00,240 --> 00:11:01,620
able to run arbitrary code on this

286
00:11:01,620 --> 00:11:03,839
website steal sensitive information from

287
00:11:03,839 --> 00:11:05,940
the victim whether it's passwords or

288
00:11:05,940 --> 00:11:08,579
mother's maiden's name whatever it might

289
00:11:08,579 --> 00:11:10,680
be

290
00:11:10,680 --> 00:11:12,420
um and we had a website where we were

291
00:11:12,420 --> 00:11:15,300
seeing uh dozens of xss issues and we

292
00:11:15,300 --> 00:11:17,160
wanted not only to fix those individual

293
00:11:17,160 --> 00:11:18,779
issues but also see if there's something

294
00:11:18,779 --> 00:11:20,279
more we could do and in this case

295
00:11:20,279 --> 00:11:22,920
there's uh really easy existing

296
00:11:22,920 --> 00:11:25,440
mitigation uh content security policy

297
00:11:25,440 --> 00:11:29,220
which works really well to prevent xss

298
00:11:29,220 --> 00:11:32,640
um so content security policy or CSP is

299
00:11:32,640 --> 00:11:34,620
a strong defense and depth mechanism

300
00:11:34,620 --> 00:11:36,600
that can make it very difficult or

301
00:11:36,600 --> 00:11:39,000
sometimes impossible to trigger xss even

302
00:11:39,000 --> 00:11:40,200
if you can find an injection

303
00:11:40,200 --> 00:11:42,240
vulnerability

304
00:11:42,240 --> 00:11:44,399
and it works by allowing you to restrict

305
00:11:44,399 --> 00:11:47,339
how resources such as JavaScript CSS or

306
00:11:47,339 --> 00:11:49,820
basically anything that a browser loads

307
00:11:49,820 --> 00:11:52,560
you can explicitly Define where those

308
00:11:52,560 --> 00:11:54,360
resources are allowed to be loaded from

309
00:11:54,360 --> 00:11:56,339
it's typically done through an HTTP

310
00:11:56,339 --> 00:11:58,079
response header although it also can be

311
00:11:58,079 --> 00:12:00,360
done through a meta tag so this is a

312
00:12:00,360 --> 00:12:03,060
really simple example here so on the

313
00:12:03,060 --> 00:12:04,860
right you'll see there's a server with a

314
00:12:04,860 --> 00:12:06,660
Content security policy header in this

315
00:12:06,660 --> 00:12:09,360
case it says Hey the default source is

316
00:12:09,360 --> 00:12:11,940
example.com so basically by default I

317
00:12:11,940 --> 00:12:14,160
only want to load resources if it's from

318
00:12:14,160 --> 00:12:16,560
example.com and so how that works in

319
00:12:16,560 --> 00:12:18,600
practice if you have on the left a

320
00:12:18,600 --> 00:12:20,339
victim user

321
00:12:20,339 --> 00:12:22,800
say they request JavaScript from

322
00:12:22,800 --> 00:12:25,019
example.com that matches the policy the

323
00:12:25,019 --> 00:12:27,000
browser will return it say they request

324
00:12:27,000 --> 00:12:29,459
CSS from example.com that also matches

325
00:12:29,459 --> 00:12:31,860
but if an attacker has been able to find

326
00:12:31,860 --> 00:12:33,720
an injection bug and is trying to get

327
00:12:33,720 --> 00:12:36,540
the victim to load uh load JavaScript

328
00:12:36,540 --> 00:12:38,339
from malicious.com since that doesn't

329
00:12:38,339 --> 00:12:40,320
match the the content security policy

330
00:12:40,320 --> 00:12:43,380
the browser will will block that

331
00:12:43,380 --> 00:12:46,019
so this is a pretty simple example of

332
00:12:46,019 --> 00:12:48,560
CSP so I'll go this is a little bit more

333
00:12:48,560 --> 00:12:52,320
developed so so this policy example has

334
00:12:52,320 --> 00:12:54,420
has five directives directives are what

335
00:12:54,420 --> 00:12:56,940
the CSP kind of rules are called so the

336
00:12:56,940 --> 00:12:58,380
first one like we saw in the last

337
00:12:58,380 --> 00:13:00,540
default Source means unless I say

338
00:13:00,540 --> 00:13:02,940
otherwise this is what you default to so

339
00:13:02,940 --> 00:13:04,500
this is saying by default I don't trust

340
00:13:04,500 --> 00:13:06,600
anyone

341
00:13:06,600 --> 00:13:08,519
um here the second directive script

342
00:13:08,519 --> 00:13:10,800
source is set to a knot so in the

343
00:13:10,800 --> 00:13:11,540
previous

344
00:13:11,540 --> 00:13:14,639
policy we used an allow list that said

345
00:13:14,639 --> 00:13:16,260
hey anything from example.com is good

346
00:13:16,260 --> 00:13:19,260
that's good but it's definitely not as

347
00:13:19,260 --> 00:13:21,120
strong as using a random nonce because

348
00:13:21,120 --> 00:13:22,680
if an attacker can find another

349
00:13:22,680 --> 00:13:25,500
vulnerability an example.com say if they

350
00:13:25,500 --> 00:13:27,480
can find an open redirect or another xss

351
00:13:27,480 --> 00:13:30,300
or something they may be able to chain a

352
00:13:30,300 --> 00:13:32,339
vulnerability and and still load

353
00:13:32,339 --> 00:13:33,899
malicious JavaScript through that

354
00:13:33,899 --> 00:13:37,560
allowed trusted domain so nonce is a

355
00:13:37,560 --> 00:13:39,440
much more secure way to go

356
00:13:39,440 --> 00:13:43,560
script source is the most uh important

357
00:13:43,560 --> 00:13:45,600
directive for preventing xss because it

358
00:13:45,600 --> 00:13:47,279
tells the browser where javascript's

359
00:13:47,279 --> 00:13:49,200
allowed to load from but there's really

360
00:13:49,200 --> 00:13:53,220
a lot that CSP can do in beyond that so

361
00:13:53,220 --> 00:13:55,440
here we have like image source you can

362
00:13:55,440 --> 00:13:56,820
say I will only load images from

363
00:13:56,820 --> 00:13:59,519
example.com you can say hey CSS I'm only

364
00:13:59,519 --> 00:14:01,079
going to load that from self my own

365
00:14:01,079 --> 00:14:03,360
website you can also restrict things

366
00:14:03,360 --> 00:14:05,339
like where forms are allowed to be

367
00:14:05,339 --> 00:14:06,839
submitted and there's a lot more you can

368
00:14:06,839 --> 00:14:08,940
do with CSP it's a really really great

369
00:14:08,940 --> 00:14:11,339
mitigation

370
00:14:11,339 --> 00:14:13,560
and so we had this website where we had

371
00:14:13,560 --> 00:14:16,139
seen dozens of these xss cases and after

372
00:14:16,139 --> 00:14:18,120
we partnered with that engineering team

373
00:14:18,120 --> 00:14:20,339
who owned the site then we haven't seen

374
00:14:20,339 --> 00:14:23,519
any successful uh xss there even if

375
00:14:23,519 --> 00:14:24,959
somebody finds an injection point they

376
00:14:24,959 --> 00:14:28,019
haven't been able to bypass the CSP so

377
00:14:28,019 --> 00:14:29,940
that we consider that a success success

378
00:14:29,940 --> 00:14:31,980
on our end

379
00:14:31,980 --> 00:14:34,139
so the second kind of example I'll go

380
00:14:34,139 --> 00:14:36,680
through is an improper access control

381
00:14:36,680 --> 00:14:39,540
so this is a fairly broad category of

382
00:14:39,540 --> 00:14:42,060
issues and this is another great image

383
00:14:42,060 --> 00:14:43,519
from portswiger

384
00:14:43,519 --> 00:14:45,660
improper Access Control happens when

385
00:14:45,660 --> 00:14:47,459
there's information or functionality

386
00:14:47,459 --> 00:14:50,040
that isn't properly restricted to users

387
00:14:50,040 --> 00:14:52,139
with the right permissions so in this

388
00:14:52,139 --> 00:14:53,639
image you can see there's an admin

389
00:14:53,639 --> 00:14:56,100
portal if if a non-admin user can access

390
00:14:56,100 --> 00:14:57,720
an admin portal and do stuff that's

391
00:14:57,720 --> 00:15:00,420
really bad that's a big issue on the

392
00:15:00,420 --> 00:15:03,600
other side you see my account if a user

393
00:15:03,600 --> 00:15:05,699
is able to access an account that isn't

394
00:15:05,699 --> 00:15:08,579
theirs and able to transfer money or do

395
00:15:08,579 --> 00:15:09,720
anything on that account that's another

396
00:15:09,720 --> 00:15:12,680
really big issue

397
00:15:14,279 --> 00:15:17,820
so we had an API where we were receiving

398
00:15:17,820 --> 00:15:20,699
some Access Control issues we were

399
00:15:20,699 --> 00:15:22,339
seeing a lot of that in our case data

400
00:15:22,339 --> 00:15:25,199
here I'm showing an example of an open

401
00:15:25,199 --> 00:15:28,320
API spec open API is a standard way you

402
00:15:28,320 --> 00:15:30,779
can Define restful apis it's both

403
00:15:30,779 --> 00:15:32,959
computer and human readable

404
00:15:32,959 --> 00:15:36,300
it shows here like what servers are

405
00:15:36,300 --> 00:15:38,880
running the apis and passive different

406
00:15:38,880 --> 00:15:40,920
endpoints and what expected responses

407
00:15:40,920 --> 00:15:43,980
are so you can see there's a there's a

408
00:15:43,980 --> 00:15:46,139
user's endpoint here so it's probably

409
00:15:46,139 --> 00:15:48,240
maybe any user is able to hit this

410
00:15:48,240 --> 00:15:49,740
endpoint and get a list of the other

411
00:15:49,740 --> 00:15:52,680
users maybe there's an admin endpoint

412
00:15:52,680 --> 00:15:54,180
here which you shouldn't be able to hit

413
00:15:54,180 --> 00:15:56,940
unless you're you're an admin and so we

414
00:15:56,940 --> 00:15:58,980
had seen cases where endpoints were not

415
00:15:58,980 --> 00:16:00,959
properly checking whether the user who

416
00:16:00,959 --> 00:16:02,579
was requesting access to that endpoint

417
00:16:02,579 --> 00:16:04,760
had the proper permission to access it

418
00:16:04,760 --> 00:16:07,139
and there was nothing that was exactly

419
00:16:07,139 --> 00:16:09,060
what we wanted to kind of address this

420
00:16:09,060 --> 00:16:11,040
issue at a high level

421
00:16:11,040 --> 00:16:13,320
um so we developed a tool to automate

422
00:16:13,320 --> 00:16:15,660
permissions checks to kind of mitigate

423
00:16:15,660 --> 00:16:17,639
this broadly in addition to the

424
00:16:17,639 --> 00:16:20,519
individual's individual fixes how does

425
00:16:20,519 --> 00:16:24,000
this tool work it's fairly simple so

426
00:16:24,000 --> 00:16:25,860
when you know what the expected response

427
00:16:25,860 --> 00:16:27,360
for a request can be you can check

428
00:16:27,360 --> 00:16:29,279
whether an API endpoint is working as

429
00:16:29,279 --> 00:16:32,339
properly so so these two examples or

430
00:16:32,339 --> 00:16:34,440
these two requests are made by a

431
00:16:34,440 --> 00:16:36,420
non-admin user

432
00:16:36,420 --> 00:16:38,519
if they're saying hey get my account and

433
00:16:38,519 --> 00:16:40,560
we get a 200 okay that seems expected

434
00:16:40,560 --> 00:16:41,940
because every user should be able to

435
00:16:41,940 --> 00:16:43,860
access their own account but if they try

436
00:16:43,860 --> 00:16:45,660
to access the admin portal they should

437
00:16:45,660 --> 00:16:46,860
get something that says hey you're not

438
00:16:46,860 --> 00:16:49,740
authorized to access this since you're

439
00:16:49,740 --> 00:16:51,560
not an admin

440
00:16:51,560 --> 00:16:54,360
if we see a case where we have a

441
00:16:54,360 --> 00:16:56,759
non-admin user or some user without the

442
00:16:56,759 --> 00:16:58,259
proper permissions and they're able to

443
00:16:58,259 --> 00:16:59,759
make a request to an endpoint and we see

444
00:16:59,759 --> 00:17:02,699
a response that's not what we expect

445
00:17:02,699 --> 00:17:04,919
like a 200 okay here then we know that

446
00:17:04,919 --> 00:17:07,980
there's that something is wrong

447
00:17:07,980 --> 00:17:10,919
and so uh my co-worker Sean uh worked to

448
00:17:10,919 --> 00:17:12,240
create this tool which it's called

449
00:17:12,240 --> 00:17:14,280
generator and what it does is it takes

450
00:17:14,280 --> 00:17:17,400
an open API spec and builds HTTP

451
00:17:17,400 --> 00:17:19,980
requests so that you can try a bunch of

452
00:17:19,980 --> 00:17:23,040
different quests really easily we had

453
00:17:23,040 --> 00:17:25,140
data about what permissions we expected

454
00:17:25,140 --> 00:17:27,359
to see on what endpoints so we used this

455
00:17:27,359 --> 00:17:29,840
tool to generate hundreds of different

456
00:17:29,840 --> 00:17:32,760
requests and then compare the responses

457
00:17:32,760 --> 00:17:35,700
that we saw with our expected responses

458
00:17:35,700 --> 00:17:37,140
and we tried this with a lot of

459
00:17:37,140 --> 00:17:38,700
different permissions so that we can

460
00:17:38,700 --> 00:17:41,100
kind of test in Mass the different

461
00:17:41,100 --> 00:17:43,740
endpoints and so using this tool we were

462
00:17:43,740 --> 00:17:45,240
able to identify additional issues

463
00:17:45,240 --> 00:17:47,100
beyond what had been reported to us

464
00:17:47,100 --> 00:17:49,380
through our external researchers

465
00:17:49,380 --> 00:17:52,020
and in addition to fixing those issues

466
00:17:52,020 --> 00:17:54,960
we met with the team who owned that API

467
00:17:54,960 --> 00:17:56,580
and they're in the process of

468
00:17:56,580 --> 00:17:58,740
integrating the automated permissions

469
00:17:58,740 --> 00:18:00,360
checks so that if there are any changes

470
00:18:00,360 --> 00:18:01,799
in the future they should be caught

471
00:18:01,799 --> 00:18:04,320
automatically it is open source so if

472
00:18:04,320 --> 00:18:05,400
you're interested in looking at it and

473
00:18:05,400 --> 00:18:08,220
playing around you can scan that code or

474
00:18:08,220 --> 00:18:11,940
just go to that link there

475
00:18:11,940 --> 00:18:13,980
so before I close out I'm going to talk

476
00:18:13,980 --> 00:18:15,840
about some of the most helpful learning

477
00:18:15,840 --> 00:18:18,840
resources for me if I was new to

478
00:18:18,840 --> 00:18:20,820
security these are what I wish I would

479
00:18:20,820 --> 00:18:22,160
have known about

480
00:18:22,160 --> 00:18:23,880
whether learning about web

481
00:18:23,880 --> 00:18:25,860
vulnerabilities or or bug Bounty as well

482
00:18:25,860 --> 00:18:28,140
specifically

483
00:18:28,140 --> 00:18:31,440
uh personally web Security Academy is my

484
00:18:31,440 --> 00:18:33,780
favorite Learning Resource it's produced

485
00:18:33,780 --> 00:18:36,000
by portswiger who creates the web

486
00:18:36,000 --> 00:18:37,679
Security application burp Suite which is

487
00:18:37,679 --> 00:18:40,520
a really helpful tool for hackers

488
00:18:40,520 --> 00:18:43,440
it has really helpful explanations for

489
00:18:43,440 --> 00:18:45,539
all of the most common types of web

490
00:18:45,539 --> 00:18:47,100
vulnerabilities that you'll see so

491
00:18:47,100 --> 00:18:48,059
everything you've seen in this

492
00:18:48,059 --> 00:18:49,799
presentation and more they've got really

493
00:18:49,799 --> 00:18:52,220
great examples of what it is

494
00:18:52,220 --> 00:18:55,020
there where I took the illustrations for

495
00:18:55,020 --> 00:18:56,640
a lot of those bugs

496
00:18:56,640 --> 00:18:58,559
but my favorite thing about them is that

497
00:18:58,559 --> 00:19:00,059
they have Labs that you can practice

498
00:19:00,059 --> 00:19:01,799
every type of vulnerability you learn

499
00:19:01,799 --> 00:19:03,240
about so if you learn about access

500
00:19:03,240 --> 00:19:05,580
control they'll spin up a vulnerable web

501
00:19:05,580 --> 00:19:07,679
server and you can go there and test it

502
00:19:07,679 --> 00:19:09,419
out yourself see how it works in

503
00:19:09,419 --> 00:19:10,980
practice

504
00:19:10,980 --> 00:19:12,780
um it's it's free as well it's a really

505
00:19:12,780 --> 00:19:16,020
amazing resource second awasp which is

506
00:19:16,020 --> 00:19:17,460
short for the open web Security

507
00:19:17,460 --> 00:19:19,980
application open web application

508
00:19:19,980 --> 00:19:21,780
security project they're a non-profit

509
00:19:21,780 --> 00:19:23,700
Foundation that works to improve the

510
00:19:23,700 --> 00:19:25,740
security of software I mentioned the OS

511
00:19:25,740 --> 00:19:27,900
top 10 a little earlier which is kind of

512
00:19:27,900 --> 00:19:30,000
a broad Guide to the most critical web

513
00:19:30,000 --> 00:19:32,100
security issues seen across the industry

514
00:19:32,100 --> 00:19:34,380
and one of my favorite things about

515
00:19:34,380 --> 00:19:36,660
owasp is their cheat sheet Series where

516
00:19:36,660 --> 00:19:38,640
they go into a lot of detail about how

517
00:19:38,640 --> 00:19:40,220
to mitigate

518
00:19:40,220 --> 00:19:43,440
common issues so if web Security Academy

519
00:19:43,440 --> 00:19:45,419
is my favorite place to learn about how

520
00:19:45,419 --> 00:19:47,820
to find and exploit issues I think the

521
00:19:47,820 --> 00:19:49,320
Olaf cheat sheet is probably my favorite

522
00:19:49,320 --> 00:19:51,960
place to learn how to fix those

523
00:19:51,960 --> 00:19:54,299
online courses can be really helpful

524
00:19:54,299 --> 00:19:56,580
there are a lot of Great Courses across

525
00:19:56,580 --> 00:19:58,380
YouTube LinkedIn learning pluralsight

526
00:19:58,380 --> 00:20:00,419
anywhere anything you're interested you

527
00:20:00,419 --> 00:20:02,820
can find there's probably free and paid

528
00:20:02,820 --> 00:20:04,980
courses a lot of the free ones are

529
00:20:04,980 --> 00:20:07,860
really good and finally community so

530
00:20:07,860 --> 00:20:09,660
here Saint Khan it's a great place to

531
00:20:09,660 --> 00:20:13,559
learn this is uh I I still consider

532
00:20:13,559 --> 00:20:15,600
myself fairly new to security and I

533
00:20:15,600 --> 00:20:17,280
found people are really willing to help

534
00:20:17,280 --> 00:20:21,720
to teach and places like this is a is a

535
00:20:21,720 --> 00:20:23,340
great a place like St Khan is a great

536
00:20:23,340 --> 00:20:25,939
place to do that

537
00:20:25,980 --> 00:20:27,299
um so if you decide that you want to

538
00:20:27,299 --> 00:20:29,220
learn about bug Bounty learn about web

539
00:20:29,220 --> 00:20:31,980
vulnerabilities and you find a bug in a

540
00:20:31,980 --> 00:20:34,200
Microsoft product please partner with us

541
00:20:34,200 --> 00:20:36,480
become a Bug Hunter and you can report

542
00:20:36,480 --> 00:20:37,860
it to us through our through our

543
00:20:37,860 --> 00:20:39,660
security portal here

544
00:20:39,660 --> 00:20:42,600
I'll also note we are hiring if this

545
00:20:42,600 --> 00:20:44,520
stuff is interesting to you you're

546
00:20:44,520 --> 00:20:45,960
interested in looking at bugs and

547
00:20:45,960 --> 00:20:47,820
thinking about ways to mitigate we are

548
00:20:47,820 --> 00:20:50,220
hiring two senior positions it is remote

549
00:20:50,220 --> 00:20:51,960
friendly so I'm the only one of my team

550
00:20:51,960 --> 00:20:53,820
based in Utah we have people all across

551
00:20:53,820 --> 00:20:55,220
the U.S we even have a few people

552
00:20:55,220 --> 00:20:58,380
internationally you can apply either by

553
00:20:58,380 --> 00:21:00,120
going to careers.microsoft.com and

554
00:21:00,120 --> 00:21:02,280
searching for this job ID here or I've

555
00:21:02,280 --> 00:21:06,139
linked with the QR code here

556
00:21:06,179 --> 00:21:08,220
um so I'll close off a big thank you

557
00:21:08,220 --> 00:21:09,960
um and I'll be happy I'll be up here if

558
00:21:09,960 --> 00:21:11,400
anybody has any questions or wants to

559
00:21:11,400 --> 00:21:14,360
talk so thank you

