1
00:00:00,179 --> 00:00:03,480
okay let's get started so thanks guys

2
00:00:03,480 --> 00:00:06,120
for your patience while we figured the

3
00:00:06,120 --> 00:00:08,280
audio part out

4
00:00:08,280 --> 00:00:10,620
good afternoon everyone today we will be

5
00:00:10,620 --> 00:00:12,599
talking about securing kubernetes

6
00:00:12,599 --> 00:00:15,179
deployment at scale I am sohini

7
00:00:15,179 --> 00:00:18,240
Mukherjee and I am a security partner at

8
00:00:18,240 --> 00:00:20,340
LinkedIn

9
00:00:20,340 --> 00:00:23,539
so let's get started

10
00:00:23,580 --> 00:00:25,380
here's our agenda for today we'll

11
00:00:25,380 --> 00:00:27,359
briefly talk about the kubernetes

12
00:00:27,359 --> 00:00:30,180
architecture we'll discuss some attack

13
00:00:30,180 --> 00:00:33,360
scenarios we'll explore how we can

14
00:00:33,360 --> 00:00:35,760
secure such kubernetes deployment at

15
00:00:35,760 --> 00:00:38,399
scale and of course we'll end with the

16
00:00:38,399 --> 00:00:39,899
conclusion

17
00:00:39,899 --> 00:00:42,600
so what is containerization

18
00:00:42,600 --> 00:00:44,879
so as the world has moved from a

19
00:00:44,879 --> 00:00:47,399
monolithic to a microservice based

20
00:00:47,399 --> 00:00:49,980
architecture more and more developers

21
00:00:49,980 --> 00:00:52,260
are deploying their workloads via

22
00:00:52,260 --> 00:00:55,500
containerization either on-prem or in

23
00:00:55,500 --> 00:00:57,300
cloud services

24
00:00:57,300 --> 00:00:59,879
the caveat being not all such

25
00:00:59,879 --> 00:01:03,600
implementations were designed keeping

26
00:01:03,600 --> 00:01:06,240
Security in mind that is not all such

27
00:01:06,240 --> 00:01:10,799
implementations are secured by default

28
00:01:10,799 --> 00:01:13,260
um and sensitive data can be

29
00:01:13,260 --> 00:01:15,360
inadvertently leaked due to various

30
00:01:15,360 --> 00:01:17,220
security control failures or

31
00:01:17,220 --> 00:01:20,100
misconfigurations

32
00:01:20,100 --> 00:01:22,560
so containers are just lightweight VMS

33
00:01:22,560 --> 00:01:25,560
right would you agree

34
00:01:25,560 --> 00:01:28,860
no okay let's see

35
00:01:28,860 --> 00:01:31,860
so how does containerization differ from

36
00:01:31,860 --> 00:01:34,020
virtualization and I'll let you read

37
00:01:34,020 --> 00:01:36,119
through this slide but the bottom line

38
00:01:36,119 --> 00:01:39,299
being a containers virtualize the

39
00:01:39,299 --> 00:01:41,820
operating system so that multiple

40
00:01:41,820 --> 00:01:44,820
workloads or multiple processes can run

41
00:01:44,820 --> 00:01:47,700
on the single OS instance sharing the

42
00:01:47,700 --> 00:01:50,700
same host kernel space right on the

43
00:01:50,700 --> 00:01:53,399
other hand for virtual machines it's the

44
00:01:53,399 --> 00:01:55,920
hardware that is virtualized to run

45
00:01:55,920 --> 00:01:58,320
multiple operating system instances

46
00:01:58,320 --> 00:02:00,899
called guest OS and this is achieved by

47
00:02:00,899 --> 00:02:03,840
something called an hypervisor right

48
00:02:03,840 --> 00:02:07,759
now containers containers don't

49
00:02:07,759 --> 00:02:11,160
Implement hypervisor and hence are

50
00:02:11,160 --> 00:02:14,099
deemed lightweight or you know more

51
00:02:14,099 --> 00:02:16,680
agile way of achieving virtualization

52
00:02:16,680 --> 00:02:19,200
and faster resource provisioning

53
00:02:19,200 --> 00:02:21,420
however it might be fair to state that

54
00:02:21,420 --> 00:02:24,120
containers are not secure by default as

55
00:02:24,120 --> 00:02:26,760
in we need to walk that extra mile to

56
00:02:26,760 --> 00:02:28,980
make sure that the workloads are secure

57
00:02:28,980 --> 00:02:34,099
in a hostile multi-tenant environment

58
00:02:34,680 --> 00:02:37,440
now let's talk about the architecture a

59
00:02:37,440 --> 00:02:39,000
bit

60
00:02:39,000 --> 00:02:42,780
so here's a client server architecture

61
00:02:42,780 --> 00:02:45,000
on the left hand side we have the

62
00:02:45,000 --> 00:02:48,000
control plane components and the the

63
00:02:48,000 --> 00:02:51,000
cube scheduler the hcd the controller

64
00:02:51,000 --> 00:02:53,459
manager and the API server

65
00:02:53,459 --> 00:02:55,680
and on the right hand side we have the

66
00:02:55,680 --> 00:02:59,420
worker nodes so nodes can be bare metal

67
00:02:59,420 --> 00:03:04,739
or virtual machine and it it basically

68
00:03:04,739 --> 00:03:07,560
stages the container right as in like

69
00:03:07,560 --> 00:03:10,319
the container runtime the cubelet Q

70
00:03:10,319 --> 00:03:11,400
proxy

71
00:03:11,400 --> 00:03:14,340
and parts are the smallest unit of

72
00:03:14,340 --> 00:03:16,980
compute in the kubernetes world and I'd

73
00:03:16,980 --> 00:03:18,780
be using pods and containers

74
00:03:18,780 --> 00:03:20,700
interchangeably throughout this

75
00:03:20,700 --> 00:03:23,220
presentation

76
00:03:23,220 --> 00:03:25,080
now let's talk about some attack

77
00:03:25,080 --> 00:03:27,800
scenarios

78
00:03:28,440 --> 00:03:30,840
for Mining and crypto jacking remains

79
00:03:30,840 --> 00:03:33,120
one of the most popular attack vectors

80
00:03:33,120 --> 00:03:35,940
as far as containers and container

81
00:03:35,940 --> 00:03:39,000
orchestration is concerned and the

82
00:03:39,000 --> 00:03:41,700
primary objecting objective being to hog

83
00:03:41,700 --> 00:03:43,980
Computing resources right

84
00:03:43,980 --> 00:03:46,860
now that being said it comes with an

85
00:03:46,860 --> 00:03:49,500
inherent risk of sensitive data being

86
00:03:49,500 --> 00:03:51,239
exfiltrated

87
00:03:51,239 --> 00:03:54,540
and this can be achieved uh if an

88
00:03:54,540 --> 00:03:57,659
attacker is successful in breaking out

89
00:03:57,659 --> 00:04:00,239
of the bounce of an container and

90
00:04:00,239 --> 00:04:02,700
escaping into the underlying host kernel

91
00:04:02,700 --> 00:04:04,620
space

92
00:04:04,620 --> 00:04:08,400
so any vulnerability that allows the

93
00:04:08,400 --> 00:04:11,580
attacker to modify the you know the

94
00:04:11,580 --> 00:04:13,799
underlying kernel data structure can

95
00:04:13,799 --> 00:04:16,320
lead to a container Escape scenario

96
00:04:16,320 --> 00:04:19,199
and one of the Avenues to achieve that

97
00:04:19,199 --> 00:04:22,800
is by compromising a privileged

98
00:04:22,800 --> 00:04:25,199
container

99
00:04:25,199 --> 00:04:28,680
now let's look at one such tax scenarios

100
00:04:28,680 --> 00:04:31,860
that has been detected in the Wild by

101
00:04:31,860 --> 00:04:34,440
Trend micros Honeypot

102
00:04:34,440 --> 00:04:37,199
now I can't explicitly talk about

103
00:04:37,199 --> 00:04:40,259
attacks that I have seen in real world

104
00:04:40,259 --> 00:04:43,020
scenarios but this is you know pretty

105
00:04:43,020 --> 00:04:46,560
close to replicating the standard ttps

106
00:04:46,560 --> 00:04:51,780
that we would see in Aina in a container

107
00:04:51,780 --> 00:04:54,900
compromise scenario

108
00:04:54,900 --> 00:04:57,840
so let's see what happens here

109
00:04:57,840 --> 00:05:01,139
attacker control scanner called Z grab

110
00:05:01,139 --> 00:05:03,960
has been you know scanning uh for

111
00:05:03,960 --> 00:05:06,780
containers with exposed API

112
00:05:06,780 --> 00:05:09,479
one such configuration misconfiguration

113
00:05:09,479 --> 00:05:12,240
is detected the attacker would pull and

114
00:05:12,240 --> 00:05:14,759
deploy a malicious container

115
00:05:14,759 --> 00:05:17,100
now one of the deployment parameters

116
00:05:17,100 --> 00:05:19,919
here is privileged which is you know one

117
00:05:19,919 --> 00:05:21,780
of the requirements for this specific

118
00:05:21,780 --> 00:05:24,660
container Escape technique

119
00:05:24,660 --> 00:05:26,880
now if you're following along with this

120
00:05:26,880 --> 00:05:30,120
diagram the attackers entry point is a

121
00:05:30,120 --> 00:05:32,759
shell script called com.sh which is you

122
00:05:32,759 --> 00:05:34,440
know towards the middle portion of this

123
00:05:34,440 --> 00:05:35,580
diagram

124
00:05:35,580 --> 00:05:39,360
now come dot sh is executed as part of

125
00:05:39,360 --> 00:05:41,280
the malicious container image that we

126
00:05:41,280 --> 00:05:42,720
just referred

127
00:05:42,720 --> 00:05:46,500
com dot sh calls nginx which is our

128
00:05:46,500 --> 00:05:48,419
cryptocurrency Miner

129
00:05:48,419 --> 00:05:50,400
now you can see the attacker you know

130
00:05:50,400 --> 00:05:53,400
closely you know names the The Miner as

131
00:05:53,400 --> 00:05:56,340
nginx in an attempt to fly under the

132
00:05:56,340 --> 00:05:58,440
radar and you know pass off as something

133
00:05:58,440 --> 00:06:01,199
legitimate and event detection

134
00:06:01,199 --> 00:06:03,360
and until ultimately the attacker

135
00:06:03,360 --> 00:06:05,340
succeeds in in going ahead and and

136
00:06:05,340 --> 00:06:07,860
creating a mining pool

137
00:06:07,860 --> 00:06:10,039
foreign

138
00:06:17,000 --> 00:06:20,639
skated malware that actively targets

139
00:06:20,639 --> 00:06:24,780
Windows Server containers in the wild

140
00:06:24,780 --> 00:06:27,360
so before going into the details of this

141
00:06:27,360 --> 00:06:29,580
particular attack let's try to gain some

142
00:06:29,580 --> 00:06:32,880
context on how Windows implements

143
00:06:32,880 --> 00:06:35,160
containerization

144
00:06:35,160 --> 00:06:39,180
so Microsoft has two solutions one being

145
00:06:39,180 --> 00:06:42,060
running container inside individual

146
00:06:42,060 --> 00:06:45,180
virtual machines based on hypervisor

147
00:06:45,180 --> 00:06:47,460
the other which is the Windows Server

148
00:06:47,460 --> 00:06:49,259
container in the context of this

149
00:06:49,259 --> 00:06:51,000
particular attack scenario that we are

150
00:06:51,000 --> 00:06:53,280
discussing leverages something called

151
00:06:53,280 --> 00:06:55,860
Silo objects which is a Windows kernel

152
00:06:55,860 --> 00:06:59,340
feature to enforce isolation

153
00:06:59,340 --> 00:07:03,539
now this uh implementation resembles you

154
00:07:03,539 --> 00:07:06,419
know traditional Linux how how

155
00:07:06,419 --> 00:07:09,419
traditionally Linux implements container

156
00:07:09,419 --> 00:07:13,139
isolation with namespaces and and c

157
00:07:13,139 --> 00:07:15,479
groups that create logical partitions

158
00:07:15,479 --> 00:07:18,479
and separation of resources to enable

159
00:07:18,479 --> 00:07:20,940
multiple processes being run on the same

160
00:07:20,940 --> 00:07:22,740
host kernel space

161
00:07:22,740 --> 00:07:26,160
now some users prefer this this solution

162
00:07:26,160 --> 00:07:29,340
over hypervisor based isolation because

163
00:07:29,340 --> 00:07:31,500
you know running each container within

164
00:07:31,500 --> 00:07:33,599
an individual virtual machine comes with

165
00:07:33,599 --> 00:07:37,020
a performance cost right

166
00:07:37,020 --> 00:07:39,360
now Microsoft has an inter interesting

167
00:07:39,360 --> 00:07:43,139
disclaimer my Microsoft doesn't endorse

168
00:07:43,139 --> 00:07:46,020
silos to provide a high degree of

169
00:07:46,020 --> 00:07:48,660
isolation in hostile multi-tenant

170
00:07:48,660 --> 00:07:51,120
environments and instead recommends

171
00:07:51,120 --> 00:07:52,620
hypervisor

172
00:07:52,620 --> 00:07:56,520
if you are wondering why let's look at

173
00:07:56,520 --> 00:07:59,960
the exploit path of siloscope

174
00:07:59,960 --> 00:08:04,080
uh so the attacker achieves you know uh

175
00:08:04,080 --> 00:08:06,840
the initial foothold via say a remote

176
00:08:06,840 --> 00:08:09,360
code execution by exploiting a known

177
00:08:09,360 --> 00:08:11,580
vulnerability within a Windows container

178
00:08:11,580 --> 00:08:14,759
or you know maybe compromising a web

179
00:08:14,759 --> 00:08:18,180
server so once that initial foothold is

180
00:08:18,180 --> 00:08:21,120
established uh the attacker executes

181
00:08:21,120 --> 00:08:24,259
siloscape which is the binary Cloud

182
00:08:24,259 --> 00:08:26,819
malware.exe if you're following along in

183
00:08:26,819 --> 00:08:28,860
that diagram

184
00:08:28,860 --> 00:08:31,020
now the attacker implements an

185
00:08:31,020 --> 00:08:33,000
interesting Windows container Escape

186
00:08:33,000 --> 00:08:35,820
technique to gain code execution in the

187
00:08:35,820 --> 00:08:38,539
underlying node

188
00:08:38,539 --> 00:08:42,599
and how the attacker achieves that is by

189
00:08:42,599 --> 00:08:45,300
impersonating a special process in

190
00:08:45,300 --> 00:08:47,820
Windows containers called C exec as we

191
00:08:47,820 --> 00:08:50,580
see by dll injection

192
00:08:50,580 --> 00:08:53,040
now why I call this process a special

193
00:08:53,040 --> 00:08:55,920
process because this is responsible for

194
00:08:55,920 --> 00:08:58,320
many of the you know aspects of

195
00:08:58,320 --> 00:09:00,200
container execution

196
00:09:00,200 --> 00:09:03,180
and also you know holds the link between

197
00:09:03,180 --> 00:09:06,300
the host and the container and it also

198
00:09:06,300 --> 00:09:09,120
has something called TCB or trusted

199
00:09:09,120 --> 00:09:11,899
Computing based privileges

200
00:09:11,899 --> 00:09:16,200
uh now if a malicious process is able to

201
00:09:16,200 --> 00:09:21,120
execute you know or impersonate uh via

202
00:09:21,120 --> 00:09:24,180
this special process called C exec as we

203
00:09:24,180 --> 00:09:26,160
see it would inherit all the

204
00:09:26,160 --> 00:09:28,500
capabilities of that process

205
00:09:28,500 --> 00:09:31,560
now cxec as we see has trusted Computing

206
00:09:31,560 --> 00:09:33,779
based privileges so obviously now our

207
00:09:33,779 --> 00:09:36,600
malicious process has also attained the

208
00:09:36,600 --> 00:09:38,399
same privileges

209
00:09:38,399 --> 00:09:42,200
now TCB privileges are powerful and that

210
00:09:42,200 --> 00:09:45,240
lets her attacker create a global

211
00:09:45,240 --> 00:09:47,279
symbolic link to the host practically

212
00:09:47,279 --> 00:09:50,220
linking the containerized X drive to the

213
00:09:50,220 --> 00:09:51,660
host C drive

214
00:09:51,660 --> 00:09:54,180
and a successful container Escape has

215
00:09:54,180 --> 00:09:56,880
happened at this point

216
00:09:56,880 --> 00:10:00,420
uh now the attacker you know looks into

217
00:10:00,420 --> 00:10:02,519
the compromise node if it has enough

218
00:10:02,519 --> 00:10:05,339
privileges to create new kubernetes

219
00:10:05,339 --> 00:10:07,800
deployment to be able to run more crypto

220
00:10:07,800 --> 00:10:10,260
mining pools and this is basically an

221
00:10:10,260 --> 00:10:13,680
attempt to spread across the cluster

222
00:10:13,680 --> 00:10:17,279
now as is common for most malvers it

223
00:10:17,279 --> 00:10:19,620
will connect to its CNC server via the

224
00:10:19,620 --> 00:10:22,320
torn Network and open a back door to run

225
00:10:22,320 --> 00:10:24,600
crypto jackers and and potentially

226
00:10:24,600 --> 00:10:27,120
exfiltrate sensitive data if the cluster

227
00:10:27,120 --> 00:10:29,399
was you know holding critical critical

228
00:10:29,399 --> 00:10:31,760
information

229
00:10:32,820 --> 00:10:35,580
now having discussed you know couple of

230
00:10:35,580 --> 00:10:38,459
attack scenarios plan is spanning Linux

231
00:10:38,459 --> 00:10:41,820
as well as Windows containers do you

232
00:10:41,820 --> 00:10:44,339
feel the need for a structured approach

233
00:10:44,339 --> 00:10:47,279
to be able to articulate risk in in our

234
00:10:47,279 --> 00:10:49,320
kubernetes deployments

235
00:10:49,320 --> 00:10:53,579
so threat matrix by Microsoft and also

236
00:10:53,579 --> 00:10:55,380
the miter attack framework for

237
00:10:55,380 --> 00:10:58,920
kubernetes provides a similar structured

238
00:10:58,920 --> 00:11:01,440
approach to define the various attack

239
00:11:01,440 --> 00:11:04,860
vectors and be able to define the threat

240
00:11:04,860 --> 00:11:09,560
landscape of a kubernetes ecosystem

241
00:11:09,560 --> 00:11:13,260
now let's explore how we can secure such

242
00:11:13,260 --> 00:11:17,160
kubernetes deployments at scale

243
00:11:17,160 --> 00:11:20,279
and starting with kubernetes host

244
00:11:20,279 --> 00:11:22,500
so it is imperative to harden the

245
00:11:22,500 --> 00:11:24,720
underlying host by you know making sure

246
00:11:24,720 --> 00:11:26,339
that you are running the latest version

247
00:11:26,339 --> 00:11:28,440
of operating system

248
00:11:28,440 --> 00:11:30,779
as important is to make sure that you're

249
00:11:30,779 --> 00:11:32,880
running the latest version of kubernetes

250
00:11:32,880 --> 00:11:34,019
as well

251
00:11:34,019 --> 00:11:36,360
and the point that I am trying to make

252
00:11:36,360 --> 00:11:39,480
is you know a structured and streamlined

253
00:11:39,480 --> 00:11:41,519
patch management and configuration

254
00:11:41,519 --> 00:11:44,160
management system is extremely

255
00:11:44,160 --> 00:11:46,860
imperative to ensure a baseline security

256
00:11:46,860 --> 00:11:49,980
posture of the cluster and keeping

257
00:11:49,980 --> 00:11:52,500
vulnerabilities at Bay because a couple

258
00:11:52,500 --> 00:11:54,360
of attack scenarios that we just

259
00:11:54,360 --> 00:11:57,720
discussed you know the attacker gets the

260
00:11:57,720 --> 00:12:00,120
initial foothold into the cluster by

261
00:12:00,120 --> 00:12:02,519
exploiting a known vulnerability right

262
00:12:02,519 --> 00:12:04,740
and we don't want to do that I mean we

263
00:12:04,740 --> 00:12:07,140
don't want to get the task easier for

264
00:12:07,140 --> 00:12:09,480
the attackers

265
00:12:09,480 --> 00:12:12,839
talking about control plane security so

266
00:12:12,839 --> 00:12:15,959
a strong axis control on the various

267
00:12:15,959 --> 00:12:18,540
control plane components via

268
00:12:18,540 --> 00:12:21,120
authentication authorization and also

269
00:12:21,120 --> 00:12:23,820
relevant Network segmentation is

270
00:12:23,820 --> 00:12:27,060
extremely critical and why I would say

271
00:12:27,060 --> 00:12:29,519
so because you know say for example it's

272
00:12:29,519 --> 00:12:31,620
CD it's it's a journal it's it's

273
00:12:31,620 --> 00:12:34,380
something that that that holds a

274
00:12:34,380 --> 00:12:36,240
critical cluster information like

275
00:12:36,240 --> 00:12:39,600
cluster state right so a right access to

276
00:12:39,600 --> 00:12:42,120
the hcd can be equivalent to gaining

277
00:12:42,120 --> 00:12:45,360
root on on the cluster even read access

278
00:12:45,360 --> 00:12:48,420
to the hcd can be you know can help the

279
00:12:48,420 --> 00:12:50,579
attacker in escalating privileges pretty

280
00:12:50,579 --> 00:12:51,540
fast

281
00:12:51,540 --> 00:12:54,420
uh what about the the API server it's

282
00:12:54,420 --> 00:12:56,579
kind of the front end per se right it's

283
00:12:56,579 --> 00:12:58,200
the first line of defense against

284
00:12:58,200 --> 00:13:01,560
attackers so the point I'm trying to

285
00:13:01,560 --> 00:13:03,600
make is you know access should be

286
00:13:03,600 --> 00:13:06,480
strongly monitored and also controlled

287
00:13:06,480 --> 00:13:08,579
to make sure that the security of the

288
00:13:08,579 --> 00:13:13,019
control plane components are are ensured

289
00:13:13,019 --> 00:13:15,480
let's talk about some of the kubernetes

290
00:13:15,480 --> 00:13:18,899
components limiting SSH access to the

291
00:13:18,899 --> 00:13:21,480
kubernetes node can help us protect

292
00:13:21,480 --> 00:13:23,639
against unauthorized access to host

293
00:13:23,639 --> 00:13:25,500
resources

294
00:13:25,500 --> 00:13:28,079
similarly restricting access to the

295
00:13:28,079 --> 00:13:29,760
cubelet

296
00:13:29,760 --> 00:13:31,940
and also

297
00:13:31,940 --> 00:13:35,399
encrypting in cluster communication via

298
00:13:35,399 --> 00:13:38,940
TLS and I am referring to mtls here now

299
00:13:38,940 --> 00:13:41,160
you might have you know a counter

300
00:13:41,160 --> 00:13:43,920
question that we are talking about in

301
00:13:43,920 --> 00:13:46,500
cluster communication is there a need to

302
00:13:46,500 --> 00:13:50,100
to encrypt it I would argue that we are

303
00:13:50,100 --> 00:13:52,980
talking about a a multi-tenant

304
00:13:52,980 --> 00:13:55,920
environment here right so there is a

305
00:13:55,920 --> 00:13:58,860
need to secure components within the

306
00:13:58,860 --> 00:14:01,700
cluster as well

307
00:14:02,459 --> 00:14:05,040
so let's see some of the Guard drills

308
00:14:05,040 --> 00:14:07,320
that we can Implement in the build

309
00:14:07,320 --> 00:14:10,200
deploy and runtime phase

310
00:14:10,200 --> 00:14:12,360
and starting with image management so

311
00:14:12,360 --> 00:14:15,000
what is a container image so container

312
00:14:15,000 --> 00:14:17,660
image is basically a standalone

313
00:14:17,660 --> 00:14:20,940
executable package of software that is

314
00:14:20,940 --> 00:14:22,980
run to that is used to run any

315
00:14:22,980 --> 00:14:24,360
application

316
00:14:24,360 --> 00:14:28,200
say code runtime system libraries system

317
00:14:28,200 --> 00:14:31,200
tools so what is the risk here and the

318
00:14:31,200 --> 00:14:34,380
risk is to run untrusted code

319
00:14:34,380 --> 00:14:36,959
so it's extremely important that your

320
00:14:36,959 --> 00:14:40,199
base images are approved and signed and

321
00:14:40,199 --> 00:14:42,540
controlled by a central deployment

322
00:14:42,540 --> 00:14:44,880
Pipeline with A continuous scanning

323
00:14:44,880 --> 00:14:47,760
Cadence for vulnerabilities

324
00:14:47,760 --> 00:14:49,980
it's recommended to use minimal base

325
00:14:49,980 --> 00:14:52,019
image with you know without the

326
00:14:52,019 --> 00:14:54,240
unnecessary packages

327
00:14:54,240 --> 00:14:56,699
even in your Dev environment it is

328
00:14:56,699 --> 00:15:01,139
dangerous to let users pull and in and

329
00:15:01,139 --> 00:15:03,959
install random images from unknown

330
00:15:03,959 --> 00:15:06,120
sources because it can be subject to

331
00:15:06,120 --> 00:15:08,459
supply chain kind of attack where you

332
00:15:08,459 --> 00:15:10,440
know a malicious piece of code or a

333
00:15:10,440 --> 00:15:12,720
third-party Library can be injected to a

334
00:15:12,720 --> 00:15:15,300
seemingly benign image

335
00:15:15,300 --> 00:15:16,860
talking about secret management

336
00:15:16,860 --> 00:15:19,320
shouldn't be any hard-coded Secret in

337
00:15:19,320 --> 00:15:21,959
configs uh Secrets shouldn't be passed

338
00:15:21,959 --> 00:15:23,760
by environment variables and of course

339
00:15:23,760 --> 00:15:26,100
there should be scanning to detect any

340
00:15:26,100 --> 00:15:28,980
exposed secrets in terms of you know API

341
00:15:28,980 --> 00:15:32,100
tokens or our passwords or

342
00:15:32,100 --> 00:15:34,440
um or or in any sense and sensitive

343
00:15:34,440 --> 00:15:36,920
information

344
00:15:37,380 --> 00:15:40,860
so implementing Network policies uh to

345
00:15:40,860 --> 00:15:43,920
control traffic within the cluster and

346
00:15:43,920 --> 00:15:46,199
this goes a long way in restricting

347
00:15:46,199 --> 00:15:48,660
lateral movement say if a certain pod

348
00:15:48,660 --> 00:15:50,820
has been compromised right and the

349
00:15:50,820 --> 00:15:52,740
attacker is trying to spread across the

350
00:15:52,740 --> 00:15:55,320
cluster like we had observed in one of

351
00:15:55,320 --> 00:15:57,420
our attack scenarios implementing

352
00:15:57,420 --> 00:16:00,240
Network policies goes a long way in

353
00:16:00,240 --> 00:16:02,579
restricting the that kind of lateral

354
00:16:02,579 --> 00:16:05,339
movement so you know more often than not

355
00:16:05,339 --> 00:16:08,160
by default any pod within a cluster can

356
00:16:08,160 --> 00:16:10,560
talk to any other Port but say a

357
00:16:10,560 --> 00:16:13,440
front-end pod might need to talk to a

358
00:16:13,440 --> 00:16:16,500
back-end pod but has no need to talk to

359
00:16:16,500 --> 00:16:19,260
or to interact with the storage spot and

360
00:16:19,260 --> 00:16:21,120
those are the policies that we are

361
00:16:21,120 --> 00:16:23,699
referring to here

362
00:16:23,699 --> 00:16:27,420
talking about pod security policies

363
00:16:27,420 --> 00:16:30,120
so running privileged containers are

364
00:16:30,120 --> 00:16:33,060
allowing privileged escalation is risky

365
00:16:33,060 --> 00:16:35,940
because it lets uh containers access

366
00:16:35,940 --> 00:16:39,060
kernel capabilities of the host and you

367
00:16:39,060 --> 00:16:41,579
know it also goes a long way in you know

368
00:16:41,579 --> 00:16:43,680
bypassing a lot of the container

369
00:16:43,680 --> 00:16:46,560
isolation techniques and as we saw in

370
00:16:46,560 --> 00:16:48,540
our summer for attack scenarios it's

371
00:16:48,540 --> 00:16:52,620
also a prerequisite for container Escape

372
00:16:52,620 --> 00:16:56,279
a running applications as root so this

373
00:16:56,279 --> 00:16:58,380
is a misconfiguration that I have

374
00:16:58,380 --> 00:17:00,959
noticed in in many clusters now you

375
00:17:00,959 --> 00:17:03,600
might argue there might be ports as in

376
00:17:03,600 --> 00:17:05,819
like infrastructure level parts that

377
00:17:05,819 --> 00:17:07,740
might need to run with root privileges

378
00:17:07,740 --> 00:17:10,079
true but it shouldn't be the norm right

379
00:17:10,079 --> 00:17:12,599
and what's the risk here because if a

380
00:17:12,599 --> 00:17:14,520
certain pod or a container is

381
00:17:14,520 --> 00:17:16,799
compromised the attacker would now have

382
00:17:16,799 --> 00:17:19,140
root level privileges available to them

383
00:17:19,140 --> 00:17:21,059
in a platter right and we don't want

384
00:17:21,059 --> 00:17:22,699
that

385
00:17:22,699 --> 00:17:27,299
ah limiting uh read or limiting the

386
00:17:27,299 --> 00:17:30,120
parameter of of containers to read only

387
00:17:30,120 --> 00:17:33,179
file system and also this goes a long

388
00:17:33,179 --> 00:17:36,559
way in in limiting the damage in case a

389
00:17:36,559 --> 00:17:39,960
container compromise has happened and

390
00:17:39,960 --> 00:17:42,600
you know it prevents the attacker from

391
00:17:42,600 --> 00:17:46,219
writing to the host file system

392
00:17:46,380 --> 00:17:49,400
similarly implementing a Linux security

393
00:17:49,400 --> 00:17:52,500
controls like acyl Linux aparma and

394
00:17:52,500 --> 00:17:55,679
second wherever applicable goes a long

395
00:17:55,679 --> 00:17:58,020
way in improving the security posture of

396
00:17:58,020 --> 00:17:59,760
the cluster

397
00:17:59,760 --> 00:18:03,059
are back fine grained Access Control can

398
00:18:03,059 --> 00:18:05,820
be implemented and least privileged

399
00:18:05,820 --> 00:18:08,400
insured via our back and the best

400
00:18:08,400 --> 00:18:09,960
practice being you know assign

401
00:18:09,960 --> 00:18:12,600
permissions at namespace level for

402
00:18:12,600 --> 00:18:15,480
example Implement permissions via role

403
00:18:15,480 --> 00:18:17,880
bindings and not cluster role bindings

404
00:18:17,880 --> 00:18:21,480
to be able to provide permissions within

405
00:18:21,480 --> 00:18:25,500
the context of that particular namespace

406
00:18:25,500 --> 00:18:28,559
so a little trivia here so this is a

407
00:18:28,559 --> 00:18:32,580
snapshot of Port security policy one is

408
00:18:32,580 --> 00:18:35,039
a restrictive one and another a

409
00:18:35,039 --> 00:18:37,380
permissive one any guesses which one is

410
00:18:37,380 --> 00:18:40,080
what the left hand side is a restrictive

411
00:18:40,080 --> 00:18:41,520
or permissive

412
00:18:41,520 --> 00:18:44,418
guesses

413
00:18:44,460 --> 00:18:47,400
yep the left hand side is a restrictive

414
00:18:47,400 --> 00:18:49,260
one and the right hand side is a

415
00:18:49,260 --> 00:18:51,419
permissive one as you can see the

416
00:18:51,419 --> 00:18:54,299
privileged flag is set as true the

417
00:18:54,299 --> 00:18:56,100
volumes that can be mounted you know

418
00:18:56,100 --> 00:18:59,840
it's it's a wild card that is set up

419
00:19:00,720 --> 00:19:02,820
so we discuss certain guardrails right

420
00:19:02,820 --> 00:19:04,799
but how do we make sure that we

421
00:19:04,799 --> 00:19:07,380
Implement some of these guardrails at

422
00:19:07,380 --> 00:19:09,059
scale

423
00:19:09,059 --> 00:19:12,240
so Opa or open policy agent was

424
00:19:12,240 --> 00:19:15,539
introduced in 2016 and this is meant to

425
00:19:15,539 --> 00:19:18,900
provide a unified method of enforcing

426
00:19:18,900 --> 00:19:21,720
security policy across the stack

427
00:19:21,720 --> 00:19:25,140
its domain agnostic and an open source

428
00:19:25,140 --> 00:19:27,660
and opa can be effectively used for

429
00:19:27,660 --> 00:19:30,600
kubernetes admission control

430
00:19:30,600 --> 00:19:33,360
for example we discuss some guard drills

431
00:19:33,360 --> 00:19:36,299
like not allowing container images to be

432
00:19:36,299 --> 00:19:39,840
run from untrusted sources or podming

433
00:19:39,840 --> 00:19:42,059
disallowed to run as root and this

434
00:19:42,059 --> 00:19:45,780
policies can be implemented via opa

435
00:19:45,780 --> 00:19:48,120
op also integrates directly with the

436
00:19:48,120 --> 00:19:51,360
kubernetes API server and you have the

437
00:19:51,360 --> 00:19:54,000
flexibility of implementing it early in

438
00:19:54,000 --> 00:19:56,039
the development life cycle in the cict

439
00:19:56,039 --> 00:19:58,980
pipeline or just ran it ad hoc at a

440
00:19:58,980 --> 00:20:01,320
later time to monitor compliance across

441
00:20:01,320 --> 00:20:03,299
the cluster

442
00:20:03,299 --> 00:20:06,179
it can also be used for other purposes

443
00:20:06,179 --> 00:20:09,000
like regulating service mesh mesh

444
00:20:09,000 --> 00:20:12,360
architecture to implement policies to

445
00:20:12,360 --> 00:20:15,480
prevent lateral movement

446
00:20:15,480 --> 00:20:18,000
so we discussed guardrails right I mean

447
00:20:18,000 --> 00:20:20,520
what is in spite of implementing all the

448
00:20:20,520 --> 00:20:22,980
guardrails things go wrong I mean would

449
00:20:22,980 --> 00:20:25,440
we have enough visibility or detection

450
00:20:25,440 --> 00:20:27,720
rules which should be able to alert us

451
00:20:27,720 --> 00:20:30,660
on an unauthorized access attempt or

452
00:20:30,660 --> 00:20:34,020
compromise scenario so it is possible to

453
00:20:34,020 --> 00:20:36,780
parse Linux system calls and configure

454
00:20:36,780 --> 00:20:39,539
detection rules which might point to us

455
00:20:39,539 --> 00:20:42,600
to a compromise scenario so for example

456
00:20:42,600 --> 00:20:44,940
shell is being run inside a container

457
00:20:44,940 --> 00:20:47,220
now you might argue this is something

458
00:20:47,220 --> 00:20:49,260
that's a normal behavior within my

459
00:20:49,260 --> 00:20:51,179
cluster I mean my my developers

460
00:20:51,179 --> 00:20:55,380
regularly use to run shell to for

461
00:20:55,380 --> 00:20:58,020
troubleshooting right uh what about

462
00:20:58,020 --> 00:21:00,240
configuring something to detect reverse

463
00:21:00,240 --> 00:21:02,580
shell connection and as we know it's

464
00:21:02,580 --> 00:21:04,860
it's it's popular among attackers right

465
00:21:04,860 --> 00:21:08,899
attackers love reversials

466
00:21:09,720 --> 00:21:12,299
how about some artifacts like a

467
00:21:12,299 --> 00:21:14,460
container mounts a sensitive path from

468
00:21:14,460 --> 00:21:17,160
the host such as slash proc and this is

469
00:21:17,160 --> 00:21:19,200
a behavior that hasn't been seen in the

470
00:21:19,200 --> 00:21:22,140
past right just points to some outlier

471
00:21:22,140 --> 00:21:24,299
behavior that gives enough information

472
00:21:24,299 --> 00:21:27,660
to to pursue an investigation

473
00:21:27,660 --> 00:21:30,480
similarly a sensitive file like its C

474
00:21:30,480 --> 00:21:32,940
Shadow and a container has no need to

475
00:21:32,940 --> 00:21:34,980
access such a file but it is being

476
00:21:34,980 --> 00:21:37,440
accessed and access attempt to its a

477
00:21:37,440 --> 00:21:39,780
shadow again just you know triggers a

478
00:21:39,780 --> 00:21:41,580
detection Rule and calls for further

479
00:21:41,580 --> 00:21:44,120
investigation

480
00:21:44,120 --> 00:21:47,880
a standard system binary like LS has no

481
00:21:47,880 --> 00:21:50,940
business need or or any need whatsoever

482
00:21:50,940 --> 00:21:53,580
to make a egress connection or an

483
00:21:53,580 --> 00:21:55,860
outbound network connection but if you

484
00:21:55,860 --> 00:21:58,260
see such a behavior that points to an

485
00:21:58,260 --> 00:22:00,960
anomaly right and as we saw in order for

486
00:22:00,960 --> 00:22:02,880
attack scenarios I mean the

487
00:22:02,880 --> 00:22:05,520
cryptocurrency miner was named as nginx

488
00:22:05,520 --> 00:22:08,100
right so attackers more often than not

489
00:22:08,100 --> 00:22:10,880
would try to fly under the radar by

490
00:22:10,880 --> 00:22:13,260
piggybacking on any system system

491
00:22:13,260 --> 00:22:16,860
binaries right so such Behavior fringes

492
00:22:16,860 --> 00:22:19,080
on the border of proactive threat

493
00:22:19,080 --> 00:22:21,179
hunting where you know a process is

494
00:22:21,179 --> 00:22:23,520
spawning an unexpected child process a

495
00:22:23,520 --> 00:22:25,320
behavior that hasn't been seen in your

496
00:22:25,320 --> 00:22:28,080
cluster or in the context of the of of

497
00:22:28,080 --> 00:22:30,480
the pods in the past three months or six

498
00:22:30,480 --> 00:22:32,820
months not necessarily it's it's

499
00:22:32,820 --> 00:22:35,520
malicious malicious but it just gives

500
00:22:35,520 --> 00:22:38,820
you a smaller subset of information to

501
00:22:38,820 --> 00:22:40,740
do more proactive threat hunting and

502
00:22:40,740 --> 00:22:43,140
investigation and probably point to a

503
00:22:43,140 --> 00:22:44,760
compromise in that video

504
00:22:44,760 --> 00:22:46,860
similar is you know a first scene

505
00:22:46,860 --> 00:22:49,919
privilege process is spawned are you not

506
00:22:49,919 --> 00:22:52,140
tracking your unexpected system calls

507
00:22:52,140 --> 00:22:54,840
that can lead to privileged collections

508
00:22:54,840 --> 00:22:56,460
and the point being know your

509
00:22:56,460 --> 00:22:59,159
environment what is an anomaly and what

510
00:22:59,159 --> 00:23:01,740
is an unknown good or non-normal

511
00:23:01,740 --> 00:23:04,940
Baseline Behavior

512
00:23:05,100 --> 00:23:08,280
with that context let's see a basic

513
00:23:08,280 --> 00:23:10,860
detection if we can configure via OS

514
00:23:10,860 --> 00:23:13,740
query now is query is just an example in

515
00:23:13,740 --> 00:23:15,720
this context you can use anything that

516
00:23:15,720 --> 00:23:18,600
that provides you the visibility so on

517
00:23:18,600 --> 00:23:20,760
the upper upper portion of this

518
00:23:20,760 --> 00:23:24,059
screenshot I have a certain pot and I am

519
00:23:24,059 --> 00:23:27,380
using double get to reach out to

520
00:23:27,380 --> 00:23:30,720
to somewhere into an outbound network

521
00:23:30,720 --> 00:23:33,840
connection and and downloading quotes

522
00:23:33,840 --> 00:23:36,600
say a malicious piece of code from the

523
00:23:36,600 --> 00:23:39,720
command and control server and you know

524
00:23:39,720 --> 00:23:44,340
this is a very common TTP for more more

525
00:23:44,340 --> 00:23:45,539
um

526
00:23:45,539 --> 00:23:48,659
attacks because at some point once an

527
00:23:48,659 --> 00:23:50,760
initial foothold is achieved and the

528
00:23:50,760 --> 00:23:53,520
attacker has skeleton privileges it

529
00:23:53,520 --> 00:23:54,960
would reach out to its command and

530
00:23:54,960 --> 00:23:57,000
control center to download further

531
00:23:57,000 --> 00:23:59,840
malicious code and further further

532
00:23:59,840 --> 00:24:03,960
information right so it is possible to

533
00:24:03,960 --> 00:24:06,539
use an OS query statement to detect such

534
00:24:06,539 --> 00:24:08,820
outbound network connection and it's

535
00:24:08,820 --> 00:24:11,340
also possible to have more visibility on

536
00:24:11,340 --> 00:24:13,740
the command line like I can see that you

537
00:24:13,740 --> 00:24:15,659
know the attacker is using a double get

538
00:24:15,659 --> 00:24:17,940
command here and also potentially the

539
00:24:17,940 --> 00:24:20,039
domain that it is reaching out to to

540
00:24:20,039 --> 00:24:24,140
download further malicious code

541
00:24:25,260 --> 00:24:28,799
so to summarize kubernetes is complex

542
00:24:28,799 --> 00:24:31,380
and it presents a significant learning

543
00:24:31,380 --> 00:24:34,799
curve to uh to secure the workloads

544
00:24:34,799 --> 00:24:36,960
that's running in a multi-tenant

545
00:24:36,960 --> 00:24:39,360
environment so kubernetes was

546
00:24:39,360 --> 00:24:41,700
historically designed to be you know

547
00:24:41,700 --> 00:24:44,039
highly portable that you can migrate

548
00:24:44,039 --> 00:24:47,340
your workloads across on-prem

549
00:24:47,340 --> 00:24:50,280
um or or in cloud services it's also

550
00:24:50,280 --> 00:24:52,679
meant to be highly customizable as in

551
00:24:52,679 --> 00:24:55,440
you need to explicitly turn on certain

552
00:24:55,440 --> 00:24:58,320
features to secure your cluster and it

553
00:24:58,320 --> 00:25:00,600
comes with a caveat that that needs

554
00:25:00,600 --> 00:25:02,220
knowledge of the potential attack

555
00:25:02,220 --> 00:25:04,740
vectors and the threat landscape that

556
00:25:04,740 --> 00:25:07,919
certain certain misconfigurations can

557
00:25:07,919 --> 00:25:10,919
lead to and security is hard right I

558
00:25:10,919 --> 00:25:13,200
mean the attacker would need to get it

559
00:25:13,200 --> 00:25:16,679
right only one time but for Defenders we

560
00:25:16,679 --> 00:25:19,140
need to get it right every single time

561
00:25:19,140 --> 00:25:22,559
on multiple levels so defense in depth

562
00:25:22,559 --> 00:25:25,380
approach is essential and I would

563
00:25:25,380 --> 00:25:28,320
categorize it as you know pre-fill and

564
00:25:28,320 --> 00:25:30,779
post fill prefill is something where we

565
00:25:30,779 --> 00:25:33,179
focus on the threat modeling or the

566
00:25:33,179 --> 00:25:34,980
threat landscape of the entire

567
00:25:34,980 --> 00:25:37,559
kubernetes deployment and post fail

568
00:25:37,559 --> 00:25:40,440
gives you the security audit logs and

569
00:25:40,440 --> 00:25:42,539
you know some of the detections and

570
00:25:42,539 --> 00:25:45,480
fluorescent capabilities to to detect in

571
00:25:45,480 --> 00:25:48,120
case a compromise happens and the bottom

572
00:25:48,120 --> 00:25:50,400
line being a defense in-depth approach

573
00:25:50,400 --> 00:25:53,159
is imperative to secure the kubernetes

574
00:25:53,159 --> 00:25:56,760
ecosystem as is true for security in

575
00:25:56,760 --> 00:25:58,940
general

576
00:25:58,980 --> 00:26:01,799
that's as much time I had for today

577
00:26:01,799 --> 00:26:04,559
these are some of the useful references

578
00:26:04,559 --> 00:26:06,840
that helped me a lot when I started

579
00:26:06,840 --> 00:26:09,360
learning about kubernetes and kubernetes

580
00:26:09,360 --> 00:26:12,419
security and hopefully it would be

581
00:26:12,419 --> 00:26:15,320
useful to you as well

582
00:26:15,320 --> 00:26:19,799
and that's as much I had for you thanks

583
00:26:19,799 --> 00:26:22,460
for your thing

