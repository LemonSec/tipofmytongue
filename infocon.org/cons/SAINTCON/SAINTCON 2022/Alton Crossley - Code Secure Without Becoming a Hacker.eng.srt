1
00:00:00,120 --> 00:00:01,800
well thank you for coming to my

2
00:00:01,800 --> 00:00:04,220
presentation

3
00:00:04,440 --> 00:00:07,759
I'm glad to be here

4
00:00:08,580 --> 00:00:10,860
we all know that security has blind

5
00:00:10,860 --> 00:00:12,960
spots when it comes to software

6
00:00:12,960 --> 00:00:14,219
development

7
00:00:14,219 --> 00:00:17,160
and software Engineers have gaps when it

8
00:00:17,160 --> 00:00:19,440
comes to security

9
00:00:19,440 --> 00:00:22,980
so oftentimes they look to businesses

10
00:00:22,980 --> 00:00:25,400
look to application security

11
00:00:25,400 --> 00:00:28,260
departments or an application security

12
00:00:28,260 --> 00:00:32,820
person to fill those gaps and to expose

13
00:00:32,820 --> 00:00:35,700
those blind spots

14
00:00:35,700 --> 00:00:40,860
and as uh application security uh

15
00:00:40,860 --> 00:00:43,739
professionals we get sent down a hunt

16
00:00:43,739 --> 00:00:46,739
for uh developer training and this can

17
00:00:46,739 --> 00:00:48,420
be very painful

18
00:00:48,420 --> 00:00:51,719
and if you've ever had to do it

19
00:00:51,719 --> 00:00:54,300
and in fact if you've been in some other

20
00:00:54,300 --> 00:00:55,920
talks you may have seen that this is

21
00:00:55,920 --> 00:00:58,079
kind of an underlying theme here at St

22
00:00:58,079 --> 00:01:00,840
con that our current training

23
00:01:00,840 --> 00:01:03,780
um isn't really working especially

24
00:01:03,780 --> 00:01:06,840
highlighted in Snow's talked uh Kino

25
00:01:06,840 --> 00:01:08,400
earlier

26
00:01:08,400 --> 00:01:09,900
um

27
00:01:09,900 --> 00:01:11,880
developer training it seems to be

28
00:01:11,880 --> 00:01:13,979
everywhere but if you take a look at

29
00:01:13,979 --> 00:01:15,780
developer training really drill down

30
00:01:15,780 --> 00:01:17,520
into it a lot of times it's just

31
00:01:17,520 --> 00:01:19,740
relabeled pen tester training or or

32
00:01:19,740 --> 00:01:22,740
sometimes uh pen tester lab walkthroughs

33
00:01:22,740 --> 00:01:24,299
and

34
00:01:24,299 --> 00:01:27,240
um this may not immediately seem like a

35
00:01:27,240 --> 00:01:28,439
problem

36
00:01:28,439 --> 00:01:30,240
but there are fundamental differences

37
00:01:30,240 --> 00:01:33,299
between how pen testers and software

38
00:01:33,299 --> 00:01:35,759
Engineers need to approach security

39
00:01:35,759 --> 00:01:39,119
so oftentimes developers aren't even uh

40
00:01:39,119 --> 00:01:41,220
interested in

41
00:01:41,220 --> 00:01:43,680
pen tester training because it's not

42
00:01:43,680 --> 00:01:45,659
immediately practical for them and

43
00:01:45,659 --> 00:01:48,360
sometimes as Security Professionals we

44
00:01:48,360 --> 00:01:50,880
have a hard time getting our getting our

45
00:01:50,880 --> 00:01:52,920
head wrapped around how training for

46
00:01:52,920 --> 00:01:55,799
developers should work if it didn't

47
00:01:55,799 --> 00:01:58,140
include pandester training or some sort

48
00:01:58,140 --> 00:01:58,939
of

49
00:01:58,939 --> 00:02:00,960
breach training

50
00:02:00,960 --> 00:02:03,240
so how can developers code secure

51
00:02:03,240 --> 00:02:06,180
without becoming hackers

52
00:02:06,180 --> 00:02:09,179
well the short answer is by promoting

53
00:02:09,179 --> 00:02:11,599
fundamental practices that Target

54
00:02:11,599 --> 00:02:15,599
fundamental Securities concerns and I'd

55
00:02:15,599 --> 00:02:19,200
like to help give my Impressions on why

56
00:02:19,200 --> 00:02:20,580
a lot of the current training isn't

57
00:02:20,580 --> 00:02:22,379
working

58
00:02:22,379 --> 00:02:25,379
um and why software Engineers uh the

59
00:02:25,379 --> 00:02:27,660
software engineering approach to

60
00:02:27,660 --> 00:02:29,940
training is a little bit better when it

61
00:02:29,940 --> 00:02:31,440
comes to security training

62
00:02:31,440 --> 00:02:34,739
for obviously software engineers

63
00:02:34,739 --> 00:02:38,040
then we'll look at some key points uh

64
00:02:38,040 --> 00:02:40,379
recommended that I would recommend to be

65
00:02:40,379 --> 00:02:43,260
in your developer training and hopefully

66
00:02:43,260 --> 00:02:45,300
I can give you enough that when you go

67
00:02:45,300 --> 00:02:47,220
back to work that you can at least

68
00:02:47,220 --> 00:02:50,940
search for training that can help your

69
00:02:50,940 --> 00:02:52,680
developers get there

70
00:02:52,680 --> 00:02:55,019
so who am I and where do I get my

71
00:02:55,019 --> 00:02:57,560
insights from

72
00:02:57,720 --> 00:02:59,760
well my name is Alton Crossley and they

73
00:02:59,760 --> 00:03:01,920
call me names that's my Twitter handle

74
00:03:01,920 --> 00:03:05,300
but I'm an application security engineer

75
00:03:05,300 --> 00:03:08,400
and I am a Microsoft certified Solutions

76
00:03:08,400 --> 00:03:10,379
developer as well as a certified ethical

77
00:03:10,379 --> 00:03:13,220
hacker and some other security

78
00:03:13,220 --> 00:03:15,360
certifications I have 20 years

79
00:03:15,360 --> 00:03:17,340
development experience and a background

80
00:03:17,340 --> 00:03:20,819
in network engineering so I've made that

81
00:03:20,819 --> 00:03:23,159
transition from developer to security

82
00:03:23,159 --> 00:03:26,760
and I've worked security from both sides

83
00:03:26,760 --> 00:03:29,580
so let's talk about the pen tester

84
00:03:29,580 --> 00:03:33,000
approach and uh why I don't think uh

85
00:03:33,000 --> 00:03:34,739
it's quite appropriate for training

86
00:03:34,739 --> 00:03:38,640
software developers so pen tester may

87
00:03:38,640 --> 00:03:41,760
start their test when they start testing

88
00:03:41,760 --> 00:03:43,500
they start with a cookbook

89
00:03:43,500 --> 00:03:45,360
a lot of times sometimes they'll even

90
00:03:45,360 --> 00:03:47,879
use a dash tool to get them started

91
00:03:47,879 --> 00:03:49,980
because there's a lot of common mistakes

92
00:03:49,980 --> 00:03:52,379
that are made in software and right away

93
00:03:52,379 --> 00:03:54,420
this is a good indicator that the

94
00:03:54,420 --> 00:03:56,340
current training methodologies aren't

95
00:03:56,340 --> 00:03:59,640
working because it has created a pattern

96
00:03:59,640 --> 00:04:03,060
of common vulnerabilities

97
00:04:03,060 --> 00:04:06,060
then after this stage in a in a pen test

98
00:04:06,060 --> 00:04:08,099
though a pen tester of course will go

99
00:04:08,099 --> 00:04:11,040
and uh try and use unconventional uh

100
00:04:11,040 --> 00:04:12,780
methods to use the application in order

101
00:04:12,780 --> 00:04:15,659
to get access uh to data that they don't

102
00:04:15,659 --> 00:04:17,820
that they shouldn't have access to

103
00:04:17,820 --> 00:04:20,579
and developers when they look at this uh

104
00:04:20,579 --> 00:04:22,500
practice they a lot of times relate it

105
00:04:22,500 --> 00:04:25,080
directly to Quality Assurance uh QA

106
00:04:25,080 --> 00:04:26,699
testing they kind of see all testing as

107
00:04:26,699 --> 00:04:27,720
the same

108
00:04:27,720 --> 00:04:30,840
and you'll see discussions on occasion

109
00:04:30,840 --> 00:04:34,500
that um that uh

110
00:04:34,500 --> 00:04:37,620
that security Assurance is a subset of

111
00:04:37,620 --> 00:04:40,139
QA or security is a subset of QA and

112
00:04:40,139 --> 00:04:42,419
that it can be true from a developer's

113
00:04:42,419 --> 00:04:43,919
perspective and we know there's a lot of

114
00:04:43,919 --> 00:04:46,259
crossover between those two uh groups

115
00:04:46,259 --> 00:04:49,620
and of course when there's crossover you

116
00:04:49,620 --> 00:04:52,259
would expect us to have a Venn diagram

117
00:04:52,259 --> 00:04:54,419
on the next slide because we're nerds

118
00:04:54,419 --> 00:04:56,520
but what I'd like to do instead is show

119
00:04:56,520 --> 00:05:01,680
a diagram from ISO 25010

120
00:05:01,800 --> 00:05:03,180
and

121
00:05:03,180 --> 00:05:05,759
what this is it shows how

122
00:05:05,759 --> 00:05:07,080
um

123
00:05:07,080 --> 00:05:10,380
security is a specific subset of

124
00:05:10,380 --> 00:05:12,300
software development quality assurance

125
00:05:12,300 --> 00:05:15,660
so this is from a software engineer's

126
00:05:15,660 --> 00:05:16,800
perspective

127
00:05:16,800 --> 00:05:19,620
and sometimes if if security is our

128
00:05:19,620 --> 00:05:21,780
primary focus we might forget how

129
00:05:21,780 --> 00:05:23,340
important um

130
00:05:23,340 --> 00:05:26,100
uh these other things are and that

131
00:05:26,100 --> 00:05:28,199
security isn't the only important thing

132
00:05:28,199 --> 00:05:31,919
to everyone in software development

133
00:05:31,919 --> 00:05:34,560
but what this of course doesn't show are

134
00:05:34,560 --> 00:05:36,000
the other practices

135
00:05:36,000 --> 00:05:38,400
of security you know of application

136
00:05:38,400 --> 00:05:39,479
security especially governance

137
00:05:39,479 --> 00:05:41,699
compliance incident response things like

138
00:05:41,699 --> 00:05:44,580
that so there's definitely two two sides

139
00:05:44,580 --> 00:05:46,020
to this coin but the takeaway here is

140
00:05:46,020 --> 00:05:48,600
often uh developers don't get credit for

141
00:05:48,600 --> 00:05:50,220
security aspects that they're already

142
00:05:50,220 --> 00:05:52,800
covering or even QA is is already

143
00:05:52,800 --> 00:05:54,660
testing

144
00:05:54,660 --> 00:05:57,539
so if we as Security Professionals kind

145
00:05:57,539 --> 00:06:00,780
of find a a way to Anchor

146
00:06:00,780 --> 00:06:03,539
um there and kind of build out to

147
00:06:03,539 --> 00:06:07,020
encourage fundamental security practices

148
00:06:07,020 --> 00:06:10,860
uh and and sometimes having QA work

149
00:06:10,860 --> 00:06:14,280
together with uh security uh can really

150
00:06:14,280 --> 00:06:18,240
create a Synergy using that word but

151
00:06:18,240 --> 00:06:18,780
um

152
00:06:18,780 --> 00:06:22,139
it's kind of a good foundation having

153
00:06:22,139 --> 00:06:24,780
three pillars is much better just like a

154
00:06:24,780 --> 00:06:27,660
stool needs three legs to stand on its

155
00:06:27,660 --> 00:06:31,860
own so it can really create a lot of

156
00:06:31,860 --> 00:06:34,319
a useful crossover there if you work

157
00:06:34,319 --> 00:06:36,240
together

158
00:06:36,240 --> 00:06:37,979
so let's go back to that unconventional

159
00:06:37,979 --> 00:06:41,160
ways of using software uh that a pen

160
00:06:41,160 --> 00:06:42,900
tester does

161
00:06:42,900 --> 00:06:43,500
um

162
00:06:43,500 --> 00:06:46,400
when a hack well when a pen tester

163
00:06:46,400 --> 00:06:48,960
tries to make software do things that

164
00:06:48,960 --> 00:06:51,660
it's not supposed to and are successful

165
00:06:51,660 --> 00:06:54,900
sometimes they get a great bump it's

166
00:06:54,900 --> 00:06:56,759
very addictive get a little bump of

167
00:06:56,759 --> 00:06:58,460
Serotonin

168
00:06:58,460 --> 00:07:01,919
and it might really that's kind of The

169
00:07:01,919 --> 00:07:04,080
Addictive part of being a pen tester

170
00:07:04,080 --> 00:07:07,220
right but sometimes what's overlooked is

171
00:07:07,220 --> 00:07:10,139
the way that software Engineers may see

172
00:07:10,139 --> 00:07:11,900
the same events

173
00:07:11,900 --> 00:07:12,120
[Music]

174
00:07:12,120 --> 00:07:13,199
um

175
00:07:13,199 --> 00:07:15,440
a seasoned software engineer

176
00:07:15,440 --> 00:07:18,780
is able to create functionality that's

177
00:07:18,780 --> 00:07:22,139
reliable it's consistently reliable and

178
00:07:22,139 --> 00:07:25,500
yet it's flexible enough to operate in

179
00:07:25,500 --> 00:07:28,639
multiple circumstances

180
00:07:29,400 --> 00:07:32,240
so in fact a developer gets a profound

181
00:07:32,240 --> 00:07:35,039
thrill sometimes when they learn that

182
00:07:35,039 --> 00:07:36,780
somebody has used their software in an

183
00:07:36,780 --> 00:07:38,460
unconventional way

184
00:07:38,460 --> 00:07:41,400
it's like and it's a live moment that

185
00:07:41,400 --> 00:07:43,680
they it really separates the builders

186
00:07:43,680 --> 00:07:46,319
from the breakers a lot of times but

187
00:07:46,319 --> 00:07:48,660
it's the same coin two signs of the same

188
00:07:48,660 --> 00:07:52,860
same coin individual developers learn

189
00:07:52,860 --> 00:07:54,660
how to they have to learn how to guide

190
00:07:54,660 --> 00:07:56,639
their own monster but they also have to

191
00:07:56,639 --> 00:07:58,139
work together with the rest of the team

192
00:07:58,139 --> 00:08:01,500
under the governance of architecture and

193
00:08:01,500 --> 00:08:04,020
the engineering standards that they have

194
00:08:04,020 --> 00:08:07,560
so they have to use a specific way to

195
00:08:07,560 --> 00:08:10,400
solve their problems and a specific

196
00:08:10,400 --> 00:08:14,400
context for bringing in security

197
00:08:14,400 --> 00:08:17,280
so you might ask the question is

198
00:08:17,280 --> 00:08:20,819
flexical flexible code insecure

199
00:08:20,819 --> 00:08:22,979
well flexibility doesn't necessarily

200
00:08:22,979 --> 00:08:26,940
make code secure or or less secure but

201
00:08:26,940 --> 00:08:29,099
it does make a big difference when it

202
00:08:29,099 --> 00:08:31,800
comes to the way that they respond to

203
00:08:31,800 --> 00:08:32,940
flaws

204
00:08:32,940 --> 00:08:36,419
so when a vulnerability is uh pointed

205
00:08:36,419 --> 00:08:39,440
out and code needs to be changed

206
00:08:39,440 --> 00:08:43,020
inflexible code will often require a

207
00:08:43,020 --> 00:08:44,520
change in another place so they'll

208
00:08:44,520 --> 00:08:46,440
change it in one place it'll break in

209
00:08:46,440 --> 00:08:49,620
another and it's like juggling sand just

210
00:08:49,620 --> 00:08:52,980
in order to keep Baseline functionality

211
00:08:52,980 --> 00:08:55,560
and because of this uh maintainable code

212
00:08:55,560 --> 00:08:58,080
does become a security concern

213
00:08:58,080 --> 00:08:59,640
and to illustrate this we'll kind of

214
00:08:59,640 --> 00:09:01,860
step aside from from code exactly and

215
00:09:01,860 --> 00:09:04,620
we'll talk about uh circumstance in

216
00:09:04,620 --> 00:09:06,480
Pennsylvania Three Mile Island some of

217
00:09:06,480 --> 00:09:08,700
us might be familiar with this and this

218
00:09:08,700 --> 00:09:10,800
quote's taken from a documentary by Kyle

219
00:09:10,800 --> 00:09:13,620
Hill but basically the in the control

220
00:09:13,620 --> 00:09:15,600
room at Three Mile Island investigators

221
00:09:15,600 --> 00:09:18,120
found key indicator likes lights on the

222
00:09:18,120 --> 00:09:19,620
backs of panels

223
00:09:19,620 --> 00:09:21,839
switches out of calibration

224
00:09:21,839 --> 00:09:24,660
and tags covering warning panels and

225
00:09:24,660 --> 00:09:27,420
never fewer than 52 alarms blinking at

226
00:09:27,420 --> 00:09:29,880
all times over 100 alarms would sound

227
00:09:29,880 --> 00:09:31,800
when the reactor started to fail in

228
00:09:31,800 --> 00:09:34,019
Pennsylvania and it was impossible to

229
00:09:34,019 --> 00:09:37,500
sort the critical ones from the usual

230
00:09:37,500 --> 00:09:39,360
so the point here is that the at one

231
00:09:39,360 --> 00:09:41,580
point the reactor was running fine

232
00:09:41,580 --> 00:09:43,920
but when a small thing happened it took

233
00:09:43,920 --> 00:09:45,300
a long time to figure out what it was

234
00:09:45,300 --> 00:09:47,580
and it took even longer to fix it

235
00:09:47,580 --> 00:09:49,620
the lack of transparency that they had

236
00:09:49,620 --> 00:09:51,779
internally then caused communication

237
00:09:51,779 --> 00:09:54,240
problems and then it became a public

238
00:09:54,240 --> 00:09:55,800
relations nightmare

239
00:09:55,800 --> 00:09:57,360
if you look at some of the documentaries

240
00:09:57,360 --> 00:09:59,040
you come to understand that Three Mile

241
00:09:59,040 --> 00:10:02,040
Island could have been insignificant but

242
00:10:02,040 --> 00:10:03,200
it wasn't

243
00:10:03,200 --> 00:10:06,120
and what we want to take away from this

244
00:10:06,120 --> 00:10:08,940
today is that they didn't finish with

245
00:10:08,940 --> 00:10:10,019
detail

246
00:10:10,019 --> 00:10:12,480
in software the control room could be

247
00:10:12,480 --> 00:10:15,600
likened to devops from planning through

248
00:10:15,600 --> 00:10:18,959
code to operations and the longer a

249
00:10:18,959 --> 00:10:21,480
problem exists the harder it is to fix

250
00:10:21,480 --> 00:10:24,980
and of course the more data can be lost

251
00:10:24,980 --> 00:10:29,100
and the more costly it becomes to fix

252
00:10:29,100 --> 00:10:32,040
and uh so a messy control room as it

253
00:10:32,040 --> 00:10:34,080
were runs a high risk of failure and

254
00:10:34,080 --> 00:10:36,060
eventual breach

255
00:10:36,060 --> 00:10:38,540
and just like with the nuclear meltdown

256
00:10:38,540 --> 00:10:40,860
this can't be taken back we've seen this

257
00:10:40,860 --> 00:10:42,660
time and time again

258
00:10:42,660 --> 00:10:44,579
and I would consider Three Mile Island

259
00:10:44,579 --> 00:10:48,420
as a good example to parallel code with

260
00:10:48,420 --> 00:10:51,480
a finish of about level two when it

261
00:10:51,480 --> 00:10:53,399
should have been a code finish of level

262
00:10:53,399 --> 00:10:54,360
five

263
00:10:54,360 --> 00:10:58,440
so what is uh code finish I'm talking

264
00:10:58,440 --> 00:11:01,140
about software finish levels

265
00:11:01,140 --> 00:11:03,180
and so here obviously the definition of

266
00:11:03,180 --> 00:11:05,880
finish the manner in which a creation of

267
00:11:05,880 --> 00:11:08,940
an item is completed in detail so it's

268
00:11:08,940 --> 00:11:12,540
the craftsmanship the high the uh finish

269
00:11:12,540 --> 00:11:14,579
really has nothing to do with anything

270
00:11:14,579 --> 00:11:17,100
like agile Frameworks or how secure the

271
00:11:17,100 --> 00:11:18,959
application is to begin with really what

272
00:11:18,959 --> 00:11:21,660
it does is it focuses in on the code and

273
00:11:21,660 --> 00:11:25,680
how that code is produced it touches on

274
00:11:25,680 --> 00:11:27,300
code readability code organization

275
00:11:27,300 --> 00:11:30,000
naming conventions things like solid and

276
00:11:30,000 --> 00:11:33,240
dry and infrastructure as code also

277
00:11:33,240 --> 00:11:35,459
plays into this unfortunately it's

278
00:11:35,459 --> 00:11:38,160
really common for applications to be of

279
00:11:38,160 --> 00:11:40,800
level three have a level three finish

280
00:11:40,800 --> 00:11:43,980
and the reason I point that out is if

281
00:11:43,980 --> 00:11:45,420
you're used to a level for three finish

282
00:11:45,420 --> 00:11:48,839
you may think of security and quality as

283
00:11:48,839 --> 00:11:51,360
something that's very hard to achieve

284
00:11:51,360 --> 00:11:54,440
and very expensive whereas

285
00:11:54,440 --> 00:11:57,000
with a level five finish this isn't the

286
00:11:57,000 --> 00:11:58,680
case

287
00:11:58,680 --> 00:12:00,380
um and a level five finish

288
00:12:00,380 --> 00:12:04,140
is achieved with organization and

289
00:12:04,140 --> 00:12:07,500
teamwork and some people on the team

290
00:12:07,500 --> 00:12:10,079
having very specific skills and it

291
00:12:10,079 --> 00:12:11,940
doesn't take more time to have a level 5

292
00:12:11,940 --> 00:12:14,339
finish but what it does do is it saves

293
00:12:14,339 --> 00:12:17,220
time again in the support of that and

294
00:12:17,220 --> 00:12:20,240
responding to flaws

295
00:12:20,339 --> 00:12:22,260
so

296
00:12:22,260 --> 00:12:24,300
software finish actually can be as

297
00:12:24,300 --> 00:12:26,160
effective as architecture technical

298
00:12:26,160 --> 00:12:28,740
design and security assurance

299
00:12:28,740 --> 00:12:31,079
and you might ask why well let's take a

300
00:12:31,079 --> 00:12:33,959
closer look at this level 5 finish

301
00:12:33,959 --> 00:12:35,640
um the reason is because it's well

302
00:12:35,640 --> 00:12:38,040
organized and it's clear what's being

303
00:12:38,040 --> 00:12:41,459
done that makes turnaround of flaws much

304
00:12:41,459 --> 00:12:43,620
more efficient and changes can be made

305
00:12:43,620 --> 00:12:45,480
in with confidence when they make a

306
00:12:45,480 --> 00:12:46,740
change in one place it's not going to

307
00:12:46,740 --> 00:12:48,240
affect another

308
00:12:48,240 --> 00:12:50,040
and when there is a meltdown the

309
00:12:50,040 --> 00:12:51,720
application is transparent to the

310
00:12:51,720 --> 00:12:52,980
developer so they can figure out what's

311
00:12:52,980 --> 00:12:55,139
going on and oftentimes it enables

312
00:12:55,139 --> 00:12:57,120
solving issues on a systemic level

313
00:12:57,120 --> 00:12:59,820
rather than just line by line

314
00:12:59,820 --> 00:13:03,480
and this is because uh level five finish

315
00:13:03,480 --> 00:13:07,500
Engineers are not line level myopic

316
00:13:07,500 --> 00:13:10,380
some testing tools and contrast might

317
00:13:10,380 --> 00:13:13,380
point out if you've used any saster task

318
00:13:13,380 --> 00:13:16,620
tools that look at code code they'll

319
00:13:16,620 --> 00:13:20,100
point out lines that they think are the

320
00:13:20,100 --> 00:13:22,139
reason or that it might be a risk or

321
00:13:22,139 --> 00:13:24,560
that a reason for a flaw

322
00:13:24,560 --> 00:13:27,480
and sometimes they offer fixes for just

323
00:13:27,480 --> 00:13:31,260
that line of code or a solution for the

324
00:13:31,260 --> 00:13:33,600
vulnerability but they usually ignore

325
00:13:33,600 --> 00:13:35,579
the architecture and the engineering

326
00:13:35,579 --> 00:13:38,160
standards that might be present already

327
00:13:38,160 --> 00:13:40,940
and so when software Engineers are told

328
00:13:40,940 --> 00:13:43,620
that they should observe these as best

329
00:13:43,620 --> 00:13:45,779
practices it conflicts a lot of times

330
00:13:45,779 --> 00:13:48,120
with their other expectations

331
00:13:48,120 --> 00:13:50,220
level five Engineers though have allowed

332
00:13:50,220 --> 00:13:51,000
to

333
00:13:51,000 --> 00:13:51,600
um

334
00:13:51,600 --> 00:13:55,320
to their own ways uh are able to

335
00:13:55,320 --> 00:13:56,760
understand the context that the cool

336
00:13:56,760 --> 00:13:58,320
tool gives them because that's what it

337
00:13:58,320 --> 00:13:59,940
is to them is context

338
00:13:59,940 --> 00:14:02,820
then they encourage the team uh to build

339
00:14:02,820 --> 00:14:05,100
a module that's well tested and then

340
00:14:05,100 --> 00:14:07,740
they use that module as a standard and

341
00:14:07,740 --> 00:14:10,079
so that has a much broader positive

342
00:14:10,079 --> 00:14:13,620
effect than a line level fix

343
00:14:13,620 --> 00:14:16,680
so we as Security Professionals should

344
00:14:16,680 --> 00:14:19,600
allow them to make this a better

345
00:14:19,600 --> 00:14:20,040
[Music]

346
00:14:20,040 --> 00:14:22,040
um

347
00:14:22,320 --> 00:14:25,620
uh sorry I lost my place we should allow

348
00:14:25,620 --> 00:14:29,100
them to to have a better solution more

349
00:14:29,100 --> 00:14:31,880
complete solution

350
00:14:32,100 --> 00:14:34,200
um a better design

351
00:14:34,200 --> 00:14:36,180
don't give them a hammer uh when they

352
00:14:36,180 --> 00:14:37,920
should be using a jig

353
00:14:37,920 --> 00:14:39,899
there's a limit to of course what

354
00:14:39,899 --> 00:14:41,459
influence application security can have

355
00:14:41,459 --> 00:14:43,740
over the development process but making

356
00:14:43,740 --> 00:14:46,380
sure that they have the tools and that

357
00:14:46,380 --> 00:14:49,199
encouraging foundational practices uh

358
00:14:49,199 --> 00:14:50,699
can really make a difference

359
00:14:50,699 --> 00:14:53,940
and security training should include a

360
00:14:53,940 --> 00:14:56,940
lot of these foundational things

361
00:14:56,940 --> 00:14:58,920
so one of the things that I want to

362
00:14:58,920 --> 00:15:02,760
point out that's a very

363
00:15:02,760 --> 00:15:03,959
um

364
00:15:03,959 --> 00:15:06,240
common and this plays into the last talk

365
00:15:06,240 --> 00:15:08,459
if you were in here which is really nice

366
00:15:08,459 --> 00:15:10,500
a foundational practice that I see

367
00:15:10,500 --> 00:15:12,360
that's common among those uh doing

368
00:15:12,360 --> 00:15:15,000
security uh development very well is

369
00:15:15,000 --> 00:15:17,040
handling merger quests well

370
00:15:17,040 --> 00:15:19,740
having a standard for merge requests or

371
00:15:19,740 --> 00:15:21,540
pull requests whichever terminology you

372
00:15:21,540 --> 00:15:23,519
use is really important you can have

373
00:15:23,519 --> 00:15:27,120
branching strategies that vary widely

374
00:15:27,120 --> 00:15:30,300
but having a good standard merge request

375
00:15:30,300 --> 00:15:32,760
policy is is really important I always

376
00:15:32,760 --> 00:15:34,860
require at least another person's sign

377
00:15:34,860 --> 00:15:36,660
off other than the person creating the

378
00:15:36,660 --> 00:15:38,760
code and this is when we're talking

379
00:15:38,760 --> 00:15:39,740
about

380
00:15:39,740 --> 00:15:41,839
a contributor

381
00:15:41,839 --> 00:15:45,899
merges so a single person's changes so

382
00:15:45,899 --> 00:15:48,480
that another person can have eyes on

383
00:15:48,480 --> 00:15:50,820
and make sure that they're using a tool

384
00:15:50,820 --> 00:15:52,860
that the merge can be commented on and

385
00:15:52,860 --> 00:15:54,540
then they actually have a change of

386
00:15:54,540 --> 00:15:57,240
exchange of knowledge

387
00:15:57,240 --> 00:15:59,279
and ideally when this merge request is

388
00:15:59,279 --> 00:16:02,399
created multiple security tools would be

389
00:16:02,399 --> 00:16:05,820
kicked off and would also decorate that

390
00:16:05,820 --> 00:16:09,240
merge so you're running SAS and dust and

391
00:16:09,240 --> 00:16:13,199
SCA all within that merge request so

392
00:16:13,199 --> 00:16:15,060
then it can be a part of a discussion

393
00:16:15,060 --> 00:16:18,800
and an interchange of knowledge

394
00:16:19,079 --> 00:16:20,940
and this is also where code review

395
00:16:20,940 --> 00:16:23,160
scales so a lot of times we look at code

396
00:16:23,160 --> 00:16:26,040
review as a big daunting task of

397
00:16:26,040 --> 00:16:28,620
reviewing the whole application but if

398
00:16:28,620 --> 00:16:31,740
we train the more senior developers and

399
00:16:31,740 --> 00:16:33,019
Security

400
00:16:33,019 --> 00:16:36,060
review then they can take a look at this

401
00:16:36,060 --> 00:16:39,180
with an eye to security

402
00:16:39,180 --> 00:16:41,220
and so this merge request is very

403
00:16:41,220 --> 00:16:43,519
important

404
00:16:44,940 --> 00:16:47,160
and because the merge request is

405
00:16:47,160 --> 00:16:49,380
important and the information in it is

406
00:16:49,380 --> 00:16:51,420
report important what can happen

407
00:16:51,420 --> 00:16:54,660
sometimes is the tools can be uh too

408
00:16:54,660 --> 00:16:57,779
chatty they might overwhelm with a lot

409
00:16:57,779 --> 00:17:00,540
of useless information

410
00:17:00,540 --> 00:17:02,759
um or they may not integrate uh the way

411
00:17:02,759 --> 00:17:04,500
that the developers want to

412
00:17:04,500 --> 00:17:08,040
so the other side of that coin is that

413
00:17:08,040 --> 00:17:09,900
as Security Professionals we have

414
00:17:09,900 --> 00:17:12,059
requirements for reporting and tracking

415
00:17:12,059 --> 00:17:15,179
and tools don't often do both of those

416
00:17:15,179 --> 00:17:17,880
well and so sometimes having separate

417
00:17:17,880 --> 00:17:20,760
tools for devs and Assurance security

418
00:17:20,760 --> 00:17:23,699
Assurance is important and very useful

419
00:17:23,699 --> 00:17:26,880
because you can also hand off some of

420
00:17:26,880 --> 00:17:29,700
that responsibility to the developers to

421
00:17:29,700 --> 00:17:31,740
um for their scanning so that they can

422
00:17:31,740 --> 00:17:33,059
get the information that they want where

423
00:17:33,059 --> 00:17:34,200
they need it

424
00:17:34,200 --> 00:17:36,480
and it doesn't you give them you can

425
00:17:36,480 --> 00:17:37,679
give them that freedom and it doesn't

426
00:17:37,679 --> 00:17:41,840
affect your outputs that you need

427
00:17:42,360 --> 00:17:45,960
and I'm not the only one that uh has

428
00:17:45,960 --> 00:17:47,820
suggested this in the past

429
00:17:47,820 --> 00:17:49,799
and I'm also not the only one that has

430
00:17:49,799 --> 00:17:51,960
suggested this either using a framework

431
00:17:51,960 --> 00:17:53,820
is really important I think is one of

432
00:17:53,820 --> 00:17:55,919
those things that we can uh it comes up

433
00:17:55,919 --> 00:17:58,260
often but it really is useful a couple

434
00:17:58,260 --> 00:17:59,820
of simple Frameworks that are easy to

435
00:17:59,820 --> 00:18:01,679
implement the four question framework

436
00:18:01,679 --> 00:18:05,100
for you doing threat modeling is really

437
00:18:05,100 --> 00:18:07,500
light and adaptive so you can just

438
00:18:07,500 --> 00:18:11,299
integrate it into agile

439
00:18:11,299 --> 00:18:15,080
functions so different

440
00:18:15,080 --> 00:18:19,340
meetings that you have for agile do it

441
00:18:19,340 --> 00:18:21,419
rituals is the word that they always use

442
00:18:21,419 --> 00:18:24,720
and do it during any Sprint ritual

443
00:18:24,720 --> 00:18:27,000
also having a development team fill out

444
00:18:27,000 --> 00:18:31,080
the Sam evaluation can also open just

445
00:18:31,080 --> 00:18:32,880
just filling it out once can open their

446
00:18:32,880 --> 00:18:35,580
minds to kind of some of the things the

447
00:18:35,580 --> 00:18:37,080
activities that can be done that can

448
00:18:37,080 --> 00:18:38,640
move the needle so that's pretty useful

449
00:18:38,640 --> 00:18:41,220
too but finding a framework and using

450
00:18:41,220 --> 00:18:44,299
one is is really good

451
00:18:46,620 --> 00:18:49,860
so it may seem obvious to promote

452
00:18:49,860 --> 00:18:52,440
developers to security roles

453
00:18:52,440 --> 00:18:55,020
um but there are a couple of challenges

454
00:18:55,020 --> 00:18:57,539
with this the first one is a

455
00:18:57,539 --> 00:19:00,000
accomplished security or accomplished

456
00:19:00,000 --> 00:19:02,280
software engineer is going to be paid

457
00:19:02,280 --> 00:19:04,440
more a little bit than a entry level

458
00:19:04,440 --> 00:19:07,320
security position usually pays so that

459
00:19:07,320 --> 00:19:09,480
has to be taken into consideration and

460
00:19:09,480 --> 00:19:11,460
then the other thing is that if they're

461
00:19:11,460 --> 00:19:13,200
an experienced software engineer they've

462
00:19:13,200 --> 00:19:15,900
spent a lot of time building and

463
00:19:15,900 --> 00:19:18,179
sometimes switching over to the braking

464
00:19:18,179 --> 00:19:19,980
side really isn't something that they're

465
00:19:19,980 --> 00:19:21,900
interested in or even going from

466
00:19:21,900 --> 00:19:25,440
building to testing so

467
00:19:25,440 --> 00:19:27,419
that raises the question how do you get

468
00:19:27,419 --> 00:19:29,760
software engineering experience in onto

469
00:19:29,760 --> 00:19:32,480
the security side

470
00:19:33,000 --> 00:19:36,720
well uh enter the software engineer and

471
00:19:36,720 --> 00:19:38,960
security

472
00:19:41,220 --> 00:19:44,400
excuse me so you've heard of the agile

473
00:19:44,400 --> 00:19:45,480
role

474
00:19:45,480 --> 00:19:47,880
of software engineer and test this is

475
00:19:47,880 --> 00:19:49,280
similar to that

476
00:19:49,280 --> 00:19:52,200
so this is a role where a person still

477
00:19:52,200 --> 00:19:53,960
contributes to code

478
00:19:53,960 --> 00:19:57,240
but they're encouraged to spend more

479
00:19:57,240 --> 00:19:58,160
time

480
00:19:58,160 --> 00:20:01,080
in code review and those merge requests

481
00:20:01,080 --> 00:20:03,080
to keep

482
00:20:03,080 --> 00:20:05,580
looking at code with security concerns

483
00:20:05,580 --> 00:20:08,520
and also they're encouraged to and

484
00:20:08,520 --> 00:20:10,380
enabled to keep up on security

485
00:20:10,380 --> 00:20:13,200
happenings especially as it applies to

486
00:20:13,200 --> 00:20:14,580
their current platform that they're

487
00:20:14,580 --> 00:20:16,320
they're developing with

488
00:20:16,320 --> 00:20:19,140
so the one important thing here is that

489
00:20:19,140 --> 00:20:21,000
they would not bear the whole burden of

490
00:20:21,000 --> 00:20:23,880
uh security and software engineering but

491
00:20:23,880 --> 00:20:26,160
they would be trained to understand and

492
00:20:26,160 --> 00:20:28,679
share security best practices

493
00:20:28,679 --> 00:20:30,480
a lot of

494
00:20:30,480 --> 00:20:32,039
um this again is happening through the

495
00:20:32,039 --> 00:20:34,380
merge requests so the merge request is

496
00:20:34,380 --> 00:20:35,940
is all important

497
00:20:35,940 --> 00:20:38,520
so you might be asking yourself is this

498
00:20:38,520 --> 00:20:40,799
a security Champion

499
00:20:40,799 --> 00:20:42,660
um and the answer the short answer is no

500
00:20:42,660 --> 00:20:46,380
this is a job title and a position it's

501
00:20:46,380 --> 00:20:48,780
not a volunteer role so if you were in

502
00:20:48,780 --> 00:20:50,940
one of the talks earlier about uh that

503
00:20:50,940 --> 00:20:53,820
talked about security champions

504
00:20:53,820 --> 00:20:56,460
that's this is different it's more

505
00:20:56,460 --> 00:20:58,440
specific it's more I feel more

506
00:20:58,440 --> 00:21:00,299
professional and more effective in a lot

507
00:21:00,299 --> 00:21:02,340
of cases don't get me wrong security

508
00:21:02,340 --> 00:21:04,500
Champions programs at some places work

509
00:21:04,500 --> 00:21:06,900
really well but this can even be used to

510
00:21:06,900 --> 00:21:08,580
augment that this is really security

511
00:21:08,580 --> 00:21:11,100
embedded

512
00:21:11,100 --> 00:21:12,900
so what are some of the foundational

513
00:21:12,900 --> 00:21:15,120
practices some some of those things that

514
00:21:15,120 --> 00:21:17,960
software Engineers should know to create

515
00:21:17,960 --> 00:21:20,160
secure software

516
00:21:20,160 --> 00:21:23,100
as we talked about before the merge

517
00:21:23,100 --> 00:21:25,260
request is very important and so code

518
00:21:25,260 --> 00:21:27,179
review is really important

519
00:21:27,179 --> 00:21:29,460
doing this in a highly productive manner

520
00:21:29,460 --> 00:21:32,940
is very difficult being able to give

521
00:21:32,940 --> 00:21:34,740
positive feedback without you know

522
00:21:34,740 --> 00:21:38,340
triggering defensive uh people without

523
00:21:38,340 --> 00:21:41,340
causing people to be defensive is some

524
00:21:41,340 --> 00:21:43,620
of the art form and understanding like

525
00:21:43,620 --> 00:21:45,240
the context of it so you you yourself

526
00:21:45,240 --> 00:21:47,580
don't get defensive but

527
00:21:47,580 --> 00:21:49,320
um

528
00:21:49,320 --> 00:21:51,360
security obviously isn't the only part

529
00:21:51,360 --> 00:21:53,220
of this ritual but

530
00:21:53,220 --> 00:21:55,980
um identifying vulnerability and then

531
00:21:55,980 --> 00:21:58,260
talking about it in security terms is

532
00:21:58,260 --> 00:22:00,539
actually really beneficial because then

533
00:22:00,539 --> 00:22:03,179
that informs us as as appsec Engineers

534
00:22:03,179 --> 00:22:05,520
so we can understand better what's going

535
00:22:05,520 --> 00:22:08,960
on so that's very useful

536
00:22:09,179 --> 00:22:12,659
than defensive coding I think this is

537
00:22:12,659 --> 00:22:14,580
something to key in on because there's

538
00:22:14,580 --> 00:22:17,039
lots of defensive coding training out

539
00:22:17,039 --> 00:22:19,380
there and all of it has value when it

540
00:22:19,380 --> 00:22:20,640
comes to security

541
00:22:20,640 --> 00:22:23,100
so Wikipedia defines defensive coding as

542
00:22:23,100 --> 00:22:27,000
coding uh defensive coding is intended

543
00:22:27,000 --> 00:22:29,220
to ensure the continuing function of a

544
00:22:29,220 --> 00:22:31,200
piece of software under unforeseen

545
00:22:31,200 --> 00:22:32,580
circumstances

546
00:22:32,580 --> 00:22:33,900
it focuses on things like code

547
00:22:33,900 --> 00:22:35,280
comprehension code quality and

548
00:22:35,280 --> 00:22:37,380
predictability of code and it goes to

549
00:22:37,380 --> 00:22:39,000
reason that this would also be the basis

550
00:22:39,000 --> 00:22:41,460
for things like fail secure exception

551
00:22:41,460 --> 00:22:44,039
handling and things like unit testing

552
00:22:44,039 --> 00:22:47,340
defense in depth and so this can be some

553
00:22:47,340 --> 00:22:49,860
some a simple training that could be

554
00:22:49,860 --> 00:22:52,980
very beneficial to your organization

555
00:22:52,980 --> 00:22:54,840
input interaction modeling is

556
00:22:54,840 --> 00:22:58,080
understanding input data what it is how

557
00:22:58,080 --> 00:22:59,220
it's being used and then being

558
00:22:59,220 --> 00:23:00,840
deliberate about the implementation of

559
00:23:00,840 --> 00:23:04,200
the use and uh so we know there's a lot

560
00:23:04,200 --> 00:23:07,200
of uh vulnerabilities that come from

561
00:23:07,200 --> 00:23:11,720
that from just simple input handling

562
00:23:11,940 --> 00:23:13,799
dependency management of course is a

563
00:23:13,799 --> 00:23:15,720
huge subject that could be a talk on its

564
00:23:15,720 --> 00:23:19,080
own most of the public Patrick package

565
00:23:19,080 --> 00:23:22,400
feeds are full of level zero finish code

566
00:23:22,400 --> 00:23:25,380
and developers contribute to those feeds

567
00:23:25,380 --> 00:23:27,360
not intending to support your medical

568
00:23:27,360 --> 00:23:30,799
device or your fintech app and so

569
00:23:30,799 --> 00:23:34,020
developers need to be very cognizant of

570
00:23:34,020 --> 00:23:36,780
the dependencies that they're using they

571
00:23:36,780 --> 00:23:38,400
need to know how to pick a library they

572
00:23:38,400 --> 00:23:40,200
need to understand when to build and

573
00:23:40,200 --> 00:23:42,419
when it makes sense to Fork because it

574
00:23:42,419 --> 00:23:44,100
does sometimes

575
00:23:44,100 --> 00:23:46,440
implicit requirements are all the

576
00:23:46,440 --> 00:23:48,960
unspoken requirements sometimes you'll

577
00:23:48,960 --> 00:23:50,280
get requirements that require

578
00:23:50,280 --> 00:23:51,840
authentication but they don't see

579
00:23:51,840 --> 00:23:53,940
anything about it and sometimes a

580
00:23:53,940 --> 00:23:56,220
requirement also requires the opposite

581
00:23:56,220 --> 00:23:58,860
to be true so understanding those things

582
00:23:58,860 --> 00:24:00,780
and and just being having the language

583
00:24:00,780 --> 00:24:03,780
to talk about it is very useful

584
00:24:03,780 --> 00:24:06,480
logging a course can be detrimental and

585
00:24:06,480 --> 00:24:08,760
very helpful so covering that is

586
00:24:08,760 --> 00:24:11,039
important Secrets management having a

587
00:24:11,039 --> 00:24:13,320
way to keep your secrets out of your

588
00:24:13,320 --> 00:24:15,080
commit history is very important

589
00:24:15,080 --> 00:24:16,740
especially when you're talking about

590
00:24:16,740 --> 00:24:18,780
protecting your supply chain

591
00:24:18,780 --> 00:24:21,419
or you as the supply chain too modern

592
00:24:21,419 --> 00:24:22,919
off flows can get pretty complex

593
00:24:22,919 --> 00:24:25,559
understanding the formats and things is

594
00:24:25,559 --> 00:24:27,539
really important to cover least

595
00:24:27,539 --> 00:24:29,760
privilege and session management along

596
00:24:29,760 --> 00:24:31,919
with that trust boundaries is something

597
00:24:31,919 --> 00:24:34,080
that a lot of developers are able to

598
00:24:34,080 --> 00:24:36,179
just ignore and so we want to make sure

599
00:24:36,179 --> 00:24:38,340
that they get that training so they

600
00:24:38,340 --> 00:24:40,380
understand uh you know when a browser

601
00:24:40,380 --> 00:24:42,900
can be trusted and when that trust ends

602
00:24:42,900 --> 00:24:45,600
as well as useful things like HTTP where

603
00:24:45,600 --> 00:24:48,480
headers and cookies come from and go

604
00:24:48,480 --> 00:24:50,280
and then standards and conventions play

605
00:24:50,280 --> 00:24:52,679
directly into code comprehension so they

606
00:24:52,679 --> 00:24:54,960
help there

607
00:24:54,960 --> 00:24:58,980
then secure CI CD so having those

608
00:24:58,980 --> 00:25:01,620
pipelines secured really depends on the

609
00:25:01,620 --> 00:25:03,539
developers a lot and secrets management

610
00:25:03,539 --> 00:25:06,179
too but having them on board doesn't

611
00:25:06,179 --> 00:25:07,679
really take more time they just need to

612
00:25:07,679 --> 00:25:10,080
be cognizant

613
00:25:10,080 --> 00:25:12,360
um you may be disappointed too in

614
00:25:12,360 --> 00:25:13,799
knowing how many of your developers

615
00:25:13,799 --> 00:25:15,059
don't understand the difference between

616
00:25:15,059 --> 00:25:18,179
encryption and encoding because

617
00:25:18,179 --> 00:25:18,840
um

618
00:25:18,840 --> 00:25:22,760
it just never comes up for some of them

619
00:25:22,760 --> 00:25:26,460
so whenever selecting training a key way

620
00:25:26,460 --> 00:25:28,320
to get buy-in from the developers is to

621
00:25:28,320 --> 00:25:30,600
include them in in the decision

622
00:25:30,600 --> 00:25:32,760
maybe get a software engineer to

623
00:25:32,760 --> 00:25:35,900
actually take the the test for you

624
00:25:35,900 --> 00:25:40,080
and really dive down in to the content

625
00:25:40,080 --> 00:25:41,880
make sure it's spending enough time on

626
00:25:41,880 --> 00:25:43,860
the things that make a difference the

627
00:25:43,860 --> 00:25:45,960
majority of the training very definitely

628
00:25:45,960 --> 00:25:49,080
shouldn't be spent on any sort of breach

629
00:25:49,080 --> 00:25:50,940
training or pandester training or

630
00:25:50,940 --> 00:25:52,980
exploit demonstration it really should

631
00:25:52,980 --> 00:25:56,960
get down to the software engineering tax

632
00:25:57,120 --> 00:25:58,380
um

633
00:25:58,380 --> 00:26:01,620
there are several major uh training

634
00:26:01,620 --> 00:26:03,539
players out there that have really bad

635
00:26:03,539 --> 00:26:05,400
review questions so that's something

636
00:26:05,400 --> 00:26:07,740
that I like to key in on is those review

637
00:26:07,740 --> 00:26:09,000
questions making sure that they're

638
00:26:09,000 --> 00:26:11,220
asking about the material instead of

639
00:26:11,220 --> 00:26:16,020
just asking questions about quirks in in

640
00:26:16,020 --> 00:26:18,000
the presentation so they're trying to

641
00:26:18,000 --> 00:26:19,260
make sure that you watch the video or

642
00:26:19,260 --> 00:26:21,900
read the document and a subject matter

643
00:26:21,900 --> 00:26:24,600
expert should be able to pass

644
00:26:24,600 --> 00:26:27,900
other questions without even using the

645
00:26:27,900 --> 00:26:28,860
the

646
00:26:28,860 --> 00:26:32,000
uh the content

647
00:26:33,120 --> 00:26:35,700
so here's the big takeaway really is

648
00:26:35,700 --> 00:26:37,200
don't spend money or time trying to

649
00:26:37,200 --> 00:26:40,919
change the way developers think

650
00:26:40,919 --> 00:26:42,960
um trying to make them a hacker instead

651
00:26:42,960 --> 00:26:45,000
help them to hone their craftsmanship

652
00:26:45,000 --> 00:26:47,240
give them the tooling and the training

653
00:26:47,240 --> 00:26:50,760
to address the fundamentals to build a

654
00:26:50,760 --> 00:26:52,440
foundation for a robust software

655
00:26:52,440 --> 00:26:54,000
development life cycle

656
00:26:54,000 --> 00:26:57,539
and then address security concerns with

657
00:26:57,539 --> 00:26:59,700
software engineering tactics

658
00:26:59,700 --> 00:27:01,140
uh

659
00:27:01,140 --> 00:27:04,200
because a secure software development

660
00:27:04,200 --> 00:27:06,240
life cycle will never outpace the

661
00:27:06,240 --> 00:27:08,400
underlying implementation the underlying

662
00:27:08,400 --> 00:27:11,220
process because the best way is for

663
00:27:11,220 --> 00:27:14,039
developers to code secure without

664
00:27:14,039 --> 00:27:15,779
becoming hackers

665
00:27:15,779 --> 00:27:19,320
and I will stick around if anyone has

666
00:27:19,320 --> 00:27:20,400
questions

667
00:27:20,400 --> 00:27:22,440
on the sides of the stage I'd love to

668
00:27:22,440 --> 00:27:24,299
hear any of your comments unfortunately

669
00:27:24,299 --> 00:27:26,900
I'm out of time

670
00:27:29,720 --> 00:27:32,720
thank you

