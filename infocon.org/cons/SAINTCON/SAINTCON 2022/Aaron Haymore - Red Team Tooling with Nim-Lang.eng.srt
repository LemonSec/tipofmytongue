1
00:00:00,000 --> 00:00:02,159
thanks for coming everybody to my talk

2
00:00:02,159 --> 00:00:04,799
sorry about the technical issues but we

3
00:00:04,799 --> 00:00:06,180
should be good to go now

4
00:00:06,180 --> 00:00:09,660
my talk today is going to be on a super

5
00:00:09,660 --> 00:00:12,480
cool programming language called Nim

6
00:00:12,480 --> 00:00:15,360
and I've been using it in my day job and

7
00:00:15,360 --> 00:00:18,720
in my ctfs to build some red team tools

8
00:00:18,720 --> 00:00:21,619
that have been pretty effective in

9
00:00:21,619 --> 00:00:24,660
bypassing anti-virus and EDR Solutions

10
00:00:24,660 --> 00:00:29,039
and being pretty sneaky at the same time

11
00:00:29,039 --> 00:00:31,260
so a little bit about myself my name is

12
00:00:31,260 --> 00:00:33,719
Aaron haymore I graduated from enzyme

13
00:00:33,719 --> 00:00:35,940
college with my associates about two

14
00:00:35,940 --> 00:00:38,219
years ago and I'm currently going to

15
00:00:38,219 --> 00:00:40,860
Western Governors University I'm a

16
00:00:40,860 --> 00:00:43,500
application security engineer and red

17
00:00:43,500 --> 00:00:45,540
teamer for Merrick Bank and card work

18
00:00:45,540 --> 00:00:46,760
Servicing

19
00:00:46,760 --> 00:00:49,980
we test our internal apps and we also do

20
00:00:49,980 --> 00:00:52,739
our ad red teaming and all the hacking

21
00:00:52,739 --> 00:00:54,600
stuff

22
00:00:54,600 --> 00:00:56,940
so I want to talk a little bit about Nim

23
00:00:56,940 --> 00:00:58,739
and what it is

24
00:00:58,739 --> 00:01:01,020
one of the things that Drew me to Nim

25
00:01:01,020 --> 00:01:04,260
was that you can write your code and you

26
00:01:04,260 --> 00:01:08,040
can compile it for Linux or Windows and

27
00:01:08,040 --> 00:01:10,619
that same code when you compile it it

28
00:01:10,619 --> 00:01:12,060
will run on both systems so you don't

29
00:01:12,060 --> 00:01:14,400
have to worry about you know changing up

30
00:01:14,400 --> 00:01:16,799
things or you know this or that you

31
00:01:16,799 --> 00:01:18,360
compile it and it runs and it works

32
00:01:18,360 --> 00:01:20,340
which is super helpful when it comes to

33
00:01:20,340 --> 00:01:22,320
building Red Team Tools because you know

34
00:01:22,320 --> 00:01:23,880
you can write your scripts out and then

35
00:01:23,880 --> 00:01:25,799
compile it and you know depending on

36
00:01:25,799 --> 00:01:27,780
what machine you come across you can run

37
00:01:27,780 --> 00:01:29,640
it

38
00:01:29,640 --> 00:01:31,740
um and another cool thing is before it's

39
00:01:31,740 --> 00:01:34,320
compiled it's converted to C so it's

40
00:01:34,320 --> 00:01:35,840
super low level

41
00:01:35,840 --> 00:01:38,100
according to the author it's designed to

42
00:01:38,100 --> 00:01:40,920
be efficient expressive and elegant

43
00:01:40,920 --> 00:01:43,200
it's super easy to read it's very

44
00:01:43,200 --> 00:01:45,479
similar to python so it's really easy to

45
00:01:45,479 --> 00:01:47,939
pick up and learn and read compared to

46
00:01:47,939 --> 00:01:49,979
other languages

47
00:01:49,979 --> 00:01:51,840
and right now it's got a pretty small

48
00:01:51,840 --> 00:01:54,420
community so if you compare it to like a

49
00:01:54,420 --> 00:01:56,340
Metasploit payload every single

50
00:01:56,340 --> 00:01:58,159
antivirus is going to pick that up

51
00:01:58,159 --> 00:02:00,780
versus you have this small community of

52
00:02:00,780 --> 00:02:02,220
people writing in the super obscure

53
00:02:02,220 --> 00:02:04,799
language not many anti-viruses are going

54
00:02:04,799 --> 00:02:07,020
to pick it up

55
00:02:07,020 --> 00:02:09,479
so kind of all these things combined to

56
00:02:09,479 --> 00:02:12,300
make it perfect for a building Red Team

57
00:02:12,300 --> 00:02:15,300
Tools in you don't have anti-virus

58
00:02:15,300 --> 00:02:17,520
picking it up it's easy to write in you

59
00:02:17,520 --> 00:02:19,500
can cross compile

60
00:02:19,500 --> 00:02:21,540
so it's it's great

61
00:02:21,540 --> 00:02:27,180
I I saw this forum post on the Nim forum

62
00:02:27,180 --> 00:02:29,640
and this person was asking how they can

63
00:02:29,640 --> 00:02:31,260
create a function pointer to execute

64
00:02:31,260 --> 00:02:32,520
Shell Code

65
00:02:32,520 --> 00:02:34,920
and the author of nem he says please

66
00:02:34,920 --> 00:02:37,319
don't write your malware and Nim so I

67
00:02:37,319 --> 00:02:39,360
thought that was kind of funny

68
00:02:39,360 --> 00:02:41,280
so in my talk I'm going to be talking

69
00:02:41,280 --> 00:02:43,319
I'm going to go over some reverse shells

70
00:02:43,319 --> 00:02:45,780
doing some process injection and then

71
00:02:45,780 --> 00:02:47,580
showing off a cool a few more cool

72
00:02:47,580 --> 00:02:50,720
things that you can do with it

73
00:02:51,360 --> 00:02:53,040
um to get you a little bit familiar with

74
00:02:53,040 --> 00:02:56,420
the syntax and how truly how easy Nim is

75
00:02:56,420 --> 00:02:59,700
this is your standard hello world you

76
00:02:59,700 --> 00:03:02,940
just Echo hello world hello St Khan

77
00:03:02,940 --> 00:03:05,280
and that's that's your entire program so

78
00:03:05,280 --> 00:03:06,360
far

79
00:03:06,360 --> 00:03:09,180
this is showing off the compiler I

80
00:03:09,180 --> 00:03:11,580
compiled everything just on an Ubuntu

81
00:03:11,580 --> 00:03:15,180
machine you specify Nim the C is for

82
00:03:15,180 --> 00:03:18,060
compile and then whatever file you have

83
00:03:18,060 --> 00:03:20,340
so you can see it runs through

84
00:03:20,340 --> 00:03:22,620
um and it successfully compiles and then

85
00:03:22,620 --> 00:03:24,840
when you run the executable you just get

86
00:03:24,840 --> 00:03:26,159
hello world

87
00:03:26,159 --> 00:03:28,440
so that same code this is demonstrating

88
00:03:28,440 --> 00:03:31,140
the the cool cross compilation I've got

89
00:03:31,140 --> 00:03:32,879
a few more Flags here

90
00:03:32,879 --> 00:03:35,400
um for to make it work on Windows but

91
00:03:35,400 --> 00:03:37,260
it's the same thing

92
00:03:37,260 --> 00:03:39,379
and then here I just I hosted the file

93
00:03:39,379 --> 00:03:42,540
just on a HTTP server and downloaded it

94
00:03:42,540 --> 00:03:45,000
with curl and then when you execute it

95
00:03:45,000 --> 00:03:47,519
you get hello sync on so it's pretty

96
00:03:47,519 --> 00:03:49,440
cool

97
00:03:49,440 --> 00:03:52,459
getting into some more malicious items

98
00:03:52,459 --> 00:03:55,140
this is a pretty simple reverse shell

99
00:03:55,140 --> 00:03:58,080
that you can code and in about 24 lines

100
00:03:58,080 --> 00:04:01,080
of code minus white space you can get a

101
00:04:01,080 --> 00:04:03,659
working reverse shell when I first was

102
00:04:03,659 --> 00:04:06,659
working on this maybe six months ago I

103
00:04:06,659 --> 00:04:08,640
ran it against you know the most updated

104
00:04:08,640 --> 00:04:10,860
Windows machine with all the cool EDR

105
00:04:10,860 --> 00:04:13,680
tools on it and it just it went right

106
00:04:13,680 --> 00:04:16,738
through with no issues since then it's

107
00:04:16,738 --> 00:04:18,238
been posted on GitHub and it's got a

108
00:04:18,238 --> 00:04:20,339
little bit more traction and

109
00:04:20,339 --> 00:04:22,139
anti-viruses are starting to pick up on

110
00:04:22,139 --> 00:04:24,240
it but with a little bit of obfuscation

111
00:04:24,240 --> 00:04:27,360
it's still it still runs

112
00:04:27,360 --> 00:04:28,919
so running through the code just a

113
00:04:28,919 --> 00:04:30,600
little bit the first couple lines are

114
00:04:30,600 --> 00:04:33,540
just Imports I create a new variable

115
00:04:33,540 --> 00:04:35,280
called socket

116
00:04:35,280 --> 00:04:37,500
create a new function called shell that

117
00:04:37,500 --> 00:04:40,199
takes in two parameters and in our case

118
00:04:40,199 --> 00:04:43,500
it's the IP of our attacking machine and

119
00:04:43,500 --> 00:04:45,540
a port that we want to connect to

120
00:04:45,540 --> 00:04:48,600
we then try to connect back to our Cali

121
00:04:48,600 --> 00:04:51,620
machine and it waits to receive input

122
00:04:51,620 --> 00:04:54,780
so you know this is where your command

123
00:04:54,780 --> 00:04:56,699
will come in so if I type in who am I or

124
00:04:56,699 --> 00:05:01,440
der whatever it'll pass that into the

125
00:05:01,440 --> 00:05:03,840
about halfway down and it'll run the

126
00:05:03,840 --> 00:05:06,380
command and then send the output back to

127
00:05:06,380 --> 00:05:09,360
our machine

128
00:05:09,360 --> 00:05:11,160
so just to demonstrate that a little bit

129
00:05:11,160 --> 00:05:13,080
I compiled this code using the same

130
00:05:13,080 --> 00:05:17,100
thing as before doing it for Windows

131
00:05:17,100 --> 00:05:19,979
transfer it over and I execute the

132
00:05:19,979 --> 00:05:21,419
reverse shell

133
00:05:21,419 --> 00:05:23,699
and back on my attacking machine we can

134
00:05:23,699 --> 00:05:26,039
see that I get a connection back and we

135
00:05:26,039 --> 00:05:28,139
can successfully you know run commands

136
00:05:28,139 --> 00:05:29,580
and get rid of our shell pretty easy

137
00:05:29,580 --> 00:05:31,800
pretty cool

138
00:05:31,800 --> 00:05:33,960
like I mentioned when I first started

139
00:05:33,960 --> 00:05:36,180
working on some nin stuff 100 percent

140
00:05:36,180 --> 00:05:38,820
went right by you know those 24 lines of

141
00:05:38,820 --> 00:05:42,180
code but now like I said Ed guys are

142
00:05:42,180 --> 00:05:43,800
starting to pick it up a little bit but

143
00:05:43,800 --> 00:05:45,479
even just with a tiny bit of obfuscation

144
00:05:45,479 --> 00:05:48,259
I've had really good success with still

145
00:05:48,259 --> 00:05:51,500
bypassing AV

146
00:05:51,539 --> 00:05:53,460
the next part I want to talk about is

147
00:05:53,460 --> 00:05:55,380
doing some cool process injection with

148
00:05:55,380 --> 00:05:58,620
the windows API there's a library out

149
00:05:58,620 --> 00:06:01,020
there for Nim that lets you interact

150
00:06:01,020 --> 00:06:03,180
with the windows API

151
00:06:03,180 --> 00:06:05,520
the structure of this code it's it's a

152
00:06:05,520 --> 00:06:06,840
little bit more complex than the other

153
00:06:06,840 --> 00:06:09,300
one but it comes down to really four

154
00:06:09,300 --> 00:06:11,820
steps we need some imports we need to

155
00:06:11,820 --> 00:06:13,259
create a function that will actually

156
00:06:13,259 --> 00:06:16,139
make our APA API calls

157
00:06:16,139 --> 00:06:18,720
start and suspend a process and then

158
00:06:18,720 --> 00:06:20,820
we're going to actual make some make

159
00:06:20,820 --> 00:06:23,100
some API calls that will start our

160
00:06:23,100 --> 00:06:24,900
thread suspended and then inject our

161
00:06:24,900 --> 00:06:27,240
Shell Code into it

162
00:06:27,240 --> 00:06:28,919
so here's a few Imports that we need

163
00:06:28,919 --> 00:06:30,479
those are those libraries I mentioned

164
00:06:30,479 --> 00:06:32,039
previously

165
00:06:32,039 --> 00:06:34,440
this is a new function that's going to

166
00:06:34,440 --> 00:06:36,539
create our remote thread

167
00:06:36,539 --> 00:06:38,460
we're going to start a new process

168
00:06:38,460 --> 00:06:40,259
called Notepad and then we're going to

169
00:06:40,259 --> 00:06:43,199
suspend it and give ourself access so we

170
00:06:43,199 --> 00:06:44,759
can actually Act

171
00:06:44,759 --> 00:06:47,100
modify that process

172
00:06:47,100 --> 00:06:49,259
we're going to create some space and

173
00:06:49,259 --> 00:06:50,880
memory that we can write to this is

174
00:06:50,880 --> 00:06:53,539
where our shell code is going to go

175
00:06:53,539 --> 00:06:56,100
we're going to take some Shell Code and

176
00:06:56,100 --> 00:06:57,479
write it into memory

177
00:06:57,479 --> 00:06:59,220
and then it's going to create that

178
00:06:59,220 --> 00:07:00,600
remote thread

179
00:07:00,600 --> 00:07:03,419
so this is the Shell Code that will be

180
00:07:03,419 --> 00:07:06,960
executed it's just a windows message box

181
00:07:06,960 --> 00:07:10,500
that's in c-sharp I had to convert a

182
00:07:10,500 --> 00:07:13,440
little bit of the Shell Code to make it

183
00:07:13,440 --> 00:07:16,560
work within MRA but it's just changing a

184
00:07:16,560 --> 00:07:18,300
few numbers on the size of it in some

185
00:07:18,300 --> 00:07:20,099
brackets

186
00:07:20,099 --> 00:07:22,139
so after it's compiled

187
00:07:22,139 --> 00:07:24,960
um and transfer it over to the machine

188
00:07:24,960 --> 00:07:27,599
you can run it and you see we get you

189
00:07:27,599 --> 00:07:30,120
know hello from msf so that's a pretty

190
00:07:30,120 --> 00:07:32,639
it's a little bit complex but the code

191
00:07:32,639 --> 00:07:34,979
is really simple it's you know maybe 50

192
00:07:34,979 --> 00:07:38,039
lines and you can inject Shell Code into

193
00:07:38,039 --> 00:07:40,199
a process

194
00:07:40,199 --> 00:07:41,940
another cool thing that I've been

195
00:07:41,940 --> 00:07:45,319
experimenting with Nim is using already

196
00:07:45,319 --> 00:07:49,199
existing tools with it there's a repo

197
00:07:49,199 --> 00:07:51,960
out there called offensive Nim where

198
00:07:51,960 --> 00:07:53,940
there's tons of great templates that

199
00:07:53,940 --> 00:07:56,419
people have put together to

200
00:07:56,419 --> 00:07:58,800
do different malicious things and one of

201
00:07:58,800 --> 00:08:01,620
them is called execute binary execute

202
00:08:01,620 --> 00:08:03,840
assembly binary dot Nim

203
00:08:03,840 --> 00:08:06,180
and what this will do is it'll load a

204
00:08:06,180 --> 00:08:08,639
c-sharp

205
00:08:08,639 --> 00:08:11,880
executable and it will run it in memory

206
00:08:11,880 --> 00:08:14,280
so first we have to transfer it into a

207
00:08:14,280 --> 00:08:17,819
by array and then the script will then

208
00:08:17,819 --> 00:08:19,199
run that all in memory so I'll

209
00:08:19,199 --> 00:08:21,720
demonstrate that that now

210
00:08:21,720 --> 00:08:25,860
so I used the winps executable it's a

211
00:08:25,860 --> 00:08:28,259
common privilege escalation tool that's

212
00:08:28,259 --> 00:08:30,780
used on Windows machines it can get you

213
00:08:30,780 --> 00:08:33,719
different paths to system or pivoting or

214
00:08:33,719 --> 00:08:35,458
whatever you might need

215
00:08:35,458 --> 00:08:38,520
so there's a script that I found that is

216
00:08:38,520 --> 00:08:41,039
in Powershell and you load it in and

217
00:08:41,039 --> 00:08:42,779
then you give it whatever input file you

218
00:08:42,779 --> 00:08:45,180
want so I gave it when peas and then it

219
00:08:45,180 --> 00:08:48,300
will convert it to a byte array that Nim

220
00:08:48,300 --> 00:08:49,980
can read

221
00:08:49,980 --> 00:08:52,500
and then I I commented out right here

222
00:08:52,500 --> 00:08:55,620
array here because the string is just so

223
00:08:55,620 --> 00:08:59,580
long it would be a huge picture so you

224
00:08:59,580 --> 00:09:02,220
just import the array right there

225
00:09:02,220 --> 00:09:05,040
and then you compile it this one's a

226
00:09:05,040 --> 00:09:07,440
little bit more but it's just

227
00:09:07,440 --> 00:09:10,260
um same thing as before

228
00:09:10,260 --> 00:09:12,060
and then here it's a little bit small

229
00:09:12,060 --> 00:09:14,880
but at the top I named the file w dot

230
00:09:14,880 --> 00:09:18,060
EXE and it will then take that array

231
00:09:18,060 --> 00:09:21,000
convert it back and run when peas in

232
00:09:21,000 --> 00:09:22,800
memory

233
00:09:22,800 --> 00:09:24,240
there's a lot of other cool things that

234
00:09:24,240 --> 00:09:26,220
have been not done with Nim there's key

235
00:09:26,220 --> 00:09:30,540
loggers one of my co-workers wrote a a

236
00:09:30,540 --> 00:09:33,540
script to bypass amsi

237
00:09:33,540 --> 00:09:35,580
you can do system calls you can create

238
00:09:35,580 --> 00:09:38,040
HTTP server and do requests and

239
00:09:38,040 --> 00:09:40,080
somebody's even already made a C2 server

240
00:09:40,080 --> 00:09:42,660
with Nim already

241
00:09:42,660 --> 00:09:44,100
um and a lot of these things you know

242
00:09:44,100 --> 00:09:45,660
they're starting to get picked up on by

243
00:09:45,660 --> 00:09:48,240
AV but in in my experience I've had some

244
00:09:48,240 --> 00:09:49,860
pretty good success with

245
00:09:49,860 --> 00:09:52,320
building these tools in Nim and running

246
00:09:52,320 --> 00:09:55,680
them and having some pretty good success

247
00:09:55,680 --> 00:09:58,200
these are the two resources that I've

248
00:09:58,200 --> 00:10:00,720
really liked to use there's that GitHub

249
00:10:00,720 --> 00:10:01,980
repo

250
00:10:01,980 --> 00:10:03,120
um

251
00:10:03,120 --> 00:10:05,100
it's offensive Nim it's what I've

252
00:10:05,100 --> 00:10:07,620
referenced before and then there's also

253
00:10:07,620 --> 00:10:09,959
another GitHub page there that has got

254
00:10:09,959 --> 00:10:12,420
tons of great things on them

255
00:10:12,420 --> 00:10:15,740
so that's my presentation thanks

256
00:10:15,740 --> 00:10:20,440
[Applause]

