1
00:00:00,000 --> 00:00:03,680
all right hello everyone

2
00:00:03,680 --> 00:00:07,259
and today we'll talk about

3
00:00:07,259 --> 00:00:10,500
the databases and how do we hack open

4
00:00:10,500 --> 00:00:13,139
source databases pen testing MySQL and

5
00:00:13,139 --> 00:00:15,120
podcast SQL

6
00:00:15,120 --> 00:00:19,440
and my name is Alexander Rubin I am

7
00:00:19,440 --> 00:00:21,660
a principal database engineering at

8
00:00:21,660 --> 00:00:24,600
Amazon web services my background is

9
00:00:24,600 --> 00:00:28,199
MySQL I have been doing MySQL Consulting

10
00:00:28,199 --> 00:00:31,080
for a long time I started at mayaski lab

11
00:00:31,080 --> 00:00:37,160
the company behind MySQL I joined Amazon

12
00:00:37,160 --> 00:00:43,320
RDS relational databases service in 2020

13
00:00:43,320 --> 00:00:47,340
and uh I joined as a database engineer

14
00:00:47,340 --> 00:00:50,399
working on my SQL but then I switched to

15
00:00:50,399 --> 00:00:52,760
doing security and security was my

16
00:00:52,760 --> 00:00:55,739
personal hobby it started playing

17
00:00:55,739 --> 00:00:57,780
Capture the Flag games and doing

18
00:00:57,780 --> 00:01:00,500
security research so I'm currently

19
00:01:00,500 --> 00:01:05,159
leading uh what we call the red team RDS

20
00:01:05,159 --> 00:01:08,280
red team at Amazon web services

21
00:01:08,280 --> 00:01:12,740
and I also have my colleague Martin here

22
00:01:12,740 --> 00:01:16,260
and Martin is a member of my team and he

23
00:01:16,260 --> 00:01:18,600
is working on database security for 17

24
00:01:18,600 --> 00:01:20,100
years

25
00:01:20,100 --> 00:01:25,680
uh he joined uh in January uh this year

26
00:01:25,680 --> 00:01:28,619
and he is doing lots of penetration

27
00:01:28,619 --> 00:01:32,280
testing on various ew Services focusing

28
00:01:32,280 --> 00:01:35,400
primarily on databases but other

29
00:01:35,400 --> 00:01:37,799
services as well

30
00:01:37,799 --> 00:01:41,100
so let's see what this talk is about

31
00:01:41,100 --> 00:01:44,040
so January when you think about how do

32
00:01:44,040 --> 00:01:46,560
you pen test

33
00:01:46,560 --> 00:01:48,540
a database

34
00:01:48,540 --> 00:01:52,920
you may think well first let's run nmap

35
00:01:52,920 --> 00:01:55,860
and see if the port is open

36
00:01:55,860 --> 00:01:59,040
right and then we'll try to do a brute

37
00:01:59,040 --> 00:02:00,600
force of passwords something like that

38
00:02:00,600 --> 00:02:03,600
right that's usually not the case the

39
00:02:03,600 --> 00:02:05,340
more common scenario

40
00:02:05,340 --> 00:02:08,639
is we have an SQL injection

41
00:02:08,639 --> 00:02:11,038
and we will start with this scenario

42
00:02:11,038 --> 00:02:13,440
where our initial

43
00:02:13,440 --> 00:02:16,319
entry point into a database is through

44
00:02:16,319 --> 00:02:18,680
the SQL injection

45
00:02:18,680 --> 00:02:21,900
and this is a common SQL injection

46
00:02:21,900 --> 00:02:24,239
scenario right and this guy is me

47
00:02:24,239 --> 00:02:29,099
looking at this stuff here right so

48
00:02:29,099 --> 00:02:32,459
how come it's it's very simple it's

49
00:02:32,459 --> 00:02:36,420
pretty bad we have this customer info we

50
00:02:36,420 --> 00:02:39,060
have this like user input

51
00:02:39,060 --> 00:02:42,540
uh in there and it's pretty easy through

52
00:02:42,540 --> 00:02:45,120
this SQL injection to get into the

53
00:02:45,120 --> 00:02:46,980
database

54
00:02:46,980 --> 00:02:50,340
right and then the next thing what uh an

55
00:02:50,340 --> 00:02:52,860
attacker will do or pen tester will do

56
00:02:52,860 --> 00:02:57,720
right is to try to get into more deeply

57
00:02:57,720 --> 00:03:00,239
into the database and in case of MySQL

58
00:03:00,239 --> 00:03:03,239
MySQL has this users table

59
00:03:03,239 --> 00:03:06,239
and this user Table stores the username

60
00:03:06,239 --> 00:03:08,280
and the hash of the password so we'll

61
00:03:08,280 --> 00:03:10,200
try this

62
00:03:10,200 --> 00:03:13,019
but that was too easy right

63
00:03:13,019 --> 00:03:16,379
so what if we don't have an access to

64
00:03:16,379 --> 00:03:18,599
mysql.user

65
00:03:18,599 --> 00:03:20,640
what kind of scenario we are talking

66
00:03:20,640 --> 00:03:21,720
here

67
00:03:21,720 --> 00:03:24,480
so let's look at we will look through

68
00:03:24,480 --> 00:03:27,060
the typical entry point as a SQL

69
00:03:27,060 --> 00:03:28,500
injection but

70
00:03:28,500 --> 00:03:32,580
what really is there

71
00:03:32,580 --> 00:03:34,680
and this is a sample architecture

72
00:03:34,680 --> 00:03:36,420
totally fictional architecture here

73
00:03:36,420 --> 00:03:39,840
right but this is more common scenario

74
00:03:39,840 --> 00:03:43,980
where we have different applications in

75
00:03:43,980 --> 00:03:47,099
different databases and we have a in

76
00:03:47,099 --> 00:03:50,519
this particular case we have uh what is

77
00:03:50,519 --> 00:03:52,620
called multi-tenant

78
00:03:52,620 --> 00:03:55,260
applications so let's imagine that this

79
00:03:55,260 --> 00:03:58,440
is a health care records company that

80
00:03:58,440 --> 00:03:59,459
stores

81
00:03:59,459 --> 00:04:02,000
the health records

82
00:04:02,000 --> 00:04:07,140
pii Phi data into the health database

83
00:04:07,140 --> 00:04:10,980
but they also have a WordPress website

84
00:04:10,980 --> 00:04:13,680
which is just

85
00:04:13,680 --> 00:04:16,139
information about the company

86
00:04:16,139 --> 00:04:17,639
right

87
00:04:17,639 --> 00:04:19,079
and then

88
00:04:19,079 --> 00:04:21,418
we can totally imagine I can totally

89
00:04:21,418 --> 00:04:24,240
imagine that

90
00:04:24,240 --> 00:04:24,960
um

91
00:04:24,960 --> 00:04:26,699
an attacker

92
00:04:26,699 --> 00:04:29,699
will find an SQL injection in the

93
00:04:29,699 --> 00:04:31,800
WordPress which is notorious

94
00:04:31,800 --> 00:04:34,919
to have a skill injections and get into

95
00:04:34,919 --> 00:04:36,540
the WordPress

96
00:04:36,540 --> 00:04:38,759
but there is nothing interesting in the

97
00:04:38,759 --> 00:04:39,900
WordPress

98
00:04:39,900 --> 00:04:43,320
so our goal is to if pen testers is to

99
00:04:43,320 --> 00:04:45,240
try to access the health records

100
00:04:45,240 --> 00:04:46,620
database

101
00:04:46,620 --> 00:04:49,979
and in a good multi-tenant databases

102
00:04:49,979 --> 00:04:52,620
there is a isolation

103
00:04:52,620 --> 00:04:55,560
and MySQL provides an isolation method

104
00:04:55,560 --> 00:04:58,199
where if you have a full access to the

105
00:04:58,199 --> 00:05:00,180
WordPress database

106
00:05:00,180 --> 00:05:02,699
you will not be able to get into the

107
00:05:02,699 --> 00:05:05,840
health record studies

108
00:05:05,880 --> 00:05:08,880
so what I'm going to do next is I will

109
00:05:08,880 --> 00:05:10,440
demonstrate

110
00:05:10,440 --> 00:05:14,100
how a specific attack called confused

111
00:05:14,100 --> 00:05:15,419
deputy

112
00:05:15,419 --> 00:05:17,600
may help us

113
00:05:17,600 --> 00:05:21,120
to switch and break this isolation

114
00:05:21,120 --> 00:05:24,240
between the databases inside the single

115
00:05:24,240 --> 00:05:27,620
database instance

116
00:05:27,720 --> 00:05:29,820
so what is the confused Deputy problem

117
00:05:29,820 --> 00:05:32,820
so confused Deputy Deputy here is a

118
00:05:32,820 --> 00:05:34,259
computer program

119
00:05:34,259 --> 00:05:38,160
that was tricked by another program

120
00:05:38,160 --> 00:05:40,560
to do something

121
00:05:40,560 --> 00:05:43,440
and usually this another program doesn't

122
00:05:43,440 --> 00:05:45,539
have specific privileges

123
00:05:45,539 --> 00:05:49,320
in this confused Deputy program has

124
00:05:49,320 --> 00:05:52,620
enough privileges so we confuse the

125
00:05:52,620 --> 00:05:55,620
deputy to do something that we don't

126
00:05:55,620 --> 00:05:58,259
have privileges to do

127
00:05:58,259 --> 00:06:01,020
let me give you an example

128
00:06:01,020 --> 00:06:04,680
so let's say that we are on Linux

129
00:06:04,680 --> 00:06:09,180
and we want to make sure

130
00:06:09,180 --> 00:06:12,780
that if all files in the home directory

131
00:06:12,780 --> 00:06:17,520
is owned by that specific user right

132
00:06:17,520 --> 00:06:21,360
so we created this chrome job

133
00:06:21,360 --> 00:06:24,600
to run on a every minute

134
00:06:24,600 --> 00:06:27,600
to do the shown command

135
00:06:27,600 --> 00:06:30,419
on the home directory right that's a

136
00:06:30,419 --> 00:06:32,880
good idea right so we need to make sure

137
00:06:32,880 --> 00:06:35,100
that all the files inside of the home

138
00:06:35,100 --> 00:06:37,860
directory are owned by that user

139
00:06:37,860 --> 00:06:40,380
so what can go wrong

140
00:06:40,380 --> 00:06:43,080
actually there are lots of things that

141
00:06:43,080 --> 00:06:44,819
can go wrong here

142
00:06:44,819 --> 00:06:47,940
so I have recorded this video uh the

143
00:06:47,940 --> 00:06:50,759
screen share to demonstrate this so

144
00:06:50,759 --> 00:06:52,620
let's see

145
00:06:52,620 --> 00:06:56,100
so how does it work normally right so I

146
00:06:56,100 --> 00:06:58,979
created this route I have this gun job

147
00:06:58,979 --> 00:07:02,280
right first of all then I create a file

148
00:07:02,280 --> 00:07:05,759
as root in a home directory of ec2 user

149
00:07:05,759 --> 00:07:09,199
which is unprivileged user

150
00:07:09,240 --> 00:07:11,819
and then because we have this current

151
00:07:11,819 --> 00:07:14,940
job it will run

152
00:07:14,940 --> 00:07:17,520
and it will fix this problem it will

153
00:07:17,520 --> 00:07:21,120
show in this file to be owned by easy to

154
00:07:21,120 --> 00:07:26,940
use it so in a second it will do that

155
00:07:26,940 --> 00:07:29,160
not yet

156
00:07:29,160 --> 00:07:31,940
not yet

157
00:07:31,979 --> 00:07:33,660
and here we go

158
00:07:33,660 --> 00:07:36,960
so now what can happen is

159
00:07:36,960 --> 00:07:38,220
uh

160
00:07:38,220 --> 00:07:40,199
bad user

161
00:07:40,199 --> 00:07:43,500
can actually Create a Sim link

162
00:07:43,500 --> 00:07:46,680
from that user inside the home directory

163
00:07:46,680 --> 00:07:49,259
to EGC password

164
00:07:49,259 --> 00:07:51,539
and what will happen is that our current

165
00:07:51,539 --> 00:07:53,520
job

166
00:07:53,520 --> 00:07:57,660
will be our confused deputy

167
00:07:57,660 --> 00:08:01,919
so our ec2 user user

168
00:08:01,919 --> 00:08:05,160
is trying to confuse

169
00:08:05,160 --> 00:08:06,840
our system

170
00:08:06,840 --> 00:08:10,139
to give it more privileges

171
00:08:10,139 --> 00:08:13,380
so our current job will will run and

172
00:08:13,380 --> 00:08:16,740
what it will do is it will follow the

173
00:08:16,740 --> 00:08:18,900
Sim link we can Create a Sim link to any

174
00:08:18,900 --> 00:08:21,360
other file on the system right so when

175
00:08:21,360 --> 00:08:23,160
it follows some link it will actually

176
00:08:23,160 --> 00:08:25,919
show on the ETC password

177
00:08:25,919 --> 00:08:28,860
and change the user of Etc password to

178
00:08:28,860 --> 00:08:31,020
ec2 user

179
00:08:31,020 --> 00:08:34,679
so it in a second it will happen it just

180
00:08:34,679 --> 00:08:38,458
happened and now this easy to user can

181
00:08:38,458 --> 00:08:41,880
edit the ETC password and get obtained

182
00:08:41,880 --> 00:08:43,740
any privilege

183
00:08:43,740 --> 00:08:46,520
they want

184
00:08:48,060 --> 00:08:51,180
right we can create another root user we

185
00:08:51,180 --> 00:08:53,640
can change the easy to user ID we can do

186
00:08:53,640 --> 00:08:56,160
anything so basically we have

187
00:08:56,160 --> 00:08:59,339
successfully executed by creating a Sim

188
00:08:59,339 --> 00:09:03,980
link we have successfully executed a

189
00:09:03,980 --> 00:09:08,220
confused Deputy we confused our current

190
00:09:08,220 --> 00:09:12,240
job into doing something malicious

191
00:09:12,240 --> 00:09:15,000
now that we know how it works on Linux

192
00:09:15,000 --> 00:09:18,060
let's see how this applies to the

193
00:09:18,060 --> 00:09:20,599
databases

194
00:09:20,820 --> 00:09:24,000
so again we have this architecture just

195
00:09:24,000 --> 00:09:25,820
to remind

196
00:09:25,820 --> 00:09:29,459
our goal is to get into health records

197
00:09:29,459 --> 00:09:30,600
database

198
00:09:30,600 --> 00:09:32,519
and the mySQL database is sort of

199
00:09:32,519 --> 00:09:33,899
protected

200
00:09:33,899 --> 00:09:37,140
so let's dive deeper into this

201
00:09:37,140 --> 00:09:39,959
architecture and see what do we have on

202
00:09:39,959 --> 00:09:42,899
the MySQL part

203
00:09:42,899 --> 00:09:46,019
so we have a number of databases we have

204
00:09:46,019 --> 00:09:48,420
a Corp WordPress well it's actually

205
00:09:48,420 --> 00:09:50,220
users we have a number of users here

206
00:09:50,220 --> 00:09:53,839
right we have Corp WordPress user

207
00:09:53,839 --> 00:09:57,120
that have all and every access to the

208
00:09:57,120 --> 00:10:00,600
WordPress database which have absolutely

209
00:10:00,600 --> 00:10:02,880
nothing interesting in it and we have

210
00:10:02,880 --> 00:10:06,660
health data service user which have all

211
00:10:06,660 --> 00:10:09,360
access to the health records

212
00:10:09,360 --> 00:10:11,519
but in addition to that we have this

213
00:10:11,519 --> 00:10:13,140
monitor user

214
00:10:13,140 --> 00:10:15,660
so what is this

215
00:10:15,660 --> 00:10:19,140
let's take a look at a list of the

216
00:10:19,140 --> 00:10:20,700
Privileges

217
00:10:20,700 --> 00:10:23,459
so again we have Corp WordPress user

218
00:10:23,459 --> 00:10:25,440
which have all and every privilege on

219
00:10:25,440 --> 00:10:29,399
the WordPress database we have health

220
00:10:29,399 --> 00:10:32,040
data service user has all the privileges

221
00:10:32,040 --> 00:10:35,279
on health data service which is what we

222
00:10:35,279 --> 00:10:36,600
are attacking here

223
00:10:36,600 --> 00:10:39,480
and we have the monitor user

224
00:10:39,480 --> 00:10:41,540
which have

225
00:10:41,540 --> 00:10:43,920
uh select

226
00:10:43,920 --> 00:10:45,660
and execute

227
00:10:45,660 --> 00:10:48,779
so it actually has a select on star.star

228
00:10:48,779 --> 00:10:51,660
that means that it can select from all

229
00:10:51,660 --> 00:10:54,060
and every database

230
00:10:54,060 --> 00:10:55,920
but it also have

231
00:10:55,920 --> 00:10:59,279
select it doesn't have an ability to

232
00:10:59,279 --> 00:11:02,240
write to the system

233
00:11:02,399 --> 00:11:06,240
so this user is used for usually is used

234
00:11:06,240 --> 00:11:08,700
for performance monitoring system or can

235
00:11:08,700 --> 00:11:11,040
also be used for as a database

236
00:11:11,040 --> 00:11:12,779
administrator

237
00:11:12,779 --> 00:11:15,660
so the question is can we confuse this

238
00:11:15,660 --> 00:11:18,420
monitoring system into giving us an

239
00:11:18,420 --> 00:11:19,620
access

240
00:11:19,620 --> 00:11:23,760
to either mySQL database or Healthcare

241
00:11:23,760 --> 00:11:26,420
system

242
00:11:27,000 --> 00:11:30,600
if we will try to use this our current

243
00:11:30,600 --> 00:11:33,480
user which is WordPress user and we'll

244
00:11:33,480 --> 00:11:35,640
try to select from the MySQL user there

245
00:11:35,640 --> 00:11:38,220
will be no access right because it's not

246
00:11:38,220 --> 00:11:42,620
allowed to read this user and password

247
00:11:43,260 --> 00:11:45,899
but if we will do that from the

248
00:11:45,899 --> 00:11:47,640
monitoring user

249
00:11:47,640 --> 00:11:50,279
because it has a Global Select

250
00:11:50,279 --> 00:11:53,220
it can actually give us the

251
00:11:53,220 --> 00:11:55,980
passwords

252
00:11:55,980 --> 00:11:59,959
so let me get a little bit deeper into

253
00:11:59,959 --> 00:12:02,940
what the database performance monitoring

254
00:12:02,940 --> 00:12:03,779
do

255
00:12:03,779 --> 00:12:06,899
so it's usually it's a system that helps

256
00:12:06,899 --> 00:12:09,240
database administrators

257
00:12:09,240 --> 00:12:12,180
and it collects the database metrics it

258
00:12:12,180 --> 00:12:14,640
collects slow queries and it also what

259
00:12:14,640 --> 00:12:18,480
it also does it generate explain plan

260
00:12:18,480 --> 00:12:21,060
an explain plan will help database

261
00:12:21,060 --> 00:12:23,220
administrator to understand why the

262
00:12:23,220 --> 00:12:28,019
query is slow and how it goes

263
00:12:28,019 --> 00:12:30,240
so what database administrator do review

264
00:12:30,240 --> 00:12:32,519
database metrics collect slow queries

265
00:12:32,519 --> 00:12:34,920
and actually use explain plans to

266
00:12:34,920 --> 00:12:37,019
optimize the queries

267
00:12:37,019 --> 00:12:40,140
right so now when we know what the

268
00:12:40,140 --> 00:12:44,160
database operations are we can see

269
00:12:44,160 --> 00:12:46,320
deeper

270
00:12:46,320 --> 00:12:49,800
so let's take an example of this explain

271
00:12:49,800 --> 00:12:53,639
player when we run the explain we rerun

272
00:12:53,639 --> 00:12:56,700
the SQL statement with the explain

273
00:12:56,700 --> 00:12:59,279
Ed it to it

274
00:12:59,279 --> 00:13:02,399
and it will take this in a typical

275
00:13:02,399 --> 00:13:04,079
scenario a database administrator

276
00:13:04,079 --> 00:13:06,420
database engineer will take the slow

277
00:13:06,420 --> 00:13:09,899
query and run explain

278
00:13:09,899 --> 00:13:12,899
so what does explain plan do it doesn't

279
00:13:12,899 --> 00:13:16,440
re-execute the query right

280
00:13:16,440 --> 00:13:20,160
so if we run this it will never execute

281
00:13:20,160 --> 00:13:22,200
select query again

282
00:13:22,200 --> 00:13:23,700
correct

283
00:13:23,700 --> 00:13:26,100
actually in some cases

284
00:13:26,100 --> 00:13:27,899
it will

285
00:13:27,899 --> 00:13:30,360
and let's take a look at what cases and

286
00:13:30,360 --> 00:13:31,920
how it will work

287
00:13:31,920 --> 00:13:34,500
so that was actually a known thing for a

288
00:13:34,500 --> 00:13:38,279
long time well relatively long time

289
00:13:38,279 --> 00:13:40,940
uh in 2020 uh

290
00:13:40,940 --> 00:13:43,380
database consulting company

291
00:13:43,380 --> 00:13:46,980
has published this blog post

292
00:13:46,980 --> 00:13:51,660
about a case where an explain plan can

293
00:13:51,660 --> 00:13:52,820
actually

294
00:13:52,820 --> 00:13:56,399
re-execute the select query once again

295
00:13:56,399 --> 00:13:59,220
and this is really bad

296
00:13:59,220 --> 00:14:02,040
for various reasons not only for

297
00:14:02,040 --> 00:14:03,000
security

298
00:14:03,000 --> 00:14:06,120
if someone was doing something and you

299
00:14:06,120 --> 00:14:09,899
re-executed this query again then you

300
00:14:09,899 --> 00:14:12,480
make the database inconsistent

301
00:14:12,480 --> 00:14:15,779
so in this example we create a sub query

302
00:14:15,779 --> 00:14:17,940
and the reason why it actually

303
00:14:17,940 --> 00:14:21,839
re-execute this query is because

304
00:14:21,839 --> 00:14:24,120
it needs to calculate it needs to

305
00:14:24,120 --> 00:14:27,899
collect the statistics and metrics so to

306
00:14:27,899 --> 00:14:30,899
actually create the adequate metrics it

307
00:14:30,899 --> 00:14:33,959
will need to materialize this sub query

308
00:14:33,959 --> 00:14:36,420
so it will execute this query and this

309
00:14:36,420 --> 00:14:40,079
query will run for a long long time

310
00:14:40,079 --> 00:14:45,360
now how do can we use that and how can

311
00:14:45,360 --> 00:14:47,820
we escalate the Privileges

312
00:14:47,820 --> 00:14:52,680
so what we will do is we will first of

313
00:14:52,680 --> 00:14:55,320
all in the WordPress database in an

314
00:14:55,320 --> 00:14:58,079
attacker can create any objects it can

315
00:14:58,079 --> 00:15:01,260
create tables functions

316
00:15:01,260 --> 00:15:03,360
Etc

317
00:15:03,360 --> 00:15:06,180
so let's create a proof of concept where

318
00:15:06,180 --> 00:15:09,060
we will intentionally generate the slow

319
00:15:09,060 --> 00:15:10,019
query

320
00:15:10,019 --> 00:15:12,899
with a sub query in it and we will try

321
00:15:12,899 --> 00:15:16,800
to grab the username and password from

322
00:15:16,800 --> 00:15:20,040
the MySQL system database

323
00:15:20,040 --> 00:15:23,100
so what we'll do first is we will create

324
00:15:23,100 --> 00:15:25,320
this proof of concept we'll create an

325
00:15:25,320 --> 00:15:27,600
exploit function

326
00:15:27,600 --> 00:15:30,060
and this exploit function inside of that

327
00:15:30,060 --> 00:15:32,459
function we will select the password

328
00:15:32,459 --> 00:15:35,160
which is called authentication strain in

329
00:15:35,160 --> 00:15:37,980
MySQL

330
00:15:37,980 --> 00:15:41,279
and we will also make this query slow so

331
00:15:41,279 --> 00:15:43,320
what we will do is inside of this

332
00:15:43,320 --> 00:15:46,199
function we will check if the user is

333
00:15:46,199 --> 00:15:48,420
Monitor or not

334
00:15:48,420 --> 00:15:51,120
if it's not monitor then we will just

335
00:15:51,120 --> 00:15:53,339
simply make this query slow so it will

336
00:15:53,339 --> 00:15:56,399
pick it will be picked up by the

337
00:15:56,399 --> 00:15:58,139
monitoring system

338
00:15:58,139 --> 00:16:00,600
and then if the if the query is executed

339
00:16:00,600 --> 00:16:02,399
by the monitoring user we will just

340
00:16:02,399 --> 00:16:03,839
simply select

341
00:16:03,839 --> 00:16:06,600
but the question is how do we obtain

342
00:16:06,600 --> 00:16:08,820
this information how do we send it back

343
00:16:08,820 --> 00:16:12,920
to our WordPress user

344
00:16:13,380 --> 00:16:13,980
um

345
00:16:13,980 --> 00:16:17,519
give it a second for some reason my Mac

346
00:16:17,519 --> 00:16:21,079
is not charging

347
00:16:26,040 --> 00:16:28,380
can I get a working

348
00:16:28,380 --> 00:16:29,399
um

349
00:16:29,399 --> 00:16:32,399
power

350
00:16:47,579 --> 00:16:49,920
all right so

351
00:16:49,920 --> 00:16:51,920
um

352
00:16:54,240 --> 00:16:57,600
where we're at uh so the question is how

353
00:16:57,600 --> 00:17:00,600
do we send this back to our WordPress

354
00:17:00,600 --> 00:17:02,820
user

355
00:17:02,820 --> 00:17:05,819
right and um

356
00:17:05,819 --> 00:17:09,480
the answer is that uh there are

357
00:17:09,480 --> 00:17:12,540
another function that we can use and we

358
00:17:12,540 --> 00:17:15,980
can use a definer

359
00:17:16,160 --> 00:17:20,819
so the definer in mySQL database

360
00:17:20,819 --> 00:17:23,760
works as a fluid bit

361
00:17:23,760 --> 00:17:27,059
whenever you execute a function which

362
00:17:27,059 --> 00:17:29,580
have a definer in it this function will

363
00:17:29,580 --> 00:17:32,700
be executed in a context of

364
00:17:32,700 --> 00:17:34,020
um

365
00:17:34,020 --> 00:17:37,559
in the context of that user

366
00:17:37,559 --> 00:17:40,760
so we have created this

367
00:17:40,760 --> 00:17:44,640
function with a definer of the our

368
00:17:44,640 --> 00:17:47,039
unprivileged user

369
00:17:47,039 --> 00:17:48,840
yeah I'll

370
00:17:48,840 --> 00:17:52,100
let me switch that

371
00:17:53,580 --> 00:17:56,520
okay thank you very much

372
00:17:56,520 --> 00:17:58,860
all right so we will create this

373
00:17:58,860 --> 00:18:01,559
function with um Define of our

374
00:18:01,559 --> 00:18:03,480
unprivileged user and remember that we

375
00:18:03,480 --> 00:18:06,360
have an ability to insert so what we'll

376
00:18:06,360 --> 00:18:09,120
do is we will create a another function

377
00:18:09,120 --> 00:18:11,940
we'll create a save function which will

378
00:18:11,940 --> 00:18:14,340
allow us to actually save

379
00:18:14,340 --> 00:18:19,919
the password into a table that we fully

380
00:18:19,919 --> 00:18:22,679
own and control

381
00:18:22,679 --> 00:18:25,940
so let's take a look at the the final

382
00:18:25,940 --> 00:18:28,860
proof of concept so we create this

383
00:18:28,860 --> 00:18:30,780
function called exploit

384
00:18:30,780 --> 00:18:33,059
inside of that function we retrieve the

385
00:18:33,059 --> 00:18:35,220
password we put it in a variable and

386
00:18:35,220 --> 00:18:37,620
then we run another function which

387
00:18:37,620 --> 00:18:40,679
specify the definer so that will allow

388
00:18:40,679 --> 00:18:44,580
us to save the password into our table

389
00:18:44,580 --> 00:18:48,020
and then we'll make it slow

390
00:18:48,480 --> 00:18:51,480
so now we can save this admin password

391
00:18:51,480 --> 00:18:54,419
and we can just simply execute the

392
00:18:54,419 --> 00:18:55,980
select query

393
00:18:55,980 --> 00:18:59,760
so I have recorded this demo

394
00:18:59,760 --> 00:19:03,179
and let's see how it works so I have all

395
00:19:03,179 --> 00:19:07,340
these functions prepared here

396
00:19:07,380 --> 00:19:11,760
and I now let's make sure that we have a

397
00:19:11,760 --> 00:19:15,840
correct user current user

398
00:19:15,840 --> 00:19:19,919
our current user is Corp WordPress user

399
00:19:19,919 --> 00:19:24,780
and now I have prepared my table p

400
00:19:24,780 --> 00:19:27,660
which will have the password saved into

401
00:19:27,660 --> 00:19:31,860
it and now I generate the slow query so

402
00:19:31,860 --> 00:19:34,380
I will have a select start from and then

403
00:19:34,380 --> 00:19:37,140
I have a sub query here which will just

404
00:19:37,140 --> 00:19:38,640
select from the

405
00:19:38,640 --> 00:19:41,880
just use the exploit function right

406
00:19:41,880 --> 00:19:45,120
so this is a slow query I make it

407
00:19:45,120 --> 00:19:46,919
30 seconds

408
00:19:46,919 --> 00:19:51,480
so now this query will be picked up

409
00:19:51,480 --> 00:19:54,840
by the monitoring system or even by the

410
00:19:54,840 --> 00:19:56,580
database administrator

411
00:19:56,580 --> 00:19:59,700
in this database administrator will go

412
00:19:59,700 --> 00:20:02,580
here on the other side of the screen and

413
00:20:02,580 --> 00:20:04,860
run the explain

414
00:20:04,860 --> 00:20:07,080
and then

415
00:20:07,080 --> 00:20:08,940
the database administrator will be

416
00:20:08,940 --> 00:20:11,100
confused why this is not slow anymore

417
00:20:11,100 --> 00:20:13,200
what happened

418
00:20:13,200 --> 00:20:17,400
but now our user actually can select and

419
00:20:17,400 --> 00:20:19,559
see this is a password

420
00:20:19,559 --> 00:20:23,700
so we successfully retrieved the

421
00:20:23,700 --> 00:20:26,580
admin password

422
00:20:26,580 --> 00:20:29,400
and we could have just selected anything

423
00:20:29,400 --> 00:20:31,980
from the

424
00:20:31,980 --> 00:20:35,520
from the healthcare

425
00:20:35,520 --> 00:20:37,620
a database

426
00:20:37,620 --> 00:20:40,679
so now in this particular example we

427
00:20:40,679 --> 00:20:41,880
obtained

428
00:20:41,880 --> 00:20:43,380
the

429
00:20:43,380 --> 00:20:47,100
our monitoring password right

430
00:20:47,100 --> 00:20:51,299
so now we can reconnect using a monitor

431
00:20:51,299 --> 00:20:54,000
user in this password but the problem is

432
00:20:54,000 --> 00:20:56,700
this is not the actual password this is

433
00:20:56,700 --> 00:20:58,620
a hash of the password

434
00:20:58,620 --> 00:21:01,980
so next thing what I will do is I will

435
00:21:01,980 --> 00:21:06,900
start up my GPU ec2 instance 8 GPU cores

436
00:21:06,900 --> 00:21:08,940
and run the hashcad

437
00:21:08,940 --> 00:21:11,100
and um

438
00:21:11,100 --> 00:21:15,559
I will use the oops

439
00:21:15,900 --> 00:21:21,660
I will use the Roku file to basically

440
00:21:21,660 --> 00:21:23,400
try to

441
00:21:23,400 --> 00:21:26,280
get the password out of that

442
00:21:26,280 --> 00:21:29,340
and let's see how quickly it will work

443
00:21:29,340 --> 00:21:32,520
so I I created this I removed this star

444
00:21:32,520 --> 00:21:34,559
from the beginning of the password so

445
00:21:34,559 --> 00:21:38,340
that it will work with a hashcad star is

446
00:21:38,340 --> 00:21:40,500
just a minor skill specific

447
00:21:40,500 --> 00:21:43,980
and let's see so it's it just listen to

448
00:21:43,980 --> 00:21:45,960
less than a second right and the reason

449
00:21:45,960 --> 00:21:49,080
why the password is pass

450
00:21:49,080 --> 00:21:53,340
and do you have any idea why the

451
00:21:53,340 --> 00:21:55,620
monitoring user has this

452
00:21:55,620 --> 00:21:58,559
super simple password

453
00:21:58,559 --> 00:22:01,980
because nobody thought that this user is

454
00:22:01,980 --> 00:22:03,299
important

455
00:22:03,299 --> 00:22:06,360
as some database administrators set it

456
00:22:06,360 --> 00:22:09,179
up quickly to be able to get the metrics

457
00:22:09,179 --> 00:22:11,100
on the database

458
00:22:11,100 --> 00:22:16,020
and set up this highly unprivileged user

459
00:22:16,020 --> 00:22:19,260
and set up a simple password

460
00:22:19,260 --> 00:22:22,080
so to recap

461
00:22:22,080 --> 00:22:24,900
what we did so far is we confused our

462
00:22:24,900 --> 00:22:27,480
monitoring system or we confused an

463
00:22:27,480 --> 00:22:30,000
actual person DBA into run and explain

464
00:22:30,000 --> 00:22:32,340
on statement

465
00:22:32,340 --> 00:22:35,220
we have created

466
00:22:35,220 --> 00:22:39,140
on purpose this malicious SQL statement

467
00:22:39,140 --> 00:22:42,480
that retrieved the data that we normally

468
00:22:42,480 --> 00:22:46,280
will not be able to retrieve

469
00:22:46,919 --> 00:22:50,419
right and that worked actually because

470
00:22:50,419 --> 00:22:53,100
monitoring user had Global Select and

471
00:22:53,100 --> 00:22:55,799
execute privileges

472
00:22:55,799 --> 00:22:58,080
so we got a monitoring user password

473
00:22:58,080 --> 00:23:01,559
hash it was a simple password very easy

474
00:23:01,559 --> 00:23:03,120
to crack

475
00:23:03,120 --> 00:23:05,880
and as a result an attacker can connect

476
00:23:05,880 --> 00:23:08,460
as monitoring user and get the

477
00:23:08,460 --> 00:23:10,980
healthcare data

478
00:23:10,980 --> 00:23:14,520
so this part is done in our particular

479
00:23:14,520 --> 00:23:19,620
scenario what we did is we went from

480
00:23:19,620 --> 00:23:22,020
the

481
00:23:22,020 --> 00:23:24,120
SQL injection

482
00:23:24,120 --> 00:23:27,480
get some random WordPress database

483
00:23:27,480 --> 00:23:30,000
with this multi-tenant architecture

484
00:23:30,000 --> 00:23:34,020
we're able to utilize the monitoring

485
00:23:34,020 --> 00:23:37,140
system to get into the health records

486
00:23:37,140 --> 00:23:39,419
database

487
00:23:39,419 --> 00:23:41,280
all right this is a totally fictional

488
00:23:41,280 --> 00:23:43,220
scenario

489
00:23:43,220 --> 00:23:46,440
and first of all what about postgresql

490
00:23:46,440 --> 00:23:48,600
it is much more complicated but still

491
00:23:48,600 --> 00:23:51,360
possible I don't have proof of concept

492
00:23:51,360 --> 00:23:52,380
yet

493
00:23:52,380 --> 00:23:55,380
if I will have a proof of concept then I

494
00:23:55,380 --> 00:23:58,740
will present about that at some

495
00:23:58,740 --> 00:24:01,320
conference as well

496
00:24:01,320 --> 00:24:04,860
all right so we where we are

497
00:24:04,860 --> 00:24:07,020
so at this point

498
00:24:07,020 --> 00:24:10,559
we used an SQL injection

499
00:24:10,559 --> 00:24:13,559
attacked the relational database and get

500
00:24:13,559 --> 00:24:16,679
a full access to the relational database

501
00:24:16,679 --> 00:24:19,500
can we go further

502
00:24:19,500 --> 00:24:22,559
so what will be our next step

503
00:24:22,559 --> 00:24:24,659
our next step will be what is called

504
00:24:24,659 --> 00:24:26,580
database Escape

505
00:24:26,580 --> 00:24:31,380
and Martin will be talking now about the

506
00:24:31,380 --> 00:24:34,500
methods and how you get the escape from

507
00:24:34,500 --> 00:24:37,039
the database

508
00:24:38,760 --> 00:24:42,539
thank you hi everyone

509
00:24:42,539 --> 00:24:46,440
so uh this uh part I will talk about uh

510
00:24:46,440 --> 00:24:48,600
getting from a database to operating

511
00:24:48,600 --> 00:24:51,659
system establishing a footprint on OS

512
00:24:51,659 --> 00:24:55,100
from database

513
00:24:56,159 --> 00:24:58,919
so what do we have we have access to a

514
00:24:58,919 --> 00:25:00,840
database with the highest privileges we

515
00:25:00,840 --> 00:25:03,780
are admin on a database and what we need

516
00:25:03,780 --> 00:25:05,820
to do we need some sort of common

517
00:25:05,820 --> 00:25:08,520
execution operating system a command

518
00:25:08,520 --> 00:25:10,980
execution ideally it should be a

519
00:25:10,980 --> 00:25:12,539
privileged but unprivileged will work

520
00:25:12,539 --> 00:25:14,820
for us as well because we can later use

521
00:25:14,820 --> 00:25:16,400
some sort of

522
00:25:16,400 --> 00:25:20,760
LP to get a more privileged access so

523
00:25:20,760 --> 00:25:23,840
let's do a

524
00:25:24,000 --> 00:25:28,620
first part we will work on MySQL first

525
00:25:28,620 --> 00:25:31,140
I'm sorry we'll work on postgres first

526
00:25:31,140 --> 00:25:35,159
then MySQL in uh postgres it's uh

527
00:25:35,159 --> 00:25:38,340
relatively easy as long as you get a

528
00:25:38,340 --> 00:25:41,520
database administrator access on MySQL

529
00:25:41,520 --> 00:25:42,960
it's a little bit more complicated but

530
00:25:42,960 --> 00:25:44,700
it's still doable

531
00:25:44,700 --> 00:25:48,539
so for postgres we can do two things we

532
00:25:48,539 --> 00:25:51,659
can use a statement called copy table

533
00:25:51,659 --> 00:25:54,480
from program on pause brush as long as

534
00:25:54,480 --> 00:25:57,179
we are admin on a postgres database or

535
00:25:57,179 --> 00:26:01,640
we can use an archive comment as well

536
00:26:04,860 --> 00:26:08,279
so how does this work I did a small uh

537
00:26:08,279 --> 00:26:10,880
demo here

538
00:26:12,299 --> 00:26:14,900
hopefully it's readable

539
00:26:14,900 --> 00:26:18,480
uh this is a connection to a postgres

540
00:26:18,480 --> 00:26:21,120
machine first of all let's examine if

541
00:26:21,120 --> 00:26:24,000
there is a file on disk on the TMP I'm

542
00:26:24,000 --> 00:26:25,620
looking for Saint con

543
00:26:25,620 --> 00:26:28,320
text file it's not fair

544
00:26:28,320 --> 00:26:31,440
now let's connect as a postgres which is

545
00:26:31,440 --> 00:26:33,600
an admin to our database

546
00:26:33,600 --> 00:26:38,580
and do a great table we need this table

547
00:26:38,580 --> 00:26:41,820
as a prerequisite for the copy statement

548
00:26:41,820 --> 00:26:43,320
to work

549
00:26:43,320 --> 00:26:46,220
this is a dummy table

550
00:26:46,220 --> 00:26:50,159
its format is not important

551
00:26:50,159 --> 00:26:52,860
okay we have a table and now we run this

552
00:26:52,860 --> 00:26:55,860
copy table name from program statement

553
00:26:55,860 --> 00:26:58,559
which is allowed because we are admins

554
00:26:58,559 --> 00:27:00,960
on the postgres

555
00:27:00,960 --> 00:27:03,480
and as a comment I will supply A Simple

556
00:27:03,480 --> 00:27:07,039
Touch TMP sync on

557
00:27:10,559 --> 00:27:12,960
good let's check

558
00:27:12,960 --> 00:27:15,299
the file is there

559
00:27:15,299 --> 00:27:18,260
it's easy right

560
00:27:20,820 --> 00:27:23,760
okay moving on

561
00:27:23,760 --> 00:27:27,360
Let's uh try to do the same with archive

562
00:27:27,360 --> 00:27:29,159
command this is another option in

563
00:27:29,159 --> 00:27:32,100
postgres again let's double check that

564
00:27:32,100 --> 00:27:36,260
there is no file yet on the TMP

565
00:27:36,779 --> 00:27:39,299
nothing yet connect as a postgres which

566
00:27:39,299 --> 00:27:42,020
is an admin

567
00:27:42,020 --> 00:27:45,000
and I do older system set archive

568
00:27:45,000 --> 00:27:47,279
comment to my comment which again is

569
00:27:47,279 --> 00:27:50,039
touch TMP sync on

570
00:27:50,039 --> 00:27:51,900
you can do that alter system because

571
00:27:51,900 --> 00:27:54,059
you're an admin Within postgres

572
00:27:54,059 --> 00:27:56,700
and another comment I enable archive

573
00:27:56,700 --> 00:27:59,039
mode it should be on or always for this

574
00:27:59,039 --> 00:28:00,059
to work

575
00:28:00,059 --> 00:28:02,820
uh the only uh problem here is that the

576
00:28:02,820 --> 00:28:05,159
server needs to be restarted or recycled

577
00:28:05,159 --> 00:28:09,480
after the older system set archive mode

578
00:28:09,480 --> 00:28:12,600
is changed so here for simulation I just

579
00:28:12,600 --> 00:28:16,140
restart the service but in real world a

580
00:28:16,140 --> 00:28:18,120
bad actor can just wait for the server

581
00:28:18,120 --> 00:28:19,980
to reboot after let's say operating

582
00:28:19,980 --> 00:28:22,380
system update or something like that

583
00:28:22,380 --> 00:28:26,220
okay we restarted and the file is there

584
00:28:26,220 --> 00:28:28,940
pretty easy

585
00:28:31,860 --> 00:28:35,039
now let's uh look at the reversal

586
00:28:35,039 --> 00:28:36,179
example

587
00:28:36,179 --> 00:28:38,700
again postgres

588
00:28:38,700 --> 00:28:41,820
I have my uh

589
00:28:41,820 --> 00:28:44,220
Windows split into two parts in one I

590
00:28:44,220 --> 00:28:45,960
will run a netcat

591
00:28:45,960 --> 00:28:50,940
and another one I will do the psql

592
00:28:52,440 --> 00:28:54,840
thank you

593
00:28:54,840 --> 00:28:58,020
okay we are connecting as an admin to a

594
00:28:58,020 --> 00:28:59,400
postgres

595
00:28:59,400 --> 00:29:02,400
again with a create table our dummy

596
00:29:02,400 --> 00:29:04,580
table

597
00:29:07,020 --> 00:29:09,840
and then we start a net netcat listener

598
00:29:09,840 --> 00:29:13,320
on the same machine just to make it easy

599
00:29:13,320 --> 00:29:16,740
and now I use uh payload which will

600
00:29:16,740 --> 00:29:20,820
connect to to my netcat listener and as

601
00:29:20,820 --> 00:29:24,020
you can see I can run commands

602
00:29:24,539 --> 00:29:27,000
in real world because attacker will use

603
00:29:27,000 --> 00:29:30,919
a remote address remote IP

604
00:29:34,679 --> 00:29:38,520
so that's the remote shell for postgres

605
00:29:38,520 --> 00:29:43,380
now on my skill part in MySQL

606
00:29:43,380 --> 00:29:46,140
it's a little bit more tricky but still

607
00:29:46,140 --> 00:29:48,720
doable so what we do we create a table

608
00:29:48,720 --> 00:29:52,220
first we upload our binary

609
00:29:52,220 --> 00:29:54,840
payload to this table

610
00:29:54,840 --> 00:29:57,659
and we export data from each table to

611
00:29:57,659 --> 00:30:00,539
disk and when we use exported file as a

612
00:30:00,539 --> 00:30:03,000
source of user-defined function which

613
00:30:03,000 --> 00:30:05,159
will allow us to run comments on

614
00:30:05,159 --> 00:30:07,880
on the machine

615
00:30:14,460 --> 00:30:17,460
all right here's how we create a file

616
00:30:17,460 --> 00:30:20,460
we connect as an admin root in case of

617
00:30:20,460 --> 00:30:22,860
MySQL

618
00:30:22,860 --> 00:30:26,220
switch to mySQL database create a table

619
00:30:26,220 --> 00:30:29,880
and just insert some some value

620
00:30:29,880 --> 00:30:32,159
into this table and later we'll export

621
00:30:32,159 --> 00:30:34,399
that

622
00:30:35,760 --> 00:30:38,760
so here I just

623
00:30:38,760 --> 00:30:43,940
because simple simple four byte value

624
00:30:47,279 --> 00:30:49,679
for for this demo

625
00:30:49,679 --> 00:30:51,480
but in reality it could be any any

626
00:30:51,480 --> 00:30:54,200
binary

627
00:30:56,279 --> 00:31:00,000
okay this is an insert and now I do the

628
00:31:00,000 --> 00:31:02,360
export to a local

629
00:31:02,360 --> 00:31:07,639
two local uh disk of a server

630
00:31:09,899 --> 00:31:13,080
before that I will examine the plugin uh

631
00:31:13,080 --> 00:31:15,960
directory location on this machine to be

632
00:31:15,960 --> 00:31:19,440
able to write directly to this uh plugin

633
00:31:19,440 --> 00:31:22,500
location which will help us later on

634
00:31:22,500 --> 00:31:25,080
so I do show variable

635
00:31:25,080 --> 00:31:28,020
and just repeat with select into out

636
00:31:28,020 --> 00:31:29,460
file

637
00:31:29,460 --> 00:31:31,559
there is one a requisite for this to

638
00:31:31,559 --> 00:31:34,700
work of a secure

639
00:31:35,940 --> 00:31:39,539
secure file file pre setting should be

640
00:31:39,539 --> 00:31:43,580
set to an empty value

641
00:31:46,320 --> 00:31:49,020
all right as you can see we we have been

642
00:31:49,020 --> 00:31:53,039
able to write to a disk with four bytes

643
00:31:53,039 --> 00:31:57,960
but like I said it could be any binary

644
00:31:57,960 --> 00:32:01,020
next part let's create a function which

645
00:32:01,020 --> 00:32:03,240
will help us to run operating system

646
00:32:03,240 --> 00:32:05,840
commands

647
00:32:14,059 --> 00:32:17,039
this is a source code you can easily

648
00:32:17,039 --> 00:32:20,880
find it on a on a GitHub I think

649
00:32:20,880 --> 00:32:23,480
I'm sorry

650
00:32:24,440 --> 00:32:28,640
it's a Russian position

651
00:32:38,120 --> 00:32:41,539
now let me see

652
00:32:50,100 --> 00:32:52,799
yep so here you can see it's very simple

653
00:32:52,799 --> 00:32:54,960
a wrapper around the system

654
00:32:54,960 --> 00:32:57,419
uh system

655
00:32:57,419 --> 00:33:00,419
runtime function

656
00:33:00,419 --> 00:33:04,380
and what we do here we just

657
00:33:04,380 --> 00:33:07,080
compile this into a shared object on

658
00:33:07,080 --> 00:33:09,360
Linux

659
00:33:09,360 --> 00:33:11,700
and using technique from previous slide

660
00:33:11,700 --> 00:33:14,820
we can upload it to the file system of

661
00:33:14,820 --> 00:33:17,840
MySQL machine

662
00:33:22,860 --> 00:33:25,559
it's just a l file

663
00:33:25,559 --> 00:33:28,380
you can create a program to upload it

664
00:33:28,380 --> 00:33:30,120
through insert to a table and then

665
00:33:30,120 --> 00:33:32,580
export it

666
00:33:32,580 --> 00:33:35,658
and the final step

667
00:33:35,880 --> 00:33:38,399
common execution

668
00:33:38,399 --> 00:33:41,519
here we again test for file existence

669
00:33:41,519 --> 00:33:43,320
before we do anything

670
00:33:43,320 --> 00:33:46,140
file is not there we connect as root

671
00:33:46,140 --> 00:33:49,140
MySQL

672
00:33:57,059 --> 00:33:59,299
when we create a function here

673
00:33:59,299 --> 00:34:01,919
referencing our uploaded

674
00:34:01,919 --> 00:34:04,620
UDF shared object and just do select

675
00:34:04,620 --> 00:34:07,080
using this do system

676
00:34:07,080 --> 00:34:09,540
uh function name

677
00:34:09,540 --> 00:34:12,659
to create a file

678
00:34:12,659 --> 00:34:16,199
let's check the file is there

679
00:34:16,199 --> 00:34:19,139
so that's a MySQL demo for common

680
00:34:19,139 --> 00:34:20,339
execution

681
00:34:20,339 --> 00:34:23,580
and like I said after we got a basic

682
00:34:23,580 --> 00:34:27,139
common execution we can do

683
00:34:27,540 --> 00:34:30,179
another step try to escalate to root for

684
00:34:30,179 --> 00:34:32,899
example on a box

685
00:34:33,599 --> 00:34:36,179
that's right thank you Martin for the

686
00:34:36,179 --> 00:34:37,560
demo

687
00:34:37,560 --> 00:34:42,960
and uh the final step here is

688
00:34:42,960 --> 00:34:46,560
how do we move laterally

689
00:34:46,560 --> 00:34:50,699
so at this point again we had been able

690
00:34:50,699 --> 00:34:53,099
to start with the SQL injection escalate

691
00:34:53,099 --> 00:34:56,460
the privilege inside the database uh get

692
00:34:56,460 --> 00:34:58,800
in to the

693
00:34:58,800 --> 00:35:01,260
database server itself using

694
00:35:01,260 --> 00:35:04,320
unprivileged shell and possibly even

695
00:35:04,320 --> 00:35:07,500
escalate to root

696
00:35:07,500 --> 00:35:09,960
we haven't looked into how to escalate

697
00:35:09,960 --> 00:35:12,900
through it but so the next thing we will

698
00:35:12,900 --> 00:35:15,599
try to actually move laterally and

699
00:35:15,599 --> 00:35:19,140
usually how does it work is if we want

700
00:35:19,140 --> 00:35:21,359
to move laterally right we want to

701
00:35:21,359 --> 00:35:24,720
switch to move to the application server

702
00:35:24,720 --> 00:35:28,079
so application server connects to mySQL

703
00:35:28,079 --> 00:35:29,640
to do something

704
00:35:29,640 --> 00:35:32,880
right in this particular scenario we use

705
00:35:32,880 --> 00:35:36,060
SQL injection we hit the application

706
00:35:36,060 --> 00:35:38,579
server but with the SQL injection we

707
00:35:38,579 --> 00:35:40,980
don't we don't actually have an access

708
00:35:40,980 --> 00:35:43,560
to the application server we connect to

709
00:35:43,560 --> 00:35:44,880
the database

710
00:35:44,880 --> 00:35:49,680
so how do we try to get into the MySQL

711
00:35:49,680 --> 00:35:51,720
client

712
00:35:51,720 --> 00:35:54,780
so what we'll do is we will use this

713
00:35:54,780 --> 00:35:57,960
Rogue server technique and we'll try to

714
00:35:57,960 --> 00:36:01,380
read any file arbitrary file from the

715
00:36:01,380 --> 00:36:03,359
client

716
00:36:03,359 --> 00:36:06,000
so here what we'll do is

717
00:36:06,000 --> 00:36:08,880
again if you are on

718
00:36:08,880 --> 00:36:11,520
the database server

719
00:36:11,520 --> 00:36:16,020
you're running as a user that runs this

720
00:36:16,020 --> 00:36:18,920
database server

721
00:36:19,260 --> 00:36:21,660
it's usually not rude

722
00:36:21,660 --> 00:36:24,540
it's usually something like postgres or

723
00:36:24,540 --> 00:36:26,400
MySQL user

724
00:36:26,400 --> 00:36:28,619
but you have the ability to shut down

725
00:36:28,619 --> 00:36:29,940
that server

726
00:36:29,940 --> 00:36:32,880
and start something start

727
00:36:32,880 --> 00:36:35,579
something to replace that

728
00:36:35,579 --> 00:36:39,780
and this user will be able to to buy and

729
00:36:39,780 --> 00:36:41,820
on the same port

730
00:36:41,820 --> 00:36:44,160
so what we will do here is we will

731
00:36:44,160 --> 00:36:46,859
replace our normal Maya scale server

732
00:36:46,859 --> 00:36:50,000
with a rogue server

733
00:36:50,000 --> 00:36:52,859
and when we replace that with the Rogue

734
00:36:52,859 --> 00:36:56,520
server we will trick MySQL client to

735
00:36:56,520 --> 00:37:00,660
read any file from the client host

736
00:37:00,660 --> 00:37:03,180
this vulnerability has been known for

737
00:37:03,180 --> 00:37:05,339
for years

738
00:37:05,339 --> 00:37:09,079
and the good news is that in the recent

739
00:37:09,079 --> 00:37:11,640
Maya skl

740
00:37:11,640 --> 00:37:14,760
versions this is not possible

741
00:37:14,760 --> 00:37:18,780
you can also want to say that MySQL has

742
00:37:18,780 --> 00:37:22,560
much more secure defaults now like what

743
00:37:22,560 --> 00:37:24,420
Martin has demonstrated

744
00:37:24,420 --> 00:37:26,700
will not be possible with the default

745
00:37:26,700 --> 00:37:28,619
configuration

746
00:37:28,619 --> 00:37:31,560
but with this Rogue server we can at

747
00:37:31,560 --> 00:37:35,940
least try to trick again our client that

748
00:37:35,940 --> 00:37:41,760
connects to mySQL to obtain a file

749
00:37:41,760 --> 00:37:44,940
so how does it work MySQL has this load

750
00:37:44,940 --> 00:37:47,160
data local in file

751
00:37:47,160 --> 00:37:48,780
command

752
00:37:48,780 --> 00:37:51,920
and what this load data local in file

753
00:37:51,920 --> 00:37:55,560
commanded does it actually tells the

754
00:37:55,560 --> 00:37:58,500
client to read the file

755
00:37:58,500 --> 00:38:01,320
and send it to the server

756
00:38:01,320 --> 00:38:03,960
that was a common way to import the

757
00:38:03,960 --> 00:38:06,440
files into

758
00:38:06,440 --> 00:38:09,599
the MySQL table

759
00:38:09,599 --> 00:38:12,180
but what is also interesting about this

760
00:38:12,180 --> 00:38:15,720
is the server can tell the client

761
00:38:15,720 --> 00:38:20,160
give me a file and I will put it in a

762
00:38:20,160 --> 00:38:21,960
table

763
00:38:21,960 --> 00:38:26,780
but with a rogue server we can actually

764
00:38:26,780 --> 00:38:31,020
reply with this packet load data in file

765
00:38:31,020 --> 00:38:34,200
packet to any connect

766
00:38:34,200 --> 00:38:36,960
so this is basically the work that has

767
00:38:36,960 --> 00:38:38,880
been done by

768
00:38:38,880 --> 00:38:42,079
in 2018

769
00:38:42,240 --> 00:38:44,640
to

770
00:38:44,640 --> 00:38:48,780
trace the MySQL protocol uh do the

771
00:38:48,780 --> 00:38:52,920
varshark TCP dump on the MySQL

772
00:38:52,920 --> 00:38:57,119
connection and those guys realize that

773
00:38:57,119 --> 00:39:00,359
there is a capabilities flag and when

774
00:39:00,359 --> 00:39:02,820
you say this capability flag it actually

775
00:39:02,820 --> 00:39:06,660
can trick the client to send the server

776
00:39:06,660 --> 00:39:09,440
arbitrary file

777
00:39:09,980 --> 00:39:13,200
so with this

778
00:39:13,200 --> 00:39:15,900
we can actually move try to move

779
00:39:15,900 --> 00:39:18,540
laterally we can try to read Etc

780
00:39:18,540 --> 00:39:22,079
passwords we can try to read whatever

781
00:39:22,079 --> 00:39:25,980
else we can even try to read Etc Shadow

782
00:39:25,980 --> 00:39:29,040
if the client is running from root which

783
00:39:29,040 --> 00:39:31,859
is unlikely but

784
00:39:31,859 --> 00:39:35,880
so a quick recap we went from SQL

785
00:39:35,880 --> 00:39:38,579
injection to

786
00:39:38,579 --> 00:39:41,280
escalating privileges downloading the

787
00:39:41,280 --> 00:39:44,540
healthcare data in our fictional example

788
00:39:44,540 --> 00:39:48,180
to run any commands the shell commands

789
00:39:48,180 --> 00:39:49,820
on

790
00:39:49,820 --> 00:39:53,460
MySQL server on Linux to moving

791
00:39:53,460 --> 00:39:58,040
laterally moving to the client

792
00:39:58,440 --> 00:40:02,640
so how do we fix that

793
00:40:02,640 --> 00:40:04,740
so first of all obvious

794
00:40:04,740 --> 00:40:06,780
protect application from a mascular

795
00:40:06,780 --> 00:40:08,420
injection

796
00:40:08,420 --> 00:40:11,520
use prepared statements sanitize the

797
00:40:11,520 --> 00:40:16,440
input and also Grant only what is needed

798
00:40:16,440 --> 00:40:19,859
you don't want to Grant select Star on

799
00:40:19,859 --> 00:40:23,099
Star to some monitoring user that you

800
00:40:23,099 --> 00:40:25,920
not even know about

801
00:40:25,920 --> 00:40:29,359
and always use the latest versions

802
00:40:29,359 --> 00:40:34,440
SQL MySQL specifically has now much more

803
00:40:34,440 --> 00:40:35,940
secure default

804
00:40:35,940 --> 00:40:38,760
and none of those privilege escalation

805
00:40:38,760 --> 00:40:41,579
that we demonstrated starting with the

806
00:40:41,579 --> 00:40:44,520
Martin's demo and my lateral movement

807
00:40:44,520 --> 00:40:47,240
will not work

808
00:40:47,579 --> 00:40:50,339
so that's all that I wanted to talk

809
00:40:50,339 --> 00:40:51,599
about

810
00:40:51,599 --> 00:40:55,079
um again my name is Alex and I'm also

811
00:40:55,079 --> 00:40:59,040
building this uh team which is a new

812
00:40:59,040 --> 00:41:01,800
team not so new anymore but I'm building

813
00:41:01,800 --> 00:41:04,619
the red team at Amazon web services if

814
00:41:04,619 --> 00:41:08,280
you're interested joining my team doing

815
00:41:08,280 --> 00:41:09,560
some

816
00:41:09,560 --> 00:41:12,720
penetration tests on our services please

817
00:41:12,720 --> 00:41:18,618
come to see me all right and uh I have

818
00:41:18,660 --> 00:41:21,300
some time for the questions if anyone

819
00:41:21,300 --> 00:41:23,540
have

820
00:41:23,700 --> 00:41:26,180
yes

821
00:41:28,320 --> 00:41:30,859
correct

822
00:41:33,839 --> 00:41:36,359
no no you're you're right you're

823
00:41:36,359 --> 00:41:37,800
absolutely right that's a good call out

824
00:41:37,800 --> 00:41:41,160
the copy command is not necessarily

825
00:41:41,160 --> 00:41:44,060
fixed so the

826
00:41:44,060 --> 00:41:46,380
postgresquiel and Maya skill has a

827
00:41:46,380 --> 00:41:48,900
different

828
00:41:48,900 --> 00:41:50,760
um what I would call privileged model

829
00:41:50,760 --> 00:41:54,359
right and the podcast Community always

830
00:41:54,359 --> 00:41:56,940
said that

831
00:41:56,940 --> 00:41:59,880
um the super user the root user on

832
00:41:59,880 --> 00:42:01,740
postgres

833
00:42:01,740 --> 00:42:05,099
have the ability to execute the commands

834
00:42:05,099 --> 00:42:08,520
and there are tons of ways how we can

835
00:42:08,520 --> 00:42:10,619
execute the commands as long as we have

836
00:42:10,619 --> 00:42:12,560
the root user

837
00:42:12,560 --> 00:42:15,839
and so but the prerequisite of that is

838
00:42:15,839 --> 00:42:19,859
to to be able to obtain that root user

839
00:42:19,859 --> 00:42:22,020
the super user right so and the normal

840
00:42:22,020 --> 00:42:25,020
user that he is connecting to the to the

841
00:42:25,020 --> 00:42:27,599
database doesn't have that capabilities

842
00:42:27,599 --> 00:42:30,300
in MySQL it's a it's a different

843
00:42:30,300 --> 00:42:32,839
privileged model it's different user

844
00:42:32,839 --> 00:42:36,540
auth model where it's much simpler right

845
00:42:36,540 --> 00:42:39,660
it basically have

846
00:42:39,660 --> 00:42:44,700
uh the the database level Privileges and

847
00:42:44,700 --> 00:42:48,300
table level Privileges and other stuff

848
00:42:48,300 --> 00:42:50,940
but in MySQL

849
00:42:50,940 --> 00:42:54,060
even if you have a super user on the

850
00:42:54,060 --> 00:42:56,280
database you're not supposed to have

851
00:42:56,280 --> 00:42:58,020
anything

852
00:42:58,020 --> 00:43:00,180
to be able to execute the commands

853
00:43:00,180 --> 00:43:04,440
unless you make this insecure default or

854
00:43:04,440 --> 00:43:07,380
insecure configuration

855
00:43:07,380 --> 00:43:09,980
yes

856
00:43:16,880 --> 00:43:19,740
that's that has been discussed with the

857
00:43:19,740 --> 00:43:21,960
postgres community

858
00:43:21,960 --> 00:43:25,260
uh the one of the things is that

859
00:43:25,260 --> 00:43:27,960
postgres allowed this archive command

860
00:43:27,960 --> 00:43:31,020
that basically implements the

861
00:43:31,020 --> 00:43:33,420
I think it's redo log right it's a

862
00:43:33,420 --> 00:43:35,819
readalog archiving

863
00:43:35,819 --> 00:43:38,579
uh through the shell command

864
00:43:38,579 --> 00:43:39,780
from the

865
00:43:39,780 --> 00:43:44,160
from the file level and that's why it

866
00:43:44,160 --> 00:43:47,099
have this capability to execute the

867
00:43:47,099 --> 00:43:49,740
shell commands and this is what we have

868
00:43:49,740 --> 00:43:50,819
abused

869
00:43:50,819 --> 00:43:54,960
I would totally love to have a a

870
00:43:54,960 --> 00:43:58,800
different model in postgres where we can

871
00:43:58,800 --> 00:44:03,180
configure it and say absolutely no shell

872
00:44:03,180 --> 00:44:06,000
commands execution equals two

873
00:44:06,000 --> 00:44:08,579
but it doesn't exist right now as far as

874
00:44:08,579 --> 00:44:11,660
that as far as I know

875
00:44:14,819 --> 00:44:17,839
any other questions

876
00:44:20,640 --> 00:44:22,900
all right thank you very much

877
00:44:22,900 --> 00:44:30,479
[Applause]

