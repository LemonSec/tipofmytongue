1
00:00:00,120 --> 00:00:01,860
welcome everyone thanks for coming out

2
00:00:01,860 --> 00:00:04,799
to the session appreciate it so today

3
00:00:04,799 --> 00:00:06,779
I'm just gonna be talking about

4
00:00:06,779 --> 00:00:08,820
how to apply offensive techniques to

5
00:00:08,820 --> 00:00:11,519
various cloud infrastructures like AWS

6
00:00:11,519 --> 00:00:14,519
Azure gcp things like that so

7
00:00:14,519 --> 00:00:18,180
um yeah yeah good times so uh here's

8
00:00:18,180 --> 00:00:20,460
kind of a brief agenda of what's going

9
00:00:20,460 --> 00:00:22,199
to be going on in the talk so I'll talk

10
00:00:22,199 --> 00:00:24,240
briefly about who I am I'll talk kind of

11
00:00:24,240 --> 00:00:26,039
like high level how you go from nothing

12
00:00:26,039 --> 00:00:27,960
to you know the admin over a cloud

13
00:00:27,960 --> 00:00:29,519
environment

14
00:00:29,519 --> 00:00:31,859
and I'll talk just a little bit about

15
00:00:31,859 --> 00:00:34,140
um you know SSL token stealing or

16
00:00:34,140 --> 00:00:35,820
browser cookie stealing which I've seen

17
00:00:35,820 --> 00:00:38,219
some other talks at St Khan have been

18
00:00:38,219 --> 00:00:39,300
talking about that a bunch so that's

19
00:00:39,300 --> 00:00:41,340
great to hear that's getting out there

20
00:00:41,340 --> 00:00:42,899
and then we'll kind of dive into some

21
00:00:42,899 --> 00:00:45,300
different graph database Technologies to

22
00:00:45,300 --> 00:00:47,460
help you map out attack vectors inside

23
00:00:47,460 --> 00:00:50,879
of your AWS Azure gcp environments

24
00:00:50,879 --> 00:00:53,340
and then we'll talk if we got time about

25
00:00:53,340 --> 00:00:57,059
just some uh you know some use cases on

26
00:00:57,059 --> 00:00:59,280
how Cloud infrastructure gets bridged

27
00:00:59,280 --> 00:01:01,140
with on-prem and where the weak points

28
00:01:01,140 --> 00:01:01,980
are there

29
00:01:01,980 --> 00:01:03,899
and then you know stay tuned to the last

30
00:01:03,899 --> 00:01:05,820
uh I got just one thing at the end

31
00:01:05,820 --> 00:01:09,559
that's should be pretty cool so

32
00:01:09,900 --> 00:01:13,020
all right so I'm Bryce I used to work at

33
00:01:13,020 --> 00:01:15,900
Homeland I was over instant response and

34
00:01:15,900 --> 00:01:18,540
hunt for their unclassified Network so

35
00:01:18,540 --> 00:01:20,340
that was over half a million endpoints

36
00:01:20,340 --> 00:01:21,479
worldwide

37
00:01:21,479 --> 00:01:23,340
where we're really trying to track down

38
00:01:23,340 --> 00:01:25,080
nation states and strategically remove

39
00:01:25,080 --> 00:01:26,520
them from that Network

40
00:01:26,520 --> 00:01:29,220
subsequently my real passion is the

41
00:01:29,220 --> 00:01:31,200
offensive side of the house so I ended

42
00:01:31,200 --> 00:01:33,540
up working at the NSA and built a

43
00:01:33,540 --> 00:01:35,280
offensive unit there for them

44
00:01:35,280 --> 00:01:37,020
and uh

45
00:01:37,020 --> 00:01:40,259
relocated to Utah for to be closer to

46
00:01:40,259 --> 00:01:42,479
family and started working at Adobe

47
00:01:42,479 --> 00:01:45,060
built out a red team for adobe's digital

48
00:01:45,060 --> 00:01:47,340
experience business unit which highly

49
00:01:47,340 --> 00:01:49,380
leverages Cloud infrastructure you know

50
00:01:49,380 --> 00:01:51,780
they have a huge presence in AWS azure

51
00:01:51,780 --> 00:01:52,799
gcp

52
00:01:52,799 --> 00:01:54,479
so really started to take kind of those

53
00:01:54,479 --> 00:01:56,220
like offensive nation-statey type

54
00:01:56,220 --> 00:01:58,740
techniques and apply them to the cloud

55
00:01:58,740 --> 00:02:01,439
and more Tech and devops type culture

56
00:02:01,439 --> 00:02:03,540
and how can we get into Cloud

57
00:02:03,540 --> 00:02:06,659
environments how can we expand access

58
00:02:06,659 --> 00:02:10,020
founded stage two security and uh you

59
00:02:10,020 --> 00:02:11,459
know I lead the offensive portion of

60
00:02:11,459 --> 00:02:14,760
that company today so we're at about 60

61
00:02:14,760 --> 00:02:17,160
employees today so

62
00:02:17,160 --> 00:02:20,040
um and then I also run the charity that

63
00:02:20,040 --> 00:02:22,080
runs the local B-side Salt Lake City

64
00:02:22,080 --> 00:02:23,400
Event

65
00:02:23,400 --> 00:02:26,580
uh so I just click plug for b-sides it's

66
00:02:26,580 --> 00:02:28,860
going to happen in December it's one day

67
00:02:28,860 --> 00:02:31,620
Friday and it's in Sandy so hope hope

68
00:02:31,620 --> 00:02:33,420
you guys can come out there's a hardware

69
00:02:33,420 --> 00:02:35,040
badge that whalen's been working on this

70
00:02:35,040 --> 00:02:37,579
should be pretty cool

71
00:02:39,239 --> 00:02:40,319
okay

72
00:02:40,319 --> 00:02:43,760
just kind of diving into the talk

73
00:02:44,400 --> 00:02:46,440
all right so high level how do you go

74
00:02:46,440 --> 00:02:50,340
from nothing to Cloud admin right so one

75
00:02:50,340 --> 00:02:52,319
way is you can look at the services and

76
00:02:52,319 --> 00:02:53,879
applications that are Exposed on the

77
00:02:53,879 --> 00:02:56,819
internet so in the classic scenario that

78
00:02:56,819 --> 00:02:58,140
you saw kind of in the Capital One

79
00:02:58,140 --> 00:03:00,360
breach and a lot of other breaches and

80
00:03:00,360 --> 00:03:03,120
Bug boundary reports if you can find a

81
00:03:03,120 --> 00:03:05,519
bug in an application that's hosted in a

82
00:03:05,519 --> 00:03:08,580
cloud environment and then you can you

83
00:03:08,580 --> 00:03:10,260
know convince that to go to the metadata

84
00:03:10,260 --> 00:03:13,200
service you'll be able to pull back the

85
00:03:13,200 --> 00:03:15,300
temporary credentials and then you know

86
00:03:15,300 --> 00:03:17,340
whatever access that server has inside

87
00:03:17,340 --> 00:03:20,760
of the targets AWS account your the

88
00:03:20,760 --> 00:03:22,019
attacker is going to be able to reuse

89
00:03:22,019 --> 00:03:23,580
those temporary credentials and have

90
00:03:23,580 --> 00:03:26,099
that same access so so a lot of times

91
00:03:26,099 --> 00:03:27,480
you know you'll see attackers find

92
00:03:27,480 --> 00:03:29,400
vulnerabilities and applications like an

93
00:03:29,400 --> 00:03:32,040
ssrf vulnerability that enables them to

94
00:03:32,040 --> 00:03:33,840
grab these temporary credentials which

95
00:03:33,840 --> 00:03:35,879
denim labels them to pull back data

96
00:03:35,879 --> 00:03:37,560
that's like private inside of like

97
00:03:37,560 --> 00:03:40,019
storage accounts like S3

98
00:03:40,019 --> 00:03:42,720
so that's that's one common scenario

99
00:03:42,720 --> 00:03:44,640
you know another scenario which I don't

100
00:03:44,640 --> 00:03:46,080
think there's as much research in this

101
00:03:46,080 --> 00:03:46,920
space

102
00:03:46,920 --> 00:03:48,420
um but I talked a little bit about it

103
00:03:48,420 --> 00:03:51,540
last year at cincon is really the

104
00:03:51,540 --> 00:03:54,239
globally shared resources so and there's

105
00:03:54,239 --> 00:03:56,640
basically two angles here if you have an

106
00:03:56,640 --> 00:03:59,700
admin in an AWS Azure gcp environment

107
00:03:59,700 --> 00:04:01,260
some of those services are going to

108
00:04:01,260 --> 00:04:02,940
enable them to share those resources

109
00:04:02,940 --> 00:04:07,260
globally across all AWS accounts so for

110
00:04:07,260 --> 00:04:09,900
example let's say you create an instance

111
00:04:09,900 --> 00:04:13,260
or a VM in AWS and then you create that

112
00:04:13,260 --> 00:04:15,239
has a volume attached to it like an EBS

113
00:04:15,239 --> 00:04:17,040
volume that's kind of like the hard disk

114
00:04:17,040 --> 00:04:20,220
right like the you know the vhd

115
00:04:20,220 --> 00:04:22,560
equivalent in the cloud and then you can

116
00:04:22,560 --> 00:04:24,360
create a snapshot of that and then you

117
00:04:24,360 --> 00:04:25,560
can actually share those snapshots

118
00:04:25,560 --> 00:04:27,960
publicly so

119
00:04:27,960 --> 00:04:29,100
um and then you know an attacker could

120
00:04:29,100 --> 00:04:31,139
go through all those publicly accessible

121
00:04:31,139 --> 00:04:32,699
snapshots and trying to mine them for

122
00:04:32,699 --> 00:04:35,100
secrets so some researchers did this at

123
00:04:35,100 --> 00:04:37,199
a university previously and they they

124
00:04:37,199 --> 00:04:39,780
were able to find some pretty um

125
00:04:39,780 --> 00:04:42,120
pretty bad practices like people sharing

126
00:04:42,120 --> 00:04:44,759
snapshots quickly and then unsharing

127
00:04:44,759 --> 00:04:46,380
them they're able to get in between

128
00:04:46,380 --> 00:04:48,960
those windows and grab a copy and get

129
00:04:48,960 --> 00:04:50,699
secrets for the organization

130
00:04:50,699 --> 00:04:52,740
another angle here is really that whole

131
00:04:52,740 --> 00:04:55,199
supply chain angle where you know if

132
00:04:55,199 --> 00:04:57,360
you're relying on public resources to

133
00:04:57,360 --> 00:04:59,520
deploy your instances like let's say

134
00:04:59,520 --> 00:05:02,340
you're like hey I want a you know a Cali

135
00:05:02,340 --> 00:05:05,479
VM in AWS but I wanted to have this like

136
00:05:05,479 --> 00:05:08,100
specific setup and somebody else has

137
00:05:08,100 --> 00:05:09,180
already done that so you can import

138
00:05:09,180 --> 00:05:11,759
their Ami or their image of further

139
00:05:11,759 --> 00:05:13,380
instance how do you know that that's in

140
00:05:13,380 --> 00:05:14,639
a good State how do you know that

141
00:05:14,639 --> 00:05:17,100
someone hasn't tampered with that

142
00:05:17,100 --> 00:05:18,600
um yeah so there's like those kind of

143
00:05:18,600 --> 00:05:21,800
supply chain attacks as well

144
00:05:22,860 --> 00:05:26,280
okay and then lastly uh you know the

145
00:05:26,280 --> 00:05:27,900
third way is really that client side

146
00:05:27,900 --> 00:05:29,639
you're going after the engineers that

147
00:05:29,639 --> 00:05:31,560
are writing the code you're going after

148
00:05:31,560 --> 00:05:34,080
the sres or admins of the AWS

149
00:05:34,080 --> 00:05:35,759
environment you're trying to get on

150
00:05:35,759 --> 00:05:38,580
their laptops or steal their sessions to

151
00:05:38,580 --> 00:05:41,340
the cloud providers and then reuse those

152
00:05:41,340 --> 00:05:42,600
sessions

153
00:05:42,600 --> 00:05:43,380
um

154
00:05:43,380 --> 00:05:45,300
so a lot of different attack paths here

155
00:05:45,300 --> 00:05:47,460
to do that and we'll talk a little bit

156
00:05:47,460 --> 00:05:49,919
more about what's been successful for us

157
00:05:49,919 --> 00:05:54,139
on the team as we move through this talk

158
00:05:54,780 --> 00:05:57,300
okay so SSO tokens and browser cookies

159
00:05:57,300 --> 00:06:00,240
we'll just talk about kind of

160
00:06:00,240 --> 00:06:01,979
um you know there's a number of ways

161
00:06:01,979 --> 00:06:03,479
that you could get on an endpoint or a

162
00:06:03,479 --> 00:06:05,160
laptop you know the classic ones kind of

163
00:06:05,160 --> 00:06:07,139
being like macros or Office document

164
00:06:07,139 --> 00:06:08,820
attacks

165
00:06:08,820 --> 00:06:10,500
um but you know those are kind of been

166
00:06:10,500 --> 00:06:12,120
covered elsewhere so I'm not talking

167
00:06:12,120 --> 00:06:13,680
about those I just want to talk about

168
00:06:13,680 --> 00:06:16,740
two things that are are more Cutting

169
00:06:16,740 --> 00:06:19,020
Edge in my opinion and where I see kind

170
00:06:19,020 --> 00:06:20,759
of the future going so

171
00:06:20,759 --> 00:06:22,259
so the first one which I don't really

172
00:06:22,259 --> 00:06:23,699
see many people talking about is

173
00:06:23,699 --> 00:06:26,280
malicious browser extensions right if

174
00:06:26,280 --> 00:06:27,900
you can get in the browser and you get

175
00:06:27,900 --> 00:06:29,880
code executing there

176
00:06:29,880 --> 00:06:31,380
um you know a lot of times for these SAS

177
00:06:31,380 --> 00:06:32,639
platforms or these Cloud providers

178
00:06:32,639 --> 00:06:34,979
that's that's going to be game over uh

179
00:06:34,979 --> 00:06:37,560
so shout out to Kevin lustick he kind of

180
00:06:37,560 --> 00:06:39,060
turned me onto this tool and technique

181
00:06:39,060 --> 00:06:40,500
but uh

182
00:06:40,500 --> 00:06:43,020
basically if we can get code running in

183
00:06:43,020 --> 00:06:46,020
the browser and they have an a session

184
00:06:46,020 --> 00:06:49,199
to the AWS or another SAS app we can

185
00:06:49,199 --> 00:06:51,960
kind of write across that session so and

186
00:06:51,960 --> 00:06:53,580
a lot of times that comes in the form of

187
00:06:53,580 --> 00:06:55,319
installing a malicious browser plug-in

188
00:06:55,319 --> 00:06:59,639
in the end user's browser so there is a

189
00:06:59,639 --> 00:07:01,199
toolkit out there that's public called

190
00:07:01,199 --> 00:07:03,900
curse Chrome which does an excellent job

191
00:07:03,900 --> 00:07:05,759
of demonstrating this and would be a

192
00:07:05,759 --> 00:07:07,259
good launching off point if you wanted

193
00:07:07,259 --> 00:07:09,479
to recreate these attacks in your red

194
00:07:09,479 --> 00:07:13,219
teaming or pen testing engagements

195
00:07:13,860 --> 00:07:15,960
um so basically this is a malicious

196
00:07:15,960 --> 00:07:17,580
plug-in that can get installed inside

197
00:07:17,580 --> 00:07:20,280
Chrome browsers and will allow the

198
00:07:20,280 --> 00:07:22,319
attacker to proxy their traffic through

199
00:07:22,319 --> 00:07:24,240
the user's browser and access whatever

200
00:07:24,240 --> 00:07:27,979
the user is currently authenticated to

201
00:07:28,500 --> 00:07:30,240
um you know a defense against this if

202
00:07:30,240 --> 00:07:31,919
you're more on the defensive side is

203
00:07:31,919 --> 00:07:33,960
really to look into Enterprise policies

204
00:07:33,960 --> 00:07:35,759
that can be a pride for your browser

205
00:07:35,759 --> 00:07:37,919
like Chrome you know you could apply an

206
00:07:37,919 --> 00:07:40,080
Enterprise policy that would prevent

207
00:07:40,080 --> 00:07:42,660
just random you know extensions from

208
00:07:42,660 --> 00:07:45,360
being loaded in the browser and you know

209
00:07:45,360 --> 00:07:47,280
would kind of help prevent some of these

210
00:07:47,280 --> 00:07:49,259
attacks right and there's a reference to

211
00:07:49,259 --> 00:07:50,520
a project at the bottom of this slide

212
00:07:50,520 --> 00:07:52,500
too that would help you there or that

213
00:07:52,500 --> 00:07:54,539
so I've started here more and more

214
00:07:54,539 --> 00:07:56,340
breaches occurring where someone will

215
00:07:56,340 --> 00:07:59,400
get code execution to a laptop or an

216
00:07:59,400 --> 00:08:01,259
endpoint and then they'll load up

217
00:08:01,259 --> 00:08:04,979
malicious extensions and uh you know

218
00:08:04,979 --> 00:08:06,660
with Advanced features in Chrome where

219
00:08:06,660 --> 00:08:07,919
they're sharing profiles against

220
00:08:07,919 --> 00:08:10,680
multiple laptops imagine you compromise

221
00:08:10,680 --> 00:08:12,360
someone's desktop but then they're

222
00:08:12,360 --> 00:08:13,800
sharing that profile with another

223
00:08:13,800 --> 00:08:16,139
endpoint you could potentially get a

224
00:08:16,139 --> 00:08:18,000
lateral movement technique just from

225
00:08:18,000 --> 00:08:20,699
sharing a malicious extension across a

226
00:08:20,699 --> 00:08:22,979
user's profile right like Chrome profile

227
00:08:22,979 --> 00:08:25,620
Google profile

228
00:08:25,620 --> 00:08:27,900
so I I think this will probably ramp up

229
00:08:27,900 --> 00:08:30,300
more in the next year or two as well

230
00:08:30,300 --> 00:08:32,219
Okay so we've heard a lot about

231
00:08:32,219 --> 00:08:34,919
adversary mail and tax throughout St

232
00:08:34,919 --> 00:08:37,260
Khan and this is kind of our our go-to

233
00:08:37,260 --> 00:08:39,779
right now as as a like pen testing red

234
00:08:39,779 --> 00:08:42,599
team in organization so uh shout outs to

235
00:08:42,599 --> 00:08:44,339
Brad he wrote some awesome code here

236
00:08:44,339 --> 00:08:46,320
that helped us uh you know kind of go

237
00:08:46,320 --> 00:08:48,000
undetected

238
00:08:48,000 --> 00:08:49,680
um and kind of set up our infrastructure

239
00:08:49,680 --> 00:08:51,660
on this so

240
00:08:51,660 --> 00:08:54,420
um but basically you know if a user if

241
00:08:54,420 --> 00:08:57,120
we can if they're browsing and going

242
00:08:57,120 --> 00:08:59,720
through our evil proxy server

243
00:08:59,720 --> 00:09:03,300
we can you know ride their session to

244
00:09:03,300 --> 00:09:04,920
whatever they're authenticating to right

245
00:09:04,920 --> 00:09:07,080
whether that's like an SSO solution like

246
00:09:07,080 --> 00:09:09,720
OCTA or that's directly to like an AWS

247
00:09:09,720 --> 00:09:13,040
account something like that

248
00:09:13,920 --> 00:09:15,540
um so how do we get the user to do that

249
00:09:15,540 --> 00:09:17,459
you know typically you would use a

250
00:09:17,459 --> 00:09:18,899
phishing or social engineering type

251
00:09:18,899 --> 00:09:21,540
attack get the user to click on a link

252
00:09:21,540 --> 00:09:24,540
then that would induce the user to log

253
00:09:24,540 --> 00:09:26,519
into their SSO system and then you would

254
00:09:26,519 --> 00:09:30,140
kind of right along that session

255
00:09:30,899 --> 00:09:32,820
so once you do that the attacker can

256
00:09:32,820 --> 00:09:34,380
pick up the same credentials that are

257
00:09:34,380 --> 00:09:36,360
inside that browser session replay them

258
00:09:36,360 --> 00:09:39,680
and get access to the apps

259
00:09:39,839 --> 00:09:42,240
you know including like potentially like

260
00:09:42,240 --> 00:09:44,160
SAS platforms if you have like OCTA

261
00:09:44,160 --> 00:09:47,399
Titan with AWS AWS access and things

262
00:09:47,399 --> 00:09:49,820
like that

263
00:09:50,459 --> 00:09:52,860
so for the most part if you're just

264
00:09:52,860 --> 00:09:54,180
staying in the browser and you're

265
00:09:54,180 --> 00:09:56,940
stealing the browser's cookies right the

266
00:09:56,940 --> 00:09:59,339
edrs are are mostly blind to that at

267
00:09:59,339 --> 00:10:01,380
this point right so they're not they're

268
00:10:01,380 --> 00:10:02,640
mostly looking for a kind of those

269
00:10:02,640 --> 00:10:04,620
classic miter attack techniques which

270
00:10:04,620 --> 00:10:06,660
are a lot of like host based techniques

271
00:10:06,660 --> 00:10:09,300
so you can almost like bypass a lot of

272
00:10:09,300 --> 00:10:11,760
really stringent organizations security

273
00:10:11,760 --> 00:10:14,880
controls on the endpoint

274
00:10:14,880 --> 00:10:16,620
and the toolkit that's really popular

275
00:10:16,620 --> 00:10:18,420
for this some of them I listed on this

276
00:10:18,420 --> 00:10:20,220
slide but evil Jinx is one of the most

277
00:10:20,220 --> 00:10:22,019
popular and go Fish is one of the most

278
00:10:22,019 --> 00:10:23,640
popular for sending the fishing email so

279
00:10:23,640 --> 00:10:25,440
evil Jinx is kind of like that proxy

280
00:10:25,440 --> 00:10:28,200
server go Fish is how you're sending the

281
00:10:28,200 --> 00:10:30,060
emails which would have a link that

282
00:10:30,060 --> 00:10:31,560
would kind of go through your proxy

283
00:10:31,560 --> 00:10:33,000
server

284
00:10:33,000 --> 00:10:34,800
and then you know recently there's been

285
00:10:34,800 --> 00:10:36,480
a project to kind of combine these two

286
00:10:36,480 --> 00:10:38,519
projects into one so that's called evil

287
00:10:38,519 --> 00:10:41,160
Go Fish which is something that I want

288
00:10:41,160 --> 00:10:43,019
to dig into more but uh looks pretty

289
00:10:43,019 --> 00:10:45,500
promising

290
00:10:46,860 --> 00:10:48,959
all right so what how do you really get

291
00:10:48,959 --> 00:10:50,519
busted in this scenario like let's say

292
00:10:50,519 --> 00:10:54,180
you email a user a link right and you're

293
00:10:54,180 --> 00:10:55,740
trying to get them to log into their

294
00:10:55,740 --> 00:10:59,940
OCTA right so um their SSO system so

295
00:10:59,940 --> 00:11:02,040
um the link is not going to go to the a

296
00:11:02,040 --> 00:11:03,420
real domain name it's going to go to

297
00:11:03,420 --> 00:11:05,279
like an attacker owned domain name right

298
00:11:05,279 --> 00:11:06,899
so

299
00:11:06,899 --> 00:11:08,519
um now the attacker is probably going to

300
00:11:08,519 --> 00:11:10,019
have valid certs associated with that

301
00:11:10,019 --> 00:11:12,060
domain name and maybe host it on a

302
00:11:12,060 --> 00:11:14,160
trusted provider so it may be kind of

303
00:11:14,160 --> 00:11:16,620
hard for you to know but you know you

304
00:11:16,620 --> 00:11:18,240
could use those classic techniques of

305
00:11:18,240 --> 00:11:20,220
domain name reputation or things like

306
00:11:20,220 --> 00:11:22,320
that to try to stop this

307
00:11:22,320 --> 00:11:25,620
but more effectively is really the 502

308
00:11:25,620 --> 00:11:28,860
plus web authen standards right so the

309
00:11:28,860 --> 00:11:31,079
502 plus web off n if you're using those

310
00:11:31,079 --> 00:11:32,640
Technologies combined especially with

311
00:11:32,640 --> 00:11:34,320
like a hardware device like ubikey

312
00:11:34,320 --> 00:11:36,360
they're going to automatically verify

313
00:11:36,360 --> 00:11:37,800
the domain name as part of that

314
00:11:37,800 --> 00:11:39,720
authentication process and they're going

315
00:11:39,720 --> 00:11:41,700
to prevent you from going through these

316
00:11:41,700 --> 00:11:44,519
evil proxy servers so so this is the

317
00:11:44,519 --> 00:11:46,200
scenario we've run into in a few

318
00:11:46,200 --> 00:11:48,240
organizations that are really security

319
00:11:48,240 --> 00:11:51,959
forward and so we came up with something

320
00:11:51,959 --> 00:11:53,640
a little Innovative that I'll show at

321
00:11:53,640 --> 00:11:55,620
the end of this that would help get past

322
00:11:55,620 --> 00:11:57,360
this but

323
00:11:57,360 --> 00:12:00,540
um but you know this you know for 99 of

324
00:12:00,540 --> 00:12:02,160
orgs right now they're they're not doing

325
00:12:02,160 --> 00:12:05,220
502 plus web authen for everything so

326
00:12:05,220 --> 00:12:07,500
it's you know still really popular and

327
00:12:07,500 --> 00:12:09,240
growing in popularity among criminal

328
00:12:09,240 --> 00:12:11,600
groups

329
00:12:14,279 --> 00:12:16,680
okay great okay so that's kind of like

330
00:12:16,680 --> 00:12:18,420
the client-side attack we'll loop back

331
00:12:18,420 --> 00:12:19,800
around to

332
00:12:19,800 --> 00:12:22,680
um a cool technique at the end but uh I

333
00:12:22,680 --> 00:12:23,880
want to take a minute and just talk

334
00:12:23,880 --> 00:12:25,740
about graph database Technologies

335
00:12:25,740 --> 00:12:27,660
because I feel like especially from the

336
00:12:27,660 --> 00:12:29,220
defender's point of view these things

337
00:12:29,220 --> 00:12:31,800
would be immensely helpful if

338
00:12:31,800 --> 00:12:33,300
um you know security Engineers started

339
00:12:33,300 --> 00:12:36,180
leveraging them more so we when we go in

340
00:12:36,180 --> 00:12:38,100
and we do an audit or a pen test of a

341
00:12:38,100 --> 00:12:39,420
cloud environment we highly leverage

342
00:12:39,420 --> 00:12:40,860
these type of tools to find

343
00:12:40,860 --> 00:12:43,740
misconfigurations and then you know

344
00:12:43,740 --> 00:12:46,500
write those up in the report so so let's

345
00:12:46,500 --> 00:12:48,360
let's kind of dive into it more but

346
00:12:48,360 --> 00:12:50,120
first just shout out to Paul and Michael

347
00:12:50,120 --> 00:12:52,800
a lot of the research here is because of

348
00:12:52,800 --> 00:12:54,300
work that they they did over the years

349
00:12:54,300 --> 00:12:56,040
so

350
00:12:56,040 --> 00:12:58,860
okay so why use a graph database and

351
00:12:58,860 --> 00:13:00,300
maybe you don't know what I'm talking

352
00:13:00,300 --> 00:13:02,459
about but graph database are kind of

353
00:13:02,459 --> 00:13:04,019
like the Bloodhound equivalents right

354
00:13:04,019 --> 00:13:06,060
they're going to generate these these

355
00:13:06,060 --> 00:13:08,399
charts right and basically we'll walk

356
00:13:08,399 --> 00:13:09,959
through this a bit more but you're

357
00:13:09,959 --> 00:13:11,160
basically going to be able to chain

358
00:13:11,160 --> 00:13:14,720
together resources or policies or roles

359
00:13:14,720 --> 00:13:17,639
and how you could effectively use those

360
00:13:17,639 --> 00:13:20,279
to escalate from one user level access

361
00:13:20,279 --> 00:13:24,019
to a privileged admin level access

362
00:13:24,019 --> 00:13:26,639
and some of the tools that do this are

363
00:13:26,639 --> 00:13:28,139
kind of listed in the corner here on the

364
00:13:28,139 --> 00:13:29,000
left

365
00:13:29,000 --> 00:13:31,200
some of the ones that I've used in the

366
00:13:31,200 --> 00:13:33,600
past on engagements

367
00:13:33,600 --> 00:13:35,279
uh so but let's just kind of walk

368
00:13:35,279 --> 00:13:37,680
through it so first

369
00:13:37,680 --> 00:13:39,240
um they generally have like a collection

370
00:13:39,240 --> 00:13:40,920
mechanism so they'll get read-only

371
00:13:40,920 --> 00:13:43,019
access to your AWS Azure or gcp

372
00:13:43,019 --> 00:13:44,339
environment and they'll just collect a

373
00:13:44,339 --> 00:13:46,320
bunch of data and then once they collect

374
00:13:46,320 --> 00:13:47,880
the data they'll analyze it and then

375
00:13:47,880 --> 00:13:49,560
they'll kind of graph it and then

376
00:13:49,560 --> 00:13:51,180
they'll make this stuff available for

377
00:13:51,180 --> 00:13:52,880
you to be able to query

378
00:13:52,880 --> 00:13:57,240
using a graphdb technology and but once

379
00:13:57,240 --> 00:13:58,860
you get all that data in the environment

380
00:13:58,860 --> 00:14:00,420
like this you kind of set what you want

381
00:14:00,420 --> 00:14:02,220
your goal to be like a common goal is

382
00:14:02,220 --> 00:14:04,139
hey I want to get admin access inside

383
00:14:04,139 --> 00:14:07,560
this AWS account so you would just load

384
00:14:07,560 --> 00:14:09,899
up the goal inside of the graphdb tool

385
00:14:09,899 --> 00:14:11,519
this the tool I'm showing right now is

386
00:14:11,519 --> 00:14:14,700
this open source AWS PX tool so you guys

387
00:14:14,700 --> 00:14:15,899
can download or use that it's really

388
00:14:15,899 --> 00:14:18,839
easy to use storm spotter works very

389
00:14:18,839 --> 00:14:22,620
similarly and row tools is

390
00:14:22,620 --> 00:14:24,839
the same but doesn't have as much of a

391
00:14:24,839 --> 00:14:27,980
graph interface so

392
00:14:27,980 --> 00:14:30,060
Cloud Suite is kind of like a

393
00:14:30,060 --> 00:14:32,279
combination of storm spotter and awspx

394
00:14:32,279 --> 00:14:33,720
so

395
00:14:33,720 --> 00:14:35,639
okay so you set the goal I want to get

396
00:14:35,639 --> 00:14:39,000
admin on this AWS account right and

397
00:14:39,000 --> 00:14:40,380
let's assume this is an AWS account

398
00:14:40,380 --> 00:14:41,940
where everyone's not already admin let's

399
00:14:41,940 --> 00:14:44,339
assume there's tiers like there's an

400
00:14:44,339 --> 00:14:46,800
engineering role inside of it and an

401
00:14:46,800 --> 00:14:48,180
Engineering Group inside of it and

402
00:14:48,180 --> 00:14:49,920
there's a you know an admin group inside

403
00:14:49,920 --> 00:14:52,019
of it and you know maybe you can get on

404
00:14:52,019 --> 00:14:53,699
an engineer's laptop and still their

405
00:14:53,699 --> 00:14:55,740
session but you want to get access to

406
00:14:55,740 --> 00:14:57,779
everything in the AWS account so we set

407
00:14:57,779 --> 00:15:00,260
the goal

408
00:15:00,360 --> 00:15:02,100
and then we just kind of right click on

409
00:15:02,100 --> 00:15:04,079
it and we select hey I want to see all

410
00:15:04,079 --> 00:15:06,060
the inbound routes like show me all the

411
00:15:06,060 --> 00:15:07,800
ways you could possibly get to effective

412
00:15:07,800 --> 00:15:10,740
admin inside of this AWS environment and

413
00:15:10,740 --> 00:15:11,820
then the tool will kind of give you a

414
00:15:11,820 --> 00:15:13,199
little detail in the corner about what

415
00:15:13,199 --> 00:15:15,120
you're doing so that's usually useful to

416
00:15:15,120 --> 00:15:17,339
check out

417
00:15:17,339 --> 00:15:20,160
and then then it will generate the graph

418
00:15:20,160 --> 00:15:22,019
right so it says okay here's all the

419
00:15:22,019 --> 00:15:24,839
routes on how you would get inbound to

420
00:15:24,839 --> 00:15:27,240
effective admin in this AWS environment

421
00:15:27,240 --> 00:15:29,760
and this is you know like a lab

422
00:15:29,760 --> 00:15:31,079
environment that I'm showing you here

423
00:15:31,079 --> 00:15:32,639
now so this is not even like a

424
00:15:32,639 --> 00:15:34,500
production environment in a real

425
00:15:34,500 --> 00:15:36,060
production environment these graphs

426
00:15:36,060 --> 00:15:39,240
could be a lot more complex right so um

427
00:15:39,240 --> 00:15:41,100
but you know this is kind of a good

428
00:15:41,100 --> 00:15:42,660
demonstration of what you would see in

429
00:15:42,660 --> 00:15:44,639
real life so um so then you would kind

430
00:15:44,639 --> 00:15:45,660
of get all these routes and then you

431
00:15:45,660 --> 00:15:46,860
would just kind of dig through it like

432
00:15:46,860 --> 00:15:48,360
you would say all right which ones

433
00:15:48,360 --> 00:15:50,100
connect directly to effective admin and

434
00:15:50,100 --> 00:15:52,079
then what connects to that and I'll walk

435
00:15:52,079 --> 00:15:54,060
you through this scenario so it kind of

436
00:15:54,060 --> 00:15:56,399
hopefully resonates a bit more through

437
00:15:56,399 --> 00:16:00,060
the preso but but uh yeah you know how

438
00:16:00,060 --> 00:16:02,040
are those lines useful let's let's kind

439
00:16:02,040 --> 00:16:04,139
of walk through that so you're using

440
00:16:04,139 --> 00:16:06,779
awspx you gave read-only rights into

441
00:16:06,779 --> 00:16:08,940
your AWS environment there's some

442
00:16:08,940 --> 00:16:11,040
resources there and now you're trying to

443
00:16:11,040 --> 00:16:12,540
make sense of the of the graph it's

444
00:16:12,540 --> 00:16:14,100
generated

445
00:16:14,100 --> 00:16:15,660
all right so we got to go back to the

446
00:16:15,660 --> 00:16:18,480
basics to really understand the power of

447
00:16:18,480 --> 00:16:20,579
this this map and you know if you know

448
00:16:20,579 --> 00:16:22,079
AWS well

449
00:16:22,079 --> 00:16:23,399
um this will just be kind of a quick

450
00:16:23,399 --> 00:16:26,339
refresher but if you don't know AWS

451
00:16:26,339 --> 00:16:27,600
um you know this will be critical to

452
00:16:27,600 --> 00:16:29,160
kind of understanding what those nodes

453
00:16:29,160 --> 00:16:32,220
mean on the graph so so let's go back

454
00:16:32,220 --> 00:16:33,839
and do just a quick refresher on IAM

455
00:16:33,839 --> 00:16:35,399
roles because I feel like that's an area

456
00:16:35,399 --> 00:16:37,380
that a lot of people

457
00:16:37,380 --> 00:16:39,420
um you know have some knowledge of but

458
00:16:39,420 --> 00:16:42,839
maybe don't have all the pieces right so

459
00:16:42,839 --> 00:16:46,079
let's say you're in AWS you have an AWS

460
00:16:46,079 --> 00:16:48,480
account right and you want to add you

461
00:16:48,480 --> 00:16:49,800
want your friend to be able to use your

462
00:16:49,800 --> 00:16:51,779
AWS account you would go to the identity

463
00:16:51,779 --> 00:16:53,579
and access

464
00:16:53,579 --> 00:16:54,180
um

465
00:16:54,180 --> 00:16:58,320
service I am service inside of AWS and

466
00:16:58,320 --> 00:16:59,820
you would add your friend so my friend's

467
00:16:59,820 --> 00:17:02,839
name in this scenario is Joel Joe right

468
00:17:02,839 --> 00:17:05,880
and you have a couple options like AWS

469
00:17:05,880 --> 00:17:08,520
is very flexible on how you configure it

470
00:17:08,520 --> 00:17:10,980
but you want Joe needs to be able to get

471
00:17:10,980 --> 00:17:12,780
to a database like let's say you have a

472
00:17:12,780 --> 00:17:14,459
database in there and you're doing some

473
00:17:14,459 --> 00:17:15,900
admin activity and you're like man I

474
00:17:15,900 --> 00:17:17,280
just want to push this off so Joe will

475
00:17:17,280 --> 00:17:20,339
handle it but the only permissions that

476
00:17:20,339 --> 00:17:22,740
Joe has right now is the ability to

477
00:17:22,740 --> 00:17:25,140
assume into like kind of a role right

478
00:17:25,140 --> 00:17:26,699
which which a role is kind of like a

479
00:17:26,699 --> 00:17:29,480
service account right in AWS so

480
00:17:29,480 --> 00:17:32,700
so if Joe goes and he tries to access

481
00:17:32,700 --> 00:17:34,799
the database right now he's going to get

482
00:17:34,799 --> 00:17:37,620
blocked right you would need to add this

483
00:17:37,620 --> 00:17:40,740
our some level of RDS permissions to

484
00:17:40,740 --> 00:17:43,799
that policy attached to the user

485
00:17:43,799 --> 00:17:45,840
uh in order to enable him to get to the

486
00:17:45,840 --> 00:17:48,000
database so so basically you'd have an

487
00:17:48,000 --> 00:17:50,280
identity like Joe you would attach a

488
00:17:50,280 --> 00:17:52,080
policy you would Define in the policy

489
00:17:52,080 --> 00:17:55,620
what you want Joe to be able to do and

490
00:17:55,620 --> 00:17:58,320
you know if you don't enable any RDS

491
00:17:58,320 --> 00:17:59,700
actions he's not going to be able to

492
00:17:59,700 --> 00:18:02,780
directly get to the database right

493
00:18:02,780 --> 00:18:05,880
so one thing you could do is just add

494
00:18:05,880 --> 00:18:07,919
the RDS permissions to that policy

495
00:18:07,919 --> 00:18:09,539
that'd be easy and then you could get to

496
00:18:09,539 --> 00:18:11,520
the database but you'd probably want to

497
00:18:11,520 --> 00:18:13,679
tightly couple that like scope it so we

498
00:18:13,679 --> 00:18:15,120
can't get to all databases you could

499
00:18:15,120 --> 00:18:16,440
just get to the database that he's

500
00:18:16,440 --> 00:18:18,419
supposed to admin

501
00:18:18,419 --> 00:18:19,980
um you know another option is you could

502
00:18:19,980 --> 00:18:22,440
create this IEM service role right or

503
00:18:22,440 --> 00:18:25,080
this IEM role right and could be kind of

504
00:18:25,080 --> 00:18:28,080
like a service account so and you can

505
00:18:28,080 --> 00:18:30,960
name the Royal RDS read only and it's

506
00:18:30,960 --> 00:18:32,760
going to have two Pol when you create a

507
00:18:32,760 --> 00:18:34,440
role you have two policies attached to

508
00:18:34,440 --> 00:18:35,940
it you're going to have a permissions

509
00:18:35,940 --> 00:18:37,679
policy and this is going to be pretty

510
00:18:37,679 --> 00:18:39,120
similar to the policy we just talked

511
00:18:39,120 --> 00:18:41,100
about that was attached to the user it's

512
00:18:41,100 --> 00:18:43,140
going to say what what the role can do

513
00:18:43,140 --> 00:18:45,660
right so here we're going to say this

514
00:18:45,660 --> 00:18:48,780
RDS read-only role can you know describe

515
00:18:48,780 --> 00:18:51,120
RDS databases

516
00:18:51,120 --> 00:18:53,640
so there that role can go down and look

517
00:18:53,640 --> 00:18:55,320
at the database and get to the data

518
00:18:55,320 --> 00:18:56,640
that's in there

519
00:18:56,640 --> 00:18:58,500
but another thing that the role is going

520
00:18:58,500 --> 00:19:00,120
to have that's a little bit unique it's

521
00:19:00,120 --> 00:19:01,860
going to have a trust policy attached to

522
00:19:01,860 --> 00:19:03,900
it and that trust policy is going to say

523
00:19:03,900 --> 00:19:07,620
who can use the role so in this scenario

524
00:19:07,620 --> 00:19:10,260
we're going to say Joe can use the role

525
00:19:10,260 --> 00:19:12,840
so Joe can use the role the role has

526
00:19:12,840 --> 00:19:14,640
Paul permissions to you talk to the

527
00:19:14,640 --> 00:19:17,640
database and so therefore you know Joe

528
00:19:17,640 --> 00:19:19,380
could assume into the role and then

529
00:19:19,380 --> 00:19:21,539
access the database and do his admin

530
00:19:21,539 --> 00:19:24,480
activities so so you know this might be

531
00:19:24,480 --> 00:19:26,780
overly complex for this slight scenario

532
00:19:26,780 --> 00:19:30,299
but as you you'll kind of see as the

533
00:19:30,299 --> 00:19:32,039
slides go you know roles are kind of a

534
00:19:32,039 --> 00:19:35,700
staple inside AWS to enable

535
00:19:35,700 --> 00:19:37,799
resources inside of it to access other

536
00:19:37,799 --> 00:19:40,080
resources in the same account or across

537
00:19:40,080 --> 00:19:42,179
account

538
00:19:42,179 --> 00:19:44,880
okay so let's talk a little bit for a

539
00:19:44,880 --> 00:19:47,580
minute about a special permission called

540
00:19:47,580 --> 00:19:51,960
IEM pass role so so when you are an

541
00:19:51,960 --> 00:19:54,179
admin at AWS and you go to create a new

542
00:19:54,179 --> 00:19:57,059
VM or a new instance

543
00:19:57,059 --> 00:19:59,100
and then you want that instance or the

544
00:19:59,100 --> 00:20:00,360
application on the instance to be able

545
00:20:00,360 --> 00:20:02,940
to access other AWS Services you're

546
00:20:02,940 --> 00:20:05,039
going to have to give that resource some

547
00:20:05,039 --> 00:20:07,080
level of permission and it's really this

548
00:20:07,080 --> 00:20:08,880
IEM pass role that's going to enable

549
00:20:08,880 --> 00:20:10,320
permission that's going to enable you to

550
00:20:10,320 --> 00:20:12,299
do that

551
00:20:12,299 --> 00:20:14,880
so let's say you have another user in

552
00:20:14,880 --> 00:20:17,820
your account called writea and she has

553
00:20:17,820 --> 00:20:20,580
the ability she's an ec2 admin so she

554
00:20:20,580 --> 00:20:23,160
can create new VMS all day long so she

555
00:20:23,160 --> 00:20:25,140
creates a VM she installs the

556
00:20:25,140 --> 00:20:27,539
application on it or an instance

557
00:20:27,539 --> 00:20:29,820
um and she installs the application on

558
00:20:29,820 --> 00:20:31,200
it and the application wants to access

559
00:20:31,200 --> 00:20:34,440
data that's in an S3 bucket right

560
00:20:34,440 --> 00:20:36,299
well the application it's going to get

561
00:20:36,299 --> 00:20:38,400
blocked right because it doesn't have

562
00:20:38,400 --> 00:20:40,919
any way to authenticate to the S3

563
00:20:40,919 --> 00:20:44,900
service to get the files that are there

564
00:20:44,900 --> 00:20:48,000
so what we can do though is we can

565
00:20:48,000 --> 00:20:50,460
create what's called an instance profile

566
00:20:50,460 --> 00:20:54,059
and we can attach that to the ec2

567
00:20:54,059 --> 00:20:56,460
instance so here we're creating the ec2

568
00:20:56,460 --> 00:20:59,520
S3 read-only instance profile and that

569
00:20:59,520 --> 00:21:01,740
it's going to link together the instance

570
00:21:01,740 --> 00:21:04,080
with a role

571
00:21:04,080 --> 00:21:06,840
so then we're going to build a role and

572
00:21:06,840 --> 00:21:08,340
that rule is going to have two policies

573
00:21:08,340 --> 00:21:10,559
so one policy is going to say who can

574
00:21:10,559 --> 00:21:13,919
use it so in this example an ec2 server

575
00:21:13,919 --> 00:21:16,799
can use the role and what can it do it

576
00:21:16,799 --> 00:21:19,620
can read files from an S3 bucket so in

577
00:21:19,620 --> 00:21:22,320
this fashion you can create servers and

578
00:21:22,320 --> 00:21:23,760
then enable the applications on the

579
00:21:23,760 --> 00:21:25,740
servers to access other resources inside

580
00:21:25,740 --> 00:21:28,520
of AWS

581
00:21:30,419 --> 00:21:33,000
um but you know you can't really attach

582
00:21:33,000 --> 00:21:34,860
a role or an instance profile to an

583
00:21:34,860 --> 00:21:38,039
application without this IEM pass role

584
00:21:38,039 --> 00:21:39,780
permission otherwise it's going to get

585
00:21:39,780 --> 00:21:43,679
blocked because you wouldn't want a user

586
00:21:43,679 --> 00:21:45,720
to be able to just attach a higher level

587
00:21:45,720 --> 00:21:48,360
role arbitrarily to an instance and kind

588
00:21:48,360 --> 00:21:52,440
of escalate their privileges that way so

589
00:21:52,440 --> 00:21:54,960
so they make you actually call out in

590
00:21:54,960 --> 00:21:56,820
the permissions associated with the

591
00:21:56,820 --> 00:21:59,159
write a user that the user has the

592
00:21:59,159 --> 00:22:01,320
rights to pass roles and then you can

593
00:22:01,320 --> 00:22:03,600
specify like a list of roles that they

594
00:22:03,600 --> 00:22:05,100
have the rights to pass to the resources

595
00:22:05,100 --> 00:22:07,639
they're creating

596
00:22:08,960 --> 00:22:12,059
okay what does the policies kind of look

597
00:22:12,059 --> 00:22:14,940
like this is kind of an example so

598
00:22:14,940 --> 00:22:16,799
whenever you see these kind of Json type

599
00:22:16,799 --> 00:22:20,820
policies in AWS these are what you know

600
00:22:20,820 --> 00:22:24,539
you would create to enable

601
00:22:24,539 --> 00:22:26,760
um the attachment the password

602
00:22:26,760 --> 00:22:30,740
permissions associated with the user

603
00:22:32,159 --> 00:22:36,059
okay so we go in we create the policy we

604
00:22:36,059 --> 00:22:38,880
add the policy so the user writer can

605
00:22:38,880 --> 00:22:39,960
use that

606
00:22:39,960 --> 00:22:42,600
now the user writer has the pass role

607
00:22:42,600 --> 00:22:45,360
permission so they can attach

608
00:22:45,360 --> 00:22:48,780
profiles and roles to instances so then

609
00:22:48,780 --> 00:22:50,340
now they can create an instance

610
00:22:50,340 --> 00:22:52,740
installed application attach the profile

611
00:22:52,740 --> 00:22:55,860
and the role and then get the the rights

612
00:22:55,860 --> 00:22:58,320
to access the S3 service

613
00:22:58,320 --> 00:23:00,960
okay so then the only thing that might

614
00:23:00,960 --> 00:23:03,419
stag you up at this point is

615
00:23:03,419 --> 00:23:06,900
service is inside of s and AWS can also

616
00:23:06,900 --> 00:23:09,059
have additional like Access Control type

617
00:23:09,059 --> 00:23:13,020
features so so S3 is one of those so

618
00:23:13,020 --> 00:23:15,179
when you create a bucket that you would

619
00:23:15,179 --> 00:23:17,960
put objects or files inside of in AWS

620
00:23:17,960 --> 00:23:21,299
you you can set a bucket policy so

621
00:23:21,299 --> 00:23:23,460
that'd be another Json policy that could

622
00:23:23,460 --> 00:23:25,880
restrict who can access

623
00:23:25,880 --> 00:23:28,140
objects in there so you know that might

624
00:23:28,140 --> 00:23:30,059
be another point where you know you get

625
00:23:30,059 --> 00:23:32,460
blocked from accessing it and then

626
00:23:32,460 --> 00:23:34,679
there's another feature in S3 that's

627
00:23:34,679 --> 00:23:36,659
kind of more a legacy one that uses more

628
00:23:36,659 --> 00:23:39,780
XML formatted documents that's called S3

629
00:23:39,780 --> 00:23:42,179
ACLS and those could be attached to the

630
00:23:42,179 --> 00:23:43,799
bucket optionally that could prevent

631
00:23:43,799 --> 00:23:46,320
access to objects so so there's kind of

632
00:23:46,320 --> 00:23:47,820
all these multiple layers and it's

633
00:23:47,820 --> 00:23:49,980
really up to you the person architecting

634
00:23:49,980 --> 00:23:52,140
the security solution for your AWS

635
00:23:52,140 --> 00:23:54,659
environment to say where do you want to

636
00:23:54,659 --> 00:23:57,900
focus and restrict the access right do

637
00:23:57,900 --> 00:24:00,260
you want to restrict the access on the

638
00:24:00,260 --> 00:24:02,520
permissions policies that are attached

639
00:24:02,520 --> 00:24:04,740
to the identities do you want to

640
00:24:04,740 --> 00:24:08,580
restrict the the permissions based on

641
00:24:08,580 --> 00:24:10,559
where the where your data is like more

642
00:24:10,559 --> 00:24:13,640
closer to the services that exist in S3

643
00:24:13,640 --> 00:24:15,900
or do you want to use some combination

644
00:24:15,900 --> 00:24:18,480
of that and really

645
00:24:18,480 --> 00:24:20,220
um you know if one policy says you can

646
00:24:20,220 --> 00:24:22,500
access it but the other policy says no

647
00:24:22,500 --> 00:24:24,840
you cannot AWS is going to use the one

648
00:24:24,840 --> 00:24:26,340
that's most it's going to use the

649
00:24:26,340 --> 00:24:28,860
combination that's most restrictive so

650
00:24:28,860 --> 00:24:30,659
you could be using a combination of

651
00:24:30,659 --> 00:24:32,820
those as well but obviously like the

652
00:24:32,820 --> 00:24:34,380
more complex you make it the harder it

653
00:24:34,380 --> 00:24:35,880
is to audit it and figure out what the

654
00:24:35,880 --> 00:24:37,200
actual permissions of your environment

655
00:24:37,200 --> 00:24:38,640
are

656
00:24:38,640 --> 00:24:40,940
foreign

657
00:24:42,320 --> 00:24:45,299
so once it's all done roll gets attached

658
00:24:45,299 --> 00:24:47,460
to the ec2 instance the ec2 instance

659
00:24:47,460 --> 00:24:49,799
right here this is like kind of the who

660
00:24:49,799 --> 00:24:53,220
am I of AWS so if you do AWS STS get

661
00:24:53,220 --> 00:24:55,559
caller identity you can see like okay

662
00:24:55,559 --> 00:24:58,080
the I'm now authenticated as the role

663
00:24:58,080 --> 00:25:00,260
called

664
00:25:00,260 --> 00:25:03,419
ec2-s3-read-only and uh that's on this

665
00:25:03,419 --> 00:25:05,760
instance and then from there you know

666
00:25:05,760 --> 00:25:07,980
that has access to access the S3 bucket

667
00:25:07,980 --> 00:25:10,980
so I can list the buckets I can look at

668
00:25:10,980 --> 00:25:12,720
the objects inside the buckets and I can

669
00:25:12,720 --> 00:25:14,460
cat out those I can copy those back to

670
00:25:14,460 --> 00:25:16,860
local and Cat them out to get this sweet

671
00:25:16,860 --> 00:25:20,178
elephant ASCII art

672
00:25:20,280 --> 00:25:22,500
um all right so that was a lot of just

673
00:25:22,500 --> 00:25:25,080
kind of uh background thanks to Scott

674
00:25:25,080 --> 00:25:26,700
um he just kind of reviewed this those

675
00:25:26,700 --> 00:25:28,559
slides to make sure I wasn't leading you

676
00:25:28,559 --> 00:25:30,240
totally astray

677
00:25:30,240 --> 00:25:33,840
um so uh so now that we kind of have a

678
00:25:33,840 --> 00:25:35,880
better understanding of IEM roles and

679
00:25:35,880 --> 00:25:39,059
pass roll let's talk about the graph DB

680
00:25:39,059 --> 00:25:40,919
and how that relates to it in a pretty

681
00:25:40,919 --> 00:25:43,799
basic example so

682
00:25:43,799 --> 00:25:47,159
so okay we're in AWS PX we set the goal

683
00:25:47,159 --> 00:25:49,740
of getting effective admin we identify

684
00:25:49,740 --> 00:25:51,299
want to identify all the inbound paths

685
00:25:51,299 --> 00:25:53,039
to become an effective admin that

686
00:25:53,039 --> 00:25:55,380
generates this big chart right so let's

687
00:25:55,380 --> 00:25:57,679
just start to dive into the chart so

688
00:25:57,679 --> 00:26:00,240
what is an effective admin it's

689
00:26:00,240 --> 00:26:01,679
basically someone who has a policy

690
00:26:01,679 --> 00:26:03,539
attached and that policy says I can do

691
00:26:03,539 --> 00:26:05,700
any action on any resource inside of

692
00:26:05,700 --> 00:26:08,100
this AWS account right so if we can get

693
00:26:08,100 --> 00:26:09,419
to that level of permissions that's

694
00:26:09,419 --> 00:26:12,419
basically game over

695
00:26:12,419 --> 00:26:14,760
um and we find that there is one IEM

696
00:26:14,760 --> 00:26:17,820
policy that has those permissions so

697
00:26:17,820 --> 00:26:20,460
that's this first little arrow that says

698
00:26:20,460 --> 00:26:22,260
it's attached and that little icon of

699
00:26:22,260 --> 00:26:25,559
the checklist is an IEM policy

700
00:26:25,559 --> 00:26:28,140
okay and so then you look at what has

701
00:26:28,140 --> 00:26:30,360
access to the IEM policy so then you see

702
00:26:30,360 --> 00:26:33,260
oh there's a role that exists in IEM

703
00:26:33,260 --> 00:26:37,559
which has that policy attached and it in

704
00:26:37,559 --> 00:26:38,419
turn

705
00:26:38,419 --> 00:26:41,640
uh has a trust policy which would allow

706
00:26:41,640 --> 00:26:43,919
ec2 instances to

707
00:26:43,919 --> 00:26:46,020
leverage it or use it

708
00:26:46,020 --> 00:26:48,900
you can see there in the trust policy on

709
00:26:48,900 --> 00:26:51,299
the left it has the ec2 list and as one

710
00:26:51,299 --> 00:26:53,039
of the services that could attach to

711
00:26:53,039 --> 00:26:56,658
this role this role could be attached to

712
00:26:56,880 --> 00:26:58,679
okay so then you're like all right

713
00:26:58,679 --> 00:27:00,299
that's that's cool that's cool but I

714
00:27:00,299 --> 00:27:01,980
still need an instance profile so then

715
00:27:01,980 --> 00:27:03,960
you back up the graph even more you say

716
00:27:03,960 --> 00:27:05,279
like oh there's already an instance

717
00:27:05,279 --> 00:27:08,100
profile inside the environment that is

718
00:27:08,100 --> 00:27:09,659
using that that points to that role

719
00:27:09,659 --> 00:27:11,159
which points to that policy which gives

720
00:27:11,159 --> 00:27:13,320
us effective admin

721
00:27:13,320 --> 00:27:18,179
so really if I'm an attacker and I get

722
00:27:18,179 --> 00:27:20,299
access to an account and that account

723
00:27:20,299 --> 00:27:24,659
can do pass roll and run the instance I

724
00:27:24,659 --> 00:27:27,779
could attach that pre-existing profile

725
00:27:27,779 --> 00:27:29,820
which would give me access to that role

726
00:27:29,820 --> 00:27:31,740
which would give me effective admin

727
00:27:31,740 --> 00:27:33,720
environment

728
00:27:33,720 --> 00:27:35,820
and then we can identify all the users

729
00:27:35,820 --> 00:27:37,799
that have that policy attached so here

730
00:27:37,799 --> 00:27:39,659
you can see there's this priv S3 user

731
00:27:39,659 --> 00:27:42,360
that has that policy so if we compromise

732
00:27:42,360 --> 00:27:45,360
prevast 3's laptop or get access to his

733
00:27:45,360 --> 00:27:47,760
AWS session we can use that escalation

734
00:27:47,760 --> 00:27:49,500
path to get to admin

735
00:27:49,500 --> 00:27:51,000
and this this is just kind of a simple

736
00:27:51,000 --> 00:27:53,159
example right so but you start at the

737
00:27:53,159 --> 00:27:54,299
top and then you just kind of work your

738
00:27:54,299 --> 00:27:56,400
way down and you can figure out you know

739
00:27:56,400 --> 00:27:57,900
where you want to go I mean obviously

740
00:27:57,900 --> 00:27:59,340
you can work it other ways like if you

741
00:27:59,340 --> 00:28:01,140
have access to a user you could work it

742
00:28:01,140 --> 00:28:04,340
the opposite direction too right

743
00:28:04,679 --> 00:28:07,919
okay so so we compromised the previous

744
00:28:07,919 --> 00:28:11,100
three user right and we get his we get

745
00:28:11,100 --> 00:28:13,500
his credentials right here we're doing

746
00:28:13,500 --> 00:28:15,299
that AWS who am I command to get his

747
00:28:15,299 --> 00:28:17,820
credentials

748
00:28:17,820 --> 00:28:19,679
um and then using his credentials we try

749
00:28:19,679 --> 00:28:21,600
to get to the data in S3 right we're

750
00:28:21,600 --> 00:28:23,340
like all right we got some creds let's

751
00:28:23,340 --> 00:28:25,440
try we get all access denies we cannot

752
00:28:25,440 --> 00:28:28,320
get to the data in S3

753
00:28:28,320 --> 00:28:31,440
so then we start up a netcat listener on

754
00:28:31,440 --> 00:28:33,260
the attacker side

755
00:28:33,260 --> 00:28:35,880
and you know we find our current IP

756
00:28:35,880 --> 00:28:38,820
address which is this 143 address

757
00:28:38,820 --> 00:28:41,279
and then we create like just a little

758
00:28:41,279 --> 00:28:43,559
mini script and that script will do a

759
00:28:43,559 --> 00:28:46,860
connect back on a Debian Ubuntu based

760
00:28:46,860 --> 00:28:49,919
box to our netcat listener

761
00:28:49,919 --> 00:28:52,559
but the one thing we know we can do is

762
00:28:52,559 --> 00:28:54,960
we can create an instance right so we're

763
00:28:54,960 --> 00:28:56,640
going to leverage those credentials to

764
00:28:56,640 --> 00:28:58,559
create an ec2 instance we're going to

765
00:28:58,559 --> 00:29:00,120
attach the already existing instance

766
00:29:00,120 --> 00:29:02,340
profile that has the role which has the

767
00:29:02,340 --> 00:29:04,679
policy that we want that's going to

768
00:29:04,679 --> 00:29:08,640
assign create some temporary credentials

769
00:29:08,640 --> 00:29:11,100
um that the user is going to enable us

770
00:29:11,100 --> 00:29:12,740
to do so here we go

771
00:29:12,740 --> 00:29:15,900
we launch a new ec2 instance in this

772
00:29:15,900 --> 00:29:16,760
command

773
00:29:16,760 --> 00:29:20,640
and we use that little script we built

774
00:29:20,640 --> 00:29:23,220
that does the connect back to us as the

775
00:29:23,220 --> 00:29:25,020
boot script for that so when the ec2

776
00:29:25,020 --> 00:29:27,120
starts up it will run our connect back

777
00:29:27,120 --> 00:29:28,679
shell and give us kind of an interactive

778
00:29:28,679 --> 00:29:31,399
session with it

779
00:29:32,159 --> 00:29:35,880
so there we go we created an instance we

780
00:29:35,880 --> 00:29:38,220
had that user data script and that

781
00:29:38,220 --> 00:29:42,000
connect back to our netcat listener

782
00:29:42,000 --> 00:29:44,100
now we kind of get the interactive C2

783
00:29:44,100 --> 00:29:45,840
comms over netcat going with the

784
00:29:45,840 --> 00:29:47,940
instance

785
00:29:47,940 --> 00:29:50,520
we see here on our netcat we'll get like

786
00:29:50,520 --> 00:29:52,559
a connection was received and now we can

787
00:29:52,559 --> 00:29:54,240
run commands and those commands are

788
00:29:54,240 --> 00:29:56,279
running with the context of that ec2

789
00:29:56,279 --> 00:29:59,240
instance we just created

790
00:29:59,460 --> 00:30:02,700
okay once we do that we can just curl

791
00:30:02,700 --> 00:30:04,679
the metadata service which is located at

792
00:30:04,679 --> 00:30:07,700
this IP address

793
00:30:08,059 --> 00:30:10,679
169.254.169.254 that's in an RFC spec

794
00:30:10,679 --> 00:30:12,419
and on most Cloud providers it's going

795
00:30:12,419 --> 00:30:14,460
to be located at that IP address there

796
00:30:14,460 --> 00:30:15,960
are some exceptions to that on other

797
00:30:15,960 --> 00:30:17,820
Cloud providers but you can look at

798
00:30:17,820 --> 00:30:20,039
their documentation to find their cloud

799
00:30:20,039 --> 00:30:22,620
service provider specific implementation

800
00:30:22,620 --> 00:30:24,120
of the metadata service

801
00:30:24,120 --> 00:30:25,380
and once we do that we're going to be

802
00:30:25,380 --> 00:30:26,940
able to get those temporary credentials

803
00:30:26,940 --> 00:30:28,679
which are going to have those kind of

804
00:30:28,679 --> 00:30:31,380
effective admin permissions

805
00:30:31,380 --> 00:30:34,860
uh over our netcat listener then we'll

806
00:30:34,860 --> 00:30:37,200
load up those temporary credentials on

807
00:30:37,200 --> 00:30:39,120
our attacker box

808
00:30:39,120 --> 00:30:42,120
so right here we see the netcat and

809
00:30:42,120 --> 00:30:44,220
inside the netcat I execute the curl

810
00:30:44,220 --> 00:30:46,380
statement and inside the curls response

811
00:30:46,380 --> 00:30:49,200
I'll see back this AK or this Asia

812
00:30:49,200 --> 00:30:52,620
access key secret key and token and then

813
00:30:52,620 --> 00:30:54,720
I can use those three values to kind of

814
00:30:54,720 --> 00:30:57,179
impersonate the permissions that an ec2

815
00:30:57,179 --> 00:31:00,200
instance has right now

816
00:31:01,200 --> 00:31:03,659
so I get those temporary credentials as

817
00:31:03,659 --> 00:31:07,200
an attacker and then I populate my AWS

818
00:31:07,200 --> 00:31:09,600
CLI configuration file which is that's a

819
00:31:09,600 --> 00:31:12,059
top file right there and once I do that

820
00:31:12,059 --> 00:31:14,580
and once I do the who am I command I now

821
00:31:14,580 --> 00:31:16,980
have access to that role that was

822
00:31:16,980 --> 00:31:20,419
attached to that ec2 instance

823
00:31:21,899 --> 00:31:23,520
so from there I should be able to access

824
00:31:23,520 --> 00:31:25,500
the data in the S3 buckets and I now

825
00:31:25,500 --> 00:31:27,480
have effective admin inside that AWS

826
00:31:27,480 --> 00:31:28,520
account

827
00:31:28,520 --> 00:31:31,020
so we can see here now in the final

828
00:31:31,020 --> 00:31:32,940
screenshot I I was able to access the

829
00:31:32,940 --> 00:31:35,880
bucket pull back the files and see you

830
00:31:35,880 --> 00:31:37,919
know that pull back that ASCII art whale

831
00:31:37,919 --> 00:31:40,020
so

832
00:31:40,020 --> 00:31:42,659
so I you know I just

833
00:31:42,659 --> 00:31:44,520
I wanted to kind of highlight the basics

834
00:31:44,520 --> 00:31:46,020
of how this works inside the AWS

835
00:31:46,020 --> 00:31:48,360
environment as there's a lot of

836
00:31:48,360 --> 00:31:50,159
components or things to step through

837
00:31:50,159 --> 00:31:52,740
here but when you start chaining all

838
00:31:52,740 --> 00:31:54,419
this knowledge together it can be really

839
00:31:54,419 --> 00:31:57,020
impactful

840
00:31:58,919 --> 00:32:02,399
all right so common prevas vectors so

841
00:32:02,399 --> 00:32:04,679
people often ask like what's the biggest

842
00:32:04,679 --> 00:32:06,600
ways that if you get like a limited user

843
00:32:06,600 --> 00:32:09,779
in AWS how are you really going to get

844
00:32:09,779 --> 00:32:12,179
to admin and yeah I saw that fancy graph

845
00:32:12,179 --> 00:32:13,799
that you just showed me and you walked

846
00:32:13,799 --> 00:32:16,679
me through the one scenario but in at an

847
00:32:16,679 --> 00:32:18,720
aggregate what are like the kind of

848
00:32:18,720 --> 00:32:20,640
guiding rules to getting proves working

849
00:32:20,640 --> 00:32:21,779
in Cloud

850
00:32:21,779 --> 00:32:24,059
and and basically I like to boil it back

851
00:32:24,059 --> 00:32:25,740
to these two things right

852
00:32:25,740 --> 00:32:28,440
if you can get permissions to you know

853
00:32:28,440 --> 00:32:30,779
the IEM equivalent in the cloud provider

854
00:32:30,779 --> 00:32:33,059
or in the account or if you can

855
00:32:33,059 --> 00:32:36,179
manipulate resources uh that have higher

856
00:32:36,179 --> 00:32:38,100
privileges than you currently have I

857
00:32:38,100 --> 00:32:39,539
mean you're going to be on a path

858
00:32:39,539 --> 00:32:41,220
potentially to privacy in the

859
00:32:41,220 --> 00:32:42,899
environment so I'll walk you through

860
00:32:42,899 --> 00:32:45,419
that like obviously if we get access to

861
00:32:45,419 --> 00:32:48,179
like an identity and that identity has

862
00:32:48,179 --> 00:32:50,279
permissions to create more access keys

863
00:32:50,279 --> 00:32:53,580
or modify user users profiles or things

864
00:32:53,580 --> 00:32:55,500
like that that's you know just kind of

865
00:32:55,500 --> 00:32:57,840
like standard admin activity you'll you

866
00:32:57,840 --> 00:32:59,640
potentially can provest just by picking

867
00:32:59,640 --> 00:33:02,039
another user that has higher privileges

868
00:33:02,039 --> 00:33:05,399
than you and updating their settings

869
00:33:05,399 --> 00:33:07,799
you know another way would be to muck

870
00:33:07,799 --> 00:33:09,240
with the policies that are attached to

871
00:33:09,240 --> 00:33:12,480
an identity right like a lot of times

872
00:33:12,480 --> 00:33:14,039
you'll have multiple versions of the

873
00:33:14,039 --> 00:33:16,440
same policy and the policy when in an

874
00:33:16,440 --> 00:33:18,960
old version will be very insecure and

875
00:33:18,960 --> 00:33:20,399
then the security team will come around

876
00:33:20,399 --> 00:33:21,720
and say like hey you guys got to fix

877
00:33:21,720 --> 00:33:24,179
that they'll issue a new version that's

878
00:33:24,179 --> 00:33:26,820
much more hardened

879
00:33:26,820 --> 00:33:28,919
but then if they don't lock down who can

880
00:33:28,919 --> 00:33:30,480
roll back to the previous versions of

881
00:33:30,480 --> 00:33:31,799
the policies that could be another

882
00:33:31,799 --> 00:33:32,960
previous

883
00:33:32,960 --> 00:33:35,760
path so any type of policy permission

884
00:33:35,760 --> 00:33:38,100
modifications that's another provest

885
00:33:38,100 --> 00:33:39,360
path

886
00:33:39,360 --> 00:33:41,100
and and that includes you know the

887
00:33:41,100 --> 00:33:43,740
ability to kind of uh you know update

888
00:33:43,740 --> 00:33:45,480
anything associated with like assume

889
00:33:45,480 --> 00:33:47,760
role policies or those trust policies

890
00:33:47,760 --> 00:33:51,059
attached to the resources too right

891
00:33:51,059 --> 00:33:53,580
but you know typically like when you do

892
00:33:53,580 --> 00:33:56,399
a social engineering engagement you know

893
00:33:56,399 --> 00:33:58,380
you sometimes you get lucky you land on

894
00:33:58,380 --> 00:34:00,480
an admins box but a lot of times you're

895
00:34:00,480 --> 00:34:02,640
going to land on an engineer's box and

896
00:34:02,640 --> 00:34:05,399
an engineer a lot of times isn't going

897
00:34:05,399 --> 00:34:07,320
to have I am permissions right this

898
00:34:07,320 --> 00:34:09,359
stuff is restricted for kind of like

899
00:34:09,359 --> 00:34:10,859
those admins

900
00:34:10,859 --> 00:34:13,980
so that's that's really where the past

901
00:34:13,980 --> 00:34:16,199
role permission becomes critical as well

902
00:34:16,199 --> 00:34:17,940
as the focusing on manipulating

903
00:34:17,940 --> 00:34:20,339
resources right like if you are an

904
00:34:20,339 --> 00:34:22,080
engineer on a team and you're building

905
00:34:22,080 --> 00:34:23,520
an application and you have access to

906
00:34:23,520 --> 00:34:26,040
AWS you probably have the ability to do

907
00:34:26,040 --> 00:34:28,619
some type of resource creation or

908
00:34:28,619 --> 00:34:30,719
resource modification inside the AWS

909
00:34:30,719 --> 00:34:33,359
environment so the question there is can

910
00:34:33,359 --> 00:34:34,739
you modify something that has greater

911
00:34:34,739 --> 00:34:36,659
privileges than yourself and and

912
00:34:36,659 --> 00:34:39,839
basically the three boiled down ways to

913
00:34:39,839 --> 00:34:41,639
do this is can you create a new resource

914
00:34:41,639 --> 00:34:43,739
like we just saw can I create a new ec2

915
00:34:43,739 --> 00:34:45,418
and attach a higher level of privilege

916
00:34:45,418 --> 00:34:46,260
to it

917
00:34:46,260 --> 00:34:49,199
can I affect an input like sometimes

918
00:34:49,199 --> 00:34:50,820
people have build processes and they

919
00:34:50,820 --> 00:34:53,040
just store The Source Code for their

920
00:34:53,040 --> 00:34:55,320
inputs in like S3 can I just go modify

921
00:34:55,320 --> 00:34:57,480
that and next time there's a build I'll

922
00:34:57,480 --> 00:34:59,339
be upstream and and that will execute

923
00:34:59,339 --> 00:35:01,320
with higher permissions than I have or

924
00:35:01,320 --> 00:35:02,880
can I get into something that's

925
00:35:02,880 --> 00:35:04,980
currently processing the resources and

926
00:35:04,980 --> 00:35:06,780
modify that

927
00:35:06,780 --> 00:35:08,220
um

928
00:35:08,220 --> 00:35:11,040
yeah so that's kind of on that side and

929
00:35:11,040 --> 00:35:12,300
and just to kind of call out some

930
00:35:12,300 --> 00:35:15,119
examples here like let's say they have

931
00:35:15,119 --> 00:35:16,740
Lambda scripts which are really common

932
00:35:16,740 --> 00:35:18,240
right

933
00:35:18,240 --> 00:35:20,220
if you can update the Lambda script and

934
00:35:20,220 --> 00:35:21,540
the role associated with the Lambda

935
00:35:21,540 --> 00:35:23,820
script is higher privs than the user is

936
00:35:23,820 --> 00:35:26,460
that's a priv s path right there

937
00:35:26,460 --> 00:35:29,099
same with ec2 and SSM a lot of ec2

938
00:35:29,099 --> 00:35:31,140
instances a lot of organizations use SSM

939
00:35:31,140 --> 00:35:33,060
to manage them if you can just start an

940
00:35:33,060 --> 00:35:36,180
SM session up inside of an ec2 instances

941
00:35:36,180 --> 00:35:37,920
that has a role that's higher privilege

942
00:35:37,920 --> 00:35:41,160
than yourself that's a provest path

943
00:35:41,160 --> 00:35:42,660
and then you know just kind of going

944
00:35:42,660 --> 00:35:44,220
through a bunch of the AWS Services

945
00:35:44,220 --> 00:35:45,960
looking for anything that has a higher

946
00:35:45,960 --> 00:35:49,339
level role attached to it than yourself

947
00:35:49,920 --> 00:35:52,380
so really you know

948
00:35:52,380 --> 00:35:53,640
um that that's kind of the breakdown

949
00:35:53,640 --> 00:35:55,619
there in my opinion of the kind of Easy

950
00:35:55,619 --> 00:35:57,720
Button ways to provest when you get a

951
00:35:57,720 --> 00:36:01,700
limited user inside an AWS environment

952
00:36:02,160 --> 00:36:03,540
okay

953
00:36:03,540 --> 00:36:05,760
so um let's just say you're like hey

954
00:36:05,760 --> 00:36:07,859
this talk was really cool I want to do

955
00:36:07,859 --> 00:36:09,720
more of this at my house but I didn't

956
00:36:09,720 --> 00:36:11,520
understand you know one percent of what

957
00:36:11,520 --> 00:36:13,920
Bryce said so there's a bunch of great

958
00:36:13,920 --> 00:36:16,500
resources here to help you get started

959
00:36:16,500 --> 00:36:20,520
um so namely Cloud goat I am vulnerable

960
00:36:20,520 --> 00:36:23,099
sad Cloud AWS goat these are great

961
00:36:23,099 --> 00:36:25,619
resources so you can uh these are open

962
00:36:25,619 --> 00:36:27,420
source projects

963
00:36:27,420 --> 00:36:29,640
um and you can go and you know create an

964
00:36:29,640 --> 00:36:32,760
AWS account if you want to just start

965
00:36:32,760 --> 00:36:34,500
out I I recommend like the I am

966
00:36:34,500 --> 00:36:35,579
vulnerable

967
00:36:35,579 --> 00:36:37,440
um that's going to help you and then

968
00:36:37,440 --> 00:36:39,960
like a basically zero cost away create a

969
00:36:39,960 --> 00:36:41,760
free account deploy a bunch of

970
00:36:41,760 --> 00:36:44,579
misconfigured IEM settings and be able

971
00:36:44,579 --> 00:36:47,460
to identify them with tools Cloud go sad

972
00:36:47,460 --> 00:36:49,320
cloud and AWS code are awesome as well

973
00:36:49,320 --> 00:36:51,900
but some of those can create resources

974
00:36:51,900 --> 00:36:53,339
that are going to charge you a little

975
00:36:53,339 --> 00:36:55,320
bit of money so and you definitely don't

976
00:36:55,320 --> 00:36:56,579
want to do this in like a production

977
00:36:56,579 --> 00:36:57,980
account these are all going to create

978
00:36:57,980 --> 00:37:02,119
misconfigurations that are exploitable

979
00:37:03,660 --> 00:37:04,859
um and then there's lots of like if you

980
00:37:04,859 --> 00:37:06,300
just Google for walkthroughs there's

981
00:37:06,300 --> 00:37:08,520
lots of walkthroughs for these four

982
00:37:08,520 --> 00:37:10,500
um so you can you know even if you can

983
00:37:10,500 --> 00:37:12,000
kind of follow along

984
00:37:12,000 --> 00:37:13,740
and then if you're looking more on like

985
00:37:13,740 --> 00:37:15,359
the blue team defense perspective

986
00:37:15,359 --> 00:37:17,099
there's a lot of tools that are going to

987
00:37:17,099 --> 00:37:19,079
help you visualize it I mean the ones

988
00:37:19,079 --> 00:37:22,200
that I recommend are are kind of I mean

989
00:37:22,200 --> 00:37:24,540
Cloud Scout is the combination of AWS PX

990
00:37:24,540 --> 00:37:26,820
and storm spotter so I think that's a

991
00:37:26,820 --> 00:37:28,380
that's a good place to start or start

992
00:37:28,380 --> 00:37:30,599
with one of those three tools and then I

993
00:37:30,599 --> 00:37:32,339
really like Road tools

994
00:37:32,339 --> 00:37:34,020
um but it's a little less user friendly

995
00:37:34,020 --> 00:37:35,520
I'd say

996
00:37:35,520 --> 00:37:37,079
and there's a number of other ones that

997
00:37:37,079 --> 00:37:38,640
are out there

998
00:37:38,640 --> 00:37:40,500
this isn't a comprehensive list I'm sure

999
00:37:40,500 --> 00:37:43,099
you can find more

1000
00:37:44,220 --> 00:37:46,320
okay

1001
00:37:46,320 --> 00:37:48,660
um you know at stage two we built our

1002
00:37:48,660 --> 00:37:51,480
own tool so hats off to Paul for this

1003
00:37:51,480 --> 00:37:53,520
which helps like automate a lot of this

1004
00:37:53,520 --> 00:37:55,619
process that's backed by a graphdb

1005
00:37:55,619 --> 00:37:58,320
database but mostly because awspx

1006
00:37:58,320 --> 00:38:00,480
doesn't support all the services that we

1007
00:38:00,480 --> 00:38:02,420
run into for clients

1008
00:38:02,420 --> 00:38:04,740
and also because we wanted something

1009
00:38:04,740 --> 00:38:09,180
that was a little more refined so but so

1010
00:38:09,180 --> 00:38:10,740
you know I've seen another a couple

1011
00:38:10,740 --> 00:38:11,940
other organizations build their own

1012
00:38:11,940 --> 00:38:13,320
tools so that's kind of like the

1013
00:38:13,320 --> 00:38:15,420
evolution is start with open source

1014
00:38:15,420 --> 00:38:16,980
stuff figure out where the gaps are and

1015
00:38:16,980 --> 00:38:18,599
then kind of build additional tooling on

1016
00:38:18,599 --> 00:38:20,960
top of it

1017
00:38:22,079 --> 00:38:25,700
okay cool

1018
00:38:25,800 --> 00:38:26,579
um

1019
00:38:26,579 --> 00:38:28,980
okay I'm not gonna I'll talk a little

1020
00:38:28,980 --> 00:38:30,300
bit about this

1021
00:38:30,300 --> 00:38:33,119
um the first part but uh you know I I do

1022
00:38:33,119 --> 00:38:35,640
want to be constants of the time

1023
00:38:35,640 --> 00:38:37,740
um so I won't I won't go too much into

1024
00:38:37,740 --> 00:38:39,960
it but

1025
00:38:39,960 --> 00:38:42,180
um talking for a minute about Azure Ed

1026
00:38:42,180 --> 00:38:44,099
which is kind of like the authentication

1027
00:38:44,099 --> 00:38:47,520
SSO solution for azure uh shout outs to

1028
00:38:47,520 --> 00:38:49,020
Anthony he made a bunch of these slides

1029
00:38:49,020 --> 00:38:51,540
uh

1030
00:38:51,540 --> 00:38:53,640
you know I

1031
00:38:53,640 --> 00:38:55,500
Azure ad it's really trying to be that

1032
00:38:55,500 --> 00:38:57,420
unified identity platform for Microsoft

1033
00:38:57,420 --> 00:39:00,000
right so whether you have like o365 or

1034
00:39:00,000 --> 00:39:02,040
you have an Azure account using the

1035
00:39:02,040 --> 00:39:04,560
resource manager your typical like isas

1036
00:39:04,560 --> 00:39:07,680
like VM deployments

1037
00:39:07,680 --> 00:39:09,119
um they're going to use this Azure ID

1038
00:39:09,119 --> 00:39:11,640
for Authentication

1039
00:39:11,640 --> 00:39:14,040
and Azure Azure active directory and

1040
00:39:14,040 --> 00:39:16,440
active directory are told totally two

1041
00:39:16,440 --> 00:39:18,300
different things right so active

1042
00:39:18,300 --> 00:39:19,859
directory is usually like on-prem

1043
00:39:19,859 --> 00:39:22,079
servers that you use to manage

1044
00:39:22,079 --> 00:39:23,700
permissions of laptops throughout your

1045
00:39:23,700 --> 00:39:26,099
Enterprise Azure active directory is

1046
00:39:26,099 --> 00:39:27,960
more like a like an oauth of service

1047
00:39:27,960 --> 00:39:29,660
almost right

1048
00:39:29,660 --> 00:39:34,020
you know going to be API driven

1049
00:39:34,020 --> 00:39:35,640
foreign

1050
00:39:35,640 --> 00:39:38,160
so here's the portal you go to to kind

1051
00:39:38,160 --> 00:39:39,680
of measure manage your Azure ID

1052
00:39:39,680 --> 00:39:41,880
infrastructure there's a lot of

1053
00:39:41,880 --> 00:39:43,440
different python modules that you can

1054
00:39:43,440 --> 00:39:45,359
use to manage your Azure ad

1055
00:39:45,359 --> 00:39:47,400
infrastructure out there I've listed

1056
00:39:47,400 --> 00:39:50,339
some of them here if you're interested

1057
00:39:50,339 --> 00:39:53,579
and they're fairly easy to use right you

1058
00:39:53,579 --> 00:39:55,260
can just import the modules and then

1059
00:39:55,260 --> 00:39:57,599
start using them to connect to Azure ID

1060
00:39:57,599 --> 00:40:01,220
and use the various services

1061
00:40:02,099 --> 00:40:04,079
I'll just we need to go over all this

1062
00:40:04,079 --> 00:40:06,240
right

1063
00:40:06,240 --> 00:40:07,200
um if you're interested in this stuff

1064
00:40:07,200 --> 00:40:09,180
I'll post the slides up to my Twitter

1065
00:40:09,180 --> 00:40:12,799
um after the talk later today so

1066
00:40:14,760 --> 00:40:17,700
okay but under the hood there's these

1067
00:40:17,700 --> 00:40:19,079
different apis which are going to allow

1068
00:40:19,079 --> 00:40:21,900
you to interact with Azure ad so you're

1069
00:40:21,900 --> 00:40:23,280
gonna have the like the Microsoft grass

1070
00:40:23,280 --> 00:40:25,740
apis you can have the Azure ad apis

1071
00:40:25,740 --> 00:40:26,820
you're gonna have these exchange

1072
00:40:26,820 --> 00:40:30,060
provisioning service apis and you know

1073
00:40:30,060 --> 00:40:31,380
you're going to be able to stand up your

1074
00:40:31,380 --> 00:40:32,880
standard tools for doing app testing

1075
00:40:32,880 --> 00:40:34,980
like burp and proxy those connections

1076
00:40:34,980 --> 00:40:36,480
requests through it

1077
00:40:36,480 --> 00:40:38,520
and you know on a general level you'll

1078
00:40:38,520 --> 00:40:40,200
log into the management portal that'll

1079
00:40:40,200 --> 00:40:42,780
call apis and then those apis will call

1080
00:40:42,780 --> 00:40:44,820
even more internal apis and those will

1081
00:40:44,820 --> 00:40:46,440
take some action in your account on your

1082
00:40:46,440 --> 00:40:48,800
behalf

1083
00:40:49,440 --> 00:40:51,480
um so you know if you just kind of start

1084
00:40:51,480 --> 00:40:53,640
analyzing this enough you can figure out

1085
00:40:53,640 --> 00:40:55,619
oh I don't actually need to go through

1086
00:40:55,619 --> 00:40:56,820
those

1087
00:40:56,820 --> 00:40:58,260
um

1088
00:40:58,260 --> 00:41:00,480
um you know those Azure portal apis I

1089
00:41:00,480 --> 00:41:02,220
can go directly to the internal graph

1090
00:41:02,220 --> 00:41:05,339
apis and start making queries there and

1091
00:41:05,339 --> 00:41:07,460
the the tool row tools

1092
00:41:07,460 --> 00:41:10,800
de jerk or um sorry if I butchered that

1093
00:41:10,800 --> 00:41:12,960
name uh he you know he gave a great talk

1094
00:41:12,960 --> 00:41:14,880
about this how you can kind of bypass

1095
00:41:14,880 --> 00:41:16,680
those apis and go directly to the

1096
00:41:16,680 --> 00:41:19,140
internal ones and Road tools leverages a

1097
00:41:19,140 --> 00:41:21,359
lot of that technology to collect a lot

1098
00:41:21,359 --> 00:41:24,119
of data deep inside your Azure ADM

1099
00:41:24,119 --> 00:41:26,780
infrastructure

1100
00:41:30,000 --> 00:41:32,280
okay so

1101
00:41:32,280 --> 00:41:33,300
um I'm just going to talk for a minute

1102
00:41:33,300 --> 00:41:34,980
about the Azure 80 drawing stuff and

1103
00:41:34,980 --> 00:41:36,540
then um and then I'll move on to that

1104
00:41:36,540 --> 00:41:39,599
kind of end of the talk so so the um

1105
00:41:39,599 --> 00:41:42,599
what is azure ad so you know we we've

1106
00:41:42,599 --> 00:41:43,740
had all these endpoints that are inside

1107
00:41:43,740 --> 00:41:46,260
like a traditional office setting and

1108
00:41:46,260 --> 00:41:49,320
they're joined to active directory right

1109
00:41:49,320 --> 00:41:51,240
well with the Advent of Windows 10 and

1110
00:41:51,240 --> 00:41:53,760
one of the newer versions and windows 11

1111
00:41:53,760 --> 00:41:54,660
.

1112
00:41:54,660 --> 00:41:56,579
um you can actually set up your

1113
00:41:56,579 --> 00:41:58,440
endpoints now to authenticate directly

1114
00:41:58,440 --> 00:41:59,720
to Azure ad

1115
00:41:59,720 --> 00:42:03,000
via these apis so you don't need to have

1116
00:42:03,000 --> 00:42:05,400
on-prem or in the cloud Azure active

1117
00:42:05,400 --> 00:42:09,000
active directory Services right so

1118
00:42:09,000 --> 00:42:11,339
um you know you can go inside and

1119
00:42:11,339 --> 00:42:12,839
there's a good blog post I'll walk you

1120
00:42:12,839 --> 00:42:14,040
through this at the bottom of the slide

1121
00:42:14,040 --> 00:42:17,119
you can say join to Azure ad

1122
00:42:17,119 --> 00:42:20,099
and there's steps here kind of listed

1123
00:42:20,099 --> 00:42:22,200
out in the slide I'm not going to get

1124
00:42:22,200 --> 00:42:24,960
into a ton but uh basically what's going

1125
00:42:24,960 --> 00:42:26,160
to happen is

1126
00:42:26,160 --> 00:42:28,800
when you log into your laptop it's going

1127
00:42:28,800 --> 00:42:30,540
to authenticate you using a user that's

1128
00:42:30,540 --> 00:42:33,000
in Azure active directory that's going

1129
00:42:33,000 --> 00:42:35,220
to give the endpoint a token

1130
00:42:35,220 --> 00:42:37,560
and then you know potentially if that

1131
00:42:37,560 --> 00:42:40,079
laptop gets compromised the token can be

1132
00:42:40,079 --> 00:42:42,180
pulled out of the endpoint and could be

1133
00:42:42,180 --> 00:42:44,099
reused by the attacker to authenticate

1134
00:42:44,099 --> 00:42:45,839
with whatever permissions that endpoint

1135
00:42:45,839 --> 00:42:48,359
had to azure

1136
00:42:48,359 --> 00:42:50,160
so there's a bunch of tools out there

1137
00:42:50,160 --> 00:42:51,780
that'll let you do that

1138
00:42:51,780 --> 00:42:52,800
um

1139
00:42:52,800 --> 00:42:55,740
tifkin wrote this one and it's pretty

1140
00:42:55,740 --> 00:42:58,079
reliable it will basically go through

1141
00:42:58,079 --> 00:43:02,339
and pull the token out of memory the JWT

1142
00:43:02,339 --> 00:43:04,460
and you'll be able to reuse that JWT to

1143
00:43:04,460 --> 00:43:06,359
re-authenticate to Azure active

1144
00:43:06,359 --> 00:43:08,839
directory

1145
00:43:08,940 --> 00:43:11,099
shouts out to Logan he made like a cool

1146
00:43:11,099 --> 00:43:14,300
video on how to do this

1147
00:43:14,300 --> 00:43:16,800
which I'll kind of just walk through

1148
00:43:16,800 --> 00:43:19,980
briefly but uh and then I'll move on

1149
00:43:19,980 --> 00:43:22,800
within the last portion of the talk

1150
00:43:22,800 --> 00:43:25,099
foreign

1151
00:43:30,420 --> 00:43:33,300
okay so we we got interactive we have

1152
00:43:33,300 --> 00:43:35,160
our own internal toolkit called Voodoo

1153
00:43:35,160 --> 00:43:37,140
it's kind of like our you know

1154
00:43:37,140 --> 00:43:39,060
um Cobalt strike equivalent but it works

1155
00:43:39,060 --> 00:43:42,839
on Windows Linux Mac and uh and uh yeah

1156
00:43:42,839 --> 00:43:44,640
so we kind of have our Voodoo server

1157
00:43:44,640 --> 00:43:46,319
sitting here so we can run commands on

1158
00:43:46,319 --> 00:43:48,540
our Target we've compromised an endpoint

1159
00:43:48,540 --> 00:43:52,020
and that endpoint is using Azure

1160
00:43:52,020 --> 00:43:54,780
um it's Azure adjoined right

1161
00:43:54,780 --> 00:43:56,460
so

1162
00:43:56,460 --> 00:43:59,460
um you know here on the end point we're

1163
00:43:59,460 --> 00:44:01,619
going to show on the attacker side that

1164
00:44:01,619 --> 00:44:04,140
we're not we're not logged into uh I

1165
00:44:04,140 --> 00:44:05,579
apologize

1166
00:44:05,579 --> 00:44:07,339
we're not logged into

1167
00:44:07,339 --> 00:44:10,680
Azure at all at this point when we flip

1168
00:44:10,680 --> 00:44:12,660
over you can see like not logged in

1169
00:44:12,660 --> 00:44:14,960
right

1170
00:44:15,000 --> 00:44:17,640
okay so then using voodoo

1171
00:44:17,640 --> 00:44:19,980
uh we can see we've got access to a

1172
00:44:19,980 --> 00:44:22,500
remote Target

1173
00:44:22,500 --> 00:44:25,319
that's named Jason Bourne and that might

1174
00:44:25,319 --> 00:44:28,140
be a little hard to read we load up.net

1175
00:44:28,140 --> 00:44:31,640
into memory only on the target

1176
00:44:33,359 --> 00:44:35,640
and then we use the tool that Tiff can

1177
00:44:35,640 --> 00:44:38,339
wrote to extract the JWT from memory

1178
00:44:38,339 --> 00:44:40,260
because the user's already logged in

1179
00:44:40,260 --> 00:44:42,480
their laptop and authenticated to Azure

1180
00:44:42,480 --> 00:44:43,800
act directory

1181
00:44:43,800 --> 00:44:46,260
once we grab that JWT we just insert it

1182
00:44:46,260 --> 00:44:48,359
in our browser as a cookie that's what's

1183
00:44:48,359 --> 00:44:51,140
going on here

1184
00:45:00,420 --> 00:45:02,700
and

1185
00:45:02,700 --> 00:45:05,420
now we're authenticated as the user

1186
00:45:05,420 --> 00:45:08,400
so you know we can kind of see

1187
00:45:08,400 --> 00:45:10,859
this future of everything being joined

1188
00:45:10,859 --> 00:45:13,140
by SSO to one Central authentication

1189
00:45:13,140 --> 00:45:15,420
system is great because it's going to be

1190
00:45:15,420 --> 00:45:17,579
more user intuitive for endpoint users

1191
00:45:17,579 --> 00:45:20,700
but if the endpoint gets compromised you

1192
00:45:20,700 --> 00:45:21,839
know it's also going to enable the

1193
00:45:21,839 --> 00:45:23,579
attackers to pick up those same

1194
00:45:23,579 --> 00:45:25,380
credentials and potentially reuse them

1195
00:45:25,380 --> 00:45:26,700
so

1196
00:45:26,700 --> 00:45:28,500
and obviously like Azure has a lot of

1197
00:45:28,500 --> 00:45:30,540
like conditional access control so that

1198
00:45:30,540 --> 00:45:32,280
could be implemented to prevent these

1199
00:45:32,280 --> 00:45:34,680
type of attacks but um that's kind of

1200
00:45:34,680 --> 00:45:38,180
the default State as of today

1201
00:45:40,260 --> 00:45:43,140
all right cool okay so

1202
00:45:43,140 --> 00:45:44,700
um there's some other content but I

1203
00:45:44,700 --> 00:45:46,680
don't want to like belabor it

1204
00:45:46,680 --> 00:45:48,740
um

1205
00:45:49,920 --> 00:45:51,540
all right because I want to get to

1206
00:45:51,540 --> 00:45:53,040
towards the end and I want to make sure

1207
00:45:53,040 --> 00:45:55,079
I'm conscious on time so

1208
00:45:55,079 --> 00:45:57,060
so

1209
00:45:57,060 --> 00:45:58,520
sorry

1210
00:45:58,520 --> 00:46:00,300
[Laughter]

1211
00:46:00,300 --> 00:46:01,440
if you're interested to come talk

1212
00:46:01,440 --> 00:46:02,819
afterwards I'm happy to go over those

1213
00:46:02,819 --> 00:46:04,920
slides okay so

1214
00:46:04,920 --> 00:46:06,240
um the the one thing I just wanted to

1215
00:46:06,240 --> 00:46:07,619
talk about was something cool that the

1216
00:46:07,619 --> 00:46:09,180
team came up with

1217
00:46:09,180 --> 00:46:11,640
um so the idea came from Scott Piper I

1218
00:46:11,640 --> 00:46:13,200
don't know if he's here but um thanks

1219
00:46:13,200 --> 00:46:16,859
Scott so basically let's say you have an

1220
00:46:16,859 --> 00:46:19,680
admin of an AWS environment and you know

1221
00:46:19,680 --> 00:46:20,940
they're doing ad many things like

1222
00:46:20,940 --> 00:46:22,380
they're spinning up instances they're

1223
00:46:22,380 --> 00:46:23,760
deploying cloudformation templates

1224
00:46:23,760 --> 00:46:26,339
they're you know modifying permissions

1225
00:46:26,339 --> 00:46:28,740
they're creating lambdos they're doing

1226
00:46:28,740 --> 00:46:30,300
all the greatness right and you're an

1227
00:46:30,300 --> 00:46:31,380
attacker and you're just sitting over

1228
00:46:31,380 --> 00:46:33,660
here with your AWS account and you're

1229
00:46:33,660 --> 00:46:35,400
like feeling lonely you're like I need I

1230
00:46:35,400 --> 00:46:37,500
need some of that admin admin access

1231
00:46:37,500 --> 00:46:38,900
right

1232
00:46:38,900 --> 00:46:40,800
so

1233
00:46:40,800 --> 00:46:43,260
um so we came up with this technique

1234
00:46:43,260 --> 00:46:45,240
well Scott came up with it he wrote it

1235
00:46:45,240 --> 00:46:46,740
up in the blog but there's really no

1236
00:46:46,740 --> 00:46:48,660
implementation that I knew about so so

1237
00:46:48,660 --> 00:46:50,579
we built an implementation for it so

1238
00:46:50,579 --> 00:46:52,680
basically uh you know we built a social

1239
00:46:52,680 --> 00:46:54,359
engineering email that had a big button

1240
00:46:54,359 --> 00:46:56,940
that said launch stack right like

1241
00:46:56,940 --> 00:46:58,319
basically there's an update to this

1242
00:46:58,319 --> 00:47:00,780
service that you're using in AWS or this

1243
00:47:00,780 --> 00:47:01,859
third-party service that you're

1244
00:47:01,859 --> 00:47:04,140
leveraging like you know imagine there's

1245
00:47:04,140 --> 00:47:05,640
a lot of services that require you to

1246
00:47:05,640 --> 00:47:09,540
deploy a stack in cloud formation and

1247
00:47:09,540 --> 00:47:12,720
um to get onboarded so we send an email

1248
00:47:12,720 --> 00:47:15,240
in and we convince the user to click on

1249
00:47:15,240 --> 00:47:17,940
the launch stack link and this is a user

1250
00:47:17,940 --> 00:47:20,040
that we think Ari has admin access to

1251
00:47:20,040 --> 00:47:21,300
AWS

1252
00:47:21,300 --> 00:47:23,640
and then AWS has like kind of like these

1253
00:47:23,640 --> 00:47:25,800
quick stack deployment

1254
00:47:25,800 --> 00:47:30,060
um URL so we can actually build a cloud

1255
00:47:30,060 --> 00:47:31,680
formation

1256
00:47:31,680 --> 00:47:33,839
a template basically like a malicious

1257
00:47:33,839 --> 00:47:36,720
cloudformation template and link to that

1258
00:47:36,720 --> 00:47:40,740
template uh which this link will link

1259
00:47:40,740 --> 00:47:43,140
out to so basically it's going to take

1260
00:47:43,140 --> 00:47:44,460
the user

1261
00:47:44,460 --> 00:47:46,619
right and we'll need to store that

1262
00:47:46,619 --> 00:47:50,099
template in an S3 bucket so here in the

1263
00:47:50,099 --> 00:47:52,260
attacker side we're going to create an

1264
00:47:52,260 --> 00:47:54,180
S3 bucket we're going to put the

1265
00:47:54,180 --> 00:47:55,980
malicious cloud formation template in

1266
00:47:55,980 --> 00:47:58,380
that S3 bucket and then we're going to

1267
00:47:58,380 --> 00:48:00,300
send an email to the user and if the

1268
00:48:00,300 --> 00:48:02,220
user clicks that launch stack button

1269
00:48:02,220 --> 00:48:04,619
they're going to get presented with this

1270
00:48:04,619 --> 00:48:07,319
screen so basically all they need to do

1271
00:48:07,319 --> 00:48:09,420
at this point is click the I acknowledge

1272
00:48:09,420 --> 00:48:11,940
and then the create stack button and

1273
00:48:11,940 --> 00:48:14,099
then you know we'll have full access to

1274
00:48:14,099 --> 00:48:16,680
the targets AWS account and and I'll

1275
00:48:16,680 --> 00:48:18,480
kind of I'll walk you through a little

1276
00:48:18,480 --> 00:48:21,119
bit more about how that happens so so we

1277
00:48:21,119 --> 00:48:23,819
send the email in on the left over here

1278
00:48:23,819 --> 00:48:25,740
that's going to reference the malicious

1279
00:48:25,740 --> 00:48:28,920
Cloud uh cloud formation template in our

1280
00:48:28,920 --> 00:48:30,780
bucket that's going to bring them to

1281
00:48:30,780 --> 00:48:33,540
that quick deployment screen

1282
00:48:33,540 --> 00:48:35,640
if they actually click the create stack

1283
00:48:35,640 --> 00:48:37,500
button that's going to create the stack

1284
00:48:37,500 --> 00:48:40,200
in their AWS account now there's a lot

1285
00:48:40,200 --> 00:48:41,579
of different tasks you can take from

1286
00:48:41,579 --> 00:48:45,420
here once you get that to occur but you

1287
00:48:45,420 --> 00:48:48,240
can actually here's one scenario right

1288
00:48:48,240 --> 00:48:51,000
we could have that stack if the user has

1289
00:48:51,000 --> 00:48:53,160
rights create a role we'd have them

1290
00:48:53,160 --> 00:48:55,319
attach a policy to that role that gives

1291
00:48:55,319 --> 00:48:58,980
our attackers AWS account access to the

1292
00:48:58,980 --> 00:49:01,680
targets account so basically we can ride

1293
00:49:01,680 --> 00:49:03,599
through roles to kind of get into the

1294
00:49:03,599 --> 00:49:05,280
target account there

1295
00:49:05,280 --> 00:49:07,079
the one thing that you kind of hook up

1296
00:49:07,079 --> 00:49:09,420
you get hooked up on this this attack

1297
00:49:09,420 --> 00:49:12,119
scenario is that

1298
00:49:12,119 --> 00:49:14,700
um the targets account if they create

1299
00:49:14,700 --> 00:49:16,560
the stack will be linked to the

1300
00:49:16,560 --> 00:49:18,660
attacker's account but the attacker

1301
00:49:18,660 --> 00:49:20,880
doesn't necessarily know that the

1302
00:49:20,880 --> 00:49:23,819
target's AWS account ID number in this

1303
00:49:23,819 --> 00:49:26,640
tax scenario right so the attacker needs

1304
00:49:26,640 --> 00:49:27,839
a way to kind of communicate that

1305
00:49:27,839 --> 00:49:30,839
information back to them so

1306
00:49:30,839 --> 00:49:32,000
um

1307
00:49:32,000 --> 00:49:35,579
so we as an attacker we can use the AWS

1308
00:49:35,579 --> 00:49:37,680
Sam framework which leverages

1309
00:49:37,680 --> 00:49:39,900
cloudformation or the hood to build some

1310
00:49:39,900 --> 00:49:42,300
resources and so the resources that I

1311
00:49:42,300 --> 00:49:44,700
built in the Sam template is a role with

1312
00:49:44,700 --> 00:49:47,099
a policy an API Gateway to a collect

1313
00:49:47,099 --> 00:49:50,460
that the target accounts number a Lambda

1314
00:49:50,460 --> 00:49:51,900
function that will take that number and

1315
00:49:51,900 --> 00:49:54,839
store it in S3 bucket so then we can

1316
00:49:54,839 --> 00:49:56,760
review those results later and kind of

1317
00:49:56,760 --> 00:49:59,579
assume into the targets account

1318
00:49:59,579 --> 00:50:02,400
right so and I know I'm going to get a

1319
00:50:02,400 --> 00:50:03,599
lot of slack for this slide because it's

1320
00:50:03,599 --> 00:50:06,660
just arrows everywhere but

1321
00:50:06,660 --> 00:50:08,880
but basically

1322
00:50:08,880 --> 00:50:10,619
when you put it all together you send

1323
00:50:10,619 --> 00:50:12,540
the phishing email in they click create

1324
00:50:12,540 --> 00:50:15,060
the stack right if they click create the

1325
00:50:15,060 --> 00:50:17,460
stack then it's going to load the

1326
00:50:17,460 --> 00:50:19,680
template from our attacker's bucket it's

1327
00:50:19,680 --> 00:50:21,540
going to launch the stack the stack is

1328
00:50:21,540 --> 00:50:23,040
going to create a role that role is

1329
00:50:23,040 --> 00:50:24,480
going to trust another role that's in

1330
00:50:24,480 --> 00:50:26,760
the attacker's account and then we'll

1331
00:50:26,760 --> 00:50:28,140
need to know that a target's account

1332
00:50:28,140 --> 00:50:29,760
number so it's going to create a Lambda

1333
00:50:29,760 --> 00:50:30,839
function

1334
00:50:30,839 --> 00:50:33,060
take that Lambda use the Lambda function

1335
00:50:33,060 --> 00:50:34,500
to communicate back the account number

1336
00:50:34,500 --> 00:50:36,660
to the attackers API Gateway which is

1337
00:50:36,660 --> 00:50:37,680
then going to use another Lambda

1338
00:50:37,680 --> 00:50:40,140
function to store an S3 bucket so the

1339
00:50:40,140 --> 00:50:41,819
attacker can move backwards into the

1340
00:50:41,819 --> 00:50:44,940
target's account with admin access so so

1341
00:50:44,940 --> 00:50:46,740
it's a little bit of Madness so you

1342
00:50:46,740 --> 00:50:49,500
might be asking yourself why do this and

1343
00:50:49,500 --> 00:50:51,180
also like I could do it better and I

1344
00:50:51,180 --> 00:50:52,260
totally agree with that you could do it

1345
00:50:52,260 --> 00:50:53,339
better there's ways to make this better

1346
00:50:53,339 --> 00:50:56,400
right but why do this right well if you

1347
00:50:56,400 --> 00:50:57,720
get into an environment and they have

1348
00:50:57,720 --> 00:51:00,420
502 plus web authen your adversary in

1349
00:51:00,420 --> 00:51:01,440
the middle attacks are going to fail

1350
00:51:01,440 --> 00:51:02,819
right

1351
00:51:02,819 --> 00:51:06,180
but look at this scenario right

1352
00:51:06,180 --> 00:51:08,880
the URL that the user clicked on isn't

1353
00:51:08,880 --> 00:51:11,160
hosted by the attacker nothing's hosted

1354
00:51:11,160 --> 00:51:13,140
by the attacker it's all hosted by AWS

1355
00:51:13,140 --> 00:51:18,000
100 reputable domains 100 percent

1356
00:51:18,000 --> 00:51:19,500
um you know 502 they're gonna

1357
00:51:19,500 --> 00:51:21,240
authenticate fine right they're gonna

1358
00:51:21,240 --> 00:51:23,940
authenticate to AWS so

1359
00:51:23,940 --> 00:51:25,200
um you know this is a potential attack

1360
00:51:25,200 --> 00:51:28,260
Vector where all known secured controls

1361
00:51:28,260 --> 00:51:29,700
you're just basically targeting the

1362
00:51:29,700 --> 00:51:31,559
human they have to know hey something

1363
00:51:31,559 --> 00:51:33,300
seems to us I shouldn't be deploying

1364
00:51:33,300 --> 00:51:35,520
this cloudformation template let's let's

1365
00:51:35,520 --> 00:51:37,200
back up right

1366
00:51:37,200 --> 00:51:38,940
and you know obviously I'm not

1367
00:51:38,940 --> 00:51:41,460
recommending everybody do this from a

1368
00:51:41,460 --> 00:51:43,500
red team in our pen testing standpoint I

1369
00:51:43,500 --> 00:51:45,420
get it's complex and

1370
00:51:45,420 --> 00:51:46,920
you know probably not needed in most

1371
00:51:46,920 --> 00:51:50,040
scenarios but it is a demonstration of

1372
00:51:50,040 --> 00:51:52,140
an attack that would bypass you know the

1373
00:51:52,140 --> 00:51:55,319
502 protections so so

1374
00:51:55,319 --> 00:51:57,559
um I pushed some sample code up here

1375
00:51:57,559 --> 00:51:59,520
you'll need to go through and like make

1376
00:51:59,520 --> 00:52:02,520
some modifications but uh

1377
00:52:02,520 --> 00:52:03,540
um you know if you're looking to

1378
00:52:03,540 --> 00:52:05,160
recreate it in your pen test that might

1379
00:52:05,160 --> 00:52:06,599
be helpful so

1380
00:52:06,599 --> 00:52:08,520
all right and you know with that being

1381
00:52:08,520 --> 00:52:10,440
said I'm going to wrap up so thank you

1382
00:52:10,440 --> 00:52:12,660
all for coming out appreciate it if you

1383
00:52:12,660 --> 00:52:13,980
have any more questions I'll be hanging

1384
00:52:13,980 --> 00:52:15,300
out so

1385
00:52:15,300 --> 00:52:17,020
um yeah thanks everyone for coming out

1386
00:52:17,020 --> 00:52:25,090
[Applause]

