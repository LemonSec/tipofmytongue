1
00:00:01,120 --> 00:00:02,560
hey um

2
00:00:02,560 --> 00:00:04,560
this is hunting for private and windows

3
00:00:04,560 --> 00:00:07,520
applications and i'm kenton mcdaniel um

4
00:00:07,520 --> 00:00:09,120
a little bit about me i love hacking

5
00:00:09,120 --> 00:00:11,360
things i love cracking passwords and i

6
00:00:11,360 --> 00:00:12,799
like prives a lot it's one of my

7
00:00:12,799 --> 00:00:14,639
favorite subjects

8
00:00:14,639 --> 00:00:17,760
so the idea of privilege escalation is

9
00:00:17,760 --> 00:00:20,080
gaining privileges from

10
00:00:20,080 --> 00:00:22,160
lower set to a higher set

11
00:00:22,160 --> 00:00:24,560
and specifically for this presentation i

12
00:00:24,560 --> 00:00:26,400
want to talk about going from a standard

13
00:00:26,400 --> 00:00:28,480
user privilege to the nt authority

14
00:00:28,480 --> 00:00:31,119
system user in a windows environment

15
00:00:31,119 --> 00:00:32,880
and hunting for ways to elevate your

16
00:00:32,880 --> 00:00:35,280
privileges through windows applications

17
00:00:35,280 --> 00:00:37,040
um if we want to gain the privileges of

18
00:00:37,040 --> 00:00:39,040
use if we can gain the privileges of a

19
00:00:39,040 --> 00:00:40,480
user that has extended rights like

20
00:00:40,480 --> 00:00:42,719
sempersonate or we gain the privileges

21
00:00:42,719 --> 00:00:44,960
of an administrator then we can become

22
00:00:44,960 --> 00:00:47,039
nt system with a trivial amount of

23
00:00:47,039 --> 00:00:49,360
effort so our goal should be either to

24
00:00:49,360 --> 00:00:50,160
gain

25
00:00:50,160 --> 00:00:52,480
the rights or tokens of that user or

26
00:00:52,480 --> 00:00:54,239
just go straight to nt system from

27
00:00:54,239 --> 00:00:57,640
standard user

28
00:00:58,320 --> 00:01:00,320
so i'm not going to drop any

29
00:01:00,320 --> 00:01:02,559
zero days i'm not going to be going deep

30
00:01:02,559 --> 00:01:04,080
into

31
00:01:04,080 --> 00:01:05,680
anything crazy not going to be talking

32
00:01:05,680 --> 00:01:07,439
about reverse engineering or binary

33
00:01:07,439 --> 00:01:09,840
exploitation i'm just going to present

34
00:01:09,840 --> 00:01:11,680
my methodology for

35
00:01:11,680 --> 00:01:14,320
how to look for common common privilege

36
00:01:14,320 --> 00:01:16,960
escalation vectors in windows software

37
00:01:16,960 --> 00:01:20,799
that's normally installed on on machines

38
00:01:20,799 --> 00:01:22,640
so the first thing we want to do is we

39
00:01:22,640 --> 00:01:24,479
want to build a setup we want to

40
00:01:24,479 --> 00:01:25,840
identify the software that we want to

41
00:01:25,840 --> 00:01:26,799
hunt in

42
00:01:26,799 --> 00:01:28,400
and then we want to legally obtain a

43
00:01:28,400 --> 00:01:30,079
copy of that software

44
00:01:30,079 --> 00:01:31,520
and then once we've legally obtained a

45
00:01:31,520 --> 00:01:33,200
copy of the software we want to set up a

46
00:01:33,200 --> 00:01:35,600
vm with the proper tools installed so

47
00:01:35,600 --> 00:01:36,960
that we can

48
00:01:36,960 --> 00:01:39,040
look for that privilege escalation so we

49
00:01:39,040 --> 00:01:40,720
can hunt inside of that vm

50
00:01:40,720 --> 00:01:42,159
we don't want to hunt in a live

51
00:01:42,159 --> 00:01:43,200
environment

52
00:01:43,200 --> 00:01:45,680
hunting in a live environment

53
00:01:45,680 --> 00:01:48,320
leads to a lot of unintended behavior

54
00:01:48,320 --> 00:01:49,280
because a lot of what we're going to be

55
00:01:49,280 --> 00:01:50,720
talking about is interrupting the

56
00:01:50,720 --> 00:01:52,240
regular flow of the application

57
00:01:52,240 --> 00:01:53,600
interrupt regular calls of the

58
00:01:53,600 --> 00:01:55,119
application

59
00:01:55,119 --> 00:01:56,640
doing things that will break application

60
00:01:56,640 --> 00:01:58,560
logic and so hunting in a live

61
00:01:58,560 --> 00:02:00,000
environment

62
00:02:00,000 --> 00:02:01,439
means that we're going to be breaking

63
00:02:01,439 --> 00:02:02,880
functionality and if it's a network

64
00:02:02,880 --> 00:02:04,240
connected application we could be

65
00:02:04,240 --> 00:02:06,159
breaking functionality for other users

66
00:02:06,159 --> 00:02:07,600
so you always want to isolate your own

67
00:02:07,600 --> 00:02:08,720
vm

68
00:02:08,720 --> 00:02:10,160
set it up just to hunt for your

69
00:02:10,160 --> 00:02:13,599
privesque in that software

70
00:02:13,599 --> 00:02:15,200
lots of applications will make use of

71
00:02:15,200 --> 00:02:16,959
windows services these are prime targets

72
00:02:16,959 --> 00:02:18,959
for privilege escalation so they'll set

73
00:02:18,959 --> 00:02:20,800
up windows services as backing services

74
00:02:20,800 --> 00:02:22,560
to provide functionality for the

75
00:02:22,560 --> 00:02:24,080
application so that they're always on

76
00:02:24,080 --> 00:02:26,239
and always running these are our prime

77
00:02:26,239 --> 00:02:27,760
targets because they're usually running

78
00:02:27,760 --> 00:02:29,360
with elevated privileges

79
00:02:29,360 --> 00:02:31,040
so when we when i go through the

80
00:02:31,040 --> 00:02:32,160
different things to look for the

81
00:02:32,160 --> 00:02:34,400
different use cases and considerations

82
00:02:34,400 --> 00:02:36,160
always start with windows services if

83
00:02:36,160 --> 00:02:37,599
you can find a windows service and then

84
00:02:37,599 --> 00:02:38,800
you can trickle down to normal

85
00:02:38,800 --> 00:02:41,120
applications after the fact

86
00:02:41,120 --> 00:02:44,640
so out on my github um just github.com

87
00:02:44,640 --> 00:02:46,480
kenton mcdaniel there's a vulnerable

88
00:02:46,480 --> 00:02:49,120
service repo and inside that repo i've

89
00:02:49,120 --> 00:02:50,480
just got some code

90
00:02:50,480 --> 00:02:53,360
um snippets that are very contrived

91
00:02:53,360 --> 00:02:54,959
but they are

92
00:02:54,959 --> 00:02:56,560
showing examples of privilege

93
00:02:56,560 --> 00:02:58,560
escalations that i've found

94
00:02:58,560 --> 00:03:01,200
a lot um and so one of the fun things

95
00:03:01,200 --> 00:03:03,200
that i like to do is i like to hunt for

96
00:03:03,200 --> 00:03:05,599
cves if you're not familiar with a cve

97
00:03:05,599 --> 00:03:08,959
it's a common vulnerability is exposure

98
00:03:08,959 --> 00:03:10,800
so you go out and you say hey i found

99
00:03:10,800 --> 00:03:12,159
this vulnerability in the software it

100
00:03:12,159 --> 00:03:14,560
gets listed in the cve database i love

101
00:03:14,560 --> 00:03:17,760
to go hunt for cves and random stuff

102
00:03:17,760 --> 00:03:18,879
and so

103
00:03:18,879 --> 00:03:21,040
these are different things that i've

104
00:03:21,040 --> 00:03:23,040
found across all kinds of different

105
00:03:23,040 --> 00:03:25,519
software running on windows

106
00:03:25,519 --> 00:03:28,400
i want to say i'm up to 30

107
00:03:28,400 --> 00:03:31,599
cves or so for windows applications

108
00:03:31,599 --> 00:03:33,440
something like that so they're pretty

109
00:03:33,440 --> 00:03:36,720
common and these happen a lot

110
00:03:36,879 --> 00:03:38,799
so lots of windows

111
00:03:38,799 --> 00:03:41,120
lots of developers make a lot of common

112
00:03:41,120 --> 00:03:42,239
mistakes

113
00:03:42,239 --> 00:03:44,720
and assumptions when they're writing

114
00:03:44,720 --> 00:03:45,920
when they're writing their software of

115
00:03:45,920 --> 00:03:47,280
how to handle inter-process

116
00:03:47,280 --> 00:03:49,440
communication how to handle calling into

117
00:03:49,440 --> 00:03:51,599
other processes how to handle calling

118
00:03:51,599 --> 00:03:54,400
into dependencies

119
00:03:54,400 --> 00:03:56,400
they assume that the underlying file

120
00:03:56,400 --> 00:03:58,319
system won't change so they assume that

121
00:03:58,319 --> 00:03:59,760
if a file is there it's always going to

122
00:03:59,760 --> 00:04:01,200
be there

123
00:04:01,200 --> 00:04:02,879
they assume that they can call down into

124
00:04:02,879 --> 00:04:04,159
userland

125
00:04:04,159 --> 00:04:05,599
whenever they want to call down into

126
00:04:05,599 --> 00:04:07,760
userland and the definition of userland

127
00:04:07,760 --> 00:04:10,640
is anywhere that a standard user can

128
00:04:10,640 --> 00:04:13,280
modify or update so i don't consider

129
00:04:13,280 --> 00:04:15,519
read the read permission a standard user

130
00:04:15,519 --> 00:04:17,279
land thing because usually read doesn't

131
00:04:17,279 --> 00:04:19,199
get me anywhere so

132
00:04:19,199 --> 00:04:20,399
they'll make these assumptions that they

133
00:04:20,399 --> 00:04:21,759
can just call down into user land

134
00:04:21,759 --> 00:04:23,600
whenever they want to but they don't

135
00:04:23,600 --> 00:04:25,199
understand the ramifications of calling

136
00:04:25,199 --> 00:04:27,759
down into user land um

137
00:04:27,759 --> 00:04:29,040
same thing with third parties right so

138
00:04:29,040 --> 00:04:30,160
they're calling their own stuff in new

139
00:04:30,160 --> 00:04:31,680
zealand or they're calling third party

140
00:04:31,680 --> 00:04:33,280
stuff in new zealand

141
00:04:33,280 --> 00:04:35,520
and or they'll let windows handle the

142
00:04:35,520 --> 00:04:37,280
path navigation for them and i'll dig a

143
00:04:37,280 --> 00:04:38,479
little bit deeper into that they'll just

144
00:04:38,479 --> 00:04:41,280
say hey windows i want to run whatever

145
00:04:41,280 --> 00:04:43,280
binary whether it's a dll exe i want to

146
00:04:43,280 --> 00:04:44,880
run it and they'll let windows figure

147
00:04:44,880 --> 00:04:46,639
out where it is and that can lead to a

148
00:04:46,639 --> 00:04:48,960
lot of privilege escalation as well

149
00:04:48,960 --> 00:04:50,240
so we're going to talk about two useful

150
00:04:50,240 --> 00:04:52,080
tools the first one is procmon or

151
00:04:52,080 --> 00:04:53,840
process monitor procmon's the old one

152
00:04:53,840 --> 00:04:55,040
that's just what i call it even though

153
00:04:55,040 --> 00:04:56,800
it's now process monitor

154
00:04:56,800 --> 00:05:00,400
and icackles so with these two tools

155
00:05:00,400 --> 00:05:02,320
if unless somebody's already picked over

156
00:05:02,320 --> 00:05:04,720
that application you're pretty much

157
00:05:04,720 --> 00:05:06,560
going to find

158
00:05:06,560 --> 00:05:08,639
a privilege escalation or an unintended

159
00:05:08,639 --> 00:05:10,479
disclosure of information in most

160
00:05:10,479 --> 00:05:13,120
windows software because

161
00:05:13,120 --> 00:05:14,960
most developers don't even think about

162
00:05:14,960 --> 00:05:16,320
these things

163
00:05:16,320 --> 00:05:18,320
and most applications never undergo this

164
00:05:18,320 --> 00:05:20,080
kind of review so all you need is

165
00:05:20,080 --> 00:05:23,199
process monitor and icackles

166
00:05:23,199 --> 00:05:24,960
so what process monitor is is it allows

167
00:05:24,960 --> 00:05:26,880
you to profile what an application does

168
00:05:26,880 --> 00:05:28,320
during its running state or a windows

169
00:05:28,320 --> 00:05:29,680
service does during a running state it's

170
00:05:29,680 --> 00:05:31,840
a debugging tool so you attach to a

171
00:05:31,840 --> 00:05:33,520
process it'll find it'll show you

172
00:05:33,520 --> 00:05:34,960
everything that's going on the file

173
00:05:34,960 --> 00:05:38,080
system other processes are being created

174
00:05:38,080 --> 00:05:39,840
and registry keys that are being

175
00:05:39,840 --> 00:05:42,080
searched so this shows you what an

176
00:05:42,080 --> 00:05:44,000
application is doing

177
00:05:44,000 --> 00:05:45,280
and before i said we wouldn't get into

178
00:05:45,280 --> 00:05:47,120
reverse engineering it's much easier to

179
00:05:47,120 --> 00:05:48,960
just watch the application and see what

180
00:05:48,960 --> 00:05:51,120
the application is doing if we profile

181
00:05:51,120 --> 00:05:52,800
with process monitor then we know the

182
00:05:52,800 --> 00:05:54,479
application is making calls out to these

183
00:05:54,479 --> 00:05:56,080
places the applications loading things

184
00:05:56,080 --> 00:05:58,240
from these places and then we can use

185
00:05:58,240 --> 00:06:01,440
that with icackles

186
00:06:01,440 --> 00:06:02,800
so

187
00:06:02,800 --> 00:06:04,400
so we can use it with icackles to look

188
00:06:04,400 --> 00:06:05,680
at permissions

189
00:06:05,680 --> 00:06:08,080
do we have permissions

190
00:06:08,080 --> 00:06:10,240
to write where the process is calling to

191
00:06:10,240 --> 00:06:11,600
do we have permissions to write to

192
00:06:11,600 --> 00:06:13,280
registry keys the process is reading

193
00:06:13,280 --> 00:06:14,720
from

194
00:06:14,720 --> 00:06:18,479
and then this can often be

195
00:06:18,560 --> 00:06:20,240
like a layered approach think of like an

196
00:06:20,240 --> 00:06:21,919
onion peeling back the layers right

197
00:06:21,919 --> 00:06:23,680
maybe it'll make a call to another

198
00:06:23,680 --> 00:06:24,800
process

199
00:06:24,800 --> 00:06:26,720
and then we attach to that second

200
00:06:26,720 --> 00:06:28,800
process and watch down so we could be

201
00:06:28,800 --> 00:06:30,400
going two three layers deep in the

202
00:06:30,400 --> 00:06:33,280
process tree to figure out

203
00:06:33,280 --> 00:06:34,720
which one of them is calling something

204
00:06:34,720 --> 00:06:37,039
in user land that we can enter that we

205
00:06:37,039 --> 00:06:38,639
can either inject into that we can

206
00:06:38,639 --> 00:06:39,680
replace

207
00:06:39,680 --> 00:06:41,600
so you get a you start painting a

208
00:06:41,600 --> 00:06:43,680
picture of what the application does and

209
00:06:43,680 --> 00:06:46,000
who its dependencies are and that allows

210
00:06:46,000 --> 00:06:47,520
you to be able to move forward with your

211
00:06:47,520 --> 00:06:49,680
privilege escalation

212
00:06:49,680 --> 00:06:51,440
um and if you guys have questions during

213
00:06:51,440 --> 00:06:52,560
i i

214
00:06:52,560 --> 00:06:54,160
maybe have a little bit i'm going to

215
00:06:54,160 --> 00:06:55,360
rush through this but we probably have

216
00:06:55,360 --> 00:06:56,240
time at the end but if you have

217
00:06:56,240 --> 00:06:57,360
questions during

218
00:06:57,360 --> 00:06:58,720
raise your hand lights are super bright

219
00:06:58,720 --> 00:07:00,080
so yell at me if you have a question

220
00:07:00,080 --> 00:07:02,720
yeah

221
00:07:02,720 --> 00:07:03,840
yes

222
00:07:03,840 --> 00:07:04,960
i will make the slides available

223
00:07:04,960 --> 00:07:07,280
afterward that was the question

224
00:07:07,280 --> 00:07:09,280
okay so

225
00:07:09,280 --> 00:07:11,360
once we figure out where we have the

226
00:07:11,360 --> 00:07:12,960
permissions

227
00:07:12,960 --> 00:07:14,000
then we're going to talk about the high

228
00:07:14,000 --> 00:07:15,520
level concept of proper binary

229
00:07:15,520 --> 00:07:17,440
validation

230
00:07:17,440 --> 00:07:20,400
almost nobody does this that i've seen

231
00:07:20,400 --> 00:07:22,319
some people do it but almost nobody does

232
00:07:22,319 --> 00:07:24,160
proper validation of binaries and what i

233
00:07:24,160 --> 00:07:26,800
mean by that is

234
00:07:27,199 --> 00:07:28,960
for example if i'm going to make a call

235
00:07:28,960 --> 00:07:32,880
from executable a to executable b

236
00:07:32,880 --> 00:07:35,840
do i first inspect executable b to make

237
00:07:35,840 --> 00:07:37,360
sure that it is number one signed with a

238
00:07:37,360 --> 00:07:38,960
code signing certificate number two the

239
00:07:38,960 --> 00:07:41,440
certificate is valid and for the issuer

240
00:07:41,440 --> 00:07:43,199
that i expect

241
00:07:43,199 --> 00:07:44,800
and number three

242
00:07:44,800 --> 00:07:47,120
does it have a good md5 sum right or a

243
00:07:47,120 --> 00:07:50,639
shaw won some so almost nobody does this

244
00:07:50,639 --> 00:07:52,000
so if we find a place where we can

245
00:07:52,000 --> 00:07:54,560
overwrite that executable

246
00:07:54,560 --> 00:07:55,919
almost nobody's checking to make sure

247
00:07:55,919 --> 00:07:57,360
it's the right one

248
00:07:57,360 --> 00:07:59,039
so you can just drop whatever you want

249
00:07:59,039 --> 00:08:00,800
in there intercept the call and turn

250
00:08:00,800 --> 00:08:02,080
that into a privileged escalation

251
00:08:02,080 --> 00:08:03,680
because nobody does proper validation

252
00:08:03,680 --> 00:08:05,120
and why don't they do proper validation

253
00:08:05,120 --> 00:08:06,720
it's costly

254
00:08:06,720 --> 00:08:07,840
it affects performance of the

255
00:08:07,840 --> 00:08:09,280
application and performance is king

256
00:08:09,280 --> 00:08:10,479
these days

257
00:08:10,479 --> 00:08:12,960
right nobody wants a poorly performing

258
00:08:12,960 --> 00:08:14,080
application

259
00:08:14,080 --> 00:08:15,520
nobody wants to have that slow

260
00:08:15,520 --> 00:08:17,759
application that an end user can't stand

261
00:08:17,759 --> 00:08:19,759
to use because it's so slow

262
00:08:19,759 --> 00:08:22,879
so you sacrifice your security for your

263
00:08:22,879 --> 00:08:24,319
performance

264
00:08:24,319 --> 00:08:25,840
and this is a big one if we could

265
00:08:25,840 --> 00:08:28,639
implement um certificate validation and

266
00:08:28,639 --> 00:08:30,240
and chain checking throughout the

267
00:08:30,240 --> 00:08:32,080
throughout the entire length then we

268
00:08:32,080 --> 00:08:33,279
have to start getting into reverse

269
00:08:33,279 --> 00:08:35,200
engineering to find other things but

270
00:08:35,200 --> 00:08:36,640
because almost nobody does this you can

271
00:08:36,640 --> 00:08:38,799
find these very surface level privilege

272
00:08:38,799 --> 00:08:40,958
escalations very trivially

273
00:08:40,958 --> 00:08:43,440
so electron is a great use case for this

274
00:08:43,440 --> 00:08:45,839
anybody familiar with electron

275
00:08:45,839 --> 00:08:47,920
there's some hands out there so electron

276
00:08:47,920 --> 00:08:50,000
i'm not going to dig into it super deep

277
00:08:50,000 --> 00:08:52,320
but electron is a framework to help you

278
00:08:52,320 --> 00:08:55,040
develop and deploy

279
00:08:55,040 --> 00:08:58,160
applications cross-platform

280
00:08:58,160 --> 00:09:00,080
pretty much every single electron app in

281
00:09:00,080 --> 00:09:02,640
windows has a dll hijack that is valid

282
00:09:02,640 --> 00:09:04,560
for it to this day

283
00:09:04,560 --> 00:09:06,480
and that dll hijack most of the times

284
00:09:06,480 --> 00:09:08,480
won't result in privilege escalation

285
00:09:08,480 --> 00:09:10,160
because of where it's right because of

286
00:09:10,160 --> 00:09:11,680
where it's trying to load the dlls from

287
00:09:11,680 --> 00:09:13,600
usually it's from the um the app data

288
00:09:13,600 --> 00:09:16,000
folder of the currently running user

289
00:09:16,000 --> 00:09:17,680
and so you can maybe get persistence

290
00:09:17,680 --> 00:09:18,560
there but you're not going to get a

291
00:09:18,560 --> 00:09:20,959
privileged escalation but this is just

292
00:09:20,959 --> 00:09:23,360
an industry-wide use case for

293
00:09:23,360 --> 00:09:25,839
nobody's doing things the right way

294
00:09:25,839 --> 00:09:27,600
right they're trying to load binaries

295
00:09:27,600 --> 00:09:29,440
that should belong in the windows folder

296
00:09:29,440 --> 00:09:30,640
but instead they're just saying hey

297
00:09:30,640 --> 00:09:32,800
microsoft you figure it out right i

298
00:09:32,800 --> 00:09:34,800
wanna i wanna call this thing

299
00:09:34,800 --> 00:09:36,000
and microsoft's like great i'm going to

300
00:09:36,000 --> 00:09:37,279
try it first where you are in your

301
00:09:37,279 --> 00:09:39,360
current directory then i'll go to

302
00:09:39,360 --> 00:09:41,680
windows and if you're in the current

303
00:09:41,680 --> 00:09:43,040
directory

304
00:09:43,040 --> 00:09:45,040
just drop whatever.exe that that

305
00:09:45,040 --> 00:09:47,200
electron app is looking for and it'll

306
00:09:47,200 --> 00:09:48,959
load it up and run it

307
00:09:48,959 --> 00:09:51,360
so it's these simple patterns and

308
00:09:51,360 --> 00:09:53,360
processes that nobody does that we can

309
00:09:53,360 --> 00:09:55,120
take advantage of

310
00:09:55,120 --> 00:09:56,959
so again talking about arbitrary

311
00:09:56,959 --> 00:09:58,320
execution of executables without

312
00:09:58,320 --> 00:09:59,680
verification

313
00:09:59,680 --> 00:10:01,200
so

314
00:10:01,200 --> 00:10:03,360
you can go multiple hops down don't stop

315
00:10:03,360 --> 00:10:05,920
at the first hop keep going

316
00:10:05,920 --> 00:10:08,079
right go and see okay if i call

317
00:10:08,079 --> 00:10:09,839
executable number one

318
00:10:09,839 --> 00:10:12,880
does executable number one load any dlls

319
00:10:12,880 --> 00:10:15,279
does it call any other executables so

320
00:10:15,279 --> 00:10:17,200
start hopping down the process chain to

321
00:10:17,200 --> 00:10:18,880
figure out all the different places that

322
00:10:18,880 --> 00:10:20,800
things are being called once you find

323
00:10:20,800 --> 00:10:22,560
all those different places fire up

324
00:10:22,560 --> 00:10:24,320
process monitor attach to one

325
00:10:24,320 --> 00:10:26,480
individually do normal user activity let

326
00:10:26,480 --> 00:10:28,800
it run and see what it's calling out to

327
00:10:28,800 --> 00:10:31,680
and then you can follow down the chain

328
00:10:31,680 --> 00:10:33,839
so the verification has to happen at

329
00:10:33,839 --> 00:10:35,839
every step otherwise you can interject

330
00:10:35,839 --> 00:10:37,680
yourself into the process

331
00:10:37,680 --> 00:10:39,760
it's great for us because it's super

332
00:10:39,760 --> 00:10:42,240
easy to track if you're calling external

333
00:10:42,240 --> 00:10:44,560
exes from your

334
00:10:44,560 --> 00:10:46,959
application it's super easy to find

335
00:10:46,959 --> 00:10:48,959
just filter down in process monitor and

336
00:10:48,959 --> 00:10:51,600
you'll find it in five minutes

337
00:10:51,600 --> 00:10:53,600
so this is a very contrived code sample

338
00:10:53,600 --> 00:10:56,000
this is what's out on my github

339
00:10:56,000 --> 00:10:59,600
and i'm gonna try to read it here so

340
00:10:59,600 --> 00:11:01,519
we're just looking to see if a file

341
00:11:01,519 --> 00:11:04,800
exists in a location right

342
00:11:04,800 --> 00:11:07,040
and if that file exists in a location

343
00:11:07,040 --> 00:11:08,560
just call process dot start the other

344
00:11:08,560 --> 00:11:10,480
stuff on it is for a ctf that i made so

345
00:11:10,480 --> 00:11:13,120
that's me generating flags for the ctf

346
00:11:13,120 --> 00:11:15,120
so that the the players of the ctf can

347
00:11:15,120 --> 00:11:16,560
get the flag to prove they did said

348
00:11:16,560 --> 00:11:18,640
challenge but the real the real thing is

349
00:11:18,640 --> 00:11:20,000
at the bottom right just call process

350
00:11:20,000 --> 00:11:21,200
dot start

351
00:11:21,200 --> 00:11:22,079
now

352
00:11:22,079 --> 00:11:23,360
we're not doing anything to check and

353
00:11:23,360 --> 00:11:25,360
make sure that the file in that location

354
00:11:25,360 --> 00:11:27,600
hasn't changed from what we expect

355
00:11:27,600 --> 00:11:28,880
we're not doing anything to make sure

356
00:11:28,880 --> 00:11:31,040
that it's the right file or the file

357
00:11:31,040 --> 00:11:32,480
that we want to call we're just calling

358
00:11:32,480 --> 00:11:34,720
it and this is a very common thing in

359
00:11:34,720 --> 00:11:36,800
windows applications incredibly common

360
00:11:36,800 --> 00:11:39,360
just fire up a process

361
00:11:39,360 --> 00:11:40,880
don't validate anything about just fire

362
00:11:40,880 --> 00:11:43,200
it up

363
00:11:43,200 --> 00:11:45,120
so another thing to look for arbitrary

364
00:11:45,120 --> 00:11:46,720
loads of dlls right a lot of people

365
00:11:46,720 --> 00:11:49,519
think about loading up other exes also

366
00:11:49,519 --> 00:11:52,079
dlls if you have a dependency library

367
00:11:52,079 --> 00:11:54,240
that you're loading at runtime let's say

368
00:11:54,240 --> 00:11:56,880
you're doing some runtime um inject

369
00:11:56,880 --> 00:11:58,480
excuse me some runtime injection or some

370
00:11:58,480 --> 00:12:00,000
runtime reflection

371
00:12:00,000 --> 00:12:03,200
you're loading up these dlls

372
00:12:03,200 --> 00:12:04,880
is the proper signature being validated

373
00:12:04,880 --> 00:12:06,639
most of the time no so you can put your

374
00:12:06,639 --> 00:12:08,959
own dll into that space

375
00:12:08,959 --> 00:12:11,360
hijack the call that they're looking for

376
00:12:11,360 --> 00:12:12,800
and this goes a little bit beyond

377
00:12:12,800 --> 00:12:14,160
process monitor you have to do some

378
00:12:14,160 --> 00:12:15,680
other things but

379
00:12:15,680 --> 00:12:17,600
and i'll leave that up to you guys

380
00:12:17,600 --> 00:12:20,160
but if this dll is being called then you

381
00:12:20,160 --> 00:12:22,720
can just put your own dll there

382
00:12:22,720 --> 00:12:24,320
and intercept the call and take over the

383
00:12:24,320 --> 00:12:25,760
process chain and get privilege

384
00:12:25,760 --> 00:12:28,079
escalation um and same thing goes layers

385
00:12:28,079 --> 00:12:30,160
deep right don't just stop at the first

386
00:12:30,160 --> 00:12:32,320
one profile everything all the way down

387
00:12:32,320 --> 00:12:34,399
see what's being called where

388
00:12:34,399 --> 00:12:36,000
so this again is a very contrived

389
00:12:36,000 --> 00:12:36,959
example

390
00:12:36,959 --> 00:12:40,000
and i'm using run dll32 this is purely

391
00:12:40,000 --> 00:12:42,639
for ease of use so that i can get this

392
00:12:42,639 --> 00:12:44,480
thing the ctf to run on everyone's

393
00:12:44,480 --> 00:12:45,440
machine

394
00:12:45,440 --> 00:12:47,760
but look for dynamically loading

395
00:12:47,760 --> 00:12:50,240
instances of dlls right anytime it's

396
00:12:50,240 --> 00:12:51,839
dynamically referencing or loading an

397
00:12:51,839 --> 00:12:53,360
instance of a dll

398
00:12:53,360 --> 00:12:55,279
you can if you can

399
00:12:55,279 --> 00:12:58,079
intercept or control that call

400
00:12:58,079 --> 00:12:59,360
you might be able to achieve privilege

401
00:12:59,360 --> 00:13:01,600
escalation depending on the permission

402
00:13:01,600 --> 00:13:04,480
set of the caller

403
00:13:04,480 --> 00:13:06,480
so registry keys is another thing to

404
00:13:06,480 --> 00:13:07,600
look for

405
00:13:07,600 --> 00:13:09,200
calls to read and write registry keys

406
00:13:09,200 --> 00:13:11,360
that are not well protected applications

407
00:13:11,360 --> 00:13:14,720
love to store stuff in the registry

408
00:13:14,720 --> 00:13:16,399
they love to store locations for other

409
00:13:16,399 --> 00:13:18,720
applications in the registry

410
00:13:18,720 --> 00:13:20,240
and most of the time those are not well

411
00:13:20,240 --> 00:13:22,639
protected they're not read protected or

412
00:13:22,639 --> 00:13:24,240
right protected so if you can figure out

413
00:13:24,240 --> 00:13:25,519
where an app if

414
00:13:25,519 --> 00:13:27,839
an application is loading up

415
00:13:27,839 --> 00:13:30,160
its dependencies through the registry

416
00:13:30,160 --> 00:13:31,760
then again you fall back to our friend i

417
00:13:31,760 --> 00:13:34,560
cackles to say okay it's loading up from

418
00:13:34,560 --> 00:13:36,000
this path

419
00:13:36,000 --> 00:13:38,079
what are my rights on this path

420
00:13:38,079 --> 00:13:39,519
if there's anything in that path that's

421
00:13:39,519 --> 00:13:41,120
loading other things right and here we

422
00:13:41,120 --> 00:13:43,120
go down the chain again so look it's

423
00:13:43,120 --> 00:13:44,399
loading something from the registry

424
00:13:44,399 --> 00:13:45,600
great what is it doing with what it's

425
00:13:45,600 --> 00:13:47,440
loading from the registry is that where

426
00:13:47,440 --> 00:13:48,720
it's how it's handling where it loads

427
00:13:48,720 --> 00:13:49,839
its dependencies is that how it's

428
00:13:49,839 --> 00:13:51,199
handling where it makes

429
00:13:51,199 --> 00:13:53,199
child process calls those are the kind

430
00:13:53,199 --> 00:13:55,680
of things you can look for and say okay

431
00:13:55,680 --> 00:13:57,680
great are any of these registry keys

432
00:13:57,680 --> 00:13:59,040
weekly protected

433
00:13:59,040 --> 00:14:01,760
can i write to them can i create sub

434
00:14:01,760 --> 00:14:03,120
keys

435
00:14:03,120 --> 00:14:04,800
what if i can create a sub key that the

436
00:14:04,800 --> 00:14:07,199
application might want but i don't know

437
00:14:07,199 --> 00:14:09,040
is there start creating sub keys see if

438
00:14:09,040 --> 00:14:10,639
it tries to read from them

439
00:14:10,639 --> 00:14:12,240
right so look at look at kind of the

440
00:14:12,240 --> 00:14:14,000
structure of how the registry is laid

441
00:14:14,000 --> 00:14:15,680
out for this application

442
00:14:15,680 --> 00:14:16,959
start creating sub keys if it tries to

443
00:14:16,959 --> 00:14:18,000
read from them you know you're on the

444
00:14:18,000 --> 00:14:19,199
right path

445
00:14:19,199 --> 00:14:20,959
so you you just look at the performance

446
00:14:20,959 --> 00:14:22,320
of the application what it's doing and

447
00:14:22,320 --> 00:14:23,760
you'll know

448
00:14:23,760 --> 00:14:25,279
and this is again our other contrived

449
00:14:25,279 --> 00:14:27,680
code example where we're just reading

450
00:14:27,680 --> 00:14:29,600
the path to execute from the registry

451
00:14:29,600 --> 00:14:32,000
and this is very very common this is not

452
00:14:32,000 --> 00:14:33,199
uncommon

453
00:14:33,199 --> 00:14:34,720
just read up from the registry where i'm

454
00:14:34,720 --> 00:14:36,560
supposed to execute from i'm moving

455
00:14:36,560 --> 00:14:38,320
around a lot am i still

456
00:14:38,320 --> 00:14:40,560
i'm good okay sorry i'm a hands talker

457
00:14:40,560 --> 00:14:41,839
and i move so i just want to make sure i

458
00:14:41,839 --> 00:14:44,160
was telling the camera so yeah so look

459
00:14:44,160 --> 00:14:45,920
and see okay

460
00:14:45,920 --> 00:14:48,079
again can i read can i write read is

461
00:14:48,079 --> 00:14:50,240
good because it allows us to maybe debug

462
00:14:50,240 --> 00:14:51,920
and look for other things if i can write

463
00:14:51,920 --> 00:14:54,240
to the registry then i can probably

464
00:14:54,240 --> 00:14:56,160
intercept what they're doing and i can

465
00:14:56,160 --> 00:14:57,440
probably get privilege escalation

466
00:14:57,440 --> 00:14:59,440
depending on the permission set of the

467
00:14:59,440 --> 00:15:01,920
calling process

468
00:15:01,920 --> 00:15:03,440
so registry keys that relate to the

469
00:15:03,440 --> 00:15:04,959
application

470
00:15:04,959 --> 00:15:07,199
so don't just focus on registry keys

471
00:15:07,199 --> 00:15:09,279
used solely by the application but also

472
00:15:09,279 --> 00:15:10,959
register keys that are related to the

473
00:15:10,959 --> 00:15:12,880
application

474
00:15:12,880 --> 00:15:14,480
and this could be windows service

475
00:15:14,480 --> 00:15:16,160
registry keys so i didn't even like dig

476
00:15:16,160 --> 00:15:17,920
into like looking for weekly protected

477
00:15:17,920 --> 00:15:19,680
windows services right

478
00:15:19,680 --> 00:15:21,199
that's another common thing i didn't dig

479
00:15:21,199 --> 00:15:22,399
into that but

480
00:15:22,399 --> 00:15:24,000
look at all the registry keys that

481
00:15:24,000 --> 00:15:26,959
support the service or it or executable

482
00:15:26,959 --> 00:15:30,000
and its dependencies

483
00:15:30,000 --> 00:15:31,440
because most people just expect their

484
00:15:31,440 --> 00:15:33,519
dependencies to be fine

485
00:15:33,519 --> 00:15:35,600
and the reality of it is most of the

486
00:15:35,600 --> 00:15:37,120
time you can control a lot of those

487
00:15:37,120 --> 00:15:40,120
dependencies

488
00:15:40,240 --> 00:15:41,839
so now i want to talk about hard-coded

489
00:15:41,839 --> 00:15:44,480
or weakly protected config files so a

490
00:15:44,480 --> 00:15:46,800
lot of applications use config files

491
00:15:46,800 --> 00:15:47,839
right

492
00:15:47,839 --> 00:15:49,519
so inside of those config files we can

493
00:15:49,519 --> 00:15:51,519
glean information that can help us with

494
00:15:51,519 --> 00:15:54,800
our privilege escalation um so what if

495
00:15:54,800 --> 00:15:56,079
inside of those config files there's a

496
00:15:56,079 --> 00:15:57,360
password

497
00:15:57,360 --> 00:16:00,720
password reuse is a huge thing right so

498
00:16:00,720 --> 00:16:02,079
if there's a if there's a password

499
00:16:02,079 --> 00:16:03,680
inside of there maybe i can just use the

500
00:16:03,680 --> 00:16:04,720
password

501
00:16:04,720 --> 00:16:06,160
maybe i'm done maybe i already got the

502
00:16:06,160 --> 00:16:08,320
admin password so look at these config

503
00:16:08,320 --> 00:16:09,920
files it'll also tell you more about the

504
00:16:09,920 --> 00:16:12,079
behavior of the application so inside of

505
00:16:12,079 --> 00:16:13,759
here i give a special shout out to the

506
00:16:13,759 --> 00:16:16,160
dp api is anyone familiar with the dp

507
00:16:16,160 --> 00:16:17,680
api

508
00:16:17,680 --> 00:16:19,600
so the windows dp api

509
00:16:19,600 --> 00:16:22,480
is windows is the best

510
00:16:22,480 --> 00:16:24,079
and interesting effort let's say that

511
00:16:24,079 --> 00:16:26,720
it's an interesting effort by microsoft

512
00:16:26,720 --> 00:16:28,959
to allow you to protect your secrets the

513
00:16:28,959 --> 00:16:31,120
thing is anyone on the machine with the

514
00:16:31,120 --> 00:16:34,000
same privilege set or same username as

515
00:16:34,000 --> 00:16:35,920
the one who protected the the secrets

516
00:16:35,920 --> 00:16:38,240
can also unprotect the secrets

517
00:16:38,240 --> 00:16:39,920
so if you see weekly protected secrets

518
00:16:39,920 --> 00:16:41,920
using the dp api

519
00:16:41,920 --> 00:16:44,320
you can start targeting that user who

520
00:16:44,320 --> 00:16:46,320
you know you can go and unprotect the

521
00:16:46,320 --> 00:16:47,759
secrets from

522
00:16:47,759 --> 00:16:50,160
so look for blobs of data that are

523
00:16:50,160 --> 00:16:53,040
base64 encoded in config files

524
00:16:53,040 --> 00:16:56,000
if you base64 decode them and it looks

525
00:16:56,000 --> 00:16:57,920
like a random blob of data it's likely

526
00:16:57,920 --> 00:17:01,120
protected by the windows dp api

527
00:17:01,120 --> 00:17:03,040
and so when you decode that you see this

528
00:17:03,040 --> 00:17:05,199
just random data you're like okay that's

529
00:17:05,199 --> 00:17:07,760
likely dp api data i need to try to

530
00:17:07,760 --> 00:17:10,000
unprotect that with the credentials that

531
00:17:10,000 --> 00:17:11,359
i have and if you can unprotect it with

532
00:17:11,359 --> 00:17:12,400
the credentials that you have then you

533
00:17:12,400 --> 00:17:13,839
have actionable information to move

534
00:17:13,839 --> 00:17:16,880
forward with your privilege escalation

535
00:17:16,880 --> 00:17:19,599
so look for

536
00:17:19,599 --> 00:17:21,119
the config files right and that's

537
00:17:21,119 --> 00:17:22,319
another thing process monitor will help

538
00:17:22,319 --> 00:17:24,400
you do is it'll show you files that are

539
00:17:24,400 --> 00:17:25,599
loaded so it's going to load up your

540
00:17:25,599 --> 00:17:28,240
config file at start time

541
00:17:28,240 --> 00:17:29,280
and that'll give you a wealth of

542
00:17:29,280 --> 00:17:31,440
information that you need

543
00:17:31,440 --> 00:17:33,360
so relative paths are incomplete paths

544
00:17:33,360 --> 00:17:35,039
so i talked a little bit about this but

545
00:17:35,039 --> 00:17:37,520
let's let's dig into it so

546
00:17:37,520 --> 00:17:39,360
if the application makes a call to a

547
00:17:39,360 --> 00:17:40,559
binary

548
00:17:40,559 --> 00:17:43,039
and lets windows figure out the path

549
00:17:43,039 --> 00:17:44,720
then you can hopefully inject yourself

550
00:17:44,720 --> 00:17:46,240
somewhere in that path the windows

551
00:17:46,240 --> 00:17:48,000
search path

552
00:17:48,000 --> 00:17:49,760
i don't know that it's changed in a long

553
00:17:49,760 --> 00:17:51,600
time i didn't look to see if it's

554
00:17:51,600 --> 00:17:52,960
changed i know it's been the same from

555
00:17:52,960 --> 00:17:55,200
xp all the way through 10

556
00:17:55,200 --> 00:17:57,039
that it's always going to start in the

557
00:17:57,039 --> 00:17:59,360
location of the running application so

558
00:17:59,360 --> 00:18:00,960
if we can write to the location of the

559
00:18:00,960 --> 00:18:02,720
running application

560
00:18:02,720 --> 00:18:04,720
or somewhere in the call tree that

561
00:18:04,720 --> 00:18:06,960
windows will follow then we can inject

562
00:18:06,960 --> 00:18:08,720
ourselves into the process

563
00:18:08,720 --> 00:18:09,760
so

564
00:18:09,760 --> 00:18:11,600
in bonus points if someone else has

565
00:18:11,600 --> 00:18:14,400
modified the path variable inside of

566
00:18:14,400 --> 00:18:15,679
windows

567
00:18:15,679 --> 00:18:18,000
and we can write inside of there windows

568
00:18:18,000 --> 00:18:19,280
will change its search order based on

569
00:18:19,280 --> 00:18:21,280
the path variable so if we look at the

570
00:18:21,280 --> 00:18:22,799
path variable and someone's put

571
00:18:22,799 --> 00:18:24,480
themselves in there and they're before

572
00:18:24,480 --> 00:18:27,280
the windows folder can we write to there

573
00:18:27,280 --> 00:18:28,720
can we achieve privilege escalation

574
00:18:28,720 --> 00:18:30,480
through somebody else

575
00:18:30,480 --> 00:18:32,080
who may not even be vulnerable having

576
00:18:32,080 --> 00:18:33,520
manipulated the path i've done this a

577
00:18:33,520 --> 00:18:35,280
couple times you're on a machine you

578
00:18:35,280 --> 00:18:37,360
find out the path's been modified and

579
00:18:37,360 --> 00:18:38,880
you can write to there

580
00:18:38,880 --> 00:18:40,240
nothing in there is vulnerable to

581
00:18:40,240 --> 00:18:42,160
privilege escalation but you can drop

582
00:18:42,160 --> 00:18:44,080
other binaries that other services are

583
00:18:44,080 --> 00:18:45,840
looking for into that path and they'll

584
00:18:45,840 --> 00:18:47,600
get called first

585
00:18:47,600 --> 00:18:49,039
so you can have these these

586
00:18:49,039 --> 00:18:50,400
vulnerabilities are created by other

587
00:18:50,400 --> 00:18:52,080
software packages inserting themselves

588
00:18:52,080 --> 00:18:54,080
into the path so check out the path

589
00:18:54,080 --> 00:18:55,520
because windows will always follow the

590
00:18:55,520 --> 00:18:58,879
same path when it's loading things

591
00:19:01,440 --> 00:19:03,760
so if you found something

592
00:19:03,760 --> 00:19:05,840
following this methodology then you have

593
00:19:05,840 --> 00:19:07,760
to build a working proof of concept

594
00:19:07,760 --> 00:19:08,720
because if you don't have a proof of

595
00:19:08,720 --> 00:19:09,840
concept you don't have a privilege

596
00:19:09,840 --> 00:19:12,799
escalation right theory's great but if

597
00:19:12,799 --> 00:19:13,760
you don't have a working proof of

598
00:19:13,760 --> 00:19:15,360
concept you've got nothing

599
00:19:15,360 --> 00:19:16,559
so you need to build your proof of

600
00:19:16,559 --> 00:19:18,240
concept

601
00:19:18,240 --> 00:19:20,960
that will elevate your privileges and

602
00:19:20,960 --> 00:19:23,440
restore proper application flow so

603
00:19:23,440 --> 00:19:25,360
that's the biggest thing right if we're

604
00:19:25,360 --> 00:19:27,600
going to use this privilege escalation

605
00:19:27,600 --> 00:19:29,679
in the context of we're going to say

606
00:19:29,679 --> 00:19:31,840
that we're doing this the right way

607
00:19:31,840 --> 00:19:33,440
right we're we're elevating our

608
00:19:33,440 --> 00:19:35,120
privileges as part of a penetration test

609
00:19:35,120 --> 00:19:38,080
or red team engagement that we're doing

610
00:19:38,080 --> 00:19:40,559
we need to restore the application flow

611
00:19:40,559 --> 00:19:42,240
so that we're number one not detected

612
00:19:42,240 --> 00:19:43,440
and number two successful in our

613
00:19:43,440 --> 00:19:45,679
privilege escalation so this is where a

614
00:19:45,679 --> 00:19:48,000
lot of the real heavy lifting comes in

615
00:19:48,000 --> 00:19:49,760
so in our sandbox we identified it now

616
00:19:49,760 --> 00:19:50,880
we need to craft our privilege

617
00:19:50,880 --> 00:19:53,280
escalation that elevates our elevates

618
00:19:53,280 --> 00:19:55,280
our privs and restores the flow and this

619
00:19:55,280 --> 00:19:56,880
is complex

620
00:19:56,880 --> 00:19:58,320
and a lot of the times you can't restore

621
00:19:58,320 --> 00:20:00,480
the flow so you have to be careful about

622
00:20:00,480 --> 00:20:01,679
when you choose

623
00:20:01,679 --> 00:20:03,440
to use and not to use your privileged

624
00:20:03,440 --> 00:20:05,600
escalation vectors now is the time to

625
00:20:05,600 --> 00:20:08,240
find source code if you can get it

626
00:20:08,240 --> 00:20:10,400
put your source code reading skills to

627
00:20:10,400 --> 00:20:13,039
use find that source code dig through

628
00:20:13,039 --> 00:20:15,280
see what you can fix in the path see

629
00:20:15,280 --> 00:20:16,960
what you can find in this private

630
00:20:16,960 --> 00:20:18,559
escalation path

631
00:20:18,559 --> 00:20:20,400
to help you craft a working poc that

632
00:20:20,400 --> 00:20:22,400
doesn't break the software um because

633
00:20:22,400 --> 00:20:23,840
it's important to be as stealthy as we

634
00:20:23,840 --> 00:20:26,320
can we want to remain undetected for as

635
00:20:26,320 --> 00:20:28,320
long as we can

636
00:20:28,320 --> 00:20:29,919
don't leave any artifacts and traces the

637
00:20:29,919 --> 00:20:32,159
disk is lava right don't touch disk if

638
00:20:32,159 --> 00:20:34,400
you don't have to never touch disk

639
00:20:34,400 --> 00:20:36,320
always be in memory

640
00:20:36,320 --> 00:20:38,080
if you have to touch disk cleanup after

641
00:20:38,080 --> 00:20:39,039
yourself

642
00:20:39,039 --> 00:20:40,320
and then restore the state of the

643
00:20:40,320 --> 00:20:42,320
machine back to how it was before then

644
00:20:42,320 --> 00:20:44,240
your poc

645
00:20:44,240 --> 00:20:45,760
is something that you can weaponize and

646
00:20:45,760 --> 00:20:49,480
use throughout your engagements

647
00:20:49,679 --> 00:20:51,039
and that's all i have to do and how many

648
00:20:51,039 --> 00:20:52,000
questions

649
00:20:52,000 --> 00:20:55,000
yeah

650
00:21:04,799 --> 00:21:07,919
so the best thing to do is to ask your

651
00:21:07,919 --> 00:21:09,039
vendors

652
00:21:09,039 --> 00:21:10,880
if they've had an application security

653
00:21:10,880 --> 00:21:12,960
test done and what the results of the

654
00:21:12,960 --> 00:21:15,200
application security test were

655
00:21:15,200 --> 00:21:17,440
and what their remediation plans are so

656
00:21:17,440 --> 00:21:19,360
if you have software that's deployed

657
00:21:19,360 --> 00:21:21,200
throughout your environment

658
00:21:21,200 --> 00:21:22,559
you want to go back to the vendor and

659
00:21:22,559 --> 00:21:23,679
say when's the last time you had an

660
00:21:23,679 --> 00:21:25,679
application security test

661
00:21:25,679 --> 00:21:27,840
what were the findings right how many of

662
00:21:27,840 --> 00:21:31,039
those findings have been remediated

663
00:21:31,039 --> 00:21:32,640
you can lock the path down it should be

664
00:21:32,640 --> 00:21:34,960
locked down to administrators only

665
00:21:34,960 --> 00:21:37,600
so that's a good thing but

666
00:21:37,600 --> 00:21:39,360
you hope that other software packages

667
00:21:39,360 --> 00:21:41,039
don't modify the path right a lot of the

668
00:21:41,039 --> 00:21:42,320
stuff that i'm talking about is going to

669
00:21:42,320 --> 00:21:44,559
be kind of hard to detect depending on

670
00:21:44,559 --> 00:21:46,880
how good you are at weaponizing it so

671
00:21:46,880 --> 00:21:48,640
the best thing is to everyone go to your

672
00:21:48,640 --> 00:21:50,320
vendor and say when's the last time you

673
00:21:50,320 --> 00:21:52,480
had an application security test

674
00:21:52,480 --> 00:21:54,320
what were the result results what's the

675
00:21:54,320 --> 00:21:55,520
remediation

676
00:21:55,520 --> 00:21:58,080
and then ask them you know because

677
00:21:58,080 --> 00:22:00,000
we're talking about windows software

678
00:22:00,000 --> 00:22:01,919
here that's maybe client server maybe

679
00:22:01,919 --> 00:22:03,120
just running on this machine so it's

680
00:22:03,120 --> 00:22:04,000
going to be a little bit different than

681
00:22:04,000 --> 00:22:06,480
a web app test say do your testers know

682
00:22:06,480 --> 00:22:09,039
how to do windows client server stuff

683
00:22:09,039 --> 00:22:11,039
because it's a different mindset

684
00:22:11,039 --> 00:22:12,400
it really is it's a different mindset

685
00:22:12,400 --> 00:22:13,760
than web app stuff but that's a great

686
00:22:13,760 --> 00:22:15,760
question thank you does anyone have any

687
00:22:15,760 --> 00:22:18,320
other questions

688
00:22:19,600 --> 00:22:21,470
all right thanks guys

689
00:22:21,470 --> 00:22:27,840
[Applause]

690
00:22:27,840 --> 00:22:29,918
you

