1
00:00:00,240 --> 00:00:03,360
cloud security concepts

2
00:00:03,360 --> 00:00:05,759
trying to keep it you know intermediate

3
00:00:05,759 --> 00:00:07,200
you know entry level to intermediate

4
00:00:07,200 --> 00:00:08,800
level

5
00:00:08,800 --> 00:00:10,240
so and

6
00:00:10,240 --> 00:00:11,920
show you guys some new tools i've

7
00:00:11,920 --> 00:00:14,920
written that might be of

8
00:00:14,920 --> 00:00:17,359
help right introduction

9
00:00:17,359 --> 00:00:21,119
so i am bryce coons my handle on twitter

10
00:00:21,119 --> 00:00:22,720
is tweek fox

11
00:00:22,720 --> 00:00:25,119
and um famous for wearing hawaiian

12
00:00:25,119 --> 00:00:27,439
shirts apparently that's why i have this

13
00:00:27,439 --> 00:00:28,720
picture of me wearing a hawaiian shirt

14
00:00:28,720 --> 00:00:30,800
on twitter that troy was nice enough to

15
00:00:30,800 --> 00:00:32,320
get created for me

16
00:00:32,320 --> 00:00:34,559
um

17
00:00:34,559 --> 00:00:36,800
i i used to work at homeland so i ran

18
00:00:36,800 --> 00:00:38,800
instant response and focus operations

19
00:00:38,800 --> 00:00:40,960
there which is like hunting down apts

20
00:00:40,960 --> 00:00:42,719
and getting them out of the unclassified

21
00:00:42,719 --> 00:00:43,680
network

22
00:00:43,680 --> 00:00:46,320
and then i worked up at nsa i was over

23
00:00:46,320 --> 00:00:49,280
an offensive unit responsible for

24
00:00:49,280 --> 00:00:51,440
collecting more information about apts

25
00:00:51,440 --> 00:00:52,960
so i was doing a lot of red teaming type

26
00:00:52,960 --> 00:00:54,320
stuff there

27
00:00:54,320 --> 00:00:55,920
and then

28
00:00:55,920 --> 00:00:58,320
i uh i built out a red team for adobe's

29
00:00:58,320 --> 00:01:00,879
digital experience unit here in lehigh

30
00:01:00,879 --> 00:01:02,399
and then i started doing stage two

31
00:01:02,399 --> 00:01:05,360
security full time a number of years ago

32
00:01:05,360 --> 00:01:07,119
we're we're a boutique cyber security

33
00:01:07,119 --> 00:01:10,640
shop we're just over 60 or 60 employees

34
00:01:10,640 --> 00:01:12,080
now

35
00:01:12,080 --> 00:01:13,600
and we have kind of

36
00:01:13,600 --> 00:01:15,680
a group that just focuses on delivering

37
00:01:15,680 --> 00:01:19,119
penetration testing and red teaming

38
00:01:19,119 --> 00:01:21,360
you know type services for clients you

39
00:01:21,360 --> 00:01:23,280
know specifically in cloud environments

40
00:01:23,280 --> 00:01:25,280
like aws azure gcp

41
00:01:25,280 --> 00:01:27,119
as well as for applications like web

42
00:01:27,119 --> 00:01:29,759
apps or mobile apps or like iot devices

43
00:01:29,759 --> 00:01:32,799
and things like that so

44
00:01:33,360 --> 00:01:35,920
we won a number of awards

45
00:01:35,920 --> 00:01:37,439
as well as i

46
00:01:37,439 --> 00:01:39,200
am the president over the charity that

47
00:01:39,200 --> 00:01:41,680
runs b-side salt lake city those events

48
00:01:41,680 --> 00:01:43,840
so we're hoping to get those back online

49
00:01:43,840 --> 00:01:46,799
pretty soon so

50
00:01:47,439 --> 00:01:49,280
so cloud security has a number of

51
00:01:49,280 --> 00:01:50,640
challenges and this is really where i'm

52
00:01:50,640 --> 00:01:52,799
focusing most of my time i teach a class

53
00:01:52,799 --> 00:01:55,040
at black hat where we just talk about

54
00:01:55,040 --> 00:01:56,719
red teaming in the cloud providers

55
00:01:56,719 --> 00:01:59,360
getting access and expanding access

56
00:01:59,360 --> 00:02:01,360
um and a couple of the guys at stage two

57
00:02:01,360 --> 00:02:04,240
help teach that as well

58
00:02:04,240 --> 00:02:06,000
and so really we're trying to come up

59
00:02:06,000 --> 00:02:07,520
with the ways of stage two how to like

60
00:02:07,520 --> 00:02:09,360
scale the operation so we kind of built

61
00:02:09,360 --> 00:02:11,680
this micro service platform where we

62
00:02:11,680 --> 00:02:13,040
kind of automate a lot of our red

63
00:02:13,040 --> 00:02:15,520
teaming services

64
00:02:15,520 --> 00:02:16,879
which if you're interested in talking

65
00:02:16,879 --> 00:02:18,480
more about come up and talk to me

66
00:02:18,480 --> 00:02:20,319
afterwards but

67
00:02:20,319 --> 00:02:22,720
today really we're going to be talking

68
00:02:22,720 --> 00:02:25,920
about cloud security and some pretty

69
00:02:25,920 --> 00:02:27,760
easy stuff you can do and get high

70
00:02:27,760 --> 00:02:29,680
impact results

71
00:02:29,680 --> 00:02:30,720
so

72
00:02:30,720 --> 00:02:32,160
i just want to be clear there's been a

73
00:02:32,160 --> 00:02:34,800
lot of research in this area in the past

74
00:02:34,800 --> 00:02:36,640
so i tried to list some of that on the

75
00:02:36,640 --> 00:02:38,480
right side of this slide

76
00:02:38,480 --> 00:02:40,480
and then on the left side is kind of the

77
00:02:40,480 --> 00:02:42,959
new contributions that i'm making as

78
00:02:42,959 --> 00:02:44,239
part of this talk

79
00:02:44,239 --> 00:02:46,080
namely i've written some scripts and

80
00:02:46,080 --> 00:02:47,840
i've pushed them to

81
00:02:47,840 --> 00:02:49,040
github

82
00:02:49,040 --> 00:02:50,480
so you're welcome to check those out and

83
00:02:50,480 --> 00:02:52,160
i'll be talking more about those as i go

84
00:02:52,160 --> 00:02:55,040
through the talk today

85
00:02:56,879 --> 00:02:58,879
so i just i know you know this is pretty

86
00:02:58,879 --> 00:03:00,480
basic stuff but i just want to make sure

87
00:03:00,480 --> 00:03:02,800
we're all on the same page right so when

88
00:03:02,800 --> 00:03:03,599
you

89
00:03:03,599 --> 00:03:04,879
use

90
00:03:04,879 --> 00:03:08,000
aws you're using on demand services and

91
00:03:08,000 --> 00:03:09,680
one of the main services that people use

92
00:03:09,680 --> 00:03:12,400
there is ec2 right elastic compute and

93
00:03:12,400 --> 00:03:13,920
this is just basically allows you to

94
00:03:13,920 --> 00:03:15,280
serve

95
00:03:15,280 --> 00:03:17,440
stand up virtual servers as a service or

96
00:03:17,440 --> 00:03:19,200
like vms as a service

97
00:03:19,200 --> 00:03:22,080
inside of amazon's cloud

98
00:03:22,080 --> 00:03:24,000
so those vms they need a way to store

99
00:03:24,000 --> 00:03:27,200
data so largely the vms store data using

100
00:03:27,200 --> 00:03:28,879
a technology called elastic block

101
00:03:28,879 --> 00:03:30,799
storage or ebs

102
00:03:30,799 --> 00:03:32,480
and it's really just a storage service

103
00:03:32,480 --> 00:03:34,720
that's designed to create disks kind of

104
00:03:34,720 --> 00:03:36,959
like if you're acquainted with like vmdk

105
00:03:36,959 --> 00:03:39,920
files and vmware um it's kind of

106
00:03:39,920 --> 00:03:42,239
equivalent to that but meant for aws is

107
00:03:42,239 --> 00:03:46,360
ec2 vm technology

108
00:03:46,799 --> 00:03:49,680
and um

109
00:03:49,840 --> 00:03:51,760
so you have these evs volumes and then

110
00:03:51,760 --> 00:03:53,439
you'll attach those to the to the

111
00:03:53,439 --> 00:03:55,519
instances and that's kind of where the

112
00:03:55,519 --> 00:03:57,040
operating system and data is going to be

113
00:03:57,040 --> 00:03:59,920
stored persistently

114
00:03:59,920 --> 00:04:01,680
so they have this feature in the

115
00:04:01,680 --> 00:04:03,760
platform where you can create a snapshot

116
00:04:03,760 --> 00:04:05,680
so when you have a disk anything that

117
00:04:05,680 --> 00:04:07,360
gets written to the hard disk you can

118
00:04:07,360 --> 00:04:08,959
create a point in time copy of that and

119
00:04:08,959 --> 00:04:13,159
that's called an ebs snapshot

120
00:04:14,080 --> 00:04:16,079
and they have a feature there where you

121
00:04:16,079 --> 00:04:18,639
can create incremental backups so

122
00:04:18,639 --> 00:04:19,839
you can figure out what was saved in the

123
00:04:19,839 --> 00:04:21,279
last snapshot and just save the

124
00:04:21,279 --> 00:04:23,120
differences between the two

125
00:04:23,120 --> 00:04:24,639
to save you space and make the

126
00:04:24,639 --> 00:04:28,840
snapshotting process more efficient

127
00:04:30,639 --> 00:04:32,240
and then they have features where you

128
00:04:32,240 --> 00:04:34,560
can share those snapshots

129
00:04:34,560 --> 00:04:36,720
with other aws accounts

130
00:04:36,720 --> 00:04:39,520
and and they do that by you reference

131
00:04:39,520 --> 00:04:41,759
every aws account has its own unique

132
00:04:41,759 --> 00:04:43,919
account id number so you can reference

133
00:04:43,919 --> 00:04:45,840
another account id number

134
00:04:45,840 --> 00:04:48,160
or you can just share it globally

135
00:04:48,160 --> 00:04:50,000
and if you share it globally that's

136
00:04:50,000 --> 00:04:50,960
that's what i'm going to be talking

137
00:04:50,960 --> 00:04:52,240
about next

138
00:04:52,240 --> 00:04:53,040
but

139
00:04:53,040 --> 00:04:55,360
yeah you can specify an account id or

140
00:04:55,360 --> 00:04:57,360
shared goalboy so here's what it looks

141
00:04:57,360 --> 00:04:59,120
like when you're inside the console if

142
00:04:59,120 --> 00:05:01,360
you have an ebs snapshot

143
00:05:01,360 --> 00:05:03,680
by default they're set to private and

144
00:05:03,680 --> 00:05:04,880
but there's just a radio button there

145
00:05:04,880 --> 00:05:06,400
they can slip to

146
00:05:06,400 --> 00:05:08,800
you can set it to public or you can set

147
00:05:08,800 --> 00:05:11,039
to private but then specify another aws

148
00:05:11,039 --> 00:05:12,240
account number if you just want to share

149
00:05:12,240 --> 00:05:15,120
it with a limited number of accounts

150
00:05:15,120 --> 00:05:18,240
so if you flip it over to public

151
00:05:18,240 --> 00:05:20,720
that means basically anybody in any aws

152
00:05:20,720 --> 00:05:24,880
account can pull a copy of that snapshot

153
00:05:24,880 --> 00:05:27,680
snapshots are region constrained so

154
00:05:27,680 --> 00:05:30,400
what's a region in aws that basically

155
00:05:30,400 --> 00:05:33,039
that's like a logical area usually

156
00:05:33,039 --> 00:05:35,440
consists of a few data centers that are

157
00:05:35,440 --> 00:05:37,600
kind of linked together on like a you

158
00:05:37,600 --> 00:05:40,160
know like a metropolitan network like

159
00:05:40,160 --> 00:05:42,160
geographically pretty close but from

160
00:05:42,160 --> 00:05:43,759
your standpoint you kind of pick a

161
00:05:43,759 --> 00:05:45,440
region like you pick

162
00:05:45,440 --> 00:05:48,720
um northern virginia or you pick

163
00:05:48,720 --> 00:05:51,360
oregon right and they have a data center

164
00:05:51,360 --> 00:05:53,360
what looks like one data center to you

165
00:05:53,360 --> 00:05:55,600
as a user

166
00:05:55,600 --> 00:05:57,520
and when you share ebs snapshots

167
00:05:57,520 --> 00:05:59,120
publicly

168
00:05:59,120 --> 00:06:01,600
that you can only share them unencrypted

169
00:06:01,600 --> 00:06:02,880
so there's no encryption that could

170
00:06:02,880 --> 00:06:05,520
protect you once you're sharing an ebs

171
00:06:05,520 --> 00:06:08,639
snapshot publicly

172
00:06:11,199 --> 00:06:13,600
okay so an account id

173
00:06:13,600 --> 00:06:15,039
if you caught my talk class here i

174
00:06:15,039 --> 00:06:16,800
talked a little bit about this and i'll

175
00:06:16,800 --> 00:06:18,479
just kind of give you the tl dr on that

176
00:06:18,479 --> 00:06:20,240
but basically when you register for an

177
00:06:20,240 --> 00:06:21,759
aws account you're going to get this

178
00:06:21,759 --> 00:06:23,840
12-digit number it's going to be unique

179
00:06:23,840 --> 00:06:25,840
for your aws account

180
00:06:25,840 --> 00:06:28,800
it's semi-sensitive like there's really

181
00:06:28,800 --> 00:06:30,400
no way for you to look up what somebody

182
00:06:30,400 --> 00:06:33,680
else's account id number is

183
00:06:33,680 --> 00:06:35,840
so it's kind of private but it's it's

184
00:06:35,840 --> 00:06:38,800
not it's not super private

185
00:06:38,800 --> 00:06:40,479
um so

186
00:06:40,479 --> 00:06:43,520
you can get account id numbers like for

187
00:06:43,520 --> 00:06:44,639
example let's say you find a

188
00:06:44,639 --> 00:06:46,960
vulnerability in an application running

189
00:06:46,960 --> 00:06:48,400
inside a lambda function

190
00:06:48,400 --> 00:06:49,919
there's like a certain directory you can

191
00:06:49,919 --> 00:06:52,160
query there to pull out the aws account

192
00:06:52,160 --> 00:06:55,199
id number that's being used you can also

193
00:06:55,199 --> 00:06:57,680
grab account and you numbers from

194
00:06:57,680 --> 00:06:58,800
another

195
00:06:58,800 --> 00:07:00,080
from some other techniques we'll talk

196
00:07:00,080 --> 00:07:01,520
about but

197
00:07:01,520 --> 00:07:03,520
once you have an account id number of a

198
00:07:03,520 --> 00:07:06,080
target of a targeted organization's aws

199
00:07:06,080 --> 00:07:07,199
account

200
00:07:07,199 --> 00:07:09,120
you can kind of guess role names inside

201
00:07:09,120 --> 00:07:10,800
of aem and you can see based on the

202
00:07:10,800 --> 00:07:13,919
responses whether those real names exist

203
00:07:13,919 --> 00:07:15,599
so you know there's common role names

204
00:07:15,599 --> 00:07:17,759
for services like octa and datadog and

205
00:07:17,759 --> 00:07:21,360
cloud split and all that so

206
00:07:22,240 --> 00:07:24,800
um so ways you can get an account id is

207
00:07:24,800 --> 00:07:26,240
from one of the ways is from these

208
00:07:26,240 --> 00:07:27,919
public resources so when you share out

209
00:07:27,919 --> 00:07:30,479
your ebs snapshot publicly

210
00:07:30,479 --> 00:07:32,240
that will also include your account id

211
00:07:32,240 --> 00:07:34,160
number associated with it

212
00:07:34,160 --> 00:07:35,520
so that's another way that that account

213
00:07:35,520 --> 00:07:37,680
id number could be disclosed

214
00:07:37,680 --> 00:07:40,160
in and of itself it's not horrible but

215
00:07:40,160 --> 00:07:41,759
if you had a role and the role name was

216
00:07:41,759 --> 00:07:43,199
guessable

217
00:07:43,199 --> 00:07:45,599
there's a possibility that under certain

218
00:07:45,599 --> 00:07:48,000
contexts there could an attacker gain

219
00:07:48,000 --> 00:07:50,080
access into your aws account but it's

220
00:07:50,080 --> 00:07:53,360
kind of a rare edge case

221
00:07:53,360 --> 00:07:55,039
another way is just by putting the

222
00:07:55,039 --> 00:07:57,599
account id number and this url if you

223
00:07:57,599 --> 00:07:59,520
get back at 404 then you know that

224
00:07:59,520 --> 00:08:02,080
account id number doesn't exist if you

225
00:08:02,080 --> 00:08:04,080
put it in and you get a 302 error back

226
00:08:04,080 --> 00:08:06,720
on the http get request then you know

227
00:08:06,720 --> 00:08:10,479
the account id number does exist so

228
00:08:11,680 --> 00:08:12,800
so

229
00:08:12,800 --> 00:08:15,599
last year i showed you how you could

230
00:08:15,599 --> 00:08:18,000
build a sam application and also i did a

231
00:08:18,000 --> 00:08:21,520
workshop on this yesterday but basically

232
00:08:21,520 --> 00:08:23,840
aws has this serverless application

233
00:08:23,840 --> 00:08:26,240
model and it's a way that you can define

234
00:08:26,240 --> 00:08:29,199
in a small template

235
00:08:29,199 --> 00:08:31,039
a serverless application and what it

236
00:08:31,039 --> 00:08:32,399
really is going to do is it's going to

237
00:08:32,399 --> 00:08:34,958
take that

238
00:08:34,958 --> 00:08:36,719
template and it's going to expand it

239
00:08:36,719 --> 00:08:38,958
into a full cloud formation template

240
00:08:38,958 --> 00:08:40,479
that's going to be much larger

241
00:08:40,479 --> 00:08:41,679
and then it's going to push that off to

242
00:08:41,679 --> 00:08:43,519
the cloud formation service

243
00:08:43,519 --> 00:08:44,480
that

244
00:08:44,480 --> 00:08:46,080
cloudformation service is responsible

245
00:08:46,080 --> 00:08:47,839
for basically doing infrastructure as

246
00:08:47,839 --> 00:08:48,959
code or

247
00:08:48,959 --> 00:08:50,399
it takes whatever you define in that

248
00:08:50,399 --> 00:08:52,480
yaml file and deploys and creates that

249
00:08:52,480 --> 00:08:55,360
infrastructure in aws so so sam helps us

250
00:08:55,360 --> 00:08:58,080
do that more easily

251
00:08:58,080 --> 00:08:59,600
and i kind of create these inside the

252
00:08:59,600 --> 00:09:02,240
cloud9 ide which is a browser-based ide

253
00:09:02,240 --> 00:09:04,640
inside the aws ecosystem that's pretty

254
00:09:04,640 --> 00:09:06,959
slick

255
00:09:07,600 --> 00:09:09,680
so we can create an a we can define and

256
00:09:09,680 --> 00:09:12,000
sam an api gateway

257
00:09:12,000 --> 00:09:13,920
and then from there the api gateway can

258
00:09:13,920 --> 00:09:17,440
send data to a lambda function

259
00:09:17,440 --> 00:09:20,080
and data can kind of chain through from

260
00:09:20,080 --> 00:09:22,320
the api gateway to the lambda function

261
00:09:22,320 --> 00:09:23,920
the lambda function can process it and

262
00:09:23,920 --> 00:09:27,680
send back the data to the api gateway

263
00:09:27,680 --> 00:09:29,680
okay so last year at sync con i kind of

264
00:09:29,680 --> 00:09:31,680
showed how we could build a basic sam

265
00:09:31,680 --> 00:09:32,720
app

266
00:09:32,720 --> 00:09:34,800
and that sam app had one api gateway

267
00:09:34,800 --> 00:09:36,160
which would send data to a lambda

268
00:09:36,160 --> 00:09:38,000
function and what that lambda function

269
00:09:38,000 --> 00:09:39,440
would do is it would try and hit the

270
00:09:39,440 --> 00:09:41,600
gateway

271
00:09:41,600 --> 00:09:44,640
this gateway here

272
00:09:44,880 --> 00:09:46,640
and it would look and it would create a

273
00:09:46,640 --> 00:09:48,560
random id number and it would hit the

274
00:09:48,560 --> 00:09:49,519
gateway and it would look at the

275
00:09:49,519 --> 00:09:51,680
response and if it got a 302 it'd write

276
00:09:51,680 --> 00:09:53,839
it off to an s3 bucket

277
00:09:53,839 --> 00:09:55,760
and then it would just keep doing that

278
00:09:55,760 --> 00:09:58,640
repeatedly so in this way i was kind of

279
00:09:58,640 --> 00:10:00,959
using aws's lambda service to kind of

280
00:10:00,959 --> 00:10:05,040
enumerate valid account id numbers

281
00:10:05,040 --> 00:10:07,040
so there's the video from it last year

282
00:10:07,040 --> 00:10:10,319
which goes into more depth

283
00:10:10,560 --> 00:10:12,800
okay but an easier way to get account id

284
00:10:12,800 --> 00:10:14,880
numbers right is obviously like that's

285
00:10:14,880 --> 00:10:16,640
included with data that's being shared

286
00:10:16,640 --> 00:10:18,560
as part of this ebs snapshot sure

287
00:10:18,560 --> 00:10:20,000
service so

288
00:10:20,000 --> 00:10:21,920
so if you have an instance and it has a

289
00:10:21,920 --> 00:10:23,360
volume attached to it and then you

290
00:10:23,360 --> 00:10:24,800
create a snapshot of that and then you

291
00:10:24,800 --> 00:10:26,800
share that publicly the account id

292
00:10:26,800 --> 00:10:28,720
number that did that is going to be also

293
00:10:28,720 --> 00:10:30,480
shared publicly

294
00:10:30,480 --> 00:10:32,399
so i just wrote a quick python script

295
00:10:32,399 --> 00:10:34,800
that uses the bottom

296
00:10:34,800 --> 00:10:38,959
3 sdk which is like aws's python sdk for

297
00:10:38,959 --> 00:10:41,200
interacting with services

298
00:10:41,200 --> 00:10:43,519
and what that is going to do is it's

299
00:10:43,519 --> 00:10:44,959
going to connect to aws it's going to

300
00:10:44,959 --> 00:10:46,880
get a list of all the current regions

301
00:10:46,880 --> 00:10:48,000
and then it's going to go into every

302
00:10:48,000 --> 00:10:49,440
region and it's going to pull out

303
00:10:49,440 --> 00:10:51,920
certain data about ebs snapshots that

304
00:10:51,920 --> 00:10:53,760
are that are shared publicly in that

305
00:10:53,760 --> 00:10:55,839
region and kind of create a list of it

306
00:10:55,839 --> 00:10:56,959
in that list it's going to have the

307
00:10:56,959 --> 00:10:59,600
snapshot id as well as the account id

308
00:10:59,600 --> 00:11:03,680
number associated with that ebs snapshot

309
00:11:03,680 --> 00:11:05,200
so here you can kind of see that the

310
00:11:05,200 --> 00:11:08,000
first item in the list is the account id

311
00:11:08,000 --> 00:11:09,440
number and then the second one is the

312
00:11:09,440 --> 00:11:11,440
snapshot id

313
00:11:11,440 --> 00:11:12,640
number

314
00:11:12,640 --> 00:11:14,399
and then it's going to kind of generate

315
00:11:14,399 --> 00:11:16,480
a file per region because it's going to

316
00:11:16,480 --> 00:11:18,240
iterate through each region that is

317
00:11:18,240 --> 00:11:21,279
available in aws

318
00:11:22,720 --> 00:11:24,880
and there's the script it's up on github

319
00:11:24,880 --> 00:11:25,760
so

320
00:11:25,760 --> 00:11:28,880
that might be of help okay but there's a

321
00:11:28,880 --> 00:11:30,079
little bit more data that can be

322
00:11:30,079 --> 00:11:32,480
extracted from the metadata associated

323
00:11:32,480 --> 00:11:34,240
with a snapshot so when a snapshot's

324
00:11:34,240 --> 00:11:35,839
created there's some metadata created

325
00:11:35,839 --> 00:11:36,800
with it

326
00:11:36,800 --> 00:11:38,000
there's not a ton of data there but

327
00:11:38,000 --> 00:11:40,959
there is some that might be of use

328
00:11:40,959 --> 00:11:41,760
so

329
00:11:41,760 --> 00:11:44,320
i wrote another script and it dumps all

330
00:11:44,320 --> 00:11:46,320
the metadata into json format rather

331
00:11:46,320 --> 00:11:48,160
than kind of that list format

332
00:11:48,160 --> 00:11:49,760
and that's also up on the github page

333
00:11:49,760 --> 00:11:51,120
right now

334
00:11:51,120 --> 00:11:52,399
it's going to do something similar like

335
00:11:52,399 --> 00:11:54,000
create a file per region that's going to

336
00:11:54,000 --> 00:11:55,600
be a json file

337
00:11:55,600 --> 00:11:56,959
and then you can kind of search through

338
00:11:56,959 --> 00:11:59,040
those files that have the metadata for

339
00:11:59,040 --> 00:12:01,440
things that might be of interest like

340
00:12:01,440 --> 00:12:03,360
you can see in

341
00:12:03,360 --> 00:12:05,279
the next screenshot

342
00:12:05,279 --> 00:12:07,440
i just grabbed for the word private and

343
00:12:07,440 --> 00:12:08,560
you can kind of see some of the

344
00:12:08,560 --> 00:12:10,560
snapshots come back and they reference

345
00:12:10,560 --> 00:12:12,880
being created from a private directory

346
00:12:12,880 --> 00:12:13,680
so

347
00:12:13,680 --> 00:12:15,760
so there is some more interesting data

348
00:12:15,760 --> 00:12:18,720
here if you do this on your own

349
00:12:18,720 --> 00:12:20,399
i just put something pretty benign here

350
00:12:20,399 --> 00:12:23,120
in the screenshot

351
00:12:23,120 --> 00:12:26,240
uh but i'll leave that up to you guys so

352
00:12:26,240 --> 00:12:27,760
um

353
00:12:27,760 --> 00:12:29,279
okay

354
00:12:29,279 --> 00:12:30,639
and once again

355
00:12:30,639 --> 00:12:32,880
by design none of the data in this in

356
00:12:32,880 --> 00:12:35,360
the ebs snapshots are encrypted right so

357
00:12:35,360 --> 00:12:36,480
there's nothing stopping you from

358
00:12:36,480 --> 00:12:39,040
pulling the data okay if you want to get

359
00:12:39,040 --> 00:12:41,040
a little bit deeper with the mining of

360
00:12:41,040 --> 00:12:42,639
the data because right now we're just

361
00:12:42,639 --> 00:12:43,600
talking about searching through the

362
00:12:43,600 --> 00:12:46,160
metadata and the account ids

363
00:12:46,160 --> 00:12:48,560
there was a talk two years ago at defcon

364
00:12:48,560 --> 00:12:50,480
that are referenced in this slide

365
00:12:50,480 --> 00:12:52,240
and he created this tool called duffel

366
00:12:52,240 --> 00:12:53,279
bag

367
00:12:53,279 --> 00:12:54,560
and

368
00:12:54,560 --> 00:12:57,920
it creates an elastic bean application

369
00:12:57,920 --> 00:13:00,320
which attempts to mine the actual data

370
00:13:00,320 --> 00:13:02,000
inside the snapshots

371
00:13:02,000 --> 00:13:02,959
for

372
00:13:02,959 --> 00:13:04,839
um

373
00:13:04,839 --> 00:13:08,000
for like private keys or

374
00:13:08,000 --> 00:13:10,160
other secrets things like that

375
00:13:10,160 --> 00:13:11,040
um

376
00:13:11,040 --> 00:13:13,360
so transparently i got the application

377
00:13:13,360 --> 00:13:16,880
to compile after some modifications

378
00:13:16,880 --> 00:13:19,200
and i deployed it but i didn't really

379
00:13:19,200 --> 00:13:21,120
have much luck finding anything using

380
00:13:21,120 --> 00:13:23,839
his code and with that being said

381
00:13:23,839 --> 00:13:25,279
it probably you know it's two years out

382
00:13:25,279 --> 00:13:26,639
of date now so it probably just needs

383
00:13:26,639 --> 00:13:30,000
some more modifications

384
00:13:30,399 --> 00:13:32,480
once you find an ebs snapshot that

385
00:13:32,480 --> 00:13:34,320
you're really interested in there's a

386
00:13:34,320 --> 00:13:36,240
cool feature in aws that i want to make

387
00:13:36,240 --> 00:13:37,600
you guys aware of

388
00:13:37,600 --> 00:13:40,079
where you can download the ebs snapshot

389
00:13:40,079 --> 00:13:41,680
contents directly

390
00:13:41,680 --> 00:13:42,560
so

391
00:13:42,560 --> 00:13:43,920
normally

392
00:13:43,920 --> 00:13:46,160
let's say you find a snapshot

393
00:13:46,160 --> 00:13:48,800
and it's interesting right you can pull

394
00:13:48,800 --> 00:13:50,880
that into your aws account then you can

395
00:13:50,880 --> 00:13:53,120
create a volume from it and then you can

396
00:13:53,120 --> 00:13:54,880
create an ec2 instance and then you can

397
00:13:54,880 --> 00:13:57,040
mount that volume that you got created

398
00:13:57,040 --> 00:13:58,399
from the snapshot

399
00:13:58,399 --> 00:14:00,000
and then if you know the like the file

400
00:14:00,000 --> 00:14:04,160
type like this is ntfs or this is exx3

401
00:14:04,160 --> 00:14:06,480
or etx 3 or whatever

402
00:14:06,480 --> 00:14:07,680
you can kind of mount it and start

403
00:14:07,680 --> 00:14:10,000
browsing the files right

404
00:14:10,000 --> 00:14:12,399
but a slicker way to do that in my

405
00:14:12,399 --> 00:14:14,959
opinion is

406
00:14:14,959 --> 00:14:16,320
so remember how i talked about

407
00:14:16,320 --> 00:14:19,040
originally that you could take snapshots

408
00:14:19,040 --> 00:14:20,160
but then you could also take like an

409
00:14:20,160 --> 00:14:22,160
incremental snapshot

410
00:14:22,160 --> 00:14:23,680
well it became

411
00:14:23,680 --> 00:14:25,519
to the point where people didn't want to

412
00:14:25,519 --> 00:14:27,440
download the entire snapshot image

413
00:14:27,440 --> 00:14:28,880
because those are getting really large

414
00:14:28,880 --> 00:14:29,600
so

415
00:14:29,600 --> 00:14:31,839
so basically aws came up with these

416
00:14:31,839 --> 00:14:35,199
direct download apis for ebs snapshots

417
00:14:35,199 --> 00:14:37,440
where you could actually specify offsets

418
00:14:37,440 --> 00:14:39,279
inside of the snapshots or portions of

419
00:14:39,279 --> 00:14:41,040
the snapshots and you could just

420
00:14:41,040 --> 00:14:43,440
download those portions directly into

421
00:14:43,440 --> 00:14:45,360
kind of like a dd type image of the

422
00:14:45,360 --> 00:14:48,880
snapshot and aws labs has a tool to do

423
00:14:48,880 --> 00:14:51,120
this called cold snap

424
00:14:51,120 --> 00:14:52,720
i didn't have a lot of success with the

425
00:14:52,720 --> 00:14:56,800
tool albeit it should work

426
00:14:56,800 --> 00:14:58,959
i just i had issues getting it to work

427
00:14:58,959 --> 00:15:00,480
personally so

428
00:15:00,480 --> 00:15:03,279
um but it it supposedly will download an

429
00:15:03,279 --> 00:15:05,680
image of the snapshots so so because i

430
00:15:05,680 --> 00:15:07,199
didn't really have a lot of luck with

431
00:15:07,199 --> 00:15:09,680
with the aws provided tool i wrote my

432
00:15:09,680 --> 00:15:11,519
own tool to do that which

433
00:15:11,519 --> 00:15:13,680
i pushed up to the github repo

434
00:15:13,680 --> 00:15:15,120
and this is going to show you how you

435
00:15:15,120 --> 00:15:17,600
can just use the botto3

436
00:15:17,600 --> 00:15:21,519
python sdks to download the raw contents

437
00:15:21,519 --> 00:15:24,160
into a dd image file which then you can

438
00:15:24,160 --> 00:15:27,920
mount using standard tools in linux

439
00:15:27,920 --> 00:15:30,160
so you can see here

440
00:15:30,160 --> 00:15:31,680
you run the script kind of with those

441
00:15:31,680 --> 00:15:33,839
parameters you specify the right region

442
00:15:33,839 --> 00:15:35,519
because remember snapshots are region

443
00:15:35,519 --> 00:15:38,240
locked and then the snapshot id

444
00:15:38,240 --> 00:15:39,279
and

445
00:15:39,279 --> 00:15:40,959
then when it's downloading you'll see a

446
00:15:40,959 --> 00:15:43,279
temp file when that completes the script

447
00:15:43,279 --> 00:15:46,000
just flips that over to a done file

448
00:15:46,000 --> 00:15:47,199
and then you can mount that using

449
00:15:47,199 --> 00:15:50,319
standard linux tools

450
00:15:51,519 --> 00:15:53,680
okay so i pushed that up to the repo so

451
00:15:53,680 --> 00:15:56,639
that's available now too

452
00:15:56,639 --> 00:15:58,160
okay cool

453
00:15:58,160 --> 00:16:00,560
all right

454
00:16:00,959 --> 00:16:02,639
so there's a lot of other services where

455
00:16:02,639 --> 00:16:04,320
you can do something really similar so i

456
00:16:04,320 --> 00:16:06,720
just want to talk about them briefly

457
00:16:06,720 --> 00:16:07,759
so on

458
00:16:07,759 --> 00:16:10,880
amis what is an ami that's in it that's

459
00:16:10,880 --> 00:16:12,560
like an image of a

460
00:16:12,560 --> 00:16:15,440
instance so before with an ebs snapshot

461
00:16:15,440 --> 00:16:17,759
that's kind of an image of just the disk

462
00:16:17,759 --> 00:16:20,160
the hard disk where an ami is is an

463
00:16:20,160 --> 00:16:21,680
image of all the information relating to

464
00:16:21,680 --> 00:16:23,680
the vm

465
00:16:23,680 --> 00:16:25,920
so it's more incumbent you can also

466
00:16:25,920 --> 00:16:29,120
share amis publicly you can see here in

467
00:16:29,120 --> 00:16:30,560
the console

468
00:16:30,560 --> 00:16:32,320
if you go to amis you can see the public

469
00:16:32,320 --> 00:16:34,079
images remember they're locked in that

470
00:16:34,079 --> 00:16:35,759
region so you need to browse each region

471
00:16:35,759 --> 00:16:37,040
to kind of get a list of what's

472
00:16:37,040 --> 00:16:39,440
available

473
00:16:39,440 --> 00:16:40,720
and this is what it kind of looks like

474
00:16:40,720 --> 00:16:42,720
when you're in the aws console so you

475
00:16:42,720 --> 00:16:44,959
can see other people's amis that they've

476
00:16:44,959 --> 00:16:46,880
shared out and you could take a similar

477
00:16:46,880 --> 00:16:48,880
approach to kind of cloning the amis

478
00:16:48,880 --> 00:16:51,440
standing up instances mounting the disk

479
00:16:51,440 --> 00:16:52,720
and

480
00:16:52,720 --> 00:16:56,320
ripping out private contents of those so

481
00:16:56,320 --> 00:16:58,240
so that's pretty similar

482
00:16:58,240 --> 00:17:01,360
our rds also has a snapshotting type

483
00:17:01,360 --> 00:17:03,600
feature rds is the relational database

484
00:17:03,600 --> 00:17:05,679
service in in aws

485
00:17:05,679 --> 00:17:06,959
um

486
00:17:06,959 --> 00:17:08,799
you can create snapshots of your rds

487
00:17:08,799 --> 00:17:10,240
databases

488
00:17:10,240 --> 00:17:11,919
and that's very similar to those ebs

489
00:17:11,919 --> 00:17:14,160
snapshots

490
00:17:14,160 --> 00:17:14,959
so

491
00:17:14,959 --> 00:17:18,000
those also can be made public across

492
00:17:18,000 --> 00:17:19,760
like globally across all the aws

493
00:17:19,760 --> 00:17:20,799
accounts

494
00:17:20,799 --> 00:17:22,559
so then you can pull those into your aws

495
00:17:22,559 --> 00:17:25,520
account and start analyzing them

496
00:17:25,520 --> 00:17:26,880
so here's kind of a list of the ones

497
00:17:26,880 --> 00:17:30,880
that are shared in the ireland region

498
00:17:30,880 --> 00:17:33,840
at least some of them

499
00:17:34,400 --> 00:17:36,960
okay and then scott

500
00:17:36,960 --> 00:17:39,360
has a great list up on his github repo

501
00:17:39,360 --> 00:17:41,760
of other services where where resources

502
00:17:41,760 --> 00:17:44,559
can be shared publicly

503
00:17:44,559 --> 00:17:46,000
so i have a reference to that in this

504
00:17:46,000 --> 00:17:47,440
slide

505
00:17:47,440 --> 00:17:50,480
and um so there's definitely like i've

506
00:17:50,480 --> 00:17:52,000
definitely seen been on engagements

507
00:17:52,000 --> 00:17:53,600
where we've done audits of aws

508
00:17:53,600 --> 00:17:56,960
environments and seen um s and s queues

509
00:17:56,960 --> 00:17:59,280
and sqs queues where if you have the

510
00:17:59,280 --> 00:18:01,039
right information they are completely

511
00:18:01,039 --> 00:18:04,160
public right to read or publish

512
00:18:04,160 --> 00:18:07,360
messages into the queues

513
00:18:09,520 --> 00:18:10,799
okay cool

514
00:18:10,799 --> 00:18:12,080
all right

515
00:18:12,080 --> 00:18:13,039
so

516
00:18:13,039 --> 00:18:14,559
um

517
00:18:14,559 --> 00:18:16,640
the technique for mining each of these

518
00:18:16,640 --> 00:18:18,080
you'd have to research each service and

519
00:18:18,080 --> 00:18:19,280
then figure out how to kind of clone the

520
00:18:19,280 --> 00:18:21,200
data into your aws account and then mine

521
00:18:21,200 --> 00:18:22,480
through it so

522
00:18:22,480 --> 00:18:24,080
so a lot more work here to be done if

523
00:18:24,080 --> 00:18:26,080
you wanted to kind of do something more

524
00:18:26,080 --> 00:18:29,080
comprehensive

525
00:18:29,919 --> 00:18:32,720
all right so that i don't want to like

526
00:18:32,720 --> 00:18:34,559
um

527
00:18:34,559 --> 00:18:36,000
you know

528
00:18:36,000 --> 00:18:38,000
i don't want to go too overboard on that

529
00:18:38,000 --> 00:18:39,120
so i just wanted to kind of make you

530
00:18:39,120 --> 00:18:41,440
guys aware of that and

531
00:18:41,440 --> 00:18:43,600
and talk about the general techniques an

532
00:18:43,600 --> 00:18:46,160
attacker would use to kind of get access

533
00:18:46,160 --> 00:18:48,080
initial access into other people's aws

534
00:18:48,080 --> 00:18:50,480
accounts

535
00:18:50,480 --> 00:18:52,000
one thing i just want to make you guys

536
00:18:52,000 --> 00:18:53,919
aware of that you know we found pretty

537
00:18:53,919 --> 00:18:56,320
useful at stage two security on our you

538
00:18:56,320 --> 00:18:58,640
know deeper red team engagements is

539
00:18:58,640 --> 00:19:00,400
leveraging kind of the cloud redirection

540
00:19:00,400 --> 00:19:03,200
features in aws and azure

541
00:19:03,200 --> 00:19:04,880
so um we've kind of built our own tool

542
00:19:04,880 --> 00:19:06,880
kit that we use to

543
00:19:06,880 --> 00:19:08,720
chain agents together to get deep in

544
00:19:08,720 --> 00:19:10,320
networks on red team and engagements

545
00:19:10,320 --> 00:19:12,320
that we call voodoo

546
00:19:12,320 --> 00:19:13,200
and

547
00:19:13,200 --> 00:19:14,880
you know let me just take a scenario

548
00:19:14,880 --> 00:19:17,280
right where we exploit into a web app um

549
00:19:17,280 --> 00:19:19,760
it's like in a you know a public network

550
00:19:19,760 --> 00:19:21,520
and we come in through the firewall and

551
00:19:21,520 --> 00:19:23,039
exploit the web app that's available on

552
00:19:23,039 --> 00:19:25,120
the internet and then we'll like install

553
00:19:25,120 --> 00:19:26,880
the voodoo agent and get a call back and

554
00:19:26,880 --> 00:19:28,799
then our operators are able to operate

555
00:19:28,799 --> 00:19:29,760
on that

556
00:19:29,760 --> 00:19:31,200
and from there they try and expand

557
00:19:31,200 --> 00:19:33,120
access on other systems inside the

558
00:19:33,120 --> 00:19:35,200
private network or vpc

559
00:19:35,200 --> 00:19:37,120
and they try to move around and get to

560
00:19:37,120 --> 00:19:38,640
the real target the place that has the

561
00:19:38,640 --> 00:19:40,400
data right

562
00:19:40,400 --> 00:19:42,559
so where we typically get caught in

563
00:19:42,559 --> 00:19:44,320
these engagements is not when we're

564
00:19:44,320 --> 00:19:47,280
moving around on the internal because

565
00:19:47,280 --> 00:19:49,600
that east-west traffic is sometimes a

566
00:19:49,600 --> 00:19:51,120
lot less monitored

567
00:19:51,120 --> 00:19:52,880
we typically get caught on the callbacks

568
00:19:52,880 --> 00:19:55,280
where it egresses out to the internet

569
00:19:55,280 --> 00:19:56,160
right

570
00:19:56,160 --> 00:19:57,120
and

571
00:19:57,120 --> 00:19:58,960
the reason for that is because you run

572
00:19:58,960 --> 00:20:00,640
into things like you know domain

573
00:20:00,640 --> 00:20:02,480
reputation for the callback or

574
00:20:02,480 --> 00:20:04,720
information associated with this

575
00:20:04,720 --> 00:20:07,039
uh tls

576
00:20:07,039 --> 00:20:08,720
certificates that are associated with

577
00:20:08,720 --> 00:20:10,720
attacker infrastructure or just

578
00:20:10,720 --> 00:20:12,159
generally kind of like the timing or

579
00:20:12,159 --> 00:20:14,640
cadence of the callbacks looks weird or

580
00:20:14,640 --> 00:20:17,840
abnormal to the environment

581
00:20:17,840 --> 00:20:19,679
there's a community edition for voodoo

582
00:20:19,679 --> 00:20:20,960
so if you want to you can go to the

583
00:20:20,960 --> 00:20:22,880
website and check that out or if you

584
00:20:22,880 --> 00:20:24,159
have any questions feel free to hit me

585
00:20:24,159 --> 00:20:26,000
up i'm happy to help

586
00:20:26,000 --> 00:20:27,760
i created an intro video that's up on

587
00:20:27,760 --> 00:20:29,200
youtube if you want to check that out

588
00:20:29,200 --> 00:20:30,799
more

589
00:20:30,799 --> 00:20:32,799
so how how do the cloud services really

590
00:20:32,799 --> 00:20:35,280
enable us to solve this well if we use a

591
00:20:35,280 --> 00:20:37,600
service like api gateway so api gateway

592
00:20:37,600 --> 00:20:39,840
is is kind of like a it's like a reverse

593
00:20:39,840 --> 00:20:42,080
proxy service in the cloud right it's

594
00:20:42,080 --> 00:20:44,000
going to set up like a rest api and then

595
00:20:44,000 --> 00:20:45,760
just forward data back to other aws

596
00:20:45,760 --> 00:20:47,919
services or even just any server you

597
00:20:47,919 --> 00:20:49,919
specify so you can have an api gateway

598
00:20:49,919 --> 00:20:52,240
forward data back to a server sitting in

599
00:20:52,240 --> 00:20:54,159
digitalocean that's totally valid and

600
00:20:54,159 --> 00:20:56,559
within the use cases but the cool part

601
00:20:56,559 --> 00:20:59,280
is when you create an api gateway

602
00:20:59,280 --> 00:21:01,280
it will by default

603
00:21:01,280 --> 00:21:05,520
use aws's valid tls certs it will also

604
00:21:05,520 --> 00:21:08,320
use their

605
00:21:08,320 --> 00:21:10,159
it'll give you a valid domain right so

606
00:21:10,159 --> 00:21:11,919
you can kind of use that for callbacks

607
00:21:11,919 --> 00:21:13,840
from the agent and then forward that

608
00:21:13,840 --> 00:21:16,720
data on to the voodoo lp or whatever

609
00:21:16,720 --> 00:21:19,200
you're using for c2

610
00:21:19,200 --> 00:21:21,039
so here we can see

611
00:21:21,039 --> 00:21:22,480
kind of just redirecting the comms

612
00:21:22,480 --> 00:21:25,840
through the aws services

613
00:21:28,799 --> 00:21:30,960
and i posted up a script that's at the

614
00:21:30,960 --> 00:21:32,880
bottom of this slide on how to do that

615
00:21:32,880 --> 00:21:34,159
if you guys are interested in checking

616
00:21:34,159 --> 00:21:36,000
it out more you'll automatically set up

617
00:21:36,000 --> 00:21:38,000
this api gateway to any server you

618
00:21:38,000 --> 00:21:40,480
specify

619
00:21:41,840 --> 00:21:43,600
okay and then i've talked a little bit

620
00:21:43,600 --> 00:21:46,080
before about logging disruption

621
00:21:46,080 --> 00:21:48,640
but i just wanted to bring this up

622
00:21:48,640 --> 00:21:51,360
in case you haven't seen it but

623
00:21:51,360 --> 00:21:53,919
inside of aws the main mechanism for

624
00:21:53,919 --> 00:21:56,159
detections is this cloudtrail service

625
00:21:56,159 --> 00:21:58,320
and the easiest way to set it up is you

626
00:21:58,320 --> 00:22:00,880
can configure cloudtrail which anytime

627
00:22:00,880 --> 00:22:03,760
someone hits any aws api you'll create a

628
00:22:03,760 --> 00:22:04,799
log

629
00:22:04,799 --> 00:22:06,799
and

630
00:22:06,799 --> 00:22:09,520
so you can create it so that it will

631
00:22:09,520 --> 00:22:13,120
output logs to an s3 bucket

632
00:22:13,120 --> 00:22:15,520
but the kind of kicker here is that the

633
00:22:15,520 --> 00:22:17,679
cloudtrail service will actually buffer

634
00:22:17,679 --> 00:22:19,520
the logs before it writes it to that s3

635
00:22:19,520 --> 00:22:20,640
bucket because it doesn't want to be

636
00:22:20,640 --> 00:22:23,039
writing to that s3 bucket too much

637
00:22:23,039 --> 00:22:25,280
so let's say an attacker they get access

638
00:22:25,280 --> 00:22:27,520
to your aws environment because they've

639
00:22:27,520 --> 00:22:30,159
been mining ebs snapshots and they found

640
00:22:30,159 --> 00:22:32,159
like some secrets that were stored

641
00:22:32,159 --> 00:22:34,640
inside an ebs snapshot

642
00:22:34,640 --> 00:22:36,159
then they start interacting with your

643
00:22:36,159 --> 00:22:38,400
aws account and you but you have

644
00:22:38,400 --> 00:22:41,200
cloudtrail enabled right now so

645
00:22:41,200 --> 00:22:42,720
cloudtrail is going to record exactly

646
00:22:42,720 --> 00:22:45,600
what that account is doing those

647
00:22:45,600 --> 00:22:46,960
actions are going to get buffered and

648
00:22:46,960 --> 00:22:48,559
then eventually written into the s3

649
00:22:48,559 --> 00:22:50,080
bucket

650
00:22:50,080 --> 00:22:50,880
so

651
00:22:50,880 --> 00:22:52,640
if the attacker gains

652
00:22:52,640 --> 00:22:54,720
the rights to modify the cloudtrail

653
00:22:54,720 --> 00:22:55,919
service

654
00:22:55,919 --> 00:22:57,440
um

655
00:22:57,440 --> 00:22:59,039
he may be able to kind of muck with this

656
00:22:59,039 --> 00:23:00,559
and i'll show you how so in this

657
00:23:00,559 --> 00:23:02,720
scenario he's got credentials via mining

658
00:23:02,720 --> 00:23:05,039
ebs snapshots he's interacting with the

659
00:23:05,039 --> 00:23:06,880
target aws account

660
00:23:06,880 --> 00:23:09,120
it's generating logs that are suspicious

661
00:23:09,120 --> 00:23:10,799
those are going to a system like splunk

662
00:23:10,799 --> 00:23:13,120
or another log aggregation system

663
00:23:13,120 --> 00:23:15,120
and then you know the attacker kind of

664
00:23:15,120 --> 00:23:17,440
gets caught right so like let's say he

665
00:23:17,440 --> 00:23:19,360
goes in and he tries to delete the trail

666
00:23:19,360 --> 00:23:20,720
well that's going to create a delete

667
00:23:20,720 --> 00:23:22,720
trail event that's going to go on the

668
00:23:22,720 --> 00:23:24,480
buffer eventually they just get rid into

669
00:23:24,480 --> 00:23:26,400
the s3 bucket and maybe when it gets

670
00:23:26,400 --> 00:23:27,919
written into the s3 bucket that gets

671
00:23:27,919 --> 00:23:30,159
picked up and then put into a splunk

672
00:23:30,159 --> 00:23:32,480
cluster and then it gets detected by the

673
00:23:32,480 --> 00:23:34,840
sock and the attacker gets busted

674
00:23:34,840 --> 00:23:37,520
right so attackers don't really like

675
00:23:37,520 --> 00:23:40,400
getting busted so

676
00:23:40,400 --> 00:23:41,279
so

677
00:23:41,279 --> 00:23:44,640
there's a technique and

678
00:23:44,640 --> 00:23:46,880
where an attacker he can issue the

679
00:23:46,880 --> 00:23:48,320
delete trail

680
00:23:48,320 --> 00:23:49,360
funk

681
00:23:49,360 --> 00:23:50,799
api call

682
00:23:50,799 --> 00:23:52,640
and then immediately after that what he

683
00:23:52,640 --> 00:23:56,559
does is he does a create trail api call

684
00:23:56,559 --> 00:23:59,360
and he creates basically the exact same

685
00:23:59,360 --> 00:24:01,840
trail that was just deleted but

686
00:24:01,840 --> 00:24:03,679
this time he actually specifies a

687
00:24:03,679 --> 00:24:05,919
different s3 bucket he specifies an s3

688
00:24:05,919 --> 00:24:08,880
bucket that's in an attacker-owned aws

689
00:24:08,880 --> 00:24:10,080
account

690
00:24:10,080 --> 00:24:13,520
and what happens in this is cloudtrail

691
00:24:13,520 --> 00:24:15,760
sees the delete trail message it buffers

692
00:24:15,760 --> 00:24:16,880
it because it doesn't want to write it

693
00:24:16,880 --> 00:24:19,039
to the s3 bucket

694
00:24:19,039 --> 00:24:20,320
immediately

695
00:24:20,320 --> 00:24:22,400
but then we create the trail

696
00:24:22,400 --> 00:24:23,919
but we change the s3 bucket to the

697
00:24:23,919 --> 00:24:25,919
attacker own s3 bucket

698
00:24:25,919 --> 00:24:28,400
and when the buffer or timer gets hit

699
00:24:28,400 --> 00:24:30,080
cloudtrail pushes the delete trail

700
00:24:30,080 --> 00:24:32,400
message to the attacker owned bucket and

701
00:24:32,400 --> 00:24:34,640
then the sock or the section team

702
00:24:34,640 --> 00:24:36,720
actually never gets alerted because they

703
00:24:36,720 --> 00:24:38,559
never got the delete trail event because

704
00:24:38,559 --> 00:24:39,919
it was sitting in that kind of in

705
00:24:39,919 --> 00:24:41,520
between zone

706
00:24:41,520 --> 00:24:43,440
now the attacker obviously could process

707
00:24:43,440 --> 00:24:45,279
those logs remove the delete trail

708
00:24:45,279 --> 00:24:46,640
events and then

709
00:24:46,640 --> 00:24:48,080
if they have access send them back to

710
00:24:48,080 --> 00:24:49,600
the targets

711
00:24:49,600 --> 00:24:52,159
aws s3 bucket

712
00:24:52,159 --> 00:24:53,760
but that's a little bit more work

713
00:24:53,760 --> 00:24:56,640
and i created a full video on this

714
00:24:56,640 --> 00:24:58,960
and pushed that up to youtube a while

715
00:24:58,960 --> 00:25:01,279
ago so if you want a more in depth feel

716
00:25:01,279 --> 00:25:03,200
free to check that out

717
00:25:03,200 --> 00:25:05,760
or come talk to me more

718
00:25:05,760 --> 00:25:07,760
there's ways you could avoid this

719
00:25:07,760 --> 00:25:09,200
but i'm just talking about that kind of

720
00:25:09,200 --> 00:25:10,799
default setup where you're pushing it to

721
00:25:10,799 --> 00:25:13,440
the s3 bucket

722
00:25:13,440 --> 00:25:15,600
okay conclusion i know this wasn't a

723
00:25:15,600 --> 00:25:17,520
very long talk but uh i think we're the

724
00:25:17,520 --> 00:25:19,919
one last one of the day so so should be

725
00:25:19,919 --> 00:25:20,799
good

726
00:25:20,799 --> 00:25:22,640
cloud security is pretty complex there's

727
00:25:22,640 --> 00:25:25,440
a lot of issues there um

728
00:25:25,440 --> 00:25:26,720
you know i

729
00:25:26,720 --> 00:25:28,159
we've kind of built a platform to

730
00:25:28,159 --> 00:25:30,159
deliver more continuous services on the

731
00:25:30,159 --> 00:25:32,640
red teaming and pen testing side

732
00:25:32,640 --> 00:25:34,480
but the the long story short is you

733
00:25:34,480 --> 00:25:36,720
really need to get into your aws your

734
00:25:36,720 --> 00:25:39,520
azure your gcp your cloud accounts

735
00:25:39,520 --> 00:25:41,200
understand them at a deep level

736
00:25:41,200 --> 00:25:42,799
understand what's going on in them how

737
00:25:42,799 --> 00:25:44,320
they're secured

738
00:25:44,320 --> 00:25:45,679
and

739
00:25:45,679 --> 00:25:46,559
and

740
00:25:46,559 --> 00:25:48,720
focused there as

741
00:25:48,720 --> 00:25:50,640
more and more companies become cloud

742
00:25:50,640 --> 00:25:52,640
first right more and more data is

743
00:25:52,640 --> 00:25:54,480
getting pushed to those environments

744
00:25:54,480 --> 00:25:57,440
and more risk of attackers getting to it

745
00:25:57,440 --> 00:26:00,320
is is relevant so if you have any

746
00:26:00,320 --> 00:26:04,159
questions um i'll be up here i did push

747
00:26:04,159 --> 00:26:06,000
this slide deck up to

748
00:26:06,000 --> 00:26:07,840
speaker deck so it's already there the

749
00:26:07,840 --> 00:26:10,720
code is on github in that to capture the

750
00:26:10,720 --> 00:26:13,120
cloud there's a directory called mining

751
00:26:13,120 --> 00:26:14,320
and that's where i push the bulk of the

752
00:26:14,320 --> 00:26:16,159
code for this talk

753
00:26:16,159 --> 00:26:17,360
and

754
00:26:17,360 --> 00:26:19,120
you know we teach a training that's a

755
00:26:19,120 --> 00:26:21,440
four day training on just all about red

756
00:26:21,440 --> 00:26:24,480
teaming inside aws azure and gcp

757
00:26:24,480 --> 00:26:26,320
to companies as well as at black cats so

758
00:26:26,320 --> 00:26:27,840
if you're interested hit us up about

759
00:26:27,840 --> 00:26:28,960
that so

760
00:26:28,960 --> 00:26:30,320
thank you guys for taking time here

761
00:26:30,320 --> 00:26:32,400
today to come down i appreciate it and

762
00:26:32,400 --> 00:26:37,000
that's that's the talk so thanks

