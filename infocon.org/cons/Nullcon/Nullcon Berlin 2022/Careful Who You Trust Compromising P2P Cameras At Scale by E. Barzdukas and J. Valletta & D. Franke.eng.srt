1
00:00:03,040 --> 00:00:04,799
go ahead and get started here so thanks

2
00:00:04,799 --> 00:00:06,640
all for coming and uh listening to our

3
00:00:06,640 --> 00:00:08,320
talk here thanks for no con for having

4
00:00:08,320 --> 00:00:09,679
us here we're really excited to be

5
00:00:09,679 --> 00:00:11,920
presenting here uh our talk is titled

6
00:00:11,920 --> 00:00:13,920
careful who you trust compromising pdp

7
00:00:13,920 --> 00:00:15,360
cameras at scale

8
00:00:15,360 --> 00:00:16,880
and we got a lot of material to pack

9
00:00:16,880 --> 00:00:18,320
into the next 25 minutes so we're gonna

10
00:00:18,320 --> 00:00:20,080
do our best to get through it might be a

11
00:00:20,080 --> 00:00:21,680
few minutes over

12
00:00:21,680 --> 00:00:22,960
we're only going to spend a few seconds

13
00:00:22,960 --> 00:00:24,560
here introducing ourselves so my name is

14
00:00:24,560 --> 00:00:26,800
jake valeta i'm a director based in san

15
00:00:26,800 --> 00:00:27,920
francisco

16
00:00:27,920 --> 00:00:29,599
our artwork here we're all based in san

17
00:00:29,599 --> 00:00:30,480
francisco

18
00:00:30,480 --> 00:00:32,399
and we all work at mania for for the

19
00:00:32,399 --> 00:00:34,960
record here um i've been around for 10

20
00:00:34,960 --> 00:00:37,440
plus years in offensive security i like

21
00:00:37,440 --> 00:00:39,920
mobile security embedded and also some

22
00:00:39,920 --> 00:00:41,200
reverse engineering and these are all

23
00:00:41,200 --> 00:00:42,559
kind of the aspects that went into this

24
00:00:42,559 --> 00:00:43,760
research

25
00:00:43,760 --> 00:00:45,120
i'm going to pass it over to eric here

26
00:00:45,120 --> 00:00:46,079
right

27
00:00:46,079 --> 00:00:48,320
hey i'm eric bartos dukas i'm a manager

28
00:00:48,320 --> 00:00:50,000
on our practice services team um

29
00:00:50,000 --> 00:00:51,840
focusing specifically on like mobile

30
00:00:51,840 --> 00:00:54,079
applications embedded devices running

31
00:00:54,079 --> 00:00:56,480
frida wherever i can um

32
00:00:56,480 --> 00:00:59,440
successfully or otherwise

33
00:00:59,440 --> 00:01:02,320
hey everyone i'm dylan franke i did my

34
00:01:02,320 --> 00:01:03,840
undergrad and master's at stanford

35
00:01:03,840 --> 00:01:06,799
university i'm in security and focuses

36
00:01:06,799 --> 00:01:08,960
and interests are appsec static code

37
00:01:08,960 --> 00:01:11,760
analysis and reverse engineering

38
00:01:11,760 --> 00:01:13,360
so we're going to jump right into things

39
00:01:13,360 --> 00:01:15,200
our agenda today is going to first be

40
00:01:15,200 --> 00:01:16,479
talking about

41
00:01:16,479 --> 00:01:18,720
some embedded device

42
00:01:18,720 --> 00:01:21,520
security research we did on p2p cameras

43
00:01:21,520 --> 00:01:23,759
and then moving on to looking at the p2p

44
00:01:23,759 --> 00:01:25,439
network that actually connects those

45
00:01:25,439 --> 00:01:27,119
devices together

46
00:01:27,119 --> 00:01:29,119
then we're going to discuss a critical

47
00:01:29,119 --> 00:01:30,960
security vulnerability we discovered in

48
00:01:30,960 --> 00:01:32,880
the peer-to-peer network

49
00:01:32,880 --> 00:01:34,640
and then move into a series of case

50
00:01:34,640 --> 00:01:36,799
studies of devices we're able to fully

51
00:01:36,799 --> 00:01:38,240
compromise

52
00:01:38,240 --> 00:01:40,320
completely remotely then we're going to

53
00:01:40,320 --> 00:01:42,479
talk about conclusions and some next

54
00:01:42,479 --> 00:01:44,320
steps

55
00:01:44,320 --> 00:01:46,240
so our initial research

56
00:01:46,240 --> 00:01:48,640
started actually in the fall of 2020 and

57
00:01:48,640 --> 00:01:50,320
it was motivated

58
00:01:50,320 --> 00:01:52,399
by nothing other than just a sheer

59
00:01:52,399 --> 00:01:54,399
interest in embedded device security and

60
00:01:54,399 --> 00:01:56,159
wanting to learn more

61
00:01:56,159 --> 00:01:58,320
we really didn't have any specific

62
00:01:58,320 --> 00:02:00,000
objectives in mind here we just bought

63
00:02:00,000 --> 00:02:03,360
about 12 p2p iot cameras and started

64
00:02:03,360 --> 00:02:05,040
hacking away

65
00:02:05,040 --> 00:02:06,560
some common themes that we saw on all

66
00:02:06,560 --> 00:02:08,959
these devices are you know we would

67
00:02:08,959 --> 00:02:10,720
start with some embedded testing look

68
00:02:10,720 --> 00:02:13,280
for jtag ur inputs

69
00:02:13,280 --> 00:02:16,239
get a shell on the system and then move

70
00:02:16,239 --> 00:02:19,840
into looking at mobile applications that

71
00:02:19,840 --> 00:02:21,440
that were used to communicate with the

72
00:02:21,440 --> 00:02:22,800
devices

73
00:02:22,800 --> 00:02:24,480
then move into reverse engineering

74
00:02:24,480 --> 00:02:27,760
binaries on the actual cameras and the

75
00:02:27,760 --> 00:02:29,840
mobile applications themselves and then

76
00:02:29,840 --> 00:02:32,000
finally looking at web apis that the

77
00:02:32,000 --> 00:02:34,239
mobile applications used to talk to

78
00:02:34,239 --> 00:02:37,040
those p2p cameras

79
00:02:37,040 --> 00:02:38,959
so within the first day on most of the

80
00:02:38,959 --> 00:02:41,200
devices we looked at we had rooted them

81
00:02:41,200 --> 00:02:43,519
there was essentially no security

82
00:02:43,519 --> 00:02:44,959
involved and

83
00:02:44,959 --> 00:02:48,560
as you could imagine most iot devices

84
00:02:48,560 --> 00:02:50,400
but what really caught our eye as we

85
00:02:50,400 --> 00:02:52,879
started looking at at wireshark

86
00:02:52,879 --> 00:02:56,239
was really zero tcp traffic but a ton of

87
00:02:56,239 --> 00:03:00,239
udp traffic of um just complete binary

88
00:03:00,239 --> 00:03:01,760
looking data with

89
00:03:01,760 --> 00:03:04,000
not high entropy and some interesting

90
00:03:04,000 --> 00:03:05,760
patterns we saw

91
00:03:05,760 --> 00:03:08,159
so after looking at this further

92
00:03:08,159 --> 00:03:08,959
we

93
00:03:08,959 --> 00:03:10,720
realized that this

94
00:03:10,720 --> 00:03:14,080
udp traffic was actually the calais

95
00:03:14,080 --> 00:03:15,280
protocol

96
00:03:15,280 --> 00:03:17,440
the calais network peer-to-peer network

97
00:03:17,440 --> 00:03:19,680
is developed by a company called through

98
00:03:19,680 --> 00:03:21,360
tech out of taiwan

99
00:03:21,360 --> 00:03:25,440
it is a platform for connecting at scale

100
00:03:25,440 --> 00:03:27,599
iot devices and it allows you to

101
00:03:27,599 --> 00:03:29,200
remotely connect all these devices and

102
00:03:29,200 --> 00:03:31,040
allow them to talk to each other and

103
00:03:31,040 --> 00:03:32,879
allow clients to talk to them through

104
00:03:32,879 --> 00:03:35,280
mobile applications or other clients

105
00:03:35,280 --> 00:03:37,519
so they boast having over 83 million

106
00:03:37,519 --> 00:03:39,840
registered devices on their platform and

107
00:03:39,840 --> 00:03:42,799
1.1 billion monthly connections

108
00:03:42,799 --> 00:03:45,680
these devices range from security

109
00:03:45,680 --> 00:03:48,480
cameras at home to you know pet cameras

110
00:03:48,480 --> 00:03:51,120
to baby cameras you really have kind of

111
00:03:51,120 --> 00:03:53,439
the whole nine yards here

112
00:03:53,439 --> 00:03:55,760
so the cali platform is implemented as a

113
00:03:55,760 --> 00:03:58,799
as an sdk that you install on the iot

114
00:03:58,799 --> 00:03:59,920
camera

115
00:03:59,920 --> 00:04:01,680
and then each device gets assigned a

116
00:04:01,680 --> 00:04:03,760
specific uid

117
00:04:03,760 --> 00:04:06,560
and then this uid is used to communicate

118
00:04:06,560 --> 00:04:08,879
there's four main layers the first layer

119
00:04:08,879 --> 00:04:11,200
consists of device discovery and

120
00:04:11,200 --> 00:04:12,640
connectivity

121
00:04:12,640 --> 00:04:14,400
so actually routing traffic from a

122
00:04:14,400 --> 00:04:16,079
mobile app for example to your smart

123
00:04:16,079 --> 00:04:17,120
camera

124
00:04:17,120 --> 00:04:19,199
then there's the authentication layer

125
00:04:19,199 --> 00:04:21,279
there's an audio video streaming layer

126
00:04:21,279 --> 00:04:23,120
and then there's a remote procedure call

127
00:04:23,120 --> 00:04:26,160
layer called i o control which exposes

128
00:04:26,160 --> 00:04:27,759
some interesting functionality on

129
00:04:27,759 --> 00:04:29,360
devices

130
00:04:29,360 --> 00:04:30,160
so

131
00:04:30,160 --> 00:04:32,160
we spent about six months of intensive

132
00:04:32,160 --> 00:04:33,840
research looking at this protocol

133
00:04:33,840 --> 00:04:35,600
reverse engineering it looking at the

134
00:04:35,600 --> 00:04:37,759
binaries on cameras

135
00:04:37,759 --> 00:04:39,840
and we developed over time a

136
00:04:39,840 --> 00:04:42,720
comprehensive python library to actually

137
00:04:42,720 --> 00:04:45,680
act as a client on the cala platform so

138
00:04:45,680 --> 00:04:47,759
we could send and receive messages

139
00:04:47,759 --> 00:04:49,759
through this udp protocol

140
00:04:49,759 --> 00:04:51,600
and act as if we were a device on the

141
00:04:51,600 --> 00:04:52,720
network

142
00:04:52,720 --> 00:04:54,080
and through this

143
00:04:54,080 --> 00:04:58,199
it led to the discovery of cbc 2021

144
00:04:58,199 --> 00:04:59,840
28372

145
00:04:59,840 --> 00:05:00,880
which is

146
00:05:00,880 --> 00:05:03,199
a device impersonation vulnerability

147
00:05:03,199 --> 00:05:05,680
that allows an attacker who knows the

148
00:05:05,680 --> 00:05:09,440
uid of a device on the cali platform

149
00:05:09,440 --> 00:05:12,320
to compromise that device so this means

150
00:05:12,320 --> 00:05:14,800
an attacker could compromise up to 83

151
00:05:14,800 --> 00:05:17,840
million iot cameras on this platform

152
00:05:17,840 --> 00:05:19,600
unfortunately we don't have to time to

153
00:05:19,600 --> 00:05:22,320
go too into the technical details here

154
00:05:22,320 --> 00:05:24,080
but you can talk to us afterwards or

155
00:05:24,080 --> 00:05:26,160
read a blog that we published on august

156
00:05:26,160 --> 00:05:28,639
17th with the u.s cyber security

157
00:05:28,639 --> 00:05:31,120
infrastructure security agency

158
00:05:31,120 --> 00:05:32,880
through tech we should note shared

159
00:05:32,880 --> 00:05:34,400
recommendations for this on their

160
00:05:34,400 --> 00:05:37,199
website to update the through tech

161
00:05:37,199 --> 00:05:39,919
library version on the cameras as well

162
00:05:39,919 --> 00:05:44,800
as use their off-key and dtls features

163
00:05:44,800 --> 00:05:46,639
so we'll quickly walk into what this

164
00:05:46,639 --> 00:05:48,880
vulnerability looks like i should first

165
00:05:48,880 --> 00:05:50,000
note that

166
00:05:50,000 --> 00:05:51,840
the mobile application you see here the

167
00:05:51,840 --> 00:05:54,479
attacker device and the smart camera are

168
00:05:54,479 --> 00:05:56,800
all on completely different networks

169
00:05:56,800 --> 00:05:58,240
as an attacker

170
00:05:58,240 --> 00:06:01,039
we are going to using our um

171
00:06:01,039 --> 00:06:03,360
our python library that we wrote spoof a

172
00:06:03,360 --> 00:06:05,919
request to register a victim's camera

173
00:06:05,919 --> 00:06:09,280
whose uid we know on the cali network

174
00:06:09,280 --> 00:06:11,360
the cala network will then register that

175
00:06:11,360 --> 00:06:13,360
uid on the platform

176
00:06:13,360 --> 00:06:15,440
but it will think that

177
00:06:15,440 --> 00:06:17,840
the uid we registered goes back to the

178
00:06:17,840 --> 00:06:20,560
attacker so then when

179
00:06:20,560 --> 00:06:21,919
a user

180
00:06:21,919 --> 00:06:24,479
requests to view for example camera

181
00:06:24,479 --> 00:06:26,560
footage on that device they'll connect

182
00:06:26,560 --> 00:06:28,639
to the through their mobile app

183
00:06:28,639 --> 00:06:31,039
initiate a calais connection

184
00:06:31,039 --> 00:06:32,720
except that connection will then be

185
00:06:32,720 --> 00:06:35,039
routed to the attacker so the attacker

186
00:06:35,039 --> 00:06:37,360
will then receive device credentials for

187
00:06:37,360 --> 00:06:40,400
that iot device

188
00:06:40,639 --> 00:06:43,199
so the real question is what's next here

189
00:06:43,199 --> 00:06:45,120
this vulnerability that we disclose

190
00:06:45,120 --> 00:06:47,919
allows an attacker to obtain credentials

191
00:06:47,919 --> 00:06:50,000
needed to talk to remote devices

192
00:06:50,000 --> 00:06:52,319
anywhere regardless of nat firewall

193
00:06:52,319 --> 00:06:54,400
setup this protocol punches through all

194
00:06:54,400 --> 00:06:57,520
that so very very bad it also allows for

195
00:06:57,520 --> 00:07:00,479
immediate implicit compromise of audio

196
00:07:00,479 --> 00:07:03,520
video data which definitely scares a lot

197
00:07:03,520 --> 00:07:04,720
of people

198
00:07:04,720 --> 00:07:07,440
and it also allows the unauthorized use

199
00:07:07,440 --> 00:07:09,120
of the i o control layer which i

200
00:07:09,120 --> 00:07:10,160
mentioned

201
00:07:10,160 --> 00:07:13,039
now this is where we really got excited

202
00:07:13,039 --> 00:07:15,520
looking at functionality exposed by this

203
00:07:15,520 --> 00:07:16,880
and we're going to talk in the rest of

204
00:07:16,880 --> 00:07:18,560
this talk about you know the

205
00:07:18,560 --> 00:07:20,720
implications of this what if we actually

206
00:07:20,720 --> 00:07:23,199
found bugs in the i o control layer that

207
00:07:23,199 --> 00:07:25,440
allowed us to exploit specific

208
00:07:25,440 --> 00:07:27,440
vulnerabilities within iot cameras

209
00:07:27,440 --> 00:07:29,360
themselves

210
00:07:29,360 --> 00:07:30,960
and for that i'm going to pass things

211
00:07:30,960 --> 00:07:34,319
over to my colleague eric barzdukis

212
00:07:34,319 --> 00:07:37,360
all right thanks dylan so at this point

213
00:07:37,360 --> 00:07:39,680
we have the ability to get

214
00:07:39,680 --> 00:07:42,000
audio video data from individual cameras

215
00:07:42,000 --> 00:07:44,000
but as dylan mentioned that i o control

216
00:07:44,000 --> 00:07:45,039
layer

217
00:07:45,039 --> 00:07:46,240
was very interesting to us because

218
00:07:46,240 --> 00:07:47,199
that's how you could actually

219
00:07:47,199 --> 00:07:48,800
programmatically reach out to multiple

220
00:07:48,800 --> 00:07:50,720
cameras potentially so we're going to

221
00:07:50,720 --> 00:07:52,479
walk through a couple case studies of

222
00:07:52,479 --> 00:07:54,000
what that full kind of exploit chain

223
00:07:54,000 --> 00:07:55,919
would look like um

224
00:07:55,919 --> 00:07:57,520
we've kind of worked to disclose with

225
00:07:57,520 --> 00:07:59,199
through tech the case studies are all

226
00:07:59,199 --> 00:08:00,639
anonymized currently because we're still

227
00:08:00,639 --> 00:08:02,879
going through disclosure processes but

228
00:08:02,879 --> 00:08:05,360
the first one here is um

229
00:08:05,360 --> 00:08:08,240
one of the largest kind of home camera

230
00:08:08,240 --> 00:08:10,080
manufacturers in like north america you

231
00:08:10,080 --> 00:08:12,400
can think pet camera baby camera things

232
00:08:12,400 --> 00:08:14,400
like that um

233
00:08:14,400 --> 00:08:17,120
and we'll step into that one so the

234
00:08:17,120 --> 00:08:19,360
iterative process that we had for

235
00:08:19,360 --> 00:08:21,280
identifying i o control functionality

236
00:08:21,280 --> 00:08:23,120
that we were interested in incorporating

237
00:08:23,120 --> 00:08:26,400
that into our sdk and um hooking that

238
00:08:26,400 --> 00:08:27,440
into kind of local device

239
00:08:27,440 --> 00:08:29,759
vulnerabilities for compromise was to

240
00:08:29,759 --> 00:08:31,199
start with basically rooting the device

241
00:08:31,199 --> 00:08:33,519
as dylan mentioned um you know it's

242
00:08:33,519 --> 00:08:35,440
beating a dead horse to talk about iot

243
00:08:35,440 --> 00:08:37,599
devices and like how bad they are but it

244
00:08:37,599 --> 00:08:40,080
was basically you know root the device

245
00:08:40,080 --> 00:08:41,839
identify the interesting functionality

246
00:08:41,839 --> 00:08:44,399
so use your app look at your dog photos

247
00:08:44,399 --> 00:08:47,120
or like look at your baby or whatever

248
00:08:47,120 --> 00:08:49,040
capture that network traffic analyze the

249
00:08:49,040 --> 00:08:50,399
network traffic

250
00:08:50,399 --> 00:08:52,320
and then in conjunction with the

251
00:08:52,320 --> 00:08:54,959
firmware um from the device right like

252
00:08:54,959 --> 00:08:56,399
look through that code do some reverse

253
00:08:56,399 --> 00:08:58,480
engineering get some guidra time a

254
00:08:58,480 --> 00:09:00,560
little bit of frida and then

255
00:09:00,560 --> 00:09:02,640
write a parser for it so some of the i o

256
00:09:02,640 --> 00:09:04,080
control functionality is kind of what

257
00:09:04,080 --> 00:09:06,160
you'd expect from a platform like this

258
00:09:06,160 --> 00:09:08,560
you can do things like enable or disable

259
00:09:08,560 --> 00:09:10,640
the led that indicates when the camera's

260
00:09:10,640 --> 00:09:12,800
recording right so a lot of these

261
00:09:12,800 --> 00:09:14,560
cameras you open up the app immediately

262
00:09:14,560 --> 00:09:16,880
there's like a red led and that

263
00:09:16,880 --> 00:09:18,320
indicates that your baby's live on

264
00:09:18,320 --> 00:09:20,320
twitch the

265
00:09:20,320 --> 00:09:22,880
av flow as well um it's kind of that

266
00:09:22,880 --> 00:09:25,200
movie scene we could instruct cameras to

267
00:09:25,200 --> 00:09:27,279
like replay other footage to the the

268
00:09:27,279 --> 00:09:29,279
mobile app um so you know you want to

269
00:09:29,279 --> 00:09:30,959
break into the bank you just replay the

270
00:09:30,959 --> 00:09:32,959
video of the vault that is a normal

271
00:09:32,959 --> 00:09:33,920
vault

272
00:09:33,920 --> 00:09:34,800
um

273
00:09:34,800 --> 00:09:36,480
there are a lot of i o control

274
00:09:36,480 --> 00:09:38,080
functionalities like getting set random

275
00:09:38,080 --> 00:09:40,399
device parameters um less interesting

276
00:09:40,399 --> 00:09:42,080
implicitly but that data wasn't

277
00:09:42,080 --> 00:09:43,519
sanitized so there were like buffer

278
00:09:43,519 --> 00:09:45,279
overflows there if you set the you know

279
00:09:45,279 --> 00:09:48,320
device name or wi-fi ssid something like

280
00:09:48,320 --> 00:09:50,480
44as a's

281
00:09:50,480 --> 00:09:51,839
what really got interesting was the

282
00:09:51,839 --> 00:09:53,600
remote firmware update process on this

283
00:09:53,600 --> 00:09:55,440
device

284
00:09:55,440 --> 00:09:57,200
the remote firmware update process

285
00:09:57,200 --> 00:09:58,480
basically

286
00:09:58,480 --> 00:10:00,320
the mobile application to reach out to

287
00:10:00,320 --> 00:10:02,959
your baby camera or pet camera

288
00:10:02,959 --> 00:10:04,480
it would say hey there's an update at

289
00:10:04,480 --> 00:10:06,560
this url there was no check that that

290
00:10:06,560 --> 00:10:09,120
url url was like vendor owned or

291
00:10:09,120 --> 00:10:11,040
controlled so we spun up a digitalocean

292
00:10:11,040 --> 00:10:13,120
droplet firmware was also not signed or

293
00:10:13,120 --> 00:10:14,800
encrypted so it's just guitar archive

294
00:10:14,800 --> 00:10:17,360
that you can send down

295
00:10:17,360 --> 00:10:19,120
and then because this is an iot device

296
00:10:19,120 --> 00:10:21,279
the version of busy box was from like

297
00:10:21,279 --> 00:10:24,160
you know 1982 and there was a tar sim

298
00:10:24,160 --> 00:10:26,480
link issue in busy box which

299
00:10:26,480 --> 00:10:28,399
does not correctly handle sim links so

300
00:10:28,399 --> 00:10:30,320
you could overwrite arbitrary files

301
00:10:30,320 --> 00:10:32,800
because everything ran as root and you

302
00:10:32,800 --> 00:10:34,160
could sim link

303
00:10:34,160 --> 00:10:35,680
you could extract to sim links that you

304
00:10:35,680 --> 00:10:36,880
wrote on your local device for the

305
00:10:36,880 --> 00:10:38,240
archive so

306
00:10:38,240 --> 00:10:40,160
we identified a couple

307
00:10:40,160 --> 00:10:42,000
important kind of like boot up scripts

308
00:10:42,000 --> 00:10:44,160
um because of course there's like just

309
00:10:44,160 --> 00:10:46,079
boot.sh that handles everything after

310
00:10:46,079 --> 00:10:47,760
the device comes online

311
00:10:47,760 --> 00:10:49,120
so in this instance we were able to add

312
00:10:49,120 --> 00:10:51,519
just basically a netcat reverse shell

313
00:10:51,519 --> 00:10:54,160
kind of a fun aside the sleep 12 was an

314
00:10:54,160 --> 00:10:56,399
arbitrary like we just had to wait 12

315
00:10:56,399 --> 00:10:58,480
seconds before things would work

316
00:10:58,480 --> 00:11:00,640
10 seconds everything will crash

317
00:11:00,640 --> 00:11:01,760
um

318
00:11:01,760 --> 00:11:04,320
so putting those all together

319
00:11:04,320 --> 00:11:06,000
we're able to start with basically a

320
00:11:06,000 --> 00:11:08,480
malicious firmware package on our own

321
00:11:08,480 --> 00:11:10,959
kind of do instance um

322
00:11:10,959 --> 00:11:13,440
you then use that uid to like get the

323
00:11:13,440 --> 00:11:15,279
device credentials itself so you can get

324
00:11:15,279 --> 00:11:17,120
that platform

325
00:11:17,120 --> 00:11:20,160
authentication to that device

326
00:11:20,160 --> 00:11:21,040
then

327
00:11:21,040 --> 00:11:23,120
instruct that device to pull down your

328
00:11:23,120 --> 00:11:25,279
kind of malicious firmware

329
00:11:25,279 --> 00:11:27,440
it'll overwrite that boot.sh script and

330
00:11:27,440 --> 00:11:29,200
then you get a reverse shell

331
00:11:29,200 --> 00:11:30,480
you can do all sorts of things like make

332
00:11:30,480 --> 00:11:32,800
that led strobe whatever you want to do

333
00:11:32,800 --> 00:11:35,600
at that point but that takes it from

334
00:11:35,600 --> 00:11:37,839
the ability to just view you know

335
00:11:37,839 --> 00:11:40,640
sensitive pet pictures to actually

336
00:11:40,640 --> 00:11:42,880
starting to control devices through this

337
00:11:42,880 --> 00:11:44,959
platform right

338
00:11:44,959 --> 00:11:47,600
um so here's a kind of quick demo on the

339
00:11:47,600 --> 00:11:49,600
left side is you know just dylan being

340
00:11:49,600 --> 00:11:52,399
the attacker on the right side here are

341
00:11:52,399 --> 00:11:55,279
the is a digital ocean droplet

342
00:11:55,279 --> 00:11:56,880
just proving that they're not on the

343
00:11:56,880 --> 00:12:00,160
same network we have our tar archive

344
00:12:00,160 --> 00:12:02,000
with our kind of malicious firmware

345
00:12:02,000 --> 00:12:04,000
update staged on the digitalocean

346
00:12:04,000 --> 00:12:05,519
droplet

347
00:12:05,519 --> 00:12:07,200
you'll see here we have set up a

348
00:12:07,200 --> 00:12:10,399
listener we use the python script to

349
00:12:10,399 --> 00:12:12,000
start that update process tell the

350
00:12:12,000 --> 00:12:14,399
camera to reach out to our very real

351
00:12:14,399 --> 00:12:16,959
update um it'll then pull down that tar

352
00:12:16,959 --> 00:12:19,360
archive and we sped this up because it's

353
00:12:19,360 --> 00:12:21,600
iot it had to reboot like twice and do a

354
00:12:21,600 --> 00:12:22,959
little dance

355
00:12:22,959 --> 00:12:25,519
but once that update's pulled down

356
00:12:25,519 --> 00:12:27,680
extracted there's a reverse shell back

357
00:12:27,680 --> 00:12:29,279
to our c2

358
00:12:29,279 --> 00:12:30,560
and everything runs as root as i

359
00:12:30,560 --> 00:12:32,240
mentioned so you're just in as root at

360
00:12:32,240 --> 00:12:33,680
that point

361
00:12:33,680 --> 00:12:35,360
so this was a pretty like

362
00:12:35,360 --> 00:12:38,079
straightforward example of this um there

363
00:12:38,079 --> 00:12:39,360
are a couple different ways that you can

364
00:12:39,360 --> 00:12:41,760
interact with this i o control layer

365
00:12:41,760 --> 00:12:43,200
so i'll turn it over to jake for kind of

366
00:12:43,200 --> 00:12:44,639
a more interesting

367
00:12:44,639 --> 00:12:45,960
custom interaction there

368
00:12:45,960 --> 00:12:48,399
[Music]

369
00:12:48,399 --> 00:12:49,360
all right

370
00:12:49,360 --> 00:12:51,440
thank you eric okay so one of the things

371
00:12:51,440 --> 00:12:53,360
we noticed on some of the other models

372
00:12:53,360 --> 00:12:54,639
was not everyone was using the

373
00:12:54,639 --> 00:12:56,800
authentication the way that the kali

374
00:12:56,800 --> 00:12:58,480
network thought you would so

375
00:12:58,480 --> 00:13:00,160
probably nine times out of ten you would

376
00:13:00,160 --> 00:13:01,680
see username and password use there were

377
00:13:01,680 --> 00:13:03,040
other methods but we didn't see them

378
00:13:03,040 --> 00:13:06,079
used often but one of the devices

379
00:13:06,079 --> 00:13:07,519
actually used hard-coded credentials

380
00:13:07,519 --> 00:13:08,399
here

381
00:13:08,399 --> 00:13:09,680
and they used it they were trying to be

382
00:13:09,680 --> 00:13:11,440
clever so what they did is they used the

383
00:13:11,440 --> 00:13:13,120
hard-coded creds and they implemented

384
00:13:13,120 --> 00:13:15,920
their own challenge response

385
00:13:15,920 --> 00:13:18,000
authentication using the i o control

386
00:13:18,000 --> 00:13:20,160
layer so you would use the default creds

387
00:13:20,160 --> 00:13:22,079
and then you would issue a series of i o

388
00:13:22,079 --> 00:13:24,000
control messages to

389
00:13:24,000 --> 00:13:26,639
in their mind exchange a key securely

390
00:13:26,639 --> 00:13:28,320
and not actually show a username and

391
00:13:28,320 --> 00:13:29,920
password on the wire which is a good

392
00:13:29,920 --> 00:13:30,880
idea

393
00:13:30,880 --> 00:13:32,240
so for this one kind of the same

394
00:13:32,240 --> 00:13:33,680
methodology we use that eric described

395
00:13:33,680 --> 00:13:34,959
we spent a lot of time looking at the

396
00:13:34,959 --> 00:13:36,959
mobile apps using tools like frida

397
00:13:36,959 --> 00:13:38,480
hopefully people are aware of frida

398
00:13:38,480 --> 00:13:40,079
fruit it's very cool

399
00:13:40,079 --> 00:13:41,440
really helps us understand how these

400
00:13:41,440 --> 00:13:42,880
messages were being built and then of

401
00:13:42,880 --> 00:13:44,560
course looking at the binaries which for

402
00:13:44,560 --> 00:13:46,399
this one was mips we saw obviously a lot

403
00:13:46,399 --> 00:13:48,639
of arm and mips binaries through this

404
00:13:48,639 --> 00:13:50,000
so looking at on kind of both sides to

405
00:13:50,000 --> 00:13:52,639
understand what was possible here

406
00:13:52,639 --> 00:13:54,000
so what did this authentication look

407
00:13:54,000 --> 00:13:55,519
like well

408
00:13:55,519 --> 00:13:56,639
first

409
00:13:56,639 --> 00:13:58,560
the smart camera would try to obtain a

410
00:13:58,560 --> 00:14:00,800
secret key we're calling it k

411
00:14:00,800 --> 00:14:02,160
and it's going to obtain that from its

412
00:14:02,160 --> 00:14:04,399
respective api servers and this can

413
00:14:04,399 --> 00:14:06,000
happen at any time this is usually when

414
00:14:06,000 --> 00:14:07,920
the device boots up it'll connect to its

415
00:14:07,920 --> 00:14:09,680
servers and obtain this key

416
00:14:09,680 --> 00:14:11,680
and it'll kind of store it in memory

417
00:14:11,680 --> 00:14:12,959
the mobile app's going to do the same

418
00:14:12,959 --> 00:14:15,040
thing so this was usually when you

419
00:14:15,040 --> 00:14:16,959
logged in the first time but it could

420
00:14:16,959 --> 00:14:18,959
also be you know it gets refreshed

421
00:14:18,959 --> 00:14:21,279
eventually so uh both parties need this

422
00:14:21,279 --> 00:14:22,800
k variable

423
00:14:22,800 --> 00:14:25,839
and then at some point later in time the

424
00:14:25,839 --> 00:14:27,920
user would like to actually use their

425
00:14:27,920 --> 00:14:30,320
camera so they'll launch the application

426
00:14:30,320 --> 00:14:32,399
the app is going to use the kali network

427
00:14:32,399 --> 00:14:34,000
to be able to locate the device it's

428
00:14:34,000 --> 00:14:35,360
going to put those default credentials

429
00:14:35,360 --> 00:14:36,639
in and then it's going to kind of

430
00:14:36,639 --> 00:14:39,600
initiate this i o control authentication

431
00:14:39,600 --> 00:14:40,560
process

432
00:14:40,560 --> 00:14:43,839
so what's that look like well first the

433
00:14:43,839 --> 00:14:45,839
camera is going to create a encrypted

434
00:14:45,839 --> 00:14:47,760
blob by just taking some random data

435
00:14:47,760 --> 00:14:49,760
encrypting it with the k value and then

436
00:14:49,760 --> 00:14:51,839
sending that to the mobile app

437
00:14:51,839 --> 00:14:54,000
mobile app because it has the k value

438
00:14:54,000 --> 00:14:56,160
will then decrypt the data and send that

439
00:14:56,160 --> 00:14:57,920
back to the smart camera so you never

440
00:14:57,920 --> 00:14:59,680
exchange the key but you are

441
00:14:59,680 --> 00:15:02,079
doing some some crypto along the way

442
00:15:02,079 --> 00:15:03,040
if the

443
00:15:03,040 --> 00:15:04,959
d value matches the original value then

444
00:15:04,959 --> 00:15:06,160
the camera assumes that the

445
00:15:06,160 --> 00:15:07,519
authentication is passed and then it

446
00:15:07,519 --> 00:15:09,199
will basically just start sending audio

447
00:15:09,199 --> 00:15:10,839
video data

448
00:15:10,839 --> 00:15:13,279
so this looks pretty good to me i'm not

449
00:15:13,279 --> 00:15:15,360
a crypto expert but it seems like it

450
00:15:15,360 --> 00:15:16,720
could work

451
00:15:16,720 --> 00:15:18,240
the only problem here is this assumes

452
00:15:18,240 --> 00:15:19,920
that you can't impersonate a device

453
00:15:19,920 --> 00:15:21,760
right and the vulnerability that dylan

454
00:15:21,760 --> 00:15:24,079
talked about permits exactly that right

455
00:15:24,079 --> 00:15:25,839
so the bug that we found will let you

456
00:15:25,839 --> 00:15:28,399
attacker maliciously register any device

457
00:15:28,399 --> 00:15:30,639
that you know the uid of and we can use

458
00:15:30,639 --> 00:15:32,720
this to our advantage here to circumvent

459
00:15:32,720 --> 00:15:34,800
the way this authentication was built

460
00:15:34,800 --> 00:15:36,880
we also saw some other pretty cool off

461
00:15:36,880 --> 00:15:38,800
methods just as an aside

462
00:15:38,800 --> 00:15:41,120
so one manufacturer using like a

463
00:15:41,120 --> 00:15:42,959
public key model which i thought was

464
00:15:42,959 --> 00:15:44,959
pretty cool um which is just a little

465
00:15:44,959 --> 00:15:46,000
bit better than the symmetric one i

466
00:15:46,000 --> 00:15:47,120
thought

467
00:15:47,120 --> 00:15:49,199
we also need a post exploitation bug

468
00:15:49,199 --> 00:15:50,160
right so just getting around the

469
00:15:50,160 --> 00:15:52,320
authentication that's cool that gets you

470
00:15:52,320 --> 00:15:54,320
access to the audio video but what we

471
00:15:54,320 --> 00:15:56,399
really want here is you know like a

472
00:15:56,399 --> 00:15:57,839
shell like eric described or something a

473
00:15:57,839 --> 00:16:00,240
little more fun

474
00:16:00,240 --> 00:16:01,199
well

475
00:16:01,199 --> 00:16:03,839
luckily for us this io control layer was

476
00:16:03,839 --> 00:16:06,000
pretty verbose and this was a pattern we

477
00:16:06,000 --> 00:16:08,160
saw in a lot of these devices the

478
00:16:08,160 --> 00:16:10,320
methodology eric described was great

479
00:16:10,320 --> 00:16:12,560
buy a camera get a shell on it pull off

480
00:16:12,560 --> 00:16:15,199
the main binary just grep for

481
00:16:15,199 --> 00:16:17,680
iot iotc i think was a string we used

482
00:16:17,680 --> 00:16:20,079
and find this layer and then just go

483
00:16:20,079 --> 00:16:21,040
through them and figure out what this

484
00:16:21,040 --> 00:16:22,720
thing can do you'll find all kinds of

485
00:16:22,720 --> 00:16:25,759
things reboot device set network

486
00:16:25,759 --> 00:16:28,639
change the angle of the camera and our

487
00:16:28,639 --> 00:16:30,079
favorite how about remote firmware

488
00:16:30,079 --> 00:16:32,560
updates this one also supports that and

489
00:16:32,560 --> 00:16:34,639
in kind of a similar way to the first

490
00:16:34,639 --> 00:16:36,720
device so honestly a lot of the stuff

491
00:16:36,720 --> 00:16:38,320
here don't get hung up on the screenshot

492
00:16:38,320 --> 00:16:40,079
just kind of showing the python code of

493
00:16:40,079 --> 00:16:42,160
how you would format this but the attack

494
00:16:42,160 --> 00:16:43,600
is essentially the same you host the

495
00:16:43,600 --> 00:16:45,040
binary on some

496
00:16:45,040 --> 00:16:47,839
cloud server and then you would

497
00:16:47,839 --> 00:16:49,360
kind of go through this authentication

498
00:16:49,360 --> 00:16:51,759
process and then serve this

499
00:16:51,759 --> 00:16:53,440
tar file to the device which then gets

500
00:16:53,440 --> 00:16:54,480
unpacked

501
00:16:54,480 --> 00:16:56,639
executed as root usually and then you

502
00:16:56,639 --> 00:16:58,480
have your call back from there

503
00:16:58,480 --> 00:17:01,120
again not signed which is not great they

504
00:17:01,120 --> 00:17:03,040
do have an md5 hash for just the

505
00:17:03,040 --> 00:17:04,640
integrity of it but that's that's not

506
00:17:04,640 --> 00:17:06,079
security

507
00:17:06,079 --> 00:17:07,439
okay so we still have to break this

508
00:17:07,439 --> 00:17:09,679
authentication so how do we do that

509
00:17:09,679 --> 00:17:12,240
well the beginning is the same right the

510
00:17:12,240 --> 00:17:13,839
the camera's still going to grab k at

511
00:17:13,839 --> 00:17:15,199
some point we really can't influence

512
00:17:15,199 --> 00:17:16,480
that

513
00:17:16,480 --> 00:17:18,319
the mobile app's also going to grab k

514
00:17:18,319 --> 00:17:20,000
and we can't really change that but

515
00:17:20,000 --> 00:17:21,919
here's where we come in so we are the

516
00:17:21,919 --> 00:17:24,799
attacker we're off on the side over here

517
00:17:24,799 --> 00:17:27,280
because the way the cali network works

518
00:17:27,280 --> 00:17:29,039
all you need to connect to a device at

519
00:17:29,039 --> 00:17:32,160
least initially is that uid so again we

520
00:17:32,160 --> 00:17:34,080
know the uid and we also know the

521
00:17:34,080 --> 00:17:35,679
default credentials because they're just

522
00:17:35,679 --> 00:17:37,360
baked into the mobile app

523
00:17:37,360 --> 00:17:39,280
so once we connect to it

524
00:17:39,280 --> 00:17:41,200
it's going to then start that i o

525
00:17:41,200 --> 00:17:42,480
control process and it's going to

526
00:17:42,480 --> 00:17:45,120
basically challenge us with that c value

527
00:17:45,120 --> 00:17:47,039
so it's going to encrypt some data send

528
00:17:47,039 --> 00:17:48,240
it to us

529
00:17:48,240 --> 00:17:50,160
and say hey if you are really are who

530
00:17:50,160 --> 00:17:52,080
you say you are decrypt this for me and

531
00:17:52,080 --> 00:17:54,080
what we do is we just keep that

532
00:17:54,080 --> 00:17:56,400
connection alive for a little bit

533
00:17:56,400 --> 00:17:58,559
then using another thread

534
00:17:58,559 --> 00:18:00,559
we will exploit the vulnerability that

535
00:18:00,559 --> 00:18:02,720
dylan described think about that earlier

536
00:18:02,720 --> 00:18:04,400
video and what this is going to do is

537
00:18:04,400 --> 00:18:05,919
it's going to poison the network right

538
00:18:05,919 --> 00:18:08,400
so now any subsequent connections to

539
00:18:08,400 --> 00:18:10,160
this camera are going to go to us not

540
00:18:10,160 --> 00:18:11,840
the real camera and it's important

541
00:18:11,840 --> 00:18:13,280
because we still have a connection to

542
00:18:13,280 --> 00:18:15,280
the real camera here so we kind of keep

543
00:18:15,280 --> 00:18:16,720
this one alive so that we can we can

544
00:18:16,720 --> 00:18:18,720
still get to it but anyone else is not

545
00:18:18,720 --> 00:18:21,039
going to be able to and we just wait and

546
00:18:21,039 --> 00:18:24,240
then eventually some user wants to see

547
00:18:24,240 --> 00:18:26,000
pictures of their dog or whatever they

548
00:18:26,000 --> 00:18:28,160
will open up the app it's going to reach

549
00:18:28,160 --> 00:18:29,840
out to the cali network cali network

550
00:18:29,840 --> 00:18:32,080
says yeah if you want to connect to that

551
00:18:32,080 --> 00:18:34,799
go to this attacker over here and

552
00:18:34,799 --> 00:18:36,160
because of the process is going to

553
00:18:36,160 --> 00:18:39,280
request the c from us which

554
00:18:39,280 --> 00:18:40,880
of course we have c we don't have the

555
00:18:40,880 --> 00:18:42,960
key but we have the c value which we'll

556
00:18:42,960 --> 00:18:44,880
just pass that along

557
00:18:44,880 --> 00:18:45,840
and then

558
00:18:45,840 --> 00:18:47,760
the client will decrypt it for us right

559
00:18:47,760 --> 00:18:49,600
and then it'll send it back to us

560
00:18:49,600 --> 00:18:51,919
which we then send to the smart camera

561
00:18:51,919 --> 00:18:55,120
as if we were a valid user camera says

562
00:18:55,120 --> 00:18:57,120
oh yeah that you do have that the key

563
00:18:57,120 --> 00:18:59,360
let's share audio video and then we go

564
00:18:59,360 --> 00:19:00,640
ahead and trigger that remote firmware

565
00:19:00,640 --> 00:19:01,919
update so

566
00:19:01,919 --> 00:19:04,240
got a fun little video for you here

567
00:19:04,240 --> 00:19:06,480
bottom right is just the apache access

568
00:19:06,480 --> 00:19:08,240
logs

569
00:19:08,240 --> 00:19:09,520
top right is going to be a little call

570
00:19:09,520 --> 00:19:11,039
back so very similar to the earlier

571
00:19:11,039 --> 00:19:12,720
screenshot and then you have these two

572
00:19:12,720 --> 00:19:15,520
boxes on the left over here um the top

573
00:19:15,520 --> 00:19:17,200
one is going to be that that kind of

574
00:19:17,200 --> 00:19:19,039
keep alive message so just keeping the

575
00:19:19,039 --> 00:19:20,799
connection alive waiting

576
00:19:20,799 --> 00:19:21,840
for

577
00:19:21,840 --> 00:19:24,160
the challenge to be presented to it the

578
00:19:24,160 --> 00:19:25,600
bottom left here

579
00:19:25,600 --> 00:19:27,360
is going to be

580
00:19:27,360 --> 00:19:28,559
us poisoning the network so you can

581
00:19:28,559 --> 00:19:30,720
assume like at that moment right there a

582
00:19:30,720 --> 00:19:32,640
victim opened up the app and then it's

583
00:19:32,640 --> 00:19:34,080
going to pass it to the top left and

584
00:19:34,080 --> 00:19:35,600
then you can see the get request for the

585
00:19:35,600 --> 00:19:38,480
tar file and then the callback the top

586
00:19:38,480 --> 00:19:40,480
right and you know here we are as root

587
00:19:40,480 --> 00:19:42,160
again because of course everything has

588
00:19:42,160 --> 00:19:44,320
to run as root

589
00:19:44,320 --> 00:19:46,000
so that's fun right

590
00:19:46,000 --> 00:19:46,960
but one thing that we've kind of been

591
00:19:46,960 --> 00:19:48,799
glossing over and dylan's going to talk

592
00:19:48,799 --> 00:19:50,240
a little bit more about is the

593
00:19:50,240 --> 00:19:51,600
importance of the uids because

594
00:19:51,600 --> 00:19:53,120
everything we've talked about hinges on

595
00:19:53,120 --> 00:19:55,520
the ability for an attacker to have uids

596
00:19:55,520 --> 00:19:58,000
um so we were presenting this to other

597
00:19:58,000 --> 00:19:59,360
people we got that question a lot like

598
00:19:59,360 --> 00:20:01,520
oh how do you get these uids so dylan's

599
00:20:01,520 --> 00:20:04,879
going to talk a little bit about that

600
00:20:05,120 --> 00:20:07,039
yeah thanks jake yeah i'm sure you've

601
00:20:07,039 --> 00:20:08,799
been wondering you know how do you get a

602
00:20:08,799 --> 00:20:10,720
hold of these uids and and make your own

603
00:20:10,720 --> 00:20:13,360
botnet here um

604
00:20:13,360 --> 00:20:15,520
the uids were actually infeasible to

605
00:20:15,520 --> 00:20:18,799
brute force um they were 20 bytes of

606
00:20:18,799 --> 00:20:21,039
pseudo pseudo-randomly generated data

607
00:20:21,039 --> 00:20:21,840
but

608
00:20:21,840 --> 00:20:23,600
you know we weren't really going to stop

609
00:20:23,600 --> 00:20:25,200
there because we realized that

610
00:20:25,200 --> 00:20:26,880
protecting these uids with this

611
00:20:26,880 --> 00:20:28,640
vulnerability out there becomes of the

612
00:20:28,640 --> 00:20:31,120
utmost importance right

613
00:20:31,120 --> 00:20:33,520
so we found that often these iot camera

614
00:20:33,520 --> 00:20:36,080
apps would write their own apis that

615
00:20:36,080 --> 00:20:36,960
would

616
00:20:36,960 --> 00:20:39,200
access the through tech uids they would

617
00:20:39,200 --> 00:20:41,039
then be passed to the iot camera and

618
00:20:41,039 --> 00:20:43,280
then would be used by the sdk to connect

619
00:20:43,280 --> 00:20:45,600
to the cali platform so you can picture

620
00:20:45,600 --> 00:20:49,039
something like a get api device get uid

621
00:20:49,039 --> 00:20:50,640
api endpoint

622
00:20:50,640 --> 00:20:52,720
so we wanted to assess kind of in our

623
00:20:52,720 --> 00:20:54,480
case studies that we looked at were

624
00:20:54,480 --> 00:20:56,640
these apis implemented correctly and

625
00:20:56,640 --> 00:20:58,480
could someone actually grab a large

626
00:20:58,480 --> 00:21:00,559
number of uids and exploit this on a

627
00:21:00,559 --> 00:21:03,120
mass scale

628
00:21:03,120 --> 00:21:05,919
what we found was these apis were not

629
00:21:05,919 --> 00:21:08,960
implemented with security in mind

630
00:21:08,960 --> 00:21:10,320
most of them

631
00:21:10,320 --> 00:21:12,480
returned the through tech uid through

632
00:21:12,480 --> 00:21:15,360
api tied to some account right

633
00:21:15,360 --> 00:21:17,440
and for some vendors these api calls

634
00:21:17,440 --> 00:21:20,320
were unauthenticated entirely sometimes

635
00:21:20,320 --> 00:21:23,200
they used default baked credentials

636
00:21:23,200 --> 00:21:25,039
and in one case actually we were able to

637
00:21:25,039 --> 00:21:28,320
just burn through and enumerate like a

638
00:21:28,320 --> 00:21:30,559
ton of uids that we could then if we

639
00:21:30,559 --> 00:21:31,840
wanted to

640
00:21:31,840 --> 00:21:32,799
use our

641
00:21:32,799 --> 00:21:34,640
device impersonation vulnerability

642
00:21:34,640 --> 00:21:35,840
against

643
00:21:35,840 --> 00:21:38,000
and we also looked at just the api

644
00:21:38,000 --> 00:21:39,440
infrastructure

645
00:21:39,440 --> 00:21:41,679
and found that it was also built without

646
00:21:41,679 --> 00:21:44,799
any inkling of security in mind um so

647
00:21:44,799 --> 00:21:47,039
did some surface level reconnaissance

648
00:21:47,039 --> 00:21:49,360
sent a malformed basic auth

649
00:21:49,360 --> 00:21:51,760
header and you know received a django

650
00:21:51,760 --> 00:21:55,200
debug mode environment variable dump

651
00:21:55,200 --> 00:21:57,039
we didn't move further here

652
00:21:57,039 --> 00:21:59,200
to keep things legal but

653
00:21:59,200 --> 00:22:01,200
you can imagine that

654
00:22:01,200 --> 00:22:03,600
with apis as insecure as as the ones we

655
00:22:03,600 --> 00:22:06,159
looked at a mass compromise of these

656
00:22:06,159 --> 00:22:08,320
through tech uids would certainly be

657
00:22:08,320 --> 00:22:10,559
possible

658
00:22:10,559 --> 00:22:12,240
and now i'm going to pass things along

659
00:22:12,240 --> 00:22:14,000
to eric once again who's going to talk

660
00:22:14,000 --> 00:22:17,120
about some key takeaways

661
00:22:17,280 --> 00:22:19,039
thanks dylan so

662
00:22:19,039 --> 00:22:21,200
kind of a couple key takeaways here i'm

663
00:22:21,200 --> 00:22:22,960
connecting back to like the title of the

664
00:22:22,960 --> 00:22:27,120
talk um iot still a hard problem um hard

665
00:22:27,120 --> 00:22:29,840
to fix in the field but more importantly

666
00:22:29,840 --> 00:22:31,919
is going to be like who do these devices

667
00:22:31,919 --> 00:22:33,760
actually trust as vendors right who's

668
00:22:33,760 --> 00:22:34,880
providing

669
00:22:34,880 --> 00:22:37,039
the complex functionality right a lot of

670
00:22:37,039 --> 00:22:39,120
devices are you know

671
00:22:39,120 --> 00:22:41,520
purchased from a third party that

672
00:22:41,520 --> 00:22:43,919
actually makes the thing different you

673
00:22:43,919 --> 00:22:46,240
know sweatshop puts all the code on it

674
00:22:46,240 --> 00:22:47,120
um

675
00:22:47,120 --> 00:22:49,679
marketing team like resells it in you

676
00:22:49,679 --> 00:22:51,600
know kind of the richer countries and

677
00:22:51,600 --> 00:22:53,679
there's a whole like messy chain there

678
00:22:53,679 --> 00:22:55,440
to step through

679
00:22:55,440 --> 00:22:58,320
um the other item kind of as a takeaway

680
00:22:58,320 --> 00:23:01,039
is uh you know again specifically to the

681
00:23:01,039 --> 00:23:03,520
calais platform um if you're managing

682
00:23:03,520 --> 00:23:04,799
devices if you're integrating into

683
00:23:04,799 --> 00:23:06,080
vendors make sure you're keeping things

684
00:23:06,080 --> 00:23:08,400
up to date you're kind of having those

685
00:23:08,400 --> 00:23:09,919
hard conversations with your vendors

686
00:23:09,919 --> 00:23:11,760
about you know how is the data actually

687
00:23:11,760 --> 00:23:13,280
protected or like how does this stuff

688
00:23:13,280 --> 00:23:15,760
actually work right um a little bit of

689
00:23:15,760 --> 00:23:17,919
kind of time up front on understanding

690
00:23:17,919 --> 00:23:19,520
that would save you know a couple of

691
00:23:19,520 --> 00:23:21,919
nerds like us emailing you and you know

692
00:23:21,919 --> 00:23:23,440
talking about the dog photos we're able

693
00:23:23,440 --> 00:23:25,120
to get

694
00:23:25,120 --> 00:23:26,559
and then the other kind of last item is

695
00:23:26,559 --> 00:23:28,960
just protecting data

696
00:23:28,960 --> 00:23:30,640
that other vendors might expose that

697
00:23:30,640 --> 00:23:32,159
your camera's integrating with right

698
00:23:32,159 --> 00:23:34,400
like a lot of the threat model for i

699
00:23:34,400 --> 00:23:37,280
think camera companies is specifically

700
00:23:37,280 --> 00:23:39,440
that audio video data but like the

701
00:23:39,440 --> 00:23:41,520
account information that's actually used

702
00:23:41,520 --> 00:23:43,360
on the vendor kind of platform itself

703
00:23:43,360 --> 00:23:45,840
right you gotta make sure you don't dump

704
00:23:45,840 --> 00:23:47,440
django environment variables when your

705
00:23:47,440 --> 00:23:49,919
web app doesn't handle uh input things

706
00:23:49,919 --> 00:23:50,880
like that

707
00:23:50,880 --> 00:23:51,840
um

708
00:23:51,840 --> 00:23:53,919
other than that uh you know thanks to

709
00:23:53,919 --> 00:23:55,840
kind of cesa through tech kind of the

710
00:23:55,840 --> 00:23:57,440
various vendors that we're working with

711
00:23:57,440 --> 00:23:59,360
and um of course an old con so that's

712
00:23:59,360 --> 00:24:00,880
that's everything we have happy to take

713
00:24:00,880 --> 00:24:03,180
questions if there are any thanks

714
00:24:03,180 --> 00:24:10,150
[Applause]

715
00:24:17,440 --> 00:24:19,279
are being generated because i'm thinking

716
00:24:19,279 --> 00:24:20,720
it would be pretty cool to have like as

717
00:24:20,720 --> 00:24:22,480
many babies as possible

718
00:24:22,480 --> 00:24:23,279
but

719
00:24:23,279 --> 00:24:25,200
i want to have a specific baby

720
00:24:25,200 --> 00:24:27,520
i cannot get there so i'm thinking like

721
00:24:27,520 --> 00:24:29,039
have you looked into for example

722
00:24:29,039 --> 00:24:33,200
identifying start device patterns

723
00:24:35,679 --> 00:24:38,080
yeah also a fan of finding that sweet

724
00:24:38,080 --> 00:24:41,039
baby footage uh so there were some fixed

725
00:24:41,039 --> 00:24:44,720
patterns within that through tech id

726
00:24:44,720 --> 00:24:46,159
for the actual generation do you guys

727
00:24:46,159 --> 00:24:47,919
have more to add on kind of how that was

728
00:24:47,919 --> 00:24:50,320
generated

729
00:25:00,000 --> 00:25:02,320
manufacturing date vendor

730
00:25:02,320 --> 00:25:04,400
and so on because that might kind of

731
00:25:04,400 --> 00:25:05,760
move it away from hey we can build a

732
00:25:05,760 --> 00:25:08,240
botnet hey we can look at trunks

733
00:25:08,240 --> 00:25:09,840
yeah right yeah and the question just

734
00:25:09,840 --> 00:25:11,919
repeated was do we notice any patterns

735
00:25:11,919 --> 00:25:13,919
in the way that uids were generated

736
00:25:13,919 --> 00:25:15,679
really i mean there was there are some

737
00:25:15,679 --> 00:25:18,880
patterns in it but it didn't seem to be

738
00:25:18,880 --> 00:25:20,799
device specific or even like uh like

739
00:25:20,799 --> 00:25:22,559
vendor specific unfortunately which i

740
00:25:22,559 --> 00:25:23,840
mean is good right i mean you'd want

741
00:25:23,840 --> 00:25:25,760
that to be the case i think

742
00:25:25,760 --> 00:25:27,679
um we were i think we were really happy

743
00:25:27,679 --> 00:25:29,440
to see that there was pretty high

744
00:25:29,440 --> 00:25:31,360
entropy between them even between like

745
00:25:31,360 --> 00:25:32,880
if we bought three cameras from the same

746
00:25:32,880 --> 00:25:34,559
manufacturer they could be like

747
00:25:34,559 --> 00:25:35,679
completely different right so there

748
00:25:35,679 --> 00:25:36,799
wasn't like four

749
00:25:36,799 --> 00:25:38,480
four bytes that were like that company

750
00:25:38,480 --> 00:25:39,840
then four more for like a region or

751
00:25:39,840 --> 00:25:42,000
something so it did appear to be pretty

752
00:25:42,000 --> 00:25:43,440
random for at least the i think the

753
00:25:43,440 --> 00:25:47,520
first 16 bytes were for the window

754
00:25:53,039 --> 00:25:54,880
yeah yeah that's a good question that's

755
00:25:54,880 --> 00:25:57,440
something i was definitely interested in

756
00:25:57,440 --> 00:26:00,960
i did some probabilistic analysis on it

757
00:26:00,960 --> 00:26:03,120
given sort of the number of bytes we're

758
00:26:03,120 --> 00:26:04,799
dealing with

759
00:26:04,799 --> 00:26:05,679
we

760
00:26:05,679 --> 00:26:07,520
really even if we had a huge form of

761
00:26:07,520 --> 00:26:09,520
servers i'm talking like a hundred

762
00:26:09,520 --> 00:26:12,640
thousand it would still take us like

763
00:26:12,640 --> 00:26:14,480
hundreds of years to to crack the first

764
00:26:14,480 --> 00:26:17,840
one um with fifty percent probability so

765
00:26:17,840 --> 00:26:19,279
definitely not within the realm of

766
00:26:19,279 --> 00:26:21,200
possibility to brew these that was

767
00:26:21,200 --> 00:26:23,360
definitely something we looked at though

768
00:26:23,360 --> 00:26:24,960
that's kind of why we moved to looking

769
00:26:24,960 --> 00:26:27,520
at api security because that is going to

770
00:26:27,520 --> 00:26:30,080
be as an attacker your way to get those

771
00:26:30,080 --> 00:26:32,080
uids

772
00:26:32,080 --> 00:26:33,360
yeah

773
00:26:33,360 --> 00:26:35,200
the one other item there are like

774
00:26:35,200 --> 00:26:36,640
troubleshooting threads online where

775
00:26:36,640 --> 00:26:37,760
people were like posting that

776
00:26:37,760 --> 00:26:41,039
information so not a scalable attack but

777
00:26:41,039 --> 00:26:42,480
if you want to find them they're they're

778
00:26:42,480 --> 00:26:43,600
out there on

779
00:26:43,600 --> 00:26:45,840
you know reddit so

780
00:26:45,840 --> 00:26:48,080
no sure

781
00:26:48,080 --> 00:26:50,320
then

782
00:27:04,640 --> 00:27:07,640
research

783
00:27:17,760 --> 00:27:18,880
yeah

784
00:27:18,880 --> 00:27:21,039
no yeah so when when was this kind of

785
00:27:21,039 --> 00:27:23,360
conducted off around the clock things

786
00:27:23,360 --> 00:27:26,080
like that um this was entirely off the

787
00:27:26,080 --> 00:27:28,559
clock just by a keg hope people stay in

788
00:27:28,559 --> 00:27:29,840
the office and

789
00:27:29,840 --> 00:27:33,879
want to like chew on some cameras

790
00:27:43,380 --> 00:27:46,499
[Music]

791
00:27:46,559 --> 00:27:49,039
especially

792
00:28:01,600 --> 00:28:04,159
yeah yeah no definitely they were a huge

793
00:28:04,159 --> 00:28:06,799
help going

794
00:28:13,600 --> 00:28:14,799
yeah i mean

795
00:28:14,799 --> 00:28:17,039
essentially once we got through to the

796
00:28:17,039 --> 00:28:19,200
the kind of the minimum viable

797
00:28:19,200 --> 00:28:20,720
um stage there was a lot of help for

798
00:28:20,720 --> 00:28:22,480
disclosure but yeah it was you know

799
00:28:22,480 --> 00:28:24,480
we're just chewing on cameras

800
00:28:24,480 --> 00:28:25,279
yeah

801
00:28:25,279 --> 00:28:26,720
and one thing also keep in mind you know

802
00:28:26,720 --> 00:28:28,960
we bought like 12 or so different models

803
00:28:28,960 --> 00:28:30,480
not all of them were using through tech

804
00:28:30,480 --> 00:28:32,159
there was i think a couple other

805
00:28:32,159 --> 00:28:33,520
platforms that we really haven't looked

806
00:28:33,520 --> 00:28:34,559
into

807
00:28:34,559 --> 00:28:36,000
some of them have researched already out

808
00:28:36,000 --> 00:28:37,679
there so they were less exciting but

809
00:28:37,679 --> 00:28:39,039
it's not like everyone we bought was

810
00:28:39,039 --> 00:28:40,880
through tech it was those ones seemed

811
00:28:40,880 --> 00:28:41,919
more exciting because when we started

812
00:28:41,919 --> 00:28:44,000
looking it up there really wasn't any

813
00:28:44,000 --> 00:28:45,279
technical analysis so it was kind of

814
00:28:45,279 --> 00:28:47,679
like a a new technical exercise for us

815
00:28:47,679 --> 00:28:48,799
to go through but there's definitely

816
00:28:48,799 --> 00:28:50,880
other protocols that are used that like

817
00:28:50,880 --> 00:28:52,399
we didn't just pick through tech where

818
00:28:52,399 --> 00:28:54,080
like these guys are going down it just

819
00:28:54,080 --> 00:28:56,000
happened to be like one that was popular

820
00:28:56,000 --> 00:28:57,440
and you know

821
00:28:57,440 --> 00:28:59,600
the process we went through

822
00:28:59,600 --> 00:29:00,640
yeah

823
00:29:00,640 --> 00:29:04,360
oh sorry maybe first

824
00:29:12,159 --> 00:29:14,000
yeah the question is uh what if you're

825
00:29:14,000 --> 00:29:16,799
on the same network as the camera and

826
00:29:16,799 --> 00:29:18,559
it's completely broken um it just

827
00:29:18,559 --> 00:29:20,640
broadcasts it says like hey

828
00:29:20,640 --> 00:29:22,240
uh if you so we didn't talk about that

829
00:29:22,240 --> 00:29:24,159
but if you are on the same network

830
00:29:24,159 --> 00:29:25,679
before it reaches out to the servers to

831
00:29:25,679 --> 00:29:27,360
try to find it it's going to say is

832
00:29:27,360 --> 00:29:29,679
anyone on this network this id and you

833
00:29:29,679 --> 00:29:31,600
could just respond and

834
00:29:31,600 --> 00:29:34,879
it would give you the creds so

835
00:29:35,760 --> 00:29:37,840
yeah

836
00:29:37,840 --> 00:29:39,440
yeah that's gonna be your friend's baby

837
00:29:39,440 --> 00:29:41,360
right so luckily hopefully know that

838
00:29:41,360 --> 00:29:44,639
person but yeah

839
00:29:52,960 --> 00:29:56,080
they care um and

840
00:29:56,080 --> 00:29:57,679
i think at least the companies that

841
00:29:57,679 --> 00:29:59,039
we've been working with have been pretty

842
00:29:59,039 --> 00:30:00,880
receptive like letting us talk about it

843
00:30:00,880 --> 00:30:02,399
and and kind of share the information

844
00:30:02,399 --> 00:30:04,720
they are very hesitant to be named and

845
00:30:04,720 --> 00:30:05,840
that's why we tried pretty hard to make

846
00:30:05,840 --> 00:30:07,200
sure it's not like

847
00:30:07,200 --> 00:30:09,520
mapping back to an organization but

848
00:30:09,520 --> 00:30:11,600
um i think just the nature of it right

849
00:30:11,600 --> 00:30:12,880
the fact that it's

850
00:30:12,880 --> 00:30:15,679
camera footage and camera or audio

851
00:30:15,679 --> 00:30:17,760
there's some concern around it i do

852
00:30:17,760 --> 00:30:18,880
think

853
00:30:18,880 --> 00:30:20,880
through tech i mean they work with us

854
00:30:20,880 --> 00:30:21,919
they've shared their their

855
00:30:21,919 --> 00:30:23,679
recommendations on things i think my

856
00:30:23,679 --> 00:30:24,640
recommendations would be a little bit

857
00:30:24,640 --> 00:30:27,279
different but they did share uh kind of

858
00:30:27,279 --> 00:30:29,279
the way they would mitigate this and

859
00:30:29,279 --> 00:30:31,039
encourage their uh their vendors to

860
00:30:31,039 --> 00:30:33,760
update so but i think the response is is

861
00:30:33,760 --> 00:30:36,760
good

862
00:30:36,960 --> 00:30:37,679
yeah

863
00:30:37,679 --> 00:30:38,799
we can help them with that if they'd

864
00:30:38,799 --> 00:30:41,039
like

865
00:30:41,200 --> 00:30:44,440
uh yeah

866
00:30:57,440 --> 00:30:59,519
yeah the question is how cheap were some

867
00:30:59,519 --> 00:31:02,320
of these um

868
00:31:02,320 --> 00:31:03,600
yeah i mean i would say cheapest

869
00:31:03,600 --> 00:31:05,519
probably 20 or 30 dollars but maybe you

870
00:31:05,519 --> 00:31:07,760
know the top yeah at the higher end we

871
00:31:07,760 --> 00:31:09,679
had like a kind of small business home

872
00:31:09,679 --> 00:31:11,200
security system that i think was like a

873
00:31:11,200 --> 00:31:14,799
500 us dollar 600 us dollar initial

874
00:31:14,799 --> 00:31:16,320
buy-in and that's like your local

875
00:31:16,320 --> 00:31:18,880
mechanic or your local kind of retail

876
00:31:18,880 --> 00:31:20,399
store it comes with a couple cameras

877
00:31:20,399 --> 00:31:23,360
like a box to manage everything

878
00:31:23,360 --> 00:31:26,840
so at that level

879
00:31:32,570 --> 00:31:35,649
[Music]

880
00:31:36,880 --> 00:31:39,039
um are they more receptive and i think

881
00:31:39,039 --> 00:31:40,799
we're still working through kind of the

882
00:31:40,799 --> 00:31:43,519
process there um so don't have a great

883
00:31:43,519 --> 00:31:46,880
answer i i don't know that

884
00:31:46,880 --> 00:31:49,200
monetary value of camera was like

885
00:31:49,200 --> 00:31:50,799
linearly linked with how much people

886
00:31:50,799 --> 00:31:53,519
cared but i think there were

887
00:31:53,519 --> 00:31:55,519
um

888
00:31:55,519 --> 00:31:58,000
the kind of the the low technicality of

889
00:31:58,000 --> 00:32:00,159
like the end user for a lot of cameras

890
00:32:00,159 --> 00:32:01,679
right like you know people who just want

891
00:32:01,679 --> 00:32:03,840
to have the ability to watch

892
00:32:03,840 --> 00:32:05,200
an animal at home

893
00:32:05,200 --> 00:32:08,080
um not going to be sophisticated users

894
00:32:08,080 --> 00:32:09,120
and they're going to care a lot about

895
00:32:09,120 --> 00:32:10,960
like that brand image so

896
00:32:10,960 --> 00:32:12,399
the companies that

897
00:32:12,399 --> 00:32:14,480
rely kind of directly on people at that

898
00:32:14,480 --> 00:32:15,840
level buying it seemed to be a little

899
00:32:15,840 --> 00:32:17,519
bit more i think

900
00:32:17,519 --> 00:32:19,279
uh ready to

901
00:32:19,279 --> 00:32:20,240
to

902
00:32:20,240 --> 00:32:23,559
roll up sleeves

903
00:32:34,720 --> 00:32:35,840
yeah the question is do the

904
00:32:35,840 --> 00:32:38,399
recommendations work uh and the answer

905
00:32:38,399 --> 00:32:40,960
is yeah i would say they i'm okay with

906
00:32:40,960 --> 00:32:42,159
it we didn't talk too much about what

907
00:32:42,159 --> 00:32:42,880
the

908
00:32:42,880 --> 00:32:44,480
off key feature is but i'll go back to

909
00:32:44,480 --> 00:32:46,799
that slide

910
00:32:46,799 --> 00:32:49,360
unplug it uh it's it's not really like

911
00:32:49,360 --> 00:32:51,360
their recommendations were bad i think

912
00:32:51,360 --> 00:32:54,559
it just it's a tough problem to solve

913
00:32:54,559 --> 00:32:56,240
when you're basically saying you know

914
00:32:56,240 --> 00:32:58,320
you have these millions of cameras and

915
00:32:58,320 --> 00:33:00,080
like the platform

916
00:33:00,080 --> 00:33:02,240
is or was broken so what if you like

917
00:33:02,240 --> 00:33:04,720
updated it all to use this new uh like

918
00:33:04,720 --> 00:33:06,320
feature set and

919
00:33:06,320 --> 00:33:10,159
um so i mean the real answer probably is

920
00:33:10,159 --> 00:33:12,000
the old version should just be decommed

921
00:33:12,000 --> 00:33:13,679
and like it doesn't work anymore and

922
00:33:13,679 --> 00:33:15,919
then you those aren't features those are

923
00:33:15,919 --> 00:33:16,640
like

924
00:33:16,640 --> 00:33:19,200
those are there they're needed but using

925
00:33:19,200 --> 00:33:22,320
them will require like the vendor to do

926
00:33:22,320 --> 00:33:24,000
something right so if your

927
00:33:24,000 --> 00:33:25,760
camera manufacturer s you're you are

928
00:33:25,760 --> 00:33:27,840
going to have to make the change and

929
00:33:27,840 --> 00:33:29,919
support these new functions and like the

930
00:33:29,919 --> 00:33:31,519
dtls feature

931
00:33:31,519 --> 00:33:33,679
i mean it's an ssl thing so you might

932
00:33:33,679 --> 00:33:35,840
not even have a chip that's fast enough

933
00:33:35,840 --> 00:33:37,200
for this most of them are i mean they're

934
00:33:37,200 --> 00:33:38,960
cameras so they usually do but that was

935
00:33:38,960 --> 00:33:40,559
one of their pushbacks was like not all

936
00:33:40,559 --> 00:33:42,159
cameras can support

937
00:33:42,159 --> 00:33:44,000
the suite of ssl so that feature like

938
00:33:44,000 --> 00:33:46,080
might not be something you can turn on

939
00:33:46,080 --> 00:33:48,720
and i mean i get it but you still want

940
00:33:48,720 --> 00:33:50,720
the data to be like encrypted and safe

941
00:33:50,720 --> 00:33:54,159
so um if you use those features a lot

942
00:33:54,159 --> 00:33:56,480
like this stuff does drop away so i'm

943
00:33:56,480 --> 00:33:57,840
happy about that

944
00:33:57,840 --> 00:34:00,559
um i just think the old like

945
00:34:00,559 --> 00:34:02,159
if it's not fixed like all the cameras

946
00:34:02,159 --> 00:34:03,840
we didn't buy right like what are they

947
00:34:03,840 --> 00:34:06,480
doing i'm not sure

948
00:34:11,520 --> 00:34:13,359
depending on the features that are used

949
00:34:13,359 --> 00:34:16,079
the question is the video encrypted um

950
00:34:16,079 --> 00:34:17,520
the video

951
00:34:17,520 --> 00:34:19,839
can be encrypted but depending on the

952
00:34:19,839 --> 00:34:23,359
different features used it might not be

953
00:34:24,159 --> 00:34:26,879
question yeah

954
00:34:30,079 --> 00:34:32,399
sorry

955
00:34:33,440 --> 00:34:34,879
uh yeah i actually did see a couple of

956
00:34:34,879 --> 00:34:36,239
them that were using it uh the question

957
00:34:36,239 --> 00:34:38,079
is is the dtls feature used i had to

958
00:34:38,079 --> 00:34:40,239
like really look up how it's implemented

959
00:34:40,239 --> 00:34:42,159
technically it's a kind of a i don't

960
00:34:42,159 --> 00:34:43,839
know if it's a secure feature of ssl but

961
00:34:43,839 --> 00:34:45,440
it's definitely not a uh

962
00:34:45,440 --> 00:34:48,239
a very common one they were using a dtls

963
00:34:48,239 --> 00:34:50,399
psk so there's like a psk

964
00:34:50,399 --> 00:34:52,239
exchange as part of it which derives

965
00:34:52,239 --> 00:34:53,199
some other keys and then it's

966
00:34:53,199 --> 00:34:54,560
essentially a

967
00:34:54,560 --> 00:34:57,040
ssl wrapped udp connection to pass the

968
00:34:57,040 --> 00:34:59,040
data which which is actually really cool

969
00:34:59,040 --> 00:35:01,200
um i just wish that was on all the time

970
00:35:01,200 --> 00:35:03,520
because i would more properly protect

971
00:35:03,520 --> 00:35:06,720
the data in transit

972
00:35:12,320 --> 00:35:13,839
okay cool well we'll be hanging around

973
00:35:13,839 --> 00:35:15,839
here um thanks all for for joining us

974
00:35:15,839 --> 00:35:17,200
and hope you guys enjoyed the content

975
00:35:17,200 --> 00:35:18,400
and uh

976
00:35:18,400 --> 00:35:19,839
yeah thanks to nilcon for having us out

977
00:35:19,839 --> 00:35:20,920
here

978
00:35:20,920 --> 00:35:25,110
[Applause]

