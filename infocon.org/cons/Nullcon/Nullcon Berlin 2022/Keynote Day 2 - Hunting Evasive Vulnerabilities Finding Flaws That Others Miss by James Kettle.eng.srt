1
00:00:00,080 --> 00:00:00,799
hi

2
00:00:00,799 --> 00:00:03,520
good morning and welcome to hunting

3
00:00:03,520 --> 00:00:06,399
evasive vulnerabilities

4
00:00:06,399 --> 00:00:08,160
do you ever wonder about the

5
00:00:08,160 --> 00:00:10,320
vulnerabilities you've missed

6
00:00:10,320 --> 00:00:12,320
sometimes it may have felt like there

7
00:00:12,320 --> 00:00:14,559
was something there just out of your

8
00:00:14,559 --> 00:00:16,720
grasp if only you had

9
00:00:16,720 --> 00:00:18,480
a few more hours

10
00:00:18,480 --> 00:00:20,800
whereas other times i think we're all

11
00:00:20,800 --> 00:00:23,600
just happily oblivious

12
00:00:23,600 --> 00:00:25,840
some vulnerabilities are evasive they

13
00:00:25,840 --> 00:00:28,240
have this knack for hiding from us and

14
00:00:28,240 --> 00:00:30,400
in this session i'm going to explore how

15
00:00:30,400 --> 00:00:32,880
they hide and share with you techniques

16
00:00:32,880 --> 00:00:34,960
to find them

17
00:00:34,960 --> 00:00:36,960
evasive vulnerabilities come in many

18
00:00:36,960 --> 00:00:39,040
forms and sometimes they're really quite

19
00:00:39,040 --> 00:00:41,600
simple and it's what's nearby that makes

20
00:00:41,600 --> 00:00:43,520
them hard to find

21
00:00:43,520 --> 00:00:44,879
have you ever had your attention

22
00:00:44,879 --> 00:00:47,039
captured so strongly by something that

23
00:00:47,039 --> 00:00:48,719
you missed something else that was

24
00:00:48,719 --> 00:00:50,879
basically staring you in the face

25
00:00:50,879 --> 00:00:53,360
this is something i call an attention

26
00:00:53,360 --> 00:00:56,160
trap and it's a bit like when a magician

27
00:00:56,160 --> 00:00:58,640
does a magic trick and they use

28
00:00:58,640 --> 00:01:00,800
misdirection to make you focus on

29
00:01:00,800 --> 00:01:03,039
something and miss something else that's

30
00:01:03,039 --> 00:01:05,680
happening right under your nose

31
00:01:05,680 --> 00:01:08,400
i had an extremely near miss with one of

32
00:01:08,400 --> 00:01:11,159
these back in 2011. i was hacking

33
00:01:11,159 --> 00:01:13,200
addons.mozilla.org where firefox

34
00:01:13,200 --> 00:01:14,640
extensions live

35
00:01:14,640 --> 00:01:16,479
and i found multiple inputs on the

36
00:01:16,479 --> 00:01:18,880
developer profile page all vulnerable to

37
00:01:18,880 --> 00:01:21,600
stored xss but there was a catch

38
00:01:21,600 --> 00:01:23,520
which is every

39
00:01:23,520 --> 00:01:25,600
unfiltered input was limited to 10

40
00:01:25,600 --> 00:01:26,720
characters

41
00:01:26,720 --> 00:01:28,799
and there was junk data everywhere and

42
00:01:28,799 --> 00:01:31,439
each input was reflected multiple times

43
00:01:31,439 --> 00:01:33,439
in different places in short it was a

44
00:01:33,439 --> 00:01:35,119
giant mess

45
00:01:35,119 --> 00:01:37,840
and i quickly got half a working payload

46
00:01:37,840 --> 00:01:39,439
written and then i got stuck because the

47
00:01:39,439 --> 00:01:41,119
obvious way of closing this payload off

48
00:01:41,119 --> 00:01:43,200
required 11 characters

49
00:01:43,200 --> 00:01:45,280
and i only had 10. and i thought well

50
00:01:45,280 --> 00:01:47,200
maybe i can try a javascript string

51
00:01:47,200 --> 00:01:48,720
instead or something but if i sent a

52
00:01:48,720 --> 00:01:50,720
quote the application just blocked it

53
00:01:50,720 --> 00:01:53,280
and so i spent hour after hour hacking

54
00:01:53,280 --> 00:01:55,520
away on this and eventually i got the

55
00:01:55,520 --> 00:01:57,439
following working payload which converts

56
00:01:57,439 --> 00:01:59,840
the multi-line string into a multi-line

57
00:01:59,840 --> 00:02:01,759
comment into a single line comment and

58
00:02:01,759 --> 00:02:04,719
then uses a new line to break out of it

59
00:02:04,719 --> 00:02:06,320
and that worked and i sent that off to

60
00:02:06,320 --> 00:02:08,720
mozilla feeling really quite pleased

61
00:02:08,720 --> 00:02:10,639
with myself

62
00:02:10,639 --> 00:02:13,040
but then a few hours later when i calmed

63
00:02:13,040 --> 00:02:16,080
down slightly a couple of questions just

64
00:02:16,080 --> 00:02:19,280
drifted into my head which are

65
00:02:19,280 --> 00:02:22,160
why is it that when i send backslash n

66
00:02:22,160 --> 00:02:24,640
that gets reflected back to me as a raw

67
00:02:24,640 --> 00:02:25,920
new line

68
00:02:25,920 --> 00:02:28,640
isn't that slightly curious

69
00:02:28,640 --> 00:02:30,480
and uh the other question is well why is

70
00:02:30,480 --> 00:02:32,239
it that the application seems to block

71
00:02:32,239 --> 00:02:34,000
requests with a single quote but not

72
00:02:34,000 --> 00:02:37,040
containing any other character

73
00:02:37,040 --> 00:02:38,959
and the answer of course is this is also

74
00:02:38,959 --> 00:02:41,280
vulnerable to sql injection

75
00:02:41,280 --> 00:02:43,920
i just almost missed this much more

76
00:02:43,920 --> 00:02:45,920
serious vulnerability because i was so

77
00:02:45,920 --> 00:02:47,920
focused on the extra sets it was almost

78
00:02:47,920 --> 00:02:50,180
like the xss exploited me

79
00:02:50,180 --> 00:02:51,360
[Music]

80
00:02:51,360 --> 00:02:53,040
i do do you think that's ever happened

81
00:02:53,040 --> 00:02:54,160
to you

82
00:02:54,160 --> 00:02:56,319
it's it's hard to tell right you don't

83
00:02:56,319 --> 00:02:58,879
really know unless you just luckily find

84
00:02:58,879 --> 00:02:59,840
it but

85
00:02:59,840 --> 00:03:02,239
the good news is if you understand these

86
00:03:02,239 --> 00:03:04,560
vulnerabilities and the way they hide

87
00:03:04,560 --> 00:03:06,400
you can start to recognize these

88
00:03:06,400 --> 00:03:08,480
dangerous situations and then react to

89
00:03:08,480 --> 00:03:09,519
them

90
00:03:09,519 --> 00:03:11,840
so today i'm going to talk about why

91
00:03:11,840 --> 00:03:14,159
these volume vulnerabilities deserve our

92
00:03:14,159 --> 00:03:15,760
special attention

93
00:03:15,760 --> 00:03:17,680
how they hide where scanning and

94
00:03:17,680 --> 00:03:19,680
automation fit into the puzzle and where

95
00:03:19,680 --> 00:03:20,640
they don't

96
00:03:20,640 --> 00:03:23,840
uh and then wrap up and take up to five

97
00:03:23,840 --> 00:03:26,159
minutes of questions

98
00:03:26,159 --> 00:03:28,640
first off teeny bit of background

99
00:03:28,640 --> 00:03:31,280
uh at the end of 2009 i won the first

100
00:03:31,280 --> 00:03:33,760
ever knuckle and capture the flag

101
00:03:33,760 --> 00:03:36,159
which i'm extremely proud

102
00:03:36,159 --> 00:03:38,400
and decided to call myself albino wax

103
00:03:38,400 --> 00:03:39,840
for reasons i'm not going to talk about

104
00:03:39,840 --> 00:03:40,879
now

105
00:03:40,879 --> 00:03:42,560
and i've been hacking websites ever

106
00:03:42,560 --> 00:03:43,440
since

107
00:03:43,440 --> 00:03:45,040
i've spent the majority of that time

108
00:03:45,040 --> 00:03:47,599
helping out with burp suite researching

109
00:03:47,599 --> 00:03:50,319
new techniques and also researching old

110
00:03:50,319 --> 00:03:51,599
techniques that people weren't paying

111
00:03:51,599 --> 00:03:54,000
much attention to and some of those are

112
00:03:54,000 --> 00:03:55,760
quite popular these days which is really

113
00:03:55,760 --> 00:03:57,040
cool

114
00:03:57,040 --> 00:03:59,040
but during this time

115
00:03:59,040 --> 00:04:02,080
i've become increasingly conscious that

116
00:04:02,080 --> 00:04:04,879
there's a lot of vulnerabilities in well

117
00:04:04,879 --> 00:04:06,959
understood and well documented attack

118
00:04:06,959 --> 00:04:09,599
classes that are still missed by most

119
00:04:09,599 --> 00:04:12,159
people like i miss these other people

120
00:04:12,159 --> 00:04:14,000
miss these and scanners definitely miss

121
00:04:14,000 --> 00:04:16,399
things and often we all miss the same

122
00:04:16,399 --> 00:04:17,759
things

123
00:04:17,759 --> 00:04:19,600
now plenty of people know that this is

124
00:04:19,600 --> 00:04:21,680
the situation but if you will want to

125
00:04:21,680 --> 00:04:24,000
talk about this very much because you're

126
00:04:24,000 --> 00:04:25,680
not going to sell your scanner or your

127
00:04:25,680 --> 00:04:27,600
consultancy services talking about all

128
00:04:27,600 --> 00:04:28,800
the terrible vulnerabilities that

129
00:04:28,800 --> 00:04:30,400
they'll leave in the application after

130
00:04:30,400 --> 00:04:32,080
the audit is finished

131
00:04:32,080 --> 00:04:33,440
for any hackers who are going to turn up

132
00:04:33,440 --> 00:04:34,960
later

133
00:04:34,960 --> 00:04:38,080
so today i'm not here to share a new

134
00:04:38,080 --> 00:04:40,800
attack class or new techniques instead

135
00:04:40,800 --> 00:04:43,440
i'm going to tackle two questions

136
00:04:43,440 --> 00:04:45,440
what factors hide

137
00:04:45,440 --> 00:04:47,280
regular vulnerabilities and make us miss

138
00:04:47,280 --> 00:04:48,000
them

139
00:04:48,000 --> 00:04:51,759
and how can we overcome them

140
00:04:51,919 --> 00:04:54,560
evasive vulnerabilities have always

141
00:04:54,560 --> 00:04:57,360
existed but they're becoming more

142
00:04:57,360 --> 00:04:59,199
important every year because obvious

143
00:04:59,199 --> 00:05:01,680
vulnerabilities in high value targets

144
00:05:01,680 --> 00:05:03,680
are dwindling because by the time you

145
00:05:03,680 --> 00:05:05,440
look at something chances are it's

146
00:05:05,440 --> 00:05:07,120
already been hit with white box scanning

147
00:05:07,120 --> 00:05:09,199
black box scanning and other manual

148
00:05:09,199 --> 00:05:11,759
tests so all the obvious vulnerabilities

149
00:05:11,759 --> 00:05:14,000
are mostly gone

150
00:05:14,000 --> 00:05:17,199
meanwhile evasive vulnerabilities mostly

151
00:05:17,199 --> 00:05:19,440
don't get found and fixed by definition

152
00:05:19,440 --> 00:05:22,240
so they only get patched by accident and

153
00:05:22,240 --> 00:05:25,360
they just tend to pile up over time

154
00:05:25,360 --> 00:05:27,600
they're also correlated with application

155
00:05:27,600 --> 00:05:29,759
complexity which is increasing so the

156
00:05:29,759 --> 00:05:31,520
raw number of these vulnerabilities that

157
00:05:31,520 --> 00:05:34,000
are present is also probably increasing

158
00:05:34,000 --> 00:05:35,600
over time

159
00:05:35,600 --> 00:05:38,160
and taken together that means that the

160
00:05:38,160 --> 00:05:40,639
ability to find these vulnerabilities is

161
00:05:40,639 --> 00:05:42,800
becoming essential for finding good

162
00:05:42,800 --> 00:05:45,120
issues in high value targets and it

163
00:05:45,120 --> 00:05:48,880
becomes more essential each year

164
00:05:49,280 --> 00:05:51,120
that's the uh that's the logical reason

165
00:05:51,120 --> 00:05:52,720
to care about

166
00:05:52,720 --> 00:05:54,880
evasive vulnerabilities

167
00:05:54,880 --> 00:05:56,639
but i'd be lying if i said that's why i

168
00:05:56,639 --> 00:05:58,479
care uh for me there's a different

169
00:05:58,479 --> 00:06:01,039
reason and i think this exploit captures

170
00:06:01,039 --> 00:06:03,120
it some of you might recognize it but if

171
00:06:03,120 --> 00:06:05,280
you don't enjoy

172
00:06:05,280 --> 00:06:07,440
here we've got a two-factor

173
00:06:07,440 --> 00:06:09,759
authentication prompt from authy they're

174
00:06:09,759 --> 00:06:11,840
a third-party author provider so

175
00:06:11,840 --> 00:06:13,759
providing this kind of prompt is their

176
00:06:13,759 --> 00:06:14,960
job

177
00:06:14,960 --> 00:06:16,000
and

178
00:06:16,000 --> 00:06:17,840
if you look at this you might build a

179
00:06:17,840 --> 00:06:19,600
kind of mental model for how this system

180
00:06:19,600 --> 00:06:21,360
works and think okay they're comparing

181
00:06:21,360 --> 00:06:23,280
the value i submit with the value

182
00:06:23,280 --> 00:06:24,800
they've generated and stored in the

183
00:06:24,800 --> 00:06:27,680
database so maybe i should try sql

184
00:06:27,680 --> 00:06:29,039
injection right

185
00:06:29,039 --> 00:06:32,160
and sql injection doesn't work

186
00:06:32,160 --> 00:06:35,199
but homikov found something that does

187
00:06:35,199 --> 00:06:37,039
work he found you could bypass this

188
00:06:37,039 --> 00:06:39,360
prompt on a lot of different websites

189
00:06:39,360 --> 00:06:42,560
all using authy by entering

190
00:06:42,560 --> 00:06:44,560
sms

191
00:06:44,560 --> 00:06:47,039
this is not a complex payload but

192
00:06:47,039 --> 00:06:49,199
it is it's elegant it's effective and

193
00:06:49,199 --> 00:06:50,720
unless you have a great knowledge of how

194
00:06:50,720 --> 00:06:52,560
that system works it's really quite

195
00:06:52,560 --> 00:06:54,240
surprising too

196
00:06:54,240 --> 00:06:56,319
and i'm interested in evasive

197
00:06:56,319 --> 00:06:58,000
vulnerabilities because the world is

198
00:06:58,000 --> 00:07:00,160
just a more interesting place with

199
00:07:00,160 --> 00:07:02,720
findings like that

200
00:07:02,720 --> 00:07:03,520
so

201
00:07:03,520 --> 00:07:05,680
let's make things interesting

202
00:07:05,680 --> 00:07:08,080
so in this section i'll explore

203
00:07:08,080 --> 00:07:09,599
different factors that hide

204
00:07:09,599 --> 00:07:11,840
vulnerabilities and i'll illustrate each

205
00:07:11,840 --> 00:07:13,599
one with a case study

206
00:07:13,599 --> 00:07:15,520
every case study is from my personal

207
00:07:15,520 --> 00:07:16,880
experience it's from it's a

208
00:07:16,880 --> 00:07:19,120
vulnerability i either almost missed and

209
00:07:19,120 --> 00:07:21,440
maybe found you to luck or one that i

210
00:07:21,440 --> 00:07:24,400
did miss and then discovered i'd missed

211
00:07:24,400 --> 00:07:26,960
a few years later

212
00:07:26,960 --> 00:07:28,880
i've taken these all from my personal

213
00:07:28,880 --> 00:07:30,080
experience because although

214
00:07:30,080 --> 00:07:31,680
vulnerability write-ups are a great

215
00:07:31,680 --> 00:07:33,520
source of information

216
00:07:33,520 --> 00:07:35,919
it's often hard to learn much about how

217
00:07:35,919 --> 00:07:37,599
vulnerabilities hide from them because

218
00:07:37,599 --> 00:07:39,599
they're so focused on the vulnerability

219
00:07:39,599 --> 00:07:42,639
and not how it was discovered

220
00:07:42,639 --> 00:07:43,919
because these are from my personal

221
00:07:43,919 --> 00:07:45,520
experience unfortunately they're all

222
00:07:45,520 --> 00:07:47,440
about web

223
00:07:47,440 --> 00:07:49,440
but i think they'll be valuable to

224
00:07:49,440 --> 00:07:51,360
everyone regardless of what your

225
00:07:51,360 --> 00:07:53,599
specialism is because it's not really

226
00:07:53,599 --> 00:07:55,039
about the case studies they're just

227
00:07:55,039 --> 00:07:57,840
there to help communicate concepts which

228
00:07:57,840 --> 00:08:01,039
are more universal

229
00:08:01,039 --> 00:08:02,319
to start off

230
00:08:02,319 --> 00:08:05,039
let's take a look at a really common

231
00:08:05,039 --> 00:08:08,560
problem the highly visible defense

232
00:08:08,560 --> 00:08:10,240
a long time ago i made a proof of

233
00:08:10,240 --> 00:08:13,240
concept for quite a fancy attack against

234
00:08:13,240 --> 00:08:15,520
bugzilla.mozilla.org and it demonstrated

235
00:08:15,520 --> 00:08:17,680
that by loading bugzilla's search page

236
00:08:17,680 --> 00:08:20,000
inside an iframe in my victim's browser

237
00:08:20,000 --> 00:08:22,319
and repeatedly reloading it and timing

238
00:08:22,319 --> 00:08:24,720
how long it took to load i could extract

239
00:08:24,720 --> 00:08:27,360
secret bug contents which could include

240
00:08:27,360 --> 00:08:29,759
firefox zero days and other juicy stuff

241
00:08:29,759 --> 00:08:31,280
like that

242
00:08:31,280 --> 00:08:33,279
now the important thing to know about

243
00:08:33,279 --> 00:08:35,039
this proof of concept is that it

244
00:08:35,039 --> 00:08:36,559
definitely works

245
00:08:36,559 --> 00:08:38,880
uh it was quite slow i think it took

246
00:08:38,880 --> 00:08:40,958
about one minute to extract one

247
00:08:40,958 --> 00:08:43,839
character uh but it definitely worked it

248
00:08:43,839 --> 00:08:45,680
you gave it time and it would get there

249
00:08:45,680 --> 00:08:47,360
and it would get that bug

250
00:08:47,360 --> 00:08:49,920
and so i was quite surprised when i

251
00:08:49,920 --> 00:08:51,839
submitted this to mozilla

252
00:08:51,839 --> 00:08:52,959
and

253
00:08:52,959 --> 00:08:54,080
it might be someone in this room who

254
00:08:54,080 --> 00:08:55,920
said this actually uh

255
00:08:55,920 --> 00:08:58,480
and they said this attack can't possibly

256
00:08:58,480 --> 00:09:00,880
work because bugzilla is protected

257
00:09:00,880 --> 00:09:02,720
against this thanks to the x-frame

258
00:09:02,720 --> 00:09:04,240
options head

259
00:09:04,240 --> 00:09:05,120
and

260
00:09:05,120 --> 00:09:07,040
x-frame options does a great job of

261
00:09:07,040 --> 00:09:08,880
stopping people from framing pages and

262
00:09:08,880 --> 00:09:11,519
my attack relied on framing this page so

263
00:09:11,519 --> 00:09:13,839
i thought well they must be wrong

264
00:09:13,839 --> 00:09:15,920
that header must just not be present

265
00:09:15,920 --> 00:09:18,320
and i looked and there it was

266
00:09:18,320 --> 00:09:21,360
x frame options same origin now

267
00:09:21,360 --> 00:09:23,200
if i'd seen that header i would have

268
00:09:23,200 --> 00:09:24,560
never bothered writing the proof of

269
00:09:24,560 --> 00:09:26,399
concept because i would have never

270
00:09:26,399 --> 00:09:28,480
thought that it would have worked but

271
00:09:28,480 --> 00:09:30,480
the thing was it did and after a bunch

272
00:09:30,480 --> 00:09:32,880
more digging it turned out one of their

273
00:09:32,880 --> 00:09:35,279
back-end servers specified all the

274
00:09:35,279 --> 00:09:36,800
headers twice

275
00:09:36,800 --> 00:09:38,560
and then the front end concatenated that

276
00:09:38,560 --> 00:09:40,320
into a single header like so and then

277
00:09:40,320 --> 00:09:42,080
when firefox saw that it saw that and

278
00:09:42,080 --> 00:09:43,440
they thought yes we should totally be

279
00:09:43,440 --> 00:09:45,120
framing this response that's absolutely

280
00:09:45,120 --> 00:09:47,040
fine

281
00:09:47,040 --> 00:09:47,839
uh

282
00:09:47,839 --> 00:09:49,120
so yeah that was why the proof of

283
00:09:49,120 --> 00:09:50,959
concept worked on firefox and they

284
00:09:50,959 --> 00:09:52,160
patched the back end so it didn't

285
00:09:52,160 --> 00:09:53,839
duplicate the headers and they patched

286
00:09:53,839 --> 00:09:55,839
firefox so it wouldn't treat that

287
00:09:55,839 --> 00:09:58,560
response as being frameable

288
00:09:58,560 --> 00:10:00,480
and the crazy thing was the technique

289
00:10:00,480 --> 00:10:03,200
still worked on opera i told you this

290
00:10:03,200 --> 00:10:05,839
was a long time ago

291
00:10:05,839 --> 00:10:07,680
and it was like how can this possibly

292
00:10:07,680 --> 00:10:09,519
work on opera this definitely isn't

293
00:10:09,519 --> 00:10:11,920
frameable now and that turned out to be

294
00:10:11,920 --> 00:10:13,360
because it was doing the attack

295
00:10:13,360 --> 00:10:15,120
successfully by measuring the time it

296
00:10:15,120 --> 00:10:16,880
took opera to display

297
00:10:16,880 --> 00:10:18,399
the page that said you're not allowed to

298
00:10:18,399 --> 00:10:21,600
display this inside an iframe

299
00:10:21,600 --> 00:10:22,959
so

300
00:10:22,959 --> 00:10:25,279
all the this is an evasive vulnerability

301
00:10:25,279 --> 00:10:27,120
because if you see the defense you think

302
00:10:27,120 --> 00:10:28,640
the defense is going to work and you

303
00:10:28,640 --> 00:10:31,200
don't try the attack and the way to

304
00:10:31,200 --> 00:10:33,120
dodge this kind of issue

305
00:10:33,120 --> 00:10:35,200
it's kind of blunt but don't look for

306
00:10:35,200 --> 00:10:36,640
defenses

307
00:10:36,640 --> 00:10:39,120
instead just start with the attack and

308
00:10:39,120 --> 00:10:41,600
then if the attack fails then it's time

309
00:10:41,600 --> 00:10:43,760
to try and figure out why and try and

310
00:10:43,760 --> 00:10:45,200
fix it and if there's a defense that's

311
00:10:45,200 --> 00:10:47,279
actually relevant to you

312
00:10:47,279 --> 00:10:50,560
then you'll find it

313
00:10:52,000 --> 00:10:54,160
the impact of visible defenses can be

314
00:10:54,160 --> 00:10:56,480
seen even at the scale of entire attack

315
00:10:56,480 --> 00:10:57,760
classes

316
00:10:57,760 --> 00:11:00,399
if you pick a niche vulnerability class

317
00:11:00,399 --> 00:11:02,240
there's a fair chance that you'll see a

318
00:11:02,240 --> 00:11:04,399
wave pattern uh in the search interest

319
00:11:04,399 --> 00:11:06,480
in it like this and this has a bunch of

320
00:11:06,480 --> 00:11:08,880
courses absolutely but one of them

321
00:11:08,880 --> 00:11:10,800
is ineffective defenses

322
00:11:10,800 --> 00:11:13,040
doing a great job of putting people off

323
00:11:13,040 --> 00:11:14,880
trying that idea out

324
00:11:14,880 --> 00:11:17,040
this particular technique was published

325
00:11:17,040 --> 00:11:19,680
in 96 under the title web spoofing and

326
00:11:19,680 --> 00:11:21,760
internet con game and these days it's

327
00:11:21,760 --> 00:11:25,120
more widely known as dns rebinding now

328
00:11:25,120 --> 00:11:27,120
when this was released in 96 it was

329
00:11:27,120 --> 00:11:29,920
fairly promptly patched in web browsers

330
00:11:29,920 --> 00:11:32,079
via a mechanism called dns pinning but

331
00:11:32,079 --> 00:11:34,240
the thing is dns pinning has never

332
00:11:34,240 --> 00:11:36,160
actually worked it's never actually made

333
00:11:36,160 --> 00:11:39,040
it impossible to do this attack

334
00:11:39,040 --> 00:11:41,519
all it's done is it's helped create this

335
00:11:41,519 --> 00:11:44,240
crazy wave effect so

336
00:11:44,240 --> 00:11:46,720
in this graph every peak is someone

337
00:11:46,720 --> 00:11:48,240
giving a presentation at a major

338
00:11:48,240 --> 00:11:50,240
conference saying dns pinning doesn't

339
00:11:50,240 --> 00:11:51,200
work

340
00:11:51,200 --> 00:11:52,959
you can bypass it and here's some cool

341
00:11:52,959 --> 00:11:55,440
attacks you can do with dns with dns we

342
00:11:55,440 --> 00:11:56,800
find it

343
00:11:56,800 --> 00:11:58,880
but then after a couple of years

344
00:11:58,880 --> 00:12:00,639
everyone just forgets

345
00:12:00,639 --> 00:12:03,360
and we enter one of these troughs and in

346
00:12:03,360 --> 00:12:05,440
the troughs this vulnerability every

347
00:12:05,440 --> 00:12:07,839
vulnerability in this entire class is

348
00:12:07,839 --> 00:12:09,200
evasive

349
00:12:09,200 --> 00:12:11,120
because no one is thinking about this

350
00:12:11,120 --> 00:12:13,519
class no one is talking about it no one

351
00:12:13,519 --> 00:12:14,959
is publishing write-ups using this

352
00:12:14,959 --> 00:12:17,360
technique and i i have personal

353
00:12:17,360 --> 00:12:19,440
experience of if you mention this

354
00:12:19,440 --> 00:12:20,720
technique

355
00:12:20,720 --> 00:12:23,040
in one of those troughs to a tester

356
00:12:23,040 --> 00:12:24,480
who's been in the field a while they may

357
00:12:24,480 --> 00:12:26,000
well have heard of it and they'll say

358
00:12:26,000 --> 00:12:27,440
something like nah it doesn't really

359
00:12:27,440 --> 00:12:29,120
work it's not practical

360
00:12:29,120 --> 00:12:30,079
or

361
00:12:30,079 --> 00:12:31,760
dns pinning means that it just doesn't

362
00:12:31,760 --> 00:12:33,279
really work and it's not worth trying it

363
00:12:33,279 --> 00:12:35,040
people will brush it off

364
00:12:35,040 --> 00:12:40,000
or they'll even say it's too old and

365
00:12:40,000 --> 00:12:41,760
you shouldn't call a vulnerability class

366
00:12:41,760 --> 00:12:43,040
too often

367
00:12:43,040 --> 00:12:44,800
this is a terrible thing what you're

368
00:12:44,800 --> 00:12:46,320
doing there is uh

369
00:12:46,320 --> 00:12:48,399
you're you're conflating it with a bug

370
00:12:48,399 --> 00:12:51,279
if a bug is really old yeah it's often

371
00:12:51,279 --> 00:12:53,040
not so valuable but if the vulnerability

372
00:12:53,040 --> 00:12:54,639
class is old it just means there's less

373
00:12:54,639 --> 00:12:56,480
other people using it which is great

374
00:12:56,480 --> 00:12:58,639
it's probably more valuable

375
00:12:58,639 --> 00:13:01,360
this lack of a long-term memory

376
00:13:01,360 --> 00:13:03,200
is also why you see techniques getting

377
00:13:03,200 --> 00:13:05,200
reinvented repeatedly by people who

378
00:13:05,200 --> 00:13:06,880
never knew they existed in the first

379
00:13:06,880 --> 00:13:09,200
place so they think they found something

380
00:13:09,200 --> 00:13:10,880
hot and new and then someone always pops

381
00:13:10,880 --> 00:13:13,120
out of the woodwork in the comments and

382
00:13:13,120 --> 00:13:14,720
is like oh this person documented this

383
00:13:14,720 --> 00:13:17,440
10 years ago but you can't really blame

384
00:13:17,440 --> 00:13:19,440
them because our overall awareness of

385
00:13:19,440 --> 00:13:22,720
techniques fades so fast

386
00:13:22,720 --> 00:13:23,680
and

387
00:13:23,680 --> 00:13:25,680
this the solution here is well

388
00:13:25,680 --> 00:13:27,519
absolutely seek out old and

389
00:13:27,519 --> 00:13:29,839
unfashionable techniques

390
00:13:29,839 --> 00:13:31,519
and i definitely recommend that but it's

391
00:13:31,519 --> 00:13:33,440
not quite that simple

392
00:13:33,440 --> 00:13:35,200
because there's a catch

393
00:13:35,200 --> 00:13:37,920
which is that our understanding of niche

394
00:13:37,920 --> 00:13:41,519
techniques degrades it rots over time

395
00:13:41,519 --> 00:13:43,680
right down to the very definition you

396
00:13:43,680 --> 00:13:45,040
can see this with

397
00:13:45,040 --> 00:13:46,480
request smuggling it used to mean

398
00:13:46,480 --> 00:13:48,720
causing a d-sync between a proxy or a

399
00:13:48,720 --> 00:13:51,120
reverse proxy on the server thereby

400
00:13:51,120 --> 00:13:53,440
compromising random live users

401
00:13:53,440 --> 00:13:55,440
accounts and yet for a period of about

402
00:13:55,440 --> 00:13:58,480
10 years that term the same exact term

403
00:13:58,480 --> 00:13:59,760
was used to mean

404
00:13:59,760 --> 00:14:03,040
bypassing wafts basically and it's no

405
00:14:03,040 --> 00:14:04,720
wonder that people didn't pay that much

406
00:14:04,720 --> 00:14:06,079
attention to it because that's just not

407
00:14:06,079 --> 00:14:08,240
that exciting right

408
00:14:08,240 --> 00:14:09,839
and you can see the same with hd

409
00:14:09,839 --> 00:14:11,279
response splitter

410
00:14:11,279 --> 00:14:13,839
this used to mean injecting headers in

411
00:14:13,839 --> 00:14:16,160
the response in order to cause a desync

412
00:14:16,160 --> 00:14:18,240
and exploit random live users and over

413
00:14:18,240 --> 00:14:19,040
time

414
00:14:19,040 --> 00:14:21,360
it got corrupted and watered down to

415
00:14:21,360 --> 00:14:23,440
basically mean injecting headers in the

416
00:14:23,440 --> 00:14:28,560
response in order to get reflected xss

417
00:14:28,639 --> 00:14:30,560
this is

418
00:14:30,560 --> 00:14:33,120
really quite scary because what it means

419
00:14:33,120 --> 00:14:35,600
is if you hear of this technique and you

420
00:14:35,600 --> 00:14:37,600
google it well google prioritizes the

421
00:14:37,600 --> 00:14:39,760
most recently written posts so what

422
00:14:39,760 --> 00:14:41,519
you're going to land on is the most

423
00:14:41,519 --> 00:14:43,760
watered-down useless explanation of this

424
00:14:43,760 --> 00:14:45,839
technique and you walk away thinking you

425
00:14:45,839 --> 00:14:48,000
understand what response splitting is or

426
00:14:48,000 --> 00:14:49,519
what request smuggling is and you've

427
00:14:49,519 --> 00:14:51,680
actually learned something that's far

428
00:14:51,680 --> 00:14:55,519
less valuable than the original source

429
00:14:55,519 --> 00:14:56,320
and

430
00:14:56,320 --> 00:14:58,399
you can witness this uh for yourself

431
00:14:58,399 --> 00:14:59,199
just

432
00:14:59,199 --> 00:15:01,760
search for response splitting and sort

433
00:15:01,760 --> 00:15:03,519
the results that come up by the date

434
00:15:03,519 --> 00:15:06,000
they were they were written in and as

435
00:15:06,000 --> 00:15:07,680
you can see the oldest ones have the

436
00:15:07,680 --> 00:15:09,600
most information in

437
00:15:09,600 --> 00:15:11,120
about the original meaning and they

438
00:15:11,120 --> 00:15:14,560
gradually get less useful over time

439
00:15:14,560 --> 00:15:15,760
so

440
00:15:15,760 --> 00:15:17,120
this is terrifying because it has a

441
00:15:17,120 --> 00:15:20,639
massive suppressing effect on old tech

442
00:15:20,639 --> 00:15:22,320
old techniques because you search for

443
00:15:22,320 --> 00:15:23,839
the old technique you think you

444
00:15:23,839 --> 00:15:25,120
understand it and you think it's this

445
00:15:25,120 --> 00:15:26,959
thing that's not that powerful

446
00:15:26,959 --> 00:15:29,759
and the solution is what

447
00:15:29,759 --> 00:15:31,920
don't rely on search engines so much

448
00:15:31,920 --> 00:15:33,279
just treat the internet like the

449
00:15:33,279 --> 00:15:35,120
labyrinth it was supposed to be

450
00:15:35,120 --> 00:15:36,800
load up some old posts and click on the

451
00:15:36,800 --> 00:15:38,079
hyperlinks

452
00:15:38,079 --> 00:15:39,920
and you'll start finding some really

453
00:15:39,920 --> 00:15:42,320
valuable stuff try and find the original

454
00:15:42,320 --> 00:15:44,000
source for each piece of research

455
00:15:44,000 --> 00:15:45,360
because for each major technique there's

456
00:15:45,360 --> 00:15:47,680
probably a white paper or presentation

457
00:15:47,680 --> 00:15:49,279
that someone put a lot of effort into

458
00:15:49,279 --> 00:15:51,120
when that was originally made and a

459
00:15:51,120 --> 00:15:52,880
bunch of the information in that

460
00:15:52,880 --> 00:15:56,079
original post may well have been lost to

461
00:15:56,079 --> 00:15:58,800
overall awareness since

462
00:15:58,800 --> 00:16:00,000
there's actually

463
00:16:00,000 --> 00:16:01,759
something else interesting hidden in

464
00:16:01,759 --> 00:16:03,120
this graph

465
00:16:03,120 --> 00:16:04,240
which is

466
00:16:04,240 --> 00:16:08,920
the fact that nothing happened in 2016.

467
00:16:09,040 --> 00:16:11,600
this is really remarkable because in

468
00:16:11,600 --> 00:16:12,880
2016

469
00:16:12,880 --> 00:16:15,199
reggie levro presented the hp request

470
00:16:15,199 --> 00:16:16,880
plugin the real request smuggling proper

471
00:16:16,880 --> 00:16:18,079
technique

472
00:16:18,079 --> 00:16:21,839
at defcon with cves and multiple live

473
00:16:21,839 --> 00:16:23,839
demos and at the time you could have

474
00:16:23,839 --> 00:16:25,839
just taken that technique and used it to

475
00:16:25,839 --> 00:16:27,839
hack a significant portion

476
00:16:27,839 --> 00:16:29,680
of the internet

477
00:16:29,680 --> 00:16:31,120
and yet

478
00:16:31,120 --> 00:16:32,720
no one did

479
00:16:32,720 --> 00:16:34,160
and

480
00:16:34,160 --> 00:16:35,680
nothing really there was no real

481
00:16:35,680 --> 00:16:37,920
interest in this technique until i i

482
00:16:37,920 --> 00:16:40,160
presented the same technique three years

483
00:16:40,160 --> 00:16:41,440
later

484
00:16:41,440 --> 00:16:43,440
which is quite curious and i think the

485
00:16:43,440 --> 00:16:45,440
reason behind this

486
00:16:45,440 --> 00:16:47,199
is because

487
00:16:47,199 --> 00:16:49,920
it was presented in 2016 as this

488
00:16:49,920 --> 00:16:51,920
dangerous and implicitly difficult

489
00:16:51,920 --> 00:16:54,000
technique and that just made us scared

490
00:16:54,000 --> 00:16:55,279
of it

491
00:16:55,279 --> 00:16:56,880
when we see this we don't literally

492
00:16:56,880 --> 00:16:59,360
think to ourselves this is scary we see

493
00:16:59,360 --> 00:17:02,959
it we kind of feel scared and we justify

494
00:17:02,959 --> 00:17:04,720
why we shouldn't do it to ourselves so

495
00:17:04,720 --> 00:17:07,119
we tell ourselves that technique sounds

496
00:17:07,119 --> 00:17:09,760
cool but it's not practical or it's too

497
00:17:09,760 --> 00:17:11,599
difficult or it's too dangerous or i

498
00:17:11,599 --> 00:17:13,760
don't know where to start

499
00:17:13,760 --> 00:17:15,039
and the reason that i know this is

500
00:17:15,039 --> 00:17:17,280
because that's exactly what i did the

501
00:17:17,280 --> 00:17:19,359
first time i saw that presentation and

502
00:17:19,359 --> 00:17:21,679
then eventually i realized i saw i

503
00:17:21,679 --> 00:17:24,000
recognized the excuses i was making

504
00:17:24,000 --> 00:17:25,760
were just nonsense and i tackled it and

505
00:17:25,760 --> 00:17:27,520
i published a presentation

506
00:17:27,520 --> 00:17:29,760
that said actually it's not that hard

507
00:17:29,760 --> 00:17:32,320
it's only mildly dangerous and then

508
00:17:32,320 --> 00:17:34,799
other people started using it

509
00:17:34,799 --> 00:17:35,600
so

510
00:17:35,600 --> 00:17:38,960
this fear of failure affects all of us

511
00:17:38,960 --> 00:17:41,440
and the key to defeating it is to spot

512
00:17:41,440 --> 00:17:43,440
these warning thoughts just notice when

513
00:17:43,440 --> 00:17:45,679
you're thinking and recognize them

514
00:17:45,679 --> 00:17:47,520
for what they really are which is a sign

515
00:17:47,520 --> 00:17:49,360
you should take that technique and give

516
00:17:49,360 --> 00:17:51,039
it a go

517
00:17:51,039 --> 00:17:53,120
these days if someone takes a technique

518
00:17:53,120 --> 00:17:54,960
and says this is too dangerous to try in

519
00:17:54,960 --> 00:17:56,400
production

520
00:17:56,400 --> 00:17:59,520
my view is do it prove it i want to see

521
00:17:59,520 --> 00:18:01,840
the evidence

522
00:18:02,480 --> 00:18:07,679
evasive flaws are often frustrating

523
00:18:07,679 --> 00:18:09,760
and the worst ones are where you come

524
00:18:09,760 --> 00:18:11,760
really close to finding them where you

525
00:18:11,760 --> 00:18:13,440
actually have the idea and then you

526
00:18:13,440 --> 00:18:14,400
think

527
00:18:14,400 --> 00:18:16,160
that will never work and you don't try

528
00:18:16,160 --> 00:18:17,760
and generally you forget about it until

529
00:18:17,760 --> 00:18:19,679
two years later someone else tries the

530
00:18:19,679 --> 00:18:21,360
idea with great success and gets a

531
00:18:21,360 --> 00:18:22,720
blackout presentation out of it and you

532
00:18:22,720 --> 00:18:24,640
just feel annoyed

533
00:18:24,640 --> 00:18:26,480
now this kind of mistake made me

534
00:18:26,480 --> 00:18:28,880
discover an entire attack class two

535
00:18:28,880 --> 00:18:31,120
years late i was doing a pen test on a

536
00:18:31,120 --> 00:18:33,039
site uh there was attacker controlled

537
00:18:33,039 --> 00:18:35,600
data landing in a spreadsheet which also

538
00:18:35,600 --> 00:18:38,080
had sensitive user data in it and this

539
00:18:38,080 --> 00:18:39,679
the spreadsheet was getting opened in

540
00:18:39,679 --> 00:18:41,120
excel

541
00:18:41,120 --> 00:18:43,600
and i found if i specified

542
00:18:43,600 --> 00:18:45,760
a value start on with an equals excel

543
00:18:45,760 --> 00:18:47,520
would treat this as a formula and

544
00:18:47,520 --> 00:18:49,039
evaluate it

545
00:18:49,039 --> 00:18:50,960
and i thought well great i can multiply

546
00:18:50,960 --> 00:18:53,919
numbers i wonder if i can do more with

547
00:18:53,919 --> 00:18:56,559
this excel formula and i thought nah

548
00:18:56,559 --> 00:18:58,720
that that's that's never going to work

549
00:18:58,720 --> 00:19:00,480
i'm not going to bother and then

550
00:19:00,480 --> 00:19:02,799
for two years doing pen tests i ran into

551
00:19:02,799 --> 00:19:05,280
the same scenario on different websites

552
00:19:05,280 --> 00:19:07,840
over and over until i finally cracked

553
00:19:07,840 --> 00:19:09,280
and i had a go

554
00:19:09,280 --> 00:19:11,600
and within a couple of hours i found

555
00:19:11,600 --> 00:19:13,840
i could still use the data as long as

556
00:19:13,840 --> 00:19:16,160
the victim clicked on a poisoned cell

557
00:19:16,160 --> 00:19:18,880
i could get arbitrary code execution on

558
00:19:18,880 --> 00:19:20,960
excel after a warning prompt which was

559
00:19:20,960 --> 00:19:23,600
pretty scary but also misleading uh i'm

560
00:19:23,600 --> 00:19:25,360
not going into details there

561
00:19:25,360 --> 00:19:28,080
and on leave office and open office so

562
00:19:28,080 --> 00:19:29,760
at the time i was getting tested but

563
00:19:29,760 --> 00:19:31,760
tested by an intern and i said just look

564
00:19:31,760 --> 00:19:33,919
at leave office whatever and in two

565
00:19:33,919 --> 00:19:35,520
hours he found he could get a code

566
00:19:35,520 --> 00:19:37,600
execution on that before the security

567
00:19:37,600 --> 00:19:39,280
prompt appeared

568
00:19:39,280 --> 00:19:41,679
uh which was quite bad

569
00:19:41,679 --> 00:19:44,160
and i published this technique

570
00:19:44,160 --> 00:19:46,480
a few years ago and i know that this was

571
00:19:46,480 --> 00:19:48,000
successful because someone recently

572
00:19:48,000 --> 00:19:49,760
tried to hack one of my colleagues by

573
00:19:49,760 --> 00:19:52,080
emailing the malware with embedded

574
00:19:52,080 --> 00:19:56,080
inside a csv using this very technique

575
00:19:56,080 --> 00:19:58,960
so to avoid this pitfall what i try and

576
00:19:58,960 --> 00:20:01,200
do now is say that will never work

577
00:20:01,200 --> 00:20:03,840
unless and then i try and specify

578
00:20:03,840 --> 00:20:05,440
exactly

579
00:20:05,440 --> 00:20:07,679
what scenario would let this technique

580
00:20:07,679 --> 00:20:10,159
work so here i'd say something like well

581
00:20:10,159 --> 00:20:11,919
i'll never be able to do much damage

582
00:20:11,919 --> 00:20:12,880
with a

583
00:20:12,880 --> 00:20:16,400
cs with a formula in excel unless

584
00:20:16,400 --> 00:20:18,799
desktop spreadsheet software has

585
00:20:18,799 --> 00:20:20,640
powerful functionality that can be

586
00:20:20,640 --> 00:20:22,799
reached using formulas and as soon as

587
00:20:22,799 --> 00:20:25,440
you say that it starts to sound

588
00:20:25,440 --> 00:20:28,880
slightly more plausible

589
00:20:29,600 --> 00:20:33,120
there's a variation of this mistake

590
00:20:33,120 --> 00:20:35,200
which is to think okay that idea might

591
00:20:35,200 --> 00:20:36,880
work that's a great idea this idea is

592
00:20:36,880 --> 00:20:39,200
wonderful except for one thing which is

593
00:20:39,200 --> 00:20:41,520
it's too obvious

594
00:20:41,520 --> 00:20:43,600
this one happens a lot and what you're

595
00:20:43,600 --> 00:20:45,840
implicitly saying is this idea will

596
00:20:45,840 --> 00:20:48,799
never work because if it did work

597
00:20:48,799 --> 00:20:50,480
someone else would have already thought

598
00:20:50,480 --> 00:20:52,400
of it and tried it and published their

599
00:20:52,400 --> 00:20:54,080
findings

600
00:20:54,080 --> 00:20:55,760
and any link in that chain can break

601
00:20:55,760 --> 00:20:57,360
right a lot of people don't publish

602
00:20:57,360 --> 00:20:58,640
their findings or they do and you don't

603
00:20:58,640 --> 00:21:00,000
find them and so on but the one that

604
00:21:00,000 --> 00:21:01,600
breaks the most

605
00:21:01,600 --> 00:21:03,280
is that everyone thinks this technique

606
00:21:03,280 --> 00:21:05,679
is too obvious this idea is too obvious

607
00:21:05,679 --> 00:21:08,080
and nobody tries it it's the security

608
00:21:08,080 --> 00:21:11,039
version of the bystander effect

609
00:21:11,039 --> 00:21:11,919
and

610
00:21:11,919 --> 00:21:13,679
to demonstrate it

611
00:21:13,679 --> 00:21:14,640
uh

612
00:21:14,640 --> 00:21:16,159
i'm going to do a tiny bit of research

613
00:21:16,159 --> 00:21:20,080
so let's imagine you found csv injection

614
00:21:20,080 --> 00:21:22,080
on a major website that offers good

615
00:21:22,080 --> 00:21:25,600
payouts for medium severity issues

616
00:21:25,600 --> 00:21:27,120
which is quite a plausible situation

617
00:21:27,120 --> 00:21:30,400
this bug is still everywhere uh and

618
00:21:30,400 --> 00:21:32,400
well which of these four payloads are

619
00:21:32,400 --> 00:21:34,080
you gonna use to get this hypothetical

620
00:21:34,080 --> 00:21:35,919
bug bounty

621
00:21:35,919 --> 00:21:38,080
none of them are very good right first

622
00:21:38,080 --> 00:21:40,480
one has no security impact the second

623
00:21:40,480 --> 00:21:42,400
one could steal user data but it

624
00:21:42,400 --> 00:21:44,640
requires on a user click on a specific

625
00:21:44,640 --> 00:21:46,880
cell which is not that realistic

626
00:21:46,880 --> 00:21:48,960
the third one has a has a security

627
00:21:48,960 --> 00:21:51,039
prompt and the fourth one is patched so

628
00:21:51,039 --> 00:21:52,480
that's useless

629
00:21:52,480 --> 00:21:53,840
so

630
00:21:53,840 --> 00:21:56,960
if only there was a way to steal the

631
00:21:56,960 --> 00:21:59,679
other user's data from this spreadsheet

632
00:21:59,679 --> 00:22:01,360
silently the moment the spreadsheet was

633
00:22:01,360 --> 00:22:03,120
open right if you had something that

634
00:22:03,120 --> 00:22:05,679
could do that well maybe you could get a

635
00:22:05,679 --> 00:22:07,760
decent bounty

636
00:22:07,760 --> 00:22:09,280
and

637
00:22:09,280 --> 00:22:11,200
well i published this technique eight

638
00:22:11,200 --> 00:22:13,840
years ago so you would you might assume

639
00:22:13,840 --> 00:22:16,320
that someone would have tried to do this

640
00:22:16,320 --> 00:22:19,440
since right but using my incredibly poor

641
00:22:19,440 --> 00:22:21,600
windows platform knowledge in two hours

642
00:22:21,600 --> 00:22:24,080
reading excel documentation

643
00:22:24,080 --> 00:22:26,080
i found i could trigger a ping back over

644
00:22:26,080 --> 00:22:28,320
dns using tiny bit of syntax like that

645
00:22:28,320 --> 00:22:30,640
and after a couple of hours more

646
00:22:30,640 --> 00:22:32,000
uh i just wrapped this in a couple of

647
00:22:32,000 --> 00:22:34,000
excel functions

648
00:22:34,000 --> 00:22:37,440
uh and found a way to embed other data

649
00:22:37,440 --> 00:22:39,840
from the spreadsheet in this ping so

650
00:22:39,840 --> 00:22:41,200
with this payload as soon as the

651
00:22:41,200 --> 00:22:43,440
spreadsheet is opened you've got a dns

652
00:22:43,440 --> 00:22:45,440
pingback going to your server containing

653
00:22:45,440 --> 00:22:48,480
the rest of the data in the spreadsheet

654
00:22:48,480 --> 00:22:50,240
and

655
00:22:50,240 --> 00:22:52,799
it does i guess it looks complex that's

656
00:22:52,799 --> 00:22:54,559
because of the csv format the hardest

657
00:22:54,559 --> 00:22:56,400
part writing that payload was escaping

658
00:22:56,400 --> 00:22:58,960
the quotes correctly

659
00:22:58,960 --> 00:22:59,760
and

660
00:22:59,760 --> 00:23:02,480
i've never shared this payload before so

661
00:23:02,480 --> 00:23:04,080
i hope you find it useful maybe get some

662
00:23:04,080 --> 00:23:05,760
bounties with it why not uh i hope

663
00:23:05,760 --> 00:23:07,039
there's no one from microsoft in the

664
00:23:07,039 --> 00:23:09,360
audience that cares

665
00:23:09,360 --> 00:23:10,159
but

666
00:23:10,159 --> 00:23:12,400
mostly i hope it shows the point that

667
00:23:12,400 --> 00:23:14,240
there's valuable techniques out there

668
00:23:14,240 --> 00:23:15,679
that are within your reach you don't

669
00:23:15,679 --> 00:23:18,159
have to put months of time in to find

670
00:23:18,159 --> 00:23:20,000
something that is beyond the current

671
00:23:20,000 --> 00:23:22,400
state of the art that's valuable you can

672
00:23:22,400 --> 00:23:23,919
just reach out and grab them within a

673
00:23:23,919 --> 00:23:26,480
few hours

674
00:23:26,799 --> 00:23:28,320
of course some things

675
00:23:28,320 --> 00:23:30,000
are not so easy

676
00:23:30,000 --> 00:23:31,919
if you read bug bounty write-ups often

677
00:23:31,919 --> 00:23:34,159
every now and again you'll find one

678
00:23:34,159 --> 00:23:36,080
often on facebook that starts with

679
00:23:36,080 --> 00:23:38,000
paragraphs of explanation of business

680
00:23:38,000 --> 00:23:39,360
functionality

681
00:23:39,360 --> 00:23:40,159
and

682
00:23:40,159 --> 00:23:41,679
it just doesn't make much sense it's

683
00:23:41,679 --> 00:23:43,360
hard to follow it doesn't seem relevant

684
00:23:43,360 --> 00:23:44,720
and it doesn't contain any

685
00:23:44,720 --> 00:23:46,960
vulnerabilities and then they'll present

686
00:23:46,960 --> 00:23:48,720
a really simple looking exploit and get

687
00:23:48,720 --> 00:23:50,640
a massive payout

688
00:23:50,640 --> 00:23:52,880
and i think what's happening here is

689
00:23:52,880 --> 00:23:55,039
although the exploit looks simple

690
00:23:55,039 --> 00:23:57,440
it's actually a kind of exploit chain

691
00:23:57,440 --> 00:23:58,960
but they're not

692
00:23:58,960 --> 00:24:01,039
chaining multiple vulnerabilities

693
00:24:01,039 --> 00:24:02,880
they're chaining a large amount of

694
00:24:02,880 --> 00:24:05,520
application specific knowledge with a

695
00:24:05,520 --> 00:24:06,799
vulnerability

696
00:24:06,799 --> 00:24:08,640
and this kind of knowledge

697
00:24:08,640 --> 00:24:10,880
is non-transferable it's a website

698
00:24:10,880 --> 00:24:13,039
specific so you can be an expert at

699
00:24:13,039 --> 00:24:15,600
application security and this post still

700
00:24:15,600 --> 00:24:17,279
won't make any sense to you unless

701
00:24:17,279 --> 00:24:19,200
you're really familiar with that

702
00:24:19,200 --> 00:24:21,440
specific website

703
00:24:21,440 --> 00:24:23,919
and this kind of knowledge is

704
00:24:23,919 --> 00:24:24,960
easily

705
00:24:24,960 --> 00:24:26,480
underestimated

706
00:24:26,480 --> 00:24:29,679
even though the value is pretty obvious

707
00:24:29,679 --> 00:24:31,760
that's because

708
00:24:31,760 --> 00:24:33,919
although it's valuable

709
00:24:33,919 --> 00:24:37,200
it's also extremely inconvenient

710
00:24:37,200 --> 00:24:39,440
i know this painfully well myself

711
00:24:39,440 --> 00:24:41,600
because whenever i apply novel

712
00:24:41,600 --> 00:24:44,080
techniques at scale they always perform

713
00:24:44,080 --> 00:24:46,159
better for other people than they do for

714
00:24:46,159 --> 00:24:48,880
me because i don't i'm not able to make

715
00:24:48,880 --> 00:24:51,279
the time commitment to a single website

716
00:24:51,279 --> 00:24:53,679
to get this kind of knowledge

717
00:24:53,679 --> 00:24:56,880
my most spectacular example of this was

718
00:24:56,880 --> 00:24:59,120
a few years ago no one had no one was

719
00:24:59,120 --> 00:25:01,600
doing a variable name no one was doing

720
00:25:01,600 --> 00:25:04,640
parameter name guessing at the time or

721
00:25:04,640 --> 00:25:06,320
no one doing it publicly

722
00:25:06,320 --> 00:25:09,039
and i'd just coded but not released

723
00:25:09,039 --> 00:25:11,600
paraminer which automated this process

724
00:25:11,600 --> 00:25:13,120
and did a pretty good job of it and i'd

725
00:25:13,120 --> 00:25:15,120
also just got an invitation from hacker

726
00:25:15,120 --> 00:25:17,600
one to go to new york and try and hack

727
00:25:17,600 --> 00:25:20,000
the us air force in a live hacking event

728
00:25:20,000 --> 00:25:21,600
and i was like wait

729
00:25:21,600 --> 00:25:23,919
i'll fly out to new york i'll run this

730
00:25:23,919 --> 00:25:25,840
tour i don't make lots of money

731
00:25:25,840 --> 00:25:28,000
uh this is what i think how i think it's

732
00:25:28,000 --> 00:25:30,000
going to play out every single time

733
00:25:30,000 --> 00:25:32,799
uh so i flew out to new york

734
00:25:32,799 --> 00:25:34,960
uh i ran by and it did a great job it

735
00:25:34,960 --> 00:25:37,520
found loads of parameters

736
00:25:37,520 --> 00:25:39,679
that you couldn't otherwise see and then

737
00:25:39,679 --> 00:25:42,559
the whole event was one day and that

738
00:25:42,559 --> 00:25:44,559
i just didn't have time to do anything

739
00:25:44,559 --> 00:25:46,080
useful with any of the parameters

740
00:25:46,080 --> 00:25:47,440
because i didn't even understand how any

741
00:25:47,440 --> 00:25:50,000
of these websites worked and in total i

742
00:25:50,000 --> 00:25:52,480
made a hundred dollars

743
00:25:52,480 --> 00:25:53,520
and yet

744
00:25:53,520 --> 00:25:54,880
when i'm chatting with people at

745
00:25:54,880 --> 00:25:57,120
conferences they often say hey thanks

746
00:25:57,120 --> 00:25:59,760
for making program miner that program

747
00:25:59,760 --> 00:26:01,520
that tool found this program that made

748
00:26:01,520 --> 00:26:05,120
me so much money i love it

749
00:26:05,120 --> 00:26:07,600
it works for them because they have this

750
00:26:07,600 --> 00:26:10,000
application specific knowledge so if you

751
00:26:10,000 --> 00:26:12,080
want to see this approach to finding

752
00:26:12,080 --> 00:26:14,000
evasive bugs done right i don't look at

753
00:26:14,000 --> 00:26:15,279
what i'm doing

754
00:26:15,279 --> 00:26:16,159
uh

755
00:26:16,159 --> 00:26:18,400
take a look at file descriptors bugs on

756
00:26:18,400 --> 00:26:21,360
twitter and also orange size microsoft

757
00:26:21,360 --> 00:26:23,039
exchange research these are kind of two

758
00:26:23,039 --> 00:26:24,880
ends of the spectrum they

759
00:26:24,880 --> 00:26:26,159
if you read them they look quite

760
00:26:26,159 --> 00:26:27,600
different but i think they're coming

761
00:26:27,600 --> 00:26:29,520
from the same source which is

762
00:26:29,520 --> 00:26:31,360
great absolute knowledge combined with

763
00:26:31,360 --> 00:26:33,520
really good knowledge of the specific

764
00:26:33,520 --> 00:26:35,840
target

765
00:26:36,080 --> 00:26:38,240
application specific knowledge should

766
00:26:38,240 --> 00:26:41,279
not be confused with fingerprinting

767
00:26:41,279 --> 00:26:43,760
there is a methodology for finding bugs

768
00:26:43,760 --> 00:26:45,200
and it's simple

769
00:26:45,200 --> 00:26:47,200
popular and sometimes really quite

770
00:26:47,200 --> 00:26:49,120
harmful i i call it the strip kitty

771
00:26:49,120 --> 00:26:52,240
methodology it's harmful because some

772
00:26:52,240 --> 00:26:55,360
things are easy to exploit but hard to

773
00:26:55,360 --> 00:26:56,480
fingerprint

774
00:26:56,480 --> 00:26:58,240
take webcash poisoning let's try and

775
00:26:58,240 --> 00:27:00,559
find web cache poisoning using this

776
00:27:00,559 --> 00:27:02,159
methodology and

777
00:27:02,159 --> 00:27:03,840
some people do this this is based on

778
00:27:03,840 --> 00:27:05,600
observation of what people really do

779
00:27:05,600 --> 00:27:07,360
they're like okay

780
00:27:07,360 --> 00:27:09,039
using this methodology step one is to

781
00:27:09,039 --> 00:27:10,960
ask are they caching

782
00:27:10,960 --> 00:27:12,480
are you ready okay how do we know if

783
00:27:12,480 --> 00:27:14,320
they're caching well maybe they've got a

784
00:27:14,320 --> 00:27:15,840
known standard cache header so let's

785
00:27:15,840 --> 00:27:17,760
look for that okay but some use

786
00:27:17,760 --> 00:27:19,760
non-standard headers so let's grab cache

787
00:27:19,760 --> 00:27:21,520
cache header values for keywords like

788
00:27:21,520 --> 00:27:23,760
hit and miss but some don't say any

789
00:27:23,760 --> 00:27:25,919
headers at all so let's use reverse dns

790
00:27:25,919 --> 00:27:27,919
to see if it matches a known vendor like

791
00:27:27,919 --> 00:27:29,840
akamai but some don't have any headers

792
00:27:29,840 --> 00:27:32,159
at all or a findable with reverse dns so

793
00:27:32,159 --> 00:27:34,080
let's start gathering timing information

794
00:27:34,080 --> 00:27:35,520
from the sponsors but now we've got

795
00:27:35,520 --> 00:27:36,960
false positives so let's start putting

796
00:27:36,960 --> 00:27:38,080
in repeats

797
00:27:38,080 --> 00:27:40,880
to deal with the false positives and

798
00:27:40,880 --> 00:27:43,679
even then after doing all this work all

799
00:27:43,679 --> 00:27:46,640
they've done is missed a bunch of caches

800
00:27:46,640 --> 00:27:48,640
that can't be successfully reliably

801
00:27:48,640 --> 00:27:50,480
fingerprinted with any of these

802
00:27:50,480 --> 00:27:52,000
techniques

803
00:27:52,000 --> 00:27:54,000
and there's a better way

804
00:27:54,000 --> 00:27:55,279
which is

805
00:27:55,279 --> 00:27:57,440
don't look for the technology

806
00:27:57,440 --> 00:28:00,000
look for the behavior that's relevant to

807
00:28:00,000 --> 00:28:01,360
what you're trying

808
00:28:01,360 --> 00:28:03,120
to do so

809
00:28:03,120 --> 00:28:04,399
actually if

810
00:28:04,399 --> 00:28:06,480
if the cache even if the cache exists if

811
00:28:06,480 --> 00:28:08,960
there's no unkeyed parameters it's it's

812
00:28:08,960 --> 00:28:11,279
not relevant to to poison the cache you

813
00:28:11,279 --> 00:28:12,159
need

814
00:28:12,159 --> 00:28:14,159
an input that affects the response and

815
00:28:14,159 --> 00:28:16,559
it needs to be unkeyed so get a list of

816
00:28:16,559 --> 00:28:18,320
the inputs that affect the response you

817
00:28:18,320 --> 00:28:20,399
can choose from

818
00:28:20,399 --> 00:28:22,080
and then ask

819
00:28:22,080 --> 00:28:25,440
for each input ask is this in the cache

820
00:28:25,440 --> 00:28:27,760
key and that's once you've got that

821
00:28:27,760 --> 00:28:29,360
initial information that's really easy

822
00:28:29,360 --> 00:28:30,880
to ask and if you find that great you're

823
00:28:30,880 --> 00:28:33,520
well on your way to a cash poisoning

824
00:28:33,520 --> 00:28:34,880
attack

825
00:28:34,880 --> 00:28:37,440
and this approach sounds like it might

826
00:28:37,440 --> 00:28:39,279
require more work than doing the

827
00:28:39,279 --> 00:28:41,279
thinning doing the fingerprinting and i

828
00:28:41,279 --> 00:28:43,279
think that's the attractiveness of the

829
00:28:43,279 --> 00:28:46,080
fingerprinting but this entire thing

830
00:28:46,080 --> 00:28:46,960
here

831
00:28:46,960 --> 00:28:48,720
prior to the last point

832
00:28:48,720 --> 00:28:50,240
is automated by

833
00:28:50,240 --> 00:28:52,960
caramel so

834
00:28:52,960 --> 00:28:55,120
although a reoccurring theme is that the

835
00:28:55,120 --> 00:28:58,080
steps that we take to improve our yeah

836
00:28:58,080 --> 00:29:00,320
it's a recurrency we take steps to

837
00:29:00,320 --> 00:29:02,159
improve our efficiency and we miss

838
00:29:02,159 --> 00:29:05,039
vulnerabilities as a result so we have

839
00:29:05,039 --> 00:29:06,640
to be prepared to sacrifice some

840
00:29:06,640 --> 00:29:08,559
efficiency if we want to find these cool

841
00:29:08,559 --> 00:29:11,600
bugs but automation can just step in and

842
00:29:11,600 --> 00:29:13,440
help us out here

843
00:29:13,440 --> 00:29:15,840
there's an old cliche that security

844
00:29:15,840 --> 00:29:17,039
scanning

845
00:29:17,039 --> 00:29:18,960
and automation is about finding low

846
00:29:18,960 --> 00:29:20,720
hanging fruit

847
00:29:20,720 --> 00:29:22,320
and this is

848
00:29:22,320 --> 00:29:24,240
dangerously misleading because when used

849
00:29:24,240 --> 00:29:26,880
correctly automation puts high up

850
00:29:26,880 --> 00:29:28,880
through within our reach by

851
00:29:28,880 --> 00:29:31,360
providing a platform that we can stand

852
00:29:31,360 --> 00:29:33,520
on

853
00:29:34,240 --> 00:29:36,559
the simplest way it helps

854
00:29:36,559 --> 00:29:38,240
is not the most flashy but it's

855
00:29:38,240 --> 00:29:40,720
vulnerabilities that hide just by being

856
00:29:40,720 --> 00:29:43,039
inconvenient to test for this is

857
00:29:43,039 --> 00:29:44,720
something i just made up i'm quite proud

858
00:29:44,720 --> 00:29:48,080
of it it's called the pyramid of pain

859
00:29:48,080 --> 00:29:50,720
and it shows the number of manual steps

860
00:29:50,720 --> 00:29:53,279
required to test one payload on a given

861
00:29:53,279 --> 00:29:55,919
input the labels are fairly arbitrary

862
00:29:55,919 --> 00:29:58,480
but the size of each layer shows roughly

863
00:29:58,480 --> 00:30:00,000
how many probes people are going to

864
00:30:00,000 --> 00:30:01,360
bother throwing

865
00:30:01,360 --> 00:30:03,600
at that input because if testing one

866
00:30:03,600 --> 00:30:05,520
payload requires a manual five step

867
00:30:05,520 --> 00:30:07,200
sequence you're just going to give up

868
00:30:07,200 --> 00:30:09,120
quite quickly

869
00:30:09,120 --> 00:30:11,039
but with automation you can take this

870
00:30:11,039 --> 00:30:13,039
pyramid and flatten it so that

871
00:30:13,039 --> 00:30:15,520
everything every payload you try is as

872
00:30:15,520 --> 00:30:18,640
easy as testing a reflected input you

873
00:30:18,640 --> 00:30:20,799
can do this with tools built-in features

874
00:30:20,799 --> 00:30:22,720
you can do this with user extensions

875
00:30:22,720 --> 00:30:24,640
like stepper and hack virtual and many

876
00:30:24,640 --> 00:30:25,520
others

877
00:30:25,520 --> 00:30:27,120
you can do it with tools lightweight

878
00:30:27,120 --> 00:30:29,520
scripting capabilities like macros in

879
00:30:29,520 --> 00:30:32,159
burp and zest in zap and you can do it

880
00:30:32,159 --> 00:30:34,480
with your own code of course

881
00:30:34,480 --> 00:30:36,159
it's just a balance between putting in

882
00:30:36,159 --> 00:30:38,000
the minimum effort to get the job done

883
00:30:38,000 --> 00:30:39,679
and setting yourself up well for next

884
00:30:39,679 --> 00:30:40,880
time

885
00:30:40,880 --> 00:30:41,840
this

886
00:30:41,840 --> 00:30:44,320
is absolutely not flashing but it's

887
00:30:44,320 --> 00:30:46,000
valuable because once you flatten this

888
00:30:46,000 --> 00:30:48,559
pyramid you can have proper quality time

889
00:30:48,559 --> 00:30:50,720
with the attack surface at the top of

890
00:30:50,720 --> 00:30:53,440
the pyramid that everybody else barely

891
00:30:53,440 --> 00:30:56,080
glances at

892
00:30:56,080 --> 00:30:58,080
there's a related problem that's even

893
00:30:58,080 --> 00:31:00,080
worse which is attack surface overnight

894
00:31:00,080 --> 00:31:03,360
too much attack surface too little time

895
00:31:03,360 --> 00:31:05,360
now some approaches to testing scale

896
00:31:05,360 --> 00:31:07,200
better than others you've got fully

897
00:31:07,200 --> 00:31:09,039
manual testing does not scale well at

898
00:31:09,039 --> 00:31:10,640
all and fully automated scanning in

899
00:31:10,640 --> 00:31:13,039
theory at least scales extremely well

900
00:31:13,039 --> 00:31:14,960
and in the middle you've got combined

901
00:31:14,960 --> 00:31:17,200
efforts like using tooling to run a

902
00:31:17,200 --> 00:31:19,120
massive word list and then manually

903
00:31:19,120 --> 00:31:20,640
reviewing the results to see if there's

904
00:31:20,640 --> 00:31:22,320
anything interesting

905
00:31:22,320 --> 00:31:25,039
so on a massive attack surface a typical

906
00:31:25,039 --> 00:31:26,799
approach is great do fully manual

907
00:31:26,799 --> 00:31:27,919
testing on

908
00:31:27,919 --> 00:31:30,240
high risk functionality and just do

909
00:31:30,240 --> 00:31:33,760
fully automated scanning on the rest

910
00:31:33,760 --> 00:31:36,080
and this is not ideal

911
00:31:36,080 --> 00:31:37,760
because there's a lot of attack surface

912
00:31:37,760 --> 00:31:40,559
that's only looked at by the scanner

913
00:31:40,559 --> 00:31:42,640
and i talk about scanner weaknesses in a

914
00:31:42,640 --> 00:31:44,000
lot more detail in a different

915
00:31:44,000 --> 00:31:45,600
presentation called backslash powered

916
00:31:45,600 --> 00:31:46,720
scanning

917
00:31:46,720 --> 00:31:49,039
but the really short version is

918
00:31:49,039 --> 00:31:52,000
scanners lack intuition and that means

919
00:31:52,000 --> 00:31:54,000
for some vulnerability classes they have

920
00:31:54,000 --> 00:31:57,200
to ask really specific questions like is

921
00:31:57,200 --> 00:31:59,200
this input embedded in a single quoted

922
00:31:59,200 --> 00:32:00,880
string within a tweak template with no

923
00:32:00,880 --> 00:32:02,880
filtering encoding or transformations

924
00:32:02,880 --> 00:32:04,399
and if the answer is yes great they

925
00:32:04,399 --> 00:32:06,000
found that vulnerability

926
00:32:06,000 --> 00:32:08,000
but because these questions are so

927
00:32:08,000 --> 00:32:09,120
specific

928
00:32:09,120 --> 00:32:10,880
to get full coverage they would have to

929
00:32:10,880 --> 00:32:13,039
ask millions of questions i call this

930
00:32:13,039 --> 00:32:14,720
the million payload problem and they

931
00:32:14,720 --> 00:32:16,559
can't do that so they're forced to

932
00:32:16,559 --> 00:32:17,679
compromise

933
00:32:17,679 --> 00:32:19,519
and that gives them blind spots that

934
00:32:19,519 --> 00:32:22,320
manual testers don't have

935
00:32:22,320 --> 00:32:25,039
there's two things that we can do about

936
00:32:25,039 --> 00:32:26,960
this and the first one is really quite

937
00:32:26,960 --> 00:32:29,120
lazy it's a proper like top 10 hacker

938
00:32:29,120 --> 00:32:31,360
tricks that blue teams hate

939
00:32:31,360 --> 00:32:33,360
if you're not the first person to look

940
00:32:33,360 --> 00:32:35,919
at a target it's probably already been

941
00:32:35,919 --> 00:32:38,399
scanned by someone else with popular

942
00:32:38,399 --> 00:32:40,960
scanners or the default settings

943
00:32:40,960 --> 00:32:43,600
and you can afford to miss issues

944
00:32:43,600 --> 00:32:45,919
that they would have found so just take

945
00:32:45,919 --> 00:32:47,679
your tool and just flip some random

946
00:32:47,679 --> 00:32:49,600
settings it doesn't really matter what

947
00:32:49,600 --> 00:32:51,919
because then you'll start finding issues

948
00:32:51,919 --> 00:32:55,120
that their scanners missed

949
00:32:55,120 --> 00:32:57,360
the second point is uh

950
00:32:57,360 --> 00:32:59,600
a bit more heavyweight you can dive into

951
00:32:59,600 --> 00:33:01,440
the middle of this scale

952
00:33:01,440 --> 00:33:02,559
and

953
00:33:02,559 --> 00:33:05,279
you can start writing code that asks

954
00:33:05,279 --> 00:33:06,799
broader questions

955
00:33:06,799 --> 00:33:08,559
don't just scan for vulnerabilities but

956
00:33:08,559 --> 00:33:10,640
scan for clues scan for interesting

957
00:33:10,640 --> 00:33:11,919
behavior

958
00:33:11,919 --> 00:33:14,240
if you ask broader questions like if i

959
00:33:14,240 --> 00:33:15,760
send two backslashes does it get

960
00:33:15,760 --> 00:33:17,919
reflected back to me as one

961
00:33:17,919 --> 00:33:19,279
well if you see that there's something

962
00:33:19,279 --> 00:33:21,279
interesting happening server site it

963
00:33:21,279 --> 00:33:23,200
might just be regex injection or it

964
00:33:23,200 --> 00:33:25,120
might be code in

965
00:33:25,120 --> 00:33:26,799
injection as a human you can find out

966
00:33:26,799 --> 00:33:28,480
quite quickly this behavior is quite

967
00:33:28,480 --> 00:33:29,360
rare

968
00:33:29,360 --> 00:33:31,840
and similarly if you send the word null

969
00:33:31,840 --> 00:33:33,919
and that gets a different response

970
00:33:33,919 --> 00:33:36,399
consistently from similar strings and

971
00:33:36,399 --> 00:33:38,880
from deleting the parameter entirely

972
00:33:38,880 --> 00:33:40,880
then this isn't showing a vulnerability

973
00:33:40,880 --> 00:33:42,320
right you wouldn't put that in a pintest

974
00:33:42,320 --> 00:33:44,320
report hopefully

975
00:33:44,320 --> 00:33:46,799
but it's it's a clue because it's

976
00:33:46,799 --> 00:33:49,600
showing you you can reach a code path

977
00:33:49,600 --> 00:33:51,200
that maybe the developer wasn't

978
00:33:51,200 --> 00:33:53,440
expecting you to reach and the scanner

979
00:33:53,440 --> 00:33:54,880
can just find that for you and present

980
00:33:54,880 --> 00:33:56,559
it to you and if you want you can take

981
00:33:56,559 --> 00:33:58,559
that and try and work with it to get a

982
00:33:58,559 --> 00:34:00,480
decent path

983
00:34:00,480 --> 00:34:02,320
because this is not about diagnosing

984
00:34:02,320 --> 00:34:04,000
vulnerabilities you don't really need to

985
00:34:04,000 --> 00:34:06,399
worry about false positives it's just

986
00:34:06,399 --> 00:34:09,119
about using automation to quickly sift

987
00:34:09,119 --> 00:34:11,280
through a huge attack surface looking

988
00:34:11,280 --> 00:34:14,320
for quirky behavior and breadcrumbs to

989
00:34:14,320 --> 00:34:18,000
guide us towards the good stuff

990
00:34:18,079 --> 00:34:19,599
while applying this question-based

991
00:34:19,599 --> 00:34:21,679
approach over the years i've gradually

992
00:34:21,679 --> 00:34:23,520
found it's even more powerful than it

993
00:34:23,520 --> 00:34:24,879
looks and it's

994
00:34:24,879 --> 00:34:27,280
an evolved version of this that's

995
00:34:27,280 --> 00:34:30,879
powered all of my recent research

996
00:34:31,119 --> 00:34:35,119
i call this scanning to learn the key is

997
00:34:35,119 --> 00:34:37,119
as you get more comfortable

998
00:34:37,119 --> 00:34:38,960
with asking poor questions you'll ask

999
00:34:38,960 --> 00:34:40,639
broader and broader questions and you'll

1000
00:34:40,639 --> 00:34:42,960
start asking ones where your goal isn't

1001
00:34:42,960 --> 00:34:45,359
to find a vulnerability

1002
00:34:45,359 --> 00:34:47,119
or even to find something really

1003
00:34:47,119 --> 00:34:48,399
suspicious

1004
00:34:48,399 --> 00:34:50,399
instead it's to learn something that

1005
00:34:50,399 --> 00:34:52,159
might be useful or to test the

1006
00:34:52,159 --> 00:34:53,760
hypothesis

1007
00:34:53,760 --> 00:34:55,839
and every question you ask like this

1008
00:34:55,839 --> 00:34:57,280
will inevitably leave you with more

1009
00:34:57,280 --> 00:34:59,200
questions but then you can iterate at

1010
00:34:59,200 --> 00:35:00,960
asking follow-up questions

1011
00:35:00,960 --> 00:35:02,320
and gradually learning things that

1012
00:35:02,320 --> 00:35:04,960
nobody else knows

1013
00:35:04,960 --> 00:35:06,720
you could call this machine powered

1014
00:35:06,720 --> 00:35:08,960
learning if you like uh machine does the

1015
00:35:08,960 --> 00:35:10,800
work you do the learning but the driving

1016
00:35:10,800 --> 00:35:14,000
force is your curiosity

1017
00:35:14,000 --> 00:35:16,800
for example uh this is one research lead

1018
00:35:16,800 --> 00:35:18,400
i followed and it didn't turn out well

1019
00:35:18,400 --> 00:35:20,240
i'll just tell you that in advance

1020
00:35:20,240 --> 00:35:22,560
but while reading the http 2 spec last

1021
00:35:22,560 --> 00:35:24,960
year i noticed that

1022
00:35:24,960 --> 00:35:26,560
there's the pseudo header called colon

1023
00:35:26,560 --> 00:35:28,960
path and it's always represented with

1024
00:35:28,960 --> 00:35:31,599
the string colon path

1025
00:35:31,599 --> 00:35:34,400
but the h but the hpac which is hp 2's

1026
00:35:34,400 --> 00:35:35,920
compression algorithm maps it to the

1027
00:35:35,920 --> 00:35:37,680
byte4

1028
00:35:37,680 --> 00:35:39,920
but with hp 2 with the protocol

1029
00:35:39,920 --> 00:35:42,079
technically you can send something

1030
00:35:42,079 --> 00:35:44,240
called sender header called colon path

1031
00:35:44,240 --> 00:35:46,960
and just not map it to the byte4

1032
00:35:46,960 --> 00:35:50,160
which creates this slightly ambiguous

1033
00:35:50,160 --> 00:35:52,240
situation and

1034
00:35:52,240 --> 00:35:53,280
i don't know

1035
00:35:53,280 --> 00:35:54,560
and

1036
00:35:54,560 --> 00:35:56,560
it just left me with a question what

1037
00:35:56,560 --> 00:35:59,119
happens if i do that right i don't have

1038
00:35:59,119 --> 00:36:00,880
a specific vulnerability in mind here

1039
00:36:00,880 --> 00:36:02,720
there's a number of ways this could go

1040
00:36:02,720 --> 00:36:05,119
badly i guess that's why i'm asking it

1041
00:36:05,119 --> 00:36:05,920
but

1042
00:36:05,920 --> 00:36:07,760
within 10 minutes i could just write up

1043
00:36:07,760 --> 00:36:10,079
a tiny bit of code and then i ran this

1044
00:36:10,079 --> 00:36:12,320
on a couple hundred thousand websites

1045
00:36:12,320 --> 00:36:13,520
and

1046
00:36:13,520 --> 00:36:15,440
looked at the results

1047
00:36:15,440 --> 00:36:17,520
i with no idea what was going to happen

1048
00:36:17,520 --> 00:36:18,960
and the answer was well they basically

1049
00:36:18,960 --> 00:36:20,800
all rejected the request

1050
00:36:20,800 --> 00:36:21,920
and

1051
00:36:21,920 --> 00:36:23,119
that left me wondering well are they

1052
00:36:23,119 --> 00:36:24,320
rejecting it because i've hit an

1053
00:36:24,320 --> 00:36:25,839
exciting code path and things are kind

1054
00:36:25,839 --> 00:36:28,400
of blowing up and throwing exceptions or

1055
00:36:28,400 --> 00:36:30,960
is it just because they don't like colon

1056
00:36:30,960 --> 00:36:33,040
at the start of a header name so i sent

1057
00:36:33,040 --> 00:36:35,440
a follow-up with colon asdf instead of

1058
00:36:35,440 --> 00:36:38,720
colon path and they rejected that too

1059
00:36:38,720 --> 00:36:40,160
and i was like well okay what's

1060
00:36:40,160 --> 00:36:42,320
happening here is it because they're

1061
00:36:42,320 --> 00:36:43,839
trying to treat this as a pseudo header

1062
00:36:43,839 --> 00:36:45,760
and asdf is not a valid pseudo header so

1063
00:36:45,760 --> 00:36:47,760
i did a follow-up with a colon

1064
00:36:47,760 --> 00:36:49,200
just in the middle of the header name

1065
00:36:49,200 --> 00:36:50,000
and

1066
00:36:50,000 --> 00:36:51,839
at this point in time i realized

1067
00:36:51,839 --> 00:36:53,599
actually the hpac library that i was

1068
00:36:53,599 --> 00:36:54,960
using wasn't doing what i thought it was

1069
00:36:54,960 --> 00:36:56,880
doing and the whole thing was a waste of

1070
00:36:56,880 --> 00:36:58,720
time and it collapsed in a heap

1071
00:36:58,720 --> 00:36:59,760
but

1072
00:36:59,760 --> 00:37:01,280
you can see you can you can take this

1073
00:37:01,280 --> 00:37:03,359
iterative approach to asking questions

1074
00:37:03,359 --> 00:37:05,839
and you can gradually learn things

1075
00:37:05,839 --> 00:37:08,960
that nobody else knows you'll just start

1076
00:37:08,960 --> 00:37:11,280
stumbling on bits of knowledge that are

1077
00:37:11,280 --> 00:37:13,040
not derived from specifications they're

1078
00:37:13,040 --> 00:37:14,640
not how things are meant to work but how

1079
00:37:14,640 --> 00:37:16,640
things really work which is how you can

1080
00:37:16,640 --> 00:37:18,079
hack things

1081
00:37:18,079 --> 00:37:20,320
there's two key points to keeping this

1082
00:37:20,320 --> 00:37:23,280
approach effective

1083
00:37:23,280 --> 00:37:25,599
firstly it's crucial that asking these

1084
00:37:25,599 --> 00:37:27,680
kinds of questions is easy because

1085
00:37:27,680 --> 00:37:30,240
otherwise you won't ask very many the

1086
00:37:30,240 --> 00:37:32,720
reason that this research line collapsed

1087
00:37:32,720 --> 00:37:34,720
is because for me patching the hpac

1088
00:37:34,720 --> 00:37:36,800
library to do what i wanted just looked

1089
00:37:36,800 --> 00:37:40,240
like more effort than it was worth

1090
00:37:40,240 --> 00:37:41,520
and

1091
00:37:41,520 --> 00:37:43,599
you don't have to like make a framework

1092
00:37:43,599 --> 00:37:45,680
and so on upfront for this just each

1093
00:37:45,680 --> 00:37:47,839
time you ask a question with a bit of

1094
00:37:47,839 --> 00:37:49,680
code just ask yourself how can i make it

1095
00:37:49,680 --> 00:37:52,720
easier next time and over time yeah you

1096
00:37:52,720 --> 00:37:54,560
you'll end up with a framework and a

1097
00:37:54,560 --> 00:37:55,680
test bed

1098
00:37:55,680 --> 00:37:57,200
and you'll reach a point where it's so

1099
00:37:57,200 --> 00:37:59,200
easy to ask questions you'll be happy to

1100
00:37:59,200 --> 00:38:01,839
ask really stupid questions and as soon

1101
00:38:01,839 --> 00:38:03,440
as you start asking really stupid

1102
00:38:03,440 --> 00:38:04,560
questions

1103
00:38:04,560 --> 00:38:06,000
you'll start finding some really stupid

1104
00:38:06,000 --> 00:38:09,280
websites and having a great time

1105
00:38:09,280 --> 00:38:11,440
the second point is maybe a little bit

1106
00:38:11,440 --> 00:38:13,280
hard to visualize without

1107
00:38:13,280 --> 00:38:14,960
trying it but

1108
00:38:14,960 --> 00:38:17,040
if you ask a good question you'll

1109
00:38:17,040 --> 00:38:18,960
generally find some obvious interesting

1110
00:38:18,960 --> 00:38:21,200
things on some sites

1111
00:38:21,200 --> 00:38:23,119
and you'll get a lot of noise from

1112
00:38:23,119 --> 00:38:25,440
others so you'll naturally want to tweak

1113
00:38:25,440 --> 00:38:28,400
the code to eliminate the noise

1114
00:38:28,400 --> 00:38:30,000
when you make this tweet you'll have a

1115
00:38:30,000 --> 00:38:33,119
choice which is do you eliminate

1116
00:38:33,119 --> 00:38:34,240
just

1117
00:38:34,240 --> 00:38:36,480
that identified noise source

1118
00:38:36,480 --> 00:38:38,720
or do you eliminate everything that's

1119
00:38:38,720 --> 00:38:40,160
not interesting

1120
00:38:40,160 --> 00:38:42,400
and here it's really important to just

1121
00:38:42,400 --> 00:38:44,320
be specific and just eliminate that one

1122
00:38:44,320 --> 00:38:46,560
noise source because there are often

1123
00:38:46,560 --> 00:38:48,960
valuable things hidden in the noise even

1124
00:38:48,960 --> 00:38:51,119
if you think that's not possible

1125
00:38:51,119 --> 00:38:54,079
it's much better to have five scan

1126
00:38:54,079 --> 00:38:56,720
code change cycles to eliminate five

1127
00:38:56,720 --> 00:38:58,160
different noise sources than to code

1128
00:38:58,160 --> 00:39:00,240
something that's too broad and lose

1129
00:39:00,240 --> 00:39:01,200
something

1130
00:39:01,200 --> 00:39:03,520
that's valuable

1131
00:39:03,520 --> 00:39:06,079
the underlying value of this is that

1132
00:39:06,079 --> 00:39:08,400
every question that you ask is built on

1133
00:39:08,400 --> 00:39:11,920
your own understanding and assumptions

1134
00:39:11,920 --> 00:39:13,839
and if you're really lucky when you ask

1135
00:39:13,839 --> 00:39:15,599
this question you'll get some results

1136
00:39:15,599 --> 00:39:18,000
that take your assumptions and destroy

1137
00:39:18,000 --> 00:39:20,160
them

1138
00:39:20,160 --> 00:39:22,320
that is pretty much everything i have

1139
00:39:22,320 --> 00:39:24,160
for you i hope you found it useful if

1140
00:39:24,160 --> 00:39:25,920
you'd like to explore these case studies

1141
00:39:25,920 --> 00:39:27,920
in more depth uh you can grab these

1142
00:39:27,920 --> 00:39:29,920
slides on the website within a few days

1143
00:39:29,920 --> 00:39:32,720
and then dive into the references here

1144
00:39:32,720 --> 00:39:36,000
there's one final point i'd like to make

1145
00:39:36,000 --> 00:39:37,280
which is

1146
00:39:37,280 --> 00:39:39,359
it's a mistake to think that there's one

1147
00:39:39,359 --> 00:39:41,920
true way of doing this so if anything

1148
00:39:41,920 --> 00:39:44,000
speaks to you take that and put your

1149
00:39:44,000 --> 00:39:46,079
personal spin on it and if you disagree

1150
00:39:46,079 --> 00:39:47,440
take what i said

1151
00:39:47,440 --> 00:39:49,280
and do the opposite maybe you just want

1152
00:39:49,280 --> 00:39:52,400
to set things on fire great go for it

1153
00:39:52,400 --> 00:39:54,480
where you differ from other people is

1154
00:39:54,480 --> 00:39:56,720
where you find new issues if you try and

1155
00:39:56,720 --> 00:39:58,480
mimic someone else's approach too

1156
00:39:58,480 --> 00:40:00,800
closely you're basically a scanner with

1157
00:40:00,800 --> 00:40:03,280
the default settings

1158
00:40:03,280 --> 00:40:06,000
the three key things to take away

1159
00:40:06,000 --> 00:40:08,640
are that there's quality bugs easily

1160
00:40:08,640 --> 00:40:10,640
within your reach

1161
00:40:10,640 --> 00:40:14,160
scan to learn and that idea you've got

1162
00:40:14,160 --> 00:40:15,680
just try it

1163
00:40:15,680 --> 00:40:17,760
i'll take four minutes of questions now

1164
00:40:17,760 --> 00:40:19,280
uh if you have any more after that just

1165
00:40:19,280 --> 00:40:21,119
grab me at the conference or chat me an

1166
00:40:21,119 --> 00:40:22,839
email don't forget to follow me on

1167
00:40:22,839 --> 00:40:27,240
twitter thank you for listening

