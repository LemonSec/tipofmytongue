1
00:00:02,560 --> 00:00:07,349
<font color="#E5E5E5">sure hi to everyone my name is</font><font color="#CCCCCC"> Nino</font>

2
00:00:05,439 --> 00:00:09,700
<font color="#CCCCCC">reddening and today I'm going to present</font>

3
00:00:07,349 --> 00:00:12,730
<font color="#E5E5E5">boots stomp on the security of</font>

4
00:00:09,700 --> 00:00:15,039
<font color="#CCCCCC">bootloader</font><font color="#E5E5E5"> in mobile devices this work</font>

5
00:00:12,730 --> 00:00:18,780
<font color="#E5E5E5">has</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> done by</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> and several of other</font>

6
00:00:15,039 --> 00:00:20,650
my colleagues at UCSB in Santa<font color="#CCCCCC"> Barbara a</font>

7
00:00:18,780 --> 00:00:22,540
little bit about myself

8
00:00:20,650 --> 00:00:23,830
I<font color="#CCCCCC"> am a fourth year PhD student in</font>

9
00:00:22,540 --> 00:00:26,650
<font color="#E5E5E5">computer security at UCSB</font>

10
00:00:23,830 --> 00:00:28,630
in a sac lab group my main interests

11
00:00:26,650 --> 00:00:31,540
include dynamic and<font color="#E5E5E5"> Static</font><font color="#CCCCCC"> valid</font>

12
00:00:28,630 --> 00:00:33,280
analysis and you can find me about me

13
00:00:31,540 --> 00:00:39,010
through my<font color="#CCCCCC"> website or to my github</font>

14
00:00:33,280 --> 00:00:40,570
account or using my<font color="#E5E5E5"> Twitter handle</font><font color="#CCCCCC"> ok so</font>

15
00:00:39,010 --> 00:00:43,050
let's start<font color="#E5E5E5"> let's start</font><font color="#CCCCCC"> talking about</font>

16
00:00:40,570 --> 00:00:45,429
boot loaders so what is a boot loader

17
00:00:43,050 --> 00:00:47,919
<font color="#E5E5E5">shortly a boot loader is a software</font>

18
00:00:45,429 --> 00:00:50,879
<font color="#E5E5E5">module</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> initialized the device and</font>

19
00:00:47,920 --> 00:00:56,260
<font color="#E5E5E5">its peripherals lost the kernel from</font><font color="#CCCCCC"> 6</font>

20
00:00:50,879 --> 00:00:58,329
<font color="#E5E5E5">secondary storage and jumps into it on</font>

21
00:00:56,260 --> 00:01:01,510
this work<font color="#CCCCCC"> we focused on</font><font color="#E5E5E5"> Android boot</font>

22
00:00:58,329 --> 00:01:03,639
loaders<font color="#CCCCCC"> and red boot loaders are very</font>

23
00:01:01,510 --> 00:01:05,349
diverse<font color="#CCCCCC"> there is really no standard like</font>

24
00:01:03,639 --> 00:01:07,689
for example<font color="#E5E5E5"> arm just give some</font>

25
00:01:05,349 --> 00:01:09,039
guidelines<font color="#CCCCCC"> but manufacturers</font><font color="#E5E5E5"> are free to</font>

26
00:01:07,689 --> 00:01:11,350
implement<font color="#CCCCCC"> their boot loaders</font>

27
00:01:09,040 --> 00:01:14,020
however the<font color="#E5E5E5"> please the</font><font color="#CCCCCC"> bidding</font><font color="#E5E5E5"> process</font>

28
00:01:11,350 --> 00:01:17,289
goes<font color="#CCCCCC"> through several stages as we will</font>

29
00:01:14,020 --> 00:01:19,689
see soon and boot loaders<font color="#E5E5E5"> protect the</font>

30
00:01:17,290 --> 00:01:21,369
integrity of user<font color="#E5E5E5"> data and device they</font>

31
00:01:19,689 --> 00:01:24,339
provided<font color="#E5E5E5"> what is called</font><font color="#CCCCCC"> the trusted boot</font>

32
00:01:21,369 --> 00:01:26,140
<font color="#CCCCCC">as we will see soon</font><font color="#E5E5E5"> also modern boot</font>

33
00:01:24,340 --> 00:01:31,060
loaders provide what is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> the</font>

34
00:01:26,140 --> 00:01:33,939
bootloader unlocking sorry<font color="#E5E5E5"> so ok one may</font>

35
00:01:31,060 --> 00:01:35,500
ask<font color="#E5E5E5"> why</font><font color="#CCCCCC"> attacking boot loaders well an</font>

36
00:01:33,939 --> 00:01:38,380
attacker<font color="#E5E5E5"> controlling the boot rate</font>

37
00:01:35,500 --> 00:01:40,140
process my boot custom<font color="#E5E5E5"> Android OS is</font>

38
00:01:38,380 --> 00:01:42,820
<font color="#CCCCCC">stunning for example persistent rootkit</font>

39
00:01:40,140 --> 00:01:44,799
<font color="#E5E5E5">medicine cases as we will see brick the</font>

40
00:01:42,820 --> 00:01:50,439
device and in some<font color="#E5E5E5"> other cases can</font>

41
00:01:44,799 --> 00:01:52,630
achieve control<font color="#E5E5E5"> over peripherals overall</font>

42
00:01:50,439 --> 00:01:54,939
we rent<font color="#E5E5E5"> if I'd for different properties</font>

43
00:01:52,630 --> 00:01:57,189
the<font color="#E5E5E5"> bootloader should satisfy first of</font>

44
00:01:54,939 --> 00:02:00,369
<font color="#E5E5E5">all the Android OS should be verifiable</font>

45
00:01:57,189 --> 00:02:02,199
<font color="#E5E5E5">to be in a non</font><font color="#CCCCCC"> temperate state a</font><font color="#E5E5E5"> route</font>

46
00:02:00,369 --> 00:02:03,710
process<font color="#E5E5E5"> cannot interfere with peripheral</font>

47
00:02:02,200 --> 00:02:06,110
setup

48
00:02:03,710 --> 00:02:08,000
<font color="#CCCCCC">a root process cannot unlock the</font>

49
00:02:06,110 --> 00:02:09,500
bootloader<font color="#CCCCCC"> and finally a physical</font>

50
00:02:08,000 --> 00:02:13,730
attacker should not be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> unlock</font>

51
00:02:09,500 --> 00:02:16,250
<font color="#E5E5E5">the bootloader let's see the thread</font>

52
00:02:13,730 --> 00:02:18,200
model that we use in this work in<font color="#CCCCCC"> this</font>

53
00:02:16,250 --> 00:02:20,450
work we assume that<font color="#E5E5E5"> an attacker has</font>

54
00:02:18,200 --> 00:02:23,060
control over<font color="#CCCCCC"> the Android OS</font><font color="#E5E5E5"> in other</font>

55
00:02:20,450 --> 00:02:25,220
words<font color="#E5E5E5"> she has root privileges</font><font color="#CCCCCC"> so one</font>

56
00:02:23,060 --> 00:02:27,260
<font color="#CCCCCC">might ask okay cool but</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> your attacker</font>

57
00:02:25,220 --> 00:02:29,840
<font color="#E5E5E5">has with privileges is already game over</font>

58
00:02:27,260 --> 00:02:31,549
so why even<font color="#E5E5E5"> bother well the safety</font>

59
00:02:29,840 --> 00:02:33,470
properties<font color="#E5E5E5"> that I mentioned you read</font>

60
00:02:31,550 --> 00:02:36,200
before should still hold<font color="#E5E5E5"> anyway</font><font color="#CCCCCC"> in other</font>

61
00:02:33,470 --> 00:02:41,630
words a user<font color="#E5E5E5"> should know if his device</font>

62
00:02:36,200 --> 00:02:43,369
it's in a tempered<font color="#CCCCCC"> state here's a brief</font>

63
00:02:41,630 --> 00:02:44,750
<font color="#CCCCCC">outline</font><font color="#E5E5E5"> I'm gonna start</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about</font>

64
00:02:43,370 --> 00:02:46,400
<font color="#E5E5E5">the booting process</font><font color="#CCCCCC"> then I'm</font><font color="#E5E5E5"> gonna</font>

65
00:02:44,750 --> 00:02:48,290
<font color="#E5E5E5">proceed with explaining what is the</font>

66
00:02:46,400 --> 00:02:51,140
bootloader<font color="#E5E5E5"> unlocking I'm gonna introduce</font>

67
00:02:48,290 --> 00:02:54,590
you<font color="#E5E5E5"> our tool boots stomp we're gonna see</font>

68
00:02:51,140 --> 00:02:58,399
evaluation some some examples and at the

69
00:02:54,590 --> 00:03:01,489
end of conclusions<font color="#E5E5E5"> let's start with</font><font color="#CCCCCC"> the</font>

70
00:02:58,400 --> 00:03:03,230
booting process the booting process goes

71
00:03:01,489 --> 00:03:05,300
<font color="#E5E5E5">through several stages in the first</font>

72
00:03:03,230 --> 00:03:07,988
stage<font color="#E5E5E5"> happening what is called the god</font>

73
00:03:05,300 --> 00:03:10,760
mode which is called<font color="#E5E5E5"> actually also</font><font color="#CCCCCC"> the</font>

74
00:03:07,989 --> 00:03:13,400
exception level<font color="#CCCCCC"> 3 in arm in this mode</font>

75
00:03:10,760 --> 00:03:16,040
like processes as full control over<font color="#E5E5E5"> the</font>

76
00:03:13,400 --> 00:03:18,110
<font color="#E5E5E5">whole device in this first stage a very</font>

77
00:03:16,040 --> 00:03:21,320
first<font color="#E5E5E5"> bootloader which is present in</font>

78
00:03:18,110 --> 00:03:24,530
<font color="#E5E5E5">Iran is executed and its purpose is to</font>

79
00:03:21,320 --> 00:03:26,299
locate<font color="#CCCCCC"> two</font><font color="#E5E5E5"> checks to check for integrity</font>

80
00:03:24,530 --> 00:03:29,150
and to run a second bootloader called

81
00:03:26,299 --> 00:03:31,840
built in the picture this bootloader<font color="#E5E5E5"> in</font>

82
00:03:29,150 --> 00:03:33,860
turn will locate check for integrity<font color="#E5E5E5"> and</font>

83
00:03:31,840 --> 00:03:37,070
load<font color="#CCCCCC"> a third bootloader</font>

84
00:03:33,860 --> 00:03:38,930
called<font color="#E5E5E5"> built</font><font color="#CCCCCC"> erawan this bootloader will</font>

85
00:03:37,070 --> 00:03:42,799
first set up<font color="#E5E5E5"> the secure and non-secure</font>

86
00:03:38,930 --> 00:03:45,739
world<font color="#E5E5E5"> on the on the processor and it</font>

87
00:03:42,799 --> 00:03:49,070
will then locate check for<font color="#CCCCCC"> integrity and</font>

88
00:03:45,739 --> 00:03:53,000
load the trusted OS which will set up

89
00:03:49,070 --> 00:03:57,260
the peripherals<font color="#E5E5E5"> and manage the trusted</font>

90
00:03:53,000 --> 00:03:59,120
apps<font color="#E5E5E5"> the other one also</font><font color="#CCCCCC"> we locate</font><font color="#E5E5E5"> again</font>

91
00:03:57,260 --> 00:04:00,858
check for<font color="#CCCCCC"> integrity</font><font color="#E5E5E5"> and load a fourth</font>

92
00:03:59,120 --> 00:04:03,230
bootloader<font color="#CCCCCC"> by ultra so in the picture</font>

93
00:04:00,859 --> 00:04:05,269
which will locate check for integrating

94
00:04:03,230 --> 00:04:08,780
load<font color="#E5E5E5"> the Android kernel which as we all</font>

95
00:04:05,269 --> 00:04:12,030
<font color="#E5E5E5">know manages all the</font><font color="#CCCCCC"> Android apps</font>

96
00:04:08,780 --> 00:04:13,650
in this work<font color="#CCCCCC"> we focused on the BL</font>

97
00:04:12,030 --> 00:04:15,600
territory which<font color="#CCCCCC"> is the fourth and last</font>

98
00:04:13,650 --> 00:04:17,930
<font color="#E5E5E5">bootloader which</font><font color="#CCCCCC"> is the only bootloader</font>

99
00:04:15,600 --> 00:04:25,610
with actually interact with<font color="#E5E5E5"> Android</font>

100
00:04:17,930 --> 00:04:28,440
<font color="#CCCCCC">unsecured operative system yeah sorry</font>

101
00:04:25,610 --> 00:04:34,290
yeah so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is how Google</font><font color="#E5E5E5"> for you see</font>

102
00:04:28,440 --> 00:04:37,260
the booting process<font color="#E5E5E5"> okay so as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font>

103
00:04:34,290 --> 00:04:39,960
<font color="#CCCCCC">imagine</font><font color="#E5E5E5"> like each step in the booting</font>

104
00:04:37,260 --> 00:04:41,670
process<font color="#E5E5E5"> load for the next step</font><font color="#CCCCCC"> checks</font>

105
00:04:39,960 --> 00:04:44,010
for integrity<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Danny jumps into it</font>

106
00:04:41,670 --> 00:04:45,750
this<font color="#E5E5E5"> chain this chain of check for</font>

107
00:04:44,010 --> 00:04:47,820
<font color="#CCCCCC">integrity is called the chain of trust</font>

108
00:04:45,750 --> 00:04:52,020
<font color="#E5E5E5">and assured that when the phone is</font>

109
00:04:47,820 --> 00:04:56,159
booted<font color="#E5E5E5"> and running the device it's not</font>

110
00:04:52,020 --> 00:04:59,039
in a<font color="#CCCCCC"> temperate State</font><font color="#E5E5E5"> this chain</font><font color="#CCCCCC"> of trust</font>

111
00:04:56,160 --> 00:05:01,650
<font color="#CCCCCC">can be</font><font color="#E5E5E5"> broken</font><font color="#CCCCCC"> at the very last step</font><font color="#E5E5E5"> when</font>

112
00:04:59,040 --> 00:05:02,850
the<font color="#E5E5E5"> BLT reloads</font><font color="#CCCCCC"> the Android OS</font><font color="#E5E5E5"> and this</font>

113
00:05:01,650 --> 00:05:04,679
is what is called<font color="#E5E5E5"> unlocking the</font>

114
00:05:02,850 --> 00:05:09,600
bootloader<font color="#CCCCCC"> will I'm gonna</font><font color="#E5E5E5"> explain like</font>

115
00:05:04,680 --> 00:05:11,880
<font color="#E5E5E5">the next slide water water is so first</font>

116
00:05:09,600 --> 00:05:14,340
of<font color="#E5E5E5"> all what is the bootloader unlocking</font>

117
00:05:11,880 --> 00:05:16,050
the bootloader unlocking is a mean to

118
00:05:14,340 --> 00:05:16,650
skip the very last<font color="#CCCCCC"> step of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> shinobi</font>

119
00:05:16,050 --> 00:05:19,169
trust

120
00:05:16,650 --> 00:05:22,950
so why one would like to<font color="#E5E5E5"> do that well</font>

121
00:05:19,169 --> 00:05:24,750
the answer is<font color="#E5E5E5"> that a user won't want to</font>

122
00:05:22,950 --> 00:05:27,960
<font color="#E5E5E5">do that in order to load some cost some</font>

123
00:05:24,750 --> 00:05:30,930
custom Android<font color="#E5E5E5"> OS and who should be</font><font color="#CCCCCC"> able</font>

124
00:05:27,960 --> 00:05:32,940
<font color="#E5E5E5">to</font><font color="#CCCCCC"> do it</font><font color="#E5E5E5"> only the device owner which</font>

125
00:05:30,930 --> 00:05:36,000
also has the<font color="#CCCCCC"> physical</font><font color="#E5E5E5"> access to the</font>

126
00:05:32,940 --> 00:05:38,610
device and this last step is<font color="#CCCCCC"> actually</font>

127
00:05:36,000 --> 00:05:41,580
enforced through two different<font color="#CCCCCC"> - through</font>

128
00:05:38,610 --> 00:05:43,919
a two-step procedure<font color="#E5E5E5"> let's see this</font>

129
00:05:41,580 --> 00:05:45,900
procedure<font color="#E5E5E5"> first of all the user has to</font>

130
00:05:43,919 --> 00:05:48,450
unlock the phone<font color="#E5E5E5"> like using his penis</font>

131
00:05:45,900 --> 00:05:51,120
password<font color="#CCCCCC"> whatever he has</font><font color="#E5E5E5"> to set a</font>

132
00:05:48,450 --> 00:05:53,940
possess option in the under<font color="#E5E5E5"> the options</font>

133
00:05:51,120 --> 00:05:55,890
called Auriemma locking after that she

134
00:05:53,940 --> 00:05:58,169
has to reboot the device<font color="#CCCCCC"> in anti</font><font color="#E5E5E5"> do what</font>

135
00:05:55,890 --> 00:05:59,700
is<font color="#E5E5E5"> called the fastboot mode and Sam Sann</font>

136
00:05:58,169 --> 00:06:04,049
commands to finally unlock<font color="#CCCCCC"> the</font>

137
00:05:59,700 --> 00:06:06,750
<font color="#E5E5E5">bootloader the first step this procedure</font>

138
00:06:04,050 --> 00:06:10,230
is<font color="#CCCCCC"> stored in</font><font color="#E5E5E5"> order to hinder at to</font>

139
00:06:06,750 --> 00:06:12,180
<font color="#E5E5E5">hinder attacker who may have liked the</font>

140
00:06:10,230 --> 00:06:14,160
device<font color="#CCCCCC"> who can control</font><font color="#E5E5E5"> the device and</font>

141
00:06:12,180 --> 00:06:15,960
<font color="#E5E5E5">this is why because it's supposed that</font>

142
00:06:14,160 --> 00:06:17,640
they don't know<font color="#E5E5E5"> the pin to unlock the</font>

143
00:06:15,960 --> 00:06:19,590
phone<font color="#E5E5E5"> and the second part of this</font>

144
00:06:17,640 --> 00:06:23,780
process<font color="#E5E5E5"> is thought to be</font><font color="#CCCCCC"> against which</font>

145
00:06:19,590 --> 00:06:23,780
processes<font color="#E5E5E5"> which my run on the phone</font>

146
00:06:24,170 --> 00:06:27,210
<font color="#E5E5E5">okay</font>

147
00:06:25,380 --> 00:06:29,700
<font color="#E5E5E5">yellow key state also called device</font>

148
00:06:27,210 --> 00:06:32,340
security state is saved on purchases

149
00:06:29,700 --> 00:06:34,469
storage<font color="#E5E5E5"> this information should only be</font>

150
00:06:32,340 --> 00:06:36,150
writable by<font color="#CCCCCC"> high privileged components</font>

151
00:06:34,470 --> 00:06:40,770
for<font color="#CCCCCC"> example the bootloader</font><font color="#E5E5E5"> or the secure</font>

152
00:06:36,150 --> 00:06:42,900
<font color="#CCCCCC">s so the question that</font><font color="#E5E5E5"> we posed to</font>

153
00:06:40,770 --> 00:06:44,729
<font color="#CCCCCC">ourself that</font><font color="#E5E5E5"> we wanted was can</font><font color="#CCCCCC"> I</font>

154
00:06:42,900 --> 00:06:46,710
compromised<font color="#E5E5E5"> and otherwise affect the</font>

155
00:06:44,730 --> 00:06:49,950
booting process<font color="#CCCCCC"> well the answer is yes</font>

156
00:06:46,710 --> 00:06:51,890
<font color="#CCCCCC">let's see how as I mentioned before the</font>

157
00:06:49,950 --> 00:06:56,599
bootloader<font color="#E5E5E5"> reads from</font><font color="#CCCCCC"> purchases storage</font>

158
00:06:51,890 --> 00:06:59,580
he locates the kernel<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Iran's it</font>

159
00:06:56,600 --> 00:07:02,760
let's assume<font color="#CCCCCC"> now that the Android OS is</font>

160
00:06:59,580 --> 00:07:04,349
<font color="#E5E5E5">somehow compromised woman happen is that</font>

161
00:07:02,760 --> 00:07:06,960
the Android<font color="#E5E5E5"> the compromised Android OS</font>

162
00:07:04,350 --> 00:07:09,750
can write<font color="#E5E5E5"> to</font><font color="#CCCCCC"> persistent storage rot in</font>

163
00:07:06,960 --> 00:07:13,020
some<font color="#E5E5E5"> crafted data compromising this data</font>

164
00:07:09,750 --> 00:07:15,480
which in turn will<font color="#CCCCCC"> be read during the</font>

165
00:07:13,020 --> 00:07:17,700
<font color="#E5E5E5">next booting of the phone and in this</font>

166
00:07:15,480 --> 00:07:22,560
case if the bootloader<font color="#E5E5E5"> contains some</font><font color="#CCCCCC"> box</font>

167
00:07:17,700 --> 00:07:24,240
<font color="#CCCCCC">it can</font><font color="#E5E5E5"> be compromised as well okay</font>

168
00:07:22,560 --> 00:07:26,250
another question<font color="#E5E5E5"> that someone may ask is</font>

169
00:07:24,240 --> 00:07:28,320
that<font color="#E5E5E5"> okay but</font><font color="#CCCCCC"> if the bootloader</font><font color="#E5E5E5"> only</font>

170
00:07:26,250 --> 00:07:31,200
loads the Android<font color="#CCCCCC"> worse how can an</font>

171
00:07:28,320 --> 00:07:32,610
attacker can arm<font color="#CCCCCC"> the device right</font><font color="#E5E5E5"> the</font>

172
00:07:31,200 --> 00:07:34,320
answer<font color="#CCCCCC"> is that bootloader several the</font>

173
00:07:32,610 --> 00:07:36,360
<font color="#CCCCCC">words the booting process that I show</font>

174
00:07:34,320 --> 00:07:38,430
<font color="#CCCCCC">you</font><font color="#E5E5E5"> before is</font><font color="#CCCCCC"> just how Google suggests</font>

175
00:07:36,360 --> 00:07:40,140
the booting process to a<font color="#E5E5E5"> pen but in the</font>

176
00:07:38,430 --> 00:07:42,930
<font color="#E5E5E5">wild we found that only Qualcomm in</font>

177
00:07:40,140 --> 00:07:45,419
<font color="#E5E5E5">Nvidia follow closely</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Google</font>

178
00:07:42,930 --> 00:07:47,940
suggestions and the BL 33 runs an

179
00:07:45,420 --> 00:07:50,340
exception level<font color="#CCCCCC"> 1 we</font><font color="#E5E5E5"> found that what way</font>

180
00:07:47,940 --> 00:07:52,560
my bootloader<font color="#E5E5E5"> is also responsible to</font>

181
00:07:50,340 --> 00:07:54,119
<font color="#E5E5E5">initializing modem and peripherals and</font>

182
00:07:52,560 --> 00:07:56,730
<font color="#E5E5E5">what's even more</font><font color="#CCCCCC"> warning is that</font><font color="#E5E5E5"> Iran's</font>

183
00:07:54,120 --> 00:07:59,760
<font color="#CCCCCC">l3 which is the the mode which is called</font>

184
00:07:56,730 --> 00:08:01,230
the god mode so in theory if if an

185
00:07:59,760 --> 00:08:03,390
attacker<font color="#E5E5E5"> has control over their</font>

186
00:08:01,230 --> 00:08:06,230
bootloader it can literally do

187
00:08:03,390 --> 00:08:06,229
everything<font color="#CCCCCC"> on the device</font>

188
00:08:06,290 --> 00:08:11,550
finally<font color="#CCCCCC"> mediatek</font><font color="#E5E5E5"> we found that the</font>

189
00:08:09,389 --> 00:08:13,500
<font color="#CCCCCC">minitex bootloader</font><font color="#E5E5E5"> is also responsible</font>

190
00:08:11,550 --> 00:08:19,620
for initializing<font color="#E5E5E5"> the modem though he</font>

191
00:08:13,500 --> 00:08:22,320
runs in l1 l1<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so in order to</font>

192
00:08:19,620 --> 00:08:23,370
understand whether<font color="#E5E5E5"> in Android OS can</font>

193
00:08:22,320 --> 00:08:25,949
actually interfere<font color="#CCCCCC"> with the booting</font>

194
00:08:23,370 --> 00:08:29,699
process<font color="#E5E5E5"> with the tool to find this type</font>

195
00:08:25,949 --> 00:08:31,830
of vulnerabilities<font color="#CCCCCC"> booty loaders are</font>

196
00:08:29,699 --> 00:08:33,960
hard to<font color="#CCCCCC"> analyze</font><font color="#E5E5E5"> why well the source code</font>

197
00:08:31,830 --> 00:08:37,740
is hardly available<font color="#CCCCCC"> we usually have to</font>

198
00:08:33,960 --> 00:08:40,409
deal with<font color="#CCCCCC"> binary</font><font color="#E5E5E5"> blobs</font><font color="#CCCCCC"> dynamic execution</font>

199
00:08:37,740 --> 00:08:41,849
<font color="#CCCCCC">is</font><font color="#E5E5E5"> impractical because</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> hardware is</font>

200
00:08:40,409 --> 00:08:45,000
<font color="#CCCCCC">required to actually run</font><font color="#E5E5E5"> the bootloader</font>

201
00:08:41,849 --> 00:08:48,180
<font color="#CCCCCC">and finally as</font><font color="#E5E5E5"> they execute before</font><font color="#CCCCCC"> the</font>

202
00:08:45,000 --> 00:08:52,190
<font color="#CCCCCC">Android was there is known known no</font>

203
00:08:48,180 --> 00:08:54,599
library<font color="#E5E5E5"> or syscall so usually</font>

204
00:08:52,190 --> 00:08:57,029
manufactures write their own main copy

205
00:08:54,600 --> 00:09:03,450
there is no such mem copy<font color="#E5E5E5"> function to</font>

206
00:08:57,029 --> 00:09:05,070
look for to<font color="#CCCCCC"> become all of these all</font><font color="#E5E5E5"> of</font>

207
00:09:03,450 --> 00:09:07,800
this problem we wrote a static tool

208
00:09:05,070 --> 00:09:09,930
called boots stomp boots stomp an

209
00:09:07,800 --> 00:09:14,029
automatic static<font color="#E5E5E5"> binary tool for finding</font>

210
00:09:09,930 --> 00:09:14,029
<font color="#E5E5E5">security vulnerabilities in bootloader</font>

211
00:09:14,540 --> 00:09:18,540
determines whether<font color="#E5E5E5"> attacker controlled</font>

212
00:09:16,800 --> 00:09:20,910
data can influence the bootloader

213
00:09:18,540 --> 00:09:23,400
intended<font color="#CCCCCC"> behavior and he</font><font color="#E5E5E5"> produced a</font>

214
00:09:20,910 --> 00:09:25,079
traceable output<font color="#E5E5E5"> this is done so that a</font>

215
00:09:23,400 --> 00:09:27,540
<font color="#E5E5E5">security analyst can actually verify</font><font color="#CCCCCC"> the</font>

216
00:09:25,080 --> 00:09:31,700
<font color="#CCCCCC">unit generated alerts</font><font color="#E5E5E5"> and understand if</font>

217
00:09:27,540 --> 00:09:31,699
an alert<font color="#E5E5E5"> is a true or</font><font color="#CCCCCC"> false positive</font>

218
00:09:31,850 --> 00:09:37,200
boots stomp relies on a multi tag taint

219
00:09:35,160 --> 00:09:40,579
analysis engine which is<font color="#E5E5E5"> completely</font>

220
00:09:37,200 --> 00:09:44,640
based<font color="#E5E5E5"> on dynamic symbolic execution and</font>

221
00:09:40,580 --> 00:09:48,839
use this fully symbolic engine to trace

222
00:09:44,640 --> 00:09:51,689
attacker consolidation in this slide you

223
00:09:48,839 --> 00:09:54,630
<font color="#CCCCCC">can see</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> overview of</font><font color="#E5E5E5"> our system first</font>

224
00:09:51,690 --> 00:09:56,700
of all the analyst has to somehow gather

225
00:09:54,630 --> 00:09:58,620
the binary<font color="#CCCCCC"> blow up the bootloader this</font>

226
00:09:56,700 --> 00:10:01,560
can be done<font color="#CCCCCC"> by extracting</font><font color="#E5E5E5"> it from the</font>

227
00:09:58,620 --> 00:10:04,370
<font color="#E5E5E5">device if she has one organic from the</font>

228
00:10:01,560 --> 00:10:08,880
<font color="#E5E5E5">internet once the the binary blob is a</font>

229
00:10:04,370 --> 00:10:12,089
is<font color="#E5E5E5"> that it's</font><font color="#CCCCCC"> dot</font><font color="#E5E5E5"> our system takes this</font>

230
00:10:08,880 --> 00:10:13,829
<font color="#CCCCCC">as an input</font><font color="#E5E5E5"> and our system is mainly</font>

231
00:10:12,089 --> 00:10:16,200
<font color="#E5E5E5">composed by two different parts</font><font color="#CCCCCC"> the</font>

232
00:10:13,829 --> 00:10:19,138
first part relies on the tool either

233
00:10:16,200 --> 00:10:21,389
problem and its purpose<font color="#CCCCCC"> is to</font>

234
00:10:19,139 --> 00:10:23,279
take the binary<font color="#E5E5E5"> blob and found find two</font>

235
00:10:21,389 --> 00:10:25,949
different formation the seed<font color="#CCCCCC"> of thing</font>

236
00:10:23,279 --> 00:10:27,720
and I<font color="#E5E5E5"> think</font><font color="#CCCCCC"> obtained</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> deformation at</font>

237
00:10:25,949 --> 00:10:29,399
that<font color="#CCCCCC"> past</font><font color="#E5E5E5"> on the second part of our tool</font>

238
00:10:27,720 --> 00:10:31,769
which is completely<font color="#E5E5E5"> based on anger and</font>

239
00:10:29,399 --> 00:10:38,489
<font color="#CCCCCC">used this information order to analyze</font>

240
00:10:31,769 --> 00:10:40,379
them<font color="#E5E5E5"> and produce alerts okay I said as I</font>

241
00:10:38,489 --> 00:10:42,089
said that<font color="#CCCCCC"> boot stomp is a multi talk the</font>

242
00:10:40,379 --> 00:10:45,119
analysis engine is based on a mood to

243
00:10:42,089 --> 00:10:48,239
talk<font color="#CCCCCC"> bit analysis engine for quantities</font>

244
00:10:45,119 --> 00:10:50,699
have<font color="#E5E5E5"> to be defined what are the seeds</font>

245
00:10:48,239 --> 00:10:53,009
obtained<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ten propagation removal</font>

246
00:10:50,699 --> 00:10:57,959
policies what are<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sings of pains and</font>

247
00:10:53,009 --> 00:11:00,480
detain<font color="#CCCCCC"> tracking let's start with its</font>

248
00:10:57,959 --> 00:11:02,248
<font color="#E5E5E5">obtained we consider acids obtained each</font>

249
00:11:00,480 --> 00:11:04,679
data which is<font color="#E5E5E5"> read from persistent</font>

250
00:11:02,249 --> 00:11:08,369
storage and the data which<font color="#CCCCCC"> is used by</font>

251
00:11:04,679 --> 00:11:11,429
<font color="#CCCCCC">the</font><font color="#E5E5E5"> owacan procedures boots don't must</font>

252
00:11:08,369 --> 00:11:15,089
find these functions automatically let's

253
00:11:11,429 --> 00:11:18,899
see how so in order to<font color="#E5E5E5"> do this boots</font>

254
00:11:15,089 --> 00:11:20,609
stomp relies on<font color="#E5E5E5"> log messages we actually</font>

255
00:11:18,899 --> 00:11:23,879
found a<font color="#CCCCCC"> lot messages are quite common</font>

256
00:11:20,609 --> 00:11:25,709
and what<font color="#E5E5E5"> boostin does is that it looks</font>

257
00:11:23,879 --> 00:11:30,059
<font color="#CCCCCC">for specific keywords</font><font color="#E5E5E5"> like for example</font>

258
00:11:25,709 --> 00:11:32,518
<font color="#CCCCCC">emmc or pc storage or kernel assume</font><font color="#E5E5E5"> that</font>

259
00:11:30,059 --> 00:11:35,309
<font color="#E5E5E5">he finds a</font><font color="#CCCCCC"> new keyword</font><font color="#E5E5E5"> like in this case</font>

260
00:11:32,519 --> 00:11:37,499
is<font color="#CCCCCC"> m MC</font><font color="#E5E5E5"> it tries to understand which</font>

261
00:11:35,309 --> 00:11:40,259
function is responsible<font color="#CCCCCC"> for this log</font>

262
00:11:37,499 --> 00:11:42,540
<font color="#E5E5E5">string in this case you would understand</font>

263
00:11:40,259 --> 00:11:45,209
the variable<font color="#E5E5E5"> v 23 is responsible for</font><font color="#CCCCCC"> the</font>

264
00:11:42,540 --> 00:11:47,129
string<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be printed and you would</font>

265
00:11:45,209 --> 00:11:50,069
understand that<font color="#CCCCCC"> v 23 is actually an</font>

266
00:11:47,129 --> 00:11:53,910
alias for<font color="#CCCCCC"> v 16</font><font color="#E5E5E5"> which in turn is returned</font>

267
00:11:50,069 --> 00:11:55,679
by function<font color="#CCCCCC"> call sub 700 2000 boots</font>

268
00:11:53,910 --> 00:11:57,899
stomp<font color="#CCCCCC"> we'll consider this function as</font>

269
00:11:55,679 --> 00:12:00,899
the function<font color="#E5E5E5"> introducing the taint</font>

270
00:11:57,899 --> 00:12:03,329
once these functions are identified

271
00:12:00,899 --> 00:12:04,980
boots<font color="#E5E5E5"> stomp should understand which one</font>

272
00:12:03,329 --> 00:12:07,649
<font color="#CCCCCC">of this argument is the bad fair which</font>

273
00:12:04,980 --> 00:12:10,470
will contain the data read from the

274
00:12:07,649 --> 00:12:13,529
secondary<font color="#E5E5E5"> storage in order to do this we</font>

275
00:12:10,470 --> 00:12:15,480
<font color="#CCCCCC">should understand which which one of</font>

276
00:12:13,529 --> 00:12:17,459
<font color="#E5E5E5">this argument is an address right so in</font>

277
00:12:15,480 --> 00:12:19,169
order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> filter as many as false</font>

278
00:12:17,459 --> 00:12:20,518
positive as as possible boots stomp

279
00:12:19,169 --> 00:12:22,649
<font color="#CCCCCC">tries</font><font color="#E5E5E5"> to understand if any of this</font>

280
00:12:20,519 --> 00:12:25,139
argument is either<font color="#E5E5E5"> a string or the value</font>

281
00:12:22,649 --> 00:12:27,619
<font color="#E5E5E5">0 as we assume</font><font color="#CCCCCC"> that a valid pointer</font>

282
00:12:25,139 --> 00:12:27,619
should<font color="#E5E5E5"> be used</font>

283
00:12:27,959 --> 00:12:32,099
for all the<font color="#CCCCCC"> arguments that we are</font><font color="#E5E5E5"> not</font>

284
00:12:29,550 --> 00:12:37,560
<font color="#E5E5E5">sure that boots</font><font color="#CCCCCC"> Tom can understand the</font>

285
00:12:32,100 --> 00:12:39,329
<font color="#CCCCCC">identity it taints</font><font color="#E5E5E5"> each one of them</font><font color="#CCCCCC"> okay</font>

286
00:12:37,560 --> 00:12:40,859
the output produced<font color="#CCCCCC"> by this</font><font color="#E5E5E5"> vid this</font>

287
00:12:39,329 --> 00:12:44,099
very<font color="#E5E5E5"> first step of our tool is</font>

288
00:12:40,860 --> 00:12:46,500
<font color="#CCCCCC">presenting</font><font color="#E5E5E5"> this picture first of all we</font>

289
00:12:44,100 --> 00:12:48,750
get<font color="#E5E5E5"> the matter</font><font color="#CCCCCC"> named if</font><font color="#E5E5E5"> it's present</font>

290
00:12:46,500 --> 00:12:51,329
<font color="#E5E5E5">which is the name of</font><font color="#CCCCCC"> the function</font>

291
00:12:48,750 --> 00:12:54,120
<font color="#CCCCCC">introducing the taint</font><font color="#E5E5E5"> the address of</font>

292
00:12:51,329 --> 00:12:56,279
this very function the column name which

293
00:12:54,120 --> 00:12:59,910
is the name if present<font color="#E5E5E5"> of the function</font>

294
00:12:56,279 --> 00:13:02,790
calling<font color="#E5E5E5"> the seed function the address of</font>

295
00:12:59,910 --> 00:13:05,339
this dysfunction<font color="#CCCCCC"> the taint address which</font>

296
00:13:02,790 --> 00:13:06,959
is the address of destruction having the

297
00:13:05,339 --> 00:13:09,420
call to the<font color="#E5E5E5"> seed the</font><font color="#CCCCCC"> farm to</font><font color="#E5E5E5"> the seed of</font>

298
00:13:06,959 --> 00:13:12,899
taint<font color="#E5E5E5"> the address of the basic block</font>

299
00:13:09,420 --> 00:13:15,750
containing the<font color="#CCCCCC"> hold function the</font><font color="#E5E5E5"> number</font>

300
00:13:12,899 --> 00:13:17,939
of argument<font color="#CCCCCC"> consumed by this function</font>

301
00:13:15,750 --> 00:13:21,600
and the list of argument which can

302
00:13:17,939 --> 00:13:25,889
possibly<font color="#CCCCCC"> be the</font><font color="#E5E5E5"> the buffer receiving the</font>

303
00:13:21,600 --> 00:13:27,689
entered data<font color="#E5E5E5"> and eventually to</font>

304
00:13:25,889 --> 00:13:29,399
information related to the log string

305
00:13:27,689 --> 00:13:31,889
that<font color="#E5E5E5"> boots don't use in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> infer</font>

306
00:13:29,399 --> 00:13:36,480
that<font color="#E5E5E5"> some financial</font><font color="#CCCCCC"> wars is it a seed</font>

307
00:13:31,889 --> 00:13:38,220
function optionally an analyst can

308
00:13:36,480 --> 00:13:40,379
provide more seeds obtained manually

309
00:13:38,220 --> 00:13:43,379
this is done<font color="#E5E5E5"> because we</font><font color="#CCCCCC"> actually found</font>

310
00:13:40,379 --> 00:13:47,720
<font color="#E5E5E5">that bootloader locking functions</font>

311
00:13:43,379 --> 00:13:47,720
usually<font color="#E5E5E5"> don't don't have large strings</font>

312
00:13:47,899 --> 00:13:53,610
<font color="#CCCCCC">okay let's talk</font><font color="#E5E5E5"> about the</font><font color="#CCCCCC"> interpolation</font>

313
00:13:50,579 --> 00:13:55,319
removal<font color="#E5E5E5"> pains in our work</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> symbolic</font>

314
00:13:53,610 --> 00:13:57,600
expressions<font color="#CCCCCC"> encoding how the value is</font>

315
00:13:55,319 --> 00:13:59,459
computed<font color="#E5E5E5"> propagation our removal is</font>

316
00:13:57,600 --> 00:14:03,540
implicitly done during<font color="#E5E5E5"> the</font><font color="#CCCCCC"> dynamic</font>

317
00:13:59,459 --> 00:14:05,399
symbolic execution<font color="#CCCCCC"> let's see how so</font>

318
00:14:03,540 --> 00:14:09,000
let's assume that<font color="#CCCCCC"> we have some code</font><font color="#E5E5E5"> and</font>

319
00:14:05,399 --> 00:14:12,509
<font color="#CCCCCC">in this case we have the AC function</font><font color="#E5E5E5"> is</font>

320
00:14:09,000 --> 00:14:14,879
called<font color="#E5E5E5"> and it's and its value is</font>

321
00:14:12,509 --> 00:14:18,050
assigned<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> variable called Y in a</font>

322
00:14:14,879 --> 00:14:21,180
symbolic<font color="#E5E5E5"> word we create a new dynamic</font>

323
00:14:18,050 --> 00:14:24,660
variable call in this case<font color="#E5E5E5"> temte why we</font>

324
00:14:21,180 --> 00:14:28,138
<font color="#CCCCCC">use size</font><font color="#E5E5E5"> we said to be equal to one page</font>

325
00:14:24,660 --> 00:14:31,050
so<font color="#E5E5E5"> for</font><font color="#CCCCCC"> K</font><font color="#E5E5E5"> bytes this new variable is a</font>

326
00:14:28,139 --> 00:14:34,110
central variable called Y let's assume

327
00:14:31,050 --> 00:14:37,139
the later in the code<font color="#E5E5E5"> T y plus</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> gets</font>

328
00:14:34,110 --> 00:14:38,910
assigned<font color="#CCCCCC"> to a new variable</font><font color="#E5E5E5"> X in this</font>

329
00:14:37,139 --> 00:14:39,880
case<font color="#E5E5E5"> in a symbolic world which means</font>

330
00:14:38,910 --> 00:14:43,360
will mean the

331
00:14:39,880 --> 00:14:45,610
<font color="#E5E5E5">a new variable</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> X get the</font><font color="#CCCCCC"> value 10</font>

332
00:14:43,360 --> 00:14:49,420
<font color="#CCCCCC">- y plus</font><font color="#E5E5E5"> 5</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is an example of how</font>

333
00:14:45,610 --> 00:14:50,880
they think<font color="#CCCCCC"> is propagated fine let's</font>

334
00:14:49,420 --> 00:14:54,760
assume that<font color="#E5E5E5"> somewhere in the code</font>

335
00:14:50,880 --> 00:14:57,640
dividable<font color="#CCCCCC"> X get some constant value</font><font color="#E5E5E5"> 0 X</font>

336
00:14:54,760 --> 00:15:00,520
that beef in this case again in a

337
00:14:57,640 --> 00:15:03,040
symbolic<font color="#CCCCCC"> word means that they a symbolic</font>

338
00:15:00,520 --> 00:15:06,550
variable<font color="#E5E5E5"> X will get the value the</font>

339
00:15:03,040 --> 00:15:12,550
<font color="#E5E5E5">constant value 0 0 X that</font><font color="#CCCCCC"> bit and</font><font color="#E5E5E5"> it is</font>

340
00:15:06,550 --> 00:15:14,650
<font color="#E5E5E5">how the taint is removed</font><font color="#CCCCCC"> ok let's talk</font>

341
00:15:12,550 --> 00:15:16,500
<font color="#CCCCCC">about the things of pain boots stomp</font>

342
00:15:14,650 --> 00:15:19,480
<font color="#CCCCCC">Ames retract for different bugs</font>

343
00:15:16,500 --> 00:15:22,540
<font color="#E5E5E5">arbitrary memory</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> arbitrary memory</font>

344
00:15:19,480 --> 00:15:24,670
<font color="#E5E5E5">reads loops</font><font color="#CCCCCC"> whose the user can control</font>

345
00:15:22,540 --> 00:15:26,920
<font color="#E5E5E5">the</font><font color="#CCCCCC"> number of iterations</font><font color="#E5E5E5"> possibly</font>

346
00:15:24,670 --> 00:15:29,349
<font color="#CCCCCC">producing some</font><font color="#E5E5E5"> denial of service and</font>

347
00:15:26,920 --> 00:15:31,000
finally bypass a locking mechanism which

348
00:15:29,350 --> 00:15:33,850
means that we look<font color="#CCCCCC"> for functions</font>

349
00:15:31,000 --> 00:15:38,410
<font color="#E5E5E5">overriding the device security state on</font>

350
00:15:33,850 --> 00:15:40,720
<font color="#E5E5E5">persistent storage in order to do this</font>

351
00:15:38,410 --> 00:15:43,240
we defined for<font color="#CCCCCC"> different things obtained</font>

352
00:15:40,720 --> 00:15:45,580
<font color="#E5E5E5">we defined a sink of thing mem copy like</font>

353
00:15:43,240 --> 00:15:47,380
functions as I said before<font color="#E5E5E5"> we can't</font>

354
00:15:45,580 --> 00:15:49,540
really<font color="#E5E5E5"> rely on function names because</font>

355
00:15:47,380 --> 00:15:51,370
there are no really libraries so boots

356
00:15:49,540 --> 00:15:53,949
stomp<font color="#E5E5E5"> has to understand whether a</font>

357
00:15:51,370 --> 00:15:56,710
function is a memo collect function to

358
00:15:53,950 --> 00:15:59,890
<font color="#E5E5E5">these we use heuristics first we look</font>

359
00:15:56,710 --> 00:16:02,170
for functions who which have a loop<font color="#E5E5E5"> were</font>

360
00:15:59,890 --> 00:16:05,530
some data is copied from some source

361
00:16:02,170 --> 00:16:07,209
buffer to some destination buffer and<font color="#CCCCCC"> MN</font>

362
00:16:05,530 --> 00:16:10,839
copy like function has to have many

363
00:16:07,210 --> 00:16:12,340
<font color="#CCCCCC">callers</font><font color="#E5E5E5"> we use the threshold for this we</font>

364
00:16:10,840 --> 00:16:14,260
<font color="#CCCCCC">consider a sink of</font><font color="#E5E5E5"> taint</font>

365
00:16:12,340 --> 00:16:16,960
<font color="#CCCCCC">they're friends of</font><font color="#E5E5E5"> a tinted variable for</font>

366
00:16:14,260 --> 00:16:21,370
example<font color="#E5E5E5"> let's</font><font color="#CCCCCC"> assume that</font><font color="#E5E5E5"> we have some</font>

367
00:16:16,960 --> 00:16:23,050
tinted<font color="#E5E5E5"> value and the first the second</font>

368
00:16:21,370 --> 00:16:25,660
field of this tinted value is assigned

369
00:16:23,050 --> 00:16:28,329
<font color="#CCCCCC">to some variable B and this variable B</font>

370
00:16:25,660 --> 00:16:30,339
is variable<font color="#E5E5E5"> V someone in the code gets</font>

371
00:16:28,330 --> 00:16:33,130
the reference and used as function

372
00:16:30,340 --> 00:16:37,120
pointer we considered this as a<font color="#E5E5E5"> sink of</font>

373
00:16:33,130 --> 00:16:39,280
paint we also<font color="#CCCCCC"> considered a sink</font><font color="#E5E5E5"> of paint</font>

374
00:16:37,120 --> 00:16:41,650
<font color="#E5E5E5">painter variables which are used in</font>

375
00:16:39,280 --> 00:16:43,449
loops conditions for example<font color="#E5E5E5"> let's</font>

376
00:16:41,650 --> 00:16:45,670
<font color="#CCCCCC">assume that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have this</font><font color="#E5E5E5"> scenario where</font>

377
00:16:43,450 --> 00:16:47,290
<font color="#CCCCCC">two tainted variables are used in the</font>

378
00:16:45,670 --> 00:16:51,219
<font color="#E5E5E5">guard of a loop in this case the user</font>

379
00:16:47,290 --> 00:16:53,660
could could use them to<font color="#CCCCCC"> run the loop as</font>

380
00:16:51,220 --> 00:16:56,640
many times as you want

381
00:16:53,660 --> 00:16:58,680
and finally we<font color="#CCCCCC"> consider</font><font color="#E5E5E5"> I think of</font><font color="#CCCCCC"> teint</font>

382
00:16:56,640 --> 00:17:02,449
<font color="#CCCCCC">II tried to</font><font color="#E5E5E5"> purchase</font><font color="#CCCCCC"> a storage or what</font>

383
00:16:58,680 --> 00:17:02,449
<font color="#E5E5E5">entered variable like in this example</font>

384
00:17:04,310 --> 00:17:08,520
<font color="#E5E5E5">similarly to</font><font color="#CCCCCC"> reseed</font><font color="#E5E5E5"> obtain the</font>

385
00:17:06,540 --> 00:17:10,170
information<font color="#CCCCCC"> put used by this</font><font color="#E5E5E5"> step of</font>

386
00:17:08,520 --> 00:17:14,099
boots stomp<font color="#CCCCCC"> are in this picture and they</font>

387
00:17:10,170 --> 00:17:18,000
are the method name which is the the

388
00:17:14,099 --> 00:17:22,319
name of the<font color="#E5E5E5"> sync obtained the address of</font>

389
00:17:18,000 --> 00:17:25,910
the sync of the sync of paint the number

390
00:17:22,319 --> 00:17:28,860
of<font color="#E5E5E5"> arguments</font><font color="#CCCCCC"> the dysfunction takes and</font>

391
00:17:25,910 --> 00:17:34,590
the possible arguments that the sync

392
00:17:28,860 --> 00:17:36,689
<font color="#E5E5E5">obtained can be present every time some</font>

393
00:17:34,590 --> 00:17:40,050
tinted<font color="#E5E5E5"> data</font><font color="#CCCCCC"> reached something an alert</font>

394
00:17:36,690 --> 00:17:41,910
is raised<font color="#E5E5E5"> and along with it</font><font color="#CCCCCC"> a traceable</font>

395
00:17:40,050 --> 00:17:44,639
<font color="#E5E5E5">output as I mention before is produced</font>

396
00:17:41,910 --> 00:17:46,890
<font color="#E5E5E5">which means that as</font><font color="#CCCCCC"> we will see at the</font>

397
00:17:44,640 --> 00:17:49,410
<font color="#CCCCCC">end of this presentation boost on</font>

398
00:17:46,890 --> 00:17:51,450
Purdue's each others for each basic

399
00:17:49,410 --> 00:17:53,580
block<font color="#CCCCCC"> traverses from this from the</font>

400
00:17:51,450 --> 00:18:00,840
<font color="#CCCCCC">beginning of the function to the</font><font color="#E5E5E5"> think</font>

401
00:17:53,580 --> 00:18:02,610
of<font color="#E5E5E5"> paint let's see the evaluation boots</font>

402
00:18:00,840 --> 00:18:05,970
tom has<font color="#CCCCCC"> been evaluated against four</font>

403
00:18:02,610 --> 00:18:08,399
different boot loaders we use a Qualcomm

404
00:18:05,970 --> 00:18:10,380
LK<font color="#E5E5E5"> we use actually two different version</font>

405
00:18:08,400 --> 00:18:13,080
the<font color="#CCCCCC"> latest version that</font><font color="#E5E5E5"> we found during</font>

406
00:18:10,380 --> 00:18:16,230
this work and in old one which was known

407
00:18:13,080 --> 00:18:19,500
<font color="#CCCCCC">to contain a bag a bag the</font><font color="#E5E5E5"> nvidia</font>

408
00:18:16,230 --> 00:18:21,510
<font color="#E5E5E5">bootloader the</font><font color="#CCCCCC"> huawei boot loader and a</font>

409
00:18:19,500 --> 00:18:23,550
melee attack bootloader<font color="#E5E5E5"> we have some</font>

410
00:18:21,510 --> 00:18:25,290
problems in this stage<font color="#E5E5E5"> analyzing media</font>

411
00:18:23,550 --> 00:18:29,129
<font color="#E5E5E5">Tex bootloader because basically anger</font>

412
00:18:25,290 --> 00:18:32,639
was giving us problems<font color="#CCCCCC"> over all boots</font>

413
00:18:29,130 --> 00:18:35,400
<font color="#CCCCCC">Tom</font><font color="#E5E5E5"> praised 36 alerts which</font><font color="#CCCCCC"> 7 of them</font>

414
00:18:32,640 --> 00:18:40,110
were found to<font color="#E5E5E5"> be true</font><font color="#CCCCCC"> positives and 6 of</font>

415
00:18:35,400 --> 00:18:41,280
<font color="#CCCCCC">them were found</font><font color="#E5E5E5"> to be 0 days so</font><font color="#CCCCCC"> ok I</font>

416
00:18:40,110 --> 00:18:43,679
<font color="#CCCCCC">won't question that one may ask</font><font color="#E5E5E5"> is that</font>

417
00:18:41,280 --> 00:18:45,330
<font color="#E5E5E5">ok you</font><font color="#CCCCCC"> found bugs but how what</font><font color="#E5E5E5"> can you</font>

418
00:18:43,680 --> 00:18:47,040
do with<font color="#E5E5E5"> them</font><font color="#CCCCCC"> right well as I</font><font color="#E5E5E5"> mentioned</font>

419
00:18:45,330 --> 00:18:49,350
<font color="#CCCCCC">before you can</font><font color="#E5E5E5"> do a lot</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> some</font>

420
00:18:47,040 --> 00:18:51,210
boot loaders as in the case of<font color="#E5E5E5"> a way the</font>

421
00:18:49,350 --> 00:18:53,189
working l3 so if we can exploit this bug

422
00:18:51,210 --> 00:18:57,120
<font color="#CCCCCC">this box you</font><font color="#E5E5E5"> can actually take control</font>

423
00:18:53,190 --> 00:19:00,210
<font color="#CCCCCC">of the device</font><font color="#E5E5E5"> we also ran an evaluation</font>

424
00:18:57,120 --> 00:19:03,389
to find a locking bypass<font color="#E5E5E5"> and we found to</font>

425
00:19:00,210 --> 00:19:05,910
boot loaders both<font color="#CCCCCC"> the newest</font><font color="#E5E5E5"> LK and in</font>

426
00:19:03,390 --> 00:19:07,350
<font color="#E5E5E5">all version with K and the huawei</font>

427
00:19:05,910 --> 00:19:09,870
bootloader actually<font color="#E5E5E5"> right</font>

428
00:19:07,350 --> 00:19:12,449
<font color="#E5E5E5">this the device states the device</font>

429
00:19:09,870 --> 00:19:14,100
security state<font color="#CCCCCC"> on pretty storage</font><font color="#E5E5E5"> this</font>

430
00:19:12,450 --> 00:19:16,230
doesn't mean<font color="#E5E5E5"> that these boot loaders are</font>

431
00:19:14,100 --> 00:19:19,080
vulnerable<font color="#E5E5E5"> it just means that the device</font>

432
00:19:16,230 --> 00:19:21,059
security state<font color="#E5E5E5"> is written on storage on</font>

433
00:19:19,080 --> 00:19:23,879
<font color="#E5E5E5">purchases storage we actually checked</font>

434
00:19:21,059 --> 00:19:27,059
and we found that<font color="#E5E5E5"> Qualcomm LK not to be</font>

435
00:19:23,880 --> 00:19:29,309
vulnerable<font color="#CCCCCC"> but what way boot loaders to</font>

436
00:19:27,059 --> 00:19:35,250
be with you later

437
00:19:29,309 --> 00:19:37,139
like the case<font color="#CCCCCC"> okay I'm gonna show you</font>

438
00:19:35,250 --> 00:19:39,450
now<font color="#CCCCCC"> a very interesting</font><font color="#E5E5E5"> vulnerability</font>

439
00:19:37,140 --> 00:19:41,400
that we<font color="#E5E5E5"> found out about of one of our</font>

440
00:19:39,450 --> 00:19:43,679
bootloader<font color="#E5E5E5"> the bootloader</font>

441
00:19:41,400 --> 00:19:46,530
in question is the<font color="#CCCCCC"> reboot slaughter and</font>

442
00:19:43,679 --> 00:19:48,150
<font color="#CCCCCC">the wearability was due to how</font><font color="#E5E5E5"> they um</font>

443
00:19:46,530 --> 00:19:53,280
information<font color="#E5E5E5"> retrieval procedures</font>

444
00:19:48,150 --> 00:19:55,760
procedure was implemented so in a way<font color="#E5E5E5"> I</font>

445
00:19:53,280 --> 00:19:58,408
<font color="#E5E5E5">am info is represented by records</font>

446
00:19:55,760 --> 00:20:00,919
records are stored on purchases storage

447
00:19:58,409 --> 00:20:04,830
<font color="#CCCCCC">and each record as one or</font><font color="#E5E5E5"> more blocks</font>

448
00:20:00,919 --> 00:20:07,140
each blocks contain<font color="#E5E5E5"> information like the</font>

449
00:20:04,830 --> 00:20:09,870
<font color="#E5E5E5">information ID the number of blocks</font>

450
00:20:07,140 --> 00:20:14,600
<font color="#E5E5E5">composing the record the current</font><font color="#CCCCCC"> block</font>

451
00:20:09,870 --> 00:20:18,239
number<font color="#E5E5E5"> data and the length of the data</font>

452
00:20:14,600 --> 00:20:21,600
<font color="#E5E5E5">each block is</font><font color="#CCCCCC"> 4 K bytes long and the</font>

453
00:20:18,240 --> 00:20:26,669
data is and the data field is 512<font color="#E5E5E5"> bytes</font>

454
00:20:21,600 --> 00:20:30,840
long<font color="#E5E5E5"> okay let's see now they I am in for</font>

455
00:20:26,669 --> 00:20:33,240
retrieval procedure from a high point<font color="#E5E5E5"> of</font>

456
00:20:30,840 --> 00:20:36,870
view this function<font color="#E5E5E5"> takes three arguments</font>

457
00:20:33,240 --> 00:20:39,330
<font color="#E5E5E5">the info ID to look for some buffer and</font>

458
00:20:36,870 --> 00:20:41,549
the size of this buffer what this

459
00:20:39,330 --> 00:20:43,699
function does is that he retrieves the

460
00:20:41,549 --> 00:20:46,139
very first block from the record file

461
00:20:43,700 --> 00:20:48,030
yet rates through each one<font color="#E5E5E5"> of these</font>

462
00:20:46,140 --> 00:20:50,250
blocks<font color="#E5E5E5"> until it finds</font><font color="#CCCCCC"> the block</font>

463
00:20:48,030 --> 00:20:53,908
containing containing they wanted<font color="#E5E5E5"> info</font><font color="#CCCCCC"> D</font>

464
00:20:50,250 --> 00:20:56,610
and then it just copies the<font color="#E5E5E5"> data from</font>

465
00:20:53,909 --> 00:21:01,620
these these blocks to the provided

466
00:20:56,610 --> 00:21:04,979
buffer and<font color="#E5E5E5"> eventually it returns just</font><font color="#CCCCCC"> a</font>

467
00:21:01,620 --> 00:21:07,039
flag<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> examples</font>

468
00:21:04,980 --> 00:21:09,510
to understand how this function works

469
00:21:07,039 --> 00:21:11,419
<font color="#E5E5E5">let's assume</font><font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> one record</font>

470
00:21:09,510 --> 00:21:14,990
<font color="#E5E5E5">which is composed by only one block</font>

471
00:21:11,419 --> 00:21:17,220
let's assume that the info<font color="#E5E5E5"> D is set to</font><font color="#CCCCCC"> 2</font>

472
00:21:14,990 --> 00:21:19,230
<font color="#E5E5E5">then not the number of blocks in</font><font color="#CCCCCC"> the</font>

473
00:21:17,220 --> 00:21:20,880
<font color="#CCCCCC">only</font><font color="#E5E5E5"> block composing the record is 1 and</font>

474
00:21:19,230 --> 00:21:23,130
the current<font color="#E5E5E5"> block number is 1</font>

475
00:21:20,880 --> 00:21:25,279
<font color="#E5E5E5">let's us assumed that the meaningful</font>

476
00:21:23,130 --> 00:21:29,490
data in the data field is composed by

477
00:21:25,279 --> 00:21:32,279
128 bytes<font color="#E5E5E5"> and also let's assume the</font>

478
00:21:29,490 --> 00:21:36,509
above pointed by some variable<font color="#CCCCCC"> bass it's</font>

479
00:21:32,279 --> 00:21:39,029
as<font color="#E5E5E5"> big as 200 bytes what will</font><font color="#CCCCCC"> happen is</font>

480
00:21:36,509 --> 00:21:40,940
that again<font color="#CCCCCC"> the function will start from</font>

481
00:21:39,029 --> 00:21:43,799
the<font color="#CCCCCC"> very first block on the record file</font>

482
00:21:40,940 --> 00:21:45,570
<font color="#CCCCCC">we latter eight</font><font color="#E5E5E5"> through in each block</font>

483
00:21:43,799 --> 00:21:48,269
containing the file<font color="#E5E5E5"> until it finds the</font>

484
00:21:45,570 --> 00:21:53,330
block containing the info<font color="#E5E5E5"> D equal to</font><font color="#CCCCCC"> two</font>

485
00:21:48,269 --> 00:21:55,529
and then<font color="#CCCCCC"> he will check</font><font color="#E5E5E5"> whether the the</font>

486
00:21:53,330 --> 00:21:58,259
the size of the data<font color="#CCCCCC"> contained</font><font color="#E5E5E5"> in the</font>

487
00:21:55,529 --> 00:22:00,120
block is greater than the sides of the

488
00:21:58,259 --> 00:22:03,059
provided buffer<font color="#E5E5E5"> if it is the algorithm</font>

489
00:22:00,120 --> 00:22:05,129
<font color="#CCCCCC">will stop otherwise it will check if the</font>

490
00:22:03,059 --> 00:22:07,590
current<font color="#E5E5E5"> block number is less</font><font color="#CCCCCC"> than the</font>

491
00:22:05,129 --> 00:22:09,870
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> blocks composing the record in</font>

492
00:22:07,590 --> 00:22:12,178
this<font color="#CCCCCC"> case it is</font><font color="#E5E5E5"> not therefore the else</font>

493
00:22:09,870 --> 00:22:15,600
branch<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to be hit and in this</font>

494
00:22:12,179 --> 00:22:18,419
case the<font color="#CCCCCC"> function this this procedure</font>

495
00:22:15,600 --> 00:22:20,039
will read<font color="#CCCCCC"> land bytes from</font><font color="#E5E5E5"> the block and</font>

496
00:22:18,419 --> 00:22:25,200
<font color="#CCCCCC">he</font><font color="#E5E5E5"> will store them in the provided</font>

497
00:22:20,039 --> 00:22:27,960
buffer let's assume now<font color="#CCCCCC"> that we have a</font>

498
00:22:25,200 --> 00:22:29,700
record<font color="#E5E5E5"> composed by two blocks so again</font>

499
00:22:27,960 --> 00:22:31,620
we'll<font color="#CCCCCC"> assume let's assume</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> Benford</font>

500
00:22:29,700 --> 00:22:33,629
is equal to<font color="#CCCCCC"> two but</font><font color="#E5E5E5"> in this case the</font>

501
00:22:31,620 --> 00:22:36,149
first block will<font color="#CCCCCC"> contain as number</font><font color="#E5E5E5"> of</font>

502
00:22:33,629 --> 00:22:38,639
blocks the number<font color="#E5E5E5"> two as current block</font>

503
00:22:36,149 --> 00:22:41,100
number<font color="#CCCCCC"> one and five onion and 12 bytes</font>

504
00:22:38,639 --> 00:22:42,809
<font color="#E5E5E5">of meaningful data the second block</font>

505
00:22:41,100 --> 00:22:45,658
similarly will contain the infra equal

506
00:22:42,809 --> 00:22:48,000
to two the number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> blocks</font><font color="#CCCCCC"> equal to two</font>

507
00:22:45,659 --> 00:22:50,820
but as current block the<font color="#CCCCCC"> number two and</font>

508
00:22:48,000 --> 00:22:53,580
<font color="#CCCCCC">it will contain only 128 bytes of</font>

509
00:22:50,820 --> 00:22:56,820
meaningful data let's see what happens

510
00:22:53,580 --> 00:22:58,350
oh and let's assume also that they

511
00:22:56,820 --> 00:23:00,149
provided buffer to<font color="#E5E5E5"> the function is as</font>

512
00:22:58,350 --> 00:23:01,918
big as<font color="#CCCCCC"> seven hundred and twelve bytes</font>

513
00:23:00,149 --> 00:23:05,789
<font color="#E5E5E5">which is enough to contain</font><font color="#CCCCCC"> the whole</font>

514
00:23:01,919 --> 00:23:07,769
data again<font color="#E5E5E5"> the function</font><font color="#CCCCCC"> will retrieve</font>

515
00:23:05,789 --> 00:23:13,049
the<font color="#CCCCCC"> very first block containing the</font>

516
00:23:07,769 --> 00:23:14,340
record file<font color="#CCCCCC"> it will scan each and every</font>

517
00:23:13,049 --> 00:23:18,899
block until<font color="#E5E5E5"> he finds the block</font>

518
00:23:14,340 --> 00:23:20,459
containing<font color="#E5E5E5"> the they wanted if ready</font><font color="#CCCCCC"> it</font>

519
00:23:18,899 --> 00:23:22,860
will<font color="#E5E5E5"> check whether the</font><font color="#CCCCCC"> Byfuglien</font>

520
00:23:20,460 --> 00:23:25,350
is the buffer is big enough<font color="#E5E5E5"> to contain</font>

521
00:23:22,860 --> 00:23:26,969
the<font color="#CCCCCC"> data and as in this case it is will</font>

522
00:23:25,350 --> 00:23:28,799
check whether<font color="#E5E5E5"> the current block number</font>

523
00:23:26,970 --> 00:23:33,480
is less than<font color="#CCCCCC"> the number</font><font color="#E5E5E5"> of blocks</font><font color="#CCCCCC"> in</font>

524
00:23:28,799 --> 00:23:34,710
this case these as it is the<font color="#CCCCCC"> if branch</font>

525
00:23:33,480 --> 00:23:38,190
<font color="#E5E5E5">is</font><font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> hit</font>

526
00:23:34,710 --> 00:23:39,900
<font color="#CCCCCC">any function we read 512 bytes</font><font color="#E5E5E5"> from the</font>

527
00:23:38,190 --> 00:23:43,140
<font color="#CCCCCC">block and stored them in</font><font color="#E5E5E5"> the provided</font>

528
00:23:39,900 --> 00:23:46,200
buffer after<font color="#CCCCCC"> this</font><font color="#E5E5E5"> the next block will be</font>

529
00:23:43,140 --> 00:23:48,540
<font color="#CCCCCC">retrieved the while</font><font color="#E5E5E5"> will proceed with</font>

530
00:23:46,200 --> 00:23:50,220
the<font color="#CCCCCC"> FIR</font><font color="#E5E5E5"> with another iteration</font><font color="#CCCCCC"> but this</font>

531
00:23:48,540 --> 00:23:52,350
time<font color="#E5E5E5"> the else branch is</font><font color="#CCCCCC"> going to be hit</font>

532
00:23:50,220 --> 00:23:54,900
as this time the<font color="#E5E5E5"> current block is true</font>

533
00:23:52,350 --> 00:23:56,820
and the<font color="#E5E5E5"> number of block is true so in</font>

534
00:23:54,900 --> 00:23:58,320
this case one<font color="#E5E5E5"> hundred and twenty bytes</font>

535
00:23:56,820 --> 00:24:00,179
are going to be read<font color="#E5E5E5"> from the second</font>

536
00:23:58,320 --> 00:24:03,330
block<font color="#CCCCCC"> I stored them</font><font color="#E5E5E5"> in the in the</font>

537
00:24:00,180 --> 00:24:06,420
provided buffer so<font color="#CCCCCC"> everything works</font><font color="#E5E5E5"> fine</font>

538
00:24:03,330 --> 00:24:08,250
and seems to<font color="#CCCCCC"> be good let's consider</font>

539
00:24:06,420 --> 00:24:10,230
again though the very first<font color="#CCCCCC"> example</font>

540
00:24:08,250 --> 00:24:12,330
where a<font color="#CCCCCC"> record is composed by only</font><font color="#E5E5E5"> one</font>

541
00:24:10,230 --> 00:24:14,100
block<font color="#E5E5E5"> and let's</font><font color="#CCCCCC"> assume now</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> an</font>

542
00:24:12,330 --> 00:24:17,129
attacker has control over<font color="#CCCCCC"> purchasing</font>

543
00:24:14,100 --> 00:24:20,010
storage what she can do is that she can

544
00:24:17,130 --> 00:24:20,400
<font color="#E5E5E5">change each field in the blocks as you</font>

545
00:24:20,010 --> 00:24:22,230
please

546
00:24:20,400 --> 00:24:24,420
for example in<font color="#CCCCCC"> order to try</font><font color="#E5E5E5"> to trigger</font>

547
00:24:22,230 --> 00:24:27,960
<font color="#E5E5E5">the buffer</font><font color="#CCCCCC"> overflow she can</font><font color="#E5E5E5"> change it at</font>

548
00:24:24,420 --> 00:24:30,780
<font color="#CCCCCC">a limb</font><font color="#E5E5E5"> block from 128 to some value 400</font>

549
00:24:27,960 --> 00:24:32,790
right let's see what happens<font color="#E5E5E5"> well</font>

550
00:24:30,780 --> 00:24:35,520
they're<font color="#E5E5E5"> not going to be any problems</font>

551
00:24:32,790 --> 00:24:38,220
because the the condition check in the

552
00:24:35,520 --> 00:24:40,560
actual buffer lands is going to be

553
00:24:38,220 --> 00:24:42,870
satisfied<font color="#CCCCCC"> so</font><font color="#E5E5E5"> actually the</font><font color="#CCCCCC"> des function</font>

554
00:24:40,560 --> 00:24:45,149
will break and<font color="#E5E5E5"> nothing will happen</font><font color="#CCCCCC"> let's</font>

555
00:24:42,870 --> 00:24:47,189
assume now<font color="#E5E5E5"> though that the the an</font>

556
00:24:45,150 --> 00:24:49,320
attacker modifies the field number<font color="#E5E5E5"> of</font>

557
00:24:47,190 --> 00:24:52,410
blocks<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of one as it was before</font>

558
00:24:49,320 --> 00:24:53,310
<font color="#E5E5E5">now she writes to in this case again</font><font color="#CCCCCC"> the</font>

559
00:24:52,410 --> 00:24:57,090
very first block is going to<font color="#E5E5E5"> be</font>

560
00:24:53,310 --> 00:25:00,450
retrieved<font color="#E5E5E5"> the one at block is going to</font>

561
00:24:57,090 --> 00:25:04,949
<font color="#E5E5E5">be found this time the check will pass</font>

562
00:25:00,450 --> 00:25:07,140
as the the block<font color="#E5E5E5"> length is 128 in the</font>

563
00:25:04,950 --> 00:25:10,530
buff land<font color="#E5E5E5"> the provided buff plant is 200</font>

564
00:25:07,140 --> 00:25:14,010
<font color="#E5E5E5">but when the check about</font><font color="#CCCCCC"> the current</font>

565
00:25:10,530 --> 00:25:16,139
block number and the number of blocks<font color="#E5E5E5"> is</font>

566
00:25:14,010 --> 00:25:18,750
a<font color="#CCCCCC"> expert form that this time we are</font>

567
00:25:16,140 --> 00:25:20,280
<font color="#E5E5E5">going to hit this branch we're going to</font>

568
00:25:18,750 --> 00:25:23,130
this branch of what<font color="#E5E5E5"> what happens is</font><font color="#CCCCCC"> that</font>

569
00:25:20,280 --> 00:25:25,680
512 bytes are read<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the block and</font>

570
00:25:23,130 --> 00:25:28,530
they are stored in a buffer whose size

571
00:25:25,680 --> 00:25:33,480
is<font color="#E5E5E5"> 200 so in this case we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a buffer</font>

572
00:25:28,530 --> 00:25:37,580
overflow<font color="#CCCCCC"> we actually exploited this bug</font>

573
00:25:33,480 --> 00:25:43,200
<font color="#E5E5E5">we tried it and we</font><font color="#CCCCCC"> actually achieved</font>

574
00:25:37,580 --> 00:25:45,270
<font color="#E5E5E5">contraflow hijacking this exploit can be</font>

575
00:25:43,200 --> 00:25:48,090
found on our on the boots stomp

576
00:25:45,270 --> 00:25:50,389
repository and<font color="#E5E5E5"> we actually brought a CV</font>

577
00:25:48,090 --> 00:25:50,389
for it

578
00:25:51,040 --> 00:25:57,020
<font color="#E5E5E5">okay let's talk</font><font color="#CCCCCC"> about the unlocking</font>

579
00:25:53,630 --> 00:25:59,150
bypass vulnerability that we found again

580
00:25:57,020 --> 00:26:01,700
<font color="#E5E5E5">we found this bug on the web</font><font color="#CCCCCC"> bootloader</font>

581
00:25:59,150 --> 00:26:04,370
<font color="#E5E5E5">and the way that</font><font color="#CCCCCC"> what way for a seat the</font>

582
00:26:01,700 --> 00:26:06,320
<font color="#CCCCCC">Boutros</font><font color="#E5E5E5"> be unlocking is the follow we</font>

583
00:26:04,370 --> 00:26:08,030
have to go to the device website you

584
00:26:06,320 --> 00:26:11,540
have<font color="#CCCCCC"> to provide some number and you get</font>

585
00:26:08,030 --> 00:26:14,420
back<font color="#CCCCCC"> what is called the OEM key later</font>

586
00:26:11,540 --> 00:26:16,040
you can use<font color="#E5E5E5"> the this</font><font color="#CCCCCC"> om key and run some</font>

587
00:26:14,420 --> 00:26:17,510
commands using the fast boots<font color="#E5E5E5"> and</font>

588
00:26:16,040 --> 00:26:21,950
eventually the bootloader will be

589
00:26:17,510 --> 00:26:25,520
<font color="#E5E5E5">unlocked this is like the function that</font>

590
00:26:21,950 --> 00:26:28,130
<font color="#E5E5E5">is</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> by the way bootloader to unlock</font>

591
00:26:25,520 --> 00:26:31,160
the bootloader<font color="#E5E5E5"> the first step is that</font><font color="#CCCCCC"> he</font>

592
00:26:28,130 --> 00:26:34,130
read some expected<font color="#E5E5E5"> digest from the</font>

593
00:26:31,160 --> 00:26:36,170
procedure storage<font color="#E5E5E5"> it that computes the</font>

594
00:26:34,130 --> 00:26:39,080
head that the hash<font color="#E5E5E5"> of the provided yeah</font>

595
00:26:36,170 --> 00:26:41,929
om<font color="#E5E5E5"> key by the user and store the value</font>

596
00:26:39,080 --> 00:26:45,520
in some kid I just<font color="#E5E5E5"> it that</font><font color="#CCCCCC"> compared that</font>

597
00:26:41,929 --> 00:26:49,370
if the<font color="#E5E5E5"> two digests are the same if so</font>

598
00:26:45,520 --> 00:26:52,760
some<font color="#E5E5E5"> constant value is hashed and the</font>

599
00:26:49,370 --> 00:26:56,149
result is<font color="#E5E5E5"> read on purchases storage now</font>

600
00:26:52,760 --> 00:26:59,090
even though an attacker<font color="#E5E5E5"> might not know</font>

601
00:26:56,150 --> 00:27:01,340
the OEM key<font color="#E5E5E5"> what she can do is that she</font>

602
00:26:59,090 --> 00:27:03,980
can directly read from pretty storage

603
00:27:01,340 --> 00:27:07,129
and get the expected<font color="#E5E5E5"> digest after this</font>

604
00:27:03,980 --> 00:27:09,170
she<font color="#E5E5E5"> just have to compute the</font><font color="#CCCCCC"> hash</font>

605
00:27:07,130 --> 00:27:11,990
function using the<font color="#E5E5E5"> cost of swing with</font>

606
00:27:09,170 --> 00:27:14,450
the expected<font color="#E5E5E5"> digest and just write the</font>

607
00:27:11,990 --> 00:27:16,190
result of<font color="#E5E5E5"> its storage between</font><font color="#CCCCCC"> these she</font>

608
00:27:14,450 --> 00:27:21,620
will be able<font color="#E5E5E5"> to unlock the bootloader</font><font color="#CCCCCC"> by</font>

609
00:27:16,190 --> 00:27:26,690
<font color="#CCCCCC">passing the OEM key part</font><font color="#E5E5E5"> okay let's see</font>

610
00:27:21,620 --> 00:27:28,489
an<font color="#E5E5E5"> example of boots stomp so the very</font>

611
00:27:26,690 --> 00:27:30,080
first step<font color="#E5E5E5"> as I said takes place in</font>

612
00:27:28,490 --> 00:27:31,580
either<font color="#CCCCCC"> I'm actually sorry but have</font><font color="#E5E5E5"> some</font>

613
00:27:30,080 --> 00:27:34,040
problems you know<font color="#E5E5E5"> I don't know why and</font><font color="#CCCCCC"> I</font>

614
00:27:31,580 --> 00:27:36,889
<font color="#CCCCCC">can't see menus</font><font color="#E5E5E5"> I have some fun with UDK</font>

615
00:27:34,040 --> 00:27:39,980
so I'm just<font color="#CCCCCC"> going to try</font><font color="#E5E5E5"> to run it</font>

616
00:27:36,890 --> 00:27:42,710
anyway<font color="#CCCCCC"> so the first thing you have to</font>

617
00:27:39,980 --> 00:27:44,900
run a script called<font color="#E5E5E5"> fine paint which as</font>

618
00:27:42,710 --> 00:27:45,559
I mentioned<font color="#CCCCCC"> before</font><font color="#E5E5E5"> just can't the whole</font>

619
00:27:44,900 --> 00:27:48,110
bootloader

620
00:27:45,559 --> 00:27:51,350
<font color="#CCCCCC">looked for lock strings</font><font color="#E5E5E5"> and shut</font>

621
00:27:48,110 --> 00:27:53,659
understand sinks and<font color="#CCCCCC"> CID functions</font><font color="#E5E5E5"> the</font>

622
00:27:51,350 --> 00:27:56,360
output produced<font color="#E5E5E5"> looks something like</font>

623
00:27:53,660 --> 00:28:01,690
this<font color="#CCCCCC"> just have</font><font color="#E5E5E5"> to copy it which I</font>

624
00:27:56,360 --> 00:28:01,689
already<font color="#E5E5E5"> did</font><font color="#CCCCCC"> and store in some file which</font>

625
00:28:08,440 --> 00:28:15,080
<font color="#E5E5E5">okay which look which looks something</font>

626
00:28:11,060 --> 00:28:19,360
like this once it is done<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to</font>

627
00:28:15,080 --> 00:28:19,360
write a<font color="#E5E5E5"> very small configuration file</font>

628
00:28:30,990 --> 00:28:36,510
<font color="#E5E5E5">okay which contains information</font>

629
00:28:33,290 --> 00:28:40,200
information<font color="#CCCCCC"> among which the part of the</font>

630
00:28:36,510 --> 00:28:41,610
info file that I just<font color="#E5E5E5"> showed you</font><font color="#CCCCCC"> the</font>

631
00:28:40,200 --> 00:28:43,200
part of the<font color="#E5E5E5"> bootloader and</font><font color="#CCCCCC"> some other</font>

632
00:28:41,610 --> 00:28:45,419
<font color="#CCCCCC">information like</font><font color="#E5E5E5"> the number of bits of</font>

633
00:28:43,200 --> 00:28:49,200
the architecture<font color="#E5E5E5"> once you've done this</font>

634
00:28:45,420 --> 00:28:53,340
you just<font color="#E5E5E5"> have to run boots stomp the</font>

635
00:28:49,200 --> 00:28:55,679
<font color="#E5E5E5">second part of boots don't okay like</font>

636
00:28:53,340 --> 00:28:59,399
this<font color="#E5E5E5"> now this step is going to take</font>

637
00:28:55,679 --> 00:29:01,590
between<font color="#CCCCCC"> 2025 minutes so I actually run</font>

638
00:28:59,400 --> 00:29:15,840
this before the<font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> and</font>

639
00:29:01,590 --> 00:29:17,340
collected the results the<font color="#CCCCCC"> results the</font>

640
00:29:15,840 --> 00:29:21,120
results<font color="#CCCCCC"> look</font><font color="#E5E5E5"> something like this so</font>

641
00:29:17,340 --> 00:29:24,419
let's see<font color="#E5E5E5"> couple of em in this case in</font>

642
00:29:21,120 --> 00:29:26,790
this<font color="#E5E5E5"> case we got 17 alerts five of them</font>

643
00:29:24,420 --> 00:29:28,290
were<font color="#CCCCCC"> do two things</font>

644
00:29:26,790 --> 00:29:31,530
<font color="#E5E5E5">rate alerts which means that some</font>

645
00:29:28,290 --> 00:29:34,559
tainted<font color="#E5E5E5"> data</font><font color="#CCCCCC"> reached some things a of</font>

646
00:29:31,530 --> 00:29:36,090
them were due to<font color="#CCCCCC"> loop where the user can</font>

647
00:29:34,559 --> 00:29:39,300
<font color="#E5E5E5">control the</font><font color="#CCCCCC"> number of iterations and</font>

648
00:29:36,090 --> 00:29:42,870
four of them were due to some<font color="#CCCCCC"> the</font>

649
00:29:39,300 --> 00:29:50,040
referencing of tainted data let's see

650
00:29:42,870 --> 00:29:51,689
couple of em<font color="#E5E5E5"> okay this very first one is</font>

651
00:29:50,040 --> 00:29:53,010
<font color="#CCCCCC">actually the only</font><font color="#E5E5E5"> ability</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> that I</font>

652
00:29:51,690 --> 00:29:56,280
showed you<font color="#E5E5E5"> before</font><font color="#CCCCCC"> the one in the</font><font color="#E5E5E5"> robe</font>

653
00:29:53,010 --> 00:29:58,230
bootloader<font color="#E5E5E5"> so we have information we</font>

654
00:29:56,280 --> 00:30:00,540
have for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> the address of the sink</font>

655
00:29:58,230 --> 00:30:02,340
that has been reached<font color="#E5E5E5"> we have the reason</font>

656
00:30:00,540 --> 00:30:04,379
why<font color="#E5E5E5"> this alert has been raised in this</font>

657
00:30:02,340 --> 00:30:06,090
case<font color="#E5E5E5"> that we found that the sink</font><font color="#CCCCCC"> accept</font>

658
00:30:04,380 --> 00:30:08,670
the parameter<font color="#CCCCCC"> x2 which is the third</font>

659
00:30:06,090 --> 00:30:11,760
parameter which is tainted<font color="#CCCCCC"> we have the</font>

660
00:30:08,670 --> 00:30:15,600
content of the parameter and as you can

661
00:30:11,760 --> 00:30:20,070
<font color="#CCCCCC">see as you can see it contains</font><font color="#E5E5E5"> tainted</font>

662
00:30:15,600 --> 00:30:22,830
data we got the full path the<font color="#E5E5E5"> led to the</font>

663
00:30:20,070 --> 00:30:25,200
sink of pain and<font color="#E5E5E5"> we also report if</font>

664
00:30:22,830 --> 00:30:28,620
<font color="#E5E5E5">during this path the boots boots table</font>

665
00:30:25,200 --> 00:30:31,170
found any completely taint conditions

666
00:30:28,620 --> 00:30:34,620
<font color="#E5E5E5">I'll show you like in a minute</font><font color="#CCCCCC"> okay</font>

667
00:30:31,170 --> 00:30:36,890
let's assume<font color="#E5E5E5"> that's sure this is</font><font color="#CCCCCC"> an eye</font>

668
00:30:34,620 --> 00:30:36,889
<font color="#E5E5E5">down</font>

669
00:30:39,980 --> 00:30:45,020
so I<font color="#E5E5E5"> am few variables twist the</font>

670
00:30:43,010 --> 00:30:45,950
explanation<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the parameter which is</font>

671
00:30:45,020 --> 00:30:48,020
<font color="#E5E5E5">found to</font><font color="#CCCCCC"> be tainted</font>

672
00:30:45,950 --> 00:30:50,840
I call it into the LAN which<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> TEL</font>

673
00:30:48,020 --> 00:30:53,930
<font color="#E5E5E5">parameter of a mem copy like function in</font>

674
00:30:50,840 --> 00:30:55,310
<font color="#E5E5E5">this case if you follow all</font><font color="#CCCCCC"> the blocks</font>

675
00:30:53,930 --> 00:30:57,830
you<font color="#E5E5E5"> can actually do what I'm</font><font color="#CCCCCC"> doing just</font>

676
00:30:55,310 --> 00:31:00,080
<font color="#CCCCCC">doing it because</font><font color="#E5E5E5"> the notice function in</font>

677
00:30:57,830 --> 00:31:04,460
this<font color="#E5E5E5"> case the taint</font><font color="#CCCCCC"> land</font><font color="#E5E5E5"> depends on some</font>

678
00:31:00,080 --> 00:31:06,649
variable<font color="#E5E5E5"> called built v36 and</font><font color="#CCCCCC"> v36</font>

679
00:31:04,460 --> 00:31:09,470
<font color="#E5E5E5">depends on some variable that</font><font color="#CCCCCC"> I called</font>

680
00:31:06,650 --> 00:31:13,970
<font color="#E5E5E5">for simplicity tainted data now tainted</font>

681
00:31:09,470 --> 00:31:20,360
data<font color="#E5E5E5"> in the data depends on a variable</font>

682
00:31:13,970 --> 00:31:22,730
called b12<font color="#E5E5E5"> plus some offset okay now if</font>

683
00:31:20,360 --> 00:31:25,909
you do the math like the<font color="#E5E5E5"> pointer</font>

684
00:31:22,730 --> 00:31:29,600
arithmetic<font color="#CCCCCC"> you see that this</font><font color="#E5E5E5"> variable is</font>

685
00:31:25,910 --> 00:31:33,350
<font color="#CCCCCC">actually an alias</font><font color="#E5E5E5"> for this for this guy</font>

686
00:31:29,600 --> 00:31:35,780
<font color="#E5E5E5">v22 plus</font><font color="#CCCCCC"> 0x 18 and as boots stomp</font>

687
00:31:33,350 --> 00:31:40,639
identify this function as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> seed of</font>

688
00:31:35,780 --> 00:31:43,160
function by finding this log message it

689
00:31:40,640 --> 00:31:45,890
will taint<font color="#E5E5E5"> its argument actually</font><font color="#CCCCCC"> it will</font>

690
00:31:43,160 --> 00:31:48,380
taint<font color="#CCCCCC"> each one of them</font><font color="#E5E5E5"> but one argument</font>

691
00:31:45,890 --> 00:31:51,590
<font color="#E5E5E5">which is found to</font><font color="#CCCCCC"> be the value 0</font><font color="#E5E5E5"> as you</font>

692
00:31:48,380 --> 00:31:53,630
can see<font color="#E5E5E5"> with 14 is found to have the</font>

693
00:31:51,590 --> 00:31:56,090
value 0 so it<font color="#E5E5E5"> will taint each variable</font>

694
00:31:53,630 --> 00:32:00,560
each<font color="#CCCCCC"> Val each</font><font color="#E5E5E5"> argument but before</font><font color="#CCCCCC"> theme</font>

695
00:31:56,090 --> 00:32:01,879
<font color="#E5E5E5">so in this case this value will be</font>

696
00:32:00,560 --> 00:32:04,210
tainted this variable will be<font color="#E5E5E5"> tainted</font>

697
00:32:01,880 --> 00:32:08,030
which again is an alias<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this guy</font>

698
00:32:04,210 --> 00:32:12,050
<font color="#E5E5E5">which will lead eventually to raise an</font>

699
00:32:08,030 --> 00:32:15,649
alert<font color="#E5E5E5"> because of this now the completely</font>

700
00:32:12,050 --> 00:32:20,810
tainted condition is this one this guy

701
00:32:15,650 --> 00:32:22,670
so boots don't finds that all the

702
00:32:20,810 --> 00:32:24,350
variable variables used in this

703
00:32:22,670 --> 00:32:26,630
condition are actually painted so

704
00:32:24,350 --> 00:32:28,600
tainted data is the variable<font color="#E5E5E5"> path</font>

705
00:32:26,630 --> 00:32:31,640
<font color="#E5E5E5">receipt of function so is tainted and</font>

706
00:32:28,600 --> 00:32:34,909
this guy<font color="#E5E5E5"> IV</font><font color="#CCCCCC"> 37 is</font><font color="#E5E5E5"> actually an alias for</font>

707
00:32:31,640 --> 00:32:40,520
<font color="#CCCCCC">the</font><font color="#E5E5E5"> fifth field of tainted data so both</font>

708
00:32:34,910 --> 00:32:48,760
of them are<font color="#CCCCCC"> tainted let's see one last</font>

709
00:32:40,520 --> 00:32:48,760
<font color="#E5E5E5">example</font><font color="#CCCCCC"> about loops</font>

710
00:32:52,600 --> 00:33:01,189
<font color="#E5E5E5">okay listen</font><font color="#CCCCCC"> yeah in this</font><font color="#E5E5E5"> case boots Tom</font>

711
00:32:57,800 --> 00:33:05,210
finds these variables<font color="#CCCCCC"> this variable to</font>

712
00:33:01,190 --> 00:33:07,550
<font color="#CCCCCC">be</font><font color="#E5E5E5"> tainted</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> if we check we say that</font>

713
00:33:05,210 --> 00:33:13,190
we see that<font color="#E5E5E5"> this variable depends on</font>

714
00:33:07,550 --> 00:33:16,940
this<font color="#E5E5E5"> variable this variable it's an</font>

715
00:33:13,190 --> 00:33:18,470
argument<font color="#E5E5E5"> of a function pointer if you</font>

716
00:33:16,940 --> 00:33:23,180
<font color="#CCCCCC">proceed you</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> that this function</font>

717
00:33:18,470 --> 00:33:25,490
pointer is an alias<font color="#E5E5E5"> for</font><font color="#CCCCCC"> this guy which</font>

718
00:33:23,180 --> 00:33:28,100
in turn is returned by a function which

719
00:33:25,490 --> 00:33:30,170
contains the<font color="#E5E5E5"> keyword mm mm</font><font color="#CCCCCC"> C so boots</font>

720
00:33:28,100 --> 00:33:32,270
<font color="#E5E5E5">Tom will consider this function as a</font>

721
00:33:30,170 --> 00:33:36,830
seed of<font color="#E5E5E5"> as</font><font color="#CCCCCC"> an acid function it will</font>

722
00:33:32,270 --> 00:33:38,690
understand that<font color="#E5E5E5"> here here</font><font color="#CCCCCC"> gasps the</font>

723
00:33:36,830 --> 00:33:40,760
reference and use this function pointer

724
00:33:38,690 --> 00:33:42,740
<font color="#E5E5E5">and therefore</font><font color="#CCCCCC"> he will taint</font><font color="#E5E5E5"> each data</font>

725
00:33:40,760 --> 00:33:44,930
each<font color="#CCCCCC"> argument by the second because the</font>

726
00:33:42,740 --> 00:33:49,090
<font color="#E5E5E5">Gannet contains the number 0 so it will</font>

727
00:33:44,930 --> 00:33:49,090
taint<font color="#E5E5E5"> in particular the third</font><font color="#CCCCCC"> argument</font>

728
00:33:49,120 --> 00:33:57,770
which in turn will provoke will provoke

729
00:33:54,620 --> 00:34:00,939
this guy and this guy<font color="#E5E5E5"> as you can</font><font color="#CCCCCC"> see</font>

730
00:33:57,770 --> 00:34:04,580
because<font color="#E5E5E5"> this guy depends on tainted data</font>

731
00:34:00,940 --> 00:34:06,350
<font color="#CCCCCC">to be tainted</font><font color="#E5E5E5"> what does this mean well</font>

732
00:34:04,580 --> 00:34:08,960
this<font color="#E5E5E5"> means two different</font><font color="#CCCCCC"> things first of</font>

733
00:34:06,350 --> 00:34:11,989
<font color="#E5E5E5">all if it is tainted and this variable</font>

734
00:34:08,960 --> 00:34:14,810
<font color="#E5E5E5">just is</font><font color="#CCCCCC"> just a counter which goes from 0</font>

735
00:34:11,989 --> 00:34:17,089
up to number<font color="#E5E5E5"> of entries the an attacker</font>

736
00:34:14,810 --> 00:34:20,210
<font color="#CCCCCC">controlled the number</font><font color="#E5E5E5"> of times this loop</font>

737
00:34:17,090 --> 00:34:23,570
that<font color="#CCCCCC"> is iterated second of all</font><font color="#E5E5E5"> if an</font>

738
00:34:20,210 --> 00:34:25,310
attacker<font color="#E5E5E5"> can control this entry of the</font>

739
00:34:23,570 --> 00:34:29,800
<font color="#CCCCCC">tainted data</font><font color="#E5E5E5"> you can actually achieve</font>

740
00:34:25,310 --> 00:34:29,799
arbitrary memory reads<font color="#E5E5E5"> as you can see</font>

741
00:34:39,920 --> 00:34:43,510
another way started<font color="#E5E5E5"> from the beginning</font>

742
00:34:53,969 --> 00:34:56,689
almost there

743
00:35:05,940 --> 00:35:11,310
<font color="#E5E5E5">okay all the bugs were reported and</font>

744
00:35:09,210 --> 00:35:13,890
knowledge and already fixed any

745
00:35:11,310 --> 00:35:17,040
conclusion<font color="#E5E5E5"> we post the first study to</font>

746
00:35:13,890 --> 00:35:18,210
explore<font color="#CCCCCC"> Android</font><font color="#E5E5E5"> bootloaders we provided</font>

747
00:35:17,040 --> 00:35:20,880
an automatic technique to analyze

748
00:35:18,210 --> 00:35:23,220
<font color="#E5E5E5">bootloaders which produces stress ball</font>

749
00:35:20,880 --> 00:35:24,990
alerts<font color="#CCCCCC"> we found</font><font color="#E5E5E5"> six zero days in</font><font color="#CCCCCC"> various</font>

750
00:35:23,220 --> 00:35:28,350
<font color="#CCCCCC">boot loaders and we open-source</font><font color="#E5E5E5"> the tool</font>

751
00:35:24,990 --> 00:35:36,140
that we can find it with<font color="#E5E5E5"> this URL</font><font color="#CCCCCC"> now</font>

752
00:35:28,350 --> 00:35:36,140
<font color="#CCCCCC">we'll take</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> questions any questions</font>

753
00:35:40,130 --> 00:35:44,960
if you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> any questions you</font><font color="#CCCCCC"> can raise</font>

754
00:35:42,570 --> 00:35:44,960
<font color="#CCCCCC">your hand</font>

755
00:35:52,060 --> 00:35:57,370
<font color="#E5E5E5">hi morning</font><font color="#CCCCCC"> I understand</font><font color="#E5E5E5"> you are using</font>

756
00:35:54,490 --> 00:36:00,669
symbolic<font color="#E5E5E5"> execution for making this</font>

757
00:35:57,370 --> 00:36:02,859
automatic<font color="#E5E5E5"> check of software so what is</font>

758
00:36:00,670 --> 00:36:04,330
the limit basically<font color="#E5E5E5"> on in terms of</font>

759
00:36:02,860 --> 00:36:07,600
number of<font color="#E5E5E5"> lines of codes</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> in terms of</font>

760
00:36:04,330 --> 00:36:09,910
number<font color="#CCCCCC"> of branches which can possibly be</font>

761
00:36:07,600 --> 00:36:12,730
handled that explosion<font color="#E5E5E5"> right so we</font>

762
00:36:09,910 --> 00:36:15,040
provided<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fury C for example we've</font>

763
00:36:12,730 --> 00:36:18,280
<font color="#CCCCCC">only follow function calls which contain</font>

764
00:36:15,040 --> 00:36:21,130
<font color="#E5E5E5">painted data and up to a certain fixed</font>

765
00:36:18,280 --> 00:36:24,130
<font color="#E5E5E5">call stack</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> one we follow we</font>

766
00:36:21,130 --> 00:36:26,710
iterated two loops<font color="#CCCCCC"> a fixed amount of</font>

767
00:36:24,130 --> 00:36:29,350
time<font color="#CCCCCC"> we said</font><font color="#E5E5E5"> this I think</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> tank</font>

768
00:36:26,710 --> 00:36:31,240
<font color="#E5E5E5">remember correctly and we also use the</font>

769
00:36:29,350 --> 00:36:34,600
timeout<font color="#CCCCCC"> so either all the parts get</font>

770
00:36:31,240 --> 00:36:41,319
explored or the tool<font color="#E5E5E5"> finishes when this</font>

771
00:36:34,600 --> 00:36:45,580
timeout is triggered what if you<font color="#E5E5E5"> don't</font>

772
00:36:41,320 --> 00:36:52,900
have for what for<font color="#E5E5E5"> the bootloader no no</font>

773
00:36:45,580 --> 00:37:00,640
we use binaries what<font color="#E5E5E5"> okay any more</font>

774
00:36:52,900 --> 00:37:02,850
<font color="#CCCCCC">doubts</font><font color="#E5E5E5"> I guess we are</font><font color="#CCCCCC"> done with</font><font color="#E5E5E5"> the</font>

775
00:37:00,640 --> 00:37:02,850
talks

