1
00:00:02,830 --> 00:00:07,420
yeah it's pretty<font color="#E5E5E5"> funny so yeah my name</font>

2
00:00:05,290 --> 00:00:10,330
is<font color="#E5E5E5"> Vincent I'll be giving a talk to you</font>

3
00:00:07,420 --> 00:00:12,760
about riding boot kids for embedded

4
00:00:10,330 --> 00:00:13,960
<font color="#CCCCCC">devices that are based on you boot I was</font>

5
00:00:12,760 --> 00:00:16,660
<font color="#E5E5E5">supposed to do is talk with</font><font color="#CCCCCC"> a colleague</font>

6
00:00:13,960 --> 00:00:18,460
of mine<font color="#E5E5E5"> but yeah</font><font color="#CCCCCC"> I did not decide to</font>

7
00:00:16,660 --> 00:00:21,640
show<font color="#CCCCCC"> up because I guess</font><font color="#E5E5E5"> he doesn't</font><font color="#CCCCCC"> like</font>

8
00:00:18,460 --> 00:00:24,189
spicy<font color="#E5E5E5"> food that much</font><font color="#CCCCCC"> so first I'm gonna</font>

9
00:00:21,640 --> 00:00:25,749
talk a bit about who we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> why</font><font color="#CCCCCC"> we did</font>

10
00:00:24,189 --> 00:00:27,609
this and then<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about</font>

11
00:00:25,749 --> 00:00:29,049
<font color="#E5E5E5">the device we use and some preparations</font>

12
00:00:27,609 --> 00:00:30,999
were made through<font color="#E5E5E5"> the device in order</font><font color="#CCCCCC"> to</font>

13
00:00:29,050 --> 00:00:33,100
make this<font color="#E5E5E5"> work</font><font color="#CCCCCC"> then I will talk about</font>

14
00:00:30,999 --> 00:00:34,870
<font color="#E5E5E5">the boot kit itself</font><font color="#CCCCCC"> I will first start</font>

15
00:00:33,100 --> 00:00:36,940
<font color="#CCCCCC">with the actual boot kit which is based</font>

16
00:00:34,870 --> 00:00:38,890
on<font color="#CCCCCC"> you boot then</font><font color="#E5E5E5"> I'll start about how</font>

17
00:00:36,940 --> 00:00:41,620
you can<font color="#E5E5E5"> use the boot kit to influence</font>

18
00:00:38,890 --> 00:00:43,300
the kernel or do a<font color="#CCCCCC"> Gustavus persistence</font>

19
00:00:41,620 --> 00:00:44,829
<font color="#E5E5E5">and then I will end with</font><font color="#CCCCCC"> some</font>

20
00:00:43,300 --> 00:00:46,750
recommendations<font color="#CCCCCC"> on how</font><font color="#E5E5E5"> to secure these</font>

21
00:00:44,829 --> 00:00:50,260
<font color="#E5E5E5">embedded devices and to protect against</font>

22
00:00:46,750 --> 00:00:52,870
<font color="#E5E5E5">these sort of attacks so as introduced</font>

23
00:00:50,260 --> 00:00:54,460
my name<font color="#CCCCCC"> is Vincent I work for KP red</font>

24
00:00:52,870 --> 00:00:56,620
<font color="#CCCCCC">team in Amsterdam I'm also a New</font>

25
00:00:54,460 --> 00:00:59,350
Amsterdam chapter<font color="#E5E5E5"> head all</font><font color="#CCCCCC"> together with</font>

26
00:00:56,620 --> 00:01:01,178
with<font color="#E5E5E5"> Pippin yeah I like Linux I like</font>

27
00:00:59,350 --> 00:01:03,609
<font color="#CCCCCC">low-level</font><font color="#E5E5E5"> stuff so this is a perfect</font>

28
00:01:01,179 --> 00:01:06,460
talk for me I guess<font color="#E5E5E5"> and I used to work</font>

29
00:01:03,609 --> 00:01:07,660
as a consultant<font color="#E5E5E5"> but I decided to sit in</font>

30
00:01:06,460 --> 00:01:10,080
an office<font color="#CCCCCC"> where your laptop is way</font>

31
00:01:07,660 --> 00:01:11,979
better than<font color="#E5E5E5"> talk to clients all the time</font>

32
00:01:10,080 --> 00:01:13,780
me and<font color="#CCCCCC"> my partner who is</font><font color="#E5E5E5"> not here</font>

33
00:01:11,980 --> 00:01:15,640
Bernardo<font color="#CCCCCC"> he also works at the Cape in</font>

34
00:01:13,780 --> 00:01:17,170
<font color="#E5E5E5">red team he's very good at breaking</font>

35
00:01:15,640 --> 00:01:18,460
routers he's even better at picking

36
00:01:17,170 --> 00:01:20,860
routers than I am

37
00:01:18,460 --> 00:01:23,320
he's a degree<font color="#E5E5E5"> CDF player and he's a</font>

38
00:01:20,860 --> 00:01:25,180
Brazilian<font color="#CCCCCC"> who lives in Amsterdam at the</font>

39
00:01:23,320 --> 00:01:28,449
moment<font color="#E5E5E5"> and he's actually right there</font>

40
00:01:25,180 --> 00:01:30,130
<font color="#E5E5E5">right now</font><font color="#CCCCCC"> and a small disclaimer about</font>

41
00:01:28,450 --> 00:01:32,980
<font color="#E5E5E5">the talk we did everything together</font>

42
00:01:30,130 --> 00:01:34,960
so yeah the entire boot<font color="#E5E5E5"> kid was was his</font>

43
00:01:32,980 --> 00:01:36,970
idea<font color="#E5E5E5"> and we worked together on it and</font><font color="#CCCCCC"> we</font>

44
00:01:34,960 --> 00:01:40,869
came<font color="#CCCCCC"> up</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> this implementation which</font>

45
00:01:36,970 --> 00:01:43,330
is<font color="#E5E5E5"> which is pretty cool</font><font color="#CCCCCC"> so the goal of</font>

46
00:01:40,870 --> 00:01:46,000
this<font color="#E5E5E5"> the goal of the talk was for us to</font>

47
00:01:43,330 --> 00:01:47,679
demonstrate<font color="#E5E5E5"> that it's possible</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a</font>

48
00:01:46,000 --> 00:01:49,450
boot kit on a meta devices because you

49
00:01:47,680 --> 00:01:51,430
know we know about boot kits in BIOS and

50
00:01:49,450 --> 00:01:53,950
UEFI<font color="#E5E5E5"> but I'm not sure if there's any</font>

51
00:01:51,430 --> 00:01:56,590
<font color="#CCCCCC">research done on boot kits on routers or</font>

52
00:01:53,950 --> 00:01:58,660
other<font color="#E5E5E5"> embedded devices and it's also you</font>

53
00:01:56,590 --> 00:02:01,990
know<font color="#E5E5E5"> it's fun to do this we</font><font color="#CCCCCC"> just like</font>

54
00:01:58,660 --> 00:02:03,940
this and I see a seam go crazy there<font color="#E5E5E5"> and</font>

55
00:02:01,990 --> 00:02:05,740
of course<font color="#E5E5E5"> having fun is like one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

56
00:02:03,940 --> 00:02:07,210
main goals and<font color="#E5E5E5"> having a free ticket my</font>

57
00:02:05,740 --> 00:02:11,620
company to India which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> also pretty</font>

58
00:02:07,210 --> 00:02:13,440
cool and yeah that's it basically<font color="#E5E5E5"> so</font>

59
00:02:11,620 --> 00:02:15,880
having a boot<font color="#E5E5E5"> kit has several advantages</font>

60
00:02:13,440 --> 00:02:16,720
<font color="#CCCCCC">one of the main advantages that is</font><font color="#E5E5E5"> very</font>

61
00:02:15,880 --> 00:02:19,000
<font color="#CCCCCC">difficult to detach</font>

62
00:02:16,720 --> 00:02:21,190
at the boot gate<font color="#E5E5E5"> the bootloader in this</font>

63
00:02:19,000 --> 00:02:23,380
case is the<font color="#E5E5E5"> embedded devices the very</font>

64
00:02:21,190 --> 00:02:25,090
first thing<font color="#CCCCCC"> that is a</font><font color="#E5E5E5"> kick off and if</font>

65
00:02:23,380 --> 00:02:27,010
you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> persistent in the in the</font>

66
00:02:25,090 --> 00:02:28,570
bootloader then yeah<font color="#CCCCCC"> people</font><font color="#E5E5E5"> use you</font>

67
00:02:27,010 --> 00:02:30,250
<font color="#E5E5E5">don't touch the bootloader so it's very</font>

68
00:02:28,570 --> 00:02:32,470
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> for them to</font><font color="#E5E5E5"> find out that it's</font>

69
00:02:30,250 --> 00:02:34,060
compromised<font color="#E5E5E5"> also the bootloader is</font>

70
00:02:32,470 --> 00:02:36,130
usually<font color="#E5E5E5"> not affected by updates and</font>

71
00:02:34,060 --> 00:02:38,140
imagine you updating your your eyes<font color="#E5E5E5"> fees</font>

72
00:02:36,130 --> 00:02:40,210
router at your house and it<font color="#CCCCCC"> doesn't do</font>

73
00:02:38,140 --> 00:02:42,250
it anymore<font color="#CCCCCC"> yeah that can</font><font color="#E5E5E5"> happen if you</font>

74
00:02:40,210 --> 00:02:44,560
start touching<font color="#CCCCCC"> the bootloader</font><font color="#E5E5E5"> and I have</font>

75
00:02:42,250 --> 00:02:46,600
a small corruption in there<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> also</font>

76
00:02:44,560 --> 00:02:48,610
yeah you can also bypass or<font color="#E5E5E5"> wear</font>

77
00:02:46,600 --> 00:02:51,310
security features by having a boot keep

78
00:02:48,610 --> 00:02:53,020
like this and you can<font color="#E5E5E5"> also bypass the OS</font>

79
00:02:51,310 --> 00:02:56,470
altogether by just<font color="#E5E5E5"> putting your</font><font color="#CCCCCC"> own</font>

80
00:02:53,020 --> 00:02:57,910
<font color="#E5E5E5">kernel and that's pretty cool the</font>

81
00:02:56,470 --> 00:02:59,950
disadvantage is basically<font color="#E5E5E5"> what you will</font>

82
00:02:57,910 --> 00:03:02,440
see on the slide<font color="#CCCCCC"> here it's if it goes</font>

83
00:02:59,950 --> 00:03:04,570
wrong<font color="#CCCCCC"> it really goes wrong the NSA</font>

84
00:03:02,440 --> 00:03:06,670
allegedly tried to backdoor a<font color="#CCCCCC"> Syrian</font>

85
00:03:04,570 --> 00:03:08,799
router or modem<font color="#CCCCCC"> backbone router I</font>

86
00:03:06,670 --> 00:03:10,359
believe and they made a<font color="#CCCCCC"> mistake which</font>

87
00:03:08,800 --> 00:03:12,670
brought the entire Syrian<font color="#CCCCCC"> Internet down</font>

88
00:03:10,360 --> 00:03:14,020
and yeah if<font color="#E5E5E5"> this was a boot kit they</font>

89
00:03:12,670 --> 00:03:16,809
might have made a mistake<font color="#CCCCCC"> and just</font>

90
00:03:14,020 --> 00:03:18,490
<font color="#E5E5E5">rented the device unusable so yeah</font>

91
00:03:16,810 --> 00:03:20,740
router malware is hard<font color="#E5E5E5"> and it's very</font>

92
00:03:18,490 --> 00:03:22,209
<font color="#E5E5E5">specific to the device you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

93
00:03:20,740 --> 00:03:24,100
backdoor you<font color="#E5E5E5"> know there are some very</font>

94
00:03:22,209 --> 00:03:26,020
<font color="#E5E5E5">specific variables so yeah you need</font><font color="#CCCCCC"> to</font>

95
00:03:24,100 --> 00:03:29,320
do some some research in order to<font color="#CCCCCC"> make</font>

96
00:03:26,020 --> 00:03:31,930
it work<font color="#CCCCCC"> the device we initially</font><font color="#E5E5E5"> used was</font>

97
00:03:29,320 --> 00:03:34,359
the G line<font color="#E5E5E5"> at 64 16 it's a basically an</font>

98
00:03:31,930 --> 00:03:36,670
<font color="#CCCCCC">open source device it has a 64 megabyte</font>

99
00:03:34,360 --> 00:03:41,830
<font color="#CCCCCC">DDR one ram which</font><font color="#E5E5E5"> is on the on the left</font>

100
00:03:36,670 --> 00:03:44,170
side it has a a throws 9330 one sock<font color="#E5E5E5"> it</font>

101
00:03:41,830 --> 00:03:47,620
has a serial interface<font color="#E5E5E5"> some GPIO ports</font>

102
00:03:44,170 --> 00:03:49,750
and a very cool<font color="#E5E5E5"> magnetic enabled</font>

103
00:03:47,620 --> 00:03:53,380
<font color="#CCCCCC">Ethernet adapter which I</font><font color="#E5E5E5"> don't know what</font>

104
00:03:49,750 --> 00:03:54,820
that means<font color="#CCCCCC"> the</font><font color="#E5E5E5"> the important part is on</font>

105
00:03:53,380 --> 00:03:56,500
<font color="#CCCCCC">the back of the device</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see</font>

106
00:03:54,820 --> 00:03:58,750
there's a yeah I didn't put a circle

107
00:03:56,500 --> 00:04:01,770
<font color="#E5E5E5">around it but there's an</font><font color="#CCCCCC"> eight</font><font color="#E5E5E5"> pin let</font>

108
00:03:58,750 --> 00:04:04,450
me just point it<font color="#E5E5E5"> out this side just like</font>

109
00:04:01,770 --> 00:04:07,540
like a<font color="#CCCCCC"> a pyramid shape in there in this</font>

110
00:04:04,450 --> 00:04:09,220
<font color="#E5E5E5">case it's it's</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> win bond</font><font color="#CCCCCC"> as you can see</font>

111
00:04:07,540 --> 00:04:10,810
there are no physical<font color="#CCCCCC"> impairments around</font>

112
00:04:09,220 --> 00:04:13,300
the firmware so if you want to reflash

113
00:04:10,810 --> 00:04:16,959
it you you can<font color="#CCCCCC"> just you</font><font color="#E5E5E5"> know go</font><font color="#CCCCCC"> ahead</font>

114
00:04:13,300 --> 00:04:19,630
and<font color="#E5E5E5"> refresh the chip</font><font color="#CCCCCC"> what we did is we</font>

115
00:04:16,959 --> 00:04:21,250
dissolve it the actual chip and<font color="#E5E5E5"> where</font>

116
00:04:19,630 --> 00:04:24,729
the pins were from the chip we<font color="#E5E5E5"> solder</font>

117
00:04:21,250 --> 00:04:26,950
some wires on<font color="#E5E5E5"> and then we put our device</font>

118
00:04:24,729 --> 00:04:28,479
programmer adapter on it<font color="#E5E5E5"> so we put the</font>

119
00:04:26,950 --> 00:04:29,710
chip<font color="#CCCCCC"> in there and by</font><font color="#E5E5E5"> connecting all the</font>

120
00:04:28,479 --> 00:04:30,609
wires to<font color="#E5E5E5"> the correct points we could</font>

121
00:04:29,710 --> 00:04:32,590
<font color="#CCCCCC">basically</font>

122
00:04:30,610 --> 00:04:34,629
boot the device like this<font color="#CCCCCC"> and when we</font>

123
00:04:32,590 --> 00:04:36,460
would break the device we had made<font color="#CCCCCC"> a</font>

124
00:04:34,629 --> 00:04:39,370
<font color="#CCCCCC">backup with</font><font color="#E5E5E5"> our device programmer which</font>

125
00:04:36,460 --> 00:04:40,960
you can see<font color="#E5E5E5"> right here we could</font><font color="#CCCCCC"> just put</font>

126
00:04:39,370 --> 00:04:43,090
our<font color="#E5E5E5"> backup back really easy instead of</font>

127
00:04:40,960 --> 00:04:44,500
like continuously resole during the chip

128
00:04:43,090 --> 00:04:46,929
on it we can just<font color="#CCCCCC"> you know attach it</font>

129
00:04:44,500 --> 00:04:48,460
make<font color="#CCCCCC"> a backup</font><font color="#E5E5E5"> with the back of</font><font color="#CCCCCC"> bag and</font>

130
00:04:46,930 --> 00:04:51,520
then<font color="#CCCCCC"> connect it</font><font color="#E5E5E5"> and it will be working</font>

131
00:04:48,460 --> 00:04:53,080
<font color="#E5E5E5">again</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we were very</font><font color="#CCCCCC"> happy that we did</font>

132
00:04:51,520 --> 00:04:57,639
this because<font color="#CCCCCC"> we had lots of breaks a</font>

133
00:04:53,080 --> 00:04:59,530
lots of recoveries<font color="#CCCCCC"> I before I went</font><font color="#E5E5E5"> to</font>

134
00:04:57,639 --> 00:05:02,680
India<font color="#E5E5E5"> I actually lost the entire flash</font>

135
00:04:59,530 --> 00:05:04,750
chip<font color="#E5E5E5"> so I had to find another device</font>

136
00:05:02,680 --> 00:05:06,190
<font color="#CCCCCC">this older</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> chip</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you know used</font>

137
00:05:04,750 --> 00:05:08,440
<font color="#E5E5E5">the backup to put everything back and</font>

138
00:05:06,190 --> 00:05:10,719
before<font color="#CCCCCC"> I</font><font color="#E5E5E5"> was doing a talk in Portugal</font>

139
00:05:08,440 --> 00:05:13,060
the day before<font color="#E5E5E5"> we were recording demos I</font>

140
00:05:10,720 --> 00:05:15,370
also<font color="#E5E5E5"> break the device so yeah if we</font>

141
00:05:13,060 --> 00:05:19,000
didn't do<font color="#E5E5E5"> this then it would be awful</font>

142
00:05:15,370 --> 00:05:21,490
stuff<font color="#CCCCCC"> the most important one of the most</font>

143
00:05:19,000 --> 00:05:23,500
important parts<font color="#E5E5E5"> requirements actually</font>

144
00:05:21,490 --> 00:05:25,360
<font color="#E5E5E5">for doing this is having a correct a</font>

145
00:05:23,500 --> 00:05:28,090
good tool chain because you're<font color="#E5E5E5"> going to</font>

146
00:05:25,360 --> 00:05:29,710
need to cross compile<font color="#CCCCCC"> different</font>

147
00:05:28,090 --> 00:05:31,690
architecture so basically what I have I

148
00:05:29,710 --> 00:05:33,909
have an x86 device the router is a mips

149
00:05:31,690 --> 00:05:37,180
device so<font color="#E5E5E5"> I need to have a</font><font color="#CCCCCC"> jesusí</font><font color="#E5E5E5"> I can</font>

150
00:05:33,909 --> 00:05:40,630
cross compile the code<font color="#CCCCCC"> to yeah to meet</font>

151
00:05:37,180 --> 00:05:42,789
for instance you can use<font color="#E5E5E5"> a great tool</font>

152
00:05:40,630 --> 00:05:44,680
for<font color="#CCCCCC"> this it's called cross to ng</font><font color="#E5E5E5"> it's a</font>

153
00:05:42,789 --> 00:05:46,599
versatile tool<font color="#E5E5E5"> chain generator you</font><font color="#CCCCCC"> can</font>

154
00:05:44,680 --> 00:05:49,599
basically generate<font color="#E5E5E5"> two little chains for</font>

155
00:05:46,599 --> 00:05:51,310
all sorts of architectures but<font color="#CCCCCC"> what we</font>

156
00:05:49,599 --> 00:05:54,520
ended up using which was way simpler was

157
00:05:51,310 --> 00:05:56,560
using the open wrt<font color="#CCCCCC"> sdk because the</font>

158
00:05:54,520 --> 00:05:58,270
opened up with the<font color="#CCCCCC"> SDK for</font><font color="#E5E5E5"> this device</font>

159
00:05:56,560 --> 00:06:00,430
you<font color="#E5E5E5"> could just</font><font color="#CCCCCC"> download the entire</font><font color="#E5E5E5"> SDK</font>

160
00:05:58,270 --> 00:06:02,740
which had all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> pre-compiled</font><font color="#E5E5E5"> you know</font>

161
00:06:00,430 --> 00:06:05,199
compiler binaries which are made for<font color="#E5E5E5"> use</font>

162
00:06:02,740 --> 00:06:08,500
architecture and it's a<font color="#E5E5E5"> yeah saved us a</font>

163
00:06:05,199 --> 00:06:10,630
lot<font color="#CCCCCC"> of time so yeah why did we choose</font>

164
00:06:08,500 --> 00:06:13,000
<font color="#E5E5E5">you boot well as you can see in the</font><font color="#CCCCCC"> Blue</font>

165
00:06:10,630 --> 00:06:15,219
<font color="#CCCCCC">Square</font><font color="#E5E5E5"> you boot is more than half of all</font>

166
00:06:13,000 --> 00:06:17,860
<font color="#E5E5E5">Android devices run you good I know for</font>

167
00:06:15,219 --> 00:06:19,979
a<font color="#CCCCCC"> fact that</font><font color="#E5E5E5"> some alpha</font><font color="#CCCCCC"> Avis cars they</font>

168
00:06:17,860 --> 00:06:22,210
have you boots<font color="#E5E5E5"> televisions have you boot</font>

169
00:06:19,979 --> 00:06:25,750
<font color="#CCCCCC">yeah of</font><font color="#E5E5E5"> course routers have you</font><font color="#CCCCCC"> would</font>

170
00:06:22,210 --> 00:06:27,430
many many devices and you<font color="#E5E5E5"> would</font><font color="#CCCCCC"> dissolve</font>

171
00:06:25,750 --> 00:06:29,139
<font color="#CCCCCC">a source so you can</font><font color="#E5E5E5"> just download the</font>

172
00:06:27,430 --> 00:06:30,909
source code<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can make some</font>

173
00:06:29,139 --> 00:06:32,830
changes<font color="#CCCCCC"> to it there are a lot of</font><font color="#E5E5E5"> open</font>

174
00:06:30,909 --> 00:06:35,319
source<font color="#E5E5E5"> you boot implementations for all</font>

175
00:06:32,830 --> 00:06:37,479
sorts of devices<font color="#E5E5E5"> and we ended up using a</font>

176
00:06:35,319 --> 00:06:39,699
you good mod from<font color="#E5E5E5"> a guy named</font><font color="#CCCCCC"> Peppa</font><font color="#E5E5E5"> mm</font>

177
00:06:37,479 --> 00:06:41,800
<font color="#E5E5E5">which had some modifications that were</font>

178
00:06:39,699 --> 00:06:43,180
perfect<font color="#CCCCCC"> for a boot kit and you can also</font>

179
00:06:41,800 --> 00:06:43,930
see<font color="#CCCCCC"> that the big red chair over there</font>

180
00:06:43,180 --> 00:06:45,670
<font color="#E5E5E5">it's</font>

181
00:06:43,930 --> 00:06:48,250
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> CFE</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> Broadcom it's a</font>

182
00:06:45,670 --> 00:06:50,500
<font color="#E5E5E5">proprietary provider a bootloader and</font>

183
00:06:48,250 --> 00:06:54,010
<font color="#E5E5E5">it's it also has a big share but luckily</font>

184
00:06:50,500 --> 00:06:56,770
<font color="#E5E5E5">not</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> because as you would so if you</font>

185
00:06:54,010 --> 00:06:59,890
have a you boot image the the first 123

186
00:06:56,770 --> 00:07:02,440
<font color="#E5E5E5">K bytes will be yeah like the text zone</font>

187
00:06:59,890 --> 00:07:04,599
and the code base<font color="#CCCCCC"> is actually and then</font>

188
00:07:02,440 --> 00:07:06,400
at the very<font color="#E5E5E5"> end of the of the you</font><font color="#CCCCCC"> boot</font>

189
00:07:04,600 --> 00:07:07,840
image you will have<font color="#E5E5E5"> 5 K which are</font>

190
00:07:06,400 --> 00:07:09,820
reserved for environment variables<font color="#E5E5E5"> and</font>

191
00:07:07,840 --> 00:07:11,140
depending on<font color="#E5E5E5"> your device the environment</font>

192
00:07:09,820 --> 00:07:13,240
variables might be located<font color="#CCCCCC"> on a</font>

193
00:07:11,140 --> 00:07:17,919
<font color="#CCCCCC">different</font><font color="#E5E5E5"> part of the image but yeah</font>

194
00:07:13,240 --> 00:07:20,110
usually<font color="#E5E5E5"> the size is about about 5 K and</font>

195
00:07:17,920 --> 00:07:21,520
environment variables are<font color="#E5E5E5"> yeah really</font>

196
00:07:20,110 --> 00:07:23,290
<font color="#E5E5E5">useful</font><font color="#CCCCCC"> because they are on</font><font color="#E5E5E5"> persistent</font>

197
00:07:21,520 --> 00:07:25,299
<font color="#E5E5E5">stores and you can set environment</font>

198
00:07:23,290 --> 00:07:26,770
variables<font color="#E5E5E5"> from you boot and it will be</font>

199
00:07:25,300 --> 00:07:28,330
safe so you know when you reboot the

200
00:07:26,770 --> 00:07:29,650
device you<font color="#E5E5E5"> can still have your</font>

201
00:07:28,330 --> 00:07:30,909
environment variables and<font color="#E5E5E5"> there are some</font>

202
00:07:29,650 --> 00:07:33,400
very interesting environment variables

203
00:07:30,910 --> 00:07:36,040
that we can<font color="#E5E5E5"> go back door and you'll see</font>

204
00:07:33,400 --> 00:07:37,510
later<font color="#E5E5E5"> that's yeah pretty useful so a few</font>

205
00:07:36,040 --> 00:07:39,220
<font color="#E5E5E5">of these variables are the</font><font color="#CCCCCC"> boots CMD</font>

206
00:07:37,510 --> 00:07:40,960
command for<font color="#E5E5E5"> instance it's the actual</font>

207
00:07:39,220 --> 00:07:43,510
first command that<font color="#CCCCCC"> you would kick off</font>

208
00:07:40,960 --> 00:07:45,700
when you<font color="#E5E5E5"> don't press a key to enter the</font>

209
00:07:43,510 --> 00:07:47,289
<font color="#E5E5E5">bootloader menu you also have blue dogs</font>

210
00:07:45,700 --> 00:07:49,479
environment variable which contains<font color="#E5E5E5"> the</font>

211
00:07:47,290 --> 00:07:50,800
kernel arguments you know<font color="#CCCCCC"> the arguments</font>

212
00:07:49,480 --> 00:07:53,650
are passed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the kernel so</font><font color="#CCCCCC"> the kernel</font>

213
00:07:50,800 --> 00:07:56,230
<font color="#E5E5E5">can set up the device correctly</font><font color="#CCCCCC"> results</font>

214
00:07:53,650 --> 00:07:58,929
of a load address<font color="#E5E5E5"> argument which is</font>

215
00:07:56,230 --> 00:08:01,480
basically the<font color="#CCCCCC"> TTP</font><font color="#E5E5E5"> bootloader address and</font>

216
00:07:58,930 --> 00:08:02,950
there's also a recovery recovery

217
00:08:01,480 --> 00:08:05,770
environment<font color="#E5E5E5"> variable which contains</font><font color="#CCCCCC"> an</font>

218
00:08:02,950 --> 00:08:07,479
entire<font color="#CCCCCC"> you</font><font color="#E5E5E5"> boot script for recovery so</font>

219
00:08:05,770 --> 00:08:09,280
it can<font color="#CCCCCC"> basically make some if statements</font>

220
00:08:07,480 --> 00:08:11,890
in there and it will spawn<font color="#E5E5E5"> an HTTP</font>

221
00:08:09,280 --> 00:08:14,919
server<font color="#E5E5E5"> you can use that to recover</font><font color="#CCCCCC"> yeah</font>

222
00:08:11,890 --> 00:08:17,440
I could rescue<font color="#E5E5E5"> your your image in this</font>

223
00:08:14,920 --> 00:08:18,790
beautiful<font color="#CCCCCC"> rod re output you will see no</font>

224
00:08:17,440 --> 00:08:20,410
<font color="#CCCCCC">bytes</font><font color="#E5E5E5"> separate</font><font color="#CCCCCC"> list at</font><font color="#E5E5E5"> the very end it's</font>

225
00:08:18,790 --> 00:08:22,480
highlighted you<font color="#E5E5E5"> can see like there's the</font>

226
00:08:20,410 --> 00:08:24,130
boot<font color="#CCCCCC"> args and then at the end</font><font color="#E5E5E5"> of the</font>

227
00:08:22,480 --> 00:08:26,050
<font color="#E5E5E5">block you</font><font color="#CCCCCC"> see a no bite</font><font color="#E5E5E5"> would like the</font>

228
00:08:24,130 --> 00:08:27,700
boot delay and yeah it's<font color="#CCCCCC"> basically</font>

229
00:08:26,050 --> 00:08:30,610
nobody<font color="#E5E5E5"> separated the array of</font>

230
00:08:27,700 --> 00:08:33,689
environment variables<font color="#CCCCCC"> another</font><font color="#E5E5E5"> way of</font>

231
00:08:30,610 --> 00:08:36,789
<font color="#E5E5E5">creating a backdoor is by extracting the</font>

232
00:08:33,690 --> 00:08:39,610
the<font color="#CCCCCC"> u-boot decompressing the you would</font>

233
00:08:36,789 --> 00:08:43,059
<font color="#E5E5E5">and changing these variables with a hex</font>

234
00:08:39,610 --> 00:08:44,530
editor<font color="#CCCCCC"> and then you could put</font><font color="#E5E5E5"> the put</font>

235
00:08:43,059 --> 00:08:46,689
the<font color="#E5E5E5"> image back together with lzma you</font>

236
00:08:44,530 --> 00:08:49,270
could also upload it on<font color="#E5E5E5"> the device and</font>

237
00:08:46,690 --> 00:08:51,070
<font color="#E5E5E5">then if you have the correct crc32 and</font>

238
00:08:49,270 --> 00:08:52,300
you can basically do it like this<font color="#E5E5E5"> as</font>

239
00:08:51,070 --> 00:08:54,250
<font color="#E5E5E5">well as a lot less invasive then</font>

240
00:08:52,300 --> 00:08:56,800
flashing in the<font color="#E5E5E5"> entire boot kit then we</font>

241
00:08:54,250 --> 00:08:57,730
do but<font color="#E5E5E5"> it's yeah it's kind of hard to</font><font color="#CCCCCC"> to</font>

242
00:08:56,800 --> 00:09:00,370
<font color="#E5E5E5">do this correctly because</font>

243
00:08:57,730 --> 00:09:01,660
<font color="#E5E5E5">to have to put the image back together</font>

244
00:09:00,370 --> 00:09:03,550
you need<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> to correct</font><font color="#CCCCCC"> elves</font><font color="#E5E5E5"> you</font>

245
00:09:01,660 --> 00:09:06,180
may algorithm and might<font color="#E5E5E5"> be specific</font><font color="#CCCCCC"> for</font>

246
00:09:03,550 --> 00:09:09,279
<font color="#E5E5E5">different</font><font color="#CCCCCC"> devices so it might</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> a pain</font>

247
00:09:06,180 --> 00:09:11,349
other<font color="#E5E5E5"> interesting features in</font><font color="#CCCCCC"> Ubud are</font>

248
00:09:09,279 --> 00:09:13,660
the print<font color="#E5E5E5"> and of command it prints</font>

249
00:09:11,350 --> 00:09:16,540
environment variables<font color="#E5E5E5"> the</font><font color="#CCCCCC"> TFTP</font><font color="#E5E5E5"> boot</font>

250
00:09:13,660 --> 00:09:19,329
command which can be used to boot images

251
00:09:16,540 --> 00:09:21,660
<font color="#E5E5E5">from the network TV boot can also be</font>

252
00:09:19,329 --> 00:09:24,638
used<font color="#CCCCCC"> to yeah you can also use it to load</font>

253
00:09:21,660 --> 00:09:26,319
<font color="#E5E5E5">like you would in memory and then copy</font>

254
00:09:24,639 --> 00:09:28,750
<font color="#E5E5E5">it to a different memory</font><font color="#CCCCCC"> section you can</font>

255
00:09:26,320 --> 00:09:30,579
<font color="#E5E5E5">basically write with it as well and we</font>

256
00:09:28,750 --> 00:09:31,899
<font color="#E5E5E5">also have the f-stop string future which</font>

257
00:09:30,579 --> 00:09:34,599
<font color="#E5E5E5">is basically an environment variable</font>

258
00:09:31,899 --> 00:09:37,510
<font color="#CCCCCC">that</font><font color="#E5E5E5"> yeah it works as a passphrase</font><font color="#CCCCCC"> to</font>

259
00:09:34,600 --> 00:09:39,070
enter the bootloader menu and also<font color="#CCCCCC"> of</font>

260
00:09:37,510 --> 00:09:41,170
course<font color="#E5E5E5"> the boot CMD which is the command</font>

261
00:09:39,070 --> 00:09:43,420
<font color="#CCCCCC">I explained and yeah the ping command</font>

262
00:09:41,170 --> 00:09:45,310
<font color="#E5E5E5">which is basically an ICMP paying where</font>

263
00:09:43,420 --> 00:09:48,339
you can do some network<font color="#CCCCCC"> discovery or see</font>

264
00:09:45,310 --> 00:09:50,349
if of servers online or<font color="#E5E5E5"> not</font><font color="#CCCCCC"> in this in</font>

265
00:09:48,339 --> 00:09:52,449
<font color="#E5E5E5">this example right</font><font color="#CCCCCC"> here we have a Google</font>

266
00:09:50,350 --> 00:09:53,889
example so we use the ping command<font color="#E5E5E5"> and</font>

267
00:09:52,449 --> 00:09:57,339
the scripting language from you boot

268
00:09:53,889 --> 00:09:59,170
which kind of looks like<font color="#E5E5E5"> bash we we see</font>

269
00:09:57,339 --> 00:10:01,180
with a ping command if the server IP is

270
00:09:59,170 --> 00:10:03,099
up and then if the server IP is up with

271
00:10:01,180 --> 00:10:05,489
50<font color="#E5E5E5"> people to the load address</font>

272
00:10:03,100 --> 00:10:08,050
<font color="#E5E5E5">environment variable our</font><font color="#CCCCCC"> backdoored</font>

273
00:10:05,490 --> 00:10:12,069
<font color="#CCCCCC">begger image and then if it's successful</font>

274
00:10:08,050 --> 00:10:13,209
<font color="#E5E5E5">we basically boot the backdoor image by</font>

275
00:10:12,069 --> 00:10:15,279
using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> load address environment</font>

276
00:10:13,209 --> 00:10:17,380
variable<font color="#CCCCCC"> and if it the pink fills then</font>

277
00:10:15,279 --> 00:10:19,420
we basically boot<font color="#E5E5E5"> the normal firmware</font>

278
00:10:17,380 --> 00:10:21,310
which is<font color="#E5E5E5"> located at the firmer address</font>

279
00:10:19,420 --> 00:10:25,630
which is<font color="#CCCCCC"> also a hard-coded</font><font color="#E5E5E5"> environment</font>

280
00:10:21,310 --> 00:10:26,979
variable<font color="#E5E5E5"> so yeah one</font><font color="#CCCCCC"> of the functions we</font>

281
00:10:25,630 --> 00:10:29,290
back<font color="#E5E5E5"> board was the the print</font><font color="#CCCCCC"> end</font>

282
00:10:26,980 --> 00:10:31,240
<font color="#E5E5E5">function because yeah when you manage to</font>

283
00:10:29,290 --> 00:10:32,349
get<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> bootloader</font><font color="#E5E5E5"> and you want to</font>

284
00:10:31,240 --> 00:10:34,089
print<font color="#E5E5E5"> environment variables we don't</font>

285
00:10:32,350 --> 00:10:36,370
want you to<font color="#CCCCCC"> see</font><font color="#E5E5E5"> our actual</font><font color="#CCCCCC"> vector</font>

286
00:10:34,089 --> 00:10:40,029
<font color="#CCCCCC">environment</font><font color="#E5E5E5"> variables so what we did is</font>

287
00:10:36,370 --> 00:10:41,980
we we added a new<font color="#E5E5E5"> function called get</font>

288
00:10:40,029 --> 00:10:43,180
match<font color="#E5E5E5"> to get the name of the environment</font>

289
00:10:41,980 --> 00:10:45,010
variable so we read an environment

290
00:10:43,180 --> 00:10:48,310
variable<font color="#E5E5E5"> from the list and fill the</font>

291
00:10:45,010 --> 00:10:50,110
equal sign and<font color="#CCCCCC"> then we passed</font><font color="#E5E5E5"> the string</font>

292
00:10:48,310 --> 00:10:52,479
to a function<font color="#CCCCCC"> that seems like</font><font color="#E5E5E5"> okay if</font>

293
00:10:50,110 --> 00:10:54,190
this is<font color="#CCCCCC"> Borg's which we basically back</font>

294
00:10:52,480 --> 00:10:56,220
<font color="#E5E5E5">Dorothy as you can see below in the if</font>

295
00:10:54,190 --> 00:10:58,540
statement<font color="#CCCCCC"> if boo dogs</font>

296
00:10:56,220 --> 00:11:01,180
<font color="#CCCCCC">matches the swing from the environment</font>

297
00:10:58,540 --> 00:11:03,399
<font color="#E5E5E5">variables we we set the PFLAG equals</font><font color="#CCCCCC"> 1 I</font>

298
00:11:01,180 --> 00:11:05,349
just<font color="#CCCCCC"> need to point it out the PFLAG</font>

299
00:11:03,399 --> 00:11:08,260
equals 1 so if we<font color="#E5E5E5"> find a</font><font color="#CCCCCC"> match which</font>

300
00:11:05,350 --> 00:11:10,300
could be boo dogs we yeah<font color="#E5E5E5"> we set the</font>

301
00:11:08,260 --> 00:11:11,620
flag<font color="#E5E5E5"> PFLAG and then it chooses not to</font>

302
00:11:10,300 --> 00:11:13,689
<font color="#E5E5E5">print the</font><font color="#CCCCCC"> environment variable here</font>

303
00:11:11,620 --> 00:11:15,820
so if<font color="#E5E5E5"> P flag is not set we print</font>

304
00:11:13,690 --> 00:11:18,430
<font color="#CCCCCC">enviable</font><font color="#E5E5E5"> so if it is said it won't print</font>

305
00:11:15,820 --> 00:11:21,040
it<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then we will just</font><font color="#E5E5E5"> print the</font><font color="#CCCCCC"> hard</font>

306
00:11:18,430 --> 00:11:22,449
<font color="#CCCCCC">coded</font><font color="#E5E5E5"> environment variables</font><font color="#CCCCCC"> here in this</font>

307
00:11:21,040 --> 00:11:25,360
case there are two environment variables

308
00:11:22,450 --> 00:11:28,390
but so we there<font color="#CCCCCC"> are thinking</font>

309
00:11:25,360 --> 00:11:29,890
alphabetically-ordered<font color="#E5E5E5"> so you can just</font>

310
00:11:28,390 --> 00:11:32,410
<font color="#E5E5E5">basically find out which number is</font>

311
00:11:29,890 --> 00:11:33,910
<font color="#CCCCCC">associated with</font><font color="#E5E5E5"> which we are which with</font>

312
00:11:32,410 --> 00:11:36,339
which<font color="#E5E5E5"> environment variable and then</font><font color="#CCCCCC"> you</font>

313
00:11:33,910 --> 00:11:39,100
can use<font color="#CCCCCC"> a listing like</font><font color="#E5E5E5"> this - yeah</font><font color="#CCCCCC"> hard</font>

314
00:11:36,340 --> 00:11:41,590
<font color="#CCCCCC">code print</font><font color="#E5E5E5"> Buddha the environment</font>

315
00:11:39,100 --> 00:11:43,180
<font color="#CCCCCC">variable sorry another</font><font color="#E5E5E5"> French yeah</font>

316
00:11:41,590 --> 00:11:45,940
another<font color="#E5E5E5"> function we</font><font color="#CCCCCC"> used was the boot</font>

317
00:11:43,180 --> 00:11:48,880
<font color="#CCCCCC">CMD very variable what we did is we</font>

318
00:11:45,940 --> 00:11:51,250
<font color="#E5E5E5">override the the</font><font color="#CCCCCC"> boot CMD in the</font><font color="#E5E5E5"> source</font>

319
00:11:48,880 --> 00:11:53,470
code<font color="#CCCCCC"> because as I explained the boot</font>

320
00:11:51,250 --> 00:11:55,960
<font color="#E5E5E5">seemly is the first command that</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> is</font>

321
00:11:53,470 --> 00:11:58,540
executed when<font color="#CCCCCC"> the device boots</font><font color="#E5E5E5"> and what</font>

322
00:11:55,960 --> 00:12:00,790
we did<font color="#E5E5E5"> here is that we we overrode in</font>

323
00:11:58,540 --> 00:12:05,770
source the boot CMD command<font color="#E5E5E5"> with our</font>

324
00:12:00,790 --> 00:12:08,170
<font color="#CCCCCC">without do boot yeah you boot script</font><font color="#E5E5E5"> so</font>

325
00:12:05,770 --> 00:12:10,750
when a device will first boot it will

326
00:12:08,170 --> 00:12:14,140
just see if our server<font color="#CCCCCC"> is alive</font><font color="#E5E5E5"> and when</font>

327
00:12:10,750 --> 00:12:16,900
our server is alive it will it will then

328
00:12:14,140 --> 00:12:18,760
download our<font color="#CCCCCC"> backdoored kernel image and</font>

329
00:12:16,900 --> 00:12:20,470
it will boot that instead and if our

330
00:12:18,760 --> 00:12:22,030
server is not alive the device will just

331
00:12:20,470 --> 00:12:27,250
continue booting<font color="#E5E5E5"> I have a demo where I</font>

332
00:12:22,030 --> 00:12:28,810
can show this<font color="#CCCCCC"> a later stage so yeah the</font>

333
00:12:27,250 --> 00:12:29,820
<font color="#E5E5E5">you boot environment</font><font color="#CCCCCC"> stop string with an</font>

334
00:12:28,810 --> 00:12:32,770
interesting feature

335
00:12:29,820 --> 00:12:34,180
<font color="#CCCCCC">despite some Google searches that might</font>

336
00:12:32,770 --> 00:12:37,329
tell you that<font color="#E5E5E5"> this is a security feature</font>

337
00:12:34,180 --> 00:12:38,680
<font color="#E5E5E5">it is not a security feature if you</font>

338
00:12:37,330 --> 00:12:41,230
would set an environment stop string

339
00:12:38,680 --> 00:12:44,020
like a<font color="#CCCCCC"> super secret if someone managed</font>

340
00:12:41,230 --> 00:12:45,400
to dump<font color="#E5E5E5"> the flash of your chip they can</font>

341
00:12:44,020 --> 00:12:48,310
run strings on the image<font color="#E5E5E5"> and they could</font>

342
00:12:45,400 --> 00:12:49,270
<font color="#E5E5E5">just see the</font><font color="#CCCCCC"> password so this is</font><font color="#E5E5E5"> not a</font>

343
00:12:48,310 --> 00:12:50,890
security feature it's just an

344
00:12:49,270 --> 00:12:52,120
<font color="#CCCCCC">inconvenience for people that want</font><font color="#E5E5E5"> to</font>

345
00:12:50,890 --> 00:12:53,560
<font color="#E5E5E5">protect the yeah they want to protect</font>

346
00:12:52,120 --> 00:12:55,540
<font color="#CCCCCC">the bootloader so</font><font color="#E5E5E5"> it is an</font><font color="#CCCCCC"> inconvenience</font>

347
00:12:53,560 --> 00:12:57,400
for<font color="#E5E5E5"> us researches</font><font color="#CCCCCC"> that we have to dump</font>

348
00:12:55,540 --> 00:13:00,040
the flash<font color="#CCCCCC"> in order to get this cat</font>

349
00:12:57,400 --> 00:13:01,770
access to the bootloader<font color="#CCCCCC"> what we did we</font>

350
00:13:00,040 --> 00:13:04,719
<font color="#E5E5E5">change this password feature of it and</font>

351
00:13:01,770 --> 00:13:06,040
when when a guy<font color="#E5E5E5"> wants</font><font color="#CCCCCC"> or ago someone</font>

352
00:13:04,720 --> 00:13:09,430
once<font color="#CCCCCC"> they access the</font><font color="#E5E5E5"> bootloader and</font>

353
00:13:06,040 --> 00:13:11,800
types like<font color="#E5E5E5"> any key it will wipe the</font>

354
00:13:09,430 --> 00:13:13,660
entire flash image so that<font color="#E5E5E5"> people don't</font>

355
00:13:11,800 --> 00:13:15,370
want to do for<font color="#E5E5E5"> Essex</font>

356
00:13:13,660 --> 00:13:18,010
<font color="#CCCCCC">they</font><font color="#E5E5E5"> yeah it can get to our device</font>

357
00:13:15,370 --> 00:13:20,320
because we just<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> we wipe it</font><font color="#E5E5E5"> so what</font>

358
00:13:18,010 --> 00:13:22,569
it<font color="#CCCCCC"> will do usually it will boot and then</font>

359
00:13:20,320 --> 00:13:24,520
it will prompt you for a key and<font color="#E5E5E5"> if you</font>

360
00:13:22,570 --> 00:13:25,450
press a key or a password<font color="#CCCCCC"> you'll get to</font>

361
00:13:24,520 --> 00:13:26,800
the bootloader<font color="#CCCCCC"> and if you</font>

362
00:13:25,450 --> 00:13:28,750
press<font color="#E5E5E5"> the key or password you will just</font>

363
00:13:26,800 --> 00:13:30,790
continue<font color="#E5E5E5"> booting so yeah the moment you</font>

364
00:13:28,750 --> 00:13:33,880
<font color="#E5E5E5">press a key in our case it will start</font>

365
00:13:30,790 --> 00:13:36,280
wiping the flesh<font color="#CCCCCC"> what we also did is</font>

366
00:13:33,880 --> 00:13:37,450
hiding<font color="#E5E5E5"> from strings because as I said if</font>

367
00:13:36,280 --> 00:13:39,839
<font color="#CCCCCC">you run strings</font><font color="#E5E5E5"> within a normal</font>

368
00:13:37,450 --> 00:13:43,740
environment variable you can just see it

369
00:13:39,840 --> 00:13:45,910
<font color="#E5E5E5">so I made a mate we made a byte array</font>

370
00:13:43,740 --> 00:13:48,640
<font color="#CCCCCC">what you can see here you see</font><font color="#E5E5E5"> like the</font>

371
00:13:45,910 --> 00:13:50,949
character array is<font color="#E5E5E5"> called stop</font><font color="#CCCCCC"> well it's</font>

372
00:13:48,640 --> 00:13:53,980
basically a<font color="#CCCCCC"> ascii encoded string which</font>

373
00:13:50,950 --> 00:13:55,600
says super secret and then we<font color="#CCCCCC"> use</font><font color="#E5E5E5"> Moloch</font>

374
00:13:53,980 --> 00:13:58,390
and<font color="#E5E5E5"> string copy to put that in the</font>

375
00:13:55,600 --> 00:14:00,280
environment<font color="#CCCCCC"> stops being variable so what</font>

376
00:13:58,390 --> 00:14:01,540
this ends up<font color="#E5E5E5"> doing is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> when you</font><font color="#CCCCCC"> are</font>

377
00:14:00,280 --> 00:14:03,610
reversing<font color="#E5E5E5"> the image server running</font>

378
00:14:01,540 --> 00:14:06,430
strings you you won't see anything<font color="#E5E5E5"> but</font>

379
00:14:03,610 --> 00:14:08,530
instead you will see like<font color="#E5E5E5"> shown below</font>

380
00:14:06,430 --> 00:14:12,160
you will see individual bytes being

381
00:14:08,530 --> 00:14:14,170
moved into<font color="#CCCCCC"> a string</font><font color="#E5E5E5"> and it's harder to</font>

382
00:14:12,160 --> 00:14:16,719
<font color="#E5E5E5">reverse it that way</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> if you would</font>

383
00:14:14,170 --> 00:14:18,939
<font color="#E5E5E5">if you if you would get to</font><font color="#CCCCCC"> that part you</font>

384
00:14:16,720 --> 00:14:20,680
can obviously see it like getting all

385
00:14:18,940 --> 00:14:24,750
<font color="#E5E5E5">the bytes individually but yeah running</font>

386
00:14:20,680 --> 00:14:27,609
strings and finding it is<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of hard</font>

387
00:14:24,750 --> 00:14:30,220
<font color="#E5E5E5">and I'm gonna show you how we</font><font color="#CCCCCC"> bypass the</font>

388
00:14:27,610 --> 00:14:32,650
<font color="#CCCCCC">environment</font><font color="#E5E5E5"> stop string variable</font><font color="#CCCCCC"> we will</font>

389
00:14:30,220 --> 00:14:34,810
do this<font color="#E5E5E5"> by glitching a data in pin</font><font color="#CCCCCC"> in</font>

390
00:14:32,650 --> 00:14:37,959
the demo you'll see<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> will I</font><font color="#E5E5E5"> will</font>

391
00:14:34,810 --> 00:14:39,219
pull<font color="#CCCCCC"> to blue wires apart and at the</font>

392
00:14:37,960 --> 00:14:43,840
<font color="#E5E5E5">moment we're trying to boot the kernel</font>

393
00:14:39,220 --> 00:14:45,400
<font color="#E5E5E5">so what happens is that when</font><font color="#CCCCCC"> you when</font>

394
00:14:43,840 --> 00:14:47,470
you're booting the device it first<font color="#CCCCCC"> loads</font>

395
00:14:45,400 --> 00:14:49,600
<font color="#E5E5E5">the bootloader in memory and then it</font>

396
00:14:47,470 --> 00:14:51,310
tries<font color="#CCCCCC"> to boot the kernel</font><font color="#E5E5E5"> and right when</font>

397
00:14:49,600 --> 00:14:54,310
it tries to boot the kernel we just pull

398
00:14:51,310 --> 00:14:55,479
<font color="#E5E5E5">apart two wires and it fills the you</font>

399
00:14:54,310 --> 00:14:58,180
<font color="#E5E5E5">would will</font><font color="#CCCCCC"> fail and</font><font color="#E5E5E5"> it will fall</font><font color="#CCCCCC"> back</font>

400
00:14:55,480 --> 00:14:59,860
<font color="#E5E5E5">into the bootloader menu</font><font color="#CCCCCC"> so yeah</font><font color="#E5E5E5"> it is</font>

401
00:14:58,180 --> 00:15:05,739
for<font color="#CCCCCC"> a password protection mechanism that</font>

402
00:14:59,860 --> 00:15:09,370
is yeah<font color="#E5E5E5"> that's not not very very good at</font>

403
00:15:05,740 --> 00:15:11,740
the demo there III brought the device to

404
00:15:09,370 --> 00:15:13,870
<font color="#E5E5E5">India with me but yeah when I was</font>

405
00:15:11,740 --> 00:15:15,940
preparing<font color="#E5E5E5"> my my talk just just a couple</font>

406
00:15:13,870 --> 00:15:17,320
minutes<font color="#E5E5E5"> ago I found out it doesn't work</font>

407
00:15:15,940 --> 00:15:19,840
but if you want<font color="#CCCCCC"> to have a</font><font color="#E5E5E5"> look at it</font>

408
00:15:17,320 --> 00:15:23,170
later<font color="#CCCCCC"> yeah I can show you you see</font><font color="#E5E5E5"> what</font>

409
00:15:19,840 --> 00:15:26,950
it<font color="#CCCCCC"> does</font><font color="#E5E5E5"> you see the demo now on the</font>

410
00:15:23,170 --> 00:15:30,420
screen yeah<font color="#E5E5E5"> so let me explain what</font>

411
00:15:26,950 --> 00:15:34,350
happens yet<font color="#E5E5E5"> so yeah we just</font><font color="#CCCCCC"> cool it and</font>

412
00:15:30,420 --> 00:15:36,660
we we have access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> bootloader</font>

413
00:15:34,350 --> 00:15:38,970
so this is also a<font color="#E5E5E5"> method that works on</font>

414
00:15:36,660 --> 00:15:40,560
on devices<font color="#E5E5E5"> you get like tp-link for</font>

415
00:15:38,970 --> 00:15:42,270
instance as a as a<font color="#CCCCCC"> pass face and</font>

416
00:15:40,560 --> 00:15:44,339
environment<font color="#CCCCCC"> substring</font><font color="#E5E5E5"> if you just glitch</font>

417
00:15:42,270 --> 00:15:46,319
<font color="#E5E5E5">data out pin</font><font color="#CCCCCC"> when it tries to boot the</font>

418
00:15:44,340 --> 00:15:49,020
kernel<font color="#E5E5E5"> you can get into a bootloader you</font>

419
00:15:46,320 --> 00:15:50,460
can just set one<font color="#CCCCCC"> of the Bulldogs to</font><font color="#E5E5E5"> the</font>

420
00:15:49,020 --> 00:15:52,079
kernel<font color="#E5E5E5"> and it is been bash like you</font>

421
00:15:50,460 --> 00:15:53,760
would do on a normal<font color="#E5E5E5"> Linux system and</font>

422
00:15:52,080 --> 00:15:55,450
you can get an immediate root shell on

423
00:15:53,760 --> 00:16:01,569
the device

424
00:15:55,450 --> 00:16:03,620
so so yeah now we added<font color="#E5E5E5"> some</font><font color="#CCCCCC"> features</font>

425
00:16:01,570 --> 00:16:06,350
<font color="#CCCCCC">we're just going to compile the boot kit</font>

426
00:16:03,620 --> 00:16:07,940
so<font color="#E5E5E5"> you it's very important to add your</font>

427
00:16:06,350 --> 00:16:09,730
<font color="#E5E5E5">tool chain to the</font><font color="#CCCCCC"> pad because otherwise</font>

428
00:16:07,940 --> 00:16:12,800
you'll try to<font color="#E5E5E5"> compile the boot kid with</font>

429
00:16:09,730 --> 00:16:15,710
x86<font color="#CCCCCC"> races and</font><font color="#E5E5E5"> yeah it will</font><font color="#CCCCCC"> probably not</font>

430
00:16:12,800 --> 00:16:18,140
work<font color="#E5E5E5"> so we first export the tool chain</font>

431
00:16:15,710 --> 00:16:19,370
directory and add it<font color="#E5E5E5"> to our path then we</font>

432
00:16:18,140 --> 00:16:21,590
just make<font color="#CCCCCC"> a boot kit and if it's</font>

433
00:16:19,370 --> 00:16:23,630
successful<font color="#E5E5E5"> you can see some</font><font color="#CCCCCC"> bin</font><font color="#E5E5E5"> walk</font>

434
00:16:21,590 --> 00:16:26,570
<font color="#E5E5E5">output so you could see the</font><font color="#CCCCCC"> you image</font>

435
00:16:23,630 --> 00:16:28,189
header you<font color="#CCCCCC"> can see the name of the image</font>

436
00:16:26,570 --> 00:16:30,010
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can see the type of</font><font color="#E5E5E5"> compression</font>

437
00:16:28,190 --> 00:16:32,480
<font color="#E5E5E5">that's use you can see the data</font><font color="#CCCCCC"> address</font>

438
00:16:30,010 --> 00:16:34,580
and<font color="#E5E5E5"> yet some other signatures like the</font>

439
00:16:32,480 --> 00:16:38,270
<font color="#E5E5E5">LC may compress signature and also just</font>

440
00:16:34,580 --> 00:16:39,710
a version<font color="#E5E5E5"> string so yeah when you</font>

441
00:16:38,270 --> 00:16:41,300
compile the boot kit you<font color="#E5E5E5"> want to plant</font>

442
00:16:39,710 --> 00:16:44,450
the boot kit and I this<font color="#E5E5E5"> is where</font><font color="#CCCCCC"> I get</font>

443
00:16:41,300 --> 00:16:46,880
interesting<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Linux kernel treats</font>

444
00:16:44,450 --> 00:16:48,620
devices<font color="#CCCCCC"> with raw flesh as memory</font>

445
00:16:46,880 --> 00:16:50,120
technology<font color="#E5E5E5"> devices so it's not a normal</font>

446
00:16:48,620 --> 00:16:52,310
<font color="#E5E5E5">block device there are some different</font>

447
00:16:50,120 --> 00:16:54,380
differences between block devices<font color="#E5E5E5"> and</font>

448
00:16:52,310 --> 00:16:56,329
memory technology devices<font color="#E5E5E5"> and</font><font color="#CCCCCC"> one of</font>

449
00:16:54,380 --> 00:16:58,580
them is for<font color="#E5E5E5"> instance that there's arrays</font>

450
00:16:56,330 --> 00:17:01,910
blocks that flash devices<font color="#E5E5E5"> use are much</font>

451
00:16:58,580 --> 00:17:05,240
larger than sectors on block drives and

452
00:17:01,910 --> 00:17:07,520
also<font color="#E5E5E5"> the difference between one</font><font color="#CCCCCC"> of the</font>

453
00:17:05,240 --> 00:17:08,089
differences<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> when you erase a</font>

454
00:17:07,520 --> 00:17:09,410
block

455
00:17:08,089 --> 00:17:12,260
it's basically the same as<font color="#CCCCCC"> a write</font>

456
00:17:09,410 --> 00:17:14,390
operation<font color="#E5E5E5"> and when you try</font><font color="#CCCCCC"> to remove a</font>

457
00:17:12,260 --> 00:17:16,430
block or something<font color="#E5E5E5"> from from a from a</font>

458
00:17:14,390 --> 00:17:18,020
block<font color="#CCCCCC"> drive</font><font color="#E5E5E5"> it just your</font><font color="#CCCCCC"> DL locates it</font>

459
00:17:16,430 --> 00:17:19,970
and then later on<font color="#CCCCCC"> you just</font><font color="#E5E5E5"> override it</font>

460
00:17:18,020 --> 00:17:21,740
<font color="#E5E5E5">but with flash</font><font color="#CCCCCC"> devices</font><font color="#E5E5E5"> when you erase</font>

461
00:17:19,970 --> 00:17:23,780
something<font color="#E5E5E5"> you actually write zeros to it</font>

462
00:17:21,740 --> 00:17:26,150
and it will be<font color="#CCCCCC"> erase</font><font color="#E5E5E5"> or F it depends on</font>

463
00:17:23,780 --> 00:17:28,099
<font color="#E5E5E5">the implementation and the memory</font>

464
00:17:26,150 --> 00:17:30,590
technology device layer is a layer that

465
00:17:28,099 --> 00:17:32,360
<font color="#CCCCCC">is yeah on top</font><font color="#E5E5E5"> of the raw flesh which is</font>

466
00:17:30,590 --> 00:17:34,129
a layer<font color="#CCCCCC"> of abstraction and</font><font color="#E5E5E5"> on that</font>

467
00:17:32,360 --> 00:17:36,590
abstraction<font color="#E5E5E5"> layer you'll have the normal</font>

468
00:17:34,130 --> 00:17:38,750
<font color="#CCCCCC">file system utilities so but Linux does</font>

469
00:17:36,590 --> 00:17:41,570
it<font color="#E5E5E5"> anyways a block</font><font color="#CCCCCC"> device</font><font color="#E5E5E5"> for you to</font>

470
00:17:38,750 --> 00:17:43,880
work with memory technology devices<font color="#CCCCCC"> this</font>

471
00:17:41,570 --> 00:17:45,590
<font color="#CCCCCC">is</font><font color="#E5E5E5"> when you are on a memory technology</font>

472
00:17:43,880 --> 00:17:48,560
device it<font color="#E5E5E5"> will be a pro country called</font>

473
00:17:45,590 --> 00:17:50,240
<font color="#CCCCCC">MTD</font><font color="#E5E5E5"> and when you cut MTD you will see as</font>

474
00:17:48,560 --> 00:17:51,830
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> see here all the devices and</font>

475
00:17:50,240 --> 00:17:55,370
then the device names and the size of

476
00:17:51,830 --> 00:17:58,129
the<font color="#E5E5E5"> device the partition and also the</font>

477
00:17:55,370 --> 00:18:00,169
array size<font color="#E5E5E5"> of the partition</font><font color="#CCCCCC"> and as you</font>

478
00:17:58,130 --> 00:18:05,690
can see<font color="#E5E5E5"> MTD 0 is where we want to be</font><font color="#CCCCCC"> its</font>

479
00:18:00,170 --> 00:18:07,070
<font color="#E5E5E5">MTV is you would petition</font><font color="#CCCCCC"> and yeah we</font>

480
00:18:05,690 --> 00:18:08,420
<font color="#E5E5E5">just hope that we could just immediately</font>

481
00:18:07,070 --> 00:18:09,200
<font color="#E5E5E5">write to the you would</font><font color="#CCCCCC"> petition but</font>

482
00:18:08,420 --> 00:18:12,830
unfortunately

483
00:18:09,200 --> 00:18:15,500
that didn't<font color="#E5E5E5"> happen</font><font color="#CCCCCC"> because the</font><font color="#E5E5E5"> colonel</font>

484
00:18:12,830 --> 00:18:18,560
<font color="#E5E5E5">and forces are several flags on the MTV</font>

485
00:18:15,500 --> 00:18:22,310
<font color="#CCCCCC">flags</font><font color="#E5E5E5"> and as you can see</font><font color="#CCCCCC"> here the MTD</font>

486
00:18:18,560 --> 00:18:25,909
<font color="#E5E5E5">parts</font><font color="#CCCCCC"> section it contains all the</font>

487
00:18:22,310 --> 00:18:28,300
<font color="#E5E5E5">petitions</font><font color="#CCCCCC"> that you could see here and it</font>

488
00:18:25,910 --> 00:18:31,010
<font color="#CCCCCC">specifies in a</font><font color="#E5E5E5"> read only flag on them</font>

489
00:18:28,300 --> 00:18:33,950
<font color="#CCCCCC">but</font><font color="#E5E5E5"> luckily</font><font color="#CCCCCC"> for us this is enforced by</font>

490
00:18:31,010 --> 00:18:37,310
<font color="#CCCCCC">the colonel</font><font color="#E5E5E5"> so some guy already made a</font>

491
00:18:33,950 --> 00:18:39,350
tool called<font color="#E5E5E5"> MTD or W which is a it's the</font>

492
00:18:37,310 --> 00:18:42,649
loadable kernel module and<font color="#E5E5E5"> what it does</font>

493
00:18:39,350 --> 00:18:44,959
it overrides<font color="#E5E5E5"> the writable flag on all</font>

494
00:18:42,650 --> 00:18:48,860
these MTD partitions<font color="#E5E5E5"> and basically makes</font>

495
00:18:44,960 --> 00:18:53,090
it writable so here you<font color="#E5E5E5"> can see part</font><font color="#CCCCCC"> of</font>

496
00:18:48,860 --> 00:18:56,209
the code<font color="#CCCCCC"> so basically what the code does</font>

497
00:18:53,090 --> 00:18:59,389
it iterates through the MTD<font color="#CCCCCC"> Flags</font><font color="#E5E5E5"> and it</font>

498
00:18:56,210 --> 00:19:01,790
will do<font color="#E5E5E5"> an and when</font><font color="#CCCCCC"> it's yeah it will do</font>

499
00:18:59,390 --> 00:19:03,350
<font color="#E5E5E5">an I think in binary or operation when</font>

500
00:19:01,790 --> 00:19:05,360
it wants to set the MTD<font color="#CCCCCC"> rideable flag</font>

501
00:19:03,350 --> 00:19:07,820
and then when you want to unset it it

502
00:19:05,360 --> 00:19:09,709
does a binary<font color="#E5E5E5"> and not operation and then</font>

503
00:19:07,820 --> 00:19:12,770
it<font color="#E5E5E5"> just resets the flag as is what it</font>

504
00:19:09,710 --> 00:19:14,330
<font color="#CCCCCC">usually was so in order to make this</font>

505
00:19:12,770 --> 00:19:16,190
<font color="#CCCCCC">work you need</font><font color="#E5E5E5"> to again compile this</font>

506
00:19:14,330 --> 00:19:18,020
kernel module<font color="#CCCCCC"> with your cross compile</font>

507
00:19:16,190 --> 00:19:19,580
tool chain and then<font color="#E5E5E5"> you can get it on</font>

508
00:19:18,020 --> 00:19:21,889
the<font color="#CCCCCC"> device</font><font color="#E5E5E5"> usually you can get it on the</font>

509
00:19:19,580 --> 00:19:23,720
<font color="#CCCCCC">revisers</font><font color="#E5E5E5"> SSH or with</font><font color="#CCCCCC"> end cut and if you</font>

510
00:19:21,890 --> 00:19:25,670
<font color="#E5E5E5">the device you trying</font><font color="#CCCCCC"> to compromise is</font>

511
00:19:23,720 --> 00:19:29,030
<font color="#CCCCCC">open WT you can just</font><font color="#E5E5E5"> install this with</font>

512
00:19:25,670 --> 00:19:30,830
your open<font color="#CCCCCC"> TT package manager and as you</font>

513
00:19:29,030 --> 00:19:32,210
can<font color="#CCCCCC"> see here you can just</font><font color="#E5E5E5"> do an</font>

514
00:19:30,830 --> 00:19:33,919
instrument and<font color="#E5E5E5"> then it will say like no</font>

515
00:19:32,210 --> 00:19:35,780
no in<font color="#E5E5E5"> order to make this work</font><font color="#CCCCCC"> you need</font>

516
00:19:33,920 --> 00:19:38,990
<font color="#CCCCCC">to explicitly say that</font><font color="#E5E5E5"> you want to break</font>

517
00:19:35,780 --> 00:19:41,480
so you need to do in<font color="#CCCCCC"> smote and then I</font>

518
00:19:38,990 --> 00:19:42,890
want a break<font color="#E5E5E5"> equals</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> so it's like a</font>

519
00:19:41,480 --> 00:19:44,570
disclaimer and then as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see when</font>

520
00:19:42,890 --> 00:19:46,430
it's successful<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> clear the right</font>

521
00:19:44,570 --> 00:19:48,439
of it will add the writable flag to all

522
00:19:46,430 --> 00:19:49,730
<font color="#CCCCCC">other petitions and then when we want</font><font color="#E5E5E5"> to</font>

523
00:19:48,440 --> 00:19:53,210
write our<font color="#CCCCCC"> backdoor to the</font><font color="#E5E5E5"> you would</font>

524
00:19:49,730 --> 00:19:56,150
<font color="#E5E5E5">petition</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> successful so this is very</font>

525
00:19:53,210 --> 00:19:58,310
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> because on normal devices I</font>

526
00:19:56,150 --> 00:20:00,110
mean you shouldn't<font color="#E5E5E5"> be able to write</font>

527
00:19:58,310 --> 00:20:02,899
directly<font color="#CCCCCC"> to the bootloader</font><font color="#E5E5E5"> right I mean</font>

528
00:20:00,110 --> 00:20:05,060
back in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> days we had a we</font><font color="#CCCCCC"> had a I had</font>

529
00:20:02,900 --> 00:20:07,220
a motherboard at home and if I wanted<font color="#CCCCCC"> to</font>

530
00:20:05,060 --> 00:20:09,500
<font color="#E5E5E5">do something</font><font color="#CCCCCC"> to my</font><font color="#E5E5E5"> SPI flash bios I just</font>

531
00:20:07,220 --> 00:20:12,020
had to remove a jumper but<font color="#CCCCCC"> because</font>

532
00:20:09,500 --> 00:20:14,930
jumpers are so expensive<font color="#CCCCCC"> yeah</font>

533
00:20:12,020 --> 00:20:17,300
these attacks are now<font color="#E5E5E5"> now possible</font><font color="#CCCCCC"> so</font>

534
00:20:14,930 --> 00:20:18,770
now do<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to boot get in place we</font>

535
00:20:17,300 --> 00:20:20,870
want to have a<font color="#CCCCCC"> persistent method</font><font color="#E5E5E5"> so you</font>

536
00:20:18,770 --> 00:20:23,060
can do several things<font color="#E5E5E5"> and one of the</font>

537
00:20:20,870 --> 00:20:25,520
things that we did is we created<font color="#E5E5E5"> an</font>

538
00:20:23,060 --> 00:20:27,350
in<font color="#E5E5E5"> Islam</font><font color="#CCCCCC"> Rama Fez so we created a</font>

539
00:20:25,520 --> 00:20:29,990
malicious<font color="#CCCCCC"> kernel and we can add any</font><font color="#E5E5E5"> file</font>

540
00:20:27,350 --> 00:20:32,330
to it we can add<font color="#CCCCCC"> any kernel module to it</font>

541
00:20:29,990 --> 00:20:35,120
and then we we serve it with<font color="#CCCCCC"> our</font><font color="#E5E5E5"> c2</font>

542
00:20:32,330 --> 00:20:37,970
server and our<font color="#CCCCCC"> suitor</font><font color="#E5E5E5"> server is nothing</font>

543
00:20:35,120 --> 00:20:40,040
more than<font color="#CCCCCC"> a TFTP script</font><font color="#E5E5E5"> which which</font>

544
00:20:37,970 --> 00:20:41,840
<font color="#E5E5E5">expects a ping</font><font color="#CCCCCC"> from the router and</font><font color="#E5E5E5"> then</font>

545
00:20:40,040 --> 00:20:44,060
when<font color="#CCCCCC"> the</font><font color="#E5E5E5"> router</font><font color="#CCCCCC"> so it's like hey how are</font>

546
00:20:41,840 --> 00:20:46,639
you<font color="#E5E5E5"> alive and then we say</font><font color="#CCCCCC"> yay we</font><font color="#E5E5E5"> are</font>

547
00:20:44,060 --> 00:20:48,139
alive and then the<font color="#CCCCCC"> TFTP command comes in</font>

548
00:20:46,640 --> 00:20:50,120
and then it<font color="#E5E5E5"> you know pulls the kernel</font>

549
00:20:48,140 --> 00:20:52,400
from<font color="#E5E5E5"> our TTP boot and yet with the</font>

550
00:20:50,120 --> 00:20:55,790
kernel<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is a great precision</font>

551
00:20:52,400 --> 00:20:57,890
method because<font color="#CCCCCC"> you basically bypass</font><font color="#E5E5E5"> the</font>

552
00:20:55,790 --> 00:21:00,440
entire<font color="#E5E5E5"> brain system we just load a</font>

553
00:20:57,890 --> 00:21:02,000
custom kernel and then we mount the

554
00:21:00,440 --> 00:21:04,040
actual petition<font color="#E5E5E5"> from the device and</font><font color="#CCCCCC"> we</font>

555
00:21:02,000 --> 00:21:06,080
just kick<font color="#E5E5E5"> off the in it there and it</font>

556
00:21:04,040 --> 00:21:07,790
will just<font color="#E5E5E5"> be</font><font color="#CCCCCC"> like a normal</font><font color="#E5E5E5"> advice but it</font>

557
00:21:06,080 --> 00:21:09,020
has our malicious kernel<font color="#E5E5E5"> so it does</font>

558
00:21:07,790 --> 00:21:11,540
everything<font color="#CCCCCC"> that the device used</font><font color="#E5E5E5"> to do</font>

559
00:21:09,020 --> 00:21:13,310
but yeah we own the kernel<font color="#E5E5E5"> and we can</font>

560
00:21:11,540 --> 00:21:16,909
put any file in<font color="#CCCCCC"> there and it's yeah</font>

561
00:21:13,310 --> 00:21:18,440
<font color="#CCCCCC">pretty bad so now I</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> show</font><font color="#E5E5E5"> ya I</font>

562
00:21:16,910 --> 00:21:21,110
wanted to show<font color="#E5E5E5"> you the demo but luckily</font>

563
00:21:18,440 --> 00:21:26,060
I made<font color="#E5E5E5"> a video and the</font><font color="#CCCCCC"> video will show</font>

564
00:21:21,110 --> 00:21:30,879
you the<font color="#E5E5E5"> boot kit in action</font><font color="#CCCCCC"> before we</font>

565
00:21:26,060 --> 00:21:30,879
start and go to explain<font color="#E5E5E5"> this place here</font>

566
00:21:32,410 --> 00:21:39,560
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so it's there I guess I hope so</font>

567
00:21:38,090 --> 00:21:41,899
the<font color="#E5E5E5"> buff screen is the serial connection</font>

568
00:21:39,560 --> 00:21:43,460
that we have with with<font color="#CCCCCC"> the router and as</font>

569
00:21:41,900 --> 00:21:45,440
you can<font color="#CCCCCC"> see here when we</font><font color="#E5E5E5"> try to ping our</font>

570
00:21:43,460 --> 00:21:47,270
c2 server the network is unavailable

571
00:21:45,440 --> 00:21:50,930
<font color="#CCCCCC">because yeah the interface is</font><font color="#E5E5E5"> not set up</font>

572
00:21:47,270 --> 00:21:52,460
<font color="#E5E5E5">so the device did a ping the c2 server</font>

573
00:21:50,930 --> 00:21:55,640
did<font color="#E5E5E5"> not respond so it just boosts the</font>

574
00:21:52,460 --> 00:21:57,770
normal the normal kernel image which<font color="#CCCCCC"> is</font>

575
00:21:55,640 --> 00:21:59,780
the basic<font color="#E5E5E5"> open wt1 for the</font><font color="#CCCCCC"> ji aligner</font>

576
00:21:57,770 --> 00:22:02,720
device<font color="#E5E5E5"> and here you can see the kernels</font>

577
00:21:59,780 --> 00:22:05,000
compiled in 2017 it's a<font color="#CCCCCC"> tree 18 point</font><font color="#E5E5E5"> 27</font>

578
00:22:02,720 --> 00:22:07,280
<font color="#E5E5E5">and we reboot the device</font><font color="#CCCCCC"> we start our</font>

579
00:22:05,000 --> 00:22:09,890
<font color="#CCCCCC">TFTP server and yeah it interfaces</font><font color="#E5E5E5"> up so</font>

580
00:22:07,280 --> 00:22:12,560
you can see the ping response and then

581
00:22:09,890 --> 00:22:14,600
the device reboots<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's like oh wait</font>

582
00:22:12,560 --> 00:22:17,899
<font color="#CCCCCC">I</font><font color="#E5E5E5"> have a ping response and then it will</font>

583
00:22:14,600 --> 00:22:20,120
kick off the<font color="#CCCCCC"> TFTP server</font><font color="#E5E5E5"> it takes a</font>

584
00:22:17,900 --> 00:22:23,090
while of course<font color="#E5E5E5"> to boot</font><font color="#CCCCCC"> this image but</font>

585
00:22:20,120 --> 00:22:27,320
yeah<font color="#E5E5E5"> I think it's maybe a couple seconds</font>

586
00:22:23,090 --> 00:22:33,908
so normal users should<font color="#CCCCCC"> not you</font><font color="#E5E5E5"> know find</font>

587
00:22:27,320 --> 00:22:37,850
out that easily<font color="#CCCCCC"> and then when it's ready</font>

588
00:22:33,909 --> 00:22:40,159
<font color="#CCCCCC">you can see a lovely image that needs to</font>

589
00:22:37,850 --> 00:22:41,899
<font color="#CCCCCC">be back loaded back toward the kernel in</font>

590
00:22:40,159 --> 00:22:45,320
this case this<font color="#CCCCCC"> is our fully weaponized</font>

591
00:22:41,899 --> 00:22:48,289
cyber<font color="#E5E5E5"> toolkit and it's a newer kernel</font>

592
00:22:45,320 --> 00:22:55,820
it's compiled in February<font color="#E5E5E5"> and yeah</font>

593
00:22:48,289 --> 00:22:57,649
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> compromised the device so yeah</font>

594
00:22:55,820 --> 00:22:59,360
what can<font color="#E5E5E5"> you do to to prevent these type</font>

595
00:22:57,649 --> 00:23:03,529
of attacks<font color="#CCCCCC"> well one</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> things that</font>

596
00:22:59,360 --> 00:23:05,119
they<font color="#CCCCCC"> did is being Debian</font><font color="#E5E5E5"> is one</font>

597
00:23:03,529 --> 00:23:07,190
distribution<font color="#CCCCCC"> actually started with</font>

598
00:23:05,119 --> 00:23:09,259
reproducible builds or doing it<font color="#CCCCCC"> on scale</font>

599
00:23:07,190 --> 00:23:12,529
<font color="#E5E5E5">is that yeah you can create a</font>

600
00:23:09,259 --> 00:23:15,440
reproducible<font color="#E5E5E5"> you</font><font color="#CCCCCC"> would image so by for</font>

601
00:23:12,529 --> 00:23:18,860
instance<font color="#E5E5E5"> using</font><font color="#CCCCCC"> compile Flags like</font><font color="#E5E5E5"> source</font>

602
00:23:15,440 --> 00:23:23,090
date<font color="#E5E5E5"> epoch</font><font color="#CCCCCC"> you can create a you can</font>

603
00:23:18,860 --> 00:23:25,158
create a a compiled you<font color="#E5E5E5"> boot image and</font>

604
00:23:23,090 --> 00:23:26,600
you<font color="#CCCCCC"> can basically hash the data sections</font>

605
00:23:25,159 --> 00:23:28,220
and compare it to other you<font color="#E5E5E5"> boot images</font>

606
00:23:26,600 --> 00:23:30,498
and say like okay we have a match here

607
00:23:28,220 --> 00:23:32,210
you know<font color="#E5E5E5"> so for instance what chipset</font>

608
00:23:30,499 --> 00:23:34,639
does is one of the<font color="#E5E5E5"> features chips like</font>

609
00:23:32,210 --> 00:23:37,879
has is that<font color="#E5E5E5"> it can get data from your</font>

610
00:23:34,639 --> 00:23:40,399
<font color="#CCCCCC">Mac</font><font color="#E5E5E5"> OS device or your or your or your I</font>

611
00:23:37,879 --> 00:23:42,080
don't<font color="#CCCCCC"> know your your servers and</font><font color="#E5E5E5"> it just</font>

612
00:23:40,399 --> 00:23:43,850
gets the<font color="#CCCCCC"> ufi and it gets all the data</font>

613
00:23:42,080 --> 00:23:45,590
sections from the<font color="#CCCCCC"> ufi so it's it strips</font>

614
00:23:43,850 --> 00:23:48,408
out the variables like<font color="#E5E5E5"> a MAC address or</font>

615
00:23:45,590 --> 00:23:51,230
a serial<font color="#CCCCCC"> number</font><font color="#E5E5E5"> and it just compares the</font>

616
00:23:48,409 --> 00:23:54,289
data sections with data sections that it

617
00:23:51,230 --> 00:23:55,850
knows<font color="#CCCCCC"> are you know valid a legit so when</font>

618
00:23:54,289 --> 00:23:58,249
you have a<font color="#E5E5E5"> backdoor for instance this</font>

619
00:23:55,850 --> 00:23:59,539
<font color="#CCCCCC">MacBook</font><font color="#E5E5E5"> we run this tool on it had a</font>

620
00:23:58,249 --> 00:24:02,029
writable flag set so you could<font color="#E5E5E5"> write</font>

621
00:23:59,539 --> 00:24:04,039
through<font color="#CCCCCC"> ufi and you see me</font><font color="#E5E5E5"> diseases like</font>

622
00:24:02,029 --> 00:24:05,539
that so if you<font color="#CCCCCC"> could have tools</font><font color="#E5E5E5"> like</font>

623
00:24:04,039 --> 00:24:08,679
this for routers as well then<font color="#E5E5E5"> we could</font>

624
00:24:05,539 --> 00:24:11,330
start<font color="#E5E5E5"> detecting</font><font color="#CCCCCC"> yeah boot kids like this</font>

625
00:24:08,679 --> 00:24:13,909
also secure boot is<font color="#E5E5E5"> very important</font>

626
00:24:11,330 --> 00:24:15,499
because my x86 device has a secure boot

627
00:24:13,909 --> 00:24:17,629
so if you try<font color="#E5E5E5"> to load a malicious kernel</font>

628
00:24:15,499 --> 00:24:19,850
or you try<font color="#E5E5E5"> to load a malicious kernel</font>

629
00:24:17,629 --> 00:24:21,439
module<font color="#E5E5E5"> yeah my device is gonna say like</font>

630
00:24:19,850 --> 00:24:25,248
hell no it's<font color="#E5E5E5"> not signed you cannot do</font>

631
00:24:21,440 --> 00:24:26,600
this<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you would support</font><font color="#E5E5E5"> different</font>

632
00:24:25,249 --> 00:24:28,789
<font color="#E5E5E5">ways of secure boot you</font><font color="#CCCCCC"> can have a</font>

633
00:24:26,600 --> 00:24:30,649
digest which you can implement<font color="#E5E5E5"> into you</font>

634
00:24:28,789 --> 00:24:32,779
boot so it basically checks the hash of

635
00:24:30,649 --> 00:24:34,428
<font color="#E5E5E5">the you</font><font color="#CCCCCC"> good but it</font><font color="#E5E5E5"> can also do a</font>

636
00:24:32,779 --> 00:24:35,940
signature<font color="#CCCCCC"> based one which is very</font><font color="#E5E5E5"> easy</font>

637
00:24:34,429 --> 00:24:39,510
to<font color="#CCCCCC"> implement actually</font>

638
00:24:35,940 --> 00:24:41,310
and then yes<font color="#E5E5E5"> then you can just verify</font>

639
00:24:39,510 --> 00:24:43,710
<font color="#E5E5E5">the</font><font color="#CCCCCC"> UBD emission</font><font color="#E5E5E5"> if it doesn't match you</font>

640
00:24:41,310 --> 00:24:45,570
just don't decide to<font color="#CCCCCC"> do it but one of</font>

641
00:24:43,710 --> 00:24:47,220
the<font color="#E5E5E5"> problems is that there are stuff</font><font color="#CCCCCC"> if</font>

642
00:24:45,570 --> 00:24:49,350
there's no physical impediments or is no

643
00:24:47,220 --> 00:24:50,880
<font color="#CCCCCC">proper TPN module then</font><font color="#E5E5E5"> yeah secure boot</font>

644
00:24:49,350 --> 00:24:52,919
is as strong<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the weakest link</font><font color="#E5E5E5"> in this</font>

645
00:24:50,880 --> 00:24:55,700
case and because we have a root<font color="#CCCCCC"> shell on</font>

646
00:24:52,920 --> 00:24:58,910
the device and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can use</font>

647
00:24:55,700 --> 00:25:01,400
and can maybe<font color="#CCCCCC"> write to the to the boot</font>

648
00:24:58,910 --> 00:25:04,490
<font color="#E5E5E5">petition and this you know replace the</font>

649
00:25:01,400 --> 00:25:06,290
you would enable<font color="#CCCCCC"> bukit bootloader</font><font color="#E5E5E5"> with</font>

650
00:25:04,490 --> 00:25:09,230
our boot<font color="#CCCCCC"> kid which just Sables the</font>

651
00:25:06,290 --> 00:25:10,370
secure boot flag<font color="#CCCCCC"> and also trusted</font><font color="#E5E5E5"> boot</font>

652
00:25:09,230 --> 00:25:11,810
is something that they are<font color="#E5E5E5"> working on</font>

653
00:25:10,370 --> 00:25:13,310
the do boot so where you have a<font color="#CCCCCC"> TPM</font>

654
00:25:11,810 --> 00:25:15,260
module it<font color="#E5E5E5"> basically that's the same as</font>

655
00:25:13,310 --> 00:25:17,270
on<font color="#E5E5E5"> your x86 device it checks the hashes</font>

656
00:25:15,260 --> 00:25:20,120
of of your boot stages and when they add

657
00:25:17,270 --> 00:25:21,520
<font color="#CCCCCC">up you just you just boot but you could</font>

658
00:25:20,120 --> 00:25:24,800
also do<font color="#CCCCCC"> it like</font><font color="#E5E5E5"> what the Chromebooks do</font>

659
00:25:21,520 --> 00:25:27,110
<font color="#E5E5E5">they introduce the right protects crew</font>

660
00:25:24,800 --> 00:25:28,550
<font color="#E5E5E5">or the SPI flash so if you want to flash</font>

661
00:25:27,110 --> 00:25:31,449
your Chromebook<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you want to change</font>

662
00:25:28,550 --> 00:25:33,950
<font color="#CCCCCC">the ufi</font><font color="#E5E5E5"> you just need to unscrew your</font>

663
00:25:31,450 --> 00:25:37,340
yeah the small screw there and<font color="#E5E5E5"> your and</font>

664
00:25:33,950 --> 00:25:38,930
your<font color="#CCCCCC"> SPI</font><font color="#E5E5E5"> petition becomes</font><font color="#CCCCCC"> viable and</font>

665
00:25:37,340 --> 00:25:40,220
yeah this<font color="#E5E5E5"> is great this is basically the</font>

666
00:25:38,930 --> 00:25:41,780
<font color="#E5E5E5">jumper on the</font><font color="#CCCCCC"> motherboard and</font><font color="#E5E5E5"> if</font>

667
00:25:40,220 --> 00:25:43,280
<font color="#E5E5E5">Chromebook can do it I</font><font color="#CCCCCC"> think a lot of</font>

668
00:25:41,780 --> 00:25:46,220
<font color="#E5E5E5">other devices and vendors could also</font>

669
00:25:43,280 --> 00:25:48,920
start<font color="#CCCCCC"> doing this bypassing secure boot</font>

670
00:25:46,220 --> 00:25:52,430
is also possible by just doing<font color="#E5E5E5"> something</font>

671
00:25:48,920 --> 00:25:55,190
weird<font color="#CCCCCC"> you boot disables the verification</font>

672
00:25:52,430 --> 00:25:56,690
when it<font color="#E5E5E5"> cannot find an RSA key so as you</font>

673
00:25:55,190 --> 00:25:58,850
can<font color="#E5E5E5"> see in the code</font><font color="#CCCCCC"> here is that what</font>

674
00:25:56,690 --> 00:26:01,070
the guys did they found out where the

675
00:25:58,850 --> 00:26:03,679
RSA key was in in<font color="#CCCCCC"> the you wood section</font>

676
00:26:01,070 --> 00:26:05,510
and they just did it<font color="#CCCCCC"> with no bytes</font><font color="#E5E5E5"> so</font>

677
00:26:03,680 --> 00:26:07,460
when you were just<font color="#CCCCCC"> trying to find the</font>

678
00:26:05,510 --> 00:26:10,340
<font color="#E5E5E5">RSA key just found nobody it was like oh</font>

679
00:26:07,460 --> 00:26:12,620
<font color="#CCCCCC">what the hell I'll just boot</font><font color="#E5E5E5"> this anyway</font>

680
00:26:10,340 --> 00:26:14,060
and another way of bypassing secure boot

681
00:26:12,620 --> 00:26:15,649
for<font color="#E5E5E5"> you would base devices is by</font>

682
00:26:14,060 --> 00:26:17,030
exploiting a stack overflow which the

683
00:26:15,650 --> 00:26:21,590
you would<font color="#CCCCCC"> project is not intending to</font>

684
00:26:17,030 --> 00:26:23,600
fix is that when you do a TVP boot<font color="#CCCCCC"> they</font>

685
00:26:21,590 --> 00:26:25,730
don't check the bounds of<font color="#CCCCCC"> the TTP</font><font color="#E5E5E5"> boot</font>

686
00:26:23,600 --> 00:26:28,639
image so you<font color="#CCCCCC"> can just</font><font color="#E5E5E5"> create a very long</font>

687
00:26:25,730 --> 00:26:30,200
device<font color="#CCCCCC"> a very long</font><font color="#E5E5E5"> kernel image and you</font>

688
00:26:28,640 --> 00:26:32,800
could just add some shell code at the

689
00:26:30,200 --> 00:26:36,680
very back<font color="#E5E5E5"> and then together with a</font><font color="#CCCCCC"> JPEG</font>

690
00:26:32,800 --> 00:26:39,020
debugger you<font color="#E5E5E5"> could try to bypass</font><font color="#CCCCCC"> secure</font>

691
00:26:36,680 --> 00:26:40,940
boot by making a beautiful<font color="#E5E5E5"> rob chain on</font>

692
00:26:39,020 --> 00:26:42,650
<font color="#CCCCCC">you boot but yes it's a hard method but</font>

693
00:26:40,940 --> 00:26:44,030
some guys actually managed to<font color="#E5E5E5"> pull this</font>

694
00:26:42,650 --> 00:26:46,760
off

695
00:26:44,030 --> 00:26:49,129
yeah secure boot is not<font color="#E5E5E5"> perfect the guys</font>

696
00:26:46,760 --> 00:26:50,930
from<font color="#E5E5E5"> risk here at blackhat gave a talk I</font>

697
00:26:49,130 --> 00:26:52,640
<font color="#E5E5E5">think it's the risk you guys yeah</font><font color="#CCCCCC"> and</font>

698
00:26:50,930 --> 00:26:54,560
they were basically glitching their way

699
00:26:52,640 --> 00:26:56,270
past you boot so yeah if you have<font color="#E5E5E5"> like a</font>

700
00:26:54,560 --> 00:26:57,919
compare one to<font color="#E5E5E5"> see if your signature is</font>

701
00:26:56,270 --> 00:27:00,250
correct then<font color="#E5E5E5"> you know yeah you can just</font>

702
00:26:57,920 --> 00:27:02,330
split your<font color="#E5E5E5"> way to it</font>

703
00:27:00,250 --> 00:27:04,400
what's another problem is that<font color="#E5E5E5"> yet</font>

704
00:27:02,330 --> 00:27:06,050
they're also supply chain attacks<font color="#E5E5E5"> this</font>

705
00:27:04,400 --> 00:27:09,799
happened quite<font color="#E5E5E5"> recently the CC cleaner</font>

706
00:27:06,050 --> 00:27:11,658
attack<font color="#E5E5E5"> it in come</font>

707
00:27:09,799 --> 00:27:13,460
<font color="#CCCCCC">myzel Network</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> Cisco or the website</font>

708
00:27:11,659 --> 00:27:15,279
from Cisco and<font color="#CCCCCC"> Lynx's</font><font color="#E5E5E5"> and I think</font>

709
00:27:13,460 --> 00:27:18,049
tp-link or d-link is in there as well

710
00:27:15,279 --> 00:27:19,369
<font color="#CCCCCC">and if the vendor can't be trusted then</font>

711
00:27:18,049 --> 00:27:22,489
<font color="#E5E5E5">you know the device cannot be trusted</font>

712
00:27:19,369 --> 00:27:25,129
<font color="#CCCCCC">and what the NSA allegedly did was</font>

713
00:27:22,489 --> 00:27:26,299
intercept devices<font color="#E5E5E5"> before</font><font color="#CCCCCC"> they were being</font>

714
00:27:25,129 --> 00:27:28,039
shipped<font color="#CCCCCC"> to customers and</font><font color="#E5E5E5"> would just</font>

715
00:27:26,299 --> 00:27:31,249
backdoor them right there<font color="#E5E5E5"> and then yeah</font>

716
00:27:28,039 --> 00:27:32,840
what are you<font color="#CCCCCC"> gonna do against that we</font>

717
00:27:31,249 --> 00:27:34,669
need some more<font color="#E5E5E5"> resources and we need</font>

718
00:27:32,840 --> 00:27:37,039
<font color="#E5E5E5">more ways to</font><font color="#CCCCCC"> find out</font><font color="#E5E5E5"> how we can protect</font>

719
00:27:34,669 --> 00:27:38,659
<font color="#E5E5E5">against these things</font><font color="#CCCCCC"> there are some</font>

720
00:27:37,039 --> 00:27:41,179
verified you with<font color="#E5E5E5"> resources that you can</font>

721
00:27:38,659 --> 00:27:43,159
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> check out there are also</font><font color="#CCCCCC"> yet</font>

722
00:27:41,179 --> 00:27:45,200
also some trainings that<font color="#CCCCCC"> you can do from</font>

723
00:27:43,159 --> 00:27:48,440
attacker and<font color="#CCCCCC"> defender perspectives</font><font color="#E5E5E5"> there</font>

724
00:27:45,200 --> 00:27:51,139
are some very good documentation<font color="#CCCCCC"> on</font><font color="#E5E5E5"> on</font>

725
00:27:48,440 --> 00:27:52,429
how to<font color="#E5E5E5"> protect against this and you</font>

726
00:27:51,139 --> 00:27:54,350
<font color="#CCCCCC">drill a</font><font color="#E5E5E5"> book called boot kiss and</font>

727
00:27:52,429 --> 00:27:56,480
rootkit which which explains<font color="#E5E5E5"> some basics</font>

728
00:27:54,350 --> 00:27:58,580
on<font color="#E5E5E5"> how to you know how to protect</font>

729
00:27:56,480 --> 00:28:01,279
<font color="#E5E5E5">against these things and yeah it's very</font>

730
00:27:58,580 --> 00:28:03,529
important to use<font color="#CCCCCC"> ya</font><font color="#E5E5E5"> cryptography in this</font>

731
00:28:01,279 --> 00:28:05,359
case I<font color="#CCCCCC"> think because if you strip all</font>

732
00:28:03,529 --> 00:28:06,889
the environment variables and all the

733
00:28:05,359 --> 00:28:08,779
variables<font color="#CCCCCC"> from a you boot and you have a</font>

734
00:28:06,889 --> 00:28:11,748
standard you<font color="#E5E5E5"> would you just</font><font color="#CCCCCC"> hash it</font><font color="#E5E5E5"> you</font>

735
00:28:08,779 --> 00:28:13,309
make sure<font color="#E5E5E5"> that all these images are</font><font color="#CCCCCC"> on</font>

736
00:28:11,749 --> 00:28:15,619
the other devices<font color="#E5E5E5"> by running a tool such</font>

737
00:28:13,309 --> 00:28:17,600
<font color="#CCCCCC">a chip sack which basically you know</font>

738
00:28:15,619 --> 00:28:20,330
verifies the the<font color="#E5E5E5"> entity you would</font>

739
00:28:17,600 --> 00:28:24,070
petition<font color="#E5E5E5"> yeah you can you can I think</font>

740
00:28:20,330 --> 00:28:26,600
you can<font color="#E5E5E5"> yeah get a long way</font>

741
00:28:24,070 --> 00:28:28,279
yeah our conclusion is yes your cube

742
00:28:26,600 --> 00:28:29,928
<font color="#E5E5E5">root is important but of course you need</font>

743
00:28:28,279 --> 00:28:32,359
physical<font color="#E5E5E5"> impediments and you need a</font>

744
00:28:29,929 --> 00:28:34,460
proper implementation<font color="#E5E5E5"> all you also need</font>

745
00:28:32,359 --> 00:28:35,600
to reduce<font color="#CCCCCC"> Firma opacity because a lot of</font>

746
00:28:34,460 --> 00:28:37,309
<font color="#E5E5E5">vendors they don't want to share the</font>

747
00:28:35,600 --> 00:28:38,658
<font color="#CCCCCC">firmware with would</font><font color="#E5E5E5"> you because yeah</font>

748
00:28:37,309 --> 00:28:40,279
<font color="#CCCCCC">they're afraid</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you might you</font><font color="#E5E5E5"> know</font>

749
00:28:38,659 --> 00:28:42,889
end up hacking<font color="#E5E5E5"> the devices were writing</font>

750
00:28:40,279 --> 00:28:45,769
malware<font color="#E5E5E5"> and instead what a lot of</font>

751
00:28:42,889 --> 00:28:47,299
vendors<font color="#E5E5E5"> do is that they they move away</font>

752
00:28:45,769 --> 00:28:48,590
from transparency and<font color="#E5E5E5"> they just try to</font>

753
00:28:47,299 --> 00:28:50,239
<font color="#E5E5E5">tamper proof the device as much as</font>

754
00:28:48,590 --> 00:28:52,970
possible<font color="#E5E5E5"> because yeah they don't want</font>

755
00:28:50,239 --> 00:28:54,649
you to<font color="#CCCCCC"> mess around with the device yeah</font>

756
00:28:52,970 --> 00:28:57,230
we'd also like more people<font color="#E5E5E5"> to reverse</font>

757
00:28:54,649 --> 00:28:58,820
engineer these firmware images and find

758
00:28:57,230 --> 00:29:00,799
out more and more<font color="#E5E5E5"> create better scripts</font>

759
00:28:58,820 --> 00:29:02,210
<font color="#E5E5E5">and documentation and if you can have</font>

760
00:29:00,799 --> 00:29:04,580
like proper bootloader parsers<font color="#CCCCCC"> for</font>

761
00:29:02,210 --> 00:29:07,009
embedded<font color="#CCCCCC"> devices</font><font color="#E5E5E5"> we could</font><font color="#CCCCCC"> yeah maybe end</font>

762
00:29:04,580 --> 00:29:11,470
up securing the<font color="#E5E5E5"> devices a lot more and</font>

763
00:29:07,009 --> 00:29:11,470
yeah this<font color="#E5E5E5"> is how</font><font color="#CCCCCC"> I oh yeah my talk today</font>

764
00:29:12,019 --> 00:29:17,749
so if you have any questions<font color="#E5E5E5"> I don't</font>

765
00:29:14,429 --> 00:29:17,749
think you have a lot<font color="#CCCCCC"> of time left</font><font color="#E5E5E5"> or</font>

766
00:29:18,440 --> 00:29:30,600
<font color="#E5E5E5">six minutes</font><font color="#CCCCCC"> okay any questions I I have</font>

767
00:29:25,530 --> 00:29:32,760
several<font color="#E5E5E5"> questions one your exploit is</font>

768
00:29:30,600 --> 00:29:35,310
specific to the architecture<font color="#E5E5E5"> you have</font>

769
00:29:32,760 --> 00:29:39,870
<font color="#E5E5E5">tied</font><font color="#CCCCCC"> it to your architecture the memory</font>

770
00:29:35,310 --> 00:29:42,480
layout<font color="#E5E5E5"> the CPU yeah the</font><font color="#CCCCCC"> internet so and</font>

771
00:29:39,870 --> 00:29:44,040
you<font color="#E5E5E5"> are targeting a</font><font color="#CCCCCC"> very specific a</font>

772
00:29:42,480 --> 00:29:46,470
<font color="#CCCCCC">consist</font><font color="#E5E5E5"> basis basically</font><font color="#CCCCCC"> you find</font><font color="#E5E5E5"> in home</font>

773
00:29:44,040 --> 00:29:49,830
wireless<font color="#E5E5E5"> routers are you aware</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

774
00:29:46,470 --> 00:29:51,690
paper which came out<font color="#E5E5E5"> in</font><font color="#CCCCCC"> 2011</font><font color="#E5E5E5"> in workshop</font>

775
00:29:49,830 --> 00:29:54,090
our offensive technologies<font color="#CCCCCC"> is co-located</font>

776
00:29:51,690 --> 00:29:56,010
with<font color="#E5E5E5"> using security very</font><font color="#CCCCCC"> 15 it's very</font><font color="#E5E5E5"> 11</font>

777
00:29:54,090 --> 00:29:58,530
it's called killing<font color="#E5E5E5"> the myth of Cisco</font>

778
00:29:56,010 --> 00:30:00,330
IOS diversity sorry I didn't get<font color="#CCCCCC"> it it's</font>

779
00:29:58,530 --> 00:30:04,560
called killing<font color="#E5E5E5"> the myth of Cisco IOS</font>

780
00:30:00,330 --> 00:30:07,560
diversity<font color="#E5E5E5"> it was published in wot which</font>

781
00:30:04,560 --> 00:30:10,649
is co-located<font color="#CCCCCC"> with</font><font color="#E5E5E5"> UNIX security 2011</font><font color="#CCCCCC"> ok</font>

782
00:30:07,560 --> 00:30:12,360
they do a similar stuff on Cisco devices

783
00:30:10,650 --> 00:30:14,970
<font color="#CCCCCC">oh yes</font><font color="#E5E5E5"> and the same thing was then</font>

784
00:30:12,360 --> 00:30:17,459
depended on HP printers well they could

785
00:30:14,970 --> 00:30:20,070
fire up remotely<font color="#CCCCCC"> command supras printer</font>

786
00:30:17,460 --> 00:30:24,330
to do stuff like print random stuff your

787
00:30:20,070 --> 00:30:25,770
intervention they do not require those

788
00:30:24,330 --> 00:30:28,949
<font color="#CCCCCC">express mode require you to be</font>

789
00:30:25,770 --> 00:30:30,120
physically near a Rooter<font color="#E5E5E5"> - oh we also</font>

790
00:30:28,950 --> 00:30:33,780
don't need<font color="#CCCCCC"> physical access</font><font color="#E5E5E5"> for this</font>

791
00:30:30,120 --> 00:30:37,229
<font color="#E5E5E5">effect I mean what I gathered to</font><font color="#CCCCCC"> play</font>

792
00:30:33,780 --> 00:30:38,850
with<font color="#E5E5E5"> that jumper to do something</font><font color="#CCCCCC"> no yeah</font>

793
00:30:37,230 --> 00:30:40,470
if you want the<font color="#E5E5E5"> job if you want</font><font color="#CCCCCC"> to</font>

794
00:30:38,850 --> 00:30:42,600
protect devices you<font color="#E5E5E5"> need to add a jumper</font>

795
00:30:40,470 --> 00:30:44,340
<font color="#E5E5E5">but our device if you have root access</font>

796
00:30:42,600 --> 00:30:45,899
to the device you can<font color="#E5E5E5"> basically do</font>

797
00:30:44,340 --> 00:30:47,070
anything<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's because the devices</font>

798
00:30:45,900 --> 00:30:50,580
don't<font color="#CCCCCC"> have a job</font><font color="#E5E5E5"> and secondly you are</font>

799
00:30:47,070 --> 00:30:52,620
you are positioning this<font color="#CCCCCC"> yeah or</font><font color="#E5E5E5"> it's</font>

800
00:30:50,580 --> 00:30:54,840
<font color="#E5E5E5">not this is not a</font><font color="#CCCCCC"> question</font><font color="#E5E5E5"> right I mean</font>

801
00:30:52,620 --> 00:30:57,239
<font color="#E5E5E5">we can discuss these things later if you</font>

802
00:30:54,840 --> 00:30:59,790
want you are positioning<font color="#CCCCCC"> this with</font>

803
00:30:57,240 --> 00:31:00,960
respect to<font color="#CCCCCC"> a open wrt enable device</font>

804
00:30:59,790 --> 00:31:02,850
yeah<font color="#E5E5E5"> what about those which don't have</font>

805
00:31:00,960 --> 00:31:04,350
because the paper I'm talking about they

806
00:31:02,850 --> 00:31:05,879
don't<font color="#E5E5E5"> have they would did not position</font>

807
00:31:04,350 --> 00:31:13,679
it up against<font color="#CCCCCC"> and open wrt enabled by</font>

808
00:31:05,880 --> 00:31:15,510
<font color="#CCCCCC">the splitter Cisco you know how many</font>

809
00:31:13,680 --> 00:31:16,950
would you<font color="#E5E5E5"> find it in the</font><font color="#CCCCCC"> wildly so I</font>

810
00:31:15,510 --> 00:31:17,750
<font color="#E5E5E5">mean how</font><font color="#CCCCCC"> many of these would</font><font color="#E5E5E5"> you find in</font>

811
00:31:16,950 --> 00:31:20,280
the wild

812
00:31:17,750 --> 00:31:22,080
that's not we're not<font color="#E5E5E5"> gonna remotely</font>

813
00:31:20,280 --> 00:31:24,870
exploit a lot of these<font color="#E5E5E5"> guys the point</font><font color="#CCCCCC"> is</font>

814
00:31:22,080 --> 00:31:26,460
that you can<font color="#E5E5E5"> target any device</font><font color="#CCCCCC"> that</font>

815
00:31:24,870 --> 00:31:28,800
doesn't<font color="#E5E5E5"> have the right protections right</font>

816
00:31:26,460 --> 00:31:30,990
<font color="#CCCCCC">I mean in this case we just took a case</font>

817
00:31:28,800 --> 00:31:32,340
study<font color="#E5E5E5"> on an on one device</font>

818
00:31:30,990 --> 00:31:33,900
and the thing<font color="#E5E5E5"> is that you can</font><font color="#CCCCCC"> just</font>

819
00:31:32,340 --> 00:31:36,659
target<font color="#E5E5E5"> any device of course</font><font color="#CCCCCC"> what these</font>

820
00:31:33,900 --> 00:31:38,850
guys did<font color="#E5E5E5"> with Cisco it's amazing but</font>

821
00:31:36,660 --> 00:31:40,890
yeah you can do this<font color="#CCCCCC"> on a lot of routers</font>

822
00:31:38,850 --> 00:31:42,570
and<font color="#CCCCCC"> the point is</font><font color="#E5E5E5"> not that you can yeah</font>

823
00:31:40,890 --> 00:31:43,920
what you said<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> what is your</font>

824
00:31:42,570 --> 00:31:45,330
question actually<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't question is</font>

825
00:31:43,920 --> 00:31:46,800
you are<font color="#E5E5E5"> pulling my question is</font><font color="#CCCCCC"> that</font>

826
00:31:45,330 --> 00:31:48,750
<font color="#CCCCCC">you're positioning it with respect</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a</font>

827
00:31:46,800 --> 00:31:50,340
very specific architecture very<font color="#E5E5E5"> specific</font>

828
00:31:48,750 --> 00:31:51,990
device<font color="#CCCCCC"> well how many</font><font color="#E5E5E5"> of these would you</font>

829
00:31:50,340 --> 00:31:54,480
find<font color="#E5E5E5"> the while</font><font color="#CCCCCC"> why should I worry about</font>

830
00:31:51,990 --> 00:31:56,309
this attack do I even have this device

831
00:31:54,480 --> 00:31:58,290
how many of these are deployed<font color="#CCCCCC"> ever if</font>

832
00:31:56,309 --> 00:32:00,360
<font color="#CCCCCC">why attack is</font><font color="#E5E5E5"> not specific to this</font>

833
00:31:58,290 --> 00:32:02,040
device our people concept is specific to

834
00:32:00,360 --> 00:32:03,840
justified but<font color="#CCCCCC"> if you would go to</font><font color="#E5E5E5"> your</font>

835
00:32:02,040 --> 00:32:05,340
house and<font color="#E5E5E5"> you open up your router you</font>

836
00:32:03,840 --> 00:32:06,750
don't see what we<font color="#E5E5E5"> see you don't</font><font color="#CCCCCC"> see a</font>

837
00:32:05,340 --> 00:32:08,220
jumper it probably doesn't<font color="#CCCCCC"> have secure</font>

838
00:32:06,750 --> 00:32:09,450
boot<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do these</font><font color="#CCCCCC"> attacks on that as</font>

839
00:32:08,220 --> 00:32:11,700
well<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> just a proof of concept</font>

840
00:32:09,450 --> 00:32:14,010
<font color="#CCCCCC">that</font><font color="#E5E5E5"> shows that the architect</font><font color="#CCCCCC"> I do a lot</font>

841
00:32:11,700 --> 00:32:15,000
of<font color="#E5E5E5"> working particularly for open wrt</font>

842
00:32:14,010 --> 00:32:16,470
particularly for this<font color="#E5E5E5"> kind of</font>

843
00:32:15,000 --> 00:32:18,150
architecture because we use<font color="#E5E5E5"> that as a</font>

844
00:32:16,470 --> 00:32:20,880
<font color="#CCCCCC">chain but it doesn't mean</font><font color="#E5E5E5"> that you can</font>

845
00:32:18,150 --> 00:32:22,890
<font color="#E5E5E5">do this</font><font color="#CCCCCC"> far it's unclear how this would</font>

846
00:32:20,880 --> 00:32:25,290
pan out<font color="#E5E5E5"> with other architectures other</font>

847
00:32:22,890 --> 00:32:27,990
<font color="#CCCCCC">let's take this talk line we can discuss</font>

848
00:32:25,290 --> 00:32:37,290
this<font color="#E5E5E5"> 101 is there anyone with a real</font>

849
00:32:27,990 --> 00:32:40,220
question<font color="#CCCCCC"> so nobody</font><font color="#E5E5E5"> all right that's it</font>

850
00:32:37,290 --> 00:32:40,220
thank you

