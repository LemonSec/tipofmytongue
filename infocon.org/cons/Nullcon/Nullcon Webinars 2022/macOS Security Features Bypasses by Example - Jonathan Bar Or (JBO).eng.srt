1
00:00:00,420 --> 00:00:12,400
[Music]

2
00:00:12,400 --> 00:00:15,280
coming to our today's speaker we have

3
00:00:15,280 --> 00:00:19,119
with us jonathan barr or aka jbo

4
00:00:19,119 --> 00:00:21,920
he is a principal security researcher at

5
00:00:21,920 --> 00:00:24,560
microsoft over there he works as a

6
00:00:24,560 --> 00:00:27,359
microsoft defender research architect of

7
00:00:27,359 --> 00:00:29,039
cross platform

8
00:00:29,039 --> 00:00:31,199
jonathan has a rich experience in

9
00:00:31,199 --> 00:00:33,280
vulnerability research exploitation

10
00:00:33,280 --> 00:00:35,760
crypto analysis and offensive security

11
00:00:35,760 --> 00:00:38,399
in general on behalf of all of us i

12
00:00:38,399 --> 00:00:40,559
would like to welcome jonathan

13
00:00:40,559 --> 00:00:43,120
thank you uh for the introduction

14
00:00:43,120 --> 00:00:46,480
um i guess we could just uh start i see

15
00:00:46,480 --> 00:00:49,200
a few familiar faces here hello to all

16
00:00:49,200 --> 00:00:50,320
um

17
00:00:50,320 --> 00:00:51,600
let me just

18
00:00:51,600 --> 00:00:54,399
get the slides ready this is

19
00:00:54,399 --> 00:00:56,640
mac os security features and bypasses by

20
00:00:56,640 --> 00:00:58,879
example

21
00:00:58,879 --> 00:01:00,800
by me

22
00:01:00,800 --> 00:01:02,559
first of all a bit a bit about myself

23
00:01:02,559 --> 00:01:06,640
although sakshi did a great introduction

24
00:01:06,640 --> 00:01:09,360
jonathan borrower or jbo for short

25
00:01:09,360 --> 00:01:11,680
that's my handle name on twitter yoyoyo

26
00:01:11,680 --> 00:01:14,240
under yo underscore underscore

27
00:01:14,240 --> 00:01:16,080
whatever jbo

28
00:01:16,080 --> 00:01:19,600
i'm focusing on uh offensive security i

29
00:01:19,600 --> 00:01:21,920
work at microsoft defender for endpoint

30
00:01:21,920 --> 00:01:23,920
endpoint as the research architect for

31
00:01:23,920 --> 00:01:25,119
crossplat

32
00:01:25,119 --> 00:01:26,640
that basically means that i'm i'm

33
00:01:26,640 --> 00:01:30,159
focusing on linux android mac os and ios

34
00:01:30,159 --> 00:01:31,360
but i do

35
00:01:31,360 --> 00:01:33,600
some windows stuff here and there

36
00:01:33,600 --> 00:01:35,600
and i also try to produce funny

37
00:01:35,600 --> 00:01:37,680
vulnerability names

38
00:01:37,680 --> 00:01:40,000
and today i want to talk to you as an

39
00:01:40,000 --> 00:01:42,880
individual security researcher so

40
00:01:42,880 --> 00:01:45,520
in this talk i will not be representing

41
00:01:45,520 --> 00:01:48,399
microsoft at all so everything here is

42
00:01:48,399 --> 00:01:51,119
my own personal take on things if i

43
00:01:51,119 --> 00:01:53,520
show an opinion or something or share

44
00:01:53,520 --> 00:01:56,479
share insights that's coming from me and

45
00:01:56,479 --> 00:01:58,399
not microsoft so i don't want i don't

46
00:01:58,399 --> 00:02:00,880
want anyone after this webinar to come

47
00:02:00,880 --> 00:02:02,320
and say hey microsoft did that or

48
00:02:02,320 --> 00:02:04,719
something that's not the case with that

49
00:02:04,719 --> 00:02:07,840
being said uh let's start

50
00:02:07,840 --> 00:02:09,598
i want to talk about mac os security in

51
00:02:09,598 --> 00:02:11,440
general

52
00:02:11,440 --> 00:02:13,599
mac os is a very interesting operating

53
00:02:13,599 --> 00:02:15,040
system

54
00:02:15,040 --> 00:02:16,800
i would say that

55
00:02:16,800 --> 00:02:19,120
it has the very historical

56
00:02:19,120 --> 00:02:22,000
rich historical background but and that

57
00:02:22,000 --> 00:02:23,920
basically makes it a very complicated

58
00:02:23,920 --> 00:02:25,040
system

59
00:02:25,040 --> 00:02:26,879
and i would say that in terms of

60
00:02:26,879 --> 00:02:29,360
security it has many security layers

61
00:02:29,360 --> 00:02:32,080
some of them are posix posix traditional

62
00:02:32,080 --> 00:02:34,720
like the uh like the things that you see

63
00:02:34,720 --> 00:02:38,000
on on normal unix like systems

64
00:02:38,000 --> 00:02:41,200
it has a bsd based security layer

65
00:02:41,200 --> 00:02:44,959
uh for example mac ports are used as uh

66
00:02:44,959 --> 00:02:48,000
as a security feature per se

67
00:02:48,000 --> 00:02:51,280
uh and uh there are apple proprietary uh

68
00:02:51,280 --> 00:02:52,959
security layers

69
00:02:52,959 --> 00:02:55,200
and in this talk we'll be focusing

70
00:02:55,200 --> 00:02:57,519
mostly on the apple proprietary ones

71
00:02:57,519 --> 00:02:59,519
there are very interesting conversations

72
00:02:59,519 --> 00:03:01,920
about how apple implements certain

73
00:03:01,920 --> 00:03:05,440
things uh in terms of posix and bsd but

74
00:03:05,440 --> 00:03:07,440
we won't talk about them during this

75
00:03:07,440 --> 00:03:10,000
webinar

76
00:03:10,720 --> 00:03:13,040
in terms of apple proprietary i would

77
00:03:13,040 --> 00:03:15,519
say that

78
00:03:15,680 --> 00:03:18,800
the number one focus that i usually have

79
00:03:18,800 --> 00:03:22,640
is on apple entitled binaries basically

80
00:03:22,640 --> 00:03:24,560
you have to understand the mac os echo

81
00:03:24,560 --> 00:03:27,200
system but i would say that

82
00:03:27,200 --> 00:03:28,959
these binaries are

83
00:03:28,959 --> 00:03:31,280
signed by apple and they have certain

84
00:03:31,280 --> 00:03:33,519
entitlements they can do certain things

85
00:03:33,519 --> 00:03:36,480
allowed by the os that other binaries

86
00:03:36,480 --> 00:03:38,640
can't do and because they're apple

87
00:03:38,640 --> 00:03:40,640
signed you can't just fake fake your

88
00:03:40,640 --> 00:03:43,920
binary into into doing these things

89
00:03:43,920 --> 00:03:46,000
uh so i would say that these apple

90
00:03:46,000 --> 00:03:48,239
entitled binaries and we'll see a lot of

91
00:03:48,239 --> 00:03:49,120
them

92
00:03:49,120 --> 00:03:52,159
are interesting undocumented and and

93
00:03:52,159 --> 00:03:54,000
have tons of assumptions that we might

94
00:03:54,000 --> 00:03:55,599
be able to exploit

95
00:03:55,599 --> 00:03:58,319
and one one thing i don't remember who

96
00:03:58,319 --> 00:04:00,159
said that that exactly but when i got

97
00:04:00,159 --> 00:04:01,599
into mac os

98
00:04:01,599 --> 00:04:04,720
uh i saw that i saw this like kind of

99
00:04:04,720 --> 00:04:07,280
almost a direct quote that it took years

100
00:04:07,280 --> 00:04:10,239
to secure linux set ui debinaries

101
00:04:10,239 --> 00:04:11,280
and

102
00:04:11,280 --> 00:04:13,920
interestingly we still got some in 2021

103
00:04:13,920 --> 00:04:16,798
and 2022 even this year

104
00:04:16,798 --> 00:04:17,918
so

105
00:04:17,918 --> 00:04:20,478
even on linux it took years to make

106
00:04:20,478 --> 00:04:22,479
suite binaries uh

107
00:04:22,479 --> 00:04:24,560
more secure and even then they're not as

108
00:04:24,560 --> 00:04:26,880
secure as you'd imagine

109
00:04:26,880 --> 00:04:29,120
and how many how much scrutiny do you

110
00:04:29,120 --> 00:04:31,040
think that apple entitled binaries

111
00:04:31,040 --> 00:04:33,840
receive and the answer is not too much

112
00:04:33,840 --> 00:04:35,600
and this is what we're going to look at

113
00:04:35,600 --> 00:04:37,600
uh in these cases

114
00:04:37,600 --> 00:04:38,639
so

115
00:04:38,639 --> 00:04:41,520
first of all i want to talk about uh my

116
00:04:41,520 --> 00:04:42,400
uh

117
00:04:42,400 --> 00:04:45,919
first reported uh vulnerability or

118
00:04:45,919 --> 00:04:47,919
first publicly disclosed reported

119
00:04:47,919 --> 00:04:49,360
vulnerability because there are some

120
00:04:49,360 --> 00:04:51,199
things that are undisclosed yet and

121
00:04:51,199 --> 00:04:53,040
that's a sip bypass that i call

122
00:04:53,040 --> 00:04:54,840
shruteless

123
00:04:54,840 --> 00:04:56,400
um

124
00:04:56,400 --> 00:05:00,080
sip or rootless is uh is is

125
00:05:00,080 --> 00:05:02,720
is a mechanism on mac it's called system

126
00:05:02,720 --> 00:05:04,880
integrity protection and also code

127
00:05:04,880 --> 00:05:06,400
called ruthless

128
00:05:06,400 --> 00:05:09,039
and it was introduced very early as much

129
00:05:09,039 --> 00:05:12,560
as yosemite so pretty old uh now

130
00:05:12,560 --> 00:05:15,199
uh it leverages the apple sandbox to

131
00:05:15,199 --> 00:05:17,280
protect the entire platform even from

132
00:05:17,280 --> 00:05:19,360
root so even if you run as roots there

133
00:05:19,360 --> 00:05:21,680
are certain things you can't do and the

134
00:05:21,680 --> 00:05:24,160
idea was to keep the integrity of the

135
00:05:24,160 --> 00:05:25,840
operating system

136
00:05:25,840 --> 00:05:26,800
well

137
00:05:26,800 --> 00:05:28,880
complete right so even as root you can't

138
00:05:28,880 --> 00:05:31,680
attack the operating system itself

139
00:05:31,680 --> 00:05:34,880
and you can disable it

140
00:05:34,880 --> 00:05:38,000
but only in recovery mode

141
00:05:38,000 --> 00:05:40,720
basically there is a tool to do that and

142
00:05:40,720 --> 00:05:44,080
we'll be looking at that as well

143
00:05:44,080 --> 00:05:47,520
internally sip is configured by two

144
00:05:47,520 --> 00:05:50,000
nvram variables

145
00:05:50,000 --> 00:05:52,479
one of them is csr active config which

146
00:05:52,479 --> 00:05:55,039
is a bitmask of enabled protections and

147
00:05:55,039 --> 00:05:57,360
you have csr data that is stored in

148
00:05:57,360 --> 00:05:59,199
output configuration that we won't get

149
00:05:59,199 --> 00:06:00,720
into

150
00:06:00,720 --> 00:06:02,800
you can't legitimately modify those

151
00:06:02,800 --> 00:06:04,639
without booting into recovery mode

152
00:06:04,639 --> 00:06:06,400
obviously otherwise you'll be able to

153
00:06:06,400 --> 00:06:08,160
just bypass zip

154
00:06:08,160 --> 00:06:10,639
and the tool that i was referring to the

155
00:06:10,639 --> 00:06:12,560
thing that lets you turn off zip is

156
00:06:12,560 --> 00:06:15,520
called csr util as i said

157
00:06:15,520 --> 00:06:18,000
in in recovery mode you're able to

158
00:06:18,000 --> 00:06:21,759
disable sip with csr u2 but in

159
00:06:21,759 --> 00:06:23,520
non-recovery mode you can do very

160
00:06:23,520 --> 00:06:26,080
limited things uh the most obvious thing

161
00:06:26,080 --> 00:06:28,400
to do is to get the status of csr util

162
00:06:28,400 --> 00:06:30,400
the status of zip

163
00:06:30,400 --> 00:06:32,960
in this case you can see that as i

164
00:06:32,960 --> 00:06:35,759
write csr util status and i get uh the

165
00:06:35,759 --> 00:06:38,639
fact that sip is enabled and if i do csr

166
00:06:38,639 --> 00:06:41,280
util disable it it will even tell me

167
00:06:41,280 --> 00:06:42,880
this tool needs to be executed from

168
00:06:42,880 --> 00:06:46,240
recovery os so just just you know

169
00:06:46,240 --> 00:06:48,080
internally how these things are are

170
00:06:48,080 --> 00:06:49,199
working

171
00:06:49,199 --> 00:06:51,680
and the csr active config the thing that

172
00:06:51,680 --> 00:06:53,680
i was referring to earlier

173
00:06:53,680 --> 00:06:55,039
as i said it's a

174
00:06:55,039 --> 00:06:57,840
bit mask and it controls c protections

175
00:06:57,840 --> 00:06:59,599
and interestingly enough you can find

176
00:06:59,599 --> 00:07:02,880
those in the xnu source code

177
00:07:02,880 --> 00:07:04,639
and you can kind of guess even without

178
00:07:04,639 --> 00:07:08,060
understanding exactly what's going on

179
00:07:08,060 --> 00:07:09,280
[Music]

180
00:07:09,280 --> 00:07:12,400
basically compromising any of these

181
00:07:12,400 --> 00:07:14,720
is considered a sip bypass and actually

182
00:07:14,720 --> 00:07:16,880
compromises the entire

183
00:07:16,880 --> 00:07:19,039
sip protection

184
00:07:19,039 --> 00:07:20,800
for example csr

185
00:07:20,800 --> 00:07:24,400
allow task for pid this thing right here

186
00:07:24,400 --> 00:07:26,240
allows you to

187
00:07:26,240 --> 00:07:28,960
do the equivalent of open

188
00:07:28,960 --> 00:07:32,479
open process on windows or

189
00:07:32,479 --> 00:07:33,440
or

190
00:07:33,440 --> 00:07:36,319
tracing a process in linux so allow task

191
00:07:36,319 --> 00:07:38,160
for paid is basically the way for you to

192
00:07:38,160 --> 00:07:40,960
get a handle to a different task or a

193
00:07:40,960 --> 00:07:43,280
different process that's just an example

194
00:07:43,280 --> 00:07:44,879
and there are many other things here as

195
00:07:44,879 --> 00:07:45,680
well

196
00:07:45,680 --> 00:07:48,560
um so these are the bits that are

197
00:07:48,560 --> 00:07:52,080
actually saved inside this bitmask nvram

198
00:07:52,080 --> 00:07:54,240
variable

199
00:07:54,240 --> 00:07:56,479
interestingly enough the

200
00:07:56,479 --> 00:07:59,120
number one noticeable protection in zip

201
00:07:59,120 --> 00:08:00,960
is the fact that you can't modify

202
00:08:00,960 --> 00:08:02,720
certain files on the

203
00:08:02,720 --> 00:08:05,520
file system so even if you run as root

204
00:08:05,520 --> 00:08:07,440
you won't be able to modify

205
00:08:07,440 --> 00:08:08,720
um

206
00:08:08,720 --> 00:08:12,240
let's say operating system binaries

207
00:08:12,240 --> 00:08:13,520
and

208
00:08:13,520 --> 00:08:15,840
how are these governed basically

209
00:08:15,840 --> 00:08:17,199
there are certain files that are

210
00:08:17,199 --> 00:08:18,560
restricted

211
00:08:18,560 --> 00:08:20,960
and a file is restricted if it has one

212
00:08:20,960 --> 00:08:22,800
of these right

213
00:08:22,800 --> 00:08:25,199
the most obvious one is that it has a

214
00:08:25,199 --> 00:08:28,080
com apple rootless extended attribute

215
00:08:28,080 --> 00:08:31,120
and you can view them with ls dash uh

216
00:08:31,120 --> 00:08:34,320
dash lao the the capital o here will

217
00:08:34,320 --> 00:08:36,320
show you if the file is restricted and

218
00:08:36,320 --> 00:08:38,640
then it will tell you restricted or if

219
00:08:38,640 --> 00:08:40,399
it's not restricted

220
00:08:40,399 --> 00:08:43,519
um so that's that's uh uh one important

221
00:08:43,519 --> 00:08:45,440
thing to to know

222
00:08:45,440 --> 00:08:48,399
uh regarding sip uh and there are other

223
00:08:48,399 --> 00:08:51,040
um files that are just protected just

224
00:08:51,040 --> 00:08:52,399
because they're mentioned in some

225
00:08:52,399 --> 00:08:54,480
configuration file this file in

226
00:08:54,480 --> 00:08:55,760
particular

227
00:08:55,760 --> 00:08:58,080
and it's not white listed so there is a

228
00:08:58,080 --> 00:09:00,959
there is kind of a white list that uh

229
00:09:00,959 --> 00:09:03,839
overrides the the files that are saved

230
00:09:03,839 --> 00:09:05,279
here

231
00:09:05,279 --> 00:09:07,839
and obviously you can't manually make a

232
00:09:07,839 --> 00:09:11,120
file c protected right if you could then

233
00:09:11,120 --> 00:09:13,200
it would mean that you basically will

234
00:09:13,200 --> 00:09:15,360
make an undeletable malware or something

235
00:09:15,360 --> 00:09:18,240
so you can't add this extended attribute

236
00:09:18,240 --> 00:09:22,399
to a file even as a root

237
00:09:22,399 --> 00:09:24,160
and as i said you can view those with

238
00:09:24,160 --> 00:09:27,160
ls-lao

239
00:09:29,200 --> 00:09:31,040
and sip is pretty interesting because it

240
00:09:31,040 --> 00:09:33,760
might stop malicious operations

241
00:09:33,760 --> 00:09:35,360
and it's always interesting to examine

242
00:09:35,360 --> 00:09:38,000
the sandbox log because sip is basically

243
00:09:38,000 --> 00:09:40,560
based on on the apple sandbox and here

244
00:09:40,560 --> 00:09:42,240
you can see an example

245
00:09:42,240 --> 00:09:45,040
me running as root trying to copy a plus

246
00:09:45,040 --> 00:09:47,920
file my malware dot plist into system

247
00:09:47,920 --> 00:09:50,000
library launch daemons now because it's

248
00:09:50,000 --> 00:09:53,440
under system it will be protected and it

249
00:09:53,440 --> 00:09:55,519
will give you operation not permitted

250
00:09:55,519 --> 00:09:57,760
again even though i'm running as root

251
00:09:57,760 --> 00:09:59,839
and now if you look at the log you see

252
00:09:59,839 --> 00:10:02,720
here that i write log show whatever and

253
00:10:02,720 --> 00:10:04,959
then i look for malware.plus it will

254
00:10:04,959 --> 00:10:08,720
even say deny fi deny files uh far right

255
00:10:08,720 --> 00:10:11,920
create in this uh particular path that

256
00:10:11,920 --> 00:10:14,320
basic and if you see here it says

257
00:10:14,320 --> 00:10:16,640
sandbox but it comes from kernel that

258
00:10:16,640 --> 00:10:19,279
basically means that it's it's sip

259
00:10:19,279 --> 00:10:21,200
so it's always interesting to look at

260
00:10:21,200 --> 00:10:24,160
these the log um

261
00:10:24,160 --> 00:10:26,959
if if you get operation not permitted

262
00:10:26,959 --> 00:10:28,880
now

263
00:10:28,880 --> 00:10:31,440
we come to kind of a problem because how

264
00:10:31,440 --> 00:10:33,519
does apple handle upgrade situations so

265
00:10:33,519 --> 00:10:35,760
let's say you have an os upgrade and

266
00:10:35,760 --> 00:10:37,440
apple needs to actually

267
00:10:37,440 --> 00:10:40,399
override these exact paths right

268
00:10:40,399 --> 00:10:42,720
so what do they do so apparently what

269
00:10:42,720 --> 00:10:44,480
they do is that they have a set of

270
00:10:44,480 --> 00:10:46,880
entitlements for complete to completely

271
00:10:46,880 --> 00:10:49,600
bypassing uh sip checks and all of them

272
00:10:49,600 --> 00:10:51,000
begin with

273
00:10:51,000 --> 00:10:54,560
com.apple.ruthless prefix

274
00:10:54,720 --> 00:10:56,560
there are some of them and they became

275
00:10:56,560 --> 00:10:58,959
more fine fine-tuned and fine-grained

276
00:10:58,959 --> 00:11:02,079
with time with with every major apple

277
00:11:02,079 --> 00:11:04,399
mac os build but there are two important

278
00:11:04,399 --> 00:11:06,560
ones for file system checks one of them

279
00:11:06,560 --> 00:11:09,519
is com.apple.ruthless.install

280
00:11:09,519 --> 00:11:11,920
that one will basically bypass all file

281
00:11:11,920 --> 00:11:15,519
system sip checks so if my process has

282
00:11:15,519 --> 00:11:18,160
this entitlement it can basically do

283
00:11:18,160 --> 00:11:20,240
what i couldn't do here right it can

284
00:11:20,240 --> 00:11:22,880
just override all file system protection

285
00:11:22,880 --> 00:11:24,000
checks

286
00:11:24,000 --> 00:11:24,720
and

287
00:11:24,720 --> 00:11:27,720
com.apple.ruthless.install.inheritable

288
00:11:28,079 --> 00:11:30,160
is even more interesting because it

289
00:11:30,160 --> 00:11:32,880
actually grants uh all of its child

290
00:11:32,880 --> 00:11:34,320
processes

291
00:11:34,320 --> 00:11:36,720
to bypass the file system checks

292
00:11:36,720 --> 00:11:39,120
so if you find if you're able to let's

293
00:11:39,120 --> 00:11:41,440
say inject to one of these com apple

294
00:11:41,440 --> 00:11:43,200
rootless install

295
00:11:43,200 --> 00:11:44,079
then

296
00:11:44,079 --> 00:11:46,560
you win right you basically bypass sip

297
00:11:46,560 --> 00:11:48,560
or if you're able to somehow affect the

298
00:11:48,560 --> 00:11:50,720
process with that inheritable thing to

299
00:11:50,720 --> 00:11:53,440
create your your own child process so

300
00:11:53,440 --> 00:11:55,040
that's exactly what we're going to do

301
00:11:55,040 --> 00:11:57,200
here

302
00:11:57,200 --> 00:11:59,120
and interestingly there have been sip

303
00:11:59,120 --> 00:12:00,959
bypasses in the past

304
00:12:00,959 --> 00:12:03,320
most of them uh focus on

305
00:12:03,320 --> 00:12:05,279
com.apple.ruthless entire entitled

306
00:12:05,279 --> 00:12:07,519
processes

307
00:12:07,519 --> 00:12:09,839
some of these were very trivial this was

308
00:12:09,839 --> 00:12:12,880
i don't remember what year well 2016

309
00:12:12,880 --> 00:12:14,959
and this was basically a tweetable

310
00:12:14,959 --> 00:12:18,000
exploit even where basically you can uh

311
00:12:18,000 --> 00:12:19,519
create a

312
00:12:19,519 --> 00:12:20,720
soft link

313
00:12:20,720 --> 00:12:24,040
to a certain file on disk and then run

314
00:12:24,040 --> 00:12:28,240
fsck underscore cs which was a sip

315
00:12:28,240 --> 00:12:31,680
entitled binary at the time to basically

316
00:12:31,680 --> 00:12:33,680
override a certain

317
00:12:33,680 --> 00:12:36,720
plist file that protects the kernel

318
00:12:36,720 --> 00:12:39,120
so that was pretty interesting and and

319
00:12:39,120 --> 00:12:40,480
uh kind of an

320
00:12:40,480 --> 00:12:43,440
inspiration to what i wanted to do

321
00:12:43,440 --> 00:12:44,240
so

322
00:12:44,240 --> 00:12:46,959
how do you look for sip bypasses

323
00:12:46,959 --> 00:12:48,399
um

324
00:12:48,399 --> 00:12:51,040
i had a few examples a few ideas sorry

325
00:12:51,040 --> 00:12:53,200
one of them was to examine sip entitled

326
00:12:53,200 --> 00:12:55,760
binaries on my own box and basically

327
00:12:55,760 --> 00:12:57,279
looking for operations that could be

328
00:12:57,279 --> 00:13:00,079
exploited by an attacker an interesting

329
00:13:00,079 --> 00:13:01,839
uh

330
00:13:01,839 --> 00:13:03,200
tool to use

331
00:13:03,200 --> 00:13:05,760
is uh there is a

332
00:13:05,760 --> 00:13:08,880
database uh json titleman database it's

333
00:13:08,880 --> 00:13:10,800
always a good way to find entitled

334
00:13:10,800 --> 00:13:13,839
binaries and you can just use that to

335
00:13:13,839 --> 00:13:17,120
just start hunting for any entitled

336
00:13:17,120 --> 00:13:20,480
binaries and it will even uh make a

337
00:13:20,480 --> 00:13:22,399
lookup based on the operating system

338
00:13:22,399 --> 00:13:24,800
version and so on and interestingly you

339
00:13:24,800 --> 00:13:27,120
can even if you have uh if you have an

340
00:13:27,120 --> 00:13:30,320
edr and me as a microsoft employee i

341
00:13:30,320 --> 00:13:33,440
obviously have an edr i can just try to

342
00:13:33,440 --> 00:13:35,279
hunt for certain things

343
00:13:35,279 --> 00:13:36,160
uh

344
00:13:36,160 --> 00:13:38,720
so i used the edr itself to look for

345
00:13:38,720 --> 00:13:40,959
interesting child processes of

346
00:13:40,959 --> 00:13:44,639
once you find an entitled binary uh and

347
00:13:44,639 --> 00:13:47,600
i did just that in this case you can see

348
00:13:47,600 --> 00:13:48,720
um

349
00:13:48,720 --> 00:13:50,480
zsh

350
00:13:50,480 --> 00:13:53,760
this guy with this command line actually

351
00:13:53,760 --> 00:13:55,519
spawned from one of the entitled

352
00:13:55,519 --> 00:13:57,839
binaries that i found

353
00:13:57,839 --> 00:13:58,560
so

354
00:13:58,560 --> 00:14:00,399
in this case i want to talk

355
00:14:00,399 --> 00:14:04,240
exactly about that uh system install d

356
00:14:04,240 --> 00:14:07,279
system install d uh is is one of these

357
00:14:07,279 --> 00:14:10,079
uh entitled binaries that i found here

358
00:14:10,079 --> 00:14:12,480
and basically i started reading about it

359
00:14:12,480 --> 00:14:14,320
and interestingly it has

360
00:14:14,320 --> 00:14:17,320
com.apple.ruthless.com

361
00:14:17,680 --> 00:14:19,360
entitlement

362
00:14:19,360 --> 00:14:21,440
as a reminder it means that all of the

363
00:14:21,440 --> 00:14:23,839
child process processes of this little

364
00:14:23,839 --> 00:14:24,959
guy

365
00:14:24,959 --> 00:14:26,480
will actually

366
00:14:26,480 --> 00:14:28,000
bypass zip

367
00:14:28,000 --> 00:14:30,800
file system checks um

368
00:14:30,800 --> 00:14:32,480
that daemon

369
00:14:32,480 --> 00:14:34,480
the fact that it ends with a d hints

370
00:14:34,480 --> 00:14:36,959
that it's a demon and it is a daemon

371
00:14:36,959 --> 00:14:39,120
that even gets invoked when installing

372
00:14:39,120 --> 00:14:42,160
an apple sign package so if you have any

373
00:14:42,160 --> 00:14:43,760
pkg file

374
00:14:43,760 --> 00:14:46,320
that's apple signed it will just start

375
00:14:46,320 --> 00:14:48,480
and install it on its own and that

376
00:14:48,480 --> 00:14:51,600
basically kind of answers how apple uh

377
00:14:51,600 --> 00:14:53,600
updates your operating system and so on

378
00:14:53,600 --> 00:14:54,639
right just

379
00:14:54,639 --> 00:14:57,600
runs this oops runs this guy right here

380
00:14:57,600 --> 00:15:00,800
this guy is able to have itself and all

381
00:15:00,800 --> 00:15:03,680
of its child processes uh bypass file

382
00:15:03,680 --> 00:15:06,240
system checks and basically bypass zip

383
00:15:06,240 --> 00:15:07,440
by design

384
00:15:07,440 --> 00:15:09,120
and then i started playing with system

385
00:15:09,120 --> 00:15:10,399
installed

386
00:15:10,399 --> 00:15:13,600
and uh system install the if you look at

387
00:15:13,600 --> 00:15:16,079
what it does you'll see that it does uh

388
00:15:16,079 --> 00:15:18,560
various tasks like updating cache moving

389
00:15:18,560 --> 00:15:21,199
files to temporary files securely i

390
00:15:21,199 --> 00:15:24,160
tried by the way and so on and if a

391
00:15:24,160 --> 00:15:26,720
package has a post install script it

392
00:15:26,720 --> 00:15:29,600
will invoke it and post install scripts

393
00:15:29,600 --> 00:15:31,680
are run by the shell

394
00:15:31,680 --> 00:15:35,120
and um in this case it was in in the

395
00:15:35,120 --> 00:15:37,920
package that i found it was by z shell

396
00:15:37,920 --> 00:15:40,880
and this kind of explains why i saw zsh

397
00:15:40,880 --> 00:15:43,839
the z shell running under system install

398
00:15:43,839 --> 00:15:45,120
d

399
00:15:45,120 --> 00:15:46,480
and then

400
00:15:46,480 --> 00:15:49,040
i was kind of happy because i knew that

401
00:15:49,040 --> 00:15:51,040
zsh has a lot of

402
00:15:51,040 --> 00:15:53,279
interesting things that it can do when

403
00:15:53,279 --> 00:15:54,880
it starts

404
00:15:54,880 --> 00:15:58,160
if you look at zsh source code uh or you

405
00:15:58,160 --> 00:16:00,160
know what before that i i'm more more

406
00:16:00,160 --> 00:16:03,440
familiar with bash and i know bash rc so

407
00:16:03,440 --> 00:16:06,240
zsh has a has a kind of files called

408
00:16:06,240 --> 00:16:10,560
zshrc just like bashrc and uh they will

409
00:16:10,560 --> 00:16:13,040
run whatever command you you give them

410
00:16:13,040 --> 00:16:15,600
but they will um they will only start

411
00:16:15,600 --> 00:16:18,959
when you run zsh in interactive mode

412
00:16:18,959 --> 00:16:21,920
but then i thought closer and and uh

413
00:16:21,920 --> 00:16:25,360
even started looking at the zsh uh

414
00:16:25,360 --> 00:16:26,720
source code

415
00:16:26,720 --> 00:16:27,839
and

416
00:16:27,839 --> 00:16:30,560
even if you if you just look at the

417
00:16:30,560 --> 00:16:33,040
zsh source code you find these very very

418
00:16:33,040 --> 00:16:34,639
funny remarks like

419
00:16:34,639 --> 00:16:37,040
start and use zsh and get its default f

420
00:16:37,040 --> 00:16:39,120
path if some swine has tinkered with

421
00:16:39,120 --> 00:16:42,560
this in etc sh and we're out of luck and

422
00:16:42,560 --> 00:16:45,360
then i was like it is c-z-h-n what is

423
00:16:45,360 --> 00:16:47,199
that and then if you read about it

424
00:16:47,199 --> 00:16:50,160
you'll see that it's just like zs hrc

425
00:16:50,160 --> 00:16:52,320
but it runs regardless of whether you

426
00:16:52,320 --> 00:16:54,560
run in interactive mode or not

427
00:16:54,560 --> 00:16:56,320
and that's basically kind of funny

428
00:16:56,320 --> 00:16:58,320
because it makes the exploit super easy

429
00:16:58,320 --> 00:16:59,440
to run

430
00:16:59,440 --> 00:17:02,000
download a signed package a pkg file

431
00:17:02,000 --> 00:17:05,119
with that legitimately invokes zsh

432
00:17:05,119 --> 00:17:09,280
plant an easy etc cshn file and that

433
00:17:09,280 --> 00:17:10,160
file

434
00:17:10,160 --> 00:17:13,039
is a three liner right one of them is

435
00:17:13,039 --> 00:17:15,119
just going to look at the parent process

436
00:17:15,119 --> 00:17:18,400
id if that parent process id is is

437
00:17:18,400 --> 00:17:20,079
system install d

438
00:17:20,079 --> 00:17:22,000
then you can do whatever you want

439
00:17:22,000 --> 00:17:24,799
without any zip checks and that's pretty

440
00:17:24,799 --> 00:17:27,760
much it once you trigger the installer

441
00:17:27,760 --> 00:17:29,919
you're basically done and bam this is

442
00:17:29,919 --> 00:17:32,880
exactly what got me the sip bypass that

443
00:17:32,880 --> 00:17:35,919
i uh reported to apple it's already

444
00:17:35,919 --> 00:17:38,559
fixed it was um

445
00:17:38,559 --> 00:17:42,640
it was fixed i think in october in 2021

446
00:17:42,640 --> 00:17:46,400
and that's a pretty neat logical bug as

447
00:17:46,400 --> 00:17:49,600
a bonus round zshn

448
00:17:49,600 --> 00:17:52,080
besides the etc is the sh and if you

449
00:17:52,080 --> 00:17:54,960
have under the home directory dot zsh

450
00:17:54,960 --> 00:17:55,679
and

451
00:17:55,679 --> 00:17:57,840
and you can use it as a funny elevation

452
00:17:57,840 --> 00:18:00,080
of privilege attack

453
00:18:00,080 --> 00:18:04,240
if you run sudo-s for instance zsh does

454
00:18:04,240 --> 00:18:07,840
not change the home directory

455
00:18:07,840 --> 00:18:10,400
this tilde right here and will basically

456
00:18:10,400 --> 00:18:13,440
enumerate zsh and von startup

457
00:18:13,440 --> 00:18:15,120
so that's that's

458
00:18:15,120 --> 00:18:18,000
pretty weird and i even reported that to

459
00:18:18,000 --> 00:18:20,400
apple and they said that it's it was by

460
00:18:20,400 --> 00:18:23,679
design but you can still use it so

461
00:18:23,679 --> 00:18:26,480
uh so basically you can do the same idea

462
00:18:26,480 --> 00:18:29,120
just plant the cshn file on your home

463
00:18:29,120 --> 00:18:30,400
directory

464
00:18:30,400 --> 00:18:32,960
uh your you have to be in admin admin

465
00:18:32,960 --> 00:18:34,799
doesn't mean root it's a different thing

466
00:18:34,799 --> 00:18:36,960
in in mac os

467
00:18:36,960 --> 00:18:38,559
and basically plan the following

468
00:18:38,559 --> 00:18:41,360
following uh zsh and file

469
00:18:41,360 --> 00:18:42,559
if i

470
00:18:42,559 --> 00:18:46,559
if id u is zero if basically means if

471
00:18:46,559 --> 00:18:49,140
i'm root then do whatever you want

472
00:18:49,140 --> 00:18:51,840
[Music]

473
00:18:51,840 --> 00:18:54,320
this time it wasn't very easy to trigger

474
00:18:54,320 --> 00:18:56,240
a root sh

475
00:18:56,240 --> 00:18:58,240
but it's cool to just lurk and wait to

476
00:18:58,240 --> 00:19:00,000
be rooted

477
00:19:00,000 --> 00:19:02,400
as i said it's still unfixed

478
00:19:02,400 --> 00:19:04,559
but i want to let apple in the zsh

479
00:19:04,559 --> 00:19:07,360
community know

480
00:19:07,679 --> 00:19:10,720
a bit of shout outs after shootless my

481
00:19:10,720 --> 00:19:13,039
my say bypass it was discovered that

482
00:19:13,039 --> 00:19:15,360
there are similar issues in exploiting

483
00:19:15,360 --> 00:19:17,120
uh system installed

484
00:19:17,120 --> 00:19:19,520
i think perception point did that uh it

485
00:19:19,520 --> 00:19:22,960
got cv 2022-22583

486
00:19:22,960 --> 00:19:26,000
um in this case what they did is one of

487
00:19:26,000 --> 00:19:28,640
the things that i mentioned is that uh

488
00:19:28,640 --> 00:19:31,280
system installed will drop files in in

489
00:19:31,280 --> 00:19:33,600
temporary directory securely so

490
00:19:33,600 --> 00:19:35,120
apparently the

491
00:19:35,120 --> 00:19:38,000
this was secure but the file that the

492
00:19:38,000 --> 00:19:40,000
fact that they drop in slash temp was

493
00:19:40,000 --> 00:19:42,400
not as secure because as a root you can

494
00:19:42,400 --> 00:19:45,039
just remount slash time to do to your

495
00:19:45,039 --> 00:19:47,600
own directory you have to win basically

496
00:19:47,600 --> 00:19:48,640
a race

497
00:19:48,640 --> 00:19:50,240
but basically you can

498
00:19:50,240 --> 00:19:52,320
you can bypass zip with that and that's

499
00:19:52,320 --> 00:19:55,120
all already patched as well uh so shout

500
00:19:55,120 --> 00:19:57,039
outs to our perception point that took

501
00:19:57,039 --> 00:19:59,440
my idea to the next level perhaps

502
00:19:59,440 --> 00:20:00,559
um

503
00:20:00,559 --> 00:20:03,520
now i want to talk about tcc bypasses

504
00:20:03,520 --> 00:20:06,240
uh in this case again i promised that i

505
00:20:06,240 --> 00:20:06,960
do

506
00:20:06,960 --> 00:20:08,720
funny vulnerability names so this one

507
00:20:08,720 --> 00:20:11,840
was called power deer

508
00:20:11,840 --> 00:20:13,280
what is tcc

509
00:20:13,280 --> 00:20:16,799
tcc is transparency consent and control

510
00:20:16,799 --> 00:20:19,440
it's a mac os technology that was first

511
00:20:19,440 --> 00:20:22,240
introduced in mojave

512
00:20:22,240 --> 00:20:24,720
and i see it as the uac equivalent for

513
00:20:24,720 --> 00:20:26,880
mac os if you're familiar with uac on

514
00:20:26,880 --> 00:20:28,799
windows you know what i'm talking about

515
00:20:28,799 --> 00:20:30,880
it's basically whatever wants to control

516
00:20:30,880 --> 00:20:33,520
whatever in this case microsoft team

517
00:20:33,520 --> 00:20:35,919
would like to access the microphone and

518
00:20:35,919 --> 00:20:38,400
then you have to allow or not allow and

519
00:20:38,400 --> 00:20:41,520
this is controlled uh from a pane

520
00:20:41,520 --> 00:20:43,679
uh called security and privacy here you

521
00:20:43,679 --> 00:20:46,080
can see the various axis

522
00:20:46,080 --> 00:20:47,760
and there are more obviously as you can

523
00:20:47,760 --> 00:20:50,000
see from the scroll bar here bar here

524
00:20:50,000 --> 00:20:53,039
there are more access uh um

525
00:20:53,039 --> 00:20:55,200
controls than just the microphone camera

526
00:20:55,200 --> 00:20:56,480
and whatever

527
00:20:56,480 --> 00:20:58,720
but basically you can allow or disallow

528
00:20:58,720 --> 00:21:01,200
or add any apps here so that's pretty

529
00:21:01,200 --> 00:21:03,840
interesting

530
00:21:04,320 --> 00:21:06,960
and tcc is controlled by a database

531
00:21:06,960 --> 00:21:08,799
interestingly it's controlled by a

532
00:21:08,799 --> 00:21:11,440
sqlite database so if you're familiar

533
00:21:11,440 --> 00:21:14,320
with sql just sql under the hood

534
00:21:14,320 --> 00:21:16,159
and there are

535
00:21:16,159 --> 00:21:18,240
two tcc databases

536
00:21:18,240 --> 00:21:21,360
one of them is um is a system-wide tcc

537
00:21:21,360 --> 00:21:22,480
database

538
00:21:22,480 --> 00:21:24,320
and that's the path

539
00:21:24,320 --> 00:21:26,799
the other one is a perry user tcc

540
00:21:26,799 --> 00:21:29,039
database so if you have multiple users

541
00:21:29,039 --> 00:21:30,640
on the same mac os

542
00:21:30,640 --> 00:21:32,640
each of the each user will have its own

543
00:21:32,640 --> 00:21:35,200
tcc database and it will be just under

544
00:21:35,200 --> 00:21:37,120
the same path but with a tilde mark

545
00:21:37,120 --> 00:21:39,890
basically means your home directory

546
00:21:39,890 --> 00:21:41,280
[Music]

547
00:21:41,280 --> 00:21:43,039
and tcc

548
00:21:43,039 --> 00:21:46,240
is governed by a daemon called tccd

549
00:21:46,240 --> 00:21:48,559
again the d stands for demon

550
00:21:48,559 --> 00:21:50,480
and you'll have two of them one one is

551
00:21:50,480 --> 00:21:54,480
for the user and one for the system uh

552
00:21:54,480 --> 00:21:56,960
and uh tccd is the one enforcing the

553
00:21:56,960 --> 00:21:59,840
policy with the help of of uh another

554
00:21:59,840 --> 00:22:02,159
demon called security and there are

555
00:22:02,159 --> 00:22:03,919
interesting interplays between these two

556
00:22:03,919 --> 00:22:05,120
demons

557
00:22:05,120 --> 00:22:07,520
uh and i want to talk about these two uh

558
00:22:07,520 --> 00:22:08,720
tcc

559
00:22:08,720 --> 00:22:11,840
db files uh because they're protected

560
00:22:11,840 --> 00:22:14,640
you just can't like access them

561
00:22:14,640 --> 00:22:17,200
just just without any anything

562
00:22:17,200 --> 00:22:18,880
like any preparation

563
00:22:18,880 --> 00:22:21,520
uh one of them is uh the system tcc

564
00:22:21,520 --> 00:22:23,760
database this one right here

565
00:22:23,760 --> 00:22:26,159
is c protected if you remember sip from

566
00:22:26,159 --> 00:22:28,400
five minutes ago so it's protected by

567
00:22:28,400 --> 00:22:29,679
sip

568
00:22:29,679 --> 00:22:33,120
and it's also uh sandbox tcc protected

569
00:22:33,120 --> 00:22:35,200
so tcc kind of protects itself you can't

570
00:22:35,200 --> 00:22:35,919
just

571
00:22:35,919 --> 00:22:38,400
access this this file not even reading

572
00:22:38,400 --> 00:22:40,159
it

573
00:22:40,159 --> 00:22:43,280
the user's database is tcc protected

574
00:22:43,280 --> 00:22:45,440
it's not c protected but it's tcc

575
00:22:45,440 --> 00:22:47,840
protected you can't even read with these

576
00:22:47,840 --> 00:22:50,640
databases without full disk access full

577
00:22:50,640 --> 00:22:52,400
disk access is

578
00:22:52,400 --> 00:22:56,640
managed by the global c protected tccd

579
00:22:56,640 --> 00:22:58,080
so

580
00:22:58,080 --> 00:22:59,520
it's kind of like the chicken and the

581
00:22:59,520 --> 00:23:02,559
egg problem in order to write to tcc db

582
00:23:02,559 --> 00:23:04,880
you have to bypass tcc but in order to

583
00:23:04,880 --> 00:23:07,280
bypass tcc you might want to do some

584
00:23:07,280 --> 00:23:09,679
stuff to the tcc database it seems that

585
00:23:09,679 --> 00:23:12,070
apple did a pretty good job here

586
00:23:12,070 --> 00:23:13,200
[Music]

587
00:23:13,200 --> 00:23:15,360
unless you have full disk access which

588
00:23:15,360 --> 00:23:18,480
is kind of a big deal sorry about that

589
00:23:18,480 --> 00:23:20,400
a lot of spoilers here

590
00:23:20,400 --> 00:23:22,960
this is an example uh this is me trying

591
00:23:22,960 --> 00:23:24,640
to list uh

592
00:23:24,640 --> 00:23:28,159
list the files under the directory user

593
00:23:28,159 --> 00:23:30,640
my username library application support

594
00:23:30,640 --> 00:23:33,760
com apple tcc and you see that even me

595
00:23:33,760 --> 00:23:37,280
running as root i can't like list files

596
00:23:37,280 --> 00:23:39,120
under that directory it will give you

597
00:23:39,120 --> 00:23:41,120
operation not permitted interestingly

598
00:23:41,120 --> 00:23:42,880
enough if you guess the

599
00:23:42,880 --> 00:23:45,200
if you know that the tcc database name

600
00:23:45,200 --> 00:23:47,039
is tcc.db

601
00:23:47,039 --> 00:23:49,120
it will let me list it and that's a

602
00:23:49,120 --> 00:23:51,120
pretty neat trick and i think it was

603
00:23:51,120 --> 00:23:52,640
mentioned uh

604
00:23:52,640 --> 00:23:54,400
like more than a couple times in the

605
00:23:54,400 --> 00:23:56,559
history

606
00:23:56,559 --> 00:23:58,720
that's a cool way of knowing whether you

607
00:23:58,720 --> 00:24:01,120
have full disk access or not in a full

608
00:24:01,120 --> 00:24:03,039
disk access scenario you'll be able to

609
00:24:03,039 --> 00:24:04,880
get reasonable

610
00:24:04,880 --> 00:24:07,520
output from this first line but

611
00:24:07,520 --> 00:24:09,360
second line will always be

612
00:24:09,360 --> 00:24:10,720
always be there

613
00:24:10,720 --> 00:24:12,480
um

614
00:24:12,480 --> 00:24:14,480
that's a bit about the entitlements of

615
00:24:14,480 --> 00:24:17,760
tccd i did mention tccd as the enforcing

616
00:24:17,760 --> 00:24:20,000
demon for tcc if you look at the

617
00:24:20,000 --> 00:24:22,000
entitlements you see that it has many

618
00:24:22,000 --> 00:24:25,200
intelligence interestingly it will have

619
00:24:25,200 --> 00:24:26,080
com

620
00:24:26,080 --> 00:24:29,039
private sorry com apple private tcc

621
00:24:29,039 --> 00:24:31,760
allow that basically means and tcc

622
00:24:31,760 --> 00:24:34,240
service system policy all files

623
00:24:34,240 --> 00:24:36,400
and that's pretty interesting i did

624
00:24:36,400 --> 00:24:38,559
mention uh in the

625
00:24:38,559 --> 00:24:40,799
millionth time this talk i did mention

626
00:24:40,799 --> 00:24:42,960
that entitled uh

627
00:24:42,960 --> 00:24:45,120
binaries are pretty interesting

628
00:24:45,120 --> 00:24:48,720
and tccd is obviously very entitled

629
00:24:48,720 --> 00:24:49,760
binary

630
00:24:49,760 --> 00:24:51,760
and i want to talk about this com apple

631
00:24:51,760 --> 00:24:55,660
private tcc allow entitlement

632
00:24:55,660 --> 00:24:56,880
[Music]

633
00:24:56,880 --> 00:24:58,640
in a sec

634
00:24:58,640 --> 00:25:01,600
a naive tcc bypass if you do have full

635
00:25:01,600 --> 00:25:04,480
disk access then you can just modify the

636
00:25:04,480 --> 00:25:07,200
user's tcc database even without root

637
00:25:07,200 --> 00:25:08,799
that's pretty interesting

638
00:25:08,799 --> 00:25:11,919
if you see here you'll see that this tcc

639
00:25:11,919 --> 00:25:14,480
database the user tcc database

640
00:25:14,480 --> 00:25:17,520
is owned by me right the user and the

641
00:25:17,520 --> 00:25:20,000
user can just write to it you see the w

642
00:25:20,000 --> 00:25:22,640
right here that basically means that

643
00:25:22,640 --> 00:25:25,279
if i have full disk access

644
00:25:25,279 --> 00:25:26,320
but

645
00:25:26,320 --> 00:25:28,559
don't even run as root i'm able to

646
00:25:28,559 --> 00:25:30,799
modify the tcca database and basically

647
00:25:30,799 --> 00:25:33,840
kind of almost the game over um

648
00:25:33,840 --> 00:25:36,080
so you can check if terminal has full

649
00:25:36,080 --> 00:25:38,240
disk access you can deduce that by

650
00:25:38,240 --> 00:25:42,400
parsing logs doing this operation or by

651
00:25:42,400 --> 00:25:44,240
the presence of certain apps i think

652
00:25:44,240 --> 00:25:48,240
that jam jamf in the past is to require

653
00:25:48,240 --> 00:25:51,360
full disk access to terminal

654
00:25:51,360 --> 00:25:53,760
so if you do have full disk access

655
00:25:53,760 --> 00:25:56,480
you should just write to tcc data the

656
00:25:56,480 --> 00:25:58,640
tcc database

657
00:25:58,640 --> 00:26:01,120
as a as a defender if you guys work for

658
00:26:01,120 --> 00:26:02,400
blue teams

659
00:26:02,400 --> 00:26:04,159
you should always watch out for file

660
00:26:04,159 --> 00:26:06,480
rights and file reads of the tcc

661
00:26:06,480 --> 00:26:07,840
database

662
00:26:07,840 --> 00:26:09,919
that could be a strong indication if not

663
00:26:09,919 --> 00:26:12,080
done by tccd that could be a strong

664
00:26:12,080 --> 00:26:13,760
indication that someone is screwing up

665
00:26:13,760 --> 00:26:16,159
with your tcc database

666
00:26:16,159 --> 00:26:19,120
and interestingly this idea of basically

667
00:26:19,120 --> 00:26:20,720
granting full disk access to the

668
00:26:20,720 --> 00:26:23,840
terminal and modifying the tcc database

669
00:26:23,840 --> 00:26:28,959
was originally abused by dropbox itself

670
00:26:29,679 --> 00:26:31,919
just an example

671
00:26:31,919 --> 00:26:34,960
this is me trying to

672
00:26:34,960 --> 00:26:36,000
trying to

673
00:26:36,000 --> 00:26:38,400
touch the tcca database the thing that

674
00:26:38,400 --> 00:26:40,799
you saw earlier and if you look at the

675
00:26:40,799 --> 00:26:42,000
logs

676
00:26:42,000 --> 00:26:43,440
you'll see that

677
00:26:43,440 --> 00:26:46,400
it says handling access request to ktcc

678
00:26:46,400 --> 00:26:47,760
service

679
00:26:47,760 --> 00:26:49,760
system policy all files from the

680
00:26:49,760 --> 00:26:50,880
terminal

681
00:26:50,880 --> 00:26:53,760
and it will just be eventually be access

682
00:26:53,760 --> 00:26:57,360
denied by service policy so that's

683
00:26:57,360 --> 00:26:59,039
that's pretty much how

684
00:26:59,039 --> 00:27:01,760
how you can tell from the logs that tcc

685
00:27:01,760 --> 00:27:04,799
uh rejected or accepted your uh

686
00:27:04,799 --> 00:27:07,360
your access basically

687
00:27:07,360 --> 00:27:09,679
this is how the tcc database looks like

688
00:27:09,679 --> 00:27:11,600
this is of course when i do have full

689
00:27:11,600 --> 00:27:12,960
disk access

690
00:27:12,960 --> 00:27:15,760
you can see that uh you have sql i3

691
00:27:15,760 --> 00:27:17,520
that's the basically the tool that i'm

692
00:27:17,520 --> 00:27:19,360
using comes straight off the out of the

693
00:27:19,360 --> 00:27:20,960
box in mac os

694
00:27:20,960 --> 00:27:22,640
and you can just look at the tcc

695
00:27:22,640 --> 00:27:24,640
database if you can see here i just

696
00:27:24,640 --> 00:27:26,559
select everything from

697
00:27:26,559 --> 00:27:29,360
access and you'll see that it has

698
00:27:29,360 --> 00:27:32,240
certain rows right first uh first one is

699
00:27:32,240 --> 00:27:33,679
kind of the

700
00:27:33,679 --> 00:27:36,480
tcc access type if that makes sense

701
00:27:36,480 --> 00:27:38,960
second one is the identifier of the app

702
00:27:38,960 --> 00:27:40,159
in this case

703
00:27:40,159 --> 00:27:43,039
text edit and then some numbers and then

704
00:27:43,039 --> 00:27:45,520
certain other things some question marks

705
00:27:45,520 --> 00:27:47,840
and so on and we'll we'll get to how

706
00:27:47,840 --> 00:27:50,159
this thing is built now

707
00:27:50,159 --> 00:27:52,720
this format was changed between

708
00:27:52,720 --> 00:27:55,279
operating systems but i think i think

709
00:27:55,279 --> 00:27:58,240
it's it's still like that in um

710
00:27:58,240 --> 00:28:00,240
in the latest version

711
00:28:00,240 --> 00:28:01,520
um

712
00:28:01,520 --> 00:28:04,399
and so what is ktcc service whatever as

713
00:28:04,399 --> 00:28:07,520
you can see here ktcc service ubiquity

714
00:28:07,520 --> 00:28:10,080
ktcc service system policy desktop

715
00:28:10,080 --> 00:28:12,399
folder and so on so

716
00:28:12,399 --> 00:28:15,440
as i did say tcc has fine-grained access

717
00:28:15,440 --> 00:28:17,360
and this is not a complete list by any

718
00:28:17,360 --> 00:28:20,000
means but these are kind of the access

719
00:28:20,000 --> 00:28:22,000
names next to the description so for

720
00:28:22,000 --> 00:28:24,320
instance ubiquity means that you can

721
00:28:24,320 --> 00:28:27,039
have icloud access liverpool basically

722
00:28:27,039 --> 00:28:28,720
means that you can have location

723
00:28:28,720 --> 00:28:30,640
services

724
00:28:30,640 --> 00:28:32,559
microphone basically means that you have

725
00:28:32,559 --> 00:28:35,279
microphone access and so on note that

726
00:28:35,279 --> 00:28:37,760
some of them are saved in the user tcc

727
00:28:37,760 --> 00:28:40,080
database and some of them like the

728
00:28:40,080 --> 00:28:42,240
full disk access the system

729
00:28:42,240 --> 00:28:43,760
system

730
00:28:43,760 --> 00:28:45,360
policy all files

731
00:28:45,360 --> 00:28:48,080
are saved in the system tcc database

732
00:28:48,080 --> 00:28:51,279
which is more problematic to write to

733
00:28:51,279 --> 00:28:52,559
because

734
00:28:52,559 --> 00:28:54,799
it's c protected

735
00:28:54,799 --> 00:28:59,760
besides the fact that it's tcc protected

736
00:28:59,760 --> 00:29:03,440
for some tcc services you also have to

737
00:29:03,440 --> 00:29:05,840
have a certain blob and let me see if i

738
00:29:05,840 --> 00:29:10,000
have one of them here no i don't but

739
00:29:10,000 --> 00:29:12,559
for some tcc services another blob

740
00:29:12,559 --> 00:29:14,159
called cs rec

741
00:29:14,159 --> 00:29:16,320
is verified and that's supposed to make

742
00:29:16,320 --> 00:29:19,760
tcc database more secure in case uh uh

743
00:29:19,760 --> 00:29:21,840
code signing changes so for instance

744
00:29:21,840 --> 00:29:23,200
think that

745
00:29:23,200 --> 00:29:25,279
you have an app it has microphone access

746
00:29:25,279 --> 00:29:28,080
and then someone just uninstalls that

747
00:29:28,080 --> 00:29:30,720
app and installs a different app with

748
00:29:30,720 --> 00:29:32,720
the same name or something like that so

749
00:29:32,720 --> 00:29:34,880
that's basically kind of an extra

750
00:29:34,880 --> 00:29:37,919
verification on the app itself

751
00:29:37,919 --> 00:29:40,399
and that blob encodes the code signing

752
00:29:40,399 --> 00:29:42,159
requirements of the app

753
00:29:42,159 --> 00:29:44,000
and interestingly you can just create

754
00:29:44,000 --> 00:29:45,840
your own that's just an example of how

755
00:29:45,840 --> 00:29:48,480
to create a cs rack for teams

756
00:29:48,480 --> 00:29:51,200
and that's basically how you do it uh i

757
00:29:51,200 --> 00:29:53,279
know it's kind of ugly but basically

758
00:29:53,279 --> 00:29:55,200
running code sign and then

759
00:29:55,200 --> 00:29:57,440
basically doing a bunch of

760
00:29:57,440 --> 00:29:59,760
a bunch of strings and fitting them into

761
00:29:59,760 --> 00:30:02,320
a binary called cs rack will basically

762
00:30:02,320 --> 00:30:05,039
give you a binary file that encodes this

763
00:30:05,039 --> 00:30:07,039
cs requirement blob

764
00:30:07,039 --> 00:30:09,440
and that's just a little hurdle but what

765
00:30:09,440 --> 00:30:11,520
i'm trying to say is that if you already

766
00:30:11,520 --> 00:30:13,600
have code um

767
00:30:13,600 --> 00:30:15,679
a way to run code on the box then it

768
00:30:15,679 --> 00:30:18,480
shouldn't stop you from doing anything

769
00:30:18,480 --> 00:30:20,960
i hope that makes sense let me just get

770
00:30:20,960 --> 00:30:22,960
back to my slide

771
00:30:22,960 --> 00:30:24,799
um

772
00:30:24,799 --> 00:30:27,120
and i want to talk about the com

773
00:30:27,120 --> 00:30:29,440
apple private tcc allow that's the

774
00:30:29,440 --> 00:30:31,600
entitlement that we saw earlier this

775
00:30:31,600 --> 00:30:34,799
time for tcc enablement

776
00:30:34,799 --> 00:30:36,799
uh as i did mention private apple

777
00:30:36,799 --> 00:30:38,640
binaries may have entitlements that

778
00:30:38,640 --> 00:30:41,360
allow them to bypass tcc checks they

779
00:30:41,360 --> 00:30:43,200
just like the game with sip but this

780
00:30:43,200 --> 00:30:44,720
time for tcc

781
00:30:44,720 --> 00:30:47,279
uh and this is how tccd

782
00:30:47,279 --> 00:30:50,159
can basically touch the tcc database

783
00:30:50,159 --> 00:30:52,240
itself right beside the fact that it

784
00:30:52,240 --> 00:30:55,520
enforces it it kind of

785
00:30:55,520 --> 00:30:57,600
has full disk access because if you

786
00:30:57,600 --> 00:31:00,320
remember from four slides ago

787
00:31:00,320 --> 00:31:03,440
it has the ktcc system service policy

788
00:31:03,440 --> 00:31:07,200
all files that's tccd so tccd

789
00:31:07,200 --> 00:31:09,679
is entitled to have

790
00:31:09,679 --> 00:31:11,679
this thing which basically means full

791
00:31:11,679 --> 00:31:13,760
disk access which basically means that

792
00:31:13,760 --> 00:31:15,840
it can touch whatever

793
00:31:15,840 --> 00:31:17,760
database it

794
00:31:17,760 --> 00:31:18,640
uh

795
00:31:18,640 --> 00:31:19,600
so

796
00:31:19,600 --> 00:31:22,320
that's that's how tccd works

797
00:31:22,320 --> 00:31:24,559
and that's an obvious attack surface for

798
00:31:24,559 --> 00:31:28,159
tcc bypasses just like with zip

799
00:31:28,159 --> 00:31:29,679
obvious technique

800
00:31:29,679 --> 00:31:31,679
find a binary with calm apple private

801
00:31:31,679 --> 00:31:34,640
tcc allow tamper with it in some way to

802
00:31:34,640 --> 00:31:36,640
affect its code flow including

803
00:31:36,640 --> 00:31:39,120
extensions or whatnot or inject to it

804
00:31:39,120 --> 00:31:41,120
somehow and get

805
00:31:41,120 --> 00:31:43,840
get its fine-grained tcc access so if

806
00:31:43,840 --> 00:31:46,480
you find a binary that's allowed to

807
00:31:46,480 --> 00:31:48,159
touch let's say the microphone and you

808
00:31:48,159 --> 00:31:50,799
inject into it then you can also touch

809
00:31:50,799 --> 00:31:53,120
the microphone without like without any

810
00:31:53,120 --> 00:31:54,960
any pop-ups or whatnot

811
00:31:54,960 --> 00:31:56,080
basically

812
00:31:56,080 --> 00:31:58,559
uh bypassing tcc for microphone in this

813
00:31:58,559 --> 00:32:01,200
case

814
00:32:01,200 --> 00:32:03,679
interestingly apple takes tcc very

815
00:32:03,679 --> 00:32:05,760
seriously if you find it a good enough

816
00:32:05,760 --> 00:32:08,399
tcc bypass you can get like

817
00:32:08,399 --> 00:32:10,720
big bags with dollar signs thrown at you

818
00:32:10,720 --> 00:32:13,200
from apple i'm still waiting for my big

819
00:32:13,200 --> 00:32:15,279
bag of money by the way if someone from

820
00:32:15,279 --> 00:32:16,799
apple sees this

821
00:32:16,799 --> 00:32:18,799
but basically this is this is like

822
00:32:18,799 --> 00:32:21,440
documented in the apple website so tcc

823
00:32:21,440 --> 00:32:23,760
is very serious to apple

824
00:32:23,760 --> 00:32:26,000
and again i do admit that they did a

825
00:32:26,000 --> 00:32:28,320
pretty good job with tcc

826
00:32:28,320 --> 00:32:30,320
although

827
00:32:30,320 --> 00:32:33,519
there have been tcc bypasses in the past

828
00:32:33,519 --> 00:32:37,200
this is from 2020 this isn't mine

829
00:32:37,200 --> 00:32:39,360
[Music]

830
00:32:39,360 --> 00:32:42,320
time machine is is besides besides a

831
00:32:42,320 --> 00:32:44,240
cool thing in the movies it's also a

832
00:32:44,240 --> 00:32:46,640
backup mechanism in mac os

833
00:32:46,640 --> 00:32:48,480
uh there is a thing called time machine

834
00:32:48,480 --> 00:32:51,039
where you can backup and restore files

835
00:32:51,039 --> 00:32:53,440
and interestingly it saves stuff that

836
00:32:53,440 --> 00:32:56,159
you can mount later with apfs mount i

837
00:32:56,159 --> 00:32:58,640
won't go into details but apfs is like

838
00:32:58,640 --> 00:33:00,399
the file system and mounting basically

839
00:33:00,399 --> 00:33:02,880
means mounting a file system

840
00:33:02,880 --> 00:33:04,720
um interestingly

841
00:33:04,720 --> 00:33:06,720
time system backups could be mounted

842
00:33:06,720 --> 00:33:10,159
with apfs mount with the no owner flag

843
00:33:10,159 --> 00:33:12,000
if you run with a no owner flag it

844
00:33:12,000 --> 00:33:15,039
basically uh because it backs up uh

845
00:33:15,039 --> 00:33:17,600
because the backup contains tcc database

846
00:33:17,600 --> 00:33:19,440
you can read without the without

847
00:33:19,440 --> 00:33:21,519
restrictions by anyone it basically

848
00:33:21,519 --> 00:33:24,799
means that uh the semantics of the tcc

849
00:33:24,799 --> 00:33:27,360
databases are gone and you can have a

850
00:33:27,360 --> 00:33:28,880
single command line to exploit this is

851
00:33:28,880 --> 00:33:30,720
how it might look like

852
00:33:30,720 --> 00:33:33,600
uh of course this is already fixed but

853
00:33:33,600 --> 00:33:35,519
just an example this is just reading a

854
00:33:35,519 --> 00:33:38,320
tcc database right and still consider

855
00:33:38,320 --> 00:33:40,640
the tcc bypass

856
00:33:40,640 --> 00:33:43,279
why by the way because if i can read the

857
00:33:43,279 --> 00:33:44,960
tcc database

858
00:33:44,960 --> 00:33:47,360
i know which apps have

859
00:33:47,360 --> 00:33:49,519
certain tcc

860
00:33:49,519 --> 00:33:50,559
access

861
00:33:50,559 --> 00:33:53,120
controls for instance teams has

862
00:33:53,120 --> 00:33:55,840
microphone and then i can perhaps

863
00:33:55,840 --> 00:33:59,199
piggyback ride or something

864
00:34:00,320 --> 00:34:01,840
and this is this is the thing that i

865
00:34:01,840 --> 00:34:05,760
want to focus on today tccd exploit this

866
00:34:05,760 --> 00:34:08,799
is from 2020

867
00:34:09,359 --> 00:34:11,119
interestingly you can

868
00:34:11,119 --> 00:34:12,879
because tccd

869
00:34:12,879 --> 00:34:13,760
is

870
00:34:13,760 --> 00:34:15,040
well

871
00:34:15,040 --> 00:34:16,960
regardless regardless of that exploit

872
00:34:16,960 --> 00:34:18,719
actually this is a pretty interesting

873
00:34:18,719 --> 00:34:21,918
thing to note because the entitlement is

874
00:34:21,918 --> 00:34:25,199
not bound to the binary path you can

875
00:34:25,199 --> 00:34:27,440
copy an entitled binary and it will

876
00:34:27,440 --> 00:34:30,000
still stay entitled right so this is

877
00:34:30,000 --> 00:34:33,760
just a thing to save in your brains

878
00:34:33,760 --> 00:34:35,760
tcc still maintains its original

879
00:34:35,760 --> 00:34:37,599
entitlements as they're embedded in the

880
00:34:37,599 --> 00:34:40,000
binary right so if i copy tccd to

881
00:34:40,000 --> 00:34:43,440
somewhere else it will still work

882
00:34:43,440 --> 00:34:46,480
one more thing to note when tccd

883
00:34:46,480 --> 00:34:48,399
executes it will

884
00:34:48,399 --> 00:34:52,399
try to find the user's tcc database

885
00:34:52,399 --> 00:34:54,800
sorry again it will try to find the tcc

886
00:34:54,800 --> 00:34:56,960
database by expanding the path

887
00:34:56,960 --> 00:34:59,640
home library application support

888
00:34:59,640 --> 00:35:02,960
com.apple.tcc and then tcc.db right this

889
00:35:02,960 --> 00:35:03,680
is

890
00:35:03,680 --> 00:35:05,920
for every user it has its own its home

891
00:35:05,920 --> 00:35:06,880
folder

892
00:35:06,880 --> 00:35:08,000
and

893
00:35:08,000 --> 00:35:10,079
interestingly if you poison the home

894
00:35:10,079 --> 00:35:12,240
environment variable you can basically

895
00:35:12,240 --> 00:35:15,440
full tccd to think that the tcc database

896
00:35:15,440 --> 00:35:17,839
is somewhere else right

897
00:35:17,839 --> 00:35:19,440
um

898
00:35:19,440 --> 00:35:22,640
and you can basically poison it uh uh

899
00:35:22,640 --> 00:35:25,920
by by launching with launch ctl i won't

900
00:35:25,920 --> 00:35:28,560
go into the into details on why that

901
00:35:28,560 --> 00:35:30,880
works but basically tccd

902
00:35:30,880 --> 00:35:34,000
is uh run by launch d

903
00:35:34,000 --> 00:35:35,760
and basically you can control the

904
00:35:35,760 --> 00:35:37,839
environment variables that launch d

905
00:35:37,839 --> 00:35:40,400
provides to its children in some way in

906
00:35:40,400 --> 00:35:42,480
this way specifically so this is

907
00:35:42,480 --> 00:35:45,119
basically how the thing worked

908
00:35:45,119 --> 00:35:48,000
and um the idea is pretty pretty cool

909
00:35:48,000 --> 00:35:50,240
just plant a new tcc database somewhere

910
00:35:50,240 --> 00:35:52,960
else change the home environment kill

911
00:35:52,960 --> 00:35:55,119
tccd change the home environment

912
00:35:55,119 --> 00:35:57,839
variable to that location and restart

913
00:35:57,839 --> 00:36:01,280
tccd and voila you got a tcc bypass

914
00:36:01,280 --> 00:36:02,800
um

915
00:36:02,800 --> 00:36:04,960
interestingly it was also

916
00:36:04,960 --> 00:36:07,760
different tcc bypasses were exploited by

917
00:36:07,760 --> 00:36:11,359
malware in this case this was in 2021

918
00:36:11,359 --> 00:36:13,200
the malware had a list of well-known

919
00:36:13,200 --> 00:36:15,200
apps with certain permissions just like

920
00:36:15,200 --> 00:36:17,920
zoom has microphone access for instance

921
00:36:17,920 --> 00:36:20,079
and what it did is to create a bundle

922
00:36:20,079 --> 00:36:21,920
inside the donor app that's how it

923
00:36:21,920 --> 00:36:23,599
refers to the app

924
00:36:23,599 --> 00:36:26,320
so for example applications zoom dot us

925
00:36:26,320 --> 00:36:29,520
dot app slash content slash mac os slash

926
00:36:29,520 --> 00:36:31,200
another app

927
00:36:31,200 --> 00:36:33,599
right so it's like an app within an app

928
00:36:33,599 --> 00:36:36,320
and there was an issue where basically

929
00:36:36,320 --> 00:36:38,480
uh the policy would

930
00:36:38,480 --> 00:36:41,760
attribute that to zoom itself and not to

931
00:36:41,760 --> 00:36:44,000
the this actual app and basically again

932
00:36:44,000 --> 00:36:46,880
piggyback riding on an existing app

933
00:36:46,880 --> 00:36:49,680
so uh this was kind of funny to see

934
00:36:49,680 --> 00:36:52,320
apple fixed it already of course uh but

935
00:36:52,320 --> 00:36:55,040
just fyi malware authors always look for

936
00:36:55,040 --> 00:36:56,480
these kind of things

937
00:36:56,480 --> 00:36:58,000
um

938
00:36:58,000 --> 00:36:58,800
and

939
00:36:58,800 --> 00:36:59,839
so when i

940
00:36:59,839 --> 00:37:02,800
started learning about tcc i thought

941
00:37:02,800 --> 00:37:04,320
perhaps we should take like this

942
00:37:04,320 --> 00:37:06,079
vulnerability the

943
00:37:06,079 --> 00:37:08,320
home directory poisoning and see how

944
00:37:08,320 --> 00:37:09,920
apple solved it

945
00:37:09,920 --> 00:37:12,480
and the fix was pretty interesting

946
00:37:12,480 --> 00:37:13,920
if you can see here

947
00:37:13,920 --> 00:37:17,200
uh what apple did this is from tccd

948
00:37:17,200 --> 00:37:19,520
uh just by reverse engineering it you'll

949
00:37:19,520 --> 00:37:23,040
see that it will get the user id get the

950
00:37:23,040 --> 00:37:25,760
the user uh well it's not password it's

951
00:37:25,760 --> 00:37:28,000
it's it's basically a password structure

952
00:37:28,000 --> 00:37:30,720
that contains all sorts of information

953
00:37:30,720 --> 00:37:34,000
including the home directory pw deer is

954
00:37:34,000 --> 00:37:36,640
specifically the home directory of that

955
00:37:36,640 --> 00:37:37,680
user

956
00:37:37,680 --> 00:37:40,079
and basically extract that from there so

957
00:37:40,079 --> 00:37:42,640
what the fix was is

958
00:37:42,640 --> 00:37:44,880
to not expand an environment variable

959
00:37:44,880 --> 00:37:47,599
but just extract it directly from the

960
00:37:47,599 --> 00:37:48,640
user's

961
00:37:48,640 --> 00:37:51,040
information or registration if that

962
00:37:51,040 --> 00:37:52,160
makes sense

963
00:37:52,160 --> 00:37:54,400
so this is how apple fixed this

964
00:37:54,400 --> 00:37:56,640
issue and in my opinion it was not good

965
00:37:56,640 --> 00:37:58,079
enough

966
00:37:58,079 --> 00:38:01,680
if you look at how get pw

967
00:38:01,680 --> 00:38:04,960
pwu id works it basically gets the login

968
00:38:04,960 --> 00:38:07,200
directory of the user which can be

969
00:38:07,200 --> 00:38:11,040
changed if you have administrator access

970
00:38:11,040 --> 00:38:13,280
so if you have administrator access you

971
00:38:13,280 --> 00:38:15,440
have this command command line right

972
00:38:15,440 --> 00:38:18,400
here dscl and you can just

973
00:38:18,400 --> 00:38:20,400
this is the attribute that you want to

974
00:38:20,400 --> 00:38:22,640
change nfs home directory and you can

975
00:38:22,640 --> 00:38:24,240
just change it to

976
00:38:24,240 --> 00:38:26,160
time slash whatever or you can change it

977
00:38:26,160 --> 00:38:29,359
to an arbitrary value

978
00:38:29,440 --> 00:38:31,520
so this is what you can do to bypass

979
00:38:31,520 --> 00:38:34,079
their fix

980
00:38:34,640 --> 00:38:36,720
and one word about

981
00:38:36,720 --> 00:38:39,359
users registration and dscl

982
00:38:39,359 --> 00:38:42,160
in apple in mac os specifically

983
00:38:42,160 --> 00:38:42,510
the

984
00:38:42,510 --> 00:38:43,839
[Music]

985
00:38:43,839 --> 00:38:46,480
user's information is is is guarded by a

986
00:38:46,480 --> 00:38:48,720
thing is maintained by something called

987
00:38:48,720 --> 00:38:51,520
open directory and the way to talk to it

988
00:38:51,520 --> 00:38:54,640
is by dscl so that's basically the idea

989
00:38:54,640 --> 00:38:57,440
here and this will effectively change

990
00:38:57,440 --> 00:38:59,839
this thing right here which is the

991
00:38:59,839 --> 00:39:01,359
considered to be the home directory of

992
00:39:01,359 --> 00:39:03,920
that user

993
00:39:04,079 --> 00:39:06,320
apparently you can't simply call dscl

994
00:39:06,320 --> 00:39:08,800
create just like i did here

995
00:39:08,800 --> 00:39:11,520
because nfs home directory is hardened

996
00:39:11,520 --> 00:39:13,760
you have to have this policy right here

997
00:39:13,760 --> 00:39:16,320
this tcc policy and saved in the user's

998
00:39:16,320 --> 00:39:19,040
local db it's hidden from the ui but

999
00:39:19,040 --> 00:39:21,760
you'll you might still get a pop-up

1000
00:39:21,760 --> 00:39:24,000
note that this pop-up looks kind of

1001
00:39:24,000 --> 00:39:26,400
benign it doesn't say trying to bypass

1002
00:39:26,400 --> 00:39:29,200
tcc or something but as someone who

1003
00:39:29,200 --> 00:39:31,200
writes malware you don't want to have

1004
00:39:31,200 --> 00:39:32,800
that thing right you don't want to have

1005
00:39:32,800 --> 00:39:35,119
a pop-up and after some research i

1006
00:39:35,119 --> 00:39:36,800
discovered two commands one of them is

1007
00:39:36,800 --> 00:39:39,119
ds import and the one other one was ds

1008
00:39:39,119 --> 00:39:41,839
export and this basically imports and

1009
00:39:41,839 --> 00:39:44,480
exports stuff to and from directory

1010
00:39:44,480 --> 00:39:45,680
services

1011
00:39:45,680 --> 00:39:49,359
and ds export was entitled enough so it

1012
00:39:49,359 --> 00:39:51,760
won't have this pop-up so basically the

1013
00:39:51,760 --> 00:39:53,599
idea was pretty simple

1014
00:39:53,599 --> 00:39:56,960
uh export your own uh

1015
00:39:56,960 --> 00:39:59,920
ds entry change the home directory in

1016
00:39:59,920 --> 00:40:04,160
the file import it and you're done

1017
00:40:04,240 --> 00:40:06,640
so that was my first exploit and i sent

1018
00:40:06,640 --> 00:40:09,280
that to apple and they worked on quite a

1019
00:40:09,280 --> 00:40:12,079
long time to fix it and

1020
00:40:12,079 --> 00:40:15,040
they fixed it by accident interestingly

1021
00:40:15,040 --> 00:40:17,680
when they released monterrey uh they

1022
00:40:17,680 --> 00:40:20,560
changed the entitlement of ds import and

1023
00:40:20,560 --> 00:40:22,839
that basically kind of killed my

1024
00:40:22,839 --> 00:40:25,359
exploit and

1025
00:40:25,359 --> 00:40:27,599
it was a happy accident for them

1026
00:40:27,599 --> 00:40:30,240
but again i was looking at other apple

1027
00:40:30,240 --> 00:40:33,839
binaries and found this thing config d

1028
00:40:33,839 --> 00:40:36,960
config d is another apple uh

1029
00:40:36,960 --> 00:40:39,839
entitled binary and it's very attractive

1030
00:40:39,839 --> 00:40:42,079
because it has com apple private tcc

1031
00:40:42,079 --> 00:40:43,119
allow

1032
00:40:43,119 --> 00:40:45,200
uh and

1033
00:40:45,200 --> 00:40:46,960
interestingly i won't talk about it too

1034
00:40:46,960 --> 00:40:48,960
much but it doesn't have a hardened run

1035
00:40:48,960 --> 00:40:51,599
time and ext it's extensible it

1036
00:40:51,599 --> 00:40:53,359
basically means that you can probably

1037
00:40:53,359 --> 00:40:55,440
inject to it and that's basically what i

1038
00:40:55,440 --> 00:40:56,240
did

1039
00:40:56,240 --> 00:41:00,079
and all the information is here and um

1040
00:41:00,079 --> 00:41:03,200
basically the exploit was plant a fake

1041
00:41:03,200 --> 00:41:06,079
tcc database inject to this guy to

1042
00:41:06,079 --> 00:41:08,000
change the home directory

1043
00:41:08,000 --> 00:41:11,359
kill and restart tccd and you have a tcc

1044
00:41:11,359 --> 00:41:12,960
bypass

1045
00:41:12,960 --> 00:41:14,000
um

1046
00:41:14,000 --> 00:41:16,960
shout outs there are some researchers uh

1047
00:41:16,960 --> 00:41:20,880
that did very similar things to do uh

1048
00:41:20,880 --> 00:41:22,240
regular here

1049
00:41:22,240 --> 00:41:25,839
uh injected to the open directories

1050
00:41:25,839 --> 00:41:27,839
to the directory services application

1051
00:41:27,839 --> 00:41:29,119
for instance

1052
00:41:29,119 --> 00:41:30,079
um

1053
00:41:30,079 --> 00:41:33,520
and and did something very similar

1054
00:41:33,520 --> 00:41:35,040
i think he

1055
00:41:35,040 --> 00:41:37,680
he also has a very cool uh blog post

1056
00:41:37,680 --> 00:41:39,599
about it so check it out

1057
00:41:39,599 --> 00:41:42,079
um and basically there are other cool

1058
00:41:42,079 --> 00:41:44,880
ways of bypassing tcc some win by

1059
00:41:44,880 --> 00:41:46,800
knockout in my opinion some win by

1060
00:41:46,800 --> 00:41:50,000
points but tcc is is more fragile than

1061
00:41:50,000 --> 00:41:52,160
it first looks so

1062
00:41:52,160 --> 00:41:54,880
you too can look for tcc bypasses in my

1063
00:41:54,880 --> 00:41:57,119
opinion

1064
00:41:57,119 --> 00:41:58,800
bonus round this is something that i

1065
00:41:58,800 --> 00:41:59,920
started

1066
00:41:59,920 --> 00:42:02,640
looking at this is undisclosed

1067
00:42:02,640 --> 00:42:03,839
but

1068
00:42:03,839 --> 00:42:06,240
this is just if you look at

1069
00:42:06,240 --> 00:42:10,160
tccd and open it with uh with ida you'll

1070
00:42:10,160 --> 00:42:12,079
see that it has very interesting strings

1071
00:42:12,079 --> 00:42:14,400
like this thing right here

1072
00:42:14,400 --> 00:42:15,359
now

1073
00:42:15,359 --> 00:42:17,440
if you don't know a lot about sql you

1074
00:42:17,440 --> 00:42:19,200
can still read about it but basically

1075
00:42:19,200 --> 00:42:22,079
this looks like a sql injection to me

1076
00:42:22,079 --> 00:42:24,079
basically if you as an attacker control

1077
00:42:24,079 --> 00:42:26,079
this service name and can inject

1078
00:42:26,079 --> 00:42:28,800
apostrophes in here you can probably do

1079
00:42:28,800 --> 00:42:31,119
a sql injection to it to inject into the

1080
00:42:31,119 --> 00:42:33,520
tcc database so i find that very

1081
00:42:33,520 --> 00:42:35,280
interesting and i

1082
00:42:35,280 --> 00:42:37,839
i wasn't able i only invested it in like

1083
00:42:37,839 --> 00:42:40,160
like half a day or so but i think this

1084
00:42:40,160 --> 00:42:42,319
is a very interesting thing to to look

1085
00:42:42,319 --> 00:42:44,560
at if you want to look for tcc uh

1086
00:42:44,560 --> 00:42:46,079
bypasses

1087
00:42:46,079 --> 00:42:47,200
um

1088
00:42:47,200 --> 00:42:49,839
this is kind of a bonus run for tcc

1089
00:42:49,839 --> 00:42:51,599
tcc bypasses

1090
00:42:51,599 --> 00:42:53,520
uh some future research that i'm

1091
00:42:53,520 --> 00:42:56,000
planning to do or any future research

1092
00:42:56,000 --> 00:42:58,319
that you guys might be looking at

1093
00:42:58,319 --> 00:43:01,680
sandbox escape i have a generic sandbox

1094
00:43:01,680 --> 00:43:04,240
escape sadly i can't talk about it too

1095
00:43:04,240 --> 00:43:06,240
much but sandbox escapes are definitely

1096
00:43:06,240 --> 00:43:07,440
a thing in mac

1097
00:43:07,440 --> 00:43:09,760
uh gatekeeper bypasses there are two

1098
00:43:09,760 --> 00:43:11,440
awesome ones in recent memory i think

1099
00:43:11,440 --> 00:43:14,400
from december 2021 and i should

1100
00:43:14,400 --> 00:43:17,280
definitely do one too uh kernel bugs if

1101
00:43:17,280 --> 00:43:20,319
you if you're familiar with io mfb uh

1102
00:43:20,319 --> 00:43:22,400
it's it's it's very prone to

1103
00:43:22,400 --> 00:43:23,839
vulnerabilities

1104
00:43:23,839 --> 00:43:26,319
pack issues and other apple specific

1105
00:43:26,319 --> 00:43:28,480
bugs like the imessage exploits they're

1106
00:43:28,480 --> 00:43:30,880
awesome and i mean i intend to look at

1107
00:43:30,880 --> 00:43:33,200
some of the apple apple app specific

1108
00:43:33,200 --> 00:43:34,079
bugs

1109
00:43:34,079 --> 00:43:36,240
uh just to look for interesting things

1110
00:43:36,240 --> 00:43:37,200
to do

1111
00:43:37,200 --> 00:43:38,079
uh

1112
00:43:38,079 --> 00:43:40,880
that's pretty much it uh as i said i

1113
00:43:40,880 --> 00:43:42,640
have some interesting vulnerabilities i

1114
00:43:42,640 --> 00:43:45,040
just can't disclose yet because i i

1115
00:43:45,040 --> 00:43:47,440
always always always disclose disclose

1116
00:43:47,440 --> 00:43:50,000
uh responsibly and so should you don't

1117
00:43:50,000 --> 00:43:51,680
drop zero days anywhere

1118
00:43:51,680 --> 00:43:53,680
um some of them are mac os

1119
00:43:53,680 --> 00:43:55,839
vulnerabilities other are just linux or

1120
00:43:55,839 --> 00:43:58,079
android and whatnot then stay tuned feel

1121
00:43:58,079 --> 00:44:00,000
free to follow me on twitter for more

1122
00:44:00,000 --> 00:44:02,560
original research and that's pretty much

1123
00:44:02,560 --> 00:44:03,520
it

1124
00:44:03,520 --> 00:44:06,560
um thank you all for listening and being

1125
00:44:06,560 --> 00:44:09,119
here if there are any questions i would

1126
00:44:09,119 --> 00:44:11,599
love to take some

1127
00:44:11,599 --> 00:44:13,920
all right thank you jonathan for this

1128
00:44:13,920 --> 00:44:16,400
amazing informative session i am sure

1129
00:44:16,400 --> 00:44:18,160
our participants must have found some

1130
00:44:18,160 --> 00:44:20,800
important knowledgeable inputs from it

1131
00:44:20,800 --> 00:44:23,359
and uh everyone if you have any

1132
00:44:23,359 --> 00:44:26,000
questions uh we will be uh taking them

1133
00:44:26,000 --> 00:44:26,880
now

1134
00:44:26,880 --> 00:44:28,880
so one of the

1135
00:44:28,880 --> 00:44:31,040
uh

1136
00:44:33,599 --> 00:44:35,520
yeah one of the question is

1137
00:44:35,520 --> 00:44:38,079
how come signature will not prevent an

1138
00:44:38,079 --> 00:44:39,760
app that was changed

1139
00:44:39,760 --> 00:44:42,480
access to the original permissions

1140
00:44:42,480 --> 00:44:44,960
can you can you repeat the question

1141
00:44:44,960 --> 00:44:47,760
how come signature will not prevent an

1142
00:44:47,760 --> 00:44:50,240
app that was changed access to the

1143
00:44:50,240 --> 00:44:52,400
original permissions

1144
00:44:52,400 --> 00:44:54,880
oh the the question about the cs rec

1145
00:44:54,880 --> 00:44:55,760
blob

1146
00:44:55,760 --> 00:44:58,560
uh so if the app was changed it's fine

1147
00:44:58,560 --> 00:45:00,640
the what i mentioned is that let's say

1148
00:45:00,640 --> 00:45:03,280
that you have an app uh let's take zoom

1149
00:45:03,280 --> 00:45:05,760
for instance if you have zoom

1150
00:45:05,760 --> 00:45:07,440
um

1151
00:45:07,440 --> 00:45:10,079
and it has microphone access and then i

1152
00:45:10,079 --> 00:45:12,640
insta uninstall zoom and then install a

1153
00:45:12,640 --> 00:45:14,880
new app that is not zoom

1154
00:45:14,880 --> 00:45:17,280
that has uh

1155
00:45:17,280 --> 00:45:19,359
uh that has the same name then it might

1156
00:45:19,359 --> 00:45:21,680
be a problem because apps in the tcc

1157
00:45:21,680 --> 00:45:23,359
database are

1158
00:45:23,359 --> 00:45:25,839
basically identified by their name

1159
00:45:25,839 --> 00:45:28,079
so the extra protection that was added

1160
00:45:28,079 --> 00:45:31,040
is also to add the signature information

1161
00:45:31,040 --> 00:45:32,210
uh um

1162
00:45:32,210 --> 00:45:33,440
[Music]

1163
00:45:33,440 --> 00:45:35,920
about zoom right so you can just fake

1164
00:45:35,920 --> 00:45:37,839
that if you if you have a different

1165
00:45:37,839 --> 00:45:41,040
let's say team id or stuff that you need

1166
00:45:41,040 --> 00:45:43,040
um i hope that makes sense if there are

1167
00:45:43,040 --> 00:45:45,599
more questions about it feel free to

1168
00:45:45,599 --> 00:45:47,680
just chat with me on twitter or

1169
00:45:47,680 --> 00:45:49,359
something

1170
00:45:49,359 --> 00:45:50,160
uh

1171
00:45:50,160 --> 00:45:52,640
what permissions are needed to change

1172
00:45:52,640 --> 00:45:53,760
the

1173
00:45:53,760 --> 00:45:55,680
uh env

1174
00:45:55,680 --> 00:46:00,960
var with the tcc dot db part i'm

1175
00:46:01,839 --> 00:46:04,880
change the environment of what can you

1176
00:46:04,880 --> 00:46:06,720
repeat that again sorry yeah what

1177
00:46:06,720 --> 00:46:10,720
permissions are needed to change the env

1178
00:46:10,720 --> 00:46:15,599
space var with the tcc uh dot db path

1179
00:46:15,599 --> 00:46:18,240
yeah the environment variable yeah

1180
00:46:18,240 --> 00:46:19,760
um

1181
00:46:19,760 --> 00:46:22,160
i think i think the question mixes two

1182
00:46:22,160 --> 00:46:24,240
two different things well to change the

1183
00:46:24,240 --> 00:46:26,800
home directory the i guess the question

1184
00:46:26,800 --> 00:46:28,640
refers to the original

1185
00:46:28,640 --> 00:46:29,599
uh

1186
00:46:29,599 --> 00:46:31,920
vulnerability from 2020

1187
00:46:31,920 --> 00:46:35,280
uh 9 20 20 9934

1188
00:46:35,280 --> 00:46:36,400
so

1189
00:46:36,400 --> 00:46:39,119
in order to do that you don't need to do

1190
00:46:39,119 --> 00:46:43,280
anything you you just need to uh

1191
00:46:43,280 --> 00:46:47,200
uh basically kill tccd the users tccd

1192
00:46:47,200 --> 00:46:49,599
you can do that without root and i think

1193
00:46:49,599 --> 00:46:51,760
that you can launch

1194
00:46:51,760 --> 00:46:55,599
run run launch ctl uh and change the

1195
00:46:55,599 --> 00:46:58,480
home directory even without root but i'm

1196
00:46:58,480 --> 00:47:00,560
not entirely sure this is something that

1197
00:47:00,560 --> 00:47:02,560
i have to double check but basically you

1198
00:47:02,560 --> 00:47:03,599
don't need

1199
00:47:03,599 --> 00:47:04,560
uh

1200
00:47:04,560 --> 00:47:06,720
the only thing that you need is to make

1201
00:47:06,720 --> 00:47:09,599
lunch lunch launch d with launch ctl

1202
00:47:09,599 --> 00:47:12,400
change the home directory of tccd and i

1203
00:47:12,400 --> 00:47:14,000
think you can do that without root i'm

1204
00:47:14,000 --> 00:47:16,400
pretty sure

1205
00:47:16,400 --> 00:47:19,440
all right um i think that's all the

1206
00:47:19,440 --> 00:47:21,200
questions that we have others are just

1207
00:47:21,200 --> 00:47:23,839
comments that your webinars do you're

1208
00:47:23,839 --> 00:47:25,839
and people are thanking you

1209
00:47:25,839 --> 00:47:26,800
um

1210
00:47:26,800 --> 00:47:29,680
so yeah so thank you jonathan once again

1211
00:47:29,680 --> 00:47:31,760
and thank you all for your participation

1212
00:47:31,760 --> 00:47:34,559
in today's webinar session uh you can

1213
00:47:34,559 --> 00:47:36,640
look out on our social media platforms

1214
00:47:36,640 --> 00:47:39,680
on any updates on further webinars and

1215
00:47:39,680 --> 00:47:41,599
we will be concluding this session over

1216
00:47:41,599 --> 00:47:44,319
here thank you so much for joining bye

1217
00:47:44,319 --> 00:47:47,680
thank you see ya

