1
00:00:00,060 --> 00:00:02,280
[Music]

2
00:00:02,280 --> 00:00:03,480
foreign

3
00:00:03,480 --> 00:00:12,070
[Music]

4
00:00:17,180 --> 00:00:20,820
thank you for joining us today uh for

5
00:00:20,820 --> 00:00:23,100
those of you who are new uh nalgon

6
00:00:23,100 --> 00:00:25,800
security conference is a unique platform

7
00:00:25,800 --> 00:00:27,599
for security enthusiasts and

8
00:00:27,599 --> 00:00:29,400
professionals to Showcase their research

9
00:00:29,400 --> 00:00:32,159
and Technology to the community we have

10
00:00:32,159 --> 00:00:34,980
been we have our upcoming events nalgon

11
00:00:34,980 --> 00:00:37,739
Goa 2022 happening on the 9th and the

12
00:00:37,739 --> 00:00:40,020
10th of September the focus of the

13
00:00:40,020 --> 00:00:41,760
conference is to showcase the next

14
00:00:41,760 --> 00:00:43,739
generation of offensive and defensive

15
00:00:43,739 --> 00:00:47,100
security technology so in addition to

16
00:00:47,100 --> 00:00:50,399
that we have also announced 15 Hands-On

17
00:00:50,399 --> 00:00:52,559
training sessions so if you want you can

18
00:00:52,559 --> 00:00:55,440
check it out all the information on our

19
00:00:55,440 --> 00:00:58,320
website and coming to our today's

20
00:00:58,320 --> 00:01:01,280
speaker we have with us

21
00:01:01,280 --> 00:01:05,159
is a cloud security researcher at Orca

22
00:01:05,159 --> 00:01:08,340
security he specializes in vulnerability

23
00:01:08,340 --> 00:01:10,740
research and web security and an

24
00:01:10,740 --> 00:01:13,439
interesting fact before joining Orca Za

25
00:01:13,439 --> 00:01:15,540
serves for five years in an Israeli

26
00:01:15,540 --> 00:01:17,340
military intelligence unit

27
00:01:17,340 --> 00:01:20,100
so on behalf of all of us I would like

28
00:01:20,100 --> 00:01:22,460
to welcome

29
00:01:22,619 --> 00:01:26,479
thank you so as being said my name is

30
00:01:26,479 --> 00:01:29,400
and I'm going to present today my

31
00:01:29,400 --> 00:01:31,520
research on AWS the research was called

32
00:01:31,520 --> 00:01:34,619
breaking formation from an error message

33
00:01:34,619 --> 00:01:38,040
to AWS infrastructure

34
00:01:38,040 --> 00:01:41,340
um so without further further Ado let's

35
00:01:41,340 --> 00:01:44,460
get right to it so a little bit of

36
00:01:44,460 --> 00:01:48,780
introduction as said my name is I'm a

37
00:01:48,780 --> 00:01:50,759
security researcher at Orca security

38
00:01:50,759 --> 00:01:53,280
which is a cloud security company this

39
00:01:53,280 --> 00:01:55,079
is my Twitter account I did serve in the

40
00:01:55,079 --> 00:01:58,380
military for five years in IDF

41
00:01:58,380 --> 00:02:00,479
um that's a little bit about me

42
00:02:00,479 --> 00:02:02,880
and the first question that I'd like to

43
00:02:02,880 --> 00:02:06,719
always answer is why right

44
00:02:06,719 --> 00:02:09,538
why am I doing what I'm doing why am I

45
00:02:09,538 --> 00:02:11,640
uh showing this or why am I researching

46
00:02:11,640 --> 00:02:15,780
AWS at all or doing Cloud research

47
00:02:15,780 --> 00:02:19,319
so our team at Orca were two were

48
00:02:19,319 --> 00:02:21,780
two-man team and our team is responsible

49
00:02:21,780 --> 00:02:23,520
for Thought leadership what this means

50
00:02:23,520 --> 00:02:25,200
is we want to generate high quality

51
00:02:25,200 --> 00:02:28,140
research then with this high quality

52
00:02:28,140 --> 00:02:32,099
research we want to sort of uh be on the

53
00:02:32,099 --> 00:02:34,260
Forefront of cloud vulnerability

54
00:02:34,260 --> 00:02:38,340
research right be uh in the public uh

55
00:02:38,340 --> 00:02:41,400
conception be in Twitter be active post

56
00:02:41,400 --> 00:02:43,560
things about Cloud vulnerabilities and

57
00:02:43,560 --> 00:02:46,140
security and uh and engage with the

58
00:02:46,140 --> 00:02:49,319
community and the second reason is like

59
00:02:49,319 --> 00:02:51,480
more of a personal reason I want to gain

60
00:02:51,480 --> 00:02:53,700
Cloud expertise right so researching the

61
00:02:53,700 --> 00:02:55,620
cloud will help me get to know the cloud

62
00:02:55,620 --> 00:02:58,980
better be a better expert on the cloud

63
00:02:58,980 --> 00:03:01,080
and so forth so this is why I'm

64
00:03:01,080 --> 00:03:03,720
researching the cloud at all and why AWS

65
00:03:03,720 --> 00:03:06,360
specifically then first of all

66
00:03:06,360 --> 00:03:08,819
it's the largest by market share right

67
00:03:08,819 --> 00:03:10,560
it's the largest cloud provider and

68
00:03:10,560 --> 00:03:13,379
second thing it's a challenge right

69
00:03:13,379 --> 00:03:16,260
because there were not a lot of attacks

70
00:03:16,260 --> 00:03:19,379
on AWS infrastructure up to

71
00:03:19,379 --> 00:03:22,800
uh pretty much this vulnerability right

72
00:03:22,800 --> 00:03:25,080
no real public vulnerabilities about the

73
00:03:25,080 --> 00:03:29,360
server side vulnerabilities in AWS

74
00:03:30,120 --> 00:03:32,400
um I'd I'd start with like a quick

75
00:03:32,400 --> 00:03:34,200
introduction to the cloud so we always

76
00:03:34,200 --> 00:03:35,819
hear like this buzzword Cloud what

77
00:03:35,819 --> 00:03:37,500
exactly does it mean so we have a lot of

78
00:03:37,500 --> 00:03:39,540
cloud providers obviously AWS Azure

79
00:03:39,540 --> 00:03:42,299
Oracle Cloud Google Cloud Alibaba and

80
00:03:42,299 --> 00:03:45,780
and so forth uh but we want to introduce

81
00:03:45,780 --> 00:03:47,340
to the world of the problems we

82
00:03:47,340 --> 00:03:50,640
understand exactly why is cloud so

83
00:03:50,640 --> 00:03:52,739
important so let's say I want to set up

84
00:03:52,739 --> 00:03:55,200
a database pretty simple now what do I

85
00:03:55,200 --> 00:03:56,580
have to do I have to go to the hardware

86
00:03:56,580 --> 00:03:58,799
store I'll buy a computer I'll install

87
00:03:58,799 --> 00:04:01,560
in my operating system I'll install the

88
00:04:01,560 --> 00:04:03,299
software I'll make sure it's up to date

89
00:04:03,299 --> 00:04:06,360
it's secure no vulnerabilities make sure

90
00:04:06,360 --> 00:04:08,099
it's connected to the internet then I

91
00:04:08,099 --> 00:04:10,080
pay like an internet provider and

92
00:04:10,080 --> 00:04:13,200
everything so this is a lot a lot a lot

93
00:04:13,200 --> 00:04:15,840
of overhead just just to get started

94
00:04:15,840 --> 00:04:18,779
just to build a database

95
00:04:18,779 --> 00:04:20,279
so

96
00:04:20,279 --> 00:04:23,100
what happens if for example my house

97
00:04:23,100 --> 00:04:25,440
where I have the database Burns right

98
00:04:25,440 --> 00:04:29,639
goes on fire right database is shredded

99
00:04:29,639 --> 00:04:31,380
through it I don't have no backups I

100
00:04:31,380 --> 00:04:33,540
need to make sure it's always online and

101
00:04:33,540 --> 00:04:35,100
to make sure it has backups it's

102
00:04:35,100 --> 00:04:37,620
encrypted it's secure whatever all of

103
00:04:37,620 --> 00:04:39,780
this I need to make sure the cloud does

104
00:04:39,780 --> 00:04:41,820
it for me that's the point of the cloud

105
00:04:41,820 --> 00:04:44,340
if I want to set up a database

106
00:04:44,340 --> 00:04:46,800
two clicks I have a database it's always

107
00:04:46,800 --> 00:04:49,979
online it's always backed up it's always

108
00:04:49,979 --> 00:04:52,259
up to date and secure

109
00:04:52,259 --> 00:04:54,540
same for file storage same for virtual

110
00:04:54,540 --> 00:04:57,660
machines whatever every problem that I

111
00:04:57,660 --> 00:04:59,699
have I don't need to

112
00:04:59,699 --> 00:05:02,280
do it system all these kind of stuff

113
00:05:02,280 --> 00:05:04,320
like up to a degree

114
00:05:04,320 --> 00:05:06,900
uh I just pay the cloud provider the

115
00:05:06,900 --> 00:05:09,180
cloud provider does it for me

116
00:05:09,180 --> 00:05:12,419
so AWS is no different AWS is an acronym

117
00:05:12,419 --> 00:05:14,759
for Amazon web services it's a large

118
00:05:14,759 --> 00:05:16,919
Cloud private cloud provider we we've

119
00:05:16,919 --> 00:05:19,620
set it and it has over 200 different

120
00:05:19,620 --> 00:05:22,259
services on our services

121
00:05:22,259 --> 00:05:24,300
can be multiple different things for

122
00:05:24,300 --> 00:05:27,419
example ec2 if you look at the corner

123
00:05:27,419 --> 00:05:29,699
top left is the virtual machine service

124
00:05:29,699 --> 00:05:31,740
Lambda you can deploy your own code

125
00:05:31,740 --> 00:05:36,120
there's S3 where you can store files

126
00:05:36,120 --> 00:05:39,180
um modbs database solution RDS as well

127
00:05:39,180 --> 00:05:42,120
you have plenty of different Services

128
00:05:42,120 --> 00:05:44,820
different categories for your needs

129
00:05:44,820 --> 00:05:46,620
I pay the cloud provider I use whatever

130
00:05:46,620 --> 00:05:49,979
Services I need and I pay for them

131
00:05:49,979 --> 00:05:53,400
now another key word in AWS is Regions

132
00:05:53,400 --> 00:05:55,139
so there are Services there are regions

133
00:05:55,139 --> 00:05:58,460
what are regions basically every service

134
00:05:58,460 --> 00:06:02,220
has multiple uh

135
00:06:02,220 --> 00:06:04,860
data centers that it works on so for

136
00:06:04,860 --> 00:06:07,560
example S3 where I store files

137
00:06:07,560 --> 00:06:10,020
I might want to store my file close to

138
00:06:10,020 --> 00:06:12,180
me if I'm in Israel I'll find a data

139
00:06:12,180 --> 00:06:14,039
center that's close to Israel so I can

140
00:06:14,039 --> 00:06:16,080
download my file or upload it pretty

141
00:06:16,080 --> 00:06:17,880
quickly if my customer is in the United

142
00:06:17,880 --> 00:06:20,639
States I'll choose a region that is

143
00:06:20,639 --> 00:06:23,400
closer to his state for example

144
00:06:23,400 --> 00:06:26,340
so these are regions in AWS there are

145
00:06:26,340 --> 00:06:27,840
like over

146
00:06:27,840 --> 00:06:29,819
I think it's

147
00:06:29,819 --> 00:06:32,460
it's over 80 availability zones which

148
00:06:32,460 --> 00:06:35,460
are like sub-regions in AWS

149
00:06:35,460 --> 00:06:38,580
around the world and a little bit of

150
00:06:38,580 --> 00:06:40,380
cloud security because we're going to

151
00:06:40,380 --> 00:06:42,240
talk about the cloud vulnerability so we

152
00:06:42,240 --> 00:06:44,819
need to understand what exactly

153
00:06:44,819 --> 00:06:48,660
is the way that AWS secures the cloud so

154
00:06:48,660 --> 00:06:52,100
the major principle that cloud providers

155
00:06:52,100 --> 00:06:55,020
promise you as a customer is called

156
00:06:55,020 --> 00:06:57,380
tenant isolation or attends isolation

157
00:06:57,380 --> 00:07:00,000
tenant is pretty much every customer in

158
00:07:00,000 --> 00:07:02,100
the cloud every different company and

159
00:07:02,100 --> 00:07:06,060
the isolation means that even though

160
00:07:06,060 --> 00:07:10,259
you and me might share the same machine

161
00:07:10,259 --> 00:07:12,479
the physical machine have two virtual

162
00:07:12,479 --> 00:07:15,780
machines on it or we might share the

163
00:07:15,780 --> 00:07:19,259
same hard drive I store my files in S3

164
00:07:19,259 --> 00:07:21,960
you store your files on S3 at the same

165
00:07:21,960 --> 00:07:24,180
data center even though it might be the

166
00:07:24,180 --> 00:07:25,259
same server

167
00:07:25,259 --> 00:07:27,360
I can't access your data you can't

168
00:07:27,360 --> 00:07:30,120
access mine pretty simple that's tenant

169
00:07:30,120 --> 00:07:32,539
isolation

170
00:07:33,060 --> 00:07:35,759
um and AWS specifically has this thing

171
00:07:35,759 --> 00:07:37,259
called the shared responsibility model

172
00:07:37,259 --> 00:07:39,780
which goes like this everything that I

173
00:07:39,780 --> 00:07:41,639
can configure

174
00:07:41,639 --> 00:07:43,740
is my responsibility everything that I

175
00:07:43,740 --> 00:07:46,440
can't control AWS guarantees it's going

176
00:07:46,440 --> 00:07:49,020
to be secure so if we take the example

177
00:07:49,020 --> 00:07:50,880
of ec2 which again is the virtual

178
00:07:50,880 --> 00:07:54,900
machine service then everything above

179
00:07:54,900 --> 00:07:56,759
operating system level level including

180
00:07:56,759 --> 00:07:57,840
the operating system is my

181
00:07:57,840 --> 00:08:01,020
responsibility if I choose a weak

182
00:08:01,020 --> 00:08:03,900
password if I choose wrong permissions

183
00:08:03,900 --> 00:08:06,479
to save my files if I install vulnerable

184
00:08:06,479 --> 00:08:08,520
software it's on me

185
00:08:08,520 --> 00:08:11,340
but for example the

186
00:08:11,340 --> 00:08:12,020
the

187
00:08:12,020 --> 00:08:17,160
uh drivers right the network drivers or

188
00:08:17,160 --> 00:08:19,319
the the hard drive itself and its

189
00:08:19,319 --> 00:08:21,599
drivers and all these Hardware that I

190
00:08:21,599 --> 00:08:23,879
can't control because it's it's not mine

191
00:08:23,879 --> 00:08:26,039
it's AWS

192
00:08:26,039 --> 00:08:28,680
then they guarantee there will be no

193
00:08:28,680 --> 00:08:30,479
response no like there will be no

194
00:08:30,479 --> 00:08:33,779
vulnerabilities there now most of the

195
00:08:33,779 --> 00:08:36,539
vulnerabilities found in AWS have to do

196
00:08:36,539 --> 00:08:39,360
with the customer configurations uh it's

197
00:08:39,360 --> 00:08:41,339
easy to misconfigure something okay

198
00:08:41,339 --> 00:08:44,159
might be easy but it's a vulnerability

199
00:08:44,159 --> 00:08:47,580
in how I act not a lot of

200
00:08:47,580 --> 00:08:50,399
vulnerabilities in what AWS is

201
00:08:50,399 --> 00:08:53,100
responsible for

202
00:08:53,100 --> 00:08:54,779
up till now

203
00:08:54,779 --> 00:08:57,540
okay let's get to know a little bit

204
00:08:57,540 --> 00:08:58,800
about cloud formation which is the

205
00:08:58,800 --> 00:09:00,779
vulnerable service so we need to to get

206
00:09:00,779 --> 00:09:02,820
to know the villain right of the story

207
00:09:02,820 --> 00:09:05,040
so cloudformation is actually 11 years

208
00:09:05,040 --> 00:09:07,019
old uh

209
00:09:07,019 --> 00:09:09,600
this is a typo here it's 11 years old it

210
00:09:09,600 --> 00:09:11,480
was established in

211
00:09:11,480 --> 00:09:14,220
2011. uh and it's an infrastructure as

212
00:09:14,220 --> 00:09:15,779
code service we'll understand exactly

213
00:09:15,779 --> 00:09:17,700
what it means but we need to understand

214
00:09:17,700 --> 00:09:19,140
two key words when it comes to

215
00:09:19,140 --> 00:09:21,300
cloudformation one is templates one is

216
00:09:21,300 --> 00:09:23,459
Stacks cloudformation accepts a template

217
00:09:23,459 --> 00:09:27,660
that's the input and outputs is a stack

218
00:09:27,660 --> 00:09:30,540
what are templates and stacks also they

219
00:09:30,540 --> 00:09:32,040
have a Twitter account so you might want

220
00:09:32,040 --> 00:09:35,760
to go and follow them there uh but what

221
00:09:35,760 --> 00:09:37,200
exactly

222
00:09:37,200 --> 00:09:40,260
are Stacks okay Stacks are the output

223
00:09:40,260 --> 00:09:42,720
remember so Stacks collection of

224
00:09:42,720 --> 00:09:44,040
resources

225
00:09:44,040 --> 00:09:47,279
managed as a single unit that's all

226
00:09:47,279 --> 00:09:48,839
there is to it what are resources

227
00:09:48,839 --> 00:09:52,260
everything a file an S3 resource

228
00:09:52,260 --> 00:09:54,480
uh a virtual machine is a resource

229
00:09:54,480 --> 00:09:58,019
firewall rule is a resource whatever

230
00:09:58,019 --> 00:09:59,940
all of them are resources and they're

231
00:09:59,940 --> 00:10:02,580
managed as a single unit

232
00:10:02,580 --> 00:10:04,860
and what are templates which are again

233
00:10:04,860 --> 00:10:07,260
the input to cloudformation

234
00:10:07,260 --> 00:10:10,019
the recipe to a stack right

235
00:10:10,019 --> 00:10:12,720
so all the resources there are types the

236
00:10:12,720 --> 00:10:15,240
data you can also have like parameters

237
00:10:15,240 --> 00:10:16,620
rules

238
00:10:16,620 --> 00:10:19,279
and conditions whether or not to set up

239
00:10:19,279 --> 00:10:22,500
uh certain resources and it's in the

240
00:10:22,500 --> 00:10:26,279
format of the ammo or Json uh you can

241
00:10:26,279 --> 00:10:28,680
have two formats this one to the right

242
00:10:28,680 --> 00:10:30,959
is in the yaml format and it has two

243
00:10:30,959 --> 00:10:34,440
resources one is an ec2 instance ec2

244
00:10:34,440 --> 00:10:35,880
remember virtual machines so this is a

245
00:10:35,880 --> 00:10:37,320
VM

246
00:10:37,320 --> 00:10:39,959
and you can say you have like the CPU in

247
00:10:39,959 --> 00:10:43,680
here like the CPU type you have

248
00:10:43,680 --> 00:10:46,620
um the name you have a bash script that

249
00:10:46,620 --> 00:10:49,200
will install an HTTP server on it and

250
00:10:49,200 --> 00:10:51,839
start it and the second resource in this

251
00:10:51,839 --> 00:10:53,760
uh template is

252
00:10:53,760 --> 00:10:56,220
a Security Group Security Group is a

253
00:10:56,220 --> 00:10:59,060
firewall rule so we say we accept

254
00:10:59,060 --> 00:11:02,339
transportation from

255
00:11:02,339 --> 00:11:05,940
Port 80. like to Port 80. so this means

256
00:11:05,940 --> 00:11:08,940
this is an HEB server we open port 80 uh

257
00:11:08,940 --> 00:11:12,740
and we allow access pretty simple

258
00:11:13,740 --> 00:11:15,660
okay so we have templates we have stacks

259
00:11:15,660 --> 00:11:16,860
why should anyone research

260
00:11:16,860 --> 00:11:18,300
transformation wise in an interesting

261
00:11:18,300 --> 00:11:21,000
service so first of all first thing that

262
00:11:21,000 --> 00:11:23,100
I look for as a researcher is

263
00:11:23,100 --> 00:11:26,040
features right attack surface if you

264
00:11:26,040 --> 00:11:28,740
have you know if a service does only one

265
00:11:28,740 --> 00:11:30,240
thing or two things

266
00:11:30,240 --> 00:11:32,760
not very interesting but it has plenty

267
00:11:32,760 --> 00:11:34,500
of features and it has a parser right

268
00:11:34,500 --> 00:11:37,320
like the ammo Parts adjacent parser and

269
00:11:37,320 --> 00:11:39,060
it has plenty of different resources

270
00:11:39,060 --> 00:11:41,459
that it touches and does things and

271
00:11:41,459 --> 00:11:43,680
parameters conditions whatever it's

272
00:11:43,680 --> 00:11:46,560
interesting second thing is templates

273
00:11:46,560 --> 00:11:48,660
can contain sensitive customer data the

274
00:11:48,660 --> 00:11:51,240
template earlier had a bad script it can

275
00:11:51,240 --> 00:11:53,700
also contain passwords can contain a lot

276
00:11:53,700 --> 00:11:56,220
of other things and the third most

277
00:11:56,220 --> 00:11:57,959
important thing is

278
00:11:57,959 --> 00:12:00,000
it's the high risk service

279
00:12:00,000 --> 00:12:01,920
what this means is

280
00:12:01,920 --> 00:12:03,899
some Services don't do a lot of

281
00:12:03,899 --> 00:12:05,220
interesting things

282
00:12:05,220 --> 00:12:07,320
only do some sort of configuration for

283
00:12:07,320 --> 00:12:10,800
example this one can deploy and

284
00:12:10,800 --> 00:12:14,160
provision resources in accounts

285
00:12:14,160 --> 00:12:16,200
in my account for example but if I take

286
00:12:16,200 --> 00:12:18,000
over the service itself maybe I can

287
00:12:18,000 --> 00:12:19,740
provision resources in other accounts

288
00:12:19,740 --> 00:12:21,180
that could be

289
00:12:21,180 --> 00:12:23,399
very destructive so that was the idea

290
00:12:23,399 --> 00:12:25,740
but

291
00:12:25,740 --> 00:12:28,680
all of what I told you is true but it

292
00:12:28,680 --> 00:12:30,480
also sort of rely because it's not the

293
00:12:30,480 --> 00:12:31,740
reason I started researching

294
00:12:31,740 --> 00:12:34,320
cloudformation in the first place at all

295
00:12:34,320 --> 00:12:37,260
and the reason or

296
00:12:37,260 --> 00:12:40,019
let's start with what I researched

297
00:12:40,019 --> 00:12:41,459
beforehand

298
00:12:41,459 --> 00:12:43,680
was actually I researched the two

299
00:12:43,680 --> 00:12:45,660
different Services called cloudtrail and

300
00:12:45,660 --> 00:12:47,399
Cloud watch

301
00:12:47,399 --> 00:12:49,920
I had a purpose my purpose was bypassing

302
00:12:49,920 --> 00:12:52,560
logging mechanisms in AWS

303
00:12:52,560 --> 00:12:54,120
cloudtrail

304
00:12:54,120 --> 00:12:58,019
blogs does logging in AWS and I wanted

305
00:12:58,019 --> 00:12:59,459
to evade the texture that was my

306
00:12:59,459 --> 00:13:01,680
research idea nothing about confirmation

307
00:13:01,680 --> 00:13:03,600
didn't know of the service and in its

308
00:13:03,600 --> 00:13:06,060
existence how did I get there let's see

309
00:13:06,060 --> 00:13:08,700
pretty simple cloudtrail first of all we

310
00:13:08,700 --> 00:13:10,920
need to understand which is again what I

311
00:13:10,920 --> 00:13:12,360
try to research in the first place

312
00:13:12,360 --> 00:13:14,700
tracks user activity and API usage

313
00:13:14,700 --> 00:13:16,440
everything in AWS

314
00:13:16,440 --> 00:13:21,060
everything is an API call right so

315
00:13:21,060 --> 00:13:24,420
um if you look at

316
00:13:24,420 --> 00:13:28,459
you have one second

317
00:13:28,680 --> 00:13:30,120
cool

318
00:13:30,120 --> 00:13:35,399
so in ec2 for example rebooting your VMS

319
00:13:35,399 --> 00:13:38,639
is an API call uh signing credentials

320
00:13:38,639 --> 00:13:40,680
API call

321
00:13:40,680 --> 00:13:43,380
creating a bucket in S3 at bucket is

322
00:13:43,380 --> 00:13:47,100
where you store your files in AWS in S3

323
00:13:47,100 --> 00:13:49,019
it's an API call changing the

324
00:13:49,019 --> 00:13:50,940
permissions API Call

325
00:13:50,940 --> 00:13:53,160
Etc databases whatever everything is an

326
00:13:53,160 --> 00:13:55,200
API call

327
00:13:55,200 --> 00:13:59,839
and Cloud logs these API calls

328
00:13:59,880 --> 00:14:02,279
and what

329
00:14:02,279 --> 00:14:04,200
okay and what do you do how do you

330
00:14:04,200 --> 00:14:06,720
create a trail uh that's how cloudtrail

331
00:14:06,720 --> 00:14:10,380
stores logs basically you set whatever

332
00:14:10,380 --> 00:14:13,019
events you want to trace management

333
00:14:13,019 --> 00:14:14,760
events are things happening in your

334
00:14:14,760 --> 00:14:16,800
account that events are things happening

335
00:14:16,800 --> 00:14:18,839
to your resources doesn't really matter

336
00:14:18,839 --> 00:14:21,300
but you create this sort of Trail then

337
00:14:21,300 --> 00:14:24,480
it starts logging things now how does a

338
00:14:24,480 --> 00:14:28,500
log look it's Json it has pretty much

339
00:14:28,500 --> 00:14:31,500
three different interesting components

340
00:14:31,500 --> 00:14:35,579
it has a lot more but three main ones

341
00:14:35,579 --> 00:14:39,300
one is who did a certain action in this

342
00:14:39,300 --> 00:14:43,500
case the service cloud trail did perform

343
00:14:43,500 --> 00:14:46,199
an action in my account

344
00:14:46,199 --> 00:14:50,459
what did it do here it did a put object

345
00:14:50,459 --> 00:14:53,399
API call on S3 which means uploading a

346
00:14:53,399 --> 00:14:56,699
file or writing a file and how did it do

347
00:14:56,699 --> 00:15:00,120
it right parameters so cloudrail

348
00:15:00,120 --> 00:15:03,600
puts an object in S3 in this bucket it

349
00:15:03,600 --> 00:15:05,579
has the file name it has everything so

350
00:15:05,579 --> 00:15:08,160
these are the logs it has who what did

351
00:15:08,160 --> 00:15:10,500
it do and how did it do it right the

352
00:15:10,500 --> 00:15:13,079
circumstances

353
00:15:13,079 --> 00:15:14,519
cool

354
00:15:14,519 --> 00:15:17,760
so this is about we talked about

355
00:15:17,760 --> 00:15:19,500
cloudtrail a little bit

356
00:15:19,500 --> 00:15:23,339
my purpose was doing things inside of

357
00:15:23,339 --> 00:15:25,620
cloud inside of an AWS account without

358
00:15:25,620 --> 00:15:28,560
getting logged into cloudtrail how does

359
00:15:28,560 --> 00:15:31,199
cloudtrail get me to cloud formation

360
00:15:31,199 --> 00:15:33,540
this is how

361
00:15:33,540 --> 00:15:34,380
um

362
00:15:34,380 --> 00:15:37,920
you have alone the CDO of orca and

363
00:15:37,920 --> 00:15:41,880
uh my team leader said to me Zach you

364
00:15:41,880 --> 00:15:43,740
know soccer you know there's this new

365
00:15:43,740 --> 00:15:46,500
feature has to do with Cloud watch which

366
00:15:46,500 --> 00:15:47,699
is

367
00:15:47,699 --> 00:15:51,660
sort of a dashboard display logs it says

368
00:15:51,660 --> 00:15:53,940
there's something about widgets and

369
00:15:53,940 --> 00:15:57,360
dashboards you know look look there it's

370
00:15:57,360 --> 00:16:00,899
an interesting new feature maybe uh you

371
00:16:00,899 --> 00:16:02,519
can find something there so I said okay

372
00:16:02,519 --> 00:16:04,440
I entered the link

373
00:16:04,440 --> 00:16:07,019
and I introduced samples and I found

374
00:16:07,019 --> 00:16:10,380
like it has different widgets has sample

375
00:16:10,380 --> 00:16:13,380
widgets I went into the first one and I

376
00:16:13,380 --> 00:16:15,660
got into this page this page says cloud

377
00:16:15,660 --> 00:16:21,439
formation Stacks quick create stack

378
00:16:21,660 --> 00:16:24,240
now what was weird to me here what I

379
00:16:24,240 --> 00:16:26,699
noticed is first of all

380
00:16:26,699 --> 00:16:28,920
you can see cloud formation at the top I

381
00:16:28,920 --> 00:16:30,480
didn't know what cloudformation was back

382
00:16:30,480 --> 00:16:33,600
then and you see a template URL https

383
00:16:33,600 --> 00:16:37,740
blah blah blah to an S3 bucket right if

384
00:16:37,740 --> 00:16:40,940
you look closely

385
00:16:41,820 --> 00:16:45,000
right then you have this S3

386
00:16:45,000 --> 00:16:47,959
uh bucket

387
00:16:48,300 --> 00:16:50,339
and it has like a yaml file which again

388
00:16:50,339 --> 00:16:51,899
makes sense because we said it's a

389
00:16:51,899 --> 00:16:54,000
template templates can be yaml or Json

390
00:16:54,000 --> 00:16:56,399
this is a yaml template whatever it

391
00:16:56,399 --> 00:16:58,620
makes makes a whole lot of sense but

392
00:16:58,620 --> 00:17:00,540
what was weird to me

393
00:17:00,540 --> 00:17:07,260
is that S3 links are usually not https

394
00:17:07,260 --> 00:17:10,559
scheme they're usually S3

395
00:17:10,559 --> 00:17:13,559
colon slash so it's either you have like

396
00:17:13,559 --> 00:17:15,780
a bucket name that you just put in the

397
00:17:15,780 --> 00:17:18,179
API or

398
00:17:18,179 --> 00:17:20,339
use this format

399
00:17:20,339 --> 00:17:23,339
and I'm saying S3 as a scheme and it's

400
00:17:23,339 --> 00:17:25,980
really everywhere in the API in the UI

401
00:17:25,980 --> 00:17:29,640
user interface you can always see S3

402
00:17:29,640 --> 00:17:32,880
colon slash and then you put a paths to

403
00:17:32,880 --> 00:17:36,360
S3 never this https thing it works right

404
00:17:36,360 --> 00:17:39,539
S3 is accessible by web but it is still

405
00:17:39,539 --> 00:17:42,780
weird never seen in the API before now

406
00:17:42,780 --> 00:17:45,179
why is that so interesting what does it

407
00:17:45,179 --> 00:17:47,280
matter if it's S3 it's https it doesn't

408
00:17:47,280 --> 00:17:49,799
really do anything right but the idea

409
00:17:49,799 --> 00:17:52,860
that I had had to do with srf and what

410
00:17:52,860 --> 00:17:55,740
are srfs it's an acronym for server-side

411
00:17:55,740 --> 00:17:58,380
request forgery it's sort of attack

412
00:17:58,380 --> 00:18:01,200
where an attacker gives a server a URL

413
00:18:01,200 --> 00:18:05,460
and This Server accesses that URL now if

414
00:18:05,460 --> 00:18:09,000
a server server accesses my own URL then

415
00:18:09,000 --> 00:18:12,539
it can be a URL to Google and it can be

416
00:18:12,539 --> 00:18:15,360
URL to the internal Network and it can

417
00:18:15,360 --> 00:18:17,460
be a URL to localhost and then the

418
00:18:17,460 --> 00:18:21,059
server accesses itself from the inside

419
00:18:21,059 --> 00:18:23,160
so as the refs are generally interesting

420
00:18:23,160 --> 00:18:25,320
and in the cloud they're even more

421
00:18:25,320 --> 00:18:26,760
interesting

422
00:18:26,760 --> 00:18:31,020
why so there's a thing called imds

423
00:18:31,020 --> 00:18:33,179
in the cloud which is instance metadata

424
00:18:33,179 --> 00:18:37,080
service it's a static IP address 169 2x4

425
00:18:37,080 --> 00:18:40,799
and so forth and you can access it

426
00:18:40,799 --> 00:18:42,480
from any virtual machine and any service

427
00:18:42,480 --> 00:18:44,220
pretty much in AWS

428
00:18:44,220 --> 00:18:46,320
and it provides sort of configurations

429
00:18:46,320 --> 00:18:48,539
and metadata

430
00:18:48,539 --> 00:18:51,120
about your instance and it can even

431
00:18:51,120 --> 00:18:53,340
include credentials now this is very

432
00:18:53,340 --> 00:18:56,280
interesting because back then there was

433
00:18:56,280 --> 00:18:58,860
this uh Capital One hack some of you all

434
00:18:58,860 --> 00:19:01,860
might remember it was a hacker like a

435
00:19:01,860 --> 00:19:04,260
hacker team that gained like access to a

436
00:19:04,260 --> 00:19:07,140
hundred million or even more uh credit

437
00:19:07,140 --> 00:19:09,419
card applications and accounts of

438
00:19:09,419 --> 00:19:12,059
Capital One which is a big banking

439
00:19:12,059 --> 00:19:13,860
corporate

440
00:19:13,860 --> 00:19:17,400
and how they did it is they managed to

441
00:19:17,400 --> 00:19:20,820
have an ssrf they accessed this imds

442
00:19:20,820 --> 00:19:23,700
this 169 254

443
00:19:23,700 --> 00:19:27,120
IP address they got credentials and from

444
00:19:27,120 --> 00:19:30,480
these credentials they found

445
00:19:30,480 --> 00:19:36,299
data stored in uh in AWS of Capital One

446
00:19:36,299 --> 00:19:38,100
so this is why srfs are interesting

447
00:19:38,100 --> 00:19:40,860
specifically also in the cloud in this

448
00:19:40,860 --> 00:19:43,260
AWS thing so

449
00:19:43,260 --> 00:19:46,140
for now all I have is this table URL

450
00:19:46,140 --> 00:19:48,780
right which is https colon slash

451
00:19:48,780 --> 00:19:50,940
whatever

452
00:19:50,940 --> 00:19:52,740
and I said

453
00:19:52,740 --> 00:19:55,080
okay this is where it comes from let's

454
00:19:55,080 --> 00:19:57,120
try to change it I want to make it

455
00:19:57,120 --> 00:20:00,480
access 169 254. if I get it to access

456
00:20:00,480 --> 00:20:03,059
the inds again imds the place where you

457
00:20:03,059 --> 00:20:04,320
can get maybe credentials and

458
00:20:04,320 --> 00:20:06,660
configurations

459
00:20:06,660 --> 00:20:08,520
then maybe I can get something

460
00:20:08,520 --> 00:20:11,400
interesting to happen

461
00:20:11,400 --> 00:20:13,740
so I went to the URL

462
00:20:13,740 --> 00:20:15,539
I changed it

463
00:20:15,539 --> 00:20:18,780
stride an invalid URL literally

464
00:20:18,780 --> 00:20:21,480
and I got this error template URL must

465
00:20:21,480 --> 00:20:24,960
be a supporting URL okay so now I get

466
00:20:24,960 --> 00:20:28,020
there is some sort of filtering

467
00:20:28,020 --> 00:20:31,260
and I looked I upper I like opened the

468
00:20:31,260 --> 00:20:34,320
burp suit which is a proxy hdb proxy and

469
00:20:34,320 --> 00:20:36,240
then I can see the requests going for my

470
00:20:36,240 --> 00:20:39,900
browser to uh AWS and I saw this path

471
00:20:39,900 --> 00:20:41,880
right it goes to the console

472
00:20:41,880 --> 00:20:45,299
and that AWS amazon.com and it goes to

473
00:20:45,299 --> 00:20:47,160
this path cloud formation service

474
00:20:47,160 --> 00:20:51,720
template summary and a password URL and

475
00:20:51,720 --> 00:20:54,720
I get a Json with the error back

476
00:20:54,720 --> 00:20:57,419
now when you put a valid URL right so

477
00:20:57,419 --> 00:21:01,020
that that https URL to the yaml right we

478
00:21:01,020 --> 00:21:03,419
already know this

479
00:21:03,419 --> 00:21:06,020
here

480
00:21:07,140 --> 00:21:09,660
um then you just get a Json

481
00:21:09,660 --> 00:21:11,940
back without an error like Json of the

482
00:21:11,940 --> 00:21:14,100
summary

483
00:21:14,100 --> 00:21:16,799
okay so I know what the behavior should

484
00:21:16,799 --> 00:21:18,720
be and I don't know what the the like

485
00:21:18,720 --> 00:21:20,880
the error is right when I put like an

486
00:21:20,880 --> 00:21:22,740
invalid URL like an invalid URL when I

487
00:21:22,740 --> 00:21:25,860
put a regular URL I get a Json now I

488
00:21:25,860 --> 00:21:28,020
wanted to try

489
00:21:28,020 --> 00:21:31,260
to understand what this is what is this

490
00:21:31,260 --> 00:21:34,620
request so I went to Google and I

491
00:21:34,620 --> 00:21:36,360
googled Cloud information service

492
00:21:36,360 --> 00:21:40,200
template summary literally whatever it

493
00:21:40,200 --> 00:21:42,419
says here

494
00:21:42,419 --> 00:21:46,380
this is exactly what I Googled right

495
00:21:46,380 --> 00:21:49,020
and what I found is this page get

496
00:21:49,020 --> 00:21:50,400
template summary

497
00:21:50,400 --> 00:21:52,799
is a cloud formation API call returns

498
00:21:52,799 --> 00:21:54,299
information about new or existing

499
00:21:54,299 --> 00:21:56,880
template how do I know it is mine it's

500
00:21:56,880 --> 00:22:00,059
irrelevant is because it has a parameter

501
00:22:00,059 --> 00:22:02,100
called template URL with this location

502
00:22:02,100 --> 00:22:03,840
of file containing template body

503
00:22:03,840 --> 00:22:05,580
remember remember template is either

504
00:22:05,580 --> 00:22:07,980
Json or yaml and it's located in Amazon

505
00:22:07,980 --> 00:22:10,740
S3 bucket

506
00:22:10,740 --> 00:22:14,280
okay so what do I have left to do I want

507
00:22:14,280 --> 00:22:17,039
to try and get it to go to IDs right

508
00:22:17,039 --> 00:22:19,200
that is the purpose I want to access

509
00:22:19,200 --> 00:22:21,000
internal things I don't want to access

510
00:22:21,000 --> 00:22:24,059
normal as the three so what I did is I

511
00:22:24,059 --> 00:22:25,679
tried to bypass that sort of filter

512
00:22:25,679 --> 00:22:28,260
because it says timberl must be a

513
00:22:28,260 --> 00:22:30,900
supported URL I want to make sure if I

514
00:22:30,900 --> 00:22:33,120
can somehow bypass it make it access

515
00:22:33,120 --> 00:22:34,679
whatever I want

516
00:22:34,679 --> 00:22:37,020
so there's this new regular URL which is

517
00:22:37,020 --> 00:22:39,299
the https ends with the ammo right this

518
00:22:39,299 --> 00:22:41,340
is a normal template and We Know It

519
00:22:41,340 --> 00:22:43,980
bypasses the filter or it passes it's

520
00:22:43,980 --> 00:22:46,500
not a bypass it really just is how it's

521
00:22:46,500 --> 00:22:48,600
supposed to work so I said okay let's

522
00:22:48,600 --> 00:22:51,179
change it a little bit instead of https

523
00:22:51,179 --> 00:22:52,980
let's try http

524
00:22:52,980 --> 00:22:55,679
the same URL just http

525
00:22:55,679 --> 00:22:57,059
worked

526
00:22:57,059 --> 00:22:59,820
okay I said let's make sure it really

527
00:22:59,820 --> 00:23:02,159
works let's try to change the scheme to

528
00:23:02,159 --> 00:23:05,460
something totally nonsense blah blah

529
00:23:05,460 --> 00:23:08,880
shouldn't work right it did work

530
00:23:08,880 --> 00:23:12,419
by work by Way by when I say it works I

531
00:23:12,419 --> 00:23:14,580
mean it Returns the normal Json with a

532
00:23:14,580 --> 00:23:17,039
summary it really can access that yaml

533
00:23:17,039 --> 00:23:20,280
file it accesses and parses it okay so

534
00:23:20,280 --> 00:23:22,020
it ignores the scheme that's what I

535
00:23:22,020 --> 00:23:23,640
understood then I said you know what

536
00:23:23,640 --> 00:23:26,400
let's try to cut straight to the Chase

537
00:23:26,400 --> 00:23:30,480
and get to the IDS put the URL

538
00:23:30,480 --> 00:23:32,940
says table URL must be a supported URL

539
00:23:32,940 --> 00:23:35,100
right it's supposed to be located in

540
00:23:35,100 --> 00:23:37,679
Amazon S3 bucket this is not how an

541
00:23:37,679 --> 00:23:42,240
Amazon S3 bucket URL looks makes sense

542
00:23:42,240 --> 00:23:44,280
I said okay let's try the same URL

543
00:23:44,280 --> 00:23:46,500
exactly the cloud watch thing S3

544
00:23:46,500 --> 00:23:49,919
different port 1337

545
00:23:49,919 --> 00:23:52,380
it worked return normal Json so it

546
00:23:52,380 --> 00:23:54,720
ignores the scheme it ignores the port

547
00:23:54,720 --> 00:23:57,179
it probably only uses the path and the

548
00:23:57,179 --> 00:24:00,000
uh hostname I said okay I'll try and

549
00:24:00,000 --> 00:24:02,880
fool it do like an at symbol

550
00:24:02,880 --> 00:24:07,460
at uh like S3 Cloud watch whatever at

551
00:24:07,460 --> 00:24:11,159
evildomain.com see what happens

552
00:24:11,159 --> 00:24:13,919
should get to my domain it was sort of a

553
00:24:13,919 --> 00:24:16,320
trick but it says it must be a support

554
00:24:16,320 --> 00:24:19,020
URL what I understand from here there is

555
00:24:19,020 --> 00:24:21,960
real legitimate URL parsing it's going

556
00:24:21,960 --> 00:24:24,539
to be a bit hard to bypass

557
00:24:24,539 --> 00:24:26,400
so I said you know what let's not bypass

558
00:24:26,400 --> 00:24:29,159
the filter let's just put a URL to my

559
00:24:29,159 --> 00:24:31,440
own test bucket

560
00:24:31,440 --> 00:24:33,179
right

561
00:24:33,179 --> 00:24:35,340
so what I did

562
00:24:35,340 --> 00:24:39,720
is I created uh I created this back in a

563
00:24:39,720 --> 00:24:41,940
blue hat so I created I literally

564
00:24:41,940 --> 00:24:44,220
created a S3 bucket called the blue hat

565
00:24:44,220 --> 00:24:45,720
test the bucket

566
00:24:45,720 --> 00:24:47,940
right which is also a conference so when

567
00:24:47,940 --> 00:24:49,620
blue hat test the bucket

568
00:24:49,620 --> 00:24:53,340
I created and I put a empty file called

569
00:24:53,340 --> 00:24:55,380
existence that was the name

570
00:24:55,380 --> 00:24:57,600
and I want to see what will happen so I

571
00:24:57,600 --> 00:24:59,700
got a different error it was template

572
00:24:59,700 --> 00:25:01,380
format error on supported structure

573
00:25:01,380 --> 00:25:04,440
means it worked right it accessed it but

574
00:25:04,440 --> 00:25:05,940
it says okay this is an empty file

575
00:25:05,940 --> 00:25:08,100
nothing to do here

576
00:25:08,100 --> 00:25:11,100
then I tried non-existent file which

577
00:25:11,100 --> 00:25:13,620
does not exist and it says S3 error

578
00:25:13,620 --> 00:25:16,740
access denied this was weird to me S3

579
00:25:16,740 --> 00:25:19,440
error X is denied was kind of weird why

580
00:25:19,440 --> 00:25:21,179
because when you access this URL

581
00:25:21,179 --> 00:25:23,580
yourself you get this sort of error

582
00:25:23,580 --> 00:25:25,440
error X denied

583
00:25:25,440 --> 00:25:27,419
and it shows the same error I was like

584
00:25:27,419 --> 00:25:30,419
okay there's something weird here

585
00:25:30,419 --> 00:25:32,880
but I didn't find no vulnerability up to

586
00:25:32,880 --> 00:25:35,700
here so I uh kind of lost my nerves and

587
00:25:35,700 --> 00:25:37,500
I said you know what let's get back to

588
00:25:37,500 --> 00:25:39,299
the logging remember I'm researching

589
00:25:39,299 --> 00:25:41,400
cloudtrail at this time let's get back

590
00:25:41,400 --> 00:25:43,200
to the logging I said okay black box is

591
00:25:43,200 --> 00:25:45,120
hard nothing makes sense let's get back

592
00:25:45,120 --> 00:25:47,400
to cloudtrail and I looked at cloudtrail

593
00:25:47,400 --> 00:25:49,799
and I found logs why because Cloud's

594
00:25:49,799 --> 00:25:51,960
really responsible for logging what are

595
00:25:51,960 --> 00:25:54,120
the logs that I found I found this log

596
00:25:54,120 --> 00:25:57,240
saying okay there was a get object

597
00:25:57,240 --> 00:26:00,179
like someone tried to access my S3

598
00:26:00,179 --> 00:26:03,000
to blue hat test bucket and a file

599
00:26:03,000 --> 00:26:05,159
called existent and who did it

600
00:26:05,159 --> 00:26:07,559
cloudformation did it make sense I told

601
00:26:07,559 --> 00:26:09,740
confirmation to access there it did it

602
00:26:09,740 --> 00:26:13,080
but there was one thing that was weird

603
00:26:13,080 --> 00:26:15,299
remember it accessed existed and it

604
00:26:15,299 --> 00:26:18,299
accessed non-existent

605
00:26:18,299 --> 00:26:20,340
regarding non-existing there were two

606
00:26:20,340 --> 00:26:23,220
logs and not a one one makes sense one

607
00:26:23,220 --> 00:26:27,240
says cloud formation did it get object

608
00:26:27,240 --> 00:26:30,360
uh did a get object

609
00:26:30,360 --> 00:26:33,900
to do a test bucket not existed

610
00:26:33,900 --> 00:26:36,179
but the other log didn't make a lot of

611
00:26:36,179 --> 00:26:37,200
sense

612
00:26:37,200 --> 00:26:39,960
it gave like an IP address someone

613
00:26:39,960 --> 00:26:41,880
called like with the user agent Apache

614
00:26:41,880 --> 00:26:43,620
HTTP client

615
00:26:43,620 --> 00:26:47,340
unavailable Java with a version

616
00:26:47,340 --> 00:26:49,380
try to access my blue a test bucket

617
00:26:49,380 --> 00:26:50,700
non-existent

618
00:26:50,700 --> 00:26:53,279
I'm like who's this

619
00:26:53,279 --> 00:26:55,440
I know the cloud formation access I

620
00:26:55,440 --> 00:26:58,620
don't know who this is so I started

621
00:26:58,620 --> 00:27:00,900
a little bit tinkering with the behavior

622
00:27:00,900 --> 00:27:03,419
like tinkering with the API and I got to

623
00:27:03,419 --> 00:27:05,760
a conclusion there's this thing

624
00:27:05,760 --> 00:27:08,460
happening behind the scenes IX cloud

625
00:27:08,460 --> 00:27:10,260
formation I give it a URL right and I

626
00:27:10,260 --> 00:27:12,659
say give me the template summary get

627
00:27:12,659 --> 00:27:15,059
template summary cloud formation access

628
00:27:15,059 --> 00:27:19,260
my S3 bucket if it somehow fails for

629
00:27:19,260 --> 00:27:21,840
example the file was non-existent then

630
00:27:21,840 --> 00:27:24,900
it approaches the HTTP client by Apache

631
00:27:24,900 --> 00:27:27,480
and it says you know what ux is it you

632
00:27:27,480 --> 00:27:29,820
will try and access the bucket why sort

633
00:27:29,820 --> 00:27:31,020
of a fallback

634
00:27:31,020 --> 00:27:35,640
maybe to get the error maybe to uh see

635
00:27:35,640 --> 00:27:37,740
if it's somehow accessible publicly

636
00:27:37,740 --> 00:27:39,480
whatever

637
00:27:39,480 --> 00:27:43,820
but Apache hdb client also accesses it

638
00:27:44,340 --> 00:27:46,320
so I said okay HTTP client let's Google

639
00:27:46,320 --> 00:27:48,840
a little bit and I found a cve like a

640
00:27:48,840 --> 00:27:51,059
vulnerability but I wasn't sure if it's

641
00:27:51,059 --> 00:27:53,340
going to work I tried it

642
00:27:53,340 --> 00:27:56,039
you just put two ad symbols then it's

643
00:27:56,039 --> 00:27:58,740
sort of fools HTTP client it thinks that

644
00:27:58,740 --> 00:28:00,840
it's going to access S3 but it's

645
00:28:00,840 --> 00:28:03,779
actually going to access my evil domain

646
00:28:03,779 --> 00:28:05,760
tried it

647
00:28:05,760 --> 00:28:07,679
didn't work

648
00:28:07,679 --> 00:28:09,299
at this point I was kind of desperate

649
00:28:09,299 --> 00:28:11,159
and I said okay so I know about this

650
00:28:11,159 --> 00:28:13,020
word Behavior

651
00:28:13,020 --> 00:28:15,360
nothing really works about bypassing the

652
00:28:15,360 --> 00:28:17,760
URL filter but I know that HTTP clients

653
00:28:17,760 --> 00:28:19,380
can do one more thing

654
00:28:19,380 --> 00:28:21,480
you have URL parameters remember the

655
00:28:21,480 --> 00:28:22,860
scheme doesn't work the port doesn't

656
00:28:22,860 --> 00:28:25,260
work this ad symbol trick doesn't work

657
00:28:25,260 --> 00:28:28,320
maybe URL parameters are going to do

658
00:28:28,320 --> 00:28:29,940
something

659
00:28:29,940 --> 00:28:32,940
I search for parameters in AWS there's a

660
00:28:32,940 --> 00:28:34,919
parameter called xamz security token

661
00:28:34,919 --> 00:28:37,020
basically used for authentication you

662
00:28:37,020 --> 00:28:38,820
need to combine a few parameters to use

663
00:28:38,820 --> 00:28:41,640
it and I said okay let's let's try it in

664
00:28:41,640 --> 00:28:44,159
the API I just did the same blue head

665
00:28:44,159 --> 00:28:45,980
test bucket slash non-existent

666
00:28:45,980 --> 00:28:48,840
non-existent because only then blue at

667
00:28:48,840 --> 00:28:51,360
test bucket approaches right if it's

668
00:28:51,360 --> 00:28:53,760
existent then

669
00:28:53,760 --> 00:28:55,679
Apache HTTP client does not go into

670
00:28:55,679 --> 00:28:58,620
action and I put this URL parameter and

671
00:28:58,620 --> 00:29:00,059
I said okay let's see what what's going

672
00:29:00,059 --> 00:29:01,679
to happen

673
00:29:01,679 --> 00:29:05,220
when I approach this with my browser and

674
00:29:05,220 --> 00:29:06,900
I open this blue and test bucket link

675
00:29:06,900 --> 00:29:10,200
like this x is denied no AWS access key

676
00:29:10,200 --> 00:29:12,299
was presented

677
00:29:12,299 --> 00:29:13,559
now

678
00:29:13,559 --> 00:29:16,740
when I just did it with the API it says

679
00:29:16,740 --> 00:29:20,039
S3 error no AWS execute was presented so

680
00:29:20,039 --> 00:29:22,380
there is error parsing here

681
00:29:22,380 --> 00:29:25,080
literal error parsing

682
00:29:25,080 --> 00:29:27,539
I was excited but this was like a

683
00:29:27,539 --> 00:29:29,460
Thursday so I was going into the weekend

684
00:29:29,460 --> 00:29:33,600
now I'm uh I'm a Jew I'm an orthodox Jew

685
00:29:33,600 --> 00:29:36,240
so what this means is that from Friday

686
00:29:36,240 --> 00:29:38,640
evening like to Saturday evening I don't

687
00:29:38,640 --> 00:29:40,500
use electricity I can't ride can do all

688
00:29:40,500 --> 00:29:42,120
these kind of things but I was only

689
00:29:42,120 --> 00:29:44,340
thinking about this I was only thinking

690
00:29:44,340 --> 00:29:46,980
in my head about what I knew and what I

691
00:29:46,980 --> 00:29:48,360
thought about was the error extraction

692
00:29:48,360 --> 00:29:51,299
how come AWS This Cloud information

693
00:29:51,299 --> 00:29:54,000
thing how come it knows what the error

694
00:29:54,000 --> 00:29:56,640
from S3 is it really really accesses it

695
00:29:56,640 --> 00:29:58,740
so I knew a few things I worked at

696
00:29:58,740 --> 00:30:01,200
myself okay hdb client can parse the

697
00:30:01,200 --> 00:30:03,120
error from S3 right because one time it

698
00:30:03,120 --> 00:30:05,340
says access denied once one time it says

699
00:30:05,340 --> 00:30:08,159
no AWS xq was presented

700
00:30:08,159 --> 00:30:10,260
it can parse the error

701
00:30:10,260 --> 00:30:13,500
and I know the URL parameters work

702
00:30:13,500 --> 00:30:15,840
and I know this is only a fallback this

703
00:30:15,840 --> 00:30:17,399
only happens when the resource is

704
00:30:17,399 --> 00:30:19,980
inaccessible only when it's non-existent

705
00:30:19,980 --> 00:30:21,539
for example

706
00:30:21,539 --> 00:30:23,820
so I knew it parses I knew what

707
00:30:23,820 --> 00:30:25,260
parameters work and I knew it was a

708
00:30:25,260 --> 00:30:27,240
fallback I said okay combining these

709
00:30:27,240 --> 00:30:29,940
three things what can I do and it's on

710
00:30:29,940 --> 00:30:31,020
on me

711
00:30:31,020 --> 00:30:34,140
I was just about to take like a nap

712
00:30:34,140 --> 00:30:36,600
and I came up with an idea what was the

713
00:30:36,600 --> 00:30:37,559
idea

714
00:30:37,559 --> 00:30:39,840
a race condition and what's sort of race

715
00:30:39,840 --> 00:30:41,820
condition let's see exactly what a

716
00:30:41,820 --> 00:30:43,980
racing am I talking about I'm going to

717
00:30:43,980 --> 00:30:46,320
confirmation give it a new URL the

718
00:30:46,320 --> 00:30:48,559
access is as three buckets

719
00:30:48,559 --> 00:30:51,480
fails because it's a non-existent file

720
00:30:51,480 --> 00:30:54,120
now before it approaches HTTP client and

721
00:30:54,120 --> 00:30:55,860
before Apache HTTP client accesses the

722
00:30:55,860 --> 00:30:58,380
bucket I said okay right now right here

723
00:30:58,380 --> 00:30:59,340
and there

724
00:30:59,340 --> 00:31:01,500
I want to upload that non-existent file

725
00:31:01,500 --> 00:31:03,179
make it existent

726
00:31:03,179 --> 00:31:06,419
then class formation accesses Apache hdp

727
00:31:06,419 --> 00:31:08,760
Clank and then it access the bucket and

728
00:31:08,760 --> 00:31:10,380
it retrieves the file

729
00:31:10,380 --> 00:31:12,659
now how why is this so interesting

730
00:31:12,659 --> 00:31:15,120
because it parses the error and I

731
00:31:15,120 --> 00:31:17,279
thought okay let's put my own error

732
00:31:17,279 --> 00:31:19,200
there see what happens

733
00:31:19,200 --> 00:31:21,600
let's try and put an XML code this is

734
00:31:21,600 --> 00:31:23,700
literally my error this is what it says

735
00:31:23,700 --> 00:31:26,279
inside of my file and I'll trial and

736
00:31:26,279 --> 00:31:28,140
I'll try and see what happens

737
00:31:28,140 --> 00:31:30,720
worst case won't work but if it will

738
00:31:30,720 --> 00:31:32,220
work might be interesting because it

739
00:31:32,220 --> 00:31:35,039
says it can parse my own errors

740
00:31:35,039 --> 00:31:39,059
so I did it how did I do it I operated

741
00:31:39,059 --> 00:31:41,580
burp Intruder which basically just sends

742
00:31:41,580 --> 00:31:44,460
requests back and forth and I did a

743
00:31:44,460 --> 00:31:46,740
shell script that instead of creating a

744
00:31:46,740 --> 00:31:50,039
file it makes the file non-existent

745
00:31:50,039 --> 00:31:53,039
public and private public and private so

746
00:31:53,039 --> 00:31:55,140
it's either X is denied or you get the

747
00:31:55,140 --> 00:31:57,659
file but if it's exactly in the correct

748
00:31:57,659 --> 00:31:59,100
time

749
00:31:59,100 --> 00:32:01,260
then cloud formation will fail and

750
00:32:01,260 --> 00:32:03,960
Apache HTTP client will succeed

751
00:32:03,960 --> 00:32:07,460
and we might get inside

752
00:32:07,799 --> 00:32:10,380
okay so this is how it works

753
00:32:10,380 --> 00:32:12,779
the shell script is on the left the verb

754
00:32:12,779 --> 00:32:14,520
Intruder is on the right and it starts

755
00:32:14,520 --> 00:32:16,799
sending requests and iterates private

756
00:32:16,799 --> 00:32:19,799
public now there are two types of Errors

757
00:32:19,799 --> 00:32:21,779
one is template format error on

758
00:32:21,779 --> 00:32:23,700
supported structure which means cloud

759
00:32:23,700 --> 00:32:26,640
formation found the file try to access

760
00:32:26,640 --> 00:32:28,620
it was public

761
00:32:28,620 --> 00:32:30,840
and it says this is an empty file it's

762
00:32:30,840 --> 00:32:32,419
not a yaml it's not a template

763
00:32:32,419 --> 00:32:35,159
unsupported structure the second error

764
00:32:35,159 --> 00:32:37,919
is when it's private the error looks

765
00:32:37,919 --> 00:32:40,020
like S3 error X is denied because

766
00:32:40,020 --> 00:32:42,899
cloudformation and the HTTP client both

767
00:32:42,899 --> 00:32:45,240
couldn't access it

768
00:32:45,240 --> 00:32:48,659
but I found the third error which was S3

769
00:32:48,659 --> 00:32:50,940
error this is literally my error again

770
00:32:50,940 --> 00:32:53,159
cloud formation fails

771
00:32:53,159 --> 00:32:57,120
the file turns public Apache HTTP client

772
00:32:57,120 --> 00:33:00,059
succeeds and Parcels it now why is this

773
00:33:00,059 --> 00:33:02,640
so interesting because it parses the S3

774
00:33:02,640 --> 00:33:04,380
error by me

775
00:33:04,380 --> 00:33:08,520
and this error in XML format why are

776
00:33:08,520 --> 00:33:10,440
xmls interesting

777
00:33:10,440 --> 00:33:13,860
for this very reason XML documents and

778
00:33:13,860 --> 00:33:16,440
I'll go over this pretty quickly uh

779
00:33:16,440 --> 00:33:18,480
there's an attack called xxc over XML

780
00:33:18,480 --> 00:33:20,399
documents a normal document will look

781
00:33:20,399 --> 00:33:22,260
like the one on top which has like a

782
00:33:22,260 --> 00:33:24,480
root element and different elements and

783
00:33:24,480 --> 00:33:26,580
rendered the text would be like four

784
00:33:26,580 --> 00:33:29,159
eggs uh then you can have things called

785
00:33:29,159 --> 00:33:31,919
XML entities which are if you want to

786
00:33:31,919 --> 00:33:34,080
use a character that means something for

787
00:33:34,080 --> 00:33:36,059
example lower then or greater than and

788
00:33:36,059 --> 00:33:39,000
you have a way to encode it in XML in

789
00:33:39,000 --> 00:33:41,940
this case Ampersand LT

790
00:33:41,940 --> 00:33:45,360
is a way to encode the lower than symbol

791
00:33:45,360 --> 00:33:47,940
right so render they would look like

792
00:33:47,940 --> 00:33:50,399
this a lower than b

793
00:33:50,399 --> 00:33:53,100
now you can also Define your own x

794
00:33:53,100 --> 00:33:55,320
amount of disease so in this case if I

795
00:33:55,320 --> 00:33:57,419
want to be a rapper for example right so

796
00:33:57,419 --> 00:34:00,299
I can define an entity called MC which

797
00:34:00,299 --> 00:34:02,399
says chicka chicka entity called me

798
00:34:02,399 --> 00:34:06,240
which says and rendered this would look

799
00:34:06,240 --> 00:34:08,899
like hi my name is chikachika

800
00:34:08,899 --> 00:34:12,480
foreign very nice now how is this

801
00:34:12,480 --> 00:34:14,879
vulnerability not yet

802
00:34:14,879 --> 00:34:17,339
you can Define external entities what

803
00:34:17,339 --> 00:34:19,139
are external entities you can define an

804
00:34:19,139 --> 00:34:21,540
XML entity in this case one called not

805
00:34:21,540 --> 00:34:24,418
malicious and if you add the keyword

806
00:34:24,418 --> 00:34:26,960
system

807
00:34:27,179 --> 00:34:30,060
then you can put a URL to whatever you

808
00:34:30,060 --> 00:34:32,460
want and it accesses it when it renders

809
00:34:32,460 --> 00:34:36,780
so file Etc pass WD then nothing to see

810
00:34:36,780 --> 00:34:39,179
here and rendered you can guess how it

811
00:34:39,179 --> 00:34:42,719
should look I said okay

812
00:34:42,719 --> 00:34:45,839
Skippy client parishes XML only some XML

813
00:34:45,839 --> 00:34:47,820
parsers are vulnerable to x6c I said

814
00:34:47,820 --> 00:34:50,460
let's give it a shot and I gave it a

815
00:34:50,460 --> 00:34:52,139
shot

816
00:34:52,139 --> 00:34:54,740
foreign

817
00:34:56,900 --> 00:34:58,859
thing again

818
00:34:58,859 --> 00:35:02,820
and I put my error message with an

819
00:35:02,820 --> 00:35:05,280
entity like a malicious entity

820
00:35:05,280 --> 00:35:07,260
and I got this thing

821
00:35:07,260 --> 00:35:10,020
in response

822
00:35:10,020 --> 00:35:12,839
S3 error not access denied not this is

823
00:35:12,839 --> 00:35:15,480
literally my error S3 error and the ETC

824
00:35:15,480 --> 00:35:19,440
pass WD file of that AWS server and the

825
00:35:19,440 --> 00:35:21,660
reason is censored is because plenty of

826
00:35:21,660 --> 00:35:24,660
AWS employees and their names

827
00:35:24,660 --> 00:35:26,820
are found here so we have to censor it

828
00:35:26,820 --> 00:35:30,540
but it was amazing like 28 requests in

829
00:35:30,540 --> 00:35:32,820
there it was it just worked the race

830
00:35:32,820 --> 00:35:34,980
worked and it had an external entity

831
00:35:34,980 --> 00:35:37,079
attack

832
00:35:37,079 --> 00:35:38,880
now

833
00:35:38,880 --> 00:35:41,099
I love race conditions they're not too

834
00:35:41,099 --> 00:35:43,020
practical why because it takes like 30

835
00:35:43,020 --> 00:35:48,359
requests for one uh result so I tried to

836
00:35:48,359 --> 00:35:52,578
exploit it in one request and I did it

837
00:35:53,540 --> 00:35:55,440
there's a thing called the bucket

838
00:35:55,440 --> 00:35:57,839
policies in AWS basically you could put

839
00:35:57,839 --> 00:36:01,040
a policy saying okay deny

840
00:36:01,040 --> 00:36:04,859
every uh deny everyone

841
00:36:04,859 --> 00:36:07,380
from doing things in my S3 blew a test

842
00:36:07,380 --> 00:36:10,560
bucket unless you called HTTP client and

843
00:36:10,560 --> 00:36:15,000
how this works now is I go to S3 I

844
00:36:15,000 --> 00:36:18,180
upload this file called non-existent and

845
00:36:18,180 --> 00:36:20,940
the policy and it certainly locks the

846
00:36:20,940 --> 00:36:22,560
bucket

847
00:36:22,560 --> 00:36:25,200
now only one with a key can access it

848
00:36:25,200 --> 00:36:27,119
now when I go to class formation it

849
00:36:27,119 --> 00:36:29,700
accesses the uh the bucket it fails

850
00:36:29,700 --> 00:36:32,700
because it's locked in Apache hdb client

851
00:36:32,700 --> 00:36:35,520
can open it why because it's user agent

852
00:36:35,520 --> 00:36:37,680
contains the word Apache HTTP client so

853
00:36:37,680 --> 00:36:40,440
it unknowingly has the key opens the

854
00:36:40,440 --> 00:36:42,660
bucket gets the error

855
00:36:42,660 --> 00:36:46,920
easy how it looks pretty simple

856
00:36:46,920 --> 00:36:48,240
oh

857
00:36:48,240 --> 00:36:49,859
pretty simple

858
00:36:49,859 --> 00:36:51,480
one second

859
00:36:51,480 --> 00:36:54,200
like this

860
00:36:55,320 --> 00:36:58,140
I have a script creates a bucket creates

861
00:36:58,140 --> 00:37:00,180
the policies whatever and it's censored

862
00:37:00,180 --> 00:37:02,099
obviously but you can get in one request

863
00:37:02,099 --> 00:37:05,160
you can get uh to export and read files

864
00:37:05,160 --> 00:37:06,660
what can you do with this you can read

865
00:37:06,660 --> 00:37:08,460
files which is what we did up to now

866
00:37:08,460 --> 00:37:11,640
when you try to read a directory

867
00:37:11,640 --> 00:37:15,599
and get their listing which is very very

868
00:37:15,599 --> 00:37:18,540
interesting and you can have ssrfs why

869
00:37:18,540 --> 00:37:20,940
because you can access a URL in this

870
00:37:20,940 --> 00:37:22,320
case there's a file URL but you can

871
00:37:22,320 --> 00:37:24,839
access whatever URL you want HTTP and

872
00:37:24,839 --> 00:37:26,640
this is interesting because

873
00:37:26,640 --> 00:37:29,700
the cloud has imds imds remember

874
00:37:29,700 --> 00:37:32,280
configurations credentials we can make

875
00:37:32,280 --> 00:37:34,740
it even more interesting but I sort of

876
00:37:34,740 --> 00:37:36,359
lie to you why because there is a

877
00:37:36,359 --> 00:37:38,280
protection against imds

878
00:37:38,280 --> 00:37:41,160
the protection is imds V2 what it does

879
00:37:41,160 --> 00:37:42,960
it means okay it doesn't make sense that

880
00:37:42,960 --> 00:37:44,280
one request can give me whatever

881
00:37:44,280 --> 00:37:46,200
credentials I want you need to make two

882
00:37:46,200 --> 00:37:48,359
requests one is a put request with a

883
00:37:48,359 --> 00:37:51,119
certain header then you get a token then

884
00:37:51,119 --> 00:37:52,859
you use that token basically you need to

885
00:37:52,859 --> 00:37:55,200
have a session so this exploitation

886
00:37:55,200 --> 00:37:58,619
shouldn't work and AWS also says you

887
00:37:58,619 --> 00:38:01,140
need to disable and this V1 just click

888
00:38:01,140 --> 00:38:03,480
on here and they have an article called

889
00:38:03,480 --> 00:38:06,060
using dsv2 and they say they recommend

890
00:38:06,060 --> 00:38:08,579
adopting V2 and restricting access to V2

891
00:38:08,579 --> 00:38:10,400
only for added security

892
00:38:10,400 --> 00:38:15,300
but factually when I tried it and I ran

893
00:38:15,300 --> 00:38:18,240
my script and I tried to access 169 254

894
00:38:18,240 --> 00:38:19,800
this should fail

895
00:38:19,800 --> 00:38:23,040
it didn't fail I got metadata I got

896
00:38:23,040 --> 00:38:26,940
credentials happy Hanukkah

897
00:38:26,940 --> 00:38:29,040
and I can't still show the credentials

898
00:38:29,040 --> 00:38:32,160
but uh I can show the success

899
00:38:32,160 --> 00:38:33,960
I try to use the credentials to

900
00:38:33,960 --> 00:38:36,720
understand who this is and I got AWS

901
00:38:36,720 --> 00:38:39,480
service AWS internal this is these were

902
00:38:39,480 --> 00:38:42,060
the credentials that I had uh we had in

903
00:38:42,060 --> 00:38:44,460
the palm of our hands and we stopped

904
00:38:44,460 --> 00:38:47,820
here we just closed it to AWS it was

905
00:38:47,820 --> 00:38:50,339
deployed within like 25 hours they had a

906
00:38:50,339 --> 00:38:52,619
patch it was very quick it was fully

907
00:38:52,619 --> 00:38:55,500
passed within six days and I should only

908
00:38:55,500 --> 00:38:56,880
probably State these kind of things

909
00:38:56,880 --> 00:38:58,800
first of all these were not cloud

910
00:38:58,800 --> 00:39:00,839
formations credentials it was not the

911
00:39:00,839 --> 00:39:02,880
service credentials right so we were not

912
00:39:02,880 --> 00:39:04,380
like the highest permissions we were

913
00:39:04,380 --> 00:39:06,359
like an AWS service we were from AWS

914
00:39:06,359 --> 00:39:09,420
internal but not more than this yet we

915
00:39:09,420 --> 00:39:11,160
didn't explore too much further but we

916
00:39:11,160 --> 00:39:12,720
did find like internal configuration

917
00:39:12,720 --> 00:39:14,640
files inside of the machine and like

918
00:39:14,640 --> 00:39:17,339
internal services that we can access and

919
00:39:17,339 --> 00:39:19,920
internal credentials and whatever but we

920
00:39:19,920 --> 00:39:22,260
do believe from other researchers We

921
00:39:22,260 --> 00:39:25,200
performed in AWS that

922
00:39:25,200 --> 00:39:27,960
if we would have escalated this more to

923
00:39:27,960 --> 00:39:30,540
an rce right from an XC which means

924
00:39:30,540 --> 00:39:32,579
reading files as surfs and whatever to

925
00:39:32,579 --> 00:39:35,400
an RC we do believe that this would have

926
00:39:35,400 --> 00:39:38,040
led to severe cross stance violation in

927
00:39:38,040 --> 00:39:40,440
the cloud formation service

928
00:39:40,440 --> 00:39:43,260
um and I'll just uh shortly say the

929
00:39:43,260 --> 00:39:44,940
takeaways

930
00:39:44,940 --> 00:39:47,099
which are

931
00:39:47,099 --> 00:39:48,599
first of all

932
00:39:48,599 --> 00:39:51,180
black box is hard this is like sort of

933
00:39:51,180 --> 00:39:53,099
like a strikethrough this is just like a

934
00:39:53,099 --> 00:39:55,320
a reminder right

935
00:39:55,320 --> 00:39:57,599
it's very hard to try to research

936
00:39:57,599 --> 00:39:58,800
something when you don't have the source

937
00:39:58,800 --> 00:40:02,040
code AWS in particular is just a giant

938
00:40:02,040 --> 00:40:04,619
cloud provider uh second thing is

939
00:40:04,619 --> 00:40:06,900
logical performabilities are really a

940
00:40:06,900 --> 00:40:08,640
thing this one is like a race condition

941
00:40:08,640 --> 00:40:11,099
leading to an XML external entity and

942
00:40:11,099 --> 00:40:12,720
you say like how can someone think of

943
00:40:12,720 --> 00:40:14,940
these and it's really hard you need to

944
00:40:14,940 --> 00:40:16,680
be creative you need to I don't know

945
00:40:16,680 --> 00:40:19,619
think about this a lot of time but

946
00:40:19,619 --> 00:40:22,020
it still works there are still logical

947
00:40:22,020 --> 00:40:23,940
vulnerabilities even when you don't know

948
00:40:23,940 --> 00:40:26,400
the source code you can just think and

949
00:40:26,400 --> 00:40:29,820
read about the API and sort of uh

950
00:40:29,820 --> 00:40:32,040
succeed eventually

951
00:40:32,040 --> 00:40:34,920
no platform isn't valuable in the sense

952
00:40:34,920 --> 00:40:37,079
that everyone will have vulnerabilities

953
00:40:37,079 --> 00:40:39,720
even AWS

954
00:40:39,720 --> 00:40:43,380
but the cloud is more secure why you've

955
00:40:43,380 --> 00:40:45,660
heard about log4j I assume for example

956
00:40:45,660 --> 00:40:47,160
it takes

957
00:40:47,160 --> 00:40:50,280
months days weeks even sometimes years

958
00:40:50,280 --> 00:40:53,640
to patch this in all servers because it

959
00:40:53,640 --> 00:40:56,339
needs to be maintained in this case we

960
00:40:56,339 --> 00:40:58,800
reported the vulnerability 25 hours like

961
00:40:58,800 --> 00:41:00,420
less than a week

962
00:41:00,420 --> 00:41:02,760
and no one else is vulnerable to this

963
00:41:02,760 --> 00:41:04,859
thing ever

964
00:41:04,859 --> 00:41:08,540
so this was pretty cool and

965
00:41:08,540 --> 00:41:10,740
you might want to watch us on forward

966
00:41:10,740 --> 00:41:12,480
Cloud SEC we have different

967
00:41:12,480 --> 00:41:13,920
vulnerabilities we're presenting in

968
00:41:13,920 --> 00:41:17,040
Azure in AWS uh it's going to be super

969
00:41:17,040 --> 00:41:21,000
super cool thank you guys my name is my

970
00:41:21,000 --> 00:41:23,160
Twitter account if you want to follow uh

971
00:41:23,160 --> 00:41:26,240
was an honor presenting you

972
00:41:26,640 --> 00:41:29,940
that's what a great presentation I am so

973
00:41:29,940 --> 00:41:31,500
sure our participants must have found

974
00:41:31,500 --> 00:41:34,740
some knowledgeable inputs via that uh

975
00:41:34,740 --> 00:41:36,420
guys uh thank you for joining the

976
00:41:36,420 --> 00:41:38,820
session and in case you still have any

977
00:41:38,820 --> 00:41:41,280
questions uh Za has just dropped a

978
00:41:41,280 --> 00:41:43,980
social media Twitter account so in case

979
00:41:43,980 --> 00:41:46,020
you have any further questions you can

980
00:41:46,020 --> 00:41:48,900
ask him or reach out to him uh through

981
00:41:48,900 --> 00:41:54,079
his Twitter thank you bye thank you bye

