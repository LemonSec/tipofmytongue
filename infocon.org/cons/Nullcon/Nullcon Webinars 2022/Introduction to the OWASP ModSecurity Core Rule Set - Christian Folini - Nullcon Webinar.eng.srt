1
00:00:00,060 --> 00:00:12,070
[Music]

2
00:00:12,480 --> 00:00:14,639
all right so i'm gonna start with the

3
00:00:14,639 --> 00:00:17,279
session uh hello everyone uh thank you

4
00:00:17,279 --> 00:00:19,279
for joining today's session

5
00:00:19,279 --> 00:00:21,840
um my name is sakshi and i am part of

6
00:00:21,840 --> 00:00:24,640
the nulcon team for those of you who are

7
00:00:24,640 --> 00:00:27,119
new uh nulcon conference is a unique

8
00:00:27,119 --> 00:00:29,119
platform for security enthusiasts and

9
00:00:29,119 --> 00:00:31,599
professionals to showcase their research

10
00:00:31,599 --> 00:00:34,160
and technology to the community we have

11
00:00:34,160 --> 00:00:36,800
our upcoming events

12
00:00:36,800 --> 00:00:39,280
2022 happening in september and the

13
00:00:39,280 --> 00:00:41,280
focus of the conference is to showcase

14
00:00:41,280 --> 00:00:43,200
the next generation of offensive and

15
00:00:43,200 --> 00:00:45,520
defensive security technology

16
00:00:45,520 --> 00:00:47,680
uh we are also happy to let you know

17
00:00:47,680 --> 00:00:49,520
that we have announced our nilcon

18
00:00:49,520 --> 00:00:52,239
security trainings boa edition which

19
00:00:52,239 --> 00:00:54,879
will happen from 6th to 8th september

20
00:00:54,879 --> 00:00:57,280
and to see all the different types of

21
00:00:57,280 --> 00:00:59,359
hands-on trainings that we are offering

22
00:00:59,359 --> 00:01:02,399
you can visit our website and coming to

23
00:01:02,399 --> 00:01:05,280
our today's speaker we have with us

24
00:01:05,280 --> 00:01:07,680
christian colony uh who is a swiss

25
00:01:07,680 --> 00:01:10,400
security engineer and an open source

26
00:01:10,400 --> 00:01:11,760
enthusiast

27
00:01:11,760 --> 00:01:14,240
he brings in 15 years of experience with

28
00:01:14,240 --> 00:01:16,320
mod security configuration in high

29
00:01:16,320 --> 00:01:19,439
security environments ddos

30
00:01:19,439 --> 00:01:21,040
defense and

31
00:01:21,040 --> 00:01:23,439
threat modeling christian is the author

32
00:01:23,439 --> 00:01:25,280
of the second edition of mod security

33
00:01:25,280 --> 00:01:27,200
handbook and the best known teacher on

34
00:01:27,200 --> 00:01:29,920
the subject he co-leads the oas mod

35
00:01:29,920 --> 00:01:33,040
security core ruleset project and serves

36
00:01:33,040 --> 00:01:34,960
as the program chair of the swiss

37
00:01:34,960 --> 00:01:38,079
cyberstorm confidence christian is also

38
00:01:38,079 --> 00:01:40,400
a frequent speaker at conferences where

39
00:01:40,400 --> 00:01:42,479
he tries to use his background in the

40
00:01:42,479 --> 00:01:44,640
humanities to explain hardcore technical

41
00:01:44,640 --> 00:01:47,439
topics to audience of different patterns

42
00:01:47,439 --> 00:01:50,159
so on behalf of all of us i would like

43
00:01:50,159 --> 00:01:52,479
to welcome christian and before we go

44
00:01:52,479 --> 00:01:54,320
ahead a few instructions for the

45
00:01:54,320 --> 00:01:57,280
audience our talk duration is about 30

46
00:01:57,280 --> 00:01:59,280
minutes and at the end we will have a

47
00:01:59,280 --> 00:02:01,759
question answer session you all can ask

48
00:02:01,759 --> 00:02:03,600
your questions using the chat option

49
00:02:03,600 --> 00:02:05,280
after the talk i would request our

50
00:02:05,280 --> 00:02:07,119
speaker christian to take charge of this

51
00:02:07,119 --> 00:02:08,959
session thank you sakshi thank you for

52
00:02:08,959 --> 00:02:11,120
having me thank you for the invitation

53
00:02:11,120 --> 00:02:13,520
and thank you for attending my session

54
00:02:13,520 --> 00:02:16,080
so i'm going to introduce you uh to the

55
00:02:16,080 --> 00:02:18,400
os mod security call rule set in the

56
00:02:18,400 --> 00:02:21,040
next half hour astrax has already

57
00:02:21,040 --> 00:02:24,160
introduced me i'm christian fellini i'm

58
00:02:24,160 --> 00:02:27,200
a swiss security engineer originally i

59
00:02:27,200 --> 00:02:29,360
was a historian but then i moved over

60
00:02:29,360 --> 00:02:32,640
into iccit security and i specialized in

61
00:02:32,640 --> 00:02:35,120
web application firewalls namely the

62
00:02:35,120 --> 00:02:37,599
open source mod security

63
00:02:37,599 --> 00:02:39,760
always crs

64
00:02:39,760 --> 00:02:41,120
offering

65
00:02:41,120 --> 00:02:42,800
so

66
00:02:42,800 --> 00:02:45,840
why are at all why would you use a web

67
00:02:45,840 --> 00:02:49,680
application firewall at all it's like

68
00:02:49,680 --> 00:02:51,360
using a seat belt

69
00:02:51,360 --> 00:02:52,480
in a car

70
00:02:52,480 --> 00:02:55,360
when you get into a car accident

71
00:02:55,360 --> 00:02:57,519
then there is a good return on

72
00:02:57,519 --> 00:02:58,800
investment

73
00:02:58,800 --> 00:03:01,519
for wearing a safety belt

74
00:03:01,519 --> 00:03:03,440
it doesn't mean that there will be no

75
00:03:03,440 --> 00:03:05,760
accidents not at all there might still

76
00:03:05,760 --> 00:03:09,040
be accidents but if there is an accident

77
00:03:09,040 --> 00:03:11,360
then you're better off when you wear a

78
00:03:11,360 --> 00:03:14,000
safety belt wearing a safety belt is a

79
00:03:14,000 --> 00:03:17,440
baseline safety measure

80
00:03:17,440 --> 00:03:19,840
and when the bad thing happens

81
00:03:19,840 --> 00:03:22,879
then you'll be less harmed you're easier

82
00:03:22,879 --> 00:03:24,480
to get out of the car

83
00:03:24,480 --> 00:03:26,799
unharmed thanks to the safety belt

84
00:03:26,799 --> 00:03:29,040
however the safety belt is also only one

85
00:03:29,040 --> 00:03:32,080
of several safety precautions cars have

86
00:03:32,080 --> 00:03:34,400
become more and more safe during the

87
00:03:34,400 --> 00:03:37,599
last century perhaps there are airbags

88
00:03:37,599 --> 00:03:41,040
nowadays you pay attention you go sleep

89
00:03:41,040 --> 00:03:42,959
behind the steering wheel

90
00:03:42,959 --> 00:03:45,920
and so on there are multiple defense

91
00:03:45,920 --> 00:03:47,920
measures and the safety belt is one of

92
00:03:47,920 --> 00:03:48,879
them

93
00:03:48,879 --> 00:03:51,040
you could call it as the first line of

94
00:03:51,040 --> 00:03:53,040
defense in fact the safety belt was one

95
00:03:53,040 --> 00:03:54,959
of the first inventions to make hard

96
00:03:54,959 --> 00:03:56,480
driving

97
00:03:56,480 --> 00:03:57,840
more safe

98
00:03:57,840 --> 00:04:01,040
and that is the same thing we face with

99
00:04:01,040 --> 00:04:03,519
avof avaf doesn't solve all your

100
00:04:03,519 --> 00:04:05,760
security problems you still need to

101
00:04:05,760 --> 00:04:08,720
deploy safe code you still need to patch

102
00:04:08,720 --> 00:04:11,040
your servers you still have to pay

103
00:04:11,040 --> 00:04:13,599
attention to safe to secure coding

104
00:04:13,599 --> 00:04:14,799
practices

105
00:04:14,799 --> 00:04:15,760
but

106
00:04:15,760 --> 00:04:18,238
if you are attacked then you're better

107
00:04:18,238 --> 00:04:21,440
off with a web application firewall

108
00:04:21,440 --> 00:04:22,960
doesn't mean it solves all of your

109
00:04:22,960 --> 00:04:24,000
problems

110
00:04:24,000 --> 00:04:27,680
but usually it buys you time it is more

111
00:04:27,680 --> 00:04:30,240
difficult for an attacker to exploit

112
00:04:30,240 --> 00:04:33,120
your website your replications chances

113
00:04:33,120 --> 00:04:34,000
are

114
00:04:34,000 --> 00:04:35,840
an attacker will give up

115
00:04:35,840 --> 00:04:36,960
and move

116
00:04:36,960 --> 00:04:38,880
to the competition they will leave you

117
00:04:38,880 --> 00:04:41,680
alone and attack somebody else that is

118
00:04:41,680 --> 00:04:44,400
the promise of a web application fire

119
00:04:44,400 --> 00:04:46,400
why do they move somewhere else because

120
00:04:46,400 --> 00:04:49,120
it's tiring it's annoying the vaf stands

121
00:04:49,120 --> 00:04:50,880
in their way it disrupts their

122
00:04:50,880 --> 00:04:53,440
activities it's blocks their attacks

123
00:04:53,440 --> 00:04:55,440
they have to think really hard how to

124
00:04:55,440 --> 00:04:58,639
get around the vaf so rough is useful in

125
00:04:58,639 --> 00:05:00,800
delaying attacks

126
00:05:00,800 --> 00:05:04,400
not ruling them out completely

127
00:05:04,400 --> 00:05:06,080
good

128
00:05:06,080 --> 00:05:08,320
web application firewall is a big big

129
00:05:08,320 --> 00:05:10,960
market and it is an interesting market

130
00:05:10,960 --> 00:05:12,320
in the sense that there are many many

131
00:05:12,320 --> 00:05:15,919
commercial offerings but only a real

132
00:05:15,919 --> 00:05:18,800
single real open source offering

133
00:05:18,800 --> 00:05:20,320
and that is

134
00:05:20,320 --> 00:05:22,400
basically mod security what people call

135
00:05:22,400 --> 00:05:26,639
mod security mod security is an engine

136
00:05:26,639 --> 00:05:28,880
it's originally an apache module so

137
00:05:28,880 --> 00:05:30,880
something you put into the apache web

138
00:05:30,880 --> 00:05:32,000
server

139
00:05:32,000 --> 00:05:34,960
as a security enhancement but that's

140
00:05:34,960 --> 00:05:36,320
only the engine

141
00:05:36,320 --> 00:05:38,639
it is naked so to say how does the

142
00:05:38,639 --> 00:05:41,280
engine work it is embedded in the web

143
00:05:41,280 --> 00:05:44,240
server it has a rule orientation so you

144
00:05:44,240 --> 00:05:47,280
configure the engine via rules that you

145
00:05:47,280 --> 00:05:49,840
need to define in a domain specific

146
00:05:49,840 --> 00:05:52,240
language get to that afterwards and it

147
00:05:52,240 --> 00:05:54,320
gives you granular control

148
00:05:54,320 --> 00:05:57,199
so you always see your rules and you can

149
00:05:57,199 --> 00:05:59,280
deduce exactly what they're doing there

150
00:05:59,280 --> 00:06:01,840
is no machine learning involved

151
00:06:01,840 --> 00:06:04,000
in here and this is no

152
00:06:04,000 --> 00:06:07,280
cloud enabled the next generation i

153
00:06:07,280 --> 00:06:09,919
going to ring home

154
00:06:09,919 --> 00:06:12,240
as super mastermind without

155
00:06:12,240 --> 00:06:14,560
artificial intelligence no not at all

156
00:06:14,560 --> 00:06:17,199
this is honest down to earth engineering

157
00:06:17,199 --> 00:06:18,880
you write rules

158
00:06:18,880 --> 00:06:20,560
and the rules are going to be executed

159
00:06:20,560 --> 00:06:22,479
by the engine and if the engine thinks

160
00:06:22,479 --> 00:06:24,240
this is an attacking request it's going

161
00:06:24,240 --> 00:06:26,800
to block it it's as simple as that the

162
00:06:26,800 --> 00:06:29,039
rule language is complicated

163
00:06:29,039 --> 00:06:31,840
writing rules can be annoying but you

164
00:06:31,840 --> 00:06:35,199
always know exactly what's going on

165
00:06:35,199 --> 00:06:37,360
and that helps i mean that is a

166
00:06:37,360 --> 00:06:40,240
traditional secure engineering approach

167
00:06:40,240 --> 00:06:42,479
if you want

168
00:06:42,479 --> 00:06:45,360
good smart security is this engine

169
00:06:45,360 --> 00:06:46,880
and the engine

170
00:06:46,880 --> 00:06:48,400
is naked without

171
00:06:48,400 --> 00:06:51,039
rules nothing happens that's just

172
00:06:51,039 --> 00:06:54,160
the engine without configuration so what

173
00:06:54,160 --> 00:06:57,840
you need to have is rules on top

174
00:06:57,840 --> 00:06:59,919
and the rules on top that

175
00:06:59,919 --> 00:07:03,520
most people use is the os mod security

176
00:07:03,520 --> 00:07:07,039
call rule set so engine underneath

177
00:07:07,039 --> 00:07:09,520
rules on top rules you're getting from

178
00:07:09,520 --> 00:07:11,280
our open source

179
00:07:11,280 --> 00:07:13,360
project

180
00:07:13,360 --> 00:07:16,639
if you have maybe 100 commercial buff

181
00:07:16,639 --> 00:07:18,240
offerings on the market

182
00:07:18,240 --> 00:07:20,720
i'm pretty confident that more than half

183
00:07:20,720 --> 00:07:23,360
of these commercial offerings also use

184
00:07:23,360 --> 00:07:25,280
the open source rule set

185
00:07:25,280 --> 00:07:28,319
so when you go to azure or cloudflare

186
00:07:28,319 --> 00:07:31,919
these days or any other cloud offering

187
00:07:31,919 --> 00:07:34,160
uh they have a vaf

188
00:07:34,160 --> 00:07:36,880
service as well and the vap service

189
00:07:36,880 --> 00:07:38,639
is in part

190
00:07:38,639 --> 00:07:40,960
based on crs so you get mod security

191
00:07:40,960 --> 00:07:44,400
call rule set on azure or on cloudflare

192
00:07:44,400 --> 00:07:48,160
on aws or record cloud akamai

193
00:07:48,160 --> 00:07:50,960
verizon media now edgecast maybe even

194
00:07:50,960 --> 00:07:52,720
alibaba but we're not quite sure with

195
00:07:52,720 --> 00:07:54,879
alibaba but all the other offerings they

196
00:07:54,879 --> 00:07:56,960
have a crs

197
00:07:56,960 --> 00:07:59,280
service in place that is often

198
00:07:59,280 --> 00:08:02,000
an add-on that you can enable

199
00:08:02,000 --> 00:08:04,639
so they all reuse the open source tool

200
00:08:04,639 --> 00:08:06,879
why because it's basically without

201
00:08:06,879 --> 00:08:08,000
competition

202
00:08:08,000 --> 00:08:10,560
there is no other open source rule set

203
00:08:10,560 --> 00:08:12,000
and that means you have to do it

204
00:08:12,000 --> 00:08:14,160
yourself you have to write the same

205
00:08:14,160 --> 00:08:15,759
rules and they need to be better than

206
00:08:15,759 --> 00:08:17,680
the free offering so that and that is

207
00:08:17,680 --> 00:08:20,080
that is that is a lot of work that's how

208
00:08:20,080 --> 00:08:22,639
most of the commercial users or the

209
00:08:22,639 --> 00:08:23,680
commercial

210
00:08:23,680 --> 00:08:26,960
integrators use our rule set for their

211
00:08:26,960 --> 00:08:29,360
commercial appliances

212
00:08:29,360 --> 00:08:32,000
cloud buffs you name it

213
00:08:32,000 --> 00:08:36,479
good so how does this crs thing works

214
00:08:36,479 --> 00:08:38,640
first it works really well

215
00:08:38,640 --> 00:08:41,200
this is research uh a friend of mine

216
00:08:41,200 --> 00:08:42,479
performed in switzerland a couple of

217
00:08:42,479 --> 00:08:43,599
years ago

218
00:08:43,599 --> 00:08:44,959
on the left

219
00:08:44,959 --> 00:08:48,080
you see a vulnerable application

220
00:08:48,080 --> 00:08:51,680
being attacked by burp and burp would

221
00:08:51,680 --> 00:08:54,720
report back look at over a thousand

222
00:08:54,720 --> 00:08:57,440
requests i found a weakness in this

223
00:08:57,440 --> 00:08:59,680
vulnerable application the application

224
00:08:59,680 --> 00:09:01,839
is made vulnerable on purpose this is

225
00:09:01,839 --> 00:09:04,880
supposed to show you

226
00:09:04,880 --> 00:09:07,200
vulnerabilities and then burp would

227
00:09:07,200 --> 00:09:09,920
identify those and say hey look i found

228
00:09:09,920 --> 00:09:11,839
with over a thousand requests i found

229
00:09:11,839 --> 00:09:13,440
weaknesses these are not a thousand

230
00:09:13,440 --> 00:09:14,640
weaknesses

231
00:09:14,640 --> 00:09:16,080
but

232
00:09:16,080 --> 00:09:18,399
multiple weak the same weaknesses hit

233
00:09:18,399 --> 00:09:21,120
multiple times and then in the second

234
00:09:21,120 --> 00:09:23,600
smaller column you have a five minute

235
00:09:23,600 --> 00:09:26,000
installation of the call rule set

236
00:09:26,000 --> 00:09:27,920
this is the advantages that bring you

237
00:09:27,920 --> 00:09:30,399
it's over 80 percent

238
00:09:30,399 --> 00:09:32,720
of the requests

239
00:09:32,720 --> 00:09:35,279
that burp used to report hey weakness is

240
00:09:35,279 --> 00:09:38,000
found verb will now require hey anything

241
00:09:38,000 --> 00:09:40,240
no problem i don't see a security

242
00:09:40,240 --> 00:09:43,279
weakness what is left

243
00:09:43,279 --> 00:09:46,080
send of these requests that originally

244
00:09:46,080 --> 00:09:47,760
hit a weakness

245
00:09:47,760 --> 00:09:50,240
and now this weakness is mitigated in

246
00:09:50,240 --> 00:09:51,839
over 80 percent

247
00:09:51,839 --> 00:09:54,720
of the cases in fact burp is no longer

248
00:09:54,720 --> 00:09:57,839
able to put push through with an sql

249
00:09:57,839 --> 00:10:00,800
injection or a local file inclusion

250
00:10:00,800 --> 00:10:02,959
against crs

251
00:10:02,959 --> 00:10:05,839
in this setting

252
00:10:06,000 --> 00:10:08,480
there is there are additional columns

253
00:10:08,480 --> 00:10:10,880
called paranoia levels paranoia levels

254
00:10:10,880 --> 00:10:14,000
are a configure item in crs where you

255
00:10:14,000 --> 00:10:15,440
adjust

256
00:10:15,440 --> 00:10:17,680
this the paranoia if you will or the

257
00:10:17,680 --> 00:10:20,720
security level that you want the higher

258
00:10:20,720 --> 00:10:23,440
the paranoia the more crazy the rules

259
00:10:23,440 --> 00:10:24,800
that becomes

260
00:10:24,800 --> 00:10:26,800
and the more aggressive it becomes it

261
00:10:26,800 --> 00:10:30,000
will block faster we'll say hey hey this

262
00:10:30,000 --> 00:10:32,480
is an attack immediately fast really

263
00:10:32,480 --> 00:10:35,120
paranoid in a sense and of course that

264
00:10:35,120 --> 00:10:37,839
brings false alarms

265
00:10:37,839 --> 00:10:40,720
that so this higher security appetite

266
00:10:40,720 --> 00:10:43,519
comes with a cost that's why you're able

267
00:10:43,519 --> 00:10:46,240
to define is yourself we're supporting

268
00:10:46,240 --> 00:10:49,279
four of these paranoia levels so there

269
00:10:49,279 --> 00:10:50,560
is a

270
00:10:50,560 --> 00:10:52,480
the first one with a millimeter number

271
00:10:52,480 --> 00:10:54,640
of false positive that is the default

272
00:10:54,640 --> 00:10:57,680
gives you baseline protection this is

273
00:10:57,680 --> 00:10:59,839
crs for everybody if you put up a

274
00:10:59,839 --> 00:11:03,120
website we think you should do this

275
00:11:03,120 --> 00:11:05,600
always when you have real data in the

276
00:11:05,600 --> 00:11:07,600
service like real customer data real

277
00:11:07,600 --> 00:11:10,160
assets maybe an online shop then

278
00:11:10,160 --> 00:11:12,480
paranoia level 2 could be your thing

279
00:11:12,480 --> 00:11:14,560
where we hit more attack we detect more

280
00:11:14,560 --> 00:11:17,200
attacks with this but you might have to

281
00:11:17,200 --> 00:11:19,920
face a few false positives already

282
00:11:19,920 --> 00:11:22,079
online banking is meant to be on level

283
00:11:22,079 --> 00:11:22,959
three

284
00:11:22,959 --> 00:11:25,920
and level four is crazy the strongest

285
00:11:25,920 --> 00:11:29,040
crs that you can get this is really like

286
00:11:29,040 --> 00:11:31,839
a mad dog that will bite the mailman

287
00:11:31,839 --> 00:11:33,440
when he's delivering something to your

288
00:11:33,440 --> 00:11:36,320
doorstep so this brings a lot of faults

289
00:11:36,320 --> 00:11:39,040
positive and means a lot of work for you

290
00:11:39,040 --> 00:11:41,519
to tune away defaults positive so you

291
00:11:41,519 --> 00:11:44,480
it's like training a dog to treat the

292
00:11:44,480 --> 00:11:46,800
mailman as a friend

293
00:11:46,800 --> 00:11:49,839
that is tuning away false positives

294
00:11:49,839 --> 00:11:51,760
thankfully the dog responds well to

295
00:11:51,760 --> 00:11:53,920
training but it's still a lot of work

296
00:11:53,920 --> 00:11:58,720
with an aggressive dog that is the crazy

297
00:11:58,720 --> 00:12:00,160
paranoia level

298
00:12:00,160 --> 00:12:01,600
for

299
00:12:01,600 --> 00:12:02,560
good

300
00:12:02,560 --> 00:12:04,880
so we think this is pretty strong and we

301
00:12:04,880 --> 00:12:07,040
think we're pretty good how does that

302
00:12:07,040 --> 00:12:11,680
look for real this is a graph taking

303
00:12:11,680 --> 00:12:13,920
from a blog post from a finnish guy

304
00:12:13,920 --> 00:12:15,920
called former mark conan he published

305
00:12:15,920 --> 00:12:18,160
this i think two years ago and he would

306
00:12:18,160 --> 00:12:21,600
look at various cloud rav offerings so

307
00:12:21,600 --> 00:12:22,800
azure

308
00:12:22,800 --> 00:12:25,200
google cloud protect cloudflare all

309
00:12:25,200 --> 00:12:27,920
those names that i've mentioned and he

310
00:12:27,920 --> 00:12:30,320
would then attacked

311
00:12:30,320 --> 00:12:32,160
these offerings

312
00:12:32,160 --> 00:12:33,360
with

313
00:12:33,360 --> 00:12:35,600
standard known attacking payloads you

314
00:12:35,600 --> 00:12:38,320
see this in the rows so vertical

315
00:12:38,320 --> 00:12:40,639
different attack types

316
00:12:40,639 --> 00:12:41,760
uh

317
00:12:41,760 --> 00:12:44,079
uh one after another and horizontal from

318
00:12:44,079 --> 00:12:47,839
left to right different cloud offerings

319
00:12:47,839 --> 00:12:50,880
and now as it happens the green ones

320
00:12:50,880 --> 00:12:52,079
are

321
00:12:52,079 --> 00:12:55,200
are based on crs we're not sure about

322
00:12:55,200 --> 00:12:57,600
alibaba though so there are two green

323
00:12:57,600 --> 00:13:00,800
items with alibaba and then the red ones

324
00:13:00,800 --> 00:13:03,360
are not based on

325
00:13:03,360 --> 00:13:06,720
um crs and you see generally that we do

326
00:13:06,720 --> 00:13:08,959
better than that interesting is

327
00:13:08,959 --> 00:13:11,680
cloudflare on the right

328
00:13:11,680 --> 00:13:15,120
cloudflare basically uses crs but as you

329
00:13:15,120 --> 00:13:18,000
can see on the remote command execution

330
00:13:18,000 --> 00:13:20,880
line cloudflare is not doing very good

331
00:13:20,880 --> 00:13:23,519
azure is doing far better if you will

332
00:13:23,519 --> 00:13:25,760
that's probably because cloudflare is

333
00:13:25,760 --> 00:13:27,040
not using

334
00:13:27,040 --> 00:13:28,959
all of our rules

335
00:13:28,959 --> 00:13:31,040
so the integrators can mic can make a

336
00:13:31,040 --> 00:13:33,040
decision what they're using and they

337
00:13:33,040 --> 00:13:34,800
making their own selection

338
00:13:34,800 --> 00:13:37,920
i like saying we're afraid of this rule

339
00:13:37,920 --> 00:13:40,000
because it causes our customer faults

340
00:13:40,000 --> 00:13:42,320
positive we're disabling that rule and

341
00:13:42,320 --> 00:13:44,320
that is a conscious decision

342
00:13:44,320 --> 00:13:46,480
and that is okay but it means that

343
00:13:46,480 --> 00:13:49,680
certain attacks will get through

344
00:13:49,680 --> 00:13:51,040
and there you go

345
00:13:51,040 --> 00:13:53,760
let's move on

346
00:13:53,760 --> 00:13:54,800
this

347
00:13:54,800 --> 00:13:57,360
impression from thomas macon is

348
00:13:57,360 --> 00:13:59,680
is confirmed by recent research from a

349
00:13:59,680 --> 00:14:02,160
couple of chinese researcher they

350
00:14:02,160 --> 00:14:03,440
presented

351
00:14:03,440 --> 00:14:05,760
at blackhead asia this spring and they

352
00:14:05,760 --> 00:14:09,600
presented their findings about sql

353
00:14:09,600 --> 00:14:12,480
queries they developed a new software in

354
00:14:12,480 --> 00:14:14,800
order to bypass web application

355
00:14:14,800 --> 00:14:16,320
firewalls

356
00:14:16,320 --> 00:14:19,199
and their esco injection protection and

357
00:14:19,199 --> 00:14:22,560
their conclusion was as reported in a

358
00:14:22,560 --> 00:14:24,480
dark reading article the arc reading is

359
00:14:24,480 --> 00:14:26,959
an online magazine you see

360
00:14:26,959 --> 00:14:28,160
the uri

361
00:14:28,160 --> 00:14:30,480
in the bottom uh so dark reading

362
00:14:30,480 --> 00:14:33,199
reported about this research

363
00:14:33,199 --> 00:14:34,959
and the researchers had presented it at

364
00:14:34,959 --> 00:14:37,199
blackhead asia and dark reading would

365
00:14:37,199 --> 00:14:39,120
say uh

366
00:14:39,120 --> 00:14:42,480
the the software was able to bypass

367
00:14:42,480 --> 00:14:45,120
the valves

368
00:14:45,600 --> 00:14:47,040
3

369
00:14:47,040 --> 00:14:49,760
of the payloads bypass mod security so

370
00:14:49,760 --> 00:14:52,720
we block 97 mod security that's us

371
00:14:52,720 --> 00:14:54,639
that's when people talk about this they

372
00:14:54,639 --> 00:14:56,880
always say mod security but they mean

373
00:14:56,880 --> 00:15:00,399
crs on the mod security base so we

374
00:15:00,399 --> 00:15:04,000
blocked 97 of their attack attempts

375
00:15:04,000 --> 00:15:06,560
wireless

376
00:15:06,959 --> 00:15:12,000
amazon aws only blocks 37 of the request

377
00:15:12,000 --> 00:15:14,079
and cloudflare in the same region

378
00:15:14,079 --> 00:15:18,000
probably a bit higher than that so crs

379
00:15:18,000 --> 00:15:19,360
is way

380
00:15:19,360 --> 00:15:23,120
better than aws

381
00:15:24,160 --> 00:15:26,320
apparently as confirmed here again and

382
00:15:26,320 --> 00:15:28,560
it's we see the same thing again and

383
00:15:28,560 --> 00:15:30,079
again we have

384
00:15:30,079 --> 00:15:33,360
less bypass it's harder to work around

385
00:15:33,360 --> 00:15:36,160
our rule set than work around the

386
00:15:36,160 --> 00:15:38,079
commercial competition

387
00:15:38,079 --> 00:15:39,600
even

388
00:15:39,600 --> 00:15:41,759
around our integrators that are doing

389
00:15:41,759 --> 00:15:43,759
pretty good but they disable certain

390
00:15:43,759 --> 00:15:46,560
rules for their business needs

391
00:15:46,560 --> 00:15:47,680
okay

392
00:15:47,680 --> 00:15:51,040
next concept we have this paranoia level

393
00:15:51,040 --> 00:15:53,680
where you adjust the aggressivity of the

394
00:15:53,680 --> 00:15:56,480
rule set and we have the anomaly scoring

395
00:15:56,480 --> 00:15:58,399
that is also a key

396
00:15:58,399 --> 00:16:00,639
feature of crs

397
00:16:00,639 --> 00:16:04,240
animal scoring means an adjustable limit

398
00:16:04,240 --> 00:16:05,920
and it separates

399
00:16:05,920 --> 00:16:07,600
the detection

400
00:16:07,600 --> 00:16:09,440
from the blocking so you get an

401
00:16:09,440 --> 00:16:13,360
adjustable limit of how much

402
00:16:13,360 --> 00:16:17,120
anomaly or badness you would accept

403
00:16:17,120 --> 00:16:19,600
and then you block and that helps you

404
00:16:19,600 --> 00:16:21,759
when integrating a service or a system

405
00:16:21,759 --> 00:16:23,199
because at first you're not you're not

406
00:16:23,199 --> 00:16:25,440
sure if you trust this love you're not

407
00:16:25,440 --> 00:16:27,279
sure if you're going to see a lot of

408
00:16:27,279 --> 00:16:29,600
faults positive so you deploy the

409
00:16:29,600 --> 00:16:31,120
detection

410
00:16:31,120 --> 00:16:33,519
and the attackers and your legitimate

411
00:16:33,519 --> 00:16:35,440
users will score

412
00:16:35,440 --> 00:16:37,920
and you tune away the false positive and

413
00:16:37,920 --> 00:16:41,839
as you move forward you reduce the limit

414
00:16:41,839 --> 00:16:44,399
and you get tighter and tighter so more

415
00:16:44,399 --> 00:16:46,639
and more of the attacks will be blocked

416
00:16:46,639 --> 00:16:49,040
and you start to trust the rule set

417
00:16:49,040 --> 00:16:51,279
because you see hey there are very few

418
00:16:51,279 --> 00:16:53,440
faults positive my customers are not

419
00:16:53,440 --> 00:16:56,079
complaining i'm not getting any

420
00:16:56,079 --> 00:16:58,079
any phone calls no angry managers

421
00:16:58,079 --> 00:17:00,720
yelling at me so we can reduce the

422
00:17:00,720 --> 00:17:03,920
animal limit further further down this

423
00:17:03,920 --> 00:17:06,559
gives you options in the deployment and

424
00:17:06,559 --> 00:17:09,599
it's a help it's a tool when doing

425
00:17:09,599 --> 00:17:12,640
integration it's by no means meant to

426
00:17:12,640 --> 00:17:14,240
say hey we're driving in production with

427
00:17:14,240 --> 00:17:17,280
an animal is called 500. no no

428
00:17:17,280 --> 00:17:19,760
during the integration phase we took

429
00:17:19,760 --> 00:17:22,720
this step by step so it's not

430
00:17:22,720 --> 00:17:25,520
detection mode blocking mode

431
00:17:25,520 --> 00:17:28,880
it is iterative tuning getting you more

432
00:17:28,880 --> 00:17:30,400
and more tight

433
00:17:30,400 --> 00:17:32,799
as you move along

434
00:17:32,799 --> 00:17:33,840
good

435
00:17:33,840 --> 00:17:35,039
um

436
00:17:35,039 --> 00:17:37,840
i have prepared a little demo now

437
00:17:37,840 --> 00:17:40,960
because we have the crs sandbox sierra

438
00:17:40,960 --> 00:17:43,840
sandbox is an online service that lets

439
00:17:43,840 --> 00:17:48,240
you try out mod security crs

440
00:17:48,240 --> 00:17:51,039
without installing it first

441
00:17:51,039 --> 00:17:51,919
say

442
00:17:51,919 --> 00:17:53,360
you have

443
00:17:53,360 --> 00:17:54,960
you're an enterprise and you have a

444
00:17:54,960 --> 00:17:57,760
penetration test or a bug bounty hunter

445
00:17:57,760 --> 00:17:59,440
and they approach you saying hey look

446
00:17:59,440 --> 00:18:01,120
you have a weakness there is a

447
00:18:01,120 --> 00:18:03,360
vulnerability in your service

448
00:18:03,360 --> 00:18:07,039
and and you wonder would crs perhaps buy

449
00:18:07,039 --> 00:18:08,320
me time

450
00:18:08,320 --> 00:18:10,720
we need to to talk to the developers

451
00:18:10,720 --> 00:18:12,960
that need to fix this it's going to take

452
00:18:12,960 --> 00:18:14,480
a lot of time

453
00:18:14,480 --> 00:18:16,799
could crs protect us

454
00:18:16,799 --> 00:18:19,200
in the meantime could just mitigate the

455
00:18:19,200 --> 00:18:21,600
problem for us and you can try this out

456
00:18:21,600 --> 00:18:24,400
now with the sandbox that we released

457
00:18:24,400 --> 00:18:26,559
last winter

458
00:18:26,559 --> 00:18:28,799
how does this look you have to link on

459
00:18:28,799 --> 00:18:29,919
top

460
00:18:29,919 --> 00:18:32,720
to the documentation of the sandbox and

461
00:18:32,720 --> 00:18:34,240
we can then

462
00:18:34,240 --> 00:18:35,600
go

463
00:18:35,600 --> 00:18:37,840
to the website this is the uri where

464
00:18:37,840 --> 00:18:39,679
this is explained

465
00:18:39,679 --> 00:18:40,559
and

466
00:18:40,559 --> 00:18:43,039
i can then take

467
00:18:43,039 --> 00:18:45,360
uh the curl call just this is an example

468
00:18:45,360 --> 00:18:47,600
call

469
00:18:47,600 --> 00:18:49,760
and i paste this here

470
00:18:49,760 --> 00:18:52,799
in my window so i'm calling

471
00:18:52,799 --> 00:18:55,039
at the website

472
00:18:55,039 --> 00:18:56,400
at the sandboxcoralset.org

473
00:18:56,400 --> 00:18:58,400
we are curls at the commonland http

474
00:18:58,400 --> 00:18:59,520
client

475
00:18:59,520 --> 00:19:01,200
and then in the query string i'm

476
00:19:01,200 --> 00:19:03,200
highlighting this now i have a little

477
00:19:03,200 --> 00:19:05,679
attack this is a local file inclusion

478
00:19:05,679 --> 00:19:07,760
attack

479
00:19:07,760 --> 00:19:10,160
that i'm simulating now that i'm trying

480
00:19:10,160 --> 00:19:12,880
out the sandbox doesn't fall for this

481
00:19:12,880 --> 00:19:14,559
attack the sandbox doesn't have this

482
00:19:14,559 --> 00:19:18,480
weakness but the sandbox runs crs and

483
00:19:18,480 --> 00:19:21,840
rev will report back to me so instead of

484
00:19:21,840 --> 00:19:24,559
blocking my request what the vav usually

485
00:19:24,559 --> 00:19:28,080
does it will report back

486
00:19:28,080 --> 00:19:29,919
yeah so there is a conceptual difference

487
00:19:29,919 --> 00:19:32,520
it's not writing a log file now it's

488
00:19:32,520 --> 00:19:36,000
reporting to the client hey look i saw

489
00:19:36,000 --> 00:19:39,120
an attack in your request if you would

490
00:19:39,120 --> 00:19:42,640
attack a service protected by crs the

491
00:19:42,640 --> 00:19:44,559
following rules would trigger in the

492
00:19:44,559 --> 00:19:47,039
back end and probably

493
00:19:47,039 --> 00:19:49,840
block your attack what this trigger we

494
00:19:49,840 --> 00:19:50,960
have

495
00:19:50,960 --> 00:19:52,559
9 30

496
00:19:52,559 --> 00:19:55,280
120 this is the rule id

497
00:19:55,280 --> 00:19:58,160
and then it says paranoia level one so

498
00:19:58,160 --> 00:20:00,480
this is a default rule and it says we

499
00:20:00,480 --> 00:20:04,159
have an os file access attempt oh yes of

500
00:20:04,159 --> 00:20:06,320
course edc pass wd

501
00:20:06,320 --> 00:20:09,039
is a operating system file

502
00:20:09,039 --> 00:20:11,919
name and on the second line we have an

503
00:20:11,919 --> 00:20:15,200
additional rule 932 160

504
00:20:15,200 --> 00:20:16,960
again a default rule

505
00:20:16,960 --> 00:20:18,080
saying

506
00:20:18,080 --> 00:20:21,200
i i saw a remote command execution

507
00:20:21,200 --> 00:20:23,200
because i found unix shell code so the

508
00:20:23,200 --> 00:20:28,720
file name etc pass wd is also a unix

509
00:20:28,720 --> 00:20:32,400
shell code so two rules uh

510
00:20:32,400 --> 00:20:36,159
triggered an alert on this

511
00:20:36,159 --> 00:20:38,880
on this attempt on this very poor uh

512
00:20:38,880 --> 00:20:41,280
exploitation attempt we can improve that

513
00:20:41,280 --> 00:20:43,039
if you want uh

514
00:20:43,039 --> 00:20:45,200
but this is where this is now a simple

515
00:20:45,200 --> 00:20:47,600
example and the next two rules are

516
00:20:47,600 --> 00:20:51,200
administrative in nature and the 93 49

517
00:20:51,200 --> 00:20:54,720
110 simply reports we have a total

518
00:20:54,720 --> 00:20:56,640
animal score of 10

519
00:20:56,640 --> 00:21:00,000
and that means the two rules each of

520
00:21:00,000 --> 00:21:03,919
them added five points in another

521
00:21:03,919 --> 00:21:07,440
and we score totally 10 now

522
00:21:07,440 --> 00:21:10,400
meaning if the animal threshold

523
00:21:10,400 --> 00:21:12,320
that you can

524
00:21:12,320 --> 00:21:14,000
configure

525
00:21:14,000 --> 00:21:15,760
moving quickly back this is the

526
00:21:15,760 --> 00:21:18,640
stormtroopers doing limbo dancing

527
00:21:18,640 --> 00:21:21,440
so if the threshold is at 10 the

528
00:21:21,440 --> 00:21:24,320
attacker has to score below 10 to pass

529
00:21:24,320 --> 00:21:27,360
underneath to succeed in limbo dancing

530
00:21:27,360 --> 00:21:30,159
and if not he will hit the android

531
00:21:30,159 --> 00:21:33,120
threshold of 10 and the request would be

532
00:21:33,120 --> 00:21:35,679
blocked by a normal server not on the

533
00:21:35,679 --> 00:21:37,600
sandbox though because the sandbox is

534
00:21:37,600 --> 00:21:41,200
here to report what it would do in

535
00:21:41,200 --> 00:21:42,320
in a real

536
00:21:42,320 --> 00:21:44,480
installation so now

537
00:21:44,480 --> 00:21:46,559
when we go

538
00:21:46,559 --> 00:21:48,159
uh

539
00:21:48,159 --> 00:21:51,440
uh htm uh

540
00:21:51,440 --> 00:21:53,679
just name it for foo

541
00:21:53,679 --> 00:21:55,840
if we go uh

542
00:21:55,840 --> 00:21:57,440
let's do

543
00:21:57,440 --> 00:22:01,360
a cross-side scripting attack

544
00:22:01,360 --> 00:22:02,400
i have to

545
00:22:02,400 --> 00:22:03,840
do this

546
00:22:03,840 --> 00:22:06,720
instead in quotes

547
00:22:06,720 --> 00:22:10,080
it will report back the score of 50 now

548
00:22:10,080 --> 00:22:11,600
with three

549
00:22:11,600 --> 00:22:13,039
different

550
00:22:13,039 --> 00:22:15,200
cross-site scripting rules string that's

551
00:22:15,200 --> 00:22:18,880
very typical for crs uh in these

552
00:22:18,880 --> 00:22:22,240
in this highly popular attack categories

553
00:22:22,240 --> 00:22:24,000
like s call injection crosshatch

554
00:22:24,000 --> 00:22:26,559
scripting remote command execution local

555
00:22:26,559 --> 00:22:29,200
file inclusion we have several rules

556
00:22:29,200 --> 00:22:31,840
overlapping so several rules are

557
00:22:31,840 --> 00:22:33,679
triggering one is probably triggering on

558
00:22:33,679 --> 00:22:36,080
script and the other one is triggering

559
00:22:36,080 --> 00:22:38,640
on alert that's how you end up with

560
00:22:38,640 --> 00:22:41,440
high scores on these rules

561
00:22:41,440 --> 00:22:43,760
immediate on these requests

562
00:22:43,760 --> 00:22:45,919
immediately

563
00:22:45,919 --> 00:22:47,840
so this is the sandbox that means after

564
00:22:47,840 --> 00:22:50,559
the session you can try out crs

565
00:22:50,559 --> 00:22:52,000
immediately

566
00:22:52,000 --> 00:22:54,720
and then on the website you find

567
00:22:54,720 --> 00:22:56,559
additional documentation how to get

568
00:22:56,559 --> 00:22:58,400
really going how to install this how to

569
00:22:58,400 --> 00:23:00,720
run it mind you i said there was a five

570
00:23:00,720 --> 00:23:03,039
minute installation that's as long as it

571
00:23:03,039 --> 00:23:06,720
takes to install this on an existing

572
00:23:06,720 --> 00:23:11,280
server namely if it's apache or nginx

573
00:23:11,280 --> 00:23:14,400
good demo time uh

574
00:23:14,400 --> 00:23:16,240
problem false positives i just touched

575
00:23:16,240 --> 00:23:20,000
on this so crs is going to

576
00:23:20,000 --> 00:23:23,280
block attacks and as it happens it might

577
00:23:23,280 --> 00:23:26,400
also block a legitimate user it depends

578
00:23:26,400 --> 00:23:27,919
on the situation

579
00:23:27,919 --> 00:23:30,080
in worst case a legitimate user has a

580
00:23:30,080 --> 00:23:31,760
very funny name

581
00:23:31,760 --> 00:23:33,840
with quotes in it and then suddenly it

582
00:23:33,840 --> 00:23:36,240
starts to look like in it like an s call

583
00:23:36,240 --> 00:23:38,640
injection that used to be the case we've

584
00:23:38,640 --> 00:23:40,880
weeded that out mostly but it's not out

585
00:23:40,880 --> 00:23:42,080
of question

586
00:23:42,080 --> 00:23:43,200
if you

587
00:23:43,200 --> 00:23:45,840
move to a higher paranoia level then

588
00:23:45,840 --> 00:23:48,640
more aggressive rules you're going to

589
00:23:48,640 --> 00:23:50,799
meet or hit more false positive your

590
00:23:50,799 --> 00:23:52,799
customer going to be blocked at higher

591
00:23:52,799 --> 00:23:55,120
paranoia level so you need to anticipate

592
00:23:55,120 --> 00:23:56,880
this you need to fight these faults

593
00:23:56,880 --> 00:23:59,279
positive and you do this via so-called

594
00:23:59,279 --> 00:24:00,960
rule exclusions on the right you have a

595
00:24:00,960 --> 00:24:04,240
cheat sheet with a four types of rule

596
00:24:04,240 --> 00:24:06,320
exclusion this is how this works you

597
00:24:06,320 --> 00:24:08,799
would say i'm going to disable the

598
00:24:08,799 --> 00:24:12,000
following rule in this uri context for

599
00:24:12,000 --> 00:24:14,960
example or i'm going to disable

600
00:24:14,960 --> 00:24:18,799
the rule for this parameter for example

601
00:24:18,799 --> 00:24:20,880
the search form uh

602
00:24:20,880 --> 00:24:23,840
cannot trigger on all this stuff for the

603
00:24:23,840 --> 00:24:26,480
search form i'm disabling a lot of rules

604
00:24:26,480 --> 00:24:27,840
because i'm getting too many faults

605
00:24:27,840 --> 00:24:29,360
positive

606
00:24:29,360 --> 00:24:31,840
how does this work exactly you can find

607
00:24:31,840 --> 00:24:36,320
tutorials at my website nania.com

608
00:24:36,320 --> 00:24:39,039
and there we also host

609
00:24:39,039 --> 00:24:41,600
a rule exclusion software there are free

610
00:24:41,600 --> 00:24:43,760
scripts that you can use to help you

611
00:24:43,760 --> 00:24:46,559
with these rule exclusions helping you

612
00:24:46,559 --> 00:24:48,240
using the cheat sheet on the right but

613
00:24:48,240 --> 00:24:50,720
there is also a commercial gui that

614
00:24:50,720 --> 00:24:52,480
guides you to write this rule exclusion

615
00:24:52,480 --> 00:24:54,080
that's a gui that makes

616
00:24:54,080 --> 00:24:56,720
working with crs easier or you're

617
00:24:56,720 --> 00:25:00,000
invited to attend one of my courses

618
00:25:00,000 --> 00:25:03,440
where i teach mod security and crs in

619
00:25:03,440 --> 00:25:06,799
practice and how to run this

620
00:25:06,799 --> 00:25:08,000
in practice

621
00:25:08,000 --> 00:25:11,200
let me sum this up

622
00:25:11,200 --> 00:25:16,080
crs or the os mod security core rule set

623
00:25:16,080 --> 00:25:18,559
is meant as a first line of defense

624
00:25:18,559 --> 00:25:20,960
against web application attacks it's by

625
00:25:20,960 --> 00:25:24,960
no means the only lines of defense or

626
00:25:24,960 --> 00:25:28,400
your only security tool that you need it

627
00:25:28,400 --> 00:25:29,840
is meant to be

628
00:25:29,840 --> 00:25:33,360
the first layer in multiple layers

629
00:25:33,360 --> 00:25:35,520
stacked behind each other you need a

630
00:25:35,520 --> 00:25:38,480
holistic a wholesome application

631
00:25:38,480 --> 00:25:40,320
security

632
00:25:40,320 --> 00:25:42,799
posture and the valve

633
00:25:42,799 --> 00:25:44,000
crs

634
00:25:44,000 --> 00:25:46,080
is an important part of this

635
00:25:46,080 --> 00:25:48,320
it's a generic set of deny rules for

636
00:25:48,320 --> 00:25:50,240
valves generic in the sense that there

637
00:25:50,240 --> 00:25:52,480
we have a lot of rules and when a new

638
00:25:52,480 --> 00:25:56,559
attack hits you're mostly covered even

639
00:25:56,559 --> 00:25:59,440
the lock for j weaknesses we saw last

640
00:25:59,440 --> 00:26:02,080
winter we were almost

641
00:26:02,080 --> 00:26:04,400
perfectly covered there were a few

642
00:26:04,400 --> 00:26:06,320
equations that we didn't cover by

643
00:26:06,320 --> 00:26:08,880
default so the generic set was pretty

644
00:26:08,880 --> 00:26:12,320
good but then we had the adopt slightly

645
00:26:12,320 --> 00:26:14,480
because we hadn't enabled certain things

646
00:26:14,480 --> 00:26:17,039
for a fear of false positive and log for

647
00:26:17,039 --> 00:26:19,360
j log for shell

648
00:26:19,360 --> 00:26:21,520
forced us to enable this

649
00:26:21,520 --> 00:26:22,559
as well

650
00:26:22,559 --> 00:26:25,440
by default we block 80

651
00:26:25,440 --> 00:26:27,919
percent or a bit more of web application

652
00:26:27,919 --> 00:26:30,640
attacks by default with these generic

653
00:26:30,640 --> 00:26:32,799
rules and you can

654
00:26:32,799 --> 00:26:35,520
raise the paranoia level to go into the

655
00:26:35,520 --> 00:26:36,799
95

656
00:26:36,799 --> 00:26:40,080
plus percent region

657
00:26:40,080 --> 00:26:42,640
and this is regularly proven again and

658
00:26:42,640 --> 00:26:45,360
again for people making the tests and

659
00:26:45,360 --> 00:26:47,919
you have seen this in the birth graphic

660
00:26:47,919 --> 00:26:50,840
in first when burp attacked a vulnerable

661
00:26:50,840 --> 00:26:54,159
application mode security and crs gives

662
00:26:54,159 --> 00:26:57,120
you granular control over the behavior

663
00:26:57,120 --> 00:27:00,080
of the web application firewall down to

664
00:27:00,080 --> 00:27:02,320
the parameter level so unlike an

665
00:27:02,320 --> 00:27:04,880
artificial intelligence system where you

666
00:27:04,880 --> 00:27:06,480
have you train

667
00:27:06,480 --> 00:27:08,400
kind of a black box

668
00:27:08,400 --> 00:27:11,120
and then you hope it works you continue

669
00:27:11,120 --> 00:27:12,080
to have

670
00:27:12,080 --> 00:27:14,720
granular control the problem with web

671
00:27:14,720 --> 00:27:17,200
application firewalls is often the

672
00:27:17,200 --> 00:27:19,360
training data that is has to be

673
00:27:19,360 --> 00:27:21,520
production training data that is

674
00:27:21,520 --> 00:27:24,159
relatively dangerous training data and

675
00:27:24,159 --> 00:27:26,799
what happens when you do a new release

676
00:27:26,799 --> 00:27:30,080
new traffic new types of requests and if

677
00:27:30,080 --> 00:27:33,200
that causes uh false positives then you

678
00:27:33,200 --> 00:27:35,600
have to retrain the whole engine and

679
00:27:35,600 --> 00:27:38,640
that makes it really tricky wireless

680
00:27:38,640 --> 00:27:41,919
with a mod security and crs you have a

681
00:27:41,919 --> 00:27:44,399
tiny little screwdriver and gives you

682
00:27:44,399 --> 00:27:46,799
granular control and you adjust the

683
00:27:46,799 --> 00:27:49,520
behavior just in the points where the

684
00:27:49,520 --> 00:27:52,320
new release is now triggering false

685
00:27:52,320 --> 00:27:55,760
positives so you get much better control

686
00:27:55,760 --> 00:27:57,520
and it also demands a bit

687
00:27:57,520 --> 00:28:00,240
more knowledge more experience on the

688
00:28:00,240 --> 00:28:01,120
side

689
00:28:01,120 --> 00:28:04,080
of the operator or the engineer

690
00:28:04,080 --> 00:28:06,320
deploying and integrating

691
00:28:06,320 --> 00:28:07,760
this tool

692
00:28:07,760 --> 00:28:10,640
and this is where i can help you

693
00:28:10,640 --> 00:28:12,399
with my teaching with a lot of

694
00:28:12,399 --> 00:28:14,640
publications i've done on the topic i've

695
00:28:14,640 --> 00:28:16,159
written the mod security handbook the

696
00:28:16,159 --> 00:28:18,159
second edition at least and i've

697
00:28:18,159 --> 00:28:20,320
published over 180

698
00:28:20,320 --> 00:28:24,399
pages about mod security and crs on my

699
00:28:24,399 --> 00:28:26,799
website netanyah.com

700
00:28:26,799 --> 00:28:27,600
or

701
00:28:27,600 --> 00:28:30,720
come to me and join of one of my on-site

702
00:28:30,720 --> 00:28:32,799
or online classes thank you for

703
00:28:32,799 --> 00:28:34,880
attention and happy to have questions

704
00:28:34,880 --> 00:28:36,720
now

705
00:28:36,720 --> 00:28:39,120
thank you christian um

706
00:28:39,120 --> 00:28:41,760
for this informative session i am sure

707
00:28:41,760 --> 00:28:44,080
our participants must have found some

708
00:28:44,080 --> 00:28:46,720
important knowledgeable input so if

709
00:28:46,720 --> 00:28:49,200
anybody else has any questions uh you

710
00:28:49,200 --> 00:28:51,360
can drop them in the chat box

711
00:28:51,360 --> 00:28:55,120
uh ali had asked that it looks great but

712
00:28:55,120 --> 00:28:57,440
it would be nicer if we can see the

713
00:28:57,440 --> 00:29:00,399
false positive rates as well context the

714
00:29:00,399 --> 00:29:03,679
work uh comparison between ows or and

715
00:29:03,679 --> 00:29:06,480
the commercial forms

716
00:29:06,480 --> 00:29:08,320
okay okay

717
00:29:08,320 --> 00:29:09,200
so

718
00:29:09,200 --> 00:29:11,600
i understand the questions uh we now see

719
00:29:11,600 --> 00:29:13,919
the uh the percentage of requests that

720
00:29:13,919 --> 00:29:15,840
are being blocked or fall false

721
00:29:15,840 --> 00:29:18,480
negatives bypassing the valve how many

722
00:29:18,480 --> 00:29:21,840
false positives do you get uh

723
00:29:21,840 --> 00:29:24,399
i don't have the numbers honestly um

724
00:29:24,399 --> 00:29:27,120
we're an open source project we're not

725
00:29:27,120 --> 00:29:28,480
regularly

726
00:29:28,480 --> 00:29:30,080
seeing

727
00:29:30,080 --> 00:29:32,720
the traffic of our users certainly not

728
00:29:32,720 --> 00:29:33,919
the traffic

729
00:29:33,919 --> 00:29:35,120
um

730
00:29:35,120 --> 00:29:36,880
certainly not the traffic

731
00:29:36,880 --> 00:29:40,559
of the online cloud offerings so they

732
00:29:40,559 --> 00:29:42,000
would have to tell you and they're not

733
00:29:42,000 --> 00:29:43,440
telling us

734
00:29:43,440 --> 00:29:44,799
i'm sure

735
00:29:44,799 --> 00:29:46,799
the fact that they have disabled certain

736
00:29:46,799 --> 00:29:49,520
rules points to false positives

737
00:29:49,520 --> 00:29:52,480
now when i work with my own customers on

738
00:29:52,480 --> 00:29:55,039
my own services and i have enterprise

739
00:29:55,039 --> 00:29:56,480
customers with several millions of

740
00:29:56,480 --> 00:29:58,960
requests today so that's a decent size

741
00:29:58,960 --> 00:29:59,840
and

742
00:29:59,840 --> 00:30:00,830
i see them

743
00:30:00,830 --> 00:30:02,000
[Music]

744
00:30:02,000 --> 00:30:04,240
honestly i see them face false positives

745
00:30:04,240 --> 00:30:05,760
it doesn't go away

746
00:30:05,760 --> 00:30:07,120
but

747
00:30:07,120 --> 00:30:10,320
i see them having less and less false

748
00:30:10,320 --> 00:30:12,080
positives ever since we took over the

749
00:30:12,080 --> 00:30:15,360
project so crs is like 15 years old and

750
00:30:15,360 --> 00:30:18,320
i came in as one of the leaders in 2015

751
00:30:18,320 --> 00:30:21,200
or 16 and the false positive problem was

752
00:30:21,200 --> 00:30:22,880
really really big

753
00:30:22,880 --> 00:30:25,440
and we fought false positive heart and

754
00:30:25,440 --> 00:30:27,279
we continued to do so

755
00:30:27,279 --> 00:30:29,440
and by now we're in a situation where a

756
00:30:29,440 --> 00:30:31,200
new deployment

757
00:30:31,200 --> 00:30:34,240
so an existing service is getting crs

758
00:30:34,240 --> 00:30:36,480
and a default installation usually

759
00:30:36,480 --> 00:30:38,720
really continues to work also with a

760
00:30:38,720 --> 00:30:39,600
hard

761
00:30:39,600 --> 00:30:42,320
animal threshold like blocking

762
00:30:42,320 --> 00:30:46,399
really fast as soon as it sees anything

763
00:30:46,399 --> 00:30:48,159
when you go to higher paranoia level

764
00:30:48,159 --> 00:30:50,559
that can go up to a situation where

765
00:30:50,559 --> 00:30:52,640
every request is blocked by default and

766
00:30:52,640 --> 00:30:54,000
then you really have to tune away

767
00:30:54,000 --> 00:30:56,080
defaults positive but

768
00:30:56,080 --> 00:30:58,000
a default installation paranoia level

769
00:30:58,000 --> 00:31:00,960
one is usually doing okay

770
00:31:00,960 --> 00:31:02,880
and then you might have a few rough

771
00:31:02,880 --> 00:31:06,960
edges but i cannot give you hard numbers

772
00:31:06,960 --> 00:31:10,320
okay uh next question we have from sahil

773
00:31:10,320 --> 00:31:13,360
can we set custom response if clients

774
00:31:13,360 --> 00:31:16,080
send any malicious failure

775
00:31:16,080 --> 00:31:18,480
absolutely you have complete freedom the

776
00:31:18,480 --> 00:31:20,159
freedom that your web server gives you

777
00:31:20,159 --> 00:31:22,080
can do anything give you one or two

778
00:31:22,080 --> 00:31:24,960
examples so i can let it pass i can

779
00:31:24,960 --> 00:31:29,039
block block with a 403 i can redirect

780
00:31:29,039 --> 00:31:32,000
to a page i can react to different pages

781
00:31:32,000 --> 00:31:35,440
a complete freedom i can also proxy

782
00:31:35,440 --> 00:31:36,240
to

783
00:31:36,240 --> 00:31:39,440
a special sandbox so i can take

784
00:31:39,440 --> 00:31:41,519
the attacker on a special

785
00:31:41,519 --> 00:31:43,919
site and he or she is not even aware

786
00:31:43,919 --> 00:31:46,159
that they're talking to the honeypot now

787
00:31:46,159 --> 00:31:48,640
that is possible or it can simply drop

788
00:31:48,640 --> 00:31:50,880
the connection and no response send out

789
00:31:50,880 --> 00:31:53,120
you have complete freedom there

790
00:31:53,120 --> 00:31:57,200
okay um how often are the rules updated

791
00:31:57,200 --> 00:32:00,159
is there some auto update other rule

792
00:32:00,159 --> 00:32:02,159
based on cve

793
00:32:02,159 --> 00:32:03,519
yes

794
00:32:03,519 --> 00:32:07,679
we actually do very few updates we were

795
00:32:07,679 --> 00:32:10,320
planning to do a release

796
00:32:10,320 --> 00:32:13,519
this june a major release actually crs

797
00:32:13,519 --> 00:32:16,240
for but we have to postpone because we

798
00:32:16,240 --> 00:32:19,600
got certain security uh information from

799
00:32:19,600 --> 00:32:22,320
the security researchers that found

800
00:32:22,320 --> 00:32:24,000
weaknesses in the rules that would that

801
00:32:24,000 --> 00:32:27,600
we need to fix first so crs4 comes after

802
00:32:27,600 --> 00:32:29,120
the summer holidays

803
00:32:29,120 --> 00:32:32,320
uh perhaps and we release

804
00:32:32,320 --> 00:32:35,039
rarely like let's say one once a year a

805
00:32:35,039 --> 00:32:36,880
major release because of the false

806
00:32:36,880 --> 00:32:38,640
positive problem when you have a

807
00:32:38,640 --> 00:32:41,279
commercial or an enterprise level site

808
00:32:41,279 --> 00:32:43,600
then you need to do a lot of testing

809
00:32:43,600 --> 00:32:46,399
deploying a new rule set means a lot of

810
00:32:46,399 --> 00:32:48,720
testing to be really sure because the

811
00:32:48,720 --> 00:32:51,120
major new release is going to bring new

812
00:32:51,120 --> 00:32:53,919
rules meaning a potential new false

813
00:32:53,919 --> 00:32:56,320
positives and if we would bring a new

814
00:32:56,320 --> 00:32:58,880
release every two months with new rules

815
00:32:58,880 --> 00:33:00,960
hey guys we have another three rules

816
00:33:00,960 --> 00:33:02,159
they would do

817
00:33:02,159 --> 00:33:04,720
the same test campaign again and that is

818
00:33:04,720 --> 00:33:07,440
really tiring and cumbersome for them so

819
00:33:07,440 --> 00:33:09,600
what we do instead

820
00:33:09,600 --> 00:33:13,840
is we bring new rules only in the new

821
00:33:13,840 --> 00:33:17,600
major releases once a year if you want

822
00:33:17,600 --> 00:33:19,919
the bleeding edge then you can use one

823
00:33:19,919 --> 00:33:22,880
of the nightly builds or you deploy our

824
00:33:22,880 --> 00:33:26,240
master or our main uh

825
00:33:26,240 --> 00:33:29,360
release line our main development branch

826
00:33:29,360 --> 00:33:30,799
from github so for an open source

827
00:33:30,799 --> 00:33:32,399
project go to github you get the latest

828
00:33:32,399 --> 00:33:34,080
rules um

829
00:33:34,080 --> 00:33:36,240
but that might be a bit untested there

830
00:33:36,240 --> 00:33:38,240
might be more additional false positive

831
00:33:38,240 --> 00:33:40,720
not as well tuned away

832
00:33:40,720 --> 00:33:44,720
but we generally don't do regular often

833
00:33:44,720 --> 00:33:46,960
updates so there is also no auto update

834
00:33:46,960 --> 00:33:49,679
function until you deploy it yourself

835
00:33:49,679 --> 00:33:52,000
and it's not really cve based in the

836
00:33:52,000 --> 00:33:54,080
sense that we're generic we're not

837
00:33:54,080 --> 00:33:58,240
running after individual cves uh

838
00:33:58,240 --> 00:33:59,279
log for

839
00:33:59,279 --> 00:34:02,399
shell forced us to do additional rules

840
00:34:02,399 --> 00:34:04,320
so there was a particular weakness that

841
00:34:04,320 --> 00:34:06,000
forced it to additional rules but

842
00:34:06,000 --> 00:34:08,960
usually we're covered like 80-90 of cvs

843
00:34:08,960 --> 00:34:11,918
hey we have this by default

844
00:34:11,918 --> 00:34:15,119
because we are generic we have generic

845
00:34:15,119 --> 00:34:18,159
rules that block all the s-call

846
00:34:18,159 --> 00:34:22,800
injections not only the latest cve

847
00:34:23,040 --> 00:34:24,480
oh good

848
00:34:24,480 --> 00:34:26,320
um

849
00:34:26,320 --> 00:34:28,639
uh if you have already answered this you

850
00:34:28,639 --> 00:34:31,520
can pass it uh how to manage this on an

851
00:34:31,520 --> 00:34:33,040
enterprise level

852
00:34:33,040 --> 00:34:36,079
um so enterprise users often use a

853
00:34:36,079 --> 00:34:39,199
commercial integration so there are over

854
00:34:39,199 --> 00:34:41,359
maybe a hundred commercial buffer

855
00:34:41,359 --> 00:34:43,520
offerings they pick one of those

856
00:34:43,520 --> 00:34:46,399
or they deploy crs

857
00:34:46,399 --> 00:34:49,760
on nginx apache themselves with their

858
00:34:49,760 --> 00:34:51,679
skilled engineers

859
00:34:51,679 --> 00:34:54,000
and then you need to manage

860
00:34:54,000 --> 00:34:55,599
your deployment process that is

861
00:34:55,599 --> 00:34:58,480
important you need to manage the rule

862
00:34:58,480 --> 00:35:00,960
exclusions on an enterprise level so you

863
00:35:00,960 --> 00:35:03,200
have probably dozens or even hundreds of

864
00:35:03,200 --> 00:35:06,160
online services you need to keep

865
00:35:06,160 --> 00:35:08,640
the rule exclusions in check globally

866
00:35:08,640 --> 00:35:10,480
but also for individual

867
00:35:10,480 --> 00:35:13,920
services and you need to do uh log file

868
00:35:13,920 --> 00:35:16,800
monitoring so you need enterprise great

869
00:35:16,800 --> 00:35:19,520
log viewers and the tools and this is

870
00:35:19,520 --> 00:35:21,920
where this crack software

871
00:35:21,920 --> 00:35:24,640
comes in where near my company provides

872
00:35:24,640 --> 00:35:25,520
you

873
00:35:25,520 --> 00:35:29,040
with a helping gui that allows you to

874
00:35:29,040 --> 00:35:31,280
manage these false positives

875
00:35:31,280 --> 00:35:34,640
on a scale uh generally i would say

876
00:35:34,640 --> 00:35:37,040
enterprise level works really nice but

877
00:35:37,040 --> 00:35:39,520
it takes skills and it takes

878
00:35:39,520 --> 00:35:42,320
knowledge for your employees for

879
00:35:42,320 --> 00:35:44,400
system integrators for system engineers

880
00:35:44,400 --> 00:35:46,320
security engineers

881
00:35:46,320 --> 00:35:48,960
in my experience my two or three day

882
00:35:48,960 --> 00:35:52,240
courses are usually enough to get people

883
00:35:52,240 --> 00:35:55,119
rolling so if if you have a senior

884
00:35:55,119 --> 00:35:57,200
security engineer or application

885
00:35:57,200 --> 00:35:59,280
engineer after two or three days of

886
00:35:59,280 --> 00:36:01,040
course they're able to deploy this

887
00:36:01,040 --> 00:36:02,960
themselves and then they often they come

888
00:36:02,960 --> 00:36:04,880
back with one or two questions to me

889
00:36:04,880 --> 00:36:06,560
because the rest is in the published

890
00:36:06,560 --> 00:36:09,520
material and in what they learn in my

891
00:36:09,520 --> 00:36:12,079
courses it's not as hard it looks a bit

892
00:36:12,079 --> 00:36:13,440
intimidating

893
00:36:13,440 --> 00:36:14,800
but it's actually you get the hang

894
00:36:14,800 --> 00:36:16,800
pretty quickly

895
00:36:16,800 --> 00:36:18,000
okay uh

896
00:36:18,000 --> 00:36:20,880
another uh comment is been reading a few

897
00:36:20,880 --> 00:36:22,880
things about

898
00:36:22,880 --> 00:36:24,880
korraza do you think that would be the

899
00:36:24,880 --> 00:36:27,520
future engine for the cns

900
00:36:27,520 --> 00:36:29,760
hey chibusa good to see you again

901
00:36:29,760 --> 00:36:33,119
uh good to have you yes karasa

902
00:36:33,119 --> 00:36:35,839
could be the future uh mod security mod

903
00:36:35,839 --> 00:36:38,480
security i haven't mentioned this but

904
00:36:38,480 --> 00:36:41,200
the developers of magic security say

905
00:36:41,200 --> 00:36:42,800
they want to hand this over the

906
00:36:42,800 --> 00:36:45,920
development in 2024 it is a commercial

907
00:36:45,920 --> 00:36:47,920
company behind it and they declared end

908
00:36:47,920 --> 00:36:50,160
of life for 2024.

909
00:36:50,160 --> 00:36:51,839
as far as they are concerned somebody

910
00:36:51,839 --> 00:36:54,000
else has to take this over we've asked

911
00:36:54,000 --> 00:36:55,599
them already and they said they haven't

912
00:36:55,599 --> 00:36:59,040
made up their mind come back in 2024

913
00:36:59,040 --> 00:37:01,520
and there is a new kid on the block so

914
00:37:01,520 --> 00:37:05,200
to say and this is carasa an alternative

915
00:37:05,200 --> 00:37:08,640
implementation that runs crs and i'm

916
00:37:08,640 --> 00:37:11,599
right now confident that carrasa can

917
00:37:11,599 --> 00:37:13,920
become a drop-in replacement for mod

918
00:37:13,920 --> 00:37:16,560
security it is not right now it can be

919
00:37:16,560 --> 00:37:19,839
used in production on caddy and traffic

920
00:37:19,839 --> 00:37:22,320
cloud web servers uh the karazha

921
00:37:22,320 --> 00:37:24,560
developers are now working on an nginx

922
00:37:24,560 --> 00:37:27,040
part and eventually they also promise an

923
00:37:27,040 --> 00:37:29,440
apache port and if that all works out in

924
00:37:29,440 --> 00:37:31,359
the end you're getting a drop-in

925
00:37:31,359 --> 00:37:33,920
replacement remote security it's maybe

926
00:37:33,920 --> 00:37:36,079
one or two years away but certainly by

927
00:37:36,079 --> 00:37:38,480
2024

928
00:37:38,480 --> 00:37:40,640
next question we have can we set new

929
00:37:40,640 --> 00:37:42,880
rules based on vulnerabilities reported

930
00:37:42,880 --> 00:37:43,920
by

931
00:37:43,920 --> 00:37:47,760
dust if i'm pronouncing it correctly yes

932
00:37:47,760 --> 00:37:50,000
dust is a new a newer technique so these

933
00:37:50,000 --> 00:37:53,200
are new security uh ideas coming in and

934
00:37:53,200 --> 00:37:55,359
yes you can write your own rules

935
00:37:55,359 --> 00:37:58,880
definitely in mod security and crs the

936
00:37:58,880 --> 00:38:01,440
next major release brings a plug-in

937
00:38:01,440 --> 00:38:03,680
functionality that means when you would

938
00:38:03,680 --> 00:38:04,400
write

939
00:38:04,400 --> 00:38:07,680
or generate new rules you could

940
00:38:07,680 --> 00:38:11,040
integrate them easily into crs so you

941
00:38:11,040 --> 00:38:12,000
work

942
00:38:12,000 --> 00:38:14,400
next to crs as an additional mod

943
00:38:14,400 --> 00:38:16,880
security rule set or you integrate right

944
00:38:16,880 --> 00:38:20,079
into crs and use the existing crs

945
00:38:20,079 --> 00:38:22,000
functionality like the scoring for

946
00:38:22,000 --> 00:38:23,200
example

947
00:38:23,200 --> 00:38:25,200
that works really nicely apparently it

948
00:38:25,200 --> 00:38:27,520
takes a certain kind of knowledge to do

949
00:38:27,520 --> 00:38:29,839
so but yeah it's

950
00:38:29,839 --> 00:38:33,599
technically it's not uh very difficult

951
00:38:33,599 --> 00:38:36,480
all right uh next we have been through

952
00:38:36,480 --> 00:38:38,000
naveen could you

953
00:38:38,000 --> 00:38:40,160
please walk could you please walk

954
00:38:40,160 --> 00:38:41,599
through any rule the payload

955
00:38:41,599 --> 00:38:43,520
specifically i'm afraid we don't have

956
00:38:43,520 --> 00:38:45,680
the time but yeah i will just read it

957
00:38:45,680 --> 00:38:48,320
out as a pen tester i come under such

958
00:38:48,320 --> 00:38:51,280
scenarios where crs is set but curious

959
00:38:51,280 --> 00:38:54,000
to explore further on the rule in order

960
00:38:54,000 --> 00:38:57,680
to ensure all data is validated

961
00:38:57,680 --> 00:39:01,200
or uh if it will allow me to bypass

962
00:39:01,200 --> 00:39:03,440
yes okay we don't have the time to do

963
00:39:03,440 --> 00:39:06,480
this walkthrough here apparently but

964
00:39:06,480 --> 00:39:07,760
technically

965
00:39:07,760 --> 00:39:11,440
crs brings 200 rules that inspect the

966
00:39:11,440 --> 00:39:12,800
request

967
00:39:12,800 --> 00:39:15,359
this is not an allow list

968
00:39:15,359 --> 00:39:16,560
we're not

969
00:39:16,560 --> 00:39:18,480
checking whether

970
00:39:18,480 --> 00:39:21,119
the header the no the connection header

971
00:39:21,119 --> 00:39:23,839
is conforming to the rfc that would be

972
00:39:23,839 --> 00:39:25,920
an allow list no we do it the other way

973
00:39:25,920 --> 00:39:30,960
around we say the parameter query

974
00:39:30,960 --> 00:39:33,280
smells like an sql injection so i'm

975
00:39:33,280 --> 00:39:35,040
going to deny it

976
00:39:35,040 --> 00:39:38,000
this is how we do it so not all the data

977
00:39:38,000 --> 00:39:41,440
is validated all the data is inspected

978
00:39:41,440 --> 00:39:44,160
and the headers are all inspected and if

979
00:39:44,160 --> 00:39:46,000
they look suspicious then they're

980
00:39:46,000 --> 00:39:47,359
flagged

981
00:39:47,359 --> 00:39:49,920
but is there i couldn't guarantee a

982
00:39:49,920 --> 00:39:52,000
validation against an existing standard

983
00:39:52,000 --> 00:39:54,079
that's not what we're doing why can't we

984
00:39:54,079 --> 00:39:56,480
do this this is too much work because it

985
00:39:56,480 --> 00:39:58,960
depends on the application i'm happy to

986
00:39:58,960 --> 00:40:01,599
do this i do this for certain customers

987
00:40:01,599 --> 00:40:03,839
i really welcome if customers want to do

988
00:40:03,839 --> 00:40:05,280
this but it's usually a lot of work

989
00:40:05,280 --> 00:40:07,359
because you have to tailor the rule set

990
00:40:07,359 --> 00:40:09,520
for the application and people shy away

991
00:40:09,520 --> 00:40:11,599
from that

992
00:40:11,599 --> 00:40:14,560
okay last two questions uh there is a

993
00:40:14,560 --> 00:40:18,240
way to configure it as an antibody in

994
00:40:18,240 --> 00:40:20,160
other words in order to do some

995
00:40:20,160 --> 00:40:22,880
anti-automation protection

996
00:40:22,880 --> 00:40:25,280
okay that's a very good question and the

997
00:40:25,280 --> 00:40:27,920
simple answer is don't

998
00:40:27,920 --> 00:40:29,520
mod security

999
00:40:29,520 --> 00:40:32,319
is relatively poor in this regard

1000
00:40:32,319 --> 00:40:35,920
and crs even poorer

1001
00:40:35,920 --> 00:40:39,280
and very as we move along crs is more

1002
00:40:39,280 --> 00:40:41,680
and more session agnostic we look at an

1003
00:40:41,680 --> 00:40:43,839
individual request

1004
00:40:43,839 --> 00:40:45,920
and anti-automation is apparently a

1005
00:40:45,920 --> 00:40:48,079
multi-request so this is session based

1006
00:40:48,079 --> 00:40:50,000
and mod security has this functionality

1007
00:40:50,000 --> 00:40:52,480
but it's not very good it's very limited

1008
00:40:52,480 --> 00:40:54,800
so there are better tools to do this

1009
00:40:54,800 --> 00:40:57,200
they're better commercial tools

1010
00:40:57,200 --> 00:40:58,880
apparently

1011
00:40:58,880 --> 00:41:01,440
a content delivery network is in a far

1012
00:41:01,440 --> 00:41:03,599
better position to do this they have

1013
00:41:03,599 --> 00:41:05,359
better functionality they have better

1014
00:41:05,359 --> 00:41:07,359
tooling they're better inside better

1015
00:41:07,359 --> 00:41:09,680
sensors better monitoring

1016
00:41:09,680 --> 00:41:13,680
so what crs or mod security can do is

1017
00:41:13,680 --> 00:41:16,160
very very poor there is going to be a

1018
00:41:16,160 --> 00:41:18,640
plug-in that will take ip reputation in

1019
00:41:18,640 --> 00:41:20,160
consideration

1020
00:41:20,160 --> 00:41:23,119
formal releases have ap reputation rules

1021
00:41:23,119 --> 00:41:25,520
that work via mod security sessions but

1022
00:41:25,520 --> 00:41:28,560
honestly is not very good

1023
00:41:28,560 --> 00:41:30,119
my go-to

1024
00:41:30,119 --> 00:41:32,400
anti-automation tool

1025
00:41:32,400 --> 00:41:34,640
on mod security

1026
00:41:34,640 --> 00:41:38,160
apache i'm a heavy apache user is mod

1027
00:41:38,160 --> 00:41:40,800
qos so only mentioning that

1028
00:41:40,800 --> 00:41:44,079
qos mod qs on apache is a very strong

1029
00:41:44,079 --> 00:41:46,480
very simple anti-automation tool that

1030
00:41:46,480 --> 00:41:48,480
works out of the box so you don't have

1031
00:41:48,480 --> 00:41:51,920
to go to a content delivery network but

1032
00:41:51,920 --> 00:41:53,599
it's really the content delivery network

1033
00:41:53,599 --> 00:41:55,520
that brings you also anti-automation i

1034
00:41:55,520 --> 00:41:57,040
think

1035
00:41:57,040 --> 00:41:59,359
all right uh last question rules in

1036
00:41:59,359 --> 00:42:02,800
comparison to plugins can you elaborate

1037
00:42:02,800 --> 00:42:04,400
ok

1038
00:42:04,400 --> 00:42:06,160
plugins are basically

1039
00:42:06,160 --> 00:42:07,760
collections of rules

1040
00:42:07,760 --> 00:42:09,280
it is

1041
00:42:09,280 --> 00:42:11,520
collected a little groups of rules that

1042
00:42:11,520 --> 00:42:14,560
we don't want to have in the main line

1043
00:42:14,560 --> 00:42:17,599
anymore so we move them out or future

1044
00:42:17,599 --> 00:42:20,240
functionality that we want to test as a

1045
00:42:20,240 --> 00:42:23,200
plug-in or third-party functionality

1046
00:42:23,200 --> 00:42:25,040
that somebody wants to integrate with

1047
00:42:25,040 --> 00:42:28,800
crs but we're not likely to accept them

1048
00:42:28,800 --> 00:42:30,400
into the mainland why because maybe

1049
00:42:30,400 --> 00:42:33,119
they're exotic maybe they do very crazy

1050
00:42:33,119 --> 00:42:35,520
stuff that we don't want to have maybe

1051
00:42:35,520 --> 00:42:38,079
they're using mod security functionality

1052
00:42:38,079 --> 00:42:41,119
that is too risky to have in our rule

1053
00:42:41,119 --> 00:42:43,280
set

1054
00:42:43,280 --> 00:42:46,000
for example plugins can call

1055
00:42:46,000 --> 00:42:48,079
lua code so lua is programming language

1056
00:42:48,079 --> 00:42:52,160
that runs on the server and it's nicely

1057
00:42:52,160 --> 00:42:54,880
integrated in modern web servers and but

1058
00:42:54,880 --> 00:42:58,240
we don't want to do lua in crs we want

1059
00:42:58,240 --> 00:43:00,480
to be lean we want to be thin we want to

1060
00:43:00,480 --> 00:43:04,400
be competitive fast performing and lua

1061
00:43:04,400 --> 00:43:06,480
running code on the server

1062
00:43:06,480 --> 00:43:08,800
takes away performance so we say if you

1063
00:43:08,800 --> 00:43:10,640
want to do this make it a plugin and

1064
00:43:10,640 --> 00:43:12,800
then people who want to have this

1065
00:43:12,800 --> 00:43:15,920
functionality simply enable this plugin

1066
00:43:15,920 --> 00:43:18,240
and plugins are built in a way you just

1067
00:43:18,240 --> 00:43:20,160
save the file in a folder

1068
00:43:20,160 --> 00:43:24,240
and it's enabled it's super simple so

1069
00:43:24,240 --> 00:43:27,680
plugins are rules with special

1070
00:43:27,680 --> 00:43:30,640
functionality and more liberty and what

1071
00:43:30,640 --> 00:43:32,560
they do and that's how they become

1072
00:43:32,560 --> 00:43:34,480
plugins there is actually a plugin

1073
00:43:34,480 --> 00:43:36,720
registry already on our github it's

1074
00:43:36,720 --> 00:43:38,960
linked it's a plugin registry and we

1075
00:43:38,960 --> 00:43:41,599
already have 15 plugins to begin with

1076
00:43:41,599 --> 00:43:44,000
you can use them with the older releases

1077
00:43:44,000 --> 00:43:47,280
already a bit more hand work involved

1078
00:43:47,280 --> 00:43:49,440
or they're going to be mainline with

1079
00:43:49,440 --> 00:43:53,520
next major release coming out this year

1080
00:43:53,520 --> 00:43:55,839
all right perfect uh thank you christian

1081
00:43:55,839 --> 00:43:58,000
once again and that concludes our

1082
00:43:58,000 --> 00:44:00,000
session and thank you all for your

1083
00:44:00,000 --> 00:44:02,560
participation in today's webinar session

1084
00:44:02,560 --> 00:44:04,640
thank you thank everybody thanks for

1085
00:44:04,640 --> 00:44:08,480
having me bye bye

