1
00:00:00,060 --> 00:00:12,070
[Music]

2
00:00:12,960 --> 00:00:16,079
my name is sakshi and i am a part of the

3
00:00:16,079 --> 00:00:18,560
long con team and thank you for joining

4
00:00:18,560 --> 00:00:21,760
us today uh for those of you who are new

5
00:00:21,760 --> 00:00:24,160
uh nulcon security conference is a

6
00:00:24,160 --> 00:00:26,800
unique platform for security enthusiasts

7
00:00:26,800 --> 00:00:28,640
and professionals to showcase their

8
00:00:28,640 --> 00:00:31,599
research and technology to the community

9
00:00:31,599 --> 00:00:35,280
uh we have our upcoming uh event

10
00:00:35,280 --> 00:00:38,320
2022 happening on the 9th and the 10th

11
00:00:38,320 --> 00:00:41,200
of september the focus of the conference

12
00:00:41,200 --> 00:00:43,440
is to showcase the next generation of

13
00:00:43,440 --> 00:00:45,520
offensive and defensive security

14
00:00:45,520 --> 00:00:46,719
technology

15
00:00:46,719 --> 00:00:49,200
and in addition to that we

16
00:00:49,200 --> 00:00:52,160
also have announced uh 15 hands-on

17
00:00:52,160 --> 00:00:54,399
training sessions so you can check them

18
00:00:54,399 --> 00:00:55,360
out

19
00:00:55,360 --> 00:00:57,280
on our website and get in case you are

20
00:00:57,280 --> 00:01:00,559
interested so coming to our today's uh

21
00:01:00,559 --> 00:01:04,479
speaker we have with us chazier pizzi uh

22
00:01:04,479 --> 00:01:07,439
chizia pizzi who is a security

23
00:01:07,439 --> 00:01:09,760
researcher analyst and technology

24
00:01:09,760 --> 00:01:11,040
enthusiast

25
00:01:11,040 --> 00:01:13,920
uh he develops software and hardware and

26
00:01:13,920 --> 00:01:15,759
tries to contribute to the infosec

27
00:01:15,759 --> 00:01:17,040
community

28
00:01:17,040 --> 00:01:19,439
mainly focused on low level programming

29
00:01:19,439 --> 00:01:21,520
he develops and contributes to open

30
00:01:21,520 --> 00:01:24,799
source software such as volatility open

31
00:01:24,799 --> 00:01:27,920
canary uh cetus and many more

32
00:01:27,920 --> 00:01:30,880
uh chizia sometimes also develops and

33
00:01:30,880 --> 00:01:33,600
contributes to hardware related uh to

34
00:01:33,600 --> 00:01:36,560
interface uh some real world devices and

35
00:01:36,560 --> 00:01:38,240
sometimes not

36
00:01:38,240 --> 00:01:40,960
uh doing a lot of reverse engineering he

37
00:01:40,960 --> 00:01:43,280
has given some amazing presentations in

38
00:01:43,280 --> 00:01:45,439
different conferences such as stepcon

39
00:01:45,439 --> 00:01:49,280
blackhat insomnihack so on behalf of all

40
00:01:49,280 --> 00:01:51,520
of us i would like to welcome our

41
00:01:51,520 --> 00:01:53,920
today's speaker and without any further

42
00:01:53,920 --> 00:01:56,880
delay uh we can start with the session

43
00:01:56,880 --> 00:01:58,560
thank you

44
00:01:58,560 --> 00:02:00,320
thank you sakshi thank you for the nice

45
00:02:00,320 --> 00:02:02,000
presentation and thank you for having me

46
00:02:02,000 --> 00:02:04,159
today and thank you also to everyone who

47
00:02:04,159 --> 00:02:06,079
joined us and

48
00:02:06,079 --> 00:02:08,080
let's go immediately into the

49
00:02:08,080 --> 00:02:10,399
presentation so that

50
00:02:10,399 --> 00:02:12,480
we will not

51
00:02:12,480 --> 00:02:15,840
okay let me share okay i think you

52
00:02:15,840 --> 00:02:17,040
should see

53
00:02:17,040 --> 00:02:18,319
my

54
00:02:18,319 --> 00:02:19,840
slide deck here

55
00:02:19,840 --> 00:02:21,200
yes okay

56
00:02:21,200 --> 00:02:24,000
great okay so let's start immediately uh

57
00:02:24,000 --> 00:02:25,680
with uh okay this is the title of the

58
00:02:25,680 --> 00:02:27,599
presentation obviously but you i think

59
00:02:27,599 --> 00:02:29,599
you already know it and okay couple of

60
00:02:29,599 --> 00:02:32,720
words about me uh i'm a reverse engineer

61
00:02:32,720 --> 00:02:35,599
and security researcher and sorry lab

62
00:02:35,599 --> 00:02:38,959
is a italian company and i as as such

63
00:02:38,959 --> 00:02:40,400
already said i'm doing a lot of open

64
00:02:40,400 --> 00:02:41,440
source

65
00:02:41,440 --> 00:02:43,680
source security related things so if you

66
00:02:43,680 --> 00:02:45,519
want to have a look to magic table

67
00:02:45,519 --> 00:02:48,319
this is the address i'll leave also all

68
00:02:48,319 --> 00:02:49,840
the coordinates at the end of the

69
00:02:49,840 --> 00:02:52,080
presentation so

70
00:02:52,080 --> 00:02:53,680
you can have a look and

71
00:02:53,680 --> 00:02:55,920
maybe get in touch with me whatever if

72
00:02:55,920 --> 00:02:58,400
you think that you you may want to

73
00:02:58,400 --> 00:03:00,720
discuss with me about something

74
00:03:00,720 --> 00:03:03,120
okay so let's jump immediately into the

75
00:03:03,120 --> 00:03:05,040
presentation and

76
00:03:05,040 --> 00:03:06,879
with a quick intro what we are speaking

77
00:03:06,879 --> 00:03:09,040
about today

78
00:03:09,040 --> 00:03:11,599
as i said we are going to speaking about

79
00:03:11,599 --> 00:03:12,720
emulating

80
00:03:12,720 --> 00:03:15,040
binary emulation emulation software and

81
00:03:15,040 --> 00:03:17,120
the first thing i want to

82
00:03:17,120 --> 00:03:18,879
tell you is that

83
00:03:18,879 --> 00:03:20,879
how emulation is different from the

84
00:03:20,879 --> 00:03:22,239
usual sandboxing there are a lot of

85
00:03:22,239 --> 00:03:25,280
differences to be honest and uh

86
00:03:25,280 --> 00:03:26,319
i just

87
00:03:26,319 --> 00:03:27,920
want to make one big difference here

88
00:03:27,920 --> 00:03:29,920
just to make things a bit clearer which

89
00:03:29,920 --> 00:03:32,080
is okay with sandboxing and when i speak

90
00:03:32,080 --> 00:03:33,760
about sandboxing i mean

91
00:03:33,760 --> 00:03:36,799
uh you know cuckoo open iran your

92
00:03:36,799 --> 00:03:39,680
sandbox so that that kind of software

93
00:03:39,680 --> 00:03:41,760
you are actually

94
00:03:41,760 --> 00:03:43,840
you have a complete operating system

95
00:03:43,840 --> 00:03:45,040
running

96
00:03:45,040 --> 00:03:46,799
your malware and where you are

97
00:03:46,799 --> 00:03:48,560
detonating your marker with emulation we

98
00:03:48,560 --> 00:03:50,319
have a different situation because we

99
00:03:50,319 --> 00:03:52,720
don't have actually a complete

100
00:03:52,720 --> 00:03:55,200
operating system behind but we are

101
00:03:55,200 --> 00:03:57,519
creating a fake one let's say

102
00:03:57,519 --> 00:03:59,760
instrumenting our binary are executable

103
00:03:59,760 --> 00:04:02,000
in thinking that he has um

104
00:04:02,000 --> 00:04:04,159
an operating system behind and which is

105
00:04:04,159 --> 00:04:06,239
the grid the great advantage here is

106
00:04:06,239 --> 00:04:09,040
that you can instrument uh this this

107
00:04:09,040 --> 00:04:11,439
emulation and have more interaction with

108
00:04:11,439 --> 00:04:13,519
that software itself and this is where

109
00:04:13,519 --> 00:04:14,480
emulation

110
00:04:14,480 --> 00:04:16,798
let's say rocks instead of using this

111
00:04:16,798 --> 00:04:19,040
unboxing and i will show you how in the

112
00:04:19,040 --> 00:04:20,320
presentation

113
00:04:20,320 --> 00:04:22,000
a couple of words about touring so the

114
00:04:22,000 --> 00:04:24,160
tools we will use today

115
00:04:24,160 --> 00:04:25,919
and these are the two tools that we'll

116
00:04:25,919 --> 00:04:28,320
use one is a well-known reversing tool

117
00:04:28,320 --> 00:04:31,040
which is gydra i'm sure you know it and

118
00:04:31,040 --> 00:04:32,720
another one is a two-layer road which is

119
00:04:32,720 --> 00:04:35,199
resploit it's an emulation engine based

120
00:04:35,199 --> 00:04:38,720
on unicorn and speakeasy what i want to

121
00:04:38,720 --> 00:04:40,880
say is that that i'm using respect today

122
00:04:40,880 --> 00:04:42,400
because i know it very well since i did

123
00:04:42,400 --> 00:04:45,759
it but what we say today is not linked

124
00:04:45,759 --> 00:04:47,919
to the tools so you may want to use the

125
00:04:47,919 --> 00:04:49,360
same concept

126
00:04:49,360 --> 00:04:50,960
with other tools there are other tools

127
00:04:50,960 --> 00:04:52,720
other than respect

128
00:04:52,720 --> 00:04:54,400
out there so you may want just to

129
00:04:54,400 --> 00:04:56,720
reapply what we speak what we are

130
00:04:56,720 --> 00:04:58,800
speaking about with your preferred tool

131
00:04:58,800 --> 00:05:00,400
i'm just using this because it's more

132
00:05:00,400 --> 00:05:02,400
convenient for me

133
00:05:02,400 --> 00:05:04,000
if you want to have a look to the

134
00:05:04,000 --> 00:05:06,720
complete tool then there is also a quick

135
00:05:06,720 --> 00:05:08,639
video on youtube not too very quick it's

136
00:05:08,639 --> 00:05:09,759
a one hour more or less where i'm

137
00:05:09,759 --> 00:05:11,280
presenting all the functionality of the

138
00:05:11,280 --> 00:05:13,440
tools if you want to have a look

139
00:05:13,440 --> 00:05:14,400
you can

140
00:05:14,400 --> 00:05:16,880
give it a watch to it

141
00:05:16,880 --> 00:05:18,880
but today we will not speak about the

142
00:05:18,880 --> 00:05:20,639
tool itself we are speaking about the

143
00:05:20,639 --> 00:05:23,039
technique and the concepts

144
00:05:23,039 --> 00:05:24,880
uh a couple of words before starting

145
00:05:24,880 --> 00:05:27,360
about respect we have some files it's a

146
00:05:27,360 --> 00:05:29,520
python based uh

147
00:05:29,520 --> 00:05:30,400
engine

148
00:05:30,400 --> 00:05:32,479
so we have some files that we'll

149
00:05:32,479 --> 00:05:35,039
probably modify during our presentation

150
00:05:35,039 --> 00:05:37,919
because we want to as i said interact

151
00:05:37,919 --> 00:05:40,720
and uh doing something to some some

152
00:05:40,720 --> 00:05:42,400
instrumentation with them where we are

153
00:05:42,400 --> 00:05:45,039
emulating and so we will have a look to

154
00:05:45,039 --> 00:05:47,600
two three files

155
00:05:47,600 --> 00:05:49,759
for the of the tool itself which are

156
00:05:49,759 --> 00:05:52,560
where the configuration are set as

157
00:05:52,560 --> 00:05:56,720
for example in this this one or

158
00:05:56,720 --> 00:05:59,280
where you can set yara rules or emulate

159
00:05:59,280 --> 00:06:02,160
the payload okay i'm sorry i

160
00:06:02,160 --> 00:06:05,840
just exited the oops

161
00:06:06,479 --> 00:06:08,160
hit the wrong button

162
00:06:08,160 --> 00:06:11,039
but okay so let's start with case number

163
00:06:11,039 --> 00:06:11,919
one

164
00:06:11,919 --> 00:06:13,199
uh

165
00:06:13,199 --> 00:06:15,440
case number one it's a

166
00:06:15,440 --> 00:06:18,800
very simple shell code got from from an

167
00:06:18,800 --> 00:06:20,479
excel macro

168
00:06:20,479 --> 00:06:22,000
this is the excel market this is coming

169
00:06:22,000 --> 00:06:24,479
from an example sent to me by a user of

170
00:06:24,479 --> 00:06:26,080
the respondent and i thought it was a

171
00:06:26,080 --> 00:06:30,479
good a good sample of how it works so um

172
00:06:30,479 --> 00:06:33,360
this is a very simple macro in excel as

173
00:06:33,360 --> 00:06:36,400
you can see there is um

174
00:06:36,400 --> 00:06:38,560
array loaded with the sound bytes then

175
00:06:38,560 --> 00:06:40,080
this array it's

176
00:06:40,080 --> 00:06:42,960
used for a virtual location uh and it is

177
00:06:42,960 --> 00:06:45,039
copied in this in this virtual unlock

178
00:06:45,039 --> 00:06:46,840
and then there is a create

179
00:06:46,840 --> 00:06:50,160
thread function here below so that means

180
00:06:50,160 --> 00:06:52,639
that in some way this

181
00:06:52,639 --> 00:06:53,599
is

182
00:06:53,599 --> 00:06:54,960
i'm sorry

183
00:06:54,960 --> 00:06:56,730
this is going to um

184
00:06:56,730 --> 00:06:58,319
[Music]

185
00:06:58,319 --> 00:07:00,080
let me

186
00:07:00,080 --> 00:07:01,360
do it again

187
00:07:01,360 --> 00:07:04,240
this is going to execute this code okay

188
00:07:04,240 --> 00:07:06,800
that's pretty clear uh but how emulation

189
00:07:06,800 --> 00:07:10,479
can help us in this so let's go in our

190
00:07:10,479 --> 00:07:13,280
tool here i'm just running the

191
00:07:13,280 --> 00:07:15,759
the tool itself respond has a

192
00:07:15,759 --> 00:07:17,919
interface where you can run commands it

193
00:07:17,919 --> 00:07:20,080
has several commands but today we will

194
00:07:20,080 --> 00:07:22,560
focus only on one which is emulate

195
00:07:22,560 --> 00:07:24,319
payload command which has a different

196
00:07:24,319 --> 00:07:26,319
some different options

197
00:07:26,319 --> 00:07:28,639
in it from respect you can also run

198
00:07:28,639 --> 00:07:30,880
shell commands so you can just locate uh

199
00:07:30,880 --> 00:07:33,680
for example i saved the that

200
00:07:33,680 --> 00:07:34,880
that

201
00:07:34,880 --> 00:07:36,000
binary

202
00:07:36,000 --> 00:07:38,479
that array we saw before in this file

203
00:07:38,479 --> 00:07:40,560
and so i'm just starting the mlh

204
00:07:40,560 --> 00:07:43,759
emulation of profit just specifying

205
00:07:43,759 --> 00:07:46,400
the file with the dashb option

206
00:07:46,400 --> 00:07:48,000
so i'm going to

207
00:07:48,000 --> 00:07:50,000
for example starting the emulation of

208
00:07:50,000 --> 00:07:51,520
this software so it's just a matter of

209
00:07:51,520 --> 00:07:53,039
running this command into the tool

210
00:07:53,039 --> 00:07:54,240
itself

211
00:07:54,240 --> 00:07:56,319
and we see that okay let me just add

212
00:07:56,319 --> 00:07:58,560
another option which is it is just to

213
00:07:58,560 --> 00:08:00,639
speed up performances i'm not going into

214
00:08:00,639 --> 00:08:02,400
the details but if you want to have

215
00:08:02,400 --> 00:08:04,240
there is all the documentation

216
00:08:04,240 --> 00:08:06,560
okay you can see that some things are

217
00:08:06,560 --> 00:08:08,800
happening here because for example you

218
00:08:08,800 --> 00:08:09,840
see

219
00:08:09,840 --> 00:08:12,160
that okay the execution has been started

220
00:08:12,160 --> 00:08:14,160
and we are tracking api

221
00:08:14,160 --> 00:08:16,240
uh response automatically detected this

222
00:08:16,240 --> 00:08:18,879
is shellcode it's not an xa or a dll but

223
00:08:18,879 --> 00:08:20,879
it automatically detects the

224
00:08:20,879 --> 00:08:22,720
the kind of uh

225
00:08:22,720 --> 00:08:25,599
code that is is managing and we see that

226
00:08:25,599 --> 00:08:28,560
there are some things done like a create

227
00:08:28,560 --> 00:08:31,840
process with a create suspended flag

228
00:08:31,840 --> 00:08:33,279
that means that there is a new process

229
00:08:33,279 --> 00:08:34,320
created

230
00:08:34,320 --> 00:08:37,039
and it is not immediately executed then

231
00:08:37,039 --> 00:08:38,320
there is a

232
00:08:38,320 --> 00:08:40,240
an additional virtual alloc done into

233
00:08:40,240 --> 00:08:41,760
the process the process is named as you

234
00:08:41,760 --> 00:08:44,720
can see around dll32

235
00:08:44,720 --> 00:08:47,680
and then there is an additional write

236
00:08:47,680 --> 00:08:49,839
into this process so there is a kind of

237
00:08:49,839 --> 00:08:51,519
injection running so these are all

238
00:08:51,519 --> 00:08:52,640
things that

239
00:08:52,640 --> 00:08:55,440
emulation or in this case api

240
00:08:55,440 --> 00:08:58,320
tracing is uh telling to us and then

241
00:08:58,320 --> 00:09:00,399
there is a clear creator module so it

242
00:09:00,399 --> 00:09:03,040
means that there is another execution of

243
00:09:03,040 --> 00:09:05,519
additional codes here so it's not

244
00:09:05,519 --> 00:09:08,320
directly done by this code here and then

245
00:09:08,320 --> 00:09:10,320
there is a slip then you can see that

246
00:09:10,320 --> 00:09:11,839
the process is repeated again and again

247
00:09:11,839 --> 00:09:13,760
and again so we are interested actually

248
00:09:13,760 --> 00:09:16,320
right now into this first part for

249
00:09:16,320 --> 00:09:18,480
example the sleeper is another effect of

250
00:09:18,480 --> 00:09:20,560
emulation is not really

251
00:09:20,560 --> 00:09:22,240
done because i can see this as you can

252
00:09:22,240 --> 00:09:25,600
see the sleep is done for a very

253
00:09:25,600 --> 00:09:27,600
amount very high amount of time but we

254
00:09:27,600 --> 00:09:29,200
are actually skipping this because this

255
00:09:29,200 --> 00:09:30,800
is one of the advantages of demolition

256
00:09:30,800 --> 00:09:32,160
you can instruct

257
00:09:32,160 --> 00:09:34,560
your api in doing what you want instead

258
00:09:34,560 --> 00:09:37,920
of just relying on what is doing your

259
00:09:37,920 --> 00:09:39,519
virtualized environment

260
00:09:39,519 --> 00:09:40,240
so

261
00:09:40,240 --> 00:09:42,480
what we can do right now with our tool

262
00:09:42,480 --> 00:09:44,640
okay we saw that we have this

263
00:09:44,640 --> 00:09:47,200
create remote thread if we go back in

264
00:09:47,200 --> 00:09:48,880
the emulate payload help

265
00:09:48,880 --> 00:09:51,200
we can see that we have an option the ht

266
00:09:51,200 --> 00:09:53,440
which is dumping the create thread

267
00:09:53,440 --> 00:09:55,600
create more thread api content so what

268
00:09:55,600 --> 00:09:56,399
we

269
00:09:56,399 --> 00:09:58,399
can do right now is just to re-execute

270
00:09:58,399 --> 00:10:00,880
again the same code by passing this

271
00:10:00,880 --> 00:10:02,160
option

272
00:10:02,160 --> 00:10:03,120
here

273
00:10:03,120 --> 00:10:04,959
and we can see that we have exactly the

274
00:10:04,959 --> 00:10:07,360
same situation as before but

275
00:10:07,360 --> 00:10:09,200
uh with an additional

276
00:10:09,200 --> 00:10:10,720
set here because this code has been

277
00:10:10,720 --> 00:10:13,440
dumped into this file okay let's have a

278
00:10:13,440 --> 00:10:15,440
look on what

279
00:10:15,440 --> 00:10:18,399
this file has

280
00:10:19,440 --> 00:10:22,240
it just to understand if we

281
00:10:22,240 --> 00:10:24,959
okay we see that some bytes which looks

282
00:10:24,959 --> 00:10:28,800
like other code so okay great that's uh

283
00:10:28,800 --> 00:10:31,200
good things to uh to know and so let's

284
00:10:31,200 --> 00:10:31,900
just start to

285
00:10:31,900 --> 00:10:33,760
[Music]

286
00:10:33,760 --> 00:10:36,320
emulate that code again so we are just

287
00:10:36,320 --> 00:10:39,120
doing the same thing

288
00:10:39,120 --> 00:10:40,079
okay

289
00:10:40,079 --> 00:10:41,120
and

290
00:10:41,120 --> 00:10:43,120
again the

291
00:10:43,120 --> 00:10:45,040
option so again we are starting the

292
00:10:45,040 --> 00:10:46,959
emulation but this time on the create

293
00:10:46,959 --> 00:10:48,480
thread

294
00:10:48,480 --> 00:10:49,920
and we see some different things

295
00:10:49,920 --> 00:10:51,040
happening

296
00:10:51,040 --> 00:10:53,680
because there is for example here

297
00:10:53,680 --> 00:10:56,320
another emulation done with the api

298
00:10:56,320 --> 00:10:58,320
tracking and we see for example the

299
00:10:58,320 --> 00:10:59,680
execution of

300
00:10:59,680 --> 00:11:02,640
an internet open on this site here

301
00:11:02,640 --> 00:11:06,399
then there is a download of

302
00:11:06,640 --> 00:11:09,839
a file named metal.exe

303
00:11:09,839 --> 00:11:12,480
and local file has been created here

304
00:11:12,480 --> 00:11:14,720
with create file chromex and then this

305
00:11:14,720 --> 00:11:18,640
chromex is executed here so after

306
00:11:18,640 --> 00:11:21,040
the download completes so this is a

307
00:11:21,040 --> 00:11:23,279
pretty uh a nice overview of that

308
00:11:23,279 --> 00:11:25,440
shellcode done in two commands and in a

309
00:11:25,440 --> 00:11:27,519
few minutes as you see as you saw a few

310
00:11:27,519 --> 00:11:28,399
minutes

311
00:11:28,399 --> 00:11:30,240
four five minutes we did it

312
00:11:30,240 --> 00:11:31,839
um

313
00:11:31,839 --> 00:11:33,519
okay you may think and you may ask okay

314
00:11:33,519 --> 00:11:35,680
but i can obtain the same the same thing

315
00:11:35,680 --> 00:11:38,560
just with a sandbox which is true and no

316
00:11:38,560 --> 00:11:40,720
i will show you why because for example

317
00:11:40,720 --> 00:11:43,040
if i get the same ex the exact the same

318
00:11:43,040 --> 00:11:44,720
file and i will put it for example on

319
00:11:44,720 --> 00:11:45,920
app and iran

320
00:11:45,920 --> 00:11:48,000
i obtain something like this

321
00:11:48,000 --> 00:11:49,040
which is

322
00:11:49,040 --> 00:11:51,600
in part similar because you see that

323
00:11:51,600 --> 00:11:54,200
excel is running for example around

324
00:11:54,200 --> 00:11:56,320
dll32.xfile which is actually what we

325
00:11:56,320 --> 00:11:57,279
saw

326
00:11:57,279 --> 00:11:59,360
and but this is something different here

327
00:11:59,360 --> 00:12:00,720
if you look into the details because we

328
00:12:00,720 --> 00:12:02,639
don't see any kind of http request in

329
00:12:02,639 --> 00:12:04,560
any kind of a connection

330
00:12:04,560 --> 00:12:07,760
but you just see a dns request which is

331
00:12:07,760 --> 00:12:09,680
exactly the same

332
00:12:09,680 --> 00:12:12,160
the same site we saw what has happened

333
00:12:12,160 --> 00:12:14,800
here and why in this case happen iran

334
00:12:14,800 --> 00:12:17,200
didn't found everything about the emily

335
00:12:17,200 --> 00:12:20,560
the the the the execution because the

336
00:12:20,560 --> 00:12:24,240
shiny object. was not resolved correctly

337
00:12:24,240 --> 00:12:26,000
and this is one of the advantages in

338
00:12:26,000 --> 00:12:27,600
this case of emulation because you can

339
00:12:27,600 --> 00:12:29,839
actually instruct your emulator in doing

340
00:12:29,839 --> 00:12:31,760
things even if they are not really

341
00:12:31,760 --> 00:12:33,600
happening so in this case which is very

342
00:12:33,600 --> 00:12:35,440
common this case because when you

343
00:12:35,440 --> 00:12:37,600
analyze malicious software very often

344
00:12:37,600 --> 00:12:38,480
you have

345
00:12:38,480 --> 00:12:39,279
the

346
00:12:39,279 --> 00:12:41,279
common end control board down in a few

347
00:12:41,279 --> 00:12:43,839
days so it's pretty normal that a site

348
00:12:43,839 --> 00:12:46,560
is not responding uh you miss an

349
00:12:46,560 --> 00:12:48,320
important part of the movie of the

350
00:12:48,320 --> 00:12:50,240
execution because you don't know which

351
00:12:50,240 --> 00:12:52,240
kind of file has been downloaded and

352
00:12:52,240 --> 00:12:53,200
which

353
00:12:53,200 --> 00:12:55,600
has been saved so in a incident response

354
00:12:55,600 --> 00:12:57,440
situation this is pretty important to

355
00:12:57,440 --> 00:12:59,519
know so you can see here is one of the

356
00:12:59,519 --> 00:13:01,839
advantages of emulation so you can

357
00:13:01,839 --> 00:13:02,720
really

358
00:13:02,720 --> 00:13:05,600
instruct your emulator in doing things

359
00:13:05,600 --> 00:13:07,920
you want so like in this case emulating

360
00:13:07,920 --> 00:13:09,600
a connection to the

361
00:13:09,600 --> 00:13:10,720
uh

362
00:13:10,720 --> 00:13:12,720
to the domain server here shiny object

363
00:13:12,720 --> 00:13:14,399
words which is not actually happening

364
00:13:14,399 --> 00:13:17,200
for example in a standard let's say

365
00:13:17,200 --> 00:13:18,399
sandbox

366
00:13:18,399 --> 00:13:19,279
okay

367
00:13:19,279 --> 00:13:21,839
so what we let's go back into the

368
00:13:21,839 --> 00:13:23,440
presentation

369
00:13:23,440 --> 00:13:25,760
and uh

370
00:13:25,760 --> 00:13:27,839
okay what we can see oh

371
00:13:27,839 --> 00:13:30,560
okay is this is what we learned from

372
00:13:30,560 --> 00:13:33,279
from our from our emulation so we got an

373
00:13:33,279 --> 00:13:35,519
excel macro with a virtual unlock a move

374
00:13:35,519 --> 00:13:37,600
memory and a grid thread then we

375
00:13:37,600 --> 00:13:39,920
emulated the shell code and we saw that

376
00:13:39,920 --> 00:13:41,839
there was an additional create process a

377
00:13:41,839 --> 00:13:44,240
virtual unlock a bright memory and an

378
00:13:44,240 --> 00:13:46,240
additional create remote thread

379
00:13:46,240 --> 00:13:48,720
after that we dumped that content and we

380
00:13:48,720 --> 00:13:51,199
did an additional emulation again and we

381
00:13:51,199 --> 00:13:52,320
saw that

382
00:13:52,320 --> 00:13:54,399
there was a internet connection and a

383
00:13:54,399 --> 00:13:56,880
download of a file with the execution so

384
00:13:56,880 --> 00:13:58,800
this part was pretty

385
00:13:58,800 --> 00:14:00,560
missed

386
00:14:00,560 --> 00:14:02,720
almost missed by the sandboxing but it

387
00:14:02,720 --> 00:14:06,560
was in instead uh identified by our

388
00:14:06,560 --> 00:14:08,480
emulation approach

389
00:14:08,480 --> 00:14:11,120
okay let's jump to case two this one was

390
00:14:11,120 --> 00:14:13,120
a very simple case okay very simple

391
00:14:13,120 --> 00:14:15,440
shell code no fusion no encryption

392
00:14:15,440 --> 00:14:18,079
nothing at all so the basic one let's

393
00:14:18,079 --> 00:14:20,320
say but now we are going into

394
00:14:20,320 --> 00:14:23,040
uh showing you how emulation can help

395
00:14:23,040 --> 00:14:25,680
you in doing really hard stuff and

396
00:14:25,680 --> 00:14:26,639
different

397
00:14:26,639 --> 00:14:27,920
different uh

398
00:14:27,920 --> 00:14:30,880
kind of analysis

399
00:14:30,880 --> 00:14:33,920
this is a dll not a shellcode anymore

400
00:14:33,920 --> 00:14:37,279
a dll which is uh

401
00:14:37,440 --> 00:14:39,360
assigned to ramnet

402
00:14:39,360 --> 00:14:41,120
malware in this case depending on the

403
00:14:41,120 --> 00:14:43,199
tool you use to analyze it sometimes

404
00:14:43,199 --> 00:14:45,920
this dll is also

405
00:14:45,920 --> 00:14:48,800
linked to bumblebee depends on which

406
00:14:48,800 --> 00:14:50,800
tool you use to to analyze it but okay

407
00:14:50,800 --> 00:14:53,440
it's a pretty recent piece of malware i

408
00:14:53,440 --> 00:14:54,639
downloaded it

409
00:14:54,639 --> 00:14:56,639
the last month so beginning of may

410
00:14:56,639 --> 00:14:58,959
probably and so

411
00:14:58,959 --> 00:15:00,480
something that is

412
00:15:00,480 --> 00:15:02,720
in the wider right now and it can be

413
00:15:02,720 --> 00:15:05,360
used as a sample so let's go into the

414
00:15:05,360 --> 00:15:06,880
demo right now

415
00:15:06,880 --> 00:15:08,639
okay

416
00:15:08,639 --> 00:15:10,880
before starting with the emulation

417
00:15:10,880 --> 00:15:13,680
of this one i would like to show you

418
00:15:13,680 --> 00:15:16,720
as i said we will use gidra how this dll

419
00:15:16,720 --> 00:15:18,079
is built

420
00:15:18,079 --> 00:15:20,720
okay this is the analysis done in guitar

421
00:15:20,720 --> 00:15:22,399
without any comments i left it on

422
00:15:22,399 --> 00:15:24,480
purpose done in this way because i want

423
00:15:24,480 --> 00:15:25,680
to show you

424
00:15:25,680 --> 00:15:28,639
how emulation can help you in figuring

425
00:15:28,639 --> 00:15:31,680
out what is going to happen into the

426
00:15:31,680 --> 00:15:34,320
the executable so the emulation itself

427
00:15:34,320 --> 00:15:36,480
okay starts from here the sorry the

428
00:15:36,480 --> 00:15:38,560
executable itself starts from here and

429
00:15:38,560 --> 00:15:40,959
you have an entry point then we can see

430
00:15:40,959 --> 00:15:43,519
here the the compilation which is a

431
00:15:43,519 --> 00:15:45,920
simple function we can try to drill down

432
00:15:45,920 --> 00:15:48,399
for example we see some further function

433
00:15:48,399 --> 00:15:50,639
here we can have a look to them

434
00:15:50,639 --> 00:15:53,120
we start to see some

435
00:15:53,120 --> 00:15:55,440
api calls which

436
00:15:55,440 --> 00:15:57,360
do something some virtual allocation but

437
00:15:57,360 --> 00:15:58,560
okay

438
00:15:58,560 --> 00:16:00,560
we are not interested in there right now

439
00:16:00,560 --> 00:16:03,040
let's try to dive in and to the rabbit

440
00:16:03,040 --> 00:16:04,240
hole here

441
00:16:04,240 --> 00:16:05,680
and seeing

442
00:16:05,680 --> 00:16:07,759
that things are becoming pretty complex

443
00:16:07,759 --> 00:16:09,040
so

444
00:16:09,040 --> 00:16:11,759
okay you still see other function calls

445
00:16:11,759 --> 00:16:14,160
until for example this one doing other

446
00:16:14,160 --> 00:16:16,959
things get model handle

447
00:16:16,959 --> 00:16:19,199
additional call i want to bring you to a

448
00:16:19,199 --> 00:16:21,360
specific part because i want to

449
00:16:21,360 --> 00:16:23,920
show you for example a specific function

450
00:16:23,920 --> 00:16:26,430
call which is the um

451
00:16:26,430 --> 00:16:28,560
[Music]

452
00:16:28,560 --> 00:16:31,440
uh this one because white stint it is

453
00:16:31,440 --> 00:16:33,600
interesting this one because

454
00:16:33,600 --> 00:16:36,399
let me show you okay this is the

455
00:16:36,399 --> 00:16:38,320
flow generated by gidra about this

456
00:16:38,320 --> 00:16:40,639
function it is pretty common when you

457
00:16:40,639 --> 00:16:41,680
have a look

458
00:16:41,680 --> 00:16:43,839
to obfuscated malware

459
00:16:43,839 --> 00:16:45,600
this is a sample of control flow

460
00:16:45,600 --> 00:16:48,160
flattening where you can see a lot of

461
00:16:48,160 --> 00:16:52,160
loops and generated into the the fight

462
00:16:52,160 --> 00:16:54,160
itself so let's say we want to figure

463
00:16:54,160 --> 00:16:55,920
out what this is doing we can do it

464
00:16:55,920 --> 00:16:58,160
manually or by doing static or with

465
00:16:58,160 --> 00:17:00,000
emulation okay

466
00:17:00,000 --> 00:17:02,240
let's go back into

467
00:17:02,240 --> 00:17:04,160
our emulator

468
00:17:04,160 --> 00:17:04,959
and

469
00:17:04,959 --> 00:17:06,720
okay we can just start the

470
00:17:06,720 --> 00:17:08,559
multi-emulation of the sample

471
00:17:08,559 --> 00:17:10,000
by doing

472
00:17:10,000 --> 00:17:12,240
the same things as we did before so

473
00:17:12,240 --> 00:17:15,199
emulate payload hp in this case i have

474
00:17:15,199 --> 00:17:18,959
to use the sample dll

475
00:17:18,959 --> 00:17:21,919
okay and then i use also this one okay

476
00:17:21,919 --> 00:17:24,559
i'm trying to run it and it says okay

477
00:17:24,559 --> 00:17:27,039
this is a x86

478
00:17:27,039 --> 00:17:29,760
yellow it does not have any exports

479
00:17:29,760 --> 00:17:31,120
and okay this is a very important

480
00:17:31,120 --> 00:17:33,280
information for us so you can try to

481
00:17:33,280 --> 00:17:35,760
just execute it with this export here

482
00:17:35,760 --> 00:17:37,919
because uh

483
00:17:37,919 --> 00:17:39,760
this is the process attached so let's

484
00:17:39,760 --> 00:17:43,440
say it's executed every time the um dli

485
00:17:43,440 --> 00:17:45,760
is registered so let's just follow how

486
00:17:45,760 --> 00:17:48,720
the the hint that respond gave us and

487
00:17:48,720 --> 00:17:50,799
let's start it okay great we see

488
00:17:50,799 --> 00:17:52,640
something similar than before we see

489
00:17:52,640 --> 00:17:54,400
that uh

490
00:17:54,400 --> 00:17:56,640
the emulation starts then

491
00:17:56,640 --> 00:17:58,720
there are some

492
00:17:58,720 --> 00:18:00,000
api course

493
00:18:00,000 --> 00:18:01,840
then there is a specific call to map

494
00:18:01,840 --> 00:18:04,160
view file and we see an error i left it

495
00:18:04,160 --> 00:18:05,679
on this on purpose because i want to

496
00:18:05,679 --> 00:18:06,880
show you

497
00:18:06,880 --> 00:18:09,600
why english is different

498
00:18:09,600 --> 00:18:12,559
okay what is happening right now

499
00:18:12,559 --> 00:18:14,559
we see a call to this map view of file

500
00:18:14,559 --> 00:18:16,960
which is an api call which get a

501
00:18:16,960 --> 00:18:19,200
specific file from the file system and

502
00:18:19,200 --> 00:18:22,240
maps it into memory okay great

503
00:18:22,240 --> 00:18:24,640
but this is failing for some reason

504
00:18:24,640 --> 00:18:26,240
and the reason is that

505
00:18:26,240 --> 00:18:28,160
it says that the final part is is not

506
00:18:28,160 --> 00:18:29,760
found that's

507
00:18:29,760 --> 00:18:31,600
why i

508
00:18:31,600 --> 00:18:33,520
why this is happening because as i said

509
00:18:33,520 --> 00:18:35,600
that we don't have a real operating

510
00:18:35,600 --> 00:18:37,919
system behind but we have something

511
00:18:37,919 --> 00:18:39,600
emulating this

512
00:18:39,600 --> 00:18:41,520
and so what we need to

513
00:18:41,520 --> 00:18:43,200
go ahead with our emulation is to

514
00:18:43,200 --> 00:18:45,200
provide this file if you want to analyze

515
00:18:45,200 --> 00:18:48,559
it so in this case uh what we should do

516
00:18:48,559 --> 00:18:50,559
it's just to copy the dll

517
00:18:50,559 --> 00:18:52,160
into the

518
00:18:52,160 --> 00:18:53,600
proper directory

519
00:18:53,600 --> 00:18:55,440
and i'm going to do it immediately with

520
00:18:55,440 --> 00:18:59,440
a specific command which is this one

521
00:19:00,640 --> 00:19:02,559
okay so i can go back in my

522
00:19:02,559 --> 00:19:04,720
response and then re-execute again the

523
00:19:04,720 --> 00:19:06,880
thing okay

524
00:19:06,880 --> 00:19:08,640
okay as you can see now

525
00:19:08,640 --> 00:19:10,160
i'm stopping it because otherwise it

526
00:19:10,160 --> 00:19:12,720
takes a while uh the part of the mapping

527
00:19:12,720 --> 00:19:15,600
file went ahead and okay it started to

528
00:19:15,600 --> 00:19:18,160
do some other things great so

529
00:19:18,160 --> 00:19:20,559
um

530
00:19:21,440 --> 00:19:23,840
we can now go on and understand what is

531
00:19:23,840 --> 00:19:25,360
going on so

532
00:19:25,360 --> 00:19:26,960
let's go back in gidram

533
00:19:26,960 --> 00:19:30,000
because i told you before i want to

534
00:19:30,000 --> 00:19:31,520
really understand what this function is

535
00:19:31,520 --> 00:19:33,600
doing and it would be quite

536
00:19:33,600 --> 00:19:36,799
hard to because it's not really

537
00:19:36,799 --> 00:19:38,559
really easy to read this kind of

538
00:19:38,559 --> 00:19:40,160
flattening

539
00:19:40,160 --> 00:19:42,160
what can i do is for example have a look

540
00:19:42,160 --> 00:19:44,160
to the compilation here and seeing that

541
00:19:44,160 --> 00:19:46,320
okay there are a set of while loops

542
00:19:46,320 --> 00:19:47,760
great

543
00:19:47,760 --> 00:19:49,600
then there is a kind of let's say let's

544
00:19:49,600 --> 00:19:52,080
call it state machine because as you can

545
00:19:52,080 --> 00:19:54,559
see there is this local 54 variable used

546
00:19:54,559 --> 00:19:56,559
every time here

547
00:19:56,559 --> 00:19:59,280
and depending on the value that this

548
00:19:59,280 --> 00:20:01,760
this variable has it's doing different

549
00:20:01,760 --> 00:20:04,080
things okay if we look

550
00:20:04,080 --> 00:20:06,240
at the code here we see that this local

551
00:20:06,240 --> 00:20:09,679
54 value is mapped to register a

552
00:20:09,679 --> 00:20:10,559
e

553
00:20:10,559 --> 00:20:11,840
ax

554
00:20:11,840 --> 00:20:13,600
okay so what

555
00:20:13,600 --> 00:20:15,600
we can do to help us

556
00:20:15,600 --> 00:20:17,440
in understanding what is functioning is

557
00:20:17,440 --> 00:20:18,320
doing

558
00:20:18,320 --> 00:20:20,000
i thought something like that i can't

559
00:20:20,000 --> 00:20:21,120
just

560
00:20:21,120 --> 00:20:23,840
for example place something at the very

561
00:20:23,840 --> 00:20:26,559
beginning of this set of loops here

562
00:20:26,559 --> 00:20:27,679
telling me

563
00:20:27,679 --> 00:20:31,200
which is the content of the eix register

564
00:20:31,200 --> 00:20:32,880
at this point in this part in this

565
00:20:32,880 --> 00:20:35,520
moment so that i can completely unroll

566
00:20:35,520 --> 00:20:38,240
the execution and understand which are

567
00:20:38,240 --> 00:20:40,559
the steps in which order they are

568
00:20:40,559 --> 00:20:43,200
executed how can i do it with emulation

569
00:20:43,200 --> 00:20:46,080
it's pretty simple to be honest and

570
00:20:46,080 --> 00:20:49,039
and just have to go to modify one of the

571
00:20:49,039 --> 00:20:52,960
files we saw before which was the uh

572
00:20:52,960 --> 00:20:54,559
emulate payload

573
00:20:54,559 --> 00:20:56,159
this

574
00:20:56,159 --> 00:20:57,280
file

575
00:20:57,280 --> 00:21:00,799
has a section which is very well

576
00:21:00,799 --> 00:21:03,280
commented here where you can insert your

577
00:21:03,280 --> 00:21:05,760
own code and for example let's show you

578
00:21:05,760 --> 00:21:08,000
an example because you can set the

579
00:21:08,000 --> 00:21:09,440
begging variable which contains the

580
00:21:09,440 --> 00:21:11,600
current instruction pointer and then do

581
00:21:11,600 --> 00:21:14,000
something you want so what we want to do

582
00:21:14,000 --> 00:21:15,120
we want to

583
00:21:15,120 --> 00:21:17,440
check when the address is this one so

584
00:21:17,440 --> 00:21:18,799
it's uh

585
00:21:18,799 --> 00:21:22,320
this value here the 32b6 we want to

586
00:21:22,320 --> 00:21:24,960
print for example the content of the eax

587
00:21:24,960 --> 00:21:28,240
register and it is very simple to do it

588
00:21:28,240 --> 00:21:30,000
because it's just a matter of adding a

589
00:21:30,000 --> 00:21:31,679
couple of line of codes there where the

590
00:21:31,679 --> 00:21:33,200
comments is set

591
00:21:33,200 --> 00:21:34,960
so let's just go

592
00:21:34,960 --> 00:21:38,799
back and let's just insert try to insert

593
00:21:38,799 --> 00:21:40,080
this one

594
00:21:40,080 --> 00:21:42,559
okay as you can see here i

595
00:21:42,559 --> 00:21:44,559
just checking the content of begging

596
00:21:44,559 --> 00:21:47,120
which is for example this value which is

597
00:21:47,120 --> 00:21:49,520
the one

598
00:21:49,520 --> 00:21:53,360
we see here okay every time the

599
00:21:53,360 --> 00:21:55,360
this instruction is reached i want to

600
00:21:55,360 --> 00:21:58,320
print out the content of the register

601
00:21:58,320 --> 00:21:59,440
great

602
00:21:59,440 --> 00:22:01,840
so let's save and go back in our

603
00:22:01,840 --> 00:22:04,640
execution so what is happening here i'm

604
00:22:04,640 --> 00:22:06,880
just rerunning it

605
00:22:06,880 --> 00:22:07,840
oops

606
00:22:07,840 --> 00:22:11,280
i did an indentation error sorry

607
00:22:11,280 --> 00:22:14,320
so oops

608
00:22:20,000 --> 00:22:21,360
okay

609
00:22:21,360 --> 00:22:23,840
so i topic probably said yes there is a

610
00:22:23,840 --> 00:22:25,520
missing space so

611
00:22:25,520 --> 00:22:27,840
let's go back

612
00:22:27,840 --> 00:22:32,320
okay so what is happening right now

613
00:22:32,960 --> 00:22:34,159
it's

614
00:22:34,159 --> 00:22:36,159
i have to remove

615
00:22:36,159 --> 00:22:39,400
this option

616
00:22:41,360 --> 00:22:43,918
oops

617
00:22:45,919 --> 00:22:48,080
okay here we are

618
00:22:48,080 --> 00:22:50,720
okay so you can see that

619
00:22:50,720 --> 00:22:53,520
when the that that part is reached we

620
00:22:53,520 --> 00:22:56,000
see that there is this print so that

621
00:22:56,000 --> 00:22:56,799
means

622
00:22:56,799 --> 00:23:00,720
let's have a let's run it a bit more

623
00:23:00,720 --> 00:23:02,880
so that you can see okay something

624
00:23:02,880 --> 00:23:04,080
more

625
00:23:04,080 --> 00:23:05,280
you can see that there is a kind of

626
00:23:05,280 --> 00:23:08,559
initialization of that loop running

627
00:23:08,559 --> 00:23:11,600
for example several parts of the

628
00:23:11,600 --> 00:23:13,120
of the loop itself

629
00:23:13,120 --> 00:23:15,120
and then there is a kind of actions

630
00:23:15,120 --> 00:23:17,440
repeated for several times doing every

631
00:23:17,440 --> 00:23:19,679
time the same things so it looks like

632
00:23:19,679 --> 00:23:22,000
that he's running a kind of a loop into

633
00:23:22,000 --> 00:23:23,840
the set of loops

634
00:23:23,840 --> 00:23:26,000
doing some things here

635
00:23:26,000 --> 00:23:28,320
okay and passing every time into the

636
00:23:28,320 --> 00:23:31,120
same places of the of the loop itself

637
00:23:31,120 --> 00:23:34,159
and then running as the string compare

638
00:23:34,159 --> 00:23:35,919
great this is string compare it's

639
00:23:35,919 --> 00:23:37,520
running on several

640
00:23:37,520 --> 00:23:38,480
things

641
00:23:38,480 --> 00:23:39,200
and

642
00:23:39,200 --> 00:23:41,360
it looks like that it's looking for this

643
00:23:41,360 --> 00:23:43,440
anti-protect virtual memory so this is

644
00:23:43,440 --> 00:23:45,840
giving us some insights actually so it

645
00:23:45,840 --> 00:23:48,320
looks like that that function is in some

646
00:23:48,320 --> 00:23:51,679
way before mapping a specific ntdl okay

647
00:23:51,679 --> 00:23:54,480
and then now it's trying to find out

648
00:23:54,480 --> 00:23:56,320
this uh

649
00:23:56,320 --> 00:23:58,720
this function here by following this

650
00:23:58,720 --> 00:24:00,159
kind of approach here we are not

651
00:24:00,159 --> 00:24:02,159
interested right now in going to detail

652
00:24:02,159 --> 00:24:03,200
of

653
00:24:03,200 --> 00:24:05,039
every single step here but we are just

654
00:24:05,039 --> 00:24:07,840
not interested into the last one because

655
00:24:07,840 --> 00:24:09,919
at one point this will this loop will

656
00:24:09,919 --> 00:24:13,039
hang because this match will be

657
00:24:13,039 --> 00:24:16,720
correct okay so let's try to jump at the

658
00:24:16,720 --> 00:24:19,440
last uh part of the

659
00:24:19,440 --> 00:24:22,640
of the of the loop when this compare is

660
00:24:22,640 --> 00:24:25,440
actually successful okay so to do it i

661
00:24:25,440 --> 00:24:26,400
can just

662
00:24:26,400 --> 00:24:28,320
run it until the end

663
00:24:28,320 --> 00:24:30,640
but since it takes some minutes to to

664
00:24:30,640 --> 00:24:33,600
complete i already did it and

665
00:24:33,600 --> 00:24:35,919
i'm just showing you the same result the

666
00:24:35,919 --> 00:24:37,840
output received result

667
00:24:37,840 --> 00:24:38,720
uh

668
00:24:38,720 --> 00:24:40,960
from the

669
00:24:40,960 --> 00:24:42,720
file which is this one okay this is

670
00:24:42,720 --> 00:24:45,279
exactly the same output run for every

671
00:24:45,279 --> 00:24:47,039
every single one so let's jump to the

672
00:24:47,039 --> 00:24:48,080
last

673
00:24:48,080 --> 00:24:50,000
last part of it

674
00:24:50,000 --> 00:24:51,440
which is where the

675
00:24:51,440 --> 00:24:53,200
comparison sucks is successfully done

676
00:24:53,200 --> 00:24:56,159
okay which is this one okay

677
00:24:56,159 --> 00:24:57,919
great okay now

678
00:24:57,919 --> 00:24:59,600
i see that after this is this is

679
00:24:59,600 --> 00:25:02,080
successfully i see this execution here

680
00:25:02,080 --> 00:25:04,240
so i'm interested in understanding what

681
00:25:04,240 --> 00:25:06,080
this part is doing because but it's what

682
00:25:06,080 --> 00:25:09,039
exactly i need to know right now because

683
00:25:09,039 --> 00:25:12,000
this is the function scope at the end so

684
00:25:12,000 --> 00:25:13,520
let's start from the last one which is

685
00:25:13,520 --> 00:25:14,480
probably

686
00:25:14,480 --> 00:25:15,279
one

687
00:25:15,279 --> 00:25:16,880
which is interesting so we can get this

688
00:25:16,880 --> 00:25:19,279
content and just look for it in our

689
00:25:19,279 --> 00:25:22,559
ghidra okay i can just look for the same

690
00:25:22,559 --> 00:25:25,039
value in the code

691
00:25:25,039 --> 00:25:26,640
for example this one but this is

692
00:25:26,640 --> 00:25:27,919
assigned so this is not what we are

693
00:25:27,919 --> 00:25:29,120
looking for because it's an assignment

694
00:25:29,120 --> 00:25:30,240
this is an assignment this is an

695
00:25:30,240 --> 00:25:32,080
assignment this is another assignment

696
00:25:32,080 --> 00:25:33,679
okay this is the part where it is

697
00:25:33,679 --> 00:25:36,320
checked because you have the if here

698
00:25:36,320 --> 00:25:38,159
and you can see that this is just the

699
00:25:38,159 --> 00:25:40,880
break and the exit of the loop so okay

700
00:25:40,880 --> 00:25:43,200
great we understood that this

701
00:25:43,200 --> 00:25:45,919
part here of the flattening means okay

702
00:25:45,919 --> 00:25:48,320
breaks the loop and x to the f from the

703
00:25:48,320 --> 00:25:50,159
function okay great

704
00:25:50,159 --> 00:25:51,440
good to know but it's not what we are

705
00:25:51,440 --> 00:25:53,919
looking for so let's go to the

706
00:25:53,919 --> 00:25:57,520
second one here and let's try to find

707
00:25:57,520 --> 00:26:00,158
what he's doing

708
00:26:00,320 --> 00:26:02,559
so let's look for it

709
00:26:02,559 --> 00:26:04,080
this is the assignment this is the if

710
00:26:04,080 --> 00:26:06,640
okay great so this is what happening

711
00:26:06,640 --> 00:26:09,200
just before the function exit

712
00:26:09,200 --> 00:26:10,720
as you can see there is a kind of

713
00:26:10,720 --> 00:26:12,080
assignment we don't know for what

714
00:26:12,080 --> 00:26:13,520
because we

715
00:26:13,520 --> 00:26:15,440
just now we didn't do anything more than

716
00:26:15,440 --> 00:26:17,039
what we did with the display so we

717
00:26:17,039 --> 00:26:18,080
didn't

718
00:26:18,080 --> 00:26:20,320
analyze anything more or less and we see

719
00:26:20,320 --> 00:26:22,320
that for example this is an assignment

720
00:26:22,320 --> 00:26:25,279
of local 18 and

721
00:26:25,279 --> 00:26:27,279
but we don't know actually what this is

722
00:26:27,279 --> 00:26:29,520
doing so we don't know the content of

723
00:26:29,520 --> 00:26:32,559
this part here so it's not really

724
00:26:32,559 --> 00:26:35,279
clear what is doing but we can say that

725
00:26:35,279 --> 00:26:37,600
local 18 for example

726
00:26:37,600 --> 00:26:39,279
is

727
00:26:39,279 --> 00:26:41,520
the function at the the the value that

728
00:26:41,520 --> 00:26:43,200
the function is returning and which is

729
00:26:43,200 --> 00:26:45,279
this is very helpful for us so we saw

730
00:26:45,279 --> 00:26:46,080
that

731
00:26:46,080 --> 00:26:48,400
by following these

732
00:26:48,400 --> 00:26:50,640
things we saw that just before breaking

733
00:26:50,640 --> 00:26:52,400
and exiting there is an assignment of

734
00:26:52,400 --> 00:26:54,880
local latina to some valley to a

735
00:26:54,880 --> 00:26:57,360
specific value let's go into the calling

736
00:26:57,360 --> 00:26:59,279
function here

737
00:26:59,279 --> 00:27:01,840
and seeing what happens with this value

738
00:27:01,840 --> 00:27:05,279
so the calling function was

739
00:27:05,279 --> 00:27:08,080
let's go back again and again

740
00:27:08,080 --> 00:27:10,240
okay this was the calling function as

741
00:27:10,240 --> 00:27:11,600
you can see locality is assigned to

742
00:27:11,600 --> 00:27:13,200
local 8 here

743
00:27:13,200 --> 00:27:15,440
and there is a virtual alloc

744
00:27:15,440 --> 00:27:18,399
done on that value great we can leverage

745
00:27:18,399 --> 00:27:20,240
another

746
00:27:20,240 --> 00:27:21,840
thing that respond is giving us and

747
00:27:21,840 --> 00:27:24,799
emulation allow us to do

748
00:27:24,799 --> 00:27:26,640
which is the

749
00:27:26,640 --> 00:27:28,720
let's go back

750
00:27:28,720 --> 00:27:30,080
another option

751
00:27:30,080 --> 00:27:31,600
which is the

752
00:27:31,600 --> 00:27:33,600
let me show it to you

753
00:27:33,600 --> 00:27:34,480
the

754
00:27:34,480 --> 00:27:36,960
dash m option here as before we use the

755
00:27:36,960 --> 00:27:39,279
dash t for dumping credit thread

756
00:27:39,279 --> 00:27:40,880
with the dash and we can dump the

757
00:27:40,880 --> 00:27:44,000
virtual alloc api allocated content

758
00:27:44,000 --> 00:27:45,840
on read except for free

759
00:27:45,840 --> 00:27:48,480
so we can just rerun again run it

760
00:27:48,480 --> 00:27:51,120
another time and with this option here

761
00:27:51,120 --> 00:27:53,919
to see what actually was allocated

762
00:27:53,919 --> 00:27:55,840
because that was the content of local 18

763
00:27:55,840 --> 00:27:59,760
we saw before so let's uh

764
00:27:59,760 --> 00:28:02,240
also in this case i have a recorded

765
00:28:02,240 --> 00:28:03,600
screencast for for this kind of

766
00:28:03,600 --> 00:28:05,200
emulation because it takes

767
00:28:05,200 --> 00:28:07,200
four or five minutes to complete so i

768
00:28:07,200 --> 00:28:08,799
just did it uh

769
00:28:08,799 --> 00:28:11,279
beforehand just not have you looking at

770
00:28:11,279 --> 00:28:13,039
the screen for minutes

771
00:28:13,039 --> 00:28:14,960
and

772
00:28:14,960 --> 00:28:16,799
at the end you should take a few seconds

773
00:28:16,799 --> 00:28:17,760
again

774
00:28:17,760 --> 00:28:20,320
we'll see that there will be a dump of

775
00:28:20,320 --> 00:28:21,310
this uh

776
00:28:21,310 --> 00:28:24,000
[Music]

777
00:28:24,000 --> 00:28:26,000
of this okay

778
00:28:26,000 --> 00:28:27,679
of this little alloc here you can see

779
00:28:27,679 --> 00:28:29,360
that it has been dumped

780
00:28:29,360 --> 00:28:30,399
in a file

781
00:28:30,399 --> 00:28:33,120
then i show up the file okay great this

782
00:28:33,120 --> 00:28:35,760
looks like some

783
00:28:35,760 --> 00:28:36,960
specific

784
00:28:36,960 --> 00:28:38,159
code

785
00:28:38,159 --> 00:28:40,399
and okay

786
00:28:40,399 --> 00:28:42,960
let's now try to summarize and sum up

787
00:28:42,960 --> 00:28:45,679
everything we saw that there was a

788
00:28:45,679 --> 00:28:48,799
ntdl mapping

789
00:28:48,799 --> 00:28:50,720
of the file it is it has been loaded in

790
00:28:50,720 --> 00:28:52,640
memory then there was a look for a

791
00:28:52,640 --> 00:28:54,559
specific function call

792
00:28:54,559 --> 00:28:55,520
and then

793
00:28:55,520 --> 00:28:57,279
that result has been taken so let's

794
00:28:57,279 --> 00:28:59,600
infer what is it i'm assuming that this

795
00:28:59,600 --> 00:29:01,760
is in sometimes getting the code of the

796
00:29:01,760 --> 00:29:03,679
antivirtual unlock

797
00:29:03,679 --> 00:29:06,080
function and let's see if it's true i

798
00:29:06,080 --> 00:29:07,840
can open up

799
00:29:07,840 --> 00:29:09,520
this in a pe

800
00:29:09,520 --> 00:29:13,600
pair which is a tool that allows you to

801
00:29:13,600 --> 00:29:16,000
inspect files and you can see there is

802
00:29:16,000 --> 00:29:16,799
there are

803
00:29:16,799 --> 00:29:19,919
so i open the dnt the ntdl file here as

804
00:29:19,919 --> 00:29:22,080
you can see there is an export section

805
00:29:22,080 --> 00:29:23,520
where you can see for example the end

806
00:29:23,520 --> 00:29:25,520
protect virtual memory which is the one

807
00:29:25,520 --> 00:29:27,440
the the the function call we are looking

808
00:29:27,440 --> 00:29:28,240
for

809
00:29:28,240 --> 00:29:31,039
with a function address if we step at

810
00:29:31,039 --> 00:29:32,960
this point we can see here that this is

811
00:29:32,960 --> 00:29:34,240
exactly

812
00:29:34,240 --> 00:29:36,480
the content

813
00:29:36,480 --> 00:29:38,640
of our

814
00:29:38,640 --> 00:29:42,080
dump here so that means that this part

815
00:29:42,080 --> 00:29:44,320
of the code what is is doing exactly

816
00:29:44,320 --> 00:29:46,640
this so it's getting the

817
00:29:46,640 --> 00:29:48,559
image of the file it's looking for a

818
00:29:48,559 --> 00:29:50,799
specific function and this copying the

819
00:29:50,799 --> 00:29:53,200
content of this function into memory for

820
00:29:53,200 --> 00:29:56,240
a later use why this is happening i will

821
00:29:56,240 --> 00:30:00,080
i'll tell you my my take on it

822
00:30:00,080 --> 00:30:01,360
in a while

823
00:30:01,360 --> 00:30:04,159
uh okay so let's go back

824
00:30:04,159 --> 00:30:08,679
here so um

825
00:30:09,200 --> 00:30:11,200
let's do it okay

826
00:30:11,200 --> 00:30:14,480
this is what we learned by using our

827
00:30:14,480 --> 00:30:16,799
emulation approach we saw a map view of

828
00:30:16,799 --> 00:30:17,760
file

829
00:30:17,760 --> 00:30:19,840
look for the end protect virtual memory

830
00:30:19,840 --> 00:30:21,039
the

831
00:30:21,039 --> 00:30:23,200
the get of the content of this address

832
00:30:23,200 --> 00:30:25,360
and then a virtual location what i

833
00:30:25,360 --> 00:30:26,960
assume is that

834
00:30:26,960 --> 00:30:30,080
this dll is doing a kind of evasion you

835
00:30:30,080 --> 00:30:32,640
know that edr antivirus are hooking up

836
00:30:32,640 --> 00:30:34,960
every single function or every not every

837
00:30:34,960 --> 00:30:36,320
single function but all the functions

838
00:30:36,320 --> 00:30:38,559
that can be used to interact with memory

839
00:30:38,559 --> 00:30:40,000
and for example nt protect virtual

840
00:30:40,000 --> 00:30:42,320
memory is one of them so what this dll

841
00:30:42,320 --> 00:30:45,520
is doing here is just to create a fresh

842
00:30:45,520 --> 00:30:47,360
copy and look at one

843
00:30:47,360 --> 00:30:49,919
in memory of this particular function

844
00:30:49,919 --> 00:30:51,919
because in that case you can use it

845
00:30:51,919 --> 00:30:52,799
later

846
00:30:52,799 --> 00:30:55,600
without being intercepted by evr so this

847
00:30:55,600 --> 00:30:56,559
is a

848
00:30:56,559 --> 00:30:59,679
pretty common way to evade evr and

849
00:30:59,679 --> 00:31:02,480
antivirus protection as you can so as

850
00:31:02,480 --> 00:31:03,840
you can see that

851
00:31:03,840 --> 00:31:05,279
we we really

852
00:31:05,279 --> 00:31:08,159
get they are pretty fast even if it was

853
00:31:08,159 --> 00:31:10,640
obfuscated and so on because we

854
00:31:10,640 --> 00:31:13,200
leveraged some of the power that

855
00:31:13,200 --> 00:31:15,519
emulation can give us

856
00:31:15,519 --> 00:31:17,120
so let me jump to the conclusion it was

857
00:31:17,120 --> 00:31:18,720
all very fast because we don't have so

858
00:31:18,720 --> 00:31:19,760
much time

859
00:31:19,760 --> 00:31:21,360
uh then there is there are a lot of

860
00:31:21,360 --> 00:31:24,080
other things you can look into the

861
00:31:24,080 --> 00:31:25,760
this file and

862
00:31:25,760 --> 00:31:27,840
a lot of other things you can learn by

863
00:31:27,840 --> 00:31:29,840
using emulator and so on

864
00:31:29,840 --> 00:31:32,320
so let me just conclude what what i want

865
00:31:32,320 --> 00:31:34,080
to to to tell you today what we're going

866
00:31:34,080 --> 00:31:37,200
to do today uh is that emulation gives

867
00:31:37,200 --> 00:31:38,799
you more control on what is the

868
00:31:38,799 --> 00:31:41,519
execution flow as we saw we can really

869
00:31:41,519 --> 00:31:43,519
interact with the code itself with

870
00:31:43,519 --> 00:31:45,360
emulation you can also reach branches

871
00:31:45,360 --> 00:31:47,519
that

872
00:31:47,519 --> 00:31:49,919
you cannot reach another way because i

873
00:31:49,919 --> 00:31:51,760
just printed the content of a register

874
00:31:51,760 --> 00:31:54,480
with my code but i can also modify it so

875
00:31:54,480 --> 00:31:57,279
if i can modify the aix i can instruct

876
00:31:57,279 --> 00:31:59,120
the code to go in another branch which

877
00:31:59,120 --> 00:32:01,200
has not been taken for several reasons

878
00:32:01,200 --> 00:32:03,279
so this is very powerful way to use

879
00:32:03,279 --> 00:32:05,679
emulation and what i would like to tell

880
00:32:05,679 --> 00:32:08,080
you today is that is that that emulation

881
00:32:08,080 --> 00:32:10,880
is not good for every kind of analysis

882
00:32:10,880 --> 00:32:12,000
because

883
00:32:12,000 --> 00:32:15,600
sometimes it takes time sometimes uh

884
00:32:15,600 --> 00:32:17,679
you need to look into very detailed part

885
00:32:17,679 --> 00:32:20,080
of the code and so on but it's very

886
00:32:20,080 --> 00:32:21,840
useful when you have very simple

887
00:32:21,840 --> 00:32:24,320
situation like the first one so you had

888
00:32:24,320 --> 00:32:25,919
a very simple code frame rate so it was

889
00:32:25,919 --> 00:32:27,279
a matter of minutes to understand what

890
00:32:27,279 --> 00:32:29,679
he's doing or a very complex situation

891
00:32:29,679 --> 00:32:31,440
like the last one

892
00:32:31,440 --> 00:32:33,279
where you want to understand every

893
00:32:33,279 --> 00:32:34,480
single

894
00:32:34,480 --> 00:32:38,159
bit of what the the dll is doing i think

895
00:32:38,159 --> 00:32:40,720
that it's a very good things to having

896
00:32:40,720 --> 00:32:43,200
our belts as a malware analyst and so on

897
00:32:43,200 --> 00:32:44,960
so uh

898
00:32:44,960 --> 00:32:46,399
then i'm not saying that this is

899
00:32:46,399 --> 00:32:48,080
replacing boxing so boxing has a lot of

900
00:32:48,080 --> 00:32:50,960
other user usage which are very good for

901
00:32:50,960 --> 00:32:53,519
uh a lot of things but this is i think

902
00:32:53,519 --> 00:32:55,200
an additional way to approach a malware

903
00:32:55,200 --> 00:32:57,360
analysis that can give you something

904
00:32:57,360 --> 00:33:00,000
more and give you more insights on what

905
00:33:00,000 --> 00:33:02,320
software is doing

906
00:33:02,320 --> 00:33:04,000
i think that's all

907
00:33:04,000 --> 00:33:05,600
these are the credits

908
00:33:05,600 --> 00:33:06,880
so

909
00:33:06,880 --> 00:33:09,919
there is also a site here where i placed

910
00:33:09,919 --> 00:33:11,919
all the files we

911
00:33:11,919 --> 00:33:13,200
used today

912
00:33:13,200 --> 00:33:13,990
and

913
00:33:13,990 --> 00:33:15,440
[Music]

914
00:33:15,440 --> 00:33:18,080
sorry and

915
00:33:18,880 --> 00:33:20,240
you can get them

916
00:33:20,240 --> 00:33:22,960
here so let me add my github and also

917
00:33:22,960 --> 00:33:24,720
maybe sakshi will give the the

918
00:33:24,720 --> 00:33:26,240
presentation to you as well at the end

919
00:33:26,240 --> 00:33:27,440
of the

920
00:33:27,440 --> 00:33:30,320
the webinar uh okay that's all thank you

921
00:33:30,320 --> 00:33:32,399
very much and for sure if you have any

922
00:33:32,399 --> 00:33:34,240
questions i'm here

923
00:33:34,240 --> 00:33:36,320
uh thank you so much

924
00:33:36,320 --> 00:33:39,519
for this amazing informative session and

925
00:33:39,519 --> 00:33:42,320
if you guys have any questions uh please

926
00:33:42,320 --> 00:33:45,120
drop them in the chat uh option

927
00:33:45,120 --> 00:33:47,120
uh the one thing can you share the

928
00:33:47,120 --> 00:33:50,000
youtube link that you uh

929
00:33:50,000 --> 00:33:51,760
that you mentioned on the ppt i think at

930
00:33:51,760 --> 00:33:52,960
the beginning

931
00:33:52,960 --> 00:33:55,279
okay great yeah can you just add it in

932
00:33:55,279 --> 00:33:57,919
the chat box because uh

933
00:33:57,919 --> 00:34:00,320
we tried using that link but it wasn't

934
00:34:00,320 --> 00:34:02,159
uh coming up

935
00:34:02,159 --> 00:34:06,600
okay okay good so thanks

936
00:34:07,679 --> 00:34:09,918
okay

937
00:34:09,918 --> 00:34:12,800
uh to then let me just read out the

938
00:34:12,800 --> 00:34:16,560
questions uh the first is can that dot

939
00:34:16,560 --> 00:34:21,119
dln file be shared yeah they are on the

940
00:34:21,119 --> 00:34:24,800
on the repository i shared at the end so

941
00:34:24,800 --> 00:34:26,399
yes absolutely

942
00:34:26,399 --> 00:34:30,480
uh how uh teb and pep structures are

943
00:34:30,480 --> 00:34:31,839
emulated

944
00:34:31,839 --> 00:34:34,159
okay yes this is this is done by the

945
00:34:34,159 --> 00:34:37,280
speakeasy emulator uh they are creating

946
00:34:37,280 --> 00:34:40,079
with python python code fake entries for

947
00:34:40,079 --> 00:34:42,320
tab and peb and everything else

948
00:34:42,320 --> 00:34:45,839
needed to emulate things consider that

949
00:34:45,839 --> 00:34:48,320
this is emulated sometimes happens that

950
00:34:48,320 --> 00:34:50,879
things are missing uh and these have for

951
00:34:50,879 --> 00:34:53,839
example for this kind of emulation

952
00:34:53,839 --> 00:34:54,879
i did a

953
00:34:54,879 --> 00:34:58,000
i did job on my uh on my tool on respite

954
00:34:58,000 --> 00:35:00,400
and on the upstream tools i used because

955
00:35:00,400 --> 00:35:02,480
i'm based on unicorn and speakeasy and

956
00:35:02,480 --> 00:35:04,320
sometimes you need to open pull requests

957
00:35:04,320 --> 00:35:05,920
to that tools to

958
00:35:05,920 --> 00:35:07,760
maybe fix things or add things that are

959
00:35:07,760 --> 00:35:09,599
missing so but everything gets simulated

960
00:35:09,599 --> 00:35:12,240
with python code in this case

961
00:35:12,240 --> 00:35:13,680
uh

962
00:35:13,680 --> 00:35:15,599
if exception happens during the

963
00:35:15,599 --> 00:35:18,320
emulation will key user exception

964
00:35:18,320 --> 00:35:21,040
dispatcher be called

965
00:35:21,040 --> 00:35:22,480
okay yes there are two

966
00:35:22,480 --> 00:35:26,079
exceptions there is an exception handler

967
00:35:26,079 --> 00:35:28,800
dtin in the spke simulator and you can

968
00:35:28,800 --> 00:35:31,280
use it or you can also intercept the

969
00:35:31,280 --> 00:35:33,520
inside the exception with your own code

970
00:35:33,520 --> 00:35:36,240
by modifying it

971
00:35:36,240 --> 00:35:39,839
okay and i think we have a last question

972
00:35:39,839 --> 00:35:43,200
uh how the emulation can be speeded up

973
00:35:43,200 --> 00:35:45,200
because you're saying short programs

974
00:35:45,200 --> 00:35:47,440
execute for four to five minutes

975
00:35:47,440 --> 00:35:50,560
which are the blog main bottlenecks and

976
00:35:50,560 --> 00:35:52,480
can it be improved

977
00:35:52,480 --> 00:35:54,800
uh yes all okay um

978
00:35:54,800 --> 00:35:56,880
okay no short programs like shell code

979
00:35:56,880 --> 00:35:58,400
and so on it's executed in seconds that

980
00:35:58,400 --> 00:36:00,079
we saw it before at the beginning with

981
00:36:00,079 --> 00:36:02,560
the simplest

982
00:36:02,560 --> 00:36:05,440
simple code executed in very few seconds

983
00:36:05,440 --> 00:36:08,160
the problem happens more with

984
00:36:08,160 --> 00:36:11,040
complex loops what what happens

985
00:36:11,040 --> 00:36:12,880
sometimes is that for example it looks

986
00:36:12,880 --> 00:36:15,599
like the one we saw before the one

987
00:36:15,599 --> 00:36:18,480
enumerating all the api in the dll is

988
00:36:18,480 --> 00:36:20,400
taking it's taking some time

989
00:36:20,400 --> 00:36:21,440
um

990
00:36:21,440 --> 00:36:23,040
this is a

991
00:36:23,040 --> 00:36:25,520
kind of bottleneck of emulation because

992
00:36:25,520 --> 00:36:27,680
you have to consider that

993
00:36:27,680 --> 00:36:30,240
every single call is emulated with an

994
00:36:30,240 --> 00:36:32,960
engine uh behind which can be for

995
00:36:32,960 --> 00:36:35,680
example a python engine or something

996
00:36:35,680 --> 00:36:39,280
like that so with resploit i implement

997
00:36:39,280 --> 00:36:42,000
since with respect i'm also adding

998
00:36:42,000 --> 00:36:44,320
several other hooks i implemented that

999
00:36:44,320 --> 00:36:47,040
that option dash you to remove them when

1000
00:36:47,040 --> 00:36:50,640
you have to go faster and you have to

1001
00:36:50,640 --> 00:36:51,920
speed it up

1002
00:36:51,920 --> 00:36:54,800
then um

1003
00:36:54,800 --> 00:36:57,359
there is in any case a bottleneck

1004
00:36:57,359 --> 00:36:59,359
in this part of the

1005
00:36:59,359 --> 00:37:00,800
code and that's

1006
00:37:00,800 --> 00:37:02,160
something you have to take into

1007
00:37:02,160 --> 00:37:04,079
consideration because for sure emulation

1008
00:37:04,079 --> 00:37:06,480
is lower than having a sandbox

1009
00:37:06,480 --> 00:37:09,359
and it's uh probably 10 times lower if

1010
00:37:09,359 --> 00:37:10,640
if not more

1011
00:37:10,640 --> 00:37:14,160
but that's the price to do to to pay for

1012
00:37:14,160 --> 00:37:16,480
getting the possibility to interact with

1013
00:37:16,480 --> 00:37:19,119
the code uh probably something can be

1014
00:37:19,119 --> 00:37:20,720
improved for sure

1015
00:37:20,720 --> 00:37:22,800
but you cannot reach for sure the

1016
00:37:22,800 --> 00:37:24,960
performances that you get in a sandbox

1017
00:37:24,960 --> 00:37:27,599
that's for sure

1018
00:37:27,599 --> 00:37:29,599
all right i think that was the last

1019
00:37:29,599 --> 00:37:33,280
question um is it possible for you to uh

1020
00:37:33,280 --> 00:37:35,920
share the github link uh in the chat box

1021
00:37:35,920 --> 00:37:38,560
as well and i will share it over the

1022
00:37:38,560 --> 00:37:40,960
feedback mail so all of you will be

1023
00:37:40,960 --> 00:37:42,960
getting a feedback email

1024
00:37:42,960 --> 00:37:46,240
uh i will add that link uh over there as

1025
00:37:46,240 --> 00:37:47,599
well

1026
00:37:47,599 --> 00:37:50,400
sure let me just do it

1027
00:37:50,400 --> 00:37:52,560
okay this is the link for well all the

1028
00:37:52,560 --> 00:37:54,640
material has been placed uh so you can

1029
00:37:54,640 --> 00:37:57,200
get the dlls and files and so on and

1030
00:37:57,200 --> 00:37:59,280
okay remember that if you want to open

1031
00:37:59,280 --> 00:38:01,839
uh to use it or you want to get in touch

1032
00:38:01,839 --> 00:38:03,599
with me you're free to do it open an

1033
00:38:03,599 --> 00:38:05,680
issue get in touch with me on

1034
00:38:05,680 --> 00:38:07,520
twitter as you prefer

1035
00:38:07,520 --> 00:38:09,839
i will be very happy to work with you in

1036
00:38:09,839 --> 00:38:11,680
improving things or just discussing

1037
00:38:11,680 --> 00:38:12,880
things as you

1038
00:38:12,880 --> 00:38:15,119
as you want okay

1039
00:38:15,119 --> 00:38:18,160
awesome uh thank you to there once again

1040
00:38:18,160 --> 00:38:20,160
thank you for joining bye

1041
00:38:20,160 --> 00:38:22,799
bye thank you

