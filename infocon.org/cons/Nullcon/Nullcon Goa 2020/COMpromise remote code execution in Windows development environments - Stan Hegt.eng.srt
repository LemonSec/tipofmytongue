1
00:00:03,370 --> 00:00:09,530
so I everyone it's great to have all of

2
00:00:06,560 --> 00:00:11,389
you here it's great that you're actually

3
00:00:09,530 --> 00:00:13,070
having me it's my first time in Goa and

4
00:00:11,389 --> 00:00:15,170
I really appreciate the hospitality

5
00:00:13,070 --> 00:00:17,119
thanks for that as you might have

6
00:00:15,170 --> 00:00:19,420
noticed I shortened the title of my talk

7
00:00:17,119 --> 00:00:22,100
a bit on my slide so that it could fit

8
00:00:19,420 --> 00:00:24,320
but we're talking about Windows

9
00:00:22,100 --> 00:00:26,689
development environments how to attack

10
00:00:24,320 --> 00:00:30,619
them with a lot of focus on calm the

11
00:00:26,689 --> 00:00:33,140
component object model this will be a

12
00:00:30,619 --> 00:00:35,570
talk from a read English perspective and

13
00:00:33,140 --> 00:00:40,430
I'll explain a bit about that later in

14
00:00:35,570 --> 00:00:42,320
my talk about me really short I work at

15
00:00:40,430 --> 00:00:44,090
this boutique firm in the Netherlands we

16
00:00:42,320 --> 00:00:46,820
do some really hardcore red teaming and

17
00:00:44,090 --> 00:00:50,630
an attack simulation most of my previous

18
00:00:46,820 --> 00:00:52,760
research is on ms-office you might know

19
00:00:50,630 --> 00:00:55,340
if a clippie - which i've written for

20
00:00:52,760 --> 00:00:57,589
vba stomping but today we're not going

21
00:00:55,340 --> 00:01:00,260
to touch upon Emma's office it will be

22
00:00:57,590 --> 00:01:04,820
completely different so what are we

23
00:01:00,260 --> 00:01:09,110
going to do today today we will learn

24
00:01:04,819 --> 00:01:10,699
that if you work with a integrated

25
00:01:09,110 --> 00:01:13,550
development environments like Visual

26
00:01:10,700 --> 00:01:15,890
Studio that's even compiling or reverse

27
00:01:13,550 --> 00:01:18,590
engineering or only just viewing code

28
00:01:15,890 --> 00:01:21,430
just only opening a project can be just

29
00:01:18,590 --> 00:01:23,450
as dangerous as running untrusted code

30
00:01:21,430 --> 00:01:26,330
which means that we're going to dive

31
00:01:23,450 --> 00:01:28,430
into Visual Studio come type libraries

32
00:01:26,330 --> 00:01:30,980
monikers and if we have some time left

33
00:01:28,430 --> 00:01:36,320
there's a bonus around mark of the web

34
00:01:30,980 --> 00:01:39,830
which is more or less related to this so

35
00:01:36,320 --> 00:01:43,070
how did I get into this research who if

36
00:01:39,830 --> 00:01:45,890
you are using Visual Studio on a regular

37
00:01:43,070 --> 00:01:48,408
basis can I see some hands please okay

38
00:01:45,890 --> 00:01:51,800
it's quite a lot of you then probably

39
00:01:48,409 --> 00:01:54,380
you have seen this warning message when

40
00:01:51,800 --> 00:01:56,720
you open a project at least once or

41
00:01:54,380 --> 00:01:58,820
twice I regularly get to see this

42
00:01:56,720 --> 00:02:01,039
because I used to download a lot of

43
00:01:58,820 --> 00:02:03,110
stuff from get up and just work from

44
00:02:01,040 --> 00:02:05,240
Network shares and whenever you do that

45
00:02:03,110 --> 00:02:07,549
you get this warning message you should

46
00:02:05,240 --> 00:02:11,720
only open projects from a trustworthy

47
00:02:07,549 --> 00:02:14,720
source okay and for quite some time I

48
00:02:11,720 --> 00:02:16,849
was like okay

49
00:02:14,720 --> 00:02:21,260
why but then I started to dig into the

50
00:02:16,849 --> 00:02:24,440
security message and I try to digest it

51
00:02:21,260 --> 00:02:26,780
and it sells well if it's not fully

52
00:02:24,440 --> 00:02:29,569
trusted then it could present a security

53
00:02:26,780 --> 00:02:30,950
risk by executing custom build steps

54
00:02:29,569 --> 00:02:33,440
when I open the Microsoft Visual Studio

55
00:02:30,950 --> 00:02:35,238
and actually think that the text is a

56
00:02:33,440 --> 00:02:37,340
little bit misleading especially because

57
00:02:35,239 --> 00:02:39,019
of the word build steps because you

58
00:02:37,340 --> 00:02:40,970
might be thinking that this is just upon

59
00:02:39,019 --> 00:02:42,470
building a project that it can be

60
00:02:40,970 --> 00:02:45,799
dangerous but it turns out that there is

61
00:02:42,470 --> 00:02:47,359
much more happening under the hood of a

62
00:02:45,799 --> 00:02:48,980
integrated development environment like

63
00:02:47,360 --> 00:02:53,060
Visual Studio than I was initially

64
00:02:48,980 --> 00:02:56,119
thinking so today we're going to find

65
00:02:53,060 --> 00:02:59,299
out what this message actually means and

66
00:02:56,120 --> 00:03:01,970
what the attack surface is of Visual

67
00:02:59,299 --> 00:03:04,150
Studio from a readiness perspective why

68
00:03:01,970 --> 00:03:06,410
do we even want to know that well simply

69
00:03:04,150 --> 00:03:09,470
if we're trying to get an initial

70
00:03:06,410 --> 00:03:12,319
foothold into a network and we want to

71
00:03:09,470 --> 00:03:14,000
target a developer then a developer was

72
00:03:12,319 --> 00:03:16,339
a little bit technically savvy then

73
00:03:14,000 --> 00:03:20,030
probably your go-to mechanisms like a

74
00:03:16,340 --> 00:03:22,190
mark macro in a malicious documents or

75
00:03:20,030 --> 00:03:24,859
an HD a file that that doesn't really

76
00:03:22,190 --> 00:03:26,840
work with developers so we're going to

77
00:03:24,859 --> 00:03:28,609
developers with their with their own

78
00:03:26,840 --> 00:03:32,450
tools with their own weapons which is

79
00:03:28,609 --> 00:03:34,370
Visual Studio so enough of the

80
00:03:32,450 --> 00:03:37,488
introduction we are going down the

81
00:03:34,370 --> 00:03:42,440
rabbit hole and this rabbit hole it

82
00:03:37,489 --> 00:03:45,139
started in 2009 there was this great

83
00:03:42,440 --> 00:03:47,269
security researcher from Hong Kong yung

84
00:03:45,139 --> 00:03:52,959
you known by his Twitter handle tom

85
00:03:47,269 --> 00:03:55,549
keeper and he posted in Chinese a

86
00:03:52,959 --> 00:03:58,310
message which code which was more or

87
00:03:55,549 --> 00:04:00,139
less like this on a forum and he

88
00:03:58,310 --> 00:04:03,049
explained that combining this stuff is

89
00:04:00,139 --> 00:04:05,269
really dangerous it's not about running

90
00:04:03,049 --> 00:04:07,730
this code running this code is just fine

91
00:04:05,269 --> 00:04:09,349
it will just prints hello world and do

92
00:04:07,730 --> 00:04:11,388
nothing more net but compiling this code

93
00:04:09,349 --> 00:04:13,040
is dangerous and I want you to take a

94
00:04:11,389 --> 00:04:14,720
few seconds to have a look at this code

95
00:04:13,040 --> 00:04:17,478
and figure out where it is

96
00:04:14,720 --> 00:04:19,910
well since it's not that complicated of

97
00:04:17,478 --> 00:04:22,460
course it must be in the import

98
00:04:19,910 --> 00:04:25,130
statement so the import statement over

99
00:04:22,460 --> 00:04:27,409
here I'm importing some file I'll

100
00:04:25,130 --> 00:04:29,510
explain what it is in a second

101
00:04:27,410 --> 00:04:31,790
in this case from a local directory but

102
00:04:29,510 --> 00:04:33,380
you can also host it on a UNC path or it

103
00:04:31,790 --> 00:04:39,010
could be a web theft or whatever you

104
00:04:33,380 --> 00:04:42,560
want to host it so what is this this

105
00:04:39,010 --> 00:04:45,530
import preprocessor directive that that

106
00:04:42,560 --> 00:04:48,320
they are fused here let's go and have a

107
00:04:45,530 --> 00:04:49,909
look at the documentation this is what

108
00:04:48,320 --> 00:04:53,030
Microsoft documentation says on the

109
00:04:49,910 --> 00:04:55,010
import directive it says it is used to

110
00:04:53,030 --> 00:04:57,049
incorporate information from a type

111
00:04:55,010 --> 00:04:59,480
library and this type library is then

112
00:04:57,050 --> 00:05:02,780
converted into C++ classes describing

113
00:04:59,480 --> 00:05:04,730
comm interfaces if you're not that

114
00:05:02,780 --> 00:05:08,960
familiar with comm and type libraries

115
00:05:04,730 --> 00:05:12,110
you might really be thinking what but

116
00:05:08,960 --> 00:05:14,479
basically when the microsoft c++

117
00:05:12,110 --> 00:05:18,290
compiler sees an import directive it

118
00:05:14,480 --> 00:05:20,270
will call load pilot and I see some of

119
00:05:18,290 --> 00:05:21,980
you who might be familiar with load type

120
00:05:20,270 --> 00:05:25,700
type and others are looking like what

121
00:05:21,980 --> 00:05:28,160
loop tight-lip so before going to more

122
00:05:25,700 --> 00:05:30,469
details let's do a step back and let's

123
00:05:28,160 --> 00:05:34,520
start to have a look at what is load

124
00:05:30,470 --> 00:05:36,470
type label to understand type libraries

125
00:05:34,520 --> 00:05:39,289
and the function used for loading type

126
00:05:36,470 --> 00:05:42,200
libraries which is low type lib we need

127
00:05:39,290 --> 00:05:44,960
some basics around comm and this is not

128
00:05:42,200 --> 00:05:46,789
going to be a beginners presentation on

129
00:05:44,960 --> 00:05:49,010
uncom but I do need to introduce some

130
00:05:46,790 --> 00:05:51,760
basics for you to understand the rest of

131
00:05:49,010 --> 00:05:55,760
the story so the component object model

132
00:05:51,760 --> 00:05:58,490
the whole idea is that it allows you to

133
00:05:55,760 --> 00:06:00,890
extract implementations for components

134
00:05:58,490 --> 00:06:03,470
that might be different that might be

135
00:06:00,890 --> 00:06:06,950
written in different languages like C++

136
00:06:03,470 --> 00:06:10,220
C sharp VB Java or whatever is there so

137
00:06:06,950 --> 00:06:13,280
you have two components or or a one

138
00:06:10,220 --> 00:06:15,590
client using a component and that client

139
00:06:13,280 --> 00:06:18,650
that--what's use that component it wants

140
00:06:15,590 --> 00:06:21,890
to call methods on it and what methods

141
00:06:18,650 --> 00:06:24,950
income interfaces are used to abstract

142
00:06:21,890 --> 00:06:31,430
from the implementation of a specific

143
00:06:24,950 --> 00:06:33,320
method how does this work in memory in

144
00:06:31,430 --> 00:06:36,470
memory it works with a concept called

145
00:06:33,320 --> 00:06:39,020
virtual tables or fee tables in short if

146
00:06:36,470 --> 00:06:40,700
you're a C++ programmer you are more

147
00:06:39,020 --> 00:06:44,870
than familiar with

148
00:06:40,700 --> 00:06:46,490
with virtual tables but how does it work

149
00:06:44,870 --> 00:06:48,860
so if you have code and you have a

150
00:06:46,490 --> 00:06:52,460
pointer to a object in your chrome

151
00:06:48,860 --> 00:06:56,330
client then the pointer to that com

152
00:06:52,460 --> 00:06:58,460
objects' it just points to a block of

153
00:06:56,330 --> 00:07:01,159
memory and this block of memory it holds

154
00:06:58,460 --> 00:07:04,219
some private object data reference

155
00:07:01,160 --> 00:07:06,320
counters and such but the first thing in

156
00:07:04,220 --> 00:07:08,750
that objects is another pointer to a V

157
00:07:06,320 --> 00:07:11,170
table and that fee table somewhere in

158
00:07:08,750 --> 00:07:14,380
memory is just a table of pointers again

159
00:07:11,170 --> 00:07:16,390
which points to the actual

160
00:07:14,380 --> 00:07:19,610
implementations of those functions and

161
00:07:16,390 --> 00:07:22,010
every com object-- in this interface it

162
00:07:19,610 --> 00:07:24,530
is always derived from I unknown which

163
00:07:22,010 --> 00:07:26,240
is like the mother of all common

164
00:07:24,530 --> 00:07:28,400
interfaces which means that the three

165
00:07:26,240 --> 00:07:30,440
methods of Inon query interface at ref

166
00:07:28,400 --> 00:07:32,599
and release are always there and then

167
00:07:30,440 --> 00:07:37,690
there are other methods depending on

168
00:07:32,600 --> 00:07:42,650
what the calm object is so in summary

169
00:07:37,690 --> 00:07:45,230
calm objects interfaces but then the big

170
00:07:42,650 --> 00:07:48,440
question is if you have a calm client

171
00:07:45,230 --> 00:07:50,510
and you want to call methods on a

172
00:07:48,440 --> 00:07:53,330
certain object which offers a certain

173
00:07:50,510 --> 00:07:56,690
interface then how does the calm client

174
00:07:53,330 --> 00:07:59,000
know what the interface looks like there

175
00:07:56,690 --> 00:08:01,370
is basically two directions that you can

176
00:07:59,000 --> 00:08:05,800
take here there's the eye dispatch

177
00:08:01,370 --> 00:08:08,630
interface which is a standard interface

178
00:08:05,800 --> 00:08:10,760
which has some methods which allow you

179
00:08:08,630 --> 00:08:12,800
to query what kind of methods you can

180
00:08:10,760 --> 00:08:15,440
call and there's a special method which

181
00:08:12,800 --> 00:08:18,530
allows you to call methods via a

182
00:08:15,440 --> 00:08:24,230
dispatch table if you have ever written

183
00:08:18,530 --> 00:08:27,500
any JavaScript VB scripts or Phoebe a

184
00:08:24,230 --> 00:08:31,150
macros then you will have experience

185
00:08:27,500 --> 00:08:34,880
with this eye dispatch interface because

186
00:08:31,150 --> 00:08:37,880
anytime when you declare an object just

187
00:08:34,880 --> 00:08:39,830
as them as objects and not as a specific

188
00:08:37,880 --> 00:08:42,200
interface you will be using the ideas

189
00:08:39,830 --> 00:08:45,800
batch interface under the hood we call

190
00:08:42,200 --> 00:08:47,330
it late binding official basically this

191
00:08:45,800 --> 00:08:48,979
is all nice but it really causes

192
00:08:47,330 --> 00:08:50,180
significant overhead and performance

193
00:08:48,980 --> 00:08:52,220
penalties because we're putting a

194
00:08:50,180 --> 00:08:53,290
methods in between for calling other

195
00:08:52,220 --> 00:08:55,029
methods it's

196
00:08:53,290 --> 00:08:57,579
complicated performance is really

197
00:08:55,029 --> 00:09:01,480
terrible so especially if you want to

198
00:08:57,579 --> 00:09:04,359
have really performing code you need to

199
00:09:01,480 --> 00:09:07,240
have the interface definitions either at

200
00:09:04,360 --> 00:09:10,810
compile time or later when when the

201
00:09:07,240 --> 00:09:13,509
program is running and for C++ it's kind

202
00:09:10,810 --> 00:09:16,319
of easy because the whole concept of fie

203
00:09:13,509 --> 00:09:18,940
tables basically maps to how C++ works

204
00:09:16,319 --> 00:09:19,990
if you know abstract classes and pure

205
00:09:18,940 --> 00:09:22,630
virtual functions

206
00:09:19,990 --> 00:09:24,699
well most C++ compilers will simply

207
00:09:22,630 --> 00:09:27,660
directly compile it into V tables which

208
00:09:24,699 --> 00:09:30,579
makes it completely compatible with comm

209
00:09:27,660 --> 00:09:33,779
but there is no such concept in other

210
00:09:30,579 --> 00:09:38,349
languages that have to support comm like

211
00:09:33,779 --> 00:09:41,790
Java or C sharp or VB again so what is

212
00:09:38,350 --> 00:09:45,519
the solution there it is type libraries

213
00:09:41,790 --> 00:09:48,250
type libraries what are they they are a

214
00:09:45,519 --> 00:09:51,730
proprietary binary file format from

215
00:09:48,250 --> 00:09:53,709
Microsoft and years and years ago there

216
00:09:51,730 --> 00:09:55,149
has been lots of work into reverse

217
00:09:53,709 --> 00:09:57,369
engineering this file format which is

218
00:09:55,149 --> 00:10:01,540
mostly based in bore reactor with code

219
00:09:57,370 --> 00:10:03,519
base you can find the reverse engineer

220
00:10:01,540 --> 00:10:06,219
it's a type of specification right here

221
00:10:03,519 --> 00:10:08,350
which is really good but what you

222
00:10:06,220 --> 00:10:11,290
normally do is you don't reverse

223
00:10:08,350 --> 00:10:14,050
engineer it you just create an interface

224
00:10:11,290 --> 00:10:15,219
in interface definition language of

225
00:10:14,050 --> 00:10:17,469
which I'll show you an example in the

226
00:10:15,220 --> 00:10:20,260
next slide and you compile that with the

227
00:10:17,470 --> 00:10:21,910
Microsoft IDL compiler middle of the exe

228
00:10:20,260 --> 00:10:23,920
and you just compile your interface

229
00:10:21,910 --> 00:10:26,949
definition in plain text to this

230
00:10:23,920 --> 00:10:29,019
proprietary binary file format and this

231
00:10:26,949 --> 00:10:31,540
proprietary binary file format it can

232
00:10:29,019 --> 00:10:33,819
either be a separate file which usually

233
00:10:31,540 --> 00:10:36,130
has detailed the extension or you can

234
00:10:33,819 --> 00:10:39,310
embed it as a resource in an executable

235
00:10:36,130 --> 00:10:44,680
or in the dll so what does the idea look

236
00:10:39,310 --> 00:10:47,819
like it's like this in this case we are

237
00:10:44,680 --> 00:10:52,000
defining a interface item which is

238
00:10:47,819 --> 00:10:54,519
derived from I unknown and we have a

239
00:10:52,000 --> 00:10:57,009
library statement here which is the

240
00:10:54,519 --> 00:11:01,560
basic keyword for introducing a a type

241
00:10:57,009 --> 00:11:04,050
library it imports the

242
00:11:01,560 --> 00:11:07,290
the most important type library provided

243
00:11:04,050 --> 00:11:09,060
by my comb itself and then we identify

244
00:11:07,290 --> 00:11:10,860
that we have a econ class which is

245
00:11:09,060 --> 00:11:14,250
inside comm it's just an example taken

246
00:11:10,860 --> 00:11:16,740
from from this website which supports

247
00:11:14,250 --> 00:11:20,280
the interface Isum and what you then do

248
00:11:16,740 --> 00:11:22,740
is you compile this this text with the

249
00:11:20,280 --> 00:11:26,760
middle compiler to a type library and

250
00:11:22,740 --> 00:11:29,030
you end up with a binary file so this is

251
00:11:26,760 --> 00:11:32,010
the file opens in the hex editor and

252
00:11:29,030 --> 00:11:33,870
with a tool called so this type laid out

253
00:11:32,010 --> 00:11:35,460
the exe which is a very old tool but

254
00:11:33,870 --> 00:11:38,610
it's still very useful you can actually

255
00:11:35,460 --> 00:11:44,010
parse this file format which has been

256
00:11:38,610 --> 00:11:46,710
reverse-engineered so that is all

257
00:11:44,010 --> 00:11:48,439
genuine use of type libraries but it

258
00:11:46,710 --> 00:11:54,090
turns out that type libraries can be

259
00:11:48,440 --> 00:11:57,860
malicious and again this is the work of

260
00:11:54,090 --> 00:11:59,760
young you tomb keeper and he actually

261
00:11:57,860 --> 00:12:01,860
demonstrated that there is this

262
00:11:59,760 --> 00:12:07,800
undocumented field in type libraries

263
00:12:01,860 --> 00:12:12,360
which is called reserve 7 and this field

264
00:12:07,800 --> 00:12:17,099
is used as a offset for av table which

265
00:12:12,360 --> 00:12:19,380
is used in the comb API and remember a

266
00:12:17,100 --> 00:12:22,560
couple of slides ago V tables are just

267
00:12:19,380 --> 00:12:24,990
pointers to functions so if we can mess

268
00:12:22,560 --> 00:12:27,329
with a V table we can probably mess with

269
00:12:24,990 --> 00:12:30,510
program execution flow and that is

270
00:12:27,330 --> 00:12:32,490
exactly what young you demonstrated in

271
00:12:30,510 --> 00:12:36,120
2009 and he gave a presentation at

272
00:12:32,490 --> 00:12:38,520
gansta quest in 2015 and Microsoft's

273
00:12:36,120 --> 00:12:42,950
response was pretty easy back in 2000

274
00:12:38,520 --> 00:12:42,949
Isis and we're not going to to fix this

275
00:12:43,010 --> 00:12:49,200
so what does this look like in practice

276
00:12:45,440 --> 00:12:50,010
if you if you look at what's happening

277
00:12:49,200 --> 00:12:52,230
in a debugger

278
00:12:50,010 --> 00:12:55,860
what you can see is that we have control

279
00:12:52,230 --> 00:12:58,680
over the e6 register through that

280
00:12:55,860 --> 00:13:01,440
reserved 7 field and then somewhere

281
00:12:58,680 --> 00:13:03,660
there is a call which we can influence

282
00:13:01,440 --> 00:13:06,090
through that register so we can

283
00:13:03,660 --> 00:13:08,370
influence a pointer to a memory address

284
00:13:06,090 --> 00:13:11,600
which is used to do that call so in

285
00:13:08,370 --> 00:13:14,560
theory we can influence program flow but

286
00:13:11,600 --> 00:13:17,140
try and do this on a

287
00:13:14,560 --> 00:13:20,229
modern Windows 10 system with a Salar

288
00:13:17,140 --> 00:13:25,060
depth control flow guards Oh embedding

289
00:13:20,230 --> 00:13:26,560
your payload in a type library I bet

290
00:13:25,060 --> 00:13:29,020
that some of you are way more advanced

291
00:13:26,560 --> 00:13:34,029
than I am this kind of stuff but this is

292
00:13:29,020 --> 00:13:37,390
really really difficult so fortunately

293
00:13:34,029 --> 00:13:39,339
what young you didn't realize back in

294
00:13:37,390 --> 00:13:42,730
those days but what I've learned from

295
00:13:39,339 --> 00:13:45,370
work by a James for shop is that there

296
00:13:42,730 --> 00:13:48,130
is also alternative ways that we can use

297
00:13:45,370 --> 00:13:49,870
to exploit this load type like function

298
00:13:48,130 --> 00:13:53,230
unloading a type library that doesn't

299
00:13:49,870 --> 00:13:55,300
rely on memory corruption and for that

300
00:13:53,230 --> 00:13:58,779
we have to dive into the specification

301
00:13:55,300 --> 00:14:00,819
of the load tablet function somewhere in

302
00:13:58,779 --> 00:14:06,330
the Ramar service this really

303
00:14:00,820 --> 00:14:08,680
interesting paragraph which says at well

304
00:14:06,330 --> 00:14:11,890
basically if it's a standalone type

305
00:14:08,680 --> 00:14:13,810
library then we're going to to load that

306
00:14:11,890 --> 00:14:15,910
if it's a resource in a dll then we're

307
00:14:13,810 --> 00:14:18,459
going to load it as a resource but if

308
00:14:15,910 --> 00:14:22,540
the argument to load type live library

309
00:14:18,460 --> 00:14:26,170
is none of these then the file name is

310
00:14:22,540 --> 00:14:29,290
parsed into a moniker and then bound to

311
00:14:26,170 --> 00:14:30,610
the moniker this approach allows loti

312
00:14:29,290 --> 00:14:32,380
plet to be used on foreign type

313
00:14:30,610 --> 00:14:34,900
libraries including in memory type

314
00:14:32,380 --> 00:14:36,310
Larabee's and again if you're not

315
00:14:34,900 --> 00:14:37,750
familiar with calm and you've never

316
00:14:36,310 --> 00:14:41,890
heard of the word moniker you might be

317
00:14:37,750 --> 00:14:44,530
thinking like what the hell is this so

318
00:14:41,890 --> 00:14:49,420
let's dive into monikers and monikers

319
00:14:44,530 --> 00:14:53,140
you could see them as objects which use

320
00:14:49,420 --> 00:14:56,709
naming to identify and bind to other

321
00:14:53,140 --> 00:14:58,900
objects I'll make it a bit more tangible

322
00:14:56,710 --> 00:15:01,209
when I get to the rest of the slide but

323
00:14:58,900 --> 00:15:04,720
basically there's this calm API function

324
00:15:01,209 --> 00:15:08,888
in all eight 32 DLL which is

325
00:15:04,720 --> 00:15:11,319
I'm keepers displayname and you give it

326
00:15:08,889 --> 00:15:13,420
a display name and then it provides a

327
00:15:11,319 --> 00:15:15,759
pointer to an I moniker interface by

328
00:15:13,420 --> 00:15:18,819
which you can bind to an object later so

329
00:15:15,759 --> 00:15:21,490
what does this display name in spring a

330
00:15:18,819 --> 00:15:24,759
fight format look like it's a frog ID

331
00:15:21,490 --> 00:15:27,370
and then parameters and there's

332
00:15:24,759 --> 00:15:29,199
different kinds of a monarchist which

333
00:15:27,370 --> 00:15:31,930
are registered on your system if you

334
00:15:29,199 --> 00:15:36,639
just go to the registry and you go to HT

335
00:15:31,930 --> 00:15:37,930
classes route and then you then you look

336
00:15:36,639 --> 00:15:40,779
at what is registered there you will see

337
00:15:37,930 --> 00:15:43,540
prog IDs and some of these prog IDs they

338
00:15:40,779 --> 00:15:46,899
do offer the I moniker interface for

339
00:15:43,540 --> 00:15:49,389
example there is the display name which

340
00:15:46,899 --> 00:15:51,430
is class ID for the class moniker which

341
00:15:49,389 --> 00:15:53,290
means that you can reference a class

342
00:15:51,430 --> 00:15:57,849
with that there's a really advanced

343
00:15:53,290 --> 00:16:02,319
moniker for WMI as well so for example

344
00:15:57,850 --> 00:16:05,730
this moniker it will provide you a

345
00:16:02,319 --> 00:16:09,810
object which is pointing to the C Drive

346
00:16:05,730 --> 00:16:12,699
with the impersonation level turned on

347
00:16:09,810 --> 00:16:14,649
so there's all kinds of monikers but the

348
00:16:12,699 --> 00:16:17,800
moniker that we are interested in for

349
00:16:14,649 --> 00:16:20,649
successful exploitation is the script

350
00:16:17,800 --> 00:16:23,740
moniker sometimes also called the

351
00:16:20,649 --> 00:16:26,610
scriptlet moniker and if you are a bit

352
00:16:23,740 --> 00:16:29,740
into the work of Casey Smith sub T or

353
00:16:26,610 --> 00:16:32,829
Matt Nelson then you might have heard of

354
00:16:29,740 --> 00:16:34,449
the script script lab moniker before but

355
00:16:32,829 --> 00:16:36,638
what is it it is a moniker to the

356
00:16:34,449 --> 00:16:38,800
windows script component it has this

357
00:16:36,639 --> 00:16:40,899
class ID and their arse approach IDs

358
00:16:38,800 --> 00:16:42,459
script and scriptlets under which it is

359
00:16:40,899 --> 00:16:45,550
registered in a registry

360
00:16:42,459 --> 00:16:48,849
so again HT classes route then this

361
00:16:45,550 --> 00:16:50,229
class ID then you will see there that

362
00:16:48,850 --> 00:16:51,430
this is the moniker to win the script

363
00:16:50,230 --> 00:16:54,899
component and then a pro guide e

364
00:16:51,430 --> 00:17:00,579
there are both these scripts and

365
00:16:54,899 --> 00:17:02,620
scriptlets Praga DS there this is all

366
00:17:00,579 --> 00:17:05,829
implemented by this dll called scrub Gao

367
00:17:02,620 --> 00:17:08,589
dll and this scriptlets sorry this this

368
00:17:05,829 --> 00:17:11,770
moniker it takes a URL to a scriptlet as

369
00:17:08,589 --> 00:17:14,770
a parameter so what we can do is

370
00:17:11,770 --> 00:17:18,490
we can just say script and then give a

371
00:17:14,770 --> 00:17:22,329
URL or a local file or whatever and this

372
00:17:18,490 --> 00:17:25,030
moniker will then parse this it will

373
00:17:22,329 --> 00:17:27,339
load crop jato DLL and it will

374
00:17:25,030 --> 00:17:29,020
eventually run this script Lent

375
00:17:27,339 --> 00:17:30,520
if you're not with familiar with

376
00:17:29,020 --> 00:17:33,520
scriptlets scriptlets

377
00:17:30,520 --> 00:17:35,920
are a comb technology for embedding

378
00:17:33,520 --> 00:17:39,160
scripting languages eskimo objects so

379
00:17:35,920 --> 00:17:42,130
basically an SCT file in this case it

380
00:17:39,160 --> 00:17:46,150
can just contain JavaScript or VB script

381
00:17:42,130 --> 00:17:49,600
which runs outside of a sandbox which is

382
00:17:46,150 --> 00:17:52,480
exactly what we want but if we would

383
00:17:49,600 --> 00:17:56,230
hide this in our code just an import

384
00:17:52,480 --> 00:17:58,870
statement which says hashtag import as a

385
00:17:56,230 --> 00:18:00,910
preprocessor directive and then this

386
00:17:58,870 --> 00:18:03,189
line then someone auditing this code

387
00:18:00,910 --> 00:18:06,070
will immediately say this doesn't look

388
00:18:03,190 --> 00:18:09,309
really good so how can we hide our

389
00:18:06,070 --> 00:18:12,510
moniker better than that we're going to

390
00:18:09,309 --> 00:18:15,280
use nesting of type libraries for that

391
00:18:12,510 --> 00:18:17,500
so what we are going to do is we are

392
00:18:15,280 --> 00:18:20,020
going to create a type library ourselves

393
00:18:17,500 --> 00:18:21,820
and we're not going to do that with

394
00:18:20,020 --> 00:18:23,470
middle with the Mike's of compiler

395
00:18:21,820 --> 00:18:26,790
because what the Microsoft compiler does

396
00:18:23,470 --> 00:18:29,650
is basically a a console application

397
00:18:26,790 --> 00:18:30,730
around these interfaces for which the

398
00:18:29,650 --> 00:18:34,210
system provides a reference

399
00:18:30,730 --> 00:18:36,790
implementation so we have the I create

400
00:18:34,210 --> 00:18:39,280
type live - interface if you want more

401
00:18:36,790 --> 00:18:41,170
details visit this link and it's very

402
00:18:39,280 --> 00:18:43,178
well explained there but it allows us to

403
00:18:41,170 --> 00:18:46,150
create a type library programmatically

404
00:18:43,179 --> 00:18:49,030
and we will create a type library which

405
00:18:46,150 --> 00:18:51,400
references another type library which

406
00:18:49,030 --> 00:18:53,790
you can do with the add ref type info

407
00:18:51,400 --> 00:18:56,800
method from the I create type info

408
00:18:53,790 --> 00:19:00,550
interface and we're going to reference a

409
00:18:56,800 --> 00:19:03,940
very long type library name in this case

410
00:19:00,550 --> 00:19:06,340
ace repeated for from I don't know how

411
00:19:03,940 --> 00:19:09,880
many times so that we can later either

412
00:19:06,340 --> 00:19:12,490
in memory or with a hex editor we can

413
00:19:09,880 --> 00:19:15,450
change this aaaa

414
00:19:12,490 --> 00:19:19,420
with our script scriptlet moniker

415
00:19:15,450 --> 00:19:21,760
display name string when I first saw

416
00:19:19,420 --> 00:19:24,930
this trick which was in the exploit by

417
00:19:21,760 --> 00:19:27,600
James for show for CVE 2017 Oh 2:30

418
00:19:24,930 --> 00:19:30,720
thinking like wow this is real magic in

419
00:19:27,600 --> 00:19:33,409
my opinion this is one of the most

420
00:19:30,720 --> 00:19:35,610
interesting non memory corruption

421
00:19:33,410 --> 00:19:37,920
elevation of privilege test voice of the

422
00:19:35,610 --> 00:19:42,060
last couple of years so I have a look at

423
00:19:37,920 --> 00:19:44,880
it it's a fantastic chrome exploit but I

424
00:19:42,060 --> 00:19:47,520
use this methods of script monikers plus

425
00:19:44,880 --> 00:19:49,950
nesting type libraries to build upon the

426
00:19:47,520 --> 00:19:52,800
work of tomb keeper young you to

427
00:19:49,950 --> 00:19:54,780
actually exploit compiling code without

428
00:19:52,800 --> 00:19:58,260
having to do memory corruption

429
00:19:54,780 --> 00:20:03,260
exploitation so we now have basically

430
00:19:58,260 --> 00:20:06,450
all the components to to do a short demo

431
00:20:03,260 --> 00:20:09,000
so I'm going to my visual studio

432
00:20:06,450 --> 00:20:13,050
environment this is Visual Studio 2019

433
00:20:09,000 --> 00:20:14,490
running on Windows 10 and this is the

434
00:20:13,050 --> 00:20:16,800
developer command from because I want to

435
00:20:14,490 --> 00:20:18,630
show you that even when compiling from

436
00:20:16,800 --> 00:20:28,560
the command like compiler this stuff is

437
00:20:18,630 --> 00:20:31,650
dangerous so so we have this code which

438
00:20:28,560 --> 00:20:33,510
is which is evil we put it in the middle

439
00:20:31,650 --> 00:20:35,730
of the screen and as we can see there's

440
00:20:33,510 --> 00:20:37,950
this import pilot statement right here

441
00:20:35,730 --> 00:20:40,050
again it can also be on the unc pad web

442
00:20:37,950 --> 00:20:43,200
dev or whatever and if you just compile

443
00:20:40,050 --> 00:20:48,330
this code with the Microsoft

444
00:20:43,200 --> 00:20:49,440
command-line compiler for C++ then we

445
00:20:48,330 --> 00:20:51,179
will see that tada

446
00:20:49,440 --> 00:20:54,330
there's calculator popping up here in

447
00:20:51,180 --> 00:21:00,690
this case so compiling dangerous code is

448
00:20:54,330 --> 00:21:04,980
already dangerous in summary what is the

449
00:21:00,690 --> 00:21:07,320
flow that we just used here so we have

450
00:21:04,980 --> 00:21:10,980
the Microsoft command-line C++ compiler

451
00:21:07,320 --> 00:21:12,960
it finds this import directive and it

452
00:21:10,980 --> 00:21:16,400
means that it will call loads type late

453
00:21:12,960 --> 00:21:20,190
in this case on Etha type little TLB

454
00:21:16,400 --> 00:21:21,840
this is parsed by the chrome API and it

455
00:21:20,190 --> 00:21:24,900
will find at this type library it

456
00:21:21,840 --> 00:21:26,340
references another type library but this

457
00:21:24,900 --> 00:21:28,320
reference to another type library was

458
00:21:26,340 --> 00:21:32,120
edition normal type library it was a

459
00:21:28,320 --> 00:21:35,250
display name for a scriptlet moniker but

460
00:21:32,120 --> 00:21:37,469
slow type library happily parses Fayum a

461
00:21:35,250 --> 00:21:38,310
parses play name and it will eventually

462
00:21:37,470 --> 00:21:40,470
bind to the

463
00:21:38,310 --> 00:21:42,179
object which means that stop date of DLL

464
00:21:40,470 --> 00:21:47,550
will actually run our script let's and

465
00:21:42,180 --> 00:21:51,030
tada we are there what I've shown you

466
00:21:47,550 --> 00:21:53,180
here is Visual Studio but there is much

467
00:21:51,030 --> 00:21:55,500
more attack surface to load type let

468
00:21:53,180 --> 00:21:56,760
logotype lip is being used to integrated

469
00:21:55,500 --> 00:21:59,340
development environments like facial

470
00:21:56,760 --> 00:22:02,040
studio it's also heavily used in Emma's

471
00:21:59,340 --> 00:22:03,510
office in both the VBA editor and the

472
00:22:02,040 --> 00:22:07,680
engine so there's a lot of attack

473
00:22:03,510 --> 00:22:09,360
surface there which is redacted at the

474
00:22:07,680 --> 00:22:12,330
moment but it will be a future talk and

475
00:22:09,360 --> 00:22:14,280
it will be fun CVS also there's plenty

476
00:22:12,330 --> 00:22:16,710
of reverse engineering tools who do low

477
00:22:14,280 --> 00:22:18,990
type lip in one way or another there's a

478
00:22:16,710 --> 00:22:20,880
compliment for Ida Pro for example if

479
00:22:18,990 --> 00:22:22,530
you use that to reverse engineer code

480
00:22:20,880 --> 00:22:23,850
which contains the type library and

481
00:22:22,530 --> 00:22:25,710
you're passing it to that complicate

482
00:22:23,850 --> 00:22:26,730
then during reverse engineering you can

483
00:22:25,710 --> 00:22:30,620
get compromised

484
00:22:26,730 --> 00:22:33,690
there's only fewer provided by Microsoft

485
00:22:30,620 --> 00:22:35,280
but also the allow export few minor soft

486
00:22:33,690 --> 00:22:37,230
you might be familiar with it it also

487
00:22:35,280 --> 00:22:40,649
has an option to parse type libraries

488
00:22:37,230 --> 00:22:44,010
don't ever do that on your own computer

489
00:22:40,650 --> 00:22:47,370
when running that alone interested piece

490
00:22:44,010 --> 00:22:50,070
of code and there's probably plenty of

491
00:22:47,370 --> 00:22:52,409
others as well how do you identify this

492
00:22:50,070 --> 00:22:55,830
attack surface of course you can fire up

493
00:22:52,410 --> 00:22:57,990
win debug and place place hooks on the

494
00:22:55,830 --> 00:23:00,960
on the write functions but there's a

495
00:22:57,990 --> 00:23:04,410
tool which is really good at this which

496
00:23:00,960 --> 00:23:05,910
is API monitor it's a free tool and a

497
00:23:04,410 --> 00:23:07,920
good thing is that it allows you to hook

498
00:23:05,910 --> 00:23:11,460
on both comb API methods as well as

499
00:23:07,920 --> 00:23:12,210
interfaces provided it's it's really

500
00:23:11,460 --> 00:23:13,920
really easy

501
00:23:12,210 --> 00:23:15,690
it can even automatically catch tile

502
00:23:13,920 --> 00:23:16,920
processes and you just use your computer

503
00:23:15,690 --> 00:23:18,930
you have it running for a couple of

504
00:23:16,920 --> 00:23:21,240
hours and in the end you just go to the

505
00:23:18,930 --> 00:23:23,670
tool and look back at what applications

506
00:23:21,240 --> 00:23:26,160
actually called low-tide lib in order to

507
00:23:23,670 --> 00:23:31,500
find this attack surface so this is all

508
00:23:26,160 --> 00:23:35,220
about compiling code but we can take it

509
00:23:31,500 --> 00:23:38,010
a step further and we can learn that

510
00:23:35,220 --> 00:23:41,580
also fuming malicious code can be

511
00:23:38,010 --> 00:23:42,660
dangerous how can viewing malicious code

512
00:23:41,580 --> 00:23:46,679
in an integrated development

513
00:23:42,660 --> 00:23:50,640
environments be dangerous well most of

514
00:23:46,680 --> 00:23:51,990
you might think that working in an IDE

515
00:23:50,640 --> 00:23:54,780
and viewing code is

516
00:23:51,990 --> 00:23:58,320
just like a text editor it is not

517
00:23:54,780 --> 00:24:00,059
there's all kind of magic going on in 2d

518
00:23:58,320 --> 00:24:01,439
huge when you are working with code in

519
00:24:00,059 --> 00:24:03,178
an integrated development environment

520
00:24:01,440 --> 00:24:06,390
this is also the big difference between

521
00:24:03,179 --> 00:24:08,340
visual studio and vs code vs code is

522
00:24:06,390 --> 00:24:10,740
more or less this basic text editor but

523
00:24:08,340 --> 00:24:12,809
the regular Visual Studio IDE there's

524
00:24:10,740 --> 00:24:15,120
all kinds of stuff happening when you

525
00:24:12,809 --> 00:24:18,990
are just looking at and working with

526
00:24:15,120 --> 00:24:19,500
code in Visual Studio most of that works

527
00:24:18,990 --> 00:24:22,559
via

528
00:24:19,500 --> 00:24:23,760
msbuild and for the red teamers which

529
00:24:22,559 --> 00:24:26,100
are in this room you are probably

530
00:24:23,760 --> 00:24:28,050
familiar with em is built as a loeben as

531
00:24:26,100 --> 00:24:31,320
in there's plenty of ways to load

532
00:24:28,050 --> 00:24:33,659
malicious code fire em is built you

533
00:24:31,320 --> 00:24:36,419
might have wondered what is the actual

534
00:24:33,660 --> 00:24:39,920
use of this msbuild binary so it's a

535
00:24:36,420 --> 00:24:42,720
crucial part in the Visual Studio IDE

536
00:24:39,920 --> 00:24:46,559
and if you look at the specifications of

537
00:24:42,720 --> 00:24:49,080
what Visual Studio does and how it

538
00:24:46,559 --> 00:24:51,660
integrates with msbuild we can find this

539
00:24:49,080 --> 00:24:55,889
paragraph about design time target

540
00:24:51,660 --> 00:24:58,740
execution and what it says here in a

541
00:24:55,890 --> 00:25:02,220
couple of lines is that msbuild

542
00:24:58,740 --> 00:25:04,950
can be invoked already before the

543
00:25:02,220 --> 00:25:10,140
building process so already on opening

544
00:25:04,950 --> 00:25:13,860
of code the MS build executable can be

545
00:25:10,140 --> 00:25:15,750
tasked to run and you do that with so

546
00:25:13,860 --> 00:25:17,340
called MS build targets you just

547
00:25:15,750 --> 00:25:19,290
identify them in your visual studio

548
00:25:17,340 --> 00:25:21,750
project file and for example a very

549
00:25:19,290 --> 00:25:25,139
basic example to have calculator pop up

550
00:25:21,750 --> 00:25:27,540
on just opening code is to put this

551
00:25:25,140 --> 00:25:32,220
target in your official studio project

552
00:25:27,540 --> 00:25:34,830
file if you are familiar with MS bill

553
00:25:32,220 --> 00:25:36,780
targets and with the work of Casey Smith

554
00:25:34,830 --> 00:25:38,909
50 again you will know that there are

555
00:25:36,780 --> 00:25:40,440
much more interesting examples than just

556
00:25:38,910 --> 00:25:42,030
popping up calculator that you can do

557
00:25:40,440 --> 00:25:44,160
with MS builds you can load arbitrary

558
00:25:42,030 --> 00:25:46,290
assemblies whatever is there but the

559
00:25:44,160 --> 00:25:49,080
thing is that this will stand out in

560
00:25:46,290 --> 00:25:51,090
your project file if there's a developer

561
00:25:49,080 --> 00:25:52,770
who says well I want to review this

562
00:25:51,090 --> 00:25:54,689
project file before I'm going to open it

563
00:25:52,770 --> 00:25:57,450
official studio it will stand out it

564
00:25:54,690 --> 00:26:01,140
will look strange so I wanted to find a

565
00:25:57,450 --> 00:26:03,320
better way to hide my backdoor in a

566
00:26:01,140 --> 00:26:06,050
visual studio project file

567
00:26:03,320 --> 00:26:09,740
and somewhere in the documentation I

568
00:26:06,050 --> 00:26:12,470
found this hidden gem which is the

569
00:26:09,740 --> 00:26:14,180
properties window if you work in Visual

570
00:26:12,470 --> 00:26:16,040
Studio you all know it it's that little

571
00:26:14,180 --> 00:26:17,450
window on the right which provide

572
00:26:16,040 --> 00:26:18,950
properties on objects that you're

573
00:26:17,450 --> 00:26:20,480
working with and looking at the

574
00:26:18,950 --> 00:26:25,270
documentation of the properties window

575
00:26:20,480 --> 00:26:30,500
it actually says here that descriptions

576
00:26:25,270 --> 00:26:31,940
they might come from I type info where

577
00:26:30,500 --> 00:26:34,160
the properties window receives it

578
00:26:31,940 --> 00:26:36,020
through get documentation it doesn't

579
00:26:34,160 --> 00:26:37,790
explicitly mention it here but as soon

580
00:26:36,020 --> 00:26:40,700
as you see I type info you should think

581
00:26:37,790 --> 00:26:43,550
pipe libraries I type info is the

582
00:26:40,700 --> 00:26:44,780
interface around type libraries and

583
00:26:43,550 --> 00:26:46,250
getting information out of them and

584
00:26:44,780 --> 00:26:52,250
apparently there is this thing called

585
00:26:46,250 --> 00:26:56,630
get documentation okay so what does that

586
00:26:52,250 --> 00:27:01,520
do it does a following if you have a

587
00:26:56,630 --> 00:27:04,790
type library then there can be this this

588
00:27:01,520 --> 00:27:08,060
tag which is help string dll and help

589
00:27:04,790 --> 00:27:10,070
string dll allows you to have help

590
00:27:08,060 --> 00:27:13,250
strings which are just documentation

591
00:27:10,070 --> 00:27:14,990
strings in a separate DLL and this is

592
00:27:13,250 --> 00:27:16,370
being used for localization so for

593
00:27:14,990 --> 00:27:19,400
example if you want to support multiple

594
00:27:16,370 --> 00:27:21,709
languages then you can just have a DLL

595
00:27:19,400 --> 00:27:24,080
which dynamically generates the help

596
00:27:21,710 --> 00:27:27,140
strings for you based on localization

597
00:27:24,080 --> 00:27:30,800
and whatever might be happening there so

598
00:27:27,140 --> 00:27:32,570
we can just create a interface

599
00:27:30,800 --> 00:27:34,220
definition language file like this we

600
00:27:32,570 --> 00:27:37,510
can specify the help string DLL

601
00:27:34,220 --> 00:27:40,820
attributes point to a arbitrary DLL and

602
00:27:37,510 --> 00:27:43,690
then when a when the function get

603
00:27:40,820 --> 00:27:45,679
documentation from the I type info

604
00:27:43,690 --> 00:27:47,480
interface is being called which is

605
00:27:45,680 --> 00:27:50,030
exactly what the properties window does

606
00:27:47,480 --> 00:27:51,890
in Visual Studio then it will just call

607
00:27:50,030 --> 00:27:54,230
load library just so it will load it as

608
00:27:51,890 --> 00:27:56,120
a regular DLL and it will call the

609
00:27:54,230 --> 00:27:58,580
exported function DLL get documentation

610
00:27:56,120 --> 00:28:03,379
out of the DLL for which this is the

611
00:27:58,580 --> 00:28:05,449
signature so this means that the

612
00:28:03,380 --> 00:28:09,560
properties window can be our friend from

613
00:28:05,450 --> 00:28:12,230
an offensive perspective if we can get

614
00:28:09,560 --> 00:28:15,860
the properties window to work with our

615
00:28:12,230 --> 00:28:16,880
type library then we know that it will

616
00:28:15,860 --> 00:28:18,860
just bar

617
00:28:16,880 --> 00:28:20,990
this helps bring the ll attribute it

618
00:28:18,860 --> 00:28:23,120
will load a dll and it will call on

619
00:28:20,990 --> 00:28:25,280
exported function so we no longer have

620
00:28:23,120 --> 00:28:28,159
to work with scriptlets etc we can just

621
00:28:25,280 --> 00:28:30,670
have our binary code in a DLL and get it

622
00:28:28,160 --> 00:28:34,160
to run through the properties window if

623
00:28:30,670 --> 00:28:37,430
only we can get a type library to load

624
00:28:34,160 --> 00:28:40,600
upon opening of code so the question is

625
00:28:37,430 --> 00:28:44,690
how can we do that well fortunately

626
00:28:40,600 --> 00:28:49,090
there is a tag for Visual Studio project

627
00:28:44,690 --> 00:28:51,710
files which is come file reference and

628
00:28:49,090 --> 00:28:55,820
confer reference allows you to reference

629
00:28:51,710 --> 00:28:58,880
come files which aren't which aren't

630
00:28:55,820 --> 00:29:01,610
registered on a system which is pretty

631
00:28:58,880 --> 00:29:03,080
handy if you are working with CI CD

632
00:29:01,610 --> 00:29:06,979
environments automatic built

633
00:29:03,080 --> 00:29:08,600
environments etc where the computer

634
00:29:06,980 --> 00:29:10,340
which is compiling the code might not

635
00:29:08,600 --> 00:29:12,590
have a certain come file registered in

636
00:29:10,340 --> 00:29:14,419
the system so you can just provide it in

637
00:29:12,590 --> 00:29:16,189
the codebase and have a have a

638
00:29:14,420 --> 00:29:18,230
successful build there this is where

639
00:29:16,190 --> 00:29:21,800
come fall reference is for but we can

640
00:29:18,230 --> 00:29:23,150
use it to load a type library on viewing

641
00:29:21,800 --> 00:29:24,649
of code and then after that the

642
00:29:23,150 --> 00:29:27,440
properties window will do all the magic

643
00:29:24,650 --> 00:29:31,700
for us and it will just load the DLL and

644
00:29:27,440 --> 00:29:41,090
then call that exported function on us

645
00:29:31,700 --> 00:29:44,600
so again time for a demo so back to our

646
00:29:41,090 --> 00:29:48,939
VM let's just close all the calculators

647
00:29:44,600 --> 00:29:52,939
that we have and right here we have this

648
00:29:48,940 --> 00:30:03,140
visual studio project file evil project

649
00:29:52,940 --> 00:30:04,190
and we're going to open it and there we

650
00:30:03,140 --> 00:30:06,770
have the call to dialogue get

651
00:30:04,190 --> 00:30:09,200
documentation and there I have my coat

652
00:30:06,770 --> 00:30:11,150
then spawning calculator again so

653
00:30:09,200 --> 00:30:14,210
opening a visual Studios project file

654
00:30:11,150 --> 00:30:18,320
can already be dangerous what was the

655
00:30:14,210 --> 00:30:20,830
project execution flow in this case it

656
00:30:18,320 --> 00:30:20,830
looks like this

657
00:30:22,280 --> 00:30:26,149
oh it says MST plus first compiler

658
00:30:24,740 --> 00:30:30,200
that's not true it should be Visual

659
00:30:26,150 --> 00:30:32,450
Studio properties window then which law

660
00:30:30,200 --> 00:30:34,280
does low type Lib because of that come

661
00:30:32,450 --> 00:30:37,220
file reference attribute that we had in

662
00:30:34,280 --> 00:30:39,290
the visual studio project file that will

663
00:30:37,220 --> 00:30:41,480
parse a type library which has the help

664
00:30:39,290 --> 00:30:43,790
string DLL attribute and that will then

665
00:30:41,480 --> 00:30:45,710
just call our DLL which has this

666
00:30:43,790 --> 00:30:50,000
exported function DLL get documentation

667
00:30:45,710 --> 00:30:52,550
and we have our code execution so what's

668
00:30:50,000 --> 00:30:54,340
the impact of this since I'm a red

669
00:30:52,550 --> 00:30:57,530
teamer I think like how can I use this

670
00:30:54,340 --> 00:30:59,990
one of the things is I could use this to

671
00:30:57,530 --> 00:31:02,300
go from a code repository compromise to

672
00:30:59,990 --> 00:31:04,130
a developer work session compromise it's

673
00:31:02,300 --> 00:31:06,500
like a Zanna lateral movement quite

674
00:31:04,130 --> 00:31:08,450
often we have had access to get lab

675
00:31:06,500 --> 00:31:10,870
environments for example internally and

676
00:31:08,450 --> 00:31:13,670
we could backdoor source code but

677
00:31:10,870 --> 00:31:16,310
there's the number of systems where this

678
00:31:13,670 --> 00:31:17,810
source code would get where the compiled

679
00:31:16,310 --> 00:31:20,210
version of the source code would get run

680
00:31:17,810 --> 00:31:23,270
that that's limited but now every

681
00:31:20,210 --> 00:31:24,980
developer opening this source code we

682
00:31:23,270 --> 00:31:26,240
might already compromise his or her

683
00:31:24,980 --> 00:31:29,420
workstation which could be interesting

684
00:31:26,240 --> 00:31:31,010
and also in spearfishing this might be

685
00:31:29,420 --> 00:31:32,780
interesting especially because Visual

686
00:31:31,010 --> 00:31:35,930
Studio project files are not in the

687
00:31:32,780 --> 00:31:37,370
outlook block list so you can just send

688
00:31:35,930 --> 00:31:39,920
the official studio project file to a

689
00:31:37,370 --> 00:31:41,629
developer in whatever pretext that you

690
00:31:39,920 --> 00:31:44,240
have and just double clicking on that

691
00:31:41,630 --> 00:31:47,030
might get this developer compromised so

692
00:31:44,240 --> 00:31:50,090
Microsoft response is still won't fix

693
00:31:47,030 --> 00:31:52,010
they say code should be considered

694
00:31:50,090 --> 00:31:54,110
interested unless the developer opening

695
00:31:52,010 --> 00:31:56,330
it knows the source and they have this

696
00:31:54,110 --> 00:32:00,080
famous warning message that when you

697
00:31:56,330 --> 00:32:02,240
have downloaded the code from the web

698
00:32:00,080 --> 00:32:03,530
that you first get this warning message

699
00:32:02,240 --> 00:32:05,300
that I've just seen you and we'll dive

700
00:32:03,530 --> 00:32:10,580
into warning message in the last part of

701
00:32:05,300 --> 00:32:12,470
this this presentation I started asking

702
00:32:10,580 --> 00:32:14,750
myself is this really effective for

703
00:32:12,470 --> 00:32:18,200
everyday coding scenarios is this

704
00:32:14,750 --> 00:32:21,290
effective for how people work with code

705
00:32:18,200 --> 00:32:23,300
and you know what circumstances might

706
00:32:21,290 --> 00:32:26,149
this warning message not be displayed

707
00:32:23,300 --> 00:32:27,590
for example downloading code is one

708
00:32:26,150 --> 00:32:30,950
thing with your web browser but how does

709
00:32:27,590 --> 00:32:35,360
this work with a gate client for example

710
00:32:30,950 --> 00:32:37,460
so as a bonus we will try to get rid of

711
00:32:35,360 --> 00:32:40,760
the warning message which is based on

712
00:32:37,460 --> 00:32:42,409
mark of the web so remember this was the

713
00:32:40,760 --> 00:32:45,320
warning message you didn't see it in my

714
00:32:42,409 --> 00:32:46,880
demos because I just executed a local

715
00:32:45,320 --> 00:32:50,240
project file if I would have downloaded

716
00:32:46,880 --> 00:32:51,529
it I would have gotten this this error

717
00:32:50,240 --> 00:32:55,940
message first or this warning message

718
00:32:51,529 --> 00:32:59,389
first and this warning message is mostly

719
00:32:55,940 --> 00:33:00,950
based what we call mark of the web so

720
00:32:59,389 --> 00:33:03,559
what is mark of the web it's not only

721
00:33:00,950 --> 00:33:07,519
used within Visual Studio for example

722
00:33:03,559 --> 00:33:09,080
also MS Office heavily uses it but the

723
00:33:07,519 --> 00:33:12,639
concept is that you have an alternate

724
00:33:09,080 --> 00:33:16,250
data stream on the NTFS filesystem level

725
00:33:12,639 --> 00:33:18,918
which is named zone identifier so look

726
00:33:16,250 --> 00:33:22,970
at it as a attribute which is attached

727
00:33:18,919 --> 00:33:26,000
on a filesystem level to any file and

728
00:33:22,970 --> 00:33:28,039
this Altan data stream it gets set by

729
00:33:26,000 --> 00:33:30,529
client software which download stuff or

730
00:33:28,039 --> 00:33:32,179
receive stuff from the internet so for

731
00:33:30,529 --> 00:33:35,059
example all major web browsers and all

732
00:33:32,179 --> 00:33:38,389
major web clients they do adhere to this

733
00:33:35,059 --> 00:33:41,178
principle and it allows you to identify

734
00:33:38,389 --> 00:33:43,129
which files come from an interested zone

735
00:33:41,179 --> 00:33:44,659
so for example with this power film one

736
00:33:43,130 --> 00:33:46,700
line you can just retrieve this

737
00:33:44,659 --> 00:33:48,679
alternate data stream from a downloaded

738
00:33:46,700 --> 00:33:51,740
file you will see that it has a certain

739
00:33:48,679 --> 00:33:55,700
zone ID which means in this case the

740
00:33:51,740 --> 00:34:00,860
internet and on modern systems we can

741
00:33:55,700 --> 00:34:04,100
even see from which URL said this this

742
00:34:00,860 --> 00:34:06,110
stuff was downloaded so how does visual

743
00:34:04,100 --> 00:34:08,299
studio work with this by default if

744
00:34:06,110 --> 00:34:10,668
there is a project file which has this

745
00:34:08,300 --> 00:34:12,919
internet zone identifier number tree it

746
00:34:10,668 --> 00:34:14,868
will display the warning message and you

747
00:34:12,918 --> 00:34:16,759
can tweak this stuff under tools options

748
00:34:14,869 --> 00:34:18,859
stress settings if you ever do a google

749
00:34:16,760 --> 00:34:20,329
for this there's plenty of developers

750
00:34:18,859 --> 00:34:22,429
who are completely fed up with a warning

751
00:34:20,329 --> 00:34:24,560
message and we try to get get rid of it

752
00:34:22,429 --> 00:34:28,460
in this way which I thought was kind of

753
00:34:24,560 --> 00:34:31,369
funny so this is how it works now let's

754
00:34:28,460 --> 00:34:33,589
try to see how we can get rid of it and

755
00:34:31,369 --> 00:34:35,610
in general there's two strategies for

756
00:34:33,589 --> 00:34:38,340
bypassing mark of the web

757
00:34:35,610 --> 00:34:40,170
the first strategy is to find a

758
00:34:38,340 --> 00:34:44,210
client-side application that does not

759
00:34:40,170 --> 00:34:47,580
set or does not propagate the Markov web

760
00:34:44,210 --> 00:34:48,960
attribute and then deliver it in a

761
00:34:47,580 --> 00:34:50,670
format which is handled ballad

762
00:34:48,960 --> 00:34:54,000
client-side software a really famous

763
00:34:50,670 --> 00:34:57,090
examples are 7-zip I'll get to it in a

764
00:34:54,000 --> 00:34:58,830
in more details in a minute and also as

765
00:34:57,090 --> 00:35:01,440
I mentioned the git client when you do a

766
00:34:58,830 --> 00:35:04,110
git clone it doesn't set this this

767
00:35:01,440 --> 00:35:08,150
attribute another approach is to use

768
00:35:04,110 --> 00:35:10,940
container file systems remember that the

769
00:35:08,150 --> 00:35:13,830
alternate data stream is an NTFS thing

770
00:35:10,940 --> 00:35:17,520
then what if we use a filesystem

771
00:35:13,830 --> 00:35:19,799
container which doesn't have often the

772
00:35:17,520 --> 00:35:22,200
data streams and luckily we have virtual

773
00:35:19,800 --> 00:35:26,100
hard disks and the ISO formats by which

774
00:35:22,200 --> 00:35:29,850
you can perfectly achieve this so some

775
00:35:26,100 --> 00:35:32,940
more details in the upcoming slides this

776
00:35:29,850 --> 00:35:35,279
is the git client which is probably

777
00:35:32,940 --> 00:35:37,620
nowadays the most used tool for

778
00:35:35,280 --> 00:35:43,020
downloading code from from the internet

779
00:35:37,620 --> 00:35:45,240
including from from github and for

780
00:35:43,020 --> 00:35:47,460
understandable reasons the git client

781
00:35:45,240 --> 00:35:49,290
doesn't set this alternate data stream

782
00:35:47,460 --> 00:35:51,450
because imagine that you will be cloning

783
00:35:49,290 --> 00:35:53,279
a huge repository and you end up with

784
00:35:51,450 --> 00:35:55,350
all of these files having this alternate

785
00:35:53,280 --> 00:35:57,480
data stream and you have to remove them

786
00:35:55,350 --> 00:36:00,029
from all of them because you're whatever

787
00:35:57,480 --> 00:36:02,100
IDE or all our program that's doing with

788
00:36:00,030 --> 00:36:05,070
it is popping up irritating warning

789
00:36:02,100 --> 00:36:07,560
messages so probably for those reasons

790
00:36:05,070 --> 00:36:10,500
to get clients doesn't set this Marcus

791
00:36:07,560 --> 00:36:14,430
type thing so if you ever clone a

792
00:36:10,500 --> 00:36:16,710
project from get up you won't get this

793
00:36:14,430 --> 00:36:18,270
warning message in facial studio but it

794
00:36:16,710 --> 00:36:22,410
doesn't mean that you can safely open

795
00:36:18,270 --> 00:36:24,660
the code please remember that when I

796
00:36:22,410 --> 00:36:27,029
told someone today about what kind of

797
00:36:24,660 --> 00:36:29,160
presentation I was going to give that

798
00:36:27,030 --> 00:36:30,660
person asked me oh man I hope you didn't

799
00:36:29,160 --> 00:36:32,129
backdoor your own code and get up

800
00:36:30,660 --> 00:36:34,740
because I've been downloading that for

801
00:36:32,130 --> 00:36:37,910
the last couple of months I promise you

802
00:36:34,740 --> 00:36:41,430
these tricks aren't on our on our github

803
00:36:37,910 --> 00:36:44,180
7-zip is another famous one 7z FDD

804
00:36:41,430 --> 00:36:45,990
suppliant the thing is here it doesn't

805
00:36:44,180 --> 00:36:48,450
propagate

806
00:36:45,990 --> 00:36:51,060
mark of the web and by propagate I mean

807
00:36:48,450 --> 00:36:53,460
that when you download a 7-zip file from

808
00:36:51,060 --> 00:36:55,349
your mill client or your web browser or

809
00:36:53,460 --> 00:37:00,030
whatever it will have the mark of the

810
00:36:55,349 --> 00:37:02,849
web attribute set and most other zip

811
00:37:00,030 --> 00:37:05,369
lines when they extracted zip

812
00:37:02,849 --> 00:37:07,410
they will propagate that mark of the web

813
00:37:05,369 --> 00:37:09,810
attribute to every N zip file for

814
00:37:07,410 --> 00:37:12,680
example winzip and the Windows Explorer

815
00:37:09,810 --> 00:37:18,630
as if as a program they all do that

816
00:37:12,680 --> 00:37:20,190
7-zip is an exception to this it appears

817
00:37:18,630 --> 00:37:22,890
to be a conscious design decision by

818
00:37:20,190 --> 00:37:25,130
them which i think is a little bit of a

819
00:37:22,890 --> 00:37:28,080
weird decision but that's my personal

820
00:37:25,130 --> 00:37:30,119
personal opinion if you want to look at

821
00:37:28,080 --> 00:37:32,190
the widest design decision is there just

822
00:37:30,119 --> 00:37:34,650
just follow this link but what they do

823
00:37:32,190 --> 00:37:37,589
is the following when you double-click a

824
00:37:34,650 --> 00:37:39,119
file in the 7-zip GUI which means that

825
00:37:37,589 --> 00:37:41,160
the file gets extracted to the temp

826
00:37:39,119 --> 00:37:43,680
location in that case it does have the

827
00:37:41,160 --> 00:37:46,399
mark of the web attribute set when you

828
00:37:43,680 --> 00:37:48,419
are extracting files to another folder

829
00:37:46,400 --> 00:37:49,680
which you would typically do with the

830
00:37:48,420 --> 00:37:50,910
whole codebase you're not going to

831
00:37:49,680 --> 00:37:53,549
double-click but you extract it to a

832
00:37:50,910 --> 00:37:58,529
certain folder then those files do not

833
00:37:53,550 --> 00:37:59,910
get the mark of the web bit set and if

834
00:37:58,530 --> 00:38:02,760
you're looking at this remember that

835
00:37:59,910 --> 00:38:06,000
mark of the web is used in a lot of

836
00:38:02,760 --> 00:38:08,520
programs including Microsoft Office with

837
00:38:06,000 --> 00:38:11,430
protected view etc so as a read red

838
00:38:08,520 --> 00:38:13,259
teamer you really might want to to use

839
00:38:11,430 --> 00:38:16,259
this kind of stuff in your your attack

840
00:38:13,260 --> 00:38:20,339
scenarios lastly which is my favorite

841
00:38:16,260 --> 00:38:22,170
which is file system containers like ISO

842
00:38:20,339 --> 00:38:24,900
or virtual hard disk which you can see

843
00:38:22,170 --> 00:38:26,880
here is that the outside container which

844
00:38:24,900 --> 00:38:31,170
in this case is proof of concepts that I

845
00:38:26,880 --> 00:38:32,880
so this has the alternate data stream

846
00:38:31,170 --> 00:38:34,770
set which you can see by right-clicking

847
00:38:32,880 --> 00:38:36,300
and then looking at security so it says

848
00:38:34,770 --> 00:38:39,119
here that this file comes from another

849
00:38:36,300 --> 00:38:42,450
computer which means so an identifier

850
00:38:39,119 --> 00:38:46,490
and as soon as we look at the files

851
00:38:42,450 --> 00:38:48,899
within this ISO we see that now this

852
00:38:46,490 --> 00:38:51,390
mark of the web thing has disappeared

853
00:38:48,900 --> 00:38:53,860
so if you would now open this file then

854
00:38:51,390 --> 00:38:56,259
you would get rid of the

855
00:38:53,860 --> 00:38:59,560
of the of the warning which is based on

856
00:38:56,260 --> 00:39:03,930
mark of the web interesting stuff also

857
00:38:59,560 --> 00:39:06,160
very much applicable to Microsoft Office

858
00:39:03,930 --> 00:39:08,890
remember this feature that they

859
00:39:06,160 --> 00:39:12,490
announced a couple of months ago where

860
00:39:08,890 --> 00:39:16,120
macros will be running in in a hyper-v

861
00:39:12,490 --> 00:39:19,060
sandbox also that feature is based on

862
00:39:16,120 --> 00:39:22,240
mark of the web so use this kind of

863
00:39:19,060 --> 00:39:24,160
stuff here if you're attacking that so

864
00:39:22,240 --> 00:39:25,810
what did he takeaways for today well

865
00:39:24,160 --> 00:39:27,759
first of all there is impact on visual

866
00:39:25,810 --> 00:39:29,380
studio users so you should be really

867
00:39:27,760 --> 00:39:31,930
careful when you are compiling or just

868
00:39:29,380 --> 00:39:34,390
opening untrusted projects and you might

869
00:39:31,930 --> 00:39:36,399
call me naive but I have ignored this

870
00:39:34,390 --> 00:39:38,410
warning a lot of times after just

871
00:39:36,400 --> 00:39:40,060
downloading random code and get up and I

872
00:39:38,410 --> 00:39:41,920
changed my behavior after this research

873
00:39:40,060 --> 00:39:43,840
because I learned well it's not only

874
00:39:41,920 --> 00:39:45,640
compiling and running code which is the

875
00:39:43,840 --> 00:39:47,410
interest it's also just opening a visual

876
00:39:45,640 --> 00:39:50,020
studio project file which apparently is

877
00:39:47,410 --> 00:39:52,210
dangerous and as I as I have shown you

878
00:39:50,020 --> 00:39:54,009
it's not just msbuild tasks it's also

879
00:39:52,210 --> 00:39:56,710
type library stuff which you can do in

880
00:39:54,010 --> 00:39:58,660
there which can be very well hidden if

881
00:39:56,710 --> 00:40:01,300
you do not know where to where to look

882
00:39:58,660 --> 00:40:02,589
for a potential backdoor and for a human

883
00:40:01,300 --> 00:40:04,660
so I hope to have shown you that facial

884
00:40:02,590 --> 00:40:08,890
studio can be a very interesting attack

885
00:40:04,660 --> 00:40:13,180
surface most of the techniques that I've

886
00:40:08,890 --> 00:40:15,700
shown you today they also work for other

887
00:40:13,180 --> 00:40:17,560
software other environments so all of

888
00:40:15,700 --> 00:40:19,750
the stuff around monikers and type

889
00:40:17,560 --> 00:40:23,380
libraries James for Shaw has done an

890
00:40:19,750 --> 00:40:26,260
awful lot of work in the in that area it

891
00:40:23,380 --> 00:40:29,830
also can be used in a lot of other

892
00:40:26,260 --> 00:40:31,600
programs and there's some CVS that I

893
00:40:29,830 --> 00:40:33,490
recommend you to look at if you want to

894
00:40:31,600 --> 00:40:35,799
get inspired about the attack service

895
00:40:33,490 --> 00:40:39,270
that's there there's a couple of famous

896
00:40:35,800 --> 00:40:41,740
ones in an MS office which are these

897
00:40:39,270 --> 00:40:43,570
there used to be a very old one in

898
00:40:41,740 --> 00:40:45,490
Internet Explorer that the concept is so

899
00:40:43,570 --> 00:40:47,500
simple that I recommend you to have a

900
00:40:45,490 --> 00:40:49,419
look at it and then there's the magic by

901
00:40:47,500 --> 00:40:52,690
James for show with this elevation of

902
00:40:49,420 --> 00:40:56,470
privilege which abuses monikers and

903
00:40:52,690 --> 00:40:58,090
n-type libraries and as I promise you I

904
00:40:56,470 --> 00:41:00,220
cannot say too much about it now but

905
00:40:58,090 --> 00:41:03,770
there will be some new stuff coming out

906
00:41:00,220 --> 00:41:06,859
in a a couple of months

907
00:41:03,770 --> 00:41:08,210
if this talk went a little bit too fast

908
00:41:06,860 --> 00:41:11,000
for you or when I've skipped over

909
00:41:08,210 --> 00:41:12,530
certain details I will provide a blog

910
00:41:11,000 --> 00:41:14,330
post within a couple of weeks with a

911
00:41:12,530 --> 00:41:17,060
full write-up of this city's talk and I

912
00:41:14,330 --> 00:41:19,490
will also publish all of the demos and

913
00:41:17,060 --> 00:41:23,270
code that I've used on all our blog so

914
00:41:19,490 --> 00:41:25,790
keep an eye on it I'm a bit of a slow

915
00:41:23,270 --> 00:41:29,300
rider so allow me like three or four

916
00:41:25,790 --> 00:41:31,640
weeks to to achieve this if you got

917
00:41:29,300 --> 00:41:33,620
completely inspired by this I now think

918
00:41:31,640 --> 00:41:35,629
like man I want to dive into come this

919
00:41:33,620 --> 00:41:38,029
magical world and I promise you it's

920
00:41:35,630 --> 00:41:38,510
it's it's a beautiful attack surface go

921
00:41:38,030 --> 00:41:40,610
do it

922
00:41:38,510 --> 00:41:43,490
there's a couple of books which I can

923
00:41:40,610 --> 00:41:46,310
recommend to you they are all 1990s

924
00:41:43,490 --> 00:41:47,870
books so you need to go to a web shop

925
00:41:46,310 --> 00:41:49,460
like Amazon which has a second half

926
00:41:47,870 --> 00:41:52,609
markets to be able to still find them

927
00:41:49,460 --> 00:41:54,680
but there is knowledge in there which is

928
00:41:52,610 --> 00:41:56,210
really difficult to find on the web so

929
00:41:54,680 --> 00:41:58,549
printed books they still have their

930
00:41:56,210 --> 00:42:00,680
value it's inside calm essential calm

931
00:41:58,550 --> 00:42:02,330
and especially this one which isn't an

932
00:42:00,680 --> 00:42:05,750
easy book but but it's really good on

933
00:42:02,330 --> 00:42:07,670
calm and compress go and read it for

934
00:42:05,750 --> 00:42:11,270
tools I've already shown you the API

935
00:42:07,670 --> 00:42:13,550
monitor and again James for Shaw has

936
00:42:11,270 --> 00:42:16,550
only few net which is an excellent tool

937
00:42:13,550 --> 00:42:20,330
to look into calm objects fiber

938
00:42:16,550 --> 00:42:22,370
libraries and all the likes also from

939
00:42:20,330 --> 00:42:25,100
his fans there's this famous talk which

940
00:42:22,370 --> 00:42:26,930
is come in 60 seconds it's not really 60

941
00:42:25,100 --> 00:42:31,190
seconds it's 60 minutes but it's a

942
00:42:26,930 --> 00:42:32,540
really good introduction to to come so

943
00:42:31,190 --> 00:42:34,910
thank you all for listening I hope you

944
00:42:32,540 --> 00:42:36,290
enjoyed the talk and beware when opening

945
00:42:34,910 --> 00:42:37,740
visual studio project files in the

946
00:42:36,290 --> 00:42:42,049
future thanks

947
00:42:37,740 --> 00:42:49,470
[Music]

948
00:42:42,049 --> 00:42:51,359
thanks a lot Stan any questions so the

949
00:42:49,470 --> 00:42:53,118
speakers are aimed to watch you so it's

950
00:42:51,359 --> 00:42:57,240
pretty difficult for me to hear you so

951
00:42:53,119 --> 00:42:59,700
so at the start you should so basically

952
00:42:57,240 --> 00:43:02,069
we had this thing where we gotta execute

953
00:42:59,700 --> 00:43:05,180
SAT files right so we can do that with

954
00:43:02,069 --> 00:43:08,700
reg SVR or any trusts through black

955
00:43:05,180 --> 00:43:13,589
puppy NPRM so why would you want to use

956
00:43:08,700 --> 00:43:15,240
loaded type Piper okay so you're

957
00:43:13,589 --> 00:43:16,920
mentioning our repeater progression is

958
00:43:15,240 --> 00:43:19,258
saying well we have this code execution

959
00:43:16,920 --> 00:43:22,130
through SCT files and we can always do

960
00:43:19,259 --> 00:43:25,819
that we can also do that via other

961
00:43:22,130 --> 00:43:28,259
programs which consumes triplets

962
00:43:25,819 --> 00:43:30,420
like for example records your r2d2 as

963
00:43:28,259 --> 00:43:32,390
you mentioned definitely would break a

964
00:43:30,420 --> 00:43:37,859
sphere r2d2 you can use it as a low bin

965
00:43:32,390 --> 00:43:41,098
to load the script length but it's a

966
00:43:37,859 --> 00:43:44,279
very difficult initial infection vector

967
00:43:41,099 --> 00:43:45,960
like if cool that if you already have

968
00:43:44,279 --> 00:43:47,549
your implant running on a system and you

969
00:43:45,960 --> 00:43:50,220
want to run additional code then you can

970
00:43:47,549 --> 00:43:51,809
use that low bin but as an initial

971
00:43:50,220 --> 00:43:55,140
infection factor that's more difficult

972
00:43:51,809 --> 00:43:57,720
so that's why for example visual studio

973
00:43:55,140 --> 00:43:59,999
provides from a text surface for initial

974
00:43:57,720 --> 00:44:02,749
infection and there we need this type

975
00:43:59,999 --> 00:44:11,279
library trick to to go all the way there

976
00:44:02,749 --> 00:44:19,919
Thanks thank you any other question this

977
00:44:11,279 --> 00:44:22,710
one 8 oh great talk man ok

978
00:44:19,920 --> 00:44:25,200
have you tested this out against or any

979
00:44:22,710 --> 00:44:27,420
of the DRS and stuff and how's that

980
00:44:25,200 --> 00:44:29,609
stuff reacting to to what you're doing

981
00:44:27,420 --> 00:44:32,819
good question so have I tested this

982
00:44:29,609 --> 00:44:35,819
stuff against EDRs etc I've tested it

983
00:44:32,819 --> 00:44:41,880
against some of the well-known AVS and

984
00:44:35,819 --> 00:44:44,519
EDRs the basic message is make sure not

985
00:44:41,880 --> 00:44:46,019
to reuse any standard components which

986
00:44:44,519 --> 00:44:47,848
are available in this world so for

987
00:44:46,019 --> 00:44:50,029
example if you take a malicious triplet

988
00:44:47,849 --> 00:44:52,320
which has been published on KC's Smith's

989
00:44:50,029 --> 00:44:54,930
get up back in the days

990
00:44:52,320 --> 00:44:56,970
then that will flag avian EDR

991
00:44:54,930 --> 00:44:59,040
immediately but if you write your own

992
00:44:56,970 --> 00:45:00,450
script let's then all of the stuff

993
00:44:59,040 --> 00:45:02,580
that's happening under the hood is just

994
00:45:00,450 --> 00:45:05,879
regular Visual Studio stuff so it's

995
00:45:02,580 --> 00:45:08,940
pretty pretty easy to evade a fee and

996
00:45:05,880 --> 00:45:11,730
EDR as long as you're not just so stupid

997
00:45:08,940 --> 00:45:18,540
to reuse standard github triplets etc

998
00:45:11,730 --> 00:45:20,700
etc okay thanks thank you thanks John

999
00:45:18,540 --> 00:45:23,970
thanks for the knowledge you have shared

1000
00:45:20,700 --> 00:45:24,669
so please have a great round of applause

1001
00:45:23,970 --> 00:45:25,839
for the Stan

1002
00:45:24,670 --> 00:45:29,769
[Applause]

1003
00:45:25,840 --> 00:45:29,769
[Music]

