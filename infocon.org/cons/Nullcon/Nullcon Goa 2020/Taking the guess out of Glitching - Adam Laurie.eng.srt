1
00:00:02,699 --> 00:00:08,230
thank you and thanks for having me back

2
00:00:05,650 --> 00:00:11,589
again one of my favorite events of the

3
00:00:08,230 --> 00:00:13,719
year and I'm really delighted that it's

4
00:00:11,589 --> 00:00:16,240
still going ahead despite all the other

5
00:00:13,719 --> 00:00:19,090
things that are not and things being

6
00:00:16,239 --> 00:00:22,598
canceled I hope everyone stays safe and

7
00:00:19,090 --> 00:00:26,470
we don't have any issues use this pink

8
00:00:22,599 --> 00:00:30,550
stuff often don't shake hands when you

9
00:00:26,470 --> 00:00:34,539
meet people I actually my company just

10
00:00:30,550 --> 00:00:36,160
issued no handshake rule so if I don't

11
00:00:34,539 --> 00:00:37,840
shake hands with you when you meet it's

12
00:00:36,160 --> 00:00:40,690
because I'm not allowed to not because I

13
00:00:37,840 --> 00:00:42,820
don't like you okay I shouldn't even be

14
00:00:40,690 --> 00:00:45,070
here to be honest we've also just issued

15
00:00:42,820 --> 00:00:48,070
know going to meetings with more than a

16
00:00:45,070 --> 00:00:50,199
thousand people rule but since I'm

17
00:00:48,070 --> 00:00:56,109
already here I kind of got away with it

18
00:00:50,199 --> 00:01:02,260
but so yeah my name is Adam Lori also

19
00:00:56,109 --> 00:01:04,500
known as major malfunction I work for

20
00:01:02,260 --> 00:01:07,060
x-force read this is not an x-force

21
00:01:04,500 --> 00:01:08,920
sponsored or IBM sponsored talk this is

22
00:01:07,060 --> 00:01:09,939
just me on my own but that's that's my

23
00:01:08,920 --> 00:01:12,310
job

24
00:01:09,939 --> 00:01:13,990
I'm an associate partner and Lee I'm the

25
00:01:12,310 --> 00:01:18,119
lead hardware hacker so I run the

26
00:01:13,990 --> 00:01:23,770
hardware hacking team globally for IBM

27
00:01:18,119 --> 00:01:28,570
I'm also the quartermaster at DEFCON any

28
00:01:23,770 --> 00:01:30,729
of you ever been to DEFCON a few I run

29
00:01:28,570 --> 00:01:33,070
the London DEFCON chapter as well so if

30
00:01:30,729 --> 00:01:35,470
you're ever in London last Tuesday of

31
00:01:33,070 --> 00:01:37,658
the month we have a local meetup it's a

32
00:01:35,470 --> 00:01:40,000
really good place to meet if you're

33
00:01:37,659 --> 00:01:41,590
passing through try and arrange that you

34
00:01:40,000 --> 00:01:43,390
pass through on the last Tuesday of the

35
00:01:41,590 --> 00:01:45,280
month and come and give us an

36
00:01:43,390 --> 00:01:50,080
interesting talk or come and meet some

37
00:01:45,280 --> 00:01:52,660
some other hacker types so

38
00:01:50,080 --> 00:01:55,480
and if you come to DEFCON do look me up

39
00:01:52,660 --> 00:01:57,429
I get kind of lonely in the back room my

40
00:01:55,480 --> 00:01:59,530
job at DEFCON is moving all the

41
00:01:57,430 --> 00:02:01,210
equipment in and out

42
00:01:59,530 --> 00:02:06,040
I hear there's talks there but I never

43
00:02:01,210 --> 00:02:08,769
get to see them so I yeah I'm in a room

44
00:02:06,040 --> 00:02:11,440
probably twice the size of this full of

45
00:02:08,770 --> 00:02:15,880
Pelican cases just moving stuff around

46
00:02:11,440 --> 00:02:21,280
so it's not a huge amount of fun but for

47
00:02:15,880 --> 00:02:23,530
some reason I keep going back so we'll

48
00:02:21,280 --> 00:02:26,350
start with an introduction so I just

49
00:02:23,530 --> 00:02:30,070
want to say right up front this is not

50
00:02:26,350 --> 00:02:31,810
an in-depth super-amazing talk about

51
00:02:30,070 --> 00:02:34,299
some new glitching technique I've

52
00:02:31,810 --> 00:02:40,720
discovered this talk was never designed

53
00:02:34,300 --> 00:02:42,610
to be a main a main room talk again

54
00:02:40,720 --> 00:02:45,040
because of what's been going on and

55
00:02:42,610 --> 00:02:46,810
cancellations and so on I was asked if I

56
00:02:45,040 --> 00:02:49,450
had anything I could present and I'm

57
00:02:46,810 --> 00:02:51,520
happy to to do so but I didn't like

58
00:02:49,450 --> 00:02:54,609
submit this as a as a talk because I've

59
00:02:51,520 --> 00:02:57,220
got some new amazing discovery but I

60
00:02:54,610 --> 00:02:59,709
think it will be interesting for people

61
00:02:57,220 --> 00:03:03,640
who are interested in getting into

62
00:02:59,709 --> 00:03:08,110
glitching certainly in the hardware

63
00:03:03,640 --> 00:03:10,779
hacking panel that we just did an hour

64
00:03:08,110 --> 00:03:13,030
or so ago a lot of the questions that

65
00:03:10,780 --> 00:03:16,390
had come in we were about side-channel

66
00:03:13,030 --> 00:03:20,800
and about how to get started and so on

67
00:03:16,390 --> 00:03:22,839
and so glitch is one of those new tech

68
00:03:20,800 --> 00:03:25,330
newish techniques I mean it's becoming

69
00:03:22,840 --> 00:03:27,640
very very trendy at the moment to do

70
00:03:25,330 --> 00:03:31,000
glitching because it's such a good

71
00:03:27,640 --> 00:03:32,679
technique and it is so successful but

72
00:03:31,000 --> 00:03:35,380
there's still a lot of mystery around it

73
00:03:32,680 --> 00:03:39,489
so think of this as a kind of

74
00:03:35,380 --> 00:03:41,859
introduction and I can show you some

75
00:03:39,489 --> 00:03:45,239
examples of the kind of things you can

76
00:03:41,860 --> 00:03:48,220
do and the things that can go wrong

77
00:03:45,239 --> 00:03:51,820
again I would like to have given it you

78
00:03:48,220 --> 00:03:54,910
know more content but I had some

79
00:03:51,820 --> 00:03:56,870
challenges this this week so as I think

80
00:03:54,910 --> 00:03:59,599
a lot of you know

81
00:03:56,870 --> 00:04:01,909
so I apologize in advance if it's not as

82
00:03:59,599 --> 00:04:03,679
in-depth as you were hoping but and and

83
00:04:01,909 --> 00:04:05,120
do come and talk to me afterwards so I'm

84
00:04:03,680 --> 00:04:08,629
going to be here for the rest of the con

85
00:04:05,120 --> 00:04:10,549
we can hang out buy me a beer I always

86
00:04:08,629 --> 00:04:14,120
like to spill secrets after I've been

87
00:04:10,549 --> 00:04:19,010
bought beer so the more beer the bigger

88
00:04:14,120 --> 00:04:20,510
the secrets so first of all what is

89
00:04:19,010 --> 00:04:23,659
glitching

90
00:04:20,510 --> 00:04:26,360
so basically glitching is very precisely

91
00:04:23,660 --> 00:04:28,880
controlled fault injection so what

92
00:04:26,360 --> 00:04:31,430
you're gonna do is take a chip that is

93
00:04:28,880 --> 00:04:33,350
otherwise running you know running its

94
00:04:31,430 --> 00:04:35,030
normal code and you're trying you're

95
00:04:33,350 --> 00:04:40,180
going to try and introduce a fault

96
00:04:35,030 --> 00:04:44,359
at a very specific time in order to

97
00:04:40,180 --> 00:04:46,940
cause a specific outcome so or usually

98
00:04:44,360 --> 00:04:50,240
to stop the normal outcome from

99
00:04:46,940 --> 00:04:53,710
happening so generally it's for things

100
00:04:50,240 --> 00:04:56,810
like bypassing access control or

101
00:04:53,710 --> 00:04:59,479
bypassing some kind of check or balance

102
00:04:56,810 --> 00:05:01,370
that's in the code so for example if you

103
00:04:59,479 --> 00:05:03,979
wanted to read out the firmware of a

104
00:05:01,370 --> 00:05:06,740
chip the chip is probably locked down at

105
00:05:03,979 --> 00:05:09,320
some point it's gonna internally it's

106
00:05:06,740 --> 00:05:13,550
gonna say are you allowed to do that

107
00:05:09,320 --> 00:05:14,419
read yes or no and you want the know to

108
00:05:13,550 --> 00:05:15,889
become yes

109
00:05:14,419 --> 00:05:19,190
or you want to just skip over that

110
00:05:15,889 --> 00:05:21,370
question somehow and the way you do it

111
00:05:19,190 --> 00:05:23,660
is either by glitching the clock

112
00:05:21,370 --> 00:05:25,970
generally there are other things you can

113
00:05:23,660 --> 00:05:29,930
do but generally it's you glitch the

114
00:05:25,970 --> 00:05:32,479
clock or you glitch the power so you

115
00:05:29,930 --> 00:05:37,099
have some device that allows you to

116
00:05:32,479 --> 00:05:40,539
control so on this screen we glitching

117
00:05:37,099 --> 00:05:44,810
power so this yellow line represents my

118
00:05:40,539 --> 00:05:51,199
voltage which on here is currently set

119
00:05:44,810 --> 00:05:54,979
to 3.8 and and regular intervals I'm

120
00:05:51,199 --> 00:05:56,750
just dropping the voltage so the chip is

121
00:05:54,979 --> 00:05:58,699
going to have like a little hiccup when

122
00:05:56,750 --> 00:06:00,680
it hits that and if you get the timing

123
00:05:58,699 --> 00:06:02,300
right that hiccup will cause the effect

124
00:06:00,680 --> 00:06:04,610
you're looking for you'll get to skip

125
00:06:02,300 --> 00:06:07,240
over the instruction that you're you're

126
00:06:04,610 --> 00:06:07,240
trying to bypass

127
00:06:09,150 --> 00:06:14,039
[Music]

128
00:06:10,639 --> 00:06:15,449
so the tools you need to do this it

129
00:06:14,039 --> 00:06:17,460
sounds simple but when you start

130
00:06:15,449 --> 00:06:19,229
building your toolset you find there's

131
00:06:17,460 --> 00:06:21,799
there's a bunch of things you need to

132
00:06:19,229 --> 00:06:24,000
put together to be able to do glitching

133
00:06:21,800 --> 00:06:26,099
so first of all you need the glitter

134
00:06:24,000 --> 00:06:28,580
itself that the the logic that's going

135
00:06:26,099 --> 00:06:31,860
to create those pulses for you

136
00:06:28,580 --> 00:06:34,620
you need something to trigger the glitch

137
00:06:31,860 --> 00:06:38,310
so decide when you're actually gonna do

138
00:06:34,620 --> 00:06:41,639
your glitch you need something to take

139
00:06:38,310 --> 00:06:44,520
the that glitch signal and turn it into

140
00:06:41,639 --> 00:06:45,689
an actual power signal because generally

141
00:06:44,520 --> 00:06:48,330
the thing that's doing the

142
00:06:45,689 --> 00:06:51,479
decision-making will be just toggling a

143
00:06:48,330 --> 00:06:53,849
GPIO line so it's not going to have

144
00:06:51,479 --> 00:06:56,610
enough oomph to actually drive the

145
00:06:53,849 --> 00:06:59,159
target and provide the power you can

146
00:06:56,610 --> 00:07:01,289
probably drive the clock directly but

147
00:06:59,159 --> 00:07:05,759
you couldn't drive the power directly

148
00:07:01,289 --> 00:07:07,800
basically so you need power supplies to

149
00:07:05,759 --> 00:07:10,610
provide some kind of non-standard

150
00:07:07,800 --> 00:07:15,990
voltage generally when you do glitching

151
00:07:10,610 --> 00:07:17,849
you don't use the the same voltage that

152
00:07:15,990 --> 00:07:20,159
the chip would normally run on there's a

153
00:07:17,849 --> 00:07:22,860
you know there's an ideal voltage for

154
00:07:20,159 --> 00:07:24,960
that chip to run on which is usually you

155
00:07:22,860 --> 00:07:29,370
know 3.3 volts which is then converted

156
00:07:24,960 --> 00:07:31,979
down internally there may be other power

157
00:07:29,370 --> 00:07:34,560
domains within the chip so you need some

158
00:07:31,979 --> 00:07:36,750
means of providing your own voltage

159
00:07:34,560 --> 00:07:40,500
that's going to run at the level that

160
00:07:36,750 --> 00:07:42,830
you want to run it and generally if you

161
00:07:40,500 --> 00:07:46,620
kind of read about this people will say

162
00:07:42,830 --> 00:07:48,389
reduce the voltage until it runs just

163
00:07:46,620 --> 00:07:50,819
about stable so find the point where

164
00:07:48,389 --> 00:07:53,490
you've reduced it too far and the thing

165
00:07:50,819 --> 00:07:58,110
crashes just in normal use and then go

166
00:07:53,490 --> 00:08:00,330
up a couple of points from there so in

167
00:07:58,110 --> 00:08:02,849
this particular target that we're going

168
00:08:00,330 --> 00:08:06,020
to talk about I think I ended up running

169
00:08:02,849 --> 00:08:08,188
at one point seven volts which the

170
00:08:06,020 --> 00:08:10,650
documentation says one point eight is

171
00:08:08,189 --> 00:08:12,330
the minimum it does actually run it

172
00:08:10,650 --> 00:08:14,370
below that you could go down to about

173
00:08:12,330 --> 00:08:18,539
one point five but it wasn't very stable

174
00:08:14,370 --> 00:08:19,950
at that point and then finally you need

175
00:08:18,539 --> 00:08:21,630
an oscilloscope the

176
00:08:19,950 --> 00:08:26,780
you need to see what the hell's going on

177
00:08:21,630 --> 00:08:26,780
so otherwise you're just working blind

178
00:08:29,300 --> 00:08:36,570
so common tools the glitter itself

179
00:08:33,770 --> 00:08:39,720
commercially that the probably the

180
00:08:36,570 --> 00:08:45,030
best-known tools is chip whisperer

181
00:08:39,720 --> 00:08:49,170
Paulino Flynn's device risky or sell

182
00:08:45,030 --> 00:08:51,600
commercial glitches high-end pro stuff

183
00:08:49,170 --> 00:08:54,479
chip Westborough starting to produce

184
00:08:51,600 --> 00:08:56,970
more Pro equipment and I suspect they'll

185
00:08:54,480 --> 00:09:00,450
go down the same path as risk your and

186
00:08:56,970 --> 00:09:01,620
stop producing pretty high-end stuff but

187
00:09:00,450 --> 00:09:04,860
at the moment they've got everything

188
00:09:01,620 --> 00:09:07,530
from like really cheap hobby USB devices

189
00:09:04,860 --> 00:09:10,980
up to the more professional the chip

190
00:09:07,530 --> 00:09:12,449
Whisperer Pro for example or you can

191
00:09:10,980 --> 00:09:15,240
build your own I mean that's a very

192
00:09:12,450 --> 00:09:20,280
common thing these days people are

193
00:09:15,240 --> 00:09:23,280
building them using an FPGA and in fact

194
00:09:20,280 --> 00:09:26,189
internally IBM x-force red have built

195
00:09:23,280 --> 00:09:28,560
their own it's called Radin it is gonna

196
00:09:26,190 --> 00:09:30,090
be open sourced unfortunately that's

197
00:09:28,560 --> 00:09:33,239
being delayed it was going to be

198
00:09:30,090 --> 00:09:35,100
released at blackhat Singapore but

199
00:09:33,240 --> 00:09:38,400
that's cancelled so that's not going to

200
00:09:35,100 --> 00:09:40,860
happen and I think we've agreed to hold

201
00:09:38,400 --> 00:09:43,740
it until it's I think it's happening in

202
00:09:40,860 --> 00:09:46,880
October now is that right yeah so should

203
00:09:43,740 --> 00:09:50,520
get released in October hopefully

204
00:09:46,880 --> 00:09:52,700
there's also two first consulting

205
00:09:50,520 --> 00:09:55,079
published their version of the fpga

206
00:09:52,700 --> 00:10:00,600
glitcher which runs on this device on

207
00:09:55,080 --> 00:10:04,440
the bottom called the RT excuse me this

208
00:10:00,600 --> 00:10:05,970
is a very nice low-cost fpga and to be

209
00:10:04,440 --> 00:10:09,240
honest a lot of targets you don't even

210
00:10:05,970 --> 00:10:11,940
need to go fpga level you can just use

211
00:10:09,240 --> 00:10:16,080
an off-the-shelf dev board and use

212
00:10:11,940 --> 00:10:18,300
standard GPIO ports to do a lot of the

213
00:10:16,080 --> 00:10:21,530
glitching that you you know you'll get

214
00:10:18,300 --> 00:10:21,530
success that way

215
00:10:23,010 --> 00:10:27,819
the next thing you need is a trigger you

216
00:10:25,389 --> 00:10:30,670
need something that tells you when you

217
00:10:27,820 --> 00:10:33,940
want to do the glitch it's not always

218
00:10:30,670 --> 00:10:36,490
just powerup wait a certain amount of

219
00:10:33,940 --> 00:10:40,630
time and then glitch you might be doing

220
00:10:36,490 --> 00:10:43,420
it based on a particular event so like a

221
00:10:40,630 --> 00:10:46,870
GPIO line going high on your target

222
00:10:43,420 --> 00:10:49,000
device maybe an LED comes on just before

223
00:10:46,870 --> 00:10:51,790
the moment you want to perform your

224
00:10:49,000 --> 00:10:54,910
glitch you can use that as a trigger and

225
00:10:51,790 --> 00:10:59,410
then go from there you can buy

226
00:10:54,910 --> 00:11:01,449
commercial trigger devices again risky

227
00:10:59,410 --> 00:11:03,819
or have a thing which is a very

228
00:11:01,449 --> 00:11:06,160
sophisticated trigger can be used can

229
00:11:03,820 --> 00:11:08,980
use power analysis to determine when to

230
00:11:06,160 --> 00:11:12,969
do the trigger or you can use your

231
00:11:08,980 --> 00:11:14,740
oscilloscope again connect it to some

232
00:11:12,970 --> 00:11:19,240
line that does something at just the

233
00:11:14,740 --> 00:11:22,779
right moment or users a decoder so if

234
00:11:19,240 --> 00:11:24,660
you're triggering on a login prompt or

235
00:11:22,779 --> 00:11:30,670
something like that when you send your

236
00:11:24,660 --> 00:11:32,620
password then you want to trigger and of

237
00:11:30,670 --> 00:11:35,860
course you can build your own one of my

238
00:11:32,620 --> 00:11:39,220
favourite platforms for building little

239
00:11:35,860 --> 00:11:42,010
do-it-yourself tools is the bit wacker

240
00:11:39,220 --> 00:11:46,769
32 if you've never used one they're very

241
00:11:42,010 --> 00:11:50,170
cheap it's a pic 32 got tons of memory

242
00:11:46,769 --> 00:11:52,000
reasonably fast and you can write your

243
00:11:50,170 --> 00:11:53,709
own custom decoder on that to do

244
00:11:52,000 --> 00:11:56,819
whatever protocol you want so if you

245
00:11:53,709 --> 00:11:59,319
wanted to trigger on an i2c packet or

246
00:11:56,819 --> 00:12:01,060
UART packet or whatever it would be

247
00:11:59,319 --> 00:12:08,199
relatively straightforward to build a

248
00:12:01,060 --> 00:12:10,510
decoder using that board you need some

249
00:12:08,199 --> 00:12:14,199
kind of amp or switch to convert your

250
00:12:10,510 --> 00:12:16,300
glitch pulse to power very very common

251
00:12:14,199 --> 00:12:19,120
in this world is people use the max for

252
00:12:16,300 --> 00:12:22,449
six one nine so basically what that is

253
00:12:19,120 --> 00:12:24,459
it's a very fast switch you give it two

254
00:12:22,449 --> 00:12:27,279
different voltages and it just flicks

255
00:12:24,459 --> 00:12:31,660
between them so on my first slide where

256
00:12:27,279 --> 00:12:36,370
I had the 3.8 going down the input for

257
00:12:31,660 --> 00:12:39,009
one of those is 3.8 and the lower one

258
00:12:36,370 --> 00:12:40,959
to go all the way down to zero so you

259
00:12:39,009 --> 00:12:43,629
connect it to ground or you connect it

260
00:12:40,959 --> 00:12:45,369
to a lower voltage like if you wanted to

261
00:12:43,629 --> 00:12:47,350
go from three point three down to two

262
00:12:45,370 --> 00:12:49,480
and you just provide two volts to the

263
00:12:47,350 --> 00:12:53,079
other input and it will flick between

264
00:12:49,480 --> 00:13:00,430
the two or you can use an actual amp and

265
00:12:53,079 --> 00:13:03,699
amplify your signal and of course power

266
00:13:00,430 --> 00:13:08,229
supplies again very common these guys on

267
00:13:03,699 --> 00:13:11,859
the right you buy them cheaply on Amazon

268
00:13:08,230 --> 00:13:14,160
or eBay for like 30 bucks if you want to

269
00:13:11,860 --> 00:13:16,809
go a bit more high-end guy on the left

270
00:13:14,160 --> 00:13:18,610
the the little ones are nice and

271
00:13:16,809 --> 00:13:21,009
portable so if you're gonna go and do

272
00:13:18,610 --> 00:13:24,329
this stuff that hacking competitions and

273
00:13:21,009 --> 00:13:27,160
so on you want something really portable

274
00:13:24,329 --> 00:13:29,378
the guys on the left or a proper desk

275
00:13:27,160 --> 00:13:31,990
bench supply so that's a bit heavier and

276
00:13:29,379 --> 00:13:34,300
a bit more painful to move around the

277
00:13:31,990 --> 00:13:38,459
one thing I would say if you do buy

278
00:13:34,300 --> 00:13:40,660
these cheap ones on the right these guys

279
00:13:38,459 --> 00:13:45,300
sorry I keep pointing on a screen that

280
00:13:40,660 --> 00:13:47,860
you can't see these guys on the right

281
00:13:45,300 --> 00:13:50,199
they're really noisy they've got these

282
00:13:47,860 --> 00:13:53,110
horrible horrible cheap fans in them and

283
00:13:50,199 --> 00:13:54,699
I had three of them running at one point

284
00:13:53,110 --> 00:13:56,949
and by the end of the week I was going

285
00:13:54,699 --> 00:13:59,050
insane because the noise was just

286
00:13:56,949 --> 00:14:02,910
horrendous so I actually ended up

287
00:13:59,050 --> 00:14:06,639
spending more on silent fans for the

288
00:14:02,910 --> 00:14:08,350
boxes than the boxes themselves cost but

289
00:14:06,639 --> 00:14:10,480
it was well worth the investment you put

290
00:14:08,350 --> 00:14:15,730
some silent fans in them and and yeah

291
00:14:10,480 --> 00:14:20,079
everything's lovely in it and then

292
00:14:15,730 --> 00:14:22,150
finding a oscilloscope whatever you can

293
00:14:20,079 --> 00:14:24,939
get your hands on

294
00:14:22,150 --> 00:14:27,430
I strongly advise you get at least four

295
00:14:24,940 --> 00:14:30,970
channels is tempting to buy like a

296
00:14:27,430 --> 00:14:33,040
cheapo to channel scope very often they

297
00:14:30,970 --> 00:14:34,990
come with just two sets of probes but

298
00:14:33,040 --> 00:14:38,199
you will quickly run out of probes so

299
00:14:34,990 --> 00:14:39,850
when you start glitching you find you

300
00:14:38,200 --> 00:14:42,100
need to look at all sorts of things at

301
00:14:39,850 --> 00:14:43,600
the same time so you want to look at

302
00:14:42,100 --> 00:14:49,380
power you want to look at your trigger

303
00:14:43,600 --> 00:14:53,230
you want to look at in this case the

304
00:14:49,380 --> 00:14:56,439
tool we're using to monitor the chip

305
00:14:53,230 --> 00:14:58,900
itself now I thought some rye smiles

306
00:14:56,440 --> 00:15:01,060
when this came up because I suspect

307
00:14:58,900 --> 00:15:03,160
people who are into glitching can

308
00:15:01,060 --> 00:15:04,780
recognize that pattern very well they

309
00:15:03,160 --> 00:15:07,660
would have spent many hours looking at

310
00:15:04,780 --> 00:15:10,720
that and playing with it so who can tell

311
00:15:07,660 --> 00:15:17,140
me what chip I'm looking at here just

312
00:15:10,720 --> 00:15:19,600
from there no okay

313
00:15:17,140 --> 00:15:22,060
it became like a fingerprint to me if I

314
00:15:19,600 --> 00:15:24,100
saw that if I ever see that again I

315
00:15:22,060 --> 00:15:28,560
think I'll know exactly what chips being

316
00:15:24,100 --> 00:15:28,560
looked at I've seen it so many times now

317
00:15:28,620 --> 00:15:37,390
so we'll talk about a specific example

318
00:15:32,310 --> 00:15:40,359
so the NXP LPC range is a really good

319
00:15:37,390 --> 00:15:42,550
one to start on because it's it's well

320
00:15:40,360 --> 00:15:45,790
documented it's known to be vulnerable

321
00:15:42,550 --> 00:15:49,240
to glitching attacks and there's a

322
00:15:45,790 --> 00:15:53,110
number of existing again well documented

323
00:15:49,240 --> 00:15:56,110
attacks themselves so if you want to go

324
00:15:53,110 --> 00:15:58,030
and have a go and learn to glitch for

325
00:15:56,110 --> 00:16:00,400
the first time this is a great target

326
00:15:58,030 --> 00:16:03,220
because you there are even tutorials

327
00:16:00,400 --> 00:16:04,900
there's a couple of tutorials there that

328
00:16:03,220 --> 00:16:10,420
will actually walk you through it step

329
00:16:04,900 --> 00:16:13,540
by step but depending there are some

330
00:16:10,420 --> 00:16:15,550
limitations so this particular chip what

331
00:16:13,540 --> 00:16:19,540
they're doing here is what we're doing

332
00:16:15,550 --> 00:16:22,510
here is breaking what's called CRP which

333
00:16:19,540 --> 00:16:25,420
is code read protection so basically

334
00:16:22,510 --> 00:16:26,920
trying to read out the code from from

335
00:16:25,420 --> 00:16:30,949
the chip

336
00:16:26,920 --> 00:16:35,360
and there are three levels of protection

337
00:16:30,950 --> 00:16:39,139
on this chip CLP 1 2 & 3 CR P 1 & 2

338
00:16:35,360 --> 00:16:42,829
basically give you a bootloader that you

339
00:16:39,139 --> 00:16:44,870
can talk to but they don't allow you to

340
00:16:42,829 --> 00:16:46,810
read out the code so you've got

341
00:16:44,870 --> 00:16:49,910
something that you can talk to and

342
00:16:46,810 --> 00:16:53,239
synchronize with in order to do your

343
00:16:49,910 --> 00:16:55,250
glitching attacks and what you're going

344
00:16:53,240 --> 00:16:57,199
to do is try and bypass the read

345
00:16:55,250 --> 00:17:02,389
protection that says no you may not read

346
00:16:57,199 --> 00:17:04,099
out the code CRP 3 however disables the

347
00:17:02,389 --> 00:17:06,169
bootloader altogether so you've got

348
00:17:04,099 --> 00:17:11,448
nothing you've literally got a chip

349
00:17:06,169 --> 00:17:13,549
that's just sitting there so so my

350
00:17:11,449 --> 00:17:15,439
recommendation is get already built dev

351
00:17:13,549 --> 00:17:17,449
board to start with whatever chip you're

352
00:17:15,439 --> 00:17:20,240
going to attack generally and this is

353
00:17:17,449 --> 00:17:23,150
what I always do if I'd got a live

354
00:17:20,240 --> 00:17:27,109
target what I'll do is buy the dev board

355
00:17:23,150 --> 00:17:28,910
for that particular target and one of

356
00:17:27,109 --> 00:17:32,600
the reasons for that or the main reason

357
00:17:28,910 --> 00:17:35,720
for that is it's really quick and easy

358
00:17:32,600 --> 00:17:38,590
to get started you don't have to build a

359
00:17:35,720 --> 00:17:41,390
circuit around a chip you don't have to

360
00:17:38,590 --> 00:17:44,330
attack the physical hardware that you've

361
00:17:41,390 --> 00:17:46,130
got in front of you you know if it's an

362
00:17:44,330 --> 00:17:48,020
IOT device or something and you've taken

363
00:17:46,130 --> 00:17:51,290
it apart and you're looking at the

364
00:17:48,020 --> 00:17:53,120
circuit board you don't have to add

365
00:17:51,290 --> 00:17:55,220
anything to it you don't have to start

366
00:17:53,120 --> 00:17:58,668
figuring out which pins go where and how

367
00:17:55,220 --> 00:18:01,250
to put probes in generally these at

368
00:17:58,669 --> 00:18:04,250
these boards will have all the headers

369
00:18:01,250 --> 00:18:07,700
broken out for you so you know like this

370
00:18:04,250 --> 00:18:11,030
has got every pin handily broken out so

371
00:18:07,700 --> 00:18:15,410
you can just attach to those and do some

372
00:18:11,030 --> 00:18:17,510
experiments generally they also come

373
00:18:15,410 --> 00:18:19,970
with a pretty decent IDE and some

374
00:18:17,510 --> 00:18:22,760
example code so again you can get up and

375
00:18:19,970 --> 00:18:25,490
running really quickly they may even

376
00:18:22,760 --> 00:18:27,140
have the JTAG debugger built in but

377
00:18:25,490 --> 00:18:32,600
they'll have the interfaces so that you

378
00:18:27,140 --> 00:18:35,000
can program and again this guy the this

379
00:18:32,600 --> 00:18:36,540
is actually two boards joined together

380
00:18:35,000 --> 00:18:39,640
here

381
00:18:36,540 --> 00:18:41,379
and the board on the left is a debugger

382
00:18:39,640 --> 00:18:46,870
and the board on the right is the actual

383
00:18:41,380 --> 00:18:50,370
LPC target so you can chop that end off

384
00:18:46,870 --> 00:18:50,370
or you can just ignore it all together

385
00:18:50,400 --> 00:18:56,410
and the example there the other

386
00:18:53,980 --> 00:18:59,500
advantage of buying an off-the-shelf dev

387
00:18:56,410 --> 00:19:01,960
board is the example projects that come

388
00:18:59,500 --> 00:19:04,480
with it will be matched to that hardware

389
00:19:01,960 --> 00:19:07,840
so if it's got LEDs showing you what's

390
00:19:04,480 --> 00:19:10,090
going on they will be on the right GPIO

391
00:19:07,840 --> 00:19:12,850
pins and so on so that the code actually

392
00:19:10,090 --> 00:19:14,590
does what's expected whereas if you just

393
00:19:12,850 --> 00:19:17,110
download the toolset and start writing

394
00:19:14,590 --> 00:19:19,090
code you'd have to figure that all out

395
00:19:17,110 --> 00:19:24,429
for the target board that you're you're

396
00:19:19,090 --> 00:19:26,530
looking at so once you've got a dead

397
00:19:24,430 --> 00:19:29,410
board you can do some reconnaissance and

398
00:19:26,530 --> 00:19:32,260
testing so in this case what we've done

399
00:19:29,410 --> 00:19:37,360
is built a little loop that does

400
00:19:32,260 --> 00:19:41,710
something so the the contents of memory

401
00:19:37,360 --> 00:19:45,669
address to FC is where the CRP value is

402
00:19:41,710 --> 00:19:50,470
set so the the level of copy protection

403
00:19:45,670 --> 00:19:54,550
on the chip is stored in flash at this

404
00:19:50,470 --> 00:19:56,620
address and what I've done is copied the

405
00:19:54,550 --> 00:20:04,210
contents of this into a variable called

406
00:19:56,620 --> 00:20:07,060
CRP and now I can set a a GPIO pin hi do

407
00:20:04,210 --> 00:20:10,480
something and set the GPIO pin low again

408
00:20:07,060 --> 00:20:13,200
and the purpose of that is I can use

409
00:20:10,480 --> 00:20:15,820
that as the trigger so my external

410
00:20:13,200 --> 00:20:18,640
glitching setup is going to look at that

411
00:20:15,820 --> 00:20:21,100
pin so this is purely for reconnaissance

412
00:20:18,640 --> 00:20:24,520
and testing so we're going to look at

413
00:20:21,100 --> 00:20:27,419
that pin see okay it went hi we're about

414
00:20:24,520 --> 00:20:30,040
to do the thing we're trying to glitch

415
00:20:27,420 --> 00:20:33,570
went low we can stop now and look at the

416
00:20:30,040 --> 00:20:37,030
result and the purpose of that is to

417
00:20:33,570 --> 00:20:39,850
find the right voltage and the right

418
00:20:37,030 --> 00:20:41,410
glitch level the width of the glitch the

419
00:20:39,850 --> 00:20:43,840
depth of the glitch and so on that

420
00:20:41,410 --> 00:20:46,480
actually has the desired effect so you

421
00:20:43,840 --> 00:20:48,459
can create a test case that exactly

422
00:20:46,480 --> 00:20:49,750
matches what you're trying to do to the

423
00:20:48,460 --> 00:20:52,330
live target

424
00:20:49,750 --> 00:20:59,889
in a nice safe environment on this dev

425
00:20:52,330 --> 00:21:01,840
board you may also only have one sample

426
00:20:59,889 --> 00:21:04,899
of the device and when you start

427
00:21:01,840 --> 00:21:07,360
Hardware glitching or hardware hacking

428
00:21:04,899 --> 00:21:09,070
it's very possible that you kill the

429
00:21:07,360 --> 00:21:12,269
thing that you're trying to hack you

430
00:21:09,070 --> 00:21:15,090
know if you accidentally jump to some

431
00:21:12,269 --> 00:21:19,120
instruction that says wipe the flash

432
00:21:15,090 --> 00:21:21,610
then that's it your targets gone so you

433
00:21:19,120 --> 00:21:24,129
need to do some initial reconnaissance

434
00:21:21,610 --> 00:21:27,240
and testing and make sure you've got a

435
00:21:24,129 --> 00:21:32,830
glitching setup that actually works

436
00:21:27,240 --> 00:21:35,679
without killing your target so in this

437
00:21:32,830 --> 00:21:38,649
case and also you know is it even

438
00:21:35,679 --> 00:21:40,659
possible in an ideal world where you've

439
00:21:38,649 --> 00:21:43,989
created the perfect environment to do

440
00:21:40,659 --> 00:21:45,850
the glitch does it actually produce a

441
00:21:43,990 --> 00:21:47,919
result if you can't get it to work on

442
00:21:45,850 --> 00:21:50,740
your dev board you're never going to get

443
00:21:47,919 --> 00:21:53,080
it to work on the real target so you

444
00:21:50,740 --> 00:21:54,850
know you can avoid a lot of pain by

445
00:21:53,080 --> 00:21:56,439
figuring out what's working on what's

446
00:21:54,850 --> 00:22:00,219
not working in a nice safe environment

447
00:21:56,440 --> 00:22:02,049
you can spend hours and days trying to

448
00:22:00,220 --> 00:22:08,500
attack a real target and not get

449
00:22:02,049 --> 00:22:10,330
anywhere and one of the first problems

450
00:22:08,500 --> 00:22:11,649
you're fine with a real target so you

451
00:22:10,330 --> 00:22:13,689
come away from your dev environment

452
00:22:11,649 --> 00:22:17,258
where you've set it all up nicely so

453
00:22:13,690 --> 00:22:20,649
it's telling you what's going on on a

454
00:22:17,259 --> 00:22:23,669
real target you know for example here's

455
00:22:20,649 --> 00:22:26,469
a chip doing nothing with no power

456
00:22:23,669 --> 00:22:29,950
here's the same chip powered up running

457
00:22:26,470 --> 00:22:31,769
user code and here's the same chip

458
00:22:29,950 --> 00:22:34,029
powered up running the bootloader

459
00:22:31,769 --> 00:22:36,389
there's no way to tell them apart you

460
00:22:34,029 --> 00:22:39,059
can't actually in this particular case

461
00:22:36,389 --> 00:22:43,299
and one of the targets I was looking at

462
00:22:39,059 --> 00:22:45,519
which is in CRP 3 mode that was

463
00:22:43,299 --> 00:22:48,250
literally the situation I had there were

464
00:22:45,519 --> 00:22:49,990
no LEDs to tell me it was alive there

465
00:22:48,250 --> 00:22:53,259
was nothing going on there was no

466
00:22:49,990 --> 00:22:54,879
interface that I could use to see that I

467
00:22:53,259 --> 00:22:58,480
was having an effect or not having an

468
00:22:54,879 --> 00:23:00,250
effect or whatever so the third that's

469
00:22:58,480 --> 00:23:02,140
the first challenge is how do we figure

470
00:23:00,250 --> 00:23:07,120
out what's going on

471
00:23:02,140 --> 00:23:09,640
and the solution to this is I think

472
00:23:07,120 --> 00:23:12,129
which i think is just pure magic when I

473
00:23:09,640 --> 00:23:14,110
first discovered this it's called a

474
00:23:12,130 --> 00:23:17,050
shunt resistor and it's a really really

475
00:23:14,110 --> 00:23:20,530
simple basic thing basically you put a

476
00:23:17,050 --> 00:23:22,600
shunt resistor between either the thing

477
00:23:20,530 --> 00:23:25,510
you're testing and ground or the thing

478
00:23:22,600 --> 00:23:27,879
you're testing and positive normally you

479
00:23:25,510 --> 00:23:30,070
put it near ground and because that's

480
00:23:27,880 --> 00:23:31,660
always easy to get to because you're

481
00:23:30,070 --> 00:23:35,050
controlling the power supply to the

482
00:23:31,660 --> 00:23:39,160
device whatever it is and in fact I have

483
00:23:35,050 --> 00:23:43,510
this little breadboard which I use for

484
00:23:39,160 --> 00:23:47,170
USB devices it really is that simple

485
00:23:43,510 --> 00:23:50,110
you've got your resistor across ground

486
00:23:47,170 --> 00:23:52,060
and I'm just passing through the other

487
00:23:50,110 --> 00:23:53,949
lines this breadboard also has the

488
00:23:52,060 --> 00:23:56,620
advantage that I can decide not to use

489
00:23:53,950 --> 00:23:59,650
the bus for power I can provide my own

490
00:23:56,620 --> 00:24:01,810
power if I want lower voltages but with

491
00:23:59,650 --> 00:24:03,580
this I can literally plug any USB device

492
00:24:01,810 --> 00:24:06,550
so I can take that dev board off the

493
00:24:03,580 --> 00:24:08,169
shelf plug it through this and what you

494
00:24:06,550 --> 00:24:13,050
do is you connect your oscilloscope

495
00:24:08,170 --> 00:24:17,980
probe to each side of the resistor and

496
00:24:13,050 --> 00:24:21,070
then like magic you get this so when you

497
00:24:17,980 --> 00:24:23,770
power the device up this is kind of like

498
00:24:21,070 --> 00:24:27,310
a fingerprint you know you can't tell

499
00:24:23,770 --> 00:24:30,520
just by looking at it what each pulse

500
00:24:27,310 --> 00:24:32,080
means or what it's doing but you can see

501
00:24:30,520 --> 00:24:37,270
it's alive if you can see it's doing

502
00:24:32,080 --> 00:24:40,360
something and you can use it for

503
00:24:37,270 --> 00:24:42,790
consistency and for measuring you know

504
00:24:40,360 --> 00:24:50,469
how how you're doing if you're achieving

505
00:24:42,790 --> 00:24:52,180
any any effect normally this is used for

506
00:24:50,470 --> 00:24:56,140
a thing called DPA differential power

507
00:24:52,180 --> 00:24:59,230
analysis so by doing multiple captures

508
00:24:56,140 --> 00:25:00,940
and can we get a bit less light on the

509
00:24:59,230 --> 00:25:06,820
screen can you see that okay or is it a

510
00:25:00,940 --> 00:25:09,090
bit bleached out it's kind of hard to

511
00:25:06,820 --> 00:25:09,090
see

512
00:25:13,620 --> 00:25:27,540
can we kill that spot okay it's a bit

513
00:25:27,130 --> 00:25:33,850
better

514
00:25:27,540 --> 00:25:38,620
no okay so anyway you've got this is

515
00:25:33,850 --> 00:25:41,290
basically the T is the trigger so this

516
00:25:38,620 --> 00:25:44,580
is where I reset the device and this is

517
00:25:41,290 --> 00:25:47,649
the boot sequence and then code running

518
00:25:44,580 --> 00:25:49,270
and if you with differential power

519
00:25:47,650 --> 00:25:51,730
analysis what you would do is you would

520
00:25:49,270 --> 00:25:55,000
take multiple snapshots when you do

521
00:25:51,730 --> 00:25:57,360
something so you can measure the power

522
00:25:55,000 --> 00:26:01,780
usage itself so the size of the spikes

523
00:25:57,360 --> 00:26:04,360
for example and that will tell you in

524
00:26:01,780 --> 00:26:06,490
crypto attacks that tells you how many

525
00:26:04,360 --> 00:26:10,179
ones were being processed on our honor

526
00:26:06,490 --> 00:26:12,190
on a bus for example and that can be

527
00:26:10,180 --> 00:26:14,110
used to actually read out the bits that

528
00:26:12,190 --> 00:26:17,560
were being used in the in the key

529
00:26:14,110 --> 00:26:19,270
generation you can also compare timing

530
00:26:17,560 --> 00:26:22,120
so you can watch where a particular

531
00:26:19,270 --> 00:26:24,850
event happens so for example if you were

532
00:26:22,120 --> 00:26:27,520
trying to crack a password and the

533
00:26:24,850 --> 00:26:29,590
routine that checks the password craps

534
00:26:27,520 --> 00:26:32,110
out as soon as it hits the the first

535
00:26:29,590 --> 00:26:36,100
letter that doesn't match you would see

536
00:26:32,110 --> 00:26:40,419
an event move so you send it an

537
00:26:36,100 --> 00:26:41,649
incorrect password out by one letter and

538
00:26:40,420 --> 00:26:43,150
as soon as you get the correct letter

539
00:26:41,650 --> 00:26:44,800
it'll go a little bit further a little

540
00:26:43,150 --> 00:26:45,970
bit further a little bit further and so

541
00:26:44,800 --> 00:26:48,639
on until you've cracked the full

542
00:26:45,970 --> 00:26:52,470
password so that's that's normally what

543
00:26:48,640 --> 00:26:54,640
this kind of power analysis is used for

544
00:26:52,470 --> 00:27:00,640
what we're going to use it for is to

545
00:26:54,640 --> 00:27:02,740
decide when to glitch so again one of

546
00:27:00,640 --> 00:27:06,400
the common techniques that I've seen and

547
00:27:02,740 --> 00:27:09,780
I'm not sure if because of the light you

548
00:27:06,400 --> 00:27:12,330
can actually see but this is multiple

549
00:27:09,780 --> 00:27:16,170
what I've done is set this go to

550
00:27:12,330 --> 00:27:20,290
persistence infinite persistence mode so

551
00:27:16,170 --> 00:27:24,190
behind here there's kind of a dimmer

552
00:27:20,290 --> 00:27:25,810
pink version of that trace I can see a

553
00:27:24,190 --> 00:27:28,600
beautiful Eve I don't think

554
00:27:25,810 --> 00:27:32,409
okay so basically there's two signals

555
00:27:28,600 --> 00:27:34,300
and at one point they diverge so what

556
00:27:32,410 --> 00:27:38,080
we've done is we've started the chip up

557
00:27:34,300 --> 00:27:41,379
in bootloader mode and then we've

558
00:27:38,080 --> 00:27:43,300
started it up in user mode and where the

559
00:27:41,380 --> 00:27:46,960
signals diverge is where that line

560
00:27:43,300 --> 00:27:50,050
called ax is sitting and the common

561
00:27:46,960 --> 00:27:51,820
technique I've seen discussed is do that

562
00:27:50,050 --> 00:27:53,649
and then glitch around there somewhere

563
00:27:51,820 --> 00:27:57,669
because that's where the decisions being

564
00:27:53,650 --> 00:28:01,810
made do I go into user land or do I go

565
00:27:57,670 --> 00:28:04,300
into bootloader and you probably have to

566
00:28:01,810 --> 00:28:11,500
come back a bit from there but that's

567
00:28:04,300 --> 00:28:13,450
what's mostly advised so what I wanted

568
00:28:11,500 --> 00:28:17,020
to do was add some more precision to

569
00:28:13,450 --> 00:28:20,770
that and decide actually though I want

570
00:28:17,020 --> 00:28:23,770
to glitch a specific instruction or a

571
00:28:20,770 --> 00:28:26,500
specific routine and you can't tell from

572
00:28:23,770 --> 00:28:27,970
that picture as I say it's just a bunch

573
00:28:26,500 --> 00:28:29,860
of Wiggles I mean each of those Wiggles

574
00:28:27,970 --> 00:28:34,810
is something doing something but you

575
00:28:29,860 --> 00:28:37,000
don't know what so first thing to do is

576
00:28:34,810 --> 00:28:41,200
decide what it is that we want to glitch

577
00:28:37,000 --> 00:28:43,570
so go to the documentation and this is

578
00:28:41,200 --> 00:28:46,750
the the bootloader process from the

579
00:28:43,570 --> 00:28:50,740
documentation so at the beginning it's

580
00:28:46,750 --> 00:28:54,400
going to decide is CRP enabled do we

581
00:28:50,740 --> 00:28:58,150
enable the debug mode or not is the user

582
00:28:54,400 --> 00:28:59,740
code valid if not then go to to debug

583
00:28:58,150 --> 00:29:02,520
mode and so on so there's a number of

584
00:28:59,740 --> 00:29:05,530
potential places we might want to glitch

585
00:29:02,520 --> 00:29:10,180
so we pick a target and go and look for

586
00:29:05,530 --> 00:29:13,300
it and we do that by extracting the

587
00:29:10,180 --> 00:29:16,690
bootloader because again we've got our

588
00:29:13,300 --> 00:29:18,669
own pet device is not the actual real

589
00:29:16,690 --> 00:29:20,980
target yet we're still working on the

590
00:29:18,670 --> 00:29:23,770
dev board so we can put the dev board in

591
00:29:20,980 --> 00:29:27,700
totally insecure mode with the debugger

592
00:29:23,770 --> 00:29:31,210
switched on we can connect over swd and

593
00:29:27,700 --> 00:29:34,000
just read out the whole memory and in

594
00:29:31,210 --> 00:29:36,610
that memory you can normally the memory

595
00:29:34,000 --> 00:29:38,490
is mapped to the read-only memory as

596
00:29:36,610 --> 00:29:39,610
well so you can just read out the ROM

597
00:29:38,490 --> 00:29:42,190
download

598
00:29:39,610 --> 00:29:46,169
the bootloader itself loaded into

599
00:29:42,190 --> 00:29:50,140
something like Ida Pro or goodra or

600
00:29:46,170 --> 00:29:52,870
binary ninja whatever and find the thing

601
00:29:50,140 --> 00:29:56,980
that you want to glitch so again I don't

602
00:29:52,870 --> 00:30:02,770
think you can read it but here the code

603
00:29:56,980 --> 00:30:11,320
is actually checking the value CRP 3 or

604
00:30:02,770 --> 00:30:13,210
CRP sorry so now what we can do because

605
00:30:11,320 --> 00:30:15,340
we have the source code or not the

606
00:30:13,210 --> 00:30:17,650
source code we have we have a decompiled

607
00:30:15,340 --> 00:30:21,879
version we can actually run a remote

608
00:30:17,650 --> 00:30:25,000
debugger and connect to the target

609
00:30:21,880 --> 00:30:28,000
device put it in debug mode set a

610
00:30:25,000 --> 00:30:33,370
breakpoint so here's the instruction

611
00:30:28,000 --> 00:30:36,910
where it's checking the CRP value and if

612
00:30:33,370 --> 00:30:41,559
we go back to our trace so this is the

613
00:30:36,910 --> 00:30:43,419
code running as normal and then we run

614
00:30:41,559 --> 00:30:47,110
it again with the debug with the trip

615
00:30:43,419 --> 00:30:49,960
with the breakpoint set and bam that

616
00:30:47,110 --> 00:30:53,229
point where it dies the chip just stops

617
00:30:49,960 --> 00:30:55,780
running because it's halted that's the

618
00:30:53,230 --> 00:30:59,020
exact point where we can glitch to hit

619
00:30:55,780 --> 00:31:02,678
that one instruction so we can do really

620
00:30:59,020 --> 00:31:04,780
precise single instruction glitching by

621
00:31:02,679 --> 00:31:08,260
mapping it like that so now I know that

622
00:31:04,780 --> 00:31:11,168
twenty point three microseconds that's

623
00:31:08,260 --> 00:31:14,700
the moment it checked that value so you

624
00:31:11,169 --> 00:31:17,500
can use this to do some really advanced

625
00:31:14,700 --> 00:31:19,660
glitching that you might not otherwise

626
00:31:17,500 --> 00:31:22,890
be able to do and it's really simple you

627
00:31:19,660 --> 00:31:25,480
know we're using a resistor that costs

628
00:31:22,890 --> 00:31:25,809
less than a pound I mean less than a

629
00:31:25,480 --> 00:31:30,010
penny

630
00:31:25,809 --> 00:31:35,379
probably so amazingly simple and useful

631
00:31:30,010 --> 00:31:39,879
technique the other thing you can use

632
00:31:35,380 --> 00:31:44,710
this technique for is figuring out if

633
00:31:39,880 --> 00:31:47,850
your glitches if you're collecting too

634
00:31:44,710 --> 00:31:47,850
hard for example

635
00:31:47,870 --> 00:31:53,750
so here we are glitching away so we

636
00:31:51,740 --> 00:31:57,910
found the point we want to glitch we've

637
00:31:53,750 --> 00:32:01,880
started targeting it and basically I'm

638
00:31:57,910 --> 00:32:03,830
the little blue dip is where my glitch

639
00:32:01,880 --> 00:32:07,160
is going in and you can see it's not

640
00:32:03,830 --> 00:32:07,939
having any effect and then bang I went

641
00:32:07,160 --> 00:32:10,370
too hard

642
00:32:07,940 --> 00:32:11,870
ship dies again so this is not a

643
00:32:10,370 --> 00:32:13,399
breakpoint this is because I've killed

644
00:32:11,870 --> 00:32:18,800
the the chip okay

645
00:32:13,400 --> 00:32:22,880
so happily glitching away point we

646
00:32:18,800 --> 00:32:27,980
killed it and so the solution for that

647
00:32:22,880 --> 00:32:29,690
is well it's good and it's bad it's good

648
00:32:27,980 --> 00:32:32,870
because it means I've had an effect

649
00:32:29,690 --> 00:32:36,290
so my glitch is actually done something

650
00:32:32,870 --> 00:32:43,550
okay but it's bad because the effect was

651
00:32:36,290 --> 00:32:48,889
too too strong I have a pointer okay

652
00:32:43,550 --> 00:32:53,000
thank you so yeah my glitch is too

653
00:32:48,890 --> 00:32:55,670
strong and I've died here okay but I

654
00:32:53,000 --> 00:32:56,900
know I'm in the right place that I or

655
00:32:55,670 --> 00:32:58,130
potentially I'm in the right place but

656
00:32:56,900 --> 00:33:02,120
I'm doing something and I want to keep

657
00:32:58,130 --> 00:33:03,890
doing something so what I can do if I

658
00:33:02,120 --> 00:33:05,659
reduce the width of the glitch we just

659
00:33:03,890 --> 00:33:08,929
go back to an earlier state where it

660
00:33:05,660 --> 00:33:11,270
wasn't doing anything but if I reduce

661
00:33:08,929 --> 00:33:13,640
the the bottom voltage that I'm going

662
00:33:11,270 --> 00:33:15,559
down to then I find I still have an

663
00:33:13,640 --> 00:33:18,110
effect but it's not enough to kill the

664
00:33:15,559 --> 00:33:21,920
chip so I've actually successfully

665
00:33:18,110 --> 00:33:24,020
converted that from a death blow to

666
00:33:21,920 --> 00:33:26,840
something that just causes an effect but

667
00:33:24,020 --> 00:33:28,100
not such a strong effect not necessarily

668
00:33:26,840 --> 00:33:30,169
the case it may be that I actually

669
00:33:28,100 --> 00:33:32,540
glitched correctly and I caused a

670
00:33:30,170 --> 00:33:36,770
decision to be made and that decision

671
00:33:32,540 --> 00:33:39,020
made it jump off into into the void but

672
00:33:36,770 --> 00:33:41,690
I have found that to be a useful

673
00:33:39,020 --> 00:33:43,280
technique that if you kill it go to the

674
00:33:41,690 --> 00:33:51,020
point and you kill it and then back off

675
00:33:43,280 --> 00:33:54,559
on the voltage the other issue that I've

676
00:33:51,020 --> 00:33:58,960
seen fairly commonly is inconsistent

677
00:33:54,559 --> 00:33:58,960
timing so trying to do a very precise

678
00:33:59,909 --> 00:34:05,590
glitch here so this is the second stage

679
00:34:03,730 --> 00:34:08,139
of the attack when we're actually trying

680
00:34:05,590 --> 00:34:10,449
to bypass the read protection so we're

681
00:34:08,139 --> 00:34:13,750
sending a read command so this is this

682
00:34:10,449 --> 00:34:16,118
is you are here so this is the read

683
00:34:13,750 --> 00:34:19,629
command being echoed this is the read

684
00:34:16,119 --> 00:34:23,679
command being sent and this is the reply

685
00:34:19,629 --> 00:34:25,598
saying no you're not coming in so I want

686
00:34:23,679 --> 00:34:28,090
a glitch in this gap here between

687
00:34:25,599 --> 00:34:32,710
sending the command and getting the

688
00:34:28,090 --> 00:34:35,950
reply and in this case my first attempt

689
00:34:32,710 --> 00:34:41,859
was well the simplest form of trigger is

690
00:34:35,949 --> 00:34:44,348
a GPIO line so my TX is kind of like a

691
00:34:41,859 --> 00:34:48,040
GPIO so why don't I just plug into that

692
00:34:44,349 --> 00:34:51,340
and when it goes low that will be my

693
00:34:48,040 --> 00:34:53,800
trigger but this is quite a long command

694
00:34:51,340 --> 00:34:56,349
here so that you can see that T is

695
00:34:53,800 --> 00:34:57,970
saying triggers back here somewhere so

696
00:34:56,349 --> 00:35:01,060
my triggers actually way back here

697
00:34:57,970 --> 00:35:02,680
somewhere so that's a lot of time to get

698
00:35:01,060 --> 00:35:05,490
out of sync when you're trying to do

699
00:35:02,680 --> 00:35:12,190
something down to microsecond or

700
00:35:05,490 --> 00:35:13,720
nanosecond speeds so it didn't work it

701
00:35:12,190 --> 00:35:15,790
was all over the place and you get a lot

702
00:35:13,720 --> 00:35:17,230
of jitter the you are you know behaves

703
00:35:15,790 --> 00:35:20,890
differently you get slightly different

704
00:35:17,230 --> 00:35:23,770
timings so what I found that she worked

705
00:35:20,890 --> 00:35:27,129
better was using the oscilloscope itself

706
00:35:23,770 --> 00:35:29,230
so this time I'm triggering on the echo

707
00:35:27,130 --> 00:35:32,320
so you can see my trigger is right here

708
00:35:29,230 --> 00:35:35,710
so the moment the end of the command

709
00:35:32,320 --> 00:35:38,349
happens and then this is my delay and

710
00:35:35,710 --> 00:35:41,380
then I'm glitching here so I'm

711
00:35:38,349 --> 00:35:45,940
triggering on reading 0a as the echo

712
00:35:41,380 --> 00:35:52,480
back from from the device and that was

713
00:35:45,940 --> 00:35:55,089
much much more effective I'm being

714
00:35:52,480 --> 00:35:57,640
signal to start winding it up so and

715
00:35:55,089 --> 00:36:00,160
actually there's not a lot more going on

716
00:35:57,640 --> 00:36:03,400
I do want to leave time for a couple of

717
00:36:00,160 --> 00:36:07,000
questions apologies to my Italian

718
00:36:03,400 --> 00:36:12,680
friends but spaghetti is the enemy

719
00:36:07,000 --> 00:36:15,109
so all these wires what you'll find when

720
00:36:12,680 --> 00:36:17,240
you start doing this is consistency is

721
00:36:15,109 --> 00:36:19,730
really difficult if you've got stuff

722
00:36:17,240 --> 00:36:24,019
like this because every single wire has

723
00:36:19,730 --> 00:36:26,839
an effect and if you accidentally you

724
00:36:24,019 --> 00:36:29,899
know bump one or move it around I mean

725
00:36:26,839 --> 00:36:32,660
I've had very frustrating periods where

726
00:36:29,900 --> 00:36:34,839
I'm getting a lot of success and then

727
00:36:32,660 --> 00:36:37,220
for some reason but I never figure out

728
00:36:34,839 --> 00:36:39,710
for the whole of the next day I can't

729
00:36:37,220 --> 00:36:41,720
get a single glitch to work and even you

730
00:36:39,710 --> 00:36:45,170
know trying parameters that I know have

731
00:36:41,720 --> 00:36:46,759
worked before and they end up having to

732
00:36:45,170 --> 00:36:49,400
just tear the whole thing apart and

733
00:36:46,760 --> 00:36:52,220
rebuild it because I can't find which

734
00:36:49,400 --> 00:36:55,849
wire has has got itself you know in a

735
00:36:52,220 --> 00:36:58,819
pickle so if you want consistency and if

736
00:36:55,849 --> 00:37:02,059
you want to do a lot of testing and

737
00:36:58,819 --> 00:37:04,549
development then I recommend you go to

738
00:37:02,059 --> 00:37:06,260
you know breadboards find solderless

739
00:37:04,549 --> 00:37:08,359
breadboards fine for getting the thing

740
00:37:06,260 --> 00:37:10,119
working in the first place but if you

741
00:37:08,359 --> 00:37:16,660
want consistency you need to actually

742
00:37:10,119 --> 00:37:21,470
solder so this guy is three of those

743
00:37:16,660 --> 00:37:25,250
circuits all in one so I've got my max

744
00:37:21,470 --> 00:37:28,368
chip which is doing the providing the

745
00:37:25,250 --> 00:37:30,380
power I've got the target chip I've got

746
00:37:28,369 --> 00:37:33,589
a converter here so I can actually use

747
00:37:30,380 --> 00:37:35,960
the USB to convert to 3.3 or I can still

748
00:37:33,589 --> 00:37:37,788
provide my high and low and I can also

749
00:37:35,960 --> 00:37:42,440
use this board as a general-purpose

750
00:37:37,789 --> 00:37:45,470
glitcher for other targets so and once I

751
00:37:42,440 --> 00:37:47,869
built that it was way more consistent I

752
00:37:45,470 --> 00:37:49,609
never had a problem again because yes I

753
00:37:47,869 --> 00:37:52,700
have a couple of wires but these are

754
00:37:49,609 --> 00:37:58,788
like the trigger so it's very easy to

755
00:37:52,700 --> 00:38:01,519
see what's going on and I think yeah

756
00:37:58,789 --> 00:38:03,970
that was it so I've got five minutes for

757
00:38:01,519 --> 00:38:03,970
questions

758
00:38:06,750 --> 00:38:19,470
I was humming you show that you use the

759
00:38:17,010 --> 00:38:19,980
debug mode to get the time for trigger

760
00:38:19,470 --> 00:38:23,669
right

761
00:38:19,980 --> 00:38:26,520
I'm sorry saying user you sure that you

762
00:38:23,670 --> 00:38:28,860
use debug modes to get the timing for a

763
00:38:26,520 --> 00:38:31,200
trigger yeah correctly yeah how do you

764
00:38:28,860 --> 00:38:33,120
convert them to a live device where

765
00:38:31,200 --> 00:38:35,189
you're not burning in debug mode surely

766
00:38:33,120 --> 00:38:38,400
that imposes some timing differences

767
00:38:35,190 --> 00:38:39,930
okay so the question is when I was

768
00:38:38,400 --> 00:38:42,180
running in debug mode I was on my

769
00:38:39,930 --> 00:38:44,100
development board how do I convert that

770
00:38:42,180 --> 00:38:46,319
to the real device that I'm attacking

771
00:38:44,100 --> 00:38:49,650
because that isn't in debug mode because

772
00:38:46,320 --> 00:38:51,540
that's what we're trying to do the

773
00:38:49,650 --> 00:38:53,700
answer is you don't but you it's the

774
00:38:51,540 --> 00:38:55,890
same chip running the same bootloader

775
00:38:53,700 --> 00:38:58,169
because this is flash rom so I'm not

776
00:38:55,890 --> 00:39:00,290
attacking the userland code because I

777
00:38:58,170 --> 00:39:05,130
haven't got the user LAN code yet I'm

778
00:39:00,290 --> 00:39:06,870
attacking the the flash boot rom which

779
00:39:05,130 --> 00:39:09,360
will be the same because it's the same

780
00:39:06,870 --> 00:39:13,680
chip so okay thanks though timing should

781
00:39:09,360 --> 00:39:15,390
be pretty much the same and with

782
00:39:13,680 --> 00:39:17,549
glitching there's always a window anyway

783
00:39:15,390 --> 00:39:19,049
you're gonna have to it's never going to

784
00:39:17,550 --> 00:39:21,090
be exactly you know you're not just

785
00:39:19,050 --> 00:39:22,890
gonna say oh that's the point bang hit

786
00:39:21,090 --> 00:39:24,660
it you will probably have to hit it a

787
00:39:22,890 --> 00:39:27,420
few hundred or a few thousand times

788
00:39:24,660 --> 00:39:30,540
although I did get to the point where I

789
00:39:27,420 --> 00:39:37,890
could get it within 10 goes because it

790
00:39:30,540 --> 00:39:40,050
was so precise you had a question are

791
00:39:37,890 --> 00:39:41,730
you looking in any way in the actual

792
00:39:40,050 --> 00:39:43,860
effect what's going on inside this chip

793
00:39:41,730 --> 00:39:45,870
we insert injecting these iglesias or do

794
00:39:43,860 --> 00:39:48,270
you focus more on the behavioral change

795
00:39:45,870 --> 00:39:49,680
that the glitch causes for example

796
00:39:48,270 --> 00:39:54,300
bypassing your check or opening the

797
00:39:49,680 --> 00:39:56,730
protection so far so basically there's a

798
00:39:54,300 --> 00:40:00,020
couple of us working on this stuff the

799
00:39:56,730 --> 00:40:03,540
other guy is working on looking at the

800
00:40:00,020 --> 00:40:05,870
sort of physical and electronic or

801
00:40:03,540 --> 00:40:08,700
electrical effects that are being caused

802
00:40:05,870 --> 00:40:13,230
I'm more interested in actual practical

803
00:40:08,700 --> 00:40:14,970
outcomes of the glitch so generally what

804
00:40:13,230 --> 00:40:18,360
we're doing this for is to recover

805
00:40:14,970 --> 00:40:20,569
firmware for analysis so we just want to

806
00:40:18,360 --> 00:40:23,570
achieve an effect like bypass read

807
00:40:20,570 --> 00:40:24,800
affection and generally that's you know

808
00:40:23,570 --> 00:40:26,810
that's what we're doing so I don't

809
00:40:24,800 --> 00:40:37,220
really care why it worked we just care

810
00:40:26,810 --> 00:40:42,740
that it did any other question we're

811
00:40:37,220 --> 00:40:45,080
gonna make you fit now hey did you run

812
00:40:42,740 --> 00:40:46,850
into issues where you art isn't precise

813
00:40:45,080 --> 00:40:49,610
enough because it's like a synchronous

814
00:40:46,850 --> 00:40:54,020
it's buffered and if so what other means

815
00:40:49,610 --> 00:40:56,360
of having a trigger do you have it's

816
00:40:54,020 --> 00:40:58,100
quite hard to hear you up here but the I

817
00:40:56,360 --> 00:40:59,840
think the question was did I run into

818
00:40:58,100 --> 00:41:01,700
issues where my timing wasn't precise

819
00:40:59,840 --> 00:41:05,330
enough yeah because you artists a

820
00:41:01,700 --> 00:41:08,390
synchronous and like buffered so when I

821
00:41:05,330 --> 00:41:11,870
did like measuring traces I had an issue

822
00:41:08,390 --> 00:41:13,730
that by the time I received the UART

823
00:41:11,870 --> 00:41:15,259
signal the interesting part was already

824
00:41:13,730 --> 00:41:19,990
over oh I see

825
00:41:15,260 --> 00:41:23,090
yes I'm exactly so the you are example

826
00:41:19,990 --> 00:41:25,970
was to overcome a similar thing and

827
00:41:23,090 --> 00:41:29,480
actually I started when I started with

828
00:41:25,970 --> 00:41:32,060
the UART glitching I started here

829
00:41:29,480 --> 00:41:34,010
because you can see there's there's code

830
00:41:32,060 --> 00:41:35,420
that's doing one thing and then very

831
00:41:34,010 --> 00:41:38,300
clearly there's code that's doing

832
00:41:35,420 --> 00:41:42,950
something different here and so I

833
00:41:38,300 --> 00:41:46,760
started my glitch at this point and I

834
00:41:42,950 --> 00:41:50,629
didn't I didn't really care you know

835
00:41:46,760 --> 00:41:52,730
where I was successful in here but then

836
00:41:50,630 --> 00:41:55,490
looking at the code analysis I realized

837
00:41:52,730 --> 00:41:58,900
that actually the target I wanted was

838
00:41:55,490 --> 00:42:03,319
closer to where the reply comes back and

839
00:41:58,900 --> 00:42:05,890
this is why I needed to move the trigger

840
00:42:03,320 --> 00:42:10,520
to something more reliable for that gap

841
00:42:05,890 --> 00:42:13,210
so I could have triggered off the end of

842
00:42:10,520 --> 00:42:15,380
this line which would put me back here

843
00:42:13,210 --> 00:42:17,540
but yeah I mean you have to find

844
00:42:15,380 --> 00:42:19,400
something that you can trigger from

845
00:42:17,540 --> 00:42:21,410
that's before the event you're trying to

846
00:42:19,400 --> 00:42:24,290
hit there's no way around that

847
00:42:21,410 --> 00:42:26,210
unfortunately and when I was back here

848
00:42:24,290 --> 00:42:28,430
the timing was just way too long so that

849
00:42:26,210 --> 00:42:30,260
glitch was just jumping about all over

850
00:42:28,430 --> 00:42:33,649
the place it was almost random it's like

851
00:42:30,260 --> 00:42:34,400
trying rocks at it so for the witches

852
00:42:33,650 --> 00:42:37,490
you tried

853
00:42:34,400 --> 00:42:39,740
was good enough say again for the

854
00:42:37,490 --> 00:42:43,729
glitches you tried UART was precise

855
00:42:39,740 --> 00:42:47,810
enough I didn't get the last part of the

856
00:42:43,730 --> 00:42:50,150
question the glitches I tried so the

857
00:42:47,810 --> 00:42:51,980
question is whether you art was like

858
00:42:50,150 --> 00:42:54,170
precise and I whether that you are was

859
00:42:51,980 --> 00:43:02,120
precise yeah yes I mean I was successful

860
00:42:54,170 --> 00:43:04,640
yes but it took a long time that the you

861
00:43:02,120 --> 00:43:07,910
are is very jittery so that that glitch

862
00:43:04,640 --> 00:43:10,100
will will hop around but the closer you

863
00:43:07,910 --> 00:43:14,060
can get to the target the less it will

864
00:43:10,100 --> 00:43:18,650
hop around obviously Adam how did you

865
00:43:14,060 --> 00:43:20,240
make the lights go up and down I don't

866
00:43:18,650 --> 00:43:21,860
know if it's me but I really can't yeah

867
00:43:20,240 --> 00:43:23,720
I think cuz the speaker will point in

868
00:43:21,860 --> 00:43:25,670
that way how did you make the lights go

869
00:43:23,720 --> 00:43:31,149
up and down how do I make the lights go

870
00:43:25,670 --> 00:43:31,150
up and down yes a point laser is that

871
00:43:32,800 --> 00:43:36,460
any other questions

872
00:43:36,610 --> 00:43:44,810
that's question we are having i'm just

873
00:43:41,600 --> 00:43:48,049
being curious it's is it is it possible

874
00:43:44,810 --> 00:43:50,420
to use ZigBee I mean relating with

875
00:43:48,050 --> 00:43:55,550
ZigBee xB or something like that some

876
00:43:50,420 --> 00:43:57,980
some kind of those devices is it

877
00:43:55,550 --> 00:44:00,430
possible to click big beat devices Issac

878
00:43:57,980 --> 00:44:00,430
vxb

879
00:44:02,200 --> 00:44:09,080
I mean you can glitch any target you

880
00:44:05,960 --> 00:44:10,760
like there I don't see why you shouldn't

881
00:44:09,080 --> 00:44:12,470
you talking about glitching like the

882
00:44:10,760 --> 00:44:16,160
ZigBee following on from the lights

883
00:44:12,470 --> 00:44:18,169
discussion yeah absolutely I mean pick

884
00:44:16,160 --> 00:44:20,060
your target anything is probably

885
00:44:18,170 --> 00:44:24,830
vulnerable to glitching it depends on

886
00:44:20,060 --> 00:44:27,200
the chipset the thing to do is look at

887
00:44:24,830 --> 00:44:30,140
the chip that you're attacking so go and

888
00:44:27,200 --> 00:44:32,870
look at the documentation for the ZigBee

889
00:44:30,140 --> 00:44:34,910
chip you're interested in and see if

890
00:44:32,870 --> 00:44:36,560
there's something in there that you

891
00:44:34,910 --> 00:44:39,589
would need to use glitching as a

892
00:44:36,560 --> 00:44:42,440
technique to overcome so does it have

893
00:44:39,590 --> 00:44:44,930
code read protection does it have debug

894
00:44:42,440 --> 00:44:47,000
ports does it have something that you

895
00:44:44,930 --> 00:44:48,348
can latch on to that you can use a

896
00:44:47,000 --> 00:44:51,470
glitch as an effect

897
00:44:48,349 --> 00:44:54,680
of way of attacking it but yeah I mean

898
00:44:51,470 --> 00:44:57,558
anything's possible I think we're out of

899
00:44:54,680 --> 00:44:59,299
time as I said by all means calling me

900
00:44:57,559 --> 00:45:01,670
outside I'm happy to have more in-depth

901
00:44:59,299 --> 00:45:03,940
conversations it's a very big topic

902
00:45:01,670 --> 00:45:06,559
we've just scratched the surface here so

903
00:45:03,940 --> 00:45:08,930
Christopher Anna Christopher Oh as well

904
00:45:06,559 --> 00:45:10,819
you should talk to in the front and Ryan

905
00:45:08,930 --> 00:45:14,058
they are also very knowledgeable about

906
00:45:10,819 --> 00:45:15,950
this stuff so thanks Adam thanks for

907
00:45:14,059 --> 00:45:16,790
these references and it was a great a

908
00:45:15,950 --> 00:45:21,468
great session

909
00:45:16,790 --> 00:45:21,469
[Music]

