1
00:00:02,879 --> 00:00:09,309
hi everyone thank you for coming to my

2
00:00:06,310 --> 00:00:12,070
talk and thanks Naldo Malkin for

3
00:00:09,309 --> 00:00:14,469
inviting me so before I begin I would

4
00:00:12,070 --> 00:00:16,720
like to ask if anybody is familiar with

5
00:00:14,469 --> 00:00:18,820
Rocco's devices just raise your hand if

6
00:00:16,720 --> 00:00:23,410
you seen them use them hack them

7
00:00:18,820 --> 00:00:28,029
whatever alright cool cool so yeah so

8
00:00:23,410 --> 00:00:32,250
this is how I met rockers I saw them on

9
00:00:28,029 --> 00:00:35,110
black at USA 2019 and I noticed that

10
00:00:32,250 --> 00:00:39,370
raucous provides their conference Wi-Fi

11
00:00:35,110 --> 00:00:41,829
and actually I also noticed that raucous

12
00:00:39,370 --> 00:00:43,870
access point are here in these

13
00:00:41,829 --> 00:00:47,260
conferences as well you can see it at

14
00:00:43,870 --> 00:00:50,890
the floor above they are I think one one

15
00:00:47,260 --> 00:00:55,570
just like the one I'm using here alright

16
00:00:50,890 --> 00:00:57,640
but when I got back home from from USA I

17
00:00:55,570 --> 00:01:01,239
was wondering how many vulnerabilities

18
00:00:57,640 --> 00:01:04,690
were discovered on raucous equipment so

19
00:01:01,239 --> 00:01:08,798
I did a quick search on CV details calm

20
00:01:04,690 --> 00:01:11,890
and I saw that ruckus had 11 TVs

21
00:01:08,799 --> 00:01:14,070
five of them were critical and the

22
00:01:11,890 --> 00:01:17,200
critical vulnerabilities were post

23
00:01:14,070 --> 00:01:21,130
authenticated command injections so

24
00:01:17,200 --> 00:01:25,060
basically no preauth RCE were published

25
00:01:21,130 --> 00:01:28,119
on Rocky's devices only post off yeah so

26
00:01:25,060 --> 00:01:32,439
that either mean that they're super

27
00:01:28,119 --> 00:01:35,979
secure or I'll let you answer this

28
00:01:32,439 --> 00:01:38,439
question yourself so first I would like

29
00:01:35,979 --> 00:01:41,259
to introduce myself so my name is gods

30
00:01:38,439 --> 00:01:43,809
war I'm from Tel Aviv Israel I'm a

31
00:01:41,259 --> 00:01:47,500
research team leader at Aleph research

32
00:01:43,810 --> 00:01:51,070
by HCl AppScan and I've been doing

33
00:01:47,500 --> 00:01:54,520
reversing for around 10 years I focus

34
00:01:51,070 --> 00:01:58,179
mainly on offensive embedded devices

35
00:01:54,520 --> 00:02:00,729
research and this will also be a great

36
00:01:58,180 --> 00:02:04,149
opportunity to mention that we have open

37
00:02:00,729 --> 00:02:08,080
positions here in India so if anybody is

38
00:02:04,149 --> 00:02:12,430
interested feel free to contact me right

39
00:02:08,080 --> 00:02:13,620
but in this talk I will be using ruckus

40
00:02:12,430 --> 00:02:18,150
one

41
00:02:13,620 --> 00:02:21,120
are 510 Unleashed siroccos has an

42
00:02:18,150 --> 00:02:24,780
unleashed version for every access point

43
00:02:21,120 --> 00:02:28,110
they provide unleash our access points

44
00:02:24,780 --> 00:02:30,900
that don't rely on Wi-Fi controllers but

45
00:02:28,110 --> 00:02:33,209
but the thing is that all the access

46
00:02:30,900 --> 00:02:35,730
points shared the same vulnerable code

47
00:02:33,209 --> 00:02:39,269
base and I also notice that some

48
00:02:35,730 --> 00:02:41,819
vulnerabilities works on zone director

49
00:02:39,269 --> 00:02:45,300
product line which is the Wi-Fi

50
00:02:41,819 --> 00:02:48,208
controller right so the vulnerabilities

51
00:02:45,300 --> 00:02:51,660
I will show effects this fumer version

52
00:02:48,209 --> 00:02:53,760
and trier fewer analysis was pretty

53
00:02:51,660 --> 00:02:58,319
straightforward no compression no

54
00:02:53,760 --> 00:03:00,959
encryption and on the are 510 you can

55
00:02:58,319 --> 00:03:04,230
even get the kernel buildconfig form

56
00:03:00,959 --> 00:03:06,720
some really odd reason and what's really

57
00:03:04,230 --> 00:03:08,730
cool about this research is that I did

58
00:03:06,720 --> 00:03:10,739
this entire research with device

59
00:03:08,730 --> 00:03:13,649
simulation only when I actually

60
00:03:10,739 --> 00:03:19,070
discovered vulnerabilities I bought an

61
00:03:13,650 --> 00:03:21,989
actual device okay so I would like to

62
00:03:19,070 --> 00:03:24,690
introduce you to my emulation

63
00:03:21,989 --> 00:03:27,870
environment I'm using a simple yet very

64
00:03:24,690 --> 00:03:31,650
useful emulation Dockers on my docker

65
00:03:27,870 --> 00:03:34,709
hub I got pre-built qmu systems for

66
00:03:31,650 --> 00:03:39,329
different architectures such as arm v7

67
00:03:34,709 --> 00:03:41,880
arm v6 MIPS and MIPS sell these Dockers

68
00:03:39,329 --> 00:03:45,120
really helps me emulating and setting up

69
00:03:41,880 --> 00:03:47,910
different router setups and for this

70
00:03:45,120 --> 00:03:53,030
research I used a darker that wraps an

71
00:03:47,910 --> 00:03:56,040
arm v7q system with a Debian kernel

72
00:03:53,030 --> 00:03:58,680
right but enough about setup let's start

73
00:03:56,040 --> 00:04:01,798
with some exploits so this is my first

74
00:03:58,680 --> 00:04:04,170
RC attack I will be fetching admin

75
00:04:01,799 --> 00:04:06,720
credentials without authentication then

76
00:04:04,170 --> 00:04:11,010
pop a busybox shell with jail break

77
00:04:06,720 --> 00:04:13,620
through SSH and let's do a live demos

78
00:04:11,010 --> 00:04:15,540
because live demos our fun so this is a

79
00:04:13,620 --> 00:04:19,190
good time to pray for the demo gods and

80
00:04:15,540 --> 00:04:23,039
hope that everything will work smoothly

81
00:04:19,190 --> 00:04:27,150
okay so I got my terminal here let me

82
00:04:23,039 --> 00:04:31,190
just see that my router

83
00:04:27,150 --> 00:04:36,948
answers awesome and okay so I'm gonna

84
00:04:31,190 --> 00:04:43,520
I'm gonna fetch a file from the router

85
00:04:36,949 --> 00:04:48,139
from the directory user WPS tool cache

86
00:04:43,520 --> 00:04:51,389
slash var slash run slash rpm key Trev

87
00:04:48,139 --> 00:04:52,800
okay so I got the number ten now I'm

88
00:04:51,389 --> 00:04:54,750
going to fight the same file only with

89
00:04:52,800 --> 00:04:59,210
ten at the end and then just pipe it

90
00:04:54,750 --> 00:05:05,580
through strings and I'm gonna grab

91
00:04:59,210 --> 00:05:08,159
something called all-powerful login yeah

92
00:05:05,580 --> 00:05:10,800
and as you can see those are the device

93
00:05:08,160 --> 00:05:12,600
credentials just like that

94
00:05:10,800 --> 00:05:15,240
so next after I got the routers

95
00:05:12,600 --> 00:05:19,110
credentials I would like to login so I'm

96
00:05:15,240 --> 00:05:20,190
using the credentials I just fetched and

97
00:05:19,110 --> 00:05:25,620
now I got this

98
00:05:20,190 --> 00:05:32,130
CLI I'm gonna use debug function strip

99
00:05:25,620 --> 00:05:34,560
and then run the Venus sage and as you

100
00:05:32,130 --> 00:05:39,650
can see I got myself a busy box shell I

101
00:05:34,560 --> 00:05:43,260
am the admin user and the admin user is

102
00:05:39,650 --> 00:05:49,710
part of the route group so yeah that's

103
00:05:43,260 --> 00:05:52,080
that's a shell thank you very much so

104
00:05:49,710 --> 00:05:55,260
yes so let's understand what we just saw

105
00:05:52,080 --> 00:05:57,810
here so I started this research by

106
00:05:55,260 --> 00:06:01,229
examining the web server configuration

107
00:05:57,810 --> 00:06:04,680
raucous uses embed lists as its web

108
00:06:01,229 --> 00:06:05,460
interface server and the configuration

109
00:06:04,680 --> 00:06:09,030
file oops

110
00:06:05,460 --> 00:06:13,049
just like that we can see that it uses

111
00:06:09,030 --> 00:06:16,710
slash web as its web root directory and

112
00:06:13,050 --> 00:06:21,620
we also see that it uses EGF handler for

113
00:06:16,710 --> 00:06:24,750
dot e GS and dot JSP extension EGS is

114
00:06:21,620 --> 00:06:28,500
embedded JavaScript back-end that the

115
00:06:24,750 --> 00:06:31,110
server uses but the most important thing

116
00:06:28,500 --> 00:06:33,800
is what we don't see here so we don't

117
00:06:31,110 --> 00:06:37,469
see any file fetching restrictions that

118
00:06:33,800 --> 00:06:40,600
means I can fetch any file from slash

119
00:06:37,469 --> 00:06:43,300
web directory regardless of its

120
00:06:40,600 --> 00:06:48,070
extension or type in other words no

121
00:06:43,300 --> 00:06:50,860
abscess control whatsoever right so now

122
00:06:48,070 --> 00:06:52,659
that I know I can fetch any file I would

123
00:06:50,860 --> 00:06:57,660
like to look for some interesting file

124
00:06:52,660 --> 00:07:01,000
to fetch there are 67 files that do not

125
00:06:57,660 --> 00:07:05,470
that there are not a standard web page

126
00:07:01,000 --> 00:07:09,280
and 8 of them are symbolic links one in

127
00:07:05,470 --> 00:07:14,050
particular is this one which is a

128
00:07:09,280 --> 00:07:17,530
symbolic link to /tmp dear that means

129
00:07:14,050 --> 00:07:21,160
every file I will fetch from slash user

130
00:07:17,530 --> 00:07:24,119
slash WPS underscore tools underscore

131
00:07:21,160 --> 00:07:29,800
cash dear will actually fetch files from

132
00:07:24,120 --> 00:07:33,310
/tmp all right so since I was emulating

133
00:07:29,800 --> 00:07:36,070
the router theme were in qmu system mode

134
00:07:33,310 --> 00:07:38,700
I could run the system init scripts and

135
00:07:36,070 --> 00:07:42,730
I noticed some files were written to

136
00:07:38,700 --> 00:07:48,610
/tmp on system startup one of the file

137
00:07:42,730 --> 00:07:51,610
was this RPM dot log this log shows that

138
00:07:48,610 --> 00:07:54,610
every day the router writes a backup

139
00:07:51,610 --> 00:07:58,300
file called rpm key with a different

140
00:07:54,610 --> 00:08:01,060
version number that file looks like a

141
00:07:58,300 --> 00:08:03,940
really good fighter fetch but the

142
00:08:01,060 --> 00:08:07,170
problem was that it was written to slash

143
00:08:03,940 --> 00:08:10,090
var slash run I can only read slash temp

144
00:08:07,170 --> 00:08:13,060
well it wasn't really a problem sense

145
00:08:10,090 --> 00:08:14,109
left bar is also symbolically linked to

146
00:08:13,060 --> 00:08:19,810
/tmp

147
00:08:14,110 --> 00:08:23,890
yay for me yeah I heard up let's see how

148
00:08:19,810 --> 00:08:27,550
I was able to fetch the RPM key file so

149
00:08:23,890 --> 00:08:29,460
slash user slash WPS to cache is

150
00:08:27,550 --> 00:08:32,530
symbolically linked to /tmp

151
00:08:29,460 --> 00:08:36,069
slash var slash run is symbolically

152
00:08:32,530 --> 00:08:38,620
linked to /tmp slash run slash bar now I

153
00:08:36,070 --> 00:08:41,950
always needed to get the RPM reversion

154
00:08:38,620 --> 00:08:46,720
number here in this example it's 11 so

155
00:08:41,950 --> 00:08:49,900
there is a file called rpm Karev and it

156
00:08:46,720 --> 00:08:51,400
just stores this number so I first

157
00:08:49,900 --> 00:08:53,470
needed to send a request

158
00:08:51,400 --> 00:08:57,430
to get the number and then I could get

159
00:08:53,470 --> 00:09:00,310
the right rpm key file and after I fetch

160
00:08:57,430 --> 00:09:02,979
this rpm key file I notice it contains

161
00:09:00,310 --> 00:09:06,430
some binary data so I just pipe it into

162
00:09:02,980 --> 00:09:09,370
strings and as you can see that's the

163
00:09:06,430 --> 00:09:12,430
device admin credentials in plain

164
00:09:09,370 --> 00:09:13,540
 text right it just doesn't get

165
00:09:12,430 --> 00:09:16,750
any better than this

166
00:09:13,540 --> 00:09:20,529
yeah I see all the other had nothing and

167
00:09:16,750 --> 00:09:21,910
I just yeah okay so great so now to

168
00:09:20,529 --> 00:09:25,420
finish my RCE

169
00:09:21,910 --> 00:09:28,980
I wanted a busy box shell so SSH can be

170
00:09:25,420 --> 00:09:32,020
enabled from the web interface but

171
00:09:28,980 --> 00:09:36,550
here's the thing rockers are using their

172
00:09:32,020 --> 00:09:38,230
own CLI so at first I tried to run busy

173
00:09:36,550 --> 00:09:41,290
box with a hidden command called

174
00:09:38,230 --> 00:09:43,990
exclamation mark V 54 exclamation mark

175
00:09:41,290 --> 00:09:47,680
and as you can see here is supposed to

176
00:09:43,990 --> 00:09:49,300
exit the CLI and enter the OS shell but

177
00:09:47,680 --> 00:09:51,609
the problem was that it needed the

178
00:09:49,300 --> 00:09:55,000
device serial number for that command

179
00:09:51,610 --> 00:09:56,279
and I don't got it so I decided to use a

180
00:09:55,000 --> 00:10:00,400
different approach

181
00:09:56,279 --> 00:10:04,060
eventually I used the CLI debug script

182
00:10:00,400 --> 00:10:05,890
mode that only supposed to run stored

183
00:10:04,060 --> 00:10:09,969
shell strip like those

184
00:10:05,890 --> 00:10:12,640
however the exit command was vulnerable

185
00:10:09,970 --> 00:10:15,250
to path traversal so I just used it to

186
00:10:12,640 --> 00:10:18,610
run being a sage and I got myself a busy

187
00:10:15,250 --> 00:10:23,020
box a busy box shell as root yay for me

188
00:10:18,610 --> 00:10:25,810
all right so after this beginners level

189
00:10:23,020 --> 00:10:27,760
CTF vulnerability it got me thinking

190
00:10:25,810 --> 00:10:31,300
they are probably more vulnerabilities

191
00:10:27,760 --> 00:10:34,600
to discover here and I was really wonder

192
00:10:31,300 --> 00:10:39,130
how in how many ways I can execute codes

193
00:10:34,600 --> 00:10:42,300
on those devices so yeah so that leads

194
00:10:39,130 --> 00:10:45,070
me to my second RC attack here I

195
00:10:42,300 --> 00:10:48,579
exploited a stack overflow overflow

196
00:10:45,070 --> 00:10:50,770
vulnerability with authentication with

197
00:10:48,580 --> 00:10:55,150
an authenticated request to an ad

198
00:10:50,770 --> 00:10:57,730
Jackson yeah but before that I would

199
00:10:55,150 --> 00:10:59,860
like to talk about a jido script that I

200
00:10:57,730 --> 00:11:03,410
wrote that really helped me with the

201
00:10:59,860 --> 00:11:05,930
reversing process so ruckus has

202
00:11:03,410 --> 00:11:08,300
left all their lock strings in the

203
00:11:05,930 --> 00:11:13,849
binary as you can see here there are

204
00:11:08,300 --> 00:11:16,579
info error warn and debug logs here we

205
00:11:13,850 --> 00:11:19,699
can see a Dedra decompile code for a

206
00:11:16,579 --> 00:11:22,790
function and this function uses debug

207
00:11:19,699 --> 00:11:25,849
log print what what's even better is

208
00:11:22,790 --> 00:11:28,849
that Roku's also prints the function

209
00:11:25,850 --> 00:11:30,949
name for every log print so i just wrote

210
00:11:28,850 --> 00:11:34,129
a script that search for these log

211
00:11:30,949 --> 00:11:37,550
prints and rename unnamed functions with

212
00:11:34,129 --> 00:11:40,370
a function from the lock prints in this

213
00:11:37,550 --> 00:11:47,029
case i rename this function from unknown

214
00:11:40,370 --> 00:11:50,180
function to get ZD DN oh well so here we

215
00:11:47,029 --> 00:11:52,699
can see that for a binary called EMF V I

216
00:11:50,180 --> 00:11:57,079
was able to reduce its undefined

217
00:11:52,699 --> 00:11:59,719
function from 1500 to less than 900 and

218
00:11:57,079 --> 00:12:04,310
that made the reversing process way

219
00:11:59,720 --> 00:12:07,519
shorter so based on that script our team

220
00:12:04,310 --> 00:12:10,399
member Vera manse and i wrote a generic

221
00:12:07,519 --> 00:12:12,889
deidre script this strip search for

222
00:12:10,399 --> 00:12:16,850
patterns in Deidra decompile code and

223
00:12:12,889 --> 00:12:19,579
renamed function with those matches this

224
00:12:16,850 --> 00:12:21,949
script is available on Aleph github

225
00:12:19,579 --> 00:12:24,258
accounts so feel free to use it it's

226
00:12:21,949 --> 00:12:27,500
really soup it's really useful for many

227
00:12:24,259 --> 00:12:31,069
reversing projects alright but let's get

228
00:12:27,500 --> 00:12:34,089
back to the second attack now I would

229
00:12:31,069 --> 00:12:37,130
like to present three important binaries

230
00:12:34,089 --> 00:12:40,370
in the web interface so the first one is

231
00:12:37,130 --> 00:12:42,560
slash bin slash labs this is the actual

232
00:12:40,370 --> 00:12:45,740
embed this web server

233
00:12:42,560 --> 00:12:48,380
it handles HTTP requests and execute

234
00:12:45,740 --> 00:12:52,130
handlers according to its configuration

235
00:12:48,380 --> 00:12:54,949
like we saw on the first attack it then

236
00:12:52,130 --> 00:12:59,509
sends commands through a UNIX domain

237
00:12:54,949 --> 00:13:01,878
socket to EMF d slash bin slash EMF D is

238
00:12:59,509 --> 00:13:04,879
an executable that contains the web

239
00:13:01,879 --> 00:13:08,420
interface logic it Maps function from

240
00:13:04,879 --> 00:13:11,089
webpages to its own functions and it

241
00:13:08,420 --> 00:13:14,389
then implements interface commands such

242
00:13:11,089 --> 00:13:15,900
as backup network configuration retrieve

243
00:13:14,389 --> 00:13:19,800
system information and many

244
00:13:15,900 --> 00:13:23,220
or and the last one is lib EMF this

245
00:13:19,800 --> 00:13:27,599
library is used by EMF D for some

246
00:13:23,220 --> 00:13:31,890
authentication some sanitation and code

247
00:13:27,600 --> 00:13:36,200
execution and now in diagram so webs

248
00:13:31,890 --> 00:13:40,650
listen to HTTP slash HTTP if it received

249
00:13:36,200 --> 00:13:45,270
JSA page it uses EGS handler to pass a

250
00:13:40,650 --> 00:13:48,209
function to EMF D EMF B then checks if

251
00:13:45,270 --> 00:13:52,230
the function name is mapped and if so it

252
00:13:48,210 --> 00:13:55,290
calls a function pointer eventually EMF

253
00:13:52,230 --> 00:13:59,040
D runs some kind of shell script for

254
00:13:55,290 --> 00:14:02,699
example if config IP tables route etc

255
00:13:59,040 --> 00:14:05,610
and I will get back to this later but

256
00:14:02,700 --> 00:14:10,170
look at this area carefully because this

257
00:14:05,610 --> 00:14:13,260
is where everything messes up what so

258
00:14:10,170 --> 00:14:17,520
for example when sending an HTTP request

259
00:14:13,260 --> 00:14:22,860
to slash admin / underscore update guest

260
00:14:17,520 --> 00:14:25,650
image name dot JSP web's invoke the EGS

261
00:14:22,860 --> 00:14:28,800
handler this handler uses a function

262
00:14:25,650 --> 00:14:33,480
called delegate which sends a command to

263
00:14:28,800 --> 00:14:36,390
EMF through a domain unique socket EMF D

264
00:14:33,480 --> 00:14:39,090
then Maps every string its received to a

265
00:14:36,390 --> 00:14:42,360
function pointer and runs it here we can

266
00:14:39,090 --> 00:14:46,050
see that EGS handler sends upload verify

267
00:14:42,360 --> 00:14:49,320
string to EMF D and e MF d then Maps

268
00:14:46,050 --> 00:14:56,130
this string to a function also called

269
00:14:49,320 --> 00:14:59,790
upload verify ok so next let's talk

270
00:14:56,130 --> 00:15:02,370
about authentication mechanism so there

271
00:14:59,790 --> 00:15:06,390
are four permission level which are

272
00:15:02,370 --> 00:15:10,080
admin user FM and guest here we see that

273
00:15:06,390 --> 00:15:10,890
for each user has a page with a delegate

274
00:15:10,080 --> 00:15:15,780
function call

275
00:15:10,890 --> 00:15:18,960
for example FM login JSP uses of FM

276
00:15:15,780 --> 00:15:23,930
function and user underscore login dot

277
00:15:18,960 --> 00:15:26,240
JSP uses a user and so on so forth

278
00:15:23,930 --> 00:15:29,150
once the user is authenticated his

279
00:15:26,240 --> 00:15:32,420
session is stored in a specific for

280
00:15:29,150 --> 00:15:34,340
specific period of time each JSP page

281
00:15:32,420 --> 00:15:37,479
should check if the session is valid

282
00:15:34,340 --> 00:15:41,980
before calling other delegate functions

283
00:15:37,480 --> 00:15:46,490
here we see that underscore EMF D stats

284
00:15:41,980 --> 00:15:49,130
sorry that underscore CMD stat JSP

285
00:15:46,490 --> 00:15:54,830
checks for session first and only then

286
00:15:49,130 --> 00:15:58,460
calls the function at Jack's CMD stat so

287
00:15:54,830 --> 00:16:01,180
I used grep and I got 67 pages that do

288
00:15:58,460 --> 00:16:03,650
not perform any kind of session check I

289
00:16:01,180 --> 00:16:05,420
then listed all the different function

290
00:16:03,650 --> 00:16:09,829
that I can reach without authentication

291
00:16:05,420 --> 00:16:13,040
and one very interesting function was

292
00:16:09,830 --> 00:16:16,670
this one which is add Jax restricted CMD

293
00:16:13,040 --> 00:16:19,430
stat here we can see that it does not

294
00:16:16,670 --> 00:16:23,030
perform session check and can be reached

295
00:16:19,430 --> 00:16:27,890
by sending a request to slash tools /

296
00:16:23,030 --> 00:16:31,459
underscore our CMD stat Delta JSP all

297
00:16:27,890 --> 00:16:37,189
right but let's move on to a live demo

298
00:16:31,460 --> 00:16:46,930
that implement Stack Overflow so I'll

299
00:16:37,190 --> 00:16:51,370
just need to make sure okay hopefully

300
00:16:46,930 --> 00:16:51,370
hopefully the demo gods are with me

301
00:16:53,260 --> 00:17:00,890
alright so this is my terminal and again

302
00:16:58,520 --> 00:17:03,590
so now I'm just gonna I'm just gonna

303
00:17:00,890 --> 00:17:06,260
check that I don't got anything

304
00:17:03,590 --> 00:17:08,120
listening to 1 2 3 4 5 which is the

305
00:17:06,260 --> 00:17:10,369
backdoor I'm gonna create in a minute

306
00:17:08,119 --> 00:17:13,579
and now I would like to show you guys

307
00:17:10,369 --> 00:17:19,939
the Stack Overflow payload so this is an

308
00:17:13,579 --> 00:17:24,699
adjective Equestria Butte and I'm

309
00:17:19,940 --> 00:17:33,710
passing this overflow and I'm executing

310
00:17:24,700 --> 00:17:37,549
telnet D to port 1 2 3 4 5 ok so let's

311
00:17:33,710 --> 00:17:44,190
make it happen and I'm just gonna

312
00:17:37,549 --> 00:17:50,940
host this stackoverflow payload to my

313
00:17:44,190 --> 00:17:54,240
router two tools underscore our CMD stat

314
00:17:50,940 --> 00:17:59,520
dot JSP and this is the moment of truth

315
00:17:54,240 --> 00:18:01,110
where everything works hopefully in a

316
00:17:59,520 --> 00:18:02,790
minute okay okay got it

317
00:18:01,110 --> 00:18:05,340
so a message okay it's a great

318
00:18:02,790 --> 00:18:08,760
indication that everything is working

319
00:18:05,340 --> 00:18:10,620
and now I can just login into this one

320
00:18:08,760 --> 00:18:13,590
two three four five port using telnet

321
00:18:10,620 --> 00:18:17,969
and as you see I got myself a busy box

322
00:18:13,590 --> 00:18:20,520
shell and I am the admin again which is

323
00:18:17,970 --> 00:18:29,340
of course part of the route group and

324
00:18:20,520 --> 00:18:32,910
this is it thank you very much yes I

325
00:18:29,340 --> 00:18:34,860
want one more demo to go okay the last

326
00:18:32,910 --> 00:18:38,340
one is the most complicated one but yeah

327
00:18:34,860 --> 00:18:42,240
we'll we'll make it through well okay so

328
00:18:38,340 --> 00:18:44,730
to understand how I was able to exploit

329
00:18:42,240 --> 00:18:48,270
this stack overflow I would like to

330
00:18:44,730 --> 00:18:50,940
explain how as a request works so I was

331
00:18:48,270 --> 00:18:55,020
able to run both embed this web server

332
00:18:50,940 --> 00:18:58,799
and EMF D on the PMU system emulation

333
00:18:55,020 --> 00:19:03,059
and that way I was able to inspect a

334
00:18:58,799 --> 00:19:07,470
standard electric West like this one so

335
00:19:03,059 --> 00:19:12,120
here I call the underscore CMD stat dot

336
00:19:07,470 --> 00:19:15,740
JSP page which is mapped into EMF D to a

337
00:19:12,120 --> 00:19:19,469
function called advocacy and e-stat

338
00:19:15,740 --> 00:19:22,860
attack CMD stat receives an action

339
00:19:19,470 --> 00:19:27,000
attribute from the request since the

340
00:19:22,860 --> 00:19:30,780
action is do CMV it uses an adapter

341
00:19:27,000 --> 00:19:34,230
called adapter do command at that the

342
00:19:30,780 --> 00:19:36,629
command calls to do command function the

343
00:19:34,230 --> 00:19:38,900
command function is basically a large

344
00:19:36,630 --> 00:19:42,960
switch case function that executes

345
00:19:38,900 --> 00:19:46,220
different logics based on what it gets

346
00:19:42,960 --> 00:19:47,740
on the attribute in this example it gets

347
00:19:46,220 --> 00:19:49,840
get connects

348
00:19:47,740 --> 00:19:55,360
stutters which calls a function called

349
00:19:49,840 --> 00:19:57,699
CMD get internet status now let's look

350
00:19:55,360 --> 00:20:01,719
on a page that do not perform this

351
00:19:57,700 --> 00:20:06,340
session check yeah as you can see no no

352
00:20:01,720 --> 00:20:09,970
cookie EMF D map EMF D maps underscore

353
00:20:06,340 --> 00:20:13,059
our CMD stat dot JSP to a function

354
00:20:09,970 --> 00:20:16,059
called add jaques restricted CMD step

355
00:20:13,059 --> 00:20:19,120
this is where they are come from this

356
00:20:16,059 --> 00:20:21,879
function also called a Jackson v stat

357
00:20:19,120 --> 00:20:27,309
but with a very limited set of commands

358
00:20:21,880 --> 00:20:31,570
this specific requests passes CMD a.m.

359
00:20:27,309 --> 00:20:36,240
zap D to do command and it runs an

360
00:20:31,570 --> 00:20:39,520
executable call zap this is how zap

361
00:20:36,240 --> 00:20:42,010
command runs in the shell we see that we

362
00:20:39,520 --> 00:20:44,530
can control its server and client

363
00:20:42,010 --> 00:20:48,940
argument by passing attributes server

364
00:20:44,530 --> 00:20:51,850
and client and the thing is the server

365
00:20:48,940 --> 00:20:54,280
and the clients are not sanitized good

366
00:20:51,850 --> 00:20:57,550
enough so I could just pass the

367
00:20:54,280 --> 00:21:02,250
unintended argument to zap in this

368
00:20:57,550 --> 00:21:07,540
example I'm passing minus D /tmp / b

369
00:21:02,250 --> 00:21:11,140
coma crush me please ok so i was able to

370
00:21:07,540 --> 00:21:13,960
find zap sources online and Rocko's

371
00:21:11,140 --> 00:21:18,400
described it as designed to be a robust

372
00:21:13,960 --> 00:21:20,380
network performance test tool and when I

373
00:21:18,400 --> 00:21:23,700
examine the code I notice there is a

374
00:21:20,380 --> 00:21:28,900
stack buffer overflow in - the arguments

375
00:21:23,700 --> 00:21:31,950
yeah so here's the code that parses the

376
00:21:28,900 --> 00:21:35,559
minus D arguments let's see what he does

377
00:21:31,950 --> 00:21:38,770
so first it replaces all colors

378
00:21:35,559 --> 00:21:42,370
character with spaces then it copies

379
00:21:38,770 --> 00:21:45,580
every segment to a temp buffer and since

380
00:21:42,370 --> 00:21:49,928
it expects a number it uses a very small

381
00:21:45,580 --> 00:21:52,928
buffer 10 in this case and well Roku's

382
00:21:49,929 --> 00:21:56,290
to try to be secured here by using str

383
00:21:52,929 --> 00:21:58,780
and copy but they use the entire string

384
00:21:56,290 --> 00:22:00,820
length for n so it doesn't really

385
00:21:58,780 --> 00:22:01,129
protect anything and i was able to smash

386
00:22:00,820 --> 00:22:06,080
this

387
00:22:01,130 --> 00:22:11,360
FAK anyway and for exploitation so they

388
00:22:06,080 --> 00:22:12,439
are 510 uses both an X and a SLR to

389
00:22:11,360 --> 00:22:16,699
overcome a Nicks

390
00:22:12,440 --> 00:22:19,580
I decided to use Road gadget I used two

391
00:22:16,700 --> 00:22:22,760
gadget to run system with a pointer to

392
00:22:19,580 --> 00:22:26,000
my payload and in this case I'm using 10

393
00:22:22,760 --> 00:22:31,430
the D to run being a sage as a login

394
00:22:26,000 --> 00:22:34,910
page on port 1 2 3 4 5 s for a SLR sends

395
00:22:31,430 --> 00:22:37,370
app is forked from EMF D I can just use

396
00:22:34,910 --> 00:22:42,890
a brute force approach and overcome its

397
00:22:37,370 --> 00:22:46,250
9 bits of randomness alright so now I

398
00:22:42,890 --> 00:22:49,760
would like to look at a request that

399
00:22:46,250 --> 00:22:53,120
runs zap command again if I can control

400
00:22:49,760 --> 00:22:55,150
the server and the client attributes why

401
00:22:53,120 --> 00:22:58,639
can I just use it for command injection

402
00:22:55,150 --> 00:23:00,770
right to understand this I need to X to

403
00:22:58,640 --> 00:23:04,580
understand how zap command is being

404
00:23:00,770 --> 00:23:08,240
executed here we see that the command

405
00:23:04,580 --> 00:23:12,830
uses x ik c s-- command implementation

406
00:23:08,240 --> 00:23:16,130
to runs up so x axis and the

407
00:23:12,830 --> 00:23:20,179
implementation is a function in libya MF

408
00:23:16,130 --> 00:23:23,420
this function first calls to find sis

409
00:23:20,180 --> 00:23:27,790
wrapper function and then it uses v fork

410
00:23:23,420 --> 00:23:31,640
to v4n x ik v to execute a shell command

411
00:23:27,790 --> 00:23:35,139
now let's look on find sis wrapper D

412
00:23:31,640 --> 00:23:38,660
compiled code we can see it looks for

413
00:23:35,140 --> 00:23:42,920
slash bin slash cysts underscore wrapper

414
00:23:38,660 --> 00:23:45,770
dot Sh if this street is available its

415
00:23:42,920 --> 00:23:50,510
update a global variable that I named

416
00:23:45,770 --> 00:23:52,780
CST's wrapper path now exit CCM the

417
00:23:50,510 --> 00:23:56,570
implementation executes slash bin slash

418
00:23:52,780 --> 00:23:58,970
sis wrapper and in our case it runs

419
00:23:56,570 --> 00:24:01,790
recommend with the arguments from the

420
00:23:58,970 --> 00:24:06,710
ajik week rest such as our server and

421
00:24:01,790 --> 00:24:11,820
client ok so as you can see sis wrapper

422
00:24:06,710 --> 00:24:14,790
is a very big script shell shell script

423
00:24:11,820 --> 00:24:18,240
it handles many command but what's

424
00:24:14,790 --> 00:24:22,350
really interesting to me was command the

425
00:24:18,240 --> 00:24:25,350
Zap execution command here we see that

426
00:24:22,350 --> 00:24:29,250
slash bin slash Zapp is being executed

427
00:24:25,350 --> 00:24:33,030
with ops variable this variable received

428
00:24:29,250 --> 00:24:37,560
both server and client values from our

429
00:24:33,030 --> 00:24:39,899
request however ops gets its value with

430
00:24:37,560 --> 00:24:43,230
a quotation mark and that stops me from

431
00:24:39,900 --> 00:24:46,140
injecting other commands yeah well

432
00:24:43,230 --> 00:24:49,380
that's really I was really hoping for

433
00:24:46,140 --> 00:24:53,490
this command injection and this made my

434
00:24:49,380 --> 00:24:56,760
life sucks for a while but what kept me

435
00:24:53,490 --> 00:25:00,450
really entertained and motivated was the

436
00:24:56,760 --> 00:25:02,340
fact that ruckus had the weirdest CLI in

437
00:25:00,450 --> 00:25:04,980
their framework so before I continue

438
00:25:02,340 --> 00:25:08,490
with my next attack I would like to show

439
00:25:04,980 --> 00:25:11,730
you another raucous CLI so this is the

440
00:25:08,490 --> 00:25:15,750
CLI I had to escape when I used SSH on

441
00:25:11,730 --> 00:25:18,480
my first attack and this is an entire

442
00:25:15,750 --> 00:25:21,240
different CLI that also being used by

443
00:25:18,480 --> 00:25:25,940
the device I noticed that kin it can be

444
00:25:21,240 --> 00:25:29,370
reached after system resets so this CLI

445
00:25:25,940 --> 00:25:32,370
also got the hidden command exclamation

446
00:25:29,370 --> 00:25:34,409
mark V 54 exclamation mark that also

447
00:25:32,370 --> 00:25:37,590
supposed to escape to a busy box shell

448
00:25:34,410 --> 00:25:41,450
but it also needed a device serial

449
00:25:37,590 --> 00:25:46,879
number and I don't get this number so

450
00:25:41,450 --> 00:25:50,460
well however this V 54 this one uses

451
00:25:46,880 --> 00:25:54,690
content from a file called axis in

452
00:25:50,460 --> 00:25:57,360
writable ATC system the content of this

453
00:25:54,690 --> 00:25:59,870
axis file was written by another hidden

454
00:25:57,360 --> 00:26:02,909
command called ruckus

455
00:25:59,870 --> 00:26:06,360
well I discovered that rockers command

456
00:26:02,910 --> 00:26:09,480
can write a command injection payload to

457
00:26:06,360 --> 00:26:13,139
V 54 and then it can be triggered by

458
00:26:09,480 --> 00:26:15,690
calling the V 54 command and then uh and

459
00:26:13,140 --> 00:26:17,200
that way I was able to escape to to a

460
00:26:15,690 --> 00:26:20,920
busy box shell

461
00:26:17,200 --> 00:26:23,890
but that's not interesting what's really

462
00:26:20,920 --> 00:26:25,750
interesting is the weird stuff so when I

463
00:26:23,890 --> 00:26:28,510
called raucous command to save my

464
00:26:25,750 --> 00:26:33,010
payload this is the output I got and

465
00:26:28,510 --> 00:26:37,540
this one and this one yeah woof woof

466
00:26:33,010 --> 00:26:41,200
bow bow and ruff right yeah so the CLI

467
00:26:37,540 --> 00:26:44,320
actually barks at you yeah

468
00:26:41,200 --> 00:26:46,960
and now when I call the V 54 to execute

469
00:26:44,320 --> 00:26:48,879
my command injection to escape show well

470
00:26:46,960 --> 00:26:52,090
it asked me what the chow

471
00:26:48,880 --> 00:26:55,510
I think ouch ow dogs not seriously about

472
00:26:52,090 --> 00:26:58,000
what the actual yeah well but and

473
00:26:55,510 --> 00:27:00,610
the end of all of this I was able to run

474
00:26:58,000 --> 00:27:03,370
a busy box shell so I didn't really care

475
00:27:00,610 --> 00:27:05,620
about those weird Easter eggs but still

476
00:27:03,370 --> 00:27:06,219
it was pretty entertaining worth

477
00:27:05,620 --> 00:27:09,219
mentioning

478
00:27:06,220 --> 00:27:12,340
well I still wanted to receive a pre off

479
00:27:09,220 --> 00:27:15,670
RC by command injection I just knew that

480
00:27:12,340 --> 00:27:18,100
EMF D gotta be vulnerable it took me

481
00:27:15,670 --> 00:27:20,560
some time but eventually I was able to

482
00:27:18,100 --> 00:27:23,040
make this happen so this is my last

483
00:27:20,560 --> 00:27:26,889
attack where I found command injection

484
00:27:23,040 --> 00:27:29,920
vulnerability and I was able to reach it

485
00:27:26,890 --> 00:27:33,990
without authentication by writing my own

486
00:27:29,920 --> 00:27:37,350
webpage okay so as I mentioned before

487
00:27:33,990 --> 00:27:41,920
EMF D execute code in a really messy way

488
00:27:37,350 --> 00:27:45,340
EMF D sometimes uses lip EMF other times

489
00:27:41,920 --> 00:27:48,700
calls the shell script C's wrapper dot

490
00:27:45,340 --> 00:27:53,290
sage that we saw and sometimes just run

491
00:27:48,700 --> 00:27:55,870
a command itself with lip see these are

492
00:27:53,290 --> 00:28:00,010
all the different function that EMF D

493
00:27:55,870 --> 00:28:03,909
uses to execute shellcode as we can see

494
00:28:00,010 --> 00:28:06,730
here there are 107 lip see system

495
00:28:03,910 --> 00:28:10,330
function call so I had to find a page

496
00:28:06,730 --> 00:28:13,570
that uses this system function without

497
00:28:10,330 --> 00:28:16,000
fur without sanitation and actually I

498
00:28:13,570 --> 00:28:17,889
was able to find four functions that

499
00:28:16,000 --> 00:28:20,260
call system and were vulnerable to

500
00:28:17,890 --> 00:28:22,900
command injection today I will be

501
00:28:20,260 --> 00:28:26,550
showing the injection on the last one

502
00:28:22,900 --> 00:28:29,490
which is CMD import a VP port

503
00:28:26,550 --> 00:28:32,669
all right so to reach the vulnerable

504
00:28:29,490 --> 00:28:36,030
function I needed to send an object

505
00:28:32,670 --> 00:28:39,180
request to slash admin / underscore CMD

506
00:28:36,030 --> 00:28:40,800
stat dot JSP and my request should look

507
00:28:39,180 --> 00:28:44,100
something like this

508
00:28:40,800 --> 00:28:49,409
I'm passing a command with CMD equals

509
00:28:44,100 --> 00:28:54,419
import AVP port this uses do command to

510
00:28:49,410 --> 00:28:58,980
call em2 called CMD import AVP port

511
00:28:54,420 --> 00:29:02,190
function this function uses Lipsy system

512
00:28:58,980 --> 00:29:04,650
function unsafely here we can see that

513
00:29:02,190 --> 00:29:08,460
the function we see the function D

514
00:29:04,650 --> 00:29:11,550
compiled code so all I had to do is to

515
00:29:08,460 --> 00:29:14,100
pass a command injection in the upload

516
00:29:11,550 --> 00:29:17,129
file attribute and as you can see it

517
00:29:14,100 --> 00:29:21,060
just executed without sanitation all

518
00:29:17,130 --> 00:29:23,070
right so was it that simple well no I

519
00:29:21,060 --> 00:29:25,080
still needed to be authenticated to

520
00:29:23,070 --> 00:29:28,770
reach this function as you can see here

521
00:29:25,080 --> 00:29:32,250
I'm using a valid cookie well the

522
00:29:28,770 --> 00:29:36,540
problem was that underscore CMD stat dot

523
00:29:32,250 --> 00:29:39,600
JSP page checks for session and only

524
00:29:36,540 --> 00:29:44,879
then it calls the vulnerable education

525
00:29:39,600 --> 00:29:47,070
this Ted function also so I needed

526
00:29:44,880 --> 00:29:51,390
basically a different approach for this

527
00:29:47,070 --> 00:29:54,270
problem and what if I could write a new

528
00:29:51,390 --> 00:29:56,610
page that only calls Ajax to see and

529
00:29:54,270 --> 00:29:59,600
this Ted and do not use this session

530
00:29:56,610 --> 00:30:03,510
check call at all it might actually work

531
00:29:59,600 --> 00:30:06,990
it did work for this I decided to use

532
00:30:03,510 --> 00:30:09,690
the zap executable again that has a lot

533
00:30:06,990 --> 00:30:12,420
of different arguments and we already

534
00:30:09,690 --> 00:30:16,170
know that we can pass an Intendant

535
00:30:12,420 --> 00:30:20,550
arguments without any authentication so

536
00:30:16,170 --> 00:30:24,390
one of them is to set a path for zaps

537
00:30:20,550 --> 00:30:27,020
log however writing a file is not enough

538
00:30:24,390 --> 00:30:31,350
I need to control its content as well

539
00:30:27,020 --> 00:30:34,710
well for this I used these tag sab and

540
00:30:31,350 --> 00:30:37,439
node arguments they get a string and

541
00:30:34,710 --> 00:30:39,820
just write it in the log file for some

542
00:30:37,440 --> 00:30:44,450
extra information

543
00:30:39,820 --> 00:30:48,110
so here's the lock file writing code it

544
00:30:44,450 --> 00:30:52,760
get the file path directly directly from

545
00:30:48,110 --> 00:30:55,429
- L argument and I can control the lock

546
00:30:52,760 --> 00:31:00,320
contents by passing the arguments notes

547
00:30:55,430 --> 00:31:02,240
tag and sub well that's great but

548
00:31:00,320 --> 00:31:06,110
unfortunately there are more problem to

549
00:31:02,240 --> 00:31:10,310
solve here so I want to write a page and

550
00:31:06,110 --> 00:31:14,000
it has to be on the slash web directory

551
00:31:10,310 --> 00:31:17,240
the problem was that slash web is a part

552
00:31:14,000 --> 00:31:19,540
of the squash FS filesystem which is a

553
00:31:17,240 --> 00:31:23,810
read-only file system

554
00:31:19,540 --> 00:31:26,120
luckily slash web slash uploads uploaded

555
00:31:23,810 --> 00:31:28,940
directory is symbolically linked to

556
00:31:26,120 --> 00:31:32,330
slash writable slash CDC slash air

557
00:31:28,940 --> 00:31:36,220
spider and this directory is on a

558
00:31:32,330 --> 00:31:39,860
writable file system yay for me okay so

559
00:31:36,220 --> 00:31:43,570
now that I renew I can write a file with

560
00:31:39,860 --> 00:31:46,760
my content to a writable web directory

561
00:31:43,570 --> 00:31:49,700
the only problem left to solve was that

562
00:31:46,760 --> 00:31:53,270
zap executable needed to connect to

563
00:31:49,700 --> 00:31:57,590
something called TX station otherwise it

564
00:31:53,270 --> 00:32:01,790
will not write any log file well since I

565
00:31:57,590 --> 00:32:04,879
got zapped sources I would I was able to

566
00:32:01,790 --> 00:32:08,750
compile this pig station and now I can

567
00:32:04,880 --> 00:32:11,630
set zap to connect to a TX station on my

568
00:32:08,750 --> 00:32:14,960
computer awesome

569
00:32:11,630 --> 00:32:19,300
so this was the request I needed to send

570
00:32:14,960 --> 00:32:22,160
and it executed this is AB command

571
00:32:19,300 --> 00:32:24,889
notice that I'm using two arguments

572
00:32:22,160 --> 00:32:29,150
minus s and minus D tag to write my

573
00:32:24,890 --> 00:32:30,110
delegate call finally zap has wrote a

574
00:32:29,150 --> 00:32:33,290
log file

575
00:32:30,110 --> 00:32:38,149
to slash web slash uploaded slash index

576
00:32:33,290 --> 00:32:41,030
dot JSP although this page was pretty

577
00:32:38,150 --> 00:32:43,430
much full of junk that did not bother me

578
00:32:41,030 --> 00:32:45,110
because what interested me was the

579
00:32:43,430 --> 00:32:50,090
delegate calls to the vulnerable

580
00:32:45,110 --> 00:32:52,800
function okay so I could now change

581
00:32:50,090 --> 00:32:56,280
those two vulnerabilities together

582
00:32:52,800 --> 00:32:59,520
first I write a page to slash uploaded

583
00:32:56,280 --> 00:33:03,810
slash web slash uploaded slash index dot

584
00:32:59,520 --> 00:33:08,100
JSP now I can send my command injection

585
00:33:03,810 --> 00:33:10,860
payload to the page I just wrote alright

586
00:33:08,100 --> 00:33:12,600
this is the time for the most

587
00:33:10,860 --> 00:33:20,820
complicated demo so I'll drink water

588
00:33:12,600 --> 00:33:25,290
before that okay so for that I will need

589
00:33:20,820 --> 00:33:27,300
two terminals the first one wait let me

590
00:33:25,290 --> 00:33:31,590
just get out this one

591
00:33:27,300 --> 00:33:34,139
awesome okay so on the first one I gonna

592
00:33:31,590 --> 00:33:38,669
run the tea station which here it's

593
00:33:34,140 --> 00:33:47,250
called zap D and I'm gonna listen to

594
00:33:38,670 --> 00:33:50,490
port 4 4 4 4 4 reverse shell now ok now

595
00:33:47,250 --> 00:33:55,740
I would like to show you guys the page

596
00:33:50,490 --> 00:33:59,130
create payload so I'm using the server

597
00:33:55,740 --> 00:34:04,020
attribute again and now now I am writing

598
00:33:59,130 --> 00:34:09,020
a page called index.jsp with a delegate

599
00:34:04,020 --> 00:34:15,300
call right to advocacy in this tape so

600
00:34:09,020 --> 00:34:21,199
let's just write this page I'm going to

601
00:34:15,300 --> 00:34:25,140
post it H create to the router Tools

602
00:34:21,199 --> 00:34:28,889
underscore our CMD stat dot JSP

603
00:34:25,139 --> 00:34:31,879
and hopefully I'll get myself a new page

604
00:34:28,889 --> 00:34:34,199
in any minute

605
00:34:31,880 --> 00:34:37,380
ok awesome

606
00:34:34,199 --> 00:34:39,719
now I would like to show you the command

607
00:34:37,380 --> 00:34:47,240
injection payload so I'm using that

608
00:34:39,719 --> 00:34:51,600
vbeauté uploaded file and I'm gonna run

609
00:34:47,239 --> 00:34:54,600
netcat to connect through my host on

610
00:34:51,600 --> 00:34:57,710
port 4 4 4 4 to my to my computer on

611
00:34:54,600 --> 00:35:02,339
board 4 4 4 4

612
00:34:57,710 --> 00:35:06,510
all right so let's send the command

613
00:35:02,340 --> 00:35:09,540
injection payload to the router upload

614
00:35:06,510 --> 00:35:13,890
this is the page I just wrote uploaded

615
00:35:09,540 --> 00:35:19,410
index dot JSP okay and now I can switch

616
00:35:13,890 --> 00:35:24,660
to my other terminal and hopefully you

617
00:35:19,410 --> 00:35:26,879
can see that I am the root user and of

618
00:35:24,660 --> 00:35:33,799
course the root user is part of the

619
00:35:26,880 --> 00:35:40,140
routes group in passwd right this is it

620
00:35:33,800 --> 00:35:44,730
okay so in conclusion I demonstrated

621
00:35:40,140 --> 00:35:47,819
today three preauth RCS the first one

622
00:35:44,730 --> 00:35:51,180
was credential leakage with CLI

623
00:35:47,820 --> 00:35:54,030
jailbreak the second one was stack

624
00:35:51,180 --> 00:35:56,870
overflow without authentication and the

625
00:35:54,030 --> 00:36:00,450
last one was command injection with

626
00:35:56,870 --> 00:36:03,330
authentication bypass I also shared my

627
00:36:00,450 --> 00:36:06,149
Dockers setup and introduced a very

628
00:36:03,330 --> 00:36:09,680
useful deidre script that helped me with

629
00:36:06,150 --> 00:36:13,530
my research and I think and help others

630
00:36:09,680 --> 00:36:14,910
well raucous network was inform about

631
00:36:13,530 --> 00:36:18,900
these vulnerabilities

632
00:36:14,910 --> 00:36:24,629
I requested 10 CVS for this research and

633
00:36:18,900 --> 00:36:27,390
they confirm these CDs and yeah if there

634
00:36:24,630 --> 00:36:28,950
are any raucous users here

635
00:36:27,390 --> 00:36:32,009
you should stop what you're doing and

636
00:36:28,950 --> 00:36:35,730
check that you runs the latest teamwork

637
00:36:32,010 --> 00:36:39,240
if not you may be victim to a very

638
00:36:35,730 --> 00:36:43,890
serious abuse so again check that the

639
00:36:39,240 --> 00:36:45,930
femur is updated please ok and since I

640
00:36:43,890 --> 00:36:49,529
published my research I was able to

641
00:36:45,930 --> 00:36:53,100
fingerprint some interesting users with

642
00:36:49,530 --> 00:36:56,010
showed an IO two of them were Brazil's

643
00:36:53,100 --> 00:36:59,009
and Ireland national research and

644
00:36:56,010 --> 00:37:01,530
educational networks these are very big

645
00:36:59,010 --> 00:37:02,880
networks that usually connect to

646
00:37:01,530 --> 00:37:06,270
high-speed backbones

647
00:37:02,880 --> 00:37:09,000
well these networks did not update their

648
00:37:06,270 --> 00:37:10,240
fin were and they were exploitable from

649
00:37:09,000 --> 00:37:13,930
the Internet

650
00:37:10,240 --> 00:37:16,140
and well the funny part is that Brazil's

651
00:37:13,930 --> 00:37:19,629
network is actually posting

652
00:37:16,140 --> 00:37:22,180
vulnerability alerts on Twitter but yet

653
00:37:19,630 --> 00:37:25,450
they did not know about their own

654
00:37:22,180 --> 00:37:28,569
vulnerabilities well anyway I informed

655
00:37:25,450 --> 00:37:31,270
all the networks I was able to find on

656
00:37:28,570 --> 00:37:36,250
the Internet and hopefully all of them

657
00:37:31,270 --> 00:37:39,520
updated their devices and well so this

658
00:37:36,250 --> 00:37:41,260
research was a lot of fun and it

659
00:37:39,520 --> 00:37:45,250
involved all sorts of different

660
00:37:41,260 --> 00:37:48,010
vulnerabilities well it was also an

661
00:37:45,250 --> 00:37:50,140
excellent opportunity to check my darker

662
00:37:48,010 --> 00:37:52,810
emulation environment which proved

663
00:37:50,140 --> 00:37:55,060
itself very useful there's a blog post

664
00:37:52,810 --> 00:37:58,029
if anyone wants to get into further

665
00:37:55,060 --> 00:38:01,119
details so check out this the post

666
00:37:58,030 --> 00:38:03,340
it's on Aleph security calm and while

667
00:38:01,119 --> 00:38:07,960
you there check our other amazing

668
00:38:03,340 --> 00:38:10,540
research done by the team and yeah so I

669
00:38:07,960 --> 00:38:13,780
will also like to mention that I

670
00:38:10,540 --> 00:38:17,009
conducted a follow-up research on ruckus

671
00:38:13,780 --> 00:38:22,660
and found more vulnerabilities and

672
00:38:17,010 --> 00:38:24,060
different way to gain preauth RCS yes so

673
00:38:22,660 --> 00:38:26,740
at this moment

674
00:38:24,060 --> 00:38:29,200
unfortunately I we're still in a

675
00:38:26,740 --> 00:38:32,979
disclosure process so I get I can't get

676
00:38:29,200 --> 00:38:35,350
into details but I will definitely share

677
00:38:32,980 --> 00:38:38,859
my findings findings in the near future

678
00:38:35,350 --> 00:38:40,120
and off yeah so this is it thank you

679
00:38:38,859 --> 00:38:49,319
guys very much for listening

680
00:38:40,120 --> 00:38:49,319
[Applause]

681
00:38:51,060 --> 00:38:59,830
thank you girl for a missing session our

682
00:38:55,660 --> 00:39:02,410
next session is by Alexei Alexei is a

683
00:38:59,830 --> 00:39:05,230
senior specialist in the threat analysis

684
00:39:02,410 --> 00:39:07,930
crew he will be delivering a session on

685
00:39:05,230 --> 00:39:12,880
malware number 41 a new sophisticated

686
00:39:07,930 --> 00:39:15,240
loader by apt blue ta 5:05 such data

687
00:39:12,880 --> 00:39:15,240
source

688
00:39:39,910 --> 00:39:49,868
if anyone want to ask for some question

689
00:39:43,430 --> 00:40:03,259
to bal sir you can ask anyone

690
00:39:49,869 --> 00:40:05,630
please sir the TX station bit I did not

691
00:40:03,259 --> 00:40:07,009
get that part and it if it's there on

692
00:40:05,630 --> 00:40:10,039
the Block then it's fine

693
00:40:07,009 --> 00:40:11,690
I'll read up more on it if you are

694
00:40:10,039 --> 00:40:15,319
getting if you can repeat the question

695
00:40:11,690 --> 00:40:18,319
the part about the TX station bit that

696
00:40:15,319 --> 00:40:20,390
part the TX station that involves like

697
00:40:18,319 --> 00:40:22,849
the authentication session yeah yeah

698
00:40:20,390 --> 00:40:27,009
yeah so yeah so basically each page

699
00:40:22,849 --> 00:40:29,599
check each page checks if the session is

700
00:40:27,009 --> 00:40:33,230
valid before continuing with other

701
00:40:29,599 --> 00:40:36,799
functionality and the thing is that Rock

702
00:40:33,230 --> 00:40:41,989
use did not perform this session check

703
00:40:36,799 --> 00:40:43,579
for other for some pages so this was the

704
00:40:41,989 --> 00:40:46,549
attack vector if I'm like the attack

705
00:40:43,579 --> 00:40:48,499
surface because I needed to find pages

706
00:40:46,549 --> 00:40:50,480
that did not perform this session check

707
00:40:48,499 --> 00:40:54,109
which is a delegate call which is like

708
00:40:50,480 --> 00:40:56,450
mechanism in the EMF D so I just needed

709
00:40:54,109 --> 00:40:58,910
to map all of those and those are the

710
00:40:56,450 --> 00:41:02,210
file that I needed to attack in order to

711
00:40:58,910 --> 00:41:05,420
get like provisions escalation or free

712
00:41:02,210 --> 00:41:09,710
or do stuff like posted without

713
00:41:05,420 --> 00:41:18,799
authentication pre off right any other

714
00:41:09,710 --> 00:41:20,569
questions all right thank you guys so

715
00:41:18,799 --> 00:41:22,430
have you ever encountered a situation

716
00:41:20,569 --> 00:41:24,079
where you are able to restore the remote

717
00:41:22,430 --> 00:41:25,940
code execution and vendor is not

718
00:41:24,079 --> 00:41:29,690
responding to you wait I can barely hear

719
00:41:25,940 --> 00:41:31,759
ya have you ever encountered a situation

720
00:41:29,690 --> 00:41:35,239
where you discovered a critical bug like

721
00:41:31,759 --> 00:41:40,549
RC again preauth RC and Windows is not

722
00:41:35,239 --> 00:41:43,400
responding to you so the so are you

723
00:41:40,549 --> 00:41:46,220
thinking about like the third RC or any

724
00:41:43,400 --> 00:41:48,410
you know any RC in any other product

725
00:41:46,220 --> 00:41:51,140
maybe your where when the vendor is not

726
00:41:48,410 --> 00:41:52,790
responding to you after coating to ender

727
00:41:51,140 --> 00:41:54,170
okay so

728
00:41:52,790 --> 00:41:58,100
I thought raucous about everything we

729
00:41:54,170 --> 00:42:03,020
started disclosure around September so

730
00:41:58,100 --> 00:42:06,799
now all the things I show supposed to be

731
00:42:03,020 --> 00:42:08,240
fixed in the latest framework so do you

732
00:42:06,800 --> 00:42:11,980
have to take a written permission for

733
00:42:08,240 --> 00:42:14,930
that like I am presenting my research

734
00:42:11,980 --> 00:42:17,660
I'm not sure I I understand

735
00:42:14,930 --> 00:42:19,339
can you revisit okay we will take it

736
00:42:17,660 --> 00:42:21,790
offline no problem okay sure

737
00:42:19,340 --> 00:42:21,790
Thanks

