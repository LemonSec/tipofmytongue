1
00:00:02,750 --> 00:00:11,839
thanks very much yeah good afternoon no

2
00:00:05,660 --> 00:00:14,150
con I hope you had a good lunch just to

3
00:00:11,839 --> 00:00:16,730
flesh out the background a little bit

4
00:00:14,150 --> 00:00:19,100
yeah I work for Google's project zero

5
00:00:16,730 --> 00:00:21,830
team I have over 10 years of experience

6
00:00:19,100 --> 00:00:24,260
of researching on Windows finding

7
00:00:21,830 --> 00:00:27,889
interesting logical privilege escalation

8
00:00:24,260 --> 00:00:30,109
vulnerabilities primarily I suppose also

9
00:00:27,890 --> 00:00:32,540
which is kind of important for this talk

10
00:00:30,109 --> 00:00:34,580
is I'm one of the owners of be the

11
00:00:32,540 --> 00:00:38,089
chromium Windows sandbox code so I

12
00:00:34,580 --> 00:00:39,800
actually implement code in chromium to

13
00:00:38,090 --> 00:00:42,980
improve the Windows sandbox and that's

14
00:00:39,800 --> 00:00:44,239
definitely an interest of mine so follow

15
00:00:42,980 --> 00:00:46,699
me on Twitter or whatever I'll pick up

16
00:00:44,239 --> 00:00:47,930
my book whatever you want to do so what

17
00:00:46,700 --> 00:00:50,120
is it I'm actually going to be talking

18
00:00:47,930 --> 00:00:53,809
about so obviously is that this is the

19
00:00:50,120 --> 00:00:55,640
flashback track so in 2015 I came and

20
00:00:53,809 --> 00:00:58,578
talked about Windows sound boxing and

21
00:00:55,640 --> 00:01:01,699
the sort of difficulties around

22
00:00:58,579 --> 00:01:04,340
implementing them on Windows from a user

23
00:01:01,699 --> 00:01:06,170
mode perspective and also sort of why

24
00:01:04,340 --> 00:01:07,970
they existed so let's just recap a

25
00:01:06,170 --> 00:01:10,070
little bit of of that sort of

26
00:01:07,970 --> 00:01:14,480
presentation just to to gathers onto the

27
00:01:10,070 --> 00:01:16,039
same footing so of course in the good

28
00:01:14,480 --> 00:01:18,320
old days or bad old days depending on

29
00:01:16,040 --> 00:01:20,300
which side of the fence you are on any

30
00:01:18,320 --> 00:01:22,369
application which was potentially

31
00:01:20,300 --> 00:01:24,679
processing untrusted content was

32
00:01:22,370 --> 00:01:26,870
probably as running as a normal user

33
00:01:24,680 --> 00:01:28,940
privilege maybe even running as an

34
00:01:26,870 --> 00:01:30,280
administrator and of course if you found

35
00:01:28,940 --> 00:01:33,920
some sort of remote code execution

36
00:01:30,280 --> 00:01:35,600
vulnerability well then that's game over

37
00:01:33,920 --> 00:01:37,490
basically the attacker can come in

38
00:01:35,600 --> 00:01:41,660
compromise your application and

39
00:01:37,490 --> 00:01:43,070
potentially run code as you now it

40
00:01:41,660 --> 00:01:44,929
seemed that the likelihood of

41
00:01:43,070 --> 00:01:48,350
eliminating remote code execution was

42
00:01:44,930 --> 00:01:50,480
pretty low so instead let's just make it

43
00:01:48,350 --> 00:01:52,850
more difficult for the attacker once

44
00:01:50,480 --> 00:01:54,890
they get in to actually compromise the

45
00:01:52,850 --> 00:01:57,350
rest of the operating system and that's

46
00:01:54,890 --> 00:01:59,900
where sandbox is come in sandbox is add

47
00:01:57,350 --> 00:02:02,839
that extra hop from remote code

48
00:01:59,900 --> 00:02:06,110
execution to actually compromising the

49
00:02:02,840 --> 00:02:08,090
full system and depending on how you

50
00:02:06,110 --> 00:02:11,060
implement them depends on how good they

51
00:02:08,090 --> 00:02:13,700
are so there are some sort of basic

52
00:02:11,060 --> 00:02:16,280
requirements for sandboxes certainly for

53
00:02:13,700 --> 00:02:18,859
ones which you want to to implement in

54
00:02:16,280 --> 00:02:20,990
in a useful way now first one is

55
00:02:18,860 --> 00:02:24,680
obviously you want something which is

56
00:02:20,990 --> 00:02:26,240
relatively easy to to get into you don't

57
00:02:24,680 --> 00:02:28,490
want to have to write specialist code

58
00:02:26,240 --> 00:02:30,170
which means to take into account that

59
00:02:28,490 --> 00:02:33,440
it's sandbox you kind of just want it to

60
00:02:30,170 --> 00:02:35,510
just look at the box but of course you

61
00:02:33,440 --> 00:02:38,480
also want it slow it's very difficult to

62
00:02:35,510 --> 00:02:40,609
get out of again so if the attacker gets

63
00:02:38,480 --> 00:02:42,769
remote code execution inside your

64
00:02:40,610 --> 00:02:43,940
application it doesn't mean they can

65
00:02:42,770 --> 00:02:47,900
then compromise the rest of the

66
00:02:43,940 --> 00:02:50,000
operating system but we'd also want to

67
00:02:47,900 --> 00:02:51,050
protect users data there's no point like

68
00:02:50,000 --> 00:02:53,030
stopping you

69
00:02:51,050 --> 00:02:55,160
modifying the operating system if

70
00:02:53,030 --> 00:02:56,720
actually a attacker can just come along

71
00:02:55,160 --> 00:02:59,060
and Hoover up all your private

72
00:02:56,720 --> 00:03:02,390
information leak it off to a web server

73
00:02:59,060 --> 00:03:03,980
somewhere and that's basically from a

74
00:03:02,390 --> 00:03:05,149
certainly from a normal users

75
00:03:03,980 --> 00:03:08,269
perspective that's pretty much your

76
00:03:05,150 --> 00:03:10,850
crown jewels right so you don't want

77
00:03:08,270 --> 00:03:13,030
this to happen you don't want you almost

78
00:03:10,850 --> 00:03:16,459
want the sandbox to also prevent you

79
00:03:13,030 --> 00:03:19,370
accidentally leaking your data but of

80
00:03:16,459 --> 00:03:22,010
course some older son boxes weren't so

81
00:03:19,370 --> 00:03:23,420
good at this the famous example is the

82
00:03:22,010 --> 00:03:24,950
Internet Explorer protecting mode

83
00:03:23,420 --> 00:03:27,980
sandbox which was pretty much the first

84
00:03:24,950 --> 00:03:30,649
major application which had sandbox and

85
00:03:27,980 --> 00:03:33,890
silly the first major browser which had

86
00:03:30,650 --> 00:03:36,110
a sandbox but it did nothing to stop you

87
00:03:33,890 --> 00:03:37,910
having your files take stolen from you

88
00:03:36,110 --> 00:03:40,010
it would stop you compromising the

89
00:03:37,910 --> 00:03:41,480
operating system but anybody running

90
00:03:40,010 --> 00:03:43,970
inside the sandbox could actually just

91
00:03:41,480 --> 00:03:49,220
read all your files and it grew arrest

92
00:03:43,970 --> 00:03:51,109
them out to anywhere on the Internet we

93
00:03:49,220 --> 00:03:53,480
also need to work within the limits of

94
00:03:51,110 --> 00:03:56,180
the operating system I can't actually go

95
00:03:53,480 --> 00:03:58,548
in and modify Windows now I could kind

96
00:03:56,180 --> 00:04:00,650
of I could write a device driver which

97
00:03:58,549 --> 00:04:02,930
patched functions in memory and did

98
00:04:00,650 --> 00:04:05,000
something different but I can't actually

99
00:04:02,930 --> 00:04:08,299
come in and change the actual physical

100
00:04:05,000 --> 00:04:11,390
code Windows chip that to all the

101
00:04:08,299 --> 00:04:13,579
different users across the world because

102
00:04:11,390 --> 00:04:15,048
I'm not Microsoft that I work for

103
00:04:13,579 --> 00:04:17,150
Microsoft and that's very difficult to

104
00:04:15,049 --> 00:04:19,728
do so the sandbox has to be something

105
00:04:17,149 --> 00:04:21,469
which ideally we don't have to like

106
00:04:19,728 --> 00:04:23,240
compromise the integrity of the

107
00:04:21,470 --> 00:04:28,490
operating system just to get a single

108
00:04:23,240 --> 00:04:30,169
sandbox and kind of almost acts

109
00:04:28,490 --> 00:04:33,169
more important than the security is

110
00:04:30,169 --> 00:04:38,479
usability if your sandbox is super super

111
00:04:33,169 --> 00:04:40,068
super secure but it runs at like like 10

112
00:04:38,479 --> 00:04:42,318
percent of the speed of a normal

113
00:04:40,069 --> 00:04:43,940
application well no one is going to in

114
00:04:42,319 --> 00:04:45,319
their right mind wants a sandbox their

115
00:04:43,940 --> 00:04:47,479
code especially something like a web

116
00:04:45,319 --> 00:04:48,860
browser it's just never gonna happen so

117
00:04:47,479 --> 00:04:50,930
it's got to be usable it's got to be

118
00:04:48,860 --> 00:04:52,190
performant if there is a performance

119
00:04:50,930 --> 00:04:57,979
impact there have to be relatively

120
00:04:52,190 --> 00:04:59,960
minimal so on Windows of course you

121
00:04:57,979 --> 00:05:01,359
can't see this it's a bit blurry but on

122
00:04:59,960 --> 00:05:04,060
Windows

123
00:05:01,360 --> 00:05:07,509
most of the sandboxing you will see

124
00:05:04,060 --> 00:05:09,860
applications unboxing is done through

125
00:05:07,509 --> 00:05:12,139
utilizing the the security mechanisms

126
00:05:09,860 --> 00:05:14,360
already built into Windows and the main

127
00:05:12,139 --> 00:05:17,120
one is basically every single resource

128
00:05:14,360 --> 00:05:19,009
whether it be a file it be a process

129
00:05:17,120 --> 00:05:20,570
have something called a security

130
00:05:19,009 --> 00:05:23,840
descriptor associated with it and the

131
00:05:20,570 --> 00:05:25,310
security descriptor defines who that

132
00:05:23,840 --> 00:05:27,560
it's sort of the policy of who is

133
00:05:25,310 --> 00:05:29,210
allowed to access that resource and for

134
00:05:27,560 --> 00:05:35,120
what type of access whether it be say

135
00:05:29,210 --> 00:05:36,948
read or write or execute and the first

136
00:05:35,120 --> 00:05:38,990
step of having a sandbox is having

137
00:05:36,949 --> 00:05:40,400
obviously a configured list of these

138
00:05:38,990 --> 00:05:42,889
security descriptions now for the most

139
00:05:40,400 --> 00:05:45,138
part these are all sort of fixed for you

140
00:05:42,889 --> 00:05:47,300
by the operating system like the files

141
00:05:45,139 --> 00:05:49,599
in system 32 already have a security

142
00:05:47,300 --> 00:05:51,770
descriptor and you running in user mode

143
00:05:49,599 --> 00:05:55,280
shouldn't and couldn't realistically

144
00:05:51,770 --> 00:05:56,539
change them but in that security

145
00:05:55,280 --> 00:05:59,020
descriptor there's three pieces of

146
00:05:56,539 --> 00:06:02,389
information which are critical to

147
00:05:59,020 --> 00:06:04,580
enforcing security that is the the owner

148
00:06:02,389 --> 00:06:06,710
of a secret of the owner of the secured

149
00:06:04,580 --> 00:06:09,050
resource so we called the mandatory

150
00:06:06,710 --> 00:06:10,520
integrity label and something called the

151
00:06:09,050 --> 00:06:14,270
discretionary access control list and

152
00:06:10,520 --> 00:06:15,680
then the decor is basically the core of

153
00:06:14,270 --> 00:06:18,530
the security descriptor it's basically

154
00:06:15,680 --> 00:06:23,690
the the means by which you define what

155
00:06:18,530 --> 00:06:27,138
groups can access that resource in terms

156
00:06:23,690 --> 00:06:28,789
of identity you also have something

157
00:06:27,139 --> 00:06:31,340
called the access token so each process

158
00:06:28,789 --> 00:06:33,650
has an access token and this is the user

159
00:06:31,340 --> 00:06:35,989
identity you use a principal and it

160
00:06:33,650 --> 00:06:39,260
contains the users security identifier

161
00:06:35,990 --> 00:06:41,700
which is usually seen in text form but

162
00:06:39,260 --> 00:06:43,440
actually it's not stored by the

163
00:06:41,700 --> 00:06:46,920
in text form is stored in this binary

164
00:06:43,440 --> 00:06:48,570
blob called a security identifier and so

165
00:06:46,920 --> 00:06:51,120
all groups are actually these binary

166
00:06:48,570 --> 00:06:52,740
blobs really under the hood so you have

167
00:06:51,120 --> 00:06:55,260
your user identity you have your list of

168
00:06:52,740 --> 00:06:57,270
groups which you are associated with you

169
00:06:55,260 --> 00:06:59,010
have a mandatory label or integrity

170
00:06:57,270 --> 00:07:00,630
level which is over the counter parts

171
00:06:59,010 --> 00:07:02,849
the security descriptor and you have

172
00:07:00,630 --> 00:07:07,440
your privileges and privileges is sort

173
00:07:02,850 --> 00:07:09,390
of a short cutting mechanism they almost

174
00:07:07,440 --> 00:07:11,580
like just single bit flags do I have

175
00:07:09,390 --> 00:07:13,530
this privilege or not and so for example

176
00:07:11,580 --> 00:07:15,479
is the time zone privileged and the time

177
00:07:13,530 --> 00:07:17,159
zone privilege defines whether I can

178
00:07:15,480 --> 00:07:19,080
change the time zone so rather than

179
00:07:17,160 --> 00:07:21,210
doing any sort of check or happen to be

180
00:07:19,080 --> 00:07:25,710
in the time zone change of group you

181
00:07:21,210 --> 00:07:28,080
actually have this privilege so when you

182
00:07:25,710 --> 00:07:31,500
actually try and access a resource you

183
00:07:28,080 --> 00:07:33,599
define what access rights you want so I

184
00:07:31,500 --> 00:07:37,020
won't read and write access to this file

185
00:07:33,600 --> 00:07:39,510
for example something simple and the

186
00:07:37,020 --> 00:07:41,909
curl will then go through this access

187
00:07:39,510 --> 00:07:44,880
check operation which consists of three

188
00:07:41,910 --> 00:07:47,610
major steps the first one is a checking

189
00:07:44,880 --> 00:07:50,670
about integrity level now basically in

190
00:07:47,610 --> 00:07:52,950
tech sea level is just a number and like

191
00:07:50,670 --> 00:07:55,320
in a really simplistic terms if your

192
00:07:52,950 --> 00:07:57,659
tokens number is less than the resources

193
00:07:55,320 --> 00:07:59,250
number then you cannot write to that

194
00:07:57,660 --> 00:08:00,720
resource you can only read from that

195
00:07:59,250 --> 00:08:03,780
resource that is a gross

196
00:08:00,720 --> 00:08:06,150
oversimplification but it with seasons

197
00:08:03,780 --> 00:08:07,799
are now you then have something called

198
00:08:06,150 --> 00:08:09,750
an owner check and the owner check just

199
00:08:07,800 --> 00:08:13,500
is there to prevent you locking yourself

200
00:08:09,750 --> 00:08:15,690
out of your own files we don't need to

201
00:08:13,500 --> 00:08:17,070
worry about that too much but really the

202
00:08:15,690 --> 00:08:19,590
data check is where it's all at

203
00:08:17,070 --> 00:08:21,210
the data check is where we check that

204
00:08:19,590 --> 00:08:23,520
list of groups in the security

205
00:08:21,210 --> 00:08:26,280
descriptor against our list of groups in

206
00:08:23,520 --> 00:08:29,760
our access token and determine whether

207
00:08:26,280 --> 00:08:31,830
you've got full access or not and the

208
00:08:29,760 --> 00:08:33,840
end result is either you're granted

209
00:08:31,830 --> 00:08:36,299
access for whatever you you desired in

210
00:08:33,840 --> 00:08:39,750
the first place to say rewrite or you

211
00:08:36,299 --> 00:08:42,089
get denied you can't have you can't

212
00:08:39,750 --> 00:08:43,500
request read and write and then the

213
00:08:42,090 --> 00:08:45,600
check only goes oh well you've only got

214
00:08:43,500 --> 00:08:47,430
read so I'll just give you that it will

215
00:08:45,600 --> 00:08:49,380
just deny you access if you ask for more

216
00:08:47,430 --> 00:08:52,920
rights than you've got it will denied

217
00:08:49,380 --> 00:08:55,170
you now when it comes to Sam boxing this

218
00:08:52,920 --> 00:09:00,510
access check changes subtly

219
00:08:55,170 --> 00:09:03,540
we add two more boxes and what actually

220
00:09:00,510 --> 00:09:06,990
happens under the hood is some boxes use

221
00:09:03,540 --> 00:09:09,449
special types of access tokens now for

222
00:09:06,990 --> 00:09:13,230
Chrome we tend to use restricted tokens

223
00:09:09,450 --> 00:09:15,600
or filter tokens depending on what side

224
00:09:13,230 --> 00:09:18,000
you're seeing them from for things like

225
00:09:15,600 --> 00:09:19,260
edge or universal windows applications

226
00:09:18,000 --> 00:09:22,290
they use something called app container

227
00:09:19,260 --> 00:09:23,880
tokens but fundamentally they're they're

228
00:09:22,290 --> 00:09:25,949
doing pretty much the same operation and

229
00:09:23,880 --> 00:09:29,040
what actually bees access tokens allow

230
00:09:25,949 --> 00:09:32,550
you to do is specify a secondary list of

231
00:09:29,040 --> 00:09:35,670
groups which are only used for this Sam

232
00:09:32,550 --> 00:09:38,069
boxing access check so when you do the

233
00:09:35,670 --> 00:09:40,170
dackel check it will obviously first run

234
00:09:38,070 --> 00:09:42,449
through your standard group list and go

235
00:09:40,170 --> 00:09:44,969
okay you've got read/write because you

236
00:09:42,449 --> 00:09:47,339
are your Alice and Alice is granted

237
00:09:44,970 --> 00:09:49,649
readwrite on this file however it will

238
00:09:47,339 --> 00:09:52,740
then go okay now I'm gonna check the

239
00:09:49,649 --> 00:09:55,199
sandbox SID list against the same

240
00:09:52,740 --> 00:09:56,940
security descriptor and of course the

241
00:09:55,199 --> 00:10:00,029
sandbox fiddler should have arguably

242
00:09:56,940 --> 00:10:03,089
different groups that are it then what

243
00:10:00,029 --> 00:10:07,040
ur is in your standard group list and if

244
00:10:03,089 --> 00:10:09,420
those two checks don't don't match so if

245
00:10:07,040 --> 00:10:10,860
your normal check says yes you got

246
00:10:09,420 --> 00:10:13,920
read/write but the second check just

247
00:10:10,860 --> 00:10:15,899
says no you've only got read then you go

248
00:10:13,920 --> 00:10:18,360
to the deny access because it goes well

249
00:10:15,899 --> 00:10:21,149
you can't actually it get readwrite

250
00:10:18,360 --> 00:10:23,820
because your secondary check payout and

251
00:10:21,149 --> 00:10:26,779
that's basically how sandbox is work on

252
00:10:23,820 --> 00:10:29,310
Windows in a very very high level so

253
00:10:26,779 --> 00:10:31,709
this is the sort of typical architecture

254
00:10:29,310 --> 00:10:33,810
you'll see you'll you'll typically have

255
00:10:31,709 --> 00:10:36,810
some sort of privileged broker process

256
00:10:33,810 --> 00:10:38,699
when I say privileged all I mean is it

257
00:10:36,810 --> 00:10:41,130
is more privileged than your sandbox

258
00:10:38,699 --> 00:10:43,920
process so Chrome for example runs its

259
00:10:41,130 --> 00:10:47,220
broker at a normal user privilege

260
00:10:43,920 --> 00:10:49,529
however edge runs its broker inside an

261
00:10:47,220 --> 00:10:52,079
app container and it just uses some

262
00:10:49,529 --> 00:10:53,610
funky tricks to been sandbox processes

263
00:10:52,079 --> 00:10:56,910
further on from that as we'll see later

264
00:10:53,610 --> 00:10:59,459
but the idea here is that sandbox

265
00:10:56,910 --> 00:11:01,980
process only has a restricted set of

266
00:10:59,459 --> 00:11:03,810
accesses to normal resources it may only

267
00:11:01,980 --> 00:11:06,089
have read access to a set of resources

268
00:11:03,810 --> 00:11:07,859
for example but of course at some point

269
00:11:06,089 --> 00:11:09,160
in our sandbox process may go hey I

270
00:11:07,860 --> 00:11:11,290
really need to write

271
00:11:09,160 --> 00:11:13,959
this file at which point it has to go to

272
00:11:11,290 --> 00:11:16,480
the broker and the broker like takes the

273
00:11:13,959 --> 00:11:17,888
request and says okay you want to access

274
00:11:16,480 --> 00:11:19,660
this file for right access

275
00:11:17,889 --> 00:11:22,149
I'm gonna check it against some sort of

276
00:11:19,660 --> 00:11:23,769
internal policy or some mechanism to

277
00:11:22,149 --> 00:11:26,709
determine whether that's okay

278
00:11:23,769 --> 00:11:28,959
and I will open the file for you and

279
00:11:26,709 --> 00:11:32,888
then pass you back access to that that

280
00:11:28,959 --> 00:11:35,050
resource and pretty much all the sort of

281
00:11:32,889 --> 00:11:36,370
common sandboxing models use something

282
00:11:35,050 --> 00:11:37,990
very very similar of course

283
00:11:36,370 --> 00:11:39,550
the Devils in the details and it gets

284
00:11:37,990 --> 00:11:41,290
obviously considerably more complicated

285
00:11:39,550 --> 00:11:45,149
as we go along but fundamentally that's

286
00:11:41,290 --> 00:11:48,060
basically this how it works so I

287
00:11:45,149 --> 00:11:49,779
continued my previous presentation with

288
00:11:48,060 --> 00:11:52,029
discussions of things like attack

289
00:11:49,779 --> 00:11:53,709
surface how difficult it was to reduce

290
00:11:52,029 --> 00:11:55,720
attack surface on window especially from

291
00:11:53,709 --> 00:12:00,399
the system core level and from the

292
00:11:55,720 --> 00:12:02,649
device driver level and there obviously

293
00:12:00,399 --> 00:12:04,600
was some ways you can mitigate some of

294
00:12:02,649 --> 00:12:06,699
this but it is quite kind of difficult

295
00:12:04,600 --> 00:12:09,459
things to achieve I also talked about

296
00:12:06,699 --> 00:12:12,699
how you couldn't lock your process down

297
00:12:09,459 --> 00:12:14,439
too far because if you remove if you

298
00:12:12,699 --> 00:12:16,420
change your access token so that it had

299
00:12:14,439 --> 00:12:18,639
access to nothing then it would actually

300
00:12:16,420 --> 00:12:21,040
crash the process when it started up it

301
00:12:18,639 --> 00:12:22,630
wouldn't even be able to load a DLL so

302
00:12:21,040 --> 00:12:25,750
that when it tries to start up it it

303
00:12:22,630 --> 00:12:28,899
failed to load DLL and then I was also

304
00:12:25,750 --> 00:12:32,490
talking about ways of abusing the

305
00:12:28,899 --> 00:12:36,670
operating system functionality to

306
00:12:32,490 --> 00:12:38,829
benefit exploitation so you find bugs so

307
00:12:36,670 --> 00:12:41,709
your resource planting bug and in this

308
00:12:38,829 --> 00:12:44,079
particular example I showed I could use

309
00:12:41,709 --> 00:12:46,319
a symbolic link inside the registry and

310
00:12:44,079 --> 00:12:52,839
utilize that resource planting bug to

311
00:12:46,319 --> 00:12:54,490
escape the sandbox so that is basically

312
00:12:52,839 --> 00:12:58,269
my quick run-through of the previous

313
00:12:54,490 --> 00:13:02,890
presentation so let's welcome in 2019

314
00:12:58,269 --> 00:13:05,459
it is 2019 right thank God for that

315
00:13:02,890 --> 00:13:08,160
[Applause]

316
00:13:05,459 --> 00:13:11,109
what has changed in the past four years

317
00:13:08,160 --> 00:13:13,660
what has changed from Microsoft Active

318
00:13:11,110 --> 00:13:17,079
is Windows 10 witness 10 was released

319
00:13:13,660 --> 00:13:20,980
towards the end of 2015 so pretty much

320
00:13:17,079 --> 00:13:22,560
just after my presentation and for

321
00:13:20,980 --> 00:13:24,450
various different reasons

322
00:13:22,560 --> 00:13:26,579
this has had a fairly significant impact

323
00:13:24,450 --> 00:13:32,279
on the security of windows in general

324
00:13:26,580 --> 00:13:35,640
and also on sandboxing in particular now

325
00:13:32,279 --> 00:13:37,380
the first one is Windows 10 was the

326
00:13:35,640 --> 00:13:39,810
first version of Windows to basically

327
00:13:37,380 --> 00:13:42,270
make updating pretty much mandatory you

328
00:13:39,810 --> 00:13:44,609
have no choice anymore like you can see

329
00:13:42,270 --> 00:13:46,380
examples of videos of people playing

330
00:13:44,610 --> 00:13:49,080
some cool online game just about to

331
00:13:46,380 --> 00:13:50,490
shoot someone in the head and then the

332
00:13:49,080 --> 00:13:54,600
Machine reboots and says sorry I'm

333
00:13:50,490 --> 00:13:56,160
updating updating windows and this is

334
00:13:54,600 --> 00:13:57,630
the thing like in Windows 7 Windows 8

335
00:13:56,160 --> 00:13:59,540
you can just turn the Windows Update

336
00:13:57,630 --> 00:14:02,910
service off there's nothing stopping you

337
00:13:59,540 --> 00:14:06,120
you won't get any more updates but hey I

338
00:14:02,910 --> 00:14:08,969
don't care but of course there's no

339
00:14:06,120 --> 00:14:12,089
point writing the most awesome sandbox

340
00:14:08,970 --> 00:14:15,270
in the world if you're leaving pub

341
00:14:12,089 --> 00:14:16,740
effectively public sometimes trivial

342
00:14:15,270 --> 00:14:19,910
privilege escalations which you can

343
00:14:16,740 --> 00:14:22,740
abused to escape the sandbox so

344
00:14:19,910 --> 00:14:24,569
enforcing updates is generally good for

345
00:14:22,740 --> 00:14:27,800
security if not necessarily for your

346
00:14:24,570 --> 00:14:32,580
online gaming profile

347
00:14:27,800 --> 00:14:35,250
the other interesting thing is the time

348
00:14:32,580 --> 00:14:37,020
to release now unfortunately the text is

349
00:14:35,250 --> 00:14:39,300
a little bit small on the screen but

350
00:14:37,020 --> 00:14:43,470
basically this is a sort of really

351
00:14:39,300 --> 00:14:45,660
simple graph of the number of days

352
00:14:43,470 --> 00:14:49,050
between each major version of Windows

353
00:14:45,660 --> 00:14:51,420
starting at empty free 3.1 and going up

354
00:14:49,050 --> 00:14:56,400
to Windows 10 1809 which is the current

355
00:14:51,420 --> 00:14:58,890
released version and typically when

356
00:14:56,400 --> 00:15:02,100
those release cycles were we release two

357
00:14:58,890 --> 00:15:03,689
RTM and at some point in the future we

358
00:15:02,100 --> 00:15:05,880
may had a service pack and then another

359
00:15:03,690 --> 00:15:08,730
service pack and so on the service packs

360
00:15:05,880 --> 00:15:13,110
didn't typically include substantial

361
00:15:08,730 --> 00:15:14,490
changes to the operating system and of

362
00:15:13,110 --> 00:15:16,740
course there were multiple years away

363
00:15:14,490 --> 00:15:19,350
potentially but you can kind of see it

364
00:15:16,740 --> 00:15:22,230
kind of is a below average in a couple

365
00:15:19,350 --> 00:15:24,540
of years per major release up until

366
00:15:22,230 --> 00:15:28,020
Windows 10 where it crashes and then all

367
00:15:24,540 --> 00:15:29,579
of a sudden Windows 10 is is basically

368
00:15:28,020 --> 00:15:32,730
driving towards a six-month release

369
00:15:29,580 --> 00:15:35,339
cycle and it's not just that Microsoft

370
00:15:32,730 --> 00:15:36,390
are releasing quicker they're adding

371
00:15:35,339 --> 00:15:38,579
much more function

372
00:15:36,390 --> 00:15:42,209
into these releases than ever before

373
00:15:38,579 --> 00:15:44,489
like major structural and security

374
00:15:42,209 --> 00:15:47,310
changes in each major release which

375
00:15:44,490 --> 00:15:49,950
means that so much faster turnover of of

376
00:15:47,310 --> 00:15:52,229
new security features in theory because

377
00:15:49,950 --> 00:15:54,089
instead of waiting two years six months

378
00:15:52,230 --> 00:15:57,029
down the line you could guarantee that

379
00:15:54,089 --> 00:15:59,310
say 25% of of the install base of

380
00:15:57,029 --> 00:16:00,720
Windows 10 will now have this new funky

381
00:15:59,310 --> 00:16:03,689
feature which allows you to do some

382
00:16:00,720 --> 00:16:06,480
walking better and a lot of that comes

383
00:16:03,690 --> 00:16:09,089
from edge so edge obviously has its own

384
00:16:06,480 --> 00:16:24,060
Sun boxing requirements and there is a

385
00:16:09,089 --> 00:16:25,950
symbol symbol huh well this is a

386
00:16:24,060 --> 00:16:27,540
symbiotic relationship between Microsoft

387
00:16:25,950 --> 00:16:32,130
edge and Windows obviously they've both

388
00:16:27,540 --> 00:16:33,750
written by Microsoft and so if edge says

389
00:16:32,130 --> 00:16:36,329
hey wouldn't it be cool if we could do X

390
00:16:33,750 --> 00:16:48,720
then the Windows operating system team

391
00:16:36,329 --> 00:17:09,240
could potentially do X and don't worry

392
00:16:48,720 --> 00:17:11,630
with my okay that over is my cable as

393
00:17:09,240 --> 00:17:16,489
that's never a good sign

394
00:17:11,630 --> 00:17:16,489
[Music]

395
00:17:18,199 --> 00:17:23,839
well the slide it slides in some ways

396
00:17:20,609 --> 00:17:29,629
are not that important but to be fair

397
00:17:23,839 --> 00:17:32,899
let's just carry on a little bit so

398
00:17:29,630 --> 00:17:36,440
you've obviously got edge and edges

399
00:17:32,900 --> 00:17:36,440
actually a much better picture

400
00:17:37,500 --> 00:17:42,370
[Music]

401
00:17:39,810 --> 00:17:44,649
one of the things with edge is that it

402
00:17:42,370 --> 00:17:46,120
utilizes the existing app container

403
00:17:44,650 --> 00:17:49,600
sandboxing creature which might have

404
00:17:46,120 --> 00:17:53,949
added into Windows and this was added

405
00:17:49,600 --> 00:18:00,010
originally for store applications say

406
00:17:53,950 --> 00:18:02,440
bloody Windows why do I use it so I I'm

407
00:18:00,010 --> 00:18:04,060
turning off distractions because you're

408
00:18:02,440 --> 00:18:06,160
doing a presentation will stop popping

409
00:18:04,060 --> 00:18:08,280
up bloody dialogue saying anyway I

410
00:18:06,160 --> 00:18:12,490
digress

411
00:18:08,280 --> 00:18:14,230
so AB containers like was an attempt by

412
00:18:12,490 --> 00:18:17,440
myself to actually implement a more

413
00:18:14,230 --> 00:18:18,970
fully featured sandboxing primitive they

414
00:18:17,440 --> 00:18:20,830
used to me Tyrell restricted tokens

415
00:18:18,970 --> 00:18:22,720
which chrome still uses but app

416
00:18:20,830 --> 00:18:25,409
container was kind of reimagined and

417
00:18:22,720 --> 00:18:27,940
getting rid of the legacy stuff and

418
00:18:25,410 --> 00:18:29,950
building something new and one of the

419
00:18:27,940 --> 00:18:32,140
ways in which this had a major

420
00:18:29,950 --> 00:18:34,720
advantages they could change the

421
00:18:32,140 --> 00:18:36,040
operating system behavior because there

422
00:18:34,720 --> 00:18:38,950
was no real backwards compatibility

423
00:18:36,040 --> 00:18:42,639
issues and one of the things they

424
00:18:38,950 --> 00:18:45,670
actually changed was relating to device

425
00:18:42,640 --> 00:18:47,590
drivers so device drivers if you you

426
00:18:45,670 --> 00:18:50,280
have to opt in to for them to be

427
00:18:47,590 --> 00:18:52,959
properly secured which seems kind of odd

428
00:18:50,280 --> 00:18:55,120
but if you look at it through the prism

429
00:18:52,960 --> 00:18:58,480
of a device driver on Windows - EAFF the

430
00:18:55,120 --> 00:19:00,760
file system driver the file system

431
00:18:58,480 --> 00:19:02,170
component is actually just maintain the

432
00:19:00,760 --> 00:19:04,120
security that is maintained by the

433
00:19:02,170 --> 00:19:06,100
fastest on the driver itself so if you

434
00:19:04,120 --> 00:19:07,570
don't opt in to security the operating

435
00:19:06,100 --> 00:19:09,699
system thinks share just a filesystem

436
00:19:07,570 --> 00:19:13,810
driver and you're going to deal with

437
00:19:09,700 --> 00:19:16,330
this security read what Microsoft added

438
00:19:13,810 --> 00:19:18,850
was like actually now in order for a

439
00:19:16,330 --> 00:19:20,379
device driver to to act as if it's a

440
00:19:18,850 --> 00:19:22,449
real fastest and driver from an app

441
00:19:20,380 --> 00:19:24,340
container you need to specify a special

442
00:19:22,450 --> 00:19:26,830
flag when creating your device otherwise

443
00:19:24,340 --> 00:19:30,669
it just won't even allow you to open it

444
00:19:26,830 --> 00:19:32,710
and this flag seems to even be kind of

445
00:19:30,670 --> 00:19:36,760
hidden away like his it's not documented

446
00:19:32,710 --> 00:19:39,100
on MSDN it's just sort of there and I

447
00:19:36,760 --> 00:19:41,230
guess the idea is that hopefully no one

448
00:19:39,100 --> 00:19:43,990
uses it and therefore you'll well have

449
00:19:41,230 --> 00:19:45,760
this any attack service problems and so

450
00:19:43,990 --> 00:19:48,390
this does matter Lee reduce attack

451
00:19:45,760 --> 00:19:48,390
service issues

452
00:19:49,060 --> 00:19:55,730
another thing in in ad containers in

453
00:19:53,210 --> 00:19:57,050
Windows 8 you had these capability seeds

454
00:19:55,730 --> 00:19:59,480
and these capability seeds are that

455
00:19:57,050 --> 00:20:02,960
those sandbox seeds which I talked about

456
00:19:59,480 --> 00:20:05,060
in the access check and Windows 8 just

457
00:20:02,960 --> 00:20:07,430
had like a fixed set of capabilities you

458
00:20:05,060 --> 00:20:09,560
could kind of define your own but a

459
00:20:07,430 --> 00:20:12,200
trouble with sandbox seeds is they must

460
00:20:09,560 --> 00:20:14,330
be in a security descriptor somewhere

461
00:20:12,200 --> 00:20:15,590
for them to be enforced if they're not

462
00:20:14,330 --> 00:20:19,250
in the security descriptor they're never

463
00:20:15,590 --> 00:20:21,230
going to get used so the fixed set of

464
00:20:19,250 --> 00:20:24,530
capabilities were quite limiting in that

465
00:20:21,230 --> 00:20:26,660
regard what Microsoft added in Windows

466
00:20:24,530 --> 00:20:28,430
10 is basically you can now create sort

467
00:20:26,660 --> 00:20:29,840
of arbitrary capabilities they still

468
00:20:28,430 --> 00:20:32,810
have to be put into as some sort of

469
00:20:29,840 --> 00:20:34,820
security check somewhere but they're

470
00:20:32,810 --> 00:20:38,649
much more flexible so that you can just

471
00:20:34,820 --> 00:20:41,540
add a load of new extra cool ones and

472
00:20:38,650 --> 00:20:43,070
actually there rather than actually

473
00:20:41,540 --> 00:20:44,720
having to manually define like

474
00:20:43,070 --> 00:20:48,260
incrementing numbers they're just

475
00:20:44,720 --> 00:20:50,900
generated from a sha-256 hash of of the

476
00:20:48,260 --> 00:20:53,720
name of the capability unfortunately

477
00:20:50,900 --> 00:20:56,960
there's no provision to directly reverse

478
00:20:53,720 --> 00:20:58,430
this this value back to a string so you

479
00:20:56,960 --> 00:21:00,680
have to kind of have a big list of

480
00:20:58,430 --> 00:21:02,660
strings which you know our capabilities

481
00:21:00,680 --> 00:21:04,760
and work out the SIDS and then that

482
00:21:02,660 --> 00:21:07,130
allows you to convert them back so my

483
00:21:04,760 --> 00:21:09,260
previous screenshot these names are all

484
00:21:07,130 --> 00:21:11,270
generated because I know that these

485
00:21:09,260 --> 00:21:16,670
capabilities exist and I have to kind of

486
00:21:11,270 --> 00:21:20,210
match him up at run time now a secondary

487
00:21:16,670 --> 00:21:21,980
issue was in App containers you had

488
00:21:20,210 --> 00:21:24,020
multiple packages so the idea is say

489
00:21:21,980 --> 00:21:26,330
calculator is a different package from

490
00:21:24,020 --> 00:21:29,030
edge is a different package from Cortana

491
00:21:26,330 --> 00:21:31,310
and of course you don't want the

492
00:21:29,030 --> 00:21:32,990
calculator being compromised and then

493
00:21:31,310 --> 00:21:34,760
using that to compromise edge or

494
00:21:32,990 --> 00:21:37,340
something something equally crazy right

495
00:21:34,760 --> 00:21:40,010
but of course you also want resources

496
00:21:37,340 --> 00:21:42,350
which are accessible by everybody so

497
00:21:40,010 --> 00:21:44,420
Windows defined a special Sid this all

498
00:21:42,350 --> 00:21:46,850
application packages Sid which was kind

499
00:21:44,420 --> 00:21:48,740
of like a hard-coded no matter which

500
00:21:46,850 --> 00:21:50,600
package you're in whether you're in the

501
00:21:48,740 --> 00:21:55,450
calculator package or the edge package

502
00:21:50,600 --> 00:21:58,429
you can access this resource and that's

503
00:21:55,450 --> 00:22:01,770
perfectly fine like it makes makes sense

504
00:21:58,430 --> 00:22:03,900
the trouble was now that you had this

505
00:22:01,770 --> 00:22:05,490
facility you ended up with security

506
00:22:03,900 --> 00:22:07,830
creep you basically ended up with

507
00:22:05,490 --> 00:22:09,690
everyone going hey we need our

508
00:22:07,830 --> 00:22:11,490
application to be accessible from an app

509
00:22:09,690 --> 00:22:13,110
container we're not really sure which I

510
00:22:11,490 --> 00:22:14,760
can turn there just yet you know what

511
00:22:13,110 --> 00:22:16,500
we'll just stick all application

512
00:22:14,760 --> 00:22:18,060
packages and worry about it later and

513
00:22:16,500 --> 00:22:18,960
then of course no one comes back to

514
00:22:18,060 --> 00:22:21,629
worry about it later

515
00:22:18,960 --> 00:22:26,790
so those of comm services for example

516
00:22:21,630 --> 00:22:28,440
were exposed to edge but had potentially

517
00:22:26,790 --> 00:22:29,790
like privilege escalation

518
00:22:28,440 --> 00:22:31,560
vulnerabilities but there was nothing

519
00:22:29,790 --> 00:22:33,990
really you could do about it because if

520
00:22:31,560 --> 00:22:36,179
you remove this access from security

521
00:22:33,990 --> 00:22:39,570
descriptor then every other app

522
00:22:36,180 --> 00:22:43,020
container will suddenly start failing so

523
00:22:39,570 --> 00:22:44,250
what might off did it's primarily for

524
00:22:43,020 --> 00:22:46,889
edges introduced something called the

525
00:22:44,250 --> 00:22:49,410
load privilege a container and what this

526
00:22:46,890 --> 00:22:52,200
does is it it makes that matching of all

527
00:22:49,410 --> 00:22:55,320
application packages basically a opt-out

528
00:22:52,200 --> 00:22:59,130
so edge can opt out to this all

529
00:22:55,320 --> 00:23:00,929
application packages SID and it then has

530
00:22:59,130 --> 00:23:03,570
to rely on capabilities there is also

531
00:23:00,930 --> 00:23:04,110
the all restricted application packages

532
00:23:03,570 --> 00:23:07,169
SID

533
00:23:04,110 --> 00:23:09,240
which hopefully won't get the same

534
00:23:07,170 --> 00:23:12,150
security creep because basically this is

535
00:23:09,240 --> 00:23:15,540
really only ed using it so hopefully

536
00:23:12,150 --> 00:23:18,960
again no one would care now of course

537
00:23:15,540 --> 00:23:22,889
edge is going away but it was nice while

538
00:23:18,960 --> 00:23:25,980
it lasted right and the final trick that

539
00:23:22,890 --> 00:23:28,230
was in app contain a detail containers

540
00:23:25,980 --> 00:23:30,690
for edge is child up container so

541
00:23:28,230 --> 00:23:33,360
previously you created a package you had

542
00:23:30,690 --> 00:23:35,850
the calculator package and calculator

543
00:23:33,360 --> 00:23:37,649
could spawn sub processes but a sub

544
00:23:35,850 --> 00:23:40,889
processes run with the same effective

545
00:23:37,650 --> 00:23:44,520
identity as the parent as you'd expect

546
00:23:40,890 --> 00:23:46,620
of course for some of our edge you've

547
00:23:44,520 --> 00:23:49,290
got a problem like what if I want to

548
00:23:46,620 --> 00:23:51,899
segregate Internet content from Internet

549
00:23:49,290 --> 00:23:53,790
content well they're all in the same

550
00:23:51,900 --> 00:23:55,770
package I could create multiple packages

551
00:23:53,790 --> 00:23:58,710
as I supposed but that doesn't seem very

552
00:23:55,770 --> 00:24:00,930
effective so Microsoft added child app

553
00:23:58,710 --> 00:24:03,510
containers so a single app container can

554
00:24:00,930 --> 00:24:05,010
create its own children and those

555
00:24:03,510 --> 00:24:07,290
children then have different security

556
00:24:05,010 --> 00:24:09,900
principles and therefore you can enforce

557
00:24:07,290 --> 00:24:11,520
like the parent can write to the child

558
00:24:09,900 --> 00:24:14,310
but the child can't write back and

559
00:24:11,520 --> 00:24:15,330
things like that so this all featured

560
00:24:14,310 --> 00:24:17,940
together to two

561
00:24:15,330 --> 00:24:21,419
edge certainly more secure and in theory

562
00:24:17,940 --> 00:24:27,540
these can be utilized by other other

563
00:24:21,420 --> 00:24:29,910
sandboxing applications so that was sort

564
00:24:27,540 --> 00:24:32,730
of like on the app container side so

565
00:24:29,910 --> 00:24:34,440
sort of almost differences in how access

566
00:24:32,730 --> 00:24:37,410
tokens work and these security check

567
00:24:34,440 --> 00:24:41,100
works let's now talk about mitigation

568
00:24:37,410 --> 00:24:43,560
work so another strand of Microsoft

569
00:24:41,100 --> 00:24:48,030
security development cycle is basically

570
00:24:43,560 --> 00:24:49,320
to try and remove like make it more

571
00:24:48,030 --> 00:24:52,200
difficult to exploit vulnerabilities

572
00:24:49,320 --> 00:24:55,379
both from a we don't want people to get

573
00:24:52,200 --> 00:24:57,000
rté too easily but also from a we don't

574
00:24:55,380 --> 00:24:59,130
want people to be able to escape the

575
00:24:57,000 --> 00:25:03,060
sandbox too easily and how can we do

576
00:24:59,130 --> 00:25:04,800
that so i mentioned right at the start

577
00:25:03,060 --> 00:25:07,110
like registry key symbolic links and

578
00:25:04,800 --> 00:25:09,300
this I found like an incredibly useful

579
00:25:07,110 --> 00:25:12,840
technique of using symbolic links on

580
00:25:09,300 --> 00:25:16,950
Windows to basically exploit resource

581
00:25:12,840 --> 00:25:18,389
planting attacks now there's various

582
00:25:16,950 --> 00:25:21,000
different types of symbolic links in

583
00:25:18,390 --> 00:25:23,270
Windows as over the years but the thing

584
00:25:21,000 --> 00:25:25,800
which has changed from Windows 10 is

585
00:25:23,270 --> 00:25:29,160
they've pretty much been banned

586
00:25:25,800 --> 00:25:30,690
so all these cool techniques I've built

587
00:25:29,160 --> 00:25:32,100
up over the years to exploit these types

588
00:25:30,690 --> 00:25:34,860
of vulnerabilities have now been banned

589
00:25:32,100 --> 00:25:36,899
because Windows 10 is Bandhan and this

590
00:25:34,860 --> 00:25:38,639
actually is also being back ported to I

591
00:25:36,900 --> 00:25:42,480
think they back ported it to Vista a lot

592
00:25:38,640 --> 00:25:44,370
of these changes and this all revolves

593
00:25:42,480 --> 00:25:46,140
around this RTO is sandbox token

594
00:25:44,370 --> 00:25:48,179
function and basically this function

595
00:25:46,140 --> 00:25:51,360
just returns true if you're in a sandbox

596
00:25:48,180 --> 00:25:55,110
and that's pretty much everything from

597
00:25:51,360 --> 00:25:57,090
edge protected mode to chrome to edge ie

598
00:25:55,110 --> 00:25:59,030
protector mode to edge to chrome they're

599
00:25:57,090 --> 00:26:02,220
all considered to be sandbox processes

600
00:25:59,030 --> 00:26:04,530
so registry keys in what links if you're

601
00:26:02,220 --> 00:26:08,520
in a sandbox you can go away

602
00:26:04,530 --> 00:26:10,440
access denied automatically no no well

603
00:26:08,520 --> 00:26:14,280
if you're in a certain type of sign but

604
00:26:10,440 --> 00:26:16,890
note banned but there's something like

605
00:26:14,280 --> 00:26:21,180
mount points which are like directory

606
00:26:16,890 --> 00:26:22,650
symbolic links unfortunately they might

607
00:26:21,180 --> 00:26:24,660
have found out that Silverlight for

608
00:26:22,650 --> 00:26:26,730
example use these and Silverlight was

609
00:26:24,660 --> 00:26:28,659
being sandbox and so you're kind of now

610
00:26:26,730 --> 00:26:31,200
in in this situation where

611
00:26:28,659 --> 00:26:35,979
possibility reasons stop you from

612
00:26:31,200 --> 00:26:37,989
blocking this so instead for amount

613
00:26:35,979 --> 00:26:40,419
points what they do is you can create

614
00:26:37,989 --> 00:26:42,849
them but only if the target directory is

615
00:26:40,419 --> 00:26:44,679
writable by the by the sandbox user and

616
00:26:42,849 --> 00:26:47,139
in theory that should should prevent you

617
00:26:44,679 --> 00:26:48,609
from exploiting these if you can pilot

618
00:26:47,139 --> 00:26:50,830
unless you can find a bypass of course

619
00:26:48,609 --> 00:26:53,859
so I found like free two or three

620
00:26:50,830 --> 00:26:57,158
bypasses and of course Mike Celona okay

621
00:26:53,859 --> 00:26:59,590
we'll fix these so like they they fix

622
00:26:57,159 --> 00:27:02,799
the exploit but not the root cause okay

623
00:26:59,590 --> 00:27:05,369
fair enough after if you go to this

624
00:27:02,799 --> 00:27:07,418
eventually this mount point got

625
00:27:05,369 --> 00:27:09,699
mitigation got written in such a way

626
00:27:07,419 --> 00:27:11,379
that it was actually pretty robust so I

627
00:27:09,700 --> 00:27:15,009
just found different things to be easy

628
00:27:11,379 --> 00:27:17,320
600 hard links NTFS supports hard links

629
00:27:15,009 --> 00:27:19,239
maybe I can abused Harvick's instead so

630
00:27:17,320 --> 00:27:22,059
of course myself goes and fixes that as

631
00:27:19,239 --> 00:27:23,590
well and if you basically like bring up

632
00:27:22,059 --> 00:27:26,289
the kernel in either on a modern version

633
00:27:23,590 --> 00:27:29,408
of Windows 10 do like a cross-reference

634
00:27:26,289 --> 00:27:31,239
party or sit is sandbox token you'll

635
00:27:29,409 --> 00:27:32,529
find various callers to this and you can

636
00:27:31,239 --> 00:27:34,479
actually trace route of and see what

637
00:27:32,529 --> 00:27:37,149
they're doing it's also an exported

638
00:27:34,479 --> 00:27:39,700
function so device drivers could could

639
00:27:37,149 --> 00:27:42,399
call it so a recent one is the the

640
00:27:39,700 --> 00:27:44,139
common log file system has introduced

641
00:27:42,399 --> 00:27:47,439
this which is like being abused the

642
00:27:44,139 --> 00:27:49,539
number of times as well and this can now

643
00:27:47,440 --> 00:27:50,950
call van go okay I'm in a sandbox so I'm

644
00:27:49,539 --> 00:27:55,869
just gonna deny you access to that

645
00:27:50,950 --> 00:27:57,460
resource now those I would say are some

646
00:27:55,869 --> 00:28:01,389
implicit mitigations they're things

647
00:27:57,460 --> 00:28:04,059
which just are enabled by default of you

648
00:28:01,389 --> 00:28:05,918
being in the sandbox but windows also

649
00:28:04,059 --> 00:28:09,009
has explicit mitigations which you need

650
00:28:05,919 --> 00:28:10,629
to are put into and usually use like set

651
00:28:09,009 --> 00:28:13,090
process mitigation policy function or

652
00:28:10,629 --> 00:28:14,619
various other techniques and there's

653
00:28:13,090 --> 00:28:16,059
actually quite a few and obviously as

654
00:28:14,619 --> 00:28:18,488
you can see on the right with these are

655
00:28:16,059 --> 00:28:20,379
supported in Windows 10 the number of

656
00:28:18,489 --> 00:28:22,059
mitigation has been expanded and I think

657
00:28:20,379 --> 00:28:24,609
there's actually some which sort of fell

658
00:28:22,059 --> 00:28:26,349
off the bottom at a page somewhere a lot

659
00:28:24,609 --> 00:28:31,119
of these are focused on remote code

660
00:28:26,349 --> 00:28:35,649
execution but similar Menard seoulites

661
00:28:31,119 --> 00:28:37,320
example attack surface so we had this

662
00:28:35,649 --> 00:28:39,510
problem that

663
00:28:37,320 --> 00:28:40,860
the kernel itself has like 400 system

664
00:28:39,510 --> 00:28:42,420
calls and these are obviously major

665
00:28:40,860 --> 00:28:44,040
attack surface because if if you found a

666
00:28:42,420 --> 00:28:46,590
bug in a system call well you've

667
00:28:44,040 --> 00:28:48,629
probably got kernel code execution but

668
00:28:46,590 --> 00:28:53,370
of course there's also wind 30k and when

669
00:28:48,630 --> 00:28:55,680
30k is a Maya it's absolutely terrible I

670
00:28:53,370 --> 00:28:59,399
might have to done their best to improve

671
00:28:55,680 --> 00:29:03,750
it but it's still problematic I think

672
00:28:59,400 --> 00:29:07,080
like there was even a very recent zero

673
00:29:03,750 --> 00:29:08,520
day which utilized the win32 caper so we

674
00:29:07,080 --> 00:29:10,620
want to get rid of that then chrome does

675
00:29:08,520 --> 00:29:12,210
get rid of that there is in Windows 8

676
00:29:10,620 --> 00:29:15,419
the introduced the win32 code system

677
00:29:12,210 --> 00:29:17,700
core disable mitigation policy which

678
00:29:15,420 --> 00:29:21,750
completely eliminates access to inflate

679
00:29:17,700 --> 00:29:23,790
okay the trouble is chrome spent like

680
00:29:21,750 --> 00:29:25,260
two years of engineering effort to

681
00:29:23,790 --> 00:29:27,080
implement that and they basically

682
00:29:25,260 --> 00:29:30,840
require you to remove every single

683
00:29:27,080 --> 00:29:33,240
explicit an implicit call to GDI user 32

684
00:29:30,840 --> 00:29:35,610
which is pretty much impossible to do

685
00:29:33,240 --> 00:29:37,410
and it kind of goes against the idea at

686
00:29:35,610 --> 00:29:39,570
the start of having a sandbox which is

687
00:29:37,410 --> 00:29:41,640
is easy to get into it's easy to write

688
00:29:39,570 --> 00:29:43,800
code which ends a big sandbox and of

689
00:29:41,640 --> 00:29:46,200
course if you have to avoid win 30k and

690
00:29:43,800 --> 00:29:46,919
writing Windows code it's pretty much

691
00:29:46,200 --> 00:29:50,460
impossible

692
00:29:46,920 --> 00:29:53,400
and of course Microsoft saw this with

693
00:29:50,460 --> 00:29:56,160
edge they couldn't easily remove every

694
00:29:53,400 --> 00:29:58,710
single call to win 30k because it's to

695
00:29:56,160 --> 00:30:01,230
Mammon for tasks so Microsoft introduced

696
00:29:58,710 --> 00:30:04,200
the win32 K system call filter inside

697
00:30:01,230 --> 00:30:07,170
Windows 10 and instead of a hard block

698
00:30:04,200 --> 00:30:08,850
of everything instead there's like you

699
00:30:07,170 --> 00:30:12,840
have a filter profile which says ok

700
00:30:08,850 --> 00:30:14,909
these 50 calls in win 30k are okay to

701
00:30:12,840 --> 00:30:18,810
call or at least these are at least the

702
00:30:14,910 --> 00:30:20,400
calls which we know you use the trouble

703
00:30:18,810 --> 00:30:22,649
with is from a generic sandboxing

704
00:30:20,400 --> 00:30:25,980
perspective is it's impossible to change

705
00:30:22,650 --> 00:30:27,480
this list of filtered functions I think

706
00:30:25,980 --> 00:30:30,240
the current implementation has three or

707
00:30:27,480 --> 00:30:33,120
four like filter profiles so you can

708
00:30:30,240 --> 00:30:34,500
have different like sets of these but

709
00:30:33,120 --> 00:30:36,479
they're all designed for Microsoft

710
00:30:34,500 --> 00:30:39,260
products so they're designed for like

711
00:30:36,480 --> 00:30:42,360
edge or edge with flash running or

712
00:30:39,260 --> 00:30:44,040
various other components and so they're

713
00:30:42,360 --> 00:30:46,020
not actually about useful from a user

714
00:30:44,040 --> 00:30:47,940
perspective but maybe one day they'll

715
00:30:46,020 --> 00:30:50,270
make this more they'll expand this to be

716
00:30:47,940 --> 00:30:50,270
more generic

717
00:30:50,830 --> 00:30:56,360
what is probably more directly

718
00:30:53,510 --> 00:30:59,150
interesting is the ability to block font

719
00:30:56,360 --> 00:31:02,090
so if you've if you follow like my

720
00:30:59,150 --> 00:31:04,100
colleague Matias blogposts and work a

721
00:31:02,090 --> 00:31:06,949
couple of years back he was basically

722
00:31:04,100 --> 00:31:08,840
just popping using TrueType font bugs to

723
00:31:06,950 --> 00:31:14,360
basically break into the Windows kernel

724
00:31:08,840 --> 00:31:17,209
and fonts are a terrible thing to be

725
00:31:14,360 --> 00:31:20,290
passing in user mode and windows posit

726
00:31:17,210 --> 00:31:23,840
in kernel mode because why not write

727
00:31:20,290 --> 00:31:26,629
true type fonts have like like sort of a

728
00:31:23,840 --> 00:31:28,220
little VM which runs like code to

729
00:31:26,630 --> 00:31:29,720
generate the hinting and stuff crazy

730
00:31:28,220 --> 00:31:32,930
stuff like that it's absolutely

731
00:31:29,720 --> 00:31:35,360
nightmare right but the main danger from

732
00:31:32,930 --> 00:31:37,430
this is code is sponsor which aren't

733
00:31:35,360 --> 00:31:39,439
provided by the system if you have a

734
00:31:37,430 --> 00:31:42,470
system font which is installed in the

735
00:31:39,440 --> 00:31:44,630
secure location and it has a privilege

736
00:31:42,470 --> 00:31:48,710
escalation in it you've probably got

737
00:31:44,630 --> 00:31:50,690
bigger concerns so what Microsoft

738
00:31:48,710 --> 00:31:54,920
decided to do is let's have a policy

739
00:31:50,690 --> 00:31:57,830
which basically blocks non system fonts

740
00:31:54,920 --> 00:32:00,200
that being either fonts loaded from from

741
00:31:57,830 --> 00:32:02,720
a memory buffer or font loaded from a

742
00:32:00,200 --> 00:32:08,450
non system location such as windows

743
00:32:02,720 --> 00:32:09,680
slash fonts and this is this works

744
00:32:08,450 --> 00:32:12,380
pretty well

745
00:32:09,680 --> 00:32:14,840
the trouble is like even web browsers

746
00:32:12,380 --> 00:32:16,640
they like to use web fonts for example

747
00:32:14,840 --> 00:32:20,030
and if a web browser wants to render

748
00:32:16,640 --> 00:32:22,430
this using GDI well it can't because

749
00:32:20,030 --> 00:32:24,139
this mitigation is in place so it turns

750
00:32:22,430 --> 00:32:26,720
out actually at the same time

751
00:32:24,140 --> 00:32:28,130
some other team well ignoring the fact

752
00:32:26,720 --> 00:32:29,750
that of course you can bypass this

753
00:32:28,130 --> 00:32:33,470
mitigation because of course you can

754
00:32:29,750 --> 00:32:34,670
read somewhere else in the Microsoft

755
00:32:33,470 --> 00:32:36,530
team was also working on something

756
00:32:34,670 --> 00:32:39,560
called the user mode font driver and the

757
00:32:36,530 --> 00:32:41,990
idea here was if you try and load a non

758
00:32:39,560 --> 00:32:43,909
system font instead of pausing it in

759
00:32:41,990 --> 00:32:46,760
kernel mode we're actually gonna pass it

760
00:32:43,910 --> 00:32:50,240
inside a sandbox the process running as

761
00:32:46,760 --> 00:32:53,000
a normal user so yes you could find some

762
00:32:50,240 --> 00:32:56,330
exploitable vulnerability in a

763
00:32:53,000 --> 00:33:01,850
particular font however all that would

764
00:32:56,330 --> 00:33:03,549
really give you is the ability to like

765
00:33:01,850 --> 00:33:05,139
compromise another

766
00:33:03,549 --> 00:33:07,989
contain a process or another sandbox

767
00:33:05,139 --> 00:33:12,729
process and so you've not really gained

768
00:33:07,989 --> 00:33:15,249
too much Wow except for Windows bugs

769
00:33:12,730 --> 00:33:18,009
right like but let's just ignore ignore

770
00:33:15,249 --> 00:33:19,899
Bo more bugs in these sort of features

771
00:33:18,009 --> 00:33:23,049
and this is kind of a double-edged sword

772
00:33:19,899 --> 00:33:26,018
of this rapid Windows 10 release cycle

773
00:33:23,049 --> 00:33:29,110
in that on the one hand yes you can ship

774
00:33:26,019 --> 00:33:31,480
new security features really quickly you

775
00:33:29,110 --> 00:33:33,248
could also ship all manner of other crap

776
00:33:31,480 --> 00:33:37,809
at the same time which has security

777
00:33:33,249 --> 00:33:39,850
vulnerabilities in it and so the number

778
00:33:37,809 --> 00:33:42,158
of times I found bugs which are

779
00:33:39,850 --> 00:33:44,408
basically new functionality added just

780
00:33:42,159 --> 00:33:46,269
to Windows 10 it's pretty high because

781
00:33:44,409 --> 00:33:48,070
I'll just go okay what what have

782
00:33:46,269 --> 00:33:50,169
Microsoft added in this latest version

783
00:33:48,070 --> 00:33:51,779
of Windows 10 that looks interesting

784
00:33:50,169 --> 00:33:53,859
maybe I should go and poke at that and

785
00:33:51,779 --> 00:33:55,720
more often than not you'll find

786
00:33:53,859 --> 00:33:57,820
something interesting even if it's not a

787
00:33:55,720 --> 00:34:01,539
full vulnerability you'll find some new

788
00:33:57,820 --> 00:34:04,769
cool feature for example those some BOTS

789
00:34:01,539 --> 00:34:08,589
those symbolic link mitigations

790
00:34:04,769 --> 00:34:10,659
Microsoft added in 1709

791
00:34:08,589 --> 00:34:13,540
I think it was which is two versions

792
00:34:10,659 --> 00:34:15,399
back a new symbolic link type which is

793
00:34:13,540 --> 00:34:17,020
like ace this is a global support link

794
00:34:15,399 --> 00:34:19,480
it's used for their container support

795
00:34:17,020 --> 00:34:21,339
their docker support but technically

796
00:34:19,480 --> 00:34:23,619
utterly useless for anything but

797
00:34:21,339 --> 00:34:25,659
shopping running docker which is no

798
00:34:23,619 --> 00:34:28,599
consumer version of Windows whatsoever

799
00:34:25,659 --> 00:34:30,849
but because someone had just added it is

800
00:34:28,599 --> 00:34:33,369
like a backdoor kind of thing like all

801
00:34:30,849 --> 00:34:35,829
of a sudden Lee it allows you to bypass

802
00:34:33,369 --> 00:34:37,569
the symbolic link mitigations well

803
00:34:35,829 --> 00:34:39,869
that's kind of unfortunate right but

804
00:34:37,569 --> 00:34:42,069
it's all new this new code which has

805
00:34:39,869 --> 00:34:44,889
anyone actually used containers on

806
00:34:42,069 --> 00:34:47,349
Windows Wow

807
00:34:44,889 --> 00:34:51,460
one person that's amazing I didn't I I'm

808
00:34:47,349 --> 00:34:53,290
surprised the you had one so it's it's a

809
00:34:51,460 --> 00:34:55,000
it's a really neat feature and yet

810
00:34:53,290 --> 00:34:56,770
you're compromising the security your

811
00:34:55,000 --> 00:34:58,210
operating system for this very niche

812
00:34:56,770 --> 00:35:01,509
feature which shouldn't probably even

813
00:34:58,210 --> 00:35:04,329
ship in a in in Windows 10 Pro right or

814
00:35:01,510 --> 00:35:05,540
maybe serving on Windows 10 home anyway

815
00:35:04,329 --> 00:35:07,380
I digress

816
00:35:05,540 --> 00:35:09,430
[Music]

817
00:35:07,380 --> 00:35:11,950
so the interesting thing about some of

818
00:35:09,430 --> 00:35:14,828
these mitigations is that there's no

819
00:35:11,950 --> 00:35:17,330
consistency of what whether they get

820
00:35:14,829 --> 00:35:20,540
inherited across process boundaries

821
00:35:17,330 --> 00:35:23,440
really like for example by disabling the

822
00:35:20,540 --> 00:35:27,230
fonts if you can create a new process

823
00:35:23,440 --> 00:35:29,450
from your your compromised process well

824
00:35:27,230 --> 00:35:31,700
then that process can now talk and

825
00:35:29,450 --> 00:35:33,649
create custom fonts and therefore you

826
00:35:31,700 --> 00:35:36,799
can use that process to compromise the

827
00:35:33,650 --> 00:35:39,020
kernel so all we need to do is support a

828
00:35:36,800 --> 00:35:41,030
new process and of course for most

829
00:35:39,020 --> 00:35:42,710
sandbox processes that's pretty easy

830
00:35:41,030 --> 00:35:45,080
right you can just support a copy

831
00:35:42,710 --> 00:35:49,040
notepad inject yourself into notepad and

832
00:35:45,080 --> 00:35:50,420
then compromise away so for example

833
00:35:49,040 --> 00:35:52,250
chrome uses something called a job

834
00:35:50,420 --> 00:35:55,190
object so the job object has been around

835
00:35:52,250 --> 00:35:57,920
since like Windows 2000 and it has a

836
00:35:55,190 --> 00:36:00,290
process quota which says how many

837
00:35:57,920 --> 00:36:01,760
processes can be within that job object

838
00:36:00,290 --> 00:36:05,870
and you need special privileges in

839
00:36:01,760 --> 00:36:09,110
theory to escape that job object to to

840
00:36:05,870 --> 00:36:11,330
break away from it so what happens is

841
00:36:09,110 --> 00:36:13,490
you create a new process but it gets

842
00:36:11,330 --> 00:36:16,009
charged against your job object and it

843
00:36:13,490 --> 00:36:18,319
goes well you've created a process but

844
00:36:16,010 --> 00:36:21,950
you know you want to process in your job

845
00:36:18,320 --> 00:36:23,930
object but you don't have quota for two

846
00:36:21,950 --> 00:36:26,419
you only have quota for one so it kills

847
00:36:23,930 --> 00:36:29,210
the process and it dies and this works

848
00:36:26,420 --> 00:36:30,950
fine except for where you find a route

849
00:36:29,210 --> 00:36:33,920
which allows you to support a process

850
00:36:30,950 --> 00:36:36,799
outside of your job object so WMI for

851
00:36:33,920 --> 00:36:38,990
example I'm sure many people in here

852
00:36:36,800 --> 00:36:41,810
probably used the win 30 process create

853
00:36:38,990 --> 00:36:44,839
function that runs outside of your job

854
00:36:41,810 --> 00:36:46,490
object intentionally so and so if you

855
00:36:44,840 --> 00:36:50,000
can get access to that from your sandbox

856
00:36:46,490 --> 00:36:52,939
you can spawn a new process so what

857
00:36:50,000 --> 00:36:54,920
Microsoft did was to try and mitigate

858
00:36:52,940 --> 00:36:56,690
this somewhat is the introduced emitting

859
00:36:54,920 --> 00:37:00,410
new mitigation which is basically

860
00:36:56,690 --> 00:37:02,390
disabled child creation but rather than

861
00:37:00,410 --> 00:37:04,310
doing it on a per process basis which is

862
00:37:02,390 --> 00:37:07,040
kind of all the job object was doing

863
00:37:04,310 --> 00:37:09,140
they did it they added it to your access

864
00:37:07,040 --> 00:37:12,140
token and the reason this is interesting

865
00:37:09,140 --> 00:37:14,810
is that obviously when you spawn a

866
00:37:12,140 --> 00:37:17,000
process directly but it just clones your

867
00:37:14,810 --> 00:37:20,779
current access token but when you spawn

868
00:37:17,000 --> 00:37:22,610
it via WMI WMI impersonates your access

869
00:37:20,780 --> 00:37:24,710
token it basically takes a copy of you

870
00:37:22,610 --> 00:37:28,830
and impersonates you and pretends to be

871
00:37:24,710 --> 00:37:31,500
you and that flag gets copied across so

872
00:37:28,830 --> 00:37:34,650
when WMI tries to create that new

873
00:37:31,500 --> 00:37:37,920
process well it can't do so either and

874
00:37:34,650 --> 00:37:40,320
so by doing this mitigation you can

875
00:37:37,920 --> 00:37:42,180
block both direct instantiation routes

876
00:37:40,320 --> 00:37:44,610
and in directs and saturation routes

877
00:37:42,180 --> 00:37:50,370
well except if you find bugs in it right

878
00:37:44,610 --> 00:37:52,590
but anyway so the final sort of

879
00:37:50,370 --> 00:37:54,299
interesting change certainly from my

880
00:37:52,590 --> 00:37:56,460
previous presentation is I gave a little

881
00:37:54,300 --> 00:37:59,040
bit about like a bug I found in chrome

882
00:37:56,460 --> 00:38:01,530
which was related to sharing of

883
00:37:59,040 --> 00:38:04,410
resources so when you create a resource

884
00:38:01,530 --> 00:38:06,120
you can optionally provide it with some

885
00:38:04,410 --> 00:38:07,560
of them allow you to obviously provide

886
00:38:06,120 --> 00:38:10,950
the name and section objects for example

887
00:38:07,560 --> 00:38:12,690
which do memory mapped files you can

888
00:38:10,950 --> 00:38:15,359
provide it with a name of that object

889
00:38:12,690 --> 00:38:17,790
and if you do that then it gets a

890
00:38:15,360 --> 00:38:20,400
security descriptor and so what chrome

891
00:38:17,790 --> 00:38:22,320
was doing was in its main process who's

892
00:38:20,400 --> 00:38:25,080
creating a writer writable

893
00:38:22,320 --> 00:38:27,750
section and then copying it to the

894
00:38:25,080 --> 00:38:29,190
sandbox process and saying but you're

895
00:38:27,750 --> 00:38:31,380
only having the rights which allow you

896
00:38:29,190 --> 00:38:35,940
to map it as read-only and relying on

897
00:38:31,380 --> 00:38:37,590
this behavior to prevent that sandwich

898
00:38:35,940 --> 00:38:39,630
process converting it back to writable

899
00:38:37,590 --> 00:38:41,930
and modifying the section data which

900
00:38:39,630 --> 00:38:46,520
could cause security implications

901
00:38:41,930 --> 00:38:48,660
however chrome didn't have a name and

902
00:38:46,520 --> 00:38:50,190
Jusuf caught a quirk in the Windows

903
00:38:48,660 --> 00:38:52,290
kernel that also meant he had no

904
00:38:50,190 --> 00:38:54,360
security descriptor and what that

905
00:38:52,290 --> 00:38:56,310
allowed the sandbox process to do is it

906
00:38:54,360 --> 00:38:58,320
could just redo placate the handle

907
00:38:56,310 --> 00:39:00,509
convert it back to a writable handle and

908
00:38:58,320 --> 00:39:02,880
then write map for that memory a

909
00:39:00,510 --> 00:39:05,790
writable and just modify it and like I

910
00:39:02,880 --> 00:39:07,380
use this to modify greasemonkey scripts

911
00:39:05,790 --> 00:39:08,940
which then got loaded into pretty much

912
00:39:07,380 --> 00:39:11,130
every renderer and you could just

913
00:39:08,940 --> 00:39:15,900
execute code on that page including web

914
00:39:11,130 --> 00:39:17,790
UI pages and stuff now it turns out

915
00:39:15,900 --> 00:39:19,350
actually in Windows 8 I even missed this

916
00:39:17,790 --> 00:39:22,590
in my previous presentation and windows

917
00:39:19,350 --> 00:39:24,509
8 might have did finally add the ability

918
00:39:22,590 --> 00:39:28,230
to assign a security descriptor to a

919
00:39:24,510 --> 00:39:30,990
unnamed resort such as a section so you

920
00:39:28,230 --> 00:39:32,880
can actually now apply this security

921
00:39:30,990 --> 00:39:34,740
descriptor and it will now get enforced

922
00:39:32,880 --> 00:39:36,360
by date by the sandbox but of course if

923
00:39:34,740 --> 00:39:39,299
you find someone who's duplicating

924
00:39:36,360 --> 00:39:41,850
section handles and relying on the the

925
00:39:39,300 --> 00:39:44,760
permissions to restrict who

926
00:39:41,850 --> 00:39:46,529
that process can do then potentially

927
00:39:44,760 --> 00:39:50,970
you've got a security bug not just in

928
00:39:46,530 --> 00:39:53,310
sandboxing terms but in general so I I

929
00:39:50,970 --> 00:39:55,049
think I will see if I can do just a very

930
00:39:53,310 --> 00:39:56,970
quick little demo but we probably

931
00:39:55,050 --> 00:40:00,930
haven't got quite as much time

932
00:39:56,970 --> 00:40:05,730
unfortunately as I was expecting yeah

933
00:40:00,930 --> 00:40:08,790
five minutes okay so I despair I spend a

934
00:40:05,730 --> 00:40:12,960
lot of time trying to write tolling to

935
00:40:08,790 --> 00:40:15,350
improve my ability to inspect unboxing

936
00:40:12,960 --> 00:40:19,110
especially attack surface stuff

937
00:40:15,350 --> 00:40:24,270
unfortunately this the resolutions not

938
00:40:19,110 --> 00:40:27,690
too great but you've got a tool for

939
00:40:24,270 --> 00:40:29,310
example to inspect access token so you

940
00:40:27,690 --> 00:40:32,730
can see for example this is our group

941
00:40:29,310 --> 00:40:36,210
list and you can go through all the

942
00:40:32,730 --> 00:40:38,490
different components in here and just

943
00:40:36,210 --> 00:40:45,110
inspect it in a nice gooey form but of

944
00:40:38,490 --> 00:40:45,109
course you can also say get I get a file

945
00:40:45,950 --> 00:41:00,810
system 32 folder and access read control

946
00:40:53,990 --> 00:41:02,640
then we do also have a GUI for say

947
00:41:00,810 --> 00:41:06,750
looking at the security descriptor and

948
00:41:02,640 --> 00:41:09,509
so this is the security descriptor there

949
00:41:06,750 --> 00:41:12,030
is of course existing windows UI to view

950
00:41:09,510 --> 00:41:14,190
security descriptors but there are

951
00:41:12,030 --> 00:41:17,190
actually usually hiding information they

952
00:41:14,190 --> 00:41:19,800
hide certain types of access information

953
00:41:17,190 --> 00:41:20,940
and things like that which like you

954
00:41:19,800 --> 00:41:22,850
really want to see if you want to

955
00:41:20,940 --> 00:41:27,930
inspect it from a security perspective

956
00:41:22,850 --> 00:41:33,180
and then you can basically just do you

957
00:41:27,930 --> 00:41:34,950
can actually perform the security check

958
00:41:33,180 --> 00:41:36,690
yourself as long as you've got a sickie

959
00:41:34,950 --> 00:41:39,990
if you've got a security descriptor and

960
00:41:36,690 --> 00:41:42,540
you have an access token you can perform

961
00:41:39,990 --> 00:41:44,669
that check and actually analyze what

962
00:41:42,540 --> 00:41:46,710
access would be granted from a from any

963
00:41:44,670 --> 00:41:49,290
particular applications so for example

964
00:41:46,710 --> 00:41:52,260
if you if you took the access token from

965
00:41:49,290 --> 00:41:56,480
an edge process you can utilize that to

966
00:41:52,260 --> 00:41:56,480
do a security check so

967
00:41:57,050 --> 00:42:05,910
if I just will get process it's a myself

968
00:42:00,900 --> 00:42:10,800
edge okay because that ID is OE do Noth

969
00:42:05,910 --> 00:42:18,480
a token process ID that one so this is

970
00:42:10,800 --> 00:42:22,320
our edge access token which also has

971
00:42:18,480 --> 00:42:26,840
this app container tab which is all your

972
00:42:22,320 --> 00:42:31,470
capability sits and if I for example do

973
00:42:26,840 --> 00:42:34,530
get empty granted access I can pass it

974
00:42:31,470 --> 00:42:37,830
the directory the system32 directory and

975
00:42:34,530 --> 00:42:42,090
I can pass it the token from edge and it

976
00:42:37,830 --> 00:42:44,730
tells me unsurprisingly that that edge

977
00:42:42,090 --> 00:42:46,890
can access this for read control and all

978
00:42:44,730 --> 00:42:49,109
that stuff all the different types if I

979
00:42:46,890 --> 00:42:53,450
take a pick a different thing so I I

980
00:42:49,109 --> 00:42:58,350
pick for example my current process

981
00:42:53,450 --> 00:43:03,720
access read control and pass that

982
00:42:58,350 --> 00:43:06,690
instead in theory I should have zero

983
00:43:03,720 --> 00:43:11,040
access to that resource and then finally

984
00:43:06,690 --> 00:43:13,890
of course if I do it to myself obviously

985
00:43:11,040 --> 00:43:17,340
I can open my own process for all access

986
00:43:13,890 --> 00:43:20,160
and so that's all good anyway very short

987
00:43:17,340 --> 00:43:24,000
I'm afraid just a couple more slides

988
00:43:20,160 --> 00:43:26,520
just to go over a few extra things type

989
00:43:24,000 --> 00:43:28,830
of hyper-v Mike sus hypervisor is now

990
00:43:26,520 --> 00:43:30,570
coming to be everywhere and this of

991
00:43:28,830 --> 00:43:32,520
course if you can sick stuff in a

992
00:43:30,570 --> 00:43:33,930
virtualized environment then you can

993
00:43:32,520 --> 00:43:36,090
obviously make things more secure in

994
00:43:33,930 --> 00:43:38,040
theory because Versailles environments a

995
00:43:36,090 --> 00:43:40,980
much stronger security boundary in

996
00:43:38,040 --> 00:43:43,890
general but it is like a standard user

997
00:43:40,980 --> 00:43:45,930
mode sandbox the price you pay the

998
00:43:43,890 --> 00:43:47,368
virtualization obviously comes down to

999
00:43:45,930 --> 00:43:48,899
the performance like you've got memory

1000
00:43:47,369 --> 00:43:52,740
impact you've got general performance

1001
00:43:48,900 --> 00:43:54,540
impact to doing this so yes it's kind of

1002
00:43:52,740 --> 00:43:56,459
a cool idea but at the moment the

1003
00:43:54,540 --> 00:43:58,770
performance just really isn't quite

1004
00:43:56,460 --> 00:44:00,750
there yet but maybe it may be soon and

1005
00:43:58,770 --> 00:44:02,040
the other thing I had in my previous

1006
00:44:00,750 --> 00:44:04,020
presentation was something called Pico

1007
00:44:02,040 --> 00:44:06,720
processes and Pico processes allowed you

1008
00:44:04,020 --> 00:44:08,339
to like redirect system calls and it now

1009
00:44:06,720 --> 00:44:10,259
exists in Windows 10 it's cool

1010
00:44:08,339 --> 00:44:12,989
except the only thing you can do of it

1011
00:44:10,259 --> 00:44:14,880
is run Linux which is cool as well but

1012
00:44:12,989 --> 00:44:18,869
perhaps not quite as cool as a really

1013
00:44:14,880 --> 00:44:22,559
awesome sandbox but anyway that's it's

1014
00:44:18,869 --> 00:44:23,549
still pretty cool so in conclusion the

1015
00:44:22,559 --> 00:44:25,829
Windows 10 I think

1016
00:44:23,549 --> 00:44:27,390
actually has one of the has had some of

1017
00:44:25,829 --> 00:44:29,279
the biggest impacts on some boxing in a

1018
00:44:27,390 --> 00:44:32,368
while even compared to Windows 8 which

1019
00:44:29,279 --> 00:44:34,769
took things a sort of an ever step but a

1020
00:44:32,369 --> 00:44:36,749
lot of that came from not only the

1021
00:44:34,769 --> 00:44:39,718
symbiotic relationship between edge and

1022
00:44:36,749 --> 00:44:41,430
Windows itself but of course that faster

1023
00:44:39,719 --> 00:44:43,109
release cycle where those new

1024
00:44:41,430 --> 00:44:46,038
mitigations could be shipped like on a

1025
00:44:43,109 --> 00:44:48,299
very very regular regular rate and

1026
00:44:46,039 --> 00:44:50,309
there's so much stuff I would still like

1027
00:44:48,299 --> 00:44:52,769
to see better system filtering for

1028
00:44:50,309 --> 00:44:55,829
example while Linux has set comp windows

1029
00:44:52,769 --> 00:44:57,899
really either has turned off with 50k or

1030
00:44:55,829 --> 00:45:00,779
nothing and there's very little in

1031
00:44:57,900 --> 00:45:02,880
between and like there's things like

1032
00:45:00,779 --> 00:45:04,069
that bootstrapping problem I mentioned

1033
00:45:02,880 --> 00:45:06,509
very very early in the presentation

1034
00:45:04,069 --> 00:45:08,099
still a problem today and unfortunately

1035
00:45:06,509 --> 00:45:11,190
it doesn't look like it's going away

1036
00:45:08,099 --> 00:45:11,969
anytime soon so I think we probably

1037
00:45:11,190 --> 00:45:13,769
don't have time for questions

1038
00:45:11,969 --> 00:45:16,200
unfortunately but thank you for

1039
00:45:13,769 --> 00:45:17,788
listening and if you want to ask me

1040
00:45:16,200 --> 00:45:19,468
questions I will be around for the next

1041
00:45:17,789 --> 00:45:22,249
couple of days you can bug me there so

1042
00:45:19,469 --> 00:45:22,249
thank you very much

