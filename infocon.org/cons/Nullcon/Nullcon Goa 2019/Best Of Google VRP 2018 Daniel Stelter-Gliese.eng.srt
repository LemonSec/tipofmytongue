1
00:00:02,540 --> 00:00:06,830
yeah all right hi everyone thanks for

2
00:00:06,470 --> 00:00:08,990
coming

3
00:00:06,830 --> 00:00:12,950
my name is Daniel I'm from the Google

4
00:00:08,990 --> 00:00:14,750
product security team in Zurich I mean

5
00:00:12,950 --> 00:00:17,419
it's a little sexual I am NOT going to

6
00:00:14,750 --> 00:00:28,039
talk about that and my presenter doesn't

7
00:00:17,420 --> 00:00:30,619
work and they go so originally my plan

8
00:00:28,039 --> 00:00:32,390
was to talk about some of the best box

9
00:00:30,619 --> 00:00:34,430
we've received in all vulnerable teary

10
00:00:32,390 --> 00:00:36,800
wats program over the last year or so

11
00:00:34,430 --> 00:00:39,710
and talk about some of the numbers how

12
00:00:36,800 --> 00:00:40,940
much money we pay out but basically you

13
00:00:39,710 --> 00:00:44,269
can find all that or not with our

14
00:00:40,940 --> 00:00:46,428
account Google VRP where we just repulse

15
00:00:44,269 --> 00:00:50,329
write-ups and all that so I encourage

16
00:00:46,429 --> 00:00:54,499
you to just check that out so what I

17
00:00:50,329 --> 00:00:56,839
want to do instead is talk about how you

18
00:00:54,499 --> 00:01:00,019
can kind of succeed with the Google VRP

19
00:00:56,839 --> 00:01:03,170
as an entry level reporter I know it's

20
00:01:00,019 --> 00:01:05,059
it's all it's easy to see a big target

21
00:01:03,170 --> 00:01:07,340
like Google as this intimidating product

22
00:01:05,059 --> 00:01:09,289
yes the big security team working on

23
00:01:07,340 --> 00:01:11,510
things like Gmail but actually there are

24
00:01:09,290 --> 00:01:13,640
a lot of low-hanging fruits and ways you

25
00:01:11,510 --> 00:01:16,700
can find your niche within the program

26
00:01:13,640 --> 00:01:18,710
and still succeed so I want to share

27
00:01:16,700 --> 00:01:26,270
some of these strategies we've seen in

28
00:01:18,710 --> 00:01:28,520
our top reporters so when I say the

29
00:01:26,270 --> 00:01:31,280
Google VRP is basically the same as any

30
00:01:28,520 --> 00:01:33,289
other Google but as any other bug bounty

31
00:01:31,280 --> 00:01:36,020
program he sent us reports we look at

32
00:01:33,290 --> 00:01:38,330
them before internal bug reports and

33
00:01:36,020 --> 00:01:41,060
then hopefully eventually money shows up

34
00:01:38,330 --> 00:01:42,740
on your bank account yeah Google

35
00:01:41,060 --> 00:01:46,820
actually has multiple of these programs

36
00:01:42,740 --> 00:01:48,380
when I say the Google VRP I mean have

37
00:01:46,820 --> 00:01:51,139
the catch-all program but there are

38
00:01:48,380 --> 00:01:53,539
several specialized sub programs for

39
00:01:51,140 --> 00:01:56,000
example Android and chrome have their

40
00:01:53,540 --> 00:01:58,220
own programs there's a special program

41
00:01:56,000 --> 00:02:01,880
for vulnerabilities in high-profile Play

42
00:01:58,220 --> 00:02:04,340
Store apps and so on so I want to talk

43
00:02:01,880 --> 00:02:10,369
about the core program that basically

44
00:02:04,340 --> 00:02:11,780
covers everything on the inside it's

45
00:02:10,369 --> 00:02:14,540
basically just a bunch of engineers

46
00:02:11,780 --> 00:02:15,840
looking at every single report

47
00:02:14,540 --> 00:02:18,030
[Music]

48
00:02:15,840 --> 00:02:20,430
to note is that we actually have

49
00:02:18,030 --> 00:02:22,320
full-time security engineers in Zurich

50
00:02:20,430 --> 00:02:24,900
and in California looking at every

51
00:02:22,320 --> 00:02:25,980
single report so if you go to the forum

52
00:02:24,900 --> 00:02:28,920
you would tell us about your bug

53
00:02:25,980 --> 00:02:30,359
description you will not go to some

54
00:02:28,920 --> 00:02:31,920
outsource support or level one support

55
00:02:30,360 --> 00:02:33,930
we have to kind of escalate your way up

56
00:02:31,920 --> 00:02:38,000
but you will end up straight with

57
00:02:33,930 --> 00:02:40,440
security engineers you make this choice

58
00:02:38,000 --> 00:02:43,380
both to make sure we don't miss out on

59
00:02:40,440 --> 00:02:44,070
any reports where subtleties of the bug

60
00:02:43,380 --> 00:02:46,410
get lost

61
00:02:44,070 --> 00:02:48,840
kind of in the process and also to be

62
00:02:46,410 --> 00:02:50,760
able to help researchers grow if they

63
00:02:48,840 --> 00:02:52,860
maybe found something that's worth

64
00:02:50,760 --> 00:02:54,120
looking into but they just need a little

65
00:02:52,860 --> 00:02:57,390
push in the right direction and we can

66
00:02:54,120 --> 00:02:59,880
help by providing more context on the

67
00:02:57,390 --> 00:03:04,399
specialties that are in Google's

68
00:02:59,880 --> 00:03:07,440
infrastructure and what we look at is

69
00:03:04,400 --> 00:03:09,810
basically everything you can associate

70
00:03:07,440 --> 00:03:13,530
with the Google brand that includes some

71
00:03:09,810 --> 00:03:16,890
of our core products Gmail YouTube Drive

72
00:03:13,530 --> 00:03:18,900
if everything is related to ads all the

73
00:03:16,890 --> 00:03:20,820
mobile apps we have on their newer

74
00:03:18,900 --> 00:03:23,310
platforms maybe your smart fridge has a

75
00:03:20,820 --> 00:03:24,930
Google app nowadays in a way from

76
00:03:23,310 --> 00:03:27,210
calendar integrations all of this is

77
00:03:24,930 --> 00:03:29,940
basically in scope the same for cloud

78
00:03:27,210 --> 00:03:33,090
platform stuff Google compute engine

79
00:03:29,940 --> 00:03:34,890
kubernetes engine 12 sequel all these

80
00:03:33,090 --> 00:03:39,240
products if you find a vulnerability

81
00:03:34,890 --> 00:03:40,500
there it's in scope or program and there

82
00:03:39,240 --> 00:03:42,450
are some subtleties for example

83
00:03:40,500 --> 00:03:44,370
kubernetes is technically an open source

84
00:03:42,450 --> 00:03:45,989
project but if you find a bug in there

85
00:03:44,370 --> 00:03:47,910
and that has implications on the thread

86
00:03:45,990 --> 00:03:49,680
model of Kuban Etta's engine we might

87
00:03:47,910 --> 00:03:51,930
actually give you money for that so it's

88
00:03:49,680 --> 00:03:53,430
if you find a bug in some high profile

89
00:03:51,930 --> 00:03:55,050
open source program it's worth checking

90
00:03:53,430 --> 00:03:57,060
if there's a cloud offering and just

91
00:03:55,050 --> 00:03:58,830
give us a heads up maybe we haven't seen

92
00:03:57,060 --> 00:04:02,580
the bug yet or we just decide to pay you

93
00:03:58,830 --> 00:04:04,320
anyway because you found a cool bug the

94
00:04:02,580 --> 00:04:06,390
server one is hardware Google has a lot

95
00:04:04,320 --> 00:04:07,950
of hardware now at Ace we have things

96
00:04:06,390 --> 00:04:10,140
like Google home where you might be able

97
00:04:07,950 --> 00:04:12,630
to find undocumented api's that let you

98
00:04:10,140 --> 00:04:15,209
control the volume of device of a victim

99
00:04:12,630 --> 00:04:18,988
or if pixel book another Chrome OS

100
00:04:15,210 --> 00:04:21,060
devices we pay for things like bypassing

101
00:04:18,988 --> 00:04:24,390
secure boot on these devices so there's

102
00:04:21,060 --> 00:04:26,940
a pretty broad spectrum and the last one

103
00:04:24,390 --> 00:04:29,009
is acquisitions Google likes to acquire

104
00:04:26,940 --> 00:04:30,300
company

105
00:04:29,009 --> 00:04:33,180
and looked at CrunchBase early on at

106
00:04:30,300 --> 00:04:34,710
least 233 acquisitions I think there's a

107
00:04:33,180 --> 00:04:36,180
fairly low estimate there are probably

108
00:04:34,710 --> 00:04:39,839
thousands of companies over the years

109
00:04:36,180 --> 00:04:41,339
that got acquired so they have pretty

110
00:04:39,839 --> 00:04:44,279
much everything you can imagine and

111
00:04:41,339 --> 00:04:50,610
they're all in scope of the VRP with

112
00:04:44,279 --> 00:04:52,800
some caveats that I'll get into so every

113
00:04:50,610 --> 00:04:54,119
product you can think of has bugs and

114
00:04:52,800 --> 00:04:55,649
Google has lots of products so the

115
00:04:54,119 --> 00:04:57,300
logical implication is there are lots

116
00:04:55,649 --> 00:05:02,219
and lots and lots of bugs to be found

117
00:04:57,300 --> 00:05:04,800
within Google and that's true but it

118
00:05:02,219 --> 00:05:06,389
varies widely how easy it is to find

119
00:05:04,800 --> 00:05:08,309
bugs in different parts of Google and

120
00:05:06,389 --> 00:05:10,879
how much effort you have to put in and

121
00:05:08,309 --> 00:05:14,039
what's the impact if you're able to leak

122
00:05:10,879 --> 00:05:16,349
emails of some unsuspecting gmail user

123
00:05:14,039 --> 00:05:18,389
that's pretty bad and will happily fix

124
00:05:16,349 --> 00:05:21,839
that as fast as possible and give you up

125
00:05:18,389 --> 00:05:23,580
to 7.5 K or so that on the other hand if

126
00:05:21,839 --> 00:05:26,249
you have a cross-site scripting bug in

127
00:05:23,580 --> 00:05:27,748
some acquisition that is still a bit of

128
00:05:26,249 --> 00:05:29,279
a low technical vulnerability it isn't

129
00:05:27,749 --> 00:05:31,379
but it doesn't come quite close to the

130
00:05:29,279 --> 00:05:32,580
impact on some of other properties so

131
00:05:31,379 --> 00:05:34,050
it's important to kind of pick your

132
00:05:32,580 --> 00:05:38,308
targets well and go for the maximum

133
00:05:34,050 --> 00:05:40,649
impact one share a few strategies that

134
00:05:38,309 --> 00:05:42,330
some of our top reporters use but

135
00:05:40,649 --> 00:05:43,680
serveth actually the most common one

136
00:05:42,330 --> 00:05:46,979
even though it might not be the most

137
00:05:43,680 --> 00:05:49,259
effective which is to look at our

138
00:05:46,979 --> 00:05:53,128
acquisitions it's basically the approach

139
00:05:49,259 --> 00:05:55,469
to go for quantity our positions are

140
00:05:53,129 --> 00:05:56,580
typically startups or smaller companies

141
00:05:55,469 --> 00:05:58,800
that are still in their aggressive

142
00:05:56,580 --> 00:06:00,479
growth space though they go for business

143
00:05:58,800 --> 00:06:02,909
impact are not necessarily for the most

144
00:06:00,479 --> 00:06:05,610
secure textures available and that makes

145
00:06:02,909 --> 00:06:07,259
sense for a business perspective but it

146
00:06:05,610 --> 00:06:10,019
means that in these companies you can

147
00:06:07,259 --> 00:06:11,580
often find pretty trivial bugs you can

148
00:06:10,019 --> 00:06:14,099
have reflected cross-site scripting in

149
00:06:11,580 --> 00:06:15,568
the search bar for example and that's

150
00:06:14,099 --> 00:06:16,979
great for bartenders because it's easy

151
00:06:15,569 --> 00:06:20,279
to find low-hanging fruits that kind of

152
00:06:16,979 --> 00:06:22,349
get this reward over and over again but

153
00:06:20,279 --> 00:06:25,919
there are a couple of caveats he decides

154
00:06:22,349 --> 00:06:27,330
to go look at our acquisitions for one

155
00:06:25,919 --> 00:06:30,479
is there's a really high chance of

156
00:06:27,330 --> 00:06:31,800
duplicates first of all because as part

157
00:06:30,479 --> 00:06:34,050
of the acquisition process but also

158
00:06:31,800 --> 00:06:35,819
after the acquisition is closed we do

159
00:06:34,050 --> 00:06:37,649
several rounds of internal assessments

160
00:06:35,819 --> 00:06:40,439
on these companies and we build have a

161
00:06:37,649 --> 00:06:41,880
pretty large backlog of things too the

162
00:06:40,439 --> 00:06:43,890
team has to look at

163
00:06:41,880 --> 00:06:46,260
so if if your startup gets a quiet the

164
00:06:43,890 --> 00:06:48,960
company by Google at some point you can

165
00:06:46,260 --> 00:06:50,820
expect to have hundreds of super-pac

166
00:06:48,960 --> 00:06:53,159
back tickets assigned from our internal

167
00:06:50,820 --> 00:06:54,690
teams all coming in to your queue so you

168
00:06:53,160 --> 00:06:55,760
can imagine that shortly after the

169
00:06:54,690 --> 00:06:57,840
acquisition the teams are often

170
00:06:55,760 --> 00:07:00,360
overloaded and need some time to

171
00:06:57,840 --> 00:07:02,340
prioritize everything and fix it so

172
00:07:00,360 --> 00:07:05,130
because of that there's a six months

173
00:07:02,340 --> 00:07:08,010
blackout period like positions during

174
00:07:05,130 --> 00:07:10,409
which we won't pay out for back reports

175
00:07:08,010 --> 00:07:12,270
probably because we either already know

176
00:07:10,410 --> 00:07:13,530
about the report or because it will be

177
00:07:12,270 --> 00:07:18,570
uncovered in the ongoing internal

178
00:07:13,530 --> 00:07:20,219
testing but even after these six months

179
00:07:18,570 --> 00:07:21,810
there are lots and lots of reporters who

180
00:07:20,220 --> 00:07:24,330
know these six knows period and

181
00:07:21,810 --> 00:07:26,880
immediately start looking at bugs so it

182
00:07:24,330 --> 00:07:28,560
sometimes happens that within a few days

183
00:07:26,880 --> 00:07:30,780
we get the same bug reported by 20

184
00:07:28,560 --> 00:07:33,000
different people your chance of being

185
00:07:30,780 --> 00:07:36,270
the first one are pretty small and the

186
00:07:33,000 --> 00:07:38,880
chance of us not having fun reflected

187
00:07:36,270 --> 00:07:41,460
XSS somewhere it's also pretty small so

188
00:07:38,880 --> 00:07:45,480
you will often get kind of frustrating

189
00:07:41,460 --> 00:07:47,849
duplicate responses and at the same time

190
00:07:45,480 --> 00:07:51,030
the impact of acquisitions bugs is

191
00:07:47,850 --> 00:07:52,950
arguably much lower partially because

192
00:07:51,030 --> 00:07:54,559
the user base is just so much smaller

193
00:07:52,950 --> 00:07:56,700
than most of the other Google products

194
00:07:54,560 --> 00:07:59,820
think about what you can do with Nexus S

195
00:07:56,700 --> 00:08:02,880
and Gmail versus in some acquisition

196
00:07:59,820 --> 00:08:05,790
that maybe has a few thousand users but

197
00:08:02,880 --> 00:08:07,409
also because under the hood these

198
00:08:05,790 --> 00:08:10,040
companies aren't as tightly integrated

199
00:08:07,410 --> 00:08:12,510
into the rest of the Google ecosystem

200
00:08:10,040 --> 00:08:14,910
safe on the back in a prog running at

201
00:08:12,510 --> 00:08:18,150
Deptford up at google.com slash shoes

202
00:08:14,910 --> 00:08:19,860
that would allow you so if you have code

203
00:08:18,150 --> 00:08:21,570
execution on this origin you basically

204
00:08:19,860 --> 00:08:23,790
have access to the sensitive cookies and

205
00:08:21,570 --> 00:08:25,310
can do anything that any application

206
00:08:23,790 --> 00:08:28,020
running on the same domain can do

207
00:08:25,310 --> 00:08:30,810
whereas if you're on our new acquisition

208
00:08:28,020 --> 00:08:32,520
comm this doesn't really cover any other

209
00:08:30,810 --> 00:08:34,710
Googler collisions any other Google

210
00:08:32,520 --> 00:08:36,870
products and similarly on the

211
00:08:34,710 --> 00:08:39,419
infrastructure side most Google core

212
00:08:36,870 --> 00:08:41,610
products run on the same infrastructure

213
00:08:39,419 --> 00:08:44,250
as some would like to Burnett is called

214
00:08:41,610 --> 00:08:45,990
Borg where if you have code execution

215
00:08:44,250 --> 00:08:47,790
inside there's a pretty high chance you

216
00:08:45,990 --> 00:08:50,339
can hit sensitive api's

217
00:08:47,790 --> 00:08:52,589
so if you have code execution and goo

218
00:08:50,339 --> 00:08:54,450
core Google product we will basically

219
00:08:52,589 --> 00:08:55,710
throw money at you because you'll freak

220
00:08:54,450 --> 00:08:58,830
out

221
00:08:55,710 --> 00:09:01,050
whereas if you have got execution and

222
00:08:58,830 --> 00:09:03,300
some random web application running on a

223
00:09:01,050 --> 00:09:05,640
cloud project being focused much much

224
00:09:03,300 --> 00:09:07,859
further lower and because of that we

225
00:09:05,640 --> 00:09:11,400
payout significantly less money for

226
00:09:07,860 --> 00:09:14,820
these bugs so if you have found an XSS

227
00:09:11,400 --> 00:09:17,730
in some exact position you will get $100

228
00:09:14,820 --> 00:09:20,340
which is nice but at the same time if

229
00:09:17,730 --> 00:09:24,330
you find an XSS and epitope you become

230
00:09:20,340 --> 00:09:25,440
you get 50 times more $5,000 so if

231
00:09:24,330 --> 00:09:27,030
you're able to find bugs and

232
00:09:25,440 --> 00:09:29,000
acquisitions 50 times faster than your

233
00:09:27,030 --> 00:09:34,350
group products is worth going after them

234
00:09:29,000 --> 00:09:36,960
but it might not always be the case so

235
00:09:34,350 --> 00:09:39,060
if you decide to look at the core Google

236
00:09:36,960 --> 00:09:41,340
products there are a few specialties

237
00:09:39,060 --> 00:09:45,300
that make these targets harder to get

238
00:09:41,340 --> 00:09:46,470
into than the typical applications for

239
00:09:45,300 --> 00:09:48,359
one because Google has pretty much

240
00:09:46,470 --> 00:09:51,330
invented the entire technology stack

241
00:09:48,360 --> 00:09:53,280
from the first IP packets hitting all

242
00:09:51,330 --> 00:09:55,140
opulences all the way up to web

243
00:09:53,280 --> 00:09:58,829
frameworks pretty much everything is

244
00:09:55,140 --> 00:10:00,030
running on in-house frameworks and that

245
00:09:58,830 --> 00:10:02,370
can be intimidating and confusing

246
00:10:00,030 --> 00:10:04,740
initially because there just aren't any

247
00:10:02,370 --> 00:10:06,230
matured and testing tools out there to

248
00:10:04,740 --> 00:10:08,610
deal with these frameworks and libraries

249
00:10:06,230 --> 00:10:10,980
similarly there are no standard

250
00:10:08,610 --> 00:10:13,710
databases um I don't think I've ever

251
00:10:10,980 --> 00:10:16,200
seen a sequel injection bug in one of

252
00:10:13,710 --> 00:10:17,520
our cooperative products partially

253
00:10:16,200 --> 00:10:20,910
because these are running on specialized

254
00:10:17,520 --> 00:10:23,850
databases and the same continues in the

255
00:10:20,910 --> 00:10:26,069
network layout libraries and so on but

256
00:10:23,850 --> 00:10:28,500
that can actually be an advantage to you

257
00:10:26,070 --> 00:10:30,450
because on the other side even the

258
00:10:28,500 --> 00:10:31,620
Google security team cannot rely on the

259
00:10:30,450 --> 00:10:33,870
amazing tools that are out there in the

260
00:10:31,620 --> 00:10:36,510
wild so some of the weaknesses in our

261
00:10:33,870 --> 00:10:38,130
tools might not be as easy to scan for

262
00:10:36,510 --> 00:10:41,370
just because we have to build all the

263
00:10:38,130 --> 00:10:43,380
tools ourselves and if you invest the

264
00:10:41,370 --> 00:10:45,510
time and understand how certain Google

265
00:10:43,380 --> 00:10:48,600
applications work that can pay dividends

266
00:10:45,510 --> 00:10:50,430
really really quickly internally we have

267
00:10:48,600 --> 00:10:53,940
a release centralized engineering

268
00:10:50,430 --> 00:10:55,680
culture so for example whenever two

269
00:10:53,940 --> 00:10:58,500
services at Google communicate they do

270
00:10:55,680 --> 00:11:00,780
so via protocol buffers it's an open

271
00:10:58,500 --> 00:11:02,370
source thing basically you have index

272
00:11:00,780 --> 00:11:05,130
fields and a data structure with the

273
00:11:02,370 --> 00:11:06,810
definition format and whenever you look

274
00:11:05,130 --> 00:11:09,030
at the Google product and it's doing

275
00:11:06,810 --> 00:11:10,349
some weird network communication

276
00:11:09,030 --> 00:11:12,300
much all you have to do is figure out

277
00:11:10,350 --> 00:11:13,680
where the protocol buffer is and then

278
00:11:12,300 --> 00:11:16,560
you can stop reverse engineering this

279
00:11:13,680 --> 00:11:18,180
and just start flipping fields and then

280
00:11:16,560 --> 00:11:20,839
you can basically start writing a father

281
00:11:18,180 --> 00:11:23,819
or do your normal pen testing activity

282
00:11:20,840 --> 00:11:25,110
and then once you figure out this it's

283
00:11:23,820 --> 00:11:26,820
really really easy to go from one

284
00:11:25,110 --> 00:11:28,050
product to the other because they're all

285
00:11:26,820 --> 00:11:29,970
built on the same libraries we use

286
00:11:28,050 --> 00:11:32,130
internally so this will give you an

287
00:11:29,970 --> 00:11:34,770
advantage of pretty much everyone else

288
00:11:32,130 --> 00:11:42,240
hasn't put in the time to understand how

289
00:11:34,770 --> 00:11:44,220
the products work school has a bit of a

290
00:11:42,240 --> 00:11:48,480
not invented here syndrome I guess

291
00:11:44,220 --> 00:11:50,490
that's pretty obvious meaning most of

292
00:11:48,480 --> 00:11:53,010
the tools are completely developed

293
00:11:50,490 --> 00:11:54,660
in-house partially because they were no

294
00:11:53,010 --> 00:11:56,250
Alton just at the time we started

295
00:11:54,660 --> 00:11:58,589
building them it's just luckily enough

296
00:11:56,250 --> 00:12:01,290
slowly changing but also reflects in the

297
00:11:58,590 --> 00:12:04,410
way we approach internal security

298
00:12:01,290 --> 00:12:06,420
assessments so engineers especially on

299
00:12:04,410 --> 00:12:08,550
the security side are kind of skeptical

300
00:12:06,420 --> 00:12:12,420
and using third-party of the shelf

301
00:12:08,550 --> 00:12:13,800
libraries say mmm so you want to do

302
00:12:12,420 --> 00:12:16,500
video encoding the obvious choice for

303
00:12:13,800 --> 00:12:19,770
this is ffmpeg and we haven't rewritten

304
00:12:16,500 --> 00:12:21,210
our own ffmpeg to the video encoding but

305
00:12:19,770 --> 00:12:22,890
what we'll do instead is put all of

306
00:12:21,210 --> 00:12:27,690
these kind of untrusted pieces of code

307
00:12:22,890 --> 00:12:30,449
in a sandbox layer so if you if you if

308
00:12:27,690 --> 00:12:34,590
you find that there's some bug in a in

309
00:12:30,450 --> 00:12:36,030
expose library somewhere in most of the

310
00:12:34,590 --> 00:12:38,880
cases this will actually be sandbox

311
00:12:36,030 --> 00:12:41,250
search pays off to kind of check if this

312
00:12:38,880 --> 00:12:42,990
looks like a real environment and it

313
00:12:41,250 --> 00:12:45,270
could be that you found the code every

314
00:12:42,990 --> 00:12:47,160
mod code execution but you will still

315
00:12:45,270 --> 00:12:49,740
get a very low reward just because it is

316
00:12:47,160 --> 00:12:51,270
sandbox so in some cases if you believe

317
00:12:49,740 --> 00:12:53,160
something is out it pays off to just

318
00:12:51,270 --> 00:12:54,960
send us a report saying hey I believe

319
00:12:53,160 --> 00:12:58,920
there's a vulnerable version of this

320
00:12:54,960 --> 00:13:00,390
library in use gain check and if there

321
00:12:58,920 --> 00:13:02,219
is and there's there are non code

322
00:13:00,390 --> 00:13:03,780
execution box we will just pay out

323
00:13:02,220 --> 00:13:05,040
immediately and you don't have to go

324
00:13:03,780 --> 00:13:06,150
through the steps of proving it and that

325
00:13:05,040 --> 00:13:08,819
can save you a lot of time and

326
00:13:06,150 --> 00:13:10,530
frustration versus in the end realizing

327
00:13:08,820 --> 00:13:12,650
that something was sent boxed all the

328
00:13:10,530 --> 00:13:12,650
way

329
00:13:14,579 --> 00:13:22,978
so as I said it really pays off to go

330
00:13:19,119 --> 00:13:22,979
deep into one product or target

331
00:13:23,160 --> 00:13:28,419
basically just pick one probe pick one a

332
00:13:26,319 --> 00:13:30,459
tech class and really try to understand

333
00:13:28,419 --> 00:13:32,529
how Google is implementing this specific

334
00:13:30,459 --> 00:13:35,858
thing and then gradually ramp up

335
00:13:32,529 --> 00:13:38,889
complexity for example just take it

336
00:13:35,859 --> 00:13:41,559
right up of some bug in Google Groups

337
00:13:38,889 --> 00:13:43,359
and then look at I try to reproduce the

338
00:13:41,559 --> 00:13:44,649
status that the person took a look at

339
00:13:43,359 --> 00:13:46,989
the requests that actually go over the

340
00:13:44,649 --> 00:13:49,299
wire start messing with some fields and

341
00:13:46,989 --> 00:13:54,329
that can really show you really quickly

342
00:13:49,299 --> 00:13:57,519
how things work and uncover bugs and

343
00:13:54,329 --> 00:13:59,978
like in any other body program just

344
00:13:57,519 --> 00:14:03,100
follow the rewards you will often

345
00:13:59,979 --> 00:14:05,319
initially get inconsistent or surprising

346
00:14:03,100 --> 00:14:07,720
rewards I already mentioned the case

347
00:14:05,319 --> 00:14:10,179
with sandboxing where you might get in a

348
00:14:07,720 --> 00:14:13,329
lower reward but also the opposite side

349
00:14:10,179 --> 00:14:14,799
maybe you found some file inclusion and

350
00:14:13,329 --> 00:14:16,929
then all of a sudden we pay you for a

351
00:14:14,799 --> 00:14:18,939
remote code execution because we

352
00:14:16,929 --> 00:14:20,619
internally know that there is some weird

353
00:14:18,939 --> 00:14:23,289
trick to get code execution from there

354
00:14:20,619 --> 00:14:25,089
so it really whenever you're surprised

355
00:14:23,289 --> 00:14:27,639
by one of the rewards just ask us and

356
00:14:25,089 --> 00:14:29,109
we'll happily explain how we got there

357
00:14:27,639 --> 00:14:33,249
and that can teach you a lot about how

358
00:14:29,109 --> 00:14:34,449
the infrastructure works internally on

359
00:14:33,249 --> 00:14:36,549
the other end if you're consistently not

360
00:14:34,449 --> 00:14:38,049
getting any rewards just make a

361
00:14:36,549 --> 00:14:41,728
different target there are lots lots

362
00:14:38,049 --> 00:14:44,199
choose from there's a great talk at

363
00:14:41,729 --> 00:14:45,999
Chaos Communication Congress from last

364
00:14:44,199 --> 00:14:47,978
year it's called attacking chrome IPC

365
00:14:45,999 --> 00:14:50,289
but it actually the most important

366
00:14:47,979 --> 00:14:53,109
takeaway there is kind of this strategic

367
00:14:50,289 --> 00:14:55,449
learning approach on how to pick the

368
00:14:53,109 --> 00:14:57,489
next more complicated target and kind of

369
00:14:55,449 --> 00:15:01,959
grow from there so how you recommend to

370
00:14:57,489 --> 00:15:04,119
check that out so the first way to

371
00:15:01,959 --> 00:15:06,608
specialize within the group programs is

372
00:15:04,119 --> 00:15:08,589
to just focus on one product there are

373
00:15:06,609 --> 00:15:11,470
lists on Wikipedia on the Internet of

374
00:15:08,589 --> 00:15:13,389
Google products one source that's really

375
00:15:11,470 --> 00:15:16,169
really valuable for the Google program

376
00:15:13,389 --> 00:15:18,549
specifically is certificate transparency

377
00:15:16,169 --> 00:15:20,049
google champions killers everywhere and

378
00:15:18,549 --> 00:15:23,019
we're big fan of certificate

379
00:15:20,049 --> 00:15:24,999
transparency so every single TLS service

380
00:15:23,019 --> 00:15:26,560
that we publish will show up and

381
00:15:24,999 --> 00:15:27,850
transparency locks and that can

382
00:15:26,560 --> 00:15:30,339
give you a heads up that we're launching

383
00:15:27,850 --> 00:15:35,650
maybe some new sandbox service somewhere

384
00:15:30,340 --> 00:15:37,690
or misstating environment but release is

385
00:15:35,650 --> 00:15:39,640
the sweet spot in my opinion are not the

386
00:15:37,690 --> 00:15:41,050
brand new products because they get a

387
00:15:39,640 --> 00:15:43,210
lot of attention during the launch

388
00:15:41,050 --> 00:15:45,939
process and they're built on secure by

389
00:15:43,210 --> 00:15:48,160
default frameworks but instead try to

390
00:15:45,940 --> 00:15:50,350
look at some of the older products that

391
00:15:48,160 --> 00:15:52,650
look like they haven't received a lot of

392
00:15:50,350 --> 00:15:55,480
engineering attention in the past years

393
00:15:52,650 --> 00:15:58,060
say Google Groups is a good example the

394
00:15:55,480 --> 00:16:00,670
UI hasn't really changed in the past ten

395
00:15:58,060 --> 00:16:02,680
years or so or the old calendar UI it

396
00:16:00,670 --> 00:16:05,199
looked the same for a decade or so so

397
00:16:02,680 --> 00:16:07,270
chances are higher that there is no big

398
00:16:05,200 --> 00:16:08,950
engineering team behind this UI that

399
00:16:07,270 --> 00:16:10,990
keeps track of the latest security

400
00:16:08,950 --> 00:16:14,290
trends and implements all the mitigation

401
00:16:10,990 --> 00:16:16,180
and so on so you can often find bugs in

402
00:16:14,290 --> 00:16:18,250
these products more easily just because

403
00:16:16,180 --> 00:16:21,969
they haven't adopted to more modern

404
00:16:18,250 --> 00:16:23,470
practices yet but at the same time the

405
00:16:21,970 --> 00:16:25,990
older products are often still exposed

406
00:16:23,470 --> 00:16:27,460
on sensitive properties like their

407
00:16:25,990 --> 00:16:30,910
hosted on top that at the google.com

408
00:16:27,460 --> 00:16:33,250
slash product name and that immediately

409
00:16:30,910 --> 00:16:35,170
multiplies the impact of your bugs she

410
00:16:33,250 --> 00:16:37,780
have a cross-site scripting bug he will

411
00:16:35,170 --> 00:16:40,510
he will immediately be in the most

412
00:16:37,780 --> 00:16:41,890
second most sensitive tier just because

413
00:16:40,510 --> 00:16:44,740
you're running on the same origin and

414
00:16:41,890 --> 00:16:46,330
the older applications are more commonly

415
00:16:44,740 --> 00:16:51,880
running on these origins

416
00:16:46,330 --> 00:16:53,980
unfortunately so once you understood one

417
00:16:51,880 --> 00:16:56,110
product fairly well and know the

418
00:16:53,980 --> 00:16:57,610
business logic you're probably already a

419
00:16:56,110 --> 00:16:59,310
head of our internal security team

420
00:16:57,610 --> 00:17:02,110
you've seen how many products there are

421
00:16:59,310 --> 00:17:04,359
and if you if you spend several weeks or

422
00:17:02,110 --> 00:17:05,740
so looking at one product you probably

423
00:17:04,359 --> 00:17:07,208
know the security properties and

424
00:17:05,740 --> 00:17:09,339
assumptions underlying it much better

425
00:17:07,209 --> 00:17:11,650
than we do so what you can then do is

426
00:17:09,339 --> 00:17:14,560
look at how this product is integrates

427
00:17:11,650 --> 00:17:16,660
with all the other ones um a good

428
00:17:14,560 --> 00:17:19,419
example there is in the app space where

429
00:17:16,660 --> 00:17:21,670
some of the ads projects allow you to

430
00:17:19,420 --> 00:17:23,140
link with Google Analytics these are

431
00:17:21,670 --> 00:17:26,170
separate products that are maintained by

432
00:17:23,140 --> 00:17:27,760
different teams so the moment you can

433
00:17:26,170 --> 00:17:29,380
link project and that gives you

434
00:17:27,760 --> 00:17:31,360
privileges on the other side in some way

435
00:17:29,380 --> 00:17:35,650
or you can see data from another product

436
00:17:31,360 --> 00:17:37,570
in another one that means there is some

437
00:17:35,650 --> 00:17:40,000
special authentication flow going on

438
00:17:37,570 --> 00:17:42,070
that is that relies on a secure

439
00:17:40,000 --> 00:17:44,320
assumptions being correctly interpreted

440
00:17:42,070 --> 00:17:46,360
on both sides and the old of these

441
00:17:44,320 --> 00:17:48,760
integrations are the more the other each

442
00:17:46,360 --> 00:17:50,020
side is developed and probably we will

443
00:17:48,760 --> 00:17:52,480
have forgotten about one of the

444
00:17:50,020 --> 00:17:58,240
considerations somewhere so these are

445
00:17:52,480 --> 00:18:00,880
really a treasure trove to look at the

446
00:17:58,240 --> 00:18:04,480
other way to specialize is to go for a

447
00:18:00,880 --> 00:18:07,000
specific attack vector because our

448
00:18:04,480 --> 00:18:10,210
engineer Pegasus and security teams are

449
00:18:07,000 --> 00:18:12,610
so centralized chances are if we missed

450
00:18:10,210 --> 00:18:14,080
one security problem somewhere we

451
00:18:12,610 --> 00:18:17,949
probably missed it in a lot of other

452
00:18:14,080 --> 00:18:20,110
places as well um so that's a really

453
00:18:17,950 --> 00:18:22,300
great way to work off write-ups if you

454
00:18:20,110 --> 00:18:25,419
can see oh if you look at it right up

455
00:18:22,300 --> 00:18:27,159
and there's some combination of mistakes

456
00:18:25,420 --> 00:18:29,260
that have to be combined for this really

457
00:18:27,160 --> 00:18:30,850
impactful bug but pays to just look at

458
00:18:29,260 --> 00:18:33,280
other products and where could these

459
00:18:30,850 --> 00:18:34,899
environments take place and chances are

460
00:18:33,280 --> 00:18:39,730
high that you will have find the same

461
00:18:34,900 --> 00:18:42,220
bug um for example we have this one guy

462
00:18:39,730 --> 00:18:44,200
called Dimitri and pretty much all he

463
00:18:42,220 --> 00:18:46,990
does is he looks at Android applications

464
00:18:44,200 --> 00:18:48,700
and what kind of intense you can send to

465
00:18:46,990 --> 00:18:50,440
the application and then tries to

466
00:18:48,700 --> 00:18:53,560
convince the application to leak

467
00:18:50,440 --> 00:18:55,570
sensitive data like you asked Gmail to

468
00:18:53,560 --> 00:18:57,250
upload an attachment you say hey give me

469
00:18:55,570 --> 00:18:59,649
the internal message database that's in

470
00:18:57,250 --> 00:19:00,760
your application private folder and many

471
00:18:59,650 --> 00:19:03,760
of these applications will happily

472
00:19:00,760 --> 00:19:05,650
respond with their internal later just

473
00:19:03,760 --> 00:19:08,500
because they incorrectly trust the

474
00:19:05,650 --> 00:19:11,650
parameters of media intent it's a fairly

475
00:19:08,500 --> 00:19:13,150
straightforward pattern and Dimitri has

476
00:19:11,650 --> 00:19:15,400
managed to find dozens and dozens of

477
00:19:13,150 --> 00:19:17,290
these bugs so nowadays whenever we get a

478
00:19:15,400 --> 00:19:20,280
bug like this we just say ah it's one

479
00:19:17,290 --> 00:19:23,290
Dimitri and one dimitri means we pay him

480
00:19:20,280 --> 00:19:27,250
$1,300 so that's great you want to be

481
00:19:23,290 --> 00:19:30,100
like Dimitri again the speedboat is spot

482
00:19:27,250 --> 00:19:32,860
here are bugs that are hot eradicated

483
00:19:30,100 --> 00:19:34,719
scale so you can imagine that whenever

484
00:19:32,860 --> 00:19:36,729
we get a series of bugs or one really

485
00:19:34,720 --> 00:19:39,610
impactful bug we do this internal

486
00:19:36,730 --> 00:19:41,080
variance analysis and just put yourself

487
00:19:39,610 --> 00:19:42,879
in a position of someone who has a

488
00:19:41,080 --> 00:19:44,320
search console in front of him and can

489
00:19:42,880 --> 00:19:46,840
search the entire Google source code

490
00:19:44,320 --> 00:19:48,189
base with the red X if there's a red X

491
00:19:46,840 --> 00:19:50,830
that will show you all instances of the

492
00:19:48,190 --> 00:19:52,480
same bug we will probably run this

493
00:19:50,830 --> 00:19:53,120
search and just fix all the bugs in one

494
00:19:52,480 --> 00:19:55,280
commit

495
00:19:53,120 --> 00:19:57,709
so what you're looking for out bucks

496
00:19:55,280 --> 00:19:59,930
that are more kind of my abstract more

497
00:19:57,710 --> 00:20:01,970
than logic side of things one good

498
00:19:59,930 --> 00:20:05,810
example here our privilege escalations

499
00:20:01,970 --> 00:20:07,520
within a product so if you have some

500
00:20:05,810 --> 00:20:09,830
product where you have editor excess and

501
00:20:07,520 --> 00:20:12,080
read-only or certain different roles of

502
00:20:09,830 --> 00:20:15,860
users that shouldn't access each other's

503
00:20:12,080 --> 00:20:18,020
data we often get that let's get this

504
00:20:15,860 --> 00:20:19,669
wrong and fortunately in so many cases

505
00:20:18,020 --> 00:20:21,139
if you have read-only access maybe

506
00:20:19,670 --> 00:20:24,350
there's some endpoint that lets you edit

507
00:20:21,140 --> 00:20:26,480
something just because we forgot to put

508
00:20:24,350 --> 00:20:29,840
this check somewhere and Google has lots

509
00:20:26,480 --> 00:20:31,400
of products like this so if you know the

510
00:20:29,840 --> 00:20:33,110
kind the kinds of interactions that take

511
00:20:31,400 --> 00:20:35,750
place and are in a position to

512
00:20:33,110 --> 00:20:37,280
understand how Google API so work look

513
00:20:35,750 --> 00:20:39,410
like I already mentioned it's all

514
00:20:37,280 --> 00:20:41,060
product called buffers once you figure

515
00:20:39,410 --> 00:20:44,000
out where the protocol buffer goes over

516
00:20:41,060 --> 00:20:45,950
the wire and how its formatted you can

517
00:20:44,000 --> 00:20:52,970
just switch parameters and find cool

518
00:20:45,950 --> 00:20:55,550
bugs within a few minutes or hours so

519
00:20:52,970 --> 00:20:58,850
once you've found the bug I want to

520
00:20:55,550 --> 00:21:02,000
share a few tips on how to package this

521
00:20:58,850 --> 00:21:04,219
nicely Jason it this good presentation

522
00:21:02,000 --> 00:21:07,510
already in the morning and I can

523
00:21:04,220 --> 00:21:09,980
basically agree with all he said but

524
00:21:07,510 --> 00:21:12,590
specifically to the Google program I

525
00:21:09,980 --> 00:21:13,940
already mentioned we have full-time

526
00:21:12,590 --> 00:21:17,060
security engineers in the first-level

527
00:21:13,940 --> 00:21:18,380
triage already so you don't know you

528
00:21:17,060 --> 00:21:19,659
don't have to phrase the vulnerability

529
00:21:18,380 --> 00:21:22,550
in a way that makes sense to the average

530
00:21:19,660 --> 00:21:24,940
developer but phrase it in a way that

531
00:21:22,550 --> 00:21:27,290
makes sense to a security engineer and

532
00:21:24,940 --> 00:21:28,490
consider that we only take 10 to 30

533
00:21:27,290 --> 00:21:30,470
seconds or so to make the initial

534
00:21:28,490 --> 00:21:32,930
priority assessment we will look at

535
00:21:30,470 --> 00:21:35,510
everything but if we get a 2 page report

536
00:21:32,930 --> 00:21:37,700
where it's not immediately clear what

537
00:21:35,510 --> 00:21:39,140
the impact is you'll probably get end up

538
00:21:37,700 --> 00:21:41,000
in a lower priority bucket and it will

539
00:21:39,140 --> 00:21:43,270
take days or they're several weeks in

540
00:21:41,000 --> 00:21:46,820
the West case so we can get back to you

541
00:21:43,270 --> 00:21:49,129
so the template trick that Jason

542
00:21:46,820 --> 00:21:51,020
mentioned early on this methodology talk

543
00:21:49,130 --> 00:21:53,450
actually works really well you can just

544
00:21:51,020 --> 00:21:55,700
scroll over the rim report and have a

545
00:21:53,450 --> 00:21:58,550
bullet point impact that is one sentence

546
00:21:55,700 --> 00:22:00,920
that explains what what is the actual

547
00:21:58,550 --> 00:22:02,419
impact that what happens when the bucket

548
00:22:00,920 --> 00:22:05,060
exploited what kind of data is leaked

549
00:22:02,420 --> 00:22:06,980
what action is taken a text scenario

550
00:22:05,060 --> 00:22:09,379
under which circumstances can design

551
00:22:06,980 --> 00:22:11,390
actually happen things like Allison Bob

552
00:22:09,380 --> 00:22:12,410
Ellis cherish this link with Bob Bob

553
00:22:11,390 --> 00:22:14,390
takes it and so on

554
00:22:12,410 --> 00:22:16,760
reproduction steps make it easy to

555
00:22:14,390 --> 00:22:18,860
reproduce the bug this is the only place

556
00:22:16,760 --> 00:22:20,240
where you should presented in the way

557
00:22:18,860 --> 00:22:21,740
that makes sense to the developer

558
00:22:20,240 --> 00:22:23,720
because the reproduction steps are

559
00:22:21,740 --> 00:22:25,340
ultimately passed as is to the

560
00:22:23,720 --> 00:22:27,020
development in most cases

561
00:22:25,340 --> 00:22:28,928
whereas the impact and remediation

562
00:22:27,020 --> 00:22:31,040
guidance is not as important for us

563
00:22:28,929 --> 00:22:35,240
because that gets translated by our

564
00:22:31,040 --> 00:22:37,580
security team and of course keep the

565
00:22:35,240 --> 00:22:39,679
discussion concise and technical don't

566
00:22:37,580 --> 00:22:42,470
try to social engineer your way into a

567
00:22:39,679 --> 00:22:44,510
reward this will just make it slower and

568
00:22:42,470 --> 00:22:46,010
ultimately we might decide that

569
00:22:44,510 --> 00:22:49,010
something that is actually block is not

570
00:22:46,010 --> 00:22:50,750
a bug if we feel like the arguments I'm

571
00:22:49,010 --> 00:22:53,860
not consumed conveyed in a technical way

572
00:22:50,750 --> 00:22:59,240
right so just keep it technical and

573
00:22:53,860 --> 00:23:01,159
everything else will follow we have the

574
00:22:59,240 --> 00:23:03,380
back under university which is which is

575
00:23:01,160 --> 00:23:05,870
basically a collection of tips on how to

576
00:23:03,380 --> 00:23:09,440
how to design your reports things to

577
00:23:05,870 --> 00:23:12,799
look out for presentations so I can only

578
00:23:09,440 --> 00:23:12,980
recommend to check that out one more

579
00:23:12,799 --> 00:23:16,990
thing

580
00:23:12,980 --> 00:23:19,250
try to avoid complicated tooling setups

581
00:23:16,990 --> 00:23:21,919
probably all of your hands of hands the

582
00:23:19,250 --> 00:23:25,299
automated tooling most of you seem to

583
00:23:21,919 --> 00:23:28,220
simply using verb which is super awesome

584
00:23:25,299 --> 00:23:29,870
but at the end of the day we all rely on

585
00:23:28,220 --> 00:23:32,150
the development teams on a product site

586
00:23:29,870 --> 00:23:34,100
to reproduce and to fix the bargain so

587
00:23:32,150 --> 00:23:36,620
if you require a knowledge of three

588
00:23:34,100 --> 00:23:38,719
different security tools this will delay

589
00:23:36,620 --> 00:23:40,189
of the bug fix in the end because we

590
00:23:38,720 --> 00:23:41,990
have to convey the report in a way that

591
00:23:40,190 --> 00:23:50,000
the product team doesn't have to install

592
00:23:41,990 --> 00:23:51,799
burp on their machines so I want to

593
00:23:50,000 --> 00:23:56,690
cover some of the lesser-known ways to

594
00:23:51,799 --> 00:23:59,740
get even more money from Google the

595
00:23:56,690 --> 00:24:03,220
first of which being the abusive ERP and

596
00:23:59,740 --> 00:24:05,840
that's actually a way of rewarding about

597
00:24:03,220 --> 00:24:10,700
security issues that aren't technical

598
00:24:05,840 --> 00:24:13,730
vulnerabilities say you can abuse some

599
00:24:10,700 --> 00:24:15,320
free cloud resources to mine Bitcoin on

600
00:24:13,730 --> 00:24:16,820
a thousand thousand senses without being

601
00:24:15,320 --> 00:24:20,178
detected by any of our account abuse

602
00:24:16,820 --> 00:24:20,689
systems or there's a way of data sharing

603
00:24:20,179 --> 00:24:23,210
within

604
00:24:20,690 --> 00:24:24,410
some app where users might accidentally

605
00:24:23,210 --> 00:24:26,360
share more data and they're willing to

606
00:24:24,410 --> 00:24:28,520
just because they're super into action

607
00:24:26,360 --> 00:24:30,740
between some steps well you can

608
00:24:28,520 --> 00:24:33,470
systematically bypass some review and

609
00:24:30,740 --> 00:24:36,200
say Google Maps you can take over

610
00:24:33,470 --> 00:24:38,000
listings on maps we've had great reports

611
00:24:36,200 --> 00:24:40,940
actually that involved sending postcards

612
00:24:38,000 --> 00:24:43,100
to fake mailboxes and then relying on

613
00:24:40,940 --> 00:24:45,260
some postal routing issues things like

614
00:24:43,100 --> 00:24:47,840
that that systematically bypass our our

615
00:24:45,260 --> 00:24:49,760
review processes we actually care about

616
00:24:47,840 --> 00:24:53,120
this and want to help the products fix

617
00:24:49,760 --> 00:24:55,430
their high-level business logic so we

618
00:24:53,120 --> 00:24:57,949
will reward these separately and Google

619
00:24:55,430 --> 00:25:00,350
abuse founders your reward program and

620
00:24:57,950 --> 00:25:02,750
the way this works is you just send us

621
00:25:00,350 --> 00:25:04,610
the usual report and if it looks like

622
00:25:02,750 --> 00:25:06,050
something that our trust and safety team

623
00:25:04,610 --> 00:25:09,469
it's my care bot we will just

624
00:25:06,050 --> 00:25:11,450
transparently route it their way so if

625
00:25:09,470 --> 00:25:13,550
you found something that is super weird

626
00:25:11,450 --> 00:25:16,340
but technically working as intended

627
00:25:13,550 --> 00:25:20,770
maybe it was submitting it anyway and we

628
00:25:16,340 --> 00:25:20,770
might end up issuing you reward for that

629
00:25:23,050 --> 00:25:27,800
the second one and personally my

630
00:25:25,460 --> 00:25:29,780
favorite one is research grants which is

631
00:25:27,800 --> 00:25:33,020
basically free money from Google no

632
00:25:29,780 --> 00:25:36,200
strings attached the way this works is

633
00:25:33,020 --> 00:25:40,100
once you've submitted several high

634
00:25:36,200 --> 00:25:42,500
quality reports to us and we repeatedly

635
00:25:40,100 --> 00:25:44,510
issued bounties to you you can apply for

636
00:25:42,500 --> 00:25:47,240
these research grants where we basically

637
00:25:44,510 --> 00:25:51,530
ask you to please look at this new

638
00:25:47,240 --> 00:25:53,210
product maybe because there are some

639
00:25:51,530 --> 00:25:57,290
technology choices in there that we

640
00:25:53,210 --> 00:25:59,090
believe I'm more risky but just because

641
00:25:57,290 --> 00:26:00,530
we don't have the time to look at the

642
00:25:59,090 --> 00:26:02,899
product ourselves as much as we would

643
00:26:00,530 --> 00:26:04,850
like to so these are products away

644
00:26:02,900 --> 00:26:07,610
you're more likely to find bugs anyway

645
00:26:04,850 --> 00:26:11,840
and we just give you money to do our job

646
00:26:07,610 --> 00:26:13,520
basically you can just look at the

647
00:26:11,840 --> 00:26:15,620
product if you don't find any bugs

648
00:26:13,520 --> 00:26:17,660
that's perfectly fine you will just keep

649
00:26:15,620 --> 00:26:19,899
the money if you find bugs you will

650
00:26:17,660 --> 00:26:23,300
still get extra money so we pay for each

651
00:26:19,900 --> 00:26:24,800
part individually is on top of that the

652
00:26:23,300 --> 00:26:27,770
only thing we ask for in these cases is

653
00:26:24,800 --> 00:26:30,050
that you kind of do a write of what what

654
00:26:27,770 --> 00:26:32,180
you looked at what kind of bugs your

655
00:26:30,050 --> 00:26:34,220
methodology that we can get get a better

656
00:26:32,180 --> 00:26:39,039
understanding of how much

657
00:26:34,220 --> 00:26:41,570
the product actually received yeah

658
00:26:39,039 --> 00:26:42,919
highly every recommend to check result

659
00:26:41,570 --> 00:26:48,408
if you submitted a few successful

660
00:26:42,919 --> 00:26:52,009
reports and the last one and maybe a

661
00:26:48,409 --> 00:26:55,039
good way of getting into fuzzing is our

662
00:26:52,009 --> 00:26:56,960
pet rewards program and this means we

663
00:26:55,039 --> 00:26:58,908
basically pay you for proactive security

664
00:26:56,960 --> 00:27:02,480
improvements to the open source world

665
00:26:58,909 --> 00:27:03,710
say you're implementing a new exploit

666
00:27:02,480 --> 00:27:06,700
mitigation or you're adding a new

667
00:27:03,710 --> 00:27:08,539
exploit mitigation to some high-profile

668
00:27:06,700 --> 00:27:10,370
library that's bound to memory

669
00:27:08,539 --> 00:27:11,960
corruption and that will ultimately make

670
00:27:10,370 --> 00:27:14,870
it more safe for the entire world to use

671
00:27:11,960 --> 00:27:16,490
this library or you're implementing a

672
00:27:14,870 --> 00:27:20,870
path check for some complicated file

673
00:27:16,490 --> 00:27:22,700
format puzzle there's a list of pretty

674
00:27:20,870 --> 00:27:24,799
large list actually of libraries and

675
00:27:22,700 --> 00:27:29,750
frameworks that we care about you can

676
00:27:24,799 --> 00:27:31,399
find it on our ERP website and as soon

677
00:27:29,750 --> 00:27:33,470
as you make these contributions just

678
00:27:31,399 --> 00:27:34,729
tell us about them we'll take a look and

679
00:27:33,470 --> 00:27:39,080
then issue rewards up to several

680
00:27:34,730 --> 00:27:40,460
thousand dollars for them and that's so

681
00:27:39,080 --> 00:27:42,470
if you ever wanted to get started with

682
00:27:40,460 --> 00:27:44,269
safe housing just pick an open source

683
00:27:42,470 --> 00:27:46,370
library on this list that doesn't yet

684
00:27:44,269 --> 00:27:48,440
have a good coverage writer

685
00:27:46,370 --> 00:27:50,658
father worked with the Moke with the

686
00:27:48,440 --> 00:27:51,980
maintenance of the library get the good

687
00:27:50,659 --> 00:27:53,659
feeling of having improved the open

688
00:27:51,980 --> 00:27:59,720
source world and get some money along

689
00:27:53,659 --> 00:28:03,049
the way similarly we have Auto fuss pet

690
00:27:59,720 --> 00:28:05,809
rewards all of us is a buzzing pipeline

691
00:28:03,049 --> 00:28:08,570
where we run father's on open source

692
00:28:05,809 --> 00:28:10,428
libraries and whenever our fathers

693
00:28:08,570 --> 00:28:12,678
detect a unique crash signature we will

694
00:28:10,429 --> 00:28:14,720
file a bug in our public bug tracker so

695
00:28:12,679 --> 00:28:17,000
you can just go to the google issue

696
00:28:14,720 --> 00:28:19,279
tracker take a look at which unique

697
00:28:17,000 --> 00:28:22,250
crashes there are comment on one of them

698
00:28:19,279 --> 00:28:23,929
saying hey I want to fix that then you

699
00:28:22,250 --> 00:28:25,429
take a look at the crash write a patch

700
00:28:23,929 --> 00:28:27,500
work with the maintain us to get it

701
00:28:25,429 --> 00:28:30,049
accepted upstream and if it stays

702
00:28:27,500 --> 00:28:32,149
upstream for months and fixes actually

703
00:28:30,049 --> 00:28:36,320
fixes the crash then again we will give

704
00:28:32,149 --> 00:28:37,879
you money so that's a great way of kind

705
00:28:36,320 --> 00:28:39,769
of getting into fuzzing especially if

706
00:28:37,879 --> 00:28:43,899
you want to later on use the public

707
00:28:39,769 --> 00:28:43,899
knowledge to find bugs

708
00:28:44,400 --> 00:28:50,410
all right that's all I got I was under

709
00:28:49,330 --> 00:28:52,510
the impression that I have 30 minutes

710
00:28:50,410 --> 00:28:55,780
well apparently I have 45 so it's a bit

711
00:28:52,510 --> 00:28:58,780
early but if you have any questions or

712
00:28:55,780 --> 00:29:01,080
comments I'm happy to answer hmm thanks

713
00:28:58,780 --> 00:29:01,080
for coming

714
00:29:02,720 --> 00:29:07,609
[Applause]

