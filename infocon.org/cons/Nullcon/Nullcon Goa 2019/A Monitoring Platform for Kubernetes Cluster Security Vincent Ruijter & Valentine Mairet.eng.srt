1
00:00:02,990 --> 00:00:07,710
all right hi everybody

2
00:00:05,550 --> 00:00:09,750
so yeah we're here to talk about a tool

3
00:00:07,710 --> 00:00:10,260
we built for ya Cuba nice class of

4
00:00:09,750 --> 00:00:12,690
security

5
00:00:10,260 --> 00:00:15,450
my name is Vincent and I'm Valentine

6
00:00:12,690 --> 00:00:17,850
that's Valentin so I'm currently working

7
00:00:15,450 --> 00:00:19,529
at open book as a hacker in residence or

8
00:00:17,850 --> 00:00:22,289
a social media company who aims to

9
00:00:19,529 --> 00:00:23,820
replace Facebook in the future I know

10
00:00:22,289 --> 00:00:25,920
how to quit vim and I'm a really avid

11
00:00:23,820 --> 00:00:28,679
film user and hopefully you'll see some

12
00:00:25,920 --> 00:00:29,730
vim Pro s during the talk somewhere so

13
00:00:28,679 --> 00:00:32,729
my name is Vance McMillan

14
00:00:29,730 --> 00:00:34,920
I work at the KP and red team I used to

15
00:00:32,729 --> 00:00:37,470
be on the blue side working for Fox IT

16
00:00:34,920 --> 00:00:40,680
and adian in the Netherlands and now

17
00:00:37,470 --> 00:00:42,450
I've come to the dark I mean red side I

18
00:00:40,680 --> 00:00:45,030
know how to create them but I prefer to

19
00:00:42,450 --> 00:00:46,860
use Nano and actually this is my first

20
00:00:45,030 --> 00:00:50,960
talk so bear with me I'm a bit nervous

21
00:00:46,860 --> 00:00:50,960
so I hope this goes well

22
00:00:51,230 --> 00:00:55,050
so now the outline of the talk first we

23
00:00:53,700 --> 00:00:57,060
do a little bit of introduction there is

24
00:00:55,050 --> 00:00:59,640
a lot of Cuba news nomenclature we will

25
00:00:57,060 --> 00:01:01,260
explain then we'll talk about the

26
00:00:59,640 --> 00:01:03,390
several attacks that are possible in

27
00:01:01,260 --> 00:01:04,920
Cuba needs then we'll show you our

28
00:01:03,390 --> 00:01:08,490
logging architecture basically how to

29
00:01:04,920 --> 00:01:10,170
use fluent elasticsearch & gabbana then

30
00:01:08,490 --> 00:01:12,539
we'll talk about the traces you can see

31
00:01:10,170 --> 00:01:13,740
in the logs when we do certain tags and

32
00:01:12,539 --> 00:01:15,929
then we'll show you around the alert

33
00:01:13,740 --> 00:01:17,999
system the security dashboard and I do

34
00:01:15,929 --> 00:01:19,979
some demos unfortunately no live demos

35
00:01:17,999 --> 00:01:22,079
because some stuff would networking was

36
00:01:19,979 --> 00:01:26,310
quite hard to mimic so we have made some

37
00:01:22,079 --> 00:01:28,048
some recordings oh wow this really says

38
00:01:26,310 --> 00:01:29,820
it so what is Cuba needs

39
00:01:28,049 --> 00:01:32,609
well Cuba needs is a container

40
00:01:29,820 --> 00:01:36,298
organization tool it's written in go

41
00:01:32,609 --> 00:01:38,130
mainly and in 26 2014 it was released by

42
00:01:36,299 --> 00:01:40,439
Google has now part of the cloud native

43
00:01:38,130 --> 00:01:43,920
computing foundation and it usually runs

44
00:01:40,439 --> 00:01:46,079
with docker also Cuba needs is number

45
00:01:43,920 --> 00:01:48,270
two on the most active github repository

46
00:01:46,079 --> 00:01:50,158
with the Linux kernel of course being

47
00:01:48,270 --> 00:01:52,649
the absolute number one sort needs is a

48
00:01:50,159 --> 00:01:55,350
a lot of ongoing development is a very

49
00:01:52,649 --> 00:01:57,240
alive project and it's also the I think

50
00:01:55,350 --> 00:01:58,770
the most well known and the most used

51
00:01:57,240 --> 00:02:02,310
container organization tool that's

52
00:01:58,770 --> 00:02:03,600
currently around with Cuba needs in 2014

53
00:02:02,310 --> 00:02:06,030
it was not a lot of security in place

54
00:02:03,600 --> 00:02:08,728
when I was doing a red team exercise at

55
00:02:06,030 --> 00:02:11,850
the KPM I found on the internet an

56
00:02:08,729 --> 00:02:13,950
exposed cluster in 2016 and every API

57
00:02:11,850 --> 00:02:17,250
call I made to that API endpoint was

58
00:02:13,950 --> 00:02:19,380
admin and that's because in version 1.9

59
00:02:17,250 --> 00:02:21,390
they mandated use of role based access

60
00:02:19,380 --> 00:02:23,370
control which basically applies the

61
00:02:21,390 --> 00:02:24,600
optimization to the cluster and there's

62
00:02:23,370 --> 00:02:26,430
also what's also a problem with the

63
00:02:24,600 --> 00:02:27,989
Cuban if dashboard it allows people to

64
00:02:26,430 --> 00:02:29,760
easily manage an interface with the

65
00:02:27,990 --> 00:02:31,710
cluster and if it was exposed to the

66
00:02:29,760 --> 00:02:33,660
outside just logging in also meant you

67
00:02:31,710 --> 00:02:35,220
were close to admin but they changed a

68
00:02:33,660 --> 00:02:37,829
lot of things and nowadays it's a lot

69
00:02:35,220 --> 00:02:40,350
harder to do that and they used to have

70
00:02:37,830 --> 00:02:42,540
and I see a lot of classes have this

71
00:02:40,350 --> 00:02:44,880
they have playing tag secrets in the HDD

72
00:02:42,540 --> 00:02:47,340
and sed is basically the secret manager

73
00:02:44,880 --> 00:02:49,620
of the cluster and since version 1.7 and

74
00:02:47,340 --> 00:02:51,720
version 3 of HDD which is built like

75
00:02:49,620 --> 00:02:53,610
core OS you can also encrypt the secrets

76
00:02:51,720 --> 00:02:57,180
which adds another layer of difficulty

77
00:02:53,610 --> 00:02:58,290
for attackers so people have no

78
00:02:57,180 --> 00:03:02,150
experience in Cuba needs we have

79
00:02:58,290 --> 00:03:04,380
prepared a nomenclature table for you so

80
00:03:02,150 --> 00:03:07,110
this is basically copy pasted from the

81
00:03:04,380 --> 00:03:08,670
Cuban eats website and these terms are

82
00:03:07,110 --> 00:03:10,290
going to be used in the talk so we're

83
00:03:08,670 --> 00:03:12,239
going to talk about notes

84
00:03:10,290 --> 00:03:15,120
so note is a worker machine in Cuba

85
00:03:12,240 --> 00:03:16,980
needs secrets these are files or is the

86
00:03:15,120 --> 00:03:19,140
set of files that contain authentication

87
00:03:16,980 --> 00:03:22,160
tokens credentials SSH keys everything

88
00:03:19,140 --> 00:03:24,480
that you need to keep secret namespaces

89
00:03:22,160 --> 00:03:29,430
basically Cuba nice abstraction to

90
00:03:24,480 --> 00:03:31,410
support multiple virtual clusters and a

91
00:03:29,430 --> 00:03:33,210
pod is a set of running containers in

92
00:03:31,410 --> 00:03:34,560
the cluster and a container I think

93
00:03:33,210 --> 00:03:36,840
everybody knows this means basically

94
00:03:34,560 --> 00:03:39,630
executable image that contains software

95
00:03:36,840 --> 00:03:40,110
and all of these dependencies the

96
00:03:39,630 --> 00:03:42,600
cubelets

97
00:03:40,110 --> 00:03:44,310
which is an agent that runs on nodes and

98
00:03:42,600 --> 00:03:47,549
make sure that containers are running in

99
00:03:44,310 --> 00:03:49,620
a pod cube CTL a cube control which is a

100
00:03:47,550 --> 00:03:51,030
command iTune command line tool for

101
00:03:49,620 --> 00:03:53,790
communicating with the cuban it's api

102
00:03:51,030 --> 00:03:55,770
server and a daemon set which is

103
00:03:53,790 --> 00:03:57,750
something that ensures a copy of a pod

104
00:03:55,770 --> 00:04:00,780
is running across a set of nodes in a

105
00:03:57,750 --> 00:04:02,880
cluster so this is an image of a basic

106
00:04:00,780 --> 00:04:04,860
cluster with two nodes and one master

107
00:04:02,880 --> 00:04:06,450
node inside the master knows there are a

108
00:04:04,860 --> 00:04:09,630
couple things happening there's always a

109
00:04:06,450 --> 00:04:12,149
cuba cuba scheduler cube controller and

110
00:04:09,630 --> 00:04:14,790
also add CDs in there and it also hosts

111
00:04:12,150 --> 00:04:16,289
the main Cuba needs API the node must

112
00:04:14,790 --> 00:04:17,519
the nodes communicate with the Cuba

113
00:04:16,289 --> 00:04:19,048
needs master API and all the

114
00:04:17,519 --> 00:04:21,959
authentication goes through the actual

115
00:04:19,048 --> 00:04:23,878
master API the node communicates with

116
00:04:21,959 --> 00:04:25,650
with with with the containers and of

117
00:04:23,879 --> 00:04:27,060
course the the cube root node makes sure

118
00:04:25,650 --> 00:04:27,400
needs to make sure that the containers

119
00:04:27,060 --> 00:04:30,520
are

120
00:04:27,400 --> 00:04:32,710
and if I was to try and spawn a pot it

121
00:04:30,520 --> 00:04:34,479
goes from the master to the couplet API

122
00:04:32,710 --> 00:04:36,219
so there's there's a lot of parsing

123
00:04:34,480 --> 00:04:39,430
involved so the arrows are actually a

124
00:04:36,220 --> 00:04:42,510
proxying to requests back and forth and

125
00:04:39,430 --> 00:04:44,620
it's also where the latest CVE came from

126
00:04:42,510 --> 00:04:45,099
so now we talked a bit about why we are

127
00:04:44,620 --> 00:04:47,500
here

128
00:04:45,100 --> 00:04:49,510
yeah so what are we exactly doing here

129
00:04:47,500 --> 00:04:51,639
that's the question everybody asks but

130
00:04:49,510 --> 00:04:54,539
you know so we're here to present a

131
00:04:51,639 --> 00:04:56,949
monitoring tool so this monitoring to

132
00:04:54,540 --> 00:04:59,500
the manolio to build it we configure the

133
00:04:56,949 --> 00:05:02,560
logging architecture for Cuba needs to

134
00:04:59,500 --> 00:05:04,180
store audit logs and we perform analysis

135
00:05:02,560 --> 00:05:06,460
on these logs to detect and label

136
00:05:04,180 --> 00:05:08,860
specific events can be malicious events

137
00:05:06,460 --> 00:05:11,409
or basically events you want to keep

138
00:05:08,860 --> 00:05:13,060
track of and we created a security

139
00:05:11,410 --> 00:05:16,450
dashboard for communities which were

140
00:05:13,060 --> 00:05:19,090
which you will see in a bit so the

141
00:05:16,450 --> 00:05:21,039
reason why we created this is because we

142
00:05:19,090 --> 00:05:23,080
couldn't find any explicit resources

143
00:05:21,039 --> 00:05:26,260
online on how to audit cabinets and

144
00:05:23,080 --> 00:05:28,300
there were no tools available to label

145
00:05:26,260 --> 00:05:29,949
activity in your clusters to basically

146
00:05:28,300 --> 00:05:32,200
have visibility over your clusters and

147
00:05:29,949 --> 00:05:35,100
there was no security dashboard like the

148
00:05:32,200 --> 00:05:37,240
one we created so this is why we're here

149
00:05:35,100 --> 00:05:38,770
so there are a lot of attack methods for

150
00:05:37,240 --> 00:05:40,510
for cuny's and we're gonna run through a

151
00:05:38,770 --> 00:05:42,280
couple of them but they're all probably

152
00:05:40,510 --> 00:05:44,260
a lot more and a lot of more incoming

153
00:05:42,280 --> 00:05:47,169
because Cuba needs security I think kind

154
00:05:44,260 --> 00:05:48,760
of got a a kick start so one of them

155
00:05:47,169 --> 00:05:50,109
common things it is actually possible

156
00:05:48,760 --> 00:05:51,580
and a lot of clusters is that it's

157
00:05:50,110 --> 00:05:53,919
possible to create a pot in privileged

158
00:05:51,580 --> 00:05:55,359
mode when you create a pot in privileged

159
00:05:53,919 --> 00:05:58,719
mode it basically gives you the same

160
00:05:55,360 --> 00:06:00,880
right to mount block devices as if you

161
00:05:58,720 --> 00:06:02,110
were on the actual note machine if you

162
00:06:00,880 --> 00:06:04,719
run it as routes then you can basically

163
00:06:02,110 --> 00:06:06,810
compromise the entire node then from

164
00:06:04,720 --> 00:06:08,979
there on you can also get to the master

165
00:06:06,810 --> 00:06:10,720
another one is creating pots with a host

166
00:06:08,979 --> 00:06:13,270
path the host path means you want an

167
00:06:10,720 --> 00:06:16,120
amount should share a files

168
00:06:13,270 --> 00:06:18,460
yeah a directory on the node so let's

169
00:06:16,120 --> 00:06:19,599
say you do host pad root you can

170
00:06:18,460 --> 00:06:22,330
actually mount the entire root

171
00:06:19,599 --> 00:06:25,180
filesystem of the node other attacks are

172
00:06:22,330 --> 00:06:27,430
abusing privileges privileged spots at

173
00:06:25,180 --> 00:06:28,780
times you can you can maybe get a curl

174
00:06:27,430 --> 00:06:31,090
command injection in a pot that's

175
00:06:28,780 --> 00:06:32,888
enabled as privileged or you can also

176
00:06:31,090 --> 00:06:34,719
start abusing a ceiling tokens maybe

177
00:06:32,889 --> 00:06:36,490
there's a path reversal which allows you

178
00:06:34,720 --> 00:06:38,790
to get the Kuban is token and then maybe

179
00:06:36,490 --> 00:06:40,980
you can use it to login to a dashboard

180
00:06:38,790 --> 00:06:42,690
they're also some methods of deploying

181
00:06:40,980 --> 00:06:44,240
some default configurations in some

182
00:06:42,690 --> 00:06:46,560
cases even there's an unauthenticated

183
00:06:44,240 --> 00:06:48,930
master API where you can just basically

184
00:06:46,560 --> 00:06:50,850
send to the API execute a shell in this

185
00:06:48,930 --> 00:06:52,050
command and you obtain a shell but

186
00:06:50,850 --> 00:06:56,760
they're like endless endless

187
00:06:52,050 --> 00:06:58,560
possibilities there we go this is the

188
00:06:56,760 --> 00:07:01,110
first the first Yama file if you are

189
00:06:58,560 --> 00:07:02,850
willing to commit to going with Cuba

190
00:07:01,110 --> 00:07:04,770
needs then you're going to write a lot

191
00:07:02,850 --> 00:07:07,440
of llamo like a state laughs yeah mo I

192
00:07:04,770 --> 00:07:09,359
don't love it that much but this is for

193
00:07:07,440 --> 00:07:12,000
instance a privilege the mo file

194
00:07:09,360 --> 00:07:13,800
responds to the put into a previous mode

195
00:07:12,000 --> 00:07:16,770
and which allows you of course to

196
00:07:13,800 --> 00:07:18,630
compromise the node the second one is a

197
00:07:16,770 --> 00:07:20,460
host mount here you can see in the

198
00:07:18,630 --> 00:07:22,920
highlighted area that we mount the path

199
00:07:20,460 --> 00:07:25,710
which is basically the root of the of

200
00:07:22,920 --> 00:07:29,970
the node into the root folder so when we

201
00:07:25,710 --> 00:07:31,500
would apply this this pod then we can

202
00:07:29,970 --> 00:07:32,970
mount indeed the file system and if

203
00:07:31,500 --> 00:07:35,070
you're running as root inside the pot

204
00:07:32,970 --> 00:07:36,420
then you're also root on the node now

205
00:07:35,070 --> 00:07:38,730
which is quite interesting and that way

206
00:07:36,420 --> 00:07:40,590
you can add reverse shell soup cron jobs

207
00:07:38,730 --> 00:07:42,990
you can put authorized keys in there you

208
00:07:40,590 --> 00:07:44,969
can put your user into sudo remove the

209
00:07:42,990 --> 00:07:49,260
root password possibilities are truly

210
00:07:44,970 --> 00:07:52,190
endless so now we talked a bit about our

211
00:07:49,260 --> 00:07:55,320
logging architecture we're using fluent

212
00:07:52,190 --> 00:07:58,320
oh wait no first we need to enable audit

213
00:07:55,320 --> 00:08:00,770
logging so in Cuba knees every there's a

214
00:07:58,320 --> 00:08:03,270
cube knees API server where all the

215
00:08:00,770 --> 00:08:05,280
requests are routed through and you can

216
00:08:03,270 --> 00:08:06,740
enable audit logging by appending the

217
00:08:05,280 --> 00:08:10,080
following lines to the configuration

218
00:08:06,740 --> 00:08:11,910
this basically tells Kuban is - to start

219
00:08:10,080 --> 00:08:13,620
auditing and save everything in a JSON

220
00:08:11,910 --> 00:08:15,360
file the Jason Valley is very verbose

221
00:08:13,620 --> 00:08:17,090
I'm gonna say this a couple more times

222
00:08:15,360 --> 00:08:19,230
because it is truly very verbose and

223
00:08:17,090 --> 00:08:21,119
what you also need to do in this case is

224
00:08:19,230 --> 00:08:23,280
you need to create a host mount too far

225
00:08:21,120 --> 00:08:25,650
log on other nodes and then you can just

226
00:08:23,280 --> 00:08:28,950
the the fluent configuration will

227
00:08:25,650 --> 00:08:29,989
actually get the log files from this

228
00:08:28,950 --> 00:08:33,000
directory

229
00:08:29,990 --> 00:08:34,620
we will post after our talk we will post

230
00:08:33,000 --> 00:08:36,360
our configuration files and point it to

231
00:08:34,620 --> 00:08:39,179
a github so you guys can have a look at

232
00:08:36,360 --> 00:08:41,280
how it's done as you can see the logging

233
00:08:39,179 --> 00:08:43,439
is quite ferbos I had to omit a lot of

234
00:08:41,280 --> 00:08:45,510
lines to make this fit but it even

235
00:08:43,440 --> 00:08:46,860
caches requests and responses so you can

236
00:08:45,510 --> 00:08:48,420
actually see what is allowed what's not

237
00:08:46,860 --> 00:08:50,200
allowed you can see the status of

238
00:08:48,420 --> 00:08:52,060
everything

239
00:08:50,200 --> 00:08:54,190
yeah of course a lot of llamo and if it

240
00:08:52,060 --> 00:08:58,209
gets converted quite easily to Jason and

241
00:08:54,190 --> 00:09:00,820
yes I said it's very verbose so how do

242
00:08:58,209 --> 00:09:02,349
we log well we use fluent fluent on

243
00:09:00,820 --> 00:09:04,480
their website has a configuration for

244
00:09:02,350 --> 00:09:06,040
you it's also a Yama file which you

245
00:09:04,480 --> 00:09:08,139
apply to your cluster it automatically

246
00:09:06,040 --> 00:09:10,029
downloads fluent container and you just

247
00:09:08,139 --> 00:09:11,800
need to point it to elasticsearch tell

248
00:09:10,029 --> 00:09:13,240
it where the logs are and it will start

249
00:09:11,800 --> 00:09:16,449
streaming the logs to your elasticsearch

250
00:09:13,240 --> 00:09:18,940
cluster but it also is it's a daemon set

251
00:09:16,449 --> 00:09:21,040
which means that if you have like 50

252
00:09:18,940 --> 00:09:22,570
notes in your cluster you apply the

253
00:09:21,040 --> 00:09:25,389
fluent demon set which means it will

254
00:09:22,570 --> 00:09:27,760
create on every pod sorry on every node

255
00:09:25,389 --> 00:09:29,860
you're you're fluent pod this is also

256
00:09:27,760 --> 00:09:31,630
great for lateral movement if you are

257
00:09:29,860 --> 00:09:34,060
allowed to create a demon set you can

258
00:09:31,630 --> 00:09:36,490
also use it to instantaneously have a

259
00:09:34,060 --> 00:09:38,829
shell on other nodes what we also did

260
00:09:36,490 --> 00:09:40,690
because we had to use some extra modules

261
00:09:38,829 --> 00:09:42,910
for fluent which need to be compiled at

262
00:09:40,690 --> 00:09:44,529
runtime we created a unit container and

263
00:09:42,910 --> 00:09:46,899
the inner container basically fetches

264
00:09:44,529 --> 00:09:48,699
resources install header files install

265
00:09:46,899 --> 00:09:50,889
so compiler and then compiles the gem

266
00:09:48,699 --> 00:09:53,529
plugins and then when the in the

267
00:09:50,889 --> 00:09:54,970
container dies everything is compiled

268
00:09:53,529 --> 00:09:57,279
and you don't the tools are not left

269
00:09:54,970 --> 00:09:58,779
over in the container and we used

270
00:09:57,279 --> 00:10:00,760
elasticsearch because the elasticsearch

271
00:09:58,779 --> 00:10:02,800
is quite flexible it's quite easy to

272
00:10:00,760 --> 00:10:07,000
setup and of course it works really well

273
00:10:02,800 --> 00:10:08,439
with Cabana we had some problems so if

274
00:10:07,000 --> 00:10:10,839
you have a class with multiple nodes

275
00:10:08,440 --> 00:10:12,519
what will happen is that the same audit

276
00:10:10,839 --> 00:10:14,769
logs will be push multiple times at some

277
00:10:12,519 --> 00:10:16,180
point so you need to create like a

278
00:10:14,769 --> 00:10:17,529
unique constraint so you don't get

279
00:10:16,180 --> 00:10:19,290
collisions and has elasticsearch

280
00:10:17,529 --> 00:10:21,490
complaining about duplicate entries

281
00:10:19,290 --> 00:10:23,260
we're not the first one that has this

282
00:10:21,490 --> 00:10:25,269
problem actually there are a lot of

283
00:10:23,260 --> 00:10:26,949
people there also some variations that

284
00:10:25,269 --> 00:10:29,199
happen in the key in the elastic search

285
00:10:26,949 --> 00:10:30,849
mapping because sometimes the request

286
00:10:29,199 --> 00:10:32,500
object and a response object that you

287
00:10:30,850 --> 00:10:34,029
get from the cubanía audit logs and they

288
00:10:32,500 --> 00:10:36,670
are not the same so what will happen

289
00:10:34,029 --> 00:10:39,730
then is that when the first response

290
00:10:36,670 --> 00:10:41,740
object is a net by elastic search it

291
00:10:39,730 --> 00:10:44,019
creates this specific method method of

292
00:10:41,740 --> 00:10:45,370
how the how the objects are imploded and

293
00:10:44,019 --> 00:10:47,380
laid out so it's very nice you can

294
00:10:45,370 --> 00:10:48,339
recursively go to your nested Jason but

295
00:10:47,380 --> 00:10:50,380
then when you get another response

296
00:10:48,339 --> 00:10:52,449
object that does not match the main

297
00:10:50,380 --> 00:10:54,970
mapping elastic search is basically

298
00:10:52,449 --> 00:10:58,329
going to stop working for you so we

299
00:10:54,970 --> 00:11:01,750
create one jason response object as a as

300
00:10:58,329 --> 00:11:04,300
a string to work through that of course

301
00:11:01,750 --> 00:11:06,490
the the idea of resolve

302
00:11:04,300 --> 00:11:07,810
this came from from that post there and

303
00:11:06,490 --> 00:11:10,660
of course when you see a configuration

304
00:11:07,810 --> 00:11:15,099
files we give the credit to the founders

305
00:11:10,660 --> 00:11:16,870
of this solution so to visualize this so

306
00:11:15,100 --> 00:11:20,890
we're back at our original Cuba needs

307
00:11:16,870 --> 00:11:23,320
graph so it works with fluent is that

308
00:11:20,890 --> 00:11:25,689
you have a fluent container inside your

309
00:11:23,320 --> 00:11:28,060
node inside the pod and this container

310
00:11:25,690 --> 00:11:30,070
is mounted on the vara login file system

311
00:11:28,060 --> 00:11:33,280
so access is directly the logs from

312
00:11:30,070 --> 00:11:35,200
fascism and then how it fits in the big

313
00:11:33,280 --> 00:11:36,790
picture with elasticsearch is that this

314
00:11:35,200 --> 00:11:38,470
container will communicate with an

315
00:11:36,790 --> 00:11:41,620
elastic search instance and we can

316
00:11:38,470 --> 00:11:43,960
visualize this in Cabana and this is

317
00:11:41,620 --> 00:11:45,580
basically the out the outputs in the

318
00:11:43,960 --> 00:11:47,080
Cabana table there's much more

319
00:11:45,580 --> 00:11:51,820
information than this so here we have

320
00:11:47,080 --> 00:11:55,600
timestamp user requests made user agents

321
00:11:51,820 --> 00:11:57,580
and Method Cuba news method so we have

322
00:11:55,600 --> 00:11:59,260
much more information than this but this

323
00:11:57,580 --> 00:12:02,530
fits on the slide so that's why we

324
00:11:59,260 --> 00:12:06,069
truncated yeah basically that's that's

325
00:12:02,530 --> 00:12:07,390
what you get in the logs for in cuba so

326
00:12:06,070 --> 00:12:08,950
there are some that some traces we can

327
00:12:07,390 --> 00:12:10,689
show you around from from common uses I

328
00:12:08,950 --> 00:12:12,760
call them attack traces because when I'm

329
00:12:10,690 --> 00:12:14,410
doing a Cuba needs assessment the cube

330
00:12:12,760 --> 00:12:16,300
control binary is a post exploitation

331
00:12:14,410 --> 00:12:17,680
tool it's really awesome you can

332
00:12:16,300 --> 00:12:20,199
download it statically from the website

333
00:12:17,680 --> 00:12:23,229
actually you can see some common API

334
00:12:20,200 --> 00:12:25,810
usage we have the user agent we have to

335
00:12:23,230 --> 00:12:28,300
request your I the cuban ease method and

336
00:12:25,810 --> 00:12:30,729
of course also the user name is it there

337
00:12:28,300 --> 00:12:32,229
actually yeah the user name is there in

338
00:12:30,730 --> 00:12:34,210
the next one you'll see people trying to

339
00:12:32,230 --> 00:12:35,560
obtain secrets as you can see there

340
00:12:34,210 --> 00:12:37,720
they're amazing mainly being done with

341
00:12:35,560 --> 00:12:40,689
the cube CTL application because of the

342
00:12:37,720 --> 00:12:42,280
user agent header and you can also make

343
00:12:40,690 --> 00:12:43,990
rules for enumeration or dumping of

344
00:12:42,280 --> 00:12:45,640
secrets because that's actually what an

345
00:12:43,990 --> 00:12:47,860
attacker will do when it tries to let it

346
00:12:45,640 --> 00:12:51,189
move through the cluster here you see

347
00:12:47,860 --> 00:12:52,330
some cube CTL exec commands as you can

348
00:12:51,190 --> 00:12:54,520
see they're all in a get request the

349
00:12:52,330 --> 00:12:56,530
parameters are there and also here we

350
00:12:54,520 --> 00:12:58,390
can we can see the user who invoke this

351
00:12:56,530 --> 00:13:00,930
even the source IP so if you want to do

352
00:12:58,390 --> 00:13:03,340
some some banning we can do it as well

353
00:13:00,930 --> 00:13:05,739
there's one problem though we cannot see

354
00:13:03,340 --> 00:13:08,320
instructive to the executed commands so

355
00:13:05,740 --> 00:13:10,210
a lot of times what I do I will get a

356
00:13:08,320 --> 00:13:11,980
shell and then we use the cube control

357
00:13:10,210 --> 00:13:13,840
command it will send this request to

358
00:13:11,980 --> 00:13:15,610
open bash then it will negotiate a

359
00:13:13,840 --> 00:13:18,070
WebSocket connection and then all the

360
00:13:15,610 --> 00:13:20,110
all the the actual shell information

361
00:13:18,070 --> 00:13:22,420
our food input goes over the websocket

362
00:13:20,110 --> 00:13:25,029
Cuban is currently has no way of logging

363
00:13:22,420 --> 00:13:26,680
dead but if someone pulls a shell on

364
00:13:25,029 --> 00:13:28,509
your most sensitive servers in

365
00:13:26,680 --> 00:13:31,599
production then I think is a pretty good

366
00:13:28,509 --> 00:13:32,889
reason to have a look at it what we also

367
00:13:31,600 --> 00:13:35,649
did because we think privileged

368
00:13:32,889 --> 00:13:38,350
containers might be a threat we created

369
00:13:35,649 --> 00:13:39,610
a small - food item to show you when

370
00:13:38,350 --> 00:13:41,800
it's allowed to create a previous

371
00:13:39,610 --> 00:13:43,060
container so if I create a previous

372
00:13:41,800 --> 00:13:45,459
container there will be one entry here

373
00:13:43,060 --> 00:13:47,800
that says add the authorization plug-in

374
00:13:45,459 --> 00:13:51,819
allowed me to spawn the host escape

375
00:13:47,800 --> 00:13:52,870
container with that user so you can get

376
00:13:51,819 --> 00:13:55,660
a pretty good overview of what's

377
00:13:52,870 --> 00:13:57,779
currently going on there and it's a good

378
00:13:55,660 --> 00:14:00,759
indication for for compromised attempts

379
00:13:57,779 --> 00:14:02,079
yeah so moving on to the alert system so

380
00:14:00,759 --> 00:14:03,850
because we were able to see this

381
00:14:02,079 --> 00:14:06,540
information in the logs it gave us the

382
00:14:03,850 --> 00:14:09,819
idea to basically parse these logs and

383
00:14:06,540 --> 00:14:13,089
perform some reg X matching and to

384
00:14:09,819 --> 00:14:14,819
detect specific attacks so this is the

385
00:14:13,089 --> 00:14:17,050
alert system we called it Kate's cup

386
00:14:14,819 --> 00:14:18,849
because it sounds cool and it's

387
00:14:17,050 --> 00:14:21,250
basically a helper for helper for

388
00:14:18,850 --> 00:14:23,709
cubanía security monitoring and how is

389
00:14:21,250 --> 00:14:26,350
it a helper well it makes the analysis

390
00:14:23,709 --> 00:14:28,599
of Cuba needs audit logs easier and it

391
00:14:26,350 --> 00:14:31,060
provides it basically classifies these

392
00:14:28,600 --> 00:14:33,610
logs as labelled events so for example

393
00:14:31,060 --> 00:14:35,260
they get secrets or creating a pod will

394
00:14:33,610 --> 00:14:37,540
be labeled so you don't have to look

395
00:14:35,260 --> 00:14:39,490
into the requests yourself using regular

396
00:14:37,540 --> 00:14:41,260
expressions and provide more clarity

397
00:14:39,490 --> 00:14:42,819
about events because it will also give

398
00:14:41,260 --> 00:14:44,889
you information about the where where

399
00:14:42,819 --> 00:14:47,769
was this request made which pod which

400
00:14:44,889 --> 00:14:50,079
container everything and K scope the

401
00:14:47,769 --> 00:14:52,089
technical details of it they perform

402
00:14:50,079 --> 00:14:54,339
static analysis on the date range so you

403
00:14:52,089 --> 00:14:56,380
can give it I want this from I don't

404
00:14:54,339 --> 00:14:59,170
know March 12 till April and it will

405
00:14:56,380 --> 00:15:02,199
give you a static analysis of the thing

406
00:14:59,170 --> 00:15:04,349
and put in Cuba and it can also perform

407
00:15:02,199 --> 00:15:07,209
streaming analysis in almost real-time

408
00:15:04,350 --> 00:15:08,860
almost because we've actually noticed

409
00:15:07,209 --> 00:15:11,199
that there is a slight delay for the

410
00:15:08,860 --> 00:15:13,060
logs to get into elasticsearch so we

411
00:15:11,199 --> 00:15:16,240
wait we make the program wait a little

412
00:15:13,060 --> 00:15:19,089
bit in order to be sure that we fetched

413
00:15:16,240 --> 00:15:21,939
all the logs that have been generated it

414
00:15:19,089 --> 00:15:23,949
uses the Python API from elasticsearch

415
00:15:21,939 --> 00:15:27,849
the elasticsearch client and bison and

416
00:15:23,949 --> 00:15:30,399
it's not too threaded for extra speed so

417
00:15:27,850 --> 00:15:32,320
this is a nice little graph of case cop

418
00:15:30,399 --> 00:15:34,270
so it fetches so you have three

419
00:15:32,320 --> 00:15:37,060
the fetcher the parser and the pusher

420
00:15:34,270 --> 00:15:39,640
and it uses synchronized cues in order

421
00:15:37,060 --> 00:15:41,560
to simultaneously fetch parson Bush to

422
00:15:39,640 --> 00:15:43,480
elasticsearch so it fetches lakhs from

423
00:15:41,560 --> 00:15:45,209
elasticsearch it parses the logs with a

424
00:15:43,480 --> 00:15:48,430
set of regular expressions and it pushes

425
00:15:45,210 --> 00:15:50,620
alerts back to elasticsearch so labeled

426
00:15:48,430 --> 00:15:55,870
events with a bit of information about

427
00:15:50,620 --> 00:15:57,220
them and this is the logo by the way so

428
00:15:55,870 --> 00:15:58,540
how does it fit in a big picture well

429
00:15:57,220 --> 00:16:00,250
it's basically here connected with a

430
00:15:58,540 --> 00:16:03,520
elasticsearch and communicating back and

431
00:16:00,250 --> 00:16:05,770
forth with elasticsearch and this is

432
00:16:03,520 --> 00:16:09,310
what it looks like in Cabana so you have

433
00:16:05,770 --> 00:16:12,550
the timestamp description the user the

434
00:16:09,310 --> 00:16:14,530
name space and the pods concerned the

435
00:16:12,550 --> 00:16:16,359
description shows like port in immersion

436
00:16:14,530 --> 00:16:18,280
of all namespaces attempt to get all

437
00:16:16,360 --> 00:16:19,780
secrets from default so it provides

438
00:16:18,280 --> 00:16:23,079
information about what exactly happens

439
00:16:19,780 --> 00:16:26,050
and additional things like the user the

440
00:16:23,080 --> 00:16:28,900
cubelet cube CTL command is also in

441
00:16:26,050 --> 00:16:30,880
there and there's much more information

442
00:16:28,900 --> 00:16:34,000
that you can so you can make deductions

443
00:16:30,880 --> 00:16:35,620
yourself about the events but it does

444
00:16:34,000 --> 00:16:36,940
have some limitations so the

445
00:16:35,620 --> 00:16:39,310
classification is a one-to-one mapping

446
00:16:36,940 --> 00:16:42,580
because we're mapping event reg X to

447
00:16:39,310 --> 00:16:44,199
event so we cannot yet correlate

448
00:16:42,580 --> 00:16:46,510
multiple events which would be nice in

449
00:16:44,200 --> 00:16:49,660
order to detect more complex attack

450
00:16:46,510 --> 00:16:52,569
choices and the rules that so the

451
00:16:49,660 --> 00:16:54,699
detection rules they're inside the code

452
00:16:52,570 --> 00:16:57,490
so it would be nice to be able to add

453
00:16:54,700 --> 00:16:59,980
rules in some kind of interface however

454
00:16:57,490 --> 00:17:01,330
these limitations are actually potential

455
00:16:59,980 --> 00:17:06,069
for future work and we do plan on

456
00:17:01,330 --> 00:17:07,780
extending this so which tree to work we

457
00:17:06,069 --> 00:17:09,429
could create an interface for adding new

458
00:17:07,780 --> 00:17:11,709
rules to make it easy to add rules and

459
00:17:09,430 --> 00:17:13,900
delete rules correlate multiple events

460
00:17:11,709 --> 00:17:16,810
to dig more to detect more complex

461
00:17:13,900 --> 00:17:19,480
attack traces or even be able to follow

462
00:17:16,810 --> 00:17:21,938
an attacker throughout his movements his

463
00:17:19,480 --> 00:17:23,890
or her movements in communities we can

464
00:17:21,939 --> 00:17:27,040
actually integrate triggers so for

465
00:17:23,890 --> 00:17:29,950
example if you have a an attack on on

466
00:17:27,040 --> 00:17:33,690
your asset like it's at city which is a

467
00:17:29,950 --> 00:17:38,550
very important pod container

468
00:17:33,690 --> 00:17:41,460
you could basically generate a SMS or

469
00:17:38,550 --> 00:17:43,139
some kind of email or message to

470
00:17:41,460 --> 00:17:45,000
basically look at the guy or girl who's

471
00:17:43,140 --> 00:17:48,900
responsible for your Cuba needs instance

472
00:17:45,000 --> 00:17:50,700
and also we could connect the alert

473
00:17:48,900 --> 00:17:53,370
system to Cuban it's itself and the

474
00:17:50,700 --> 00:17:55,290
reason why this would be handy it's for

475
00:17:53,370 --> 00:17:57,000
example if you see incoming requests

476
00:17:55,290 --> 00:17:58,560
that are malicious from a specific IP

477
00:17:57,000 --> 00:18:02,430
well you could actually block the

478
00:17:58,560 --> 00:18:04,560
connection from that IP so now we move

479
00:18:02,430 --> 00:18:07,080
on to the Cuban security dashboard and

480
00:18:04,560 --> 00:18:08,340
we're gonna present this life so we're

481
00:18:07,080 --> 00:18:09,710
gonna pray to the Democrats that it

482
00:18:08,340 --> 00:18:12,990
still works

483
00:18:09,710 --> 00:18:19,050
hey first we have a video and then we

484
00:18:12,990 --> 00:18:20,850
okay it's readable from the back okay so

485
00:18:19,050 --> 00:18:32,129
this is not a zooming in maybe for the

486
00:18:20,850 --> 00:18:34,919
the guy yeah okay so does everyone see

487
00:18:32,130 --> 00:18:38,190
you I think the thing that's so hmm okay

488
00:18:34,920 --> 00:18:40,230
so this is the dashboard in Cabana so

489
00:18:38,190 --> 00:18:41,580
here we have an overview of all the

490
00:18:40,230 --> 00:18:44,820
requests that were made across the

491
00:18:41,580 --> 00:18:48,990
cluster with a username from where this

492
00:18:44,820 --> 00:18:53,070
request originated the URL and the user

493
00:18:48,990 --> 00:18:55,530
agent the method timestamp and here all

494
00:18:53,070 --> 00:18:58,470
the so we generated some alerts

495
00:18:55,530 --> 00:19:00,810
beforehand so you can see what they look

496
00:18:58,470 --> 00:19:04,590
like so here we have a nice little pie

497
00:19:00,810 --> 00:19:07,260
chart for the different alert types that

498
00:19:04,590 --> 00:19:10,560
have happened in your cluster so far so

499
00:19:07,260 --> 00:19:13,370
enumeration alerts is when you try to

500
00:19:10,560 --> 00:19:18,810
get information about pods or specific

501
00:19:13,370 --> 00:19:21,030
namespaces not what you spot then

502
00:19:18,810 --> 00:19:23,040
execution so command execution that

503
00:19:21,030 --> 00:19:24,810
happened your cluster tampering alerts

504
00:19:23,040 --> 00:19:27,980
are basically when you create it or also

505
00:19:24,810 --> 00:19:30,629
want someone created or deleted pods and

506
00:19:27,980 --> 00:19:37,140
secrets when someone tried to access

507
00:19:30,630 --> 00:19:38,820
your secrets phone user activity so you

508
00:19:37,140 --> 00:19:40,830
have different users of your cluster you

509
00:19:38,820 --> 00:19:44,010
can see which one have been more active

510
00:19:40,830 --> 00:19:45,699
than others all alerts here so the

511
00:19:44,010 --> 00:19:48,639
description the user

512
00:19:45,700 --> 00:19:49,990
name space pod here you can see

513
00:19:48,639 --> 00:19:52,689
information requests to someone try to

514
00:19:49,990 --> 00:19:56,350
retrieve information from this namespace

515
00:19:52,690 --> 00:20:01,289
or from this mod in this name space here

516
00:19:56,350 --> 00:20:06,580
we have some enumeration of all the pods

517
00:20:01,289 --> 00:20:09,010
command execution here now basically a

518
00:20:06,580 --> 00:20:11,408
lot of things here an overview of the

519
00:20:09,010 --> 00:20:14,169
comments that were executed inside the

520
00:20:11,409 --> 00:20:16,750
cluster so on this specific container at

521
00:20:14,169 --> 00:20:20,110
CD this is really bad if your if someone

522
00:20:16,750 --> 00:20:21,549
has command execution there the cube the

523
00:20:20,110 --> 00:20:24,549
different cubes ETL comments that were

524
00:20:21,549 --> 00:20:26,190
executed as well how many people try to

525
00:20:24,549 --> 00:20:28,629
get your secrets

526
00:20:26,190 --> 00:20:30,429
unauthorized so requests that were made

527
00:20:28,630 --> 00:20:32,080
that were unauthorized are also logged

528
00:20:30,429 --> 00:20:35,409
and this one that we already showed

529
00:20:32,080 --> 00:20:37,330
about spawning a privileged pod and

530
00:20:35,409 --> 00:20:39,490
we're still playing a bit with the

531
00:20:37,330 --> 00:20:41,350
proposals of the logging because I'm

532
00:20:39,490 --> 00:20:43,929
trying to see if I can also catch some

533
00:20:41,350 --> 00:20:45,309
some some arrays in the logs but we need

534
00:20:43,929 --> 00:20:47,440
to apply more logging to different

535
00:20:45,309 --> 00:20:49,450
components so it's a bit of pollution in

536
00:20:47,440 --> 00:20:52,269
the cube CTL commands usually only are

537
00:20:49,450 --> 00:20:53,850
going to to monitor actual users you

538
00:20:52,269 --> 00:20:56,350
will see some service accounts in there

539
00:20:53,850 --> 00:20:57,789
but we'll mainly try to monitor users

540
00:20:56,350 --> 00:21:00,699
that actually have those those those

541
00:20:57,789 --> 00:21:04,000
rights to run cube control commands so

542
00:21:00,700 --> 00:21:05,559
Cubana itself is pretty flexible with

543
00:21:04,000 --> 00:21:06,970
creating new alerts so if you're

544
00:21:05,559 --> 00:21:11,230
interested in other things you can even

545
00:21:06,970 --> 00:21:13,059
create your own visualization we have a

546
00:21:11,230 --> 00:21:15,519
specific dashboard as well for your

547
00:21:13,059 --> 00:21:17,350
crown jewels so if you have specific

548
00:21:15,519 --> 00:21:18,970
assets inside your cluster or specific

549
00:21:17,350 --> 00:21:20,980
pods or that you really want to keep

550
00:21:18,970 --> 00:21:23,529
track of then you can just create a

551
00:21:20,980 --> 00:21:26,049
dashboard for for this one and filter on

552
00:21:23,529 --> 00:21:29,549
for example here we created on HDD so we

553
00:21:26,049 --> 00:21:32,370
see all the activity that concerns at CD

554
00:21:29,549 --> 00:21:37,629
all the commands that were executed and

555
00:21:32,370 --> 00:21:40,000
everything so the video yeah no we don't

556
00:21:37,630 --> 00:21:42,220
have really good video editing skills so

557
00:21:40,000 --> 00:21:44,200
we will show you two sequential videos

558
00:21:42,220 --> 00:21:46,240
the first video you'll see somewhat

559
00:21:44,200 --> 00:21:48,490
initial running commands on the cluster

560
00:21:46,240 --> 00:21:50,919
and in the second video you'll see the

561
00:21:48,490 --> 00:21:53,019
correlation of events in the monitoring

562
00:21:50,919 --> 00:21:55,179
system so first thing it happens here is

563
00:21:53,019 --> 00:21:56,919
running get plots to see if we can

564
00:21:55,179 --> 00:21:58,860
actually get some pods we will run it

565
00:21:56,919 --> 00:22:00,299
again in all namespaces

566
00:21:58,860 --> 00:22:02,580
we're currently a low privileged user

567
00:22:00,299 --> 00:22:05,429
that is not allowed to this resource

568
00:22:02,580 --> 00:22:07,110
that the cluster scope the user will try

569
00:22:05,429 --> 00:22:09,390
to enumerate a bit more trying to get

570
00:22:07,110 --> 00:22:10,918
some namespaces and these are not right

571
00:22:09,390 --> 00:22:12,179
events they are also filled into the

572
00:22:10,919 --> 00:22:14,190
security dashboard because I think it's

573
00:22:12,179 --> 00:22:16,010
very interesting when someone is trying

574
00:22:14,190 --> 00:22:19,500
to do things they're not allowed to do

575
00:22:16,010 --> 00:22:21,690
you see some very great vim skills what

576
00:22:19,500 --> 00:22:23,250
you're doing over here is we're a second

577
00:22:21,690 --> 00:22:25,559
of security context privilege to true

578
00:22:23,250 --> 00:22:28,440
and we're adding a volume amount of the

579
00:22:25,559 --> 00:22:30,510
the root filesystem of the node into our

580
00:22:28,440 --> 00:22:34,500
container so then we're trying to apply

581
00:22:30,510 --> 00:22:36,870
it with Q control there you go creating

582
00:22:34,500 --> 00:22:39,990
the pod we will wait a couple minutes a

583
00:22:36,870 --> 00:22:41,879
couple seconds not minutes and then

584
00:22:39,990 --> 00:22:43,649
afterwards I will try to get a bash

585
00:22:41,880 --> 00:22:46,830
shell into the come into the container

586
00:22:43,649 --> 00:22:48,360
and what you'll see then is that we I am

587
00:22:46,830 --> 00:22:50,399
firstly check of course if it's created

588
00:22:48,360 --> 00:22:53,729
and this of course creates lots of

589
00:22:50,399 --> 00:22:56,039
events in the security dashboard and now

590
00:22:53,730 --> 00:22:57,659
we spawn a shell with a TTY in host

591
00:22:56,039 --> 00:23:01,158
escape which is conveniently called host

592
00:22:57,659 --> 00:23:04,169
escape and we'll see if you can actually

593
00:23:01,159 --> 00:23:06,960
cut shadow file or passivity because it

594
00:23:04,169 --> 00:23:08,519
looks like we mounted the node with the

595
00:23:06,960 --> 00:23:11,010
security policies you can restrict

596
00:23:08,519 --> 00:23:13,350
namespaces from creating privileged

597
00:23:11,010 --> 00:23:14,850
defaults which will create new security

598
00:23:13,350 --> 00:23:16,918
events which you can also add in the

599
00:23:14,850 --> 00:23:18,570
dashboard if you wish and as you can see

600
00:23:16,919 --> 00:23:23,850
here it was quite trivial for us to

601
00:23:18,570 --> 00:23:27,029
compromise a node oh that's awesome - we

602
00:23:23,850 --> 00:23:30,360
used to record the desktop now we'll

603
00:23:27,029 --> 00:23:33,690
look at the correlations yes we're back

604
00:23:30,360 --> 00:23:35,519
on the dashboard and we're basically

605
00:23:33,690 --> 00:23:39,539
waiting for the alerts to come in so

606
00:23:35,519 --> 00:23:41,789
there's the slight delay from the the

607
00:23:39,539 --> 00:23:43,830
case cop but there's also because Cabana

608
00:23:41,789 --> 00:23:46,110
refreshes every five seconds so there's

609
00:23:43,830 --> 00:23:48,990
also that delay decided to it so the

610
00:23:46,110 --> 00:23:53,340
first alert was a pod enumeration other

611
00:23:48,990 --> 00:23:56,220
it actually it's already there and then

612
00:23:53,340 --> 00:24:00,600
we can see that this command was

613
00:23:56,220 --> 00:24:02,549
executed and basically the user who

614
00:24:00,600 --> 00:24:03,990
executed this command didn't have the

615
00:24:02,549 --> 00:24:08,059
permission to do it so you have this

616
00:24:03,990 --> 00:24:08,059
unauthorized request alert

617
00:24:09,889 --> 00:24:15,310
now we're wait

618
00:24:11,480 --> 00:24:15,310
for another thing that was unauthorized

619
00:24:17,980 --> 00:24:25,600
never spotting the boat I think yeah

620
00:24:21,280 --> 00:24:30,190
next step was a new privilege spot that

621
00:24:25,600 --> 00:24:34,879
was created yes so it pops up here and

622
00:24:30,190 --> 00:24:43,760
it should get the to the alert to the

623
00:24:34,880 --> 00:24:45,410
alerts overview as well soon yes so it's

624
00:24:43,760 --> 00:24:50,780
there and you can see that we basically

625
00:24:45,410 --> 00:24:52,760
got created here and then the next step

626
00:24:50,780 --> 00:24:57,440
is command execution so here you see

627
00:24:52,760 --> 00:25:00,280
that bash was open and it's gonna pop up

628
00:24:57,440 --> 00:25:00,280
in the others as well

629
00:25:01,510 --> 00:25:14,540
keep an eye refreshes yeah and there you

630
00:25:09,620 --> 00:25:19,189
go and actually the tool also shows

631
00:25:14,540 --> 00:25:20,750
which command was executed so there are

632
00:25:19,190 --> 00:25:24,140
some exploits that only execute one

633
00:25:20,750 --> 00:25:26,120
specific command which can be useful to

634
00:25:24,140 --> 00:25:27,320
show in the list but some attackers

635
00:25:26,120 --> 00:25:29,989
prefer interactive shells and then

636
00:25:27,320 --> 00:25:33,050
there's not a lot you can see also one

637
00:25:29,990 --> 00:25:36,230
thing useful to mention is also good for

638
00:25:33,050 --> 00:25:38,870
detection is that some commands some

639
00:25:36,230 --> 00:25:40,550
regular cube in each user would never do

640
00:25:38,870 --> 00:25:45,320
like it would never run ID for example

641
00:25:40,550 --> 00:25:47,330
in in their shell or spawn a shell I

642
00:25:45,320 --> 00:25:50,060
don't know how that often that happens

643
00:25:47,330 --> 00:25:53,090
if their QB needs a bit QB nice user

644
00:25:50,060 --> 00:25:54,950
here they would know but basically you

645
00:25:53,090 --> 00:25:57,949
could also detect Freddy's comments so

646
00:25:54,950 --> 00:25:59,960
so who executed ID when when someone

647
00:25:57,950 --> 00:26:01,310
does this you know that basically

648
00:25:59,960 --> 00:26:02,270
there's a really high chance that you've

649
00:26:01,310 --> 00:26:03,710
been compromised

650
00:26:02,270 --> 00:26:06,050
yeah cuz the first thing you do when you

651
00:26:03,710 --> 00:26:06,950
get a reverse shell is type ID I mean

652
00:26:06,050 --> 00:26:09,080
you want to know what privileges you

653
00:26:06,950 --> 00:26:12,050
have and maybe cut passwd to see you on

654
00:26:09,080 --> 00:26:14,120
a system so and also we can apply some i

655
00:26:12,050 --> 00:26:17,419
think machine learning to it because not

656
00:26:14,120 --> 00:26:19,580
a lot of users will run commands in

657
00:26:17,420 --> 00:26:22,100
production so you can make basically

658
00:26:19,580 --> 00:26:24,260
yeah it's all about some statistics you

659
00:26:22,100 --> 00:26:25,250
can pretty easily figure out what is

660
00:26:24,260 --> 00:26:27,230
malicious or not so

661
00:26:25,250 --> 00:26:29,560
you can find anomalies like this you

662
00:26:27,230 --> 00:26:31,670
could even extend the system to

663
00:26:29,560 --> 00:26:33,440
basically have another system on top of

664
00:26:31,670 --> 00:26:35,960
it which performs anomaly detection on

665
00:26:33,440 --> 00:26:38,360
all the others you have so you basically

666
00:26:35,960 --> 00:26:42,080
will learn what is what do I see

667
00:26:38,360 --> 00:26:44,689
regularly and then basically you can do

668
00:26:42,080 --> 00:26:46,909
some clustering on the data and see what

669
00:26:44,690 --> 00:26:52,310
your outliers are this is for future

670
00:26:46,910 --> 00:26:54,200
work conclusion okay so as you can see

671
00:26:52,310 --> 00:26:57,620
Cuba needs is a very cool tool for

672
00:26:54,200 --> 00:26:59,390
hacking but since we're not evil and we

673
00:26:57,620 --> 00:27:00,830
want to protect the world then we

674
00:26:59,390 --> 00:27:03,620
developed this Cuba needs security

675
00:27:00,830 --> 00:27:06,199
dashboard to detect the hacks so we

676
00:27:03,620 --> 00:27:08,090
build it with fluent elasticsearch lead

677
00:27:06,200 --> 00:27:10,940
cop let's attach to elasticsearch and

678
00:27:08,090 --> 00:27:13,429
Cabana for visibility over your over

679
00:27:10,940 --> 00:27:15,740
basically audio cabinets clusters and

680
00:27:13,430 --> 00:27:17,720
over the cluster activity and since

681
00:27:15,740 --> 00:27:19,520
Cuban is version one point 13 they have

682
00:27:17,720 --> 00:27:22,220
some dynamic loading you can enable I

683
00:27:19,520 --> 00:27:23,480
haven't played around with that yet but

684
00:27:22,220 --> 00:27:26,030
once it will be more documentation

685
00:27:23,480 --> 00:27:27,650
available about how to do that we can do

686
00:27:26,030 --> 00:27:29,030
a different different audit logging as

687
00:27:27,650 --> 00:27:31,280
well with newer versions of Cuba needs

688
00:27:29,030 --> 00:27:33,139
and of course you wish to extend and

689
00:27:31,280 --> 00:27:35,270
they have more future work on the Cuba

690
00:27:33,140 --> 00:27:37,340
News Club find more ways to log

691
00:27:35,270 --> 00:27:39,290
currently I'm thinking of finding a way

692
00:27:37,340 --> 00:27:41,060
to let the couplet log also into fluent

693
00:27:39,290 --> 00:27:42,350
so we can enable debug logging and

694
00:27:41,060 --> 00:27:44,510
actually see a lot more that's going on

695
00:27:42,350 --> 00:27:44,990
there so yeah this is definitely a work

696
00:27:44,510 --> 00:27:47,180
in progress

697
00:27:44,990 --> 00:27:51,020
and we hope to to release more

698
00:27:47,180 --> 00:27:52,790
information soon yeah and yeah we will

699
00:27:51,020 --> 00:27:56,840
release the gate we'll to make sure that

700
00:27:52,790 --> 00:27:58,790
the no con conference team will tweet

701
00:27:56,840 --> 00:28:00,350
about the the the github repo once we

702
00:27:58,790 --> 00:28:01,820
have everything live tomorrow we're

703
00:28:00,350 --> 00:28:03,740
gonna spend the whole day in the hotel

704
00:28:01,820 --> 00:28:05,659
room to clean up our readme file make

705
00:28:03,740 --> 00:28:07,250
sure the documentation is correct and

706
00:28:05,660 --> 00:28:09,540
then we will release it as soon as

707
00:28:07,250 --> 00:28:12,690
possible and thank you thank you

708
00:28:09,540 --> 00:28:12,690
[Applause]

709
00:28:12,770 --> 00:28:29,100
are there any questions you need a

710
00:28:17,400 --> 00:28:31,350
microphone yeah yeah so this questions a

711
00:28:29,100 --> 00:28:34,139
bit matter but how are you deploying

712
00:28:31,350 --> 00:28:37,169
this Kate cop on its own is it a

713
00:28:34,140 --> 00:28:39,480
standalone binary or so actually we want

714
00:28:37,170 --> 00:28:40,770
to make a demon out of it

715
00:28:39,480 --> 00:28:42,180
yes we're planning to make a system

716
00:28:40,770 --> 00:28:44,490
deserves what is basically currently

717
00:28:42,180 --> 00:28:46,650
it's a Python application now you can

718
00:28:44,490 --> 00:28:47,700
you can run it once to perform aesthetic

719
00:28:46,650 --> 00:28:49,610
analysis so you have different

720
00:28:47,700 --> 00:28:57,750
parameters actually I'll show you the

721
00:28:49,610 --> 00:29:01,770
the entry oh yeah in there hmm are you

722
00:28:57,750 --> 00:29:14,240
gonna see all my files make the font a

723
00:29:01,770 --> 00:29:18,150
bit bigger yeah this should be fine yeah

724
00:29:14,240 --> 00:29:21,810
so this please if he says run it on

725
00:29:18,150 --> 00:29:25,500
static mode from this date to now and

726
00:29:21,810 --> 00:29:26,820
then if you say streaming they will run

727
00:29:25,500 --> 00:29:30,600
in streaming but we're gonna basically

728
00:29:26,820 --> 00:29:34,129
make sure that this can be run as a

729
00:29:30,600 --> 00:29:37,139
system and since CUNY's people like yomo

730
00:29:34,130 --> 00:29:38,640
yomo configuration files name but yeah

731
00:29:37,140 --> 00:29:40,670
and we also will write documentation on

732
00:29:38,640 --> 00:29:43,470
how to deploy the fluid configuration

733
00:29:40,670 --> 00:29:44,970
how what configuration items you have to

734
00:29:43,470 --> 00:29:46,500
add to the api service order the mounts

735
00:29:44,970 --> 00:29:48,090
are correct but we're planning on

736
00:29:46,500 --> 00:29:49,290
releasing is tomorrow and then we'll let

737
00:29:48,090 --> 00:29:51,689
you know what the github repository is

738
00:29:49,290 --> 00:29:53,190
and then you can see out any reason you

739
00:29:51,690 --> 00:29:55,200
didn't write it and go considering

740
00:29:53,190 --> 00:29:57,090
kubernetes is written it go to begin

741
00:29:55,200 --> 00:30:00,420
with and it's better off for multitrader

742
00:29:57,090 --> 00:30:02,250
applications things like that that's

743
00:30:00,420 --> 00:30:04,590
made for future work we both prefer

744
00:30:02,250 --> 00:30:06,930
running Python writing fightin so it was

745
00:30:04,590 --> 00:30:08,970
easier to start building this but but

746
00:30:06,930 --> 00:30:10,830
about a go port yeah might be useful for

747
00:30:08,970 --> 00:30:13,620
the future go and yomel then you're

748
00:30:10,830 --> 00:30:15,179
basically in the Kuban is here okay

749
00:30:13,620 --> 00:30:16,739
thank you yeah thanks any other

750
00:30:15,180 --> 00:30:18,680
questions

751
00:30:16,740 --> 00:30:21,230
[Music]

752
00:30:18,680 --> 00:30:24,420
nope always wanna know okay I guess

753
00:30:21,230 --> 00:30:27,650
we're done then thank you all thank you

754
00:30:24,420 --> 00:30:27,650
[Applause]

