1
00:00:02,550 --> 00:00:07,910
thank you my delight to be here and go

2
00:00:05,670 --> 00:00:10,320
and interact with so many smart people

3
00:00:07,910 --> 00:00:13,289
we're gonna go from a really

4
00:00:10,320 --> 00:00:15,330
philosophical important discussion to a

5
00:00:13,289 --> 00:00:17,400
very technical discussion so I hope you

6
00:00:15,330 --> 00:00:19,680
are ready for sort of a change in your

7
00:00:17,400 --> 00:00:22,580
thought process of mind today so my talk

8
00:00:19,680 --> 00:00:26,550
today consists really of two parts a

9
00:00:22,580 --> 00:00:28,169
useful part for practitioners and sort

10
00:00:26,550 --> 00:00:29,940
of a research partner sort of a deep

11
00:00:28,170 --> 00:00:31,050
dive that I hope that at least some of

12
00:00:29,940 --> 00:00:33,719
you will find interesting and compelling

13
00:00:31,050 --> 00:00:36,060
so the first part is to introduce the

14
00:00:33,719 --> 00:00:39,510
event query language as a tool to

15
00:00:36,060 --> 00:00:41,550
conveniently search for malicious

16
00:00:39,510 --> 00:00:44,699
behavior in event streams or logs and

17
00:00:41,550 --> 00:00:46,530
that was released just a few weeks ago

18
00:00:44,700 --> 00:00:47,930
an open source so I'm introducing it

19
00:00:46,530 --> 00:00:50,579
here for the first time at no con and

20
00:00:47,930 --> 00:00:54,019
second I want to talk about a machine

21
00:00:50,579 --> 00:00:56,790
learning model to help discover unknown

22
00:00:54,020 --> 00:00:58,079
malicious behavior in logs so you know

23
00:00:56,790 --> 00:01:00,839
something bad happened in here tell me

24
00:00:58,079 --> 00:01:02,340
what what was bad okay so for that

25
00:01:00,840 --> 00:01:04,680
second part please understand that I'm a

26
00:01:02,340 --> 00:01:06,030
researcher and and I can help myself and

27
00:01:04,680 --> 00:01:08,759
I'll be jumping into some detail about

28
00:01:06,030 --> 00:01:11,399
the machine learning model there so for

29
00:01:08,759 --> 00:01:12,569
some context today I've been studying

30
00:01:11,399 --> 00:01:15,630
the artificial intelligence machine

31
00:01:12,569 --> 00:01:17,219
learning since the late 90s and and now

32
00:01:15,630 --> 00:01:19,499
work with an excellent R&D team at in

33
00:01:17,219 --> 00:01:20,999
the game we're on the chief scientist

34
00:01:19,499 --> 00:01:24,600
and a small selection of things that you

35
00:01:20,999 --> 00:01:27,270
may have come across from endgame and my

36
00:01:24,600 --> 00:01:30,630
team include Artemis which is a way to

37
00:01:27,270 --> 00:01:32,189
interact with your enterprise network by

38
00:01:30,630 --> 00:01:34,999
instead of a query language by actually

39
00:01:32,189 --> 00:01:37,889
typing natural English so show me

40
00:01:34,999 --> 00:01:40,589
process injection on my network right I

41
00:01:37,889 --> 00:01:43,499
typed that or malware score which is a

42
00:01:40,590 --> 00:01:45,869
lightweight standalone machine learning

43
00:01:43,499 --> 00:01:47,609
model which actually we release an open

44
00:01:45,869 --> 00:01:50,009
source version called Ember and anybody

45
00:01:47,609 --> 00:01:51,839
today can go download ember and build

46
00:01:50,009 --> 00:01:56,399
their own next-gen Navy model that

47
00:01:51,840 --> 00:01:57,419
useful for research most of my talks at

48
00:01:56,399 --> 00:01:59,249
research companies I've actually been

49
00:01:57,419 --> 00:02:02,609
red team oriented so I spent a lot of my

50
00:01:59,249 --> 00:02:04,529
career figuring out how to use machine

51
00:02:02,609 --> 00:02:06,658
learning against itself so using machine

52
00:02:04,529 --> 00:02:08,220
learning to attack and evade a machine

53
00:02:06,659 --> 00:02:10,039
learning model and what I'll be talking

54
00:02:08,220 --> 00:02:12,780
about today of course

55
00:02:10,039 --> 00:02:15,359
just prior to no con we released

56
00:02:12,780 --> 00:02:16,350
EQL the event query language which is a

57
00:02:15,360 --> 00:02:18,930
useful way to

58
00:02:16,350 --> 00:02:23,390
both define analytics and and to hunt

59
00:02:18,930 --> 00:02:27,540
and also to do simple IFC search so I

60
00:02:23,390 --> 00:02:29,250
just want to make sure just from my

61
00:02:27,540 --> 00:02:31,049
information can you raise your hand if

62
00:02:29,250 --> 00:02:34,620
you're familiar with the miter attack

63
00:02:31,050 --> 00:02:35,880
framework okay awesome I'm glad to see

64
00:02:34,620 --> 00:02:38,220
that a lot of people are getting to that

65
00:02:35,880 --> 00:02:39,510
so hopefully many of you will become

66
00:02:38,220 --> 00:02:45,660
more and more familiar with this over

67
00:02:39,510 --> 00:02:48,540
time but in fact attack ATT ampersand CK

68
00:02:45,660 --> 00:02:51,200
is sort of a knowledge base of attacker

69
00:02:48,540 --> 00:02:54,780
techniques and behaviors that span

70
00:02:51,200 --> 00:02:56,220
Windows and Mac and Linux and and can be

71
00:02:54,780 --> 00:02:58,110
used to navigate throughout that

72
00:02:56,220 --> 00:02:59,880
knowledge base so the reason that attack

73
00:02:58,110 --> 00:03:03,270
is important and I'll be talking about

74
00:02:59,880 --> 00:03:06,810
it today for context is that it's become

75
00:03:03,270 --> 00:03:09,240
totally insufficient for for you to

76
00:03:06,810 --> 00:03:12,090
defend against an adversary using simple

77
00:03:09,240 --> 00:03:14,250
indicator to compromise instead if you

78
00:03:12,090 --> 00:03:16,500
if you focus on these sort of durable

79
00:03:14,250 --> 00:03:18,570
tactics and techniques than adversary

80
00:03:16,500 --> 00:03:20,640
uses you'll have much more success in

81
00:03:18,570 --> 00:03:22,859
finding an adversary who's living off

82
00:03:20,640 --> 00:03:24,809
the land or doing fireless attacks and

83
00:03:22,860 --> 00:03:27,630
things like that so for example consider

84
00:03:24,810 --> 00:03:29,400
the attack of the bottom that suppose

85
00:03:27,630 --> 00:03:32,280
you have a trusted third party like a

86
00:03:29,400 --> 00:03:36,900
law firm who has access to your network

87
00:03:32,280 --> 00:03:39,300
so he has a login he gets he gets access

88
00:03:36,900 --> 00:03:41,220
to a trusted account he downloads and

89
00:03:39,300 --> 00:03:43,740
execute power shell scripts that are

90
00:03:41,220 --> 00:03:47,250
running in memory only he maintains

91
00:03:43,740 --> 00:03:49,380
persistence through scheduling a task he

92
00:03:47,250 --> 00:03:52,680
escalates his privileges using UAC user

93
00:03:49,380 --> 00:03:54,390
access control bypass and he might move

94
00:03:52,680 --> 00:03:56,250
laterally using win RM which is a tool

95
00:03:54,390 --> 00:03:59,910
that that probably most of you use and

96
00:03:56,250 --> 00:04:02,010
and he communicates with his command

97
00:03:59,910 --> 00:04:03,750
control server using something like

98
00:04:02,010 --> 00:04:05,880
domain fronting over SSL so you don't

99
00:04:03,750 --> 00:04:07,350
really know what's going on so that that

100
00:04:05,880 --> 00:04:08,850
is that that is a logical chain of

101
00:04:07,350 --> 00:04:11,070
events that that you're not going to

102
00:04:08,850 --> 00:04:13,049
find with an IOC so you need to focus on

103
00:04:11,070 --> 00:04:15,350
behaviors an attack helps you to find

104
00:04:13,050 --> 00:04:18,120
what those techniques and behaviors are

105
00:04:15,350 --> 00:04:20,399
okay so I want to just as an example

106
00:04:18,120 --> 00:04:23,490
that I may reach for to later just dive

107
00:04:20,399 --> 00:04:25,799
in one cell of this might attack that

108
00:04:23,490 --> 00:04:29,720
framework and it's it's squiggly-doo so

109
00:04:25,800 --> 00:04:33,640
this is using ragged serve 32

110
00:04:29,720 --> 00:04:35,630
to execute arbitrary code without

111
00:04:33,640 --> 00:04:38,419
lunching it directly so it's a way to

112
00:04:35,630 --> 00:04:40,370
register and execute a comm script using

113
00:04:38,420 --> 00:04:42,110
this registry and actually the file

114
00:04:40,370 --> 00:04:44,630
never has to disk I connect it's

115
00:04:42,110 --> 00:04:47,900
actually if your reg serve is is a

116
00:04:44,630 --> 00:04:49,430
domain and HTTP stack aware so you can

117
00:04:47,900 --> 00:04:51,049
actually point it to the web you will

118
00:04:49,430 --> 00:04:52,850
download and execute and it looks like

119
00:04:51,050 --> 00:04:54,800
there's a legitimate Windows application

120
00:04:52,850 --> 00:04:55,820
that's running so this is important an

121
00:04:54,800 --> 00:04:58,040
important technique for attackers

122
00:04:55,820 --> 00:05:00,110
because if I have sort of a whitelist

123
00:04:58,040 --> 00:05:04,130
policy for running guess who's running

124
00:05:00,110 --> 00:05:06,410
my script it's a legitimate windows saw

125
00:05:04,130 --> 00:05:08,930
a binary that that's signed and trusted

126
00:05:06,410 --> 00:05:11,540
and it never touched disk so this is a

127
00:05:08,930 --> 00:05:13,520
one example of those and used by many

128
00:05:11,540 --> 00:05:14,540
many threat groups including apt 22 and

129
00:05:13,520 --> 00:05:19,490
30 sorry

130
00:05:14,540 --> 00:05:21,470
19 and 32 and I'll be talking a little

131
00:05:19,490 --> 00:05:25,760
bit more use this as a use case in just

132
00:05:21,470 --> 00:05:28,460
a moment so okay so two parts to my talk

133
00:05:25,760 --> 00:05:30,469
number one how do we find if I know a

134
00:05:28,460 --> 00:05:33,830
pattern what's an efficient way for me

135
00:05:30,470 --> 00:05:36,200
to find this and I'm gonna I'm gonna try

136
00:05:33,830 --> 00:05:37,460
to sell you on using an open-source cool

137
00:05:36,200 --> 00:05:38,690
tool that we've just released called

138
00:05:37,460 --> 00:05:41,359
event query language and I'll show you

139
00:05:38,690 --> 00:05:42,890
how to use that with some examples and I

140
00:05:41,360 --> 00:05:45,110
hope you'll find it's actually pretty

141
00:05:42,890 --> 00:05:47,599
easy and intuitive to use and it's

142
00:05:45,110 --> 00:05:49,669
complemented complimentary in some sense

143
00:05:47,600 --> 00:05:52,669
to other tools like Stix there'll be a

144
00:05:49,669 --> 00:05:55,280
talk after this or Sigma that some of

145
00:05:52,669 --> 00:05:56,930
you have used so the second part my talk

146
00:05:55,280 --> 00:05:59,690
then then let's let's suppose I don't

147
00:05:56,930 --> 00:06:02,660
know what exactly to search for how can

148
00:05:59,690 --> 00:06:04,700
I try to learn like what are the things

149
00:06:02,660 --> 00:06:07,210
I said shirts for right foot from data

150
00:06:04,700 --> 00:06:10,520
so that will be using machine learning

151
00:06:07,210 --> 00:06:12,620
okay so you vary quite language let me

152
00:06:10,520 --> 00:06:13,010
just introduce this in the following

153
00:06:12,620 --> 00:06:17,180
manner

154
00:06:13,010 --> 00:06:18,710
um event crate language is not even

155
00:06:17,180 --> 00:06:21,650
curling which is a way for you to take a

156
00:06:18,710 --> 00:06:24,500
pile of data events of your choosing

157
00:06:21,650 --> 00:06:27,469
perhaps it's windows event logs maybe

158
00:06:24,500 --> 00:06:29,750
it's sis Mon from sysinternals or you

159
00:06:27,470 --> 00:06:32,750
know for us it's our end game event logs

160
00:06:29,750 --> 00:06:37,669
and you independent of the data schema

161
00:06:32,750 --> 00:06:39,950
you can define in a in a way that equal

162
00:06:37,669 --> 00:06:42,140
is aware of process context and process

163
00:06:39,950 --> 00:06:43,340
trees and by taking a single pass

164
00:06:42,140 --> 00:06:45,229
through the data

165
00:06:43,340 --> 00:06:47,030
you can make very efficient queries so

166
00:06:45,230 --> 00:06:49,910
because it's a single single pass the

167
00:06:47,030 --> 00:06:52,760
data it's useful for two things it's

168
00:06:49,910 --> 00:06:54,949
useful for logs and it's also useful for

169
00:06:52,760 --> 00:06:56,690
event streams so as they're happening on

170
00:06:54,949 --> 00:06:58,490
the system and in fact that's how in

171
00:06:56,690 --> 00:07:01,280
gain uses this is as the events are

172
00:06:58,490 --> 00:07:03,050
flying by you you build up this equal

173
00:07:01,280 --> 00:07:06,320
allows you to build this state model

174
00:07:03,050 --> 00:07:08,000
that kind of understands and interprets

175
00:07:06,320 --> 00:07:10,040
that the state of things as you asked

176
00:07:08,000 --> 00:07:12,220
for them and it will trigger when when

177
00:07:10,040 --> 00:07:17,210
that when that analytic you've defined

178
00:07:12,220 --> 00:07:20,180
is satisfied so the the the language is

179
00:07:17,210 --> 00:07:23,570
actually really simple it looks a little

180
00:07:20,180 --> 00:07:24,889
bit like SQL but it's for events

181
00:07:23,570 --> 00:07:28,130
languages so that's why it's called even

182
00:07:24,889 --> 00:07:30,560
query language so the second part of

183
00:07:28,130 --> 00:07:33,320
this you can go today to github.com in

184
00:07:30,560 --> 00:07:35,389
gaming equal and you know I can't today

185
00:07:33,320 --> 00:07:38,539
teach you how to use equal but I can get

186
00:07:35,389 --> 00:07:39,590
you started and go go to this github but

187
00:07:38,539 --> 00:07:41,750
check it out

188
00:07:39,590 --> 00:07:42,710
and your L can even follow along if

189
00:07:41,750 --> 00:07:45,199
you'd like there's some examples in

190
00:07:42,710 --> 00:07:48,010
there the second part is equal in an

191
00:07:45,199 --> 00:07:52,669
equal lib is a library of common

192
00:07:48,010 --> 00:07:55,159
techniques so defenses for analytics for

193
00:07:52,669 --> 00:07:57,260
common attacker techniques so if you're

194
00:07:55,160 --> 00:07:58,700
interested in looking in your own event

195
00:07:57,260 --> 00:08:00,260
logs for a certain attacker behaviors

196
00:07:58,700 --> 00:08:03,080
you can actually go today to equal live

197
00:08:00,260 --> 00:08:05,979
and use that as a basis so essentially

198
00:08:03,080 --> 00:08:09,440
if you're familiar with red Canaries

199
00:08:05,979 --> 00:08:11,810
atomic read attack scripts that simulate

200
00:08:09,440 --> 00:08:14,780
attacker behavior equal Lib kind of is

201
00:08:11,810 --> 00:08:17,780
mapping a one-to-one from-from atomic

202
00:08:14,780 --> 00:08:19,520
read to analytic against that so today

203
00:08:17,780 --> 00:08:22,250
that it I'm going to be using comes from

204
00:08:19,520 --> 00:08:23,659
from endgame but you can of course use

205
00:08:22,250 --> 00:08:26,330
it for for system on or Windows security

206
00:08:23,660 --> 00:08:28,400
vents or what have you okay so really

207
00:08:26,330 --> 00:08:34,010
quick let me just dive in and what is

208
00:08:28,400 --> 00:08:37,400
the data look like um so the data the

209
00:08:34,010 --> 00:08:39,620
data comes is in its native form it

210
00:08:37,400 --> 00:08:40,429
looks like JSON and it has you know

211
00:08:39,620 --> 00:08:42,500
there's really on a couple things that

212
00:08:40,429 --> 00:08:44,390
are port has an event type so this is a

213
00:08:42,500 --> 00:08:47,720
process type and it's a crate process

214
00:08:44,390 --> 00:08:49,490
event and it's being this this crate

215
00:08:47,720 --> 00:08:51,890
process event happens because of this

216
00:08:49,490 --> 00:08:53,660
command line register of 32 which is

217
00:08:51,890 --> 00:08:55,410
pointing to the internet to download to

218
00:08:53,660 --> 00:09:01,589
the script that will be launched right

219
00:08:55,410 --> 00:09:03,420
so notice that each event type has sorry

220
00:09:01,590 --> 00:09:05,160
each event has an event type in a

221
00:09:03,420 --> 00:09:06,689
subtitle ong with important data

222
00:09:05,160 --> 00:09:08,370
relating to the event for example the

223
00:09:06,690 --> 00:09:11,400
pid' and the process that parent pid'

224
00:09:08,370 --> 00:09:13,920
the process path the user domain and of

225
00:09:11,400 --> 00:09:15,870
course you could have hundreds of events

226
00:09:13,920 --> 00:09:18,360
coming per second per user per endpoint

227
00:09:15,870 --> 00:09:20,490
and so querying these events efficiently

228
00:09:18,360 --> 00:09:21,870
and intuitively is really important so

229
00:09:20,490 --> 00:09:25,170
let me I mean actually stop the

230
00:09:21,870 --> 00:09:26,580
presentation and jump to to some data so

231
00:09:25,170 --> 00:09:32,729
you can sort of appreciate what that

232
00:09:26,580 --> 00:09:36,210
might look like and so here's a here's

233
00:09:32,730 --> 00:09:39,590
JSON file it's full of all of the events

234
00:09:36,210 --> 00:09:42,750
that happen on my system when I launched

235
00:09:39,590 --> 00:09:45,540
atomic read so it includes for example

236
00:09:42,750 --> 00:09:47,310
here's commands exe that is copying the

237
00:09:45,540 --> 00:09:49,230
atomic read files to the discs I'm

238
00:09:47,310 --> 00:09:52,079
capturing even a set up so think of that

239
00:09:49,230 --> 00:09:54,870
as the dropper for my technique and and

240
00:09:52,080 --> 00:09:58,650
then um you know it also includes my reg

241
00:09:54,870 --> 00:09:59,850
serve this is server 32 and all of the

242
00:09:58,650 --> 00:10:03,540
events that happen because of that

243
00:09:59,850 --> 00:10:06,030
loading all these dll's and executing

244
00:10:03,540 --> 00:10:10,110
the script and finally you know reaching

245
00:10:06,030 --> 00:10:15,630
up the network right so what I could do

246
00:10:10,110 --> 00:10:19,140
to to query this is in equal I will say

247
00:10:15,630 --> 00:10:22,980
let me query this file that contains all

248
00:10:19,140 --> 00:10:25,800
my events process where command line

249
00:10:22,980 --> 00:10:28,590
equals and I'm looking for the use of

250
00:10:25,800 --> 00:10:31,859
reg server 32 where it does anything

251
00:10:28,590 --> 00:10:33,660
that calls out to HTTP and so when I do

252
00:10:31,860 --> 00:10:35,040
that I'll then pipe it to JQ just to

253
00:10:33,660 --> 00:10:38,069
make the colors pretty for you all and

254
00:10:35,040 --> 00:10:39,839
it finds the event that you know in my

255
00:10:38,070 --> 00:10:42,210
maybe massive event log that that

256
00:10:39,840 --> 00:10:44,880
correspond to that so if I were

257
00:10:42,210 --> 00:10:47,700
interested in you know a simpler query I

258
00:10:44,880 --> 00:10:51,270
could I could say for example let me

259
00:10:47,700 --> 00:10:53,310
find all the processes where anything

260
00:10:51,270 --> 00:10:55,170
happened and let me just count count the

261
00:10:53,310 --> 00:10:57,000
unique process names so in this

262
00:10:55,170 --> 00:10:59,040
particular file there are only two

263
00:10:57,000 --> 00:11:01,650
processes that were ever executed reg

264
00:10:59,040 --> 00:11:04,829
server 32 and command exe each

265
00:11:01,650 --> 00:11:07,260
compromising 50% of all processes and so

266
00:11:04,830 --> 00:11:09,150
I hope that that gives you just a hint

267
00:11:07,260 --> 00:11:12,210
of how sort of easy

268
00:11:09,150 --> 00:11:15,209
equal is to pour through a data set or

269
00:11:12,210 --> 00:11:16,860
an event stream so I mean I spend the

270
00:11:15,210 --> 00:11:19,410
next few slides going through some

271
00:11:16,860 --> 00:11:21,360
examples and the again the use cases

272
00:11:19,410 --> 00:11:23,490
that my colleagues when they release

273
00:11:21,360 --> 00:11:26,730
this they wanted to cover not just ioc

274
00:11:23,490 --> 00:11:28,890
search but also hunting so looking for

275
00:11:26,730 --> 00:11:31,020
suspicious behavior on your system and

276
00:11:28,890 --> 00:11:33,000
also straight up analytics so can I use

277
00:11:31,020 --> 00:11:36,180
something to actually prevent malicious

278
00:11:33,000 --> 00:11:37,770
behavior so first example um you know I

279
00:11:36,180 --> 00:11:39,510
you see hunting IOC search is not

280
00:11:37,770 --> 00:11:41,610
hunting but it's an important part of

281
00:11:39,510 --> 00:11:43,410
your sort of daily hygiene so to do that

282
00:11:41,610 --> 00:11:45,960
you can say something as simple as this

283
00:11:43,410 --> 00:11:46,439
process where a process name equals evil

284
00:11:45,960 --> 00:11:49,320
vexi

285
00:11:46,440 --> 00:11:52,050
so an equal query has these parts

286
00:11:49,320 --> 00:11:53,280
there's this subject this that that

287
00:11:52,050 --> 00:11:55,260
specifies the event type you're

288
00:11:53,280 --> 00:11:57,420
interested in and this predicate this

289
00:11:55,260 --> 00:12:02,100
condition that specifies some boolean

290
00:11:57,420 --> 00:12:04,050
logic that would satisfy the query so I

291
00:12:02,100 --> 00:12:07,080
showed it a demo already of that in

292
00:12:04,050 --> 00:12:09,689
action let's move from IOC search to

293
00:12:07,080 --> 00:12:12,390
something more interesting so did any

294
00:12:09,690 --> 00:12:15,960
descendant of Microsoft Word create or

295
00:12:12,390 --> 00:12:17,100
modify an executable file so I do that

296
00:12:15,960 --> 00:12:21,960
in the following way let me I'm looking

297
00:12:17,100 --> 00:12:24,870
for any file where the file path was in

298
00:12:21,960 --> 00:12:29,010
windows system32 anything and the file

299
00:12:24,870 --> 00:12:31,230
name was XE and it was a synod of a

300
00:12:29,010 --> 00:12:33,740
process whose process name was windward

301
00:12:31,230 --> 00:12:36,090
so that's a really intuitive way to say

302
00:12:33,740 --> 00:12:37,710
show me something executed in that

303
00:12:36,090 --> 00:12:40,110
direction at that directory with that

304
00:12:37,710 --> 00:12:42,210
that extension who's a descendant of

305
00:12:40,110 --> 00:12:44,250
windward so you can make very

306
00:12:42,210 --> 00:12:47,220
sophisticated boolean logic to find

307
00:12:44,250 --> 00:12:48,690
queries in this way ok so here's another

308
00:12:47,220 --> 00:12:50,670
one so here's another hunt you know this

309
00:12:48,690 --> 00:12:51,990
is not analytic but let me show me users

310
00:12:50,670 --> 00:12:53,160
mucking with a system like right now

311
00:12:51,990 --> 00:12:56,820
during the first few minutes of my talk

312
00:12:53,160 --> 00:12:59,640
give me any event so this any event type

313
00:12:56,820 --> 00:13:02,670
will is sort of a wild-card event where

314
00:12:59,640 --> 00:13:04,770
the username is not system so any non

315
00:13:02,670 --> 00:13:06,839
root user and it happened during the

316
00:13:04,770 --> 00:13:09,949
between these timestamps and let me pipe

317
00:13:06,840 --> 00:13:12,930
it so this pipe exists within equal

318
00:13:09,950 --> 00:13:15,000
count to the username right so so many

319
00:13:12,930 --> 00:13:17,280
all the unique user names another

320
00:13:15,000 --> 00:13:19,350
example that becomes interesting many

321
00:13:17,280 --> 00:13:20,730
behaviors and especially the ones I'm

322
00:13:19,350 --> 00:13:21,840
interested in in the remainder of my

323
00:13:20,730 --> 00:13:24,090
talk

324
00:13:21,840 --> 00:13:26,070
single events but there are a chain of

325
00:13:24,090 --> 00:13:29,550
events that comprise an interesting

326
00:13:26,070 --> 00:13:30,690
behavior so in and you know some core

327
00:13:29,550 --> 00:13:32,550
languages that require some

328
00:13:30,690 --> 00:13:35,160
sophisticated inter joints outer joints

329
00:13:32,550 --> 00:13:36,510
and raise your hand be honest if you

330
00:13:35,160 --> 00:13:37,740
have to Google inner and outer joint

331
00:13:36,510 --> 00:13:40,830
every time you do it in sequel right

332
00:13:37,740 --> 00:13:43,590
right so instead in we want to make this

333
00:13:40,830 --> 00:13:47,460
really easy and equal all you do is say

334
00:13:43,590 --> 00:13:48,720
join by username so all these things can

335
00:13:47,460 --> 00:13:50,970
happen in any order but they're gonna

336
00:13:48,720 --> 00:13:53,640
share username in common so in this case

337
00:13:50,970 --> 00:13:56,070
the username executed the process Who am

338
00:13:53,640 --> 00:13:58,439
I host named Tesla scipy config and adds

339
00:13:56,070 --> 00:14:00,660
net in any order and let me show you all

340
00:13:58,440 --> 00:14:03,000
the unique user names so that way them

341
00:14:00,660 --> 00:14:04,880
so that would give people who are you

342
00:14:03,000 --> 00:14:08,520
know looking around on your system right

343
00:14:04,880 --> 00:14:09,960
alright so last couple of examples for

344
00:14:08,520 --> 00:14:14,010
equal before we get to the remainder of

345
00:14:09,960 --> 00:14:18,810
the talk but in many cases order is

346
00:14:14,010 --> 00:14:21,330
important so to define an ordered

347
00:14:18,810 --> 00:14:25,589
sequence an ordered series of events

348
00:14:21,330 --> 00:14:27,980
equal provides the sequence construct so

349
00:14:25,590 --> 00:14:31,830
it's like the join construct except

350
00:14:27,980 --> 00:14:35,010
every item in the sequence is described

351
00:14:31,830 --> 00:14:38,850
with an event query between the square

352
00:14:35,010 --> 00:14:41,370
brackets but sequence the order matters

353
00:14:38,850 --> 00:14:44,280
here so sequences can option be

354
00:14:41,370 --> 00:14:46,380
constrained to a timespan with this max

355
00:14:44,280 --> 00:14:48,750
span equals one hour so that would you

356
00:14:46,380 --> 00:14:51,510
can imagine like a sliding window going

357
00:14:48,750 --> 00:14:54,660
through your event log or or as it's

358
00:14:51,510 --> 00:14:57,090
coming from your event stream or match

359
00:14:54,660 --> 00:15:00,780
common values with this this by keyword

360
00:14:57,090 --> 00:15:03,570
so in this case we're looking for a file

361
00:15:00,780 --> 00:15:05,970
name and I'm gonna match its file path

362
00:15:03,570 --> 00:15:08,400
by the process path and the subsequent

363
00:15:05,970 --> 00:15:10,710
two events so these things all share one

364
00:15:08,400 --> 00:15:12,630
attribute its file path with these two

365
00:15:10,710 --> 00:15:15,390
process paths and it has to happen in

366
00:15:12,630 --> 00:15:17,430
one hour and so this would find a file

367
00:15:15,390 --> 00:15:19,560
that's created by an on system user that

368
00:15:17,430 --> 00:15:22,199
first ran is an on system process and

369
00:15:19,560 --> 00:15:25,229
later ran as a system level process all

370
00:15:22,200 --> 00:15:27,720
within an hour okay one last example

371
00:15:25,230 --> 00:15:30,180
about equal and and white order matters

372
00:15:27,720 --> 00:15:32,630
so let me switch datasets from sort of

373
00:15:30,180 --> 00:15:35,250
an event log to let's say have detonated

374
00:15:32,630 --> 00:15:38,240
malware in and

375
00:15:35,250 --> 00:15:40,860
I'm looking at the API sequence calls so

376
00:15:38,240 --> 00:15:43,380
if you're writing code for process

377
00:15:40,860 --> 00:15:46,110
injection this is a sequence of things

378
00:15:43,380 --> 00:15:48,990
you must do for this type of remote

379
00:15:46,110 --> 00:15:54,240
shell injection first you open a process

380
00:15:48,990 --> 00:15:55,770
handle you you you allocate then you

381
00:15:54,240 --> 00:15:58,410
write process memory create about thread

382
00:15:55,770 --> 00:16:00,569
and you close so these things happen in

383
00:15:58,410 --> 00:16:02,459
a sequence and the thing that they share

384
00:16:00,570 --> 00:16:04,350
in common is H victim the handle that's

385
00:16:02,460 --> 00:16:06,110
first returned from open process then

386
00:16:04,350 --> 00:16:09,300
passed as a parameter into the remaining

387
00:16:06,110 --> 00:16:13,230
so I can search for this kind of

388
00:16:09,300 --> 00:16:15,270
behavior in an API sequence by doing

389
00:16:13,230 --> 00:16:17,430
exactly what what seems logical I say

390
00:16:15,270 --> 00:16:19,949
find me a sequence that happens in this

391
00:16:17,430 --> 00:16:22,709
order first there's open process where

392
00:16:19,950 --> 00:16:24,810
the thing I'm interested in is the

393
00:16:22,710 --> 00:16:27,330
return value then there's a virtual

394
00:16:24,810 --> 00:16:30,119
outlook X where the thing I'm interested

395
00:16:27,330 --> 00:16:31,950
in is the arguments each process etc and

396
00:16:30,120 --> 00:16:37,170
this would find sort of that that

397
00:16:31,950 --> 00:16:39,960
remotion injection okay that is the

398
00:16:37,170 --> 00:16:41,520
tutorial of equal and it's useful is

399
00:16:39,960 --> 00:16:46,800
there already a question I'm happy to

400
00:16:41,520 --> 00:16:48,920
take it yeah go ahead you say one more

401
00:16:46,800 --> 00:16:48,920
time

402
00:16:53,540 --> 00:16:58,199
you say one more time with a mic I can

403
00:16:55,769 --> 00:16:59,639
hear you uh so my question would be like

404
00:16:58,199 --> 00:17:01,430
it was spawning a shell on a Windows

405
00:16:59,639 --> 00:17:04,079
machine using a metal Peter shell and we

406
00:17:01,430 --> 00:17:07,139
have injected that in a process may be

407
00:17:04,079 --> 00:17:08,639
considered svchost.exe but that's a

408
00:17:07,140 --> 00:17:11,339
service which would be running from the

409
00:17:08,640 --> 00:17:13,770
time the system has started so like

410
00:17:11,339 --> 00:17:15,688
going on all the sequel queries nerve we

411
00:17:13,770 --> 00:17:17,189
are identifying if a new process has

412
00:17:15,689 --> 00:17:19,530
been is pond beer

413
00:17:17,189 --> 00:17:21,299
oh yeah so we see the question um in our

414
00:17:19,530 --> 00:17:24,720
event data we have the notion of a

415
00:17:21,299 --> 00:17:28,799
unique ped so we can find all the things

416
00:17:24,720 --> 00:17:30,360
and and Diaby escape them by d dupe them

417
00:17:28,799 --> 00:17:32,750
because they have a unique appeared sort

418
00:17:30,360 --> 00:17:35,729
of counter ok so that's your question I

419
00:17:32,750 --> 00:17:39,419
mean sort of but my question was like

420
00:17:35,730 --> 00:17:41,190
like SVC like a process like SVC host

421
00:17:39,419 --> 00:17:43,530
it would be running from the start and

422
00:17:41,190 --> 00:17:45,960
we have injected of our payload into

423
00:17:43,530 --> 00:17:47,970
already running process so though I see

424
00:17:45,960 --> 00:17:53,850
so before you started looking at events

425
00:17:47,970 --> 00:17:57,120
yes yeah so maybe talk more often about

426
00:17:53,850 --> 00:17:59,158
that so we that this will depend on your

427
00:17:57,120 --> 00:18:01,379
data collection scheme in the game does

428
00:17:59,159 --> 00:18:02,280
this one way I'm not here to sell you in

429
00:18:01,380 --> 00:18:04,200
the game although you said I'll buy it

430
00:18:02,280 --> 00:18:06,030
I'm not here to sell you in game we do

431
00:18:04,200 --> 00:18:07,530
that one way but you that would be up to

432
00:18:06,030 --> 00:18:10,139
you in your data collection process for

433
00:18:07,530 --> 00:18:12,389
your events but if your event log has

434
00:18:10,140 --> 00:18:15,270
some notion of already running processes

435
00:18:12,390 --> 00:18:17,610
and you can detect injection events then

436
00:18:15,270 --> 00:18:20,879
you can hunt for it then this way yeah

437
00:18:17,610 --> 00:18:23,070
good question thank you okay

438
00:18:20,880 --> 00:18:26,220
so all of what I've talked about so far

439
00:18:23,070 --> 00:18:28,860
is you kind of know what to search for

440
00:18:26,220 --> 00:18:31,830
right but there's a lot of things we

441
00:18:28,860 --> 00:18:33,719
don't know a priori the specific

442
00:18:31,830 --> 00:18:35,460
sequence of events that would constitute

443
00:18:33,720 --> 00:18:38,909
malicious behavior so the next part of

444
00:18:35,460 --> 00:18:40,470
my talk I want to talk about what's one

445
00:18:38,909 --> 00:18:42,570
way that you can kind of discover those

446
00:18:40,470 --> 00:18:44,520
events and this is gonna be a machine

447
00:18:42,570 --> 00:18:47,370
learning so my background is machine

448
00:18:44,520 --> 00:18:50,100
learning first and security second so my

449
00:18:47,370 --> 00:18:51,658
apologies and I'll be talking about a

450
00:18:50,100 --> 00:18:53,820
way to use machine learning that I hope

451
00:18:51,659 --> 00:18:55,049
will motivate you to in a way to

452
00:18:53,820 --> 00:18:58,879
discover these sort of semi

453
00:18:55,049 --> 00:19:02,330
automatically but first I would like to

454
00:18:58,880 --> 00:19:04,860
step up on a soapbox for just one moment

455
00:19:02,330 --> 00:19:05,750
you'll notice that in no point during my

456
00:19:04,860 --> 00:19:08,149
talk

457
00:19:05,750 --> 00:19:09,610
have have I or will I claim that what

458
00:19:08,150 --> 00:19:13,280
I'm doing is artificial intelligence

459
00:19:09,610 --> 00:19:15,770
okay so there's a reason for this it's

460
00:19:13,280 --> 00:19:17,690
not technically wrong to call what most

461
00:19:15,770 --> 00:19:20,060
things in security are it's not

462
00:19:17,690 --> 00:19:22,250
technically wrong to call it AI but if I

463
00:19:20,060 --> 00:19:27,350
had my wish today is that we would all

464
00:19:22,250 --> 00:19:30,440
ban the phrase AI and m/l forever and

465
00:19:27,350 --> 00:19:32,379
security and let me tell you what I mean

466
00:19:30,440 --> 00:19:35,120
from a practitioners perspective so

467
00:19:32,380 --> 00:19:37,160
words you know I might be Luke fighting

468
00:19:35,120 --> 00:19:39,139
a losing battle here but words words are

469
00:19:37,160 --> 00:19:43,060
ultimately defined by their common usage

470
00:19:39,140 --> 00:19:46,400
so I may lose but let me tell you what

471
00:19:43,060 --> 00:19:48,860
you know this is my first textbook in

472
00:19:46,400 --> 00:19:51,710
artificial intelligence that I got 20

473
00:19:48,860 --> 00:19:54,830
years ago and I want to give you my take

474
00:19:51,710 --> 00:19:56,960
in my context about AI and m/l just for

475
00:19:54,830 --> 00:19:59,810
a moment before we set up what we'll

476
00:19:56,960 --> 00:20:02,150
call a mission leaner model so you can

477
00:19:59,810 --> 00:20:05,379
tell that this book is a modern approach

478
00:20:02,150 --> 00:20:07,700
as its subtitle says because of the cool

479
00:20:05,380 --> 00:20:09,350
66 megahertz Pentium box with eight

480
00:20:07,700 --> 00:20:13,010
megabytes of RAM shown on the cover here

481
00:20:09,350 --> 00:20:14,419
but um so seriously there's there's a

482
00:20:13,010 --> 00:20:19,460
mismatch in our industry between

483
00:20:14,420 --> 00:20:20,780
perception and the practice of AI and we

484
00:20:19,460 --> 00:20:22,490
all need to do a better job in our

485
00:20:20,780 --> 00:20:25,129
community about a battling sort of the

486
00:20:22,490 --> 00:20:28,130
marketing buzzwords and we I think

487
00:20:25,130 --> 00:20:29,960
people mean no mal-intent at AI is is

488
00:20:28,130 --> 00:20:32,720
sort of a common word that people latch

489
00:20:29,960 --> 00:20:35,090
on to the problem is they're latching on

490
00:20:32,720 --> 00:20:36,050
mostly to the wrong notion so that's the

491
00:20:35,090 --> 00:20:39,020
thing we need to be a little bit more

492
00:20:36,050 --> 00:20:40,550
precise about so probably what they're

493
00:20:39,020 --> 00:20:43,370
latching onto is more of you know

494
00:20:40,550 --> 00:20:45,680
popular culture Jarvis when in reality

495
00:20:43,370 --> 00:20:48,889
the machine learning deployed in your

496
00:20:45,680 --> 00:20:52,340
security product while effective is very

497
00:20:48,890 --> 00:20:55,850
narrowly focused it's not adaptive and

498
00:20:52,340 --> 00:20:57,500
it's not really intelligent at all so

499
00:20:55,850 --> 00:20:59,179
when it comes down to it you can get

500
00:20:57,500 --> 00:21:02,260
beneath some of this marketing hype and

501
00:20:59,180 --> 00:21:04,850
get some clarity about what AI means in

502
00:21:02,260 --> 00:21:08,930
InfoSec by remembering just a few simple

503
00:21:04,850 --> 00:21:10,790
things and those are that in reality the

504
00:21:08,930 --> 00:21:14,570
kind of AI that's making headlines today

505
00:21:10,790 --> 00:21:17,270
is called narrow AI and narrow AI is

506
00:21:14,570 --> 00:21:20,429
very very different from Jarvis so

507
00:21:17,270 --> 00:21:24,160
narrow AI is of course what

508
00:21:20,430 --> 00:21:27,880
let's say good at playing the game of go

509
00:21:24,160 --> 00:21:30,730
or good at detecting your face right and

510
00:21:27,880 --> 00:21:32,890
too often consumers confuse this concept

511
00:21:30,730 --> 00:21:34,390
of ginni laya within which computer is

512
00:21:32,890 --> 00:21:38,980
able to reason and behave intelligently

513
00:21:34,390 --> 00:21:40,720
across many tasks with with narrow AI so

514
00:21:38,980 --> 00:21:42,490
furthermore progress in narrow AI does

515
00:21:40,720 --> 00:21:44,740
not mean there's any progress in July so

516
00:21:42,490 --> 00:21:48,850
young McCune and the chief scientist at

517
00:21:44,740 --> 00:21:51,700
Facebook has said that our advancement

518
00:21:48,850 --> 00:21:53,500
and general AI is about so you know

519
00:21:51,700 --> 00:21:59,560
something far less than that of a rat

520
00:21:53,500 --> 00:22:01,240
right so even within narrow AI 90% of

521
00:21:59,560 --> 00:22:03,070
what security products do today is

522
00:22:01,240 --> 00:22:04,930
actually machine learning and I'd I

523
00:22:03,070 --> 00:22:08,740
guess my plea to you is that we should

524
00:22:04,930 --> 00:22:10,000
be a little more precise and avoid sort

525
00:22:08,740 --> 00:22:12,010
of propagating some of those marketing

526
00:22:10,000 --> 00:22:13,210
terminologies went under the hood and

527
00:22:12,010 --> 00:22:14,920
machine learning is what really was

528
00:22:13,210 --> 00:22:16,330
happening let me be clear about that on

529
00:22:14,920 --> 00:22:20,170
the next plate so this is this is where

530
00:22:16,330 --> 00:22:22,990
this this textbook comes in so AI

531
00:22:20,170 --> 00:22:25,450
machine learning deep learning - Kim you

532
00:22:22,990 --> 00:22:27,460
with my soapbox let's be precise so

533
00:22:25,450 --> 00:22:30,400
machine learning is an important sub P

534
00:22:27,460 --> 00:22:33,610
AI that's very closely related to

535
00:22:30,400 --> 00:22:35,230
statistics and data mining so -

536
00:22:33,610 --> 00:22:37,300
statistics provides those informal

537
00:22:35,230 --> 00:22:39,070
infant those formal inference with

538
00:22:37,300 --> 00:22:40,960
guarantees and data mining is where a

539
00:22:39,070 --> 00:22:42,879
human is sort of digging through and

540
00:22:40,960 --> 00:22:45,100
discovering patterns and data using

541
00:22:42,880 --> 00:22:47,470
algorithms and being at the bottom here

542
00:22:45,100 --> 00:22:50,530
machine learning is about building

543
00:22:47,470 --> 00:22:53,470
predictive models from data what I mean

544
00:22:50,530 --> 00:22:55,330
by that is given an algorithm you've

545
00:22:53,470 --> 00:22:58,660
given algorithm gobs and gobs of data

546
00:22:55,330 --> 00:23:00,370
and it will summarize that data you with

547
00:22:58,660 --> 00:23:04,090
a model and then you throw the data away

548
00:23:00,370 --> 00:23:06,429
and the model is an imperfect and flawed

549
00:23:04,090 --> 00:23:08,770
summary of the data but it's useful

550
00:23:06,430 --> 00:23:11,050
because I can ask the model questions I

551
00:23:08,770 --> 00:23:14,910
can ask it about facts that were never

552
00:23:11,050 --> 00:23:14,909
in the data so I can use it to predict

553
00:23:15,150 --> 00:23:20,140
so because it's imperfect it will always

554
00:23:18,430 --> 00:23:22,390
have false positives it will always have

555
00:23:20,140 --> 00:23:24,130
false negatives it's it's imperfect it

556
00:23:22,390 --> 00:23:26,830
even if your data was perfect the model

557
00:23:24,130 --> 00:23:28,900
the model is not going to be perfect so

558
00:23:26,830 --> 00:23:31,750
on the other hand the broader definition

559
00:23:28,900 --> 00:23:32,020
of a iie is about behaving and reasoning

560
00:23:31,750 --> 00:23:34,030
in

561
00:23:32,020 --> 00:23:35,260
reacting with the world and sure machine

562
00:23:34,030 --> 00:23:36,670
learning is it really important and

563
00:23:35,260 --> 00:23:39,570
major sub fill of that but it does not

564
00:23:36,670 --> 00:23:43,030
encompass everything so for example

565
00:23:39,570 --> 00:23:45,939
Tesla self-driving car is an AI because

566
00:23:43,030 --> 00:23:48,340
it behaves and reasons it interacts but

567
00:23:45,940 --> 00:23:49,930
so is Clippy Clippy is awesome and I

568
00:23:48,340 --> 00:23:51,189
don't hear any security vendors bragging

569
00:23:49,930 --> 00:23:53,770
about having Clippy in their security

570
00:23:51,190 --> 00:23:55,840
product so usually when one speaks of AI

571
00:23:53,770 --> 00:23:58,410
and security it's most often they mean

572
00:23:55,840 --> 00:24:02,590
machine learning to predict and model

573
00:23:58,410 --> 00:24:04,990
but but they say they say it for

574
00:24:02,590 --> 00:24:06,550
whatever reason so again if I had one

575
00:24:04,990 --> 00:24:08,440
wish for our industry today that that

576
00:24:06,550 --> 00:24:11,020
it's never again we would hear the words

577
00:24:08,440 --> 00:24:13,600
our product uses quote unquote this

578
00:24:11,020 --> 00:24:15,760
phrase AI a machine learning AI and

579
00:24:13,600 --> 00:24:18,669
machine learning unless you happen to

580
00:24:15,760 --> 00:24:23,800
mean I mean an eight an autonomous agent

581
00:24:18,670 --> 00:24:26,350
and a predictive model okay so in

582
00:24:23,800 --> 00:24:28,360
summary while it's not incorrect it's

583
00:24:26,350 --> 00:24:30,219
certainly imprecise and I think for most

584
00:24:28,360 --> 00:24:32,469
of the population especially outside of

585
00:24:30,220 --> 00:24:34,480
this room it conjures up the wrong the

586
00:24:32,470 --> 00:24:36,040
wrong picture all right so that is the

587
00:24:34,480 --> 00:24:39,970
end of my soapbox and I'll proceed with

588
00:24:36,040 --> 00:24:42,550
the talk so how do we want to use

589
00:24:39,970 --> 00:24:45,330
machine learning to discover behavioral

590
00:24:42,550 --> 00:24:48,490
patterns in event streams and event logs

591
00:24:45,330 --> 00:24:51,639
here's something I'll propose to you so

592
00:24:48,490 --> 00:24:53,950
the goal is here I have a bunch of event

593
00:24:51,640 --> 00:24:56,200
logs and I know that something bad

594
00:24:53,950 --> 00:24:57,610
happened in them so let's take a ran

595
00:24:56,200 --> 00:24:59,620
somewhere I don't know how it happened

596
00:24:57,610 --> 00:25:02,800
but all my all these if it lugs happen

597
00:24:59,620 --> 00:25:04,840
because my might my boxes got bricked so

598
00:25:02,800 --> 00:25:07,659
what I'd like to do is I'd like to throw

599
00:25:04,840 --> 00:25:09,399
these at a machinery model and maybe

600
00:25:07,660 --> 00:25:13,630
with some human interaction I like to

601
00:25:09,400 --> 00:25:18,060
spit out an equal an equal query that

602
00:25:13,630 --> 00:25:21,340
will be number one interpretable and

603
00:25:18,060 --> 00:25:23,290
number two sort of generalize to all

604
00:25:21,340 --> 00:25:25,209
those events all those malicious

605
00:25:23,290 --> 00:25:28,450
patterns that event log so it'll tell me

606
00:25:25,210 --> 00:25:30,580
what I should be searching for the

607
00:25:28,450 --> 00:25:33,130
second goal of this is that I like to

608
00:25:30,580 --> 00:25:35,580
detect that not at the end so it's it's

609
00:25:33,130 --> 00:25:37,990
useless if you know my ransomware has

610
00:25:35,580 --> 00:25:38,679
delete encrypted all my files and then I

611
00:25:37,990 --> 00:25:42,190
say oh yep

612
00:25:38,680 --> 00:25:43,270
ransomware you got ransomware we wanted

613
00:25:42,190 --> 00:25:45,210
to detect that as early as possible

614
00:25:43,270 --> 00:25:48,539
maybe one or two file

615
00:25:45,210 --> 00:25:51,419
rights for example so goal number one

616
00:25:48,539 --> 00:25:53,789
let's learn a general and robust

617
00:25:51,419 --> 00:25:56,039
analytic that's understandable because

618
00:25:53,789 --> 00:25:57,600
it's written in equal I can understand

619
00:25:56,039 --> 00:25:59,779
it's easy to understand and number two I

620
00:25:57,600 --> 00:26:01,799
want to do that as early as possible so

621
00:25:59,779 --> 00:26:03,570
in what follows I'm gonna go down this

622
00:26:01,799 --> 00:26:05,370
rabbit hole a building machine learning

623
00:26:03,570 --> 00:26:09,779
model and and the thing that we're gonna

624
00:26:05,370 --> 00:26:12,059
sit her now is not just a a process but

625
00:26:09,779 --> 00:26:13,890
a parent process and all his children

626
00:26:12,059 --> 00:26:14,370
and all the events that belong to that

627
00:26:13,890 --> 00:26:17,190
tree

628
00:26:14,370 --> 00:26:20,428
and and the reason is of course that you

629
00:26:17,190 --> 00:26:21,779
know many malware samples don't do the

630
00:26:20,429 --> 00:26:26,010
evil these themselves they spawn

631
00:26:21,779 --> 00:26:29,159
children process - for example a net

632
00:26:26,010 --> 00:26:31,679
view or the assisted min in the case of

633
00:26:29,159 --> 00:26:33,270
ransomware so what follows when we

634
00:26:31,679 --> 00:26:36,390
monitor a process we're actually

635
00:26:33,270 --> 00:26:42,899
monitoring all of the ordered events in

636
00:26:36,390 --> 00:26:44,010
the whole tree of that process okay so

637
00:26:42,899 --> 00:26:46,459
let's jump into this machine learning

638
00:26:44,010 --> 00:26:48,539
model and the first step we're gonna do

639
00:26:46,460 --> 00:26:51,000
there's gonna be three steps the first

640
00:26:48,539 --> 00:26:51,510
is we're going to we're gonna prepare

641
00:26:51,000 --> 00:26:54,779
our data

642
00:26:51,510 --> 00:26:57,179
we're in attaint change event with in a

643
00:26:54,779 --> 00:27:00,179
textual representation into a numeric

644
00:26:57,179 --> 00:27:04,470
representation then we'll pass those on

645
00:27:00,179 --> 00:27:06,899
to a model which will we'll learn a

646
00:27:04,470 --> 00:27:09,270
better more useful representation for it

647
00:27:06,899 --> 00:27:11,219
and it will build some state on the

648
00:27:09,270 --> 00:27:13,679
sequence and they will spit out an

649
00:27:11,220 --> 00:27:17,250
output maliciousness score so the first

650
00:27:13,679 --> 00:27:18,840
step is the feature izing step and it

651
00:27:17,250 --> 00:27:19,830
really consists of two parts so suppose

652
00:27:18,840 --> 00:27:23,250
I have the following in advance to this

653
00:27:19,830 --> 00:27:26,600
file modification event the first thing

654
00:27:23,250 --> 00:27:29,100
we are interested in is making this

655
00:27:26,600 --> 00:27:32,250
textual representation of an event into

656
00:27:29,100 --> 00:27:34,559
a series of numbers that the machine

657
00:27:32,250 --> 00:27:36,000
learning can deal with and we're do that

658
00:27:34,559 --> 00:27:37,678
in a couple of steps so the first is

659
00:27:36,000 --> 00:27:41,460
that I'm going to actually throw away

660
00:27:37,679 --> 00:27:43,679
most of the data so there is no reason

661
00:27:41,460 --> 00:27:46,260
to believe that the model should learn

662
00:27:43,679 --> 00:27:47,880
bid or the username vagrant as an

663
00:27:46,260 --> 00:27:50,190
indicator of malicious behavior in fact

664
00:27:47,880 --> 00:27:52,140
if I leave if I leave username in here

665
00:27:50,190 --> 00:27:54,179
probably what the machine then the model

666
00:27:52,140 --> 00:27:55,860
will will key in on is that hey if

667
00:27:54,179 --> 00:27:57,929
you're running as a vagrant it's bad

668
00:27:55,860 --> 00:28:00,748
right because I'm dead to me

669
00:27:57,929 --> 00:28:03,509
in a VM so I'm gonna throw out most of

670
00:28:00,749 --> 00:28:05,940
the data bid and username I don't really

671
00:28:03,509 --> 00:28:07,590
care where this process is running and I

672
00:28:05,940 --> 00:28:09,389
don't care when the process is running I

673
00:28:07,590 --> 00:28:10,590
will only use timestamp for ordering the

674
00:28:09,389 --> 00:28:12,719
events in the proper order

675
00:28:10,590 --> 00:28:15,149
so what's left is file path and

676
00:28:12,720 --> 00:28:18,299
furthermore I don't care that it's in C

677
00:28:15,149 --> 00:28:20,340
Windows desktop vagrant test bites I'm

678
00:28:18,299 --> 00:28:22,710
gonna normalize that to this shortened

679
00:28:20,340 --> 00:28:26,340
word a desktop that sort of genera sizes

680
00:28:22,710 --> 00:28:29,039
the runtime and the Machine right so

681
00:28:26,340 --> 00:28:32,549
after that then it's really easy to turn

682
00:28:29,039 --> 00:28:36,629
this so this is actually a pair of items

683
00:28:32,549 --> 00:28:40,499
there's there's an even type so in this

684
00:28:36,629 --> 00:28:42,899
example this this is a third the third

685
00:28:40,499 --> 00:28:46,590
event type in a sequence it's a file

686
00:28:42,899 --> 00:28:48,539
modify event and there's some context so

687
00:28:46,590 --> 00:28:50,850
I know the file path for that file type

688
00:28:48,539 --> 00:28:52,379
event so I'm going to turn this into two

689
00:28:50,850 --> 00:28:54,509
sips of numbers the first is I'm going

690
00:28:52,379 --> 00:28:57,299
to give a number to the event type we'll

691
00:28:54,509 --> 00:29:00,450
call it 7 and then I'm going to change

692
00:28:57,299 --> 00:29:02,249
this text into a vector and really easy

693
00:29:00,450 --> 00:29:04,740
I'm gonna just do a histogram of the

694
00:29:02,249 --> 00:29:07,499
characters in the in the path and then

695
00:29:04,740 --> 00:29:09,330
relize path so you know there's there's

696
00:29:07,499 --> 00:29:11,129
something like three e's in there and so

697
00:29:09,330 --> 00:29:14,999
that's where this 3k this three comes

698
00:29:11,129 --> 00:29:16,860
from right so now the numbers and now I

699
00:29:14,999 --> 00:29:18,389
can actually turn this over I've done

700
00:29:16,860 --> 00:29:19,860
that I'll do this for every event in my

701
00:29:18,389 --> 00:29:23,340
sequence and I can turn this over to

702
00:29:19,860 --> 00:29:25,408
Michigan on your model so in its raw

703
00:29:23,340 --> 00:29:27,570
form these numbers are not so useful to

704
00:29:25,409 --> 00:29:29,039
the machine learning and here's we're

705
00:29:27,570 --> 00:29:30,539
gonna do a little bit deep dive but all

706
00:29:29,039 --> 00:29:33,389
you really need to appreciate here is

707
00:29:30,539 --> 00:29:35,190
that machine learning can take this

708
00:29:33,389 --> 00:29:37,439
neural network that we're making can

709
00:29:35,190 --> 00:29:39,419
take these raw numbers and make more

710
00:29:37,440 --> 00:29:41,190
useful representations where usefulness

711
00:29:39,419 --> 00:29:43,289
is defined by the tasks the models

712
00:29:41,190 --> 00:29:44,580
solving so all is I going to do is I'll

713
00:29:43,289 --> 00:29:46,619
have two types of embeddings it's gonna

714
00:29:44,580 --> 00:29:47,999
map this seven to a vector and it's

715
00:29:46,619 --> 00:29:49,379
going to map this vector to a different

716
00:29:47,999 --> 00:29:52,019
vector I'll concatenate them together

717
00:29:49,379 --> 00:29:53,189
and all you really really need to worry

718
00:29:52,019 --> 00:29:55,320
about is that there's this new

719
00:29:53,190 --> 00:29:57,840
representation that represents both the

720
00:29:55,320 --> 00:30:01,019
type and the context with the Titan and

721
00:29:57,840 --> 00:30:02,999
that will be passed into a recurrent

722
00:30:01,019 --> 00:30:06,359
neural network so a recurrent neural

723
00:30:02,999 --> 00:30:08,879
network is simply a function that takes

724
00:30:06,359 --> 00:30:11,639
as input two things the current state

725
00:30:08,879 --> 00:30:11,939
and the current input and it outputs two

726
00:30:11,639 --> 00:30:14,820
thing

727
00:30:11,940 --> 00:30:17,100
the updated state and the current output

728
00:30:14,820 --> 00:30:18,960
that's it so I'm just gonna learn this

729
00:30:17,100 --> 00:30:21,059
function in this case we're using a gate

730
00:30:18,960 --> 00:30:23,580
a gated recurrent unit and I'm gonna

731
00:30:21,059 --> 00:30:25,049
keep around this state internally you

732
00:30:23,580 --> 00:30:27,299
know when I went to update the state

733
00:30:25,049 --> 00:30:30,210
I'll pass it back into itself and I'll

734
00:30:27,299 --> 00:30:32,370
pass this output from this this this

735
00:30:30,210 --> 00:30:34,019
recurrent unit so the reason we keep

736
00:30:32,370 --> 00:30:35,908
around state of course is that now when

737
00:30:34,019 --> 00:30:39,090
I pass the MIS vector for file modify

738
00:30:35,909 --> 00:30:41,009
this state has already encapsulated the

739
00:30:39,090 --> 00:30:44,009
important parts of crate process and

740
00:30:41,009 --> 00:30:47,519
registry right so that the output from

741
00:30:44,009 --> 00:30:50,039
file not fi is colored by the context of

742
00:30:47,519 --> 00:30:52,049
these previous events well pass that

743
00:30:50,039 --> 00:30:54,389
through a simple neuron layer that will

744
00:30:52,049 --> 00:30:56,399
map the output of that that vector

745
00:30:54,389 --> 00:30:59,668
output into a number between 0 & 1 where

746
00:30:56,399 --> 00:31:02,158
0 is most likely benign and 1 is most

747
00:30:59,669 --> 00:31:05,309
likely malicious so that's it that's the

748
00:31:02,159 --> 00:31:08,159
end of this deep dive I'm gonna tell you

749
00:31:05,309 --> 00:31:10,230
so I actually took a million benign

750
00:31:08,159 --> 00:31:12,059
processes from a corporate network and I

751
00:31:10,230 --> 00:31:15,679
trained this model and from malicious

752
00:31:12,059 --> 00:31:17,908
set I use a 120 ransomware events and

753
00:31:15,679 --> 00:31:20,070
this model is probably not something

754
00:31:17,909 --> 00:31:21,600
you'd want to stand up in production to

755
00:31:20,070 --> 00:31:24,019
detect events that's that's not why

756
00:31:21,600 --> 00:31:26,850
we're interested in it today

757
00:31:24,019 --> 00:31:30,750
but it does detect about two-thirds of

758
00:31:26,850 --> 00:31:33,389
the ransomware with a 1 1 on 100 false

759
00:31:30,750 --> 00:31:36,509
positive rate so what we're interested

760
00:31:33,389 --> 00:31:38,519
in though is using this model that we've

761
00:31:36,509 --> 00:31:42,870
trained to tell the difference between

762
00:31:38,519 --> 00:31:45,330
ransomware and not ransomware use it to

763
00:31:42,870 --> 00:31:47,459
discover patterns so we can ask the

764
00:31:45,330 --> 00:31:49,019
model what was what

765
00:31:47,460 --> 00:31:52,169
for this new sample that you've never

766
00:31:49,019 --> 00:31:54,990
seen before what is the important part

767
00:31:52,169 --> 00:31:59,580
to you and can I use that to build an

768
00:31:54,990 --> 00:32:01,679
equal rule so here's a learned pattern

769
00:31:59,580 --> 00:32:05,580
by the model let me just describe it so

770
00:32:01,679 --> 00:32:09,029
first this is the ransomware dma locker

771
00:32:05,580 --> 00:32:11,519
and I'm showing on a timeline the events

772
00:32:09,029 --> 00:32:13,620
so each vertical bar is represent by

773
00:32:11,519 --> 00:32:16,350
event and the color of the bar is

774
00:32:13,620 --> 00:32:19,168
colored by how malicious or benign that

775
00:32:16,350 --> 00:32:20,639
sample is to the model so blue means

776
00:32:19,169 --> 00:32:23,519
benign and red means more malicious

777
00:32:20,639 --> 00:32:25,779
right so we can see this model this

778
00:32:23,519 --> 00:32:27,820
model sort of builds

779
00:32:25,779 --> 00:32:29,859
evidence over time through many many

780
00:32:27,820 --> 00:32:34,718
subsequent file writes that this is an

781
00:32:29,859 --> 00:32:37,299
in fact bad this is not good this is

782
00:32:34,719 --> 00:32:39,460
this a terrible model because it took me

783
00:32:37,299 --> 00:32:41,918
maybe 20 file rights before he's he's

784
00:32:39,460 --> 00:32:45,340
truly convinced that this is that this

785
00:32:41,919 --> 00:32:48,099
is a malicious and in fact it also has a

786
00:32:45,340 --> 00:32:49,928
number of annoying false negatives so

787
00:32:48,099 --> 00:32:52,749
this ransomware

788
00:32:49,929 --> 00:32:55,149
this marburo ransomware is not detected

789
00:32:52,749 --> 00:32:57,879
at all and a false positive and believe

790
00:32:55,149 --> 00:33:01,449
it or not it's an AV product right often

791
00:32:57,879 --> 00:33:06,339
is a false positive in many anti-malware

792
00:33:01,450 --> 00:33:07,659
engines so this this is a bad model I'm

793
00:33:06,339 --> 00:33:09,039
gonna I'm gonna show you how to make it

794
00:33:07,659 --> 00:33:11,049
better and the following slides using

795
00:33:09,039 --> 00:33:14,950
something really simple but just just as

796
00:33:11,049 --> 00:33:17,769
a baseline in this example model 95% of

797
00:33:14,950 --> 00:33:20,950
the ransomware that we detected it took

798
00:33:17,769 --> 00:33:23,440
65 events before we detected it that

799
00:33:20,950 --> 00:33:25,809
boils down to about 21 registry

800
00:33:23,440 --> 00:33:29,440
operations and 10 file corruptions

801
00:33:25,809 --> 00:33:32,918
writes or deletes so we can we do better

802
00:33:29,440 --> 00:33:35,529
can we make this earlier oh and just for

803
00:33:32,919 --> 00:33:38,919
context so this this is a an image

804
00:33:35,529 --> 00:33:41,589
showing on each column I'm showing one

805
00:33:38,919 --> 00:33:43,269
of these colored plots so everything

806
00:33:41,589 --> 00:33:45,279
starts out as benign and as time

807
00:33:43,269 --> 00:33:47,739
progresses things can get more and more

808
00:33:45,279 --> 00:33:48,789
malicious as determined by the model so

809
00:33:47,739 --> 00:33:50,979
can we make this better can we make it

810
00:33:48,789 --> 00:33:53,710
can we move this yellow line up which is

811
00:33:50,979 --> 00:33:56,489
the 95 percentile of detection can I

812
00:33:53,710 --> 00:33:59,409
move it up to you know way up here and

813
00:33:56,489 --> 00:34:00,580
can I maybe that's going to cost me some

814
00:33:59,409 --> 00:34:02,649
accuracy that I don't care I'm

815
00:34:00,580 --> 00:34:04,509
interested in the patterns and more

816
00:34:02,649 --> 00:34:06,668
importantly can we improve the patterns

817
00:34:04,509 --> 00:34:09,789
to make that detection happen earlier

818
00:34:06,669 --> 00:34:12,399
and the answer is yes it can go an

819
00:34:09,789 --> 00:34:16,690
insanely simple way and I'll show you

820
00:34:12,399 --> 00:34:18,819
that all you need to do actually is

821
00:34:16,690 --> 00:34:20,559
instead of growing evidence over time

822
00:34:18,819 --> 00:34:23,020
we're gonna change our models so that is

823
00:34:20,559 --> 00:34:24,579
able to look throughout time to find any

824
00:34:23,020 --> 00:34:26,889
malicious pattern during the entire

825
00:34:24,579 --> 00:34:29,379
history of a sequence so by doing that

826
00:34:26,889 --> 00:34:31,000
we'll have a new model that has a drop

827
00:34:29,379 --> 00:34:33,819
in at the efficacy so now I can only

828
00:34:31,000 --> 00:34:36,429
detect over half of the ransomware at 1

829
00:34:33,819 --> 00:34:38,500
and 100 nevertheless I hope you'll see

830
00:34:36,429 --> 00:34:39,460
that the patterns that it discovers are

831
00:34:38,500 --> 00:34:41,379
quite interesting

832
00:34:39,460 --> 00:34:43,949
I'm gonna show those patterns and show

833
00:34:41,379 --> 00:34:47,259
how we build equal rules based on them

834
00:34:43,949 --> 00:34:50,618
and the following slides so in this

835
00:34:47,260 --> 00:34:53,409
model again look now at each column and

836
00:34:50,619 --> 00:34:56,290
instead of this gradual increase from

837
00:34:53,409 --> 00:34:58,930
blue to red now you see behavior that

838
00:34:56,290 --> 00:35:01,329
looks like blue sudden jump to red and

839
00:34:58,930 --> 00:35:03,520
in some cases that jump back to blue we

840
00:35:01,329 --> 00:35:06,730
don't care because at the first instance

841
00:35:03,520 --> 00:35:08,859
of red that's when we call our processor

842
00:35:06,730 --> 00:35:10,800
ransomware so the good thing about this

843
00:35:08,859 --> 00:35:13,930
model is that even though we've

844
00:35:10,800 --> 00:35:16,630
decreased our accuracy of detection of

845
00:35:13,930 --> 00:35:19,029
ransomware we've increased the earliness

846
00:35:16,630 --> 00:35:22,510
now it only takes two file rights before

847
00:35:19,030 --> 00:35:24,609
we have discovered the most behavior and

848
00:35:22,510 --> 00:35:28,359
the patterns I think you'll see are are

849
00:35:24,609 --> 00:35:32,259
compelling ok so this is the old the old

850
00:35:28,359 --> 00:35:33,119
model it took a long time to detect this

851
00:35:32,260 --> 00:35:35,290
bit Paymer

852
00:35:33,119 --> 00:35:38,319
ransom or sample and the new model

853
00:35:35,290 --> 00:35:40,599
detects it like this so let me just walk

854
00:35:38,319 --> 00:35:42,700
through what what the model tells us

855
00:35:40,599 --> 00:35:45,309
that bit Paymer is doing and what what

856
00:35:42,700 --> 00:35:49,240
you could do to write write an equal

857
00:35:45,309 --> 00:35:50,890
rule to detect this bit paper sample so

858
00:35:49,240 --> 00:35:53,290
if you notice there's a creation event

859
00:35:50,890 --> 00:35:55,078
if you can see it a creation event a

860
00:35:53,290 --> 00:35:58,839
process creation event two of them

861
00:35:55,079 --> 00:35:59,260
followed by a file modify event so--but

862
00:35:58,839 --> 00:36:01,119
Paymer

863
00:35:59,260 --> 00:36:04,270
if you're not aware is ransomware that

864
00:36:01,119 --> 00:36:06,010
actually replicates itself into two

865
00:36:04,270 --> 00:36:07,839
alternate data streams so it stores

866
00:36:06,010 --> 00:36:10,809
itself as an executable attached to a

867
00:36:07,839 --> 00:36:12,609
text file so one of those what I'm

868
00:36:10,809 --> 00:36:15,660
showing right here is apparently the

869
00:36:12,609 --> 00:36:18,369
second of those alternate data stream

870
00:36:15,660 --> 00:36:18,730
things and what it's doing is is the

871
00:36:18,369 --> 00:36:23,079
following

872
00:36:18,730 --> 00:36:26,319
first it's creating a process command C

873
00:36:23,079 --> 00:36:30,339
to launch VSS admin to delete shadow

874
00:36:26,319 --> 00:36:32,529
copies and then it's going to encrypt

875
00:36:30,339 --> 00:36:36,069
using the following scheme it's gonna

876
00:36:32,530 --> 00:36:38,020
encrypt a file and then rename that file

877
00:36:36,069 --> 00:36:40,690
overwrite the file then rename it to the

878
00:36:38,020 --> 00:36:41,829
file name dot lock as you can see the

879
00:36:40,690 --> 00:36:43,839
machine learning is picking up exactly

880
00:36:41,829 --> 00:36:46,299
that is set it looks at it sees this

881
00:36:43,839 --> 00:36:49,240
creation event where the arguments are

882
00:36:46,299 --> 00:36:51,460
via system index evilly shadows and this

883
00:36:49,240 --> 00:36:53,290
uses file modify and rename immediately

884
00:36:51,460 --> 00:36:55,750
by the file modify already knows yeah

885
00:36:53,290 --> 00:36:58,300
this is ransomware so that the rule that

886
00:36:55,750 --> 00:37:01,750
comes from this looks like this

887
00:36:58,300 --> 00:37:04,150
find me a sequence by this user that

888
00:37:01,750 --> 00:37:06,070
does the following first it runs via

889
00:37:04,150 --> 00:37:09,280
sysadmin to the least shadow copies and

890
00:37:06,070 --> 00:37:12,520
then it renames the file name to that

891
00:37:09,280 --> 00:37:13,630
lock that's it so this was this was not

892
00:37:12,520 --> 00:37:15,310
discovered automatically but in a

893
00:37:13,630 --> 00:37:17,290
semi-automated way it told me where to

894
00:37:15,310 --> 00:37:19,630
look which we're the boundary of

895
00:37:17,290 --> 00:37:21,759
interesting events were and then what I

896
00:37:19,630 --> 00:37:24,880
did is I just jumped to those logs and

897
00:37:21,760 --> 00:37:26,440
looked for the important features and it

898
00:37:24,880 --> 00:37:28,330
told me that VSS have been was important

899
00:37:26,440 --> 00:37:30,250
and that lock was important and so it's

900
00:37:28,330 --> 00:37:31,750
easy for me to read that rule so a few

901
00:37:30,250 --> 00:37:34,210
more examples this is DMA Locker

902
00:37:31,750 --> 00:37:35,740
ransomware DMA Locker does the following

903
00:37:34,210 --> 00:37:37,600
he first drops a ransom note

904
00:37:35,740 --> 00:37:40,209
then he disables the Windows Firewall

905
00:37:37,600 --> 00:37:42,970
and update and then he starts encrypting

906
00:37:40,210 --> 00:37:45,040
files via overwrite the old model took

907
00:37:42,970 --> 00:37:47,470
quite a long time before recall to sort

908
00:37:45,040 --> 00:37:50,259
of convict this ransomware sample and

909
00:37:47,470 --> 00:37:52,839
the new model it's quite abrupt so it

910
00:37:50,260 --> 00:37:55,060
takes a few registry writes but after

911
00:37:52,840 --> 00:37:57,250
the first or first file creates second

912
00:37:55,060 --> 00:37:58,930
file overwrite and he's already quite

913
00:37:57,250 --> 00:38:01,810
convinced that this is ransomware and

914
00:37:58,930 --> 00:38:03,779
this the equal model that we've learned

915
00:38:01,810 --> 00:38:08,259
because of this looks like the following

916
00:38:03,780 --> 00:38:10,600
find me a file create event where the

917
00:38:08,260 --> 00:38:13,540
file name was crypt info text that's the

918
00:38:10,600 --> 00:38:16,089
ransom note find me a registry

919
00:38:13,540 --> 00:38:19,120
modification that happens to the Windows

920
00:38:16,090 --> 00:38:21,310
Firewall registry key and then find me

921
00:38:19,120 --> 00:38:23,470
any file override event and that's

922
00:38:21,310 --> 00:38:26,040
sufficient to find this sample with no

923
00:38:23,470 --> 00:38:30,129
false positives in my entire data set

924
00:38:26,040 --> 00:38:32,110
another one one last example this this

925
00:38:30,130 --> 00:38:35,410
is from the mob or Oh st. Marlboro

926
00:38:32,110 --> 00:38:37,200
Marlboro sample the old model actually

927
00:38:35,410 --> 00:38:39,700
misses completely and the new model

928
00:38:37,200 --> 00:38:41,500
finds it with this an abrupt change here

929
00:38:39,700 --> 00:38:43,270
now what's happening it tells us that

930
00:38:41,500 --> 00:38:45,790
what's important is again deleting

931
00:38:43,270 --> 00:38:48,660
shadow copies with VSS admin creating

932
00:38:45,790 --> 00:38:51,040
this DISA database file this sort of

933
00:38:48,660 --> 00:38:53,710
apparently create that sort of keeps a

934
00:38:51,040 --> 00:38:56,620
log of what files have been have been

935
00:38:53,710 --> 00:38:59,260
encrypted it makes a de-icer dns request

936
00:38:56,620 --> 00:39:02,230
and I've removed that domain and then it

937
00:38:59,260 --> 00:39:05,830
encrypts the media archive source files

938
00:39:02,230 --> 00:39:06,830
to filename extension oops so as you can

939
00:39:05,830 --> 00:39:08,690
see now an

940
00:39:06,830 --> 00:39:10,910
deletes the original file so you can see

941
00:39:08,690 --> 00:39:13,250
that here you see them you see the DNS

942
00:39:10,910 --> 00:39:15,589
requests you see the file delete event

943
00:39:13,250 --> 00:39:17,540
file create event Det so as soon as we

944
00:39:15,590 --> 00:39:18,590
see this first file delete event the

945
00:39:17,540 --> 00:39:20,960
model is already certain that it's

946
00:39:18,590 --> 00:39:23,660
ransomware and the equal query that you

947
00:39:20,960 --> 00:39:26,780
could do with this is this follows I do

948
00:39:23,660 --> 00:39:30,859
a VSS admin delete shadow copy I look

949
00:39:26,780 --> 00:39:33,830
for a crazy event and I look for okay so

950
00:39:30,860 --> 00:39:35,000
models aren't perfect I'll as a machine

951
00:39:33,830 --> 00:39:36,049
learning researcher I'll be the first to

952
00:39:35,000 --> 00:39:38,990
tell you this so I want to show you

953
00:39:36,050 --> 00:39:41,270
explicitly a false negative and a false

954
00:39:38,990 --> 00:39:43,009
pocket positive so in this case the

955
00:39:41,270 --> 00:39:47,050
false negative from the previous model

956
00:39:43,010 --> 00:39:48,980
for this Oh cami sample teardrop which

957
00:39:47,050 --> 00:39:51,800
if you don't believe that Microsoft

958
00:39:48,980 --> 00:39:53,840
label here but for our model looks like

959
00:39:51,800 --> 00:39:55,520
this so it found something that it's

960
00:39:53,840 --> 00:39:58,400
maybe slightly suspicious but it didn't

961
00:39:55,520 --> 00:39:59,750
sort of elevate it to to the above a

962
00:39:58,400 --> 00:40:02,540
threshold where we'd call it ransomware

963
00:39:59,750 --> 00:40:05,300
this sample as it turns out is actually

964
00:40:02,540 --> 00:40:07,130
not the the main tear drop sample is

965
00:40:05,300 --> 00:40:09,380
actually like an evasion tool that

966
00:40:07,130 --> 00:40:12,290
disables Windows Defender services and

967
00:40:09,380 --> 00:40:14,300
modifies console tracing to hide its

968
00:40:12,290 --> 00:40:15,920
footprints so it's maybe paving the way

969
00:40:14,300 --> 00:40:17,600
for the Oh camis sample to be dropped

970
00:40:15,920 --> 00:40:22,250
and so maybe that's why this is a false

971
00:40:17,600 --> 00:40:25,509
negative in this case a false positive

972
00:40:22,250 --> 00:40:28,100
so both the old model and the new model

973
00:40:25,510 --> 00:40:30,260
discovered this sample which is false

974
00:40:28,100 --> 00:40:32,900
positive it turns out to be a BG update

975
00:40:30,260 --> 00:40:35,030
service and here's what your false

976
00:40:32,900 --> 00:40:37,760
positives if you look there's a bunch of

977
00:40:35,030 --> 00:40:39,620
registry modifications filed by some

978
00:40:37,760 --> 00:40:40,790
overwrite and a file create event and if

979
00:40:39,620 --> 00:40:43,520
you remember from the previous samples

980
00:40:40,790 --> 00:40:46,820
that's a very common rule a very common

981
00:40:43,520 --> 00:40:48,290
sequence in that ransomware so the good

982
00:40:46,820 --> 00:40:51,080
news here is for each of these false

983
00:40:48,290 --> 00:40:53,029
positives I can create a very

984
00:40:51,080 --> 00:40:55,040
explainable way using equal to determine

985
00:40:53,030 --> 00:40:56,960
exactly why they're false positives and

986
00:40:55,040 --> 00:40:58,340
furthermore I could actually whitelist

987
00:40:56,960 --> 00:41:00,890
this these these all happen to be signs

988
00:40:58,340 --> 00:41:04,700
valid sign binaries with a low

989
00:41:00,890 --> 00:41:07,700
signatures so you like list those okay I

990
00:41:04,700 --> 00:41:09,109
am nearing the completion of my talk I

991
00:41:07,700 --> 00:41:11,600
just have a summary slide I want to just

992
00:41:09,110 --> 00:41:13,850
take a step back we've we've taken a

993
00:41:11,600 --> 00:41:19,250
deep dive down machine learning approach

994
00:41:13,850 --> 00:41:20,299
to discover from just sequences where in

995
00:41:19,250 --> 00:41:23,480
here is something that's more

996
00:41:20,300 --> 00:41:26,240
and use that to derive an equal rule

997
00:41:23,480 --> 00:41:28,700
that can in a really explainable way so

998
00:41:26,240 --> 00:41:31,520
equals nice because I can deploy it

999
00:41:28,700 --> 00:41:33,560
easily like I can do it today after I

1000
00:41:31,520 --> 00:41:35,330
don't like invent some new machine

1001
00:41:33,560 --> 00:41:38,210
learning trickery to use on my system

1002
00:41:35,330 --> 00:41:39,650
and and I can I know exactly what it's

1003
00:41:38,210 --> 00:41:41,810
doing I know exactly what it's looking

1004
00:41:39,650 --> 00:41:44,570
for and that's one of the trade one of

1005
00:41:41,810 --> 00:41:46,549
the sort of difficult problems that

1006
00:41:44,570 --> 00:41:48,290
vendors face with machining is they

1007
00:41:46,550 --> 00:41:50,840
can't often tell you why a detection

1008
00:41:48,290 --> 00:41:54,290
happened but with a quarry language you

1009
00:41:50,840 --> 00:41:56,840
can this model only turned out to be 150

1010
00:41:54,290 --> 00:41:58,460
kilobytes and it's probably too crude

1011
00:41:56,840 --> 00:42:03,500
for standalone detection but we can

1012
00:41:58,460 --> 00:42:05,330
create these rules in that way so my

1013
00:42:03,500 --> 00:42:09,230
final slide today if you take nothing

1014
00:42:05,330 --> 00:42:10,580
else from this talk today it's number

1015
00:42:09,230 --> 00:42:12,050
one I hope that you'll become familiar

1016
00:42:10,580 --> 00:42:14,540
with the miter attack framework for

1017
00:42:12,050 --> 00:42:16,720
enterprise you can do so by just going

1018
00:42:14,540 --> 00:42:19,400
to this website it has wonderful

1019
00:42:16,720 --> 00:42:21,080
documentation you can read about use

1020
00:42:19,400 --> 00:42:23,210
cases of each of these tactics and

1021
00:42:21,080 --> 00:42:25,250
become familiar with how at how

1022
00:42:23,210 --> 00:42:29,600
adversaries and very high profile

1023
00:42:25,250 --> 00:42:31,910
campaigns have have done evil things

1024
00:42:29,600 --> 00:42:34,339
without leaving a lot of IOC s around

1025
00:42:31,910 --> 00:42:37,009
and that should hopefully motivate for

1026
00:42:34,340 --> 00:42:38,570
you why you should be hunting for

1027
00:42:37,010 --> 00:42:40,130
behaviors rather than indicator to

1028
00:42:38,570 --> 00:42:43,910
compromise or just smell wear alone

1029
00:42:40,130 --> 00:42:46,580
malware anti-malware detection secondly

1030
00:42:43,910 --> 00:42:49,100
um I hope that you've seen that equal is

1031
00:42:46,580 --> 00:42:51,230
actually pretty easy to use and read you

1032
00:42:49,100 --> 00:42:52,790
can download this today go to github

1033
00:42:51,230 --> 00:42:54,980
equal and furthermore there's a

1034
00:42:52,790 --> 00:42:57,440
analytics library that's baked in and

1035
00:42:54,980 --> 00:42:59,930
ready to go you can start hunting with

1036
00:42:57,440 --> 00:43:01,670
this in your own environments today with

1037
00:42:59,930 --> 00:43:06,049
equal them and if you follow even

1038
00:43:01,670 --> 00:43:07,820
quarreling on Twitter Mike so I'm not an

1039
00:43:06,050 --> 00:43:10,670
author of the query language but my very

1040
00:43:07,820 --> 00:43:13,100
smart colleagues in Adam game who did

1041
00:43:10,670 --> 00:43:15,410
invent this they from time to time post

1042
00:43:13,100 --> 00:43:16,580
news and novel of detection techniques

1043
00:43:15,410 --> 00:43:18,500
that come out of banned from their

1044
00:43:16,580 --> 00:43:22,130
product releases so it's an interesting

1045
00:43:18,500 --> 00:43:24,320
account to follow and lastly if you do

1046
00:43:22,130 --> 00:43:26,990
nothing else today for goodness sake

1047
00:43:24,320 --> 00:43:29,270
let's please stop agree agree to stop

1048
00:43:26,990 --> 00:43:30,680
saying AI and ml and be a little more

1049
00:43:29,270 --> 00:43:32,330
precise unless you happen to mean

1050
00:43:30,680 --> 00:43:35,540
autonomous agents and

1051
00:43:32,330 --> 00:43:39,759
models thank you appreciate your time I

1052
00:43:35,540 --> 00:43:42,290
[Applause]

1053
00:43:39,760 --> 00:43:48,770
think we have time for questions I'm

1054
00:43:42,290 --> 00:43:51,020
happy to take any I don't think we have

1055
00:43:48,770 --> 00:43:53,150
a connector yet it's very I can show you

1056
00:43:51,020 --> 00:43:59,710
offline is very easy to sew all you need

1057
00:43:53,150 --> 00:43:59,710
to do is it's very easy to wire up so

1058
00:44:02,620 --> 00:44:07,100
yeah yeah it would be really easy to

1059
00:44:05,090 --> 00:44:13,670
wire up right right now it's baked into

1060
00:44:07,100 --> 00:44:20,299
other things that yeah do we have any

1061
00:44:13,670 --> 00:44:21,950
other questions hi decide as you have

1062
00:44:20,300 --> 00:44:24,890
mentioned that feature instruction is

1063
00:44:21,950 --> 00:44:27,819
one of the important factors while doing

1064
00:44:24,890 --> 00:44:30,500
of a machine learning algorithm right so

1065
00:44:27,820 --> 00:44:33,080
my question is so as you have mentioned

1066
00:44:30,500 --> 00:44:35,960
the feature extraction only the file

1067
00:44:33,080 --> 00:44:37,730
name you have considered right in that

1068
00:44:35,960 --> 00:44:39,980
example actually we consider many many

1069
00:44:37,730 --> 00:44:42,440
fields yes so I understood that but

1070
00:44:39,980 --> 00:44:45,290
whatever what about using something like

1071
00:44:42,440 --> 00:44:48,590
CNN and using feature extraction with

1072
00:44:45,290 --> 00:44:50,600
that and and how to generalize those

1073
00:44:48,590 --> 00:44:53,210
kind of feature extraction and how eql

1074
00:44:50,600 --> 00:44:55,490
can actually help us that which feature

1075
00:44:53,210 --> 00:44:58,790
extraction is useful for generalizing

1076
00:44:55,490 --> 00:45:01,879
the classification so you could use CNN

1077
00:44:58,790 --> 00:45:03,650
soo but guess what you can't you'd still

1078
00:45:01,880 --> 00:45:05,390
have to do the pre process and we talked

1079
00:45:03,650 --> 00:45:08,090
about you have to run a scene in on

1080
00:45:05,390 --> 00:45:10,670
numbers not characters so you'd have to

1081
00:45:08,090 --> 00:45:12,770
at the very least transfer your a file

1082
00:45:10,670 --> 00:45:14,720
name into a sequence of numbers mmm so

1083
00:45:12,770 --> 00:45:16,280
those are all Possible's I I didn't try

1084
00:45:14,720 --> 00:45:17,899
real very hard to optimize this model

1085
00:45:16,280 --> 00:45:19,850
but that would be an interesting line to

1086
00:45:17,900 --> 00:45:25,750
research for you to look at thinks

1087
00:45:19,850 --> 00:45:25,750
really nice too any other questions yeah

1088
00:45:27,910 --> 00:45:40,040
I you tested it against the adversarial

1089
00:45:36,800 --> 00:45:42,470
learning a tax adversarial learning

1090
00:45:40,040 --> 00:45:44,300
attacks adversarial learning attacks

1091
00:45:42,470 --> 00:45:45,589
against this model are certainly

1092
00:45:44,300 --> 00:45:46,130
possible actually I just read heard a

1093
00:45:45,590 --> 00:45:48,319
nice smell

1094
00:45:46,130 --> 00:45:49,630
paper about attacking sequential miles

1095
00:45:48,319 --> 00:45:52,400
in this way

1096
00:45:49,630 --> 00:45:55,069
yeah I've not looked into that I've done

1097
00:45:52,400 --> 00:45:56,930
that for a lot of my career and I

1098
00:45:55,069 --> 00:45:59,150
learned that it's been said earlier it's

1099
00:45:56,930 --> 00:46:01,129
it's a lot harder be blue team than red

1100
00:45:59,150 --> 00:46:02,960
team red team's really easy it's really

1101
00:46:01,130 --> 00:46:05,630
easy to attack so I would not doubt that

1102
00:46:02,960 --> 00:46:08,720
you could find ways of creating

1103
00:46:05,630 --> 00:46:12,049
ransomware that did enough things

1104
00:46:08,720 --> 00:46:14,598
it learned what benign even to inject in

1105
00:46:12,049 --> 00:46:18,009
order to bypass completely this model no

1106
00:46:14,599 --> 00:46:23,990
problem no problem thank you yep

1107
00:46:18,009 --> 00:46:27,109
any other questions so IP address in DNS

1108
00:46:23,990 --> 00:46:28,399
names can change so how do you so handle

1109
00:46:27,109 --> 00:46:33,710
that like what's your solution

1110
00:46:28,400 --> 00:46:35,450
yeah so in in this example I think that

1111
00:46:33,710 --> 00:46:38,450
we actually scrubbed out IP altogether

1112
00:46:35,450 --> 00:46:40,538
DNS I might have kept but that's a

1113
00:46:38,450 --> 00:46:44,720
tunable parameter that you could do for

1114
00:46:40,539 --> 00:46:46,519
more generally for equal that that's

1115
00:46:44,720 --> 00:46:49,250
gonna be in your log and that's a useful

1116
00:46:46,519 --> 00:46:51,769
IOC that you can hunt for but you can

1117
00:46:49,250 --> 00:46:54,589
you can use wildcard searches for

1118
00:46:51,769 --> 00:46:56,089
example or you can just write analytes

1119
00:46:54,589 --> 00:46:57,740
that do not depend on sort of the more

1120
00:46:56,089 --> 00:47:00,319
brittle elements such as IP address in

1121
00:46:57,740 --> 00:47:02,720
genus gain certification they're dying

1122
00:47:00,319 --> 00:47:05,240
this and then like get like so clarity

1123
00:47:02,720 --> 00:47:08,089
so it's possible you can put anything in

1124
00:47:05,240 --> 00:47:09,649
here you want so long so here we're

1125
00:47:08,089 --> 00:47:12,230
talking about the data behind equal

1126
00:47:09,650 --> 00:47:16,240
anything you want so far as it has any

1127
00:47:12,230 --> 00:47:19,609
event type a timestamp that might be it

1128
00:47:16,240 --> 00:47:22,729
but other than that the language is just

1129
00:47:19,609 --> 00:47:25,210
reading the keys of a JSON object so as

1130
00:47:22,730 --> 00:47:27,829
long as you have these basic keys around

1131
00:47:25,210 --> 00:47:30,170
you might have to tie a process ID to it

1132
00:47:27,829 --> 00:47:32,390
too but when once you have those basic

1133
00:47:30,170 --> 00:47:33,670
things you can put whatever decorations

1134
00:47:32,390 --> 00:47:37,359
around your data that you'd like to

1135
00:47:33,670 --> 00:47:37,359
thank you very much ship

1136
00:47:40,119 --> 00:47:46,250
when you have a Jason which has the list

1137
00:47:43,970 --> 00:47:48,649
of events without having to categorize

1138
00:47:46,250 --> 00:47:50,630
for the event type if we have to convert

1139
00:47:48,650 --> 00:47:54,380
to binary what formats would you suggest

1140
00:47:50,630 --> 00:47:56,450
if you have to convert JSON to binary do

1141
00:47:54,380 --> 00:48:00,110
a vector do we pass to the Modi Oh for

1142
00:47:56,450 --> 00:48:01,640
the machine learning huh okay so okay

1143
00:48:00,110 --> 00:48:03,320
one more time so for the mission in the

1144
00:48:01,640 --> 00:48:05,089
model five a JSON blob and I'm gonna

1145
00:48:03,320 --> 00:48:07,400
convert that for the machine learning

1146
00:48:05,090 --> 00:48:11,210
model what do you do is that the

1147
00:48:07,400 --> 00:48:12,980
question yeah yeah so again you you

1148
00:48:11,210 --> 00:48:14,360
would have to I'm happy to talk in more

1149
00:48:12,980 --> 00:48:16,730
detail but you'd have to come up with a

1150
00:48:14,360 --> 00:48:18,440
way to transfer all of that each each

1151
00:48:16,730 --> 00:48:20,720
structure and the JSON block with many

1152
00:48:18,440 --> 00:48:22,610
fields take them in the order a

1153
00:48:20,720 --> 00:48:26,390
predefined order maybe alphabetical

1154
00:48:22,610 --> 00:48:28,580
order and for each P spit out a unique

1155
00:48:26,390 --> 00:48:32,060
vector and concatenate them all together

1156
00:48:28,580 --> 00:48:36,290
so I have one vector of numbers and that

1157
00:48:32,060 --> 00:48:39,650
is mostly art not science so my question

1158
00:48:36,290 --> 00:48:42,140
is like are there any factors that can

1159
00:48:39,650 --> 00:48:44,570
affect the way the model behaves the is

1160
00:48:42,140 --> 00:48:46,790
choosing my vector or the structure of

1161
00:48:44,570 --> 00:48:49,190
my vector with respect to ordering or

1162
00:48:46,790 --> 00:48:50,960
structuring the events and their

1163
00:48:49,190 --> 00:48:53,420
relative importance does it really

1164
00:48:50,960 --> 00:48:56,510
affect or if it affects to what extent

1165
00:48:53,420 --> 00:48:58,340
does it affect the model yeah it does

1166
00:48:56,510 --> 00:49:01,070
particular model you chose it so it

1167
00:48:58,340 --> 00:49:02,630
certainly affects it the things that

1168
00:49:01,070 --> 00:49:04,520
this model cared most about actually

1169
00:49:02,630 --> 00:49:06,680
whether there was two parts that are

1170
00:49:04,520 --> 00:49:10,400
that I told the model to care about it

1171
00:49:06,680 --> 00:49:11,990
was the event type and the context so

1172
00:49:10,400 --> 00:49:14,150
that would be like file create events

1173
00:49:11,990 --> 00:49:17,299
and what's the file name and extension

1174
00:49:14,150 --> 00:49:19,369
right the thing he cared most about was

1175
00:49:17,300 --> 00:49:22,310
just the event type right and the

1176
00:49:19,369 --> 00:49:24,200
context was was of less importance and

1177
00:49:22,310 --> 00:49:27,500
that could be an indicator that I didn't

1178
00:49:24,200 --> 00:49:29,180
do a very careful enough job to define

1179
00:49:27,500 --> 00:49:31,340
what you're saying taking no I

1180
00:49:29,180 --> 00:49:35,419
understand that is why the mindless

1181
00:49:31,340 --> 00:49:37,040
machine part was put into this process I

1182
00:49:35,420 --> 00:49:40,070
was just thinking could it be

1183
00:49:37,040 --> 00:49:44,509
generalized not for just ransom there

1184
00:49:40,070 --> 00:49:46,609
but a wide variety of malicious events

1185
00:49:44,510 --> 00:49:47,030
to be detected for patterns absolutely

1186
00:49:46,609 --> 00:49:49,310
yeah

1187
00:49:47,030 --> 00:49:52,280
ransom or assisting interesting case I

1188
00:49:49,310 --> 00:49:52,900
used ransom er because everybody knows

1189
00:49:52,280 --> 00:49:54,700
ransom

1190
00:49:52,900 --> 00:49:56,350
they see it when you see the events you

1191
00:49:54,700 --> 00:49:58,480
know what's happening other malicious

1192
00:49:56,350 --> 00:50:00,069
activity is is harder so ransomware was

1193
00:49:58,480 --> 00:50:03,190
just an interesting case study for this

1194
00:50:00,070 --> 00:50:04,360
talk but in reality what were you and I

1195
00:50:03,190 --> 00:50:06,430
are interested in what we're doing in

1196
00:50:04,360 --> 00:50:09,030
game is it's not just ransomware there's

1197
00:50:06,430 --> 00:50:12,430
lots of attack matter so for take every

1198
00:50:09,030 --> 00:50:14,080
malicious script on atomic read can I

1199
00:50:12,430 --> 00:50:16,830
build a model to detect those the answer

1200
00:50:14,080 --> 00:50:22,620
is yes thank you yeah

1201
00:50:16,830 --> 00:50:22,620
any other questions thank you

