1
00:00:02,669 --> 00:00:09,129
hi everyone my name is Lavar thanks a

2
00:00:06,819 --> 00:00:14,620
lot for coming down to the stock I can

3
00:00:09,129 --> 00:00:16,299
see it's very crowded but try and you

4
00:00:14,620 --> 00:00:18,070
know make yourself as comfortable as you

5
00:00:16,299 --> 00:00:20,020
possibly can it's good to see that you

6
00:00:18,070 --> 00:00:21,430
have left some room here so that if

7
00:00:20,020 --> 00:00:23,470
somebody finds the talk really boring

8
00:00:21,430 --> 00:00:24,579
you know they can run run away from here

9
00:00:23,470 --> 00:00:26,648
so that's good

10
00:00:24,579 --> 00:00:29,700
so guys unfortunately Ankita couldn't

11
00:00:26,649 --> 00:00:33,160
make it she had some prior engagements

12
00:00:29,700 --> 00:00:35,410
like this is a flashback talk so at the

13
00:00:33,160 --> 00:00:37,989
last last time I gave it was in 2014

14
00:00:35,410 --> 00:00:39,849
back then Ankita was single after that

15
00:00:37,989 --> 00:00:41,919
she got married and now she is going to

16
00:00:39,850 --> 00:00:44,260
a relative's marriages so you know she

17
00:00:41,920 --> 00:00:47,649
couldn't make it this time so you stuck

18
00:00:44,260 --> 00:00:49,748
with me a little bit about myself I'm

19
00:00:47,649 --> 00:00:51,370
the founder of iron wasp security I

20
00:00:49,749 --> 00:00:53,289
don't know if you heard about iron wasp

21
00:00:51,370 --> 00:00:57,068
it was open source black box scanner I

22
00:00:53,289 --> 00:00:58,569
developed back in 2011 back in the time

23
00:00:57,069 --> 00:01:00,190
when I was still actively developing it

24
00:00:58,569 --> 00:01:02,109
it was very popular one of the best in

25
00:01:00,190 --> 00:01:04,690
the industry I've been a security

26
00:01:02,109 --> 00:01:06,940
researcher and a penetration tester and

27
00:01:04,690 --> 00:01:09,880
I've developed a lot of offensive

28
00:01:06,940 --> 00:01:11,470
security tools and I've developed a

29
00:01:09,880 --> 00:01:12,729
blackbox scanner I think I'm one of the

30
00:01:11,470 --> 00:01:14,710
few people in the industry who has

31
00:01:12,730 --> 00:01:17,230
developed the blackbox scanner which is

32
00:01:14,710 --> 00:01:19,419
a - developed the static code analyzer

33
00:01:17,230 --> 00:01:21,520
which is assessed and also developed the

34
00:01:19,420 --> 00:01:23,260
is product right I have also been a

35
00:01:21,520 --> 00:01:25,089
manual pen tester as well as a security

36
00:01:23,260 --> 00:01:26,770
researcher so I think I have like

37
00:01:25,090 --> 00:01:29,560
touched on different different areas so

38
00:01:26,770 --> 00:01:33,340
I'm probably a little qualified to you

39
00:01:29,560 --> 00:01:35,080
know give this talk before we you know

40
00:01:33,340 --> 00:01:37,300
get started I would just like to

41
00:01:35,080 --> 00:01:38,890
understand the audience a little bit how

42
00:01:37,300 --> 00:01:42,210
many of you work in consulting firms

43
00:01:38,890 --> 00:01:45,160
Europe and testing and consulting firms

44
00:01:42,210 --> 00:01:47,259
okay how many of you work in actual

45
00:01:45,160 --> 00:01:49,000
product companies you do internal pen

46
00:01:47,260 --> 00:01:51,580
testing for your product which you

47
00:01:49,000 --> 00:01:53,590
developed internally okay that's good

48
00:01:51,580 --> 00:01:55,660
because this talk would actually make

49
00:01:53,590 --> 00:01:57,460
more sense if you were working for a

50
00:01:55,660 --> 00:01:59,229
product company where vessels if you are

51
00:01:57,460 --> 00:02:01,059
a consultant you know who's doing pen

52
00:01:59,230 --> 00:02:03,960
testing for somebody else right so just

53
00:02:01,060 --> 00:02:06,970
setting that expectation for you now

54
00:02:03,960 --> 00:02:09,098
while we look at you know before we get

55
00:02:06,970 --> 00:02:11,769
started in the talk I would you know

56
00:02:09,098 --> 00:02:14,560
want to like clarify a few terms I'm

57
00:02:11,769 --> 00:02:16,300
gonna use - in multiple places now by -

58
00:02:14,560 --> 00:02:18,340
I basically mean a black box can

59
00:02:16,300 --> 00:02:21,130
similar to bub suit you know AppScan at

60
00:02:18,340 --> 00:02:23,170
Winnett exem sassed is a static code

61
00:02:21,130 --> 00:02:26,109
analyzer like check marks where a code

62
00:02:23,170 --> 00:02:27,459
and the likes and i asked is interactive

63
00:02:26,110 --> 00:02:29,020
application security testing I'll

64
00:02:27,460 --> 00:02:30,430
explain what I asked is and how they

65
00:02:29,020 --> 00:02:34,330
work a little later in the talk right

66
00:02:30,430 --> 00:02:36,040
okay so when we talk about danced as a

67
00:02:34,330 --> 00:02:39,400
person who has done both manual testing

68
00:02:36,040 --> 00:02:41,560
who has led teams of testers and who has

69
00:02:39,400 --> 00:02:43,570
also developed a blackbox kennel you

70
00:02:41,560 --> 00:02:46,450
know I would say that a dashed bass

71
00:02:43,570 --> 00:02:48,400
vulnerability scanner is on average more

72
00:02:46,450 --> 00:02:49,899
efficient more effective faster and

73
00:02:48,400 --> 00:02:51,280
cheaper than a manual tester right I

74
00:02:49,900 --> 00:02:54,040
mean I'm essentially saying that it's

75
00:02:51,280 --> 00:02:55,210
better on average than a human tester

76
00:02:54,040 --> 00:02:57,429
which is a controversial statement

77
00:02:55,210 --> 00:02:58,870
because obviously human testers have

78
00:02:57,430 --> 00:03:01,030
more intelligence than an automated

79
00:02:58,870 --> 00:03:03,130
scanner has but again for certain

80
00:03:01,030 --> 00:03:04,570
category of vulnerabilities when you

81
00:03:03,130 --> 00:03:06,430
look at the number of combinations which

82
00:03:04,570 --> 00:03:07,959
an automated scanner will look for this

83
00:03:06,430 --> 00:03:10,960
is what a manual tester will look for

84
00:03:07,960 --> 00:03:12,610
and then when you factor in the the

85
00:03:10,960 --> 00:03:14,230
distribution of skill which is you have

86
00:03:12,610 --> 00:03:16,000
highly skilled testers and then you have

87
00:03:14,230 --> 00:03:18,489
you know testers with low level of skill

88
00:03:16,000 --> 00:03:20,410
and you have testers who are good and

89
00:03:18,490 --> 00:03:21,370
say one pass of vulnerabilities but not

90
00:03:20,410 --> 00:03:22,810
so good in another class of

91
00:03:21,370 --> 00:03:24,130
vulnerability like for example you might

92
00:03:22,810 --> 00:03:26,230
have someone who has a lot of expertise

93
00:03:24,130 --> 00:03:27,670
in sequel injection but they not be the

94
00:03:26,230 --> 00:03:29,380
you know they might not be very good in

95
00:03:27,670 --> 00:03:30,790
discovering another point of another

96
00:03:29,380 --> 00:03:32,950
type of issue like cross-site scripting

97
00:03:30,790 --> 00:03:35,290
for example right so when you factor in

98
00:03:32,950 --> 00:03:38,320
all of those variations I would say that

99
00:03:35,290 --> 00:03:40,900
automated scanner is on average much

100
00:03:38,320 --> 00:03:42,910
better than a manual tester okay but

101
00:03:40,900 --> 00:03:45,540
then again there's a problem which is

102
00:03:42,910 --> 00:03:48,520
when it comes to coverage if you cannot

103
00:03:45,540 --> 00:03:50,410
access a particular section of a site

104
00:03:48,520 --> 00:03:51,730
then you cannot then automated scanner

105
00:03:50,410 --> 00:03:53,200
cannot even test it right like for

106
00:03:51,730 --> 00:03:55,899
example if you cannot see it then you

107
00:03:53,200 --> 00:03:58,149
cannot analyze it at all and when I say

108
00:03:55,900 --> 00:04:00,240
coverage I'm talking about discovering

109
00:03:58,150 --> 00:04:02,650
functionality on the site for example

110
00:04:00,240 --> 00:04:06,340
let's take the case of you know this

111
00:04:02,650 --> 00:04:08,140
side yatra right so here you have you

112
00:04:06,340 --> 00:04:09,430
know like a like a small functionality

113
00:04:08,140 --> 00:04:12,369
which is you will have to select a from

114
00:04:09,430 --> 00:04:13,660
and to destination of where you want to

115
00:04:12,370 --> 00:04:15,910
fly and then you will have to select a

116
00:04:13,660 --> 00:04:18,310
departure date under return date right

117
00:04:15,910 --> 00:04:20,918
so this is a simple functionality for a

118
00:04:18,310 --> 00:04:22,780
manual tester to access but then if a

119
00:04:20,918 --> 00:04:24,940
tool were to automatically crawl to the

120
00:04:22,780 --> 00:04:27,070
section of your site then it would not

121
00:04:24,940 --> 00:04:29,320
be able to populate it properly right

122
00:04:27,070 --> 00:04:30,580
for example it might not pick it might

123
00:04:29,320 --> 00:04:32,080
pick up someone too

124
00:04:30,580 --> 00:04:33,760
destination where there are no flights

125
00:04:32,080 --> 00:04:35,590
at all and then when you click on book

126
00:04:33,760 --> 00:04:37,840
flights the functionality might not work

127
00:04:35,590 --> 00:04:40,210
at all and if it look if it's picking a

128
00:04:37,840 --> 00:04:42,369
departure and return date it might pick

129
00:04:40,210 --> 00:04:44,440
a return date which is probably earlier

130
00:04:42,370 --> 00:04:45,820
than the depositing right so it might do

131
00:04:44,440 --> 00:04:47,350
things like this because of which it

132
00:04:45,820 --> 00:04:49,060
might not be able to get to the next

133
00:04:47,350 --> 00:04:50,980
section of the site and then everything

134
00:04:49,060 --> 00:04:54,760
after that is you know completely lost

135
00:04:50,980 --> 00:04:56,410
so an automated a tester a dash tester

136
00:04:54,760 --> 00:04:58,599
which does crawling and it's trying to

137
00:04:56,410 --> 00:05:01,390
discover your site cannot get past this

138
00:04:58,600 --> 00:05:04,510
particular section of your site and then

139
00:05:01,390 --> 00:05:07,000
even if you do trigger your

140
00:05:04,510 --> 00:05:08,560
functionality right then what kind of

141
00:05:07,000 --> 00:05:11,140
data you sent to that functionality is

142
00:05:08,560 --> 00:05:12,820
also equally important for example let's

143
00:05:11,140 --> 00:05:16,050
take a simple login form it's asking you

144
00:05:12,820 --> 00:05:18,280
for username and password

145
00:05:16,050 --> 00:05:20,620
I'll stand a little to the side so I

146
00:05:18,280 --> 00:05:23,140
don't block the projector okay it's

147
00:05:20,620 --> 00:05:24,610
asking for user name and password and if

148
00:05:23,140 --> 00:05:26,229
you're a manual tester you know you're

149
00:05:24,610 --> 00:05:27,820
going to try single code or one equal to

150
00:05:26,230 --> 00:05:29,230
1 or payload similar to that and if you

151
00:05:27,820 --> 00:05:31,420
if you are running an automated scanner

152
00:05:29,230 --> 00:05:34,270
that's also going to try payload similar

153
00:05:31,420 --> 00:05:37,780
to this ok it should work in a lot of

154
00:05:34,270 --> 00:05:39,609
cases but what if the functionality is

155
00:05:37,780 --> 00:05:41,020
written like this which is the

156
00:05:39,610 --> 00:05:42,580
application is first checking if the

157
00:05:41,020 --> 00:05:44,590
username is in the form of an email

158
00:05:42,580 --> 00:05:46,599
right and it's not in the form of any

159
00:05:44,590 --> 00:05:48,130
email it's in the form of an email of

160
00:05:46,600 --> 00:05:49,710
that particular company right so for

161
00:05:48,130 --> 00:05:52,150
example if you work for the flipkart.com

162
00:05:49,710 --> 00:05:53,799
then the logic checks if the email

163
00:05:52,150 --> 00:05:55,599
address is actually you know at the rate

164
00:05:53,800 --> 00:05:57,460
flipkart.com right only then it actually

165
00:05:55,600 --> 00:06:00,280
put proceeds to put it in a sequel

166
00:05:57,460 --> 00:06:02,560
injection sorry a sequel query in that

167
00:06:00,280 --> 00:06:04,960
case only if your payload is in a

168
00:06:02,560 --> 00:06:06,790
certain format you know will that well

169
00:06:04,960 --> 00:06:10,780
is ability even get triggered and an

170
00:06:06,790 --> 00:06:12,670
automated automated tool not might not

171
00:06:10,780 --> 00:06:14,770
be will not be able to you know know

172
00:06:12,670 --> 00:06:16,990
this because it doesn't have that you

173
00:06:14,770 --> 00:06:19,570
know knowledge about that particular

174
00:06:16,990 --> 00:06:22,150
application right so this way you have

175
00:06:19,570 --> 00:06:23,950
another problem which is even if you do

176
00:06:22,150 --> 00:06:25,330
crawl and get to a section of the site

177
00:06:23,950 --> 00:06:26,920
just because you don't know what is the

178
00:06:25,330 --> 00:06:28,810
right data to populate into that field

179
00:06:26,920 --> 00:06:30,190
you might not trigger that you know

180
00:06:28,810 --> 00:06:32,380
functionality so even though the

181
00:06:30,190 --> 00:06:33,910
scanners logic is really good at night

182
00:06:32,380 --> 00:06:38,320
what it might not be able to discover

183
00:06:33,910 --> 00:06:41,410
dwellin abilities there ok so I on

184
00:06:38,320 --> 00:06:43,240
Ankita we you know back then she was a

185
00:06:41,410 --> 00:06:43,689
functional tester so she was doing

186
00:06:43,240 --> 00:06:46,659
Selenia

187
00:06:43,689 --> 00:06:48,099
the test automation I was developing I

188
00:06:46,659 --> 00:06:51,308
nos which was openSUSE

189
00:06:48,099 --> 00:06:52,719
- scandal so I you know I had faced this

190
00:06:51,309 --> 00:06:55,360
problem I was trying to get better

191
00:06:52,719 --> 00:06:57,308
coverage through my crawling and she

192
00:06:55,360 --> 00:06:59,229
came to null meet in Chennai so you know

193
00:06:57,309 --> 00:07:02,199
we spoke with each other and we are like

194
00:06:59,229 --> 00:07:04,449
hey I mean you have a functional test

195
00:07:02,199 --> 00:07:05,949
case which has you know all knowledge

196
00:07:04,449 --> 00:07:07,899
about you know the different sections of

197
00:07:05,949 --> 00:07:09,999
the site right which has been filled in

198
00:07:07,899 --> 00:07:12,279
by the by a dedicated team either of

199
00:07:09,999 --> 00:07:13,719
developers or of testers and then it's

200
00:07:12,279 --> 00:07:16,089
accessing these sections of the site

201
00:07:13,719 --> 00:07:17,498
with actual valid data right so both the

202
00:07:16,089 --> 00:07:20,559
problems I faced with an automated

203
00:07:17,499 --> 00:07:22,029
crawling gets is in some way present

204
00:07:20,559 --> 00:07:23,739
inside these functional test cases

205
00:07:22,029 --> 00:07:25,360
if only I could like take it and make

206
00:07:23,739 --> 00:07:26,919
use of it from my scanner I can you know

207
00:07:25,360 --> 00:07:29,469
like get the best of both worlds right

208
00:07:26,919 --> 00:07:32,198
so we try to do a marriage between iron

209
00:07:29,469 --> 00:07:33,699
wasp and functional test cases I expose

210
00:07:32,199 --> 00:07:35,379
some ApS from with an eye on wasps which

211
00:07:33,699 --> 00:07:36,909
can be called from the selenium script

212
00:07:35,379 --> 00:07:38,379
so essentially what will happen is you

213
00:07:36,909 --> 00:07:40,779
run your selenium scripts through iron

214
00:07:38,379 --> 00:07:42,669
was and I Anna was put in some ways kind

215
00:07:40,779 --> 00:07:44,199
of record those scripts and then it will

216
00:07:42,669 --> 00:07:46,239
replay it and it will do the scan right

217
00:07:44,199 --> 00:07:50,529
so that's what we ended up achieving and

218
00:07:46,239 --> 00:07:55,209
it had good results it had good interest

219
00:07:50,529 --> 00:07:56,829
as well from users so we got better scan

220
00:07:55,209 --> 00:07:58,719
results when compared to just you know

221
00:07:56,829 --> 00:08:01,809
normal crawling by doing this marriage

222
00:07:58,719 --> 00:08:04,269
but then again it has its downsides as

223
00:08:01,809 --> 00:08:06,849
well it wasn't perfect which is one is

224
00:08:04,269 --> 00:08:08,529
about stale data which is to say that

225
00:08:06,849 --> 00:08:11,409
you know you can run the test case once

226
00:08:08,529 --> 00:08:13,029
but there are certain sections of the of

227
00:08:11,409 --> 00:08:15,188
the application where once you send a

228
00:08:13,029 --> 00:08:17,558
data then it became stale right so if we

229
00:08:15,189 --> 00:08:18,459
want to resend it again because if

230
00:08:17,559 --> 00:08:21,610
you're looking at a vulnerability

231
00:08:18,459 --> 00:08:23,800
scanner ion was for example just for

232
00:08:21,610 --> 00:08:25,599
doing sequel injection vulnerability

233
00:08:23,800 --> 00:08:28,989
detection it used to send at a minimum

234
00:08:25,599 --> 00:08:30,489
of 50 to 60 payloads right and if the

235
00:08:28,989 --> 00:08:32,348
application behaves in a certain way

236
00:08:30,489 --> 00:08:34,750
then it will start probing more so it

237
00:08:32,349 --> 00:08:36,939
could send up to 120 payloads per

238
00:08:34,750 --> 00:08:38,438
parameter just for one vulnerability

239
00:08:36,938 --> 00:08:40,299
which is sequel injection right and if

240
00:08:38,438 --> 00:08:42,519
you factor on all the other different

241
00:08:40,299 --> 00:08:44,228
vulnerabilities you have you're sending

242
00:08:42,519 --> 00:08:47,110
you know hundreds of different payloads

243
00:08:44,229 --> 00:08:48,759
for every parameter and if you take one

244
00:08:47,110 --> 00:08:50,649
request then you have several parameters

245
00:08:48,759 --> 00:08:53,470
right Soviet we are sending thousands of

246
00:08:50,649 --> 00:08:57,220
requests just to scan one you know like

247
00:08:53,470 --> 00:08:57,850
page in your application so if after the

248
00:08:57,220 --> 00:08:59,709
first viewer time

249
00:08:57,850 --> 00:09:01,209
if your data becomes stale then the rest

250
00:08:59,709 --> 00:09:02,589
of the scan doesn't really trigger the

251
00:09:01,209 --> 00:09:05,109
functionality so you know it just goes

252
00:09:02,589 --> 00:09:07,269
blind and then you have state change

253
00:09:05,110 --> 00:09:09,310
again you know you sin you make a

254
00:09:07,269 --> 00:09:10,930
request and then you know something

255
00:09:09,310 --> 00:09:12,489
changes in the application so you will

256
00:09:10,930 --> 00:09:14,800
have to refresh and send like for

257
00:09:12,490 --> 00:09:17,050
example a CSRF token if you don't handle

258
00:09:14,800 --> 00:09:19,689
that properly then you know it's of no

259
00:09:17,050 --> 00:09:22,990
use session management and scanning pain

260
00:09:19,690 --> 00:09:24,639
like I said because we are sending a lot

261
00:09:22,990 --> 00:09:26,589
of different payloads thousands of

262
00:09:24,639 --> 00:09:30,639
payloads in fact so the scanning time is

263
00:09:26,589 --> 00:09:33,370
really long so to manage session if I

264
00:09:30,639 --> 00:09:35,410
were to like say you know replay the

265
00:09:33,370 --> 00:09:37,540
selenium test case to get a fresh

266
00:09:35,410 --> 00:09:39,930
session and then do a scan again then it

267
00:09:37,540 --> 00:09:42,550
exponentially increase my scanning time

268
00:09:39,930 --> 00:09:45,219
okay so these were some downsides

269
00:09:42,550 --> 00:09:47,290
we actually saw by you know even after

270
00:09:45,220 --> 00:09:48,880
doing this combination of automated

271
00:09:47,290 --> 00:09:51,519
selenium test cases as well as the -

272
00:09:48,880 --> 00:09:53,319
baster scanning and since then software

273
00:09:51,519 --> 00:09:56,139
development has evolved as well as most

274
00:09:53,319 --> 00:09:57,449
of you know we are an era of you know

275
00:09:56,139 --> 00:09:59,949
continuous integration and continuous

276
00:09:57,449 --> 00:10:01,990
development and deployment so

277
00:09:59,949 --> 00:10:04,870
essentially what happens is your

278
00:10:01,990 --> 00:10:06,310
developers you know now everything has

279
00:10:04,870 --> 00:10:08,290
moved to the cloud you're not pushing

280
00:10:06,310 --> 00:10:10,089
you know like monolithic pieces of

281
00:10:08,290 --> 00:10:12,130
software anymore everything runs on the

282
00:10:10,089 --> 00:10:14,110
cloud and it gets deployed there you

283
00:10:12,130 --> 00:10:17,019
know in a very continuous agile manner

284
00:10:14,110 --> 00:10:18,819
so every time a developer he writes a

285
00:10:17,019 --> 00:10:21,579
new piece of functionality he pushes her

286
00:10:18,819 --> 00:10:23,589
commit then this commit gets you know it

287
00:10:21,579 --> 00:10:25,000
integrated with the main branch and then

288
00:10:23,589 --> 00:10:26,199
there's a bunch of tests which run

289
00:10:25,000 --> 00:10:28,149
automatically to check if it's

290
00:10:26,199 --> 00:10:30,008
functionally proper and if it's not

291
00:10:28,149 --> 00:10:31,870
breaking any functionality I have the

292
00:10:30,009 --> 00:10:33,550
functional test pass then it gets

293
00:10:31,870 --> 00:10:35,350
deployed in an actual you know

294
00:10:33,550 --> 00:10:37,599
environment and then it gets pushed into

295
00:10:35,350 --> 00:10:41,170
the live environment as well so which is

296
00:10:37,600 --> 00:10:43,660
from the developers machine to running

297
00:10:41,170 --> 00:10:45,670
on a production you know site the whole

298
00:10:43,660 --> 00:10:47,769
process has been completely automated

299
00:10:45,670 --> 00:10:50,410
right and it can happen like in a matter

300
00:10:47,769 --> 00:10:51,970
of a few hours so software development

301
00:10:50,410 --> 00:10:54,569
has changed quite a lot and in this

302
00:10:51,970 --> 00:10:57,130
speed of development you cannot have

303
00:10:54,569 --> 00:11:00,579
manual intervention coming which is to

304
00:10:57,130 --> 00:11:02,949
say that you know earlier you could have

305
00:11:00,579 --> 00:11:04,540
a you can have a combination of your -

306
00:11:02,949 --> 00:11:06,819
as well as manual testing which is you

307
00:11:04,540 --> 00:11:08,469
run an - base Cannell and then you also

308
00:11:06,819 --> 00:11:09,550
do manual testing for those sections of

309
00:11:08,470 --> 00:11:11,050
the site which you think are you know

310
00:11:09,550 --> 00:11:13,990
little complex and you

311
00:11:11,050 --> 00:11:15,339
- might not be able to scan properly but

312
00:11:13,990 --> 00:11:17,380
right now with the spirit of software

313
00:11:15,339 --> 00:11:20,050
development that is not not really an

314
00:11:17,380 --> 00:11:22,660
option because you're you're pushing the

315
00:11:20,050 --> 00:11:25,240
code into production almost on a daily

316
00:11:22,660 --> 00:11:28,120
basis and you cannot have your testers

317
00:11:25,240 --> 00:11:29,500
you know come in every time there is a

318
00:11:28,120 --> 00:11:30,910
commit come in and test for that

319
00:11:29,500 --> 00:11:32,500
particular section of the code it just

320
00:11:30,910 --> 00:11:34,569
doesn't work out logistically although

321
00:11:32,500 --> 00:11:36,279
the testers have the skill you could

322
00:11:34,570 --> 00:11:38,170
still do that but just logistically it's

323
00:11:36,279 --> 00:11:43,060
a big the the human element becomes a

324
00:11:38,170 --> 00:11:44,439
big you can say bottleneck so what if we

325
00:11:43,060 --> 00:11:46,029
can magically discovered one of the

326
00:11:44,440 --> 00:11:48,279
abilities just when the functional

327
00:11:46,029 --> 00:11:50,230
testing is happened happening right so

328
00:11:48,279 --> 00:11:52,209
rather than like you know running the

329
00:11:50,230 --> 00:11:53,589
functional test ones and then based on

330
00:11:52,209 --> 00:11:55,089
that get information up with the

331
00:11:53,589 --> 00:11:56,620
application and then put it into a -

332
00:11:55,089 --> 00:11:58,510
scanner and you know run these different

333
00:11:56,620 --> 00:11:59,860
first cases what if while you're

334
00:11:58,510 --> 00:12:01,329
functional testing is happening

335
00:11:59,860 --> 00:12:03,490
what if vulnerabilities could be

336
00:12:01,329 --> 00:12:05,589
detected automatically right that would

337
00:12:03,490 --> 00:12:06,910
be an ideal scenario and that is where

338
00:12:05,589 --> 00:12:08,950
the industry is going as well

339
00:12:06,910 --> 00:12:11,110
and you know that's where I asked

340
00:12:08,950 --> 00:12:12,459
actually comes in right so I asked can

341
00:12:11,110 --> 00:12:15,310
actually enable this for you and I will

342
00:12:12,459 --> 00:12:17,079
explain what I asked is anybody here is

343
00:12:15,310 --> 00:12:20,170
already used I asked in there in the

344
00:12:17,079 --> 00:12:23,199
company you have an iOS product or you

345
00:12:20,170 --> 00:12:24,520
have explored and I asked product I'm

346
00:12:23,200 --> 00:12:26,910
sure somebody would have pitched and I

347
00:12:24,520 --> 00:12:31,510
asked product to you any show of hands

348
00:12:26,910 --> 00:12:34,209
okay - people like see okay nice so I

349
00:12:31,510 --> 00:12:36,520
asked it's probably not that prevalent

350
00:12:34,209 --> 00:12:38,229
it in India I would say but then it's

351
00:12:36,520 --> 00:12:40,120
slowly gaining gaining traction and

352
00:12:38,230 --> 00:12:42,490
that's where the industry is headed as

353
00:12:40,120 --> 00:12:45,190
well and you know you will understand

354
00:12:42,490 --> 00:12:48,610
why so it's an evolution of your dashed

355
00:12:45,190 --> 00:12:50,529
and SAS if you look at your - tools what

356
00:12:48,610 --> 00:12:52,450
they do is they only look at the HTTP

357
00:12:50,529 --> 00:12:54,579
request and response right and they do

358
00:12:52,450 --> 00:12:56,740
all their analysis based on that so for

359
00:12:54,579 --> 00:12:59,050
example you send a request to the server

360
00:12:56,740 --> 00:13:00,970
the server sends back a response and

361
00:12:59,050 --> 00:13:03,370
looking at this request and response you

362
00:13:00,970 --> 00:13:04,600
try to find vulnerabilities but the tool

363
00:13:03,370 --> 00:13:05,770
doesn't know what's happening on the

364
00:13:04,600 --> 00:13:07,420
server it doesn't know what's happening

365
00:13:05,770 --> 00:13:09,550
on the client right so that those are

366
00:13:07,420 --> 00:13:11,380
those are black boxes as far as the tool

367
00:13:09,550 --> 00:13:12,790
is concerned so there's a lot of guests

368
00:13:11,380 --> 00:13:14,649
were going on that's why it has to send

369
00:13:12,790 --> 00:13:16,120
multiple payloads that's why you have

370
00:13:14,649 --> 00:13:19,510
false negatives that's why you have

371
00:13:16,120 --> 00:13:22,000
false positives as well okay but and I a

372
00:13:19,510 --> 00:13:23,439
system is something which is not looking

373
00:13:22,000 --> 00:13:25,059
at the request and response but it

374
00:13:23,440 --> 00:13:29,079
actually sits inside your

375
00:13:25,059 --> 00:13:31,238
application so it you you have a sensor

376
00:13:29,079 --> 00:13:32,978
essentially in most of these cases and

377
00:13:31,239 --> 00:13:34,389
the sensor would either be on on your

378
00:13:32,979 --> 00:13:36,249
suicide or it would be on your client

379
00:13:34,389 --> 00:13:37,959
side and while you are interacting with

380
00:13:36,249 --> 00:13:39,489
the application it can actually see what

381
00:13:37,959 --> 00:13:41,409
is happening inside your application and

382
00:13:39,489 --> 00:13:43,509
that's how it discovers vulnerabilities

383
00:13:41,409 --> 00:13:46,329
and this is the fundamental change when

384
00:13:43,509 --> 00:13:47,799
compared to dashed and sassed so let's

385
00:13:46,329 --> 00:13:49,628
say this is a normal application where

386
00:13:47,799 --> 00:13:51,699
you have a sequel query constructed by

387
00:13:49,629 --> 00:13:53,499
your app taken from user or taken from

388
00:13:51,699 --> 00:13:55,358
somewhere else and then this sequel

389
00:13:53,499 --> 00:13:57,129
query has been put into an execute

390
00:13:55,359 --> 00:13:59,349
sequel statement okay this is a normal

391
00:13:57,129 --> 00:14:01,299
application now let's say this

392
00:13:59,349 --> 00:14:03,129
application is now being you know

393
00:14:01,299 --> 00:14:04,478
monitored by an eye I asked engine right

394
00:14:03,129 --> 00:14:05,559
so the different ways in which and I

395
00:14:04,479 --> 00:14:07,989
asked Indian can attach to your

396
00:14:05,559 --> 00:14:09,759
application but in whichever way if it's

397
00:14:07,989 --> 00:14:12,039
being monitored by an if' engine then

398
00:14:09,759 --> 00:14:14,949
this is what happens which is the is

399
00:14:12,039 --> 00:14:17,079
system will essentially inject itself on

400
00:14:14,949 --> 00:14:19,329
all critical ap ice inside your

401
00:14:17,079 --> 00:14:21,368
application so when there's a sequel

402
00:14:19,329 --> 00:14:23,138
query being executed by your developer

403
00:14:21,369 --> 00:14:25,569
then just before the sequel query is

404
00:14:23,139 --> 00:14:28,299
executed this gets analyzed by the is

405
00:14:25,569 --> 00:14:30,608
system right and by this analysis it

406
00:14:28,299 --> 00:14:31,899
tries to discover vulnerabilities now in

407
00:14:30,609 --> 00:14:33,549
terms of how it will discover the

408
00:14:31,899 --> 00:14:34,839
vulnerabilities through this analysis

409
00:14:33,549 --> 00:14:36,489
there are different ways of doing it and

410
00:14:34,839 --> 00:14:37,989
it depends on the vulnerability category

411
00:14:36,489 --> 00:14:39,609
as well if you're looking at

412
00:14:37,989 --> 00:14:42,999
vulnerabilities like sequel injection

413
00:14:39,609 --> 00:14:44,589
for example now a sequel injection is a

414
00:14:42,999 --> 00:14:46,899
problem if you have untwisted data

415
00:14:44,589 --> 00:14:48,999
coming from in a user controllable

416
00:14:46,899 --> 00:14:50,739
sources and then if it enters into a

417
00:14:48,999 --> 00:14:54,729
sequel query then that's considered a

418
00:14:50,739 --> 00:14:56,919
problem okay and I a system might do

419
00:14:54,729 --> 00:14:59,199
runtime paint analysis which is to say

420
00:14:56,919 --> 00:15:01,539
that whenever an untrusted data is read

421
00:14:59,199 --> 00:15:03,639
it might attach a taint flag to it and

422
00:15:01,539 --> 00:15:04,929
it might propagate the taint flag you

423
00:15:03,639 --> 00:15:07,629
know all through the applications

424
00:15:04,929 --> 00:15:09,039
execution and then when at this point it

425
00:15:07,629 --> 00:15:11,529
sees that the sequel query which is

426
00:15:09,039 --> 00:15:13,809
going into the you know execute

427
00:15:11,529 --> 00:15:15,759
statement that particular API if it sees

428
00:15:13,809 --> 00:15:17,289
that it has the taint flag then it will

429
00:15:15,759 --> 00:15:18,849
say that hey there is actually untrusted

430
00:15:17,289 --> 00:15:20,619
data going into your sequel query and it

431
00:15:18,849 --> 00:15:22,209
might report it as a vulnerability so

432
00:15:20,619 --> 00:15:26,649
that is one type of an ayah system

433
00:15:22,209 --> 00:15:29,018
there's another way is they use static

434
00:15:26,649 --> 00:15:31,389
analysis to actually get this taint

435
00:15:29,019 --> 00:15:33,009
information which is to say that the I a

436
00:15:31,389 --> 00:15:35,619
system would have done a very quick

437
00:15:33,009 --> 00:15:37,299
static analysis of your app so it knows

438
00:15:35,619 --> 00:15:38,680
you know from where data is taken and

439
00:15:37,299 --> 00:15:41,199
where it goes

440
00:15:38,680 --> 00:15:43,149
then it'll correlate it with the actual

441
00:15:41,200 --> 00:15:44,589
runtime data and then it sees that okay

442
00:15:43,149 --> 00:15:47,170
you know for this particular code part

443
00:15:44,589 --> 00:15:49,000
it's actually a tainted data and then

444
00:15:47,170 --> 00:15:52,180
you know from that case it'll see that

445
00:15:49,000 --> 00:15:54,010
okay I'm act as as per my static code

446
00:15:52,180 --> 00:15:56,229
analysis it looks like tainted data

447
00:15:54,010 --> 00:15:58,060
should come here and then in in runtime

448
00:15:56,230 --> 00:16:00,850
it actually sees that you know data from

449
00:15:58,060 --> 00:16:02,170
the request enters there then it kind of

450
00:16:00,850 --> 00:16:03,399
correlates both of them and then it will

451
00:16:02,170 --> 00:16:07,060
report it as a vulnerability for you

452
00:16:03,399 --> 00:16:10,529
right so but in either case because it

453
00:16:07,060 --> 00:16:12,670
relies on runtime data and because it's

454
00:16:10,529 --> 00:16:14,680
doing it when your application is

455
00:16:12,670 --> 00:16:16,630
actually executing you do not have to

456
00:16:14,680 --> 00:16:19,029
send any payloads all you have to do is

457
00:16:16,630 --> 00:16:21,130
access that functionality once and when

458
00:16:19,029 --> 00:16:22,750
that functionality is getting access the

459
00:16:21,130 --> 00:16:25,689
aya system can automatically discover a

460
00:16:22,750 --> 00:16:28,089
vulnerability and report it to you okay

461
00:16:25,690 --> 00:16:30,940
so I assist M can find issues which are

462
00:16:28,089 --> 00:16:32,680
missed by - which is you know one is the

463
00:16:30,940 --> 00:16:34,990
issues - will missed because it's not

464
00:16:32,680 --> 00:16:36,130
able to get proper coverage that when

465
00:16:34,990 --> 00:16:38,920
you are just running a functional test

466
00:16:36,130 --> 00:16:40,660
cases the air system can find out the

467
00:16:38,920 --> 00:16:42,790
other thing is it can find issues from

468
00:16:40,660 --> 00:16:44,560
categories entire categories which a -

469
00:16:42,790 --> 00:16:45,750
system cannot even look for I'll just

470
00:16:44,560 --> 00:16:49,839
talk about it a little later

471
00:16:45,750 --> 00:16:51,580
and in these categories which a - system

472
00:16:49,839 --> 00:16:53,260
doesn't look for vulnerabilities your

473
00:16:51,580 --> 00:16:55,300
sassed tool might pick up

474
00:16:53,260 --> 00:16:57,580
vulnerabilities like these but then I

475
00:16:55,300 --> 00:16:58,900
asked performs better than SAS also in

476
00:16:57,580 --> 00:17:03,820
certain cases I'll just give you a few

477
00:16:58,900 --> 00:17:05,740
examples for example you have you know

478
00:17:03,820 --> 00:17:07,959
issues which will which will rely on

479
00:17:05,740 --> 00:17:11,020
runtime data to actually discover if

480
00:17:07,959 --> 00:17:12,400
it's a problem like for example here can

481
00:17:11,020 --> 00:17:13,990
you see if this is actually a

482
00:17:12,400 --> 00:17:16,540
vulnerability now look at this piece of

483
00:17:13,990 --> 00:17:18,760
code and tell me if you think this is

484
00:17:16,540 --> 00:17:24,720
vulnerable let's say you're doing a you

485
00:17:18,760 --> 00:17:30,820
know a manual code review here sorry

486
00:17:24,720 --> 00:17:32,830
timing attacks yeah how is that how is

487
00:17:30,820 --> 00:17:41,500
it scible - timing attacks I don't get

488
00:17:32,830 --> 00:17:45,629
it no there's no comparison here no

489
00:17:41,500 --> 00:17:45,630
compiler yeah that's the same yeah

490
00:17:45,690 --> 00:17:50,730
right right yeah which is just by

491
00:17:48,840 --> 00:17:52,350
looking at this code you cannot say what

492
00:17:50,730 --> 00:17:53,880
algorithm is being used for hashing

493
00:17:52,350 --> 00:17:56,370
right because that information is being

494
00:17:53,880 --> 00:17:58,830
read from a text file and that it takes

495
00:17:56,370 --> 00:18:00,989
file might differ depending on the

496
00:17:58,830 --> 00:18:02,460
environment you know for example in in

497
00:18:00,990 --> 00:18:04,530
the local developers machine there might

498
00:18:02,460 --> 00:18:05,700
be one text file on your UI T

499
00:18:04,530 --> 00:18:08,129
environment the text file might be

500
00:18:05,700 --> 00:18:10,260
different so this information as to what

501
00:18:08,130 --> 00:18:13,110
hashing algorithm is used is only

502
00:18:10,260 --> 00:18:14,760
available during runtime right and a

503
00:18:13,110 --> 00:18:16,620
static code analyzer cannot pick this up

504
00:18:14,760 --> 00:18:18,840
and because it's a crypto related

505
00:18:16,620 --> 00:18:22,070
vulnerability a dash tool is never going

506
00:18:18,840 --> 00:18:25,050
to pick it up anyway right so but then

507
00:18:22,070 --> 00:18:26,909
because the Nyhus tool actually hooks

508
00:18:25,050 --> 00:18:28,919
itself in to all the critical api s--

509
00:18:26,910 --> 00:18:30,900
and it knows what parameters are being

510
00:18:28,920 --> 00:18:33,600
passed to those api's so whenever that

511
00:18:30,900 --> 00:18:35,460
particular API is called at runtime

512
00:18:33,600 --> 00:18:37,169
whatever algorithm order a string is

513
00:18:35,460 --> 00:18:38,670
passed as the algorithm the aya system

514
00:18:37,170 --> 00:18:40,380
will know about it and then it can tell

515
00:18:38,670 --> 00:18:42,090
you hey you're using an md5 hashing

516
00:18:40,380 --> 00:18:44,550
algorithm or you're using a sha-1

517
00:18:42,090 --> 00:18:45,929
hashing algorithm right so that's one

518
00:18:44,550 --> 00:18:49,919
way in which it can be better than SAS

519
00:18:45,930 --> 00:18:52,320
and then another thing is like this for

520
00:18:49,920 --> 00:18:54,870
example here do you see any problems

521
00:18:52,320 --> 00:18:58,860
let's say your application has a logic

522
00:18:54,870 --> 00:19:03,030
like this do you think this could be a

523
00:18:58,860 --> 00:19:07,040
problem or if you saw this in your

524
00:19:03,030 --> 00:19:09,389
source code review what would you do

525
00:19:07,040 --> 00:19:11,310
you're not able to see it okay

526
00:19:09,390 --> 00:19:14,670
unfortunately I don't think I can do

527
00:19:11,310 --> 00:19:16,740
much about it yeah to make it worse it's

528
00:19:14,670 --> 00:19:20,100
an image I cannot even put it in a

529
00:19:16,740 --> 00:19:22,470
notepad okay so I'll just zero out

530
00:19:20,100 --> 00:19:25,439
what's going on so you take a parameter

531
00:19:22,470 --> 00:19:27,390
from the request and then that's

532
00:19:25,440 --> 00:19:30,320
actually a you know data coming from the

533
00:19:27,390 --> 00:19:33,090
user and what you do is you take a

534
00:19:30,320 --> 00:19:35,280
property from your database and then

535
00:19:33,090 --> 00:19:36,780
that's a URL and what you are doing is

536
00:19:35,280 --> 00:19:38,490
you're saying you're making an HTTP POST

537
00:19:36,780 --> 00:19:40,620
call from your server right you're

538
00:19:38,490 --> 00:19:42,330
calling a service from your server the

539
00:19:40,620 --> 00:19:44,340
URL for that service comes from a

540
00:19:42,330 --> 00:19:46,139
property and then the data that you're

541
00:19:44,340 --> 00:19:48,810
sending to that service actually comes

542
00:19:46,140 --> 00:19:52,520
from the user okay so that's the rough

543
00:19:48,810 --> 00:19:52,520
functionality if you see this

544
00:19:54,700 --> 00:20:00,640
sorry data is not validated ok what's

545
00:19:58,520 --> 00:20:00,639
the other

546
00:20:01,510 --> 00:20:06,140
right so yeah so this data we're putting

547
00:20:04,280 --> 00:20:15,530
it here we are not validating it ok

548
00:20:06,140 --> 00:20:16,970
that's one thing anything else you're

549
00:20:15,530 --> 00:20:18,230
saying the user can you know send

550
00:20:16,970 --> 00:20:20,180
different different kinds of data and

551
00:20:18,230 --> 00:20:27,830
you know like modify what goes in here

552
00:20:20,180 --> 00:20:36,290
ok that is true sorry yeah it puts it in

553
00:20:27,830 --> 00:20:40,520
the body yeah right ok you okay you'll

554
00:20:36,290 --> 00:20:48,850
fuzz this parameter like ok anything

555
00:20:40,520 --> 00:20:48,850
else right right

556
00:20:49,990 --> 00:20:55,130
true true you can you know you can do

557
00:20:52,460 --> 00:20:57,200
all of those things but that's all from

558
00:20:55,130 --> 00:20:58,460
a fuzzing perspective but you know there

559
00:20:57,200 --> 00:21:01,790
was something else I was looking for

560
00:20:58,460 --> 00:21:03,950
which is you are taking data from your

561
00:21:01,790 --> 00:21:06,889
user and you are actually sending it to

562
00:21:03,950 --> 00:21:09,380
another service external service now if

563
00:21:06,890 --> 00:21:11,360
you have like looked at gdpr and things

564
00:21:09,380 --> 00:21:13,670
like that there's a lot of concern about

565
00:21:11,360 --> 00:21:15,620
who you send data to you know if you're

566
00:21:13,670 --> 00:21:17,840
sending data to a third party and that -

567
00:21:15,620 --> 00:21:19,790
if the data is your users data right

568
00:21:17,840 --> 00:21:21,740
sending it to an external service is a

569
00:21:19,790 --> 00:21:23,330
big concern now in this case if you look

570
00:21:21,740 --> 00:21:25,820
at it of course you can further you can

571
00:21:23,330 --> 00:21:28,850
you know you know like first if it's

572
00:21:25,820 --> 00:21:31,010
it's almost like you can say like a

573
00:21:28,850 --> 00:21:33,409
little bit of an SSR of type of an issue

574
00:21:31,010 --> 00:21:34,879
so you can first for that but then you

575
00:21:33,410 --> 00:21:37,220
don't know to whom this data is actually

576
00:21:34,880 --> 00:21:39,890
being sent right so you see a URL which

577
00:21:37,220 --> 00:21:41,150
is being you know read from the DB but

578
00:21:39,890 --> 00:21:42,980
then you don't know who's being sent to

579
00:21:41,150 --> 00:21:45,440
maybe it's a service which is owned by

580
00:21:42,980 --> 00:21:46,820
you or it's an external service it's an

581
00:21:45,440 --> 00:21:49,550
untrusted service you don't really have

582
00:21:46,820 --> 00:21:51,740
that information right so through static

583
00:21:49,550 --> 00:21:53,629
analysis you'll never get to know but

584
00:21:51,740 --> 00:21:55,730
this you can discover at only at runtime

585
00:21:53,630 --> 00:21:56,960
right because at one time an I a system

586
00:21:55,730 --> 00:22:00,110
were actually you know hook into these

587
00:21:56,960 --> 00:22:01,730
IPAs so it will know when this API is

588
00:22:00,110 --> 00:22:04,189
actually called and when this data is

589
00:22:01,730 --> 00:22:06,679
actually sent it can see who that data

590
00:22:04,190 --> 00:22:08,150
is being sent to and it can also see

591
00:22:06,679 --> 00:22:08,510
look at the data that is sent and it can

592
00:22:08,150 --> 00:22:10,010
Ally

593
00:22:08,510 --> 00:22:11,330
determine if there's anything sensitive

594
00:22:10,010 --> 00:22:14,000
there like for example a credit card

595
00:22:11,330 --> 00:22:17,020
information or you know UID or some

596
00:22:14,000 --> 00:22:20,299
other users personal information

597
00:22:17,020 --> 00:22:21,950
okay and it also performs better than

598
00:22:20,299 --> 00:22:24,230
sassed when it comes to dynamic

599
00:22:21,950 --> 00:22:26,090
languages like it's one thing when

600
00:22:24,230 --> 00:22:28,460
you're doing static code analysis on

601
00:22:26,090 --> 00:22:29,449
languages like Java C sharp because you

602
00:22:28,460 --> 00:22:30,860
know these are statically typed

603
00:22:29,450 --> 00:22:32,750
languages they're much more predictable

604
00:22:30,860 --> 00:22:35,590
but then when you're looking at dynamic

605
00:22:32,750 --> 00:22:38,390
languages like you know Ruby Python

606
00:22:35,590 --> 00:22:40,040
nodejs has been a particularly big

607
00:22:38,390 --> 00:22:43,250
problem for static analysis because

608
00:22:40,040 --> 00:22:44,000
everybody is going to note and now

609
00:22:43,250 --> 00:22:45,350
they're left

610
00:22:44,000 --> 00:22:47,210
they are leaving node and they are

611
00:22:45,350 --> 00:22:49,580
actually going to go the hipsters have

612
00:22:47,210 --> 00:22:51,919
moved on but a lot of enterprises are

613
00:22:49,580 --> 00:22:53,418
you know now like a little behind so

614
00:22:51,919 --> 00:22:55,419
then now they are actually shifting to

615
00:22:53,419 --> 00:22:58,760
node.js so you want to see a lot of

616
00:22:55,419 --> 00:23:01,370
JavaScript and you know you can have

617
00:22:58,760 --> 00:23:03,559
these problems with JavaScript where the

618
00:23:01,370 --> 00:23:05,600
static analyzer will look at this and it

619
00:23:03,559 --> 00:23:07,340
wouldn't really know what's going on but

620
00:23:05,600 --> 00:23:08,750
then logically this is actually window

621
00:23:07,340 --> 00:23:09,860
dot post message and you're calling it

622
00:23:08,750 --> 00:23:11,630
with the Aztek keyword which is

623
00:23:09,860 --> 00:23:13,939
essentially you sending a broadcast data

624
00:23:11,630 --> 00:23:15,410
which is considered bad so if it was

625
00:23:13,940 --> 00:23:16,730
written like this your that your sass

626
00:23:15,410 --> 00:23:19,340
system would actually report it as a

627
00:23:16,730 --> 00:23:22,010
vulnerability for you but because it's

628
00:23:19,340 --> 00:23:23,270
written a little differently now of

629
00:23:22,010 --> 00:23:25,460
course here I've tried to you know

630
00:23:23,270 --> 00:23:26,720
purposely make it complex in real world

631
00:23:25,460 --> 00:23:29,120
your developers would not write code

632
00:23:26,720 --> 00:23:31,070
like this but then again in a large code

633
00:23:29,120 --> 00:23:33,290
base it would end up reaching this level

634
00:23:31,070 --> 00:23:34,450
of complexity anyway right so because

635
00:23:33,290 --> 00:23:36,710
it's just three lines I have tried to

636
00:23:34,450 --> 00:23:38,030
push the message the message across I

637
00:23:36,710 --> 00:23:40,790
have made it a little complex here so

638
00:23:38,030 --> 00:23:43,490
then the the point I'm making is that

639
00:23:40,790 --> 00:23:45,020
for dynamic languages your system might

640
00:23:43,490 --> 00:23:46,700
not be able to you know exactly

641
00:23:45,020 --> 00:23:48,500
determine what is going on it cannot do

642
00:23:46,700 --> 00:23:50,330
the paint analysis also properly in a

643
00:23:48,500 --> 00:23:51,559
lot of cases so it will miss a lot of

644
00:23:50,330 --> 00:23:56,178
vulnerabilities and it will give you a

645
00:23:51,559 --> 00:23:58,129
lot of false positives ok and you have

646
00:23:56,179 --> 00:24:00,980
some other complications as well which

647
00:23:58,130 --> 00:24:02,210
is say exercise is the most common code

648
00:24:00,980 --> 00:24:04,700
injection vulnerability so this

649
00:24:02,210 --> 00:24:06,980
information is from the Google's bug

650
00:24:04,700 --> 00:24:07,669
bounty program from they've actually

651
00:24:06,980 --> 00:24:11,330
paid

652
00:24:07,669 --> 00:24:14,750
I think 1.2 million dollars just for the

653
00:24:11,330 --> 00:24:17,120
you know exercise related bugs right as

654
00:24:14,750 --> 00:24:19,010
bounties so exercise is the most common

655
00:24:17,120 --> 00:24:20,600
code injection vulnerability and if

656
00:24:19,010 --> 00:24:22,400
you're looking at exercise then Dom XSS

657
00:24:20,600 --> 00:24:25,939
is the most common very

658
00:24:22,400 --> 00:24:27,380
of excesses okay and it's the most

659
00:24:25,940 --> 00:24:30,590
common variant and it's also the least

660
00:24:27,380 --> 00:24:33,110
tested for variant ironically and then

661
00:24:30,590 --> 00:24:36,320
when you're looking at da mixes the most

662
00:24:33,110 --> 00:24:38,540
common variant of norming success is

663
00:24:36,320 --> 00:24:40,850
when you have untwisted data actually

664
00:24:38,540 --> 00:24:43,220
coming in adjacent response now I have

665
00:24:40,850 --> 00:24:45,320
spoken to multiple pen testers and when

666
00:24:43,220 --> 00:24:47,600
they're looking for excesses they send a

667
00:24:45,320 --> 00:24:49,780
payload you know they see if it gets

668
00:24:47,600 --> 00:24:52,129
reflected in the response and if it's

669
00:24:49,780 --> 00:24:53,600
reflected inside an HTML then you can

670
00:24:52,130 --> 00:24:55,610
easily determine if it's a problem but

671
00:24:53,600 --> 00:24:56,659
what if it gets reflected inside a JSON

672
00:24:55,610 --> 00:24:58,189
response right

673
00:24:56,660 --> 00:25:00,800
now how do you determine if this thing

674
00:24:58,190 --> 00:25:02,570
is actually a problem because that would

675
00:25:00,800 --> 00:25:04,760
depend on how this jason is used like

676
00:25:02,570 --> 00:25:07,010
once this response actually goes to the

677
00:25:04,760 --> 00:25:08,390
browser it depends on whether this jason

678
00:25:07,010 --> 00:25:10,610
is going to be like the value from the

679
00:25:08,390 --> 00:25:12,920
jason if it's put in inside in a text or

680
00:25:10,610 --> 00:25:14,899
put inside inner HTML right or some

681
00:25:12,920 --> 00:25:17,450
other malicious or not malicious some

682
00:25:14,900 --> 00:25:19,700
other dangerous Dom API it would depend

683
00:25:17,450 --> 00:25:21,230
on that but as a tester you don't really

684
00:25:19,700 --> 00:25:22,250
have this information so you cannot say

685
00:25:21,230 --> 00:25:23,600
what's happening and you cannot

686
00:25:22,250 --> 00:25:25,880
determine if this thing is one of the

687
00:25:23,600 --> 00:25:29,090
plan in most applications what you have

688
00:25:25,880 --> 00:25:30,410
is your applications take a lot of data

689
00:25:29,090 --> 00:25:32,750
from different different sources

690
00:25:30,410 --> 00:25:34,730
untwisted data they put all that in your

691
00:25:32,750 --> 00:25:36,559
database and then when you visit your

692
00:25:34,730 --> 00:25:38,179
website all the data the information

693
00:25:36,559 --> 00:25:39,590
from the database is put inside a jason

694
00:25:38,179 --> 00:25:41,540
and it's sent to the browser right and

695
00:25:39,590 --> 00:25:43,129
the browser on the client side will take

696
00:25:41,540 --> 00:25:47,120
data from this jason and it'll display

697
00:25:43,130 --> 00:25:49,490
it on the page for you so that is in

698
00:25:47,120 --> 00:25:51,050
fact like a restored variant of dom

699
00:25:49,490 --> 00:25:53,440
excesses and that i would say is the

700
00:25:51,050 --> 00:25:55,730
most common variant of dom excesses and

701
00:25:53,440 --> 00:25:57,380
unless you know what happens inside the

702
00:25:55,730 --> 00:25:58,790
browser you cannot really determine if

703
00:25:57,380 --> 00:26:00,740
that's so you know if you have Dom

704
00:25:58,790 --> 00:26:03,050
access is there or not the only option

705
00:26:00,740 --> 00:26:05,450
is you will have to start fuzzing the

706
00:26:03,050 --> 00:26:07,580
every single field in the response and

707
00:26:05,450 --> 00:26:09,710
things like responses are not easy to

708
00:26:07,580 --> 00:26:12,050
first you can first the request very

709
00:26:09,710 --> 00:26:14,270
easily right but fuzzing the response is

710
00:26:12,050 --> 00:26:15,860
a whole different story right so some

711
00:26:14,270 --> 00:26:19,040
some injection points are not easily

712
00:26:15,860 --> 00:26:20,780
possible practically almost impossible

713
00:26:19,040 --> 00:26:23,030
to first you know just given the amount

714
00:26:20,780 --> 00:26:24,260
of time and complexity so those kind of

715
00:26:23,030 --> 00:26:25,970
issues you are never going to discover

716
00:26:24,260 --> 00:26:28,460
by using a - tool right so that's

717
00:26:25,970 --> 00:26:30,220
another area where and only an IIST will

718
00:26:28,460 --> 00:26:33,590
be able to discover problems for you

719
00:26:30,220 --> 00:26:35,900
okay so that is about vulnerability

720
00:26:33,590 --> 00:26:36,429
detection through I asked any questions

721
00:26:35,900 --> 00:26:41,030
on that

722
00:26:36,430 --> 00:26:42,860
whatever you've seen no okay that's good

723
00:26:41,030 --> 00:26:46,360
I think we will straight forward all

724
00:26:42,860 --> 00:26:49,250
right so when it comes to your you know

725
00:26:46,360 --> 00:26:52,729
doing security in the CIC be and deficit

726
00:26:49,250 --> 00:26:54,470
cops speed detecting vulnerabilities is

727
00:26:52,730 --> 00:26:55,910
just you know like one aspect of it

728
00:26:54,470 --> 00:26:57,800
because of course you detect wellin

729
00:26:55,910 --> 00:26:59,390
abilities and then based on that you

730
00:26:57,800 --> 00:27:01,310
fail a bill so your developer has to

731
00:26:59,390 --> 00:27:03,110
actually fix it and only then he commits

732
00:27:01,310 --> 00:27:04,570
a new code if no other abilities are

733
00:27:03,110 --> 00:27:07,610
detected they'll be going to production

734
00:27:04,570 --> 00:27:08,870
but then this is always the assumption

735
00:27:07,610 --> 00:27:11,270
that the tool has discovered all

736
00:27:08,870 --> 00:27:12,709
vulnerabilities right but then it the

737
00:27:11,270 --> 00:27:14,720
reality is that no matter how good your

738
00:27:12,710 --> 00:27:16,460
tooling is you're still going to miss a

739
00:27:14,720 --> 00:27:17,300
lot of vulnerabilities right so which

740
00:27:16,460 --> 00:27:19,570
means that you're going to have

741
00:27:17,300 --> 00:27:21,770
production code which will be vulnerable

742
00:27:19,570 --> 00:27:23,570
even simple vulnerabilities in some

743
00:27:21,770 --> 00:27:25,400
cases so it's very important that you

744
00:27:23,570 --> 00:27:27,050
actually have some system which can do

745
00:27:25,400 --> 00:27:28,520
attack monitoring and blocking right so

746
00:27:27,050 --> 00:27:30,290
it's it's not just about detecting

747
00:27:28,520 --> 00:27:31,970
vulnerabilities you also need something

748
00:27:30,290 --> 00:27:34,639
to actually you know monitor for attacks

749
00:27:31,970 --> 00:27:36,320
and block it so this is where rasp

750
00:27:34,640 --> 00:27:39,050
actually comes in are you guys familiar

751
00:27:36,320 --> 00:27:43,220
with the rasp at least okay great

752
00:27:39,050 --> 00:27:45,490
oh yeah that's not a immune you know

753
00:27:43,220 --> 00:27:50,050
something I they got acquired also yes

754
00:27:45,490 --> 00:27:50,050
anybody's using rasp in your companies

755
00:27:54,190 --> 00:28:01,700
okay okay yeah I mean there are two

756
00:27:58,910 --> 00:28:04,310
kinds of rasp but one is an actual rasp

757
00:28:01,700 --> 00:28:05,900
other is a marketing rest sometimes you

758
00:28:04,310 --> 00:28:07,790
know you have one system and then I've

759
00:28:05,900 --> 00:28:10,820
seen it some companies do it I wouldn't

760
00:28:07,790 --> 00:28:13,879
pick names where what they actually do

761
00:28:10,820 --> 00:28:15,320
is you know they like you know they

762
00:28:13,880 --> 00:28:17,600
write the wording in such a way that

763
00:28:15,320 --> 00:28:19,879
they make it some way look like a ties

764
00:28:17,600 --> 00:28:26,120
so I don't know if this thing falls in

765
00:28:19,880 --> 00:28:29,600
that category oh okay that was long back

766
00:28:26,120 --> 00:28:31,070
so so that's please man we are moving

767
00:28:29,600 --> 00:28:32,510
ahead so we have one person in the

768
00:28:31,070 --> 00:28:34,639
audience who's actually using rasp

769
00:28:32,510 --> 00:28:36,470
the others have you considered a rasp

770
00:28:34,640 --> 00:28:38,570
system at least somebody has pitched

771
00:28:36,470 --> 00:28:40,730
their abscess or a system to you you

772
00:28:38,570 --> 00:28:46,040
have looked at it no okay how many of

773
00:28:40,730 --> 00:28:48,260
you have a vas so that's quite a few of

774
00:28:46,040 --> 00:28:49,850
you a lot more how many of you have a

775
00:28:48,260 --> 00:28:51,919
fire one

776
00:28:49,850 --> 00:28:53,809
that's well at least know who is not

777
00:28:51,919 --> 00:28:56,059
raising hands at all for anything right

778
00:28:53,809 --> 00:29:00,799
so I can we subtract that and get the

779
00:28:56,059 --> 00:29:01,879
actual numbers okay so a rasp is an

780
00:29:00,799 --> 00:29:04,100
evolution of your Web Application

781
00:29:01,879 --> 00:29:06,080
Firewall so I I think it's pretty safe

782
00:29:04,100 --> 00:29:07,219
to say that if you are hosting an

783
00:29:06,080 --> 00:29:09,168
application on the Internet

784
00:29:07,220 --> 00:29:10,789
you will have a path of some form even

785
00:29:09,169 --> 00:29:12,440
if you don't have a dedicated path you

786
00:29:10,789 --> 00:29:14,299
know you have your AWS and all they give

787
00:29:12,440 --> 00:29:16,309
you app services or at the very least

788
00:29:14,299 --> 00:29:18,559
you'd be behind cloud fair and upload

789
00:29:16,309 --> 00:29:21,440
file gives you a half service so you

790
00:29:18,559 --> 00:29:23,389
would have some protection like that but

791
00:29:21,440 --> 00:29:25,099
then again valve also only looks at your

792
00:29:23,389 --> 00:29:27,529
HTTP request and response so whatever

793
00:29:25,099 --> 00:29:30,859
problem you're - tool faces in some ways

794
00:29:27,529 --> 00:29:32,479
graph faces that as well but a last

795
00:29:30,859 --> 00:29:33,649
system actually monitors what's

796
00:29:32,479 --> 00:29:37,429
happening inside your app so you can

797
00:29:33,649 --> 00:29:40,939
think of a lass as an equivalent of is

798
00:29:37,429 --> 00:29:43,220
on the protection side right so so this

799
00:29:40,940 --> 00:29:45,590
is where your wrath system sits so which

800
00:29:43,220 --> 00:29:47,899
is it it looks at all the critical api's

801
00:29:45,590 --> 00:29:49,488
and then if it sees you know it looks at

802
00:29:47,899 --> 00:29:51,619
what data is going into those APs and

803
00:29:49,489 --> 00:29:52,820
then it analyzes them so a genomics

804
00:29:51,619 --> 00:29:56,238
company was doing something like this

805
00:29:52,820 --> 00:29:57,769
which is they have for example parsers

806
00:29:56,239 --> 00:30:00,139
written for all the different kinds of

807
00:29:57,769 --> 00:30:02,359
critical API so for example if in this

808
00:30:00,139 --> 00:30:04,639
case sequel they have sequel passes

809
00:30:02,359 --> 00:30:06,619
written high-performance sequel passes

810
00:30:04,639 --> 00:30:08,269
so when they actually see data going

811
00:30:06,619 --> 00:30:10,399
into a sequel query they parse it and

812
00:30:08,269 --> 00:30:12,049
then they see if the sequel query has

813
00:30:10,399 --> 00:30:13,369
anything malicious in it right and if

814
00:30:12,049 --> 00:30:16,009
they see anything malicious they block

815
00:30:13,369 --> 00:30:18,289
it so that is one way of doing it some

816
00:30:16,009 --> 00:30:20,299
other people what they do is before they

817
00:30:18,289 --> 00:30:21,769
actually do the parsing they first see

818
00:30:20,299 --> 00:30:23,389
if the data came from an untrusted

819
00:30:21,769 --> 00:30:25,609
source only if it came from an untrusted

820
00:30:23,389 --> 00:30:26,959
source then they do the parsing and the

821
00:30:25,609 --> 00:30:28,279
determine if there is you know anything

822
00:30:26,960 --> 00:30:30,440
malicious there so there are different

823
00:30:28,279 --> 00:30:32,749
there are slight variations but you know

824
00:30:30,440 --> 00:30:34,399
this is a commonality which is the data

825
00:30:32,749 --> 00:30:36,229
that's going into the critical API the

826
00:30:34,399 --> 00:30:37,248
system will actually look at it and it

827
00:30:36,229 --> 00:30:39,590
will determine if it has anything

828
00:30:37,249 --> 00:30:42,379
malicious and then it will block it now

829
00:30:39,590 --> 00:30:44,418
this gives you advantages because let's

830
00:30:42,379 --> 00:30:46,428
take this case where the client takes an

831
00:30:44,419 --> 00:30:48,769
evil payload it actually base64 encoded

832
00:30:46,429 --> 00:30:50,629
it sends it to your server now just

833
00:30:48,769 --> 00:30:51,950
looks at it when the bath is looking at

834
00:30:50,629 --> 00:30:54,109
it it's actually looking at a base64

835
00:30:51,950 --> 00:30:56,210
encoded data right it's a simple example

836
00:30:54,109 --> 00:30:58,789
and then when it goes to your server

837
00:30:56,210 --> 00:31:00,980
your server actually base64 decodes it

838
00:30:58,789 --> 00:31:02,940
and then it puts it into a sequel query

839
00:31:00,980 --> 00:31:04,770
right now

840
00:31:02,940 --> 00:31:06,540
all systems will miss it of course

841
00:31:04,770 --> 00:31:08,550
there's a simple example where it's

842
00:31:06,540 --> 00:31:09,570
doing a base64 encoding there would be

843
00:31:08,550 --> 00:31:12,149
complex

844
00:31:09,570 --> 00:31:13,740
you know cases as well of course because

845
00:31:12,150 --> 00:31:15,270
I think some rap systems what they're

846
00:31:13,740 --> 00:31:16,710
doing is they try to look for common

847
00:31:15,270 --> 00:31:18,389
forms of encoding and you know they try

848
00:31:16,710 --> 00:31:20,340
and decode it and then do filtering so

849
00:31:18,390 --> 00:31:22,260
they do they try and handle very simple

850
00:31:20,340 --> 00:31:24,209
scenarios but then you'll have more you

851
00:31:22,260 --> 00:31:25,980
know complex scenarios which will get

852
00:31:24,210 --> 00:31:27,780
missed out because the path when it's

853
00:31:25,980 --> 00:31:31,890
looking at the data it's looking at the

854
00:31:27,780 --> 00:31:33,840
data in a different you know place in

855
00:31:31,890 --> 00:31:36,690
the in your execution cycle whereas the

856
00:31:33,840 --> 00:31:38,280
rasp looks at the data in the exact same

857
00:31:36,690 --> 00:31:39,810
form in which it's going to be used by

858
00:31:38,280 --> 00:31:41,520
your application right because when it

859
00:31:39,810 --> 00:31:43,050
it looks at it just before it gets

860
00:31:41,520 --> 00:31:44,610
passed into your sequel query so it

861
00:31:43,050 --> 00:31:46,649
looks at it very accurately so it can

862
00:31:44,610 --> 00:31:50,760
actually do its filtering very

863
00:31:46,650 --> 00:31:51,990
accurately right so a rath system it

864
00:31:50,760 --> 00:31:54,840
actually looks at the basic C for

865
00:31:51,990 --> 00:31:57,030
decoded data right so it so it will not

866
00:31:54,840 --> 00:32:00,270
be able to you know the the payload will

867
00:31:57,030 --> 00:32:03,000
not be able to bypass in this case okay

868
00:32:00,270 --> 00:32:06,420
have you heard of match cut attacks yeah

869
00:32:03,000 --> 00:32:08,520
okay so a few lines of JavaScript code

870
00:32:06,420 --> 00:32:10,280
were able to cause a lot of mayhem and

871
00:32:08,520 --> 00:32:12,150
in some cases it's still going on

872
00:32:10,280 --> 00:32:14,250
different different people have been

873
00:32:12,150 --> 00:32:15,600
getting affected it's almost like a

874
00:32:14,250 --> 00:32:18,240
disease it gets passed around to

875
00:32:15,600 --> 00:32:19,709
different different people so these are

876
00:32:18,240 --> 00:32:23,070
you know some of the companies which got

877
00:32:19,710 --> 00:32:24,360
affected and you know this is some of

878
00:32:23,070 --> 00:32:25,649
the impact in terms of the amount of

879
00:32:24,360 --> 00:32:27,959
credit card information that was

880
00:32:25,650 --> 00:32:30,090
actually lost by these few lines of

881
00:32:27,960 --> 00:32:34,290
JavaScript code but what is most

882
00:32:30,090 --> 00:32:36,149
interesting is this the duration for

883
00:32:34,290 --> 00:32:38,909
which this act attack was actually able

884
00:32:36,150 --> 00:32:40,800
to you know go on for for example in one

885
00:32:38,910 --> 00:32:44,820
case it actually went on for more than

886
00:32:40,800 --> 00:32:46,200
eight months which is you know if if

887
00:32:44,820 --> 00:32:48,480
somebody got to know they were pregnant

888
00:32:46,200 --> 00:32:50,070
when the attack actually took place they

889
00:32:48,480 --> 00:32:51,750
would have had a baby you know and the

890
00:32:50,070 --> 00:32:52,939
attack was still going on which is which

891
00:32:51,750 --> 00:32:56,190
is you know if you think about it

892
00:32:52,940 --> 00:32:58,320
ridiculous the reason why it went on is

893
00:32:56,190 --> 00:33:00,240
because there was no attack monitoring

894
00:32:58,320 --> 00:33:02,310
system in place right one is of course

895
00:33:00,240 --> 00:33:04,260
it it was not picked up in the regular

896
00:33:02,310 --> 00:33:05,340
security testing and code reviews and

897
00:33:04,260 --> 00:33:07,770
all of those things but that's a

898
00:33:05,340 --> 00:33:09,000
different problem but the fact that the

899
00:33:07,770 --> 00:33:10,050
you know irrespective of all of that

900
00:33:09,000 --> 00:33:11,520
they should have been something which

901
00:33:10,050 --> 00:33:14,919
actually picked up you know the attack

902
00:33:11,520 --> 00:33:17,830
itself that didn't happen so

903
00:33:14,920 --> 00:33:19,660
the the message I'm trying to push is

904
00:33:17,830 --> 00:33:21,460
that your protection system should

905
00:33:19,660 --> 00:33:23,500
actually run in the place where your

906
00:33:21,460 --> 00:33:26,200
code is also running right that's the

907
00:33:23,500 --> 00:33:27,970
only because in this case the attack was

908
00:33:26,200 --> 00:33:29,530
on the browser I'm in JavaScript which

909
00:33:27,970 --> 00:33:31,179
was running in the browser so you should

910
00:33:29,530 --> 00:33:33,460
have had a protection mechanism there

911
00:33:31,179 --> 00:33:34,929
then it would have got picked up pretty

912
00:33:33,460 --> 00:33:36,690
easily right so if you don't have it

913
00:33:34,929 --> 00:33:39,309
there you have it at a different

914
00:33:36,690 --> 00:33:42,000
location in your network then you will

915
00:33:39,309 --> 00:33:49,840
miss out you know attacks like this okay

916
00:33:42,000 --> 00:33:51,960
so this should be in the browser but it

917
00:33:49,840 --> 00:33:55,000
should not be something which the user

918
00:33:51,960 --> 00:33:56,860
installs on the browser right but it

919
00:33:55,000 --> 00:33:59,110
should be something which the server

920
00:33:56,860 --> 00:34:02,760
itself since like for example if they

921
00:33:59,110 --> 00:34:04,719
had you know done patching off all their

922
00:34:02,760 --> 00:34:07,059
so if they had a JavaScript library

923
00:34:04,720 --> 00:34:09,760
which will load first before their

924
00:34:07,059 --> 00:34:11,529
regular application code runs right and

925
00:34:09,760 --> 00:34:14,139
this thing actually hooks into all the

926
00:34:11,530 --> 00:34:15,669
Dom API is and it's it's it sees you

927
00:34:14,139 --> 00:34:17,169
know what type of network calls are

928
00:34:15,668 --> 00:34:19,449
being made and to whom it they are being

929
00:34:17,168 --> 00:34:20,618
made there and if it report said you

930
00:34:19,449 --> 00:34:22,928
know if they're being made to a

931
00:34:20,619 --> 00:34:26,109
untrusted source then this would have

932
00:34:22,929 --> 00:34:27,790
got picked up much earlier right so so

933
00:34:26,109 --> 00:34:29,049
I'm saying the protection mechanism

934
00:34:27,790 --> 00:34:30,369
should run in the same place where your

935
00:34:29,050 --> 00:34:32,440
code isn't so for example if you are

936
00:34:30,369 --> 00:34:34,240
writing code which is going to run a

937
00:34:32,440 --> 00:34:36,070
user's browser then you should also have

938
00:34:34,239 --> 00:34:37,118
a protection mechanism Allah sent along

939
00:34:36,070 --> 00:34:39,429
with the code right which is also

940
00:34:37,119 --> 00:34:41,139
running in the same environment right so

941
00:34:39,429 --> 00:34:42,310
so that's essentially what our ass does

942
00:34:41,139 --> 00:34:49,320
which is it runs in the same environment

943
00:34:42,310 --> 00:34:53,710
where your code is executing right okay

944
00:34:49,320 --> 00:34:55,419
mm-hmm right right yeah so they would be

945
00:34:53,710 --> 00:34:57,400
injecting their own JavaScript which it

946
00:34:55,418 --> 00:35:02,830
stands at the start of the you know

947
00:34:57,400 --> 00:35:05,400
application yeah okay so any questions

948
00:35:02,830 --> 00:35:05,400
on ask

949
00:35:05,850 --> 00:35:14,380
uh-huh yes it has to yes you yes yeah so

950
00:35:11,320 --> 00:35:16,930
yeah so there are some concerns there

951
00:35:14,380 --> 00:35:19,570
which is it'll definitely have a

952
00:35:16,930 --> 00:35:22,868
performance impact a little bit that's

953
00:35:19,570 --> 00:35:24,850
there and another concern is also about

954
00:35:22,869 --> 00:35:27,490
a lot of wrath systems the way they work

955
00:35:24,850 --> 00:35:28,690
is you have like an engine which runs in

956
00:35:27,490 --> 00:35:30,939
or a sensor which runs in

957
00:35:28,690 --> 00:35:32,440
your app server and then it'll actually

958
00:35:30,940 --> 00:35:33,940
collect some data and it will send it to

959
00:35:32,440 --> 00:35:36,040
their server which is sitting in their

960
00:35:33,940 --> 00:35:38,800
cloud right and you might have concerns

961
00:35:36,040 --> 00:35:40,150
about your customers data or your you

962
00:35:38,800 --> 00:35:41,920
know user data actually going to take

963
00:35:40,150 --> 00:35:43,390
load that's a concern some of them

964
00:35:41,920 --> 00:35:45,609
actually have an on-prem solution like

965
00:35:43,390 --> 00:35:47,440
hundred percent on from solution so you

966
00:35:45,609 --> 00:35:49,089
know you might have to figure those

967
00:35:47,440 --> 00:35:50,349
things out right so but there are some

968
00:35:49,089 --> 00:35:51,910
concerns in that area from the

969
00:35:50,349 --> 00:35:54,069
performance another thing is also in

970
00:35:51,910 --> 00:35:56,259
terms of will the wrath system actually

971
00:35:54,069 --> 00:35:57,609
breaks some of my functionality you know

972
00:35:56,260 --> 00:36:00,640
that's another concern which is a major

973
00:35:57,609 --> 00:36:02,589
headache where the user like everything

974
00:36:00,640 --> 00:36:04,960
works perfectly for you in your you know

975
00:36:02,589 --> 00:36:07,480
you eighty and everything it goes into

976
00:36:04,960 --> 00:36:09,280
production some functionality is the

977
00:36:07,480 --> 00:36:10,780
user says it's not working for me and

978
00:36:09,280 --> 00:36:12,250
you develop it is not able to debug it

979
00:36:10,780 --> 00:36:15,069
because he is not able to reproduce it

980
00:36:12,250 --> 00:36:16,780
because the you know the behavior has

981
00:36:15,069 --> 00:36:18,880
been introduced by Rask right

982
00:36:16,780 --> 00:36:20,050
so that's another point of concern but

983
00:36:18,880 --> 00:36:21,760
those are trade-offs you will have to do

984
00:36:20,050 --> 00:36:23,829
because of the security benefit that you

985
00:36:21,760 --> 00:36:26,319
get right so you will have to decide to

986
00:36:23,829 --> 00:36:27,670
see the criticality of the application

987
00:36:26,319 --> 00:36:29,290
you're running right based on that you

988
00:36:27,670 --> 00:36:32,440
can decide what is more important for

989
00:36:29,290 --> 00:36:35,259
you and in most vast systems you also

990
00:36:32,440 --> 00:36:37,690
have the ability to you know dynamically

991
00:36:35,260 --> 00:36:39,609
change the configuration which is it'll

992
00:36:37,690 --> 00:36:41,290
start with a default set of rules you

993
00:36:39,609 --> 00:36:42,460
can go in and you can see a you know

994
00:36:41,290 --> 00:36:45,130
what I don't I want to turn off my

995
00:36:42,460 --> 00:36:47,440
sequel injection prediction or you can

996
00:36:45,130 --> 00:36:49,180
even be very fine-grained which is to

997
00:36:47,440 --> 00:36:51,220
say I want to turn off sequel injection

998
00:36:49,180 --> 00:36:53,049
protection for this parameter in this

999
00:36:51,220 --> 00:36:54,549
particular request right because if you

1000
00:36:53,050 --> 00:36:56,290
see a lot of false positives happening

1001
00:36:54,550 --> 00:36:58,000
there you can go in turn of that so that

1002
00:36:56,290 --> 00:37:04,150
configurability option is available for

1003
00:36:58,000 --> 00:37:05,380
you I think now the URL it'll say ok in

1004
00:37:04,150 --> 00:37:07,060
this URL this parameter

1005
00:37:05,380 --> 00:37:08,770
I want a whitelist I don't want my wrath

1006
00:37:07,060 --> 00:37:10,930
system to monitor it at all or you can

1007
00:37:08,770 --> 00:37:12,640
say this particular endpoint I don't

1008
00:37:10,930 --> 00:37:14,859
want my wrath to look at it if it just

1009
00:37:12,640 --> 00:37:17,950
let it pass through right so you can do

1010
00:37:14,859 --> 00:37:20,069
those kind of configurations okay so

1011
00:37:17,950 --> 00:37:22,328
with all of this all of these benefits

1012
00:37:20,069 --> 00:37:23,950
that begs the question you know hey I

1013
00:37:22,329 --> 00:37:25,869
have - stand bass in my environment

1014
00:37:23,950 --> 00:37:30,118
already should I just replace them with

1015
00:37:25,869 --> 00:37:35,079
I asked and ask well I would say no

1016
00:37:30,119 --> 00:37:37,420
because it's still not one is these are

1017
00:37:35,079 --> 00:37:39,910
evolving technologies and another thing

1018
00:37:37,420 --> 00:37:42,580
is let somebody say something

1019
00:37:39,910 --> 00:37:44,470
ok and another thing is that our area

1020
00:37:42,580 --> 00:37:48,100
we're at a store a bath actually does a

1021
00:37:44,470 --> 00:37:49,810
better job than your IIST and last one

1022
00:37:48,100 --> 00:37:52,569
example is I was talking about coverage

1023
00:37:49,810 --> 00:37:55,330
earlier right so I was talking about the

1024
00:37:52,570 --> 00:37:57,010
the coverage of - from a negative

1025
00:37:55,330 --> 00:37:59,020
perspective but then there's also a

1026
00:37:57,010 --> 00:38:01,300
positive aspect to it because if you are

1027
00:37:59,020 --> 00:38:02,920
detecting vulnerabilities - I asked you

1028
00:38:01,300 --> 00:38:04,690
are running your functional test cases

1029
00:38:02,920 --> 00:38:06,370
then it can only discover

1030
00:38:04,690 --> 00:38:08,860
vulnerabilities in those sections of the

1031
00:38:06,370 --> 00:38:12,180
code which are triggered normally

1032
00:38:08,860 --> 00:38:14,650
through legitimate data okay but then a

1033
00:38:12,180 --> 00:38:16,359
- system because it's sending you know

1034
00:38:14,650 --> 00:38:18,700
like lot of malicious data and it's

1035
00:38:16,360 --> 00:38:20,980
sending a lot of unexpected data it

1036
00:38:18,700 --> 00:38:22,720
might trigger unique execution paths in

1037
00:38:20,980 --> 00:38:24,790
your applications code right which might

1038
00:38:22,720 --> 00:38:27,129
not get triggered by a regular

1039
00:38:24,790 --> 00:38:28,750
functional test case and issues in those

1040
00:38:27,130 --> 00:38:30,430
kind of code parts will not get picked

1041
00:38:28,750 --> 00:38:32,710
up by your AIA system right whereas a

1042
00:38:30,430 --> 00:38:36,279
dashed can pick it up for you and

1043
00:38:32,710 --> 00:38:37,720
another thing is because it - works by

1044
00:38:36,280 --> 00:38:41,170
actually hooking into those critical

1045
00:38:37,720 --> 00:38:43,959
api's now if you're using an obscure

1046
00:38:41,170 --> 00:38:46,960
library for you know sequel interaction

1047
00:38:43,960 --> 00:38:49,210
and if you're - Trender I'm sorry your

1048
00:38:46,960 --> 00:38:51,550
Iast vendor does not have knowledge

1049
00:38:49,210 --> 00:38:53,740
about that sequel library then he will

1050
00:38:51,550 --> 00:38:55,240
not hook into that API at all right so

1051
00:38:53,740 --> 00:38:57,850
you might have a very simple vanilla

1052
00:38:55,240 --> 00:38:59,350
sequel injection very easily triggered

1053
00:38:57,850 --> 00:39:01,569
like a - scanner you might pick it up in

1054
00:38:59,350 --> 00:39:03,460
like a minute but just because your is

1055
00:39:01,570 --> 00:39:06,820
system does not recognize that as the

1056
00:39:03,460 --> 00:39:09,130
sequel API it will not hook into it and

1057
00:39:06,820 --> 00:39:12,190
it will actually go undetected right and

1058
00:39:09,130 --> 00:39:15,040
for example if you have a is system for

1059
00:39:12,190 --> 00:39:17,770
Java and then this Java is actually

1060
00:39:15,040 --> 00:39:19,570
calling let's say a native liability

1061
00:39:17,770 --> 00:39:21,640
from within it and if that is not hooked

1062
00:39:19,570 --> 00:39:23,530
by your air system then what abilities

1063
00:39:21,640 --> 00:39:25,240
there might get missed out or if you

1064
00:39:23,530 --> 00:39:27,880
have like say 2 3 components you have a

1065
00:39:25,240 --> 00:39:29,979
Java you have Java service a python

1066
00:39:27,880 --> 00:39:31,750
service and a ruby service but you have

1067
00:39:29,980 --> 00:39:33,670
put is only on one of those services or

1068
00:39:31,750 --> 00:39:34,780
two of those services then you have one

1069
00:39:33,670 --> 00:39:35,800
service which is still not being

1070
00:39:34,780 --> 00:39:39,040
monitored and there might be well

1071
00:39:35,800 --> 00:39:40,660
abilities there right and while you are

1072
00:39:39,040 --> 00:39:41,980
setting up these aya system you might

1073
00:39:40,660 --> 00:39:44,170
not actually know which services are

1074
00:39:41,980 --> 00:39:45,670
being invoked by whom so you might not

1075
00:39:44,170 --> 00:39:47,590
know that oh I have to put IIST in all

1076
00:39:45,670 --> 00:39:50,650
these systems as well so it might get

1077
00:39:47,590 --> 00:39:53,440
missed out but a - scanner can you know

1078
00:39:50,650 --> 00:39:55,450
because it it is not concerned about how

1079
00:39:53,440 --> 00:39:56,680
your application runs it just trying to

1080
00:39:55,450 --> 00:39:58,359
fuzz you from the fly

1081
00:39:56,680 --> 00:39:59,649
it might pick up vulnerabilities in

1082
00:39:58,359 --> 00:40:03,000
those areas right so I'm just saying

1083
00:39:59,650 --> 00:40:03,000
that there's another side to it as well

1084
00:40:10,530 --> 00:40:19,420
oh yeah that's very true because you're

1085
00:40:18,280 --> 00:40:20,859
introducing new code into your

1086
00:40:19,420 --> 00:40:24,780
application so you know you're just

1087
00:40:20,859 --> 00:40:27,700
adding new behavior and it is not oh

1088
00:40:24,780 --> 00:40:29,859
yeah because I'm sure you've all seen

1089
00:40:27,700 --> 00:40:32,500
scenarios make cases where there is a

1090
00:40:29,859 --> 00:40:35,980
vendor and they have an XSS in their own

1091
00:40:32,500 --> 00:40:38,109
raft - boat yeah so I mean so if we

1092
00:40:35,980 --> 00:40:40,810
cannot really discount security product

1093
00:40:38,109 --> 00:40:42,759
companies from you know have not having

1094
00:40:40,810 --> 00:40:44,410
vulnerabilities in their code so even

1095
00:40:42,760 --> 00:40:45,580
though your code might be secure you

1096
00:40:44,410 --> 00:40:48,520
know they might actually introduce

1097
00:40:45,580 --> 00:40:50,380
someone abilities and make it insecure

1098
00:40:48,520 --> 00:40:51,880
so that's that's a very good point

1099
00:40:50,380 --> 00:40:53,140
although of course they would try to

1100
00:40:51,880 --> 00:40:54,670
make sure that doesn't happen but you

1101
00:40:53,140 --> 00:40:57,100
cannot discount it off as well it's it's

1102
00:40:54,670 --> 00:41:00,220
a it's a very you know it's an actual

1103
00:40:57,100 --> 00:41:03,759
reality okay so and then when it comes

1104
00:41:00,220 --> 00:41:05,618
to half and rasp with all its

1105
00:41:03,760 --> 00:41:07,060
disadvantages of course you know there

1106
00:41:05,619 --> 00:41:10,480
are cases where a wave system might

1107
00:41:07,060 --> 00:41:12,160
actually perform better and it again it

1108
00:41:10,480 --> 00:41:13,780
comes down a lot of those things are

1109
00:41:12,160 --> 00:41:15,368
similar to iOS which is if the last

1110
00:41:13,780 --> 00:41:17,350
system is not monitoring a particular

1111
00:41:15,369 --> 00:41:18,670
API you know because it's you're using

1112
00:41:17,350 --> 00:41:21,700
an obscure library then it might not

1113
00:41:18,670 --> 00:41:24,910
block attacks which go there and another

1114
00:41:21,700 --> 00:41:26,290
thing is at which layer at what layer

1115
00:41:24,910 --> 00:41:28,240
the attack is actually taking place for

1116
00:41:26,290 --> 00:41:30,250
example your last system usually runs on

1117
00:41:28,240 --> 00:41:32,140
your app server but then you have some

1118
00:41:30,250 --> 00:41:34,570
infrastructure even before your you know

1119
00:41:32,140 --> 00:41:36,609
app server and attacks against that your

1120
00:41:34,570 --> 00:41:38,830
last system cannot protect you you know

1121
00:41:36,609 --> 00:41:40,509
against but of app because it's it's

1122
00:41:38,830 --> 00:41:42,700
it's a it's the first level of you know

1123
00:41:40,510 --> 00:41:44,230
difference in most cases it can even

1124
00:41:42,700 --> 00:41:46,149
block against attacks on your web server

1125
00:41:44,230 --> 00:41:49,720
and so on right so you get that

1126
00:41:46,150 --> 00:41:51,369
protection there so you so so there are

1127
00:41:49,720 --> 00:41:52,689
you know benefits you get with RAF which

1128
00:41:51,369 --> 00:41:55,300
you don't get with these newer

1129
00:41:52,690 --> 00:41:58,530
technologies so the best case scenario

1130
00:41:55,300 --> 00:42:02,980
is you have both you know all four

1131
00:41:58,530 --> 00:42:05,530
provided your budget allows you to do

1132
00:42:02,980 --> 00:42:09,310
that which is depends on how deep your

1133
00:42:05,530 --> 00:42:09,850
pockets are but then if it's going to be

1134
00:42:09,310 --> 00:42:11,770
in

1135
00:42:09,850 --> 00:42:13,299
no mutually exclusive choice you know

1136
00:42:11,770 --> 00:42:16,540
hey I have only this much money I'll

1137
00:42:13,300 --> 00:42:19,500
have to either pick this or that I would

1138
00:42:16,540 --> 00:42:22,450
say you know picking an is for a rasp

1139
00:42:19,500 --> 00:42:23,830
although I've discussed about the you

1140
00:42:22,450 --> 00:42:26,649
know things you will miss out in both

1141
00:42:23,830 --> 00:42:30,549
cases just in terms of an aura overall

1142
00:42:26,650 --> 00:42:33,130
net benefit I think the you know I asked

1143
00:42:30,550 --> 00:42:35,440
in last actually way better you know

1144
00:42:33,130 --> 00:42:38,440
they like overall I think they'll give

1145
00:42:35,440 --> 00:42:55,450
you more value than a dashed and a valve

1146
00:42:38,440 --> 00:42:56,650
possibly could say I'm sorry okay I know

1147
00:42:55,450 --> 00:42:59,049
that's a good question let me think

1148
00:42:56,650 --> 00:43:00,430
about it I don't know if there's a tool

1149
00:42:59,050 --> 00:43:04,330
which does all but there are companies

1150
00:43:00,430 --> 00:43:06,580
which do them like for example Imperva

1151
00:43:04,330 --> 00:43:08,920
is a vast vendor and they just acquired

1152
00:43:06,580 --> 00:43:10,420
privity which is a vast printer right so

1153
00:43:08,920 --> 00:43:12,760
which means now in their portfolio they

1154
00:43:10,420 --> 00:43:14,020
have both baffle as a task and they

1155
00:43:12,760 --> 00:43:15,160
might actually sell it to you as two

1156
00:43:14,020 --> 00:43:17,530
different products they'll bill you

1157
00:43:15,160 --> 00:43:28,990
separately but at least you get it from

1158
00:43:17,530 --> 00:43:31,420
you know the same company right right

1159
00:43:28,990 --> 00:43:34,720
right for the client side yeah right

1160
00:43:31,420 --> 00:43:37,060
so but they don't do tests so his

1161
00:43:34,720 --> 00:43:38,980
question is like somebody who does - as

1162
00:43:37,060 --> 00:43:43,210
well as I asked and laughs as well as

1163
00:43:38,980 --> 00:43:44,830
rasp so I'm not signal sciences okay I

1164
00:43:43,210 --> 00:43:47,350
don't want to like get into details of

1165
00:43:44,830 --> 00:43:49,630
that I'm sure like I'm not at liberty to

1166
00:43:47,350 --> 00:43:53,860
talk I can say positive things about

1167
00:43:49,630 --> 00:43:55,690
companies but yeah and not to say that

1168
00:43:53,860 --> 00:43:56,980
anything negative you know the simply

1169
00:43:55,690 --> 00:43:58,630
anything bad about signal Sciences

1170
00:43:56,980 --> 00:44:00,790
they're pretty good but they're not a

1171
00:43:58,630 --> 00:44:03,190
dashed and they're not a graph on grasp

1172
00:44:00,790 --> 00:44:05,170
combination right that they are not so I

1173
00:44:03,190 --> 00:44:06,700
don't to answer the question I don't

1174
00:44:05,170 --> 00:44:10,050
think there are any companies I know

1175
00:44:06,700 --> 00:44:10,049
like products

1176
00:44:13,250 --> 00:44:19,090
[Music]

1177
00:44:14,540 --> 00:44:19,090
okay you're talking about I asked sass

1178
00:44:19,180 --> 00:44:26,240
um you have check marks which does iist

1179
00:44:23,870 --> 00:44:29,960
as well as sassed and they're not doing

1180
00:44:26,240 --> 00:44:31,490
that though so I mean you'll have to go

1181
00:44:29,960 --> 00:44:33,110
to the booth talk to some companies

1182
00:44:31,490 --> 00:44:35,060
there I'm sure somebody will have some

1183
00:44:33,110 --> 00:44:57,110
answers so I don't have information

1184
00:44:35,060 --> 00:45:07,970
there yeah yeah you can do that you can

1185
00:44:57,110 --> 00:45:09,770
so that was a so but then again you can

1186
00:45:07,970 --> 00:45:11,779
you can look for these behaviors and you

1187
00:45:09,770 --> 00:45:14,090
can actually try and you know improve

1188
00:45:11,780 --> 00:45:18,290
your tools which most baths can has

1189
00:45:14,090 --> 00:45:20,660
actually do but that was you know just

1190
00:45:18,290 --> 00:45:22,250
to show like push a point that you will

1191
00:45:20,660 --> 00:45:24,230
have scenarios like that which will not

1192
00:45:22,250 --> 00:45:26,900
you know get handled but what you're

1193
00:45:24,230 --> 00:45:28,490
saying is true which is if it was you

1194
00:45:26,900 --> 00:45:30,290
know like for example the field

1195
00:45:28,490 --> 00:45:32,930
parameter name is email for example

1196
00:45:30,290 --> 00:45:34,850
right then the - can it can just use the

1197
00:45:32,930 --> 00:45:36,410
parameter name as a hint I had can

1198
00:45:34,850 --> 00:45:38,450
actually send payloads in the form of an

1199
00:45:36,410 --> 00:45:40,370
email but then again what if the company

1200
00:45:38,450 --> 00:45:42,049
is looking for an email address of a

1201
00:45:40,370 --> 00:45:45,230
particular domain name only you know

1202
00:45:42,050 --> 00:45:48,220
their corporate domain name a silver in

1203
00:45:45,230 --> 00:45:48,220
work right yeah

1204
00:46:05,560 --> 00:46:21,609
if the findings of a task to right hmm

1205
00:46:18,410 --> 00:46:24,830
okay yeah that'd be nice organized yeah

1206
00:46:21,609 --> 00:46:28,750
anyway so that's it guys so that whether

1207
00:46:24,830 --> 00:46:28,750
I conclude my talk

