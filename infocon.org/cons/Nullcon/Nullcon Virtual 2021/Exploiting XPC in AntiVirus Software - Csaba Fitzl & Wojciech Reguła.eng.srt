1
00:00:00,000 --> 00:00:14,080
[Music]

2
00:00:14,080 --> 00:00:16,480
all right so

3
00:00:16,480 --> 00:00:19,920
hello everyone hello newcomer uh it's 6

4
00:00:19,920 --> 00:00:22,880
6 19 here in point in hungary so i think

5
00:00:22,880 --> 00:00:25,039
it's a good time to start

6
00:00:25,039 --> 00:00:27,680
uh so yeah today we're gonna talk about

7
00:00:27,680 --> 00:00:28,400
exploiting

8
00:00:28,400 --> 00:00:32,558
xpc in antivirus software

9
00:00:32,558 --> 00:00:34,559
chava if you could give me a control of

10
00:00:34,559 --> 00:00:35,500
the screen

11
00:00:35,500 --> 00:00:37,920
[Music]

12
00:00:37,920 --> 00:00:40,879
yes i'm now controlling it so my name is

13
00:00:40,879 --> 00:00:43,520
poetry herregoa and i am a senior i.t

14
00:00:43,520 --> 00:00:44,079
security

15
00:00:44,079 --> 00:00:48,079
consultant at securing i mostly focused

16
00:00:48,079 --> 00:00:48,399
on

17
00:00:48,399 --> 00:00:52,079
application security of ios and

18
00:00:52,079 --> 00:00:55,440
mac os also in my free time i run an

19
00:00:55,440 --> 00:00:58,879
apple info security blocked so you can

20
00:00:58,879 --> 00:01:02,000
see the link on the slide and you may

21
00:01:02,000 --> 00:01:02,960
also

22
00:01:02,960 --> 00:01:06,000
me from from my site project called ios

23
00:01:06,000 --> 00:01:07,600
security suit that is

24
00:01:07,600 --> 00:01:11,200
a free and open source swift library

25
00:01:11,200 --> 00:01:13,680
created for developers to help them

26
00:01:13,680 --> 00:01:15,280
secure

27
00:01:15,280 --> 00:01:19,280
their applications on iphones and ipads

28
00:01:19,280 --> 00:01:22,560
so chaba

29
00:01:23,040 --> 00:01:26,400
thank you my name is job official

30
00:01:26,400 --> 00:01:28,799
i'm right now a content developer at

31
00:01:28,799 --> 00:01:30,560
offensive security

32
00:01:30,560 --> 00:01:33,600
i'm part of a team who develops

33
00:01:33,600 --> 00:01:35,920
creates new training material for the

34
00:01:35,920 --> 00:01:36,880
company

35
00:01:36,880 --> 00:01:39,840
i used to be a red and blue teamer in a

36
00:01:39,840 --> 00:01:40,560
large

37
00:01:40,560 --> 00:01:44,079
enterprise before that and in the last

38
00:01:44,079 --> 00:01:48,479
two years i've been focusing on

39
00:01:48,479 --> 00:01:52,399
mac os research and security

40
00:01:52,399 --> 00:01:56,159
i have two kids and i'm married

41
00:01:56,159 --> 00:01:59,920
and i love to do hiking and yoga uh

42
00:01:59,920 --> 00:02:02,880
in my free time

43
00:02:04,479 --> 00:02:07,040
thank you back to you all right so in

44
00:02:07,040 --> 00:02:08,639
this talk uh

45
00:02:08,639 --> 00:02:11,760
we'll at first introduce you to uh macos

46
00:02:11,760 --> 00:02:13,360
insert process communication because

47
00:02:13,360 --> 00:02:15,040
it's kind of complicated

48
00:02:15,040 --> 00:02:18,160
uh then we share our research the

49
00:02:18,160 --> 00:02:21,440
results then the typical issues

50
00:02:21,440 --> 00:02:23,200
and i think the most sexist part of the

51
00:02:23,200 --> 00:02:24,560
stock so demos

52
00:02:24,560 --> 00:02:27,040
and vulnerabilities along with the

53
00:02:27,040 --> 00:02:28,319
working exploits

54
00:02:28,319 --> 00:02:31,599
and because we don't like leaving people

55
00:02:31,599 --> 00:02:32,560
without

56
00:02:32,560 --> 00:02:35,360
the fear and lack of recommendations

57
00:02:35,360 --> 00:02:36,800
we'd like to

58
00:02:36,800 --> 00:02:39,040
share with you recommendations as well

59
00:02:39,040 --> 00:02:41,280
as for developers to ask for

60
00:02:41,280 --> 00:02:44,720
users and then chaba

61
00:02:44,720 --> 00:02:46,640
will show you the future regarding the

62
00:02:46,640 --> 00:02:49,200
xpc

63
00:02:49,360 --> 00:02:52,480
so um

64
00:02:52,480 --> 00:02:55,519
this is the interesting story because

65
00:02:55,519 --> 00:02:59,599
we both separately started two different

66
00:02:59,599 --> 00:03:03,280
xbc researchers in 2019

67
00:03:03,280 --> 00:03:05,200
then we had two different talks

68
00:03:05,200 --> 00:03:07,200
completely separately

69
00:03:07,200 --> 00:03:09,760
we didn't know about each other plans

70
00:03:09,760 --> 00:03:11,040
and as you can see

71
00:03:11,040 --> 00:03:12,560
two different slides on different

72
00:03:12,560 --> 00:03:15,599
conferences and

73
00:03:15,599 --> 00:03:18,480
when we saw each other representations

74
00:03:18,480 --> 00:03:19,840
we decided to

75
00:03:19,840 --> 00:03:23,200
team up so here we have this is the

76
00:03:23,200 --> 00:03:27,440
result of our first joint research

77
00:03:28,400 --> 00:03:32,959
but before talking about xpc i'd like to

78
00:03:32,959 --> 00:03:36,159
introduce you to mac os inter-process

79
00:03:36,159 --> 00:03:37,200
communication

80
00:03:37,200 --> 00:03:40,319
in general so as you can see

81
00:03:40,319 --> 00:03:44,879
on the diagram there are a lot of

82
00:03:44,879 --> 00:03:48,959
ipc in macos it's even called a zoo

83
00:03:48,959 --> 00:03:53,360
so most of the uh

84
00:03:53,360 --> 00:03:57,120
the popular inter-process mechanisms

85
00:03:57,120 --> 00:03:58,879
are based on mac messages and you can

86
00:03:58,879 --> 00:04:01,280
see mig distributed notifications

87
00:04:01,280 --> 00:04:05,599
xpc and on top of top of that nsx pc

88
00:04:05,599 --> 00:04:08,799
and as you can see all almost all of

89
00:04:08,799 --> 00:04:09,920
this

90
00:04:09,920 --> 00:04:12,720
zoo goes through the mac messages so in

91
00:04:12,720 --> 00:04:13,599
order to

92
00:04:13,599 --> 00:04:16,639
understand how to exploit xpc we at

93
00:04:16,639 --> 00:04:18,478
first need to understand

94
00:04:18,478 --> 00:04:22,720
how does the mac messages work so

95
00:04:22,720 --> 00:04:25,440
mac messages are really really

96
00:04:25,440 --> 00:04:27,040
fundamental

97
00:04:27,040 --> 00:04:31,120
for mac os you can think

98
00:04:31,120 --> 00:04:35,919
about them as a kind of posix pipes

99
00:04:35,919 --> 00:04:38,160
because they are similar we can have

100
00:04:38,160 --> 00:04:39,759
only one receiver

101
00:04:39,759 --> 00:04:42,880
and possible multiple senders uh they

102
00:04:42,880 --> 00:04:44,720
are really powerful because they allow

103
00:04:44,720 --> 00:04:45,600
us to send

104
00:04:45,600 --> 00:04:48,720
messages with data but even memory

105
00:04:48,720 --> 00:04:51,919
or another port pointing to

106
00:04:51,919 --> 00:04:55,280
another xpc to another mac

107
00:04:55,280 --> 00:04:58,720
max server and what's

108
00:04:58,720 --> 00:05:01,919
important with the

109
00:05:01,919 --> 00:05:04,960
with the mac messages is that

110
00:05:04,960 --> 00:05:07,120
the send messages are placed in a

111
00:05:07,120 --> 00:05:09,600
message queue whenever the

112
00:05:09,600 --> 00:05:12,240
mock server is not able to handle them

113
00:05:12,240 --> 00:05:13,520
in the same time

114
00:05:13,520 --> 00:05:16,320
so that's please keep it in mind because

115
00:05:16,320 --> 00:05:17,759
it will be

116
00:05:17,759 --> 00:05:20,400
required to understand further exploits

117
00:05:20,400 --> 00:05:23,360
the enqueuing the messages

118
00:05:23,360 --> 00:05:27,440
uh so xpc uh is built on top of

119
00:05:27,440 --> 00:05:30,639
mac messages it's a

120
00:05:30,639 --> 00:05:32,800
not really convenient api because it's

121
00:05:32,800 --> 00:05:34,000
written in c

122
00:05:34,000 --> 00:05:36,400
uh so it's a dictionary based

123
00:05:36,400 --> 00:05:38,639
communication strongly typed

124
00:05:38,639 --> 00:05:42,080
with strings booleans dates etc

125
00:05:42,080 --> 00:05:45,199
and then the nsxpc

126
00:05:45,199 --> 00:05:48,560
the most convenient api because

127
00:05:48,560 --> 00:05:51,199
you can call it from objective-c or even

128
00:05:51,199 --> 00:05:52,880
swift

129
00:05:52,880 --> 00:05:56,240
you call remote methods on the other

130
00:05:56,240 --> 00:05:57,199
side of the

131
00:05:57,199 --> 00:05:59,039
xpc because it's inter process

132
00:05:59,039 --> 00:06:00,720
communication mechanism right

133
00:06:00,720 --> 00:06:04,400
uh so these objects have to conform

134
00:06:04,400 --> 00:06:07,919
objective c or swift protocols and in my

135
00:06:07,919 --> 00:06:08,560
opinion

136
00:06:08,560 --> 00:06:12,479
the most convenient thing regarding nxpc

137
00:06:12,479 --> 00:06:14,400
is that you can even send the serialized

138
00:06:14,400 --> 00:06:15,680
swift objects

139
00:06:15,680 --> 00:06:18,880
so you can make such a

140
00:06:18,880 --> 00:06:22,080
communication almost transparent even to

141
00:06:22,080 --> 00:06:23,520
developers because

142
00:06:23,520 --> 00:06:27,520
you just call some swift methods

143
00:06:28,160 --> 00:06:30,080
all right so now the statistics the

144
00:06:30,080 --> 00:06:31,840
results of

145
00:06:31,840 --> 00:06:35,199
our research so our sample

146
00:06:35,199 --> 00:06:39,919
were 28 different antivirus software

147
00:06:39,919 --> 00:06:42,000
and the important thing here is that we

148
00:06:42,000 --> 00:06:43,120
only tested

149
00:06:43,120 --> 00:06:45,440
those we had access to we didn't have

150
00:06:45,440 --> 00:06:46,639
access to

151
00:06:46,639 --> 00:06:48,880
every possible antivirus in macos

152
00:06:48,880 --> 00:06:50,639
because some of them are closed and not

153
00:06:50,639 --> 00:06:51,919
easily accessible

154
00:06:51,919 --> 00:06:55,440
so please keep it in mind and the

155
00:06:55,440 --> 00:06:59,599
first half of the tested antiviruses

156
00:06:59,599 --> 00:07:03,360
used xpc and the second

157
00:07:03,360 --> 00:07:07,199
half equal half as you can see

158
00:07:07,199 --> 00:07:10,880
mostly used sockets or mac messages

159
00:07:10,880 --> 00:07:14,319
so yeah we have only assessed

160
00:07:14,319 --> 00:07:17,520
this xbc antiviruses so

161
00:07:17,520 --> 00:07:19,599
this research is still open if you would

162
00:07:19,599 --> 00:07:20,800
like to

163
00:07:20,800 --> 00:07:23,000
assess the

164
00:07:23,000 --> 00:07:24,240
[Music]

165
00:07:24,240 --> 00:07:27,280
the second part of the antiviruses the

166
00:07:27,280 --> 00:07:29,759
messages part or mostly sockets feel

167
00:07:29,759 --> 00:07:30,720
free it's

168
00:07:30,720 --> 00:07:34,880
it's still open and ready to be assessed

169
00:07:34,880 --> 00:07:38,160
and the chart as you can see

170
00:07:38,160 --> 00:07:41,599
again equal halves uh the first half

171
00:07:41,599 --> 00:07:45,280
were antiviruses that were using xpc

172
00:07:45,280 --> 00:07:48,720
were vulnerable and the second half is

173
00:07:48,720 --> 00:07:52,319
the the antiviruses that didn't use xpc

174
00:07:52,319 --> 00:07:53,199
at all

175
00:07:53,199 --> 00:07:55,919
so i think it's now really easy to

176
00:07:55,919 --> 00:07:58,080
deduce that

177
00:07:58,080 --> 00:08:01,039
all the antiviruses that used xpc were

178
00:08:01,039 --> 00:08:02,319
vulnerable

179
00:08:02,319 --> 00:08:05,360
and it was it was really shocking uh to

180
00:08:05,360 --> 00:08:06,639
us when we

181
00:08:06,639 --> 00:08:09,120
uh conducted this research because all

182
00:08:09,120 --> 00:08:10,000
of these

183
00:08:10,000 --> 00:08:14,160
anti-viruses that we had access to were

184
00:08:14,160 --> 00:08:17,840
vulnerable in their xpc validation

185
00:08:17,840 --> 00:08:20,560
mechanisms

186
00:08:21,599 --> 00:08:25,120
so the typical issues

187
00:08:25,120 --> 00:08:29,280
i'll quickly quickly uh show you the

188
00:08:29,280 --> 00:08:32,159
the attack techniques that we uh

189
00:08:32,159 --> 00:08:32,958
identified

190
00:08:32,958 --> 00:08:36,719
regarding uh the xpc bypass

191
00:08:36,719 --> 00:08:40,559
bypasses so the fourth main techniques

192
00:08:40,559 --> 00:08:43,839
um i'll try to elaborate them

193
00:08:43,839 --> 00:08:47,279
uh but before let's uh

194
00:08:47,279 --> 00:08:50,080
let's see the the three main components

195
00:08:50,080 --> 00:08:50,800
that

196
00:08:50,800 --> 00:08:53,200
i will be showing during the next slides

197
00:08:53,200 --> 00:08:54,000
so

198
00:08:54,000 --> 00:08:57,519
uh the most important thing here is that

199
00:08:57,519 --> 00:09:00,000
only the first one the privileged xpc

200
00:09:00,000 --> 00:09:01,519
server is running as

201
00:09:01,519 --> 00:09:04,720
root all of all other components

202
00:09:04,720 --> 00:09:08,560
will be run as user so we'll try to

203
00:09:08,560 --> 00:09:12,480
elevate our privileges by exploiting the

204
00:09:12,480 --> 00:09:15,680
privileged xpc running as root server

205
00:09:15,680 --> 00:09:17,360
[Music]

206
00:09:17,360 --> 00:09:20,560
so the first attack scenario no

207
00:09:20,560 --> 00:09:21,440
validation

208
00:09:21,440 --> 00:09:23,600
in xbc server so our malicious

209
00:09:23,600 --> 00:09:25,600
application running as user

210
00:09:25,600 --> 00:09:29,360
asks the privileged xpc server to

211
00:09:29,360 --> 00:09:33,120
perform some actions for us

212
00:09:33,120 --> 00:09:36,399
and because it's no validation

213
00:09:36,399 --> 00:09:39,279
no client validation vulnerability the

214
00:09:39,279 --> 00:09:39,839
server

215
00:09:39,839 --> 00:09:42,320
says yeah okay i won't even verify you

216
00:09:42,320 --> 00:09:43,279
so it's

217
00:09:43,279 --> 00:09:46,399
directly or indirectly leading to local

218
00:09:46,399 --> 00:09:48,160
privilege escalations attacks right

219
00:09:48,160 --> 00:09:51,440
because our unprivileged component

220
00:09:51,440 --> 00:09:53,600
asks to perform some action in the

221
00:09:53,600 --> 00:09:55,120
context of the privileged

222
00:09:55,120 --> 00:09:57,200
running as root component

223
00:09:57,200 --> 00:09:59,440
[Music]

224
00:09:59,440 --> 00:10:02,320
the second attack scenario our malicious

225
00:10:02,320 --> 00:10:03,120
application

226
00:10:03,120 --> 00:10:05,760
cannot directly talk to the xbc server

227
00:10:05,760 --> 00:10:06,640
because there is

228
00:10:06,640 --> 00:10:10,320
some kind of cryptographical validation

229
00:10:10,320 --> 00:10:13,920
so we have to

230
00:10:15,279 --> 00:10:18,640
emit the connection from the trusted

231
00:10:18,640 --> 00:10:21,839
executable so

232
00:10:21,839 --> 00:10:24,079
the technique here is to inject a

233
00:10:24,079 --> 00:10:25,920
malicious code to the

234
00:10:25,920 --> 00:10:29,519
completely legit xpc client running as

235
00:10:29,519 --> 00:10:32,880
a user that will

236
00:10:32,880 --> 00:10:34,959
call the remote methods on the server

237
00:10:34,959 --> 00:10:36,480
the server will

238
00:10:36,480 --> 00:10:38,640
uh perform the cryptographic validation

239
00:10:38,640 --> 00:10:40,399
it will of course succeed that

240
00:10:40,399 --> 00:10:42,000
you it will of course succeed because

241
00:10:42,000 --> 00:10:43,680
it's a trusted client

242
00:10:43,680 --> 00:10:46,720
and again uh the privileged method will

243
00:10:46,720 --> 00:10:47,040
be

244
00:10:47,040 --> 00:10:49,680
called for us

245
00:10:50,079 --> 00:10:53,200
okay and the

246
00:10:53,200 --> 00:10:56,480
third technique um so before

247
00:10:56,480 --> 00:10:59,120
maches catalina it was really common

248
00:10:59,120 --> 00:10:59,680
that the

249
00:10:59,680 --> 00:11:03,680
applications were vulnerable to

250
00:11:03,680 --> 00:11:06,320
code injection attacks hardened runtime

251
00:11:06,320 --> 00:11:08,160
was not mandatory because there was no

252
00:11:08,160 --> 00:11:10,320
mandatory

253
00:11:10,320 --> 00:11:13,519
mechanism called notarization

254
00:11:13,519 --> 00:11:16,160
so it was pretty easy to inject our

255
00:11:16,160 --> 00:11:17,839
malicious code to

256
00:11:17,839 --> 00:11:19,920
uh to that to the applications before

257
00:11:19,920 --> 00:11:21,600
macros catalina but when

258
00:11:21,600 --> 00:11:25,519
um notarization became mandatory

259
00:11:25,519 --> 00:11:28,399
uh almost all of the applications uh

260
00:11:28,399 --> 00:11:30,160
introduced the hardened runtime

261
00:11:30,160 --> 00:11:33,680
so we now cannot easily in most cases

262
00:11:33,680 --> 00:11:37,600
uh inject our mulch's code so

263
00:11:37,600 --> 00:11:42,500
how we walk around this

264
00:11:42,500 --> 00:11:47,350
[Music]

265
00:11:50,320 --> 00:11:54,079
i'm clicking oh yeah so

266
00:11:54,079 --> 00:11:58,240
we decided to inject to an old versions

267
00:11:58,240 --> 00:12:01,680
of the of the xpc clients

268
00:12:01,680 --> 00:12:04,800
and uh because these clients were

269
00:12:04,800 --> 00:12:07,680
developed before maccas catalina the

270
00:12:07,680 --> 00:12:08,959
code injection

271
00:12:08,959 --> 00:12:12,160
was possible so even on the newest for

272
00:12:12,160 --> 00:12:14,639
example macos picture it's still

273
00:12:14,639 --> 00:12:16,320
possible to inject to them because they

274
00:12:16,320 --> 00:12:17,680
don't didn't implement

275
00:12:17,680 --> 00:12:21,600
the hardened runtime but

276
00:12:21,600 --> 00:12:26,160
what it gives to us in mac os

277
00:12:26,160 --> 00:12:29,040
the the the cryptographic validation is

278
00:12:29,040 --> 00:12:30,079
mostly based on

279
00:12:30,079 --> 00:12:33,040
sec requirements that are as you can see

280
00:12:33,040 --> 00:12:34,000
on the slide

281
00:12:34,000 --> 00:12:37,920
simple strings and this simple strings

282
00:12:37,920 --> 00:12:41,839
usually contain the following

283
00:12:41,839 --> 00:12:45,360
information that the the executable has

284
00:12:45,360 --> 00:12:47,360
to be signed with a certificate that was

285
00:12:47,360 --> 00:12:49,279
issued by apple that gives us this

286
00:12:49,279 --> 00:12:52,560
unsure apple generic the bundle

287
00:12:52,560 --> 00:12:55,360
identifier of the application must match

288
00:12:55,360 --> 00:12:59,519
and the last one that the certificate

289
00:12:59,519 --> 00:13:02,639
has to have the

290
00:13:02,639 --> 00:13:05,920
proper team identifier and as you can

291
00:13:05,920 --> 00:13:06,720
see

292
00:13:06,720 --> 00:13:10,639
uh in most cases you don't

293
00:13:10,639 --> 00:13:14,480
change your developer certificate uh

294
00:13:14,480 --> 00:13:18,839
really frequently so the sec requirement

295
00:13:18,839 --> 00:13:23,839
was and is the same for the

296
00:13:23,839 --> 00:13:26,320
new new version of the xpc client as

297
00:13:26,320 --> 00:13:27,200
like for the

298
00:13:27,200 --> 00:13:30,720
old version of the xpc clients so

299
00:13:30,720 --> 00:13:33,440
this attack scenario is really similar

300
00:13:33,440 --> 00:13:35,279
to the second one because we

301
00:13:35,279 --> 00:13:38,079
again inject the malicious code uh but

302
00:13:38,079 --> 00:13:40,399
here to the older version of the

303
00:13:40,399 --> 00:13:44,480
xpc clients that will uh call the

304
00:13:44,480 --> 00:13:47,519
remote methods on the xbc server

305
00:13:47,519 --> 00:13:49,600
and yeah it will be completely legit

306
00:13:49,600 --> 00:13:51,360
because the validation is based on the

307
00:13:51,360 --> 00:13:53,199
sec requirements strings that

308
00:13:53,199 --> 00:13:57,839
remain the same across the versions

309
00:13:57,839 --> 00:14:01,279
and the last technique that we wanted to

310
00:14:01,279 --> 00:14:04,000
show you for today is that quick

311
00:14:04,000 --> 00:14:05,680
reminder

312
00:14:05,680 --> 00:14:08,079
uh when we have our malicious

313
00:14:08,079 --> 00:14:08,959
application

314
00:14:08,959 --> 00:14:11,440
the server performs the uh the

315
00:14:11,440 --> 00:14:13,360
cryptographic validation of course

316
00:14:13,360 --> 00:14:17,040
if we try to connect to that server

317
00:14:17,040 --> 00:14:19,760
our signature doesn't meet the

318
00:14:19,760 --> 00:14:21,839
requirements so the connection will be

319
00:14:21,839 --> 00:14:24,639
quickly invalidated right

320
00:14:24,639 --> 00:14:28,320
but what if what if

321
00:14:28,320 --> 00:14:31,360
our malicious application forks a lot of

322
00:14:31,360 --> 00:14:32,000
times

323
00:14:32,000 --> 00:14:35,440
like hundreds of times and each

324
00:14:35,440 --> 00:14:37,610
of this child

325
00:14:37,610 --> 00:14:39,199
[Music]

326
00:14:39,199 --> 00:14:42,160
each of these children tries to connect

327
00:14:42,160 --> 00:14:42,959
to the xbc

328
00:14:42,959 --> 00:14:45,920
server and as i told you on the

329
00:14:45,920 --> 00:14:48,160
beginning of this presentation

330
00:14:48,160 --> 00:14:52,720
xpc is based on mac messages and

331
00:14:52,720 --> 00:14:56,000
it's now pretty understandable that

332
00:14:56,000 --> 00:14:58,320
this server won't be able to handle all

333
00:14:58,320 --> 00:15:00,639
of this connection in the very same time

334
00:15:00,639 --> 00:15:04,160
so they will be enqueued

335
00:15:04,160 --> 00:15:06,079
server has to put this connection on the

336
00:15:06,079 --> 00:15:07,600
queue and it's made

337
00:15:07,600 --> 00:15:11,199
transparently by the operating system

338
00:15:11,199 --> 00:15:14,480
so let's see how the skew

339
00:15:14,480 --> 00:15:17,040
look like

340
00:15:19,270 --> 00:15:22,460
[Music]

341
00:15:23,839 --> 00:15:27,680
i'm going oh so this queue

342
00:15:27,680 --> 00:15:31,040
as you can see each element of

343
00:15:31,040 --> 00:15:33,120
that queue has a connection process

344
00:15:33,120 --> 00:15:36,720
identifier and the action to perform

345
00:15:36,720 --> 00:15:39,279
of course the xpc server will pop each

346
00:15:39,279 --> 00:15:40,639
element from the queue

347
00:15:40,639 --> 00:15:43,759
and very verify

348
00:15:43,759 --> 00:15:46,079
the client basic compete and if the

349
00:15:46,079 --> 00:15:46,880
validation

350
00:15:46,880 --> 00:15:55,440
succeeded the action is performed

351
00:15:55,440 --> 00:15:58,240
the next slide

352
00:15:58,880 --> 00:16:02,240
okay so but what if in the same time

353
00:16:02,240 --> 00:16:05,759
uh if the queue

354
00:16:06,000 --> 00:16:10,240
is is full uh the malicious applications

355
00:16:10,240 --> 00:16:10,959
that just

356
00:16:10,959 --> 00:16:13,680
tried to connect to the xpc server i

357
00:16:13,680 --> 00:16:15,120
called posix spawn

358
00:16:15,120 --> 00:16:18,480
uh it's a function that allows us to

359
00:16:18,480 --> 00:16:23,199
uh replace the process bits

360
00:16:23,199 --> 00:16:26,160
to the legit one to the legit bits of

361
00:16:26,160 --> 00:16:26,800
the

362
00:16:26,800 --> 00:16:29,759
legit client but in the same time the

363
00:16:29,759 --> 00:16:31,360
process identifier

364
00:16:31,360 --> 00:16:36,410
remains the same

365
00:16:36,410 --> 00:16:40,399
[Music]

366
00:16:40,399 --> 00:16:42,720
okay

367
00:16:44,079 --> 00:16:46,480
oh so let's take a look on the on the

368
00:16:46,480 --> 00:16:47,519
validation

369
00:16:47,519 --> 00:16:50,720
so if the validation is based on the

370
00:16:50,720 --> 00:16:52,240
process identifier

371
00:16:52,240 --> 00:16:54,240
we create a code object basic on it

372
00:16:54,240 --> 00:16:56,560
perform a signature check and verify if

373
00:16:56,560 --> 00:16:57,519
it's filed or not

374
00:16:57,519 --> 00:17:00,480
if it's if the bytes are valid we

375
00:17:00,480 --> 00:17:02,079
establish the connection

376
00:17:02,079 --> 00:17:04,559
if they are not uh we of course

377
00:17:04,559 --> 00:17:06,880
invalidate

378
00:17:06,880 --> 00:17:10,079
okay the next slide

379
00:17:11,439 --> 00:17:13,220
all right so uh

380
00:17:13,220 --> 00:17:14,959
[Music]

381
00:17:14,959 --> 00:17:18,880
it may lead to such a situation where

382
00:17:18,880 --> 00:17:21,039
some of the connections have been

383
00:17:21,039 --> 00:17:22,720
invalidated

384
00:17:22,720 --> 00:17:26,799
but in the same time our application

385
00:17:26,799 --> 00:17:30,320
did change its bytes before the

386
00:17:30,320 --> 00:17:33,360
the actual validation so it may lead now

387
00:17:33,360 --> 00:17:36,110
to a situation where

388
00:17:36,110 --> 00:17:39,310
[Music]

389
00:17:39,440 --> 00:17:41,919
i'm sorry i cannot swap the slides if

390
00:17:41,919 --> 00:17:44,240
you could

391
00:17:44,720 --> 00:17:47,120
once again turned on because we're using

392
00:17:47,120 --> 00:17:49,520
the shark screen and i have

393
00:17:49,520 --> 00:17:51,919
some technical difficulties i'm clicking

394
00:17:51,919 --> 00:17:54,160
the right arrow but

395
00:17:54,160 --> 00:17:56,640
the slides are not going further all

396
00:17:56,640 --> 00:17:57,919
right i

397
00:17:57,919 --> 00:18:00,640
just moved the slides for you okay thank

398
00:18:00,640 --> 00:18:02,080
you

399
00:18:02,080 --> 00:18:05,840
so so it may lead to such a

400
00:18:05,840 --> 00:18:08,160
race condition attack where our abolish

401
00:18:08,160 --> 00:18:08,880
application

402
00:18:08,880 --> 00:18:11,760
swapped its bytes the validation is

403
00:18:11,760 --> 00:18:12,880
performed

404
00:18:12,880 --> 00:18:17,120
on the legit client but the action

405
00:18:17,120 --> 00:18:20,960
was enqueued before this the swap so

406
00:18:20,960 --> 00:18:23,280
in the end our malicious action is

407
00:18:23,280 --> 00:18:24,880
performed again

408
00:18:24,880 --> 00:18:27,200
in the context of the privileged xpc

409
00:18:27,200 --> 00:18:29,840
server

410
00:18:30,400 --> 00:18:32,799
so now the shell time the

411
00:18:32,799 --> 00:18:35,080
vulnerabilities that we have found

412
00:18:35,080 --> 00:18:38,300
[Music]

413
00:18:38,559 --> 00:18:43,039
so the first one mackeeper we identified

414
00:18:43,039 --> 00:18:45,440
multiple issues like using the

415
00:18:45,440 --> 00:18:47,840
vulnerable process identifiers

416
00:18:47,840 --> 00:18:49,840
or missing the client hardening

417
00:18:49,840 --> 00:18:51,840
validation

418
00:18:51,840 --> 00:18:54,640
you can see the code on the right side

419
00:18:54,640 --> 00:18:56,080
of the slide that there is

420
00:18:56,080 --> 00:18:59,200
a call to process identifier

421
00:18:59,200 --> 00:19:02,400
and the sec requirement string only

422
00:19:02,400 --> 00:19:03,440
contains the

423
00:19:03,440 --> 00:19:06,960
um the certificate

424
00:19:06,960 --> 00:19:09,520
information uh without any version chunk

425
00:19:09,520 --> 00:19:12,640
or anything additional

426
00:19:12,640 --> 00:19:15,360
so we have decided to inject to the

427
00:19:15,360 --> 00:19:16,770
ultimate keeper client

428
00:19:16,770 --> 00:19:19,039
[Music]

429
00:19:19,039 --> 00:19:22,640
but how did we reach local privilege

430
00:19:22,640 --> 00:19:23,600
escalation

431
00:19:23,600 --> 00:19:27,280
so mackeeper exposed many nsxpc methods

432
00:19:27,280 --> 00:19:29,679
and one of these methods were

433
00:19:29,679 --> 00:19:32,160
initialized with openvpn

434
00:19:32,160 --> 00:19:35,520
path and as you probably

435
00:19:35,520 --> 00:19:39,200
guessed the openvpn is a type of vpn

436
00:19:39,200 --> 00:19:42,880
so it redirects all the outgoing traffic

437
00:19:42,880 --> 00:19:44,000
from your

438
00:19:44,000 --> 00:19:47,200
computer so for that of course it needs

439
00:19:47,200 --> 00:19:49,360
to be privileged it needs

440
00:19:49,360 --> 00:19:54,400
uh root permissions so

441
00:19:54,400 --> 00:19:58,480
we've we tried the scenario what if

442
00:19:58,480 --> 00:20:01,440
we call the initialize with openvpn path

443
00:20:01,440 --> 00:20:02,240
method

444
00:20:02,240 --> 00:20:05,760
but pointing to the malicious executable

445
00:20:05,760 --> 00:20:07,120
and this is turned out

446
00:20:07,120 --> 00:20:09,840
uh mackeeper didn't validate the

447
00:20:09,840 --> 00:20:11,840
executable that we were pointing to

448
00:20:11,840 --> 00:20:12,640
because

449
00:20:12,640 --> 00:20:15,120
it performed the validation on the xbc

450
00:20:15,120 --> 00:20:15,919
level

451
00:20:15,919 --> 00:20:17,600
and so as you can see in the bottom of

452
00:20:17,600 --> 00:20:20,559
the slide our malicious open

453
00:20:20,559 --> 00:20:23,760
vpn client that just writes

454
00:20:23,760 --> 00:20:25,840
the privilege elevated to root string to

455
00:20:25,840 --> 00:20:27,120
atclb

456
00:20:27,120 --> 00:20:30,559
and then we called the the

457
00:20:30,559 --> 00:20:32,559
two xbc methods so at first we

458
00:20:32,559 --> 00:20:34,000
initialized with openvpn

459
00:20:34,000 --> 00:20:38,080
path and then started the connection

460
00:20:38,080 --> 00:20:42,240
and now you can see the demo

461
00:20:46,480 --> 00:20:48,720
oh

462
00:20:51,919 --> 00:20:56,000
yeah so the atc lpe file is not

463
00:20:56,000 --> 00:20:59,360
present but now

464
00:20:59,360 --> 00:21:03,840
let's try to exploit it

465
00:21:05,560 --> 00:21:10,188
[Music]

466
00:21:26,640 --> 00:21:29,600
and now as you can see the atc lpe file

467
00:21:29,600 --> 00:21:31,280
is present that means that we have

468
00:21:31,280 --> 00:21:35,200
achieved the local privilege escalation

469
00:21:36,480 --> 00:21:41,760
all right so integromax security

470
00:21:41,760 --> 00:21:44,799
another vulnerable antivirus

471
00:21:44,799 --> 00:21:47,760
it again had multiple issues like using

472
00:21:47,760 --> 00:21:50,559
the process identifiers or missed the

473
00:21:50,559 --> 00:21:53,039
client hardening validation and again

474
00:21:53,039 --> 00:21:56,559
we've decided to go the easiest way

475
00:21:56,559 --> 00:21:59,039
that is injecting to the old integra

476
00:21:59,039 --> 00:22:01,520
installer

477
00:22:04,240 --> 00:22:08,080
uh so integra used over 10 different xpc

478
00:22:08,080 --> 00:22:10,640
services so there were a lot of

479
00:22:10,640 --> 00:22:14,080
different methods but

480
00:22:14,080 --> 00:22:16,799
we have chosen this this example to show

481
00:22:16,799 --> 00:22:18,720
you that by exploiting ecstasy

482
00:22:18,720 --> 00:22:21,120
doesn't mean you always reach the local

483
00:22:21,120 --> 00:22:24,959
privilege escalation in terms of

484
00:22:25,039 --> 00:22:28,240
achieving root privileges sometimes uh

485
00:22:28,240 --> 00:22:29,919
it allows us to

486
00:22:29,919 --> 00:22:32,240
break the business logic of applications

487
00:22:32,240 --> 00:22:33,039
because

488
00:22:33,039 --> 00:22:34,880
we can only exploit these methods that

489
00:22:34,880 --> 00:22:37,679
were exposed right by xbc

490
00:22:37,679 --> 00:22:39,760
in this case we are talking about an

491
00:22:39,760 --> 00:22:41,679
anti-virus software

492
00:22:41,679 --> 00:22:44,480
via xpc it allowed for example to set

493
00:22:44,480 --> 00:22:47,600
the global protection

494
00:22:47,760 --> 00:22:51,200
so we have abused it and it allowed us

495
00:22:51,200 --> 00:22:51,919
to

496
00:22:51,919 --> 00:22:54,400
completely disable the antivirus from

497
00:22:54,400 --> 00:22:56,240
totally not privileged to

498
00:22:56,240 --> 00:23:01,200
application let's see the demo

499
00:23:01,200 --> 00:23:05,170
[Music]

500
00:23:06,559 --> 00:23:08,559
as you can see the net barrier

501
00:23:08,559 --> 00:23:10,159
protection is turned on

502
00:23:10,159 --> 00:23:14,159
but now we launch the exploit

503
00:23:17,919 --> 00:23:20,799
and again as you can see that we have

504
00:23:20,799 --> 00:23:22,559
successfully exploited the xbc that

505
00:23:22,559 --> 00:23:24,190
protection isn't above

506
00:23:24,190 --> 00:23:27,280
[Music]

507
00:23:27,280 --> 00:23:31,919
and the last example from

508
00:23:31,919 --> 00:23:35,440
my half of this presentation

509
00:23:35,440 --> 00:23:39,360
house and avg uh i treat them as

510
00:23:39,360 --> 00:23:42,480
one case because uh us bought

511
00:23:42,480 --> 00:23:45,679
aflg and they

512
00:23:45,679 --> 00:23:50,080
shared the the sheriff xpc code base

513
00:23:50,080 --> 00:23:52,240
so the issue here was missing the client

514
00:23:52,240 --> 00:23:55,440
hard on validation

515
00:23:55,520 --> 00:23:58,880
and again we decided to inject to the

516
00:23:58,880 --> 00:24:05,760
old version of avast

517
00:24:05,760 --> 00:24:08,880
um and this is

518
00:24:08,880 --> 00:24:12,080
yet another example of

519
00:24:12,080 --> 00:24:15,520
xpc of xpc exploitation but in this time

520
00:24:15,520 --> 00:24:18,640
we wanted to show you that sometimes

521
00:24:18,640 --> 00:24:21,520
the applications perform an additional

522
00:24:21,520 --> 00:24:22,320
validation

523
00:24:22,320 --> 00:24:25,360
so by bypassing xbc it doesn't mean you

524
00:24:25,360 --> 00:24:28,880
uh in all times exploited without any

525
00:24:28,880 --> 00:24:29,600
other

526
00:24:29,600 --> 00:24:32,640
authorization in this case

527
00:24:32,640 --> 00:24:36,000
the arse and avg rise

528
00:24:36,000 --> 00:24:39,520
pop up when user has to authenticate

529
00:24:39,520 --> 00:24:42,799
but it's a completely legit pop-up

530
00:24:42,799 --> 00:24:46,000
launched by by the legit

531
00:24:46,000 --> 00:24:48,559
antivirus right so macca's users are

532
00:24:48,559 --> 00:24:51,039
used to pop-ups and they will likely

533
00:24:51,039 --> 00:24:54,960
uh provide their their credentials

534
00:24:54,960 --> 00:25:00,180
uh let's see how it worked in the demo

535
00:25:00,180 --> 00:25:08,480
[Music]

536
00:25:08,480 --> 00:25:12,840
java if you could we probably clicked

537
00:25:12,840 --> 00:25:15,039
twice

538
00:25:15,039 --> 00:25:16,960
okay so as you can see the pop-up is

539
00:25:16,960 --> 00:25:18,640
rised

540
00:25:18,640 --> 00:25:22,159
we provide our credentials

541
00:25:23,120 --> 00:25:26,240
and then the

542
00:25:26,240 --> 00:25:30,159
the courses are turned off so

543
00:25:30,159 --> 00:25:31,679
it's everything from my site in this

544
00:25:31,679 --> 00:25:33,840
presentation i'm giving the

545
00:25:33,840 --> 00:25:37,760
microphone back to java thank you

546
00:25:39,360 --> 00:25:42,320
thank you waja so the next one on the

547
00:25:42,320 --> 00:25:42,799
line

548
00:25:42,799 --> 00:25:46,000
is f secure i think this was one of the

549
00:25:46,000 --> 00:25:46,559
first

550
00:25:46,559 --> 00:25:50,559
avs we assessed uh it might be even back

551
00:25:50,559 --> 00:25:51,919
in uh

552
00:25:51,919 --> 00:25:55,120
end of 2019 uh again

553
00:25:55,120 --> 00:25:58,000
the very same issues uh that he showed

554
00:25:58,000 --> 00:25:58,559
with the

555
00:25:58,559 --> 00:26:02,080
other clients or other abs uh first it's

556
00:26:02,080 --> 00:26:03,039
missing

557
00:26:03,039 --> 00:26:05,600
a client hardening validation so again

558
00:26:05,600 --> 00:26:06,480
it only checked

559
00:26:06,480 --> 00:26:09,679
the team id uh if it's signed by apple

560
00:26:09,679 --> 00:26:11,600
and

561
00:26:11,600 --> 00:26:14,480
the bundle id so again it allowed us to

562
00:26:14,480 --> 00:26:17,039
use an old client with f-secure

563
00:26:17,039 --> 00:26:20,720
and it also used the process id

564
00:26:20,720 --> 00:26:24,000
for the validation uh so that

565
00:26:24,000 --> 00:26:27,679
was another part and uh have secured it

566
00:26:27,679 --> 00:26:30,880
as two separate issues

567
00:26:30,880 --> 00:26:34,400
uh so we used an old client

568
00:26:34,400 --> 00:26:37,440
uh for the exploitation but uh similar

569
00:26:37,440 --> 00:26:39,600
to august here we also had a

570
00:26:39,600 --> 00:26:42,960
an obstacle uh that f-secure used

571
00:26:42,960 --> 00:26:45,600
authorization for all of the

572
00:26:45,600 --> 00:26:48,640
sensitive or higher privilege action

573
00:26:48,640 --> 00:26:52,799
run by the xbc server and it was tied

574
00:26:52,799 --> 00:26:55,880
back to the system.privilege.admin

575
00:26:55,880 --> 00:26:59,360
authorization right on mac macos

576
00:26:59,360 --> 00:27:01,919
which you can only get if you are either

577
00:27:01,919 --> 00:27:02,880
root or you

578
00:27:02,880 --> 00:27:06,960
authenticate yourself as an admin user

579
00:27:06,960 --> 00:27:10,799
so again the user will be created with a

580
00:27:10,799 --> 00:27:11,679
pop-up

581
00:27:11,679 --> 00:27:16,320
but as we show here at the

582
00:27:16,320 --> 00:27:18,159
bottom right corner of the screen this

583
00:27:18,159 --> 00:27:19,520
is the pop-up you would see

584
00:27:19,520 --> 00:27:22,320
so it's completely legit it's really

585
00:27:22,320 --> 00:27:23,240
coming from

586
00:27:23,240 --> 00:27:26,559
f-secure uh because we are injecting

587
00:27:26,559 --> 00:27:28,960
into that application

588
00:27:28,960 --> 00:27:32,640
and again mac os users

589
00:27:32,640 --> 00:27:35,520
we believe used to these pop-ups and we

590
00:27:35,520 --> 00:27:36,399
just

591
00:27:36,399 --> 00:27:40,320
uh freely authenticate

592
00:27:40,559 --> 00:27:43,760
uh the next av clamp serve it's a

593
00:27:43,760 --> 00:27:49,679
small heavy small company

594
00:27:49,679 --> 00:27:51,919
this was i think one of the best

595
00:27:51,919 --> 00:27:54,080
pandora's to work with

596
00:27:54,080 --> 00:27:56,320
they were really fast to respond and

597
00:27:56,320 --> 00:27:58,559
really fast to actually fix

598
00:27:58,559 --> 00:28:01,600
the issues and again the very same

599
00:28:01,600 --> 00:28:04,000
problems missing client hardening

600
00:28:04,000 --> 00:28:06,799
validation and using the process id

601
00:28:06,799 --> 00:28:10,080
probably by now you get use this pattern

602
00:28:10,080 --> 00:28:13,360
of issues uh

603
00:28:13,360 --> 00:28:16,320
it's really repeating and coming back uh

604
00:28:16,320 --> 00:28:17,679
so again as you can see the sec

605
00:28:17,679 --> 00:28:18,960
requirement string

606
00:28:18,960 --> 00:28:22,000
they used is peacetime by apple

607
00:28:22,000 --> 00:28:25,200
and have the same theme id so

608
00:28:25,200 --> 00:28:27,200
for the attack we could just download

609
00:28:27,200 --> 00:28:29,120
their old client

610
00:28:29,120 --> 00:28:32,000
client version 2 which didn't have any

611
00:28:32,000 --> 00:28:35,279
hardening and we could just inject

612
00:28:35,279 --> 00:28:39,440
ourselves now this av actually

613
00:28:39,440 --> 00:28:42,000
we were able to get full privilege

614
00:28:42,000 --> 00:28:42,960
escalation

615
00:28:42,960 --> 00:28:46,240
with this the privilege helper to offer

616
00:28:46,240 --> 00:28:49,600
very useful functions

617
00:28:49,600 --> 00:28:51,760
one of them is trash file which allow

618
00:28:51,760 --> 00:28:53,679
you to delete any file and the other one

619
00:28:53,679 --> 00:28:55,200
is move file

620
00:28:55,200 --> 00:28:58,399
which allows you to move one file

621
00:28:58,399 --> 00:29:01,440
from one place to another as root

622
00:29:01,440 --> 00:29:04,559
which is basically a trivial

623
00:29:04,559 --> 00:29:06,480
privilege escalation scenario probably

624
00:29:06,480 --> 00:29:08,559
on any operating system

625
00:29:08,559 --> 00:29:11,679
including mac os so what we choose here

626
00:29:11,679 --> 00:29:15,120
is we move the plist launch the startup

627
00:29:15,120 --> 00:29:16,799
file into launch demons

628
00:29:16,799 --> 00:29:21,279
so whenever you reboot the computer um

629
00:29:21,279 --> 00:29:23,600
whatever is defined in that plist file

630
00:29:23,600 --> 00:29:26,080
will be launched as root

631
00:29:26,080 --> 00:29:29,520
there are many other options updating

632
00:29:29,520 --> 00:29:33,360
periodic scripts or installing a pem

633
00:29:33,360 --> 00:29:36,880
plug-in we just picked this one

634
00:29:36,880 --> 00:29:40,799
and furthermore the privilege helper to

635
00:29:40,799 --> 00:29:42,159
allowed

636
00:29:42,159 --> 00:29:44,480
full control over the av through the

637
00:29:44,480 --> 00:29:45,520
right settings

638
00:29:45,520 --> 00:29:49,039
so basically this exploit was uh

639
00:29:49,039 --> 00:29:52,480
not just a full lp but as a full

640
00:29:52,480 --> 00:29:56,159
business logic compromise uh so here's

641
00:29:56,159 --> 00:29:56,960
the demo

642
00:29:56,960 --> 00:29:59,279
of this uh you can see that the library

643
00:29:59,279 --> 00:30:00,960
launch daemon

644
00:30:00,960 --> 00:30:04,640
folder only contains clam cef

645
00:30:04,640 --> 00:30:08,880
normal launch device and one from

646
00:30:08,880 --> 00:30:12,000
vmware and now if we

647
00:30:12,000 --> 00:30:15,600
launch our attack we inject a dilute

648
00:30:15,600 --> 00:30:16,559
through

649
00:30:16,559 --> 00:30:19,918
environment variables

650
00:30:20,080 --> 00:30:23,039
and yeah this is the old client popping

651
00:30:23,039 --> 00:30:23,520
up

652
00:30:23,520 --> 00:30:26,080
we can kill that and now if we list the

653
00:30:26,080 --> 00:30:27,600
directory again

654
00:30:27,600 --> 00:30:30,720
uh you can see that we have a a new

655
00:30:30,720 --> 00:30:31,679
plist file

656
00:30:31,679 --> 00:30:37,840
showing up on on library launch demon

657
00:30:38,720 --> 00:30:42,720
uh the next av is acronis

658
00:30:42,720 --> 00:30:45,279
uh here they have only one issue is

659
00:30:45,279 --> 00:30:46,799
again missing client hardening

660
00:30:46,799 --> 00:30:48,000
validation

661
00:30:48,000 --> 00:30:50,720
uh so again we could use an old client

662
00:30:50,720 --> 00:30:51,279
uh

663
00:30:51,279 --> 00:30:54,960
with the av uh we use the

664
00:30:54,960 --> 00:30:58,320
2020 version of the client uh

665
00:30:58,320 --> 00:31:02,120
to escalate privileges on the

666
00:31:02,120 --> 00:31:05,120
2021 uh version

667
00:31:05,120 --> 00:31:08,719
their previous helper was

668
00:31:09,840 --> 00:31:12,880
very good in terms of for us to do

669
00:31:12,880 --> 00:31:16,080
privilege escalation they

670
00:31:16,080 --> 00:31:19,760
offer an execute process

671
00:31:19,760 --> 00:31:23,679
method through xbc

672
00:31:23,679 --> 00:31:26,000
which does exactly what it sounds it

673
00:31:26,000 --> 00:31:27,519
will execute a process

674
00:31:27,519 --> 00:31:29,519
and since it's running as root it will

675
00:31:29,519 --> 00:31:31,440
execute it as root

676
00:31:31,440 --> 00:31:34,080
it even allowed us to specify arguments

677
00:31:34,080 --> 00:31:35,360
or environment value

678
00:31:35,360 --> 00:31:38,719
variables if we wanted

679
00:31:42,159 --> 00:31:48,240
so here's demo of the exploit

680
00:31:48,240 --> 00:31:51,360
so you can see we we have the our dilups

681
00:31:51,360 --> 00:31:54,000
prepared what we want to inject into the

682
00:31:54,000 --> 00:31:55,200
old application

683
00:31:55,200 --> 00:32:00,080
we have the oil application um

684
00:32:00,080 --> 00:32:02,480
right here right there the action is

685
00:32:02,480 --> 00:32:03,279
through image

686
00:32:03,279 --> 00:32:06,960
app uh let's just

687
00:32:06,960 --> 00:32:10,880
check its signature

688
00:32:10,880 --> 00:32:13,039
why it's vulnerable why the old client

689
00:32:13,039 --> 00:32:14,480
is vulnerable so

690
00:32:14,480 --> 00:32:15,760
although it's signed with hard and

691
00:32:15,760 --> 00:32:17,440
runtime it has the disabled library

692
00:32:17,440 --> 00:32:18,240
validation

693
00:32:18,240 --> 00:32:20,559
and it allows the while the environment

694
00:32:20,559 --> 00:32:22,960
variables which

695
00:32:22,960 --> 00:32:25,039
makes it really convenient to inject any

696
00:32:25,039 --> 00:32:28,640
daily into the application

697
00:32:28,960 --> 00:32:31,840
so we can again just use the b via

698
00:32:31,840 --> 00:32:34,080
insert libraries environment variables

699
00:32:34,080 --> 00:32:34,399
for

700
00:32:34,399 --> 00:32:36,959
injection

701
00:32:39,679 --> 00:32:44,320
and we start the app

702
00:32:53,440 --> 00:32:55,840
so since you run it for the very first

703
00:32:55,840 --> 00:32:57,760
time actually the old client

704
00:32:57,760 --> 00:33:02,720
gatekeeper did some verification and

705
00:33:03,760 --> 00:33:07,279
because of that we rerun

706
00:33:07,279 --> 00:33:10,880
the exploit

707
00:33:10,880 --> 00:33:15,919
and now you see a terminal coming up

708
00:33:17,840 --> 00:33:20,960
a new terminal and it

709
00:33:20,960 --> 00:33:23,440
runs as root so basically what we did

710
00:33:23,440 --> 00:33:24,399
here is

711
00:33:24,399 --> 00:33:27,039
uh executing terminal as through through

712
00:33:27,039 --> 00:33:30,158
the privilege helper

713
00:33:31,600 --> 00:33:35,360
so these bugs are all fixed

714
00:33:35,360 --> 00:33:37,519
at this point we couldn't reveal all of

715
00:33:37,519 --> 00:33:39,600
the box we found because some of them

716
00:33:39,600 --> 00:33:41,840
are still

717
00:33:41,840 --> 00:33:46,080
being fixed by the vendors

718
00:33:46,080 --> 00:33:48,880
so let's see what i reckon what are our

719
00:33:48,880 --> 00:33:50,000
recommendation

720
00:33:50,000 --> 00:33:53,840
for developers

721
00:33:54,320 --> 00:33:57,840
uh first of all so we we need to split

722
00:33:57,840 --> 00:34:00,399
uh xpc into two parts the first half is

723
00:34:00,399 --> 00:34:02,480
the client and the second is the xbc

724
00:34:02,480 --> 00:34:03,600
server

725
00:34:03,600 --> 00:34:07,600
uh the client side is uh easier

726
00:34:07,600 --> 00:34:10,480
probably he you just need to sign it

727
00:34:10,480 --> 00:34:12,399
with hardened runtime and

728
00:34:12,399 --> 00:34:15,520
like or library validation uh but since

729
00:34:15,520 --> 00:34:17,679
that these days

730
00:34:17,679 --> 00:34:20,639
uh mac os mandates notarization where

731
00:34:20,639 --> 00:34:24,000
hardened runtime is mandatory um

732
00:34:24,000 --> 00:34:27,280
probably this is an easy step

733
00:34:27,280 --> 00:34:29,679
and the second thing is that these

734
00:34:29,679 --> 00:34:30,560
entitlements

735
00:34:30,560 --> 00:34:32,800
come apple security disable library

736
00:34:32,800 --> 00:34:34,879
validation and get task allowed

737
00:34:34,879 --> 00:34:37,520
must not be present on your client

738
00:34:37,520 --> 00:34:39,119
because if

739
00:34:39,119 --> 00:34:42,719
any of those are there someone can

740
00:34:42,719 --> 00:34:44,800
inject code into the application if the

741
00:34:44,800 --> 00:34:46,480
disabled library validation

742
00:34:46,480 --> 00:34:48,800
present then someone can inject the die

743
00:34:48,800 --> 00:34:51,599
lib and if they get tasks allow present

744
00:34:51,599 --> 00:34:52,879
then someone can

745
00:34:52,879 --> 00:34:57,119
inject a shackled through

746
00:34:57,119 --> 00:35:00,160
mech task boards

747
00:35:01,359 --> 00:35:03,200
this the first one the library

748
00:35:03,200 --> 00:35:04,960
validation can be problematic

749
00:35:04,960 --> 00:35:07,200
if you need to support third-party

750
00:35:07,200 --> 00:35:09,040
plugins

751
00:35:09,040 --> 00:35:12,720
uh and also your app

752
00:35:12,720 --> 00:35:15,280
probably shouldn't have any script files

753
00:35:15,280 --> 00:35:16,800
at least

754
00:35:16,800 --> 00:35:19,280
not strip files that you run that you

755
00:35:19,280 --> 00:35:21,040
load into your application as

756
00:35:21,040 --> 00:35:23,760
unsigned code like javascript or

757
00:35:23,760 --> 00:35:24,400
something

758
00:35:24,400 --> 00:35:27,839
uh this is especially important in case

759
00:35:27,839 --> 00:35:30,320
of uh like electron based

760
00:35:30,320 --> 00:35:35,680
applications and because because

761
00:35:35,680 --> 00:35:38,480
the signature of script files or the

762
00:35:38,480 --> 00:35:38,880
hash

763
00:35:38,880 --> 00:35:42,079
is not verified by the os when you start

764
00:35:42,079 --> 00:35:42,960
an application

765
00:35:42,960 --> 00:35:46,720
so you need to do it yourself if you

766
00:35:46,720 --> 00:35:48,400
if you need to support this type of

767
00:35:48,400 --> 00:35:50,720
files

768
00:35:51,680 --> 00:35:54,960
the server side so if you use

769
00:35:54,960 --> 00:35:58,480
the nsx pc framework for

770
00:35:58,480 --> 00:36:00,960
xbc communication then there is the

771
00:36:00,960 --> 00:36:03,599
should accept new connection

772
00:36:03,599 --> 00:36:06,160
uh method which is basically handling

773
00:36:06,160 --> 00:36:08,079
any all of the incoming connection

774
00:36:08,079 --> 00:36:11,440
and this is where you decide if

775
00:36:11,440 --> 00:36:13,920
an incoming connection is accepted or

776
00:36:13,920 --> 00:36:14,560
not

777
00:36:14,560 --> 00:36:18,240
if you use the odd cxpc api

778
00:36:18,240 --> 00:36:21,200
then the connection handler can do the

779
00:36:21,200 --> 00:36:23,200
same verification

780
00:36:23,200 --> 00:36:26,160
basically uh so the first one is it's

781
00:36:26,160 --> 00:36:27,200
very important that you

782
00:36:27,200 --> 00:36:29,359
must verify that the connecting client

783
00:36:29,359 --> 00:36:30,400
has a cert

784
00:36:30,400 --> 00:36:34,400
that is signed by apple uh second

785
00:36:34,400 --> 00:36:38,079
uh the connecting process must be signed

786
00:36:38,079 --> 00:36:38,960
by your

787
00:36:38,960 --> 00:36:42,800
um team id third

788
00:36:42,800 --> 00:36:46,880
now you probably also need to check if

789
00:36:46,880 --> 00:36:48,320
you

790
00:36:48,320 --> 00:36:50,000
uh the bundle id of the connecting

791
00:36:50,000 --> 00:36:51,839
client although if you only have a

792
00:36:51,839 --> 00:36:53,440
single application

793
00:36:53,440 --> 00:36:56,640
it's not it's not a hard requirement

794
00:36:56,640 --> 00:37:00,240
but if you support multiple applications

795
00:37:00,240 --> 00:37:03,280
uh this is a good practice and the last

796
00:37:03,280 --> 00:37:03,680
one

797
00:37:03,680 --> 00:37:06,800
here you can take two parts one is

798
00:37:06,800 --> 00:37:11,599
you can check the uh the code signing

799
00:37:11,599 --> 00:37:14,480
information of the client uh during

800
00:37:14,480 --> 00:37:15,920
runtime so you can check

801
00:37:15,920 --> 00:37:18,560
if it's signed with hardened runtime or

802
00:37:18,560 --> 00:37:19,280
if it's

803
00:37:19,280 --> 00:37:23,440
signed with library validation and

804
00:37:23,440 --> 00:37:26,880
if so then you need to also check

805
00:37:26,880 --> 00:37:30,720
if they process uh any of the

806
00:37:30,720 --> 00:37:33,839
entitlements that make them vulnerable

807
00:37:33,839 --> 00:37:36,160
like the get task hello and the disabled

808
00:37:36,160 --> 00:37:38,480
library validation

809
00:37:38,480 --> 00:37:41,760
you what you can also do here is if you

810
00:37:41,760 --> 00:37:43,040
know let's say that your

811
00:37:43,040 --> 00:37:46,320
client version 10

812
00:37:46,320 --> 00:37:48,960
is hardened and it's properly fixed and

813
00:37:48,960 --> 00:37:50,800
no one can inject any code

814
00:37:50,800 --> 00:37:54,079
into your patient and client you can

815
00:37:54,079 --> 00:37:56,000
verify the

816
00:37:56,000 --> 00:37:57,839
the software version of the connecting

817
00:37:57,839 --> 00:37:59,119
client and say

818
00:37:59,119 --> 00:38:02,160
i only allow clients above version 10.

819
00:38:02,160 --> 00:38:04,240
so basically this mitigates the issue

820
00:38:04,240 --> 00:38:05,200
where

821
00:38:05,200 --> 00:38:08,640
we can use an old let's say version 7

822
00:38:08,640 --> 00:38:10,640
of the client and connect to the xbc

823
00:38:10,640 --> 00:38:12,000
service

824
00:38:12,000 --> 00:38:16,320
likely the first way is more scalable

825
00:38:16,320 --> 00:38:19,520
in the long run but basically both of

826
00:38:19,520 --> 00:38:20,000
them

827
00:38:20,000 --> 00:38:23,119
is a is a good way to do it and to

828
00:38:23,119 --> 00:38:25,200
mitigate the process id attacks

829
00:38:25,200 --> 00:38:29,359
um someone is must use audit tokens

830
00:38:29,359 --> 00:38:32,079
uh to identify the clients now the issue

831
00:38:32,079 --> 00:38:32,640
here

832
00:38:32,640 --> 00:38:36,560
is that the audit token api

833
00:38:36,560 --> 00:38:40,640
is private to apple

834
00:38:40,640 --> 00:38:43,760
and and it's not a public api

835
00:38:43,760 --> 00:38:47,440
you can still use it with a few tricks

836
00:38:47,440 --> 00:38:50,960
in your code so it's not impossible but

837
00:38:50,960 --> 00:38:52,800
it poses a problem especially if you

838
00:38:52,800 --> 00:38:54,240
want to publish your

839
00:38:54,240 --> 00:38:58,079
software in the mac app store

840
00:38:58,079 --> 00:39:00,560
where you are not allowed to use uh

841
00:39:00,560 --> 00:39:03,440
private api but if you are a developer

842
00:39:03,440 --> 00:39:07,119
please please reach out to apple and

843
00:39:07,119 --> 00:39:10,000
tell them that you need this api to be

844
00:39:10,000 --> 00:39:10,800
public

845
00:39:10,800 --> 00:39:13,280
uh we did it as well and we know some

846
00:39:13,280 --> 00:39:14,960
developers did it as well

847
00:39:14,960 --> 00:39:18,480
yet it's still private so we hope

848
00:39:18,480 --> 00:39:22,640
april will listen uh one day

849
00:39:26,400 --> 00:39:30,400
voyager made a a sim

850
00:39:30,400 --> 00:39:33,920
simple xpc app uh

851
00:39:33,920 --> 00:39:37,839
which is demonstrating how to do xbc in

852
00:39:37,839 --> 00:39:41,280
a secure way so it has

853
00:39:41,280 --> 00:39:44,720
all the right checks uh and

854
00:39:44,720 --> 00:39:46,800
and if you are developer we highly

855
00:39:46,800 --> 00:39:48,320
recommend uh

856
00:39:48,320 --> 00:39:51,680
checking this out and and i really like

857
00:39:51,680 --> 00:39:55,280
uh what casey said in in the keynote uh

858
00:39:55,280 --> 00:39:58,640
that the next step of bug bounty is is

859
00:39:58,640 --> 00:40:01,760
providing uh a fix

860
00:40:01,760 --> 00:40:04,560
uh for the vendor or or obey or

861
00:40:04,560 --> 00:40:06,319
demonstrate how it can be done

862
00:40:06,319 --> 00:40:08,480
securely and basically this is what we

863
00:40:08,480 --> 00:40:10,880
try to do here

864
00:40:10,880 --> 00:40:14,240
this is a really widespread problem

865
00:40:14,240 --> 00:40:18,319
not just for antivirus software but

866
00:40:18,319 --> 00:40:21,040
everything else

867
00:40:22,480 --> 00:40:25,760
recommendations for the users um

868
00:40:25,760 --> 00:40:28,240
well we know that this is this will take

869
00:40:28,240 --> 00:40:30,319
a long time

870
00:40:30,319 --> 00:40:32,720
to get fixed by by many of these vendors

871
00:40:32,720 --> 00:40:33,760
and

872
00:40:33,760 --> 00:40:38,240
get it securely every time

873
00:40:38,240 --> 00:40:41,680
we have an application called shield

874
00:40:41,680 --> 00:40:45,440
uh which i made using apple's endpoint

875
00:40:45,440 --> 00:40:48,000
security framework

876
00:40:48,000 --> 00:40:51,280
and what it does is tries to

877
00:40:51,280 --> 00:40:56,000
mitigate all of the injection attacks

878
00:40:56,000 --> 00:40:59,680
we discussed here so this is not

879
00:40:59,680 --> 00:41:00,960
targeting

880
00:41:00,960 --> 00:41:04,960
xpc specifically but blocking injections

881
00:41:04,960 --> 00:41:08,720
and because all of our xpc attacks

882
00:41:08,720 --> 00:41:10,560
uh or most of them i would say not all

883
00:41:10,560 --> 00:41:12,880
but most are based on injection

884
00:41:12,880 --> 00:41:16,079
uh these two can easily mitigate uh many

885
00:41:16,079 --> 00:41:17,440
of the exploits we

886
00:41:17,440 --> 00:41:20,880
demonstrated and it's also available

887
00:41:20,880 --> 00:41:21,440
from

888
00:41:21,440 --> 00:41:25,200
github onenote is that some

889
00:41:25,200 --> 00:41:29,119
injections can be used in a legit way

890
00:41:29,119 --> 00:41:32,160
so you need to sometimes turn it off

891
00:41:32,160 --> 00:41:33,839
especially if you are a developer and

892
00:41:33,839 --> 00:41:36,000
try to debug application

893
00:41:36,000 --> 00:41:39,200
um then the task 4p

894
00:41:39,200 --> 00:41:41,839
injection for example is done in a in a

895
00:41:41,839 --> 00:41:44,480
legit way

896
00:41:45,440 --> 00:41:48,560
so here is the clamp cev

897
00:41:48,560 --> 00:41:51,599
demo again but now with shield running

898
00:41:51,599 --> 00:41:54,400
in the background

899
00:41:54,640 --> 00:41:57,200
uh so we try to do the injection again

900
00:41:57,200 --> 00:41:57,680
and

901
00:41:57,680 --> 00:41:59,839
you see there is a pop-up from here that

902
00:41:59,839 --> 00:42:01,680
the injection was blocked

903
00:42:01,680 --> 00:42:04,480
and if we check the launch demon folder

904
00:42:04,480 --> 00:42:05,119
again

905
00:42:05,119 --> 00:42:08,160
we can see that

906
00:42:08,960 --> 00:42:12,079
there was there was no new b list

907
00:42:12,079 --> 00:42:14,640
showing up so the previous escalation

908
00:42:14,640 --> 00:42:17,280
was mitigated

909
00:42:17,280 --> 00:42:20,960
uh and lastly the the future

910
00:42:20,960 --> 00:42:24,079
how we see uh the future of xbc

911
00:42:24,079 --> 00:42:26,960
and and uh all these bugs and and

912
00:42:26,960 --> 00:42:28,839
everything

913
00:42:28,839 --> 00:42:31,680
uh unfortunately it's

914
00:42:31,680 --> 00:42:34,720
dark at this point and there are many

915
00:42:34,720 --> 00:42:36,160
many reasons to this

916
00:42:36,160 --> 00:42:38,640
um the very first one is there is no

917
00:42:38,640 --> 00:42:41,280
secure public api from apple

918
00:42:41,280 --> 00:42:44,880
um what we mentioned

919
00:42:44,880 --> 00:42:48,079
earlier second apple's

920
00:42:48,079 --> 00:42:51,440
same record for xbc all of it

921
00:42:51,440 --> 00:42:54,800
is insecure so when people

922
00:42:54,800 --> 00:42:57,040
start to learn developers start to learn

923
00:42:57,040 --> 00:42:59,359
xpc and how to do it they will like turn

924
00:42:59,359 --> 00:43:01,440
to apple simple code

925
00:43:01,440 --> 00:43:04,560
um implement that and that will be

926
00:43:04,560 --> 00:43:05,200
insecure

927
00:43:05,200 --> 00:43:08,560
and and we actually saw applications

928
00:43:08,560 --> 00:43:11,760
two apps called as is and

929
00:43:11,760 --> 00:43:15,520
and use that um

930
00:43:15,520 --> 00:43:17,920
the next thing is many antivirus centers

931
00:43:17,920 --> 00:43:19,839
uh used kernel extensions

932
00:43:19,839 --> 00:43:23,920
in the past now they won't work

933
00:43:23,920 --> 00:43:26,880
beyond bixer or even if they do steal

934
00:43:26,880 --> 00:43:28,960
because they are not using those api

935
00:43:28,960 --> 00:43:30,560
that were deprecated

936
00:43:30,560 --> 00:43:33,119
soon the rest will be blightly

937
00:43:33,119 --> 00:43:35,520
deprecated as well and they will have to

938
00:43:35,520 --> 00:43:35,920
move

939
00:43:35,920 --> 00:43:39,200
to the new way of developing

940
00:43:39,200 --> 00:43:41,200
uh security software which is system

941
00:43:41,200 --> 00:43:42,480
extensions uh

942
00:43:42,480 --> 00:43:46,880
sext uh that is what is supported now by

943
00:43:46,880 --> 00:43:47,520
apple

944
00:43:47,520 --> 00:43:51,200
and with using sext the ipc

945
00:43:51,200 --> 00:43:52,560
recommendation from apple

946
00:43:52,560 --> 00:43:56,079
is to use xpc uh

947
00:43:56,079 --> 00:43:58,480
on the camera extension there are other

948
00:43:58,480 --> 00:43:59,200
ways to do

949
00:43:59,200 --> 00:44:03,119
ipc not not really xpc

950
00:44:03,119 --> 00:44:05,680
and again the problem here that what

951
00:44:05,680 --> 00:44:08,640
pepper provides for the

952
00:44:08,640 --> 00:44:12,000
system exam system extension sample code

953
00:44:12,000 --> 00:44:12,960
xpc

954
00:44:12,960 --> 00:44:16,800
that's not secure as well

955
00:44:16,800 --> 00:44:19,920
and likely these vendors these

956
00:44:19,920 --> 00:44:23,520
av vendors will not have

957
00:44:23,520 --> 00:44:26,560
any xbc experience or likely

958
00:44:26,560 --> 00:44:30,400
won't have and because of the previous

959
00:44:30,400 --> 00:44:31,359
they will likely

960
00:44:31,359 --> 00:44:35,520
implement it in an insecure way and

961
00:44:35,520 --> 00:44:38,640
this will bring in a whole lot of uh new

962
00:44:38,640 --> 00:44:39,920
vulnerabilities

963
00:44:39,920 --> 00:44:43,520
uh in these areas so we hope they

964
00:44:43,520 --> 00:44:46,560
uh they watch this talk and and learn

965
00:44:46,560 --> 00:44:49,599
from others mistake and

966
00:44:49,599 --> 00:44:54,480
will implement xpc in a in a secure way

967
00:44:54,640 --> 00:44:57,440
if you are doing bug bounties then yes

968
00:44:57,440 --> 00:44:58,800
vulnerabilities are cool

969
00:44:58,800 --> 00:45:02,960
um like you can earn money with that but

970
00:45:02,960 --> 00:45:06,720
also it's bad for the overall

971
00:45:06,720 --> 00:45:12,160
users as there are there will be issues

972
00:45:12,160 --> 00:45:14,799
out there

973
00:45:15,599 --> 00:45:19,200
some further resources if you

974
00:45:19,200 --> 00:45:23,040
want to dive into xpc

975
00:45:23,040 --> 00:45:27,520
and xpc exploitation this is a list of

976
00:45:27,520 --> 00:45:30,800
stocks from other previous

977
00:45:30,800 --> 00:45:36,400
security conference is talking about xbc

978
00:45:37,040 --> 00:45:38,960
as you can see the very first one came

979
00:45:38,960 --> 00:45:41,839
from beyond beer back in 2015

980
00:45:41,839 --> 00:45:46,880
we are in 2021 and this is still a thing

981
00:45:49,920 --> 00:45:52,880
that was it from both of us thank you

982
00:45:52,880 --> 00:45:55,599
for listening and

983
00:45:55,599 --> 00:45:58,839
let me let us know if there are any

984
00:45:58,839 --> 00:46:01,200
questions

985
00:46:01,200 --> 00:46:04,160
thank you chaba and wojciech for this

986
00:46:04,160 --> 00:46:15,680
interesting presentation

987
00:46:15,680 --> 00:46:17,759
you

