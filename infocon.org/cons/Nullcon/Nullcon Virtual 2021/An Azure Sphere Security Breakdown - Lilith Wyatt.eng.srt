1
00:00:00,000 --> 00:00:14,639
[Music]

2
00:00:14,639 --> 00:00:15,679
this conference

3
00:00:15,679 --> 00:00:18,560
nulcon online 2021 edition would have

4
00:00:18,560 --> 00:00:20,640
not been successful without the support

5
00:00:20,640 --> 00:00:22,240
of our sponsors

6
00:00:22,240 --> 00:00:25,760
uh so yeah if you are interested uh

7
00:00:25,760 --> 00:00:28,560
to see for any job openings in our

8
00:00:28,560 --> 00:00:30,000
sponsor companies please do

9
00:00:30,000 --> 00:00:32,320
check out our courier page on the nulcon

10
00:00:32,320 --> 00:00:34,320
website uh they have some really amazing

11
00:00:34,320 --> 00:00:35,040
openings

12
00:00:35,040 --> 00:00:37,120
uh and you can work from home as well so

13
00:00:37,120 --> 00:00:38,320
you don't have to travel

14
00:00:38,320 --> 00:00:41,440
so yeah uh the next talk uh

15
00:00:41,440 --> 00:00:44,960
is uh by lilith uh

16
00:00:44,960 --> 00:00:48,079
2020 has taught us all how to

17
00:00:48,079 --> 00:00:51,840
work uh remotely and online

18
00:00:51,840 --> 00:00:55,039
organize more uh collaborative uh

19
00:00:55,039 --> 00:00:58,160
mechanisms to work online digitally so

20
00:00:58,160 --> 00:00:59,520
microsoft azure

21
00:00:59,520 --> 00:01:02,800
had a three-month bug hunt challenge

22
00:01:02,800 --> 00:01:05,760
and uh lilith uh reported 16

23
00:01:05,760 --> 00:01:06,720
vulnerabilities

24
00:01:06,720 --> 00:01:10,080
on these custom socs and patched linux

25
00:01:10,080 --> 00:01:11,040
kernels

26
00:01:11,040 --> 00:01:13,200
gaining privilege escalations and a lot

27
00:01:13,200 --> 00:01:14,320
more

28
00:01:14,320 --> 00:01:17,200
so lilith is part of the cisco dallas

29
00:01:17,200 --> 00:01:17,840
team

30
00:01:17,840 --> 00:01:21,439
and she focuses on iot security

31
00:01:21,439 --> 00:01:24,880
she's a trained boxer which i think is

32
00:01:24,880 --> 00:01:28,320
super cool and amazing uh so yeah let it

33
00:01:28,320 --> 00:01:30,560
i would request you to start your

34
00:01:30,560 --> 00:01:32,240
presentation

35
00:01:32,240 --> 00:01:36,320
all right here we go all right uh

36
00:01:36,320 --> 00:01:39,119
one sec uh sharing the correct screen

37
00:01:39,119 --> 00:01:40,560
okay here we go

38
00:01:40,560 --> 00:01:43,840
hi everyone um so my name is louis

39
00:01:43,840 --> 00:01:47,200
um as as previously introduced i am from

40
00:01:47,200 --> 00:01:48,720
cisco talos

41
00:01:48,720 --> 00:01:50,240
uh and today we're talking about the

42
00:01:50,240 --> 00:01:51,920
azure sphere custom

43
00:01:51,920 --> 00:01:56,159
soc um i am a researcher from cisco

44
00:01:56,159 --> 00:01:56,799
telus

45
00:01:56,799 --> 00:01:58,799
i'm on the vault dev team we just hunt

46
00:01:58,799 --> 00:02:00,240
odays and products

47
00:02:00,240 --> 00:02:02,399
uh we get a lot of freedom for what we

48
00:02:02,399 --> 00:02:03,840
look at we've got people

49
00:02:03,840 --> 00:02:07,280
looking at like mac os windows kernel

50
00:02:07,280 --> 00:02:09,520
i typically focus more on like linux

51
00:02:09,520 --> 00:02:11,038
kernel and iot stuff

52
00:02:11,038 --> 00:02:14,080
and networking uh so the the idea is we

53
00:02:14,080 --> 00:02:15,920
take our odays then we take the

54
00:02:15,920 --> 00:02:16,720
signatures

55
00:02:16,720 --> 00:02:19,200
we throw them in like snort or amp or

56
00:02:19,200 --> 00:02:20,319
like all of our

57
00:02:20,319 --> 00:02:23,120
antivirus and signature products so

58
00:02:23,120 --> 00:02:25,200
that's the reason we exist and so

59
00:02:25,200 --> 00:02:27,440
i have a github uh i don't know that

60
00:02:27,440 --> 00:02:28,640
that's basically it for me

61
00:02:28,640 --> 00:02:31,040
um i have to do an obligatory shout out

62
00:02:31,040 --> 00:02:32,720
because i didn't do this work alone i

63
00:02:32,720 --> 00:02:33,360
have a

64
00:02:33,360 --> 00:02:35,360
teammate claudio bozzato who i always

65
00:02:35,360 --> 00:02:36,879
work with because he's

66
00:02:36,879 --> 00:02:39,840
a cool dude um so i always have the

67
00:02:39,840 --> 00:02:40,959
slide here because

68
00:02:40,959 --> 00:02:43,599
like uh i don't know i feel bad giving

69
00:02:43,599 --> 00:02:45,440
these talks without them or something i

70
00:02:45,440 --> 00:02:45,840
don't

71
00:02:45,840 --> 00:02:48,879
 know anyways so for the

72
00:02:48,879 --> 00:02:50,480
presentation

73
00:02:50,480 --> 00:02:52,800
this little bastard so this is the this

74
00:02:52,800 --> 00:02:54,160
is the azure sphere

75
00:02:54,160 --> 00:02:57,879
um this little thingy thing here uh the

76
00:02:57,879 --> 00:03:00,560
mt-3600 um well yeah

77
00:03:00,560 --> 00:03:03,200
uh as mentioned before uh microsoft

78
00:03:03,200 --> 00:03:04,640
hosted like a

79
00:03:04,640 --> 00:03:06,640
three month vulnerability challenge uh

80
00:03:06,640 --> 00:03:08,959
we were invited to participate a lot of

81
00:03:08,959 --> 00:03:10,239
different companies

82
00:03:10,239 --> 00:03:11,680
participated i don't know how many

83
00:03:11,680 --> 00:03:13,920
people actually worked on this thing but

84
00:03:13,920 --> 00:03:16,480
there's like 70 people in the slack chat

85
00:03:16,480 --> 00:03:17,440
room so

86
00:03:17,440 --> 00:03:20,640
if that's any like indication um

87
00:03:20,640 --> 00:03:23,120
but yeah it was essentially like a ctf

88
00:03:23,120 --> 00:03:24,319
on a production

89
00:03:24,319 --> 00:03:26,319
unlike this little device thing and it

90
00:03:26,319 --> 00:03:28,080
got patched every month which was a pain

91
00:03:28,080 --> 00:03:29,440
in the ass

92
00:03:29,440 --> 00:03:34,159
um as mentioned uh it is the mt3620

93
00:03:34,159 --> 00:03:35,440
which is a custom

94
00:03:35,440 --> 00:03:38,319
microsoft slash meteotech sock uh it's

95
00:03:38,319 --> 00:03:39,360
four cores

96
00:03:39,360 --> 00:03:43,200
uh you got three cortex m4s and a cortex

97
00:03:43,200 --> 00:03:46,560
a7 uh all 32-bit arm v7

98
00:03:46,560 --> 00:03:49,519
uh it keeps its linux kernel relatively

99
00:03:49,519 --> 00:03:51,360
up-to-date so you're looking at like the

100
00:03:51,360 --> 00:03:52,080
5-4

101
00:03:52,080 --> 00:03:54,319
branch and above i think it's they start

102
00:03:54,319 --> 00:03:56,080
at like 5-4

103
00:03:56,080 --> 00:04:00,400
that like oh when we started but anyways

104
00:04:00,400 --> 00:04:03,439
so the linux kernel runs on the a7 and

105
00:04:03,439 --> 00:04:04,080
then you got

106
00:04:04,080 --> 00:04:06,560
two cortex m4s that can run like

107
00:04:06,560 --> 00:04:08,239
real-time rtos

108
00:04:08,239 --> 00:04:11,920
custom applications um so the the idea

109
00:04:11,920 --> 00:04:14,000
is like your developers will flash

110
00:04:14,000 --> 00:04:16,639
applications to this hard and hardened

111
00:04:16,639 --> 00:04:17,759
iot device

112
00:04:17,759 --> 00:04:19,279
so you don't have to deal with like

113
00:04:19,279 --> 00:04:21,120
custom hardware custom

114
00:04:21,120 --> 00:04:23,280
firmware custom kernel or anything like

115
00:04:23,280 --> 00:04:25,040
microsoft's trying to take care of all

116
00:04:25,040 --> 00:04:26,160
that for you

117
00:04:26,160 --> 00:04:28,320
and then you flash your application and

118
00:04:28,320 --> 00:04:30,720
then uh the device like takes

119
00:04:30,720 --> 00:04:32,400
make sure it's all secure and like can

120
00:04:32,400 --> 00:04:34,479
do cloud stuff you know

121
00:04:34,479 --> 00:04:37,520
um so uh continuing on

122
00:04:37,520 --> 00:04:39,600
uh because it's arm it has the arm

123
00:04:39,600 --> 00:04:42,479
trusted environment the teeth um

124
00:04:42,479 --> 00:04:45,759
that is uh there's two main like

125
00:04:45,759 --> 00:04:48,400
really secure parts of the device which

126
00:04:48,400 --> 00:04:49,759
are security monitor

127
00:04:49,759 --> 00:04:52,240
which could be found at slash dev uh

128
00:04:52,240 --> 00:04:53,440
security monitor

129
00:04:53,440 --> 00:04:56,800
and then slash dev slash uh which is

130
00:04:56,800 --> 00:04:57,759
like the secure

131
00:04:57,759 --> 00:04:59,680
processor for like handling keys

132
00:04:59,680 --> 00:05:01,680
handling crypto handling like

133
00:05:01,680 --> 00:05:05,039
hardware rng and so forth so

134
00:05:05,039 --> 00:05:08,800
continuing on uh but yeah so the device

135
00:05:08,800 --> 00:05:10,000
has a lot of cloud

136
00:05:10,000 --> 00:05:13,039
functionality um the device

137
00:05:13,039 --> 00:05:15,440
actually has to authenticate to the

138
00:05:15,440 --> 00:05:16,479
cloud

139
00:05:16,479 --> 00:05:19,120
in order to gain uh access to the

140
00:05:19,120 --> 00:05:21,280
network services that azure's

141
00:05:21,280 --> 00:05:24,400
uh like that the microsoft azure cloud

142
00:05:24,400 --> 00:05:25,440
provides so

143
00:05:25,440 --> 00:05:28,720
if your device has been compromised uh

144
00:05:28,720 --> 00:05:30,880
and like something's gone wrong with it

145
00:05:30,880 --> 00:05:32,880
uh odds are it's probably not gonna be

146
00:05:32,880 --> 00:05:33,360
able to

147
00:05:33,360 --> 00:05:36,240
successfully pass verification because

148
00:05:36,240 --> 00:05:37,440
there's like a hash

149
00:05:37,440 --> 00:05:39,600
of every application done and it's it's

150
00:05:39,600 --> 00:05:41,120
super secure and stuff

151
00:05:41,120 --> 00:05:42,960
anyways i didn't really pay much

152
00:05:42,960 --> 00:05:44,400
attention to that because it wasn't in i

153
00:05:44,400 --> 00:05:45,440
didn't really care

154
00:05:45,440 --> 00:05:48,880
um but yeah anyways so

155
00:05:48,880 --> 00:05:52,400
uh continuing on um

156
00:05:52,400 --> 00:05:55,039
so what we did uh you can flash

157
00:05:55,039 --> 00:05:56,800
applications in two ways

158
00:05:56,800 --> 00:05:58,960
uh if it's in a developer mode you can

159
00:05:58,960 --> 00:06:00,319
flash it via usb

160
00:06:00,319 --> 00:06:02,080
and the little usb port thing in the

161
00:06:02,080 --> 00:06:04,960
back alternatively you can also

162
00:06:04,960 --> 00:06:08,319
push your application via the cloud um

163
00:06:08,319 --> 00:06:10,000
but that's if it's in like production

164
00:06:10,000 --> 00:06:11,440
mode so

165
00:06:11,440 --> 00:06:15,039
um some more like cool

166
00:06:15,039 --> 00:06:17,919
novel things about the device is that

167
00:06:17,919 --> 00:06:18,720
all

168
00:06:18,720 --> 00:06:21,759
applications and firmware on the device

169
00:06:21,759 --> 00:06:24,319
consist of this uh let me see if i can

170
00:06:24,319 --> 00:06:25,759
get a laser pointer going

171
00:06:25,759 --> 00:06:28,560
uh oh can you see that hopefully uh this

172
00:06:28,560 --> 00:06:30,400
this asxip

173
00:06:30,400 --> 00:06:33,120
fs i just call it acip because it's

174
00:06:33,120 --> 00:06:34,479
easier to pronounce

175
00:06:34,479 --> 00:06:37,039
uh but all asset partitions are

176
00:06:37,039 --> 00:06:38,080
non-writable

177
00:06:38,080 --> 00:06:41,039
uh you just the the kernel driver does

178
00:06:41,039 --> 00:06:42,080
not have a right

179
00:06:42,080 --> 00:06:44,240
function so it just it just came

180
00:06:44,240 --> 00:06:45,520
right uh

181
00:06:45,520 --> 00:06:48,720
but it can execute and so it's a special

182
00:06:48,720 --> 00:06:50,960
type of partition called a

183
00:06:50,960 --> 00:06:54,560
xip partition uh such that it doesn't

184
00:06:54,560 --> 00:06:55,120
actually

185
00:06:55,120 --> 00:06:57,919
load this flash memory into ram when it

186
00:06:57,919 --> 00:06:58,560
executes

187
00:06:58,560 --> 00:07:00,639
it executes it straight from the flash

188
00:07:00,639 --> 00:07:02,240
which is why it's called execute in

189
00:07:02,240 --> 00:07:03,039
place

190
00:07:03,039 --> 00:07:05,840
uh it's pretty neat um the other thing

191
00:07:05,840 --> 00:07:07,599
that is really neat about it is that the

192
00:07:07,599 --> 00:07:08,639
only writable

193
00:07:08,639 --> 00:07:11,440
memory on the device uh is in a

194
00:07:11,440 --> 00:07:13,680
particular partition slash mount

195
00:07:13,680 --> 00:07:17,199
config which is a particular partition

196
00:07:17,199 --> 00:07:20,639
it's just there um the cool thing is

197
00:07:20,639 --> 00:07:21,440
though

198
00:07:21,440 --> 00:07:23,919
the you can't write to anywhere in

199
00:07:23,919 --> 00:07:24,560
memory

200
00:07:24,560 --> 00:07:26,400
that you can execute and you can't

201
00:07:26,400 --> 00:07:28,720
execute anywhere on the device that you

202
00:07:28,720 --> 00:07:29,440
can write to

203
00:07:29,440 --> 00:07:32,560
so uh if you're familiar with like um

204
00:07:32,560 --> 00:07:35,840
what is it uh nxp or sorry what's the

205
00:07:35,840 --> 00:07:38,880
execute or right that's the

206
00:07:38,880 --> 00:07:41,199
i forget the official name whatever like

207
00:07:41,199 --> 00:07:42,000
you can't

208
00:07:42,000 --> 00:07:44,720
write shell code to this device normally

209
00:07:44,720 --> 00:07:45,120
and then

210
00:07:45,120 --> 00:07:47,919
execute it that is like considered a bug

211
00:07:47,919 --> 00:07:50,000
for this device whereas like normally

212
00:07:50,000 --> 00:07:52,160
you know on a linux device you've got

213
00:07:52,160 --> 00:07:54,000
like 30 different ways to execute shell

214
00:07:54,000 --> 00:07:55,039
code on this thing

215
00:07:55,039 --> 00:07:56,639
you're not supposed to be able to do it

216
00:07:56,639 --> 00:07:58,319
so um

217
00:07:58,319 --> 00:08:00,160
another interesting thing about this

218
00:08:00,160 --> 00:08:02,960
thing is that when uh when a developer

219
00:08:02,960 --> 00:08:06,199
flashes an application uh it needs an

220
00:08:06,199 --> 00:08:08,400
manifest.json which is like a schema

221
00:08:08,400 --> 00:08:10,560
file for what it's allowed to actually

222
00:08:10,560 --> 00:08:14,000
do and uh this may sound interesting

223
00:08:14,000 --> 00:08:17,520
but like even for such trivial trivial

224
00:08:17,520 --> 00:08:18,240
tasks

225
00:08:18,240 --> 00:08:21,120
is like connecting to one ip address it

226
00:08:21,120 --> 00:08:23,840
has to be defined in your json file

227
00:08:23,840 --> 00:08:25,680
even if you want to have like four

228
00:08:25,680 --> 00:08:26,960
kilobytes of storage

229
00:08:26,960 --> 00:08:28,759
that needs to be defined in the app

230
00:08:28,759 --> 00:08:30,479
manifest.json so

231
00:08:30,479 --> 00:08:33,039
it's very granular and pretty locked

232
00:08:33,039 --> 00:08:34,240
down

233
00:08:34,240 --> 00:08:36,640
um so in this slide we can see like this

234
00:08:36,640 --> 00:08:37,839
is an example

235
00:08:37,839 --> 00:08:41,279
of a manifest.json uh

236
00:08:41,279 --> 00:08:43,760
this component id is just an identifier

237
00:08:43,760 --> 00:08:45,120
um

238
00:08:45,120 --> 00:08:47,040
these capability fields are like

239
00:08:47,040 --> 00:08:49,360
defining what exactly is this device

240
00:08:49,360 --> 00:08:50,880
allowed to do

241
00:08:50,880 --> 00:08:53,680
um so it only has 64 kilobytes of

242
00:08:53,680 --> 00:08:54,240
storage

243
00:08:54,240 --> 00:08:57,839
it can only uh bind tcp ports

244
00:08:57,839 --> 00:08:59,760
five five five five and four four four

245
00:08:59,760 --> 00:09:02,240
four and it's only allowed to connect to

246
00:09:02,240 --> 00:09:04,000
one ip address so

247
00:09:04,000 --> 00:09:08,240
uh these are these are enforced by the

248
00:09:08,240 --> 00:09:11,839
by a lot of permissions so like if you

249
00:09:11,839 --> 00:09:13,760
phone this device if you open an

250
00:09:13,760 --> 00:09:16,160
application running on this device

251
00:09:16,160 --> 00:09:18,160
and then say you try to connect back to

252
00:09:18,160 --> 00:09:19,279
your dia you know

253
00:09:19,279 --> 00:09:21,040
you try to connect back to your cnc

254
00:09:21,040 --> 00:09:22,399
server like

255
00:09:22,399 --> 00:09:25,440
unless it's defined in this uh schema

256
00:09:25,440 --> 00:09:26,000
file

257
00:09:26,000 --> 00:09:27,519
or you find another vulnerability to

258
00:09:27,519 --> 00:09:29,440
bypass this um

259
00:09:29,440 --> 00:09:30,880
you're not going to be able to do that

260
00:09:30,880 --> 00:09:32,800
so that's the idea of why all of this

261
00:09:32,800 --> 00:09:33,920
exists

262
00:09:33,920 --> 00:09:36,320
so continuing on this is like a

263
00:09:36,320 --> 00:09:37,680
high-level overview

264
00:09:37,680 --> 00:09:40,240
uh for the managers uh but not not as

265
00:09:40,240 --> 00:09:41,519
technical folk

266
00:09:41,519 --> 00:09:44,959
um our it's a nice graphic i like it

267
00:09:44,959 --> 00:09:48,080
um we have our cortex a7 here

268
00:09:48,080 --> 00:09:50,720
normal linux is inside the a7 we have

269
00:09:50,720 --> 00:09:51,920
our device drivers

270
00:09:51,920 --> 00:09:54,160
you have pluton here which you can talk

271
00:09:54,160 --> 00:09:55,839
to via this driver

272
00:09:55,839 --> 00:09:58,399
uh you have slash dev security monitor

273
00:09:58,399 --> 00:09:59,920
which lets you talk to the arm

274
00:09:59,920 --> 00:10:02,640
trust zone and then there's assorted

275
00:10:02,640 --> 00:10:04,720
other things um

276
00:10:04,720 --> 00:10:07,760
for the more complex version for for

277
00:10:07,760 --> 00:10:10,560
my homies out there my nerds uh we have

278
00:10:10,560 --> 00:10:12,560
an ascii diagram too

279
00:10:12,560 --> 00:10:14,959
um if you want to i don't know look back

280
00:10:14,959 --> 00:10:15,920
at the the

281
00:10:15,920 --> 00:10:17,519
slides if you actually care about this

282
00:10:17,519 --> 00:10:19,040
i'm not going to go through it all

283
00:10:19,040 --> 00:10:21,680
it's not that important but what is

284
00:10:21,680 --> 00:10:22,880
important is that

285
00:10:22,880 --> 00:10:26,160
uh for the for the azure sphere security

286
00:10:26,160 --> 00:10:27,680
research challenge

287
00:10:27,680 --> 00:10:31,519
um there are quite a few things in scope

288
00:10:31,519 --> 00:10:32,000
uh

289
00:10:32,000 --> 00:10:33,839
the main things they wanted to know are

290
00:10:33,839 --> 00:10:36,079
if you could get on pluton or

291
00:10:36,079 --> 00:10:39,279
the secure world um i didn't care about

292
00:10:39,279 --> 00:10:39,760
this

293
00:10:39,760 --> 00:10:42,800
uh the the most interesting thing uh in

294
00:10:42,800 --> 00:10:44,320
my opinion was that

295
00:10:44,320 --> 00:10:46,079
anything allowing unsigned code

296
00:10:46,079 --> 00:10:47,839
execution that isn't raw

297
00:10:47,839 --> 00:10:49,600
was considered a vulnerability so like i

298
00:10:49,600 --> 00:10:51,440
said before if you can take

299
00:10:51,440 --> 00:10:53,920
shell code put it on the device and then

300
00:10:53,920 --> 00:10:55,279
execute it it's considered a

301
00:10:55,279 --> 00:10:56,640
vulnerability and that's

302
00:10:56,640 --> 00:10:58,959
something that that's novel that has not

303
00:10:58,959 --> 00:11:00,079
been done before

304
00:11:00,079 --> 00:11:02,480
and so uh it was a really interesting

305
00:11:02,480 --> 00:11:03,920
protection that we thought and we

306
00:11:03,920 --> 00:11:07,200
we bypassed it in quite a few ways um

307
00:11:07,200 --> 00:11:10,000
but yeah uh one another interesting

308
00:11:10,000 --> 00:11:10,959
thing though they didn't really care

309
00:11:10,959 --> 00:11:12,880
about any doses which i found

310
00:11:12,880 --> 00:11:15,760
kind of funny even if your dos like

311
00:11:15,760 --> 00:11:17,279
bricks the device they didn't they

312
00:11:17,279 --> 00:11:18,560
didn't really care

313
00:11:18,560 --> 00:11:20,560
um but yeah so these are all the

314
00:11:20,560 --> 00:11:22,079
vulnerabilities we discovered

315
00:11:22,079 --> 00:11:25,120
uh i believe it was 16. if i can count

316
00:11:25,120 --> 00:11:26,320
that high

317
00:11:26,320 --> 00:11:29,120
um so we had i'm not gonna i'm not i

318
00:11:29,120 --> 00:11:30,800
obviously don't have time to cover all

319
00:11:30,800 --> 00:11:31,680
these

320
00:11:31,680 --> 00:11:34,240
um but so these are the cool

321
00:11:34,240 --> 00:11:36,000
vulnerabilities because admittedly there

322
00:11:36,000 --> 00:11:36,480
are

323
00:11:36,480 --> 00:11:38,880
a few lame vulnerabilities but a bug is

324
00:11:38,880 --> 00:11:40,160
a bug right

325
00:11:40,160 --> 00:11:44,320
um so but because of time constraints

326
00:11:44,320 --> 00:11:46,160
we're we're not going to cover that many

327
00:11:46,160 --> 00:11:47,519
um

328
00:11:47,519 --> 00:11:49,839
so these four down here the ones in

329
00:11:49,839 --> 00:11:52,240
orange were our escalation chain

330
00:11:52,240 --> 00:11:54,079
uh so we're going to cover the privilege

331
00:11:54,079 --> 00:11:55,600
escalation chain

332
00:11:55,600 --> 00:11:58,160
going from installing an app to having

333
00:11:58,160 --> 00:11:59,920
azure sphere capabilities

334
00:11:59,920 --> 00:12:02,079
which is the highest credentials you can

335
00:12:02,079 --> 00:12:03,600
have in the

336
00:12:03,600 --> 00:12:06,959
uh normal the in the normal world uh

337
00:12:06,959 --> 00:12:08,880
sorry the linux normal world on the

338
00:12:08,880 --> 00:12:10,480
cortex a7

339
00:12:10,480 --> 00:12:12,720
um i'm also going to cover uh maybe one

340
00:12:12,720 --> 00:12:13,519
or two of these

341
00:12:13,519 --> 00:12:15,680
uh the unsigned code execution bugs just

342
00:12:15,680 --> 00:12:17,839
to like give an idea of

343
00:12:17,839 --> 00:12:19,839
what it takes to actually execute shell

344
00:12:19,839 --> 00:12:21,440
code on here that's not just

345
00:12:21,440 --> 00:12:24,880
raw all right so

346
00:12:24,880 --> 00:12:27,760
uh yeah skipping this unsigned code

347
00:12:27,760 --> 00:12:28,639
execution

348
00:12:28,639 --> 00:12:31,760
so this like i

349
00:12:31,760 --> 00:12:33,839
i like it because it was novel you know

350
00:12:33,839 --> 00:12:35,200
it was something new it's a new

351
00:12:35,200 --> 00:12:37,200
protection you haven't seen it before

352
00:12:37,200 --> 00:12:39,440
so they actually had quite a few

353
00:12:39,440 --> 00:12:41,440
protections in order to

354
00:12:41,440 --> 00:12:43,279
prevent you from loading shell code and

355
00:12:43,279 --> 00:12:45,440
then running it like i mentioned before

356
00:12:45,440 --> 00:12:48,880
um only executable data that is on those

357
00:12:48,880 --> 00:12:52,240
asset partitions is sorry only data

358
00:12:52,240 --> 00:12:54,720
on the asset partitions are executable

359
00:12:54,720 --> 00:12:55,680
you cannot

360
00:12:55,680 --> 00:12:58,800
execute data on something that is not on

361
00:12:58,800 --> 00:13:00,320
an asset partition

362
00:13:00,320 --> 00:13:03,760
or on asset flash and so like i said

363
00:13:03,760 --> 00:13:06,160
those partitions are non-writable it's

364
00:13:06,160 --> 00:13:07,680
not just that they're mounted not

365
00:13:07,680 --> 00:13:09,200
writable it's that there's no

366
00:13:09,200 --> 00:13:12,000
right functionality in the kernel driver

367
00:13:12,000 --> 00:13:12,880
um

368
00:13:12,880 --> 00:13:15,839
the only writable data uh the only place

369
00:13:15,839 --> 00:13:16,560
you can write

370
00:13:16,560 --> 00:13:19,519
is on the little fs partition slash

371
00:13:19,519 --> 00:13:20,800
mount slash config

372
00:13:20,800 --> 00:13:23,680
that is not executable and then the

373
00:13:23,680 --> 00:13:26,320
little fs partition is mounted no exec

374
00:13:26,320 --> 00:13:28,320
continuing on because i know some of you

375
00:13:28,320 --> 00:13:29,760
clever people are like

376
00:13:29,760 --> 00:13:31,760
well why don't i just load shell code

377
00:13:31,760 --> 00:13:33,440
into memory and then like

378
00:13:33,440 --> 00:13:36,480
mmap executable code but they're not

379
00:13:36,480 --> 00:13:38,880
they didn't miss that so what they do is

380
00:13:38,880 --> 00:13:40,160
they have custom

381
00:13:40,160 --> 00:13:43,680
uh azure sphere linux security module

382
00:13:43,680 --> 00:13:44,959
functions to check

383
00:13:44,959 --> 00:13:48,000
certain kernel functions so if you map a

384
00:13:48,000 --> 00:13:50,160
file or if you end that memory right

385
00:13:50,160 --> 00:13:51,519
because normally if you have shell code

386
00:13:51,519 --> 00:13:52,240
you're just like

387
00:13:52,240 --> 00:13:54,320
i'm just gonna map like a

388
00:13:54,320 --> 00:13:56,399
writable and executable piece of memory

389
00:13:56,399 --> 00:14:00,800
um but uh azure sphere checks to make

390
00:14:00,800 --> 00:14:01,760
sure that

391
00:14:01,760 --> 00:14:05,120
your map request is not writable

392
00:14:05,120 --> 00:14:09,279
uh sorry if it is writable or executable

393
00:14:09,279 --> 00:14:12,880
uh you are not trying to do both at the

394
00:14:12,880 --> 00:14:14,880
same time so you cannot map

395
00:14:14,880 --> 00:14:18,079
something with wx you just can't do it

396
00:14:18,079 --> 00:14:19,600
it's prevented here

397
00:14:19,600 --> 00:14:21,440
likewise if you're trying to be more

398
00:14:21,440 --> 00:14:22,800
clever and you're like hey i'm just

399
00:14:22,800 --> 00:14:23,760
going to

400
00:14:23,760 --> 00:14:26,399
map something executable that's shared

401
00:14:26,399 --> 00:14:27,440
and then

402
00:14:27,440 --> 00:14:29,440
map it as writable and shared in another

403
00:14:29,440 --> 00:14:31,440
process and then write to it from

404
00:14:31,440 --> 00:14:33,040
this process and execute it in this

405
00:14:33,040 --> 00:14:34,560
process you can't do that

406
00:14:34,560 --> 00:14:36,720
you cannot map a shared page as

407
00:14:36,720 --> 00:14:38,880
executable that's what this says here

408
00:14:38,880 --> 00:14:42,000
continuing on because we're not done

409
00:14:42,000 --> 00:14:43,760
it gets we're getting we're getting in

410
00:14:43,760 --> 00:14:46,240
depth uh

411
00:14:46,240 --> 00:14:48,880
so that was for mmap but we also have m

412
00:14:48,880 --> 00:14:51,120
protect which is another cis call

413
00:14:51,120 --> 00:14:54,240
um likewise here if you try to unprotect

414
00:14:54,240 --> 00:14:57,519
a piece of memory as executable uh and

415
00:14:57,519 --> 00:14:58,160
writeable

416
00:14:58,160 --> 00:15:01,279
it just doesn't let you do it if

417
00:15:01,279 --> 00:15:04,399
this one's fun if a page in memory

418
00:15:04,399 --> 00:15:07,760
uh was writable uh

419
00:15:07,760 --> 00:15:09,920
sorry or is writable and then you try to

420
00:15:09,920 --> 00:15:12,000
change it to only executable you can't

421
00:15:12,000 --> 00:15:12,880
do it

422
00:15:12,880 --> 00:15:14,959
if it was only executable and then you

423
00:15:14,959 --> 00:15:16,639
try to change the writable you can't do

424
00:15:16,639 --> 00:15:17,120
it

425
00:15:17,120 --> 00:15:18,800
and likewise if it's shared you can't

426
00:15:18,800 --> 00:15:20,399
change it to executable

427
00:15:20,399 --> 00:15:22,560
and last thing i swear this is the last

428
00:15:22,560 --> 00:15:23,440
one

429
00:15:23,440 --> 00:15:26,800
um if a page was ever

430
00:15:26,800 --> 00:15:30,079
writable it cannot be executable

431
00:15:30,079 --> 00:15:32,959
if a that's what this does here it

432
00:15:32,959 --> 00:15:33,920
actually stores

433
00:15:33,920 --> 00:15:36,560
extra data in these in this may exec

434
00:15:36,560 --> 00:15:37,360
flag

435
00:15:37,360 --> 00:15:39,920
um which i'd never i didn't know about

436
00:15:39,920 --> 00:15:40,639
this before

437
00:15:40,639 --> 00:15:42,560
so i mean hell i didn't really know

438
00:15:42,560 --> 00:15:44,320
about much kernel stuff for this but

439
00:15:44,320 --> 00:15:47,120
oh wait it wasn't the last one there's

440
00:15:47,120 --> 00:15:48,000
one more

441
00:15:48,000 --> 00:15:50,399
um i i guess there's another one that

442
00:15:50,399 --> 00:15:51,440
just doesn't let you

443
00:15:51,440 --> 00:15:54,480
uh map something as writable if it was

444
00:15:54,480 --> 00:15:54,800
ever

445
00:15:54,800 --> 00:15:57,120
executable or the other way around

446
00:15:57,120 --> 00:15:58,399
there's a lot of protections

447
00:15:58,399 --> 00:16:02,480
i guess is to summarize it so

448
00:16:02,959 --> 00:16:04,240
these are all the ways we found to

449
00:16:04,240 --> 00:16:06,399
bypass it so we managed to bypass

450
00:16:06,399 --> 00:16:09,120
these protections in five different ways

451
00:16:09,120 --> 00:16:10,320
um

452
00:16:10,320 --> 00:16:12,720
some of them are funny some of them are

453
00:16:12,720 --> 00:16:13,600
actually cool

454
00:16:13,600 --> 00:16:16,480
um but so i'm not gonna talk about all

455
00:16:16,480 --> 00:16:17,199
of these

456
00:16:17,199 --> 00:16:20,160
because for instance uh this top one

457
00:16:20,160 --> 00:16:22,000
here the azure sphere p-trace

458
00:16:22,000 --> 00:16:24,079
what we did is we have a process it

459
00:16:24,079 --> 00:16:26,320
forked we p-traced the fork with our

460
00:16:26,320 --> 00:16:27,519
parent process

461
00:16:27,519 --> 00:16:28,880
and then we could just write into

462
00:16:28,880 --> 00:16:31,120
executable memory because p trace is

463
00:16:31,120 --> 00:16:32,320
special like that

464
00:16:32,320 --> 00:16:34,000
uh i mean it's kind of lame but you can

465
00:16:34,000 --> 00:16:36,480
do it this one was funny

466
00:16:36,480 --> 00:16:40,000
uh fun fact every process has a file

467
00:16:40,000 --> 00:16:43,040
that lets you write to it uh that is

468
00:16:43,040 --> 00:16:45,040
essentially its memory space

469
00:16:45,040 --> 00:16:47,759
and so if you just write to executable

470
00:16:47,759 --> 00:16:48,880
memory this way

471
00:16:48,880 --> 00:16:50,880
you you can execute shell code so you

472
00:16:50,880 --> 00:16:52,240
just have to be a little creative with

473
00:16:52,240 --> 00:16:53,279
these ones

474
00:16:53,279 --> 00:16:56,800
um but three of these are simple

475
00:16:56,800 --> 00:16:58,639
two of these are not simple we're going

476
00:16:58,639 --> 00:17:00,000
to cover maybe one

477
00:17:00,000 --> 00:17:05,280
or two of these depending on time so

478
00:17:05,280 --> 00:17:07,439
for the first one i might skip the

479
00:17:07,439 --> 00:17:09,679
second one depending on how i'm feeling

480
00:17:09,679 --> 00:17:13,039
read implies exec this is a fun

481
00:17:13,039 --> 00:17:16,000
linux fact that i did not know about um

482
00:17:16,000 --> 00:17:18,000
so when you execute a linux process

483
00:17:18,000 --> 00:17:21,679
it has a personality quote unquote um

484
00:17:21,679 --> 00:17:22,880
that lets you change certain

485
00:17:22,880 --> 00:17:25,520
characteristics of that process

486
00:17:25,520 --> 00:17:28,559
um i mean you can read the man page it's

487
00:17:28,559 --> 00:17:30,080
probably a lot more descriptive than i

488
00:17:30,080 --> 00:17:30,960
am but

489
00:17:30,960 --> 00:17:32,799
two of the characteristics that you can

490
00:17:32,799 --> 00:17:34,400
change that are really interesting in my

491
00:17:34,400 --> 00:17:35,360
opinion

492
00:17:35,360 --> 00:17:37,520
uh well we only care about this one but

493
00:17:37,520 --> 00:17:38,720
i don't know anyways

494
00:17:38,720 --> 00:17:41,280
um read implies exact is a personality

495
00:17:41,280 --> 00:17:43,440
trait that you can set for a process

496
00:17:43,440 --> 00:17:46,799
that when you map a map a page as

497
00:17:46,799 --> 00:17:47,520
readable

498
00:17:47,520 --> 00:17:49,600
it implies you're executable which is

499
00:17:49,600 --> 00:17:51,440
great for our opinion

500
00:17:51,440 --> 00:17:56,799
for for our purposes um because

501
00:17:56,799 --> 00:17:59,760
like generally the azure sphere

502
00:17:59,760 --> 00:18:01,520
protections for this sort of thing

503
00:18:01,520 --> 00:18:04,960
happen when you try to m protect or map

504
00:18:04,960 --> 00:18:08,080
uh something is writable but if if read

505
00:18:08,080 --> 00:18:08,960
implies exec

506
00:18:08,960 --> 00:18:12,240
we're never touching writable right so

507
00:18:12,240 --> 00:18:15,600
anyways so carry it's important to note

508
00:18:15,600 --> 00:18:16,080
i guess

509
00:18:16,080 --> 00:18:19,840
that like oh one second

510
00:18:21,440 --> 00:18:24,000
uh i guess the breakthrough came through

511
00:18:24,000 --> 00:18:26,080
and that like

512
00:18:26,080 --> 00:18:29,679
and finding that like the uh vm data

513
00:18:29,679 --> 00:18:30,880
default flags

514
00:18:30,880 --> 00:18:33,440
stores reimplies exactly it's a flag in

515
00:18:33,440 --> 00:18:34,880
your process and so

516
00:18:34,880 --> 00:18:37,039
figuring out that like this particular

517
00:18:37,039 --> 00:18:39,360
define carried that information

518
00:18:39,360 --> 00:18:41,760
allowed us to find this piece of code in

519
00:18:41,760 --> 00:18:43,520
do brk

520
00:18:43,520 --> 00:18:45,760
which is essentially do map in the

521
00:18:45,760 --> 00:18:46,640
kernel

522
00:18:46,640 --> 00:18:49,840
so uh when you do brk

523
00:18:49,840 --> 00:18:52,960
which uh changes the boundaries

524
00:18:52,960 --> 00:18:55,760
of your your linux process memory so it

525
00:18:55,760 --> 00:18:56,080
like

526
00:18:56,080 --> 00:18:58,320
expands the heap or the stack that

527
00:18:58,320 --> 00:18:59,760
that's what it does

528
00:18:59,760 --> 00:19:03,120
um when you do brk this vm data default

529
00:19:03,120 --> 00:19:03,679
flags

530
00:19:03,679 --> 00:19:06,480
is actually taken into account in the

531
00:19:06,480 --> 00:19:07,200
process

532
00:19:07,200 --> 00:19:10,480
uh like the code flow and so our read

533
00:19:10,480 --> 00:19:11,440
implies exec

534
00:19:11,440 --> 00:19:13,600
is actually carried in this flag down

535
00:19:13,600 --> 00:19:15,120
here which is

536
00:19:15,120 --> 00:19:18,240
kind of useful so um

537
00:19:18,240 --> 00:19:20,720
if we map something as readable and

538
00:19:20,720 --> 00:19:21,520
writeable

539
00:19:21,520 --> 00:19:25,360
rw um because

540
00:19:25,360 --> 00:19:28,320
vmd data default flags carries read

541
00:19:28,320 --> 00:19:29,360
implies exact

542
00:19:29,360 --> 00:19:30,960
this thing's actually going to be mapped

543
00:19:30,960 --> 00:19:33,520
as rwx

544
00:19:33,520 --> 00:19:35,840
um there were there were a few extra

545
00:19:35,840 --> 00:19:37,440
steps though it wasn't just

546
00:19:37,440 --> 00:19:39,360
this one little thing this one one

547
00:19:39,360 --> 00:19:42,320
simple syscall

548
00:19:42,559 --> 00:19:43,919
we also have to make sure that the

549
00:19:43,919 --> 00:19:45,600
memory that we are mapping

550
00:19:45,600 --> 00:19:48,880
cannot be mapped with another page so

551
00:19:48,880 --> 00:19:50,080
for example

552
00:19:50,080 --> 00:19:52,320
if i have a heap chunk like this and i

553
00:19:52,320 --> 00:19:54,559
have another heap chunk down here

554
00:19:54,559 --> 00:19:58,160
um if my request to expand memory

555
00:19:58,160 --> 00:20:01,200
is is like this big it could expand into

556
00:20:01,200 --> 00:20:02,799
the next memory space

557
00:20:02,799 --> 00:20:05,919
but if i expand my heap chunk up here to

558
00:20:05,919 --> 00:20:06,880
be like

559
00:20:06,880 --> 00:20:09,679
i don't know 10 000 bytes it's gonna be

560
00:20:09,679 --> 00:20:11,200
shifted down here because there wasn't

561
00:20:11,200 --> 00:20:12,960
enough space up here that's basically

562
00:20:12,960 --> 00:20:14,480
all we're doing

563
00:20:14,480 --> 00:20:18,480
um and so oh man i hope you guys can see

564
00:20:18,480 --> 00:20:20,480
me i'm doing a lot of hand motions

565
00:20:20,480 --> 00:20:23,120
and so i don't want that to be lost on

566
00:20:23,120 --> 00:20:24,000
y'all

567
00:20:24,000 --> 00:20:27,600
um but anyways so assuming that our

568
00:20:27,600 --> 00:20:29,679
memory request cannot be merged with

569
00:20:29,679 --> 00:20:30,720
another mapping

570
00:20:30,720 --> 00:20:35,200
a new allocation occurs here at km

571
00:20:37,280 --> 00:20:40,000
ah i got a i got a scratchy throat um

572
00:20:40,000 --> 00:20:42,000
and then finally

573
00:20:42,000 --> 00:20:44,880
our flag shield that contains our read

574
00:20:44,880 --> 00:20:45,760
implies exec

575
00:20:45,760 --> 00:20:48,640
is thrown into the vm page protocols

576
00:20:48,640 --> 00:20:50,559
which allows us to run this simple shell

577
00:20:50,559 --> 00:20:52,799
code it's really just that easy

578
00:20:52,799 --> 00:20:55,919
um so all you got to do uh is set a

579
00:20:55,919 --> 00:20:57,520
personality like so

580
00:20:57,520 --> 00:21:00,960
uh you you you know set read implies

581
00:21:00,960 --> 00:21:01,760
exact

582
00:21:01,760 --> 00:21:04,960
you call brk 0 which we use syscall

583
00:21:04,960 --> 00:21:05,840
because there's

584
00:21:05,840 --> 00:21:09,200
uh their muscle c libraries are shitty

585
00:21:09,200 --> 00:21:12,400
and didn't have brk 0 uh defined

586
00:21:12,400 --> 00:21:14,720
um and then you can just literally call

587
00:21:14,720 --> 00:21:16,720
the shell code uh

588
00:21:16,720 --> 00:21:21,280
it's it's that easy um so

589
00:21:21,280 --> 00:21:23,280
that is what i mean though by unsigned

590
00:21:23,280 --> 00:21:25,039
code execution is that

591
00:21:25,039 --> 00:21:27,520
loading once again just to reiterate

592
00:21:27,520 --> 00:21:28,720
loading shell code

593
00:21:28,720 --> 00:21:30,720
on the device and running it is a

594
00:21:30,720 --> 00:21:32,159
non-trivial task

595
00:21:32,159 --> 00:21:34,000
you need a vulnerability in order to do

596
00:21:34,000 --> 00:21:35,840
it and so it's it's another step in the

597
00:21:35,840 --> 00:21:37,679
process to just make this

598
00:21:37,679 --> 00:21:39,440
 more complicated and harder for

599
00:21:39,440 --> 00:21:40,960
attackers

600
00:21:40,960 --> 00:21:44,240
um how am i doing on time i i

601
00:21:44,240 --> 00:21:46,240
think i'm gonna skip this actually well

602
00:21:46,240 --> 00:21:47,280
we'll go through it really quick

603
00:21:47,280 --> 00:21:49,919
you have like almost uh 10 minutes so

604
00:21:49,919 --> 00:21:50,559
you can

605
00:21:50,559 --> 00:21:52,799
10-15 minutes yeah oh okay yeah i'm

606
00:21:52,799 --> 00:21:55,600
skipping that sorry

607
00:21:55,600 --> 00:21:58,960
um a teal tldr oh god too far

608
00:21:58,960 --> 00:22:02,320
too far um there we go

609
00:22:02,320 --> 00:22:05,760
so the escalation chain let's just

610
00:22:05,760 --> 00:22:09,360
let's go through this really quick so

611
00:22:09,840 --> 00:22:12,159
start to finish we install an app and we

612
00:22:12,159 --> 00:22:13,039
end up having

613
00:22:13,039 --> 00:22:16,880
the the best permissions in uh the a7

614
00:22:16,880 --> 00:22:20,000
pretty much or not not the a7 but linux

615
00:22:20,000 --> 00:22:21,760
user land rather

616
00:22:21,760 --> 00:22:25,360
um uh ours consisted of four chains

617
00:22:25,360 --> 00:22:28,159
something worth noting mcafee atr which

618
00:22:28,159 --> 00:22:30,080
is another team that participated

619
00:22:30,080 --> 00:22:32,320
actually discovered uh they had a bug

620
00:22:32,320 --> 00:22:33,760
chain that overlapped with this

621
00:22:33,760 --> 00:22:36,320
and like two bugs which was kind of cool

622
00:22:36,320 --> 00:22:36,880
um

623
00:22:36,880 --> 00:22:38,880
but theirs diverged and they ended up

624
00:22:38,880 --> 00:22:40,720
getting crappier credentials we got the

625
00:22:40,720 --> 00:22:42,640
cooler credentials so that's why i'm i'm

626
00:22:42,640 --> 00:22:43,919
talking about it

627
00:22:43,919 --> 00:22:46,080
um but no they did great work they

628
00:22:46,080 --> 00:22:47,360
actually ended up uh

629
00:22:47,360 --> 00:22:49,280
finding another bug that was really cool

630
00:22:49,280 --> 00:22:51,600
which let them install an arbitrary

631
00:22:51,600 --> 00:22:54,640
application but anyways continuing on

632
00:22:54,640 --> 00:22:58,480
um right so to start off

633
00:22:58,480 --> 00:23:01,440
um like i said the asset partitions this

634
00:23:01,440 --> 00:23:02,640
is what they look like

635
00:23:02,640 --> 00:23:06,159
um you can see type asx ipfs

636
00:23:06,159 --> 00:23:08,559
um they're read read executable you

637
00:23:08,559 --> 00:23:09,840
cannot write to them

638
00:23:09,840 --> 00:23:13,360
uh i already showed you this oh this is

639
00:23:13,360 --> 00:23:14,960
like an applications like

640
00:23:14,960 --> 00:23:17,760
tree right so you have your app manifest

641
00:23:17,760 --> 00:23:19,280
you have the binary folder and then you

642
00:23:19,280 --> 00:23:20,640
have the application

643
00:23:20,640 --> 00:23:23,360
this is like packaged up into an image

644
00:23:23,360 --> 00:23:24,000
package

645
00:23:24,000 --> 00:23:27,200
which is asxipfs and then flash to the

646
00:23:27,200 --> 00:23:28,080
device

647
00:23:28,080 --> 00:23:31,679
so really quickly what an asx

648
00:23:31,679 --> 00:23:35,120
ipfs partition looks like is you'll have

649
00:23:35,120 --> 00:23:36,320
a bunch of headers

650
00:23:36,320 --> 00:23:38,480
uh these are what the headers look like

651
00:23:38,480 --> 00:23:39,360
um

652
00:23:39,360 --> 00:23:42,240
this is like a standard uh file system

653
00:23:42,240 --> 00:23:42,799
image

654
00:23:42,799 --> 00:23:45,840
it's not that special um then you have a

655
00:23:45,840 --> 00:23:46,559
bunch of

656
00:23:46,559 --> 00:23:49,679
inodes after the headers uh

657
00:23:49,679 --> 00:23:52,000
the inodes consist of inode headers and

658
00:23:52,000 --> 00:23:53,200
then inode data

659
00:23:53,200 --> 00:23:55,200
we can see an example of like what the

660
00:23:55,200 --> 00:23:57,200
inode headers are down here

661
00:23:57,200 --> 00:24:00,000
um interesting to note actually is the

662
00:24:00,000 --> 00:24:00,720
uid

663
00:24:00,720 --> 00:24:03,120
and the gid of the file is actually

664
00:24:03,120 --> 00:24:04,400
contained here

665
00:24:04,400 --> 00:24:06,000
but it's completely ignored by the

666
00:24:06,000 --> 00:24:08,320
system so because otherwise we would

667
00:24:08,320 --> 00:24:09,279
have just flashed

668
00:24:09,279 --> 00:24:11,520
an application that had root credentials

669
00:24:11,520 --> 00:24:12,960
so just right then

670
00:24:12,960 --> 00:24:14,880
uh that would bit lame that we can't do

671
00:24:14,880 --> 00:24:17,200
that um

672
00:24:17,200 --> 00:24:20,480
so something to note when you well

673
00:24:20,480 --> 00:24:22,640
back in the day i say back in the day

674
00:24:22,640 --> 00:24:24,240
like last summer

675
00:24:24,240 --> 00:24:28,080
if you whenever you accessed an asxi pfs

676
00:24:28,080 --> 00:24:32,080
i knowed um there's there's

677
00:24:32,080 --> 00:24:33,840
interesting things that can happen so

678
00:24:33,840 --> 00:24:35,520
for regular files

679
00:24:35,520 --> 00:24:38,240
there was one part or one code flow

680
00:24:38,240 --> 00:24:38,960
right

681
00:24:38,960 --> 00:24:40,880
if you access a directory on this

682
00:24:40,880 --> 00:24:42,400
partition then

683
00:24:42,400 --> 00:24:44,559
then you get different operations that

684
00:24:44,559 --> 00:24:45,600
can happen right because

685
00:24:45,600 --> 00:24:48,240
you know that's how a file system works

686
00:24:48,240 --> 00:24:48,720
um

687
00:24:48,720 --> 00:24:50,960
but interestingly if it wasn't a

688
00:24:50,960 --> 00:24:51,919
directory

689
00:24:51,919 --> 00:24:54,000
and it wasn't a regular file and it

690
00:24:54,000 --> 00:24:55,840
wasn't a soft link too

691
00:24:55,840 --> 00:24:57,520
then there was actually this init

692
00:24:57,520 --> 00:25:01,039
special inode function that happened

693
00:25:01,039 --> 00:25:04,799
and the internet special inode function

694
00:25:04,880 --> 00:25:08,559
was actually located in linux itself

695
00:25:08,559 --> 00:25:09,200
this wasn't

696
00:25:09,200 --> 00:25:12,159
a azure sphere specific code so if

697
00:25:12,159 --> 00:25:13,520
you'll notice here

698
00:25:13,520 --> 00:25:15,679
if it's a char device then it loads the

699
00:25:15,679 --> 00:25:16,559
char device

700
00:25:16,559 --> 00:25:18,559
operations if it's a block device it

701
00:25:18,559 --> 00:25:20,799
operates it loads the block device

702
00:25:20,799 --> 00:25:22,720
operations and so forth

703
00:25:22,720 --> 00:25:26,480
and so if uh if you've ever

704
00:25:26,480 --> 00:25:30,000
uh like installed a block device onto a

705
00:25:30,000 --> 00:25:31,120
file system before

706
00:25:31,120 --> 00:25:34,000
it's a pretty powerful thing you can do

707
00:25:34,000 --> 00:25:34,880
um

708
00:25:34,880 --> 00:25:37,840
so like i said before we couldn't just

709
00:25:37,840 --> 00:25:40,320
change the uid and gid of the files on

710
00:25:40,320 --> 00:25:41,600
our partition

711
00:25:41,600 --> 00:25:44,000
but what we could do is we could create

712
00:25:44,000 --> 00:25:45,360
a block device

713
00:25:45,360 --> 00:25:48,640
via the minor and major numbers of the

714
00:25:48,640 --> 00:25:52,000
of a given device uh and essentially

715
00:25:52,000 --> 00:25:55,360
um have a soft link to another

716
00:25:55,360 --> 00:25:58,000
device on the file system so like slash

717
00:25:58,000 --> 00:25:59,600
dev slash

718
00:25:59,600 --> 00:26:02,559
mtd block zero or something like that uh

719
00:26:02,559 --> 00:26:03,279
because

720
00:26:03,279 --> 00:26:05,200
uh we essentially yeah we essentially

721
00:26:05,200 --> 00:26:07,840
have a soft link that we can arbitrarily

722
00:26:07,840 --> 00:26:10,400
point to devices and we have permissions

723
00:26:10,400 --> 00:26:12,480
to actually read these devices

724
00:26:12,480 --> 00:26:16,480
um and so we use this to actually access

725
00:26:16,480 --> 00:26:18,559
the little fs partition

726
00:26:18,559 --> 00:26:21,440
by default you only have one folder in

727
00:26:21,440 --> 00:26:22,799
that partition

728
00:26:22,799 --> 00:26:26,640
but by using this asxi pfs bug

729
00:26:26,640 --> 00:26:29,360
we could in fact access the mtd block

730
00:26:29,360 --> 00:26:30,080
device that

731
00:26:30,080 --> 00:26:33,360
the blocked device driver for um mtd

732
00:26:33,360 --> 00:26:35,200
block zero and if you'll notice here

733
00:26:35,200 --> 00:26:36,720
this is what slash dev

734
00:26:36,720 --> 00:26:39,360
mtd block one looks like before our

735
00:26:39,360 --> 00:26:40,240
exploit

736
00:26:40,240 --> 00:26:42,159
and this is what it looks like after we

737
00:26:42,159 --> 00:26:43,520
can we have

738
00:26:43,520 --> 00:26:46,960
um root root up here but we have cis and

739
00:26:46,960 --> 00:26:49,600
then uid one zero zero seven down here

740
00:26:49,600 --> 00:26:52,480
we are uid one zero 1007 and such

741
00:26:52,480 --> 00:26:53,120
because of that

742
00:26:53,120 --> 00:26:56,159
we gain read and execute permissions on

743
00:26:56,159 --> 00:26:57,360
the black device

744
00:26:57,360 --> 00:27:00,720
so not write but read and execute

745
00:27:00,720 --> 00:27:02,799
so it's something it's not nothing it's

746
00:27:02,799 --> 00:27:04,559
something

747
00:27:04,559 --> 00:27:08,240
um so now that we can actually read

748
00:27:08,240 --> 00:27:11,440
the the mtd block the little fs which is

749
00:27:11,440 --> 00:27:12,720
like

750
00:27:12,720 --> 00:27:15,279
stores configuration files um we

751
00:27:15,279 --> 00:27:16,400
emulated it

752
00:27:16,400 --> 00:27:20,240
uh in in kimu uh using the block to

753
00:27:20,240 --> 00:27:23,120
mtd driver uh right here it's pretty

754
00:27:23,120 --> 00:27:23,600
easy

755
00:27:23,600 --> 00:27:25,919
thing to replicate after we dumped the

756
00:27:25,919 --> 00:27:27,520
entire partition so we took their

757
00:27:27,520 --> 00:27:28,880
partition from the device

758
00:27:28,880 --> 00:27:31,279
and we mounted it in kimu to figure out

759
00:27:31,279 --> 00:27:32,159
like what was

760
00:27:32,159 --> 00:27:34,159
on there what files were on that

761
00:27:34,159 --> 00:27:36,240
partition and so forth

762
00:27:36,240 --> 00:27:39,200
the the key file on the partition is the

763
00:27:39,200 --> 00:27:40,480
uid map

764
00:27:40,480 --> 00:27:43,679
the uid map maps uids

765
00:27:43,679 --> 00:27:46,960
obviously uh two component ids this is

766
00:27:46,960 --> 00:27:50,159
like an identifier that is flashed

767
00:27:50,159 --> 00:27:53,360
by our application so um all these are

768
00:27:53,360 --> 00:27:54,880
hard-coded system apps

769
00:27:54,880 --> 00:27:57,919
with hard-coded ids but ours changes

770
00:27:57,919 --> 00:27:59,679
every time we flash something

771
00:27:59,679 --> 00:28:02,799
um so

772
00:28:02,799 --> 00:28:06,480
uh right so continuing on

773
00:28:06,480 --> 00:28:08,799
what do we do with read and execute

774
00:28:08,799 --> 00:28:09,600
permission

775
00:28:09,600 --> 00:28:11,760
for the block device we we dumped the

776
00:28:11,760 --> 00:28:13,520
partition and we can read the partition

777
00:28:13,520 --> 00:28:14,000
that's

778
00:28:14,000 --> 00:28:16,240
that's good that's information but we

779
00:28:16,240 --> 00:28:17,600
need to be able to do something more

780
00:28:17,600 --> 00:28:18,000
it's

781
00:28:18,000 --> 00:28:21,600
it wasn't enough so um

782
00:28:21,600 --> 00:28:23,279
if we we started to look at the eye

783
00:28:23,279 --> 00:28:25,360
octals for mtd char devices

784
00:28:25,360 --> 00:28:27,679
and this is in the linux code not azure

785
00:28:27,679 --> 00:28:29,600
code so this is a cool bug it's a linux

786
00:28:29,600 --> 00:28:31,600
bug not an azure bug

787
00:28:31,600 --> 00:28:34,640
um and so we looked at the iacto code

788
00:28:34,640 --> 00:28:37,200
and we noticed that in order to call

789
00:28:37,200 --> 00:28:39,440
memories because it's a flash device

790
00:28:39,440 --> 00:28:41,520
uh you need write permissions here as

791
00:28:41,520 --> 00:28:42,880
you'll notice here

792
00:28:42,880 --> 00:28:46,320
but uh until about three months ago

793
00:28:46,320 --> 00:28:48,799
uh you didn't need right permissions to

794
00:28:48,799 --> 00:28:50,000
call memrite

795
00:28:50,000 --> 00:28:52,559
uh via mtd tyrite dioctyl so you could

796
00:28:52,559 --> 00:28:53,679
actually do

797
00:28:53,679 --> 00:28:58,240
a memrioctyl on an mtd block device

798
00:28:58,240 --> 00:29:00,399
without right permissions you only need

799
00:29:00,399 --> 00:29:02,320
to read permissions and execute

800
00:29:02,320 --> 00:29:04,159
permissions

801
00:29:04,159 --> 00:29:07,120
so i mean that was a linux vulnerability

802
00:29:07,120 --> 00:29:08,240
um

803
00:29:08,240 --> 00:29:11,600
and so um just to show like the code

804
00:29:11,600 --> 00:29:13,279
flow and that there's no

805
00:29:13,279 --> 00:29:16,320
writable checks anywhere um yeah

806
00:29:16,320 --> 00:29:18,240
essentially if you want the long

807
00:29:18,240 --> 00:29:20,000
explanation claudio

808
00:29:20,000 --> 00:29:22,080
gives a really good explanation of what

809
00:29:22,080 --> 00:29:23,120
we can do

810
00:29:23,120 --> 00:29:26,159
with just mem right um

811
00:29:26,159 --> 00:29:28,159
i'm not going to cover it because it was

812
00:29:28,159 --> 00:29:30,640
difficult i'm just going to say

813
00:29:30,640 --> 00:29:32,960
and because i'm running short on time uh

814
00:29:32,960 --> 00:29:34,240
a tldr

815
00:29:34,240 --> 00:29:37,279
is we can write to any file

816
00:29:37,279 --> 00:29:40,320
on slash mount config via the block

817
00:29:40,320 --> 00:29:40,960
device i

818
00:29:40,960 --> 00:29:45,039
octal um because of little fs

819
00:29:45,039 --> 00:29:47,360
and because of our second vulnerability

820
00:29:47,360 --> 00:29:49,200
and so

821
00:29:49,200 --> 00:29:51,120
yeah you can read that in your own time

822
00:29:51,120 --> 00:29:52,240
i don't got i don't got

823
00:29:52,240 --> 00:29:56,080
 time for that all right so

824
00:29:56,080 --> 00:29:58,320
where where are we right now still in

825
00:29:58,320 --> 00:30:00,559
the in slash mount slash config

826
00:30:00,559 --> 00:30:03,919
okay so back to the uid map

827
00:30:03,919 --> 00:30:07,200
since this thing maps like a

828
00:30:07,200 --> 00:30:10,240
component id to a uid let's

829
00:30:10,240 --> 00:30:13,120
let's mess with this file right and so

830
00:30:13,120 --> 00:30:14,640
something key

831
00:30:14,640 --> 00:30:16,799
this this file is only checked when an

832
00:30:16,799 --> 00:30:18,320
application is spawned

833
00:30:18,320 --> 00:30:21,279
okay that'll come up later um so it

834
00:30:21,279 --> 00:30:22,320
checks this file

835
00:30:22,320 --> 00:30:23,919
looks to see what component id is

836
00:30:23,919 --> 00:30:26,480
running and then assigns it this uid

837
00:30:26,480 --> 00:30:30,799
okay so some rules for the file

838
00:30:30,799 --> 00:30:34,159
um i'm just gonna say uh

839
00:30:34,159 --> 00:30:37,279
it just you can't mess with it too much

840
00:30:37,279 --> 00:30:39,600
um you can't have duplicate component

841
00:30:39,600 --> 00:30:41,360
ids these things over here

842
00:30:41,360 --> 00:30:43,360
all the component ids you can't have all

843
00:30:43,360 --> 00:30:46,000
nulls all the uids have to be greater

844
00:30:46,000 --> 00:30:46,960
than 999

845
00:30:46,960 --> 00:30:48,799
you can't just set yourself to root that

846
00:30:48,799 --> 00:30:50,240
would be cheating

847
00:30:50,240 --> 00:30:53,760
um any error in this parsing

848
00:30:53,760 --> 00:30:56,320
uh causes the file to be recreated but

849
00:30:56,320 --> 00:30:57,440
there are two things that were not

850
00:30:57,440 --> 00:30:59,440
checked for and this is actually where

851
00:30:59,440 --> 00:31:02,960
uh our bug chain and mcafee's bug chain

852
00:31:02,960 --> 00:31:05,200
split so what macfee did

853
00:31:05,200 --> 00:31:07,679
is there was a bug if you assigned a uid

854
00:31:07,679 --> 00:31:09,679
greater than 65535

855
00:31:09,679 --> 00:31:12,880
what we did is uh we exploited the fact

856
00:31:12,880 --> 00:31:13,679
that

857
00:31:13,679 --> 00:31:15,200
it never checked to see if there was

858
00:31:15,200 --> 00:31:16,960
duplicate uids

859
00:31:16,960 --> 00:31:19,440
so if there was like one zero zero one

860
00:31:19,440 --> 00:31:20,720
here right

861
00:31:20,720 --> 00:31:24,240
and so uh

862
00:31:24,240 --> 00:31:26,720
i'm going to come back to that slide and

863
00:31:26,720 --> 00:31:27,519
that one

864
00:31:27,519 --> 00:31:31,120
and that one apparently so yeah uh

865
00:31:31,120 --> 00:31:33,120
what ended up what we ended up doing is

866
00:31:33,120 --> 00:31:34,960
we changed our uid

867
00:31:34,960 --> 00:31:37,840
for the application to that of azure d

868
00:31:37,840 --> 00:31:39,200
which is a daemon that runs on the

869
00:31:39,200 --> 00:31:41,039
device which has a lot of permissions

870
00:31:41,039 --> 00:31:44,559
and so um moving back three slides

871
00:31:44,559 --> 00:31:46,720
another key fact is that when an

872
00:31:46,720 --> 00:31:48,159
application is spawned

873
00:31:48,159 --> 00:31:51,360
it also gains azure sphere capabilities

874
00:31:51,360 --> 00:31:54,399
not just a uid but um these aren't linux

875
00:31:54,399 --> 00:31:56,080
capabilities they're more special than

876
00:31:56,080 --> 00:31:56,480
that

877
00:31:56,480 --> 00:31:58,960
uh the azure sphere capabilities let you

878
00:31:58,960 --> 00:32:01,279
play around with uh security monitor and

879
00:32:01,279 --> 00:32:02,080
pluton

880
00:32:02,080 --> 00:32:04,320
the very like that's like the holy grail

881
00:32:04,320 --> 00:32:05,360
of this device

882
00:32:05,360 --> 00:32:07,919
so those are what we're aiming for okay

883
00:32:07,919 --> 00:32:10,000
so when you spawn an application

884
00:32:10,000 --> 00:32:14,159
if your component id matches this uh

885
00:32:14,159 --> 00:32:15,840
one of these there's like five

886
00:32:15,840 --> 00:32:17,679
hard-coded we can see them all here if

887
00:32:17,679 --> 00:32:19,200
it matches one of those

888
00:32:19,200 --> 00:32:20,960
then you get the special azure sphere

889
00:32:20,960 --> 00:32:23,360
capabilities okay

890
00:32:23,360 --> 00:32:28,880
skipping this skipping this uh to do so

891
00:32:28,880 --> 00:32:30,399
we ran into a problem though because

892
00:32:30,399 --> 00:32:33,279
even if we duplicate our uid

893
00:32:33,279 --> 00:32:36,640
um it's whenever a process is spawned

894
00:32:36,640 --> 00:32:38,880
uh this file is checked so we can't just

895
00:32:38,880 --> 00:32:40,080
change the uid

896
00:32:40,080 --> 00:32:41,600
we have to change the uid and then have

897
00:32:41,600 --> 00:32:43,440
our application spawned but we can't

898
00:32:43,440 --> 00:32:45,039
have our application spun because

899
00:32:45,039 --> 00:32:45,760
that'll

900
00:32:45,760 --> 00:32:49,360
kill our exploit so what we ended up

901
00:32:49,360 --> 00:32:50,799
doing is we just

902
00:32:50,799 --> 00:32:52,799
we had like 10 doses that we found in

903
00:32:52,799 --> 00:32:54,320
the thing so you could just literally

904
00:32:54,320 --> 00:32:55,039
like

905
00:32:55,039 --> 00:32:57,519
i don't know respawn your application

906
00:32:57,519 --> 00:32:59,440
via adults and it would work fine

907
00:32:59,440 --> 00:33:01,760
that's all you needed to do um but they

908
00:33:01,760 --> 00:33:03,279
don't count for bounties because

909
00:33:03,279 --> 00:33:06,480
uh who knows why um anyways so

910
00:33:06,480 --> 00:33:08,080
i guess our bug chain was actually like

911
00:33:08,080 --> 00:33:10,399
five bugs long but uh

912
00:33:10,399 --> 00:33:13,840
yeah so after we after we change the uid

913
00:33:13,840 --> 00:33:14,240
file

914
00:33:14,240 --> 00:33:16,159
then we pop one of our dosses to reboot

915
00:33:16,159 --> 00:33:17,360
the device then

916
00:33:17,360 --> 00:33:21,360
finally our application spawns as a uid

917
00:33:21,360 --> 00:33:24,000
of like a different process azure d

918
00:33:24,000 --> 00:33:26,559
which is a powerful process

919
00:33:26,559 --> 00:33:28,399
but what does that actually give us we

920
00:33:28,399 --> 00:33:29,600
don't yet have

921
00:33:29,600 --> 00:33:33,840
azure sphere capabilities though because

922
00:33:33,840 --> 00:33:36,480
azure sphere capabilities depend on the

923
00:33:36,480 --> 00:33:37,600
component id

924
00:33:37,600 --> 00:33:41,840
not the uid um so in order to have the

925
00:33:41,840 --> 00:33:44,080
azure sphere capabilities which is

926
00:33:44,080 --> 00:33:46,480
what we need to talk to the holy grail

927
00:33:46,480 --> 00:33:48,240
uh we need to have the same

928
00:33:48,240 --> 00:33:52,000
like this thing right unless

929
00:33:52,000 --> 00:33:55,440
we pop another bug so bug number five i

930
00:33:55,440 --> 00:33:57,200
swear i'm almost done

931
00:33:57,200 --> 00:34:00,320
um azure sphere capabilities are stored

932
00:34:00,320 --> 00:34:02,480
in a different structure than normal

933
00:34:02,480 --> 00:34:05,120
linux capabilities whereas normal linux

934
00:34:05,120 --> 00:34:07,120
capabilities are stored in the the

935
00:34:07,120 --> 00:34:10,079
cred struct um azure sphere capabilities

936
00:34:10,079 --> 00:34:13,359
are stored in this special little struct

937
00:34:13,359 --> 00:34:17,199
so interestingly since we have the same

938
00:34:17,199 --> 00:34:17,918
uid

939
00:34:17,918 --> 00:34:21,199
as this powerful process azure d uh we

940
00:34:21,199 --> 00:34:22,000
can pass

941
00:34:22,000 --> 00:34:25,599
this check and p trace may access

942
00:34:25,599 --> 00:34:27,440
uh because we have this as you'll notice

943
00:34:27,440 --> 00:34:29,679
here we have the same uid and the same

944
00:34:29,679 --> 00:34:30,320
gid

945
00:34:30,320 --> 00:34:32,719
as our target process we can now attach

946
00:34:32,719 --> 00:34:35,440
to it because of p-trace right

947
00:34:35,440 --> 00:34:38,800
um normally there's an interesting fact

948
00:34:38,800 --> 00:34:39,599
though

949
00:34:39,599 --> 00:34:41,918
under normal circumstances there is a

950
00:34:41,918 --> 00:34:43,359
check to make sure that you cannot

951
00:34:43,359 --> 00:34:45,280
p-trace a process with more linux

952
00:34:45,280 --> 00:34:47,760
capabilities than yourself

953
00:34:47,760 --> 00:34:50,239
in order to avoid privilege escalation

954
00:34:50,239 --> 00:34:51,359
but

955
00:34:51,359 --> 00:34:53,040
like i said these are not linux

956
00:34:53,040 --> 00:34:55,040
capabilities those are actually special

957
00:34:55,040 --> 00:34:56,639
azure sphere capabilities

958
00:34:56,639 --> 00:34:59,200
and as such linux doesn't even know they

959
00:34:59,200 --> 00:35:00,160
exist and

960
00:35:00,160 --> 00:35:02,880
azure sphere doesn't check them and so

961
00:35:02,880 --> 00:35:06,079
because of that fact

962
00:35:06,240 --> 00:35:09,200
once we have the uid of azure d we can

963
00:35:09,200 --> 00:35:09,599
take

964
00:35:09,599 --> 00:35:13,040
p trace and just attach to azure d uh

965
00:35:13,040 --> 00:35:16,240
and we injected a reverse shell via p

966
00:35:16,240 --> 00:35:18,960
trace and then had it connect back to us

967
00:35:18,960 --> 00:35:20,960
such that we have these azure sphere

968
00:35:20,960 --> 00:35:22,079
capabilities

969
00:35:22,079 --> 00:35:24,720
and so with bug number five we could

970
00:35:24,720 --> 00:35:26,240
actually finally talk

971
00:35:26,240 --> 00:35:28,160
to the devices that we wanted to talk to

972
00:35:28,160 --> 00:35:29,599
in the first place

973
00:35:29,599 --> 00:35:32,079
so which is the best credentials we can

974
00:35:32,079 --> 00:35:32,880
get in

975
00:35:32,880 --> 00:35:35,920
linux normal land so that's it that's

976
00:35:35,920 --> 00:35:36,560
the talk

977
00:35:36,560 --> 00:35:39,760
um so i probably ran over time i

978
00:35:39,760 --> 00:35:42,240
apologize

979
00:35:42,240 --> 00:35:45,040
uh little uh thank you so much for this

980
00:35:45,040 --> 00:35:46,480
amazing presentation

981
00:35:46,480 --> 00:35:49,599
i'm curious to know uh what does azure

982
00:35:49,599 --> 00:35:51,760
respond back to you uh when you reported

983
00:35:51,760 --> 00:35:53,280
so many vulnerabilities

984
00:35:53,280 --> 00:35:55,040
before that did they know that you were

985
00:35:55,040 --> 00:35:57,839
a trained boxer

986
00:35:57,839 --> 00:36:01,599
maybe they were afraid or something um

987
00:36:01,599 --> 00:36:04,880
uh well no actually they

988
00:36:04,880 --> 00:36:08,880
well so um am i still screen sharing

989
00:36:08,880 --> 00:36:12,240
um i don't want it yeah yes yeah yeah

990
00:36:12,240 --> 00:36:15,440
oh do you still oh well uh stop share

991
00:36:15,440 --> 00:36:19,280
okay so i'm done screen sharing but um

992
00:36:19,280 --> 00:36:22,640
so the thing was we we had to like

993
00:36:22,640 --> 00:36:25,760
um report them in waves right because

994
00:36:25,760 --> 00:36:27,119
you have to understand for the azure

995
00:36:27,119 --> 00:36:28,800
sphere research challenge

996
00:36:28,800 --> 00:36:31,760
um every month things got patched and

997
00:36:31,760 --> 00:36:33,280
you also had to understand

998
00:36:33,280 --> 00:36:35,359
because there were 70 other researchers

999
00:36:35,359 --> 00:36:38,720
we were like oh you know we got a

1000
00:36:38,720 --> 00:36:40,640
while we normally wouldn't have turned

1001
00:36:40,640 --> 00:36:43,119
in these bugs you know i'm like i'm not

1002
00:36:43,119 --> 00:36:44,079
gonna burn my

1003
00:36:44,079 --> 00:36:46,880
bugs what the f no um you know i want to

1004
00:36:46,880 --> 00:36:49,280
get i want to get higher escalation but

1005
00:36:49,280 --> 00:36:51,119
under certain circumstances we did have

1006
00:36:51,119 --> 00:36:52,720
to burn certain bug chains that normally

1007
00:36:52,720 --> 00:36:54,880
would be like no we want to keep going

1008
00:36:54,880 --> 00:36:57,760
just because we didn't want to lose out

1009
00:36:57,760 --> 00:36:58,560
on like the

1010
00:36:58,560 --> 00:37:01,599
the credit right and so that we actually

1011
00:37:01,599 --> 00:37:03,280
got really lucky because we submitted

1012
00:37:03,280 --> 00:37:05,440
our bug chain the same month that mcafee

1013
00:37:05,440 --> 00:37:06,160
did

1014
00:37:06,160 --> 00:37:09,359
and if we hadn't decided to play it safe

1015
00:37:09,359 --> 00:37:11,599
in that on that one month we would have

1016
00:37:11,599 --> 00:37:13,599
had our entire bug chain burned

1017
00:37:13,599 --> 00:37:15,359
and we wouldn't we would have gotten any

1018
00:37:15,359 --> 00:37:17,119
recognition for it so

1019
00:37:17,119 --> 00:37:19,920
uh we played it safe and but uh as for

1020
00:37:19,920 --> 00:37:20,720
their reaction

1021
00:37:20,720 --> 00:37:23,760
they were cool about it um sometimes

1022
00:37:23,760 --> 00:37:26,960
like sometimes they just close the bugs

1023
00:37:26,960 --> 00:37:29,200
for no reason like right away because

1024
00:37:29,200 --> 00:37:30,960
they didn't read the bugs or something

1025
00:37:30,960 --> 00:37:31,839
but

1026
00:37:31,839 --> 00:37:33,599
aside from those little missteps it was

1027
00:37:33,599 --> 00:37:35,520
okay

1028
00:37:35,520 --> 00:37:37,760
all right uh i think it was an awesome

1029
00:37:37,760 --> 00:37:38,880
talk and uh

1030
00:37:38,880 --> 00:37:41,040
amazing research by the whole uh cisco

1031
00:37:41,040 --> 00:37:43,920
talos team thank you so much uh liz

1032
00:37:43,920 --> 00:37:45,440
for this amazing presentation thanks for

1033
00:37:45,440 --> 00:37:51,839
having me all right a pleasure

1034
00:37:52,240 --> 00:37:54,319
you

