1
00:00:00,000 --> 00:00:14,160
[Music]

2
00:00:14,160 --> 00:00:15,440
last speaker

3
00:00:15,440 --> 00:00:18,560
for the day uh john uh who is

4
00:00:18,560 --> 00:00:22,160
uh i know john uh you are currently

5
00:00:22,160 --> 00:00:24,480
in the west coast and it's like almost 2

6
00:00:24,480 --> 00:00:26,080
a.m for you so we will not

7
00:00:26,080 --> 00:00:29,199
uh keep you up for so long uh i would

8
00:00:29,199 --> 00:00:30,880
request you to start your presentation

9
00:00:30,880 --> 00:00:32,719
his talk everybody would be

10
00:00:32,719 --> 00:00:35,600
using k-8s to deploy security services

11
00:00:35,600 --> 00:00:37,040
in a hostile world

12
00:00:37,040 --> 00:00:39,360
he is a senior security researcher at

13
00:00:39,360 --> 00:00:40,480
google

14
00:00:40,480 --> 00:00:43,440
john over to you hey can everyone hear

15
00:00:43,440 --> 00:00:45,680
me

16
00:00:45,680 --> 00:00:47,120
yes absolutely we can hear you and see

17
00:00:47,120 --> 00:00:48,879
those slides as well

18
00:00:48,879 --> 00:00:52,399
excellent all right so um

19
00:00:52,399 --> 00:00:55,199
as mentioned i'm uh i'm gonna talk about

20
00:00:55,199 --> 00:00:56,719
how we use kubernetes

21
00:00:56,719 --> 00:00:59,760
to deploy security services to some of

22
00:00:59,760 --> 00:01:00,600
our

23
00:01:00,600 --> 00:01:05,039
non-uh on-site assets

24
00:01:05,360 --> 00:01:07,760
before we get started an administrative

25
00:01:07,760 --> 00:01:08,720
note

26
00:01:08,720 --> 00:01:11,520
these views are not necessarily those of

27
00:01:11,520 --> 00:01:12,320
my company

28
00:01:12,320 --> 00:01:15,439
they are my views and uh based on

29
00:01:15,439 --> 00:01:18,798
largely personal experiences

30
00:01:18,880 --> 00:01:21,759
a little bit about myself i uh as

31
00:01:21,759 --> 00:01:23,759
mentioned i'm a senior security engineer

32
00:01:23,759 --> 00:01:24,880
at google

33
00:01:24,880 --> 00:01:27,040
i work in the security for mergers and

34
00:01:27,040 --> 00:01:28,640
acquisitions team

35
00:01:28,640 --> 00:01:32,159
we take care of enhancing the security

36
00:01:32,159 --> 00:01:34,400
of the companies that google buys

37
00:01:34,400 --> 00:01:37,119
and try to raise the bar on the security

38
00:01:37,119 --> 00:01:38,320
that they came in with

39
00:01:38,320 --> 00:01:40,000
to try and make it even better than it

40
00:01:40,000 --> 00:01:41,600
was

41
00:01:41,600 --> 00:01:45,119
uh i've been doing this for

42
00:01:45,119 --> 00:01:47,600
12 years or more mostly in

43
00:01:47,600 --> 00:01:50,479
infrastructure security

44
00:01:50,479 --> 00:01:53,759
and the final disclaimer is caveat here

45
00:01:53,759 --> 00:01:55,119
is that i didn't know anything about

46
00:01:55,119 --> 00:01:57,200
kubernetes when i started this project

47
00:01:57,200 --> 00:01:59,200
and i still regularly claim not to know

48
00:01:59,200 --> 00:02:02,320
anything about kubernetes

49
00:02:04,479 --> 00:02:06,880
so uh we've got a few acquisitions that

50
00:02:06,880 --> 00:02:08,959
we deal with on a regular basis

51
00:02:08,959 --> 00:02:11,520
there's uh by a few i mean a couple of

52
00:02:11,520 --> 00:02:12,879
dozen

53
00:02:12,879 --> 00:02:14,480
not all of them are completely

54
00:02:14,480 --> 00:02:17,040
integrated into our google sphere

55
00:02:17,040 --> 00:02:20,480
all the time so we have to have some way

56
00:02:20,480 --> 00:02:22,640
to deploy tooling to them so this is not

57
00:02:22,640 --> 00:02:24,800
necessarily about how we specifically do

58
00:02:24,800 --> 00:02:25,360
this

59
00:02:25,360 --> 00:02:27,760
for acquisitions but this is a way that

60
00:02:27,760 --> 00:02:29,440
we have determined

61
00:02:29,440 --> 00:02:32,800
to deploy security tooling

62
00:02:32,800 --> 00:02:34,640
without having to worry about scaling

63
00:02:34,640 --> 00:02:37,599
assets manually

64
00:02:37,599 --> 00:02:39,360
doing anything manually in this

65
00:02:39,360 --> 00:02:41,440
environment a recipe for disaster

66
00:02:41,440 --> 00:02:43,120
and we need to make some trade-offs

67
00:02:43,120 --> 00:02:45,120
between perfect security and better

68
00:02:45,120 --> 00:02:46,239
security

69
00:02:46,239 --> 00:02:49,920
so we're not necessarily striving for

70
00:02:49,920 --> 00:02:50,720
100

71
00:02:50,720 --> 00:02:52,400
perfection we want to make sure that we

72
00:02:52,400 --> 00:02:54,560
cover most of the large bases

73
00:02:54,560 --> 00:02:59,120
and we go from there

74
00:03:00,720 --> 00:03:04,560
so uh we've got we do we use

75
00:03:04,560 --> 00:03:08,159
kubernetes because we use a multi-cloud

76
00:03:08,159 --> 00:03:09,120
kind of environment

77
00:03:09,120 --> 00:03:11,840
we've got different assets all over the

78
00:03:11,840 --> 00:03:13,040
place

79
00:03:13,040 --> 00:03:15,840
so kubernetes is like the one common

80
00:03:15,840 --> 00:03:16,400
thread

81
00:03:16,400 --> 00:03:19,440
that we have that can not only support

82
00:03:19,440 --> 00:03:21,120
all the cloud platforms

83
00:03:21,120 --> 00:03:23,440
it can support on-premise deployments it

84
00:03:23,440 --> 00:03:24,879
can support

85
00:03:24,879 --> 00:03:27,760
um scaling our nodes for us

86
00:03:27,760 --> 00:03:29,280
automatically

87
00:03:29,280 --> 00:03:32,480
so it kind of meets all of our needs

88
00:03:32,480 --> 00:03:34,319
so when we were first starting to try

89
00:03:34,319 --> 00:03:36,080
and figure out what we were going to do

90
00:03:36,080 --> 00:03:38,400
we we had regular tooling deployed on

91
00:03:38,400 --> 00:03:40,319
top of regular compute hosts so we

92
00:03:40,319 --> 00:03:40,879
needed

93
00:03:40,879 --> 00:03:44,319
a web proxy or something

94
00:03:44,319 --> 00:03:46,879
so we would deploy a web proxy and then

95
00:03:46,879 --> 00:03:48,879
we saw there was a lot of traffic

96
00:03:48,879 --> 00:03:51,280
going to that particular web proxy so we

97
00:03:51,280 --> 00:03:53,120
would deploy another web proxy

98
00:03:53,120 --> 00:03:55,920
and so on and so forth there'd be a lot

99
00:03:55,920 --> 00:03:57,599
of back and forth between us and these

100
00:03:57,599 --> 00:03:59,599
other entities to say like how many

101
00:03:59,599 --> 00:04:00,080
users

102
00:04:00,080 --> 00:04:02,799
do you have how how do you provision

103
00:04:02,799 --> 00:04:03,680
hosts

104
00:04:03,680 --> 00:04:05,519
you can provision them for us or we can

105
00:04:05,519 --> 00:04:07,120
provision them

106
00:04:07,120 --> 00:04:09,040
and then we would need to watch to make

107
00:04:09,040 --> 00:04:10,239
sure that

108
00:04:10,239 --> 00:04:13,200
we had enough bandwidth and enough host

109
00:04:13,200 --> 00:04:14,959
load to be able to take all the traffic

110
00:04:14,959 --> 00:04:16,399
they were sending at it

111
00:04:16,399 --> 00:04:18,320
so scaling was kind of a big deal but

112
00:04:18,320 --> 00:04:19,918
also the need to deploy

113
00:04:19,918 --> 00:04:23,280
more tools rapidly instead of the

114
00:04:23,280 --> 00:04:24,720
development process

115
00:04:24,720 --> 00:04:28,400
around creating tooling

116
00:04:28,400 --> 00:04:31,440
for individual needs we need something

117
00:04:31,440 --> 00:04:32,800
we can deploy rapidly

118
00:04:32,800 --> 00:04:34,560
and deploy to everyone and have it work

119
00:04:34,560 --> 00:04:37,199
the same way

120
00:04:37,440 --> 00:04:41,520
so we came up with a

121
00:04:41,520 --> 00:04:43,840
pretty quick plan uh we wanted to

122
00:04:43,840 --> 00:04:45,360
abstract the problem away because we

123
00:04:45,360 --> 00:04:46,800
have so many different types of

124
00:04:46,800 --> 00:04:49,199
deployments

125
00:04:49,199 --> 00:04:51,600
we had to make some tactical decisions

126
00:04:51,600 --> 00:04:53,120
about which knobs to expose

127
00:04:53,120 --> 00:04:55,759
kubernetes obviously has a lot of knobs

128
00:04:55,759 --> 00:04:57,520
there's a lot of config you can do

129
00:04:57,520 --> 00:04:58,960
you can do pretty much anything you want

130
00:04:58,960 --> 00:05:00,880
to do as it's like infrastructure as a

131
00:05:00,880 --> 00:05:01,440
service

132
00:05:01,440 --> 00:05:05,360
sort of so we needed to decide

133
00:05:05,360 --> 00:05:07,600
what we could abstract away and what we

134
00:05:07,600 --> 00:05:10,720
need is absolutely hard code

135
00:05:10,720 --> 00:05:13,600
then we needed to use those abstractions

136
00:05:13,600 --> 00:05:14,000
to

137
00:05:14,000 --> 00:05:16,639
come up with our own business logic we

138
00:05:16,639 --> 00:05:18,720
don't have time to look into

139
00:05:18,720 --> 00:05:20,720
a bunch of different nuanced configs

140
00:05:20,720 --> 00:05:21,919
everyone can't have

141
00:05:21,919 --> 00:05:24,000
a different set of tooling we need

142
00:05:24,000 --> 00:05:26,000
everyone to have the same tooling

143
00:05:26,000 --> 00:05:29,600
configured to their needs but

144
00:05:29,600 --> 00:05:33,199
managed the same way and then we need to

145
00:05:33,199 --> 00:05:35,039
eliminate as much of that drift as we

146
00:05:35,039 --> 00:05:35,600
can

147
00:05:35,600 --> 00:05:38,720
so once we've deployed our tooling

148
00:05:38,720 --> 00:05:42,160
we don't want the uh the configuration

149
00:05:42,160 --> 00:05:43,199
to drift

150
00:05:43,199 --> 00:05:44,800
outside of the bounds of what we've

151
00:05:44,800 --> 00:05:47,280
deployed any more than the knobs that

152
00:05:47,280 --> 00:05:53,759
we've provisioned

153
00:05:53,759 --> 00:05:55,280
uh so we containerized some pretty

154
00:05:55,280 --> 00:05:56,800
simple services

155
00:05:56,800 --> 00:05:59,680
to get started uh we did a quick ssh

156
00:05:59,680 --> 00:06:00,560
proxy

157
00:06:00,560 --> 00:06:03,840
and a web proxy we built in some side

158
00:06:03,840 --> 00:06:05,360
cars to be able to do oauth

159
00:06:05,360 --> 00:06:06,080
authentication

160
00:06:06,080 --> 00:06:09,199
on both of those and another sidecar on

161
00:06:09,199 --> 00:06:10,800
the http proxies

162
00:06:10,800 --> 00:06:13,680
to be able to do acme cert renewal all

163
00:06:13,680 --> 00:06:15,280
these things run in parallel

164
00:06:15,280 --> 00:06:16,639
so that we don't have to worry about

165
00:06:16,639 --> 00:06:17,919
updating certs we don't have to worry

166
00:06:17,919 --> 00:06:19,600
about rotating credentials

167
00:06:19,600 --> 00:06:23,199
all that's done for us we have a

168
00:06:23,199 --> 00:06:26,240
dns server with our own rpg zone

169
00:06:26,240 --> 00:06:28,240
and we've got some servers to do

170
00:06:28,240 --> 00:06:30,319
formatting and shipping of logs

171
00:06:30,319 --> 00:06:32,639
so all those are pretty standard use

172
00:06:32,639 --> 00:06:35,520
cases for containerization

173
00:06:35,520 --> 00:06:37,759
turned out to be reasonably easy to

174
00:06:37,759 --> 00:06:40,000
containerize

175
00:06:40,000 --> 00:06:44,160
and they run on kubernetes pretty well

176
00:06:45,680 --> 00:06:47,840
so the the cloud setup process is where

177
00:06:47,840 --> 00:06:49,520
it actually really gets interesting

178
00:06:49,520 --> 00:06:52,639
the we are using the implementations of

179
00:06:52,639 --> 00:06:53,599
kubernetes

180
00:06:53,599 --> 00:06:56,880
that have been provided by the different

181
00:06:56,880 --> 00:06:58,240
cloud providers so

182
00:06:58,240 --> 00:07:01,919
gke eks in amazon

183
00:07:01,919 --> 00:07:05,759
aks in azure and as it turns out

184
00:07:05,759 --> 00:07:07,360
all of those things are just a little

185
00:07:07,360 --> 00:07:09,360
bit different so what they've all done

186
00:07:09,360 --> 00:07:12,800
is abstracted some more of the

187
00:07:12,800 --> 00:07:15,919
internals of kubernetes to suit the

188
00:07:15,919 --> 00:07:18,160
cloud provider that they are hosted on

189
00:07:18,160 --> 00:07:20,240
so you'd use different back-end storage

190
00:07:20,240 --> 00:07:21,680
obviously in

191
00:07:21,680 --> 00:07:24,800
google that you then you would in amazon

192
00:07:24,800 --> 00:07:26,000
so they've they've written their

193
00:07:26,000 --> 00:07:28,840
offering to meet those needs

194
00:07:28,840 --> 00:07:31,440
uh that made everything just a little

195
00:07:31,440 --> 00:07:32,800
bit different we need to write

196
00:07:32,800 --> 00:07:35,280
abstraction layers inside of kubernetes

197
00:07:35,280 --> 00:07:37,759
to be able to do the like file storage

198
00:07:37,759 --> 00:07:38,400
hosting

199
00:07:38,400 --> 00:07:42,880
on the different clouds um

200
00:07:42,880 --> 00:07:45,840
there's there's a lot of uh different

201
00:07:45,840 --> 00:07:47,520
setup steps as well

202
00:07:47,520 --> 00:07:49,919
we had originally started using the

203
00:07:49,919 --> 00:07:51,039
different like

204
00:07:51,039 --> 00:07:54,080
api calls for the clouds and then the

205
00:07:54,080 --> 00:07:56,319
the different offerings for things like

206
00:07:56,319 --> 00:07:58,960
cloud formation deployment manager

207
00:07:58,960 --> 00:08:00,800
but those got unwieldy to manage really

208
00:08:00,800 --> 00:08:03,120
quickly so we switched over to terraform

209
00:08:03,120 --> 00:08:03,759
eventually

210
00:08:03,759 --> 00:08:05,199
terraform made it pretty easy to

211
00:08:05,199 --> 00:08:07,280
abstract all those things away

212
00:08:07,280 --> 00:08:08,879
we still do need to maintain different

213
00:08:08,879 --> 00:08:11,039
configurations for our

214
00:08:11,039 --> 00:08:13,280
amazon and our google configurations for

215
00:08:13,280 --> 00:08:14,560
example though

216
00:08:14,560 --> 00:08:17,280
because they are still considerably

217
00:08:17,280 --> 00:08:19,520
different

218
00:08:22,000 --> 00:08:24,800
uh all right so we we created our

219
00:08:24,800 --> 00:08:26,319
containers and

220
00:08:26,319 --> 00:08:28,400
we got all of the containers plumbed

221
00:08:28,400 --> 00:08:30,720
into the kubernetes ammo files

222
00:08:30,720 --> 00:08:33,039
we decided to stick with yaml for our

223
00:08:33,039 --> 00:08:34,000
back end

224
00:08:34,000 --> 00:08:37,599
storage because that is what cube

225
00:08:37,599 --> 00:08:39,519
control uses cube control is the client

226
00:08:39,519 --> 00:08:41,360
you use to manage kubernetes clusters

227
00:08:41,360 --> 00:08:45,040
like by hand uh so all of the stuff that

228
00:08:45,040 --> 00:08:47,040
we've created to manage it with our

229
00:08:47,040 --> 00:08:50,560
automated process is also able to

230
00:08:50,560 --> 00:08:53,120
be read into cube control to manually

231
00:08:53,120 --> 00:08:54,640
interact with the clusters as well

232
00:08:54,640 --> 00:08:56,880
that was a conscious design decision we

233
00:08:56,880 --> 00:08:58,320
made so that troubleshooting would be

234
00:08:58,320 --> 00:09:00,480
easier

235
00:09:00,480 --> 00:09:02,000
we've got some simple text

236
00:09:02,000 --> 00:09:03,519
configurations for

237
00:09:03,519 --> 00:09:05,440
our the folks that are spinning up these

238
00:09:05,440 --> 00:09:07,600
clusters to be able to configure

239
00:09:07,600 --> 00:09:09,839
that gets parsed into all these

240
00:09:09,839 --> 00:09:11,279
different files for them so they don't

241
00:09:11,279 --> 00:09:12,560
necessarily have to become

242
00:09:12,560 --> 00:09:15,120
familiar with all of the gamel and all

243
00:09:15,120 --> 00:09:15,920
of the

244
00:09:15,920 --> 00:09:17,680
different knobs that you can have in

245
00:09:17,680 --> 00:09:19,120
kubernetes

246
00:09:19,120 --> 00:09:22,480
so a lot of that's abstracted they make

247
00:09:22,480 --> 00:09:24,080
a couple of quick changes

248
00:09:24,080 --> 00:09:27,200
to a file and all that data gets

249
00:09:27,200 --> 00:09:29,680
replicated from our internal job out to

250
00:09:29,680 --> 00:09:31,680
the different clusters that we manage

251
00:09:31,680 --> 00:09:33,920
and this isn't managing one or two

252
00:09:33,920 --> 00:09:35,600
clusters this is managing

253
00:09:35,600 --> 00:09:38,720
tens if not hundreds of clusters all at

254
00:09:38,720 --> 00:09:40,240
different sites

255
00:09:40,240 --> 00:09:41,839
so we've got to make the connection out

256
00:09:41,839 --> 00:09:43,600
to the site we've got to make the

257
00:09:43,600 --> 00:09:45,440
do the configuration in the cloud

258
00:09:45,440 --> 00:09:47,200
specific fashion

259
00:09:47,200 --> 00:09:49,600
and then we've got to return the status

260
00:09:49,600 --> 00:09:52,959
obviously so we can monitor it

261
00:09:53,040 --> 00:09:56,080
we've defined a lot of the different

262
00:09:56,080 --> 00:09:57,920
feature sets that are available

263
00:09:57,920 --> 00:10:00,800
so for replicas we've set a max and min

264
00:10:00,800 --> 00:10:02,160
because we want to make sure that we

265
00:10:02,160 --> 00:10:04,000
have a minimum availability but we don't

266
00:10:04,000 --> 00:10:07,519
want cloud costs uh blow out of control

267
00:10:07,519 --> 00:10:10,000
we've got uh health checks so that our

268
00:10:10,000 --> 00:10:12,160
load balancers can know which nodes to

269
00:10:12,160 --> 00:10:13,920
add or remove from the pools

270
00:10:13,920 --> 00:10:16,640
and we've got different pull policies

271
00:10:16,640 --> 00:10:17,040
for

272
00:10:17,040 --> 00:10:19,360
when we should update images to make

273
00:10:19,360 --> 00:10:21,279
sure that we don't uh terminate existing

274
00:10:21,279 --> 00:10:22,959
connections but also make sure that

275
00:10:22,959 --> 00:10:25,120
we're patching regularly because

276
00:10:25,120 --> 00:10:27,680
the ability to patch uh smaller packages

277
00:10:27,680 --> 00:10:29,040
that are containers

278
00:10:29,040 --> 00:10:31,200
was actually a large impetus behind why

279
00:10:31,200 --> 00:10:33,839
we did this

280
00:10:36,800 --> 00:10:38,640
so the most complicated part of the

281
00:10:38,640 --> 00:10:40,640
whole thing is that job that i mentioned

282
00:10:40,640 --> 00:10:43,519
that pushes the configuration from our

283
00:10:43,519 --> 00:10:45,519
internal clusters out to the external

284
00:10:45,519 --> 00:10:46,800
clusters

285
00:10:46,800 --> 00:10:48,959
that's got a couple of different aspects

286
00:10:48,959 --> 00:10:49,920
to it it

287
00:10:49,920 --> 00:10:52,160
not only updates the containers but it

288
00:10:52,160 --> 00:10:54,560
forces our new workloads to install

289
00:10:54,560 --> 00:10:58,720
it removes no longer used workloads um

290
00:10:58,720 --> 00:11:02,399
we've got a process to

291
00:11:02,399 --> 00:11:05,279
shard data that gets sent into the

292
00:11:05,279 --> 00:11:06,720
config maps stored in

293
00:11:06,720 --> 00:11:09,760
fcd inside of the cluster

294
00:11:09,760 --> 00:11:12,720
so that's a separate job that runs so

295
00:11:12,720 --> 00:11:14,399
that we can push files that are larger

296
00:11:14,399 --> 00:11:15,360
than one meg

297
00:11:15,360 --> 00:11:18,560
into the cluster and

298
00:11:18,560 --> 00:11:20,959
we also have a different job running to

299
00:11:20,959 --> 00:11:22,079
monitor the state

300
00:11:22,079 --> 00:11:24,720
because uh all of the different cloud

301
00:11:24,720 --> 00:11:26,839
providers also have different monitoring

302
00:11:26,839 --> 00:11:29,839
tools

303
00:11:31,519 --> 00:11:35,680
this was actually not super easy

304
00:11:35,680 --> 00:11:37,440
because of the differences in

305
00:11:37,440 --> 00:11:39,040
implementation i already touched on a

306
00:11:39,040 --> 00:11:40,839
couple of those

307
00:11:40,839 --> 00:11:43,920
um an interesting example would be that

308
00:11:43,920 --> 00:11:47,120
when you do a cluster stand up in

309
00:11:47,120 --> 00:11:50,320
eks it doesn't automatically create

310
00:11:50,320 --> 00:11:52,959
nodes for you

311
00:11:53,040 --> 00:11:54,800
uh it creates the cluster and then

312
00:11:54,800 --> 00:11:56,720
there's a separate call you need to make

313
00:11:56,720 --> 00:11:58,240
to create nodes to add them to the

314
00:11:58,240 --> 00:11:59,200
cluster

315
00:11:59,200 --> 00:12:01,760
in gke it creates the cluster and it

316
00:12:01,760 --> 00:12:03,440
creates the nodes and adds them to the

317
00:12:03,440 --> 00:12:04,800
cluster

318
00:12:04,800 --> 00:12:06,560
neither one is necessarily better than

319
00:12:06,560 --> 00:12:08,079
the other

320
00:12:08,079 --> 00:12:09,839
there's a lot of advantages to having

321
00:12:09,839 --> 00:12:11,680
the flexibility but also a lot of

322
00:12:11,680 --> 00:12:13,120
advantages to having the nodes

323
00:12:13,120 --> 00:12:14,399
automatically added

324
00:12:14,399 --> 00:12:15,760
it's just something you have to be aware

325
00:12:15,760 --> 00:12:17,440
of when you're standing up clusters

326
00:12:17,440 --> 00:12:19,519
so that you don't see that your cluster

327
00:12:19,519 --> 00:12:21,680
was created everything's successful

328
00:12:21,680 --> 00:12:23,600
why can't i serve any traffic well

329
00:12:23,600 --> 00:12:26,800
because i don't have any nodes

330
00:12:27,200 --> 00:12:28,480
there's some differences in load

331
00:12:28,480 --> 00:12:31,279
balancing there are some recent changes

332
00:12:31,279 --> 00:12:34,000
to i don't remember which cloud one of

333
00:12:34,000 --> 00:12:34,480
them that

334
00:12:34,480 --> 00:12:37,040
that it couldn't serve udp load balance

335
00:12:37,040 --> 00:12:38,320
traffic for a while

336
00:12:38,320 --> 00:12:40,320
that's since been fixed as the version

337
00:12:40,320 --> 00:12:42,720
of kubernetes gets upgraded

338
00:12:42,720 --> 00:12:46,639
and there's a lot of

339
00:12:47,200 --> 00:12:48,720
kubernetes is actually pretty fast

340
00:12:48,720 --> 00:12:51,519
moving so from the start of the project

341
00:12:51,519 --> 00:12:54,000
probably about two years ago to now

342
00:12:54,000 --> 00:12:57,279
the entire feature set has been changed

343
00:12:57,279 --> 00:12:59,440
we have a lot more functionality

344
00:12:59,440 --> 00:13:00,639
available now

345
00:13:00,639 --> 00:13:03,760
than we did when we first started

346
00:13:03,760 --> 00:13:05,279
so some of the things that we had

347
00:13:05,279 --> 00:13:06,880
written code to do

348
00:13:06,880 --> 00:13:08,959
are no longer applicable because they've

349
00:13:08,959 --> 00:13:11,599
been automated

350
00:13:13,600 --> 00:13:17,279
uh so finally where's the project now

351
00:13:17,279 --> 00:13:20,079
we've actually launched it to our

352
00:13:20,079 --> 00:13:21,920
internal beta process

353
00:13:21,920 --> 00:13:25,440
we are looking to add different cloud

354
00:13:25,440 --> 00:13:26,560
providers all the time

355
00:13:26,560 --> 00:13:29,760
so as the needs arise we are able to

356
00:13:29,760 --> 00:13:32,320
pretty quickly spin up the ability to do

357
00:13:32,320 --> 00:13:35,839
this in different cloud environments

358
00:13:36,000 --> 00:13:37,839
we're looking to add a lot more like our

359
00:13:37,839 --> 00:13:39,040
back policies

360
00:13:39,040 --> 00:13:43,680
to our clusters so that we can

361
00:13:43,680 --> 00:13:45,680
give read-only access to folks that need

362
00:13:45,680 --> 00:13:47,120
to monitor the clusters

363
00:13:47,120 --> 00:13:49,680
but give more access to people that need

364
00:13:49,680 --> 00:13:50,399
to manage

365
00:13:50,399 --> 00:13:54,639
the clusters so that

366
00:13:54,639 --> 00:13:58,079
and we are also adding a whole lot more

367
00:13:58,079 --> 00:13:59,440
monitoring tools we've got an

368
00:13:59,440 --> 00:14:01,120
interesting monitoring suite now that

369
00:14:01,120 --> 00:14:02,079
can then

370
00:14:02,079 --> 00:14:04,399
consists of prometheus and fluentd

371
00:14:04,399 --> 00:14:05,680
largely

372
00:14:05,680 --> 00:14:07,279
both of those allow us to ship both

373
00:14:07,279 --> 00:14:09,760
metrics and logs back from our clusters

374
00:14:09,760 --> 00:14:11,040
and store them in our central

375
00:14:11,040 --> 00:14:13,760
repositories

376
00:14:14,480 --> 00:14:15,920
and then generating more of this

377
00:14:15,920 --> 00:14:17,680
automatically so there's a couple of

378
00:14:17,680 --> 00:14:19,920
manual steps right now

379
00:14:19,920 --> 00:14:22,160
as we continue developing we have fewer

380
00:14:22,160 --> 00:14:25,279
and fewer manual steps

381
00:14:25,920 --> 00:14:29,199
and that's about all that there is so

382
00:14:29,199 --> 00:14:31,360
thank you very much uh if you have any

383
00:14:31,360 --> 00:14:32,480
questions feel free to

384
00:14:32,480 --> 00:14:36,079
shoot them into chat um

385
00:14:36,079 --> 00:14:38,399
that's all i have to say thanks thank

386
00:14:38,399 --> 00:14:39,440
you thanks

387
00:14:39,440 --> 00:14:40,959
guys if you have any questions please

388
00:14:40,959 --> 00:14:43,120
send them across via the zoom chat i

389
00:14:43,120 --> 00:14:44,000
will monitor them

390
00:14:44,000 --> 00:14:46,480
right now

391
00:14:53,760 --> 00:14:56,880
okay okay there are no questions

392
00:14:56,880 --> 00:14:59,360
with regards to kubernetes i believe

393
00:14:59,360 --> 00:15:01,279
because we just had a

394
00:15:01,279 --> 00:15:03,279
four day training on kubernetes and

395
00:15:03,279 --> 00:15:04,959
container security so

396
00:15:04,959 --> 00:15:07,839
i think most of them have already

397
00:15:07,839 --> 00:15:09,360
absorbed a lot of knowledge

398
00:15:09,360 --> 00:15:12,079
and now they just need to go back refer

399
00:15:12,079 --> 00:15:13,440
to all the material

400
00:15:13,440 --> 00:15:15,760
and uh do some hands-on but thank you

401
00:15:15,760 --> 00:15:17,600
john so much uh for this amazing

402
00:15:17,600 --> 00:15:18,639
presentation

403
00:15:18,639 --> 00:15:21,680
and uh we hope uh uh

404
00:15:21,680 --> 00:15:23,920
everybody's safe and we get to meet each

405
00:15:23,920 --> 00:15:24,800
other soon

406
00:15:24,800 --> 00:15:28,079
at a physical conference someday

407
00:15:28,079 --> 00:15:37,680
yeah all right bye

