1
00:00:04,100 --> 00:00:07,259
good afternoon everyone so today the

2
00:00:07,259 --> 00:00:09,780
topic at hand is raining series on

3
00:00:09,780 --> 00:00:12,120
WordPress plugins with Sim grip

4
00:00:12,120 --> 00:00:16,560
so let's talk about it I am a Content

5
00:00:16,560 --> 00:00:20,160
engineer at hack the box I am product

6
00:00:20,160 --> 00:00:23,039
security Analyst at hacker one

7
00:00:23,039 --> 00:00:25,619
so let's cover the agenda first so that

8
00:00:25,619 --> 00:00:28,320
you can attend what you want okay so

9
00:00:28,320 --> 00:00:30,060
first of all we are going to talk about

10
00:00:30,060 --> 00:00:33,059
some somewhat about code Vigilant the

11
00:00:33,059 --> 00:00:35,280
project that we did this research under

12
00:00:35,280 --> 00:00:38,219
after that we'll explain why we chose

13
00:00:38,219 --> 00:00:40,379
WordPress as our Target when we were

14
00:00:40,379 --> 00:00:42,120
doing this research

15
00:00:42,120 --> 00:00:44,879
uh after that we'll show our approach uh

16
00:00:44,879 --> 00:00:48,000
how we approach this Target and uh after

17
00:00:48,000 --> 00:00:49,739
that there will be a short session on

18
00:00:49,739 --> 00:00:53,100
what is Sam grab how to use it how to

19
00:00:53,100 --> 00:00:55,379
use stem grab and

20
00:00:55,379 --> 00:00:57,420
after that we'll show you how we refine

21
00:00:57,420 --> 00:00:59,940
these uh like how to write basic rules

22
00:00:59,940 --> 00:01:02,699
and how we refine these rules to find

23
00:01:02,699 --> 00:01:07,380
basically a lot less false positives

24
00:01:07,380 --> 00:01:09,360
after that we'll cover the automation

25
00:01:09,360 --> 00:01:11,700
side of things so while we were doing

26
00:01:11,700 --> 00:01:13,799
all of this uh

27
00:01:13,799 --> 00:01:15,780
things got super tedious after a while

28
00:01:15,780 --> 00:01:19,680
so we did a lot of Automation and that

29
00:01:19,680 --> 00:01:22,320
led to a tool called exercise bomb we'll

30
00:01:22,320 --> 00:01:24,299
talk a lot more about it in later

31
00:01:24,299 --> 00:01:27,119
sections and then we'll talk some more

32
00:01:27,119 --> 00:01:30,479
about developer misconceptions and best

33
00:01:30,479 --> 00:01:33,180
practices then we'll show you what are

34
00:01:33,180 --> 00:01:34,860
our plans for the future of This

35
00:01:34,860 --> 00:01:36,000
research

36
00:01:36,000 --> 00:01:38,759
so let's start with that the code

37
00:01:38,759 --> 00:01:42,600
Vigilant project basically is a a

38
00:01:42,600 --> 00:01:45,060
project that came out of with the need

39
00:01:45,060 --> 00:01:47,659
of making open source software more

40
00:01:47,659 --> 00:01:51,420
secure so I'll we all know that a large

41
00:01:51,420 --> 00:01:53,220
number of users basically use open

42
00:01:53,220 --> 00:01:55,320
source software but a very few of them

43
00:01:55,320 --> 00:01:57,960
actually contribute towards securing

44
00:01:57,960 --> 00:02:00,960
them and that is what our aim at code

45
00:02:00,960 --> 00:02:03,960
Vigilant is so when we are doing some

46
00:02:03,960 --> 00:02:07,619
sort of research uh our objective is one

47
00:02:07,619 --> 00:02:09,060
of two things

48
00:02:09,060 --> 00:02:11,879
the first objective is identifying these

49
00:02:11,879 --> 00:02:14,040
vulnerabilities in open source projects

50
00:02:14,040 --> 00:02:17,099
and getting them passed and fixed the

51
00:02:17,099 --> 00:02:18,900
second objective is

52
00:02:18,900 --> 00:02:21,660
if we cannot do like if we can't do

53
00:02:21,660 --> 00:02:23,879
patching if the developer has abandoned

54
00:02:23,879 --> 00:02:25,260
the project and the project has been

55
00:02:25,260 --> 00:02:27,540
open for too long but it is still being

56
00:02:27,540 --> 00:02:29,700
used somewhere then making it public

57
00:02:29,700 --> 00:02:32,400
information and basically discourage

58
00:02:32,400 --> 00:02:34,860
people from using it

59
00:02:34,860 --> 00:02:37,260
so now today I will talk about why we

60
00:02:37,260 --> 00:02:39,239
chose WordPress as our Target

61
00:02:39,239 --> 00:02:41,400
thank you Shiraz

62
00:02:41,400 --> 00:02:44,879
so why we chose WordPress as a Target uh

63
00:02:44,879 --> 00:02:47,879
so the very first reason for this is uh

64
00:02:47,879 --> 00:02:50,580
PHP are the same rep release the Alpha

65
00:02:50,580 --> 00:02:54,180
version for the PHP in 2020 and once we

66
00:02:54,180 --> 00:02:57,599
knew that we knew that a lot of Open

67
00:02:57,599 --> 00:03:00,720
Source CMS projects are there that are

68
00:03:00,720 --> 00:03:03,540
really widely used and WordPress is one

69
00:03:03,540 --> 00:03:08,160
of them and it has got a list of 80 000

70
00:03:08,160 --> 00:03:10,560
plus plugins and we already knew that

71
00:03:10,560 --> 00:03:13,500
was a jackpot and that's why we chose

72
00:03:13,500 --> 00:03:16,580
WordPress as a Target

73
00:03:16,860 --> 00:03:20,280
okay uh the pen testing approach so uh

74
00:03:20,280 --> 00:03:22,379
since the stock is all about static code

75
00:03:22,379 --> 00:03:24,959
analysis so first let's get to the basic

76
00:03:24,959 --> 00:03:27,540
definition of what it is so static code

77
00:03:27,540 --> 00:03:29,760
analysis is basically reading through

78
00:03:29,760 --> 00:03:31,860
the code in order to find out vulnerable

79
00:03:31,860 --> 00:03:35,040
patterns and any vulnerability that you

80
00:03:35,040 --> 00:03:36,480
can find just by reading without

81
00:03:36,480 --> 00:03:40,260
executing the code so that's that so uh

82
00:03:40,260 --> 00:03:43,200
moving on to the next few points uh

83
00:03:43,200 --> 00:03:45,959
these were the two points that were part

84
00:03:45,959 --> 00:03:48,659
of our whole research first is moving

85
00:03:48,659 --> 00:03:51,900
from code to feature and other uh moving

86
00:03:51,900 --> 00:03:53,940
from feature to code so the first point

87
00:03:53,940 --> 00:03:57,540
is very obvious that sem rep was giving

88
00:03:57,540 --> 00:04:01,019
us all the output uh it used to give us

89
00:04:01,019 --> 00:04:03,659
the exact code snippet the corresponding

90
00:04:03,659 --> 00:04:06,180
line number and we used to just install

91
00:04:06,180 --> 00:04:08,700
the plugin and used to just validate

92
00:04:08,700 --> 00:04:12,060
that so it was as simple as that but the

93
00:04:12,060 --> 00:04:14,159
catch here is with the next point which

94
00:04:14,159 --> 00:04:17,399
is the feature to code thing and what it

95
00:04:17,399 --> 00:04:19,738
is is the thing that we do all the time

96
00:04:19,738 --> 00:04:21,899
with bug bounties so we are simply

97
00:04:21,899 --> 00:04:24,300
testing out the web application here we

98
00:04:24,300 --> 00:04:26,340
were simply testing out a randomly

99
00:04:26,340 --> 00:04:29,340
chosen WordPress plugin so what happened

100
00:04:29,340 --> 00:04:31,500
here was uh when we were doing such

101
00:04:31,500 --> 00:04:34,259
exercise we came across a lot of

102
00:04:34,259 --> 00:04:36,300
patterns for which we never wrote a

103
00:04:36,300 --> 00:04:39,479
semcraft rule so we started with very

104
00:04:39,479 --> 00:04:43,080
basic uh xss or sqli rules but doing

105
00:04:43,080 --> 00:04:46,080
this exercises allowed us to write some

106
00:04:46,080 --> 00:04:49,380
more tricky patterns around rules and

107
00:04:49,380 --> 00:04:51,840
yeah that that was the interesting part

108
00:04:51,840 --> 00:04:54,720
for this particular exercise

109
00:04:54,720 --> 00:04:58,560
okay so since I'm saying a lot this term

110
00:04:58,560 --> 00:05:01,800
Sam graph so let's see what it is so in

111
00:05:01,800 --> 00:05:03,900
uh one of the previous talks in the bug

112
00:05:03,900 --> 00:05:05,699
Bounty graph track

113
00:05:05,699 --> 00:05:08,160
um Sandeep had mentioned a lot of tools

114
00:05:08,160 --> 00:05:11,340
that are open source and uh one for PHP

115
00:05:11,340 --> 00:05:16,620
is uh some uh so uh so like for this

116
00:05:16,620 --> 00:05:20,040
research we uh chosen uh sem rep so like

117
00:05:20,040 --> 00:05:21,900
I said there was a Alpha version for it

118
00:05:21,900 --> 00:05:25,500
so um so yeah it's the open source tool

119
00:05:25,500 --> 00:05:27,840
for doing static code analysis and it

120
00:05:27,840 --> 00:05:30,419
does that in at great speed it has got

121
00:05:30,419 --> 00:05:33,539
support for 17 plus languages including

122
00:05:33,539 --> 00:05:38,400
Java PHP uh python go uh and yes it

123
00:05:38,400 --> 00:05:40,680
allows us to write custom rules and that

124
00:05:40,680 --> 00:05:43,139
can be according to your uh specific

125
00:05:43,139 --> 00:05:46,860
code basis and yes it is used for either

126
00:05:46,860 --> 00:05:49,080
hunting for vulnerabilities or you can

127
00:05:49,080 --> 00:05:51,360
enforce certain guardrails on your code

128
00:05:51,360 --> 00:05:53,520
basis

129
00:05:53,520 --> 00:05:57,600
okay so sem rep usage so if you're not

130
00:05:57,600 --> 00:06:00,060
aware how semraf works so this

131
00:06:00,060 --> 00:06:02,880
screenshot is from the semra playground

132
00:06:02,880 --> 00:06:06,600
where on the right side you see that the

133
00:06:06,600 --> 00:06:09,300
highlighted line number seven and eight

134
00:06:09,300 --> 00:06:13,320
uh depicts a Sure Shot xss where we are

135
00:06:13,320 --> 00:06:16,020
using a variable car and there's a post

136
00:06:16,020 --> 00:06:18,120
based parameter USD and we are simply

137
00:06:18,120 --> 00:06:20,759
echoing it that's the nothing can be

138
00:06:20,759 --> 00:06:23,940
more basic than that so uh the left side

139
00:06:23,940 --> 00:06:27,300
uh depicts how a rule can be written in

140
00:06:27,300 --> 00:06:29,520
order to catch that particular pattern

141
00:06:29,520 --> 00:06:32,520
so uh starting from the language it's

142
00:06:32,520 --> 00:06:36,240
PHP of course uh then uh with the code

143
00:06:36,240 --> 00:06:39,660
uh which is dollar V equal to person get

144
00:06:39,660 --> 00:06:43,139
key so here dollar V can be referred to

145
00:06:43,139 --> 00:06:46,380
any variable defined in PHP and then we

146
00:06:46,380 --> 00:06:49,259
are using a dollar get key and here key

147
00:06:49,259 --> 00:06:52,020
can be any post base or a get based

148
00:06:52,020 --> 00:06:53,840
parameter so

149
00:06:53,840 --> 00:06:57,660
like we have done it for get based

150
00:06:57,660 --> 00:07:00,360
parameter there is a or condition for a

151
00:07:00,360 --> 00:07:02,460
post base parameter and we can do it for

152
00:07:02,460 --> 00:07:05,400
request based parameter as well now the

153
00:07:05,400 --> 00:07:08,340
important uh thing here is the three

154
00:07:08,340 --> 00:07:11,039
dots so the three dots helped us a lot

155
00:07:11,039 --> 00:07:13,860
in identifying whether code snippet was

156
00:07:13,860 --> 00:07:16,620
actually vulnerable or not because uh

157
00:07:16,620 --> 00:07:19,800
you would see the highlighted scenario

158
00:07:19,800 --> 00:07:22,139
in a very rare case because that

159
00:07:22,139 --> 00:07:24,660
generally doesn't happen so a lot of

160
00:07:24,660 --> 00:07:26,280
times there are a lot of operations

161
00:07:26,280 --> 00:07:29,160
going on within a variable when it's

162
00:07:29,160 --> 00:07:31,199
declared so there can be a lot of

163
00:07:31,199 --> 00:07:33,660
filters being used so

164
00:07:33,660 --> 00:07:36,900
um the three dots allowed us to uh just

165
00:07:36,900 --> 00:07:38,940
for reading the code we could identify

166
00:07:38,940 --> 00:07:42,599
if the plugin is actually vulnerable or

167
00:07:42,599 --> 00:07:45,300
not so by doing that we were just simply

168
00:07:45,300 --> 00:07:47,639
reading the code but we didn't used to

169
00:07:47,639 --> 00:07:50,340
like install every plugin all the time

170
00:07:50,340 --> 00:07:52,560
because we knew that there is a filter

171
00:07:52,560 --> 00:07:55,139
present means there is no excesses

172
00:07:55,139 --> 00:07:57,720
present so that was that and then the

173
00:07:57,720 --> 00:08:01,319
last line is simply Echo dollar V so the

174
00:08:01,319 --> 00:08:03,419
three dots are basically all the lines

175
00:08:03,419 --> 00:08:06,300
that would be coming between these two

176
00:08:06,300 --> 00:08:09,419
defined patterns uh then again here the

177
00:08:09,419 --> 00:08:11,759
important part is uh writing the

178
00:08:11,759 --> 00:08:15,000
exclusions so like we know that a lot of

179
00:08:15,000 --> 00:08:19,319
filters are defined to make uh code uh

180
00:08:19,319 --> 00:08:22,500
not excesses exploitable so uh here are

181
00:08:22,500 --> 00:08:25,199
two examples just written if the code is

182
00:08:25,199 --> 00:08:28,800
part of intell then the code is not

183
00:08:28,800 --> 00:08:31,080
vulnerable to exercise that we are like

184
00:08:31,080 --> 00:08:33,479
for example assuming so we will be

185
00:08:33,479 --> 00:08:35,640
adding all that in our exclusion list

186
00:08:35,640 --> 00:08:37,320
and

187
00:08:37,320 --> 00:08:40,440
um okay so that was the

188
00:08:40,440 --> 00:08:44,640
um UI thing that we just saw and uh

189
00:08:44,640 --> 00:08:46,920
corresponding to it a yaml file always

190
00:08:46,920 --> 00:08:49,200
gets created on the same grip platform

191
00:08:49,200 --> 00:08:52,800
that looks just like that and it's an

192
00:08:52,800 --> 00:08:55,200
example from the previous slide and all

193
00:08:55,200 --> 00:08:57,240
the same things are written like there

194
00:08:57,240 --> 00:08:59,640
are pattern either and the pattern

195
00:08:59,640 --> 00:09:01,740
defined and there is a pattern not

196
00:09:01,740 --> 00:09:05,940
inside means your defined pattern should

197
00:09:05,940 --> 00:09:09,140
not be inside filters such as end well

198
00:09:09,140 --> 00:09:14,580
okay so here is a small demo uh

199
00:09:14,580 --> 00:09:17,459
which will show you the basic usage of

200
00:09:17,459 --> 00:09:21,200
how sem graph Works uh so if you can see

201
00:09:21,200 --> 00:09:24,540
uh I am gonna

202
00:09:24,540 --> 00:09:27,240
okay uh so the first command is just

203
00:09:27,240 --> 00:09:30,120
listing out the contents of folder for

204
00:09:30,120 --> 00:09:32,040
testing which we created for testing

205
00:09:32,040 --> 00:09:34,980
purpose it does contain uh two folders

206
00:09:34,980 --> 00:09:38,040
admin and user and a lot of files which

207
00:09:38,040 --> 00:09:41,599
contain the vulnerable code

208
00:09:43,080 --> 00:09:45,660
now we are gonna have a look at a basic

209
00:09:45,660 --> 00:09:48,360
xss rule and how it looks like so see

210
00:09:48,360 --> 00:09:51,480
here you can see that a lot of filters

211
00:09:51,480 --> 00:09:53,519
have been defined so we jot it down a

212
00:09:53,519 --> 00:09:57,300
list and it contains mostly used uh

213
00:09:57,300 --> 00:10:01,380
filters within WordPress environment uh

214
00:10:01,380 --> 00:10:03,240
so

215
00:10:03,240 --> 00:10:06,000
yeah and like you see in the pattern

216
00:10:06,000 --> 00:10:08,940
either you see that it's a get key post

217
00:10:08,940 --> 00:10:11,220
key request key and the pattern inside

218
00:10:11,220 --> 00:10:15,959
is Echo dollar X so that means that it's

219
00:10:15,959 --> 00:10:18,839
simply saying that it's Echo dollar get

220
00:10:18,839 --> 00:10:22,380
key it's as simple as that so like we

221
00:10:22,380 --> 00:10:25,200
see in our previous slide that we were

222
00:10:25,200 --> 00:10:27,540
first initializing the variable and here

223
00:10:27,540 --> 00:10:29,700
we are directly calling the get base or

224
00:10:29,700 --> 00:10:32,580
post based inside the echo statement so

225
00:10:32,580 --> 00:10:34,980
these small tweakings

226
00:10:34,980 --> 00:10:37,380
um were really helpful and those were

227
00:10:37,380 --> 00:10:39,779
giving totally completely different

228
00:10:39,779 --> 00:10:42,839
results with valid accesses

229
00:10:42,839 --> 00:10:45,560
foreign

230
00:10:46,700 --> 00:10:49,800
command that we write here is same rep

231
00:10:49,800 --> 00:10:53,820
hyphen hyphen config uh the file that we

232
00:10:53,820 --> 00:10:56,459
just saw the yaml file on our folder for

233
00:10:56,459 --> 00:10:59,519
testing and it does outputs a few

234
00:10:59,519 --> 00:11:02,220
results and in line number six as you

235
00:11:02,220 --> 00:11:05,459
can see that it echoes dollar get K but

236
00:11:05,459 --> 00:11:08,640
in line number 22 you also see Echo int

237
00:11:08,640 --> 00:11:12,060
dollar get I which means uh so we had

238
00:11:12,060 --> 00:11:14,579
not included int as part of our

239
00:11:14,579 --> 00:11:17,459
exclusion list hence that's the result

240
00:11:17,459 --> 00:11:20,880
on the screen and we were uh like we

241
00:11:20,880 --> 00:11:22,980
were using multiple cases as well where

242
00:11:22,980 --> 00:11:25,980
on line number 31 you can see that it's

243
00:11:25,980 --> 00:11:28,620
been preceded by ABC and succeeded by

244
00:11:28,620 --> 00:11:31,380
XYZ means whatever lies between the echo

245
00:11:31,380 --> 00:11:34,860
statement your rule should still work so

246
00:11:34,860 --> 00:11:38,519
that was for uh xss I'm gonna run a

247
00:11:38,519 --> 00:11:42,140
similar sort of thing for sqli as well

248
00:11:42,140 --> 00:11:47,339
uh so yeah that's a basic rule for sqli

249
00:11:47,339 --> 00:11:51,180
where you can see that uh wpdb get row

250
00:11:51,180 --> 00:11:52,920
has been called and there are no

251
00:11:52,920 --> 00:11:55,860
prepared statements used and that means

252
00:11:55,860 --> 00:11:59,579
that it's a direct sqli on a WordPress

253
00:11:59,579 --> 00:12:02,060
plugin

254
00:12:02,339 --> 00:12:04,920
so same thing here also we need to add

255
00:12:04,920 --> 00:12:07,680
all the exclusion list uh now the same

256
00:12:07,680 --> 00:12:10,440
command uh just the config file changes

257
00:12:10,440 --> 00:12:14,279
and the folder for testing uh so like

258
00:12:14,279 --> 00:12:16,560
you see here in the video we got a

259
00:12:16,560 --> 00:12:19,680
result on line number five where it

260
00:12:19,680 --> 00:12:22,620
looks like it is a valid sqli but it's

261
00:12:22,620 --> 00:12:25,140
not actually so we'll be covering that

262
00:12:25,140 --> 00:12:29,100
in upcoming slides uh like explaining

263
00:12:29,100 --> 00:12:32,700
why it was not a valid sqli so uh that

264
00:12:32,700 --> 00:12:36,120
was all for this demo

265
00:12:36,120 --> 00:12:39,120
okay

266
00:12:41,880 --> 00:12:44,720
thank you

267
00:12:44,760 --> 00:12:47,399
okay so like I said

268
00:12:47,399 --> 00:12:49,079
um refining the rules was really

269
00:12:49,079 --> 00:12:52,740
important here because uh we as I said

270
00:12:52,740 --> 00:12:54,600
that we were moving from feature to code

271
00:12:54,600 --> 00:12:56,820
as well we were we were looking through

272
00:12:56,820 --> 00:12:59,339
a lot of different coding Styles coding

273
00:12:59,339 --> 00:13:02,160
patterns and how different developers

274
00:13:02,160 --> 00:13:04,320
are doing different stuff so based on

275
00:13:04,320 --> 00:13:06,959
that we were doing all our tweaks and

276
00:13:06,959 --> 00:13:10,500
tricks and we were writing just by a

277
00:13:10,500 --> 00:13:12,480
small change we were getting completely

278
00:13:12,480 --> 00:13:15,000
different results and those are some of

279
00:13:15,000 --> 00:13:16,680
the examples like on the second

280
00:13:16,680 --> 00:13:19,139
screenshot you see that there is a

281
00:13:19,139 --> 00:13:21,779
function call for get row and in the

282
00:13:21,779 --> 00:13:23,700
third screenshot you see there is a call

283
00:13:23,700 --> 00:13:27,120
for wpdb query and both of them are

284
00:13:27,120 --> 00:13:30,600
gonna give valid sqli results

285
00:13:30,600 --> 00:13:31,860
okay

286
00:13:31,860 --> 00:13:34,920
uh so for this section uh so that was

287
00:13:34,920 --> 00:13:37,200
the end of sem grab and now I'm gonna

288
00:13:37,200 --> 00:13:39,540
hand over to Shiraz

289
00:13:39,540 --> 00:13:42,779
so actually I just told us that how we

290
00:13:42,779 --> 00:13:44,700
wrote Our same graph rules

291
00:13:44,700 --> 00:13:47,100
so writing these rules were

292
00:13:47,100 --> 00:13:49,680
um a bit of an exp like experiment

293
00:13:49,680 --> 00:13:51,839
because initially we were writing some

294
00:13:51,839 --> 00:13:53,579
basic rules and then we were running

295
00:13:53,579 --> 00:13:56,040
them validating these plugins manually

296
00:13:56,040 --> 00:13:58,500
and then we ended up with a bunch of

297
00:13:58,500 --> 00:14:00,720
plugins that were again hand validated

298
00:14:00,720 --> 00:14:03,420
in order to find out that more of these

299
00:14:03,420 --> 00:14:06,360
filters are in place that make the

300
00:14:06,360 --> 00:14:09,180
make our pattern basically unexploitable

301
00:14:09,180 --> 00:14:11,639
so that's how we kept on enhancing them

302
00:14:11,639 --> 00:14:14,339
but after a certain point we came to a

303
00:14:14,339 --> 00:14:16,320
point where it was too trivial to keep

304
00:14:16,320 --> 00:14:18,320
doing it over and over and over again

305
00:14:18,320 --> 00:14:22,019
and also we were validating these issues

306
00:14:22,019 --> 00:14:24,240
so somewhere around like

307
00:14:24,240 --> 00:14:27,839
we found 150 plus SQL injection

308
00:14:27,839 --> 00:14:31,320
possibilities and we hand validated all

309
00:14:31,320 --> 00:14:32,279
of them

310
00:14:32,279 --> 00:14:35,760
but while doing that uh we kind of

311
00:14:35,760 --> 00:14:37,800
figured out that

312
00:14:37,800 --> 00:14:40,620
uh do uh doing it by hand was very

313
00:14:40,620 --> 00:14:42,839
tedious so even if you find just one SQL

314
00:14:42,839 --> 00:14:45,959
injection so let's say that there is an

315
00:14:45,959 --> 00:14:48,180
SQL injection that works on the admin

316
00:14:48,180 --> 00:14:50,339
administrator panel of Wordpress

317
00:14:50,339 --> 00:14:52,760
but you cannot exploit it on in an

318
00:14:52,760 --> 00:14:55,740
unauthenticated fashion or with a lower

319
00:14:55,740 --> 00:15:00,120
user privileges so now yes uh so we had

320
00:15:00,120 --> 00:15:02,639
to do this all over all over again so

321
00:15:02,639 --> 00:15:05,399
let's say we had like 50 plugins that

322
00:15:05,399 --> 00:15:07,380
were actually vulnerable out of those

323
00:15:07,380 --> 00:15:10,260
150 we had to do all of this validation

324
00:15:10,260 --> 00:15:12,600
again and again and again so that's why

325
00:15:12,600 --> 00:15:14,639
we ended up writing smaller modules for

326
00:15:14,639 --> 00:15:16,500
at first we were writing smaller modules

327
00:15:16,500 --> 00:15:18,360
to automate this

328
00:15:18,360 --> 00:15:20,459
the first one is escalation of

329
00:15:20,459 --> 00:15:21,839
vulnerability with various different

330
00:15:21,839 --> 00:15:23,760
user privileges so it is somewhat like

331
00:15:23,760 --> 00:15:25,680
an uh like you might have used

332
00:15:25,680 --> 00:15:28,920
authorized in burp and uh this is

333
00:15:28,920 --> 00:15:31,139
exactly what it does but it first of all

334
00:15:31,139 --> 00:15:34,920
it reads the SM graph files uh make sure

335
00:15:34,920 --> 00:15:36,899
that the SQL injection is

336
00:15:36,899 --> 00:15:37,680
um

337
00:15:37,680 --> 00:15:39,899
actually vulnerable and then it goes

338
00:15:39,899 --> 00:15:43,019
through and tests all five or all five

339
00:15:43,019 --> 00:15:45,959
or six basically so WordPress has six

340
00:15:45,959 --> 00:15:48,600
default privileges administrator editor

341
00:15:48,600 --> 00:15:52,019
author and then I think subscriber and

342
00:15:52,019 --> 00:15:53,100
then

343
00:15:53,100 --> 00:15:55,440
um unauthenticated so we tested the

344
00:15:55,440 --> 00:15:58,199
games all of that using our small module

345
00:15:58,199 --> 00:16:01,800
which led to another problem so every

346
00:16:01,800 --> 00:16:03,839
time you write a write one of these

347
00:16:03,839 --> 00:16:05,160
automation Scripts

348
00:16:05,160 --> 00:16:08,160
WordPress is sort of a problem in that

349
00:16:08,160 --> 00:16:11,459
sense that um WordPress isn't structured

350
00:16:11,459 --> 00:16:13,740
when a plugin developer actually starts

351
00:16:13,740 --> 00:16:16,380
writing a plugin they don't have to

352
00:16:16,380 --> 00:16:18,120
follow a convention they do it however

353
00:16:18,120 --> 00:16:19,320
they want to

354
00:16:19,320 --> 00:16:23,399
which means we have a problem here as

355
00:16:23,399 --> 00:16:25,620
um let's say that there's one plugin

356
00:16:25,620 --> 00:16:26,519
called

357
00:16:26,519 --> 00:16:29,220
custom ad user or whatever you install

358
00:16:29,220 --> 00:16:32,220
that and the developer has written it in

359
00:16:32,220 --> 00:16:34,079
such a fashion that it is accessible on

360
00:16:34,079 --> 00:16:36,720
the admin panel at slash admin slash

361
00:16:36,720 --> 00:16:39,839
custom ad user.php that is a single file

362
00:16:39,839 --> 00:16:43,199
easier to navigate to easier to find

363
00:16:43,199 --> 00:16:45,660
but that's not always the case because

364
00:16:45,660 --> 00:16:47,579
now there are some developers who were

365
00:16:47,579 --> 00:16:49,740
writing code in such a fashion that it

366
00:16:49,740 --> 00:16:52,980
was object oriented code so

367
00:16:52,980 --> 00:16:54,959
the class and the function that we

368
00:16:54,959 --> 00:16:56,579
needed to access was in a completely

369
00:16:56,579 --> 00:16:58,259
different file than it was getting

370
00:16:58,259 --> 00:17:00,300
inherited and then used somewhere else

371
00:17:00,300 --> 00:17:01,680
completely

372
00:17:01,680 --> 00:17:04,500
reaching that function manually was so

373
00:17:04,500 --> 00:17:07,140
hard that we couldn't really get to them

374
00:17:07,140 --> 00:17:08,640
manually

375
00:17:08,640 --> 00:17:11,760
trying to find any structures led us to

376
00:17:11,760 --> 00:17:14,699
believe that there weren't any so what

377
00:17:14,699 --> 00:17:16,799
we ended up doing was

378
00:17:16,799 --> 00:17:19,500
we crawled through we made a login

379
00:17:19,500 --> 00:17:22,079
simulation script which logged in and

380
00:17:22,079 --> 00:17:24,119
crawled through WordPress a fresh

381
00:17:24,119 --> 00:17:27,119
install of Wordpress and then what we

382
00:17:27,119 --> 00:17:30,600
did was uh we again installed the plugin

383
00:17:30,600 --> 00:17:33,419
and then ran the script again so we have

384
00:17:33,419 --> 00:17:35,940
two instances now a fresh install and a

385
00:17:35,940 --> 00:17:38,400
one with the plugin installed on it then

386
00:17:38,400 --> 00:17:40,380
we dipped them together to find the

387
00:17:40,380 --> 00:17:43,500
unique URLs and now we had a smaller

388
00:17:43,500 --> 00:17:47,780
number more targeted uh URLs or access

389
00:17:47,780 --> 00:17:51,179
modifiers or whatever and then you would

390
00:17:51,179 --> 00:17:53,280
be able to use your plugin uh you you

391
00:17:53,280 --> 00:17:56,039
would be able to use your payloads on

392
00:17:56,039 --> 00:17:57,360
these now

393
00:17:57,360 --> 00:17:59,760
so that was the second automation module

394
00:17:59,760 --> 00:18:01,320
that we wrote and then the third one was

395
00:18:01,320 --> 00:18:03,600
report generator the report generator

396
00:18:03,600 --> 00:18:05,039
was

397
00:18:05,039 --> 00:18:08,160
so we um we ran into a problem

398
00:18:08,160 --> 00:18:12,140
we found 58 something xss and for each

399
00:18:12,140 --> 00:18:16,140
uh 50 something uh SQL injections I'm

400
00:18:16,140 --> 00:18:18,840
sorry and for each of these we had to

401
00:18:18,840 --> 00:18:21,419
write two reports one that went to WP

402
00:18:21,419 --> 00:18:24,360
scan and one that went to code Vigilant

403
00:18:24,360 --> 00:18:26,640
the code Vigilant report had a lot more

404
00:18:26,640 --> 00:18:29,280
details and the wp scanner needed much

405
00:18:29,280 --> 00:18:31,440
details rather than the exploitable part

406
00:18:31,440 --> 00:18:34,140
of the code and that's about it

407
00:18:34,140 --> 00:18:37,020
so in order to do that we wrote a third

408
00:18:37,020 --> 00:18:39,480
module because we were confusing and

409
00:18:39,480 --> 00:18:41,760
like it was very confusing to do it

410
00:18:41,760 --> 00:18:44,100
twice each and every time and yeah it

411
00:18:44,100 --> 00:18:46,160
was time consuming so that was the third

412
00:18:46,160 --> 00:18:49,200
smaller automation but while doing all

413
00:18:49,200 --> 00:18:51,120
of this automation we kind of got

414
00:18:51,120 --> 00:18:53,700
addicted to it and we wanted to do

415
00:18:53,700 --> 00:18:55,799
everything by automation because

416
00:18:55,799 --> 00:18:58,559
validating 150 SQL injections by hand

417
00:18:58,559 --> 00:19:00,780
led to

418
00:19:00,780 --> 00:19:03,240
a lot of tedious amount of work that we

419
00:19:03,240 --> 00:19:06,960
did so uh funny story is that I started

420
00:19:06,960 --> 00:19:10,080
working on validating about 10 plugins

421
00:19:10,080 --> 00:19:13,140
and I kept on doing it till like 20 and

422
00:19:13,140 --> 00:19:15,480
it took me two days uh including nights

423
00:19:15,480 --> 00:19:17,640
and I didn't sleep

424
00:19:17,640 --> 00:19:20,760
so yeah a similar and Shreya divided the

425
00:19:20,760 --> 00:19:22,799
work so she didn't like I don't know two

426
00:19:22,799 --> 00:19:24,660
weeks which is

427
00:19:24,660 --> 00:19:27,000
fine if you're doing it for 150 plus

428
00:19:27,000 --> 00:19:29,760
plugins only I guess

429
00:19:29,760 --> 00:19:32,880
but if you are if you don't access Rule

430
00:19:32,880 --> 00:19:35,640
and we ended up finding about 4 000 plus

431
00:19:35,640 --> 00:19:38,340
possibilities of this exercise

432
00:19:38,340 --> 00:19:40,860
and we kind of gave up on it immediately

433
00:19:40,860 --> 00:19:42,179
because

434
00:19:42,179 --> 00:19:45,960
it's not uh easy to do it right you

435
00:19:45,960 --> 00:19:48,419
can't install each and every plug-in uh

436
00:19:48,419 --> 00:19:50,760
look at the source code and then go back

437
00:19:50,760 --> 00:19:52,860
to it try to exploit it see if it's not

438
00:19:52,860 --> 00:19:54,900
vulnerable and all doing it all four

439
00:19:54,900 --> 00:19:57,059
thousand times would take I don't know

440
00:19:57,059 --> 00:19:58,080
years

441
00:19:58,080 --> 00:20:00,419
so we made an exercise bomb

442
00:20:00,419 --> 00:20:04,559
we got to work and initially we wrote a

443
00:20:04,559 --> 00:20:07,500
parser for Sim rep so the files that Sam

444
00:20:07,500 --> 00:20:10,080
graph was generating we took out all the

445
00:20:10,080 --> 00:20:12,600
important information from it we took

446
00:20:12,600 --> 00:20:14,539
out the ordinary possible vulnerable

447
00:20:14,539 --> 00:20:17,880
parameters file names uh plug-in names

448
00:20:17,880 --> 00:20:19,679
and all of that

449
00:20:19,679 --> 00:20:22,320
we made a VM

450
00:20:22,320 --> 00:20:23,220
um

451
00:20:23,220 --> 00:20:26,640
and put that on it and then let let the

452
00:20:26,640 --> 00:20:28,620
script run in order to install it all

453
00:20:28,620 --> 00:20:31,860
together validated then reset back and

454
00:20:31,860 --> 00:20:34,559
work again we'll see a demo so it's not

455
00:20:34,559 --> 00:20:36,419
that confusing

456
00:20:36,419 --> 00:20:38,700
the second point is

457
00:20:38,700 --> 00:20:42,179
making exercise bomb was super hard

458
00:20:42,179 --> 00:20:45,059
because here first of all there was no

459
00:20:45,059 --> 00:20:46,980
guidelines on doing it we were doing it

460
00:20:46,980 --> 00:20:49,919
very manually and second of all when we

461
00:20:49,919 --> 00:20:52,200
were automating it there were like three

462
00:20:52,200 --> 00:20:54,360
failures that we had

463
00:20:54,360 --> 00:20:56,940
we wanted to make him fast because we

464
00:20:56,940 --> 00:21:00,000
are doing it in like hours and hours so

465
00:21:00,000 --> 00:21:02,700
the first approach was uh initially our

466
00:21:02,700 --> 00:21:06,200
test bed ran on vagrant

467
00:21:08,720 --> 00:21:11,039
which generates a virtual machine that

468
00:21:11,039 --> 00:21:14,760
has a blank blank WordPress then we SSH

469
00:21:14,760 --> 00:21:17,100
went to it and then we installed the

470
00:21:17,100 --> 00:21:18,900
plugin set it up all together and then

471
00:21:18,900 --> 00:21:21,660
we started to fuzz it but what this

472
00:21:21,660 --> 00:21:23,760
added was latency

473
00:21:23,760 --> 00:21:26,160
each and every time

474
00:21:26,160 --> 00:21:28,200
one plugin was validated and we moved to

475
00:21:28,200 --> 00:21:30,659
the second one it took like two to five

476
00:21:30,659 --> 00:21:33,179
minutes which was not an ideal time we

477
00:21:33,179 --> 00:21:34,860
were going for because again it will

478
00:21:34,860 --> 00:21:36,240
take months

479
00:21:36,240 --> 00:21:38,460
second approach was trying to use

480
00:21:38,460 --> 00:21:40,620
containers because well that's a logical

481
00:21:40,620 --> 00:21:43,799
Choice after VMS because they are on the

482
00:21:43,799 --> 00:21:45,600
same computer and the same process

483
00:21:45,600 --> 00:21:48,960
should work right but uh another problem

484
00:21:48,960 --> 00:21:52,860
we wrote Docker files to generate a like

485
00:21:52,860 --> 00:21:55,740
a config of Wordpress that should have

486
00:21:55,740 --> 00:21:57,960
all the things that we need but even

487
00:21:57,960 --> 00:22:00,299
then we were trying uh every time the

488
00:22:00,299 --> 00:22:01,980
container got destroyed and recreated

489
00:22:01,980 --> 00:22:03,600
over and over again

490
00:22:03,600 --> 00:22:05,760
uh our configuration had to be done over

491
00:22:05,760 --> 00:22:08,940
and over again which led to about like

492
00:22:08,940 --> 00:22:11,460
one plugin getting validated to like two

493
00:22:11,460 --> 00:22:12,840
minutes

494
00:22:12,840 --> 00:22:14,580
not good

495
00:22:14,580 --> 00:22:17,280
so at last we ended up what we ended up

496
00:22:17,280 --> 00:22:19,980
was doing was instead of trying to spawn

497
00:22:19,980 --> 00:22:21,780
a new instance altogether

498
00:22:21,780 --> 00:22:24,600
we worked on uh resetting the WordPress

499
00:22:24,600 --> 00:22:27,240
instance instead of trying to recreate

500
00:22:27,240 --> 00:22:28,200
it

501
00:22:28,200 --> 00:22:31,440
so we created a base VM and we ran our

502
00:22:31,440 --> 00:22:34,500
tools on it which led to

503
00:22:34,500 --> 00:22:36,480
speed is getting like increasingly

504
00:22:36,480 --> 00:22:38,580
higher like you can uh I'll show you a

505
00:22:38,580 --> 00:22:39,840
video after this

506
00:22:39,840 --> 00:22:42,480
so let's see let's show you the outcome

507
00:22:42,480 --> 00:22:46,880
of that so this is exercise bomb

508
00:22:47,580 --> 00:22:49,919
so right here we have what we are doing

509
00:22:49,919 --> 00:22:53,700
is uh let me pause it

510
00:22:53,700 --> 00:22:56,820
so it takes a WordPress like username of

511
00:22:56,820 --> 00:22:58,440
the WordPress administrator and the

512
00:22:58,440 --> 00:23:00,120
password of that WordPress administrator

513
00:23:00,120 --> 00:23:03,000
and a URL to that link which is stated

514
00:23:03,000 --> 00:23:06,480
on that same VM and then it passes

515
00:23:06,480 --> 00:23:09,539
through all of these same grab files in

516
00:23:09,539 --> 00:23:11,460
order to extract various different

517
00:23:11,460 --> 00:23:13,260
vulnerable

518
00:23:13,260 --> 00:23:17,720
uh you should I don't know really wait

519
00:23:17,880 --> 00:23:22,320
right over here it is trying to fetch uh

520
00:23:22,320 --> 00:23:24,120
fetch all the parameters for a

521
00:23:24,120 --> 00:23:26,760
vulnerable plugin but it is blurred and

522
00:23:26,760 --> 00:23:28,860
I don't think you can see the blurriness

523
00:23:28,860 --> 00:23:31,980
of it so it's uh the plugin name is

524
00:23:31,980 --> 00:23:33,659
given over here but it is blood and it

525
00:23:33,659 --> 00:23:36,720
is invisible here now because we didn't

526
00:23:36,720 --> 00:23:39,840
want it to drop zero days here

527
00:23:39,840 --> 00:23:42,600
so uh if you look at this uh it is

528
00:23:42,600 --> 00:23:44,940
parsing all of these parameters for each

529
00:23:44,940 --> 00:23:48,299
and every uh plugin that we and uh gave

530
00:23:48,299 --> 00:23:51,179
in the wrapper or in the folder and then

531
00:23:51,179 --> 00:23:53,820
after that it tries and evaluates all of

532
00:23:53,820 --> 00:23:57,799
them automatically so we use gxs as our

533
00:23:57,799 --> 00:24:03,179
validation engine or fuzzer and we other

534
00:24:03,179 --> 00:24:05,940
other wrappers we wrote ourselves

535
00:24:05,940 --> 00:24:09,240
so here it is testing let's say like an

536
00:24:09,240 --> 00:24:13,620
X it goes there it installs it it fuzzes

537
00:24:13,620 --> 00:24:15,900
it uh to a point for very specific

538
00:24:15,900 --> 00:24:18,240
fuzzing which means the only parameters

539
00:24:18,240 --> 00:24:20,700
that are first are the one that we found

540
00:24:20,700 --> 00:24:23,100
earlier in the parsing script which was

541
00:24:23,100 --> 00:24:25,740
given by Sam grip and then it tries to

542
00:24:25,740 --> 00:24:28,919
find the SQL exercise exactly where it

543
00:24:28,919 --> 00:24:31,740
should be and gives you a URL you can

544
00:24:31,740 --> 00:24:35,880
visit and see that alert popped up

545
00:24:35,880 --> 00:24:38,460
again uh the URL is

546
00:24:38,460 --> 00:24:41,340
blurred after that general.psp because

547
00:24:41,340 --> 00:24:43,640
the name of the plugin was in that link

548
00:24:43,640 --> 00:24:46,739
[Music]

549
00:24:47,240 --> 00:24:50,700
let me play it once more but well but

550
00:24:50,700 --> 00:24:53,220
now that you see

551
00:24:53,220 --> 00:24:56,100
as this goes on now it has already done

552
00:24:56,100 --> 00:24:58,679
it for two plugins and it has started

553
00:24:58,679 --> 00:25:01,440
validation for the third one

554
00:25:01,440 --> 00:25:03,360
so you can basically see that it solves

555
00:25:03,360 --> 00:25:05,820
the speed problem we don't have to we

556
00:25:05,820 --> 00:25:07,799
for this demo we did it for 10 plugins

557
00:25:07,799 --> 00:25:09,539
and I don't think you want to sit here

558
00:25:09,539 --> 00:25:11,460
and see it for the whole 4000 plus

559
00:25:11,460 --> 00:25:15,059
plugins but um the point is that instead

560
00:25:15,059 --> 00:25:17,880
of doing it for hours and hours we made

561
00:25:17,880 --> 00:25:22,280
a automation to do it in minutes

562
00:25:22,700 --> 00:25:25,440
uh it also whenever it encounter

563
00:25:25,440 --> 00:25:27,900
encounters an error which happens quite

564
00:25:27,900 --> 00:25:30,480
often with WordPress if the oh like if a

565
00:25:30,480 --> 00:25:32,760
plugin is super old and isn't supported

566
00:25:32,760 --> 00:25:34,860
with the latest version anymore it would

567
00:25:34,860 --> 00:25:37,020
crash and it will be unaccessible in

568
00:25:37,020 --> 00:25:39,600
that case it treats the cell feels and

569
00:25:39,600 --> 00:25:41,940
comes back to life and then keeps on

570
00:25:41,940 --> 00:25:43,490
fuzzing next plugins

571
00:25:43,490 --> 00:25:48,829
[Music]

572
00:25:50,159 --> 00:25:53,039
moving on it finds the third exercise in

573
00:25:53,039 --> 00:25:56,760
the whole 10 batch of 10 and then it

574
00:25:56,760 --> 00:25:58,799
I'll show you what it generates

575
00:25:58,799 --> 00:26:02,700
afterwards so it generates a basic uh

576
00:26:02,700 --> 00:26:05,159
Json file which would have all the valid

577
00:26:05,159 --> 00:26:07,380
exercises

578
00:26:07,380 --> 00:26:11,179
all validated automatically

579
00:26:12,779 --> 00:26:15,960
yeah so coming back to our slides that

580
00:26:15,960 --> 00:26:17,340
was exercise bomb

581
00:26:17,340 --> 00:26:19,799
so I think you saw how it actually works

582
00:26:19,799 --> 00:26:22,440
the speed of the tool is

583
00:26:22,440 --> 00:26:24,480
way better than human efficiency for

584
00:26:24,480 --> 00:26:25,260
sure

585
00:26:25,260 --> 00:26:27,480
and the language we use was python for

586
00:26:27,480 --> 00:26:30,179
this the engine that we run for fuzzing

587
00:26:30,179 --> 00:26:31,860
is gxss

588
00:26:31,860 --> 00:26:34,320
and now actually I will talk about the

589
00:26:34,320 --> 00:26:37,399
developer misconceptions

590
00:26:37,440 --> 00:26:40,919
thank you shiras and hello once again so

591
00:26:40,919 --> 00:26:42,679
I'll be talking about developers

592
00:26:42,679 --> 00:26:45,240
misconception so here are three bullet

593
00:26:45,240 --> 00:26:47,100
points that I have added for the same

594
00:26:47,100 --> 00:26:50,700
and the very first one is uh a bit

595
00:26:50,700 --> 00:26:53,279
interesting here so uh there was a

596
00:26:53,279 --> 00:26:55,980
plugin for which we found uh reflected

597
00:26:55,980 --> 00:26:59,940
xss and uh there was a filter being used

598
00:26:59,940 --> 00:27:03,059
and that was sanitized text field uh so

599
00:27:03,059 --> 00:27:06,000
what was happening was uh the developer

600
00:27:06,000 --> 00:27:09,059
did use the plug the filter but he was

601
00:27:09,059 --> 00:27:12,779
not aware of the context of where the

602
00:27:12,779 --> 00:27:16,020
output is gonna be reflected so the

603
00:27:16,020 --> 00:27:19,320
output the sink here was the SRC

604
00:27:19,320 --> 00:27:23,580
attribute of the image tag so uh just a

605
00:27:23,580 --> 00:27:25,940
bit theory about what

606
00:27:25,940 --> 00:27:28,400
sanitized text field filter does is

607
00:27:28,400 --> 00:27:31,919
whenever you add a double quote it's

608
00:27:31,919 --> 00:27:36,240
gonna Escape it with a backslash so yes

609
00:27:36,240 --> 00:27:39,320
uh since the the filter was in place

610
00:27:39,320 --> 00:27:43,260
the backslash was added by the filter

611
00:27:43,260 --> 00:27:48,539
but since a backslash is a valid uh part

612
00:27:48,539 --> 00:27:52,500
of a URL the SRC tag was still complete

613
00:27:52,500 --> 00:27:56,340
and the court completed the SRC tag and

614
00:27:56,340 --> 00:27:59,279
we were able to inject on error equal to

615
00:27:59,279 --> 00:28:03,120
alert 1 into our payload and we get a

616
00:28:03,120 --> 00:28:06,600
valid excesses trigger so that was a

617
00:28:06,600 --> 00:28:08,880
instance not just sanitized text field

618
00:28:08,880 --> 00:28:10,799
but there were other instances where

619
00:28:10,799 --> 00:28:13,919
filters were used but the code was still

620
00:28:13,919 --> 00:28:17,460
vulnerable to xss so that was a leverage

621
00:28:17,460 --> 00:28:20,100
that we got because we had the access to

622
00:28:20,100 --> 00:28:22,740
the whole source code we were able to

623
00:28:22,740 --> 00:28:26,340
see that how things were going around so

624
00:28:26,340 --> 00:28:30,360
that was a huge plus so another thing uh

625
00:28:30,360 --> 00:28:34,380
same thing happened with sqli and here

626
00:28:34,380 --> 00:28:37,260
again it's the sanitized text field uh

627
00:28:37,260 --> 00:28:41,039
was used but what it does is sanitize

628
00:28:41,039 --> 00:28:44,820
text field doesn't escape the single

629
00:28:44,820 --> 00:28:47,279
quotes so because of that we were able

630
00:28:47,279 --> 00:28:49,320
to successfully inject the payload again

631
00:28:49,320 --> 00:28:52,740
and it was a successful sqli uh the

632
00:28:52,740 --> 00:28:55,080
third instance is when

633
00:28:55,080 --> 00:28:57,539
um when filters protected against

634
00:28:57,539 --> 00:29:00,120
excesses but it was still vulnerable to

635
00:29:00,120 --> 00:29:02,460
sqli and the vice versa is also true

636
00:29:02,460 --> 00:29:04,559
where all the prepared statements are

637
00:29:04,559 --> 00:29:07,020
used but no other filter is used to

638
00:29:07,020 --> 00:29:09,779
protect against excesses so means you

639
00:29:09,779 --> 00:29:12,000
will be filling out some form using some

640
00:29:12,000 --> 00:29:14,400
data and then that data is going to

641
00:29:14,400 --> 00:29:16,620
reflect in some other place but since

642
00:29:16,620 --> 00:29:19,559
there is no filter in place you are

643
00:29:19,559 --> 00:29:21,779
gonna get a valid stored exercise there

644
00:29:21,779 --> 00:29:25,320
so those were three uh things that we

645
00:29:25,320 --> 00:29:29,418
identified while our analysis

646
00:29:30,020 --> 00:29:33,120
so as should I said uh

647
00:29:33,120 --> 00:29:35,340
I don't think like developers didn't

648
00:29:35,340 --> 00:29:37,440
really knew what they were doing they

649
00:29:37,440 --> 00:29:39,419
were they had a false sense of safety

650
00:29:39,419 --> 00:29:42,539
when they were using sanitizer sanitized

651
00:29:42,539 --> 00:29:45,480
text field and other filters that were

652
00:29:45,480 --> 00:29:48,600
easily by bypassable so let's say that

653
00:29:48,600 --> 00:29:50,760
they were taking input and then passing

654
00:29:50,760 --> 00:29:52,740
it to these functions and then after

655
00:29:52,740 --> 00:29:54,419
that they are passing it to the database

656
00:29:54,419 --> 00:29:57,299
so we can clearly understand that they

657
00:29:57,299 --> 00:29:59,520
while they were writing the code they

658
00:29:59,520 --> 00:30:02,640
had uh this false sense of safety that

659
00:30:02,640 --> 00:30:05,760
this particular they tried to secure the

660
00:30:05,760 --> 00:30:08,520
and sanitize the input but they did it

661
00:30:08,520 --> 00:30:10,620
all wrong because they thought sanitized

662
00:30:10,620 --> 00:30:12,840
text field actually sanitizes to a point

663
00:30:12,840 --> 00:30:14,159
that you can just pass it to the

664
00:30:14,159 --> 00:30:16,620
database but it but that's not what it

665
00:30:16,620 --> 00:30:17,700
does for sure

666
00:30:17,700 --> 00:30:20,940
uh the actual while doing all the source

667
00:30:20,940 --> 00:30:22,919
code analysis and looking at so many of

668
00:30:22,919 --> 00:30:25,620
these mistakes what we could say for

669
00:30:25,620 --> 00:30:27,899
sure was when developers tried to

670
00:30:27,899 --> 00:30:30,539
actually protect it and were were really

671
00:30:30,539 --> 00:30:32,760
successful was when they use nested

672
00:30:32,760 --> 00:30:34,799
filters so like some developers actually

673
00:30:34,799 --> 00:30:37,679
use sanitized text field and then slip

674
00:30:37,679 --> 00:30:40,320
all tags and other HTML Escape

675
00:30:40,320 --> 00:30:42,240
characters and all of that when they'd

676
00:30:42,240 --> 00:30:44,760
use that that was really handy because

677
00:30:44,760 --> 00:30:46,620
first of all all the special characters

678
00:30:46,620 --> 00:30:49,980
were missed or removed and then encoded

679
00:30:49,980 --> 00:30:53,039
and then it was just a string so that

680
00:30:53,039 --> 00:30:55,440
was that worked really well for them in

681
00:30:55,440 --> 00:30:58,559
case of xsf for um like in case of xss

682
00:30:58,559 --> 00:31:00,480
what developers also did was output

683
00:31:00,480 --> 00:31:03,240
encoding and uh sanitizing various

684
00:31:03,240 --> 00:31:05,460
contexts like URL context and HTML

685
00:31:05,460 --> 00:31:07,520
context Etc

686
00:31:07,520 --> 00:31:11,279
uh coming to our last point is um one

687
00:31:11,279 --> 00:31:12,779
thing that we weren't able to bypass

688
00:31:12,779 --> 00:31:15,679
during this research was WP magic quotes

689
00:31:15,679 --> 00:31:19,500
WP magic quotes is some uh it's it's a

690
00:31:19,500 --> 00:31:21,240
feature of Wordpress that is there by

691
00:31:21,240 --> 00:31:24,240
default and it's turned on by default so

692
00:31:24,240 --> 00:31:26,640
even when we could see that there is a

693
00:31:26,640 --> 00:31:27,779
clear shot

694
00:31:27,779 --> 00:31:28,440
um

695
00:31:28,440 --> 00:31:31,620
xss or SQL injection whenever we try to

696
00:31:31,620 --> 00:31:34,980
input our payloads into it it

697
00:31:34,980 --> 00:31:37,980
automatically adds a it creates a test

698
00:31:37,980 --> 00:31:39,480
into a string

699
00:31:39,480 --> 00:31:42,120
although like there are actual known

700
00:31:42,120 --> 00:31:44,760
bypasses for this but we weren't able to

701
00:31:44,760 --> 00:31:46,679
bypass this there is something called a

702
00:31:46,679 --> 00:31:50,279
gbk encoding that in which we saw on the

703
00:31:50,279 --> 00:31:51,840
internet that people did bypass that

704
00:31:51,840 --> 00:31:54,539
although we weren't successful with that

705
00:31:54,539 --> 00:31:56,820
and we are still working on it but yeah

706
00:31:56,820 --> 00:31:59,039
that that was something that we thought

707
00:31:59,039 --> 00:32:01,559
you should always have it enabled so

708
00:32:01,559 --> 00:32:03,720
after all the hard work and all the

709
00:32:03,720 --> 00:32:05,880
sleepless nights and Blood Sweat and

710
00:32:05,880 --> 00:32:07,260
Tears we got

711
00:32:07,260 --> 00:32:09,539
um stuck out our first movie and then

712
00:32:09,539 --> 00:32:11,880
Shiraz got his first CV then she got a

713
00:32:11,880 --> 00:32:14,640
second and he got a straight 20 series

714
00:32:14,640 --> 00:32:17,340
so after all of that we got like 20

715
00:32:17,340 --> 00:32:21,120
series uh each so and after a while it

716
00:32:21,120 --> 00:32:25,559
was like 48 CVS that are for us combined

717
00:32:25,559 --> 00:32:27,539
together yes

718
00:32:27,539 --> 00:32:29,039
yes which was like an insane number

719
00:32:29,039 --> 00:32:31,260
because we started with it with like

720
00:32:31,260 --> 00:32:34,200
just one single uh CD we started hunting

721
00:32:34,200 --> 00:32:36,360
for just one single TV because we wanted

722
00:32:36,360 --> 00:32:37,260
that

723
00:32:37,260 --> 00:32:40,020
yes it was like a goal uh the first goal

724
00:32:40,020 --> 00:32:41,940
was to get a first CV and that feeling

725
00:32:41,940 --> 00:32:44,460
was just insanely amazing

726
00:32:44,460 --> 00:32:46,679
yeah so let's talk about the future

727
00:32:46,679 --> 00:32:48,720
possibilities that we are working on the

728
00:32:48,720 --> 00:32:51,059
research now and that is

729
00:32:51,059 --> 00:32:54,419
um first of all we are hunting uh like

730
00:32:54,419 --> 00:32:57,299
we are going to come uh well let's see

731
00:32:57,299 --> 00:32:59,419
sure we'll talk about this

732
00:32:59,419 --> 00:33:02,580
nobody uh okay so like we said that

733
00:33:02,580 --> 00:33:05,039
there were 80 000 plugins present and

734
00:33:05,039 --> 00:33:08,159
the first Focus was to uh work on uh

735
00:33:08,159 --> 00:33:10,740
WordPress plugins but we had future

736
00:33:10,740 --> 00:33:12,779
possibilities around moving towards

737
00:33:12,779 --> 00:33:16,140
WordPress themes or other PHP CMS or

738
00:33:16,140 --> 00:33:18,419
maybe either trying out something with a

739
00:33:18,419 --> 00:33:21,299
completely new language uh that Sam

740
00:33:21,299 --> 00:33:23,940
Drive supports uh then writing rules for

741
00:33:23,940 --> 00:33:26,880
various vulnerabilities because uh

742
00:33:26,880 --> 00:33:29,700
because this talk was all about xss and

743
00:33:29,700 --> 00:33:33,419
sqli because we dig a lot into it uh but

744
00:33:33,419 --> 00:33:35,820
the whole other lot of vulnerabilities

745
00:33:35,820 --> 00:33:40,140
like lfi or ssrf or rces those are still

746
00:33:40,140 --> 00:33:43,320
pending and we are on to it and yeah

747
00:33:43,320 --> 00:33:45,120
hopefully we are gonna get some more

748
00:33:45,120 --> 00:33:48,120
series around these bugs as well

749
00:33:48,120 --> 00:33:51,659
so like she said RCS so our rules for RC

750
00:33:51,659 --> 00:33:53,519
is ready and we are running them at the

751
00:33:53,519 --> 00:33:57,240
moment like as we speak and other part

752
00:33:57,240 --> 00:33:59,220
is that also we need to improve our

753
00:33:59,220 --> 00:34:01,260
Automation in itself because right now

754
00:34:01,260 --> 00:34:03,059
it's called an exercise bomb because it

755
00:34:03,059 --> 00:34:05,039
only searched for xss

756
00:34:05,039 --> 00:34:07,860
but we uh wrote it in such a way that it

757
00:34:07,860 --> 00:34:10,500
is modular very modular so

758
00:34:10,500 --> 00:34:12,480
it is soon going to be a vulnerability

759
00:34:12,480 --> 00:34:15,060
bomb instead of an excessive bomb which

760
00:34:15,060 --> 00:34:16,859
would be able to validate all of these

761
00:34:16,859 --> 00:34:19,080
for us uh automatically and get us both

762
00:34:19,080 --> 00:34:22,260
CVS uh the other automate like and doing

763
00:34:22,260 --> 00:34:23,820
more automation where it is possible

764
00:34:23,820 --> 00:34:25,500
because at the moment there are some

765
00:34:25,500 --> 00:34:27,300
limitations with excessive bombs that we

766
00:34:27,300 --> 00:34:29,339
are trying to figure out so we are also

767
00:34:29,339 --> 00:34:31,619
going to get that done hopefully that

768
00:34:31,619 --> 00:34:33,899
will lead to a lot more stuff thank you

769
00:34:33,899 --> 00:34:36,799
thank you so much

770
00:34:37,099 --> 00:34:39,599
if you have any questions we are all

771
00:34:39,599 --> 00:34:39,960
here

772
00:34:39,960 --> 00:34:43,059
[Music]

773
00:34:53,940 --> 00:34:55,679
[Music]

774
00:34:55,679 --> 00:34:58,500
so um we didn't search for Dom base

775
00:34:58,500 --> 00:35:01,680
exercise basically what we did was in

776
00:35:01,680 --> 00:35:04,380
our research what we did was we went for

777
00:35:04,380 --> 00:35:06,599
the reflected exercise or the easier

778
00:35:06,599 --> 00:35:09,180
vulnerabilities to find at first and

779
00:35:09,180 --> 00:35:11,220
then we wrote our rules in such a way

780
00:35:11,220 --> 00:35:13,560
that we were able to find them like most

781
00:35:13,560 --> 00:35:15,839
of them were not false positives we went

782
00:35:15,839 --> 00:35:18,359
for that approach first

783
00:35:18,359 --> 00:35:21,140
please

784
00:35:22,500 --> 00:35:25,320
no it was not a single file so semcraft

785
00:35:25,320 --> 00:35:27,839
has issues with dealing with a lot of

786
00:35:27,839 --> 00:35:30,540
files and what we did was we wrote an

787
00:35:30,540 --> 00:35:33,800
svm SVN wrapper around it so we were

788
00:35:33,800 --> 00:35:36,839
like we get pulled all of these

789
00:35:36,839 --> 00:35:39,240
WordPress plugins at once and then

790
00:35:39,240 --> 00:35:41,940
before Sam grab breaking in we could we

791
00:35:41,940 --> 00:35:43,740
were we wrote the SVN wrapper around it

792
00:35:43,740 --> 00:35:45,960
and we ran on a singular directory a

793
00:35:45,960 --> 00:35:48,000
small small piece of codes

794
00:35:48,000 --> 00:35:51,000
foreign

795
00:35:53,300 --> 00:35:56,400
[Music]

796
00:35:56,400 --> 00:35:59,520
yeah so we didn't uh worked on rules

797
00:35:59,520 --> 00:36:01,740
which were uh like you are saying the

798
00:36:01,740 --> 00:36:03,720
sync is one file and the source is

799
00:36:03,720 --> 00:36:06,540
another file so we are yet to research

800
00:36:06,540 --> 00:36:08,820
on that particular thing we started with

801
00:36:08,820 --> 00:36:11,460
our Basics and yeah that's that's where

802
00:36:11,460 --> 00:36:14,890
we are right now thank you

803
00:36:14,890 --> 00:36:16,260
[Music]

804
00:36:16,260 --> 00:36:19,079
and uh one more thing I wanted to cover

805
00:36:19,079 --> 00:36:20,160
was

806
00:36:20,160 --> 00:36:23,940
um like we did show a demo for folder

807
00:36:23,940 --> 00:36:27,180
for testing but actually in uh like in

808
00:36:27,180 --> 00:36:30,420
the real case we were running that on 80

809
00:36:30,420 --> 00:36:34,079
000 plugins in a single go uh so uh if

810
00:36:34,079 --> 00:36:36,300
you are ever trying that thing it won't

811
00:36:36,300 --> 00:36:39,000
ever work so it was a script written for

812
00:36:39,000 --> 00:36:41,760
that so we used to iterate through every

813
00:36:41,760 --> 00:36:44,760
plugin in order to uh so just so that

814
00:36:44,760 --> 00:36:47,040
the Sim grip doesn't breaks and every

815
00:36:47,040 --> 00:36:50,040
for every plugin uh separate output file

816
00:36:50,040 --> 00:36:53,220
was created and uh that's how it was

817
00:36:53,220 --> 00:36:56,520
very easy for us to determine like where

818
00:36:56,520 --> 00:36:58,200
exactly to look for when you are working

819
00:36:58,200 --> 00:37:01,140
on a plugin so yeah yeah same grab

820
00:37:01,140 --> 00:37:03,480
doesn't like at least for PHP that is

821
00:37:03,480 --> 00:37:05,280
our experience that if you give it a

822
00:37:05,280 --> 00:37:07,619
huge data data set I don't know if it's

823
00:37:07,619 --> 00:37:11,040
just limited to uh PSP because I think

824
00:37:11,040 --> 00:37:13,200
any tool would break if you give it like

825
00:37:13,200 --> 00:37:17,160
80 000 plugin worth of data which will I

826
00:37:17,160 --> 00:37:19,380
think it was even more than like two TVs

827
00:37:19,380 --> 00:37:23,820
so and it took around three days or so

828
00:37:23,820 --> 00:37:26,220
to run a single room yeah it took a lot

829
00:37:26,220 --> 00:37:28,859
of time so the whole point was we were

830
00:37:28,859 --> 00:37:31,380
breaking it down into smaller chunks or

831
00:37:31,380 --> 00:37:34,200
the chunks that Sam grip could handle at

832
00:37:34,200 --> 00:37:36,000
a time and then we were generating

833
00:37:36,000 --> 00:37:38,099
output for that and then moving to the

834
00:37:38,099 --> 00:37:40,800
next chunk of chunk of these group code

835
00:37:40,800 --> 00:37:44,400
that we were testing at the moment here

836
00:37:44,400 --> 00:37:47,480
so these are some references

837
00:37:47,480 --> 00:37:51,540
yeah so gxss is the tool that we use for

838
00:37:51,540 --> 00:37:54,839
validation and then there is we have

839
00:37:54,839 --> 00:37:57,060
some open rules that you could find on

840
00:37:57,060 --> 00:37:59,760
code vigilance good GitHub uh that might

841
00:37:59,760 --> 00:38:02,880
come in handy we have our profiles on

842
00:38:02,880 --> 00:38:04,440
code vigilance where you can find out

843
00:38:04,440 --> 00:38:06,359
more information about us and then there

844
00:38:06,359 --> 00:38:09,480
is shares blog about uh the developers

845
00:38:09,480 --> 00:38:12,060
misconception yeah the sanitized text

846
00:38:12,060 --> 00:38:16,140
field is basically in detail uh In This

847
00:38:16,140 --> 00:38:18,599
Very blog so please go through it you

848
00:38:18,599 --> 00:38:21,240
will find more those that are Twitter so

849
00:38:21,240 --> 00:38:22,980
if you didn't wanted to ask in front of

850
00:38:22,980 --> 00:38:25,320
everybody you can just shot us a message

851
00:38:25,320 --> 00:38:27,359
on Twitter our DMS are open and we'll

852
00:38:27,359 --> 00:38:30,250
answer you thank you thank you

853
00:38:30,250 --> 00:38:33,880
[Applause]

