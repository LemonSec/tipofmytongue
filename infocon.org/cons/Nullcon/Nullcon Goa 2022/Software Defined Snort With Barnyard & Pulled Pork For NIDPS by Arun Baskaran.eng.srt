1
00:00:02,879 --> 00:00:07,580
all right um so yeah hi um

2
00:00:07,580 --> 00:00:11,400
uh so I'm basically Beast of Bangalore

3
00:00:11,400 --> 00:00:14,400
um so this is my first project that I

4
00:00:14,400 --> 00:00:17,340
got at uh uh completed for the last

5
00:00:17,340 --> 00:00:19,740
three years I've been working on

6
00:00:19,740 --> 00:00:20,880
um so yeah

7
00:00:20,880 --> 00:00:23,220
um the title is uh software defined is

8
00:00:23,220 --> 00:00:25,680
not with uh banyard and pulled poke for

9
00:00:25,680 --> 00:00:28,019
uh in idps

10
00:00:28,019 --> 00:00:29,939
um okay let me uh start with the

11
00:00:29,939 --> 00:00:31,140
question

12
00:00:31,140 --> 00:00:33,660
um how many of you heard about sdn or

13
00:00:33,660 --> 00:00:36,960
have you worked with sgn anyone just a

14
00:00:36,960 --> 00:00:40,620
hand wave was fine cool cool oh all

15
00:00:40,620 --> 00:00:42,000
right okay

16
00:00:42,000 --> 00:00:44,100
um so yeah so this is one of such

17
00:00:44,100 --> 00:00:47,820
product uh that uh would be like kind of

18
00:00:47,820 --> 00:00:50,640
a defensive mechanism without a manual

19
00:00:50,640 --> 00:00:54,059
intervention Okay so

20
00:00:54,059 --> 00:00:55,260
all right

21
00:00:55,260 --> 00:00:57,420
so yeah I work with Deloitte as a

22
00:00:57,420 --> 00:01:00,000
solution advisor and uh as a part-time

23
00:01:00,000 --> 00:01:03,120
secure researcher with uh UMD and few

24
00:01:03,120 --> 00:01:04,860
more Community works for the last three

25
00:01:04,860 --> 00:01:06,619
four years now

26
00:01:06,619 --> 00:01:09,240
okay so

27
00:01:09,240 --> 00:01:14,159
um sdn and open Flow so um sgn in the

28
00:01:14,159 --> 00:01:16,439
sense it's like uh it's nothing but um

29
00:01:16,439 --> 00:01:18,720
you heard about the management switch

30
00:01:18,720 --> 00:01:20,400
right a management typical management

31
00:01:20,400 --> 00:01:23,159
switch so in case if you are decoupling

32
00:01:23,159 --> 00:01:25,619
that particular switch and inserting a

33
00:01:25,619 --> 00:01:27,600
kernel level firewall onto that

34
00:01:27,600 --> 00:01:30,720
imagine that is happening okay so that's

35
00:01:30,720 --> 00:01:34,259
more like uh defunding anything

36
00:01:34,259 --> 00:01:36,840
um whichever is coming via volumetric or

37
00:01:36,840 --> 00:01:39,180
application or a protocol based attacks

38
00:01:39,180 --> 00:01:43,020
and open Flow open Flow is along with

39
00:01:43,020 --> 00:01:46,380
sdn uh open Flow is a protocol

40
00:01:46,380 --> 00:01:49,500
um uh this would allow the servers to

41
00:01:49,500 --> 00:01:52,200
teach how to send the package in a

42
00:01:52,200 --> 00:01:54,420
network programmable way so that's the

43
00:01:54,420 --> 00:01:56,579
overview but uh in a conventional

44
00:01:56,579 --> 00:01:57,659
Network

45
00:01:57,659 --> 00:02:00,299
um each switches in a particular

46
00:02:00,299 --> 00:02:02,040
organization or in a particular

47
00:02:02,040 --> 00:02:04,979
infrastructure could be modified based

48
00:02:04,979 --> 00:02:07,079
on their own dependencies or the

49
00:02:07,079 --> 00:02:09,360
requirements and from that on it could

50
00:02:09,360 --> 00:02:11,700
go with the flow so that's the overview

51
00:02:11,700 --> 00:02:14,700
about that and uh so I'll I'll give a

52
00:02:14,700 --> 00:02:17,280
brief about a few liners about all the

53
00:02:17,280 --> 00:02:19,140
technologies that are being used and

54
00:02:19,140 --> 00:02:21,959
then we'll jump into the code path okay

55
00:02:21,959 --> 00:02:26,099
so this next one is mininet minionet and

56
00:02:26,099 --> 00:02:28,319
the controllers so many unit in the

57
00:02:28,319 --> 00:02:30,780
sense of is nothing but a network

58
00:02:30,780 --> 00:02:33,239
virtual emulator so in case if you don't

59
00:02:33,239 --> 00:02:36,060
have your management switch in hand uh

60
00:02:36,060 --> 00:02:38,400
to practice in a real time you can start

61
00:02:38,400 --> 00:02:40,140
with minionet meaning it's a good start

62
00:02:40,140 --> 00:02:43,980
for sgn practices and controllers so

63
00:02:43,980 --> 00:02:45,959
there are a lot of controllers for uh

64
00:02:45,959 --> 00:02:49,800
means defining the products or means

65
00:02:49,800 --> 00:02:52,500
making the rules it's uh within the

66
00:02:52,500 --> 00:02:55,500
switch itself so uh here with this

67
00:02:55,500 --> 00:02:57,180
particular product there are a lot of

68
00:02:57,180 --> 00:02:59,519
possibilities that we can use multiple

69
00:02:59,519 --> 00:03:02,400
control is that whatever we want uh as

70
00:03:02,400 --> 00:03:04,260
this is completely based on

71
00:03:04,260 --> 00:03:07,620
infrastructure security okay and uh it's

72
00:03:07,620 --> 00:03:11,060
not under dependencies so uh this is the

73
00:03:11,060 --> 00:03:13,620
one core part that's not another

74
00:03:13,620 --> 00:03:16,500
dependency in the sense uh this is the

75
00:03:16,500 --> 00:03:18,360
integration that I'm doing with the sdn

76
00:03:18,360 --> 00:03:20,459
to make sure that the

77
00:03:20,459 --> 00:03:22,680
um 5 volt rules and the policies and

78
00:03:22,680 --> 00:03:25,500
then the guidelines are customizable and

79
00:03:25,500 --> 00:03:28,440
in a high performance way without manual

80
00:03:28,440 --> 00:03:30,540
intervention and also automatically

81
00:03:30,540 --> 00:03:32,040
getting updated along with that so

82
00:03:32,040 --> 00:03:33,540
that's the main purpose of integrating

83
00:03:33,540 --> 00:03:36,480
the snot and other dependencies and the

84
00:03:36,480 --> 00:03:39,000
Defenders mechanism

85
00:03:39,000 --> 00:03:41,640
Defenders mechanism in the sense we'll

86
00:03:41,640 --> 00:03:45,239
be focusing on uh how to customize your

87
00:03:45,239 --> 00:03:47,340
own particular switch based on your

88
00:03:47,340 --> 00:03:48,780
requirement or your organizational

89
00:03:48,780 --> 00:03:51,060
requirement and everything

90
00:03:51,060 --> 00:03:53,760
um and vendors and OEM controls so if

91
00:03:53,760 --> 00:03:55,860
we'll be uh looking at the offensive

92
00:03:55,860 --> 00:03:59,459
approaches the typical uh DDOS offensive

93
00:03:59,459 --> 00:04:01,700
approaches and then the ways to

94
00:04:01,700 --> 00:04:04,440
secure the particular attacks regardless

95
00:04:04,440 --> 00:04:07,319
of the vendors and the volume okay and

96
00:04:07,319 --> 00:04:09,120
finally the end goals and the future

97
00:04:09,120 --> 00:04:11,340
possibilities

98
00:04:11,340 --> 00:04:16,320
so yeah this is the architectural flow

99
00:04:16,320 --> 00:04:18,899
um if you haven't uh heard about

100
00:04:18,899 --> 00:04:21,358
um management switch so that's how

101
00:04:21,358 --> 00:04:23,400
typically it would look like the first

102
00:04:23,400 --> 00:04:25,380
one would be of application plane and

103
00:04:25,380 --> 00:04:27,240
second one would be of controller plane

104
00:04:27,240 --> 00:04:30,660
and third one would be of data plane so

105
00:04:30,660 --> 00:04:33,120
um this is more or like the now means

106
00:04:33,120 --> 00:04:35,340
now it is in the market but earlier it

107
00:04:35,340 --> 00:04:37,800
was mentioned as management plane but it

108
00:04:37,800 --> 00:04:40,259
came to the application plane as of now

109
00:04:40,259 --> 00:04:43,560
so uh so this is where we are getting

110
00:04:43,560 --> 00:04:46,500
involved as a kernel lover security and

111
00:04:46,500 --> 00:04:48,479
also we are integrating snot and then

112
00:04:48,479 --> 00:04:51,840
the dependencies here and starting from

113
00:04:51,840 --> 00:04:54,060
the application plane application plane

114
00:04:54,060 --> 00:04:57,300
has means this holds the application

115
00:04:57,300 --> 00:05:00,419
logic of what we are about to do and the

116
00:05:00,419 --> 00:05:02,639
network analytics Network analytics in

117
00:05:02,639 --> 00:05:05,280
the sense it could uh monitor the

118
00:05:05,280 --> 00:05:07,259
real-time Network traffic within the

119
00:05:07,259 --> 00:05:09,440
flows and also the typical security

120
00:05:09,440 --> 00:05:11,699
measures whatever integrated in the

121
00:05:11,699 --> 00:05:14,520
application plane and these are two

122
00:05:14,520 --> 00:05:16,620
interfaces two in interfaces in the

123
00:05:16,620 --> 00:05:18,720
sense two agents the first one is a

124
00:05:18,720 --> 00:05:20,940
Northbound interface and second one is

125
00:05:20,940 --> 00:05:23,460
southbound or you can call it as Control

126
00:05:23,460 --> 00:05:25,500
Data plane Integrations okay

127
00:05:25,500 --> 00:05:26,039
okay

128
00:05:26,039 --> 00:05:28,080
um so the usage of this integration so

129
00:05:28,080 --> 00:05:30,539
usage of this agents are to communicate

130
00:05:30,539 --> 00:05:32,280
within the particular management switch

131
00:05:32,280 --> 00:05:35,539
so that uh the data or the transmission

132
00:05:35,539 --> 00:05:39,180
program can be uh modified based on the

133
00:05:39,180 --> 00:05:41,639
requirements

134
00:05:41,639 --> 00:05:44,699
and coming to the control plane control

135
00:05:44,699 --> 00:05:47,580
plane holds the responsibility of

136
00:05:47,580 --> 00:05:50,940
defining the rule sets for uh each

137
00:05:50,940 --> 00:05:53,520
attacks or the each platform means each

138
00:05:53,520 --> 00:05:56,340
package that it is receiving and with

139
00:05:56,340 --> 00:05:58,740
the help of tuples tuples understands

140
00:05:58,740 --> 00:06:00,960
you might be aware of that which uh

141
00:06:00,960 --> 00:06:02,639
means of

142
00:06:02,639 --> 00:06:05,460
kind of creating the rule such uh right

143
00:06:05,460 --> 00:06:07,440
from the beginning and you could be able

144
00:06:07,440 --> 00:06:10,320
to utilize those uh integrate those into

145
00:06:10,320 --> 00:06:12,600
the control plane so that each packet

146
00:06:12,600 --> 00:06:15,419
can be programmable and it can transfer

147
00:06:15,419 --> 00:06:17,400
via the package that whatever it is

148
00:06:17,400 --> 00:06:20,460
Flowing based on the rule sets and the

149
00:06:20,460 --> 00:06:22,440
next one is data plane data plane is the

150
00:06:22,440 --> 00:06:25,500
typical forwarding engine uh for

151
00:06:25,500 --> 00:06:28,080
forwarding the packages however the

152
00:06:28,080 --> 00:06:30,780
control plane insects to do that so okay

153
00:06:30,780 --> 00:06:33,300
so that's the overview about uh

154
00:06:33,300 --> 00:06:36,720
management switch and uh coming to the

155
00:06:36,720 --> 00:06:38,880
it's not

156
00:06:38,880 --> 00:06:42,000
um it's not and banner and pull book uh

157
00:06:42,000 --> 00:06:43,979
so one more question so like anybody

158
00:06:43,979 --> 00:06:47,280
heard about baniard will book before

159
00:06:47,280 --> 00:06:51,960
Mr and view that's fine no okay

160
00:06:51,960 --> 00:06:53,940
all right cool

161
00:06:53,940 --> 00:06:57,539
um so it's not is typically known as the

162
00:06:57,539 --> 00:06:59,639
uh Network intrusion detection and

163
00:06:59,639 --> 00:07:01,500
prevention system that everyone knows

164
00:07:01,500 --> 00:07:03,840
that and since it's a open source tool

165
00:07:03,840 --> 00:07:06,060
we could able to integrate this with

166
00:07:06,060 --> 00:07:08,940
this sgn along with bayonet and pull

167
00:07:08,940 --> 00:07:11,880
talk so banded is another uh Simple

168
00:07:11,880 --> 00:07:14,340
Technology it's more like similar to

169
00:07:14,340 --> 00:07:15,660
snot

170
00:07:15,660 --> 00:07:18,360
um kind of uh it could be able to

171
00:07:18,360 --> 00:07:21,000
integrate the output plugins and the

172
00:07:21,000 --> 00:07:23,160
defensive mechanisms whatever snot is

173
00:07:23,160 --> 00:07:25,139
having but that too with the

174
00:07:25,139 --> 00:07:26,940
multi-threading performance it's not as

175
00:07:26,940 --> 00:07:28,740
a single 13 performance application so

176
00:07:28,740 --> 00:07:30,960
it can't be able to handle large amount

177
00:07:30,960 --> 00:07:33,120
of packets in case if there is any okay

178
00:07:33,120 --> 00:07:34,680
so that's the reason that I have

179
00:07:34,680 --> 00:07:36,900
included Barnyard into that and the pull

180
00:07:36,900 --> 00:07:38,340
to poke pull to poke is another

181
00:07:38,340 --> 00:07:41,580
technology uh means it's a small Pearl

182
00:07:41,580 --> 00:07:45,840
script uh you can use it to automate the

183
00:07:45,840 --> 00:07:46,620
um

184
00:07:46,620 --> 00:07:48,840
snot rules it whenever it's getting

185
00:07:48,840 --> 00:07:50,780
updated in the public repositories like

186
00:07:50,780 --> 00:07:53,759
exploit DBS CV metrics or is there any

187
00:07:53,759 --> 00:07:55,800
other zero days are getting published

188
00:07:55,800 --> 00:07:58,139
means it would be automatically updated

189
00:07:58,139 --> 00:08:00,360
there so that's one of the reason that

190
00:08:00,360 --> 00:08:01,979
uh as mentioned as a manual

191
00:08:01,979 --> 00:08:04,860
intervention-less product

192
00:08:04,860 --> 00:08:07,020
um so that's all about this not and its

193
00:08:07,020 --> 00:08:09,240
dependencies and here if you could come

194
00:08:09,240 --> 00:08:10,319
and see

195
00:08:10,319 --> 00:08:11,880
um so this one

196
00:08:11,880 --> 00:08:14,400
so this is the admin switch that we are

197
00:08:14,400 --> 00:08:15,960
configuring everything right from the

198
00:08:15,960 --> 00:08:18,840
sgn and from that on in case if you are

199
00:08:18,840 --> 00:08:21,960
taking an example flow of uh two

200
00:08:21,960 --> 00:08:24,240
different main switches so one one would

201
00:08:24,240 --> 00:08:27,300
be focusing on host based missions the

202
00:08:27,300 --> 00:08:29,879
other one would be focusing on servers

203
00:08:29,879 --> 00:08:31,860
say for example he has access or

204
00:08:31,860 --> 00:08:34,679
anything else so so this is the flow

205
00:08:34,679 --> 00:08:37,740
um so is there any uh doubts in the

206
00:08:37,740 --> 00:08:39,659
architecture

207
00:08:39,659 --> 00:08:43,399
else we could move forward

208
00:08:44,700 --> 00:08:48,560
so yeah as I mentioned uh sdn

209
00:08:48,560 --> 00:08:51,779
you're going to decouple the plane uh

210
00:08:51,779 --> 00:08:54,480
and then traffic and plan the network

211
00:08:54,480 --> 00:08:57,300
traffic how to perform that and secondly

212
00:08:57,300 --> 00:08:59,940
the open Flow that manages the uh flow

213
00:08:59,940 --> 00:09:02,459
control in the sgn all right so uh

214
00:09:02,459 --> 00:09:06,120
mininet as I mentioned uh it's used to

215
00:09:06,120 --> 00:09:06,660
um

216
00:09:06,660 --> 00:09:08,760
work as a network emulator in case if

217
00:09:08,760 --> 00:09:11,100
you are doing it in a virtual way uh

218
00:09:11,100 --> 00:09:13,260
controllers I'm here using floodlight

219
00:09:13,260 --> 00:09:15,420
controller so there are few controllers

220
00:09:15,420 --> 00:09:17,580
uh you should be aware of when it comes

221
00:09:17,580 --> 00:09:21,000
to sdn uh one is flat light a second one

222
00:09:21,000 --> 00:09:24,959
is third one is open daylight uh fourth

223
00:09:24,959 --> 00:09:27,899
honest fox in case if you're more on to

224
00:09:27,899 --> 00:09:30,420
application layer detection protections

225
00:09:30,420 --> 00:09:32,820
means you can always use box as a

226
00:09:32,820 --> 00:09:34,500
preference one so that would totally

227
00:09:34,500 --> 00:09:37,980
work fine so here I've used Ryu I've

228
00:09:37,980 --> 00:09:40,320
tried with both Ryu and floodlight as

229
00:09:40,320 --> 00:09:41,279
well

230
00:09:41,279 --> 00:09:44,600
so yeah

231
00:09:45,000 --> 00:09:48,060
so um it's not as I mentioned it's a

232
00:09:48,060 --> 00:09:49,800
single threaded platform so that's the

233
00:09:49,800 --> 00:09:53,519
reason that I've included uh banyard to

234
00:09:53,519 --> 00:09:56,279
generate the output and uh pull the Poke

235
00:09:56,279 --> 00:09:58,380
yeah it would be frequently updating the

236
00:09:58,380 --> 00:10:00,540
snot rules

237
00:10:00,540 --> 00:10:03,180
so the next one is the defender's

238
00:10:03,180 --> 00:10:06,000
mechanism so here where the core part of

239
00:10:06,000 --> 00:10:08,220
the uh

240
00:10:08,220 --> 00:10:10,620
the configurations or customizations are

241
00:10:10,620 --> 00:10:13,200
getting started so uh if you could see

242
00:10:13,200 --> 00:10:14,640
the control plane if you could remember

243
00:10:14,640 --> 00:10:16,620
the control plane the architecture flow

244
00:10:16,620 --> 00:10:20,339
uh so there are two ways of customizing

245
00:10:20,339 --> 00:10:23,220
the uh control planes the first one is

246
00:10:23,220 --> 00:10:25,500
which way and the second one is firewall

247
00:10:25,500 --> 00:10:28,800
weight so you can make your each switch

248
00:10:28,800 --> 00:10:31,680
as a single firewall individually to

249
00:10:31,680 --> 00:10:34,200
make it run based on their rules as that

250
00:10:34,200 --> 00:10:36,600
what you are giving to them and

251
00:10:36,600 --> 00:10:39,120
third one is the data plane the means uh

252
00:10:39,120 --> 00:10:40,980
the first one is divided into two parts

253
00:10:40,980 --> 00:10:42,899
again the switch and then the five

254
00:10:42,899 --> 00:10:45,420
hallway and third one is the data plane

255
00:10:45,420 --> 00:10:47,160
way how to customize that we'll jump

256
00:10:47,160 --> 00:10:47,640
into that

257
00:10:47,640 --> 00:10:48,839
[Music]

258
00:10:48,839 --> 00:10:51,959
so first one so switch way uh say for

259
00:10:51,959 --> 00:10:54,660
example uh if you are having a organized

260
00:10:54,660 --> 00:10:56,220
if you are maintaining organization of

261
00:10:56,220 --> 00:10:59,579
around 10K people who are using

262
00:10:59,579 --> 00:11:01,800
frequently using the internet here and

263
00:11:01,800 --> 00:11:04,680
there within the intranet it's itself so

264
00:11:04,680 --> 00:11:06,720
uh for that I'm creating a mininet

265
00:11:06,720 --> 00:11:09,300
topology with a few servers and then a

266
00:11:09,300 --> 00:11:10,560
few uh

267
00:11:10,560 --> 00:11:13,680
switches along with the host missions

268
00:11:13,680 --> 00:11:16,260
here and there and the host missions

269
00:11:16,260 --> 00:11:18,720
that each host missions would be

270
00:11:18,720 --> 00:11:20,339
connected with the controller here

271
00:11:20,339 --> 00:11:23,760
typically okay so from that on you have

272
00:11:23,760 --> 00:11:26,160
to write the rule sets Whatever It Is

273
00:11:26,160 --> 00:11:29,399
defined in the control plane so the

274
00:11:29,399 --> 00:11:31,620
rules is that what we are defining is a

275
00:11:31,620 --> 00:11:34,339
five tuples here the first one is Source

276
00:11:34,339 --> 00:11:37,200
destination Port protocol and then the

277
00:11:37,200 --> 00:11:39,600
access to get it allowed or blocked okay

278
00:11:39,600 --> 00:11:42,480
and the types of control so there are

279
00:11:42,480 --> 00:11:45,120
two types of control for a particular

280
00:11:45,120 --> 00:11:46,860
switch in case if you are configuring a

281
00:11:46,860 --> 00:11:48,959
switch in the sdn the first one is

282
00:11:48,959 --> 00:11:51,420
hubway Hardware in the sense it's kind

283
00:11:51,420 --> 00:11:55,500
of a direct interaction without any uh

284
00:11:55,500 --> 00:11:58,800
um means without any flow rules or

285
00:11:58,800 --> 00:12:01,860
without any uh instructions to perform

286
00:12:01,860 --> 00:12:04,260
what to do next so that is kind of a

287
00:12:04,260 --> 00:12:07,200
flooded protocol uh so this is the worst

288
00:12:07,200 --> 00:12:09,720
way of sending a packet or receiving a

289
00:12:09,720 --> 00:12:12,959
packet and even if it is of

290
00:12:12,959 --> 00:12:15,360
um the switches of

291
00:12:15,360 --> 00:12:18,000
uh controlled or configured in a rule

292
00:12:18,000 --> 00:12:19,740
set that this is how to flow means that

293
00:12:19,740 --> 00:12:22,019
would typically go in the hub way so

294
00:12:22,019 --> 00:12:23,579
that's the main reason that we have to

295
00:12:23,579 --> 00:12:25,260
jump to the second one second control

296
00:12:25,260 --> 00:12:27,240
option the second control option is

297
00:12:27,240 --> 00:12:29,160
learning switch learning switch in the

298
00:12:29,160 --> 00:12:31,500
sense it's kind of named as a learning

299
00:12:31,500 --> 00:12:34,320
search but you can Define everything

300
00:12:34,320 --> 00:12:38,040
within the learning switch itself so if

301
00:12:38,040 --> 00:12:40,320
this is the additional part that is

302
00:12:40,320 --> 00:12:42,959
being done along with this knot this

303
00:12:42,959 --> 00:12:44,760
learning switch in the sense

304
00:12:44,760 --> 00:12:47,240
you can typically

305
00:12:47,240 --> 00:12:51,540
uh host uh say for example uh you you

306
00:12:51,540 --> 00:12:53,880
have divided the network as I mentioned

307
00:12:53,880 --> 00:12:56,820
in two different parts the one was the

308
00:12:56,820 --> 00:13:00,959
typical uh lower privilege people who

309
00:13:00,959 --> 00:13:02,880
are all uh say for example 5000 people

310
00:13:02,880 --> 00:13:05,220
are low privileged people and the other

311
00:13:05,220 --> 00:13:06,660
five thousand people are having high

312
00:13:06,660 --> 00:13:08,519
clearances for accessing the network

313
00:13:08,519 --> 00:13:12,060
okay so imagine if you are having a a

314
00:13:12,060 --> 00:13:14,880
particular switch and from that on the

315
00:13:14,880 --> 00:13:16,920
50 horses or Hunter horses are being

316
00:13:16,920 --> 00:13:19,560
there means you have to Define each and

317
00:13:19,560 --> 00:13:21,779
every firewall rules right from the vaf

318
00:13:21,779 --> 00:13:24,360
or right in another infrastructure for

319
00:13:24,360 --> 00:13:26,880
instead of doing that you can right away

320
00:13:26,880 --> 00:13:28,620
configure that particular switch alone

321
00:13:28,620 --> 00:13:30,959
and then you can make it in a possible

322
00:13:30,959 --> 00:13:34,139
way to uh means get it reflected within

323
00:13:34,139 --> 00:13:37,440
that itself and in case if a say for

324
00:13:37,440 --> 00:13:39,300
example as an attacker even if I'm

325
00:13:39,300 --> 00:13:41,760
sitting inside the organization and if I

326
00:13:41,760 --> 00:13:44,160
want to flood that Network and make it

327
00:13:44,160 --> 00:13:46,200
crash or even make that particular

328
00:13:46,200 --> 00:13:48,060
switch down in the sense there is a

329
00:13:48,060 --> 00:13:50,459
possibility that it would be blocked

330
00:13:50,459 --> 00:13:53,279
right in the beginning itself say for

331
00:13:53,279 --> 00:13:54,980
example here

332
00:13:54,980 --> 00:13:59,880
I as an attacker imagine if this is part

333
00:13:59,880 --> 00:14:02,399
of the switch and before that there is a

334
00:14:02,399 --> 00:14:05,160
vaf or any other security product or

335
00:14:05,160 --> 00:14:07,820
firewall orchestration suit is there and

336
00:14:07,820 --> 00:14:10,680
I'm sitting inside the organization and

337
00:14:10,680 --> 00:14:13,320
I'm sending a packet inside and in case

338
00:14:13,320 --> 00:14:15,720
if it is jumping here and if I'm trying

339
00:14:15,720 --> 00:14:18,180
to uh means a bypass that particular

340
00:14:18,180 --> 00:14:21,180
vendor firewall and I'll be caught here

341
00:14:21,180 --> 00:14:22,920
within the controller

342
00:14:22,920 --> 00:14:26,040
because I as a Outsider or Insider might

343
00:14:26,040 --> 00:14:27,540
not be aware whether this switch is

344
00:14:27,540 --> 00:14:29,880
manageable by sgn or not so here there

345
00:14:29,880 --> 00:14:32,160
is another security rules that's defined

346
00:14:32,160 --> 00:14:35,160
internally so along with that uh to make

347
00:14:35,160 --> 00:14:36,660
sure that the switch is not getting

348
00:14:36,660 --> 00:14:39,000
crashed we're including snot and then

349
00:14:39,000 --> 00:14:41,399
the banner for high performance system

350
00:14:41,399 --> 00:14:44,220
so this is where that second learning

351
00:14:44,220 --> 00:14:47,360
switch is coming into picture

352
00:14:48,019 --> 00:14:50,459
so this is where the second type of

353
00:14:50,459 --> 00:14:52,560
control uh learning switch is coming

354
00:14:52,560 --> 00:14:56,160
into picture so from that on each each

355
00:14:56,160 --> 00:14:58,620
requests that are being defined in that

356
00:14:58,620 --> 00:15:01,860
particular uh admin host column would be

357
00:15:01,860 --> 00:15:04,560
blocked in different ways whatever you

358
00:15:04,560 --> 00:15:06,779
want say for example you can block it by

359
00:15:06,779 --> 00:15:10,740
a packet size and secondly block it via

360
00:15:10,740 --> 00:15:13,980
a packet flow and third one is a blocket

361
00:15:13,980 --> 00:15:16,680
wire uh means a

362
00:15:16,680 --> 00:15:19,079
request person uh the number of times

363
00:15:19,079 --> 00:15:21,420
from right from the source onwards okay

364
00:15:21,420 --> 00:15:24,000
and the ways of learning switch

365
00:15:24,000 --> 00:15:26,760
algorithm at each hop so the next one

366
00:15:26,760 --> 00:15:29,399
ways of algorithm in the sense as I

367
00:15:29,399 --> 00:15:30,600
mentioned earlier there might be

368
00:15:30,600 --> 00:15:32,160
different sets of people with different

369
00:15:32,160 --> 00:15:34,860
privileges so for that you have to

370
00:15:34,860 --> 00:15:36,959
customize the rules here in this knot

371
00:15:36,959 --> 00:15:39,480
and see sorry here in the sgn and also

372
00:15:39,480 --> 00:15:41,940
there in this knot so this in case if

373
00:15:41,940 --> 00:15:44,639
the matches are being there in the uh

374
00:15:44,639 --> 00:15:46,440
particular rule sets right from the

375
00:15:46,440 --> 00:15:48,600
attack in the sense yeah it would create

376
00:15:48,600 --> 00:15:50,940
a alert system and that alert system

377
00:15:50,940 --> 00:15:53,459
would be defining in the

378
00:15:53,459 --> 00:15:56,279
uh means uh it would be stored in the

379
00:15:56,279 --> 00:15:58,740
logs and then the output model would be

380
00:15:58,740 --> 00:16:00,839
created so that's how the flow goes this

381
00:16:00,839 --> 00:16:03,540
is same as the flow for the it's not so

382
00:16:03,540 --> 00:16:06,300
uh I forgot to include the stock snot

383
00:16:06,300 --> 00:16:07,740
components means mention there's not

384
00:16:07,740 --> 00:16:09,540
components here

385
00:16:09,540 --> 00:16:12,060
so parallely along with the learning

386
00:16:12,060 --> 00:16:14,459
switch this snot would also be

387
00:16:14,459 --> 00:16:16,620
performing in a similar way say for

388
00:16:16,620 --> 00:16:18,839
example the packet decoder so this these

389
00:16:18,839 --> 00:16:20,339
are the five components of snotch

390
00:16:20,339 --> 00:16:24,240
typical components of not uh so packet

391
00:16:24,240 --> 00:16:26,160
decoder Nissan it's responsible for

392
00:16:26,160 --> 00:16:29,279
forming the packets in uh to better use

393
00:16:29,279 --> 00:16:31,620
for the rest of the components and the

394
00:16:31,620 --> 00:16:34,199
pre-processors preprocesses and since it

395
00:16:34,199 --> 00:16:37,440
would be uh defining the

396
00:16:37,440 --> 00:16:39,540
um particular packet in a sequential way

397
00:16:39,540 --> 00:16:42,180
and to make it perform for uh to make it

398
00:16:42,180 --> 00:16:43,680
ready for the analysis in the next

399
00:16:43,680 --> 00:16:45,779
Direction engine and detection engine

400
00:16:45,779 --> 00:16:48,540
has the rules and it would be matched

401
00:16:48,540 --> 00:16:50,160
against the particular packet and in

402
00:16:50,160 --> 00:16:52,199
case if there is any rules acceptable

403
00:16:52,199 --> 00:16:54,120
means it would be accepting and it would

404
00:16:54,120 --> 00:16:56,100
be sent to the log and the log would be

405
00:16:56,100 --> 00:16:58,019
triggered and then the output model in

406
00:16:58,019 --> 00:17:00,060
case if the rule is against that

407
00:17:00,060 --> 00:17:01,800
particular data means it would be

408
00:17:01,800 --> 00:17:04,079
dropped immediately so this one would be

409
00:17:04,079 --> 00:17:06,299
parallely happening

410
00:17:06,299 --> 00:17:09,000
along with the

411
00:17:09,000 --> 00:17:12,419
learning switch so uh so that's the

412
00:17:12,419 --> 00:17:14,640
reason that I told uh I I have mentioned

413
00:17:14,640 --> 00:17:15,900
that the way of learning switch

414
00:17:15,900 --> 00:17:18,599
algorithm at each hop so from the first

415
00:17:18,599 --> 00:17:20,819
hop to second job and in case if it is

416
00:17:20,819 --> 00:17:22,980
reaching the End customer and then if it

417
00:17:22,980 --> 00:17:25,260
is going above that and then coming back

418
00:17:25,260 --> 00:17:27,959
to the same path that uh it is

419
00:17:27,959 --> 00:17:29,940
responding giving back to the server to

420
00:17:29,940 --> 00:17:31,320
the client or the client to the server

421
00:17:31,320 --> 00:17:34,320
means so by that time you can change the

422
00:17:34,320 --> 00:17:36,720
rules so in case if I'm sending a hi to

423
00:17:36,720 --> 00:17:39,720
him uh so the in case if if it requires

424
00:17:39,720 --> 00:17:42,299
at least five to six Hops and then reach

425
00:17:42,299 --> 00:17:44,400
the same means and in case if he's

426
00:17:44,400 --> 00:17:46,919
saying that hello again and then if it

427
00:17:46,919 --> 00:17:49,080
is coming via the same hop you can

428
00:17:49,080 --> 00:17:50,820
refine the rules which again in a

429
00:17:50,820 --> 00:17:52,020
different way with the same switch

430
00:17:52,020 --> 00:17:54,240
itself so that's the main advantage of

431
00:17:54,240 --> 00:17:55,860
using the switch and converting the

432
00:17:55,860 --> 00:17:59,280
switch into the uh 5 volt it switches

433
00:17:59,280 --> 00:18:00,960
into the firewall

434
00:18:00,960 --> 00:18:04,559
and so this is the switch way and the

435
00:18:04,559 --> 00:18:07,080
firewall way this same switch

436
00:18:07,080 --> 00:18:08,820
um but there are few additions to that

437
00:18:08,820 --> 00:18:12,360
so it means you can add a rule against

438
00:18:12,360 --> 00:18:14,820
the source Mac address uh that whether

439
00:18:14,820 --> 00:18:17,640
it is getting detected or not so in case

440
00:18:17,640 --> 00:18:20,880
say for example if a continuous set of

441
00:18:20,880 --> 00:18:23,520
packets are coming per second and if it

442
00:18:23,520 --> 00:18:26,100
is getting uh for a means say for

443
00:18:26,100 --> 00:18:28,380
example for a given amount of time for a

444
00:18:28,380 --> 00:18:30,000
20 minutes or 30 minutes or in case if

445
00:18:30,000 --> 00:18:31,620
it is happening for more than two to

446
00:18:31,620 --> 00:18:33,419
three hours means you can block it

447
00:18:33,419 --> 00:18:35,460
immediately that is the the reason

448
00:18:35,460 --> 00:18:37,860
behind that is you can mark it as the

449
00:18:37,860 --> 00:18:40,500
packet is giving uh getting by flow so

450
00:18:40,500 --> 00:18:42,539
you can mark it as by flow attack you

451
00:18:42,539 --> 00:18:45,179
can bypass it means sorry uh deduct and

452
00:18:45,179 --> 00:18:48,059
stop it and so that's the advantage of

453
00:18:48,059 --> 00:18:50,700
using uh firewall weight and the hash

454
00:18:50,700 --> 00:18:53,100
tables hash tables in the sense you can

455
00:18:53,100 --> 00:18:55,380
uh there is there is advantage of

456
00:18:55,380 --> 00:18:57,900
storing the key values keys and then the

457
00:18:57,900 --> 00:19:00,240
value pass with in the hash table itself

458
00:19:00,240 --> 00:19:02,580
and that has to be done within the

459
00:19:02,580 --> 00:19:04,860
switch itself so there is an advantage

460
00:19:04,860 --> 00:19:07,020
of clearing the Clash cache again again

461
00:19:07,020 --> 00:19:09,200
in the hash tables and it would

462
00:19:09,200 --> 00:19:12,120
automatically make a re-entry whenever

463
00:19:12,120 --> 00:19:14,760
it is hitting a server and means in the

464
00:19:14,760 --> 00:19:17,340
flow table it would uh get a new

465
00:19:17,340 --> 00:19:19,620
re-entry and then it would be uh hitting

466
00:19:19,620 --> 00:19:21,360
the server and then coming back and once

467
00:19:21,360 --> 00:19:23,280
the packet is done it would be clearing

468
00:19:23,280 --> 00:19:26,700
the cache so it's kind of managing uh

469
00:19:26,700 --> 00:19:29,580
too many things at a time and firstly uh

470
00:19:29,580 --> 00:19:31,980
in case if it is of a huge number of

471
00:19:31,980 --> 00:19:33,960
attacks are going on means there is a

472
00:19:33,960 --> 00:19:36,299
performance speed issue uh that is

473
00:19:36,299 --> 00:19:38,520
getting lagged here so that's a reason

474
00:19:38,520 --> 00:19:42,179
that there is another way of doing it uh

475
00:19:42,179 --> 00:19:43,760
we'll look on to the

476
00:19:43,760 --> 00:19:46,320
data plane one

477
00:19:46,320 --> 00:19:49,140
so customization or data plane so this

478
00:19:49,140 --> 00:19:51,360
is not flexible as software as you know

479
00:19:51,360 --> 00:19:54,600
uh because it's more like it's just

480
00:19:54,600 --> 00:19:56,460
doing what the control plane is saying

481
00:19:56,460 --> 00:20:00,059
uh the data plane right so here uh the

482
00:20:00,059 --> 00:20:01,980
speed matters the speed is the biggest

483
00:20:01,980 --> 00:20:04,799
trouble here uh because in case if

484
00:20:04,799 --> 00:20:07,080
imagine if there was an attack with

485
00:20:07,080 --> 00:20:09,780
Google right last week 46 million per

486
00:20:09,780 --> 00:20:12,780
second for the last few hours but they

487
00:20:12,780 --> 00:20:15,480
handled it in a very nice way so uh that

488
00:20:15,480 --> 00:20:18,419
speed matters here so uh one typical

489
00:20:18,419 --> 00:20:21,960
example is you can use a Intel dbdk uh

490
00:20:21,960 --> 00:20:24,360
data plane development kit so this is

491
00:20:24,360 --> 00:20:26,460
one of their programming language that

492
00:20:26,460 --> 00:20:29,880
would help to uh means program the data

493
00:20:29,880 --> 00:20:32,700
plane in even more faster way and to

494
00:20:32,700 --> 00:20:35,160
make it running parallely parallely in

495
00:20:35,160 --> 00:20:37,440
the sense uh since it's a internal

496
00:20:37,440 --> 00:20:39,720
Network you can do whatever you want you

497
00:20:39,720 --> 00:20:41,820
can open the protocols whatever you need

498
00:20:41,820 --> 00:20:44,340
and based on the opening protocols you

499
00:20:44,340 --> 00:20:46,260
can run each parallel requests in each

500
00:20:46,260 --> 00:20:48,900
way and that would make sure that this

501
00:20:48,900 --> 00:20:51,000
particular product is not getting

502
00:20:51,000 --> 00:20:53,960
stopped or getting queued for a longer

503
00:20:53,960 --> 00:20:56,880
requises per second and that's the

504
00:20:56,880 --> 00:20:58,440
reason that it won't be getting crashed

505
00:20:58,440 --> 00:21:00,840
so we can open the parallel lines

506
00:21:00,840 --> 00:21:02,700
whenever we want and that's the main

507
00:21:02,700 --> 00:21:05,700
usage of doing this and with this custom

508
00:21:05,700 --> 00:21:08,160
customization you have to make sure that

509
00:21:08,160 --> 00:21:10,799
uh we are having a higher performance

510
00:21:10,799 --> 00:21:13,140
range with an acceptable speed range as

511
00:21:13,140 --> 00:21:14,820
well so that's a main reason of

512
00:21:14,820 --> 00:21:17,820
customizing this control plane and uh

513
00:21:17,820 --> 00:21:20,640
like I said Intel dpdk you can you can

514
00:21:20,640 --> 00:21:22,500
include lot of there are a lot of

515
00:21:22,500 --> 00:21:24,240
examples like that so in case if you

516
00:21:24,240 --> 00:21:25,799
would be able to integrate this Intel

517
00:21:25,799 --> 00:21:29,460
dbdk into your uh data plane means uh

518
00:21:29,460 --> 00:21:32,159
you can even handle millions of attacks

519
00:21:32,159 --> 00:21:34,860
per second without having a premium tool

520
00:21:34,860 --> 00:21:36,539
or something like that

521
00:21:36,539 --> 00:21:39,960
yeah so okay so

522
00:21:39,960 --> 00:21:43,140
I hope uh most of you are aware of three

523
00:21:43,140 --> 00:21:46,500
types of DDOS attacks so uh could

524
00:21:46,500 --> 00:21:49,310
someone Point uh what is volumetric

525
00:21:49,310 --> 00:21:52,380
[Music]

526
00:21:52,380 --> 00:21:54,900
bytes per second

527
00:21:54,900 --> 00:21:56,180
protocol based

528
00:21:56,180 --> 00:21:59,520
[Music]

529
00:21:59,520 --> 00:22:03,020
protocol based uh

530
00:22:03,320 --> 00:22:05,059
yeah

531
00:22:05,059 --> 00:22:08,220
protocol base is uh uh bytespread pack

532
00:22:08,220 --> 00:22:10,679
means a size per second and uh

533
00:22:10,679 --> 00:22:12,780
application means uh it's kind of a

534
00:22:12,780 --> 00:22:15,059
request per second so that's these are

535
00:22:15,059 --> 00:22:17,520
the three uh levels means types of

536
00:22:17,520 --> 00:22:19,860
technically describing the DDOS attacks

537
00:22:19,860 --> 00:22:23,700
uh so in case uh the as I mentioned in

538
00:22:23,700 --> 00:22:26,039
the customization of a data plane and

539
00:22:26,039 --> 00:22:28,740
then the control plane in case if you

540
00:22:28,740 --> 00:22:31,679
are facing uh volumetric or protocol

541
00:22:31,679 --> 00:22:34,140
based attack leave the application layer

542
00:22:34,140 --> 00:22:36,059
in case if you are having these two

543
00:22:36,059 --> 00:22:38,460
types of attacks means the way that you

544
00:22:38,460 --> 00:22:39,810
have customized the

545
00:22:39,810 --> 00:22:41,640
[Music]

546
00:22:41,640 --> 00:22:43,860
um control plane in case if you are

547
00:22:43,860 --> 00:22:44,940
doing it in the right way for the

548
00:22:44,940 --> 00:22:46,980
control plane with the learning path you

549
00:22:46,980 --> 00:22:49,140
can stop these attacks these two first

550
00:22:49,140 --> 00:22:51,360
two attacks and in the application plane

551
00:22:51,360 --> 00:22:53,400
it's more like as we mentioned the speed

552
00:22:53,400 --> 00:22:55,500
matters and then the acceptable criteria

553
00:22:55,500 --> 00:22:57,960
matters there so for that in case if you

554
00:22:57,960 --> 00:23:00,299
could able to customize that with the

555
00:23:00,299 --> 00:23:02,820
very good means data plane integration

556
00:23:02,820 --> 00:23:04,260
for managing the highest speed

557
00:23:04,260 --> 00:23:06,179
performance you can stop the application

558
00:23:06,179 --> 00:23:08,940
layer attacks so mostly volumetric in

559
00:23:08,940 --> 00:23:10,679
the sense you can use Bots means

560
00:23:10,679 --> 00:23:12,360
attackers as an attacker you can use

561
00:23:12,360 --> 00:23:15,600
Bots uh protocol since it's a network

562
00:23:15,600 --> 00:23:18,299
layer one you can do it but there is a

563
00:23:18,299 --> 00:23:22,140
possibility uh of getting it heater here

564
00:23:22,140 --> 00:23:24,360
and there uh but you can miss those

565
00:23:24,360 --> 00:23:27,059
things uh but for that we have another

566
00:23:27,059 --> 00:23:29,700
solution I'll let you know that uh in

567
00:23:29,700 --> 00:23:32,700
the application uh you can use box as I

568
00:23:32,700 --> 00:23:35,039
mentioned earlier in the uh start of

569
00:23:35,039 --> 00:23:37,980
this session uh pox is another sdn

570
00:23:37,980 --> 00:23:40,320
controller so you can use box too as

571
00:23:40,320 --> 00:23:42,480
soon since uh the reason behind I'm

572
00:23:42,480 --> 00:23:44,640
using asking you to use box for the

573
00:23:44,640 --> 00:23:47,220
application layer DDOS means it would be

574
00:23:47,220 --> 00:23:48,980
having in the

575
00:23:48,980 --> 00:23:52,260
behavioral and needed resources uh

576
00:23:52,260 --> 00:23:55,020
management there in the box and it has

577
00:23:55,020 --> 00:23:56,760
uh that would be sent that would be

578
00:23:56,760 --> 00:23:58,860
communicated via apis there so that's

579
00:23:58,860 --> 00:24:02,280
the main advantage of using box uh and

580
00:24:02,280 --> 00:24:04,140
uh defensive approaches

581
00:24:04,140 --> 00:24:05,550
um so one second

582
00:24:05,550 --> 00:24:08,909
[Music]

583
00:24:14,419 --> 00:24:17,700
so here uh there's a typical scenario

584
00:24:17,700 --> 00:24:21,720
that I got it in a two ways uh blocks

585
00:24:21,720 --> 00:24:24,780
per second uh packets are blocked by

586
00:24:24,780 --> 00:24:27,600
flow so if you could see here means I I

587
00:24:27,600 --> 00:24:30,600
couldn't able to show this the VM since

588
00:24:30,600 --> 00:24:32,700
that was done in a VM Horizon so I

589
00:24:32,700 --> 00:24:34,799
couldn't able to show you the live uh

590
00:24:34,799 --> 00:24:38,460
blocked by flow in the sense uh see here

591
00:24:38,460 --> 00:24:40,260
um you can you can track the packets

592
00:24:40,260 --> 00:24:42,419
whichever is coming from a same Source

593
00:24:42,419 --> 00:24:44,280
from the same destination for a

594
00:24:44,280 --> 00:24:47,100
constantly in a SP uh same protocol

595
00:24:47,100 --> 00:24:50,220
without any uh means interruptions means

596
00:24:50,220 --> 00:24:52,740
you can block that by flow and secondly

597
00:24:52,740 --> 00:24:56,940
in case if the blocks by size

598
00:24:56,940 --> 00:24:59,840
blocks by size in the sensor

599
00:24:59,840 --> 00:25:03,380
so here in case if you are facing um

600
00:25:03,380 --> 00:25:06,840
same types of attack from one part to

601
00:25:06,840 --> 00:25:09,299
another part with the higher range means

602
00:25:09,299 --> 00:25:11,940
than the typical packet size range and

603
00:25:11,940 --> 00:25:13,440
constantly if you're getting it from the

604
00:25:13,440 --> 00:25:15,539
same Source means you can block it and

605
00:25:15,539 --> 00:25:18,179
as I mentioned earlier volumetric they

606
00:25:18,179 --> 00:25:20,460
can use Bots as well so you have to

607
00:25:20,460 --> 00:25:23,520
predict the unified rules

608
00:25:23,520 --> 00:25:25,679
unified security policies unified

609
00:25:25,679 --> 00:25:27,840
security policies in the sense uh there

610
00:25:27,840 --> 00:25:30,600
is an advantage of implementing that uh

611
00:25:30,600 --> 00:25:32,940
the the first rule of the first

612
00:25:32,940 --> 00:25:34,980
advantage of having a unified security

613
00:25:34,980 --> 00:25:38,039
policy is uh you cannot give a rule

614
00:25:38,039 --> 00:25:41,640
saying that you can allow XXX Source

615
00:25:41,640 --> 00:25:44,279
from xXx destination so you have to

616
00:25:44,279 --> 00:25:46,860
mention each and everything that where

617
00:25:46,860 --> 00:25:48,480
it is coming from and what it is coming

618
00:25:48,480 --> 00:25:51,600
from and those unified security policies

619
00:25:51,600 --> 00:25:55,320
should be deleted once uh from 180 days

620
00:25:55,320 --> 00:25:58,559
as a one set and then another set so

621
00:25:58,559 --> 00:26:01,380
that you can't you won't be able to uh

622
00:26:01,380 --> 00:26:03,179
act means you won't be using any

623
00:26:03,179 --> 00:26:05,760
unwanted Futures and unwanted

624
00:26:05,760 --> 00:26:07,799
application rules under the policies in

625
00:26:07,799 --> 00:26:09,720
the unified security policy so this is

626
00:26:09,720 --> 00:26:11,760
more like uh

627
00:26:11,760 --> 00:26:13,620
um means a firewall orchestration suit

628
00:26:13,620 --> 00:26:15,960
integration uh since we have included

629
00:26:15,960 --> 00:26:18,600
unified security policy here and this is

630
00:26:18,600 --> 00:26:21,539
an advantage of uh using that in this

631
00:26:21,539 --> 00:26:25,158
flow and yeah

632
00:26:26,100 --> 00:26:30,900
that's uh overall about uh oems so this

633
00:26:30,900 --> 00:26:33,900
one when I said regardless of vendors

634
00:26:33,900 --> 00:26:35,640
and then the oems

635
00:26:35,640 --> 00:26:37,740
um so as I mentioned in the earlier

636
00:26:37,740 --> 00:26:41,580
stage uh whatever say for example uh not

637
00:26:41,580 --> 00:26:44,760
going to point out any specific products

638
00:26:44,760 --> 00:26:46,799
say for example Barracuda or any other

639
00:26:46,799 --> 00:26:48,840
firewall that if you take it as an

640
00:26:48,840 --> 00:26:51,779
example so I as an outsider if in case

641
00:26:51,779 --> 00:26:54,059
if I'm bypassing that

642
00:26:54,059 --> 00:26:56,880
um based on barracuda's loophole or

643
00:26:56,880 --> 00:26:58,980
akamai's loophole and in case if I'm

644
00:26:58,980 --> 00:27:00,720
back pressing I as an outsider or

645
00:27:00,720 --> 00:27:02,820
Insider might not be aware of the kernel

646
00:27:02,820 --> 00:27:04,380
levels firewall sitting in the admin

647
00:27:04,380 --> 00:27:06,779
switch so in even if I'm bypassing that

648
00:27:06,779 --> 00:27:09,720
I would be caught in another uh down

649
00:27:09,720 --> 00:27:12,480
layer switch uh as a learning path

650
00:27:12,480 --> 00:27:14,279
learning switch would be giving the

651
00:27:14,279 --> 00:27:16,080
security there so that's the main

652
00:27:16,080 --> 00:27:18,360
advantage that I mentioned that you can

653
00:27:18,360 --> 00:27:21,000
uh means a block any packets regardless

654
00:27:21,000 --> 00:27:23,580
of the vendors or the oems uh completely

655
00:27:23,580 --> 00:27:26,490
with the open source tools

656
00:27:26,490 --> 00:27:29,419
[Music]

657
00:27:29,419 --> 00:27:33,419
yeah I hope uh yeah and goals and the

658
00:27:33,419 --> 00:27:36,720
Futures go so this is one of a simple

659
00:27:36,720 --> 00:27:40,320
product with sdn uh so like earlier I

660
00:27:40,320 --> 00:27:42,480
was working on another uh Asian product

661
00:27:42,480 --> 00:27:44,460
so that would be completely DDOS

662
00:27:44,460 --> 00:27:46,679
protection without a snot and I got it

663
00:27:46,679 --> 00:27:48,840
integrated with this knot since there

664
00:27:48,840 --> 00:27:51,120
was high performance issues and it

665
00:27:51,120 --> 00:27:52,919
couldn't able to handle lot more packets

666
00:27:52,919 --> 00:27:56,220
for uh defending mechanisms so that is

667
00:27:56,220 --> 00:27:57,779
one thing and second is manual

668
00:27:57,779 --> 00:27:58,860
intervention without manual

669
00:27:58,860 --> 00:28:01,020
interventions uh if you could list down

670
00:28:01,020 --> 00:28:03,960
the possibilities you don't only thing

671
00:28:03,960 --> 00:28:05,700
is you have to confirm the second thing

672
00:28:05,700 --> 00:28:09,120
is you don't need to uh means a sit for

673
00:28:09,120 --> 00:28:11,580
updating the repositories or the

674
00:28:11,580 --> 00:28:13,020
vulnerability possibilities that are

675
00:28:13,020 --> 00:28:15,840
coming up here and secondly even if it

676
00:28:15,840 --> 00:28:18,059
is the attacks are getting triggered you

677
00:28:18,059 --> 00:28:20,159
you can mention that your unified

678
00:28:20,159 --> 00:28:21,779
security policy would take care of those

679
00:28:21,779 --> 00:28:24,059
things and thirdly each and everything

680
00:28:24,059 --> 00:28:26,340
would be logged since we have is not

681
00:28:26,340 --> 00:28:29,159
there and the fourth thing is like you

682
00:28:29,159 --> 00:28:31,380
don't need to worry about whatever types

683
00:28:31,380 --> 00:28:32,940
of details are getting involved so

684
00:28:32,940 --> 00:28:35,220
that's manual intervention less one and

685
00:28:35,220 --> 00:28:38,700
DDOS defensive Integrations so uh d ross

686
00:28:38,700 --> 00:28:40,740
defensive Integrations as you know most

687
00:28:40,740 --> 00:28:43,860
of you uh we are struggling for stopping

688
00:28:43,860 --> 00:28:46,080
dealers we even if we find the very best

689
00:28:46,080 --> 00:28:47,940
before I will be mentioning it at 99

690
00:28:47,940 --> 00:28:51,840
security so uh I go with the same

691
00:28:51,840 --> 00:28:53,760
statement there there might be lot of

692
00:28:53,760 --> 00:28:56,100
loopholes here as well uh so there might

693
00:28:56,100 --> 00:28:58,980
be possibilities but for that one the

694
00:28:58,980 --> 00:29:01,380
only purpose that you will be uh sitting

695
00:29:01,380 --> 00:29:03,299
as in person and you'll be creating new

696
00:29:03,299 --> 00:29:05,159
rule sets in new fat security policies

697
00:29:05,159 --> 00:29:08,039
so that same kind of loopholes might not

698
00:29:08,039 --> 00:29:10,200
happen again with another organization

699
00:29:10,200 --> 00:29:13,200
or an infrastructure one okay so

700
00:29:13,200 --> 00:29:16,200
um there is another possibility that we

701
00:29:16,200 --> 00:29:18,840
can research on uh so there is something

702
00:29:18,840 --> 00:29:20,100
called

703
00:29:20,100 --> 00:29:22,279
you might be heard about nfb as you

704
00:29:22,279 --> 00:29:24,659
nfe's network functional virtualization

705
00:29:24,659 --> 00:29:26,640
so this is more like similar to engine

706
00:29:26,640 --> 00:29:28,260
but the sdn model is completely

707
00:29:28,260 --> 00:29:30,720
different as we could able to program

708
00:29:30,720 --> 00:29:33,679
the network uh data how to

709
00:29:33,679 --> 00:29:36,539
make the traffic go flow in a very

710
00:29:36,539 --> 00:29:40,020
different way so uh so for that uh you

711
00:29:40,020 --> 00:29:41,940
might be heard about secure change

712
00:29:41,940 --> 00:29:45,000
mechanisms in the organizations so like

713
00:29:45,000 --> 00:29:46,919
in case if you're Rising a ticket for

714
00:29:46,919 --> 00:29:48,360
some kind of issues and you're getting

715
00:29:48,360 --> 00:29:51,179
it followed and the same way in case if

716
00:29:51,179 --> 00:29:52,799
you're getting an access to a particular

717
00:29:52,799 --> 00:29:56,940
uh space or something like that those

718
00:29:56,940 --> 00:29:59,520
kind of secure changes you can you can

719
00:29:59,520 --> 00:30:01,320
make sure that secure changes are done

720
00:30:01,320 --> 00:30:04,500
in sdn way so so that no ticketing

721
00:30:04,500 --> 00:30:06,480
person needs to be sitting in person and

722
00:30:06,480 --> 00:30:08,159
doing your analysis and making sure

723
00:30:08,159 --> 00:30:11,220
whether it is resolved or the ticket is

724
00:30:11,220 --> 00:30:13,140
getting escalator or anything else so

725
00:30:13,140 --> 00:30:15,659
that's one advantage of bringing another

726
00:30:15,659 --> 00:30:18,620
one uh means without manual intervention

727
00:30:18,620 --> 00:30:20,840
so unify

728
00:30:20,840 --> 00:30:23,700
infrastructure so so there is another

729
00:30:23,700 --> 00:30:25,980
product as I mentioned the firewall

730
00:30:25,980 --> 00:30:27,960
Association suits you can integrate

731
00:30:27,960 --> 00:30:31,260
completely with removing the snot and

732
00:30:31,260 --> 00:30:33,480
integrate that uh with the firewall

733
00:30:33,480 --> 00:30:35,399
orchestration suit so that would make

734
00:30:35,399 --> 00:30:37,860
sure that your network application and

735
00:30:37,860 --> 00:30:39,659
then the change everything is going

736
00:30:39,659 --> 00:30:41,700
without manual intervention so that's a

737
00:30:41,700 --> 00:30:43,380
future product in case we could able to

738
00:30:43,380 --> 00:30:45,120
do it

739
00:30:45,120 --> 00:30:49,140
and uh so this input was from this last

740
00:30:49,140 --> 00:30:52,380
input was from Nick Finster you might be

741
00:30:52,380 --> 00:30:55,620
aware of him he he's working with MIT as

742
00:30:55,620 --> 00:30:58,980
a professor uh so this idea that we got

743
00:30:58,980 --> 00:31:01,460
that means I got it whereas like his

744
00:31:01,460 --> 00:31:03,020
research

745
00:31:03,020 --> 00:31:06,779
that's it ah thank you in case if there

746
00:31:06,779 --> 00:31:10,340
is any questions we could discuss

747
00:31:16,460 --> 00:31:19,020
my question is about application layer

748
00:31:19,020 --> 00:31:21,299
DDOS attacks because I've been under the

749
00:31:21,299 --> 00:31:22,559
assumption that if we have an

750
00:31:22,559 --> 00:31:24,299
application layer DDOS attack just add

751
00:31:24,299 --> 00:31:27,960
uh add the recapture V3 if we notice uh

752
00:31:27,960 --> 00:31:30,240
we noticed human into my requests coming

753
00:31:30,240 --> 00:31:32,880
in just uh give them a human and

754
00:31:32,880 --> 00:31:34,799
challenge so

755
00:31:34,799 --> 00:31:35,520
um

756
00:31:35,520 --> 00:31:37,510
is that not the best solution

757
00:31:37,510 --> 00:31:39,140
[Music]

758
00:31:39,140 --> 00:31:41,820
like you have a web you have a web

759
00:31:41,820 --> 00:31:43,980
application you suddenly notice a spike

760
00:31:43,980 --> 00:31:46,740
in a spike and request thousands or

761
00:31:46,740 --> 00:31:49,740
maybe millions millions of them so I was

762
00:31:49,740 --> 00:31:51,360
under the assumption that we could just

763
00:31:51,360 --> 00:31:54,600
add recapture V3 there and uh challenge

764
00:31:54,600 --> 00:31:55,919
them to prove that they're human they're

765
00:31:55,919 --> 00:31:58,260
that they are not Bots

766
00:31:58,260 --> 00:32:01,200
so so is that not the best solution uh

767
00:32:01,200 --> 00:32:03,179
no because uh no that wasn't the best

768
00:32:03,179 --> 00:32:06,000
tradition because uh two things here uh

769
00:32:06,000 --> 00:32:07,679
since you are saying uh web application

770
00:32:07,679 --> 00:32:09,720
as an example there might be secure

771
00:32:09,720 --> 00:32:12,000
protocols or ports that vro also

772
00:32:12,000 --> 00:32:15,000
allowing and giving some rules to uh get

773
00:32:15,000 --> 00:32:16,679
the data transmission here and there

774
00:32:16,679 --> 00:32:18,480
from the client to server or from the

775
00:32:18,480 --> 00:32:21,000
end user so from that on there might be

776
00:32:21,000 --> 00:32:23,159
loopholes and secondly we are depending

777
00:32:23,159 --> 00:32:26,039
on a specific vendor so for from that on

778
00:32:26,039 --> 00:32:28,980
uh there might be loopholes for defining

779
00:32:28,980 --> 00:32:31,740
or accepting the security rules and then

780
00:32:31,740 --> 00:32:33,299
the policies that are created by the

781
00:32:33,299 --> 00:32:36,000
specific vendor so with that help there

782
00:32:36,000 --> 00:32:37,740
is a possibility of

783
00:32:37,740 --> 00:32:41,399
making this a web app down itself

784
00:32:41,399 --> 00:32:44,360
okay thank you

785
00:32:49,559 --> 00:32:52,020
first of all good talk man I enjoyed it

786
00:32:52,020 --> 00:32:53,580
thank you I had a couple of questions in

787
00:32:53,580 --> 00:32:55,500
snot right so we're talking about this

788
00:32:55,500 --> 00:32:57,600
scalable standpoint when you spoke about

789
00:32:57,600 --> 00:32:59,460
the police uh scalability aspect right

790
00:32:59,460 --> 00:33:01,620
this is going to handle a lot of traffic

791
00:33:01,620 --> 00:33:03,480
when you see from the preprocessor

792
00:33:03,480 --> 00:33:04,799
aspect right

793
00:33:04,799 --> 00:33:06,899
um are you making any changes from the

794
00:33:06,899 --> 00:33:08,340
previous processor because it's gonna

795
00:33:08,340 --> 00:33:10,500
handle a different set of traffic second

796
00:33:10,500 --> 00:33:12,000
thing is the pull poke that we are

797
00:33:12,000 --> 00:33:14,159
talking about right uh how frequently

798
00:33:14,159 --> 00:33:15,659
you're gonna update the rules do you

799
00:33:15,659 --> 00:33:17,340
have a separate team to sit and write

800
00:33:17,340 --> 00:33:19,140
those snot roles and push it because

801
00:33:19,140 --> 00:33:20,760
you'll have to look at the control flow

802
00:33:20,760 --> 00:33:22,919
application flow reg X patterns exactly

803
00:33:22,919 --> 00:33:24,659
your thoughts on those things yeah so

804
00:33:24,659 --> 00:33:26,880
first of all preprocessors yes you can

805
00:33:26,880 --> 00:33:29,760
give your own format for uh processing

806
00:33:29,760 --> 00:33:33,120
that uh that would be by bytes or the

807
00:33:33,120 --> 00:33:35,159
way that uh or trust means the the

808
00:33:35,159 --> 00:33:37,740
packet is coming and you can Define each

809
00:33:37,740 --> 00:33:40,260
packet in different stages right for a

810
00:33:40,260 --> 00:33:42,240
single TCP packet you can Define it in a

811
00:33:42,240 --> 00:33:45,000
frequency way on each way so you can uh

812
00:33:45,000 --> 00:33:46,799
differentiate those and you can make it

813
00:33:46,799 --> 00:33:49,080
in a sequential format based on what

814
00:33:49,080 --> 00:33:51,419
your needs are so that's the best way of

815
00:33:51,419 --> 00:33:54,240
doing the preprocessing and coming to

816
00:33:54,240 --> 00:33:57,539
pull the Poke what was it

817
00:33:57,539 --> 00:33:59,340
saying it because it involves a lot of

818
00:33:59,340 --> 00:34:01,440
periodic rules pushes right and each

819
00:34:01,440 --> 00:34:03,960
packet each attack differentiates itself

820
00:34:03,960 --> 00:34:06,960
from regex patterns control flow then

821
00:34:06,960 --> 00:34:07,980
you were mentioning about the

822
00:34:07,980 --> 00:34:10,080
application right that involves a little

823
00:34:10,080 --> 00:34:12,300
bit of inspection so how do you handle

824
00:34:12,300 --> 00:34:14,940
those things so first of all for that

825
00:34:14,940 --> 00:34:18,899
one you have to uh sit and you have a

826
00:34:18,899 --> 00:34:21,239
you should have a team for a dedicately

827
00:34:21,239 --> 00:34:24,179
uh means pulling all the public

828
00:34:24,179 --> 00:34:26,460
repositories or everything whatever is

829
00:34:26,460 --> 00:34:28,500
possible you have to do it right from

830
00:34:28,500 --> 00:34:31,199
the beginning until this today's end and

831
00:34:31,199 --> 00:34:33,480
from that on you might you don't need

832
00:34:33,480 --> 00:34:36,418
much of people's intervention to get it

833
00:34:36,418 --> 00:34:38,820
involved but uh basically you have to

834
00:34:38,820 --> 00:34:41,099
pull it or you should be having any

835
00:34:41,099 --> 00:34:43,980
other uh means of any other apis to

836
00:34:43,980 --> 00:34:45,960
contact with the exploit DBS or CV

837
00:34:45,960 --> 00:34:48,480
metrics and get it integrated and along

838
00:34:48,480 --> 00:34:50,219
with that in case if there is any zero

839
00:34:50,219 --> 00:34:51,960
days coming up means you have to contact

840
00:34:51,960 --> 00:34:55,159
that person specifically

841
00:34:56,540 --> 00:35:00,480
there will be a team to do this and post

842
00:35:00,480 --> 00:35:02,760
that once it is on to protection you

843
00:35:02,760 --> 00:35:06,800
don't need team thanks yeah

844
00:35:09,359 --> 00:35:11,880
yeah so first of all uh great talk by

845
00:35:11,880 --> 00:35:14,160
the way uh just wanted to you know

846
00:35:14,160 --> 00:35:16,079
explore with you have you uh you

847
00:35:16,079 --> 00:35:18,599
mentioned using snot and you also

848
00:35:18,599 --> 00:35:20,040
mentioned that it is having performance

849
00:35:20,040 --> 00:35:21,720
issues right so that's why you went

850
00:35:21,720 --> 00:35:24,000
ahead and used Barnyard also so have you

851
00:35:24,000 --> 00:35:26,040
considered again not to spark a debate

852
00:35:26,040 --> 00:35:28,440
between snot versus surikata have you

853
00:35:28,440 --> 00:35:30,420
considered you know using surikata also

854
00:35:30,420 --> 00:35:32,820
along you know as a substitute to uh

855
00:35:32,820 --> 00:35:36,060
snot uh no I actually I haven't so like

856
00:35:36,060 --> 00:35:38,940
when it comes to idps snot was in my

857
00:35:38,940 --> 00:35:40,740
first mind to get it integrated I

858
00:35:40,740 --> 00:35:42,540
haven't researched on that side so

859
00:35:42,540 --> 00:35:44,400
that's the reason I sticked with snot

860
00:35:44,400 --> 00:35:47,040
and uh but still as you mentioned since

861
00:35:47,040 --> 00:35:50,540
it's a single thread mechanism I got the

862
00:35:50,540 --> 00:35:52,740
baniards help to make it even more

863
00:35:52,740 --> 00:35:54,359
faster but in case if there is any as

864
00:35:54,359 --> 00:35:56,760
you mentioned we can integrate that and

865
00:35:56,760 --> 00:35:58,680
we could reduce the technologies that

866
00:35:58,680 --> 00:36:00,599
are being involved as you mentioned so

867
00:36:00,599 --> 00:36:02,760
so if I understand correctly so uh

868
00:36:02,760 --> 00:36:04,380
surikata has multi-threading

869
00:36:04,380 --> 00:36:07,020
capabilities also to an extent so I can

870
00:36:07,020 --> 00:36:09,300
substitute a snot with uh you know sorry

871
00:36:09,300 --> 00:36:11,160
because you see that as a possibility

872
00:36:11,160 --> 00:36:13,619
where you can substitute snot with the

873
00:36:13,619 --> 00:36:15,900
surikata and avoid Barnyard altogether

874
00:36:15,900 --> 00:36:18,720
yeah and what about the pulpo actually

875
00:36:18,720 --> 00:36:21,420
we need pulled book intervention as well

876
00:36:21,420 --> 00:36:23,579
but pull the Poke cannot be included

877
00:36:23,579 --> 00:36:26,640
with the what are you and we need us not

878
00:36:26,640 --> 00:36:28,980
to get it involved right else there is

879
00:36:28,980 --> 00:36:31,440
another possibility you have to have a

880
00:36:31,440 --> 00:36:34,260
dedicated team as he mentioned uh to get

881
00:36:34,260 --> 00:36:36,000
the repositories here and they're done

882
00:36:36,000 --> 00:36:37,800
without the help of Builder poke because

883
00:36:37,800 --> 00:36:40,800
that would be a kind of a disadvantage

884
00:36:40,800 --> 00:36:42,240
why I'm saying is like even after

885
00:36:42,240 --> 00:36:44,579
product in production uh imagine if

886
00:36:44,579 --> 00:36:46,260
there are a lot of CVS coming in a

887
00:36:46,260 --> 00:36:48,480
single month from Microsoft means you

888
00:36:48,480 --> 00:36:50,280
have to assign a particular set of

889
00:36:50,280 --> 00:36:53,700
people to make it uh written uh exactly

890
00:36:53,700 --> 00:36:56,099
in a manual way and then make it run so

891
00:36:56,099 --> 00:36:57,780
that's how it works in case if that is

892
00:36:57,780 --> 00:36:59,700
the way we can do it but that would be

893
00:36:59,700 --> 00:37:02,460
kind of manual process would be there

894
00:37:02,460 --> 00:37:04,079
but there are scripts that you can write

895
00:37:04,079 --> 00:37:06,480
to pull surikata rules also yeah that's

896
00:37:06,480 --> 00:37:08,520
that's where I I was just exploring if

897
00:37:08,520 --> 00:37:10,500
if you can just you know replace pulled

898
00:37:10,500 --> 00:37:12,240
poke with an equivalent room oh yeah

899
00:37:12,240 --> 00:37:14,040
that might be another possibility we can

900
00:37:14,040 --> 00:37:16,520
get that

901
00:37:18,890 --> 00:37:21,900
[Music]

902
00:37:21,900 --> 00:37:24,420
so do you have any resources available

903
00:37:24,420 --> 00:37:27,060
publicly if we want to read more about

904
00:37:27,060 --> 00:37:30,540
it yeah I I'm going to publish a new

905
00:37:30,540 --> 00:37:33,540
video after means this one uh so like I

906
00:37:33,540 --> 00:37:35,520
I haven't published it yet completely

907
00:37:35,520 --> 00:37:38,460
I'll do it with the PPT as well as you

908
00:37:38,460 --> 00:37:40,520
as you have seen this uh

909
00:37:40,520 --> 00:37:43,920
sdn short-term scenario I'll uh I have

910
00:37:43,920 --> 00:37:46,800
to do it actually I haven't uh publicly

911
00:37:46,800 --> 00:37:49,500
disclosed this I just got it worked a

912
00:37:49,500 --> 00:37:52,320
few months before sounds good thank you

913
00:37:52,320 --> 00:37:53,400
thank you

914
00:37:53,400 --> 00:37:56,400
foreign

915
00:38:01,280 --> 00:38:04,500
thanks everyone a huge round of applause

916
00:38:04,500 --> 00:38:08,849
[Applause]

