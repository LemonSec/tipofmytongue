1
00:00:02,959 --> 00:00:05,819
good afternoon everyone uh thanks for

2
00:00:05,819 --> 00:00:07,319
coming to the talk

3
00:00:07,319 --> 00:00:09,780
uh first of all let me ask you a

4
00:00:09,780 --> 00:00:12,540
question how many of you use electron

5
00:00:12,540 --> 00:00:14,160
applications

6
00:00:14,160 --> 00:00:16,980
can you please raise hands

7
00:00:16,980 --> 00:00:20,279
uh fight a lot how many of you use to be

8
00:00:20,279 --> 00:00:21,720
more specific Discord desktop

9
00:00:21,720 --> 00:00:23,160
application

10
00:00:23,160 --> 00:00:25,260
Microsoft teams

11
00:00:25,260 --> 00:00:26,699
Slack

12
00:00:26,699 --> 00:00:28,279
twitch

13
00:00:28,279 --> 00:00:30,720
uh vs code

14
00:00:30,720 --> 00:00:33,719
so most of the people who use electron

15
00:00:33,719 --> 00:00:35,160
applications right

16
00:00:35,160 --> 00:00:37,440
what if I told you that I could have

17
00:00:37,440 --> 00:00:39,719
hacked or owned all of your computers

18
00:00:39,719 --> 00:00:42,719
just by sending a link or a message

19
00:00:42,719 --> 00:00:44,520
isn't it scary

20
00:00:44,520 --> 00:00:47,520
so he buy I welcome everyone to Electro

21
00:00:47,520 --> 00:00:49,980
world where I'll be sharing the details

22
00:00:49,980 --> 00:00:52,559
of how we are able to hack all these

23
00:00:52,559 --> 00:00:55,440
desktop applications while uncovering

24
00:00:55,440 --> 00:00:58,879
the new attacks office on electron

25
00:00:59,660 --> 00:01:02,699
also known as Sirius I'm currently

26
00:01:02,699 --> 00:01:04,860
working as application security auditor

27
00:01:04,860 --> 00:01:09,299
at q53 and I like browsers ctfs and

28
00:01:09,299 --> 00:01:11,820
blockchain these days uh I'm also

29
00:01:11,820 --> 00:01:14,159
captain of the CDF team Invaders

30
00:01:14,159 --> 00:01:17,100
so the agenda for this today's talk is

31
00:01:17,100 --> 00:01:19,979
first I'll be talking about the basics

32
00:01:19,979 --> 00:01:22,920
of electron its architecture and it is

33
00:01:22,920 --> 00:01:26,040
and its security preferences such as web

34
00:01:26,040 --> 00:01:29,040
preferences then I'll show the case

35
00:01:29,040 --> 00:01:33,060
studies of the applications we hacked uh

36
00:01:33,060 --> 00:01:35,220
by starting with exploiting the known

37
00:01:35,220 --> 00:01:37,619
electron vulnerabilities and moving on

38
00:01:37,619 --> 00:01:39,500
to the new attack surface we found on

39
00:01:39,500 --> 00:01:41,759
electron applications

40
00:01:41,759 --> 00:01:43,380
and finally we'll go over the

41
00:01:43,380 --> 00:01:45,900
mitigations and without any further Ado

42
00:01:45,900 --> 00:01:48,840
let's get started so what is electron

43
00:01:48,840 --> 00:01:51,960
uh it's a negatively charged subatomic

44
00:01:51,960 --> 00:01:55,079
particle it's not that I'm just kidding

45
00:01:55,079 --> 00:01:57,840
it's a a popular cross-platform desktop

46
00:01:57,840 --> 00:02:00,899
application framework uh if you can

47
00:02:00,899 --> 00:02:02,880
build a website you can build a

48
00:02:02,880 --> 00:02:05,340
completely native cross-platform desktop

49
00:02:05,340 --> 00:02:07,799
application using electron this is the

50
00:02:07,799 --> 00:02:10,979
main motor behind the electron so we

51
00:02:10,979 --> 00:02:15,360
just HTM HTML CSS and JavaScript you can

52
00:02:15,360 --> 00:02:18,060
build a desktop application very easily

53
00:02:18,060 --> 00:02:21,900
so as it is very easy to build desktop

54
00:02:21,900 --> 00:02:24,480
applications it is used by a lot of

55
00:02:24,480 --> 00:02:26,819
companies like Microsoft so they're

56
00:02:26,819 --> 00:02:29,340
using vs code teams Discord slack and

57
00:02:29,340 --> 00:02:31,080
500 plus more applications

58
00:02:31,080 --> 00:02:33,959
so before diving into the box we need to

59
00:02:33,959 --> 00:02:37,200
First understand the uh architecture of

60
00:02:37,200 --> 00:02:40,500
the electron so as you can see on the

61
00:02:40,500 --> 00:02:43,800
slide there are mainly two types of

62
00:02:43,800 --> 00:02:47,040
processes the the main process and the

63
00:02:47,040 --> 00:02:49,560
other one is the renderer process the

64
00:02:49,560 --> 00:02:51,480
main process is the starting point of

65
00:02:51,480 --> 00:02:54,239
the electron application it manages the

66
00:02:54,239 --> 00:02:56,519
windows or renderer process using

67
00:02:56,519 --> 00:02:59,400
browser window API and it also has

68
00:02:59,400 --> 00:03:01,620
access to Native graphical user

69
00:03:01,620 --> 00:03:04,680
interface apis such as menu tray and so

70
00:03:04,680 --> 00:03:07,260
on and by default the electron main

71
00:03:07,260 --> 00:03:10,220
process runs in JavaScript context with

72
00:03:10,220 --> 00:03:13,260
node.js enabled on the other hand we

73
00:03:13,260 --> 00:03:15,300
have the renderer process uh the

74
00:03:15,300 --> 00:03:18,000
renderer process as the name implies or

75
00:03:18,000 --> 00:03:21,480
render are responsible for rendering the

76
00:03:21,480 --> 00:03:23,580
web-based content which means it follows

77
00:03:23,580 --> 00:03:25,620
the Chrome web standards and it is same

78
00:03:25,620 --> 00:03:28,440
as Chrome renderer process and these

79
00:03:28,440 --> 00:03:30,480
main process and the rendered process

80
00:03:30,480 --> 00:03:32,940
are analogous to Chrome browser process

81
00:03:32,940 --> 00:03:34,800
and the main process browser process

82
00:03:34,800 --> 00:03:37,560
under rendered process except the main

83
00:03:37,560 --> 00:03:39,420
process here as JavaScript context

84
00:03:39,420 --> 00:03:41,340
enabled so

85
00:03:41,340 --> 00:03:42,120
um

86
00:03:42,120 --> 00:03:46,019
the node shared Library which is on the

87
00:03:46,019 --> 00:03:50,580
Left Right block uh uh is accessible to

88
00:03:50,580 --> 00:03:54,239
both uh renderer process and the main

89
00:03:54,239 --> 00:03:56,580
process but as it is not safe to

90
00:03:56,580 --> 00:03:58,500
directly expose the node sharing library

91
00:03:58,500 --> 00:04:01,340
to the rendered process because if you

92
00:04:01,340 --> 00:04:03,540
allow node access to the renderer

93
00:04:03,540 --> 00:04:05,940
process we just accesses open the

94
00:04:05,940 --> 00:04:07,379
redirect you can get remote code

95
00:04:07,379 --> 00:04:09,780
execution so it is not safe right so

96
00:04:09,780 --> 00:04:11,760
there are certain web preferences which

97
00:04:11,760 --> 00:04:13,980
are used by the which are in the

98
00:04:13,980 --> 00:04:16,560
electron renderer process to restrict

99
00:04:16,560 --> 00:04:18,298
the access of the node shared Library

100
00:04:18,298 --> 00:04:20,160
we'll be talking about more about this

101
00:04:20,160 --> 00:04:23,040
in the coming slides on the right block

102
00:04:23,040 --> 00:04:26,340
we have the IPC module uh the IPC module

103
00:04:26,340 --> 00:04:27,840
is responsible for the communication

104
00:04:27,840 --> 00:04:30,240
between the main process and the

105
00:04:30,240 --> 00:04:33,660
renderer process so let's see a basic

106
00:04:33,660 --> 00:04:36,060
electron application to better

107
00:04:36,060 --> 00:04:38,759
understand how an electron application

108
00:04:38,759 --> 00:04:41,699
looks on the left block we have the main

109
00:04:41,699 --> 00:04:45,600
process the main process uh starting in

110
00:04:45,600 --> 00:04:48,060
New window new renderer window using

111
00:04:48,060 --> 00:04:50,639
browser window API with some web

112
00:04:50,639 --> 00:04:53,100
preferences and within that window it's

113
00:04:53,100 --> 00:04:56,100
loading google.com URL in it and as I

114
00:04:56,100 --> 00:04:57,960
said there is a communication between

115
00:04:57,960 --> 00:04:59,940
the main process and render of process

116
00:04:59,940 --> 00:05:02,280
right so you need to start an IPC event

117
00:05:02,280 --> 00:05:04,160
listener so here

118
00:05:04,160 --> 00:05:07,860
it started in IPC main dot on open URL

119
00:05:07,860 --> 00:05:10,020
event listener which is expecting an URL

120
00:05:10,020 --> 00:05:12,060
and sending it to Shell dot open

121
00:05:12,060 --> 00:05:15,120
external sync which is a dangerous sync

122
00:05:15,120 --> 00:05:16,440
we'll be seeing more about this in the

123
00:05:16,440 --> 00:05:18,419
coming slides so this is basic main

124
00:05:18,419 --> 00:05:20,940
process it creates a renderer process

125
00:05:20,940 --> 00:05:23,520
with some web preferences so let's first

126
00:05:23,520 --> 00:05:25,800
understand the web preferences the

127
00:05:25,800 --> 00:05:27,840
mainly four web preferences we need to

128
00:05:27,840 --> 00:05:30,539
understand the first one is sandbox then

129
00:05:30,539 --> 00:05:33,120
node integration pre-load and context

130
00:05:33,120 --> 00:05:34,520
isolation

131
00:05:34,520 --> 00:05:38,460
so let's first understand the sandbox

132
00:05:38,460 --> 00:05:40,979
the sandbox web preference as the name

133
00:05:40,979 --> 00:05:43,620
implies sandboxes the renderer process

134
00:05:43,620 --> 00:05:46,380
it it is similar it is same as chrome

135
00:05:46,380 --> 00:05:50,520
chrome sandbox where in Linux uh it is

136
00:05:50,520 --> 00:05:53,580
second and in Windows it is wind 32k

137
00:05:53,580 --> 00:05:57,720
lockdown okay so if the renderer process

138
00:05:57,720 --> 00:06:01,320
is sandboxed uh we can't run a memory

139
00:06:01,320 --> 00:06:03,120
corruption bug and get remote code

140
00:06:03,120 --> 00:06:05,460
execution because the bats is calls will

141
00:06:05,460 --> 00:06:08,039
will be blocked by the second in Linux

142
00:06:08,039 --> 00:06:10,620
and win 32k lockdown in Windows so it's

143
00:06:10,620 --> 00:06:12,000
always good to enable this web

144
00:06:12,000 --> 00:06:13,740
preference and next we have the node

145
00:06:13,740 --> 00:06:16,320
integration uh so it tells if the

146
00:06:16,320 --> 00:06:18,240
renderer process should have access to

147
00:06:18,240 --> 00:06:22,800
the uh node shared library or not and as

148
00:06:22,800 --> 00:06:25,139
I said as it is now saved to directly

149
00:06:25,139 --> 00:06:27,240
expose this node integration to the

150
00:06:27,240 --> 00:06:29,060
renderer process

151
00:06:29,060 --> 00:06:32,100
electron developers introduce something

152
00:06:32,100 --> 00:06:35,039
called context isolation where the

153
00:06:35,039 --> 00:06:37,440
JavaScript context uh with node

154
00:06:37,440 --> 00:06:39,419
Primitives is completely different from

155
00:06:39,419 --> 00:06:42,180
the actual web page JS context you can

156
00:06:42,180 --> 00:06:44,220
see in the slides that the application

157
00:06:44,220 --> 00:06:46,800
webpage JavaScript context is completely

158
00:06:46,800 --> 00:06:48,479
different from the node Primitives and

159
00:06:48,479 --> 00:06:52,380
IPC modules JS context so if you get an

160
00:06:52,380 --> 00:06:53,940
access in that application JavaScript

161
00:06:53,940 --> 00:06:57,240
context it is uh there is no use like

162
00:06:57,240 --> 00:06:58,860
you can just steal cookies but can't

163
00:06:58,860 --> 00:07:01,440
access notes Here reliability so that's

164
00:07:01,440 --> 00:07:03,960
why you we you should always use context

165
00:07:03,960 --> 00:07:06,240
isolation so this is the same concept

166
00:07:06,240 --> 00:07:09,780
used in Chrome extensions where Chrome

167
00:07:09,780 --> 00:07:12,419
extensions ice um content scripts are

168
00:07:12,419 --> 00:07:15,380
isolated from the actual web page and

169
00:07:15,380 --> 00:07:18,060
they call it an isolated wall within

170
00:07:18,060 --> 00:07:19,979
this isolated Vault

171
00:07:19,979 --> 00:07:23,160
um only the extensions JavaScript will

172
00:07:23,160 --> 00:07:25,080
be run and we can't access the

173
00:07:25,080 --> 00:07:26,880
JavaScript context from the web page

174
00:07:26,880 --> 00:07:29,580
JavaScript context So within that

175
00:07:29,580 --> 00:07:32,460
isolated context in the electron the

176
00:07:32,460 --> 00:07:34,979
preload the preload scripts will be run

177
00:07:34,979 --> 00:07:36,780
and

178
00:07:36,780 --> 00:07:39,479
so if the context isolation is enabled

179
00:07:39,479 --> 00:07:41,940
in the renderer process uh it is not

180
00:07:41,940 --> 00:07:44,880
possible to access the node node share

181
00:07:44,880 --> 00:07:47,520
library from the application web page

182
00:07:47,520 --> 00:07:49,620
JavaScript context so let's finish our

183
00:07:49,620 --> 00:07:52,979
finish our uh render uh our electron

184
00:07:52,979 --> 00:07:56,400
application so on the top right block we

185
00:07:56,400 --> 00:07:58,500
have the preload JS as I said the

186
00:07:58,500 --> 00:08:00,840
preloads JS runs in an isolated context

187
00:08:00,840 --> 00:08:03,780
and that isolated context has access to

188
00:08:03,780 --> 00:08:07,080
more sensitive apis such as electron IPC

189
00:08:07,080 --> 00:08:10,979
module and node internals so so we need

190
00:08:10,979 --> 00:08:14,400
some way to expose some apis to the web

191
00:08:14,400 --> 00:08:17,580
page right so there we use context

192
00:08:17,580 --> 00:08:20,340
Bridge API to expose electron dot open

193
00:08:20,340 --> 00:08:23,520
URL to the web page and in the top uh in

194
00:08:23,520 --> 00:08:25,440
and in the bottom right block we have

195
00:08:25,440 --> 00:08:27,720
the web page which is loaded within the

196
00:08:27,720 --> 00:08:30,720
main process so there it is accessing

197
00:08:30,720 --> 00:08:33,059
window dot electron dot open URL and

198
00:08:33,059 --> 00:08:35,419
sending the path of the current

199
00:08:35,419 --> 00:08:38,760
users Galaxy later so it sends to the

200
00:08:38,760 --> 00:08:41,039
preload.js from there the preload.js

201
00:08:41,039 --> 00:08:43,559
uses IPC modules and the to send the

202
00:08:43,559 --> 00:08:45,959
message to the main process so there it

203
00:08:45,959 --> 00:08:48,540
will execute that URL in shell.open

204
00:08:48,540 --> 00:08:50,760
external which means uh it will pop a

205
00:08:50,760 --> 00:08:53,580
calculator because uh it is a dangerous

206
00:08:53,580 --> 00:08:55,620
sink in electron where if you provide

207
00:08:55,620 --> 00:08:58,200
the part of the current directory uh

208
00:08:58,200 --> 00:09:02,660
binary path it will execute that so

209
00:09:02,660 --> 00:09:05,580
the most the least restrictive the web

210
00:09:05,580 --> 00:09:08,519
preferences are the more vulnerable uh

211
00:09:08,519 --> 00:09:10,620
your desktop application will be so you

212
00:09:10,620 --> 00:09:13,140
should always enable sandbox disable

213
00:09:13,140 --> 00:09:15,300
node integration and enable context

214
00:09:15,300 --> 00:09:18,420
isolation as you can see on the slide uh

215
00:09:18,420 --> 00:09:21,300
the the new the browser window is

216
00:09:21,300 --> 00:09:23,640
created with sandbox disabled node

217
00:09:23,640 --> 00:09:25,440
integration is enabled and context

218
00:09:25,440 --> 00:09:27,360
isolation disabled this is the least

219
00:09:27,360 --> 00:09:29,820
restrictive electron application so

220
00:09:29,820 --> 00:09:31,800
exercise in this electron application

221
00:09:31,800 --> 00:09:34,560
will be equal to rc so it is never good

222
00:09:34,560 --> 00:09:38,880
never good to use these web preferences

223
00:09:38,880 --> 00:09:41,279
so throughout this talk this is our

224
00:09:41,279 --> 00:09:44,060
attack surface we are attacking the

225
00:09:44,060 --> 00:09:46,140
renderer processes of the electron

226
00:09:46,140 --> 00:09:47,940
application where our JavaScript will be

227
00:09:47,940 --> 00:09:51,180
run so we'll use xss open redirects deep

228
00:09:51,180 --> 00:09:53,040
link misconfigurations and all to

229
00:09:53,040 --> 00:09:55,260
exploit this rendered process and final

230
00:09:55,260 --> 00:09:57,360
and finally our goal is to get remote

231
00:09:57,360 --> 00:09:59,820
code execution so we are we are going to

232
00:09:59,820 --> 00:10:02,540
start by abusing the least restrictive

233
00:10:02,540 --> 00:10:05,399
electron configurations and then move on

234
00:10:05,399 --> 00:10:09,000
to a complicated exploits so to make

235
00:10:09,000 --> 00:10:12,060
slides neater let's use this

236
00:10:12,060 --> 00:10:13,880
terminologies

237
00:10:13,880 --> 00:10:18,019
okay let's see our first case study so

238
00:10:18,019 --> 00:10:20,700
assume an electron application where

239
00:10:20,700 --> 00:10:23,640
it's using the node web preferences node

240
00:10:23,640 --> 00:10:25,980
integration is true context isolation is

241
00:10:25,980 --> 00:10:29,339
false and sandbox is false which means

242
00:10:29,339 --> 00:10:31,260
it is the least restrictive web

243
00:10:31,260 --> 00:10:33,360
preference which means exercise is equal

244
00:10:33,360 --> 00:10:35,760
to rc and it is a bad electron

245
00:10:35,760 --> 00:10:37,620
application because it is very easy to

246
00:10:37,620 --> 00:10:39,660
get shell as node is exposed in the

247
00:10:39,660 --> 00:10:42,060
renderer and it is not sandboxed so we

248
00:10:42,060 --> 00:10:44,279
just need to find a way to uh embed our

249
00:10:44,279 --> 00:10:47,339
JavaScript is that we don't even need an

250
00:10:47,339 --> 00:10:49,200
exercise there we just need to find a

251
00:10:49,200 --> 00:10:51,300
way to embed our JavaScript and get

252
00:10:51,300 --> 00:10:53,760
remote code execution so this is where

253
00:10:53,760 --> 00:10:55,380
we are in the architecture the red

254
00:10:55,380 --> 00:10:58,440
circle is showing the renderer process

255
00:10:58,440 --> 00:11:00,839
where it is not sandbox and IPC modules

256
00:11:00,839 --> 00:11:02,940
are node share library is directly

257
00:11:02,940 --> 00:11:06,240
available so let's see the first case

258
00:11:06,240 --> 00:11:09,300
study using this web preferences

259
00:11:09,300 --> 00:11:12,060
um so which is vs code RC bypassing

260
00:11:12,060 --> 00:11:14,579
restricted mode with this bug we were

261
00:11:14,579 --> 00:11:15,779
able to

262
00:11:15,779 --> 00:11:18,540
uh achieve remote code execution in vs

263
00:11:18,540 --> 00:11:20,880
code when a victim opens a markdown file

264
00:11:20,880 --> 00:11:23,760
in an uh maliciously crafted vs code

265
00:11:23,760 --> 00:11:26,579
project or a folder even in restricted

266
00:11:26,579 --> 00:11:29,339
mode so the summary of this bug is vs

267
00:11:29,339 --> 00:11:31,560
code allows rendering of markdown files

268
00:11:31,560 --> 00:11:34,500
you know right uh in our iframe with uh

269
00:11:34,500 --> 00:11:37,260
protocol vs code hyphen webview so but

270
00:11:37,260 --> 00:11:39,360
with a strict CSV which means you can't

271
00:11:39,360 --> 00:11:42,180
get the xss and most restrictive web

272
00:11:42,180 --> 00:11:44,700
preferences so uh there are there is

273
00:11:44,700 --> 00:11:46,200
sandbox enabled and node integration is

274
00:11:46,200 --> 00:11:48,899
disabled but the main window of the vs

275
00:11:48,899 --> 00:11:50,940
code which has node integration enabled

276
00:11:50,940 --> 00:11:54,120
uses an interesting protocol uh Handler

277
00:11:54,120 --> 00:11:57,000
named vs code ifn file which works

278
00:11:57,000 --> 00:11:59,519
similar to the Chrome file protocol but

279
00:11:59,519 --> 00:12:02,160
the catch here is the vs code iPhone

280
00:12:02,160 --> 00:12:04,800
file Handler protocol allows the

281
00:12:04,800 --> 00:12:06,959
navigation from the cross origin so the

282
00:12:06,959 --> 00:12:09,839
idea is to if we can find a way to embed

283
00:12:09,839 --> 00:12:13,140
our JavaScript we just need to create an

284
00:12:13,140 --> 00:12:15,420
HTML file in the victim's computer and

285
00:12:15,420 --> 00:12:18,779
navigate we get to that HTML file using

286
00:12:18,779 --> 00:12:21,300
vs code iPhone file protocol and there

287
00:12:21,300 --> 00:12:23,519
we can have access to node integration

288
00:12:23,519 --> 00:12:25,200
and pop the calculator

289
00:12:25,200 --> 00:12:27,660
so this is the complex at action we use

290
00:12:27,660 --> 00:12:30,000
to get remote code execution in vs code

291
00:12:30,000 --> 00:12:32,640
so let's I'll try to unders I'll try to

292
00:12:32,640 --> 00:12:35,640
explain but you can find my blog and

293
00:12:35,640 --> 00:12:37,860
there you can see the full exploit and

294
00:12:37,860 --> 00:12:40,079
write up about it so let's see so

295
00:12:40,079 --> 00:12:43,680
whenever victim opens pawn.md file so it

296
00:12:43,680 --> 00:12:45,180
redirects the

297
00:12:45,180 --> 00:12:48,180
um redirects the victim to attacker site

298
00:12:48,180 --> 00:12:50,160
where our JavaScript will be run in step

299
00:12:50,160 --> 00:12:53,760
two then I forgot to tell you that the

300
00:12:53,760 --> 00:12:56,399
green color window is the most

301
00:12:56,399 --> 00:12:58,920
restrictive web preferences window their

302
00:12:58,920 --> 00:13:00,720
sandbox and is enabled and node

303
00:13:00,720 --> 00:13:02,940
integration is disabled here it is very

304
00:13:02,940 --> 00:13:05,040
hard to get remote code execution but

305
00:13:05,040 --> 00:13:07,740
the window which is in red has node

306
00:13:07,740 --> 00:13:09,420
integration is enabled and sandbox is

307
00:13:09,420 --> 00:13:11,639
disabled there we just need to find an

308
00:13:11,639 --> 00:13:15,920
access and uh use

309
00:13:16,160 --> 00:13:19,620
uh and use uh node modules and get

310
00:13:19,620 --> 00:13:22,040
remote code again so we are in step two

311
00:13:22,040 --> 00:13:25,500
uh in step two we found an interesting

312
00:13:25,500 --> 00:13:28,680
post message misconfiguration where uh

313
00:13:28,680 --> 00:13:30,480
if you send a post message to green

314
00:13:30,480 --> 00:13:33,480
color window it gives a accesses in that

315
00:13:33,480 --> 00:13:35,700
window so it's a nice feature we have in

316
00:13:35,700 --> 00:13:38,880
vs code so using that post message in

317
00:13:38,880 --> 00:13:40,620
three third step we were able to get

318
00:13:40,620 --> 00:13:43,800
access on a low color window from there

319
00:13:43,800 --> 00:13:46,740
we exploited one more post message issue

320
00:13:46,740 --> 00:13:50,339
on vs code red color window to read the

321
00:13:50,339 --> 00:13:52,620
current users directory location so now

322
00:13:52,620 --> 00:13:54,959
we have the leak of the current user

323
00:13:54,959 --> 00:13:57,540
directory location right from using that

324
00:13:57,540 --> 00:14:00,120
user directory location we can just

325
00:14:00,120 --> 00:14:03,180
navigate uh navigate the yellow window

326
00:14:03,180 --> 00:14:04,139
to

327
00:14:04,139 --> 00:14:07,459
a red color window using vs code iPhone

328
00:14:07,459 --> 00:14:10,260
file protocol Handler and there we can

329
00:14:10,260 --> 00:14:13,200
execute the node modules so let's see

330
00:14:13,200 --> 00:14:16,079
the demo of this bug

331
00:14:16,079 --> 00:14:17,839
so

332
00:14:17,839 --> 00:14:21,260
most sorry

333
00:14:22,560 --> 00:14:25,560
so victim opened a vs code I uh markdown

334
00:14:25,560 --> 00:14:27,120
file it rendered and popped the

335
00:14:27,120 --> 00:14:30,720
calculator so that's a nice bug uh which

336
00:14:30,720 --> 00:14:32,820
uses a least restrictive web preferences

337
00:14:32,820 --> 00:14:34,920
right so let's increase the

338
00:14:34,920 --> 00:14:37,860
restrictedness a little bit more

339
00:14:37,860 --> 00:14:40,260
um now that the now assume that the

340
00:14:40,260 --> 00:14:42,600
context isolation is enabled which means

341
00:14:42,600 --> 00:14:44,579
we can't directly access the node

342
00:14:44,579 --> 00:14:48,300
modules so in the previous work we used

343
00:14:48,300 --> 00:14:50,940
node module required child process and

344
00:14:50,940 --> 00:14:52,019
call

345
00:14:52,019 --> 00:14:55,199
um call get access to system calls right

346
00:14:55,199 --> 00:14:57,120
now we can't do that because context

347
00:14:57,120 --> 00:15:00,000
isolation is enable uh as the context

348
00:15:00,000 --> 00:15:01,740
isolation is enabled we can't access

349
00:15:01,740 --> 00:15:04,740
node module so there are two ways to

350
00:15:04,740 --> 00:15:07,139
exploit this bug we can either use a

351
00:15:07,139 --> 00:15:09,420
renderer exploit which means we use a V8

352
00:15:09,420 --> 00:15:11,279
exploit to get remote code execution

353
00:15:11,279 --> 00:15:15,360
because the sandbox is disabled and or

354
00:15:15,360 --> 00:15:18,300
we need to somehow find a bug which is

355
00:15:18,300 --> 00:15:21,240
not available which is disabling context

356
00:15:21,240 --> 00:15:24,899
isolation somehow so let's see how we

357
00:15:24,899 --> 00:15:26,760
can exploit this and this is where we

358
00:15:26,760 --> 00:15:28,920
are in the architecture as you can see

359
00:15:28,920 --> 00:15:31,800
the application JavaScript context is

360
00:15:31,800 --> 00:15:33,899
different from the node Primitives IPC

361
00:15:33,899 --> 00:15:36,240
Primitives isolated context which means

362
00:15:36,240 --> 00:15:38,279
we have even if you have accesses in

363
00:15:38,279 --> 00:15:40,680
application JavaScript context we can't

364
00:15:40,680 --> 00:15:43,260
access node modules but the catch here

365
00:15:43,260 --> 00:15:45,959
is it runs in non-sandbox renderer which

366
00:15:45,959 --> 00:15:48,060
means we can use a memory corruption bug

367
00:15:48,060 --> 00:15:51,540
to run a V8 exploit and get a remote

368
00:15:51,540 --> 00:15:54,180
code execution so let's see the case

369
00:15:54,180 --> 00:15:58,800
study too which uses uh the Discord the

370
00:15:58,800 --> 00:16:00,240
Discord is using the same web

371
00:16:00,240 --> 00:16:02,339
preferences where node integration is

372
00:16:02,339 --> 00:16:04,380
disabled context isolation is enabled

373
00:16:04,380 --> 00:16:06,779
but the sandbox is disabled on the main

374
00:16:06,779 --> 00:16:08,820
window which means we just need to find

375
00:16:08,820 --> 00:16:11,339
a way to embed our JavaScript and run

376
00:16:11,339 --> 00:16:13,019
the V8 exploit there and pop the

377
00:16:13,019 --> 00:16:16,620
calculator so at the time it was using

378
00:16:16,620 --> 00:16:18,959
electron 12.4.1 which means it's

379
00:16:18,959 --> 00:16:20,880
indirectly using an old version of

380
00:16:20,880 --> 00:16:23,339
Chrome and Chrome usually has a lot of

381
00:16:23,339 --> 00:16:27,899
V8 exploits GTX rights V8 uh so we found

382
00:16:27,899 --> 00:16:29,880
an exercise in one of the iframe members

383
00:16:29,880 --> 00:16:33,000
but the thing in uh electron

384
00:16:33,000 --> 00:16:35,100
applications is the iframes are usually

385
00:16:35,100 --> 00:16:37,500
sandboxed which means we can't run the

386
00:16:37,500 --> 00:16:40,920
V8 exploit and pop the calculator but uh

387
00:16:40,920 --> 00:16:43,019
we found an um

388
00:16:43,019 --> 00:16:44,699
we found an electron new window

389
00:16:44,699 --> 00:16:47,699
misconfiguration using the new windows

390
00:16:47,699 --> 00:16:50,339
configuration we opened a new window so

391
00:16:50,339 --> 00:16:52,279
we are escaping that from the new window

392
00:16:52,279 --> 00:16:56,360
and the and navigating that window to

393
00:16:56,360 --> 00:16:59,519
exploit our exploit so there we don't

394
00:16:59,519 --> 00:17:02,339
have sandbox enabled so with there we

395
00:17:02,339 --> 00:17:04,140
can just run V8 exploit and pop the

396
00:17:04,140 --> 00:17:06,599
calculator let's see the case study I

397
00:17:06,599 --> 00:17:09,660
mean demo of this bug so as you can see

398
00:17:09,660 --> 00:17:13,679
on the slide video I'm pasting a link

399
00:17:13,679 --> 00:17:15,959
and it's rendering a video and whenever

400
00:17:15,959 --> 00:17:18,839
a victim clicks on that link uh it

401
00:17:18,839 --> 00:17:20,280
creates a new window

402
00:17:20,280 --> 00:17:23,579
and in that window the Viet exploit runs

403
00:17:23,579 --> 00:17:25,559
and Pops the calculator

404
00:17:25,559 --> 00:17:29,400
so that's the Discord RC uh that's fine

405
00:17:29,400 --> 00:17:32,220
and Discord paid us five thousand dollar

406
00:17:32,220 --> 00:17:35,700
Bounty even for that uh nice exploit

407
00:17:35,700 --> 00:17:38,400
it's if you sell that exploit you will

408
00:17:38,400 --> 00:17:41,820
get a lot more than that uh uh this card

409
00:17:41,820 --> 00:17:44,280
fixed it by using uh by fixing the new

410
00:17:44,280 --> 00:17:46,740
window misconfiguration and they

411
00:17:46,740 --> 00:17:48,960
upgraded the electron version

412
00:17:48,960 --> 00:17:51,660
um so that's fun right let's increase

413
00:17:51,660 --> 00:17:53,580
the restrictiveness a little bit more

414
00:17:53,580 --> 00:17:57,120
now the sandbox is enabled which means

415
00:17:57,120 --> 00:17:59,940
uh even with the JavaScript execution we

416
00:17:59,940 --> 00:18:02,100
can't run a V8 exploit and pop the

417
00:18:02,100 --> 00:18:04,799
calculator because it is sandboxed by

418
00:18:04,799 --> 00:18:07,320
second in Linux and winter ddk lockdown

419
00:18:07,320 --> 00:18:09,720
in Windows so we can't access bats is

420
00:18:09,720 --> 00:18:13,020
calls like open right exec CV so we

421
00:18:13,020 --> 00:18:15,059
can't pop any calculator with that so

422
00:18:15,059 --> 00:18:18,240
and also uh the node modules are not

423
00:18:18,240 --> 00:18:19,860
exposed in the renderer

424
00:18:19,860 --> 00:18:23,100
and but as you can see the context

425
00:18:23,100 --> 00:18:25,740
isolation is disabled here so can we use

426
00:18:25,740 --> 00:18:28,500
that context isolation disabled window

427
00:18:28,500 --> 00:18:31,320
and leak electron internal modules such

428
00:18:31,320 --> 00:18:34,620
as IPC and using that IPC even though

429
00:18:34,620 --> 00:18:36,840
our renderer process is sandboxed can we

430
00:18:36,840 --> 00:18:39,120
make the main process to do bad stuff

431
00:18:39,120 --> 00:18:42,240
for us let's see so this is where we are

432
00:18:42,240 --> 00:18:44,340
in the architecture the the whole

433
00:18:44,340 --> 00:18:46,860
application JavaScript context preload

434
00:18:46,860 --> 00:18:48,900
JavaScript and electron internal code

435
00:18:48,900 --> 00:18:51,240
all running in single JavaScript via

436
00:18:51,240 --> 00:18:53,580
JavaScript context which means we can

437
00:18:53,580 --> 00:18:55,919
mess up electron internal code and leak

438
00:18:55,919 --> 00:18:58,740
IPC modules and other modules from the

439
00:18:58,740 --> 00:19:02,280
renderer process so let's see the ways

440
00:19:02,280 --> 00:19:04,620
to get shell in this rendered process

441
00:19:04,620 --> 00:19:08,220
from electron version less than 10 there

442
00:19:08,220 --> 00:19:10,080
is this module called remote module

443
00:19:10,080 --> 00:19:13,679
where from the renderer process if you

444
00:19:13,679 --> 00:19:15,720
send a JavaScript to the main process it

445
00:19:15,720 --> 00:19:17,700
will execute the main process it will

446
00:19:17,700 --> 00:19:20,220
execute the JavaScript there it means

447
00:19:20,220 --> 00:19:23,039
you can just send a node node.js and it

448
00:19:23,039 --> 00:19:25,140
will execute there I don't know why they

449
00:19:25,140 --> 00:19:29,400
developed this remote module but uh

450
00:19:29,400 --> 00:19:32,160
so it's like it's like a Sandbox bypass

451
00:19:32,160 --> 00:19:34,260
right we are sending a JavaScript to the

452
00:19:34,260 --> 00:19:36,419
main process and the main process is

453
00:19:36,419 --> 00:19:39,299
executing uh your node.js in a

454
00:19:39,299 --> 00:19:41,400
non-sandbox renderer process where node

455
00:19:41,400 --> 00:19:44,640
is available so they obviously thought

456
00:19:44,640 --> 00:19:46,919
it's not really good to have this remote

457
00:19:46,919 --> 00:19:50,160
module and their

458
00:19:50,160 --> 00:19:53,100
they put it behind an uh flag which

459
00:19:53,100 --> 00:19:55,140
means the electron developer has to

460
00:19:55,140 --> 00:19:59,400
explicitly enable it uh so if the the if

461
00:19:59,400 --> 00:20:01,080
the application explicitly enables it

462
00:20:01,080 --> 00:20:02,640
you can use this remote module to pop

463
00:20:02,640 --> 00:20:05,460
the calculator or you can use in miscon

464
00:20:05,460 --> 00:20:07,980
IPC misconfiguration which is similar to

465
00:20:07,980 --> 00:20:10,200
the remote module and I'll be talking

466
00:20:10,200 --> 00:20:12,000
more about this in the coming slides uh

467
00:20:12,000 --> 00:20:14,220
by showing an exploit and Microsoft

468
00:20:14,220 --> 00:20:16,200
teams so

469
00:20:16,200 --> 00:20:18,720
now the latest electron versions is

470
00:20:18,720 --> 00:20:20,460
completely remove the remote module

471
00:20:20,460 --> 00:20:22,380
which means we can't use the remote

472
00:20:22,380 --> 00:20:24,780
module at all because it is not safe at

473
00:20:24,780 --> 00:20:27,840
all so uh They removed it completely so

474
00:20:27,840 --> 00:20:29,940
here the ways to get the remote code

475
00:20:29,940 --> 00:20:32,880
execution is uh find the electron

476
00:20:32,880 --> 00:20:36,799
specific IPC misconfigurations are

477
00:20:36,799 --> 00:20:38,820
application specific IPC

478
00:20:38,820 --> 00:20:42,059
misconfiguration so we need to uh even

479
00:20:42,059 --> 00:20:44,460
with the context isolation disabled we

480
00:20:44,460 --> 00:20:46,020
need to somehow mess up with the

481
00:20:46,020 --> 00:20:49,140
electron internal code and leak the IPC

482
00:20:49,140 --> 00:20:52,440
module so this is the gadget we used we

483
00:20:52,440 --> 00:20:56,160
used to leak the IPC module this is this

484
00:20:56,160 --> 00:20:58,620
kind of attack was first introduced by

485
00:20:58,620 --> 00:21:00,140
my colleague

486
00:21:00,140 --> 00:21:02,880
so he was the one who found the context

487
00:21:02,880 --> 00:21:05,700
isolation he was the one who who is

488
00:21:05,700 --> 00:21:07,260
responsible for electron developing

489
00:21:07,260 --> 00:21:11,640
context isolation and so using this

490
00:21:11,640 --> 00:21:13,799
prototype position Gadget we can mess up

491
00:21:13,799 --> 00:21:15,600
with electron internal code and leak the

492
00:21:15,600 --> 00:21:18,840
IPC so with that leaked IPC what we can

493
00:21:18,840 --> 00:21:21,840
do is so here you can see we are leaking

494
00:21:21,840 --> 00:21:25,200
the webpack required and and we can uh

495
00:21:25,200 --> 00:21:27,900
call we can get access to all the

496
00:21:27,900 --> 00:21:30,240
electron internal modules uh you can

497
00:21:30,240 --> 00:21:32,220
find more about this in my blog this is

498
00:21:32,220 --> 00:21:34,200
little complicated to understand on the

499
00:21:34,200 --> 00:21:37,620
slides but uh if you can debug and see

500
00:21:37,620 --> 00:21:39,480
in the electron you can understand the

501
00:21:39,480 --> 00:21:41,400
Prototype pollution Gadget it's just

502
00:21:41,400 --> 00:21:42,659
messing up with the electron internal

503
00:21:42,659 --> 00:21:45,240
code and leaking the IPC module which is

504
00:21:45,240 --> 00:21:47,460
useful for us to talk to the main

505
00:21:47,460 --> 00:21:49,080
process directly

506
00:21:49,080 --> 00:21:51,960
so let's see our case study three local

507
00:21:51,960 --> 00:21:54,600
file read in Microsoft teams so it was

508
00:21:54,600 --> 00:21:57,059
using the latest version of electron uh

509
00:21:57,059 --> 00:22:00,679
which is electron less than 5 15 there

510
00:22:00,679 --> 00:22:03,299
the remote module is completely removed

511
00:22:03,299 --> 00:22:04,980
so we can't use remote module to get

512
00:22:04,980 --> 00:22:07,260
remote code execution

513
00:22:07,260 --> 00:22:10,080
um and that's we've uh we need to

514
00:22:10,080 --> 00:22:11,640
somehow we need to find an access is

515
00:22:11,640 --> 00:22:14,460
right we found an access in uh one of

516
00:22:14,460 --> 00:22:16,559
the renderer where if you send a message

517
00:22:16,559 --> 00:22:18,900
to the victim uh you can pop the

518
00:22:18,900 --> 00:22:21,480
exercise there so we found an Odin CK

519
00:22:21,480 --> 00:22:25,080
editor this is the CV further so the the

520
00:22:25,080 --> 00:22:27,960
exercises where we are in uh has node

521
00:22:27,960 --> 00:22:30,240
integration disabled sandbox is enabled

522
00:22:30,240 --> 00:22:32,640
but the context isolation is disabled

523
00:22:32,640 --> 00:22:34,799
which means you can use the Prototype

524
00:22:34,799 --> 00:22:37,860
pollution Gadget to leak the IPC using

525
00:22:37,860 --> 00:22:40,559
the xss and send an IPC to the browser

526
00:22:40,559 --> 00:22:43,200
process which can read the file path

527
00:22:43,200 --> 00:22:45,840
which can read the file in the local

528
00:22:45,840 --> 00:22:48,900
victims computer so there is this

529
00:22:48,900 --> 00:22:51,179
electron internal IPC misconfiguration

530
00:22:51,179 --> 00:22:53,520
where the main process is listening for

531
00:22:53,520 --> 00:22:55,740
electron native image create thumbnail

532
00:22:55,740 --> 00:22:58,260
from path so if you send this IPC

533
00:22:58,260 --> 00:23:00,900
message to the renderer process with a

534
00:23:00,900 --> 00:23:03,360
path to the file you want to read it

535
00:23:03,360 --> 00:23:05,100
will read that file and send it back to

536
00:23:05,100 --> 00:23:07,200
you how fun it is like it's a Sandbox

537
00:23:07,200 --> 00:23:10,860
bypass right so this is the demo for

538
00:23:10,860 --> 00:23:13,280
that bug

539
00:23:13,740 --> 00:23:16,500
when when we paste the message to the

540
00:23:16,500 --> 00:23:18,539
victim like when you send a message to

541
00:23:18,539 --> 00:23:21,539
the victim uh chart it will open a new

542
00:23:21,539 --> 00:23:25,020
window and leak the JW to jwtd token of

543
00:23:25,020 --> 00:23:28,020
uh victims Microsoft teams and you can

544
00:23:28,020 --> 00:23:30,320
do account takeover

545
00:23:30,320 --> 00:23:31,980
so

546
00:23:31,980 --> 00:23:34,620
this is fun and Microsoft paid three

547
00:23:34,620 --> 00:23:37,620
thousand dollar Bounty for this and uh

548
00:23:37,620 --> 00:23:41,280
let's increase the restrictiveness more

549
00:23:41,280 --> 00:23:42,840
let's increase the restricting

550
00:23:42,840 --> 00:23:45,360
restrictiveness to the most which means

551
00:23:45,360 --> 00:23:47,520
we disable the node integration the

552
00:23:47,520 --> 00:23:49,980
enable the context to isolation and

553
00:23:49,980 --> 00:23:54,240
sandbox the uh sandbox the window which

554
00:23:54,240 --> 00:23:55,280
means

555
00:23:55,280 --> 00:23:58,080
uh this is the most restrictive web

556
00:23:58,080 --> 00:24:00,840
preferences in electron and it is very

557
00:24:00,840 --> 00:24:02,580
hard to get remote code execution here

558
00:24:02,580 --> 00:24:04,440
uh because it's sandbox Honda

559
00:24:04,440 --> 00:24:06,960
civilization is enabled I do not and

560
00:24:06,960 --> 00:24:09,419
node integration is enabled disabled so

561
00:24:09,419 --> 00:24:10,799
this is where we are in the architecture

562
00:24:10,799 --> 00:24:14,520
so uh as you can see the the process is

563
00:24:14,520 --> 00:24:17,100
sandbox there is an isolated context and

564
00:24:17,100 --> 00:24:20,580
stuff so is it like access exercise in a

565
00:24:20,580 --> 00:24:21,780
browser

566
00:24:21,780 --> 00:24:24,539
so in Access the if the if you have

567
00:24:24,539 --> 00:24:26,460
access in a browser you can just steal

568
00:24:26,460 --> 00:24:29,039
cookies or do some csrf and stuff right

569
00:24:29,039 --> 00:24:32,340
but uh in electronics the scene is

570
00:24:32,340 --> 00:24:34,679
different electron is bit different from

571
00:24:34,679 --> 00:24:37,559
the Chrome uh as it com as it is a

572
00:24:37,559 --> 00:24:39,480
combination of framework layer code and

573
00:24:39,480 --> 00:24:41,640
browser code right so you can mess up

574
00:24:41,640 --> 00:24:44,520
with the electron uh electron added code

575
00:24:44,520 --> 00:24:47,940
and get uh and get to do some stuff and

576
00:24:47,940 --> 00:24:49,980
we'll see those in the coming slide and

577
00:24:49,980 --> 00:24:54,059
this is where our actual Talk starts uh

578
00:24:54,059 --> 00:24:55,679
so let's

579
00:24:55,679 --> 00:24:57,840
um see our first case study uh we

580
00:24:57,840 --> 00:25:00,840
reported to the electron foundation and

581
00:25:00,840 --> 00:25:03,419
they fixed the bug and gave us this CBE

582
00:25:03,419 --> 00:25:05,820
which is enabling node integration and

583
00:25:05,820 --> 00:25:08,100
subframes from compromise render so

584
00:25:08,100 --> 00:25:09,720
let's first understand what is node

585
00:25:09,720 --> 00:25:11,700
integration and subframes usually in

586
00:25:11,700 --> 00:25:13,919
electron applications the iframes don't

587
00:25:13,919 --> 00:25:17,100
have access to node share library or

588
00:25:17,100 --> 00:25:19,620
preload scripts which means

589
00:25:19,620 --> 00:25:21,299
um you can't have access to node share

590
00:25:21,299 --> 00:25:23,580
library in iframes so they introduced

591
00:25:23,580 --> 00:25:27,000
this experimental option where enabling

592
00:25:27,000 --> 00:25:28,980
this node integration in subframes web

593
00:25:28,980 --> 00:25:31,320
preferences you can enable node.js or

594
00:25:31,320 --> 00:25:33,600
pre-load skits in subframes such as

595
00:25:33,600 --> 00:25:36,200
iframes and child windows so for every

596
00:25:36,200 --> 00:25:38,700
subframe if node integration is enabled

597
00:25:38,700 --> 00:25:40,620
and sandbox is disabled then both

598
00:25:40,620 --> 00:25:43,440
reloads and node.js will be available if

599
00:25:43,440 --> 00:25:45,480
our integration is disabled and sandbox

600
00:25:45,480 --> 00:25:47,520
is disabled are enabled then all

601
00:25:47,520 --> 00:25:50,279
preloads will be loaded but node

602
00:25:50,279 --> 00:25:51,720
integration will not be available later

603
00:25:51,720 --> 00:25:54,659
so let's see a basic example as we saw

604
00:25:54,659 --> 00:25:58,679
in the first slide so in the right block

605
00:25:58,679 --> 00:26:00,960
we have a main process where it's using

606
00:26:00,960 --> 00:26:02,640
and web preferences node integration and

607
00:26:02,640 --> 00:26:05,520
subframes to false and it started an IPC

608
00:26:05,520 --> 00:26:08,100
event listener as is as I said using the

609
00:26:08,100 --> 00:26:10,580
preload script you can expose that uh

610
00:26:10,580 --> 00:26:14,640
IPC open URL to the main page and in the

611
00:26:14,640 --> 00:26:17,460
google.com base it's it can it can be

612
00:26:17,460 --> 00:26:19,559
able to access window.org electron dot

613
00:26:19,559 --> 00:26:22,260
open URL which is exposed by the preload

614
00:26:22,260 --> 00:26:25,080
script but it also loaded an iframe

615
00:26:25,080 --> 00:26:29,100
which is pawn.af but this iframe contact

616
00:26:29,100 --> 00:26:30,980
access to

617
00:26:30,980 --> 00:26:32,700
window.electron.openurl because node

618
00:26:32,700 --> 00:26:35,100
integration in subframes is set to false

619
00:26:35,100 --> 00:26:37,799
what you can do is if you set this uh

620
00:26:37,799 --> 00:26:40,799
web preferences to true you can expose

621
00:26:40,799 --> 00:26:41,900
the

622
00:26:41,900 --> 00:26:44,580
window.electron.openurl to the iframe

623
00:26:44,580 --> 00:26:46,980
and iframe can access to preload scripts

624
00:26:46,980 --> 00:26:48,659
so why we need this why we are talking

625
00:26:48,659 --> 00:26:50,279
about this node integration subference

626
00:26:50,279 --> 00:26:52,559
of preference now most of the time we

627
00:26:52,559 --> 00:26:54,840
get an access in an iframe as you can

628
00:26:54,840 --> 00:26:57,720
see in the first Discord RC exploit we

629
00:26:57,720 --> 00:27:00,480
got an access in a video embed which

630
00:27:00,480 --> 00:27:03,120
runs in iframe even in Microsoft teams

631
00:27:03,120 --> 00:27:05,880
we got an exercise in uh in an iframe

632
00:27:05,880 --> 00:27:08,279
and also vs code which is an iframe too

633
00:27:08,279 --> 00:27:10,140
so most of the time we get an exercise

634
00:27:10,140 --> 00:27:12,299
in iframe and we don't have access to

635
00:27:12,299 --> 00:27:14,640
much of the stuff like preload scripts

636
00:27:14,640 --> 00:27:17,700
uh electron internal apis and stuff

637
00:27:17,700 --> 00:27:20,760
so how did uh how electron implemented

638
00:27:20,760 --> 00:27:23,700
this setting is they patch the Chrome

639
00:27:23,700 --> 00:27:25,799
blink web preferences and they added

640
00:27:25,799 --> 00:27:28,260
these settings as you can see they added

641
00:27:28,260 --> 00:27:30,000
node integration subframes by default

642
00:27:30,000 --> 00:27:32,159
it's set to false to the web preferences

643
00:27:32,159 --> 00:27:34,279
blink web preferences

644
00:27:34,279 --> 00:27:37,200
object so there they also added node

645
00:27:37,200 --> 00:27:40,140
integration in workers webview tag and

646
00:27:40,140 --> 00:27:42,539
preload scripts and all stuff they added

647
00:27:42,539 --> 00:27:43,860
this there

648
00:27:43,860 --> 00:27:47,220
and the check is done on slash level

649
00:27:47,220 --> 00:27:49,799
slash renderer slash electrons sandbox

650
00:27:49,799 --> 00:27:52,679
renderer client.cc and they and they are

651
00:27:52,679 --> 00:27:54,900
fetching the web preferences and

652
00:27:54,900 --> 00:27:56,400
checking if the node integration is

653
00:27:56,400 --> 00:27:59,279
enabled or not if you are if you if you

654
00:27:59,279 --> 00:28:01,320
carefully check the check is taking

655
00:28:01,320 --> 00:28:03,659
place in the renderer process which

656
00:28:03,659 --> 00:28:07,200
means using a V8 exploit you find the

657
00:28:07,200 --> 00:28:09,659
offsets to this web blink preferences

658
00:28:09,659 --> 00:28:13,020
and there you um you overwrite the web

659
00:28:13,020 --> 00:28:15,120
preferences and get access to node

660
00:28:15,120 --> 00:28:17,640
modules let's see how we can do that so

661
00:28:17,640 --> 00:28:20,520
so if you notice that we the the process

662
00:28:20,520 --> 00:28:22,620
is running in uh the check is running in

663
00:28:22,620 --> 00:28:24,600
and render process right so we're just

664
00:28:24,600 --> 00:28:26,940
using renderer exploit to set the node

665
00:28:26,940 --> 00:28:29,279
integration to one so this is the

666
00:28:29,279 --> 00:28:32,460
exploit we used so after the jit exploit

667
00:28:32,460 --> 00:28:33,659
we have

668
00:28:33,659 --> 00:28:36,659
after the jit exploit we have uh we get

669
00:28:36,659 --> 00:28:39,600
arbitrary read and arbitrary right and

670
00:28:39,600 --> 00:28:41,820
using that arbitrary read we find the

671
00:28:41,820 --> 00:28:44,220
offsets to web preference and then there

672
00:28:44,220 --> 00:28:45,840
we find the offset to node integration

673
00:28:45,840 --> 00:28:48,480
in subframes and we override that node

674
00:28:48,480 --> 00:28:50,340
integration we are just flipping the bit

675
00:28:50,340 --> 00:28:53,640
to one so we set to 1 and overwrite that

676
00:28:53,640 --> 00:28:56,520
and Bam like we got access to node

677
00:28:56,520 --> 00:28:58,679
integration so

678
00:28:58,679 --> 00:29:00,960
uh let's see the case study of this bug

679
00:29:00,960 --> 00:29:03,840
use uh how many of you use element here

680
00:29:03,840 --> 00:29:07,860
uh it's also like slack but

681
00:29:07,860 --> 00:29:10,500
um it's more secure they say uh so it's

682
00:29:10,500 --> 00:29:14,100
using a chrome version 91 which means

683
00:29:14,100 --> 00:29:18,179
um a quite old there and as if if the

684
00:29:18,179 --> 00:29:21,120
Chrome machine is two versions old

685
00:29:21,120 --> 00:29:24,059
um you can get a Jeep exploit uh if you

686
00:29:24,059 --> 00:29:26,640
are good enough to read the commits and

687
00:29:26,640 --> 00:29:30,480
uh reverse the exploit so there is we

688
00:29:30,480 --> 00:29:32,220
found an exercise on one of the embed

689
00:29:32,220 --> 00:29:34,919
using deep link misconfiguration but uh

690
00:29:34,919 --> 00:29:37,020
the context bridge is not enabled

691
00:29:37,020 --> 00:29:40,020
because as it we are in the iframe we

692
00:29:40,020 --> 00:29:42,120
can't access to we can't get access to

693
00:29:42,120 --> 00:29:44,460
preload scripts right so we run the V8

694
00:29:44,460 --> 00:29:47,580
exploit to expose contest Bridge API on

695
00:29:47,580 --> 00:29:50,760
the embed and access uh sensitive stuff

696
00:29:50,760 --> 00:29:52,980
this is how the electro uh element

697
00:29:52,980 --> 00:29:55,980
application is it uh on the right block

698
00:29:55,980 --> 00:29:58,440
we have the main process which started

699
00:29:58,440 --> 00:30:00,120
an event listener on the main process

700
00:30:00,120 --> 00:30:03,360
and it is uh sending the path of that uh

701
00:30:03,360 --> 00:30:06,600
uh path to Shell dot open path which is

702
00:30:06,600 --> 00:30:08,220
a dangerous sink if you send a location

703
00:30:08,220 --> 00:30:10,440
of the binary it will execute that so

704
00:30:10,440 --> 00:30:13,500
they started an event listener but our

705
00:30:13,500 --> 00:30:15,899
iframe won't have access to it so this

706
00:30:15,899 --> 00:30:18,659
is the main.js we have our rcd sync and

707
00:30:18,659 --> 00:30:21,360
the preload.js is exposing that

708
00:30:21,360 --> 00:30:22,080
um

709
00:30:22,080 --> 00:30:24,720
a pillow JS has access to IPC right so

710
00:30:24,720 --> 00:30:26,460
it can send a message to main process

711
00:30:26,460 --> 00:30:30,720
but and also cut it exposed context

712
00:30:30,720 --> 00:30:32,460
bridge to the main window

713
00:30:32,460 --> 00:30:33,779
also

714
00:30:33,779 --> 00:30:36,539
the iframe we are in the iframe where we

715
00:30:36,539 --> 00:30:38,700
have access axises we can't access that

716
00:30:38,700 --> 00:30:40,620
window dot electron dot send because

717
00:30:40,620 --> 00:30:42,899
node integration in subframes is set to

718
00:30:42,899 --> 00:30:45,899
false so what you do you run a V8

719
00:30:45,899 --> 00:30:50,159
exploit create an iframe uh uh it sets

720
00:30:50,159 --> 00:30:52,080
the node integration subframes to one

721
00:30:52,080 --> 00:30:55,440
and creates an iframe and there we can

722
00:30:55,440 --> 00:30:58,320
access the window dot electron dot send

723
00:30:58,320 --> 00:31:01,020
this is the exploit we used so as you

724
00:31:01,020 --> 00:31:02,820
can see we are finding the offsets to

725
00:31:02,820 --> 00:31:04,500
node integration subframes we are

726
00:31:04,500 --> 00:31:06,659
flipping the bit and then creating an

727
00:31:06,659 --> 00:31:09,240
iframe and accessing electron dots and

728
00:31:09,240 --> 00:31:11,340
user download mpen within a calculator

729
00:31:11,340 --> 00:31:14,360
path so it pops the calculator

730
00:31:14,360 --> 00:31:18,360
so let's say the demo of it

731
00:31:18,360 --> 00:31:21,299
so whenever a victim clicks on link it

732
00:31:21,299 --> 00:31:24,899
asks it opens up in a element window

733
00:31:24,899 --> 00:31:27,299
and if he's on the conference it runs

734
00:31:27,299 --> 00:31:29,580
away at exploit and changes the offsets

735
00:31:29,580 --> 00:31:31,020
and flips the bit

736
00:31:31,020 --> 00:31:35,480
uh and can pop the calculator

737
00:31:40,039 --> 00:31:42,840
well it's still running the exploit

738
00:31:42,840 --> 00:31:45,720
so it runs the exploit and popsically so

739
00:31:45,720 --> 00:31:48,360
this is the final part of her talk let's

740
00:31:48,360 --> 00:31:51,480
increase the restricted let's let's see

741
00:31:51,480 --> 00:31:54,779
one more case study now can we disable

742
00:31:54,779 --> 00:31:56,279
context isolation

743
00:31:56,279 --> 00:31:59,460
uh let's see so they similarly same case

744
00:31:59,460 --> 00:32:01,860
they pass the web blink web preferences

745
00:32:01,860 --> 00:32:04,320
and add this context isolation and by

746
00:32:04,320 --> 00:32:06,179
default they set to false what you can

747
00:32:06,179 --> 00:32:07,860
do the check is taking place on the

748
00:32:07,860 --> 00:32:10,200
render process so they're checking if

749
00:32:10,200 --> 00:32:12,000
they should create an isolate contest or

750
00:32:12,000 --> 00:32:14,700
not so if you can disable if you can

751
00:32:14,700 --> 00:32:16,740
flip this bit you can just enable the

752
00:32:16,740 --> 00:32:19,500
context isolation so same story you use

753
00:32:19,500 --> 00:32:21,240
a V8 exploit and set the context

754
00:32:21,240 --> 00:32:24,840
isolation to false you find the offsets

755
00:32:24,840 --> 00:32:27,960
uh flip it and pop the calculator so

756
00:32:27,960 --> 00:32:30,240
this is an RC in a non-disclosed app uh

757
00:32:30,240 --> 00:32:31,919
they didn't allow us to disclose and

758
00:32:31,919 --> 00:32:34,200
they played in they paid an Hefty bounty

759
00:32:34,200 --> 00:32:38,580
to not disclose this bug to public so in

760
00:32:38,580 --> 00:32:39,960
the main process on the right block we

761
00:32:39,960 --> 00:32:42,480
have a open external IPC event listener

762
00:32:42,480 --> 00:32:45,059
which is sending uh URL to dangerous

763
00:32:45,059 --> 00:32:49,200
sync of electron so this is the uh

764
00:32:49,200 --> 00:32:51,240
exploit scenario we have the main.js

765
00:32:51,240 --> 00:32:54,600
where we have an RC sync and preload JS

766
00:32:54,600 --> 00:32:56,580
can access this but and also the main

767
00:32:56,580 --> 00:32:58,559
window website but our accesses can't

768
00:32:58,559 --> 00:33:01,740
access this which means we use node

769
00:33:01,740 --> 00:33:05,220
integration subframes Expo 0 to 1 and

770
00:33:05,220 --> 00:33:07,980
no we can't access because now we don't

771
00:33:07,980 --> 00:33:11,340
even uh uh sorry sorry I forgot to tell

772
00:33:11,340 --> 00:33:13,380
something here uh

773
00:33:13,380 --> 00:33:15,720
in in the preload scripts they are

774
00:33:15,720 --> 00:33:18,480
checking if the URL should be HTTP or

775
00:33:18,480 --> 00:33:21,120
not so if you send an URL with file

776
00:33:21,120 --> 00:33:23,460
protocol it won't allow us to open it so

777
00:33:23,460 --> 00:33:25,620
we can't use the previous node

778
00:33:25,620 --> 00:33:27,779
integration in subframes exploit so what

779
00:33:27,779 --> 00:33:30,899
you use you use the stage one V8 exploit

780
00:33:30,899 --> 00:33:33,299
to enable context disable context

781
00:33:33,299 --> 00:33:37,140
isolation and we we redirect to

782
00:33:37,140 --> 00:33:40,380
prototype pollution Gadget window and

783
00:33:40,380 --> 00:33:42,240
there it can leak the IPC and directly

784
00:33:42,240 --> 00:33:43,679
access the main process

785
00:33:43,679 --> 00:33:45,840
so we are just sending we are not going

786
00:33:45,840 --> 00:33:47,399
through main window website preload

787
00:33:47,399 --> 00:33:49,080
script and node.js we are directly

788
00:33:49,080 --> 00:33:50,640
sending the IPC to the main process

789
00:33:50,640 --> 00:33:52,919
because we are able to leak the IPC

790
00:33:52,919 --> 00:33:54,299
directly

791
00:33:54,299 --> 00:33:56,700
uh so this is the exploit

792
00:33:56,700 --> 00:34:00,840
similar story and let's see the demo

793
00:34:00,840 --> 00:34:02,940
so it's trying to find the offsets of

794
00:34:02,940 --> 00:34:04,380
that web preferences

795
00:34:04,380 --> 00:34:06,960
and

796
00:34:06,960 --> 00:34:08,699
after finding the offsets it will

797
00:34:08,699 --> 00:34:10,940
override the context isolation

798
00:34:10,940 --> 00:34:12,739
of

799
00:34:12,739 --> 00:34:17,540
object and we can pop the calculator

800
00:34:19,859 --> 00:34:22,020
so these are the offsets

801
00:34:22,020 --> 00:34:25,320
you can find full exploits on my blog

802
00:34:25,320 --> 00:34:27,719
uh let's yeah

803
00:34:27,719 --> 00:34:30,359
uh this is uh this is about exploitation

804
00:34:30,359 --> 00:34:32,879
uh let's uh see the mitigations about

805
00:34:32,879 --> 00:34:34,980
these bugs so there is a noticeable

806
00:34:34,980 --> 00:34:36,899
patch gap between electron applications

807
00:34:36,899 --> 00:34:40,139
and chrome because so the if the if

808
00:34:40,139 --> 00:34:43,139
there is a digit blog in jit bug in V8

809
00:34:43,139 --> 00:34:46,080
they update immediately but electron

810
00:34:46,080 --> 00:34:48,540
takes some time to some time to update

811
00:34:48,540 --> 00:34:51,899
the electron version and also the actual

812
00:34:51,899 --> 00:34:53,580
web the electron application like

813
00:34:53,580 --> 00:34:56,820
Discord they are so backlogged they

814
00:34:56,820 --> 00:34:59,040
won't update this jit exploit which

815
00:34:59,040 --> 00:35:01,560
means all of the electron applications

816
00:35:01,560 --> 00:35:04,859
you you use are vulnerable to uh jit

817
00:35:04,859 --> 00:35:07,560
exploits in V8 so you always have a

818
00:35:07,560 --> 00:35:09,720
renderer exploit

819
00:35:09,720 --> 00:35:13,920
um so uh it's always good to uh

820
00:35:13,920 --> 00:35:16,619
um update your electron application time

821
00:35:16,619 --> 00:35:18,720
to time and uh

822
00:35:18,720 --> 00:35:23,040
uh so enable all the security flags and

823
00:35:23,040 --> 00:35:24,599
mitigate all the web application

824
00:35:24,599 --> 00:35:26,700
security vulnerabilities such as xss

825
00:35:26,700 --> 00:35:29,880
open URL Direction even on on all the

826
00:35:29,880 --> 00:35:31,740
sub domains

827
00:35:31,740 --> 00:35:32,400
um

828
00:35:32,400 --> 00:35:35,400
don't Implement sensitive ipcs so we

829
00:35:35,400 --> 00:35:38,400
used sensitive uh implemented ipcs to

830
00:35:38,400 --> 00:35:40,740
pop the calculator right so don't use

831
00:35:40,740 --> 00:35:45,660
that and that's it so in a blog we were

832
00:35:45,660 --> 00:35:48,240
able to achieve remote code execution in

833
00:35:48,240 --> 00:35:50,220
20 different electron applications like

834
00:35:50,220 --> 00:35:52,320
Jupiter lab matter most rocket chart

835
00:35:52,320 --> 00:35:55,560
notion base camp and many more so this

836
00:35:55,560 --> 00:35:58,680
is the research team me adicha William

837
00:35:58,680 --> 00:36:01,320
and Max and thanks to the other

838
00:36:01,320 --> 00:36:02,640
collaborators

839
00:36:02,640 --> 00:36:06,060
udai who helped me in V8 exploits Sergi

840
00:36:06,060 --> 00:36:10,980
uh who is my who helped in Nexus wall

841
00:36:11,460 --> 00:36:14,280
so any questions so if you want to test

842
00:36:14,280 --> 00:36:16,020
your electron applications you can mail

843
00:36:16,020 --> 00:36:19,440
this uh you can find it uh you can send

844
00:36:19,440 --> 00:36:21,540
a mail here

845
00:36:21,540 --> 00:36:24,259
any questions

846
00:36:31,380 --> 00:36:35,220
does anyone have any questions last call

847
00:36:35,220 --> 00:36:39,020
okay thanks a lot Mohan uh

848
00:36:39,020 --> 00:36:44,199
[Applause]

