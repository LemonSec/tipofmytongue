1
00:00:02,879 --> 00:00:04,620
so

2
00:00:04,620 --> 00:00:07,560
today I'll be talking about software

3
00:00:07,560 --> 00:00:10,080
supply chain security and package

4
00:00:10,080 --> 00:00:11,420
manager security

5
00:00:11,420 --> 00:00:14,099
specifically attacks that are stemming

6
00:00:14,099 --> 00:00:17,460
from these package managers and how

7
00:00:17,460 --> 00:00:19,680
we've developed tools that oscillate to

8
00:00:19,680 --> 00:00:24,920
to tackle these attacks using package

9
00:00:25,140 --> 00:00:27,960
so a little bit about us uh I'm devdat

10
00:00:27,960 --> 00:00:31,260
Ashish is not here today so I'll be

11
00:00:31,260 --> 00:00:33,899
representing two of us uh we're both

12
00:00:33,899 --> 00:00:36,239
Georgia Tech alumni

13
00:00:36,239 --> 00:00:36,840
um

14
00:00:36,840 --> 00:00:38,940
and I think thanks for the introduction

15
00:00:38,940 --> 00:00:42,480
you can find us on LinkedIn uh

16
00:00:42,480 --> 00:00:44,160
on these urls

17
00:00:44,160 --> 00:00:46,440
so basically I'd oscillate what we're

18
00:00:46,440 --> 00:00:48,899
doing is we're focusing on building

19
00:00:48,899 --> 00:00:51,120
tools to mitigate uh software supply

20
00:00:51,120 --> 00:00:53,899
chain attacks

21
00:00:55,140 --> 00:00:58,079
so open source software is everywhere as

22
00:00:58,079 --> 00:01:01,079
we know uh as they say open source

23
00:01:01,079 --> 00:01:03,059
software is eating the world

24
00:01:03,059 --> 00:01:03,780
um

25
00:01:03,780 --> 00:01:07,080
I think over 90 percent of Fortune 500

26
00:01:07,080 --> 00:01:11,760
companies use open source today uh

27
00:01:11,760 --> 00:01:14,220
and I think the there are different

28
00:01:14,220 --> 00:01:17,520
studies but on average uh the verdict is

29
00:01:17,520 --> 00:01:20,040
that more than 75 of the code that

30
00:01:20,040 --> 00:01:22,320
companies today maintain comes from open

31
00:01:22,320 --> 00:01:25,400
source so as you can see uh if there are

32
00:01:25,400 --> 00:01:28,380
developers here in the room who use uh

33
00:01:28,380 --> 00:01:30,180
you know JavaScript or python or

34
00:01:30,180 --> 00:01:33,060
rubygems there's about most of the open

35
00:01:33,060 --> 00:01:35,759
source that is being consumed to build

36
00:01:35,759 --> 00:01:37,140
the internet or machine learning

37
00:01:37,140 --> 00:01:39,420
applications it's coming from these

38
00:01:39,420 --> 00:01:41,400
package managers where this open source

39
00:01:41,400 --> 00:01:42,780
is hosted

40
00:01:42,780 --> 00:01:45,240
um so we have a node package manager

41
00:01:45,240 --> 00:01:48,720
which is npm and Pi Pi for Python and

42
00:01:48,720 --> 00:01:51,899
ruby gems for Ruby Ruby on Rails so as

43
00:01:51,899 --> 00:01:53,340
you can see there's there's millions of

44
00:01:53,340 --> 00:01:55,799
packages out there and open source is

45
00:01:55,799 --> 00:01:58,140
distributed through these package

46
00:01:58,140 --> 00:02:00,920
managers so there's about 1.6 million

47
00:02:00,920 --> 00:02:04,399
npm packages about 400k

48
00:02:04,399 --> 00:02:08,459
350 odd on from Python and about 200k

49
00:02:08,459 --> 00:02:10,619
from ruby gems so as you can see there's

50
00:02:10,619 --> 00:02:13,920
the open sources is is here to stay it's

51
00:02:13,920 --> 00:02:15,660
it's massive

52
00:02:15,660 --> 00:02:18,180
um and it's everywhere

53
00:02:18,180 --> 00:02:20,520
so as we briefly discussed the open

54
00:02:20,520 --> 00:02:22,739
sources is hosted on these package

55
00:02:22,739 --> 00:02:25,140
managers and that's how we you know as

56
00:02:25,140 --> 00:02:27,360
developers we reach and download these

57
00:02:27,360 --> 00:02:29,940
packages and and include them in our

58
00:02:29,940 --> 00:02:32,459
software to use them right so the what

59
00:02:32,459 --> 00:02:34,020
package managers have done when they

60
00:02:34,020 --> 00:02:35,940
started to build uh these package

61
00:02:35,940 --> 00:02:38,640
managers the the the people who built

62
00:02:38,640 --> 00:02:41,580
these like npm and Wi-Fi they made these

63
00:02:41,580 --> 00:02:44,760
package managers very easy to use

64
00:02:44,760 --> 00:02:46,860
um and anyone could publish a package

65
00:02:46,860 --> 00:02:49,920
there's very you know low friction

66
00:02:49,920 --> 00:02:54,060
single line single command publishing

67
00:02:54,060 --> 00:02:55,739
um there are there are things like

68
00:02:55,739 --> 00:02:57,720
two-factor authentication but generally

69
00:02:57,720 --> 00:02:59,760
what's observed is that uh developers

70
00:02:59,760 --> 00:03:00,660
don't

71
00:03:00,660 --> 00:03:03,300
or not the right reasons but they don't

72
00:03:03,300 --> 00:03:05,099
end up using that they they want an easy

73
00:03:05,099 --> 00:03:07,379
way to publish a package right so if you

74
00:03:07,379 --> 00:03:09,900
or me could write a package uh we just

75
00:03:09,900 --> 00:03:12,180
follow a readme and within five to ten

76
00:03:12,180 --> 00:03:14,700
minutes uh our packages are up there and

77
00:03:14,700 --> 00:03:17,040
ready to use and people can really

78
00:03:17,040 --> 00:03:19,200
download it

79
00:03:19,200 --> 00:03:21,300
um so as you may have already figured

80
00:03:21,300 --> 00:03:22,980
out you know it's easy to publish

81
00:03:22,980 --> 00:03:25,319
packages for other people to use in the

82
00:03:25,319 --> 00:03:27,900
open source domain but there's limited

83
00:03:27,900 --> 00:03:30,900
security vetting and just to give you a

84
00:03:30,900 --> 00:03:33,540
statistic like every day on npm there's

85
00:03:33,540 --> 00:03:36,000
about 20 000 packages just being

86
00:03:36,000 --> 00:03:38,459
authored and uploaded

87
00:03:38,459 --> 00:03:40,140
I'm not talking about downloads is about

88
00:03:40,140 --> 00:03:42,360
a billion downloads

89
00:03:42,360 --> 00:03:44,040
um that that are happening from node

90
00:03:44,040 --> 00:03:46,260
right so just 20 000 authors are

91
00:03:46,260 --> 00:03:49,200
publishing their packages to use

92
00:03:49,200 --> 00:03:51,599
so all this all the software that we use

93
00:03:51,599 --> 00:03:54,959
on our servers that stops laptops is

94
00:03:54,959 --> 00:03:58,379
essentially written by volunteers when

95
00:03:58,379 --> 00:04:01,260
we don't know but we trust

96
00:04:01,260 --> 00:04:04,500
so this picture kind of demonstrates the

97
00:04:04,500 --> 00:04:06,840
the phenomenon so this is our modern

98
00:04:06,840 --> 00:04:09,200
digital infrastructure and then we have

99
00:04:09,200 --> 00:04:13,860
this uh in the in this is like a package

100
00:04:13,860 --> 00:04:16,199
that is being maintained by someone

101
00:04:16,199 --> 00:04:18,238
um and as you can see it's basically

102
00:04:18,238 --> 00:04:20,820
holding up the whole uh structure and if

103
00:04:20,820 --> 00:04:23,040
anything bad happens there it could

104
00:04:23,040 --> 00:04:26,639
bring our modern infrastructure down

105
00:04:26,639 --> 00:04:29,100
so you know as I'm building up to the

106
00:04:29,100 --> 00:04:32,040
story you can see that there you know as

107
00:04:32,040 --> 00:04:34,220
there is a good faith of you know

108
00:04:34,220 --> 00:04:36,300
Building open source and making it

109
00:04:36,300 --> 00:04:37,860
available there's also Bad actors that

110
00:04:37,860 --> 00:04:40,259
want to exploit the trust that we are

111
00:04:40,259 --> 00:04:41,520
putting on the open source Community

112
00:04:41,520 --> 00:04:45,720
right and this is just a snippet of some

113
00:04:45,720 --> 00:04:47,400
of the attacks that have happened over

114
00:04:47,400 --> 00:04:50,280
the last two to three years

115
00:04:50,280 --> 00:04:52,500
um is last year's supply chain attacks

116
00:04:52,500 --> 00:04:53,460
tripled

117
00:04:53,460 --> 00:04:57,300
um and even this year through the first

118
00:04:57,300 --> 00:04:59,580
uh eight months nine months this year

119
00:04:59,580 --> 00:05:01,740
every month there's been at least one or

120
00:05:01,740 --> 00:05:04,139
two attacks on the uh and all the all

121
00:05:04,139 --> 00:05:05,699
the package managers right none of them

122
00:05:05,699 --> 00:05:08,820
have been spared npm ruby gems bye bye

123
00:05:08,820 --> 00:05:11,400
you name it

124
00:05:11,400 --> 00:05:13,860
um so that so that explains kind of the

125
00:05:13,860 --> 00:05:16,259
like open sources everywhere and but

126
00:05:16,259 --> 00:05:18,479
then there's the you know the way

127
00:05:18,479 --> 00:05:20,460
they're hosted they're not very secure

128
00:05:20,460 --> 00:05:22,680
now there's another problem the in the

129
00:05:22,680 --> 00:05:25,380
way that uh open source uh packages are

130
00:05:25,380 --> 00:05:27,900
being used and that's the the phenomenon

131
00:05:27,900 --> 00:05:31,500
of dependencies right so anyone who's a

132
00:05:31,500 --> 00:05:33,600
JavaScript developer in the room knows

133
00:05:33,600 --> 00:05:36,539
that uh like essentially when you

134
00:05:36,539 --> 00:05:38,400
download a package to use in your

135
00:05:38,400 --> 00:05:41,940
application it brings down with it about

136
00:05:41,940 --> 00:05:44,460
on average uh you know GitHub found that

137
00:05:44,460 --> 00:05:46,320
there are 10 direct dependencies that

138
00:05:46,320 --> 00:05:48,360
come with it and those are just the

139
00:05:48,360 --> 00:05:49,800
direct dependencies that are transitive

140
00:05:49,800 --> 00:05:52,259
indirect dependencies and each one

141
00:05:52,259 --> 00:05:55,320
brings around seven so essentially it

142
00:05:55,320 --> 00:05:58,500
adds up to about 700 dependencies that

143
00:05:58,500 --> 00:06:00,060
get built into

144
00:06:00,060 --> 00:06:01,800
an application that you know you're

145
00:06:01,800 --> 00:06:03,900
writing which is a reasonable scale all

146
00:06:03,900 --> 00:06:04,919
right

147
00:06:04,919 --> 00:06:06,060
um

148
00:06:06,060 --> 00:06:08,820
so any mature JavaScript application

149
00:06:08,820 --> 00:06:12,240
essentially has about 700 indirect uh

150
00:06:12,240 --> 00:06:14,460
and transitive dependencies uh for

151
00:06:14,460 --> 00:06:16,320
Python and PHP it's a little smaller but

152
00:06:16,320 --> 00:06:19,259
still it's about 70 for those two and

153
00:06:19,259 --> 00:06:22,919
Ruby has about 68. and synopsis did an

154
00:06:22,919 --> 00:06:26,100
audit and they published that an average

155
00:06:26,100 --> 00:06:29,340
application which is a you know

156
00:06:29,340 --> 00:06:30,780
commercial grade web application has

157
00:06:30,780 --> 00:06:33,539
about 528 dependencies so all of this

158
00:06:33,539 --> 00:06:35,400
combined basically what it means is that

159
00:06:35,400 --> 00:06:38,479
we're using a lot of open source

160
00:06:38,479 --> 00:06:41,160
and each time we pull open source

161
00:06:41,160 --> 00:06:42,300
there's a lot of dependencies that come

162
00:06:42,300 --> 00:06:44,639
with it which means the attack Vector to

163
00:06:44,639 --> 00:06:47,880
exploit uh the supply chain of the open

164
00:06:47,880 --> 00:06:50,100
source that we're using is is pretty

165
00:06:50,100 --> 00:06:53,220
pretty big right so one could get in if

166
00:06:53,220 --> 00:06:55,440
a bad actor wants to get in they have

167
00:06:55,440 --> 00:06:57,300
multiple attack vectors to get in and

168
00:06:57,300 --> 00:07:00,840
sabotage these packages

169
00:07:00,840 --> 00:07:03,000
so this is what uh basically supply

170
00:07:03,000 --> 00:07:05,460
chain attack would look like

171
00:07:05,460 --> 00:07:08,940
um The Bad actors would would Target the

172
00:07:08,940 --> 00:07:11,280
least secure in this in the supply chain

173
00:07:11,280 --> 00:07:13,740
and the the main thing about supply

174
00:07:13,740 --> 00:07:16,500
chain attacks is that this is not uh

175
00:07:16,500 --> 00:07:19,440
like I think we know about bugs that we

176
00:07:19,440 --> 00:07:21,900
introduce or the cves but supply chain

177
00:07:21,900 --> 00:07:24,660
attacks essentially are inject the the

178
00:07:24,660 --> 00:07:28,259
the the bad actor would inject a harmful

179
00:07:28,259 --> 00:07:31,740
code purposefully right so it's malware

180
00:07:31,740 --> 00:07:34,440
um unlike CVS which are like accidental

181
00:07:34,440 --> 00:07:36,780
programming bugs so those we know that

182
00:07:36,780 --> 00:07:38,819
you know everybody knows about cves but

183
00:07:38,819 --> 00:07:40,919
this is

184
00:07:40,919 --> 00:07:43,919
um code that is intentionally

185
00:07:43,919 --> 00:07:46,259
um stealthy and evasive

186
00:07:46,259 --> 00:07:48,740
and it cannot be easily patched because

187
00:07:48,740 --> 00:07:51,000
essentially once malware is in the

188
00:07:51,000 --> 00:07:53,160
system you really have to figure out how

189
00:07:53,160 --> 00:07:54,539
do you

190
00:07:54,539 --> 00:07:56,400
um make sure that you understand it

191
00:07:56,400 --> 00:07:58,500
fully and then dispatching it will be

192
00:07:58,500 --> 00:08:00,240
hard because it's an unknown bug so it's

193
00:08:00,240 --> 00:08:02,699
not a CV that's known and it gets

194
00:08:02,699 --> 00:08:04,199
exploited so then we'd have a patch

195
00:08:04,199 --> 00:08:07,560
available to to push through your you

196
00:08:07,560 --> 00:08:09,240
know it policies

197
00:08:09,240 --> 00:08:11,940
and because of what I explained you know

198
00:08:11,940 --> 00:08:14,280
how how large the uh how much open

199
00:08:14,280 --> 00:08:16,680
source is being adopted uh the the blast

200
00:08:16,680 --> 00:08:18,720
radius is pretty large like if there is

201
00:08:18,720 --> 00:08:22,080
a malware that gets in its uh you know

202
00:08:22,080 --> 00:08:24,419
potentially from thousands to millions

203
00:08:24,419 --> 00:08:27,120
of developers could get you know hit by

204
00:08:27,120 --> 00:08:28,979
this attack

205
00:08:28,979 --> 00:08:31,680
so we've covered kind of the the story

206
00:08:31,680 --> 00:08:34,620
behind uh why these attacks happen and

207
00:08:34,620 --> 00:08:37,140
and uh what's the the dangers behind it

208
00:08:37,140 --> 00:08:38,760
now we'll go into a little bit of detail

209
00:08:38,760 --> 00:08:40,260
on the attack techniques that we use

210
00:08:40,260 --> 00:08:43,559
that are used so there's this uh common

211
00:08:43,559 --> 00:08:45,240
thing called type of squatting right we

212
00:08:45,240 --> 00:08:47,339
always we're typing a message we make a

213
00:08:47,339 --> 00:08:49,500
mistake and the message goes out

214
00:08:49,500 --> 00:08:51,660
um and we do it so much uh so often and

215
00:08:51,660 --> 00:08:53,820
that's the same it doesn't change for

216
00:08:53,820 --> 00:08:55,920
you know developers who are trying to

217
00:08:55,920 --> 00:08:57,839
install a package let's say you do an

218
00:08:57,839 --> 00:09:01,260
npm install or a pip 3 install

219
00:09:01,260 --> 00:09:03,180
um so some of the exploited behaviors

220
00:09:03,180 --> 00:09:06,600
are misspelling where the actual package

221
00:09:06,600 --> 00:09:08,940
name is say colorama with without a u

222
00:09:08,940 --> 00:09:11,940
but then somebody types in

223
00:09:11,940 --> 00:09:14,519
OU and then it brings down someone's

224
00:09:14,519 --> 00:09:16,140
uploaded a malicious package called

225
00:09:16,140 --> 00:09:18,420
colorama with a u and then it's going to

226
00:09:18,420 --> 00:09:20,220
bring down that package and it's going

227
00:09:20,220 --> 00:09:22,560
to install it and uh it could be

228
00:09:22,560 --> 00:09:24,360
malicious and then there's order

229
00:09:24,360 --> 00:09:28,080
confusion which is like instead of in my

230
00:09:28,080 --> 00:09:30,600
python which which is like the original

231
00:09:30,600 --> 00:09:33,720
package is python nmap the developer

232
00:09:33,720 --> 00:09:36,360
could could use nmap Python by you know

233
00:09:36,360 --> 00:09:38,640
by mistake and then there's another type

234
00:09:38,640 --> 00:09:40,560
of attack called uh separator confusion

235
00:09:40,560 --> 00:09:42,660
where the original package is easy

236
00:09:42,660 --> 00:09:45,420
underscore install and uh the the

237
00:09:45,420 --> 00:09:47,459
developer will use Easy install as a

238
00:09:47,459 --> 00:09:48,480
single word

239
00:09:48,480 --> 00:09:49,080
um

240
00:09:49,080 --> 00:09:51,540
so what this does is it it downloads the

241
00:09:51,540 --> 00:09:55,620
typos the the malicious package here and

242
00:09:55,620 --> 00:09:57,060
what the bad actor would have done is

243
00:09:57,060 --> 00:09:59,820
they know that these packages exist so

244
00:09:59,820 --> 00:10:02,580
that they they create packages which are

245
00:10:02,580 --> 00:10:04,980
very close to the the spelling the

246
00:10:04,980 --> 00:10:06,300
correct spelling and they upload it to

247
00:10:06,300 --> 00:10:09,660
these package managers and invariably it

248
00:10:09,660 --> 00:10:11,399
might seem like oh who's going to make

249
00:10:11,399 --> 00:10:13,620
such a stupid mistake but we I mean even

250
00:10:13,620 --> 00:10:16,200
until the last two months ago there was

251
00:10:16,200 --> 00:10:18,000
an attack that exploited type was

252
00:10:18,000 --> 00:10:20,420
quoting

253
00:10:20,640 --> 00:10:24,000
so this is a this is an example of a

254
00:10:24,000 --> 00:10:26,040
type of squatting attack so there was a

255
00:10:26,040 --> 00:10:28,560
well-known package called mitm proxy so

256
00:10:28,560 --> 00:10:30,660
someone uploaded a package called mitm

257
00:10:30,660 --> 00:10:32,279
proxy2

258
00:10:32,279 --> 00:10:34,080
um hoping that you know because it is

259
00:10:34,080 --> 00:10:37,140
like a two added to the original uh

260
00:10:37,140 --> 00:10:38,640
package

261
00:10:38,640 --> 00:10:41,339
um someone without experience or uh you

262
00:10:41,339 --> 00:10:43,680
know a developer an experience or a typo

263
00:10:43,680 --> 00:10:45,360
may think or someone who goes and

264
00:10:45,360 --> 00:10:46,980
searches for MIT and proxy they'll find

265
00:10:46,980 --> 00:10:49,320
this mitm proxy 2 and they may believe

266
00:10:49,320 --> 00:10:52,380
that it's a new version and what they

267
00:10:52,380 --> 00:10:55,019
did is essentially it looks exactly like

268
00:10:55,019 --> 00:10:57,360
the original package so the project

269
00:10:57,360 --> 00:10:58,820
description

270
00:10:58,820 --> 00:11:01,380
and all of it is exactly the same except

271
00:11:01,380 --> 00:11:03,240
for the fact that it's a whole different

272
00:11:03,240 --> 00:11:05,339
package with with malicious code inside

273
00:11:05,339 --> 00:11:07,140
right and what the code does is

274
00:11:07,140 --> 00:11:09,240
essentially it removes all the

275
00:11:09,240 --> 00:11:11,160
safeguards that were there in the

276
00:11:11,160 --> 00:11:13,440
original package so a deny is removed

277
00:11:13,440 --> 00:11:15,899
and then some additional access control

278
00:11:15,899 --> 00:11:19,140
is allowed so this essentially allows us

279
00:11:19,140 --> 00:11:21,720
anyone on your network to execute code

280
00:11:21,720 --> 00:11:23,880
in your machine with the single HTTP

281
00:11:23,880 --> 00:11:27,720
request so this is an example of uh of

282
00:11:27,720 --> 00:11:31,140
someone who did this uploaded mitm proxy

283
00:11:31,140 --> 00:11:32,459
2 and

284
00:11:32,459 --> 00:11:34,380
um and someone and this could run in

285
00:11:34,380 --> 00:11:38,160
like someone would uh by mistake using a

286
00:11:38,160 --> 00:11:40,079
type of squatting mistake would download

287
00:11:40,079 --> 00:11:43,339
this malicious package

288
00:11:43,740 --> 00:11:45,779
so we covered type of squatting the

289
00:11:45,779 --> 00:11:48,600
other uh technique is social engineering

290
00:11:48,600 --> 00:11:51,480
so there was this popular package called

291
00:11:51,480 --> 00:11:54,420
event stream and what the attacker did

292
00:11:54,420 --> 00:11:57,420
in this case is that he built a rapper

293
00:11:57,420 --> 00:12:00,779
with the author of the package for many

294
00:12:00,779 --> 00:12:05,100
months and then at one you know one fine

295
00:12:05,100 --> 00:12:07,620
day they they volunteered to maintain

296
00:12:07,620 --> 00:12:11,160
the module so as this message says he

297
00:12:11,160 --> 00:12:12,480
emailed me and said he wanted to

298
00:12:12,480 --> 00:12:14,940
maintain the module so I gave him access

299
00:12:14,940 --> 00:12:18,480
right and then before uh you know in a

300
00:12:18,480 --> 00:12:22,140
few few days down the line the uh the

301
00:12:22,140 --> 00:12:25,019
the the person who got access uploaded

302
00:12:25,019 --> 00:12:27,899
some malicious code and uh and that got

303
00:12:27,899 --> 00:12:29,519
checked in and then that led to an

304
00:12:29,519 --> 00:12:31,500
attack

305
00:12:31,500 --> 00:12:33,420
so the another technique is called

306
00:12:33,420 --> 00:12:35,760
dependency confusion now this has been

307
00:12:35,760 --> 00:12:37,860
explored in the past um may not be so

308
00:12:37,860 --> 00:12:39,959
much today because we have seen that in

309
00:12:39,959 --> 00:12:41,700
the past and perhaps some of it has been

310
00:12:41,700 --> 00:12:44,040
fixed but it's important to discuss this

311
00:12:44,040 --> 00:12:45,000
attack

312
00:12:45,000 --> 00:12:45,720
um

313
00:12:45,720 --> 00:12:48,420
here what happens is your CI CD which is

314
00:12:48,420 --> 00:12:50,639
your production server typically uses

315
00:12:50,639 --> 00:12:52,440
something from your internal so let's

316
00:12:52,440 --> 00:12:54,779
say an organization hosts known good

317
00:12:54,779 --> 00:12:56,600
packages with a certain version which is

318
00:12:56,600 --> 00:12:58,160
1.0

319
00:12:58,160 --> 00:13:02,279
but the uh the the the the tools that

320
00:13:02,279 --> 00:13:04,620
actually put your builds together they

321
00:13:04,620 --> 00:13:07,620
have some options where if they were

322
00:13:07,620 --> 00:13:10,620
turned on by mistake they would always

323
00:13:10,620 --> 00:13:13,500
there would be a another later package

324
00:13:13,500 --> 00:13:16,079
available on a public repository let's

325
00:13:16,079 --> 00:13:21,240
say in on npm or Pi Pi so it turns out

326
00:13:21,240 --> 00:13:23,399
that the the external package version is

327
00:13:23,399 --> 00:13:25,800
higher so the tool goes in ahead and

328
00:13:25,800 --> 00:13:28,740
downloads the uh the newer version but

329
00:13:28,740 --> 00:13:31,440
someone actually uploaded a malicious

330
00:13:31,440 --> 00:13:34,200
package uh with a higher version number

331
00:13:34,200 --> 00:13:36,720
right so this package 2.0 is essentially

332
00:13:36,720 --> 00:13:39,300
the attacker doing bad things uploading

333
00:13:39,300 --> 00:13:41,700
it there and then your CI CD pipeline

334
00:13:41,700 --> 00:13:43,260
pulls in the malicious package and

335
00:13:43,260 --> 00:13:45,660
ignores the internal package and that

336
00:13:45,660 --> 00:13:47,820
that goes through into your into the

337
00:13:47,820 --> 00:13:50,000
product

338
00:13:50,519 --> 00:13:53,279
so another technique which is which

339
00:13:53,279 --> 00:13:54,899
still happens to this day like there was

340
00:13:54,899 --> 00:13:55,980
an attack on

341
00:13:55,980 --> 00:13:58,560
Pi Pi just in uh I think it was August

342
00:13:58,560 --> 00:14:00,180
this year

343
00:14:00,180 --> 00:14:00,839
um

344
00:14:00,839 --> 00:14:03,480
which is called account hijacking

345
00:14:03,480 --> 00:14:06,240
so in this case the reason for this is

346
00:14:06,240 --> 00:14:07,279
many times

347
00:14:07,279 --> 00:14:12,360
there are you know people basically have

348
00:14:12,360 --> 00:14:15,079
an email ID which gets taken over

349
00:14:15,079 --> 00:14:17,100
because they don't have two-factor

350
00:14:17,100 --> 00:14:18,720
authentication so one can say forgot

351
00:14:18,720 --> 00:14:21,779
password if there you know there's a way

352
00:14:21,779 --> 00:14:25,139
they can impersonate your email ID they

353
00:14:25,139 --> 00:14:27,660
get access to your account and that's

354
00:14:27,660 --> 00:14:29,579
how someone could take over an account

355
00:14:29,579 --> 00:14:31,920
I'll go into some details on another

356
00:14:31,920 --> 00:14:35,399
attack and the steps that this this

357
00:14:35,399 --> 00:14:37,860
would take but yeah so it's important to

358
00:14:37,860 --> 00:14:40,320
remember this technique

359
00:14:40,320 --> 00:14:43,139
so we we covered all these techniques on

360
00:14:43,139 --> 00:14:45,779
how uh one could you know potentially

361
00:14:45,779 --> 00:14:48,899
gain access to these packages so how do

362
00:14:48,899 --> 00:14:50,220
we defend against these attacks right

363
00:14:50,220 --> 00:14:52,079
like so the straightforward answer is

364
00:14:52,079 --> 00:14:53,399
you know maintainers and package

365
00:14:53,399 --> 00:14:56,459
managers need to be more responsible uh

366
00:14:56,459 --> 00:14:58,139
and you enable two-factor on the

367
00:14:58,139 --> 00:15:00,360
authentication you have better name

368
00:15:00,360 --> 00:15:03,300
scoping to avoid type of squatting and

369
00:15:03,300 --> 00:15:06,240
you have packet signing um so that you

370
00:15:06,240 --> 00:15:08,040
know that it's a known signed package is

371
00:15:08,040 --> 00:15:08,899
being

372
00:15:08,899 --> 00:15:12,600
uploaded and then downloaded and used

373
00:15:12,600 --> 00:15:15,000
um but there are scenarios that these

374
00:15:15,000 --> 00:15:17,760
methods or these mechanisms won't work

375
00:15:17,760 --> 00:15:20,579
um the example being that if there is a

376
00:15:20,579 --> 00:15:23,639
developer who decides to go uh become a

377
00:15:23,639 --> 00:15:25,139
rope developer right like this has

378
00:15:25,139 --> 00:15:27,959
happened more than once uh it's actually

379
00:15:27,959 --> 00:15:29,779
you know maybe half a dozen times where

380
00:15:29,779 --> 00:15:32,399
someone's not happy about maintaining a

381
00:15:32,399 --> 00:15:35,820
package and they uh turn into a rogue

382
00:15:35,820 --> 00:15:37,320
developer

383
00:15:37,320 --> 00:15:39,000
um there was one instance where the

384
00:15:39,000 --> 00:15:41,100
colors package was sabotaged by its own

385
00:15:41,100 --> 00:15:43,740
maintainer and in the left pad example

386
00:15:43,740 --> 00:15:46,560
someone just took down a package that

387
00:15:46,560 --> 00:15:48,420
was commonly used by millions of

388
00:15:48,420 --> 00:15:52,260
developers so that can be causing a wide

389
00:15:52,260 --> 00:15:54,240
impact it's how do you protect against

390
00:15:54,240 --> 00:15:56,639
these kind of attacks where

391
00:15:56,639 --> 00:15:58,019
um like let's say I'm a good guy but

392
00:15:58,019 --> 00:16:00,180
then I decide overnight I don't I want

393
00:16:00,180 --> 00:16:02,880
to do something bizarre right so I have

394
00:16:02,880 --> 00:16:04,920
all the control I can do whatever I want

395
00:16:04,920 --> 00:16:06,959
and then the other community the

396
00:16:06,959 --> 00:16:08,940
community has to pay a price

397
00:16:08,940 --> 00:16:12,060
so essentially what this then boils down

398
00:16:12,060 --> 00:16:14,279
to is the developers and Enterprise

399
00:16:14,279 --> 00:16:16,920
organizations take ownership of if if

400
00:16:16,920 --> 00:16:19,199
they are consuming open source uh they

401
00:16:19,199 --> 00:16:22,620
need to to be more uh wise and and

402
00:16:22,620 --> 00:16:25,380
prudent when using open source and

403
00:16:25,380 --> 00:16:27,959
essentially analyze the package code and

404
00:16:27,959 --> 00:16:30,180
behavior before adoption

405
00:16:30,180 --> 00:16:32,100
and then the other way would be to use

406
00:16:32,100 --> 00:16:34,620
pre-vetted packages where they use tools

407
00:16:34,620 --> 00:16:37,259
to create a repository of well-known

408
00:16:37,259 --> 00:16:39,540
pre-veted packages and they wouldn't

409
00:16:39,540 --> 00:16:42,000
pull stuff from the from the Internet or

410
00:16:42,000 --> 00:16:43,920
open source package managers but would

411
00:16:43,920 --> 00:16:46,079
use their own pre-vetted packages right

412
00:16:46,079 --> 00:16:48,060
so originally it comes from open source

413
00:16:48,060 --> 00:16:50,100
but then it's you run through a bunch of

414
00:16:50,100 --> 00:16:52,440
tools which make sure that the package

415
00:16:52,440 --> 00:16:54,899
code is good the behavior is fine and

416
00:16:54,899 --> 00:16:56,699
then you add it to your list of

417
00:16:56,699 --> 00:16:58,199
pre-vetted packages which you use

418
00:16:58,199 --> 00:17:00,620
internally

419
00:17:00,720 --> 00:17:03,240
so if you were to go down this path and

420
00:17:03,240 --> 00:17:06,119
and consider wetting right we agree that

421
00:17:06,119 --> 00:17:09,119
you know vetting is is the way to go uh

422
00:17:09,119 --> 00:17:11,760
for organizations and developers but

423
00:17:11,760 --> 00:17:14,220
we talked about dependency and we talked

424
00:17:14,220 --> 00:17:16,260
about the problems about of how large

425
00:17:16,260 --> 00:17:19,020
these dependency chains go this is just

426
00:17:19,020 --> 00:17:20,880
an example that if you were to sit and

427
00:17:20,880 --> 00:17:23,579
manually vet this dependency chain this

428
00:17:23,579 --> 00:17:27,119
is the well-known pie torch package this

429
00:17:27,119 --> 00:17:29,700
is just showing dependencies to an order

430
00:17:29,700 --> 00:17:31,980
of two so if you go further it's like

431
00:17:31,980 --> 00:17:33,840
this graph can get

432
00:17:33,840 --> 00:17:35,880
ugly and you know as you can see there's

433
00:17:35,880 --> 00:17:38,520
arrows all over the place so auditing

434
00:17:38,520 --> 00:17:41,960
this manually is just infeasible

435
00:17:42,059 --> 00:17:44,039
um and if you were to look at existing

436
00:17:44,039 --> 00:17:46,559
tools out there a lot of tools uh will

437
00:17:46,559 --> 00:17:48,480
tell you okay here's this package and

438
00:17:48,480 --> 00:17:50,039
this version

439
00:17:50,039 --> 00:17:53,520
um it has this known CV right so people

440
00:17:53,520 --> 00:17:55,980
know about so sneak advisor is one

441
00:17:55,980 --> 00:17:58,080
that's you know commonly used but

442
00:17:58,080 --> 00:17:59,760
essentially what they're doing talking

443
00:17:59,760 --> 00:18:02,220
about is no known security issues now

444
00:18:02,220 --> 00:18:04,320
there's an example of this package which

445
00:18:04,320 --> 00:18:07,320
uh if you look at the code essentially

446
00:18:07,320 --> 00:18:10,320
it's it's clearly malicious it's doing

447
00:18:10,320 --> 00:18:12,660
stuff where it's accessing your SSH keys

448
00:18:12,660 --> 00:18:15,299
and trying to send it out but sneaker

449
00:18:15,299 --> 00:18:17,460
advisor tells you that there's no known

450
00:18:17,460 --> 00:18:19,380
security and this is this is accurate

451
00:18:19,380 --> 00:18:21,360
technically because this is not in

452
00:18:21,360 --> 00:18:23,100
there's no cve or known vulnerability

453
00:18:23,100 --> 00:18:25,559
but unless you do a deep code analysis

454
00:18:25,559 --> 00:18:27,240
in this package you wouldn't know that

455
00:18:27,240 --> 00:18:30,480
this is a clearly malicious package

456
00:18:30,480 --> 00:18:33,480
so there's a lot of tools out there that

457
00:18:33,480 --> 00:18:35,100
focus on known vulnerabilities but

458
00:18:35,100 --> 00:18:37,580
there's not enough out there that

459
00:18:37,580 --> 00:18:40,080
detects malicious or

460
00:18:40,080 --> 00:18:44,340
um you know malintent in these packages

461
00:18:44,340 --> 00:18:46,500
and another way that developers

462
00:18:46,500 --> 00:18:50,220
generally uh tend to rely on is

463
00:18:50,220 --> 00:18:52,559
basically okay you search you find a

464
00:18:52,559 --> 00:18:54,240
package that kind of sounds like what

465
00:18:54,240 --> 00:18:56,100
you need it has the right functionality

466
00:18:56,100 --> 00:18:58,080
so you

467
00:18:58,080 --> 00:19:00,179
um then you look at its you know

468
00:19:00,179 --> 00:19:02,160
reputation now here you can see that

469
00:19:02,160 --> 00:19:04,559
this is a Sandbox package it claims to

470
00:19:04,559 --> 00:19:05,880
do something

471
00:19:05,880 --> 00:19:08,580
um and it has a 4 000 stars and bunch of

472
00:19:08,580 --> 00:19:10,980
like more than a thousand folks but it

473
00:19:10,980 --> 00:19:14,039
turns out that uh it's actually using a

474
00:19:14,039 --> 00:19:17,039
technique called star jacking where uh

475
00:19:17,039 --> 00:19:19,559
all it does is it it basically the

476
00:19:19,559 --> 00:19:21,960
GitHub link is pointing to another

477
00:19:21,960 --> 00:19:24,480
project which has a lot of stars and

478
00:19:24,480 --> 00:19:27,600
forks and there's no verification that

479
00:19:27,600 --> 00:19:31,799
the python Pi index does to stop this

480
00:19:31,799 --> 00:19:34,559
kind of uh like basically your this

481
00:19:34,559 --> 00:19:36,419
attack is called star jacking right so

482
00:19:36,419 --> 00:19:37,799
you took away stars from somebody else

483
00:19:37,799 --> 00:19:39,480
and you're trying to build show the

484
00:19:39,480 --> 00:19:41,220
reputation of your packages being very

485
00:19:41,220 --> 00:19:43,980
healthy so vanity stats are not enough

486
00:19:43,980 --> 00:19:46,500
you know we know that there's tools that

487
00:19:46,500 --> 00:19:49,559
only focus on non-vulnerabilities so

488
00:19:49,559 --> 00:19:52,740
that's where uh package comes in so it's

489
00:19:52,740 --> 00:19:54,299
this is the tool that we've been working

490
00:19:54,299 --> 00:19:55,919
on for the last year

491
00:19:55,919 --> 00:19:57,419
um it's a developer friendly vetting

492
00:19:57,419 --> 00:19:58,320
tool

493
00:19:58,320 --> 00:20:01,200
um it takes a zero trust approach to

494
00:20:01,200 --> 00:20:04,320
automated betting of risky code and

495
00:20:04,320 --> 00:20:07,140
attributes and packages and it provides

496
00:20:07,140 --> 00:20:10,559
actionable security insights so things

497
00:20:10,559 --> 00:20:12,600
like is the package old or abandoned

498
00:20:12,600 --> 00:20:14,039
this is very important to know because

499
00:20:14,039 --> 00:20:16,020
if the package is abandoned it's

500
00:20:16,020 --> 00:20:17,480
probably going to have vulnerabilities

501
00:20:17,480 --> 00:20:21,140
and nobody's there to fix or support

502
00:20:21,140 --> 00:20:24,600
this package right and does does the

503
00:20:24,600 --> 00:20:26,760
package read files or send data over the

504
00:20:26,760 --> 00:20:29,820
network is it reading your SSH Keys is

505
00:20:29,820 --> 00:20:32,460
it doing looking for Bitcoin addresses

506
00:20:32,460 --> 00:20:34,440
uh things like that

507
00:20:34,440 --> 00:20:39,120
now uh you might so many so this the way

508
00:20:39,120 --> 00:20:41,039
these package indexes are is that you

509
00:20:41,039 --> 00:20:43,080
can these are runtime interpreted

510
00:20:43,080 --> 00:20:44,940
languages you're talking about Python

511
00:20:44,940 --> 00:20:49,559
and and uh and you know node.j.js so you

512
00:20:49,559 --> 00:20:52,140
don't actually need to have a a GitHub

513
00:20:52,140 --> 00:20:54,480
you can just upload a package and you

514
00:20:54,480 --> 00:20:56,160
don't need to have a GitHub but what our

515
00:20:56,160 --> 00:20:58,260
tool does is it basically make sure that

516
00:20:58,260 --> 00:21:00,360
uh if there's a package on the

517
00:21:00,360 --> 00:21:02,460
repository does it have if there's a

518
00:21:02,460 --> 00:21:04,860
package on the the pack on this package

519
00:21:04,860 --> 00:21:07,559
registry is there a corresponding GitHub

520
00:21:07,559 --> 00:21:09,660
repo that backs this package right is it

521
00:21:09,660 --> 00:21:11,360
available publicly

522
00:21:11,360 --> 00:21:13,860
other things like is the package

523
00:21:13,860 --> 00:21:16,860
trustworthy have there been a number of

524
00:21:16,860 --> 00:21:19,080
versions released right

525
00:21:19,080 --> 00:21:21,360
um and what's the release history how

526
00:21:21,360 --> 00:21:24,360
often is the package getting updates is

527
00:21:24,360 --> 00:21:27,000
the author of the package trustworthy

528
00:21:27,000 --> 00:21:28,620
does he have a valid he or she have a

529
00:21:28,620 --> 00:21:31,380
valid email so these are metadata

530
00:21:31,380 --> 00:21:34,380
metrics that are important to a certain

531
00:21:34,380 --> 00:21:37,440
that the package is healthy so we've

532
00:21:37,440 --> 00:21:39,539
built this tool it's a command line tool

533
00:21:39,539 --> 00:21:41,820
and it's also customizable to your

534
00:21:41,820 --> 00:21:43,799
threat model so it will reduce alert

535
00:21:43,799 --> 00:21:45,059
fatigue

536
00:21:45,059 --> 00:21:48,120
um like you you may for some developers

537
00:21:48,120 --> 00:21:50,280
or organizations it may be okay to use

538
00:21:50,280 --> 00:21:52,799
uh package that's let's say one year old

539
00:21:52,799 --> 00:21:55,679
so you can set that to 365 days or one

540
00:21:55,679 --> 00:21:57,900
year and it won't flag that as a

541
00:21:57,900 --> 00:22:00,780
malicious package

542
00:22:00,780 --> 00:22:04,620
so essentially what we do is uh using

543
00:22:04,620 --> 00:22:08,220
package we look at each each you know

544
00:22:08,220 --> 00:22:10,260
each package that's get that we're

545
00:22:10,260 --> 00:22:13,020
trying to download and we validate the

546
00:22:13,020 --> 00:22:15,539
email of the maintainer and invalid

547
00:22:15,539 --> 00:22:17,100
email may suggest that there's no

548
00:22:17,100 --> 00:22:19,080
two-factor Authentication

549
00:22:19,080 --> 00:22:22,799
and if the if if you want to be sure

550
00:22:22,799 --> 00:22:24,240
that the

551
00:22:24,240 --> 00:22:27,059
um the package is uh is is protected

552
00:22:27,059 --> 00:22:29,520
against account hijacking the email ID

553
00:22:29,520 --> 00:22:31,500
must be valid right so we do those

554
00:22:31,500 --> 00:22:34,740
checks uh in in our software we make

555
00:22:34,740 --> 00:22:36,419
sure that the package is not old or

556
00:22:36,419 --> 00:22:39,600
abandoned so we detect that basically

557
00:22:39,600 --> 00:22:41,760
look at metadata when was the last

558
00:22:41,760 --> 00:22:44,100
release was it like two years ago or is

559
00:22:44,100 --> 00:22:46,020
there no update so there's been a slew

560
00:22:46,020 --> 00:22:48,000
of updates and then at a certain date

561
00:22:48,000 --> 00:22:49,559
there's nothing no activity on the

562
00:22:49,559 --> 00:22:51,299
package which means the package is

563
00:22:51,299 --> 00:22:53,580
essentially abandoned

564
00:22:53,580 --> 00:22:56,460
um so the risks basically are that it

565
00:22:56,460 --> 00:22:58,140
won't receive any security updates or

566
00:22:58,140 --> 00:22:59,580
fixes

567
00:22:59,580 --> 00:23:03,240
um and the if you know

568
00:23:03,240 --> 00:23:05,039
um if you know the metadata about the

569
00:23:05,039 --> 00:23:08,159
package you can also look up uh whether

570
00:23:08,159 --> 00:23:10,500
there are any unpatched vulnerabilities

571
00:23:10,500 --> 00:23:12,600
in there there's not going to be any

572
00:23:12,600 --> 00:23:14,700
updates to those because the package has

573
00:23:14,700 --> 00:23:16,380
been abandoned so these are the risks

574
00:23:16,380 --> 00:23:18,140
that you become aware of

575
00:23:18,140 --> 00:23:20,280
presence of public source code

576
00:23:20,280 --> 00:23:23,520
repositories this basically we use a

577
00:23:23,520 --> 00:23:25,860
technique called for provenance where we

578
00:23:25,860 --> 00:23:28,080
look at the code inside the package and

579
00:23:28,080 --> 00:23:31,200
the GitHub repository to make sure that

580
00:23:31,200 --> 00:23:33,960
there is a match between the two so that

581
00:23:33,960 --> 00:23:38,539
gives us provenance uh confidence

582
00:23:38,580 --> 00:23:40,620
um and then as I mentioned there was an

583
00:23:40,620 --> 00:23:43,020
attack called star jacking so if there's

584
00:23:43,020 --> 00:23:45,360
a if there's a package and there's a

585
00:23:45,360 --> 00:23:48,179
legitimate uh GitHub repository and if

586
00:23:48,179 --> 00:23:49,620
the description and the code matches

587
00:23:49,620 --> 00:23:52,740
then it's not going to be a susceptible

588
00:23:52,740 --> 00:23:54,780
to or it's not doing a start jacking

589
00:23:54,780 --> 00:23:55,919
attack

590
00:23:55,919 --> 00:23:58,620
and then we do uh protection we

591
00:23:58,620 --> 00:24:00,480
basically detect typo squatting which

592
00:24:00,480 --> 00:24:03,000
means if there are you know two or three

593
00:24:03,000 --> 00:24:05,039
packages that are very similar and name

594
00:24:05,039 --> 00:24:07,440
sounding the name sounds very similar we

595
00:24:07,440 --> 00:24:10,260
can do uh distance based methods to

596
00:24:10,260 --> 00:24:12,360
detect that which one's legitimate and

597
00:24:12,360 --> 00:24:14,460
which ones are types typo squatted uh

598
00:24:14,460 --> 00:24:17,520
package because the one of them would

599
00:24:17,520 --> 00:24:19,799
have a good reputation a lot of

600
00:24:19,799 --> 00:24:21,059
downloads the other one would be like

601
00:24:21,059 --> 00:24:22,580
this new package that doesn't have any

602
00:24:22,580 --> 00:24:25,260
downloads right

603
00:24:25,260 --> 00:24:27,600
so that's the metadata analysis that we

604
00:24:27,600 --> 00:24:29,820
do then we also do a static analysis

605
00:24:29,820 --> 00:24:31,440
where we're doing

606
00:24:31,440 --> 00:24:34,380
um we use the ASD uh for the from the

607
00:24:34,380 --> 00:24:36,659
language runtimes to determine whether

608
00:24:36,659 --> 00:24:38,280
the uh

609
00:24:38,280 --> 00:24:39,840
whether the package is doing anything

610
00:24:39,840 --> 00:24:42,360
sensitive like opening or reading or

611
00:24:42,360 --> 00:24:44,220
writing files uh doing any network

612
00:24:44,220 --> 00:24:47,159
activity like sending some credentials

613
00:24:47,159 --> 00:24:48,600
out to a

614
00:24:48,600 --> 00:24:51,960
to another application and whether it's

615
00:24:51,960 --> 00:24:54,179
trying to so some packages they download

616
00:24:54,179 --> 00:24:57,240
a payload from another URL and they try

617
00:24:57,240 --> 00:24:59,100
to execute it in a separate process so

618
00:24:59,100 --> 00:25:01,679
those would be plugged under exec eval

619
00:25:01,679 --> 00:25:05,280
or Fork apis so now basically we do

620
00:25:05,280 --> 00:25:07,020
rigorous API analysis and if any of

621
00:25:07,020 --> 00:25:09,600
these are found we we flag that for the

622
00:25:09,600 --> 00:25:12,179
developer to further investigate

623
00:25:12,179 --> 00:25:14,640
uh so in order in addition to doing

624
00:25:14,640 --> 00:25:16,740
metadata analysis static analysis we

625
00:25:16,740 --> 00:25:19,740
also do runtime analysis to detect

626
00:25:19,740 --> 00:25:21,900
attacks such as protest wear for example

627
00:25:21,900 --> 00:25:24,539
uh we compare the prior and current

628
00:25:24,539 --> 00:25:27,539
versions uh using Dynamic traces and if

629
00:25:27,539 --> 00:25:29,900
we see anything that's suspicious that's

630
00:25:29,900 --> 00:25:32,159
significantly different that could be

631
00:25:32,159 --> 00:25:34,760
flagged as malicious behavior right and

632
00:25:34,760 --> 00:25:37,500
the runtime analysis further improves

633
00:25:37,500 --> 00:25:40,260
detection accuracy because it uses both

634
00:25:40,260 --> 00:25:42,900
static and runtime and introduces false

635
00:25:42,900 --> 00:25:45,840
positives runtime analysis also helps us

636
00:25:45,840 --> 00:25:48,059
to determine platform-specific Behavior

637
00:25:48,059 --> 00:25:50,159
so sometimes the package looks just fine

638
00:25:50,159 --> 00:25:52,980
on Linux but on Windows it may exhibit a

639
00:25:52,980 --> 00:25:55,679
certain different Behavior

640
00:25:55,679 --> 00:25:58,919
so so that's a little bit about the tool

641
00:25:58,919 --> 00:26:01,260
so this is an example of a remote code

642
00:26:01,260 --> 00:26:03,600
execution attack this was a package that

643
00:26:03,600 --> 00:26:06,860
we found on on python uh on python

644
00:26:06,860 --> 00:26:09,779
package registry so as you can see here

645
00:26:09,779 --> 00:26:13,260
essentially uh what it's doing is it's

646
00:26:13,260 --> 00:26:17,220
reading a payload from this URL and then

647
00:26:17,220 --> 00:26:18,840
writing it to a file

648
00:26:18,840 --> 00:26:20,820
and then it's trying to launch a launch

649
00:26:20,820 --> 00:26:23,159
a separate process with the with the

650
00:26:23,159 --> 00:26:24,840
payload right so this could essentially

651
00:26:24,840 --> 00:26:27,120
be a bunch of things that could run as

652
00:26:27,120 --> 00:26:30,059
as a process that goes and reads files

653
00:26:30,059 --> 00:26:32,880
looks up your SSH Keys any of that could

654
00:26:32,880 --> 00:26:36,179
be in this downloaded payload which the

655
00:26:36,179 --> 00:26:37,620
payload obviously is not visible here

656
00:26:37,620 --> 00:26:40,980
but the the mechanism is clear for us to

657
00:26:40,980 --> 00:26:43,320
see so this this is what we found this

658
00:26:43,320 --> 00:26:45,659
was a package that was uploaded on Pi Pi

659
00:26:45,659 --> 00:26:48,059
and it had a few downloads so we looked

660
00:26:48,059 --> 00:26:50,220
at it and we reported this to the

661
00:26:50,220 --> 00:26:52,440
package managers on Pi Pi and then they

662
00:26:52,440 --> 00:26:54,919
took it down

663
00:26:54,919 --> 00:26:57,720
uh so I think we've gone through what

664
00:26:57,720 --> 00:26:59,520
some of the capabilities of our tool now

665
00:26:59,520 --> 00:27:02,880
I'll talk I'll walk uh through some of

666
00:27:02,880 --> 00:27:05,340
the attacks that we have found or we've

667
00:27:05,340 --> 00:27:08,100
come across in the in the last few

668
00:27:08,100 --> 00:27:10,020
um I think this one's the oldest but

669
00:27:10,020 --> 00:27:12,840
some of the others are more recent so if

670
00:27:12,840 --> 00:27:15,299
if package was involved in the detection

671
00:27:15,299 --> 00:27:18,840
how it would have avoided this attack

672
00:27:18,840 --> 00:27:21,600
right so this is uh this is a dependency

673
00:27:21,600 --> 00:27:23,100
confusion attack which happened in

674
00:27:23,100 --> 00:27:25,320
February 2021

675
00:27:25,320 --> 00:27:28,500
um so essentially as the the image image

676
00:27:28,500 --> 00:27:31,200
shows us the internal version had a

677
00:27:31,200 --> 00:27:35,039
version 1.0 and then the uh the hacker

678
00:27:35,039 --> 00:27:37,140
uploaded a higher version on the

679
00:27:37,140 --> 00:27:40,140
external repository and uh J frog

680
00:27:40,140 --> 00:27:42,240
artifactory which essentially is the

681
00:27:42,240 --> 00:27:44,880
tool that's looking at what it should do

682
00:27:44,880 --> 00:27:47,159
is confused because it sees that the

683
00:27:47,159 --> 00:27:49,320
internal is 1.0 but the external is a

684
00:27:49,320 --> 00:27:51,840
higher version so there was a default

685
00:27:51,840 --> 00:27:53,760
configuration in jfrog which would

686
00:27:53,760 --> 00:27:56,460
always prefer the higher version and

687
00:27:56,460 --> 00:27:57,659
therefore it goes to the external

688
00:27:57,659 --> 00:28:00,240
package when the external package is

689
00:28:00,240 --> 00:28:02,460
actually malicious

690
00:28:02,460 --> 00:28:04,020
so the method used was create a new

691
00:28:04,020 --> 00:28:05,279
malicious package with a higher version

692
00:28:05,279 --> 00:28:08,760
and this actually this is a bit old but

693
00:28:08,760 --> 00:28:11,940
the person who did this uh they were

694
00:28:11,940 --> 00:28:14,580
able to like attack companies like apple

695
00:28:14,580 --> 00:28:17,159
PayPal and Microsoft and they did it in

696
00:28:17,159 --> 00:28:19,200
an ethical way so they got their bug

697
00:28:19,200 --> 00:28:21,960
Bounty thing but if package was used in

698
00:28:21,960 --> 00:28:24,299
the detection it would have identified

699
00:28:24,299 --> 00:28:26,760
because the way uh name squatting and

700
00:28:26,760 --> 00:28:29,640
this attack was done is basically it

701
00:28:29,640 --> 00:28:32,720
just imported the original package and

702
00:28:32,720 --> 00:28:34,980
it didn't do anything much right so

703
00:28:34,980 --> 00:28:37,200
essentially the lines of code in the in

704
00:28:37,200 --> 00:28:41,039
this new version 69 69 was very very

705
00:28:41,039 --> 00:28:43,200
small right and there's no public GitHub

706
00:28:43,200 --> 00:28:45,120
repo that was found so if they use

707
00:28:45,120 --> 00:28:48,539
package a tool for the for a protection

708
00:28:48,539 --> 00:28:52,159
they would have detected this attack

709
00:28:52,159 --> 00:28:55,440
so this one's more recent it's called

710
00:28:55,440 --> 00:28:57,840
it's basically the CTX package hack this

711
00:28:57,840 --> 00:28:59,640
happened in July

712
00:28:59,640 --> 00:29:02,159
um very recent so this one's uh

713
00:29:02,159 --> 00:29:03,600
particularly interesting because even

714
00:29:03,600 --> 00:29:06,240
today on there was a research paper that

715
00:29:06,240 --> 00:29:07,919
came out it said that there's about 2

716
00:29:07,919 --> 00:29:09,779
800 or so

717
00:29:09,779 --> 00:29:13,740
um accounts that packages that that have

718
00:29:13,740 --> 00:29:16,140
an expired email account

719
00:29:16,140 --> 00:29:18,720
um so there's still a lot of you know

720
00:29:18,720 --> 00:29:20,760
accounts out there that have that have

721
00:29:20,760 --> 00:29:22,440
email accounts there are still packages

722
00:29:22,440 --> 00:29:23,820
out there that have expired email

723
00:29:23,820 --> 00:29:26,399
accounts that could be exploited so in

724
00:29:26,399 --> 00:29:28,620
this case what the attacker did is they

725
00:29:28,620 --> 00:29:31,559
used the bot to scan python packages and

726
00:29:31,559 --> 00:29:34,039
check for expired email domains

727
00:29:34,039 --> 00:29:37,500
and once they found one they just bought

728
00:29:37,500 --> 00:29:40,559
a domain for five dollars and created an

729
00:29:40,559 --> 00:29:43,260
email ID associated with that domain and

730
00:29:43,260 --> 00:29:44,940
then they just hit forgot password right

731
00:29:44,940 --> 00:29:47,760
and then they got a uh they got an email

732
00:29:47,760 --> 00:29:50,520
to take over and you change the password

733
00:29:50,520 --> 00:29:53,460
and essentially take over the package

734
00:29:53,460 --> 00:29:55,860
um and then the attacker went ahead and

735
00:29:55,860 --> 00:29:58,260
published malicious new version versions

736
00:29:58,260 --> 00:30:01,200
as well as replaced the known good

737
00:30:01,200 --> 00:30:04,559
version so and then what this malicious

738
00:30:04,559 --> 00:30:07,320
new package or the replaced package did

739
00:30:07,320 --> 00:30:10,200
was would steal your AWS credentials and

740
00:30:10,200 --> 00:30:13,799
send them over to a remote Heroku app

741
00:30:13,799 --> 00:30:16,559
now CTX is turns out to be a very

742
00:30:16,559 --> 00:30:19,500
popular application package which with

743
00:30:19,500 --> 00:30:22,799
over 22 000 weekly downloads So within

744
00:30:22,799 --> 00:30:25,559
three days of when this package was up

745
00:30:25,559 --> 00:30:27,840
there they were at 7 000 odd downloads

746
00:30:27,840 --> 00:30:29,240
of the package

747
00:30:29,240 --> 00:30:31,919
so and then the person who did the

748
00:30:31,919 --> 00:30:33,899
attack came out on the he wrote a medium

749
00:30:33,899 --> 00:30:36,539
blog and explained you know that he did

750
00:30:36,539 --> 00:30:39,960
this and some reasons why if if the

751
00:30:39,960 --> 00:30:42,419
package tool was used for detection then

752
00:30:42,419 --> 00:30:44,700
we would have immediately detected an

753
00:30:44,700 --> 00:30:47,340
expired email domain and we would have

754
00:30:47,340 --> 00:30:49,799
also the this this domain this package

755
00:30:49,799 --> 00:30:52,020
was essentially two years old so there

756
00:30:52,020 --> 00:30:53,520
were no updates to the package for two

757
00:30:53,520 --> 00:30:55,679
years and then suddenly someone uploaded

758
00:30:55,679 --> 00:30:58,980
uh an update right so that's uh anomaly

759
00:30:58,980 --> 00:31:01,260
so our tool would have detected that so

760
00:31:01,260 --> 00:31:03,299
the package was over two years old and

761
00:31:03,299 --> 00:31:05,399
then we would have detected using our

762
00:31:05,399 --> 00:31:07,200
static analysis we would have detected

763
00:31:07,200 --> 00:31:10,520
the suspicious API calls to send

764
00:31:10,520 --> 00:31:14,960
messages to a remote server

765
00:31:14,960 --> 00:31:18,120
uh and then this one is basically the

766
00:31:18,120 --> 00:31:20,100
colors and Faker attack now this the

767
00:31:20,100 --> 00:31:21,299
reason why I'm covering this is

768
00:31:21,299 --> 00:31:24,240
essentially this is an attack where it's

769
00:31:24,240 --> 00:31:27,000
just a person who decides to protest

770
00:31:27,000 --> 00:31:29,700
against something right so it's a person

771
00:31:29,700 --> 00:31:31,620
who's been a good developer a Good

772
00:31:31,620 --> 00:31:34,380
Samaritan or a good citizen for most of

773
00:31:34,380 --> 00:31:36,000
the you know their tenure as an open

774
00:31:36,000 --> 00:31:38,279
source developer and then they are

775
00:31:38,279 --> 00:31:41,039
unhappy about maintaining software not

776
00:31:41,039 --> 00:31:42,779
getting paid well you know compensated

777
00:31:42,779 --> 00:31:45,419
well enough so they essentially sabotage

778
00:31:45,419 --> 00:31:47,700
their own package right so this is an

779
00:31:47,700 --> 00:31:49,919
attack that you really can't use any

780
00:31:49,919 --> 00:31:53,460
other like means to detect

781
00:31:53,460 --> 00:31:55,140
um even if we use two-factor

782
00:31:55,140 --> 00:31:56,940
authentication

783
00:31:56,940 --> 00:31:59,880
um the signing of packages and all of

784
00:31:59,880 --> 00:32:01,500
those methods right

785
00:32:01,500 --> 00:32:04,919
um so what the developer did was added

786
00:32:04,919 --> 00:32:06,899
an infinite Loop to colors.js that

787
00:32:06,899 --> 00:32:10,799
printed garbage and uh uh so faker.js

788
00:32:10,799 --> 00:32:13,500
used to generate data it used to

789
00:32:13,500 --> 00:32:15,659
generate artificial data that was used

790
00:32:15,659 --> 00:32:18,779
in a lot of experiments and what the

791
00:32:18,779 --> 00:32:20,820
attacker did is they started to generate

792
00:32:20,820 --> 00:32:22,799
like corrupted and bad data so it broke

793
00:32:22,799 --> 00:32:24,840
a lot of applications

794
00:32:24,840 --> 00:32:28,620
um as you can see colors.js had like 23

795
00:32:28,620 --> 00:32:32,520
million downloads uh a week and 19

796
00:32:32,520 --> 00:32:34,700
000 dependent projects for using it

797
00:32:34,700 --> 00:32:37,919
similarly faker.js had 2.4 million

798
00:32:37,919 --> 00:32:40,559
downloads a week and uh that's not

799
00:32:40,559 --> 00:32:42,120
around two and a half thousand dependent

800
00:32:42,120 --> 00:32:45,140
projects so if they would have if if if

801
00:32:45,140 --> 00:32:48,179
the developers would have used uh our

802
00:32:48,179 --> 00:32:49,679
package tool

803
00:32:49,679 --> 00:32:51,600
um our you know static and dynamic

804
00:32:51,600 --> 00:32:53,220
analysis would have detected these

805
00:32:53,220 --> 00:32:55,320
infinite loops and then alerted them

806
00:32:55,320 --> 00:32:57,299
that hey something's broken so don't use

807
00:32:57,299 --> 00:33:00,500
this particular version

808
00:33:01,020 --> 00:33:03,899
so that kind of covers the uh some of

809
00:33:03,899 --> 00:33:06,179
the features of the tool and you know

810
00:33:06,179 --> 00:33:08,159
where it can be useful and what attacks

811
00:33:08,159 --> 00:33:10,799
it can prevent so we'll go to a quick

812
00:33:10,799 --> 00:33:13,860
demo of the of the tool

813
00:33:13,860 --> 00:33:16,820
I don't know

814
00:33:22,019 --> 00:33:24,240
so I'll basically use it on on two

815
00:33:24,240 --> 00:33:26,279
packages and I'll kind of try to show

816
00:33:26,279 --> 00:33:29,340
what's interesting about uh I think it's

817
00:33:29,340 --> 00:33:31,019
a little bit on the side I'm not sure if

818
00:33:31,019 --> 00:33:34,200
everyone can can see but I'll probably

819
00:33:34,200 --> 00:33:36,419
talk about it

820
00:33:36,419 --> 00:33:39,840
so first we'll audit an npm package

821
00:33:39,840 --> 00:33:42,720
called browserify so it's uh

822
00:33:42,720 --> 00:33:43,919
it's

823
00:33:43,919 --> 00:33:46,380
we'll look at the metadata to see why

824
00:33:46,380 --> 00:33:48,720
it's interesting

825
00:33:48,720 --> 00:33:51,059
so as you can see um we're running the

826
00:33:51,059 --> 00:33:53,100
package tool in a in a Docker container

827
00:33:53,100 --> 00:33:55,080
so it's kind of sanitized and

828
00:33:55,080 --> 00:33:57,480
containerized there's no risk of running

829
00:33:57,480 --> 00:33:59,039
this on your on your machine because

830
00:33:59,039 --> 00:34:02,340
it's running inside a container

831
00:34:02,340 --> 00:34:04,940
so as you can see here the this

832
00:34:04,940 --> 00:34:07,620
browserify package actually has two

833
00:34:07,620 --> 00:34:09,599
million downloads a week so it's really

834
00:34:09,599 --> 00:34:10,940
popular

835
00:34:10,940 --> 00:34:15,119
but it has an expired email domain right

836
00:34:15,119 --> 00:34:17,280
so that's a big red flag because someone

837
00:34:17,280 --> 00:34:20,879
could potentially buy a a domain you

838
00:34:20,879 --> 00:34:23,460
know at whatever that can be purchased

839
00:34:23,460 --> 00:34:26,339
and then like sub stack.net could be

840
00:34:26,339 --> 00:34:28,800
purchased and then an email ID could be

841
00:34:28,800 --> 00:34:30,659
created and someone could take over this

842
00:34:30,659 --> 00:34:34,800
this package as you can see it's it

843
00:34:34,800 --> 00:34:37,440
still does 2 million downloads a week

844
00:34:37,440 --> 00:34:39,480
but it's vulnerable to an account

845
00:34:39,480 --> 00:34:42,119
hijacking attack

846
00:34:42,119 --> 00:34:46,639
and it has and some of the other

847
00:34:47,760 --> 00:34:50,520
we found a lot of dependencies so

848
00:34:50,520 --> 00:34:52,619
that's not that's generally something to

849
00:34:52,619 --> 00:34:54,418
look at why the package has a lot of

850
00:34:54,418 --> 00:34:56,099
dependencies you might be able to look

851
00:34:56,099 --> 00:34:58,560
at what you want to may want to vet

852
00:34:58,560 --> 00:35:00,240
these dependencies themselves to see

853
00:35:00,240 --> 00:35:02,280
that whether it's a healthy package or

854
00:35:02,280 --> 00:35:04,260
not to use in your software

855
00:35:04,260 --> 00:35:06,780
so that's a npm package called

856
00:35:06,780 --> 00:35:09,480
browserify now we look at a python

857
00:35:09,480 --> 00:35:12,480
package called request with a version

858
00:35:12,480 --> 00:35:15,240
2184 so this is a slightly older version

859
00:35:15,240 --> 00:35:17,640
of this package but why it's interesting

860
00:35:17,640 --> 00:35:20,280
we'll see in a moment

861
00:35:20,280 --> 00:35:21,900
foreign

862
00:35:21,900 --> 00:35:24,119
so the tool basically looks at all this

863
00:35:24,119 --> 00:35:26,339
metadata and it will check the home page

864
00:35:26,339 --> 00:35:28,560
for validity it downloads the package

865
00:35:28,560 --> 00:35:31,079
and then looks at the static analysis of

866
00:35:31,079 --> 00:35:32,900
the package and then provides a report

867
00:35:32,900 --> 00:35:35,700
now here you'll see that this is an

868
00:35:35,700 --> 00:35:38,040
older version and it actually has two

869
00:35:38,040 --> 00:35:41,640
cves which are known vulnerabilities but

870
00:35:41,640 --> 00:35:45,000
it still receives 55.7 million downloads

871
00:35:45,000 --> 00:35:47,220
a week so for some reason developers

872
00:35:47,220 --> 00:35:48,900
still have not upgraded to the latest

873
00:35:48,900 --> 00:35:52,500
version even though this is having two

874
00:35:52,500 --> 00:35:54,300
known CVS and it's a pretty old version

875
00:35:54,300 --> 00:35:57,480
right so this is again trying to show

876
00:35:57,480 --> 00:35:59,760
that as developers we're not doing the

877
00:35:59,760 --> 00:36:01,500
due diligence and not upgrading to the

878
00:36:01,500 --> 00:36:03,240
new packages the new versions of

879
00:36:03,240 --> 00:36:05,280
packages in spite of the fact that there

880
00:36:05,280 --> 00:36:07,320
are vulnerabilities in these in this

881
00:36:07,320 --> 00:36:09,859
package version

882
00:36:10,020 --> 00:36:11,820
oh

883
00:36:11,820 --> 00:36:15,300
so our tool comes in two flavors one is

884
00:36:15,300 --> 00:36:18,480
the uh what I just showed you was the

885
00:36:18,480 --> 00:36:20,640
um the the Standalone tool so we also

886
00:36:20,640 --> 00:36:23,599
have a A Thin Client which is like a a

887
00:36:23,599 --> 00:36:27,180
client that runs on your machine but you

888
00:36:27,180 --> 00:36:30,240
hook it up to a cloud SAS service so

889
00:36:30,240 --> 00:36:33,720
I'll demonstrate that in a minute so we

890
00:36:33,720 --> 00:36:35,520
have uh

891
00:36:35,520 --> 00:36:38,480
what we what we basically call as

892
00:36:38,480 --> 00:36:41,220
package.dev which is our

893
00:36:41,220 --> 00:36:41,760
um

894
00:36:41,760 --> 00:36:44,940
which is our Cloud counterpart to the to

895
00:36:44,940 --> 00:36:47,220
the Standalone tool and here you can

896
00:36:47,220 --> 00:36:50,220
create an account and it's a free

897
00:36:50,220 --> 00:36:52,020
account you can log in and you can

898
00:36:52,020 --> 00:36:55,200
actually View and search for a lot of

899
00:36:55,200 --> 00:36:57,119
packages here and get detailed reports

900
00:36:57,119 --> 00:37:00,780
uh on each of those packages uh and and

901
00:37:00,780 --> 00:37:03,540
as you can see we we ran a we ran a scan

902
00:37:03,540 --> 00:37:07,800
on day tutors now I will show you so

903
00:37:07,800 --> 00:37:09,720
this is the one that shows up at the end

904
00:37:09,720 --> 00:37:12,119
in September I just planned this scan

905
00:37:12,119 --> 00:37:16,800
using the The Thin Client and

906
00:37:19,079 --> 00:37:22,579
so we can look at this report

907
00:37:26,280 --> 00:37:28,859
so what's interesting about this package

908
00:37:28,859 --> 00:37:32,040
is that you know it's it's used uh quite

909
00:37:32,040 --> 00:37:34,260
a lot it's got 45

910
00:37:34,260 --> 00:37:36,420
000 downloads a week

911
00:37:36,420 --> 00:37:38,400
um but it has a bunch of things that are

912
00:37:38,400 --> 00:37:40,980
suspicious like it has an install hook

913
00:37:40,980 --> 00:37:43,260
um it hasn't been updated in a long time

914
00:37:43,260 --> 00:37:45,480
and it doesn't have that many releases

915
00:37:45,480 --> 00:37:47,940
so it's essentially uh pretty much an

916
00:37:47,940 --> 00:37:50,040
abandoned package but it's still very

917
00:37:50,040 --> 00:37:52,579
popular and it's used a lot

918
00:37:52,579 --> 00:37:56,099
and it has some weird things that you

919
00:37:56,099 --> 00:37:57,599
know you might want to go and look at

920
00:37:57,599 --> 00:38:00,599
essentially it's installing running some

921
00:38:00,599 --> 00:38:02,420
hooks at install time

922
00:38:02,420 --> 00:38:04,680
and then there's some other sensitive

923
00:38:04,680 --> 00:38:07,800
apis that it calls right so

924
00:38:07,800 --> 00:38:10,440
so yeah so we have this uh we have this

925
00:38:10,440 --> 00:38:13,200
uh web uh we have the SAS API called

926
00:38:13,200 --> 00:38:16,020
package.dev that's a you know we have

927
00:38:16,020 --> 00:38:19,619
our GitHub which is uh

928
00:38:19,619 --> 00:38:21,900
available here

929
00:38:21,900 --> 00:38:24,359
um so this is the Standalone version and

930
00:38:24,359 --> 00:38:26,220
we we're doing you know we're getting

931
00:38:26,220 --> 00:38:27,660
good traction from the developer

932
00:38:27,660 --> 00:38:29,940
Community we have about uh 200 plus

933
00:38:29,940 --> 00:38:33,660
Stars uh and this GitHub is it basically

934
00:38:33,660 --> 00:38:37,440
explains uh all the features of our tool

935
00:38:37,440 --> 00:38:39,619
um and

936
00:38:39,619 --> 00:38:42,000
essentially yeah you can please take a

937
00:38:42,000 --> 00:38:43,260
look

938
00:38:43,260 --> 00:38:45,300
and it explains the features how it

939
00:38:45,300 --> 00:38:47,220
works we're also adding a new sandboxing

940
00:38:47,220 --> 00:38:49,079
capability that I didn't talk about

941
00:38:49,079 --> 00:38:52,260
today but it's uh it's up and coming and

942
00:38:52,260 --> 00:38:55,800
it's uh in progress work in progress

943
00:38:55,800 --> 00:38:56,339
um

944
00:38:56,339 --> 00:38:59,280
and yeah and then this is the tool that

945
00:38:59,280 --> 00:39:04,220
is powering our uh the the SAS

946
00:39:04,220 --> 00:39:06,960
service that I talked about so these are

947
00:39:06,960 --> 00:39:09,780
the so this would be you know so we

948
00:39:09,780 --> 00:39:12,660
basically would uh we're opening this up

949
00:39:12,660 --> 00:39:17,760
to developers and Enterprises to uh to

950
00:39:17,760 --> 00:39:20,040
the the SAS API version has a lot of

951
00:39:20,040 --> 00:39:22,980
detailed reports and it'll help security

952
00:39:22,980 --> 00:39:25,800
audit teams to look at what a package

953
00:39:25,800 --> 00:39:27,960
Health looks like before it gets adopted

954
00:39:27,960 --> 00:39:31,339
for use within the organization

955
00:39:31,500 --> 00:39:34,740
so I think that's pretty much uh

956
00:39:34,740 --> 00:39:38,460
what I had today uh I think we ran

957
00:39:38,460 --> 00:39:39,859
through the

958
00:39:39,859 --> 00:39:43,859
the we went to the website

959
00:39:43,859 --> 00:39:46,619
um so just to add that the cloud-based

960
00:39:46,619 --> 00:39:48,500
SAS

961
00:39:48,500 --> 00:39:50,760
functionality it brings us you know

962
00:39:50,760 --> 00:39:52,020
premium features like Providence

963
00:39:52,020 --> 00:39:55,020
detection and type of squatting support

964
00:39:55,020 --> 00:39:56,940
um you can customize your alerts and

965
00:39:56,940 --> 00:39:58,920
thresholds for like

966
00:39:58,920 --> 00:40:01,500
um how many you know how many like how

967
00:40:01,500 --> 00:40:04,440
old would you you know would you be okay

968
00:40:04,440 --> 00:40:06,839
for a package to be those kind of

969
00:40:06,839 --> 00:40:10,020
settings can be uh customized and then

970
00:40:10,020 --> 00:40:13,380
it uses Advanced Techniques like you

971
00:40:13,380 --> 00:40:16,320
know uh deeper longitude like it does

972
00:40:16,320 --> 00:40:18,060
Deeper historical analysis of code and

973
00:40:18,060 --> 00:40:20,040
longitudinal analysis of several

974
00:40:20,040 --> 00:40:21,720
features to do anomaly detection because

975
00:40:21,720 --> 00:40:24,240
we have more compute on the cloud so we

976
00:40:24,240 --> 00:40:27,540
can do all these uh Advanced you know

977
00:40:27,540 --> 00:40:30,240
mechanisms that provide us more accurate

978
00:40:30,240 --> 00:40:32,940
data it saves compute and space for end

979
00:40:32,940 --> 00:40:34,500
users because you're not downloading the

980
00:40:34,500 --> 00:40:36,960
package and scanning it on your computer

981
00:40:36,960 --> 00:40:39,000
but it's being done on the cloud and you

982
00:40:39,000 --> 00:40:41,160
can just look at the report if you need

983
00:40:41,160 --> 00:40:41,880
to

984
00:40:41,880 --> 00:40:44,940
and uh yeah and then more advanced more

985
00:40:44,940 --> 00:40:46,500
detailed reports like dependencies and

986
00:40:46,500 --> 00:40:48,060
dependence

987
00:40:48,060 --> 00:40:49,560
um detail code analysis and direct

988
00:40:49,560 --> 00:40:51,540
pointers to suspicious code as I showed

989
00:40:51,540 --> 00:40:53,940
you you can link to the GitHub directly

990
00:40:53,940 --> 00:40:56,579
from the uh from the web portal and

991
00:40:56,579 --> 00:40:58,140
we'll show you where what line of code

992
00:40:58,140 --> 00:41:00,660
is looking for a potentially interesting

993
00:41:00,660 --> 00:41:04,399
or malicious for you to audit

994
00:41:04,859 --> 00:41:08,940
so uh lastly basically we reported some

995
00:41:08,940 --> 00:41:11,700
of our findings to uh python package

996
00:41:11,700 --> 00:41:12,980
manager

997
00:41:12,980 --> 00:41:15,180
maintainers so these were the packages

998
00:41:15,180 --> 00:41:17,579
that we reported so we report about 40

999
00:41:17,579 --> 00:41:20,280
malware you know packages that were

1000
00:41:20,280 --> 00:41:23,700
malware and our website has if you go to

1001
00:41:23,700 --> 00:41:26,520
package.dev which is our website you'll

1002
00:41:26,520 --> 00:41:28,980
find our blogs on each of these packages

1003
00:41:28,980 --> 00:41:31,920
and we reported these and they have now

1004
00:41:31,920 --> 00:41:34,500
been taken down by the python

1005
00:41:34,500 --> 00:41:36,660
maintainers the package in a Wi-Fi

1006
00:41:36,660 --> 00:41:38,700
maintainers

1007
00:41:38,700 --> 00:41:39,780
thank you

1008
00:41:39,780 --> 00:41:42,119
so yeah I think that's I think we're

1009
00:41:42,119 --> 00:41:44,160
about time uh

1010
00:41:44,160 --> 00:41:45,420
um that's pretty much what I want to

1011
00:41:45,420 --> 00:41:47,820
cover what I wanted to cover this is our

1012
00:41:47,820 --> 00:41:49,140
GitHub

1013
00:41:49,140 --> 00:41:49,859
um

1014
00:41:49,859 --> 00:41:52,740
uh basically our company has the

1015
00:41:52,740 --> 00:41:54,420
oscillate GitHub and then package can be

1016
00:41:54,420 --> 00:41:57,000
found there and package.dev information

1017
00:41:57,000 --> 00:41:59,760
can also be found there and this work is

1018
00:41:59,760 --> 00:42:03,359
powered by oscillate

1019
00:42:03,359 --> 00:42:05,080
thank you

1020
00:42:05,080 --> 00:42:08,770
[Applause]

