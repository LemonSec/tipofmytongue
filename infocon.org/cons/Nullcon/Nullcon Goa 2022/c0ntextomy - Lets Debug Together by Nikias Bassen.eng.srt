1
00:00:02,879 --> 00:00:06,859
uh yeah I think I can start

2
00:00:06,960 --> 00:00:08,760
so

3
00:00:08,760 --> 00:00:12,780
context to me let's debug together

4
00:00:12,780 --> 00:00:13,860
um

5
00:00:13,860 --> 00:00:16,619
so I already was introduced this

6
00:00:16,619 --> 00:00:20,039
research was done with the help of a

7
00:00:20,039 --> 00:00:24,840
fellow researcher uh Danny nizianski and

8
00:00:24,840 --> 00:00:25,859
um

9
00:00:25,859 --> 00:00:28,519
so

10
00:00:29,699 --> 00:00:32,579
um I have been

11
00:00:32,579 --> 00:00:35,460
um working on iOS jailbreaks a long time

12
00:00:35,460 --> 00:00:36,680
ago already

13
00:00:36,680 --> 00:00:40,020
absence evasion and more recently also

14
00:00:40,020 --> 00:00:42,960
on uh check rain I'm lip I'm over device

15
00:00:42,960 --> 00:00:45,120
maintainer and

16
00:00:45,120 --> 00:00:47,780
um I'm handling a research and

17
00:00:47,780 --> 00:00:51,420
implementation of threat detections on

18
00:00:51,420 --> 00:00:53,520
iOS at the Imperium

19
00:00:53,520 --> 00:00:56,340
in the research Department

20
00:00:56,340 --> 00:00:57,059
um

21
00:00:57,059 --> 00:00:59,160
and yeah my fellow researcher he's

22
00:00:59,160 --> 00:01:02,399
independent and is doing random iOS and

23
00:01:02,399 --> 00:01:05,400
Mac OS vulnerability research and he has

24
00:01:05,400 --> 00:01:08,400
also been involved in a recent jailbreak

25
00:01:08,400 --> 00:01:09,500
development

26
00:01:09,500 --> 00:01:11,820
checkering it's not that recent anymore

27
00:01:11,820 --> 00:01:14,100
but yeah

28
00:01:14,100 --> 00:01:17,820
so the agenda for this talk today

29
00:01:17,820 --> 00:01:20,939
first I will give a short introduction

30
00:01:20,939 --> 00:01:22,619
covering

31
00:01:22,619 --> 00:01:24,000
uh

32
00:01:24,000 --> 00:01:27,479
lockdown D and device services and then

33
00:01:27,479 --> 00:01:32,100
go over a few uh past vulnerabilities

34
00:01:32,100 --> 00:01:32,700
um

35
00:01:32,700 --> 00:01:34,680
from that area

36
00:01:34,680 --> 00:01:37,259
and then I will cover the discovery and

37
00:01:37,259 --> 00:01:39,060
the research of the actual variability

38
00:01:39,060 --> 00:01:41,100
that I'm presenting about today

39
00:01:41,100 --> 00:01:46,140
and later the exploitation

40
00:01:46,140 --> 00:01:48,000
and also

41
00:01:48,000 --> 00:01:50,340
um a short section about the

42
00:01:50,340 --> 00:01:53,700
vulnerability disclosure and the fix

43
00:01:53,700 --> 00:01:57,540
and of course some q a in the end

44
00:01:57,540 --> 00:02:00,479
so let's get right into it

45
00:02:00,479 --> 00:02:01,680
so

46
00:02:01,680 --> 00:02:05,340
um on iOS there's a demon running

47
00:02:05,340 --> 00:02:07,799
um it's called lockdown D and that's the

48
00:02:07,799 --> 00:02:09,598
main service demon it's always running

49
00:02:09,598 --> 00:02:12,959
it handles device pairing between the

50
00:02:12,959 --> 00:02:14,640
pairing between device and the host

51
00:02:14,640 --> 00:02:15,500
computer

52
00:02:15,500 --> 00:02:18,379
it provides device information

53
00:02:18,379 --> 00:02:22,440
it's responsible for service startup

54
00:02:22,440 --> 00:02:25,260
um originally the implementation was

55
00:02:25,260 --> 00:02:29,819
just USB only and later Wi-Fi support

56
00:02:29,819 --> 00:02:32,040
was added

57
00:02:32,040 --> 00:02:32,940
um

58
00:02:32,940 --> 00:02:36,260
services on iOS have

59
00:02:36,260 --> 00:02:40,560
multiple different purposes for example

60
00:02:40,560 --> 00:02:43,680
backup file transfer app and profile

61
00:02:43,680 --> 00:02:47,040
management system logs Diagnostics and

62
00:02:47,040 --> 00:02:49,920
if you mount a developer disk image you

63
00:02:49,920 --> 00:02:51,300
can also get debugging and

64
00:02:51,300 --> 00:02:53,920
instrumentation capabilities

65
00:02:53,920 --> 00:02:54,300
[Music]

66
00:02:54,300 --> 00:02:55,200
um

67
00:02:55,200 --> 00:02:58,340
wireless connection support has been

68
00:02:58,340 --> 00:03:01,580
available for quite some time already

69
00:03:01,580 --> 00:03:05,280
starting with iOS 5 and all the services

70
00:03:05,280 --> 00:03:08,340
the connections they require SSL which

71
00:03:08,340 --> 00:03:11,220
is not the case on like if it goes over

72
00:03:11,220 --> 00:03:12,959
the wire

73
00:03:12,959 --> 00:03:16,080
um starting with iOS 11 Apple introduced

74
00:03:16,080 --> 00:03:19,440
Wireless debugging and that's what this

75
00:03:19,440 --> 00:03:22,400
vulnerability is about

76
00:03:23,340 --> 00:03:26,220
um some past vulnerabilities just to get

77
00:03:26,220 --> 00:03:29,400
a little history and background about a

78
00:03:29,400 --> 00:03:31,099
few things that

79
00:03:31,099 --> 00:03:35,400
me and also Danny discovered over the

80
00:03:35,400 --> 00:03:37,260
years

81
00:03:37,260 --> 00:03:40,379
um so one of them is a directory

82
00:03:40,379 --> 00:03:42,780
traversal which is actually leveraging

83
00:03:42,780 --> 00:03:46,560
two services to pull it off

84
00:03:46,560 --> 00:03:48,780
um basically the fire

85
00:03:48,780 --> 00:03:52,080
um the AFC service which is short for

86
00:03:52,080 --> 00:03:54,360
Apple file conduit

87
00:03:54,360 --> 00:03:56,879
um allows or allowed in the past not

88
00:03:56,879 --> 00:04:00,239
anymore to create uh some links but it's

89
00:04:00,239 --> 00:04:02,159
a jet environment however you could

90
00:04:02,159 --> 00:04:04,019
still point to sim link to whatever

91
00:04:04,019 --> 00:04:05,640
location you want

92
00:04:05,640 --> 00:04:08,280
if you then put a SIM Link at a specific

93
00:04:08,280 --> 00:04:10,920
location and create a crafted backup

94
00:04:10,920 --> 00:04:13,500
that restores to that location and you

95
00:04:13,500 --> 00:04:15,720
then restart that backup it would write

96
00:04:15,720 --> 00:04:17,579
to the location that the link points to

97
00:04:17,579 --> 00:04:21,000
instead of the the actual directory that

98
00:04:21,000 --> 00:04:23,880
was used in the absence to jailbreak

99
00:04:23,880 --> 00:04:27,479
back for IOS 5.1 right

100
00:04:27,479 --> 00:04:29,759
a long time ago

101
00:04:29,759 --> 00:04:31,820
um

102
00:04:32,160 --> 00:04:35,400
um backup agents uh like so the backup

103
00:04:35,400 --> 00:04:37,800
service itself also had a directory

104
00:04:37,800 --> 00:04:39,060
traveler so

105
00:04:39,060 --> 00:04:40,979
um because it has quite some nice

106
00:04:40,979 --> 00:04:44,540
features it allows to create uh like to

107
00:04:44,540 --> 00:04:48,360
backup and restore some links

108
00:04:48,360 --> 00:04:51,419
and basically it's it's a very similar

109
00:04:51,419 --> 00:04:54,300
idea you need to have a location that

110
00:04:54,300 --> 00:04:56,880
you have access to and

111
00:04:56,880 --> 00:05:00,000
for the backup service there are certain

112
00:05:00,000 --> 00:05:01,800
paths that are allowed so you cannot

113
00:05:01,800 --> 00:05:04,560
just put it anywhere but basically one

114
00:05:04,560 --> 00:05:06,320
of these backup domains

115
00:05:06,320 --> 00:05:09,660
you can just add a Sim link and have it

116
00:05:09,660 --> 00:05:11,639
point to the location that you want to

117
00:05:11,639 --> 00:05:13,380
write to

118
00:05:13,380 --> 00:05:16,320
um and then you can just like in the

119
00:05:16,320 --> 00:05:18,540
same order like the same link then you

120
00:05:18,540 --> 00:05:19,560
add

121
00:05:19,560 --> 00:05:22,500
um the files that you want with the

122
00:05:22,500 --> 00:05:24,479
um pointing to a directory and then you

123
00:05:24,479 --> 00:05:27,840
add like additional entries for uh that

124
00:05:27,840 --> 00:05:30,360
specific uh directory and then when you

125
00:05:30,360 --> 00:05:33,120
restore the backup it would create the

126
00:05:33,120 --> 00:05:35,280
files at the location that the link to

127
00:05:35,280 --> 00:05:38,340
points uh points to instead and that was

128
00:05:38,340 --> 00:05:43,680
used in the evasion Jailbreak IOS S6

129
00:05:43,680 --> 00:05:45,840
um another vulnerability

130
00:05:45,840 --> 00:05:49,740
um which uh actually got a cve but it's

131
00:05:49,740 --> 00:05:51,539
very simple

132
00:05:51,539 --> 00:05:53,820
um so lockdown the

133
00:05:53,820 --> 00:05:55,620
um

134
00:05:55,620 --> 00:05:59,460
uh has some code that runs when it

135
00:05:59,460 --> 00:06:02,160
started and it's performing some cleanup

136
00:06:02,160 --> 00:06:05,520
tasks and some migration tasks and some

137
00:06:05,520 --> 00:06:09,479
um checks and one of these tasks was to

138
00:06:09,479 --> 00:06:12,240
change the permissions of a certain file

139
00:06:12,240 --> 00:06:15,060
and um but there are no checks

140
00:06:15,060 --> 00:06:18,419
whatsoever so basically using the

141
00:06:18,419 --> 00:06:20,340
vulnerability that I mentioned before

142
00:06:20,340 --> 00:06:22,740
the directory traversal

143
00:06:22,740 --> 00:06:23,819
um

144
00:06:23,819 --> 00:06:27,180
with a Sim Link in the backup you could

145
00:06:27,180 --> 00:06:28,460
basically

146
00:06:28,460 --> 00:06:31,680
restore your craft it back up and then

147
00:06:31,680 --> 00:06:34,620
have lock down the

148
00:06:34,620 --> 00:06:37,050
um basically change the permissions

149
00:06:37,050 --> 00:06:37,860
[Music]

150
00:06:37,860 --> 00:06:38,639
um

151
00:06:38,639 --> 00:06:41,819
when you restart it and now it's like

152
00:06:41,819 --> 00:06:43,680
always running but if you want to

153
00:06:43,680 --> 00:06:46,020
restart it you just have to make it

154
00:06:46,020 --> 00:06:48,120
crash so basically send the malformed

155
00:06:48,120 --> 00:06:50,880
request to it and then it just crashes

156
00:06:50,880 --> 00:06:54,180
um nowadays it's um doing a lot more

157
00:06:54,180 --> 00:06:55,860
um sanity checks so it's not that easy

158
00:06:55,860 --> 00:06:58,560
to crash it anymore but uh I think there

159
00:06:58,560 --> 00:07:00,840
are still some ways to do it but anyway

160
00:07:00,840 --> 00:07:02,340
so

161
00:07:02,340 --> 00:07:02,940
um

162
00:07:02,940 --> 00:07:05,520
yeah you just you just had to create

163
00:07:05,520 --> 00:07:06,960
this fixed path

164
00:07:06,960 --> 00:07:09,419
um with assembling and then write that

165
00:07:09,419 --> 00:07:11,220
specific file name the time zone file

166
00:07:11,220 --> 00:07:12,060
name

167
00:07:12,060 --> 00:07:13,919
um to the backup just as assembling

168
00:07:13,919 --> 00:07:15,479
pointing to whatever file you wanted

169
00:07:15,479 --> 00:07:17,639
wanted to change and the interesting

170
00:07:17,639 --> 00:07:20,099
thing here is if I remember correctly

171
00:07:20,099 --> 00:07:22,759
you can even

172
00:07:22,979 --> 00:07:25,620
um make it point to

173
00:07:25,620 --> 00:07:30,120
um do a different file system

174
00:07:30,120 --> 00:07:31,380
um

175
00:07:31,380 --> 00:07:33,720
yeah so that was also used in the

176
00:07:33,720 --> 00:07:36,000
evasion jailbreak for io6

177
00:07:36,000 --> 00:07:39,000
a more recent vulnerability

178
00:07:39,000 --> 00:07:43,380
um is called or was named launch down by

179
00:07:43,380 --> 00:07:47,460
Danny and so basically when you mounted

180
00:07:47,460 --> 00:07:51,960
developer this image the process that

181
00:07:51,960 --> 00:07:54,720
handles the mounting procedure will send

182
00:07:54,720 --> 00:07:56,840
a notification

183
00:07:56,840 --> 00:07:59,880
and lockdown D and the installation

184
00:07:59,880 --> 00:08:01,520
demand install the

185
00:08:01,520 --> 00:08:05,699
they will observe or listen for this

186
00:08:05,699 --> 00:08:09,180
notification and based on the path that

187
00:08:09,180 --> 00:08:11,280
is in that notification it will load

188
00:08:11,280 --> 00:08:14,340
some resources and for lockdown D this

189
00:08:14,340 --> 00:08:16,860
technically means it checks if there are

190
00:08:16,860 --> 00:08:19,919
any additional agents on the disk image

191
00:08:19,919 --> 00:08:24,180
so it can add additional services like

192
00:08:24,180 --> 00:08:26,180
the backup

193
00:08:26,180 --> 00:08:30,360
like the debugging service or

194
00:08:30,360 --> 00:08:32,159
instruments

195
00:08:32,159 --> 00:08:33,599
so

196
00:08:33,599 --> 00:08:35,520
um the thing is you can spoof the

197
00:08:35,520 --> 00:08:37,799
notification from a third party app and

198
00:08:37,799 --> 00:08:41,279
just specify your own path and that way

199
00:08:41,279 --> 00:08:45,600
you can full lockdown D to load custom

200
00:08:45,600 --> 00:08:48,899
agents which are defined by a property

201
00:08:48,899 --> 00:08:50,940
list file that has like all the

202
00:08:50,940 --> 00:08:54,480
arguments and what actual command and

203
00:08:54,480 --> 00:08:56,880
like what user you want to run it as so

204
00:08:56,880 --> 00:08:59,940
it's it's being handed over to

205
00:08:59,940 --> 00:09:00,779
um

206
00:09:00,779 --> 00:09:04,380
to launch CTR as a job and then you it

207
00:09:04,380 --> 00:09:06,779
just runs whatever command you want and

208
00:09:06,779 --> 00:09:10,620
that was fixed in iOS 12.3 and um some

209
00:09:10,620 --> 00:09:14,459
more information uh is available uh on

210
00:09:14,459 --> 00:09:17,040
Danny's GitHub repository you will get

211
00:09:17,040 --> 00:09:19,140
the slides later I think so you don't

212
00:09:19,140 --> 00:09:21,600
have to like write down the link because

213
00:09:21,600 --> 00:09:23,519
it's quite long

214
00:09:23,519 --> 00:09:24,959
um

215
00:09:24,959 --> 00:09:28,800
yeah so let's get into the discovery and

216
00:09:28,800 --> 00:09:32,399
the research of the context to me uh

217
00:09:32,399 --> 00:09:34,560
vulnerability

218
00:09:34,560 --> 00:09:36,660
so

219
00:09:36,660 --> 00:09:40,080
um starting with iOS 13

220
00:09:40,080 --> 00:09:42,899
um even for connections that go over the

221
00:09:42,899 --> 00:09:44,760
wire over USB

222
00:09:44,760 --> 00:09:48,300
um Apple changed it so that the service

223
00:09:48,300 --> 00:09:50,420
communication has to use

224
00:09:50,420 --> 00:09:54,420
SSL and crypto communication

225
00:09:54,420 --> 00:09:56,100
um wireless connections had that already

226
00:09:56,100 --> 00:09:58,260
as I mentioned before

227
00:09:58,260 --> 00:10:02,940
um with iOS 5. and so it happens it

228
00:10:02,940 --> 00:10:05,040
happened that someone posted a bug

229
00:10:05,040 --> 00:10:07,980
report on GitHub for the my mobile

230
00:10:07,980 --> 00:10:09,959
device project

231
00:10:09,959 --> 00:10:11,399
um that

232
00:10:11,399 --> 00:10:13,339
um the debug server communication

233
00:10:13,339 --> 00:10:15,839
failed over USB

234
00:10:15,839 --> 00:10:17,459
and

235
00:10:17,459 --> 00:10:20,160
it turns out that

236
00:10:20,160 --> 00:10:22,800
um when the services started it performs

237
00:10:22,800 --> 00:10:25,080
an SSL handshake and then it just drops

238
00:10:25,080 --> 00:10:26,880
to plain text like it's not shutting

239
00:10:26,880 --> 00:10:28,260
down the session at all it's just

240
00:10:28,260 --> 00:10:32,480
straight drops down to plain text and

241
00:10:32,480 --> 00:10:35,519
at that time I'm a mobile device

242
00:10:35,519 --> 00:10:38,700
couldn't handle network connections yet

243
00:10:38,700 --> 00:10:40,019
um

244
00:10:40,019 --> 00:10:43,560
and we basically were like wait so if if

245
00:10:43,560 --> 00:10:46,200
that's happening over USB it certainly

246
00:10:46,200 --> 00:10:47,880
must be happening over Wi-Fi as well so

247
00:10:47,880 --> 00:10:50,279
we did some Network sniffing and like

248
00:10:50,279 --> 00:10:52,260
very quickly you could see that it's all

249
00:10:52,260 --> 00:10:54,060
plain text

250
00:10:54,060 --> 00:10:56,220
um so of course then the question is can

251
00:10:56,220 --> 00:10:58,560
this be exploited somehow can we do

252
00:10:58,560 --> 00:11:01,140
something with it and but also we wanted

253
00:11:01,140 --> 00:11:03,300
to fix the mobile device because like

254
00:11:03,300 --> 00:11:06,779
people kept complaining uh and obviously

255
00:11:06,779 --> 00:11:10,519
you want to fix it at some point

256
00:11:10,980 --> 00:11:11,579
um

257
00:11:11,579 --> 00:11:13,019
so

258
00:11:13,019 --> 00:11:15,720
we did quite some research on this topic

259
00:11:15,720 --> 00:11:17,940
because we wanted to understand what is

260
00:11:17,940 --> 00:11:21,000
what is actually happening here and

261
00:11:21,000 --> 00:11:23,880
um because the SSL connections were

262
00:11:23,880 --> 00:11:26,339
actually handled uh correctly according

263
00:11:26,339 --> 00:11:29,160
to our understanding at least and we did

264
00:11:29,160 --> 00:11:30,959
some experimenting

265
00:11:30,959 --> 00:11:32,700
um where we basically said okay what if

266
00:11:32,700 --> 00:11:36,120
we don't do the switch to SSL mode and

267
00:11:36,120 --> 00:11:38,160
um and see what happens but then the

268
00:11:38,160 --> 00:11:40,140
back server would be like ah nah this

269
00:11:40,140 --> 00:11:41,940
doesn't work and then just drops the

270
00:11:41,940 --> 00:11:43,500
connection

271
00:11:43,500 --> 00:11:44,579
um

272
00:11:44,579 --> 00:11:47,220
and if you look at like the actual

273
00:11:47,220 --> 00:11:50,040
communication itself uh USB or network

274
00:11:50,040 --> 00:11:52,380
you can see that it actually does the

275
00:11:52,380 --> 00:11:55,500
handshake so something must be there

276
00:11:55,500 --> 00:11:56,579
which is

277
00:11:56,579 --> 00:11:57,180
um

278
00:11:57,180 --> 00:11:59,100
not quite right

279
00:11:59,100 --> 00:12:02,040
um we also tested like shutting down the

280
00:12:02,040 --> 00:12:04,440
SSL uh session

281
00:12:04,440 --> 00:12:07,200
um but that also doesn't work because it

282
00:12:07,200 --> 00:12:10,019
creates additional uh traffic which is

283
00:12:10,019 --> 00:12:12,779
not expected on the other hand

284
00:12:12,779 --> 00:12:15,540
um yeah as I mentioned so the handshake

285
00:12:15,540 --> 00:12:18,240
after the handshake uh it's it just has

286
00:12:18,240 --> 00:12:20,519
to be completely ignored

287
00:12:20,519 --> 00:12:23,339
and um yeah this sounds to be like some

288
00:12:23,339 --> 00:12:26,720
architectural problem here

289
00:12:27,240 --> 00:12:31,260
um yeah so fixing the mobile device uh

290
00:12:31,260 --> 00:12:33,540
wasn't that hard actually but basically

291
00:12:33,540 --> 00:12:34,860
we had to

292
00:12:34,860 --> 00:12:35,640
um

293
00:12:35,640 --> 00:12:38,040
uh break the

294
00:12:38,040 --> 00:12:39,839
um the clean implementation that we had

295
00:12:39,839 --> 00:12:41,820
to to fix this

296
00:12:41,820 --> 00:12:44,220
um and

297
00:12:44,220 --> 00:12:46,920
there were a few people that suggested

298
00:12:46,920 --> 00:12:49,860
some changes and in the end it was just

299
00:12:49,860 --> 00:12:54,060
um uh a function that we had to add to

300
00:12:54,060 --> 00:12:57,240
basically say uh okay let's just disable

301
00:12:57,240 --> 00:12:59,579
SSL but without like shutting down the

302
00:12:59,579 --> 00:13:02,760
session just stop sending any packets

303
00:13:02,760 --> 00:13:03,899
um and then first debug service

304
00:13:03,899 --> 00:13:06,660
implementation in the mobile device uh

305
00:13:06,660 --> 00:13:08,700
we added the call to that function so it

306
00:13:08,700 --> 00:13:11,600
can continue to talk and

307
00:13:11,600 --> 00:13:14,040
implant text after the service was

308
00:13:14,040 --> 00:13:16,079
started

309
00:13:16,079 --> 00:13:18,600
um so let's understand the underlying

310
00:13:18,600 --> 00:13:19,560
issue

311
00:13:19,560 --> 00:13:20,220
um

312
00:13:20,220 --> 00:13:22,920
because I I think it's still not quite

313
00:13:22,920 --> 00:13:25,680
clear why this happens and

314
00:13:25,680 --> 00:13:26,399
um

315
00:13:26,399 --> 00:13:31,160
so if you look at Mac OS

316
00:13:31,260 --> 00:13:34,620
the code that handles service startup

317
00:13:34,620 --> 00:13:37,019
and like also the communication with

318
00:13:37,019 --> 00:13:39,120
lockdown D and everything is implemented

319
00:13:39,120 --> 00:13:42,420
in the mobile device framework and um

320
00:13:42,420 --> 00:13:45,959
like all the API that is required to

321
00:13:45,959 --> 00:13:48,300
handle all these things and that's

322
00:13:48,300 --> 00:13:50,160
obviously used by xcode and all the

323
00:13:50,160 --> 00:13:51,380
other tools

324
00:13:51,380 --> 00:13:55,019
and basically after a service is started

325
00:13:55,019 --> 00:13:58,740
lockdown D sends back a port number and

326
00:13:58,740 --> 00:14:02,040
it has uh I mean it's it's a dictionary

327
00:14:02,040 --> 00:14:03,959
which has a port number but also has a

328
00:14:03,959 --> 00:14:08,880
property enable service SSL which is

329
00:14:08,880 --> 00:14:10,980
either true or false obviously depending

330
00:14:10,980 --> 00:14:13,260
on the iOS version because starting with

331
00:14:13,260 --> 00:14:16,920
iOS 13 like it's it's always true

332
00:14:16,920 --> 00:14:17,820
um

333
00:14:17,820 --> 00:14:21,120
so if you look at the uh the codes or

334
00:14:21,120 --> 00:14:23,639
well the disassembly of mobile device

335
00:14:23,639 --> 00:14:24,720
framework

336
00:14:24,720 --> 00:14:27,000
um you can see that it it performs the

337
00:14:27,000 --> 00:14:29,160
handshake and I mean you can see it on

338
00:14:29,160 --> 00:14:32,220
like the network traffic as well

339
00:14:32,220 --> 00:14:34,079
um but if you look at the code you can

340
00:14:34,079 --> 00:14:35,700
see that it checks the return value and

341
00:14:35,700 --> 00:14:38,279
then decides to do the handshake or not

342
00:14:38,279 --> 00:14:41,100
so that seems to be fine and this is

343
00:14:41,100 --> 00:14:43,620
aligned with what's uh happening in the

344
00:14:43,620 --> 00:14:45,660
power mobile device

345
00:14:45,660 --> 00:14:46,620
um

346
00:14:46,620 --> 00:14:49,260
so but what happens on the what happens

347
00:14:49,260 --> 00:14:52,260
next on the device side so lockdown the

348
00:14:52,260 --> 00:14:55,079
handles the handshake for the

349
00:14:55,079 --> 00:14:55,860
um

350
00:14:55,860 --> 00:14:58,380
for the switch to ssmo for the service

351
00:14:58,380 --> 00:15:00,180
connection

352
00:15:00,180 --> 00:15:02,820
um and it will then launch the service

353
00:15:02,820 --> 00:15:05,160
process and every process that's

354
00:15:05,160 --> 00:15:09,180
launched by lockdown lockdown D has to

355
00:15:09,180 --> 00:15:12,720
check in and usually after that it will

356
00:15:12,720 --> 00:15:15,899
basically get the the socket the socket

357
00:15:15,899 --> 00:15:18,660
file descriptor and it will get the CPR

358
00:15:18,660 --> 00:15:21,120
context so it can continue to use the

359
00:15:21,120 --> 00:15:25,260
encrypted Communication channel

360
00:15:25,260 --> 00:15:26,940
um to hand it over because it's a

361
00:15:26,940 --> 00:15:29,459
different process however if you look at

362
00:15:29,459 --> 00:15:32,220
the debug server implementation

363
00:15:32,220 --> 00:15:35,399
um you can see that it never calls uh

364
00:15:35,399 --> 00:15:37,320
lockdown gets secure contacts which is

365
00:15:37,320 --> 00:15:39,720
the function that would allow it to use

366
00:15:39,720 --> 00:15:43,079
the encrypted communication so it turns

367
00:15:43,079 --> 00:15:44,760
out it doesn't even expect it to be

368
00:15:44,760 --> 00:15:47,300
encrypted

369
00:15:48,199 --> 00:15:52,980
on the host side what happens is

370
00:15:52,980 --> 00:15:55,440
um first you have to understand how

371
00:15:55,440 --> 00:15:57,680
things are implemented with xcode

372
00:15:57,680 --> 00:16:00,660
because the developer tools are

373
00:16:00,660 --> 00:16:02,880
basically implemented outside of mobile

374
00:16:02,880 --> 00:16:05,760
device framework and the service startup

375
00:16:05,760 --> 00:16:10,920
is initiated by xcode in a plugin called

376
00:16:10,920 --> 00:16:14,220
ID IDE iOS support core

377
00:16:14,220 --> 00:16:16,139
um

378
00:16:16,139 --> 00:16:20,160
um and basically what happens is it uses

379
00:16:20,160 --> 00:16:22,680
the mobile device framework code to

380
00:16:22,680 --> 00:16:25,500
start the service and wait for the reply

381
00:16:25,500 --> 00:16:27,120
it does the handshake and everything for

382
00:16:27,120 --> 00:16:28,560
for us

383
00:16:28,560 --> 00:16:30,300
um and then

384
00:16:30,300 --> 00:16:33,420
um once it has the successful service

385
00:16:33,420 --> 00:16:35,880
startup it will take the soccer file

386
00:16:35,880 --> 00:16:38,880
descriptor number and then pass it to

387
00:16:38,880 --> 00:16:41,820
the ledv RPC server which is the process

388
00:16:41,820 --> 00:16:43,199
that's responsible for all the

389
00:16:43,199 --> 00:16:45,180
communication between

390
00:16:45,180 --> 00:16:49,320
um the debug server on the device and

391
00:16:49,320 --> 00:16:52,860
the xcode debugging session

392
00:16:52,860 --> 00:16:53,759
um

393
00:16:53,759 --> 00:16:57,000
so but it's pretty much unaware of the

394
00:16:57,000 --> 00:16:58,920
missing SSL

395
00:16:58,920 --> 00:17:01,740
um and ldb server is just using the

396
00:17:01,740 --> 00:17:03,000
connection

397
00:17:03,000 --> 00:17:04,020
um

398
00:17:04,020 --> 00:17:06,000
but then again the back server isn't

399
00:17:06,000 --> 00:17:08,280
expecting it so from

400
00:17:08,280 --> 00:17:11,119
from implementation standpoint

401
00:17:11,119 --> 00:17:14,040
at this time you could say it seems to

402
00:17:14,040 --> 00:17:15,540
be okay but still we have the problem

403
00:17:15,540 --> 00:17:17,359
that it actually should be encrypted

404
00:17:17,359 --> 00:17:20,958
like the other services

405
00:17:21,299 --> 00:17:25,079
um so a small summary of this uh well we

406
00:17:25,079 --> 00:17:26,760
call the design flaw because that's what

407
00:17:26,760 --> 00:17:28,380
we think what it is in architectural

408
00:17:28,380 --> 00:17:30,900
design flaw and

409
00:17:30,900 --> 00:17:32,040
um

410
00:17:32,040 --> 00:17:34,080
we think that it evolved over time

411
00:17:34,080 --> 00:17:35,880
because initially there was no need for

412
00:17:35,880 --> 00:17:39,900
SSL because it was just USB only and

413
00:17:39,900 --> 00:17:43,220
um basically it was okay to expose

414
00:17:43,220 --> 00:17:45,840
expose the raw file descriptor and then

415
00:17:45,840 --> 00:17:47,880
just use it externally because it

416
00:17:47,880 --> 00:17:49,140
technically wouldn't make a difference

417
00:17:49,140 --> 00:17:51,480
anyway if it doesn't have to be

418
00:17:51,480 --> 00:17:53,760
encrypted you can just pass it in yeah

419
00:17:53,760 --> 00:17:55,740
who cares it just works and why would we

420
00:17:55,740 --> 00:17:57,179
change it

421
00:17:57,179 --> 00:17:59,100
um or they

422
00:17:59,100 --> 00:18:02,340
um but then Apple added Wires Wireless

423
00:18:02,340 --> 00:18:05,720
development to xcode a few years later

424
00:18:05,720 --> 00:18:09,360
and since mobile device framework or the

425
00:18:09,360 --> 00:18:12,539
code and it handles the SSR handshake

426
00:18:12,539 --> 00:18:13,380
um

427
00:18:13,380 --> 00:18:16,620
but on the same uh at the same time it

428
00:18:16,620 --> 00:18:17,940
still allows to get the raw file

429
00:18:17,940 --> 00:18:19,320
descriptor and that's what's happening

430
00:18:19,320 --> 00:18:21,299
and it's passing the file descriptor to

431
00:18:21,299 --> 00:18:23,160
xcode

432
00:18:23,160 --> 00:18:25,200
so basically this kind of breaks the

433
00:18:25,200 --> 00:18:27,059
abstraction of the service service

434
00:18:27,059 --> 00:18:29,820
communication code from the stable

435
00:18:29,820 --> 00:18:33,299
standpoint of the consumer application

436
00:18:33,299 --> 00:18:34,500
um

437
00:18:34,500 --> 00:18:37,320
uh and yeah unlike the mobile device

438
00:18:37,320 --> 00:18:39,660
where we have a clear

439
00:18:39,660 --> 00:18:42,960
uh hierarchy of how things are uh

440
00:18:42,960 --> 00:18:45,539
implemented and how all the

441
00:18:45,539 --> 00:18:47,820
communication is working like it just

442
00:18:47,820 --> 00:18:50,580
doesn't make sense at least for us to

443
00:18:50,580 --> 00:18:52,620
implement it this way so

444
00:18:52,620 --> 00:18:54,900
that's why we think it's kind of like an

445
00:18:54,900 --> 00:18:56,460
architecture design flow maybe it was

446
00:18:56,460 --> 00:18:58,500
just easier to do it that way but then

447
00:18:58,500 --> 00:19:00,320
in the beginning there was no Wi-fi

448
00:19:00,320 --> 00:19:03,299
debugging and it wasn't really a problem

449
00:19:03,299 --> 00:19:07,559
but well now uh it became a problem

450
00:19:07,559 --> 00:19:10,919
so let's get into exploitation

451
00:19:10,919 --> 00:19:11,760
um

452
00:19:11,760 --> 00:19:15,419
so is this actually exploitable somehow

453
00:19:15,419 --> 00:19:19,260
um it is restricted by a few things

454
00:19:19,260 --> 00:19:20,039
um

455
00:19:20,039 --> 00:19:23,160
because one thing is that attacker needs

456
00:19:23,160 --> 00:19:25,380
to be in the same network and the

457
00:19:25,380 --> 00:19:26,940
attacker also needs to be able to

458
00:19:26,940 --> 00:19:28,679
redirect and manipulate the network

459
00:19:28,679 --> 00:19:33,600
traffic to get any use from from this

460
00:19:33,600 --> 00:19:37,200
vulnerability and the victim also has to

461
00:19:37,200 --> 00:19:38,520
start a wireless debugging session

462
00:19:38,520 --> 00:19:39,900
because otherwise you wouldn't have

463
00:19:39,900 --> 00:19:41,780
access to it

464
00:19:41,780 --> 00:19:45,480
so basically we ourselves came up with a

465
00:19:45,480 --> 00:19:49,500
kind of a predefined scenario that makes

466
00:19:49,500 --> 00:19:52,020
this kind of possible so it's an

467
00:19:52,020 --> 00:19:54,660
intruded local network inside a company

468
00:19:54,660 --> 00:19:57,799
that's developing like an AR or Fitness

469
00:19:57,799 --> 00:20:00,679
application and they use wireless

470
00:20:00,679 --> 00:20:04,260
debugging to debug it

471
00:20:04,260 --> 00:20:07,620
um so just assuming that we have that

472
00:20:07,620 --> 00:20:09,660
um technically we should be able to

473
00:20:09,660 --> 00:20:12,320
exploit this

474
00:20:12,360 --> 00:20:14,280
um but there are a few things that we

475
00:20:14,280 --> 00:20:16,500
need to take into account here so the

476
00:20:16,500 --> 00:20:18,000
first thing is we need to gain control

477
00:20:18,000 --> 00:20:20,640
over the the bug session

478
00:20:20,640 --> 00:20:22,559
and to do that we need to redirect the

479
00:20:22,559 --> 00:20:24,299
network traffic which is usually done

480
00:20:24,299 --> 00:20:28,559
with an ARP spoofing attack

481
00:20:28,559 --> 00:20:30,120
um so we can redirect it to a machine

482
00:20:30,120 --> 00:20:33,360
that we control and then we basically do

483
00:20:33,360 --> 00:20:35,880
a man in the middle attack to uh take

484
00:20:35,880 --> 00:20:38,039
over the session and like manipulate

485
00:20:38,039 --> 00:20:40,440
everything however we cannot predict the

486
00:20:40,440 --> 00:20:44,039
uh the part of the connection that the

487
00:20:44,039 --> 00:20:46,200
back server has been start or Debra

488
00:20:46,200 --> 00:20:48,059
server is communicating on because every

489
00:20:48,059 --> 00:20:50,280
time a service is started

490
00:20:50,280 --> 00:20:50,880
um

491
00:20:50,880 --> 00:20:53,520
which is uh pretty normal like the part

492
00:20:53,520 --> 00:20:55,679
that it listens on um

493
00:20:55,679 --> 00:20:58,200
is assigned randomly

494
00:20:58,200 --> 00:21:02,460
um and yes and also the actual service

495
00:21:02,460 --> 00:21:04,500
startup sequence like when you tell

496
00:21:04,500 --> 00:21:06,600
lockdown the hey start the service for

497
00:21:06,600 --> 00:21:07,919
me

498
00:21:07,919 --> 00:21:11,940
um and you have to uh switch to SSL mode

499
00:21:11,940 --> 00:21:14,400
as well for this specific uh part of the

500
00:21:14,400 --> 00:21:17,820
communication so uh you cannot just see

501
00:21:17,820 --> 00:21:19,799
the part uh if you sniff the network

502
00:21:19,799 --> 00:21:22,380
traffic it's it's encrypted so you

503
00:21:22,380 --> 00:21:25,740
wouldn't get the port number right away

504
00:21:25,740 --> 00:21:27,600
um yeah basically this means we have to

505
00:21:27,600 --> 00:21:29,640
look at all the TCP sessions that are

506
00:21:29,640 --> 00:21:30,419
going

507
00:21:30,419 --> 00:21:33,659
um between the victim computer and the

508
00:21:33,659 --> 00:21:36,600
victim iOS device

509
00:21:36,600 --> 00:21:39,539
um and then yeah pick the right one

510
00:21:39,539 --> 00:21:42,299
um which is not that hard

511
00:21:42,299 --> 00:21:45,480
um so basically this is a GDB remote

512
00:21:45,480 --> 00:21:48,480
session that's um the protocol that's uh

513
00:21:48,480 --> 00:21:50,100
you can see

514
00:21:50,100 --> 00:21:51,620
um in the traffic

515
00:21:51,620 --> 00:21:55,159
and it basically has a very

516
00:21:55,159 --> 00:21:58,500
uh easily identifiable handshake

517
00:21:58,500 --> 00:22:00,000
um

518
00:22:00,000 --> 00:22:01,679
um like a very clear pattern that you

519
00:22:01,679 --> 00:22:03,600
can just listen for and once you see

520
00:22:03,600 --> 00:22:06,179
that uh you know oh this is this is a

521
00:22:06,179 --> 00:22:08,100
debug session so this must be the right

522
00:22:08,100 --> 00:22:09,419
one

523
00:22:09,419 --> 00:22:11,100
um however

524
00:22:11,100 --> 00:22:13,080
um if you just

525
00:22:13,080 --> 00:22:16,020
um try to manipulate it just like right

526
00:22:16,020 --> 00:22:18,480
away when you detect this uh things will

527
00:22:18,480 --> 00:22:20,880
break because it has quite some

528
00:22:20,880 --> 00:22:22,559
complication in the beginning setting up

529
00:22:22,559 --> 00:22:24,539
a few things and like some breakpoints

530
00:22:24,539 --> 00:22:26,039
and stuff and

531
00:22:26,039 --> 00:22:28,440
um so we have to wait uh

532
00:22:28,440 --> 00:22:29,960
um a specific

533
00:22:29,960 --> 00:22:34,740
uh yeah for a specific event

534
00:22:34,740 --> 00:22:37,500
um so we know that this session setup is

535
00:22:37,500 --> 00:22:40,860
complete and we can basically begin

536
00:22:40,860 --> 00:22:41,400
um

537
00:22:41,400 --> 00:22:43,860
so what's the right point in time to do

538
00:22:43,860 --> 00:22:46,320
that and I mean the idea is very simple

539
00:22:46,320 --> 00:22:49,080
we just look how what xcode is is doing

540
00:22:49,080 --> 00:22:51,620
uh or when xcode basically

541
00:22:51,620 --> 00:22:54,720
uh things that the the app has been

542
00:22:54,720 --> 00:22:57,299
started and the back session is

543
00:22:57,299 --> 00:23:01,320
configured and uh everything's fine so

544
00:23:01,320 --> 00:23:03,780
um when it configures the debug session

545
00:23:03,780 --> 00:23:07,679
it basically sets up an asson process

546
00:23:07,679 --> 00:23:11,880
profiling a feature which will uh send a

547
00:23:11,880 --> 00:23:13,799
Telemetry data about the process about

548
00:23:13,799 --> 00:23:17,100
memory and process yeah CPU usage and

549
00:23:17,100 --> 00:23:19,679
and things in that it sends profiling

550
00:23:19,679 --> 00:23:23,419
packets every now and then and um

551
00:23:23,419 --> 00:23:27,659
once um the host starts to receive this

552
00:23:27,659 --> 00:23:30,179
packet like if xcode receives this this

553
00:23:30,179 --> 00:23:31,740
packet then it will present the

554
00:23:31,740 --> 00:23:33,600
debugging UI and you can see like all

555
00:23:33,600 --> 00:23:35,600
things moving like this

556
00:23:35,600 --> 00:23:40,200
graphs and and things so uh so for us it

557
00:23:40,200 --> 00:23:40,980
means

558
00:23:40,980 --> 00:23:43,320
basically what if we see this profiling

559
00:23:43,320 --> 00:23:45,480
packet coming uh over the connection

560
00:23:45,480 --> 00:23:49,200
then we know uh we can start

561
00:23:49,200 --> 00:23:50,400
um

562
00:23:50,400 --> 00:23:53,640
so what we want to do now is we want to

563
00:23:53,640 --> 00:23:56,700
uh basically add the second client to

564
00:23:56,700 --> 00:23:59,100
the debug session which is

565
00:23:59,100 --> 00:23:59,820
um

566
00:23:59,820 --> 00:24:02,400
uh which is technically not the way it

567
00:24:02,400 --> 00:24:03,659
should be

568
00:24:03,659 --> 00:24:06,299
um like basically you already have the

569
00:24:06,299 --> 00:24:07,740
connection you just add a second time

570
00:24:07,740 --> 00:24:10,980
that's not how it works but uh in a

571
00:24:10,980 --> 00:24:13,440
normal under normal circumstances

572
00:24:13,440 --> 00:24:15,480
um but the thing is we want to keep

573
00:24:15,480 --> 00:24:18,480
xcode unaware of the connection hijack

574
00:24:18,480 --> 00:24:20,580
and so the victim doesn't notice that

575
00:24:20,580 --> 00:24:23,580
something weird is going on and

576
00:24:23,580 --> 00:24:26,039
this is basically How We Do It

577
00:24:26,039 --> 00:24:27,960
um so we wait for the profiling packet

578
00:24:27,960 --> 00:24:30,960
and then we save it so we can replay it

579
00:24:30,960 --> 00:24:34,520
later but we don't relate it to the host

580
00:24:34,520 --> 00:24:37,740
instead we send a process interrupt

581
00:24:37,740 --> 00:24:40,020
packet to make the process stop like so

582
00:24:40,020 --> 00:24:42,659
tell basically debug server stop the

583
00:24:42,659 --> 00:24:43,980
process

584
00:24:43,980 --> 00:24:46,140
um like pause the process not just not

585
00:24:46,140 --> 00:24:49,440
kill it pause the process execution

586
00:24:49,440 --> 00:24:52,919
um and this is because lldb

587
00:24:52,919 --> 00:24:56,720
um expects that the process is

588
00:24:56,720 --> 00:25:00,480
stopped when it tries to connect and

589
00:25:00,480 --> 00:25:03,559
then we separate the original session

590
00:25:03,559 --> 00:25:06,419
and start replaying the profile packets

591
00:25:06,419 --> 00:25:09,780
on that connection so we basically send

592
00:25:09,780 --> 00:25:11,760
the profile packets to xcode so just

593
00:25:11,760 --> 00:25:13,320
things everything's fine the app is

594
00:25:13,320 --> 00:25:16,080
running it's all good

595
00:25:16,080 --> 00:25:17,039
um

596
00:25:17,039 --> 00:25:19,799
and then the attacker joins the party

597
00:25:19,799 --> 00:25:21,840
basically we are in control of the

598
00:25:21,840 --> 00:25:24,840
control session of the debug session and

599
00:25:24,840 --> 00:25:27,360
the process is stopped so how do we add

600
00:25:27,360 --> 00:25:30,659
a new client to it so let's just try so

601
00:25:30,659 --> 00:25:33,419
let's start ldb see the remote IP

602
00:25:33,419 --> 00:25:35,279
address and the port number that we

603
00:25:35,279 --> 00:25:37,200
figured out

604
00:25:37,200 --> 00:25:38,159
um

605
00:25:38,159 --> 00:25:41,039
from from the connection

606
00:25:41,039 --> 00:25:42,600
um because we're sniffing the traffic so

607
00:25:42,600 --> 00:25:44,279
we can see on what part number it's on

608
00:25:44,279 --> 00:25:47,460
but yeah it it's it's like errors oh it

609
00:25:47,460 --> 00:25:49,260
says failed to get reply to a handshake

610
00:25:49,260 --> 00:25:51,900
packet and it doesn't work because

611
00:25:51,900 --> 00:25:54,059
well it actually wants to do like this

612
00:25:54,059 --> 00:25:57,360
debug session setup sequence so sending

613
00:25:57,360 --> 00:25:59,640
a bunch of hackers and configure like

614
00:25:59,640 --> 00:26:02,400
um like compression and all kinds of

615
00:26:02,400 --> 00:26:06,000
things and so the idea now was so what

616
00:26:06,000 --> 00:26:08,159
if we don't relay this session in a

617
00:26:08,159 --> 00:26:10,620
packet and through debug server and and

618
00:26:10,620 --> 00:26:13,440
reply to the clients uh with the

619
00:26:13,440 --> 00:26:16,200
expected reply so basically full ldb

620
00:26:16,200 --> 00:26:18,779
that we're like there the remote and

621
00:26:18,779 --> 00:26:21,659
this is replying to it

622
00:26:21,659 --> 00:26:22,679
um

623
00:26:22,679 --> 00:26:27,120
I mean we tried that and that works and

624
00:26:27,120 --> 00:26:29,580
yeah that basically means now we have

625
00:26:29,580 --> 00:26:31,860
full session Takeover in place uh

626
00:26:31,860 --> 00:26:34,080
whether working LDV shell we can run all

627
00:26:34,080 --> 00:26:36,059
the commands and

628
00:26:36,059 --> 00:26:38,820
um yeah interact with the process run Uh

629
00:26:38,820 --> 00:26:41,279
custom code whatever you want

630
00:26:41,279 --> 00:26:42,779
um

631
00:26:42,779 --> 00:26:44,100
so

632
00:26:44,100 --> 00:26:48,000
this kind of was a bit uh

633
00:26:48,000 --> 00:26:52,380
uh impractical so we did some more

634
00:26:52,380 --> 00:26:55,860
research to find a better way to uh to

635
00:26:55,860 --> 00:26:58,679
add the second client

636
00:26:58,679 --> 00:27:01,020
um so and we found a solution so

637
00:27:01,020 --> 00:27:03,659
basically the GDP remote

638
00:27:03,659 --> 00:27:04,320
um

639
00:27:04,320 --> 00:27:07,440
command is implemented as a process

640
00:27:07,440 --> 00:27:09,240
connect plugin so you can basically do

641
00:27:09,240 --> 00:27:13,260
process connect Dash p GDB remote and it

642
00:27:13,260 --> 00:27:15,779
actually takes arguments and

643
00:27:15,779 --> 00:27:18,539
um you can basically specify file

644
00:27:18,539 --> 00:27:21,020
descriptor so that makes it way easier

645
00:27:21,020 --> 00:27:25,400
so we don't have to deal with this like

646
00:27:25,400 --> 00:27:28,620
sending like fake replies back to ldb

647
00:27:28,620 --> 00:27:31,620
because you can just tell it hey use

648
00:27:31,620 --> 00:27:33,659
this file descriptor and then it would

649
00:27:33,659 --> 00:27:36,299
just uh yeah just take over the

650
00:27:36,299 --> 00:27:38,460
connection for us

651
00:27:38,460 --> 00:27:40,860
um so this allowed us to

652
00:27:40,860 --> 00:27:42,600
to implement

653
00:27:42,600 --> 00:27:45,659
um uh reverse lldb client basically that

654
00:27:45,659 --> 00:27:47,400
accepts connections

655
00:27:47,400 --> 00:27:50,400
and once it gets a connection it will

656
00:27:50,400 --> 00:27:52,260
pass the socket file descriptor straight

657
00:27:52,260 --> 00:27:54,539
to lldb

658
00:27:54,539 --> 00:27:56,940
um so that's that's a very clean uh

659
00:27:56,940 --> 00:27:59,419
approach

660
00:27:59,580 --> 00:28:02,880
um yeah so what we now have is uh

661
00:28:02,880 --> 00:28:04,919
technically remote code execution even

662
00:28:04,919 --> 00:28:05,820
though

663
00:28:05,820 --> 00:28:07,860
um the circumstances are a bit limited

664
00:28:07,860 --> 00:28:09,720
because of the

665
00:28:09,720 --> 00:28:12,000
um the that the attacker has to be in

666
00:28:12,000 --> 00:28:13,860
the privileged Network position

667
00:28:13,860 --> 00:28:16,799
but um it's not an impossible scenario

668
00:28:16,799 --> 00:28:18,179
so um

669
00:28:18,179 --> 00:28:21,419
we are not in control of the lodb

670
00:28:21,419 --> 00:28:24,120
session and ldb has nice features like

671
00:28:24,120 --> 00:28:26,220
the expression command and you can

672
00:28:26,220 --> 00:28:29,159
basically use that to run uh code in the

673
00:28:29,159 --> 00:28:31,500
context of the process there's no code

674
00:28:31,500 --> 00:28:34,020
signing and whatsoever you can just uh

675
00:28:34,020 --> 00:28:36,299
run whatever you want and then we

676
00:28:36,299 --> 00:28:40,500
actually over engineered a POC

677
00:28:40,500 --> 00:28:43,620
um yeah that ended up being a complete

678
00:28:43,620 --> 00:28:47,340
tool set like with plugins or modules

679
00:28:47,340 --> 00:28:50,520
um that allow to extrator data from the

680
00:28:50,520 --> 00:28:52,860
device or like you know play some some

681
00:28:52,860 --> 00:28:56,220
audio or or uh

682
00:28:56,220 --> 00:28:57,480
yeah

683
00:28:57,480 --> 00:28:59,700
um so we created

684
00:28:59,700 --> 00:29:03,000
um a payload that we used to bootstrap

685
00:29:03,000 --> 00:29:05,159
lldb

686
00:29:05,159 --> 00:29:08,400
yeah in that runs a new thread

687
00:29:08,400 --> 00:29:11,340
um using the expression feature

688
00:29:11,340 --> 00:29:15,179
of ldb it then connects back to our

689
00:29:15,179 --> 00:29:17,940
exfiltration exfiltration server that's

690
00:29:17,940 --> 00:29:19,980
just the process that listens for

691
00:29:19,980 --> 00:29:21,480
incoming connections

692
00:29:21,480 --> 00:29:23,820
um from all the the modules that we

693
00:29:23,820 --> 00:29:25,980
created

694
00:29:25,980 --> 00:29:28,320
um oh yeah no first for the the initial

695
00:29:28,320 --> 00:29:31,140
uh like bootstrapping and then it will

696
00:29:31,140 --> 00:29:34,500
execute additional uh like the modules

697
00:29:34,500 --> 00:29:38,419
as additional payloads

698
00:29:39,179 --> 00:29:42,600
transformed to Shell Code so uh yeah

699
00:29:42,600 --> 00:29:45,840
this is how the remote execution uh

700
00:29:45,840 --> 00:29:48,000
basically works in the POC

701
00:29:48,000 --> 00:29:49,260
um

702
00:29:49,260 --> 00:29:52,799
uh yeah basically proves that it's it's

703
00:29:52,799 --> 00:29:56,760
a realistic uh scenario that allows to

704
00:29:56,760 --> 00:29:58,919
get data from the device now the

705
00:29:58,919 --> 00:30:01,500
question obviously is is it really that

706
00:30:01,500 --> 00:30:03,480
critical because it's it's still a

707
00:30:03,480 --> 00:30:04,919
development environment so usually

708
00:30:04,919 --> 00:30:07,100
there's probably not that much

709
00:30:07,100 --> 00:30:10,740
critical data on on the device but

710
00:30:10,740 --> 00:30:13,620
um what you could do basically is you

711
00:30:13,620 --> 00:30:16,980
could uh dumb like the the actual app

712
00:30:16,980 --> 00:30:19,260
itself you can like extract the complete

713
00:30:19,260 --> 00:30:21,080
application container you can basically

714
00:30:21,080 --> 00:30:23,480
uh steal the application without

715
00:30:23,480 --> 00:30:25,799
actually grabbing it from the

716
00:30:25,799 --> 00:30:28,200
developer's computer just take it from

717
00:30:28,200 --> 00:30:29,700
the device

718
00:30:29,700 --> 00:30:31,500
um I mean there are certainly other ways

719
00:30:31,500 --> 00:30:34,620
to do that but just as an example

720
00:30:34,620 --> 00:30:35,880
um

721
00:30:35,880 --> 00:30:39,059
yeah so a little bit about uh

722
00:30:39,059 --> 00:30:41,580
vulnerability disclosure and the actual

723
00:30:41,580 --> 00:30:44,399
fix of this problem

724
00:30:44,399 --> 00:30:48,480
um so the disclosure timeline

725
00:30:48,480 --> 00:30:49,140
um

726
00:30:49,140 --> 00:30:52,080
basically it took quite some time to do

727
00:30:52,080 --> 00:30:53,460
all the research

728
00:30:53,460 --> 00:30:55,500
um but also this is because we kind of

729
00:30:55,500 --> 00:30:57,240
did that in our free time

730
00:30:57,240 --> 00:31:02,580
so in June uh 2019 we we discovered that

731
00:31:02,580 --> 00:31:05,520
based on the bug report from the time of

732
00:31:05,520 --> 00:31:07,860
device project and then we took the time

733
00:31:07,860 --> 00:31:09,960
to research everything and create a nice

734
00:31:09,960 --> 00:31:13,279
POC and like write up and

735
00:31:13,279 --> 00:31:15,980
create an actual advisory

736
00:31:15,980 --> 00:31:20,340
and then we sent that to Apple which

737
00:31:20,340 --> 00:31:22,740
actually happened to be

738
00:31:22,740 --> 00:31:23,580
um

739
00:31:23,580 --> 00:31:28,399
two years ago when Nikon was happening

740
00:31:28,399 --> 00:31:33,299
in March 2020 where also was attending

741
00:31:33,299 --> 00:31:36,179
so um but that's just a coincident and

742
00:31:36,179 --> 00:31:38,940
now I'm presenting the research again in

743
00:31:38,940 --> 00:31:42,179
Magcon which is uh quite funny I think

744
00:31:42,179 --> 00:31:44,100
um yeah so

745
00:31:44,100 --> 00:31:47,399
Apple replied and they said hey you

746
00:31:47,399 --> 00:31:49,799
cannot just you know disclose that after

747
00:31:49,799 --> 00:31:51,899
90 days we need more time and they said

748
00:31:51,899 --> 00:31:54,120
this it takes time until later this

749
00:31:54,120 --> 00:31:57,240
summer and they can't be asked and yeah

750
00:31:57,240 --> 00:31:59,220
we said it's okay

751
00:31:59,220 --> 00:32:03,000
and uh yeah then surprising in August

752
00:32:03,000 --> 00:32:05,580
they told us okay

753
00:32:05,580 --> 00:32:07,980
um the new xcode beta versions they have

754
00:32:07,980 --> 00:32:10,320
effects and so we can have a look uh if

755
00:32:10,320 --> 00:32:12,299
it's if the problem is solved or not

756
00:32:12,299 --> 00:32:15,059
which we obviously did

757
00:32:15,059 --> 00:32:16,039
um

758
00:32:16,039 --> 00:32:18,440
and yeah well

759
00:32:18,440 --> 00:32:21,539
we then found a downgrad attack

760
00:32:21,539 --> 00:32:24,299
um that bypasses the new patch that

761
00:32:24,299 --> 00:32:26,520
Apple introduced here

762
00:32:26,520 --> 00:32:32,039
um affecting iOS 13.6 and 13.7

763
00:32:32,039 --> 00:32:34,919
so downgrade attack like what's going on

764
00:32:34,919 --> 00:32:35,760
here

765
00:32:35,760 --> 00:32:37,740
um so

766
00:32:37,740 --> 00:32:40,620
Apple said it's fixed with xcode 12 beta

767
00:32:40,620 --> 00:32:42,779
3 and of course we just had to look what

768
00:32:42,779 --> 00:32:44,460
what does it actually mean because it's

769
00:32:44,460 --> 00:32:45,960
like kind of an architectural change

770
00:32:45,960 --> 00:32:48,360
that you have to make and that's why

771
00:32:48,360 --> 00:32:50,399
they also ask for more time because it

772
00:32:50,399 --> 00:32:52,320
wasn't a simple thing to do it's not

773
00:32:52,320 --> 00:32:55,740
like uh like a one-liner that you uh yet

774
00:32:55,740 --> 00:32:57,600
that you need for for the fix

775
00:32:57,600 --> 00:32:59,880
um so we look at the developer these

776
00:32:59,880 --> 00:33:02,940
images because that's where the changes

777
00:33:02,940 --> 00:33:04,380
have to be applied

778
00:33:04,380 --> 00:33:07,500
um since the debug service is at least

779
00:33:07,500 --> 00:33:09,740
for the device size the debug service is

780
00:33:09,740 --> 00:33:12,840
not coming with the stock iOS software

781
00:33:12,840 --> 00:33:14,399
but with the developer this image

782
00:33:14,399 --> 00:33:18,179
everything that is below 13.6 there was

783
00:33:18,179 --> 00:33:20,820
no change whatsoever no medications

784
00:33:20,820 --> 00:33:23,039
um but yeah it's also like an auto iOS

785
00:33:23,039 --> 00:33:24,840
version so it's it's somehow

786
00:33:24,840 --> 00:33:27,480
understandable and they developed this

787
00:33:27,480 --> 00:33:31,320
image for 13 6 and 14

788
00:33:31,320 --> 00:33:32,580
um

789
00:33:32,580 --> 00:33:34,399
uh well I'm

790
00:33:34,399 --> 00:33:36,360
13.7 as well

791
00:33:36,360 --> 00:33:39,120
um they had new secure service variants

792
00:33:39,120 --> 00:33:42,120
that actually use uh secure

793
00:33:42,120 --> 00:33:43,980
communication

794
00:33:43,980 --> 00:33:46,320
um but also they still had the older

795
00:33:46,320 --> 00:33:48,240
service name so basically they added a

796
00:33:48,240 --> 00:33:50,220
new service and the old one you could

797
00:33:50,220 --> 00:33:52,159
still use

798
00:33:52,159 --> 00:33:55,260
and starting with the next beta version

799
00:33:55,260 --> 00:33:57,000
which just came out a few days later

800
00:33:57,000 --> 00:33:58,559
when we looked at it

801
00:33:58,559 --> 00:34:01,860
um the iOS 14 one they removed the uh

802
00:34:01,860 --> 00:34:04,380
the old variant so you always have to

803
00:34:04,380 --> 00:34:05,580
use

804
00:34:05,580 --> 00:34:08,940
um the encrypted one starting with iOS

805
00:34:08,940 --> 00:34:11,219
14.

806
00:34:11,219 --> 00:34:11,940
um

807
00:34:11,940 --> 00:34:15,960
so that means that iOS 13.6 and 13.7

808
00:34:15,960 --> 00:34:19,020
they they stayed vulnerable

809
00:34:19,020 --> 00:34:22,679
um to a downgrade attack and yeah apple

810
00:34:22,679 --> 00:34:25,440
basically told us that only iOS 14 and

811
00:34:25,440 --> 00:34:27,300
later will be fully addressed uh

812
00:34:27,300 --> 00:34:29,940
regarding this issue

813
00:34:29,940 --> 00:34:33,000
um yeah and that's what they did so

814
00:34:33,000 --> 00:34:35,460
the downgrade attack

815
00:34:35,460 --> 00:34:38,280
um is not that complicated actually

816
00:34:38,280 --> 00:34:40,379
um because

817
00:34:40,379 --> 00:34:43,320
um the way it was

818
00:34:43,320 --> 00:34:45,060
um the changes were introduced into

819
00:34:45,060 --> 00:34:46,859
xcode

820
00:34:46,859 --> 00:34:49,500
um is because they have a fallback

821
00:34:49,500 --> 00:34:51,659
mechanism basically if the secure

822
00:34:51,659 --> 00:34:53,639
service cannot be started it will fall

823
00:34:53,639 --> 00:34:57,000
back and try the insecure one

824
00:34:57,000 --> 00:35:00,720
um and so basically if you have uh if

825
00:35:00,720 --> 00:35:01,920
you have a man in the middle position

826
00:35:01,920 --> 00:35:04,680
and you can look at the the packets you

827
00:35:04,680 --> 00:35:05,700
could find

828
00:35:05,700 --> 00:35:08,820
uh well I mean it's an encrypted start

829
00:35:08,820 --> 00:35:10,619
service packet that you that you're

830
00:35:10,619 --> 00:35:12,599
dealing with but if you have some

831
00:35:12,599 --> 00:35:15,359
heuristics or or just look at the size

832
00:35:15,359 --> 00:35:19,140
you have a very high chance to find

833
00:35:19,140 --> 00:35:19,740
um

834
00:35:19,740 --> 00:35:23,160
to find the actual server startup packet

835
00:35:23,160 --> 00:35:24,960
and then you just drop the connection

836
00:35:24,960 --> 00:35:27,599
and then what happens is xcode things oh

837
00:35:27,599 --> 00:35:29,579
okay uh so the service startup didn't

838
00:35:29,579 --> 00:35:32,940
work it reports an error back and then

839
00:35:32,940 --> 00:35:35,099
it was just far back and say okay let's

840
00:35:35,099 --> 00:35:37,680
start the insecure one instead because

841
00:35:37,680 --> 00:35:39,599
that's how it's implemented and then

842
00:35:39,599 --> 00:35:42,900
yeah we again can party because uh yeah

843
00:35:42,900 --> 00:35:45,000
but okay but only for the older versions

844
00:35:45,000 --> 00:35:46,680
but still

845
00:35:46,680 --> 00:35:49,800
um uh yeah it was interesting to to

846
00:35:49,800 --> 00:35:54,000
follow up on on this uh on this matter

847
00:35:54,000 --> 00:35:54,839
um

848
00:35:54,839 --> 00:35:58,140
so what did Apple actually do uh I

849
00:35:58,140 --> 00:36:00,060
already kind of gave it away so they

850
00:36:00,060 --> 00:36:03,240
added a secure service variants for the

851
00:36:03,240 --> 00:36:05,700
debugging and the instruments services

852
00:36:05,700 --> 00:36:07,260
and I think

853
00:36:07,260 --> 00:36:09,240
all the others that didn't have it as

854
00:36:09,240 --> 00:36:10,020
well

855
00:36:10,020 --> 00:36:11,760
um but some of them already were using

856
00:36:11,760 --> 00:36:15,420
proper uh SSA communication

857
00:36:15,420 --> 00:36:18,680
so this uh

858
00:36:18,680 --> 00:36:21,599
basically creates a tunnel for the

859
00:36:21,599 --> 00:36:23,339
encrypted communication

860
00:36:23,339 --> 00:36:24,660
um

861
00:36:24,660 --> 00:36:26,640
and

862
00:36:26,640 --> 00:36:29,400
the the device side so the debug server

863
00:36:29,400 --> 00:36:32,119
was updated to reflect that change that

864
00:36:32,119 --> 00:36:34,859
uh well actually it's

865
00:36:34,859 --> 00:36:39,300
uh yeah it's like a tunnel so it will

866
00:36:39,300 --> 00:36:41,040
it will decrypt the traffic and then

867
00:36:41,040 --> 00:36:43,200
pass the decrypted traffic to the back

868
00:36:43,200 --> 00:36:45,420
server technically and

869
00:36:45,420 --> 00:36:46,020
um

870
00:36:46,020 --> 00:36:47,700
on the other side

871
00:36:47,700 --> 00:36:49,440
um like the soccer fighter script of the

872
00:36:49,440 --> 00:36:51,420
other tunnel endpoint on the house side

873
00:36:51,420 --> 00:36:54,300
will be passed to lrdb RPC service so it

874
00:36:54,300 --> 00:36:56,880
can now transparently communicate over a

875
00:36:56,880 --> 00:37:00,119
secure connection so this is where the

876
00:37:00,119 --> 00:37:02,119
architectural

877
00:37:02,119 --> 00:37:05,099
design flow was was actually uh

878
00:37:05,099 --> 00:37:08,040
mitigated and this is more or less how

879
00:37:08,040 --> 00:37:09,780
we have it implemented in the mobile

880
00:37:09,780 --> 00:37:12,119
device if it switches to SSL you just

881
00:37:12,119 --> 00:37:15,000
like handle everything and then you just

882
00:37:15,000 --> 00:37:16,500
pass

883
00:37:16,500 --> 00:37:18,960
um the encrypted uh communication

884
00:37:18,960 --> 00:37:22,380
endpoint to the consumer and then it

885
00:37:22,380 --> 00:37:24,240
just transparently just uses that

886
00:37:24,240 --> 00:37:27,000
connection whether it's encrypted or not

887
00:37:27,000 --> 00:37:30,720
so we have uh now the full disclosure

888
00:37:30,720 --> 00:37:33,060
timeline it's it's just the same as

889
00:37:33,060 --> 00:37:38,099
before only that uh yeah as I mentioned

890
00:37:38,099 --> 00:37:41,339
Apple told us in September that they

891
00:37:41,339 --> 00:37:45,859
will not address it in other versions

892
00:37:45,859 --> 00:37:49,440
except 14 and well and watch seven so

893
00:37:49,440 --> 00:37:52,200
only those and data will be addressed

894
00:37:52,200 --> 00:37:55,980
um and yeah September 16 is the date

895
00:37:55,980 --> 00:37:59,460
when Apple released xcode 12.

896
00:37:59,460 --> 00:38:02,339
um that had all the the patches that we

897
00:38:02,339 --> 00:38:04,460
could already see in the beta versions

898
00:38:04,460 --> 00:38:08,220
and that's the cve number that we got

899
00:38:08,220 --> 00:38:10,619
for for the disclosure

900
00:38:10,619 --> 00:38:14,359
so uh yeah that's that's basically it

901
00:38:14,359 --> 00:38:19,500
and so actually I thought about doing a

902
00:38:19,500 --> 00:38:21,900
live demo of this thing but it's quite

903
00:38:21,900 --> 00:38:23,760
complex to set it up I would need a

904
00:38:23,760 --> 00:38:25,440
second machine and then it turned out

905
00:38:25,440 --> 00:38:27,540
like my older MacBook already had like

906
00:38:27,540 --> 00:38:29,339
everything updated so I didn't even have

907
00:38:29,339 --> 00:38:32,160
the right xcode version

908
00:38:32,160 --> 00:38:33,540
um but

909
00:38:33,540 --> 00:38:35,640
back at the time when we did the

910
00:38:35,640 --> 00:38:37,619
submission we were thinking about you

911
00:38:37,619 --> 00:38:40,200
know just submitting this uh

912
00:38:40,200 --> 00:38:42,960
uh this back to the pony Awards or like

913
00:38:42,960 --> 00:38:45,359
most epic fail just you know nominate

914
00:38:45,359 --> 00:38:47,040
ourselves but then we forgot two times

915
00:38:47,040 --> 00:38:48,920
to to do that

916
00:38:48,920 --> 00:38:52,200
and then he created uh a short video

917
00:38:52,200 --> 00:38:55,079
clip uh regarding this matter

918
00:38:55,079 --> 00:38:58,320
so um and that's what I want to play now

919
00:38:58,320 --> 00:39:00,660
so sorry for not having a demo I hope

920
00:39:00,660 --> 00:39:02,460
you still understand how this whole

921
00:39:02,460 --> 00:39:03,780
thing works

922
00:39:03,780 --> 00:39:06,420
um we have the whole POC all the code

923
00:39:06,420 --> 00:39:08,280
and and all the documentation the

924
00:39:08,280 --> 00:39:10,920
advisory and uh very verbals read me

925
00:39:10,920 --> 00:39:13,680
that explains all the details of this

926
00:39:13,680 --> 00:39:15,180
vulnerability

927
00:39:15,180 --> 00:39:18,359
uh on the GitHub repository I will show

928
00:39:18,359 --> 00:39:19,980
the link right away

929
00:39:19,980 --> 00:39:22,440
um I mean it's already public for some

930
00:39:22,440 --> 00:39:24,780
time but we never had a chance to

931
00:39:24,780 --> 00:39:26,640
present it

932
00:39:26,640 --> 00:39:28,680
um at the conference because of this

933
00:39:28,680 --> 00:39:31,140
pandemic that that happened right after

934
00:39:31,140 --> 00:39:34,680
the last Knight Conway was at

935
00:39:34,680 --> 00:39:37,500
um so and this was our chance to present

936
00:39:37,500 --> 00:39:40,859
it unfortunately Danny couldn't make it

937
00:39:40,859 --> 00:39:43,380
here so um because he has lots of

938
00:39:43,380 --> 00:39:47,040
personal projects going on so yeah maybe

939
00:39:47,040 --> 00:39:49,800
another time so yeah that's what I

940
00:39:49,800 --> 00:39:52,440
wanted to show you so uh I hope the

941
00:39:52,440 --> 00:39:54,540
audio is okay

942
00:39:54,540 --> 00:39:57,740
let's see

943
00:39:58,920 --> 00:40:01,140
okay

944
00:40:01,140 --> 00:40:04,160
[Applause]

945
00:40:04,160 --> 00:40:07,680
I hope you enjoyed it is now possible to

946
00:40:07,680 --> 00:40:09,720
develop and debug on your device over

947
00:40:09,720 --> 00:40:11,760
Wi-Fi and we call this Wireless

948
00:40:11,760 --> 00:40:14,359
development

949
00:40:16,340 --> 00:40:26,060
[Music]

950
00:40:29,060 --> 00:40:33,619
[Music]

951
00:40:36,599 --> 00:40:39,599
foreign

952
00:40:43,940 --> 00:40:47,400
yeah that was my presentation I hope you

953
00:40:47,400 --> 00:40:49,380
enjoyed it

954
00:40:49,380 --> 00:40:51,700
um let me know if you have any questions

955
00:40:51,700 --> 00:40:56,020
[Music]

956
00:41:01,200 --> 00:41:04,939
hello any questions

957
00:41:08,460 --> 00:41:10,740
so is this vulnerability have anything

958
00:41:10,740 --> 00:41:13,079
to do with the connection uh with the

959
00:41:13,079 --> 00:41:15,300
car like uh Apple wireless carplay or

960
00:41:15,300 --> 00:41:17,339
those kind of things as well or it was

961
00:41:17,339 --> 00:41:19,980
just between the MacBook and the Apple

962
00:41:19,980 --> 00:41:23,460
iPhone device Apple devices

963
00:41:23,460 --> 00:41:24,720
I'm not sure if I heard everything

964
00:41:24,720 --> 00:41:26,940
correctly so you're asking if this is

965
00:41:26,940 --> 00:41:31,079
only between them like xcode backwards

966
00:41:31,079 --> 00:41:34,079
and the device or yeah so you want to

967
00:41:34,079 --> 00:41:36,119
know if it's like if it's if the

968
00:41:36,119 --> 00:41:38,880
viability is is affecting other areas

969
00:41:38,880 --> 00:41:42,359
yeah uh it was a apple carplay the

970
00:41:42,359 --> 00:41:44,400
wireless car player in your car that's

971
00:41:44,400 --> 00:41:46,920
where you connect with your car so was

972
00:41:46,920 --> 00:41:49,680
that was also that this module was used

973
00:41:49,680 --> 00:41:52,380
in that functionality as well

974
00:41:52,380 --> 00:41:55,260
I didn't really hear you that well can

975
00:41:55,260 --> 00:41:57,180
you please repeat we didn't get you yeah

976
00:41:57,180 --> 00:42:00,660
so I'm asking the Apple carplay uh uh

977
00:42:00,660 --> 00:42:03,839
which allows uh mobile phone device to

978
00:42:03,839 --> 00:42:05,520
connect over the wireless network yes

979
00:42:05,520 --> 00:42:10,140
earlier it was over USB uh so does that

980
00:42:10,140 --> 00:42:13,320
thing uh does this particular disclosure

981
00:42:13,320 --> 00:42:16,500
you mentioned was that uh impacting that

982
00:42:16,500 --> 00:42:18,900
functionality as well or is what it was

983
00:42:18,900 --> 00:42:20,060
just the

984
00:42:20,060 --> 00:42:22,800
xcode that was used between the iPhone

985
00:42:22,800 --> 00:42:25,079
like the mobile device and the other

986
00:42:25,079 --> 00:42:28,320
MacBook or other Mac devices yeah it's

987
00:42:28,320 --> 00:42:31,079
it's very specific to xcode and the

988
00:42:31,079 --> 00:42:32,700
wireless development it doesn't affect

989
00:42:32,700 --> 00:42:35,460
any any other areas so it basically

990
00:42:35,460 --> 00:42:36,540
means if you don't do wireless

991
00:42:36,540 --> 00:42:39,420
development there's no there's nothing

992
00:42:39,420 --> 00:42:40,920
to fear about

993
00:42:40,920 --> 00:42:43,380
is that what you wanted to know

994
00:42:43,380 --> 00:42:46,619
okay so yeah in the uh so when you

995
00:42:46,619 --> 00:42:48,359
connect with the car so it's basically

996
00:42:48,359 --> 00:42:50,460
also or the wireless

997
00:42:50,460 --> 00:42:51,660
so

998
00:42:51,660 --> 00:42:53,579
I'm not sure if that was the xcode

999
00:42:53,579 --> 00:42:56,400
utility was used there or not oh like if

1000
00:42:56,400 --> 00:42:58,200
you use a different platform

1001
00:42:58,200 --> 00:43:00,000
actually he's asking if there are other

1002
00:43:00,000 --> 00:43:02,460
platforms like yeah I mean well

1003
00:43:02,460 --> 00:43:04,380
technically yes because

1004
00:43:04,380 --> 00:43:07,980
um it's not unencrypted because uh

1005
00:43:07,980 --> 00:43:10,020
you're using xcode or Mac OS it's

1006
00:43:10,020 --> 00:43:11,460
unencrypted because it's it's

1007
00:43:11,460 --> 00:43:13,680
implemented that way and we had the same

1008
00:43:13,680 --> 00:43:15,720
issue with zip iMobile device where we

1009
00:43:15,720 --> 00:43:17,540
basically had to break our abstraction

1010
00:43:17,540 --> 00:43:21,359
to get it to work again over USB where

1011
00:43:21,359 --> 00:43:24,480
it was also broken which is fixed as

1012
00:43:24,480 --> 00:43:26,640
well now of course because it's the same

1013
00:43:26,640 --> 00:43:28,680
thing just a different connection so

1014
00:43:28,680 --> 00:43:30,960
yeah it can you can still exploit it

1015
00:43:30,960 --> 00:43:33,079
even from other

1016
00:43:33,079 --> 00:43:36,180
platforms but uh yeah you would have to

1017
00:43:36,180 --> 00:43:39,000
do like Wireless development and

1018
00:43:39,000 --> 00:43:40,560
um yeah I don't know if it's that

1019
00:43:40,560 --> 00:43:43,140
readily usable but technically it's

1020
00:43:43,140 --> 00:43:46,920
possible yes okay thank you yeah any

1021
00:43:46,920 --> 00:43:48,240
other questions

1022
00:43:48,240 --> 00:43:50,359
yeah

1023
00:43:50,720 --> 00:43:53,839
thank you

