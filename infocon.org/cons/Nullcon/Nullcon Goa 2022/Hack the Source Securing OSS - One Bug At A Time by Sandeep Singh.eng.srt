1
00:00:03,200 --> 00:00:05,359
we go all right welcome everyone to the

2
00:00:05,359 --> 00:00:08,320
talk uh the talk as the title says and

3
00:00:08,320 --> 00:00:10,000
pretty long one

4
00:00:10,000 --> 00:00:12,000
is hack the source securing open source

5
00:00:12,000 --> 00:00:14,160
software one bug at a time

6
00:00:14,160 --> 00:00:15,759
and uh so

7
00:00:15,759 --> 00:00:17,920
we are not going to disclose any open

8
00:00:17,920 --> 00:00:19,359
source zero days here so if you're

9
00:00:19,359 --> 00:00:20,640
expecting that

10
00:00:20,640 --> 00:00:23,359
uh it's it's time uh to kind of make

11
00:00:23,359 --> 00:00:26,000
that clear uh what are you what are we

12
00:00:26,000 --> 00:00:27,760
gonna talk about uh what we're gonna

13
00:00:27,760 --> 00:00:30,800
talk about is basically uh looking at

14
00:00:30,800 --> 00:00:33,120
open source programs on hacker one okay

15
00:00:33,120 --> 00:00:34,800
so i'll be talking a lot about hacker

16
00:00:34,800 --> 00:00:37,520
one uh bug money programs and hacker one

17
00:00:37,520 --> 00:00:39,920
and in the past we've talked a lot about

18
00:00:39,920 --> 00:00:42,079
uh regular bug bounty programs wherein

19
00:00:42,079 --> 00:00:44,800
uh we focus on dynamic web apps dynamic

20
00:00:44,800 --> 00:00:46,000
mobile apps

21
00:00:46,000 --> 00:00:47,039
uh

22
00:00:47,039 --> 00:00:49,360
and and other assets but today i'll be

23
00:00:49,360 --> 00:00:51,440
specifically focusing on open source

24
00:00:51,440 --> 00:00:53,120
programs and and

25
00:00:53,120 --> 00:00:56,239
why it's needed how can we approach it

26
00:00:56,239 --> 00:00:59,520
are there bounties at all or not so yeah

27
00:00:59,520 --> 00:01:01,359
we'll look into that uh my name is

28
00:01:01,359 --> 00:01:04,800
sandeep i work for hacker one

29
00:01:05,199 --> 00:01:07,680
all right so what do we have today why

30
00:01:07,680 --> 00:01:09,600
should we care at all for for open

31
00:01:09,600 --> 00:01:12,479
source uh bhagavani programs

32
00:01:12,479 --> 00:01:14,240
after all they don't have the money so

33
00:01:14,240 --> 00:01:16,400
yeah why should we care

34
00:01:16,400 --> 00:01:18,560
so uh open source targets that are

35
00:01:18,560 --> 00:01:20,799
available on hacker one to target and

36
00:01:20,799 --> 00:01:23,119
and i'll go beyond that as well it's not

37
00:01:23,119 --> 00:01:24,960
just hacker one but uh there are other

38
00:01:24,960 --> 00:01:26,640
places as well you can find open source

39
00:01:26,640 --> 00:01:28,479
programs open source projects where you

40
00:01:28,479 --> 00:01:29,520
can

41
00:01:29,520 --> 00:01:32,880
use all your skills to kind of you know

42
00:01:32,880 --> 00:01:36,000
find bugs and kind of report to them

43
00:01:36,000 --> 00:01:38,079
then once you've found your open source

44
00:01:38,079 --> 00:01:40,079
targets how would you approach open

45
00:01:40,079 --> 00:01:42,240
source targets like what methodologies

46
00:01:42,240 --> 00:01:45,200
you can build uh again uh in a 30 40

47
00:01:45,200 --> 00:01:47,520
minute talk i cannot go deep uh but i'll

48
00:01:47,520 --> 00:01:49,680
give you like a very bird's eye view of

49
00:01:49,680 --> 00:01:51,439
what your methodology can look like you

50
00:01:51,439 --> 00:01:53,360
can take that home

51
00:01:53,360 --> 00:01:56,159
build your own uh workbenches start

52
00:01:56,159 --> 00:01:57,600
building out your methodologies and

53
00:01:57,600 --> 00:01:59,119
start focusing on them

54
00:01:59,119 --> 00:02:00,960
and then i'll introduce you to something

55
00:02:00,960 --> 00:02:03,680
called internet bug bounty in short what

56
00:02:03,680 --> 00:02:05,840
is called ibb

57
00:02:05,840 --> 00:02:09,119
i'll talk in detail what that includes

58
00:02:09,119 --> 00:02:12,319
how does that works so like i said after

59
00:02:12,319 --> 00:02:13,920
all open source projects don't have

60
00:02:13,920 --> 00:02:16,400
money so we are trying to fix that

61
00:02:16,400 --> 00:02:18,720
using internet bug boundary and how does

62
00:02:18,720 --> 00:02:21,680
ibb works so we'll we'll go into that

63
00:02:21,680 --> 00:02:24,640
this is roughly the agenda for today

64
00:02:24,640 --> 00:02:26,239
all right so the first question why

65
00:02:26,239 --> 00:02:28,000
should we care uh

66
00:02:28,000 --> 00:02:30,160
and this is fairly a common knowledge

67
00:02:30,160 --> 00:02:31,920
now this is not something new that i'm

68
00:02:31,920 --> 00:02:33,440
telling you uh

69
00:02:33,440 --> 00:02:35,599
all modern digital infrastructure is

70
00:02:35,599 --> 00:02:37,280
powered by a software supply chain that

71
00:02:37,280 --> 00:02:38,720
consists of a lot of open source

72
00:02:38,720 --> 00:02:40,879
projects that we use

73
00:02:40,879 --> 00:02:42,959
and and anyone who's worked in a

74
00:02:42,959 --> 00:02:44,879
development shop or in in product

75
00:02:44,879 --> 00:02:46,800
security kind of environment you know

76
00:02:46,800 --> 00:02:48,879
you're aware of the the nightmares that

77
00:02:48,879 --> 00:02:51,519
node.js dependencies brings in

78
00:02:51,519 --> 00:02:53,440
environment these days that's just one

79
00:02:53,440 --> 00:02:55,599
example so so there are many there are

80
00:02:55,599 --> 00:02:57,440
many many others

81
00:02:57,440 --> 00:02:58,959
open source software represents a

82
00:02:58,959 --> 00:03:01,200
growing portion of the critical attack

83
00:03:01,200 --> 00:03:03,920
surface as well like the more uh attacks

84
00:03:03,920 --> 00:03:05,040
that you hear

85
00:03:05,040 --> 00:03:07,280
mostly around supply chains are caused

86
00:03:07,280 --> 00:03:09,280
by open source dependency then

87
00:03:09,280 --> 00:03:11,360
you might have heard about a primary

88
00:03:11,360 --> 00:03:13,519
secondary level of uh dependencies as

89
00:03:13,519 --> 00:03:15,920
well like your software is relying on a

90
00:03:15,920 --> 00:03:18,000
dependency that you can track and kind

91
00:03:18,000 --> 00:03:20,720
of you know work and fix but that

92
00:03:20,720 --> 00:03:22,720
library that you're relying on might be

93
00:03:22,720 --> 00:03:24,400
relying on something else as well so

94
00:03:24,400 --> 00:03:27,840
that's that's uh like secondary uh i

95
00:03:27,840 --> 00:03:29,840
would say dependency secondary level of

96
00:03:29,840 --> 00:03:31,200
dependencies

97
00:03:31,200 --> 00:03:33,280
and so so it becomes it keeps becoming

98
00:03:33,280 --> 00:03:35,440
pretty complex uh

99
00:03:35,440 --> 00:03:37,440
pretty soon the moment you start digging

100
00:03:37,440 --> 00:03:38,480
into it

101
00:03:38,480 --> 00:03:39,280
uh

102
00:03:39,280 --> 00:03:42,000
and so just as open source software is

103
00:03:42,000 --> 00:03:43,599
enhanced through the community there are

104
00:03:43,599 --> 00:03:44,480
like

105
00:03:44,480 --> 00:03:46,959
lots and lots of community contributors

106
00:03:46,959 --> 00:03:48,879
who make those open source softwares

107
00:03:48,879 --> 00:03:51,440
work uh i think and then it's it's

108
00:03:51,440 --> 00:03:53,280
pretty uh kind of understood that

109
00:03:53,280 --> 00:03:55,200
community should also play an important

110
00:03:55,200 --> 00:03:58,239
role in securing it as well and and

111
00:03:58,239 --> 00:03:59,280
like

112
00:03:59,280 --> 00:04:01,519
at this conference most of us are here

113
00:04:01,519 --> 00:04:03,760
like you know on the offensive side

114
00:04:03,760 --> 00:04:06,080
defensive side mostly offensive side so

115
00:04:06,080 --> 00:04:08,560
yeah by by finding bugs in open source

116
00:04:08,560 --> 00:04:10,080
uh softwares

117
00:04:10,080 --> 00:04:11,840
and and of course you know bug bounty

118
00:04:11,840 --> 00:04:14,480
programs can help facilitate that whole

119
00:04:14,480 --> 00:04:19,599
finding bugs and rewarding bugs uh thing

120
00:04:19,839 --> 00:04:22,240
all right so uh open source target so

121
00:04:22,240 --> 00:04:24,080
when you go on hacker one all you have

122
00:04:24,080 --> 00:04:26,000
to do is go to hackerone.com

123
00:04:26,000 --> 00:04:28,560
opportunities you can asset type select

124
00:04:28,560 --> 00:04:31,040
by source code the reason it source code

125
00:04:31,040 --> 00:04:32,800
is all open source softwares will have

126
00:04:32,800 --> 00:04:35,840
their source code in public and you can

127
00:04:35,840 --> 00:04:38,479
filter by that you'll find

128
00:04:38,479 --> 00:04:40,400
lots and lots of projects

129
00:04:40,400 --> 00:04:42,560
some projects have their own bug bounty

130
00:04:42,560 --> 00:04:44,800
program uh there are projects like uh

131
00:04:44,800 --> 00:04:46,080
commercial projects these are like

132
00:04:46,080 --> 00:04:48,160
elastic for example so elastic would

133
00:04:48,160 --> 00:04:50,639
have its own bug bounty program running

134
00:04:50,639 --> 00:04:53,600
it running on its own source code then

135
00:04:53,600 --> 00:04:54,880
you'll have

136
00:04:54,880 --> 00:04:56,560
some vulnerability disclosure programs

137
00:04:56,560 --> 00:04:58,400
on open source uh projects you'll find

138
00:04:58,400 --> 00:04:59,840
projects like kubernetes you'll find

139
00:04:59,840 --> 00:05:01,680
projects like curl you'll find projects

140
00:05:01,680 --> 00:05:02,400
like

141
00:05:02,400 --> 00:05:03,520
uh

142
00:05:03,520 --> 00:05:05,600
node.js and all those kind of things as

143
00:05:05,600 --> 00:05:09,199
well which you can target i'll come to

144
00:05:09,199 --> 00:05:11,120
it in the later part as to

145
00:05:11,120 --> 00:05:14,240
how programs are grouped uh into uh like

146
00:05:14,240 --> 00:05:16,479
you know paying paying for those bugs

147
00:05:16,479 --> 00:05:18,560
and all those kind of things so so yeah

148
00:05:18,560 --> 00:05:19,330
this is the way

149
00:05:19,330 --> 00:05:21,199
[Music]

150
00:05:21,199 --> 00:05:23,280
all right so once you've uh

151
00:05:23,280 --> 00:05:26,080
kind of now this is where we pivot so

152
00:05:26,080 --> 00:05:28,479
doing bug bounty on open source program

153
00:05:28,479 --> 00:05:31,280
is would be slightly different uh in

154
00:05:31,280 --> 00:05:32,320
terms of

155
00:05:32,320 --> 00:05:35,120
you can always start building

156
00:05:35,120 --> 00:05:37,440
recon doing recon taking recon

157
00:05:37,440 --> 00:05:39,280
approaches going to github advanced

158
00:05:39,280 --> 00:05:42,160
searches looking for prs etc but that

159
00:05:42,160 --> 00:05:44,000
approach we are not taking here

160
00:05:44,000 --> 00:05:46,000
because by searching for these open

161
00:05:46,000 --> 00:05:47,759
source targets we are specifically going

162
00:05:47,759 --> 00:05:48,880
to

163
00:05:48,880 --> 00:05:51,199
kind of build a methodology to focus on

164
00:05:51,199 --> 00:05:54,160
one project at a time and let's say give

165
00:05:54,160 --> 00:05:55,919
a lot of time to one project rather than

166
00:05:55,919 --> 00:05:58,960
you know hunting for bugs across uh like

167
00:05:58,960 --> 00:06:01,280
the whole open source pool uh let's say

168
00:06:01,280 --> 00:06:03,840
go to github and you know do queries and

169
00:06:03,840 --> 00:06:05,600
all that that we are not going to do we

170
00:06:05,600 --> 00:06:07,280
are going to look at the code base so

171
00:06:07,280 --> 00:06:09,199
from here we will

172
00:06:09,199 --> 00:06:11,680
kind of move on to a part wherein we'll

173
00:06:11,680 --> 00:06:13,680
primarily focus on the source code that

174
00:06:13,680 --> 00:06:15,280
we are targeting and and what

175
00:06:15,280 --> 00:06:19,400
methodology can we build

176
00:06:20,160 --> 00:06:21,919
okay anyone

177
00:06:21,919 --> 00:06:23,840
here i think we may have a lot of people

178
00:06:23,840 --> 00:06:25,840
who might have already done a lot of

179
00:06:25,840 --> 00:06:28,000
code review uh can i get a quick show of

180
00:06:28,000 --> 00:06:30,000
hands how many people have done code

181
00:06:30,000 --> 00:06:30,880
reviews

182
00:06:30,880 --> 00:06:32,560
okay pretty

183
00:06:32,560 --> 00:06:35,600
okay pretty less i was i was about to

184
00:06:35,600 --> 00:06:39,759
say pretty lot but then i stopped

185
00:06:40,880 --> 00:06:42,319
no there are no questions coming the

186
00:06:42,319 --> 00:06:45,360
talk is not technical at all so yeah i

187
00:06:45,360 --> 00:06:48,400
will set that middle talk disclaimer so

188
00:06:48,400 --> 00:06:50,960
it's it's just to help you

189
00:06:50,960 --> 00:06:53,199
the take away of this talk and it's it's

190
00:06:53,199 --> 00:06:55,120
in the middle that i'm saying is to

191
00:06:55,120 --> 00:06:57,280
is to understand what is available there

192
00:06:57,280 --> 00:06:59,759
to hack in terms of open source programs

193
00:06:59,759 --> 00:07:01,919
what is the very high level methodology

194
00:07:01,919 --> 00:07:03,520
that you can start where you can go how

195
00:07:03,520 --> 00:07:05,360
you can start building your kind of you

196
00:07:05,360 --> 00:07:07,280
know workbench

197
00:07:07,280 --> 00:07:10,319
so okay prepare uh the first thing let's

198
00:07:10,319 --> 00:07:12,400
say you choose a open source software

199
00:07:12,400 --> 00:07:13,599
you choose a program that you want to

200
00:07:13,599 --> 00:07:14,400
hack

201
00:07:14,400 --> 00:07:16,080
i'm not coming to the bounty party yet

202
00:07:16,080 --> 00:07:17,599
i'll come to the bounty part later

203
00:07:17,599 --> 00:07:19,360
because you know when we set the bounty

204
00:07:19,360 --> 00:07:21,199
conversations in the beginning then the

205
00:07:21,199 --> 00:07:24,000
conversations become different so

206
00:07:24,000 --> 00:07:25,759
so uh we'll

207
00:07:25,759 --> 00:07:27,759
we'll start with preparing like the very

208
00:07:27,759 --> 00:07:30,880
first thing of preparing or going into a

209
00:07:30,880 --> 00:07:32,880
code review kind of

210
00:07:32,880 --> 00:07:34,720
thing is that you should have a good

211
00:07:34,720 --> 00:07:38,000
code editor or an id and what does what

212
00:07:38,000 --> 00:07:40,240
good code editor means

213
00:07:40,240 --> 00:07:42,800
is that you should have a functionality

214
00:07:42,800 --> 00:07:44,800
to search through the whole code base in

215
00:07:44,800 --> 00:07:46,240
the code editor you should have

216
00:07:46,240 --> 00:07:49,199
functionality to search using regexes

217
00:07:49,199 --> 00:07:50,960
you should be able to kind of you know

218
00:07:50,960 --> 00:07:53,280
match with multiple files uh some file

219
00:07:53,280 --> 00:07:55,440
name patterns you should have good

220
00:07:55,440 --> 00:07:57,680
pattern magic in the code the reason i

221
00:07:57,680 --> 00:08:00,319
don't name a code of course we all but

222
00:08:00,319 --> 00:08:01,840
when i say all of this visual studio

223
00:08:01,840 --> 00:08:04,080
code stands out so a lot of people use

224
00:08:04,080 --> 00:08:05,840
it and then there are others as well

225
00:08:05,840 --> 00:08:07,759
okay so so yeah

226
00:08:07,759 --> 00:08:09,759
first build a good code editor like have

227
00:08:09,759 --> 00:08:11,759
a good code editor

228
00:08:11,759 --> 00:08:13,919
build your kind of comfortability around

229
00:08:13,919 --> 00:08:16,639
that searching pattern matching in those

230
00:08:16,639 --> 00:08:18,400
uh code editor

231
00:08:18,400 --> 00:08:20,879
be good with regex's as well have a good

232
00:08:20,879 --> 00:08:22,800
fairly good understanding of regex's and

233
00:08:22,800 --> 00:08:24,800
how they work you should also have an

234
00:08:24,800 --> 00:08:26,800
environment to create tests and test

235
00:08:26,800 --> 00:08:28,800
your hypothesis like how like if you

236
00:08:28,800 --> 00:08:30,639
have a certain test case that you want

237
00:08:30,639 --> 00:08:31,919
to test and if you're able to compile

238
00:08:31,919 --> 00:08:33,360
the code in a certain environment and

239
00:08:33,360 --> 00:08:35,760
then test that that's that's certainly

240
00:08:35,760 --> 00:08:37,760
useful so that's

241
00:08:37,760 --> 00:08:39,200
kind of important

242
00:08:39,200 --> 00:08:41,599
know your code so any code base that you

243
00:08:41,599 --> 00:08:42,399
will

244
00:08:42,399 --> 00:08:44,080
start to look at

245
00:08:44,080 --> 00:08:46,320
you'll have to spend a lot of time and i

246
00:08:46,320 --> 00:08:47,839
say this that you know when when doing

247
00:08:47,839 --> 00:08:49,360
code reviews there is no alternative to

248
00:08:49,360 --> 00:08:51,839
reading code you'll have to read it okay

249
00:08:51,839 --> 00:08:54,399
you'll have to spend time reading it

250
00:08:54,399 --> 00:08:56,320
you'll have to understand what the what

251
00:08:56,320 --> 00:08:58,560
the program is what the code base does

252
00:08:58,560 --> 00:09:00,320
what functionality does it serve so

253
00:09:00,320 --> 00:09:02,640
where are the key functionality the code

254
00:09:02,640 --> 00:09:05,040
bases around the key functionalities

255
00:09:05,040 --> 00:09:07,360
which users does what kind of users does

256
00:09:07,360 --> 00:09:09,839
this program have or like this code base

257
00:09:09,839 --> 00:09:12,560
will have in in general uh what are

258
00:09:12,560 --> 00:09:14,000
those users supposed to do so you'll

259
00:09:14,000 --> 00:09:16,720
have to build uh your own threat model

260
00:09:16,720 --> 00:09:18,720
for the open source software that you're

261
00:09:18,720 --> 00:09:20,959
trying to kind of you know hack into and

262
00:09:20,959 --> 00:09:23,040
then based on your own threat model you

263
00:09:23,040 --> 00:09:25,519
can start targeting those particular

264
00:09:25,519 --> 00:09:27,440
areas of code in order to kind of find

265
00:09:27,440 --> 00:09:29,680
bugs and yes uh there is this whole

266
00:09:29,680 --> 00:09:31,279
conversation around coverage of code

267
00:09:31,279 --> 00:09:33,040
like if it's a big project if you have

268
00:09:33,040 --> 00:09:34,480
like millions of lines of code in that

269
00:09:34,480 --> 00:09:36,720
project how would you cover everything

270
00:09:36,720 --> 00:09:38,880
but what we are primarily focusing on

271
00:09:38,880 --> 00:09:41,200
here is how to find bugs or where you

272
00:09:41,200 --> 00:09:43,839
will uh mostly end up finding bugs

273
00:09:43,839 --> 00:09:44,720
so

274
00:09:44,720 --> 00:09:46,320
yeah know your code that's really

275
00:09:46,320 --> 00:09:47,760
important uh

276
00:09:47,760 --> 00:09:50,000
a lot of times we get this question like

277
00:09:50,000 --> 00:09:52,399
is knowing a programming language

278
00:09:52,399 --> 00:09:54,399
important to do code review yes of

279
00:09:54,399 --> 00:09:58,800
course one would say 100 important uh

280
00:09:58,800 --> 00:10:00,160
now the question kind of goes around

281
00:10:00,160 --> 00:10:02,080
like should i be able to write code uh

282
00:10:02,080 --> 00:10:04,080
this is an evergreen question a lot of

283
00:10:04,080 --> 00:10:05,760
people ask this question when doing

284
00:10:05,760 --> 00:10:07,360
hacking as well like you know learning

285
00:10:07,360 --> 00:10:09,440
security as well yes when you're doing

286
00:10:09,440 --> 00:10:11,360
code review i would say yeah knowing a

287
00:10:11,360 --> 00:10:13,519
programming language is really important

288
00:10:13,519 --> 00:10:15,360
and knowing how programming works in

289
00:10:15,360 --> 00:10:17,279
general is important now you don't need

290
00:10:17,279 --> 00:10:19,839
to know every language even

291
00:10:19,839 --> 00:10:20,800
okay

292
00:10:20,800 --> 00:10:23,360
what went wrong

293
00:10:23,360 --> 00:10:25,600
okay so uh knowing a programming

294
00:10:25,600 --> 00:10:27,440
language is good enough if you if you

295
00:10:27,440 --> 00:10:29,920
coming from a legacy sea world you're

296
00:10:29,920 --> 00:10:33,519
probably the safest in this world and if

297
00:10:33,519 --> 00:10:35,839
you're more of a modern like programming

298
00:10:35,839 --> 00:10:37,839
language person uh that's also good

299
00:10:37,839 --> 00:10:40,480
because a lot of concepts do carry uh

300
00:10:40,480 --> 00:10:42,320
into uh these these kind of different

301
00:10:42,320 --> 00:10:44,079
programming languages so yeah you don't

302
00:10:44,079 --> 00:10:45,360
have to sweat about like you know there

303
00:10:45,360 --> 00:10:47,200
is this new language

304
00:10:47,200 --> 00:10:49,200
uh rust in the market there is go in the

305
00:10:49,200 --> 00:10:52,480
market and i only coded in let's say um

306
00:10:52,480 --> 00:10:54,480
like javascript python nothing nothing

307
00:10:54,480 --> 00:10:57,360
much or java maybe nothing much

308
00:10:57,360 --> 00:10:58,240
uh

309
00:10:58,240 --> 00:10:58,959
no

310
00:10:58,959 --> 00:11:00,480
no vulnerability types and how they look

311
00:11:00,480 --> 00:11:02,320
at the code level now this is important

312
00:11:02,320 --> 00:11:04,800
a lot of uh people who generally engage

313
00:11:04,800 --> 00:11:06,320
in bug bounty they're looking at

314
00:11:06,320 --> 00:11:07,839
applications from a very dynamic

315
00:11:07,839 --> 00:11:09,680
perspective where it looks in the front

316
00:11:09,680 --> 00:11:11,440
and you in you intercept request

317
00:11:11,440 --> 00:11:13,200
responses and that's it

318
00:11:13,200 --> 00:11:14,480
you you play with those request

319
00:11:14,480 --> 00:11:16,959
responses a lot but you should be

320
00:11:16,959 --> 00:11:20,079
familiar with what it looks like what

321
00:11:20,079 --> 00:11:21,680
the code level looks like for any

322
00:11:21,680 --> 00:11:23,760
vulnerability type and how you can build

323
00:11:23,760 --> 00:11:25,440
that you can always look for vulnerable

324
00:11:25,440 --> 00:11:26,959
applications you can go to their code

325
00:11:26,959 --> 00:11:29,040
basis read their code and see what the

326
00:11:29,040 --> 00:11:31,040
vulnerability looks like

327
00:11:31,040 --> 00:11:33,120
you can also this is a very interesting

328
00:11:33,120 --> 00:11:34,720
thing and that has helped a lot of

329
00:11:34,720 --> 00:11:36,320
people that we've spoken to

330
00:11:36,320 --> 00:11:37,360
is

331
00:11:37,360 --> 00:11:39,440
you can go to the open source projects

332
00:11:39,440 --> 00:11:41,680
you can look at their uh prs the

333
00:11:41,680 --> 00:11:43,839
security pr's the bug fixes that have

334
00:11:43,839 --> 00:11:46,399
gone there and look at what bug was it

335
00:11:46,399 --> 00:11:48,560
solving what did the code look like and

336
00:11:48,560 --> 00:11:50,240
that's the beauty of open source i can

337
00:11:50,240 --> 00:11:52,399
always go back and kind of you know uh

338
00:11:52,399 --> 00:11:54,320
look and and that is probably the best

339
00:11:54,320 --> 00:11:56,000
learning source if you want to learn

340
00:11:56,000 --> 00:11:58,079
about like you know how does bugs or

341
00:11:58,079 --> 00:11:59,600
vulnerability types look like at the

342
00:11:59,600 --> 00:12:00,880
code level

343
00:12:00,880 --> 00:12:02,880
concepts there are concepts uh code

344
00:12:02,880 --> 00:12:04,240
review concepts that you should

345
00:12:04,240 --> 00:12:06,720
definitely be aware things like

346
00:12:06,720 --> 00:12:10,000
anyone aware of things like source sync

347
00:12:10,000 --> 00:12:11,680
things like that okay so yeah things

348
00:12:11,680 --> 00:12:14,480
like sources things uh where you're

349
00:12:14,480 --> 00:12:16,639
taking the input how is that input being

350
00:12:16,639 --> 00:12:18,000
processed and where it's kind of

351
00:12:18,000 --> 00:12:20,079
converting into an output or like where

352
00:12:20,079 --> 00:12:22,480
is what is the final outcome so

353
00:12:22,480 --> 00:12:24,800
so know those concepts as well and uh

354
00:12:24,800 --> 00:12:27,519
like i said uh read the code there is no

355
00:12:27,519 --> 00:12:29,519
replacement of reading the code learn

356
00:12:29,519 --> 00:12:31,279
more about the lang so if you have let's

357
00:12:31,279 --> 00:12:34,160
say picked up a project which is in

358
00:12:34,160 --> 00:12:36,639
uh let's say ruby okay and if you have

359
00:12:36,639 --> 00:12:38,720
to spend a month in that project it's

360
00:12:38,720 --> 00:12:40,240
it's good that you learn more about the

361
00:12:40,240 --> 00:12:42,000
language you learn more about the

362
00:12:42,000 --> 00:12:43,440
libraries now someone who is

363
00:12:43,440 --> 00:12:45,600
implementing a project which is written

364
00:12:45,600 --> 00:12:47,839
ruby and then they're kind of looking at

365
00:12:47,839 --> 00:12:50,079
all the dependencies the libraries etc

366
00:12:50,079 --> 00:12:51,680
they have a lot of time but as a bug

367
00:12:51,680 --> 00:12:53,600
hunter as a bug finder you will not have

368
00:12:53,600 --> 00:12:55,600
a lot of time and that's where the fun

369
00:12:55,600 --> 00:12:57,440
comes you'll also have to learn about

370
00:12:57,440 --> 00:12:59,200
those libraries that a lot of software

371
00:12:59,200 --> 00:13:01,120
developers end up spending a lot of time

372
00:13:01,120 --> 00:13:03,519
with learn those libraries what those

373
00:13:03,519 --> 00:13:05,279
design patterns are kind of how they

374
00:13:05,279 --> 00:13:06,880
look like and all those kind of things

375
00:13:06,880 --> 00:13:08,639
it's it's really fun like you know when

376
00:13:08,639 --> 00:13:10,320
you start it uh

377
00:13:10,320 --> 00:13:12,480
you spend like a month or two and you

378
00:13:12,480 --> 00:13:14,959
learn this the reason i kind of keep

379
00:13:14,959 --> 00:13:16,720
bringing this up is because

380
00:13:16,720 --> 00:13:19,440
uh accept the bounty part and accept the

381
00:13:19,440 --> 00:13:21,120
other things there is a lot of learning

382
00:13:21,120 --> 00:13:24,720
every time you get into code reviews

383
00:13:25,040 --> 00:13:26,399
any questions

384
00:13:26,399 --> 00:13:28,880
before we move ahead okay we'll take

385
00:13:28,880 --> 00:13:30,399
questions in the end then

386
00:13:30,399 --> 00:13:32,079
we'll take questions in the end probably

387
00:13:32,079 --> 00:13:35,279
i think we have a good time okay then uh

388
00:13:35,279 --> 00:13:36,800
now this is pretty standard like when we

389
00:13:36,800 --> 00:13:38,720
talk about code reviews uh

390
00:13:38,720 --> 00:13:40,560
there is standard things like static

391
00:13:40,560 --> 00:13:43,279
analysis dynamic analysis uh manual code

392
00:13:43,279 --> 00:13:46,639
reviews etc that that's done but uh

393
00:13:46,639 --> 00:13:48,880
what i'm largely talking about is uh

394
00:13:48,880 --> 00:13:50,959
what we've kind of tested in in open

395
00:13:50,959 --> 00:13:52,800
source projects that we see on the

396
00:13:52,800 --> 00:13:55,440
platform as to what kind of leads to

397
00:13:55,440 --> 00:13:58,160
finding good bucks okay or decent bugs

398
00:13:58,160 --> 00:13:59,600
and some people would think that you

399
00:13:59,600 --> 00:14:01,519
know these open source projects would

400
00:14:01,519 --> 00:14:04,639
have a lot of eyes on it already so like

401
00:14:04,639 --> 00:14:06,480
would static analysis things like static

402
00:14:06,480 --> 00:14:08,399
analysis yield anything or lead to

403
00:14:08,399 --> 00:14:11,040
anything they do sometimes okay and and

404
00:14:11,040 --> 00:14:13,360
it's useful when dealing with large code

405
00:14:13,360 --> 00:14:15,279
bases of course you'll not be able to

406
00:14:15,279 --> 00:14:17,680
read through 400 like 400 000 lines of

407
00:14:17,680 --> 00:14:19,839
code yourself so

408
00:14:19,839 --> 00:14:22,240
building out a like a good static

409
00:14:22,240 --> 00:14:25,120
analysis test bed and i'll not be

410
00:14:25,120 --> 00:14:26,560
talking about any commercial tool but

411
00:14:26,560 --> 00:14:28,160
i'll come to the latest slide as to

412
00:14:28,160 --> 00:14:29,920
which tools you can use for for static

413
00:14:29,920 --> 00:14:32,880
analysis but it's also good for someone

414
00:14:32,880 --> 00:14:35,279
starting out code review okay like all

415
00:14:35,279 --> 00:14:37,199
the leads that it throws at you you're

416
00:14:37,199 --> 00:14:40,079
reading about that going into uh kind of

417
00:14:40,079 --> 00:14:41,760
you know reading the analysis results

418
00:14:41,760 --> 00:14:44,240
would also give you a lot of information

419
00:14:44,240 --> 00:14:44,959
uh

420
00:14:44,959 --> 00:14:46,880
a big complaint around static analysis 9

421
00:14:46,880 --> 00:14:48,720
i don't know why as a security industry

422
00:14:48,720 --> 00:14:50,480
we've not solved this

423
00:14:50,480 --> 00:14:52,560
is it's a 20 30 year old problem is the

424
00:14:52,560 --> 00:14:55,120
false positives around static analysis

425
00:14:55,120 --> 00:14:56,800
or static review

426
00:14:56,800 --> 00:14:59,600
static code review as a tester or as a

427
00:14:59,600 --> 00:15:01,040
bug hunter

428
00:15:01,040 --> 00:15:03,600
there are ways you can kind of overcome

429
00:15:03,600 --> 00:15:05,760
some of those but not fully

430
00:15:05,760 --> 00:15:08,639
you will and some tools not all tools

431
00:15:08,639 --> 00:15:11,040
would give you options to configure your

432
00:15:11,040 --> 00:15:14,079
trusted inputs in the in the uh scanner

433
00:15:14,079 --> 00:15:16,320
or in the tool that you're using you can

434
00:15:16,320 --> 00:15:18,160
always configure your trusted inputs as

435
00:15:18,160 --> 00:15:20,000
to this particular piece of code or this

436
00:15:20,000 --> 00:15:21,760
particular functionality

437
00:15:21,760 --> 00:15:23,839
starting from this particular source is

438
00:15:23,839 --> 00:15:25,760
is not kind of you know it is a trusted

439
00:15:25,760 --> 00:15:28,800
place don't give me bugs here uh exclude

440
00:15:28,800 --> 00:15:30,800
unneeded codes there are a lot of test

441
00:15:30,800 --> 00:15:33,760
uh quotes as well in in repos etc just

442
00:15:33,760 --> 00:15:35,600
exclude them because you'll always end

443
00:15:35,600 --> 00:15:38,160
up finding a lot of bugs in in test

444
00:15:38,160 --> 00:15:40,399
repos and all those uh

445
00:15:40,399 --> 00:15:42,079
the the limitation around static

446
00:15:42,079 --> 00:15:43,760
analysis is

447
00:15:43,760 --> 00:15:45,199
is pretty well known

448
00:15:45,199 --> 00:15:46,959
they are unable to detect specific bug

449
00:15:46,959 --> 00:15:49,440
classes like business logic issues in in

450
00:15:49,440 --> 00:15:51,759
applications uh in code basis of

451
00:15:51,759 --> 00:15:52,880
applications they'll not be able to

452
00:15:52,880 --> 00:15:54,480
detect

453
00:15:54,480 --> 00:15:56,320
things like idol they'll not be able to

454
00:15:56,320 --> 00:15:58,480
detect most likely okay not saying

455
00:15:58,480 --> 00:16:01,600
hundred percent of the times

456
00:16:01,680 --> 00:16:04,720
uh tools that are available uh

457
00:16:04,720 --> 00:16:07,199
the the most kind of

458
00:16:07,199 --> 00:16:09,519
common or the most well known or most

459
00:16:09,519 --> 00:16:12,399
talked about thing these days is codeql

460
00:16:12,399 --> 00:16:14,480
it supports it has a support for a lot

461
00:16:14,480 --> 00:16:16,000
of programs but it supports really well

462
00:16:16,000 --> 00:16:17,519
cc plus plus

463
00:16:17,519 --> 00:16:19,279
c sharp co

464
00:16:19,279 --> 00:16:22,480
uh python ruby these kind of

465
00:16:22,480 --> 00:16:24,880
languages really well it supports others

466
00:16:24,880 --> 00:16:27,040
as well i think but the support is not

467
00:16:27,040 --> 00:16:29,360
that great uh and it's it's it's owned

468
00:16:29,360 --> 00:16:30,560
by github

469
00:16:30,560 --> 00:16:32,160
but it's

470
00:16:32,160 --> 00:16:34,959
free for your own research and free for

471
00:16:34,959 --> 00:16:37,440
open source projects so you can run

472
00:16:37,440 --> 00:16:40,320
code ql on open source projects and a

473
00:16:40,320 --> 00:16:42,560
few of you might be aware code github

474
00:16:42,560 --> 00:16:43,680
also runs a

475
00:16:43,680 --> 00:16:46,800
bug bounty on code ql queries so if you

476
00:16:46,800 --> 00:16:48,480
run it on your project or that you're

477
00:16:48,480 --> 00:16:50,000
testing if you write a query for

478
00:16:50,000 --> 00:16:51,759
detecting a specific pattern and if you

479
00:16:51,759 --> 00:16:53,839
submit that query to github they'll pay

480
00:16:53,839 --> 00:16:56,000
your bounty for that just for the query

481
00:16:56,000 --> 00:16:58,000
okay so so they want to improve that

482
00:16:58,000 --> 00:17:01,360
lgtm is again it was a different product

483
00:17:01,360 --> 00:17:03,920
but it's now bought by github being used

484
00:17:03,920 --> 00:17:05,599
it's a it's a sas kind of thing you can

485
00:17:05,599 --> 00:17:08,319
just go and upload your code repo there

486
00:17:08,319 --> 00:17:09,679
depending on

487
00:17:09,679 --> 00:17:11,280
like you know how much you want to play

488
00:17:11,280 --> 00:17:12,799
around that and it will throw out a lot

489
00:17:12,799 --> 00:17:15,520
of results code ql and lgtm together are

490
00:17:15,520 --> 00:17:17,919
kind of good lgtm is getting merged into

491
00:17:17,919 --> 00:17:20,240
github uh now so it's like github code

492
00:17:20,240 --> 00:17:22,000
scanning or something like that

493
00:17:22,000 --> 00:17:24,079
uh there is uh some these are all free

494
00:17:24,079 --> 00:17:26,559
uh and most if not open source i think

495
00:17:26,559 --> 00:17:28,319
no they're all free to use yeah not all

496
00:17:28,319 --> 00:17:30,480
of them are open source uh brakeman it's

497
00:17:30,480 --> 00:17:32,720
it's pretty good for ruby uh on their

498
00:17:32,720 --> 00:17:35,360
website they also have a documentation

499
00:17:35,360 --> 00:17:37,520
around checks like what checks do they

500
00:17:37,520 --> 00:17:40,160
perform and those are also a good place

501
00:17:40,160 --> 00:17:43,039
to kind of you know learn uh as to like

502
00:17:43,039 --> 00:17:45,760
what issues might occur in in uh ruby

503
00:17:45,760 --> 00:17:47,520
based projects

504
00:17:47,520 --> 00:17:50,640
uh sal uh php based

505
00:17:50,640 --> 00:17:52,559
this is a static analyzer so you'll have

506
00:17:52,559 --> 00:17:54,320
to use uh something called taint

507
00:17:54,320 --> 00:17:56,480
analysis a plug-in called internal or

508
00:17:56,480 --> 00:17:57,919
like an option called taint analysis to

509
00:17:57,919 --> 00:18:01,200
run security related checks a lot of you

510
00:18:01,200 --> 00:18:02,480
or some of you might be aware of

511
00:18:02,480 --> 00:18:03,840
something called

512
00:18:03,840 --> 00:18:06,799
find sec bugs but the the more the

513
00:18:06,799 --> 00:18:09,360
bigger static analyzer for java is spot

514
00:18:09,360 --> 00:18:11,840
bucks which is a fork of fine bugs and

515
00:18:11,840 --> 00:18:13,840
they have a plug-in called find segbucks

516
00:18:13,840 --> 00:18:15,039
and and

517
00:18:15,039 --> 00:18:17,679
it also i think integrates well with uh

518
00:18:17,679 --> 00:18:19,919
maven and gradle uh kind of uh

519
00:18:19,919 --> 00:18:22,320
environment as well in a java world

520
00:18:22,320 --> 00:18:25,760
so yeah spotbox works well cppcheck as

521
00:18:25,760 --> 00:18:29,039
the name says uh it's c uh slash c plus

522
00:18:29,039 --> 00:18:30,559
plus so

523
00:18:30,559 --> 00:18:32,480
you can see it's a pretty good coverage

524
00:18:32,480 --> 00:18:34,640
of uh most of the common languages there

525
00:18:34,640 --> 00:18:36,640
are languages not listed here but you

526
00:18:36,640 --> 00:18:38,160
can start with these like these are free

527
00:18:38,160 --> 00:18:41,440
to use run these uh scanners on on to on

528
00:18:41,440 --> 00:18:43,679
on the projects and and analyze the

529
00:18:43,679 --> 00:18:45,200
results not just that you know you ran

530
00:18:45,200 --> 00:18:46,720
the scan you didn't find anything that's

531
00:18:46,720 --> 00:18:48,799
it i'm going home no you'll have to read

532
00:18:48,799 --> 00:18:50,400
through like what it's throwing at you

533
00:18:50,400 --> 00:18:52,400
okay just and that's a good knowledge

534
00:18:52,400 --> 00:18:54,480
building exercise of course a lot of

535
00:18:54,480 --> 00:18:55,919
times it might give you some lead as

536
00:18:55,919 --> 00:18:57,600
well as to where for example if there is

537
00:18:57,600 --> 00:18:59,440
a specific portion of the code or

538
00:18:59,440 --> 00:19:01,280
specific functionality where it's

539
00:19:01,280 --> 00:19:03,280
throwing a lot of leads you might want

540
00:19:03,280 --> 00:19:05,280
to go and just inspect that whole

541
00:19:05,280 --> 00:19:06,799
functionality read the code base

542
00:19:06,799 --> 00:19:10,520
yourself manually

543
00:19:11,440 --> 00:19:13,679
okay manual analysis

544
00:19:13,679 --> 00:19:15,840
uh scope where you want to focus now the

545
00:19:15,840 --> 00:19:18,320
reason i say uh scope where you want to

546
00:19:18,320 --> 00:19:20,480
focus is there would be big projects you

547
00:19:20,480 --> 00:19:22,640
will not be able to read all of the

548
00:19:22,640 --> 00:19:25,039
projects uh source code so

549
00:19:25,039 --> 00:19:27,039
the places and that's why initially i

550
00:19:27,039 --> 00:19:28,960
said build your own threat model uh

551
00:19:28,960 --> 00:19:31,520
understand uh like you know what the app

552
00:19:31,520 --> 00:19:33,679
what the code base does which are the

553
00:19:33,679 --> 00:19:36,480
major functionalities of the code base

554
00:19:36,480 --> 00:19:38,320
uh and and build your own threat model

555
00:19:38,320 --> 00:19:40,480
read the code once again i keep saying

556
00:19:40,480 --> 00:19:42,400
this all the time uh

557
00:19:42,400 --> 00:19:43,360
and

558
00:19:43,360 --> 00:19:45,280
there is something called targeting code

559
00:19:45,280 --> 00:19:47,440
basis based on metadata like you build

560
00:19:47,440 --> 00:19:50,720
your own metadata okay uh there are some

561
00:19:50,720 --> 00:19:52,799
you can do a differential analysis on

562
00:19:52,799 --> 00:19:54,799
code bases and find out which are the

563
00:19:54,799 --> 00:19:57,280
old parts of the code you might end up

564
00:19:57,280 --> 00:19:59,520
finding something at code bases which

565
00:19:59,520 --> 00:20:01,360
are pretty old or parts of the code

566
00:20:01,360 --> 00:20:03,280
which are pretty old uh based on

567
00:20:03,280 --> 00:20:05,760
complexity uh you can run complexity

568
00:20:05,760 --> 00:20:08,400
tests using some rq matrix plus plus uh

569
00:20:08,400 --> 00:20:11,280
kind of tools and you can find so mo

570
00:20:11,280 --> 00:20:12,240
again

571
00:20:12,240 --> 00:20:14,720
no guarantee but a lot of times complex

572
00:20:14,720 --> 00:20:16,559
code is where developers might end up

573
00:20:16,559 --> 00:20:18,640
making mistakes so you could go to

574
00:20:18,640 --> 00:20:20,880
places like uh you know find complex

575
00:20:20,880 --> 00:20:24,000
codes using complexity tests and go and

576
00:20:24,000 --> 00:20:26,480
manually review them as well

577
00:20:26,480 --> 00:20:28,559
uh parts of code written by certain

578
00:20:28,559 --> 00:20:30,880
developers this is a pretty uh kind of

579
00:20:30,880 --> 00:20:33,280
weird thing that i've added but a lot of

580
00:20:33,280 --> 00:20:36,559
folks or bug finders would go and

581
00:20:36,559 --> 00:20:39,039
look for history of uh bugs in a

582
00:20:39,039 --> 00:20:40,880
particular project and they'll see that

583
00:20:40,880 --> 00:20:42,480
there would be some contributor or

584
00:20:42,480 --> 00:20:44,880
developer whose code the part of the

585
00:20:44,880 --> 00:20:47,440
code that they wrote has always ends up

586
00:20:47,440 --> 00:20:48,960
getting bugs okay because it's open

587
00:20:48,960 --> 00:20:51,039
source it's not a very standardized way

588
00:20:51,039 --> 00:20:52,960
of contributing and all that so they'll

589
00:20:52,960 --> 00:20:54,640
target the codes that are written by

590
00:20:54,640 --> 00:20:57,360
those developers so that's also uh one

591
00:20:57,360 --> 00:20:59,600
way you can look at like targeting based

592
00:20:59,600 --> 00:21:00,960
on metadata

593
00:21:00,960 --> 00:21:03,280
uh target based on a functionality again

594
00:21:03,280 --> 00:21:05,600
go to places where authentication part

595
00:21:05,600 --> 00:21:07,440
authorization part is kind of there

596
00:21:07,440 --> 00:21:08,480
exists

597
00:21:08,480 --> 00:21:10,080
go to specific functionality upload

598
00:21:10,080 --> 00:21:12,240
download pretty standard places where

599
00:21:12,240 --> 00:21:13,360
serialization is happening

600
00:21:13,360 --> 00:21:15,280
deserialization is happening

601
00:21:15,280 --> 00:21:17,039
those are the places where you can kind

602
00:21:17,039 --> 00:21:19,039
of you know start from the source go up

603
00:21:19,039 --> 00:21:21,280
to the sync part and see how it kind of

604
00:21:21,280 --> 00:21:23,520
goes

605
00:21:25,360 --> 00:21:27,679
uh manual analysis continued okay so

606
00:21:27,679 --> 00:21:28,799
there is a

607
00:21:28,799 --> 00:21:31,840
big problem or in code bases around like

608
00:21:31,840 --> 00:21:34,080
problems occur at boundaries most of the

609
00:21:34,080 --> 00:21:35,520
time uh

610
00:21:35,520 --> 00:21:37,760
and again i go back to my like earlier

611
00:21:37,760 --> 00:21:39,039
thing that i said when you build your

612
00:21:39,039 --> 00:21:41,039
threat model you will understand where

613
00:21:41,039 --> 00:21:43,039
your boundaries are in the code base and

614
00:21:43,039 --> 00:21:44,720
there you can then focus on the

615
00:21:44,720 --> 00:21:46,559
boundaries like you know if there is an

616
00:21:46,559 --> 00:21:48,240
external authentication model you'll

617
00:21:48,240 --> 00:21:50,400
using saml or zero kind of thing if

618
00:21:50,400 --> 00:21:52,400
there is an external payment system or

619
00:21:52,400 --> 00:21:54,480
if it's relying again on a third-party

620
00:21:54,480 --> 00:21:56,159
library

621
00:21:56,159 --> 00:21:58,080
inter-process communications things like

622
00:21:58,080 --> 00:21:59,840
that so you'll have to find those

623
00:21:59,840 --> 00:22:02,640
boundaries focus on so this way by by

624
00:22:02,640 --> 00:22:04,080
following the entire approach you've

625
00:22:04,080 --> 00:22:06,400
limited a lot of places that you need to

626
00:22:06,400 --> 00:22:08,640
go that you need to target and find

627
00:22:08,640 --> 00:22:09,919
things

628
00:22:09,919 --> 00:22:12,159
and like make use of editor heavily when

629
00:22:12,159 --> 00:22:14,159
you're doing manual analysis make use of

630
00:22:14,159 --> 00:22:16,080
editor and consider it your manual

631
00:22:16,080 --> 00:22:19,280
review tool i would say

632
00:22:20,480 --> 00:22:24,240
all right so that's uh a very bird's eye

633
00:22:24,240 --> 00:22:26,240
view of what methodology could look like

634
00:22:26,240 --> 00:22:28,559
it could differ based on uh language it

635
00:22:28,559 --> 00:22:30,400
could differ based on project or what

636
00:22:30,400 --> 00:22:32,320
exists what doesn't exist and and those

637
00:22:32,320 --> 00:22:33,520
kind of things

638
00:22:33,520 --> 00:22:35,360
this is purely from a bug hunting

639
00:22:35,360 --> 00:22:38,080
perspective the the methodology could

640
00:22:38,080 --> 00:22:40,559
change if you're running a sas kind of

641
00:22:40,559 --> 00:22:42,320
engine in your company the methodology

642
00:22:42,320 --> 00:22:44,799
would change if you're doing a let's say

643
00:22:44,799 --> 00:22:47,440
a coverage based uh code review

644
00:22:47,440 --> 00:22:49,520
engagement but this is like you know

645
00:22:49,520 --> 00:22:51,360
these open source projects they exist

646
00:22:51,360 --> 00:22:53,440
and they need eyes okay they need more

647
00:22:53,440 --> 00:22:56,480
eyes so the more eyes go and target

648
00:22:56,480 --> 00:22:58,720
specific areas there are chances that

649
00:22:58,720 --> 00:23:02,559
there will be people end up finding bugs

650
00:23:02,559 --> 00:23:05,760
okay so that brings me to the the final

651
00:23:05,760 --> 00:23:08,000
part which is i want to introduce

652
00:23:08,000 --> 00:23:09,840
something called uh internet bug bounty

653
00:23:09,840 --> 00:23:12,480
this is a project uh that hacker one

654
00:23:12,480 --> 00:23:15,919
sponsors and runs uh it's it's a project

655
00:23:15,919 --> 00:23:18,320
to secure shared software components by

656
00:23:18,320 --> 00:23:20,799
pooling defenses okay and and right from

657
00:23:20,799 --> 00:23:22,559
discovery to remediation it's not just

658
00:23:22,559 --> 00:23:25,600
about uh rewarding bug hunters the way

659
00:23:25,600 --> 00:23:27,280
um it works

660
00:23:27,280 --> 00:23:30,400
is uh i'll come to it

661
00:23:30,400 --> 00:23:31,919
this is the page i'll come to it later

662
00:23:31,919 --> 00:23:34,480
and show you

663
00:23:34,559 --> 00:23:36,240
okay the way it works is you have open

664
00:23:36,240 --> 00:23:38,080
source software you have

665
00:23:38,080 --> 00:23:40,159
a program an open source software

666
00:23:40,159 --> 00:23:42,559
getting enrolled to internet bug bounty

667
00:23:42,559 --> 00:23:44,480
once they've enrolled to a bug internet

668
00:23:44,480 --> 00:23:46,960
bug bounty there are sponsors uh and

669
00:23:46,960 --> 00:23:49,520
i'll come to sponsors as well

670
00:23:49,520 --> 00:23:50,720
and

671
00:23:50,720 --> 00:23:52,640
using the the funds that sponsors

672
00:23:52,640 --> 00:23:55,120
provide if a bug hunter finds a bug on

673
00:23:55,120 --> 00:23:56,799
those open source softwares that are

674
00:23:56,799 --> 00:23:58,880
enrolled in internet park bounty

675
00:23:58,880 --> 00:24:02,400
will end up paying a bounty the 80

676
00:24:02,400 --> 00:24:04,799
bounty goes to the bug hunter the person

677
00:24:04,799 --> 00:24:07,120
who's found the bug and 20 of every

678
00:24:07,120 --> 00:24:09,039
bounty goes to the project uh

679
00:24:09,039 --> 00:24:12,559
maintainers uh the project itself to to

680
00:24:12,559 --> 00:24:14,400
facilitate the remediation the efforts

681
00:24:14,400 --> 00:24:16,000
around the mediation and all those kind

682
00:24:16,000 --> 00:24:18,480
of things

683
00:24:18,480 --> 00:24:19,279
uh

684
00:24:19,279 --> 00:24:22,080
right now uh the the launch customers

685
00:24:22,080 --> 00:24:24,000
are basically the sponsors so this is

686
00:24:24,000 --> 00:24:25,760
sponsored by five companies figma

687
00:24:25,760 --> 00:24:28,559
facebook tick tock elastic shopify uh

688
00:24:28,559 --> 00:24:31,120
the way it works i'll come to it as well

689
00:24:31,120 --> 00:24:33,039
and the projects there are 18 projects

690
00:24:33,039 --> 00:24:35,360
in scope uh there are half a million

691
00:24:35,360 --> 00:24:37,360
dollar which gets committed every time

692
00:24:37,360 --> 00:24:38,960
and that gets consumed i think so far

693
00:24:38,960 --> 00:24:41,840
we've already paid around a million plus

694
00:24:41,840 --> 00:24:43,520
or if not million plus it's roughly

695
00:24:43,520 --> 00:24:45,440
around million dollars that we paid the

696
00:24:45,440 --> 00:24:48,080
projects in scope are electron node.js

697
00:24:48,080 --> 00:24:50,720
engineering skull to name a few uh there

698
00:24:50,720 --> 00:24:52,720
are others as well uh

699
00:24:52,720 --> 00:24:55,120
we recently onboarded apache foundation

700
00:24:55,120 --> 00:24:56,080
after

701
00:24:56,080 --> 00:24:58,640
the whole lock for j fiasco as well so

702
00:24:58,640 --> 00:25:01,840
they're there as well

703
00:25:02,400 --> 00:25:04,320
how it works

704
00:25:04,320 --> 00:25:06,400
okay so this is how it works so there

705
00:25:06,400 --> 00:25:10,000
would be bug bounty programs for uh like

706
00:25:10,000 --> 00:25:12,000
companies who are using a lot of shared

707
00:25:12,000 --> 00:25:13,919
software components in which are which

708
00:25:13,919 --> 00:25:16,000
exists in the open source they'll commit

709
00:25:16,000 --> 00:25:17,919
one percent of the bounty that they pay

710
00:25:17,919 --> 00:25:19,919
every time to this pool

711
00:25:19,919 --> 00:25:22,559
and that the whole pooling kind of keeps

712
00:25:22,559 --> 00:25:24,720
happening and and the uh

713
00:25:24,720 --> 00:25:26,240
funds kind of keep getting added to the

714
00:25:26,240 --> 00:25:28,480
internet bug bounty program and then

715
00:25:28,480 --> 00:25:31,520
those funds are used

716
00:25:31,520 --> 00:25:32,480
for

717
00:25:32,480 --> 00:25:35,039
kind of uh paying out now hold this the

718
00:25:35,039 --> 00:25:37,039
life cycle you can see the hackers their

719
00:25:37,039 --> 00:25:38,320
open source projects and their

720
00:25:38,320 --> 00:25:39,760
supporting partners the people who are

721
00:25:39,760 --> 00:25:41,520
sponsoring and then this there's this

722
00:25:41,520 --> 00:25:45,039
whole open source software

723
00:25:46,240 --> 00:25:49,120
okay so supporting partners giving money

724
00:25:49,120 --> 00:25:51,678
to the pool

725
00:25:52,000 --> 00:25:54,000
hackers finding bugs

726
00:25:54,000 --> 00:25:56,880
in open source projects

727
00:25:56,880 --> 00:25:59,039
uh you nee in order to get rewarded you

728
00:25:59,039 --> 00:26:02,080
need to have an advisory or a cve uh or

729
00:26:02,080 --> 00:26:03,840
any kind of public advisory from the

730
00:26:03,840 --> 00:26:06,880
open source project would work

731
00:26:06,880 --> 00:26:09,039
once that happens the internet bug

732
00:26:09,039 --> 00:26:10,799
bounty ends up paying both to the open

733
00:26:10,799 --> 00:26:13,440
source project and both to the hackers

734
00:26:13,440 --> 00:26:15,039
as well

735
00:26:15,039 --> 00:26:18,158
the 80 20 split

736
00:26:20,960 --> 00:26:21,840
okay

737
00:26:21,840 --> 00:26:24,159
so how it works again now this is the

738
00:26:24,159 --> 00:26:25,840
roughly the life cycle

739
00:26:25,840 --> 00:26:27,840
uh availability is discovered in a

740
00:26:27,840 --> 00:26:30,400
project you first uh you don't report it

741
00:26:30,400 --> 00:26:32,640
to internet bug bounty you've you've

742
00:26:32,640 --> 00:26:34,720
gone you've seen uh which projects are

743
00:26:34,720 --> 00:26:36,640
enrolled in that bug boundary you go and

744
00:26:36,640 --> 00:26:38,480
uh you know work on those projects for

745
00:26:38,480 --> 00:26:40,720
month two months you find something

746
00:26:40,720 --> 00:26:42,320
worth you report it to the project

747
00:26:42,320 --> 00:26:45,200
maintainers okay the project maintainers

748
00:26:45,200 --> 00:26:46,240
will then

749
00:26:46,240 --> 00:26:49,840
uh fix it will will acknowledge triage

750
00:26:49,840 --> 00:26:52,159
remediate fix everything and then

751
00:26:52,159 --> 00:26:53,440
they'll publish

752
00:26:53,440 --> 00:26:56,159
a security advisory uh it could be a cv

753
00:26:56,159 --> 00:26:58,080
it could not be a cv that's absolutely

754
00:26:58,080 --> 00:26:58,880
fine

755
00:26:58,880 --> 00:26:59,840
uh

756
00:26:59,840 --> 00:27:00,640
then

757
00:27:00,640 --> 00:27:03,120
once an advisor is published the finder

758
00:27:03,120 --> 00:27:05,120
will claim the reward from ibb so

759
00:27:05,120 --> 00:27:06,960
they'll submit the same bug to internet

760
00:27:06,960 --> 00:27:08,960
bug bounty and say that i submitted this

761
00:27:08,960 --> 00:27:11,440
bug to this particular software project

762
00:27:11,440 --> 00:27:14,000
and they've fixed this bug and this is

763
00:27:14,000 --> 00:27:16,559
part of your program so i can be

764
00:27:16,559 --> 00:27:17,840
rewarded

765
00:27:17,840 --> 00:27:19,840
then if the reward is for twenty five

766
00:27:19,840 --> 00:27:21,679
thousand dollars the finder gets twenty

767
00:27:21,679 --> 00:27:23,039
thousand dollars and the project gets

768
00:27:23,039 --> 00:27:25,279
rewarded five thousand dollars

769
00:27:25,279 --> 00:27:27,760
and uh from the partner bounty pool so

770
00:27:27,760 --> 00:27:29,760
this is not very uh kind of

771
00:27:29,760 --> 00:27:31,600
important but from the partner boundary

772
00:27:31,600 --> 00:27:33,039
pool they're like

773
00:27:33,039 --> 00:27:36,080
50 chunks of 500 that gets reducted

774
00:27:36,080 --> 00:27:38,159
every time kind of that that happens

775
00:27:38,159 --> 00:27:40,080
with this kind of thing

776
00:27:40,080 --> 00:27:42,240
so

777
00:27:42,240 --> 00:27:45,360
yeah that brings me to the uh end uh

778
00:27:45,360 --> 00:27:47,120
some of the takeaways like i uh

779
00:27:47,120 --> 00:27:49,679
initially said the the major takeaway is

780
00:27:49,679 --> 00:27:51,279
there are lots of open source projects

781
00:27:51,279 --> 00:27:54,159
uh that exists on hackerone uh from uh

782
00:27:54,159 --> 00:27:55,919
from a bug bounty perspective uh there

783
00:27:55,919 --> 00:27:57,520
is this whole program called internet

784
00:27:57,520 --> 00:28:00,960
bugbounty this hosts the major softwares

785
00:28:00,960 --> 00:28:03,120
that we use in our day-to-day life

786
00:28:03,120 --> 00:28:04,399
you can

787
00:28:04,399 --> 00:28:07,120
find those projects find bugs and and

788
00:28:07,120 --> 00:28:10,080
claim your reward the methodology

789
00:28:10,080 --> 00:28:12,559
is is pretty high level that i discussed

790
00:28:12,559 --> 00:28:14,880
but i am planning to publish a detailed

791
00:28:14,880 --> 00:28:16,640
blog post around this

792
00:28:16,640 --> 00:28:18,720
which would probably come later in the

793
00:28:18,720 --> 00:28:21,760
month so yeah i'll be that i can take

794
00:28:21,760 --> 00:28:25,000
any questions

795
00:28:28,550 --> 00:28:34,730
[Applause]

796
00:28:41,600 --> 00:28:45,399
yeah you can come

797
00:28:50,290 --> 00:28:54,480
[Music]

798
00:28:54,480 --> 00:28:57,200
good afternoon sir uh as an uh young

799
00:28:57,200 --> 00:28:58,720
buck bounty hunter

800
00:28:58,720 --> 00:29:01,039
what will you advise like what are the

801
00:29:01,039 --> 00:29:03,520
mindsets you suggest to an young

802
00:29:03,520 --> 00:29:06,240
starting like i am starting into this so

803
00:29:06,240 --> 00:29:08,080
how would you advise and how

804
00:29:08,080 --> 00:29:10,840
to keep my mindset going on and how the

805
00:29:10,840 --> 00:29:13,919
motivation should bring in

806
00:29:13,919 --> 00:29:17,200
uh can you please explain that

807
00:29:17,760 --> 00:29:20,320
okay yeah so the talk was mostly around

808
00:29:20,320 --> 00:29:22,720
open source softwares

809
00:29:22,720 --> 00:29:24,880
these are pretty hard and i would say so

810
00:29:24,880 --> 00:29:26,880
you should not start your bug bounty

811
00:29:26,880 --> 00:29:28,480
journey with open source software if

812
00:29:28,480 --> 00:29:30,320
you're already uh

813
00:29:30,320 --> 00:29:32,080
a kind of an experienced bug bounty

814
00:29:32,080 --> 00:29:34,320
hunter then i would say you can start

815
00:29:34,320 --> 00:29:35,840
you know pivoting into the open source

816
00:29:35,840 --> 00:29:37,919
softwares read code

817
00:29:37,919 --> 00:29:40,320
understand code and and kind of you know

818
00:29:40,320 --> 00:29:42,480
build build your experience around that

819
00:29:42,480 --> 00:29:45,200
but if if you're just starting out uh

820
00:29:45,200 --> 00:29:46,880
just you know uh the thing is you'll

821
00:29:46,880 --> 00:29:48,640
have first have to get your concepts

822
00:29:48,640 --> 00:29:50,399
right okay so spend a lot of time

823
00:29:50,399 --> 00:29:51,840
building your fundamental skills

824
00:29:51,840 --> 00:29:53,440
concepts you don't have to really go and

825
00:29:53,440 --> 00:29:55,679
start doing bug hunting immediately but

826
00:29:55,679 --> 00:29:57,279
if you have all the fundamentals and if

827
00:29:57,279 --> 00:29:59,120
you're confident that now you're in a

828
00:29:59,120 --> 00:30:01,600
good position to find bugs in in things

829
00:30:01,600 --> 00:30:03,120
go and start looking at vulnerable

830
00:30:03,120 --> 00:30:05,440
applications how comfortable are you in

831
00:30:05,440 --> 00:30:07,760
finding bugs at deliberately vulnerable

832
00:30:07,760 --> 00:30:09,520
applications if you think you're doing

833
00:30:09,520 --> 00:30:11,520
good there then you start

834
00:30:11,520 --> 00:30:13,200
going into easy programs like you know

835
00:30:13,200 --> 00:30:15,440
which are not looked at uh really like

836
00:30:15,440 --> 00:30:17,120
which are not which don't have a lot of

837
00:30:17,120 --> 00:30:18,240
engagement

838
00:30:18,240 --> 00:30:20,320
you can find those don't go for rewards

839
00:30:20,320 --> 00:30:22,240
immediately but see how confident you

840
00:30:22,240 --> 00:30:23,520
are in the scale and i think that's

841
00:30:23,520 --> 00:30:26,159
that's probably to start with yeah

842
00:30:26,159 --> 00:30:28,240
okay

843
00:30:28,240 --> 00:30:30,640
so it's okay uh sir

844
00:30:30,640 --> 00:30:33,039
distinguish between

845
00:30:33,039 --> 00:30:35,120
if do we have any other questions

846
00:30:35,120 --> 00:30:37,679
yeah

847
00:30:37,679 --> 00:30:40,320
uh so as a part of a product security

848
00:30:40,320 --> 00:30:43,120
engineer we face like uh this question a

849
00:30:43,120 --> 00:30:45,200
lot of time the developers wants to use

850
00:30:45,200 --> 00:30:48,000
that open source software or that so is

851
00:30:48,000 --> 00:30:51,600
there any sort of assurance level

852
00:30:51,600 --> 00:30:53,760
uh program or

853
00:30:53,760 --> 00:30:55,840
like that is existing which gives like

854
00:30:55,840 --> 00:30:58,320
some sort of rating on the open source

855
00:30:58,320 --> 00:31:00,240
project like this have been truly tested

856
00:31:00,240 --> 00:31:01,919
or this have been going through this

857
00:31:01,919 --> 00:31:03,600
level of testing

858
00:31:03,600 --> 00:31:05,840
and the bugs fixing the bugs that are

859
00:31:05,840 --> 00:31:07,760
being reported through the bounties or

860
00:31:07,760 --> 00:31:09,200
through there

861
00:31:09,200 --> 00:31:11,440
that those are being remediated and the

862
00:31:11,440 --> 00:31:13,840
commits are being regularly those are

863
00:31:13,840 --> 00:31:15,279
being regularly fixed right at the

864
00:31:15,279 --> 00:31:18,559
frequency so is there something that you

865
00:31:18,559 --> 00:31:21,360
know or like you have something in

866
00:31:21,360 --> 00:31:22,399
mind like

867
00:31:22,399 --> 00:31:25,039
how how to actually recognize okay this

868
00:31:25,039 --> 00:31:26,640
is good to go ahead with this open

869
00:31:26,640 --> 00:31:27,710
source

870
00:31:27,710 --> 00:31:29,039
[Music]

871
00:31:29,039 --> 00:31:31,600
uh the answer depends because it depends

872
00:31:31,600 --> 00:31:34,159
on what project uh you're trying to use

873
00:31:34,159 --> 00:31:35,600
or let's say if you go for something

874
00:31:35,600 --> 00:31:37,919
like you know open ssl node.js these are

875
00:31:37,919 --> 00:31:40,960
pretty like heavily used projects you'll

876
00:31:40,960 --> 00:31:42,640
you'll be able to see what bugs are

877
00:31:42,640 --> 00:31:44,640
reported what kind of i think they also

878
00:31:44,640 --> 00:31:46,320
document that they've gone through the

879
00:31:46,320 --> 00:31:49,200
security tests and checks etc sometimes

880
00:31:49,200 --> 00:31:50,880
there are places like linux foundation

881
00:31:50,880 --> 00:31:52,559
open source open source software

882
00:31:52,559 --> 00:31:55,279
foundation uh who run these checks for

883
00:31:55,279 --> 00:31:58,880
these com kind of projects so while some

884
00:31:58,880 --> 00:32:01,440
projects will have a well-documented

885
00:32:01,440 --> 00:32:04,159
history well documented like for example

886
00:32:04,159 --> 00:32:05,919
uh not sure you you might have heard of

887
00:32:05,919 --> 00:32:09,200
something called argo cd um and the the

888
00:32:09,200 --> 00:32:11,679
cd kind of tool they recently went

889
00:32:11,679 --> 00:32:13,600
through a big threat modeling exercise

890
00:32:13,600 --> 00:32:15,039
and they publish their threat modeling

891
00:32:15,039 --> 00:32:17,200
report um so so those kind of things you

892
00:32:17,200 --> 00:32:20,399
can find uh for like well-known projects

893
00:32:20,399 --> 00:32:21,679
but the more

894
00:32:21,679 --> 00:32:24,399
less maintained projects the the

895
00:32:24,399 --> 00:32:26,000
projects that are you can say

896
00:32:26,000 --> 00:32:28,240
technically are run from garages of

897
00:32:28,240 --> 00:32:29,600
people

898
00:32:29,600 --> 00:32:31,360
you'll have to do your own uh check and

899
00:32:31,360 --> 00:32:33,279
that's where the responsibility on open

900
00:32:33,279 --> 00:32:35,039
source comes is that if you're using it

901
00:32:35,039 --> 00:32:37,120
if you think that that's useful you can

902
00:32:37,120 --> 00:32:39,120
allocate some of your resources in

903
00:32:39,120 --> 00:32:40,799
looking at that as well and contribute

904
00:32:40,799 --> 00:32:42,720
contributed back

905
00:32:42,720 --> 00:32:44,559
through bug bounties if they have you

906
00:32:44,559 --> 00:32:46,080
know for things like internet bug bounty

907
00:32:46,080 --> 00:32:47,919
these are all public so all the bugs

908
00:32:47,919 --> 00:32:49,360
that have been reported you'll be able

909
00:32:49,360 --> 00:32:50,799
to see in a particular project in a

910
00:32:50,799 --> 00:32:54,000
public way but security assessments uh

911
00:32:54,000 --> 00:32:56,399
assurance exercises code audits

912
00:32:56,399 --> 00:32:58,000
not a lot of open source projects can

913
00:32:58,000 --> 00:33:00,399
afford that uh and only the ones that

914
00:33:00,399 --> 00:33:02,480
are like big are sponsored or

915
00:33:02,480 --> 00:33:04,320
well-funded will be able to afford it

916
00:33:04,320 --> 00:33:05,760
and that will be there publicly

917
00:33:05,760 --> 00:33:07,679
available but if you're making use of a

918
00:33:07,679 --> 00:33:09,200
smaller open source project in your

919
00:33:09,200 --> 00:33:11,840
company i would 100 say that you know

920
00:33:11,840 --> 00:33:14,000
allocate some resources internally to to

921
00:33:14,000 --> 00:33:16,159
run that whole assurance check yourself

922
00:33:16,159 --> 00:33:18,240
as well that's that's the only way to go

923
00:33:18,240 --> 00:33:19,519
yeah

924
00:33:19,519 --> 00:33:22,100
okay

925
00:33:22,100 --> 00:33:25,250
[Music]

926
00:33:25,679 --> 00:33:28,720
uh hi hi sandeep actually i have a query

927
00:33:28,720 --> 00:33:31,440
regarding uh let's assume you have an

928
00:33:31,440 --> 00:33:34,559
application which is using a well-known

929
00:33:34,559 --> 00:33:37,519
open source software but the situation

930
00:33:37,519 --> 00:33:39,279
is that you reported a buck to the

931
00:33:39,279 --> 00:33:40,880
maintainer but maintainers are not

932
00:33:40,880 --> 00:33:43,519
responding and unless until they respond

933
00:33:43,519 --> 00:33:44,640
to your

934
00:33:44,640 --> 00:33:46,960
vr or whatever bug you have reported you

935
00:33:46,960 --> 00:33:48,799
won't be able to approach the backer one

936
00:33:48,799 --> 00:33:51,519
for the bounty itself so is there any

937
00:33:51,519 --> 00:33:53,360
way around if the maintainers are not

938
00:33:53,360 --> 00:33:55,039
responding you can approach to you guys

939
00:33:55,039 --> 00:33:57,440
and then probably get this they get that

940
00:33:57,440 --> 00:33:59,679
fixed

941
00:34:01,440 --> 00:34:03,760
okay yeah that's a good question so uh

942
00:34:03,760 --> 00:34:05,760
if you come across a scenario wherein

943
00:34:05,760 --> 00:34:07,679
the program is enrolled in internet bug

944
00:34:07,679 --> 00:34:09,839
bounty you've submitted a pr or you've

945
00:34:09,839 --> 00:34:11,119
submitted a bug but they're not

946
00:34:11,119 --> 00:34:12,399
responding

947
00:34:12,399 --> 00:34:13,440
and

948
00:34:13,440 --> 00:34:15,199
not responding is a pretty subjective

949
00:34:15,199 --> 00:34:17,440
subject again like how long have you

950
00:34:17,440 --> 00:34:19,599
waited but i would say roughly you know

951
00:34:19,599 --> 00:34:22,480
30 days 90 days is is the max 90 days

952
00:34:22,480 --> 00:34:24,399
you can wait at least for the response

953
00:34:24,399 --> 00:34:26,239
uh if they've not responded if the

954
00:34:26,239 --> 00:34:28,000
project is already enrolled in ibb i

955
00:34:28,000 --> 00:34:29,520
would say you can reach out to ibb

956
00:34:29,520 --> 00:34:32,079
hacker1.com and we can also facilitate

957
00:34:32,079 --> 00:34:33,359
that conversation with the project

958
00:34:33,359 --> 00:34:35,199
because we closely work with those open

959
00:34:35,199 --> 00:34:36,719
source projects so we can facilitate

960
00:34:36,719 --> 00:34:39,280
those conversations if a bug is open and

961
00:34:39,280 --> 00:34:40,960
they've not and

962
00:34:40,960 --> 00:34:43,199
most of the time i mean i have total

963
00:34:43,199 --> 00:34:44,719
sympathy and i always keep saying with

964
00:34:44,719 --> 00:34:46,000
the open source project is because most

965
00:34:46,000 --> 00:34:48,159
of the even the bigger projects have a

966
00:34:48,159 --> 00:34:50,239
lack of resources and that's why we want

967
00:34:50,239 --> 00:34:52,320
to like we try to commit that 20 of the

968
00:34:52,320 --> 00:34:54,320
bounty pool to them so that you know

969
00:34:54,320 --> 00:34:57,119
they can use some some paid

970
00:34:57,119 --> 00:34:59,040
work as well to to kind of get those

971
00:34:59,040 --> 00:35:00,960
done but yes if you if you come across

972
00:35:00,960 --> 00:35:03,520
any of those uh you can always reach out

973
00:35:03,520 --> 00:35:06,160
to ibb hacker1 yeah dot com

974
00:35:06,160 --> 00:35:07,680
okay

975
00:35:07,680 --> 00:35:10,720
all right okay

976
00:35:11,359 --> 00:35:12,100
okay

977
00:35:12,100 --> 00:35:15,359
[Music]

978
00:35:15,359 --> 00:35:18,160
hi thanks um i was wondering we all know

979
00:35:18,160 --> 00:35:19,839
uh open source has problems with

980
00:35:19,839 --> 00:35:21,920
financing anyway so the split is nice

981
00:35:21,920 --> 00:35:22,640
but

982
00:35:22,640 --> 00:35:23,839
what

983
00:35:23,839 --> 00:35:26,560
stops open source like being motivated

984
00:35:26,560 --> 00:35:28,880
to right now continue to write secure

985
00:35:28,880 --> 00:35:30,560
software if they could actually get more

986
00:35:30,560 --> 00:35:31,760
financing

987
00:35:31,760 --> 00:35:33,760
from the 80 20 split than they usually

988
00:35:33,760 --> 00:35:35,920
get

989
00:35:36,830 --> 00:35:39,200
[Music]

990
00:35:39,200 --> 00:35:41,599
yeah so so that's a good question secure

991
00:35:41,599 --> 00:35:43,359
development is a problem and you might

992
00:35:43,359 --> 00:35:45,040
have seen uh the state of open source

993
00:35:45,040 --> 00:35:46,720
security report that sneak publishes

994
00:35:46,720 --> 00:35:48,560
along with a lot of like non-profit

995
00:35:48,560 --> 00:35:51,280
organizations and state of secured

996
00:35:51,280 --> 00:35:53,520
development is a problem at in open

997
00:35:53,520 --> 00:35:55,119
source as well but state of secure

998
00:35:55,119 --> 00:35:57,359
development is a problem everywhere okay

999
00:35:57,359 --> 00:35:59,839
so it's it's i would say you know i'll

1000
00:35:59,839 --> 00:36:00,960
not be

1001
00:36:00,960 --> 00:36:03,440
like uh there is no discrimination i

1002
00:36:03,440 --> 00:36:06,079
think it's roughly the same like any uh

1003
00:36:06,079 --> 00:36:08,240
secure development problem that you see

1004
00:36:08,240 --> 00:36:10,079
everywhere else inside closed

1005
00:36:10,079 --> 00:36:12,480
organizations as well the problem would

1006
00:36:12,480 --> 00:36:14,960
be higher for open source is because

1007
00:36:14,960 --> 00:36:17,040
they don't have a standardized way of

1008
00:36:17,040 --> 00:36:19,200
working okay like in organizations you

1009
00:36:19,200 --> 00:36:21,200
can enforce random things you can

1010
00:36:21,200 --> 00:36:22,880
enforce random policies you can enforce

1011
00:36:22,880 --> 00:36:24,480
developers to work in a certain way you

1012
00:36:24,480 --> 00:36:26,720
can train your developers but when you

1013
00:36:26,720 --> 00:36:28,880
know open source project when you're not

1014
00:36:28,880 --> 00:36:30,560
like you know restricting whom you're

1015
00:36:30,560 --> 00:36:32,720
accepting prs from or if you're getting

1016
00:36:32,720 --> 00:36:35,200
like hundreds of pr's and then there is

1017
00:36:35,200 --> 00:36:37,680
no one like reviewing those pr's uh

1018
00:36:37,680 --> 00:36:39,280
before kind of committing them like

1019
00:36:39,280 --> 00:36:40,800
reviewing from a security perspective i

1020
00:36:40,800 --> 00:36:43,119
would say so so we

1021
00:36:43,119 --> 00:36:46,240
like a year ago we kind of uh discovered

1022
00:36:46,240 --> 00:36:47,920
we did a discovery exercise on a project

1023
00:36:47,920 --> 00:36:50,160
when we started kind of you know

1024
00:36:50,160 --> 00:36:51,599
pushing like putting a lot of open

1025
00:36:51,599 --> 00:36:53,440
source projects like creating cicd

1026
00:36:53,440 --> 00:36:55,040
pipelines for open source projects okay

1027
00:36:55,040 --> 00:36:57,680
wherein we can implement some basic sas

1028
00:36:57,680 --> 00:37:00,240
task checks using github actions or

1029
00:37:00,240 --> 00:37:02,000
things like that to at least have that

1030
00:37:02,000 --> 00:37:03,839
basics and and i would say for open

1031
00:37:03,839 --> 00:37:06,240
source projects even if most of them

1032
00:37:06,240 --> 00:37:09,520
have that basic ci cd checks that can be

1033
00:37:09,520 --> 00:37:11,599
implemented that will be a good enough

1034
00:37:11,599 --> 00:37:14,480
like state to look at for now and then

1035
00:37:14,480 --> 00:37:16,000
once we are there we can look at

1036
00:37:16,000 --> 00:37:17,680
something else but the problem is

1037
00:37:17,680 --> 00:37:18,960
because there is

1038
00:37:18,960 --> 00:37:21,359
a lot less control over who kind of

1039
00:37:21,359 --> 00:37:24,079
commits code who they are like you know

1040
00:37:24,079 --> 00:37:26,000
how they've learned coding in companies

1041
00:37:26,000 --> 00:37:27,359
you can enforce a lot of secure

1042
00:37:27,359 --> 00:37:29,680
development standards to people but open

1043
00:37:29,680 --> 00:37:31,680
source projects is difficult some

1044
00:37:31,680 --> 00:37:33,839
projects do a good job in terms of like

1045
00:37:33,839 --> 00:37:35,680
you know reviewing those pr's and and

1046
00:37:35,680 --> 00:37:37,040
kind of really

1047
00:37:37,040 --> 00:37:38,720
getting what is coming in and they

1048
00:37:38,720 --> 00:37:41,200
constantly review the whole code base as

1049
00:37:41,200 --> 00:37:42,800
well and do all those kind of things but

1050
00:37:42,800 --> 00:37:44,320
that's the problem like you know most

1051
00:37:44,320 --> 00:37:46,800
and and while i've talked about ibb but

1052
00:37:46,800 --> 00:37:49,520
ibb also covers the most

1053
00:37:49,520 --> 00:37:51,599
like large scale projects the small

1054
00:37:51,599 --> 00:37:54,320
scale projects are not covered as part

1055
00:37:54,320 --> 00:37:55,599
of ibb

1056
00:37:55,599 --> 00:37:57,520
we've had conversations with hundreds of

1057
00:37:57,520 --> 00:37:59,680
projects and uh one of the things that

1058
00:37:59,680 --> 00:38:02,560
we see is that they don't find uh it

1059
00:38:02,560 --> 00:38:03,920
more like you know to start with

1060
00:38:03,920 --> 00:38:06,160
valuable because they think that the

1061
00:38:06,160 --> 00:38:07,920
moment we say that we'll pay you

1062
00:38:07,920 --> 00:38:10,320
bounties for finding bugs they're

1063
00:38:10,320 --> 00:38:12,079
already overwhelmed they already are

1064
00:38:12,079 --> 00:38:14,160
short-stuffed they'll get start to get

1065
00:38:14,160 --> 00:38:15,920
more bugs and they'll not be able to fix

1066
00:38:15,920 --> 00:38:17,599
those okay so that's why they are

1067
00:38:17,599 --> 00:38:19,520
reluctant of coming into programs like

1068
00:38:19,520 --> 00:38:22,400
ibb uh to start with as well uh so yeah

1069
00:38:22,400 --> 00:38:24,079
i think just like you know we are doing

1070
00:38:24,079 --> 00:38:25,680
something for like bug bounty on open

1071
00:38:25,680 --> 00:38:27,440
source i think similarly there there

1072
00:38:27,440 --> 00:38:28,880
should be initiatives so there can be

1073
00:38:28,880 --> 00:38:30,400
more initiatives to push secure

1074
00:38:30,400 --> 00:38:32,160
development at the same time as well i'm

1075
00:38:32,160 --> 00:38:34,720
like a big fan myself of that so yeah i

1076
00:38:34,720 --> 00:38:36,320
think

1077
00:38:36,320 --> 00:38:37,520
yeah

1078
00:38:37,520 --> 00:38:41,400
especially from the financing

1079
00:38:53,119 --> 00:38:55,040
so

1080
00:38:55,040 --> 00:38:56,960
sorry

1081
00:38:56,960 --> 00:39:00,320
okay so the question uh to repeat is

1082
00:39:00,320 --> 00:39:02,720
that what benefits as an open source

1083
00:39:02,720 --> 00:39:05,280
project do i have uh if my project is

1084
00:39:05,280 --> 00:39:07,119
secure enough if i'm following secure

1085
00:39:07,119 --> 00:39:08,960
development standards and and all those

1086
00:39:08,960 --> 00:39:11,359
kind of things like do i

1087
00:39:11,359 --> 00:39:14,079
to be honest um like like we keep saying

1088
00:39:14,079 --> 00:39:16,480
if if the project is pretty confident

1089
00:39:16,480 --> 00:39:18,240
that i have followed secure development

1090
00:39:18,240 --> 00:39:20,480
standards then there would automatically

1091
00:39:20,480 --> 00:39:22,800
be less bugs they'll not be bothered

1092
00:39:22,800 --> 00:39:25,280
about those okay but there would be bugs

1093
00:39:25,280 --> 00:39:27,359
which would if something has really

1094
00:39:27,359 --> 00:39:29,280
passed the cycle of secure development

1095
00:39:29,280 --> 00:39:31,200
and still that bug is discovered that is

1096
00:39:31,200 --> 00:39:33,760
something that really really want to see

1097
00:39:33,760 --> 00:39:35,760
so so the value of the bug kind of

1098
00:39:35,760 --> 00:39:37,040
increases

1099
00:39:37,040 --> 00:39:39,599
uh the volume drops so if you're really

1100
00:39:39,599 --> 00:39:40,880
confident that you know you've gone

1101
00:39:40,880 --> 00:39:42,720
through secure development the volume of

1102
00:39:42,720 --> 00:39:44,640
bugs will definitely drop but the value

1103
00:39:44,640 --> 00:39:47,200
will increase okay and and yeah that's

1104
00:39:47,200 --> 00:39:48,400
that's i think they'll not be

1105
00:39:48,400 --> 00:39:50,079
overwhelmed for sure and we've gone

1106
00:39:50,079 --> 00:39:51,839
through this with a lot of projects uh

1107
00:39:51,839 --> 00:39:54,400
they don't get overwhelmed but even like

1108
00:39:54,400 --> 00:39:56,240
one bug they receive in three months or

1109
00:39:56,240 --> 00:39:58,160
four months that is something that they

1110
00:39:58,160 --> 00:39:59,760
like to jump on immediately and that

1111
00:39:59,760 --> 00:40:01,359
could feed into their secure development

1112
00:40:01,359 --> 00:40:03,920
practice as well like what did they miss

1113
00:40:03,920 --> 00:40:06,000
or where did they miss to to kind of you

1114
00:40:06,000 --> 00:40:06,640
know

1115
00:40:06,640 --> 00:40:08,480
yeah okay

1116
00:40:08,480 --> 00:40:10,560
any final question okay we are we are on

1117
00:40:10,560 --> 00:40:12,800
time as well so we'll wrap it up thank

1118
00:40:12,800 --> 00:40:14,880
you so much for for staying and it's

1119
00:40:14,880 --> 00:40:15,760
lunch

1120
00:40:15,760 --> 00:40:20,920
so yeah have a good lunch thank you

