1
00:00:02,879 --> 00:00:06,240
day today thank you for coming

2
00:00:06,240 --> 00:00:08,880
and in this talk let me unlock the

3
00:00:08,880 --> 00:00:11,480
laptop shirt

4
00:00:15,619 --> 00:00:18,300
looks good

5
00:00:18,300 --> 00:00:22,859
let spend with stock on a user space we

6
00:00:22,859 --> 00:00:24,240
already got

7
00:00:24,240 --> 00:00:27,599
the from yesterday Yvonne stock for

8
00:00:27,599 --> 00:00:31,080
example house away from the ufi to the

9
00:00:31,080 --> 00:00:33,420
driver to the user space could be built

10
00:00:33,420 --> 00:00:36,780
in this talk we would talk about user

11
00:00:36,780 --> 00:00:39,360
space because to my experience mostly

12
00:00:39,360 --> 00:00:42,239
last stages also main payload

13
00:00:42,239 --> 00:00:45,480
and even I was there all preliment tasks

14
00:00:45,480 --> 00:00:48,239
are about anti-detection persistence

15
00:00:48,239 --> 00:00:49,800
whatever so

16
00:00:49,800 --> 00:00:52,140
I'm genius I'm with Kaspersky

17
00:00:52,140 --> 00:00:54,539
specialized on a tread hunting rival

18
00:00:54,539 --> 00:00:56,640
sink and

19
00:00:56,640 --> 00:01:00,960
in this year uh I decided to propose the

20
00:01:00,960 --> 00:01:04,680
topic on a new place

21
00:01:04,680 --> 00:01:07,260
to hide file the malware as you

22
00:01:07,260 --> 00:01:11,060
understand file is suggest you remember

23
00:01:11,060 --> 00:01:15,060
NTFS alternate data stream right BMI

24
00:01:15,060 --> 00:01:18,659
subscriptions of Windows system register

25
00:01:18,659 --> 00:01:20,759
based persistent

26
00:01:20,759 --> 00:01:24,780
so it's exists on the level of a file

27
00:01:24,780 --> 00:01:28,259
system anyway so it's not the files but

28
00:01:28,259 --> 00:01:30,960
it's not as plain as a file so security

29
00:01:30,960 --> 00:01:34,200
solution is not that easy to obtain this

30
00:01:34,200 --> 00:01:36,540
data let us take a look on the new way

31
00:01:36,540 --> 00:01:39,119
to hide the encrypted shell codes on a

32
00:01:39,119 --> 00:01:42,299
system uh 40 minutes it's quite amount

33
00:01:42,299 --> 00:01:45,840
of time let's add plan it a bit but this

34
00:01:45,840 --> 00:01:48,780
plants on Goa seems to with oh

35
00:01:48,780 --> 00:01:51,780
Summer is gone already so our plans

36
00:01:51,780 --> 00:01:53,700
would be a little bit different maybe

37
00:01:53,700 --> 00:01:57,000
more boring not a cycle on the beaches

38
00:01:57,000 --> 00:02:00,119
so I actually am

39
00:02:00,119 --> 00:02:02,460
as a threat Hunters we are mostly

40
00:02:02,460 --> 00:02:06,240
observed in a real campaigns so this

41
00:02:06,240 --> 00:02:08,699
technique it's not a proof of concept

42
00:02:08,699 --> 00:02:11,580
from the researcher it's in the wild uh

43
00:02:11,580 --> 00:02:14,280
technique led me first in the uh

44
00:02:14,280 --> 00:02:16,860
beginning of the talk let me present

45
00:02:16,860 --> 00:02:20,099
with our new which I consider most

46
00:02:20,099 --> 00:02:23,459
Innovative part and after it slowly move

47
00:02:23,459 --> 00:02:27,180
to the our parts to this campaign all

48
00:02:27,180 --> 00:02:29,819
other auxiliary techniques like a usage

49
00:02:29,819 --> 00:02:32,640
of the third party code commercial and

50
00:02:32,640 --> 00:02:36,120
non-commercial and ways how they patched

51
00:02:36,120 --> 00:02:39,660
the real event or logging on the Windows

52
00:02:39,660 --> 00:02:43,879
paging MCI mechanism usage a little more

53
00:02:43,879 --> 00:02:46,500
esoteric compilers to protect the

54
00:02:46,500 --> 00:02:49,140
malware from the Security Solutions and

55
00:02:49,140 --> 00:02:50,160
so on

56
00:02:50,160 --> 00:02:53,940
and to start from the how they hide

57
00:02:53,940 --> 00:02:57,080
shell codes into the windows event logs

58
00:02:57,080 --> 00:03:00,540
let us first cover the more typical

59
00:03:00,540 --> 00:03:03,540
usage of logging and shell codes in the

60
00:03:03,540 --> 00:03:04,920
malicious campaign

61
00:03:04,920 --> 00:03:08,180
who is analyzing a malware on a daily

62
00:03:08,180 --> 00:03:11,459
basis in your job

63
00:03:11,459 --> 00:03:16,440
aha I see so sum in I suppose in this

64
00:03:16,440 --> 00:03:20,459
case you also write a familiar for you

65
00:03:20,459 --> 00:03:23,220
using of the logic right in some

66
00:03:23,220 --> 00:03:24,780
malicious samples

67
00:03:24,780 --> 00:03:29,400
the researcher could obtain some hints

68
00:03:29,400 --> 00:03:30,840
from the logic

69
00:03:30,840 --> 00:03:34,200
at the first glance we could think why

70
00:03:34,200 --> 00:03:37,260
why from the malicious alter to help us

71
00:03:37,260 --> 00:03:41,580
with some messages like this model is

72
00:03:41,580 --> 00:03:45,659
already done it job it's a shell coat is

73
00:03:45,659 --> 00:03:48,659
in place it etc etc so it has a two

74
00:03:48,659 --> 00:03:51,720
theory about it it's a Muslim because

75
00:03:51,720 --> 00:03:54,900
imagine you debug your date in some

76
00:03:54,900 --> 00:03:56,819
virtual environment and after it you

77
00:03:56,819 --> 00:03:59,720
have to place in a combat mode right

78
00:03:59,720 --> 00:04:03,480
many things could go wrong so malicious

79
00:04:03,480 --> 00:04:05,519
developers are still the developers they

80
00:04:05,519 --> 00:04:07,799
need to understand which stages of the

81
00:04:07,799 --> 00:04:10,980
attack went well and at which stage it

82
00:04:10,980 --> 00:04:13,439
was something went wrong I suppose

83
00:04:13,439 --> 00:04:18,120
that's why some logging exist I also

84
00:04:18,120 --> 00:04:20,760
remember the malware samples where we

85
00:04:20,760 --> 00:04:22,800
slogan mechanism was in the future

86
00:04:22,800 --> 00:04:26,820
version was wiped so they all make it

87
00:04:26,820 --> 00:04:30,300
the version which is stable not need to

88
00:04:30,300 --> 00:04:32,520
debug in the combat environment anymore

89
00:04:32,520 --> 00:04:36,600
and login message is done also I support

90
00:04:36,600 --> 00:04:39,240
some of them with just laser remove the

91
00:04:39,240 --> 00:04:42,240
logs later in the to-do list and it

92
00:04:42,240 --> 00:04:44,400
leaves for years but it's really

93
00:04:44,400 --> 00:04:47,160
interesting to observe how obvious logic

94
00:04:47,160 --> 00:04:51,960
mechanism is an are working out so uh

95
00:04:51,960 --> 00:04:55,740
it's a more common usage of the logging

96
00:04:55,740 --> 00:04:59,160
like in any malware what about the shell

97
00:04:59,160 --> 00:05:02,220
codes actually shell codes is also you

98
00:05:02,220 --> 00:05:05,040
could observe in your malicious samples

99
00:05:05,040 --> 00:05:06,900
where mostly

100
00:05:06,900 --> 00:05:10,199
so the guys who are into also malware

101
00:05:10,199 --> 00:05:12,360
researchers via

102
00:05:12,360 --> 00:05:14,940
and in fact the documents right they

103
00:05:14,940 --> 00:05:18,060
could be placed so any place where some

104
00:05:18,060 --> 00:05:21,180
small amount of code has to be executed

105
00:05:21,180 --> 00:05:24,360
to initiate the following phases of the

106
00:05:24,360 --> 00:05:25,740
attack

107
00:05:25,740 --> 00:05:29,039
whatever small place in the memory some

108
00:05:29,039 --> 00:05:31,380
document some vulnerability in a

109
00:05:31,380 --> 00:05:34,380
complicated format like a PDF RTF

110
00:05:34,380 --> 00:05:35,340
whatever

111
00:05:35,340 --> 00:05:38,460
and what is special about the shell

112
00:05:38,460 --> 00:05:41,639
codes they couldn't use all the

113
00:05:41,639 --> 00:05:45,300
precious help from the PE or L file

114
00:05:45,300 --> 00:05:48,000
orders right they are on their own they

115
00:05:48,000 --> 00:05:50,520
have to implement some techniques which

116
00:05:50,520 --> 00:05:52,320
could it make the code position

117
00:05:52,320 --> 00:05:55,500
independent and that's why we observe

118
00:05:55,500 --> 00:05:57,479
all this stuff which you could see on

119
00:05:57,479 --> 00:06:00,300
the code snippet like a call next

120
00:06:00,300 --> 00:06:02,880
instruction and pop in the address from

121
00:06:02,880 --> 00:06:04,440
the stack to understand the precise

122
00:06:04,440 --> 00:06:07,259
location in memory like a parsing of

123
00:06:07,259 --> 00:06:09,300
process environment block to get the

124
00:06:09,300 --> 00:06:12,960
real address of the API functions which

125
00:06:12,960 --> 00:06:15,900
shell codes need to execute further and

126
00:06:15,900 --> 00:06:17,940
also a lot a lot of practicing

127
00:06:17,940 --> 00:06:20,880
executable formats like PE and windows

128
00:06:20,880 --> 00:06:23,520
to get the next Stager

129
00:06:23,520 --> 00:06:28,020
or to put it into the memory and execute

130
00:06:28,020 --> 00:06:30,600
it further so actually just a small

131
00:06:30,600 --> 00:06:33,660
Snippets of code are auxiliary mostly As

132
00:06:33,660 --> 00:06:36,300
downloaders as the injectors for the

133
00:06:36,300 --> 00:06:38,759
following stages now we are covering

134
00:06:38,759 --> 00:06:43,020
typical usage of logging and and the sum

135
00:06:43,020 --> 00:06:47,039
showcots right but but here you could

136
00:06:47,039 --> 00:06:50,340
tell me so far not new for us what is

137
00:06:50,340 --> 00:06:51,419
new here

138
00:06:51,419 --> 00:06:53,340
I like actually this engineering

139
00:06:53,340 --> 00:06:54,600
decision

140
00:06:54,600 --> 00:06:56,759
why not to combine

141
00:06:56,759 --> 00:07:01,259
these two tasks why not to use some kind

142
00:07:01,259 --> 00:07:03,960
of event logs to keep encrypted shell

143
00:07:03,960 --> 00:07:06,900
cord for the next stage actually yes

144
00:07:06,900 --> 00:07:09,300
under Windows what main logging

145
00:07:09,300 --> 00:07:11,400
mechanism we have

146
00:07:11,400 --> 00:07:14,340
Windows 7 locks right so you could run

147
00:07:14,340 --> 00:07:17,880
MMC you could take a look at the all

148
00:07:17,880 --> 00:07:21,240
information or critical error slogs over

149
00:07:21,240 --> 00:07:23,580
the windows event logs on a level of

150
00:07:23,580 --> 00:07:26,639
file systems where could you find it

151
00:07:26,639 --> 00:07:31,620
in a bunch of the uh evtx files right so

152
00:07:31,620 --> 00:07:34,800
once again we saw I always place the

153
00:07:34,800 --> 00:07:37,740
file list in a some kind of brackets

154
00:07:37,740 --> 00:07:40,500
because it's exist on the file system

155
00:07:40,500 --> 00:07:43,860
but it's some very proprietary very

156
00:07:43,860 --> 00:07:46,560
unclear format and no security solution

157
00:07:46,560 --> 00:07:48,900
most probably would parse it

158
00:07:48,900 --> 00:07:51,780
that's why some engineer from the

159
00:07:51,780 --> 00:07:54,720
Malaysia site wanted to put binary data

160
00:07:54,720 --> 00:07:58,020
over there but typically so far we

161
00:07:58,020 --> 00:08:01,080
describing logs like text messages right

162
00:08:01,080 --> 00:08:04,560
this model executed this stage is okay

163
00:08:04,560 --> 00:08:07,800
this stage failed it's mostly text but

164
00:08:07,800 --> 00:08:10,440
in case of working with the windows

165
00:08:10,440 --> 00:08:14,160
event logs actually completely legit you

166
00:08:14,160 --> 00:08:16,740
could put binary data over there it's

167
00:08:16,740 --> 00:08:18,960
not a problem at all imagine you

168
00:08:18,960 --> 00:08:21,240
developer somewhere for example simple

169
00:08:21,240 --> 00:08:22,319
driver

170
00:08:22,319 --> 00:08:25,500
you'll get some your device writing and

171
00:08:25,500 --> 00:08:28,500
driver and you expect some messages from

172
00:08:28,500 --> 00:08:31,379
your users and you want to understand

173
00:08:31,379 --> 00:08:33,958
your support server understand what's

174
00:08:33,958 --> 00:08:36,539
going wrong besides the messages in

175
00:08:36,539 --> 00:08:39,719
event logs maybe you would need some

176
00:08:39,719 --> 00:08:42,599
mini dumps binary mini dumps and

177
00:08:42,599 --> 00:08:45,180
operating system provide you such an

178
00:08:45,180 --> 00:08:48,779
ability you could put binary data as a

179
00:08:48,779 --> 00:08:51,060
part of your login message just to

180
00:08:51,060 --> 00:08:53,339
understand what happened while your

181
00:08:53,339 --> 00:08:57,180
program is executing why not to use in a

182
00:08:57,180 --> 00:09:01,200
malware software looks like a place if

183
00:09:01,200 --> 00:09:04,200
we could save binary this binary could

184
00:09:04,200 --> 00:09:07,560
be executable right nobody could stop us

185
00:09:07,560 --> 00:09:11,640
to put over there some Intel comments so

186
00:09:11,640 --> 00:09:12,779
why not

187
00:09:12,779 --> 00:09:16,080
okay but so far I just described it in

188
00:09:16,080 --> 00:09:16,860
the world

189
00:09:16,860 --> 00:09:20,700
let us take a look at the code so we are

190
00:09:20,700 --> 00:09:22,560
coming at this stage at the real

191
00:09:22,560 --> 00:09:27,060
campaign as I promised and here goes the

192
00:09:27,060 --> 00:09:30,240
model which gathers gathers the code

193
00:09:30,240 --> 00:09:33,000
from the windows event logs so what's up

194
00:09:33,000 --> 00:09:35,399
let's take a look what happens here so

195
00:09:35,399 --> 00:09:37,800
if the sound you tell me when I have to

196
00:09:37,800 --> 00:09:38,940
bring it

197
00:09:38,940 --> 00:09:40,920
here or there

198
00:09:40,920 --> 00:09:44,700
what is better over there cool because I

199
00:09:44,700 --> 00:09:47,040
remember from the sitting here I want to

200
00:09:47,040 --> 00:09:49,320
hear it maybe a little bit louder so

201
00:09:49,320 --> 00:09:52,800
allocation of 500 kilobytes right after

202
00:09:52,800 --> 00:09:55,260
it in the new buffer

203
00:09:55,260 --> 00:09:58,080
into the 500 kilobytes we would be

204
00:09:58,080 --> 00:09:59,519
gathering what

205
00:09:59,519 --> 00:10:02,880
the malware registers the event data

206
00:10:02,880 --> 00:10:05,339
source event data source is a key

207
00:10:05,339 --> 00:10:07,560
management system who remember key

208
00:10:07,560 --> 00:10:11,100
management system who is a Windows user

209
00:10:11,100 --> 00:10:13,740
is licensing mechanism right if you

210
00:10:13,740 --> 00:10:15,660
licensing your Microsoft Office your

211
00:10:15,660 --> 00:10:19,260
operating system KMS is the way how you

212
00:10:19,260 --> 00:10:23,580
let the your laptop for example know its

213
00:10:23,580 --> 00:10:25,680
alleged version of the windows legit

214
00:10:25,680 --> 00:10:28,440
version of the Microsoft Office EMS

215
00:10:28,440 --> 00:10:31,860
exists one more completely legit data

216
00:10:31,860 --> 00:10:34,620
source for the logic what's next what's

217
00:10:34,620 --> 00:10:38,339
next I see reading the event logs

218
00:10:38,339 --> 00:10:41,940
reading one after another sequential I

219
00:10:41,940 --> 00:10:44,940
put some comments over there sequential

220
00:10:44,940 --> 00:10:48,540
read so and forward read from the very

221
00:10:48,540 --> 00:10:52,200
old one to the news sequentially all the

222
00:10:52,200 --> 00:10:56,940
log messages related to the KMS right

223
00:10:56,940 --> 00:11:00,480
and some auxiliary tasks if some error

224
00:11:00,480 --> 00:11:03,180
handling is over there and also some

225
00:11:03,180 --> 00:11:06,180
real location if 500 kilobytes is not

226
00:11:06,180 --> 00:11:08,880
enough for all the data getting from the

227
00:11:08,880 --> 00:11:11,640
logs memory would be relocated

228
00:11:11,640 --> 00:11:14,279
okay what you could ask me whom then is

229
00:11:14,279 --> 00:11:17,279
you told us KMS is legit here we are

230
00:11:17,279 --> 00:11:20,940
reading all the messages from the KMS uh

231
00:11:20,940 --> 00:11:22,920
why it couldn't be the shell cut right

232
00:11:22,920 --> 00:11:25,019
it would be the normal messages from the

233
00:11:25,019 --> 00:11:27,660
lodging system let's go further let's go

234
00:11:27,660 --> 00:11:30,779
further here goes some

235
00:11:30,779 --> 00:11:34,260
they Implement some filtering watches

236
00:11:34,260 --> 00:11:36,360
there once again we're taking a look at

237
00:11:36,360 --> 00:11:38,640
the code in the decompiler which I

238
00:11:38,640 --> 00:11:41,220
already analyzed and marked for you all

239
00:11:41,220 --> 00:11:42,899
the fields of the corresponding

240
00:11:42,899 --> 00:11:46,800
structure filtering by event category

241
00:11:46,800 --> 00:11:48,180
right

242
00:11:48,180 --> 00:11:51,240
so all the events has the following

243
00:11:51,240 --> 00:11:54,360
attributes from which event Source they

244
00:11:54,360 --> 00:11:57,000
came which event category

245
00:11:57,000 --> 00:12:00,480
or they use and which event ID they use

246
00:12:00,480 --> 00:12:03,839
event category in this case have to be

247
00:12:03,839 --> 00:12:06,480
in hexed for one for True on the slide

248
00:12:06,480 --> 00:12:09,440
you would see in ASCII format it's a a b

249
00:12:09,440 --> 00:12:13,860
and they knows for sure Legend KMS data

250
00:12:13,860 --> 00:12:16,860
source wouldn't provide any lock records

251
00:12:16,860 --> 00:12:21,120
with such a category ID for one for two

252
00:12:21,120 --> 00:12:24,540
it's a custom for them they actually in

253
00:12:24,540 --> 00:12:26,279
the next version of the malware could

254
00:12:26,279 --> 00:12:29,399
easily change it the only

255
00:12:29,399 --> 00:12:33,120
needed property from this constant is

256
00:12:33,120 --> 00:12:36,480
the alleged data source Event Source

257
00:12:36,480 --> 00:12:39,600
would not use it never for one for two a

258
00:12:39,600 --> 00:12:42,300
b would be all these messages would be

259
00:12:42,300 --> 00:12:44,459
related only to the malware after it

260
00:12:44,459 --> 00:12:47,100
they use some C plus plus container with

261
00:12:47,100 --> 00:12:49,980
time a simplest one is the string and

262
00:12:49,980 --> 00:12:52,800
appending all the messages with such a

263
00:12:52,800 --> 00:12:55,860
category ID to one string just for the

264
00:12:55,860 --> 00:12:58,019
further take the data from the string

265
00:12:58,019 --> 00:12:59,700
and execute it

266
00:12:59,700 --> 00:13:02,820
okay so already two slides with the code

267
00:13:02,820 --> 00:13:06,480
but all of these related for the reading

268
00:13:06,480 --> 00:13:09,420
right so reading messages from eventlock

269
00:13:09,420 --> 00:13:11,760
putting into container

270
00:13:11,760 --> 00:13:15,420
what actually who put it over there for

271
00:13:15,420 --> 00:13:18,180
sure not KMS not Windows right they need

272
00:13:18,180 --> 00:13:21,360
some dropper and here

273
00:13:21,360 --> 00:13:25,500
on this slide I put on your right you

274
00:13:25,500 --> 00:13:28,500
see the familiar code snippet related to

275
00:13:28,500 --> 00:13:31,440
the reading these messages

276
00:13:31,440 --> 00:13:34,459
and on the left it's a separate model

277
00:13:34,459 --> 00:13:38,040
it's actually The Dropper and dropper

278
00:13:38,040 --> 00:13:39,660
put it over there

279
00:13:39,660 --> 00:13:42,600
so let's enumerate all the windows API

280
00:13:42,600 --> 00:13:45,360
functions we need to fulfill this task

281
00:13:45,360 --> 00:13:48,240
legit Windows API so nothing wrong with

282
00:13:48,240 --> 00:13:51,000
the function you remember register Event

283
00:13:51,000 --> 00:13:54,420
Source let us keep W suffix it's just

284
00:13:54,420 --> 00:13:56,399
let us know it's a white all the

285
00:13:56,399 --> 00:13:58,560
arguments is Unicode string register

286
00:13:58,560 --> 00:14:01,560
Event Source and read event log from

287
00:14:01,560 --> 00:14:04,200
which we would read and

288
00:14:04,200 --> 00:14:08,700
some function to actually read it but on

289
00:14:08,700 --> 00:14:12,480
a dropper we need report event

290
00:14:12,480 --> 00:14:16,500
and some new argument important for us

291
00:14:16,500 --> 00:14:20,100
important as a ioc or the incident

292
00:14:20,100 --> 00:14:22,279
response in case of this malware

293
00:14:22,279 --> 00:14:27,060
appeared in the argument of report event

294
00:14:27,060 --> 00:14:29,700
take a look we already know for one for

295
00:14:29,700 --> 00:14:33,240
two it's a category ID right filtering

296
00:14:33,240 --> 00:14:36,480
on which seems like on this clicker I

297
00:14:36,480 --> 00:14:38,940
don't have the red point so I would go

298
00:14:38,940 --> 00:14:39,959
over there

299
00:14:39,959 --> 00:14:43,940
category ID write the same as on our

300
00:14:43,940 --> 00:14:48,240
previous slide for the reading but as

301
00:14:48,240 --> 00:14:50,699
well we also get

302
00:14:50,699 --> 00:14:52,199
event ID

303
00:14:52,199 --> 00:14:55,139
and the various start location of event

304
00:14:55,139 --> 00:14:58,320
ID they know precisely to which category

305
00:14:58,320 --> 00:15:01,740
and which incremental value they assign

306
00:15:01,740 --> 00:15:04,139
to the Mali search malicious event log

307
00:15:04,139 --> 00:15:06,660
one more argument I want to emphasize

308
00:15:06,660 --> 00:15:10,920
here it's a type of this record in your

309
00:15:10,920 --> 00:15:13,620
event Windows Event lock mechanism it

310
00:15:13,620 --> 00:15:16,500
would be just an information record so

311
00:15:16,500 --> 00:15:19,380
you would open MMC you would hope the

312
00:15:19,380 --> 00:15:21,540
corresponding snippet take a look with

313
00:15:21,540 --> 00:15:24,959
all the records you would see it's a KMS

314
00:15:24,959 --> 00:15:28,920
information type and all the data over

315
00:15:28,920 --> 00:15:31,500
there but by default during my

316
00:15:31,500 --> 00:15:33,899
experiment I would see the normal MMC

317
00:15:33,899 --> 00:15:36,899
interface wouldn't show you the binary

318
00:15:36,899 --> 00:15:39,959
addition to these logs so actually all

319
00:15:39,959 --> 00:15:42,000
these binary data always encrypted Shell

320
00:15:42,000 --> 00:15:44,699
Code to read it you need to some other

321
00:15:44,699 --> 00:15:47,160
intro instrument or need to write your

322
00:15:47,160 --> 00:15:50,279
own some tool to read the binary part of

323
00:15:50,279 --> 00:15:53,880
the data okay dropper we are covering

324
00:15:53,880 --> 00:15:56,399
what else we need so watches actually

325
00:15:56,399 --> 00:16:00,000
inside we have a dropper to put data

326
00:16:00,000 --> 00:16:02,760
over there we have launcher to get the

327
00:16:02,760 --> 00:16:06,000
data from the event data source but what

328
00:16:06,000 --> 00:16:08,339
it would execute it actually inside the

329
00:16:08,339 --> 00:16:12,420
after the decryption nothing

330
00:16:12,420 --> 00:16:15,540
special as if you analyzed Sometimes

331
00:16:15,540 --> 00:16:18,240
some shortcuts it could be a quite a

332
00:16:18,240 --> 00:16:21,120
familiar picture for you it's actually

333
00:16:21,120 --> 00:16:24,420
the running next station the one thing I

334
00:16:24,420 --> 00:16:27,440
want to emphasize here

335
00:16:27,440 --> 00:16:30,420
even through this conference you already

336
00:16:30,420 --> 00:16:35,399
seen this typical Hessian algorithm from

337
00:16:35,399 --> 00:16:39,060
the Metasploit raw 13 so for they

338
00:16:39,060 --> 00:16:40,860
wouldn't keep the name of the functions

339
00:16:40,860 --> 00:16:43,680
would keep only the hash codes and get

340
00:16:43,680 --> 00:16:45,240
the name gets the address of the

341
00:16:45,240 --> 00:16:47,699
functions using the Shell codes but take

342
00:16:47,699 --> 00:16:50,820
a look after the uh parsing the export

343
00:16:50,820 --> 00:16:55,500
table of the files or the

344
00:16:55,500 --> 00:16:58,259
founding function it would be the name

345
00:16:58,259 --> 00:17:00,540
of the function would be load by the way

346
00:17:00,540 --> 00:17:02,940
here we would need to implement some

347
00:17:02,940 --> 00:17:06,000
brute forcing because the hash was not

348
00:17:06,000 --> 00:17:07,919
typical it's not the typical name for

349
00:17:07,919 --> 00:17:10,140
the windows API right it's a custom name

350
00:17:10,140 --> 00:17:12,839
from the next station it names lower add

351
00:17:12,839 --> 00:17:14,780
is a capital l

352
00:17:14,780 --> 00:17:17,579
or but with a dictionary you could brute

353
00:17:17,579 --> 00:17:19,799
force and get the right Shell Code for

354
00:17:19,799 --> 00:17:22,559
it uh the start of the hour load

355
00:17:22,559 --> 00:17:26,040
function gets to argument it's a very

356
00:17:26,040 --> 00:17:28,860
last line over there I actually don't

357
00:17:28,860 --> 00:17:31,320
know why because now I got them we got

358
00:17:31,320 --> 00:17:34,440
the next stage and arguments was not

359
00:17:34,440 --> 00:17:36,840
really in use but they keep the ask a

360
00:17:36,840 --> 00:17:41,520
string with I ask a string Dave and use

361
00:17:41,520 --> 00:17:44,160
it as an argument for our Lord function

362
00:17:44,160 --> 00:17:47,880
don't know why maybe in some other uh

363
00:17:47,880 --> 00:17:50,820
next stage it would be really in use but

364
00:17:50,820 --> 00:17:53,039
in the samples we observe this Dave's

365
00:17:53,039 --> 00:17:55,380
string just as skipped oops some I like

366
00:17:55,380 --> 00:17:57,720
natural language artifacts in this case

367
00:17:57,720 --> 00:18:01,020
it was Dave and the constant 4.

368
00:18:01,020 --> 00:18:04,140
or maybe the length of the first ASCII

369
00:18:04,140 --> 00:18:06,840
string they will just use form ASCII

370
00:18:06,840 --> 00:18:09,900
charts this is it when you decrypt the

371
00:18:09,900 --> 00:18:13,860
Shell Code from the event data source

372
00:18:13,860 --> 00:18:16,919
KMS you would get some launcher of the

373
00:18:16,919 --> 00:18:18,240
next station

374
00:18:18,240 --> 00:18:20,100
okay

375
00:18:20,100 --> 00:18:22,919
I think enough from this part of the

376
00:18:22,919 --> 00:18:24,900
attack

377
00:18:24,900 --> 00:18:27,480
I consider once again I started from it

378
00:18:27,480 --> 00:18:29,160
because I considered the most Innovative

379
00:18:29,160 --> 00:18:32,700
part but many other models exist so I

380
00:18:32,700 --> 00:18:35,640
promise you the broad view of all of the

381
00:18:35,640 --> 00:18:38,940
campaign let us take a look at all the

382
00:18:38,940 --> 00:18:41,700
campaign of the actor who Implement such

383
00:18:41,700 --> 00:18:45,000
a brand new techniques what we have are

384
00:18:45,000 --> 00:18:48,480
there actually a non-typical thing was

385
00:18:48,480 --> 00:18:51,720
the usage of a simultaneously of two

386
00:18:51,720 --> 00:18:55,500
commercial tool sets I could say for

387
00:18:55,500 --> 00:18:58,799
sure familiar to you Cobalt strike was

388
00:18:58,799 --> 00:19:01,860
in use oh it's just visible it was a

389
00:19:01,860 --> 00:19:05,039
Cobalt strike models but I also expect

390
00:19:05,039 --> 00:19:09,240
another second commercial to set was a

391
00:19:09,240 --> 00:19:12,120
silent break uh don't mind the name was

392
00:19:12,120 --> 00:19:15,240
I'm not sure it's uh nowadays it's a

393
00:19:15,240 --> 00:19:17,700
proper name it was a company bought by

394
00:19:17,700 --> 00:19:20,340
another company whatever but why I use

395
00:19:20,340 --> 00:19:23,700
it on a GitHub or the repository still

396
00:19:23,700 --> 00:19:27,059
got that name and in this repository we

397
00:19:27,059 --> 00:19:29,220
still have the very old version of the

398
00:19:29,220 --> 00:19:32,760
model named throwback throwback and we

399
00:19:32,760 --> 00:19:34,400
see this

400
00:19:34,400 --> 00:19:37,740
throwback.dll always usage over

401
00:19:37,740 --> 00:19:40,500
encryption same encryption algorithm in

402
00:19:40,500 --> 00:19:44,220
the models during this campaign so I'm

403
00:19:44,220 --> 00:19:48,240
quite sure here looking on some Court

404
00:19:48,240 --> 00:19:51,360
to the guys who gets access to the same

405
00:19:51,360 --> 00:19:53,940
Source called Data that's why I could

406
00:19:53,940 --> 00:19:57,120
think about the silence break another

407
00:19:57,120 --> 00:20:00,480
tool the commercial tool of the company

408
00:20:00,480 --> 00:20:03,419
it's a called

409
00:20:03,419 --> 00:20:06,179
no slingshot and also we observe

410
00:20:06,179 --> 00:20:08,220
original names of the libraries like a

411
00:20:08,220 --> 00:20:11,480
slingshot dll and as well monolith dll

412
00:20:11,480 --> 00:20:15,360
so this commercial tool set somewhere

413
00:20:15,360 --> 00:20:18,480
around okay it's a commercial tool set

414
00:20:18,480 --> 00:20:20,120
choose a

415
00:20:20,120 --> 00:20:24,299
pull some Security Solutions they decide

416
00:20:24,299 --> 00:20:26,820
to use some more isotmoresoteric

417
00:20:26,820 --> 00:20:29,039
compilers than COC plus plus they use

418
00:20:29,039 --> 00:20:33,000
Nim and go and we have to uh to

419
00:20:33,000 --> 00:20:34,799
understand next models we have to fight

420
00:20:34,799 --> 00:20:38,580
with droppers in such a newer languages

421
00:20:38,580 --> 00:20:41,340
okay we successfully did it also some

422
00:20:41,340 --> 00:20:43,380
library was compiled within the

423
00:20:43,380 --> 00:20:46,020
environment in the environment with a

424
00:20:46,020 --> 00:20:49,740
GCC compiler so you see a Microsoft C

425
00:20:49,740 --> 00:20:54,360
compiler GCC and windows neem Gore quite

426
00:20:54,360 --> 00:20:56,340
a number of compiles they trying to use

427
00:20:56,340 --> 00:20:58,799
but I consider just an anti-detection

428
00:20:58,799 --> 00:21:01,559
measures or nothing more actually I will

429
00:21:01,559 --> 00:21:04,320
show you the code an interesting part is

430
00:21:04,320 --> 00:21:06,720
the last stages they actually use two

431
00:21:06,720 --> 00:21:10,140
different Origins and I promise it to

432
00:21:10,140 --> 00:21:13,380
give you the ideas why if you have such

433
00:21:13,380 --> 00:21:15,720
a remote Administration tool seems like

434
00:21:15,720 --> 00:21:18,600
one is enough right for them they use

435
00:21:18,600 --> 00:21:21,539
one for the local area real Network in a

436
00:21:21,539 --> 00:21:24,900
passive mode I suppose it was a fossil

437
00:21:24,900 --> 00:21:26,039
lateral movement

438
00:21:26,039 --> 00:21:29,880
so to make a foothold inside the Lamb of

439
00:21:29,880 --> 00:21:32,400
the victim they use based on the name of

440
00:21:32,400 --> 00:21:34,620
the pipes version of the children and

441
00:21:34,620 --> 00:21:38,280
HTTP version could go to the external C2

442
00:21:38,280 --> 00:21:41,159
and it's a normal Trojan to communicate

443
00:21:41,159 --> 00:21:43,500
with a real control server and the

444
00:21:43,500 --> 00:21:45,980
common set is a completely different

445
00:21:45,980 --> 00:21:49,320
okay these are the stages and let's

446
00:21:49,320 --> 00:21:52,980
describe it one by one

447
00:21:52,980 --> 00:21:56,640
uh besides the commercial tool set they

448
00:21:56,640 --> 00:21:59,220
also that's not the first time the money

449
00:21:59,220 --> 00:22:01,559
factors just grab the publicly available

450
00:22:01,559 --> 00:22:04,500
GitHub repository in this case black

451
00:22:04,500 --> 00:22:08,059
Bond and black bone we observed before

452
00:22:08,059 --> 00:22:11,520
using the campaign when the driver want

453
00:22:11,520 --> 00:22:13,740
to inject some code into the legit

454
00:22:13,740 --> 00:22:16,260
system process collect Bond could be

455
00:22:16,260 --> 00:22:18,120
used once again you could easily adjust

456
00:22:18,120 --> 00:22:20,880
the git clone check the code at some

457
00:22:20,880 --> 00:22:22,980
part of the code needed for the campaign

458
00:22:22,980 --> 00:22:26,820
compiled it and try to deploy it on on

459
00:22:26,820 --> 00:22:29,220
The Targets in this case a black bone

460
00:22:29,220 --> 00:22:32,940
was also the case you see two commercial

461
00:22:32,940 --> 00:22:36,299
tool sets was seems like not enough so

462
00:22:36,299 --> 00:22:38,940
it's like integration process of the

463
00:22:38,940 --> 00:22:43,860
different tool sets and later on in to

464
00:22:43,860 --> 00:22:46,559
my experience I observe more and more

465
00:22:46,559 --> 00:22:48,780
usage of some code Snippets from the

466
00:22:48,780 --> 00:22:51,780
GitHub because why not why not it's so

467
00:22:51,780 --> 00:22:54,179
they could avoid attribution right they

468
00:22:54,179 --> 00:22:57,419
could uh fulfill the task with the

469
00:22:57,419 --> 00:23:00,419
already made code not invest in a coding

470
00:23:00,419 --> 00:23:03,000
so maybe not so bad idea for the money

471
00:23:03,000 --> 00:23:06,780
factors okay why I think Blackburn was

472
00:23:06,780 --> 00:23:08,760
in use for sure it's not the strings

473
00:23:08,760 --> 00:23:12,120
take a look the world who made a black

474
00:23:12,120 --> 00:23:13,620
bomb in the wild

475
00:23:13,620 --> 00:23:18,199
maybe I'm quite a familiar stuff to you

476
00:23:18,720 --> 00:23:21,179
one of the technique was a dll side

477
00:23:21,179 --> 00:23:24,360
loading as usual they take the legit

478
00:23:24,360 --> 00:23:27,720
file their fault dot dll or dot exam

479
00:23:27,720 --> 00:23:31,260
therefore gxz and the windows is

480
00:23:31,260 --> 00:23:33,960
it's a error handling right so error

481
00:23:33,960 --> 00:23:35,940
handling of the part of the operating

482
00:23:35,940 --> 00:23:38,760
system they copy to separate directory

483
00:23:38,760 --> 00:23:40,860
actually with the schedule task

484
00:23:40,860 --> 00:23:43,559
directory and put dll with a very

485
00:23:43,559 --> 00:23:48,240
specific name so so just a very familiar

486
00:23:48,240 --> 00:23:50,580
search of them hijacking and they don't

487
00:23:50,580 --> 00:23:53,880
want to the word fault.exe continue its

488
00:23:53,880 --> 00:23:57,360
execution after the mapping as

489
00:23:57,360 --> 00:23:59,760
malicious the allele into memory they

490
00:23:59,760 --> 00:24:02,159
need to page the entry point of the

491
00:24:02,159 --> 00:24:04,860
ledgered XD file this is it so very

492
00:24:04,860 --> 00:24:07,200
typical Blackboard approach just put

493
00:24:07,200 --> 00:24:10,679
move rocks jump racks and their own or

494
00:24:10,679 --> 00:24:13,440
some own function in this case I name it

495
00:24:13,440 --> 00:24:16,679
wait and exit wait for the thread from

496
00:24:16,679 --> 00:24:19,559
the dll and gracefully exit the XZ

497
00:24:19,559 --> 00:24:22,440
process main process were fought with a

498
00:24:22,440 --> 00:24:24,299
success code

499
00:24:24,299 --> 00:24:27,419
okay that's why I consider Blackburn

500
00:24:27,419 --> 00:24:29,880
over there not the only sign but one of

501
00:24:29,880 --> 00:24:32,280
the signs just the patching of entry

502
00:24:32,280 --> 00:24:34,320
point of Ledger exim

503
00:24:34,320 --> 00:24:37,200
regarding Unity detection

504
00:24:37,200 --> 00:24:39,960
regarding country detection besides the

505
00:24:39,960 --> 00:24:43,080
already mentioned several approach it's

506
00:24:43,080 --> 00:24:46,020
uh several compilers white listed

507
00:24:46,020 --> 00:24:48,960
launcher I didn't mention so far digital

508
00:24:48,960 --> 00:24:51,860
certificate uh typically such an extra

509
00:24:51,860 --> 00:24:55,320
actors try to steal digital certificate

510
00:24:55,320 --> 00:24:59,700
from some vendor and signed up for files

511
00:24:59,700 --> 00:25:03,960
of the campaign it was in this case but

512
00:25:03,960 --> 00:25:06,659
I'm not sure certificate was stored when

513
00:25:06,659 --> 00:25:09,299
I tried to obtain legitimate normal

514
00:25:09,299 --> 00:25:12,000
files with the same digital certificate

515
00:25:12,000 --> 00:25:14,880
I actually failed maybe just our

516
00:25:14,880 --> 00:25:17,640
visibility maybe not it seems like with

517
00:25:17,640 --> 00:25:20,100
this digital certificate only malicious

518
00:25:20,100 --> 00:25:22,320
files were signed

519
00:25:22,320 --> 00:25:25,500
so I suppose maybe it was obtained it

520
00:25:25,500 --> 00:25:28,140
was bought only for the campaign maybe

521
00:25:28,140 --> 00:25:30,600
not skilled from some Ledger software

522
00:25:30,600 --> 00:25:33,139
company

523
00:25:33,960 --> 00:25:36,320
private on the next slide in the details

524
00:25:36,320 --> 00:25:39,840
seems like the actor last you see they

525
00:25:39,840 --> 00:25:42,960
adore event locks they use it a lot but

526
00:25:42,960 --> 00:25:45,299
shall code there but they lost only

527
00:25:45,299 --> 00:25:48,840
their own event logging they don't want

528
00:25:48,840 --> 00:25:50,940
to be locked by the operating system

529
00:25:50,940 --> 00:25:53,880
mechanism that's why several functions

530
00:25:53,880 --> 00:25:56,880
from the normal mechanism of logging of

531
00:25:56,880 --> 00:25:59,520
operating system they would pitch they

532
00:25:59,520 --> 00:26:02,279
would pitch on the level of the ntdl dll

533
00:26:02,279 --> 00:26:05,100
the lowest level on use of space they

534
00:26:05,100 --> 00:26:07,919
could obtain so no kernel component in

535
00:26:07,919 --> 00:26:10,500
this time and they would just take in

536
00:26:10,500 --> 00:26:12,779
the memory of their process and tdll

537
00:26:12,779 --> 00:26:16,020
address of these functions and page as

538
00:26:16,020 --> 00:26:19,260
usual with some adjust MTM returns zero

539
00:26:19,260 --> 00:26:22,140
so all good returning no locks appeared

540
00:26:22,140 --> 00:26:24,860
in your event locks viewer

541
00:26:24,860 --> 00:26:28,320
and also let me emphasize the very last

542
00:26:28,320 --> 00:26:31,080
part regarding the C2 name seems like

543
00:26:31,080 --> 00:26:34,260
those guys did their homework well

544
00:26:34,260 --> 00:26:38,039
they make initial Recon understand which

545
00:26:38,039 --> 00:26:41,580
are actually GOP system was on board in

546
00:26:41,580 --> 00:26:43,740
this corporate environment understands

547
00:26:43,740 --> 00:26:46,200
the name and registers the web domain

548
00:26:46,200 --> 00:26:49,320
this is a very similar name of its legit

549
00:26:49,320 --> 00:26:52,640
system in the environment so the traffic

550
00:26:52,640 --> 00:26:55,799
which some I don't know blue teamers

551
00:26:55,799 --> 00:26:57,480
could observe in their precious

552
00:26:57,480 --> 00:27:00,240
Wireshark would be to some domain which

553
00:27:00,240 --> 00:27:02,460
name is completely related to the DLP

554
00:27:02,460 --> 00:27:05,340
and they could think maybe maybe not or

555
00:27:05,340 --> 00:27:07,880
it just alleged traffic which our

556
00:27:07,880 --> 00:27:10,799
information system generate not a

557
00:27:10,799 --> 00:27:13,559
malware also a interesting idea I

558
00:27:13,559 --> 00:27:15,659
suppose okay

559
00:27:15,659 --> 00:27:19,880
I propose Also regarding them are paging

560
00:27:19,880 --> 00:27:22,440
uh actually also what I want to

561
00:27:22,440 --> 00:27:26,100
emphasize here it's a MCI patching on

562
00:27:26,100 --> 00:27:28,500
the slides you would see a patching of

563
00:27:28,500 --> 00:27:30,720
the function relating to the logs

564
00:27:30,720 --> 00:27:34,679
etw prefix and but MCI fetching as far

565
00:27:34,679 --> 00:27:37,940
as I know nowadays it even exists in a

566
00:27:37,940 --> 00:27:40,799
Metasploit framework so I would consider

567
00:27:40,799 --> 00:27:43,679
it as a already a common techniques for

568
00:27:43,679 --> 00:27:46,200
the money factors and wouldn't stop as

569
00:27:46,200 --> 00:27:48,900
in details as I provide details

570
00:27:48,900 --> 00:27:51,480
regarding them binary part of the event

571
00:27:51,480 --> 00:27:54,900
logs or not the first time I met paging

572
00:27:54,900 --> 00:27:57,559
of MCI are functions

573
00:27:57,559 --> 00:27:59,220
so

574
00:27:59,220 --> 00:28:02,400
um regarding Goa who already revokings

575
00:28:02,400 --> 00:28:04,500
role models

576
00:28:04,500 --> 00:28:06,500
did you like it

577
00:28:06,500 --> 00:28:10,980
me nicer me nicer I said Yvonne also

578
00:28:10,980 --> 00:28:13,799
loves I know the color everything but uh

579
00:28:13,799 --> 00:28:16,799
this time or all what gorm is doing

580
00:28:16,799 --> 00:28:20,220
besides the paging it's just the decrypt

581
00:28:20,220 --> 00:28:21,539
next station

582
00:28:21,539 --> 00:28:24,539
what I need to obtain here uh I need to

583
00:28:24,539 --> 00:28:27,000
obtain all this quite quite a painful

584
00:28:27,000 --> 00:28:31,559
task all this part of the uh code it was

585
00:28:31,559 --> 00:28:33,659
a thousand of them they'll need to write

586
00:28:33,659 --> 00:28:35,820
some script to put it all together

587
00:28:35,820 --> 00:28:38,880
decrypted with the decode visible by 64

588
00:28:38,880 --> 00:28:41,760
as usual decrypted with the IES and get

589
00:28:41,760 --> 00:28:44,279
the next stage nothing more interesting

590
00:28:44,279 --> 00:28:46,679
part on the goal level it's a heavy

591
00:28:46,679 --> 00:28:48,440
usage of the

592
00:28:48,440 --> 00:28:51,600
Cisco's Library actually it was even

593
00:28:51,600 --> 00:28:54,840
back then was a little surprise for me I

594
00:28:54,840 --> 00:28:56,460
familiar with this is called mechanism

595
00:28:56,460 --> 00:29:00,179
Angel Linux right but it's under windows

596
00:29:00,179 --> 00:29:02,760
it's exists it's very version dependent

597
00:29:02,760 --> 00:29:06,960
but this calls also exist and if on

598
00:29:06,960 --> 00:29:09,240
level of go language use this call

599
00:29:09,240 --> 00:29:12,360
library it would be a lot of Cisco's

600
00:29:12,360 --> 00:29:14,340
over there but it's all the codes are

601
00:29:14,340 --> 00:29:15,960
publicly available and you could

602
00:29:15,960 --> 00:29:18,840
understand which women team in ntgl

603
00:29:18,840 --> 00:29:22,640
function is called using this is called

604
00:29:22,640 --> 00:29:26,880
to decide to use this Library so on this

605
00:29:26,880 --> 00:29:29,960
wrapper I need to combine and decrypt

606
00:29:29,960 --> 00:29:34,440
successfully solved and uh you a little

607
00:29:34,440 --> 00:29:38,580
bit details about the patient some one

608
00:29:38,580 --> 00:29:41,220
more Library like the whole Library go

609
00:29:41,220 --> 00:29:45,179
Library I mean this is some lazy

610
00:29:45,179 --> 00:29:47,220
um taking the address

611
00:29:47,220 --> 00:29:50,520
of the API functions and put the empty

612
00:29:50,520 --> 00:29:52,440
functions instead

613
00:29:52,440 --> 00:29:56,279
of the real ones uh in a memory of this

614
00:29:56,279 --> 00:30:00,000
process of the Barefoot dll okay if they

615
00:30:00,000 --> 00:30:02,279
don't want to any event logs besides

616
00:30:02,279 --> 00:30:05,039
their own maybe a normal decision

617
00:30:05,039 --> 00:30:09,059
enough for the esoteric compilers if you

618
00:30:09,059 --> 00:30:10,380
would

619
00:30:10,380 --> 00:30:12,120
get some if you have some question

620
00:30:12,120 --> 00:30:16,039
regarding go or name you would ask

621
00:30:16,039 --> 00:30:21,059
and now I want to spend some time on the

622
00:30:21,059 --> 00:30:25,200
last stage last stages why two of them

623
00:30:25,200 --> 00:30:28,380
and what was interesting inside so I

624
00:30:28,380 --> 00:30:30,779
really love when manufactures on some

625
00:30:30,779 --> 00:30:33,779
level save the version of the malware

626
00:30:33,779 --> 00:30:36,419
for the sun targeted malware I even keep

627
00:30:36,419 --> 00:30:39,020
my own dictionary on now the version

628
00:30:39,020 --> 00:30:42,360
1.7.2 arrive nice nice before I have

629
00:30:42,360 --> 00:30:45,360
only 1.611 let's take a look what's new

630
00:30:45,360 --> 00:30:48,120
in this case in a traffic so generated

631
00:30:48,120 --> 00:30:51,120
in the initial Beacon for one of the

632
00:30:51,120 --> 00:30:55,320
Trojans version exists so also nice to

633
00:30:55,320 --> 00:30:57,840
have it I wouldn't

634
00:30:57,840 --> 00:31:01,799
repeat all or from the our slides just

635
00:31:01,799 --> 00:31:04,500
or some interesting points over there

636
00:31:04,500 --> 00:31:07,620
for me I love the randomization all the

637
00:31:07,620 --> 00:31:08,640
time

638
00:31:08,640 --> 00:31:11,700
this point randomization of the sleep

639
00:31:11,700 --> 00:31:15,059
time to my understanding it also trying

640
00:31:15,059 --> 00:31:18,179
uh make the life of incident responder

641
00:31:18,179 --> 00:31:21,120
harder for example not to correlate the

642
00:31:21,120 --> 00:31:24,240
initial infection data date and first

643
00:31:24,240 --> 00:31:27,240
beaconing date some randomization is a

644
00:31:27,240 --> 00:31:30,600
good idea for the making correlating of

645
00:31:30,600 --> 00:31:34,080
different events harder but with a quite

646
00:31:34,080 --> 00:31:36,480
a strange randomization for example

647
00:31:36,480 --> 00:31:38,399
sleep time they would take from

648
00:31:38,399 --> 00:31:40,559
configuration data and after read

649
00:31:40,559 --> 00:31:43,679
multiply to some random value from 0.9

650
00:31:43,679 --> 00:31:48,659
to 1.1 is it so Random so the difference

651
00:31:48,659 --> 00:31:51,240
would be quite it would be quite similar

652
00:31:51,240 --> 00:31:53,460
values right so the difference is only

653
00:31:53,460 --> 00:31:57,539
about 20 percent so around 20 straight

654
00:31:57,539 --> 00:32:00,480
nothing more but anyway they implemented

655
00:32:00,480 --> 00:32:03,539
and also I laugh in a land version of

656
00:32:03,539 --> 00:32:06,299
Trojan based on named pipes it's a

657
00:32:06,299 --> 00:32:08,580
getting of the how long user is an

658
00:32:08,580 --> 00:32:11,760
active they don't want to be too active

659
00:32:11,760 --> 00:32:14,220
in a time when user is typing something

660
00:32:14,220 --> 00:32:17,700
so maybe operators just check on five or

661
00:32:17,700 --> 00:32:20,640
two hours are negative maybe it's time

662
00:32:20,640 --> 00:32:22,620
to do something on This Server seems

663
00:32:22,620 --> 00:32:25,020
like nobody is watching now the server

664
00:32:25,020 --> 00:32:29,159
time to send some comments over there

665
00:32:29,159 --> 00:32:30,720
all other

666
00:32:30,720 --> 00:32:33,600
I suppose not one more thing maybe here

667
00:32:33,600 --> 00:32:36,840
they adore injection really adore

668
00:32:36,840 --> 00:32:39,419
injection they obsess it not only with

669
00:32:39,419 --> 00:32:43,020
the Windows 7 logs but also to this DLP

670
00:32:43,020 --> 00:32:46,380
process to lsrs process whatever inject

671
00:32:46,380 --> 00:32:49,260
their code they have a separated comment

672
00:32:49,260 --> 00:32:52,080
in a boss Trojans to inject their code

673
00:32:52,080 --> 00:32:55,380
whatever they could use process ID to

674
00:32:55,380 --> 00:32:57,539
inject process name

675
00:32:57,539 --> 00:33:01,340
they really adore this stuff

676
00:33:01,340 --> 00:33:04,020
and some regarding the common system

677
00:33:04,020 --> 00:33:07,380
here it's a common system of short-term

678
00:33:07,380 --> 00:33:10,020
common system from the Trojan but please

679
00:33:10,020 --> 00:33:11,640
keep in mind it looks like they have

680
00:33:11,640 --> 00:33:14,580
some repository like a Constructor and

681
00:33:14,580 --> 00:33:18,299
could combine the media which core of

682
00:33:18,299 --> 00:33:20,700
children would use named pipes or HTTP

683
00:33:20,700 --> 00:33:23,940
and which common system it would use so

684
00:33:23,940 --> 00:33:26,039
they could simultaneously for example

685
00:33:26,039 --> 00:33:28,919
this or in the case of samples we could

686
00:33:28,919 --> 00:33:32,159
observe it was bought to the HTTP Trojan

687
00:33:32,159 --> 00:33:35,880
but we also saw named pipe Trojan with a

688
00:33:35,880 --> 00:33:38,519
similar common system interesting part

689
00:33:38,519 --> 00:33:41,100
here the comments you could see quite

690
00:33:41,100 --> 00:33:43,860
typical for any Trojan I laugh during

691
00:33:43,860 --> 00:33:46,679
the fingerprinting they would get a

692
00:33:46,679 --> 00:33:49,740
machine Grid or maybe when you build

693
00:33:49,740 --> 00:33:52,019
some unique ID for the user not a bad

694
00:33:52,019 --> 00:33:55,019
idea to use machine grid as well and

695
00:33:55,019 --> 00:33:57,019
also

696
00:33:57,019 --> 00:34:01,799
uh let me briefly describe the situ one

697
00:34:01,799 --> 00:34:04,320
more randomization they would keep the

698
00:34:04,320 --> 00:34:06,600
list of control server and in any

699
00:34:06,600 --> 00:34:08,760
communication where they would randomly

700
00:34:08,760 --> 00:34:11,159
choose the C2 from the list

701
00:34:11,159 --> 00:34:14,399
so if C2 is alive they would walk with

702
00:34:14,399 --> 00:34:16,500
this server next time it would be

703
00:34:16,500 --> 00:34:19,800
another a live server from the list nice

704
00:34:19,800 --> 00:34:21,659
nice I suppose

705
00:34:21,659 --> 00:34:24,060
our encryption is a throwback like

706
00:34:24,060 --> 00:34:26,879
already described in the previous slides

707
00:34:26,879 --> 00:34:30,418
common system you see here so next

708
00:34:30,418 --> 00:34:31,580
version

709
00:34:31,580 --> 00:34:34,560
nextration set or one of the original

710
00:34:34,560 --> 00:34:37,739
file name was a monolith dll we saw it

711
00:34:37,739 --> 00:34:40,260
in table so I prefer to call all this

712
00:34:40,260 --> 00:34:43,679
activity monolith because all the other

713
00:34:43,679 --> 00:34:46,379
names I observed here was just the name

714
00:34:46,379 --> 00:34:48,599
of the tool set commercial or not

715
00:34:48,599 --> 00:34:49,520
commercial

716
00:34:49,520 --> 00:34:53,460
and take a look in this case there are

717
00:34:53,460 --> 00:34:56,159
common system far more profound not all

718
00:34:56,159 --> 00:34:58,560
of them is here otherwise it would be

719
00:34:58,560 --> 00:35:01,200
too long at least

720
00:35:01,200 --> 00:35:04,859
and so one more one to emphasize such

721
00:35:04,859 --> 00:35:07,740
HTTP version with the same profound

722
00:35:07,740 --> 00:35:11,280
common system also exists so they could

723
00:35:11,280 --> 00:35:15,260
construct their Trojan as they want

724
00:35:15,260 --> 00:35:19,440
so time seems like we're almost out of

725
00:35:19,440 --> 00:35:22,859
time let me briefly sum up what we get

726
00:35:22,859 --> 00:35:26,640
through this presentation I provide a

727
00:35:26,640 --> 00:35:29,700
new con at least be consider it new and

728
00:35:29,700 --> 00:35:31,260
Innovative technique of keeping

729
00:35:31,260 --> 00:35:33,780
encrypted structural code into the

730
00:35:33,780 --> 00:35:38,339
Windows 7 logs uh we show you the

731
00:35:38,339 --> 00:35:41,520
dropper how to write to the event logs

732
00:35:41,520 --> 00:35:44,640
and how to read so some launcher what

733
00:35:44,640 --> 00:35:47,760
was kept inside the shell codes and all

734
00:35:47,760 --> 00:35:50,280
other modules around it are auxiliary

735
00:35:50,280 --> 00:35:53,280
for the anti-detection models and last

736
00:35:53,280 --> 00:35:55,920
stages which would be active as a result

737
00:35:55,920 --> 00:35:58,920
of all these uh campaign

738
00:35:58,920 --> 00:36:03,119
so I hope you as a researchers would uh

739
00:36:03,119 --> 00:36:07,440
benefit with such a modern type of the

740
00:36:07,440 --> 00:36:09,359
techniques in the car with targeted

741
00:36:09,359 --> 00:36:11,940
malware I really really form any

742
00:36:11,940 --> 00:36:13,800
questions and I really hope it will be

743
00:36:13,800 --> 00:36:18,980
any please fire away questions time

744
00:36:20,160 --> 00:36:22,520
hello

745
00:36:24,300 --> 00:36:26,760
how did they execute the Shell Code

746
00:36:26,760 --> 00:36:28,800
because even if the shell code is

747
00:36:28,800 --> 00:36:31,500
fileless or stored in the event

748
00:36:31,500 --> 00:36:32,220
um

749
00:36:32,220 --> 00:36:34,500
and registry um it's going to get

750
00:36:34,500 --> 00:36:36,480
detected eventually with for example

751
00:36:36,480 --> 00:36:38,820
create remote thread uh at least that's

752
00:36:38,820 --> 00:36:40,500
what I have experienced in Defender

753
00:36:40,500 --> 00:36:43,140
because when you execute that in user

754
00:36:43,140 --> 00:36:43,800
land

755
00:36:43,800 --> 00:36:46,560
uh I think the kernel mode scans the

756
00:36:46,560 --> 00:36:49,260
buffer and the Cobalt stack is detected

757
00:36:49,260 --> 00:36:51,839
basically so I'm wondering why all these

758
00:36:51,839 --> 00:36:53,720
threat actors are using like detected

759
00:36:53,720 --> 00:36:56,400
Shell Code

760
00:36:56,400 --> 00:36:59,400
sorry I was not sure I fully understand

761
00:36:59,400 --> 00:37:01,619
the question sure it was a quite loud

762
00:37:01,619 --> 00:37:03,900
there was there if you for sure I

763
00:37:03,900 --> 00:37:05,820
provide on a slide with the show code it

764
00:37:05,820 --> 00:37:08,579
was not full of it right I just it was a

765
00:37:08,579 --> 00:37:10,980
only part of it to show it's a quite a

766
00:37:10,980 --> 00:37:12,540
familiar techniques for the Shell Code

767
00:37:12,540 --> 00:37:14,520
could you please repeat the main part of

768
00:37:14,520 --> 00:37:16,980
the question so how did they execute the

769
00:37:16,980 --> 00:37:19,400
Shell Code without being got because

770
00:37:19,400 --> 00:37:22,160
Cobalt swag is detected right because

771
00:37:22,160 --> 00:37:26,579
yeah for sure yes it's all the last

772
00:37:26,579 --> 00:37:29,520
stages as a result they have a different

773
00:37:29,520 --> 00:37:31,859
branches of execution some of them

774
00:37:31,859 --> 00:37:35,280
include Cobalt some of them did not the

775
00:37:35,280 --> 00:37:37,920
last stages I suppose we are all the

776
00:37:37,920 --> 00:37:40,500
detected heuristically before but not

777
00:37:40,500 --> 00:37:42,780
all seems to maybe not all the host of

778
00:37:42,780 --> 00:37:44,520
the interest has the security product

779
00:37:44,520 --> 00:37:47,760
installed also we detected it through so

780
00:37:47,760 --> 00:37:50,220
the last stages in memory but to make

781
00:37:50,220 --> 00:37:52,680
all these steps back to the very initial

782
00:37:52,680 --> 00:37:55,320
infection or not of the models were

783
00:37:55,320 --> 00:37:57,599
detected just because some of them do

784
00:37:57,599 --> 00:38:00,300
nothing wrong actually right launcher do

785
00:38:00,300 --> 00:38:02,359
nothing wrong just to launch something

786
00:38:02,359 --> 00:38:05,520
so if I get a question right so I hope I

787
00:38:05,520 --> 00:38:06,720
answered

788
00:38:06,720 --> 00:38:09,540
yeah um you uh if I go understand this

789
00:38:09,540 --> 00:38:11,339
correctly you mean that the last age was

790
00:38:11,339 --> 00:38:13,619
detected but the initial stages were not

791
00:38:13,619 --> 00:38:16,680
detected uh like based on heuristics I

792
00:38:16,680 --> 00:38:19,440
guess you detected that how sorry how we

793
00:38:19,440 --> 00:38:21,060
combine it all together all these

794
00:38:21,060 --> 00:38:23,160
techniques you see we are used using

795
00:38:23,160 --> 00:38:24,839
Telemetry to see if it's all always

796
00:38:24,839 --> 00:38:28,578
connected to each other

797
00:38:29,460 --> 00:38:31,280
foreign

798
00:38:31,280 --> 00:38:33,780
are they using any shell code generators

799
00:38:33,780 --> 00:38:36,420
like donut or something or are they

800
00:38:36,420 --> 00:38:37,859
using custom

801
00:38:37,859 --> 00:38:40,500
shell code generators

802
00:38:40,500 --> 00:38:43,140
sorry once again about the shell code

803
00:38:43,140 --> 00:38:44,579
generators are they using shell code

804
00:38:44,579 --> 00:38:46,440
generators like donut

805
00:38:46,440 --> 00:38:49,680
or um like Shell Code reflective dll

806
00:38:49,680 --> 00:38:52,220
injection like srdi the project

807
00:38:52,220 --> 00:38:55,920
was just the AL auxiliary part which uh

808
00:38:55,920 --> 00:39:00,839
parsed another deliberate data uh to my

809
00:39:00,839 --> 00:39:03,119
intermittal parset my patent to memory

810
00:39:03,119 --> 00:39:06,420
and the ram corresponding function using

811
00:39:06,420 --> 00:39:08,760
the hash of this function in this case

812
00:39:08,760 --> 00:39:11,700
with name a lot with two arguments JF

813
00:39:11,700 --> 00:39:14,940
and four uh I hope sometimes we would

814
00:39:14,940 --> 00:39:17,220
get the next stages for which your

815
00:39:17,220 --> 00:39:19,320
supplements would be meaningful but in

816
00:39:19,320 --> 00:39:21,540
this case it just skipped okay different

817
00:39:21,540 --> 00:39:23,820
length of the day so it's auxiliary

818
00:39:23,820 --> 00:39:26,099
auxiliary as you know to my experience

819
00:39:26,099 --> 00:39:29,280
uh shell codes rarely executes the final

820
00:39:29,280 --> 00:39:31,980
trust right it's could decrypt something

821
00:39:31,980 --> 00:39:35,400
find something inject something it's no

822
00:39:35,400 --> 00:39:38,520
reason to build huge functionality of

823
00:39:38,520 --> 00:39:40,920
light Stager in the form of Shell Code I

824
00:39:40,920 --> 00:39:43,740
supports mostly it would be injected PE

825
00:39:43,740 --> 00:39:46,220
anyway

826
00:39:46,260 --> 00:39:48,180
thank you thanks thanks for the

827
00:39:48,180 --> 00:39:50,359
questions

828
00:39:53,520 --> 00:39:57,140
more questions good good

829
00:39:57,180 --> 00:39:59,640
moral of curiosity you said that they

830
00:39:59,640 --> 00:40:02,700
were digitally signed uh payload so who

831
00:40:02,700 --> 00:40:04,500
was the root sign up like where did they

832
00:40:04,500 --> 00:40:06,140
get this

833
00:40:06,140 --> 00:40:08,579
have to check but it was something

834
00:40:08,579 --> 00:40:10,619
normal like a Commodore some someone

835
00:40:10,619 --> 00:40:13,380
normal which I know the name but I sorry

836
00:40:13,380 --> 00:40:16,560
don't have it in my mind here okay and

837
00:40:16,560 --> 00:40:17,940
the signer did not have information

838
00:40:17,940 --> 00:40:20,220
about the organization that requested

839
00:40:20,220 --> 00:40:22,980
between the Citrus but it was just uh it

840
00:40:22,980 --> 00:40:25,320
was on a slide that supports so some

841
00:40:25,320 --> 00:40:27,720
name I never heard before like I don't

842
00:40:27,720 --> 00:40:30,359
know just security whatever and this is

843
00:40:30,359 --> 00:40:34,380
made sorry my idea here using this

844
00:40:34,380 --> 00:40:37,920
certificate or cereal I wasn't able to

845
00:40:37,920 --> 00:40:41,099
find any legit files so I suppose the

846
00:40:41,099 --> 00:40:42,780
name of the organization is not that

847
00:40:42,780 --> 00:40:45,780
crucial if you Google it yeah nothing ah

848
00:40:45,780 --> 00:40:47,700
it was a fast invest first investment in

849
00:40:47,700 --> 00:40:49,920
this case of this campaign so some fast

850
00:40:49,920 --> 00:40:52,920
invest exist but I'm not sure it's

851
00:40:52,920 --> 00:40:55,920
related because the region is a two

852
00:40:55,920 --> 00:40:58,920
different so luggage of the campaign and

853
00:40:58,920 --> 00:41:01,859
this fast invest I could Google it's not

854
00:41:01,859 --> 00:41:03,599
related at all because of the very

855
00:41:03,599 --> 00:41:06,780
different regions but I suppose the main

856
00:41:06,780 --> 00:41:09,240
part of certificate which you could use

857
00:41:09,240 --> 00:41:10,800
it's not the name of the organization

858
00:41:10,800 --> 00:41:13,560
but the unique serial and using unique

859
00:41:13,560 --> 00:41:16,680
serial I didn't observe any alleged

860
00:41:16,680 --> 00:41:19,200
application actually I suppose they just

861
00:41:19,200 --> 00:41:21,180
bought provide to the certificate

862
00:41:21,180 --> 00:41:23,640
Authority maybe with fake name get the

863
00:41:23,640 --> 00:41:26,460
certificate sign or till the certificate

864
00:41:26,460 --> 00:41:28,500
would be blacklisted I see the technique

865
00:41:28,500 --> 00:41:30,240
like with my understanding of the

866
00:41:30,240 --> 00:41:32,220
technique the part I found interesting

867
00:41:32,220 --> 00:41:34,680
is that for files they got this

868
00:41:34,680 --> 00:41:37,500
certificate for signing but for C2

869
00:41:37,500 --> 00:41:39,839
communication it was still on HTTP not

870
00:41:39,839 --> 00:41:41,820
using TLS with let's say it was about

871
00:41:41,820 --> 00:41:45,300
the files yes it's not about the uh not

872
00:41:45,300 --> 00:41:47,280
about the server not speaking not about

873
00:41:47,280 --> 00:41:50,280
SSL about the file signed by digital I

874
00:41:50,280 --> 00:41:52,140
got that too yeah so anyway thank you

875
00:41:52,140 --> 00:41:55,160
thanks thanks

876
00:41:55,339 --> 00:41:56,940
thank you

877
00:41:56,940 --> 00:41:59,040
actually in several campaigns we

878
00:41:59,040 --> 00:42:00,660
observed something because sometimes at

879
00:42:00,660 --> 00:42:03,359
Legend we just let no the vendor seems

880
00:42:03,359 --> 00:42:04,800
like the secretary gets compromised

881
00:42:04,800 --> 00:42:08,540
please revoke it so it happens

882
00:42:08,579 --> 00:42:10,740
so it seems like such a software

883
00:42:10,740 --> 00:42:13,320
complaints as a Target could be the

884
00:42:13,320 --> 00:42:15,900
Target because as the owners of some

885
00:42:15,900 --> 00:42:19,220
whitelisted certificates

886
00:42:20,180 --> 00:42:23,339
seems like questions are over I'm here

887
00:42:23,339 --> 00:42:26,579
not running anywhere please ping me out

888
00:42:26,579 --> 00:42:29,170
of the stage thanks many thanks

889
00:42:29,170 --> 00:42:33,590
[Applause]

