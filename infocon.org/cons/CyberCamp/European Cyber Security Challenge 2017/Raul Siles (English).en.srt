1
00:00:11,450 --> 00:00:16,730
we continue because xn terms the next

2
00:00:14,630 --> 00:00:19,340
conference will be given by a person who

3
00:00:16,730 --> 00:00:20,960
for more than 15 years has applied his

4
00:00:19,340 --> 00:00:23,230
experience in performing advanced

5
00:00:20,960 --> 00:00:26,270
security services and has designed

6
00:00:23,230 --> 00:00:28,130
offensive and defensive solutions for

7
00:00:26,270 --> 00:00:29,930
large companies and organizations around

8
00:00:28,130 --> 00:00:32,269
the world he is one of the few

9
00:00:29,930 --> 00:00:35,360
professionals that has obtained the GX

10
00:00:32,270 --> 00:00:38,210
security expert certification and I

11
00:00:35,360 --> 00:00:41,660
think he's going to talk about something

12
00:00:38,210 --> 00:00:44,949
that we use every day 24 hours I use 24

13
00:00:41,660 --> 00:00:47,779
hours what's up the end-to-end

14
00:00:44,949 --> 00:00:49,940
encryption encryption the end-to-end

15
00:00:47,780 --> 00:00:51,920
encryption of what's up it's one of the

16
00:00:49,940 --> 00:00:54,440
themes of the things it's going to talk

17
00:00:51,920 --> 00:01:02,329
about so give a big applause to Raoul

18
00:00:54,440 --> 00:01:05,630
CLS thank you you wanna listen to you

19
00:01:02,329 --> 00:01:07,550
okay so welcome everyone to Spain for

20
00:01:05,630 --> 00:01:10,940
those of you that are coming from from

21
00:01:07,550 --> 00:01:13,280
abroad so as you have seen we are going

22
00:01:10,940 --> 00:01:15,408
to talk about what's up and into an

23
00:01:13,280 --> 00:01:17,360
encryption if you're here because you

24
00:01:15,409 --> 00:01:20,360
want to know how to hack what's up with

25
00:01:17,360 --> 00:01:22,460
a single big red button probably you

26
00:01:20,360 --> 00:01:24,590
will it's better for you to leave the

27
00:01:22,460 --> 00:01:26,750
room if you want to be here because you

28
00:01:24,590 --> 00:01:29,299
want to learn something do you want to

29
00:01:26,750 --> 00:01:31,790
know where the encryption is going on in

30
00:01:29,299 --> 00:01:37,549
the industry definitely stay stay with

31
00:01:31,790 --> 00:01:40,610
us so because we have limited time like

32
00:01:37,549 --> 00:01:42,979
45 60 minutes you have an extended

33
00:01:40,610 --> 00:01:45,590
version of this presentation available

34
00:01:42,979 --> 00:01:48,380
on the Dynojet website so you go to dyno

35
00:01:45,590 --> 00:01:51,259
sec comm you go to the lab and the first

36
00:01:48,380 --> 00:01:53,210
publication there it's available for you

37
00:01:51,259 --> 00:01:55,159
to go deeper into the different topics

38
00:01:53,210 --> 00:01:59,240
we are going to cover so basically we

39
00:01:55,159 --> 00:02:01,850
are going to start with focusing on on

40
00:01:59,240 --> 00:02:05,780
some very brief introduction about

41
00:02:01,850 --> 00:02:07,429
Krypton and some crypto elements that

42
00:02:05,780 --> 00:02:09,590
are being used in the what's happened to

43
00:02:07,430 --> 00:02:12,020
an encryption protocol and then we're

44
00:02:09,590 --> 00:02:14,330
going to go deeper into them covering

45
00:02:12,020 --> 00:02:16,430
the main elements that are providing the

46
00:02:14,330 --> 00:02:18,560
capabilities we have today and then if

47
00:02:16,430 --> 00:02:20,840
we have time at the end we will talk

48
00:02:18,560 --> 00:02:22,260
about this back durability that was

49
00:02:20,840 --> 00:02:25,680
announced early

50
00:02:22,260 --> 00:02:28,950
this year and then some conclusions and

51
00:02:25,680 --> 00:02:31,870
plenty of references for you to go

52
00:02:28,950 --> 00:02:35,920
in-depth in this kind of topics so first

53
00:02:31,870 --> 00:02:39,160
of all if we talk about instant

54
00:02:35,920 --> 00:02:41,829
messaging privacy what is the face that

55
00:02:39,160 --> 00:02:43,990
come to your mind when when we talk

56
00:02:41,830 --> 00:02:49,810
about these topics who was the person

57
00:02:43,990 --> 00:02:55,840
that probably a widespread privacy for

58
00:02:49,810 --> 00:03:03,600
the end users worldwide anyone that you

59
00:02:55,840 --> 00:03:03,600
clearly identify for that are you there

60
00:03:05,070 --> 00:03:17,170
someone want to try probably what

61
00:03:11,620 --> 00:03:19,420
Snowden right making really people aware

62
00:03:17,170 --> 00:03:23,500
of the fact that we need to protect our

63
00:03:19,420 --> 00:03:27,730
communications probably okay okay in any

64
00:03:23,500 --> 00:03:29,350
crypto crypto topic we need to talk

65
00:03:27,730 --> 00:03:29,950
about Allison Bob they are trying to

66
00:03:29,350 --> 00:03:32,170
communicate

67
00:03:29,950 --> 00:03:34,600
it seems terribly a little bit worried

68
00:03:32,170 --> 00:03:37,809
nowadays because of the quantum crypto

69
00:03:34,600 --> 00:03:40,570
okay upcoming not capabilities we are

70
00:03:37,810 --> 00:03:42,310
going to have but still potentially they

71
00:03:40,570 --> 00:03:46,570
can protect their communications so

72
00:03:42,310 --> 00:03:50,260
let's go in-depth okay what's a possible

73
00:03:46,570 --> 00:03:53,310
from a very simple crypto mechanisms a

74
00:03:50,260 --> 00:03:56,320
few years ago that could be easily

75
00:03:53,310 --> 00:03:59,050
bypassed to what we have today which is

76
00:03:56,320 --> 00:04:01,600
a really complex implementation and

77
00:03:59,050 --> 00:04:03,480
environment okay as you probably know

78
00:04:01,600 --> 00:04:06,640
there are more than 1 billion users

79
00:04:03,480 --> 00:04:08,649
active users okay so we are going to go

80
00:04:06,640 --> 00:04:11,350
in-depth into how the encryption works

81
00:04:08,650 --> 00:04:14,560
its call into an encryption because both

82
00:04:11,350 --> 00:04:16,540
ends okay okay both users are going to

83
00:04:14,560 --> 00:04:18,700
encrypt the communications no matter who

84
00:04:16,540 --> 00:04:21,609
is in the middle there was observers

85
00:04:18,700 --> 00:04:23,890
three like there agencies or any other

86
00:04:21,608 --> 00:04:27,370
elements that could be interested on

87
00:04:23,890 --> 00:04:29,320
their messages okay it's going to use

88
00:04:27,370 --> 00:04:33,019
something called noise pipes it's a new

89
00:04:29,320 --> 00:04:35,808
protocol that will it's replacing HTTP

90
00:04:33,019 --> 00:04:37,249
in english' and it's important for you

91
00:04:35,809 --> 00:04:39,649
to know notice that end-to-end

92
00:04:37,249 --> 00:04:43,369
encryption is not fixing or solving all

93
00:04:39,649 --> 00:04:45,789
the security threats in Gaza so I still

94
00:04:43,369 --> 00:04:48,559
the worse observers can get metadata

95
00:04:45,789 --> 00:04:51,558
they can obtain information about who is

96
00:04:48,559 --> 00:04:53,360
communicating to with whom and how

97
00:04:51,559 --> 00:04:55,699
frequently they are doing that what is

98
00:04:53,360 --> 00:04:56,689
the size of the data they are a-changin

99
00:04:55,699 --> 00:05:02,019
so on and so forth

100
00:04:56,689 --> 00:05:05,869
and the registration process is still

101
00:05:02,019 --> 00:05:07,639
let's say not cover but by this kind of

102
00:05:05,869 --> 00:05:08,959
encryption as you know do you need to

103
00:05:07,639 --> 00:05:11,059
provide a hard phone number

104
00:05:08,959 --> 00:05:13,669
so that you receive an SMS message so

105
00:05:11,059 --> 00:05:16,189
that you can identify yourself and your

106
00:05:13,669 --> 00:05:18,799
number that's the the idea okay

107
00:05:16,189 --> 00:05:21,139
so let's jump into the main protocol the

108
00:05:18,800 --> 00:05:23,300
main protocol is call acts a lot like a

109
00:05:21,139 --> 00:05:26,449
very specific kind of animal that

110
00:05:23,300 --> 00:05:28,459
typically lives in Mexico and or the

111
00:05:26,449 --> 00:05:31,779
signal protocol and basically is because

112
00:05:28,459 --> 00:05:35,209
these animals are capable of out

113
00:05:31,779 --> 00:05:36,529
self-repairing parts of their body so

114
00:05:35,209 --> 00:05:39,289
that's the idea of the protocol the

115
00:05:36,529 --> 00:05:42,860
protocol pretends to be able to self

116
00:05:39,289 --> 00:05:45,110
contain or self recover from a specific

117
00:05:42,860 --> 00:05:46,759
British security breaches affecting the

118
00:05:45,110 --> 00:05:49,939
different keys we are using that's the

119
00:05:46,759 --> 00:05:52,279
the overall idea the reason why we are

120
00:05:49,939 --> 00:05:54,739
here or why I'm explaining that is

121
00:05:52,279 --> 00:05:57,169
because probably you know later last

122
00:05:54,739 --> 00:05:59,808
year in March was up implemented that

123
00:05:57,169 --> 00:06:03,109
but there are lots of other messaging

124
00:05:59,809 --> 00:06:06,439
solutions that are making use of signal

125
00:06:03,110 --> 00:06:08,599
or variants of signal so it's something

126
00:06:06,439 --> 00:06:11,269
that it's important for you because it's

127
00:06:08,599 --> 00:06:13,969
one of the reference crypto protocols

128
00:06:11,269 --> 00:06:15,649
that are becoming very very common in

129
00:06:13,969 --> 00:06:18,079
our industry so probably you are going

130
00:06:15,649 --> 00:06:20,269
to see that in other solutions in the

131
00:06:18,079 --> 00:06:21,979
future too so keep that in mind these

132
00:06:20,269 --> 00:06:23,899
are the two guys that are behind the

133
00:06:21,979 --> 00:06:26,719
signal protocol okay so pain with

134
00:06:23,899 --> 00:06:28,999
persistence is moxie and treble or ket

135
00:06:26,719 --> 00:06:31,399
they design and implement the protocol

136
00:06:28,999 --> 00:06:34,009
and they help us have in fact to do that

137
00:06:31,399 --> 00:06:36,469
or Facebook nowadays so let's start with

138
00:06:34,009 --> 00:06:38,269
a very brief free to introduction for

139
00:06:36,469 --> 00:06:40,489
the main topics topics we need to

140
00:06:38,269 --> 00:06:43,849
understand before we go deeper into the

141
00:06:40,489 --> 00:06:46,068
protocol itself so one of the main

142
00:06:43,849 --> 00:06:48,558
protocols or filters we are going to use

143
00:06:46,069 --> 00:06:51,199
this difficult man difficult - an old a

144
00:06:48,559 --> 00:06:54,529
chains protocol that basically tries to

145
00:06:51,199 --> 00:06:59,119
generate a secret key between two

146
00:06:54,529 --> 00:07:00,709
parties assuming that the channel they

147
00:06:59,119 --> 00:07:03,319
are communicating with is insecure

148
00:07:00,709 --> 00:07:05,959
that's the overall idea they're going to

149
00:07:03,319 --> 00:07:07,759
use long prime line numbers for that

150
00:07:05,959 --> 00:07:11,740
they're going to use as pronunciation

151
00:07:07,759 --> 00:07:15,319
and the fact that the inverse

152
00:07:11,740 --> 00:07:19,909
mathematical formula ok would be the de

153
00:07:15,319 --> 00:07:22,129
logarithm ok it's it's difficult to

154
00:07:19,909 --> 00:07:24,409
solve let's say computationally

155
00:07:22,129 --> 00:07:27,800
expensive to solve ok nowadays that's

156
00:07:24,409 --> 00:07:29,599
the overall idea keep in mind that the

157
00:07:27,800 --> 00:07:31,099
still defeat almond is vulnerable to man

158
00:07:29,599 --> 00:07:32,839
in the middle attacks do you need to be

159
00:07:31,099 --> 00:07:34,490
sure you're talking with the part that

160
00:07:32,839 --> 00:07:36,949
you think you are talking to that's

161
00:07:34,490 --> 00:07:39,830
that's a key point so this is how the

162
00:07:36,949 --> 00:07:43,399
fisherman works it's I mean keep keep

163
00:07:39,830 --> 00:07:45,889
the general ideas ok just that basically

164
00:07:43,399 --> 00:07:47,899
we have Alice and Bob and what they are

165
00:07:45,889 --> 00:07:50,180
doing is they are going to agreed on a

166
00:07:47,899 --> 00:07:53,029
specific mathematical elements there are

167
00:07:50,180 --> 00:07:55,519
such as prime numbers and Alice is going

168
00:07:53,029 --> 00:07:58,550
to generate a secret like a private key

169
00:07:55,519 --> 00:08:02,869
and Bob is going to do the same and then

170
00:07:58,550 --> 00:08:05,629
apply envy difficult and mathematical

171
00:08:02,869 --> 00:08:08,689
formula alice is going to derive as a

172
00:08:05,629 --> 00:08:10,639
public key something that is public and

173
00:08:08,689 --> 00:08:12,589
it's going to serve that with Bob and

174
00:08:10,639 --> 00:08:15,019
Bob is going to do the same is going to

175
00:08:12,589 --> 00:08:16,789
generate a public portion of the

176
00:08:15,019 --> 00:08:19,249
associated key and it's going to share

177
00:08:16,789 --> 00:08:22,248
that with Alice basically due to the

178
00:08:19,249 --> 00:08:28,189
mathematical properties there are V

179
00:08:22,249 --> 00:08:31,399
which is alpha ^ lowercase V okay what

180
00:08:28,189 --> 00:08:33,500
Alice can do is take that value and do

181
00:08:31,399 --> 00:08:35,240
that to the power of a so basically it

182
00:08:33,500 --> 00:08:38,149
has alpha to the power of B to the power

183
00:08:35,240 --> 00:08:41,299
of Phi and Bob can do the same can take

184
00:08:38,149 --> 00:08:44,269
a and do a to the power of B as you can

185
00:08:41,299 --> 00:08:47,060
see on both sides because this value is

186
00:08:44,269 --> 00:08:49,430
the same as alpha B multiplied by a and

187
00:08:47,060 --> 00:08:52,130
this is a multiplied by B they are the

188
00:08:49,430 --> 00:08:54,319
same value so basically what they have

189
00:08:52,130 --> 00:08:55,760
done is they have a change public

190
00:08:54,319 --> 00:08:58,430
elements

191
00:08:55,760 --> 00:09:02,270
the tongue are based on some secret or

192
00:08:58,430 --> 00:09:05,120
private elements but as a result they

193
00:09:02,270 --> 00:09:07,640
can have a common single-serve value

194
00:09:05,120 --> 00:09:14,450
which is a sir secret that's the overall

195
00:09:07,640 --> 00:09:16,460
idea this difficult change can be used

196
00:09:14,450 --> 00:09:17,930
in different scenarios so one that is

197
00:09:16,460 --> 00:09:19,820
very well known is difficult and

198
00:09:17,930 --> 00:09:23,510
ephemeral basically we are going to use

199
00:09:19,820 --> 00:09:25,610
temporary keys instead of long-term keys

200
00:09:23,510 --> 00:09:27,950
okay that's we're going to combine

201
00:09:25,610 --> 00:09:29,360
different kinds of keys in the signal

202
00:09:27,950 --> 00:09:32,000
protocol and then we have an

203
00:09:29,360 --> 00:09:34,370
implementation based on elliptic curves

204
00:09:32,000 --> 00:09:36,470
which is another mathematical way of

205
00:09:34,370 --> 00:09:37,540
being able to implement the difficult

206
00:09:36,470 --> 00:09:41,270
man protocol okay

207
00:09:37,540 --> 00:09:42,680
regarding a elliptic curves basically

208
00:09:41,270 --> 00:09:48,290
there are two that are well known

209
00:09:42,680 --> 00:09:50,150
nowadays just focused on the x.25 519

210
00:09:48,290 --> 00:09:53,780
because it's the one that is going to be

211
00:09:50,150 --> 00:09:57,110
used by signal so keep that in mind okay

212
00:09:53,780 --> 00:09:59,329
so this specific elite elliptic curve

213
00:09:57,110 --> 00:10:03,530
functions were created by Daniel

214
00:09:59,330 --> 00:10:06,440
bursting while ago okay basically keep

215
00:10:03,530 --> 00:10:09,140
in mind to two main properties one of

216
00:10:06,440 --> 00:10:12,260
them is they are working with 32 byte

217
00:10:09,140 --> 00:10:15,110
values so the secret is 32 bytes the

218
00:10:12,260 --> 00:10:18,560
public is 32 bytes oh no so forth and

219
00:10:15,110 --> 00:10:21,530
it's it can be implemented and use with

220
00:10:18,560 --> 00:10:24,500
a very high speed nowadays so basically

221
00:10:21,530 --> 00:10:27,410
the fact that your mobile phone is able

222
00:10:24,500 --> 00:10:29,660
to use wassup and it's going to encrypt

223
00:10:27,410 --> 00:10:32,390
and decrypt every message with a

224
00:10:29,660 --> 00:10:35,890
different key so we have a different key

225
00:10:32,390 --> 00:10:37,850
per message is because it can make the

226
00:10:35,890 --> 00:10:41,020
computations and the calculations

227
00:10:37,850 --> 00:10:44,210
associated to that to that specific

228
00:10:41,020 --> 00:10:46,790
elliptic curve very quickly so there is

229
00:10:44,210 --> 00:10:48,830
no performance impact on that so that's

230
00:10:46,790 --> 00:10:50,930
the the overall idea how does it work

231
00:10:48,830 --> 00:10:51,500
the same thing we saw before so Alice

232
00:10:50,930 --> 00:10:54,800
and Bob

233
00:10:51,500 --> 00:10:57,920
they both generate a secret okay a

234
00:10:54,800 --> 00:11:00,079
private key they calculate a public key

235
00:10:57,920 --> 00:11:02,150
based on that private key and the same

236
00:11:00,080 --> 00:11:05,450
principle applies so basically if I

237
00:11:02,150 --> 00:11:08,120
provide you my public and you calculate

238
00:11:05,450 --> 00:11:09,300
a formula with your private and my

239
00:11:08,120 --> 00:11:12,060
public and

240
00:11:09,300 --> 00:11:14,010
the same we end up on the same server

241
00:11:12,060 --> 00:11:17,130
secret so we have been able to share a

242
00:11:14,010 --> 00:11:21,959
secret over an insecure Channel that's

243
00:11:17,130 --> 00:11:25,050
the the oral idea okay so with that main

244
00:11:21,959 --> 00:11:27,829
trick two concepts or theory we can move

245
00:11:25,050 --> 00:11:30,540
forward into the protocol itself so

246
00:11:27,829 --> 00:11:32,430
first of all it's important for you to

247
00:11:30,540 --> 00:11:35,490
keep in mind that the goal of the

248
00:11:32,430 --> 00:11:37,829
protocol is to accomplish three

249
00:11:35,490 --> 00:11:42,390
different crypto properties the first of

250
00:11:37,829 --> 00:11:44,880
them is perfect or forward secrecy so

251
00:11:42,390 --> 00:11:48,240
basically it's the fact that if someone

252
00:11:44,880 --> 00:11:51,810
compromises my kiss now he's not going

253
00:11:48,240 --> 00:11:54,450
to be able to get previous case all kids

254
00:11:51,810 --> 00:11:57,479
we used to encrypt traffic and data in

255
00:11:54,450 --> 00:12:00,570
the bust that's one idea the second idea

256
00:11:57,480 --> 00:12:02,910
is something we call place plausible

257
00:12:00,570 --> 00:12:05,430
deniability of or deny rolling

258
00:12:02,910 --> 00:12:09,240
encryption is basically the fact that if

259
00:12:05,430 --> 00:12:11,339
the two users try to tell to a third

260
00:12:09,240 --> 00:12:13,800
party that this message was sent by the

261
00:12:11,339 --> 00:12:16,410
other party they cannot do that they

262
00:12:13,800 --> 00:12:19,109
know the message came from that party

263
00:12:16,410 --> 00:12:21,360
but they cannot demonstrate to someone

264
00:12:19,110 --> 00:12:23,250
else that the message came from that

265
00:12:21,360 --> 00:12:25,440
party the idea to understand that is

266
00:12:23,250 --> 00:12:28,050
because we are using the same secret I

267
00:12:25,440 --> 00:12:29,910
can encrypt messages as you and I can

268
00:12:28,050 --> 00:12:32,010
tell a third party that this message was

269
00:12:29,910 --> 00:12:35,010
sent by you but it's not because it

270
00:12:32,010 --> 00:12:37,200
could be sent by me because we both know

271
00:12:35,010 --> 00:12:39,899
the key so that's the idea behind that

272
00:12:37,200 --> 00:12:42,930
and the third one is something we call

273
00:12:39,899 --> 00:12:45,750
future secrecy it's like the opposite of

274
00:12:42,930 --> 00:12:48,839
forward secrecy the idea that if someone

275
00:12:45,750 --> 00:12:52,110
breaks the keys now ok we are going to

276
00:12:48,839 --> 00:12:54,570
be able to generate future keys without

277
00:12:52,110 --> 00:12:57,089
those keys being compromised because of

278
00:12:54,570 --> 00:12:59,490
the current bridge ok that's that's the

279
00:12:57,089 --> 00:13:02,730
overall idea so we want to have security

280
00:12:59,490 --> 00:13:04,829
in the past in the future no matter if

281
00:13:02,730 --> 00:13:08,070
we have bridges so to do that obviously

282
00:13:04,829 --> 00:13:10,199
we need to to implement multiple

283
00:13:08,070 --> 00:13:12,209
protocols or components together to be

284
00:13:10,199 --> 00:13:13,500
able to accomplish that so let me start

285
00:13:12,209 --> 00:13:17,040
with the first one the first one is

286
00:13:13,500 --> 00:13:19,470
called ok the triple diffie-hellman okay

287
00:13:17,040 --> 00:13:21,810
standard triple difficult man that's the

288
00:13:19,470 --> 00:13:22,480
the idea ok all those you can see that

289
00:13:21,810 --> 00:13:25,000
it

290
00:13:22,480 --> 00:13:26,769
have up to four different steps but the

291
00:13:25,000 --> 00:13:28,540
fourth one is optional

292
00:13:26,769 --> 00:13:31,990
so this is why it's called triple

293
00:13:28,540 --> 00:13:34,000
difficult okay so let me explain you

294
00:13:31,990 --> 00:13:36,760
what what is trying to do is a key

295
00:13:34,000 --> 00:13:39,670
exchange protocol so Alice and Bob wants

296
00:13:36,760 --> 00:13:42,100
to want to exchange keys okay over an

297
00:13:39,670 --> 00:13:45,160
insecure Channel as we have mentioned

298
00:13:42,100 --> 00:13:47,560
before but they want to do that Cavan

299
00:13:45,160 --> 00:13:48,880
implies the three crypto properties we

300
00:13:47,560 --> 00:13:51,189
have seen before they are trying to

301
00:13:48,880 --> 00:13:54,610
accomplish that and not only that they

302
00:13:51,190 --> 00:13:56,709
want to generate a secret a secret that

303
00:13:54,610 --> 00:13:58,600
can be long life

304
00:13:56,709 --> 00:14:01,388
so basically when they establish a was

305
00:13:58,600 --> 00:14:02,079
obsession that session can remain there

306
00:14:01,389 --> 00:14:04,630
forever

307
00:14:02,079 --> 00:14:07,120
and you keep sending messages inside the

308
00:14:04,630 --> 00:14:11,529
same session forever between two users

309
00:14:07,120 --> 00:14:14,199
unless you replace your mobile phone or

310
00:14:11,529 --> 00:14:14,649
install the app but basically that's the

311
00:14:14,199 --> 00:14:17,439
idea

312
00:14:14,649 --> 00:14:20,350
okay that's important these are a

313
00:14:17,440 --> 00:14:23,440
synchronous sessions what does this mean

314
00:14:20,350 --> 00:14:25,630
it means if and I want to establish the

315
00:14:23,440 --> 00:14:29,920
session even if one of the parties is

316
00:14:25,630 --> 00:14:32,319
not online so Bob is offline but Alice

317
00:14:29,920 --> 00:14:35,769
wants to start the session and when Bob

318
00:14:32,319 --> 00:14:39,160
comes online later in the future he will

319
00:14:35,769 --> 00:14:42,250
be able to move forward and they arrive

320
00:14:39,160 --> 00:14:43,839
the same secret with Alice so that's

321
00:14:42,250 --> 00:14:45,970
something important because if not

322
00:14:43,839 --> 00:14:48,100
imagine do you need to always have

323
00:14:45,970 --> 00:14:50,649
another user online to be able to stop

324
00:14:48,100 --> 00:14:53,170
the initial session to be able to talk

325
00:14:50,649 --> 00:14:55,329
to - him or her through whatsapp and

326
00:14:53,170 --> 00:14:58,240
this is not something we want to do and

327
00:14:55,329 --> 00:15:00,040
and that's it okay so we are going to

328
00:14:58,240 --> 00:15:03,360
establish destr secret how does it work

329
00:15:00,040 --> 00:15:06,219
basically Bob needs to publish some

330
00:15:03,360 --> 00:15:08,500
information on there as observers the

331
00:15:06,220 --> 00:15:10,209
intermediate servers basically see a few

332
00:15:08,500 --> 00:15:13,480
keys that are going to be served with

333
00:15:10,209 --> 00:15:15,040
Alice in case Bobby's of line so Alice

334
00:15:13,480 --> 00:15:18,010
can retrieve that information

335
00:15:15,040 --> 00:15:20,529
so what alice is going to do when Alice

336
00:15:18,010 --> 00:15:22,540
wants to talk to Bob first it's going to

337
00:15:20,529 --> 00:15:24,639
go to the server retrieves what we call

338
00:15:22,540 --> 00:15:27,610
the key bundle a pretty bundle

339
00:15:24,639 --> 00:15:29,910
Bob skis public is obviously because

340
00:15:27,610 --> 00:15:32,040
they have been pushed to the server and

341
00:15:29,910 --> 00:15:35,140
potentially the server could be

342
00:15:32,040 --> 00:15:36,400
untrusted and then it's going to

343
00:15:35,140 --> 00:15:38,260
calculate the session key

344
00:15:36,400 --> 00:15:40,720
and it's going to send an initial

345
00:15:38,260 --> 00:15:42,850
message to Bob this initial message

346
00:15:40,720 --> 00:15:46,180
contains all the information required

347
00:15:42,850 --> 00:15:48,600
for Bob to do the same to retrieve the

348
00:15:46,180 --> 00:15:51,790
information public information keys

349
00:15:48,600 --> 00:15:53,860
information and clips from Ali's perform

350
00:15:51,790 --> 00:15:57,520
the same calculations and end up with

351
00:15:53,860 --> 00:15:59,620
the same search secret so now both share

352
00:15:57,520 --> 00:16:01,329
a secret and they can start encrypting

353
00:15:59,620 --> 00:16:04,810
and decrypting traffic based on that

354
00:16:01,330 --> 00:16:06,730
okay let's go to take a look at that so

355
00:16:04,810 --> 00:16:09,630
imagine we have Bob Alice and we have

356
00:16:06,730 --> 00:16:12,820
the servers in the middle bob has a

357
00:16:09,630 --> 00:16:16,360
identity key is a public long term

358
00:16:12,820 --> 00:16:20,350
private public and private keeper a long

359
00:16:16,360 --> 00:16:23,680
term key that is going to be used to

360
00:16:20,350 --> 00:16:25,390
identify Bob is unique to Bob okay so

361
00:16:23,680 --> 00:16:27,400
it's going to submit that to the servers

362
00:16:25,390 --> 00:16:30,339
Alice can retweet the key and start

363
00:16:27,400 --> 00:16:31,449
encrypting data to Bob so this is

364
00:16:30,339 --> 00:16:34,120
something we can do

365
00:16:31,450 --> 00:16:37,080
using public cryptography and it will

366
00:16:34,120 --> 00:16:40,959
work the main problem with that is that

367
00:16:37,080 --> 00:16:42,760
this remembered Japanese food okay there

368
00:16:40,959 --> 00:16:45,640
is a principle called tofu which is

369
00:16:42,760 --> 00:16:47,980
trust on first use that says difficult

370
00:16:45,640 --> 00:16:49,810
money seems is vulnerable to man in the

371
00:16:47,980 --> 00:16:52,510
middle attacks I need to be sure I'm

372
00:16:49,810 --> 00:16:55,000
talking to Bob and that that public key

373
00:16:52,510 --> 00:16:56,529
in blue we saw before belongs to Bob and

374
00:16:55,000 --> 00:16:58,660
not to someone else but that's a

375
00:16:56,529 --> 00:17:00,820
different topic that we need to

376
00:16:58,660 --> 00:17:03,430
accomplish in a different way okay in

377
00:17:00,820 --> 00:17:05,980
the case of wasup is made or is

378
00:17:03,430 --> 00:17:08,678
accomplished with the verification code

379
00:17:05,980 --> 00:17:10,900
in order to be able to know that this

380
00:17:08,679 --> 00:17:12,670
specific person has this key associated

381
00:17:10,900 --> 00:17:15,760
to to him or her

382
00:17:12,670 --> 00:17:18,429
okay so with with this first exchange we

383
00:17:15,760 --> 00:17:21,369
saw based on the public key is not

384
00:17:18,429 --> 00:17:24,069
enough because we can identify Bob okay

385
00:17:21,369 --> 00:17:27,790
but we don't have any forward secrecy at

386
00:17:24,069 --> 00:17:29,860
all okay any abrete for any traffic we

387
00:17:27,790 --> 00:17:32,620
encrypt with that specific key can be

388
00:17:29,860 --> 00:17:36,040
decrypted at any time so we need to keep

389
00:17:32,620 --> 00:17:37,659
adding extra elements there so what Bob

390
00:17:36,040 --> 00:17:40,090
is going to do is going to generate a

391
00:17:37,660 --> 00:17:42,730
set of keys we call them Frankie's

392
00:17:40,090 --> 00:17:46,419
operate generated keys they are also

393
00:17:42,730 --> 00:17:48,550
called one time for generated case the

394
00:17:46,420 --> 00:17:49,750
reason is because they are only used

395
00:17:48,550 --> 00:17:51,730
once so

396
00:17:49,750 --> 00:17:54,010
when someone was to establish decision

397
00:17:51,730 --> 00:17:56,590
with me is going to consume one of those

398
00:17:54,010 --> 00:17:58,410
keys the key will be discarded and won't

399
00:17:56,590 --> 00:18:01,300
be reused because do you know that

400
00:17:58,410 --> 00:18:03,430
reusability of kissing crypto is not a

401
00:18:01,300 --> 00:18:06,100
very good idea okay it helps you to

402
00:18:03,430 --> 00:18:08,920
break things so it's going to upload the

403
00:18:06,100 --> 00:18:10,780
keys to the server Alice wants to talk

404
00:18:08,920 --> 00:18:12,670
to Bob so it's going to retrieve that

405
00:18:10,780 --> 00:18:14,620
key and it's going to be able to

406
00:18:12,670 --> 00:18:16,630
generate a message okay remember this

407
00:18:14,620 --> 00:18:19,060
key can be removed because we don't need

408
00:18:16,630 --> 00:18:23,290
it anymore it has been used by Alice so

409
00:18:19,060 --> 00:18:25,240
not by any other user and then Alice is

410
00:18:23,290 --> 00:18:29,020
able to talk to Bob using the public key

411
00:18:25,240 --> 00:18:31,810
and a sorry a public key long-term and

412
00:18:29,020 --> 00:18:34,570
the one-time key okay and we'll be able

413
00:18:31,810 --> 00:18:36,790
to talk to Bob remember once Bob

414
00:18:34,570 --> 00:18:38,889
receives that communication it can

415
00:18:36,790 --> 00:18:41,560
remove that from from memory from the

416
00:18:38,890 --> 00:18:43,960
app so we don't have issues if someone

417
00:18:41,560 --> 00:18:47,050
compromises that key the idea of that is

418
00:18:43,960 --> 00:18:49,150
that we get forward secrecy we protect

419
00:18:47,050 --> 00:18:50,980
the case that we have used so that is

420
00:18:49,150 --> 00:18:53,440
someone compromises the keys now won't

421
00:18:50,980 --> 00:18:55,480
be able to okay attack previous

422
00:18:53,440 --> 00:18:59,740
communications is still in that a

423
00:18:55,480 --> 00:19:02,830
scenario someone could impersonate okay

424
00:18:59,740 --> 00:19:05,170
Bob and say this is a one-time key from

425
00:19:02,830 --> 00:19:05,980
Bob but it's not so we need something

426
00:19:05,170 --> 00:19:08,590
else too

427
00:19:05,980 --> 00:19:11,230
so we have the public key and now we

428
00:19:08,590 --> 00:19:13,990
have a new key that had been signed by

429
00:19:11,230 --> 00:19:17,830
Bob so all the Bob can sign that key

430
00:19:13,990 --> 00:19:22,360
with his own let's say pink private key

431
00:19:17,830 --> 00:19:24,760
here it has of the one-time regenerated

432
00:19:22,360 --> 00:19:28,449
case and it's going to upload all this

433
00:19:24,760 --> 00:19:31,300
Plus D wanting keys to the servers so

434
00:19:28,450 --> 00:19:35,230
now Alice can retrieve all those keys in

435
00:19:31,300 --> 00:19:37,240
order to be sure that it is Bob it's a

436
00:19:35,230 --> 00:19:38,200
key that has been signed by Bob so if

437
00:19:37,240 --> 00:19:41,590
it's him

438
00:19:38,200 --> 00:19:43,870
and a one-time key so that we ensure

439
00:19:41,590 --> 00:19:46,929
forward secrecy that's the overall idea

440
00:19:43,870 --> 00:19:49,929
this is what we call the pre key bundle

441
00:19:46,930 --> 00:19:51,730
the set of keys Alice requires to be

442
00:19:49,930 --> 00:19:53,350
able to start speaking to Bob okay

443
00:19:51,730 --> 00:19:55,390
that's the idea okay

444
00:19:53,350 --> 00:19:58,629
and with that is going to be able to

445
00:19:55,390 --> 00:20:02,200
perform this triple difficult manage

446
00:19:58,630 --> 00:20:03,860
change okay so basically we are at this

447
00:20:02,200 --> 00:20:05,540
point we are matching

448
00:20:03,860 --> 00:20:08,030
all the properties we were trying to

449
00:20:05,540 --> 00:20:10,610
accomplish that at that point so let me

450
00:20:08,030 --> 00:20:13,490
recap that we have the public key the

451
00:20:10,610 --> 00:20:15,620
identity of Bob we have a sign key okay

452
00:20:13,490 --> 00:20:19,280
from Bob so we know it's Bob because

453
00:20:15,620 --> 00:20:20,629
only he can sign that we are submitted

454
00:20:19,280 --> 00:20:22,820
that to the servers

455
00:20:20,630 --> 00:20:25,640
we have the one time case so that we

456
00:20:22,820 --> 00:20:29,149
don't reuse them okay one per user per

457
00:20:25,640 --> 00:20:31,820
session basically and this whole set of

458
00:20:29,150 --> 00:20:34,600
keys okay is retrieved by Alice this is

459
00:20:31,820 --> 00:20:38,720
the pretty bundle and now Alice needs

460
00:20:34,600 --> 00:20:42,260
something else her own keys so Alice

461
00:20:38,720 --> 00:20:46,130
also has an identity key that represents

462
00:20:42,260 --> 00:20:48,350
Alice okay and also an ephemeral key is

463
00:20:46,130 --> 00:20:50,660
a temporary key that we are going to use

464
00:20:48,350 --> 00:20:53,659
for this session that's the idea and

465
00:20:50,660 --> 00:20:56,720
with all these components now Alice its

466
00:20:53,660 --> 00:21:00,290
able to implement or sorry let's go

467
00:20:56,720 --> 00:21:02,720
there to perform the triple difficult

468
00:21:00,290 --> 00:21:05,870
it's going to use the identity key from

469
00:21:02,720 --> 00:21:08,419
Bob design Pro key from Bob and the

470
00:21:05,870 --> 00:21:11,629
one-time key from Bob it's going to use

471
00:21:08,419 --> 00:21:14,419
its own event ID key and the ephemeral

472
00:21:11,630 --> 00:21:18,049
temporary key and it's going to perform

473
00:21:14,419 --> 00:21:20,720
different difficult man a change or even

474
00:21:18,049 --> 00:21:22,970
for if we have keys still in the server

475
00:21:20,720 --> 00:21:25,790
that we can use in order to derive the

476
00:21:22,970 --> 00:21:28,940
sir secret so with that we are ensuring

477
00:21:25,790 --> 00:21:32,480
as we tell forward secrecy because we

478
00:21:28,940 --> 00:21:35,330
are using ephemeral temporary keys we

479
00:21:32,480 --> 00:21:38,960
can authenticate Alice by Bob we can

480
00:21:35,330 --> 00:21:42,530
authenticate Bob by Alice we can have

481
00:21:38,960 --> 00:21:44,780
forward secrecy partially okay and we

482
00:21:42,530 --> 00:21:46,340
can have perfect forward secrecy because

483
00:21:44,780 --> 00:21:48,020
these are keys that we are not going to

484
00:21:46,340 --> 00:21:50,750
reuse anymore and we are going to remove

485
00:21:48,020 --> 00:21:52,309
them as soon as possible okay so that's

486
00:21:50,750 --> 00:21:54,919
all these are the properties we are

487
00:21:52,309 --> 00:21:56,809
trying to accomplish so with that we

488
00:21:54,919 --> 00:21:59,150
have a search secret something that is

489
00:21:56,809 --> 00:22:01,428
sir between both in this case all the

490
00:21:59,150 --> 00:22:04,280
Alice has been able to obtain the search

491
00:22:01,429 --> 00:22:07,100
secret because remember we assumed Bob

492
00:22:04,280 --> 00:22:09,620
is offline has not been connected to the

493
00:22:07,100 --> 00:22:11,719
network during all this time okay that's

494
00:22:09,620 --> 00:22:13,729
the idea so we have mutual

495
00:22:11,720 --> 00:22:15,399
authentication with the identities and

496
00:22:13,730 --> 00:22:17,289
then we have

497
00:22:15,399 --> 00:22:19,119
worry about that for were secrecy

498
00:22:17,289 --> 00:22:26,049
between the F and ephemeral

499
00:22:19,119 --> 00:22:28,570
temporalities okay okay so in order to

500
00:22:26,049 --> 00:22:30,369
derive the sir secret we basically

501
00:22:28,570 --> 00:22:33,489
combine the output of all these

502
00:22:30,369 --> 00:22:36,699
different chains to be able to get a 32

503
00:22:33,489 --> 00:22:43,089
byte key as we mentioned before based on

504
00:22:36,700 --> 00:22:45,399
on the elliptic curve 25 519 standard

505
00:22:43,089 --> 00:22:48,969
okay that's the idea so the next

506
00:22:45,399 --> 00:22:51,820
question would be how can Bob obtain the

507
00:22:48,969 --> 00:22:55,929
same sir secret in order to do that

508
00:22:51,820 --> 00:22:57,939
Alice needs to send Bob what we call the

509
00:22:55,929 --> 00:23:01,749
initial message is a message that

510
00:22:57,940 --> 00:23:04,299
contains Alice's keys so that Bob camper

511
00:23:01,749 --> 00:23:06,519
from the same computation and basically

512
00:23:04,299 --> 00:23:11,099
that's the idea this initial message

513
00:23:06,519 --> 00:23:13,779
from Alice okay it's going to contain

514
00:23:11,099 --> 00:23:16,059
the identity key from Alice the

515
00:23:13,779 --> 00:23:19,450
ephemeral key from Alice and an

516
00:23:16,059 --> 00:23:22,119
identifier of the temporary key we use

517
00:23:19,450 --> 00:23:25,210
from the server belonging to Bob

518
00:23:22,119 --> 00:23:28,359
so with that Bob has all the pieces

519
00:23:25,210 --> 00:23:30,070
missing from his site basically it has

520
00:23:28,359 --> 00:23:31,809
the identity key from Alice the

521
00:23:30,070 --> 00:23:34,689
ephemeral it can identify its own

522
00:23:31,809 --> 00:23:38,320
one-time temperately and it can can

523
00:23:34,690 --> 00:23:41,229
calculate the same 3/8 there that's the

524
00:23:38,320 --> 00:23:44,320
idea okay and as a result it will get

525
00:23:41,229 --> 00:23:46,359
the same secret so now we have the same

526
00:23:44,320 --> 00:23:48,700
we had before a difficult manner change

527
00:23:46,359 --> 00:23:51,158
but a more much more complex difficult

528
00:23:48,700 --> 00:23:53,619
when it says trying to meet all the

529
00:23:51,159 --> 00:23:55,389
properties we mention initially okay

530
00:23:53,619 --> 00:23:57,099
that's that's it remember all the

531
00:23:55,389 --> 00:23:59,978
private keys can be removed from memory

532
00:23:57,099 --> 00:24:02,349
trying to provide forward secrecy and

533
00:23:59,979 --> 00:24:04,299
avoid these Keys being compromised and

534
00:24:02,349 --> 00:24:07,059
therefore someone being able to decrypt

535
00:24:04,299 --> 00:24:09,519
previous sessions okay so the protocol

536
00:24:07,059 --> 00:24:11,830
has been completed are you okay with

537
00:24:09,519 --> 00:24:13,349
that with this general overview of how

538
00:24:11,830 --> 00:24:16,119
the protocol works and all that

539
00:24:13,349 --> 00:24:18,580
basically that's the beginning just the

540
00:24:16,119 --> 00:24:22,689
beginning is the initial protocol we use

541
00:24:18,580 --> 00:24:25,199
to have a sir secret but now we need to

542
00:24:22,690 --> 00:24:27,729
do something else to be able to

543
00:24:25,200 --> 00:24:28,570
continuously generate messages between

544
00:24:27,729 --> 00:24:30,850
both power

545
00:24:28,570 --> 00:24:34,600
this and be able to encrypt and decrypt

546
00:24:30,850 --> 00:24:37,600
them with a specific unique keys per

547
00:24:34,600 --> 00:24:40,570
message so in order to do that we need

548
00:24:37,600 --> 00:24:42,759
something else we need a new protocol or

549
00:24:40,570 --> 00:24:45,309
algorithm that was cool

550
00:24:42,759 --> 00:24:48,700
double ratchet okay so what is the

551
00:24:45,309 --> 00:24:50,740
double ratchet algorithm let me try that

552
00:24:48,700 --> 00:24:52,360
so the double ratchet algorithm is

553
00:24:50,740 --> 00:24:54,820
basically what what are we trying to

554
00:24:52,360 --> 00:24:58,029
accomplish here we have a search secret

555
00:24:54,820 --> 00:25:00,279
and now we want to have or to be able to

556
00:24:58,029 --> 00:25:02,649
implement the crypto properties we saw

557
00:25:00,279 --> 00:25:06,039
before future secrecy forward secrecy

558
00:25:02,649 --> 00:25:08,469
and deniable encryption in a protocol

559
00:25:06,039 --> 00:25:12,009
where we encrypt every message with a

560
00:25:08,470 --> 00:25:14,950
different so we need to move forward or

561
00:25:12,009 --> 00:25:18,220
evolve the keys we have so that every

562
00:25:14,950 --> 00:25:21,100
time we derive or we generate new keys

563
00:25:18,220 --> 00:25:24,639
from previous keys and that way we can

564
00:25:21,100 --> 00:25:26,949
keep okay moving forward in the protocol

565
00:25:24,639 --> 00:25:29,709
and deriving new keys for new messages

566
00:25:26,950 --> 00:25:31,960
that's the the overall idea okay so

567
00:25:29,710 --> 00:25:34,419
imagine we don't have that imagine that

568
00:25:31,960 --> 00:25:36,279
we have this earth secret and we want to

569
00:25:34,419 --> 00:25:38,950
include a under grip of course we can do

570
00:25:36,279 --> 00:25:41,710
that they both have the same secret this

571
00:25:38,950 --> 00:25:43,539
is symmetric encryption they can encrypt

572
00:25:41,710 --> 00:25:45,309
something the other one will decrypt

573
00:25:43,539 --> 00:25:46,960
that with the same thing okay and it

574
00:25:45,309 --> 00:25:49,029
will work but we won't have the

575
00:25:46,960 --> 00:25:52,210
properties we are looking for so that's

576
00:25:49,029 --> 00:25:53,950
the the main drawback there so in order

577
00:25:52,210 --> 00:25:55,480
to have the properties we are going to

578
00:25:53,950 --> 00:25:58,330
have and this is why it's called double

579
00:25:55,480 --> 00:26:01,539
ratchet two ratchets two things that are

580
00:25:58,330 --> 00:26:03,490
evolving or moving forward over time one

581
00:26:01,539 --> 00:26:05,889
of them is a difficult man ratchet and

582
00:26:03,490 --> 00:26:08,620
this is going to provide future secrecy

583
00:26:05,889 --> 00:26:12,008
the other one is a symmetric is like a

584
00:26:08,620 --> 00:26:14,590
casino algorithm ratchet providing

585
00:26:12,009 --> 00:26:17,679
forward secrecy okay so let's take a

586
00:26:14,590 --> 00:26:20,559
look at them okay let's start with how

587
00:26:17,679 --> 00:26:24,159
it works in order to be able to work

588
00:26:20,559 --> 00:26:26,049
with both ratchets every time Bob or

589
00:26:24,159 --> 00:26:29,340
alice is sending a message to the other

590
00:26:26,049 --> 00:26:31,960
end is going to serve its current

591
00:26:29,340 --> 00:26:34,029
difficulty so the difficult monkeys are

592
00:26:31,960 --> 00:26:36,940
going to evolve they are going to change

593
00:26:34,029 --> 00:26:38,649
and the last one we have is the one we

594
00:26:36,940 --> 00:26:40,750
are going to send to the other party

595
00:26:38,649 --> 00:26:41,539
okay so that's the idea we will see that

596
00:26:40,750 --> 00:26:44,570
in ingress

597
00:26:41,539 --> 00:26:47,509
okay and then the goal is to get a

598
00:26:44,570 --> 00:26:50,299
different message key per message okay

599
00:26:47,509 --> 00:26:53,720
in red color so that's the the overall

600
00:26:50,299 --> 00:26:55,549
idea okay to be able to implement that

601
00:26:53,720 --> 00:26:59,179
we are going to use something called

602
00:26:55,549 --> 00:27:02,239
Saints okay some kind of data structure

603
00:26:59,179 --> 00:27:04,460
that is going to be able to allow us to

604
00:27:02,239 --> 00:27:08,179
manage different keys and we need three

605
00:27:04,460 --> 00:27:11,059
chains the root chain used for difficult

606
00:27:08,179 --> 00:27:13,940
men and all that and then ascending

607
00:27:11,059 --> 00:27:15,529
chain and a receiving chain whatever I

608
00:27:13,940 --> 00:27:17,899
am going to encrypt with the key

609
00:27:15,529 --> 00:27:20,509
generated by descending same is going to

610
00:27:17,899 --> 00:27:23,508
be decrypted by the receiving same of

611
00:27:20,509 --> 00:27:25,309
the other party on the opposite my

612
00:27:23,509 --> 00:27:27,799
receiving chain is associated to the

613
00:27:25,309 --> 00:27:29,658
same insane of Bob okay that's the idea

614
00:27:27,799 --> 00:27:33,049
Bob an analysis okay

615
00:27:29,659 --> 00:27:35,109
so what is they let's start with the

616
00:27:33,049 --> 00:27:38,269
second one let's start with this

617
00:27:35,109 --> 00:27:41,210
symmetric right the same metal ratchet

618
00:27:38,269 --> 00:27:43,429
basically is like a hash function okay

619
00:27:41,210 --> 00:27:45,979
that basically it's going to get some

620
00:27:43,429 --> 00:27:48,440
input some previous key and it's going

621
00:27:45,979 --> 00:27:50,299
to generate a new key to evolve the

622
00:27:48,440 --> 00:27:52,190
chain so these are the keys used for the

623
00:27:50,299 --> 00:27:54,289
sending and receiving sent and it's

624
00:27:52,190 --> 00:27:56,989
going to generate a unique message key

625
00:27:54,289 --> 00:27:59,269
okay and the main principle of this kind

626
00:27:56,989 --> 00:28:02,450
of implementation is that this is a

627
00:27:59,269 --> 00:28:06,200
one-way function like a hashing function

628
00:28:02,450 --> 00:28:08,659
think about someone's 256 on and so

629
00:28:06,200 --> 00:28:11,989
forth okay involving keys this is

630
00:28:08,659 --> 00:28:14,359
something we call H Mac okay but it is

631
00:28:11,989 --> 00:28:16,220
that idea that you cannot obtain the

632
00:28:14,359 --> 00:28:21,678
previous key from the current key or

633
00:28:16,220 --> 00:28:23,239
okay reverse the algorithm way backward

634
00:28:21,679 --> 00:28:25,909
basically that's that's the main

635
00:28:23,239 --> 00:28:29,779
principle there okay so we want to have

636
00:28:25,909 --> 00:28:33,200
unique message keys okay once we iterate

637
00:28:29,779 --> 00:28:36,320
once in the algorithm is what we go we

638
00:28:33,200 --> 00:28:38,450
go one step we generate a new key and

639
00:28:36,320 --> 00:28:40,759
then add another key and another key and

640
00:28:38,450 --> 00:28:43,460
another key that's the overall idea okay

641
00:28:40,759 --> 00:28:45,559
what about the other ratchet the ratchet

642
00:28:43,460 --> 00:28:48,590
that is managing difficult monkeys and

643
00:28:45,559 --> 00:28:51,049
is evolving and all that it's easy to

644
00:28:48,590 --> 00:28:53,720
understand every time Bob and Alice it

645
00:28:51,049 --> 00:28:54,668
sends a message they need to provide the

646
00:28:53,720 --> 00:28:57,220
other end there

647
00:28:54,669 --> 00:29:00,039
current diffie-hellman key and this key

648
00:28:57,220 --> 00:29:03,100
is going to evolve over time to okay so

649
00:29:00,039 --> 00:29:05,590
that's the day via the route same is the

650
00:29:03,100 --> 00:29:07,509
one that is going to be used okay from

651
00:29:05,590 --> 00:29:09,789
the difficult man exchange get to

652
00:29:07,509 --> 00:29:12,549
generate and like a new secret but it's

653
00:29:09,789 --> 00:29:16,090
a new secret only for the route say okay

654
00:29:12,549 --> 00:29:19,239
so what is the initial value to

655
00:29:16,090 --> 00:29:22,449
initialize the route chain okay what

656
00:29:19,239 --> 00:29:24,669
what come on sir secret do we have to

657
00:29:22,450 --> 00:29:31,179
initialize the route chain and from

658
00:29:24,669 --> 00:29:34,989
there start deriving new keys is the

659
00:29:31,179 --> 00:29:37,179
green sirki we obtain okay from the

660
00:29:34,989 --> 00:29:39,940
standard three P diffie-hellman before

661
00:29:37,179 --> 00:29:41,950
so that in itself sir secret in green we

662
00:29:39,940 --> 00:29:44,169
got is the one we are going to use to

663
00:29:41,950 --> 00:29:46,509
initialize the root sign and from there

664
00:29:44,169 --> 00:29:48,669
start creating new keys that's the

665
00:29:46,509 --> 00:29:50,590
overall idea okay so let me let me show

666
00:29:48,669 --> 00:29:52,779
you that and from there the keys we will

667
00:29:50,590 --> 00:29:55,570
generate this from for the sending and

668
00:29:52,779 --> 00:29:57,669
for the receiving chains so that we can

669
00:29:55,570 --> 00:29:59,619
encrypt and decrypt the messages we're

670
00:29:57,669 --> 00:30:01,929
sending or we are receiving that's the

671
00:29:59,619 --> 00:30:04,449
general idea so let me let me explain

672
00:30:01,929 --> 00:30:07,149
you that in in detail okay if we get a

673
00:30:04,450 --> 00:30:10,059
message let let's think about message

674
00:30:07,149 --> 00:30:14,678
one from Ali's a1 so we have the first

675
00:30:10,059 --> 00:30:17,739
message for for from Ali's coming in we

676
00:30:14,679 --> 00:30:21,129
apply the extended triple triple

677
00:30:17,739 --> 00:30:23,379
diffie-hellman algorithm we generate the

678
00:30:21,129 --> 00:30:26,949
search secret we initializes the root

679
00:30:23,379 --> 00:30:29,678
chain we go one step we generate the key

680
00:30:26,950 --> 00:30:32,409
for the sending sorry in this case okay

681
00:30:29,679 --> 00:30:34,720
it's a lease of the sending same and we

682
00:30:32,409 --> 00:30:36,909
go one step and both on that ratchet -

683
00:30:34,720 --> 00:30:39,070
so this is one of the ratchets and this

684
00:30:36,909 --> 00:30:41,379
is the other ratchet and we generate the

685
00:30:39,070 --> 00:30:44,080
first key for the first message coming

686
00:30:41,379 --> 00:30:46,090
from Alice so a1 we encrypt the message

687
00:30:44,080 --> 00:30:50,439
with this key and we should meet that -

688
00:30:46,090 --> 00:30:53,619
Bob so Bob should be able to apply the

689
00:30:50,440 --> 00:30:56,379
same process to end up with the same key

690
00:30:53,619 --> 00:30:58,209
so he is able to decrypt the first

691
00:30:56,379 --> 00:31:00,939
message coming from Alice

692
00:30:58,210 --> 00:31:02,590
that's the the idea so how Bob is going

693
00:31:00,940 --> 00:31:05,379
to do that how it's going to be able to

694
00:31:02,590 --> 00:31:06,668
obtain that so basically remember this

695
00:31:05,379 --> 00:31:08,360
is what we explained before we have

696
00:31:06,669 --> 00:31:10,100
applied one step of the rat sets

697
00:31:08,360 --> 00:31:12,979
so we have the right the keys that

698
00:31:10,100 --> 00:31:15,620
simple and then it's party is basically

699
00:31:12,980 --> 00:31:18,400
playing ping-pong they are continuously

700
00:31:15,620 --> 00:31:20,959
sending public keys to each other

701
00:31:18,400 --> 00:31:23,510
regarding difficult man to be able to

702
00:31:20,960 --> 00:31:25,760
derive those keys so let me show you

703
00:31:23,510 --> 00:31:27,470
that with with an example which is much

704
00:31:25,760 --> 00:31:29,990
better every single message is going to

705
00:31:27,470 --> 00:31:32,000
have those keys to above that so let's

706
00:31:29,990 --> 00:31:34,970
see that with with a specific example

707
00:31:32,000 --> 00:31:37,670
the diffie-hellman exchange is always

708
00:31:34,970 --> 00:31:40,820
going to a ball in different steps in

709
00:31:37,670 --> 00:31:43,549
order to generate a new difficult man

710
00:31:40,820 --> 00:31:45,500
output that's the idea okay with the

711
00:31:43,549 --> 00:31:47,840
case of both parties so that's the idea

712
00:31:45,500 --> 00:31:51,440
we have roll I mean we have Bob we have

713
00:31:47,840 --> 00:31:53,809
Alice Bob submits to Alice hits current

714
00:31:51,440 --> 00:31:57,169
public key Alice is going to take his

715
00:31:53,809 --> 00:31:58,820
current key it's going to apply a Rafi

716
00:31:57,169 --> 00:32:01,580
human and it's going to generate some

717
00:31:58,820 --> 00:32:03,139
output okay the next message is coming

718
00:32:01,580 --> 00:32:04,240
from Alice to Bob we'll do the same

719
00:32:03,140 --> 00:32:07,760
thing okay

720
00:32:04,240 --> 00:32:11,720
so that's that's it okay it will submit

721
00:32:07,760 --> 00:32:13,610
that Alice performs one step and it

722
00:32:11,720 --> 00:32:16,280
generates the album the output will be

723
00:32:13,610 --> 00:32:18,260
used to populate the different change we

724
00:32:16,280 --> 00:32:20,600
saw before the root chain in this case

725
00:32:18,260 --> 00:32:23,410
okay that's the the idea and they are

726
00:32:20,600 --> 00:32:26,659
continuously playing ping pong okay

727
00:32:23,410 --> 00:32:29,840
table tennis okay in order to do that

728
00:32:26,660 --> 00:32:32,660
okay so let's do that or let's go in to

729
00:32:29,840 --> 00:32:35,629
see that in action okay so we have Bob

730
00:32:32,660 --> 00:32:37,429
generates a new key should mix that to

731
00:32:35,630 --> 00:32:40,400
Alice with the first message Alice

732
00:32:37,429 --> 00:32:43,040
generates a new key iterates one step on

733
00:32:40,400 --> 00:32:46,610
the difficult man ratchet he generate an

734
00:32:43,040 --> 00:32:49,580
output okay and that output will be the

735
00:32:46,610 --> 00:32:53,540
same of the next output data generated

736
00:32:49,580 --> 00:32:55,490
by Bob when when Alice submits the next

737
00:32:53,540 --> 00:32:57,799
message to Bob it will have the same

738
00:32:55,490 --> 00:33:00,320
public key Bob will do the same

739
00:32:57,799 --> 00:33:03,470
computation its previous key plus

740
00:33:00,320 --> 00:33:05,750
current Alice key will generate the same

741
00:33:03,470 --> 00:33:07,700
output they both have the same output

742
00:33:05,750 --> 00:33:10,429
they can encrypt on the creep with that

743
00:33:07,700 --> 00:33:13,669
output specifically okay and the same

744
00:33:10,429 --> 00:33:16,550
idea will happen this I mean Bob will

745
00:33:13,669 --> 00:33:19,370
generate a new key for the next step the

746
00:33:16,550 --> 00:33:22,220
next communication it will be remain in

747
00:33:19,370 --> 00:33:24,919
there okay so

748
00:33:22,220 --> 00:33:27,140
the next step will be ready for the next

749
00:33:24,920 --> 00:33:30,290
message we need to send to two alleys

750
00:33:27,140 --> 00:33:33,260
okay so let's take a look at that now

751
00:33:30,290 --> 00:33:36,040
Bob submits a new message to Alice Alice

752
00:33:33,260 --> 00:33:39,770
receives the key it's going to calculate

753
00:33:36,040 --> 00:33:42,500
the output from the current key received

754
00:33:39,770 --> 00:33:45,520
by Bob and my previous key and this

755
00:33:42,500 --> 00:33:48,320
output will be the same output that Bob

756
00:33:45,520 --> 00:33:50,690
calculated before that's the the oral

757
00:33:48,320 --> 00:33:53,330
idea okay so with that they can continue

758
00:33:50,690 --> 00:33:54,800
then Alice will get ready for the next

759
00:33:53,330 --> 00:33:57,889
message so it can perform the

760
00:33:54,800 --> 00:34:00,860
calculation and get ready before okay or

761
00:33:57,890 --> 00:34:01,790
in advance so that when she is going to

762
00:34:00,860 --> 00:34:04,429
send the next message

763
00:34:01,790 --> 00:34:06,200
he has the calc has the calculation in

764
00:34:04,430 --> 00:34:08,510
place when she should meet the message

765
00:34:06,200 --> 00:34:10,639
to Bob same process okay but we'll do

766
00:34:08,510 --> 00:34:12,919
the appropriate calculations to derive

767
00:34:10,639 --> 00:34:15,139
the same output and okay

768
00:34:12,918 --> 00:34:17,480
get ready for the next message that will

769
00:34:15,139 --> 00:34:19,310
be submitted to a list I think it's I

770
00:34:17,480 --> 00:34:21,168
mean you can see the whole process that

771
00:34:19,310 --> 00:34:24,590
it's going to be repeated continuously

772
00:34:21,168 --> 00:34:27,859
here okay so that's that's the idea okay

773
00:34:24,590 --> 00:34:30,140
in reality this keys that have been

774
00:34:27,860 --> 00:34:32,600
derived there are not the message keys

775
00:34:30,139 --> 00:34:35,659
these are the keys that are used to

776
00:34:32,600 --> 00:34:37,909
populate the chains we mentioned before

777
00:34:35,659 --> 00:34:41,779
the route sending and receiving chains

778
00:34:37,909 --> 00:34:44,928
so in this case it's it seems like

779
00:34:41,780 --> 00:34:48,800
obvious that the killary generating in

780
00:34:44,929 --> 00:34:51,050
one end when I send messages is the key

781
00:34:48,800 --> 00:34:53,630
that is generated on the other end for

782
00:34:51,050 --> 00:34:56,300
receiving my messages so whatever I

783
00:34:53,630 --> 00:34:58,160
encrypt here will be decrypted here with

784
00:34:56,300 --> 00:35:00,890
the same key okay that that's the

785
00:34:58,160 --> 00:35:04,310
overall concept in reality is not that

786
00:35:00,890 --> 00:35:06,790
way okay in reality instead of using

787
00:35:04,310 --> 00:35:10,430
those for the seminole receiving chain

788
00:35:06,790 --> 00:35:12,950
since we put in the middle the root

789
00:35:10,430 --> 00:35:15,140
chain so let me explain you that here we

790
00:35:12,950 --> 00:35:16,939
have still the same process going back

791
00:35:15,140 --> 00:35:19,279
and forth back and forth deriving the

792
00:35:16,940 --> 00:35:21,170
case as we saw before but in realities

793
00:35:19,280 --> 00:35:23,630
as I mention instead of being this the

794
00:35:21,170 --> 00:35:26,690
recipients and in chains okay

795
00:35:23,630 --> 00:35:29,690
we have moved that to the right and we

796
00:35:26,690 --> 00:35:32,300
have put in the middle the route same so

797
00:35:29,690 --> 00:35:34,760
let me show you that the route same will

798
00:35:32,300 --> 00:35:37,400
be there generating

799
00:35:34,760 --> 00:35:41,180
the case with that we have an extra a

800
00:35:37,400 --> 00:35:43,670
key derivation function and in that way

801
00:35:41,180 --> 00:35:46,730
we can ensure much better forward

802
00:35:43,670 --> 00:35:50,270
secrecy that's the the overall idea okay

803
00:35:46,730 --> 00:35:52,850
so that's the the root chain but but the

804
00:35:50,270 --> 00:35:55,310
process is the same I derive a new key I

805
00:35:52,850 --> 00:35:57,830
perform two steps I can generate the

806
00:35:55,310 --> 00:36:01,070
output that will fit the new function

807
00:35:57,830 --> 00:36:03,110
that in fact will generate descending

808
00:36:01,070 --> 00:36:05,720
and the finals and in are receiving

809
00:36:03,110 --> 00:36:08,050
chains okay for the the other two chains

810
00:36:05,720 --> 00:36:11,120
that's that's it okay

811
00:36:08,050 --> 00:36:13,550
remember the first key we used to

812
00:36:11,120 --> 00:36:17,180
initialize the root chain is the search

813
00:36:13,550 --> 00:36:20,150
secret we got from the standard triple

814
00:36:17,180 --> 00:36:21,950
triple difficult man that's something we

815
00:36:20,150 --> 00:36:23,990
need from from somewhere so let's put

816
00:36:21,950 --> 00:36:28,129
all the pieces together so initially

817
00:36:23,990 --> 00:36:31,669
Alice and Bob apply the extended triple

818
00:36:28,130 --> 00:36:34,550
triple diffie-hellman they derive the

819
00:36:31,670 --> 00:36:36,830
search secret Alice submits the initial

820
00:36:34,550 --> 00:36:39,560
message so that Bob can derive the same

821
00:36:36,830 --> 00:36:41,360
search secret and from there they

822
00:36:39,560 --> 00:36:43,940
initialize the root chain with the

823
00:36:41,360 --> 00:36:46,100
search secret and they start playing

824
00:36:43,940 --> 00:36:48,440
with the two ratchets okay

825
00:36:46,100 --> 00:36:52,549
the one used by difficult man to ensure

826
00:36:48,440 --> 00:36:54,500
future secrecy the one used by the key

827
00:36:52,550 --> 00:36:56,780
derivation functions with the three

828
00:36:54,500 --> 00:37:00,080
chains root sending and receiving to

829
00:36:56,780 --> 00:37:02,920
ensure forward secrecy and from there we

830
00:37:00,080 --> 00:37:07,279
can move forward and start generating

831
00:37:02,920 --> 00:37:10,250
unique messages or unique keys per

832
00:37:07,280 --> 00:37:13,490
message which is the end goal of of the

833
00:37:10,250 --> 00:37:16,970
protocol okay so we initialize that then

834
00:37:13,490 --> 00:37:20,209
we submit that to Alice Alice can derive

835
00:37:16,970 --> 00:37:22,970
the first key for the first message she

836
00:37:20,210 --> 00:37:25,760
is going to send and it's able to send

837
00:37:22,970 --> 00:37:27,879
that message okay this is basically all

838
00:37:25,760 --> 00:37:32,510
the pieces we have Splendor in the tiny

839
00:37:27,880 --> 00:37:34,880
diagram okay once we have that and Alice

840
00:37:32,510 --> 00:37:36,590
receives a message coming from Bob he

841
00:37:34,880 --> 00:37:38,480
can do the same he can derive all the

842
00:37:36,590 --> 00:37:42,080
keys in order to be able to have this

843
00:37:38,480 --> 00:37:44,720
the first key for the first message that

844
00:37:42,080 --> 00:37:47,299
is going to be received from Bob that's

845
00:37:44,720 --> 00:37:51,589
the the overall idea over there

846
00:37:47,299 --> 00:37:55,189
so keep in mind that up to here we have

847
00:37:51,589 --> 00:37:56,299
only looked at the Alice Alice's side

848
00:37:55,189 --> 00:37:58,788
not Bob's

849
00:37:56,299 --> 00:38:00,859
side okay in order to look at Bob side

850
00:37:58,789 --> 00:38:04,159
basically we will need to do the same

851
00:38:00,859 --> 00:38:08,299
calculations on the other side and as

852
00:38:04,159 --> 00:38:10,339
you have seen descending key it's the

853
00:38:08,299 --> 00:38:11,689
same one as the receiving key on the

854
00:38:10,339 --> 00:38:13,909
other end so they can encrypt and

855
00:38:11,689 --> 00:38:17,719
decrypt a message with the same key okay

856
00:38:13,909 --> 00:38:20,359
that's the the idea so let's take a loop

857
00:38:17,719 --> 00:38:24,109
to that in in action okay alice is going

858
00:38:20,359 --> 00:38:26,649
to send the first message is a 1 so it's

859
00:38:24,109 --> 00:38:30,049
going to receive Bob's public key

860
00:38:26,649 --> 00:38:32,569
calculate or initialize the root same as

861
00:38:30,049 --> 00:38:35,329
we mentioned before get the value there

862
00:38:32,569 --> 00:38:37,849
derive the output and be able to

863
00:38:35,329 --> 00:38:39,799
generate this sending key chain okay

864
00:38:37,849 --> 00:38:42,289
with the sending chain it's going to

865
00:38:39,799 --> 00:38:44,538
iterate one step and generate the first

866
00:38:42,289 --> 00:38:47,269
message key and it's going to be able to

867
00:38:44,539 --> 00:38:50,059
encrypt the first message with that okay

868
00:38:47,269 --> 00:38:52,999
when Alice receives a response from Bob

869
00:38:50,059 --> 00:38:56,059
okay it can do the same calculation it

870
00:38:52,999 --> 00:38:58,519
cap derive the receiving same and it can

871
00:38:56,059 --> 00:39:01,099
generate the key for the first message

872
00:38:58,519 --> 00:39:04,129
that will come from Bob okay which is B

873
00:39:01,099 --> 00:39:08,509
1 okay and it will get ready for the

874
00:39:04,130 --> 00:39:11,689
next message that's it okay so Alice

875
00:39:08,509 --> 00:39:14,539
sends the second message a to okay it's

876
00:39:11,689 --> 00:39:18,049
going to submit that to Bob and generate

877
00:39:14,539 --> 00:39:20,089
an a2 message okay Bob for example sends

878
00:39:18,049 --> 00:39:22,579
her second message to Alice so they are

879
00:39:20,089 --> 00:39:25,279
going to come up with the second key

880
00:39:22,579 --> 00:39:27,139
associated to Bob messages and from

881
00:39:25,279 --> 00:39:28,099
there they are going to move back and

882
00:39:27,139 --> 00:39:30,529
forth back and forth

883
00:39:28,099 --> 00:39:32,689
generating keys per message that's the

884
00:39:30,529 --> 00:39:35,179
overall general idea

885
00:39:32,689 --> 00:39:38,029
okay in fact we are not going to cover

886
00:39:35,179 --> 00:39:41,869
that but the protocol is ready to manage

887
00:39:38,029 --> 00:39:43,999
lost or delayed messages so you can keep

888
00:39:41,869 --> 00:39:46,489
keys for messages you have not received

889
00:39:43,999 --> 00:39:48,138
but potentially because you think you're

890
00:39:46,489 --> 00:39:50,239
going to receive them in the future and

891
00:39:48,139 --> 00:39:52,789
therefore you will need to decrypt them

892
00:39:50,239 --> 00:39:53,630
so everything is ready for for Dallas

893
00:39:52,789 --> 00:39:56,239
scenario two

894
00:39:53,630 --> 00:39:57,919
okay and and that's the the whole

895
00:39:56,239 --> 00:39:59,929
process basically here you can see that

896
00:39:57,919 --> 00:40:01,379
Bob is sending another new message

897
00:39:59,929 --> 00:40:03,779
analysts can

898
00:40:01,380 --> 00:40:06,630
trait one step generate the receiving

899
00:40:03,779 --> 00:40:09,239
key and generate the unique keys to

900
00:40:06,630 --> 00:40:12,029
decrypt those messages coming from from

901
00:40:09,239 --> 00:40:14,190
Bob okay my main goal with all this

902
00:40:12,029 --> 00:40:17,729
explanation which is I hope your brain

903
00:40:14,190 --> 00:40:20,460
is hurting now okay that's the purpose

904
00:40:17,729 --> 00:40:23,700
of of the explanation is that you can

905
00:40:20,460 --> 00:40:25,200
see how complex the protocol is and all

906
00:40:23,700 --> 00:40:29,308
the pieces that have been put together

907
00:40:25,200 --> 00:40:31,049
to be able to ensure the different

908
00:40:29,309 --> 00:40:33,420
crypto properties we mention at the

909
00:40:31,049 --> 00:40:36,269
beginning that's the overall idea if we

910
00:40:33,420 --> 00:40:38,430
look into Alice and Bob's simultaneously

911
00:40:36,269 --> 00:40:40,319
it will be something like that okay so

912
00:40:38,430 --> 00:40:43,200
we have been looking to Alice side

913
00:40:40,319 --> 00:40:46,288
before and something similar is going on

914
00:40:43,200 --> 00:40:49,078
on Bob's side so that's that's it okay

915
00:40:46,289 --> 00:40:51,690
so this is how it works basically we

916
00:40:49,079 --> 00:40:53,940
have the standard triple triple

917
00:40:51,690 --> 00:40:56,579
difficult man exchange to the right the

918
00:40:53,940 --> 00:40:58,859
initials are secret and from that we are

919
00:40:56,579 --> 00:41:00,930
initialized in different chains to be

920
00:40:58,859 --> 00:41:04,348
able to send and receive messages with

921
00:41:00,930 --> 00:41:09,269
unique keys that are specific for every

922
00:41:04,349 --> 00:41:13,170
single message that's it okay how are we

923
00:41:09,269 --> 00:41:15,118
doing regarding time we are fine okay so

924
00:41:13,170 --> 00:41:16,170
let me go into something that was

925
00:41:15,119 --> 00:41:19,019
published okay

926
00:41:16,170 --> 00:41:20,789
early this year okay probably you read

927
00:41:19,019 --> 00:41:22,649
about that someone mentioned there was a

928
00:41:20,789 --> 00:41:25,259
backdoor or vulnerability back or

929
00:41:22,650 --> 00:41:28,049
feature something like that in in was up

930
00:41:25,259 --> 00:41:29,400
it was a button it was not a I mean it

931
00:41:28,049 --> 00:41:32,880
was a feature okay not not a

932
00:41:29,400 --> 00:41:35,579
vulnerability basically so what what was

933
00:41:32,880 --> 00:41:38,430
it so let me explain you that remember

934
00:41:35,579 --> 00:41:39,779
we have said before the difficult man is

935
00:41:38,430 --> 00:41:41,879
still vulnerable to man in the middle

936
00:41:39,779 --> 00:41:43,979
because you need to be sure that you are

937
00:41:41,880 --> 00:41:46,859
talking to who do you think you are

938
00:41:43,979 --> 00:41:49,078
talking to so basically you need to have

939
00:41:46,859 --> 00:41:52,259
some kind of matching between the

940
00:41:49,079 --> 00:41:56,729
identity of the other user so Alice nice

941
00:41:52,259 --> 00:41:59,849
needs to verify Bob's verification code

942
00:41:56,729 --> 00:42:01,859
which basically say code that provides

943
00:41:59,849 --> 00:42:03,960
you the information between that session

944
00:42:01,859 --> 00:42:07,259
taking place between Alice and Bob

945
00:42:03,960 --> 00:42:10,109
because if not you might receive a

946
00:42:07,259 --> 00:42:14,440
public key from someone else

947
00:42:10,109 --> 00:42:16,210
okay that if for example that is

948
00:42:14,440 --> 00:42:18,790
so do you need to have that match

949
00:42:16,210 --> 00:42:20,410
between the identity and the key okay

950
00:42:18,790 --> 00:42:22,630
and there is nothing that is providing

951
00:42:20,410 --> 00:42:24,759
that you that information to you and

952
00:42:22,630 --> 00:42:28,119
step the verification between both

953
00:42:24,760 --> 00:42:30,369
parties okay for that wasup is going to

954
00:42:28,119 --> 00:42:34,060
generate a code based on the public keys

955
00:42:30,369 --> 00:42:36,400
of both users that you can okay verified

956
00:42:34,060 --> 00:42:38,560
with the other party that's the the oral

957
00:42:36,400 --> 00:42:42,040
idea scanning that I mean it could be a

958
00:42:38,560 --> 00:42:43,930
QR code that you scan with I'm if you

959
00:42:42,040 --> 00:42:46,779
have physical contact between the two

960
00:42:43,930 --> 00:42:48,669
users or if not is converted to a sisty

961
00:42:46,780 --> 00:42:49,510
digit code that you can read to the

962
00:42:48,670 --> 00:42:52,030
other party

963
00:42:49,510 --> 00:42:55,960
so now suffocate it's it's some

964
00:42:52,030 --> 00:42:57,820
usability improvements therefore for the

965
00:42:55,960 --> 00:43:00,250
users to be able to verify the different

966
00:42:57,820 --> 00:43:02,080
codes okay so the backdoor or bullying

967
00:43:00,250 --> 00:43:03,910
ability that appear basically was based

968
00:43:02,080 --> 00:43:05,980
on on that let me let me show you that

969
00:43:03,910 --> 00:43:07,660
let me show you they the details okay

970
00:43:05,980 --> 00:43:09,520
they mention backdoor at the beginning

971
00:43:07,660 --> 00:43:11,950
then they rename that to vulnerability

972
00:43:09,520 --> 00:43:15,100
it could be a feature it could be a back

973
00:43:11,950 --> 00:43:18,549
think about that if Alice sends a

974
00:43:15,100 --> 00:43:20,950
message to Bob but Bob is offline the

975
00:43:18,550 --> 00:43:23,530
message will have only one tick okay

976
00:43:20,950 --> 00:43:26,830
saying it has been delivered but Bob

977
00:43:23,530 --> 00:43:28,109
didn't read read the message that's the

978
00:43:26,830 --> 00:43:32,430
idea okay

979
00:43:28,109 --> 00:43:37,119
then imagine that at that point Bob

980
00:43:32,430 --> 00:43:40,169
changes its own public key okay how can

981
00:43:37,119 --> 00:43:43,540
Bob change its own identity public key

982
00:43:40,170 --> 00:43:46,690
for example because he replaces his

983
00:43:43,540 --> 00:43:49,630
current phone mobile phone by a new

984
00:43:46,690 --> 00:43:53,410
device or because he decides to

985
00:43:49,630 --> 00:43:54,880
reinstall the app okay and a new key is

986
00:43:53,410 --> 00:43:57,790
going to be generated that is not

987
00:43:54,880 --> 00:44:01,390
related with the previous key okay there

988
00:43:57,790 --> 00:44:03,550
are places in the world word assistance

989
00:44:01,390 --> 00:44:06,609
to be really common people change

990
00:44:03,550 --> 00:44:08,859
changes France frequently or reinstall

991
00:44:06,609 --> 00:44:14,080
the app frequently things like that okay

992
00:44:08,859 --> 00:44:16,299
so what happens when now this wants to

993
00:44:14,080 --> 00:44:19,840
communicate with Bob okay it's going to

994
00:44:16,300 --> 00:44:23,859
retransmit the new messages with the new

995
00:44:19,840 --> 00:44:26,500
key from Bob okay so the problem there

996
00:44:23,859 --> 00:44:27,460
is imagine that someone's is someone is

997
00:44:26,500 --> 00:44:30,850
in the middle

998
00:44:27,460 --> 00:44:33,160
impersonating Bob is providing a new key

999
00:44:30,850 --> 00:44:35,980
for Bob but it's not Bob in reality

1000
00:44:33,160 --> 00:44:38,140
analyst is going to submit the pending

1001
00:44:35,980 --> 00:44:41,950
messages that were there let's say cute

1002
00:44:38,140 --> 00:44:43,930
not read by Bob originally to Bob so

1003
00:44:41,950 --> 00:44:46,899
what what's the problem there that the

1004
00:44:43,930 --> 00:44:49,419
new third party could they creep the

1005
00:44:46,900 --> 00:44:52,450
messages coming from alleys that were

1006
00:44:49,420 --> 00:44:54,100
not delivered to Bob previously yeah

1007
00:44:52,450 --> 00:44:57,399
that's that's the main threat okay

1008
00:44:54,100 --> 00:45:00,370
associated to that Bob could be notified

1009
00:44:57,400 --> 00:45:02,140
but it will be notified afterwards so

1010
00:45:00,370 --> 00:45:03,910
it's too late because the third party

1011
00:45:02,140 --> 00:45:06,850
has already had access to all these

1012
00:45:03,910 --> 00:45:09,730
messages okay or messages coming from

1013
00:45:06,850 --> 00:45:12,130
Alice to Bob okay encrypted with the new

1014
00:45:09,730 --> 00:45:14,790
keys so how this is possible

1015
00:45:12,130 --> 00:45:17,650
okay it's basically an implementation

1016
00:45:14,790 --> 00:45:20,020
decision so for example in worship

1017
00:45:17,650 --> 00:45:25,480
because they have so many users in the

1018
00:45:20,020 --> 00:45:28,590
world they decided to disturb as less as

1019
00:45:25,480 --> 00:45:31,690
possible the users basically doing that

1020
00:45:28,590 --> 00:45:34,630
automatically even if your key changes

1021
00:45:31,690 --> 00:45:38,020
it's going to automatically resubmit

1022
00:45:34,630 --> 00:45:41,740
recent previous and delivered messages

1023
00:45:38,020 --> 00:45:44,500
to the new key or encrypted with the new

1024
00:45:41,740 --> 00:45:47,080
key to the same user automatically

1025
00:45:44,500 --> 00:45:49,390
that's the idea for example in signal

1026
00:45:47,080 --> 00:45:51,940
the signal messaging app which is

1027
00:45:49,390 --> 00:45:54,940
implementing the signal protocol to okay

1028
00:45:51,940 --> 00:45:57,750
this is a blocking behavior basically

1029
00:45:54,940 --> 00:46:02,020
the messages are not submitted to the

1030
00:45:57,750 --> 00:46:06,280
user with the new key automatically okay

1031
00:46:02,020 --> 00:46:08,410
the sender is asked first if he wants to

1032
00:46:06,280 --> 00:46:10,960
submit those messages with the new key

1033
00:46:08,410 --> 00:46:12,700
it's a usability trade-off is a

1034
00:46:10,960 --> 00:46:17,500
trade-off between usability and security

1035
00:46:12,700 --> 00:46:20,200
in worship they decided to improve

1036
00:46:17,500 --> 00:46:22,570
usability in signal they decided to

1037
00:46:20,200 --> 00:46:25,750
improve security in this specific

1038
00:46:22,570 --> 00:46:28,000
balance okay so basically this is how it

1039
00:46:25,750 --> 00:46:29,020
looks like Jacob was up and you

1040
00:46:28,000 --> 00:46:31,240
submitted a message

1041
00:46:29,020 --> 00:46:32,950
this one was delivered to the user so he

1042
00:46:31,240 --> 00:46:35,859
has it has two ticks

1043
00:46:32,950 --> 00:46:38,799
this one has only one tick has not been

1044
00:46:35,860 --> 00:46:40,340
delivered to the user in the middle the

1045
00:46:38,800 --> 00:46:43,580
user changes

1046
00:46:40,340 --> 00:46:48,260
phone reinstalls the app it has a new

1047
00:46:43,580 --> 00:46:50,450
key what the the was abuser will see it

1048
00:46:48,260 --> 00:46:52,250
will see that the code had changed but

1049
00:46:50,450 --> 00:46:54,500
the message has been submitted with the

1050
00:46:52,250 --> 00:46:57,770
new key it's too late the message

1051
00:46:54,500 --> 00:47:01,970
already went through the network okay if

1052
00:46:57,770 --> 00:47:03,800
we look at that into signal the behavior

1053
00:47:01,970 --> 00:47:05,839
is different we have one message that

1054
00:47:03,800 --> 00:47:09,020
was delivered a second message that was

1055
00:47:05,840 --> 00:47:11,840
not and now what is going to happen the

1056
00:47:09,020 --> 00:47:14,480
user is going to see that the key the

1057
00:47:11,840 --> 00:47:17,240
identity give for the other user has

1058
00:47:14,480 --> 00:47:19,820
changed but as you can see he here the

1059
00:47:17,240 --> 00:47:23,240
message has not been delivered yet the

1060
00:47:19,820 --> 00:47:25,130
user need needs to approve manually that

1061
00:47:23,240 --> 00:47:26,930
he wants to submit the message to the

1062
00:47:25,130 --> 00:47:29,450
other party with the new key so

1063
00:47:26,930 --> 00:47:32,120
basically that's that's it okay it's the

1064
00:47:29,450 --> 00:47:33,770
different behavior once you do that it's

1065
00:47:32,120 --> 00:47:36,589
going to ask you for that and therefore

1066
00:47:33,770 --> 00:47:39,050
it will submit the message okay so

1067
00:47:36,590 --> 00:47:41,960
basically is this kind of trade-off that

1068
00:47:39,050 --> 00:47:44,000
is very common in our industry where you

1069
00:47:41,960 --> 00:47:48,050
need to decide between usability and

1070
00:47:44,000 --> 00:47:50,810
security for some specific decisions so

1071
00:47:48,050 --> 00:47:53,750
with that we are going to end up the the

1072
00:47:50,810 --> 00:47:56,060
talk with some technical conclusions I

1073
00:47:53,750 --> 00:47:59,150
want you to keep in mind first of all as

1074
00:47:56,060 --> 00:48:01,070
you can see the kind of protocols and

1075
00:47:59,150 --> 00:48:04,400
our algorithms we are using in

1076
00:48:01,070 --> 00:48:07,930
day-to-day communications nowadays are

1077
00:48:04,400 --> 00:48:12,410
really complex compared to what we have

1078
00:48:07,930 --> 00:48:15,319
like three four five years ago this

1079
00:48:12,410 --> 00:48:17,960
signal protocol it's becoming like the

1080
00:48:15,320 --> 00:48:21,250
industry reference for lots of different

1081
00:48:17,960 --> 00:48:24,890
messaging secure messaging communication

1082
00:48:21,250 --> 00:48:27,710
solutions or apps okay so keep that in

1083
00:48:24,890 --> 00:48:29,210
mind and for every software like like

1084
00:48:27,710 --> 00:48:31,370
this kind of apps and messaging

1085
00:48:29,210 --> 00:48:33,050
solutions there are things that we need

1086
00:48:31,370 --> 00:48:35,089
to keep in mind there is always a

1087
00:48:33,050 --> 00:48:38,900
trade-off between usability and security

1088
00:48:35,090 --> 00:48:42,080
so we need to take design decisions

1089
00:48:38,900 --> 00:48:44,840
decisions based on that okay it's

1090
00:48:42,080 --> 00:48:47,450
important to have open source software

1091
00:48:44,840 --> 00:48:49,850
I'm not saying that commercial software

1092
00:48:47,450 --> 00:48:52,129
is less secure than open source or

1093
00:48:49,850 --> 00:48:53,569
software it depends on the piece of

1094
00:48:52,130 --> 00:48:54,770
software basically

1095
00:48:53,570 --> 00:48:57,200
but have been open-source software

1096
00:48:54,770 --> 00:48:59,900
especially when with the or in this

1097
00:48:57,200 --> 00:49:02,450
northern era where a lot of people are

1098
00:48:59,900 --> 00:49:04,940
worried about their communications being

1099
00:49:02,450 --> 00:49:08,240
intercepted so on and so forth it's

1100
00:49:04,940 --> 00:49:10,580
important so that someone can review the

1101
00:49:08,240 --> 00:49:12,830
code of that specific app or solution

1102
00:49:10,580 --> 00:49:14,720
it's not only that we need to have

1103
00:49:12,830 --> 00:49:16,970
open-source software but we need to have

1104
00:49:14,720 --> 00:49:19,129
something called reproducible builds

1105
00:49:16,970 --> 00:49:21,350
it's basically what we do have here in

1106
00:49:19,130 --> 00:49:24,190
the link is basically the fact that you

1107
00:49:21,350 --> 00:49:29,509
can take the source code of the app from

1108
00:49:24,190 --> 00:49:32,450
github compile that generate the binary

1109
00:49:29,510 --> 00:49:34,970
or the final app and be able to compare

1110
00:49:32,450 --> 00:49:38,720
the data is exactly the same apps you

1111
00:49:34,970 --> 00:49:41,180
have on the official stores ok Google

1112
00:49:38,720 --> 00:49:43,790
Play or the App Store and you can verify

1113
00:49:41,180 --> 00:49:45,500
that the same app because the hash let's

1114
00:49:43,790 --> 00:49:47,990
say the cryptographic hash of the app

1115
00:49:45,500 --> 00:49:49,880
you compiled and the app that is

1116
00:49:47,990 --> 00:49:52,160
publicly available is the same so you

1117
00:49:49,880 --> 00:49:53,590
know that the source code is the same if

1118
00:49:52,160 --> 00:49:56,359
you cannot do that

1119
00:49:53,590 --> 00:49:59,030
there is another threat and it's someone

1120
00:49:56,360 --> 00:50:01,010
could modify the open source code if you

1121
00:49:59,030 --> 00:50:02,750
are reviewing some code but the code

1122
00:50:01,010 --> 00:50:05,540
associated to the public app is a

1123
00:50:02,750 --> 00:50:07,940
different one so you need to be careful

1124
00:50:05,540 --> 00:50:11,750
with with that obviously as you can see

1125
00:50:07,940 --> 00:50:15,170
we have software that is really really

1126
00:50:11,750 --> 00:50:17,960
complex nowadays so we need to have

1127
00:50:15,170 --> 00:50:20,180
extra capabilities or verification

1128
00:50:17,960 --> 00:50:21,980
capabilities to really ensure that the

1129
00:50:20,180 --> 00:50:24,620
software is secure a very good example

1130
00:50:21,980 --> 00:50:27,530
that we have suffered recently is the

1131
00:50:24,620 --> 00:50:30,319
cracks attacks for Wi-Fi networks ok

1132
00:50:27,530 --> 00:50:33,110
even if the 4-way honzik has been

1133
00:50:30,320 --> 00:50:35,120
mathematically proven there were things

1134
00:50:33,110 --> 00:50:37,460
that were not included in that

1135
00:50:35,120 --> 00:50:39,710
verification process and therefore we

1136
00:50:37,460 --> 00:50:41,120
have suffered the new vulnerability

1137
00:50:39,710 --> 00:50:45,080
affecting that ok

1138
00:50:41,120 --> 00:50:47,270
in any case what's up decided to do

1139
00:50:45,080 --> 00:50:50,330
things in a specific way

1140
00:50:47,270 --> 00:50:55,190
usability signal decided to do things in

1141
00:50:50,330 --> 00:50:58,250
another way I mean promoting security

1142
00:50:55,190 --> 00:51:02,210
my recommendation is create solutions

1143
00:50:58,250 --> 00:51:04,550
that provide the user the option to

1144
00:51:02,210 --> 00:51:05,730
decide the the users should be able to

1145
00:51:04,550 --> 00:51:10,280
decide if they

1146
00:51:05,730 --> 00:51:13,230
to promote you stability or security

1147
00:51:10,280 --> 00:51:16,010
depending on the user profile or any

1148
00:51:13,230 --> 00:51:18,450
other aspects so providing advanced

1149
00:51:16,010 --> 00:51:21,380
configuration options in the apps will

1150
00:51:18,450 --> 00:51:24,750
help the user to decide what he prefers

1151
00:51:21,380 --> 00:51:26,640
usability or or security okay and then

1152
00:51:24,750 --> 00:51:28,619
you will decide what is the default

1153
00:51:26,640 --> 00:51:30,900
option but if the default option is

1154
00:51:28,619 --> 00:51:32,910
important for the end-user but for the

1155
00:51:30,900 --> 00:51:34,619
more advanced users it's not relevant

1156
00:51:32,910 --> 00:51:37,140
because if they have the capability to

1157
00:51:34,619 --> 00:51:39,660
change that okay they can decide the

1158
00:51:37,140 --> 00:51:41,879
security level they want to implement so

1159
00:51:39,660 --> 00:51:46,350
basically that's that's it I know that

1160
00:51:41,880 --> 00:51:49,050
it has been a tough talk because we have

1161
00:51:46,350 --> 00:51:51,930
covered a very complex topic topic in a

1162
00:51:49,050 --> 00:51:53,369
very small amount of time remember you

1163
00:51:51,930 --> 00:51:55,680
have the standard version of the

1164
00:51:53,369 --> 00:51:57,420
presentation if you want to go deeper

1165
00:51:55,680 --> 00:51:58,919
into some of the algorithms that are

1166
00:51:57,420 --> 00:52:01,609
finally used for the encryption and

1167
00:51:58,920 --> 00:52:05,280
decryption and and key lengths and other

1168
00:52:01,609 --> 00:52:08,220
details but at least you I hope you have

1169
00:52:05,280 --> 00:52:11,010
had a good overview of how the signal

1170
00:52:08,220 --> 00:52:12,810
protocol works and what is the different

1171
00:52:11,010 --> 00:52:15,210
keys involved in the process and the

1172
00:52:12,810 --> 00:52:18,240
change that take place there for those

1173
00:52:15,210 --> 00:52:20,490
of you that want to go deeper into the

1174
00:52:18,240 --> 00:52:22,470
this topic and all the different design

1175
00:52:20,490 --> 00:52:24,868
decisions and all that there are plenty

1176
00:52:22,470 --> 00:52:26,850
of references here for you to digest and

1177
00:52:24,869 --> 00:52:29,460
go through so you will have that

1178
00:52:26,850 --> 00:52:32,250
available on the presentation thanks a

1179
00:52:29,460 --> 00:52:35,730
lot for remaining and surviving even if

1180
00:52:32,250 --> 00:52:38,310
the food okay the Lance is the next step

1181
00:52:35,730 --> 00:52:41,280
in your day and and thank you for being

1182
00:52:38,310 --> 00:52:42,990
here and and again welcome to 2a Spain I

1183
00:52:41,280 --> 00:52:45,480
hope you enjoy the competition during

1184
00:52:42,990 --> 00:52:48,859
this couple of days and and enjoy the

1185
00:52:45,480 --> 00:52:48,859
conference - thank you

1186
00:52:56,910 --> 00:53:02,529
so if someone has any question regarding

1187
00:53:01,270 --> 00:53:04,750
the different things we have cover

1188
00:53:02,530 --> 00:53:07,630
something that was not clear we move

1189
00:53:04,750 --> 00:53:16,089
quickly there please don't hesitate to

1190
00:53:07,630 --> 00:53:18,760
ask them any question is there one over

1191
00:53:16,089 --> 00:53:20,740
there okay so try to if you have

1192
00:53:18,760 --> 00:53:22,720
questions let them know so you get them

1193
00:53:20,740 --> 00:53:24,520
the microphone and please stand up

1194
00:53:22,720 --> 00:53:29,919
because with the lightest is difficult

1195
00:53:24,520 --> 00:53:34,240
to see you here yeah Berlin spaniel

1196
00:53:29,920 --> 00:53:35,950
English class speaking Spanish I always

1197
00:53:34,240 --> 00:53:38,049
had the doubts about the system is used

1198
00:53:35,950 --> 00:53:41,710
by whatsapp if it's very different to

1199
00:53:38,049 --> 00:53:44,950
the system is used by telegram to for

1200
00:53:41,710 --> 00:53:47,109
encryption capabilities in wassup are

1201
00:53:44,950 --> 00:53:48,790
they different from the telegram the

1202
00:53:47,109 --> 00:53:50,799
other messaging app encryption

1203
00:53:48,790 --> 00:53:51,520
capabilities yeah they are completely

1204
00:53:50,799 --> 00:53:54,009
different

1205
00:53:51,520 --> 00:53:56,500
I mean telegram telegram implemented

1206
00:53:54,010 --> 00:53:59,829
their own encryption solution which is

1207
00:53:56,500 --> 00:54:01,770
not based at all in signal so there's no

1208
00:53:59,829 --> 00:54:04,359
relationship there

1209
00:54:01,770 --> 00:54:09,759
temuz I understand the telegram is

1210
00:54:04,359 --> 00:54:12,160
secure when one sub was using a

1211
00:54:09,760 --> 00:54:15,549
different encryption mechanism basically

1212
00:54:12,160 --> 00:54:18,759
at sample was ibly was using md5 based

1213
00:54:15,549 --> 00:54:20,680
on the the the user password the user

1214
00:54:18,760 --> 00:54:22,750
password was related to the unique

1215
00:54:20,680 --> 00:54:26,109
identifier of the phone or even the MAC

1216
00:54:22,750 --> 00:54:29,260
address okay it was really poor security

1217
00:54:26,109 --> 00:54:31,480
and it was considered really insecure

1218
00:54:29,260 --> 00:54:34,270
and definitely at that point telegram

1219
00:54:31,480 --> 00:54:36,400
was much more secure once

1220
00:54:34,270 --> 00:54:38,770
wasup has implemented the signal

1221
00:54:36,400 --> 00:54:40,839
protocol it's difficult to compare both

1222
00:54:38,770 --> 00:54:42,400
and basically with telegram okay there

1223
00:54:40,839 --> 00:54:45,790
are there are a lot of information out

1224
00:54:42,400 --> 00:54:49,530
there but no one has published an

1225
00:54:45,790 --> 00:54:53,079
in-depth research on on the telegram

1226
00:54:49,530 --> 00:54:54,640
encryption implementation so do you know

1227
00:54:53,079 --> 00:54:57,369
probably that there is a challenge there

1228
00:54:54,640 --> 00:54:59,618
is someone can breaks it it will get a

1229
00:54:57,369 --> 00:55:02,440
bug bounty price and things like that

1230
00:54:59,619 --> 00:55:04,660
but it's difficult to compare them but I

1231
00:55:02,440 --> 00:55:06,910
mean both of them nowadays because of

1232
00:55:04,660 --> 00:55:08,259
the complexity of both but they are

1233
00:55:06,910 --> 00:55:13,200
completely different

1234
00:55:08,260 --> 00:55:16,060
keep that in mind mafia thank you

1235
00:55:13,200 --> 00:55:21,330
question over there I think probably was

1236
00:55:16,060 --> 00:55:24,610
the same one okay is there any reason I

1237
00:55:21,330 --> 00:55:26,770
asked about the matrix protocol it's a

1238
00:55:24,610 --> 00:55:28,570
no it's based on signals and the second

1239
00:55:26,770 --> 00:55:33,000
probe also but what's your opinion about

1240
00:55:28,570 --> 00:55:36,130
it I want to be the my own server with

1241
00:55:33,000 --> 00:55:38,730
matrix is a sample so you can build your

1242
00:55:36,130 --> 00:55:41,230
own server for end-to-end encryption

1243
00:55:38,730 --> 00:55:43,900
okay so can you repeat them what's your

1244
00:55:41,230 --> 00:55:47,350
opinion about that matrix pro level

1245
00:55:43,900 --> 00:55:50,080
okay the protocol yeah I mean as you can

1246
00:55:47,350 --> 00:55:53,110
see the beauty of this protocol is that

1247
00:55:50,080 --> 00:55:54,880
it's open so it's well known you have

1248
00:55:53,110 --> 00:55:57,220
the white papers with all the details

1249
00:55:54,880 --> 00:56:00,700
about the protocol and as you can see is

1250
00:55:57,220 --> 00:56:04,060
quite complex and from a verification

1251
00:56:00,700 --> 00:56:07,540
perspective there was one University

1252
00:56:04,060 --> 00:56:10,060
that data are researched a verification

1253
00:56:07,540 --> 00:56:12,160
research on the protocol I'm basically

1254
00:56:10,060 --> 00:56:13,779
based on their in-depth analysis from a

1255
00:56:12,160 --> 00:56:15,850
mathematical perspective of the protocol

1256
00:56:13,780 --> 00:56:18,520
they didn't cover all the aspects of the

1257
00:56:15,850 --> 00:56:22,420
protocol but the main ones and the

1258
00:56:18,520 --> 00:56:24,280
outcome was that that it it seems secure

1259
00:56:22,420 --> 00:56:26,260
enough for the communications we are

1260
00:56:24,280 --> 00:56:28,210
managing nowadays the problem with that

1261
00:56:26,260 --> 00:56:30,340
is that these are really complex

1262
00:56:28,210 --> 00:56:32,710
protocols that is very difficult to go

1263
00:56:30,340 --> 00:56:35,710
in depth and really identify there is no

1264
00:56:32,710 --> 00:56:38,290
vulnerability on them okay so more

1265
00:56:35,710 --> 00:56:41,040
research is coming from other people to

1266
00:56:38,290 --> 00:56:44,650
evaluate the protocol but definitely is

1267
00:56:41,040 --> 00:56:45,370
much more secure compared to what we had

1268
00:56:44,650 --> 00:56:49,270
before

1269
00:56:45,370 --> 00:56:54,970
yeah thank you you're welcome other

1270
00:56:49,270 --> 00:57:00,900
questions so probably you want to get

1271
00:56:54,970 --> 00:57:00,899
some food Thank You Elsa yes

1272
00:57:02,450 --> 00:57:04,509
you

1273
00:57:11,340 --> 00:57:13,400
you

