1
00:00:07,740 --> 00:00:12,090
good evening thank you for attending

2
00:00:10,110 --> 00:00:16,590
this talk my name is Stephen de fries

3
00:00:12,090 --> 00:00:19,619
I'm the city of continuum security we're

4
00:00:16,590 --> 00:00:23,009
based in del corazón del oso Montano and

5
00:00:19,619 --> 00:00:25,259
Barb Astro as we're a Spanish company my

6
00:00:23,009 --> 00:00:27,630
experience is at the moment is I'm

7
00:00:25,260 --> 00:00:29,130
divided between doing programming so I'm

8
00:00:27,630 --> 00:00:31,019
a seventy percent spending my time doing

9
00:00:29,130 --> 00:00:33,839
development work and thirty percent

10
00:00:31,019 --> 00:00:36,930
doing consultancy work and security

11
00:00:33,839 --> 00:00:39,570
testing of applications can I see a show

12
00:00:36,930 --> 00:00:41,549
of hands in the audience who identifies

13
00:00:39,570 --> 00:00:46,530
as a developer who is doing development

14
00:00:41,549 --> 00:00:52,769
work a few okay and who is whose primary

15
00:00:46,530 --> 00:00:54,780
role is in security yeah a few okay so

16
00:00:52,769 --> 00:00:57,530
and a lot of this talk is going to be

17
00:00:54,780 --> 00:01:00,510
the the mix of these roles so how we

18
00:00:57,530 --> 00:01:02,430
integrate security into development and

19
00:01:00,510 --> 00:01:04,379
how we can speed up the processes of

20
00:01:02,430 --> 00:01:09,180
security to match the speed of

21
00:01:04,379 --> 00:01:12,750
development so firstly there's a huge

22
00:01:09,180 --> 00:01:15,890
gap in how we do security testing and

23
00:01:12,750 --> 00:01:19,500
how we do almost every other type of

24
00:01:15,890 --> 00:01:21,359
automated test in development developers

25
00:01:19,500 --> 00:01:23,520
have been doing automated tests for

26
00:01:21,359 --> 00:01:25,130
years they've been writing unit tests

27
00:01:23,520 --> 00:01:27,539
they're writing integration tests

28
00:01:25,130 --> 00:01:29,999
functional tests acceptance tests and

29
00:01:27,539 --> 00:01:32,700
there's a wealth of experience there in

30
00:01:29,999 --> 00:01:35,640
how they've been able to write quick

31
00:01:32,700 --> 00:01:38,510
fast tests and get quick results from

32
00:01:35,640 --> 00:01:41,190
these tests for their applications

33
00:01:38,510 --> 00:01:42,900
security on the other hand we've had a

34
00:01:41,190 --> 00:01:45,929
different approach to doing testing we

35
00:01:42,900 --> 00:01:48,330
rely heavily on manual methods to do our

36
00:01:45,930 --> 00:01:50,850
testing we primarily right rely on

37
00:01:48,330 --> 00:01:54,179
penetration testing and ethical hacking

38
00:01:50,850 --> 00:01:56,309
as the one most important security

39
00:01:54,180 --> 00:01:59,220
testing activity in in the development

40
00:01:56,310 --> 00:02:02,040
lifecycle and the thing about security

41
00:01:59,220 --> 00:02:04,770
testing is we tend to export the

42
00:02:02,040 --> 00:02:06,630
expertise to an external group either

43
00:02:04,770 --> 00:02:09,000
this is an external company who comes in

44
00:02:06,630 --> 00:02:11,880
and does our testing for us or it's a

45
00:02:09,000 --> 00:02:13,230
security team within our company who

46
00:02:11,880 --> 00:02:15,959
comes and does this the point is that

47
00:02:13,230 --> 00:02:19,760
it's not owned by developers security

48
00:02:15,959 --> 00:02:19,760
testing is someone else's responsibility

49
00:02:21,930 --> 00:02:27,819
and to understand how we got there we

50
00:02:24,760 --> 00:02:29,530
have to look a bit back and see how we

51
00:02:27,819 --> 00:02:32,140
how we're developing software at the

52
00:02:29,530 --> 00:02:34,109
moment so the start of the software

53
00:02:32,140 --> 00:02:37,480
revolution really happened with agile

54
00:02:34,109 --> 00:02:39,670
where developers and the business said

55
00:02:37,480 --> 00:02:42,220
we can no longer follow this waterfall

56
00:02:39,670 --> 00:02:44,768
method of development we can no longer

57
00:02:42,220 --> 00:02:46,299
spend six months doing design and then

58
00:02:44,769 --> 00:02:48,310
six months coding and then a year later

59
00:02:46,299 --> 00:02:50,500
figure out this is not the application

60
00:02:48,310 --> 00:02:53,709
we wanted this is not a way to develop

61
00:02:50,500 --> 00:02:55,239
software so we broke software down into

62
00:02:53,709 --> 00:02:57,340
smaller chunks we started writing

63
00:02:55,239 --> 00:02:59,170
individual features each of these

64
00:02:57,340 --> 00:03:01,359
features has a component of design

65
00:02:59,170 --> 00:03:04,958
coding and testing building it built

66
00:03:01,359 --> 00:03:07,930
into it and automated testing was a key

67
00:03:04,959 --> 00:03:10,090
part of doing agile you had to have an

68
00:03:07,930 --> 00:03:14,590
automated test to verify that the thing

69
00:03:10,090 --> 00:03:16,359
I wrote actually works properly the

70
00:03:14,590 --> 00:03:18,280
advantage of an automated test is clear

71
00:03:16,359 --> 00:03:20,680
it costs us nothing to run a test that

72
00:03:18,280 --> 00:03:23,049
means if we have a thousand tests 500

73
00:03:20,680 --> 00:03:24,909
test 10,000 tests we can still run those

74
00:03:23,049 --> 00:03:26,889
tests very quickly and we can have a

75
00:03:24,909 --> 00:03:29,198
very good overview on whether the

76
00:03:26,889 --> 00:03:34,780
application we wrote works as expected

77
00:03:29,199 --> 00:03:38,620
or not the interesting thing about tests

78
00:03:34,780 --> 00:03:41,019
is that they if your tests always

79
00:03:38,620 --> 00:03:43,180
passing there an accurate reflection of

80
00:03:41,019 --> 00:03:45,729
what your code is doing so they can

81
00:03:43,180 --> 00:03:49,329
almost do double duty as documentation

82
00:03:45,729 --> 00:03:51,099
that means you can if you have detailed

83
00:03:49,329 --> 00:03:52,840
enough tests you can use them as the

84
00:03:51,099 --> 00:03:55,530
technical documentation for your

85
00:03:52,840 --> 00:03:55,530
application

86
00:03:57,180 --> 00:04:03,540
so all of these great benefits of agile

87
00:03:59,730 --> 00:04:05,399
finish over here at the end of the

88
00:04:03,540 --> 00:04:06,929
development environment so developers

89
00:04:05,400 --> 00:04:08,700
are doing agile they do development

90
00:04:06,930 --> 00:04:11,159
within their development environment at

91
00:04:08,700 --> 00:04:13,078
the end of agile they have a working

92
00:04:11,159 --> 00:04:16,019
product which they can then take and

93
00:04:13,079 --> 00:04:17,759
hand over to operations and say well now

94
00:04:16,019 --> 00:04:19,949
you deploy it into pre-production now

95
00:04:17,759 --> 00:04:24,360
you do the the additional testing and

96
00:04:19,949 --> 00:04:26,789
deploy it into production so for

97
00:04:24,360 --> 00:04:28,830
security tests this model works quite

98
00:04:26,789 --> 00:04:30,900
well because we have a distinct phase

99
00:04:28,830 --> 00:04:33,030
here between pre-production production

100
00:04:30,900 --> 00:04:34,229
and we can do our security test either

101
00:04:33,030 --> 00:04:35,849
in prod or we can do it in

102
00:04:34,229 --> 00:04:38,820
pre-production because this is a

103
00:04:35,849 --> 00:04:40,800
distinct deploy phase and that works

104
00:04:38,820 --> 00:04:45,780
fine to do our pen testing or ethical

105
00:04:40,800 --> 00:04:48,419
hacking so the problem with agile is we

106
00:04:45,780 --> 00:04:51,030
have this hand over between the dev

107
00:04:48,419 --> 00:04:54,479
environment and the ops environment or

108
00:04:51,030 --> 00:04:56,280
the the pre production environments and

109
00:04:54,479 --> 00:04:58,229
we run into problems like this

110
00:04:56,280 --> 00:05:00,119
developers say our application works and

111
00:04:58,229 --> 00:05:01,169
the ops team says well actually it

112
00:05:00,120 --> 00:05:02,520
doesn't work in the production

113
00:05:01,169 --> 00:05:04,849
environment and developers say well

114
00:05:02,520 --> 00:05:08,310
that's not our problem works in dev and

115
00:05:04,849 --> 00:05:11,010
it may not work in in operations so the

116
00:05:08,310 --> 00:05:14,510
business said well if we can get fast

117
00:05:11,010 --> 00:05:18,570
feedback from our tests in development

118
00:05:14,510 --> 00:05:21,870
can't we extend the process the agile

119
00:05:18,570 --> 00:05:24,300
process into pre-production so that we

120
00:05:21,870 --> 00:05:25,710
can have an automated process all the

121
00:05:24,300 --> 00:05:28,440
way from designed to build to

122
00:05:25,710 --> 00:05:30,479
integration to acceptance this and we

123
00:05:28,440 --> 00:05:32,060
can have fast feedback from those tests

124
00:05:30,479 --> 00:05:34,979
all the way through this process and

125
00:05:32,060 --> 00:05:37,830
skip this distinct hand over into two

126
00:05:34,979 --> 00:05:40,680
pre-production so this is continuous

127
00:05:37,830 --> 00:05:42,960
delivery where we deliver into a pre

128
00:05:40,680 --> 00:05:46,620
production environment in one automated

129
00:05:42,960 --> 00:05:48,060
continuous flow and the next logical

130
00:05:46,620 --> 00:05:49,440
step is to say well if we can do that

131
00:05:48,060 --> 00:05:51,090
into pre-production if you've got our

132
00:05:49,440 --> 00:05:53,759
automated acceptance tests that

133
00:05:51,090 --> 00:05:56,099
previously were manual tests can't we

134
00:05:53,759 --> 00:05:58,289
extend those all the way into the

135
00:05:56,099 --> 00:06:01,680
production environment so that we have

136
00:05:58,289 --> 00:06:04,740
one continuous pipeline all the way from

137
00:06:01,680 --> 00:06:06,510
dev we can make a change in dev and we

138
00:06:04,740 --> 00:06:08,250
can see that change propagate all the

139
00:06:06,510 --> 00:06:10,289
way through our environments running

140
00:06:08,250 --> 00:06:10,980
tests in different environments until it

141
00:06:10,289 --> 00:06:13,349
finally land

142
00:06:10,980 --> 00:06:17,460
in production and we have our our change

143
00:06:13,350 --> 00:06:21,000
in effect and the famous examples of

144
00:06:17,460 --> 00:06:23,130
this are companies like Etsy who the

145
00:06:21,000 --> 00:06:25,320
developers on the first day get to make

146
00:06:23,130 --> 00:06:27,480
a change in development and see that

147
00:06:25,320 --> 00:06:29,520
change working in production on that

148
00:06:27,480 --> 00:06:31,950
very same day because they have this

149
00:06:29,520 --> 00:06:35,330
automated pipeline it costs them almost

150
00:06:31,950 --> 00:06:38,310
nothing to do a deploy into production

151
00:06:35,330 --> 00:06:40,469
some other examples even relatively

152
00:06:38,310 --> 00:06:43,380
conservative organizations like gov dot

153
00:06:40,470 --> 00:06:44,940
uk' is following this process and doing

154
00:06:43,380 --> 00:06:48,930
more than 10 deploys a day into

155
00:06:44,940 --> 00:06:50,190
production amazon 300 deploys across

156
00:06:48,930 --> 00:06:54,690
their entire application infrastructure

157
00:06:50,190 --> 00:06:56,870
per hour so what does that mean for

158
00:06:54,690 --> 00:06:59,370
security tests if we're relying on our

159
00:06:56,870 --> 00:07:02,820
ethical hacking and penetration testing

160
00:06:59,370 --> 00:07:06,120
here once a year twice a year and we're

161
00:07:02,820 --> 00:07:07,980
making 300 changes per hour that means

162
00:07:06,120 --> 00:07:09,900
we're exposed to a huge amount of risk

163
00:07:07,980 --> 00:07:11,730
of all these changes that we're doing to

164
00:07:09,900 --> 00:07:15,979
the application that aren't undergoing

165
00:07:11,730 --> 00:07:15,980
any kind of security testing at all

166
00:07:17,870 --> 00:07:20,810
and really if we want to answer this

167
00:07:19,550 --> 00:07:23,180
question we don't have to look very far

168
00:07:20,810 --> 00:07:25,160
because developers have already solved

169
00:07:23,180 --> 00:07:27,980
this problem and they've solved it for

170
00:07:25,160 --> 00:07:30,620
quality testing in the same way we used

171
00:07:27,980 --> 00:07:32,840
to have a dedicated quality testing team

172
00:07:30,620 --> 00:07:35,960
that all they did was QA testing and

173
00:07:32,840 --> 00:07:37,760
nothing else that has moved slightly so

174
00:07:35,960 --> 00:07:39,919
that we have a reduced quality testing

175
00:07:37,760 --> 00:07:42,170
team and those types of tests are now

176
00:07:39,920 --> 00:07:43,790
automated and part of dev devs

177
00:07:42,170 --> 00:07:45,380
themselves are writing their integration

178
00:07:43,790 --> 00:07:47,930
tests and they're writing the acceptance

179
00:07:45,380 --> 00:07:51,680
tests before they arrive at any manual

180
00:07:47,930 --> 00:07:53,630
testing procedures it means our tests

181
00:07:51,680 --> 00:07:55,550
are closer to the code so that means

182
00:07:53,630 --> 00:07:57,560
when we can we can run the test quicker

183
00:07:55,550 --> 00:07:59,960
and we can get feedback that something

184
00:07:57,560 --> 00:08:05,600
is failing much faster than relying on

185
00:07:59,960 --> 00:08:08,090
an external manual process and I claim

186
00:08:05,600 --> 00:08:10,100
that we can do the same for security we

187
00:08:08,090 --> 00:08:12,650
can take that same logical step to

188
00:08:10,100 --> 00:08:14,690
automate these types of tests these

189
00:08:12,650 --> 00:08:16,909
security tests and pull them into

190
00:08:14,690 --> 00:08:18,980
development we may not be able to get

191
00:08:16,910 --> 00:08:20,690
one hundred percent coverage but we can

192
00:08:18,980 --> 00:08:23,330
at least get eighty or ninety percent

193
00:08:20,690 --> 00:08:25,730
coverage and do something to address the

194
00:08:23,330 --> 00:08:27,590
risk of so many rapid changes to our

195
00:08:25,730 --> 00:08:30,100
application without any kind of security

196
00:08:27,590 --> 00:08:30,099
testing

197
00:08:31,050 --> 00:08:36,690
so the important question if you like

198
00:08:34,469 --> 00:08:38,130
this idea of doing automated testing the

199
00:08:36,690 --> 00:08:41,399
first question you need to answer is who

200
00:08:38,130 --> 00:08:43,500
owns the tests if we have a continuous

201
00:08:41,399 --> 00:08:45,510
pipeline from dev all the way into

202
00:08:43,500 --> 00:08:47,760
production and we have these tests

203
00:08:45,510 --> 00:08:50,670
running all the time what happens when a

204
00:08:47,760 --> 00:08:53,670
test fails who responds to that test

205
00:08:50,670 --> 00:08:57,740
failure and does it test failure block

206
00:08:53,670 --> 00:09:00,719
my delivery process so a lot of these

207
00:08:57,740 --> 00:09:03,029
need to be answered and are based on the

208
00:09:00,720 --> 00:09:05,510
fact of who owns those tests who

209
00:09:03,029 --> 00:09:07,920
responds to them who maintains them

210
00:09:05,510 --> 00:09:10,920
option a is that your security team owns

211
00:09:07,920 --> 00:09:12,870
those tests so you've haven't really

212
00:09:10,920 --> 00:09:14,069
integrated security into the development

213
00:09:12,870 --> 00:09:16,589
process what you've done is you've

214
00:09:14,070 --> 00:09:18,750
automated a set of tests they're still

215
00:09:16,589 --> 00:09:20,730
owned by the security team which means a

216
00:09:18,750 --> 00:09:25,050
security team needs to respond when

217
00:09:20,730 --> 00:09:26,550
those tests fail you won't have as much

218
00:09:25,050 --> 00:09:27,870
collaboration with a development team

219
00:09:26,550 --> 00:09:30,180
because they still have that same

220
00:09:27,870 --> 00:09:32,339
mindset security is not my

221
00:09:30,180 --> 00:09:34,319
responsibility it's someone else's

222
00:09:32,339 --> 00:09:37,760
responsibility and I can rely on them to

223
00:09:34,320 --> 00:09:40,610
go and find the security problems

224
00:09:37,760 --> 00:09:43,400
so what that kind of model allows you to

225
00:09:40,610 --> 00:09:47,450
do is to go for a process like this i

226
00:09:43,400 --> 00:09:49,819
call it semi sec devops right so we can

227
00:09:47,450 --> 00:09:51,740
still have our regular delivery pipeline

228
00:09:49,820 --> 00:09:53,630
for our normal tests are normal

229
00:09:51,740 --> 00:09:55,970
functional tests and acceptance tests

230
00:09:53,630 --> 00:09:59,210
which are automated but our security

231
00:09:55,970 --> 00:10:02,020
tests would have to run in parallel it

232
00:09:59,210 --> 00:10:04,550
means they cannot block this process

233
00:10:02,020 --> 00:10:07,430
because if a security test fails and

234
00:10:04,550 --> 00:10:09,319
only the security team can respond then

235
00:10:07,430 --> 00:10:10,969
it takes far too long for them to go

236
00:10:09,320 --> 00:10:12,950
back to developer and say okay we've got

237
00:10:10,970 --> 00:10:15,050
scary test failure wider it fails can

238
00:10:12,950 --> 00:10:16,610
figure it out it's it's far too long if

239
00:10:15,050 --> 00:10:19,040
you're doing 300 deploys an hour this

240
00:10:16,610 --> 00:10:23,420
just cannot scale to meet that pace of

241
00:10:19,040 --> 00:10:25,969
development manual tests are still

242
00:10:23,420 --> 00:10:28,189
necessary we can't completely eliminate

243
00:10:25,970 --> 00:10:31,490
the need for having an intelligent human

244
00:10:28,190 --> 00:10:33,980
actually doing clever the testing

245
00:10:31,490 --> 00:10:36,470
against an application however clever

246
00:10:33,980 --> 00:10:38,750
our automated tests can be there they're

247
00:10:36,470 --> 00:10:41,960
always going to be behind the the

248
00:10:38,750 --> 00:10:45,560
intelligence of a human tester so the

249
00:10:41,960 --> 00:10:48,080
way you could run manual tests is to run

250
00:10:45,560 --> 00:10:49,579
these on a periodic basis do you follow

251
00:10:48,080 --> 00:10:52,970
your regular penetration testing

252
00:10:49,580 --> 00:10:55,250
schedule but ideally any test failures

253
00:10:52,970 --> 00:10:58,400
that come out of manual testing can get

254
00:10:55,250 --> 00:11:00,880
coded up into an automated security test

255
00:10:58,400 --> 00:11:04,069
so you end up creating this Bank of

256
00:11:00,880 --> 00:11:05,450
automated tests even if you paint this

257
00:11:04,070 --> 00:11:07,970
does find something interesting great

258
00:11:05,450 --> 00:11:09,830
write that up as a as a as an automated

259
00:11:07,970 --> 00:11:12,680
test put it in your bank and you can now

260
00:11:09,830 --> 00:11:14,690
run those at loma zero cost at any time

261
00:11:12,680 --> 00:11:16,849
during your delivery process so six

262
00:11:14,690 --> 00:11:19,070
months down the line a developer change

263
00:11:16,850 --> 00:11:21,200
is something in the application and the

264
00:11:19,070 --> 00:11:24,770
test that you wrote six months ago is

265
00:11:21,200 --> 00:11:27,430
now ready to catch any problems in that

266
00:11:24,770 --> 00:11:27,430
in their test

267
00:11:30,950 --> 00:11:35,690
a second option is that you can have

268
00:11:33,020 --> 00:11:38,030
more integration more collaboration

269
00:11:35,690 --> 00:11:39,620
between the developer and there will the

270
00:11:38,030 --> 00:11:42,980
dev ops team and the security team in

271
00:11:39,620 --> 00:11:45,170
that the dev ops team own those tests so

272
00:11:42,980 --> 00:11:47,420
they say these are our tests if a test

273
00:11:45,170 --> 00:11:50,120
fails it's my responsibility to fix it

274
00:11:47,420 --> 00:11:52,069
but i can use security as a backup

275
00:11:50,120 --> 00:11:53,750
solution so i can go to my security team

276
00:11:52,070 --> 00:11:55,220
and say well this particular test i

277
00:11:53,750 --> 00:11:56,390
don't know why it's failing i don't know

278
00:11:55,220 --> 00:11:58,310
what the problem is i don't know what

279
00:11:56,390 --> 00:12:00,980
what I'm trying to test with this test

280
00:11:58,310 --> 00:12:04,810
so they can come back to to the security

281
00:12:00,980 --> 00:12:07,760
team and use them like a backup process

282
00:12:04,810 --> 00:12:10,310
and the final option is then to have one

283
00:12:07,760 --> 00:12:13,790
team and this is the the DevOps dream to

284
00:12:10,310 --> 00:12:15,949
have a single integrated team where you

285
00:12:13,790 --> 00:12:17,420
have different team members they might

286
00:12:15,950 --> 00:12:19,400
have different strengths and different

287
00:12:17,420 --> 00:12:21,439
weaknesses you might have one person who

288
00:12:19,400 --> 00:12:23,329
is more security inclined than a

289
00:12:21,440 --> 00:12:25,550
different person but they're all doing a

290
00:12:23,330 --> 00:12:27,590
bit of everything so you spread the

291
00:12:25,550 --> 00:12:30,800
knowledge within the team and you don't

292
00:12:27,590 --> 00:12:32,210
have a silo of us versus them I think

293
00:12:30,800 --> 00:12:33,979
that's one of the things that the

294
00:12:32,210 --> 00:12:36,290
security industry is particularly guilty

295
00:12:33,980 --> 00:12:37,850
of is that we like to think of security

296
00:12:36,290 --> 00:12:40,069
as something special you know we were

297
00:12:37,850 --> 00:12:41,420
where the security guys and we're the

298
00:12:40,070 --> 00:12:43,400
only ones who know how to how to fix

299
00:12:41,420 --> 00:12:46,099
these particular problems we need to let

300
00:12:43,400 --> 00:12:47,510
go of that idea and say that we're we

301
00:12:46,100 --> 00:12:49,340
all want the same thing we all want to

302
00:12:47,510 --> 00:12:51,530
build the secure applications and if we

303
00:12:49,340 --> 00:12:55,070
can all move towards that goal then so

304
00:12:51,530 --> 00:12:58,670
much the better so with these last two

305
00:12:55,070 --> 00:13:01,370
types of models if the ownership rests

306
00:12:58,670 --> 00:13:04,280
with developers then we can start using

307
00:13:01,370 --> 00:13:07,040
integrated security tests that are part

308
00:13:04,280 --> 00:13:09,530
of our pipeline and we can have blocking

309
00:13:07,040 --> 00:13:12,260
security tests my security test fails

310
00:13:09,530 --> 00:13:14,209
that means my deploy fails and we're not

311
00:13:12,260 --> 00:13:17,210
going to deploy into production because

312
00:13:14,210 --> 00:13:18,710
we have a security failure but important

313
00:13:17,210 --> 00:13:21,290
that you need to be able to respond to

314
00:13:18,710 --> 00:13:23,750
this fast enough to not delay the

315
00:13:21,290 --> 00:13:26,709
business and to not to not delay that

316
00:13:23,750 --> 00:13:26,710
process

317
00:13:29,220 --> 00:13:35,100
so I've been talking very lightly about

318
00:13:32,420 --> 00:13:36,479
automated tests and so on but let's get

319
00:13:35,100 --> 00:13:40,019
in a bit more detail about what exactly

320
00:13:36,480 --> 00:13:42,449
is an automated security test so there

321
00:13:40,019 --> 00:13:44,490
are a few different types of tests the

322
00:13:42,449 --> 00:13:46,258
first one is the fact that we've already

323
00:13:44,490 --> 00:13:48,329
got lots of automated security tools

324
00:13:46,259 --> 00:13:50,300
we've got automated scanning tools

325
00:13:48,329 --> 00:13:53,250
static scanners we've got dynamic

326
00:13:50,300 --> 00:13:55,589
testing tools dynamic scanners and so

327
00:13:53,250 --> 00:13:57,689
these are already doing an automated job

328
00:13:55,589 --> 00:13:59,939
for us but there's a difference between

329
00:13:57,689 --> 00:14:01,980
running a scan and running a test and

330
00:13:59,939 --> 00:14:05,759
the primary difference is a test has

331
00:14:01,980 --> 00:14:07,620
only two outcomes it passes or fails but

332
00:14:05,759 --> 00:14:10,230
if you run a scan against something the

333
00:14:07,620 --> 00:14:12,629
outcome is a report with hundreds of

334
00:14:10,230 --> 00:14:16,290
findings so what we need to be able to

335
00:14:12,629 --> 00:14:19,620
do is to transform that report in to

336
00:14:16,290 --> 00:14:22,290
pass or fail and we can do that by

337
00:14:19,620 --> 00:14:24,389
wrapping the tools with a test and using

338
00:14:22,290 --> 00:14:26,099
some some logic within our test to

339
00:14:24,389 --> 00:14:30,240
transform that information into a simple

340
00:14:26,100 --> 00:14:32,730
pass or fail we then also have our known

341
00:14:30,240 --> 00:14:36,149
security requirements so up front before

342
00:14:32,730 --> 00:14:37,769
we even start doing any development work

343
00:14:36,149 --> 00:14:39,269
or even before we start deploying any

344
00:14:37,769 --> 00:14:41,579
applications or building any

345
00:14:39,269 --> 00:14:43,740
infrastructure we know some of the

346
00:14:41,579 --> 00:14:45,599
security requirements that we want right

347
00:14:43,740 --> 00:14:47,670
at the start we know which ports are

348
00:14:45,600 --> 00:14:49,980
meant to be open on that server we know

349
00:14:47,670 --> 00:14:52,529
which SSL ciphers we want to support on

350
00:14:49,980 --> 00:14:55,740
the ssl server so those are known things

351
00:14:52,529 --> 00:14:57,329
we can test for and put them into test

352
00:14:55,740 --> 00:14:58,920
and we can have a very clear pass or

353
00:14:57,329 --> 00:15:00,959
fail if they meet our requirements or

354
00:14:58,920 --> 00:15:03,899
not these are one of the easiest ones to

355
00:15:00,959 --> 00:15:06,300
to write tests for and then at the

356
00:15:03,899 --> 00:15:09,300
application layer itself we can then

357
00:15:06,300 --> 00:15:11,550
test for more functional type of aspects

358
00:15:09,300 --> 00:15:13,170
and this is sort of a gray area between

359
00:15:11,550 --> 00:15:15,589
functional testing and between

360
00:15:13,170 --> 00:15:18,870
functional security testing things like

361
00:15:15,589 --> 00:15:21,180
am I locked out of my accounts if I

362
00:15:18,870 --> 00:15:22,740
enter the wrong password four times so

363
00:15:21,180 --> 00:15:25,410
that's a functional test and it's also a

364
00:15:22,740 --> 00:15:27,600
security test so we can test for those

365
00:15:25,410 --> 00:15:30,180
types of things as part of our security

366
00:15:27,600 --> 00:15:32,160
test suite as well

367
00:15:30,180 --> 00:15:33,899
and the last one is probably a bit more

368
00:15:32,160 --> 00:15:36,149
complicated and requires the most work

369
00:15:33,899 --> 00:15:38,160
from us and this is where we take a test

370
00:15:36,149 --> 00:15:39,660
that has been done manually so something

371
00:15:38,160 --> 00:15:42,270
that the ethical hacking team has done

372
00:15:39,660 --> 00:15:44,160
or the penetration testing team they

373
00:15:42,270 --> 00:15:46,260
found some vulnerability and we need to

374
00:15:44,160 --> 00:15:48,480
write a custom test that describes

375
00:15:46,260 --> 00:15:52,790
exactly what they found so that we can

376
00:15:48,480 --> 00:15:52,790
have an automated version of that test

377
00:15:54,660 --> 00:16:01,170
so to do we address all of those types

378
00:15:57,269 --> 00:16:04,589
of tests we created the BDD security

379
00:16:01,170 --> 00:16:07,139
framework and BDDs primarily is

380
00:16:04,589 --> 00:16:09,149
interested in supporting all four but

381
00:16:07,139 --> 00:16:12,959
out the box we support the first three

382
00:16:09,149 --> 00:16:14,610
the best and the easiest so BD D stands

383
00:16:12,959 --> 00:16:16,469
for behavior driven development you may

384
00:16:14,610 --> 00:16:19,199
have heard of TDD test-driven

385
00:16:16,470 --> 00:16:22,589
development so BDD takes this one step

386
00:16:19,199 --> 00:16:24,628
further and says automated tests are

387
00:16:22,589 --> 00:16:26,610
great they're wonderful we like our

388
00:16:24,629 --> 00:16:27,990
automated tests the problem with

389
00:16:26,610 --> 00:16:30,060
automated tests is that they're written

390
00:16:27,990 --> 00:16:32,160
in a programming language that means

391
00:16:30,060 --> 00:16:35,008
only programmers are going to understand

392
00:16:32,160 --> 00:16:37,920
my test and if we're looking at a

393
00:16:35,009 --> 00:16:40,129
cross-functional team like dev ops or

394
00:16:37,920 --> 00:16:42,060
dev psych ops we have many

395
00:16:40,129 --> 00:16:44,129
non-programmers that are part of our

396
00:16:42,060 --> 00:16:46,768
team and we want everybody to understand

397
00:16:44,129 --> 00:16:49,410
our requirements so BDD was primarily

398
00:16:46,769 --> 00:16:51,839
invented for acceptance tests to allow

399
00:16:49,410 --> 00:16:53,699
business analysts to write a test a

400
00:16:51,839 --> 00:16:55,709
functional test and then the program is

401
00:16:53,699 --> 00:16:57,930
going to interpret that and we've taken

402
00:16:55,709 --> 00:17:00,508
that and turned it into security testing

403
00:16:57,930 --> 00:17:04,349
which is the focus of the BDD security

404
00:17:00,509 --> 00:17:05,909
framework so under the covers it's an

405
00:17:04,349 --> 00:17:09,599
open source framework free to use you

406
00:17:05,909 --> 00:17:12,209
can download it off of github underneath

407
00:17:09,599 --> 00:17:14,698
it uses J behave as the BDD framework so

408
00:17:12,209 --> 00:17:17,400
it uses its based on Java we then also

409
00:17:14,699 --> 00:17:20,490
use selenium webdriver to drive a

410
00:17:17,400 --> 00:17:22,350
browser we use our webs app Nessus some

411
00:17:20,490 --> 00:17:25,429
internal tools that we've written as

412
00:17:22,349 --> 00:17:27,899
well and what we provide is a set of

413
00:17:25,429 --> 00:17:30,059
pre-written baseline security

414
00:17:27,900 --> 00:17:33,059
specifications so if you wanted to write

415
00:17:30,059 --> 00:17:35,820
a functional tests that work for amazon

416
00:17:33,059 --> 00:17:37,379
and ebay and citibank you're gonna have

417
00:17:35,820 --> 00:17:38,580
a tough time defining one set of tests

418
00:17:37,380 --> 00:17:40,950
that work for everybody because they are

419
00:17:38,580 --> 00:17:42,600
such different sites but security

420
00:17:40,950 --> 00:17:44,700
doesn't have this problem because we are

421
00:17:42,600 --> 00:17:48,360
we have more or less the same type of

422
00:17:44,700 --> 00:17:50,400
requirements for most sites so what

423
00:17:48,360 --> 00:17:54,059
we've gone for is a middle-of-the-road a

424
00:17:50,400 --> 00:17:56,370
wasp type of approach for testing so we

425
00:17:54,059 --> 00:17:58,918
can write one set of baseline tests and

426
00:17:56,370 --> 00:18:01,350
we can then very easily just change

427
00:17:58,919 --> 00:18:04,730
parameters within the tests to adapt to

428
00:18:01,350 --> 00:18:04,730
our own security requirements

429
00:18:05,559 --> 00:18:13,309
so some examples so this is the first

430
00:18:10,370 --> 00:18:15,949
very simple example and this is written

431
00:18:13,309 --> 00:18:19,070
in bde security and this is jay behave

432
00:18:15,950 --> 00:18:20,809
what Jay behave looks like so there are

433
00:18:19,070 --> 00:18:25,100
a few things here which are part of the

434
00:18:20,809 --> 00:18:29,178
syntax of Jay behave the meta the

435
00:18:25,100 --> 00:18:31,909
scenario and the given when and then and

436
00:18:29,179 --> 00:18:35,270
this is the format of our tests so we're

437
00:18:31,910 --> 00:18:38,840
saying we have a scenario which is at

438
00:18:35,270 --> 00:18:41,600
the BDD lingo for a test so every test

439
00:18:38,840 --> 00:18:44,629
maps to a scenario and a group of test

440
00:18:41,600 --> 00:18:47,299
is called a story so I have one story

441
00:18:44,630 --> 00:18:50,720
here inside once one scenario inside my

442
00:18:47,299 --> 00:18:53,000
story and you can see it's written in a

443
00:18:50,720 --> 00:18:54,799
natural language which can be any

444
00:18:53,000 --> 00:18:58,460
language it supports most of the

445
00:18:54,799 --> 00:19:00,020
international languages we're doing a

446
00:18:58,460 --> 00:19:02,299
simple port scan here so we're looking

447
00:19:00,020 --> 00:19:04,090
at the target host from a base URL which

448
00:19:02,299 --> 00:19:07,280
we grabbed from a configuration file

449
00:19:04,090 --> 00:19:09,350
we're then testing the TCP ports from 1

450
00:19:07,280 --> 00:19:11,660
to 6 45 35 we're scanning with so many

451
00:19:09,350 --> 00:19:14,990
threads in so many time out we're then

452
00:19:11,660 --> 00:19:19,100
grabbing all the open ports and we only

453
00:19:14,990 --> 00:19:23,690
want port 80 and 443 to be open and this

454
00:19:19,100 --> 00:19:25,969
is our test this is executable everyone

455
00:19:23,690 --> 00:19:28,850
of every line here is backed by a bit of

456
00:19:25,970 --> 00:19:31,710
code so you can execute this as an

457
00:19:28,850 --> 00:19:33,988
automated test

458
00:19:31,710 --> 00:19:37,989
so in fact we're actually looking at

459
00:19:33,989 --> 00:19:42,700
three things here or two things we're

460
00:19:37,989 --> 00:19:44,830
looking at firstly an executable tests

461
00:19:42,700 --> 00:19:46,299
so this is the same as a J unit test or

462
00:19:44,830 --> 00:19:48,309
any type of unit tests that we would run

463
00:19:46,299 --> 00:19:51,970
we can run it it costs us nothing to run

464
00:19:48,309 --> 00:19:54,639
this it's very fast at the same time

465
00:19:51,970 --> 00:19:56,799
it's a specification because we can

466
00:19:54,639 --> 00:19:58,809
write this test before we start writing

467
00:19:56,799 --> 00:20:01,330
any code and we can have this as

468
00:19:58,809 --> 00:20:03,279
documentation to give not to the

469
00:20:01,330 --> 00:20:05,109
penetration tester but first to the

470
00:20:03,279 --> 00:20:07,450
person who's building the server for us

471
00:20:05,109 --> 00:20:09,070
saying this is what I want from my

472
00:20:07,450 --> 00:20:10,899
server and the guy who is building the

473
00:20:09,070 --> 00:20:12,639
servings they are oh and I know what you

474
00:20:10,899 --> 00:20:15,518
want from the server I'll configure the

475
00:20:12,639 --> 00:20:16,928
firewall to meet this specification so

476
00:20:15,519 --> 00:20:18,940
effectively we've gotten rid of this

477
00:20:16,929 --> 00:20:21,190
documentation layer where we said this

478
00:20:18,940 --> 00:20:22,539
is what we want and this is how we're

479
00:20:21,190 --> 00:20:25,419
going to test for it we've now got one

480
00:20:22,539 --> 00:20:27,908
version of the truth which is this test

481
00:20:25,419 --> 00:20:30,279
and it says this is what I want and I

482
00:20:27,909 --> 00:20:34,409
can run this thing itself to test

483
00:20:30,279 --> 00:20:34,409
whether I've reached this level of truth

484
00:20:35,660 --> 00:20:41,960
a more complex example so this is how

485
00:20:38,330 --> 00:20:43,970
we're using Nessus to do our testing of

486
00:20:41,960 --> 00:20:47,000
the infrastructure for us this example

487
00:20:43,970 --> 00:20:49,550
of wrapping an existing tool in a test

488
00:20:47,000 --> 00:20:51,050
so again we're not doing any rocket

489
00:20:49,550 --> 00:20:52,550
science here nessus is doing all the

490
00:20:51,050 --> 00:20:54,680
hard work for us it's actually doing

491
00:20:52,550 --> 00:20:57,290
that the test for us what we're doing is

492
00:20:54,680 --> 00:21:00,860
interpreting that into a yes a pass or a

493
00:20:57,290 --> 00:21:03,580
fail test result so firstly we talk to

494
00:21:00,860 --> 00:21:06,290
our nests a server we log in and

495
00:21:03,580 --> 00:21:10,270
everything you see here that's in green

496
00:21:06,290 --> 00:21:13,310
is a parameter which means that

497
00:21:10,270 --> 00:21:16,070
non-programmers can edit this plain text

498
00:21:13,310 --> 00:21:18,200
file and change the location of the

499
00:21:16,070 --> 00:21:20,720
necessaries change the policy add

500
00:21:18,200 --> 00:21:23,150
different hosts that they won't scanned

501
00:21:20,720 --> 00:21:25,540
or any other parameter within the within

502
00:21:23,150 --> 00:21:28,220
the test so we have this kind of

503
00:21:25,540 --> 00:21:30,440
interaction between non-programmers who

504
00:21:28,220 --> 00:21:33,740
can now change features in the test for

505
00:21:30,440 --> 00:21:35,390
us so the interesting part about this

506
00:21:33,740 --> 00:21:37,220
test is what we do at the end here

507
00:21:35,390 --> 00:21:39,950
because we need to arrive at a pass or a

508
00:21:37,220 --> 00:21:42,230
fail from an SS can report so we follow

509
00:21:39,950 --> 00:21:43,340
the same process we would manually we

510
00:21:42,230 --> 00:21:45,050
have a list of a thousand

511
00:21:43,340 --> 00:21:47,030
vulnerabilities and if you give this to

512
00:21:45,050 --> 00:21:48,350
a security analyst is going to say well

513
00:21:47,030 --> 00:21:50,600
now I need to figure out which of those

514
00:21:48,350 --> 00:21:53,889
is false positives and the first time

515
00:21:50,600 --> 00:21:57,649
you run this test you would have to add

516
00:21:53,890 --> 00:21:59,780
manually which of these findings or

517
00:21:57,650 --> 00:22:01,760
false positives so that you have a bank

518
00:21:59,780 --> 00:22:03,560
of known false positives for this

519
00:22:01,760 --> 00:22:05,299
particular test run for this particular

520
00:22:03,560 --> 00:22:07,249
application

521
00:22:05,299 --> 00:22:10,970
and the final step we do is then to

522
00:22:07,249 --> 00:22:13,249
decide how when are we going to pass and

523
00:22:10,970 --> 00:22:15,049
when are we going to fail this test so

524
00:22:13,249 --> 00:22:18,710
again this depends on on you and your

525
00:22:15,049 --> 00:22:19,999
level of appetite for risk you may want

526
00:22:18,710 --> 00:22:22,720
to have this lower you may want to have

527
00:22:19,999 --> 00:22:22,720
this higher

528
00:22:26,390 --> 00:22:30,110
so there's a both both of those

529
00:22:28,640 --> 00:22:32,090
attaching on infrastructure we did port

530
00:22:30,110 --> 00:22:34,189
scanning with its wrapper around nessus

531
00:22:32,090 --> 00:22:36,740
but how about testing the actual

532
00:22:34,190 --> 00:22:38,990
application layer so if we manually test

533
00:22:36,740 --> 00:22:41,690
the application layer as penetration

534
00:22:38,990 --> 00:22:44,150
testers we'd use a browser connected to

535
00:22:41,690 --> 00:22:47,690
something like I was a poor burp and we

536
00:22:44,150 --> 00:22:49,700
use that to then test the server what

537
00:22:47,690 --> 00:22:52,460
we're doing with BDD security is using

538
00:22:49,700 --> 00:22:55,730
selenium to drive the browser and we're

539
00:22:52,460 --> 00:22:57,920
using iOS app API to talk to zap so that

540
00:22:55,730 --> 00:22:59,720
we can automate anything that you could

541
00:22:57,920 --> 00:23:06,170
have done as a manual tester we can now

542
00:22:59,720 --> 00:23:08,570
automate using BDD security so apart

543
00:23:06,170 --> 00:23:12,290
from all the logical tests let's just

544
00:23:08,570 --> 00:23:13,850
look at the scanning the pot of using

545
00:23:12,290 --> 00:23:16,430
our SAP to test the security of an

546
00:23:13,850 --> 00:23:19,250
application so this follows the same

547
00:23:16,430 --> 00:23:22,010
formula as we did for NASA's firstly

548
00:23:19,250 --> 00:23:23,840
we're going to navigate the application

549
00:23:22,010 --> 00:23:26,300
and if you've used any of those proxies

550
00:23:23,840 --> 00:23:29,060
you'll know that they're only going to

551
00:23:26,300 --> 00:23:30,620
scan traffic that they've seen so if

552
00:23:29,060 --> 00:23:32,600
you're using burp or zap you have to

553
00:23:30,620 --> 00:23:34,489
navigate the application first you have

554
00:23:32,600 --> 00:23:37,490
to fill in forms you have to submit data

555
00:23:34,490 --> 00:23:38,780
and then tells app go and scan this for

556
00:23:37,490 --> 00:23:40,610
me because if you don't do that you're

557
00:23:38,780 --> 00:23:43,330
going to miss a lot of functionality

558
00:23:40,610 --> 00:23:43,330
within the application

559
00:23:45,120 --> 00:23:49,929
so what we do is we have a separate

560
00:23:47,920 --> 00:23:52,990
story which controls the navigation of

561
00:23:49,930 --> 00:23:55,120
the application and here is our navigate

562
00:23:52,990 --> 00:23:57,610
app story and it says we're going to

563
00:23:55,120 --> 00:23:59,979
start a new scanner we're going to first

564
00:23:57,610 --> 00:24:02,110
and navigate the application by calling

565
00:23:59,980 --> 00:24:04,750
this method and what's behind this

566
00:24:02,110 --> 00:24:07,300
method is selenium I'll show you this in

567
00:24:04,750 --> 00:24:09,100
the demo but we have a set of selenium

568
00:24:07,300 --> 00:24:11,169
steps that the stripe how do we go neva

569
00:24:09,100 --> 00:24:14,169
gate this application so how do i login

570
00:24:11,170 --> 00:24:16,180
how do i then submit the form or make a

571
00:24:14,170 --> 00:24:18,160
purchase or do something interesting in

572
00:24:16,180 --> 00:24:20,140
my application to then have that scan

573
00:24:18,160 --> 00:24:22,720
bye-byes app so we define that in

574
00:24:20,140 --> 00:24:25,630
selenium once we have that we can then

575
00:24:22,720 --> 00:24:27,250
define URLs to exclude so we don't want

576
00:24:25,630 --> 00:24:28,990
the scanner to go hit the log out link

577
00:24:27,250 --> 00:24:33,250
because then all our tests are invalid

578
00:24:28,990 --> 00:24:35,620
so we can add other URLs there and we

579
00:24:33,250 --> 00:24:37,510
can then use apps built in spider to

580
00:24:35,620 --> 00:24:39,939
spider the rest of the application and

581
00:24:37,510 --> 00:24:42,780
find more content just in case there's

582
00:24:39,940 --> 00:24:42,780
more content there

583
00:24:44,140 --> 00:24:49,040
okay so oft we've done a navigate app we

584
00:24:46,940 --> 00:24:51,020
can then configure a scanning policy in

585
00:24:49,040 --> 00:24:53,350
zam the way we've done it in BDD

586
00:24:51,020 --> 00:24:55,430
security is to separate each

587
00:24:53,350 --> 00:24:56,510
vulnerability branch so we've got a

588
00:24:55,430 --> 00:24:58,280
separate test for cross-site scripting

589
00:24:56,510 --> 00:25:00,890
scanning we've got a separate test for

590
00:24:58,280 --> 00:25:04,280
SQL injection ldap and so on so that you

591
00:25:00,890 --> 00:25:06,710
can be you can have more granularity in

592
00:25:04,280 --> 00:25:09,860
deciding which test to fail which tests

593
00:25:06,710 --> 00:25:11,810
to pass and we do the same thing here

594
00:25:09,860 --> 00:25:13,939
with the false positives we exclude

595
00:25:11,810 --> 00:25:16,129
known false positives from the tests and

596
00:25:13,940 --> 00:25:19,220
then we have our passing or failing

597
00:25:16,130 --> 00:25:21,020
criteria so the false positives here we

598
00:25:19,220 --> 00:25:23,840
store them in a separate file it's a

599
00:25:21,020 --> 00:25:26,060
plain text file and we can add the URL

600
00:25:23,840 --> 00:25:27,919
the parameter in the cwe ID so that

601
00:25:26,060 --> 00:25:30,700
these don't count towards our our test

602
00:25:27,920 --> 00:25:30,700
passing or failure

603
00:25:33,080 --> 00:25:37,550
so the interesting thing about false

604
00:25:35,360 --> 00:25:39,830
positives of course from a process

605
00:25:37,550 --> 00:25:41,510
perspective is somebody goes and adds a

606
00:25:39,830 --> 00:25:43,100
false positive that isn't a false

607
00:25:41,510 --> 00:25:44,660
positive you've now got a problem

608
00:25:43,100 --> 00:25:46,250
because you've got a passing test which

609
00:25:44,660 --> 00:25:48,610
perhaps shouldn't pass because you've

610
00:25:46,250 --> 00:25:50,930
actually got a vulnerability there and

611
00:25:48,610 --> 00:25:54,709
the nice thing though is that it's all

612
00:25:50,930 --> 00:25:57,980
plain text and the tests themselves are

613
00:25:54,710 --> 00:26:00,740
part of your code so these tests the

614
00:25:57,980 --> 00:26:02,480
whole BDD framework is stored in source

615
00:26:00,740 --> 00:26:04,550
code repository along with all your

616
00:26:02,480 --> 00:26:05,780
other acceptance tests and along with

617
00:26:04,550 --> 00:26:08,360
the source code of your application

618
00:26:05,780 --> 00:26:11,149
itself which means that you can track

619
00:26:08,360 --> 00:26:13,879
who made changes to what text file at

620
00:26:11,150 --> 00:26:16,310
what point so there's this traceability

621
00:26:13,880 --> 00:26:19,250
for for all false positives and you know

622
00:26:16,310 --> 00:26:20,720
for any change to anything within the

623
00:26:19,250 --> 00:26:28,460
application that might have an impact on

624
00:26:20,720 --> 00:26:30,920
security so this is what the navigates

625
00:26:28,460 --> 00:26:33,290
well this is what the scanning scenario

626
00:26:30,920 --> 00:26:35,270
looks like and when you run the test it

627
00:26:33,290 --> 00:26:37,340
generates reports in j unit format and

628
00:26:35,270 --> 00:26:39,889
also in HTML format so we can see a nice

629
00:26:37,340 --> 00:26:41,570
HTML report which shows us where our

630
00:26:39,890 --> 00:26:43,880
test failures are and this is what a

631
00:26:41,570 --> 00:26:45,980
test failure would like we can say we've

632
00:26:43,880 --> 00:26:47,600
got more than medium risk

633
00:26:45,980 --> 00:26:49,460
vulnerabilities in fact we've got to

634
00:26:47,600 --> 00:26:54,230
medium risks we've got an SQL injection

635
00:26:49,460 --> 00:26:56,690
over here and another one somewhere else

636
00:26:54,230 --> 00:26:58,310
okay so we can get test failures and we

637
00:26:56,690 --> 00:27:01,330
can get information about what the test

638
00:26:58,310 --> 00:27:01,330
failures are immediately

639
00:27:07,870 --> 00:27:13,629
ok so let's have a look at what this

640
00:27:10,450 --> 00:27:16,590
framework looks like I don't think you

641
00:27:13,630 --> 00:27:16,590
can see much like that

642
00:27:22,310 --> 00:27:26,290
let's try our luck the 720

643
00:27:43,060 --> 00:27:47,210
okay so this is what the debility

644
00:27:45,710 --> 00:27:50,150
security framework looks like it's a

645
00:27:47,210 --> 00:27:51,560
simple Java project it runs ant which

646
00:27:50,150 --> 00:27:54,610
means you can integrate it with almost

647
00:27:51,560 --> 00:27:57,230
anything and we've got our set of

648
00:27:54,610 --> 00:27:59,600
pre-written tests so we've got a number

649
00:27:57,230 --> 00:28:02,540
of pre-written tests for example around

650
00:27:59,600 --> 00:28:03,879
authentication we've got tests for that

651
00:28:02,540 --> 00:28:06,290
the password should be case sensitive

652
00:28:03,880 --> 00:28:11,330
that the login form should be over an

653
00:28:06,290 --> 00:28:15,379
HTTPS connection and so on and so on we

654
00:28:11,330 --> 00:28:19,340
have data security tests to test the

655
00:28:15,380 --> 00:28:22,040
cache control headers we one set we have

656
00:28:19,340 --> 00:28:25,220
tests around what head is we expect from

657
00:28:22,040 --> 00:28:29,300
our web application text frame options

658
00:28:25,220 --> 00:28:31,370
and so on we have our nessus case

659
00:28:29,300 --> 00:28:34,190
password we have session management

660
00:28:31,370 --> 00:28:36,320
tests which tell us how we want the

661
00:28:34,190 --> 00:28:37,970
session to behave when the user logs out

662
00:28:36,320 --> 00:28:40,730
is he actually logged out can you go

663
00:28:37,970 --> 00:28:42,740
back and then reacts s the session so

664
00:28:40,730 --> 00:28:44,990
typically the type of issues you'd find

665
00:28:42,740 --> 00:28:47,150
in the OS top 10 and any other OS

666
00:28:44,990 --> 00:28:49,340
standards we try and include as much of

667
00:28:47,150 --> 00:28:51,770
those as possible within the baseline

668
00:28:49,340 --> 00:28:55,550
set of tests we've also got tests around

669
00:28:51,770 --> 00:28:58,610
SSL mmm ssl which are quite detailed so

670
00:28:55,550 --> 00:29:02,090
we can for example have a specification

671
00:28:58,610 --> 00:29:06,209
that says exactly which ssl protocols

672
00:29:02,090 --> 00:29:10,290
must not be supported on the server

673
00:29:06,210 --> 00:29:12,750
and which should be supported which

674
00:29:10,290 --> 00:29:15,409
ciphers we want to see on that ssl

675
00:29:12,750 --> 00:29:15,410
server

676
00:29:16,210 --> 00:29:20,180
okay so to be able to run this test you

677
00:29:18,680 --> 00:29:21,980
need to do some configuration with the

678
00:29:20,180 --> 00:29:25,030
BDD security framework to get started

679
00:29:21,980 --> 00:29:28,520
step one is to edit a configuration file

680
00:29:25,030 --> 00:29:30,410
so we added a configured XML and we've

681
00:29:28,520 --> 00:29:33,170
got some general configuration items

682
00:29:30,410 --> 00:29:35,300
here like which webdriver instance to

683
00:29:33,170 --> 00:29:38,270
use we currently support firefox chrome

684
00:29:35,300 --> 00:29:40,550
and htmlunit so I've got chrome

685
00:29:38,270 --> 00:29:43,340
configured here we need to configure the

686
00:29:40,550 --> 00:29:47,680
base URL for our application so I'm

687
00:29:43,340 --> 00:29:47,679
going to run some tests against this app

688
00:29:49,270 --> 00:29:54,830
so this is a simple application Bob

689
00:29:52,700 --> 00:30:01,850
password it's vulnerable to a number of

690
00:29:54,830 --> 00:30:04,550
things so we can see how it behaves so

691
00:30:01,850 --> 00:30:06,320
the base secure URL is the ssl URL of

692
00:30:04,550 --> 00:30:08,960
that same app at the moment we don't

693
00:30:06,320 --> 00:30:12,050
have one so i'm using ssl labs we they

694
00:30:08,960 --> 00:30:14,120
need to define a class where which

695
00:30:12,050 --> 00:30:16,820
contains the selenium steps so remember

696
00:30:14,120 --> 00:30:18,770
at the Zap scanning session we had a

697
00:30:16,820 --> 00:30:21,409
navigate method so we need to define

698
00:30:18,770 --> 00:30:23,480
that navigate method in a in a class and

699
00:30:21,410 --> 00:30:25,220
this class is also going to define some

700
00:30:23,480 --> 00:30:26,750
other methods that will allow us to the

701
00:30:25,220 --> 00:30:29,960
functional authentication in session

702
00:30:26,750 --> 00:30:31,520
management test for us okay so we've got

703
00:30:29,960 --> 00:30:33,680
some other configuration options which

704
00:30:31,520 --> 00:30:38,300
are unnecessary we need to tell the

705
00:30:33,680 --> 00:30:40,520
framework which uses we have and few

706
00:30:38,300 --> 00:30:43,220
other configuration items right so let's

707
00:30:40,520 --> 00:30:47,000
have a look at that class file which

708
00:30:43,220 --> 00:30:48,590
contains our selenium steps so this is

709
00:30:47,000 --> 00:30:51,020
what it looks like this is a more

710
00:30:48,590 --> 00:30:52,550
elaborate floral which contains a lot of

711
00:30:51,020 --> 00:30:54,620
additional information that you don't

712
00:30:52,550 --> 00:30:57,139
necessarily need just to get started

713
00:30:54,620 --> 00:30:59,719
with with the app if you just wanted to

714
00:30:57,140 --> 00:31:02,720
do zap scanning with a navigate method

715
00:30:59,720 --> 00:31:05,740
all you needed is this navigate method

716
00:31:02,720 --> 00:31:08,270
here which says open the login page

717
00:31:05,740 --> 00:31:11,420
login with one of the users in my

718
00:31:08,270 --> 00:31:13,220
configured xml file verify that you see

719
00:31:11,420 --> 00:31:15,680
the welcome message go and view

720
00:31:13,220 --> 00:31:18,070
someone's profile and search for the

721
00:31:15,680 --> 00:31:18,070
text

722
00:31:18,570 --> 00:31:21,259
test

723
00:31:25,040 --> 00:31:33,680
that wasn't me there we go okay and just

724
00:31:30,830 --> 00:31:35,030
search for the words a test so we just

725
00:31:33,680 --> 00:31:36,830
want to generate some traffic flows app

726
00:31:35,030 --> 00:31:38,780
and then zap can go and scan it for us

727
00:31:36,830 --> 00:31:39,949
if we want to do some more elaborate

728
00:31:38,780 --> 00:31:42,770
testing now we want to test

729
00:31:39,950 --> 00:31:44,330
authentication we want to test session

730
00:31:42,770 --> 00:31:46,129
management so we need to tell the

731
00:31:44,330 --> 00:31:49,610
framework how to login and how to logout

732
00:31:46,130 --> 00:31:53,840
and we do that by defining well firstly

733
00:31:49,610 --> 00:31:56,419
by implementing these two interfaces I

734
00:31:53,840 --> 00:31:58,970
login and I log out and we need to tell

735
00:31:56,420 --> 00:32:02,090
it using selenium how to login to the

736
00:31:58,970 --> 00:32:06,770
application so this is not all that

737
00:32:02,090 --> 00:32:10,970
complex because you can use selenium

738
00:32:06,770 --> 00:32:12,710
zone ide to generate that information

739
00:32:10,970 --> 00:32:14,510
for us we can record and playback that

740
00:32:12,710 --> 00:32:16,310
information so if we wanted to do a

741
00:32:14,510 --> 00:32:20,000
login here i'm going to open up selenium

742
00:32:16,310 --> 00:32:24,320
ide this is what it looks like and it's

743
00:32:20,000 --> 00:32:26,320
going to record all my steps in in its

744
00:32:24,320 --> 00:32:32,300
own syntax so i'm going to log in as bob

745
00:32:26,320 --> 00:32:34,370
with password and click login so just

746
00:32:32,300 --> 00:32:37,010
those actions whilst click one more sick

747
00:32:34,370 --> 00:32:39,800
on view profile

748
00:32:37,010 --> 00:32:42,620
those actions have generated these

749
00:32:39,800 --> 00:32:45,710
selenium steps which have now been

750
00:32:42,620 --> 00:32:48,620
recorded by selenium and selenium we can

751
00:32:45,710 --> 00:32:50,420
also tell it what our formats our code

752
00:32:48,620 --> 00:32:54,860
format we want from that and we can

753
00:32:50,420 --> 00:32:58,150
select Java j units and if we copy that

754
00:32:54,860 --> 00:33:02,510
control c and go back to our code and

755
00:32:58,150 --> 00:33:05,330
paste ctrl v we have almost hundred

756
00:33:02,510 --> 00:33:09,860
percent valid code which shows us how to

757
00:33:05,330 --> 00:33:11,750
do that login for us so we just need to

758
00:33:09,860 --> 00:33:13,669
rearrange this to fit into what the

759
00:33:11,750 --> 00:33:16,880
framework once the framework wants an

760
00:33:13,670 --> 00:33:20,450
open login page method which means that

761
00:33:16,880 --> 00:33:22,490
one goes over here and the rest of them

762
00:33:20,450 --> 00:33:24,530
are already defined in this method here

763
00:33:22,490 --> 00:33:27,400
which is just login and click the login

764
00:33:24,530 --> 00:33:27,399
button basically

765
00:33:30,050 --> 00:33:35,690
so we can now run these tests and we can

766
00:33:33,620 --> 00:33:41,929
run them quite simply directly from the

767
00:33:35,690 --> 00:33:43,220
IDE so we can run run a story so what

768
00:33:41,930 --> 00:33:45,110
I'm going to run is I'm going to run

769
00:33:43,220 --> 00:33:47,300
this authentication story so as I said

770
00:33:45,110 --> 00:33:49,459
at the start a story is like a test

771
00:33:47,300 --> 00:33:51,680
suite so the story contains a number of

772
00:33:49,460 --> 00:33:55,970
different scenarios we've got this

773
00:33:51,680 --> 00:34:00,680
tagged as the authentication story so we

774
00:33:55,970 --> 00:34:02,480
can run this as the authentication story

775
00:34:00,680 --> 00:34:06,800
and we'll just run this story and not

776
00:34:02,480 --> 00:34:09,820
anything else run the framework is going

777
00:34:06,800 --> 00:34:09,820
to fire up two browsers

778
00:34:11,250 --> 00:34:15,790
browser one doesn't use app it does any

779
00:34:13,989 --> 00:34:20,409
tests that don't have to use a and

780
00:34:15,790 --> 00:34:22,560
browser too does use app and does any

781
00:34:20,409 --> 00:34:25,449
tests where we actually have to use a

782
00:34:22,560 --> 00:34:27,759
zap to do those tests and that's the

783
00:34:25,449 --> 00:34:28,839
authentication story done so we've

784
00:34:27,760 --> 00:34:31,120
logged in we've done a number of

785
00:34:28,840 --> 00:34:36,010
authentication tests and we can view

786
00:34:31,120 --> 00:34:41,589
those results here so we can go to the

787
00:34:36,010 --> 00:34:43,960
done view our HTML reports we have an

788
00:34:41,590 --> 00:34:46,720
overview report saying we have one

789
00:34:43,960 --> 00:34:48,639
successful test we have four failed and

790
00:34:46,719 --> 00:34:52,989
three were excluded from this test run

791
00:34:48,639 --> 00:34:55,060
we can view these results in HTML so the

792
00:34:52,989 --> 00:34:57,970
first test was that passwords should be

793
00:34:55,060 --> 00:34:59,860
case sensitive turns out this

794
00:34:57,970 --> 00:35:02,020
application has passwords which are not

795
00:34:59,860 --> 00:35:03,460
case sensitive so you can enter a

796
00:35:02,020 --> 00:35:08,460
password uppercase post with lowercase

797
00:35:03,460 --> 00:35:11,710
they both succeed on the login form our

798
00:35:08,460 --> 00:35:15,100
login form itself is not presented over

799
00:35:11,710 --> 00:35:18,520
an HTTPS connection we were expecting a

800
00:35:15,100 --> 00:35:20,980
URL that starts with https but we

801
00:35:18,520 --> 00:35:25,080
actually got a URL which starts with HDD

802
00:35:20,980 --> 00:35:25,080
be there for test failure

803
00:35:25,920 --> 00:35:33,180
and so on so developers can see very

804
00:35:30,359 --> 00:35:37,220
easily using a browser what the test

805
00:35:33,180 --> 00:35:40,220
failures were within their application

806
00:35:37,220 --> 00:35:40,220
okay

807
00:35:41,410 --> 00:35:46,460
so this was running the test from the

808
00:35:43,730 --> 00:35:48,050
IDE typically where you'd want these

809
00:35:46,460 --> 00:35:50,260
tests to be is on your integration

810
00:35:48,050 --> 00:35:52,520
service or something like Jenkins and

811
00:35:50,260 --> 00:35:55,760
since it's just based on ant it

812
00:35:52,520 --> 00:35:57,859
generates j unit output format which

813
00:35:55,760 --> 00:36:01,579
Jenkins can understand and it generates

814
00:35:57,859 --> 00:36:03,470
htmlunit sorry HTML formats which we can

815
00:36:01,579 --> 00:36:05,630
also publish in Jenkins this actually

816
00:36:03,470 --> 00:36:09,730
works quite well simply running within

817
00:36:05,630 --> 00:36:16,119
Jenkins so this an example test run of

818
00:36:09,730 --> 00:36:16,119
how it would run there oops

819
00:36:20,720 --> 00:36:25,189
so this is our same vulnerable

820
00:36:22,940 --> 00:36:27,020
application and this is demonstrating

821
00:36:25,190 --> 00:36:30,010
the complete workflow that the developer

822
00:36:27,020 --> 00:36:33,080
would see when they're running this tool

823
00:36:30,010 --> 00:36:36,290
so they would go and make a cho a code

824
00:36:33,080 --> 00:36:37,430
change to the web app itself they're

825
00:36:36,290 --> 00:36:42,279
going to go and change something in the

826
00:36:37,430 --> 00:36:42,279
app how they're doing queries

827
00:36:44,970 --> 00:36:50,609
how they're getting the user information

828
00:36:46,760 --> 00:36:52,970
they would push this up to the source

829
00:36:50,609 --> 00:36:52,970
code repository

830
00:36:56,430 --> 00:37:02,089
who uploaded you would have your junk

831
00:36:59,820 --> 00:37:02,090
room

832
00:37:07,059 --> 00:37:10,270
now we go

833
00:37:10,910 --> 00:37:15,348
so you would have your Jenkins

834
00:37:12,619 --> 00:37:17,539
configured to watch the source code

835
00:37:15,349 --> 00:37:19,549
repository whenever there's a new change

836
00:37:17,539 --> 00:37:21,950
it would go and download the new web

837
00:37:19,549 --> 00:37:25,190
application and build it so we have two

838
00:37:21,950 --> 00:37:27,129
jobs there we have the regular build my

839
00:37:25,190 --> 00:37:30,020
web app job and then we have a security

840
00:37:27,130 --> 00:37:33,220
testing job which runs after the

841
00:37:30,020 --> 00:37:33,220
application has been built and deployed

842
00:37:34,150 --> 00:37:39,890
so firstly Jenkins goes downloads the

843
00:37:37,220 --> 00:37:41,660
normal web application deploys it to the

844
00:37:39,890 --> 00:37:43,100
pre production environments and runs any

845
00:37:41,660 --> 00:37:44,660
tests that are needed for the pre

846
00:37:43,100 --> 00:37:46,819
production environment then

847
00:37:44,660 --> 00:37:52,339
automatically it will kick off the next

848
00:37:46,820 --> 00:37:55,970
job which is the BDD security job and

849
00:37:52,340 --> 00:38:00,830
this is BDD security running doing its

850
00:37:55,970 --> 00:38:02,750
thing and running the browsers so you'll

851
00:38:00,830 --> 00:38:04,250
see lots of clicking around and so on

852
00:38:02,750 --> 00:38:07,970
there's not need it for Jenkins this all

853
00:38:04,250 --> 00:38:10,250
just happens automatically and also with

854
00:38:07,970 --> 00:38:12,290
this example I'm using an actual browser

855
00:38:10,250 --> 00:38:14,660
but you don't have to see this you can

856
00:38:12,290 --> 00:38:16,640
run this in headless mode with xvf be on

857
00:38:14,660 --> 00:38:18,379
Linux and you can still use Chrome an

858
00:38:16,640 --> 00:38:20,509
actual chrome instance you just won't

859
00:38:18,380 --> 00:38:21,710
see the the chrome instance running so

860
00:38:20,510 --> 00:38:24,920
there's no need to actually have a GUI

861
00:38:21,710 --> 00:38:26,810
running here this is also heavily

862
00:38:24,920 --> 00:38:29,420
speeded up it's not actually this fast

863
00:38:26,810 --> 00:38:32,450
but that's entirely down to zap running

864
00:38:29,420 --> 00:38:34,869
the functional tests does the scanning

865
00:38:32,450 --> 00:38:34,868
for us

866
00:38:37,110 --> 00:38:43,400
and we have test results

867
00:38:49,640 --> 00:38:55,038
so we have new test results with for

868
00:38:52,490 --> 00:38:57,140
failures and we can see there 24

869
00:38:55,039 --> 00:39:01,269
failures and we can see what those tests

870
00:38:57,140 --> 00:39:01,269
failures are right over there

871
00:39:06,230 --> 00:39:11,170
apologies this is not playing nice thing

872
00:39:12,590 --> 00:39:15,190
hi

873
00:39:17,220 --> 00:39:21,629
and if we've got our code repository

874
00:39:19,650 --> 00:39:23,970
integrated in Jenkins then in fact we

875
00:39:21,630 --> 00:39:25,800
can go and see what what the issue was

876
00:39:23,970 --> 00:39:31,080
we can get our test failure message

877
00:39:25,800 --> 00:39:34,440
right within Jenkins and we could even

878
00:39:31,080 --> 00:39:38,000
navigate to the code changes that caused

879
00:39:34,440 --> 00:39:40,920
this issue so we can click on the commit

880
00:39:38,000 --> 00:39:44,190
where these failures occurred and we can

881
00:39:40,920 --> 00:39:47,160
then see what has changed since these

882
00:39:44,190 --> 00:39:52,290
tests have failed so what is the likely

883
00:39:47,160 --> 00:39:54,990
causes of my security failures and we

884
00:39:52,290 --> 00:39:57,180
can get the HTML reports which give us

885
00:39:54,990 --> 00:39:59,640
it's a bit of a nicer interface than the

886
00:39:57,180 --> 00:40:01,680
j unit test results which are some pain

887
00:39:59,640 --> 00:40:03,720
sometimes truncated so if you want to

888
00:40:01,680 --> 00:40:06,299
find out exactly which URL and which

889
00:40:03,720 --> 00:40:07,680
parameter and so on the HTML reports are

890
00:40:06,300 --> 00:40:11,930
they give you a bit more detail about

891
00:40:07,680 --> 00:40:11,930
that rather than just the j unit results

892
00:40:15,770 --> 00:40:21,440
so we can also do some some more

893
00:40:18,030 --> 00:40:24,839
interesting tests here which are

894
00:40:21,440 --> 00:40:27,420
authorization tests and we can actually

895
00:40:24,839 --> 00:40:29,490
test whether user a can see you zerbies

896
00:40:27,420 --> 00:40:31,970
details but we need to do some upfront

897
00:40:29,490 --> 00:40:34,500
configuration to get that to work

898
00:40:31,970 --> 00:40:37,109
primarily by extending that java class

899
00:40:34,500 --> 00:40:39,300
and we need to say if I'm user Bob and I

900
00:40:37,109 --> 00:40:41,819
go and view my profile I then see my

901
00:40:39,300 --> 00:40:44,339
secret data which is bob's email address

902
00:40:41,820 --> 00:40:47,339
and the framework and then automatically

903
00:40:44,339 --> 00:40:49,410
go and test whether alice or admin can

904
00:40:47,339 --> 00:40:53,790
access that same page and do they see

905
00:40:49,410 --> 00:40:55,259
then see Bob's data so that's a future

906
00:40:53,790 --> 00:40:57,029
provided by the framework and is an

907
00:40:55,260 --> 00:41:05,810
additional test that we can run as as

908
00:40:57,030 --> 00:41:05,810
part of the test series here oops sorry

909
00:41:17,580 --> 00:41:22,200
right so that was our framework BTW

910
00:41:19,860 --> 00:41:24,090
security there are a number of other

911
00:41:22,200 --> 00:41:27,089
frameworks that have a similar approach

912
00:41:24,090 --> 00:41:29,280
that they use BDDs they use a natural

913
00:41:27,090 --> 00:41:31,530
language and then they have underlying

914
00:41:29,280 --> 00:41:33,690
automated tests that that'll run as part

915
00:41:31,530 --> 00:41:36,410
of the framework so the most famous one

916
00:41:33,690 --> 00:41:38,490
is gauntlet which is written in ruby

917
00:41:36,410 --> 00:41:41,460
gauntlet is basically a wrapper around

918
00:41:38,490 --> 00:41:43,350
other tools same way that the bdd

919
00:41:41,460 --> 00:41:44,760
security is the primary difference

920
00:41:43,350 --> 00:41:46,920
between our framework and there's is

921
00:41:44,760 --> 00:41:48,150
that their focus more on infrastructure

922
00:41:46,920 --> 00:41:50,160
scanning so they have like a wrapper

923
00:41:48,150 --> 00:41:53,490
around nmap so you can run n map and

924
00:41:50,160 --> 00:41:55,470
decide you know test failures based on

925
00:41:53,490 --> 00:41:58,080
nmap output what we're interested in

926
00:41:55,470 --> 00:41:59,609
doing is testing more at the apt here so

927
00:41:58,080 --> 00:42:01,920
using selenium we can actually get

928
00:41:59,610 --> 00:42:04,080
inside the application we can run tests

929
00:42:01,920 --> 00:42:06,600
within the functional areas of the

930
00:42:04,080 --> 00:42:09,000
application rather than just looking at

931
00:42:06,600 --> 00:42:10,620
the the infrastructure level there's

932
00:42:09,000 --> 00:42:13,880
also mitten which is released by

933
00:42:10,620 --> 00:42:16,589
f-secure and they use python and burp

934
00:42:13,880 --> 00:42:20,370
the nice thing about mitten is they

935
00:42:16,590 --> 00:42:22,650
emphasize fuzzing so they use burps

936
00:42:20,370 --> 00:42:24,900
buzzer you do need to have a commercial

937
00:42:22,650 --> 00:42:28,170
version of burp intruder though to use

938
00:42:24,900 --> 00:42:29,850
it it's based in Python and I think if

939
00:42:28,170 --> 00:42:31,500
you're doing low-level type of testing

940
00:42:29,850 --> 00:42:33,750
if you're testing a protocol and you

941
00:42:31,500 --> 00:42:35,520
want to write tests for the protocol

942
00:42:33,750 --> 00:42:38,760
then mitten is a is a very good choice

943
00:42:35,520 --> 00:42:41,880
to use for that we also have another

944
00:42:38,760 --> 00:42:44,760
project called zap j unit which is the

945
00:42:41,880 --> 00:42:46,830
same type of concept as BDD but throwing

946
00:42:44,760 --> 00:42:48,570
out the BDD thing saying this let's do

947
00:42:46,830 --> 00:42:50,940
the same type of thing but just using j

948
00:42:48,570 --> 00:42:53,070
unit and just doing scanning and nothing

949
00:42:50,940 --> 00:42:54,600
else so this is a nice way to get

950
00:42:53,070 --> 00:42:57,900
started if you don't want to use the

951
00:42:54,600 --> 00:43:00,930
whole BDD layer you can extend this

952
00:42:57,900 --> 00:43:05,010
project also open source and there's

953
00:43:00,930 --> 00:43:07,290
also a OS zap plugin for Jenkins which

954
00:43:05,010 --> 00:43:09,450
will let you run zap as part of Jenkins

955
00:43:07,290 --> 00:43:11,910
and but then you're a hundred percent

956
00:43:09,450 --> 00:43:13,319
using zaps functionality so you would

957
00:43:11,910 --> 00:43:16,680
have to do the navigation of the

958
00:43:13,320 --> 00:43:18,060
application somewhere else what what the

959
00:43:16,680 --> 00:43:20,009
plugin can do is it can just do the

960
00:43:18,060 --> 00:43:22,580
scanning for you but not necessary the

961
00:43:20,010 --> 00:43:22,580
navigation

962
00:43:23,320 --> 00:43:30,020
right I think we have some time for

963
00:43:26,360 --> 00:43:31,520
questions a superior blue sea para

964
00:43:30,020 --> 00:43:37,160
preguntar en el castillo know when

965
00:43:31,520 --> 00:43:39,970
inglis preguntas

966
00:43:37,160 --> 00:43:39,970
yes

967
00:43:43,250 --> 00:43:54,050
hi so thanks for the explanation and my

968
00:43:49,610 --> 00:43:56,950
my question is I used to work in company

969
00:43:54,050 --> 00:44:01,520
which is merge between financial and

970
00:43:56,950 --> 00:44:03,919
technical technological company where we

971
00:44:01,520 --> 00:44:06,680
testers and developers had very

972
00:44:03,920 --> 00:44:10,570
different credentials for example or

973
00:44:06,680 --> 00:44:10,569
very different sort of you

974
00:44:10,880 --> 00:44:19,560
we we used to have a very different type

975
00:44:14,790 --> 00:44:22,890
of credential levels towards the

976
00:44:19,560 --> 00:44:25,200
applications so only the security guys

977
00:44:22,890 --> 00:44:28,700
for example we're able to deal with

978
00:44:25,200 --> 00:44:33,180
ports and make scans and so on and so

979
00:44:28,700 --> 00:44:38,540
then the question is whether you propose

980
00:44:33,180 --> 00:44:42,330
that it should be that that the

981
00:44:38,540 --> 00:44:46,380
development team the testing team and

982
00:44:42,330 --> 00:44:50,340
the security guys would be merge all

983
00:44:46,380 --> 00:44:53,280
together in one in one in one team

984
00:44:50,340 --> 00:44:55,800
wearing one even business unit you know

985
00:44:53,280 --> 00:44:58,320
because many times they they are

986
00:44:55,800 --> 00:45:02,270
completely separate from from each other

987
00:44:58,320 --> 00:45:04,860
so do you think that in the future

988
00:45:02,270 --> 00:45:09,360
companies should go to that strategy

989
00:45:04,860 --> 00:45:11,040
merge all well I think the only ones i

990
00:45:09,360 --> 00:45:13,980
give to that is it's going to depend on

991
00:45:11,040 --> 00:45:16,140
the company and what the lessons learned

992
00:45:13,980 --> 00:45:18,120
from amazon and from etsy and from these

993
00:45:16,140 --> 00:45:21,000
companies is that if you do have a

994
00:45:18,120 --> 00:45:23,069
cross-functional team then things happen

995
00:45:21,000 --> 00:45:26,280
faster and you can solve your problems

996
00:45:23,070 --> 00:45:28,110
faster but if you have an organization

997
00:45:26,280 --> 00:45:29,970
that for security reasons or for

998
00:45:28,110 --> 00:45:33,780
compliance or policy reasons or whatever

999
00:45:29,970 --> 00:45:37,529
you cannot have this this team then i

1000
00:45:33,780 --> 00:45:40,350
think that the best you can do is at

1001
00:45:37,530 --> 00:45:42,480
least have knowledge shared within the

1002
00:45:40,350 --> 00:45:44,100
team and even if they have to use

1003
00:45:42,480 --> 00:45:45,780
different access levels to get access to

1004
00:45:44,100 --> 00:45:49,319
the application well then they use

1005
00:45:45,780 --> 00:45:51,600
different access levels but i think the

1006
00:45:49,320 --> 00:45:56,840
the thing we can learn from from DevOps

1007
00:45:51,600 --> 00:45:56,839
is that at least if we can if we can

1008
00:45:57,440 --> 00:46:01,980
have a team that isn't reliant on one

1009
00:46:00,510 --> 00:46:03,960
particular member who knows everything

1010
00:46:01,980 --> 00:46:06,030
and if that member isn't present or

1011
00:46:03,960 --> 00:46:08,160
isn't available then our entire process

1012
00:46:06,030 --> 00:46:11,190
stops then we can have something that

1013
00:46:08,160 --> 00:46:13,440
works if we can diversify of it in our

1014
00:46:11,190 --> 00:46:16,680
in our skills I think we're in a in a

1015
00:46:13,440 --> 00:46:18,950
more resilient position to respond to

1016
00:46:16,680 --> 00:46:18,950
change

1017
00:46:21,750 --> 00:46:24,869
anybody else

1018
00:46:25,640 --> 00:46:29,390
huh yes

1019
00:46:35,180 --> 00:46:41,368
st sousa mendes punsalan principalmente

1020
00:46:37,859 --> 00:46:45,150
con que lenguaje programacion contrac a

1021
00:46:41,369 --> 00:46:49,380
language de programacion pues todos

1022
00:46:45,150 --> 00:46:52,259
funcionan todos estas de las

1023
00:46:49,380 --> 00:46:55,769
herramientas de prueba funcionan contra

1024
00:46:52,259 --> 00:46:57,869
una aplicacion y agua del lenguaje que

1025
00:46:55,769 --> 00:47:01,769
está escrito la la aplicacion entonces

1026
00:46:57,869 --> 00:47:05,220
el vide security esta basado so dvb-c

1027
00:47:01,769 --> 00:47:08,848
qet spice Indaba we tested web

1028
00:47:05,220 --> 00:47:13,890
application yeah so yo Samara Horace

1029
00:47:08,849 --> 00:47:16,499
Bahamian applicatio PHP JavaScript illas

1030
00:47:13,890 --> 00:47:22,740
Mata if you can see a page we can't

1031
00:47:16,499 --> 00:47:25,950
estate so regarding which plot which

1032
00:47:22,740 --> 00:47:27,899
tool to choose it will depend on the

1033
00:47:25,950 --> 00:47:30,259
equip on the team if everyone knows

1034
00:47:27,900 --> 00:47:33,890
about my thumb and no one knows java

1035
00:47:30,259 --> 00:47:37,099
will be more comfortable to choose a

1036
00:47:33,890 --> 00:47:37,098
Python to

1037
00:47:39,990 --> 00:47:42,049
I

1038
00:47:43,680 --> 00:47:53,029
any more questions no but thank you very

1039
00:47:48,059 --> 00:47:53,030
much everyone have a good evening

