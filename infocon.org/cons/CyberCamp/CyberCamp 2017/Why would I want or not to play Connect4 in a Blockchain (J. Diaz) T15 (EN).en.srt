1
00:00:17,040 --> 00:00:27,509
for your sympathy Mo's start I'm going

2
00:00:22,650 --> 00:00:31,830
to talk about blockchain in general by

3
00:00:27,510 --> 00:00:34,860
my name is Zeus DF epic oh please stop

4
00:00:31,830 --> 00:00:36,660
me or raise your hand if it's something

5
00:00:34,860 --> 00:00:38,730
you don't understand cuz I'd like this

6
00:00:36,660 --> 00:00:44,129
to be as dynamic and a session as

7
00:00:38,730 --> 00:00:46,500
possible I'd be happy if by the time I

8
00:00:44,129 --> 00:00:49,739
left the room you'd be able to say to me

9
00:00:46,500 --> 00:00:51,089
that you understand blockchain so please

10
00:00:49,739 --> 00:00:54,809
stop me if there's something you don't

11
00:00:51,089 --> 00:00:57,059
understand the talk I've entitled why

12
00:00:54,809 --> 00:01:06,210
would I want to play connect four in

13
00:00:57,059 --> 00:01:08,310
blockchain or Lord so why would I want

14
00:01:06,210 --> 00:01:09,798
to what it's because I want you to

15
00:01:08,310 --> 00:01:12,780
understand by the end of the talk is

16
00:01:09,799 --> 00:01:15,000
when is a good idea to be locked in and

17
00:01:12,780 --> 00:01:16,200
when not and to do so we have to

18
00:01:15,000 --> 00:01:18,979
understand how it works

19
00:01:16,200 --> 00:01:22,830
and as for connector fall well this is a

20
00:01:18,979 --> 00:01:24,780
game that we can all understand and at

21
00:01:22,830 --> 00:01:30,509
the end of the talk I'll use an excuse

22
00:01:24,780 --> 00:01:36,270
to reason why we should use blockchain

23
00:01:30,510 --> 00:01:38,610
or not as a technological basis for a

24
00:01:36,270 --> 00:01:44,690
system a system with the problem that we

25
00:01:38,610 --> 00:01:47,280
want to solve this is the talks outline

26
00:01:44,690 --> 00:01:50,399
it's good actually a talk I spoke and

27
00:01:47,280 --> 00:01:55,020
cryptography because I can just skip

28
00:01:50,400 --> 00:01:56,220
through it a little more quickly it's

29
00:01:55,020 --> 00:01:59,580
I'm just gonna give you a couple of

30
00:01:56,220 --> 00:02:02,090
brief outlines of what cryptography

31
00:01:59,580 --> 00:02:05,850
years which is asymmetric cryptography

32
00:02:02,090 --> 00:02:09,539
and the RS a I'll just explain it

33
00:02:05,850 --> 00:02:11,819
briefly if when you weren't if you

34
00:02:09,538 --> 00:02:17,429
weren't here then hashes cryptic

35
00:02:11,819 --> 00:02:18,810
cryptographic hashes knuckle trees which

36
00:02:17,430 --> 00:02:22,459
is something you don't see that often

37
00:02:18,810 --> 00:02:24,360
and that is used a lot in block chains

38
00:02:22,459 --> 00:02:28,720
then I'll talk about blockchain

39
00:02:24,360 --> 00:02:32,120
technology look at the different data

40
00:02:28,720 --> 00:02:34,430
structures what sort of a generic

41
00:02:32,120 --> 00:02:36,410
blockchain a genetic rock chain look

42
00:02:34,430 --> 00:02:41,140
likes then we'll look at it theorem

43
00:02:36,410 --> 00:02:45,079
which is a specific blockchain allowing

44
00:02:41,140 --> 00:02:47,480
you to implement incomplete smart

45
00:02:45,080 --> 00:02:49,580
contracts and then we'll look at the

46
00:02:47,480 --> 00:02:53,980
case of Connect four we'll look at some

47
00:02:49,580 --> 00:02:57,920
examples will play a connect for game in

48
00:02:53,980 --> 00:03:02,299
any private instance of a theorem and

49
00:02:57,920 --> 00:03:03,530
then well that's we'll look at

50
00:03:02,300 --> 00:03:04,970
conclusions because we get two

51
00:03:03,530 --> 00:03:07,330
conclusions that means that even and

52
00:03:04,970 --> 00:03:11,209
understood what I've been saying

53
00:03:07,330 --> 00:03:16,850
what about cryptography I'm gonna start

54
00:03:11,209 --> 00:03:20,660
with a symmetric cryptography which just

55
00:03:16,850 --> 00:03:28,010
is using a key or process to encrypt and

56
00:03:20,660 --> 00:03:34,000
a different process to decipher Jorge

57
00:03:28,010 --> 00:03:39,440
said earlier it comes from 1976

58
00:03:34,000 --> 00:03:42,320
isometric photography by an article that

59
00:03:39,440 --> 00:03:46,970
was published in which they said it was

60
00:03:42,320 --> 00:03:49,100
possible to use different keys or to use

61
00:03:46,970 --> 00:03:57,310
an asymmetry in mathematical functions

62
00:03:49,100 --> 00:04:02,840
to avoid the problem of distribution of

63
00:03:57,310 --> 00:04:05,690
key deciphering I think they were given

64
00:04:02,840 --> 00:04:09,019
the Turing price in 2014 2015 by the way

65
00:04:05,690 --> 00:04:10,640
that's the Nobel Prize for IT geeks and

66
00:04:09,019 --> 00:04:13,519
just to give you an idea of how

67
00:04:10,640 --> 00:04:16,010
important this discovery is apart from

68
00:04:13,519 --> 00:04:19,899
fact that it won a Turing prize Martin

69
00:04:16,010 --> 00:04:19,899
Hellman the H

70
00:04:21,790 --> 00:04:25,720
Martin Hellman by the way

71
00:04:33,850 --> 00:04:42,710
started being controlled by the NSA

72
00:04:37,700 --> 00:04:46,070
because he was proposing fundamental

73
00:04:42,710 --> 00:04:49,609
changes in the way cryptography has done

74
00:04:46,070 --> 00:04:53,599
so and the NSA started Ted hit haunt him

75
00:04:49,610 --> 00:04:57,590
there are also suspicions that Stanford

76
00:04:53,600 --> 00:04:59,810
University could take him to court they

77
00:04:57,590 --> 00:05:01,270
said oh don't worry we'll cover your

78
00:04:59,810 --> 00:05:04,370
trial costs unless you're found guilty

79
00:05:01,270 --> 00:05:10,700
so there was a certain prosecution of

80
00:05:04,370 --> 00:05:13,910
Martin Hellman and we knew that he had

81
00:05:10,700 --> 00:05:16,909
to say that when he was ordered PhD that

82
00:05:13,910 --> 00:05:19,190
she had to say that but he said that all

83
00:05:16,910 --> 00:05:21,110
articles that were published would

84
00:05:19,190 --> 00:05:23,930
should be signed by me because otherwise

85
00:05:21,110 --> 00:05:26,060
they can prosecute to you he wanted to

86
00:05:23,930 --> 00:05:30,500
protect people that were working with

87
00:05:26,060 --> 00:05:33,200
him but it's an anecdote that isn't

88
00:05:30,500 --> 00:05:36,530
related to the talk but I hope it's made

89
00:05:33,200 --> 00:05:37,789
you pay attention and you get this idea

90
00:05:36,530 --> 00:05:41,690
that the people that are involved in

91
00:05:37,790 --> 00:05:42,880
this world very work very hard and very

92
00:05:41,690 --> 00:05:47,530
committed

93
00:05:42,880 --> 00:05:47,530
so cryptography a symmetric cryptography

94
00:05:49,150 --> 00:05:56,419
you have one key to encrypt and another

95
00:05:53,060 --> 00:05:59,600
to decipher that's what makes it

96
00:05:56,420 --> 00:06:01,850
different to symmetric cryptography and

97
00:05:59,600 --> 00:06:04,940
what it allows you to do is in addition

98
00:06:01,850 --> 00:06:08,020
to encrypt you can sign digitally why

99
00:06:04,940 --> 00:06:12,740
because they private key if I want to

100
00:06:08,020 --> 00:06:14,120
send a private key a public key I'm not

101
00:06:12,740 --> 00:06:15,620
going to give them them my private key

102
00:06:14,120 --> 00:06:17,510
because that other person could do the

103
00:06:15,620 --> 00:06:21,830
same thing that I'm doing so what I do

104
00:06:17,510 --> 00:06:23,630
is I publish my public key this is my

105
00:06:21,830 --> 00:06:25,969
public key and the public key and

106
00:06:23,630 --> 00:06:30,340
private keys are related to theirs and

107
00:06:25,970 --> 00:06:34,220
normally a one-to-one ratio the

108
00:06:30,340 --> 00:06:38,000
traffic systems in which the ratios n +

109
00:06:34,220 --> 00:06:40,700
2 1 so I published my public key and

110
00:06:38,000 --> 00:06:43,130
anybody that's my public key can check

111
00:06:40,700 --> 00:06:46,400
all the mathematical operations that I

112
00:06:43,130 --> 00:06:48,860
do with my private key and as the ratios

113
00:06:46,400 --> 00:06:50,870
are one-to-one you can see that only I

114
00:06:48,860 --> 00:06:54,500
could have done it that's why you add

115
00:06:50,870 --> 00:06:56,690
this signature idea because everybody

116
00:06:54,500 --> 00:06:59,900
knows that everything that I'm doing is

117
00:06:56,690 --> 00:07:04,190
coming from me and nobody else so to

118
00:06:59,900 --> 00:07:07,330
join the jargon the worlds of jargon the

119
00:07:04,190 --> 00:07:10,400
signature operation is equivalent to the

120
00:07:07,330 --> 00:07:13,010
encrypting operation because what I do

121
00:07:10,400 --> 00:07:15,770
to decipher use the private key when we

122
00:07:13,010 --> 00:07:20,500
talk about a symmetric cryptography if I

123
00:07:15,770 --> 00:07:24,560
want to check checking is like

124
00:07:20,500 --> 00:07:31,130
encrypting so verification can anybody

125
00:07:24,560 --> 00:07:35,960
can do anybody can encrypt because use a

126
00:07:31,130 --> 00:07:39,290
public key so only I can sign because

127
00:07:35,960 --> 00:07:41,150
it's not a private key so deciphering is

128
00:07:39,290 --> 00:07:44,110
something that only I can do because the

129
00:07:41,150 --> 00:07:47,799
private key is used here you've got a

130
00:07:44,110 --> 00:07:51,710
typical flow chart in which the sender

131
00:07:47,800 --> 00:07:57,290
sends a message creates a signature

132
00:07:51,710 --> 00:08:02,419
using the private key and sends it via a

133
00:07:57,290 --> 00:08:05,990
data structure by the x.509 format

134
00:08:02,420 --> 00:08:08,480
although there are other formats and the

135
00:08:05,990 --> 00:08:11,300
result of this operation with a private

136
00:08:08,480 --> 00:08:18,220
key is received by the final recipient

137
00:08:11,300 --> 00:08:21,500
and he encrypts with the public key and

138
00:08:18,220 --> 00:08:24,230
if he gets it okay that means that this

139
00:08:21,500 --> 00:08:28,480
signature is correct if not it's wrong

140
00:08:24,230 --> 00:08:34,159
so that's why many people say instead of

141
00:08:28,480 --> 00:08:36,590
sign they say encrypt with a private

142
00:08:34,159 --> 00:08:40,098
sake instead of encrypt with a public

143
00:08:36,590 --> 00:08:44,060
key I prefer to say sign

144
00:08:40,099 --> 00:08:50,630
and encrypt so when I say sign it means

145
00:08:44,059 --> 00:08:53,138
encrypt with the private key what

146
00:08:50,630 --> 00:08:57,220
happens if you send a digital signature

147
00:08:53,139 --> 00:09:00,290
and you can't say that it's been you

148
00:08:57,220 --> 00:09:02,300
it's a bit like the physical signatures

149
00:09:00,290 --> 00:09:03,949
that you get if I sign something on a

150
00:09:02,300 --> 00:09:04,910
piece of paper that I can't say that it

151
00:09:03,949 --> 00:09:08,180
wasn't me

152
00:09:04,910 --> 00:09:12,319
somebody's faked it you don't get that

153
00:09:08,180 --> 00:09:14,779
in cryptography as Holika explained for

154
00:09:12,319 --> 00:09:18,560
somebody to fake my digital signature

155
00:09:14,779 --> 00:09:23,779
they'd have to spend a lot of years

156
00:09:18,560 --> 00:09:26,599
using a lot of computing power so this

157
00:09:23,779 --> 00:09:28,009
is unlike symmetric cryptography in

158
00:09:26,600 --> 00:09:30,949
which if I want to send a message to

159
00:09:28,009 --> 00:09:33,670
somebody else to authenticate it I use

160
00:09:30,949 --> 00:09:37,758
the symmetric key the one that we share

161
00:09:33,670 --> 00:09:39,560
so I can say I don't know I didn't send

162
00:09:37,759 --> 00:09:42,220
this message somebody else sent it who's

163
00:09:39,560 --> 00:09:47,359
also got my symmetric key that's why

164
00:09:42,220 --> 00:09:49,399
with you can't get the same sort of

165
00:09:47,360 --> 00:09:51,380
security the symmetric cryptography and

166
00:09:49,399 --> 00:09:54,290
the next graph we're going to look a lot

167
00:09:51,380 --> 00:10:00,939
at is on block chains our cryptographic

168
00:09:54,290 --> 00:10:00,939
hashes a cryptographic hash in summary

169
00:10:01,209 --> 00:10:08,300
cryptographic functions which normally

170
00:10:03,980 --> 00:10:13,610
don't need to keep they'll accept a

171
00:10:08,300 --> 00:10:17,680
variable length input from one bit to n

172
00:10:13,610 --> 00:10:20,920
bits but it always gives you a fixed

173
00:10:17,680 --> 00:10:20,920
output length

174
00:10:23,889 --> 00:10:31,069
so it depends you know it just sha has

175
00:10:27,709 --> 00:10:32,779
one sha has two sha-3 but that length

176
00:10:31,069 --> 00:10:37,459
the messages were always be the same

177
00:10:32,779 --> 00:10:39,250
length the hash some so what are the

178
00:10:37,459 --> 00:10:41,899
main properties that we have there

179
00:10:39,250 --> 00:10:43,399
deterministic they can't be reversed and

180
00:10:41,899 --> 00:10:45,259
they're resistant to collisions if

181
00:10:43,399 --> 00:10:48,470
they're deterministic which means that

182
00:10:45,259 --> 00:10:50,269
if I put it in coda it'll always give me

183
00:10:48,470 --> 00:10:53,930
the same hash if I put it in neither

184
00:10:50,269 --> 00:11:00,649
yours it'll just give me the same

185
00:10:53,930 --> 00:11:05,149
message not reversible if I'm given a

186
00:11:00,649 --> 00:11:07,009
hash but if you can see it this is a

187
00:11:05,149 --> 00:11:11,649
hash function doesn't say which hash

188
00:11:07,009 --> 00:11:13,040
function it is maybe it's sha-1 I'm

189
00:11:11,649 --> 00:11:16,069
sending the Fox

190
00:11:13,040 --> 00:11:18,889
the message is Fox and here it says the

191
00:11:16,069 --> 00:11:25,779
hash Sam the output is DF CD three four

192
00:11:18,889 --> 00:11:29,029
five four if if I just do what's up here

193
00:11:25,779 --> 00:11:32,800
if the result of my hash is DF CD

194
00:11:29,029 --> 00:11:34,910
whatever then ends no way I can know

195
00:11:32,800 --> 00:11:38,779
that the message has been used to

196
00:11:34,910 --> 00:11:42,589
produce this hash is the Fox is the text

197
00:11:38,779 --> 00:11:44,839
Fox its computational computationally

198
00:11:42,589 --> 00:11:47,959
impossible to know to extract that from

199
00:11:44,839 --> 00:11:50,180
the hash that was it means by not

200
00:11:47,959 --> 00:11:55,189
reversible resistance to collisions I'll

201
00:11:50,180 --> 00:11:58,459
just explain this briefly what it means

202
00:11:55,189 --> 00:12:02,930
is that if I'm given a hash and it says

203
00:11:58,459 --> 00:12:05,388
the Fox hash or the that its value is DF

204
00:12:02,930 --> 00:12:07,388
CD three four five four uh it's gonna be

205
00:12:05,389 --> 00:12:10,069
very difficult or computational

206
00:12:07,389 --> 00:12:13,180
impossible to find another hash that

207
00:12:10,069 --> 00:12:13,180
produces the same value

208
00:12:14,970 --> 00:12:22,830
if I take a chain instead of Fox its dog

209
00:12:17,940 --> 00:12:30,840
for example it won't give me the same

210
00:12:22,830 --> 00:12:33,030
hash value okay and you may see does

211
00:12:30,840 --> 00:12:35,130
that mean that a hash function doesn't

212
00:12:33,030 --> 00:12:39,780
create collisions well there are

213
00:12:35,130 --> 00:12:43,200
collisions there always are why all you

214
00:12:39,780 --> 00:12:45,480
have to do is to compare the input some

215
00:12:43,200 --> 00:12:49,620
size and the output in size because the

216
00:12:45,480 --> 00:12:52,620
inputs in size can have any kind of

217
00:12:49,620 --> 00:12:54,450
length the inputs can have any point in

218
00:12:52,620 --> 00:12:58,530
length but the hashed on the outputs

219
00:12:54,450 --> 00:13:03,000
length has a specific length which means

220
00:12:58,530 --> 00:13:05,430
that even if you forget that the inputs

221
00:13:03,000 --> 00:13:11,970
can have variable length let's imagine

222
00:13:05,430 --> 00:13:14,010
that we limit the output to 5,000 bits

223
00:13:11,970 --> 00:13:20,790
that means that there are only two

224
00:13:14,010 --> 00:13:24,810
elevated to 5,000 possible messages to

225
00:13:20,790 --> 00:13:27,990
two 107 or to two is far less than two

226
00:13:24,810 --> 00:13:30,410
to five thousand so brute force there

227
00:13:27,990 --> 00:13:34,350
are gonna be some hash sums are the same

228
00:13:30,410 --> 00:13:37,140
there gonna be some collisions if you've

229
00:13:34,350 --> 00:13:38,790
got five it's like five birds and two

230
00:13:37,140 --> 00:13:40,290
nests if you've got five birds and two

231
00:13:38,790 --> 00:13:43,980
Nessus always gonna be a fight over who

232
00:13:40,290 --> 00:13:49,550
gets to the nest just one nuance which

233
00:13:43,980 --> 00:13:56,190
people who always always ask a CRC

234
00:13:49,550 --> 00:14:00,620
is it a critter perfect hash function no

235
00:13:56,190 --> 00:14:06,140
because it's not tolerant to collisions

236
00:14:00,620 --> 00:14:09,150
it's not a one-to-one function but and

237
00:14:06,140 --> 00:14:11,850
you can get an image of it quite easily

238
00:14:09,150 --> 00:14:16,020
I just wanted to say that it's a comment

239
00:14:11,850 --> 00:14:18,230
CLC's aren't cryptographic hashes Merkle

240
00:14:16,020 --> 00:14:18,230
trees

241
00:14:18,600 --> 00:14:27,040
as I've explored explained how hash

242
00:14:23,500 --> 00:14:29,740
functions work let's look at Merkle

243
00:14:27,040 --> 00:14:32,380
trees briefly because they used a lot in

244
00:14:29,740 --> 00:14:35,260
blockchain in general and they're used

245
00:14:32,380 --> 00:14:37,630
with a built based on hash functions

246
00:14:35,260 --> 00:14:42,220
cryptographic hash functions are very

247
00:14:37,630 --> 00:14:46,600
useful because they show quite

248
00:14:42,220 --> 00:14:48,340
efficiently the fact that there's an

249
00:14:46,600 --> 00:14:51,490
element that belongs to a set at the

250
00:14:48,340 --> 00:14:54,940
same time as protecting the integrity of

251
00:14:51,490 --> 00:14:56,950
this set so that if then any of them

252
00:14:54,940 --> 00:14:59,470
values that are in this set a modified

253
00:14:56,950 --> 00:15:04,420
to the Merkle tree result will be

254
00:14:59,470 --> 00:15:13,030
completely different so so we go from a

255
00:15:04,420 --> 00:15:15,819
linear cost to a logarithmic cost let's

256
00:15:13,030 --> 00:15:18,130
move on now let's just imagine that I

257
00:15:15,820 --> 00:15:19,330
want to create a Merkle tree and which

258
00:15:18,130 --> 00:15:21,130
I'm going to put in the names of the

259
00:15:19,330 --> 00:15:24,990
cities of Spain that's what I'm gonna

260
00:15:21,130 --> 00:15:30,760
put in it I know about four names here

261
00:15:24,990 --> 00:15:33,070
just for for the moment the first city

262
00:15:30,760 --> 00:15:36,030
I'm gonna because is called a la vida if

263
00:15:33,070 --> 00:15:36,030
you can see it Oliver

264
00:15:36,570 --> 00:15:44,110
t1 uh no - you know no t1 is Oliver the

265
00:15:41,290 --> 00:15:50,709
next node is Alba fitting by the way

266
00:15:44,110 --> 00:15:54,160
this is a Merkle tree it's a set of

267
00:15:50,710 --> 00:15:59,890
elements and I want to add its second

268
00:15:54,160 --> 00:16:02,500
node Alberti to my set in the end of my

269
00:15:59,890 --> 00:16:04,900
set is always going to be represented by

270
00:16:02,500 --> 00:16:08,650
one hash value whether it's got one

271
00:16:04,900 --> 00:16:11,079
element or five million and below this

272
00:16:08,650 --> 00:16:13,270
hash value I can create a tree structure

273
00:16:11,080 --> 00:16:16,120
which will have a logarithmic function

274
00:16:13,270 --> 00:16:20,560
in comparison to the number of elements

275
00:16:16,120 --> 00:16:22,600
in my set so you take the Alba theta

276
00:16:20,560 --> 00:16:24,160
value and you take the Oliver value

277
00:16:22,600 --> 00:16:25,570
Anika I combined them in this way in

278
00:16:24,160 --> 00:16:28,300
what way I take a hash function

279
00:16:25,570 --> 00:16:31,720
whichever one you want

280
00:16:28,300 --> 00:16:34,689
and within it as a parameter I add to

281
00:16:31,720 --> 00:16:37,020
one lets's Oliver concatenate it or

282
00:16:34,690 --> 00:16:41,230
linked to Alba 30

283
00:16:37,020 --> 00:16:45,069
so I'm Hoshi Oliver and Alberta together

284
00:16:41,230 --> 00:16:49,990
I patched them together and I've given

285
00:16:45,070 --> 00:16:54,370
this a value called t1 t2 this is a

286
00:16:49,990 --> 00:16:55,990
Merkle tree with tournaments the set of

287
00:16:54,370 --> 00:17:01,860
two elements and this is the value that

288
00:16:55,990 --> 00:17:01,860
represents it T lowercase one T locus -

289
00:17:04,230 --> 00:17:12,750
and I want to add to the value of a sec

290
00:17:07,510 --> 00:17:19,970
a third city so what I do here is I

291
00:17:12,750 --> 00:17:23,529
create a node above this one where it's

292
00:17:19,970 --> 00:17:23,529
[Music]

293
00:17:25,470 --> 00:17:30,340
Mahler child on the Left small and the

294
00:17:28,600 --> 00:17:35,350
other charge on the right so it's a new

295
00:17:30,340 --> 00:17:39,909
function a new hash function its

296
00:17:35,350 --> 00:17:42,610
parameter is going to be two subscript

297
00:17:39,910 --> 00:17:44,350
one linked to two subscript two this is

298
00:17:42,610 --> 00:17:46,570
gonna give me another hash value it's

299
00:17:44,350 --> 00:17:49,959
just in this case I've called T

300
00:17:46,570 --> 00:17:52,770
subscript 3 to scrub subscript 4 which

301
00:17:49,960 --> 00:17:54,670
is the new route for the Merkle tree

302
00:17:52,770 --> 00:17:58,360
because it's a node that all the other

303
00:17:54,670 --> 00:18:00,910
two come from I want to add an both note

304
00:17:58,360 --> 00:18:02,110
then I do once again I'm gonna leave

305
00:18:00,910 --> 00:18:05,370
this one because this isn't going to

306
00:18:02,110 --> 00:18:10,300
change but I combined the two of them

307
00:18:05,370 --> 00:18:15,399
which give gives me and that new hash T

308
00:18:10,300 --> 00:18:21,720
1 - 2 T 2 3 4 and this gives me a 7th

309
00:18:15,400 --> 00:18:31,290
hash which is actually

310
00:18:21,720 --> 00:18:35,170
the linking of T 1 2 and T 3 for good

311
00:18:31,290 --> 00:18:38,260
now let's just imagine somebody comes

312
00:18:35,170 --> 00:18:40,660
along and they are say to me ok I want

313
00:18:38,260 --> 00:18:42,430
to do this a hash tree with 4 nodes

314
00:18:40,660 --> 00:18:46,810
Oliver Oliver said de alicante Maria

315
00:18:42,430 --> 00:18:49,330
which the four cities in Spain which

316
00:18:46,810 --> 00:18:52,780
which is where they best plate pay taxes

317
00:18:49,330 --> 00:19:04,210
government taxes and fatter all that

318
00:18:52,780 --> 00:19:06,340
suddenly appears wants to prove their

319
00:19:04,210 --> 00:19:07,900
being accused of not paying their taxes

320
00:19:06,340 --> 00:19:10,570
to the government and they want to prove

321
00:19:07,900 --> 00:19:15,450
that they are a member here so you go to

322
00:19:10,570 --> 00:19:18,639
Al Maria what will happen that the

323
00:19:15,450 --> 00:19:22,240
verification will fail because this

324
00:19:18,640 --> 00:19:27,030
hatch here when I change this value is

325
00:19:22,240 --> 00:19:29,920
gonna be completely different so this

326
00:19:27,030 --> 00:19:32,410
change to the bottom right node will

327
00:19:29,920 --> 00:19:35,440
head upwards and in the end the route

328
00:19:32,410 --> 00:19:37,360
ash which is Oliver Alba 30 Alicante

329
00:19:35,440 --> 00:19:40,750
thought I was completely different to a

330
00:19:37,360 --> 00:19:44,760
Laval about Natalia can tell Maria which

331
00:19:40,750 --> 00:19:47,680
reminds me that I forgot about the

332
00:19:44,760 --> 00:19:51,700
properties is that if I just change one

333
00:19:47,680 --> 00:19:58,390
single bit in the entry parameters on

334
00:19:51,700 --> 00:20:00,790
average 50 change in the output so if

335
00:19:58,390 --> 00:20:02,650
instead if I put putting al Maria I put

336
00:20:00,790 --> 00:20:06,129
a Maria without the accent for example

337
00:20:02,650 --> 00:20:09,190
just this tiny tiny change the root

338
00:20:06,130 --> 00:20:12,490
value would completely different you got

339
00:20:09,190 --> 00:20:16,360
it so that's basically the process that

340
00:20:12,490 --> 00:20:18,310
I've just explained imagine I want to

341
00:20:16,360 --> 00:20:20,500
prove that Alba 30 belongs to this set

342
00:20:18,310 --> 00:20:24,060
of cities is a member of this set of

343
00:20:20,500 --> 00:20:24,060
cities what do I do

344
00:20:27,170 --> 00:20:39,270
what it do is I send the route by the

345
00:20:34,860 --> 00:20:42,510
way between we've created this hash tree

346
00:20:39,270 --> 00:20:47,340
as somebody else has stored at the t-one

347
00:20:42,510 --> 00:20:51,840
254 hash and a month later I want to

348
00:20:47,340 --> 00:20:55,679
prove that overfitting the other person

349
00:20:51,840 --> 00:21:00,080
didn't store Alabama 30 on Alicante

350
00:20:55,680 --> 00:21:00,080
almería just the left branch of the tree

351
00:21:01,370 --> 00:21:06,689
the other person as safe this part and

352
00:21:04,980 --> 00:21:10,290
I've saved the other part and I want to

353
00:21:06,690 --> 00:21:12,660
prove that Alba 30 belongs to the set of

354
00:21:10,290 --> 00:21:18,350
cities that we've created what do i do I

355
00:21:12,660 --> 00:21:21,780
send him first I love this value here I

356
00:21:18,350 --> 00:21:23,850
don't even need to send al Alicante and

357
00:21:21,780 --> 00:21:26,370
Maria this gives me privacy instead

358
00:21:23,850 --> 00:21:31,679
instead of revealing the four cities in

359
00:21:26,370 --> 00:21:35,370
my set I'm revealing just two so what is

360
00:21:31,680 --> 00:21:37,770
he going to do we compute the hash t12

361
00:21:35,370 --> 00:21:40,860
with Alba feta and I lava because I'm

362
00:21:37,770 --> 00:21:46,970
sending it to it and later was the last

363
00:21:40,860 --> 00:21:51,360
step he will check the the root node and

364
00:21:46,970 --> 00:21:54,150
this root node arrived from the values

365
00:21:51,360 --> 00:21:57,000
that I just sent him he's going to

366
00:21:54,150 --> 00:21:59,760
compete with a concatenation of these

367
00:21:57,000 --> 00:22:04,200
two values that I sent concatenated and

368
00:21:59,760 --> 00:22:07,050
linked with this value 3 for prime it's

369
00:22:04,200 --> 00:22:09,630
gonna hash it and the result here and

370
00:22:07,050 --> 00:22:13,080
there in the fifth step after recurred

371
00:22:09,630 --> 00:22:15,000
computation of this root hash derived

372
00:22:13,080 --> 00:22:18,330
from the values I sent coincides with

373
00:22:15,000 --> 00:22:20,250
the root of the miracle tree that we

374
00:22:18,330 --> 00:22:24,570
computed before a month or two months

375
00:22:20,250 --> 00:22:27,500
ago if they they coincide okay alba

376
00:22:24,570 --> 00:22:30,419
theta belongs to this set and a lava you

377
00:22:27,500 --> 00:22:33,710
sent it to me because you wanted and

378
00:22:30,420 --> 00:22:33,710
normally to avoid

379
00:22:34,390 --> 00:22:41,260
to avoid to send Alaba instead of

380
00:22:37,480 --> 00:22:45,660
sending the playing values we could send

381
00:22:41,260 --> 00:22:45,660
hashes here we would add another layer

382
00:22:46,740 --> 00:22:51,390
values concatenated here instead of a

383
00:22:49,510 --> 00:22:53,650
level would be the Oliver hash

384
00:22:51,390 --> 00:22:56,650
concatenated or links to Alberta this

385
00:22:53,650 --> 00:23:00,640
hash one of the gaining x' here well

386
00:22:56,650 --> 00:23:04,500
means you can say okay this is a very

387
00:23:00,640 --> 00:23:07,990
complex structure I have to think about

388
00:23:04,500 --> 00:23:12,570
it I prefer to have a root of Cities and

389
00:23:07,990 --> 00:23:16,660
concatenate and hashing these arise to

390
00:23:12,570 --> 00:23:20,200
hash to hash all this the linking of

391
00:23:16,660 --> 00:23:23,590
these elements and and an element should

392
00:23:20,200 --> 00:23:26,860
belong to this right if I modify one of

393
00:23:23,590 --> 00:23:29,320
the elements of the right I then will

394
00:23:26,860 --> 00:23:30,669
hash the concatenation of these modified

395
00:23:29,320 --> 00:23:33,939
elements will have a totally different

396
00:23:30,670 --> 00:23:37,480
hash than the one I introduced at the

397
00:23:33,940 --> 00:23:39,670
beginning because hash is modified of

398
00:23:37,480 --> 00:23:43,990
one 50% of the bits and hashes are

399
00:23:39,670 --> 00:23:46,180
modified so instead of using Merkle

400
00:23:43,990 --> 00:23:51,940
trees that are very complex why don't we

401
00:23:46,180 --> 00:23:58,680
use a write an array well I want to show

402
00:23:51,940 --> 00:24:03,730
you this the cost the computational cost

403
00:23:58,680 --> 00:24:06,850
so in the belonging of an element to set

404
00:24:03,730 --> 00:24:10,600
in a Merkle tree grows in a logarithmic

405
00:24:06,850 --> 00:24:16,330
way if we had binary trees the trees

406
00:24:10,600 --> 00:24:19,090
where each a node has two sons in a race

407
00:24:16,330 --> 00:24:20,860
this is linear if I have an array of 10

408
00:24:19,090 --> 00:24:23,050
elements enough I know on average I have

409
00:24:20,860 --> 00:24:26,080
to do 10 operations to demonstrate then

410
00:24:23,050 --> 00:24:28,000
one element belongs to that array the

411
00:24:26,080 --> 00:24:30,220
results you know I have a tree with four

412
00:24:28,000 --> 00:24:33,400
leaves I have to send two additional

413
00:24:30,220 --> 00:24:37,600
laments if I have an Merkle tree had to

414
00:24:33,400 --> 00:24:42,700
send to this one and this one a part of

415
00:24:37,600 --> 00:24:44,949
me but for mine if I have an array I

416
00:24:42,700 --> 00:24:46,690
have to send well if we thought elements

417
00:24:44,950 --> 00:24:49,470
I have to send apart from mine

418
00:24:46,690 --> 00:24:52,390
I have to send it three other elements

419
00:24:49,470 --> 00:24:54,580
with four elements there's not a lot of

420
00:24:52,390 --> 00:24:58,090
difference with eight elements but with

421
00:24:54,580 --> 00:25:00,939
a miracle tree plus minor have to send

422
00:24:58,090 --> 00:25:04,360
three elements with an array I would

423
00:25:00,940 --> 00:25:07,360
need to send seven if I have a set of

424
00:25:04,360 --> 00:25:09,550
sixteen elements with a Merkle tree I

425
00:25:07,360 --> 00:25:11,800
have to send four additional elements

426
00:25:09,550 --> 00:25:13,389
with an array I would have to send

427
00:25:11,800 --> 00:25:18,370
fifteen this is the logarithmic

428
00:25:13,390 --> 00:25:23,080
progression the it's four to six and the

429
00:25:18,370 --> 00:25:26,560
binary eight is three so it is growing

430
00:25:23,080 --> 00:25:29,679
in a logarithmic progression and here

431
00:25:26,560 --> 00:25:31,720
it's linear to demonstrate the belonging

432
00:25:29,680 --> 00:25:34,270
to an element twist from to a set of

433
00:25:31,720 --> 00:25:37,570
sixteen elements I have to send fifteen

434
00:25:34,270 --> 00:25:40,980
it's almost sixteen five eight have to

435
00:25:37,570 --> 00:25:43,300
send seven it's growing and the same

436
00:25:40,980 --> 00:25:47,160
based on the number of elements of the

437
00:25:43,300 --> 00:25:51,970
set so this is very useful because you

438
00:25:47,160 --> 00:25:57,310
can optimize to optimize resources in

439
00:25:51,970 --> 00:25:59,050
block chain we in fact we will realize

440
00:25:57,310 --> 00:26:02,050
that it's very very necessary to

441
00:25:59,050 --> 00:26:06,990
optimize resources as examples you if

442
00:26:02,050 --> 00:26:10,210
you if you've heard jorge before me and

443
00:26:06,990 --> 00:26:10,990
he didn't have time for all so I'll do

444
00:26:10,210 --> 00:26:14,920
it myself

445
00:26:10,990 --> 00:26:23,140
if you open a console you'll have the

446
00:26:14,920 --> 00:26:27,360
OpenSSL that is installed calculator

447
00:26:23,140 --> 00:26:27,360
hash you can use this command line

448
00:26:47,840 --> 00:26:55,790
but a kilocalorie topping it says Haley

449
00:26:50,810 --> 00:27:03,770
I told OpenSSL well I could ask to read

450
00:26:55,790 --> 00:27:05,600
the file - in open ssl DHE - in and the

451
00:27:03,770 --> 00:27:11,810
number of the date of the the element

452
00:27:05,600 --> 00:27:18,649
that i want to hash but I'm very very

453
00:27:11,810 --> 00:27:20,659
slow when I'm I have a pipe OpenSSL this

454
00:27:18,650 --> 00:27:26,590
is the entry get it out from what I'm

455
00:27:20,660 --> 00:27:31,310
telling you but open SSL please

456
00:27:26,590 --> 00:27:33,169
calculate the summary function this is

457
00:27:31,310 --> 00:27:36,139
another name and that we give to

458
00:27:33,170 --> 00:27:40,580
cryptographic hashes give me the sum

459
00:27:36,140 --> 00:27:43,880
summary a function of this with these

460
00:27:40,580 --> 00:27:46,639
initials and show me the result in

461
00:27:43,880 --> 00:27:52,070
Exeter similar because I don't want the

462
00:27:46,640 --> 00:27:56,140
binary result too long so a the extra

463
00:27:52,070 --> 00:27:59,570
decimal are 256 bits in hexadecimal

464
00:27:56,140 --> 00:28:03,850
codification so if I change just a

465
00:27:59,570 --> 00:28:08,560
letter hash is totally different

466
00:28:03,850 --> 00:28:11,870
you see the difference different letters

467
00:28:08,560 --> 00:28:17,419
what I have done is just to remove I

468
00:28:11,870 --> 00:28:21,860
like a little change or Etta instead of

469
00:28:17,420 --> 00:28:26,480
OpenSSL because they're too many

470
00:28:21,860 --> 00:28:29,780
arguments you can use - bun - and in

471
00:28:26,480 --> 00:28:35,050
distribution step from DBM you can use

472
00:28:29,780 --> 00:28:35,050
this 256 suits

473
00:28:35,659 --> 00:28:43,080
you have different types of sums

474
00:28:38,100 --> 00:28:48,570
I don't know V sub tree tree is included

475
00:28:43,080 --> 00:28:51,809
but anyway this is the same this is the

476
00:28:48,570 --> 00:28:54,539
hash getting me this function in sum is

477
00:28:51,809 --> 00:28:56,299
the same the one that OpenSSL gave me

478
00:28:54,539 --> 00:28:58,309
but it's obvious but it's not

479
00:28:56,299 --> 00:29:02,370
implementation could be different

480
00:28:58,309 --> 00:29:10,590
maybe this 256 you can have /n and that

481
00:29:02,370 --> 00:29:13,439
changes everything what else that well

482
00:29:10,590 --> 00:29:17,158
you can play with this to calculate a

483
00:29:13,440 --> 00:29:21,809
hash it's quite simple with a command

484
00:29:17,159 --> 00:29:26,789
line or you can use the openness it's a

485
00:29:21,809 --> 00:29:31,230
library it can get more complex they are

486
00:29:26,789 --> 00:29:33,149
symmetric to obtain the private and the

487
00:29:31,230 --> 00:29:35,659
public key that's what we need to

488
00:29:33,149 --> 00:29:35,658
generate

489
00:29:52,200 --> 00:29:57,739
I was gonna make you a girl who's he

490
00:30:03,910 --> 00:30:07,410
nice company bye

491
00:30:12,860 --> 00:30:22,789
is that mr. Lester well OpenSSL generate

492
00:30:18,380 --> 00:30:25,700
a key of this type intro and it's

493
00:30:22,789 --> 00:30:33,408
instantaneous OpenSSL it's optimized for

494
00:30:25,700 --> 00:30:35,980
this I asked him this to keep it in a

495
00:30:33,409 --> 00:30:38,299
specific file with this title this name

496
00:30:35,980 --> 00:30:40,850
otherwise you won't understand what it

497
00:30:38,299 --> 00:30:43,070
says but it's been generated and I want

498
00:30:40,850 --> 00:30:50,299
to choose the file in which this is

499
00:30:43,070 --> 00:30:55,639
going to be stored this is the file this

500
00:30:50,299 --> 00:30:59,210
is a encoding of prime numbers different

501
00:30:55,639 --> 00:31:06,519
work modules what project has just

502
00:30:59,210 --> 00:31:06,519
explained I don't remember the command

503
00:31:11,860 --> 00:31:20,080
didn't wrk that was a triple because I

504
00:31:15,260 --> 00:31:23,090
never remember the components the

505
00:31:20,080 --> 00:31:24,529
OpenSSL help is very good I wanted to

506
00:31:23,090 --> 00:31:28,279
show you the prime numbers that were

507
00:31:24,529 --> 00:31:32,990
generated but there are somewhere there

508
00:31:28,279 --> 00:31:35,510
I generated the private key it's good

509
00:31:32,990 --> 00:31:37,460
for me but I can't send it to others I

510
00:31:35,510 --> 00:31:41,330
have to extract the private key from the

511
00:31:37,460 --> 00:31:43,250
public key I can get it easily it's

512
00:31:41,330 --> 00:31:44,899
quite logical because the private key

513
00:31:43,250 --> 00:31:47,200
contains all the information that is

514
00:31:44,899 --> 00:31:50,090
necessary out of which you can derive

515
00:31:47,200 --> 00:31:52,159
all the rest on the others in the other

516
00:31:50,090 --> 00:31:54,559
side on the other direction it's not

517
00:31:52,159 --> 00:31:58,309
very reasonable because the public keys

518
00:31:54,559 --> 00:32:00,769
public because I can send it to anyone

519
00:31:58,309 --> 00:32:03,529
if I can send it to anyone and anyone

520
00:32:00,769 --> 00:32:06,490
from this public key can extract extract

521
00:32:03,529 --> 00:32:14,350
the private key while the asymmetric

522
00:32:06,490 --> 00:32:18,529
encoding is is bad we have time we'll do

523
00:32:14,350 --> 00:32:21,879
encoding and encryption tests but I

524
00:32:18,529 --> 00:32:21,880
don't want to elaborate too much on this

525
00:32:30,730 --> 00:32:33,360
hi

526
00:32:34,280 --> 00:32:37,658
look a post on me

527
00:32:41,970 --> 00:32:44,870
put it

528
00:32:52,179 --> 00:32:59,860
and here public a dot PEM I have the

529
00:32:56,559 --> 00:33:03,010
public key associated to the private key

530
00:32:59,860 --> 00:33:03,610
that we had before it's easy and it's a

531
00:33:03,010 --> 00:33:06,429
command

532
00:33:03,610 --> 00:33:08,080
now with this I would have my probe a

533
00:33:06,429 --> 00:33:10,929
public and private key that I could send

534
00:33:08,080 --> 00:33:14,168
my friends to communicate with me in a

535
00:33:10,929 --> 00:33:18,610
secrete secrete manner these public keys

536
00:33:14,169 --> 00:33:20,289
I'm private keys not supported by any

537
00:33:18,610 --> 00:33:22,719
authority this is not a digital

538
00:33:20,289 --> 00:33:25,899
certificate but cryptographically

539
00:33:22,720 --> 00:33:29,230
they're valid let's continue if you're

540
00:33:25,899 --> 00:33:31,539
interested and if I have time I'll show

541
00:33:29,230 --> 00:33:36,909
you how to verify and sign the messages

542
00:33:31,539 --> 00:33:39,100
but these are just one line commands one

543
00:33:36,909 --> 00:33:42,520
I have the private and the public public

544
00:33:39,100 --> 00:33:44,230
key I find the private and would you

545
00:33:42,520 --> 00:33:48,010
prefer if I use the public here that's

546
00:33:44,230 --> 00:33:50,190
it with open SSL everything is easy

547
00:33:48,010 --> 00:33:53,320
don't worry

548
00:33:50,190 --> 00:33:55,929
so we've seen the cryptographic

549
00:33:53,320 --> 00:34:00,120
primitives that are used in any

550
00:33:55,929 --> 00:34:04,510
blockchain system digital signature

551
00:34:00,120 --> 00:34:06,100
Merkle trees and cryptographic modules

552
00:34:04,510 --> 00:34:10,179
and now we will see the blockchain

553
00:34:06,100 --> 00:34:13,509
technology okay I'll go slow we'll

554
00:34:10,179 --> 00:34:15,700
slowly because these are basic concepts

555
00:34:13,510 --> 00:34:17,740
and I want you to understand them and if

556
00:34:15,699 --> 00:34:20,759
you get lost please raise your hands and

557
00:34:17,739 --> 00:34:20,759
I will explain in details

558
00:34:21,089 --> 00:34:28,960
when when was this originated maybe you

559
00:34:25,359 --> 00:34:31,960
all know about bitcoins a crypto

560
00:34:28,960 --> 00:34:35,320
currency and a specific platform Bitcoin

561
00:34:31,960 --> 00:34:40,179
okay many people and it's not a

562
00:34:35,320 --> 00:34:45,580
criticism there are many people who

563
00:34:40,179 --> 00:34:49,030
normally there's an stops you will see

564
00:34:45,580 --> 00:34:51,609
what an echo is it crowd found found

565
00:34:49,030 --> 00:34:57,160
funding based on blockchain promising

566
00:34:51,609 --> 00:34:59,140
you a fantastic life and nobody really

567
00:34:57,160 --> 00:35:02,770
knows what you do with blockchain is it

568
00:34:59,140 --> 00:35:08,740
that as it have got a meaning is

569
00:35:02,770 --> 00:35:09,910
this meaningless if a start-up promises

570
00:35:08,740 --> 00:35:12,279
you that you're going to have a

571
00:35:09,910 --> 00:35:14,170
fantastic life with blockchain what do

572
00:35:12,280 --> 00:35:18,900
how do they use blockchain is that

573
00:35:14,170 --> 00:35:18,900
meaningful to use block chaining does

574
00:35:19,260 --> 00:35:28,870
well when did it start the origin the

575
00:35:26,200 --> 00:35:31,629
direct origin is an article published by

576
00:35:28,870 --> 00:35:32,049
Satoshi Nakamoto we don't know who this

577
00:35:31,630 --> 00:35:38,670
guy is

578
00:35:32,050 --> 00:35:43,300
on the 1st of November 2008 it was a

579
00:35:38,670 --> 00:35:47,970
distribution list of mail with

580
00:35:43,300 --> 00:35:47,970
cryptographic themes Bitcoin

581
00:35:49,260 --> 00:35:54,940
peer-to-peer ecash papers p2p means

582
00:35:53,140 --> 00:35:55,390
there's no central authority in the

583
00:35:54,940 --> 00:35:59,440
middle

584
00:35:55,390 --> 00:36:01,900
nobody's controlling was being in

585
00:35:59,440 --> 00:36:06,610
exchange this is the origin but Bitcoin

586
00:36:01,900 --> 00:36:08,890
has many other and untie scissors

587
00:36:06,610 --> 00:36:11,170
there's no central authority that

588
00:36:08,890 --> 00:36:14,890
maintains the global status of the

589
00:36:11,170 --> 00:36:17,920
database where we indicate how much

590
00:36:14,890 --> 00:36:20,290
money is in every pocket if there's own

591
00:36:17,920 --> 00:36:22,450
authorities it it's easy to know how

592
00:36:20,290 --> 00:36:25,000
much how much money a person has the

593
00:36:22,450 --> 00:36:27,250
authority will say this person has this

594
00:36:25,000 --> 00:36:29,950
amount of money but you have to trust

595
00:36:27,250 --> 00:36:31,990
this central authority but bitcoin is a

596
00:36:29,950 --> 00:36:34,000
variant of that there's no central

597
00:36:31,990 --> 00:36:36,430
authority and it's possible to have a

598
00:36:34,000 --> 00:36:38,350
record of how much money is in the hands

599
00:36:36,430 --> 00:36:41,200
of these people but these problems were

600
00:36:38,350 --> 00:36:44,860
studied for many years one of the first

601
00:36:41,200 --> 00:36:48,480
articles related to this and was

602
00:36:44,860 --> 00:36:50,770
published in 82 26 years before Satoshi

603
00:36:48,480 --> 00:36:55,450
by Leslie Lamport

604
00:36:50,770 --> 00:36:58,420
and Al the Byzantine generals problems

605
00:36:55,450 --> 00:37:01,270
what is that three generals are seeking

606
00:36:58,420 --> 00:37:03,880
or attacking a city these generals have

607
00:37:01,270 --> 00:37:07,450
to be ok do are we attacking tomorrow or

608
00:37:03,880 --> 00:37:09,940
not what happens one is on the east west

609
00:37:07,450 --> 00:37:13,149
and south these are the three generals

610
00:37:09,940 --> 00:37:15,820
they can send messages at 7 do we attack

611
00:37:13,150 --> 00:37:16,690
at 7 demonium do we attack or not but

612
00:37:15,820 --> 00:37:18,640
this message is

613
00:37:16,690 --> 00:37:21,460
can be intercepted and they can change

614
00:37:18,640 --> 00:37:24,250
the message the enemy can change they

615
00:37:21,460 --> 00:37:29,680
had to decide if we attack or if we well

616
00:37:24,250 --> 00:37:35,380
wait so this article it's it's about

617
00:37:29,680 --> 00:37:37,240
consensus it's mentioned in blockchain

618
00:37:35,380 --> 00:37:41,760
and bitcoins it's a system of

619
00:37:37,240 --> 00:37:41,759
decentralized or distributed consensus

620
00:37:45,030 --> 00:37:52,450
the Byzantine generals problem proposed

621
00:37:49,440 --> 00:37:56,020
consensus and decentralized algorithms

622
00:37:52,450 --> 00:38:00,339
without a central authority then other

623
00:37:56,020 --> 00:38:05,430
systems the electronic cash david chung

624
00:38:00,339 --> 00:38:09,700
the father of the anonymous anonymity

625
00:38:05,430 --> 00:38:13,750
methods like tor he when he invented

626
00:38:09,700 --> 00:38:18,339
that others were based on ideas of chung

627
00:38:13,750 --> 00:38:22,119
he's a genius in 83 he proposed a system

628
00:38:18,339 --> 00:38:26,349
for untraceable payments blind

629
00:38:22,119 --> 00:38:26,980
signatures for untraceable payments what

630
00:38:26,349 --> 00:38:30,280
is the problem

631
00:38:26,980 --> 00:38:32,619
we used central authorities you could

632
00:38:30,280 --> 00:38:35,410
make electronic payments untraceable

633
00:38:32,619 --> 00:38:37,510
payments but when creating the system

634
00:38:35,410 --> 00:38:41,500
did you depended on a central authority

635
00:38:37,510 --> 00:38:46,420
at so this authority has much more power

636
00:38:41,500 --> 00:38:49,300
than you want and these are the systems

637
00:38:46,420 --> 00:38:51,930
in a 8283 and since then there are many

638
00:38:49,300 --> 00:38:55,089
others there are problems scalability

639
00:38:51,930 --> 00:38:56,049
lowest scalable scalability because in

640
00:38:55,089 --> 00:38:58,328
the byzantines

641
00:38:56,050 --> 00:39:02,140
general's case we could not extrapolate

642
00:38:58,329 --> 00:39:07,480
with systems with many nodes and in the

643
00:39:02,140 --> 00:39:09,339
case of david chung it used a third

644
00:39:07,480 --> 00:39:11,849
party and he wanted to avoid that the

645
00:39:09,339 --> 00:39:14,529
blockchain technology why this name

646
00:39:11,849 --> 00:39:17,170
because it's got this structure of

647
00:39:14,530 --> 00:39:19,060
blocks imagine now have gloating with

648
00:39:17,170 --> 00:39:24,280
three blocks we've just generated block

649
00:39:19,060 --> 00:39:25,900
to 0 is a Genesis block establishes the

650
00:39:24,280 --> 00:39:29,260
initial status of their network and

651
00:39:25,900 --> 00:39:32,320
block to is the last one has a

652
00:39:29,260 --> 00:39:34,840
hache pointer to one and this block one

653
00:39:32,320 --> 00:39:42,010
is pointing a hash pointing to block

654
00:39:34,840 --> 00:39:46,420
zero it's a hash pointer cryptographic

655
00:39:42,010 --> 00:39:49,780
hash what happens if anybody modifies

656
00:39:46,420 --> 00:39:51,940
block one because block two eyes has a

657
00:39:49,780 --> 00:39:56,080
hash point in the hash value block one

658
00:39:51,940 --> 00:39:57,220
then all those in block to say no block

659
00:39:56,080 --> 00:39:59,200
one you giving me

660
00:39:57,220 --> 00:40:02,169
well the hash of these block one doesn't

661
00:39:59,200 --> 00:40:04,810
coincide with hash block one that I have

662
00:40:02,170 --> 00:40:06,520
stored in my block - so there's a

663
00:40:04,810 --> 00:40:10,330
problem somebody is trying to cheat on

664
00:40:06,520 --> 00:40:12,490
me that's why it's called block chains

665
00:40:10,330 --> 00:40:18,069
it's a chain or block that are linked

666
00:40:12,490 --> 00:40:21,040
with cryptographic hashes why is this

667
00:40:18,070 --> 00:40:24,130
structure being used today because in

668
00:40:21,040 --> 00:40:26,290
each of these blocks the changes are

669
00:40:24,130 --> 00:40:28,900
stored with regard to the previous

670
00:40:26,290 --> 00:40:31,960
blocks let's talk about Bitcoin it's the

671
00:40:28,900 --> 00:40:38,650
blockchain system by excellence in

672
00:40:31,960 --> 00:40:42,640
Bitcoin we have bank items that are

673
00:40:38,650 --> 00:40:45,370
noted new block 0 we have account 1 2 3

674
00:40:42,640 --> 00:40:51,240
4 has zero euros imagine that someone

675
00:40:45,370 --> 00:40:53,220
pays me 5 euros in block 1 I will have a

676
00:40:51,240 --> 00:40:57,279
transaction saying

677
00:40:53,220 --> 00:41:01,740
account 1 2 3 4 has 5 euros and the the

678
00:40:57,280 --> 00:41:04,750
paying account has lost 5 euros so

679
00:41:01,740 --> 00:41:07,120
believe me that the account making the

680
00:41:04,750 --> 00:41:09,640
payment had 5 euros at the beginning so

681
00:41:07,120 --> 00:41:12,819
this block 1 is valid everybody is going

682
00:41:09,640 --> 00:41:14,620
to validate it and it's going to the

683
00:41:12,820 --> 00:41:16,930
stage is going to be updated and the

684
00:41:14,620 --> 00:41:21,940
general status of the network with a

685
00:41:16,930 --> 00:41:27,819
differential 1 2 3 4 + 5 + 1 1 2 3 5 - 5

686
00:41:21,940 --> 00:41:30,160
euros you don't need to resend all the

687
00:41:27,820 --> 00:41:32,580
statuses of all the accounts in the

688
00:41:30,160 --> 00:41:32,580
system

689
00:41:34,290 --> 00:41:41,140
what is the data structures that we have

690
00:41:37,360 --> 00:41:44,110
in a blockchain addresses transactions

691
00:41:41,140 --> 00:41:48,310
blocks and the blockchain addresses are

692
00:41:44,110 --> 00:41:52,840
account IDs normally there is an

693
00:41:48,310 --> 00:41:56,259
Associated balance it's not a bank

694
00:41:52,840 --> 00:41:59,080
address it's not a typical bank address

695
00:41:56,260 --> 00:42:01,780
it's not a number even by the bank it's

696
00:41:59,080 --> 00:42:05,230
a number that it's the coding of a

697
00:42:01,780 --> 00:42:12,010
cryptographic public key but let's see

698
00:42:05,230 --> 00:42:14,770
what why basically because it's got a

699
00:42:12,010 --> 00:42:16,300
private key that is associated and it's

700
00:42:14,770 --> 00:42:19,720
the one who they're going to use to

701
00:42:16,300 --> 00:42:23,070
authorize payments the public key can be

702
00:42:19,720 --> 00:42:25,660
in the hands of anyone so what

703
00:42:23,070 --> 00:42:28,360
blockchain do is to take this public key

704
00:42:25,660 --> 00:42:32,470
and they call it the encrypted egg-like

705
00:42:28,360 --> 00:42:35,050
encoded and this encoding is what is

706
00:42:32,470 --> 00:42:37,540
written in the blockchain my public key

707
00:42:35,050 --> 00:42:40,840
is one two three four the operation in

708
00:42:37,540 --> 00:42:43,779
Bitcoin is the hash of wonderful and

709
00:42:40,840 --> 00:42:46,180
this hash is what people will know as my

710
00:42:43,780 --> 00:42:48,970
Bitcoin address when I want to make a

711
00:42:46,180 --> 00:42:51,940
payment I will use the private key

712
00:42:48,970 --> 00:42:54,669
associated to public key one two three

713
00:42:51,940 --> 00:42:58,420
four so this transaction is from the key

714
00:42:54,670 --> 00:43:00,100
one two three four if public if people

715
00:42:58,420 --> 00:43:02,430
have this public key they will check

716
00:43:00,100 --> 00:43:05,049
that the digital signature that I sent

717
00:43:02,430 --> 00:43:11,410
coincides and this is okay he is the

718
00:43:05,050 --> 00:43:15,910
legitimate owner of this these are the

719
00:43:11,410 --> 00:43:18,310
transactions they are written operations

720
00:43:15,910 --> 00:43:24,420
in that they distributed bit database in

721
00:43:18,310 --> 00:43:29,259
your chain there are two basic models

722
00:43:24,420 --> 00:43:31,720
good soccer and the the model that is

723
00:43:29,260 --> 00:43:34,830
based the account based model it's more

724
00:43:31,720 --> 00:43:39,879
traditional good so is used by Bitcoin

725
00:43:34,830 --> 00:43:42,759
but transaction is an no written

726
00:43:39,880 --> 00:43:45,800
operation on the databases so it has

727
00:43:42,760 --> 00:43:51,140
been authenticated with the private keys

728
00:43:45,800 --> 00:43:54,110
then we have Brooks sets of transactions

729
00:43:51,140 --> 00:43:56,120
that are not conflictive between them so

730
00:43:54,110 --> 00:43:58,250
all the transactions are taken because I

731
00:43:56,120 --> 00:44:01,190
want to want to make a payment to this

732
00:43:58,250 --> 00:44:02,780
guy here I pay you and going to

733
00:44:01,190 --> 00:44:05,150
disseminate it to the rest of the

734
00:44:02,780 --> 00:44:07,910
blockchain all of us our nodes of a

735
00:44:05,150 --> 00:44:09,800
blockchain my payment goes to you but

736
00:44:07,910 --> 00:44:12,350
I'm saying I'm sending you that the

737
00:44:09,800 --> 00:44:15,620
encoding to all the rest in the room so

738
00:44:12,350 --> 00:44:17,690
you will check that I paid it the

739
00:44:15,620 --> 00:44:19,819
transaction is signed with my private

740
00:44:17,690 --> 00:44:22,460
key that you will do that using my

741
00:44:19,820 --> 00:44:23,630
public key if I want to pay five years

742
00:44:22,460 --> 00:44:25,850
you will check that I have more than

743
00:44:23,630 --> 00:44:31,400
five euros in my account that is

744
00:44:25,850 --> 00:44:34,580
represented my with my public key we do

745
00:44:31,400 --> 00:44:38,480
the transaction that I send you or all

746
00:44:34,580 --> 00:44:41,509
your transactions all these transactions

747
00:44:38,480 --> 00:44:44,630
are compiled in in a set that's called

748
00:44:41,510 --> 00:44:46,070
block block will have the status of all

749
00:44:44,630 --> 00:44:47,990
the transactions received from the

750
00:44:46,070 --> 00:44:51,470
previous block and they're heading with

751
00:44:47,990 --> 00:44:56,779
meta information and a blockchain is

752
00:44:51,470 --> 00:44:58,459
this drawing with a hash pointer from

753
00:44:56,780 --> 00:45:01,310
one block to the other if you there's

754
00:44:58,460 --> 00:45:04,220
one bit that is modified in block block

755
00:45:01,310 --> 00:45:09,320
zero pick because they're linked between

756
00:45:04,220 --> 00:45:11,149
them the bloob hash from block zero

757
00:45:09,320 --> 00:45:14,720
containing block one does not coincide

758
00:45:11,150 --> 00:45:17,330
with this other modified block so

759
00:45:14,720 --> 00:45:22,899
somebody will realize that there has

760
00:45:17,330 --> 00:45:29,569
been tampering let's go into detail

761
00:45:22,900 --> 00:45:33,560
addresses this is the ID system we use

762
00:45:29,570 --> 00:45:35,330
addresses normally there are exceptions

763
00:45:33,560 --> 00:45:39,020
but normally it's the encoding of a

764
00:45:35,330 --> 00:45:41,860
public key in the smart contracts that

765
00:45:39,020 --> 00:45:45,259
their address is not the public key

766
00:45:41,860 --> 00:45:47,540
encoding is different each address has

767
00:45:45,260 --> 00:45:49,700
its own balance that is associated how

768
00:45:47,540 --> 00:45:55,540
many euros or how many bitcoins you have

769
00:45:49,700 --> 00:45:55,540
in this public key

770
00:45:56,770 --> 00:46:04,040
to use your balance you have to send we

771
00:46:01,340 --> 00:46:06,350
have to send a signature digital sign

772
00:46:04,040 --> 00:46:09,710
with a private key associated to the

773
00:46:06,350 --> 00:46:18,230
public key the business represents your

774
00:46:09,710 --> 00:46:21,460
address there's a nuance here detail

775
00:46:18,230 --> 00:46:24,500
when you started working with blockchain

776
00:46:21,460 --> 00:46:25,990
fact by default all the accounts exist

777
00:46:24,500 --> 00:46:29,650
you don't need to open an account why

778
00:46:25,990 --> 00:46:33,049
because by default in the set of private

779
00:46:29,650 --> 00:46:37,250
key system all of them exists but then

780
00:46:33,050 --> 00:46:38,930
you need to know who's the owner that

781
00:46:37,250 --> 00:46:40,520
doesn't mean that you have money from

782
00:46:38,930 --> 00:46:43,790
the beginning when the blockchain is

783
00:46:40,520 --> 00:46:45,470
created your account exists when you

784
00:46:43,790 --> 00:46:47,090
generate the private key you can start

785
00:46:45,470 --> 00:46:53,509
using it but you have balance of zero

786
00:46:47,090 --> 00:46:55,310
euros at the beginning if you get into

787
00:46:53,510 --> 00:46:57,920
Bitcoin how is what's the balance of

788
00:46:55,310 --> 00:47:00,410
account one two three four zero zero I

789
00:46:57,920 --> 00:47:03,260
didn't create it yes it yokai can't

790
00:47:00,410 --> 00:47:10,279
exist it but you've never used it this

791
00:47:03,260 --> 00:47:14,660
is the diagram how you get oh how you

792
00:47:10,280 --> 00:47:18,410
encode the addresses and this diagram by

793
00:47:14,660 --> 00:47:24,049
Bitcoin it's from the official website

794
00:47:18,410 --> 00:47:27,980
of Bitcoin this is my private key we're

795
00:47:24,050 --> 00:47:30,770
going use elliptic curves you remember

796
00:47:27,980 --> 00:47:33,520
the one we generated with open SSL it's

797
00:47:30,770 --> 00:47:38,060
the same but in a different way so

798
00:47:33,520 --> 00:47:42,920
private key here I present a one-way key

799
00:47:38,060 --> 00:47:49,250
conversion don't remember a specific

800
00:47:42,920 --> 00:47:52,550
conversion then so these results this is

801
00:47:49,250 --> 00:47:56,270
the conversion from the private key to

802
00:47:52,550 --> 00:47:57,680
the public key I'm extracting this even

803
00:47:56,270 --> 00:47:59,000
though the hash is sending me

804
00:47:57,680 --> 00:48:01,310
information it's not a good idea from

805
00:47:59,000 --> 00:48:06,620
the hash so I extract the public key and

806
00:48:01,310 --> 00:48:09,529
Bitcoin applies this sha-256 function

807
00:48:06,620 --> 00:48:12,410
and the hash function reap MD

808
00:48:09,530 --> 00:48:16,370
116 I don't need to explain how it works

809
00:48:12,410 --> 00:48:23,899
I don't know it but that's bitcoins to

810
00:48:16,370 --> 00:48:26,600
this result there's another code sha-256

811
00:48:23,900 --> 00:48:27,860
for integrity because this value will be

812
00:48:26,600 --> 00:48:31,220
used for other purposes

813
00:48:27,860 --> 00:48:34,340
so this is a shock applied twice we

814
00:48:31,220 --> 00:48:37,129
don't know why it's 2 times that twice

815
00:48:34,340 --> 00:48:40,240
and then everything is got code encoded

816
00:48:37,130 --> 00:48:43,780
in base 58 instead of 64 - avoid

817
00:48:40,240 --> 00:48:46,729
characters that might be problematic I

818
00:48:43,780 --> 00:48:49,010
always the result of this encoding in

819
00:48:46,730 --> 00:48:55,610
base 50 age of these hashes of the

820
00:48:49,010 --> 00:48:58,490
sequence of hashes is a text chain and

821
00:48:55,610 --> 00:49:02,270
that's your address it's a public

822
00:48:58,490 --> 00:49:04,609
address of your Bitcoin account that's

823
00:49:02,270 --> 00:49:07,370
what you have to send your friend when

824
00:49:04,610 --> 00:49:08,840
there's a payment going on well or to

825
00:49:07,370 --> 00:49:10,130
your customer if you want to make

826
00:49:08,840 --> 00:49:12,740
payments or receive payments

827
00:49:10,130 --> 00:49:16,070
transactions transaction it's a written

828
00:49:12,740 --> 00:49:20,029
trend or a shoe in the global status we

829
00:49:16,070 --> 00:49:23,750
are all nodes of the blockchain in

830
00:49:20,030 --> 00:49:28,190
Bitcoin each of us is going to have a

831
00:49:23,750 --> 00:49:32,690
table a database where it says has five

832
00:49:28,190 --> 00:49:35,810
euros you have seven euros when somebody

833
00:49:32,690 --> 00:49:38,240
wants to do an operation where you're

834
00:49:35,810 --> 00:49:41,210
going to receive that region operation

835
00:49:38,240 --> 00:49:45,080
and we will see that you are paying this

836
00:49:41,210 --> 00:49:47,120
guy and you have more money or less

837
00:49:45,080 --> 00:49:49,730
money than you want to pay if anybody

838
00:49:47,120 --> 00:49:52,130
wants to modify the database everybody

839
00:49:49,730 --> 00:49:55,490
will see our global status our global

840
00:49:52,130 --> 00:49:59,930
balance it's a decentralized system so

841
00:49:55,490 --> 00:50:04,240
we have two models the o u TX o unspent

842
00:49:59,930 --> 00:50:06,169
transaction output it's used by input by

843
00:50:04,240 --> 00:50:12,819
Bitcoin we're not used to that in

844
00:50:06,170 --> 00:50:17,020
banking systems let's see this diagram a

845
00:50:12,820 --> 00:50:20,360
transaction is composed by ins and outs

846
00:50:17,020 --> 00:50:22,259
address are the ins the ones who want to

847
00:50:20,360 --> 00:50:25,730
make payments and the out

848
00:50:22,260 --> 00:50:31,650
Bitcoin addresses to which your pain

849
00:50:25,730 --> 00:50:34,140
every in every box here is going to be

850
00:50:31,650 --> 00:50:36,859
digitally signed by the private key

851
00:50:34,140 --> 00:50:39,420
associated to the public key of the

852
00:50:36,859 --> 00:50:43,440
address that's that's making the payment

853
00:50:39,420 --> 00:50:45,960
the in and the out is a data structure

854
00:50:43,440 --> 00:50:48,570
where there's the account one two three

855
00:50:45,960 --> 00:50:52,440
four it's going to receive all point

856
00:50:48,570 --> 00:50:54,300
fifteen bitcoins and account 103 five is

857
00:50:52,440 --> 00:50:58,980
going to receive that amount these are

858
00:50:54,300 --> 00:51:01,530
the outs they're the public key is

859
00:50:58,980 --> 00:51:03,450
specified there because I don't need to

860
00:51:01,530 --> 00:51:06,720
know the the private key of the

861
00:51:03,450 --> 00:51:08,250
recipient if a recipient it's me then I

862
00:51:06,720 --> 00:51:11,399
know I know it we save it so another

863
00:51:08,250 --> 00:51:13,320
person I I don't know it I don't know

864
00:51:11,400 --> 00:51:14,970
the recipients private key but because

865
00:51:13,320 --> 00:51:17,670
because that's reasons of security

866
00:51:14,970 --> 00:51:20,939
otherwise it wouldn't be any security in

867
00:51:17,670 --> 00:51:23,400
this transactions so this is the unspent

868
00:51:20,940 --> 00:51:25,619
transaction output because this means

869
00:51:23,400 --> 00:51:28,410
this entries in order to spend it and

870
00:51:25,619 --> 00:51:32,100
you use it as entries of a transaction

871
00:51:28,410 --> 00:51:34,500
they have to be previous exits or

872
00:51:32,100 --> 00:51:36,270
previous outs that haven't been unspent

873
00:51:34,500 --> 00:51:38,220
that's why it's called unspent

874
00:51:36,270 --> 00:51:40,590
transaction output there you see

875
00:51:38,220 --> 00:51:44,459
transactions see this entry in this

876
00:51:40,590 --> 00:51:49,200
transaction see at one moment was the

877
00:51:44,460 --> 00:51:52,590
exit of transaction a and the second in

878
00:51:49,200 --> 00:51:58,040
was the only out of transaction P let's

879
00:51:52,590 --> 00:52:01,770
imagine that I'm the owner of this to

880
00:51:58,040 --> 00:52:03,840
the private keys of these two outs and

881
00:52:01,770 --> 00:52:06,450
apart from this attract transaction see

882
00:52:03,840 --> 00:52:10,890
I've done a transaction C prime before

883
00:52:06,450 --> 00:52:12,330
and I've used the same out as an in as

884
00:52:10,890 --> 00:52:16,890
an entry for C Prime

885
00:52:12,330 --> 00:52:19,920
I've already spent the money that was

886
00:52:16,890 --> 00:52:22,830
associated to this out so this

887
00:52:19,920 --> 00:52:26,580
transaction C should be rejected because

888
00:52:22,830 --> 00:52:28,920
this is not an unknown and unspent out

889
00:52:26,580 --> 00:52:32,869
it's been already spent because I use it

890
00:52:28,920 --> 00:52:32,869
to pay another transaction

891
00:52:33,010 --> 00:52:40,990
and that's it what are the advantages of

892
00:52:36,670 --> 00:52:43,119
this model the you Cho model well it's

893
00:52:40,990 --> 00:52:45,970
easy to be parallelized

894
00:52:43,119 --> 00:52:50,070
you just need to know whether track

895
00:52:45,970 --> 00:52:53,350
sections been spent or not you can know

896
00:52:50,070 --> 00:52:57,160
whether the overall transaction is valid

897
00:52:53,350 --> 00:52:59,710
or not if it hasn't been spent it's

898
00:52:57,160 --> 00:53:03,490
probably still valid if it has been

899
00:52:59,710 --> 00:53:05,020
spent it's no longer valid independently

900
00:53:03,490 --> 00:53:06,910
if the ins and outs if it hasn't been

901
00:53:05,020 --> 00:53:09,430
spent the next thing that I have to do

902
00:53:06,910 --> 00:53:11,230
is to check that the value of the ins

903
00:53:09,430 --> 00:53:12,460
are greater than the video out you can't

904
00:53:11,230 --> 00:53:15,220
say that I've got five years but I want

905
00:53:12,460 --> 00:53:17,740
to pay thirty know the ins have to be

906
00:53:15,220 --> 00:53:21,368
more than thirty or more and the outs

907
00:53:17,740 --> 00:53:23,439
can be no more than thirty and if it's

908
00:53:21,369 --> 00:53:27,310
more it won't work if the outs are more

909
00:53:23,440 --> 00:53:29,590
than means what are the things you need

910
00:53:27,310 --> 00:53:34,180
to consider with this model one of the

911
00:53:29,590 --> 00:53:36,940
downsides as it were how do I get my

912
00:53:34,180 --> 00:53:40,169
change I want one thing is want to pay

913
00:53:36,940 --> 00:53:42,880
I've got to ins this one this one and

914
00:53:40,170 --> 00:53:48,280
this one I've got fifteen euros and in

915
00:53:42,880 --> 00:53:52,210
this one I've got 0.05 bitcoins and then

916
00:53:48,280 --> 00:53:53,050
I've got 0.03 bitcoins that mix I've got

917
00:53:52,210 --> 00:53:57,359
six zero

918
00:53:53,050 --> 00:54:02,910
watch how much once if I want to pay

919
00:53:57,359 --> 00:54:08,680
0.01 and 0.02 remaining so what can I do

920
00:54:02,910 --> 00:54:11,680
well I can say to the first out let's

921
00:54:08,680 --> 00:54:15,549
use this example the first apt is gonna

922
00:54:11,680 --> 00:54:21,879
be zero zero three bitcoins to the

923
00:54:15,550 --> 00:54:24,960
person who I want to pay for remaining

924
00:54:21,880 --> 00:54:28,480
are gonna be for me

925
00:54:24,960 --> 00:54:31,390
so this out could be a count account

926
00:54:28,480 --> 00:54:37,109
that I can control there's only me that

927
00:54:31,390 --> 00:54:37,109
couldn't spend this so the remainders

928
00:54:38,340 --> 00:54:43,180
will go to the minor person that

929
00:54:41,470 --> 00:54:47,950
includes a transaction we'll see this in

930
00:54:43,180 --> 00:54:51,690
a minute so here what I'm using what I'm

931
00:54:47,950 --> 00:54:56,560
doing is it this address be the exchange

932
00:54:51,690 --> 00:54:58,510
address where the five cents that are

933
00:54:56,560 --> 00:55:01,119
left over you have to return them to me

934
00:54:58,510 --> 00:55:06,700
and everybody and all the nodes and

935
00:55:01,119 --> 00:55:09,760
network know that five point three point

936
00:55:06,700 --> 00:55:15,790
oh point five point three plus point one

937
00:55:09,760 --> 00:55:21,250
five is greater than 0.3 here we've got

938
00:55:15,790 --> 00:55:24,400
an example of a transaction a Bitcoin

939
00:55:21,250 --> 00:55:29,230
transaction you've got the input and

940
00:55:24,400 --> 00:55:30,910
there's the previous identify you've got

941
00:55:29,230 --> 00:55:33,850
the digital signature of this

942
00:55:30,910 --> 00:55:35,710
transaction is all that those numbers

943
00:55:33,850 --> 00:55:40,630
and letters which is the way in which

944
00:55:35,710 --> 00:55:42,850
the other nodes can check that I own the

945
00:55:40,630 --> 00:55:45,010
private key associated the public key

946
00:55:42,850 --> 00:55:50,920
which is written in this transaction

947
00:55:45,010 --> 00:55:54,130
okay you got it and the output the value

948
00:55:50,920 --> 00:55:57,510
that I want to put there and the

949
00:55:54,130 --> 00:56:01,150
operations that are going to have to be

950
00:55:57,510 --> 00:56:08,109
done the people that want to spend or

951
00:56:01,150 --> 00:56:11,250
consume or use it so here it is verify

952
00:56:08,109 --> 00:56:13,600
op check seek you have to find a

953
00:56:11,250 --> 00:56:16,660
signature digital signature but there

954
00:56:13,600 --> 00:56:21,160
are other ways of doing it the account

955
00:56:16,660 --> 00:56:24,910
based model is a traditional model which

956
00:56:21,160 --> 00:56:33,069
were most used to using basically each

957
00:56:24,910 --> 00:56:34,690
address has its has it's a mound

958
00:56:33,070 --> 00:56:40,740
attached to it and every time you want

959
00:56:34,690 --> 00:56:40,740
to do a track transaction you just

960
00:56:43,910 --> 00:56:49,649
it's equal to the total balance of this

961
00:56:46,620 --> 00:56:52,850
account also the transactions are signed

962
00:56:49,650 --> 00:56:56,460
digitally with the private key

963
00:56:52,850 --> 00:56:58,790
associated to the public key the private

964
00:56:56,460 --> 00:57:01,380
key that's represented by this address

965
00:56:58,790 --> 00:57:05,670
it's more intuitive because in the end

966
00:57:01,380 --> 00:57:07,680
it looks similar to the typical banking

967
00:57:05,670 --> 00:57:09,420
model you've just got an account number

968
00:57:07,680 --> 00:57:11,850
and just say oh how much do you want to

969
00:57:09,420 --> 00:57:13,440
take out of that balance but it's also

970
00:57:11,850 --> 00:57:16,529
more complicated to parallel eyes

971
00:57:13,440 --> 00:57:17,580
because you could send it for example if

972
00:57:16,530 --> 00:57:20,010
you got a hundred years

973
00:57:17,580 --> 00:57:22,650
I could send five hundred transactions

974
00:57:20,010 --> 00:57:26,700
of one euro individually I can pay them

975
00:57:22,650 --> 00:57:27,840
but if you add them up five hundred is

976
00:57:26,700 --> 00:57:34,080
more than one hundred I've got in my

977
00:57:27,840 --> 00:57:36,120
accounts and you can say I'll send one

978
00:57:34,080 --> 00:57:40,920
hundred the transactions to four in the

979
00:57:36,120 --> 00:57:43,440
first line and I actually sent subsets

980
00:57:40,920 --> 00:57:46,860
of 100 transaction so for one year and

981
00:57:43,440 --> 00:57:48,090
you're all going to think that I I can

982
00:57:46,860 --> 00:57:49,860
pay it because I've got a hundred euros

983
00:57:48,090 --> 00:57:54,450
and I'm saying that I want to spend cent

984
00:57:49,860 --> 00:57:57,630
but actually I'm sending 1,500 that's

985
00:57:54,450 --> 00:57:59,700
why you have to agree to say okay he

986
00:57:57,630 --> 00:58:01,620
wants to pay this now I told me he wants

987
00:57:59,700 --> 00:58:03,480
to pay this so if in total it's less

988
00:58:01,620 --> 00:58:09,779
than 100 then you can pay but this is

989
00:58:03,480 --> 00:58:12,960
very difficult to paralyse the next

990
00:58:09,780 --> 00:58:16,590
structure blocks a block is a set of

991
00:58:12,960 --> 00:58:19,200
transactions let's go direct to the

992
00:58:16,590 --> 00:58:20,550
diary has meta information the version

993
00:58:19,200 --> 00:58:24,419
of protocol that we're using the

994
00:58:20,550 --> 00:58:26,310
previous block hash and to check that

995
00:58:24,420 --> 00:58:33,840
it's not modifying the store a block

996
00:58:26,310 --> 00:58:36,270
chain the merkel route because what i do

997
00:58:33,840 --> 00:58:39,840
is put the transactions in a merkel

998
00:58:36,270 --> 00:58:43,980
route a local tree you remember how we

999
00:58:39,840 --> 00:58:46,440
saw how we wrote the Merkel tree with

1000
00:58:43,980 --> 00:58:49,020
just writing the route ash I'm

1001
00:58:46,440 --> 00:58:51,140
protecting all the hashes of the nodes

1002
00:58:49,020 --> 00:58:52,440
that are in the branches of the tree

1003
00:58:51,140 --> 00:58:55,348
instead of having

1004
00:58:52,440 --> 00:58:57,869
just write the 510 sections just the

1005
00:58:55,349 --> 00:59:01,740
hash just the root and you'll get the

1006
00:58:57,869 --> 00:59:04,109
same level of protection then the values

1007
00:59:01,740 --> 00:59:08,000
of the timestamp the approximate time

1008
00:59:04,109 --> 00:59:13,290
that we created the block of the bits

1009
00:59:08,000 --> 00:59:15,599
which is a number that tells us how the

1010
00:59:13,290 --> 00:59:17,250
difficulty of the algorithm that the

1011
00:59:15,599 --> 00:59:21,060
block had to solve for it to be

1012
00:59:17,250 --> 00:59:24,380
evaluated block and the nonce which is

1013
00:59:21,060 --> 00:59:27,270
the response that makes this block valid

1014
00:59:24,380 --> 00:59:29,760
these Merkle trees have already

1015
00:59:27,270 --> 00:59:30,990
explained them these are the block

1016
00:59:29,760 --> 00:59:32,880
structures which I'm going to repeat

1017
00:59:30,990 --> 00:59:36,149
this is very important this is the

1018
00:59:32,880 --> 00:59:38,819
header block one of the tree the sorry

1019
00:59:36,150 --> 00:59:42,599
the root of the Merkle tree it has all

1020
00:59:38,819 --> 00:59:46,140
the transactions of lot 1 & 2 this is up

1021
00:59:42,599 --> 00:59:48,660
to the same but the hash at the header

1022
00:59:46,140 --> 00:59:51,540
that it has a value which is a hash of

1023
00:59:48,660 --> 00:59:54,390
previous block header which is exactly

1024
00:59:51,540 --> 01:00:00,450
exactly the same as the hash of lock 1

1025
00:59:54,390 --> 01:00:04,200
is it clear you got it here we got a

1026
01:00:00,450 --> 01:00:07,049
blockchain this block Genesis block 1

1027
01:00:04,200 --> 01:00:11,129
block 2 block 3 block Genesis has the

1028
01:00:07,050 --> 01:00:14,520
following house a 8007 which is written

1029
01:00:11,130 --> 01:00:18,599
in the hash pointer of block 2 which is

1030
01:00:14,520 --> 01:00:21,030
e 5 D 3 a 2 a 4 which can coincide so

1031
01:00:18,599 --> 01:00:23,520
let's imagine that somebody comes along

1032
01:00:21,030 --> 01:00:25,470
and wants to change the history that

1033
01:00:23,520 --> 01:00:29,970
goes the story before this block for

1034
01:00:25,470 --> 01:00:31,589
whatever reason they want to go into an

1035
01:00:29,970 --> 01:00:35,040
account with a hundred thousand bitcoins

1036
01:00:31,589 --> 01:00:41,009
in its balance so you generate a new

1037
01:00:35,040 --> 01:00:42,359
block this is C generate a new block 2

1038
01:00:41,010 --> 01:00:46,980
when he's got where he's got 100,000

1039
01:00:42,359 --> 01:00:52,348
bitcoins what happens this means that

1040
01:00:46,980 --> 01:00:56,420
the hash pointer has to go to block 3 he

1041
01:00:52,349 --> 01:00:59,819
changes it and it's now the the pointer

1042
01:00:56,420 --> 01:01:01,950
it changed and what happens is the rest

1043
01:00:59,819 --> 01:01:05,380
of the nodes will see that the hash

1044
01:01:01,950 --> 01:01:07,839
point of block 3 this been modified

1045
01:01:05,380 --> 01:01:13,660
which is six three 1d doesn't coincide

1046
01:01:07,840 --> 01:01:15,670
with the hash block evalute to never

1047
01:01:13,660 --> 01:01:17,620
just gonna realize that this guy or

1048
01:01:15,670 --> 01:01:20,050
somebody is doing something really weird

1049
01:01:17,620 --> 01:01:21,640
so this blockchain will be rejected this

1050
01:01:20,050 --> 01:01:24,630
block will be rejected and everybody

1051
01:01:21,640 --> 01:01:31,779
will carry on as if nothing had happened

1052
01:01:24,630 --> 01:01:33,640
okay so far no there's a fundamental

1053
01:01:31,780 --> 01:01:36,700
process which is the consensus process

1054
01:01:33,640 --> 01:01:38,080
so how do we decide which transactions

1055
01:01:36,700 --> 01:01:40,689
are valid or not doing it independently

1056
01:01:38,080 --> 01:01:43,360
is very easy you just need a digital

1057
01:01:40,690 --> 01:01:46,060
signature you want the balance of ins to

1058
01:01:43,360 --> 01:01:49,030
be greater or the same or greater than

1059
01:01:46,060 --> 01:01:51,520
balance of out but when we all have to

1060
01:01:49,030 --> 01:01:53,830
agree between the different piers where

1061
01:01:51,520 --> 01:01:56,110
the transaction is valid it's more

1062
01:01:53,830 --> 01:01:58,569
difficult to for example in the example

1063
01:01:56,110 --> 01:02:00,940
that I gave for you I had a hundred

1064
01:01:58,570 --> 01:02:03,790
years and I want to spend five hundred

1065
01:02:00,940 --> 01:02:05,800
and I sent to each of you and batches of

1066
01:02:03,790 --> 01:02:07,180
100 euros if you don't communicate with

1067
01:02:05,800 --> 01:02:10,300
each other there will be valid

1068
01:02:07,180 --> 01:02:13,240
transactions but globally they're

1069
01:02:10,300 --> 01:02:21,370
invalid so here that's where the

1070
01:02:13,240 --> 01:02:23,080
consensus process comes to play what do

1071
01:02:21,370 --> 01:02:28,980
you need for contests you need a

1072
01:02:23,080 --> 01:02:34,450
communications network to send all these

1073
01:02:28,980 --> 01:02:36,180
changes about the net chippings and the

1074
01:02:34,450 --> 01:02:39,879
rock chain system they use peer-to-peer

1075
01:02:36,180 --> 01:02:43,899
networks their theories that they're all

1076
01:02:39,880 --> 01:02:47,860
the same anybody wants to get

1077
01:02:43,900 --> 01:02:51,220
sufficiently involved and it's prepared

1078
01:02:47,860 --> 01:02:53,380
to invest what's necessary can do any of

1079
01:02:51,220 --> 01:02:55,209
the roles in the network and practice

1080
01:02:53,380 --> 01:02:58,720
there are different kinds of nodes that

1081
01:02:55,210 --> 01:03:02,950
minor or validator nodes that generate

1082
01:02:58,720 --> 01:03:06,850
the new blocks validator they're calls

1083
01:03:02,950 --> 01:03:08,109
although they're called - normally

1084
01:03:06,850 --> 01:03:10,270
because these are ones that generate in

1085
01:03:08,110 --> 01:03:12,430
mind and generate blocks then we've got

1086
01:03:10,270 --> 01:03:15,040
complete nodes which are the ones that

1087
01:03:12,430 --> 01:03:16,960
have got the complete history from block

1088
01:03:15,040 --> 01:03:18,850
0 to the current block of all the

1089
01:03:16,960 --> 01:03:21,280
changes all the scripture

1090
01:03:18,850 --> 01:03:24,370
in the blockchain why is it this

1091
01:03:21,280 --> 01:03:28,480
difference because if you if you've ever

1092
01:03:24,370 --> 01:03:31,240
looked at Bitcoin I think it's over a

1093
01:03:28,480 --> 01:03:35,410
hundred gigas of storage and it may well

1094
01:03:31,240 --> 01:03:39,939
be that if you don't want a hundred and

1095
01:03:35,410 --> 01:03:42,640
so gigas in my computer you don't want

1096
01:03:39,940 --> 01:03:45,220
all that you just got to trust somebody

1097
01:03:42,640 --> 01:03:47,350
else who's a Bitcoin freaky and has got

1098
01:03:45,220 --> 01:03:50,890
a complete note so I can i connect to

1099
01:03:47,350 --> 01:03:55,690
their complete note if I need to get a

1100
01:03:50,890 --> 01:03:58,299
complete history and then in addition to

1101
01:03:55,690 --> 01:04:00,640
these are the light notes these are

1102
01:03:58,300 --> 01:04:04,810
those that don't store all information

1103
01:04:00,640 --> 01:04:06,970
for example in Android and iPhone there

1104
01:04:04,810 --> 01:04:09,070
are clients for their Bitcoin clients

1105
01:04:06,970 --> 01:04:15,330
but in a mobile you're not going to have

1106
01:04:09,070 --> 01:04:17,620
a hundred and hundred or so gigas of

1107
01:04:15,330 --> 01:04:19,090
bitcoins you're just gonna have the

1108
01:04:17,620 --> 01:04:22,240
transactions that you're interested in

1109
01:04:19,090 --> 01:04:24,010
of course these are called light notes

1110
01:04:22,240 --> 01:04:25,390
because I don't store all the

1111
01:04:24,010 --> 01:04:30,120
information just the information that

1112
01:04:25,390 --> 01:04:33,990
you're interested in okay and now let's

1113
01:04:30,120 --> 01:04:36,190
go to consensus algorithms there are

1114
01:04:33,990 --> 01:04:37,810
three main ones of course there are a

1115
01:04:36,190 --> 01:04:41,620
whole series of varieties but the three

1116
01:04:37,810 --> 01:04:46,480
main ones we've got proof of work proof

1117
01:04:41,620 --> 01:04:48,609
of authority and proof of stake so one

1118
01:04:46,480 --> 01:04:56,050
that I use I'm sure if it's correct or

1119
01:04:48,610 --> 01:05:01,320
not and proof of stake Bitcoin uses

1120
01:04:56,050 --> 01:05:01,320
proof of work under theorem as well

1121
01:05:01,920 --> 01:05:06,190
which will migrate to proof of stake in

1122
01:05:04,600 --> 01:05:09,130
about a year or so why is it called

1123
01:05:06,190 --> 01:05:10,720
proof of work because the validating

1124
01:05:09,130 --> 01:05:14,290
nodes they want to generate new blocks

1125
01:05:10,720 --> 01:05:17,410
which in this case are called - to do a

1126
01:05:14,290 --> 01:05:19,660
lot of computational work what sort of

1127
01:05:17,410 --> 01:05:22,540
computer national work has to be done to

1128
01:05:19,660 --> 01:05:26,080
resolve this kind of equation you

1129
01:05:22,540 --> 01:05:28,469
remember that the bits field that were

1130
01:05:26,080 --> 01:05:32,650
their headers these

1131
01:05:28,469 --> 01:05:34,479
tell you implicitly how many zeros does

1132
01:05:32,650 --> 01:05:40,239
this challenge have to start with which

1133
01:05:34,479 --> 01:05:44,259
is a hash it's called a shower doesn't

1134
01:05:40,239 --> 01:05:47,109
have to be but we use cryptographic you

1135
01:05:44,259 --> 01:05:51,779
give it a random number and the block

1136
01:05:47,109 --> 01:05:56,109
header of the current of block if the

1137
01:05:51,779 --> 01:05:59,199
results of this hash starts with a given

1138
01:05:56,109 --> 01:06:09,219
number of zeros which is defined by the

1139
01:05:59,199 --> 01:06:15,749
bit fields of the header this single-use

1140
01:06:09,219 --> 01:06:19,359
number which is random this non nonce a

1141
01:06:15,749 --> 01:06:22,749
number used once tries to find a hash

1142
01:06:19,359 --> 01:06:26,469
that's small on this one

1143
01:06:22,749 --> 01:06:29,019
I know ever finds that random number

1144
01:06:26,469 --> 01:06:34,059
that meets that those conditions has

1145
01:06:29,019 --> 01:06:39,968
found a valid number but you've got to

1146
01:06:34,059 --> 01:06:41,979
find hashes that meet that condition and

1147
01:06:39,969 --> 01:06:44,229
I don't if you remember what we said at

1148
01:06:41,979 --> 01:06:46,569
the beginning hashes can't be reversed

1149
01:06:44,229 --> 01:06:47,828
and us they can't be reversed all I have

1150
01:06:46,569 --> 01:06:52,479
to do is trial and error

1151
01:06:47,829 --> 01:06:54,729
I can't look here and say look I want to

1152
01:06:52,479 --> 01:06:58,269
find a hash that starts with five zeros

1153
01:06:54,729 --> 01:07:03,399
and I don't care what comes after it FFF

1154
01:06:58,269 --> 01:07:06,788
whatever you won't other than by using

1155
01:07:03,400 --> 01:07:09,489
brute force find a random number that

1156
01:07:06,789 --> 01:07:14,170
satisfies that equation because they're

1157
01:07:09,489 --> 01:07:19,509
non reversible so what's the only option

1158
01:07:14,170 --> 01:07:22,359
I have you take number one you Shane it

1159
01:07:19,509 --> 01:07:24,209
to the block and see if it's a valid

1160
01:07:22,359 --> 01:07:26,199
response for this challenge if it's not

1161
01:07:24,209 --> 01:07:28,178
which is probably what's going to happen

1162
01:07:26,199 --> 01:07:31,390
you go to the next random number

1163
01:07:28,179 --> 01:07:33,069
Fiat 534 and I do the hash again it's

1164
01:07:31,390 --> 01:07:35,828
not valid once again you have to do it

1165
01:07:33,069 --> 01:07:38,799
by trial and error which means in the

1166
01:07:35,829 --> 01:07:40,760
end the average you have to do all sorts

1167
01:07:38,799 --> 01:07:44,060
of trials not only that

1168
01:07:40,760 --> 01:07:47,900
but difficulty of bit fields is that

1169
01:07:44,060 --> 01:07:51,650
it's adjusted every 10016 of blocks

1170
01:07:47,900 --> 01:07:55,490
that's programmed into the software and

1171
01:07:51,650 --> 01:07:57,890
if you don't use that software you can't

1172
01:07:55,490 --> 01:08:00,310
do Bitcoin transactions there's no

1173
01:07:57,890 --> 01:08:05,720
longer valid having bitcoins so free

1174
01:08:00,310 --> 01:08:08,690
2016 blocks the Bitcoin code has a

1175
01:08:05,720 --> 01:08:13,160
algorithm programmed which recalculates

1176
01:08:08,690 --> 01:08:16,220
a difficulty if it's taken 1 million

1177
01:08:13,160 --> 01:08:18,830
hashes or a thousand billion hashes to

1178
01:08:16,220 --> 01:08:23,930
solve a calculation problem the next

1179
01:08:18,830 --> 01:08:27,318
block increases the number of bits that

1180
01:08:23,930 --> 01:08:30,470
should stop by 0 from 10 to 12 so that

1181
01:08:27,319 --> 01:08:35,770
average every 10 minutes all of this

1182
01:08:30,470 --> 01:08:35,770
calculation is done there's a new block

1183
01:08:36,069 --> 01:08:44,509
so the computation capacity of the

1184
01:08:42,140 --> 01:08:49,279
Bitcoin network is incredible you never

1185
01:08:44,509 --> 01:08:51,399
on your own with a GPU or a laptop to be

1186
01:08:49,279 --> 01:08:54,799
able to do it you'd have to buy yourself

1187
01:08:51,399 --> 01:09:02,210
specialized hardware for MIT Bitcoin

1188
01:08:54,799 --> 01:09:07,220
mining and other things to do it and not

1189
01:09:02,210 --> 01:09:13,430
only one are sick you have to go to

1190
01:09:07,220 --> 01:09:16,880
Iceland because you wouldn't have to pay

1191
01:09:13,430 --> 01:09:19,970
too much electricity to cool your

1192
01:09:16,880 --> 01:09:22,670
computing systems so this might seem

1193
01:09:19,970 --> 01:09:24,620
easy but actually that's one of the main

1194
01:09:22,670 --> 01:09:26,870
criticisms of Bitcoin anyway I'm getting

1195
01:09:24,620 --> 01:09:29,299
mixed up so prove the 4:30 there

1196
01:09:26,870 --> 01:09:31,068
basically 5 authorities of n authorities

1197
01:09:29,299 --> 01:09:33,380
that are trustworthy or partially

1198
01:09:31,069 --> 01:09:36,549
trustworthy we just trust they're not

1199
01:09:33,380 --> 01:09:36,549
going to collude with each other

1200
01:09:39,238 --> 01:09:48,209
they're not going to do malicious

1201
01:09:44,759 --> 01:09:50,549
efforts and these authorities vote for

1202
01:09:48,210 --> 01:09:53,040
or against a transaction if there's a

1203
01:09:50,549 --> 01:09:54,920
majority's except if it's a minority is

1204
01:09:53,040 --> 01:09:57,330
rejected

1205
01:09:54,920 --> 01:09:59,910
what percentage well it depends on the

1206
01:09:57,330 --> 01:10:01,739
size of luck chief Rousseff's take proof

1207
01:09:59,910 --> 01:10:09,540
of stake is like proof of authority

1208
01:10:01,739 --> 01:10:12,330
but the weight of each of each vote of

1209
01:10:09,540 --> 01:10:13,739
each authorities is proportional to the

1210
01:10:12,330 --> 01:10:18,900
interest they put in the network for

1211
01:10:13,739 --> 01:10:21,660
example we suppose where the validating

1212
01:10:18,900 --> 01:10:24,660
notes that use proof of stick I've put a

1213
01:10:21,660 --> 01:10:25,590
deposit of 100 he's put 500 or 300 or

1214
01:10:24,660 --> 01:10:29,250
200

1215
01:10:25,590 --> 01:10:31,560
so he's vote and mine will vote the same

1216
01:10:29,250 --> 01:10:35,070
but he's it's gonna be five times more

1217
01:10:31,560 --> 01:10:37,560
because if he that's something that's

1218
01:10:35,070 --> 01:10:40,230
gonna harm the network we we're gonna

1219
01:10:37,560 --> 01:10:42,690
complain say he's doing something bad

1220
01:10:40,230 --> 01:10:46,080
and that will take his to push it away

1221
01:10:42,690 --> 01:10:52,230
from him this is all programmed in the

1222
01:10:46,080 --> 01:10:56,070
lock chain code as he's got 500 euros

1223
01:10:52,230 --> 01:10:57,540
he's got five reasons more to do things

1224
01:10:56,070 --> 01:11:00,239
properly because I've liked than me

1225
01:10:57,540 --> 01:11:02,040
who's only deposited a hundred so he

1226
01:11:00,239 --> 01:11:04,559
gets more of a vote because he's five

1227
01:11:02,040 --> 01:11:09,120
times more interested than I am in the

1228
01:11:04,560 --> 01:11:11,640
outcome this is a graphic example this

1229
01:11:09,120 --> 01:11:13,580
is proof of work Alice wants to make a

1230
01:11:11,640 --> 01:11:17,400
transaction

1231
01:11:13,580 --> 01:11:19,469
he sends the transaction with the

1232
01:11:17,400 --> 01:11:20,580
address balance and the recipient and he

1233
01:11:19,469 --> 01:11:23,400
sends it to the she says it's a

1234
01:11:20,580 --> 01:11:24,840
blockchain network this is Bob note he

1235
01:11:23,400 --> 01:11:26,610
says okay all right let's start the

1236
01:11:24,840 --> 01:11:33,420
transaction where's the digital

1237
01:11:26,610 --> 01:11:33,960
signature the public key and and that's

1238
01:11:33,420 --> 01:11:36,870
correct

1239
01:11:33,960 --> 01:11:38,550
I'll carry on processing he sends the

1240
01:11:36,870 --> 01:11:40,190
transaction to the rest of the nodes are

1241
01:11:38,550 --> 01:11:45,110
going to do the same cryptographic

1242
01:11:40,190 --> 01:11:47,370
verification and now each one of them

1243
01:11:45,110 --> 01:11:50,130
it's gonna start doing this proof of

1244
01:11:47,370 --> 01:11:52,640
work these are the Bob's and the others

1245
01:11:50,130 --> 01:11:52,640
are the miners

1246
01:11:52,859 --> 01:11:57,760
transaction 1 transactions - transaction

1247
01:11:55,659 --> 01:12:00,219
3 or the ones that he's received and

1248
01:11:57,760 --> 01:12:04,300
he's gonna test with Ali a random number

1249
01:12:00,219 --> 01:12:08,199
1 this function isn't valid it doesn't

1250
01:12:04,300 --> 01:12:11,129
solve the challenge so it tries it with

1251
01:12:08,199 --> 01:12:15,339
random number 2 random number 3 until 3

1252
01:12:11,129 --> 01:12:19,300
is a valid response to the challenge of

1253
01:12:15,339 --> 01:12:20,439
proof of work so that's when he says to

1254
01:12:19,300 --> 01:12:22,239
the rest of the nodes I found the

1255
01:12:20,439 --> 01:12:26,379
solution and the rest of the nodes would

1256
01:12:22,239 --> 01:12:30,759
accept the block sent by Bob the top

1257
01:12:26,379 --> 01:12:35,559
left Bob spongebob whose quartz random

1258
01:12:30,760 --> 01:12:38,079
number 1 3 and the block header so this

1259
01:12:35,559 --> 01:12:41,349
new block is added to the chain to the

1260
01:12:38,079 --> 01:12:45,459
blockchain the same goes with proof of

1261
01:12:41,349 --> 01:12:47,739
Authority the same transaction and the

1262
01:12:45,459 --> 01:12:53,318
votes what's what do these Bob's do he

1263
01:12:47,739 --> 01:12:54,339
says yeah I support the transaction but

1264
01:12:53,319 --> 01:12:56,979
the one on the bottom right hand corner

1265
01:12:54,339 --> 01:13:00,459
says no I'm against the transaction but

1266
01:12:56,979 --> 01:13:02,339
the other three vote to support the

1267
01:13:00,459 --> 01:13:05,619
transaction so the transaction accepted

1268
01:13:02,339 --> 01:13:08,349
and is included in the next look I'm

1269
01:13:05,619 --> 01:13:11,139
with proof of stake the same thing but

1270
01:13:08,349 --> 01:13:15,069
here you can see the deposits that each

1271
01:13:11,139 --> 01:13:19,929
Bob has this one has 200 200 350 or 250

1272
01:13:15,069 --> 01:13:26,439
so this one votes yes

1273
01:13:19,929 --> 01:13:29,829
this one votes no 250 no 350 no this one

1274
01:13:26,439 --> 01:13:34,949
says yes so 600 you get 600 knows and to

1275
01:13:29,829 --> 01:13:38,289
400 years so if you got 600 nodes and

1276
01:13:34,949 --> 01:13:40,898
400 yeses the transaction will be

1277
01:13:38,289 --> 01:13:43,619
rejected because 600 ISM bigger than 400

1278
01:13:40,899 --> 01:13:48,069
network be included in the next block

1279
01:13:43,619 --> 01:13:50,799
that's the main consensus mechanisms but

1280
01:13:48,069 --> 01:13:52,689
there of course there are variations on

1281
01:13:50,800 --> 01:13:56,399
this there are a thousand variations

1282
01:13:52,689 --> 01:14:00,650
you've also got the proof of a world

1283
01:13:56,399 --> 01:14:02,760
algorithms some use

1284
01:14:00,650 --> 01:14:07,949
different ones that theorem uses one

1285
01:14:02,760 --> 01:14:14,520
that needs more memory so that actually

1286
01:14:07,949 --> 01:14:18,540
means that the bottleneck is that is the

1287
01:14:14,520 --> 01:14:20,849
size type of block change we've got

1288
01:14:18,540 --> 01:14:23,639
public and private once the public could

1289
01:14:20,849 --> 01:14:26,610
block change which anybody can join and

1290
01:14:23,639 --> 01:14:35,940
take part in and in theory you can do

1291
01:14:26,610 --> 01:14:39,839
any can play any role a private ones are

1292
01:14:35,940 --> 01:14:44,159
those that can only use users that have

1293
01:14:39,840 --> 01:14:47,190
been authorized to join blockchain

1294
01:14:44,159 --> 01:14:50,250
between banks for example it's only if

1295
01:14:47,190 --> 01:14:54,089
you're a bank that you can join that

1296
01:14:50,250 --> 01:14:56,300
chain so normally the network is

1297
01:14:54,090 --> 01:14:58,889
protected the communications network is

1298
01:14:56,300 --> 01:15:02,760
protected for this blockchain and in

1299
01:14:58,889 --> 01:15:05,340
addition to that the private keys public

1300
01:15:02,760 --> 01:15:08,040
keys sorry have to be authorized that

1301
01:15:05,340 --> 01:15:11,360
can be used for signing transaction for

1302
01:15:08,040 --> 01:15:14,340
consulting information or whatever

1303
01:15:11,360 --> 01:15:20,098
permitted and not permitted be permitted

1304
01:15:14,340 --> 01:15:22,199
are those block chains in which not

1305
01:15:20,099 --> 01:15:25,020
everybody can have any kind of role not

1306
01:15:22,199 --> 01:15:28,469
every gonna be a minor not everybody can

1307
01:15:25,020 --> 01:15:30,540
do script operations it may well be that

1308
01:15:28,469 --> 01:15:32,940
you can only do reading operations

1309
01:15:30,540 --> 01:15:37,949
normally they're permitted goes to the

1310
01:15:32,940 --> 01:15:40,320
private chains and the non permitted

1311
01:15:37,949 --> 01:15:43,019
chains are those block chains in which

1312
01:15:40,320 --> 01:15:45,750
anybody can do anything such as Bitcoin

1313
01:15:43,020 --> 01:15:51,199
in Bitcoin I can set up a mining node

1314
01:15:45,750 --> 01:15:51,199
and start operating as a mining node

1315
01:15:53,600 --> 01:15:58,470
and may well be that I can't mine a

1316
01:15:55,650 --> 01:16:03,929
block until the next 10,000 years have

1317
01:15:58,470 --> 01:16:05,550
gone by what else other concepts I'm

1318
01:16:03,930 --> 01:16:09,510
going to talk going a little faster

1319
01:16:05,550 --> 01:16:13,110
smart contracts is code that's been run

1320
01:16:09,510 --> 01:16:17,070
as part of a transaction we saw that in

1321
01:16:13,110 --> 01:16:21,269
aetherium in Bitcoin any block chains or

1322
01:16:17,070 --> 01:16:26,820
virtually any block chain can run

1323
01:16:21,270 --> 01:16:29,570
limited code in Bitcoin I don't know if

1324
01:16:26,820 --> 01:16:33,599
you remember the transaction that I

1325
01:16:29,570 --> 01:16:36,780
showed you the commands that were run

1326
01:16:33,600 --> 01:16:41,940
there was a verify do you remember that

1327
01:16:36,780 --> 01:16:44,190
op subscript chicken sign these are

1328
01:16:41,940 --> 01:16:46,710
commands of the scripting language used

1329
01:16:44,190 --> 01:16:50,040
by Bitcoin it's think the node that this

1330
01:16:46,710 --> 01:16:51,600
transaction receives what access it

1331
01:16:50,040 --> 01:16:55,350
needs to take to make this transaction

1332
01:16:51,600 --> 01:17:01,950
valid so these were just commands to

1333
01:16:55,350 --> 01:17:05,190
check a digital signature this means

1334
01:17:01,950 --> 01:17:08,610
that in Bitcoin we can put smart

1335
01:17:05,190 --> 01:17:11,480
contracts in there you but you can but

1336
01:17:08,610 --> 01:17:14,009
they're limited smart contracts fix but

1337
01:17:11,480 --> 01:17:18,660
smart contract in Bitcoin you can't do

1338
01:17:14,010 --> 01:17:27,450
loops in a theorem you can it's complete

1339
01:17:18,660 --> 01:17:30,540
complete cheering here we can

1340
01:17:27,450 --> 01:17:32,340
differentiate between complete cheering

1341
01:17:30,540 --> 01:17:34,769
the scripting languages and incomplete

1342
01:17:32,340 --> 01:17:37,260
cheering the script scripting languages

1343
01:17:34,770 --> 01:17:40,590
and then with forks forks is when you

1344
01:17:37,260 --> 01:17:43,050
get a division in the network state

1345
01:17:40,590 --> 01:17:46,740
imagine that those of us in the lower

1346
01:17:43,050 --> 01:17:49,860
part of the fork have a communications

1347
01:17:46,740 --> 01:17:51,389
failure and though and we see that

1348
01:17:49,860 --> 01:17:54,540
there's a series of transactions and

1349
01:17:51,390 --> 01:17:57,150
those that are in the upper part to see

1350
01:17:54,540 --> 01:18:03,050
different kinds of transactions so we

1351
01:17:57,150 --> 01:18:07,098
carry on advancing along and

1352
01:18:03,050 --> 01:18:09,949
we suddenly see two different states so

1353
01:18:07,099 --> 01:18:12,110
sooner or later this communications a

1354
01:18:09,949 --> 01:18:15,230
failure will be reestablished and will

1355
01:18:12,110 --> 01:18:16,639
once again agree that we've got

1356
01:18:15,230 --> 01:18:18,440
different things our network and we'll

1357
01:18:16,639 --> 01:18:19,790
start debating what which is the good

1358
01:18:18,440 --> 01:18:21,829
chain and which is the bad chin and then

1359
01:18:19,790 --> 01:18:23,769
it must necessarily be a bad chain or a

1360
01:18:21,829 --> 01:18:26,869
good changes and actually work like that

1361
01:18:23,770 --> 01:18:28,429
but you can't have just two chains so

1362
01:18:26,869 --> 01:18:30,799
what bitcoin does in this case and then

1363
01:18:28,429 --> 01:18:34,190
the majority of block chains as well is

1364
01:18:30,800 --> 01:18:36,020
the good chain is the chain which has

1365
01:18:34,190 --> 01:18:40,909
the largest number of associated

1366
01:18:36,020 --> 01:18:43,730
difficulties you add all the bit fields

1367
01:18:40,909 --> 01:18:46,820
of each of the blocks that form chain

1368
01:18:43,730 --> 01:18:50,718
one and chain two and the chain that has

1369
01:18:46,820 --> 01:18:53,329
the highest bit sum is the valid one and

1370
01:18:50,719 --> 01:18:55,219
this is also program it's programmed in

1371
01:18:53,329 --> 01:18:58,219
bit code so you don't have to worry

1372
01:18:55,219 --> 01:19:00,790
about doing anything if it happens okay

1373
01:18:58,219 --> 01:19:03,559
there are the kinds of forks

1374
01:19:00,790 --> 01:19:05,840
functionalities of Forks as bitcoins a

1375
01:19:03,559 --> 01:19:08,480
software or any blockchain is a software

1376
01:19:05,840 --> 01:19:12,409
so changes have to be made occasionally

1377
01:19:08,480 --> 01:19:14,058
just improvements or corrective bugs to

1378
01:19:12,409 --> 01:19:16,070
debug and you can have two cases you

1379
01:19:14,059 --> 01:19:19,730
could have a hard focus soft fork a hard

1380
01:19:16,070 --> 01:19:23,058
fork is when the changes aren't

1381
01:19:19,730 --> 01:19:24,530
comfortable passable backwards so every

1382
01:19:23,059 --> 01:19:26,300
time they're updated they're gonna think

1383
01:19:24,530 --> 01:19:30,380
the rest of the nodes are malicious and

1384
01:19:26,300 --> 01:19:35,329
war reject all translations and a soft

1385
01:19:30,380 --> 01:19:38,500
fork is fork in which the changes are

1386
01:19:35,329 --> 01:19:40,849
compatible blackwood backwards so those

1387
01:19:38,500 --> 01:19:42,559
updated nodes even if they're not

1388
01:19:40,849 --> 01:19:44,090
updated they can still carry out the

1389
01:19:42,559 --> 01:19:48,699
followed transactions and won't reject

1390
01:19:44,090 --> 01:19:50,840
others so you can still advance right

1391
01:19:48,699 --> 01:19:56,119
I'm gonna skip this because it's not

1392
01:19:50,840 --> 01:20:00,010
very important problems remember this

1393
01:19:56,119 --> 01:20:02,829
because it's going to be useful when we

1394
01:20:00,010 --> 01:20:05,829
look at the connector for exercise

1395
01:20:02,829 --> 01:20:05,829
governance

1396
01:20:06,230 --> 01:20:18,169
how do you apply changes to the way the

1397
01:20:12,440 --> 01:20:20,599
network works sometimes the changes that

1398
01:20:18,170 --> 01:20:21,800
need to be introduced have to be done in

1399
01:20:20,600 --> 01:20:24,080
a heartfelt but if you want to do a hard

1400
01:20:21,800 --> 01:20:28,160
fork and there's a very high percentage

1401
01:20:24,080 --> 01:20:32,210
of nodes that don't agree or don't I'm

1402
01:20:28,160 --> 01:20:33,950
prepared to accept the change then I'll

1403
01:20:32,210 --> 01:20:37,070
be able to apply the change but their

1404
01:20:33,950 --> 01:20:39,860
computing power of my network will be

1405
01:20:37,070 --> 01:20:42,559
reduced terribly certain my network will

1406
01:20:39,860 --> 01:20:47,929
not be so safe and I haven't said this

1407
01:20:42,560 --> 01:20:50,150
expression specifically but the

1408
01:20:47,930 --> 01:20:53,150
proof-of-work blockchains the more

1409
01:20:50,150 --> 01:20:58,219
percentage of nodes has attached the

1410
01:20:53,150 --> 01:21:05,660
better imagines this the ha over half

1411
01:20:58,220 --> 01:21:09,200
the nodes are dishonest if if you that

1412
01:21:05,660 --> 01:21:13,070
means over 50% of their computing power

1413
01:21:09,200 --> 01:21:16,580
is going to be taken care of by

1414
01:21:13,070 --> 01:21:20,530
dishonest nodes so we'll get a longer

1415
01:21:16,580 --> 01:21:23,570
chain with more dishonest transactions I

1416
01:21:20,530 --> 01:21:25,250
said that the good chain is the longest

1417
01:21:23,570 --> 01:21:27,049
chain but if it's control to buy bad

1418
01:21:25,250 --> 01:21:28,850
nodes really bad that's what governance

1419
01:21:27,050 --> 01:21:32,870
is really complicated in all these

1420
01:21:28,850 --> 01:21:34,460
systems and that's because there's no

1421
01:21:32,870 --> 01:21:36,260
central authority there's nobody that's

1422
01:21:34,460 --> 01:21:40,760
able to say no this is how it's gonna be

1423
01:21:36,260 --> 01:21:44,330
no it doesn't work like centralization

1424
01:21:40,760 --> 01:21:50,210
this is another criticism that's cropped

1425
01:21:44,330 --> 01:21:54,140
up because in the end proof of work is

1426
01:21:50,210 --> 01:21:59,360
so difficult that you can't just have a

1427
01:21:54,140 --> 01:22:00,050
GPU or an IC or a laptop you'd have to

1428
01:21:59,360 --> 01:22:01,849
move to aisle

1429
01:22:00,050 --> 01:22:07,220
I slit but not everybody can go to

1430
01:22:01,850 --> 01:22:12,970
Iceland to live mining pools are

1431
01:22:07,220 --> 01:22:12,970
mushrooming and what they do

1432
01:22:14,660 --> 01:22:26,309
they take much of the computing power

1433
01:22:17,760 --> 01:22:28,890
and this is a link to a pie chart in

1434
01:22:26,310 --> 01:22:32,910
which you can get to the distribution of

1435
01:22:28,890 --> 01:22:38,130
the computing power of each of the main

1436
01:22:32,910 --> 01:22:41,160
mining pools and if we add the four main

1437
01:22:38,130 --> 01:22:47,060
ones together they've got over 50%

1438
01:22:41,160 --> 01:22:49,320
around 70% even what happens there are

1439
01:22:47,060 --> 01:22:51,840
forecasts over there controlling what's

1440
01:22:49,320 --> 01:22:54,719
happening there if they agree we they

1441
01:22:51,840 --> 01:22:58,890
can do whatever they want they have a

1442
01:22:54,720 --> 01:23:01,050
lot of power privacy all that we write

1443
01:22:58,890 --> 01:23:04,320
in Bitcoin and in traditional blockchain

1444
01:23:01,050 --> 01:23:06,870
can be seen by everyone people say wow

1445
01:23:04,320 --> 01:23:09,960
there's no associate names there are

1446
01:23:06,870 --> 01:23:12,570
public keys only but we have to be

1447
01:23:09,960 --> 01:23:16,320
careful when generating the public keys

1448
01:23:12,570 --> 01:23:19,049
and how we will use them for all my

1449
01:23:16,320 --> 01:23:21,599
transactions I use the same public key

1450
01:23:19,050 --> 01:23:27,080
people will know that one two three four

1451
01:23:21,600 --> 01:23:30,450
it's me and I bought eat food somewhere

1452
01:23:27,080 --> 01:23:32,430
computers somewhere and shoes somewhere

1453
01:23:30,450 --> 01:23:34,470
else because all my transactions are

1454
01:23:32,430 --> 01:23:38,040
associated to the same public Eve they

1455
01:23:34,470 --> 01:23:40,130
publish a Twitter with my public key and

1456
01:23:38,040 --> 01:23:42,870
very common

1457
01:23:40,130 --> 01:23:45,810
everybody will know that this public key

1458
01:23:42,870 --> 01:23:47,790
is mine and you can trace back all the

1459
01:23:45,810 --> 01:23:49,860
transactions that are made in Bitcoin

1460
01:23:47,790 --> 01:23:53,550
that ways of avoiding this but I'm not

1461
01:23:49,860 --> 01:23:56,339
going to explain this now because

1462
01:23:53,550 --> 01:23:59,490
problematic to some block chains are

1463
01:23:56,340 --> 01:24:03,780
appearing now to solve and and to fix

1464
01:23:59,490 --> 01:24:08,849
this problem which is not trivial there

1465
01:24:03,780 --> 01:24:11,730
are very advanced cryptography snarks no

1466
01:24:08,850 --> 01:24:15,240
knowledge zero systems are very good

1467
01:24:11,730 --> 01:24:18,839
very good cryptography Manero the ring

1468
01:24:15,240 --> 01:24:21,719
signatures anyone it's not an it's an

1469
01:24:18,840 --> 01:24:24,330
image that Cash Money Road and enigma

1470
01:24:21,720 --> 01:24:26,430
allows you to do private computations

1471
01:24:24,330 --> 01:24:28,860
you don't need to say what are the data

1472
01:24:26,430 --> 01:24:31,560
that you are using for your computation

1473
01:24:28,860 --> 01:24:36,019
this is just a problem that is very far

1474
01:24:31,560 --> 01:24:36,020
from being trivial it's very important

1475
01:24:36,410 --> 01:24:41,700
imagine we can see all the payments that

1476
01:24:39,180 --> 01:24:45,180
are being done between banks everything

1477
01:24:41,700 --> 01:24:52,130
can be seen with a blockchain scholar

1478
01:24:45,180 --> 01:24:56,070
scalability said it before Bitcoin

1479
01:24:52,130 --> 01:24:59,640
didn't remember this figure in Bitcoin

1480
01:24:56,070 --> 01:25:02,940
blockchain occupies 135 Giga since it's

1481
01:24:59,640 --> 01:25:08,780
growing all the time not everyone wants

1482
01:25:02,940 --> 01:25:13,320
to give 135 gigas of your drive for this

1483
01:25:08,780 --> 01:25:16,230
if theorem I want I won't have time

1484
01:25:13,320 --> 01:25:19,380
theorem is a blockchain in which there's

1485
01:25:16,230 --> 01:25:21,750
smart contracts that are programmed with

1486
01:25:19,380 --> 01:25:25,440
this smart program supported by a theory

1487
01:25:21,750 --> 01:25:29,280
I can do anything I do all can do all

1488
01:25:25,440 --> 01:25:36,089
the computation computers independent

1489
01:25:29,280 --> 01:25:39,750
are stupid terminals and they do agree

1490
01:25:36,090 --> 01:25:42,450
they agree on this central layer and not

1491
01:25:39,750 --> 01:25:44,010
dumb anymore the central layer decides

1492
01:25:42,450 --> 01:25:47,400
what are the valid or invalid

1493
01:25:44,010 --> 01:25:50,670
computations there's no authority

1494
01:25:47,400 --> 01:25:52,820
central authority this layer the central

1495
01:25:50,670 --> 01:25:55,650
layer is composed by all these nodes

1496
01:25:52,820 --> 01:25:59,330
they have to agree with their digital

1497
01:25:55,650 --> 01:26:03,330
signatures with their block structures

1498
01:25:59,330 --> 01:26:05,519
with consensus protocol of proof of work

1499
01:26:03,330 --> 01:26:08,490
but the vision is this one a lot of

1500
01:26:05,520 --> 01:26:14,580
computers individually they're dumb

1501
01:26:08,490 --> 01:26:18,860
computers but together they constitute a

1502
01:26:14,580 --> 01:26:21,630
distributed or decentralized computer

1503
01:26:18,860 --> 01:26:26,089
it's a computer that has more power and

1504
01:26:21,630 --> 01:26:26,090
more capacity than a single computer

1505
01:26:32,600 --> 01:26:40,770
in etherium as in bitcoin there are

1506
01:26:37,070 --> 01:26:42,920
operations for each mod contract we can

1507
01:26:40,770 --> 01:26:45,900
you can do many computational operations

1508
01:26:42,920 --> 01:26:50,040
you can't really see those here but you

1509
01:26:45,900 --> 01:26:53,490
what instance are a routine with a small

1510
01:26:50,040 --> 01:26:55,080
contract create a small contract make a

1511
01:26:53,490 --> 01:26:57,480
call

1512
01:26:55,080 --> 01:27:02,820
deal with the blockchain memory it's a

1513
01:26:57,480 --> 01:27:04,410
copy that I have in my computer and all

1514
01:27:02,820 --> 01:27:07,349
the nodes in the network will have the

1515
01:27:04,410 --> 01:27:10,590
same copy because it's guaranteed by the

1516
01:27:07,350 --> 01:27:14,100
consensus algorithm of blockchain each

1517
01:27:10,590 --> 01:27:16,080
operation has an Associated cost a price

1518
01:27:14,100 --> 01:27:18,840
which is a minimum price that is

1519
01:27:16,080 --> 01:27:21,720
measured in ether ether is the crypto

1520
01:27:18,840 --> 01:27:25,080
currency in etherium I'm going to use it

1521
01:27:21,720 --> 01:27:28,410
for connector for if it's too

1522
01:27:25,080 --> 01:27:31,260
complicated it's called

1523
01:27:28,410 --> 01:27:32,820
gas ether and price what is gas was

1524
01:27:31,260 --> 01:27:37,440
what's either no it's not the same

1525
01:27:32,820 --> 01:27:40,019
what's the difference it's very useful

1526
01:27:37,440 --> 01:27:46,320
to make a comparison with this there are

1527
01:27:40,020 --> 01:27:51,720
distinctions and differences if I want

1528
01:27:46,320 --> 01:27:54,840
to buy some gas they'll cost well the

1529
01:27:51,720 --> 01:27:58,350
total cost of my tank I'm going to

1530
01:27:54,840 --> 01:28:01,830
measure it in lit liters 50 liters that

1531
01:27:58,350 --> 01:28:04,140
is a specific price have 60 liters in my

1532
01:28:01,830 --> 01:28:06,540
tank there's another amount what is

1533
01:28:04,140 --> 01:28:12,120
common is the liters that I'm going to

1534
01:28:06,540 --> 01:28:16,680
buy every fuel litter litter has a price

1535
01:28:12,120 --> 01:28:19,040
and its measured in euros in ether what

1536
01:28:16,680 --> 01:28:19,040
happens

1537
01:28:22,510 --> 01:28:30,920
and ether the capacity of your tongue

1538
01:28:27,440 --> 01:28:34,940
its measured in gas units instead of

1539
01:28:30,920 --> 01:28:37,130
liters its gas units every gas unit has

1540
01:28:34,940 --> 01:28:42,799
a price in this case in a theorem the

1541
01:28:37,130 --> 01:28:45,499
price is measured in ethers that's the

1542
01:28:42,800 --> 01:28:49,249
currency the equivalent of leaders is

1543
01:28:45,499 --> 01:28:51,860
gas the equivalent of price is the price

1544
01:28:49,249 --> 01:28:55,760
and the equivalent to the euro is either

1545
01:28:51,860 --> 01:28:57,799
in aetherium they have their own

1546
01:28:55,760 --> 01:29:00,369
currencies and subdivisions of further

1547
01:28:57,800 --> 01:29:03,920
currency the basic and the vegetable

1548
01:29:00,369 --> 01:29:06,589
currency is the way I don't know why but

1549
01:29:03,920 --> 01:29:10,130
it's away then there's another

1550
01:29:06,590 --> 01:29:13,159
subdivision called Zabul turn up turn up

1551
01:29:10,130 --> 01:29:16,909
to 12 Szabo is the creator of the smart

1552
01:29:13,159 --> 01:29:20,289
contract offer 10 up to 15 it's a fini

1553
01:29:16,909 --> 01:29:25,009
and 10 up to 18 is an ether

1554
01:29:20,289 --> 01:29:27,889
that's all each of the transactions that

1555
01:29:25,010 --> 01:29:30,469
are executed in a smart contract here we

1556
01:29:27,889 --> 01:29:34,309
have the push operation which is touring

1557
01:29:30,469 --> 01:29:38,989
in the memory in in the execution pile

1558
01:29:34,309 --> 01:29:40,729
sorry EMS store which is touring in the

1559
01:29:38,989 --> 01:29:47,598
memory all these operations will have a

1560
01:29:40,729 --> 01:29:51,289
cost in gas in gas units so well this

1561
01:29:47,599 --> 01:29:54,440
costs one this one this to this small

1562
01:29:51,289 --> 01:29:56,869
program in gas units will have a price

1563
01:29:54,440 --> 01:30:00,079
and it's the sum of all the individual

1564
01:29:56,869 --> 01:30:04,848
operations which is 30 so this program

1565
01:30:00,079 --> 01:30:07,429
will cost 30 you gas units to pay that

1566
01:30:04,849 --> 01:30:10,909
I'm going to use ethers for each gas

1567
01:30:07,429 --> 01:30:14,539
unit I want to associate a value of 1

1568
01:30:10,909 --> 01:30:17,388
either 30 gas units multiplied by 1

1569
01:30:14,539 --> 01:30:23,509
ether per gas it's 30 ethers it's a lot

1570
01:30:17,389 --> 01:30:25,729
of money all this is executive in the

1571
01:30:23,510 --> 01:30:27,699
etherium virtual machine each of the

1572
01:30:25,729 --> 01:30:30,800
etherium notes has a virtual machine

1573
01:30:27,699 --> 01:30:33,188
which is understands all these

1574
01:30:30,800 --> 01:30:33,189
operations

1575
01:30:33,579 --> 01:30:44,960
this pseudo assembly language so when a

1576
01:30:41,389 --> 01:30:48,650
note in the blockchain in aetherium

1577
01:30:44,960 --> 01:30:54,110
receives a transaction then it's just a

1578
01:30:48,650 --> 01:30:57,440
smart contract with a name it takes this

1579
01:30:54,110 --> 01:30:59,780
an assembly code and put it into the

1580
01:30:57,440 --> 01:31:01,699
theorem virtual machine and it executes

1581
01:30:59,780 --> 01:31:03,559
it if the result of the execution says

1582
01:31:01,699 --> 01:31:05,388
okay there's no exception

1583
01:31:03,559 --> 01:31:08,270
then a transaction is complete if the

1584
01:31:05,389 --> 01:31:11,090
transaction is valid it is accepted and

1585
01:31:08,270 --> 01:31:13,610
it gets into the next block and the

1586
01:31:11,090 --> 01:31:16,760
process is very tip similar to bitcoins

1587
01:31:13,610 --> 01:31:20,170
it goes to this next block and there is

1588
01:31:16,760 --> 01:31:24,530
a proof-of-work i'm until the level 11

1589
01:31:20,170 --> 01:31:27,590
until there is a response to the

1590
01:31:24,530 --> 01:31:30,320
etherium challenge if the mining note

1591
01:31:27,590 --> 01:31:32,210
finding the the answer comes from a

1592
01:31:30,320 --> 01:31:33,949
theorem it sends the the block to the

1593
01:31:32,210 --> 01:31:37,550
rest of notes in the theorem and the

1594
01:31:33,949 --> 01:31:39,049
result of the smart contract transaction

1595
01:31:37,550 --> 01:31:41,690
that we are executing all the nodes are

1596
01:31:39,050 --> 01:31:44,630
going to check that this transaction is

1597
01:31:41,690 --> 01:31:49,519
ok they're going to re execute all this

1598
01:31:44,630 --> 01:31:52,790
code and if it's okay they accept the

1599
01:31:49,520 --> 01:32:01,540
block and they extend the chain and

1600
01:31:52,790 --> 01:32:05,690
there's one more block if you have smart

1601
01:32:01,540 --> 01:32:09,400
contracts and if it's a bit unfamiliar

1602
01:32:05,690 --> 01:32:11,540
and if you've used a meta object

1603
01:32:09,400 --> 01:32:13,869
programming well in fact a smart

1604
01:32:11,540 --> 01:32:18,619
contract can be compared with a class

1605
01:32:13,869 --> 01:32:21,019
with a class in meta object programming

1606
01:32:18,619 --> 01:32:22,880
it's a class or in a screa stream has

1607
01:32:21,020 --> 01:32:27,530
its own dimensions you can describe it

1608
01:32:22,880 --> 01:32:32,150
you can read it whatever and a smart

1609
01:32:27,530 --> 01:32:35,889
contract in a blockchain is an instance

1610
01:32:32,150 --> 01:32:38,420
of that class I take class of screens

1611
01:32:35,889 --> 01:32:40,010
the class representing the screen and I

1612
01:32:38,420 --> 01:32:43,200
do an instance that is the screen that

1613
01:32:40,010 --> 01:32:46,350
is in this room

1614
01:32:43,200 --> 01:32:50,460
I have to say which screen in which

1615
01:32:46,350 --> 01:32:53,240
place in Santander that would be an

1616
01:32:50,460 --> 01:32:56,190
instance of the smart contract

1617
01:32:53,240 --> 01:33:00,420
corresponding to screens and this exists

1618
01:32:56,190 --> 01:33:02,610
already in the blockchain once the smart

1619
01:33:00,420 --> 01:33:06,450
contracts are deployed they become

1620
01:33:02,610 --> 01:33:09,990
autonomous entities they can respond or

1621
01:33:06,450 --> 01:33:11,820
answer contractions by themselves they

1622
01:33:09,990 --> 01:33:14,550
have an address that it wouldn't be

1623
01:33:11,820 --> 01:33:16,710
controlled by anyone there's some logic

1624
01:33:14,550 --> 01:33:18,240
into this program so that there's a

1625
01:33:16,710 --> 01:33:21,210
person controlling the smart contract

1626
01:33:18,240 --> 01:33:23,610
but basically this contract will take

1627
01:33:21,210 --> 01:33:27,350
decisions by itself decisions that I

1628
01:33:23,610 --> 01:33:30,389
have programmed in the contractor

1629
01:33:27,350 --> 01:33:32,040
there's interaction with other smart

1630
01:33:30,390 --> 01:33:33,810
contracts that can generate other smart

1631
01:33:32,040 --> 01:33:38,480
contracts they can do the same as a

1632
01:33:33,810 --> 01:33:41,370
person with a private and a public key

1633
01:33:38,480 --> 01:33:43,799
there's a difference with the normal

1634
01:33:41,370 --> 01:33:47,670
counts chance where there's a person

1635
01:33:43,800 --> 01:33:49,920
behind the smart contract direct address

1636
01:33:47,670 --> 01:33:53,040
is not a public key because a smart

1637
01:33:49,920 --> 01:33:56,610
contract doesn't have private storage so

1638
01:33:53,040 --> 01:34:01,950
it can't keep a private key so it can't

1639
01:33:56,610 --> 01:34:07,440
issue digital signatures to check the

1640
01:34:01,950 --> 01:34:10,320
operations so how what's the it's a it's

1641
01:34:07,440 --> 01:34:12,299
an encoding it's a code for a small

1642
01:34:10,320 --> 01:34:17,130
small contracts it's the coding of

1643
01:34:12,300 --> 01:34:19,320
certain values this is the the sender

1644
01:34:17,130 --> 01:34:21,540
address the person creating the smart

1645
01:34:19,320 --> 01:34:24,840
contract which is concatenated with an

1646
01:34:21,540 --> 01:34:27,750
random number well no it's not this is

1647
01:34:24,840 --> 01:34:29,850
the number of transactions that has been

1648
01:34:27,750 --> 01:34:32,700
generated by this person and everything

1649
01:34:29,850 --> 01:34:37,080
is hashed with a three that sharp three

1650
01:34:32,700 --> 01:34:39,059
that's the hashing function in aetherium

1651
01:34:37,080 --> 01:34:41,100
if you want to send money to this

1652
01:34:39,060 --> 01:34:45,540
contract we've want to invoke a

1653
01:34:41,100 --> 01:34:47,580
transaction one function that is already

1654
01:34:45,540 --> 01:34:49,710
programmed in the smart contract you

1655
01:34:47,580 --> 01:34:51,630
will have to specify well I want to

1656
01:34:49,710 --> 01:34:54,150
execute this transaction and what is

1657
01:34:51,630 --> 01:34:55,619
their recipient with one two three four

1658
01:34:54,150 --> 01:34:58,909
that's their day address

1659
01:34:55,619 --> 01:34:58,909
or any type of dress

1660
01:35:06,889 --> 01:35:13,920
smart contracts are programmed with

1661
01:35:10,860 --> 01:35:17,249
solidity in aetherium story there's

1662
01:35:13,920 --> 01:35:21,269
always been of other other languages but

1663
01:35:17,249 --> 01:35:24,840
solidity is the main language serpent

1664
01:35:21,269 --> 01:35:32,249
lll and now it's solidity this is three

1665
01:35:24,840 --> 01:35:35,760
a snapshot it's quite similar to two

1666
01:35:32,249 --> 01:35:38,610
meta object programming language this is

1667
01:35:35,760 --> 01:35:41,880
a smart contract that you will find in

1668
01:35:38,610 --> 01:35:45,659
aetherium dot-org it's a tutorial this

1669
01:35:41,880 --> 01:35:47,849
is to represent immortal each mortal has

1670
01:35:45,659 --> 01:35:51,119
an owner an address owner private

1671
01:35:47,849 --> 01:35:53,849
account controlled by a private key by a

1672
01:35:51,119 --> 01:35:56,360
person an immortal can be created and

1673
01:35:53,849 --> 01:36:00,630
can be killed this function called kill

1674
01:35:56,360 --> 01:36:04,039
does exist for all smart contracts then

1675
01:36:00,630 --> 01:36:06,840
in smart contracts there's a subclass

1676
01:36:04,039 --> 01:36:09,690
out of the mortal class it's called

1677
01:36:06,840 --> 01:36:12,840
greeter a person greeting that person

1678
01:36:09,690 --> 01:36:16,308
only greets there's a greeting a message

1679
01:36:12,840 --> 01:36:19,679
every time the person greets there's a

1680
01:36:16,309 --> 01:36:22,320
builder and the function is greeting if

1681
01:36:19,679 --> 01:36:25,519
I want to deploy an instance of this mod

1682
01:36:22,320 --> 01:36:28,230
contract called Rita I have to invoke a

1683
01:36:25,519 --> 01:36:30,510
building function I want to send a

1684
01:36:28,230 --> 01:36:32,848
transaction as is greet or whatever and

1685
01:36:30,510 --> 01:36:35,760
it has to be a as a parameter

1686
01:36:32,849 --> 01:36:39,179
it's the greet I I want this greeter to

1687
01:36:35,760 --> 01:36:41,429
say hola hello then it's going to deploy

1688
01:36:39,179 --> 01:36:43,670
an instance in this smart contract in

1689
01:36:41,429 --> 01:36:46,440
the specific ethereum blockchain and

1690
01:36:43,670 --> 01:36:51,300
then this mark hundred is receiving a an

1691
01:36:46,440 --> 01:36:53,460
address seven eight nine so if my if you

1692
01:36:51,300 --> 01:36:55,949
want my smart contract to greet you says

1693
01:36:53,460 --> 01:36:58,349
contract seven eight nine do execute the

1694
01:36:55,949 --> 01:37:00,650
greet function and the result is hello

1695
01:36:58,349 --> 01:37:04,010
hola that's the command that I specified

1696
01:37:00,650 --> 01:37:04,009
for the breating

1697
01:37:06,320 --> 01:37:17,610
here we see how the smart contract is

1698
01:37:14,219 --> 01:37:19,800
executed we have our notes that are part

1699
01:37:17,610 --> 01:37:23,670
of the blockchain and this mod contract

1700
01:37:19,800 --> 01:37:27,600
with an idiot called arithmetic on a on

1701
01:37:23,670 --> 01:37:31,409
a it's x to the value a and an add 3 a

1702
01:37:27,600 --> 01:37:35,010
is 0 this node is deploying this it's

1703
01:37:31,409 --> 01:37:36,629
sent to blockchain all the errors go out

1704
01:37:35,010 --> 01:37:38,790
from the blockchain but in fact it's

1705
01:37:36,630 --> 01:37:44,730
this node sending the communication to

1706
01:37:38,790 --> 01:37:47,130
all of them all the nodes check that the

1707
01:37:44,730 --> 01:37:50,250
code is correct like it compiles it's

1708
01:37:47,130 --> 01:37:53,780
okay and then they create in a new

1709
01:37:50,250 --> 01:37:57,120
instance in the blockchain value a is 0

1710
01:37:53,780 --> 01:38:01,530
it's verified and it's written then this

1711
01:37:57,120 --> 01:38:04,019
one just is not even this one it's a new

1712
01:38:01,530 --> 01:38:07,530
one it's a new node in the network that

1713
01:38:04,020 --> 01:38:11,460
wants to execute a is 3 in the contract

1714
01:38:07,530 --> 01:38:14,519
a RS with a specific address this one is

1715
01:38:11,460 --> 01:38:16,620
in contact with blockchain repeat all of

1716
01:38:14,520 --> 01:38:18,540
the notes composed this blockchain

1717
01:38:16,620 --> 01:38:19,710
there's not a central authority that is

1718
01:38:18,540 --> 01:38:24,540
to distribute in the whole of the

1719
01:38:19,710 --> 01:38:27,060
information add 3 to value a and all of

1720
01:38:24,540 --> 01:38:31,850
this receive the transaction some of

1721
01:38:27,060 --> 01:38:34,710
them will generate the new block and

1722
01:38:31,850 --> 01:38:39,989
would obtain the answer to the challenge

1723
01:38:34,710 --> 01:38:44,730
and the result of summing or adding 3 to

1724
01:38:39,989 --> 01:38:47,070
0 is 3 ok the result of this transaction

1725
01:38:44,730 --> 01:38:49,980
is 3 this is the new block all the rest

1726
01:38:47,070 --> 01:38:51,900
will check it we execute they do reacts

1727
01:38:49,980 --> 01:38:54,870
acute the code they check it it's valid

1728
01:38:51,900 --> 01:38:57,980
it's ok and there's another one saying I

1729
01:38:54,870 --> 01:39:01,110
want to multiply the value of a by 2

1730
01:38:57,980 --> 01:39:04,019
this transaction gets to the others and

1731
01:39:01,110 --> 01:39:08,070
this one may be this one imagine this

1732
01:39:04,020 --> 01:39:11,510
one says I found a new block 3 by 2 is 7

1733
01:39:08,070 --> 01:39:14,309
of course 3 by 2 is not 7 all of those

1734
01:39:11,510 --> 01:39:16,290
computers when executing the code which

1735
01:39:14,310 --> 01:39:19,130
I know it's not valid 6 so this

1736
01:39:16,290 --> 01:39:20,960
transaction is invalid we rejected

1737
01:39:19,130 --> 01:39:23,809
that's not written in the blockchain

1738
01:39:20,960 --> 01:39:25,610
because it was a bad answer but new

1739
01:39:23,809 --> 01:39:31,880
blocks are being added up with other

1740
01:39:25,610 --> 01:39:34,610
operations and now I'll speak about the

1741
01:39:31,880 --> 01:39:39,920
connector for case I hope you will

1742
01:39:34,610 --> 01:39:43,460
understand much and there's two friends

1743
01:39:39,920 --> 01:39:47,000
they want to play to connect up for in

1744
01:39:43,460 --> 01:39:49,159
the Internet have two options they don't

1745
01:39:47,000 --> 01:39:51,170
know blockchain and they want to play

1746
01:39:49,159 --> 01:39:53,839
through a web server that has a program

1747
01:39:51,170 --> 01:39:58,250
and the connector for code is the

1748
01:39:53,840 --> 01:40:00,050
program there so I want to play what

1749
01:39:58,250 --> 01:40:02,929
happens there's two friends what one is

1750
01:40:00,050 --> 01:40:06,500
a social engineer a genius you can

1751
01:40:02,929 --> 01:40:09,190
convince anyone and the other one it

1752
01:40:06,500 --> 01:40:12,920
doesn't trust his friends well you can

1753
01:40:09,190 --> 01:40:15,848
ask the web server technician to

1754
01:40:12,920 --> 01:40:17,420
manipulate and to tamper the the games I

1755
01:40:15,849 --> 01:40:19,369
don't trust you

1756
01:40:17,420 --> 01:40:22,309
I don't trust this social engineer the

1757
01:40:19,369 --> 01:40:25,040
other one is a hacker he can get into

1758
01:40:22,309 --> 01:40:27,800
any web server the social engineer no I

1759
01:40:25,040 --> 01:40:29,300
don't trust you because you are going to

1760
01:40:27,800 --> 01:40:31,760
get into the system you're gonna change

1761
01:40:29,300 --> 01:40:36,880
the result of the game I don't trust you

1762
01:40:31,760 --> 01:40:36,880
so what happens there is a lack of trust

1763
01:40:37,389 --> 01:40:42,980
they they they trust nothing they don't

1764
01:40:41,809 --> 01:40:47,570
trust each other they don't trust the

1765
01:40:42,980 --> 01:40:51,530
system but they discover an option be to

1766
01:40:47,570 --> 01:40:54,980
use a blockchain aetherium in this case

1767
01:40:51,530 --> 01:40:58,550
why is this a good choice because block

1768
01:40:54,980 --> 01:41:01,009
chains avoid the existence of central

1769
01:40:58,550 --> 01:41:03,650
authorities where you have to just give

1770
01:41:01,010 --> 01:41:09,290
too much trust you don't need to have

1771
01:41:03,650 --> 01:41:15,610
trust to play with this system they

1772
01:41:09,290 --> 01:41:15,610
download this code you've got it here

1773
01:41:16,710 --> 01:41:23,910
I want this to work okay but limited if

1774
01:41:22,140 --> 01:41:26,700
you're interested you can write to me

1775
01:41:23,910 --> 01:41:29,730
I'll give you the URL the code works

1776
01:41:26,700 --> 01:41:31,220
with an old version of etherium but I'm

1777
01:41:29,730 --> 01:41:35,610
updating it

1778
01:41:31,220 --> 01:41:42,330
maybe I'll update it soon and I'll give

1779
01:41:35,610 --> 01:41:48,110
it to you so you take this code this

1780
01:41:42,330 --> 01:41:53,750
disco DS may is it's a table contractor

1781
01:41:48,110 --> 01:41:56,780
it's about the port and the players so

1782
01:41:53,750 --> 01:42:00,240
it checks all the movements on the board

1783
01:41:56,780 --> 01:42:03,450
and then you have the players contracts

1784
01:42:00,240 --> 01:42:05,969
it's an interface if you want to play

1785
01:42:03,450 --> 01:42:08,790
connector for in this way you have to

1786
01:42:05,970 --> 01:42:11,910
complete and respecting the interface to

1787
01:42:08,790 --> 01:42:16,400
use the board contracts that are the

1788
01:42:11,910 --> 01:42:19,349
rules of the game what happens

1789
01:42:16,400 --> 01:42:21,269
what well the two friends think this is

1790
01:42:19,350 --> 01:42:26,030
a valid solution because one they

1791
01:42:21,270 --> 01:42:28,200
instance the board and play the players

1792
01:42:26,030 --> 01:42:31,050
contracts those instance are going to be

1793
01:42:28,200 --> 01:42:33,750
replicated in all the network nodes if

1794
01:42:31,050 --> 01:42:35,700
we are blockchain in etherium deploying

1795
01:42:33,750 --> 01:42:39,960
the smart contracts with connector for

1796
01:42:35,700 --> 01:42:42,660
all of you will have the copy of all

1797
01:42:39,960 --> 01:42:45,030
these rules you will have a copy of the

1798
01:42:42,660 --> 01:42:47,880
smart contracts between the two players

1799
01:42:45,030 --> 01:42:54,509
and whether board rules every time I

1800
01:42:47,880 --> 01:42:57,090
send an operation move the piece you

1801
01:42:54,510 --> 01:43:00,240
will receive that it's signed by me

1802
01:42:57,090 --> 01:43:04,070
column four it's not for you see if it's

1803
01:43:00,240 --> 01:43:06,450
a four in a row or not and you will be

1804
01:43:04,070 --> 01:43:08,130
you have to check if it this is a good

1805
01:43:06,450 --> 01:43:09,720
movement or a batterer movement it's my

1806
01:43:08,130 --> 01:43:14,100
turn first

1807
01:43:09,720 --> 01:43:17,730
if it's my friends turn I can't move so

1808
01:43:14,100 --> 01:43:20,370
my friend you and myself you will check

1809
01:43:17,730 --> 01:43:25,650
that the movements are valid in the four

1810
01:43:20,370 --> 01:43:27,690
in a row I'm not a hacker I cannot enter

1811
01:43:25,650 --> 01:43:29,450
the blockchain I can't change the

1812
01:43:27,690 --> 01:43:30,780
results because it's cryptographically

1813
01:43:29,450 --> 01:43:32,760
protected

1814
01:43:30,780 --> 01:43:33,750
it's a blockchain I can't change the

1815
01:43:32,760 --> 01:43:37,710
story

1816
01:43:33,750 --> 01:43:40,139
it's digitally signed so if I want to

1817
01:43:37,710 --> 01:43:45,090
say that my friend is stupid and he's

1818
01:43:40,139 --> 01:43:47,489
done a bad move I can't say that because

1819
01:43:45,090 --> 01:43:49,800
I can't tamper whose fault I'll fake

1820
01:43:47,489 --> 01:43:52,169
this movement because I need his key for

1821
01:43:49,800 --> 01:43:54,929
that so and vice-versa

1822
01:43:52,170 --> 01:43:57,480
even though we can't trust each other we

1823
01:43:54,929 --> 01:44:02,099
can play two four in a row connector for

1824
01:43:57,480 --> 01:44:04,919
in such a way this is well just the

1825
01:44:02,099 --> 01:44:09,360
functions the board contract for this

1826
01:44:04,920 --> 01:44:12,449
four in a row game the code is too long

1827
01:44:09,360 --> 01:44:15,179
I put it into my github there's a

1828
01:44:12,449 --> 01:44:22,169
connector for a board with a matrix 6 by

1829
01:44:15,179 --> 01:44:25,440
7 and it's abides map matrix 1 it's the

1830
01:44:22,170 --> 01:44:34,940
cells occupied by the corresponding

1831
01:44:25,440 --> 01:44:38,789
players more auxiliary variables events

1832
01:44:34,940 --> 01:44:44,699
function Connect there's just a board

1833
01:44:38,789 --> 01:44:47,670
and player 1 and player 2 who's got now

1834
01:44:44,699 --> 01:44:51,989
the right to be player 1 it depends on

1835
01:44:47,670 --> 01:44:58,199
the terms that each one takes player 2

1836
01:44:51,989 --> 01:45:01,879
in it game so who starts first so for

1837
01:44:58,199 --> 01:45:04,469
the first move connector for has a

1838
01:45:01,880 --> 01:45:08,250
winning strategy for the first player to

1839
01:45:04,469 --> 01:45:11,760
play if you start you have you're likely

1840
01:45:08,250 --> 01:45:17,010
to win and here we can generate random

1841
01:45:11,760 --> 01:45:19,349
numbers with blockchain these are not

1842
01:45:17,010 --> 01:45:25,369
cryptographic leave a lead random

1843
01:45:19,349 --> 01:45:28,860
numbers but for a game it's okay they

1844
01:45:25,369 --> 01:45:30,900
the exactly the function of executing

1845
01:45:28,860 --> 01:45:33,030
and movement if it's your it's turn the

1846
01:45:30,900 --> 01:45:35,039
turn of player one the player one can

1847
01:45:33,030 --> 01:45:35,759
invoke the function move it's a

1848
01:45:35,039 --> 01:45:38,518
transaction

1849
01:45:35,760 --> 01:45:41,579
it's a written operation on the

1850
01:45:38,519 --> 01:45:44,369
blockchain database so there's the first

1851
01:45:41,579 --> 01:45:44,780
move will all check we the nodes will

1852
01:45:44,369 --> 01:45:48,469
check

1853
01:45:44,780 --> 01:45:50,869
this is a valid transaction if so the

1854
01:45:48,469 --> 01:45:53,780
result is okay it's going to be written

1855
01:45:50,869 --> 01:45:59,480
in a block and the board is going to be

1856
01:45:53,780 --> 01:46:02,239
updated the contract called players well

1857
01:45:59,480 --> 01:46:06,549
we have the Associated board the the

1858
01:46:02,239 --> 01:46:09,558
owner the constructor or the Builder

1859
01:46:06,550 --> 01:46:13,869
function the associated move the

1860
01:46:09,559 --> 01:46:17,570
function move and manual move because

1861
01:46:13,869 --> 01:46:22,639
you can program it with logic I'm going

1862
01:46:17,570 --> 01:46:24,380
to execute that you can program that the

1863
01:46:22,639 --> 01:46:28,010
smart contracts can play in an

1864
01:46:24,380 --> 01:46:32,270
autonomous way that's cool we can

1865
01:46:28,010 --> 01:46:35,389
program an intelligence here so then my

1866
01:46:32,270 --> 01:46:38,480
player plays against his player and

1867
01:46:35,389 --> 01:46:42,260
let's see whose program there is smarter

1868
01:46:38,480 --> 01:46:44,750
intelligence between the two players so

1869
01:46:42,260 --> 01:46:47,929
we know that we cannot cheat because the

1870
01:46:44,750 --> 01:46:51,880
logic is programmed its instanced in the

1871
01:46:47,929 --> 01:46:51,880
blockchain so we can't change anything

1872
01:47:01,300 --> 01:47:07,969
this is the game flow chart so first

1873
01:47:05,320 --> 01:47:10,549
there's a new board being created

1874
01:47:07,969 --> 01:47:12,380
Connect for new the function new is

1875
01:47:10,550 --> 01:47:13,190
creating an instance for this mod

1876
01:47:12,380 --> 01:47:16,699
contract

1877
01:47:13,190 --> 01:47:20,329
play a 1 and to create their own blaze

1878
01:47:16,699 --> 01:47:22,969
their own player instances so play

1879
01:47:20,329 --> 01:47:27,549
player 1 and 2 on the board that we just

1880
01:47:22,969 --> 01:47:30,139
created then once these two players are

1881
01:47:27,550 --> 01:47:33,860
instanced automatically the board is

1882
01:47:30,139 --> 01:47:36,409
starting to play the game starts so when

1883
01:47:33,860 --> 01:47:40,429
it has to decide who starts and once

1884
01:47:36,409 --> 01:47:44,860
it's decided so play your once o player

1885
01:47:40,429 --> 01:47:47,179
to start start to to move and to play

1886
01:47:44,860 --> 01:47:49,969
every time there's a move by a player

1887
01:47:47,179 --> 01:47:53,059
that board is going to check if the

1888
01:47:49,969 --> 01:47:55,190
condition of winning the game by a

1889
01:47:53,059 --> 01:47:58,719
player is okay otherwise if there's no

1890
01:47:55,190 --> 01:48:02,679
winning yet the next player

1891
01:47:58,719 --> 01:48:08,250
and there's a winning situation the game

1892
01:48:02,680 --> 01:48:08,250
is over so it's quite easy

1893
01:48:23,380 --> 01:48:28,479
that's the method okay clear

1894
01:48:25,449 --> 01:48:32,549
you will have to believe me this is

1895
01:48:28,479 --> 01:48:32,550
executive the smart contract

1896
01:48:50,489 --> 01:48:59,309
money a key thing go this is a

1897
01:48:55,650 --> 01:49:03,420
replication of bit hub with the updating

1898
01:48:59,310 --> 01:49:05,310
changes I'm updating to the nuit theory

1899
01:49:03,420 --> 01:49:09,620
invasion this is the player contract

1900
01:49:05,310 --> 01:49:09,620
this is the code of the move function

1901
01:49:12,680 --> 01:49:19,460
MSG dot Center is the person who sent in

1902
01:49:16,170 --> 01:49:22,469
this transaction invoking move function

1903
01:49:19,460 --> 01:49:26,670
if the person invoking is is different

1904
01:49:22,469 --> 01:49:31,410
from the owner that is my friend or

1905
01:49:26,670 --> 01:49:33,840
myself then if it's it's another person

1906
01:49:31,410 --> 01:49:36,840
you cannot be there because it's a

1907
01:49:33,840 --> 01:49:39,719
person trying to play instead of me on

1908
01:49:36,840 --> 01:49:43,140
behalf of me if it's me who is executing

1909
01:49:39,719 --> 01:49:46,590
this transaction one decides at the

1910
01:49:43,140 --> 01:49:50,850
column to which I want to move so it

1911
01:49:46,590 --> 01:49:53,160
calculates in a random way here if you

1912
01:49:50,850 --> 01:49:56,790
want to use this system you have to

1913
01:49:53,160 --> 01:49:59,880
program the if there's here a row with

1914
01:49:56,790 --> 01:50:01,800
three pieces of my pieces in the

1915
01:49:59,880 --> 01:50:05,010
consecutive way I have to put another

1916
01:50:01,800 --> 01:50:10,440
piece just besides that because it's

1917
01:50:05,010 --> 01:50:12,900
foreigner in a row and I want to win you

1918
01:50:10,440 --> 01:50:14,580
can execute this manual move function

1919
01:50:12,900 --> 01:50:19,950
you don't want to play in an automatic

1920
01:50:14,580 --> 01:50:21,960
way you can say to the system what is

1921
01:50:19,950 --> 01:50:24,840
the piece that has to be played and what

1922
01:50:21,960 --> 01:50:30,960
is the column and the row what I can do

1923
01:50:24,840 --> 01:50:33,989
here is to launch a test block chain in

1924
01:50:30,960 --> 01:50:36,150
aetherium the normal aetherium client

1925
01:50:33,989 --> 01:50:38,968
put that will be too troublesome because

1926
01:50:36,150 --> 01:50:40,549
the theorem clear creates a new block

1927
01:50:38,969 --> 01:50:42,660
every 13 seconds

1928
01:50:40,550 --> 01:50:45,540
more or less it's a probabilistic

1929
01:50:42,660 --> 01:50:49,139
processing and can last 5 seconds or 15

1930
01:50:45,540 --> 01:50:51,390
I'm executing this in a know that it's

1931
01:50:49,140 --> 01:50:54,330
my computer it's a private network in

1932
01:50:51,390 --> 01:50:58,110
aetherium normally is going to be it

1933
01:50:54,330 --> 01:51:01,260
could be very variable in time so a

1934
01:50:58,110 --> 01:51:02,950
block could be created in 50 seconds and

1935
01:51:01,260 --> 01:51:04,900
you wouldn't say any move

1936
01:51:02,950 --> 01:51:10,450
in the game so I'm and going to execute

1937
01:51:04,900 --> 01:51:12,639
the test client so there's no proof of

1938
01:51:10,450 --> 01:51:14,620
work and there's the the etherium

1939
01:51:12,640 --> 01:51:17,560
virtual machine the blocks are being

1940
01:51:14,620 --> 01:51:19,960
created in a deterministic way with no

1941
01:51:17,560 --> 01:51:23,520
need of proof of work and we'll see that

1942
01:51:19,960 --> 01:51:31,870
the smart contract is really playing

1943
01:51:23,520 --> 01:51:34,810
this game okay I'm writing here that the

1944
01:51:31,870 --> 01:51:37,480
gas that is introduced by block if

1945
01:51:34,810 --> 01:51:41,530
because every transaction has a cost

1946
01:51:37,480 --> 01:51:45,490
associated cost in gas units so that

1947
01:51:41,530 --> 01:51:48,040
there's no service refusal service

1948
01:51:45,490 --> 01:51:50,500
attacks so the number of gas units that

1949
01:51:48,040 --> 01:51:54,010
you can use or spend per transaction a

1950
01:51:50,500 --> 01:51:56,380
probe block this is limited why these

1951
01:51:54,010 --> 01:52:00,550
attacks can happen imagine that I have

1952
01:51:56,380 --> 01:52:06,100
infinite gas infinite ether and I start

1953
01:52:00,550 --> 01:52:09,670
sending transactions that require a lot

1954
01:52:06,100 --> 01:52:12,100
of computational expenditure I have to

1955
01:52:09,670 --> 01:52:13,750
pay for that but all of you you are the

1956
01:52:12,100 --> 01:52:15,970
nodes composing the network you're going

1957
01:52:13,750 --> 01:52:18,250
to receive this transaction you're going

1958
01:52:15,970 --> 01:52:20,230
to executive to test and to check if

1959
01:52:18,250 --> 01:52:24,910
it's valid but this is a very costly

1960
01:52:20,230 --> 01:52:28,540
operation you you will have to

1961
01:52:24,910 --> 01:52:30,400
executives action for years for ages so

1962
01:52:28,540 --> 01:52:34,480
other nodes of the network will execute

1963
01:52:30,400 --> 01:52:36,549
the masane transaction for ages and they

1964
01:52:34,480 --> 01:52:40,089
mean why they can't do anything else

1965
01:52:36,550 --> 01:52:46,780
they can't respond to other requests so

1966
01:52:40,090 --> 01:52:49,180
the blockchain is stopped and that's why

1967
01:52:46,780 --> 01:52:51,820
there's a limit gas per transaction and

1968
01:52:49,180 --> 01:52:54,490
per block and as this contract isn't

1969
01:52:51,820 --> 01:52:59,620
optimized it uses a lot of gas and what

1970
01:52:54,490 --> 01:53:00,700
I'm telling the customers is to be

1971
01:52:59,620 --> 01:53:04,630
careful because otherwise the

1972
01:53:00,700 --> 01:53:06,280
transactions are very expensive and I'm

1973
01:53:04,630 --> 01:53:08,380
going to ask it to create blocks every

1974
01:53:06,280 --> 01:53:09,570
three seconds this is what it son

1975
01:53:08,380 --> 01:53:22,289
internally

1976
01:53:09,570 --> 01:53:22,289
generated 10 accounts and now

1977
01:53:33,510 --> 01:53:43,270
we're showing the contracts it's gonna

1978
01:53:38,080 --> 01:53:50,710
display them it's mind the contract

1979
01:53:43,270 --> 01:53:55,690
there of the board of player 1 player 2

1980
01:53:50,710 --> 01:54:01,900
and now it's playing you can see it it

1981
01:53:55,690 --> 01:54:04,929
started the game I'd skipped its turn

1982
01:54:01,900 --> 01:54:07,210
it's now player 2 and player 2 has

1983
01:54:04,930 --> 01:54:12,490
received a signal saying it's your turn

1984
01:54:07,210 --> 01:54:18,070
to play and player 2 has moved on the

1985
01:54:12,490 --> 01:54:21,160
cell and the cell 1 0 1 4 0 is a winning

1986
01:54:18,070 --> 01:54:23,769
strategy but this is just a random trial

1987
01:54:21,160 --> 01:54:26,590
and what are they playing well Blair 2

1988
01:54:23,770 --> 01:54:30,610
is gone 2 1 0 the board says it's his

1989
01:54:26,590 --> 01:54:35,170
turn player one decides on his movement

1990
01:54:30,610 --> 01:54:39,790
sends it in this transaction which is c4

1991
01:54:35,170 --> 01:54:41,500
moon's column 2 and played by player 2

1992
01:54:39,790 --> 01:54:43,060
if it been played by a different player

1993
01:54:41,500 --> 01:54:45,520
it wouldn't be valid cuz I don't have

1994
01:54:43,060 --> 01:54:48,280
you seen the logic that it has to be the

1995
01:54:45,520 --> 01:54:51,910
player that's its whose turn it is and

1996
01:54:48,280 --> 01:54:54,969
here we are we have them all playing and

1997
01:54:51,910 --> 01:54:56,740
sooner or later I'm not gonna wait we'll

1998
01:54:54,970 --> 01:54:59,920
just let it to run but sooner or later

1999
01:54:56,740 --> 01:55:04,360
one of the two players will get four in

2000
01:54:59,920 --> 01:55:08,800
a row and you'll see a message that says

2001
01:55:04,360 --> 01:55:20,530
player one or player two has sir one or

2002
01:55:08,800 --> 01:55:26,650
it's a tie we'll be back there shortly

2003
01:55:20,530 --> 01:55:28,599
what are we how do we know that a

2004
01:55:26,650 --> 01:55:31,000
transactions been sent by their correct

2005
01:55:28,600 --> 01:55:34,900
Claire for two reasons because it's

2006
01:55:31,000 --> 01:55:37,230
signed digitally because the private

2007
01:55:34,900 --> 01:55:41,559
keys associated to the public key of the

2008
01:55:37,230 --> 01:55:47,589
user who owns the players contract this

2009
01:55:41,560 --> 01:55:54,070
transaction triggers smart contract

2010
01:55:47,590 --> 01:55:58,560
player and this is called contract

2011
01:55:54,070 --> 01:56:04,380
Connect for the and it has this line

2012
01:55:58,560 --> 01:56:11,280
this code line an if' and if the sender

2013
01:56:04,380 --> 01:56:17,500
it's different to the coolest turn then

2014
01:56:11,280 --> 01:56:20,590
the return is false it doesn't carry on

2015
01:56:17,500 --> 01:56:25,200
running if it's the same here you've got

2016
01:56:20,590 --> 01:56:29,200
below more logic to see if it's the

2017
01:56:25,200 --> 01:56:31,889
winning movement and it hasn't been the

2018
01:56:29,200 --> 01:56:34,630
winning movements then it updates the

2019
01:56:31,890 --> 01:56:41,050
board and tells the next player that

2020
01:56:34,630 --> 01:56:46,570
it's his turn let's just think if we

2021
01:56:41,050 --> 01:56:48,520
really have gained anything by doing

2022
01:56:46,570 --> 01:56:52,210
this fire blockchain or are we just

2023
01:56:48,520 --> 01:56:56,740
wasting our time you could say well

2024
01:56:52,210 --> 01:56:58,740
couldn't you instead of using all this

2025
01:56:56,740 --> 01:57:04,469
blockchain couldn't you just a

2026
01:56:58,740 --> 01:57:07,900
centralized server in which each move

2027
01:57:04,470 --> 01:57:13,240
and each player sends its move signed

2028
01:57:07,900 --> 01:57:15,099
digitally then this server isn't going

2029
01:57:13,240 --> 01:57:21,309
to be able to fake the moves that I'm

2030
01:57:15,100 --> 01:57:28,719
doing well happens in the beginning

2031
01:57:21,309 --> 01:57:32,590
as I said connector for has a winning

2032
01:57:28,719 --> 01:57:36,570
strategy so how much I signed the

2033
01:57:32,590 --> 01:57:41,199
movements digitally the initial draw

2034
01:57:36,570 --> 01:57:43,449
will be done by the server so they'll

2035
01:57:41,199 --> 01:57:46,019
always say did the other one guy should

2036
01:57:43,449 --> 01:57:50,199
start first because there's an advantage

2037
01:57:46,020 --> 01:57:52,949
so there are there cryptographic ways of

2038
01:57:50,199 --> 01:57:55,598
doing a draw between two things so that

2039
01:57:52,949 --> 01:58:01,388
none of the two people nor the server

2040
01:57:55,599 --> 01:58:02,739
can control the draw okay with this

2041
01:58:01,389 --> 01:58:04,780
sufficient reason therefore to use a

2042
01:58:02,739 --> 01:58:08,348
blockchain instead of this the second

2043
01:58:04,780 --> 01:58:15,759
problems that the server can't rewrite

2044
01:58:08,349 --> 01:58:17,590
history let's imagine much the

2045
01:58:15,760 --> 01:58:19,300
transactions are signed teachers leave

2046
01:58:17,590 --> 01:58:22,989
one of the two players is a friend of

2047
01:58:19,300 --> 01:58:27,599
the server he can be sent seven possible

2048
01:58:22,989 --> 01:58:30,459
movements seven columns in connect for

2049
01:58:27,599 --> 01:58:32,920
sake I say move come on move column

2050
01:58:30,460 --> 01:58:43,659
three four seven they can all be signed

2051
01:58:32,920 --> 01:58:47,980
digitally by the server can build all

2052
01:58:43,659 --> 01:58:50,110
these different chains as he wants to

2053
01:58:47,980 --> 01:58:52,718
however much they're signed digitally

2054
01:58:50,110 --> 01:58:54,820
and there's another third problem which

2055
01:58:52,719 --> 01:58:58,239
is the most important of all which is

2056
01:58:54,820 --> 01:59:00,969
that all of this could be avoided but

2057
01:58:58,239 --> 01:59:02,678
what happens if we create a

2058
01:59:00,969 --> 01:59:06,030
cryptographic system which is great

2059
01:59:02,679 --> 01:59:11,530
server can't change there's no way

2060
01:59:06,030 --> 01:59:13,659
either of the two players to start the

2061
01:59:11,530 --> 01:59:15,099
server it's still the friend of my

2062
01:59:13,659 --> 01:59:19,900
friend the friend that I'm playing

2063
01:59:15,099 --> 01:59:21,849
against and C said I'm gonna win the

2064
01:59:19,900 --> 01:59:24,039
game he can decide to crash and then I

2065
01:59:21,849 --> 01:59:24,699
can't make my movement I can't make my

2066
01:59:24,039 --> 01:59:27,980
move

2067
01:59:24,699 --> 01:59:33,219
or doesn't answer my requests

2068
01:59:27,980 --> 01:59:38,389
this is very complicated you could just

2069
01:59:33,220 --> 01:59:42,050
replicate other service that are playing

2070
01:59:38,390 --> 01:59:43,400
connector fall but here will still look

2071
01:59:42,050 --> 01:59:44,900
the same problem because they're

2072
01:59:43,400 --> 01:59:47,389
replicas that are controlled by the same

2073
01:59:44,900 --> 01:59:50,259
server so if there's a malicious server

2074
01:59:47,390 --> 01:59:52,940
then there's we can do nothing about it

2075
01:59:50,260 --> 01:59:54,830
and what's more the other option is

2076
01:59:52,940 --> 01:59:56,960
instead of using for the same server

2077
01:59:54,830 --> 01:59:59,030
it's n servers that are controlled by

2078
01:59:56,960 --> 02:00:01,610
different of bodies and there you have a

2079
01:59:59,030 --> 02:00:07,570
trust problem once again if these

2080
02:00:01,610 --> 02:00:11,530
service don't get along how can they

2081
02:00:07,570 --> 02:00:14,179
agree in on the way the game progresses

2082
02:00:11,530 --> 02:00:16,040
they're gonna start arguing they won't

2083
02:00:14,180 --> 02:00:23,260
reach agree right now if the movements

2084
02:00:16,040 --> 02:00:23,260
of Fallot 1 or not so at the end here

2085
02:00:24,370 --> 02:00:29,989
there's trust problems if we want to add

2086
02:00:28,430 --> 02:00:32,540
all the different service we don't trust

2087
02:00:29,989 --> 02:00:34,519
the service that were added we can't

2088
02:00:32,540 --> 02:00:37,070
trust all the service being active at

2089
02:00:34,520 --> 02:00:39,200
the same time there's a problem of

2090
02:00:37,070 --> 02:00:41,269
digital signatures added into the mix so

2091
02:00:39,200 --> 02:00:44,500
this is all beginning to look a lot like

2092
02:00:41,270 --> 02:00:47,720
blockchain it may well be that it's

2093
02:00:44,500 --> 02:00:49,700
meaningful to use blockchain but

2094
02:00:47,720 --> 02:00:52,670
actually I think and I think it does

2095
02:00:49,700 --> 02:00:56,750
because we could include automatic

2096
02:00:52,670 --> 02:00:58,880
payments we could bet on the game that's

2097
02:00:56,750 --> 02:01:03,200
being played but although these are just

2098
02:00:58,880 --> 02:01:08,330
additional what do we lose we use lose

2099
02:01:03,200 --> 02:01:11,059
efficiency here's a little map when you

2100
02:01:08,330 --> 02:01:15,140
see the energy consumption of Bitcoin or

2101
02:01:11,060 --> 02:01:17,510
those countries that are using annually

2102
02:01:15,140 --> 02:01:21,680
less energy than the Bitcoin network

2103
02:01:17,510 --> 02:01:24,050
then speed you have to wait until blocks

2104
02:01:21,680 --> 02:01:26,960
are built here you may have seen I've

2105
02:01:24,050 --> 02:01:29,570
seen a mock-up of aetherium to be able

2106
02:01:26,960 --> 02:01:32,480
to show you all this life if I'd

2107
02:01:29,570 --> 02:01:35,900
actually use the real network it would

2108
02:01:32,480 --> 02:01:38,179
be 13 seconds and it's lots of not very

2109
02:01:35,900 --> 02:01:41,540
many transactions per second that can

2110
02:01:38,180 --> 02:01:44,000
solve any blockchain so there's a speed

2111
02:01:41,540 --> 02:01:47,150
problem for example in blockchain

2112
02:01:44,000 --> 02:01:50,420
systems we can talk of tens of

2113
02:01:47,150 --> 02:01:53,530
operations per second in distributed

2114
02:01:50,420 --> 02:01:56,090
systems typical we can talk about

2115
02:01:53,530 --> 02:01:59,719
thousands of operations per second what

2116
02:01:56,090 --> 02:02:02,920
have we lost privacy you can all see the

2117
02:01:59,720 --> 02:02:05,720
movements that I'm doing on my network

2118
02:02:02,920 --> 02:02:08,480
in the case of connect phone doesn't

2119
02:02:05,720 --> 02:02:12,530
matter but if we're doing more advanced

2120
02:02:08,480 --> 02:02:14,690
things maybe we don't want no more

2121
02:02:12,530 --> 02:02:16,880
intimate then maybe we don't like this

2122
02:02:14,690 --> 02:02:20,660
idea of a lack of privacy this is just

2123
02:02:16,880 --> 02:02:23,030
an example so I'm gonna skip this

2124
02:02:20,660 --> 02:02:26,389
example what's the conclusion here we've

2125
02:02:23,030 --> 02:02:28,130
got a decision diagram of whether you

2126
02:02:26,390 --> 02:02:32,350
need a blockchain do I need a blockchain

2127
02:02:28,130 --> 02:02:37,460
no they're polite is no well no this is

2128
02:02:32,350 --> 02:02:40,310
just blockchain research researchers

2129
02:02:37,460 --> 02:02:43,850
tweet whose critical of blockchain and

2130
02:02:40,310 --> 02:02:47,000
here we've got a flowchart that's a bit

2131
02:02:43,850 --> 02:02:49,400
more serious and it talks about what

2132
02:02:47,000 --> 02:02:51,320
things you need to take in take

2133
02:02:49,400 --> 02:02:53,299
seriously if you decide whether it's

2134
02:02:51,320 --> 02:02:57,170
either blockchain or not and they ask

2135
02:02:53,300 --> 02:02:58,850
you do you need to store a state if you

2136
02:02:57,170 --> 02:03:01,520
don't need to store a state no you don't

2137
02:02:58,850 --> 02:03:06,920
need a blockchain in Connect four we do

2138
02:03:01,520 --> 02:03:09,800
need to store the state of the board are

2139
02:03:06,920 --> 02:03:12,200
there multiple writers and multiple

2140
02:03:09,800 --> 02:03:15,130
users that can change the state of the

2141
02:03:12,200 --> 02:03:18,620
network in the case of Connect four

2142
02:03:15,130 --> 02:03:20,780
there's two players so maybe not but

2143
02:03:18,620 --> 02:03:22,130
let's imagine there are many possible

2144
02:03:20,780 --> 02:03:25,639
players so the yes it would be

2145
02:03:22,130 --> 02:03:27,980
meaningful do you have the option of

2146
02:03:25,640 --> 02:03:31,400
choosing a third party that you trust

2147
02:03:27,980 --> 02:03:32,509
if the option of entrusting it to a

2148
02:03:31,400 --> 02:03:33,860
third party then you don't need a

2149
02:03:32,510 --> 02:03:38,900
blockchain cuz the only thing you're

2150
02:03:33,860 --> 02:03:40,400
going to do is to lose efficiency it was

2151
02:03:38,900 --> 02:03:43,280
something that could be done a lot more

2152
02:03:40,400 --> 02:03:46,969
simply the next question are all writers

2153
02:03:43,280 --> 02:03:48,320
known here from this moment on what you

2154
02:03:46,970 --> 02:03:51,350
can see that the result is going to be

2155
02:03:48,320 --> 02:03:52,150
yes yes it may well be advisable to use

2156
02:03:51,350 --> 02:03:55,210
block

2157
02:03:52,150 --> 02:03:56,980
Chane otherwise if it's all the answers

2158
02:03:55,210 --> 02:03:58,480
are no then you don't use a blockchain

2159
02:03:56,980 --> 02:04:03,218
but they're different kinds of block

2160
02:03:58,480 --> 02:04:07,570
chains writers aren't known then it's

2161
02:04:03,219 --> 02:04:13,210
not it's a non permitted block chains if

2162
02:04:07,570 --> 02:04:15,699
they aren't known and they trust I skip

2163
02:04:13,210 --> 02:04:18,520
this one if the writers trust each other

2164
02:04:15,699 --> 02:04:20,290
then you don't need a block chain it's

2165
02:04:18,520 --> 02:04:21,850
equivalent having a trustworthy third

2166
02:04:20,290 --> 02:04:27,730
party but if they don't trust each other

2167
02:04:21,850 --> 02:04:29,290
and you need it be publicly visible then

2168
02:04:27,730 --> 02:04:31,389
it'll be a public block chain if you

2169
02:04:29,290 --> 02:04:33,130
want to hide part of the information if

2170
02:04:31,390 --> 02:04:36,010
you don't everybody to have access to

2171
02:04:33,130 --> 02:04:38,170
all the information then it'll have to

2172
02:04:36,010 --> 02:04:40,719
be permission to blockchain so the

2173
02:04:38,170 --> 02:04:43,449
conclusion or the exception of there

2174
02:04:40,719 --> 02:04:46,300
being multiple writers in the case of

2175
02:04:43,449 --> 02:04:49,540
Connect four there are two maybe we

2176
02:04:46,300 --> 02:04:53,650
could have skipped it but if we want not

2177
02:04:49,540 --> 02:04:56,500
just to be my friend and another maybe

2178
02:04:53,650 --> 02:04:57,460
others to join then maybe would be

2179
02:04:56,500 --> 02:05:00,840
meaningful to our flock changes

2180
02:04:57,460 --> 02:05:04,239
otherwise no that conclusion every time

2181
02:05:00,840 --> 02:05:07,480
you see a blockchain system and you want

2182
02:05:04,239 --> 02:05:08,860
to know if it's sensible or maybe they

2183
02:05:07,480 --> 02:05:12,639
could have done it a lot easier I

2184
02:05:08,860 --> 02:05:16,839
recommend you use this diagram and you

2185
02:05:12,640 --> 02:05:18,969
answer the questions and if it's no the

2186
02:05:16,840 --> 02:05:20,469
answer is no I'd start thinking about

2187
02:05:18,969 --> 02:05:22,989
whether it's worthwhile having one chain

2188
02:05:20,469 --> 02:05:24,699
or not and that's it that's all I wanted

2189
02:05:22,989 --> 02:05:29,820
to say if you've got any doubt if you

2190
02:05:24,699 --> 02:05:32,949
want me to send you the URL of the smart

2191
02:05:29,820 --> 02:05:42,269
contracts in the github write to me if

2192
02:05:32,949 --> 02:05:45,690
not then go to Google and for tinkering

2193
02:05:42,270 --> 02:05:45,690
to see whether

2194
02:05:45,830 --> 02:05:50,940
it's interesting that the tip to use

2195
02:05:49,200 --> 02:05:52,950
this example and to reason whether to

2196
02:05:50,940 --> 02:05:54,370
use a block plane thank you very much I

2197
02:05:52,950 --> 02:05:58,769
hope I didn't bore you

2198
02:05:54,370 --> 02:05:58,769
[Applause]

2199
02:06:03,659 --> 02:06:05,719
you

