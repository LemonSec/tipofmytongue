1
00:00:18,170 --> 00:00:24,810
Allah Allah pavani tan temprano thank

2
00:00:22,380 --> 00:00:27,150
you very much for coming this early I

3
00:00:24,810 --> 00:00:30,720
know it is very very early for a Sunday

4
00:00:27,150 --> 00:00:34,410
but the idea is in the next couple of

5
00:00:30,720 --> 00:00:39,480
hours to talk to you about a couple of

6
00:00:34,410 --> 00:00:45,599
algorithms which is AES for symmetric

7
00:00:39,480 --> 00:00:50,459
time and RSA although some people think

8
00:00:45,600 --> 00:00:52,970
that it still got some life and to

9
00:00:50,460 --> 00:00:57,150
remove all the mystery that surrounds

10
00:00:52,970 --> 00:00:59,909
cryptography cryptography has been

11
00:00:57,150 --> 00:01:04,369
around for over 25 years you can see it

12
00:00:59,909 --> 00:01:06,690
from a mathematical viewpoint we can

13
00:01:04,369 --> 00:01:08,490
look in depth at things that are

14
00:01:06,690 --> 00:01:12,090
difficult to accept by an engineer but

15
00:01:08,490 --> 00:01:14,669
you can actually apply cryptography in

16
00:01:12,090 --> 00:01:17,820
your day-to-day life and if you look at

17
00:01:14,670 --> 00:01:20,189
it you don't actually need to have a

18
00:01:17,820 --> 00:01:25,798
great knowledge of maths with just a

19
00:01:20,189 --> 00:01:29,850
couple of basic notions and no watch

20
00:01:25,799 --> 00:01:33,390
modular symmetric is you can have a

21
00:01:29,850 --> 00:01:35,820
better idea of cryptography just to

22
00:01:33,390 --> 00:01:38,399
understand how kept ography works and

23
00:01:35,820 --> 00:01:43,258
whether the algorithms that we use today

24
00:01:38,399 --> 00:01:45,840
are secured or Ostrom another thing that

25
00:01:43,259 --> 00:01:49,380
we're going to look at is our gir if

26
00:01:45,840 --> 00:01:52,890
make complexity so there you're either

27
00:01:49,380 --> 00:01:55,408
gonna have to learn maths or ask for the

28
00:01:52,890 --> 00:01:57,530
help of a true mathematician we'll be

29
00:01:55,409 --> 00:02:01,380
talking about white box

30
00:01:57,530 --> 00:02:03,509
but to understand cryptography that we

31
00:02:01,380 --> 00:02:06,568
use today the standard kind of

32
00:02:03,509 --> 00:02:09,600
cryptography it's sufficient to have a

33
00:02:06,569 --> 00:02:14,310
couple of notions of maths and then it's

34
00:02:09,600 --> 00:02:17,940
a way of telling people yes you can

35
00:02:14,310 --> 00:02:20,060
learn cryptography without needing to be

36
00:02:17,940 --> 00:02:23,430
a mathematician

37
00:02:20,060 --> 00:02:32,910
before I start I've been told not to

38
00:02:23,430 --> 00:02:35,340
move too much I'm gonna not gonna

39
00:02:32,910 --> 00:02:38,700
introduce myself my name is Jorge Remiel

40
00:02:35,340 --> 00:02:42,269
Xavier I work and I've been working in

41
00:02:38,700 --> 00:02:45,660
cryptography for the last 25 years at

42
00:02:42,269 --> 00:02:47,730
the Polytechnic University in Madrid and

43
00:02:45,660 --> 00:02:50,519
they unit and also in Latin America and

44
00:02:47,730 --> 00:02:54,798
for the last 25 years I've been the

45
00:02:50,519 --> 00:02:54,799
cryptogram cryptography man basically

46
00:02:55,069 --> 00:03:03,899
and now with Alfonso munos we are in

47
00:03:00,450 --> 00:03:07,518
charge of crypto rate which is an 18

48
00:03:03,900 --> 00:03:10,860
year old network in fact it was 18 quite

49
00:03:07,519 --> 00:03:13,530
recently to make people aware of what

50
00:03:10,860 --> 00:03:14,940
security actually means so let's talk

51
00:03:13,530 --> 00:03:16,790
about cryptography

52
00:03:14,940 --> 00:03:21,379
there's symmetric and asymmetric

53
00:03:16,790 --> 00:03:24,060
cryptography let's try to compare the

54
00:03:21,379 --> 00:03:28,190
different algorithms that we use today

55
00:03:24,060 --> 00:03:34,410
and if you look at where it says

56
00:03:28,190 --> 00:03:41,120
symmetric encrypted the algorithms

57
00:03:34,410 --> 00:03:45,540
either work reverse when I encrypt or

58
00:03:41,120 --> 00:03:49,859
the forms work inversely or it's the

59
00:03:45,540 --> 00:03:52,319
keys that work in reverse so one key

60
00:03:49,859 --> 00:03:56,669
when you omit and one when you receive

61
00:03:52,319 --> 00:04:00,060
so what the key does the other reflects

62
00:03:56,669 --> 00:04:02,040
it so encryption systems when they're

63
00:04:00,060 --> 00:04:05,190
symmetric there are two kinds of

64
00:04:02,040 --> 00:04:09,870
classification we've got at the flow ie

65
00:04:05,190 --> 00:04:13,790
byte 2 bytes which were very interesting

66
00:04:09,870 --> 00:04:17,430
a few years ago and in fact there was an

67
00:04:13,790 --> 00:04:20,728
algorithm which is rc4 and that was

68
00:04:17,430 --> 00:04:24,870
untouchable it was a standard a few

69
00:04:20,728 --> 00:04:26,940
years back but a weakness was found in

70
00:04:24,870 --> 00:04:29,460
it that was published in the internet

71
00:04:26,940 --> 00:04:32,280
and nowadays

72
00:04:29,460 --> 00:04:35,580
is any sort of a handshake protocol that

73
00:04:32,280 --> 00:04:39,270
we do amongst the protocols you now will

74
00:04:35,580 --> 00:04:40,050
not find our c4 it comes around round

75
00:04:39,270 --> 00:04:41,758
number 20

76
00:04:40,050 --> 00:04:50,819
so our c4 has completely disappeared

77
00:04:41,759 --> 00:04:53,639
it's a fella on bad times another flow

78
00:04:50,819 --> 00:04:56,009
and crypt there's another one that was

79
00:04:53,639 --> 00:05:00,240
very interesting until about 2000 which

80
00:04:56,009 --> 00:05:04,919
is called a5 it's a GSM type we of

81
00:05:00,240 --> 00:05:08,550
course now working on different but it

82
00:05:04,919 --> 00:05:11,280
was vulnerable to attacks and it could a

83
00:05:08,550 --> 00:05:15,479
force our mobiles to work with GSM

84
00:05:11,280 --> 00:05:18,559
because we'd lost coverage we think it's

85
00:05:15,479 --> 00:05:21,830
a network problem well there was a

86
00:05:18,560 --> 00:05:24,360
system that could send us GSM

87
00:05:21,830 --> 00:05:28,469
information it would force us to work on

88
00:05:24,360 --> 00:05:31,409
GSM when you work with GSM the algorithm

89
00:05:28,470 --> 00:05:38,099
that was used was called a5 which is a

90
00:05:31,409 --> 00:05:41,479
bit by bit flow encryption but it was

91
00:05:38,099 --> 00:05:44,930
also a little bit unsafe because gsm

92
00:05:41,479 --> 00:05:51,270
committed the terrible crime of not

93
00:05:44,930 --> 00:05:54,060
making the code public so the code needs

94
00:05:51,270 --> 00:05:58,139
to be public and that's the second

95
00:05:54,060 --> 00:06:01,169
kerkhof principle who said that strength

96
00:05:58,139 --> 00:06:04,289
of just receiving one key everything

97
00:06:01,169 --> 00:06:06,810
else is public so they made it secret

98
00:06:04,289 --> 00:06:12,270
that algorithm they did reverse

99
00:06:06,810 --> 00:06:14,669
engineering RSA in 1999 and with a

100
00:06:12,270 --> 00:06:17,130
twenty thousand dollar machine in six

101
00:06:14,669 --> 00:06:19,560
years which of course we will never have

102
00:06:17,130 --> 00:06:23,550
but a criminal organisation has you

103
00:06:19,560 --> 00:06:24,960
could actually a break this a5 algorithm

104
00:06:23,550 --> 00:06:29,370
in just a few seconds and you could

105
00:06:24,960 --> 00:06:32,630
listen to mobile phone call so these are

106
00:06:29,370 --> 00:06:35,849
the flow algorithms that are sort of

107
00:06:32,630 --> 00:06:39,240
exiting stage left at the moment but

108
00:06:35,849 --> 00:06:42,029
they might get a second kind of youth

109
00:06:39,240 --> 00:06:42,870
because they're very fast algorithms you

110
00:06:42,029 --> 00:06:47,550
don't need to

111
00:06:42,870 --> 00:06:55,590
a block and and sign or encrypt but you

112
00:06:47,550 --> 00:07:01,410
can do a bite to bite so we've got our

113
00:06:55,590 --> 00:07:03,900
c4 that encrypts a bite to bite and with

114
00:07:01,410 --> 00:07:08,130
each bite a message let's now look at

115
00:07:03,900 --> 00:07:14,330
the next block which is called a block

116
00:07:08,130 --> 00:07:18,330
encryption we've got a remainders of

117
00:07:14,330 --> 00:07:21,479
algorithm or des which from 1996 onwards

118
00:07:18,330 --> 00:07:25,080
was no longer standard we still still

119
00:07:21,480 --> 00:07:31,230
find the Triple DES algorithm which is

120
00:07:25,080 --> 00:07:36,770
still used obviously not in Internet the

121
00:07:31,230 --> 00:07:43,110
most recent ones I've seen in Firefox

122
00:07:36,770 --> 00:07:45,419
but since 2012 2011 13 so for last 5

123
00:07:43,110 --> 00:07:48,120
years you won't get Triple DES in any

124
00:07:45,420 --> 00:07:51,870
Internet communication a different

125
00:07:48,120 --> 00:07:55,020
matter is that when you go to the

126
00:07:51,870 --> 00:07:58,200
security scheme the security setup you

127
00:07:55,020 --> 00:08:03,270
have to encode a high character level

128
00:07:58,200 --> 00:08:05,400
data you can either work with is 206 and

129
00:08:03,270 --> 00:08:07,919
somewhere 3 deserts some apps do use

130
00:08:05,400 --> 00:08:13,880
some Triple DES but it's very slow and

131
00:08:07,920 --> 00:08:19,340
it's far slower than the is algorithm so

132
00:08:13,880 --> 00:08:20,969
as you can see we're going to look at is

133
00:08:19,340 --> 00:08:23,010
algorithms because it's probably gonna

134
00:08:20,970 --> 00:08:25,980
be a started until 20 foot and then when

135
00:08:23,010 --> 00:08:27,900
we talk about public key systems or a

136
00:08:25,980 --> 00:08:30,960
symmetric is that there's two keys one

137
00:08:27,900 --> 00:08:34,590
in the emitter system and the other in

138
00:08:30,960 --> 00:08:38,850
the receiver system this was started in

139
00:08:34,590 --> 00:08:42,360
1976 went to Stanford researchers Marty

140
00:08:38,850 --> 00:08:44,159
Hellman and whittled Diffie proposed

141
00:08:42,360 --> 00:08:45,840
something that revolutionized

142
00:08:44,159 --> 00:08:49,980
cryptography which is called key

143
00:08:45,840 --> 00:08:53,670
exchange in 1976 we already had quite

144
00:08:49,980 --> 00:08:54,780
powerful algorithms such as the a sorry

145
00:08:53,670 --> 00:08:59,530
the deaths

146
00:08:54,780 --> 00:09:01,930
algorithm which had 57 key bits but

147
00:08:59,530 --> 00:09:08,920
there are others such as Lucifer used in

148
00:09:01,930 --> 00:09:12,370
the UK and military which had 158 key

149
00:09:08,920 --> 00:09:14,589
and the problem was the next we had very

150
00:09:12,370 --> 00:09:17,430
good algorithm to decipher information

151
00:09:14,590 --> 00:09:19,990
but we didn't know how to send the key

152
00:09:17,430 --> 00:09:21,880
so here I miss Anton day you're in

153
00:09:19,990 --> 00:09:24,400
Madrid and how can they send me the key

154
00:09:21,880 --> 00:09:25,840
there they brought it by hand which is

155
00:09:24,400 --> 00:09:27,939
the sort of thing that's happened with

156
00:09:25,840 --> 00:09:33,250
the Enigma Sheen in the Second World War

157
00:09:27,940 --> 00:09:37,900
but otherwise there was no definition

158
00:09:33,250 --> 00:09:42,400
we're falling so in a protocol system

159
00:09:37,900 --> 00:09:48,090
they looked at a way of exchanging a key

160
00:09:42,400 --> 00:09:50,410
between emitter and receiver in a

161
00:09:48,090 --> 00:09:53,830
computational manner of course you can

162
00:09:50,410 --> 00:09:58,630
break it but in practice you actually

163
00:09:53,830 --> 00:10:01,390
can't if you use the keys where the 2048

164
00:09:58,630 --> 00:10:04,660
bits today if you want to try it

165
00:10:01,390 --> 00:10:11,310
these algorithms the only solution would

166
00:10:04,660 --> 00:10:14,740
have a be a brute-force attack but it's

167
00:10:11,310 --> 00:10:18,849
virtually only the way of breaking them

168
00:10:14,740 --> 00:10:21,700
so it's because it's an exponential one

169
00:10:18,850 --> 00:10:23,950
so it's the number goes up and the

170
00:10:21,700 --> 00:10:31,110
numbers gets much much bigger so we've

171
00:10:23,950 --> 00:10:36,130
got this int if you try to buy a key

172
00:10:31,110 --> 00:10:39,760
which is simple similar to trying to

173
00:10:36,130 --> 00:10:42,820
break a key an aes key we took millions

174
00:10:39,760 --> 00:10:47,290
and millions of attempts and we wouldn't

175
00:10:42,820 --> 00:10:49,000
have the ability and we're not talking

176
00:10:47,290 --> 00:10:52,329
about Quantic computation that's a

177
00:10:49,000 --> 00:10:55,960
different kettle of fish with currently

178
00:10:52,330 --> 00:10:57,870
current machines it's virtually

179
00:10:55,960 --> 00:10:59,650
impossible because you can't attack

180
00:10:57,870 --> 00:11:03,430
cryptography you cannot avoid

181
00:10:59,650 --> 00:11:04,930
cryptography so we can have

182
00:11:03,430 --> 00:11:07,870
man-in-the-middle but you don't actually

183
00:11:04,930 --> 00:11:08,359
break the algorithm but you just break

184
00:11:07,870 --> 00:11:10,850
through

185
00:11:08,360 --> 00:11:14,120
how the algorithm is implemented when

186
00:11:10,850 --> 00:11:19,880
you exchange the key so here we've got

187
00:11:14,120 --> 00:11:20,750
these two keys one in the center one in

188
00:11:19,880 --> 00:11:24,350
the receiver

189
00:11:20,750 --> 00:11:27,260
they're mathematically one the reverse

190
00:11:24,350 --> 00:11:33,829
of the other and you can't divide them

191
00:11:27,260 --> 00:11:37,550
you it's if you try to divide them we're

192
00:11:33,829 --> 00:11:40,609
using with whole numbers and it just

193
00:11:37,550 --> 00:11:44,779
doesn't work you can't divide but you

194
00:11:40,610 --> 00:11:48,880
can by multiply it but you can multiply

195
00:11:44,779 --> 00:11:52,579
it by a minus one which means that some

196
00:11:48,880 --> 00:11:54,019
numbers are the reverse that's the

197
00:11:52,579 --> 00:11:57,109
difference between a public and a

198
00:11:54,019 --> 00:12:00,920
private key but what one key does the

199
00:11:57,110 --> 00:12:05,480
other undoes so you've got this

200
00:12:00,920 --> 00:12:06,979
exponentiation system between them and

201
00:12:05,480 --> 00:12:08,950
what exponentiation does is it

202
00:12:06,980 --> 00:12:13,040
multiplies by turn up by a number

203
00:12:08,950 --> 00:12:16,339
elevated to n with the exchange of key

204
00:12:13,040 --> 00:12:19,250
or my private key if what I've got a

205
00:12:16,339 --> 00:12:22,519
digital signature but it's always a

206
00:12:19,250 --> 00:12:25,370
number elevated to an exponential and

207
00:12:22,519 --> 00:12:28,579
reduced to a module a public module you

208
00:12:25,370 --> 00:12:33,920
all know the public module what happens

209
00:12:28,579 --> 00:12:41,930
is you don't need to pay piq and between

210
00:12:33,920 --> 00:12:44,540
the two we've got RSA the d H and we've

211
00:12:41,930 --> 00:12:49,310
also got L come out algorithm it's

212
00:12:44,540 --> 00:12:52,130
fairly complex but they basically do the

213
00:12:49,310 --> 00:12:54,829
same thing in the case of us RSA now

214
00:12:52,130 --> 00:12:58,579
them how they do it confidentially or

215
00:12:54,829 --> 00:13:03,170
you have to digitally sign it and then

216
00:12:58,579 --> 00:13:05,390
we've got the sum stroke product way of

217
00:13:03,170 --> 00:13:09,229
doing things we've got the search of the

218
00:13:05,390 --> 00:13:13,790
famous MH rucksacks image bags and

219
00:13:09,230 --> 00:13:18,860
elliptic curves and it's only if you've

220
00:13:13,790 --> 00:13:22,069
got you if you've got these this Harvard

221
00:13:18,860 --> 00:13:26,149
device that you can start the

222
00:13:22,070 --> 00:13:29,570
the hard drive and then go on to the RAM

223
00:13:26,149 --> 00:13:32,509
so it's a deciphered and it'll run so

224
00:13:29,570 --> 00:13:38,149
here we've got the RSA algorithm and the

225
00:13:32,509 --> 00:13:41,600
AES algorithm why well because the issue

226
00:13:38,149 --> 00:13:44,240
of elliptic curves is have greater

227
00:13:41,600 --> 00:13:50,449
preponderance with the key exchanges

228
00:13:44,240 --> 00:13:54,920
between clients and servers you start to

229
00:13:50,449 --> 00:13:58,639
see the D H type but they're still this

230
00:13:54,920 --> 00:14:01,849
RSA algorithm and if you go to the in

231
00:13:58,639 --> 00:14:06,230
sieve a page you can see that we're

232
00:14:01,850 --> 00:14:11,930
working with TLS and you see we've got

233
00:14:06,230 --> 00:14:13,690
RSA with algorithm aes-128 and then you

234
00:14:11,930 --> 00:14:18,380
can see CBC sha

235
00:14:13,690 --> 00:14:23,209
so that's why I chosen RSA and AES just

236
00:14:18,380 --> 00:14:25,819
to do a little workshop and I've

237
00:14:23,209 --> 00:14:27,529
uploaded a little document on to

238
00:14:25,819 --> 00:14:29,990
internet so if you want to repeat this

239
00:14:27,529 --> 00:14:32,720
lesson at home you can do so so that's

240
00:14:29,990 --> 00:14:34,360
why we've used RSA and AES because

241
00:14:32,720 --> 00:14:38,990
that's what we're going to look at in

242
00:14:34,360 --> 00:14:42,800
this workshop so we're going to look at

243
00:14:38,990 --> 00:14:49,490
a es just briefly then we'll watch a

244
00:14:42,800 --> 00:14:53,620
video animated video which has been

245
00:14:49,490 --> 00:15:01,880
organized by some of our students and

246
00:14:53,620 --> 00:15:06,200
it'll be published 20 to 3 months there

247
00:15:01,880 --> 00:15:09,710
are different blocks difference day

248
00:15:06,200 --> 00:15:12,800
pieces to it it's quite easy to

249
00:15:09,710 --> 00:15:15,200
understand how the AES works quite

250
00:15:12,800 --> 00:15:15,949
graphically difficult to understand how

251
00:15:15,200 --> 00:15:18,230
it works

252
00:15:15,950 --> 00:15:20,090
method mathematically then there you

253
00:15:18,230 --> 00:15:23,360
have to know about two polynomials

254
00:15:20,090 --> 00:15:27,670
that's far more complex if anybody wants

255
00:15:23,360 --> 00:15:32,270
to know about it in the address the next

256
00:15:27,670 --> 00:15:35,810
talk you can see my email address and an

257
00:15:32,270 --> 00:15:37,970
article that I wrote which talks about

258
00:15:35,810 --> 00:15:40,040
the polynomials and how they work with

259
00:15:37,970 --> 00:15:42,890
the AES it's a bit of a pain but if you

260
00:15:40,040 --> 00:15:47,240
want to see it you can do so but it's

261
00:15:42,890 --> 00:15:52,090
easy to understand it graphically AES so

262
00:15:47,240 --> 00:15:56,300
I'm going to introduce in 1997 NIST

263
00:15:52,090 --> 00:15:59,630
didn't certify des every four to five

264
00:15:56,300 --> 00:16:06,910
years it had its life validated and but

265
00:15:59,630 --> 00:16:10,600
why because in 1997-1998 self attacks

266
00:16:06,910 --> 00:16:14,719
called death challenge started in which

267
00:16:10,600 --> 00:16:17,150
RSA the a symmetric cryptography company

268
00:16:14,720 --> 00:16:20,390
which was the de facto standard at that

269
00:16:17,150 --> 00:16:24,760
time in still is today adapted to the

270
00:16:20,390 --> 00:16:33,140
size of the key we're talking about key

271
00:16:24,760 --> 00:16:37,280
150 128 bits and because 512 bits was

272
00:16:33,140 --> 00:16:40,040
considered stratospheric so RS a what it

273
00:16:37,280 --> 00:16:44,120
did was it adapted to the times and

274
00:16:40,040 --> 00:16:47,810
gradually increased key size so a few

275
00:16:44,120 --> 00:16:49,610
years ago we used a thousand 28 bits now

276
00:16:47,810 --> 00:16:51,949
it's a thousand and 48 bits

277
00:16:49,610 --> 00:16:55,750
I know algorithmically that's fairly

278
00:16:51,950 --> 00:17:00,610
poor would be better to make a new

279
00:16:55,750 --> 00:17:03,200
algorithm we've just actually as sigh in

280
00:17:00,610 --> 00:17:04,819
increased the size of the key it's like

281
00:17:03,200 --> 00:17:08,240
getting a bigger bike instead of buying

282
00:17:04,819 --> 00:17:10,210
a car or a motorbike what we've just

283
00:17:08,240 --> 00:17:12,700
done is

284
00:17:10,210 --> 00:17:15,470
making progress that attacks some more

285
00:17:12,700 --> 00:17:17,000
difficult but the algorithm is the same

286
00:17:15,470 --> 00:17:17,420
one that we've been using forty years

287
00:17:17,000 --> 00:17:21,589
ago

288
00:17:17,420 --> 00:17:24,050
let's see why why didn't mist

289
00:17:21,589 --> 00:17:27,470
certify des because there was a massive

290
00:17:24,050 --> 00:17:31,010
attack that was known at an internet

291
00:17:27,470 --> 00:17:35,900
level because an RS a complaint that

292
00:17:31,010 --> 00:17:38,020
they had colleagues in SSL so when we

293
00:17:35,900 --> 00:17:42,530
know that this a symmetric cryptography

294
00:17:38,020 --> 00:17:45,110
we use RSA and RSA has adapted to the

295
00:17:42,530 --> 00:17:48,110
need so with increase the key twelve

296
00:17:45,110 --> 00:17:51,949
twenty four forty and now a thousand of

297
00:17:48,110 --> 00:17:56,959
48 but des is an algorithm we're so

298
00:17:51,950 --> 00:18:01,070
criticized a lot at the time and and the

299
00:17:56,960 --> 00:18:05,240
key was actually downloaded that had

300
00:18:01,070 --> 00:18:10,250
been created this far the key and it

301
00:18:05,240 --> 00:18:13,340
went from 128 to 64 bits and NSA or NIST

302
00:18:10,250 --> 00:18:19,610
said that this key could be typed into

303
00:18:13,340 --> 00:18:22,459
IC IC at that time wasn't extended more

304
00:18:19,610 --> 00:18:26,659
than a hundred and twenty-eight and the

305
00:18:22,460 --> 00:18:30,440
eighth bit was a pariah bit so it just

306
00:18:26,660 --> 00:18:35,950
got rid of each the eighth character of

307
00:18:30,440 --> 00:18:40,220
each bit so the drop is astronomic from

308
00:18:35,950 --> 00:18:42,590
128 56 there was some justifications

309
00:18:40,220 --> 00:18:47,720
that they said that they were warranted

310
00:18:42,590 --> 00:18:49,970
that for banking operations for getting

311
00:18:47,720 --> 00:18:52,910
money out of cash points were talking

312
00:18:49,970 --> 00:18:55,070
about in 1974 we're talking about the

313
00:18:52,910 --> 00:18:58,310
first semiconductors that consumed a lot

314
00:18:55,070 --> 00:19:01,340
that heated up and it was very very

315
00:18:58,310 --> 00:19:06,050
difficult so it wasn't worth it that's

316
00:19:01,340 --> 00:19:09,949
why they left to the key that's what

317
00:19:06,050 --> 00:19:12,290
some people think but others think that

318
00:19:09,950 --> 00:19:16,190
they just wanted to have control of this

319
00:19:12,290 --> 00:19:19,550
kind of algorithm if you want to talk

320
00:19:16,190 --> 00:19:21,260
about paranoia later there's a lot of

321
00:19:19,550 --> 00:19:24,889
paranoia's out there

322
00:19:21,260 --> 00:19:27,260
and today we've left them aside

323
00:19:24,890 --> 00:19:30,110
but paranoia and cryptography have

324
00:19:27,260 --> 00:19:33,620
always existed ever since Alan Turing's

325
00:19:30,110 --> 00:19:36,469
time and NSA for many many years what it

326
00:19:33,620 --> 00:19:40,340
tried to do was to prohibit everything

327
00:19:36,470 --> 00:19:42,200
that they weren't able to do and then

328
00:19:40,340 --> 00:19:44,750
they realized that the best thing to do

329
00:19:42,200 --> 00:19:49,160
was to have the best mathematicians in

330
00:19:44,750 --> 00:19:50,330
the world in the NSA so so they decided

331
00:19:49,160 --> 00:19:52,970
that the best defense is an attack at

332
00:19:50,330 --> 00:20:00,949
the end of the day this was considered

333
00:19:52,970 --> 00:20:05,890
safe but very slow they called a public

334
00:20:00,950 --> 00:20:08,870
tender to the new symmetric encryption

335
00:20:05,890 --> 00:20:14,590
and that became world standard at the

336
00:20:08,870 --> 00:20:18,979
AES in October 2000 after this two-year

337
00:20:14,590 --> 00:20:22,699
public tender it was decided that a EES

338
00:20:18,980 --> 00:20:24,410
would be the standard algorithm but from

339
00:20:22,700 --> 00:20:26,450
the time-it standard until it's used

340
00:20:24,410 --> 00:20:29,720
massively seven eight or ten years you

341
00:20:26,450 --> 00:20:37,940
might go by so we don't start seeing AES

342
00:20:29,720 --> 00:20:43,520
algorithm which until 2008 2009 and it's

343
00:20:37,940 --> 00:20:47,420
been a standard since 2000 so now what's

344
00:20:43,520 --> 00:20:57,500
gonna happen with the hash function was

345
00:20:47,420 --> 00:20:58,730
probably frowned upon so but the

346
00:20:57,500 --> 00:21:00,920
operations are the same if the

347
00:20:58,730 --> 00:21:03,230
algorithms are badly made it's gonna

348
00:21:00,920 --> 00:21:05,780
still carry on working badly but as

349
00:21:03,230 --> 00:21:08,300
there are many more vectors in the

350
00:21:05,780 --> 00:21:10,850
hashes much bigger but it could still be

351
00:21:08,300 --> 00:21:14,450
attract there's a now a new standard

352
00:21:10,850 --> 00:21:16,340
which is called for this when is it

353
00:21:14,450 --> 00:21:21,050
going to be used I don't know maybe not

354
00:21:16,340 --> 00:21:23,840
until 2024 2025 but what I mean is

355
00:21:21,050 --> 00:21:26,720
between an algorithm becoming a standard

356
00:21:23,840 --> 00:21:30,980
and then you being used 10 dead 10 years

357
00:21:26,720 --> 00:21:33,300
can go by but now if you go to Internet

358
00:21:30,980 --> 00:21:36,760
and any TLS communication the

359
00:21:33,300 --> 00:21:38,740
algorithm uses AES but actually until

360
00:21:36,760 --> 00:21:41,350
four or five years ago other algorithms

361
00:21:38,740 --> 00:21:47,440
were still used right I'm just gonna

362
00:21:41,350 --> 00:21:50,530
explain why a yes has become so popular

363
00:21:47,440 --> 00:21:54,100
and why it's gonna be the standard of

364
00:21:50,530 --> 00:21:56,170
2040 and instead of looking at slides

365
00:21:54,100 --> 00:21:59,620
will actually watch a video which is a

366
00:21:56,170 --> 00:22:03,760
lot easier to understand so what

367
00:21:59,620 --> 00:22:07,030
happened with DES well there was a world

368
00:22:03,760 --> 00:22:11,250
attack called a death challenge and in

369
00:22:07,030 --> 00:22:13,960
just two years between 1997 and 1999

370
00:22:11,250 --> 00:22:16,870
there are all sorts of network of texts

371
00:22:13,960 --> 00:22:19,420
because a symmetric algorithm can be

372
00:22:16,870 --> 00:22:21,489
easily attacked because the key is

373
00:22:19,420 --> 00:22:24,100
though it's a number so I can look for

374
00:22:21,490 --> 00:22:25,390
it myself so I look for it to know the

375
00:22:24,100 --> 00:22:27,429
different fields it's not too

376
00:22:25,390 --> 00:22:29,860
complicated but if we all look at it and

377
00:22:27,430 --> 00:22:32,500
each one goes to a room until they find

378
00:22:29,860 --> 00:22:33,909
the key and then they tell us how I

379
00:22:32,500 --> 00:22:38,440
found it on the fourth floor here it is

380
00:22:33,910 --> 00:22:41,320
and that's what happened so it's easy to

381
00:22:38,440 --> 00:22:44,620
do a mass attack and that's the problem

382
00:22:41,320 --> 00:22:49,210
with these algorithms that's why we need

383
00:22:44,620 --> 00:22:51,100
to have a key today of 128 bits Oh more

384
00:22:49,210 --> 00:22:53,560
or less otherwise it can be broken

385
00:22:51,100 --> 00:22:55,689
because it's divided by n so the end of

386
00:22:53,560 --> 00:22:58,600
all of this what we've decided at the

387
00:22:55,690 --> 00:23:01,240
end of the January 1999 the key was

388
00:22:58,600 --> 00:23:06,250
broken in less than a day algorithms

389
00:23:01,240 --> 00:23:08,230
that supposedly have a strength that are

390
00:23:06,250 --> 00:23:13,060
gonna last from millions and millions of

391
00:23:08,230 --> 00:23:15,220
years can be broken in one day just 100

392
00:23:13,060 --> 00:23:17,620
people connected to internet they

393
00:23:15,220 --> 00:23:21,820
managed to break it in just less than 24

394
00:23:17,620 --> 00:23:24,310
hours so of course that requires time

395
00:23:21,820 --> 00:23:26,200
and this is the number of a keys per

396
00:23:24,310 --> 00:23:30,760
second that were being calculated during

397
00:23:26,200 --> 00:23:38,800
that time in 1999 so they managed to get

398
00:23:30,760 --> 00:23:41,309
to a rate of 150 million per year I like

399
00:23:38,800 --> 00:23:44,049
this and people say

400
00:23:41,309 --> 00:23:45,610
why is it so secure today to work with

401
00:23:44,049 --> 00:23:48,850
hundred twenty eight bits why don't we

402
00:23:45,610 --> 00:23:52,570
use 256 bits you have to realize what a

403
00:23:48,850 --> 00:23:59,230
key actually means the DES algorithm

404
00:23:52,570 --> 00:24:02,500
that was broken in 1999 we had to go

405
00:23:59,230 --> 00:24:03,730
through the key the keys just one if it

406
00:24:02,500 --> 00:24:06,669
was four bits it would be a number

407
00:24:03,730 --> 00:24:09,490
between not and fifteen if we trial it

408
00:24:06,669 --> 00:24:11,049
and I think of an naught to fifteen and

409
00:24:09,490 --> 00:24:12,880
you say so eight and I say no it's if

410
00:24:11,049 --> 00:24:14,320
thought knows that five yes if we do

411
00:24:12,880 --> 00:24:17,940
that on several occasions so how many

412
00:24:14,320 --> 00:24:20,799
times are you gonna ask on average eight

413
00:24:17,940 --> 00:24:22,870
maybe sometimes you'll get it right the

414
00:24:20,799 --> 00:24:25,270
first time and sometimes you'll get it

415
00:24:22,870 --> 00:24:27,580
right after four times but on average if

416
00:24:25,270 --> 00:24:30,100
the numbers got four bits between no 115

417
00:24:27,580 --> 00:24:33,399
then on average every eight questions

418
00:24:30,100 --> 00:24:37,149
you're gonna get probably the right

419
00:24:33,399 --> 00:24:40,809
answer but in this case in 22 hours

420
00:24:37,149 --> 00:24:46,570
they'd need 40 hours so the key space

421
00:24:40,809 --> 00:24:48,639
goes from 0 0 0 2 ffff so you're never

422
00:24:46,570 --> 00:24:51,668
going to go through the whole of the key

423
00:24:48,640 --> 00:24:54,850
space if you find it easily you get it

424
00:24:51,669 --> 00:24:59,649
quickly but otherwise not so half and

425
00:24:54,850 --> 00:25:02,139
half average you take about 40 hours but

426
00:24:59,649 --> 00:25:05,620
then you've got the law which says that

427
00:25:02,140 --> 00:25:10,299
every year and a half a computation

428
00:25:05,620 --> 00:25:14,770
capacity is doubled but there's a limit

429
00:25:10,299 --> 00:25:18,100
to that because the more law can be

430
00:25:14,770 --> 00:25:22,360
multiplied by a hundred or hundred

431
00:25:18,100 --> 00:25:24,219
million but you can still need all these

432
00:25:22,360 --> 00:25:27,820
years so with this computational

433
00:25:24,220 --> 00:25:29,980
capacity of 1999 with everything that

434
00:25:27,820 --> 00:25:32,559
happened back in 1999 and you multiply

435
00:25:29,980 --> 00:25:34,510
it by several million millions every

436
00:25:32,559 --> 00:25:38,500
time a year goes back according to

437
00:25:34,510 --> 00:25:42,149
Moore's law doesn't a multiply by two

438
00:25:38,500 --> 00:25:47,470
but several million every two years so

439
00:25:42,149 --> 00:25:50,408
this X number comes so big that the only

440
00:25:47,470 --> 00:25:52,990
thing you can do is put it to two

441
00:25:50,409 --> 00:25:57,670
elevator to 64 do you know what two two

442
00:25:52,990 --> 00:26:00,940
vated 64 is well the the size of the

443
00:25:57,670 --> 00:26:04,480
universe is too elevated to 37 and it's

444
00:26:00,940 --> 00:26:07,900
really impossible here to break so we're

445
00:26:04,480 --> 00:26:10,300
talking about Quantic computation it's

446
00:26:07,900 --> 00:26:12,250
so it's virtually impossible to break

447
00:26:10,300 --> 00:26:14,770
this encryption so it's meaningless to

448
00:26:12,250 --> 00:26:19,630
say oh wouldn't it be great if all we

449
00:26:14,770 --> 00:26:26,410
had encryptions that went up from atom

450
00:26:19,630 --> 00:26:30,100
28 bits listener point even if you had

451
00:26:26,410 --> 00:26:31,600
all the world's computational centers

452
00:26:30,100 --> 00:26:33,428
working for millions and millions of

453
00:26:31,600 --> 00:26:38,290
years it would be possible to get the

454
00:26:33,429 --> 00:26:41,260
average because Security's computational

455
00:26:38,290 --> 00:26:43,420
which means that probably it's very

456
00:26:41,260 --> 00:26:47,890
difficult probabilistic ly it's

457
00:26:43,420 --> 00:26:53,170
difficult to break the key and and until

458
00:26:47,890 --> 00:26:54,160
that will happen day after day okay

459
00:26:53,170 --> 00:26:56,200
that's what it is

460
00:26:54,160 --> 00:26:59,260
it's virtually virtually impossible it's

461
00:26:56,200 --> 00:27:02,740
very very difficult to break this unless

462
00:26:59,260 --> 00:27:06,040
you've got brute force so let's look at

463
00:27:02,740 --> 00:27:10,870
this on a video it's far more fun I've

464
00:27:06,040 --> 00:27:14,350
got a video here somewhere I've

465
00:27:10,870 --> 00:27:16,840
downloaded two videos on to the crypto

466
00:27:14,350 --> 00:27:22,149
red page and the document that we're

467
00:27:16,840 --> 00:27:24,850
gonna they use a little later on if you

468
00:27:22,150 --> 00:27:30,130
type in what you can see in the screen

469
00:27:24,850 --> 00:27:34,090
you'll find it I saw there was a mistake

470
00:27:30,130 --> 00:27:37,929
in the middle of video so I changed it

471
00:27:34,090 --> 00:27:42,520
but also when you download it

472
00:27:37,929 --> 00:27:44,650
I remove to the accent and if you so if

473
00:27:42,520 --> 00:27:48,879
you go to Twitter it won't find you this

474
00:27:44,650 --> 00:27:51,460
page so I've got to have two documents

475
00:27:48,880 --> 00:27:55,240
one with the accent and one without the

476
00:27:51,460 --> 00:28:00,160
accent but anyway you can get this

477
00:27:55,240 --> 00:28:04,310
document we've downloaded one is about

478
00:28:00,160 --> 00:28:10,920
the AES algorithm and the second part

479
00:28:04,310 --> 00:28:15,480
will be about RSA so any questions

480
00:28:10,920 --> 00:28:19,580
before watching this video yes please

481
00:28:15,480 --> 00:28:19,580
there's a microphone out there somewhere

482
00:28:20,570 --> 00:28:27,200
other otherwise it's very tiring if it's

483
00:28:24,630 --> 00:28:27,200
just me talking

484
00:28:37,290 --> 00:28:57,100
otherwise it wouldn't be recorded the

485
00:28:39,340 --> 00:29:01,709
question and we want to record it see

486
00:28:57,100 --> 00:29:05,830
okay good morning you're talking about

487
00:29:01,710 --> 00:29:07,870
Quantic computers but without using this

488
00:29:05,830 --> 00:29:11,490
kind of technology although some

489
00:29:07,870 --> 00:29:14,678
companies do have it what about these

490
00:29:11,490 --> 00:29:17,380
CPUs that are you be used for Bitcoin

491
00:29:14,679 --> 00:29:21,120
mining that has been improved quite a

492
00:29:17,380 --> 00:29:21,120
lot yes you're right

493
00:29:21,419 --> 00:29:32,860
the CPUs which are far faster than PCs

494
00:29:29,890 --> 00:29:34,360
but they still aren't as fast as Quantic

495
00:29:32,860 --> 00:29:37,500
computers Quantic computers is a

496
00:29:34,360 --> 00:29:40,659
different ballgame this is something

497
00:29:37,500 --> 00:29:42,669
they're in another talk I've spoken

498
00:29:40,660 --> 00:29:43,960
about in Latin America in Argentina and

499
00:29:42,669 --> 00:29:45,190
this is something because we don't know

500
00:29:43,960 --> 00:29:50,710
it's gonna happen in the future with

501
00:29:45,190 --> 00:29:53,260
these very in a very short space of time

502
00:29:50,710 --> 00:29:55,660
who's gonna know about cryptography if

503
00:29:53,260 --> 00:29:59,260
everything's Quantic or either a

504
00:29:55,660 --> 00:30:01,480
physician are there physicists they're

505
00:29:59,260 --> 00:30:04,270
gonna have to study quantum physics in

506
00:30:01,480 --> 00:30:09,610
second or third a year but a few years

507
00:30:04,270 --> 00:30:13,570
ago I brought Marty Hellman and he said

508
00:30:09,610 --> 00:30:15,668
that by the year 2030 and we may he may

509
00:30:13,570 --> 00:30:18,340
have got this wrong because there are

510
00:30:15,669 --> 00:30:21,660
many companies such as Amazon Google and

511
00:30:18,340 --> 00:30:25,689
and large big governments and using

512
00:30:21,660 --> 00:30:27,220
quantum computing but for a while these

513
00:30:25,690 --> 00:30:29,110
quantum computers haven't been very

514
00:30:27,220 --> 00:30:31,150
stable and we're not talking about a PC

515
00:30:29,110 --> 00:30:34,059
we're not talking about something that

516
00:30:31,150 --> 00:30:36,820
has cost four or five thousand dollars

517
00:30:34,059 --> 00:30:38,440
it's far more complex than that but

518
00:30:36,820 --> 00:30:41,678
everything today is based on

519
00:30:38,440 --> 00:30:45,150
computational security everything is

520
00:30:41,679 --> 00:30:45,150
done in parallel

521
00:30:46,060 --> 00:30:54,440
you can everything is done in parallels

522
00:30:52,250 --> 00:30:57,920
you could get hundreds of thousands of

523
00:30:54,440 --> 00:30:59,900
trillions of calculations per second

524
00:30:57,920 --> 00:31:02,990
and this of course is going to change

525
00:30:59,900 --> 00:31:05,630
the worlds of cryptography in the future

526
00:31:02,990 --> 00:31:08,180
and I'm hoping just in 10 to 15 years

527
00:31:05,630 --> 00:31:12,250
for now like ie for the day after

528
00:31:08,180 --> 00:31:15,080
tomorrow many banks are concerned about

529
00:31:12,250 --> 00:31:20,320
the security side of things because as I

530
00:31:15,080 --> 00:31:20,320
said they could have a problem which

531
00:31:23,020 --> 00:31:27,790
what I'm gonna explain to you now I mean

532
00:31:29,740 --> 00:31:37,150
you know the days may be numbered for

533
00:31:32,750 --> 00:31:39,680
this kind of research in Europe its 2020

534
00:31:37,150 --> 00:31:43,670
almost all the projects in cryptography

535
00:31:39,680 --> 00:31:46,670
are in post one quantum cryptography

536
00:31:43,670 --> 00:31:52,520
post quantum what will we do after the

537
00:31:46,670 --> 00:32:00,740
war after the fourth world war all these

538
00:31:52,520 --> 00:32:04,970
systems today very powerful are eagerly

539
00:32:00,740 --> 00:32:07,880
in the conventional machines the ones

540
00:32:04,970 --> 00:32:10,790
that we know but when talking about

541
00:32:07,880 --> 00:32:15,350
quantum matters that will be different

542
00:32:10,790 --> 00:32:16,480
I'm not an expert on that it's quite

543
00:32:15,350 --> 00:32:22,100
complex

544
00:32:16,480 --> 00:32:25,280
but many people are working with qubits

545
00:32:22,100 --> 00:32:29,270
and the computation is totally parallel

546
00:32:25,280 --> 00:32:34,070
I don't know what will happen in the

547
00:32:29,270 --> 00:32:36,830
future I have my doubts but I think

548
00:32:34,070 --> 00:32:39,129
people are interested by this it's about

549
00:32:36,830 --> 00:32:39,129
philosophy

550
00:32:39,150 --> 00:32:47,950
today people speak about this quantum

551
00:32:43,390 --> 00:32:50,049
exchange with a fiber and instead of

552
00:32:47,950 --> 00:32:52,750
bitchy bytes it's photons and this

553
00:32:50,049 --> 00:32:55,750
exists commercially already but there

554
00:32:52,750 --> 00:33:01,870
are no algorithms to sign and encrypt in

555
00:32:55,750 --> 00:33:04,110
a quantum way when this happens the key

556
00:33:01,870 --> 00:33:07,750
exchange will not be computationally

557
00:33:04,110 --> 00:33:10,799
secure but mathematically secure when

558
00:33:07,750 --> 00:33:13,150
you know perfectly between you and me we

559
00:33:10,799 --> 00:33:15,010
exchange the key then we will

560
00:33:13,150 --> 00:33:19,840
communicate nobody will intervene there

561
00:33:15,010 --> 00:33:23,158
if anybody reads and sees there's bends

562
00:33:19,840 --> 00:33:26,620
the vertical Perl polarized or the

563
00:33:23,159 --> 00:33:32,530
horizontal polarization you will see if

564
00:33:26,620 --> 00:33:34,330
anybody has entered but states are not

565
00:33:32,530 --> 00:33:38,799
going to allow for you to have a hundred

566
00:33:34,330 --> 00:33:42,549
percent security so but quantum

567
00:33:38,799 --> 00:33:45,370
techniques are being researched maybe in

568
00:33:42,549 --> 00:33:47,950
five to ten years we'll have that not

569
00:33:45,370 --> 00:33:53,260
for us but but for big governments and

570
00:33:47,950 --> 00:33:56,940
for big companies and bodies and maybe

571
00:33:53,260 --> 00:33:59,679
some criminal bodies too

572
00:33:56,940 --> 00:34:02,950
unfortunately I can't answer you this

573
00:33:59,679 --> 00:34:06,669
quiz question any more questions so we

574
00:34:02,950 --> 00:34:17,918
will talk about AES algorithm let's see

575
00:34:06,669 --> 00:34:19,000
this piece the video crypto Network pill

576
00:34:17,918 --> 00:34:23,850
number 30

577
00:34:19,000 --> 00:34:29,859
how could you crypt with AES algorithm

578
00:34:23,850 --> 00:34:32,440
the birth of AES algorithm in 1997 in

579
00:34:29,859 --> 00:34:34,810
the NIST opened an international

580
00:34:32,440 --> 00:34:38,490
competition to develop a new standard

581
00:34:34,810 --> 00:34:41,980
symmetric algorithm to replace that AES

582
00:34:38,489 --> 00:34:46,888
it was fragile because there were many

583
00:34:41,980 --> 00:34:51,940
attacks sent by RSA the test challenges

584
00:34:46,889 --> 00:34:55,149
the new algorithm will be called AES 15

585
00:34:51,940 --> 00:34:59,020
candidates and after two years at the

586
00:34:55,149 --> 00:35:03,580
end of the year 2000 the winner is

587
00:34:59,020 --> 00:35:08,440
rekindled by Vincent Rickman and John

588
00:35:03,580 --> 00:35:13,630
Damon from belgian features of the AES

589
00:35:08,440 --> 00:35:19,720
algorithm is it's a advanced encryption

590
00:35:13,630 --> 00:35:27,359
standard with 128 bits this is the

591
00:35:19,720 --> 00:35:30,549
description it uses the state matrix 4x4

592
00:35:27,359 --> 00:35:33,069
16 cells or bytes are changing in value

593
00:35:30,550 --> 00:35:36,369
according to the processes executed by

594
00:35:33,070 --> 00:35:39,630
the algorithm using substitution and

595
00:35:36,369 --> 00:35:44,080
permutation techniques with polynomial

596
00:35:39,630 --> 00:35:47,290
operations in a body all the encryption

597
00:35:44,080 --> 00:35:50,170
operations are done on bytes in words of

598
00:35:47,290 --> 00:35:53,460
32 bits that are written from top to

599
00:35:50,170 --> 00:35:59,200
bottom and from the left to the right

600
00:35:53,460 --> 00:36:03,390
for 128-bit key the algorithm will do 10

601
00:35:59,200 --> 00:36:07,919
rounds of the keys 192 bits it's 12

602
00:36:03,390 --> 00:36:10,920
rounds and for 156 bits it's 14 rounds

603
00:36:07,920 --> 00:36:13,930
in each of these rounds they're

604
00:36:10,920 --> 00:36:16,360
generated key will be generated from the

605
00:36:13,930 --> 00:36:19,120
master key

606
00:36:16,360 --> 00:36:22,440
the encryption algorithm starts with a

607
00:36:19,120 --> 00:36:25,480
function called at round key with the

608
00:36:22,440 --> 00:36:30,370
sum between the message bytes and the

609
00:36:25,480 --> 00:36:32,650
key bytes for a 128-bit key 10 subkeys

610
00:36:30,370 --> 00:36:35,259
will be calculated one for each round

611
00:36:32,650 --> 00:36:39,130
and the next four operations will be

612
00:36:35,260 --> 00:36:46,090
done during nine rounds sub bytes sit

613
00:36:39,130 --> 00:36:49,210
grouse mixcolumns and a ground key only

614
00:36:46,090 --> 00:36:51,880
the operations that survives sit grouse

615
00:36:49,210 --> 00:36:55,840
and a drought key are repeated this

616
00:36:51,880 --> 00:37:01,540
gives you a matrix matrix with sixteen

617
00:36:55,840 --> 00:37:04,740
bytes which is the first cryptogram to

618
00:37:01,540 --> 00:37:08,110
the for the decryption we have to go

619
00:37:04,740 --> 00:37:13,540
just do we need to do the inverse

620
00:37:08,110 --> 00:37:15,220
inverse of the inverse mix columns of

621
00:37:13,540 --> 00:37:18,040
rouse and ground key

622
00:37:15,220 --> 00:37:20,890
so it's the other way around the sub

623
00:37:18,040 --> 00:37:25,750
bytes as it grows it makes galleons and

624
00:37:20,890 --> 00:37:28,000
around key in this a bytes operation

625
00:37:25,750 --> 00:37:30,310
there's a substitution of each of the

626
00:37:28,000 --> 00:37:33,430
sixteen bytes of the matrix through this

627
00:37:30,310 --> 00:37:36,310
table the operation three throws is a

628
00:37:33,430 --> 00:37:39,009
permutation of the rows the state rows

629
00:37:36,310 --> 00:37:41,410
of the first row doesn't turn the one

630
00:37:39,010 --> 00:37:44,620
turns one byte the second turns to

631
00:37:41,410 --> 00:37:45,609
writes and the third turns three lights

632
00:37:44,620 --> 00:37:48,130
mixed galleons

633
00:37:45,610 --> 00:37:50,110
it's a bit more complex it's multiplied

634
00:37:48,130 --> 00:37:54,000
in each of the columns of the state's

635
00:37:50,110 --> 00:37:57,310
status matrix with a fixed polynomial a

636
00:37:54,000 --> 00:38:00,400
tronky function this is the or exclusive

637
00:37:57,310 --> 00:38:03,759
sum of each round with the status matrix

638
00:38:00,400 --> 00:38:07,120
values the generation of the keys of

639
00:38:03,760 --> 00:38:09,550
each round of the AES algorithm to

640
00:38:07,120 --> 00:38:15,430
generate that and some keys necessary

641
00:38:09,550 --> 00:38:19,540
for a figure of 128 bits we need the X

642
00:38:15,430 --> 00:38:22,720
key expansion function to modify the

643
00:38:19,540 --> 00:38:25,660
status and matrix through the wrote war

644
00:38:22,720 --> 00:38:29,529
operation turning the first

645
00:38:25,660 --> 00:38:31,750
a bite of the matrix then applied to

646
00:38:29,530 --> 00:38:33,369
this resulting words the survived

647
00:38:31,750 --> 00:38:36,160
operation and later on

648
00:38:33,369 --> 00:38:39,549
summing or exclusive this words were the

649
00:38:36,160 --> 00:38:42,759
word that is three positions behind with

650
00:38:39,549 --> 00:38:46,960
a vector called as Arkham different for

651
00:38:42,760 --> 00:38:49,869
each of the ten rounds it originated the

652
00:38:46,960 --> 00:38:52,210
new word of the first key then three

653
00:38:49,869 --> 00:38:55,240
times the summer exclusive is done

654
00:38:52,210 --> 00:38:58,510
between the New World and the with those

655
00:38:55,240 --> 00:39:00,939
that is located three spaces behind it's

656
00:38:58,510 --> 00:39:02,559
that they commit mmm look here

657
00:39:00,940 --> 00:39:05,230
round one this process process is

658
00:39:02,559 --> 00:39:18,750
repeated until we get the ten necessary

659
00:39:05,230 --> 00:39:18,750
subkeys it's quite easy to understand

660
00:39:20,309 --> 00:39:27,549
the work done by a es algorithm it's not

661
00:39:24,010 --> 00:39:31,890
that complex if you want to see it how

662
00:39:27,549 --> 00:39:34,779
the sub bytes function is obtained

663
00:39:31,890 --> 00:39:41,980
there are mathematics behind it but it's

664
00:39:34,779 --> 00:39:46,150
just a table of 256 characters and extra

665
00:39:41,980 --> 00:39:48,910
decimal and the entry 1f is like the

666
00:39:46,150 --> 00:39:51,670
exit beat with three that's all it's

667
00:39:48,910 --> 00:39:56,440
very easy to do the operations around

668
00:39:51,670 --> 00:40:00,490
key is the église XOR operation type by

669
00:39:56,440 --> 00:40:03,880
two by two 32 number of words because

670
00:40:00,490 --> 00:40:06,759
the windows calculator accepts the 64

671
00:40:03,880 --> 00:40:09,490
bits and the only complex operation is

672
00:40:06,760 --> 00:40:12,279
multiplying by each of the columns but

673
00:40:09,490 --> 00:40:15,189
with this original Mac matrix and the

674
00:40:12,279 --> 00:40:19,000
generation of sub keys it's easily

675
00:40:15,190 --> 00:40:25,000
understood it's not complex the AES

676
00:40:19,000 --> 00:40:27,130
algorithm has mathematics underneath so

677
00:40:25,000 --> 00:40:28,560
it's quite secure on the mathematical

678
00:40:27,130 --> 00:40:33,670
side

679
00:40:28,560 --> 00:40:37,150
before showing a software that we can

680
00:40:33,670 --> 00:40:39,310
play with with OPCC or we can check that

681
00:40:37,150 --> 00:40:41,190
the operations are not really the ones

682
00:40:39,310 --> 00:40:44,340
they say we're talking about

683
00:40:41,190 --> 00:40:49,420
computational or mathematical security

684
00:40:44,340 --> 00:40:51,820
in quantum cryptography maybe we will

685
00:40:49,420 --> 00:40:54,300
have a security that it will not only be

686
00:40:51,820 --> 00:40:58,350
computational math but mathematic

687
00:40:54,300 --> 00:40:58,350
securities are a hundred percent sure

688
00:40:59,190 --> 00:41:07,690
today we have the computational security

689
00:41:03,750 --> 00:41:12,520
it's the computational time that we you

690
00:41:07,690 --> 00:41:15,730
need to break a key it's a lot let's

691
00:41:12,520 --> 00:41:18,460
imagine 256 one more bit you multiply by

692
00:41:15,730 --> 00:41:20,950
two the effort and the time by two if it

693
00:41:18,460 --> 00:41:24,280
was linear in the case of AES it's

694
00:41:20,950 --> 00:41:30,430
linear but in RSA it's not linear but

695
00:41:24,280 --> 00:41:33,430
means that it's attack by force just

696
00:41:30,430 --> 00:41:37,359
timed that it's needed somebody could

697
00:41:33,430 --> 00:41:40,450
find a cryptogram knowing the packages

698
00:41:37,359 --> 00:41:45,279
and it is encrypted with AES 128 knowing

699
00:41:40,450 --> 00:41:49,930
it's the key extra decimal c3b age 4 7 b

700
00:41:45,280 --> 00:41:52,930
8 a 6 if if you find it it's the end of

701
00:41:49,930 --> 00:41:55,118
security in nasa and NSA but they're

702
00:41:52,930 --> 00:41:58,868
very low probabilities so this security

703
00:41:55,119 --> 00:42:01,300
level is accepted so it's computational

704
00:41:58,869 --> 00:42:04,060
security they can't break the key yes

705
00:42:01,300 --> 00:42:06,100
they can in one try yes the possibility

706
00:42:04,060 --> 00:42:09,340
of probability that of this happening

707
00:42:06,100 --> 00:42:12,910
it's like it's impossible well it's very

708
00:42:09,340 --> 00:42:17,080
very improbable very unlikely so we need

709
00:42:12,910 --> 00:42:18,819
to know this because it's going to be

710
00:42:17,080 --> 00:42:23,650
important for the concept of security in

711
00:42:18,820 --> 00:42:27,960
the future well this is just the same in

712
00:42:23,650 --> 00:42:31,780
the video this is just a table OPC

713
00:42:27,960 --> 00:42:34,869
similar to billionaires tables I'm gonna

714
00:42:31,780 --> 00:42:37,930
put it or the zoom so that you can see

715
00:42:34,869 --> 00:42:39,510
it it's a kind of a billionaires table

716
00:42:37,930 --> 00:42:41,799
but underneath that there is

717
00:42:39,510 --> 00:42:42,309
mathematical operations you want to

718
00:42:41,800 --> 00:42:46,779
change the

719
00:42:42,309 --> 00:42:48,549
by than his five a despite its a decimal

720
00:42:46,779 --> 00:42:51,489
and we have four bits for each value

721
00:42:48,549 --> 00:42:54,549
this corresponds to the by B II there's

722
00:42:51,489 --> 00:42:57,130
an a mathematical explanation I use the

723
00:42:54,549 --> 00:42:59,229
table I don't use the maths because this

724
00:42:57,130 --> 00:43:01,749
is a fixed table it doesn't change

725
00:42:59,229 --> 00:43:05,410
there's a direct table and there's an

726
00:43:01,749 --> 00:43:09,609
inverted a table from top to down from

727
00:43:05,410 --> 00:43:12,788
down to top so it's the invert just the

728
00:43:09,609 --> 00:43:15,459
inverted operations that are used that's

729
00:43:12,789 --> 00:43:20,229
multiplication of columns when we speak

730
00:43:15,459 --> 00:43:25,359
about keys this is interesting today we

731
00:43:20,229 --> 00:43:27,189
use aes-256 the RAS three five six it

732
00:43:25,359 --> 00:43:29,259
has a big key it's more secure because

733
00:43:27,189 --> 00:43:33,430
it's more difficult to attack with brute

734
00:43:29,259 --> 00:43:37,630
force to attack 256 bits than 128

735
00:43:33,430 --> 00:43:41,078
because to attack 128 bits you have to

736
00:43:37,630 --> 00:43:45,189
do a lot of tries but to attacked 156

737
00:43:41,079 --> 00:43:48,939
beats the average is many more trials

738
00:43:45,189 --> 00:43:50,769
it's horrible so difficult but this

739
00:43:48,939 --> 00:43:53,828
there's something interesting here it

740
00:43:50,769 --> 00:43:56,410
appears in some of the documents the

741
00:43:53,829 --> 00:44:02,039
rounds the symmetrical algorithms like a

742
00:43:56,410 --> 00:44:05,078
yes love is many other algorithms take a

743
00:44:02,039 --> 00:44:09,880
key there's a series of sub keys and

744
00:44:05,079 --> 00:44:15,150
there are many rounds algorithm is does

745
00:44:09,880 --> 00:44:20,199
10 rounds 12 and 14 the test algorithm

746
00:44:15,150 --> 00:44:22,209
did 16 rounds others do 52 all of the

747
00:44:20,199 --> 00:44:28,359
algorithms do rounds how can we explain

748
00:44:22,209 --> 00:44:33,219
I want to mix up the bits of the message

749
00:44:28,359 --> 00:44:36,130
and the bits of the key so I always have

750
00:44:33,219 --> 00:44:38,979
it give an example that is from another

751
00:44:36,130 --> 00:44:42,429
colleague but I took it with me the

752
00:44:38,979 --> 00:44:49,000
concept of mayonnaise sauce well you

753
00:44:42,429 --> 00:44:51,859
have oil and egg so this is a key

754
00:44:49,000 --> 00:44:57,700
if I do a normal mayonnaise I put two

755
00:44:51,859 --> 00:45:02,119
eggs the oil and then I have a mixer I

756
00:44:57,700 --> 00:45:03,830
have to maintain the the mixer on so

757
00:45:02,119 --> 00:45:07,190
that it starts making my own A's I have

758
00:45:03,830 --> 00:45:09,950
two options I put the egg in the oil I

759
00:45:07,190 --> 00:45:12,140
press the button for six minutes and

760
00:45:09,950 --> 00:45:15,379
until the mayonnaise is done or I just

761
00:45:12,140 --> 00:45:18,290
do have 12 seconds and a stop it

762
00:45:15,380 --> 00:45:20,180
another round 12 seconds I stop I do it

763
00:45:18,290 --> 00:45:26,089
in various rounds that's the concept of

764
00:45:20,180 --> 00:45:28,990
crowns what would happen you julian

765
00:45:26,089 --> 00:45:31,970
assange mentioned that from WikiLeaks

766
00:45:28,990 --> 00:45:35,479
he's an expert on cryptography he did a

767
00:45:31,970 --> 00:45:39,890
testament and he encrypted his Testament

768
00:45:35,480 --> 00:45:41,960
with the algorithm AES it was criticized

769
00:45:39,890 --> 00:45:46,549
that AES algorithm when it was turned

770
00:45:41,960 --> 00:45:50,359
for 256 bits it needed more rounds more

771
00:45:46,550 --> 00:45:53,000
than 14 like 16 rounds an explanation is

772
00:45:50,359 --> 00:45:56,839
graphic very clear instead of doing the

773
00:45:53,000 --> 00:45:58,790
mayonnaise with this type of 10x I use

774
00:45:56,839 --> 00:46:03,049
ostrich eggs

775
00:45:58,790 --> 00:46:04,940
I need more times more rounds because

776
00:46:03,050 --> 00:46:08,270
it's more difficult to do it with

777
00:46:04,940 --> 00:46:11,089
ostrich eggs you need a good emulsion

778
00:46:08,270 --> 00:46:14,240
you need more rounds with a mixer so

779
00:46:11,089 --> 00:46:20,210
this the AES algorithm is very strong

780
00:46:14,240 --> 00:46:21,770
with 256 bits but with but maybe with

781
00:46:20,210 --> 00:46:24,130
other attacks it could be very weak

782
00:46:21,770 --> 00:46:28,540
because we can do it

783
00:46:24,130 --> 00:46:31,339
follow-up where are the bits of the keys

784
00:46:28,540 --> 00:46:36,320
maybe you've read something about Julian

785
00:46:31,339 --> 00:46:38,540
Assange we have the speed symmetrical

786
00:46:36,320 --> 00:46:42,470
algorithm that's the case of AES this is

787
00:46:38,540 --> 00:46:48,230
the the 50 megabytes per second that's

788
00:46:42,470 --> 00:46:52,399
the speed the algorithm triple D's is

789
00:46:48,230 --> 00:46:55,700
ten five times slower it's very slow if

790
00:46:52,400 --> 00:46:59,619
we compare it with the asymmetrical RSA

791
00:46:55,700 --> 00:47:01,850
defeat German thermal there's a

792
00:46:59,619 --> 00:47:04,700
substantial difference

793
00:47:01,850 --> 00:47:09,470
is that these systems the symmetrical

794
00:47:04,700 --> 00:47:13,129
systems like AAS have an encryption rate

795
00:47:09,470 --> 00:47:15,939
of hundreds of megabytes per second the

796
00:47:13,130 --> 00:47:18,260
other algorithms have an encryption

797
00:47:15,940 --> 00:47:21,770
rates of kilobytes per second the

798
00:47:18,260 --> 00:47:25,490
difference is one mm so they're

799
00:47:21,770 --> 00:47:27,380
symmetrical systems are are si si are

800
00:47:25,490 --> 00:47:30,410
used but for light operations to

801
00:47:27,380 --> 00:47:34,760
exchange keys and for digital signature

802
00:47:30,410 --> 00:47:37,129
I want to have this key for AES 256 I

803
00:47:34,760 --> 00:47:40,070
have no problem doing that because and

804
00:47:37,130 --> 00:47:41,750
if we go to this rate of thousands of

805
00:47:40,070 --> 00:47:42,980
kilobytes per seconds there's no problem

806
00:47:41,750 --> 00:47:50,660
because the value they're going to

807
00:47:42,980 --> 00:47:52,490
encrypt is very very low or I can have a

808
00:47:50,660 --> 00:47:55,399
hash function I'm going to sign it to

809
00:47:52,490 --> 00:47:57,200
have a big document I can't sign all the

810
00:47:55,400 --> 00:48:00,800
document because the system rate is very

811
00:47:57,200 --> 00:48:03,950
low ten Megas because it takes 48 50

812
00:48:00,800 --> 00:48:09,320
seconds to sign I do a hash I compress

813
00:48:03,950 --> 00:48:11,830
the hash with another 256 bits with a

814
00:48:09,320 --> 00:48:15,830
rate of hundreds of kilobytes per second

815
00:48:11,830 --> 00:48:18,470
it's easy but then if I want to send a

816
00:48:15,830 --> 00:48:22,810
lot of documentation that is encrypted

817
00:48:18,470 --> 00:48:25,339
with our CA algorithm I use symmetrical

818
00:48:22,810 --> 00:48:27,650
cryptography for digital signature so I

819
00:48:25,340 --> 00:48:31,880
know what is the server that is more

820
00:48:27,650 --> 00:48:35,740
secure there's a kind of a digital

821
00:48:31,880 --> 00:48:39,140
signature that I check with Verisign

822
00:48:35,740 --> 00:48:41,450
with Serena another certification that

823
00:48:39,140 --> 00:48:47,870
are having my machine and then I send

824
00:48:41,450 --> 00:48:53,000
this server a session key these are 256

825
00:48:47,870 --> 00:48:55,640
bits that my AES algorithm are going to

826
00:48:53,000 --> 00:48:57,740
run it's going to run this is done in

827
00:48:55,640 --> 00:49:00,920
the asymmetric encryption but when I get

828
00:48:57,740 --> 00:49:03,890
the page from the bank and they have

829
00:49:00,920 --> 00:49:04,700
this first snapshot I have animated

830
00:49:03,890 --> 00:49:08,000
elements

831
00:49:04,700 --> 00:49:10,819
I said no please send me the last ten

832
00:49:08,000 --> 00:49:14,300
movements not this page so there's an

833
00:49:10,820 --> 00:49:15,710
exchange of very heavy information I do

834
00:49:14,300 --> 00:49:19,880
symmetrical rocktober

835
00:49:15,710 --> 00:49:21,710
with a s where the key of 256 bits that

836
00:49:19,880 --> 00:49:23,690
we have exchanged with a symmetric

837
00:49:21,710 --> 00:49:26,630
cryptography that's the difference

838
00:49:23,690 --> 00:49:32,180
people ask me why do you work with

839
00:49:26,630 --> 00:49:35,510
symmetrical systems with 128 192 or 256

840
00:49:32,180 --> 00:49:40,549
bits with AES but when you use a

841
00:49:35,510 --> 00:49:45,140
symmetric cryptography we have thousands

842
00:49:40,550 --> 00:49:47,060
of bits well what happens with a

843
00:49:45,140 --> 00:49:49,279
symmetrical modules but we need to know

844
00:49:47,060 --> 00:49:52,190
the answer nobody has looked into my

845
00:49:49,280 --> 00:49:55,880
notes anybody knows the answer when we

846
00:49:52,190 --> 00:50:00,290
work with symmetrical systems it's it's

847
00:49:55,880 --> 00:50:03,950
from zero to F so I'm working with 156

848
00:50:00,290 --> 00:50:06,410
bits the key could be anyone the AES

849
00:50:03,950 --> 00:50:12,259
algorithm accepts all the keys even to

850
00:50:06,410 --> 00:50:17,390
zeros it could be zeros refs so it's to

851
00:50:12,260 --> 00:50:20,869
256 it's a lot and each key is possible

852
00:50:17,390 --> 00:50:25,450
from all zeros to all ones whatever its

853
00:50:20,869 --> 00:50:29,330
key it can be can be there but in RSA

854
00:50:25,450 --> 00:50:31,520
it's based on two prime numbers T and Q

855
00:50:29,330 --> 00:50:35,390
the digital certificate shows me the

856
00:50:31,520 --> 00:50:37,970
module you know the work place where the

857
00:50:35,390 --> 00:50:40,040
Amazon or the bank works the website is

858
00:50:37,970 --> 00:50:44,750
secure this is the product of two prime

859
00:50:40,040 --> 00:50:46,580
numbers how can I break the RSA it's

860
00:50:44,750 --> 00:50:48,980
difficult to very impossible to do it

861
00:50:46,580 --> 00:50:50,690
today but in exercise here we can do it

862
00:50:48,980 --> 00:50:54,200
conduction was to factorize

863
00:50:50,690 --> 00:50:57,710
the secret of the bank is that in fact

864
00:50:54,200 --> 00:51:00,859
there's a couple of prime numbers and I

865
00:50:57,710 --> 00:51:02,839
own not only known the product 244 bits

866
00:51:00,859 --> 00:51:11,000
it's very complicated I knew no need to

867
00:51:02,839 --> 00:51:13,849
factorize if I factorize I break the

868
00:51:11,000 --> 00:51:16,790
secret value of this digital certificate

869
00:51:13,849 --> 00:51:19,880
and very rapidly I can find the private

870
00:51:16,790 --> 00:51:23,900
key from the public key okay

871
00:51:19,880 --> 00:51:26,600
so the assymetrical systems are

872
00:51:23,900 --> 00:51:29,180
thousands of times slower and we use

873
00:51:26,600 --> 00:51:32,240
them to exchange information and sign

874
00:51:29,180 --> 00:51:35,390
the asymmetrical digitally because

875
00:51:32,240 --> 00:51:38,390
there's key in exchange and to encrypt

876
00:51:35,390 --> 00:51:41,089
information we use the symmetrical

877
00:51:38,390 --> 00:51:44,240
algorithm I want to keep an encrypted

878
00:51:41,090 --> 00:51:47,750
document in a petition of my driver I do

879
00:51:44,240 --> 00:51:51,080
with AES and with other symmetrical

880
00:51:47,750 --> 00:51:56,060
algorithm type because sometimes it's

881
00:51:51,080 --> 00:51:58,610
too slow in the unsymmetrical systems

882
00:51:56,060 --> 00:52:03,400
here you can do some exercises and

883
00:51:58,610 --> 00:52:03,400
practice there's a software called a

884
00:52:04,450 --> 00:52:10,009
s-sir

885
00:52:05,750 --> 00:52:17,480
ice is fear I'm going to show it to you

886
00:52:10,010 --> 00:52:21,590
now if if we go to Google and we ask for

887
00:52:17,480 --> 00:52:24,170
a is fear crypto Network it's a software

888
00:52:21,590 --> 00:52:28,760
we'll click here and we cannot download

889
00:52:24,170 --> 00:52:32,060
it it's a couple of students who have

890
00:52:28,760 --> 00:52:36,200
done this but it's Java you can download

891
00:52:32,060 --> 00:52:39,770
it and install it we have a system to do

892
00:52:36,200 --> 00:52:42,169
cryptographic exercises with this type

893
00:52:39,770 --> 00:52:54,650
of software it's here I'm just looking

894
00:52:42,170 --> 00:52:57,230
for it this is the exercise it's

895
00:52:54,650 --> 00:53:00,770
downloaded

896
00:52:57,230 --> 00:53:05,100
there's no installation requirement

897
00:53:00,770 --> 00:53:06,540
double-click here in a a sphere there

898
00:53:05,100 --> 00:53:12,390
are documents and you can play with them

899
00:53:06,540 --> 00:53:15,020
in practice dot hard and we have this

900
00:53:12,390 --> 00:53:18,810
type of software in English or Spanish

901
00:53:15,020 --> 00:53:22,170
we can encrypt decrypt attacks and

902
00:53:18,810 --> 00:53:25,040
operations operations are the typical

903
00:53:22,170 --> 00:53:29,340
operations of the algorithm that's all I

904
00:53:25,040 --> 00:53:32,250
can the survives mix columns or the run

905
00:53:29,340 --> 00:53:35,390
key these operations and that you've

906
00:53:32,250 --> 00:53:39,000
seen in the video they're quite simple

907
00:53:35,390 --> 00:53:40,950
and this is an encryption and decryption

908
00:53:39,000 --> 00:53:43,500
operation that we're going to do similar

909
00:53:40,950 --> 00:53:46,620
to what you've seen in the document that

910
00:53:43,500 --> 00:53:48,780
I uploaded in into the internet it's

911
00:53:46,620 --> 00:53:51,359
quite simple place the document that I

912
00:53:48,780 --> 00:53:55,230
uploaded in the Internet I have

913
00:53:51,360 --> 00:54:00,450
exercises here the the exodus amount you

914
00:53:55,230 --> 00:54:03,890
have all this on the screen here what we

915
00:54:00,450 --> 00:54:06,270
can do we can run any type of

916
00:54:03,890 --> 00:54:10,470
calculators that you will find in the

917
00:54:06,270 --> 00:54:14,940
internet this lavas soft and some of

918
00:54:10,470 --> 00:54:17,879
that we use with our students there the

919
00:54:14,940 --> 00:54:20,790
sentence was that chica de panamá that's

920
00:54:17,880 --> 00:54:25,410
the bus so i take the hash out of that

921
00:54:20,790 --> 00:54:28,290
and gives me the value of 128 bucks and

922
00:54:25,410 --> 00:54:30,450
the text six hundred and forty

923
00:54:28,290 --> 00:54:38,250
characters Latika they by name and the

924
00:54:30,450 --> 00:54:39,810
rest of the songa this message i took it

925
00:54:38,250 --> 00:54:45,000
from the internet at this it's six

926
00:54:39,810 --> 00:54:48,870
hundred and forty bits it's the exact

927
00:54:45,000 --> 00:54:56,030
block that is works run by the AES

928
00:54:48,870 --> 00:55:01,620
algorithm in its sixteen bytes 256 bits

929
00:54:56,030 --> 00:55:03,990
so 128 x five it's exactly the the

930
00:55:01,620 --> 00:55:07,850
figure that the ACE algorithm works with

931
00:55:03,990 --> 00:55:10,529
we have an exact block 64 bits

932
00:55:07,850 --> 00:55:12,360
AES 128 bits and

933
00:55:10,530 --> 00:55:15,510
message of the document it's not

934
00:55:12,360 --> 00:55:19,110
coherent with of 128 bits we need to add

935
00:55:15,510 --> 00:55:21,570
something it's that the Desa algorithm

936
00:55:19,110 --> 00:55:24,030
it was a set of zeros in the AES it's an

937
00:55:21,570 --> 00:55:27,060
amount of bits that I I miss that I need

938
00:55:24,030 --> 00:55:29,370
here you need ten bytes I will give you

939
00:55:27,060 --> 00:55:32,730
ten repeated six to ten times you have

940
00:55:29,370 --> 00:55:43,140
you need six bytes repeated in and the

941
00:55:32,730 --> 00:55:47,490
last block so 0 6 x 6 x so I have 10

942
00:55:43,140 --> 00:55:52,170
malted that is repeated 16 times this is

943
00:55:47,490 --> 00:55:55,379
by default even if the document has an

944
00:55:52,170 --> 00:55:57,840
exact value of 128 bits multiplied by n

945
00:55:55,380 --> 00:56:03,720
I need always the missing parts the

946
00:55:57,840 --> 00:56:08,880
message is exactly the same until the

947
00:56:03,720 --> 00:56:11,459
dot 640 bits that's a full value of C

948
00:56:08,880 --> 00:56:16,800
and then plus the the the the necessary

949
00:56:11,460 --> 00:56:25,950
bits that were missing the filling let's

950
00:56:16,800 --> 00:56:29,690
take the text let's ctrl C we get to the

951
00:56:25,950 --> 00:56:33,000
software I'm going to encrypt something

952
00:56:29,690 --> 00:56:37,280
I'm going to and the key is an extra

953
00:56:33,000 --> 00:56:40,320
decimal system 64

954
00:56:37,280 --> 00:56:43,290
it's a typical question that you just

955
00:56:40,320 --> 00:56:49,950
asked at university and people say I

956
00:56:43,290 --> 00:56:54,690
don't know they copied it and this is a

957
00:56:49,950 --> 00:57:00,240
way of using symptoms that can be

958
00:56:54,690 --> 00:57:02,670
compatible all the tip or digital

959
00:57:00,240 --> 00:57:06,120
certificates have this format but once I

960
00:57:02,670 --> 00:57:09,240
have this I have the plain text with a

961
00:57:06,120 --> 00:57:12,420
document I'm working with open SSL or I

962
00:57:09,240 --> 00:57:16,580
can not do it on the screen I just need

963
00:57:12,420 --> 00:57:21,810
to introduce a document with a file txt

964
00:57:16,580 --> 00:57:23,970
well so we have the full text from here

965
00:57:21,810 --> 00:57:27,630
wing until the

966
00:57:23,970 --> 00:57:33,240
point the dot ctrl C and this is the

967
00:57:27,630 --> 00:57:36,690
text AC AC type of text control V so we

968
00:57:33,240 --> 00:57:41,330
do control V sometimes happens with

969
00:57:36,690 --> 00:57:43,830
windows and the cursor is is here

970
00:57:41,330 --> 00:57:45,630
there's an enter and there's one more

971
00:57:43,830 --> 00:57:48,210
bite so we have to be careful and

972
00:57:45,630 --> 00:57:52,020
everything is encrypted in a modern

973
00:57:48,210 --> 00:57:54,540
cryptography so the cursor is there and

974
00:57:52,020 --> 00:57:59,790
I know this is fun with an exact value

975
00:57:54,540 --> 00:58:02,640
of 128 bits base could be 24 we can put

976
00:57:59,790 --> 00:58:07,099
it into a file or decimal 64 is very

977
00:58:02,640 --> 00:58:09,960
typical and two types of figures ACB the

978
00:58:07,099 --> 00:58:12,090
it's PI D by default in the algorithms

979
00:58:09,960 --> 00:58:15,320
but it's forbidden to be to use it there

980
00:58:12,090 --> 00:58:21,540
are attacks against these figures and

981
00:58:15,320 --> 00:58:24,420
then what's used today is CBC so I have

982
00:58:21,540 --> 00:58:26,790
two keys the one I type and another one

983
00:58:24,420 --> 00:58:31,800
that is called initial vector could be

984
00:58:26,790 --> 00:58:35,640
secret or no or not you can associate it

985
00:58:31,800 --> 00:58:38,630
with OpenCL system you introduce salt if

986
00:58:35,640 --> 00:58:42,089
you introduce salt then you introduce

987
00:58:38,630 --> 00:58:45,210
random values in the exit decimal so the

988
00:58:42,089 --> 00:58:49,950
key is not that simple as you can

989
00:58:45,210 --> 00:58:53,670
imagine so city mode the ciphering could

990
00:58:49,950 --> 00:58:56,848
be direct direct encryption will have

991
00:58:53,670 --> 00:58:58,770
the direct result or step-by-step it

992
00:58:56,849 --> 00:59:05,300
will show me what it does in every other

993
00:58:58,770 --> 00:59:11,910
rounds direct result because we are late

994
00:59:05,300 --> 00:59:18,330
exit I will have this exit the output in

995
00:59:11,910 --> 00:59:21,118
base 464 format with open SSL you'll see

996
00:59:18,330 --> 00:59:23,670
exactly the same but the command is a

997
00:59:21,119 --> 00:59:26,220
little bit special we won't do it but

998
00:59:23,670 --> 00:59:29,910
I'm going to show it to you here the

999
00:59:26,220 --> 00:59:31,770
filling that's the plain text and here

1000
00:59:29,910 --> 00:59:35,069
this is the filling of the necessary

1001
00:59:31,770 --> 00:59:37,180
bytes if 1 0 it from exit this signal

1002
00:59:35,070 --> 00:59:40,609
goes to decimal you need a filling

1003
00:59:37,180 --> 00:59:42,980
but I need 16 more bytes because it's

1004
00:59:40,609 --> 00:59:46,630
the sixth block and everything is full

1005
00:59:42,980 --> 00:59:52,720
of fillings and as we do this type of

1006
00:59:46,630 --> 00:59:52,720
ciphering operations we have it here

1007
00:59:54,700 --> 01:00:00,710
here we can do some encryption

1008
00:59:57,099 --> 01:00:05,089
operations in this case with open SSL

1009
01:00:00,710 --> 01:00:06,559
bit complex and heavier I'm going to

1010
01:00:05,089 --> 01:00:11,180
show it to you this is the operation

1011
01:00:06,559 --> 01:00:17,200
with this is yell this is the decryption

1012
01:00:11,180 --> 01:00:21,740
process here we have the SSL operation

1013
01:00:17,200 --> 01:00:25,098
when 32 wins 64 doesn't matter you can

1014
01:00:21,740 --> 01:00:29,089
download open SSL would be the program

1015
01:00:25,099 --> 01:00:32,089
is the algorithm minus 128 the number of

1016
01:00:29,089 --> 01:00:35,750
bits they're gonna use CBC mode whatever

1017
01:00:32,089 --> 01:00:40,009
type of mode we use CBC but there's

1018
01:00:35,750 --> 01:00:42,700
another mode the counter there's more a

1019
01:00:40,009 --> 01:00:42,700
new mode called

1020
01:00:42,880 --> 01:00:49,549
counter plus and it's being used you

1021
01:00:45,710 --> 01:00:50,089
know and it's gonna be the standard no

1022
01:00:49,549 --> 01:00:53,180
salt

1023
01:00:50,089 --> 01:00:55,430
what is no salt you would you know what

1024
01:00:53,180 --> 01:00:57,910
it means to introduce salt into an

1025
01:00:55,430 --> 01:00:59,899
encryption if we introduce salt

1026
01:00:57,910 --> 01:01:03,348
something I'm interesting will happen

1027
01:00:59,900 --> 01:01:07,009
the program is going to make well to

1028
01:01:03,349 --> 01:01:10,279
Mikey it's a sentence that are that I

1029
01:01:07,009 --> 01:01:12,650
chose right it introduces extract

1030
01:01:10,279 --> 01:01:14,839
exactly similar extra extra decimal

1031
01:01:12,650 --> 01:01:18,319
figures so it's very difficult to be

1032
01:01:14,839 --> 01:01:20,779
attacked random tables remain remember

1033
01:01:18,319 --> 01:01:23,420
that like I have a password that is one

1034
01:01:20,779 --> 01:01:26,869
two three four well there's a hash

1035
01:01:23,420 --> 01:01:31,759
function 5 is 1 and we have an whatever

1036
01:01:26,869 --> 01:01:33,619
value F 5 F 5 B 3 C 4 we put it in

1037
01:01:31,759 --> 01:01:35,900
Google and automatically there's a

1038
01:01:33,619 --> 01:01:38,779
number of pages appearing so this is

1039
01:01:35,900 --> 01:01:41,900
within a database of hash functions that

1040
01:01:38,779 --> 01:01:47,240
are well known but if I add salt I plus

1041
01:01:41,900 --> 01:01:50,490
1 2 3 1 2 3 4 B 4 C 3 1 F obviously this

1042
01:01:47,240 --> 01:01:55,379
is nowhere in no database we are

1043
01:01:50,490 --> 01:01:58,109
salt in the AES system adding salt is

1044
01:01:55,380 --> 01:02:00,480
very useful you introduce a key Latika

1045
01:01:58,110 --> 01:02:04,710
de panamá there's a text you encrypt the

1046
01:02:00,480 --> 01:02:06,720
message and it's cryptogram you re

1047
01:02:04,710 --> 01:02:08,880
encrypt away the same key

1048
01:02:06,720 --> 01:02:11,700
Latika de panamá the first initial

1049
01:02:08,880 --> 01:02:13,740
characters say the AES algorithm I'm

1050
01:02:11,700 --> 01:02:15,689
working with SSL the initial command and

1051
01:02:13,740 --> 01:02:18,618
then there's the cryptogram which is

1052
01:02:15,690 --> 01:02:22,050
completely different nobody knows it

1053
01:02:18,619 --> 01:02:23,970
don't add salt so that you can use your

1054
01:02:22,050 --> 01:02:28,380
key data and that you're going to

1055
01:02:23,970 --> 01:02:29,959
introduce so this the entry text is one

1056
01:02:28,380 --> 01:02:37,170
cyber camp

1057
01:02:29,960 --> 01:02:41,480
it's a 640 bit text in txt and the exit

1058
01:02:37,170 --> 01:02:45,650
is an ALS algorithm I use the amateur

1059
01:02:41,480 --> 01:02:50,070
base64 we can read it in any machine and

1060
01:02:45,650 --> 01:02:52,080
the key ok the archicad Ipanema that's

1061
01:02:50,070 --> 01:02:56,490
the key but don't you use the ass AC

1062
01:02:52,080 --> 01:03:00,150
values m5 it's what I prefer with m5

1063
01:02:56,490 --> 01:03:04,609
that's the one you use as a key okay so

1064
01:03:00,150 --> 01:03:08,280
you do enter and that's it so as I said

1065
01:03:04,609 --> 01:03:10,529
this is an exercise if you want to do it

1066
01:03:08,280 --> 01:03:12,510
you can do it without any kind of

1067
01:03:10,530 --> 01:03:15,080
problem let's move on to the second part

1068
01:03:12,510 --> 01:03:18,510
of this presentation

1069
01:03:15,080 --> 01:03:22,080
does anybody have any doubts about RSA

1070
01:03:18,510 --> 01:03:23,970
I've got 56 minutes left just for RSA so

1071
01:03:22,080 --> 01:03:26,279
the only problems with the AES

1072
01:03:23,970 --> 01:03:29,279
algorithms it's a very easy software

1073
01:03:26,280 --> 01:03:33,510
very intuitive and of course if anybody

1074
01:03:29,280 --> 01:03:35,850
has any doubts about software you can

1075
01:03:33,510 --> 01:03:38,250
check vectors what I mean by that is

1076
01:03:35,850 --> 01:03:40,680
that any kind of software that becomes a

1077
01:03:38,250 --> 01:03:44,040
standard thin F and other algorithms

1078
01:03:40,680 --> 01:03:47,040
publish a document to which says if you

1079
01:03:44,040 --> 01:03:50,840
put as an entry zero zero zero zero and

1080
01:03:47,040 --> 01:03:53,880
and ends with ffff a new work in CBC

1081
01:03:50,840 --> 01:03:56,280
mode and the initial vectors 1 1 1

1082
01:03:53,880 --> 01:03:58,470
you'll get this what they do is to give

1083
01:03:56,280 --> 01:04:01,580
you a set of inputs and outputs so that

1084
01:03:58,470 --> 01:04:03,740
you can check that it works and

1085
01:04:01,580 --> 01:04:05,360
the software has an initial part where

1086
01:04:03,740 --> 01:04:08,000
you can check all of this and if you

1087
01:04:05,360 --> 01:04:10,370
don't agree with it you can download the

1088
01:04:08,000 --> 01:04:14,510
nist a document and nist will tell you

1089
01:04:10,370 --> 01:04:18,049
how it works so let's forget symmetric

1090
01:04:14,510 --> 01:04:21,310
cryptography snap which I said are very

1091
01:04:18,050 --> 01:04:24,290
fast which encrypt the information

1092
01:04:21,310 --> 01:04:27,410
symmetrically and the standard until

1093
01:04:24,290 --> 01:04:33,410
2040 until NIST is going to be the AES

1094
01:04:27,410 --> 01:04:35,720
algorithm 2040 I reckon we're going to

1095
01:04:33,410 --> 01:04:38,660
be with quantum computers so I think

1096
01:04:35,720 --> 01:04:41,689
maybe a es maybe isn't going to be the

1097
01:04:38,660 --> 01:04:45,470
one but it's going to be at least 512

1098
01:04:41,690 --> 01:04:48,320
bits the thing is we can't say they're

1099
01:04:45,470 --> 01:04:52,759
going to use the key with that's Biggers

1100
01:04:48,320 --> 01:04:56,660
with algorithms or RSA because they come

1101
01:04:52,760 --> 01:04:59,210
slower and as time goes by what I want

1102
01:04:56,660 --> 01:05:03,799
is for enternet to be quicker it's no

1103
01:04:59,210 --> 01:05:06,080
good for me going to a bank and you go

1104
01:05:03,800 --> 01:05:11,180
slowly slowly slowly to try to sign if I

1105
01:05:06,080 --> 01:05:14,330
go to a bank here in Spain and I see

1106
01:05:11,180 --> 01:05:16,640
that it takes three or four seconds for

1107
01:05:14,330 --> 01:05:18,440
the screen to pop up and the close

1108
01:05:16,640 --> 01:05:21,680
characters I realize that something's

1109
01:05:18,440 --> 01:05:23,210
wrong and if instead of five or six

1110
01:05:21,680 --> 01:05:25,580
seconds it's a minute you realize that

1111
01:05:23,210 --> 01:05:31,250
Internet's crashed so there's no point

1112
01:05:25,580 --> 01:05:33,350
in increasing the key length madly but

1113
01:05:31,250 --> 01:05:36,710
one of the solutions is that when we've

1114
01:05:33,350 --> 01:05:39,819
got quantum computers it's just to go

1115
01:05:36,710 --> 01:05:44,750
really fast forward with the keys go to

1116
01:05:39,820 --> 01:05:48,710
RSA and it'll be almost 2,000 bits or go

1117
01:05:44,750 --> 01:05:51,830
to AES algorithms which allows you to

1118
01:05:48,710 --> 01:05:57,260
increase key size from 32 to that in 32

1119
01:05:51,830 --> 01:06:00,830
to 32 bit packs so to 120 892 and 250

1120
01:05:57,260 --> 01:06:07,070
beats by default but you can increase it

1121
01:06:00,830 --> 01:06:11,770
by in 32 bit stages or steps but then it

1122
01:06:07,070 --> 01:06:11,770
gets slower okay any questions

1123
01:06:14,540 --> 01:06:21,990
included in these kind of algorithms

1124
01:06:18,090 --> 01:06:25,140
this is the first one that appears a

1125
01:06:21,990 --> 01:06:28,319
year-and-a-half after Mickey Hellman

1126
01:06:25,140 --> 01:06:30,930
said with this need to change this kind

1127
01:06:28,320 --> 01:06:34,440
of key I in November 76 and this

1128
01:06:30,930 --> 01:06:36,839
happened in February 78 just about 18

1129
01:06:34,440 --> 01:06:39,510
months afterwards the problem that Tiki

1130
01:06:36,840 --> 01:06:42,570
Herrmann has is that the exchanged a key

1131
01:06:39,510 --> 01:06:45,840
that exchanged a key between client and

1132
01:06:42,570 --> 01:06:47,970
server but after particle it did both

1133
01:06:45,840 --> 01:06:51,980
you know you sent one thing out and then

1134
01:06:47,970 --> 01:06:55,830
it returned and once this had happened

1135
01:06:51,980 --> 01:06:58,650
the key to session was a value but you

1136
01:06:55,830 --> 01:07:03,210
didn't know what it was there's a

1137
01:06:58,650 --> 01:07:06,330
variant there and I know that you can do

1138
01:07:03,210 --> 01:07:08,760
the exchange of cases unless you know

1139
01:07:06,330 --> 01:07:13,200
the key previously I'm going to send you

1140
01:07:08,760 --> 01:07:21,090
an encrypted signed document via an

1141
01:07:13,200 --> 01:07:23,520
email so what happens is within this

1142
01:07:21,090 --> 01:07:26,580
envelope what I do is I include the key

1143
01:07:23,520 --> 01:07:29,850
and you're just going to be the only

1144
01:07:26,580 --> 01:07:32,790
person I can open the envelope and get

1145
01:07:29,850 --> 01:07:36,060
the key there's a nice protocol that's

1146
01:07:32,790 --> 01:07:37,620
modified by Mickey Hellman but you have

1147
01:07:36,060 --> 01:07:39,660
to know the key at the outer that you're

1148
01:07:37,620 --> 01:07:42,390
going to be send it has type of value a

1149
01:07:39,660 --> 01:07:47,310
hash then you get to the most

1150
01:07:42,390 --> 01:07:48,720
significant bits or that you want and in

1151
01:07:47,310 --> 01:07:50,940
the end do you do the same sort of thing

1152
01:07:48,720 --> 01:07:53,790
okay this is a little bit more complex

1153
01:07:50,940 --> 01:08:00,810
but it's also possible but tippy Herman

1154
01:07:53,790 --> 01:08:03,420
in both formats and different protocols

1155
01:08:00,810 --> 01:08:06,110
only allowed me to do at a key exchange

1156
01:08:03,420 --> 01:08:08,880
you couldn't do digital signature so

1157
01:08:06,110 --> 01:08:16,800
these people were thinking about the

1158
01:08:08,880 --> 01:08:20,009
whole time until they found RSA which

1159
01:08:16,800 --> 01:08:24,009
allowed them to

1160
01:08:20,009 --> 01:08:26,649
exchange key and have the digital

1161
01:08:24,009 --> 01:08:28,390
signature there's a public key private

1162
01:08:26,649 --> 01:08:30,488
key the two tines of key so you've got

1163
01:08:28,390 --> 01:08:33,400
the public key and I can send you

1164
01:08:30,488 --> 01:08:36,218
something confidential because I encrypt

1165
01:08:33,399 --> 01:08:40,269
it I put into your public key I reduce

1166
01:08:36,219 --> 01:08:42,429
it to the N module and it's only you

1167
01:08:40,270 --> 01:08:48,009
that has the private key that opens his

1168
01:08:42,429 --> 01:08:53,170
public key so if I put a figure with the

1169
01:08:48,009 --> 01:08:55,390
public key to you to the receiver but if

1170
01:08:53,170 --> 01:08:56,529
I do something and I encrypt it with my

1171
01:08:55,390 --> 01:08:59,739
private key

1172
01:08:56,529 --> 01:09:01,179
I put the document or hash and I send it

1173
01:08:59,738 --> 01:09:02,769
with private key I send it to everybody

1174
01:09:01,179 --> 01:09:04,449
but everybody has my public key and they

1175
01:09:02,770 --> 01:09:07,779
can check that I've done this operation

1176
01:09:04,448 --> 01:09:09,939
as I've used hash they all know it's an

1177
01:09:07,779 --> 01:09:12,009
entire document and only I know the

1178
01:09:09,939 --> 01:09:14,710
private key they know that I am the

1179
01:09:12,009 --> 01:09:18,179
authentic person that's what happens

1180
01:09:14,710 --> 01:09:22,420
with a symmetric cryptography this

1181
01:09:18,179 --> 01:09:24,880
algorithm was patented in 1978 it took a

1182
01:09:22,420 --> 01:09:32,380
long time for people to use it Lotus no

1183
01:09:24,880 --> 01:09:34,960
notes used it and IBM looks at it but

1184
01:09:32,380 --> 01:09:36,730
we're talking about 1978 what's it for

1185
01:09:34,960 --> 01:09:38,080
it's for people to sign what does the

1186
01:09:36,729 --> 01:09:40,870
digital signature mean people didn't

1187
01:09:38,080 --> 01:09:44,559
know but people gradually realised and

1188
01:09:40,870 --> 01:09:49,179
this standard is now used worldwide so

1189
01:09:44,560 --> 01:09:53,859
let's look a little example about what

1190
01:09:49,179 --> 01:09:57,670
happens with a key exchange here we've

1191
01:09:53,859 --> 01:10:00,370
got a quite a funny story about two

1192
01:09:57,670 --> 01:10:02,890
lovers in this case is Alice and Burnet

1193
01:10:00,370 --> 01:10:06,070
Allison Bernhard want to send a very

1194
01:10:02,890 --> 01:10:08,890
personal documents Alice took Bernard

1195
01:10:06,070 --> 01:10:11,170
how can you do that even though a

1196
01:10:08,890 --> 01:10:13,719
messenger gets it nobody can read it's

1197
01:10:11,170 --> 01:10:18,750
very easy it's the Box example I have a

1198
01:10:13,719 --> 01:10:26,230
box a boxer bulletproof box with two

1199
01:10:18,750 --> 01:10:28,330
locks on it so Alice puts a secret

1200
01:10:26,230 --> 01:10:30,040
message to say oh we're gonna elope at

1201
01:10:28,330 --> 01:10:34,320
five o'clock tomorrow morning and she

1202
01:10:30,040 --> 01:10:38,500
closes the box with her lock then and

1203
01:10:34,320 --> 01:10:42,699
then the messages take it to little bow

1204
01:10:38,500 --> 01:10:44,560
and Zizi to open and close this lock so

1205
01:10:42,699 --> 01:10:47,678
it's a padlock and you send it via

1206
01:10:44,560 --> 01:10:49,120
messenger you can do the same thing with

1207
01:10:47,679 --> 01:10:51,280
two padlocks

1208
01:10:49,120 --> 01:10:55,780
what does Alice Thea do he she opens

1209
01:10:51,280 --> 01:11:00,400
it's that's what deciphering is it's

1210
01:10:55,780 --> 01:11:02,949
removing the padlock but your nittany

1211
01:11:00,400 --> 01:11:05,799
needs burn of those key you take but

1212
01:11:02,949 --> 01:11:10,659
another's keys so they get the message

1213
01:11:05,800 --> 01:11:12,520
back so it's gone on three trips

1214
01:11:10,659 --> 01:11:15,190
nobody's been able to seize the message

1215
01:11:12,520 --> 01:11:17,770
and only but not owners at this document

1216
01:11:15,190 --> 01:11:20,799
comes from ilithyia but the thing is

1217
01:11:17,770 --> 01:11:22,540
that she anybody could put a padlock on

1218
01:11:20,800 --> 01:11:24,190
something and click but opening the

1219
01:11:22,540 --> 01:11:25,989
padlock is private I'm the only one

1220
01:11:24,190 --> 01:11:29,320
that's got the key to open the padlock

1221
01:11:25,989 --> 01:11:32,049
so you can say all right then okay if

1222
01:11:29,320 --> 01:11:37,199
you close the padlock that's a public

1223
01:11:32,050 --> 01:11:41,800
operation you encrypt it let's say

1224
01:11:37,199 --> 01:11:43,599
opening the padlock is deciphering so

1225
01:11:41,800 --> 01:11:45,820
closing a padlock anybody can do but

1226
01:11:43,600 --> 01:11:47,500
opening a padlock only the peasants got

1227
01:11:45,820 --> 01:11:53,739
the key can do it so if you'd put that

1228
01:11:47,500 --> 01:11:59,580
into a cryptographic example saying that

1229
01:11:53,739 --> 01:12:02,709
alice sin closes the padlock sends it

1230
01:11:59,580 --> 01:12:06,699
Bob Bob sends it back to Alice Alice

1231
01:12:02,710 --> 01:12:12,070
opens the padlock you can do that with

1232
01:12:06,699 --> 01:12:15,129
the CSR algorithm in mode 26 but you may

1233
01:12:12,070 --> 01:12:16,449
well not get the message because you

1234
01:12:15,130 --> 01:12:19,270
have to do things in order guess if I do

1235
01:12:16,449 --> 01:12:21,690
something then I close the padlock you

1236
01:12:19,270 --> 01:12:24,310
have to then open it but if you closed

1237
01:12:21,690 --> 01:12:26,129
and if you close the padlock I have to

1238
01:12:24,310 --> 01:12:29,880
openness you're going to do it in order

1239
01:12:26,130 --> 01:12:31,980
so you can either sign and increase

1240
01:12:29,880 --> 01:12:34,290
or encryptions sign but if I first

1241
01:12:31,980 --> 01:12:36,468
encrypt and then I sign first you have

1242
01:12:34,290 --> 01:12:40,590
to check the signature and then you

1243
01:12:36,469 --> 01:12:44,790
encrypt then you decipher but if I sign

1244
01:12:40,590 --> 01:12:48,090
and then I encrypt you get their message

1245
01:12:44,790 --> 01:12:49,949
and they new decipher it so you have to

1246
01:12:48,090 --> 01:12:52,320
do it in that order and you have to

1247
01:12:49,949 --> 01:12:53,909
that's the only way to check to see if

1248
01:12:52,320 --> 01:12:56,670
it works if things are done properly

1249
01:12:53,909 --> 01:13:01,530
here we've got the example of how the

1250
01:12:56,670 --> 01:13:04,050
RSA works I've also got another video

1251
01:13:01,530 --> 01:13:07,800
here a four to five minute and in the

1252
01:13:04,050 --> 01:13:13,350
same thing each user chooses a peer and

1253
01:13:07,800 --> 01:13:15,389
people queue number what you may want to

1254
01:13:13,350 --> 01:13:18,060
have a three hundred a thousand bit

1255
01:13:15,389 --> 01:13:20,670
number but no but a number that's two

1256
01:13:18,060 --> 01:13:23,340
thousand bits or a thousand bits is easy

1257
01:13:20,670 --> 01:13:27,920
to find it's just milliseconds so these

1258
01:13:23,340 --> 01:13:27,920
two twos are multiplied the P and the Q

1259
01:13:28,010 --> 01:13:33,840
multiplying is something which a

1260
01:13:31,199 --> 01:13:40,049
mathematician course a polynomial so if

1261
01:13:33,840 --> 01:13:43,199
you multiply P and Q by and each PO has

1262
01:13:40,050 --> 01:13:45,270
B has four bits but if after then

1263
01:13:43,199 --> 01:13:48,178
multiplied by four I have to add them

1264
01:13:45,270 --> 01:13:51,719
but if if it's four bits times four bits

1265
01:13:48,179 --> 01:13:53,909
it's it's not one thing but if it's

1266
01:13:51,719 --> 01:13:55,260
eight bits by eight bits it takes longer

1267
01:13:53,909 --> 01:13:58,589
and that's what the Machine does it

1268
01:13:55,260 --> 01:14:01,800
works with bit numbers but it's still it

1269
01:13:58,590 --> 01:14:04,679
requires more time it's a kind of a

1270
01:14:01,800 --> 01:14:08,370
linear relationship or polynomial

1271
01:14:04,679 --> 01:14:10,710
relationship if I put a number that's

1272
01:14:08,370 --> 01:14:13,080
bigger than P and Q you'll be having to

1273
01:14:10,710 --> 01:14:18,270
work more however if you've got a number

1274
01:14:13,080 --> 01:14:24,120
n and n is the product of two of P and Q

1275
01:14:18,270 --> 01:14:27,330
if n is very small you don't take much

1276
01:14:24,120 --> 01:14:29,880
time if it's double and it takes a long

1277
01:14:27,330 --> 01:14:33,870
time and much more than double because

1278
01:14:29,880 --> 01:14:36,210
it's not polynomial and you can have 300

1279
01:14:33,870 --> 01:14:39,199
or 400 bits and the curve goes up and up

1280
01:14:36,210 --> 01:14:42,269
and it's exponential that's what

1281
01:14:39,199 --> 01:14:46,440
mathematicians call a polynomial

1282
01:14:42,269 --> 01:14:49,400
so it's very difficult to break an N

1283
01:14:46,440 --> 01:14:52,518
value which is a product of P times Q

1284
01:14:49,400 --> 01:14:57,388
800 bits the only thing that was done

1285
01:14:52,519 --> 01:15:02,579
about a seven or eight years ago was

1286
01:14:57,389 --> 01:15:05,849
with 700 and something bits so we all

1287
01:15:02,579 --> 01:15:08,699
work we're using 2048 bits today it's

1288
01:15:05,849 --> 01:15:11,999
very very difficult because you need a

1289
01:15:08,699 --> 01:15:17,249
huge computation capacity so you make

1290
01:15:11,999 --> 01:15:21,269
the product of public you can use 78 to

1291
01:15:17,249 --> 01:15:24,480
module but you don't know that 78 module

1292
01:15:21,269 --> 01:15:28,530
actually contains and what each user

1293
01:15:24,480 --> 01:15:31,320
does is they calculate each n it should

1294
01:15:28,530 --> 01:15:34,559
by N and in this case it's for two

1295
01:15:31,320 --> 01:15:41,420
numbers it's P minus 1 and Q minus 1 if

1296
01:15:34,559 --> 01:15:44,179
you multiply to be to be a P and Q then

1297
01:15:41,420 --> 01:15:46,980
it doesn't require any side of time

1298
01:15:44,179 --> 01:15:48,809
thing is that the only the owner of the

1299
01:15:46,980 --> 01:15:52,949
key can do this the owner of the key

1300
01:15:48,809 --> 01:15:57,900
knows what P and Q is the bank or Amazon

1301
01:15:52,949 --> 01:15:59,999
I know the N number it's a decimal but

1302
01:15:57,900 --> 01:16:07,110
actually it's a number but I don't know

1303
01:15:59,999 --> 01:16:14,219
P so once you know that each user or the

1304
01:16:07,110 --> 01:16:17,610
you knows the Euler indicator will do

1305
01:16:14,219 --> 01:16:22,980
this with the software I can if I want

1306
01:16:17,610 --> 01:16:26,749
give any public number 3 5 7 6 it needs

1307
01:16:22,980 --> 01:16:29,428
to be an odd number however to avoid

1308
01:16:26,749 --> 01:16:32,309
everybody knowing any kind of key

1309
01:16:29,429 --> 01:16:34,670
everybody knows is the end for Fermat

1310
01:16:32,309 --> 01:16:34,670
number

1311
01:16:37,490 --> 01:16:44,370
sorry that the brackets shouldn't be

1312
01:16:39,870 --> 01:16:48,120
there it's 2 to the power of 2 to the

1313
01:16:44,370 --> 01:16:52,019
power of 4 plus 1 that's the firm at

1314
01:16:48,120 --> 01:16:54,390
number 3 this is a prime number and an

1315
01:16:52,020 --> 01:16:56,550
interesting prime number because it

1316
01:16:54,390 --> 01:16:58,770
turns out that it starts with a 1 and

1317
01:16:56,550 --> 01:17:01,920
its got 1500 won at the end

1318
01:16:58,770 --> 01:17:05,580
what's that useful for well these

1319
01:17:01,920 --> 01:17:07,500
systems are very very slow we said that

1320
01:17:05,580 --> 01:17:10,350
earlier but as they're very slow it's

1321
01:17:07,500 --> 01:17:13,380
very difficult to do operations with

1322
01:17:10,350 --> 01:17:14,490
very big numbers so if you're the bank I

1323
01:17:13,380 --> 01:17:16,860
go into the bank

1324
01:17:14,490 --> 01:17:19,410
I send you a number that's two hundred

1325
01:17:16,860 --> 01:17:25,290
and fifty seven bits which is they get a

1326
01:17:19,410 --> 01:17:27,809
es key and this random number I send it

1327
01:17:25,290 --> 01:17:31,490
to you the protocol is a little bit more

1328
01:17:27,810 --> 01:17:35,040
complex I send it to you with a public

1329
01:17:31,490 --> 01:17:42,000
encrypted key but what is the bank

1330
01:17:35,040 --> 01:17:43,530
module the bank has to use its private

1331
01:17:42,000 --> 01:17:47,940
key I've got the public key of the bank

1332
01:17:43,530 --> 01:17:51,540
so what happens with these 2048 248 bits

1333
01:17:47,940 --> 01:17:53,120
it turns out that the key the bank key

1334
01:17:51,540 --> 01:17:57,110
is going to be very very similar and

1335
01:17:53,120 --> 01:18:00,870
Bank to be able to get its session key

1336
01:17:57,110 --> 01:18:04,080
it's gonna have to see two thousand two

1337
01:18:00,870 --> 01:18:06,900
hundred 2048 bits elevated to the power

1338
01:18:04,080 --> 01:18:12,269
of 2048 then the 2048 and that's

1339
01:18:06,900 --> 01:18:14,099
enormous that's why we use something

1340
01:18:12,270 --> 01:18:18,420
completely different but what happens

1341
01:18:14,100 --> 01:18:20,910
here an explanation a rapid explanation

1342
01:18:18,420 --> 01:18:23,070
system is used there's several and the

1343
01:18:20,910 --> 01:18:26,639
most well-known one is that if I want to

1344
01:18:23,070 --> 01:18:29,880
do a rapid exponentiation operation I

1345
01:18:26,640 --> 01:18:32,700
put the number into a binary format and

1346
01:18:29,880 --> 01:18:36,510
so you have the public of Bank E and

1347
01:18:32,700 --> 01:18:40,740
what I do is just something and I say X

1348
01:18:36,510 --> 01:18:43,990
is equal to x squared module and only if

1349
01:18:40,740 --> 01:18:48,019
X is zero if

1350
01:18:43,990 --> 01:18:51,290
otherwise it's X a while two x squared x

1351
01:18:48,020 --> 01:18:53,150
on the base and you get squared squared

1352
01:18:51,290 --> 01:18:55,130
squared and it's just multiplied by base

1353
01:18:53,150 --> 01:19:00,110
and it's very very quick and this is

1354
01:18:55,130 --> 01:19:03,790
basically used to make ascending a

1355
01:19:00,110 --> 01:19:06,920
session key more quick does anybody know

1356
01:19:03,790 --> 01:19:09,590
what a lateral channel attack is have

1357
01:19:06,920 --> 01:19:13,370
you heard about a lateral channel attack

1358
01:19:09,590 --> 01:19:16,520
it was an RSA attack about three and a

1359
01:19:13,370 --> 01:19:20,660
half years ago what happened was the

1360
01:19:16,520 --> 01:19:22,580
machine has noise and noise in this case

1361
01:19:20,660 --> 01:19:25,610
could be a sound and noise that you can

1362
01:19:22,580 --> 01:19:29,350
actually hear it just might be radio

1363
01:19:25,610 --> 01:19:33,740
frequency noise you know that you can

1364
01:19:29,350 --> 01:19:35,240
capture an image that's a hundred meters

1365
01:19:33,740 --> 01:19:38,750
away on a screen if you heard of

1366
01:19:35,240 --> 01:19:41,300
tempests The Tempest attack if not look

1367
01:19:38,750 --> 01:19:43,700
for tempest attack in Internet and there

1368
01:19:41,300 --> 01:19:47,450
are many videos which show that you can

1369
01:19:43,700 --> 01:19:50,420
capture the image from a building 14

1370
01:19:47,450 --> 01:19:54,139
meters away what some researchers have

1371
01:19:50,420 --> 01:19:58,250
discovered is that when I do this

1372
01:19:54,140 --> 01:20:02,870
operation of sending a session key some

1373
01:19:58,250 --> 01:20:05,960
random is two five six I have to encrypt

1374
01:20:02,870 --> 01:20:08,420
it to the public key of the bank elevate

1375
01:20:05,960 --> 01:20:11,660
it to the power and I elevate it to this

1376
01:20:08,420 --> 01:20:14,450
value here but what happens when it goes

1377
01:20:11,660 --> 01:20:21,320
to zero the program what does is an

1378
01:20:14,450 --> 01:20:25,880
x-squared module n x base module 1 and

1379
01:20:21,320 --> 01:20:29,299
they realized that the computer made a

1380
01:20:25,880 --> 01:20:31,490
noise it was one noise 4x squared an X

1381
01:20:29,300 --> 01:20:37,490
or x squared to the base was a different

1382
01:20:31,490 --> 01:20:40,550
noise they didn't know it but their dog

1383
01:20:37,490 --> 01:20:43,400
knew it and the dark and knew in real

1384
01:20:40,550 --> 01:20:45,320
time and know that the key for such a

1385
01:20:43,400 --> 01:20:49,910
person was one zero zero zero one in

1386
01:20:45,320 --> 01:20:51,929
real time of course these were white

1387
01:20:49,910 --> 01:20:55,440
hatted hackers

1388
01:20:51,930 --> 01:20:58,110
so before hanging out on internet they

1389
01:20:55,440 --> 01:21:00,210
warned all those people who were working

1390
01:20:58,110 --> 01:21:05,429
with digital certificates and SSL

1391
01:21:00,210 --> 01:21:09,450
protocols and computers for them to stop

1392
01:21:05,430 --> 01:21:11,910
this so what they did is generated white

1393
01:21:09,450 --> 01:21:15,630
noise so instead of listening quite

1394
01:21:11,910 --> 01:21:18,780
clearly you the value of 24 kilohertz

1395
01:21:15,630 --> 01:21:24,750
which is 0 or 1 you just heard white

1396
01:21:18,780 --> 01:21:27,480
noise so if you you could if you write

1397
01:21:24,750 --> 01:21:29,850
down acoustic attack RSA you can see

1398
01:21:27,480 --> 01:21:31,320
quite clearly all the zeros and ones the

1399
01:21:29,850 --> 01:21:34,830
noises that make but that was used

1400
01:21:31,320 --> 01:21:37,740
that's used to attack not the algorithm

1401
01:21:34,830 --> 01:21:42,900
but a physical manifestation of the

1402
01:21:37,740 --> 01:21:46,679
algorithm in the machine if the key is

1403
01:21:42,900 --> 01:21:49,500
bigger they knew that that it would take

1404
01:21:46,680 --> 01:21:50,850
more time so what they do is they attack

1405
01:21:49,500 --> 01:21:52,860
their physical manifestations of

1406
01:21:50,850 --> 01:21:55,650
algorithm and this everybody has that

1407
01:21:52,860 --> 01:21:58,589
public key one thing that it's just a

1408
01:21:55,650 --> 01:22:02,120
Fickett which has been shown by Firefox

1409
01:21:58,590 --> 01:22:04,560
app is this decimal number and what in

1410
01:22:02,120 --> 01:22:07,110
Internet Explorer it's zero one zero

1411
01:22:04,560 --> 01:22:12,450
zero one it's 24 bits and if you put in

1412
01:22:07,110 --> 01:22:15,929
a decimal it's this 65,536 so once we do

1413
01:22:12,450 --> 01:22:20,960
that what happens this value here

1414
01:22:15,930 --> 01:22:24,920
doesn't have factors of DN if in

1415
01:22:20,960 --> 01:22:27,810
cryptography we are scre value with no

1416
01:22:24,920 --> 01:22:30,780
module then we're trying to find a

1417
01:22:27,810 --> 01:22:36,300
private key and it turns out that

1418
01:22:30,780 --> 01:22:39,990
between this number and E there's no

1419
01:22:36,300 --> 01:22:42,870
common factor then automatically I know

1420
01:22:39,990 --> 01:22:45,389
what the private key is how do you find

1421
01:22:42,870 --> 01:22:47,610
the private key we have to use the

1422
01:22:45,390 --> 01:22:50,910
extended algorithm which is very quick

1423
01:22:47,610 --> 01:22:53,190
and if everybody wants to see it there's

1424
01:22:50,910 --> 01:22:56,930
a video that shows how that can be used

1425
01:22:53,190 --> 01:22:59,309
so it's made the module n is made public

1426
01:22:56,930 --> 01:23:02,100
if you go into properties you can see

1427
01:22:59,310 --> 01:23:06,250
that it's in

1428
01:23:02,100 --> 01:23:08,770
your padlock and internet explorer you

1429
01:23:06,250 --> 01:23:09,910
can go to the digital certificate if you

1430
01:23:08,770 --> 01:23:12,670
want to see where they're working with

1431
01:23:09,910 --> 01:23:18,070
is or another kind of algorithm you have

1432
01:23:12,670 --> 01:23:19,750
to go to the secure page and click on

1433
01:23:18,070 --> 01:23:21,719
the right-hand button and properties and

1434
01:23:19,750 --> 01:23:26,020
chrome

1435
01:23:21,720 --> 01:23:28,710
about a year ago they've changed and now

1436
01:23:26,020 --> 01:23:30,850
you have to go to developer security

1437
01:23:28,710 --> 01:23:35,050
high-level you have to do whole series

1438
01:23:30,850 --> 01:23:37,210
of routes to get to the padlock and find

1439
01:23:35,050 --> 01:23:40,690
out what sort of encryption is being is

1440
01:23:37,210 --> 01:23:44,020
being used RSA IAS or whatever ok the

1441
01:23:40,690 --> 01:23:48,549
strength of this system is simply the

1442
01:23:44,020 --> 01:23:50,890
secret that the user has is the P by Q

1443
01:23:48,550 --> 01:23:52,630
if we don't know the P by Q we can't

1444
01:23:50,890 --> 01:23:56,380
find that they reverse because the

1445
01:23:52,630 --> 01:24:00,400
private key private key D which is the

1446
01:23:56,380 --> 01:24:06,250
bank's key or the secure website is the

1447
01:24:00,400 --> 01:24:08,500
reverse and then you've got a feed in it

1448
01:24:06,250 --> 01:24:12,880
I don't know a feed a in it I know n

1449
01:24:08,500 --> 01:24:17,020
it's a lot smaller so you can't know

1450
01:24:12,880 --> 01:24:20,820
what it is it's madness to try to break

1451
01:24:17,020 --> 01:24:25,540
this and you don't know it if you did

1452
01:24:20,820 --> 01:24:28,389
know P by Q you'd be able to know feed

1453
01:24:25,540 --> 01:24:30,790
in it and be able to calculate in just

1454
01:24:28,390 --> 01:24:33,850
tenths of seconds here we've got the

1455
01:24:30,790 --> 01:24:38,019
typical example of key exchange but

1456
01:24:33,850 --> 01:24:43,260
another has a public key which is e in

1457
01:24:38,020 --> 01:24:47,830
real values 65,000 and so it's gotten n

1458
01:24:43,260 --> 01:24:51,100
value which is a public key and then

1459
01:24:47,830 --> 01:24:53,440
it's got a private key that he found and

1460
01:24:51,100 --> 01:24:56,260
then sends it to allathee has got the

1461
01:24:53,440 --> 01:24:59,910
same public key and a public key and a

1462
01:24:56,260 --> 01:25:03,070
private case what I said before for I

1463
01:24:59,910 --> 01:25:04,780
want Bernardo to descend something to

1464
01:25:03,070 --> 01:25:07,360
and Ethier they do it with the public

1465
01:25:04,780 --> 01:25:09,639
key because only ilithyia has the

1466
01:25:07,360 --> 01:25:11,469
private key to open but if another wants

1467
01:25:09,640 --> 01:25:13,479
to send something sign Joana --there

1468
01:25:11,470 --> 01:25:16,939
she/he does a hash

1469
01:25:13,479 --> 01:25:22,129
so that the signature operation is

1470
01:25:16,939 --> 01:25:24,169
quicker they encrypt it with a private

1471
01:25:22,129 --> 01:25:26,840
key and send it to ilithyia Alethea's

1472
01:25:24,169 --> 01:25:29,840
has got the Barnardo's public key and

1473
01:25:26,840 --> 01:25:33,260
there and B module they can decipher it

1474
01:25:29,840 --> 01:25:36,609
and check the signature so the padlock

1475
01:25:33,260 --> 01:25:39,709
story if we do what we did before of

1476
01:25:36,609 --> 01:25:42,289
closing closing and opening opening

1477
01:25:39,709 --> 01:25:43,459
padlocks doesn't work so after two

1478
01:25:42,289 --> 01:25:47,449
things in order

1479
01:25:43,459 --> 01:25:49,309
if I sign and an I encrypt it's because

1480
01:25:47,449 --> 01:25:52,848
I'm sending something secret

1481
01:25:49,309 --> 01:26:00,789
if I sign and I encrypt with your public

1482
01:25:52,849 --> 01:26:03,800
a code then you have to decipher if I

1483
01:26:00,789 --> 01:26:06,108
encrypt with public one then you first

1484
01:26:03,800 --> 01:26:07,519
have to check your signature and then

1485
01:26:06,109 --> 01:26:09,769
you have to decipher with your public

1486
01:26:07,519 --> 01:26:13,820
key what's the best thing to do is best

1487
01:26:09,769 --> 01:26:15,829
to assign and encrypt or encrypt and

1488
01:26:13,820 --> 01:26:18,799
sign it makes more sense to encrypt and

1489
01:26:15,829 --> 01:26:20,268
then sign because the first thing that

1490
01:26:18,800 --> 01:26:22,189
you're going to do is to check my

1491
01:26:20,269 --> 01:26:25,969
signature for your signatures my

1492
01:26:22,189 --> 01:26:28,699
signatures are valid but if I do sign

1493
01:26:25,969 --> 01:26:31,070
first and then you're in cypher you get

1494
01:26:28,699 --> 01:26:32,839
the decipher and then you check the

1495
01:26:31,070 --> 01:26:34,688
signature it may well be that you find

1496
01:26:32,840 --> 01:26:37,939
that that's are not real so that means

1497
01:26:34,689 --> 01:26:42,289
things doing things in order encrypting

1498
01:26:37,939 --> 01:26:44,899
and signing as I said you've got to be

1499
01:26:42,289 --> 01:26:48,199
able to calculate the reverse how you do

1500
01:26:44,899 --> 01:26:53,539
the operation of a big number and in the

1501
01:26:48,199 --> 01:26:57,409
case of open SSL when you see the kind

1502
01:26:53,539 --> 01:26:59,059
of RSA and look at the P by Q and the

1503
01:26:57,409 --> 01:27:03,199
public key you'll get other values as

1504
01:26:59,059 --> 01:27:06,229
well coefficient 1 coefficient 2 and you

1505
01:27:03,199 --> 01:27:11,388
think what does that mean it's used to

1506
01:27:06,229 --> 01:27:15,769
use the Chinese challenge when I want to

1507
01:27:11,389 --> 01:27:20,929
send you a session P 128 bits it's very

1508
01:27:15,769 --> 01:27:25,020
simple is this number in your module

1509
01:27:20,929 --> 01:27:28,500
your public module is a 256

1510
01:27:25,020 --> 01:27:32,060
it's it's very quickly but when you've

1511
01:27:28,500 --> 01:27:34,920
got to decipher you've got a very big

1512
01:27:32,060 --> 01:27:41,490
number and your private key is very big

1513
01:27:34,920 --> 01:27:44,220
so it takes a long time and what we do

1514
01:27:41,490 --> 01:27:47,809
is use the theory of the Chinese remains

1515
01:27:44,220 --> 01:27:51,930
in which the owner of the key doesn't

1516
01:27:47,810 --> 01:27:53,760
decipher in module n but in module P and

1517
01:27:51,930 --> 01:27:57,390
Q and as I've got P and here I can work

1518
01:27:53,760 --> 01:27:58,860
with that it does more operations but

1519
01:27:57,390 --> 01:28:03,870
they're much quicker because they don't

1520
01:27:58,860 --> 01:28:07,259
just do it in thousands of bits just one

1521
01:28:03,870 --> 01:28:09,630
so they save 70% of the computing time

1522
01:28:07,260 --> 01:28:12,240
do you know how this works you can go to

1523
01:28:09,630 --> 01:28:17,010
crypt to read there's an online course

1524
01:28:12,240 --> 01:28:22,050
there is a course which was organized

1525
01:28:17,010 --> 01:28:26,970
four years ago and you can see how you

1526
01:28:22,050 --> 01:28:29,780
canning this key generation with open ZB

1527
01:28:26,970 --> 01:28:33,000
and you can see how you'd increase

1528
01:28:29,780 --> 01:28:36,960
encryption at deciphering it so having

1529
01:28:33,000 --> 01:28:39,240
said that we've seen how now gonna move

1530
01:28:36,960 --> 01:28:40,800
on to gen RSA this is other kind of

1531
01:28:39,240 --> 01:28:44,280
softwares if you want to go a little bit

1532
01:28:40,800 --> 01:28:49,340
further there's another interesting

1533
01:28:44,280 --> 01:28:51,900
program called a ring and Legend RSA

1534
01:28:49,340 --> 01:28:54,420
I've got about half an hour left so

1535
01:28:51,900 --> 01:28:59,009
let's now go to the practice software

1536
01:28:54,420 --> 01:29:04,770
and in a couple of minutes I'll ask if

1537
01:28:59,010 --> 01:29:07,910
you've got any queries how do i download

1538
01:29:04,770 --> 01:29:07,910
this you go here

1539
01:29:15,400 --> 01:29:28,219
we go to google and you type gen RSA if

1540
01:29:23,270 --> 01:29:36,889
you type here Jin RSA gen Ric is a Fame

1541
01:29:28,219 --> 01:29:40,780
famous command I feel but gen RSA you'll

1542
01:29:36,889 --> 01:29:43,730
see quite obviously that it's a command

1543
01:29:40,780 --> 01:29:47,210
it's one of the most known but first of

1544
01:29:43,730 --> 01:29:49,718
all you get this software this is our

1545
01:29:47,210 --> 01:29:53,510
new version that's just been brought out

1546
01:29:49,719 --> 01:29:56,150
we've got the most recent compilation is

1547
01:29:53,510 --> 01:30:00,650
October this year and you can do any

1548
01:29:56,150 --> 01:30:04,339
kind of operations with gen RSA so if we

1549
01:30:00,650 --> 01:30:10,480
download this we've got it here so

1550
01:30:04,340 --> 01:30:17,320
download and there you can see dot heart

1551
01:30:10,480 --> 01:30:20,320
there it is it's starting it's booting

1552
01:30:17,320 --> 01:30:23,780
I've got others that I've already booted

1553
01:30:20,320 --> 01:30:28,280
I'm gonna remove this one I'm gonna open

1554
01:30:23,780 --> 01:30:32,210
the other dot hearts oil booted again

1555
01:30:28,280 --> 01:30:34,969
but when we boot it you it shows you

1556
01:30:32,210 --> 01:30:36,980
that it's loading software's loading and

1557
01:30:34,969 --> 01:30:40,099
once again we've got the program on our

1558
01:30:36,980 --> 01:30:43,000
screen it's a very simple program we

1559
01:30:40,099 --> 01:30:45,440
just put the P times Q prime numbers

1560
01:30:43,000 --> 01:30:47,119
then we'll look at the public key in a

1561
01:30:45,440 --> 01:30:50,710
public world

1562
01:30:47,119 --> 01:30:53,299
whichever one you want or sixty five

1563
01:30:50,710 --> 01:30:59,650
thousand four hundred thirty seven you

1564
01:30:53,300 --> 01:31:02,599
can use decimal units or not as you want

1565
01:30:59,650 --> 01:31:09,170
once I have this I can generate the key

1566
01:31:02,599 --> 01:31:14,690
in manually or automatically as OpenSSL

1567
01:31:09,170 --> 01:31:19,670
dos you generate 2048 bits in a command

1568
01:31:14,690 --> 01:31:21,409
mode OpenSSL space generate 204 eight

1569
01:31:19,670 --> 01:31:25,280
space Mikey

1570
01:31:21,409 --> 01:31:27,129
you have a file called Mikey and it

1571
01:31:25,280 --> 01:31:33,070
gives you the key it doesn't

1572
01:31:27,130 --> 01:31:37,980
to anything it's 2048 bits in the the

1573
01:31:33,070 --> 01:31:37,980
public keys is the next number that's it

1574
01:31:39,030 --> 01:31:48,070
in this type of programs yeah

1575
01:31:42,460 --> 01:31:53,260
I asked an automatic key by default 32

1576
01:31:48,070 --> 01:32:00,070
bits like decimal please this is

1577
01:31:53,260 --> 01:32:02,920
interesting feature here CDN that they

1578
01:32:00,070 --> 01:32:06,070
use it only knows I can force that the

1579
01:32:02,920 --> 01:32:09,610
public key is always six five five three

1580
01:32:06,070 --> 01:32:16,330
seven not the smallest number it has to

1581
01:32:09,610 --> 01:32:19,839
be the odd number because it has to be

1582
01:32:16,330 --> 01:32:24,630
one what happens it's been minus 1 and Q

1583
01:32:19,840 --> 01:32:24,630
minus 1 it's a prime number so it's 1 is

1584
01:32:25,710 --> 01:32:32,980
it's even and the other one is odd I can

1585
01:32:30,219 --> 01:32:36,460
force on the public keys this value and

1586
01:32:32,980 --> 01:32:39,849
and they are the same size open as a

1587
01:32:36,460 --> 01:32:43,030
cell does it by default so automatic

1588
01:32:39,850 --> 01:32:47,040
generation of the key here I have like 6

1589
01:32:43,030 --> 01:32:51,670
bits six bits 82 bits that's the key

1590
01:32:47,040 --> 01:32:57,960
it's a bigger key here 100 bits and then

1591
01:32:51,670 --> 01:33:02,290
when do serious case 100 people say P so

1592
01:32:57,960 --> 01:33:04,300
the value is very small 17 bits the

1593
01:33:02,290 --> 01:33:05,110
modulus are hundreds what happens with a

1594
01:33:04,300 --> 01:33:10,150
private key

1595
01:33:05,110 --> 01:33:13,929
it's very close to the end module key so

1596
01:33:10,150 --> 01:33:18,940
if I force my public key to have only 17

1597
01:33:13,929 --> 01:33:23,020
bits and turn it into 205 for eight it's

1598
01:33:18,940 --> 01:33:26,070
the private key is 2047 or 2048 it's

1599
01:33:23,020 --> 01:33:26,070
very difficult to guess

1600
01:33:28,250 --> 01:33:41,550
I'm going to generate another key to

1601
01:33:31,560 --> 01:33:44,310
have different keys number of on the

1602
01:33:41,550 --> 01:33:46,739
several keys why open SSL doesn't take

1603
01:33:44,310 --> 01:33:50,910
this into account what are these numbers

1604
01:33:46,739 --> 01:33:52,919
that you don't know this case that do

1605
01:33:50,910 --> 01:33:57,930
the same that you privately this pier

1606
01:33:52,920 --> 01:34:01,350
keys this is a bank key I would send in

1607
01:33:57,930 --> 01:34:03,239
a secret way a session key with this

1608
01:34:01,350 --> 01:34:05,730
number reducing it to this module and

1609
01:34:03,239 --> 01:34:08,309
the bank with this value of this private

1610
01:34:05,730 --> 01:34:09,870
key can only recover this but you can

1611
01:34:08,310 --> 01:34:12,930
recover it with this value and with

1612
01:34:09,870 --> 01:34:16,680
these other values what happens is that

1613
01:34:12,930 --> 01:34:18,750
those pair private keys are not known by

1614
01:34:16,680 --> 01:34:21,540
the user it's dangerous I don't want

1615
01:34:18,750 --> 01:34:24,180
other keys that I don't know and did

1616
01:34:21,540 --> 01:34:29,220
that do the same we're working working

1617
01:34:24,180 --> 01:34:32,550
with big figures big numbers it's 2,000

1618
01:34:29,220 --> 01:34:39,390
for 48 bits that's big numbers and it's

1619
01:34:32,550 --> 01:34:42,630
generated automatically he have 2048

1620
01:34:39,390 --> 01:34:45,540
bits in the module 17 module of bits

1621
01:34:42,630 --> 01:34:51,290
it's the public key in the feed en is

1622
01:34:45,540 --> 01:34:56,670
exactly the same 2048 the private key is

1623
01:34:51,290 --> 01:35:00,600
200 2047 but not much less instead of

1624
01:34:56,670 --> 01:35:05,220
having one let's see if I have others

1625
01:35:00,600 --> 01:35:14,430
appearing some examples because this

1626
01:35:05,220 --> 01:35:24,470
computer is very slow it's very slow

1627
01:35:14,430 --> 01:35:27,470
indeed if you think I have a 3038

1628
01:35:24,470 --> 01:35:27,470
numbers

1629
01:35:30,310 --> 01:35:37,030
even though this key could be a key for

1630
01:35:34,430 --> 01:35:40,700
any back factor having how those many

1631
01:35:37,030 --> 01:35:42,830
that many private keys that in fact it's

1632
01:35:40,700 --> 01:35:47,420
not it's not very nice it's not only up

1633
01:35:42,830 --> 01:35:51,890
to and key we have at least one of these

1634
01:35:47,420 --> 01:35:54,170
pair private keys at least we will have

1635
01:35:51,890 --> 01:35:58,520
one of them if you want to take care of

1636
01:35:54,170 --> 01:36:03,050
the prime numbers P and Q like OpenSSL

1637
01:35:58,520 --> 01:36:05,930
instead of one akin for 40 50 or 13,000

1638
01:36:03,050 --> 01:36:09,920
57 I don't like this what happens is

1639
01:36:05,930 --> 01:36:17,180
that those keys the smallest one there's

1640
01:36:09,920 --> 01:36:22,220
more is one the smallest one has two

1641
01:36:17,180 --> 01:36:26,870
thousand thirty five bits I can break a

1642
01:36:22,220 --> 01:36:28,180
number of 3035 bits with brute force no

1643
01:36:26,870 --> 01:36:30,890
I can't

1644
01:36:28,180 --> 01:36:33,170
I'm not worried about that how can we

1645
01:36:30,890 --> 01:36:37,130
minimize this to have just one because I

1646
01:36:33,170 --> 01:36:37,750
I love the optimal key I click here and

1647
01:36:37,130 --> 01:36:41,360
I said

1648
01:36:37,750 --> 01:36:43,520
secure prime numbers it's my prime

1649
01:36:41,360 --> 01:36:46,250
multiplied by 2 plus 1 that's still

1650
01:36:43,520 --> 01:36:52,190
prime for instance 23 it's a secure

1651
01:36:46,250 --> 01:36:55,580
prime this the total is 23 23 is a

1652
01:36:52,190 --> 01:36:57,379
primates a secure prime strong Prime's -

1653
01:36:55,580 --> 01:36:59,570
there's a difference between the both

1654
01:36:57,380 --> 01:37:03,770
but if I work with secure primes

1655
01:36:59,570 --> 01:37:09,139
this number is always 1 this is your key

1656
01:37:03,770 --> 01:37:11,480
with 3037 pair pair private keys well

1657
01:37:09,140 --> 01:37:14,510
your key is as good as mine yours is

1658
01:37:11,480 --> 01:37:18,799
horrible because with this program it's

1659
01:37:14,510 --> 01:37:22,700
not very handsome but OpenSSL it's

1660
01:37:18,800 --> 01:37:28,090
something that it's generating various

1661
01:37:22,700 --> 01:37:31,460
keys with as I said SSL and 10 or 12

1662
01:37:28,090 --> 01:37:34,160
keys will have this pair private keys

1663
01:37:31,460 --> 01:37:36,500
but others will have more than 14 it

1664
01:37:34,160 --> 01:37:38,210
doesn't use secure prime numbers

1665
01:37:36,500 --> 01:37:40,340
otherwise there will be a hundred

1666
01:37:38,210 --> 01:37:44,450
percent with one key

1667
01:37:40,340 --> 01:37:47,660
doesn't worry with that I can't speak

1668
01:37:44,450 --> 01:37:50,720
about paired private keys if if I

1669
01:37:47,660 --> 01:37:52,130
explain this to know IT person maybe

1670
01:37:50,720 --> 01:37:55,730
they will believe that this is a

1671
01:37:52,130 --> 01:37:58,520
vulnerable key this type of keys is not

1672
01:37:55,730 --> 01:38:02,240
a vulnerability there are many many here

1673
01:37:58,520 --> 01:38:04,220
one of 3,000 all of them are in the kind

1674
01:38:02,240 --> 01:38:06,010
of a cloud near the motrin so there's no

1675
01:38:04,220 --> 01:38:10,280
problem

1676
01:38:06,010 --> 01:38:12,830
the non-separable numbers are in plain

1677
01:38:10,280 --> 01:38:16,269
because I'm going to cipher numbers that

1678
01:38:12,830 --> 01:38:19,990
are in the module this sizable numbers a

1679
01:38:16,270 --> 01:38:24,410
value up to X and module M

1680
01:38:19,990 --> 01:38:28,610
I'm ciphering the numbers to end until

1681
01:38:24,410 --> 01:38:32,300
minus 1 if I sent the 0 I generate a

1682
01:38:28,610 --> 01:38:35,660
random value for the key 128 bits and to

1683
01:38:32,300 --> 01:38:41,980
0 0 everything is 0 it's a number it's

1684
01:38:35,660 --> 01:38:48,230
valid all zeros 1 these are plain

1685
01:38:41,980 --> 01:38:53,000
numbers 1 up to module 1 n is 1 if if I

1686
01:38:48,230 --> 01:38:56,509
did n minus 1 76 up to I don't know how

1687
01:38:53,000 --> 01:39:00,740
many module 77 I will be in plane 3 in

1688
01:38:56,510 --> 01:39:03,860
plane another one it's very simple n

1689
01:39:00,740 --> 01:39:11,510
minus 1 and then six others at least in

1690
01:39:03,860 --> 01:39:15,320
plain text and don't take care of the P

1691
01:39:11,510 --> 01:39:18,920
and Q instead of 40 60 I have keys of

1692
01:39:15,320 --> 01:39:21,980
30,000 40,000 it's it's crazy

1693
01:39:18,920 --> 01:39:24,460
I have 40,000 numbers in plane I'm not

1694
01:39:21,980 --> 01:39:30,679
going to give you this session key I

1695
01:39:24,460 --> 01:39:35,720
sent you 128 key with AES I reduce it to

1696
01:39:30,680 --> 01:39:38,780
the module 2004 of Oh 48 and there you

1697
01:39:35,720 --> 01:39:43,660
can find it the key possibility that

1698
01:39:38,780 --> 01:39:48,940
this happens is completely improbable

1699
01:39:43,660 --> 01:39:52,150
a number within 2048 bits okay one of

1700
01:39:48,940 --> 01:39:54,160
the keys that they are is here it's very

1701
01:39:52,150 --> 01:39:57,969
difficult to find them one of these

1702
01:39:54,160 --> 01:40:01,090
numbers are in plane and it has to be a

1703
01:39:57,970 --> 01:40:04,420
number with only 128 bits that's

1704
01:40:01,090 --> 01:40:07,330
improbable very unlikely but if I'm

1705
01:40:04,420 --> 01:40:09,850
generating a key it's 5,000 not

1706
01:40:07,330 --> 01:40:12,220
non-separable numbers some of them are

1707
01:40:09,850 --> 01:40:17,080
in the 128 bits but it's quite it's

1708
01:40:12,220 --> 01:40:19,260
quite impossible the random number that

1709
01:40:17,080 --> 01:40:27,250
my machine has generated it could be

1710
01:40:19,260 --> 01:40:29,170
just one up to you 128 probabilities

1711
01:40:27,250 --> 01:40:31,540
it's just a number out of the new

1712
01:40:29,170 --> 01:40:34,150
inseparable in numbers of the bandits

1713
01:40:31,540 --> 01:40:37,330
totally impossible to find it this is

1714
01:40:34,150 --> 01:40:40,900
very academic this is not take into

1715
01:40:37,330 --> 01:40:43,780
account so when we we will generate keys

1716
01:40:40,900 --> 01:40:47,110
with opens it sell it gives me the prime

1717
01:40:43,780 --> 01:40:52,259
Q prime P the module public public and

1718
01:40:47,110 --> 01:40:52,259
private keys and coefficient 1 and 2 and

1719
01:40:53,190 --> 01:41:01,540
pero no se preocupe Edisto and the

1720
01:40:56,140 --> 01:41:06,420
exponential it doesn't use secure prime

1721
01:41:01,540 --> 01:41:08,950
numbers I have a number of 80 bits and

1722
01:41:06,420 --> 01:41:11,770
then it says that I have to work with

1723
01:41:08,950 --> 01:41:15,880
Prime's away secure prime numbers I

1724
01:41:11,770 --> 01:41:20,710
always have one and nine one and nine

1725
01:41:15,880 --> 01:41:24,610
that's all you know but necessary we

1726
01:41:20,710 --> 01:41:26,890
would have optimum keys but it's not bad

1727
01:41:24,610 --> 01:41:30,580
to have a key here with a lots of

1728
01:41:26,890 --> 01:41:35,440
hundreds of thousands of pairs private

1729
01:41:30,580 --> 01:41:40,480
keys and non-separable numbers so I take

1730
01:41:35,440 --> 01:41:44,178
the secure Prime's out I have pair

1731
01:41:40,480 --> 01:41:47,570
secure and private please

1732
01:41:44,179 --> 01:41:50,059
it's easy once I know one I know the at

1733
01:41:47,570 --> 01:41:52,369
rest they non-separable numbers that's

1734
01:41:50,059 --> 01:41:55,880
difficult because you need to launch an

1735
01:41:52,369 --> 01:41:57,710
attack with first brute force I need to

1736
01:41:55,880 --> 01:41:59,900
know if this P and Q numbers are not

1737
01:41:57,710 --> 01:42:03,650
separable or they are maybe the next

1738
01:41:59,900 --> 01:42:07,009
value 0 1 2 3 4 up to P minus 1 another

1739
01:42:03,650 --> 01:42:10,280
X values 0 1 until Q minus 1 are they

1740
01:42:07,010 --> 01:42:14,210
acceptable or not alright they encrypted

1741
01:42:10,280 --> 01:42:20,150
I have to do various rounds of

1742
01:42:14,210 --> 01:42:21,590
Exponential's so thousands of trials for

1743
01:42:20,150 --> 01:42:22,789
P and for Q it's totally impossible

1744
01:42:21,590 --> 01:42:25,639
nobody can do this

1745
01:42:22,789 --> 01:42:28,130
so these non-separable numbers are in a

1746
01:42:25,639 --> 01:42:31,579
real key are not going to be dissipated

1747
01:42:28,130 --> 01:42:34,730
it's a simple key with 80 bits which

1748
01:42:31,579 --> 01:42:38,329
takes us half a minute 80 seconds to

1749
01:42:34,730 --> 01:42:40,610
find these numbers these 387 because

1750
01:42:38,329 --> 01:42:45,710
there are very low values but if we work

1751
01:42:40,610 --> 01:42:47,869
with real keys with 128 bits we can't

1752
01:42:45,710 --> 01:42:55,969
learn and discover those names we don't

1753
01:42:47,869 --> 01:43:04,250
just know oh 1 or minus 1 this has no

1754
01:42:55,969 --> 01:43:05,449
vulnerability ok let's go to attacks we

1755
01:43:04,250 --> 01:43:09,199
have 20 minutes left

1756
01:43:05,449 --> 01:43:17,079
do you have a questions before going

1757
01:43:09,199 --> 01:43:17,079
ahead about this no Jen RSA no attacks I

1758
01:43:17,349 --> 01:43:23,739
was here yes this is the attacks slide

1759
01:43:24,520 --> 01:43:31,400
whatever tax for all right Jen are three

1760
01:43:29,119 --> 01:43:34,339
types apart from the attacker I

1761
01:43:31,400 --> 01:43:37,730
mentioned before the acoustic one based

1762
01:43:34,340 --> 01:43:42,050
on natural channel if you can look for

1763
01:43:37,730 --> 01:43:47,769
that for that in at in Google it's a PDF

1764
01:43:42,050 --> 01:43:47,770
document 15 pages with photos

1765
01:43:48,489 --> 01:43:54,379
they were getting the signals where the

1766
01:43:50,869 --> 01:43:57,170
telephone was raised easy you don't need

1767
01:43:54,380 --> 01:44:00,999
to be a super spy in the NSA we could

1768
01:43:57,170 --> 01:44:06,590
break that with just a single from

1769
01:44:00,999 --> 01:44:10,670
factorize on the N number in PDQ you can

1770
01:44:06,590 --> 01:44:13,280
factorize numbers in 70 80 bits if I

1771
01:44:10,670 --> 01:44:16,940
want to be more serious I will work with

1772
01:44:13,280 --> 01:44:20,960
NSE ever that you I didn't put here with

1773
01:44:16,940 --> 01:44:25,669
a message in command mode 320 bits okay

1774
01:44:20,960 --> 01:44:26,920
in a machine you can break it in PDQ in

1775
01:44:25,670 --> 01:44:33,769
an hour

1776
01:44:26,920 --> 01:44:40,039
depends on the machine 320 bits 330 bits

1777
01:44:33,769 --> 01:44:43,159
it's four days 340 days eight weeks it's

1778
01:44:40,039 --> 01:44:46,639
a software that you can download NSE

1779
01:44:43,159 --> 01:44:48,619
Evan you can factorize numbers I have

1780
01:44:46,639 --> 01:44:51,320
some exercises you if you want to see it

1781
01:44:48,619 --> 01:44:54,710
you can send me a mail you see the

1782
01:44:51,320 --> 01:44:59,960
exponential curve when factorize numbers

1783
01:44:54,710 --> 01:45:05,019
of 320 bits my PC took an hour and a

1784
01:44:59,960 --> 01:45:09,469
quarter to do that to factorize numbers

1785
01:45:05,019 --> 01:45:13,780
I'm going to use this software if I

1786
01:45:09,469 --> 01:45:18,760
factorize factorize n in p and q FP q

1787
01:45:13,780 --> 01:45:22,400
but P minus 1 Q minus 1 and I found the

1788
01:45:18,760 --> 01:45:22,969
inverse number in nanoseconds it's very

1789
01:45:22,400 --> 01:45:26,329
difficult

1790
01:45:22,969 --> 01:45:29,150
more than eight hundred bits has never

1791
01:45:26,329 --> 01:45:31,759
been factorized premier factorization is

1792
01:45:29,150 --> 01:45:34,039
that you cannot edit it you can choose

1793
01:45:31,760 --> 01:45:38,050
factorize there's a lot of programs to

1794
01:45:34,039 --> 01:45:43,219
factorize seven or eight ten programs

1795
01:45:38,050 --> 01:45:45,289
different for factorizing this do it one

1796
01:45:43,219 --> 01:45:47,659
we do it one after the other you can't

1797
01:45:45,289 --> 01:45:51,259
stop because other attacks that are

1798
01:45:47,659 --> 01:45:55,909
quite nice but you can't attack one is

1799
01:45:51,260 --> 01:45:58,429
cyclic encryption attack it breaks what

1800
01:45:55,909 --> 01:46:01,848
i've done i have a confidential message

1801
01:45:58,429 --> 01:46:05,510
this secret number i send it to you with

1802
01:46:01,849 --> 01:46:06,860
your public key and you can only cipher

1803
01:46:05,510 --> 01:46:10,699
that with a private key

1804
01:46:06,860 --> 01:46:12,768
if anybody has he your public key they

1805
01:46:10,699 --> 01:46:14,419
can encrypt it but it takes a lot of

1806
01:46:12,769 --> 01:46:16,670
time with your private key it's very

1807
01:46:14,420 --> 01:46:20,360
easy but if they have your public key

1808
01:46:16,670 --> 01:46:23,420
and you're the victim they know your

1809
01:46:20,360 --> 01:46:26,839
public key your e and your l module if

1810
01:46:23,420 --> 01:46:31,070
anybody sends you a secret value its

1811
01:46:26,840 --> 01:46:34,909
cyclic encryption so it it captures the

1812
01:46:31,070 --> 01:46:38,478
in cryptogram and this value is put up

1813
01:46:34,909 --> 01:46:40,789
to your private key it and it pertains

1814
01:46:38,479 --> 01:46:44,539
another value of this value is activated

1815
01:46:40,789 --> 01:46:47,960
to your public key in a cyclic way until

1816
01:46:44,539 --> 01:46:54,259
it gets the first value and he knows

1817
01:46:47,960 --> 01:46:56,960
what's the secret this allows you to do

1818
01:46:54,260 --> 01:47:01,249
very nice attacks for 60 80 bits in in

1819
01:46:56,960 --> 01:47:03,739
the lab it takes a several minutes for

1820
01:47:01,249 --> 01:47:09,460
big keys a thousand bits it's totally

1821
01:47:03,739 --> 01:47:12,320
impossible have your attack it's the

1822
01:47:09,460 --> 01:47:15,050
birthday paradox attack you know what is

1823
01:47:12,320 --> 01:47:18,558
that I know what that is you've seen it

1824
01:47:15,050 --> 01:47:27,110
the birthday paradox attack I just want

1825
01:47:18,559 --> 01:47:29,659
to okay it's be easy it's not here this

1826
01:47:27,110 --> 01:47:35,960
is the board and from one generator to

1827
01:47:29,659 --> 01:47:37,820
31st of December we can get all out of

1828
01:47:35,960 --> 01:47:40,610
the room and you come back my birthday

1829
01:47:37,820 --> 01:47:43,219
is on the 4th of January my birthday is

1830
01:47:40,610 --> 01:47:45,348
the 8th of December and it and there's

1831
01:47:43,219 --> 01:47:49,789
one thing I'm Leo a to this and oh it's

1832
01:47:45,349 --> 01:47:53,590
already there there's a collision we get

1833
01:47:49,789 --> 01:47:58,099
out and we repeat that 10 times

1834
01:47:53,590 --> 01:48:01,190
probability that one birthday he's

1835
01:47:58,099 --> 01:48:03,679
already taken on the screen when 23

1836
01:48:01,190 --> 01:48:08,150
people in inside is more than 50% that's

1837
01:48:03,679 --> 01:48:12,019
it that's true the trust level so it's a

1838
01:48:08,150 --> 01:48:13,759
paradox 365 years days a year

1839
01:48:12,019 --> 01:48:16,969
I was possible that with 20

1840
01:48:13,760 --> 01:48:18,949
three people 15 probabilities and

1841
01:48:16,969 --> 01:48:23,409
probabilities that my birthday is taken

1842
01:48:18,949 --> 01:48:26,329
my my my birthday is 22nd of January and

1843
01:48:23,409 --> 01:48:29,119
maybe nobody hears it's called the same

1844
01:48:26,329 --> 01:48:31,579
birthday but you I take you person at

1845
01:48:29,119 --> 01:48:33,619
random with 23 people maybe they will

1846
01:48:31,579 --> 01:48:37,579
but--but already a collision in the day

1847
01:48:33,619 --> 01:48:40,518
of your birthday you 8th January for

1848
01:48:37,579 --> 01:48:45,558
December for December but just once this

1849
01:48:40,519 --> 01:48:48,940
type of attack it's not done in two

1850
01:48:45,559 --> 01:48:50,829
exponential N number of bits but and

1851
01:48:48,940 --> 01:48:56,619
halves

1852
01:48:50,829 --> 01:49:02,058
this is the first function of 128 bits

1853
01:48:56,619 --> 01:49:06,739
they do exponent exponential 264 it's

1854
01:49:02,059 --> 01:49:08,900
very low so the birthday paradox attack

1855
01:49:06,739 --> 01:49:14,119
allows you to do an attack where the

1856
01:49:08,900 --> 01:49:19,610
number of trials is very low because the

1857
01:49:14,119 --> 01:49:23,030
exponential is divided by 2 so 30 60 so

1858
01:49:19,610 --> 01:49:26,150
it's the 365 days a year you have a

1859
01:49:23,030 --> 01:49:29,960
possibility to search that in Google the

1860
01:49:26,150 --> 01:49:32,150
birthday paradox in it's more

1861
01:49:29,960 --> 01:49:36,260
interesting in Jenna or si there's a

1862
01:49:32,150 --> 01:49:39,699
software called Legendre they say this

1863
01:49:36,260 --> 01:49:45,679
software allowed you to do a tax of a

1864
01:49:39,699 --> 01:49:49,730
thousand million keys per second you can

1865
01:49:45,679 --> 01:49:57,170
do it in your lab but the RSA values are

1866
01:49:49,730 --> 01:50:00,619
2048 bits if it was 128 bits or 256 bits

1867
01:49:57,170 --> 01:50:04,340
well the inner hash we could break it in

1868
01:50:00,619 --> 01:50:06,739
a couple of minutes but the RSA keys are

1869
01:50:04,340 --> 01:50:08,539
very high in bits so this type of

1870
01:50:06,739 --> 01:50:10,699
attacks is very difficult if you want to

1871
01:50:08,539 --> 01:50:16,699
make an operation you can do it with

1872
01:50:10,699 --> 01:50:19,190
this program you can launch an attack

1873
01:50:16,699 --> 01:50:21,710
divide and you will win I have a machine

1874
01:50:19,190 --> 01:50:25,250
with a processors

1875
01:50:21,710 --> 01:50:30,830
I have a rage or 1 million attacks per

1876
01:50:25,250 --> 01:50:32,930
second have 100 machines it's 100,000

1877
01:50:30,830 --> 01:50:36,530
million keys per second that's

1878
01:50:32,930 --> 01:50:42,290
interesting we work with a very big keys

1879
01:50:36,530 --> 01:50:44,660
in RSA imagine it's in a botnet that is

1880
01:50:42,290 --> 01:50:47,090
very good so we could its huge numbers

1881
01:50:44,660 --> 01:50:52,580
and we can't attack it but we can you

1882
01:50:47,090 --> 01:50:55,790
can try in the lab gen RSA it's very

1883
01:50:52,580 --> 01:50:58,820
simple it's very funny with end gen or I

1884
01:50:55,790 --> 01:51:02,480
say if I want to sign and digitally we

1885
01:50:58,820 --> 01:51:07,700
have this real good real key clean data

1886
01:51:02,480 --> 01:51:13,790
I can say that extra decimal we will

1887
01:51:07,700 --> 01:51:17,440
create a key to 100 2048 bits the key

1888
01:51:13,790 --> 01:51:23,540
here is extra decimal instead of being

1889
01:51:17,440 --> 01:51:26,540
65,000 etc it's 1 0 0 0 1 the digital

1890
01:51:23,540 --> 01:51:30,320
certificate shown by Internet Explorer's

1891
01:51:26,540 --> 01:51:34,430
shows 0 1 0 0 0 1 with 24 bits in 3

1892
01:51:30,320 --> 01:51:42,099
bytes so yeah I generated in an

1893
01:51:34,430 --> 01:51:47,330
automatic way here we have the key pad

1894
01:51:42,100 --> 01:51:52,070
private key the public keys very small

1895
01:51:47,330 --> 01:51:54,650
the mode and the private key 2046 we

1896
01:51:52,070 --> 01:51:57,700
can't break it if I wanted to cipher a

1897
01:51:54,650 --> 01:52:02,179
number it's easy operations

1898
01:51:57,700 --> 01:52:04,630
cipher decipher any number this one next

1899
01:52:02,180 --> 01:52:04,630
the same Oh

1900
01:52:07,749 --> 01:52:18,139
just a minute any number I want to

1901
01:52:12,710 --> 01:52:23,150
cipher it the hexadecimal is this value

1902
01:52:18,139 --> 01:52:26,440
I can say I want to use text with text

1903
01:52:23,150 --> 01:52:30,499
hello how you how are you we can do it

1904
01:52:26,440 --> 01:52:32,659
it's just for the lab I could we need to

1905
01:52:30,499 --> 01:52:37,070
code it don't code it what is the size

1906
01:52:32,659 --> 01:52:42,440
of my module module has 428 bits

1907
01:52:37,070 --> 01:52:44,960
I have blocks of 3 by 4 3 by a to 24

1908
01:52:42,440 --> 01:52:49,610
that's a way I have different numbers

1909
01:52:44,960 --> 01:52:51,769
within the 28 bit block 2048 so it's a

1910
01:52:49,610 --> 01:52:53,420
big text we don't use it in practice

1911
01:52:51,769 --> 01:52:55,969
because we don't use it to cipher

1912
01:52:53,420 --> 01:52:58,249
documents boy we can use text once I

1913
01:52:55,969 --> 01:53:01,219
have this value this is what value I'm

1914
01:52:58,249 --> 01:53:08,449
going to decipher there's no science

1915
01:53:01,219 --> 01:53:11,630
behind this so if anybody has a doubt we

1916
01:53:08,449 --> 01:53:14,329
could do a cipher and deciphering

1917
01:53:11,630 --> 01:53:17,869
operation with a library sort of in the

1918
01:53:14,329 --> 01:53:21,380
internet mobile fish mobile fish do you

1919
01:53:17,869 --> 01:53:23,018
know it it's a very good site 25 million

1920
01:53:21,380 --> 01:53:26,980
different things

1921
01:53:23,019 --> 01:53:32,920
the open SSL I downloaded it from here

1922
01:53:26,980 --> 01:53:32,919
the mobile fish is a website

1923
01:53:37,199 --> 01:53:44,769
and Tata said my wife wish I could say

1924
01:53:40,060 --> 01:53:46,390
yeah you have a website with 25 million

1925
01:53:44,770 --> 01:53:47,170
things that you can do very interesting

1926
01:53:46,390 --> 01:53:51,840
indeed

1927
01:53:47,170 --> 01:53:54,790
you can you work with a big numbers

1928
01:53:51,840 --> 01:53:56,050
there are mathematical items that are

1929
01:53:54,790 --> 01:53:59,199
really interesting you can test these

1930
01:53:56,050 --> 01:54:02,440
numbers with this software mobile fishes

1931
01:53:59,199 --> 01:54:06,849
as an extra for attacks that's the most

1932
01:54:02,440 --> 01:54:09,250
important part and I have little time

1933
01:54:06,850 --> 01:54:11,830
for that with small numbers let's do

1934
01:54:09,250 --> 01:54:15,940
attacks it's gonna be fast we're not

1935
01:54:11,830 --> 01:54:19,030
going to use a 2048-bit key it's going

1936
01:54:15,940 --> 01:54:22,570
to be fast and I'm going to put the

1937
01:54:19,030 --> 01:54:27,190
numbers instead of a hexadecimal I use

1938
01:54:22,570 --> 01:54:28,650
the decimals very smoky 48 bits that's

1939
01:54:27,190 --> 01:54:32,080
easy

1940
01:54:28,650 --> 01:54:35,199
public key keep small key and I

1941
01:54:32,080 --> 01:54:41,980
generated automatically this is a public

1942
01:54:35,199 --> 01:54:43,870
key generated here so the public key is

1943
01:54:41,980 --> 01:54:47,110
not the standard one it chooses the

1944
01:54:43,870 --> 01:54:49,900
smallest number three or five or seven

1945
01:54:47,110 --> 01:54:52,269
or nine wasn't were not accepted it's

1946
01:54:49,900 --> 01:54:56,639
the eleven number eleven is as small as

1947
01:54:52,270 --> 01:55:01,960
possible factorizing attacks a

1948
01:54:56,640 --> 01:55:04,860
factorizing into two seconds but if you

1949
01:55:01,960 --> 01:55:08,650
want to work to with factorizing

1950
01:55:04,860 --> 01:55:11,040
elements um sieve 153 that's the program

1951
01:55:08,650 --> 01:55:15,940
three hundred bits you can break it in

1952
01:55:11,040 --> 01:55:18,430
several minutes here factorizing you can

1953
01:55:15,940 --> 01:55:22,719
do your lab practices let's do the

1954
01:55:18,430 --> 01:55:25,030
cyclically tak in the cyclical type of

1955
01:55:22,719 --> 01:55:27,699
attacks here you have the safe ciphered

1956
01:55:25,030 --> 01:55:30,190
message and the original message let's

1957
01:55:27,699 --> 01:55:31,599
see what would be the ciphered message

1958
01:55:30,190 --> 01:55:36,120
the encrypted message I want to send

1959
01:55:31,600 --> 01:55:36,120
this guy this message one two three four

1960
01:55:40,400 --> 01:55:46,129
this window says okay the value I want

1961
01:55:43,020 --> 01:55:52,190
to send is one two three four five

1962
01:55:46,130 --> 01:55:55,760
ciphering data this is a cryptogram okay

1963
01:55:52,190 --> 01:55:58,200
this is a cryptogram control see I

1964
01:55:55,760 --> 01:56:00,810
forget about the figure the message was

1965
01:55:58,200 --> 01:56:03,750
one two three four five I thought this

1966
01:56:00,810 --> 01:56:06,660
guy in a cyclic way the cryptogram was

1967
01:56:03,750 --> 01:56:08,580
the same one two three four five I only

1968
01:56:06,660 --> 01:56:12,900
know about the victim is the public

1969
01:56:08,580 --> 01:56:15,600
exponential and the module I asked a

1970
01:56:12,900 --> 01:56:21,349
series of ciphering until it gets to the

1971
01:56:15,600 --> 01:56:24,060
key look start it takes this number here

1972
01:56:21,350 --> 01:56:26,010
put it up to the volume to the

1973
01:56:24,060 --> 01:56:27,810
explanation reduced to the module that's

1974
01:56:26,010 --> 01:56:30,570
the number again it's doing the same

1975
01:56:27,810 --> 01:56:33,000
cyclically it's a cycle and one two

1976
01:56:30,570 --> 01:56:37,290
three four five will appear it's going

1977
01:56:33,000 --> 01:56:40,770
to be very fast it's a cycle in round

1978
01:56:37,290 --> 01:56:42,870
eight thousand nine hundred I found one

1979
01:56:40,770 --> 01:56:44,670
two three four five until that moment I

1980
01:56:42,870 --> 01:56:46,800
didn't know it was a secret number when

1981
01:56:44,670 --> 01:56:50,280
I ciphered one two three four five

1982
01:56:46,800 --> 01:56:53,010
I caught Warne do we have this big

1983
01:56:50,280 --> 01:56:58,110
number so the previous round was the

1984
01:56:53,010 --> 01:57:02,120
plaintext so we found the secret without

1985
01:56:58,110 --> 01:57:05,309
knowing the private key of the victim

1986
01:57:02,120 --> 01:57:07,440
runs with small numbers 100 bits that's

1987
01:57:05,310 --> 01:57:11,940
the maximum for the lab or in practice

1988
01:57:07,440 --> 01:57:15,419
we work with big numbers 2048 bits so

1989
01:57:11,940 --> 01:57:19,910
we'll it will take centuries to break it

1990
01:57:15,420 --> 01:57:22,470
but it's practical we can decipher it

1991
01:57:19,910 --> 01:57:25,320
with a public key and not for the

1992
01:57:22,470 --> 01:57:27,060
private key if you love mathematics when

1993
01:57:25,320 --> 01:57:32,070
in fact the speakers there are rings

1994
01:57:27,060 --> 01:57:34,980
forming module n is 77 7 by 11

1995
01:57:32,070 --> 01:57:38,730
what are them numbers of n module and

1996
01:57:34,980 --> 01:57:41,820
well 26 it's a whole ring for when you

1997
01:57:38,730 --> 01:57:45,419
do this cyclically attack this full ring

1998
01:57:41,820 --> 01:57:47,880
is divided in small rings lengths for

1999
01:57:45,420 --> 01:57:49,530
length eight with different different

2000
01:57:47,880 --> 01:57:50,630
numbers if I see all the rings were the

2001
01:57:49,530 --> 01:57:53,870
numbers

2002
01:57:50,630 --> 01:57:56,570
we would have all the values of the full

2003
01:57:53,870 --> 01:57:58,640
module so according to what I get in the

2004
01:57:56,570 --> 01:58:00,320
small ring of the big ring I will it

2005
01:57:58,640 --> 01:58:03,380
will take more time or less time that's

2006
01:58:00,320 --> 01:58:05,120
a concept of rings it's a know it's not

2007
01:58:03,380 --> 01:58:09,040
a vulnerability it's impossible to break

2008
01:58:05,120 --> 01:58:13,010
this with real numbers and then the

2009
01:58:09,040 --> 01:58:17,780
birthday paradox attack what does this

2010
01:58:13,010 --> 01:58:19,250
program do I just need the the

2011
01:58:17,780 --> 01:58:22,190
exponential and the module from the

2012
01:58:19,250 --> 01:58:25,280
victim I don't need to capture any other

2013
01:58:22,190 --> 01:58:27,740
data in the cyclically tak I had to

2014
01:58:25,280 --> 01:58:30,200
capture the cryptogram the message that

2015
01:58:27,740 --> 01:58:33,410
was encrypted and find the secret in

2016
01:58:30,200 --> 01:58:35,540
this case I don't need that I will start

2017
01:58:33,410 --> 01:58:39,200
with any message any number two three

2018
01:58:35,540 --> 01:58:43,030
four five whatever it's advisable to

2019
01:58:39,200 --> 01:58:48,139
work with one to bus because it's faster

2020
01:58:43,030 --> 01:58:51,530
so the program run takes the module this

2021
01:58:48,140 --> 01:58:55,940
number it's going to divide it in to two

2022
01:58:51,530 --> 01:58:58,790
parts half is left and half is right the

2023
01:58:55,940 --> 01:59:04,460
counters from zero to and me means and

2024
01:58:58,790 --> 01:59:07,220
the J counters and means minus 1 to n

2025
01:59:04,460 --> 01:59:10,430
minus 1 so I divided the end module in

2026
01:59:07,220 --> 01:59:13,430
two halves the right and left on the

2027
01:59:10,430 --> 01:59:16,370
Left I have 0 1 2 3 4 5

2028
01:59:13,430 --> 01:59:20,320
I'll take number 2 and what you're going

2029
01:59:16,370 --> 01:59:25,220
to be up to zero and the result is 1 and

2030
01:59:20,320 --> 01:59:29,750
and I do it in a succession I go to the

2031
01:59:25,220 --> 01:59:34,130
J part we have this other half 314

2032
01:59:29,750 --> 01:59:36,680
million numbers and I take 2 up to this

2033
01:59:34,130 --> 01:59:38,960
number plus 1 plus 2 it's a trial makes

2034
01:59:36,680 --> 01:59:41,270
all the operation will have different

2035
01:59:38,960 --> 01:59:43,640
results on left and right well there's a

2036
01:59:41,270 --> 01:59:45,950
collision between the two halves the

2037
01:59:43,640 --> 01:59:48,980
system has probe has been broken with

2038
01:59:45,950 --> 01:59:51,920
you know the private key or the pair

2039
01:59:48,980 --> 01:59:55,879
private key sometimes the number I can

2040
01:59:51,920 --> 01:59:57,590
find breaks the value I started with at

2041
01:59:55,880 --> 02:00:02,300
the beginning but it doesn't break the

2042
01:59:57,590 --> 02:00:03,710
generic key so let's run it it's going

2043
02:00:02,300 --> 02:00:06,050
to be very fast

2044
02:00:03,710 --> 02:00:09,340
this is all the operations done by the

2045
02:00:06,050 --> 02:00:14,000
software but this machine is quite slow

2046
02:00:09,340 --> 02:00:17,480
two million encryptions per second if it

2047
02:00:14,000 --> 02:00:21,920
takes too long we can stop it that's it

2048
02:00:17,480 --> 02:00:25,009
it's done you see it found it excites a

2049
02:00:21,920 --> 02:00:29,270
collision on J and E the two halves

2050
02:00:25,010 --> 02:00:32,000
after 27 million encryptions very very

2051
02:00:29,270 --> 02:00:33,800
fast so the private key is three four

2052
02:00:32,000 --> 02:00:41,350
one eight two three let's see if it's

2053
02:00:33,800 --> 02:00:41,350
true it's here no it's not this one I

2054
02:00:43,090 --> 02:00:53,690
don't see that he says to the private

2055
02:00:49,520 --> 02:00:56,540
key is that one yes yes three four one

2056
02:00:53,690 --> 02:00:58,820
two three I could have given the private

2057
02:00:56,540 --> 02:01:01,100
key for this one as well as you can see

2058
02:00:58,820 --> 02:01:06,170
it's very interesting this kind of

2059
02:01:01,100 --> 02:01:12,110
attack and what's interesting here it

2060
02:01:06,170 --> 02:01:17,510
allows what happens is that each

2061
02:01:12,110 --> 02:01:23,030
computer sends the first number to

2062
02:01:17,510 --> 02:01:27,410
target and it wasn't the first J number

2063
02:01:23,030 --> 02:01:31,160
so all the computers that are in J are

2064
02:01:27,410 --> 02:01:35,510
in n plus one that have target and there

2065
02:01:31,160 --> 02:01:37,790
those are the computer D I have the J

2066
02:01:35,510 --> 02:01:40,310
computer says target so when there's a

2067
02:01:37,790 --> 02:01:42,290
condition it tells the server and the

2068
02:01:40,310 --> 02:01:52,570
server says they automatically found

2069
02:01:42,290 --> 02:01:58,880
that the key that I have time to

2070
02:01:52,570 --> 02:02:01,880
decipher is two years so I'm a bit

2071
02:01:58,880 --> 02:02:04,790
worried about this I cannot just program

2072
02:02:01,880 --> 02:02:08,810
with this software and go to the beach

2073
02:02:04,790 --> 02:02:12,590
and wait for my mobile to ring but that

2074
02:02:08,810 --> 02:02:14,180
would be easy if it was a key three four

2075
02:02:12,590 --> 02:02:16,160
or five hundred bits but it's two

2076
02:02:14,180 --> 02:02:17,090
thousand bits it's impossible you simply

2077
02:02:16,160 --> 02:02:20,119
can't do it

2078
02:02:17,090 --> 02:02:22,280
there's sufficient computing time but it

2079
02:02:20,119 --> 02:02:25,130
can you can do it and it's another kind

2080
02:02:22,280 --> 02:02:29,150
of vulnerability if these programs

2081
02:02:25,130 --> 02:02:30,050
worked with a smaller numbers I don't

2082
02:02:29,150 --> 02:02:32,750
know if you've got any questions because

2083
02:02:30,050 --> 02:02:35,210
I've run over time if you've got any

2084
02:02:32,750 --> 02:02:37,969
doubts Oh queers queries please send me

2085
02:02:35,210 --> 02:02:42,170
an email and I'd be more than happy to

2086
02:02:37,969 --> 02:02:45,139
solve them what I've explained here is

2087
02:02:42,170 --> 02:02:46,820
you can see isn't so complicated as you

2088
02:02:45,139 --> 02:02:50,630
think it is very conceptual but it's not

2089
02:02:46,820 --> 02:02:53,570
very mathematical why keys are a certain

2090
02:02:50,630 --> 02:02:55,730
size it's very very difficult for

2091
02:02:53,570 --> 02:02:57,199
students to understand but the

2092
02:02:55,730 --> 02:02:59,269
mathematical side of things isn't

2093
02:02:57,199 --> 02:03:03,799
complicated unless you want to get a

2094
02:02:59,270 --> 02:03:06,460
little bit more in depth either there

2095
02:03:03,800 --> 02:03:09,530
you're a mathematician or you're lost

2096
02:03:06,460 --> 02:03:12,020
but it's very simple you can see the

2097
02:03:09,530 --> 02:03:14,360
strengths and the weaknesses it's easy

2098
02:03:12,020 --> 02:03:16,969
to understand how far our security can

2099
02:03:14,360 --> 02:03:18,679
go any further questions No okay let's

2100
02:03:16,969 --> 02:03:21,139
finish because we're more or less on

2101
02:03:18,679 --> 02:03:22,849
time let's leave it there any other

2102
02:03:21,139 --> 02:03:25,000
things you want to ask please send me an

2103
02:03:22,849 --> 02:03:25,000
email

2104
02:03:31,080 --> 02:03:33,140
you

