1
00:00:17,600 --> 00:00:26,730
at my stove hello good afternoon as I've

2
00:00:24,330 --> 00:00:33,989
been introduced my name is Ernesto

3
00:00:26,730 --> 00:00:39,059
Fernandez and I'm going to give you a

4
00:00:33,989 --> 00:00:42,930
few methods to obtain admin privileges

5
00:00:39,059 --> 00:00:46,230
on windows systems and my conference is

6
00:00:42,930 --> 00:00:50,159
entitled testing UAC on Windows 10 I

7
00:00:46,230 --> 00:00:52,919
will firstly explain the user controls

8
00:00:50,159 --> 00:00:56,120
then I will show you some attacks in

9
00:00:52,920 --> 00:00:59,570
order to bypass that mechanism and

10
00:00:56,120 --> 00:01:03,599
finally I will show you another way to

11
00:00:59,570 --> 00:01:07,200
bypass the user account controls

12
00:01:03,600 --> 00:01:09,390
my name is mr. Fernandez I'm a computer

13
00:01:07,200 --> 00:01:14,040
engineer and have a master's degree in

14
00:01:09,390 --> 00:01:16,740
cyber security and here you have a few

15
00:01:14,040 --> 00:01:19,170
links if you are interested in knowing a

16
00:01:16,740 --> 00:01:21,869
little bit more about my profile or ask

17
00:01:19,170 --> 00:01:24,480
whatever question you may think of

18
00:01:21,870 --> 00:01:26,970
first of all let's focus on what are the

19
00:01:24,480 --> 00:01:31,500
user account control is and how it works

20
00:01:26,970 --> 00:01:34,860
I'm sure that when you use Windows and

21
00:01:31,500 --> 00:01:38,430
when you run an application as an

22
00:01:34,860 --> 00:01:40,380
administrator this things happens you

23
00:01:38,430 --> 00:01:44,250
start the application and this is what

24
00:01:40,380 --> 00:01:50,119
happens well

25
00:01:44,250 --> 00:01:52,980
this window it's asking us for admin

26
00:01:50,120 --> 00:01:54,590
permission this is the user account

27
00:01:52,980 --> 00:01:57,750
control and this is how it basically

28
00:01:54,590 --> 00:02:00,760
works it is a mechanism to prevent

29
00:01:57,750 --> 00:02:05,540
malware execution

30
00:02:00,760 --> 00:02:10,039
and windows environments without user

31
00:02:05,540 --> 00:02:13,100
permission and it is done through the so

32
00:02:10,038 --> 00:02:16,069
called consent prompt here there are

33
00:02:13,100 --> 00:02:18,680
three examples the caller choses the

34
00:02:16,069 --> 00:02:22,700
level of confidence that when there is

35
00:02:18,680 --> 00:02:24,890
hands in terms of the certificate of the

36
00:02:22,700 --> 00:02:29,450
process we want to run if we don't

37
00:02:24,890 --> 00:02:33,880
belong to the administration in group we

38
00:02:29,450 --> 00:02:38,540
will be asked administration credentials

39
00:02:33,880 --> 00:02:41,299
the user account control was initially

40
00:02:38,540 --> 00:02:44,989
designed for Windows Vista where there

41
00:02:41,300 --> 00:02:47,300
was just one security level in 7 8 and

42
00:02:44,989 --> 00:02:50,989
10 there are 4 security levels in

43
00:02:47,300 --> 00:02:56,840
Windows Vista the only security level

44
00:02:50,989 --> 00:03:03,319
was the so-called notify and what does

45
00:02:56,840 --> 00:03:05,810
this level do well it means that any

46
00:03:03,319 --> 00:03:09,708
application run with admin permission

47
00:03:05,810 --> 00:03:13,400
will require consent from the user

48
00:03:09,709 --> 00:03:16,820
regardless of the certificates the next

49
00:03:13,400 --> 00:03:20,870
level the default level well it's pretty

50
00:03:16,820 --> 00:03:26,440
similar but several applications which

51
00:03:20,870 --> 00:03:30,010
are in a so-called safe directory and

52
00:03:26,440 --> 00:03:32,900
have activated the auto level

53
00:03:30,010 --> 00:03:35,600
characteristic activated and their

54
00:03:32,900 --> 00:03:38,390
portfolios won't need it the next level

55
00:03:35,600 --> 00:03:42,489
is exactly the same as the former one

56
00:03:38,390 --> 00:03:47,450
and when an application needs permission

57
00:03:42,489 --> 00:03:49,549
the glare the brightness in the screen

58
00:03:47,450 --> 00:03:52,820
will dim down

59
00:03:49,549 --> 00:03:55,120
so now let's focus on the different

60
00:03:52,820 --> 00:03:58,190
attacks that we can use in order to

61
00:03:55,120 --> 00:04:00,530
bypass the user account controls the

62
00:03:58,190 --> 00:04:04,750
so-called bypass and UAC

63
00:04:00,530 --> 00:04:07,640
attacks what we want to do is execute an

64
00:04:04,750 --> 00:04:10,010
application without the with

65
00:04:07,640 --> 00:04:10,958
administrator rights but without the

66
00:04:10,010 --> 00:04:13,689
user knowing

67
00:04:10,959 --> 00:04:17,100
we need several requirements these are

68
00:04:13,689 --> 00:04:20,889
the three main ones we will need a

69
00:04:17,100 --> 00:04:26,639
vulnerable altar elevate process we will

70
00:04:20,889 --> 00:04:28,180
also need that the user to belong to the

71
00:04:26,639 --> 00:04:32,590
administrators group

72
00:04:28,180 --> 00:04:35,080
this is a final condition and the UAC

73
00:04:32,590 --> 00:04:38,409
security level does not have to be set

74
00:04:35,080 --> 00:04:41,859
to always notify level this is a

75
00:04:38,410 --> 00:04:44,979
condition that can be bypassed in some

76
00:04:41,860 --> 00:04:48,160
cases now I will give you some examples

77
00:04:44,979 --> 00:04:51,460
from the last two years

78
00:04:48,160 --> 00:04:57,430
new developments related to this kind of

79
00:04:51,460 --> 00:05:02,020
attacks let's begin with enigma enigma'

80
00:04:57,430 --> 00:05:05,229
used a programmable task in order to

81
00:05:02,020 --> 00:05:12,940
bypass the user account control another

82
00:05:05,229 --> 00:05:17,380
example is from a Dutch researcher who

83
00:05:12,940 --> 00:05:19,840
used the process TPM l and i ET dot X

84
00:05:17,380 --> 00:05:28,030
you know to bypass the user can account

85
00:05:19,840 --> 00:05:33,369
control the next one is Tyron its lair

86
00:05:28,030 --> 00:05:36,000
by teens for son who used the token

87
00:05:33,370 --> 00:05:39,820
impersonation and windows systems

88
00:05:36,000 --> 00:05:44,560
another example by the guise of breakin

89
00:05:39,820 --> 00:05:50,289
malware used the variables in window is

90
00:05:44,560 --> 00:05:54,880
another example by enigma that took

91
00:05:50,289 --> 00:05:56,650
advantage the API of the cell in order

92
00:05:54,880 --> 00:06:02,340
to bypass the user account control

93
00:05:56,650 --> 00:06:02,340
without requiring father father files

94
00:06:02,880 --> 00:06:12,250
another one as from sheet out a Russian

95
00:06:08,259 --> 00:06:14,889
research who overlapped the user

96
00:06:12,250 --> 00:06:17,330
interface privilege isolation of Windows

97
00:06:14,889 --> 00:06:20,120
system

98
00:06:17,330 --> 00:06:25,400
through a trolled process another

99
00:06:20,120 --> 00:06:28,039
example is faster security which would

100
00:06:25,400 --> 00:06:30,979
use the doctor net earn to face in order

101
00:06:28,039 --> 00:06:34,789
to over or to bypass the user account

102
00:06:30,979 --> 00:06:37,878
control finally there is this UAC me

103
00:06:34,789 --> 00:06:41,840
repository that contains all the methods

104
00:06:37,879 --> 00:06:44,000
I fit so quickly mentions I took a look

105
00:06:41,840 --> 00:06:47,419
at it a couple of days ago and there are

106
00:06:44,000 --> 00:06:49,729
currently 44 methods to bypass the user

107
00:06:47,419 --> 00:06:52,520
account control most of these methods

108
00:06:49,729 --> 00:06:56,690
are already patched but there are about

109
00:06:52,520 --> 00:06:59,840
15 methods that are still usable there

110
00:06:56,690 --> 00:07:03,169
are multiple methods like this if we try

111
00:06:59,840 --> 00:07:08,989
to categorize them we can create six

112
00:07:03,169 --> 00:07:15,799
main categories the most famous one was

113
00:07:08,990 --> 00:07:18,080
developed in 2009 by using a DTL

114
00:07:15,800 --> 00:07:20,360
hijacking process in order to bypass

115
00:07:18,080 --> 00:07:24,650
user account control what is DLL

116
00:07:20,360 --> 00:07:28,250
hijacking well we want a process to

117
00:07:24,650 --> 00:07:34,190
upload a malicious DLL under our control

118
00:07:28,250 --> 00:07:38,210
instead of the original one and here we

119
00:07:34,190 --> 00:07:40,880
can tell seven different categories in

120
00:07:38,210 --> 00:07:43,609
terms of attacks and DLL hijacking the

121
00:07:40,880 --> 00:07:46,789
most popular one was AI file

122
00:07:43,610 --> 00:07:51,740
operation and with this process we want

123
00:07:46,789 --> 00:07:55,279
to de-seed the I file operation objects

124
00:07:51,740 --> 00:07:59,389
of that when we invoke it we do so with

125
00:07:55,279 --> 00:08:02,810
the maximum level of integrity so this

126
00:07:59,389 --> 00:08:10,460
is standby an injection of processes as

127
00:08:02,810 --> 00:08:15,800
you can see on the top left and then it

128
00:08:10,460 --> 00:08:17,130
will look like trust worthy process once

129
00:08:15,800 --> 00:08:19,950
we do that

130
00:08:17,130 --> 00:08:23,880
we will invoke this with a maximum level

131
00:08:19,950 --> 00:08:26,250
of integrity and we will copy the dll to

132
00:08:23,880 --> 00:08:28,860
a location under our control we would

133
00:08:26,250 --> 00:08:31,460
finally execute the auto elevated

134
00:08:28,860 --> 00:08:36,680
process that would upload our DLL

135
00:08:31,460 --> 00:08:39,478
another example is the W as a method

136
00:08:36,679 --> 00:08:44,449
that would use the windows updated

137
00:08:39,479 --> 00:08:49,110
standalone installer installer the first

138
00:08:44,450 --> 00:08:53,070
step is to compress the dll into CA B

139
00:08:49,110 --> 00:08:56,130
file then we would extract the dll into

140
00:08:53,070 --> 00:08:59,370
any location in the disk in particular

141
00:08:56,130 --> 00:09:06,300
the one we were interested in then we

142
00:08:59,370 --> 00:09:09,410
with the our dll would be the one to be

143
00:09:06,300 --> 00:09:12,120
used this has been totally patched and

144
00:09:09,410 --> 00:09:16,680
the extract functionality has been

145
00:09:12,120 --> 00:09:20,430
suppressed from Windows the next example

146
00:09:16,680 --> 00:09:25,920
is about bypassing the user interface

147
00:09:20,430 --> 00:09:27,599
privilege isolation which prevents lower

148
00:09:25,920 --> 00:09:29,640
integrity processes from sending

149
00:09:27,600 --> 00:09:34,770
messages to higher integrity processes

150
00:09:29,640 --> 00:09:38,400
we want to do this by injecting an AI

151
00:09:34,770 --> 00:09:40,590
file operation within an auto elevated

152
00:09:38,400 --> 00:09:44,160
process executed with the highest level

153
00:09:40,590 --> 00:09:45,810
of integrity the first step therefore is

154
00:09:44,160 --> 00:09:48,600
to inject the AI file

155
00:09:45,810 --> 00:09:50,939
operation within a Windows trusted

156
00:09:48,600 --> 00:09:53,610
certificate purses that will allow is to

157
00:09:50,940 --> 00:09:56,580
copy two elements a process that is

158
00:09:53,610 --> 00:10:00,450
going to be run with a high integrity

159
00:09:56,580 --> 00:10:05,640
level and a malicious DLL both elements

160
00:10:00,450 --> 00:10:08,490
will be copied inside a secure path as

161
00:10:05,640 --> 00:10:11,900
Microsoft calls it what is the secure

162
00:10:08,490 --> 00:10:16,470
path well all the paths that are within

163
00:10:11,900 --> 00:10:20,189
the route the route slash windows and a

164
00:10:16,470 --> 00:10:22,440
few others mourns they are a copied the

165
00:10:20,190 --> 00:10:25,800
process is going to be executed with the

166
00:10:22,440 --> 00:10:28,200
highest level of integrity and then the

167
00:10:25,800 --> 00:10:31,740
DLL hijacking proces wills

168
00:10:28,200 --> 00:10:35,010
then the DLL is going to be run invocate

169
00:10:31,740 --> 00:10:38,279
in a node or elevate process to finally

170
00:10:35,010 --> 00:10:40,620
invoke the process we are interested in

171
00:10:38,279 --> 00:10:47,570
that I hope this can be seen more

172
00:10:40,620 --> 00:10:50,760
clearly in the diagram the next example

173
00:10:47,570 --> 00:10:53,250
talks about abusing the environment

174
00:10:50,760 --> 00:10:55,649
variable expansions and windows why

175
00:10:53,250 --> 00:11:01,320
because several alter elevates the

176
00:10:55,649 --> 00:11:04,139
processes upload DLLs from routes with

177
00:11:01,320 --> 00:11:07,529
environment variables if an attacker

178
00:11:04,139 --> 00:11:13,320
modifies an environment variable and the

179
00:11:07,529 --> 00:11:17,990
path works on a variable under is

180
00:11:13,320 --> 00:11:22,199
control the dll will be finally uploaded

181
00:11:17,990 --> 00:11:26,250
another example for this kind of attacks

182
00:11:22,199 --> 00:11:29,750
is the so-called race condition attack

183
00:11:26,250 --> 00:11:40,500
here we try to run a process that

184
00:11:29,750 --> 00:11:45,390
creates so that we override the last one

185
00:11:40,500 --> 00:11:51,810
of all I'm going to show you the concept

186
00:11:45,390 --> 00:11:56,160
test by enigma with this screen up with

187
00:11:51,810 --> 00:11:59,790
a temporary file on which several dll's

188
00:11:56,160 --> 00:12:04,500
were copied and also a process this is

189
00:11:59,790 --> 00:12:08,160
all run with admin rights and maximum

190
00:12:04,500 --> 00:12:13,980
integrity level the temporary file would

191
00:12:08,160 --> 00:12:19,230
run the application with admin rights so

192
00:12:13,980 --> 00:12:22,890
it was it would load the same dll's

193
00:12:19,230 --> 00:12:26,399
in order so this guy found out that he

194
00:12:22,890 --> 00:12:29,639
he could overwrite the last one he would

195
00:12:26,399 --> 00:12:32,720
over the over bypass the user account

196
00:12:29,639 --> 00:12:39,260
controls one of the most recent

197
00:12:32,720 --> 00:12:42,610
attacks is the one using comm handlers

198
00:12:39,260 --> 00:12:46,189
what is that well a comm handler

199
00:12:42,610 --> 00:12:48,800
specifies that comm object by its clsid

200
00:12:46,190 --> 00:12:53,660
key from which the price is associated

201
00:12:48,800 --> 00:12:56,030
with it will load a dll so if an

202
00:12:53,660 --> 00:13:00,790
attacker modifies one of these come

203
00:12:56,030 --> 00:13:04,910
handlers to an address under its control

204
00:13:00,790 --> 00:13:06,620
our dealer will be loaded instead of the

205
00:13:04,910 --> 00:13:08,569
original one here you can see the

206
00:13:06,620 --> 00:13:11,120
different variables that would need to

207
00:13:08,570 --> 00:13:15,680
be changed in the register and what the

208
00:13:11,120 --> 00:13:20,090
process looks like another pretty new

209
00:13:15,680 --> 00:13:24,680
hijack or attack is the so-called ntfs

210
00:13:20,090 --> 00:13:32,270
reparse point in Windows this would be a

211
00:13:24,680 --> 00:13:35,890
symbolic so we would compress the

212
00:13:32,270 --> 00:13:39,490
malicious DLL into a cap file as in the

213
00:13:35,890 --> 00:13:44,360
WUSA file before then we would create a

214
00:13:39,490 --> 00:13:48,710
WS a dot X a file that will allow us to

215
00:13:44,360 --> 00:13:54,350
extract our DLL to any location in the

216
00:13:48,710 --> 00:13:56,630
hard disk without using anything else so

217
00:13:54,350 --> 00:14:00,380
finally when the DLL is copied we will

218
00:13:56,630 --> 00:14:03,490
run the order elevate process that will

219
00:14:00,380 --> 00:14:08,240
load our DLL instead of the original one

220
00:14:03,490 --> 00:14:11,600
now leaving the hijacking attacks behind

221
00:14:08,240 --> 00:14:14,930
we are now going to talk about the abuse

222
00:14:11,600 --> 00:14:17,410
of several common interfaces common

223
00:14:14,930 --> 00:14:20,750
interface defines a set of methods that

224
00:14:17,410 --> 00:14:24,709
come object can invoke the problem

225
00:14:20,750 --> 00:14:28,310
appears when several interfaces provide

226
00:14:24,710 --> 00:14:34,010
rights without user consent so what

227
00:14:28,310 --> 00:14:36,939
happens if the hijacker finds in one of

228
00:14:34,010 --> 00:14:39,920
these scum interfaces providing write a

229
00:14:36,940 --> 00:14:43,910
process that allows for a command to be

230
00:14:39,920 --> 00:14:44,649
run they can redirect the process to a

231
00:14:43,910 --> 00:14:48,040
method

232
00:14:44,649 --> 00:14:52,809
their control and this is quite a simple

233
00:14:48,040 --> 00:14:58,899
process one of the methods that we used

234
00:14:52,809 --> 00:15:01,959
to use in the past is the application

235
00:14:58,899 --> 00:15:04,920
compatibility exploiting in Windows this

236
00:15:01,959 --> 00:15:08,079
allows us to run processes that were

237
00:15:04,920 --> 00:15:12,550
conceived for former Windows systems

238
00:15:08,079 --> 00:15:17,079
into current Windows system via the shim

239
00:15:12,550 --> 00:15:20,050
files the shim files establishes several

240
00:15:17,079 --> 00:15:23,498
modifications on a particular process in

241
00:15:20,050 --> 00:15:26,109
our case an attacker in the past for

242
00:15:23,499 --> 00:15:29,649
example an attacker could create a

243
00:15:26,110 --> 00:15:34,179
malicious shim file in order to invoke a

244
00:15:29,649 --> 00:15:36,939
process and they would apply this chimp

245
00:15:34,179 --> 00:15:40,240
file into an order elevate application

246
00:15:36,939 --> 00:15:43,689
that would activate the shim file and

247
00:15:40,240 --> 00:15:47,589
the process would would be executed in a

248
00:15:43,689 --> 00:15:48,759
auto elevate manner this attack has a

249
00:15:47,589 --> 00:15:51,720
CVE

250
00:15:48,759 --> 00:15:55,170
number which means that the

251
00:15:51,720 --> 00:16:03,939
international community and Microsoft

252
00:15:55,170 --> 00:16:10,360
has a duplicated category now going back

253
00:16:03,939 --> 00:16:12,248
to the so-called shell API method we can

254
00:16:10,360 --> 00:16:15,850
say that several order elevate

255
00:16:12,249 --> 00:16:19,329
applications use these shall app is to

256
00:16:15,850 --> 00:16:21,819
execute its own commands or invoke

257
00:16:19,329 --> 00:16:23,949
several applications how are we are

258
00:16:21,819 --> 00:16:26,589
going how are we going to attack it well

259
00:16:23,949 --> 00:16:29,229
by modifying the registry and executing

260
00:16:26,589 --> 00:16:32,399
a command that we are interested in we

261
00:16:29,230 --> 00:16:37,259
will execute two categories attacks

262
00:16:32,399 --> 00:16:40,990
modifying an environmental variable or

263
00:16:37,259 --> 00:16:43,869
manipulate a registry variable here are

264
00:16:40,990 --> 00:16:48,970
two examples if we focus on the first

265
00:16:43,869 --> 00:16:52,350
part of this variable which is used to

266
00:16:48,970 --> 00:16:52,350
execute a command

267
00:16:52,810 --> 00:16:57,849
you can see that the environment

268
00:16:55,180 --> 00:17:01,500
variable is a system root if an attacker

269
00:16:57,850 --> 00:17:04,540
modifies this variable and directs it to

270
00:17:01,500 --> 00:17:07,959
directory under his control they will be

271
00:17:04,540 --> 00:17:11,790
able to trigger the process they want if

272
00:17:07,959 --> 00:17:17,380
they modified the second part the

273
00:17:11,790 --> 00:17:21,430
varietal wooden point at MC Excel but to

274
00:17:17,380 --> 00:17:28,750
a different thing executing that command

275
00:17:21,430 --> 00:17:31,210
with the shell API and the user account

276
00:17:28,750 --> 00:17:38,190
control wouldn't have been a barrier to

277
00:17:31,210 --> 00:17:40,840
it one of the most intelligent

278
00:17:38,190 --> 00:17:44,290
complicated in recent methods is the so

279
00:17:40,840 --> 00:17:49,560
called token impersonation abuse in

280
00:17:44,290 --> 00:17:53,200
Windows and Windows our token is the

281
00:17:49,560 --> 00:17:56,290
mechanism that Microsoft has in order to

282
00:17:53,200 --> 00:18:01,350
manage the rights attached to the

283
00:17:56,290 --> 00:18:06,070
different processes this is the diagram

284
00:18:01,350 --> 00:18:08,370
developed by James for sure first of all

285
00:18:06,070 --> 00:18:10,240
we have to check the rights of the

286
00:18:08,370 --> 00:18:13,810
application with high integrity

287
00:18:10,240 --> 00:18:18,040
processes for example MMC dot except by

288
00:18:13,810 --> 00:18:20,350
modifying the permissions they would get

289
00:18:18,040 --> 00:18:26,610
the acquire a limited information access

290
00:18:20,350 --> 00:18:30,040
right so what he achieved with this was

291
00:18:26,610 --> 00:18:33,939
impersonate and duplicated rights that

292
00:18:30,040 --> 00:18:37,690
would allow him to copy the token and

293
00:18:33,940 --> 00:18:43,330
apply all the necessary changes so that

294
00:18:37,690 --> 00:18:45,929
it would be impersonated process so he

295
00:18:43,330 --> 00:18:50,080
wouldn't be able to modify the original

296
00:18:45,929 --> 00:18:53,650
token but he would modifying the copy of

297
00:18:50,080 --> 00:18:57,879
token so once the token was impersonated

298
00:18:53,650 --> 00:19:01,350
the process with administrator rights

299
00:18:57,880 --> 00:19:02,480
and immediately this is now the only

300
00:19:01,350 --> 00:19:05,120
method

301
00:19:02,480 --> 00:19:08,030
that's not suspect susceptible to the

302
00:19:05,120 --> 00:19:13,280
always notify security level that's very

303
00:19:08,030 --> 00:19:16,520
interesting indeed my final example has

304
00:19:13,280 --> 00:19:20,450
to do with the use of the user interface

305
00:19:16,520 --> 00:19:24,020
and the file search function they are

306
00:19:20,450 --> 00:19:26,809
looking for a particular process they

307
00:19:24,020 --> 00:19:30,200
are running it as an administrator and

308
00:19:26,809 --> 00:19:35,210
the user can control hasn't been any

309
00:19:30,200 --> 00:19:39,679
barrier now regarding malware or is

310
00:19:35,210 --> 00:19:43,370
cyber criminality this is irrelevant now

311
00:19:39,679 --> 00:19:45,380
let's focus on the most interesting part

312
00:19:43,370 --> 00:19:48,469
for everybody here which has to do with

313
00:19:45,380 --> 00:19:50,679
the development of a new method for

314
00:19:48,470 --> 00:19:56,210
bypassing the user account control I

315
00:19:50,679 --> 00:19:58,850
based the deferred operation methods but

316
00:19:56,210 --> 00:20:02,150
then I applied it to new elements as I'm

317
00:19:58,850 --> 00:20:04,928
going to show you right now the first

318
00:20:02,150 --> 00:20:09,040
thing I did was to verify the

319
00:20:04,929 --> 00:20:12,650
applications that had an auto elevate

320
00:20:09,040 --> 00:20:16,399
characteristic and I used these strings

321
00:20:12,650 --> 00:20:19,010
command for it the result is quite a

322
00:20:16,400 --> 00:20:23,270
high number of applications so I ruled

323
00:20:19,010 --> 00:20:25,760
out all the applications for which there

324
00:20:23,270 --> 00:20:28,639
was a known method for bypassing the

325
00:20:25,760 --> 00:20:33,169
user account control then I run all the

326
00:20:28,640 --> 00:20:36,590
processes and checked the execution flow

327
00:20:33,169 --> 00:20:43,630
for each of them so now we are going to

328
00:20:36,590 --> 00:20:48,350
see it more visually now thank you

329
00:20:43,630 --> 00:20:51,410
the first thing we're going to do as I

330
00:20:48,350 --> 00:20:53,959
take a look at the manifest of the order

331
00:20:51,410 --> 00:20:57,530
elevate proces you know the to check

332
00:20:53,960 --> 00:21:00,040
that there's is a process that grants

333
00:20:57,530 --> 00:21:00,040
right

334
00:21:04,149 --> 00:21:12,590
Masaki here we can see that the auto

335
00:21:09,049 --> 00:21:16,639
elevate feature is activated so we're

336
00:21:12,590 --> 00:21:22,869
are not interested so now with process

337
00:21:16,639 --> 00:21:27,399
monitor we configure several filters and

338
00:21:22,869 --> 00:21:29,320
we try to see the execution flow of the

339
00:21:27,399 --> 00:21:34,879
process

340
00:21:29,320 --> 00:21:36,980
DCC wxa it pops aren't we close it

341
00:21:34,879 --> 00:21:41,080
immediately because it's of no interest

342
00:21:36,980 --> 00:21:44,629
to us and we look at the execution

343
00:21:41,080 --> 00:21:49,369
process there are several URLs and at

344
00:21:44,629 --> 00:21:56,629
some point it looks for the directory

345
00:21:49,369 --> 00:21:58,399
where DCC wxa is executed so what can we

346
00:21:56,629 --> 00:22:03,980
do at this point we can create this

347
00:21:58,399 --> 00:22:06,830
directory and see if it uses any file

348
00:22:03,980 --> 00:22:11,799
that would be useful for an attack so

349
00:22:06,830 --> 00:22:14,600
now I have pre-loaded and created

350
00:22:11,799 --> 00:22:20,539
several directories and all the things

351
00:22:14,600 --> 00:22:25,549
to run tests I copy the directory we are

352
00:22:20,539 --> 00:22:28,460
interested in and we execute DCC w dot

353
00:22:25,549 --> 00:22:34,999
X's again but we will start with process

354
00:22:28,460 --> 00:22:39,999
monitoring first we execute it we close

355
00:22:34,999 --> 00:22:39,999
it again and as we see it runs again

356
00:22:40,299 --> 00:22:47,210
here we can see that it uploaded

357
00:22:43,389 --> 00:22:49,939
satisfactorily but on top of the

358
00:22:47,210 --> 00:22:54,830
directory hasn't created the directory

359
00:22:49,940 --> 00:22:57,679
with amd64 etc what can we do about it

360
00:22:54,830 --> 00:23:03,129
well we can create a new directory and

361
00:22:57,679 --> 00:23:08,269
verify whether we can use some kind of

362
00:23:03,129 --> 00:23:14,090
load dll or other elements as in the

363
00:23:08,269 --> 00:23:15,210
former example we've copied a directory

364
00:23:14,090 --> 00:23:21,599
with

365
00:23:15,210 --> 00:23:25,190
the path we want then we relaunch proces

366
00:23:21,599 --> 00:23:29,218
monitor to see the running process from

367
00:23:25,190 --> 00:23:31,589
DCC W dot X at this point we can see

368
00:23:29,219 --> 00:23:33,419
that it wasn't run satisfactorily why

369
00:23:31,589 --> 00:23:36,928
because they avoid take a look at the

370
00:23:33,419 --> 00:23:41,249
error message it says that it was trying

371
00:23:36,929 --> 00:23:43,499
to find this file heavy please dot DLL

372
00:23:41,249 --> 00:23:46,649
which means that they need to upload a

373
00:23:43,499 --> 00:23:49,679
DLL from this route so what can we do

374
00:23:46,649 --> 00:23:53,158
about it we can provide our own DLL in

375
00:23:49,679 --> 00:23:58,200
order to check if there's runs with

376
00:23:53,159 --> 00:24:00,029
admin privileges on writes or not I have

377
00:23:58,200 --> 00:24:02,279
previously created a DLL with these

378
00:24:00,029 --> 00:24:06,830
characteristics as in and as in the

379
00:24:02,279 --> 00:24:06,830
former example we are going to copy it

380
00:24:07,219 --> 00:24:13,950
as you can see here is the DLL I don't

381
00:24:11,700 --> 00:24:16,979
want to I don't want you to focus on the

382
00:24:13,950 --> 00:24:20,039
other directories I will explain why in

383
00:24:16,979 --> 00:24:23,309
a few minutes first of all we copy the

384
00:24:20,039 --> 00:24:26,789
directories we relaunch proces

385
00:24:23,309 --> 00:24:33,928
monitoring in case it was helpful and

386
00:24:26,789 --> 00:24:38,700
then we execute DCC wxa it looks that

387
00:24:33,929 --> 00:24:41,909
we've achieved nothing we have this code

388
00:24:38,700 --> 00:24:44,460
this error code that at first sight

389
00:24:41,909 --> 00:24:47,849
doesn't look very useful and if we look

390
00:24:44,460 --> 00:24:50,339
at the execution flow we can see the

391
00:24:47,849 --> 00:24:56,849
directory we've created the route we've

392
00:24:50,339 --> 00:25:00,089
created and gd+ our malicious DLL now if

393
00:24:56,849 --> 00:25:03,239
we look further down we can't see

394
00:25:00,089 --> 00:25:06,389
anything that can help us verify what

395
00:25:03,239 --> 00:25:09,479
has happened exactly I was a bit lost in

396
00:25:06,389 --> 00:25:11,668
the beginning regarding I didn't know

397
00:25:09,479 --> 00:25:14,429
what had happened but when I was

398
00:25:11,669 --> 00:25:18,869
researching several fora and Broncs I

399
00:25:14,429 --> 00:25:21,629
came up with the solution DCC W dot X in

400
00:25:18,869 --> 00:25:24,329
its to upload several functions from the

401
00:25:21,629 --> 00:25:27,969
original file what can we do about this

402
00:25:24,329 --> 00:25:34,720
we can verify the functions

403
00:25:27,970 --> 00:25:38,659
with gd+ dll and a tool I'm going to use

404
00:25:34,720 --> 00:25:43,760
is PE view you can also use either pro

405
00:25:38,659 --> 00:25:47,750
or all the tools we uploaded and we go

406
00:25:43,760 --> 00:25:50,059
back to the export address table and

407
00:25:47,750 --> 00:25:53,659
here we're going to find all the

408
00:25:50,059 --> 00:25:57,889
functions that are exported it's quite a

409
00:25:53,659 --> 00:26:02,870
high number 635 functions

410
00:25:57,890 --> 00:26:06,260
exported by G + dot DL one option is to

411
00:26:02,870 --> 00:26:08,600
copy them all and don't leave anyone

412
00:26:06,260 --> 00:26:12,860
behind but there are applications for

413
00:26:08,600 --> 00:26:15,289
doing this automatically however this is

414
00:26:12,860 --> 00:26:19,908
quite an inefficient solution so how

415
00:26:15,289 --> 00:26:24,200
what can we do about it well this is C W

416
00:26:19,909 --> 00:26:28,669
dot X I'm sure it doesn't require 635

417
00:26:24,200 --> 00:26:32,090
functions from this DLL so what can we

418
00:26:28,669 --> 00:26:35,080
do let's look at this table file if we

419
00:26:32,090 --> 00:26:41,120
now go back to the imported stable and

420
00:26:35,080 --> 00:26:45,470
the DLL we are interested in we will see

421
00:26:41,120 --> 00:26:51,408
that it only needs a very small number

422
00:26:45,470 --> 00:26:54,980
of GDI plus dot DLL functions only 15 so

423
00:26:51,409 --> 00:26:58,370
we've gone down from 635 functions to 15

424
00:26:54,980 --> 00:27:01,450
only so the reduction in volume of our

425
00:26:58,370 --> 00:27:04,158
final DLL is going to be very

426
00:27:01,450 --> 00:27:06,650
significant now we have another problem

427
00:27:04,159 --> 00:27:09,559
we have to redirect the execution flow

428
00:27:06,650 --> 00:27:15,500
to the original DLL here in proces

429
00:27:09,559 --> 00:27:20,450
monitoring the directory name is here as

430
00:27:15,500 --> 00:27:23,750
I am highlighting and it shows us that

431
00:27:20,450 --> 00:27:26,539
the etc' is quite a long number and

432
00:27:23,750 --> 00:27:28,490
apparently random but if we take a

433
00:27:26,539 --> 00:27:31,549
closer look at this number I don't know

434
00:27:28,490 --> 00:27:34,640
if you can see it it is actually the

435
00:27:31,549 --> 00:27:36,370
same one as the build version of the

436
00:27:34,640 --> 00:27:40,900
windows

437
00:27:36,370 --> 00:27:43,600
we are running our concept test in so if

438
00:27:40,900 --> 00:27:46,780
we redirect or the all this flow to the

439
00:27:43,600 --> 00:27:51,280
original DLL that is within slash window

440
00:27:46,780 --> 00:27:54,820
ill slash win with an X slash directory

441
00:27:51,280 --> 00:27:58,360
slash this name it can be only executed

442
00:27:54,820 --> 00:28:01,179
on the Windows systems whose version of

443
00:27:58,360 --> 00:28:06,040
the bill is the same one as the one we

444
00:28:01,180 --> 00:28:08,710
have in our concept test that is not

445
00:28:06,040 --> 00:28:13,510
efficient so what can we do we can

446
00:28:08,710 --> 00:28:17,230
redirect this to a dll that is common to

447
00:28:13,510 --> 00:28:21,790
all Windows 10 systems so I did a little

448
00:28:17,230 --> 00:28:25,420
bit of research myself so this directory

449
00:28:21,790 --> 00:28:26,379
contained a dll with the same time that

450
00:28:25,420 --> 00:28:30,040
we're interested in

451
00:28:26,380 --> 00:28:34,300
after analyzing it with several tools I

452
00:28:30,040 --> 00:28:36,790
realized that the functions were similar

453
00:28:34,300 --> 00:28:40,419
were the same and they were enough to

454
00:28:36,790 --> 00:28:46,330
redirect the flow to our DLL file so

455
00:28:40,420 --> 00:28:50,410
this is what we are going to do as in

456
00:28:46,330 --> 00:28:53,949
the other cases I have directory systems

457
00:28:50,410 --> 00:28:55,480
that I have copied previously so I'm

458
00:28:53,950 --> 00:29:02,140
going to replace what I previously

459
00:28:55,480 --> 00:29:05,320
copied if we execute DCC W dot X now

460
00:29:02,140 --> 00:29:07,500
we've obtained a command terminal if you

461
00:29:05,320 --> 00:29:10,300
look at the top here we have

462
00:29:07,500 --> 00:29:12,700
administration rights this allows that

463
00:29:10,300 --> 00:29:15,610
we can perform an attack by price in the

464
00:29:12,700 --> 00:29:17,650
user account control so now we are going

465
00:29:15,610 --> 00:29:21,490
to take a look at the process that

466
00:29:17,650 --> 00:29:28,270
enables us to automate all there's huge

467
00:29:21,490 --> 00:29:31,180
task I showed you before that I was also

468
00:29:28,270 --> 00:29:32,680
copying all the three directors with

469
00:29:31,180 --> 00:29:37,530
similar names

470
00:29:32,680 --> 00:29:42,820
why because DCC W dot X is going to

471
00:29:37,530 --> 00:29:45,310
upload the gd+ dot DLL in every

472
00:29:42,820 --> 00:29:47,500
execution time and it's going to change

473
00:29:45,310 --> 00:29:49,780
the route every time

474
00:29:47,500 --> 00:29:52,600
so it this route is going to be

475
00:29:49,780 --> 00:29:54,549
unpredictable I'm sure somebody will be

476
00:29:52,600 --> 00:29:56,830
able to do it but the most efficient

477
00:29:54,549 --> 00:30:01,090
solution would be to copy the entire

478
00:29:56,830 --> 00:30:07,780
file route all these folders and include

479
00:30:01,090 --> 00:30:11,049
our malicious DLL on top of them local

480
00:30:07,780 --> 00:30:14,530
Piazza wanted a local Paran let's delete

481
00:30:11,049 --> 00:30:19,440
a few things here that I've copied it

482
00:30:14,530 --> 00:30:19,440
before in order to remove all the traces

483
00:30:22,110 --> 00:30:28,049
place our No

484
00:30:35,830 --> 00:30:40,320
there's a positive as nono Cardin

485
00:30:44,909 --> 00:30:47,720
I wish

486
00:31:03,809 --> 00:31:15,250
oh no Mabel Akiva nor a speaking pocket

487
00:31:11,350 --> 00:31:17,620
okay so here's a little bit was I what

488
00:31:15,250 --> 00:31:21,330
I've been explaining how the copying

489
00:31:17,620 --> 00:31:24,428
process works how the vulnerability is

490
00:31:21,330 --> 00:31:27,668
discovered how the hijacking attack is

491
00:31:24,429 --> 00:31:34,600
performed to etc so now focusing more on

492
00:31:27,669 --> 00:31:38,230
the concept test our goal is to perform

493
00:31:34,600 --> 00:31:40,600
an interoperable concept test we've seen

494
00:31:38,230 --> 00:31:44,620
that all the execution flows will be

495
00:31:40,600 --> 00:31:47,020
directed to the directory that I've

496
00:31:44,620 --> 00:31:51,010
shown you and the route that I show you

497
00:31:47,020 --> 00:31:54,910
showed you so this will prevent this

498
00:31:51,010 --> 00:31:57,879
from running on Windows 7 because this

499
00:31:54,910 --> 00:32:01,150
route isn't present in these systems at

500
00:31:57,880 --> 00:32:05,020
the same time we also wanted to execute

501
00:32:01,150 --> 00:32:07,750
this in 32-bit versions and in 64-bit

502
00:32:05,020 --> 00:32:11,320
versions so we decided to compile all

503
00:32:07,750 --> 00:32:17,890
the binary files dll's the final concept

504
00:32:11,320 --> 00:32:19,960
test and the 32-bit pros is one why

505
00:32:17,890 --> 00:32:22,630
because they allow us to run this kind

506
00:32:19,960 --> 00:32:25,000
of applications - this will entail

507
00:32:22,630 --> 00:32:28,299
changes in the directory routes in the

508
00:32:25,000 --> 00:32:31,240
future but we will find out more in a

509
00:32:28,299 --> 00:32:33,760
minute when it comes to the malicious

510
00:32:31,240 --> 00:32:36,970
DLL I've talked about the redirection

511
00:32:33,760 --> 00:32:39,370
and how we want to export some functions

512
00:32:36,970 --> 00:32:45,220
etc in this case we are going to

513
00:32:39,370 --> 00:32:50,199
compress it into base64 and encode it in

514
00:32:45,220 --> 00:32:55,390
our concept code the compression method

515
00:32:50,200 --> 00:33:01,419
used will prevent this from running on

516
00:32:55,390 --> 00:33:04,809
Windows 7 the next step once the concept

517
00:33:01,419 --> 00:33:07,270
test is executed is performing several

518
00:33:04,809 --> 00:33:08,830
initial checks we are going to check the

519
00:33:07,270 --> 00:33:11,200
built version we're going to check if we

520
00:33:08,830 --> 00:33:13,928
have administrative rights we are going

521
00:33:11,200 --> 00:33:15,820
to check in to the compromised user

522
00:33:13,929 --> 00:33:16,990
belongs to the administrators group

523
00:33:15,820 --> 00:33:20,169
and we're going to check the UAC

524
00:33:16,990 --> 00:33:22,360
security level as well why because we

525
00:33:20,170 --> 00:33:24,610
don't want to be accessed and successful

526
00:33:22,360 --> 00:33:26,409
in our concept test we're going to

527
00:33:24,610 --> 00:33:30,070
create all the temporary elements I've

528
00:33:26,410 --> 00:33:32,290
talked about in the same directory where

529
00:33:30,070 --> 00:33:35,590
the concept test is going to be run

530
00:33:32,290 --> 00:33:38,950
first of all we will create the D CCW

531
00:33:35,590 --> 00:33:41,100
exit of local folder and on that fall in

532
00:33:38,950 --> 00:33:45,430
that folder we will copy all the

533
00:33:41,100 --> 00:33:48,610
directories that will match with the one

534
00:33:45,430 --> 00:33:51,220
that is highlighted on the screen as you

535
00:33:48,610 --> 00:33:55,419
can see this is the first change

536
00:33:51,220 --> 00:34:01,510
produced by the compilation of the test

537
00:33:55,420 --> 00:34:03,900
concept as a 32-bit binary so this

538
00:34:01,510 --> 00:34:07,120
shouldn't cause any problems in theory

539
00:34:03,900 --> 00:34:09,040
then after all of these directories have

540
00:34:07,120 --> 00:34:12,400
been created and copied we're going to

541
00:34:09,040 --> 00:34:15,940
copy our malicious DLL and then we are

542
00:34:12,400 --> 00:34:19,540
going to run the critical part of the

543
00:34:15,940 --> 00:34:23,530
exploit that is going to enable us to

544
00:34:19,540 --> 00:34:29,440
invoke the come object process with our

545
00:34:23,530 --> 00:34:31,950
highest integrity level in the case of

546
00:34:29,440 --> 00:34:36,639
C++ I'm going to use a method called

547
00:34:31,949 --> 00:34:39,750
masquerade peb or the modification of

548
00:34:36,639 --> 00:34:43,089
the process environment block in English

549
00:34:39,750 --> 00:34:45,449
why do we do this and how are we going

550
00:34:43,090 --> 00:34:48,610
to do it well

551
00:34:45,449 --> 00:34:51,960
we want the person's environment block

552
00:34:48,610 --> 00:34:54,220
in our process to look like an

553
00:34:51,960 --> 00:34:56,710
application with a trust with this

554
00:34:54,219 --> 00:35:00,129
certificate from Windows or Microsoft's

555
00:34:56,710 --> 00:35:02,380
showed that to the eyes of B sappy it

556
00:35:00,130 --> 00:35:07,120
looks like one of the applications why

557
00:35:02,380 --> 00:35:10,450
because piece a B tells the comm object

558
00:35:07,120 --> 00:35:14,049
we are invoking the process that is

559
00:35:10,450 --> 00:35:15,720
being invoked if we change the process

560
00:35:14,050 --> 00:35:21,760
to make it look like one of these

561
00:35:15,720 --> 00:35:24,310
processes we will be able to run the

562
00:35:21,760 --> 00:35:27,790
object with the highest integrity level

563
00:35:24,310 --> 00:35:31,060
with Metasploit we will

564
00:35:27,790 --> 00:35:34,330
perform a process injection we will

565
00:35:31,060 --> 00:35:37,330
inject a dll into Microsoft signed

566
00:35:34,330 --> 00:35:40,690
application in this example we have

567
00:35:37,330 --> 00:35:44,410
notepad Excel and we will run it on this

568
00:35:40,690 --> 00:35:48,190
process once we've invoked the I file

569
00:35:44,410 --> 00:35:51,730
operation object we will be able to copy

570
00:35:48,190 --> 00:35:54,670
the entire road of files we've created

571
00:35:51,730 --> 00:35:59,140
the DCC wxw

572
00:35:54,670 --> 00:36:01,860
sorry dot local and with the routes that

573
00:35:59,140 --> 00:36:06,250
you can see on the screen with the

574
00:36:01,860 --> 00:36:09,820
64-bit system we have the second change

575
00:36:06,250 --> 00:36:13,840
we've discussed it's going to be copied

576
00:36:09,820 --> 00:36:15,940
to all the routes that you can see at

577
00:36:13,840 --> 00:36:19,750
the bottom of the screen we will finally

578
00:36:15,940 --> 00:36:22,950
execute the process this is w dot X and

579
00:36:19,750 --> 00:36:25,300
our DLL will be executed with

580
00:36:22,950 --> 00:36:28,689
administration rights then we would

581
00:36:25,300 --> 00:36:35,250
remove all traces all temporary files so

582
00:36:28,690 --> 00:36:39,940
that future executions aren't affected

583
00:36:35,250 --> 00:36:42,550
this is the diagram of the concept test

584
00:36:39,940 --> 00:36:52,360
that we've done in order to be clearer

585
00:36:42,550 --> 00:36:56,290
and easier to understand now we're going

586
00:36:52,360 --> 00:36:58,360
to the section that everybody wants to

587
00:36:56,290 --> 00:37:00,670
hear about and that is the proof of

588
00:36:58,360 --> 00:37:03,280
concept thing to see whether everything

589
00:37:00,670 --> 00:37:05,920
works but before this we're going to go

590
00:37:03,280 --> 00:37:09,220
over a series of requirements in order

591
00:37:05,920 --> 00:37:12,850
to be able to run the concept trial or

592
00:37:09,220 --> 00:37:17,560
test we're in

593
00:37:12,850 --> 00:37:20,020
satisfactory manner and the C++ and in

594
00:37:17,560 --> 00:37:22,150
the other thing we're going to make sure

595
00:37:20,020 --> 00:37:27,370
that this will be Windows 8 or 10 and

596
00:37:22,150 --> 00:37:31,120
the users source control is in the

597
00:37:27,370 --> 00:37:34,480
maximum level and finally for the user

598
00:37:31,120 --> 00:37:41,650
to belong to the group of administrators

599
00:37:34,480 --> 00:37:48,600
and any target option must match the

600
00:37:41,650 --> 00:37:52,530
processor architecture of the victim and

601
00:37:48,600 --> 00:37:52,529
now going into

602
00:38:00,940 --> 00:38:12,280
Valley primero vamos a guitarla so we're

603
00:38:05,590 --> 00:38:16,650
going to run the same as much becomes

604
00:38:12,280 --> 00:38:16,650
obsessed and see when a second

605
00:38:20,680 --> 00:38:27,970
vamos a ver salutare a deformable Stan

606
00:38:24,250 --> 00:38:30,220
therapy da so all the different steps

607
00:38:27,970 --> 00:38:32,558
that I have explained to you are going

608
00:38:30,220 --> 00:38:38,379
to be analyzed or the temporary thing

609
00:38:32,559 --> 00:38:41,400
and everything else so the exact execute

610
00:38:38,380 --> 00:38:44,130
and then we have some commands with the

611
00:38:41,400 --> 00:38:47,619
permission or authorization of the

612
00:38:44,130 --> 00:38:50,250
administrators so we were able to skip

613
00:38:47,619 --> 00:38:50,250
the UAC

614
00:38:51,150 --> 00:39:00,220
this was the permission of the

615
00:38:53,710 --> 00:39:05,109
administrator in a satisfactory way

616
00:39:00,220 --> 00:39:08,339
we've been able to attack in the case of

617
00:39:05,109 --> 00:39:14,200
meta exploit what we do is first of all

618
00:39:08,339 --> 00:39:16,630
start this I'm going to load a little

619
00:39:14,200 --> 00:39:26,828
script that's going to automate the

620
00:39:16,630 --> 00:39:32,339
whole thing in the case of in the case

621
00:39:26,829 --> 00:39:36,089
of Windows what I did was to create

622
00:39:32,339 --> 00:39:40,630
backdoor so that it will create this

623
00:39:36,089 --> 00:39:49,779
meter protecting and if we go into this

624
00:39:40,630 --> 00:39:53,890
session see was he use we our standard

625
00:39:49,779 --> 00:39:57,099
user if we go into this command in order

626
00:39:53,890 --> 00:40:00,700
to scale a privilege we see therefore

627
00:39:57,099 --> 00:40:05,789
attempts have been made and we haven't

628
00:40:00,700 --> 00:40:10,200
been able to get permission from the

629
00:40:05,789 --> 00:40:14,020
administrator so it means that the UAC

630
00:40:10,200 --> 00:40:16,600
prevented us from doing it

631
00:40:14,020 --> 00:40:19,330
and going back to our module will check

632
00:40:16,600 --> 00:40:23,770
whether options are the right ones

633
00:40:19,330 --> 00:40:27,160
Eunice's so looks like if we execute

634
00:40:23,770 --> 00:40:29,170
exploit then we'll see how all the

635
00:40:27,160 --> 00:40:32,680
processes that I've been telling you of

636
00:40:29,170 --> 00:40:36,460
our executors and if everything goes as

637
00:40:32,680 --> 00:40:44,580
expected we're going to go into the

638
00:40:36,460 --> 00:40:47,520
meter proto session we go to get system

639
00:40:44,580 --> 00:40:58,270
and with the same technique we were able

640
00:40:47,520 --> 00:41:01,330
to every check user we are we see that

641
00:40:58,270 --> 00:41:06,610
we are the user with more privilege in

642
00:41:01,330 --> 00:41:09,600
the system and going back to the

643
00:41:06,610 --> 00:41:09,600
presentation

644
00:41:10,830 --> 00:41:14,400
oops again

645
00:41:17,040 --> 00:41:35,320
yeah I'd left some videos you can view

646
00:41:26,580 --> 00:41:39,009
later but wrapping up my presentation

647
00:41:35,320 --> 00:41:41,380
I'm going to the opinion of Microsoft

648
00:41:39,010 --> 00:41:45,130
what does Microsoft think about this

649
00:41:41,380 --> 00:41:50,859
sort of attack in order to skip or

650
00:41:45,130 --> 00:41:56,560
bypass EAC well they say that a weak

651
00:41:50,859 --> 00:41:58,590
point that allows to skip this UAC there

652
00:41:56,560 --> 00:42:00,430
is something that cannot be considered

653
00:41:58,590 --> 00:42:03,280
vulnerability because it's not

654
00:42:00,430 --> 00:42:06,069
considered as a security mechanism but

655
00:42:03,280 --> 00:42:09,040
it also says that USC is a fundamental

656
00:42:06,070 --> 00:42:13,210
component of a Microsoft overall

657
00:42:09,040 --> 00:42:16,630
security vision so as we see there's a

658
00:42:13,210 --> 00:42:20,380
clear confusion

659
00:42:16,630 --> 00:42:24,180
and as regards what I think about this

660
00:42:20,380 --> 00:42:27,190
my opinions and the conclusions on the

661
00:42:24,180 --> 00:42:31,690
achievements I can say that as regards

662
00:42:27,190 --> 00:42:33,370
our conclusions skipping UAC is not a

663
00:42:31,690 --> 00:42:35,920
hard thing to do

664
00:42:33,370 --> 00:42:37,839
and I believe that Microsoft should

665
00:42:35,920 --> 00:42:40,630
start considering these attacks as our

666
00:42:37,840 --> 00:42:43,120
reality they're here to stay in order to

667
00:42:40,630 --> 00:42:45,850
protect our users because the patches

668
00:42:43,120 --> 00:42:49,660
that come up with each new version not

669
00:42:45,850 --> 00:42:52,270
enough finally I'd like to say that

670
00:42:49,660 --> 00:42:55,390
nowadays the only solution the most

671
00:42:52,270 --> 00:42:58,930
effective one is to create two different

672
00:42:55,390 --> 00:43:03,279
users in the Windows system with

673
00:42:58,930 --> 00:43:07,060
different administrators permits with a

674
00:43:03,280 --> 00:43:10,240
lower level perhaps and always use this

675
00:43:07,060 --> 00:43:13,150
last one and finally as regardless even

676
00:43:10,240 --> 00:43:16,410
a whole new method has been developed in

677
00:43:13,150 --> 00:43:21,750
order to skip to bypass of there's UAC

678
00:43:16,410 --> 00:43:21,750
present in more Windows 10 versions and

679
00:43:26,040 --> 00:43:40,330
motors been included in the popular

680
00:43:29,410 --> 00:43:42,549
Metasploit framework finally end and

681
00:43:40,330 --> 00:43:44,380
have you want to know more learn more

682
00:43:42,550 --> 00:43:47,770
about the project that I've developed

683
00:43:44,380 --> 00:43:50,890
and the attacks in order to bypass these

684
00:43:47,770 --> 00:43:56,770
you ACS I left here a repository of the

685
00:43:50,890 --> 00:44:00,910
project and I've also included the paper

686
00:43:56,770 --> 00:44:03,580
and left a couple of links on Metasploit

687
00:44:00,910 --> 00:44:07,710
module and I also wanted to leave a link

688
00:44:03,580 --> 00:44:09,880
there to the this project you actually

689
00:44:07,710 --> 00:44:12,190
project for those of you who are

690
00:44:09,880 --> 00:44:13,070
interest in this sort of attacks because

691
00:44:12,190 --> 00:44:15,260
yeah

692
00:44:13,070 --> 00:44:17,840
I'm sure you think that it is very

693
00:44:15,260 --> 00:44:21,650
interesting by the way I will also

694
00:44:17,840 --> 00:44:23,060
upload this have it in LinkedIn and

695
00:44:21,650 --> 00:44:25,670
finally thank you so much for your

696
00:44:23,060 --> 00:44:26,270
attention thank you thank you very much

697
00:44:25,670 --> 00:44:28,540
indeed

698
00:44:26,270 --> 00:44:33,580
and if you have any questions I'll be

699
00:44:28,540 --> 00:44:33,580
happy to answer them or at least try to

700
00:44:40,720 --> 00:44:53,149
okay nobody dares in the video but I'm

701
00:44:51,020 --> 00:44:56,470
Nesta thank you so much thank you very

702
00:44:53,150 --> 00:44:56,470
much a big round of applause

703
00:45:02,799 --> 00:45:04,859
you

