1
00:00:18,140 --> 00:00:25,919
Shahrazad for your presentation first of

2
00:00:21,630 --> 00:00:31,348
all for me it is a pleasure and an honor

3
00:00:25,919 --> 00:00:36,420
to be back in cyber camp and I am in my

4
00:00:31,349 --> 00:00:40,649
hometown in Santander and really wanted

5
00:00:36,420 --> 00:00:41,239
to be here seems there's a bomb or

6
00:00:40,649 --> 00:00:46,909
something

7
00:00:41,239 --> 00:00:50,610
and also like to congratulate all the

8
00:00:46,909 --> 00:00:52,500
Elissa school kids because they've been

9
00:00:50,610 --> 00:00:55,439
achieving some very interesting things

10
00:00:52,500 --> 00:00:56,189
for our region so they deserve our

11
00:00:55,439 --> 00:00:59,009
support

12
00:00:56,189 --> 00:01:01,460
so congratulations congratulations our

13
00:00:59,009 --> 00:01:06,900
kids I hope you keep on working hard and

14
00:01:01,460 --> 00:01:10,250
what am I going to be speaking of okay

15
00:01:06,900 --> 00:01:17,549
this presentation

16
00:01:10,250 --> 00:01:22,499
Wacka mala ACA mola well this deals with

17
00:01:17,549 --> 00:01:25,409
you AC bypass who had been studying this

18
00:01:22,499 --> 00:01:27,359
on the windows over the last year we

19
00:01:25,409 --> 00:01:31,380
developed a tool bar allows us to keep

20
00:01:27,359 --> 00:01:34,439
on doing research and keep on detecting

21
00:01:31,380 --> 00:01:37,589
and exploiting and the framework will be

22
00:01:34,439 --> 00:01:41,219
able to mitigate some of these UAC

23
00:01:37,590 --> 00:01:41,909
bypass but before this I need to tell

24
00:01:41,219 --> 00:01:45,928
you what

25
00:01:41,909 --> 00:01:47,520
UAC bypass is about and what it is

26
00:01:45,929 --> 00:01:50,009
important and I'm going to script this

27
00:01:47,520 --> 00:01:51,689
presentation because well the

28
00:01:50,009 --> 00:01:53,969
introduction my introduction rather

29
00:01:51,689 --> 00:01:56,969
let's skip it so this is what we're

30
00:01:53,969 --> 00:02:01,729
going to be addressing what UIC is and

31
00:01:56,969 --> 00:02:06,240
won't UAC bypass is why does it matter

32
00:02:01,729 --> 00:02:08,550
different types of UAC bypasses not over

33
00:02:06,240 --> 00:02:11,579
the most common ones were the most

34
00:02:08,550 --> 00:02:15,840
powerful ones and then what is a walk w

35
00:02:11,580 --> 00:02:18,450
ake CA Imola what is it and how can you

36
00:02:15,840 --> 00:02:20,880
download it and how can you play where

37
00:02:18,450 --> 00:02:21,739
the modules and was the architecture

38
00:02:20,880 --> 00:02:24,590
like and fine

39
00:02:21,740 --> 00:02:29,150
I'm gonna be giving you some outcomes

40
00:02:24,590 --> 00:02:30,950
some results from the different studies

41
00:02:29,150 --> 00:02:34,370
of the tool

42
00:02:30,950 --> 00:02:37,160
so what's UAC UAC is this a message all

43
00:02:34,370 --> 00:02:39,680
of you here whenever you've interacted

44
00:02:37,160 --> 00:02:41,829
with Windows have come up with this have

45
00:02:39,680 --> 00:02:46,070
found this you have come across this

46
00:02:41,830 --> 00:02:49,520
hasn't I'm sure you've seen this yes and

47
00:02:46,070 --> 00:02:53,359
no message so this is UAC user account

48
00:02:49,520 --> 00:02:58,880
control and this this is a security

49
00:02:53,360 --> 00:03:01,430
system of Windows on the Microsoft under

50
00:02:58,880 --> 00:03:07,630
Windows Vista

51
00:03:01,430 --> 00:03:12,590
whenever there's privilege elevation

52
00:03:07,630 --> 00:03:17,380
service is requested all these rights

53
00:03:12,590 --> 00:03:20,480
are requested have you authorized the

54
00:03:17,380 --> 00:03:24,079
process will be run under the contacts

55
00:03:20,480 --> 00:03:26,810
down this will be done with the maximum

56
00:03:24,080 --> 00:03:33,080
amount of Rights in the system anything

57
00:03:26,810 --> 00:03:37,040
can be done Windows 10 is another thing

58
00:03:33,080 --> 00:03:40,580
because right now it's been the same

59
00:03:37,040 --> 00:03:44,750
thing the same security mechanism and so

60
00:03:40,580 --> 00:03:47,930
they're hard at work so when you are

61
00:03:44,750 --> 00:03:50,540
going to click on the right button and

62
00:03:47,930 --> 00:03:53,150
you say run as administrator there's a

63
00:03:50,540 --> 00:03:54,739
little shield that comes up in the

64
00:03:53,150 --> 00:03:57,760
system will be given the following

65
00:03:54,740 --> 00:04:00,230
manner of the user if you guys a user

66
00:03:57,760 --> 00:04:03,019
belong to the administrator you'll be

67
00:04:00,230 --> 00:04:06,260
able to have these rights and there'll

68
00:04:03,020 --> 00:04:10,220
be the yes and no message and if

69
00:04:06,260 --> 00:04:15,130
if you're running this as usual the

70
00:04:10,220 --> 00:04:15,130
administrator group any process and

71
00:04:15,880 --> 00:04:24,260
integrity and if there's a deal by

72
00:04:19,250 --> 00:04:28,790
default UAC policy in place then you

73
00:04:24,260 --> 00:04:30,800
will be able to have a bypass so this

74
00:04:28,790 --> 00:04:33,770
means that when you when we do by

75
00:04:30,800 --> 00:04:39,280
Prosser what we can do is to skip as to

76
00:04:33,770 --> 00:04:39,280
bypass this UAC

77
00:04:40,120 --> 00:04:44,630
[Music]

78
00:04:41,590 --> 00:04:47,210
there's a series of binaries in the

79
00:04:44,630 --> 00:04:49,340
system and let me tell you the story

80
00:04:47,210 --> 00:04:52,760
right from the start this is in Windows

81
00:04:49,340 --> 00:04:56,330
Vista and the people were criticizing

82
00:04:52,760 --> 00:05:05,539
this mechanism because for every attempt

83
00:04:56,330 --> 00:05:06,800
to secure so un poco de política for

84
00:05:05,540 --> 00:05:14,720
effect o malley

85
00:05:06,800 --> 00:05:21,140
you can just aha here you see the from

86
00:05:14,720 --> 00:05:28,780
the salivate there's also event visor

87
00:05:21,140 --> 00:05:32,539
and the UAC will not come out because

88
00:05:28,780 --> 00:05:34,909
the manifests of these binaries in

89
00:05:32,539 --> 00:05:37,849
Microsoft are signed by and Microsoft

90
00:05:34,910 --> 00:05:43,160
have our ammeter that's called or our

91
00:05:37,850 --> 00:05:45,860
debate Auto elevate so if you belong to

92
00:05:43,160 --> 00:05:49,729
the administrators group if you run one

93
00:05:45,860 --> 00:05:53,300
of these binaries the UAC doesn't show

94
00:05:49,729 --> 00:05:55,960
up doesn't jump out because it's a

95
00:05:53,300 --> 00:05:58,510
Windows binary which have been signed

96
00:05:55,960 --> 00:06:03,169
Windows and Microsoft and there's this

97
00:05:58,510 --> 00:06:05,479
Auto elevate the true element to it so

98
00:06:03,169 --> 00:06:06,539
we trust that the binary is not going to

99
00:06:05,479 --> 00:06:11,060
do anything

100
00:06:06,540 --> 00:06:15,150
so what's our UAC bypass and this is a

101
00:06:11,060 --> 00:06:18,000
way to make sure that these binaries

102
00:06:15,150 --> 00:06:22,590
that are signed and that won't make the

103
00:06:18,000 --> 00:06:25,620
UAC jump will run what I want to run so

104
00:06:22,590 --> 00:06:28,349
the list to try and have these binaries

105
00:06:25,620 --> 00:06:33,380
and by interacting with them to have

106
00:06:28,350 --> 00:06:37,230
them run the code I'm interested in high

107
00:06:33,380 --> 00:06:40,800
integrity process if the code that's run

108
00:06:37,230 --> 00:06:45,120
now where was that gonna be run in high

109
00:06:40,800 --> 00:06:48,990
integrity so I know high integrity so

110
00:06:45,120 --> 00:06:50,910
the UAC pipe is precisely this to run

111
00:06:48,990 --> 00:06:55,050
whatever I want to run without having

112
00:06:50,910 --> 00:07:00,150
the UAC jump up in the screen on the

113
00:06:55,050 --> 00:07:03,990
screen so this is what it looks like we

114
00:07:00,150 --> 00:07:06,510
see this C and D and somehow this is run

115
00:07:03,990 --> 00:07:09,450
in integrity contact logically you may

116
00:07:06,510 --> 00:07:11,070
tell me a way yes but if I'm physically

117
00:07:09,450 --> 00:07:13,200
in front of the Machine and I click on

118
00:07:11,070 --> 00:07:16,920
the right button run as administrator

119
00:07:13,200 --> 00:07:18,390
and then I click yes fine well yes but

120
00:07:16,920 --> 00:07:21,240
the scenario what we're going to be

121
00:07:18,390 --> 00:07:23,070
working as an intrusion into a system

122
00:07:21,240 --> 00:07:25,440
that is a Microsoft where we have a

123
00:07:23,070 --> 00:07:31,010
remote connection and this is where we

124
00:07:25,440 --> 00:07:32,969
need to do this UAC bypass as long as

125
00:07:31,010 --> 00:07:40,730
conditions which at the beginning are

126
00:07:32,970 --> 00:07:46,020
met so scenarios for running and right

127
00:07:40,730 --> 00:07:49,670
elevation we in a pen test we access a

128
00:07:46,020 --> 00:07:52,049
Windows machine and the committed

129
00:07:49,670 --> 00:07:54,060
compromise process belongs to the actual

130
00:07:52,050 --> 00:07:57,360
administrator and here we have the

131
00:07:54,060 --> 00:07:59,610
maximum right we can impersonate system

132
00:07:57,360 --> 00:08:01,830
or whatever we can do anything in the

133
00:07:59,610 --> 00:08:05,960
system but when you access our system

134
00:08:01,830 --> 00:08:05,960
normally we're not that lucky

135
00:08:06,090 --> 00:08:13,200
Microsoft's our system the actual

136
00:08:08,590 --> 00:08:19,030
machine administrator comes by default

137
00:08:13,200 --> 00:08:20,710
second case compromise of committee

138
00:08:19,030 --> 00:08:26,729
process we access the Machine and this

139
00:08:20,710 --> 00:08:29,969
belongs to the administrators group user

140
00:08:26,730 --> 00:08:32,640
maybe the user belongs to an

141
00:08:29,970 --> 00:08:36,550
administrators group so if the UAC

142
00:08:32,640 --> 00:08:38,710
hasn't been modified policy hasn't been

143
00:08:36,549 --> 00:08:42,490
modified that we have the ability of

144
00:08:38,710 --> 00:08:45,280
bypassing the UAC remotely I'm going to

145
00:08:42,490 --> 00:08:49,140
do it local but you can do it remotely

146
00:08:45,280 --> 00:08:53,050
and finally over the last case is the

147
00:08:49,140 --> 00:08:56,230
this process is our say yellow Masao

148
00:08:53,050 --> 00:08:57,790
servicio yeah we have this compromised

149
00:08:56,230 --> 00:08:59,980
in the system because this is a service

150
00:08:57,790 --> 00:09:07,719
with a connectivity outside and there's

151
00:08:59,980 --> 00:09:15,400
no right here we have to go to the right

152
00:09:07,720 --> 00:09:16,960
scale we do other things where we focus

153
00:09:15,400 --> 00:09:20,130
in the case in the middle and this is

154
00:09:16,960 --> 00:09:24,330
what walk w AC a

155
00:09:20,130 --> 00:09:26,890
molas gonna work different types of

156
00:09:24,330 --> 00:09:27,550
different types of techniques in order

157
00:09:26,890 --> 00:09:29,830
to do

158
00:09:27,550 --> 00:09:32,709
UAC bypasses there's different

159
00:09:29,830 --> 00:09:39,150
techniques the most common one the one

160
00:09:32,710 --> 00:09:51,340
that's more broadly used is the DLL

161
00:09:39,150 --> 00:09:54,220
jacking and this is a DLL sequester the

162
00:09:51,340 --> 00:09:56,890
original one and read some line it will

163
00:09:54,220 --> 00:10:02,410
run the code that I will have included

164
00:09:56,890 --> 00:10:04,420
in that DLL so the targa the objective

165
00:10:02,410 --> 00:10:07,480
will be approaches that will elevate my

166
00:10:04,420 --> 00:10:08,979
DLL and this process will happen by this

167
00:10:07,480 --> 00:10:10,900
binary will have been signed by

168
00:10:08,980 --> 00:10:17,080
Microsoft with and

169
00:10:10,900 --> 00:10:21,130
with a elevate drew so all these records

170
00:10:17,080 --> 00:10:23,800
will be elevator through high integrity

171
00:10:21,130 --> 00:10:26,170
process so how many binaries do you

172
00:10:23,800 --> 00:10:29,680
think there could be in Windows system

173
00:10:26,170 --> 00:10:32,020
that will meet this conditions will be

174
00:10:29,680 --> 00:10:35,560
you'd be surprised and this is quite

175
00:10:32,020 --> 00:10:38,680
simple the idea is quite simple and in

176
00:10:35,560 --> 00:10:42,280
practice it's a different story so now

177
00:10:38,680 --> 00:10:46,839
we're going to do a little test a guide

178
00:10:42,280 --> 00:10:50,170
that just so that you may see what this

179
00:10:46,840 --> 00:10:58,900
is all about and so we're gonna go in

180
00:10:50,170 --> 00:11:00,939
here my opponent office monitor so

181
00:10:58,900 --> 00:11:03,670
there's a test monitor in order to see

182
00:11:00,940 --> 00:11:07,680
the events that are taking place in the

183
00:11:03,670 --> 00:11:12,130
file system so like I'm saying here I've

184
00:11:07,680 --> 00:11:12,339
filtered can you see it well more or

185
00:11:12,130 --> 00:11:18,010
less

186
00:11:12,340 --> 00:11:27,930
your meaty the binary here and that's

187
00:11:18,010 --> 00:11:33,760
called something launcher MGMT launcher

188
00:11:27,930 --> 00:11:36,819
we're filtering this binary and when the

189
00:11:33,760 --> 00:11:39,090
person says doc doc oh let's run it so

190
00:11:36,820 --> 00:11:42,600
you can see it

191
00:11:39,090 --> 00:11:42,600
MGMT launcher

192
00:11:43,670 --> 00:11:50,089
when the Solano's kudo significa que is

193
00:11:47,440 --> 00:11:52,730
you see like there's this means that

194
00:11:50,090 --> 00:11:56,450
this banner is going to be run in high

195
00:11:52,730 --> 00:12:01,520
integrity integrity process and the UAC

196
00:11:56,450 --> 00:12:02,230
should come out should jump out but it

197
00:12:01,520 --> 00:12:07,699
won't

198
00:12:02,230 --> 00:12:11,210
it's not something luck local talk is

199
00:12:07,700 --> 00:12:14,720
very few todos came anything

200
00:12:11,210 --> 00:12:17,620
Kelvin REO I don't was car any Tsuruta

201
00:12:14,720 --> 00:12:24,130
so a result I say that the binary

202
00:12:17,620 --> 00:12:27,860
through this route was looking for this

203
00:12:24,130 --> 00:12:31,280
file and didn't find it this folder and

204
00:12:27,860 --> 00:12:36,380
didn't find it so why well let's remove

205
00:12:31,280 --> 00:12:41,770
the filter and see what it is actually

206
00:12:36,380 --> 00:12:49,760
looking for it is this here precisely

207
00:12:41,770 --> 00:12:54,170
for the local repository that Windows

208
00:12:49,760 --> 00:13:03,410
systems have and this is where dll's are

209
00:12:54,170 --> 00:13:07,459
storing the binary may look you will go

210
00:13:03,410 --> 00:13:10,910
to the store to the warehouse and find

211
00:13:07,460 --> 00:13:14,780
them it's like a dll warehouse if you

212
00:13:10,910 --> 00:13:17,270
don't find them you go here so here if

213
00:13:14,780 --> 00:13:20,390
opens up a door and have we keep

214
00:13:17,270 --> 00:13:23,689
building this route until it finds that

215
00:13:20,390 --> 00:13:26,300
the ll the dll we're interested in it

216
00:13:23,690 --> 00:13:29,060
will find it before and find this one

217
00:13:26,300 --> 00:13:30,800
before the legitimate one so what do we

218
00:13:29,060 --> 00:13:36,589
say we say that there's a process that's

219
00:13:30,800 --> 00:13:39,589
being run I know high integrity and the

220
00:13:36,590 --> 00:13:43,580
DLL is run that was going to be run in

221
00:13:39,590 --> 00:13:45,730
the same context of high integrity and

222
00:13:43,580 --> 00:13:48,160
this is where the cut is going to be run

223
00:13:45,730 --> 00:13:53,139
in context of high integrity so let's

224
00:13:48,160 --> 00:14:00,819
try let's see what our an inductee of

225
00:13:53,139 --> 00:14:04,839
another to the will tell us a profit

226
00:14:00,820 --> 00:14:07,180
exploring the various heat losses

227
00:14:04,839 --> 00:14:11,170
Explorer will tell us about the

228
00:14:07,180 --> 00:14:22,329
integrity context under which this is

229
00:14:11,170 --> 00:14:24,540
being run I was wrong targeted eyes on

230
00:14:22,329 --> 00:14:24,540
her again

231
00:14:49,210 --> 00:15:00,800
it says my integrity so if I can make

232
00:14:54,140 --> 00:15:04,250
sure that this binary will run my DLL

233
00:15:00,800 --> 00:15:12,280
the result will be this bypass the

234
00:15:04,250 --> 00:15:12,280
curious thing the funny thing is s esto

235
00:15:12,940 --> 00:15:17,500
para esto hasta ya know

236
00:15:22,620 --> 00:15:31,500
when I started in Danzig tech podemos

237
00:15:27,260 --> 00:15:37,850
with this tool we can see what I was

238
00:15:31,500 --> 00:15:44,010
doing earlier the ultra elevate drew and

239
00:15:37,850 --> 00:15:47,550
signed by Microsoft but we have seen the

240
00:15:44,010 --> 00:15:51,480
result we see the it's being run in high

241
00:15:47,550 --> 00:15:55,709
integrity the UAC didn't jump out and

242
00:15:51,480 --> 00:15:59,420
the screen didn't come out as an

243
00:15:55,710 --> 00:16:12,890
administrator I run this I'd see the UAC

244
00:15:59,420 --> 00:16:20,430
jumping so let's do this I've note here

245
00:16:12,890 --> 00:16:23,220
script it's available and now power

246
00:16:20,430 --> 00:16:26,640
saying your cantando

247
00:16:23,220 --> 00:16:37,730
you know hub and I'm going to tell you

248
00:16:26,640 --> 00:16:37,730
what we do very briefly the aim

249
00:16:39,820 --> 00:16:49,820
Claire knows so the goal is to create

250
00:16:44,720 --> 00:16:52,370
these folders that we see here lost

251
00:16:49,820 --> 00:17:02,180
among where they are let's see if I can

252
00:16:52,370 --> 00:17:11,030
find them and then the car the folders

253
00:17:02,180 --> 00:17:13,790
were coming coming behind policy rock

254
00:17:11,030 --> 00:17:17,109
Reno's premier soccer Peeta so we're

255
00:17:13,790 --> 00:17:17,109
gonna create this folder

256
00:17:17,380 --> 00:17:22,730
there's something 30:10 you say here

257
00:17:20,000 --> 00:17:31,730
crazy I'm sure I bet you won't be able

258
00:17:22,730 --> 00:17:35,660
to create them with then we create this

259
00:17:31,730 --> 00:17:41,810
nomenclature Microsoft Windows all this

260
00:17:35,660 --> 00:17:46,520
folder and inside I put in the DLL but

261
00:17:41,810 --> 00:17:49,310
not the legitimate one we gonna put in

262
00:17:46,520 --> 00:17:52,220
one with a code that we're running with

263
00:17:49,310 --> 00:17:56,929
put it inside alright in order to save

264
00:17:52,220 --> 00:17:58,990
some time we have it here already and

265
00:17:56,930 --> 00:18:02,900
I'm going to show you the yellow it's a

266
00:17:58,990 --> 00:18:18,350
five case the legitimate one is five

267
00:18:02,900 --> 00:18:22,310
case and the system with Metasploit let

268
00:18:18,350 --> 00:18:25,939
me show you we have this folder here and

269
00:18:22,310 --> 00:18:29,800
inside we have the road and the DLL and

270
00:18:25,940 --> 00:18:32,800
it's ready and now reduce to copy this

271
00:18:29,800 --> 00:18:32,800
where

272
00:18:40,240 --> 00:18:46,909
system32 and you may say you're not

273
00:18:43,279 --> 00:18:59,770
gonna be able to do it in system32 try

274
00:18:46,909 --> 00:19:05,390
and copy this folder remote get an

275
00:18:59,770 --> 00:19:07,940
access denied message but here and

276
00:19:05,390 --> 00:19:09,559
physically and I go continue that's it

277
00:19:07,940 --> 00:19:14,169
let's imagine that you are working

278
00:19:09,559 --> 00:19:17,559
remotely you're doing this and remote

279
00:19:14,169 --> 00:19:20,659
how do you do this there's in Windows

280
00:19:17,559 --> 00:19:22,730
this is good for Windows Windows seven

281
00:19:20,659 --> 00:19:33,250
eight and eight one and it's a binary

282
00:19:22,730 --> 00:19:33,250
that's called Musa Musa have you Musa

283
00:19:33,429 --> 00:19:43,510
Windows Update standalone installed it's

284
00:19:39,529 --> 00:19:55,730
a binary that Windows has and a way

285
00:19:43,510 --> 00:19:58,870
every is look at it little shield means

286
00:19:55,730 --> 00:20:05,480
that it's run on the high integrity

287
00:19:58,870 --> 00:20:08,928
context of the case will be evidence

288
00:20:05,480 --> 00:20:19,460
system 32 what does this binary do this

289
00:20:08,929 --> 00:20:26,419
here's the binary extract the Installer

290
00:20:19,460 --> 00:20:28,370
will extract the package contents so

291
00:20:26,419 --> 00:20:30,799
will extract the package down context to

292
00:20:28,370 --> 00:20:35,029
the destination folder it will compress

293
00:20:30,799 --> 00:20:38,658
it and put it in the folder I'll tell

294
00:20:35,029 --> 00:20:42,820
them to install it in and it's going to

295
00:20:38,659 --> 00:20:46,539
copy it and here we're going to generate

296
00:20:42,820 --> 00:20:46,539
file I mean

297
00:20:52,660 --> 00:21:02,950
the template here already in order to

298
00:20:55,610 --> 00:21:06,199
save time the result of all this is this

299
00:21:02,950 --> 00:21:10,430
makeup instead of here there's this

300
00:21:06,200 --> 00:21:13,300
other folder with everything we've been

301
00:21:10,430 --> 00:21:18,080
building and we use this in order to

302
00:21:13,300 --> 00:21:20,720
decompress it with WS a and it's going

303
00:21:18,080 --> 00:21:24,649
to store it where I'll tell it to store

304
00:21:20,720 --> 00:21:26,390
it I know that I'm driving you nuts

305
00:21:24,650 --> 00:21:32,090
with all these pictures and everything a

306
00:21:26,390 --> 00:21:34,210
bit you know I need to tell you how it's

307
00:21:32,090 --> 00:21:34,209
done

308
00:21:43,990 --> 00:21:51,650
my name is rocky and potato the

309
00:21:48,110 --> 00:21:59,889
Mademoiselle parameter there's the file

310
00:21:51,650 --> 00:22:02,990
in this drop parameter system 32 no

311
00:21:59,890 --> 00:22:12,830
apparently nothing's happened there it

312
00:22:02,990 --> 00:22:18,290
is coincides with matches what we have

313
00:22:12,830 --> 00:22:20,990
here is a DLL and now with this we pick

314
00:22:18,290 --> 00:22:24,080
take our colleague and that in order to

315
00:22:20,990 --> 00:22:28,880
make sure that we have this right in

316
00:22:24,080 --> 00:22:33,320
this file we figure a handler in order

317
00:22:28,880 --> 00:22:39,310
to get the reverse connection this is a

318
00:22:33,320 --> 00:22:39,310
handler and when we exactly the comma

319
00:22:41,410 --> 00:23:07,850
launcher MGMT launcher will give us back

320
00:22:46,550 --> 00:23:11,270
this reverse thing okay nothing's wrong

321
00:23:07,850 --> 00:23:14,510
here actually it has been run if we go

322
00:23:11,270 --> 00:23:21,410
to the landscape in straighter we'll see

323
00:23:14,510 --> 00:23:24,320
it here here it is another here you may

324
00:23:21,410 --> 00:23:27,440
say I don't see a system anywhere

325
00:23:24,320 --> 00:23:32,870
there's no I don't see the system that I

326
00:23:27,440 --> 00:23:38,809
have the right to do this right here so

327
00:23:32,870 --> 00:23:42,409
that game especially by the LFA

328
00:23:38,809 --> 00:23:44,690
otherwise very yucky cool I guess so

329
00:23:42,410 --> 00:23:48,200
this technique this thing works very

330
00:23:44,690 --> 00:23:51,470
well and when there are seven there are

331
00:23:48,200 --> 00:23:54,350
many binary is that are susceptible this

332
00:23:51,470 --> 00:23:58,490
and same with Windows 10 understand you

333
00:23:54,350 --> 00:24:01,189
don't use the W USA because they took

334
00:23:58,490 --> 00:24:03,050
out the extract parameter but there's

335
00:24:01,190 --> 00:24:10,360
this other technique through the comb

336
00:24:03,050 --> 00:24:10,360
object and put them in high operations

337
00:24:13,630 --> 00:24:18,380
and now let's talk about a different

338
00:24:16,100 --> 00:24:21,230
type of techniques we can use on the

339
00:24:18,380 --> 00:24:21,710
windowed Windows 10 in order to do these

340
00:24:21,230 --> 00:24:25,240
things

341
00:24:21,710 --> 00:24:25,240
vamos Ockendon you are

342
00:24:29,320 --> 00:24:33,250
you're on with a lot of light then you

343
00:24:31,180 --> 00:24:38,010
can find this so now we all talk about

344
00:24:33,250 --> 00:24:43,870
the file desk technique file s technique

345
00:24:38,010 --> 00:24:50,370
this technique is about one year old and

346
00:24:43,870 --> 00:24:53,469
there are three different file file Isis

347
00:24:50,370 --> 00:24:54,669
that are now well known it has if there

348
00:24:53,470 --> 00:24:58,240
is something very good about this

349
00:24:54,670 --> 00:25:02,680
technique because no file is in contact

350
00:24:58,240 --> 00:25:07,030
with the disk in the case of DLL Jack in

351
00:25:02,680 --> 00:25:10,420
the DLL needs to touch the disk so in

352
00:25:07,030 --> 00:25:16,960
that time the virus can get ahead and

353
00:25:10,420 --> 00:25:19,630
avoid that UAC bypass within the legal

354
00:25:16,960 --> 00:25:22,090
framework but what we're going to do

355
00:25:19,630 --> 00:25:25,470
with the file list is tamper with the

356
00:25:22,090 --> 00:25:30,780
windows register so my way of this

357
00:25:25,470 --> 00:25:33,700
interaction we will see how you AC

358
00:25:30,780 --> 00:25:35,740
bypass can be done without any

359
00:25:33,700 --> 00:25:41,440
interaction with the disk which is

360
00:25:35,740 --> 00:25:44,740
pretty interesting let's see it in

361
00:25:41,440 --> 00:25:47,980
practice the first final list that was

362
00:25:44,740 --> 00:25:51,400
launched was very popular and as a

363
00:25:47,980 --> 00:25:53,710
matter of fact Microsoft fixes fixed the

364
00:25:51,400 --> 00:25:59,520
first one of them all because it was

365
00:25:53,710 --> 00:26:07,420
used in a malware campaign we would have

366
00:25:59,520 --> 00:26:10,120
file and thanks to this they could

367
00:26:07,420 --> 00:26:15,780
execute more with the highest level of

368
00:26:10,120 --> 00:26:20,340
privilege of Rights and the Microsoft

369
00:26:15,780 --> 00:26:22,660
fixed all these all these are viruses

370
00:26:20,340 --> 00:26:29,770
now you're going to see how it works on

371
00:26:22,660 --> 00:26:41,350
Windows 10 we have rahman for this

372
00:26:29,770 --> 00:26:50,020
purpose let's set a filter and now we

373
00:26:41,350 --> 00:26:53,800
run the binary so this is the binary

374
00:26:50,020 --> 00:26:57,280
that contains the optional features and

375
00:26:53,800 --> 00:27:02,909
here you have a whole bunch of results

376
00:26:57,280 --> 00:27:09,149
and in the registry we find a lot of

377
00:27:02,910 --> 00:27:14,230
instances with name no fatin found so

378
00:27:09,150 --> 00:27:25,270
let's go to the point let's focus on the

379
00:27:14,230 --> 00:27:30,370
problem and use yet another filter here

380
00:27:25,270 --> 00:27:33,340
we are here here you can see it here you

381
00:27:30,370 --> 00:27:36,280
can see the registration key that you

382
00:27:33,340 --> 00:27:38,439
are about to see in the registry itself

383
00:27:36,280 --> 00:27:40,389
this is the one that cannot be found and

384
00:27:38,440 --> 00:27:43,840
I'm going to tell you a little bit how

385
00:27:40,390 --> 00:27:47,020
this works when the binary is invoked

386
00:27:43,840 --> 00:27:49,870
the process is created it launches

387
00:27:47,020 --> 00:27:53,950
several queries there are some branches

388
00:27:49,870 --> 00:27:58,030
missing so they go to different branches

389
00:27:53,950 --> 00:28:00,970
for example 18 CK are where it looks for

390
00:27:58,030 --> 00:28:06,910
more information that's how we found out

391
00:28:00,970 --> 00:28:10,990
that each user in HKC you can create any

392
00:28:06,910 --> 00:28:14,500
key whatsoever so this process was

393
00:28:10,990 --> 00:28:18,550
running a high integrity process and it

394
00:28:14,500 --> 00:28:21,310
was able to invoke code through some of

395
00:28:18,550 --> 00:28:29,560
those branches it would invoke a binary

396
00:28:21,310 --> 00:28:34,510
so since we look in HKC you first you

397
00:28:29,560 --> 00:28:36,700
create the whole branch inside HKC you

398
00:28:34,510 --> 00:28:40,429
it's a sort of dear little checking but

399
00:28:36,700 --> 00:28:43,549
in the registry so I create the whole

400
00:28:40,429 --> 00:28:50,869
structure and I input the binary that I

401
00:28:43,549 --> 00:28:59,619
want to be run in this case the key is

402
00:28:50,869 --> 00:29:03,590
here now we are opening software classes

403
00:28:59,619 --> 00:29:08,059
and this we have to do it by hand of

404
00:29:03,590 --> 00:29:11,240
course we can automate eyes it I'm not

405
00:29:08,059 --> 00:29:14,769
sure that you're seeing it clearly let's

406
00:29:11,240 --> 00:29:14,769
magnify this a little bit

407
00:29:21,870 --> 00:29:24,469
right

408
00:29:26,409 --> 00:29:43,249
open command in all the finalists this

409
00:29:39,379 --> 00:29:47,570
would have been enough for example we

410
00:29:43,249 --> 00:29:51,100
could have the route c11 MD with high

411
00:29:47,570 --> 00:30:01,220
integrity but in this case in the binary

412
00:29:51,100 --> 00:30:04,399
analysis when we ran it the branch was

413
00:30:01,220 --> 00:30:14,739
actually of there so we're not going to

414
00:30:04,399 --> 00:30:21,649
have the BS and not found message so

415
00:30:14,739 --> 00:30:30,919
what is going wrong now as here the

416
00:30:21,649 --> 00:30:33,709
delegate executes attribute so it's

417
00:30:30,919 --> 00:30:37,820
actually finding this this one but not

418
00:30:33,710 --> 00:30:43,970
the other one in this case it was simple

419
00:30:37,820 --> 00:30:46,340
as creating this if you disassemble this

420
00:30:43,970 --> 00:30:52,489
with reverse engineering you can see it

421
00:30:46,340 --> 00:30:58,249
very clearly and here we type system 32

422
00:30:52,489 --> 00:31:02,269
CM a dot XS so when the binary runs and

423
00:30:58,249 --> 00:31:04,970
for exit executes itself again it's

424
00:31:02,269 --> 00:31:08,119
going to find this branch and this is

425
00:31:04,970 --> 00:31:11,869
what it's going to run so we have again

426
00:31:08,119 --> 00:31:15,769
another high integrity process and

427
00:31:11,869 --> 00:31:18,019
whatever it invokes will be run in high

428
00:31:15,769 --> 00:31:27,980
integrity therefore we have our bypass

429
00:31:18,019 --> 00:31:34,190
let's see it here you can see it this is

430
00:31:27,980 --> 00:31:36,769
a CME and the configuration thing isn't

431
00:31:34,190 --> 00:31:38,630
open this time now we are going to open

432
00:31:36,769 --> 00:31:43,760
a normal irregular sea

433
00:31:38,630 --> 00:31:52,280
and are if I open a are with this user

434
00:31:43,760 --> 00:31:56,170
and I go to the root route the access is

435
00:31:52,280 --> 00:31:59,330
denied as you can see here of course

436
00:31:56,170 --> 00:32:05,450
because I haven't run the process as

437
00:31:59,330 --> 00:32:07,399
admin if I use the console that I got

438
00:32:05,450 --> 00:32:10,490
with foot helper

439
00:32:07,400 --> 00:32:14,780
since this as a high integrity process

440
00:32:10,490 --> 00:32:26,390
that as invoking this CMD I'm going to

441
00:32:14,780 --> 00:32:28,580
be able to overwrite the root here you

442
00:32:26,390 --> 00:32:33,170
can see it and of course I can erase it

443
00:32:28,580 --> 00:32:37,540
now we are working on local but you have

444
00:32:33,170 --> 00:32:43,130
to extrapolate this imagine you have a

445
00:32:37,540 --> 00:32:45,170
reverse shell you are in a post exploit

446
00:32:43,130 --> 00:32:48,980
phase and you need to elevate that

447
00:32:45,170 --> 00:32:53,180
privilege that right these stick makes I

448
00:32:48,980 --> 00:32:59,000
think or at least it was so a couple of

449
00:32:53,180 --> 00:33:00,530
weeks ago it was possible to do this and

450
00:32:59,000 --> 00:33:05,180
we can take advantage of these

451
00:33:00,530 --> 00:33:10,190
techniques for pen testing this was the

452
00:33:05,180 --> 00:33:13,430
UAC bypass ear though were more than 10

453
00:33:10,190 --> 00:33:23,330
different bypasses so it is really a

454
00:33:13,430 --> 00:33:25,670
significant figure I was going to show

455
00:33:23,330 --> 00:33:29,990
you in all the one but we will leave it

456
00:33:25,670 --> 00:33:34,340
for the ends we are working on a tool

457
00:33:29,990 --> 00:33:36,350
called waka mola which looks like this

458
00:33:34,340 --> 00:33:38,629
it looks a little bit like met exploit

459
00:33:36,350 --> 00:33:43,719
with this black console and it's not

460
00:33:38,630 --> 00:33:49,520
really nice to the eye but the goal is

461
00:33:43,720 --> 00:33:50,240
to follow the item met the trilogy item

462
00:33:49,520 --> 00:33:54,220
stands

463
00:33:50,240 --> 00:33:57,920
in Spanish to research demonstration

464
00:33:54,220 --> 00:34:01,670
exploitation so this is what interested

465
00:33:57,920 --> 00:34:03,800
as the research part having an open

466
00:34:01,670 --> 00:34:05,960
project in a community where people

467
00:34:03,800 --> 00:34:08,029
could implement different modules in

468
00:34:05,960 --> 00:34:11,389
order to work with this having clear

469
00:34:08,030 --> 00:34:14,210
ideas about what UAC and bypass

470
00:34:11,389 --> 00:34:18,889
ah people could do their own research

471
00:34:14,210 --> 00:34:22,790
and identify new you I you AC bypasses

472
00:34:18,889 --> 00:34:25,340
and share them so we worked on the

473
00:34:22,790 --> 00:34:27,619
architecture it's quite a simple one we

474
00:34:25,340 --> 00:34:29,270
have an interactive console that uploads

475
00:34:27,619 --> 00:34:33,440
modules there are different sorts of

476
00:34:29,270 --> 00:34:35,629
modules we have our the investigation

477
00:34:33,440 --> 00:34:37,940
attack but there are also some

478
00:34:35,629 --> 00:34:41,750
mitigation attacks that can be done

479
00:34:37,940 --> 00:34:44,418
easily and in the attack we focus on the

480
00:34:41,750 --> 00:34:49,040
most known attacks we have for example

481
00:34:44,418 --> 00:34:51,440
file s we have DLL checking we have

482
00:34:49,040 --> 00:34:52,070
parietal injection that we will see

483
00:34:51,440 --> 00:34:54,970
later on

484
00:34:52,070 --> 00:34:57,530
so the different UAC bypasses are

485
00:34:54,969 --> 00:34:59,959
implemented here what's interesting here

486
00:34:57,530 --> 00:35:03,680
is that an administrator could use this

487
00:34:59,960 --> 00:35:07,010
tool to test which machines are

488
00:35:03,680 --> 00:35:10,279
susceptible to a UAC bypass in a certain

489
00:35:07,010 --> 00:35:11,930
equipment and are not under control in

490
00:35:10,280 --> 00:35:14,990
the investigation what we try to

491
00:35:11,930 --> 00:35:19,549
automatic techniques we know how

492
00:35:14,990 --> 00:35:22,339
finalists works but if we automate is

493
00:35:19,550 --> 00:35:26,090
thus we can take a look at all the minor

494
00:35:22,340 --> 00:35:30,350
E's that can end up provoking a UAC

495
00:35:26,090 --> 00:35:32,930
bypass so this can be automated to

496
00:35:30,350 --> 00:35:37,850
analyze or the all the registration

497
00:35:32,930 --> 00:35:40,790
branches and see if this UAC bypass can

498
00:35:37,850 --> 00:35:46,319
be finally accomplished this is in the

499
00:35:40,790 --> 00:35:50,740
investigation part can we automate eyes

500
00:35:46,320 --> 00:35:54,820
the calculation of knowing how many my

501
00:35:50,740 --> 00:35:58,509
passes are authenticated by Microsoft

502
00:35:54,820 --> 00:36:00,250
with Auto elevate true well this goes to

503
00:35:58,510 --> 00:36:04,150
investigation as well and we continue

504
00:36:00,250 --> 00:36:07,150
adding more and more modules and on

505
00:36:04,150 --> 00:36:10,480
Wednesday as I said it will be presented

506
00:36:07,150 --> 00:36:12,130
in the black hat in Europe that is

507
00:36:10,480 --> 00:36:18,250
something that made us very proud of

508
00:36:12,130 --> 00:36:23,100
course will the language we used is

509
00:36:18,250 --> 00:36:27,880
fight in Python well people who know me

510
00:36:23,100 --> 00:36:31,750
know that I prefer Rubin but we decided

511
00:36:27,880 --> 00:36:35,920
to use Python and I'm struggling with it

512
00:36:31,750 --> 00:36:37,570
we try to simplify it so that it would

513
00:36:35,920 --> 00:36:40,630
be straightforward for any of you to

514
00:36:37,570 --> 00:36:44,410
implement a module so I will show you a

515
00:36:40,630 --> 00:36:47,800
module that implements u-ace a bypass

516
00:36:44,410 --> 00:36:49,779
with the finalist type it's only three

517
00:36:47,800 --> 00:36:55,930
or four lines so you're going to find

518
00:36:49,780 --> 00:37:00,400
that pretty cool yes it is this is what

519
00:36:55,930 --> 00:37:05,470
a module looks like what you are going

520
00:37:00,400 --> 00:37:08,890
to be tampering with is this before we

521
00:37:05,470 --> 00:37:12,339
saw the parent module but you will get

522
00:37:08,890 --> 00:37:16,359
this and here you need to just modify

523
00:37:12,340 --> 00:37:20,290
the module options fill in the

524
00:37:16,360 --> 00:37:22,840
information such as in Metasploit who is

525
00:37:20,290 --> 00:37:26,259
the author of the license etc and then

526
00:37:22,840 --> 00:37:28,780
the run mode what the module is going to

527
00:37:26,260 --> 00:37:29,820
do when it is run it is as simple as

528
00:37:28,780 --> 00:37:35,910
that

529
00:37:29,820 --> 00:37:38,260
so this actually took us a lot of effort

530
00:37:35,910 --> 00:37:41,560
particularly my colleague Santiago who

531
00:37:38,260 --> 00:37:44,080
was here presenting a conference

532
00:37:41,560 --> 00:37:47,730
yesterday and this is what we came up

533
00:37:44,080 --> 00:37:47,730
with this is wakka moly

534
00:37:51,900 --> 00:38:09,550
it is available in github it's ready for

535
00:37:55,990 --> 00:38:19,359
download this is the console and before

536
00:38:09,550 --> 00:38:27,460
we get inside I want to show you the

537
00:38:19,360 --> 00:38:28,240
foot helper files now I need a

538
00:38:27,460 --> 00:38:31,000
thumbprint

539
00:38:28,240 --> 00:38:35,770
look at this mostly it's all about

540
00:38:31,000 --> 00:38:39,880
prints here you can see one two three

541
00:38:35,770 --> 00:38:42,700
lines five lines in total the rest are

542
00:38:39,880 --> 00:38:45,460
just prints there are more prints than

543
00:38:42,700 --> 00:38:48,790
lines implementing the bypass it's true

544
00:38:45,460 --> 00:38:51,820
this bypass is easy to implement just a

545
00:38:48,790 --> 00:38:56,730
few lines and it integrates with the

546
00:38:51,820 --> 00:39:01,440
framework also so now let's make a test

547
00:38:56,730 --> 00:39:04,300
let's try a different module I have here

548
00:39:01,440 --> 00:39:07,060
before we do that well these are the

549
00:39:04,300 --> 00:39:09,040
different framework options we will add

550
00:39:07,060 --> 00:39:11,650
more and more but before going to the

551
00:39:09,040 --> 00:39:14,640
attack I want to show you the

552
00:39:11,650 --> 00:39:17,290
investigation part here are the modules

553
00:39:14,640 --> 00:39:20,890
look at this one for example which is

554
00:39:17,290 --> 00:39:23,980
trying to look for binaries in the

555
00:39:20,890 --> 00:39:28,210
system they vary in Windows 7 or Windows

556
00:39:23,980 --> 00:39:32,260
10 so it looks for the binaries that may

557
00:39:28,210 --> 00:39:34,930
be vulnerable to a potential UAC bypass

558
00:39:32,260 --> 00:39:38,560
you we are going to run it now so that

559
00:39:34,930 --> 00:39:44,109
you can look at it in practice these are

560
00:39:38,560 --> 00:39:47,710
the different options you have the

561
00:39:44,110 --> 00:39:52,120
description and the outputs we are going

562
00:39:47,710 --> 00:39:56,200
to have a bin list file output that

563
00:39:52,120 --> 00:40:00,009
match with the Microsoft authenticated

564
00:39:56,200 --> 00:40:03,339
files and with the order elevate true

565
00:40:00,010 --> 00:40:06,520
this is currently running as you can see

566
00:40:03,340 --> 00:40:14,920
and as a result we will end up with this

567
00:40:06,520 --> 00:40:20,170
document here we have 60 that fulfilled

568
00:40:14,920 --> 00:40:23,020
this condition in Windows 10 so if you

569
00:40:20,170 --> 00:40:26,200
add modules to this you can broaden the

570
00:40:23,020 --> 00:40:30,460
employee in the investigation and you

571
00:40:26,200 --> 00:40:33,700
can automate these investigations to for

572
00:40:30,460 --> 00:40:35,820
DLL and jackin so this is what we are

573
00:40:33,700 --> 00:40:48,240
after we are looking for more UAC

574
00:40:35,820 --> 00:40:56,200
bypasses on the other hand we also have

575
00:40:48,240 --> 00:41:00,490
modules DLL modules when you run a list

576
00:40:56,200 --> 00:41:05,740
of processes you can verify which ones

577
00:41:00,490 --> 00:41:08,410
are looking for the local folder so if

578
00:41:05,740 --> 00:41:11,770
they look for it and it's not created

579
00:41:08,410 --> 00:41:14,410
this is a way of introducing a DLL

580
00:41:11,770 --> 00:41:17,020
Jiaqing there are different modules we

581
00:41:14,410 --> 00:41:20,259
will continue adding documentation for

582
00:41:17,020 --> 00:41:28,509
you to check and before we move any

583
00:41:20,260 --> 00:41:33,550
further you are going to see the results

584
00:41:28,510 --> 00:41:38,770
here you have them on Windows 7 8.1 and

585
00:41:33,550 --> 00:41:43,960
10 Auto elevate of binaries are here it

586
00:41:38,770 --> 00:41:46,810
varies according to the OS and for

587
00:41:43,960 --> 00:41:50,890
example food helper cannot be found on

588
00:41:46,810 --> 00:41:54,400
Windows 7 because it appeared on later

589
00:41:50,890 --> 00:42:00,779
versions but this is the number of

590
00:41:54,400 --> 00:42:00,780
finals finalists files we found 4 4 & 3

591
00:42:02,100 --> 00:42:13,170
and in the case of DLL jackin things get

592
00:42:09,100 --> 00:42:17,339
a bit more complicated 12 out of 50

593
00:42:13,170 --> 00:42:20,040
fifteen out of 60 L 13 out of 60 these

594
00:42:17,339 --> 00:42:30,690
are interesting results that will be

595
00:42:20,040 --> 00:42:34,859
published in a paper very shortly so

596
00:42:30,690 --> 00:42:37,790
we're going to leave the screen and I'm

597
00:42:34,859 --> 00:42:41,509
going to show you a different UAC

598
00:42:37,790 --> 00:42:50,250
bypass that works with variable

599
00:42:41,510 --> 00:42:53,790
injection well programmed tasks have

600
00:42:50,250 --> 00:42:55,859
always been a weakness in Windows have

601
00:42:53,790 --> 00:43:00,299
always been and they continue to be

602
00:42:55,859 --> 00:43:02,759
awakened as a weakness for Windows there

603
00:43:00,299 --> 00:43:09,270
is this task that you can see on the

604
00:43:02,760 --> 00:43:14,790
screen well of course you can also open

605
00:43:09,270 --> 00:43:20,520
the tax executors what's interesting

606
00:43:14,790 --> 00:43:24,180
about this task I got the wrong one

607
00:43:20,520 --> 00:43:29,520
sorry what's interesting about this task

608
00:43:24,180 --> 00:43:33,569
as I was saying is this high level of

609
00:43:29,520 --> 00:43:38,609
integrity it's been executed at a high

610
00:43:33,569 --> 00:43:40,680
level and they realized there was

611
00:43:38,609 --> 00:43:44,848
something very simple about this task

612
00:43:40,680 --> 00:43:49,020
look at the actions when the task is run

613
00:43:44,849 --> 00:43:51,750
versus what is executed look at what is

614
00:43:49,020 --> 00:43:54,089
highlighted in the screen so this is an

615
00:43:51,750 --> 00:43:58,859
environment variable someone thought

616
00:43:54,089 --> 00:44:01,230
what if I inject a varietal here well it

617
00:43:58,859 --> 00:44:03,920
turned out that the environment

618
00:44:01,230 --> 00:44:03,920
variables

619
00:44:07,630 --> 00:44:22,040
are located here exactly here so if we

620
00:44:16,970 --> 00:44:24,950
type yeah boy and deer or whatever we

621
00:44:22,040 --> 00:44:28,480
launched the task the task can be

622
00:44:24,950 --> 00:44:31,490
invoked by any user in this case it is

623
00:44:28,480 --> 00:44:33,980
executed with a high level of integrity

624
00:44:31,490 --> 00:44:35,540
that's the good thing about it we are

625
00:44:33,980 --> 00:44:39,160
going to do it now with Walker mall I'm

626
00:44:35,540 --> 00:44:39,160
going to show you how it is implemented

627
00:44:52,430 --> 00:44:59,078
my

628
00:44:54,940 --> 00:45:04,560
a four-mile Apogee she okay let's

629
00:44:59,079 --> 00:45:07,930
magnify this a little bit this is the

630
00:45:04,560 --> 00:45:12,099
implementation of the run with three

631
00:45:07,930 --> 00:45:15,970
commands we open the environment branch

632
00:45:12,099 --> 00:45:19,030
of HK see you we create environment D

633
00:45:15,970 --> 00:45:21,759
and here you can read instruction this

634
00:45:19,030 --> 00:45:26,140
is actually what you are setting and

635
00:45:21,760 --> 00:45:28,000
this part here in our case we open a CMD

636
00:45:26,140 --> 00:45:33,879
and if you take a look at this this is

637
00:45:28,000 --> 00:45:38,380
REM when you type in our am in C MA it

638
00:45:33,880 --> 00:45:40,780
is just a comment this says that

639
00:45:38,380 --> 00:45:50,530
whatever is to the right is a comment

640
00:45:40,780 --> 00:45:56,310
why because we want to inject it here

641
00:45:50,530 --> 00:45:56,310
and have the part on the right commented

642
00:45:57,720 --> 00:46:08,740
then we just have to run the task the

643
00:46:03,520 --> 00:46:13,500
silent cleanup tasks the module is only

644
00:46:08,740 --> 00:46:13,500
three lines long let's test it

645
00:46:22,940 --> 00:46:27,430
you can see we can change the

646
00:46:24,619 --> 00:46:31,420
instruction and set a different

647
00:46:27,430 --> 00:46:37,669
instruction if we want it so one it is

648
00:46:31,420 --> 00:46:42,559
launched you can see it on the screen

649
00:46:37,670 --> 00:46:47,029
cyber - dot txt and here we can write

650
00:46:42,559 --> 00:46:53,359
anything we want inside the root for

651
00:46:47,029 --> 00:46:57,710
example cyber - instead of elevating a

652
00:46:53,359 --> 00:47:00,499
CMD we elevate as CMD in a power set

653
00:46:57,710 --> 00:47:04,849
that executed something against my Kali

654
00:47:00,499 --> 00:47:09,799
we return am interpreter and it is a

655
00:47:04,849 --> 00:47:14,269
simple as that so in the end what komali

656
00:47:09,799 --> 00:47:16,400
allows us to research investigates I'm

657
00:47:14,269 --> 00:47:18,488
now going to show it on the screen

658
00:47:16,400 --> 00:47:21,469
because it takes a while before the

659
00:47:18,489 --> 00:47:24,499
searches our ultimate eyes it takes a

660
00:47:21,469 --> 00:47:27,890
few hours the modules are easy to

661
00:47:24,499 --> 00:47:31,279
implement you have seen so I hope you

662
00:47:27,890 --> 00:47:39,379
play with it I hope you work on it a

663
00:47:31,279 --> 00:47:44,180
little bit and as a conclusion we can

664
00:47:39,380 --> 00:47:46,210
say that this year we've seen very

665
00:47:44,180 --> 00:47:50,660
interesting things in terms of UAC

666
00:47:46,210 --> 00:47:53,630
bypass for example finalists if the bad

667
00:47:50,660 --> 00:47:56,149
guys use this we are in trouble of

668
00:47:53,630 --> 00:47:59,329
course but if we use this in order to

669
00:47:56,150 --> 00:48:03,650
improve security we can only get good

670
00:47:59,329 --> 00:48:07,460
things out of here out of this the tool

671
00:48:03,650 --> 00:48:10,609
is open and available in github you can

672
00:48:07,460 --> 00:48:12,469
download it improve it do whatever you

673
00:48:10,609 --> 00:48:15,109
want with it so I hope you test it you

674
00:48:12,469 --> 00:48:17,119
play with it and if you have any

675
00:48:15,109 --> 00:48:22,729
questions while I'm here and I'm going

676
00:48:17,119 --> 00:48:28,690
to be around so feel free to comment

677
00:48:22,729 --> 00:48:28,689
everything you want to share and it's

678
00:48:34,940 --> 00:48:37,000
you

