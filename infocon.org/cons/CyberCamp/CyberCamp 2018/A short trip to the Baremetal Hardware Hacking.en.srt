1
00:00:02,020 --> 00:00:09,990
[Music]

2
00:00:13,760 --> 00:00:22,560
good afternoon severe come back so this

3
00:00:19,710 --> 00:00:25,260
time a completely different register no

4
00:00:22,560 --> 00:00:29,869
more an inspirational presentation and

5
00:00:25,260 --> 00:00:33,900
now we will go into technical stuff so

6
00:00:29,869 --> 00:00:40,920
I'm sure that you are aware of learning

7
00:00:33,900 --> 00:00:47,000
which is a video game which is about one

8
00:00:40,920 --> 00:00:49,769
of these journeys that we all do okay

9
00:00:47,000 --> 00:00:54,600
when we start when you engage in

10
00:00:49,769 --> 00:00:57,720
something is son eun-seo a journey i am

11
00:00:54,600 --> 00:01:02,909
javier tania tania co-founder and chief

12
00:00:57,720 --> 00:01:05,188
operating officers JT sec i had to set

13
00:01:02,909 --> 00:01:08,658
up my own company to end up working in

14
00:01:05,188 --> 00:01:13,048
cybersecurity and this means that now I

15
00:01:08,659 --> 00:01:17,880
lead a work with a team of people and we

16
00:01:13,049 --> 00:01:20,460
do cybersecurity from Granada well we

17
00:01:17,880 --> 00:01:25,729
said before that you can't do service

18
00:01:20,460 --> 00:01:29,908
security from anywhere we test

19
00:01:25,729 --> 00:01:33,179
manufacturers products we check the

20
00:01:29,909 --> 00:01:38,399
security we try to hack the products and

21
00:01:33,179 --> 00:01:42,719
if things go well of there is well they

22
00:01:38,399 --> 00:01:46,259
can certify it they can stamp it and if

23
00:01:42,719 --> 00:01:49,229
not well they we keep on trying it up

24
00:01:46,259 --> 00:01:56,050
until they can certify it so we work

25
00:01:49,229 --> 00:01:58,550
with non common criteria v 142

26
00:01:56,050 --> 00:02:01,640
so this is what we mentioned this

27
00:01:58,550 --> 00:02:05,270
morning this orange book from the

28
00:02:01,640 --> 00:02:08,449
department of defense of the US this

29
00:02:05,270 --> 00:02:12,320
evolved into Common Criteria that is to

30
00:02:08,449 --> 00:02:17,959
say methodology to for product testing

31
00:02:12,320 --> 00:02:19,910
it is criteria that are used by us and

32
00:02:17,960 --> 00:02:24,800
as well as very many other countries we

33
00:02:19,910 --> 00:02:29,030
also have other testing for products for

34
00:02:24,800 --> 00:02:31,300
ICT products so it is the cryptological

35
00:02:29,030 --> 00:02:36,110
National Cryptologic Aid Center

36
00:02:31,300 --> 00:02:38,900
recommends the limited communication to

37
00:02:36,110 --> 00:02:40,930
all the what are all the products

38
00:02:38,900 --> 00:02:51,709
undergo or fulfilled and limited

39
00:02:40,930 --> 00:02:55,110
certification so disclaimer

40
00:02:51,709 --> 00:02:58,200
this is an analysis that we did from a

41
00:02:55,110 --> 00:03:00,510
cybersecurity products of the internet

42
00:02:58,200 --> 00:03:03,780
of the things unfortunately we kind of

43
00:03:00,510 --> 00:03:06,179
discloses the type of the actual type of

44
00:03:03,780 --> 00:03:09,810
products but still we can show you

45
00:03:06,180 --> 00:03:12,560
photographs of the inside the product

46
00:03:09,810 --> 00:03:17,459
internal photographs of the products and

47
00:03:12,560 --> 00:03:20,910
then we also did testing with no norms

48
00:03:17,459 --> 00:03:23,340
we just wanted to check the level of

49
00:03:20,910 --> 00:03:25,440
security of the product manufacturer

50
00:03:23,340 --> 00:03:31,500
wanted to see whether his product was

51
00:03:25,440 --> 00:03:35,510
robust or secure enough and important

52
00:03:31,500 --> 00:03:35,510
element is that this product has to be

53
00:03:36,709 --> 00:03:50,030
resisted talk to physical elements when

54
00:03:46,830 --> 00:03:53,760
I'm saying bare metal hardware hacking

55
00:03:50,030 --> 00:03:56,430
what do I mean by that had my hacking

56
00:03:53,760 --> 00:04:00,090
I'm sure that many of you are aware of

57
00:03:56,430 --> 00:04:03,090
it this is a hacking of Internet of the

58
00:04:00,090 --> 00:04:06,390
things product but when we are talking

59
00:04:03,090 --> 00:04:08,850
about modern environment we are

60
00:04:06,390 --> 00:04:15,798
referring to an environment but there is

61
00:04:08,850 --> 00:04:19,200
no OS where the app is run right away on

62
00:04:15,799 --> 00:04:21,120
silicon what are the differences that we

63
00:04:19,200 --> 00:04:22,800
find when we do inverse engineering

64
00:04:21,120 --> 00:04:24,180
often we do inverse engineering as a

65
00:04:22,800 --> 00:04:26,970
part of the process the process of

66
00:04:24,180 --> 00:04:29,070
looking for vulnerabilities and checking

67
00:04:26,970 --> 00:04:33,570
and ensuring that the product we are

68
00:04:29,070 --> 00:04:36,750
analyzing is secure and where we found

69
00:04:33,570 --> 00:04:41,909
here well in this case there are no

70
00:04:36,750 --> 00:04:43,590
symbols some symbols have you see where

71
00:04:41,910 --> 00:04:45,570
you are when you are doing reverse

72
00:04:43,590 --> 00:04:48,989
engineering so we found those symbols

73
00:04:45,570 --> 00:04:51,930
there were no file systems wrong either

74
00:04:48,990 --> 00:04:55,320
there is no directory to look for things

75
00:04:51,930 --> 00:04:57,240
or to store things and then we were the

76
00:04:55,320 --> 00:05:00,030
situation of senior of knowledge the

77
00:04:57,240 --> 00:05:04,169
manufacturer brought his product to us

78
00:05:00,030 --> 00:05:07,590
and then well as test to just to analyze

79
00:05:04,169 --> 00:05:09,750
it and this is what I will go through so

80
00:05:07,590 --> 00:05:12,200
these are the different stages that we

81
00:05:09,750 --> 00:05:12,200
follow

82
00:05:16,010 --> 00:05:28,170
so first of all we analyzed the device

83
00:05:22,520 --> 00:05:30,330
its architecture then we are going

84
00:05:28,170 --> 00:05:34,590
access to the code that we could see

85
00:05:30,330 --> 00:05:40,130
reading protection we bypassed them then

86
00:05:34,590 --> 00:05:41,390
we did we reversed the code that we

87
00:05:40,130 --> 00:05:45,840
[Music]

88
00:05:41,390 --> 00:05:51,979
extracted there with debugging and then

89
00:05:45,840 --> 00:05:54,000
fast testing and then we could see the

90
00:05:51,980 --> 00:05:56,790
characteristic of exploitation of this

91
00:05:54,000 --> 00:05:59,300
product over could we do to try an Isis

92
00:05:56,790 --> 00:05:59,300
product

93
00:06:00,500 --> 00:06:07,160
how did it start so in the beginning we

94
00:06:04,550 --> 00:06:12,200
were giving a divisive product we knew

95
00:06:07,160 --> 00:06:14,680
nothing about it and when you have when

96
00:06:12,200 --> 00:06:17,180
the product has physical access often

97
00:06:14,680 --> 00:06:19,910
manufacturers introduced cult immerses

98
00:06:17,180 --> 00:06:23,030
your data when you open their device and

99
00:06:19,910 --> 00:06:26,450
try and access internals well the code

100
00:06:23,030 --> 00:06:29,830
is automatically deleted in this case

101
00:06:26,450 --> 00:06:32,750
there was nothing like that at all

102
00:06:29,830 --> 00:06:35,210
afternoon what do you find is the switch

103
00:06:32,750 --> 00:06:38,360
often the switch are just press down and

104
00:06:35,210 --> 00:06:40,609
when you open the box then the switches

105
00:06:38,360 --> 00:06:44,210
are lifted and it is like pressing a

106
00:06:40,610 --> 00:06:44,990
button making all the a code to be

107
00:06:44,210 --> 00:06:48,229
deleted

108
00:06:44,990 --> 00:06:52,700
there was no aunt Ida tamper switch at

109
00:06:48,230 --> 00:06:55,190
all therefore was very easy we just used

110
00:06:52,700 --> 00:06:58,669
about Dremel to open it and they went

111
00:06:55,190 --> 00:07:03,100
right inside and what did we find

112
00:06:58,669 --> 00:07:03,099
well we've found them

113
00:07:05,130 --> 00:07:12,810
abort such as that one and then we moved

114
00:07:08,340 --> 00:07:16,880
on right away to recognize it so he had

115
00:07:12,810 --> 00:07:19,890
a module for fingerprinting and LCD

116
00:07:16,880 --> 00:07:25,520
display a contactless different

117
00:07:19,890 --> 00:07:29,789
interface a contact interface so that by

118
00:07:25,520 --> 00:07:36,409
well either to swipe a smart card or to

119
00:07:29,790 --> 00:07:43,290
just insert a smart card a USB interface

120
00:07:36,410 --> 00:07:45,630
and then also to SM a interfaces some

121
00:07:43,290 --> 00:07:49,050
cards are very similar to SIM cards but

122
00:07:45,630 --> 00:07:51,570
in this case some cards are used to

123
00:07:49,050 --> 00:07:54,660
include or install cryptographic

124
00:07:51,570 --> 00:07:58,490
activity to store keys it is a very

125
00:07:54,660 --> 00:07:58,490
secure place highly isolated

126
00:08:00,550 --> 00:08:11,819
well the former digital class has some

127
00:08:05,319 --> 00:08:11,819
cards in it okay this is what we found

128
00:08:13,470 --> 00:08:20,640
and the first striking thing is that the

129
00:08:16,830 --> 00:08:23,280
worst no stand up flash so there is say

130
00:08:20,640 --> 00:08:26,909
they were there was no place where we

131
00:08:23,280 --> 00:08:28,830
could store anything so we couldn't say

132
00:08:26,910 --> 00:08:31,200
okay I connect to this flash I will hack

133
00:08:28,830 --> 00:08:33,150
or did it and I could get access to the

134
00:08:31,200 --> 00:08:36,120
code no we didn't find that

135
00:08:33,150 --> 00:08:41,549
but we found instead were micro

136
00:08:36,120 --> 00:08:48,390
controllers from stm32 family stm32

137
00:08:41,549 --> 00:08:51,030
family is a manufacturer of micro

138
00:08:48,390 --> 00:08:55,199
controllers of IRM which don't that it's

139
00:08:51,030 --> 00:08:58,260
a trendy architecture that has overtaken

140
00:08:55,200 --> 00:09:02,060
Intel and there were two

141
00:08:58,260 --> 00:09:08,220
microcontrollers one to control

142
00:09:02,060 --> 00:09:11,280
application it was in charge of

143
00:09:08,220 --> 00:09:13,680
controlling iteration with LCD so that

144
00:09:11,280 --> 00:09:19,829
is to say user more of a juicer

145
00:09:13,680 --> 00:09:22,829
application and then cortex m3 and then

146
00:09:19,830 --> 00:09:28,170
SEC microcontroller

147
00:09:22,829 --> 00:09:30,929
SDM to 32f o-72 connected with a finger

148
00:09:28,170 --> 00:09:34,378
printing module some interfaces

149
00:09:30,929 --> 00:09:37,339
contactless and contact interfaces but

150
00:09:34,379 --> 00:09:40,290
it kind of looked like it was more into

151
00:09:37,339 --> 00:09:42,869
security interactions and then when you

152
00:09:40,290 --> 00:09:47,069
find all these what do you do well first

153
00:09:42,869 --> 00:09:49,170
of all well the manufacturer publishes

154
00:09:47,069 --> 00:09:52,498
the specification for these

155
00:09:49,170 --> 00:09:54,719
microcontrollers before I'd like to

156
00:09:52,499 --> 00:09:58,189
clarify something difference between a

157
00:09:54,720 --> 00:10:00,839
microprocessor a microcontroller

158
00:09:58,189 --> 00:10:03,779
microcontrollers of you do not have an

159
00:10:00,839 --> 00:10:06,629
OS they have only small capacity but

160
00:10:03,779 --> 00:10:09,119
they do have real time capabilities I'm

161
00:10:06,629 --> 00:10:13,429
sure that you are all aware of a beer

162
00:10:09,119 --> 00:10:16,399
for Arduino a very well known and then

163
00:10:13,429 --> 00:10:20,850
we on the other hand with micro

164
00:10:16,399 --> 00:10:24,329
processor where the flash is less secure

165
00:10:20,850 --> 00:10:26,429
less protected and it also has a bigger

166
00:10:24,329 --> 00:10:28,829
capacity being a computing capacity and

167
00:10:26,429 --> 00:10:31,740
storage capacity in the case of nickel

168
00:10:28,829 --> 00:10:34,229
controller everything is all together in

169
00:10:31,740 --> 00:10:42,480
the silicon you have the flash the CPU

170
00:10:34,230 --> 00:10:46,559
the arm the AVR Arduino and we look for

171
00:10:42,480 --> 00:10:49,170
our our data sheets so that no but we

172
00:10:46,559 --> 00:10:55,529
have better understanding of us we have

173
00:10:49,170 --> 00:10:59,429
before us I'll show you the USB later on

174
00:10:55,529 --> 00:11:05,459
because actually this is smaller than a

175
00:10:59,429 --> 00:11:06,929
50 P coin and many things have written

176
00:11:05,459 --> 00:11:10,680
on these things that you cannot really

177
00:11:06,929 --> 00:11:13,350
see at a naked ID so you really need to

178
00:11:10,680 --> 00:11:16,170
we live through a microphone so we look

179
00:11:13,350 --> 00:11:19,550
through the characteristic features of

180
00:11:16,170 --> 00:11:19,550
this microcontroller

181
00:11:21,720 --> 00:11:27,389
first thing that we found these

182
00:11:24,389 --> 00:11:31,139
microcontrollers of these series are one

183
00:11:27,389 --> 00:11:38,399
known by everyone very much used in the

184
00:11:31,139 --> 00:11:41,000
maker community and also in the we had

185
00:11:38,399 --> 00:11:46,139
this board which is very similar to

186
00:11:41,000 --> 00:11:52,920
Arduino because in this case when this

187
00:11:46,139 --> 00:11:56,129
was set up by Chinese ok so that it is

188
00:11:52,920 --> 00:11:57,990
can be supported by Arduino and this is

189
00:11:56,129 --> 00:12:01,709
the one that the manufacturer gives to

190
00:11:57,990 --> 00:12:03,899
developers so that for them to learn how

191
00:12:01,709 --> 00:12:09,689
to program it so that they can test

192
00:12:03,899 --> 00:12:12,930
programs etc and last what we have here

193
00:12:09,689 --> 00:12:16,889
is in that st-link which is an interface

194
00:12:12,930 --> 00:12:19,290
of offered by the manufacturer so that

195
00:12:16,889 --> 00:12:22,160
you log on to the device you can program

196
00:12:19,290 --> 00:12:22,160
it etc

197
00:12:25,779 --> 00:12:36,339
recognition stage and so half of our PCB

198
00:12:30,570 --> 00:12:40,630
we know we know more about the device we

199
00:12:36,339 --> 00:12:44,460
are analyzing and then we wanted to

200
00:12:40,630 --> 00:12:47,770
learn how to use it and to develop it

201
00:12:44,460 --> 00:12:50,290
but the motherboard that was made by the

202
00:12:47,770 --> 00:12:52,210
manufacturer we just wanted to take a

203
00:12:50,290 --> 00:12:55,029
closer look at it and to see how things

204
00:12:52,210 --> 00:13:01,270
were interconnected how did we do that

205
00:12:55,029 --> 00:13:05,020
well very easily we measure the voltage

206
00:13:01,270 --> 00:13:11,579
so if two points are connected and we

207
00:13:05,020 --> 00:13:17,260
connect connected and then we check the

208
00:13:11,580 --> 00:13:22,029
false image they beep and then we check

209
00:13:17,260 --> 00:13:25,839
what was connected with what so that

210
00:13:22,029 --> 00:13:29,560
took patience and sour USB microscope

211
00:13:25,839 --> 00:13:34,060
the USB microscope is not is less than

212
00:13:29,560 --> 00:13:38,229
20 euros and then this is when we watch

213
00:13:34,060 --> 00:13:41,380
and then this is the flow chart that we

214
00:13:38,230 --> 00:13:44,650
did and these are all the connections

215
00:13:41,380 --> 00:13:46,660
that we found so we could see

216
00:13:44,650 --> 00:13:50,800
connections to the outside through the

217
00:13:46,660 --> 00:13:54,520
USB 3 fingerprint module through

218
00:13:50,800 --> 00:13:58,469
interfaces of some cards smart cards

219
00:13:54,520 --> 00:13:58,470
also through LCD

220
00:13:59,270 --> 00:14:08,480
and that inside we have persons serious

221
00:14:04,430 --> 00:14:10,729
ports each microprocessor had two or

222
00:14:08,480 --> 00:14:12,740
three of them here we also identified

223
00:14:10,730 --> 00:14:14,630
some connections we identified some of

224
00:14:12,740 --> 00:14:15,640
the microcontrollers were connected with

225
00:14:14,630 --> 00:14:19,550
each other

226
00:14:15,640 --> 00:14:22,880
another microcontroller was connected

227
00:14:19,550 --> 00:14:24,680
with a fingerprint that one also

228
00:14:22,880 --> 00:14:27,880
connected with a smart card and with

229
00:14:24,680 --> 00:14:27,880
some module

230
00:14:30,230 --> 00:14:44,870
and then also when on jtech and SW d

231
00:14:35,690 --> 00:14:53,779
interfaces when you read literature

232
00:14:44,870 --> 00:14:59,029
about hardware hacking often said that

233
00:14:53,779 --> 00:15:01,579
the a DS like a small dot small dosa

234
00:14:59,029 --> 00:15:04,490
have been removed connectors so you

235
00:15:01,579 --> 00:15:09,260
can't just connect to them log onto them

236
00:15:04,490 --> 00:15:12,380
and you can gain access to console but

237
00:15:09,260 --> 00:15:14,689
it is not that easy sometimes it is that

238
00:15:12,380 --> 00:15:20,079
is it sometimes it is not that easy in

239
00:15:14,690 --> 00:15:20,079
our case these these words not that easy

240
00:15:21,560 --> 00:15:27,550
[Music]

241
00:15:23,860 --> 00:15:30,400
but did we do to connect to this

242
00:15:27,550 --> 00:15:35,170
microcontroller so we wanted to control

243
00:15:30,400 --> 00:15:37,420
to the series port interface to see how

244
00:15:35,170 --> 00:15:39,579
the metal controllers were communicating

245
00:15:37,420 --> 00:15:42,040
with the rest of the peripherals and we

246
00:15:39,580 --> 00:15:46,750
also wanted to connect to the JTAG and

247
00:15:42,040 --> 00:15:49,390
swt interfaces in some points the world

248
00:15:46,750 --> 00:15:51,880
had started to say direct access to the

249
00:15:49,390 --> 00:15:54,699
control we could populate it add a

250
00:15:51,880 --> 00:15:58,030
connector to it and to easily connect

251
00:15:54,700 --> 00:15:59,980
ourselves but in the other instances

252
00:15:58,030 --> 00:16:03,280
that was not the case connection through

253
00:15:59,980 --> 00:16:08,910
the two micro controller it was not

254
00:16:03,280 --> 00:16:15,520
possible there was just pathway

255
00:16:08,910 --> 00:16:23,050
underneath the PCB board linking these

256
00:16:15,520 --> 00:16:27,819
two elements so what did we do well we

257
00:16:23,050 --> 00:16:30,689
just scratched it this is a video oh how

258
00:16:27,820 --> 00:16:30,690
we scratched it

259
00:16:34,610 --> 00:16:46,710
[Music]

260
00:16:43,510 --> 00:16:46,710
[Applause]

261
00:16:51,670 --> 00:16:54,829
[Music]

262
00:16:56,990 --> 00:17:04,870
[Music]

263
00:17:06,560 --> 00:17:25,839
[Applause]

264
00:17:08,490 --> 00:17:27,210
[Music]

265
00:17:25,839 --> 00:17:35,980
[Applause]

266
00:17:27,210 --> 00:17:35,980
[Music]

267
00:17:40,520 --> 00:17:51,109
[Music]

268
00:17:51,240 --> 00:17:58,750
Valon we are we right now honey alcohol

269
00:17:55,740 --> 00:18:02,260
it would have been great for me to do a

270
00:17:58,750 --> 00:18:07,510
live demo well that's a bit dangerous I

271
00:18:02,260 --> 00:18:10,629
wish surely we burned my fingers so now

272
00:18:07,510 --> 00:18:12,700
we can see well on the other side we'll

273
00:18:10,630 --> 00:18:16,690
have the micro controller with the

274
00:18:12,700 --> 00:18:23,860
serial ports and we get the same thing

275
00:18:16,690 --> 00:18:26,200
on the other corner okay clear now so we

276
00:18:23,860 --> 00:18:29,080
have scratched some of the points that

277
00:18:26,200 --> 00:18:34,390
we wanted to intercept but for many of

278
00:18:29,080 --> 00:18:40,139
you this is a big surprise so you can

279
00:18:34,390 --> 00:18:42,700
really scratch the board and then to

280
00:18:40,140 --> 00:18:45,550
connect okay and some of the factors

281
00:18:42,700 --> 00:18:47,650
feel that if they put a plastic film on

282
00:18:45,550 --> 00:18:49,659
top that would not be possible but they

283
00:18:47,650 --> 00:18:53,530
are wrong and then what did we do we

284
00:18:49,660 --> 00:18:56,440
just cut the track so if you want to do

285
00:18:53,530 --> 00:18:59,020
that you just cut it then you break the

286
00:18:56,440 --> 00:19:00,670
connection that if you really want these

287
00:18:59,020 --> 00:19:02,800
two micro controllers to connect with

288
00:19:00,670 --> 00:19:06,630
each other they should connect with each

289
00:19:02,800 --> 00:19:08,770
other from the outside through the

290
00:19:06,630 --> 00:19:12,010
connecting points that we have created

291
00:19:08,770 --> 00:19:14,830
so this is the car truck and then we

292
00:19:12,010 --> 00:19:17,140
added these connectors do you want them

293
00:19:14,830 --> 00:19:19,990
to talk to each other okay we are two

294
00:19:17,140 --> 00:19:22,210
jumpers so if you just want that we just

295
00:19:19,990 --> 00:19:26,710
remove the adapters we connected to

296
00:19:22,210 --> 00:19:29,980
serial ports and then we do what it is

297
00:19:26,710 --> 00:19:32,260
known as mung in the bus so when you are

298
00:19:29,980 --> 00:19:35,400
looking bang in the bus on the internet

299
00:19:32,260 --> 00:19:35,400
this is what you get

300
00:19:38,059 --> 00:19:45,809
so this is the new man in the bus attack

301
00:19:42,320 --> 00:19:47,309
well in theory we were ready to sniffle

302
00:19:45,809 --> 00:19:51,149
the traffic in between the two

303
00:19:47,309 --> 00:19:53,940
controllers but the initial preventive

304
00:19:51,150 --> 00:19:56,850
we found is that we needed to be aware

305
00:19:53,940 --> 00:19:58,919
of the connection parameters that is to

306
00:19:56,850 --> 00:20:03,030
say about speed they are communicating

307
00:19:58,919 --> 00:20:05,280
with each other well all the parts of

308
00:20:03,030 --> 00:20:08,399
the beams are doing everything and what

309
00:20:05,280 --> 00:20:10,049
do they happen Hawking manual says well

310
00:20:08,400 --> 00:20:14,130
that there are some devices such as

311
00:20:10,049 --> 00:20:16,500
there on the screen attacked II later

312
00:20:14,130 --> 00:20:20,730
you connect all that and at the end of

313
00:20:16,500 --> 00:20:22,679
the day well they tell you all that I do

314
00:20:20,730 --> 00:20:25,740
want to know but at the end that didn't

315
00:20:22,679 --> 00:20:27,900
work because these microcontrollers do

316
00:20:25,740 --> 00:20:33,470
not communicate with each other at a

317
00:20:27,900 --> 00:20:37,049
standard speed actually happens in

318
00:20:33,470 --> 00:20:44,580
115200 but this time it was 10 times

319
00:20:37,049 --> 00:20:47,039
bigger like nearly over 900,000 bps how

320
00:20:44,580 --> 00:20:50,580
do we know that well but we just

321
00:20:47,039 --> 00:20:55,710
connected and logic is nifa and then it

322
00:20:50,580 --> 00:20:58,049
was like oscilloscope and you could see

323
00:20:55,710 --> 00:21:02,100
all the traffic going through it the

324
00:20:58,049 --> 00:21:05,000
speed of that traffic and then at the

325
00:21:02,100 --> 00:21:08,820
end we ended up with something like this

326
00:21:05,000 --> 00:21:11,070
here we were right in the middle and

327
00:21:08,820 --> 00:21:16,070
then we made other traffic to go through

328
00:21:11,070 --> 00:21:18,000
our device and then just to see all the

329
00:21:16,070 --> 00:21:21,090
communication between the two

330
00:21:18,000 --> 00:21:25,049
controllers this is known as the Sidra

331
00:21:21,090 --> 00:21:28,389
which is just a converter of USB to one

332
00:21:25,049 --> 00:21:32,990
of these serial ports

333
00:21:28,390 --> 00:21:37,970
and they that gave us the speed that we

334
00:21:32,990 --> 00:21:40,970
needed so once we found out about all

335
00:21:37,970 --> 00:21:44,090
the traffic then the study started to

336
00:21:40,970 --> 00:21:47,150
see what they eat but what they were

337
00:21:44,090 --> 00:21:50,510
saying to each other so here we have two

338
00:21:47,150 --> 00:21:55,430
colors Gino and green so packages they

339
00:21:50,510 --> 00:21:59,420
all start by 0-2 they finish in finished

340
00:21:55,430 --> 00:22:01,910
by 0-3 CRC the summation of all the

341
00:21:59,420 --> 00:22:04,760
previous bytes little by little and

342
00:22:01,910 --> 00:22:08,090
processes creative and process now help

343
00:22:04,760 --> 00:22:10,820
us understand or get to know which is

344
00:22:08,090 --> 00:22:13,879
the communication protocol used by these

345
00:22:10,820 --> 00:22:18,169
two microcontrollers and obviously as

346
00:22:13,880 --> 00:22:21,170
you can guess they were not encrypted at

347
00:22:18,170 --> 00:22:26,780
all because they had the were protected

348
00:22:21,170 --> 00:22:28,960
by these plastic film but we should not

349
00:22:26,780 --> 00:22:28,960
forget

350
00:22:29,060 --> 00:22:33,889
our intention was no other but to gain

351
00:22:31,880 --> 00:22:35,920
access to the code that is to say to

352
00:22:33,890 --> 00:22:39,980
then load the code of each of the

353
00:22:35,920 --> 00:22:43,520
microcontrollers analyze it and see what

354
00:22:39,980 --> 00:22:46,910
they were doing after taking a look at

355
00:22:43,520 --> 00:22:49,070
the data sheet we found three different

356
00:22:46,910 --> 00:22:54,380
ways to access the code the first one

357
00:22:49,070 --> 00:22:55,629
JTAC who is aware of JTAG well okay I'll

358
00:22:54,380 --> 00:22:59,930
tell you a bit about it

359
00:22:55,630 --> 00:23:02,420
jtech is just a protocol that

360
00:22:59,930 --> 00:23:04,720
manufacturers use to check that

361
00:23:02,420 --> 00:23:06,830
everything is well connected

362
00:23:04,720 --> 00:23:09,980
manufacturers connect to the chip they

363
00:23:06,830 --> 00:23:11,540
have some kind of like tables they just

364
00:23:09,980 --> 00:23:13,910
put something on top of the board with

365
00:23:11,540 --> 00:23:15,740
an interface but everything is connected

366
00:23:13,910 --> 00:23:17,630
perfectly or right with each other they

367
00:23:15,740 --> 00:23:19,700
take the interface to the computer and

368
00:23:17,630 --> 00:23:21,770
the computer runs a number of tests

369
00:23:19,700 --> 00:23:25,180
saying that everything is properly

370
00:23:21,770 --> 00:23:28,940
assembled and the device is ready to be

371
00:23:25,180 --> 00:23:32,800
put into the market well the JTAG it

372
00:23:28,940 --> 00:23:32,800
also allows you to do many other things

373
00:23:33,220 --> 00:23:38,750
such as reading the memory of reading

374
00:23:36,560 --> 00:23:42,379
the contact of the flash type the

375
00:23:38,750 --> 00:23:46,520
microcontroller has inside another way

376
00:23:42,380 --> 00:23:50,890
to access the code is through swd which

377
00:23:46,520 --> 00:23:53,780
is exactly the same as je tag but in

378
00:23:50,890 --> 00:23:59,720
serial manner so it means that if the

379
00:23:53,780 --> 00:24:03,889
attack has t di t do TMS take a ck t rst

380
00:23:59,720 --> 00:24:05,690
v threats as W do has only two therefore

381
00:24:03,890 --> 00:24:08,030
much easier to use because you have to

382
00:24:05,690 --> 00:24:10,430
connect the best number of devices and

383
00:24:08,030 --> 00:24:12,649
according to the datasheet third way to

384
00:24:10,430 --> 00:24:16,190
access the code through a good log

385
00:24:12,650 --> 00:24:18,650
loader which is something that was done

386
00:24:16,190 --> 00:24:19,970
before the code and it was inserted

387
00:24:18,650 --> 00:24:24,410
there by the manufacturer that would

388
00:24:19,970 --> 00:24:26,120
allows you to to load the code so J

389
00:24:24,410 --> 00:24:29,500
attack is not under standard but I

390
00:24:26,120 --> 00:24:32,870
didn't say it but I'm saying that now

391
00:24:29,500 --> 00:24:34,010
through jtech you can take a look at the

392
00:24:32,870 --> 00:24:38,000
chips

393
00:24:34,010 --> 00:24:39,740
access the drum at CPU locks and also

394
00:24:38,000 --> 00:24:42,140
accessing the flash I'm saying that it

395
00:24:39,740 --> 00:24:46,010
is not a standard even though there is a

396
00:24:42,140 --> 00:24:48,110
J taça standard each manufacturer 20

397
00:24:46,010 --> 00:24:52,040
said so therefore is you're going to do

398
00:24:48,110 --> 00:24:57,310
something that you buy the device of the

399
00:24:52,040 --> 00:24:57,310
manufacturer just to attack his product

400
00:25:01,900 --> 00:25:05,540
so easiest way to do it through the

401
00:25:04,610 --> 00:25:07,490
serial port

402
00:25:05,540 --> 00:25:09,290
we had the connection between the two we

403
00:25:07,490 --> 00:25:15,710
just carried we conducted ourselves to

404
00:25:09,290 --> 00:25:17,990
only one in this case in stm32f4 r86

405
00:25:15,710 --> 00:25:20,300
which was the bigger one and the

406
00:25:17,990 --> 00:25:22,280
certification the datasheet tells you

407
00:25:20,300 --> 00:25:24,440
that you have to give some electric

408
00:25:22,280 --> 00:25:26,720
charge to one of the pins known as boot

409
00:25:24,440 --> 00:25:30,260
zero and then connect yourself to the

410
00:25:26,720 --> 00:25:33,710
serial port you force a reset and then

411
00:25:30,260 --> 00:25:37,040
when it restarts you already have it

412
00:25:33,710 --> 00:25:38,420
connected to your PC and then this is

413
00:25:37,040 --> 00:25:41,720
what you get you get a beautiful

414
00:25:38,420 --> 00:25:43,640
interface where the cells you

415
00:25:41,720 --> 00:25:48,530
information about the memory and that

416
00:25:43,640 --> 00:25:52,649
the content node this way if we download

417
00:25:48,530 --> 00:25:58,240
the content with micro micro controller

418
00:25:52,649 --> 00:26:03,850
and just little detail this is smaller

419
00:25:58,240 --> 00:26:06,010
than a 50 cent coin so these pins are

420
00:26:03,850 --> 00:26:07,719
very close together connected this fool

421
00:26:06,010 --> 00:26:11,019
pins there's way it's not simple as you

422
00:26:07,720 --> 00:26:13,240
can imagine you have to be very patient

423
00:26:11,019 --> 00:26:18,070
there's nothing for a demo but it can be

424
00:26:13,240 --> 00:26:20,169
done perfect we try to do the same thing

425
00:26:18,070 --> 00:26:23,519
with the other microcontroller and it

426
00:26:20,169 --> 00:26:27,309
said access denied what happened

427
00:26:23,519 --> 00:26:29,919
well apparently manufacturers do not

428
00:26:27,309 --> 00:26:32,379
want you to download their code in the

429
00:26:29,919 --> 00:26:36,370
case of the other microprocessor it

430
00:26:32,380 --> 00:26:38,200
didn't had didn't have protection in

431
00:26:36,370 --> 00:26:40,449
place against reading but it was more

432
00:26:38,200 --> 00:26:43,690
sensitive and the manufacturer had

433
00:26:40,450 --> 00:26:49,570
implemented implemented read reading

434
00:26:43,690 --> 00:26:52,080
protections why because apparently you

435
00:26:49,570 --> 00:26:55,240
can have secrets in your microcontroller

436
00:26:52,080 --> 00:26:59,830
intellectual property people should not

437
00:26:55,240 --> 00:27:06,700
be able to easily download your code so

438
00:26:59,830 --> 00:27:10,689
explain how reading protection works the

439
00:27:06,700 --> 00:27:12,760
two bytes one is a complementary of the

440
00:27:10,690 --> 00:27:16,299
other one the three security levels

441
00:27:12,760 --> 00:27:19,059
level zero no protection anyone can

442
00:27:16,299 --> 00:27:23,080
access flash downloaded app load again

443
00:27:19,059 --> 00:27:25,989
level one which is read protection

444
00:27:23,080 --> 00:27:28,658
it's as no access to flash memory cannot

445
00:27:25,989 --> 00:27:31,090
download the code but we you can access

446
00:27:28,659 --> 00:27:34,619
the rum and you can access their

447
00:27:31,090 --> 00:27:39,459
peripherals and then then this level to

448
00:27:34,619 --> 00:27:43,119
which is you can do nothing no debug and

449
00:27:39,460 --> 00:27:46,840
it's enabled it's to say what forever

450
00:27:43,119 --> 00:27:50,158
once it's level to there's no legitimate

451
00:27:46,840 --> 00:27:54,189
way to exit level to that's something

452
00:27:50,159 --> 00:27:57,840
manufacturers don't like because they

453
00:27:54,190 --> 00:28:00,940
cannot use the pins to check that

454
00:27:57,840 --> 00:28:06,189
everything is ok so apparently they

455
00:28:00,940 --> 00:28:09,999
don't like this these two bytes which

456
00:28:06,190 --> 00:28:12,309
are complimentary and it's like this

457
00:28:09,999 --> 00:28:16,090
teacher redundancy to have a safer

458
00:28:12,309 --> 00:28:19,359
design instead of keeping it in one bite

459
00:28:16,090 --> 00:28:21,519
I give it in - this is kept in

460
00:28:19,359 --> 00:28:24,460
non-volatile memory which is a part of a

461
00:28:21,519 --> 00:28:31,149
flash memory which in turn is part of

462
00:28:24,460 --> 00:28:34,539
the memory market system if one byte is

463
00:28:31,149 --> 00:28:38,498
55 and the other one is a a that's level

464
00:28:34,539 --> 00:28:43,889
zero if it's 33 and CC that's level two

465
00:28:38,499 --> 00:28:43,889
and any other combination it's level one

466
00:28:46,750 --> 00:28:52,929
when we reach the point at which was

467
00:28:49,659 --> 00:28:55,919
said we cannot download this control is

468
00:28:52,929 --> 00:29:00,159
firmware what do we do

469
00:28:55,919 --> 00:29:02,500
there's a website called Russian Surrey

470
00:29:00,159 --> 00:29:07,270
search and some very nice people from

471
00:29:02,500 --> 00:29:10,750
Russia offer that you send them your

472
00:29:07,270 --> 00:29:16,600
microcontroller and for a price they

473
00:29:10,750 --> 00:29:20,799
return the code T and that's it about

474
00:29:16,600 --> 00:29:23,559
2000 Europe so we looked for our

475
00:29:20,799 --> 00:29:25,780
specific microprocessor and it was on

476
00:29:23,559 --> 00:29:34,539
their website and we said ok if they can

477
00:29:25,780 --> 00:29:41,559
why can't we just be told we are very

478
00:29:34,539 --> 00:29:43,629
lucky because a month before doing this

479
00:29:41,559 --> 00:29:47,500
work

480
00:29:43,630 --> 00:29:50,100
some researchers in cybersecurity from

481
00:29:47,500 --> 00:29:52,450
Hoover Institute published a paper in

482
00:29:50,100 --> 00:29:54,780
which they were attacking the same

483
00:29:52,450 --> 00:29:59,890
family of products we were working with

484
00:29:54,780 --> 00:30:02,020
so we we were lucky they described three

485
00:29:59,890 --> 00:30:04,740
attacks to this microcontroller family

486
00:30:02,020 --> 00:30:08,918
one the first one the simplest one which

487
00:30:04,740 --> 00:30:11,559
is cold boot stepping it's used to

488
00:30:08,919 --> 00:30:12,370
bypass rate protections in this type of

489
00:30:11,559 --> 00:30:17,830
environment

490
00:30:12,370 --> 00:30:24,479
it says if in your security level you

491
00:30:17,830 --> 00:30:27,879
can read ram and when you start up your

492
00:30:24,480 --> 00:30:31,240
code is going to carry out the CRC if

493
00:30:27,880 --> 00:30:33,190
everything to verify the integrity that

494
00:30:31,240 --> 00:30:35,140
means all the bytes are going to go

495
00:30:33,190 --> 00:30:36,580
through your RAM so if they're going to

496
00:30:35,140 --> 00:30:39,159
go through your room you can written

497
00:30:36,580 --> 00:30:44,049
little by little in our case we didn't

498
00:30:39,159 --> 00:30:46,090
have this CRC so we had to use one of

499
00:30:44,049 --> 00:30:50,200
the other to exploit described in this

500
00:30:46,090 --> 00:30:54,100
paper first one security downgrade those

501
00:30:50,200 --> 00:30:56,080
of you who are older like myself

502
00:30:54,100 --> 00:31:00,040
you'll remember this type of

503
00:30:56,080 --> 00:31:00,040
microcontroller that's an EEPROM

504
00:31:01,890 --> 00:31:07,010
now we usually have a EEPROM

505
00:31:07,330 --> 00:31:12,929
[Music]

506
00:31:10,410 --> 00:31:17,160
this is a program memory that can be

507
00:31:12,930 --> 00:31:19,650
erased there was and to window it was

508
00:31:17,160 --> 00:31:22,800
exposed to UV light and the content was

509
00:31:19,650 --> 00:31:25,800
erased they got it a flash memory now we

510
00:31:22,800 --> 00:31:28,560
have et prom which is the same thing but

511
00:31:25,800 --> 00:31:30,690
besides it can be raised electrically

512
00:31:28,560 --> 00:31:33,169
you connect it to your PC and you say

513
00:31:30,690 --> 00:31:37,290
please erase yourself and it's erased

514
00:31:33,170 --> 00:31:40,690
and if we'll remember the two by its

515
00:31:37,290 --> 00:31:42,350
design with the three values of security

516
00:31:40,690 --> 00:31:48,980
[Music]

517
00:31:42,350 --> 00:31:52,590
what did people do one your level one

518
00:31:48,980 --> 00:31:55,050
sorry when you're 11 2 or 0 you just

519
00:31:52,590 --> 00:31:57,990
need to change one byte to go back to

520
00:31:55,050 --> 00:32:02,760
level one level one well you can do more

521
00:31:57,990 --> 00:32:07,670
things how can we exit level two we need

522
00:32:02,760 --> 00:32:07,670
to find a way to alter one byte

523
00:32:07,880 --> 00:32:19,000
something in these two bytes and as I

524
00:32:12,420 --> 00:32:23,549
said this is erased when

525
00:32:19,000 --> 00:32:26,380
we apply UV light these researchers

526
00:32:23,549 --> 00:32:30,429
clean the upper part of the ship until

527
00:32:26,380 --> 00:32:35,919
they completely expose it there's a

528
00:32:30,429 --> 00:32:41,230
little thing you see here it's a picture

529
00:32:35,919 --> 00:32:47,620
with x-ray and what they do they've put

530
00:32:41,230 --> 00:32:54,520
it into this type of device it's UV

531
00:32:47,620 --> 00:32:57,820
light for nail nail paint and what they

532
00:32:54,520 --> 00:33:01,210
do they cut little layers until they

533
00:32:57,820 --> 00:33:05,350
kind I select the bites where the rib

534
00:33:01,210 --> 00:33:09,789
protection was impressive thank God we

535
00:33:05,350 --> 00:33:11,918
didn't have to do this this was a

536
00:33:09,789 --> 00:33:14,980
different security level but we wanted

537
00:33:11,919 --> 00:33:18,669
to extract the code we needed to find a

538
00:33:14,980 --> 00:33:25,690
way to extract it what did this people

539
00:33:18,669 --> 00:33:27,880
realize when using je tag protocol no

540
00:33:25,690 --> 00:33:30,520
till know the code there was some sort

541
00:33:27,880 --> 00:33:32,710
of competition at the one hand it was

542
00:33:30,520 --> 00:33:34,059
the process that denied access and in

543
00:33:32,710 --> 00:33:37,110
the other hand it was the process that

544
00:33:34,059 --> 00:33:41,860
allowed you to download the code they

545
00:33:37,110 --> 00:33:46,149
reduced JT JTAG protocol in this case s

546
00:33:41,860 --> 00:33:48,070
WD to the minimum to try to bypass this

547
00:33:46,150 --> 00:33:51,510
condition and they can read before

548
00:33:48,070 --> 00:33:51,510
access was denied

549
00:33:51,760 --> 00:33:56,620
of course they had to implement this in

550
00:33:54,550 --> 00:33:58,800
a different microcontroller that it was

551
00:33:56,620 --> 00:34:02,169
possible because this is real-time

552
00:33:58,800 --> 00:34:05,620
conditions the time window is very

553
00:34:02,170 --> 00:34:10,570
little we have to be very fast so the

554
00:34:05,620 --> 00:34:14,859
programming development board stm32

555
00:34:10,570 --> 00:34:17,380
attacks another smtm 32 they reset the

556
00:34:14,860 --> 00:34:22,240
systems they initialize the debug

557
00:34:17,380 --> 00:34:27,399
interface they try to read if it does ok

558
00:34:22,239 --> 00:34:30,908
if I can't I try it again and this way

559
00:34:27,399 --> 00:34:33,219
we try to replicate the attack we

560
00:34:30,909 --> 00:34:36,270
couldn't do it directly in the board but

561
00:34:33,219 --> 00:34:44,230
we did chip off we built an application

562
00:34:36,270 --> 00:34:47,770
so good - which is really clumsy you see

563
00:34:44,230 --> 00:34:51,460
all the cables here connected and we

564
00:34:47,770 --> 00:34:53,320
managed to track extraña - binary or

565
00:34:51,460 --> 00:34:57,780
play the exploit and we downloaded the

566
00:34:53,320 --> 00:34:57,780
binary and we could analyze it great

567
00:34:58,250 --> 00:35:07,000
we found there were two AR M binaries

568
00:35:02,300 --> 00:35:12,050
that we had to analyze usually with a

569
00:35:07,000 --> 00:35:14,750
I'm not going to get into detail but

570
00:35:12,050 --> 00:35:19,910
when it's different architecture you

571
00:35:14,750 --> 00:35:22,420
shouldn't be afraid of it I would say

572
00:35:19,910 --> 00:35:22,420
it's simpler

573
00:35:23,710 --> 00:35:28,349
their record

574
00:35:32,530 --> 00:35:39,370
their instructions for different actions

575
00:35:35,290 --> 00:35:44,800
to access memory and that said I'm not

576
00:35:39,370 --> 00:35:48,549
going today get into detail but usually

577
00:35:44,800 --> 00:35:52,960
when you apply reverse engineering is

578
00:35:48,550 --> 00:35:56,200
using this program it's going to paint

579
00:35:52,960 --> 00:36:00,010
this binary code in assembler in this

580
00:35:56,200 --> 00:36:03,000
cases AR m so you can study it and see

581
00:36:00,010 --> 00:36:03,000
what the problem does

582
00:36:03,670 --> 00:36:13,330
in Ida Pro you upload and dot excel file

583
00:36:09,160 --> 00:36:16,299
as lionesses something which is in an

584
00:36:13,330 --> 00:36:19,270
own format and IRA knows how to

585
00:36:16,300 --> 00:36:21,490
interpret it the only thing we had was a

586
00:36:19,270 --> 00:36:24,820
giant binary and we had to give it to

587
00:36:21,490 --> 00:36:26,890
either when iris aw this she cried

588
00:36:24,820 --> 00:36:29,440
because she doesn't know what to do with

589
00:36:26,890 --> 00:36:32,680
it this is a binary file what do I do

590
00:36:29,440 --> 00:36:38,710
with this what could we tell her we knew

591
00:36:32,680 --> 00:36:40,899
it was a binary file AR m and what else

592
00:36:38,710 --> 00:36:46,450
well everything that's included in

593
00:36:40,900 --> 00:36:49,510
datasheet what does it say when binary

594
00:36:46,450 --> 00:36:54,069
is launched the code is loaded in this

595
00:36:49,510 --> 00:36:56,250
direction well you have to tell I did

596
00:36:54,070 --> 00:36:56,250
this

597
00:36:56,610 --> 00:37:05,020
what is the read only memory where's the

598
00:36:59,230 --> 00:37:07,660
code in this address what's its size the

599
00:37:05,020 --> 00:37:13,360
whole size of it where is the ramp with

600
00:37:07,660 --> 00:37:17,200
already seen it in the datasheet it 0 0

601
00:37:13,360 --> 00:37:19,840
mm whatever what sighs what stated in

602
00:37:17,200 --> 00:37:22,270
the datasheet once you include this

603
00:37:19,840 --> 00:37:24,340
information it doesn't look it either

604
00:37:22,270 --> 00:37:27,690
because she doesn't know where is the

605
00:37:24,340 --> 00:37:33,359
entry point where the code start

606
00:37:27,690 --> 00:37:36,510
how do we know where the CODIS started -

607
00:37:33,359 --> 00:37:40,890
it's what you start to execute the code

608
00:37:36,510 --> 00:37:44,520
we'd go back to the datasheet and

609
00:37:40,890 --> 00:37:47,549
receive the interruption vector table

610
00:37:44,520 --> 00:37:51,950
it explains what's going to happen when

611
00:37:47,549 --> 00:37:54,089
a series of interruptions take place and

612
00:37:51,950 --> 00:37:57,118
well particularly this reset

613
00:37:54,089 --> 00:37:58,799
interruption which says when the code is

614
00:37:57,119 --> 00:38:01,369
going to be launched when there's a

615
00:37:58,799 --> 00:38:01,369
reset

616
00:38:03,080 --> 00:38:15,750
so by working we see that the second

617
00:38:10,680 --> 00:38:18,750
full bite group is the entry point we

618
00:38:15,750 --> 00:38:21,500
tell this to either and she starts doing

619
00:38:18,750 --> 00:38:21,500
a work

620
00:38:25,140 --> 00:38:30,690
another trick we look for memory

621
00:38:28,050 --> 00:38:33,330
addresses at point that area and we have

622
00:38:30,690 --> 00:38:37,020
more sites where theoretically there's

623
00:38:33,330 --> 00:38:42,509
code and this way you can find more and

624
00:38:37,020 --> 00:38:44,340
more code another big problem we face in

625
00:38:42,510 --> 00:38:49,050
this type of scenarios that we cannot

626
00:38:44,340 --> 00:38:50,790
establish a difference between live

627
00:38:49,050 --> 00:38:53,250
something that depends on the library a

628
00:38:50,790 --> 00:38:55,110
third party what the programmer himself

629
00:38:53,250 --> 00:38:57,030
has written we don't want to waste our

630
00:38:55,110 --> 00:39:04,590
time by studying third party libraries

631
00:38:57,030 --> 00:39:07,740
and we used bendeth it's a tool and I

632
00:39:04,590 --> 00:39:09,750
had a probe supplement or complement

633
00:39:07,740 --> 00:39:14,850
that looks for a difference between T

634
00:39:09,750 --> 00:39:17,460
binary assemblers this used by people

635
00:39:14,850 --> 00:39:22,529
writing exploits when there's a window

636
00:39:17,460 --> 00:39:26,280
patch they compare the new one and the

637
00:39:22,530 --> 00:39:29,880
old one the old Dylan and new one and

638
00:39:26,280 --> 00:39:33,840
you can see where Microsoft has patched

639
00:39:29,880 --> 00:39:36,110
you see where the bug was how do we use

640
00:39:33,840 --> 00:39:36,110
this

641
00:39:36,670 --> 00:39:42,880
we use these for two things first afford

642
00:39:40,180 --> 00:39:45,490
the world to microcontrollers I'm

643
00:39:42,880 --> 00:39:48,670
speaking very fast because I'm running

644
00:39:45,490 --> 00:39:50,709
out of time we had two microcontrollers

645
00:39:48,670 --> 00:39:56,440
so it was interesting to use that work

646
00:39:50,710 --> 00:39:57,970
in minority two hours and second we

647
00:39:56,440 --> 00:39:59,740
wanted to know what compiler the

648
00:39:57,970 --> 00:40:03,189
manufacturer had used to develop the

649
00:39:59,740 --> 00:40:06,098
product and which were the functions in

650
00:40:03,190 --> 00:40:08,289
the first binary we had in either we

651
00:40:06,099 --> 00:40:15,059
didn't know anything we couldn't find

652
00:40:08,289 --> 00:40:15,059
anything so we checked in the internet

653
00:40:15,480 --> 00:40:24,250
stm32 development environment and we

654
00:40:18,579 --> 00:40:27,849
copied an example project you seem to

655
00:40:24,250 --> 00:40:30,130
chains that were more common but because

656
00:40:27,849 --> 00:40:32,950
we assumed our developers are not going

657
00:40:30,130 --> 00:40:35,019
to use something very extraordinary they

658
00:40:32,950 --> 00:40:36,430
found in a dark place of the internet

659
00:40:35,019 --> 00:40:40,538
they're going to use the same thing

660
00:40:36,430 --> 00:40:43,419
everybody uses and this was the case so

661
00:40:40,539 --> 00:40:46,539
we compiled an example project the most

662
00:40:43,420 --> 00:40:50,410
famous one we run it through this

663
00:40:46,539 --> 00:40:54,400
bending tool and we guessed functions

664
00:40:50,410 --> 00:40:56,230
that we could expect here the most

665
00:40:54,400 --> 00:41:01,240
common functions when programming

666
00:40:56,230 --> 00:41:04,390
little by little we compiled more

667
00:41:01,240 --> 00:41:06,970
complex projects and then we applied the

668
00:41:04,390 --> 00:41:10,210
same process to the Afra which is

669
00:41:06,970 --> 00:41:13,839
another tool like pen tip but it doesn't

670
00:41:10,210 --> 00:41:15,819
work with assembler but with source code

671
00:41:13,839 --> 00:41:17,589
how did we have source code because

672
00:41:15,819 --> 00:41:21,690
neither approach comes with a plug-in

673
00:41:17,589 --> 00:41:24,700
called x-rays that allows you to obtain

674
00:41:21,690 --> 00:41:26,920
the source code and this way you have

675
00:41:24,700 --> 00:41:31,538
different tools so you compare

676
00:41:26,920 --> 00:41:37,230
and this way we'll recovered 70% of the

677
00:41:31,539 --> 00:41:39,640
code and best we need to study a hundred

678
00:41:37,230 --> 00:41:49,269
megabytes of code an hour just 30

679
00:41:39,640 --> 00:41:55,538
megabytes so it's time-saving what else

680
00:41:49,269 --> 00:41:56,680
did we do just tell you this code to see

681
00:41:55,539 --> 00:42:01,900
what they were doing

682
00:41:56,680 --> 00:42:09,399
we used Ida Python is the script

683
00:42:01,900 --> 00:42:11,019
language in - there was something we saw

684
00:42:09,400 --> 00:42:13,599
in the datasheet that his type of

685
00:42:11,019 --> 00:42:15,910
architecture preferences are mapped in

686
00:42:13,599 --> 00:42:17,950
the memory this means that it won't if

687
00:42:15,910 --> 00:42:20,470
you want to write in the serial port the

688
00:42:17,950 --> 00:42:23,169
only thing you need to do is start as an

689
00:42:20,470 --> 00:42:26,019
instruction of loading or recovery to

690
00:42:23,170 --> 00:42:29,470
the address where the serious port is

691
00:42:26,019 --> 00:42:32,140
located he always worked with the memory

692
00:42:29,470 --> 00:42:36,730
so knowing the look that the

693
00:42:32,140 --> 00:42:38,560
disassembled would have we wrote a

694
00:42:36,730 --> 00:42:44,890
script that looked for this type of

695
00:42:38,560 --> 00:42:47,500
patterns if it's was as she or it was

696
00:42:44,890 --> 00:42:49,960
output it was if it was India it was

697
00:42:47,500 --> 00:42:52,690
input and this way we could find at

698
00:42:49,960 --> 00:42:54,369
which section four code what section of

699
00:42:52,690 --> 00:42:57,190
our code was interacting with the serial

700
00:42:54,369 --> 00:43:01,050
port of any other peripherally as you

701
00:42:57,190 --> 00:43:01,050
can imagine this is very very important

702
00:43:02,790 --> 00:43:05,650
if you want to know about the

703
00:43:04,930 --> 00:43:07,450
communication with the other

704
00:43:05,650 --> 00:43:15,310
microcontroller you need to study this

705
00:43:07,450 --> 00:43:19,390
area and this was the static analysis

706
00:43:15,310 --> 00:43:22,078
the next step was dynamic in other words

707
00:43:19,390 --> 00:43:22,078
debugging

708
00:43:22,240 --> 00:43:26,859
the problem is that there were many

709
00:43:24,359 --> 00:43:34,470
processors here connections were

710
00:43:26,859 --> 00:43:40,930
complicated it was complicated

711
00:43:34,470 --> 00:43:44,910
so tricks we used three that I'm going

712
00:43:40,930 --> 00:43:47,740
to explain now they're restrictions

713
00:43:44,910 --> 00:43:49,029
initially you can do input/output

714
00:43:47,740 --> 00:43:52,950
because there are no peripherals you

715
00:43:49,030 --> 00:43:52,950
cannot interact with peripherals

716
00:43:54,500 --> 00:44:03,260
this is useful in order to study

717
00:43:56,660 --> 00:44:05,810
isolated functions and map this is a

718
00:44:03,260 --> 00:44:10,430
function that allows you to map a file

719
00:44:05,810 --> 00:44:12,470
into memory address for some strange

720
00:44:10,430 --> 00:44:14,629
reason it allows me to say where I want

721
00:44:12,470 --> 00:44:19,129
to upload my code but thanks to this we

722
00:44:14,630 --> 00:44:25,970
could map it to the memory address 0 800

723
00:44:19,130 --> 00:44:29,000
whatever the one we saw before we have a

724
00:44:25,970 --> 00:44:30,470
pointer function pointer we call that

725
00:44:29,000 --> 00:44:35,290
function with the parameters that

726
00:44:30,470 --> 00:44:35,290
interested that we wanted

727
00:44:37,869 --> 00:44:44,759
source code copy if we have the source

728
00:44:41,529 --> 00:44:47,710
code of a function we copy it

729
00:44:44,759 --> 00:44:54,130
we compile it and we see what it does

730
00:44:47,710 --> 00:45:00,219
simple how can we compile this of course

731
00:44:54,130 --> 00:45:08,829
we need crossing compiling we need to

732
00:45:00,219 --> 00:45:12,400
compile this to a RM q emo it can

733
00:45:08,829 --> 00:45:16,900
emulate a R M so we compiled for a RM in

734
00:45:12,400 --> 00:45:22,299
our own PC we debug with gdb and that

735
00:45:16,900 --> 00:45:25,890
was it something else we could emulate

736
00:45:22,299 --> 00:45:29,529
not just a function but the whole

737
00:45:25,890 --> 00:45:32,950
microcontroller and for that there's a

738
00:45:29,529 --> 00:45:35,440
development environment called GNU MCU

739
00:45:32,950 --> 00:45:39,968
eclipse which has a plugin that allows

740
00:45:35,440 --> 00:45:43,660
you to do that you can emulate a whole

741
00:45:39,969 --> 00:45:47,589
firmware it supports many development

742
00:45:43,660 --> 00:45:49,720
boards you can define the connections in

743
00:45:47,589 --> 00:45:51,799
your board

744
00:45:49,720 --> 00:45:56,029
[Music]

745
00:45:51,800 --> 00:45:58,160
they've already been defined we're not

746
00:45:56,030 --> 00:46:00,200
going to define ours because we lack

747
00:45:58,160 --> 00:46:05,690
then as I knowledge in order to do that

748
00:46:00,200 --> 00:46:10,279
so we decided to execute qmo that

749
00:46:05,690 --> 00:46:13,280
emanated whole firm law and we used gdb

750
00:46:10,280 --> 00:46:16,130
in order to connect and monitor it if

751
00:46:13,280 --> 00:46:18,500
you see here at DDB the point at which

752
00:46:16,130 --> 00:46:20,870
it stops when you started is the

753
00:46:18,500 --> 00:46:27,020
interruption factor with mentioned

754
00:46:20,870 --> 00:46:31,359
before it does allow us to monitor

755
00:46:27,020 --> 00:46:31,360
serial ports which is a very good thing

756
00:46:33,070 --> 00:46:47,900
so we had access to as wdj tag we near

757
00:46:41,330 --> 00:46:52,279
but go through reversing static dynamic

758
00:46:47,900 --> 00:46:58,910
offline dynamic and I was time to find

759
00:46:52,280 --> 00:47:04,390
bugs so we did some fuzzing and dynamic

760
00:46:58,910 --> 00:47:04,390
debugging for that we had RJ tag

761
00:47:04,800 --> 00:47:16,320
we had a tool called open LCD and on the

762
00:47:14,040 --> 00:47:22,650
other hand we did fussing in the

763
00:47:16,320 --> 00:47:26,730
interfaces we had which meant that we

764
00:47:22,650 --> 00:47:29,190
need to buy this device we programmed it

765
00:47:26,730 --> 00:47:31,380
so that it worked with packages and at

766
00:47:29,190 --> 00:47:35,510
the same time we monitored it to see

767
00:47:31,380 --> 00:47:35,510
whether it was focusing around target

768
00:47:35,540 --> 00:47:40,820
this what all the connections are cables

769
00:47:38,610 --> 00:47:43,830
who had to use the length of the cable

770
00:47:40,820 --> 00:47:46,770
matters because they offer resistance to

771
00:47:43,830 --> 00:47:49,279
it's a sensitive environment but we can

772
00:47:46,770 --> 00:47:49,280
do things

773
00:47:51,140 --> 00:47:59,009
what about exploiting this is everything

774
00:47:56,100 --> 00:48:00,960
you already know it's even simpler this

775
00:47:59,010 --> 00:48:03,260
is there's no operation system there are

776
00:48:00,960 --> 00:48:03,260
no protections

777
00:48:03,720 --> 00:48:09,730
technique such as AAS are which make it

778
00:48:07,180 --> 00:48:12,100
more difficult are not applicable here

779
00:48:09,730 --> 00:48:17,920
and that's an interesting difference

780
00:48:12,100 --> 00:48:20,440
which is since there's no memory

781
00:48:17,920 --> 00:48:23,890
management unit when you read zero

782
00:48:20,440 --> 00:48:26,440
address in Windows it crashes if you're

783
00:48:23,890 --> 00:48:29,799
reading Linus it crushes and here it

784
00:48:26,440 --> 00:48:34,150
depends in our case is there's no

785
00:48:29,800 --> 00:48:36,760
usually there's no MMU the data sheet

786
00:48:34,150 --> 00:48:38,650
with so that's in zero address this set

787
00:48:36,760 --> 00:48:41,350
copy the firm will save you really it

788
00:48:38,650 --> 00:48:44,680
doesn't crash it returns your firmware

789
00:48:41,350 --> 00:48:50,440
which is great there was something

790
00:48:44,680 --> 00:48:53,049
similar with iphone 3gs i think is for

791
00:48:50,440 --> 00:48:55,680
was one of the exploits I had for

792
00:48:53,050 --> 00:48:55,680
jailbreak

793
00:48:57,339 --> 00:49:01,599
Georgina's infirmary we wanted to

794
00:48:59,410 --> 00:49:05,308
maintain access it's quite simple nick

795
00:49:01,599 --> 00:49:05,309
is a flush we had to

796
00:49:15,430 --> 00:49:22,430
concatenate the code but you need access

797
00:49:19,640 --> 00:49:25,160
for your space for your variables huh

798
00:49:22,430 --> 00:49:29,180
what can we store our variables we need

799
00:49:25,160 --> 00:49:31,670
to design the SRAM with value we already

800
00:49:29,180 --> 00:49:44,029
know then we executed we interacted we

801
00:49:31,670 --> 00:49:46,310
move it and we download run again the

802
00:49:44,030 --> 00:49:48,830
sections that contained our original

803
00:49:46,310 --> 00:49:51,710
value hadn't been used so we can use it

804
00:49:48,830 --> 00:49:55,970
to store your valuables conclusions the

805
00:49:51,710 --> 00:49:59,470
data sheet there very there's a lot of

806
00:49:55,970 --> 00:50:01,480
interesting information there in st

807
00:49:59,470 --> 00:50:04,779
microelectronic says that our

808
00:50:01,480 --> 00:50:08,770
microcontrollers have the strongest

809
00:50:04,780 --> 00:50:11,660
protection in the market however we

810
00:50:08,770 --> 00:50:13,970
acknowledged there are dishonest and

811
00:50:11,660 --> 00:50:16,160
possibly illegal ways of bypassing these

812
00:50:13,970 --> 00:50:18,709
protections assume that femoris public

813
00:50:16,160 --> 00:50:23,899
protect buses not just with plastic

814
00:50:18,710 --> 00:50:26,420
always encrypt and physical accesses

815
00:50:23,900 --> 00:50:28,850
game over or not we can discuss this

816
00:50:26,420 --> 00:50:29,990
outside if you want that's so that's the

817
00:50:28,850 --> 00:50:30,390
end of our presentation thank you very

818
00:50:29,990 --> 00:50:35,238
much

819
00:50:30,390 --> 00:50:35,239
[Applause]

820
00:50:36,700 --> 00:50:38,759
you

