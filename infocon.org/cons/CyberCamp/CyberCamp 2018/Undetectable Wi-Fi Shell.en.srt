1
00:00:02,009 --> 00:00:08,330
[Music]

2
00:00:09,610 --> 00:00:16,279
okay that way when I start a vase hello

3
00:00:12,950 --> 00:00:19,700
good afternoon rather eaten into all of

4
00:00:16,279 --> 00:00:21,710
years in this room the ones following us

5
00:00:19,700 --> 00:00:25,400
an instrument this is a very last

6
00:00:21,710 --> 00:00:28,430
workshop for the second Midna session in

7
00:00:25,400 --> 00:00:32,119
our Cybercom 2018 for those of you join

8
00:00:28,430 --> 00:00:34,250
us now whether in the flesh or fire

9
00:00:32,119 --> 00:00:36,140
streaming let me remind you that you can

10
00:00:34,250 --> 00:00:39,559
go to social media and you're gonna go

11
00:00:36,140 --> 00:00:43,430
to twitter at in civic at civic um s and

12
00:00:39,559 --> 00:00:46,010
the hashtags i become a team first of

13
00:00:43,430 --> 00:00:49,550
all let me apologize because of the

14
00:00:46,010 --> 00:00:51,649
technical problems with the background

15
00:00:49,550 --> 00:00:54,140
display we have this one as a

16
00:00:51,649 --> 00:00:56,390
replacement a temporary displacement but

17
00:00:54,140 --> 00:00:59,239
with a photographer and a hasn't CEO at

18
00:00:56,390 --> 00:01:01,610
white fence with us and he will be

19
00:00:59,239 --> 00:01:04,459
teaching this technical worship or be

20
00:01:01,610 --> 00:01:07,430
building an undetectable Wi-Fi sha

21
00:01:04,459 --> 00:01:10,250
he's an ethical hotter hacker he is an

22
00:01:07,430 --> 00:01:13,399
expert in network infrastructure of all

23
00:01:10,250 --> 00:01:15,260
sizes and has a long and extended

24
00:01:13,399 --> 00:01:16,350
professional experience and applause for

25
00:01:15,260 --> 00:01:19,780
Yago thank you very much

26
00:01:16,350 --> 00:01:19,780
[Applause]

27
00:01:22,320 --> 00:01:27,279
hello

28
00:01:24,450 --> 00:01:29,710
thank you thank you for being here

29
00:01:27,280 --> 00:01:34,750
attending this seminar I hope I don't

30
00:01:29,710 --> 00:01:38,130
bore you if you look up careful and you

31
00:01:34,750 --> 00:01:41,920
don't get a present from up this guy's

32
00:01:38,130 --> 00:01:47,199
maybe there is a cup in between the

33
00:01:41,920 --> 00:01:49,479
curtains I'll try to conduct this

34
00:01:47,200 --> 00:01:51,820
workshop in them so this would be an

35
00:01:49,479 --> 00:01:53,950
average its level I know there's people

36
00:01:51,820 --> 00:01:56,350
coming from the university people coming

37
00:01:53,950 --> 00:01:58,479
from the university from the high school

38
00:01:56,350 --> 00:02:00,910
from everywhere I'll try to keep an

39
00:01:58,479 --> 00:02:03,850
average or a mid level we'll have time

40
00:02:00,910 --> 00:02:05,020
for us because it's two hours but I'll

41
00:02:03,850 --> 00:02:11,009
try and make sure this is an

42
00:02:05,020 --> 00:02:15,190
introduction to Wi-Fi programming

43
00:02:11,009 --> 00:02:18,220
basically we want to make sure that

44
00:02:15,190 --> 00:02:20,470
people understand that all old tools are

45
00:02:18,220 --> 00:02:22,780
just custom well I just made we can

46
00:02:20,470 --> 00:02:24,370
customize and produce our own tools I've

47
00:02:22,780 --> 00:02:27,700
been working on Wi-Fi for many years now

48
00:02:24,370 --> 00:02:30,130
and relatively just a few years with my

49
00:02:27,700 --> 00:02:33,220
own tools so that's what I want to

50
00:02:30,130 --> 00:02:37,780
convey this option of having our own

51
00:02:33,220 --> 00:02:40,090
tools those of us working with the Wi-Fi

52
00:02:37,780 --> 00:02:42,010
networks at a given time we might know

53
00:02:40,090 --> 00:02:44,560
that we might not have the necessary

54
00:02:42,010 --> 00:02:46,720
tools from whatever the represent we

55
00:02:44,560 --> 00:02:50,590
need to program something faster and

56
00:02:46,720 --> 00:02:54,100
this is our idea maybe then what what

57
00:02:50,590 --> 00:02:57,459
about a shell if maybe ideally should be

58
00:02:54,100 --> 00:02:59,470
hosted on a Wi-Fi or a what five

59
00:02:57,459 --> 00:03:01,570
packages what that's not it

60
00:02:59,470 --> 00:03:05,470
what matters is learning how to do

61
00:03:01,570 --> 00:03:09,790
things that are out of out of the stand

62
00:03:05,470 --> 00:03:12,910
out of the box so to say we have the

63
00:03:09,790 --> 00:03:16,600
logical analytical skills we don't see

64
00:03:12,910 --> 00:03:18,850
things as others do we try to break down

65
00:03:16,600 --> 00:03:22,769
things we try to change them into

66
00:03:18,850 --> 00:03:22,769
fragments in order to understand

67
00:03:23,970 --> 00:03:28,170
and that's idea here with this

68
00:03:26,260 --> 00:03:32,799
conference

69
00:03:28,170 --> 00:03:38,950
then the Condor the code the code you

70
00:03:32,800 --> 00:03:43,660
can find on github so what can we do how

71
00:03:38,950 --> 00:03:46,510
can we program on Wi-Fi packages that's

72
00:03:43,660 --> 00:03:49,540
the point here we see the table of

73
00:03:46,510 --> 00:03:52,720
contents for the presentation - as a

74
00:03:49,540 --> 00:03:56,350
programming language if it's for gamers

75
00:03:52,720 --> 00:03:59,080
or not that kind of controversy or

76
00:03:56,350 --> 00:04:05,140
debate then I will tell you about my

77
00:03:59,080 --> 00:04:10,959
library a copy for patching and that's

78
00:04:05,140 --> 00:04:14,829
not exclusive for this it's for patching

79
00:04:10,959 --> 00:04:22,479
networks in general you can do all sorts

80
00:04:14,830 --> 00:04:26,620
of things on on scaping and then we will

81
00:04:22,479 --> 00:04:30,070
see what we need on pentesting what kind

82
00:04:26,620 --> 00:04:35,350
of two kids we need what tools are best

83
00:04:30,070 --> 00:04:36,180
what kind of cards are available on the

84
00:04:35,350 --> 00:04:41,289
market

85
00:04:36,180 --> 00:04:44,320
we will see some steps for programming I

86
00:04:41,289 --> 00:04:47,440
will explain a little bit about code we

87
00:04:44,320 --> 00:04:49,630
can write and I will simplify matters as

88
00:04:47,440 --> 00:04:55,450
much as possible to make this accessible

89
00:04:49,630 --> 00:05:00,250
as foundations or introduction the

90
00:04:55,450 --> 00:05:02,320
repository on github a well I'm happy to

91
00:05:00,250 --> 00:05:07,919
let you have all of that and then

92
00:05:02,320 --> 00:05:11,740
there's monitor as H which is the way I

93
00:05:07,919 --> 00:05:15,020
initialize a monitoring cards at the

94
00:05:11,740 --> 00:05:18,050
moment this is like a script

95
00:05:15,020 --> 00:05:21,890
I strongly recommend it because any

96
00:05:18,050 --> 00:05:23,480
Wi-Fi card that's connected to a laptop

97
00:05:21,890 --> 00:05:26,000
for instance I'm going to be talking

98
00:05:23,480 --> 00:05:29,060
about Linux by the way if I mentioned

99
00:05:26,000 --> 00:05:32,960
windows rather than Linux it will be to

100
00:05:29,060 --> 00:05:35,240
just get rid of it or destroyers and

101
00:05:32,960 --> 00:05:42,830
then I will tell you a little bit about

102
00:05:35,240 --> 00:05:46,490
one of the programming exercises to run

103
00:05:42,830 --> 00:05:49,849
cards on monitor mode

104
00:05:46,490 --> 00:05:52,640
I will then analyze code I will explain

105
00:05:49,850 --> 00:05:55,550
why I did it that way different pragmas

106
00:05:52,640 --> 00:05:58,729
different functionalities of that code

107
00:05:55,550 --> 00:06:00,980
so you can then read code on Python and

108
00:05:58,730 --> 00:06:05,240
understand what you're reading and then

109
00:06:00,980 --> 00:06:07,940
what I really like I'll be exploring

110
00:06:05,240 --> 00:06:11,810
some concept concepts I didn't bring

111
00:06:07,940 --> 00:06:15,290
videos I like being courageous and I

112
00:06:11,810 --> 00:06:17,510
like risk so sometimes things work out

113
00:06:15,290 --> 00:06:20,110
sometimes they don't so let's keep our

114
00:06:17,510 --> 00:06:21,500
fingers crossed let's hope that it works

115
00:06:20,110 --> 00:06:26,540
today

116
00:06:21,500 --> 00:06:32,150
I've done my best to bring it so that it

117
00:06:26,540 --> 00:06:34,450
will work so there's a lot of

118
00:06:32,150 --> 00:06:39,700
bibliography

119
00:06:34,450 --> 00:06:43,520
my name is Iago Hansen that's my alias

120
00:06:39,700 --> 00:06:46,400
you can find a lot of literature that

121
00:06:43,520 --> 00:06:49,190
will say how I've done as much as I

122
00:06:46,400 --> 00:06:52,849
could to disseminate everything that has

123
00:06:49,190 --> 00:06:55,840
to do with hacking for many years so

124
00:06:52,850 --> 00:07:00,290
let's start then with Python

125
00:06:55,840 --> 00:07:04,489
poor old Python in the world of

126
00:07:00,290 --> 00:07:07,190
programming languages people who program

127
00:07:04,490 --> 00:07:11,660
at a lower level tend to complain and

128
00:07:07,190 --> 00:07:16,310
say python is just a language for lamerz

129
00:07:11,660 --> 00:07:20,030
is useless is too simple well I don't

130
00:07:16,310 --> 00:07:24,130
agree more and more it's becoming the

131
00:07:20,030 --> 00:07:28,190
hacking language for a

132
00:07:24,130 --> 00:07:30,830
concept proofing because we can import

133
00:07:28,190 --> 00:07:33,860
any library from the internet and do

134
00:07:30,830 --> 00:07:37,789
things that you would have taken as ages

135
00:07:33,860 --> 00:07:40,190
to do we don't need to prepare our own

136
00:07:37,790 --> 00:07:43,280
library nothing like that Python

137
00:07:40,190 --> 00:07:46,790
provides us with that and for people who

138
00:07:43,280 --> 00:07:50,809
are bone idle like me it's a great tool

139
00:07:46,790 --> 00:07:53,720
and it's ideal for proof of concept in

140
00:07:50,810 --> 00:07:57,260
ten minutes if you can get Python to

141
00:07:53,720 --> 00:08:02,300
make things work maybe not as well as

142
00:07:57,260 --> 00:08:05,240
you would dream of but it works and we

143
00:08:02,300 --> 00:08:10,760
have libraries on patching of network

144
00:08:05,240 --> 00:08:14,870
likes copy or for scraping of websites

145
00:08:10,760 --> 00:08:19,730
all sorts of libraries is amazing is you

146
00:08:14,870 --> 00:08:24,020
can just install a library and half a

147
00:08:19,730 --> 00:08:26,150
minute later you have your interesting

148
00:08:24,020 --> 00:08:29,030
library to do all sorts of things with

149
00:08:26,150 --> 00:08:32,539
what's the main problem there well that

150
00:08:29,030 --> 00:08:36,319
libraries are not documented enough we

151
00:08:32,539 --> 00:08:39,530
do pip install and who knows if that

152
00:08:36,320 --> 00:08:41,630
library has been constructed properly is

153
00:08:39,530 --> 00:08:47,300
a matter of just testing it and seeing

154
00:08:41,630 --> 00:08:51,260
if it works okay community has done a

155
00:08:47,300 --> 00:08:53,060
lot to make Python better is which

156
00:08:51,260 --> 00:08:56,390
release is better well I'm still on

157
00:08:53,060 --> 00:08:57,530
version number two I'm not doing free

158
00:08:56,390 --> 00:08:59,870
just yet

159
00:08:57,530 --> 00:09:03,430
and again there's so much documentation

160
00:08:59,870 --> 00:09:06,410
on Python literature

161
00:09:03,430 --> 00:09:09,530
tutorials videos all sorts for you to

162
00:09:06,410 --> 00:09:13,730
learn how to use Python what are the

163
00:09:09,530 --> 00:09:16,699
robots that Python is not efficient not

164
00:09:13,730 --> 00:09:19,910
particularly efficient it has been

165
00:09:16,700 --> 00:09:23,180
improved over the years but it is not an

166
00:09:19,910 --> 00:09:27,020
efficient language is good for proof of

167
00:09:23,180 --> 00:09:29,209
concept but not really for production

168
00:09:27,020 --> 00:09:32,300
I'm not saying that nothing is produced

169
00:09:29,210 --> 00:09:36,020
on bug - because many of the tools that

170
00:09:32,300 --> 00:09:36,939
you will see well you will get your

171
00:09:36,020 --> 00:09:41,170
little boy

172
00:09:36,940 --> 00:09:45,340
that might be worth thousands of euros

173
00:09:41,170 --> 00:09:49,630
and what does that come contain linux

174
00:09:45,340 --> 00:09:53,020
shell and Python not a lot apart from

175
00:09:49,630 --> 00:09:57,550
that and people are selling that but

176
00:09:53,020 --> 00:10:00,819
it's not the ideal language for products

177
00:09:57,550 --> 00:10:03,699
because it lacks efficiency it's an

178
00:10:00,820 --> 00:10:06,490
interpreted language it's not a compiled

179
00:10:03,700 --> 00:10:09,640
language if you know what I'm talking

180
00:10:06,490 --> 00:10:12,640
about as a big difference right as far

181
00:10:09,640 --> 00:10:16,830
as efficiency is concerned is a

182
00:10:12,640 --> 00:10:21,610
scripting language it was designed for

183
00:10:16,830 --> 00:10:24,250
sequential programming and well then

184
00:10:21,610 --> 00:10:27,580
it's got object-oriented properties that

185
00:10:24,250 --> 00:10:30,100
have been added over time but it's a

186
00:10:27,580 --> 00:10:35,980
little bit more advanced than sheer

187
00:10:30,100 --> 00:10:38,410
scripting but not that much more what

188
00:10:35,980 --> 00:10:42,790
about multi thread were working with

189
00:10:38,410 --> 00:10:45,610
different threads and processes does

190
00:10:42,790 --> 00:10:48,569
multi-threading work well on Python not

191
00:10:45,610 --> 00:10:54,310
particularly well because it's kind of

192
00:10:48,570 --> 00:10:58,750
emulated threads are not real versus a

193
00:10:54,310 --> 00:11:01,180
processor it has weighting status

194
00:10:58,750 --> 00:11:03,280
waiting for other threads to come in and

195
00:11:01,180 --> 00:11:05,890
you need to work with threading

196
00:11:03,280 --> 00:11:08,860
logically most of the programs in

197
00:11:05,890 --> 00:11:13,210
hacking work with threats because we

198
00:11:08,860 --> 00:11:17,050
need to work in parallel you can't just

199
00:11:13,210 --> 00:11:19,870
do sequential language jump ring jumping

200
00:11:17,050 --> 00:11:23,079
from one point the next there are times

201
00:11:19,870 --> 00:11:26,770
where programming requires threads and

202
00:11:23,080 --> 00:11:27,910
threading so threading is present but

203
00:11:26,770 --> 00:11:31,420
it's not wonderful

204
00:11:27,910 --> 00:11:34,510
and then another drawback when people

205
00:11:31,420 --> 00:11:38,469
say that python is multi-platform well I

206
00:11:34,510 --> 00:11:41,680
think that's not quite true Python can

207
00:11:38,470 --> 00:11:45,880
be installed or Windows you can do

208
00:11:41,680 --> 00:11:47,660
certain things like that but Python was

209
00:11:45,880 --> 00:11:50,900
designed for

210
00:11:47,660 --> 00:11:55,189
not for Windows so the way you work with

211
00:11:50,900 --> 00:11:58,579
tiny with drivers and binary code it's

212
00:11:55,190 --> 00:12:01,870
all designed for Linux and I think it's

213
00:11:58,580 --> 00:12:06,530
awful when I see it working with Windows

214
00:12:01,870 --> 00:12:11,230
so now what is Scapa MA it's a Python

215
00:12:06,530 --> 00:12:15,290
library it's powerful it's a wonderful

216
00:12:11,230 --> 00:12:17,720
Python library very much advanced from

217
00:12:15,290 --> 00:12:25,819
the programming point of view it's

218
00:12:17,720 --> 00:12:28,930
really active very often updated so we

219
00:12:25,820 --> 00:12:34,280
can basically say it's a library to

220
00:12:28,930 --> 00:12:38,859
handle and patch packages some

221
00:12:34,280 --> 00:12:45,319
functionalities like Wireshark that

222
00:12:38,860 --> 00:12:49,790
captures manipulates and patches Network

223
00:12:45,320 --> 00:12:51,860
protocols SCAP it does that because it

224
00:12:49,790 --> 00:12:55,280
can understand all these different

225
00:12:51,860 --> 00:13:00,470
Network protocols I'm going to be

226
00:12:55,280 --> 00:13:03,860
focusing today on Wi-Fi so because for

227
00:13:00,470 --> 00:13:05,720
me that's the main part of Scotty but in

228
00:13:03,860 --> 00:13:10,340
fact you can do all sorts of other

229
00:13:05,720 --> 00:13:15,370
things as well some very simple tasks

230
00:13:10,340 --> 00:13:17,900
for instance an attack or two spoofy or

231
00:13:15,370 --> 00:13:22,160
man-in-the-middle how can you do that

232
00:13:17,900 --> 00:13:24,740
well small tools like an L tell cap

233
00:13:22,160 --> 00:13:29,170
while there are many different tools

234
00:13:24,740 --> 00:13:34,610
that you can use for a man in the middle

235
00:13:29,170 --> 00:13:39,469
activities and in Scapa the library

236
00:13:34,610 --> 00:13:44,060
might give you what 2030 programming

237
00:13:39,470 --> 00:13:53,180
lines but they're very powerful for ARP

238
00:13:44,060 --> 00:13:56,420
I ap RDP it can handle as I said many

239
00:13:53,180 --> 00:13:59,160
different protocols so we can then work

240
00:13:56,420 --> 00:14:02,280
with them for programming purposes

241
00:13:59,160 --> 00:14:04,530
which is very practical again otherwise

242
00:14:02,280 --> 00:14:07,380
you would have to program your own tools

243
00:14:04,530 --> 00:14:12,240
which is nice right you have an idea

244
00:14:07,380 --> 00:14:16,220
you'd search Google you might find bits

245
00:14:12,240 --> 00:14:19,980
and pieces of proof-of-concept on github

246
00:14:16,220 --> 00:14:22,440
and yet you end up deciding that you

247
00:14:19,980 --> 00:14:24,330
have to prepare your own and program

248
00:14:22,440 --> 00:14:27,780
your own - and that's what you can do

249
00:14:24,330 --> 00:14:31,050
with Scottie and many of the tools that

250
00:14:27,780 --> 00:14:33,900
you'll find on open-source for

251
00:14:31,050 --> 00:14:38,339
particular attacks have been designed on

252
00:14:33,900 --> 00:14:40,980
Python and Scapa and if you import your

253
00:14:38,340 --> 00:14:45,060
scrappy library you have all those tools

254
00:14:40,980 --> 00:14:47,280
and functionalities then it can do a

255
00:14:45,060 --> 00:14:51,589
number of different things as well for

256
00:14:47,280 --> 00:14:53,910
instance a package manipulation

257
00:14:51,590 --> 00:14:55,890
possibilities what does that mean well

258
00:14:53,910 --> 00:14:59,160
that you need to first be able to

259
00:14:55,890 --> 00:15:07,560
capture the traffic great well Scotty

260
00:14:59,160 --> 00:15:11,850
allows for that you can capture a card

261
00:15:07,560 --> 00:15:20,479
or whether it's for the internet or the

262
00:15:11,850 --> 00:15:24,600
Wi-Fi you can find information like that

263
00:15:20,480 --> 00:15:28,850
then you can also handle and manipulate

264
00:15:24,600 --> 00:15:32,310
and modify information and traffic

265
00:15:28,850 --> 00:15:35,850
finding certain packages changing some

266
00:15:32,310 --> 00:15:38,369
properties and then do all sorts of

267
00:15:35,850 --> 00:15:40,650
things including interpreting the

268
00:15:38,370 --> 00:15:43,470
package true but more than that

269
00:15:40,650 --> 00:15:47,220
instead of the package going from A to B

270
00:15:43,470 --> 00:15:49,380
you can change a the origin or the

271
00:15:47,220 --> 00:15:53,070
destination or the timing or the

272
00:15:49,380 --> 00:15:56,100
sequence you can change one or a number

273
00:15:53,070 --> 00:15:58,830
of things on that package and because

274
00:15:56,100 --> 00:16:02,549
you can manipulate and handle all things

275
00:15:58,830 --> 00:16:07,119
you can then inject it back again into

276
00:16:02,549 --> 00:16:13,239
the air the Wi-Fi or Ethernet whether

277
00:16:07,119 --> 00:16:17,619
it's cable or Ethernet whatever so you

278
00:16:13,239 --> 00:16:19,949
can capture and manipulate and inject

279
00:16:17,619 --> 00:16:23,439
back again those are the basic

280
00:16:19,949 --> 00:16:27,429
functional functions and then why do we

281
00:16:23,439 --> 00:16:29,829
talk about patching a package well a

282
00:16:27,429 --> 00:16:36,129
package is quite complex because it's a

283
00:16:29,829 --> 00:16:38,888
binary object moving on a network

284
00:16:36,129 --> 00:16:47,709
traffic whether it is Wi-Fi or whatever

285
00:16:38,889 --> 00:16:52,629
so we find a network package or whatever

286
00:16:47,709 --> 00:16:55,868
but a hexadecimal editor in fact

287
00:16:52,629 --> 00:16:59,259
sometimes has trouble showing us enough

288
00:16:55,869 --> 00:17:01,089
details on a package because we're not

289
00:16:59,259 --> 00:17:03,969
working we're not going to be working

290
00:17:01,089 --> 00:17:08,019
with bytes but with bits so the

291
00:17:03,969 --> 00:17:11,789
difference between north and one is like

292
00:17:08,019 --> 00:17:15,250
a fog and if I try and view a package

293
00:17:11,789 --> 00:17:17,859
hexadecimal hexadecimal e I would only

294
00:17:15,250 --> 00:17:21,339
see at the byte level and that's not

295
00:17:17,859 --> 00:17:24,908
good enough I need to go down to the bit

296
00:17:21,339 --> 00:17:27,158
level and it's not always as accurate as

297
00:17:24,909 --> 00:17:30,940
saying oh this will take - this will

298
00:17:27,159 --> 00:17:33,669
take one all the beginning or the end of

299
00:17:30,940 --> 00:17:37,350
the field is not that simple to track

300
00:17:33,669 --> 00:17:40,419
and understand is very complex

301
00:17:37,350 --> 00:17:43,059
fortunately the Scapa library air shows

302
00:17:40,419 --> 00:17:46,320
me the fields in a package in a way I

303
00:17:43,059 --> 00:17:46,320
can understand

304
00:17:46,919 --> 00:18:01,260
so that's dissecting or patching a nice

305
00:17:54,940 --> 00:18:07,000
person when we talk about ERP ERP

306
00:18:01,260 --> 00:18:10,750
ethernet/ip TCP we can see get to all

307
00:18:07,000 --> 00:18:25,389
different layers of any package

308
00:18:10,750 --> 00:18:26,909
so apart from dissecting so we saw two

309
00:18:25,389 --> 00:18:30,070
functions at the being of my

310
00:18:26,909 --> 00:18:32,289
presentation is capture that's sniffing

311
00:18:30,070 --> 00:18:35,408
traffic that's one of the possible

312
00:18:32,289 --> 00:18:37,690
functions another function is injecting

313
00:18:35,409 --> 00:18:42,730
traffic into the network

314
00:18:37,690 --> 00:18:46,029
what other functions can we have show me

315
00:18:42,730 --> 00:18:49,779
difference between these two packages

316
00:18:46,029 --> 00:18:54,519
that's another function show me a beef

317
00:18:49,779 --> 00:18:58,240
or show me a hexadecimal output seeing

318
00:18:54,519 --> 00:19:00,820
the Ruhr of a particular package to see

319
00:18:58,240 --> 00:19:04,990
the size it's got all these different

320
00:19:00,820 --> 00:19:09,158
functions so that we can better program

321
00:19:04,990 --> 00:19:14,440
the network functions it's skp is only

322
00:19:09,159 --> 00:19:19,389
also available for version Python 2 or 3

323
00:19:14,440 --> 00:19:22,389
I'm currently using Python - but python

324
00:19:19,389 --> 00:19:24,279
3 is also very very much developed what

325
00:19:22,389 --> 00:19:27,459
are the drawbacks there's very little

326
00:19:24,279 --> 00:19:30,130
documentation you will find many

327
00:19:27,460 --> 00:19:33,269
different things on the internet but

328
00:19:30,130 --> 00:19:36,059
this little bit trial and error is not

329
00:19:33,269 --> 00:19:39,419
documentation as such you might see

330
00:19:36,059 --> 00:19:44,100
programs that somebody else has done

331
00:19:39,419 --> 00:19:47,800
some blogs some articles

332
00:19:44,100 --> 00:19:50,919
documentation on Scapa which is still a

333
00:19:47,800 --> 00:19:56,440
little bit poor so it's not it's not

334
00:19:50,920 --> 00:19:58,660
very solid from that point of view here

335
00:19:56,440 --> 00:20:02,980
well I'm going to do a little bit of

336
00:19:58,660 --> 00:20:05,710
publicity of my book that I have

337
00:20:02,980 --> 00:20:08,050
published recently you can find it on

338
00:20:05,710 --> 00:20:11,350
Amazon and I brought a few copies as

339
00:20:08,050 --> 00:20:12,159
well to offer you here today at a good

340
00:20:11,350 --> 00:20:16,510
discount

341
00:20:12,160 --> 00:20:20,260
so that's Skippy for Wi-Fi that's what

342
00:20:16,510 --> 00:20:23,440
you will find if you get my book with 40

343
00:20:20,260 --> 00:20:28,540
40 different examples with comments for

344
00:20:23,440 --> 00:20:34,360
different functionalities and so that

345
00:20:28,540 --> 00:20:36,670
you can learn and move up in difficulty

346
00:20:34,360 --> 00:20:39,820
for you to first understand how Wi-Fi

347
00:20:36,670 --> 00:20:42,030
works the internal protocols there and

348
00:20:39,820 --> 00:20:45,939
so that you can then start testing with

349
00:20:42,030 --> 00:20:49,420
python and Scapa now let me tell you a

350
00:20:45,940 --> 00:20:51,790
little bit now about hardware what

351
00:20:49,420 --> 00:20:54,850
hardware will you need if you want to

352
00:20:51,790 --> 00:20:59,200
work with Wi-Fi like this well a card

353
00:20:54,850 --> 00:21:02,139
that can work a or with a monitor mode

354
00:20:59,200 --> 00:21:05,410
and there are many like this in the

355
00:21:02,140 --> 00:21:10,150
market my laptop for instance has an

356
00:21:05,410 --> 00:21:13,059
Intel quad that it can work on monitor

357
00:21:10,150 --> 00:21:15,760
mode it's a pretty good card that allows

358
00:21:13,059 --> 00:21:17,970
me to do many different things although

359
00:21:15,760 --> 00:21:23,920
it has one drawback I'll tell you later

360
00:21:17,970 --> 00:21:25,630
there's another one here alpha and in

361
00:21:23,920 --> 00:21:27,520
fact if you have the money

362
00:21:25,630 --> 00:21:30,960
I would recommend you to get it now

363
00:21:27,520 --> 00:21:36,280
because in three months time it will

364
00:21:30,960 --> 00:21:42,850
stop it won't be sold anymore and this

365
00:21:36,280 --> 00:21:46,320
is a fantastic chip nine to seven one

366
00:21:42,850 --> 00:21:49,419
one of the best chips ever

367
00:21:46,320 --> 00:21:51,310
unfortunately our terrors is not making

368
00:21:49,420 --> 00:21:54,490
that chip anymore

369
00:21:51,310 --> 00:21:57,190
they have more modern versions but this

370
00:21:54,490 --> 00:22:02,050
this one is better to be honest the

371
00:21:57,190 --> 00:22:03,970
other one the Intel L the white the

372
00:22:02,050 --> 00:22:09,730
white one which I'll be using for my

373
00:22:03,970 --> 00:22:12,250
demo they both use the same Attero chip

374
00:22:09,730 --> 00:22:18,160
says there are very few left in the

375
00:22:12,250 --> 00:22:20,710
market the Alpha card is technically a

376
00:22:18,160 --> 00:22:23,380
little bit better than the tp-link so

377
00:22:20,710 --> 00:22:24,780
that's why I still recommend it now it's

378
00:22:23,380 --> 00:22:30,210
still available

379
00:22:24,780 --> 00:22:32,770
logically is a Linux Kali Linux part

380
00:22:30,210 --> 00:22:37,270
implemented for all different versions

381
00:22:32,770 --> 00:22:41,530
or releases it can work with Python from

382
00:22:37,270 --> 00:22:44,650
2.5 2.73 as well it works really well

383
00:22:41,530 --> 00:22:49,270
with kathy libraries so that's what I

384
00:22:44,650 --> 00:22:53,590
recommend but you need to understand the

385
00:22:49,270 --> 00:22:57,610
difference between a monitor mode and a

386
00:22:53,590 --> 00:23:01,179
promiscuous mode mode card and the card

387
00:22:57,610 --> 00:23:03,520
with injection capabilities for those of

388
00:23:01,180 --> 00:23:06,610
for those of us who've been working on

389
00:23:03,520 --> 00:23:09,270
Wi-Fi hacking that's a very important

390
00:23:06,610 --> 00:23:12,459
difference because not all cards on

391
00:23:09,270 --> 00:23:15,879
monitor mode allow for injection or

392
00:23:12,460 --> 00:23:19,000
injection at the same level or sniffing

393
00:23:15,880 --> 00:23:21,490
the same level of information depending

394
00:23:19,000 --> 00:23:23,160
on how the driver the module was

395
00:23:21,490 --> 00:23:27,240
programmed for the card

396
00:23:23,160 --> 00:23:30,460
not all modules have been programmed

397
00:23:27,240 --> 00:23:35,110
properly which is why I recommend our

398
00:23:30,460 --> 00:23:38,950
terrors the hardware of that card is

399
00:23:35,110 --> 00:23:41,830
really good it allows for monitor mode

400
00:23:38,950 --> 00:23:46,480
as I said and that means that I can

401
00:23:41,830 --> 00:23:49,960
sniff out any package whether it belongs

402
00:23:46,480 --> 00:23:53,680
to my network or nose no matter where it

403
00:23:49,960 --> 00:23:56,590
comes from where it's going because I'll

404
00:23:53,680 --> 00:24:00,070
I'm on monitor mode and I'll be sniffing

405
00:23:56,590 --> 00:24:01,840
any package on any network which is a

406
00:24:00,070 --> 00:24:05,439
little bit similar to what is called

407
00:24:01,840 --> 00:24:08,620
from miss cures mode monitor mode and

408
00:24:05,440 --> 00:24:11,160
promiscuous mode are almost synonyms

409
00:24:08,620 --> 00:24:14,290
although not quite because when we say

410
00:24:11,160 --> 00:24:18,550
promiscuous mode it means that the court

411
00:24:14,290 --> 00:24:22,930
within the segment within its segment it

412
00:24:18,550 --> 00:24:27,520
will be sniffing a traffic so if it's

413
00:24:22,930 --> 00:24:30,370
connected to the cyber camp Wi-Fi

414
00:24:27,520 --> 00:24:35,100
network here then it will be able to

415
00:24:30,370 --> 00:24:39,699
sniff out the traffic from any system

416
00:24:35,100 --> 00:24:41,949
connected to cyber camp Wi-Fi but not on

417
00:24:39,700 --> 00:24:46,540
monitor mode because the card is not

418
00:24:41,950 --> 00:24:52,780
connected to any mode really and then it

419
00:24:46,540 --> 00:24:56,409
can sniff out any network any system

420
00:24:52,780 --> 00:24:58,780
within a particular range geographical

421
00:24:56,410 --> 00:25:01,240
range not necessarily connected to a

422
00:24:58,780 --> 00:25:04,480
particular Wi-Fi network when I work

423
00:25:01,240 --> 00:25:07,060
with Wi-Fi I want monitor mode not

424
00:25:04,480 --> 00:25:10,240
promiscuous mode and also what's the

425
00:25:07,060 --> 00:25:13,510
difference between some monitor modes

426
00:25:10,240 --> 00:25:16,270
and others depending on what card we use

427
00:25:13,510 --> 00:25:19,060
because packages have different layers

428
00:25:16,270 --> 00:25:22,780
as we will see in short see shortly and

429
00:25:19,060 --> 00:25:26,530
some monitor mode cards give me all

430
00:25:22,780 --> 00:25:31,990
layers whereas other cards they only

431
00:25:26,530 --> 00:25:35,320
give me the layer eight double one well

432
00:25:31,990 --> 00:25:37,630
I don't want that one only I want the

433
00:25:35,320 --> 00:25:42,520
previous layers as well that's a good

434
00:25:37,630 --> 00:25:45,070
monitor called mode card and he even for

435
00:25:42,520 --> 00:25:51,820
packages that are corrupted or with a

436
00:25:45,070 --> 00:25:54,399
CRC error a good monitor mode card will

437
00:25:51,820 --> 00:25:57,490
provide me with any package even if a

438
00:25:54,400 --> 00:26:00,160
it's wrong and later we will see the

439
00:25:57,490 --> 00:26:06,340
different layers colonel the drive

440
00:26:00,160 --> 00:26:09,820
whatever basically what I want is ending

441
00:26:06,340 --> 00:26:12,040
up with all those layers at the user

442
00:26:09,820 --> 00:26:13,990
space in that area

443
00:26:12,040 --> 00:26:18,070
so that I can analyze and see things

444
00:26:13,990 --> 00:26:21,160
that otherwise I wouldn't see so those

445
00:26:18,070 --> 00:26:23,919
differences are important some monitor

446
00:26:21,160 --> 00:26:26,530
modes don't allow for injection for

447
00:26:23,920 --> 00:26:30,220
instance the intercourse in my laptop

448
00:26:26,530 --> 00:26:33,639
allows for it great that means it gives

449
00:26:30,220 --> 00:26:36,670
me most information from all the

450
00:26:33,640 --> 00:26:39,790
different layers but if I try to inject

451
00:26:36,670 --> 00:26:44,470
with that card it won't let me inject

452
00:26:39,790 --> 00:26:47,320
packages because it's monitor mode

453
00:26:44,470 --> 00:26:49,540
without injection those are basic

454
00:26:47,320 --> 00:26:53,679
difference differences as far as

455
00:26:49,540 --> 00:26:55,840
hardware is concerned and then cards can

456
00:26:53,680 --> 00:26:58,360
be better or worse from a physical point

457
00:26:55,840 --> 00:27:01,750
of view because of the manufacturing

458
00:26:58,360 --> 00:27:05,949
process the type of chip set the

459
00:27:01,750 --> 00:27:08,230
frequency elements be better or worse

460
00:27:05,950 --> 00:27:08,590
normally the most expensive ones are

461
00:27:08,230 --> 00:27:12,940
better

462
00:27:08,590 --> 00:27:16,629
this alpha card is then different from a

463
00:27:12,940 --> 00:27:19,510
tp-link like the two that you can see up

464
00:27:16,630 --> 00:27:21,760
on the screen they both they all have

465
00:27:19,510 --> 00:27:24,790
the same chip size so you might say oh

466
00:27:21,760 --> 00:27:28,090
I'm just gonna get the cheap one well as

467
00:27:24,790 --> 00:27:31,060
it's not just the chipset there are many

468
00:27:28,090 --> 00:27:34,240
different components electronic

469
00:27:31,060 --> 00:27:37,810
components and materials and they RF

470
00:27:34,240 --> 00:27:41,470
measuring many different qualities so

471
00:27:37,810 --> 00:27:43,659
logically some cards will be sniffing

472
00:27:41,470 --> 00:27:46,120
better than others depending on that

473
00:27:43,660 --> 00:27:48,770
quality so that's all I have to say

474
00:27:46,120 --> 00:27:52,149
about the hardware

475
00:27:48,770 --> 00:27:56,060
my recommendation is having one or two

476
00:27:52,150 --> 00:27:58,700
good cards that work on monitor mode

477
00:27:56,060 --> 00:28:02,030
that's basic now let's move from

478
00:27:58,700 --> 00:28:07,700
hardware to Wi-Fi what is Wi-Fi what is

479
00:28:02,030 --> 00:28:11,629
the brand there's a brand name Wi-Fi not

480
00:28:07,700 --> 00:28:14,480
the commercial name that's it but what

481
00:28:11,630 --> 00:28:17,060
do we mean when we say Wi-Fi is a

482
00:28:14,480 --> 00:28:23,810
standard Association

483
00:28:17,060 --> 00:28:27,919
that's a I II cube they are in charge of

484
00:28:23,810 --> 00:28:32,000
protocols that occurred 802 dot double

485
00:28:27,920 --> 00:28:38,030
one those protocols a or refer to

486
00:28:32,000 --> 00:28:44,060
wireless communications in the standards

487
00:28:38,030 --> 00:28:48,620
that I cubed a or I Triple E publishes

488
00:28:44,060 --> 00:28:51,169
so we say 802 don't double one what is

489
00:28:48,620 --> 00:28:54,260
that it's not just one protocol there

490
00:28:51,170 --> 00:28:59,150
are many protocols there there is a

491
00:28:54,260 --> 00:29:01,760
whole array of protocols included for

492
00:28:59,150 --> 00:29:06,370
this is the legacy ones the basic ones

493
00:29:01,760 --> 00:29:09,400
the first-ever version and then 802

494
00:29:06,370 --> 00:29:18,949
double one 802

495
00:29:09,400 --> 00:29:23,510
double one a B and a C WP are also now

496
00:29:18,950 --> 00:29:26,690
two letters are used AC we've run out of

497
00:29:23,510 --> 00:29:30,250
letters in the alphabet can you imagine

498
00:29:26,690 --> 00:29:34,630
how many protocols a Wi-Fi includes then

499
00:29:30,250 --> 00:29:39,830
Wi-Fi is just a brand name that says a

500
00:29:34,630 --> 00:29:42,350
piece of equipment that has Wi-Fi on it

501
00:29:39,830 --> 00:29:47,330
a is compatible with all those different

502
00:29:42,350 --> 00:29:50,990
protocols that are inter operable so my

503
00:29:47,330 --> 00:29:54,939
product Intel for instance is compatible

504
00:29:50,990 --> 00:30:02,570
with any other type of Wi-Fi

505
00:29:54,940 --> 00:30:08,120
so as I said 802 dot double 1a includes

506
00:30:02,570 --> 00:30:11,560
many different protocols 802 dot 3 is

507
00:30:08,120 --> 00:30:15,439
the most popular one that's the Ethernet

508
00:30:11,560 --> 00:30:19,010
cable the cable that you physically

509
00:30:15,440 --> 00:30:22,040
connect to your computer and Ethernet it

510
00:30:19,010 --> 00:30:27,320
works so well that it was like the

511
00:30:22,040 --> 00:30:31,460
foundations for Wi-Fi to grow and be

512
00:30:27,320 --> 00:30:35,120
developed for the 802 dot double one

513
00:30:31,460 --> 00:30:36,920
it started with Ethernet and then Wi-Fi

514
00:30:35,120 --> 00:30:41,830
made the most of that initial

515
00:30:36,920 --> 00:30:45,460
development so this is still very active

516
00:30:41,830 --> 00:30:47,560
many different protocols continue to be

517
00:30:45,460 --> 00:30:51,110
launched

518
00:30:47,560 --> 00:30:53,419
because Wi-Fi continues to be improved

519
00:30:51,110 --> 00:31:01,330
later I will tell you about some of

520
00:30:53,420 --> 00:31:06,640
those improvements so what is that 802

521
00:31:01,330 --> 00:31:09,409
dot double 1 frame like well this is it

522
00:31:06,640 --> 00:31:12,170
this is a network frame

523
00:31:09,410 --> 00:31:16,730
I was the difference between a package

524
00:31:12,170 --> 00:31:19,040
and a frame even professionals and get

525
00:31:16,730 --> 00:31:21,350
confused sometimes we asked for a

526
00:31:19,040 --> 00:31:30,290
clarification are you talking about a

527
00:31:21,350 --> 00:31:32,870
frame or what is it in a frame we're

528
00:31:30,290 --> 00:31:35,600
talking about the most basic and the

529
00:31:32,870 --> 00:31:42,100
smallest possible units that would be a

530
00:31:35,600 --> 00:31:48,409
frame whereas a package is different

531
00:31:42,100 --> 00:31:52,399
because network frames are a little bit

532
00:31:48,410 --> 00:31:57,220
like onion layers so if we're familiar

533
00:31:52,400 --> 00:32:02,120
with a typical standard the basic one

534
00:31:57,220 --> 00:32:05,600
the OSI layers going from one to three

535
00:32:02,120 --> 00:32:07,409
different layers with one is physical

536
00:32:05,600 --> 00:32:11,310
layer another one for

537
00:32:07,410 --> 00:32:15,570
another one for network whatever and on

538
00:32:11,310 --> 00:32:20,240
and on up to layer number eight and that

539
00:32:15,570 --> 00:32:23,520
would be us so every layer encapsulate

540
00:32:20,240 --> 00:32:27,810
certain information within the package

541
00:32:23,520 --> 00:32:30,300
so if I go to the lowest layer that's a

542
00:32:27,810 --> 00:32:32,730
layer number one what does that work

543
00:32:30,300 --> 00:32:35,810
with well the physical part of our

544
00:32:32,730 --> 00:32:38,460
environment saying what physical

545
00:32:35,810 --> 00:32:41,280
characteristics of features and Ethernet

546
00:32:38,460 --> 00:32:44,700
cables should comply with eight threads

547
00:32:41,280 --> 00:32:48,389
with four pairs with certain electrical

548
00:32:44,700 --> 00:32:51,960
features with a certain impedance a

549
00:32:48,390 --> 00:32:55,580
number of physical characteristics

550
00:32:51,960 --> 00:33:00,360
that's the first layer if we talk about

551
00:32:55,580 --> 00:33:04,530
8:01 8:02 dot double one what would the

552
00:33:00,360 --> 00:33:09,330
physical layer be regulating the

553
00:33:04,530 --> 00:33:14,879
frequency band the modulation for radio

554
00:33:09,330 --> 00:33:17,070
frequency timing for a package to be up

555
00:33:14,880 --> 00:33:21,330
in the air or a transmitter and

556
00:33:17,070 --> 00:33:25,740
transmitter transmitting that would be

557
00:33:21,330 --> 00:33:29,399
yes that would be the first layer so 802

558
00:33:25,740 --> 00:33:34,260
dot double one regulates the first layer

559
00:33:29,400 --> 00:33:37,280
the physical layer of the radio

560
00:33:34,260 --> 00:33:41,100
frequency transmission and and

561
00:33:37,280 --> 00:33:42,950
importantly the second layer what would

562
00:33:41,100 --> 00:33:46,500
that what does that involve

563
00:33:42,950 --> 00:33:49,500
well how communications have to be

564
00:33:46,500 --> 00:33:53,270
regulated on a Wi-Fi network how a

565
00:33:49,500 --> 00:33:57,450
station has to transmit or then

566
00:33:53,270 --> 00:34:00,389
retransmit how different systems can

567
00:33:57,450 --> 00:34:04,050
coexist in the same environment and

568
00:34:00,390 --> 00:34:07,020
avoid any collisions if transmissions

569
00:34:04,050 --> 00:34:10,199
happen at the same time how traffic has

570
00:34:07,020 --> 00:34:13,850
to be regulated all of that belongs to

571
00:34:10,199 --> 00:34:16,859
layer number two that's the mac layer

572
00:34:13,850 --> 00:34:20,018
traffic going from one device to another

573
00:34:16,860 --> 00:34:23,839
through the mac

574
00:34:20,018 --> 00:34:27,250
as why we never talk there about IP or

575
00:34:23,839 --> 00:34:29,989
pores or VP we just talk about Mac there

576
00:34:27,250 --> 00:34:32,839
that's why people often refer to that

577
00:34:29,989 --> 00:34:37,459
second layer as the Mac layer or the

578
00:34:32,839 --> 00:34:41,418
linking layer so the only addresses

579
00:34:37,460 --> 00:34:45,259
handle there are MAC addresses that is

580
00:34:41,418 --> 00:34:48,739
physical addresses every device has one

581
00:34:45,259 --> 00:34:54,469
single MAC address in theory although if

582
00:34:48,739 --> 00:34:56,598
you if you buy a Chinese device you will

583
00:34:54,469 --> 00:35:02,919
find there are a number of them with the

584
00:34:56,599 --> 00:35:07,250
same marketers and VP one for because

585
00:35:02,920 --> 00:35:09,349
they're almost out well now we have the

586
00:35:07,250 --> 00:35:10,309
one six and the same thing is happening

587
00:35:09,349 --> 00:35:13,240
with Mac's

588
00:35:10,309 --> 00:35:17,480
which are growing larger and larger a

589
00:35:13,240 --> 00:35:21,078
mobile device or a Wi-Fi card or another

590
00:35:17,480 --> 00:35:26,180
ethernet device should have one single

591
00:35:21,079 --> 00:35:28,220
MAC address because if there are two

592
00:35:26,180 --> 00:35:32,690
with the same MAC address and that

593
00:35:28,220 --> 00:35:36,529
allows for traffic collisions so a frame

594
00:35:32,690 --> 00:35:39,769
moves a on layer number two so when I

595
00:35:36,529 --> 00:35:44,420
talk about layer frame remember that I'm

596
00:35:39,769 --> 00:35:46,430
talking about layer number two but apart

597
00:35:44,420 --> 00:35:48,289
from regulating communications and we

598
00:35:46,430 --> 00:35:51,828
will see a few cases and how this is

599
00:35:48,289 --> 00:35:53,660
regulated that frame in the end what's

600
00:35:51,829 --> 00:35:56,029
the role there it is all about

601
00:35:53,660 --> 00:35:57,950
transferring information that's a it so

602
00:35:56,029 --> 00:36:00,109
I want to have access to a website I

603
00:35:57,950 --> 00:36:02,509
would need to see the result of my serve

604
00:36:00,109 --> 00:36:04,640
friend pictures all the content all the

605
00:36:02,509 --> 00:36:06,740
traffic that's what has to be

606
00:36:04,640 --> 00:36:09,980
transported right that's communication

607
00:36:06,740 --> 00:36:12,740
so that frame has layers as we said when

608
00:36:09,980 --> 00:36:15,859
we started those layers if I had to

609
00:36:12,740 --> 00:36:17,779
transport data I add that years and in

610
00:36:15,859 --> 00:36:21,250
the end it turns into something that is

611
00:36:17,779 --> 00:36:25,090
known as a network package so

612
00:36:21,250 --> 00:36:27,820
we can dissect or parse the package and

613
00:36:25,090 --> 00:36:32,109
went into layers and say this IP this is

614
00:36:27,820 --> 00:36:35,440
TCP or UDP and this is Awards known as

615
00:36:32,109 --> 00:36:37,630
802 11 but all up in there is a

616
00:36:35,440 --> 00:36:40,300
summation of the whole package that's

617
00:36:37,630 --> 00:36:43,960
the difference between package and

618
00:36:40,300 --> 00:36:47,349
frames so this is the difference in the

619
00:36:43,960 --> 00:36:51,280
protocol and a package has already a

620
00:36:47,349 --> 00:36:56,290
nexus has a payload that has all the

621
00:36:51,280 --> 00:37:02,080
traffic that has moved around so this is

622
00:36:56,290 --> 00:37:04,050
what an 802 11 framework looks like we

623
00:37:02,080 --> 00:37:08,950
need to pay attention to it because

624
00:37:04,050 --> 00:37:12,640
every field there such as the one one

625
00:37:08,950 --> 00:37:14,649
the first one that is a the control

626
00:37:12,640 --> 00:37:16,390
layer that will give us information when

627
00:37:14,650 --> 00:37:18,880
programming and that's what's copying

628
00:37:16,390 --> 00:37:21,700
that's what's copy is they sucked in

629
00:37:18,880 --> 00:37:25,119
from every package network package if I

630
00:37:21,700 --> 00:37:28,919
say this is what I have which is a

631
00:37:25,119 --> 00:37:31,660
package or a frame moving around mind

632
00:37:28,920 --> 00:37:35,109
and I capture it and send it to scopic

633
00:37:31,660 --> 00:37:36,368
and I say show me T address number one

634
00:37:35,109 --> 00:37:39,609
for this package so that is a

635
00:37:36,369 --> 00:37:43,540
destination so we check this out and we

636
00:37:39,609 --> 00:37:45,520
say address 1 where is it headed where

637
00:37:43,540 --> 00:37:49,270
is that going from where to where

638
00:37:45,520 --> 00:37:52,480
so source and destination and here we

639
00:37:49,270 --> 00:37:55,720
have part of it which is address 1 and

640
00:37:52,480 --> 00:37:59,770
this other part here is address here so

641
00:37:55,720 --> 00:38:01,839
we have to clearly to fill that are

642
00:37:59,770 --> 00:38:04,119
clearly source and destination and with

643
00:38:01,839 --> 00:38:06,880
that I can already walk around with us

644
00:38:04,119 --> 00:38:09,700
this toaster fails I can just say okay

645
00:38:06,880 --> 00:38:14,050
so I just want to capture crap traffic

646
00:38:09,700 --> 00:38:17,348
headed here two jagers self found only

647
00:38:14,050 --> 00:38:20,349
the traffic where the destination all

648
00:38:17,349 --> 00:38:23,380
the stores is these are Yahoo cellphone

649
00:38:20,349 --> 00:38:26,770
and with that I can start programming

650
00:38:23,380 --> 00:38:29,050
and I can have my own tool so same I am

651
00:38:26,770 --> 00:38:31,720
sniffing traffic but on what conditions

652
00:38:29,050 --> 00:38:33,470
address one is daggers marketers address

653
00:38:31,720 --> 00:38:36,080
you can also be

654
00:38:33,470 --> 00:38:37,779
my MAC address that's a sniffer which is

655
00:38:36,080 --> 00:38:40,790
a targeted sniffer

656
00:38:37,780 --> 00:38:43,880
but then we see that there are four

657
00:38:40,790 --> 00:38:47,240
addresses in the packet so we'll see

658
00:38:43,880 --> 00:38:49,550
address 1 address through address 3 & 4

659
00:38:47,240 --> 00:38:52,430
so different types of addresses and this

660
00:38:49,550 --> 00:38:56,119
is because of the way why how it's been

661
00:38:52,430 --> 00:38:58,520
done this is a network where we have

662
00:38:56,119 --> 00:39:01,910
intermediaries who is the intermediary

663
00:38:58,520 --> 00:39:04,940
they're the hotspots the access points

664
00:39:01,910 --> 00:39:07,970
so basically my cell phone maybe wants

665
00:39:04,940 --> 00:39:10,640
to talk to your phone right but then my

666
00:39:07,970 --> 00:39:13,609
cell phone will not be in communication

667
00:39:10,640 --> 00:39:16,580
with you my mobile would talk to the

668
00:39:13,609 --> 00:39:20,330
hotspot and that will transfer the

669
00:39:16,580 --> 00:39:22,970
package to you that's the way to produce

670
00:39:20,330 --> 00:39:26,210
the white fine communications how come

671
00:39:22,970 --> 00:39:28,220
there is no prayer communications well

672
00:39:26,210 --> 00:39:32,300
there is there there is actually there

673
00:39:28,220 --> 00:39:33,950
are peer-to-peer communications which

674
00:39:32,300 --> 00:39:37,310
are IB as us

675
00:39:33,950 --> 00:39:40,520
this is peer-to-peer there are different

676
00:39:37,310 --> 00:39:43,220
names for it but they are they go unused

677
00:39:40,520 --> 00:39:47,710
they don't work you've never been used

678
00:39:43,220 --> 00:39:51,470
and only a few people use it some HP

679
00:39:47,710 --> 00:39:53,540
printers and just like that but any

680
00:39:51,470 --> 00:39:57,279
communication on Wi-Fi with

681
00:39:53,540 --> 00:40:00,200
infrastructure moves from station

682
00:39:57,280 --> 00:40:02,780
through the access point and from there

683
00:40:00,200 --> 00:40:05,569
to another device that can be on the

684
00:40:02,780 --> 00:40:08,450
wireless network all the wired network

685
00:40:05,570 --> 00:40:14,089
right so what what's an access point

686
00:40:08,450 --> 00:40:17,330
good would for so intermediary for

687
00:40:14,089 --> 00:40:21,380
communications then it's also and media

688
00:40:17,330 --> 00:40:24,560
change changes or changes packages going

689
00:40:21,380 --> 00:40:26,750
through the air and fits them into the

690
00:40:24,560 --> 00:40:31,520
wired network that's the mission there

691
00:40:26,750 --> 00:40:34,460
that part of an access point where you

692
00:40:31,520 --> 00:40:37,369
bring together an RF which is stands for

693
00:40:34,460 --> 00:40:42,200
radio frequency and a wired network is

694
00:40:37,369 --> 00:40:45,000
known as a DES or distribution system

695
00:40:42,200 --> 00:40:49,839
and we will explain that

696
00:40:45,000 --> 00:40:54,660
so when you hear distribution system it

697
00:40:49,840 --> 00:40:58,300
is the wireless or wire part of a Wi-Fi

698
00:40:54,660 --> 00:41:01,180
it is why it because it leads to a TS or

699
00:40:58,300 --> 00:41:06,160
Wireless because it moves from the D as

700
00:41:01,180 --> 00:41:10,450
to the wireless part what else it's a

701
00:41:06,160 --> 00:41:12,879
first line and I will forget about where

702
00:41:10,450 --> 00:41:16,629
other headers but we move from friend

703
00:41:12,880 --> 00:41:18,850
control to the FS that is how you break

704
00:41:16,630 --> 00:41:21,790
down a package and you have a frame

705
00:41:18,850 --> 00:41:24,910
control you have a duration you have all

706
00:41:21,790 --> 00:41:27,790
four directions you have an SC which is

707
00:41:24,910 --> 00:41:32,200
the sequence counter so that's the

708
00:41:27,790 --> 00:41:35,710
secrets it follows and so first one is 1

709
00:41:32,200 --> 00:41:38,830
then 2 then 3 then 4 and we'll start to

710
00:41:35,710 --> 00:41:41,500
see if there's any packet second lovest

711
00:41:38,830 --> 00:41:44,529
in between and we need to resend it

712
00:41:41,500 --> 00:41:46,720
because it happens all the time and then

713
00:41:44,530 --> 00:41:50,050
we have the green side which is the body

714
00:41:46,720 --> 00:41:53,319
over the frame body that were you'd

715
00:41:50,050 --> 00:41:55,090
transport information for the package ok

716
00:41:53,320 --> 00:41:57,730
so that's what's transported by the

717
00:41:55,090 --> 00:42:04,180
package that's a body of fate and then

718
00:41:57,730 --> 00:42:09,250
an FCS and that as usual that the check

719
00:42:04,180 --> 00:42:10,750
control or the RCC as it turns out again

720
00:42:09,250 --> 00:42:13,540
a summation from the front to the back

721
00:42:10,750 --> 00:42:16,240
and if it matches the value it's reached

722
00:42:13,540 --> 00:42:19,270
its destination right and if it's not a

723
00:42:16,240 --> 00:42:21,759
much to the back summation then the

724
00:42:19,270 --> 00:42:23,560
package is caught here but it's been

725
00:42:21,760 --> 00:42:25,660
broken in between so we have to discard

726
00:42:23,560 --> 00:42:29,410
it on us for a new and I pray around

727
00:42:25,660 --> 00:42:32,020
with it often because I have clips and

728
00:42:29,410 --> 00:42:35,080
piden as we will do today because I

729
00:42:32,020 --> 00:42:38,170
truly prefer the package so when I want

730
00:42:35,080 --> 00:42:41,980
to do something hidden or must that

731
00:42:38,170 --> 00:42:44,410
cannot be easily sniffed such as today's

732
00:42:41,980 --> 00:42:46,990
proof of concept I try to make that

733
00:42:44,410 --> 00:42:49,700
incorrect so why do you want it to be

734
00:42:46,990 --> 00:42:53,000
incorrect well because if it is so

735
00:42:49,700 --> 00:42:56,109
our regular wife aboard will drool it

736
00:42:53,000 --> 00:43:01,400
out and will not even show it so the

737
00:42:56,109 --> 00:43:04,700
drivers there for the board will say FS

738
00:43:01,400 --> 00:43:07,430
f CS incorrect you don't send it to

739
00:43:04,700 --> 00:43:11,390
these user space so that's a way to go

740
00:43:07,430 --> 00:43:13,520
in and unnoticed or hidden there are

741
00:43:11,390 --> 00:43:16,460
other fields such as frame control the

742
00:43:13,520 --> 00:43:19,970
first one which in turn we can split

743
00:43:16,460 --> 00:43:22,400
into two come into two films films and

744
00:43:19,970 --> 00:43:24,649
that's important one this is a very

745
00:43:22,400 --> 00:43:26,150
small one this is just a few bits we're

746
00:43:24,650 --> 00:43:30,069
talking about the first frame could

747
00:43:26,150 --> 00:43:30,069
process two bits if I'm not mistaken

748
00:43:33,940 --> 00:43:41,210
version version they all zero now so the

749
00:43:39,079 --> 00:43:41,930
vertical imitator has not been used -

750
00:43:41,210 --> 00:43:44,869
sup time

751
00:43:41,930 --> 00:43:46,690
okay that's important when they get the

752
00:43:44,869 --> 00:43:50,270
package up in there

753
00:43:46,690 --> 00:43:53,119
so here I'm sniffing it and first thing

754
00:43:50,270 --> 00:43:56,960
I need to know is what I visit and what

755
00:43:53,119 --> 00:43:59,329
sub time it is the different types of

756
00:43:56,960 --> 00:44:01,819
packages and sub type of packages as

757
00:43:59,329 --> 00:44:04,250
well first we can talk about type zero

758
00:44:01,819 --> 00:44:07,160
that I'm very interested in these are

759
00:44:04,250 --> 00:44:11,630
management packages or frames rather

760
00:44:07,160 --> 00:44:14,450
management frames so these are the

761
00:44:11,630 --> 00:44:16,819
beacons and they've relays access points

762
00:44:14,450 --> 00:44:19,399
constantly I'm here here here here and

763
00:44:16,819 --> 00:44:24,319
here these are my features or there as

764
00:44:19,400 --> 00:44:27,099
well the D authentication so idea Fanta

765
00:44:24,319 --> 00:44:29,779
Kate from the network as a management

766
00:44:27,099 --> 00:44:32,750
framework cream sorry or I get

767
00:44:29,780 --> 00:44:35,690
authenticated on the network or I get

768
00:44:32,750 --> 00:44:38,690
associated to the hotspot to this area

769
00:44:35,690 --> 00:44:40,730
here again so this is what I find is

770
00:44:38,690 --> 00:44:42,200
most interesting most of the time

771
00:44:40,730 --> 00:44:44,690
depending on what I need to do by the

772
00:44:42,200 --> 00:44:51,669
modes of the time and then we have type

773
00:44:44,690 --> 00:44:51,670
1 type 1 and type 2 type 1 are

774
00:44:51,900 --> 00:45:02,320
frames of data and time to art control

775
00:44:57,150 --> 00:45:07,390
type 1 are data frames transporting data

776
00:45:02,320 --> 00:45:09,970
to higher layers so it can be Wi-Fi

777
00:45:07,390 --> 00:45:12,310
communication or telegram or whatsapp

778
00:45:09,970 --> 00:45:15,600
whatever you choose that's information

779
00:45:12,310 --> 00:45:18,910
those are packaged data and then control

780
00:45:15,600 --> 00:45:22,029
control are those that say I haven't got

781
00:45:18,910 --> 00:45:26,170
the package send it back to me this

782
00:45:22,030 --> 00:45:29,250
package and that doesn't have a Z key or

783
00:45:26,170 --> 00:45:33,100
RTS DDS

784
00:45:29,250 --> 00:45:35,590
so I'm not interested at all in this and

785
00:45:33,100 --> 00:45:37,810
this is what will be used for here we

786
00:45:35,590 --> 00:45:40,570
will only use 0 which is management the

787
00:45:37,810 --> 00:45:43,120
most interesting ones so what about sup

788
00:45:40,570 --> 00:45:46,450
time as part of the management subtype

789
00:45:43,120 --> 00:45:49,120
which is a so whatever D authentication

790
00:45:46,450 --> 00:45:52,480
from D authentication as is and what a

791
00:45:49,120 --> 00:45:56,080
beacon this is this this is number 8 and

792
00:45:52,480 --> 00:45:58,900
what about a proper request seen whether

793
00:45:56,080 --> 00:46:03,430
my favorite network is available

794
00:45:58,900 --> 00:46:06,250
this is Type four just to name a few and

795
00:46:03,430 --> 00:46:08,830
so with type and subtype we defined what

796
00:46:06,250 --> 00:46:10,690
we are looking for so these are very

797
00:46:08,830 --> 00:46:15,340
important and this is the first thing

798
00:46:10,690 --> 00:46:18,460
that we see with escaping then Diaz we

799
00:46:15,340 --> 00:46:20,920
said dsds is what's wired as we said

800
00:46:18,460 --> 00:46:24,000
when we get a package up in the year and

801
00:46:20,920 --> 00:46:28,300
they say it comes from there T as a

802
00:46:24,000 --> 00:46:30,160
package to one what that saying is that

803
00:46:28,300 --> 00:46:31,810
this is a package up in the air because

804
00:46:30,160 --> 00:46:34,750
I sniffed it up in there

805
00:46:31,810 --> 00:46:39,180
undoubtedly but the destination is the

806
00:46:34,750 --> 00:46:42,100
wired network can be the Gateway and

807
00:46:39,180 --> 00:46:47,890
internet access point that's a package

808
00:46:42,100 --> 00:46:51,069
that has a DTS beat through one and when

809
00:46:47,890 --> 00:46:53,650
you go on line there is a request for

810
00:46:51,070 --> 00:46:57,400
the side but then there is a response if

811
00:46:53,650 --> 00:47:00,070
I get one up in the air from ds1

812
00:46:57,400 --> 00:47:02,470
that means that comes from the Wyatt

813
00:47:00,070 --> 00:47:06,820
Network at the internet for example and

814
00:47:02,470 --> 00:47:09,759
leading to a device on the wire less

815
00:47:06,820 --> 00:47:11,890
part of it so that shows where from and

816
00:47:09,760 --> 00:47:15,070
world the packages I'm going to you from

817
00:47:11,890 --> 00:47:17,350
des and to D s then we see whether it is

818
00:47:15,070 --> 00:47:20,530
fragmented whether it's being broadcast

819
00:47:17,350 --> 00:47:23,589
it or the access point or rather the

820
00:47:20,530 --> 00:47:25,990
client has energy saving right now so it

821
00:47:23,590 --> 00:47:31,120
is suspended that would be the cell

822
00:47:25,990 --> 00:47:33,520
phone I say ended energy saving mode it

823
00:47:31,120 --> 00:47:35,620
only shows the packages in and out if it

824
00:47:33,520 --> 00:47:39,490
is a protected frame which is the

825
00:47:35,620 --> 00:47:41,980
penultimate one it indicates for example

826
00:47:39,490 --> 00:47:44,770
for a protected frame it indicates that

827
00:47:41,980 --> 00:47:49,060
it is encrypted so it's not an open

828
00:47:44,770 --> 00:47:53,680
network that could be a work or WPA or

829
00:47:49,060 --> 00:47:55,810
wpa2 so it is encrypted that means that

830
00:47:53,680 --> 00:47:57,790
the information transported if it's a

831
00:47:55,810 --> 00:48:00,460
one it meant it's encrypted that is

832
00:47:57,790 --> 00:48:04,480
protected frame and then the order that

833
00:48:00,460 --> 00:48:06,040
is a number they though the sequence if

834
00:48:04,480 --> 00:48:09,400
fragmented I'm not interested in that

835
00:48:06,040 --> 00:48:14,020
there but as part of that de section

836
00:48:09,400 --> 00:48:15,550
green side we see the body of the frame

837
00:48:14,020 --> 00:48:18,490
and the frame but is interesting too as

838
00:48:15,550 --> 00:48:20,560
well if it's a big encode is a access

839
00:48:18,490 --> 00:48:24,609
point that keeps on transmitting I would

840
00:48:20,560 --> 00:48:26,860
like to know what's the exit or the s6 D

841
00:48:24,610 --> 00:48:34,030
or the name of the network here it would

842
00:48:26,860 --> 00:48:36,850
be cyber camp y 5x s X 6 D becomes an

843
00:48:34,030 --> 00:48:40,740
information element information element

844
00:48:36,850 --> 00:48:40,740
and that information element

845
00:48:40,930 --> 00:48:50,149
well there is for example 0 which is

846
00:48:46,570 --> 00:48:53,510
SSDs that's the framework frame the

847
00:48:50,150 --> 00:49:00,250
network name and then well I will on the

848
00:48:53,510 --> 00:49:03,350
focus on 0 here just s 64 the network

849
00:49:00,250 --> 00:49:06,770
sorry about this but we also realized

850
00:49:03,350 --> 00:49:09,259
that there was other headers and yes

851
00:49:06,770 --> 00:49:12,080
there were others you can find here such

852
00:49:09,260 --> 00:49:15,230
as radio table Heather which has

853
00:49:12,080 --> 00:49:17,569
information as well as scabby and it

854
00:49:15,230 --> 00:49:21,070
embeds it all information on very

855
00:49:17,570 --> 00:49:23,840
interesting things such as what signal

856
00:49:21,070 --> 00:49:26,750
for the package and that's what why is

857
00:49:23,840 --> 00:49:29,390
it interesting to see if the access

858
00:49:26,750 --> 00:49:32,330
point is closer or further away from me

859
00:49:29,390 --> 00:49:34,580
so based on the signal I get from the

860
00:49:32,330 --> 00:49:37,490
package I see that I am closer or

861
00:49:34,580 --> 00:49:41,509
further away from the network if I want

862
00:49:37,490 --> 00:49:44,540
a signal find in finder now I program it

863
00:49:41,510 --> 00:49:47,030
the only way to get the signal for every

864
00:49:44,540 --> 00:49:50,570
package from an access point or a client

865
00:49:47,030 --> 00:49:53,480
it would be through the rating header

866
00:49:50,570 --> 00:49:57,980
that's where I get the information if

867
00:49:53,480 --> 00:50:00,500
the driver cuts out that layer and it

868
00:49:57,980 --> 00:50:02,900
happens because that your Wi-Fi board

869
00:50:00,500 --> 00:50:05,000
might be poor you never see the signal

870
00:50:02,900 --> 00:50:09,680
of a package I never know whether I'm

871
00:50:05,000 --> 00:50:14,290
far or close for why fit board that

872
00:50:09,680 --> 00:50:14,290
shows interesting information and so

873
00:50:14,650 --> 00:50:22,630
what about this this is the way it looks

874
00:50:17,799 --> 00:50:27,279
like while your shirt shows the parsing

875
00:50:22,630 --> 00:50:29,349
of a package here you have it this is

876
00:50:27,279 --> 00:50:31,660
the package as it is been dissected we

877
00:50:29,349 --> 00:50:38,950
said the packages have several layers I

878
00:50:31,660 --> 00:50:43,420
will use a bit of this all right so this

879
00:50:38,950 --> 00:50:45,519
is a package a half okay and here we

880
00:50:43,420 --> 00:50:48,579
have it isn't bacon is a big thing this

881
00:50:45,519 --> 00:50:52,689
is an access point and that we can frame

882
00:50:48,579 --> 00:50:53,289
has an frame and initially it's framed

883
00:50:52,690 --> 00:50:55,690
one

884
00:50:53,289 --> 00:50:57,999
this is capture information but if I

885
00:50:55,690 --> 00:51:03,460
move on to the second fill this is Radio

886
00:50:57,999 --> 00:51:06,490
top Heather radios have heather it has

887
00:51:03,460 --> 00:51:09,279
not been filled because this package

888
00:51:06,490 --> 00:51:12,459
have built it myself it is not real it

889
00:51:09,279 --> 00:51:16,509
is not an access point so I added a

890
00:51:12,460 --> 00:51:19,380
generic one very generic to send it up

891
00:51:16,509 --> 00:51:22,299
in the year but once we capture any

892
00:51:19,380 --> 00:51:25,180
bucket the radiative will feed us all

893
00:51:22,299 --> 00:51:29,319
that information as we said before that

894
00:51:25,180 --> 00:51:31,629
could be the signal the channel features

895
00:51:29,319 --> 00:51:37,509
and where it's broadcasting from

896
00:51:31,630 --> 00:51:39,819
so it is a beacon and layer 8 11 we

897
00:51:37,509 --> 00:51:43,359
would say type and subtype same as

898
00:51:39,819 --> 00:51:46,690
before we can go here same as before and

899
00:51:43,359 --> 00:51:49,359
we will see type and subtype type and

900
00:51:46,690 --> 00:51:53,739
subtype so while your Shack shows that

901
00:51:49,359 --> 00:51:57,038
to me as well that would be 8 type 0 8

902
00:51:53,739 --> 00:52:00,369
sub time that's a beacon that's

903
00:51:57,039 --> 00:52:02,940
basically bigan and here we have a frame

904
00:52:00,369 --> 00:52:06,549
control here we have so many flux in it

905
00:52:02,940 --> 00:52:08,920
right so we see the frame control we use

906
00:52:06,549 --> 00:52:11,680
it and we want it broken down by

907
00:52:08,920 --> 00:52:14,680
Wireshark and says version zero not very

908
00:52:11,680 --> 00:52:17,980
interesting that I said type zeros up

909
00:52:14,680 --> 00:52:21,190
type a so I know it is a beacon

910
00:52:17,980 --> 00:52:26,050
and what other flags are there TS and

911
00:52:21,190 --> 00:52:29,280
well and it says D s is 0 for from D s

912
00:52:26,050 --> 00:52:32,320
and to D s both are 0 and a why is that

913
00:52:29,280 --> 00:52:34,960
because these frame here is not moving

914
00:52:32,320 --> 00:52:38,260
to the wire side or is not coming from

915
00:52:34,960 --> 00:52:40,119
that wired part so it's bacon to the air

916
00:52:38,260 --> 00:52:44,800
and it would always stay up in the air

917
00:52:40,119 --> 00:52:48,700
so the D s is 0 on front

918
00:52:44,800 --> 00:52:52,660
auntie bells more fragments are not

919
00:52:48,700 --> 00:52:54,700
interested in protected back again 0 so

920
00:52:52,660 --> 00:52:57,640
has not been ciphered it's not been

921
00:52:54,700 --> 00:53:02,680
encrypted and what else do we have that

922
00:52:57,640 --> 00:53:09,609
it is interesting so addresses so source

923
00:53:02,680 --> 00:53:11,348
is a 3 come he's a three come comes a

924
00:53:09,609 --> 00:53:14,319
month it has a manufacturer does a

925
00:53:11,349 --> 00:53:18,339
beacon that seems to be manufactured by

926
00:53:14,320 --> 00:53:21,339
three comes so the source and the

927
00:53:18,339 --> 00:53:23,950
transmitters address because the source

928
00:53:21,339 --> 00:53:25,990
is a beacon that it's sending out in the

929
00:53:23,950 --> 00:53:27,939
air and the transmitter is also an

930
00:53:25,990 --> 00:53:30,790
access point says the same address

931
00:53:27,940 --> 00:53:32,470
who is recessed into everyone it's a

932
00:53:30,790 --> 00:53:34,900
broadcast and why is that because

933
00:53:32,470 --> 00:53:38,290
because are for everyone everyone can

934
00:53:34,900 --> 00:53:40,930
see there is an access point there so if

935
00:53:38,290 --> 00:53:44,079
we move to every other layer as we said

936
00:53:40,930 --> 00:53:49,779
back there we have target parameters and

937
00:53:44,079 --> 00:53:52,569
we said ok tack on exit is zero let's

938
00:53:49,780 --> 00:53:55,980
check it out our table and we saw here

939
00:53:52,569 --> 00:53:59,490
on the green side that these type 0

940
00:53:55,980 --> 00:54:02,410
equals exit so we're dissecting it right

941
00:53:59,490 --> 00:54:04,959
we are already seeing the content and

942
00:54:02,410 --> 00:54:09,848
what's transported by an exit which is

943
00:54:04,960 --> 00:54:11,890
empty because it might be that what

944
00:54:09,849 --> 00:54:15,220
there are some exit points at ha the

945
00:54:11,890 --> 00:54:17,770
exit they haven't hidden exit so they

946
00:54:15,220 --> 00:54:20,078
here but they don't say I'm Cybercom I'm

947
00:54:17,770 --> 00:54:22,509
cyber camp but they just say that if you

948
00:54:20,079 --> 00:54:24,550
know what the name is you get connected

949
00:54:22,510 --> 00:54:27,760
these is of what it means

950
00:54:24,550 --> 00:54:29,410
so this is for us to see how to dissect

951
00:54:27,760 --> 00:54:32,580
a package seen from two different

952
00:54:29,410 --> 00:54:33,700
approaches same from the side of

953
00:54:32,580 --> 00:54:38,740
Wireshark

954
00:54:33,700 --> 00:54:43,980
and now seen as shown to us by it's copy

955
00:54:38,740 --> 00:54:47,350
this copy has a tool which is PDF dump

956
00:54:43,980 --> 00:54:52,570
which gets any package or packages and

957
00:54:47,350 --> 00:54:54,970
prints them just like that and it shows

958
00:54:52,570 --> 00:54:59,800
the de section of the package in a

959
00:54:54,970 --> 00:55:03,730
beautifully displayed way let me watch

960
00:54:59,800 --> 00:55:07,690
it for you this is Ranger tab this is

961
00:55:03,730 --> 00:55:10,960
the reader tab Heather and here we have

962
00:55:07,690 --> 00:55:15,120
type subtype protocol ID which is the

963
00:55:10,960 --> 00:55:18,820
sequence number beacon is Rome and here

964
00:55:15,120 --> 00:55:22,720
on information element zebra there is an

965
00:55:18,820 --> 00:55:25,740
exit transport which is only one F one

966
00:55:22,720 --> 00:55:28,870
cuts the exit transported by this beacon

967
00:55:25,740 --> 00:55:31,779
from an access point which is well the

968
00:55:28,870 --> 00:55:34,319
same is it so we have four fields and we

969
00:55:31,780 --> 00:55:37,720
can produce this initial tool alright

970
00:55:34,320 --> 00:55:39,970
and so the tools shown by it's copy are

971
00:55:37,720 --> 00:55:43,029
practical but if we say print the

972
00:55:39,970 --> 00:55:45,250
package home screen so this would be it

973
00:55:43,030 --> 00:55:46,960
instead of a PDF that you send before

974
00:55:45,250 --> 00:55:49,620
but this is the way that it's

975
00:55:46,960 --> 00:55:54,670
coffeehouse for printing the package and

976
00:55:49,620 --> 00:56:03,460
Ford is a section of the package so

977
00:55:54,670 --> 00:56:05,740
print it and show it to me so this is it

978
00:56:03,460 --> 00:56:08,620
from the front layer so what important

979
00:56:05,740 --> 00:56:10,990
information do we find here so DVM and

980
00:56:08,620 --> 00:56:13,690
signal since I've produced it myself as

981
00:56:10,990 --> 00:56:15,790
a zero there's no signal but usually we

982
00:56:13,690 --> 00:56:17,430
will find a value here inside

983
00:56:15,790 --> 00:56:22,660
such as

984
00:56:17,430 --> 00:56:29,019
- decimals - 70 decibels or 60 minus 6ei

985
00:56:22,660 --> 00:56:31,690
- 50 DBM with circle Punto so if the

986
00:56:29,019 --> 00:56:34,209
access point is very close to me if it's

987
00:56:31,690 --> 00:56:37,119
right next to my computer the value

988
00:56:34,209 --> 00:56:40,839
might be zero but if it's really far

989
00:56:37,119 --> 00:56:42,969
away two buildings away from me and I

990
00:56:40,839 --> 00:56:48,788
just see it from time to time it might

991
00:56:42,969 --> 00:56:53,589
be - 80 - 90 so the closer it is to zero

992
00:56:48,789 --> 00:56:57,180
the better the signal quality here is

993
00:56:53,589 --> 00:57:02,038
where we can see the dissection of the

994
00:56:57,180 --> 00:57:08,348
layer in scaping it says the type is 8

995
00:57:02,039 --> 00:57:10,719
l+ it's type zero close to that and here

996
00:57:08,349 --> 00:57:15,459
are the address the addresses address 1

997
00:57:10,719 --> 00:57:18,640
FF address addresses two and three are

998
00:57:15,459 --> 00:57:21,999
the max for the access point because

999
00:57:18,640 --> 00:57:25,209
it's a beacon the sequence number what

1000
00:57:21,999 --> 00:57:27,578
we can see the layers there it says

1001
00:57:25,209 --> 00:57:31,448
shorts loss that's not interesting

1002
00:57:27,579 --> 00:57:35,829
since SS that means it said an access

1003
00:57:31,449 --> 00:57:39,219
point and it belongs to or it is a Wi-Fi

1004
00:57:35,829 --> 00:57:41,890
network and then it says + privacy that

1005
00:57:39,219 --> 00:57:46,859
means there is encrypting air whichever

1006
00:57:41,890 --> 00:57:50,379
type it is so that's what the package

1007
00:57:46,859 --> 00:57:53,619
impression is like and here we have the

1008
00:57:50,380 --> 00:57:57,609
information elements within the payload

1009
00:57:53,619 --> 00:58:00,999
in the frame body can you see that those

1010
00:57:57,609 --> 00:58:06,549
are the information elements the

1011
00:58:00,999 --> 00:58:15,488
information element called ID s ID

1012
00:58:06,549 --> 00:58:16,930
that's 0 is WL londre f - well that's

1013
00:58:15,489 --> 00:58:20,170
probably enough

1014
00:58:16,930 --> 00:58:22,629
for us to start with our first scrappy

1015
00:58:20,170 --> 00:58:25,300
program but before we do so I want to

1016
00:58:22,630 --> 00:58:28,630
tell you about a script I use so that

1017
00:58:25,300 --> 00:58:30,700
cards can work on monitor mode because

1018
00:58:28,630 --> 00:58:33,550
when you first plug it in it's on

1019
00:58:30,700 --> 00:58:38,230
manager mode to connect to a Wi-Fi

1020
00:58:33,550 --> 00:58:41,140
network the monitor mode is for hackers

1021
00:58:38,230 --> 00:58:43,720
so it doesn't come by default on that

1022
00:58:41,140 --> 00:58:47,109
mode you need to manually set it for

1023
00:58:43,720 --> 00:58:50,560
monitor mode there's the monitor as h

1024
00:58:47,110 --> 00:58:54,250
that does that with me yeah I will show

1025
00:58:50,560 --> 00:58:57,490
you that in a minute and the Sh monitor

1026
00:58:54,250 --> 00:59:03,250
does this let's launch it so you can see

1027
00:58:57,490 --> 00:59:07,209
it monitor Sh you first blog your Wi-Fi

1028
00:59:03,250 --> 00:59:10,540
cards into the Wi-Fi I have three cards

1029
00:59:07,210 --> 00:59:14,170
I have my Intel I have a little one

1030
00:59:10,540 --> 00:59:17,050
which is like a toy card I'll pull it

1031
00:59:14,170 --> 00:59:18,940
out and show you in a second it's very

1032
00:59:17,050 --> 00:59:23,710
small it looks a bit like a pen drive

1033
00:59:18,940 --> 00:59:26,320
and then my tp-link the aterrorist one I

1034
00:59:23,710 --> 00:59:29,590
mentioned earlier so I can work with all

1035
00:59:26,320 --> 00:59:33,310
three of them on a monitor mode at the

1036
00:59:29,590 --> 00:59:36,060
same time as the beauty of what I'm

1037
00:59:33,310 --> 00:59:39,370
showing you all three on monitor mode

1038
00:59:36,060 --> 00:59:40,740
stopping the necessary services I run

1039
00:59:39,370 --> 00:59:45,390
that and it says

1040
00:59:40,740 --> 00:59:48,790
disabling the flight mode because mobile

1041
00:59:45,390 --> 00:59:52,240
laptops also have that these days then

1042
00:59:48,790 --> 00:59:55,360
it stops any conflicting services on

1043
00:59:52,240 --> 00:59:59,529
Linux that go against them monitor mode

1044
00:59:55,360 --> 01:00:03,340
that means any service that modifies

1045
00:59:59,530 --> 01:00:07,140
anything that has to do with Wi-Fi as no

1046
01:00:03,340 --> 01:00:11,920
good for hacking right for instance the

1047
01:00:07,140 --> 01:00:15,850
WPA for Wi-Fi connections or the Wi-Fi

1048
01:00:11,920 --> 01:00:19,660
manager a typical button that connects

1049
01:00:15,850 --> 01:00:23,230
to the Wi-Fi network graphically that

1050
01:00:19,660 --> 01:00:25,750
can't be on because it will be a bother

1051
01:00:23,230 --> 01:00:28,390
anything that touches the Wi-Fi card has

1052
01:00:25,750 --> 01:00:29,730
to be disabled because I want to be in

1053
01:00:28,390 --> 01:00:32,960
control

1054
01:00:29,730 --> 01:00:36,780
and then he says geographic mode

1055
01:00:32,960 --> 01:00:39,630
changing to be oh that's Bolivia why

1056
01:00:36,780 --> 01:00:42,960
because it's a country that allows for

1057
01:00:39,630 --> 01:00:46,080
more transmission power than other

1058
01:00:42,960 --> 01:00:49,110
countries so the system will think I'm

1059
01:00:46,080 --> 01:00:52,290
in Bolivia so that I can transmit with

1060
01:00:49,110 --> 01:00:58,800
more power and then it says a monitor

1061
01:00:52,290 --> 01:01:03,900
but being created as a physical card

1062
01:00:58,800 --> 01:01:07,080
three channel 11 so that all my cards

1063
01:01:03,900 --> 01:01:10,140
will then be located on channel 11

1064
01:01:07,080 --> 01:01:13,350
because I want to talk from one to

1065
01:01:10,140 --> 01:01:15,810
another there's that they both should be

1066
01:01:13,350 --> 01:01:18,150
on the same same channel otherwise

1067
01:01:15,810 --> 01:01:21,779
communication would be impossible I

1068
01:01:18,150 --> 01:01:25,080
can't be making a program and have one

1069
01:01:21,780 --> 01:01:28,140
card on two different channels they

1070
01:01:25,080 --> 01:01:31,620
should both be on one or channel 111

1071
01:01:28,140 --> 01:01:34,710
five whatever but both of them on the

1072
01:01:31,620 --> 01:01:38,220
same channel this script gets all the

1073
01:01:34,710 --> 01:01:41,160
cards to be on the same channel so if I

1074
01:01:38,220 --> 01:01:43,799
press stop here it would be quite the

1075
01:01:41,160 --> 01:01:47,490
opposite it would start again the Wi-Fi

1076
01:01:43,800 --> 01:01:50,670
services it would get rid of monitors

1077
01:01:47,490 --> 01:01:53,120
and it would again create normal cards

1078
01:01:50,670 --> 01:01:57,300
so I can connect up to the Internet you

1079
01:01:53,120 --> 01:02:00,810
see normal cards connected if I run it

1080
01:01:57,300 --> 01:02:04,550
again without stop again I have all

1081
01:02:00,810 --> 01:02:07,350
three monitors for the three Wi-Fi cards

1082
01:02:04,550 --> 01:02:09,960
why am i doing it again because I like

1083
01:02:07,350 --> 01:02:10,410
seeing this I do but that's not the

1084
01:02:09,960 --> 01:02:14,880
reason

1085
01:02:10,410 --> 01:02:16,740
look what he's doing now it you couldn't

1086
01:02:14,880 --> 01:02:20,310
see that earlier because the monitors

1087
01:02:16,740 --> 01:02:26,330
were activated right so the first card

1088
01:02:20,310 --> 01:02:29,820
mon0 has a allocated a randomly Cisco as

1089
01:02:26,330 --> 01:02:32,520
manufacturer manufacturer and - and

1090
01:02:29,820 --> 01:02:36,760
other manufacturers a - for the other

1091
01:02:32,520 --> 01:02:40,150
two cards so I have faked the Mac

1092
01:02:36,760 --> 01:02:42,369
for all my cards I'm a hacker right so I

1093
01:02:40,150 --> 01:02:46,080
might as well do this I can't go and

1094
01:02:42,369 --> 01:02:52,720
attack somebody and say hey this is my

1095
01:02:46,080 --> 01:02:53,799
public if I'm going to the pen test

1096
01:02:52,720 --> 01:02:56,379
whatever

1097
01:02:53,800 --> 01:02:59,260
I'm never going to expose my original

1098
01:02:56,380 --> 01:03:04,330
Mac or my Wi-Fi card because otherwise

1099
01:02:59,260 --> 01:03:07,060
that could be traced back to me your MAC

1100
01:03:04,330 --> 01:03:09,850
address it can be traced remember that

1101
01:03:07,060 --> 01:03:15,549
so I changed that on all my cards I

1102
01:03:09,850 --> 01:03:18,759
showed you how I get rid of W LAN 0 2

1103
01:03:15,550 --> 01:03:22,270
and 14 that work not a monitor but

1104
01:03:18,760 --> 01:03:25,510
manager mode and I create the other

1105
01:03:22,270 --> 01:03:28,240
three months so here are my three cards

1106
01:03:25,510 --> 01:03:32,500
a on monitor mode for me to use whenever

1107
01:03:28,240 --> 01:03:34,899
a good hacker would then check if my

1108
01:03:32,500 --> 01:03:38,250
monitor mode card can work with

1109
01:03:34,900 --> 01:03:42,850
injection or not so let's check that

1110
01:03:38,250 --> 01:03:45,540
will will it inject one zero well ID

1111
01:03:42,850 --> 01:03:49,750
[Music]

1112
01:03:45,540 --> 01:03:53,830
which card am i testing one zero just

1113
01:03:49,750 --> 01:03:57,340
one single step and it's already it's

1114
01:03:53,830 --> 01:04:01,560
now saying it found two access points

1115
01:03:57,340 --> 01:04:05,230
and it's going to try and inject with

1116
01:04:01,560 --> 01:04:07,330
packages transferred to those access

1117
01:04:05,230 --> 01:04:08,910
points to see if there is a response and

1118
01:04:07,330 --> 01:04:13,890
funnily enough

1119
01:04:08,910 --> 01:04:17,649
Paco pepper is on channel 11 and PRN to

1120
01:04:13,890 --> 01:04:20,950
those two guys have not replied 30

1121
01:04:17,650 --> 01:04:25,480
packages have been sent and no response

1122
01:04:20,950 --> 01:04:28,029
so my feeling is this card is not good

1123
01:04:25,480 --> 01:04:31,990
at injection let's check another one

1124
01:04:28,030 --> 01:04:35,619
another card the white one my white card

1125
01:04:31,990 --> 01:04:39,160
the at errors one you see that would be

1126
01:04:35,619 --> 01:04:41,830
Mon - so I'm going to ask Mon - and

1127
01:04:39,160 --> 01:04:46,399
straightaway he tells me hey injection

1128
01:04:41,830 --> 01:04:48,558
is working great injection is working

1129
01:04:46,400 --> 01:04:51,619
but there's more than that you see

1130
01:04:48,559 --> 01:04:57,500
injection is working successfully with

1131
01:04:51,619 --> 01:05:01,039
good coverage great that's that done now

1132
01:04:57,500 --> 01:05:05,630
I can tell it to check if injection is

1133
01:05:01,039 --> 01:05:10,069
perfect or not quite so inject from one

1134
01:05:05,630 --> 01:05:10,640
too I'm saying now to Mon what was it 3

1135
01:05:10,069 --> 01:05:14,058
or 1

1136
01:05:10,640 --> 01:05:19,150
let's check is 1 3 the next one so

1137
01:05:14,059 --> 01:05:21,650
please inject from 1 to 2 1 3

1138
01:05:19,150 --> 01:05:23,930
transmitting through one receiving

1139
01:05:21,650 --> 01:05:27,049
receiving through the other thus

1140
01:05:23,930 --> 01:05:30,259
injecting fine going ahead fine on

1141
01:05:27,049 --> 01:05:34,940
channel 11 logically all access points

1142
01:05:30,260 --> 01:05:37,490
found on channel 11 or the ones along

1143
01:05:34,940 --> 01:05:41,809
one more movie star what I found

1144
01:05:37,490 --> 01:05:45,229
well a long list of them I just want to

1145
01:05:41,809 --> 01:05:48,829
wait and get to the end of this because

1146
01:05:45,230 --> 01:05:51,829
look what it does as the last step he

1147
01:05:48,829 --> 01:05:55,279
says I'm trying I'm going to try an

1148
01:05:51,829 --> 01:06:00,440
inject card by card launching different

1149
01:05:55,279 --> 01:06:07,339
attacks and then it says hey type zero

1150
01:06:00,440 --> 01:06:11,230
worked type 1 worked open with PSK but

1151
01:06:07,339 --> 01:06:15,920
two three four and six worked well and

1152
01:06:11,230 --> 01:06:18,950
what didn't work five and seven that

1153
01:06:15,920 --> 01:06:22,369
tells me that not all cards work the

1154
01:06:18,950 --> 01:06:25,368
same so if you have a card with

1155
01:06:22,369 --> 01:06:27,619
monitored mode that works with injection

1156
01:06:25,369 --> 01:06:32,180
please check because they can't all

1157
01:06:27,619 --> 01:06:35,059
inject any package it's important then

1158
01:06:32,180 --> 01:06:38,990
to have the right hardware depending on

1159
01:06:35,059 --> 01:06:45,020
every situation so this is what monitor

1160
01:06:38,990 --> 01:06:47,689
sh does this is my script that I use

1161
01:06:45,020 --> 01:06:50,310
that I'm sharing with you today and it

1162
01:06:47,690 --> 01:06:53,550
can work with two three ten

1163
01:06:50,310 --> 01:06:57,210
cards Wi-Fi cards they will all work

1164
01:06:53,550 --> 01:06:59,970
with monitor SH we could look at that

1165
01:06:57,210 --> 01:07:04,260
code in more detail but let's skip that

1166
01:06:59,970 --> 01:07:07,379
because I want to work now on scrappy

1167
01:07:04,260 --> 01:07:10,100
with programming starting from the

1168
01:07:07,380 --> 01:07:13,770
beginning to the end with a real example

1169
01:07:10,100 --> 01:07:19,759
my first program on Scotty then here we

1170
01:07:13,770 --> 01:07:22,860
have the initial lines the first one

1171
01:07:19,760 --> 01:07:26,910
defines and says this is a Python script

1172
01:07:22,860 --> 01:07:30,750
it tells me which Python version I'm

1173
01:07:26,910 --> 01:07:36,089
using 2.7 in my environment and you need

1174
01:07:30,750 --> 01:07:39,350
to use what UTF coding because that will

1175
01:07:36,090 --> 01:07:43,850
allow me to find access points with say

1176
01:07:39,350 --> 01:07:45,930
Chinese exceeds or exceeds in Arabic

1177
01:07:43,850 --> 01:07:49,920
because there are different types of

1178
01:07:45,930 --> 01:07:53,180
coding I could have a Chinese exit or

1179
01:07:49,920 --> 01:07:58,460
one in Spanish with different alphabets

1180
01:07:53,180 --> 01:08:00,779
utf-8 normally allows for different for

1181
01:07:58,460 --> 01:08:03,360
encapsulation in different languages

1182
01:08:00,780 --> 01:08:05,670
with different codes so it's important

1183
01:08:03,360 --> 01:08:08,370
for you to tell Python to use that and

1184
01:08:05,670 --> 01:08:13,340
this is the first line of my program

1185
01:08:08,370 --> 01:08:17,309
programming from clapping Scapa orc

1186
01:08:13,340 --> 01:08:20,040
import asterisk that means library with

1187
01:08:17,310 --> 01:08:23,040
all the functions and classes is that

1188
01:08:20,040 --> 01:08:25,229
ideal what is not big but because this

1189
01:08:23,040 --> 01:08:27,870
is a foundation lesson

1190
01:08:25,229 --> 01:08:30,660
I'm not going to confuse you and say oh

1191
01:08:27,870 --> 01:08:34,170
let's just imports their functions that

1192
01:08:30,660 --> 01:08:36,479
we are interested in in those libraries

1193
01:08:34,170 --> 01:08:39,180
now that would be a bit too complex

1194
01:08:36,479 --> 01:08:43,379
let's pretend we're idiots and import it

1195
01:08:39,180 --> 01:08:46,680
all if you if I at the end of the day I

1196
01:08:43,380 --> 01:08:50,190
would import a just part of that but I'm

1197
01:08:46,680 --> 01:08:53,199
now going to import all of escaping then

1198
01:08:50,189 --> 01:08:57,638
I would create a list

1199
01:08:53,198 --> 01:09:02,339
an empty list that I I call up a list

1200
01:08:57,639 --> 01:09:07,059
API list say a single dimension

1201
01:09:02,339 --> 01:09:10,179
operation I then add access point that I

1202
01:09:07,059 --> 01:09:14,829
find on the way I would add them to that

1203
01:09:10,179 --> 01:09:18,429
list for instance I would add a Mac to

1204
01:09:14,828 --> 01:09:21,608
the list and next time I see it I

1205
01:09:18,429 --> 01:09:24,509
wouldn't be passing it again I just pass

1206
01:09:21,609 --> 01:09:29,279
it once that's why I need this list

1207
01:09:24,509 --> 01:09:32,380
because packages and beacons are

1208
01:09:29,279 --> 01:09:35,079
transferred all the time saying hey I'm

1209
01:09:32,380 --> 01:09:37,659
here maybe 10 times in second and I

1210
01:09:35,078 --> 01:09:41,469
don't want to see 10 times and second

1211
01:09:37,658 --> 01:09:43,538
saying hey I found this I just want to

1212
01:09:41,469 --> 01:09:47,788
see see it once

1213
01:09:43,538 --> 01:09:47,788
that's why I've added ap to the list

1214
01:09:53,459 --> 01:10:06,369
right let's go to the end now it says

1215
01:09:59,709 --> 01:10:10,989
defy function on Python you use death so

1216
01:10:06,369 --> 01:10:14,079
def packet handler that's what I say and

1217
01:10:10,989 --> 01:10:16,690
leave it at that because the program

1218
01:10:14,079 --> 01:10:20,079
sequence would then start on the last

1219
01:10:16,690 --> 01:10:26,860
line after importing this copy library

1220
01:10:20,079 --> 01:10:28,989
and starting with my IP RAI it would

1221
01:10:26,860 --> 01:10:32,228
start on the last function which is this

1222
01:10:28,989 --> 01:10:35,678
knipfing function for python because

1223
01:10:32,229 --> 01:10:38,739
python can sniff right how through this

1224
01:10:35,679 --> 01:10:42,760
knipfing function it doesn't matter if

1225
01:10:38,739 --> 01:10:45,400
it's either net or a 802 dot double 1 or

1226
01:10:42,760 --> 01:10:48,880
whatever and we're well on whatever

1227
01:10:45,400 --> 01:10:52,780
interface i tell it to do it might be

1228
01:10:48,880 --> 01:10:56,050
Wi-Fi or Ethernet sniffing everything

1229
01:10:52,780 --> 01:10:58,570
that goes through Ethernet because

1230
01:10:56,050 --> 01:11:02,050
sniffing is a universal function and I

1231
01:10:58,570 --> 01:11:04,499
need to define which interface it needs

1232
01:11:02,050 --> 01:11:04,499
to do

1233
01:11:05,000 --> 01:11:15,030
in this case the internal card on my

1234
01:11:08,310 --> 01:11:18,240
laptop and I then define a function so

1235
01:11:15,030 --> 01:11:21,809
that every package it finds one by one

1236
01:11:18,240 --> 01:11:25,110
it will be transferred to the function I

1237
01:11:21,810 --> 01:11:29,310
tell it to use for instance the packet

1238
01:11:25,110 --> 01:11:32,190
handler function being code 100 times

1239
01:11:29,310 --> 01:11:35,490
which is really practical when you

1240
01:11:32,190 --> 01:11:37,950
manage packages hey this is a package is

1241
01:11:35,490 --> 01:11:42,179
it mine I'll process it if it's not mine

1242
01:11:37,950 --> 01:11:45,269
I'll skip it that's the type of filter

1243
01:11:42,180 --> 01:11:48,240
we'll be applying a package that's found

1244
01:11:45,270 --> 01:11:50,310
up in the air and I need to decide if I

1245
01:11:48,240 --> 01:11:56,700
need to filter it filter it or not

1246
01:11:50,310 --> 01:12:01,920
that's the packet handler function here

1247
01:11:56,700 --> 01:12:09,360
it is define the packet handler function

1248
01:12:01,920 --> 01:12:11,610
in the argument Scotty and sniff that's

1249
01:12:09,360 --> 01:12:13,080
the package a package is an object with

1250
01:12:11,610 --> 01:12:16,410
a number of different fields that's

1251
01:12:13,080 --> 01:12:20,880
what's KP does for us defining the

1252
01:12:16,410 --> 01:12:23,910
package with origin destination type of

1253
01:12:20,880 --> 01:12:28,680
package subtype and so on and then I can

1254
01:12:23,910 --> 01:12:30,590
ask my object my package where is your

1255
01:12:28,680 --> 01:12:37,080
destination and it will tell me it's

1256
01:12:30,590 --> 01:12:40,680
ffff whatever so this is what we do

1257
01:12:37,080 --> 01:12:50,949
first this is a great initial filter so

1258
01:12:40,680 --> 01:12:54,460
that if the packet has layer dot 11 then

1259
01:12:50,949 --> 01:12:57,009
go ahead with it if it is not then

1260
01:12:54,460 --> 01:12:57,760
please discard it and continue with the

1261
01:12:57,010 --> 01:13:10,480
next one

1262
01:12:57,760 --> 01:13:13,480
there's a first filter so is a packet

1263
01:13:10,480 --> 01:13:16,000
is subtype number ace then that's a

1264
01:13:13,480 --> 01:13:20,349
beacon well that's a good one right I'm

1265
01:13:16,000 --> 01:13:23,290
interested in that then I say if address

1266
01:13:20,350 --> 01:13:29,920
number two on the packet which is the

1267
01:13:23,290 --> 01:13:35,650
origin right if it's not on your route

1268
01:13:29,920 --> 01:13:37,840
list of AP then please continue why is

1269
01:13:35,650 --> 01:13:41,469
that because the first time round it

1270
01:13:37,840 --> 01:13:42,489
will go through but because I've added

1271
01:13:41,470 --> 01:13:46,630
it to my list

1272
01:13:42,489 --> 01:13:51,730
then you won't the second time it finds

1273
01:13:46,630 --> 01:13:58,480
it then it says then it adds address

1274
01:13:51,730 --> 01:14:03,400
number 2 to the AP list so the next time

1275
01:13:58,480 --> 01:14:06,429
round it won't be going in then it says

1276
01:14:03,400 --> 01:14:08,860
what do you need to do well I want to

1277
01:14:06,430 --> 01:14:12,400
show on the screen that I found a

1278
01:14:08,860 --> 01:14:16,540
package like this this is my first Wi-Fi

1279
01:14:12,400 --> 01:14:20,549
scanner and the field will be address

1280
01:14:16,540 --> 01:14:25,480
number two that's the access point Mac

1281
01:14:20,550 --> 01:14:30,310
and then package dot info that's the

1282
01:14:25,480 --> 01:14:34,379
exit that's it so let's test it and see

1283
01:14:30,310 --> 01:14:39,850
if it works so we go here and we say

1284
01:14:34,380 --> 01:14:43,660
server pay scrappy test which is Python

1285
01:14:39,850 --> 01:14:47,260
now we'll run that and this is my first

1286
01:14:43,660 --> 01:14:50,739
Wi-Fi scanner finding on channel 11

1287
01:14:47,260 --> 01:14:55,000
which is where I am one two three four

1288
01:14:50,739 --> 01:14:58,429
five six seven access points so far my

1289
01:14:55,000 --> 01:15:04,150
first Wi-Fi scanner

1290
01:14:58,430 --> 01:15:05,930
in just 10 code lines I've got my own

1291
01:15:04,150 --> 01:15:09,110
Wi-Fi scanner

1292
01:15:05,930 --> 01:15:12,800
it's Python programmer programming

1293
01:15:09,110 --> 01:15:15,830
simple it is if you know your protocol

1294
01:15:12,800 --> 01:15:19,750
if you know what you're doing so let's

1295
01:15:15,830 --> 01:15:19,750
continue then with the next program

1296
01:15:20,020 --> 01:15:26,870
that's the title of the conference

1297
01:15:22,700 --> 01:15:32,660
really my conference today this is a

1298
01:15:26,870 --> 01:15:36,769
program that has a client and a server

1299
01:15:32,660 --> 01:15:41,000
and then what I need to do let's imagine

1300
01:15:36,770 --> 01:15:46,460
this screen here is my server and here

1301
01:15:41,000 --> 01:15:49,070
on my right I have a my client my server

1302
01:15:46,460 --> 01:15:51,320
is my data center and I need to

1303
01:15:49,070 --> 01:15:53,059
communicate with it in a safe manner and

1304
01:15:51,320 --> 01:15:55,849
with nobody knowing that I'm

1305
01:15:53,060 --> 01:15:58,430
communicating with it how can I do that

1306
01:15:55,850 --> 01:16:01,340
and how can I make my communications

1307
01:15:58,430 --> 01:16:04,880
protocol safe well I give it a script

1308
01:16:01,340 --> 01:16:10,400
server pay and then my station I give

1309
01:16:04,880 --> 01:16:13,880
the other one the server will just

1310
01:16:10,400 --> 01:16:16,490
listen sniff the traffic the Wi-Fi card

1311
01:16:13,880 --> 01:16:19,490
traffic and then the client would send

1312
01:16:16,490 --> 01:16:21,410
requests so the server can respond as

1313
01:16:19,490 --> 01:16:29,870
how the infrastructure works with the

1314
01:16:21,410 --> 01:16:33,200
client and the server because at the end

1315
01:16:29,870 --> 01:16:37,660
of the day is a shell waiting for me to

1316
01:16:33,200 --> 01:16:43,130
tell it what it needs to do I say find a

1317
01:16:37,660 --> 01:16:46,309
bicone at frames beacon frames for a

1318
01:16:43,130 --> 01:16:50,120
specific MAC which one I don't care I

1319
01:16:46,310 --> 01:16:53,240
make my packets so let's pretend the Mac

1320
01:16:50,120 --> 01:16:56,990
is like a secret code that this server

1321
01:16:53,240 --> 01:17:01,099
and the client need to comply with so if

1322
01:16:56,990 --> 01:17:03,080
they both use the same Mac it's all fine

1323
01:17:01,100 --> 01:17:06,800
because I'm gonna make up the Mac right

1324
01:17:03,080 --> 01:17:08,010
I'm going to call it o 1 o 2 O 3 of 4 o

1325
01:17:06,800 --> 01:17:11,730
5

1326
01:17:08,010 --> 01:17:13,710
so my my Mac will allow for

1327
01:17:11,730 --> 01:17:17,549
communication between the client and the

1328
01:17:13,710 --> 01:17:22,710
server so when the beacon gets to the

1329
01:17:17,550 --> 01:17:25,470
destination and then it runs well the

1330
01:17:22,710 --> 01:17:28,070
client sends a beacon to the server is

1331
01:17:25,470 --> 01:17:32,580
that weird why do you why do I use a

1332
01:17:28,070 --> 01:17:35,280
bacon I could be using anything a beacon

1333
01:17:32,580 --> 01:17:38,040
just as anything else it could be any

1334
01:17:35,280 --> 01:17:39,349
type of frame I decided to use a beacon

1335
01:17:38,040 --> 01:17:44,340
fair enough

1336
01:17:39,350 --> 01:17:47,280
and then where can I insert what I want

1337
01:17:44,340 --> 01:17:50,510
to transport which is my command for

1338
01:17:47,280 --> 01:17:54,509
instance an LS of the content of a

1339
01:17:50,510 --> 01:17:58,790
directory LS that would be my payload

1340
01:17:54,510 --> 01:18:03,710
that will be inserted into a big bacon

1341
01:17:58,790 --> 01:18:06,960
the client will send it the server is

1342
01:18:03,710 --> 01:18:09,510
sniffing out for beacons with a

1343
01:18:06,960 --> 01:18:16,590
particular Mac everything else is going

1344
01:18:09,510 --> 01:18:20,190
to discard right so once the payload the

1345
01:18:16,590 --> 01:18:24,390
contents of that beacon the LS is

1346
01:18:20,190 --> 01:18:28,530
extracted and then that commands exit

1347
01:18:24,390 --> 01:18:32,130
will go to the client within a prompt

1348
01:18:28,530 --> 01:18:35,340
request why well just because I just

1349
01:18:32,130 --> 01:18:39,180
like prompt requests but it could be any

1350
01:18:35,340 --> 01:18:43,290
other frame this is how it works it goes

1351
01:18:39,180 --> 01:18:46,170
to that particular Mac that's the target

1352
01:18:43,290 --> 01:18:49,760
and this is a proof of concept it's not

1353
01:18:46,170 --> 01:18:57,030
a commercial tool right this is just a

1354
01:18:49,760 --> 01:19:00,300
PLC so the maximum size of the MTU has

1355
01:18:57,030 --> 01:19:04,650
to be a reasonable size because you

1356
01:19:00,300 --> 01:19:07,200
wouldn't fit on a prompt request the

1357
01:19:04,650 --> 01:19:10,489
maximum size is the size of the package

1358
01:19:07,200 --> 01:19:13,470
it has to be encapsulated within

1359
01:19:10,489 --> 01:19:15,150
different fields in the package so it

1360
01:19:13,470 --> 01:19:18,870
can get to the other end

1361
01:19:15,150 --> 01:19:21,540
then what would the client do the client

1362
01:19:18,870 --> 01:19:24,659
has a shell I will show you right now it

1363
01:19:21,540 --> 01:19:28,769
reads the user entry for instance if I

1364
01:19:24,659 --> 01:19:31,620
say LS so that's what Python reads LS

1365
01:19:28,770 --> 01:19:35,040
what does it do with the LS well it

1366
01:19:31,620 --> 01:19:38,429
encapsulates it within a beacon it sends

1367
01:19:35,040 --> 01:19:46,199
it to a Mac particular Mac as a beacon

1368
01:19:38,429 --> 01:19:50,850
and then it stands and sniffs the exit

1369
01:19:46,199 --> 01:19:54,659
of the command it's running when it gets

1370
01:19:50,850 --> 01:19:57,870
the frame it's extracted as five

1371
01:19:54,659 --> 01:19:59,699
different information elements we will

1372
01:19:57,870 --> 01:20:02,219
see that in the package and why is it

1373
01:19:59,699 --> 01:20:08,460
five because the maximum size for an

1374
01:20:02,219 --> 01:20:10,409
information element is 256 bytes I need

1375
01:20:08,460 --> 01:20:13,040
to cut it into different fragments

1376
01:20:10,409 --> 01:20:18,150
fragments I can't have it whole and

1377
01:20:13,040 --> 01:20:18,960
coded encoded on 64 base because that's

1378
01:20:18,150 --> 01:20:22,409
practical

1379
01:20:18,960 --> 01:20:26,219
it could be binary but anyhow that's

1380
01:20:22,409 --> 01:20:30,570
that's what we'll do here we can see an

1381
01:20:26,219 --> 01:20:33,810
example of how the building of the

1382
01:20:30,570 --> 01:20:38,780
server works because what the server

1383
01:20:33,810 --> 01:20:43,890
does is encapsulate exciting captivating

1384
01:20:38,780 --> 01:20:46,860
the commands the what fields here in the

1385
01:20:43,890 --> 01:20:55,260
information elements there you have it

1386
01:20:46,860 --> 01:20:59,040
0 1 2 3 4 that says base64 third part

1387
01:20:55,260 --> 01:21:02,370
first part base64 second part and so on

1388
01:20:59,040 --> 01:21:05,580
so that it can be encapsulated and

1389
01:21:02,370 --> 01:21:09,239
caught in two different fragments which

1390
01:21:05,580 --> 01:21:13,409
are 256 bytes each and that's what their

1391
01:21:09,239 --> 01:21:17,159
package contains that's it so what would

1392
01:21:13,409 --> 01:21:21,070
the client do you ask it for an LS and

1393
01:21:17,159 --> 01:21:24,400
where would that be included here

1394
01:21:21,070 --> 01:21:26,410
an information element and why is it LS

1395
01:21:24,400 --> 01:21:33,670
just because it could be could have been

1396
01:21:26,410 --> 01:21:41,080
anything else from 250 56 it could have

1397
01:21:33,670 --> 01:21:45,070
been any number if I have a monitor mode

1398
01:21:41,080 --> 01:21:46,240
card which works fine I don't care if it

1399
01:21:45,070 --> 01:21:51,429
doesn't comply with these standards

1400
01:21:46,240 --> 01:21:56,590
right let's have a look let's run a demo

1401
01:21:51,430 --> 01:21:58,920
and see how it works right my cards my

1402
01:21:56,590 --> 01:22:05,620
good cards are monk

1403
01:21:58,920 --> 01:22:16,960
one two and more one three the zero one

1404
01:22:05,620 --> 01:22:21,660
it didn't work Mon Tue mo n - so I'm

1405
01:22:16,960 --> 01:22:26,290
going to run the server now on Mon three

1406
01:22:21,660 --> 01:22:28,900
sniffing the server is down below at the

1407
01:22:26,290 --> 01:22:31,980
bottom you can see on the screen and

1408
01:22:28,900 --> 01:22:35,710
what do the server do well sniffing

1409
01:22:31,980 --> 01:22:38,259
traffic for the packet and what is

1410
01:22:35,710 --> 01:22:41,560
happening at the top up above well I

1411
01:22:38,260 --> 01:22:47,500
have my shell there and if it works okay

1412
01:22:41,560 --> 01:22:52,510
I will do LS and then down below I will

1413
01:22:47,500 --> 01:22:56,370
see how it's receiving SLS it

1414
01:22:52,510 --> 01:23:01,140
encapsulates that responds and then

1415
01:22:56,370 --> 01:23:06,849
transmits transmits it to the client

1416
01:23:01,140 --> 01:23:09,760
here I say with another command LS at

1417
01:23:06,850 --> 01:23:13,350
the top and then down below it would

1418
01:23:09,760 --> 01:23:17,290
show is the same thing a client-server

1419
01:23:13,350 --> 01:23:19,960
and I can do this with different

1420
01:23:17,290 --> 01:23:22,660
commands well depending on the size as

1421
01:23:19,960 --> 01:23:25,630
well I could transmit different prompt

1422
01:23:22,660 --> 01:23:30,790
requests and beacons so I could have a

1423
01:23:25,630 --> 01:23:32,950
very large packet if I was manufacturing

1424
01:23:30,790 --> 01:23:33,810
producing something but is I'm not this

1425
01:23:32,950 --> 01:23:36,570
is a

1426
01:23:33,810 --> 01:23:53,700
roof of concept if if I do a very large

1427
01:23:36,570 --> 01:23:56,219
LS for instance user bin and there's a D

1428
01:23:53,700 --> 01:23:58,500
at the end that's the most it can give

1429
01:23:56,220 --> 01:24:02,160
me why because is there proof of concept

1430
01:23:58,500 --> 01:24:04,950
so is limited so for you to see more

1431
01:24:02,160 --> 01:24:09,840
information at least now exit the

1432
01:24:04,950 --> 01:24:15,990
program so I can make the program look

1433
01:24:09,840 --> 01:24:19,410
like a bug I have a number of verbose

1434
01:24:15,990 --> 01:24:22,860
molds you see one two and three and here

1435
01:24:19,410 --> 01:24:25,889
we can see the Mac they both use for

1436
01:24:22,860 --> 01:24:28,980
communications as long as the client and

1437
01:24:25,890 --> 01:24:31,710
the server use the same one for

1438
01:24:28,980 --> 01:24:36,179
communication purposes let's go for

1439
01:24:31,710 --> 01:24:38,210
verbosity one for the client and the

1440
01:24:36,180 --> 01:24:43,230
same thing for the server

1441
01:24:38,210 --> 01:24:46,020
here the boss city is a Mac right you

1442
01:24:43,230 --> 01:24:49,049
can see that down below verbosity one

1443
01:24:46,020 --> 01:24:54,420
again and let's see what they both show

1444
01:24:49,050 --> 01:24:58,680
us this one is sniffing and this one is

1445
01:24:54,420 --> 01:25:00,780
transmitting let me just refresh the

1446
01:24:58,680 --> 01:25:09,810
screen so that you can see it better up

1447
01:25:00,780 --> 01:25:13,110
above here I do our s run LS and because

1448
01:25:09,810 --> 01:25:15,240
I don't know if all the packets will get

1449
01:25:13,110 --> 01:25:18,990
to their destination I'm going to set of

1450
01:25:15,240 --> 01:25:21,059
ten because some might be discarded down

1451
01:25:18,990 --> 01:25:22,830
below what can I see what I get more

1452
01:25:21,060 --> 01:25:28,800
information there it says who is

1453
01:25:22,830 --> 01:25:35,930
requesting for an LS the command exit

1454
01:25:28,800 --> 01:25:39,990
are 123 pipes and on base64 encoding

1455
01:25:35,930 --> 01:25:45,210
here I'm going to chop it into these

1456
01:25:39,990 --> 01:25:49,110
fragments which are 256 232 ma

1457
01:25:45,210 --> 01:25:53,610
mm sighs if I raise verbosity to level

1458
01:25:49,110 --> 01:25:58,559
two we will see a little bit more

1459
01:25:53,610 --> 01:25:59,489
information so this is here this is here

1460
01:25:58,560 --> 01:26:04,770
as well

1461
01:25:59,489 --> 01:26:08,549
I run the client up there the order

1462
01:26:04,770 --> 01:26:14,660
doesn't matter down below I front this

1463
01:26:08,550 --> 01:26:17,670
I'll try I'll try to run another LS

1464
01:26:14,660 --> 01:26:26,700
alize does not exist so this is a wrong

1465
01:26:17,670 --> 01:26:28,710
command it does not exist but so LS aid

1466
01:26:26,700 --> 01:26:30,870
is a command is not existent but it's

1467
01:26:28,710 --> 01:26:33,900
built another package which has first

1468
01:26:30,870 --> 01:26:36,930
radius hub which is a dummy okay is a

1469
01:26:33,900 --> 01:26:42,360
dummy is a lame it has no real element

1470
01:26:36,930 --> 01:26:44,730
not interested but I'm interested in 811

1471
01:26:42,360 --> 01:26:48,570
that would go into a beacon which is a

1472
01:26:44,730 --> 01:26:54,450
subtype eight and zero so here you have

1473
01:26:48,570 --> 01:26:57,299
it L as mm estimation is one two three

1474
01:26:54,450 --> 01:26:59,580
four that CEDs and that's the

1475
01:26:57,300 --> 01:27:04,100
communication channel we've built for it

1476
01:26:59,580 --> 01:27:07,110
and we see that LS or LS a here it's

1477
01:27:04,100 --> 01:27:10,530
encapsulated into an information element

1478
01:27:07,110 --> 01:27:15,630
which is rates number three and this is

1479
01:27:10,530 --> 01:27:20,059
places 64 or for LS a this is what we're

1480
01:27:15,630 --> 01:27:20,060
saying same down here

1481
01:27:22,489 --> 01:27:46,059
I think Chris verbosity bit more down to

1482
01:27:32,330 --> 01:27:46,059
three so this is here this is the server

1483
01:27:48,830 --> 01:28:02,809
become another L as weekend this is what

1484
01:27:58,460 --> 01:28:04,610
we had built but let's try and see thee

1485
01:28:02,810 --> 01:28:07,489
as the exit here

1486
01:28:04,610 --> 01:28:11,320
what do you have here what do you see

1487
01:28:07,489 --> 01:28:13,968
here that's the exit that is

1488
01:28:11,320 --> 01:28:16,489
base64-encoded that's the full one

1489
01:28:13,969 --> 01:28:18,409
that's the result of the LS this is what

1490
01:28:16,489 --> 01:28:21,169
you can see here what do you see here

1491
01:28:18,409 --> 01:28:25,009
that I'm highlighting that's it but

1492
01:28:21,170 --> 01:28:28,730
encoded on its a base base64 encoding if

1493
01:28:25,010 --> 01:28:32,420
I run a base64 decode I show what you

1494
01:28:28,730 --> 01:28:35,449
see there and then you see down there

1495
01:28:32,420 --> 01:28:37,790
first information elements i've

1496
01:28:35,449 --> 01:28:39,678
encapsulated it full encapsulated s

1497
01:28:37,790 --> 01:28:42,080
right so that's the first information

1498
01:28:39,679 --> 01:28:44,659
elementary have fed it in but nothing

1499
01:28:42,080 --> 01:28:49,360
else not for any other because the exit

1500
01:28:44,659 --> 01:28:51,888
here the size of the exit does not need

1501
01:28:49,360 --> 01:28:54,650
nothing but a failed because is under a

1502
01:28:51,889 --> 01:28:56,900
hundred and fifty to four so the first

1503
01:28:54,650 --> 01:29:00,138
information element encapsulated role

1504
01:28:56,900 --> 01:29:04,730
but i can use up to five here so you get

1505
01:29:00,139 --> 01:29:10,030
an ADM basically get an idea of what I'm

1506
01:29:04,730 --> 01:29:13,320
doing of what I'm doing

1507
01:29:10,030 --> 01:29:15,580
inside this sequence

1508
01:29:13,320 --> 01:29:20,580
let's see the code because we have some

1509
01:29:15,580 --> 01:29:28,660
time live and we can play around with

1510
01:29:20,580 --> 01:29:30,550
the code of both programs and let's try

1511
01:29:28,660 --> 01:29:34,440
and see what the simplest one does the

1512
01:29:30,550 --> 01:29:39,160
client so same thing here first line

1513
01:29:34,440 --> 01:29:46,210
import the libraries I need item - what

1514
01:29:39,160 --> 01:29:48,880
libraries do I need so I need the system

1515
01:29:46,210 --> 01:29:51,220
library login why is that why is it

1516
01:29:48,880 --> 01:29:55,000
using it because I like to log it on

1517
01:29:51,220 --> 01:29:57,940
I like logging it all I like to have a

1518
01:29:55,000 --> 01:29:59,830
look of everything I do in my life so I

1519
01:29:57,940 --> 01:30:03,160
don't have a video log I don't know why

1520
01:29:59,830 --> 01:30:06,070
but I do like logging every server so

1521
01:30:03,160 --> 01:30:09,460
when they say to the server run this

1522
01:30:06,070 --> 01:30:12,670
command it is logging at all

1523
01:30:09,460 --> 01:30:15,340
I've I've been asked to you recorded

1524
01:30:12,670 --> 01:30:19,989
logger this time this hour and it's all

1525
01:30:15,340 --> 01:30:22,630
on syslog that's the way to work so the

1526
01:30:19,989 --> 01:30:25,929
base64 library you've seen I've use it

1527
01:30:22,630 --> 01:30:30,040
and red lines you need nine wreaths are

1528
01:30:25,930 --> 01:30:33,970
in line behind the common the command

1529
01:30:30,040 --> 01:30:37,050
exit line and then I input this Scapa

1530
01:30:33,970 --> 01:30:40,030
library yes sir from copy all import

1531
01:30:37,050 --> 01:30:42,520
previous one is so that we don't have

1532
01:30:40,030 --> 01:30:46,540
this typical miss take a back I'm

1533
01:30:42,520 --> 01:30:50,520
scrapping for that so and there you see

1534
01:30:46,540 --> 01:30:50,519
how we have verbosity

1535
01:30:51,450 --> 01:30:59,410
t-mac he what I'll be using as a

1536
01:30:57,310 --> 01:31:01,979
communication channel between both

1537
01:30:59,410 --> 01:31:05,940
server and channel

1538
01:31:01,979 --> 01:31:09,479
and zmd which is an empty variable that

1539
01:31:05,940 --> 01:31:17,459
I will publicly used used to populate

1540
01:31:09,479 --> 01:31:23,070
the command exit the interface goes on

1541
01:31:17,459 --> 01:31:25,679
command line I run it on mon 0 or t and

1542
01:31:23,070 --> 01:31:28,889
same with interface if I don't have the

1543
01:31:25,679 --> 01:31:32,309
interface there is a warning the script

1544
01:31:28,889 --> 01:31:35,219
needs to be used like this so it gets

1545
01:31:32,309 --> 01:31:37,380
out of the implementation then I do

1546
01:31:35,219 --> 01:31:42,959
something very beautiful that is I use a

1547
01:31:37,380 --> 01:31:43,889
history all of us programming on Linux

1548
01:31:42,959 --> 01:31:47,159
we love it

1549
01:31:43,889 --> 01:31:49,860
our up and down and we see the history

1550
01:31:47,159 --> 01:31:52,289
of command this is something snap of

1551
01:31:49,860 --> 01:31:55,079
myself and then you have the packet

1552
01:31:52,289 --> 01:31:58,139
handler there this is what we saw was

1553
01:31:55,079 --> 01:32:02,119
the packet handler as you find in

1554
01:31:58,139 --> 01:32:06,749
English so let's run to the

1555
01:32:02,119 --> 01:32:09,150
implementation which says as long as CMD

1556
01:32:06,749 --> 01:32:12,300
variable is not does not equal exit

1557
01:32:09,150 --> 01:32:14,848
stays in the loop it is stays in love

1558
01:32:12,300 --> 01:32:17,909
and what does the loop say print shell

1559
01:32:14,849 --> 01:32:20,400
with an entry first so with it with you

1560
01:32:17,909 --> 01:32:22,348
go back with a return beautiful as

1561
01:32:20,400 --> 01:32:28,110
you've seen in the screen just a minute

1562
01:32:22,349 --> 01:32:32,820
ago and it gets the input so it's a raw

1563
01:32:28,110 --> 01:32:37,860
input if I enter LS the CMD variable is

1564
01:32:32,820 --> 01:32:41,820
populated and is defined which is M s so

1565
01:32:37,860 --> 01:32:46,739
CMD will have the LS volume so I'd say

1566
01:32:41,820 --> 01:32:52,459
okay if CMD is not or does not equal

1567
01:32:46,739 --> 01:32:52,459
exit and is not empty then

1568
01:32:53,179 --> 01:33:02,489
use redline library and have the history

1569
01:32:59,519 --> 01:33:04,469
as I said before arrow up and down she

1570
01:33:02,489 --> 01:33:09,329
saved the library but doesn't matter

1571
01:33:04,469 --> 01:33:12,449
doesn't matter to you still here I have

1572
01:33:09,329 --> 01:33:14,820
not written typed exit so I'm not coming

1573
01:33:12,449 --> 01:33:21,199
out but ran the command that I am asking

1574
01:33:14,820 --> 01:33:25,799
you for that LS it says goat same frame

1575
01:33:21,199 --> 01:33:27,869
function so use base64 encoding for the

1576
01:33:25,800 --> 01:33:31,889
LS that's what you will have in the

1577
01:33:27,869 --> 01:33:36,659
packet alright so you will see that and

1578
01:33:31,889 --> 01:33:39,510
this is how you build it I'm Skippy

1579
01:33:36,659 --> 01:33:41,820
there's a way to build a frame a frame

1580
01:33:39,510 --> 01:33:44,849
is nothing but an object the packet is

1581
01:33:41,820 --> 01:33:47,250
an object when we talked about escapa so

1582
01:33:44,849 --> 01:33:52,289
it's all layers allow your plus layer

1583
01:33:47,250 --> 01:33:54,269
first layer on an 8:02 you 11 is a

1584
01:33:52,289 --> 01:33:55,800
raider tab which is a dummy it's the

1585
01:33:54,269 --> 01:33:58,920
tell me because i will not be adding any

1586
01:33:55,800 --> 01:34:01,230
other element but as it's built

1587
01:33:58,920 --> 01:34:03,659
we would need a raider top at the

1588
01:34:01,230 --> 01:34:06,959
beginning and it is a fed empty and

1589
01:34:03,659 --> 01:34:10,829
that's it this is layer chaining slash

1590
01:34:06,960 --> 01:34:16,739
equal means chaining and i chained the

1591
01:34:10,829 --> 01:34:19,889
following one that is the 211 802 11 it

1592
01:34:16,739 --> 01:34:27,268
has a series of fills in need address 1

1593
01:34:19,889 --> 01:34:31,530
2 3 4 so a series of things that we have

1594
01:34:27,269 --> 01:34:35,309
on packet 802 11 so we say address 1 is

1595
01:34:31,530 --> 01:34:39,268
broadcast because it's bigan this is for

1596
01:34:35,309 --> 01:34:44,610
everyone an address chain that's a mat

1597
01:34:39,269 --> 01:34:47,219
key which is a variable i define oh one

1598
01:34:44,610 --> 01:34:49,170
OTO 3 that's a communication channel

1599
01:34:47,219 --> 01:34:52,590
channel this is what has to be embedded

1600
01:34:49,170 --> 01:34:55,050
into the packet and then I have a London

1601
01:34:52,590 --> 01:34:58,409
MAC address that can be sent change with

1602
01:34:55,050 --> 01:35:01,020
every delivery or every transfer and

1603
01:34:58,409 --> 01:35:03,000
what else on the package whoa

1604
01:35:01,020 --> 01:35:05,580
we'll add another layer which is the

1605
01:35:03,000 --> 01:35:07,440
beacon layer which is a beacon and so it

1606
01:35:05,580 --> 01:35:08,280
has to have a beacon layer on top of

1607
01:35:07,440 --> 01:35:11,549
everything

1608
01:35:08,280 --> 01:35:14,610
so what capabilities are there well this

1609
01:35:11,550 --> 01:35:18,860
is an access point so it's an SS that's

1610
01:35:14,610 --> 01:35:22,440
all it is standard no trick to it and

1611
01:35:18,860 --> 01:35:27,269
what else information elements that's

1612
01:35:22,440 --> 01:35:29,910
where I will embed my information so

1613
01:35:27,270 --> 01:35:34,740
information elements what information

1614
01:35:29,910 --> 01:35:37,980
elements will you be a didn't exit which

1615
01:35:34,740 --> 01:35:40,080
is zero is exit and what would you out

1616
01:35:37,980 --> 01:35:43,169
nothing nothing

1617
01:35:40,080 --> 01:35:46,650
I just live it empty I'm not interested

1618
01:35:43,170 --> 01:35:50,010
exit is empty the LS command will be

1619
01:35:46,650 --> 01:35:53,519
embedded into information element three

1620
01:35:50,010 --> 01:35:58,200
that its range I could say ID equal

1621
01:35:53,520 --> 01:36:00,030
three because its ID equal rate and then

1622
01:35:58,200 --> 01:36:02,460
paid load goes into there and what's

1623
01:36:00,030 --> 01:36:06,269
paid load it is the variable that I get

1624
01:36:02,460 --> 01:36:08,220
with a base64 and LS and what else I

1625
01:36:06,270 --> 01:36:12,690
don't really need to add anything else

1626
01:36:08,220 --> 01:36:18,570
from here onwards I say send me this

1627
01:36:12,690 --> 01:36:21,000
frame ten times over all right I'm

1628
01:36:18,570 --> 01:36:23,250
sending this are ten times up in the air

1629
01:36:21,000 --> 01:36:26,130
I've built it and send it up in the air

1630
01:36:23,250 --> 01:36:28,800
ten times I broke a certain times then

1631
01:36:26,130 --> 01:36:32,460
Snee for answers so you've sent the

1632
01:36:28,800 --> 01:36:35,580
request now try and listen for two lyric

1633
01:36:32,460 --> 01:36:39,390
to the answers so you sniff the server

1634
01:36:35,580 --> 01:36:41,400
traffic that is best into ye what's the

1635
01:36:39,390 --> 01:36:42,930
function the features sniff sniff

1636
01:36:41,400 --> 01:36:45,870
feature the other one dose copy has

1637
01:36:42,930 --> 01:36:47,460
rippling from what interface was the one

1638
01:36:45,870 --> 01:36:51,000
that descended through the problem only

1639
01:36:47,460 --> 01:36:54,660
Ramon one whatever that is and what

1640
01:36:51,000 --> 01:36:58,020
we'll be using for like part fatherland

1641
01:36:54,660 --> 01:37:01,500
packet hundred so we go to thank 800

1642
01:36:58,020 --> 01:37:03,480
feature or function so it sends me the

1643
01:37:01,500 --> 01:37:04,110
package any package coming in from the

1644
01:37:03,480 --> 01:37:07,259
server

1645
01:37:04,110 --> 01:37:07,960
it is sniffed so what filters do we have

1646
01:37:07,260 --> 01:37:12,250
here

1647
01:37:07,960 --> 01:37:17,110
if it's dot 11 or 802 11 its Wi-Fi yes

1648
01:37:12,250 --> 01:37:19,480
it is good if it's serum management and

1649
01:37:17,110 --> 01:37:24,339
subtype is full then is prompt to

1650
01:37:19,480 --> 01:37:27,700
request and if address G equals our

1651
01:37:24,340 --> 01:37:32,710
marketers then I process it if not rule

1652
01:37:27,700 --> 01:37:35,380
times but if it is process it and so

1653
01:37:32,710 --> 01:37:38,920
here we define information elements in

1654
01:37:35,380 --> 01:37:46,300
the packet with just one variable or

1655
01:37:38,920 --> 01:37:49,600
object and so we say ELT take it out of

1656
01:37:46,300 --> 01:37:53,230
the information elements of the package

1657
01:37:49,600 --> 01:37:55,660
object so I have another outlet here

1658
01:37:53,230 --> 01:37:58,870
this is only information and iment and

1659
01:37:55,660 --> 01:38:07,769
I'll process that and so I say as long

1660
01:37:58,870 --> 01:38:10,930
as you read in inside of that element

1661
01:38:07,770 --> 01:38:14,280
any element that is an information

1662
01:38:10,930 --> 01:38:18,940
element type processes and so we say ok

1663
01:38:14,280 --> 01:38:22,889
if it is serial as an information

1664
01:38:18,940 --> 01:38:29,559
element then the exit is what you had

1665
01:38:22,890 --> 01:38:33,370
plus this value if it is one so what do

1666
01:38:29,560 --> 01:38:36,250
you had Plus this fields Valley and so

1667
01:38:33,370 --> 01:38:40,210
on the way up to 7 I'm using 5 here

1668
01:38:36,250 --> 01:38:42,640
right you've seen that but for 7 it all

1669
01:38:40,210 --> 01:38:45,820
cracks because it's too big a package a

1670
01:38:42,640 --> 01:38:46,270
packet so I decided to go to 5 so what

1671
01:38:45,820 --> 01:38:49,150
do I do

1672
01:38:46,270 --> 01:38:54,520
I chained together so information

1673
01:38:49,150 --> 01:38:58,059
element 0 1 2 3 4 5 so now I have a base

1674
01:38:54,520 --> 01:39:01,240
64 and also the command exit ran here so

1675
01:38:58,060 --> 01:39:06,010
that's it in the very end I say printed

1676
01:39:01,240 --> 01:39:09,699
on screen base64 decode for the chaining

1677
01:39:06,010 --> 01:39:14,260
of the fields all right

1678
01:39:09,699 --> 01:39:17,678
and so if it replies true then back to

1679
01:39:14,260 --> 01:39:20,050
work right here you can stop sniffing

1680
01:39:17,679 --> 01:39:23,679
because the answer to your question has

1681
01:39:20,050 --> 01:39:26,199
been given then again another prayer

1682
01:39:23,679 --> 01:39:29,710
another prompt or another command is

1683
01:39:26,199 --> 01:39:32,379
prompted basically that's a way to

1684
01:39:29,710 --> 01:39:36,670
encapsulate if we see that the code from

1685
01:39:32,380 --> 01:39:39,429
the server well it is just the same and

1686
01:39:36,670 --> 01:39:43,719
I'll show it to you so that do you see

1687
01:39:39,429 --> 01:39:48,250
but it's just the same basically only

1688
01:39:43,719 --> 01:39:51,090
thing that matters here is wild trees

1689
01:39:48,250 --> 01:39:53,440
are listening to the package and you

1690
01:39:51,090 --> 01:39:56,590
show a message on the screen

1691
01:39:53,440 --> 01:39:59,410
sniffing package ok perfect and from

1692
01:39:56,590 --> 01:40:01,150
here you per sniffing uses cap pay what

1693
01:39:59,410 --> 01:40:05,170
interface they weren't a given to you

1694
01:40:01,150 --> 01:40:08,559
and what's the handler for the package

1695
01:40:05,170 --> 01:40:14,760
what the pocket function if there is an

1696
01:40:08,560 --> 01:40:17,199
exception Strout to me and get out some

1697
01:40:14,760 --> 01:40:21,580
our packet handler that's what matters

1698
01:40:17,199 --> 01:40:24,639
the most was most important and here we

1699
01:40:21,580 --> 01:40:26,890
have it this is what packets I said

1700
01:40:24,640 --> 01:40:30,219
right here it is this is what it does is

1701
01:40:26,890 --> 01:40:35,020
it just serves if it's 802 11 is Wi-Fi

1702
01:40:30,219 --> 01:40:37,750
so move on if it's 0 and subtype 8 of a

1703
01:40:35,020 --> 01:40:42,120
beacon what I hope I can hear from my

1704
01:40:37,750 --> 01:40:42,120
client that's what they're saying

1705
01:40:42,570 --> 01:40:48,150
but then address you in the package

1706
01:40:45,620 --> 01:40:50,160
belongs to our mark so their

1707
01:40:48,150 --> 01:40:53,429
communication channel I will process it

1708
01:40:50,160 --> 01:40:56,250
and it says CMD which is the command

1709
01:40:53,430 --> 01:41:01,050
that you requested which is an LS well

1710
01:40:56,250 --> 01:41:07,050
known LS is a stream that has a base64

1711
01:41:01,050 --> 01:41:09,470
code for information element T okay so

1712
01:41:07,050 --> 01:41:12,240
that's what's inside that element

1713
01:41:09,470 --> 01:41:17,310
okay then out of that information

1714
01:41:12,240 --> 01:41:25,260
element to but it's three rather but it

1715
01:41:17,310 --> 01:41:30,750
is 0-1 T so you get the CMD which is the

1716
01:41:25,260 --> 01:41:33,540
LS command you recode it with the base64

1717
01:41:30,750 --> 01:41:36,000
and you run it with that function there

1718
01:41:33,540 --> 01:41:40,950
with that feature there so execute here

1719
01:41:36,000 --> 01:41:44,670
that's the name and execute here there

1720
01:41:40,950 --> 01:41:48,450
you run LS and you said this is the LS

1721
01:41:44,670 --> 01:41:52,200
command you requested I lock it because

1722
01:41:48,450 --> 01:41:56,250
I say I always love you know and so I

1723
01:41:52,200 --> 01:41:59,099
say that's a command and so you open a

1724
01:41:56,250 --> 01:42:01,470
subprocess in order to run it so you

1725
01:41:59,100 --> 01:42:04,320
need to open it I will not do it on the

1726
01:42:01,470 --> 01:42:07,140
main thread that is always sniffing so

1727
01:42:04,320 --> 01:42:11,849
I'll open a sub process where you open

1728
01:42:07,140 --> 01:42:16,260
LS and the exit which is SPD out and

1729
01:42:11,850 --> 01:42:19,380
also back exit comes from process

1730
01:42:16,260 --> 01:42:23,010
communication you remove the you slash

1731
01:42:19,380 --> 01:42:25,710
and which are the changes in line and

1732
01:42:23,010 --> 01:42:28,530
you see whether it equals zero or all

1733
01:42:25,710 --> 01:42:30,720
the typical things it's a well program

1734
01:42:28,530 --> 01:42:32,429
script it will not just cracked with

1735
01:42:30,720 --> 01:42:35,640
anything it will not just crash with

1736
01:42:32,430 --> 01:42:39,750
anything this is a typical filter in the

1737
01:42:35,640 --> 01:42:42,570
earth cleaning out this is the exit okay

1738
01:42:39,750 --> 01:42:44,810
so I forget about all that and the exit

1739
01:42:42,570 --> 01:42:47,849
is out

1740
01:42:44,810 --> 01:42:53,780
that's on screen that's an LS and they

1741
01:42:47,850 --> 01:42:56,580
have a command list so base base64

1742
01:42:53,780 --> 01:42:59,490
encode because that's how it's been

1743
01:42:56,580 --> 01:43:02,700
encoded and it's our effort and then

1744
01:42:59,490 --> 01:43:08,099
just you split it into pieces and it

1745
01:43:02,700 --> 01:43:11,460
five pieces that aren't 252 that's the

1746
01:43:08,100 --> 01:43:15,090
size and in one does information I mean

1747
01:43:11,460 --> 01:43:18,630
I can not feed 1,024 the biggest size is

1748
01:43:15,090 --> 01:43:21,180
255 that's in sharp threat so I limited

1749
01:43:18,630 --> 01:43:25,370
myself to 252 that's what's normal i

1750
01:43:21,180 --> 01:43:28,080
coded encode it into pieces great and

1751
01:43:25,370 --> 01:43:31,440
from here onwards I've built a packet

1752
01:43:28,080 --> 01:43:35,930
then I'll send same as before raid it

1753
01:43:31,440 --> 01:43:39,650
happened and then type 0 subtype for

1754
01:43:35,930 --> 01:43:42,990
that's where I'll be transmitted in

1755
01:43:39,650 --> 01:43:44,940
broadcast direction or address address

1756
01:43:42,990 --> 01:43:48,150
number 2 is the one that it will be

1757
01:43:44,940 --> 01:43:50,549
sniffing that's the MAC address address

1758
01:43:48,150 --> 01:43:53,759
3 I'm not interested in is a broadcast

1759
01:43:50,550 --> 01:43:59,790
and here we have that inside of all five

1760
01:43:53,760 --> 01:44:03,090
information elements 0 1 2 3 & 4

1761
01:43:59,790 --> 01:44:04,769
that's where I placed three pieces that

1762
01:44:03,090 --> 01:44:09,690
are two and 52

1763
01:44:04,770 --> 01:44:13,110
that's what I caught out of the exit so

1764
01:44:09,690 --> 01:44:16,019
what do you do next is I send it

1765
01:44:13,110 --> 01:44:19,410
well many more things actually because

1766
01:44:16,020 --> 01:44:21,870
actually what I did for it to be

1767
01:44:19,410 --> 01:44:24,930
instructive I just different levels of

1768
01:44:21,870 --> 01:44:27,059
verbosity so that you see what it looks

1769
01:44:24,930 --> 01:44:29,790
like what I'm broadcasting so here you

1770
01:44:27,060 --> 01:44:31,800
can see that one of the things I did to

1771
01:44:29,790 --> 01:44:34,620
see the power with the prompts just one

1772
01:44:31,800 --> 01:44:38,580
prompt one with one command right on on

1773
01:44:34,620 --> 01:44:41,790
Scotty I'm logging it on a pcap file

1774
01:44:38,580 --> 01:44:45,540
full fine so that's what I'm doing I get

1775
01:44:41,790 --> 01:44:49,940
this rack fine and then went in it into

1776
01:44:45,540 --> 01:44:57,170
a pro Rick Rick dot PK

1777
01:44:49,940 --> 01:45:02,960
and with that I just send it so this is

1778
01:44:57,170 --> 01:45:06,230
the cent peak function that we use 4.11

1779
01:45:02,960 --> 01:45:10,040
because that's a layer t if you're

1780
01:45:06,230 --> 01:45:13,309
sending tcp/ip you would use send

1781
01:45:10,040 --> 01:45:16,400
without the p after that but if it's

1782
01:45:13,310 --> 01:45:20,060
play your two years sent P and then you

1783
01:45:16,400 --> 01:45:21,440
state which interface or so first what

1784
01:45:20,060 --> 01:45:25,969
do you want to send this would be just

1785
01:45:21,440 --> 01:45:28,790
one packet one frame this is what I

1786
01:45:25,969 --> 01:45:32,900
built up here this you send it to me and

1787
01:45:28,790 --> 01:45:35,780
which interface Mon want you whatever

1788
01:45:32,900 --> 01:45:38,750
I've chosen velocity level not very much

1789
01:45:35,780 --> 01:45:40,429
interested for how many times over ten

1790
01:45:38,750 --> 01:45:44,050
times well same as usual

1791
01:45:40,430 --> 01:45:46,820
if there's an exception you try and send

1792
01:45:44,050 --> 01:45:51,050
the exception as well that you've

1793
01:45:46,820 --> 01:45:55,519
produced on the server side if there's

1794
01:45:51,050 --> 01:45:57,199
an exception run in because you asked

1795
01:45:55,520 --> 01:45:59,810
for a command that is pointless or

1796
01:45:57,199 --> 01:46:02,150
there's produced a mistake and I send

1797
01:45:59,810 --> 01:46:05,120
the exception together with the to the

1798
01:46:02,150 --> 01:46:07,549
client side same way request with the

1799
01:46:05,120 --> 01:46:14,900
radius half and the content would be the

1800
01:46:07,550 --> 01:46:17,090
exception all right that's all actually

1801
01:46:14,900 --> 01:46:19,280
if you think it through and you get

1802
01:46:17,090 --> 01:46:21,590
yourself familiar with the practical

1803
01:46:19,280 --> 01:46:23,630
what you need to do is know the

1804
01:46:21,590 --> 01:46:26,210
structure of the package now that we

1805
01:46:23,630 --> 01:46:28,790
know the structure if we know what every

1806
01:46:26,210 --> 01:46:30,860
field is or what our fills of interest

1807
01:46:28,790 --> 01:46:38,060
are with a scrubber you can do it all

1808
01:46:30,860 --> 01:46:39,530
all of it so that's in a natural what we

1809
01:46:38,060 --> 01:46:41,360
can do with this happy this is just a

1810
01:46:39,530 --> 01:46:43,759
proof of concept whether useful or

1811
01:46:41,360 --> 01:46:47,059
useless I don't know but the idea would

1812
01:46:43,760 --> 01:46:48,440
be to open up behind so that you

1813
01:46:47,060 --> 01:46:50,690
understand what we can do with net

1814
01:46:48,440 --> 01:46:53,389
happen is not just using third party

1815
01:46:50,690 --> 01:46:56,629
tools but we can also use tools that

1816
01:46:53,390 --> 01:46:59,270
we've made ourselves and that's all if

1817
01:46:56,630 --> 01:47:01,910
there are questions we five minutes left

1818
01:46:59,270 --> 01:47:04,400
if i'm not mistaken for quite

1819
01:47:01,910 --> 01:47:08,690
so any question knew my half and now is

1820
01:47:04,400 --> 01:47:13,969
the time and the place I think there's a

1821
01:47:08,690 --> 01:47:16,089
microphone out there isn't there she did

1822
01:47:13,969 --> 01:47:16,090
yeah

1823
01:47:17,140 --> 01:47:22,250
okay

1824
01:47:18,380 --> 01:47:24,290
oh the calf you showed to us yes yes yes

1825
01:47:22,250 --> 01:47:26,630
there you have it take a picture if you

1826
01:47:24,290 --> 01:47:28,880
wish this is my github where I have so

1827
01:47:26,630 --> 01:47:31,760
many samples you get the examples from

1828
01:47:28,880 --> 01:47:34,630
the videos well for this github there

1829
01:47:31,760 --> 01:47:37,219
are some pipe some pieces of software

1830
01:47:34,630 --> 01:47:39,350
that help you learn

1831
01:47:37,219 --> 01:47:50,739
scabby and some other things so thank

1832
01:47:39,350 --> 01:47:56,660
you very much oke Oke see ya we don't a

1833
01:47:50,739 --> 01:48:00,500
simple question and quick question crc

1834
01:47:56,660 --> 01:48:07,180
in the packet well Scooby does calculate

1835
01:48:00,500 --> 01:48:11,810
the CRC FCS for 802 11 so it is preset

1836
01:48:07,180 --> 01:48:14,260
the calculation is preset actually as I

1837
01:48:11,810 --> 01:48:17,090
was in finding parts of the packets on

1838
01:48:14,260 --> 01:48:19,219
scrappy I would have the source and

1839
01:48:17,090 --> 01:48:21,950
destination address type and subtype for

1840
01:48:19,219 --> 01:48:23,719
a ot 11 but then we have many more

1841
01:48:21,950 --> 01:48:25,700
things all those things that are not

1842
01:48:23,719 --> 01:48:29,270
defined on this copy is because they are

1843
01:48:25,700 --> 01:48:31,489
pre set or default if I don't fill them

1844
01:48:29,270 --> 01:48:34,520
they feel themselves mainly not with

1845
01:48:31,489 --> 01:48:36,919
what they won't but so it's easier that

1846
01:48:34,520 --> 01:48:38,570
the packet is a full packet if we will

1847
01:48:36,920 --> 01:48:41,030
not go deeper we can play around with

1848
01:48:38,570 --> 01:48:43,549
others sequence counter and others they

1849
01:48:41,030 --> 01:48:45,440
are all accessible as long as you know

1850
01:48:43,550 --> 01:48:47,270
how to build them because sequence

1851
01:48:45,440 --> 01:48:51,679
counter the number of packets or

1852
01:48:47,270 --> 01:48:56,540
sequences I'd say is a sequential number

1853
01:48:51,680 --> 01:48:59,300
usually if it starts with a 1 2 3 4 it

1854
01:48:56,540 --> 01:49:02,390
will stay sequential but the full byte

1855
01:48:59,300 --> 01:49:04,760
or two full bytes are not used only part

1856
01:49:02,390 --> 01:49:06,650
of one byte and part of the other so in

1857
01:49:04,760 --> 01:49:09,110
order to build it we need to know how to

1858
01:49:06,650 --> 01:49:11,449
build it cannot say sequence counter is

1859
01:49:09,110 --> 01:49:15,769
1 and this will be admitted

1860
01:49:11,449 --> 01:49:18,559
because the top is 4,000 plants and if I

1861
01:49:15,770 --> 01:49:22,550
say it's a 2000 and plus something weird

1862
01:49:18,560 --> 01:49:24,469
will go on and it will feel hard some of

1863
01:49:22,550 --> 01:49:27,230
the bits in the packet with that

1864
01:49:24,469 --> 01:49:29,540
sequence cancer so we need to know what

1865
01:49:27,230 --> 01:49:31,849
we're doing and if we don't know what

1866
01:49:29,540 --> 01:49:34,310
we're doing and give a chance to escape

1867
01:49:31,850 --> 01:49:37,840
it to fill in it for us that's idea

1868
01:49:34,310 --> 01:49:37,840
thank you very much any more questions

1869
01:49:39,219 --> 01:49:45,350
hello yeah go I have a question

1870
01:49:42,140 --> 01:49:50,330
thinking about well with a but intent

1871
01:49:45,350 --> 01:49:55,760
well no no no I can take revenge next

1872
01:49:50,330 --> 01:49:57,830
time so if I were to simulate our access

1873
01:49:55,760 --> 01:50:01,130
point with this copy with the same SS ID

1874
01:49:57,830 --> 01:50:03,260
and the same MAC address as with a hot

1875
01:50:01,130 --> 01:50:07,210
spot for my cell phone with the cell

1876
01:50:03,260 --> 01:50:10,550
phone try to gain access to that yes and

1877
01:50:07,210 --> 01:50:12,410
maybe with a grab a tag or something

1878
01:50:10,550 --> 01:50:16,100
similar we could get the password out of

1879
01:50:12,410 --> 01:50:19,250
the hot spot right well the password

1880
01:50:16,100 --> 01:50:22,340
seven no it depends whether it's WPA or

1881
01:50:19,250 --> 01:50:24,560
what we're talking about but if we focus

1882
01:50:22,340 --> 01:50:28,010
on thinking that well what is not

1883
01:50:24,560 --> 01:50:30,469
available anymore and we think of WPA is

1884
01:50:28,010 --> 01:50:32,510
very severe attack is similar I start

1885
01:50:30,469 --> 01:50:35,480
sending beacons with Scottie as we've

1886
01:50:32,510 --> 01:50:38,060
seen is easy it makes sense as I start

1887
01:50:35,480 --> 01:50:41,870
sending beacons the right beacons were

1888
01:50:38,060 --> 01:50:44,179
properly structured and then series of

1889
01:50:41,870 --> 01:50:47,599
beacons per minute or second let's say a

1890
01:50:44,179 --> 01:50:50,060
10 per second so I start scanning with

1891
01:50:47,600 --> 01:50:52,610
my cell phone and I'll see there is an

1892
01:50:50,060 --> 01:50:55,040
access point here okay that's true but

1893
01:50:52,610 --> 01:50:58,849
then you've only done part of the attack

1894
01:50:55,040 --> 01:51:01,670
then I'm scary the distance is sending

1895
01:50:58,850 --> 01:51:03,949
beacons when it's a dummy then you

1896
01:51:01,670 --> 01:51:06,230
haven't got a virtual access point which

1897
01:51:03,949 --> 01:51:10,210
is not existent does not respond to

1898
01:51:06,230 --> 01:51:10,209
package a packets or probes

1899
01:51:10,500 --> 01:51:15,070
if you want to have a slightly

1900
01:51:12,940 --> 01:51:17,110
functional access point for an attack

1901
01:51:15,070 --> 01:51:19,750
first you need to send beacons and then

1902
01:51:17,110 --> 01:51:22,660
reply to prompt requests with prompt

1903
01:51:19,750 --> 01:51:25,660
responses there you would have on one

1904
01:51:22,660 --> 01:51:28,809
hand you can send Biggums then you can

1905
01:51:25,660 --> 01:51:31,989
sniff and then sniff and see if there is

1906
01:51:28,810 --> 01:51:34,540
any prompt request te if there is then

1907
01:51:31,989 --> 01:51:38,320
you reply with a prompt response and

1908
01:51:34,540 --> 01:51:41,370
there's we cut more implementations as

1909
01:51:38,320 --> 01:51:45,250
an access point is a thousand things

1910
01:51:41,370 --> 01:51:47,620
authentication requests I let you often

1911
01:51:45,250 --> 01:51:50,920
ticket yourselves and I give you a

1912
01:51:47,620 --> 01:51:52,719
response that's open there's no

1913
01:51:50,920 --> 01:51:53,950
authentication yet even if the name is

1914
01:51:52,719 --> 01:51:55,510
authentication there is no true

1915
01:51:53,950 --> 01:51:58,059
authentication there then we have the

1916
01:51:55,510 --> 01:52:00,969
association request or response it will

1917
01:51:58,060 --> 01:52:03,670
send an association request and you will

1918
01:52:00,969 --> 01:52:07,690
send an association response up to there

1919
01:52:03,670 --> 01:52:11,050
you are compliant with world 802 or

1920
01:52:07,690 --> 01:52:13,540
eleven says but then WPA and they say

1921
01:52:11,050 --> 01:52:17,969
well the key and everything else that's

1922
01:52:13,540 --> 01:52:20,890
different is it's not the same protocol

1923
01:52:17,969 --> 01:52:23,080
scopic does have support for that are

1924
01:52:20,890 --> 01:52:25,150
the protocol and there you can build a

1925
01:52:23,080 --> 01:52:28,180
poll protocols and encapsulate them

1926
01:52:25,150 --> 01:52:31,589
Brian so rightly so there are several

1927
01:52:28,180 --> 01:52:34,180
tools where this one on Python where you

1928
01:52:31,590 --> 01:52:39,960
actually first step is you send a

1929
01:52:34,180 --> 01:52:43,810
challenge right through freight and use

1930
01:52:39,960 --> 01:52:45,700
synonyms which is the access point it

1931
01:52:43,810 --> 01:52:48,430
sends a challenge and the client the

1932
01:52:45,700 --> 01:52:50,650
station that is encrypts it and there's

1933
01:52:48,430 --> 01:52:55,150
the second part of your authentication

1934
01:52:50,650 --> 01:52:57,129
on EF that is the S note so the access

1935
01:52:55,150 --> 01:53:04,120
point is authenticated by the station it

1936
01:52:57,130 --> 01:53:06,969
is due to double sensor the two-way

1937
01:53:04,120 --> 01:53:10,420
rather that's an AMT wait so you see in

1938
01:53:06,969 --> 01:53:12,880
the EAP and you send and number random

1939
01:53:10,420 --> 01:53:18,790
number which is a challenge and there's

1940
01:53:12,880 --> 01:53:22,780
a reply with the nonce encrypted and

1941
01:53:18,790 --> 01:53:28,510
just with that you can send it to

1942
01:53:22,780 --> 01:53:30,340
you haschke or i aircrack-ng for its to

1943
01:53:28,510 --> 01:53:39,450
decrypt it or send a dictionary to

1944
01:53:30,340 --> 01:53:51,790
decrypt it with brute-forcing and

1945
01:53:39,450 --> 01:53:54,550
there's one here one day then we use

1946
01:53:51,790 --> 01:53:56,019
this as a means of protection for

1947
01:53:54,550 --> 01:54:03,510
example if there is a man-in-the-middle

1948
01:53:56,020 --> 01:54:06,970
attack just an I've forged a fake frame

1949
01:54:03,510 --> 01:54:09,610
so there's another password and so we

1950
01:54:06,970 --> 01:54:13,360
can also have a honeypot on there

1951
01:54:09,610 --> 01:54:16,059
well Skippy for 802 11 that attack could

1952
01:54:13,360 --> 01:54:18,790
be complicated because if two devices

1953
01:54:16,060 --> 01:54:20,800
both devices client and the other device

1954
01:54:18,790 --> 01:54:22,930
are unaware of the key they cannot talk

1955
01:54:20,800 --> 01:54:25,840
to each other that would be basic

1956
01:54:22,930 --> 01:54:28,690
that's the Wi-Fi so both need to be

1957
01:54:25,840 --> 01:54:30,790
aware of the key if one of them is not

1958
01:54:28,690 --> 01:54:34,809
they cannot take talk to each other

1959
01:54:30,790 --> 01:54:36,340
same if if Japanese and Chinese well you

1960
01:54:34,810 --> 01:54:37,990
speak Japanese and Chinese even if they

1961
01:54:36,340 --> 01:54:39,610
are they speak Chinese even if they look

1962
01:54:37,990 --> 01:54:41,920
similar we will not understand each

1963
01:54:39,610 --> 01:54:44,320
other but if it changes to more protocol

1964
01:54:41,920 --> 01:54:47,140
is an offensive and defensive tool both

1965
01:54:44,320 --> 01:54:51,759
in my book one of the scripts defined is

1966
01:54:47,140 --> 01:54:55,510
a personal ID as where Yi and I we saw

1967
01:54:51,760 --> 01:54:58,900
well there is this wife I bought small

1968
01:54:55,510 --> 01:55:01,840
one that is stick to one side and this

1969
01:54:58,900 --> 01:55:04,389
is minimum and this is a monitor and

1970
01:55:01,840 --> 01:55:07,030
with the script on the book which is a

1971
01:55:04,390 --> 01:55:09,580
personal ideas do you detect the

1972
01:55:07,030 --> 01:55:12,519
authentication against me and then it

1973
01:55:09,580 --> 01:55:15,670
protects me against networks I do not

1974
01:55:12,520 --> 01:55:18,850
trust so it's constantly on Linux Linux

1975
01:55:15,670 --> 01:55:20,350
right but it is constantly scanning

1976
01:55:18,850 --> 01:55:22,660
trying to see whether I'm being D

1977
01:55:20,350 --> 01:55:24,610
authenticated if whether I'm being

1978
01:55:22,660 --> 01:55:26,680
kicked out of a network and into another

1979
01:55:24,610 --> 01:55:30,519
so we get close and information on

1980
01:55:26,680 --> 01:55:31,000
screen you say you are trying to to be

1981
01:55:30,520 --> 01:55:32,710
kicked

1982
01:55:31,000 --> 01:55:34,830
someone's trying to kick you out maybe

1983
01:55:32,710 --> 01:55:39,720
you're going into an ant

1984
01:55:34,830 --> 01:55:42,240
tit Network and so in offense and

1985
01:55:39,720 --> 01:55:47,300
defense you can program it on scabbing

1986
01:55:42,240 --> 01:55:47,300
so it's very useful thank you very much

1987
01:55:54,639 --> 01:56:00,050
una pregunta - unum back and easy an

1988
01:55:59,090 --> 01:56:02,150
easy question

1989
01:56:00,050 --> 01:56:07,130
tenem back have several SSID yes of

1990
01:56:02,150 --> 01:56:11,469
course right now physically the

1991
01:56:07,130 --> 01:56:14,749
limitation is more or less at 32 an

1992
01:56:11,469 --> 01:56:17,960
access point which is good quality can

1993
01:56:14,749 --> 01:56:21,889
go up to 32 that doesn't really matter

1994
01:56:17,960 --> 01:56:24,260
the same channel really the limitation

1995
01:56:21,889 --> 01:56:26,809
on a channel means that it has a radio

1996
01:56:24,260 --> 01:56:30,260
and that means that it can only have one

1997
01:56:26,809 --> 01:56:34,729
channel but an access point can have up

1998
01:56:30,260 --> 01:56:37,699
to 32 as many as we like with different

1999
01:56:34,729 --> 01:56:39,469
types of security levels one open

2000
01:56:37,699 --> 01:56:42,469
another one web another one guest

2001
01:56:39,469 --> 01:56:46,400
another one for client they can be on

2002
01:56:42,469 --> 01:56:49,610
different W lands and on skype a we can

2003
01:56:46,400 --> 01:56:54,589
also design a simple attack with

2004
01:56:49,610 --> 01:56:57,499
overflow on Skippy transferring beacons

2005
01:56:54,590 --> 01:57:01,999
from an F point for instance and you

2006
01:56:57,499 --> 01:57:07,400
will find in my book a script where you

2007
01:57:01,999 --> 01:57:11,030
take it home a scan and then recorded on

2008
01:57:07,400 --> 01:57:13,969
an PK fire fire you then go to your

2009
01:57:11,030 --> 01:57:16,820
office and run all the networks you

2010
01:57:13,969 --> 01:57:19,729
found our home and cologne all those

2011
01:57:16,820 --> 01:57:24,259
features and when I say cloning is not

2012
01:57:19,729 --> 01:57:28,820
an a fake ap with air bays and vikarma

2013
01:57:24,260 --> 01:57:31,760
those tools that run a false a false one

2014
01:57:28,820 --> 01:57:34,369
it would be an exact clone with the

2015
01:57:31,760 --> 01:57:37,489
exact same features and that can be done

2016
01:57:34,369 --> 01:57:40,940
with with Scapa quite easily by

2017
01:57:37,489 --> 01:57:44,419
capturing a beacon and a prompt response

2018
01:57:40,940 --> 01:57:48,829
response for a real access point and

2019
01:57:44,420 --> 01:57:51,280
then you broadcast that up in the air

2020
01:57:48,829 --> 01:57:55,820
and then it looks like a real one

2021
01:57:51,280 --> 01:57:58,820
some attacks a can run up to 50 access

2022
01:57:55,820 --> 01:58:02,018
points like that and if you could scan

2023
01:57:58,820 --> 01:58:05,268
Wi-Fi networks like that it really

2024
01:58:02,019 --> 01:58:06,120
overflows and that can even make the

2025
01:58:05,269 --> 01:58:09,480
windows

2026
01:58:06,120 --> 01:58:11,180
that fail but you can do it yeah any

2027
01:58:09,480 --> 01:58:15,089
further questions

2028
01:58:11,180 --> 01:58:19,470
great well thank you very much for

2029
01:58:15,090 --> 01:58:20,800
coming and attending my workshop and see

2030
01:58:19,470 --> 01:58:24,689
you next time

2031
01:58:20,800 --> 01:58:24,689
[Applause]

2032
01:58:25,390 --> 01:58:33,560
[Music]

