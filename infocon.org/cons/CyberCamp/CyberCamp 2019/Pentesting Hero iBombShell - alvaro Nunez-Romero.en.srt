1
00:00:01,870 --> 00:00:04,939
[Music]

2
00:00:09,950 --> 00:00:16,650
one of the other laws beautifuiiy one in

3
00:00:14,429 --> 00:00:20,670
the first place I'd like to think at

4
00:00:16,650 --> 00:00:24,028
Cybercom an exhibit or accepting my

5
00:00:20,670 --> 00:00:26,730
presentation wait it's going to deal

6
00:00:24,029 --> 00:00:34,649
with post exploitation through a

7
00:00:26,730 --> 00:00:36,750
bombshell so we are going to learn how

8
00:00:34,649 --> 00:00:40,590
we are going to execute our post post

9
00:00:36,750 --> 00:00:51,360
exploitation source sins an open source

10
00:00:40,590 --> 00:00:55,260
tool created here in Spain how I like to

11
00:00:51,360 --> 00:00:57,899
talk to developers that may help in a

12
00:00:55,260 --> 00:01:01,050
project in an open source project anyone

13
00:00:57,899 --> 00:01:04,170
may collaborate can modify it can study

14
00:01:01,050 --> 00:01:05,789
the code and add new functionalities and

15
00:01:04,170 --> 00:01:08,880
also this is going to be addressed to

16
00:01:05,790 --> 00:01:12,030
pen testers that may find it is truly

17
00:01:08,880 --> 00:01:14,449
useful this is a description of myself

18
00:01:12,030 --> 00:01:19,470
where I'm working and working in

19
00:01:14,450 --> 00:01:21,720
telefónica in the 11-part laboratory I'm

20
00:01:19,470 --> 00:01:26,580
also a professor in different Spanish

21
00:01:21,720 --> 00:01:29,189
universities and besides talking about

22
00:01:26,580 --> 00:01:37,920
some events such as cyber camp I've

23
00:01:29,189 --> 00:01:40,589
published in C or export publishing so

24
00:01:37,920 --> 00:01:42,840
we're going to learn about ourselves we

25
00:01:40,590 --> 00:01:45,390
are going to talk about different

26
00:01:42,840 --> 00:01:46,829
frameworks that have been used or pen

27
00:01:45,390 --> 00:01:50,250
testing and then we are going to learn

28
00:01:46,829 --> 00:01:52,829
about a bombshell for those programmers

29
00:01:50,250 --> 00:01:55,380
that may know the code they might find

30
00:01:52,829 --> 00:01:57,929
out how to help in this project by

31
00:01:55,380 --> 00:01:59,850
adding new functionalities we are going

32
00:01:57,930 --> 00:02:02,369
to to analyze the architecture its

33
00:01:59,850 --> 00:02:05,009
different ways of working and finally we

34
00:02:02,369 --> 00:02:06,450
are going to execute item shell in real

35
00:02:05,009 --> 00:02:09,959
environments we are going to create a

36
00:02:06,450 --> 00:02:12,979
real scenario real Network and we are

37
00:02:09,959 --> 00:02:12,979
going to use items

38
00:02:13,709 --> 00:02:20,920
so you know they do this presentation

39
00:02:17,950 --> 00:02:23,589
and the later workshop I'm going to use

40
00:02:20,920 --> 00:02:28,230
a Windows 7 computer Windows 10 computer

41
00:02:23,590 --> 00:02:34,270
and Kali Linux computer windows usually

42
00:02:28,230 --> 00:02:37,030
provides 90 days trials these trials can

43
00:02:34,270 --> 00:02:41,230
be activated several times and they are

44
00:02:37,030 --> 00:02:43,060
quite interesting in order to do some

45
00:02:41,230 --> 00:02:46,780
testing especially for those people that

46
00:02:43,060 --> 00:02:50,860
you do not usually is a Windows so if

47
00:02:46,780 --> 00:02:52,930
you want to try this workshop out and do

48
00:02:50,860 --> 00:02:56,290
what I'm going to do you can use this 90

49
00:02:52,930 --> 00:02:58,120
day the trials of Windows the first

50
00:02:56,290 --> 00:03:00,519
question I would like to ask you is can

51
00:02:58,120 --> 00:03:02,410
you do up and testing without tools do

52
00:03:00,519 --> 00:03:04,150
you think that can you do a fan testing

53
00:03:02,410 --> 00:03:07,329
without tools and the second questions I

54
00:03:04,150 --> 00:03:10,600
want to ask is could you do a pen

55
00:03:07,330 --> 00:03:12,130
testing without tools in Windows because

56
00:03:10,600 --> 00:03:15,850
normally we're using different systems

57
00:03:12,130 --> 00:03:18,670
in order to execute these tools so well

58
00:03:15,850 --> 00:03:20,680
reset rate here because it's not that we

59
00:03:18,670 --> 00:03:23,730
are not going to use the tools we are

60
00:03:20,680 --> 00:03:28,030
going to use the most powerful tool of

61
00:03:23,730 --> 00:03:30,660
Windows which is PowerShell so what's

62
00:03:28,030 --> 00:03:34,390
PowerShell when was it created

63
00:03:30,660 --> 00:03:40,510
PowerShell has been installed by default

64
00:03:34,390 --> 00:03:44,350
since Windows Vista and so on so this is

65
00:03:40,510 --> 00:03:46,328
why I was asking if we could do that pen

66
00:03:44,350 --> 00:03:48,190
testing without the tools this is a tool

67
00:03:46,329 --> 00:03:51,130
of course but it's already installed in

68
00:03:48,190 --> 00:03:52,530
the different versions of Windows we are

69
00:03:51,130 --> 00:03:57,549
going to realize that lease a

70
00:03:52,530 --> 00:04:02,799
multi-platform tool windows tool based

71
00:03:57,549 --> 00:04:04,239
on framework and then we will also we

72
00:04:02,799 --> 00:04:07,810
are also going to learn how to execute

73
00:04:04,239 --> 00:04:11,889
power shell in only lineups and other

74
00:04:07,810 --> 00:04:14,200
operating system the first version of

75
00:04:11,889 --> 00:04:15,790
PowerShell was published which launched

76
00:04:14,200 --> 00:04:17,488
in 2006

77
00:04:15,790 --> 00:04:22,860
second version

78
00:04:17,488 --> 00:04:26,549
was modified and was launched in 2009 in

79
00:04:22,860 --> 00:04:31,470
the third version appeared in 2012

80
00:04:26,550 --> 00:04:37,050
confession in 2013 with Windows 8.1 and

81
00:04:31,470 --> 00:04:43,319
November 4.0 and version number 5 in

82
00:04:37,050 --> 00:04:45,180
2006 the sixth version of PowerShell

83
00:04:43,319 --> 00:04:49,169
became open-source so in the 10th

84
00:04:45,180 --> 00:04:52,319
anniversary of Windows 10 they released

85
00:04:49,169 --> 00:04:54,240
the code and this PowerShell code since

86
00:04:52,319 --> 00:04:57,389
then is compatible with all operating

87
00:04:54,240 --> 00:05:01,310
systems and in fact the source code is

88
00:04:57,389 --> 00:05:04,979
found in the repository and this project

89
00:05:01,310 --> 00:05:07,580
that anyone can clone and modify and

90
00:05:04,979 --> 00:05:09,750
adapt to the different environments and

91
00:05:07,580 --> 00:05:14,190
people can even contribute to this

92
00:05:09,750 --> 00:05:17,729
powershell project resource a 7.0

93
00:05:14,190 --> 00:05:21,479
version which is also open open source

94
00:05:17,729 --> 00:05:24,930
is it is d i mean until 6.0 this version

95
00:05:21,479 --> 00:05:29,849
this powershell was not open source

96
00:05:24,930 --> 00:05:38,130
but since 6.0 and 7.0 it is open open

97
00:05:29,849 --> 00:05:41,940
source and 7.0 is under test if we have

98
00:05:38,130 --> 00:05:43,620
a previous version it may not work we

99
00:05:41,940 --> 00:05:48,180
are going to do any we have a very

100
00:05:43,620 --> 00:05:51,000
updated version we may have some

101
00:05:48,180 --> 00:05:53,780
functionalities that are not compatible

102
00:05:51,000 --> 00:05:53,780
with previous versions

103
00:05:54,259 --> 00:05:58,889
so what frameworks are based on

104
00:05:56,849 --> 00:06:02,719
PowerShell there are several interesting

105
00:05:58,889 --> 00:06:04,740
framework searches powershell mafia

106
00:06:02,719 --> 00:06:06,719
frameworks such as powersploit

107
00:06:04,740 --> 00:06:12,569
well the ones that you can see here on

108
00:06:06,719 --> 00:06:14,849
screen there are many functionalities

109
00:06:12,569 --> 00:06:17,099
related to powershell which are related

110
00:06:14,849 --> 00:06:18,690
to pen testing at the same time another

111
00:06:17,099 --> 00:06:24,240
important project that i want to mention

112
00:06:18,690 --> 00:06:25,510
is empire if you work with empire you

113
00:06:24,240 --> 00:06:28,330
may be familiar with

114
00:06:25,510 --> 00:06:32,400
some methods also different framers our

115
00:06:28,330 --> 00:06:35,620
mission our power view and these are

116
00:06:32,400 --> 00:06:40,960
used being used are fantastic tools in

117
00:06:35,620 --> 00:06:43,750
PowerShell as I was saying when we know

118
00:06:40,960 --> 00:06:44,739
these we say that we have 91 modules

119
00:06:43,750 --> 00:06:47,470
currently loaded

120
00:06:44,740 --> 00:06:52,020
we have listeners we have agents as you

121
00:06:47,470 --> 00:06:52,020
can see here so Empire works as follows

122
00:06:52,050 --> 00:07:00,280
is listening server and any one agent is

123
00:06:55,780 --> 00:07:02,049
a machine in which some phone ability

124
00:07:00,280 --> 00:07:04,539
has been exploited and that has been

125
00:07:02,050 --> 00:07:07,000
connected to that listener so post

126
00:07:04,540 --> 00:07:11,410
exploitation has became be done with

127
00:07:07,000 --> 00:07:16,510
Empire and with 91 modules that are

128
00:07:11,410 --> 00:07:20,290
available so let's move to I believe

129
00:07:16,510 --> 00:07:27,219
she'll because we're going to see the

130
00:07:20,290 --> 00:07:29,760
coding don't worry because this is going

131
00:07:27,220 --> 00:07:32,710
to be very basic I just want to show you

132
00:07:29,760 --> 00:07:35,320
to give you an idea of the basics of

133
00:07:32,710 --> 00:07:40,390
item shell and then we're going to move

134
00:07:35,320 --> 00:07:43,719
to real scenarios so where does IBM

135
00:07:40,390 --> 00:07:45,820
she'll come from so the idea of item

136
00:07:43,720 --> 00:07:48,150
shell behind a bombshell is offering a

137
00:07:45,820 --> 00:07:50,530
pen testing tool available at any time

138
00:07:48,150 --> 00:07:53,890
the different steps that we need to take

139
00:07:50,530 --> 00:07:57,039
in order to have a bombshell in our

140
00:07:53,890 --> 00:07:58,630
equipment the following we don't have to

141
00:07:57,040 --> 00:08:00,730
install anything everything is going to

142
00:07:58,630 --> 00:08:03,070
be stored in the memory but we need to

143
00:08:00,730 --> 00:08:06,330
take four steps we have to open the eye

144
00:08:03,070 --> 00:08:10,180
bombshell of Windows we have to download

145
00:08:06,330 --> 00:08:13,630
Chrome to the memory we are working

146
00:08:10,180 --> 00:08:15,850
directly on the memory we are not taught

147
00:08:13,630 --> 00:08:17,320
in the TSP after that we are going to

148
00:08:15,850 --> 00:08:19,240
execute the prompt and we are going to

149
00:08:17,320 --> 00:08:21,370
have any problems that is going to offer

150
00:08:19,240 --> 00:08:23,580
us many functions that are going to be

151
00:08:21,370 --> 00:08:26,920
on the cloud and will be downloaded

152
00:08:23,580 --> 00:08:31,510
whenever we need them when doing pen

153
00:08:26,920 --> 00:08:34,539
testing and you could be able to do

154
00:08:31,510 --> 00:08:37,360
anything you need so the idea is very

155
00:08:34,539 --> 00:08:39,640
simple there regarding architecture

156
00:08:37,360 --> 00:08:43,240
it work first thing I want to mention is

157
00:08:39,640 --> 00:08:47,680
that everything that we are loading is

158
00:08:43,240 --> 00:08:51,459
going to be downloaded and this is great

159
00:08:47,680 --> 00:08:54,579
because we are going to have an updated

160
00:08:51,459 --> 00:08:56,410
prompt at any time if we develop any

161
00:08:54,579 --> 00:09:01,870
functionality and we uploaded it to

162
00:08:56,410 --> 00:09:05,500
their repository when we can load these

163
00:09:01,870 --> 00:09:09,029
items shell to the memory we are going

164
00:09:05,500 --> 00:09:12,640
to have all new functionalities so from

165
00:09:09,029 --> 00:09:14,589
PowerShell we are going to be in sheet

166
00:09:12,640 --> 00:09:18,880
hat and the response is going to be

167
00:09:14,589 --> 00:09:24,160
injected so when we whenever we are

168
00:09:18,880 --> 00:09:25,839
close in the powershell script of the

169
00:09:24,160 --> 00:09:27,579
new console is going to disappear and

170
00:09:25,839 --> 00:09:29,019
everything every time we are going to

171
00:09:27,579 --> 00:09:31,269
need it we are going to download it from

172
00:09:29,019 --> 00:09:33,010
the internet and when we close the

173
00:09:31,269 --> 00:09:39,399
PowerShell session we will lose all

174
00:09:33,010 --> 00:09:43,360
these things in a bombshell in order to

175
00:09:39,399 --> 00:09:48,010
execute memory stuff powershell a

176
00:09:43,360 --> 00:09:51,910
command invoke expression this invoke

177
00:09:48,010 --> 00:09:54,459
expression execute commands and stores

178
00:09:51,910 --> 00:09:59,100
them in its code here you have an

179
00:09:54,459 --> 00:10:01,689
example if i do i'm involved in a

180
00:09:59,100 --> 00:10:03,490
powershell in PowerShell this is going

181
00:10:01,690 --> 00:10:05,620
to download the script and the function

182
00:10:03,490 --> 00:10:08,199
downloaded is going to be stored in the

183
00:10:05,620 --> 00:10:09,519
memory we will be able to use it this is

184
00:10:08,199 --> 00:10:12,760
what we are going to do with a bombshell

185
00:10:09,519 --> 00:10:16,149
in the end a bombshell is a main

186
00:10:12,760 --> 00:10:18,790
function that is going to load in a

187
00:10:16,149 --> 00:10:20,860
dynamic way different functions but we

188
00:10:18,790 --> 00:10:22,599
are just loading a function in the

189
00:10:20,860 --> 00:10:24,130
memory that we are going to execute

190
00:10:22,600 --> 00:10:28,810
later

191
00:10:24,130 --> 00:10:30,670
here well I'm not going into working

192
00:10:28,810 --> 00:10:33,670
wait forever they perform on consoles

193
00:10:30,670 --> 00:10:36,399
now but this is an example this string

194
00:10:33,670 --> 00:10:39,360
is basically a function which is get

195
00:10:36,399 --> 00:10:42,579
processed if we execute that variable

196
00:10:39,360 --> 00:10:46,089
this is going to bring print on this

197
00:10:42,579 --> 00:10:48,189
screen variable here but if we use

198
00:10:46,089 --> 00:10:50,350
invoke expression this command it's

199
00:10:48,190 --> 00:10:51,610
going to be executed in limbo

200
00:10:50,350 --> 00:10:55,259
I mean this is a command that we have

201
00:10:51,610 --> 00:10:57,699
stored an invocation is going to execute

202
00:10:55,259 --> 00:11:00,430
in order to have our repository on the

203
00:10:57,699 --> 00:11:04,209
internet we also have to use well client

204
00:11:00,430 --> 00:11:05,500
downloading download string it's going

205
00:11:04,209 --> 00:11:07,329
to otherwise it will download from the

206
00:11:05,500 --> 00:11:10,329
internet a series of characters that

207
00:11:07,329 --> 00:11:12,329
codifies the function so we are going to

208
00:11:10,329 --> 00:11:14,469
download a stream of Li you have

209
00:11:12,329 --> 00:11:16,569
repository and we can both invoke

210
00:11:14,470 --> 00:11:19,889
expression we are going to execute it so

211
00:11:16,569 --> 00:11:22,149
the idea behind that is quite simple

212
00:11:19,889 --> 00:11:25,360
this is what we are going to see right

213
00:11:22,149 --> 00:11:30,910
now in the coding this is the main

214
00:11:25,360 --> 00:11:33,730
function this is what we are going to

215
00:11:30,910 --> 00:11:35,199
load the rest of the function so

216
00:11:33,730 --> 00:11:36,610
whenever we want to have any

217
00:11:35,199 --> 00:11:38,859
functionality for example let's imagine

218
00:11:36,610 --> 00:11:42,209
that we want we want to have a

219
00:11:38,860 --> 00:11:45,850
understand in order to analyze the poise

220
00:11:42,209 --> 00:11:48,008
when we execute in the prompt of iPhone

221
00:11:45,850 --> 00:11:51,160
shell the function that we want to

222
00:11:48,009 --> 00:11:53,800
download our port scan this is what's

223
00:11:51,160 --> 00:11:55,600
going to you know the function that we

224
00:11:53,800 --> 00:11:57,519
want to download it's going to download

225
00:11:55,600 --> 00:11:59,230
it from the internet and we it's going

226
00:11:57,519 --> 00:12:02,680
to load it and we will be we will be

227
00:11:59,230 --> 00:12:05,620
able to use these are the functions that

228
00:12:02,680 --> 00:12:08,800
we have right now and while I'm going to

229
00:12:05,620 --> 00:12:12,040
start working from here right now can

230
00:12:08,800 --> 00:12:17,550
you see properly I'm going to start

231
00:12:12,040 --> 00:12:17,550
using their visual studio text editor

232
00:12:23,279 --> 00:12:30,310
function here I want to clean this later

233
00:12:26,410 --> 00:12:36,730
but I want okay let's let me see if I

234
00:12:30,310 --> 00:12:37,719
have something here I was going to open

235
00:12:36,730 --> 00:12:43,060
Aidid had

236
00:12:37,720 --> 00:12:45,579
with a story for you to see for you to

237
00:12:43,060 --> 00:12:49,000
try to access the item shell repository

238
00:12:45,579 --> 00:12:51,969
we have a move so that you could see

239
00:12:49,000 --> 00:12:54,069
this it's structured well but the loader

240
00:12:51,970 --> 00:12:56,829
function is here is one of the first

241
00:12:54,069 --> 00:12:59,349
ones but the main thing about the

242
00:12:56,829 --> 00:13:02,709
console is that this is a function it is

243
00:12:59,350 --> 00:13:08,730
a function that inside is loading other

244
00:13:02,709 --> 00:13:08,729
type of functions that are on the cloud

245
00:13:10,500 --> 00:13:16,180
this is the main the main item shell

246
00:13:13,509 --> 00:13:20,230
directory is me here we have written a

247
00:13:16,180 --> 00:13:23,680
license etc license is open your open

248
00:13:20,230 --> 00:13:28,110
source as I've mentioned and it comes so

249
00:13:23,680 --> 00:13:31,479
is what's on the route here on the route

250
00:13:28,110 --> 00:13:35,620
within that we have the rest of modules

251
00:13:31,480 --> 00:13:37,600
that are on the folder that data here we

252
00:13:35,620 --> 00:13:40,149
have the rest of the modules here in the

253
00:13:37,600 --> 00:13:42,279
route we also have function of point

254
00:13:40,149 --> 00:13:47,949
txt where we have all the functions that

255
00:13:42,279 --> 00:13:50,170
we will be able to download the

256
00:13:47,949 --> 00:13:51,939
presentation I also want to mention that

257
00:13:50,170 --> 00:13:53,620
there are two ways of working the system

258
00:13:51,939 --> 00:13:57,040
is we're going to be always the same

259
00:13:53,620 --> 00:14:00,100
my bomb shell is going to execute in the

260
00:13:57,040 --> 00:14:02,860
memory we have working is everywhere

261
00:14:00,100 --> 00:14:04,899
this is a prompt that you don't have you

262
00:14:02,860 --> 00:14:07,120
know you can load it in the memory and

263
00:14:04,899 --> 00:14:07,420
you're going to use it whenever you need

264
00:14:07,120 --> 00:14:10,089
it

265
00:14:07,420 --> 00:14:13,719
Molly whatever so what's the

266
00:14:10,089 --> 00:14:19,720
architecture so we have our computer and

267
00:14:13,720 --> 00:14:21,009
we have the story our computer from a

268
00:14:19,720 --> 00:14:23,470
bombshell it's going to carry the

269
00:14:21,009 --> 00:14:25,660
profitable of a bombshell

270
00:14:23,470 --> 00:14:31,660
this is going to be a more narrative in

271
00:14:25,660 --> 00:14:35,410
the memory and after that we can start

272
00:14:31,660 --> 00:14:37,719
playing with the environment graphically

273
00:14:35,410 --> 00:14:40,089
what would would be that we have a

274
00:14:37,720 --> 00:14:42,250
console that console is going to write

275
00:14:40,089 --> 00:14:44,139
down all the function that it's reading

276
00:14:42,250 --> 00:14:46,449
it's going to write it down in function

277
00:14:44,139 --> 00:14:46,960
point txt so whenever we want to

278
00:14:46,449 --> 00:14:49,750
implement

279
00:14:46,960 --> 00:14:54,100
and we're going to put it there we are

280
00:14:49,750 --> 00:14:57,670
going to keep it within the four data

281
00:14:54,100 --> 00:14:59,740
folder there is a classification pair

282
00:14:57,670 --> 00:15:02,469
folder so we have a section for bypasses

283
00:14:59,740 --> 00:15:07,000
another section or system and then we

284
00:15:02,470 --> 00:15:12,310
have a series of basic functions which

285
00:15:07,000 --> 00:15:14,320
are on the internet so basically we are

286
00:15:12,310 --> 00:15:15,640
going to install them since the

287
00:15:14,320 --> 00:15:17,050
beginning these functions are going to

288
00:15:15,640 --> 00:15:19,660
allow us to see the functions that we

289
00:15:17,050 --> 00:15:21,069
can download that we can load and the

290
00:15:19,660 --> 00:15:24,339
functions that are available right now

291
00:15:21,070 --> 00:15:27,160
for us to execute these two functions

292
00:15:24,340 --> 00:15:29,410
need to be by default these two his

293
00:15:27,160 --> 00:15:31,180
first basic functions need to be

294
00:15:29,410 --> 00:15:33,010
installed by default otherwise I'm not

295
00:15:31,180 --> 00:15:37,510
going to be able to see the functions

296
00:15:33,010 --> 00:15:40,569
that I am so the XE XE XE to function

297
00:15:37,510 --> 00:15:44,650
also may be by default function test

298
00:15:40,570 --> 00:15:47,290
otherwise I won't be able to exceed we

299
00:15:44,650 --> 00:15:50,140
are going to do our first demo first of

300
00:15:47,290 --> 00:15:58,599
all we are going to see how to load this

301
00:15:50,140 --> 00:16:00,699
into our Windows machine Windows 7 then

302
00:15:58,600 --> 00:16:05,050
we will move to Windows 10 and then we

303
00:16:00,700 --> 00:16:09,640
will also see a problem we may find with

304
00:16:05,050 --> 00:16:13,770
Windows 10 because it is true that we

305
00:16:09,640 --> 00:16:13,770
have also witnessed with Windows 10 even

306
00:16:14,970 --> 00:16:21,190
won't be able to use it of their most

307
00:16:17,680 --> 00:16:22,599
interesting part but for both test

308
00:16:21,190 --> 00:16:46,150
accommodation there are also good news

309
00:16:22,600 --> 00:16:49,480
that we will see later story of a

310
00:16:46,150 --> 00:16:52,240
bombshell heart here we are going to see

311
00:16:49,480 --> 00:17:06,579
the string that we have to copy and

312
00:16:52,240 --> 00:17:08,230
paste we see it so I'm more oriented

313
00:17:06,579 --> 00:17:11,560
towards the second of all what is that

314
00:17:08,230 --> 00:17:21,130
we are going to see which is the first

315
00:17:11,560 --> 00:17:25,000
module here is more similarities now you

316
00:17:21,130 --> 00:17:27,190
seen C 2 and we will see that later what

317
00:17:25,000 --> 00:17:29,080
we have to do here you know that to

318
00:17:27,190 --> 00:17:32,830
download iPhone shall you become the

319
00:17:29,080 --> 00:17:37,149
rapist story is pleasing we are going to

320
00:17:32,830 --> 00:17:42,189
do this from the master branch I'm so

321
00:17:37,150 --> 00:17:45,040
I'm going to copy this we're going to

322
00:17:42,190 --> 00:17:48,010
open our PowerShell you have to be

323
00:17:45,040 --> 00:17:49,240
careful here with quotation mark what

324
00:17:48,010 --> 00:17:51,640
marks because in the readme

325
00:17:49,240 --> 00:17:54,700
I think they added extra rotation marks

326
00:17:51,640 --> 00:17:57,370
well before executing these I would like

327
00:17:54,700 --> 00:18:06,100
to show the functions that we have

328
00:17:57,370 --> 00:18:10,389
stored here right now how shall they

329
00:18:06,100 --> 00:18:15,909
don't so in our memory in my memory have

330
00:18:10,390 --> 00:18:18,910
these functions any consoles here as you

331
00:18:15,910 --> 00:18:21,330
can see but now I'm going to download a

332
00:18:18,910 --> 00:18:21,330
bombshell

333
00:18:38,940 --> 00:18:52,380
okay I couldn't copy it oh okay now it

334
00:18:49,559 --> 00:18:54,149
is be careful with quotation marks

335
00:18:52,380 --> 00:18:59,490
because they know there is a mistake

336
00:18:54,149 --> 00:19:01,939
there okay let's see if I have an

337
00:18:59,490 --> 00:19:01,940
internet connection

338
00:19:02,450 --> 00:19:09,570
okay so we've just went to did happen

339
00:19:06,450 --> 00:19:12,450
once you know the to download these into

340
00:19:09,570 --> 00:19:16,320
the memory and now we're going to

341
00:19:12,450 --> 00:19:19,129
execute it eat any more enemies then you

342
00:19:16,320 --> 00:19:22,080
prompted that we are going to have

343
00:19:19,129 --> 00:19:26,370
wanted to show you how to execute very

344
00:19:22,080 --> 00:19:28,699
well this everywhere it is simple as

345
00:19:26,370 --> 00:19:33,360
this and now I'm going to move to

346
00:19:28,700 --> 00:19:37,320
something else so when we go home in one

347
00:19:33,360 --> 00:19:39,750
second in a way of working here we can

348
00:19:37,320 --> 00:19:42,779
make the motion all the functionalities

349
00:19:39,750 --> 00:19:44,549
I mean if we have a function that is in

350
00:19:42,779 --> 00:19:53,669
the memory one and if we can start

351
00:19:44,549 --> 00:19:57,600
interactive interacting in order to

352
00:19:53,669 --> 00:19:59,370
download from windows without having to

353
00:19:57,600 --> 00:20:01,350
install anything however in this case in

354
00:19:59,370 --> 00:20:03,268
the second way of working this is

355
00:20:01,350 --> 00:20:05,668
different and we thought okay if in

356
00:20:03,269 --> 00:20:07,590
PowerShell I can have a console why

357
00:20:05,669 --> 00:20:11,399
shouldn't we try this console to be

358
00:20:07,590 --> 00:20:14,220
controlled remotely and this is how we

359
00:20:11,399 --> 00:20:17,158
this is why we also need to create a C

360
00:20:14,220 --> 00:20:20,190
to accommodate control this was done in

361
00:20:17,159 --> 00:20:22,320
my son and the way it works is also the

362
00:20:20,190 --> 00:20:27,440
right thing oh so on the one side we

363
00:20:22,320 --> 00:20:29,970
have a album self is already part of

364
00:20:27,440 --> 00:20:31,860
some vulnerabilities have been exploited

365
00:20:29,970 --> 00:20:35,039
and it is integrated already and it is

366
00:20:31,860 --> 00:20:38,189
connected to the teacher I'm a new

367
00:20:35,039 --> 00:20:40,110
console and I've been asked to connect

368
00:20:38,190 --> 00:20:42,809
to you and the dc2 is going to race to

369
00:20:40,110 --> 00:20:43,229
the IBM not see it's not going to say

370
00:20:42,809 --> 00:20:45,770
anything

371
00:20:43,230 --> 00:20:47,840
what's going to happen now in East

372
00:20:45,770 --> 00:20:51,350
they machine it even say that has a

373
00:20:47,840 --> 00:20:53,870
bombshell every five seconds is going to

374
00:20:51,350 --> 00:20:56,990
start launching no there to see if it

375
00:20:53,870 --> 00:20:58,939
has to do anything so every time we are

376
00:20:56,990 --> 00:21:01,040
generating a nice function c2 is going

377
00:20:58,940 --> 00:21:04,100
to keep a fire that is going to be

378
00:21:01,040 --> 00:21:09,710
consulting that infected machine that is

379
00:21:04,100 --> 00:21:12,350
called warrior so as part of its own

380
00:21:09,710 --> 00:21:15,320
name for machines here we've called this

381
00:21:12,350 --> 00:21:17,149
computer water is going to be a warrior

382
00:21:15,320 --> 00:21:18,439
the water is going to be asking

383
00:21:17,150 --> 00:21:20,390
continuously do you have to do something

384
00:21:18,440 --> 00:21:23,210
we'll have to do something whenever it

385
00:21:20,390 --> 00:21:28,610
has to do something it's going to

386
00:21:23,210 --> 00:21:30,680
receive that message and it is going to

387
00:21:28,610 --> 00:21:34,100
execute in memory what it has to do and

388
00:21:30,680 --> 00:21:38,540
it's going to give the results back so

389
00:21:34,100 --> 00:21:42,709
the system is quite simple - and what's

390
00:21:38,540 --> 00:21:45,020
the architecture we have their prompt

391
00:21:42,710 --> 00:21:47,480
executed in a memory process we have a

392
00:21:45,020 --> 00:21:50,150
session that has been created that needs

393
00:21:47,480 --> 00:21:52,930
to be monitored because maybe at some

394
00:21:50,150 --> 00:22:00,590
point their machine that's connected

395
00:21:52,930 --> 00:22:01,820
stops working and there may be also

396
00:22:00,590 --> 00:22:03,230
different computers we may have

397
00:22:01,820 --> 00:22:05,210
different computers some of them with

398
00:22:03,230 --> 00:22:09,290
privileges some of them with abilities

399
00:22:05,210 --> 00:22:12,740
and this is divided in different

400
00:22:09,290 --> 00:22:15,800
sessions that we may be able to control

401
00:22:12,740 --> 00:22:21,350
and we may choose to which session we

402
00:22:15,800 --> 00:22:24,440
want to send the command instead of

403
00:22:21,350 --> 00:22:32,419
having the coding in-house shared as

404
00:22:24,440 --> 00:22:34,130
before so we see in Python programming

405
00:22:32,420 --> 00:22:36,770
we have a PowerShell function this power

406
00:22:34,130 --> 00:22:39,590
cell function is a string that stream

407
00:22:36,770 --> 00:22:41,900
it's going to be downloaded into the

408
00:22:39,590 --> 00:22:47,230
memory it's going to inject that inject

409
00:22:41,900 --> 00:22:49,610
in a memory that way so there are two

410
00:22:47,230 --> 00:22:51,740
files which are very important to module

411
00:22:49,610 --> 00:22:52,909
four that that are very important the

412
00:22:51,740 --> 00:22:55,040
first one is that Lisa

413
00:22:52,910 --> 00:22:58,220
we are going to try to break into that

414
00:22:55,040 --> 00:23:00,560
server that is going to send the

415
00:22:58,220 --> 00:23:02,570
connections from remote machines and

416
00:23:00,560 --> 00:23:05,480
then we if we want to we can create new

417
00:23:02,570 --> 00:23:08,990
worlds if we want to inject new warriors

418
00:23:05,480 --> 00:23:21,050
in that machine so how are we going to

419
00:23:08,990 --> 00:23:24,350
connect to that you see here in this

420
00:23:21,050 --> 00:23:27,280
case I'm going to use Kali but you can

421
00:23:24,350 --> 00:23:29,449
use any other system that you may have

422
00:23:27,280 --> 00:23:31,460
but this is the system that I'm going to

423
00:23:29,450 --> 00:23:34,070
use in order to break into that server

424
00:23:31,460 --> 00:23:48,680
that's going to receive the connections

425
00:23:34,070 --> 00:23:52,149
so first I'm going to prepare it so this

426
00:23:48,680 --> 00:23:54,290
has been downloaded from the repository

427
00:23:52,150 --> 00:23:57,830
this is what we're going to see in our

428
00:23:54,290 --> 00:24:00,680
repository well here we have it all then

429
00:23:57,830 --> 00:24:03,020
called a bombshell secure so here we can

430
00:24:00,680 --> 00:24:05,090
see how everything is divided into parts

431
00:24:03,020 --> 00:24:08,620
and how the everywhere module is

432
00:24:05,090 --> 00:24:15,830
different from the rest of the modules

433
00:24:08,620 --> 00:24:18,379
of them work basic memory everywhere

434
00:24:15,830 --> 00:24:21,350
module keeps all functions in the data

435
00:24:18,380 --> 00:24:24,940
folder the more let's see - that is a

436
00:24:21,350 --> 00:24:28,909
aibum she'll see - folder is completely

437
00:24:24,940 --> 00:24:32,450
separate so if I think here on C - I

438
00:24:28,910 --> 00:24:34,550
have like a new different project which

439
00:24:32,450 --> 00:24:39,920
is command and control once their

440
00:24:34,550 --> 00:24:43,970
prerequisites have been installed we can

441
00:24:39,920 --> 00:24:49,400
execute aibum share in order to obtain

442
00:24:43,970 --> 00:24:52,250
their here and I would have to call the

443
00:24:49,400 --> 00:24:56,270
listener we will see this later when we

444
00:24:52,250 --> 00:24:57,830
start creating modules so now that we

445
00:24:56,270 --> 00:25:02,540
have the listener we are going to go to

446
00:24:57,830 --> 00:25:04,580
the Windows computer and what we're

447
00:25:02,540 --> 00:25:06,610
going to do is to execute the console

448
00:25:04,580 --> 00:25:11,980
you know that T

449
00:25:06,610 --> 00:25:13,809
Silas and I are there silently this is a

450
00:25:11,980 --> 00:25:20,289
flood that is going to indicate that we

451
00:25:13,809 --> 00:25:31,510
want to connect remotely well I haven't

452
00:25:20,289 --> 00:25:33,250
configurated the interface ok I love you

453
00:25:31,510 --> 00:25:40,809
and you know they're ready to find it

454
00:25:33,250 --> 00:25:46,450
but yeah if everything Kali 10003 and

455
00:25:40,809 --> 00:25:49,059
Windows machine is co-ceo seven now we

456
00:25:46,450 --> 00:25:50,769
are executing this super power that has

457
00:25:49,059 --> 00:25:54,460
been installed but later in the real

458
00:25:50,769 --> 00:25:57,789
demonstration I will inject this console

459
00:25:54,460 --> 00:26:19,870
with an exploitation process we can

460
00:25:57,789 --> 00:26:23,559
exploit process ok it's not working we

461
00:26:19,870 --> 00:26:27,510
have to with us to define the port which

462
00:26:23,559 --> 00:26:32,549
will have it we've just done a remote

463
00:26:27,510 --> 00:26:35,260
connection we've configured and this is

464
00:26:32,549 --> 00:26:39,460
what we're going to do come on that

465
00:26:35,260 --> 00:26:44,279
you've seen so silently that is related

466
00:26:39,460 --> 00:26:44,279
to an IP is what we are going to inject

467
00:26:44,340 --> 00:26:51,668
the exploit process is the part that we

468
00:26:47,529 --> 00:26:54,519
will inject later so these are the

469
00:26:51,669 --> 00:26:56,230
different ways of working I think that

470
00:26:54,519 --> 00:26:57,850
they are completely really well if we

471
00:26:56,230 --> 00:27:01,450
have the everywhere mode

472
00:26:57,850 --> 00:27:09,629
I mean silently mode we are very

473
00:27:01,450 --> 00:27:13,080
different as you have seen once again

474
00:27:09,630 --> 00:27:16,210
we're going to be able to cooperate with

475
00:27:13,080 --> 00:27:18,178
the project if you're good at writing in

476
00:27:16,210 --> 00:27:20,789
PowerShell or Python

477
00:27:18,179 --> 00:27:24,960
you want to see daddy they code if you

478
00:27:20,789 --> 00:27:27,269
want to modify modified and improved

479
00:27:24,960 --> 00:27:30,179
version you can do it I mean they're

480
00:27:27,269 --> 00:27:37,289
people that have collaborated there at

481
00:27:30,179 --> 00:27:40,980
least I see two right recently I think

482
00:27:37,289 --> 00:27:43,350
in and there was AI someone that did an

483
00:27:40,980 --> 00:27:48,090
graphic interface in order to control t2

484
00:27:43,350 --> 00:27:50,879
for example this is a 14 year all young

485
00:27:48,090 --> 00:27:53,580
neither like programming and decided to

486
00:27:50,879 --> 00:27:55,889
do that so if you also like programming

487
00:27:53,580 --> 00:27:59,039
and you want to extend the functionality

488
00:27:55,889 --> 00:28:03,059
of the project you can do it I mean I

489
00:27:59,039 --> 00:28:05,220
don't she'll is I told that quite under

490
00:28:03,059 --> 00:28:06,928
development

491
00:28:05,220 --> 00:28:09,240
I mean it is like our beta version it's

492
00:28:06,929 --> 00:28:14,399
not a final version but it's true that

493
00:28:09,240 --> 00:28:16,409
with people that used PowerShell in

494
00:28:14,399 --> 00:28:18,090
order to do pentesting we've seen

495
00:28:16,409 --> 00:28:21,840
several presentations about that and I

496
00:28:18,090 --> 00:28:25,168
thought this is great because we are

497
00:28:21,840 --> 00:28:29,879
starting like I mean to develop the tool

498
00:28:25,169 --> 00:28:31,649
and and we want people to use it and we

499
00:28:29,879 --> 00:28:35,399
want of course people to collaborate so

500
00:28:31,649 --> 00:28:37,939
that gross so some of the

501
00:28:35,399 --> 00:28:42,899
characteristics PowerShell the Python

502
00:28:37,940 --> 00:28:45,330
3.6 3.6 then you license docker if you

503
00:28:42,899 --> 00:28:48,330
want to use docker we've done I mean an

504
00:28:45,330 --> 00:28:48,960
image that you can use in order to

505
00:28:48,330 --> 00:28:55,590
download

506
00:28:48,960 --> 00:28:58,889
PowerShell and they Python for you to

507
00:28:55,590 --> 00:29:00,269
play with the two modes

508
00:28:58,889 --> 00:29:03,719
don't become talker and then we also

509
00:29:00,269 --> 00:29:07,710
have their papers and papers in which

510
00:29:03,720 --> 00:29:08,999
there are many more these about my

511
00:29:07,710 --> 00:29:10,950
presentation today if you have any

512
00:29:08,999 --> 00:29:16,889
questions you can go to the papers

513
00:29:10,950 --> 00:29:18,809
section it will of course has evolved

514
00:29:16,889 --> 00:29:22,939
since the papers but the core and the

515
00:29:18,809 --> 00:29:22,940
functionality is well explained there

516
00:29:24,289 --> 00:29:31,680
how we're going to create materials

517
00:29:27,919 --> 00:29:36,330
first of all if we're going to create it

518
00:29:31,680 --> 00:29:43,200
for the everywhere mode or if we create

519
00:29:36,330 --> 00:29:44,939
more deals for PowerShell you're going

520
00:29:43,200 --> 00:29:47,370
to see I'm going to show you some of the

521
00:29:44,940 --> 00:29:51,000
functions we're not still using the

522
00:29:47,370 --> 00:30:00,120
instructor but when you use the help

523
00:29:51,000 --> 00:30:02,670
command lines as a description of what

524
00:30:00,120 --> 00:30:05,340
we're going to do so when executing

525
00:30:02,670 --> 00:30:10,460
their help module we're going to get

526
00:30:05,340 --> 00:30:13,620
this information otherwise if you do

527
00:30:10,460 --> 00:30:15,480
functionality on PowerShell you don't

528
00:30:13,620 --> 00:30:19,139
load it and you don't know how to use it

529
00:30:15,480 --> 00:30:21,870
then here you have a description set up

530
00:30:19,140 --> 00:30:26,010
shares what parameters you need to enter

531
00:30:21,870 --> 00:30:27,899
and when you execute the help command it

532
00:30:26,010 --> 00:30:34,770
will help you to understand what's what

533
00:30:27,900 --> 00:30:43,440
is going on let's see the code of a

534
00:30:34,770 --> 00:30:47,040
certain function this is a function that

535
00:30:43,440 --> 00:30:50,670
I downloaded from the internet it is not

536
00:30:47,040 --> 00:30:55,500
still implemented on PowerShell but we

537
00:30:50,670 --> 00:30:58,640
will see later the function in order to

538
00:30:55,500 --> 00:31:02,850
download external power shell functions

539
00:30:58,640 --> 00:31:09,150
in addition to those which are gathered

540
00:31:02,850 --> 00:31:12,840
at a bombshell repository this functions

541
00:31:09,150 --> 00:31:15,210
name is dead system info which offers

542
00:31:12,840 --> 00:31:18,659
you a brief description of the system

543
00:31:15,210 --> 00:31:21,840
you're executing it is divided into

544
00:31:18,660 --> 00:31:25,050
several functions because when I execute

545
00:31:21,840 --> 00:31:30,600
these in Power Cells it will be executed

546
00:31:25,050 --> 00:31:34,830
at system information even if the name

547
00:31:30,600 --> 00:31:38,429
of the file is get system info the main

548
00:31:34,830 --> 00:31:41,730
functions name is get system information

549
00:31:38,430 --> 00:31:44,050
this one the PS one has several

550
00:31:41,730 --> 00:31:47,260
functions which will be

551
00:31:44,050 --> 00:31:52,889
when the main function is called and all

552
00:31:47,260 --> 00:31:55,600
of them have you know that you have

553
00:31:52,890 --> 00:32:00,610
parameters I not serious description and

554
00:31:55,600 --> 00:32:04,149
so on so we should get system it says

555
00:32:00,610 --> 00:32:06,879
main function it has it sign up sales

556
00:32:04,150 --> 00:32:09,580
description how it is used and then you

557
00:32:06,880 --> 00:32:20,320
will be able to use it if I'm not wrong

558
00:32:09,580 --> 00:32:26,649
I think I had it over here I hurry done

559
00:32:20,320 --> 00:32:31,889
de Cali retool machine I am going to do

560
00:32:26,650 --> 00:32:31,890
in line with the following demonstration

561
00:32:34,200 --> 00:32:40,350
to have a bombshell on your own server

562
00:32:37,630 --> 00:32:46,180
I'm going to download it

563
00:32:40,350 --> 00:32:49,060
Judis let's imagine now we're saying

564
00:32:46,180 --> 00:32:52,660
that this a bombshell is indeed hub and

565
00:32:49,060 --> 00:32:56,200
that's the philosophy the idea is to be

566
00:32:52,660 --> 00:33:00,450
able to download it at any time from

567
00:32:56,200 --> 00:33:03,670
github if you have access to internet

568
00:33:00,450 --> 00:33:05,770
let's imagine we are in an internal

569
00:33:03,670 --> 00:33:08,530
network and there are only a few

570
00:33:05,770 --> 00:33:10,960
computers within that network but we do

571
00:33:08,530 --> 00:33:14,230
not have yet happen that's what I'm

572
00:33:10,960 --> 00:33:17,020
going to do I'm going to use to do my

573
00:33:14,230 --> 00:33:20,860
demonstration you know the tool left to

574
00:33:17,020 --> 00:33:24,010
this server and then we will be able to

575
00:33:20,860 --> 00:33:26,590
play with our own server and I'm going

576
00:33:24,010 --> 00:33:29,170
to download it from github as I did in

577
00:33:26,590 --> 00:33:33,240
my first demonstration what I'm going to

578
00:33:29,170 --> 00:33:36,070
do is to have it on my own server if I

579
00:33:33,240 --> 00:33:39,400
do some if I make some changes

580
00:33:36,070 --> 00:33:42,850
everything will be in my virtual machine

581
00:33:39,400 --> 00:33:46,450
so what are we going to do first of all

582
00:33:42,850 --> 00:33:49,750
we are going to download the iBook

583
00:33:46,450 --> 00:33:51,280
shellcode in the server that was select

584
00:33:49,750 --> 00:33:53,380
I'm going to you

585
00:33:51,280 --> 00:33:56,920
Kalli machine in order to do it here

586
00:33:53,380 --> 00:33:59,830
then we're going to do the invoke

587
00:33:56,920 --> 00:34:01,660
expression to call the part of the

588
00:33:59,830 --> 00:34:05,260
memory and it is going to be mounted

589
00:34:01,660 --> 00:34:08,800
here in our repository so what are we

590
00:34:05,260 --> 00:34:15,820
going to modify if we review the console

591
00:34:08,800 --> 00:34:19,510
code we can take a look at code revision

592
00:34:15,820 --> 00:34:23,890
of no more consult here you have some

593
00:34:19,510 --> 00:34:26,830
parameters it can be used in proxy we

594
00:34:23,889 --> 00:34:29,830
have the assignments lee mode so there

595
00:34:26,830 --> 00:34:32,199
will be a condition which says if this

596
00:34:29,830 --> 00:34:35,319
is here you're going to execute it in

597
00:34:32,199 --> 00:34:38,408
another way here if you have the loader

598
00:34:35,320 --> 00:34:40,810
function through which you are going to

599
00:34:38,409 --> 00:34:43,690
receive the function then you want to

600
00:34:40,810 --> 00:34:46,600
download and this is the one that we

601
00:34:43,690 --> 00:34:51,130
load that fraction you know the to do

602
00:34:46,600 --> 00:34:53,620
cell eight recurs to make request so

603
00:34:51,130 --> 00:34:56,740
there is a function that makes the

604
00:34:53,620 --> 00:34:59,170
request and the request will send us a

605
00:34:56,739 --> 00:35:02,430
string in order to inject it in the

606
00:34:59,170 --> 00:35:06,100
memory here we have several functions

607
00:35:02,430 --> 00:35:09,190
such as the read functions function and

608
00:35:06,100 --> 00:35:12,250
there is another one in order to say if

609
00:35:09,190 --> 00:35:14,920
in do register and here it's the

610
00:35:12,250 --> 00:35:17,320
important part where are we going to

611
00:35:14,920 --> 00:35:21,370
point at where I am going to download it

612
00:35:17,320 --> 00:35:24,790
from we need to do some modifications I

613
00:35:21,370 --> 00:35:29,109
wish that in the future we will be able

614
00:35:24,790 --> 00:35:33,029
to modify it and set it up without

615
00:35:29,110 --> 00:35:36,640
loosing the main nature of a bombshell

616
00:35:33,030 --> 00:35:39,870
I'm not paying for a server I'm done

617
00:35:36,640 --> 00:35:39,870
loaded in directly

618
00:35:44,970 --> 00:35:53,500
we need to reject because everything we

619
00:35:49,180 --> 00:35:56,680
write has to be redirected if we have

620
00:35:53,500 --> 00:36:01,089
the silence li mode it is going to

621
00:35:56,680 --> 00:36:03,790
execute everything here otherwise if

622
00:36:01,089 --> 00:36:09,549
it's not silently mode it will go on the

623
00:36:03,790 --> 00:36:12,640
other side so here it's where we're

624
00:36:09,550 --> 00:36:21,190
going to point that I have modified it

625
00:36:12,640 --> 00:36:23,230
already here let's say if it's over here

626
00:36:21,190 --> 00:36:25,780
yeah here it is

627
00:36:23,230 --> 00:36:30,490
so I am lifting it to my own machine

628
00:36:25,780 --> 00:36:34,859
which is set up with a 1000 3 with the

629
00:36:30,490 --> 00:36:34,859
port number 8,000 yeah

630
00:36:50,050 --> 00:36:58,460
as I was sayin will lift our server on

631
00:36:55,070 --> 00:37:01,640
this machine the East easiest and

632
00:36:58,460 --> 00:37:05,030
fastest way to do it is that I could use

633
00:37:01,640 --> 00:37:15,620
an Apache but there is another easier

634
00:37:05,030 --> 00:37:21,070
way which is Python when I learnt the

635
00:37:15,620 --> 00:37:21,069
Python with the mode simple HTTP server

636
00:37:24,370 --> 00:37:35,509
because it has left it a server and if I

637
00:37:28,760 --> 00:37:38,240
access the direction 1000 3 where the

638
00:37:35,510 --> 00:37:41,750
server has been lifted will see the root

639
00:37:38,240 --> 00:37:47,109
of where I am so I am within I won't

640
00:37:41,750 --> 00:37:53,720
share part ok so here we have our server

641
00:37:47,110 --> 00:37:57,920
everything's right over here Windows

642
00:37:53,720 --> 00:38:03,230
machine the only thing I'm going to do

643
00:37:57,920 --> 00:38:11,090
here this is the listener but I'm going

644
00:38:03,230 --> 00:38:13,370
to point at you need to make a

645
00:38:11,090 --> 00:38:17,930
distinguish between the listener which

646
00:38:13,370 --> 00:38:22,670
is in port 8080 and the repository which

647
00:38:17,930 --> 00:38:28,069
is in port 8000 here I have the

648
00:38:22,670 --> 00:38:42,410
connection notice that we were pointing

649
00:38:28,070 --> 00:38:47,840
at did have to load this memory part it

650
00:38:42,410 --> 00:38:50,140
from our virtual machine from Daisy 1000

651
00:38:47,840 --> 00:38:50,140
three

652
00:38:50,710 --> 00:39:00,590
so that's how you lift a Bible on our

653
00:38:56,270 --> 00:39:03,350
own server you have seen is quite easy

654
00:39:00,590 --> 00:39:10,040
to do do you just have to do three steps

655
00:39:03,350 --> 00:39:12,290
to have our own i bombshell in our cally

656
00:39:10,040 --> 00:39:19,130
machine which is the server that i just

657
00:39:12,290 --> 00:39:21,980
created make some changes on this cally

658
00:39:19,130 --> 00:39:34,190
machine which will be reflected on that

659
00:39:21,980 --> 00:39:37,790
i powershell about modules and ways of

660
00:39:34,190 --> 00:39:40,250
working if we if we have looked at

661
00:39:37,790 --> 00:39:44,380
functions on i bombshell

662
00:39:40,250 --> 00:39:48,640
let's see how those functions work here

663
00:39:44,380 --> 00:39:52,250
I was saying within a bombshell

664
00:39:48,640 --> 00:39:55,640
repository you have I bones shall see

665
00:39:52,250 --> 00:39:58,250
two which is pythons part if you look at

666
00:39:55,640 --> 00:40:00,290
here you have several functions we can

667
00:39:58,250 --> 00:40:06,800
review some of them first of all you

668
00:40:00,290 --> 00:40:09,170
have template dot P I which tells you

669
00:40:06,800 --> 00:40:12,580
how to implement a second module from

670
00:40:09,170 --> 00:40:17,360
the city this is a custom module object

671
00:40:12,580 --> 00:40:21,500
that depends on module and we have all

672
00:40:17,360 --> 00:40:26,000
the information about it in order to

673
00:40:21,500 --> 00:40:28,730
show what that module does we also have

674
00:40:26,000 --> 00:40:32,960
the options we will need we will always

675
00:40:28,730 --> 00:40:38,330
need it to be pointed at where one of

676
00:40:32,960 --> 00:40:42,290
our machines undersea to control is to

677
00:40:38,330 --> 00:40:44,840
know where we're going to send our

678
00:40:42,290 --> 00:40:47,600
functions and then we have the variable

679
00:40:44,840 --> 00:40:51,620
variables that we want to select maybe

680
00:40:47,600 --> 00:40:54,980
we want to execute a command so we would

681
00:40:51,620 --> 00:40:57,740
need a way to reset a code to send a

682
00:40:54,980 --> 00:41:02,410
common and we will do

683
00:40:57,740 --> 00:41:07,640
here we have a list with three values

684
00:41:02,410 --> 00:41:12,618
initial value if we want to give it one

685
00:41:07,640 --> 00:41:16,430
we see it in the listener mode if we

686
00:41:12,619 --> 00:41:19,340
lift the listener mode it says that you

687
00:41:16,430 --> 00:41:23,629
will be redirected to the port 8080

688
00:41:19,340 --> 00:41:29,920
unless it specified the opposite then we

689
00:41:23,630 --> 00:41:32,420
have description and finally you have

690
00:41:29,920 --> 00:41:35,720
the information of whether it is

691
00:41:32,420 --> 00:41:38,650
recovered or not if it is required

692
00:41:35,720 --> 00:41:44,390
you cannot launch this module without

693
00:41:38,650 --> 00:41:50,030
activating this option if you will so

694
00:41:44,390 --> 00:41:56,750
you need this option is required and

695
00:41:50,030 --> 00:41:58,760
then it needs to be activated then you

696
00:41:56,750 --> 00:42:04,000
have the information of the module then

697
00:41:58,760 --> 00:42:08,270
you have the rim method which is

698
00:42:04,000 --> 00:42:13,760
PowerShell function but the project is

699
00:42:08,270 --> 00:42:17,480
from Python and this string is belong

700
00:42:13,760 --> 00:42:21,200
the PowerShell function installed in our

701
00:42:17,480 --> 00:42:23,869
memory the first thing you need to do is

702
00:42:21,200 --> 00:42:28,009
to define the function but you need to

703
00:42:23,869 --> 00:42:32,660
call it and in order to do so this file

704
00:42:28,010 --> 00:42:38,300
is going to look for our where air if

705
00:42:32,660 --> 00:42:41,779
our warrior execute is these function on

706
00:42:38,300 --> 00:42:44,810
the memory you need to execute it and

707
00:42:41,780 --> 00:42:50,390
then you have to execute this boom

708
00:42:44,810 --> 00:42:53,090
function so boom - M because we had a

709
00:42:50,390 --> 00:42:56,690
message that indicated true so at least

710
00:42:53,090 --> 00:42:59,420
we need to add it here this is going to

711
00:42:56,690 --> 00:43:01,760
generate a file which is going to be

712
00:42:59,420 --> 00:43:04,190
called by the warrior and it is going to

713
00:43:01,760 --> 00:43:07,910
be downloaded as you see it is quite

714
00:43:04,190 --> 00:43:08,330
easy to create modules my Python modules

715
00:43:07,910 --> 00:43:11,480
are

716
00:43:08,330 --> 00:43:13,580
right easy the most difficult part is

717
00:43:11,480 --> 00:43:21,530
the eye bombshell part because it is

718
00:43:13,580 --> 00:43:24,319
what's going to be executed this is

719
00:43:21,530 --> 00:43:28,790
quite easy unity for cues mainly on

720
00:43:24,320 --> 00:43:39,200
power cell scripts if for example we

721
00:43:28,790 --> 00:43:42,860
opened a listener a different one

722
00:43:39,200 --> 00:43:49,700
because we're left in a server even if

723
00:43:42,860 --> 00:43:52,520
it is listener were left in a server why

724
00:43:49,700 --> 00:43:55,370
we are going to make consultations on in

725
00:43:52,520 --> 00:43:58,700
order to see if they contain something

726
00:43:55,370 --> 00:44:02,420
so it is a bit different from the others

727
00:43:58,700 --> 00:44:05,899
if we open another one like this one we

728
00:44:02,420 --> 00:44:08,840
see that we also have the function maybe

729
00:44:05,900 --> 00:44:12,110
it is a more it is more complex than the

730
00:44:08,840 --> 00:44:14,060
template but you have the real one we'll

731
00:44:12,110 --> 00:44:19,820
start from the beginning we have the

732
00:44:14,060 --> 00:44:21,620
definition of dimaggio it's requirements

733
00:44:19,820 --> 00:44:24,170
and so on and then we have the real

734
00:44:21,620 --> 00:44:27,290
module with the power shell function

735
00:44:24,170 --> 00:44:30,500
which is verifying some conditions in

736
00:44:27,290 --> 00:44:33,500
order to enter some things or other

737
00:44:30,500 --> 00:44:43,580
things then the power shell function and

738
00:44:33,500 --> 00:44:46,310
to call memory okay now we're going to

739
00:44:43,580 --> 00:44:48,860
see a real scenario now we know the two

740
00:44:46,310 --> 00:44:50,390
we know how to create modules we know

741
00:44:48,860 --> 00:44:53,600
the two ways of working

742
00:44:50,390 --> 00:44:56,180
we have tried them only on the surface

743
00:44:53,600 --> 00:44:59,240
but we're going to try them now in a

744
00:44:56,180 --> 00:45:01,310
real environment this is the scenario

745
00:44:59,240 --> 00:45:04,189
we're going to follow we have the callee

746
00:45:01,310 --> 00:45:07,370
machine where we have the repository

747
00:45:04,190 --> 00:45:10,610
which is going to be pointed there and

748
00:45:07,370 --> 00:45:12,770
we have the listener then we have the

749
00:45:10,610 --> 00:45:15,830
windows 7 machine

750
00:45:12,770 --> 00:45:17,960
the Windows 10 machine the first

751
00:45:15,830 --> 00:45:21,920
demonstrations were going to do are the

752
00:45:17,960 --> 00:45:24,830
following only with Windows 7 machine

753
00:45:21,920 --> 00:45:28,160
and to know the everywhere mode then

754
00:45:24,830 --> 00:45:31,250
we're going to have the 1001 with the

755
00:45:28,160 --> 00:45:34,310
listener and our idea was going to send

756
00:45:31,250 --> 00:45:38,330
it from this machine to the Windows 7

757
00:45:34,310 --> 00:45:40,970
machine and finally to pass it from with

758
00:45:38,330 --> 00:45:47,900
the 7 to Windows 10 everything through I

759
00:45:40,970 --> 00:45:50,720
Borgia so let's go for it and before

760
00:45:47,900 --> 00:45:59,780
this one turns off I'm going to reset it

761
00:45:50,720 --> 00:46:05,149
manually if it allows me to do so they

762
00:45:59,780 --> 00:46:06,950
have 90 days trial they can reset

763
00:46:05,150 --> 00:46:10,550
themselves and I don't want it to happen

764
00:46:06,950 --> 00:46:14,950
in the middle of the demonstration I'm

765
00:46:10,550 --> 00:46:20,570
going to wait a little bit in before

766
00:46:14,950 --> 00:46:24,379
start in Windows 10 ok machines are

767
00:46:20,570 --> 00:46:27,280
connected within an internal network all

768
00:46:24,380 --> 00:46:34,430
of them are connected to each other

769
00:46:27,280 --> 00:46:38,450
Windows 7 Windows 10 and Kali I have in

770
00:46:34,430 --> 00:46:40,669
Kali we have the listener which he was

771
00:46:38,450 --> 00:46:46,520
executing but I'm going to stop it

772
00:46:40,670 --> 00:46:49,940
because the Windows 7 machine if we turn

773
00:46:46,520 --> 00:46:55,580
it on it will have turned this one off

774
00:46:49,940 --> 00:47:00,580
it says is dead detects it's that every

775
00:46:55,580 --> 00:47:05,090
time you leave the C 2 mode the files

776
00:47:00,580 --> 00:47:07,609
dead because in the end it is always

777
00:47:05,090 --> 00:47:11,270
making consultations on whether there

778
00:47:07,609 --> 00:47:15,340
are or not any files and we're going to

779
00:47:11,270 --> 00:47:15,340
lift it on our own repository

780
00:47:24,619 --> 00:47:30,529
okay let's move on to powershell now I

781
00:47:31,940 --> 00:47:40,559
will leave this open for later and we're

782
00:47:37,859 --> 00:47:43,470
going to download the everywhere mode if

783
00:47:40,559 --> 00:47:48,390
we want it if you want to work on

784
00:47:43,470 --> 00:47:58,049
everywhere mode let's see if it allows

785
00:47:48,390 --> 00:48:00,058
me to do so okay let's see since we have

786
00:47:58,049 --> 00:48:03,839
seen everything we're going to focus on

787
00:48:00,059 --> 00:48:07,109
the tool itself what can we do with a

788
00:48:03,839 --> 00:48:12,299
bombshell in everywhere mode let's do a

789
00:48:07,109 --> 00:48:15,480
small demonstration if you don't have

790
00:48:12,299 --> 00:48:19,319
the manual of instructions to read it it

791
00:48:15,480 --> 00:48:22,440
can be actually a bit intuitive it says

792
00:48:19,319 --> 00:48:24,869
you can use show Commerce in order to

793
00:48:22,440 --> 00:48:27,720
see what commands are available to be

794
00:48:24,869 --> 00:48:30,450
downloaded and then you have this show

795
00:48:27,720 --> 00:48:33,720
function in order to see what we can

796
00:48:30,450 --> 00:48:36,930
execute because we have downloaded it

797
00:48:33,720 --> 00:48:40,609
already we have all these available I am

798
00:48:36,930 --> 00:48:44,660
going to start loading basic function

799
00:48:40,609 --> 00:48:50,660
for example the help function how can i

800
00:48:44,660 --> 00:48:54,930
download the functions just clicking on

801
00:48:50,660 --> 00:49:00,899
just copying the name of it in the case

802
00:48:54,930 --> 00:49:04,078
of help it is not in any subfolder in

803
00:49:00,900 --> 00:49:06,630
any category so function loaded so the

804
00:49:04,079 --> 00:49:12,690
following that we can load in order to

805
00:49:06,630 --> 00:49:15,510
scan ports is here in scanner TCPS come

806
00:49:12,690 --> 00:49:19,319
there is a function that analyzes ports

807
00:49:15,510 --> 00:49:23,730
so let's copy it how can i load

808
00:49:19,319 --> 00:49:28,619
functions just type in their name and

809
00:49:23,730 --> 00:49:31,900
how can i execute them now just invoking

810
00:49:28,619 --> 00:49:34,839
that I may not know how to use these

811
00:49:31,900 --> 00:49:38,950
module so then I execute the help

812
00:49:34,839 --> 00:49:45,250
function and here I have the information

813
00:49:38,950 --> 00:49:48,339
of the module this is a beta version so

814
00:49:45,250 --> 00:49:57,730
there are some things that have not been

815
00:49:48,339 --> 00:50:00,250
yet implemented we want instruction

816
00:49:57,730 --> 00:50:03,400
information for people to know how to

817
00:50:00,250 --> 00:50:07,299
use it and here we have the basics

818
00:50:03,400 --> 00:50:12,789
intern syntax of this function as you

819
00:50:07,299 --> 00:50:15,400
can seen I have lifted the 8080 the 8000

820
00:50:12,789 --> 00:50:21,730
port in the callee machine so I am going

821
00:50:15,400 --> 00:50:25,900
to execute TCP scanned from a range only

822
00:50:21,730 --> 00:50:31,329
not too not free to take it long so I'm

823
00:50:25,900 --> 00:50:38,289
going to invoke TCP scanned with IP 1000

824
00:50:31,329 --> 00:50:41,609
3 and let's specify a range seven nine

825
00:50:38,289 --> 00:50:47,980
nine nine two eight zero zero zero one

826
00:50:41,609 --> 00:50:51,308
so these start scanning and there it is

827
00:50:47,980 --> 00:50:57,849
upward scanning in memory you don't need

828
00:50:51,309 --> 00:51:01,240
an nmap in other to scan ports if

829
00:50:57,849 --> 00:51:03,970
everything is destroyed somebody may

830
00:51:01,240 --> 00:51:07,118
think isn't it isn't there any

831
00:51:03,970 --> 00:51:11,288
possibility to be able to save what we

832
00:51:07,119 --> 00:51:14,109
have in the memory for example I do a

833
00:51:11,289 --> 00:51:19,410
lot of audits and I usually start with

834
00:51:14,109 --> 00:51:22,420
theses TCP scan can I already save those

835
00:51:19,410 --> 00:51:25,000
functions you know that not to download

836
00:51:22,420 --> 00:51:30,339
them all the time in memory yes we have

837
00:51:25,000 --> 00:51:30,819
the save function look look at what it's

838
00:51:30,339 --> 00:51:35,288
doing

839
00:51:30,819 --> 00:51:35,900
it is directing to the registry it is

840
00:51:35,289 --> 00:51:38,720
saved

841
00:51:35,900 --> 00:51:42,230
all these scripts that we have

842
00:51:38,720 --> 00:51:48,129
downloaded here in this case only help

843
00:51:42,230 --> 00:51:48,130
function and TCP scam function it has

844
00:51:48,880 --> 00:52:00,410
the current user it has created an entry

845
00:51:53,690 --> 00:52:10,490
line by line to recover it later let's

846
00:52:00,410 --> 00:52:13,730
go to the registry so you see I should

847
00:52:10,490 --> 00:52:16,578
have shown here these earlier but if you

848
00:52:13,730 --> 00:52:20,900
execute this on your computer you won't

849
00:52:16,579 --> 00:52:24,619
have it it has saved their functions I

850
00:52:20,900 --> 00:52:27,829
have downloaded their help on TCP

851
00:52:24,619 --> 00:52:32,390
functions and look at what it does it is

852
00:52:27,829 --> 00:52:35,119
storing the function in register code so

853
00:52:32,390 --> 00:52:38,240
that when we open a bombshell the first

854
00:52:35,119 --> 00:52:40,970
thing we're going to do is to look at

855
00:52:38,240 --> 00:52:43,758
the registry if there is something on

856
00:52:40,970 --> 00:52:50,328
the registry it is going to load that

857
00:52:43,759 --> 00:52:54,890
content so if everything works fine I am

858
00:52:50,329 --> 00:52:57,380
going yeah I am going to live here to

859
00:52:54,890 --> 00:52:59,808
quit and I am going to launch the

860
00:52:57,380 --> 00:53:03,170
console usually this function is not

861
00:52:59,809 --> 00:53:06,710
loaded but when I launch it it is going

862
00:53:03,170 --> 00:53:11,440
to make a consultation on the registry

863
00:53:06,710 --> 00:53:11,440
in order to download our functions

864
00:53:15,160 --> 00:53:21,140
let's see these usually takes longer

865
00:53:18,349 --> 00:53:24,920
because it has to recover from the

866
00:53:21,140 --> 00:53:27,430
registry let's see if it loads the

867
00:53:24,920 --> 00:53:27,430
functions

868
00:53:31,930 --> 00:53:39,558
otherwise I will download it again

869
00:53:35,650 --> 00:53:42,579
yes that's what I'm going to do because

870
00:53:39,559 --> 00:53:42,579
it's made slow

871
00:53:59,240 --> 00:54:12,470
let's see if it loads it yes we see them

872
00:54:07,980 --> 00:54:16,470
here if we didn't have these functions

873
00:54:12,470 --> 00:54:19,049
in the beginning since now I have copied

874
00:54:16,470 --> 00:54:27,209
them I have been available for me to

875
00:54:19,050 --> 00:54:31,080
execute them but maybe we did not have

876
00:54:27,210 --> 00:54:35,330
access to info to internet in agonal

877
00:54:31,080 --> 00:54:41,840
repository there is a part that invokes

878
00:54:35,330 --> 00:54:47,490
PowerShell that needs to load the

879
00:54:41,840 --> 00:54:49,230
console mode from the registry that's

880
00:54:47,490 --> 00:54:51,419
what you will need to do if you don't

881
00:54:49,230 --> 00:54:54,570
have access to the Internet and then you

882
00:54:51,420 --> 00:54:59,120
could keep on working another function I

883
00:54:54,570 --> 00:55:04,200
had mentioned was there a possibility to

884
00:54:59,120 --> 00:55:09,540
download external functions I'm going to

885
00:55:04,200 --> 00:55:13,529
see the commands yeah it is this one the

886
00:55:09,540 --> 00:55:17,279
loader text to load external functions

887
00:55:13,530 --> 00:55:21,450
since I am pointing at the normal server

888
00:55:17,280 --> 00:55:25,470
now this may not work because all the

889
00:55:21,450 --> 00:55:32,879
references are pointing at github let's

890
00:55:25,470 --> 00:55:36,240
see if it works we have a small catalog

891
00:55:32,880 --> 00:55:40,080
as a sample catalog because here we're

892
00:55:36,240 --> 00:55:44,390
pointing at Empire projects we have also

893
00:55:40,080 --> 00:55:49,650
PowerShell Mafia the powers Boy Floyd

894
00:55:44,390 --> 00:55:51,779
that has many functionalities and we

895
00:55:49,650 --> 00:55:58,430
have decided to include some of them

896
00:55:51,780 --> 00:55:58,430
here I can't open any more

897
00:55:58,950 --> 00:56:04,379
let's see if it works

898
00:56:04,790 --> 00:56:09,910
[Music]

899
00:56:07,110 --> 00:56:17,860
every time you have a problem you can

900
00:56:09,910 --> 00:56:20,100
call the help function so it says we

901
00:56:17,860 --> 00:56:24,700
have two possibilities with the loader

902
00:56:20,100 --> 00:56:29,610
loader xed to execute the catalog where

903
00:56:24,700 --> 00:56:39,120
we have included some proposals or the

904
00:56:29,610 --> 00:56:43,120
or they URL which is not finished yet

905
00:56:39,120 --> 00:56:50,830
let's see if I didn't right here we have

906
00:56:43,120 --> 00:56:55,150
it yeah it has loaded it or maybe not I

907
00:56:50,830 --> 00:57:00,340
think I yeah I was executing help

908
00:56:55,150 --> 00:57:01,360
function let's see if to the other

909
00:57:00,340 --> 00:57:09,820
machine

910
00:57:01,360 --> 00:57:16,000
yes it's loaded so here we would cede

911
00:57:09,820 --> 00:57:19,720
the invoke of the DLL injection all the

912
00:57:16,000 --> 00:57:22,810
functions on power said which I oh no

913
00:57:19,720 --> 00:57:27,790
the repository can be loaded so we can

914
00:57:22,810 --> 00:57:37,240
provide support to people who have their

915
00:57:27,790 --> 00:57:44,020
own functions in order to use them let's

916
00:57:37,240 --> 00:57:47,370
move on to X the x post exploitation

917
00:57:44,020 --> 00:57:51,670
part we're going to start a meta exploit

918
00:57:47,370 --> 00:57:54,520
console and what we're going to do is

919
00:57:51,670 --> 00:57:58,270
the machine the Windows 7 machine has a

920
00:57:54,520 --> 00:58:02,250
vulnerable application

921
00:57:58,270 --> 00:58:05,710
let's imagine we have already done

922
00:58:02,250 --> 00:58:09,090
search for vulnerabilities so in that

923
00:58:05,710 --> 00:58:15,070
exploitation process I'm going to inject

924
00:58:09,090 --> 00:58:19,060
DLL from the remote i/o bombshell so

925
00:58:15,070 --> 00:58:24,030
first thing to do you may be wondering

926
00:58:19,060 --> 00:58:37,500
how can I create DLL from a bombshell

927
00:58:24,030 --> 00:58:40,930
let's launch again the panel this is the

928
00:58:37,500 --> 00:58:44,230
commands that we can execute with load

929
00:58:40,930 --> 00:58:47,410
we're going to load modules with show

930
00:58:44,230 --> 00:58:50,650
we're going to see the information the

931
00:58:47,410 --> 00:58:54,399
description the author shape and the

932
00:58:50,650 --> 00:58:57,640
fields at some points you will see which

933
00:58:54,400 --> 00:59:01,359
of them are required and they have to be

934
00:58:57,640 --> 00:59:06,009
activated as you see this is the setting

935
00:59:01,359 --> 00:59:10,119
it has with room we launch it so the

936
00:59:06,010 --> 00:59:14,680
listener module is ready the 8080 port

937
00:59:10,119 --> 00:59:18,609
the next module I'm going to launch here

938
00:59:14,680 --> 00:59:21,310
you can see the c2 sections so there is

939
00:59:18,609 --> 00:59:26,770
one module for bypass another one for

940
00:59:21,310 --> 00:59:30,400
credentials execution files so modules

941
00:59:26,770 --> 00:59:33,869
for OS X persistence we're going to see

942
00:59:30,400 --> 00:59:37,960
some of them here is the generate module

943
00:59:33,869 --> 00:59:41,470
within these module we have all these so

944
00:59:37,960 --> 00:59:46,510
we could generate in a very easy way for

945
00:59:41,470 --> 00:59:49,359
a macro for the CVD for rubber ducky so

946
00:59:46,510 --> 00:59:53,320
for example if I execute the rubber

947
00:59:49,359 --> 00:59:58,630
ducky in this case this is a required

948
00:59:53,320 --> 01:00:04,810
field so I have to set IP and write the

949
00:59:58,630 --> 01:00:07,180
direction 1000 3 in the port we have a

950
01:00:04,810 --> 01:00:12,370
default value

951
01:00:07,180 --> 01:00:18,160
and here we can decide whether we want

952
01:00:12,370 --> 01:00:21,339
to save the code in a file if we want to

953
01:00:18,160 --> 01:00:25,330
generate the file and save it into the

954
01:00:21,340 --> 01:00:27,790
rubber ducky and here with room it is

955
01:00:25,330 --> 01:00:33,880
offering me the information that I just

956
01:00:27,790 --> 01:00:44,860
sent it so we are going to use the one

957
01:00:33,880 --> 01:00:47,500
that says generate DLL in this case we

958
01:00:44,860 --> 01:00:49,390
want to I'd be to connect to us and we

959
01:00:47,500 --> 01:01:01,740
are going to keep it somewhere in our

960
01:00:49,390 --> 01:01:14,799
system let's keep it here for example

961
01:01:01,740 --> 01:01:19,149
fruit Cybercom dot dll so here I should

962
01:01:14,800 --> 01:01:22,120
be able to see and I'm going to execute

963
01:01:19,150 --> 01:01:23,710
it because I'm if I don't execute it I'm

964
01:01:22,120 --> 01:01:26,740
just going to be establishing the

965
01:01:23,710 --> 01:01:28,960
variables I have to execute now we have

966
01:01:26,740 --> 01:01:36,970
generated our DLL and we are going to

967
01:01:28,960 --> 01:01:40,600
use it so as I was saying we're going to

968
01:01:36,970 --> 01:01:43,109
lunch may exploit and as we already know

969
01:01:40,600 --> 01:01:45,430
that this machine has already vulnerable

970
01:01:43,110 --> 01:01:48,100
we're going to exploit it and we are

971
01:01:45,430 --> 01:01:58,000
going to connect to our listener through

972
01:01:48,100 --> 01:02:00,870
the DLL the Windows 7 machine what I'm

973
01:01:58,000 --> 01:02:00,870
going to exceed this

974
01:02:10,989 --> 01:02:14,329
so that Windows 7 machine has been

975
01:02:13,309 --> 01:02:17,209
prepared with a couple of

976
01:02:14,329 --> 01:02:22,159
vulnerabilities in this case this

977
01:02:17,209 --> 01:02:24,408
application okay this is open right now

978
01:02:22,159 --> 01:02:32,989
I'm going to launch it again okay so

979
01:02:24,409 --> 01:02:35,509
this trial version just lasts for 30

980
01:02:32,989 --> 01:02:38,599
minutes which is enough for these

981
01:02:35,509 --> 01:02:40,729
examples so well they said we're server

982
01:02:38,599 --> 01:02:47,089
this is an application without web

983
01:02:40,729 --> 01:03:05,959
server that once had a vulnerability and

984
01:02:47,089 --> 01:03:07,578
I'm going to use that vulnerability well

985
01:03:05,959 --> 01:03:09,259
I'm not going to explain Matt exploit

986
01:03:07,579 --> 01:03:11,269
because this is the tool that we are

987
01:03:09,259 --> 01:03:13,969
going to use to explode their their

988
01:03:11,269 --> 01:03:16,218
vulnerability but you can use to draw a

989
01:03:13,969 --> 01:03:20,289
turkey wherever you want to this is just

990
01:03:16,219 --> 01:03:25,309
an example that we are doing through DLL

991
01:03:20,289 --> 01:03:27,579
all these tools all these pen testing

992
01:03:25,309 --> 01:03:30,649
tools and vulnerable exploits tools

993
01:03:27,579 --> 01:03:36,469
usually have their own strong and with

994
01:03:30,649 --> 01:03:48,499
item shell it works similarly so this is

995
01:03:36,469 --> 01:03:49,759
their way of setting firewalls well I

996
01:03:48,499 --> 01:03:53,749
don't know if you can see it very well

997
01:03:49,759 --> 01:03:56,839
but one of the requirements here is the

998
01:03:53,749 --> 01:03:58,399
machine that we are going to attack or

999
01:03:56,839 --> 01:04:00,729
where we won't exploit that

1000
01:03:58,399 --> 01:04:00,729
vulnerability

1001
01:04:05,780 --> 01:04:11,660
only a fella will achieve it in this

1002
01:04:07,910 --> 01:04:13,879
case windows 7 so 0:07

1003
01:04:11,660 --> 01:04:17,810
so what are we going to do once this

1004
01:04:13,880 --> 01:04:20,240
vulnerability is expertise we want if we

1005
01:04:17,810 --> 01:04:22,580
can use a metal cutter if we want to get

1006
01:04:20,240 --> 01:04:34,540
a meterpreter console but in this case

1007
01:04:22,580 --> 01:04:34,540
we're going to use our DLL so DLL inject

1008
01:04:37,750 --> 01:04:42,800
if we show the options right now we're

1009
01:04:41,030 --> 01:04:45,650
going to see that the payload options

1010
01:04:42,800 --> 01:04:48,680
are defining our DLL as we've created

1011
01:04:45,650 --> 01:05:01,280
one we are going to write it down set

1012
01:04:48,680 --> 01:05:02,480
DLL fruit cyber camp dot DL n so let's

1013
01:05:01,280 --> 01:05:06,530
see if I've said it

1014
01:05:02,480 --> 01:05:12,020
each right ok I'm going to launch it to

1015
01:05:06,530 --> 01:05:14,560
see if it works the listener is

1016
01:05:12,020 --> 01:05:14,560
somewhere here

1017
01:05:26,890 --> 01:05:31,118
and while I'm going to punch it again

1018
01:05:53,220 --> 01:06:05,020
okay let's try again some something

1019
01:05:55,930 --> 01:06:09,430
failed okay let's wait because if the

1020
01:06:05,020 --> 01:06:13,390
exploit is working fine and the model is

1021
01:06:09,430 --> 01:06:17,100
working fine it should work okay it

1022
01:06:13,390 --> 01:06:17,100
closed list let's try again

1023
01:06:36,310 --> 01:06:39,310
0:07

1024
01:06:49,050 --> 01:07:02,369
okay I think now it should work okay I'm

1025
01:06:59,470 --> 01:07:02,368
going to try something else

1026
01:07:05,160 --> 01:07:16,660
okay forgot to do something which is

1027
01:07:07,720 --> 01:07:21,939
generating the DLN is that my system is

1028
01:07:16,660 --> 01:07:25,259
32 bits the requirements is 64 bits but

1029
01:07:21,940 --> 01:07:30,430
I have a deal and that I've generated

1030
01:07:25,260 --> 01:07:36,900
and I'm going to change it I'm going to

1031
01:07:30,430 --> 01:07:36,899
replace it this one is for 32 bits

1032
01:07:52,930 --> 01:08:19,238
what about our sister okay let's see now

1033
01:07:56,609 --> 01:08:21,429
it works with this one I can't see if

1034
01:08:19,238 --> 01:08:27,009
not only now it's working it was a

1035
01:08:21,429 --> 01:08:32,049
problem with yet any question so now I

1036
01:08:27,009 --> 01:08:35,580
have our variable available well I'm

1037
01:08:32,049 --> 01:08:40,988
going to launch it manually I think this

1038
01:08:35,580 --> 01:08:43,448
symbol here in a problem I mean I don't

1039
01:08:40,988 --> 01:08:45,218
want to connect with privileges because

1040
01:08:43,448 --> 01:08:48,790
later we are going to do a bypass in

1041
01:08:45,219 --> 01:08:50,469
order to obtain privileges from aibum

1042
01:08:48,790 --> 01:08:53,620
shell but I already have some privileges

1043
01:08:50,469 --> 01:09:08,049
because I've launched the the process

1044
01:08:53,620 --> 01:09:10,750
that way knowing to try to do it with

1045
01:09:08,049 --> 01:09:21,278
Khan Academy no of them okay now that

1046
01:09:10,750 --> 01:09:25,350
sees a different one okay so this is

1047
01:09:21,279 --> 01:09:25,350
another application which is vulnerable

1048
01:09:30,618 --> 01:09:40,460
well I almost appear to me hello I'm

1049
01:09:33,719 --> 01:09:40,460
going to set the payload of Windows DLL

1050
01:09:47,540 --> 01:09:55,540
what animal you live in either okay so

1051
01:09:50,060 --> 01:09:55,540
we've already defined the host the DLL

1052
01:10:04,750 --> 01:10:11,060
this is the one that may work let's see

1053
01:10:09,650 --> 01:10:18,589
if they Konica Minolta which is

1054
01:10:11,060 --> 01:10:22,250
somewhere here is going to send us to

1055
01:10:18,590 --> 01:10:24,410
give us a shell without privileges okay

1056
01:10:22,250 --> 01:10:32,020
we have the listener here we have the

1057
01:10:24,410 --> 01:10:37,700
DLL let's see if this program okay now

1058
01:10:32,020 --> 01:10:39,590
before this is you know the to identify

1059
01:10:37,700 --> 01:10:41,630
that we have privileges but in order to

1060
01:10:39,590 --> 01:10:44,330
work in a more real environment we want

1061
01:10:41,630 --> 01:10:46,040
to start exploiting a vulnerability in a

1062
01:10:44,330 --> 01:10:50,120
system that doesn't have privileges

1063
01:10:46,040 --> 01:10:54,170
because we have to forget that

1064
01:10:50,120 --> 01:10:56,809
privileges afterwards I want to do any

1065
01:10:54,170 --> 01:11:01,489
process that requires admin privileges

1066
01:10:56,810 --> 01:11:07,850
such as achieving passwords I cannot do

1067
01:11:01,489 --> 01:11:12,469
it so this is why I want to go from here

1068
01:11:07,850 --> 01:11:14,060
to a machine with privileges there if we

1069
01:11:12,470 --> 01:11:16,250
are lucky enough to find a process with

1070
01:11:14,060 --> 01:11:18,650
privileges and we get back these

1071
01:11:16,250 --> 01:11:21,110
privileges then part of the world would

1072
01:11:18,650 --> 01:11:24,769
have been done already it would be more

1073
01:11:21,110 --> 01:11:26,570
simple so the warrior command allows us

1074
01:11:24,770 --> 01:11:33,110
to do different things with warrior such

1075
01:11:26,570 --> 01:11:35,450
as killing listing or renaming so as it

1076
01:11:33,110 --> 01:11:37,250
may be a little bit confusing where I'm

1077
01:11:35,450 --> 01:11:41,139
going to change names and this one is

1078
01:11:37,250 --> 01:11:41,140
going to be called for example Windows 7

1079
01:11:45,340 --> 01:11:54,770
Italy almost 80 bypass where was it so

1080
01:11:48,050 --> 01:11:58,400
then we're going to bypass UAC bypass

1081
01:11:54,770 --> 01:12:01,340
what's that exactly when we try to

1082
01:11:58,400 --> 01:12:03,519
launch an application or when we are

1083
01:12:01,340 --> 01:12:08,240
launching an application that needs

1084
01:12:03,520 --> 01:12:12,110
abilities these windows pops up anyway

1085
01:12:08,240 --> 01:12:14,510
that if you AC bypass we can execute our

1086
01:12:12,110 --> 01:12:17,089
process with privileges without having

1087
01:12:14,510 --> 01:12:18,590
this window popping up so this is what

1088
01:12:17,090 --> 01:12:24,310
we want to get these that's our

1089
01:12:18,590 --> 01:12:26,690
objective we want to execute privileges

1090
01:12:24,310 --> 01:12:29,360
skipping the UAC this is a control

1091
01:12:26,690 --> 01:12:33,259
measure is it means either account

1092
01:12:29,360 --> 01:12:36,440
control of Windows and it's been working

1093
01:12:33,260 --> 01:12:39,560
for a long time when we were having

1094
01:12:36,440 --> 01:12:43,639
Windows Vista Windows Vista this was

1095
01:12:39,560 --> 01:12:46,400
popping up every now and then and it was

1096
01:12:43,640 --> 01:12:49,400
quite tiring for the users having this

1097
01:12:46,400 --> 01:12:51,500
window all the time but in Windows 7

1098
01:12:49,400 --> 01:12:57,740
they decreased a little bit their level

1099
01:12:51,500 --> 01:12:59,840
of intrusion when is UAC

1100
01:12:57,740 --> 01:13:01,250
Viper's going to work it's not always

1101
01:12:59,840 --> 01:13:03,800
going to work we need to meet certain

1102
01:13:01,250 --> 01:13:08,270
requirements for example the user that's

1103
01:13:03,800 --> 01:13:12,140
executing the processes in the machine

1104
01:13:08,270 --> 01:13:13,940
she'd belong to their admin team it

1105
01:13:12,140 --> 01:13:16,280
doesn't have to be the main admin but it

1106
01:13:13,940 --> 01:13:19,549
should be part of the admin team and

1107
01:13:16,280 --> 01:13:21,740
also the UAC configuration must be by

1108
01:13:19,550 --> 01:13:28,880
default because this has certain levels

1109
01:13:21,740 --> 01:13:31,969
if we want to to be to have this window

1110
01:13:28,880 --> 01:13:34,760
popping up all the time we have me set

1111
01:13:31,970 --> 01:13:39,440
things up in order to have this so

1112
01:13:34,760 --> 01:13:41,540
certain requirements must be met because

1113
01:13:39,440 --> 01:13:46,519
I in the end this is their window that

1114
01:13:41,540 --> 01:13:49,100
we want to screen we want to scream when

1115
01:13:46,520 --> 01:13:52,040
this house had many UAC bypasses

1116
01:13:49,100 --> 01:13:53,690
throughout his its history and Windows

1117
01:13:52,040 --> 01:13:56,900
doesn't even considered it as a

1118
01:13:53,690 --> 01:13:59,179
vulnerability sometimes it's a

1119
01:13:56,900 --> 01:14:01,750
use characteristic there are many ways

1120
01:13:59,180 --> 01:14:04,010
of skipping that screen that window

1121
01:14:01,750 --> 01:14:06,410
sometimes there is a process that may

1122
01:14:04,010 --> 01:14:09,320
look for a dll in order to execute it

1123
01:14:06,410 --> 01:14:12,019
and if it doesn't exist it's going to

1124
01:14:09,320 --> 01:14:16,250
use their DNA library the main deal and

1125
01:14:12,020 --> 01:14:18,440
library people that found this out for

1126
01:14:16,250 --> 01:14:21,710
example there some processes of Windows

1127
01:14:18,440 --> 01:14:27,889
that are executed with abilities all the

1128
01:14:21,710 --> 01:14:29,540
time so the bypass tries to get in the

1129
01:14:27,890 --> 01:14:32,660
middle of these processes that is

1130
01:14:29,540 --> 01:14:39,430
privileges in order to target the code

1131
01:14:32,660 --> 01:14:44,510
that we want to address so this looks a

1132
01:14:39,430 --> 01:14:49,850
DLL in the registry and it would help us

1133
01:14:44,510 --> 01:14:53,450
do the bypass so we're going to execute

1134
01:14:49,850 --> 01:14:58,190
this in a process with privileges for

1135
01:14:53,450 --> 01:15:04,160
example if we have here here we have the

1136
01:14:58,190 --> 01:15:06,049
I am a bombshell connection process this

1137
01:15:04,160 --> 01:15:09,620
machine will have privileges who needs

1138
01:15:06,050 --> 01:15:12,500
to replicate the UAC bypass in order to

1139
01:15:09,620 --> 01:15:15,050
get our warrior back when we do our USC

1140
01:15:12,500 --> 01:15:19,190
bypass we are going to execute coding it

1141
01:15:15,050 --> 01:15:21,140
maybe just writing a unit C but if we

1142
01:15:19,190 --> 01:15:23,660
don't have the permit to write in C we

1143
01:15:21,140 --> 01:15:25,490
are not going to be able to do so but

1144
01:15:23,660 --> 01:15:31,010
what we are going to do is inject in a

1145
01:15:25,490 --> 01:15:33,769
command that gives our spark directly

1146
01:15:31,010 --> 01:15:37,960
are another warrior and in order to do

1147
01:15:33,770 --> 01:15:42,890
so I'm going to use their bypasses UAC

1148
01:15:37,960 --> 01:15:45,140
bypass here we have several bypasses and

1149
01:15:42,890 --> 01:15:49,130
the one that is working in my

1150
01:15:45,140 --> 01:15:51,440
environment is this one so what do I

1151
01:15:49,130 --> 01:15:53,120
need to do I need to introduce the

1152
01:15:51,440 --> 01:15:55,339
warrior that's going to execute this and

1153
01:15:53,120 --> 01:15:56,450
then optionally I can give an

1154
01:15:55,340 --> 01:15:58,370
instruction if we don't give an

1155
01:15:56,450 --> 01:16:02,690
instruction it's not going to do

1156
01:15:58,370 --> 01:16:06,140
anything so Windows 7 plus the

1157
01:16:02,690 --> 01:16:08,750
instruction I think it is somewhere here

1158
01:16:06,140 --> 01:16:10,660
we can see it's kind of long I'm going

1159
01:16:08,750 --> 01:16:14,240
to explain to you what it does

1160
01:16:10,660 --> 01:16:17,240
well Louie up under our Laura let me

1161
01:16:14,240 --> 01:16:20,120
take one Olivia very much so when we say

1162
01:16:17,240 --> 01:16:23,630
we want to execute an instruction I mean

1163
01:16:20,120 --> 01:16:25,700
we normally say I wanted you to give but

1164
01:16:23,630 --> 01:16:27,620
another eye bombshell with PowerShell I

1165
01:16:25,700 --> 01:16:32,690
mean I'm going to bring up a PowerShell

1166
01:16:27,620 --> 01:16:36,290
process you know they're to inject if we

1167
01:16:32,690 --> 01:16:39,110
use PowerShell next thing it's not going

1168
01:16:36,290 --> 01:16:42,260
to be found so we need to write down the

1169
01:16:39,110 --> 01:16:48,769
pathway exactly one way Windows

1170
01:16:42,260 --> 01:16:50,510
PowerShell the pathway man we are going

1171
01:16:48,770 --> 01:16:52,640
to execute a command this white we have

1172
01:16:50,510 --> 01:16:56,740
here minus CN minus C involves

1173
01:16:52,640 --> 01:17:00,140
downloading what we've seen in this

1174
01:16:56,740 --> 01:17:01,969
workshop it's going to go to github or

1175
01:17:00,140 --> 01:17:05,080
our normal repository is going to

1176
01:17:01,970 --> 01:17:09,830
download and it's going to be to execute

1177
01:17:05,080 --> 01:17:14,680
return in a silently mode so let's see

1178
01:17:09,830 --> 01:17:17,000
if this works when this machine is not

1179
01:17:14,680 --> 01:17:21,470
noticing these because there are no

1180
01:17:17,000 --> 01:17:23,870
alerts popping out so here we see that

1181
01:17:21,470 --> 01:17:26,330
we have another warrior which has

1182
01:17:23,870 --> 01:17:28,099
privileges this is what we are looking

1183
01:17:26,330 --> 01:17:30,440
for before we got the privileges because

1184
01:17:28,100 --> 01:17:36,320
their process was being executed you

1185
01:17:30,440 --> 01:17:38,870
know from high level so here we can see

1186
01:17:36,320 --> 01:17:41,630
the start so the start means that that

1187
01:17:38,870 --> 01:17:45,650
you know session has privileged easy if

1188
01:17:41,630 --> 01:17:54,830
not it doesn't have privileges and now

1189
01:17:45,650 --> 01:17:57,440
we're going to rename these two I'm

1190
01:17:54,830 --> 01:17:59,690
going to rename all these things so that

1191
01:17:57,440 --> 01:18:05,750
we can identify them better this is

1192
01:17:59,690 --> 01:18:10,309
going to be Windows 7 so ok I've changed

1193
01:18:05,750 --> 01:18:12,890
the names here I'm going to start

1194
01:18:10,310 --> 01:18:15,560
bringing up all the machines now we are

1195
01:18:12,890 --> 01:18:18,110
playing with Kali with Windows 7

1196
01:18:15,560 --> 01:18:20,510
let's introduce another agent in the

1197
01:18:18,110 --> 01:18:23,699
game we're going to tradition that uses

1198
01:18:20,510 --> 01:18:25,989
Windows 10 what we bring data

1199
01:18:23,699 --> 01:18:28,059
we're going to do something else okay

1200
01:18:25,989 --> 01:18:30,129
let's see in which part of the

1201
01:18:28,060 --> 01:18:33,219
demonstration we are okay that's the

1202
01:18:30,130 --> 01:18:42,670
scenario we've done a finger printing to

1203
01:18:33,219 --> 01:18:49,960
live into medicine okay let's play a

1204
01:18:42,670 --> 01:18:51,820
little bit with this we're going to do a

1205
01:18:49,960 --> 01:18:54,850
lateral movement in order to get to the

1206
01:18:51,820 --> 01:18:57,460
Windows 10 watching we need to know the

1207
01:18:54,850 --> 01:18:59,650
admin password you know that to do so so

1208
01:18:57,460 --> 01:19:01,300
the admin password normally is the same

1209
01:18:59,650 --> 01:19:04,360
for all the computers in the same

1210
01:19:01,300 --> 01:19:13,030
network you know that to be able to

1211
01:19:04,360 --> 01:19:15,160
being able to we may use that in order

1212
01:19:13,030 --> 01:19:16,420
to achieve the credential that's right

1213
01:19:15,160 --> 01:19:19,780
this is what we're going to do now

1214
01:19:16,420 --> 01:19:22,210
however we can do something else which

1215
01:19:19,780 --> 01:19:24,820
seems silly but visually I'm sure that

1216
01:19:22,210 --> 01:19:27,310
you're going to like if I have here a

1217
01:19:24,820 --> 01:19:32,259
machine with Windows 7 we have a module

1218
01:19:27,310 --> 01:19:33,640
here that has been called phishing I'm

1219
01:19:32,260 --> 01:19:39,160
not going to explain what phishing is

1220
01:19:33,640 --> 01:19:41,590
but it's like faking something so let's

1221
01:19:39,160 --> 01:19:46,510
see we have who's going to bring this

1222
01:19:41,590 --> 01:19:50,020
our ok we're going to bring it up with

1223
01:19:46,510 --> 01:19:52,210
our normal Windows 7 system here it says

1224
01:19:50,020 --> 01:19:55,210
title name and domain we have some

1225
01:19:52,210 --> 01:19:57,640
information by default but can you

1226
01:19:55,210 --> 01:20:00,840
imagine what I'm going to do ok let's

1227
01:19:57,640 --> 01:20:00,840
set title here

1228
01:20:12,699 --> 01:20:24,669
what is it if you cannot be the

1229
01:20:21,100 --> 01:20:26,949
passwords friendly user for them what

1230
01:20:24,670 --> 01:20:33,580
would you do if you see the odd screen

1231
01:20:26,949 --> 01:20:41,049
okay you start right in this is my

1232
01:20:33,580 --> 01:20:43,830
username and this is my password this is

1233
01:20:41,050 --> 01:20:47,770
that screen is going to Philly and

1234
01:20:43,830 --> 01:20:51,190
that's it if I don't have their

1235
01:20:47,770 --> 01:20:55,960
credentials I'm going to try to ask take

1236
01:20:51,190 --> 01:20:57,250
credentials to the machine now we're

1237
01:20:55,960 --> 01:21:00,010
going to get the hashes from that

1238
01:20:57,250 --> 01:21:07,840
machines I have privileges and now I

1239
01:21:00,010 --> 01:21:12,900
want to get the credentials here we are

1240
01:21:07,840 --> 01:21:12,900
going to lose their power time function

1241
01:21:13,860 --> 01:21:19,630
and that's going to allow okay the

1242
01:21:16,090 --> 01:21:22,390
hashes everything is quite well

1243
01:21:19,630 --> 01:21:24,460
developed we just have to generate

1244
01:21:22,390 --> 01:21:26,650
modules configure ate them and launching

1245
01:21:24,460 --> 01:21:29,850
them and launch them if I decide to

1246
01:21:26,650 --> 01:21:32,530
launch those windows 7 normal warrior

1247
01:21:29,850 --> 01:21:35,469
it's going to say that it doesn't have

1248
01:21:32,530 --> 01:21:37,360
the privileges to do what that function

1249
01:21:35,469 --> 01:21:47,380
doesn't have admin privileges but this

1250
01:21:37,360 --> 01:21:49,030
is why don't bypassed update in order to

1251
01:21:47,380 --> 01:21:51,400
get these type of abilities and here we

1252
01:21:49,030 --> 01:21:55,889
can see all the passwords all the hashes

1253
01:21:51,400 --> 01:21:58,509
as I've said before in an organization

1254
01:21:55,890 --> 01:22:00,790
we all have the same acne with a

1255
01:21:58,510 --> 01:22:03,100
password so that the general admin can

1256
01:22:00,790 --> 01:22:07,199
manage administrate all the machines

1257
01:22:03,100 --> 01:22:07,199
remotely this is going to be very soda

1258
01:22:10,650 --> 01:22:15,969
machines are managed in the same network

1259
01:22:13,810 --> 01:22:17,590
variable to use their ID mimic as well

1260
01:22:15,969 --> 01:22:21,640
in order to move from a Windows 7

1261
01:22:17,590 --> 01:22:23,350
machine to the Windows 7 machine let's

1262
01:22:21,640 --> 01:22:25,780
see if we had it here very if the

1263
01:22:23,350 --> 01:22:31,159
Windows 10 machine has been already

1264
01:22:25,780 --> 01:22:33,139
brought up well giving it

1265
01:22:31,159 --> 01:22:40,909
I'll get them into anymore okay so here

1266
01:22:33,139 --> 01:22:43,400
we have you are Windows 10 machine Jamal

1267
01:22:40,909 --> 01:22:49,460
Khalifa released maybe a safe and we are

1268
01:22:43,400 --> 01:22:52,969
going to use SMB T so what's here so

1269
01:22:49,460 --> 01:22:55,760
here we are going to decide it's going

1270
01:22:52,969 --> 01:22:58,280
to initiate but not really movement the

1271
01:22:55,760 --> 01:23:00,530
warrior that's going in to execute that

1272
01:22:58,280 --> 01:23:02,659
in this case those have been my son's

1273
01:23:00,530 --> 01:23:07,519
going to use that the target is their

1274
01:23:02,659 --> 01:23:09,409
remote IP the Windows 10 machine tours

1275
01:23:07,520 --> 01:23:13,699
we want to move to and then we have the

1276
01:23:09,409 --> 01:23:23,360
admin hash that we need in order for

1277
01:23:13,699 --> 01:23:27,619
these unnatural movement to happen so

1278
01:23:23,360 --> 01:23:29,780
the target is 1000 10 this is my Windows

1279
01:23:27,619 --> 01:23:38,299
10 machine or at least it should be

1280
01:23:29,780 --> 01:23:44,780
I'm going to check it ok so yes it is

1281
01:23:38,300 --> 01:23:55,790
1000 10 I'm going to get the heist from

1282
01:23:44,780 --> 01:23:58,840
up here and here is very important we

1283
01:23:55,790 --> 01:24:03,440
just want to check that we've done there

1284
01:23:58,840 --> 01:24:08,329
we can do a write it 1 C and in order to

1285
01:24:03,440 --> 01:24:13,369
show that but we want to agree another

1286
01:24:08,329 --> 01:24:15,739
bombshell another Windows 10 that we

1287
01:24:13,369 --> 01:24:19,369
want to include here so we're going to

1288
01:24:15,739 --> 01:24:29,320
launch again what we've what we had

1289
01:24:19,369 --> 01:24:29,320
before so here you have set command

1290
01:24:33,550 --> 01:24:39,080
we're doing the same thing as we execute

1291
01:24:37,969 --> 01:24:41,610
how

1292
01:24:39,080 --> 01:24:45,900
we're going to execute it like that and

1293
01:24:41,610 --> 01:24:47,429
if it works let's see if it works if it

1294
01:24:45,900 --> 01:24:49,530
works we're going to launch it when we

1295
01:24:47,430 --> 01:24:51,510
know seven machine is going to receive

1296
01:24:49,530 --> 01:24:56,400
an instruction is going to execute it

1297
01:24:51,510 --> 01:24:58,140
and that we newsstand machine I mean

1298
01:24:56,400 --> 01:25:00,570
we'll be able to break into there I mean

1299
01:24:58,140 --> 01:25:01,350
there's ten machine from the Windows 7

1300
01:25:00,570 --> 01:25:04,410
machine

1301
01:25:01,350 --> 01:25:06,870
so we've achieved I witness this to a

1302
01:25:04,410 --> 01:25:09,690
term to get into our Windows 10 session

1303
01:25:06,870 --> 01:25:12,120
and with privileges and we have plenty

1304
01:25:09,690 --> 01:25:14,730
of time and went to the same thing but

1305
01:25:12,120 --> 01:25:17,250
doing a UAC write husband Windows 10

1306
01:25:14,730 --> 01:25:18,750
first I will have to bring up a normal

1307
01:25:17,250 --> 01:25:22,710
session but what let's finish with this

1308
01:25:18,750 --> 01:25:30,840
process first because we can do more

1309
01:25:22,710 --> 01:25:35,070
things here three machines here they're

1310
01:25:30,840 --> 01:25:38,040
all alive one of them is kind of week we

1311
01:25:35,070 --> 01:25:44,340
will see graphically I'm only I'm going

1312
01:25:38,040 --> 01:25:53,130
to rename these two this is Windows 10

1313
01:25:44,340 --> 01:25:55,560
with privileges okay so we inside the

1314
01:25:53,130 --> 01:26:07,830
windows 10 machine so what else can we

1315
01:25:55,560 --> 01:26:11,010
do now that we Windows 10 now has am

1316
01:26:07,830 --> 01:26:14,010
sayin I told you that there is something

1317
01:26:11,010 --> 01:26:17,400
good about Windows 10 and I bombshell

1318
01:26:14,010 --> 01:26:20,040
because currently Windows is already

1319
01:26:17,400 --> 01:26:22,920
detecting a bombshell as a malware and

1320
01:26:20,040 --> 01:26:26,250
it doesn't let you store it in the

1321
01:26:22,920 --> 01:26:30,270
memory with Windows 7 it works fine but

1322
01:26:26,250 --> 01:26:32,640
Microsoft is now aware of a bombshell

1323
01:26:30,270 --> 01:26:36,360
and he's protecting memory from that and

1324
01:26:32,640 --> 01:26:39,510
how does it know how malicious process

1325
01:26:36,360 --> 01:26:41,400
is being stored in the memory because I

1326
01:26:39,510 --> 01:26:42,840
mean with an anti-virus you can analyze

1327
01:26:41,400 --> 01:26:45,000
the disk in order to see what's going on

1328
01:26:42,840 --> 01:26:47,520
but when we are working at the moment at

1329
01:26:45,000 --> 01:26:48,330
the memory level a that option didn't

1330
01:26:47,520 --> 01:26:50,340
exist

1331
01:26:48,330 --> 01:26:52,480
so this wife is working what we are

1332
01:26:50,340 --> 01:26:55,340
doing right now

1333
01:26:52,480 --> 01:26:59,500
we understand is verifying the memory -

1334
01:26:55,340 --> 01:27:04,120
and what does it mean so nowadays it

1335
01:26:59,500 --> 01:27:07,790
realizes that bombshell is there and

1336
01:27:04,120 --> 01:27:10,670
alerts you if we are using that all the

1337
01:27:07,790 --> 01:27:14,000
windows fashion we could disable the

1338
01:27:10,670 --> 01:27:19,280
malware for example the power more than

1339
01:27:14,000 --> 01:27:22,250
my mate I've already detected that and

1340
01:27:19,280 --> 01:27:25,009
but this is a new tool this is not going

1341
01:27:22,250 --> 01:27:30,230
to be detected in this case with a

1342
01:27:25,010 --> 01:27:34,160
bombshell we can bypass C of Windows so

1343
01:27:30,230 --> 01:27:36,889
when MC is trying to check if there is

1344
01:27:34,160 --> 01:27:38,870
something we are in the memory Windows

1345
01:27:36,890 --> 01:27:41,630
Defender is going to be alerted but with

1346
01:27:38,870 --> 01:27:46,720
the part what we are going to do is

1347
01:27:41,630 --> 01:27:46,720
watching it so that it is not executed

1348
01:27:49,420 --> 01:27:59,420
so we are going to move to there MC

1349
01:27:52,690 --> 01:28:07,250
bypass and okay the worry it's going to

1350
01:27:59,420 --> 01:28:10,000
be requested this is Windows 10 case we

1351
01:28:07,250 --> 01:28:15,770
are not going to be able to see anything

1352
01:28:10,000 --> 01:28:17,390
I mean we're going to now we are going

1353
01:28:15,770 --> 01:28:19,220
to clean it up in order to see what

1354
01:28:17,390 --> 01:28:21,250
happens if ourself so that you can see

1355
01:28:19,220 --> 01:28:25,310
that this is executed in PowerShell and

1356
01:28:21,250 --> 01:28:29,450
it includes so that the unsafe is not

1357
01:28:25,310 --> 01:28:31,960
executed and if we disable I mean when

1358
01:28:29,450 --> 01:28:34,190
we do our Nancy bypass now it is party

1359
01:28:31,960 --> 01:28:38,780
the last thing that we can do here with

1360
01:28:34,190 --> 01:28:41,780
with a bombshell is disabling the wind

1361
01:28:38,780 --> 01:28:44,570
the windows are the virus so here we

1362
01:28:41,780 --> 01:28:46,940
have monitor we are going to write down

1363
01:28:44,570 --> 01:28:50,599
the end of your time here we just have

1364
01:28:46,940 --> 01:28:56,629
to to type the warrior

1365
01:28:50,600 --> 01:28:58,220
wait where it is located and we want to

1366
01:28:56,630 --> 01:29:01,520
say we want these to be enabled or

1367
01:28:58,220 --> 01:29:04,139
disabled we are going to say that we

1368
01:29:01,520 --> 01:29:09,539
want the antivirus to be disabled

1369
01:29:04,139 --> 01:29:12,929
and from now I mean with the Alsea of

1370
01:29:09,539 --> 01:29:14,429
the Windows 10 we've don't Lee I'm

1371
01:29:12,929 --> 01:29:17,639
survivors and we've disable the

1372
01:29:14,429 --> 01:29:23,099
antivirus so now we can do whatever we

1373
01:29:17,639 --> 01:29:28,409
want to so we're going to look the MC

1374
01:29:23,099 --> 01:29:32,369
into detail let's kill warriors now

1375
01:29:28,409 --> 01:29:35,398
maybe it's not necessary unless final

1376
01:29:32,369 --> 01:29:39,148
parties do a bypass to Windows 10

1377
01:29:35,399 --> 01:29:41,550
because now winters dear 10 was used as

1378
01:29:39,149 --> 01:29:46,789
an administrator but let's try to do a

1379
01:29:41,550 --> 01:29:51,899
bypass no I'm gonna do it directly here

1380
01:29:46,789 --> 01:29:56,309
so first thing to do is to download it

1381
01:29:51,899 --> 01:29:58,530
so for that I have to copy and then

1382
01:29:56,309 --> 01:30:02,249
going to connect manually so everything

1383
01:29:58,530 --> 01:30:19,199
that I execute will appear here on the

1384
01:30:02,249 --> 01:30:23,099
console manually and remember the

1385
01:30:19,199 --> 01:30:34,348
parameters silently silently and Yuri

1386
01:30:23,099 --> 01:30:42,959
console in their 10003 port 8080 see

1387
01:30:34,349 --> 01:30:45,689
here we have one of them for machine

1388
01:30:42,959 --> 01:30:47,999
ones went at seven with our privileges

1389
01:30:45,689 --> 01:30:52,409
windows have been with privileges window

1390
01:30:47,999 --> 01:30:56,969
10 with privileges until new one I'm

1391
01:30:52,409 --> 01:31:05,419
going to rename it and call it wind 10

1392
01:30:56,969 --> 01:31:08,610
to know which one it is the first thing

1393
01:31:05,419 --> 01:31:13,050
we're going to do our bypass from UAC

1394
01:31:08,610 --> 01:31:15,489
and when we apply and see if we want to

1395
01:31:13,050 --> 01:31:19,630
do a bypass that we want to

1396
01:31:15,489 --> 01:31:23,500
we would have to need to patch the MC in

1397
01:31:19,630 --> 01:31:28,090
order to execute the UAC

1398
01:31:23,500 --> 01:31:31,600
so let's load the module of bypasses

1399
01:31:28,090 --> 01:31:45,510
from the MC in this case it would be

1400
01:31:31,600 --> 01:31:51,400
Windows 10 first scan from MC has been

1401
01:31:45,510 --> 01:31:59,880
part but and now we're going to do a

1402
01:31:51,400 --> 01:31:59,879
bypass UAC

1403
01:32:01,739 --> 01:32:09,730
this is going to do this is the K I was

1404
01:32:06,520 --> 01:32:13,500
mentioning earlier it is consulting with

1405
01:32:09,730 --> 01:32:18,129
in the registry if it it's pointing a

1406
01:32:13,500 --> 01:32:24,210
DLL and we need to come in first we need

1407
01:32:18,130 --> 01:32:24,210
to inject DLL in Windows environment

1408
01:32:24,570 --> 01:32:44,920
requires warrior IP import so warrior is

1409
01:32:39,960 --> 01:32:52,239
normal Windows 10 and we want to connect

1410
01:32:44,920 --> 01:33:04,540
two 1000 three that's the IP address we

1411
01:32:52,239 --> 01:33:07,660
want the port 8080 so let's see because

1412
01:33:04,540 --> 01:33:12,670
it is short lunch a new PowerShell

1413
01:33:07,660 --> 01:33:16,620
Windows 10 process with elevated

1414
01:33:12,670 --> 01:33:20,050
privileges as you see the list is

1415
01:33:16,620 --> 01:33:22,450
extending now we have Windows 7 and

1416
01:33:20,050 --> 01:33:24,670
Windows 7 with privileges window 10 and

1417
01:33:22,450 --> 01:33:28,599
window 10 with privileges and a new one

1418
01:33:24,670 --> 01:33:32,430
that was generated through the bypass

1419
01:33:28,599 --> 01:33:35,400
and I'm going to rename it window 10

1420
01:33:32,430 --> 01:33:46,900
[Music]

1421
01:33:35,400 --> 01:33:52,388
privileges in the same way we could what

1422
01:33:46,900 --> 01:33:55,929
we have already done as earlier we did

1423
01:33:52,389 --> 01:34:00,369
the lateral movement from windows 7 to

1424
01:33:55,929 --> 01:34:04,079
Windows 10 it was generated with

1425
01:34:00,369 --> 01:34:08,290
privileges but if the if we didn't have

1426
01:34:04,079 --> 01:34:10,659
privileges we would start with the

1427
01:34:08,290 --> 01:34:13,090
Machine Windows 10 so our process

1428
01:34:10,659 --> 01:34:18,610
without privileges that we need to

1429
01:34:13,090 --> 01:34:33,460
upgrade and from there to patch and so

1430
01:34:18,610 --> 01:34:40,110
on finally the last demonstration was to

1431
01:34:33,460 --> 01:34:40,110
pass the harsh through lateral movement

1432
01:34:41,369 --> 01:34:49,540
here's the end of my workshop I think we

1433
01:34:46,030 --> 01:34:54,059
have some time for questions so please

1434
01:34:49,540 --> 01:34:54,060
feel free to to ask

1435
01:35:06,849 --> 01:35:12,880
thank you for your presentation a lot oh

1436
01:35:09,889 --> 01:35:19,010
I wanted to ask you if you're going to

1437
01:35:12,880 --> 01:35:25,159
introduce an association method between

1438
01:35:19,010 --> 01:35:36,170
the infected client and the UC are you

1439
01:35:25,159 --> 01:35:39,018
going to implementation method to

1440
01:35:36,170 --> 01:35:44,599
analyze communications yeah that would

1441
01:35:39,019 --> 01:35:48,289
be quite interesting actually requests

1442
01:35:44,599 --> 01:35:52,459
are made through HTTP the connection

1443
01:35:48,289 --> 01:35:56,209
could be made through HTTP but now it is

1444
01:35:52,459 --> 01:35:59,869
done through HTTP but with encrypted

1445
01:35:56,209 --> 01:36:03,050
content the project is open source so

1446
01:35:59,869 --> 01:36:06,228
anyone who dares and who understands

1447
01:36:03,050 --> 01:36:09,709
about this I encourage you to do it in

1448
01:36:06,229 --> 01:36:14,289
order to make the project improve any

1449
01:36:09,709 --> 01:36:17,809
other questions good morning

1450
01:36:14,289 --> 01:36:21,499
congratulations on your presentation why

1451
01:36:17,809 --> 01:36:22,489
do you use don't care what is hideous do

1452
01:36:21,499 --> 01:36:25,519
you know how docker

1453
01:36:22,489 --> 01:36:30,110
works right yes but I don't know why the

1454
01:36:25,519 --> 01:36:33,860
tool has docker what we took image of

1455
01:36:30,110 --> 01:36:37,759
docker in case you want to lift the c2

1456
01:36:33,860 --> 01:36:41,119
from docker or if you want to launch the

1457
01:36:37,760 --> 01:36:46,780
everywhere mode from docker just in case

1458
01:36:41,119 --> 01:36:46,780
you have that image any other questions

1459
01:36:48,159 --> 01:36:58,308
okay no further questions then in that

1460
01:36:55,550 --> 01:37:01,539
case let's leave it here and thank you

1461
01:36:58,309 --> 01:37:01,539
very much for your attention

1462
01:37:05,290 --> 01:37:09,290
[Applause]

1463
01:37:07,230 --> 01:37:09,290
you

