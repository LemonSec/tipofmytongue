1
00:00:02,029 --> 00:00:05,099
[Music]

2
00:00:18,020 --> 00:00:31,970
thank you for being here we're going to

3
00:00:26,760 --> 00:00:31,970
start with workshop for those who have

4
00:00:34,190 --> 00:00:40,129
sides of the auditorium with her father

5
00:00:40,700 --> 00:01:03,149
I am known security I've been working on

6
00:00:49,500 --> 00:01:18,740
this bill for several years I'm open we

7
00:01:03,149 --> 00:01:18,740
almost everything security exploiting

8
00:01:19,220 --> 00:01:26,250
we're going to start with a very easy

9
00:01:23,390 --> 00:01:28,770
exploit in order for you to understand

10
00:01:26,250 --> 00:01:31,829
how exploit work because on many

11
00:01:28,770 --> 00:01:35,640
occasions we take some code from our

12
00:01:31,829 --> 00:01:39,798
repository and we start combining it we

13
00:01:35,640 --> 00:01:39,799
don't even know how it works

14
00:01:42,770 --> 00:01:50,490
since nobody checks the code and we just

15
00:01:48,450 --> 00:01:52,560
simply want to obtain the code it

16
00:01:50,490 --> 00:01:55,250
doesn't work so what do we do let's

17
00:01:52,560 --> 00:02:00,600
start then with the from the beginning

18
00:01:55,250 --> 00:02:03,810
will speak first about vertical and then

19
00:02:00,600 --> 00:02:08,079
about a spectral and melt down which are

20
00:02:03,810 --> 00:02:13,980
very similar inspector I'm sure you have

21
00:02:08,080 --> 00:02:18,090
with it it has been useful it has

22
00:02:13,980 --> 00:02:22,780
affected their CPU it has a slowly down

23
00:02:18,090 --> 00:02:27,460
and it has regardless of the operating

24
00:02:22,780 --> 00:02:31,120
system that we use whether it is Linux

25
00:02:27,460 --> 00:02:35,080
Windows or any other because the problem

26
00:02:31,120 --> 00:02:40,030
is in the microprocessor so people in

27
00:02:35,080 --> 00:02:44,320
the end end up buying any laptop and I'm

28
00:02:40,030 --> 00:02:50,520
going to talk about it and I'm going to

29
00:02:44,320 --> 00:02:59,799
mention new things on the field so that

30
00:02:50,520 --> 00:03:04,240
somehow we can use the hardware in a

31
00:02:59,800 --> 00:03:07,450
secure way so without further ado let's

32
00:03:04,240 --> 00:03:10,900
start with their to go who are familiar

33
00:03:07,450 --> 00:03:16,600
with their to come it is one of the rare

34
00:03:10,900 --> 00:03:24,940
occasions when I see so many just a few

35
00:03:16,600 --> 00:03:27,519
ok is a privilege escalation we are a

36
00:03:24,940 --> 00:03:32,650
user in a system I do not have any

37
00:03:27,520 --> 00:03:35,050
permissions so I am like an intern at a

38
00:03:32,650 --> 00:03:39,580
company but I want to become the

39
00:03:35,050 --> 00:03:45,000
administrator the administrator user so

40
00:03:39,580 --> 00:03:45,000
we need to do some magic in order to

41
00:03:45,570 --> 00:03:57,489
obtain more privileges this is a very

42
00:03:49,780 --> 00:04:01,570
old ability because it started in 2016

43
00:03:57,489 --> 00:04:02,690
and it affected all kernel in Linux

44
00:04:01,570 --> 00:04:09,920
based

45
00:04:02,690 --> 00:04:16,880
systems including Android things these

46
00:04:09,920 --> 00:04:19,219
we convert our device even if it that's

47
00:04:16,880 --> 00:04:21,890
the objective we're going to see all

48
00:04:19,220 --> 00:04:27,290
these steps you know the to understand

49
00:04:21,890 --> 00:04:32,590
why and how it works as you see on the

50
00:04:27,290 --> 00:04:38,330
screen problem ahead of us

51
00:04:32,590 --> 00:04:39,169
Co Co W is a copy and right there for

52
00:04:38,330 --> 00:04:43,909
Nevada

53
00:04:39,170 --> 00:04:46,340
Apple they're in there so we need to

54
00:04:43,910 --> 00:04:49,790
understand the vulnerability in all the

55
00:04:46,340 --> 00:04:52,549
20 standard steps that we're going to

56
00:04:49,790 --> 00:04:56,480
use the ball for Specter and full

57
00:04:52,550 --> 00:05:01,400
meltdown as consequences we could modify

58
00:04:56,480 --> 00:05:05,120
any kind of protected files just et Cie

59
00:05:01,400 --> 00:05:08,450
password any kind of file as if we were

60
00:05:05,120 --> 00:05:12,470
a user or root user

61
00:05:08,450 --> 00:05:18,409
we have several POCs you can download

62
00:05:12,470 --> 00:05:22,130
them from GD hi usually people are

63
00:05:18,410 --> 00:05:23,990
familiar with this but they need a

64
00:05:22,130 --> 00:05:29,480
workshop in order to understand all

65
00:05:23,990 --> 00:05:33,500
these steps usually manufacturers launch

66
00:05:29,480 --> 00:05:38,090
some patches and the vulnerability

67
00:05:33,500 --> 00:05:45,620
disappears let's start with memory

68
00:05:38,090 --> 00:05:49,520
mapping of file usually typically go we

69
00:05:45,620 --> 00:05:55,130
are going to do it with C language in a

70
00:05:49,520 --> 00:05:58,330
very easy way and we all already have

71
00:05:55,130 --> 00:06:03,890
their code written for you not to have a

72
00:05:58,330 --> 00:06:04,770
typo error so let's see how to map Linux

73
00:06:03,890 --> 00:06:12,870
bases

74
00:06:04,770 --> 00:06:15,448
file innovate remapped the memory we're

75
00:06:12,870 --> 00:06:19,710
going to use the system called memory

76
00:06:15,449 --> 00:06:29,039
map we can call the system in order to

77
00:06:19,710 --> 00:06:32,460
map device let's say memory device maybe

78
00:06:29,039 --> 00:06:35,490
to write an a to read it it is just

79
00:06:32,460 --> 00:06:40,169
opening it and instead of working

80
00:06:35,490 --> 00:06:51,810
directly on the device I use it in the

81
00:06:40,169 --> 00:06:59,880
memory very simple piece of code wavelet

82
00:06:51,810 --> 00:07:02,550
and then we go to the standard system

83
00:06:59,880 --> 00:07:06,300
called I guess you are familiar with

84
00:07:02,550 --> 00:07:09,270
obscene language it is basically like we

85
00:07:06,300 --> 00:07:12,780
do not see you at home in one of the

86
00:07:09,270 --> 00:07:21,810
lines you see the number let's imagine

87
00:07:12,780 --> 00:07:25,818
we open HTC host fire we have the

88
00:07:21,810 --> 00:07:30,900
possibility to open it in read-only mode

89
00:07:25,819 --> 00:07:37,380
or in writing mode I think nothing I

90
00:07:30,900 --> 00:07:40,650
haven't said nothing so far we know that

91
00:07:37,380 --> 00:07:43,800
when opening a file there is a system of

92
00:07:40,650 --> 00:07:46,529
permission if the while only has a

93
00:07:43,800 --> 00:07:53,550
read-only mode for the user for example

94
00:07:46,529 --> 00:07:56,699
the ETP password even if I try to make

95
00:07:53,550 --> 00:07:59,460
it you have to open it if I want to open

96
00:07:56,699 --> 00:08:02,789
it from right in a street world the

97
00:07:59,460 --> 00:08:05,909
system is going to tell me that I can't

98
00:08:02,789 --> 00:08:09,919
because this subsystem of permissions is

99
00:08:05,909 --> 00:08:13,349
going to prevail however I could create

100
00:08:09,919 --> 00:08:18,080
memory in line to zero

101
00:08:13,349 --> 00:08:18,080
okay memory map

102
00:08:36,809 --> 00:09:11,260
we have I could remember these

103
00:08:55,380 --> 00:09:20,110
operations we have the print limpiar we

104
00:09:11,260 --> 00:09:26,080
want we can clean the code back it was

105
00:09:20,110 --> 00:09:29,290
if we hadn't declared the emails we take

106
00:09:26,080 --> 00:09:32,110
you back to the operating system to boil

107
00:09:29,290 --> 00:09:34,719
in their regimental Lopez la function ma

108
00:09:32,110 --> 00:09:37,570
map electro defeated hola Dora

109
00:09:34,720 --> 00:09:46,900
we're trying to understand little

110
00:09:37,570 --> 00:09:51,400
function ma map memory map not what are

111
00:09:46,900 --> 00:09:55,560
we going to do the beginning who is then

112
00:09:51,400 --> 00:10:03,000
the kind of protection it must match

113
00:09:55,560 --> 00:10:08,099
with the permission of the file device

114
00:10:03,000 --> 00:10:14,020
if I'm an user and I'm trying to open

115
00:10:08,100 --> 00:10:16,660
PTC because WT with read mode I should

116
00:10:14,020 --> 00:10:19,780
use the read protection because of the Y

117
00:10:16,660 --> 00:10:23,650
Z operating system that will tell me hey

118
00:10:19,780 --> 00:10:28,370
what are you doing you're trying to ride

119
00:10:23,650 --> 00:10:31,939
on this file he were override

120
00:10:28,370 --> 00:10:34,010
name in the Memorial okay da ba ba la

121
00:10:31,940 --> 00:10:38,750
memoria compartir de rien and they may

122
00:10:34,010 --> 00:10:43,610
have both memory modules either shared

123
00:10:38,750 --> 00:10:47,180
memory or private memory this kind of

124
00:10:43,610 --> 00:10:51,230
memory yes I wanna say Savannah's a pool

125
00:10:47,180 --> 00:10:53,540
IGAs will be carved on the last names

126
00:10:51,230 --> 00:10:57,110
Pericles slides are going to be

127
00:10:53,540 --> 00:10:59,060
published I will tell you after the

128
00:10:57,110 --> 00:11:05,150
workshop where to download this

129
00:10:59,060 --> 00:11:09,050
PowerPoint but how does a mapped memory

130
00:11:05,150 --> 00:11:13,520
word a shared much memory we have

131
00:11:09,050 --> 00:11:16,579
several processes we are using multitask

132
00:11:13,520 --> 00:11:21,680
operating systems and we need to map the

133
00:11:16,580 --> 00:11:24,080
memory somehow but what happens with the

134
00:11:21,680 --> 00:11:27,709
physical memory for each one of the

135
00:11:24,080 --> 00:11:32,089
processes it is thought that the

136
00:11:27,710 --> 00:11:34,720
physical memory it's theirs that's why

137
00:11:32,089 --> 00:11:39,140
we have the describers on the tables

138
00:11:34,720 --> 00:11:47,240
within the operating system which make

139
00:11:39,140 --> 00:11:49,089
the process thing to be it is unique but

140
00:11:47,240 --> 00:11:52,700
what happens in the operating system

141
00:11:49,089 --> 00:11:55,070
let's imagine you have a first process

142
00:11:52,700 --> 00:11:57,410
with a virtual memory on the second on

143
00:11:55,070 --> 00:12:01,850
the right part we have a second process

144
00:11:57,410 --> 00:12:05,380
with a virtual memory we have a file

145
00:12:01,850 --> 00:12:09,370
descriptor and we open the same file

146
00:12:05,380 --> 00:12:13,360
both pointers will point to the same

147
00:12:09,370 --> 00:12:20,630
place word file is in the physical

148
00:12:13,360 --> 00:12:24,020
memory logically the operating system

149
00:12:20,630 --> 00:12:30,700
wouldn't open a limited physical memory

150
00:12:24,020 --> 00:12:35,540
and feudin wouldn't be logical to open

151
00:12:30,700 --> 00:12:38,270
to different this script describers when

152
00:12:35,540 --> 00:12:42,110
we're not going to do a lot we just want

153
00:12:38,270 --> 00:12:45,709
to read the data in that bias what

154
00:12:42,110 --> 00:12:52,910
francium in classes the case of the LTC

155
00:12:45,709 --> 00:12:54,140
passwd so what's different map una

156
00:12:52,910 --> 00:12:56,899
memoria Mia

157
00:12:54,140 --> 00:13:03,560
privada I tell the operating system I

158
00:12:56,899 --> 00:13:07,040
want to use my private memory so the

159
00:13:03,560 --> 00:13:13,569
file is going to be assigned to private

160
00:13:07,040 --> 00:13:13,569
memory just using mat provide private

161
00:13:15,130 --> 00:13:20,779
the changes are not going to be visible

162
00:13:18,350 --> 00:13:23,149
for all the processes but the content of

163
00:13:20,779 --> 00:13:26,570
the original memory is going to be

164
00:13:23,149 --> 00:13:30,410
copied and the private memory where I

165
00:13:26,570 --> 00:13:34,820
will be able to do whatever I want so

166
00:13:30,410 --> 00:13:38,300
not here's how the physical memory works

167
00:13:34,820 --> 00:13:40,279
between process 1 & 4 & process 2

168
00:13:38,300 --> 00:13:42,800
there's going to be a copy of that

169
00:13:40,279 --> 00:13:46,130
memory of the people so that with my

170
00:13:42,800 --> 00:13:49,040
profit memory I can work on whatever I

171
00:13:46,130 --> 00:13:51,740
want if I want to modify something I

172
00:13:49,040 --> 00:13:57,019
will be able to do so but if I'm going

173
00:13:51,740 --> 00:14:02,060
to discard or if I'm going to discard

174
00:13:57,019 --> 00:14:05,089
the changes in the file it should be

175
00:14:02,060 --> 00:14:08,510
copied on the original memory and then

176
00:14:05,089 --> 00:14:10,519
permissions are going to tell me you can

177
00:14:08,510 --> 00:14:14,029
do whatever you to do in your private

178
00:14:10,519 --> 00:14:17,510
memory but obviously those changes those

179
00:14:14,029 --> 00:14:21,230
modifications in the original file are

180
00:14:17,510 --> 00:14:24,110
not going to be copied into the original

181
00:14:21,230 --> 00:14:29,329
file because the operating system is

182
00:14:24,110 --> 00:14:32,180
going to prevent it from happening this

183
00:14:29,329 --> 00:14:39,579
is the theoretical part for you to

184
00:14:32,180 --> 00:14:39,579
understand the magic we're going to use

185
00:14:44,740 --> 00:14:48,040
and then

186
00:14:49,060 --> 00:14:56,390
getting working you know that you have a

187
00:14:53,140 --> 00:14:59,870
so we're going to try to do a small

188
00:14:56,390 --> 00:15:02,480
exercise first of all we're going to

189
00:14:59,870 --> 00:15:08,089
take a code we're going to try to mock

190
00:15:02,480 --> 00:15:14,360
up a file to do if you have the virtual

191
00:15:08,089 --> 00:15:18,890
machine it has the port 22 open so that

192
00:15:14,360 --> 00:15:21,260
you can use any laptop because if we had

193
00:15:18,890 --> 00:15:24,370
it with say 12 books he would have been

194
00:15:21,260 --> 00:15:33,410
more complicated to use these consoles

195
00:15:24,370 --> 00:15:37,600
I'm using DLL in here you have all the

196
00:15:33,410 --> 00:15:44,089
microcode and in the first one we find

197
00:15:37,600 --> 00:15:50,290
dear to go demos which look what we have

198
00:15:44,089 --> 00:15:50,290
here we have the a map that C

199
00:15:51,100 --> 00:15:57,160
corresponds to the file that I have

200
00:15:55,310 --> 00:16:04,719
mentioned earlier

201
00:15:57,160 --> 00:16:12,319
super easy let's see what do we have

202
00:16:04,720 --> 00:16:19,750
I'm going to open the TC has W beans we

203
00:16:12,320 --> 00:16:23,450
are root user we open this file with the

204
00:16:19,750 --> 00:16:25,670
read/write in mode the operating system

205
00:16:23,450 --> 00:16:33,800
is going to check out for the root user

206
00:16:25,670 --> 00:16:36,979
is that correct but I do it mini

207
00:16:33,800 --> 00:16:39,620
straighter user then I could read those

208
00:16:36,980 --> 00:16:44,320
ten bytes I could write on the memory

209
00:16:39,620 --> 00:16:52,180
and I could community modifications so

210
00:16:44,320 --> 00:16:56,620
see oh I'm sorry

211
00:16:52,180 --> 00:16:56,620
that's wrong that's

212
00:16:57,600 --> 00:17:15,599
so rude can you say it properly

213
00:17:02,399 --> 00:17:20,220
do you need a bigger fund okay mucho

214
00:17:15,599 --> 00:17:22,889
porque una empresa there is a user which

215
00:17:20,220 --> 00:17:32,490
I am going to use which is overcome

216
00:17:22,890 --> 00:17:42,049
cyber camp with nothing not to open

217
00:17:32,490 --> 00:17:46,890
several terminals prepare these user

218
00:17:42,049 --> 00:17:52,559
reveal could open anyone let's see I'm

219
00:17:46,890 --> 00:17:56,820
going to open another console it's this

220
00:17:52,559 --> 00:18:03,330
age come on up nothing I told him up at

221
00:17:56,820 --> 00:18:05,700
the console is ready to work on an 80

222
00:18:03,330 --> 00:18:18,689
mode so that you don't have any problem

223
00:18:05,700 --> 00:18:22,470
to access it I meant each other nobody I

224
00:18:18,690 --> 00:18:26,510
was that pale I was told not to turn

225
00:18:22,470 --> 00:18:26,510
around but I think I need it

226
00:18:26,650 --> 00:18:29,709
[Music]

227
00:18:35,840 --> 00:18:52,709
hey are you okay so I don't know if you

228
00:18:45,000 --> 00:18:55,350
can see it right I D it is an user

229
00:18:52,710 --> 00:18:58,440
without any privilege but if I want to

230
00:18:55,350 --> 00:19:02,459
see the content of the file et Cie

231
00:18:58,440 --> 00:19:05,730
passwd we see everything but we cannot

232
00:19:02,460 --> 00:19:09,290
do anything else obviously I'm not

233
00:19:05,730 --> 00:19:09,290
allowed to write

234
00:19:14,330 --> 00:19:54,899
okay yes so I just have one split and

235
00:19:50,070 --> 00:19:58,950
let's do one thing the code that I have

236
00:19:54,899 --> 00:20:06,860
here the M the M map is going to be

237
00:19:58,950 --> 00:20:11,240
copied off Cybercom amberle elessedil

238
00:20:06,860 --> 00:20:14,269
appears l provid are you say welcome

239
00:20:11,240 --> 00:20:27,210
then this is the owner yes I've come

240
00:20:14,269 --> 00:20:29,999
home so I become plaintiff I'll come

241
00:20:27,210 --> 00:20:38,119
they know me mmm up he comment a

242
00:20:29,999 --> 00:20:42,210
logically I have my Cybercom my em up I

243
00:20:38,119 --> 00:20:45,119
look at the code again I am going to try

244
00:20:42,210 --> 00:20:50,119
to open it as read and write e mode and

245
00:20:45,119 --> 00:20:55,619
I'm going to try to change it let's say

246
00:20:50,119 --> 00:21:00,840
GCC - Oh name mmm out and let's compile

247
00:20:55,619 --> 00:21:06,840
the source do you think it is going to

248
00:21:00,840 --> 00:21:10,369
work it shouldn't because if it does

249
00:21:06,840 --> 00:21:15,539
work then it's like winning the lottery

250
00:21:10,369 --> 00:21:17,370
this is segment breach it's telling me

251
00:21:15,539 --> 00:21:19,980
hey you have tried to do

252
00:21:17,370 --> 00:21:23,340
something which is not logical according

253
00:21:19,980 --> 00:21:28,110
to your permissions so I'm not allowed

254
00:21:23,340 --> 00:21:31,879
to do so this is the normal behavior of

255
00:21:28,110 --> 00:21:35,340
the operating system however let's see

256
00:21:31,880 --> 00:21:40,080
these technique of copy-on-write they

257
00:21:35,340 --> 00:21:43,409
see o w we have the same physical memory

258
00:21:40,080 --> 00:21:46,949
page two pointers which point at the

259
00:21:43,410 --> 00:21:52,559
same card if they have identical content

260
00:21:46,950 --> 00:21:56,910
but if I want to map to map it into my

261
00:21:52,559 --> 00:22:01,320
private memory it involves they see owt

262
00:21:56,910 --> 00:22:04,410
copy so I take it I will have another

263
00:22:01,320 --> 00:22:07,050
pointer below which is pointed to

264
00:22:04,410 --> 00:22:08,940
another part of the physical memory

265
00:22:07,050 --> 00:22:12,899
which has nothing to do with the

266
00:22:08,940 --> 00:22:15,900
original one it is way below so let's

267
00:22:12,900 --> 00:22:19,080
see how we can do it this is the whole

268
00:22:15,900 --> 00:22:27,990
process we're going let's see how we can

269
00:22:19,080 --> 00:22:29,870
map it with many problems I'm going to

270
00:22:27,990 --> 00:22:37,010
open this file

271
00:22:29,870 --> 00:22:38,159
okey and notice something here mr.

272
00:22:37,010 --> 00:22:43,770
Latura

273
00:22:38,160 --> 00:22:46,230
yeah CUDA did I write I said read and

274
00:22:43,770 --> 00:22:48,030
write mode and I think that's what going

275
00:22:46,230 --> 00:22:57,870
to be the mistake I think that was a

276
00:22:48,030 --> 00:23:06,770
mistake we could assign the modifier R

277
00:22:57,870 --> 00:23:06,770
or we could change it for the brief

278
00:23:09,440 --> 00:23:20,010
change it to our read-only mode we could

279
00:23:15,690 --> 00:23:25,470
just write that let's follow these steps

280
00:23:20,010 --> 00:23:28,910
that the operating system is given us we

281
00:23:25,470 --> 00:23:32,280
can write whatever one

282
00:23:28,910 --> 00:23:34,200
what did we say what we're going to do

283
00:23:32,280 --> 00:23:38,850
what would I need to change you know

284
00:23:34,200 --> 00:23:41,990
that for me to allow me to write allow

285
00:23:38,850 --> 00:23:47,730
me to write or to allow me to read

286
00:23:41,990 --> 00:23:52,620
are you familiar with this okay I like

287
00:23:47,730 --> 00:23:57,210
the other way but just okay that's gonna

288
00:23:52,620 --> 00:24:03,500
enable us to open it we said these had

289
00:23:57,210 --> 00:24:03,500
to my with the previous step right okay

290
00:24:04,220 --> 00:24:10,559
I'm going to leave broad right in order

291
00:24:07,890 --> 00:24:14,730
for me to be able to write but look at

292
00:24:10,559 --> 00:24:17,280
here map shared what are the two

293
00:24:14,730 --> 00:24:21,380
pointers in the physical memory they are

294
00:24:17,280 --> 00:24:25,799
pointing at the same point and I'm going

295
00:24:21,380 --> 00:24:30,179
do something instead of writing map

296
00:24:25,799 --> 00:24:34,559
shared I can say mobile private do you

297
00:24:30,179 --> 00:24:37,080
think I can do it we have seen

298
00:24:34,559 --> 00:24:41,399
definition of the function I can write

299
00:24:37,080 --> 00:24:46,230
this and what is happening here one

300
00:24:41,400 --> 00:24:51,090
there will be coping I will be able to

301
00:24:46,230 --> 00:24:54,720
do whatever I want with my coping but

302
00:24:51,090 --> 00:24:58,439
when two the two pointers go back to the

303
00:24:54,720 --> 00:25:01,710
same place I want to be able to do what

304
00:24:58,440 --> 00:25:16,380
I wanted but while I have this copy I

305
00:25:01,710 --> 00:25:22,169
can use it as I want you can see there

306
00:25:16,380 --> 00:25:26,250
is a warning that we don't care we if

307
00:25:22,169 --> 00:25:30,510
it's if we are compiling it is the K for

308
00:25:26,250 --> 00:25:35,010
us to ignore that warning are you

309
00:25:30,510 --> 00:25:38,460
following me okay

310
00:25:35,010 --> 00:25:40,850
this is a bridge a second membrane so

311
00:25:38,460 --> 00:25:44,640
this is not working demo Bharati

312
00:25:40,850 --> 00:25:50,520
we're trying to do something that the

313
00:25:44,640 --> 00:25:55,110
operating system don't like because

314
00:25:50,520 --> 00:25:57,900
there are some privilege systems he's

315
00:25:55,110 --> 00:26:00,570
there identification systems and the

316
00:25:57,900 --> 00:26:02,930
operating system doesn't like what we're

317
00:26:00,570 --> 00:26:02,929
doing

318
00:26:03,110 --> 00:26:14,100
okay let's see if now we can advance a

319
00:26:07,110 --> 00:26:18,929
little bit let's imagine I have read

320
00:26:14,100 --> 00:26:21,929
only mode file he waives permissions for

321
00:26:18,930 --> 00:26:29,580
everything to match correctly and then

322
00:26:21,930 --> 00:26:32,940
I'm going to open it with the indicator

323
00:26:29,580 --> 00:26:35,760
read-only and I'm going to use the

324
00:26:32,940 --> 00:26:38,190
option prod renoise the operating system

325
00:26:35,760 --> 00:26:41,730
is going to allow me to do so because

326
00:26:38,190 --> 00:26:44,310
both match it is not what I did

327
00:26:41,730 --> 00:26:48,510
previously in this case the operating

328
00:26:44,310 --> 00:26:50,879
system sees that both of them match and

329
00:26:48,510 --> 00:26:57,210
they match with the permissions within

330
00:26:50,880 --> 00:27:01,860
the file now I shouldn't be able to

331
00:26:57,210 --> 00:27:06,390
write on a read-only mode memory but if

332
00:27:01,860 --> 00:27:11,699
I'm up in the private memory I could

333
00:27:06,390 --> 00:27:28,190
write on the file copied and I could use

334
00:27:11,700 --> 00:27:39,080
any function the road map open any file

335
00:27:28,190 --> 00:27:47,750
both permissions I have my private and I

336
00:27:39,080 --> 00:27:47,750
see the process memory with India from

337
00:27:48,609 --> 00:27:58,489
and with el-sheikh I could go to a

338
00:27:53,809 --> 00:28:01,839
certain position I could write I could

339
00:27:58,489 --> 00:28:01,839
do whatever I wanted

340
00:28:03,349 --> 00:28:10,279
what's the limit to what extent when I

341
00:28:07,159 --> 00:28:14,539
tell the operating system to discard the

342
00:28:10,279 --> 00:28:17,449
memory and pointers a point at the same

343
00:28:14,539 --> 00:28:24,069
card it's going to say that permissions

344
00:28:17,449 --> 00:28:24,069
do not allow me to do so how are you

345
00:28:25,359 --> 00:28:37,178
ok I'm going to copy these to the home

346
00:28:30,769 --> 00:28:41,839
of the users have become a copyright

347
00:28:37,179 --> 00:28:56,149
owner cyber come if you want you can

348
00:28:41,839 --> 00:29:03,079
copy the whole folder you can I change

349
00:28:56,149 --> 00:29:08,329
them up a meal okay this is a room map

350
00:29:03,079 --> 00:29:11,509
file it is mine I'm no one according to

351
00:29:08,329 --> 00:29:16,459
my idea and I'm going to date these

352
00:29:11,509 --> 00:29:19,759
files if you realize it is exactly the

353
00:29:16,459 --> 00:29:26,329
same but instead of having this file I'm

354
00:29:19,759 --> 00:29:30,649
going to instead of adding a file that I

355
00:29:26,329 --> 00:29:36,799
created I'm going to open directly the

356
00:29:30,649 --> 00:29:41,178
phi e TC has WD it is a system file but

357
00:29:36,799 --> 00:29:43,690
it works in the same way this is in

358
00:29:41,179 --> 00:29:50,389
read-only mode

359
00:29:43,690 --> 00:29:56,210
I have the pro-trade but not his this is

360
00:29:50,389 --> 00:29:59,909
the difference from before because

361
00:29:56,210 --> 00:30:03,179
both matches and I have a private memory

362
00:29:59,910 --> 00:30:07,470
and the rest I don't care it is a still

363
00:30:03,179 --> 00:30:15,390
advanced in the file and to show it on

364
00:30:07,470 --> 00:30:21,720
screen then we need to clean here when

365
00:30:15,390 --> 00:30:28,650
we compile let's see what what happens

366
00:30:21,720 --> 00:30:42,000
when we compile the same everything is

367
00:30:28,650 --> 00:30:44,940
compiled and now okay I maybe I'm going

368
00:30:42,000 --> 00:30:49,340
too fast but I would like for those who

369
00:30:44,940 --> 00:30:52,830
have a laptop you know to do it

370
00:30:49,340 --> 00:30:56,490
sometimes a whole workshop that's five

371
00:30:52,830 --> 00:30:58,980
or six hours if we describe properly all

372
00:30:56,490 --> 00:31:01,620
their steps but let's try raise your

373
00:30:58,980 --> 00:31:13,380
hand if it is working okay one person

374
00:31:01,620 --> 00:31:17,340
good the operating system has underlying

375
00:31:13,380 --> 00:31:25,500
information it has open the file

376
00:31:17,340 --> 00:31:29,428
et Cie pass WD it has copied copied it

377
00:31:25,500 --> 00:31:37,770
in my route private memory where I come

378
00:31:29,429 --> 00:31:43,169
in Lane five and then here I have

379
00:31:37,770 --> 00:31:46,350
managed to change in the root part SEO

380
00:31:43,169 --> 00:31:52,290
is bad Oh meeting your mother I have

381
00:31:46,350 --> 00:31:56,309
imagined wise advice a system call in

382
00:31:52,290 --> 00:31:58,799
all then to leave the pointer in the

383
00:31:56,309 --> 00:32:02,090
block of physical memory corresponding

384
00:31:58,799 --> 00:32:02,090
to the original file

385
00:32:03,280 --> 00:32:15,670
system has realized okay you do not have

386
00:32:08,800 --> 00:32:22,240
any right information so the root is

387
00:32:15,670 --> 00:32:27,090
going to stay this way okay if we can

388
00:32:22,240 --> 00:32:31,180
address it at least we can play on a

389
00:32:27,090 --> 00:32:35,429
private memory but what is it what can I

390
00:32:31,180 --> 00:32:35,430
use it for for nothing but actually

391
00:32:36,570 --> 00:32:55,060
there is an operation called my vise we

392
00:32:51,310 --> 00:32:58,300
have copied the mapped memory the page

393
00:32:55,060 --> 00:33:03,370
table has been updated we have written

394
00:32:58,300 --> 00:33:06,940
on the memory but not taste is how

395
00:33:03,370 --> 00:33:09,689
important it is it says that the steps

396
00:33:06,940 --> 00:33:12,630
are not do not have an atomic nature

397
00:33:09,690 --> 00:33:17,170
which means that they can be interrupted

398
00:33:12,630 --> 00:33:20,740
we do not need to follow a b3 in order

399
00:33:17,170 --> 00:33:23,200
at a certain point I can interrupt this

400
00:33:20,740 --> 00:33:28,360
process and do whatever I want I could

401
00:33:23,200 --> 00:33:31,800
do a C and then B and then D and this is

402
00:33:28,360 --> 00:33:34,600
precisely what is going to create a

403
00:33:31,800 --> 00:33:40,600
potential race condition which will

404
00:33:34,600 --> 00:33:45,699
enable me to exploit I have a my device

405
00:33:40,600 --> 00:33:48,790
function it is going to indicate that

406
00:33:45,700 --> 00:33:51,820
you need to leave the pointer where it

407
00:33:48,790 --> 00:33:54,280
was in the beginning by half but I have

408
00:33:51,820 --> 00:33:58,450
another function that is enabling me to

409
00:33:54,280 --> 00:34:03,100
write on my part of my private memory

410
00:33:58,450 --> 00:34:06,250
so if steps are not atomic I could be

411
00:34:03,100 --> 00:34:09,730
writing changes on the one side and on

412
00:34:06,250 --> 00:34:10,699
the other side I could be calling the

413
00:34:09,730 --> 00:34:14,030
mud

414
00:34:10,699 --> 00:34:17,388
system and maybe at a certain point that

415
00:34:14,030 --> 00:34:20,300
is race condition at a certain point the

416
00:34:17,389 --> 00:34:23,060
operating system is not following and we

417
00:34:20,300 --> 00:34:25,730
can commit to the original point we

418
00:34:23,060 --> 00:34:29,750
could commit those changes to the

419
00:34:25,730 --> 00:34:32,060
original pointers those changes that I

420
00:34:29,750 --> 00:34:44,449
have written on my private memory and

421
00:34:32,060 --> 00:34:45,949
that's what data collection so here I

422
00:34:44,449 --> 00:34:51,529
can say I am NOT going to need that

423
00:34:45,949 --> 00:34:55,428
memory we are going to be able to invoke

424
00:34:51,530 --> 00:34:56,270
it little by little so this step is not

425
00:34:55,429 --> 00:34:59,270
atomic

426
00:34:56,270 --> 00:35:02,509
it may be called the first step but I

427
00:34:59,270 --> 00:35:05,540
can call it after the second one after

428
00:35:02,510 --> 00:35:09,339
the fourth one whenever I want to and I

429
00:35:05,540 --> 00:35:12,380
know they succeed what could we do well

430
00:35:09,339 --> 00:35:17,390
so the idea would be to have a first

431
00:35:12,380 --> 00:35:20,690
thread in which we would write and we

432
00:35:17,390 --> 00:35:23,270
would have a second thread ruling out

433
00:35:20,690 --> 00:35:26,000
the previous mapped memory and if we are

434
00:35:23,270 --> 00:35:28,310
lucky in a race condition in which there

435
00:35:26,000 --> 00:35:30,470
are so many cycles we will reach a point

436
00:35:28,310 --> 00:35:32,240
in which the changes that I've done in

437
00:35:30,470 --> 00:35:38,480
my private art will remain in my

438
00:35:32,240 --> 00:35:41,959
original file and in order to do so well

439
00:35:38,480 --> 00:35:43,940
we've created the user already so let's

440
00:35:41,960 --> 00:35:46,700
imagine that here for example in this

441
00:35:43,940 --> 00:35:55,430
case I'm a normal user

442
00:35:46,700 --> 00:36:00,859
I'm Cybercom I have user ID Abel I'm

443
00:35:55,430 --> 00:36:03,200
able to move in a normal file and I can

444
00:36:00,859 --> 00:36:05,589
look for things in a normal file I'm

445
00:36:03,200 --> 00:36:08,240
going to have our normal ID that will be

446
00:36:05,589 --> 00:36:12,680
one thousand ten thousand I don't know

447
00:36:08,240 --> 00:36:15,759
what's going to be and I don't know even

448
00:36:12,680 --> 00:36:19,819
what group I am but I can look for aid

449
00:36:15,760 --> 00:36:21,770
if I start changing this in the threat

450
00:36:19,819 --> 00:36:23,560
in which I can write within the memory

451
00:36:21,770 --> 00:36:27,690
in my private part

452
00:36:23,560 --> 00:36:32,470
if I can change zeros if I can change

453
00:36:27,690 --> 00:36:35,320
1,000 by zero zero zero zero and at some

454
00:36:32,470 --> 00:36:37,299
point Matt Weiss commits the change in

455
00:36:35,320 --> 00:36:41,170
this race condition what's going to be

456
00:36:37,300 --> 00:36:44,910
the result in their file come on

457
00:36:41,170 --> 00:36:48,010
the room is almost fooled it will be

458
00:36:44,910 --> 00:36:50,819
kept it will be kept let's see if that

459
00:36:48,010 --> 00:36:50,820
happens for real

460
00:36:51,090 --> 00:36:59,560
well basically this is just a small

461
00:36:53,830 --> 00:37:04,000
exploit in which here for example you

462
00:36:59,560 --> 00:37:07,840
can see the threat what's interesting to

463
00:37:04,000 --> 00:37:10,920
us so in order to create their race

464
00:37:07,840 --> 00:37:15,850
conditions I'm going to create a thread

465
00:37:10,920 --> 00:37:17,140
the mat bite and the right here I'm

466
00:37:15,850 --> 00:37:21,549
going to have two threads

467
00:37:17,140 --> 00:37:23,799
my vise and right what I'm going to do

468
00:37:21,550 --> 00:37:30,970
next in one thread I'm going to look for

469
00:37:23,800 --> 00:37:33,310
my user for example it would work just

470
00:37:30,970 --> 00:37:34,629
by changing the user ID that I have but

471
00:37:33,310 --> 00:37:39,600
I can also change the group the

472
00:37:34,630 --> 00:37:39,600
description anything I wanted and that

473
00:37:39,870 --> 00:37:44,650
just involves writing in that thread in

474
00:37:43,150 --> 00:37:47,500
the other thread the only thing that I

475
00:37:44,650 --> 00:37:49,660
have to do is saying this memory is

476
00:37:47,500 --> 00:37:52,960
ruled out commit this memory and leave

477
00:37:49,660 --> 00:37:54,670
the pointer where it is so the race

478
00:37:52,960 --> 00:37:57,160
condition is executed and then

479
00:37:54,670 --> 00:38:06,220
automatically we are going to use what

480
00:37:57,160 --> 00:38:13,299
we've written so let's see if that's so

481
00:38:06,220 --> 00:38:16,810
we are user without privileges I have

482
00:38:13,300 --> 00:38:27,990
here an exploit we also can see their

483
00:38:16,810 --> 00:38:31,200
code in the root e so if I'm a user that

484
00:38:27,990 --> 00:38:32,779
downloads an exploit execute C it is

485
00:38:31,200 --> 00:38:38,410
execute is

486
00:38:32,780 --> 00:38:38,410
composites I'm not going to easily come

487
00:38:38,800 --> 00:38:49,190
because I have to truly find out who I

488
00:38:43,790 --> 00:38:54,800
am say for example here this is looking

489
00:38:49,190 --> 00:39:00,250
for a user that's not me that ISA is not

490
00:38:54,800 --> 00:39:08,810
me that user is the last user I sent for

491
00:39:00,250 --> 00:39:11,120
the last person that did an exploit it's

492
00:39:08,810 --> 00:39:13,279
not always going so much to what you

493
00:39:11,120 --> 00:39:15,560
want to but if you really understand the

494
00:39:13,280 --> 00:39:17,540
code of what you're handling you're

495
00:39:15,560 --> 00:39:23,000
going to be able to do anything you want

496
00:39:17,540 --> 00:39:26,210
to so what are we going to do I have a

497
00:39:23,000 --> 00:39:32,690
user ID a certain user ID for example

498
00:39:26,210 --> 00:39:36,710
here I'm the user Cybercom I have four

499
00:39:32,690 --> 00:39:41,210
servers because I'm the user number 1000

500
00:39:36,710 --> 00:39:42,920
1001 1004 with four digits I can even be

501
00:39:41,210 --> 00:39:47,750
more specific

502
00:39:42,920 --> 00:39:50,810
when I'm within their files but here I'm

503
00:39:47,750 --> 00:39:54,710
just opening the file for the mapped

504
00:39:50,810 --> 00:39:58,210
memory as we've seen it before and this

505
00:39:54,710 --> 00:39:58,210
is the threat that I've mentioned before

506
00:39:59,980 --> 00:40:11,390
so here in order to find Who I am

507
00:40:06,830 --> 00:40:13,100
I'm going to search within the file even

508
00:40:11,390 --> 00:40:14,960
though I meet with inside the memory I'm

509
00:40:13,100 --> 00:40:18,380
going to look for this hyper camp you

510
00:40:14,960 --> 00:40:21,350
say I'm going to see that I have an ID

511
00:40:18,380 --> 00:40:26,630
number of 1000 was it the same one as

512
00:40:21,350 --> 00:40:31,040
before yes it was so I think so so this

513
00:40:26,630 --> 00:40:34,180
is right so let's shake example here I

514
00:40:31,040 --> 00:40:37,520
can see that I'm used to number 1000

515
00:40:34,180 --> 00:40:40,490
maybe in a real system I can be there

516
00:40:37,520 --> 00:40:43,970
user number 3000 or maybe it can have

517
00:40:40,490 --> 00:40:46,490
just three digits instead of four but

518
00:40:43,970 --> 00:40:48,770
this is just for you to understand

519
00:40:46,490 --> 00:41:00,859
with moral code that's behind all of

520
00:40:48,770 --> 00:41:03,320
these don't give up here so again these

521
00:41:00,859 --> 00:41:10,580
are the changes so this is going to look

522
00:41:03,320 --> 00:41:14,960
for cyber command is going to r02 is

523
00:41:10,580 --> 00:41:19,450
going to search within the map of the

524
00:41:14,960 --> 00:41:22,700
private memory the part of cyber county

525
00:41:19,450 --> 00:41:24,740
with related to the number of 1000 and

526
00:41:22,700 --> 00:41:33,230
in the other thread that i've mentioned

527
00:41:24,740 --> 00:41:35,569
before that memory is going to be ruled

528
00:41:33,230 --> 00:41:37,580
out let's see if that's true

529
00:41:35,570 --> 00:41:40,060
now we're going to compile it before

530
00:41:37,580 --> 00:41:42,410
compiling it we have to use the library

531
00:41:40,060 --> 00:41:45,410
because as I'm working with threads I

532
00:41:42,410 --> 00:41:53,899
need to work through the library of the

533
00:41:45,410 --> 00:42:03,140
threads so let's compile let's create

534
00:41:53,900 --> 00:42:10,780
the exploit and now we're going to

535
00:42:03,140 --> 00:42:17,540
combine with f3 so now this is compile

536
00:42:10,780 --> 00:42:23,660
before executing I mean ID mine I'm the

537
00:42:17,540 --> 00:42:27,040
intern I'm the intern and now I'm going

538
00:42:23,660 --> 00:42:27,040
to execute the exploit

539
00:42:27,250 --> 00:42:34,640
I didn't write any duration in the

540
00:42:32,240 --> 00:42:39,250
thread they are executing themselves I

541
00:42:34,640 --> 00:42:42,020
have a lot of race conditions so we

542
00:42:39,250 --> 00:42:47,990
don't need to keep it for a long time

543
00:42:42,020 --> 00:42:51,170
it's running so maybe it could happen

544
00:42:47,990 --> 00:42:54,140
very fast just in the first or second

545
00:42:51,170 --> 00:42:57,250
execution I'm going to click on ctrl C

546
00:42:54,140 --> 00:43:00,609
for mine now

547
00:42:57,250 --> 00:43:10,619
the route and I so now when I'm right

548
00:43:00,609 --> 00:43:16,810
when I write I attack the ID number one

549
00:43:10,619 --> 00:43:20,730
of cyber can exploit has failed are you

550
00:43:16,810 --> 00:43:23,190
sure the exploit has failed are you

551
00:43:20,730 --> 00:43:30,990
wandering through an El Sistema

552
00:43:23,190 --> 00:43:36,210
mountain go away when we are inside the

553
00:43:30,990 --> 00:43:36,209
system I'm going to keep the original

554
00:43:37,530 --> 00:43:49,270
the original mission but if I exit exist

555
00:43:41,619 --> 00:43:52,090
the system and then I enter again in the

556
00:43:49,270 --> 00:43:55,480
system as Cybercom without changing the

557
00:43:52,090 --> 00:43:58,270
password when I write the password you

558
00:43:55,480 --> 00:44:01,180
know it is something we are here do you

559
00:43:58,270 --> 00:44:05,050
think there is something weird is

560
00:44:01,180 --> 00:44:08,049
something here which is not for the

561
00:44:05,050 --> 00:44:13,859
cyber camp you sir what can we see here

562
00:44:08,050 --> 00:44:13,859
the mighty we've done now I'm a Rooter

563
00:44:14,400 --> 00:44:23,589
turn into a group to change the group or

564
00:44:18,609 --> 00:44:25,109
to change the description do you want me

565
00:44:23,589 --> 00:44:30,790
to do in the system

566
00:44:25,109 --> 00:44:32,109
something evil maybe this is not

567
00:44:30,790 --> 00:44:36,359
something that we would do all real

568
00:44:32,109 --> 00:44:39,310
conditions if the system would be part

569
00:44:36,359 --> 00:44:45,460
this shouldn't work if the system was

570
00:44:39,310 --> 00:44:50,380
positive should shouldn't work so what

571
00:44:45,460 --> 00:44:52,960
can we do with this well in the end this

572
00:44:50,380 --> 00:44:55,650
is just about having some basic

573
00:44:52,960 --> 00:45:03,730
some basic knowledge and understanding

574
00:44:55,650 --> 00:45:07,340
what there is within this code to start

575
00:45:03,730 --> 00:45:10,810
playing of example so let's live to

576
00:45:07,340 --> 00:45:13,430
Timothy to another game it's exercise

577
00:45:10,810 --> 00:45:18,560
let's do an exercise so I have the

578
00:45:13,430 --> 00:45:21,100
exploit so imagine that no I can write I

579
00:45:18,560 --> 00:45:25,370
want to change the password of the files

580
00:45:21,100 --> 00:45:31,150
CTC shadow two one two three four five

581
00:45:25,370 --> 00:45:35,569
six so let's make it be let's try the

582
00:45:31,150 --> 00:45:38,710
newspapers to write about us and now I'm

583
00:45:35,570 --> 00:45:44,750
joking this is for educational purposes

584
00:45:38,710 --> 00:45:51,020
just educational purposes of course so

585
00:45:44,750 --> 00:45:53,540
let's do this exercise could we do it we

586
00:45:51,020 --> 00:45:53,990
change all the users with credentials in

587
00:45:53,540 --> 00:45:58,759
the file

588
00:45:53,990 --> 00:46:05,390
ATC shadow to have to change the

589
00:45:58,760 --> 00:46:08,660
password and to write one two three well

590
00:46:05,390 --> 00:46:11,240
in this case I'm already route if I'm

591
00:46:08,660 --> 00:46:13,430
rude of course I will be able to do so

592
00:46:11,240 --> 00:46:15,290
to change this password about that guten

593
00:46:13,430 --> 00:46:18,470
bees that would be too easy

594
00:46:15,290 --> 00:46:21,740
so well let's look for a an atc shadow

595
00:46:18,470 --> 00:46:27,339
right and let's see the type of

596
00:46:21,740 --> 00:46:41,899
parameter it has and for whom a normal

597
00:46:27,340 --> 00:46:45,620
system permits if I'm not using an

598
00:46:41,900 --> 00:46:49,880
operating system I mean if my operating

599
00:46:45,620 --> 00:46:53,750
system is saying that I'm going to be

600
00:46:49,880 --> 00:46:55,610
able to open this even in read-only mode

601
00:46:53,750 --> 00:46:57,410
I'm not going to be able to open that

602
00:46:55,610 --> 00:47:04,580
file so I don't have that possibility

603
00:46:57,410 --> 00:47:07,279
but this is going to work in any file in

604
00:47:04,580 --> 00:47:16,850
which at least I have that read-only per

605
00:47:07,280 --> 00:47:19,610
me so these meter is 32 bytes what

606
00:47:16,850 --> 00:47:20,880
happens with 64 bytes how am I going to

607
00:47:19,610 --> 00:47:23,810
exploit that

608
00:47:20,880 --> 00:47:25,980
what should i do what should i click on

609
00:47:23,810 --> 00:47:27,690
but if can see some more route okay

610
00:47:25,980 --> 00:47:39,660
you're not even a member we are

611
00:47:27,690 --> 00:47:44,070
complicated well we are have to exploit

612
00:47:39,660 --> 00:47:47,759
a user are you sir so what what this

613
00:47:44,070 --> 00:47:50,550
person said is just go and executed but

614
00:47:47,760 --> 00:48:01,560
then I could just go and edit it and I

615
00:47:50,550 --> 00:48:05,580
mean to do it without any privilege so

616
00:48:01,560 --> 00:48:09,750
what's the difference between 30 and 30

617
00:48:05,580 --> 00:48:14,340
and 64 bytes regarding they exploit

618
00:48:09,750 --> 00:48:16,950
Munna come on if you find it out I will

619
00:48:14,340 --> 00:48:18,420
pay you a beer afterwards there is no

620
00:48:16,950 --> 00:48:21,810
difference what there's no difference at

621
00:48:18,420 --> 00:48:27,000
all their work exactly the same way

622
00:48:21,810 --> 00:48:29,850
because I'm basing this on a C's system

623
00:48:27,000 --> 00:48:32,040
call which is native of the computer

624
00:48:29,850 --> 00:48:37,259
maybe I can do a cross compilation I

625
00:48:32,040 --> 00:48:46,050
could add minus M 64 and in order to

626
00:48:37,260 --> 00:48:50,280
generate an exploit for 64 bytes well

627
00:48:46,050 --> 00:48:56,600
the next exercise is to analyze they

628
00:48:50,280 --> 00:48:56,600
exploit available in these treasures

629
00:48:57,620 --> 00:49:03,980
because sometimes what really works is a

630
00:49:01,530 --> 00:49:09,170
part that we want people to see but

631
00:49:03,980 --> 00:49:09,170
behind that we may find many more things

632
00:49:15,530 --> 00:49:24,140
let's move to we have here all over

633
00:49:24,390 --> 00:49:36,769
take this spectrum Spectre is a

634
00:49:34,319 --> 00:49:45,989
vulnerability of the kernel of kernel

635
00:49:36,769 --> 00:49:51,058
that happens in modern cycles and that

636
00:49:45,989 --> 00:49:55,710
happens to my microphones better Intel

637
00:49:51,059 --> 00:50:00,180
for this 32 up here in the Intel system

638
00:49:55,710 --> 00:50:02,069
and everybody started saying that the

639
00:50:00,180 --> 00:50:06,629
engineers of Intel Hutton something

640
00:50:02,069 --> 00:50:12,538
wrong but afterwards this also affected

641
00:50:06,630 --> 00:50:16,940
while AMD a empower PowerPC and there's

642
00:50:12,539 --> 00:50:21,089
any mic micro processors that execute

643
00:50:16,940 --> 00:50:23,249
the speculative execution in a branch

644
00:50:21,089 --> 00:50:26,220
predictions have you heard of these

645
00:50:23,249 --> 00:50:29,009
speculative execution in writes

646
00:50:26,220 --> 00:50:32,999
prediction one two three people but

647
00:50:29,009 --> 00:50:38,430
you've heard about this right what we

648
00:50:32,999 --> 00:50:44,788
will see what this is about but well

649
00:50:38,430 --> 00:50:47,609
basically this some CV is for a site and

650
00:50:44,789 --> 00:50:49,289
it is affected barely all of the

651
00:50:47,609 --> 00:50:51,089
operating systems because this is not

652
00:50:49,289 --> 00:50:53,999
something is Pacific to operating system

653
00:50:51,089 --> 00:50:56,339
at this is in the hardware and because

654
00:50:53,999 --> 00:50:58,499
of the way their Hardware works no

655
00:50:56,339 --> 00:51:01,529
matter the operating system that you put

656
00:50:58,499 --> 00:51:05,459
on top this problem is going to be on

657
00:51:01,529 --> 00:51:09,239
the base of everything as we really like

658
00:51:05,460 --> 00:51:10,499
this type of vulnerabilities with a logo

659
00:51:09,239 --> 00:51:12,440
a nice logo because every time I've

660
00:51:10,499 --> 00:51:15,919
owner ability is going to be published

661
00:51:12,440 --> 00:51:18,319
people look for a nice logo

662
00:51:15,920 --> 00:51:25,640
and someone writes an article that

663
00:51:18,319 --> 00:51:28,160
nobody understands and that's so well

664
00:51:25,640 --> 00:51:29,629
part of our real work is to try to

665
00:51:28,160 --> 00:51:32,328
understand how these vulnerabilities

666
00:51:29,630 --> 00:51:35,799
work you know that to reply them and to

667
00:51:32,329 --> 00:51:41,029
solve them but this can also be loaded

668
00:51:35,799 --> 00:51:46,339
remote remotely GI t motors that work

669
00:51:41,029 --> 00:51:50,750
for JavaScript who's not using

670
00:51:46,339 --> 00:51:55,339
javascript nowadays when navigating I do

671
00:51:50,750 --> 00:52:01,010
so but in the end I cannot see the

672
00:51:55,339 --> 00:52:01,910
functionalities of any website I can do

673
00:52:01,010 --> 00:52:08,750
anything with that

674
00:52:01,910 --> 00:52:11,269
so normally a and W enabling and there

675
00:52:08,750 --> 00:52:13,369
are a lot of challenges regarding these

676
00:52:11,269 --> 00:52:16,308
probability and there are a lot of many

677
00:52:13,369 --> 00:52:18,650
things that could be done and I think

678
00:52:16,309 --> 00:52:22,730
many things have been done I don't want

679
00:52:18,650 --> 00:52:25,279
to boil fingers but I think that many

680
00:52:22,730 --> 00:52:28,690
things have been done but well you know

681
00:52:25,279 --> 00:52:28,690
there for you to understand the context

682
00:52:31,420 --> 00:52:35,390
keep some slides and I want to explain

683
00:52:33,829 --> 00:52:38,000
this clearly this is related to the

684
00:52:35,390 --> 00:52:41,500
meltdown art but I'm executing these as

685
00:52:38,000 --> 00:52:48,619
user lamp because of the failure of the

686
00:52:41,500 --> 00:52:51,279
CPV the failure is the same I'm sure you

687
00:52:48,619 --> 00:52:56,630
are going to understand this and I'm in

688
00:52:51,279 --> 00:52:58,940
using userland mode I'm going to be a

689
00:52:56,630 --> 00:53:02,750
process and I'm going to have access to

690
00:52:58,940 --> 00:53:05,000
everything which is related to my part

691
00:53:02,750 --> 00:53:07,730
of the process isn't it right for

692
00:53:05,000 --> 00:53:11,329
example if I'm a browser I will have

693
00:53:07,730 --> 00:53:14,000
access to my whole Krauser but if the

694
00:53:11,329 --> 00:53:18,170
browser if I'm navigating with different

695
00:53:14,000 --> 00:53:25,509
screens if the browser imposes a

696
00:53:18,170 --> 00:53:25,509
restriction or a sandbox in a scream

697
00:53:25,750 --> 00:53:30,880
I'm not going to be able to read the

698
00:53:28,480 --> 00:53:34,030
data that I have in the other screen or

699
00:53:30,880 --> 00:53:38,560
top for example if I'm using Gmail in a

700
00:53:34,030 --> 00:53:41,320
top Facebook another top etc it's normal

701
00:53:38,560 --> 00:53:43,330
that I cannot access from the top from

702
00:53:41,320 --> 00:53:45,550
the Facebook top to the data or the

703
00:53:43,330 --> 00:53:48,220
Gmail top because that could be a

704
00:53:45,550 --> 00:53:54,640
problem we would blame the browser that

705
00:53:48,220 --> 00:53:58,319
I'm using for that and this is what we

706
00:53:54,640 --> 00:54:02,950
are going to spray it with inspector

707
00:53:58,320 --> 00:54:06,250
within the user lam if I have a sandbox

708
00:54:02,950 --> 00:54:10,750
I'm going to be able to want to keep the

709
00:54:06,250 --> 00:54:12,640
sandbox based on a failure of the CP but

710
00:54:10,750 --> 00:54:14,710
what is difference with the meltdown

711
00:54:12,640 --> 00:54:18,549
well the Midtown is the same thing but

712
00:54:14,710 --> 00:54:20,380
if I had the user line here now I have

713
00:54:18,550 --> 00:54:24,580
here the kernel mode and I'm going to do

714
00:54:20,380 --> 00:54:27,100
the same thing the same exploitation but

715
00:54:24,580 --> 00:54:30,400
at the kernel model but kernel can

716
00:54:27,100 --> 00:54:32,759
access all of the processes right so if

717
00:54:30,400 --> 00:54:37,750
I'm a browser and I'm being exploited

718
00:54:32,760 --> 00:54:43,300
and I have text processor or a keypad or

719
00:54:37,750 --> 00:54:45,520
and something like that this is going to

720
00:54:43,300 --> 00:54:47,320
have access to everything and any

721
00:54:45,520 --> 00:54:51,509
password that we may have in the memory

722
00:54:47,320 --> 00:55:04,000
and any key secret that we may have

723
00:54:51,510 --> 00:55:05,920
hidden in the memory is going to be so

724
00:55:04,000 --> 00:55:09,540
let's see what happens and why we have

725
00:55:05,920 --> 00:55:12,630
these failures so I have different steps

726
00:55:09,540 --> 00:55:15,610
after thinking about it for a long time

727
00:55:12,630 --> 00:55:18,250
well we're going to see how these attack

728
00:55:15,610 --> 00:55:21,040
works but by thinking about the

729
00:55:18,250 --> 00:55:25,480
letter-size channel we're going to talk

730
00:55:21,040 --> 00:55:28,980
about the cpu out of order execution in

731
00:55:25,480 --> 00:55:28,980
the micro architecture of the CPU

732
00:55:29,190 --> 00:55:34,740
process memory protection of the

733
00:55:31,740 --> 00:55:37,529
operating system and if we're lucky if

734
00:55:34,740 --> 00:55:40,200
we compile everything right until

735
00:55:37,530 --> 00:55:43,980
probably something wrong work on yes

736
00:55:40,200 --> 00:55:47,578
this worksheet by the way is just for

737
00:55:43,980 --> 00:55:50,430
CPUs in turn this is one of the jokes I

738
00:55:47,579 --> 00:56:01,829
always make I was saying before that it

739
00:55:50,430 --> 00:56:04,040
was for a AMD IRM etc just to show you

740
00:56:01,829 --> 00:56:05,700
that all of the manufacturers make the

741
00:56:04,040 --> 00:56:10,020
same mistakes

742
00:56:05,700 --> 00:56:14,460
get a get him so as we have certain

743
00:56:10,020 --> 00:56:16,349
instructions I let's see what we have to

744
00:56:14,460 --> 00:56:18,930
do I'm not going to computer compiled

745
00:56:16,349 --> 00:56:20,760
from up down there are specific

746
00:56:18,930 --> 00:56:24,750
instructions that I have to execute in

747
00:56:20,760 --> 00:56:27,839
the CPU and we need to do a native

748
00:56:24,750 --> 00:56:30,510
compilation so in the movie we are going

749
00:56:27,839 --> 00:56:33,690
to the computer

750
00:56:30,510 --> 00:56:40,440
Martin 80 now let's see this side

751
00:56:33,690 --> 00:56:43,560
channel I'm going to based on the cached

752
00:56:40,440 --> 00:56:45,690
memory of the CPUs and I'm going to use

753
00:56:43,560 --> 00:56:48,720
this as a side channel

754
00:56:45,690 --> 00:56:53,099
this technique is cement Dale called as

755
00:56:48,720 --> 00:56:55,680
flash blast reload but I is a hardware

756
00:56:53,099 --> 00:56:57,780
I'm going to know what a cachet memory

757
00:56:55,680 --> 00:56:59,970
is going to do if I have data in the

758
00:56:57,780 --> 00:57:03,750
cache a memory and I try to access that

759
00:56:59,970 --> 00:57:07,368
data this is going to be faster than

760
00:57:03,750 --> 00:57:09,960
going to the memory bring in today to

761
00:57:07,369 --> 00:57:12,569
maintain the data in the crochet and

762
00:57:09,960 --> 00:57:14,490
give it back to the user right this is

763
00:57:12,569 --> 00:57:17,130
something that we've learned since the

764
00:57:14,490 --> 00:57:22,200
beginning so logically I'm going to have

765
00:57:17,130 --> 00:57:27,270
I'm going to play with that area you

766
00:57:22,200 --> 00:57:31,379
know that see if data can be accessed

767
00:57:27,270 --> 00:57:33,990
faster than our data that is not cash in

768
00:57:31,380 --> 00:57:38,520
cachet and I have and that I have to do

769
00:57:33,990 --> 00:57:41,310
for in the memory so but with which

770
00:57:38,520 --> 00:57:43,050
manufacturer doesn't ease

771
00:57:41,310 --> 00:57:45,960
I share do you know any that is not

772
00:57:43,050 --> 00:57:47,940
using cachet no right but this is why

773
00:57:45,960 --> 00:57:49,380
caches there in order to access fast I

774
00:57:47,940 --> 00:57:51,450
think it's true that there are

775
00:57:49,380 --> 00:57:58,070
manufacturers that have said well the

776
00:57:51,450 --> 00:58:01,259
speculative execution let's try to do

777
00:57:58,070 --> 00:58:09,480
let's try to remove the that the

778
00:58:01,260 --> 00:58:14,880
speculative execution and now we're

779
00:58:09,480 --> 00:58:19,490
going to try to remove the cachet from

780
00:58:14,880 --> 00:58:22,710
that point all when people are trying to

781
00:58:19,490 --> 00:58:27,509
to mean like a share they are doing it

782
00:58:22,710 --> 00:58:31,340
wrong in the end the solution is to is

783
00:58:27,510 --> 00:58:33,810
to launch new operating systems and new

784
00:58:31,340 --> 00:58:35,480
computers in order to solve these

785
00:58:33,810 --> 00:58:39,029
problems

786
00:58:35,480 --> 00:58:51,360
well let's move to the code basically

787
00:58:39,030 --> 00:58:54,390
I'm going to write here so here we have

788
00:58:51,360 --> 00:58:56,820
this picture and in order not to make

789
00:58:54,390 --> 00:59:00,870
any mistake I'm going to show you the

790
00:58:56,820 --> 00:59:03,870
code I'm going to write it down here and

791
00:59:00,870 --> 00:59:06,779
I'm going to skip this life I mean this

792
00:59:03,870 --> 00:59:10,319
lights are for you to be at home late

793
00:59:06,780 --> 00:59:15,440
later so here I'm going to explain very

794
00:59:10,320 --> 00:59:15,440
briefly what this is so I'm going to

795
00:59:16,010 --> 00:59:27,150
define a vector that's going to allow me

796
00:59:19,380 --> 00:59:28,800
to introduced an element and this is not

797
00:59:27,150 --> 00:59:36,350
a random value we will see this later

798
00:59:28,800 --> 00:59:44,910
and then I will have to measure

799
00:59:36,350 --> 00:59:50,160
different timings and you know this

800
00:59:44,910 --> 00:59:53,529
sometimes these arguments here and what

801
00:59:50,160 --> 00:59:55,540
really is too

802
00:59:53,530 --> 00:59:57,070
restart the arrived at a house I'm going

803
00:59:55,540 --> 00:59:59,710
to take these ten elements and I'm going

804
00:59:57,070 --> 01:00:04,860
to say their value is one for all of

805
00:59:59,710 --> 01:00:09,520
them for each one of them and logically

806
01:00:04,860 --> 01:00:12,490
these awry is going to have a value of

807
01:00:09,520 --> 01:00:14,050
one each so elements here is going to be

808
01:00:12,490 --> 01:00:18,459
one element what is going to be one

809
01:00:14,050 --> 01:00:21,040
elements who is going to be one etc and

810
01:00:18,460 --> 01:00:25,630
here I'm going to flush

811
01:00:21,040 --> 01:00:28,000
what's a flash flash means cleaning I'm

812
01:00:25,630 --> 01:00:30,490
going to indicate the microprocessor to

813
01:00:28,000 --> 01:00:32,320
clean the cache a memory this was why

814
01:00:30,490 --> 01:00:39,370
you're seeing here's something weird

815
01:00:32,320 --> 01:00:44,200
which is something with slaw / - a blue

816
01:00:39,370 --> 01:00:54,190
flash this is going to be used to clean

817
01:00:44,200 --> 01:00:56,950
the machine just for there right then

818
01:00:54,190 --> 01:00:59,200
I'm going to introduce some data for

819
01:00:56,950 --> 01:01:01,569
example here in the position number

820
01:00:59,200 --> 01:01:03,040
three I'm going to give a value of 100

821
01:01:01,570 --> 01:01:08,170
in position seven I'm going to give the

822
01:01:03,040 --> 01:01:12,240
value of 200 now logically both 100 and

823
01:01:08,170 --> 01:01:15,910
200 when accessing some data these data

824
01:01:12,240 --> 01:01:18,959
whether it is reading or writing data is

825
01:01:15,910 --> 01:01:21,370
going to be in the cache a memory but

826
01:01:18,960 --> 01:01:24,130
how is the element number one number

827
01:01:21,370 --> 01:01:26,710
serial number their caches are

828
01:01:24,130 --> 01:01:32,290
completely clean they have nothing

829
01:01:26,710 --> 01:01:34,690
inside so in this case as I'm trying in

830
01:01:32,290 --> 01:01:38,230
this is in this loop I'm trying to

831
01:01:34,690 --> 01:01:42,460
access element number one number zero

832
01:01:38,230 --> 01:01:44,980
number two I'm going to be able to clean

833
01:01:42,460 --> 01:01:48,700
make a shake but other elements that are

834
01:01:44,980 --> 01:01:50,710
not there it should be brought from the

835
01:01:48,700 --> 01:01:54,129
cache a memory from from the memory and

836
01:01:50,710 --> 01:01:57,270
if this works and if our microprocessor

837
01:01:54,130 --> 01:01:58,720
is vulnerable was not worried about

838
01:01:57,270 --> 01:02:00,430
vulnerabilities actually a

839
01:01:58,720 --> 01:02:03,970
characteristic of all microprocessors

840
01:02:00,430 --> 01:02:06,910
this is going to allow me to know the

841
01:02:03,970 --> 01:02:10,879
access in time

842
01:02:06,910 --> 01:02:16,640
well now I'm going to first first I'm

843
01:02:10,880 --> 01:02:22,069
going to compile this time I'm going to

844
01:02:16,640 --> 01:02:25,969
write access time and that's now let's

845
01:02:22,069 --> 01:02:28,640
see this is true okay so access time

846
01:02:25,969 --> 01:02:33,650
this requires time I'm just I'm going to

847
01:02:28,640 --> 01:02:37,549
write so this is going to be useful just

848
01:02:33,650 --> 01:02:41,779
for one test so I'm going to write one

849
01:02:37,549 --> 01:02:44,779
here what what are the elements that has

850
01:02:41,779 --> 01:02:49,700
different values before the elements had

851
01:02:44,779 --> 01:02:52,880
different values before remember that in

852
01:02:49,700 --> 01:02:55,868
the code that is there in the element

853
01:02:52,880 --> 01:03:01,099
three I have here

854
01:02:55,869 --> 01:03:07,009
124 cycles of site be CPU which is very

855
01:03:01,099 --> 01:03:08,539
low compared to the other ones what

856
01:03:07,009 --> 01:03:10,849
timings are you going into getting your

857
01:03:08,539 --> 01:03:12,529
computer's they are going to be

858
01:03:10,849 --> 01:03:14,390
completely different in depends on your

859
01:03:12,529 --> 01:03:18,200
computer it depends on many other

860
01:03:14,390 --> 01:03:22,150
processes this is going to change

861
01:03:18,200 --> 01:03:25,669
depending on the computer but probably

862
01:03:22,150 --> 01:03:28,029
when I have like a shared data in

863
01:03:25,670 --> 01:03:35,019
crochet I'm going to be able to see that

864
01:03:28,029 --> 01:03:35,019
leaves are going to reduce to reduce

865
01:03:36,849 --> 01:03:47,329
more or less but the timings are going

866
01:03:39,499 --> 01:03:54,799
to reduce which we read at the element

867
01:03:47,329 --> 01:03:58,670
seven I have one 559 element eight 238

868
01:03:54,799 --> 01:03:59,869
so if I see that I'm not going to be

869
01:03:58,670 --> 01:04:01,759
able to compare because I don't know

870
01:03:59,869 --> 01:04:06,529
what's going to happen but anyway I'm

871
01:04:01,759 --> 01:04:15,259
going to click on execute I'm going to

872
01:04:06,529 --> 01:04:18,229
execute this for 1000 times that it

873
01:04:15,259 --> 01:04:19,250
changed after I 1000 time execution yes

874
01:04:18,229 --> 01:04:21,500
right

875
01:04:19,250 --> 01:04:26,599
which are the elements with less CPU

876
01:04:21,500 --> 01:04:35,930
cycles three and seven right so next

877
01:04:26,599 --> 01:04:38,060
time I'm going to chain six and four is

878
01:04:35,930 --> 01:04:42,790
it working for you music I can see that

879
01:04:38,060 --> 01:04:46,430
it's working for me money saying yes

880
01:04:42,790 --> 01:04:48,740
your microprocessor is vulnerable now it

881
01:04:46,430 --> 01:04:52,310
has the cachet is it working for you all

882
01:04:48,740 --> 01:04:56,598
I'm sure that it's not working for all

883
01:04:52,310 --> 01:04:59,420
of you I say who knows because this is

884
01:04:56,599 --> 01:05:01,910
not very very specific technique in

885
01:04:59,420 --> 01:05:08,530
order to make sure that this is true

886
01:05:01,910 --> 01:05:08,529
because for example there may be data

887
01:05:09,880 --> 01:05:21,410
maybe we're not in cachet so we are

888
01:05:15,080 --> 01:05:22,640
getting closer I don't know yet we

889
01:05:21,410 --> 01:05:32,480
cannot be sure you know that you

890
01:05:22,640 --> 01:05:36,830
continue so this is the next thing that

891
01:05:32,480 --> 01:05:38,690
we have what I'm going to try to do well

892
01:05:36,830 --> 01:05:43,279
I'm going to skip some slides excitable

893
01:05:38,690 --> 01:05:46,450
we don't have a lot of time now we're

894
01:05:43,280 --> 01:05:49,630
going to try to set a threshold value

895
01:05:46,450 --> 01:05:53,990
specific to each computer in order to

896
01:05:49,630 --> 01:05:56,690
find out if these data was in caching or

897
01:05:53,990 --> 01:06:05,240
in memory but this is going to be of

898
01:05:56,690 --> 01:06:07,070
course valley for example we have more

899
01:06:05,240 --> 01:06:08,779
than I don't know how many cycles or if

900
01:06:07,070 --> 01:06:12,380
it lasts more than I don't know how many

901
01:06:08,780 --> 01:06:15,950
seconds I'm going to guess but this is

902
01:06:12,380 --> 01:06:27,770
in cashier if not this is going to be in

903
01:06:15,950 --> 01:06:30,410
memory now we're going to save a secret

904
01:06:27,770 --> 01:06:32,079
or a password

905
01:06:30,410 --> 01:06:36,189
normally we

906
01:06:32,079 --> 01:06:38,019
access secret value from the outside but

907
01:06:36,189 --> 01:06:43,348
I could do some cleaning

908
01:06:38,019 --> 01:06:48,279
I could reload what I wanted and I could

909
01:06:43,349 --> 01:06:52,569
check caches memories you know that you

910
01:06:48,279 --> 01:06:55,869
see if the secret may be in the element

911
01:06:52,569 --> 01:07:01,929
see will I have some value in element

912
01:06:55,869 --> 01:07:04,839
one another one our basic idea over to

913
01:07:01,929 --> 01:07:11,849
recover a bite how many values you have

914
01:07:04,839 --> 01:07:20,619
have 256 right maybe you had written

915
01:07:11,849 --> 01:07:24,429
capital T whatever what's the problem if

916
01:07:20,619 --> 01:07:25,089
I define an array of this kind it won't

917
01:07:24,429 --> 01:07:30,400
work

918
01:07:25,089 --> 01:07:34,538
why because operations in storage cache

919
01:07:30,400 --> 01:07:39,069
a in machine works in blocks not in

920
01:07:34,539 --> 01:07:43,569
bytes it works at the block level not in

921
01:07:39,069 --> 01:07:46,630
the byte level I have a block for this

922
01:07:43,569 --> 01:07:50,349
part not a block for another part so the

923
01:07:46,630 --> 01:07:54,849
idea when using this side channel is

924
01:07:50,349 --> 01:07:57,400
that every element has to fall within a

925
01:07:54,849 --> 01:08:00,279
certain block you know there for me to

926
01:07:57,400 --> 01:08:05,910
be able to check later that bloke and to

927
01:08:00,279 --> 01:08:11,650
be sure that the element with the lowest

928
01:08:05,910 --> 01:08:14,170
time access in each of the blocks is the

929
01:08:11,650 --> 01:08:18,309
element of the secret I was looking for

930
01:08:14,170 --> 01:08:23,049
that's the idea of a specter so what am

931
01:08:18,309 --> 01:08:29,170
I going to do why ami was I using the

932
01:08:23,049 --> 01:08:32,948
value 4096 bytes in order to be sure

933
01:08:29,170 --> 01:08:36,339
that each one of the elements is going

934
01:08:32,948 --> 01:08:39,578
to fall into a different block so I'm

935
01:08:36,339 --> 01:08:42,639
going to create the array of search in

936
01:08:39,578 --> 01:08:45,049
order for them not too much because we

937
01:08:42,639 --> 01:08:47,600
will have some problems with element

938
01:08:45,050 --> 01:08:50,660
cero when I'm looking for that element

939
01:08:47,600 --> 01:08:53,690
zero I have some problems the element

940
01:08:50,660 --> 01:08:57,109
zero is kind of special so I can add a

941
01:08:53,689 --> 01:09:00,740
delta value so if the element zero is

942
01:08:57,109 --> 01:09:06,649
going to be here I am going to send it

943
01:09:00,740 --> 01:09:09,859
to 1024 bytes in order for it to act as

944
01:09:06,649 --> 01:09:13,009
the element one but instead of going

945
01:09:09,859 --> 01:09:13,969
from zero to ten I will go from zero to

946
01:09:13,010 --> 01:09:16,670
11

947
01:09:13,970 --> 01:09:18,350
knowing that 11 will be the zero element

948
01:09:16,670 --> 01:09:20,600
I don't know if you are following me

949
01:09:18,350 --> 01:09:25,460
that's why we're going to add a delta

950
01:09:20,600 --> 01:09:32,030
value we have another Gold Line which is

951
01:09:25,460 --> 01:09:46,010
a flash reload and basically oops I'm

952
01:09:32,029 --> 01:09:48,740
sorry what we're doing here is to define

953
01:09:46,010 --> 01:09:53,090
the secret value in order to save it

954
01:09:48,740 --> 01:09:55,760
let's for example say the number 13 out

955
01:09:53,090 --> 01:10:01,580
of superstition I'm going to define that

956
01:09:55,760 --> 01:10:06,500
Delta 1024 and randomly because I just

957
01:10:01,580 --> 01:10:09,700
wanted to do so I did find a threshold

958
01:10:06,500 --> 01:10:14,570
you know let's say it is a threshold of

959
01:10:09,700 --> 01:10:20,769
80 I just made it up what do you think

960
01:10:14,570 --> 01:10:27,500
if I write 100 what if I I tie 1,000

961
01:10:20,770 --> 01:10:31,160
what value do we enter that's that's

962
01:10:27,500 --> 01:10:36,050
dangerous if we read all the

963
01:10:31,160 --> 01:10:38,330
documentation on microprocessors there

964
01:10:36,050 --> 01:10:44,390
are thousands and thousands of pages

965
01:10:38,330 --> 01:10:48,950
that in tell us that threshold the

966
01:10:44,390 --> 01:10:53,660
values that we can enter according to

967
01:10:48,950 --> 01:10:56,120
the threshold if I enter a very low

968
01:10:53,660 --> 01:11:00,920
value maybe

969
01:10:56,120 --> 01:11:04,190
want it won't be useful so I am going to

970
01:11:00,920 --> 01:11:08,270
use a statistical technique in order for

971
01:11:04,190 --> 01:11:11,450
that value to be closer so I'm going to

972
01:11:08,270 --> 01:11:16,700
repeat the search for the secret and

973
01:11:11,450 --> 01:11:22,519
with a small counter I can that I can

974
01:11:16,700 --> 01:11:26,090
determine how many cachet hits I I have

975
01:11:22,520 --> 01:11:28,730
I can repeat it 1000 times or 1 million

976
01:11:26,090 --> 01:11:36,290
times and I'm sure that if after 1

977
01:11:28,730 --> 01:11:40,339
million times the value is cachet we

978
01:11:36,290 --> 01:11:44,030
find that the element of the array was

979
01:11:40,340 --> 01:11:48,640
in cachet that's the element we're

980
01:11:44,030 --> 01:11:57,290
looking for so that's why that value

981
01:11:48,640 --> 01:12:07,460
should be around 80 100 here we have the

982
01:11:57,290 --> 01:12:11,600
array you know the to prevent I do not

983
01:12:07,460 --> 01:12:13,940
want to fall it right next to it because

984
01:12:11,600 --> 01:12:14,870
if the element I'm looking for within

985
01:12:13,940 --> 01:12:22,460
the same block

986
01:12:14,870 --> 01:12:26,030
I cannot distinguish it and the rest is

987
01:12:22,460 --> 01:12:31,190
kind of easy so the only thing I'm going

988
01:12:26,030 --> 01:12:36,080
to do is to do a flush reload to God to

989
01:12:31,190 --> 01:12:38,660
call the system function and then I'm

990
01:12:36,080 --> 01:12:42,860
going to do the reload of the flush I'd

991
01:12:38,660 --> 01:12:52,330
channel let's see if we can compile it

992
01:12:42,860 --> 01:12:58,450
the native and the flash reload dot see

993
01:12:52,330 --> 01:12:58,450
let's see what happens let's execute

994
01:13:02,050 --> 01:13:10,760
it's a great Oracle Tracy so secret

995
01:13:05,960 --> 01:13:14,350
recovered the value of 13 is it working

996
01:13:10,760 --> 01:13:20,530
for you I hope somebody tells me no

997
01:13:14,350 --> 01:13:27,590
those okay one over there anyone else

998
01:13:20,530 --> 01:13:32,050
maybe a second person the rest of us may

999
01:13:27,590 --> 01:13:37,370
have more vulnerable micro processors I

1000
01:13:32,050 --> 01:13:40,460
need people to tell me hey you recovered

1001
01:13:37,370 --> 01:13:42,740
the value 13 because it is your machine

1002
01:13:40,460 --> 01:13:50,990
you know the threshold value and so on

1003
01:13:42,740 --> 01:13:55,490
once you have compiled it what we're

1004
01:13:50,990 --> 01:13:58,130
doing is we're refining a little bit

1005
01:13:55,490 --> 01:14:02,030
more the code I am sure that at the end

1006
01:13:58,130 --> 01:14:05,240
of the session if I manage to end on

1007
01:14:02,030 --> 01:14:11,000
time I am sure that you will recover the

1008
01:14:05,240 --> 01:14:12,889
secret value is it working for you that

1009
01:14:11,000 --> 01:14:16,820
means your microprocessor is a bit

1010
01:14:12,890 --> 01:14:21,310
vulnerable and it is a new laptop I can

1011
01:14:16,820 --> 01:14:24,860
see maybe 15 you bought it 15 days ago

1012
01:14:21,310 --> 01:14:28,130
really I really need someone to tell me

1013
01:14:24,860 --> 01:14:32,530
it is not working for them why did it

1014
01:14:28,130 --> 01:14:37,240
work here it was it was luck actually

1015
01:14:32,530 --> 01:14:41,090
because if you start doing this maybe

1016
01:14:37,240 --> 01:14:44,450
one of them work and some others don't

1017
01:14:41,090 --> 01:14:47,810
and maybe after 1 million times you can

1018
01:14:44,450 --> 01:14:50,269
recover the secret value of 13 otherwise

1019
01:14:47,810 --> 01:14:54,140
maybe I will need to make some efforts

1020
01:14:50,270 --> 01:14:58,340
and to improve the code so that it I am

1021
01:14:54,140 --> 01:15:00,830
sure this is working universe in a

1022
01:14:58,340 --> 01:15:03,410
universal way for every kind of

1023
01:15:00,830 --> 01:15:05,780
microprocessor I want environmental

1024
01:15:03,410 --> 01:15:06,860
arredondo so let's continue while you're

1025
01:15:05,780 --> 01:15:11,300
working on it

1026
01:15:06,860 --> 01:15:16,219
you pull up and let's move on okay so we

1027
01:15:11,300 --> 01:15:22,280
check at least not I can play with

1028
01:15:16,219 --> 01:15:23,840
stressful values or below and we're

1029
01:15:22,280 --> 01:15:26,659
getting things a little bit more

1030
01:15:23,840 --> 01:15:30,369
complicated you can search for a

1031
01:15:26,659 --> 01:15:41,960
threshold value that warrantees ones

1032
01:15:30,369 --> 01:15:46,099
100% of hits in cash a okay precisely

1033
01:15:41,960 --> 01:15:50,840
why I'm telling you this we cannot be

1034
01:15:46,100 --> 01:15:53,719
sure of 100% value when we want to

1035
01:15:50,840 --> 01:15:57,560
exploit to it work in an Universal way

1036
01:15:53,719 --> 01:16:01,010
so what kind of we do we need to keep

1037
01:15:57,560 --> 01:16:04,239
thinking it on it and we have all the

1038
01:16:01,010 --> 01:16:09,469
things to think about it is the

1039
01:16:04,239 --> 01:16:15,080
execution and the branch prediction this

1040
01:16:09,469 --> 01:16:21,320
is our code we learned in our first year

1041
01:16:15,080 --> 01:16:25,130
of training write this code beta value

1042
01:16:21,320 --> 01:16:30,710
equals zero and it is going to verify if

1043
01:16:25,130 --> 01:16:39,290
the value is lower than the side and the

1044
01:16:30,710 --> 01:16:44,270
increase of five equals three and size

1045
01:16:39,290 --> 01:16:48,800
equals 10 so the code is if 3 is less

1046
01:16:44,270 --> 01:16:53,210
than 10 then data equals 5 is that

1047
01:16:48,800 --> 01:16:56,290
correct okay good how can we execute

1048
01:16:53,210 --> 01:16:59,810
these simple code within the

1049
01:16:56,290 --> 01:17:03,320
microprocessor the microprocessor is not

1050
01:16:59,810 --> 01:17:07,300
stupid micro processors and engineers

1051
01:17:03,320 --> 01:17:12,670
who are very smart decided to execute

1052
01:17:07,300 --> 01:17:16,610
the good part of the branch of the jump

1053
01:17:12,670 --> 01:17:19,730
at the same time that I execute the evil

1054
01:17:16,610 --> 01:17:24,269
the bad part when you

1055
01:17:19,730 --> 01:17:28,230
the verification I am going to show you

1056
01:17:24,270 --> 01:17:33,930
only the part that you want to see with

1057
01:17:28,230 --> 01:17:43,219
data equals five but wait maybe we can

1058
01:17:33,930 --> 01:17:43,220
say studied there if at a certain moment

1059
01:17:44,330 --> 01:17:51,570
is halted and we were able to open the

1060
01:17:48,450 --> 01:17:55,260
microprocessor I would have the

1061
01:17:51,570 --> 01:17:58,230
execution of the if function and the

1062
01:17:55,260 --> 01:18:01,850
execution of the no function with both

1063
01:17:58,230 --> 01:18:04,950
results and this is precisely the

1064
01:18:01,850 --> 01:18:08,430
execution out of order and branch

1065
01:18:04,950 --> 01:18:10,230
prediction and why have we carried out a

1066
01:18:08,430 --> 01:18:14,430
branch prediction in order to obtain

1067
01:18:10,230 --> 01:18:17,879
results as soon as possible an inspector

1068
01:18:14,430 --> 01:18:20,640
and mulden were based on these kind of

1069
01:18:17,880 --> 01:18:24,570
foundations which I mentioned earlier

1070
01:18:20,640 --> 01:18:25,620
so what manufacture what microprocessor

1071
01:18:24,570 --> 01:18:29,160
manufacturer

1072
01:18:25,620 --> 01:18:30,260
didn't think of this speculative

1073
01:18:29,160 --> 01:18:32,970
execution

1074
01:18:30,260 --> 01:18:36,180
they hadn't thought of that they are

1075
01:18:32,970 --> 01:18:38,790
stupid because the faster and the more

1076
01:18:36,180 --> 01:18:46,440
optimal the microprocessor works the

1077
01:18:38,790 --> 01:18:50,550
better okay condition is true outside

1078
01:18:46,440 --> 01:18:53,490
the CPU but an architecture level we

1079
01:18:50,550 --> 01:19:01,260
could see if it had been implemented or

1080
01:18:53,490 --> 01:19:08,010
not and I could start seeing those

1081
01:19:01,260 --> 01:19:12,030
results any microprocessor enable us to

1082
01:19:08,010 --> 01:19:15,020
execute these out of all the because

1083
01:19:12,030 --> 01:19:15,019
what we want

1084
01:19:15,920 --> 01:19:22,140
if the microprocessor some instructions

1085
01:19:19,800 --> 01:19:25,350
to be executed at the same time

1086
01:19:22,140 --> 01:19:28,530
depending on the functions that we have

1087
01:19:25,350 --> 01:19:31,530
but in order to execute an if function

1088
01:19:28,530 --> 01:19:32,269
this is enough and now I'm going to

1089
01:19:31,530 --> 01:19:36,309
execute

1090
01:19:32,270 --> 01:19:41,360
books what is that some books what does

1091
01:19:36,310 --> 01:19:44,870
it execute is the if function so if you

1092
01:19:41,360 --> 01:19:48,139
are on this tab you cannot access the

1093
01:19:44,870 --> 01:19:51,080
data from another tab and if you are in

1094
01:19:48,140 --> 01:19:55,090
the other tab you cannot access the

1095
01:19:51,080 --> 01:20:01,180
other tabs data a simple sandbox

1096
01:19:55,090 --> 01:20:05,660
regarding the code level we can have a

1097
01:20:01,180 --> 01:20:09,350
part of password with a secured function

1098
01:20:05,660 --> 01:20:15,430
to access it and I'm checking it with an

1099
01:20:09,350 --> 01:20:15,430
if if we have access or not in this case

1100
01:20:17,560 --> 01:20:25,090
the microarchitecture level it is going

1101
01:20:21,950 --> 01:20:28,040
to execute functions as speculatively

1102
01:20:25,090 --> 01:20:29,170
the prediction is going to be true or

1103
01:20:28,040 --> 01:20:33,440
false

1104
01:20:29,170 --> 01:20:38,300
changes are going to be committed and

1105
01:20:33,440 --> 01:20:52,519
now we could somehow try to exploit the

1106
01:20:38,300 --> 01:20:57,320
code that we had before what was this

1107
01:20:52,520 --> 01:21:01,340
execution regarding designed if it had

1108
01:20:57,320 --> 01:21:03,590
to process something if function needs

1109
01:21:01,340 --> 01:21:09,650
to process something what would didn't

1110
01:21:03,590 --> 01:21:15,440
we delete the data from the cache a so

1111
01:21:09,650 --> 01:21:18,559
you we should have done a flash but who

1112
01:21:15,440 --> 01:21:20,960
was going to access the data from the

1113
01:21:18,560 --> 01:21:23,930
cache a who was going to check the

1114
01:21:20,960 --> 01:21:27,290
microarchitecture from the CPU in order

1115
01:21:23,930 --> 01:21:29,690
to see what was executed or not well

1116
01:21:27,290 --> 01:21:33,710
therefore Chinese who launched it the

1117
01:21:29,690 --> 01:21:37,040
piper and the for stupid persons who

1118
01:21:33,710 --> 01:21:42,440
devoted their time to read those

1119
01:21:37,040 --> 01:21:43,680
documents so maybe here we can see how

1120
01:21:42,440 --> 01:21:46,219
we can see

1121
01:21:43,680 --> 01:21:49,920
that execution in order to CD

1122
01:21:46,220 --> 01:21:52,800
microarchitecture so let's go back to

1123
01:21:49,920 --> 01:22:01,200
the code here in order for me to explain

1124
01:21:52,800 --> 01:22:10,460
it it's better for you notice that it is

1125
01:22:01,200 --> 01:22:12,360
still the same but we are adding tweet

1126
01:22:10,460 --> 01:22:15,210
complication this is not machine

1127
01:22:12,360 --> 01:22:18,839
learning this is not AI this is manually

1128
01:22:15,210 --> 01:22:29,040
refining the code i'm keep on doing to

1129
01:22:18,840 --> 01:22:34,910
flush reload i hear a victim function

1130
01:22:29,040 --> 01:22:43,320
this is a victim function whatever it is

1131
01:22:34,910 --> 01:22:47,370
is less than some value let's see if it

1132
01:22:43,320 --> 01:22:51,269
executes it or not let's see what

1133
01:22:47,370 --> 01:22:59,450
happens this is like pokemons we're

1134
01:22:51,270 --> 01:23:03,660
going to train cpus in order for it to

1135
01:22:59,450 --> 01:23:07,110
adapt the true function from the victim

1136
01:23:03,660 --> 01:23:11,940
function I'm calling from 0 to 10 I am

1137
01:23:07,110 --> 01:23:14,759
calling the function vector the victim

1138
01:23:11,940 --> 01:23:17,669
function is that right but before

1139
01:23:14,760 --> 01:23:22,440
calling the victim function I am

1140
01:23:17,670 --> 01:23:30,360
cleaning the cachet be careful because

1141
01:23:22,440 --> 01:23:34,410
the victim function let's imagine we set

1142
01:23:30,360 --> 01:23:38,120
the threshold the maximum value of the

1143
01:23:34,410 --> 01:23:43,019
victim of the victim function to 5 or

1144
01:23:38,120 --> 01:23:45,750
lower than 5 higher than 5 when I am

1145
01:23:43,020 --> 01:23:49,380
calling the function the function is

1146
01:23:45,750 --> 01:23:52,590
going to tell me true true true and then

1147
01:23:49,380 --> 01:23:54,540
falls falls falls falls falls and the

1148
01:23:52,590 --> 01:23:56,480
victim function is going to process

1149
01:23:54,540 --> 01:24:02,610
something right

1150
01:23:56,480 --> 01:24:06,240
maybe some destruction but I'm sure it

1151
01:24:02,610 --> 01:24:09,630
won't leave any data I'm sorry it will

1152
01:24:06,240 --> 01:24:13,889
leave some data in the cachet memory and

1153
01:24:09,630 --> 01:24:16,710
if I look it up or if I call the assist

1154
01:24:13,890 --> 01:24:23,970
the function correctly I mean a normal

1155
01:24:16,710 --> 01:24:28,760
execution maybe not victim function but

1156
01:24:23,970 --> 01:24:34,320
any other function when I call it and I

1157
01:24:28,760 --> 01:24:36,480
reload the side channel the research is

1158
01:24:34,320 --> 01:24:39,450
going to be true but in that out of

1159
01:24:36,480 --> 01:24:42,209
order execution probably I would know

1160
01:24:39,450 --> 01:24:46,500
what is true what is false and then I

1161
01:24:42,210 --> 01:24:49,290
can look up in the cache a their data

1162
01:24:46,500 --> 01:24:53,070
that were left here and that's what

1163
01:24:49,290 --> 01:24:57,360
these code vests let's compile it and

1164
01:24:53,070 --> 01:25:10,049
see if it works correctly so we enter

1165
01:24:57,360 --> 01:25:16,790
here native victim

1166
01:25:10,050 --> 01:25:16,790
I was colonnades from the valley or 97

1167
01:25:19,730 --> 01:25:28,799
okay

1168
01:25:20,970 --> 01:25:34,440
let's see if we have the value 97 what

1169
01:25:28,800 --> 01:25:38,540
is this what is this maybe I should have

1170
01:25:34,440 --> 01:25:48,740
received some results some value right I

1171
01:25:38,540 --> 01:25:52,740
mean you have the code right okay so

1172
01:25:48,740 --> 01:25:55,139
yeah I was saving it I was reloading at

1173
01:25:52,740 --> 01:26:00,920
least I should have received with that

1174
01:25:55,140 --> 01:26:00,920
line of code yes or no what do you think

1175
01:26:01,260 --> 01:26:18,760
9797 who is if we follow the Killa

1176
01:26:09,550 --> 01:26:24,690
pending notice it depends on some values

1177
01:26:18,760 --> 01:26:28,329
if it is on cash a memory I was entering

1178
01:26:24,690 --> 01:26:33,249
cash a threshold so in this case we can

1179
01:26:28,329 --> 01:26:37,150
compile again hacking in reversing and

1180
01:26:33,249 --> 01:26:39,789
exploiting in everything you need to be

1181
01:26:37,150 --> 01:26:45,489
lazy why to compile again no I'm going

1182
01:26:39,789 --> 01:26:50,889
to oh this is working already is always

1183
01:26:45,489 --> 01:26:54,459
working and it is going to and when is

1184
01:26:50,889 --> 01:26:56,800
it going to stop working I have no idea

1185
01:26:54,459 --> 01:27:00,010
I'm clueless I don't know when it is

1186
01:26:56,800 --> 01:27:04,119
going to work in a universal way or when

1187
01:27:00,010 --> 01:27:07,449
I'm going to have good value but I told

1188
01:27:04,119 --> 01:27:10,299
you before that with a threshold of 100

1189
01:27:07,449 --> 01:27:12,940
I do not happy what enough warranties to

1190
01:27:10,300 --> 01:27:15,519
make it work in every microprocessor so

1191
01:27:12,940 --> 01:27:19,089
if it is very precise is going to be

1192
01:27:15,519 --> 01:27:30,130
very very difficult this is basically

1193
01:27:19,090 --> 01:27:33,959
what we're explaining here ok so here we

1194
01:27:30,130 --> 01:27:38,260
have the prediction the speculative

1195
01:27:33,959 --> 01:27:40,539
function is executed sometimes it does

1196
01:27:38,260 --> 01:27:45,940
work sometimes it doesn't either it

1197
01:27:40,539 --> 01:27:51,699
depends on the machine I would like you

1198
01:27:45,940 --> 01:27:56,978
to do this afterwards because in the

1199
01:27:51,699 --> 01:28:01,449
main let's imagine we remove flesh to

1200
01:27:56,979 --> 01:28:06,219
see that maybe we can't never find it

1201
01:28:01,449 --> 01:28:09,848
but maybe if we train it and we call

1202
01:28:06,219 --> 01:28:11,659
with some set values we can realize it

1203
01:28:09,849 --> 01:28:15,860
is more variable

1204
01:28:11,659 --> 01:28:19,999
times we will only obtain these three

1205
01:28:15,860 --> 01:28:22,280
souls once in every 100 times but at

1206
01:28:19,999 --> 01:28:24,860
least I know it is stored in cash a

1207
01:28:22,280 --> 01:28:27,070
memory I still have some noise and

1208
01:28:24,860 --> 01:28:31,518
that's the reason why it is not working

1209
01:28:27,070 --> 01:28:37,669
there is some extra data stored in

1210
01:28:31,519 --> 01:28:42,110
cachet so now I can make the code to

1211
01:28:37,669 --> 01:28:45,369
execute the true branch even if the

1212
01:28:42,110 --> 01:28:49,009
condition is false the CPU won't matter

1213
01:28:45,369 --> 01:28:56,598
so if I do not clean the cachet I will

1214
01:28:49,010 --> 01:28:59,449
have a vulnerability what does I have

1215
01:28:56,599 --> 01:29:02,360
secret data within the same process but

1216
01:28:59,449 --> 01:29:05,719
there are some functions within the same

1217
01:29:02,360 --> 01:29:09,978
process that do not have access to those

1218
01:29:05,719 --> 01:29:12,380
data that we had saved so what happens

1219
01:29:09,979 --> 01:29:17,209
here that I have a protection at the

1220
01:29:12,380 --> 01:29:26,239
hardware level and this protection since

1221
01:29:17,209 --> 01:29:30,019
is from the same process it is what

1222
01:29:26,239 --> 01:29:33,199
protection artists and bolus level and

1223
01:29:30,019 --> 01:29:35,439
here we have the same problem I am going

1224
01:29:33,199 --> 01:29:39,289
to create a sandbox I will have

1225
01:29:35,439 --> 01:29:47,780
restrained access here we are and other

1226
01:29:39,289 --> 01:29:50,329
with no restraint access I can call the

1227
01:29:47,780 --> 01:29:52,610
function with correct values in the

1228
01:29:50,329 --> 01:29:57,558
beginning or incorrect values I can

1229
01:29:52,610 --> 01:30:01,579
train the CPU T leave some data in

1230
01:29:57,559 --> 01:30:08,749
cachet or not can I access no can I

1231
01:30:01,579 --> 01:30:11,659
access No so maybe the value is 97 and

1232
01:30:08,749 --> 01:30:15,019
cachet is going to say yes or no is it

1233
01:30:11,659 --> 01:30:17,119
100 is it 100 and tell is the element 13

1234
01:30:15,019 --> 01:30:18,969
and from there I'm going to recover

1235
01:30:17,119 --> 01:30:23,179
everything

1236
01:30:18,969 --> 01:30:28,000
logic says I'm going to start here a

1237
01:30:23,179 --> 01:30:28,000
buffer I'm going to create the sandbox

1238
01:30:28,120 --> 01:30:34,429
basically I would have a secret on the

1239
01:30:31,130 --> 01:30:37,070
top I would have a very very simple

1240
01:30:34,429 --> 01:30:40,910
sandbox but do not think that sandbox

1241
01:30:37,070 --> 01:30:44,570
from browser tabs are more complex than

1242
01:30:40,910 --> 01:30:47,510
this one and I am going to be able to

1243
01:30:44,570 --> 01:30:50,509
access from nine to not from zero to

1244
01:30:47,510 --> 01:30:53,480
nine depending on the value if it is

1245
01:30:50,510 --> 01:30:58,790
lower or higher there we have the whole

1246
01:30:53,480 --> 01:31:03,889
code I am defining here a secret I have

1247
01:30:58,790 --> 01:31:10,750
powered I have a sandbox the rest is the

1248
01:31:03,890 --> 01:31:17,780
same so when you do this at home use

1249
01:31:10,750 --> 01:31:21,410
values from 60 80 100 and 120 you don't

1250
01:31:17,780 --> 01:31:24,259
need to enter 5,000 pages of the tech

1251
01:31:21,410 --> 01:31:28,849
spec and that would be enough and now

1252
01:31:24,260 --> 01:31:31,429
I'm going to try to train my sandbox I'm

1253
01:31:28,850 --> 01:31:34,010
going to execute a flourish I'm going to

1254
01:31:31,429 --> 01:31:44,270
call the function with whatever I want

1255
01:31:34,010 --> 01:31:44,900
finally I'm going to see these if it is

1256
01:31:44,270 --> 01:31:52,040
correct

1257
01:31:44,900 --> 01:31:56,179
and now I would like you to ID on't know

1258
01:31:52,040 --> 01:31:59,269
where you were those who didn't get the

1259
01:31:56,179 --> 01:32:08,210
correct value but now I would like to

1260
01:31:59,270 --> 01:32:13,310
see if it works or not this is what we

1261
01:32:08,210 --> 01:32:22,510
have done well the code I mean the code

1262
01:32:13,310 --> 01:32:27,820
I showed you and that's it

1263
01:32:22,510 --> 01:32:31,120
will it work this is already a spectrum

1264
01:32:27,820 --> 01:32:35,570
this is Specter

1265
01:32:31,120 --> 01:32:39,080
if I did the same with lick of device

1266
01:32:35,570 --> 01:32:42,170
with a kernel I would have access to all

1267
01:32:39,080 --> 01:32:46,330
the memory of all the processes it would

1268
01:32:42,170 --> 01:32:49,820
be the same so I'm going to compile it

1269
01:32:46,330 --> 01:33:04,670
I'm going to compile negative I'm going

1270
01:32:49,820 --> 01:33:09,049
to originate the inspector do we bet

1271
01:33:04,670 --> 01:33:12,350
something we bet on a beer if it works

1272
01:33:09,050 --> 01:33:18,290
does it work for you 97 was a value

1273
01:33:12,350 --> 01:33:21,830
wasn't it but now I want those who

1274
01:33:18,290 --> 01:33:27,680
couldn't do it before to speak up ok

1275
01:33:21,830 --> 01:33:32,960
let's press ENTER all together let's do

1276
01:33:27,680 --> 01:33:36,470
it but didn't we have to obtain the

1277
01:33:32,960 --> 01:33:39,530
value 97 what's the value you're

1278
01:33:36,470 --> 01:33:41,840
obtaining below it doesn't compile but

1279
01:33:39,530 --> 01:33:48,679
you have it on the top they're compiling

1280
01:33:41,840 --> 01:33:53,720
button no it's not working for you are

1281
01:33:48,680 --> 01:33:57,950
you receiving the value 0 ok let's let's

1282
01:33:53,720 --> 01:34:01,780
press ENTER several times because oh

1283
01:33:57,950 --> 01:34:11,410
look there are different values here 115

1284
01:34:01,780 --> 01:34:16,040
115 see we'll see well I want you to see

1285
01:34:11,410 --> 01:34:19,250
by yourself you don't need to compile it

1286
01:34:16,040 --> 01:34:25,880
once at times but press it for several

1287
01:34:19,250 --> 01:34:28,220
times 115 is the value for non capital S

1288
01:34:25,880 --> 01:34:30,920
but sometimes do you get Diwali on

1289
01:34:28,220 --> 01:34:36,130
sometimes you don't so it's almost

1290
01:34:30,920 --> 01:34:37,890
Spectre but not yet right

1291
01:34:36,130 --> 01:34:40,800
[Music]

1292
01:34:37,890 --> 01:34:42,580
do you understand are you following me

1293
01:34:40,800 --> 01:34:53,040
are you following me

1294
01:34:42,580 --> 01:34:56,769
yes okay so this is the code when we

1295
01:34:53,040 --> 01:35:00,820
called this is the secret and if we use

1296
01:34:56,770 --> 01:35:04,150
a browser and we search who does have

1297
01:35:00,820 --> 01:35:11,190
internet access because I do not have

1298
01:35:04,150 --> 01:35:17,860
why free access this should work always

1299
01:35:11,190 --> 01:35:23,259
but I see that these works randomly so

1300
01:35:17,860 --> 01:35:29,460
what to do do you have any ideas because

1301
01:35:23,260 --> 01:35:35,710
I have some you let's imagine port

1302
01:35:29,460 --> 01:35:45,489
JavaScript you might think if you want

1303
01:35:35,710 --> 01:35:49,510
to do it for browsers I could executed

1304
01:35:45,489 --> 01:35:54,519
several times I would have some data

1305
01:35:49,510 --> 01:35:57,250
from you realize that the value C wave

1306
01:35:54,520 --> 01:35:59,440
appears several times not only in my

1307
01:35:57,250 --> 01:36:05,770
computer but I'm sure that indoors as

1308
01:35:59,440 --> 01:36:14,919
well I distracted with the rickroll with

1309
01:36:05,770 --> 01:36:20,620
the video and then we could discard the

1310
01:36:14,920 --> 01:36:26,020
serial value and executed several times

1311
01:36:20,620 --> 01:36:29,830
right is that correct and then I would

1312
01:36:26,020 --> 01:36:35,320
have the value 115 in this case or

1313
01:36:29,830 --> 01:36:49,269
whatever value it gives us is that

1314
01:36:35,320 --> 01:36:50,360
correct okay so no it's not useful at

1315
01:36:49,270 --> 01:36:55,869
all we have a dish

1316
01:36:50,360 --> 01:36:55,869
values we can use it later I have caches

1317
01:36:56,500 --> 01:37:08,090
working so why not to call a statistical

1318
01:37:03,080 --> 01:37:12,739
function I can launch the attack several

1319
01:37:08,090 --> 01:37:18,050
times but I can set at a counter with

1320
01:37:12,739 --> 01:37:20,299
cachet hits for the element zero one two

1321
01:37:18,050 --> 01:37:24,139
three four in order to recover the

1322
01:37:20,300 --> 01:37:27,800
secret of the valley and then of a bite

1323
01:37:24,139 --> 01:37:30,949
sorry for whatever I want and then

1324
01:37:27,800 --> 01:37:33,980
simply with this statistical function

1325
01:37:30,949 --> 01:37:38,719
which is a very simple one I can check

1326
01:37:33,980 --> 01:37:43,638
the element with the highest number of

1327
01:37:38,719 --> 01:37:48,619
hits this is quite complex to add a

1328
01:37:43,639 --> 01:37:52,130
counter for those who for those of you

1329
01:37:48,619 --> 01:37:55,089
who love games we have a score in

1330
01:37:52,130 --> 01:37:58,100
counter and every time our heat is

1331
01:37:55,090 --> 01:38:03,610
obtained then the counter will keep on

1332
01:37:58,100 --> 01:38:15,100
going up let's see if this is true okay

1333
01:38:03,610 --> 01:38:15,099
let's take let's do this directly we can

1334
01:38:19,480 --> 01:38:30,110
we have this exploit I have secret

1335
01:38:24,679 --> 01:38:32,449
I have sandbox I have everything as it

1336
01:38:30,110 --> 01:38:42,460
was before and the only thing that we

1337
01:38:32,449 --> 01:38:42,460
did was to one launch it several times

1338
01:38:45,100 --> 01:38:56,989
let's compile it

1339
01:38:47,300 --> 01:39:03,230
GCC architecture native exploit exploit

1340
01:38:56,989 --> 01:39:04,299
that see okay now I have my counter my

1341
01:39:03,230 --> 01:39:12,079
score

1342
01:39:04,300 --> 01:39:18,409
and I want you to execute it what's the

1343
01:39:12,079 --> 01:39:21,108
result do you get the SSO meter those of

1344
01:39:18,409 --> 01:39:25,129
you that couldn't get it before this is

1345
01:39:21,109 --> 01:39:29,030
not magic we do this had to check the

1346
01:39:25,129 --> 01:39:33,409
heap of the elements are you obtaining

1347
01:39:29,030 --> 01:39:35,478
the same result well so instead of

1348
01:39:33,409 --> 01:39:40,308
paying the beer for you I think that you

1349
01:39:35,479 --> 01:39:42,309
will have to invite me for those of you

1350
01:39:40,309 --> 01:39:45,669
that are watching a live streaming

1351
01:39:42,309 --> 01:39:50,109
let's see if this is true or not

1352
01:39:45,669 --> 01:39:50,108
as you've seen it takes longer

1353
01:39:50,199 --> 01:39:56,388
I mean we don't have to wait for their

1354
01:39:52,669 --> 01:39:59,119
whole great roller but besides the

1355
01:39:56,389 --> 01:40:01,309
memory address which I've obtained

1356
01:39:59,119 --> 01:40:03,398
because I wanted to some of you would

1357
01:40:01,309 --> 01:40:07,219
understand why later

1358
01:40:03,399 --> 01:40:09,800
I'm obtaining the 150 value the state

1359
01:40:07,219 --> 01:40:13,189
secret value which corresponds to the

1360
01:40:09,800 --> 01:40:15,109
letter S if I execute this right now and

1361
01:40:13,189 --> 01:40:17,239
I'm I don't know what right the result

1362
01:40:15,109 --> 01:40:18,739
is going to be but if you execute this

1363
01:40:17,239 --> 01:40:25,820
now you're going to obtain different

1364
01:40:18,739 --> 01:40:28,039
result it's working right now I'm able

1365
01:40:25,820 --> 01:40:30,829
to access our part two which I couldn't

1366
01:40:28,039 --> 01:40:34,129
access before and here I may find a

1367
01:40:30,829 --> 01:40:39,438
password that I've kept or anything I

1368
01:40:34,129 --> 01:40:48,260
mean this can be data from a picture is

1369
01:40:39,439 --> 01:41:01,399
your imagination and now how can I give

1370
01:40:48,260 --> 01:41:04,399
back all that secret has even me okay

1371
01:41:01,399 --> 01:41:07,849
I'm going to repeat what some what

1372
01:41:04,399 --> 01:41:13,419
someone just because we don't have a

1373
01:41:07,849 --> 01:41:13,419
microphone there but he just mentioned

1374
01:41:16,600 --> 01:41:22,640
please listen to our colleague if you

1375
01:41:19,700 --> 01:41:25,519
know where the vibe is with the secret

1376
01:41:22,640 --> 01:41:30,530
is kept in the memory you just have to

1377
01:41:25,520 --> 01:41:32,960
edit the memory position and process

1378
01:41:30,530 --> 01:41:45,309
that's it we you don't have to do

1379
01:41:32,960 --> 01:41:50,150
anything else this is why links the

1380
01:41:45,310 --> 01:41:55,330
memory address where this was hidden so

1381
01:41:50,150 --> 01:41:59,710
yes I will invite you I will be aware

1382
01:41:55,330 --> 01:42:03,110
but well i have i've hit counter right

1383
01:41:59,710 --> 01:42:06,620
if I show the element with the highest

1384
01:42:03,110 --> 01:42:13,190
score which was 115 in the next element

1385
01:42:06,620 --> 01:42:15,920
what will I have same thing right I can

1386
01:42:13,190 --> 01:42:18,549
access through the memory or through the

1387
01:42:15,920 --> 01:42:22,850
heap scatter the element with the

1388
01:42:18,550 --> 01:42:24,800
highest number of heat and then the

1389
01:42:22,850 --> 01:42:28,670
element with the second highest number

1390
01:42:24,800 --> 01:42:32,090
of heat until the final secret picture

1391
01:42:28,670 --> 01:42:33,980
that you may have in the key pass well

1392
01:42:32,090 --> 01:42:44,210
maybe that's not possible but passwords

1393
01:42:33,980 --> 01:42:46,759
or things like that this would be used

1394
01:42:44,210 --> 01:42:50,410
in order to recover that information for

1395
01:42:46,760 --> 01:42:50,410
example here let's write something

1396
01:42:56,380 --> 01:43:09,710
bodies here and a second exploit now we

1397
01:43:06,350 --> 01:43:15,160
have more spectral sources if we read

1398
01:43:09,710 --> 01:43:21,650
these what it is doing the same thing

1399
01:43:15,160 --> 01:43:23,000
that we did before and now I'm going to

1400
01:43:21,650 --> 01:43:27,639
be able to understand it better I'm

1401
01:43:23,000 --> 01:43:27,640
going to generate a second exploit here

1402
01:43:32,000 --> 01:43:49,769
so this is my second exploit but a el

1403
01:43:37,110 --> 01:43:52,860
STD exploit to point C dot C so case you

1404
01:43:49,769 --> 01:43:57,150
know the promotion naughty if they see

1405
01:43:52,860 --> 01:44:00,049
some intimacy mockery so well we have to

1406
01:43:57,150 --> 01:44:04,110
delete that native because otherwise

1407
01:44:00,050 --> 01:44:05,730
this is not going to work otherwise so

1408
01:44:04,110 --> 01:44:12,440
well we have our second our second

1409
01:44:05,730 --> 01:44:31,980
exploit here and well here we had secret

1410
01:44:12,440 --> 01:44:42,119
meal where was it or is it the picture

1411
01:44:31,980 --> 01:44:45,629
secret that we so well this is the

1412
01:44:42,119 --> 01:44:49,429
secret with a lot of characters we've

1413
01:44:45,630 --> 01:44:52,769
already known find found we've already

1414
01:44:49,429 --> 01:44:57,780
discovered how to work with that and

1415
01:44:52,769 --> 01:45:03,000
once it's compiled when we execute

1416
01:44:57,780 --> 01:45:12,268
exploit to if we go up down we can see

1417
01:45:03,000 --> 01:45:17,760
that here we have the address the

1418
01:45:12,269 --> 01:45:19,920
scoring so ivory-billed revealed a

1419
01:45:17,760 --> 01:45:24,860
secret through inspector this may be a

1420
01:45:19,920 --> 01:45:24,860
password or anything

1421
01:45:25,550 --> 01:45:32,639
mozzie comment a we can use our

1422
01:45:27,840 --> 01:45:36,389
imagination you know there too but

1423
01:45:32,639 --> 01:45:40,239
basically in this case and with type of

1424
01:45:36,389 --> 01:45:43,390
workshop what I want to do is

1425
01:45:40,239 --> 01:45:49,839
in the city for you to understand the

1426
01:45:43,390 --> 01:45:51,700
different steps and also to try it to

1427
01:45:49,840 --> 01:45:54,400
receive something that it is very

1428
01:45:51,700 --> 01:45:59,130
complex to understand I mean this is the

1429
01:45:54,400 --> 01:46:03,879
objective purpose my workshop today

1430
01:45:59,130 --> 01:46:06,850
these cyber completion I'm talking other

1431
01:46:03,880 --> 01:46:09,730
user level of course but now at the

1432
01:46:06,850 --> 01:46:10,480
kernel level we also have to do some

1433
01:46:09,730 --> 01:46:12,400
things right

1434
01:46:10,480 --> 01:46:15,700
can you mind what are we going to be

1435
01:46:12,400 --> 01:46:20,769
able to do at the kernel level this is

1436
01:46:15,700 --> 01:46:24,130
going to be the same thing basically so

1437
01:46:20,770 --> 01:46:27,280
well I'm going to continue we this slide

1438
01:46:24,130 --> 01:46:33,340
I'm not going to I'm going to skip the

1439
01:46:27,280 --> 01:46:37,389
meltdown slices oh my god I think I'm

1440
01:46:33,340 --> 01:46:41,969
going very fast but I'm sure that these

1441
01:46:37,390 --> 01:46:50,880
rings avail to all of you doesn't it

1442
01:46:41,969 --> 01:46:54,010
this is familiar twelve here for example

1443
01:46:50,880 --> 01:46:55,810
we are working with our kernel module

1444
01:46:54,010 --> 01:46:58,660
that we are introducing that's

1445
01:46:55,810 --> 01:47:02,710
protecting a special driver it's special

1446
01:46:58,660 --> 01:47:13,300
process I normally use our couldn't have

1447
01:47:02,710 --> 01:47:14,770
access to these in the end if we reduce

1448
01:47:13,300 --> 01:47:17,700
lights we're going to realize that the

1449
01:47:14,770 --> 01:47:20,530
process is exactly the same we are

1450
01:47:17,700 --> 01:47:25,269
information to our counter and that's it

1451
01:47:20,530 --> 01:47:29,620
and in order to get everything back we

1452
01:47:25,270 --> 01:47:32,950
are going to follow the same process we

1453
01:47:29,620 --> 01:47:35,469
still have some time I didn't think we

1454
01:47:32,950 --> 01:47:38,019
would make it because I know that this

1455
01:47:35,469 --> 01:47:40,810
is very complex and of course I would

1456
01:47:38,020 --> 01:47:42,430
like to think there thank you for being

1457
01:47:40,810 --> 01:47:45,520
here and think they're gonna organize

1458
01:47:42,430 --> 01:47:47,200
ourself cyber camp for doing this but I

1459
01:47:45,520 --> 01:47:50,170
think we have time for a couple of

1460
01:47:47,200 --> 01:47:51,910
questions so we have a couple of minutes

1461
01:47:50,170 --> 01:47:55,050
if you have any question please feel

1462
01:47:51,910 --> 01:47:55,050
free to ask them now

1463
01:47:58,090 --> 01:48:04,440
but assistant must appear at people's

1464
01:48:00,040 --> 01:48:07,960
window silly nooks gets to be a sin and

1465
01:48:04,440 --> 01:48:12,009
for windows and linux apprai appraised

1466
01:48:07,960 --> 01:48:17,200
in systems that AMD operators does it

1467
01:48:12,010 --> 01:48:21,400
work the same same thing this is the

1468
01:48:17,200 --> 01:48:23,800
operating system it's not important

1469
01:48:21,400 --> 01:48:30,429
because the problem is based on the

1470
01:48:23,800 --> 01:48:35,380
design of the cpu there also touches

1471
01:48:30,430 --> 01:48:39,700
from melted cetera that it's low the

1472
01:48:35,380 --> 01:48:43,930
operating system because what microcode

1473
01:48:39,700 --> 01:48:47,139
of the cpu is not doing is now being

1474
01:48:43,930 --> 01:48:48,640
done by the operating system so second

1475
01:48:47,140 --> 01:48:51,640
return of the flash is really next

1476
01:48:48,640 --> 01:48:58,000
cetera this system is going to worry

1477
01:48:51,640 --> 01:49:04,750
worse and I'm glad that you that we've

1478
01:48:58,000 --> 01:49:09,310
mentioned a RM because this has been in

1479
01:49:04,750 --> 01:49:11,530
the end a copy of a copy of copy so

1480
01:49:09,310 --> 01:49:13,000
regarding the speculative execution this

1481
01:49:11,530 --> 01:49:14,230
is something that must happen that must

1482
01:49:13,000 --> 01:49:15,790
be done because we need to be more

1483
01:49:14,230 --> 01:49:18,059
efficient and faster than our

1484
01:49:15,790 --> 01:49:18,060
competitors

1485
01:49:21,090 --> 01:49:28,840
funky the everybody wants to be the best

1486
01:49:26,830 --> 01:49:29,380
in their category are there any more

1487
01:49:28,840 --> 01:49:30,940
questions

1488
01:49:29,380 --> 01:49:39,989
nothing

1489
01:49:30,940 --> 01:49:39,989
[Music]

