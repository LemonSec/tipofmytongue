1
00:00:02,070 --> 00:00:11,460
[Music]

2
00:00:11,809 --> 00:00:18,359
well I want to talk about a real case

3
00:00:16,470 --> 00:00:23,160
that I've experienced with our malware

4
00:00:18,359 --> 00:00:25,500
campaign so different clients receive

5
00:00:23,160 --> 00:00:28,470
the same attack the same entry vector

6
00:00:25,500 --> 00:00:32,040
and we started looking for something

7
00:00:28,470 --> 00:00:34,680
that could be related to that attack so

8
00:00:32,040 --> 00:00:37,500
that we could act in advance so well the

9
00:00:34,680 --> 00:00:40,440
name is evolution of a malware campaign

10
00:00:37,500 --> 00:00:43,710
a real case so first of all I would

11
00:00:40,440 --> 00:00:47,339
introduce myself my name is Yasiin said

12
00:00:43,710 --> 00:00:49,920
Estella I am part of the palma valencia

13
00:00:47,340 --> 00:00:54,809
analysis group and i'm also in charge of

14
00:00:49,920 --> 00:00:57,480
doing research and in this field here

15
00:00:54,809 --> 00:00:59,280
you can also see my linkedin and

16
00:00:57,480 --> 00:01:02,339
telegram etc in case you want to ask me

17
00:00:59,280 --> 00:01:03,989
any question at some point so what am I

18
00:01:02,340 --> 00:01:05,610
going to explain in my presentation we

19
00:01:03,989 --> 00:01:09,390
are going to have small presentations

20
00:01:05,610 --> 00:01:13,100
regarding how my work started attacking

21
00:01:09,390 --> 00:01:16,259
the clients their main characteristics

22
00:01:13,100 --> 00:01:19,048
well especially we are going to see what

23
00:01:16,259 --> 00:01:22,560
the malware started started doing and

24
00:01:19,049 --> 00:01:25,140
then we will see five cases in which the

25
00:01:22,560 --> 00:01:28,970
attack has been improved by the

26
00:01:25,140 --> 00:01:31,590
attackers then we are going to compare

27
00:01:28,970 --> 00:01:32,850
what has happened since then throughout

28
00:01:31,590 --> 00:01:34,140
the campaign then we are going to

29
00:01:32,850 --> 00:01:39,110
identify the campaign and the main

30
00:01:34,140 --> 00:01:39,110
actors and finally I'm going to show

31
00:01:42,649 --> 00:01:47,820
table and some links of interests in

32
00:01:46,409 --> 00:01:49,590
case you want to know more about these

33
00:01:47,820 --> 00:01:52,139
so regarding the introduction what was

34
00:01:49,590 --> 00:01:55,110
the situation well a new campaign

35
00:01:52,140 --> 00:01:58,530
arrived systems could stop that campaign

36
00:01:55,110 --> 00:02:00,750
but many samples of this campaign we're

37
00:01:58,530 --> 00:02:02,810
starting we're starting to arrive and we

38
00:02:00,750 --> 00:02:06,299
had to do something why because malware

39
00:02:02,810 --> 00:02:10,289
changes so the issue here is that even

40
00:02:06,299 --> 00:02:11,500
though a tool can't stop an attack can

41
00:02:10,288 --> 00:02:14,510
prevent an attack

42
00:02:11,500 --> 00:02:16,250
the attack is going to become more

43
00:02:14,510 --> 00:02:18,019
sophisticated the entry vectors of us

44
00:02:16,250 --> 00:02:22,040
are going to change at not some point

45
00:02:18,020 --> 00:02:23,810
they may maybe have a handful for me so

46
00:02:22,040 --> 00:02:26,150
we started our research in order to see

47
00:02:23,810 --> 00:02:28,400
how the campaign was working with it

48
00:02:26,150 --> 00:02:31,430
reversing reverse engineering for that

49
00:02:28,400 --> 00:02:36,770
we tried to find as much information as

50
00:02:31,430 --> 00:02:38,959
possible in order to to you know for our

51
00:02:36,770 --> 00:02:41,300
system to respond in an appropriate way

52
00:02:38,959 --> 00:02:45,709
so what was I doing I was looking for

53
00:02:41,300 --> 00:02:49,730
commitment identification entry vectors

54
00:02:45,709 --> 00:02:52,720
u r LS strings hashes for from the

55
00:02:49,730 --> 00:02:57,350
malware or the executable file

56
00:02:52,720 --> 00:03:00,100
parker's why because I wanted to

57
00:02:57,350 --> 00:03:05,450
identify that sample I wanted to be able

58
00:03:00,100 --> 00:03:10,280
to know that everything that is arriving

59
00:03:05,450 --> 00:03:12,709
and that's linked to that sample kept by

60
00:03:10,280 --> 00:03:15,680
me and I can get more strings from that

61
00:03:12,709 --> 00:03:19,190
in order to strengthen my security

62
00:03:15,680 --> 00:03:27,200
systems and to are in a more proactive

63
00:03:19,190 --> 00:03:31,310
way instead of reactive way in initial

64
00:03:27,200 --> 00:03:33,380
background our clients were receiving an

65
00:03:31,310 --> 00:03:36,200
email with a phishing

66
00:03:33,380 --> 00:03:39,380
so it was an email that faked some real

67
00:03:36,200 --> 00:03:42,440
content and I had some office document

68
00:03:39,380 --> 00:03:47,090
with micros this micro swear containing

69
00:03:42,440 --> 00:03:49,850
malicious content the user his or she's

70
00:03:47,090 --> 00:03:52,790
in a hurry allowed the execution of this

71
00:03:49,850 --> 00:03:55,760
malicious content this is one of the

72
00:03:52,790 --> 00:03:57,370
documents I could obtain from the

73
00:03:55,760 --> 00:04:03,320
campaign and this is a document that

74
00:03:57,370 --> 00:04:05,810
takes a legal legitimized content the

75
00:04:03,320 --> 00:04:08,000
document is asking us to enable the

76
00:04:05,810 --> 00:04:10,820
macros in order to execute the malicious

77
00:04:08,000 --> 00:04:14,720
content I extracted the macros all this

78
00:04:10,820 --> 00:04:18,380
code that you can see here and I went to

79
00:04:14,720 --> 00:04:21,168
my laboratory equipment and I checked if

80
00:04:18,380 --> 00:04:24,380
this was doing what it was supposed to

81
00:04:21,168 --> 00:04:26,900
do so what is the sample doing

82
00:04:24,380 --> 00:04:30,230
well it started creating files in

83
00:04:26,900 --> 00:04:33,200
temporary files different types of files

84
00:04:30,230 --> 00:04:37,100
such as DLL and what is it doing with

85
00:04:33,200 --> 00:04:38,659
the DLL it's not uploaded at D and L and

86
00:04:37,100 --> 00:04:40,550
that's the end of the execution so if I

87
00:04:38,660 --> 00:04:43,190
create directories and the only thing

88
00:04:40,550 --> 00:04:46,490
that I have is at the ll which is

89
00:04:43,190 --> 00:04:51,250
something that is going to execute here

90
00:04:46,490 --> 00:04:54,050
is my starting point or my research

91
00:04:51,250 --> 00:04:57,530
after doing our first starting in basic

92
00:04:54,050 --> 00:05:00,980
analyses we could see that we have the

93
00:04:57,530 --> 00:05:07,369
tech sector section which corresponds to

94
00:05:00,980 --> 00:05:12,320
an executable file then we see just less

95
00:05:07,370 --> 00:05:14,930
than 5% but the data section is 83% data

96
00:05:12,320 --> 00:05:17,540
section is going to have the variable

97
00:05:14,930 --> 00:05:20,150
the global variables this is quite weird

98
00:05:17,540 --> 00:05:22,820
it is very weird that this doesn't have

99
00:05:20,150 --> 00:05:26,830
any code in the part of imports we can

100
00:05:22,820 --> 00:05:30,170
see that we have almost no functional

101
00:05:26,830 --> 00:05:32,870
memory content it may be something or

102
00:05:30,170 --> 00:05:35,510
not and the export section is completely

103
00:05:32,870 --> 00:05:38,750
empty why is this important a DLL is the

104
00:05:35,510 --> 00:05:40,969
abstraction that Microsoft has in order

105
00:05:38,750 --> 00:05:44,090
to create coding libraries this is how

106
00:05:40,970 --> 00:05:47,690
they do library library like these type

107
00:05:44,090 --> 00:05:50,330
of libraries so if I have idea and and I

108
00:05:47,690 --> 00:05:52,820
don't have any export to invoke this

109
00:05:50,330 --> 00:05:55,880
means that the coding is somewhere else

110
00:05:52,820 --> 00:05:59,150
so the functionality of these that they

111
00:05:55,880 --> 00:06:02,870
should have it doesn't have it so let's

112
00:05:59,150 --> 00:06:05,419
see more that example more into that so

113
00:06:02,870 --> 00:06:09,200
if it doesn't have the codes the experts

114
00:06:05,420 --> 00:06:11,120
on the info and the import where is take

115
00:06:09,200 --> 00:06:15,289
your call the malicious code going to be

116
00:06:11,120 --> 00:06:16,700
in the DLL main man maybe some of you

117
00:06:15,290 --> 00:06:18,770
already know this but this is the part

118
00:06:16,700 --> 00:06:21,200
of the code that is inside in charge of

119
00:06:18,770 --> 00:06:24,020
setting the environment in order to

120
00:06:21,200 --> 00:06:26,750
charge potentially some of the exploits

121
00:06:24,020 --> 00:06:32,659
this what I saw when I inspected that

122
00:06:26,750 --> 00:06:34,820
DLL stop so here we can see a lot of

123
00:06:32,660 --> 00:06:37,889
code or a most como esta

124
00:06:34,820 --> 00:06:41,009
we can see that the file is trying to

125
00:06:37,889 --> 00:06:45,120
fake a legitimated strain by pretending

126
00:06:41,009 --> 00:06:47,880
to be a type of the software this is

127
00:06:45,120 --> 00:06:49,770
this here is our malicious code what do

128
00:06:47,880 --> 00:06:51,240
we have in this malicious allow code we

129
00:06:49,770 --> 00:06:53,250
are going to have the reference to the

130
00:06:51,240 --> 00:06:57,060
obviously obfuscation and the packing

131
00:06:53,250 --> 00:07:00,289
we're going to see how these office

132
00:06:57,060 --> 00:07:03,690
gates the content and starts injecting

133
00:07:00,289 --> 00:07:06,180
first we're going to see this of

134
00:07:03,690 --> 00:07:08,570
obfuscation we are going to see that

135
00:07:06,180 --> 00:07:10,770
it's going to do our memory

136
00:07:08,570 --> 00:07:13,289
it's going to obtain some memory space

137
00:07:10,770 --> 00:07:15,750
is going to compress the decoding is

138
00:07:13,289 --> 00:07:17,310
going to put in loop that's going to be

139
00:07:15,750 --> 00:07:20,039
in charge of I mean the memories with a

140
00:07:17,310 --> 00:07:22,400
vector that's inside that sector that's

141
00:07:20,039 --> 00:07:27,900
going to start this off with scaling

142
00:07:22,400 --> 00:07:31,320
when we apply the gold and we shift to

143
00:07:27,900 --> 00:07:36,120
the and then we're going to have another

144
00:07:31,320 --> 00:07:37,800
XOR operation once the memory the

145
00:07:36,120 --> 00:07:40,530
sophisticated what's the next step

146
00:07:37,800 --> 00:07:43,530
service you know the thing that we

147
00:07:40,530 --> 00:07:52,919
haven't here is code or not as we can

148
00:07:43,530 --> 00:07:55,049
see here this call to the memory this

149
00:07:52,919 --> 00:07:58,710
means that we're going to have a result

150
00:07:55,050 --> 00:08:03,000
of doing an operation is translated into

151
00:07:58,710 --> 00:08:06,000
a direction of the operation flow so

152
00:08:03,000 --> 00:08:09,169
we've seen that the obfuscation now

153
00:08:06,000 --> 00:08:11,909
let's see how we can unpack this sample

154
00:08:09,169 --> 00:08:14,609
which says debugger IO to the memory

155
00:08:11,909 --> 00:08:18,659
section that I've been what I'm going to

156
00:08:14,610 --> 00:08:21,210
see is a lot of strings that have been

157
00:08:18,659 --> 00:08:23,789
hard code and that are now part of the

158
00:08:21,210 --> 00:08:29,969
pile and this is translating among all

159
00:08:23,789 --> 00:08:33,049
these so-called library methods we are

160
00:08:29,970 --> 00:08:37,200
going to help us to get some closure

161
00:08:33,049 --> 00:08:39,659
these matter is going to host some

162
00:08:37,200 --> 00:08:42,659
memory in order to do more decompression

163
00:08:39,659 --> 00:08:44,730
and unsafe the the compression process

164
00:08:42,659 --> 00:08:45,590
is going to take place before on after

165
00:08:44,730 --> 00:08:51,740
changing the

166
00:08:45,590 --> 00:08:53,270
I miss Roxy caustics memory memory which

167
00:08:51,740 --> 00:08:56,300
is interesting is the one that's going

168
00:08:53,270 --> 00:08:58,160
to change me so for me to execute a

169
00:08:56,300 --> 00:09:00,709
memory area I'm going to have to provide

170
00:08:58,160 --> 00:09:03,290
with water mates and this is what I'm

171
00:09:00,710 --> 00:09:05,420
going to protect is how I'm going to be

172
00:09:03,290 --> 00:09:07,849
able to execute that memory what it

173
00:09:05,420 --> 00:09:13,040
would be in this case would be

174
00:09:07,850 --> 00:09:18,680
establishing different points to learn

175
00:09:13,040 --> 00:09:20,719
memory addresses and also mean I'm going

176
00:09:18,680 --> 00:09:23,209
to put in the patrol lock and protect

177
00:09:20,720 --> 00:09:25,460
and once I'm working in the virtual

178
00:09:23,210 --> 00:09:28,070
project I know that after doing all the

179
00:09:25,460 --> 00:09:36,830
coding the injection part is going to be

180
00:09:28,070 --> 00:09:40,790
remaining so when I was there was inside

181
00:09:36,830 --> 00:09:42,830
we could identify BP strings program and

182
00:09:40,790 --> 00:09:48,680
we don't see this program cannot be run

183
00:09:42,830 --> 00:09:51,380
in this sample is already on so now we

184
00:09:48,680 --> 00:09:57,260
have to keep it and to continue with our

185
00:09:51,380 --> 00:10:00,230
analysis so we've seen that the payoff

186
00:09:57,260 --> 00:10:02,089
of station very pocketing but what how

187
00:10:00,230 --> 00:10:04,880
is the injection going to happen well

188
00:10:02,089 --> 00:10:09,280
we're going to have the reflective

189
00:10:04,880 --> 00:10:12,680
technique reflective delete injection

190
00:10:09,280 --> 00:10:14,900
this is like the initial diagram let's

191
00:10:12,680 --> 00:10:19,640
imagine that we have an attack and a

192
00:10:14,900 --> 00:10:21,380
victim the victim the victim process is

193
00:10:19,640 --> 00:10:24,230
going to have a malicious video and L

194
00:10:21,380 --> 00:10:28,189
already downloaded and our attacker is

195
00:10:24,230 --> 00:10:31,280
going to be able to access that memory

196
00:10:28,190 --> 00:10:34,670
area and it's going to call the

197
00:10:31,280 --> 00:10:38,449
reflective loader the reflective loader

198
00:10:34,670 --> 00:10:41,839
is going to be invoked through this e18

199
00:10:38,450 --> 00:10:43,459
this export it's going to upload a DLL

200
00:10:41,839 --> 00:10:45,260
it's going to execute all the malicious

201
00:10:43,459 --> 00:10:47,410
content and it's going to end the

202
00:10:45,260 --> 00:10:50,459
execution of there

203
00:10:47,410 --> 00:10:54,850
with that reflective loader is going to

204
00:10:50,459 --> 00:10:56,410
go back to the normal execution into

205
00:10:54,850 --> 00:11:04,120
detail we can see that the reflective

206
00:10:56,410 --> 00:11:07,949
loader thread or shell code is going to

207
00:11:04,120 --> 00:11:10,930
calculate in calculate its own image

208
00:11:07,949 --> 00:11:15,370
based which and this is the reference

209
00:11:10,930 --> 00:11:17,739
that is going to when the attacker wrote

210
00:11:15,370 --> 00:11:23,170
in the memory that deal and in the

211
00:11:17,740 --> 00:11:25,600
victim it did it in a random address so

212
00:11:23,170 --> 00:11:31,540
it needs to be stored in the memory you

213
00:11:25,600 --> 00:11:35,139
know that you start parsing libraries to

214
00:11:31,540 --> 00:11:37,959
gain some memory get extra memory space

215
00:11:35,139 --> 00:11:41,589
in order to inject the deal and and to

216
00:11:37,959 --> 00:11:44,589
start loading and injecting the heaters

217
00:11:41,589 --> 00:11:47,410
the sections the IAT

218
00:11:44,589 --> 00:11:49,720
the relevance we have that the

219
00:11:47,410 --> 00:11:52,959
reflective loader is going to call the

220
00:11:49,720 --> 00:11:57,610
entry point of the VHDL and and the DLL

221
00:11:52,959 --> 00:12:00,339
starts being executed so the malicious

222
00:11:57,610 --> 00:12:07,420
DLL is executed and after the execution

223
00:12:00,339 --> 00:12:13,269
the reflective loader returns their flow

224
00:12:07,420 --> 00:12:15,519
to the normal program flow see an

225
00:12:13,269 --> 00:12:17,350
analysis of the unpark example we have

226
00:12:15,519 --> 00:12:20,980
the idea of fist occasion and packing

227
00:12:17,350 --> 00:12:22,779
and injection now let's see what this is

228
00:12:20,980 --> 00:12:24,310
doing what the malware is doing I'm

229
00:12:22,779 --> 00:12:27,279
going and to be able to analyze that

230
00:12:24,310 --> 00:12:29,649
right now so in summary we're going to

231
00:12:27,279 --> 00:12:31,899
see that our connections with a CNC

232
00:12:29,649 --> 00:12:34,240
you're going to see how this is sending

233
00:12:31,899 --> 00:12:36,069
information that is scattering from the

234
00:12:34,240 --> 00:12:38,500
computer to the CNC it's going to

235
00:12:36,069 --> 00:12:43,860
download more malware it's going to

236
00:12:38,500 --> 00:12:46,300
break into another process related to

237
00:12:43,860 --> 00:12:49,589
the malware that it would steals

238
00:12:46,300 --> 00:12:51,849
downloaded and it also started creating

239
00:12:49,589 --> 00:12:54,350
temporary files so this is all the

240
00:12:51,850 --> 00:12:57,410
information that's gallery

241
00:12:54,350 --> 00:12:59,360
of the equipment username the operating

242
00:12:57,410 --> 00:13:03,140
system version the different user

243
00:12:59,360 --> 00:13:05,540
processes in execution here we can see

244
00:13:03,140 --> 00:13:11,660
all the references to HTTP connections

245
00:13:05,540 --> 00:13:14,209
that is going to do and you are Cody I

246
00:13:11,660 --> 00:13:16,310
mean this is like that because you they

247
00:13:14,210 --> 00:13:18,410
don't expect that someone is going to be

248
00:13:16,310 --> 00:13:20,810
able to find this information out

249
00:13:18,410 --> 00:13:25,640
finally we have the drop and execution

250
00:13:20,810 --> 00:13:31,010
this is going to launch up post request

251
00:13:25,640 --> 00:13:32,480
and with response and we are malware is

252
00:13:31,010 --> 00:13:40,100
going to be able to download this

253
00:13:32,480 --> 00:13:41,950
temporal and then and then I'm going to

254
00:13:40,100 --> 00:13:45,590
be able to invoke our create process

255
00:13:41,950 --> 00:13:50,210
after drop in that they and files

256
00:13:45,590 --> 00:13:55,190
download so let's nice case my case we

257
00:13:50,210 --> 00:13:58,100
have the first case which is what we see

258
00:13:55,190 --> 00:14:01,310
in a presentation at the beginning so

259
00:13:58,100 --> 00:14:11,150
it's at the end of 64 bits this is the

260
00:14:01,310 --> 00:14:14,569
algorithm that we have the key we have

261
00:14:11,150 --> 00:14:17,360
the vector which is which comes from the

262
00:14:14,570 --> 00:14:23,600
data sections like the key this is going

263
00:14:17,360 --> 00:14:27,170
to do an XOR operation operation then

264
00:14:23,600 --> 00:14:29,330
I'm going to see the result with some

265
00:14:27,170 --> 00:14:32,959
bits and then I'm going to apply another

266
00:14:29,330 --> 00:14:35,120
operation with the key XOR operation

267
00:14:32,960 --> 00:14:37,580
with a key everything that I explained

268
00:14:35,120 --> 00:14:39,290
before you can be applied to this case

269
00:14:37,580 --> 00:14:43,670
but I just want to mention that they

270
00:14:39,290 --> 00:14:48,410
contact URL is like that malicious URL

271
00:14:43,670 --> 00:14:51,500
that calmly / export computer name is

272
00:14:48,410 --> 00:14:57,199
her name operating system here producer

273
00:14:51,500 --> 00:15:01,480
process etc then case number two instead

274
00:14:57,200 --> 00:15:07,430
of being your elif's

275
00:15:01,480 --> 00:15:10,550
64 bits it's 32 and instead of having

276
00:15:07,430 --> 00:15:13,250
all the coding written as on spaghetti

277
00:15:10,550 --> 00:15:17,660
coding without any other it's now

278
00:15:13,250 --> 00:15:19,910
organized function so that it can't be

279
00:15:17,660 --> 00:15:23,569
reused so this is an example of the

280
00:15:19,910 --> 00:15:25,760
compression function mounted and

281
00:15:23,570 --> 00:15:28,010
simplified as we can see this takes

282
00:15:25,760 --> 00:15:30,140
place in different stages there for

283
00:15:28,010 --> 00:15:32,150
loops is still there we have this a

284
00:15:30,140 --> 00:15:34,130
compression function here which it now

285
00:15:32,150 --> 00:15:37,819
looks like that it can be expressed as

286
00:15:34,130 --> 00:15:40,160
live received or four of their write

287
00:15:37,820 --> 00:15:44,660
that we've mentioned before these

288
00:15:40,160 --> 00:15:47,089
suffers an XOR operation plus an offset

289
00:15:44,660 --> 00:15:48,680
which it has been hardcore in cuanto a

290
00:15:47,090 --> 00:15:50,300
la Petite of films to the same Parker

291
00:15:48,680 --> 00:15:51,979
who's coming today then the unpacking is

292
00:15:50,300 --> 00:15:58,219
exactly the same but we've added another

293
00:15:51,980 --> 00:16:00,770
part in a layer and the most well-known

294
00:15:58,220 --> 00:16:05,810
parker the packer and that everybody

295
00:16:00,770 --> 00:16:09,650
knows in the most single packing was

296
00:16:05,810 --> 00:16:14,719
well done because we see that that we

297
00:16:09,650 --> 00:16:19,250
could unpacked a malicious DLL to in a

298
00:16:14,720 --> 00:16:21,860
correct way with the same tool number

299
00:16:19,250 --> 00:16:24,140
three number four there's a entry they

300
00:16:21,860 --> 00:16:26,390
are similar to the previous cases in

301
00:16:24,140 --> 00:16:28,460
fact case a similar case one in case

302
00:16:26,390 --> 00:16:29,680
very similar to case two characteristics

303
00:16:28,460 --> 00:16:31,790
are the same same level of

304
00:16:29,680 --> 00:16:34,430
sophistication excite right the

305
00:16:31,790 --> 00:16:40,310
difference it is that dll injective is

306
00:16:34,430 --> 00:16:43,250
different each change drastically what

307
00:16:40,310 --> 00:16:45,020
happened in this near dll see well it's

308
00:16:43,250 --> 00:16:50,210
still obtaining profiling information

309
00:16:45,020 --> 00:16:52,760
but now it can keep this process from

310
00:16:50,210 --> 00:16:57,560
the exit point and it remains with the

311
00:16:52,760 --> 00:17:02,000
last identification and why because that

312
00:16:57,560 --> 00:17:03,939
way it can control other processes so

313
00:17:02,000 --> 00:17:08,270
it's going to obtain the process token

314
00:17:03,940 --> 00:17:10,490
of the victim process and then it's

315
00:17:08,270 --> 00:17:11,139
going to do our lookup privilege value

316
00:17:10,490 --> 00:17:14,859
know that

317
00:17:11,140 --> 00:17:19,959
the lui 3 which is their permits

318
00:17:14,859 --> 00:17:21,458
structures that shapes my my

319
00:17:19,959 --> 00:17:26,110
architecture in order to access other

320
00:17:21,459 --> 00:17:28,089
process so these allows you to access

321
00:17:26,109 --> 00:17:32,979
other processes as if you were the local

322
00:17:28,089 --> 00:17:34,840
admin and finally enables these

323
00:17:32,980 --> 00:17:41,200
privileges without just talking of

324
00:17:34,840 --> 00:17:44,020
privileges and it can get my own process

325
00:17:41,200 --> 00:17:49,120
identification and the structure of

326
00:17:44,020 --> 00:17:51,220
permits that I can get once I can access

327
00:17:49,120 --> 00:17:53,969
their memory and once I can do operation

328
00:17:51,220 --> 00:17:57,340
that before I couldn't do I'm going to

329
00:17:53,970 --> 00:17:59,770
do our reflective load again have a

330
00:17:57,340 --> 00:18:00,550
double reflective load so in the first

331
00:17:59,770 --> 00:18:02,980
place

332
00:18:00,550 --> 00:18:08,260
well this reflective load of course see

333
00:18:02,980 --> 00:18:12,480
it simple because parameter I downloaded

334
00:18:08,260 --> 00:18:14,530
the pile and I will try to download

335
00:18:12,480 --> 00:18:18,430
reflectively the second malware that

336
00:18:14,530 --> 00:18:24,879
I've found only hope so their reflective

337
00:18:18,430 --> 00:18:30,310
loader is obtained through RBA it does

338
00:18:24,880 --> 00:18:33,940
it saves memory in pouring processes

339
00:18:30,310 --> 00:18:35,679
with virtual writing with write process

340
00:18:33,940 --> 00:18:38,200
memory what is it going to try to write

341
00:18:35,680 --> 00:18:47,320
it's going to send a variable to remote

342
00:18:38,200 --> 00:18:49,120
three thread it's going to wait until it

343
00:18:47,320 --> 00:18:51,520
has a virtual Allah in order to store

344
00:18:49,120 --> 00:18:53,620
the response or other type of events

345
00:18:51,520 --> 00:18:54,100
that may arise as I respond to the

346
00:18:53,620 --> 00:18:57,520
threat

347
00:18:54,100 --> 00:19:00,250
and finally we're going to have a

348
00:18:57,520 --> 00:19:03,040
malicious DLL and here we have the

349
00:19:00,250 --> 00:19:09,910
create remonstrate which is passing

350
00:19:03,040 --> 00:19:11,980
their base export you know that you also

351
00:19:09,910 --> 00:19:14,710
obtain their reflective loader a trace

352
00:19:11,980 --> 00:19:18,460
what am i doing with these remote thread

353
00:19:14,710 --> 00:19:21,040
thread I'm invoking malicious process in

354
00:19:18,460 --> 00:19:23,620
order to continue with these reflective

355
00:19:21,040 --> 00:19:25,540
loading in

356
00:19:23,620 --> 00:19:26,979
case these mud work is not going to able

357
00:19:25,540 --> 00:19:31,840
to that it's going to break into a

358
00:19:26,980 --> 00:19:34,380
process if an is going to do our reboot

359
00:19:31,840 --> 00:19:37,709
of the machine

360
00:19:34,380 --> 00:19:42,120
case number five is more like an

361
00:19:37,710 --> 00:19:45,460
anecdote and they may change the initial

362
00:19:42,120 --> 00:19:52,899
and in fact the idea was not able to

363
00:19:45,460 --> 00:19:55,809
show it as a normal device directly no

364
00:19:52,900 --> 00:20:00,130
they do reach a stable coding areas here

365
00:19:55,809 --> 00:20:02,620
we can see jams conditional jams in

366
00:20:00,130 --> 00:20:07,210
which calculations are being done

367
00:20:02,620 --> 00:20:10,270
dynamic jumps hard-coded jumps when I've

368
00:20:07,210 --> 00:20:12,370
already analyzed a lot of samples

369
00:20:10,270 --> 00:20:15,429
relating to that and when I can see that

370
00:20:12,370 --> 00:20:18,610
I mean I stable coding area and that I

371
00:20:15,429 --> 00:20:23,110
can recognize that area I have options

372
00:20:18,610 --> 00:20:26,469
I remain I keep the what I have or I

373
00:20:23,110 --> 00:20:27,699
drop that and I throw it to the idea you

374
00:20:26,470 --> 00:20:33,070
know that what happens

375
00:20:27,700 --> 00:20:39,490
it's the code in fact code is quite

376
00:20:33,070 --> 00:20:42,129
similar enough the presentation it seems

377
00:20:39,490 --> 00:20:46,929
too fake to be a legitimate a string

378
00:20:42,130 --> 00:20:49,630
with AutoCAD we see the loop we can see

379
00:20:46,929 --> 00:20:51,850
that this is a DLL of 64 bits because

380
00:20:49,630 --> 00:20:55,420
they see I mean from the station code is

381
00:20:51,850 --> 00:21:03,909
the same we've seen before and all the

382
00:20:55,420 --> 00:21:08,440
deification of 64 bits are going and now

383
00:21:03,910 --> 00:21:13,720
compression and evolution what's the

384
00:21:08,440 --> 00:21:22,780
look of that in a graph I mean projects

385
00:21:13,720 --> 00:21:27,640
in which cases case 1 is to 64 and 32

386
00:21:22,780 --> 00:21:29,910
bits we see double packaging editin 86

387
00:21:27,640 --> 00:21:34,410
and 64-bit sorry

388
00:21:29,910 --> 00:21:38,250
then a second state chronologically

389
00:21:34,410 --> 00:21:41,850
speaking we see everything is kept but

390
00:21:38,250 --> 00:21:45,240
they injected the L has changed and in

391
00:21:41,850 --> 00:21:47,370
the last case in case number five we can

392
00:21:45,240 --> 00:21:51,450
observe that the initial I mean wrapper

393
00:21:47,370 --> 00:21:54,600
has already changed campaign

394
00:21:51,450 --> 00:21:58,800
identification well so the attackers

395
00:21:54,600 --> 00:22:01,919
behind these campaign is come where a 5

396
00:21:58,800 --> 00:22:05,040
0 5 which is related to the downloader

397
00:22:01,920 --> 00:22:08,310
and gave to very particularly why am I

398
00:22:05,040 --> 00:22:12,210
saying so because sometimes geopolitical

399
00:22:08,310 --> 00:22:14,360
issues some actors will try to blame

400
00:22:12,210 --> 00:22:16,200
some other actors so even though my

401
00:22:14,360 --> 00:22:20,159
identification confirmed to me that

402
00:22:16,200 --> 00:22:20,580
these are the attackers I cannot say for

403
00:22:20,160 --> 00:22:23,880
sure

404
00:22:20,580 --> 00:22:29,250
I'm sure that this may be some cyber

405
00:22:23,880 --> 00:22:31,110
attackers pretending to be how did I

406
00:22:29,250 --> 00:22:33,510
find out that these are the attackers

407
00:22:31,110 --> 00:22:36,350
what we have a picture of entry entry

408
00:22:33,510 --> 00:22:42,030
which not just that I've been

409
00:22:36,350 --> 00:22:46,830
researching such streams strings d6 64

410
00:22:42,030 --> 00:22:49,649
Rd 86 also they you are LS of the

411
00:22:46,830 --> 00:22:55,649
command and control pretending to be

412
00:22:49,650 --> 00:22:58,470
Microsoft your us with you and also

413
00:22:55,650 --> 00:23:02,390
common in control after analysis and

414
00:22:58,470 --> 00:23:04,950
applying your regular rules and

415
00:23:02,390 --> 00:23:06,930
consulting public and private sir feeds

416
00:23:04,950 --> 00:23:09,960
in which researchers have been doing

417
00:23:06,930 --> 00:23:11,930
some publications I've been able to

418
00:23:09,960 --> 00:23:16,110
extend my knowledge in these and

419
00:23:11,930 --> 00:23:16,770
identify these actors and prepare a

420
00:23:16,110 --> 00:23:20,490
report

421
00:23:16,770 --> 00:23:26,550
you know they to explain that with we

422
00:23:20,490 --> 00:23:32,220
with caught the sample and we can and

423
00:23:26,550 --> 00:23:36,480
then I would like to show you the md5

424
00:23:32,220 --> 00:23:39,330
and the URL s in case you want to

425
00:23:36,480 --> 00:23:39,970
reverse to confirm that this is true and

426
00:23:39,330 --> 00:23:41,279
that

427
00:23:39,970 --> 00:23:44,200
there are all these information matches

428
00:23:41,279 --> 00:23:48,190
here we have the github of stiff and

429
00:23:44,200 --> 00:23:50,259
fewer who discover their reflective DLL

430
00:23:48,190 --> 00:23:54,039
injection technique so no better place

431
00:23:50,259 --> 00:23:58,059
to locate no ice then their website of

432
00:23:54,039 --> 00:23:59,740
my red team in which we can see how this

433
00:23:58,059 --> 00:24:01,450
technique could be implementing this is

434
00:23:59,740 --> 00:24:04,210
very interesting because sometimes in

435
00:24:01,450 --> 00:24:06,940
the defense we forget that in order to

436
00:24:04,210 --> 00:24:09,279
learn how the malware works we need to

437
00:24:06,940 --> 00:24:11,679
be able to replicate it because we are

438
00:24:09,279 --> 00:24:14,620
going to be able to know all the

439
00:24:11,679 --> 00:24:16,000
problems and all of the different cases

440
00:24:14,620 --> 00:24:16,620
that we are going to obtain with this

441
00:24:16,000 --> 00:24:21,009
malware

442
00:24:16,620 --> 00:24:25,090
and finally you know there so you

443
00:24:21,009 --> 00:24:29,429
finished my position I just want to show

444
00:24:25,090 --> 00:24:29,428
you that we the reader of the researcher

445
00:24:29,460 --> 00:24:35,830
here you see a tweet in which he

446
00:24:32,649 --> 00:24:40,928
explains their whole campaign of ta 5:05

447
00:24:35,830 --> 00:24:43,600
and this also is going to to help you

448
00:24:40,929 --> 00:24:45,460
see that all thinking Zarkon all the

449
00:24:43,600 --> 00:24:48,639
information that we are T or me probably

450
00:24:45,460 --> 00:24:51,759
this campaign was launched by this

451
00:24:48,639 --> 00:24:53,678
attacker this after this you see thank

452
00:24:51,759 --> 00:24:55,330
you very much thank you to see cyber

453
00:24:53,679 --> 00:24:57,879
camp or having invited me and for

454
00:24:55,330 --> 00:25:00,279
promoting cyber security and if you have

455
00:24:57,879 --> 00:25:02,529
any question you can ask me right now or

456
00:25:00,279 --> 00:25:03,970
I will be also available for you to talk

457
00:25:02,529 --> 00:25:13,250
to me after the presentation thank you

458
00:25:03,970 --> 00:25:16,669
very much revolta

459
00:25:13,250 --> 00:25:20,539
are there any questions any doubts okay

460
00:25:16,669 --> 00:25:23,690
well thank you thank you again and thank

461
00:25:20,539 --> 00:25:26,299
you for attending to my presentation

462
00:25:23,690 --> 00:25:27,620
thank you for being interested I think

463
00:25:26,299 --> 00:25:30,080
that it's very important for young

464
00:25:27,620 --> 00:25:32,090
people to participate in these type of

465
00:25:30,080 --> 00:25:35,590
events otherwise it couldn't make sense

466
00:25:32,090 --> 00:25:40,370
for for experts

467
00:25:35,590 --> 00:25:43,500
[Music]

468
00:25:40,370 --> 00:25:43,500
[Applause]

