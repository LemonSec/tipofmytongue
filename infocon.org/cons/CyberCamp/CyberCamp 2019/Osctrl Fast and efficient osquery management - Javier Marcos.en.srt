1
00:00:01,830 --> 00:00:04,899
[Music]

2
00:00:08,840 --> 00:00:13,290
all I want to start this hello good

3
00:00:12,719 --> 00:00:15,239
evening

4
00:00:13,290 --> 00:00:17,240
thank you for the introduction thank you

5
00:00:15,240 --> 00:00:19,920
and fever for inviting me to be here

6
00:00:17,240 --> 00:00:22,589
today and for all those of you who have

7
00:00:19,920 --> 00:00:25,769
stayed for this workshop which I hope is

8
00:00:22,590 --> 00:00:30,050
going to be interesting I don't know if

9
00:00:25,769 --> 00:00:34,170
you are very experienced in answering to

10
00:00:30,050 --> 00:00:36,149
incidents and to detecting issues I'm

11
00:00:34,170 --> 00:00:37,530
going to try to make this as practical

12
00:00:36,149 --> 00:00:39,030
as possible I'm going to show you a few

13
00:00:37,530 --> 00:00:43,100
examples but of course it's going to be

14
00:00:39,030 --> 00:00:47,180
a short introduction well first of all

15
00:00:43,100 --> 00:00:49,649
my name is javier marcos I work in

16
00:00:47,180 --> 00:00:52,079
cybersecurity I've worked in

17
00:00:49,649 --> 00:00:54,780
cybersecurity for the last 1215 days

18
00:00:52,079 --> 00:00:56,190
I am a systems engineer engineer and

19
00:00:54,780 --> 00:00:58,980
security engineer

20
00:00:56,190 --> 00:01:01,680
I love open source software and I have

21
00:00:58,980 --> 00:01:05,840
worked for Facebook Google air B&B and

22
00:01:01,680 --> 00:01:05,840
now I'm working with crypto currencies

23
00:01:06,170 --> 00:01:13,200
and well I have always been really close

24
00:01:09,930 --> 00:01:15,810
to open source community and I have

25
00:01:13,200 --> 00:01:17,759
always tried to contribute with projects

26
00:01:15,810 --> 00:01:22,520
that I thought could be interesting from

27
00:01:17,759 --> 00:01:26,909
the point of view of security but also

28
00:01:22,520 --> 00:01:30,990
because technological companies do

29
00:01:26,909 --> 00:01:34,590
support open source and so there is a

30
00:01:30,990 --> 00:01:36,509
project that I was lucky enough to take

31
00:01:34,590 --> 00:01:43,220
part in I don't know if you've ever

32
00:01:36,509 --> 00:01:45,540
heard of o square e OS query no one well

33
00:01:43,220 --> 00:01:48,720
it's better so because that way I can

34
00:01:45,540 --> 00:01:52,439
introduce it to you well and I'm going

35
00:01:48,720 --> 00:01:54,149
to start talking about how this workshop

36
00:01:52,439 --> 00:01:57,229
is going to be structured first of all

37
00:01:54,149 --> 00:02:00,570
I'm going to tell you about OS query

38
00:01:57,229 --> 00:02:02,810
what the concept behind it is how it

39
00:02:00,570 --> 00:02:09,449
came up it was a tool that was created

40
00:02:02,810 --> 00:02:11,819
at Facebook as around mid 2015 and well

41
00:02:09,449 --> 00:02:12,450
I will tell you about it in a minute but

42
00:02:11,819 --> 00:02:14,700
I'm

43
00:02:12,450 --> 00:02:16,769
just tell the basic concepts how we use

44
00:02:14,700 --> 00:02:20,329
that and then information related

45
00:02:16,770 --> 00:02:24,000
information that were then going to use

46
00:02:20,330 --> 00:02:26,970
in a in order to use ours query in a

47
00:02:24,000 --> 00:02:29,430
scalable environment of hundreds and

48
00:02:26,970 --> 00:02:31,440
even millions of machines because in

49
00:02:29,430 --> 00:02:35,910
these cases what you really want is to

50
00:02:31,440 --> 00:02:38,280
be able to manage hours gathering and

51
00:02:35,910 --> 00:02:40,310
information generation of all the

52
00:02:38,280 --> 00:02:42,390
machines they have in your production

53
00:02:40,310 --> 00:02:44,370
environments and when it comes to

54
00:02:42,390 --> 00:02:50,130
technological companies such as Facebook

55
00:02:44,370 --> 00:02:52,260
or uber or Google the number of

56
00:02:50,130 --> 00:02:55,530
production machines even within the

57
00:02:52,260 --> 00:02:58,890
company is enormous we can even talk

58
00:02:55,530 --> 00:03:01,500
about millions of servers so I'm just

59
00:02:58,890 --> 00:03:03,540
going to explain how the concept of OS

60
00:03:01,500 --> 00:03:06,690
query applies in this kind of

61
00:03:03,540 --> 00:03:10,650
environment how it can be used how it

62
00:03:06,690 --> 00:03:13,859
can be implemented and finally how you

63
00:03:10,650 --> 00:03:16,709
could manage manage those nodes or those

64
00:03:13,860 --> 00:03:18,600
agents that are within your corporate

65
00:03:16,709 --> 00:03:21,450
production system and how you can manage

66
00:03:18,600 --> 00:03:23,910
them with OS control which is the tool

67
00:03:21,450 --> 00:03:28,130
that I have developed myself this is the

68
00:03:23,910 --> 00:03:33,739
third iteration of them to that I

69
00:03:28,130 --> 00:03:38,959
started developing in 2016 it was

70
00:03:33,739 --> 00:03:42,420
successfully deployed in corporate

71
00:03:38,959 --> 00:03:45,060
environment at uber and I think right

72
00:03:42,420 --> 00:03:51,170
now it counts around half a million

73
00:03:45,060 --> 00:03:54,750
machines Windows mark Lynas Linux and

74
00:03:51,170 --> 00:03:57,030
all of that salt and still working and

75
00:03:54,750 --> 00:03:58,950
I'm actually quite proud that although

76
00:03:57,030 --> 00:04:01,109
I'm not working at the company anymore

77
00:03:58,950 --> 00:04:03,600
they're still using my software that was

78
00:04:01,109 --> 00:04:06,390
the first iteration then there was the

79
00:04:03,600 --> 00:04:09,690
second iteration which was what I then

80
00:04:06,390 --> 00:04:11,548
converted to OS control and this is open

81
00:04:09,690 --> 00:04:13,980
source so you can use that at home if

82
00:04:11,549 --> 00:04:17,220
you want to improve your detection

83
00:04:13,980 --> 00:04:19,560
infrastructure or just reflect gather

84
00:04:17,220 --> 00:04:23,190
logs etc so I'm just going to show you

85
00:04:19,560 --> 00:04:24,660
the tools components how the logs are

86
00:04:23,190 --> 00:04:27,750
gathered

87
00:04:24,660 --> 00:04:35,460
and how you can then use it yourself so

88
00:04:27,750 --> 00:04:38,760
always query first of all right now the

89
00:04:35,460 --> 00:04:41,580
companies that use us query to collect

90
00:04:38,760 --> 00:04:44,580
or gather logs is actually quite big you

91
00:04:41,580 --> 00:04:47,159
can see many names here and there are

92
00:04:44,580 --> 00:04:49,710
also other companies that do not want to

93
00:04:47,160 --> 00:04:51,240
be acknowledged publicly but there are

94
00:04:49,710 --> 00:04:54,060
really really big companies and actually

95
00:04:51,240 --> 00:04:58,700
Google has recently done an integration

96
00:04:54,060 --> 00:05:02,550
with ours query and their forensic

97
00:04:58,700 --> 00:05:05,490
artifacts recollection to see our ads

98
00:05:02,550 --> 00:05:08,160
and you can see here an example of all

99
00:05:05,490 --> 00:05:13,350
the companies which are using us query

100
00:05:08,160 --> 00:05:16,350
and who one don't mind knowing people

101
00:05:13,350 --> 00:05:19,260
knowing obviously Facebook uses scream

102
00:05:16,350 --> 00:05:22,470
in all their systems even network

103
00:05:19,260 --> 00:05:24,270
appliances and all the others as well so

104
00:05:22,470 --> 00:05:28,290
you get an idea more or less of what the

105
00:05:24,270 --> 00:05:30,390
impact of a tool that was developed by

106
00:05:28,290 --> 00:05:34,620
three people the engineers in this

107
00:05:30,390 --> 00:05:37,469
project and which is now being used in

108
00:05:34,620 --> 00:05:41,640
very important production systems so the

109
00:05:37,470 --> 00:05:46,190
idea behind ours query is to expose your

110
00:05:41,640 --> 00:05:55,140
operating system using sequel extraction

111
00:05:46,190 --> 00:05:59,900
so the idea behind using this extraction

112
00:05:55,140 --> 00:06:02,150
with SQL was to create a system that

113
00:05:59,900 --> 00:06:06,539
generated abstract data and different

114
00:06:02,150 --> 00:06:11,310
infrastructures and it was able to

115
00:06:06,540 --> 00:06:13,890
detect intrusion or to detect incidents

116
00:06:11,310 --> 00:06:16,140
as well so if you can detect that then

117
00:06:13,890 --> 00:06:18,870
it is very important to have early

118
00:06:16,140 --> 00:06:21,750
detection so that you can then issue and

119
00:06:18,870 --> 00:06:27,750
response really quickly now OS query

120
00:06:21,750 --> 00:06:29,460
uses 100% OS API so all the tables that

121
00:06:27,750 --> 00:06:34,410
I'm going to show you later will be

122
00:06:29,460 --> 00:06:37,930
native code from the operating system of

123
00:06:34,410 --> 00:06:39,190
every platform that supports OS query

124
00:06:37,930 --> 00:06:41,229
for example if you want to know the

125
00:06:39,190 --> 00:06:44,139
amount of processes that are going on on

126
00:06:41,229 --> 00:06:47,258
a Linux system it's going to show you a

127
00:06:44,139 --> 00:06:51,580
list but it's not going to pass those PS

128
00:06:47,259 --> 00:06:55,020
or any other thing that usually takes

129
00:06:51,580 --> 00:06:57,758
place in system administration to see

130
00:06:55,020 --> 00:07:01,060
commands and how machines work and then

131
00:06:57,759 --> 00:07:03,250
you have to pass everything so OS query

132
00:07:01,060 --> 00:07:05,139
wants to bring normalized data that can

133
00:07:03,250 --> 00:07:09,370
be applied to all the platforms that

134
00:07:05,139 --> 00:07:11,560
aren't supported by it so OS query vo is

135
00:07:09,370 --> 00:07:14,250
where you can find information about the

136
00:07:11,560 --> 00:07:17,650
different packages that you can download

137
00:07:14,250 --> 00:07:22,090
and see the different versions the

138
00:07:17,650 --> 00:07:27,060
tables and the github repository on

139
00:07:22,090 --> 00:07:29,289
oversquare foundation used to be under

140
00:07:27,060 --> 00:07:35,289
Facebook's open source account

141
00:07:29,289 --> 00:07:38,440
originally but now a few months ago it

142
00:07:35,289 --> 00:07:40,240
happened to be an organized it changed

143
00:07:38,440 --> 00:07:43,870
to an organization of the Linux

144
00:07:40,240 --> 00:07:46,180
Foundation so that there was no way of

145
00:07:43,870 --> 00:07:48,070
affecting the decisions that could be

146
00:07:46,180 --> 00:07:51,010
made because obviously the project was

147
00:07:48,070 --> 00:07:54,159
at the inception created in on Facebook

148
00:07:51,010 --> 00:07:55,840
but it has a very wide impact in this

149
00:07:54,159 --> 00:08:00,300
industry right now so there's a

150
00:07:55,840 --> 00:08:06,849
committee which is currently making

151
00:08:00,300 --> 00:08:11,159
decisions about where the code is added

152
00:08:06,849 --> 00:08:11,159
to and where attention needs to be drawn

153
00:08:11,400 --> 00:08:18,729
now the motivation behind our query was

154
00:08:16,389 --> 00:08:22,659
other than detecting intruders and

155
00:08:18,729 --> 00:08:25,080
generating logs was basically would you

156
00:08:22,659 --> 00:08:30,030
be able to picture this in your

157
00:08:25,080 --> 00:08:36,029
corporate environment which in this case

158
00:08:30,030 --> 00:08:41,770
we're saying possible Linux or Mac and

159
00:08:36,029 --> 00:08:44,078
Microsoft computers laptops how many of

160
00:08:41,770 --> 00:08:46,000
these have an extension with the

161
00:08:44,078 --> 00:08:47,339
identifier how would you be able to

162
00:08:46,000 --> 00:08:51,150
retrieve that information

163
00:08:47,340 --> 00:08:53,160
how many file descriptors were opened

164
00:08:51,150 --> 00:08:59,420
yesterday in the production environment

165
00:08:53,160 --> 00:09:03,510
every hour all for example if you have

166
00:08:59,420 --> 00:09:06,079
full bridge VPN in your corporate

167
00:09:03,510 --> 00:09:09,630
network is the resistance that is

168
00:09:06,080 --> 00:09:12,360
routing that VPN to your local network

169
00:09:09,630 --> 00:09:17,540
how would you check that you need to

170
00:09:12,360 --> 00:09:21,450
have very high capacity for executing

171
00:09:17,540 --> 00:09:24,089
commands and then parts that those

172
00:09:21,450 --> 00:09:25,200
commands and then know exactly whether

173
00:09:24,089 --> 00:09:29,250
the information that you're gathering

174
00:09:25,200 --> 00:09:32,430
does or not make sense so these are

175
00:09:29,250 --> 00:09:38,130
three examples which are quite visual

176
00:09:32,430 --> 00:09:40,859
easy to visualize and to us and the

177
00:09:38,130 --> 00:09:45,060
motivation behind something like OS

178
00:09:40,860 --> 00:09:50,580
query so the first concept I would like

179
00:09:45,060 --> 00:09:57,560
to introduce within OS query I was query

180
00:09:50,580 --> 00:09:59,910
I which is an interactive shell which is

181
00:09:57,560 --> 00:10:05,130
basically the CLE where you can execute

182
00:09:59,910 --> 00:10:07,680
your queries and the idea behind this

183
00:10:05,130 --> 00:10:11,640
tool is to be able to execute these

184
00:10:07,680 --> 00:10:16,829
commands in a local machine to say for

185
00:10:11,640 --> 00:10:22,290
example you need to know which users or

186
00:10:16,830 --> 00:10:24,960
which processes using UID 0 for example

187
00:10:22,290 --> 00:10:27,060
so you would just try to extract the

188
00:10:24,960 --> 00:10:28,920
query within this system and then you

189
00:10:27,060 --> 00:10:31,680
would be able to see which query you

190
00:10:28,920 --> 00:10:35,729
would need to execute and what outcome

191
00:10:31,680 --> 00:10:38,430
that query is going to give so for

192
00:10:35,730 --> 00:10:41,190
example OS query has very good

193
00:10:38,430 --> 00:10:44,459
documentation you can find almost any

194
00:10:41,190 --> 00:10:46,410
answer you looking for on the wiki and

195
00:10:44,459 --> 00:10:48,119
there's a very complete introduction

196
00:10:46,410 --> 00:10:50,370
because you've got flags and parameters

197
00:10:48,120 --> 00:10:52,110
and everything and I'm just going to

198
00:10:50,370 --> 00:10:54,089
show you a little bit how this works so

199
00:10:52,110 --> 00:10:55,770
that we can keep on going with the

200
00:10:54,089 --> 00:10:57,570
expansion by the way if you have any

201
00:10:55,770 --> 00:10:59,000
questions do not hesitate to interrupt

202
00:10:57,570 --> 00:11:02,030
me if you need

203
00:10:59,000 --> 00:11:05,810
me to explain anything again just let me

204
00:11:02,030 --> 00:11:19,220
know and I will go back and try and

205
00:11:05,810 --> 00:11:21,680
explain it the question is that if there

206
00:11:19,220 --> 00:11:22,790
are consultations that are executed and

207
00:11:21,680 --> 00:11:26,170
os Korea need to have something

208
00:11:22,790 --> 00:11:29,839
installed no you just need oh s query

209
00:11:26,170 --> 00:11:31,219
I'll tell you for each platform how it

210
00:11:29,840 --> 00:11:33,530
works because when we're going on

211
00:11:31,220 --> 00:11:34,090
several different platforms here they

212
00:11:33,530 --> 00:11:38,540
are

213
00:11:34,090 --> 00:11:41,390
if you want to use it for Mac you can

214
00:11:38,540 --> 00:11:48,849
install it with brew or and when did

215
00:11:41,390 --> 00:11:52,430
you've got chuckle you can use apt Linux

216
00:11:48,850 --> 00:11:55,160
or four distributions of the kind you

217
00:11:52,430 --> 00:11:58,189
need an RPM with this command and with

218
00:11:55,160 --> 00:12:03,410
FreeBSD it's also gussets on installer

219
00:11:58,190 --> 00:12:06,250
as well Stacy in Delap this would be the

220
00:12:03,410 --> 00:12:11,079
place to start from if you're using your

221
00:12:06,250 --> 00:12:11,080
computer then you can install OS query

222
00:12:15,730 --> 00:12:22,700
so we have the different packages of the

223
00:12:18,410 --> 00:12:30,670
different architectures around a week

224
00:12:22,700 --> 00:12:36,589
ago we found that if you had a linux 4.1

225
00:12:30,670 --> 00:12:42,620
the 401 came out several months later so

226
00:12:36,589 --> 00:12:45,470
the 401 version got stuck and it became

227
00:12:42,620 --> 00:12:48,410
a stable and has this sir fault so if

228
00:12:45,470 --> 00:12:52,780
you do have been in the the project tree

229
00:12:48,410 --> 00:12:52,780
then you need to go to the 402 version

230
00:12:56,070 --> 00:13:09,360
you can see an example of how to get the

231
00:12:59,100 --> 00:13:14,070
page UID and name the the core concepts

232
00:13:09,360 --> 00:13:28,050
that we have in OS query are I can plus

233
00:13:14,070 --> 00:13:33,060
platform-agnostic we seem to have some

234
00:13:28,050 --> 00:13:33,390
issues with the sound can you hear me

235
00:13:33,060 --> 00:13:41,219
now

236
00:13:33,390 --> 00:13:44,250
yeah so the basic concepts in a SQL are

237
00:13:41,220 --> 00:13:46,710
platform agnostic the PID the name and

238
00:13:44,250 --> 00:13:50,610
the idea from processes are basically

239
00:13:46,710 --> 00:13:56,120
the same in all platforms that use OS

240
00:13:50,610 --> 00:13:59,430
query and the option of using SQL is

241
00:13:56,120 --> 00:14:03,990
technology that has been working for a

242
00:13:59,430 --> 00:14:10,709
long time and most system administrators

243
00:14:03,990 --> 00:14:17,010
are familiar with that so the SQL

244
00:14:10,710 --> 00:14:18,150
concepts tend to be well known and you

245
00:14:17,010 --> 00:14:20,850
will be able to see how to do

246
00:14:18,150 --> 00:14:24,329
consultations using parameters or join

247
00:14:20,850 --> 00:14:29,520
the tables as developers system

248
00:14:24,330 --> 00:14:33,330
developers are familiar with let's take

249
00:14:29,520 --> 00:14:37,189
a look at an example here so the

250
00:14:33,330 --> 00:14:40,050
concepts the main concept is tables and

251
00:14:37,190 --> 00:14:41,190
is they executed in each operating

252
00:14:40,050 --> 00:14:46,170
system and we're going to get the

253
00:14:41,190 --> 00:14:49,170
information here and this is the concept

254
00:14:46,170 --> 00:14:52,890
table in which shoot from which you take

255
00:14:49,170 --> 00:14:55,729
some attributes that is the columns that

256
00:14:52,890 --> 00:14:59,689
you'd like to take from the table you

257
00:14:55,730 --> 00:15:02,940
apply some filters or some constraints

258
00:14:59,690 --> 00:15:06,050
for example I'd like the PID the name

259
00:15:02,940 --> 00:15:11,090
and the UID from the processes

260
00:15:06,050 --> 00:15:17,280
where the UI you ideas different to zero

261
00:15:11,090 --> 00:15:21,410
and furthermore the the power of that is

262
00:15:17,280 --> 00:15:23,400
that you can join different tables and

263
00:15:21,410 --> 00:15:28,709
decorate the table with the different

264
00:15:23,400 --> 00:15:32,069
processes using a join on the UID so you

265
00:15:28,710 --> 00:15:36,120
obtain more information rather than just

266
00:15:32,070 --> 00:15:37,250
showing the processes otherwise you

267
00:15:36,120 --> 00:15:40,500
would have to do several different

268
00:15:37,250 --> 00:15:43,740
commands you'd have to do a pipe from

269
00:15:40,500 --> 00:15:46,470
one command to another grips and other

270
00:15:43,740 --> 00:15:52,680
things that we have to do usually to get

271
00:15:46,470 --> 00:15:57,480
this kind of information the most basic

272
00:15:52,680 --> 00:16:00,569
command is dot help and this will give

273
00:15:57,480 --> 00:16:09,410
you basically the ideas and the dot help

274
00:16:00,570 --> 00:16:13,710
is taken from the SQL motor so SQL elite

275
00:16:09,410 --> 00:16:16,040
it's SQL elite three points something I

276
00:16:13,710 --> 00:16:21,150
don't know which the most recent one is

277
00:16:16,040 --> 00:16:24,750
so it's a SQL elite in this case the dot

278
00:16:21,150 --> 00:16:26,520
table will give you all the information

279
00:16:24,750 --> 00:16:29,820
on the different of machines that are

280
00:16:26,520 --> 00:16:32,880
running at the time if you're using Mac

281
00:16:29,820 --> 00:16:34,530
can use dot tables then you will see

282
00:16:32,880 --> 00:16:37,860
everything that is connected to those

283
00:16:34,530 --> 00:16:41,220
platform but if you bring a Windows it

284
00:16:37,860 --> 00:16:43,410
will show you different tables because

285
00:16:41,220 --> 00:16:45,300
others depend on two different platforms

286
00:16:43,410 --> 00:16:50,939
and others are not so the information

287
00:16:45,300 --> 00:16:54,240
will be different the command pragma

288
00:16:50,940 --> 00:16:57,540
table info in this particular case will

289
00:16:54,240 --> 00:17:01,950
give you the sin taxes or the columns

290
00:16:57,540 --> 00:17:04,619
within the scheme of a table you will

291
00:17:01,950 --> 00:17:08,190
need this in order to joins between

292
00:17:04,619 --> 00:17:10,469
tables or if you needed to use a

293
00:17:08,190 --> 00:17:14,280
parameter within a table and use you to

294
00:17:10,470 --> 00:17:16,470
compare one with another so this is

295
00:17:14,280 --> 00:17:17,609
quite useful it's equivalent to a desk

296
00:17:16,470 --> 00:17:20,190
and then sq

297
00:17:17,609 --> 00:17:26,449
and this comes in the scheme of the

298
00:17:20,190 --> 00:17:26,450
tables the latest version of OS queries

299
00:17:27,380 --> 00:17:34,640
4.0.3 but it's not too stable they load

300
00:17:30,300 --> 00:17:34,639
most recent stable one is point two

301
00:17:34,970 --> 00:17:42,720
there are four different platforms that

302
00:17:38,670 --> 00:17:50,450
can be used at OS X Windows Linux for

303
00:17:42,720 --> 00:17:52,860
different packets and FreeBSD the

304
00:17:50,450 --> 00:17:56,090
information can be easily collected and

305
00:17:52,860 --> 00:17:59,189
it's easy to do joints and so on the

306
00:17:56,090 --> 00:18:03,720
format of the tables in the scheme so

307
00:17:59,190 --> 00:18:07,680
you can take a look at them so these are

308
00:18:03,720 --> 00:18:10,440
some of the tables that generally give

309
00:18:07,680 --> 00:18:12,570
us quite a good deal of information when

310
00:18:10,440 --> 00:18:14,340
you need to respond to incidents or you

311
00:18:12,570 --> 00:18:19,370
need to extract information from a

312
00:18:14,340 --> 00:18:22,740
machine that might have been compromised

313
00:18:19,370 --> 00:18:25,919
you can get a great deal of interesting

314
00:18:22,740 --> 00:18:31,460
information and to check the status of

315
00:18:25,920 --> 00:18:33,930
the machines that you're working with an

316
00:18:31,460 --> 00:18:37,980
interesting point is that when you

317
00:18:33,930 --> 00:18:41,730
select a table the code is executed each

318
00:18:37,980 --> 00:18:44,370
time you do a select so that code is for

319
00:18:41,730 --> 00:18:47,280
each table so it always executes every

320
00:18:44,370 --> 00:18:52,590
time you launch the table there's a

321
00:18:47,280 --> 00:18:56,399
little detail to keep in mind here if

322
00:18:52,590 --> 00:18:58,830
you understand how iOS Curie works then

323
00:18:56,400 --> 00:19:00,920
based on the nature of the data that

324
00:18:58,830 --> 00:19:04,580
you're going to generate all the

325
00:19:00,920 --> 00:19:07,020
complexity or the quantity of

326
00:19:04,580 --> 00:19:09,659
information that is being used then

327
00:19:07,020 --> 00:19:13,650
there are different caches within OS

328
00:19:09,660 --> 00:19:17,070
query within its own process so that you

329
00:19:13,650 --> 00:19:18,330
don't execute tables all the times that

330
00:19:17,070 --> 00:19:20,030
you don't have to execute them all the

331
00:19:18,330 --> 00:19:24,540
time

332
00:19:20,030 --> 00:19:27,240
so if you want to see if the hard disk

333
00:19:24,540 --> 00:19:30,580
on a computer has been encrypted then

334
00:19:27,240 --> 00:19:33,980
that information will be cache

335
00:19:30,580 --> 00:19:37,220
and you see changes in the sim then

336
00:19:33,980 --> 00:19:41,420
there's going to detect that for you so

337
00:19:37,220 --> 00:19:43,880
that's done internally if you need to

338
00:19:41,420 --> 00:19:45,950
get into further detail regarding

339
00:19:43,880 --> 00:19:48,290
whether on - there's cash in the table

340
00:19:45,950 --> 00:19:50,270
then you're probably in an advanced use

341
00:19:48,290 --> 00:19:55,100
of os query and you'll know what you

342
00:19:50,270 --> 00:19:58,040
need in this case the time table if you

343
00:19:55,100 --> 00:20:02,990
select date/time you click on command

344
00:19:58,040 --> 00:20:05,540
and it executes once again we've talked

345
00:20:02,990 --> 00:20:10,760
about simple tables and I will talk

346
00:20:05,540 --> 00:20:14,149
about tables with parameters in SQL this

347
00:20:10,760 --> 00:20:16,280
is a where and you put in a parameter to

348
00:20:14,150 --> 00:20:21,200
compare with in this particular case

349
00:20:16,280 --> 00:20:25,790
it's file so we have the file table to

350
00:20:21,200 --> 00:20:29,150
extract information from files you would

351
00:20:25,790 --> 00:20:33,500
extract the directory of the file where

352
00:20:29,150 --> 00:20:36,170
the path is it's a issue as you can see

353
00:20:33,500 --> 00:20:37,490
on the screen there because this is what

354
00:20:36,170 --> 00:20:40,309
you have selected this is what you've

355
00:20:37,490 --> 00:20:44,240
asked for these are just the parameters

356
00:20:40,309 --> 00:20:47,149
of the consultation another example

357
00:20:44,240 --> 00:20:49,520
which is very useful is this one you can

358
00:20:47,150 --> 00:20:52,490
use the file table to extract

359
00:20:49,520 --> 00:20:57,650
information from a file but in this case

360
00:20:52,490 --> 00:20:59,630
it's doing a join with a hash table so

361
00:20:57,650 --> 00:21:04,070
you can strike the information from the

362
00:20:59,630 --> 00:21:07,010
table that you're pointing towards it

363
00:21:04,070 --> 00:21:12,939
would give you the md5 of that table the

364
00:21:07,010 --> 00:21:22,400
hash table you will see it will have md5

365
00:21:12,940 --> 00:21:25,100
510 and so many different hashes these

366
00:21:22,400 --> 00:21:28,550
are some examples for system

367
00:21:25,100 --> 00:21:31,340
administration could be on Windows or

368
00:21:28,550 --> 00:21:32,750
Linux there are interesting tables and

369
00:21:31,340 --> 00:21:35,720
they might be interesting for our

370
00:21:32,750 --> 00:21:39,260
systems administrator you can look the

371
00:21:35,720 --> 00:21:41,649
status the number of users which are the

372
00:21:39,260 --> 00:21:45,679
kernel modules

373
00:21:41,649 --> 00:21:49,750
and what are these startup items that

374
00:21:45,679 --> 00:21:54,559
have been configured in a Window System

375
00:21:49,750 --> 00:22:00,470
an important point when you begin

376
00:21:54,559 --> 00:22:03,350
OS query is to understand the files once

377
00:22:00,470 --> 00:22:07,159
you've installed this on your machine

378
00:22:03,350 --> 00:22:15,049
you need to know the deef default routes

379
00:22:07,159 --> 00:22:19,730
for OS query so for Linux through a Deb

380
00:22:15,049 --> 00:22:22,250
on rpm here you have a stroke et Cie

381
00:22:19,730 --> 00:22:25,100
stroke OS query and then you have the

382
00:22:22,250 --> 00:22:26,809
configuration that would try to load or

383
00:22:25,100 --> 00:22:29,799
the flash and I'll talk a little bit

384
00:22:26,809 --> 00:22:33,649
more about this in a minute

385
00:22:29,799 --> 00:22:39,080
so we have stroke vard stroke log stroke

386
00:22:33,649 --> 00:22:41,840
OS query this would generate the logs if

387
00:22:39,080 --> 00:22:46,039
you use a local blogger and then we have

388
00:22:41,840 --> 00:22:47,990
the beans and the OS query I of query D

389
00:22:46,039 --> 00:22:49,850
and we'll talk a little bit about the

390
00:22:47,990 --> 00:22:55,760
packs in a moment

391
00:22:49,850 --> 00:22:58,158
they're sets of consultations so that

392
00:22:55,760 --> 00:23:00,019
you can read as if it were an antivirus

393
00:22:58,159 --> 00:23:11,000
it searches for a very interesting

394
00:23:00,019 --> 00:23:13,820
information so as I mentioned before it

395
00:23:11,000 --> 00:23:18,620
would be the same in these Mac systems

396
00:23:13,820 --> 00:23:21,889
it would be installed with a brew it

397
00:23:18,620 --> 00:23:26,268
these are signed packages and the

398
00:23:21,889 --> 00:23:30,080
difference is stroke away query

399
00:23:26,269 --> 00:23:32,120
it's VAR ba stroke aways query at the

400
00:23:30,080 --> 00:23:35,928
same for the logs for the pains and the

401
00:23:32,120 --> 00:23:39,739
packs and so on so these are just the

402
00:23:35,929 --> 00:23:42,669
default routes for the system and last

403
00:23:39,740 --> 00:23:47,330
of all those of you using Windows

404
00:23:42,669 --> 00:23:53,260
there's an interesting point in that the

405
00:23:47,330 --> 00:23:53,260
first C TV that came out

406
00:23:53,340 --> 00:24:00,389
the first CV that came out was for a

407
00:23:56,870 --> 00:24:04,620
range of privileges that in the Ruta

408
00:24:00,389 --> 00:24:08,969
that was previously being used because

409
00:24:04,620 --> 00:24:11,969
this was programmed data since this was

410
00:24:08,970 --> 00:24:14,570
not a system route her if he didn't have

411
00:24:11,970 --> 00:24:19,379
the right permission then you could

412
00:24:14,570 --> 00:24:25,259
inject different extensions and as a

413
00:24:19,379 --> 00:24:31,129
result you would inject the permissions

414
00:24:25,259 --> 00:24:31,129
for OS curry and install it as a system

415
00:24:35,149 --> 00:24:39,570
the first one we had was four and a

416
00:24:37,710 --> 00:24:46,679
window system big offence it affected

417
00:24:39,570 --> 00:24:52,009
the roots so now we have a little quiz

418
00:24:46,679 --> 00:24:55,649
to give you a couple of examples of

419
00:24:52,009 --> 00:24:57,389
consultations that you can use within OS

420
00:24:55,649 --> 00:25:01,320
query and that can give you interesting

421
00:24:57,389 --> 00:25:04,399
information for example how to get the

422
00:25:01,320 --> 00:25:09,090
hosts from the machine that is running

423
00:25:04,399 --> 00:25:11,928
you do select host name from the system

424
00:25:09,090 --> 00:25:11,928
info table

425
00:25:23,559 --> 00:25:33,289
can you see anything make it look a bit

426
00:25:27,469 --> 00:25:38,869
bigger can you see it from the back so I

427
00:25:33,289 --> 00:25:41,210
put in o s query I show the table

428
00:25:38,869 --> 00:25:43,218
command and these are all the tables

429
00:25:41,210 --> 00:25:51,940
that links to this computer which is a

430
00:25:43,219 --> 00:25:54,649
Mac so if you put in this information

431
00:25:51,940 --> 00:25:58,609
then you would get all the information

432
00:25:54,649 --> 00:26:02,599
from the system info table and you'd get

433
00:25:58,609 --> 00:26:10,460
the different content for example we can

434
00:26:02,599 --> 00:26:18,200
do select hostname from system info and

435
00:26:10,460 --> 00:26:25,249
then you have the host that's just one

436
00:26:18,200 --> 00:26:28,969
simple example in this case for the host

437
00:26:25,249 --> 00:26:31,009
who would be these system users it would

438
00:26:28,969 --> 00:26:32,169
be the users table we would do exactly

439
00:26:31,009 --> 00:26:36,499
the same thing

440
00:26:32,169 --> 00:26:43,009
it'll be pragma info from the users

441
00:26:36,499 --> 00:26:47,349
table he have the UID the GID for the

442
00:26:43,009 --> 00:26:51,469
group the cell at the shell and so on

443
00:26:47,349 --> 00:27:00,109
what do I want the UID so we would write

444
00:26:51,469 --> 00:27:06,679
in it select UID name from users rather

445
00:27:00,109 --> 00:27:10,999
user name and then we you would get the

446
00:27:06,679 --> 00:27:16,309
user ID the user in this case of the

447
00:27:10,999 --> 00:27:17,869
Machine and this is the processor table

448
00:27:16,309 --> 00:27:19,178
this last example it's a little bit more

449
00:27:17,869 --> 00:27:25,129
complex

450
00:27:19,179 --> 00:27:26,719
we'd show the processors table and the

451
00:27:25,129 --> 00:27:27,859
scheme of this table is little bit

452
00:27:26,719 --> 00:27:33,589
different because has quite a lot of

453
00:27:27,859 --> 00:27:35,030
information would like information from

454
00:27:33,589 --> 00:27:41,899
the processes I'd like the

455
00:27:35,030 --> 00:27:52,310
PID and the name for example and EU have

456
00:27:41,900 --> 00:27:54,830
their PID and the name so now you might

457
00:27:52,310 --> 00:27:58,790
say how would I knew what the username

458
00:27:54,830 --> 00:28:00,740
and the shell of the user is of the user

459
00:27:58,790 --> 00:28:02,930
that his running processes in the

460
00:28:00,740 --> 00:28:04,810
machine do you have an idea how you

461
00:28:02,930 --> 00:28:08,570
would do that

462
00:28:04,810 --> 00:28:12,169
well you'd use a join from the users

463
00:28:08,570 --> 00:28:15,560
table and the processes table and use

464
00:28:12,170 --> 00:28:22,010
that to extract the user shell and the

465
00:28:15,560 --> 00:28:25,879
user name so what does the user table

466
00:28:22,010 --> 00:28:32,570
show us we've got the shell and we write

467
00:28:25,880 --> 00:28:35,120
in select username since we're going to

468
00:28:32,570 --> 00:28:38,030
do a join we need to put an identifier

469
00:28:35,120 --> 00:28:48,800
in or for the table so it'd be you dot

470
00:28:38,030 --> 00:28:58,270
username you shell from users as you

471
00:28:48,800 --> 00:29:06,710
join processes as P where P dot u ID

472
00:28:58,270 --> 00:29:08,690
equals u u dot u ID and in this case you

473
00:29:06,710 --> 00:29:16,250
would see the users that are running and

474
00:29:08,690 --> 00:29:22,030
the shell this is where the use of the

475
00:29:16,250 --> 00:29:22,030
SQL comes in and the join is done here

476
00:29:22,180 --> 00:29:28,520
you can see how powerful this tool can

477
00:29:25,670 --> 00:29:31,600
be when you want to extract information

478
00:29:28,520 --> 00:29:31,600
from systems

479
00:29:33,030 --> 00:29:36,899
and it can be quite a large quantity of

480
00:29:35,040 --> 00:29:41,580
information especially if you have many

481
00:29:36,900 --> 00:29:42,780
machines and in fact in this case

482
00:29:41,580 --> 00:29:45,929
they're not actually related to the

483
00:29:42,780 --> 00:29:49,889
platform platform it'd be the same in

484
00:29:45,930 --> 00:29:52,110
Linux on Windows and so on it gives you

485
00:29:49,890 --> 00:29:57,150
the information directly related to the

486
00:29:52,110 --> 00:30:01,250
platform that you're using so when

487
00:29:57,150 --> 00:30:03,990
you're getting infrastructure's

488
00:30:01,250 --> 00:30:07,050
information or information that you need

489
00:30:03,990 --> 00:30:10,040
to obtain it's very useful so do you

490
00:30:07,050 --> 00:30:10,040
have any questions so far

491
00:30:12,020 --> 00:30:17,879
either you haven't understood anything

492
00:30:14,910 --> 00:30:24,360
so far or if it's plain things very very

493
00:30:17,880 --> 00:30:29,490
well so let's go on we've talked about

494
00:30:24,360 --> 00:30:32,459
OS query on my computer level and I can

495
00:30:29,490 --> 00:30:33,470
execute consult consultations on my

496
00:30:32,460 --> 00:30:37,410
computer

497
00:30:33,470 --> 00:30:42,870
oona console so how do i execute a query

498
00:30:37,410 --> 00:30:45,920
in 2000 computers and especially if I

499
00:30:42,870 --> 00:30:48,060
want for it to extract the information

500
00:30:45,920 --> 00:30:51,170
continuously and send it somewhere else

501
00:30:48,060 --> 00:30:52,980
so what you would use instead of query

502
00:30:51,170 --> 00:30:59,390
i/o is securi

503
00:30:52,980 --> 00:31:03,210
i yd which is OS q queries daemon and

504
00:30:59,390 --> 00:31:08,120
the difference is how you launch the

505
00:31:03,210 --> 00:31:13,740
queries here you install it as a service

506
00:31:08,120 --> 00:31:16,379
as in as an init system D launch the and

507
00:31:13,740 --> 00:31:19,110
windows service that's how you install

508
00:31:16,380 --> 00:31:24,210
it when you install the O's query

509
00:31:19,110 --> 00:31:26,669
package it executes immediately and

510
00:31:24,210 --> 00:31:28,320
automatically and I'm going to explain

511
00:31:26,670 --> 00:31:31,830
to you how you can configure it once

512
00:31:28,320 --> 00:31:34,260
it's installed and execute it what's

513
00:31:31,830 --> 00:31:39,300
powerful about OS query is that it

514
00:31:34,260 --> 00:31:41,430
executes queries continuously and so the

515
00:31:39,300 --> 00:31:43,649
way the demon works is that you program

516
00:31:41,430 --> 00:31:46,669
your queries to be executed every

517
00:31:43,650 --> 00:31:50,940
specific time frame

518
00:31:46,669 --> 00:31:53,789
and you can configure that by seconds

519
00:31:50,940 --> 00:31:55,769
and then you have the different types of

520
00:31:53,789 --> 00:32:03,509
locks that are generated which are

521
00:31:55,769 --> 00:32:06,749
status and results status are generated

522
00:32:03,509 --> 00:32:10,369
depending on os query status whether

523
00:32:06,749 --> 00:32:14,519
there's been an error or a failure and

524
00:32:10,369 --> 00:32:16,918
results queries are the results of the

525
00:32:14,519 --> 00:32:20,239
queries precisely they have generated

526
00:32:16,919 --> 00:32:28,469
through the programmed or on-demand

527
00:32:20,239 --> 00:32:30,389
queries as query y the flax numerals you

528
00:32:28,469 --> 00:32:33,089
have so many you couldn't even imagine

529
00:32:30,389 --> 00:32:34,918
I'm just going to explain a few of them

530
00:32:33,089 --> 00:32:37,979
the easiest ones but as I was saying

531
00:32:34,919 --> 00:32:39,599
wiki is really good here such as have a

532
00:32:37,979 --> 00:32:43,409
look on your own if you're interested in

533
00:32:39,599 --> 00:32:47,099
in it so the idea behind Aris query

534
00:32:43,409 --> 00:32:50,539
demon is that you have an operating

535
00:32:47,099 --> 00:32:55,080
system when you have processes systems

536
00:32:50,539 --> 00:33:00,570
users within that OS and within this OS

537
00:32:55,080 --> 00:33:01,918
you would have OS query wardie running

538
00:33:00,570 --> 00:33:04,859
and you would configure it with

539
00:33:01,919 --> 00:33:07,559
different flex and remote configurations

540
00:33:04,859 --> 00:33:11,339
then it would extract loss that would

541
00:33:07,559 --> 00:33:15,059
then be sent to a centralized management

542
00:33:11,339 --> 00:33:19,489
and within those boxes where you would

543
00:33:15,059 --> 00:33:21,749
apply the use cases for planned

544
00:33:19,489 --> 00:33:23,309
infrastructure or detection

545
00:33:21,749 --> 00:33:26,190
infrastructure or whatever you want to

546
00:33:23,309 --> 00:33:29,158
use it for so if instead of knowing what

547
00:33:26,190 --> 00:33:32,039
commands uses our executing for example

548
00:33:29,159 --> 00:33:33,989
you just want to monitor your CPU the

549
00:33:32,039 --> 00:33:35,849
CPU of your production machines you can

550
00:33:33,989 --> 00:33:38,580
do it so you can see the flexibility

551
00:33:35,849 --> 00:33:41,129
that this tool gives us not just for

552
00:33:38,580 --> 00:33:46,889
security issues but also for just system

553
00:33:41,129 --> 00:33:56,580
administration so I was saying a loose

554
00:33:46,889 --> 00:33:59,049
query D if you run the help then you

555
00:33:56,580 --> 00:34:00,519
have a lot of flags as you can see

556
00:33:59,049 --> 00:34:02,559
so you have more than enough to

557
00:34:00,519 --> 00:34:07,299
configure it so these are very well

558
00:34:02,559 --> 00:34:09,279
documented on the wiki and the way you

559
00:34:07,299 --> 00:34:11,259
can configure this flax well you have

560
00:34:09,280 --> 00:34:15,879
actually have two options you can either

561
00:34:11,260 --> 00:34:19,510
give the daemon through the flat file

562
00:34:15,879 --> 00:34:21,699
parameter where what you doing is just

563
00:34:19,510 --> 00:34:25,690
adding all the parameters you one line

564
00:34:21,699 --> 00:34:29,250
by line in on a flag file or you can

565
00:34:25,690 --> 00:34:31,480
just have them jason are configuring

566
00:34:29,250 --> 00:34:34,389
file and I'm going to show you both

567
00:34:31,480 --> 00:34:37,109
examples so you can then see them on OS

568
00:34:34,389 --> 00:34:42,669
control and see how this can be

569
00:34:37,109 --> 00:34:44,500
configurated using flags and the

570
00:34:42,668 --> 00:34:46,658
different configurations or centralized

571
00:34:44,500 --> 00:34:49,449
configurations depending on what on what

572
00:34:46,659 --> 00:34:51,909
you want and as I was saying the help

573
00:34:49,449 --> 00:34:55,799
command is the same for OS query in

574
00:34:51,909 --> 00:34:55,799
general is the same command all the time

575
00:34:57,000 --> 00:35:04,150
that we've been seeing includes the flax

576
00:35:00,579 --> 00:35:06,910
that you can see on help but on a file

577
00:35:04,150 --> 00:35:09,220
line-by-line but what if you don't want

578
00:35:06,910 --> 00:35:11,710
to use a flat file and you just want to

579
00:35:09,220 --> 00:35:15,069
configure them through our configuration

580
00:35:11,710 --> 00:35:18,040
configuration file what you would do

581
00:35:15,069 --> 00:35:21,130
would be to take the name of the flag

582
00:35:18,040 --> 00:35:26,500
without the dash dash then you would put

583
00:35:21,130 --> 00:35:28,599
it on Jason within the options and then

584
00:35:26,500 --> 00:35:36,270
you would have the configuration and the

585
00:35:28,599 --> 00:35:40,329
value historically I was query the way

586
00:35:36,270 --> 00:35:42,490
the parser JSON parser was implementing

587
00:35:40,329 --> 00:35:45,940
implemented it didn't matter whether you

588
00:35:42,490 --> 00:35:47,950
were using numbers billions chains

589
00:35:45,940 --> 00:35:52,829
anything because it was going to

590
00:35:47,950 --> 00:35:59,460
interpret it anyway and the 3.01 version

591
00:35:52,829 --> 00:36:03,359
we changed that and so the json parser

592
00:35:59,460 --> 00:36:06,950
changed from the c++ native nation

593
00:36:03,359 --> 00:36:09,950
version to add rapid js

594
00:36:06,950 --> 00:36:13,669
and that works much better because what

595
00:36:09,950 --> 00:36:16,009
we wanted to do was form the types to be

596
00:36:13,670 --> 00:36:18,349
well setted when they were generated and

597
00:36:16,010 --> 00:36:19,970
in the case that they were Jason types

598
00:36:18,349 --> 00:36:22,730
because if you have something waiting

599
00:36:19,970 --> 00:36:25,040
for a stream or a boolean then the

600
00:36:22,730 --> 00:36:27,980
logistics might be a bit complicated if

601
00:36:25,040 --> 00:36:30,829
you want to access them but this is this

602
00:36:27,980 --> 00:36:35,059
is just a little story little anecdote

603
00:36:30,829 --> 00:36:35,270
because I've been well doing this for so

604
00:36:35,059 --> 00:36:38,750
long

605
00:36:35,270 --> 00:36:42,849
anyway in this example you can see here

606
00:36:38,750 --> 00:36:45,380
what we're doing is configuring the API

607
00:36:42,849 --> 00:36:50,180
filesystem and you're taking it from the

608
00:36:45,380 --> 00:36:52,819
file system this is the path which is

609
00:36:50,180 --> 00:36:55,279
not the default path because the default

610
00:36:52,819 --> 00:36:57,680
path is the one I showed you Elian the

611
00:36:55,280 --> 00:37:00,079
different architectures what we have

612
00:36:57,680 --> 00:37:04,250
here is the logger which is where we're

613
00:37:00,079 --> 00:37:08,630
generating locks and we would create log

614
00:37:04,250 --> 00:37:12,319
files locally in the system and here on

615
00:37:08,630 --> 00:37:18,619
the S play field what you are doing is

616
00:37:12,319 --> 00:37:20,750
to avoid CPU surges and what you do is

617
00:37:18,619 --> 00:37:24,680
you apply a percentage of that is play

618
00:37:20,750 --> 00:37:27,530
to the programmed interaction so what

619
00:37:24,680 --> 00:37:30,618
you're doing is saying if you have one a

620
00:37:27,530 --> 00:37:34,819
100 second interval and you using 10

621
00:37:30,619 --> 00:37:36,680
percent of s play then you might in the

622
00:37:34,819 --> 00:37:38,630
best of cases it will be done in 90

623
00:37:36,680 --> 00:37:41,270
seconds and in the worst case scenario

624
00:37:38,630 --> 00:37:45,349
it would be in 110 seconds so you have a

625
00:37:41,270 --> 00:37:47,210
worst-case best-case scenario so if you

626
00:37:45,349 --> 00:37:50,089
didn't configure this you get a 50

627
00:37:47,210 --> 00:37:51,829
percent so some people ask me sometimes

628
00:37:50,089 --> 00:37:53,660
well after on this for 60 seconds and

629
00:37:51,829 --> 00:37:55,609
this is doing it whenever it once it's

630
00:37:53,660 --> 00:37:58,879
not that's not working it's that you

631
00:37:55,609 --> 00:38:01,790
have an S play you could do an S play

632
00:37:58,880 --> 00:38:06,380
zero and then it would execute it when

633
00:38:01,790 --> 00:38:09,670
you want it to be executed but because I

634
00:38:06,380 --> 00:38:12,290
was query was originally thought to

635
00:38:09,670 --> 00:38:14,960
perform more than anything else and to

636
00:38:12,290 --> 00:38:19,099
work in systems were there hundreds of

637
00:38:14,960 --> 00:38:21,460
machines these little details do help

638
00:38:19,099 --> 00:38:21,460
you

639
00:38:21,700 --> 00:38:33,439
escalator services that are running and

640
00:38:24,440 --> 00:38:36,950
have less performance issues and this is

641
00:38:33,440 --> 00:38:39,140
just to have for example everything in

642
00:38:36,950 --> 00:38:40,520
UTC when you have machines and different

643
00:38:39,140 --> 00:38:43,310
regions if you don't want to use local

644
00:38:40,520 --> 00:38:48,259
times everywhere you just use you to see

645
00:38:43,310 --> 00:38:52,370
and it's easier for everyone so here we

646
00:38:48,260 --> 00:38:54,560
have another example we've been talking

647
00:38:52,370 --> 00:38:57,680
about configuration which is options and

648
00:38:54,560 --> 00:39:00,590
now we're going to look into schedule

649
00:38:57,680 --> 00:39:04,129
which is basically the scheduled queries

650
00:39:00,590 --> 00:39:07,180
that OS who is going to execute and the

651
00:39:04,130 --> 00:39:10,360
format in this case what consists in

652
00:39:07,180 --> 00:39:13,310
defining the name of the query you

653
00:39:10,360 --> 00:39:15,590
choose there it has to be unique because

654
00:39:13,310 --> 00:39:17,090
otherwise it would be executing the

655
00:39:15,590 --> 00:39:19,460
first in the configuration and not the

656
00:39:17,090 --> 00:39:21,590
next one if they have the same name so

657
00:39:19,460 --> 00:39:23,690
here you have a chain which is the cute

658
00:39:21,590 --> 00:39:25,730
look the query which is where you

659
00:39:23,690 --> 00:39:28,910
execute in the console then you have the

660
00:39:25,730 --> 00:39:32,930
interval in seconds and in this case

661
00:39:28,910 --> 00:39:34,220
we're using two for example there are

662
00:39:32,930 --> 00:39:37,460
more things that can be configured here

663
00:39:34,220 --> 00:39:41,930
within the within scheduled queries you

664
00:39:37,460 --> 00:39:44,240
can define chain you can define numeric

665
00:39:41,930 --> 00:39:46,460
for the interval in seconds you can

666
00:39:44,240 --> 00:39:49,250
define the platform because you might

667
00:39:46,460 --> 00:39:51,620
have a configuration where you are

668
00:39:49,250 --> 00:39:53,630
distributing information to different

669
00:39:51,620 --> 00:39:55,310
machines some queries are going to be

670
00:39:53,630 --> 00:39:58,550
executed in Linux because they're for

671
00:39:55,310 --> 00:40:00,680
Windows and the other way around because

672
00:39:58,550 --> 00:40:04,130
they don't have a tables so what you can

673
00:40:00,680 --> 00:40:06,950
do really is to limit the queries so

674
00:40:04,130 --> 00:40:10,520
that queries are only executed if they

675
00:40:06,950 --> 00:40:13,279
belong to a certain platform and then we

676
00:40:10,520 --> 00:40:16,610
have sharding for example which is

677
00:40:13,280 --> 00:40:18,500
another configuration parameter say for

678
00:40:16,610 --> 00:40:21,830
example you have to work in a system

679
00:40:18,500 --> 00:40:25,130
with many machines distributed systems

680
00:40:21,830 --> 00:40:28,009
and a bit of them load so what sharding

681
00:40:25,130 --> 00:40:31,160
will do for you is just do

682
00:40:28,010 --> 00:40:32,570
a sampling of the queries that you're

683
00:40:31,160 --> 00:40:35,379
running so it's not going to be

684
00:40:32,570 --> 00:40:38,780
executing them constantly but just

685
00:40:35,380 --> 00:40:40,490
statistically and internally without

686
00:40:38,780 --> 00:40:41,990
really talking to the other machines

687
00:40:40,490 --> 00:40:46,819
it's going to be executed in a

688
00:40:41,990 --> 00:40:50,270
percentage of time say you have a query

689
00:40:46,820 --> 00:40:53,780
with a sharding of 50 percent of hosts

690
00:40:50,270 --> 00:40:55,430
and so what's going to happen is that

691
00:40:53,780 --> 00:40:59,300
50% of the times it's not going to be

692
00:40:55,430 --> 00:41:01,399
executed say I have a query for every 30

693
00:40:59,300 --> 00:41:04,790
seconds if it hasn't happened in these

694
00:41:01,400 --> 00:41:07,640
30 seconds and it doesn't get executed

695
00:41:04,790 --> 00:41:09,440
that's because you have a shot for 50

696
00:41:07,640 --> 00:41:12,100
percent now this is a bit more

697
00:41:09,440 --> 00:41:16,900
complicated but if you're interested in

698
00:41:12,100 --> 00:41:20,600
sharding I think there was an blogspot

699
00:41:16,900 --> 00:41:23,660
the was created where they explain the

700
00:41:20,600 --> 00:41:25,610
concept of sharding and white is useful

701
00:41:23,660 --> 00:41:35,020
when you have very distributed systems

702
00:41:25,610 --> 00:41:40,520
and have many different executions field

703
00:41:35,020 --> 00:41:44,390
we have here is snapshot and this is

704
00:41:40,520 --> 00:41:47,870
quite important because by default with

705
00:41:44,390 --> 00:41:50,299
OS query you are executed when we have

706
00:41:47,870 --> 00:41:52,430
the daemon configurated because when you

707
00:41:50,300 --> 00:41:54,110
are trying on your console all the

708
00:41:52,430 --> 00:41:56,990
queries that are being executed at

709
00:41:54,110 --> 00:41:59,060
snapshot which means they are always

710
00:41:56,990 --> 00:42:01,549
going to be executed but when you have

711
00:41:59,060 --> 00:42:04,100
the daemon configured you you will not

712
00:42:01,550 --> 00:42:07,610
have snapshots unless you can figure

713
00:42:04,100 --> 00:42:09,470
them to be so when you have snapshots

714
00:42:07,610 --> 00:42:11,300
they will there are always going to be

715
00:42:09,470 --> 00:42:14,359
executed whatever it is you will always

716
00:42:11,300 --> 00:42:16,640
get all the data and otherwise when you

717
00:42:14,360 --> 00:42:20,330
have the daemon running and you say well

718
00:42:16,640 --> 00:42:22,490
I want to get processes you generate

719
00:42:20,330 --> 00:42:25,250
those processes and you ask it to give

720
00:42:22,490 --> 00:42:28,279
you the processes again but if the query

721
00:42:25,250 --> 00:42:30,350
is not doing snapshot and no processes

722
00:42:28,280 --> 00:42:31,730
have been added or eliminated then it's

723
00:42:30,350 --> 00:42:34,220
not going to show you anything because

724
00:42:31,730 --> 00:42:36,020
that data has already been generated so

725
00:42:34,220 --> 00:42:38,390
if it hasn't changed then you won't get

726
00:42:36,020 --> 00:42:40,890
data and so people say well I have

727
00:42:38,390 --> 00:42:42,509
configurated it to extract some in

728
00:42:40,890 --> 00:42:44,549
Meishan well and I'm not getting

729
00:42:42,510 --> 00:42:46,500
anything well it's because nothing has

730
00:42:44,550 --> 00:42:48,120
changed because I was clearly can know

731
00:42:46,500 --> 00:42:51,390
internally where the changes have been

732
00:42:48,120 --> 00:42:53,730
made since the last configuration so you

733
00:42:51,390 --> 00:42:55,259
can see it's very powerful but how to

734
00:42:53,730 --> 00:42:57,390
take that into account cuz otherwise we

735
00:42:55,260 --> 00:42:59,130
might drive you crazy because you think

736
00:42:57,390 --> 00:43:01,520
that it's not giving you the uses yeah

737
00:42:59,130 --> 00:43:04,530
but it's only because it hasn't changed

738
00:43:01,520 --> 00:43:05,850
you could also choose to configure to

739
00:43:04,530 --> 00:43:07,800
configure it so that you only get

740
00:43:05,850 --> 00:43:09,779
additions and not when something has

741
00:43:07,800 --> 00:43:12,510
been removed or you can get everything

742
00:43:09,780 --> 00:43:15,890
or you can just get a snapshot and and

743
00:43:12,510 --> 00:43:24,540
then you will see everything now what is

744
00:43:15,890 --> 00:43:27,870
sorry there was a question if you have

745
00:43:24,540 --> 00:43:31,380
yeah it keeps an internal status like a

746
00:43:27,870 --> 00:43:32,299
hash of the result of the execution

747
00:43:31,380 --> 00:43:36,930
because

748
00:43:32,300 --> 00:43:41,160
SQL works with SQL elite as engineering

749
00:43:36,930 --> 00:43:44,819
but it's storing its ephemeral and it

750
00:43:41,160 --> 00:43:47,009
uses rocks DB that's from OS query this

751
00:43:44,820 --> 00:43:50,100
is a fit and the ephemeral database

752
00:43:47,010 --> 00:43:52,460
in-memory developed by Facebook based on

753
00:43:50,100 --> 00:43:55,020
Cassandra and it has several

754
00:43:52,460 --> 00:43:57,180
optimizations and that is what most

755
00:43:55,020 --> 00:44:00,300
query uses in order to keep a register

756
00:43:57,180 --> 00:44:02,879
of queries and configuration and so on

757
00:44:00,300 --> 00:44:05,760
because a risk query is keeping a local

758
00:44:02,880 --> 00:44:07,410
configuration of it's running status and

759
00:44:05,760 --> 00:44:11,280
of the tables that are being executed

760
00:44:07,410 --> 00:44:13,470
and right now the way it works

761
00:44:11,280 --> 00:44:15,210
internally has changed a lot so I'm not

762
00:44:13,470 --> 00:44:17,509
very sure whether that has changed or

763
00:44:15,210 --> 00:44:20,430
not but there is a way it used to work

764
00:44:17,510 --> 00:44:23,340
and the question was how does a square

765
00:44:20,430 --> 00:44:25,200
we know what the outcome is I really

766
00:44:23,340 --> 00:44:28,620
don't know the detail don't know if it

767
00:44:25,200 --> 00:44:35,960
uses hashing or if it uses the outcome

768
00:44:28,620 --> 00:44:35,960
I would need to look into it right

769
00:44:43,040 --> 00:44:48,570
well

770
00:44:45,900 --> 00:44:51,000
anyway so what I was saying is that if

771
00:44:48,570 --> 00:44:52,770
you configure these snapshots to be

772
00:44:51,000 --> 00:44:54,150
queries that generate a lot of

773
00:44:52,770 --> 00:44:56,670
information you have to take into

774
00:44:54,150 --> 00:44:58,500
account are you going to get a lot of

775
00:44:56,670 --> 00:45:01,710
information generated every time this

776
00:44:58,500 --> 00:45:04,380
gets executed so if you want to know the

777
00:45:01,710 --> 00:45:06,510
processes all the time and you're going

778
00:45:04,380 --> 00:45:08,430
to be executing it for a long time

779
00:45:06,510 --> 00:45:10,590
you're going to have a list of processes

780
00:45:08,430 --> 00:45:13,740
all the time so you will have a lot of

781
00:45:10,590 --> 00:45:15,570
information and that is where you where

782
00:45:13,740 --> 00:45:16,649
you need to take into account the

783
00:45:15,570 --> 00:45:18,810
information that is being generated

784
00:45:16,650 --> 00:45:22,620
because this obviously takes up memory

785
00:45:18,810 --> 00:45:25,500
space and when you execute os query D if

786
00:45:22,620 --> 00:45:27,960
you execute the command and you look at

787
00:45:25,500 --> 00:45:30,470
the processes you will see that sim

788
00:45:27,960 --> 00:45:34,760
processes are r-square easy and you have

789
00:45:30,470 --> 00:45:39,330
OS query engine and then the watchdog

790
00:45:34,760 --> 00:45:45,360
which I will mention a bit further in

791
00:45:39,330 --> 00:45:51,630
the presentation I'm going to tell you

792
00:45:45,360 --> 00:45:56,130
how what's dog works so we've talked

793
00:45:51,630 --> 00:46:00,810
about configuration options we've talked

794
00:45:56,130 --> 00:46:04,650
about scheduled for scheduled queries

795
00:46:00,810 --> 00:46:06,840
where they are the intervals and now

796
00:46:04,650 --> 00:46:08,280
we're going to talk about another part

797
00:46:06,840 --> 00:46:10,410
of the configuration which is the

798
00:46:08,280 --> 00:46:14,550
decorators which is basically

799
00:46:10,410 --> 00:46:18,359
information that you add to the results

800
00:46:14,550 --> 00:46:21,630
of the queries that OS query is either

801
00:46:18,360 --> 00:46:25,370
storing or hopefully or sending to a

802
00:46:21,630 --> 00:46:39,060
remote system and basically you can

803
00:46:25,370 --> 00:46:41,700
define decorator can either be used only

804
00:46:39,060 --> 00:46:45,810
when OS query is loading so that every

805
00:46:41,700 --> 00:46:47,939
time it stats you execute that query

806
00:46:45,810 --> 00:46:49,980
because you need that information and

807
00:46:47,940 --> 00:46:52,500
that information would be sent with the

808
00:46:49,980 --> 00:46:54,480
results locks that are being sent to a

809
00:46:52,500 --> 00:46:56,640
remote system or if you want for the

810
00:46:54,480 --> 00:47:00,150
decorator to be

811
00:46:56,640 --> 00:47:04,618
continuously you would configure it as

812
00:47:00,150 --> 00:47:08,309
always now this field is extremely

813
00:47:04,619 --> 00:47:10,920
interesting because when you have a

814
00:47:08,309 --> 00:47:14,249
remote OS query configuration and you

815
00:47:10,920 --> 00:47:16,979
have indexed data in Splunk Kafka

816
00:47:14,249 --> 00:47:20,609
elasticsearch whatever you use to store

817
00:47:16,979 --> 00:47:22,410
your locks this is going to add metadata

818
00:47:20,609 --> 00:47:26,930
to all the information that you're

819
00:47:22,410 --> 00:47:29,399
indexing so you won't need to run

820
00:47:26,930 --> 00:47:32,430
searches or to look for the information

821
00:47:29,400 --> 00:47:35,819
that the host is sending but with a

822
00:47:32,430 --> 00:47:38,038
decorator you can see that this result

823
00:47:35,819 --> 00:47:40,558
comes from this host with a certain ID

824
00:47:38,039 --> 00:47:44,759
and etc and I'm going to show you a few

825
00:47:40,559 --> 00:47:48,150
examples later another interesting

826
00:47:44,759 --> 00:47:56,039
concept about OS query is that when it

827
00:47:48,150 --> 00:47:59,849
was originally created anecdote we

828
00:47:56,039 --> 00:48:01,380
created the the tool we liberated it we

829
00:47:59,849 --> 00:48:03,599
made it open source we wanted the people

830
00:48:01,380 --> 00:48:06,839
to use it because it was very powerful

831
00:48:03,599 --> 00:48:08,910
it did facilitate searches but then

832
00:48:06,839 --> 00:48:12,089
people said what do I do now with it

833
00:48:08,910 --> 00:48:14,189
what queries should I send well I don't

834
00:48:12,089 --> 00:48:17,459
know well what are you looking for if

835
00:48:14,189 --> 00:48:19,920
you doing hunting what do you need what

836
00:48:17,459 --> 00:48:22,169
processes what connections yeah but do

837
00:48:19,920 --> 00:48:24,509
you know have queries for that well I

838
00:48:22,170 --> 00:48:28,259
don't know what you're interested in so

839
00:48:24,509 --> 00:48:32,400
anyway out we have to do is to assess

840
00:48:28,259 --> 00:48:34,289
have like query completion with

841
00:48:32,400 --> 00:48:38,640
information that could potentially be

842
00:48:34,289 --> 00:48:41,969
interesting for different use cases in

843
00:48:38,640 --> 00:48:46,019
this case for example we see that we

844
00:48:41,969 --> 00:48:49,289
have a pack which is the files in the

845
00:48:46,019 --> 00:48:52,229
same format as the schedule fields that

846
00:48:49,289 --> 00:48:55,829
we saw out to configuration so this is

847
00:48:52,229 --> 00:48:59,129
like adding a JSON block so you have one

848
00:48:55,829 --> 00:49:01,499
to monitor the OS query process because

849
00:48:59,130 --> 00:49:03,630
you want to know whether this is

850
00:49:01,499 --> 00:49:08,129
affecting your machines performance for

851
00:49:03,630 --> 00:49:09,230
example all queries which are

852
00:49:08,130 --> 00:49:11,240
interesting to in

853
00:49:09,230 --> 00:49:15,770
didn't respond response such as

854
00:49:11,240 --> 00:49:17,750
compliance my we're at we're known for

855
00:49:15,770 --> 00:49:20,470
Mac we don't really have that much

856
00:49:17,750 --> 00:49:26,210
information about that sort of

857
00:49:20,470 --> 00:49:30,640
compilations but in this way you have a

858
00:49:26,210 --> 00:49:33,200
few the same thing for Windows have run

859
00:49:30,640 --> 00:49:35,569
queries to see if a machine is secure or

860
00:49:33,200 --> 00:49:38,569
not and these are installed by default

861
00:49:35,570 --> 00:49:41,150
when you install OS query in your

862
00:49:38,570 --> 00:49:45,230
machine so if you look for these files

863
00:49:41,150 --> 00:49:46,670
for example always attacks Kampf you

864
00:49:45,230 --> 00:49:47,660
will see if you look for their in the

865
00:49:46,670 --> 00:49:49,340
machine you will see that you've got

866
00:49:47,660 --> 00:49:53,149
different queries and otherwise you can

867
00:49:49,340 --> 00:49:56,000
see it on the repository and github and

868
00:49:53,150 --> 00:50:00,650
the same thing that I have mentioned for

869
00:49:56,000 --> 00:50:06,140
schedule goes for packs format you just

870
00:50:00,650 --> 00:50:11,030
add the name of the pack what you would

871
00:50:06,140 --> 00:50:13,129
have them queries and on the query you

872
00:50:11,030 --> 00:50:16,700
would add the name of the pad will be

873
00:50:13,130 --> 00:50:18,680
interval for the query and the new also

874
00:50:16,700 --> 00:50:20,930
have an additional field which is OS

875
00:50:18,680 --> 00:50:22,609
query version because you might have an

876
00:50:20,930 --> 00:50:24,618
infrastructure which is very fragmented

877
00:50:22,609 --> 00:50:27,170
and you have different versions of OS

878
00:50:24,619 --> 00:50:28,880
query installed you might have a version

879
00:50:27,170 --> 00:50:32,660
which does not have the last or the

880
00:50:28,880 --> 00:50:35,030
latest tables that have been added to

881
00:50:32,660 --> 00:50:37,129
the other versions of OS query but we

882
00:50:35,030 --> 00:50:39,710
have others so for example in this case

883
00:50:37,130 --> 00:50:45,520
the query would say execute this table

884
00:50:39,710 --> 00:50:45,520
only if it is in this OS query version

885
00:50:46,330 --> 00:50:53,509
what I mentioned before about the

886
00:50:49,359 --> 00:50:59,869
watchdog in OS query if you launch this

887
00:50:53,510 --> 00:51:03,310
on OS query ID you will get something on

888
00:50:59,869 --> 00:51:08,140
the watchdog and what it's doing is

889
00:51:03,310 --> 00:51:13,820
looking because necessarily OS query

890
00:51:08,140 --> 00:51:17,480
executes in a given system so it doesn't

891
00:51:13,820 --> 00:51:20,910
request a CPU or groups that's something

892
00:51:17,480 --> 00:51:24,600
you have to look into if you need to

893
00:51:20,910 --> 00:51:28,560
some areas for other functions but by

894
00:51:24,600 --> 00:51:32,970
default the watchdog ensure ensures that

895
00:51:28,560 --> 00:51:36,810
OS query never goes over the CPU or

896
00:51:32,970 --> 00:51:38,490
memory usage it needs to extract

897
00:51:36,810 --> 00:51:39,960
information from the machines without

898
00:51:38,490 --> 00:51:43,100
affecting what is going on in the

899
00:51:39,960 --> 00:51:44,610
machines themselves so if you don't

900
00:51:43,100 --> 00:51:48,450
configure this

901
00:51:44,610 --> 00:51:53,520
the watchdog in OS query will restart

902
00:51:48,450 --> 00:51:55,620
the service if for over nine seconds

903
00:51:53,520 --> 00:52:01,830
air with Korea hell has the the system

904
00:51:55,620 --> 00:52:06,540
at over sixty percent you could - all

905
00:52:01,830 --> 00:52:09,660
the files that I have in my home because

906
00:52:06,540 --> 00:52:12,060
you might find a large file and curry

907
00:52:09,660 --> 00:52:15,629
might start working and this will

908
00:52:12,060 --> 00:52:17,820
increase the CPU above 60% for more than

909
00:52:15,630 --> 00:52:21,750
nine seconds you can set this up

910
00:52:17,820 --> 00:52:23,220
manually I want it to be less

911
00:52:21,750 --> 00:52:26,460
restrictive for example or I want it to

912
00:52:23,220 --> 00:52:30,419
be more restrictive and that's the same

913
00:52:26,460 --> 00:52:33,300
with the allocated memory if you do

914
00:52:30,420 --> 00:52:36,660
queries with a lot of information until

915
00:52:33,300 --> 00:52:39,770
that information is sent then it doesn't

916
00:52:36,660 --> 00:52:43,049
come out of the storage of OS query

917
00:52:39,770 --> 00:52:47,610
there's a query that uses a lot of

918
00:52:43,050 --> 00:52:51,090
memory then the process will do an

919
00:52:47,610 --> 00:52:57,840
analog of more than 100 measures this

920
00:52:51,090 --> 00:53:00,170
will execute if you use advanced OS

921
00:52:57,840 --> 00:53:03,780
query with a table of events for example

922
00:53:00,170 --> 00:53:08,580
you will probably want to move this up

923
00:53:03,780 --> 00:53:15,600
to 300 at least you can get memory very

924
00:53:08,580 --> 00:53:21,330
cheaply so that's fine the shell for OS

925
00:53:15,600 --> 00:53:25,069
query I and ID and I'm going to talk

926
00:53:21,330 --> 00:53:29,910
about the remote IP for OS query to

927
00:53:25,070 --> 00:53:32,160
manage and to work with the tools for OS

928
00:53:29,910 --> 00:53:34,710
control

929
00:53:32,160 --> 00:53:37,259
this is a management service for

930
00:53:34,710 --> 00:53:40,619
therefore the users in this case it's me

931
00:53:37,260 --> 00:53:43,260
because it's an example here we have an

932
00:53:40,619 --> 00:53:45,990
indication of how this would work this

933
00:53:43,260 --> 00:53:49,740
is the architecture and the machines for

934
00:53:45,990 --> 00:53:53,459
OS query we have their status and result

935
00:53:49,740 --> 00:53:54,689
logs that are sent over the Internet if

936
00:53:53,460 --> 00:53:57,000
you choose to do so

937
00:53:54,690 --> 00:54:00,530
it receives the configuration through

938
00:53:57,000 --> 00:54:05,460
the internet if you wish to or not and

939
00:54:00,530 --> 00:54:11,900
you end up with an TLS endpoint which is

940
00:54:05,460 --> 00:54:17,299
the management server and this basically

941
00:54:11,900 --> 00:54:22,470
distributes the OS query configuration

942
00:54:17,299 --> 00:54:25,490
so this is a simplified diagram because

943
00:54:22,470 --> 00:54:32,819
this is the most basic concept of

944
00:54:25,490 --> 00:54:40,259
machines using OS query so this is how

945
00:54:32,819 --> 00:54:43,589
it work with a centralized server so

946
00:54:40,260 --> 00:54:49,020
what can we get out of this you might

947
00:54:43,589 --> 00:54:52,349
say I don't want to set up OS query to

948
00:54:49,020 --> 00:54:54,960
cause me issues using flags and

949
00:54:52,349 --> 00:54:59,309
certificates and so on so that I was

950
00:54:54,960 --> 00:55:03,210
clear he talks to a server so what can I

951
00:54:59,309 --> 00:55:07,289
get out of setting up a wisk URI with a

952
00:55:03,210 --> 00:55:09,539
TLS end point each time OS query talks

953
00:55:07,289 --> 00:55:12,390
to the server and the logs are

954
00:55:09,539 --> 00:55:14,880
automatically sent coming from the

955
00:55:12,390 --> 00:55:19,578
machine and stored then you can use a

956
00:55:14,880 --> 00:55:23,369
concept called distributed queries in

957
00:55:19,579 --> 00:55:25,770
this case it's on demand queries the

958
00:55:23,369 --> 00:55:33,029
same ones that are executed from the

959
00:55:25,770 --> 00:55:36,799
machine itself from the console and the

960
00:55:33,029 --> 00:55:40,170
results are sent directly to the server

961
00:55:36,799 --> 00:55:45,150
it's like having a distributed cell

962
00:55:40,170 --> 00:55:47,250
within the machines that are running

963
00:55:45,150 --> 00:55:49,859
so for investigation forensic

964
00:55:47,250 --> 00:55:52,589
investigation the case investigation of

965
00:55:49,859 --> 00:55:55,950
incidence or internal use and so on it's

966
00:55:52,589 --> 00:55:58,279
very useful it's because it's like

967
00:55:55,950 --> 00:56:05,609
having a cell within that machine

968
00:55:58,279 --> 00:56:09,359
it's a read-only query it's encapsulated

969
00:56:05,609 --> 00:56:13,828
with on the capacities and security and

970
00:56:09,359 --> 00:56:15,900
and performance of OS query so the

971
00:56:13,829 --> 00:56:22,920
solutions that currently exist on the

972
00:56:15,900 --> 00:56:24,660
market for an endpoint TLS some are for

973
00:56:22,920 --> 00:56:26,059
free and some are you have to pay for

974
00:56:24,660 --> 00:56:28,710
them

975
00:56:26,059 --> 00:56:31,260
central is one of the first ones that

976
00:56:28,710 --> 00:56:33,510
came out which is an IT management

977
00:56:31,260 --> 00:56:38,130
system it's not very up-to-date at the

978
00:56:33,510 --> 00:56:42,779
moment and dormand was an interesting

979
00:56:38,130 --> 00:56:44,640
one it was in Python but they haven't

980
00:56:42,779 --> 00:56:51,839
done much maintenance on that for quite

981
00:56:44,640 --> 00:56:54,058
some time now I put a with control in

982
00:56:51,839 --> 00:56:56,910
there several times so you don't miss it

983
00:56:54,059 --> 00:57:03,510
I don't know if you know live ops I

984
00:56:56,910 --> 00:57:09,538
don't if you know carbon black it used

985
00:57:03,510 --> 00:57:11,609
oh s query logs sgt use is in service

986
00:57:09,539 --> 00:57:17,910
server less since restructures from

987
00:57:11,609 --> 00:57:21,270
amazon and some of the most well-known

988
00:57:17,910 --> 00:57:25,890
ones which are commercial solutions like

989
00:57:21,270 --> 00:57:27,690
optics and collide collide also has

990
00:57:25,890 --> 00:57:34,049
another version but it's missing a few

991
00:57:27,690 --> 00:57:35,970
little pieces so to implement an

992
00:57:34,049 --> 00:57:38,490
endpoint TLS it's not very complicated

993
00:57:35,970 --> 00:57:40,859
but you might say oh i'm not convinced

994
00:57:38,490 --> 00:57:42,930
with any of the current situations or

995
00:57:40,859 --> 00:57:45,150
the options that i have and i want to do

996
00:57:42,930 --> 00:57:56,430
during Cobalts then what you've got to

997
00:57:45,150 --> 00:57:58,340
do is to implement a handler so you

998
00:57:56,430 --> 00:58:02,540
implement the handler to

999
00:57:58,340 --> 00:58:06,200
receive the requests the post requests

1000
00:58:02,540 --> 00:58:08,090
to have an enroll in the machine it

1001
00:58:06,200 --> 00:58:10,580
receives another handler to distribute

1002
00:58:08,090 --> 00:58:14,780
the configuration another handler to

1003
00:58:10,580 --> 00:58:19,580
receive the logs they can be status

1004
00:58:14,780 --> 00:58:22,580
results or query logs and then you also

1005
00:58:19,580 --> 00:58:24,310
have to implement some handlers that

1006
00:58:22,580 --> 00:58:28,130
I'll show you in a moment

1007
00:58:24,310 --> 00:58:30,710
for on-demand queries for file carving

1008
00:58:28,130 --> 00:58:35,690
and so on it's not really that

1009
00:58:30,710 --> 00:58:40,970
complicated the documentation for OS

1010
00:58:35,690 --> 00:58:45,440
query is very well prepared and you have

1011
00:58:40,970 --> 00:58:47,689
it here on this URL it can say what the

1012
00:58:45,440 --> 00:58:49,490
format will be what to you should expect

1013
00:58:47,690 --> 00:58:52,070
it to give you the information you

1014
00:58:49,490 --> 00:58:53,270
should expect to receive because it's

1015
00:58:52,070 --> 00:58:56,980
very easy to follow because the

1016
00:58:53,270 --> 00:58:56,980
documentation is really well prepared

1017
00:58:59,050 --> 00:59:04,520
either in flags or air config remote

1018
00:59:02,630 --> 00:59:07,280
configuration there are a number of

1019
00:59:04,520 --> 00:59:12,410
values that you need to configure so

1020
00:59:07,280 --> 00:59:15,680
that OS query can use a remote system if

1021
00:59:12,410 --> 00:59:20,839
you have a mutual TLS then you need a

1022
00:59:15,680 --> 00:59:23,029
client certificate or a password you'll

1023
00:59:20,840 --> 00:59:25,340
have to give the hostname that TLS will

1024
00:59:23,030 --> 00:59:31,970
use and these certificates for the

1025
00:59:25,340 --> 00:59:39,590
server's if if they are not in their

1026
00:59:31,970 --> 00:59:42,740
machine keychain I'd like to point out

1027
00:59:39,590 --> 00:59:47,240
that the TLS end point is called that

1028
00:59:42,740 --> 00:59:49,430
because OS query can only use Telus

1029
00:59:47,240 --> 00:59:52,729
endpoint it was done like that right

1030
00:59:49,430 --> 00:59:56,240
from the beginning so that there were no

1031
00:59:52,730 --> 00:59:59,270
opportunities for logs that use met a

1032
00:59:56,240 --> 01:00:07,129
lot of sensitive information could go

1033
00:59:59,270 --> 01:00:09,009
around on the network so you can use os

1034
01:00:07,130 --> 01:00:12,049
query to use

1035
01:00:09,009 --> 01:00:13,190
HTTP but I don't recommend that because

1036
01:00:12,049 --> 01:00:18,140
you have to make a number of

1037
01:00:13,190 --> 01:00:20,299
modifications because it always tries to

1038
01:00:18,140 --> 01:00:23,839
setup you should always try to set up a

1039
01:00:20,299 --> 01:00:26,329
stable configuration that says decision

1040
01:00:23,839 --> 01:00:28,339
was taken to ensure that the

1041
01:00:26,329 --> 01:00:41,349
configurations were always encrypted and

1042
01:00:28,339 --> 01:00:43,400
so on we've spoken about s query I and

1043
01:00:41,349 --> 01:00:47,150
you just need to check how much time

1044
01:00:43,400 --> 01:00:56,479
I've got left so it 40 minutes yep we've

1045
01:00:47,150 --> 01:00:59,170
spoken about os query i/os query d OS

1046
01:00:56,479 --> 01:01:06,098
quality with a demon we configure

1047
01:00:59,170 --> 01:01:09,589
programs and the remote OS query tool

1048
01:01:06,099 --> 01:01:15,589
which is used for programming your own

1049
01:01:09,589 --> 01:01:18,440
TLS so now we're going to look at some

1050
01:01:15,589 --> 01:01:22,219
of the implementation details and to

1051
01:01:18,440 --> 01:01:26,200
present the OS control - it was

1052
01:01:22,219 --> 01:01:28,430
liberated in September there is some

1053
01:01:26,200 --> 01:01:31,700
documentation available and it isn't

1054
01:01:28,430 --> 01:01:36,710
actually complete yet I've got to polish

1055
01:01:31,700 --> 01:01:39,078
at it a little bit if there was an

1056
01:01:36,710 --> 01:01:43,069
introduction there available but

1057
01:01:39,079 --> 01:01:45,440
basically the idea behind it is you if

1058
01:01:43,069 --> 01:01:49,489
you have any questions later than I'll

1059
01:01:45,440 --> 01:01:56,150
put the information up but you can also

1060
01:01:49,489 --> 01:01:59,210
get in touch with me no problem the why

1061
01:01:56,150 --> 01:02:01,989
did I write an endpoint TLS endpoint

1062
01:01:59,210 --> 01:02:05,680
when I could have used something else

1063
01:02:01,989 --> 01:02:09,020
such as doing login within the machine

1064
01:02:05,680 --> 01:02:10,779
using the flags or heavy forwarding

1065
01:02:09,020 --> 01:02:13,759
[Music]

1066
01:02:10,779 --> 01:02:17,950
there were many many different options

1067
01:02:13,759 --> 01:02:20,829
for removing the logs from the machines

1068
01:02:17,950 --> 01:02:22,580
there's also share for puppet options

1069
01:02:20,829 --> 01:02:24,590
for distributing

1070
01:02:22,580 --> 01:02:30,110
the different configurations but the

1071
01:02:24,590 --> 01:02:32,240
idea of using the TLS end point was the

1072
01:02:30,110 --> 01:02:34,970
fact that there are certain things that

1073
01:02:32,240 --> 01:02:36,890
the existing solutions I wasn't

1074
01:02:34,970 --> 01:02:39,319
convinced about because it would make

1075
01:02:36,890 --> 01:02:43,270
you do something in a certain way it

1076
01:02:39,320 --> 01:02:47,450
wasn't a modular enough oh it didn't

1077
01:02:43,270 --> 01:02:52,870
have the ability to support certain

1078
01:02:47,450 --> 01:02:57,589
things and I started writing this in

1079
01:02:52,870 --> 01:03:01,400
2016 when optics for example didn't

1080
01:02:57,590 --> 01:03:05,600
exist as companies and these companies

1081
01:03:01,400 --> 01:03:07,600
were created using the OS query business

1082
01:03:05,600 --> 01:03:10,009
model but at the time they didn't exist

1083
01:03:07,600 --> 01:03:15,080
so at the time there weren't many

1084
01:03:10,010 --> 01:03:18,200
options for a tool of this kind so

1085
01:03:15,080 --> 01:03:22,580
writing one of these was because I was

1086
01:03:18,200 --> 01:03:25,700
interested in particular in distributing

1087
01:03:22,580 --> 01:03:27,470
the configuration I wanted to build a

1088
01:03:25,700 --> 01:03:33,140
change in the configuration I wanted it

1089
01:03:27,470 --> 01:03:35,870
be as fast as possible and now none of

1090
01:03:33,140 --> 01:03:38,870
the solutions that exist are able to

1091
01:03:35,870 --> 01:03:42,580
deal with that it's an extraction of

1092
01:03:38,870 --> 01:03:45,400
files within the machines and this

1093
01:03:42,580 --> 01:03:48,650
concept is called file cards

1094
01:03:45,400 --> 01:03:51,880
it's an OS function that's not

1095
01:03:48,650 --> 01:03:58,820
documented you can extract files from

1096
01:03:51,880 --> 01:04:01,850
document em from documents but you can't

1097
01:03:58,820 --> 01:04:03,530
deal with them if you go to those files

1098
01:04:01,850 --> 01:04:06,680
you can implement and it works very well

1099
01:04:03,530 --> 01:04:08,510
and I'll show you this in a moment and I

1100
01:04:06,680 --> 01:04:15,230
really wanted to be able to have

1101
01:04:08,510 --> 01:04:18,560
OnDemand her queries I was also

1102
01:04:15,230 --> 01:04:22,730
interested in having an open source

1103
01:04:18,560 --> 01:04:26,630
solution that I could change as I wished

1104
01:04:22,730 --> 01:04:30,040
and at the time there wasn't much else

1105
01:04:26,630 --> 01:04:32,720
available it needed to have different

1106
01:04:30,040 --> 01:04:34,160
modules and there were things that I

1107
01:04:32,720 --> 01:04:35,500
weren't quite convinced with but it

1108
01:04:34,160 --> 01:04:38,649
wasn't sufficiently

1109
01:04:35,500 --> 01:04:40,780
medulla and I also wanted it to be

1110
01:04:38,650 --> 01:04:44,500
scalable and this was particularly

1111
01:04:40,780 --> 01:04:50,590
important because when I had the first

1112
01:04:44,500 --> 01:04:53,760
version of OS control internally I spent

1113
01:04:50,590 --> 01:04:57,160
around maybe 10 Dane's

1114
01:04:53,760 --> 01:05:00,310
looking to see if the configuration had

1115
01:04:57,160 --> 01:05:03,069
been download and all of a sudden they

1116
01:05:00,310 --> 01:05:08,470
had there were 15,000 machines all of a

1117
01:05:03,070 --> 01:05:14,170
sudden from 0 to 15,000 I didn't have

1118
01:05:08,470 --> 01:05:17,560
enough of capacity in my code it wasn't

1119
01:05:14,170 --> 01:05:22,060
a bad experience nothing broke the

1120
01:05:17,560 --> 01:05:25,540
service continued and I thought goodness

1121
01:05:22,060 --> 01:05:27,610
me that's a good thing that I wrote this

1122
01:05:25,540 --> 01:05:30,610
and now when they have issues I know how

1123
01:05:27,610 --> 01:05:32,950
to fix them because there are many

1124
01:05:30,610 --> 01:05:33,910
machines that have gone down you don't

1125
01:05:32,950 --> 01:05:35,470
know what's going wrong with them and

1126
01:05:33,910 --> 01:05:38,379
this is when you say oh well I have to

1127
01:05:35,470 --> 01:05:41,759
go in there and result that I saw I

1128
01:05:38,380 --> 01:05:46,030
wanted it to be modular and scalable and

1129
01:05:41,760 --> 01:05:49,660
it was equivalent to the performance of

1130
01:05:46,030 --> 01:05:53,560
the TLS that was going to work with so

1131
01:05:49,660 --> 01:05:58,149
this is the diagram of the control of

1132
01:05:53,560 --> 01:06:01,029
the components there is one thing

1133
01:05:58,150 --> 01:06:03,100
missing here that is implemented but

1134
01:06:01,030 --> 01:06:10,150
it's not documented but it's in the

1135
01:06:03,100 --> 01:06:15,610
repository this diagram looks a little

1136
01:06:10,150 --> 01:06:17,400
bit crazy but it's not complicated but

1137
01:06:15,610 --> 01:06:23,560
I'd like to point a couple of things out

1138
01:06:17,400 --> 01:06:30,160
and I'll probably point out a few more

1139
01:06:23,560 --> 01:06:32,920
things as we go along this looks like a

1140
01:06:30,160 --> 01:06:36,730
kind of a crazy person diagram but

1141
01:06:32,920 --> 01:06:39,130
they're TLS surface is what stores and

1142
01:06:36,730 --> 01:06:42,010
receives the logs and distributes

1143
01:06:39,130 --> 01:06:43,570
distributes the configuration so that

1144
01:06:42,010 --> 01:06:44,849
they had the OS query nodes is

1145
01:06:43,570 --> 01:06:48,349
distributed through

1146
01:06:44,849 --> 01:06:52,499
Internet is distributed through ng INX

1147
01:06:48,349 --> 01:06:58,549
it emits metrics and the information is

1148
01:06:52,499 --> 01:07:02,700
stored in the database the main idea of

1149
01:06:58,549 --> 01:07:05,038
this direct communication is that it's a

1150
01:07:02,700 --> 01:07:08,489
critical point so when you need to make

1151
01:07:05,039 --> 01:07:12,769
changes it needs to be balanced the wise

1152
01:07:08,489 --> 01:07:22,650
the system will break and stop

1153
01:07:12,769 --> 01:07:25,229
generating and you'll lose visibility so

1154
01:07:22,650 --> 01:07:27,960
what you want to get from os query you

1155
01:07:25,229 --> 01:07:30,598
will lose that so the idea is that the

1156
01:07:27,960 --> 01:07:35,069
logs should be sent to servers so

1157
01:07:30,599 --> 01:07:40,829
whatever the type they are there could

1158
01:07:35,069 --> 01:07:45,989
be Splunk Kafka yella okay whatever so

1159
01:07:40,829 --> 01:07:53,969
this is a component of OS control so

1160
01:07:45,989 --> 01:07:56,660
this is OS control admin here you can

1161
01:07:53,969 --> 01:08:00,869
see I've got internet here but in the

1162
01:07:56,660 --> 01:08:03,930
administration console I don't put that

1163
01:08:00,869 --> 01:08:06,349
s that in because there one of the

1164
01:08:03,930 --> 01:08:09,299
reasons I wanted to get my own solution

1165
01:08:06,349 --> 01:08:11,759
was that many of the systems that were

1166
01:08:09,299 --> 01:08:15,538
being produced were distributed

1167
01:08:11,759 --> 01:08:23,929
geographically and I wanted the solution

1168
01:08:15,539 --> 01:08:26,819
to be a one-stop shop solution but

1169
01:08:23,929 --> 01:08:29,460
Cornette is basically laptops that

1170
01:08:26,819 --> 01:08:32,219
people take around there and there are

1171
01:08:29,460 --> 01:08:34,799
thousands of people who have them and so

1172
01:08:32,219 --> 01:08:38,040
you can't wait until people are

1173
01:08:34,799 --> 01:08:41,089
connected so what I wanted was for the

1174
01:08:38,040 --> 01:08:43,130
TL service to receive that and

1175
01:08:41,089 --> 01:08:50,729
distribute the configurations

1176
01:08:43,130 --> 01:08:53,580
configurations of the Internet meanwhile

1177
01:08:50,729 --> 01:08:55,799
the administration servers could be over

1178
01:08:53,580 --> 01:09:00,059
the Internet

1179
01:08:55,799 --> 01:09:04,140
but in actual fact the operator would

1180
01:09:00,060 --> 01:09:07,319
send it over the Internet it could be SS

1181
01:09:04,140 --> 01:09:10,350
over sam'l whatever you use for your

1182
01:09:07,319 --> 01:09:16,260
internet applications but in actual fact

1183
01:09:10,350 --> 01:09:19,350
the access would be through a VPN the

1184
01:09:16,260 --> 01:09:21,900
idea is to ensure that the communication

1185
01:09:19,350 --> 01:09:27,359
through the administration and the TLS

1186
01:09:21,899 --> 01:09:30,089
is done using the backend and that's

1187
01:09:27,359 --> 01:09:33,359
internally connected through a network

1188
01:09:30,089 --> 01:09:35,490
and it's the same with a net metrics and

1189
01:09:33,359 --> 01:09:41,160
so on and you can use this information

1190
01:09:35,490 --> 01:09:42,599
for whatever your purpose is and take

1191
01:09:41,160 --> 01:09:44,010
into account the critical information

1192
01:09:42,600 --> 01:09:48,020
that you're working with you don't want

1193
01:09:44,010 --> 01:09:52,529
that to be available on the Internet so

1194
01:09:48,020 --> 01:09:54,120
you have this console behind a VPN or at

1195
01:09:52,529 --> 01:09:58,680
a similar kind of systems that's a

1196
01:09:54,120 --> 01:10:01,440
little bit of a detail Accio so well

1197
01:09:58,680 --> 01:10:06,150
Sarah mismo I'm going to show it to you

1198
01:10:01,440 --> 01:10:10,200
right now this is taken from OS control

1199
01:10:06,150 --> 01:10:14,150
and it's basically a web that shows the

1200
01:10:10,200 --> 01:10:19,139
machines then you have configured the

1201
01:10:14,150 --> 01:10:21,120
UID unique ID and everything else and

1202
01:10:19,140 --> 01:10:28,140
the last component that I would like to

1203
01:10:21,120 --> 01:10:31,800
mention is the command line in OS

1204
01:10:28,140 --> 01:10:33,630
control usually if you want to see

1205
01:10:31,800 --> 01:10:35,970
something that you don't want you don't

1206
01:10:33,630 --> 01:10:37,520
want to expose all the metadata but he

1207
01:10:35,970 --> 01:10:40,230
have stored in your database and

1208
01:10:37,520 --> 01:10:43,530
sometimes you might even want to see it

1209
01:10:40,230 --> 01:10:46,589
in bulk or just integrate it with slack

1210
01:10:43,530 --> 01:10:50,389
for example or with anything that you

1211
01:10:46,590 --> 01:10:50,390
want to do through your are tickets

1212
01:10:50,750 --> 01:10:56,550
you're not going to go directly into

1213
01:10:53,370 --> 01:10:58,530
your back-end system because you might

1214
01:10:56,550 --> 01:11:01,440
make a mistake and instead of writing

1215
01:10:58,530 --> 01:11:03,330
system you write delete so really we

1216
01:11:01,440 --> 01:11:06,620
don't want to be fiddling with

1217
01:11:03,330 --> 01:11:10,309
production systems like that

1218
01:11:06,620 --> 01:11:12,280
because em I wake you up on a Monday

1219
01:11:10,310 --> 01:11:16,010
morning if you make a little mistake

1220
01:11:12,280 --> 01:11:19,700
so in order not to have to do that I

1221
01:11:16,010 --> 01:11:21,710
wrote the command console which is

1222
01:11:19,700 --> 01:11:24,500
basically an interface with the same

1223
01:11:21,710 --> 01:11:28,070
functionality that the packages the

1224
01:11:24,500 --> 01:11:31,910
administration packages give you but it

1225
01:11:28,070 --> 01:11:37,880
is very configurable and in a very

1226
01:11:31,910 --> 01:11:40,389
similar way as I was query so I'm going

1227
01:11:37,880 --> 01:11:43,700
to show you a couple of things now but

1228
01:11:40,390 --> 01:11:45,800
lastly I would like to mention that it

1229
01:11:43,700 --> 01:11:49,820
is highly important to always always

1230
01:11:45,800 --> 01:11:53,750
always emit metrics within your system

1231
01:11:49,820 --> 01:11:55,969
because usually when you have systems

1232
01:11:53,750 --> 01:11:58,250
that are scalable or when you have many

1233
01:11:55,970 --> 01:12:01,220
systems it is very important to know

1234
01:11:58,250 --> 01:12:03,380
what's going on and to be able to

1235
01:12:01,220 --> 01:12:05,450
identify patterns within your graphs

1236
01:12:03,380 --> 01:12:08,540
that give you information without having

1237
01:12:05,450 --> 01:12:11,840
to go in-depth into all the information

1238
01:12:08,540 --> 01:12:18,560
for example here we have a metric graph

1239
01:12:11,840 --> 01:12:20,180
that always control deploys by default

1240
01:12:18,560 --> 01:12:23,570
and you can figure it so that it's

1241
01:12:20,180 --> 01:12:25,880
that's generating it directly and I

1242
01:12:23,570 --> 01:12:29,420
think this is a capture of the same data

1243
01:12:25,880 --> 01:12:33,370
but for only 12 hours but here you can

1244
01:12:29,420 --> 01:12:37,610
see another snapshot for seven days and

1245
01:12:33,370 --> 01:12:39,830
here you can see there have been changes

1246
01:12:37,610 --> 01:12:43,130
to use that seeing really pattern so

1247
01:12:39,830 --> 01:12:46,340
this is just to mention it because

1248
01:12:43,130 --> 01:12:48,520
sometimes we didn't realize or because

1249
01:12:46,340 --> 01:12:52,700
big data generates a lot of information

1250
01:12:48,520 --> 01:12:56,450
stuff but sometimes just looking at this

1251
01:12:52,700 --> 01:12:58,519
graph the one at the bottom right you

1252
01:12:56,450 --> 01:13:00,380
see that there's a failure but you don't

1253
01:12:58,520 --> 01:13:02,960
know what's going on but this is going

1254
01:13:00,380 --> 01:13:05,540
to help you to see that on this day

1255
01:13:02,960 --> 01:13:07,370
between this and that time something has

1256
01:13:05,540 --> 01:13:08,540
happened and then you can locate it and

1257
01:13:07,370 --> 01:13:11,720
obviously you can see very interesting

1258
01:13:08,540 --> 01:13:14,720
things such as when the employees in

1259
01:13:11,720 --> 01:13:17,480
specific time zone go home and they stop

1260
01:13:14,720 --> 01:13:20,990
logging because they

1261
01:13:17,480 --> 01:13:24,349
shut down their computers and now I'm

1262
01:13:20,990 --> 01:13:30,469
going to show you the actual system of

1263
01:13:24,350 --> 01:13:35,360
us control which is the same one that

1264
01:13:30,470 --> 01:13:41,110
you have on github I still need to add a

1265
01:13:35,360 --> 01:13:45,559
couple of things so you have them log in

1266
01:13:41,110 --> 01:13:46,940
can you see it at the back yeah I'm

1267
01:13:45,560 --> 01:13:48,830
going to zoom in because someone is

1268
01:13:46,940 --> 01:13:55,339
saying that they can already see it so

1269
01:13:48,830 --> 01:13:58,400
so is it better now right um so

1270
01:13:55,340 --> 01:13:59,540
basically I was control and I've been

1271
01:13:58,400 --> 01:14:02,660
deploying it whilst we think there was

1272
01:13:59,540 --> 01:14:04,700
finishing his speech and I have lunch

1273
01:14:02,660 --> 01:14:08,059
there and I'm running it locally on this

1274
01:14:04,700 --> 01:14:10,580
machine and I have enrolled the actual

1275
01:14:08,060 --> 01:14:13,550
system directly within OS control so you

1276
01:14:10,580 --> 01:14:17,120
can see here the metadata that have been

1277
01:14:13,550 --> 01:14:19,520
stored in this system you can see the

1278
01:14:17,120 --> 01:14:21,620
rolling all the information that has

1279
01:14:19,520 --> 01:14:24,650
been sent the decorates is everything

1280
01:14:21,620 --> 01:14:27,710
that I have shown you as a fool we are

1281
01:14:24,650 --> 01:14:30,200
the status are being sent and the result

1282
01:14:27,710 --> 01:14:32,900
locks we are getting are those that

1283
01:14:30,200 --> 01:14:35,210
aren't configured here is what we

1284
01:14:32,900 --> 01:14:37,910
configure the information these flags

1285
01:14:35,210 --> 01:14:41,150
here are the intervals at which the

1286
01:14:37,910 --> 01:14:44,660
events for log configuration and queries

1287
01:14:41,150 --> 01:14:46,879
are being done queries is on demand and

1288
01:14:44,660 --> 01:14:48,889
here we have the configuration as I

1289
01:14:46,880 --> 01:14:52,090
showed you before options schedule

1290
01:14:48,890 --> 01:14:54,080
decorators it's a very simple

1291
01:14:52,090 --> 01:14:57,620
configuration this query is executed

1292
01:14:54,080 --> 01:15:02,000
every 60 minutes at 60 seconds and the

1293
01:14:57,620 --> 01:15:03,950
locks are sent every 600 seconds so

1294
01:15:02,000 --> 01:15:07,940
because I don't have it configured every

1295
01:15:03,950 --> 01:15:09,710
two minutes it is being sent now I want

1296
01:15:07,940 --> 01:15:15,200
to show you a couple of things now just

1297
01:15:09,710 --> 01:15:20,390
a second please see I'm going to put

1298
01:15:15,200 --> 01:15:23,900
this on 70 seconds now what happens now

1299
01:15:20,390 --> 01:15:28,730
I've saved it and the Machine I have

1300
01:15:23,900 --> 01:15:31,339
configured I have configured it through

1301
01:15:28,730 --> 01:15:35,009
this one-liner

1302
01:15:31,340 --> 01:15:39,449
I'm going to show you this is the script

1303
01:15:35,010 --> 01:15:43,199
that is generated dynamically this is

1304
01:15:39,449 --> 01:15:46,830
not going to come out because I've done

1305
01:15:43,199 --> 01:15:50,969
something for certificates because the

1306
01:15:46,830 --> 01:15:52,830
Weiss chrome gives me a lot of pain with

1307
01:15:50,969 --> 01:15:55,050
signed certificates now so this is the

1308
01:15:52,830 --> 01:16:07,159
local machine what she's seeing right

1309
01:15:55,050 --> 01:16:11,100
now just so you see that this script is

1310
01:16:07,159 --> 01:16:18,299
generated dynamically with the enrolling

1311
01:16:11,100 --> 01:16:21,389
secret which is a URL that you should

1312
01:16:18,300 --> 01:16:23,520
not be able to guess and then you can

1313
01:16:21,389 --> 01:16:26,300
also configure the system so that this

1314
01:16:23,520 --> 01:16:32,310
expires in a few I would say for example

1315
01:16:26,300 --> 01:16:35,520
you want to have this expire then it

1316
01:16:32,310 --> 01:16:38,090
wouldn't work see so the idea is that

1317
01:16:35,520 --> 01:16:42,210
those one-liners that are useful

1318
01:16:38,090 --> 01:16:43,560
enrolling machines on demand and I'm

1319
01:16:42,210 --> 01:16:45,360
going to show you how to do it I'm going

1320
01:16:43,560 --> 01:16:53,969
to lift a couple of virtual machines

1321
01:16:45,360 --> 01:16:56,540
with different Linux flavours you can

1322
01:16:53,969 --> 01:17:01,280
see everything that I'm getting here

1323
01:16:56,540 --> 01:17:01,280
these are be grandma Sheen's by the way

1324
01:17:03,889 --> 01:17:11,300
so I'm just going well I'm logged in as

1325
01:17:08,369 --> 01:17:15,269
administrators and I have access to

1326
01:17:11,300 --> 01:17:19,639
everything to do with administration I'm

1327
01:17:15,270 --> 01:17:19,639
going to make a couple of changes here

1328
01:17:28,630 --> 01:17:38,350
right I'm going to refresh the

1329
01:17:33,580 --> 01:17:40,420
environments to sixty seconds and year

1330
01:17:38,350 --> 01:17:43,719
to sixty as well what I'm doing right

1331
01:17:40,420 --> 01:17:47,710
now is to be able to show you the back

1332
01:17:43,719 --> 01:17:51,400
mode because I have a pseudo cachet

1333
01:17:47,710 --> 01:17:57,580
I haven't finished implementing rid is

1334
01:17:51,400 --> 01:18:00,129
so I have this right now so I have

1335
01:17:57,580 --> 01:18:01,870
changed the flags in this machine but

1336
01:18:00,130 --> 01:18:05,590
the flax that I have for this service

1337
01:18:01,870 --> 01:18:07,780
that was pre-configured are the flax I

1338
01:18:05,590 --> 01:18:12,670
had before but now I want them to be

1339
01:18:07,780 --> 01:18:15,370
faster so I have the 360 and 600 here

1340
01:18:12,670 --> 01:18:19,570
because this is a local file I will have

1341
01:18:15,370 --> 01:18:22,239
to use them one liner to change it so I

1342
01:18:19,570 --> 01:18:25,360
activate the command the commander shell

1343
01:18:22,239 --> 01:18:28,360
by the way it works on every Linux Mac

1344
01:18:25,360 --> 01:18:30,370
and I have another one that is generated

1345
01:18:28,360 --> 01:18:36,870
full-powered shell as well to enroll

1346
01:18:30,370 --> 01:18:40,320
Windows systems so we execute this here

1347
01:18:36,870 --> 01:18:45,250
and now we have an updated configuration

1348
01:18:40,320 --> 01:18:47,980
and you can see we have 17 13 and so on

1349
01:18:45,250 --> 01:18:51,489
so now the machine has an accelerated

1350
01:18:47,980 --> 01:18:53,888
configuration now and we're going to

1351
01:18:51,489 --> 01:19:02,530
show you is we're going to enroll more

1352
01:18:53,889 --> 01:19:07,929
machines I'm going to enroll a couple

1353
01:19:02,530 --> 01:19:10,780
more machines as I was saying so you can

1354
01:19:07,929 --> 01:19:14,710
see I am actually creating because I

1355
01:19:10,780 --> 01:19:18,849
have a concept within the system that I

1356
01:19:14,710 --> 01:19:20,560
call environment so say for example I

1357
01:19:18,850 --> 01:19:22,900
have an environment which is the

1358
01:19:20,560 --> 01:19:25,389
development environment and you can also

1359
01:19:22,900 --> 01:19:28,330
see the notes by platform by the way say

1360
01:19:25,389 --> 01:19:30,880
for example you are developing a master

1361
01:19:28,330 --> 01:19:32,380
you have a virtual machine there is some

1362
01:19:30,880 --> 01:19:35,440
gold in this environment

1363
01:19:32,380 --> 01:19:38,380
so how would could I create a new

1364
01:19:35,440 --> 01:19:41,699
environment now you would go here to

1365
01:19:38,380 --> 01:19:41,699
environment management

1366
01:19:42,120 --> 01:19:51,219
and you going to call Yoon environment

1367
01:19:45,610 --> 01:19:56,920
cyber camp hostname it's 10.10 tot 10.5

1368
01:19:51,219 --> 01:19:59,670
this is my machines IP and this is a

1369
01:19:56,920 --> 01:20:05,320
font Eisen

1370
01:19:59,670 --> 01:20:07,600
this is from for these CFCs I've chosen

1371
01:20:05,320 --> 01:20:10,929
this type because I'm working on an

1372
01:20:07,600 --> 01:20:14,200
standard agent which does not make me to

1373
01:20:10,930 --> 01:20:18,250
run it as I was query so say for example

1374
01:20:14,200 --> 01:20:20,980
in an IOT environment because it's a

1375
01:20:18,250 --> 01:20:22,540
smaller architecture or something with

1376
01:20:20,980 --> 01:20:25,120
limitations we're always query is not

1377
01:20:22,540 --> 01:20:28,210
complete that for one could not run then

1378
01:20:25,120 --> 01:20:32,230
I am working on a standard agent that

1379
01:20:28,210 --> 01:20:34,690
talks to OS control without needing to

1380
01:20:32,230 --> 01:20:37,269
use OS query so this is like an

1381
01:20:34,690 --> 01:20:41,860
abstraction of OS query it's a sea to

1382
01:20:37,270 --> 01:20:46,620
for production systems so we would do is

1383
01:20:41,860 --> 01:20:48,759
create the cyber camp environment and

1384
01:20:46,620 --> 01:20:50,650
take into account the way you three and

1385
01:20:48,760 --> 01:20:53,469
create your environment if you didn't

1386
01:20:50,650 --> 01:20:56,980
create it with the come command console

1387
01:20:53,469 --> 01:20:58,810
you would get the flags generated but

1388
01:20:56,980 --> 01:21:00,849
you would not get the certificate

1389
01:20:58,810 --> 01:21:03,610
generated so what we're going to do is

1390
01:21:00,850 --> 01:21:06,670
we're going to copy their certificate

1391
01:21:03,610 --> 01:21:10,210
from the one we have already created

1392
01:21:06,670 --> 01:21:13,150
which is the auto signed certificate and

1393
01:21:10,210 --> 01:21:15,250
what we're going to do is say okay use

1394
01:21:13,150 --> 01:21:18,940
the same certificates of Eros query can

1395
01:21:15,250 --> 01:21:19,750
talk to the server so I will just copy

1396
01:21:18,940 --> 01:21:24,009
right here

1397
01:21:19,750 --> 01:21:28,450
upload and there we have the certificate

1398
01:21:24,010 --> 01:21:33,210
configured so we've got the flags we're

1399
01:21:28,450 --> 01:21:34,510
going to reactivate the enrolling

1400
01:21:33,210 --> 01:21:36,910
commands

1401
01:21:34,510 --> 01:21:39,700
we've got machines running in the cyber

1402
01:21:36,910 --> 01:21:42,760
camp environment and now we're going to

1403
01:21:39,700 --> 01:21:47,050
activate these machines so we launch

1404
01:21:42,760 --> 01:21:49,900
bears and what's happening right now is

1405
01:21:47,050 --> 01:21:52,239
that enrolling has detected that OS

1406
01:21:49,900 --> 01:21:53,869
query is not installed it's going to

1407
01:21:52,239 --> 01:21:57,919
install it for the platform you

1408
01:21:53,869 --> 01:22:00,619
select it now it could be awake so it

1409
01:21:57,919 --> 01:22:05,719
could be windows it's lifting the cervix

1410
01:22:00,619 --> 01:22:08,478
right now and if you go back to the

1411
01:22:05,719 --> 01:22:12,709
environment you can see that this is the

1412
01:22:08,479 --> 01:22:15,590
machine that we've just enrolled we've

1413
01:22:12,709 --> 01:22:18,260
enrolled it 13 seconds ago it still

1414
01:22:15,590 --> 01:22:20,539
doesn't have any status only the

1415
01:22:18,260 --> 01:22:22,969
configuration because we had inputted it

1416
01:22:20,539 --> 01:22:25,759
at the beginning so you can see how easy

1417
01:22:22,969 --> 01:22:27,889
it is to add machines that are running

1418
01:22:25,760 --> 01:22:31,059
with OS query and now we're going to do

1419
01:22:27,889 --> 01:22:36,469
the same with all these other machines

1420
01:22:31,059 --> 01:22:44,689
which is follow the same process yes

1421
01:22:36,469 --> 01:22:47,179
there is a question yeah this is

1422
01:22:44,689 --> 01:22:50,689
configured so you can use the endpoint

1423
01:22:47,179 --> 01:22:53,419
TLS that you're running in this case I

1424
01:22:50,689 --> 01:22:56,449
have local machines and what they're

1425
01:22:53,419 --> 01:23:02,539
doing is sending loves to oh s control

1426
01:22:56,449 --> 01:23:09,549
which is running on my laptop so we're

1427
01:23:02,539 --> 01:23:12,169
going in to add here all the others and

1428
01:23:09,550 --> 01:23:14,179
basically what we're doing right now

1429
01:23:12,169 --> 01:23:16,280
I've got different machines and we're

1430
01:23:14,179 --> 01:23:18,050
going to see because I've launched the

1431
01:23:16,280 --> 01:23:22,389
service so now we'll see different

1432
01:23:18,050 --> 01:23:29,570
machines see a red hat red hat -

1433
01:23:22,389 --> 01:23:33,550
Ubuntu's and 2:18 this is a trusting 14

1434
01:23:29,570 --> 01:23:36,889
and this is a CentOS I think seven well

1435
01:23:33,550 --> 01:23:38,749
so what's happening right now is that

1436
01:23:36,889 --> 01:23:41,030
these systems are receiving the

1437
01:23:38,749 --> 01:23:43,179
configuration wouldn't have a status log

1438
01:23:41,030 --> 01:23:46,129
because the machine has just been

1439
01:23:43,179 --> 01:23:50,929
enrolled so it hasn't sent anything yet

1440
01:23:46,129 --> 01:23:53,179
so you don't have results yet because

1441
01:23:50,929 --> 01:23:55,909
you haven't received these results and

1442
01:23:53,179 --> 01:24:00,559
we have the locks configured for every

1443
01:23:55,909 --> 01:24:02,719
60 seconds we're going to was still this

1444
01:24:00,559 --> 01:24:04,159
is still this has only been there for 45

1445
01:24:02,719 --> 01:24:07,159
seconds so we're going to wait a bit

1446
01:24:04,159 --> 01:24:07,580
longer to see how this status logs are

1447
01:24:07,159 --> 01:24:09,200
going

1448
01:24:07,580 --> 01:24:11,660
come in because always query is

1449
01:24:09,200 --> 01:24:14,269
gathering them and sending them at the

1450
01:24:11,660 --> 01:24:15,950
intervals that we have configured it for

1451
01:24:14,270 --> 01:24:19,070
and then you can configure them

1452
01:24:15,950 --> 01:24:21,559
scheduled queries that are going to be

1453
01:24:19,070 --> 01:24:25,639
sent depending on the interval that you

1454
01:24:21,560 --> 01:24:30,950
have chosen for the flags I think the

1455
01:24:25,640 --> 01:24:32,450
default configurations that I use are

1456
01:24:30,950 --> 01:24:35,240
these values because I have already

1457
01:24:32,450 --> 01:24:39,370
tested them and they work well so what

1458
01:24:35,240 --> 01:24:41,920
I'm going to do is I'm going to update

1459
01:24:39,370 --> 01:24:45,190
sorry I made a little mistake as them

1460
01:24:41,920 --> 01:24:50,240
it's going to take a bit longer now but

1461
01:24:45,190 --> 01:24:53,900
this is what I'm doing right now which

1462
01:24:50,240 --> 01:25:00,349
is basically updating the flash file and

1463
01:24:53,900 --> 01:25:02,120
now we should have visit light and we

1464
01:25:00,350 --> 01:25:05,750
can have all the locks so you can see we

1465
01:25:02,120 --> 01:25:08,360
have a status here so it is sending us

1466
01:25:05,750 --> 01:25:10,130
query logs to the distributed system and

1467
01:25:08,360 --> 01:25:12,049
the logs are giving you warnings and

1468
01:25:10,130 --> 01:25:15,050
everything so you see that there is an

1469
01:25:12,050 --> 01:25:18,200
issue and you can detect it so OS

1470
01:25:15,050 --> 01:25:22,250
control installs by default the logs

1471
01:25:18,200 --> 01:25:24,110
that go to the local database if you

1472
01:25:22,250 --> 01:25:26,210
have many machines this is not a good

1473
01:25:24,110 --> 01:25:28,519
idea because you would have to contact

1474
01:25:26,210 --> 01:25:30,350
all the locks because it would generate

1475
01:25:28,520 --> 01:25:33,110
a lot of information so what I would

1476
01:25:30,350 --> 01:25:35,420
recommend is well actually something

1477
01:25:33,110 --> 01:25:38,870
that I'm working on right now is for

1478
01:25:35,420 --> 01:25:41,480
this to show only the last 24 hours or

1479
01:25:38,870 --> 01:25:43,070
48 hours depending on what you choose of

1480
01:25:41,480 --> 01:25:45,740
the logs that are locally

1481
01:25:43,070 --> 01:25:47,690
being stored so that you can have

1482
01:25:45,740 --> 01:25:50,750
everything that's been going on this is

1483
01:25:47,690 --> 01:25:53,509
only showing the last six hours of logs

1484
01:25:50,750 --> 01:25:55,520
but if you need to look at further

1485
01:25:53,510 --> 01:25:58,310
information then depending on the log

1486
01:25:55,520 --> 01:26:03,020
then you have configured beard gray log

1487
01:25:58,310 --> 01:26:07,280
kafka elasticsearch or whatever then you

1488
01:26:03,020 --> 01:26:11,750
would get the data now what else can I

1489
01:26:07,280 --> 01:26:13,400
show you well if you see here no locks

1490
01:26:11,750 --> 01:26:15,470
have been sent because I don't have any

1491
01:26:13,400 --> 01:26:18,379
queries configured so I'm going to

1492
01:26:15,470 --> 01:26:19,760
configure something I'm just going to

1493
01:26:18,380 --> 01:26:22,900
just change something here so I don't

1494
01:26:19,760 --> 01:26:22,900
have to write after work

1495
01:26:29,530 --> 01:26:34,190
and see that you'd have to check that

1496
01:26:32,300 --> 01:26:37,010
JSON is valid because if you make a

1497
01:26:34,190 --> 01:26:40,659
mistake here then the configuration is

1498
01:26:37,010 --> 01:26:42,980
going it's not going to work

1499
01:26:40,659 --> 01:26:47,449
the machine configuration and then you

1500
01:26:42,980 --> 01:26:50,718
will have to go back now so we have set

1501
01:26:47,449 --> 01:26:53,199
it to 60 seconds if the JSON is not

1502
01:26:50,719 --> 01:26:57,800
valid then it tells you that there's a

1503
01:26:53,199 --> 01:27:01,940
failure let's ask another query let's

1504
01:26:57,800 --> 01:27:04,489
send a system info query so what I want

1505
01:27:01,940 --> 01:27:06,469
to do is when I stole this here

1506
01:27:04,489 --> 01:27:08,750
this makes the change and because this

1507
01:27:06,469 --> 01:27:10,579
sends it to every client next time they

1508
01:27:08,750 --> 01:27:14,420
check in which I think it has been

1509
01:27:10,579 --> 01:27:16,159
configured to 30 seconds so this is

1510
01:27:14,420 --> 01:27:19,429
going to start sending information about

1511
01:27:16,159 --> 01:27:23,480
status as you can see publisher etc and

1512
01:27:19,429 --> 01:27:26,090
you can start seeing the results this is

1513
01:27:23,480 --> 01:27:29,239
going to refresh every 60 seconds by

1514
01:27:26,090 --> 01:27:32,270
default so we're going to start getting

1515
01:27:29,239 --> 01:27:35,209
the source for the scheduled query which

1516
01:27:32,270 --> 01:27:38,780
is every 60 seconds with an S play of

1517
01:27:35,210 --> 01:27:41,570
zero and so every 60 seconds we're going

1518
01:27:38,780 --> 01:27:44,420
to get that information and otherwise we

1519
01:27:41,570 --> 01:27:46,460
could get 60 plus the interval so we're

1520
01:27:44,420 --> 01:27:48,500
going to be able to see it in a little

1521
01:27:46,460 --> 01:27:51,139
while so this is more or less what I

1522
01:27:48,500 --> 01:27:56,389
wanted to show you now for example on

1523
01:27:51,139 --> 01:28:05,929
demand queries say you want to check on

1524
01:27:56,389 --> 01:28:09,829
Debian nine you want to see CPUs info

1525
01:28:05,929 --> 01:28:11,949
either to host select info and in this

1526
01:28:09,829 --> 01:28:15,230
way you would have an on-demand query

1527
01:28:11,949 --> 01:28:17,719
configured the query is active progress

1528
01:28:15,230 --> 01:28:20,919
means that it has been programmed and

1529
01:28:17,719 --> 01:28:20,920
hasn't been sent yet

1530
01:28:22,130 --> 01:28:27,230
so because it was created 13 seconds ago

1531
01:28:24,980 --> 01:28:32,599
as you can see here so the on the query

1532
01:28:27,230 --> 01:28:33,980
on demand sends the information every 60

1533
01:28:32,600 --> 01:28:36,500
seconds I think is the configuration

1534
01:28:33,980 --> 01:28:41,750
that we have so we'll all be able to see

1535
01:28:36,500 --> 01:28:46,970
it very shortly we can also have a file

1536
01:28:41,750 --> 01:28:50,270
say for example you want to get the /tc

1537
01:28:46,970 --> 01:28:56,000
for what slash password for this machine

1538
01:28:50,270 --> 01:28:59,600
as you go environment platform ID so I

1539
01:28:56,000 --> 01:29:05,060
want to get that information now this

1540
01:28:59,600 --> 01:29:08,330
has been completed we can see that the

1541
01:29:05,060 --> 01:29:11,420
file has been carved that we can see the

1542
01:29:08,330 --> 01:29:14,300
ID the different blocks because you can

1543
01:29:11,420 --> 01:29:16,310
configure it according to the size the

1544
01:29:14,300 --> 01:29:18,980
for the blocks that you want what kind

1545
01:29:16,310 --> 01:29:22,850
of block you one and then you say please

1546
01:29:18,980 --> 01:29:25,209
download the file here you go onto the

1547
01:29:22,850 --> 01:29:25,210
command

1548
01:29:33,850 --> 01:29:40,690
this was can't files theme file here it

1549
01:29:38,480 --> 01:29:40,690
is

1550
01:29:42,179 --> 01:29:48,060
which is going to move this here so that

1551
01:29:46,409 --> 01:30:02,339
it doesn't destroy everything that I've

1552
01:29:48,060 --> 01:30:12,510
been doing so now we're they're doing a

1553
01:30:02,340 --> 01:30:15,150
tar it's carved files so this is the

1554
01:30:12,510 --> 01:30:19,350
machine password so it's very powerful

1555
01:30:15,150 --> 01:30:28,230
and all the computers that you have in

1556
01:30:19,350 --> 01:30:34,440
the system in two minutes I've shown you

1557
01:30:28,230 --> 01:30:37,259
how it works how OS control works maybe

1558
01:30:34,440 --> 01:30:42,360
I can show you a couple more things for

1559
01:30:37,260 --> 01:30:45,060
advanced users the components they have

1560
01:30:42,360 --> 01:30:49,409
a TLS endpoint the metrics the backend

1561
01:30:45,060 --> 01:30:51,750
and so on so the next component which is

1562
01:30:49,409 --> 01:30:54,989
in the repository and I've tested but I

1563
01:30:51,750 --> 01:31:01,260
haven't documented it is the AFI for OS

1564
01:30:54,989 --> 01:31:03,570
control it allows you to expose all the

1565
01:31:01,260 --> 01:31:07,380
data in the administration controls but

1566
01:31:03,570 --> 01:31:10,199
from an API so what I was looking for

1567
01:31:07,380 --> 01:31:12,330
with this component you can do it to

1568
01:31:10,199 --> 01:31:15,500
integrate it so that you don't have to

1569
01:31:12,330 --> 01:31:15,500
do this more than once

1570
01:31:15,620 --> 01:31:21,449
so the administration I've got in

1571
01:31:18,630 --> 01:31:25,650
westeros I could link it to an interface

1572
01:31:21,449 --> 01:31:30,750
or another active component to take the

1573
01:31:25,650 --> 01:31:33,210
information from the API and I could

1574
01:31:30,750 --> 01:31:35,790
even have communication with a back-end

1575
01:31:33,210 --> 01:31:39,750
using WebSocket and this would be even

1576
01:31:35,790 --> 01:31:43,019
faster information but one of the reason

1577
01:31:39,750 --> 01:31:45,270
for the API is for the relationship that

1578
01:31:43,020 --> 01:31:48,090
it has with other projects in this case

1579
01:31:45,270 --> 01:31:51,570
it's go query it was liberated a couple

1580
01:31:48,090 --> 01:31:54,719
of weeks ago what it does is to

1581
01:31:51,570 --> 01:31:55,659
implement a distributed sale using OS

1582
01:31:54,719 --> 01:32:01,570
query

1583
01:31:55,659 --> 01:32:02,679
through an API it also uses another

1584
01:32:01,570 --> 01:32:04,690
couple of things that have not been

1585
01:32:02,679 --> 01:32:08,440
documented which is an accelerated

1586
01:32:04,690 --> 01:32:11,019
system and so on if you're using an OS

1587
01:32:08,440 --> 01:32:14,500
query in a specific way you increase the

1588
01:32:11,020 --> 01:32:17,920
interval so instead of it being being

1589
01:32:14,500 --> 01:32:22,469
the seconds that you've configured then

1590
01:32:17,920 --> 01:32:24,670
it's a shorter interval this hasn't been

1591
01:32:22,469 --> 01:32:29,530
documented but it's very good for

1592
01:32:24,670 --> 01:32:36,070
research purposes so a couple of things

1593
01:32:29,530 --> 01:32:38,110
I wanted to show you one important thing

1594
01:32:36,070 --> 01:32:42,420
is that if you're going to use it if

1595
01:32:38,110 --> 01:32:46,900
you're going to use query or OS control

1596
01:32:42,420 --> 01:32:49,239
feedback test issues what if you're

1597
01:32:46,900 --> 01:32:52,629
interested in everything is well we

1598
01:32:49,239 --> 01:32:55,750
welcome everything there's one for OS

1599
01:32:52,630 --> 01:32:59,610
query one for OS control you can go into

1600
01:32:55,750 --> 01:33:02,620
those logs and I write things in there

1601
01:32:59,610 --> 01:33:05,589
I've got a couple of friends who use I

1602
01:33:02,620 --> 01:33:07,389
was controlling in their businesses and

1603
01:33:05,590 --> 01:33:09,790
they add information in there when

1604
01:33:07,389 --> 01:33:12,880
things are going well or so on so

1605
01:33:09,790 --> 01:33:18,010
feedback is always important and useful

1606
01:33:12,880 --> 01:33:20,500
you can use a Twitter and please do get

1607
01:33:18,010 --> 01:33:23,020
in touch with me now I've just got a few

1608
01:33:20,500 --> 01:33:28,929
minutes left I'd like to show you

1609
01:33:23,020 --> 01:33:32,350
advanced across OS query use so if you

1610
01:33:28,929 --> 01:33:35,889
now know how to use OS query and you

1611
01:33:32,350 --> 01:33:39,790
know how to use your TLS endpoint what's

1612
01:33:35,889 --> 01:33:45,179
the next step you could use OS querier

1613
01:33:39,790 --> 01:33:47,650
to detect archives perhaps you have

1614
01:33:45,179 --> 01:33:50,110
confidential files and you want to know

1615
01:33:47,650 --> 01:33:53,138
when somebody is using them you can use

1616
01:33:50,110 --> 01:33:56,769
os query for that I can show it to you

1617
01:33:53,139 --> 01:34:08,349
quickly I already have a configuration

1618
01:33:56,770 --> 01:34:15,699
here for OS query I use file events

1619
01:34:08,349 --> 01:34:18,520
through the IP ape API and it returns

1620
01:34:15,699 --> 01:34:23,409
the data to you I'm going to configure

1621
01:34:18,520 --> 01:34:26,770
this through OS control and you'll see

1622
01:34:23,409 --> 01:34:31,570
how powerful it can be for monitoring

1623
01:34:26,770 --> 01:34:33,489
purposes I'll show you a case first you

1624
01:34:31,570 --> 01:34:38,170
have if you have a docker container for

1625
01:34:33,489 --> 01:34:42,040
example in which you have files and

1626
01:34:38,170 --> 01:34:43,989
where the database is configured and you

1627
01:34:42,040 --> 01:34:46,000
have some credentials that you don't

1628
01:34:43,989 --> 01:34:52,290
want to filter so in this particular

1629
01:34:46,000 --> 01:34:52,290
case I'm going to show you some queries

1630
01:34:52,920 --> 01:35:01,929
so this is the query that I sent to the

1631
01:34:55,810 --> 01:35:06,550
machine so in the last ten minutes we're

1632
01:35:01,929 --> 01:35:13,840
going to do a little test with the file

1633
01:35:06,550 --> 01:35:17,020
interval here we can configure a table

1634
01:35:13,840 --> 01:35:20,230
events a table of events is advanced

1635
01:35:17,020 --> 01:35:21,880
users because it's very complex but I'm

1636
01:35:20,230 --> 01:35:25,949
just going to show you how powerful it

1637
01:35:21,880 --> 01:35:31,840
is it takes the information from the

1638
01:35:25,949 --> 01:35:34,839
file events and ship it determines the

1639
01:35:31,840 --> 01:35:39,550
routes that I want to monitor it can be

1640
01:35:34,840 --> 01:35:42,010
binary our files or you or beam or s

1641
01:35:39,550 --> 01:35:43,980
been and you want to go in and have a

1642
01:35:42,010 --> 01:35:46,690
look what has been going on there for

1643
01:35:43,980 --> 01:35:48,070
example you'll be the demo cyber camp in

1644
01:35:46,690 --> 01:35:52,809
this particular case because I want to

1645
01:35:48,070 --> 01:35:55,650
show you an example in this particular

1646
01:35:52,810 --> 01:35:59,320
case we're talking about OS control

1647
01:35:55,650 --> 01:36:01,750
because we're talking about machine

1648
01:35:59,320 --> 01:36:05,320
development but basics all about looking

1649
01:36:01,750 --> 01:36:11,079
at how powerful this function is on OS

1650
01:36:05,320 --> 01:36:12,639
control I want s query so this is an OS

1651
01:36:11,079 --> 01:36:16,559
query is not sorry

1652
01:36:12,639 --> 01:36:16,560
OS control machine

1653
01:36:18,109 --> 01:36:21,919
so the configuration was set up eight

1654
01:36:20,599 --> 01:36:24,559
seconds so it probably hasn't had a

1655
01:36:21,919 --> 01:36:27,139
chance to do anything yet so it probably

1656
01:36:24,559 --> 01:36:29,749
has configured for every 30 seconds so

1657
01:36:27,139 --> 01:36:33,739
let's just wait a moment until the

1658
01:36:29,749 --> 01:36:38,659
configuration has been loaded we'll see

1659
01:36:33,739 --> 01:36:41,178
when it is loaded when we see an event

1660
01:36:38,659 --> 01:36:43,098
when an event has been activated when

1661
01:36:41,179 --> 01:36:48,679
the file events have been activated

1662
01:36:43,099 --> 01:36:55,149
and this will give you an alert on the

1663
01:36:48,679 --> 01:37:01,639
status logs it will receive the

1664
01:36:55,149 --> 01:37:07,639
configuration let's see if the

1665
01:37:01,639 --> 01:37:09,889
configuration has actually been sent so

1666
01:37:07,639 --> 01:37:17,320
the logs won't be sent until another 60

1667
01:37:09,889 --> 01:37:20,959
seconds it's received uptime uptime and

1668
01:37:17,320 --> 01:37:22,679
accelerated in 30 seconds and here we

1669
01:37:20,959 --> 01:37:25,818
have a little bit of extra information

1670
01:37:22,680 --> 01:37:25,819
[Music]

1671
01:37:28,149 --> 01:37:33,019
here you have a number of options here

1672
01:37:31,459 --> 01:37:34,729
we just have one machine that's being

1673
01:37:33,019 --> 01:37:38,089
configurated so it's going to get send

1674
01:37:34,729 --> 01:37:43,609
you the alert but when you use events

1675
01:37:38,089 --> 01:37:47,389
then you're going to get rid of events

1676
01:37:43,609 --> 01:37:48,919
that have expired because events expire

1677
01:37:47,389 --> 01:37:51,409
automatically otherwise you'll have many

1678
01:37:48,919 --> 01:37:53,059
many events over time so you need to

1679
01:37:51,409 --> 01:37:55,159
know when you're extracting those logs

1680
01:37:53,059 --> 01:37:56,899
and if you're going to consult do a

1681
01:37:55,159 --> 01:37:58,549
query with many different logs you may

1682
01:37:56,899 --> 01:38:01,189
get a lot of different events so you

1683
01:37:58,550 --> 01:38:05,169
have to keep that in mind let me show

1684
01:38:01,189 --> 01:38:09,800
you then how this works in terms of the

1685
01:38:05,169 --> 01:38:15,648
events and event files for monitoring

1686
01:38:09,800 --> 01:38:19,219
purposes the file we're monitoring is

1687
01:38:15,649 --> 01:38:23,809
the file with the credentials for the

1688
01:38:19,219 --> 01:38:27,379
database the control database you may

1689
01:38:23,809 --> 01:38:29,510
have credentials that nobody can use

1690
01:38:27,379 --> 01:38:31,710
because you want a safe storage system

1691
01:38:29,510 --> 01:38:40,410
and you want to know if an engineer

1692
01:38:31,710 --> 01:38:47,330
accessing that so it's /opt /oc control

1693
01:38:40,410 --> 01:38:51,120
splash config slash DB json this is the

1694
01:38:47,330 --> 01:38:53,420
configuration of the database and we

1695
01:38:51,120 --> 01:38:55,530
need the configuration of the system

1696
01:38:53,420 --> 01:38:58,410
there might be system that can only be

1697
01:38:55,530 --> 01:39:01,050
accessed by a given machine it depends

1698
01:38:58,410 --> 01:39:03,750
on your protocols and your policies in

1699
01:39:01,050 --> 01:39:10,020
terms of permission to access the

1700
01:39:03,750 --> 01:39:17,910
production systems we have done the C 80

1701
01:39:10,020 --> 01:39:20,760
we've accessed the fire and since we

1702
01:39:17,910 --> 01:39:23,790
have the events configured so we can

1703
01:39:20,760 --> 01:39:29,880
detect accesses to those files the next

1704
01:39:23,790 --> 01:39:34,950
time os query sends data if everything

1705
01:39:29,880 --> 01:39:38,580
works properly and things go well here

1706
01:39:34,950 --> 01:39:44,429
this afternoon then we will see that

1707
01:39:38,580 --> 01:39:50,120
access to that file by a user and we can

1708
01:39:44,430 --> 01:39:50,120
see how that comes up within the results

1709
01:39:53,720 --> 01:40:03,270
so it says he have 15 seconds no it's

1710
01:39:58,470 --> 01:40:05,870
not looking good it said last result

1711
01:40:03,270 --> 01:40:05,870
three minutes ago

1712
01:40:10,590 --> 01:40:17,970
again it says 30 seconds here this is

1713
01:40:16,320 --> 01:40:30,210
the trouble with the demos when you're

1714
01:40:17,970 --> 01:40:36,780
doing live demos it's executed the file

1715
01:40:30,210 --> 01:40:40,100
events just 40 seconds ago let's see if

1716
01:40:36,780 --> 01:40:40,099
the expiring is very short

1717
01:40:43,310 --> 01:40:54,720
we don't have results but I don't know

1718
01:40:45,540 --> 01:41:02,580
why let me have a look I think I know

1719
01:40:54,720 --> 01:41:06,570
what has gone on we have a log in the

1720
01:41:02,580 --> 01:41:09,440
storage for logs and that was what was

1721
01:41:06,570 --> 01:41:09,440
causing us some trouble

1722
01:41:19,650 --> 01:41:24,599
so let's cheat here a little bit

1723
01:41:42,440 --> 01:41:49,919
one tower we've lifted the service we

1724
01:41:47,130 --> 01:41:52,860
should be able to see it here we should

1725
01:41:49,920 --> 01:41:55,160
see that has restarted in the status

1726
01:41:52,860 --> 01:42:01,950
logs let's have a look at the results we

1727
01:41:55,160 --> 01:42:04,290
have the status and the results log we

1728
01:42:01,950 --> 01:42:13,950
have the machine that is sending the

1729
01:42:04,290 --> 01:42:16,310
logs let me see if I can work out what's

1730
01:42:13,950 --> 01:42:16,309
going on

1731
01:42:25,620 --> 01:42:35,910
what I'm afraid the demonstration didn't

1732
01:42:32,110 --> 01:42:35,910
work as I would have liked it to

1733
01:42:42,119 --> 01:42:52,320
I thinks it's doing event expiry and are

1734
01:42:47,730 --> 01:42:55,949
going to remove that so that it does not

1735
01:42:52,320 --> 01:43:03,030
remove them it's set up for 30 seconds

1736
01:42:55,949 --> 01:43:04,230
here that's fine let's let it

1737
01:43:03,030 --> 01:43:05,580
configure and I'll continue with the

1738
01:43:04,230 --> 01:43:11,040
presentation then we'll come back to

1739
01:43:05,580 --> 01:43:15,090
this okay yes now we have it we've sent

1740
01:43:11,040 --> 01:43:18,480
it a few times so perhaps actually it

1741
01:43:15,090 --> 01:43:24,150
got a bit stuck there so here you can

1742
01:43:18,480 --> 01:43:27,419
see the events from the events file with

1743
01:43:24,150 --> 01:43:30,659
the category that we put in the TAF the

1744
01:43:27,420 --> 01:43:37,980
path that we put in and the a time the C

1745
01:43:30,659 --> 01:43:42,719
time and so on so now we have a large

1746
01:43:37,980 --> 01:43:47,400
number of events I didn't realize that

1747
01:43:42,719 --> 01:43:51,929
they had the event expire one there and

1748
01:43:47,400 --> 01:43:55,320
when the event expiry is in one each

1749
01:43:51,929 --> 01:43:58,139
time there is a query to the table

1750
01:43:55,320 --> 01:44:02,070
events it expires everything that has

1751
01:43:58,139 --> 01:44:04,920
been stored so this is why the intervals

1752
01:44:02,070 --> 01:44:07,019
are important because if the log hasn't

1753
01:44:04,920 --> 01:44:09,270
been sent it's going to go into expiry

1754
01:44:07,020 --> 01:44:14,400
and you'll get rid of that so this is

1755
01:44:09,270 --> 01:44:15,900
why this part is important so it's

1756
01:44:14,400 --> 01:44:23,820
important to see when somebody has

1757
01:44:15,900 --> 01:44:26,098
accessed a file that's the point I can't

1758
01:44:23,820 --> 01:44:31,849
go into other details of advanced os

1759
01:44:26,099 --> 01:44:34,980
query we have file integrity monitoring

1760
01:44:31,849 --> 01:44:39,540
writing I've showed you the

1761
01:44:34,980 --> 01:44:42,750
configuration I suggest to that you play

1762
01:44:39,540 --> 01:44:45,360
with this a little bit using a machine

1763
01:44:42,750 --> 01:44:49,050
that you can do that with because it

1764
01:44:45,360 --> 01:44:51,730
does generate a lot of information so I

1765
01:44:49,050 --> 01:44:55,900
only use the advanced users in

1766
01:44:51,730 --> 01:45:01,959
certain situations unless you have a

1767
01:44:55,900 --> 01:45:04,839
small tier of machines then actually

1768
01:45:01,960 --> 01:45:07,530
before you play around with events you

1769
01:45:04,840 --> 01:45:09,760
need to have a lot of agility and doing

1770
01:45:07,530 --> 01:45:15,309
configurations and vents but you can as

1771
01:45:09,760 --> 01:45:19,390
you can see it's very powerful tool here

1772
01:45:15,310 --> 01:45:21,600
we have the query wiki and there's a lot

1773
01:45:19,390 --> 01:45:27,520
of documentation there it's very useful

1774
01:45:21,600 --> 01:45:31,870
and the same for your rules you can use

1775
01:45:27,520 --> 01:45:35,739
os query to do searches in certain paths

1776
01:45:31,870 --> 01:45:42,309
for your rules it can be a malicious

1777
01:45:35,739 --> 01:45:46,540
binary or indicator that of an attack or

1778
01:45:42,310 --> 01:45:48,880
similar you can have her table events

1779
01:45:46,540 --> 01:45:53,920
and use them a little bit carefully as I

1780
01:45:48,880 --> 01:45:59,400
was saying and os query extensions you

1781
01:45:53,920 --> 01:46:04,000
can extend the configuration of OS query

1782
01:45:59,400 --> 01:46:06,820
if you just have a information from a

1783
01:46:04,000 --> 01:46:08,290
thrift handler then you can access

1784
01:46:06,820 --> 01:46:10,719
information from tables that your

1785
01:46:08,290 --> 01:46:14,950
interest in it's a very powerful tool

1786
01:46:10,720 --> 01:46:18,760
but it needs to have performance as

1787
01:46:14,950 --> 01:46:20,470
their priority so you might cause a bit

1788
01:46:18,760 --> 01:46:23,489
of a bottleneck depending on the

1789
01:46:20,470 --> 01:46:26,650
information that you're dealing with

1790
01:46:23,489 --> 01:46:30,250
each extension is executed in a

1791
01:46:26,650 --> 01:46:34,089
different process it's simple to create

1792
01:46:30,250 --> 01:46:37,540
the extension and you can extend iOS

1793
01:46:34,090 --> 01:46:40,660
query for the commands but on the other

1794
01:46:37,540 --> 01:46:48,600
hand you do lose a little bit of the

1795
01:46:40,660 --> 01:46:53,910
essence of OS query there's a repository

1796
01:46:48,600 --> 01:46:58,720
and people who do a lot with s query

1797
01:46:53,910 --> 01:47:00,849
port information in there there is

1798
01:46:58,720 --> 01:47:03,760
information about analysis of fire where

1799
01:47:00,850 --> 01:47:05,169
and a lot of very useful and powerful

1800
01:47:03,760 --> 01:47:09,729
information there and that's

1801
01:47:05,169 --> 01:47:18,519
advanced users so do we have any

1802
01:47:09,729 --> 01:47:20,649
questions no no questions okay so as

1803
01:47:18,519 --> 01:47:23,589
query documentation is available on the

1804
01:47:20,649 --> 01:47:29,619
wiki it's very well written very well

1805
01:47:23,589 --> 01:47:31,629
documented the best thing if you need to

1806
01:47:29,619 --> 01:47:34,148
look at is the code the best thing is to

1807
01:47:31,629 --> 01:47:36,510
go and look at the code and some of ours

1808
01:47:34,149 --> 01:47:39,969
query has not been documented and

1809
01:47:36,510 --> 01:47:43,449
obviously there's the website for OS

1810
01:47:39,969 --> 01:47:48,309
query we have the repository the scheme

1811
01:47:43,449 --> 01:47:49,959
of the tables and so on the OS control

1812
01:47:48,309 --> 01:47:52,869
the site for that is where you have the

1813
01:47:49,959 --> 01:47:54,789
documentation and the repositories where

1814
01:47:52,869 --> 01:47:59,289
you have all the information on what I'm

1815
01:47:54,789 --> 01:48:04,869
working on now there are more and more

1816
01:47:59,289 --> 01:48:07,659
people using it and so there is more and

1817
01:48:04,869 --> 01:48:11,169
more information I do put this

1818
01:48:07,659 --> 01:48:15,669
information on Twitter and so on when I

1819
01:48:11,169 --> 01:48:17,589
put in new versions so that's all for

1820
01:48:15,669 --> 01:48:19,358
today thank you very much for being here

1821
01:48:17,589 --> 01:48:24,129
this afternoon especially those who have

1822
01:48:19,359 --> 01:48:28,059
waited until the end I understand that

1823
01:48:24,129 --> 01:48:31,780
it's not a subject for this late hour

1824
01:48:28,059 --> 01:48:35,079
so if you have any questions please get

1825
01:48:31,780 --> 01:48:38,679
in touch with me through Twitter or s

1826
01:48:35,079 --> 01:48:41,790
Lag you can see me here at cyber camp

1827
01:48:38,679 --> 01:48:45,660
thank you for inviting me here today

1828
01:48:41,790 --> 01:48:48,790
[Music]

1829
01:48:45,660 --> 01:48:48,790
[Applause]

