1
00:00:00,000 --> 00:00:09,809
so what's this talk about it's a it's

2
00:00:04,440 --> 00:00:16,529
about the birth and race of an important

3
00:00:09,809 --> 00:00:21,289
language it's about what's around it

4
00:00:16,529 --> 00:00:28,800
about in in the security implications

5
00:00:21,289 --> 00:00:33,960
and the fact that when we talk about

6
00:00:28,800 --> 00:00:40,489
these paths javascript is taken I will

7
00:00:33,960 --> 00:00:45,170
try to tell about the path of all

8
00:00:40,489 --> 00:00:51,449
important technology are taken today and

9
00:00:45,170 --> 00:00:52,829
also of course about that path in during

10
00:00:51,449 --> 00:00:55,589
that path what are the security

11
00:00:52,829 --> 00:01:00,000
implication and how to deal with real

12
00:00:55,590 --> 00:01:05,309
world issues of course this is not about

13
00:01:00,000 --> 00:01:10,260
saying javascript is an insecure

14
00:01:05,309 --> 00:01:13,289
language because anyone no one can say

15
00:01:10,260 --> 00:01:18,330
it because it's just a language is not a

16
00:01:13,290 --> 00:01:23,009
framework that has bugs in it you built

17
00:01:18,330 --> 00:01:29,880
build things with that one so it's about

18
00:01:23,009 --> 00:01:33,530
how it's used let's just start with a

19
00:01:29,880 --> 00:01:39,960
brief history and let's start when

20
00:01:33,530 --> 00:01:45,630
javascript first came out and it was

21
00:01:39,960 --> 00:01:49,740
nineteen ninety seven six also it was

22
00:01:45,630 --> 00:01:54,030
the first time that it was implemented

23
00:01:49,740 --> 00:02:00,798
in netscape too and think about that

24
00:01:54,030 --> 00:02:04,409
before that the browser was just a

25
00:02:00,799 --> 00:02:12,980
simple HTML parser nothing happened

26
00:02:04,409 --> 00:02:19,450
pages HTML pages were ugly also after

27
00:02:12,980 --> 00:02:26,420
years the first Ajax framework comes out

28
00:02:19,450 --> 00:02:30,220
then since 1999 something is going to

29
00:02:26,420 --> 00:02:34,238
happen we can see it because

30
00:02:30,220 --> 00:02:38,230
implementation of new features are being

31
00:02:34,239 --> 00:02:43,970
put there by vendors and let's go

32
00:02:38,230 --> 00:02:50,660
straight forward to 92,000 sorry 2009

33
00:02:43,970 --> 00:02:53,569
and we can see that in the last five

34
00:02:50,660 --> 00:02:57,160
years we have so many new features

35
00:02:53,569 --> 00:03:01,879
inside JavaScript universe inside

36
00:02:57,160 --> 00:03:06,140
actually inside the browsers and the why

37
00:03:01,879 --> 00:03:10,760
it is going like that because browser

38
00:03:06,140 --> 00:03:17,298
vendors browser are trying to push the

39
00:03:10,760 --> 00:03:23,649
use of I try to push the to improve the

40
00:03:17,299 --> 00:03:27,139
user experience and of course something

41
00:03:23,650 --> 00:03:28,310
that is sounds like a plan it's

42
00:03:27,139 --> 00:03:32,060
something that sounds like a plan

43
00:03:28,310 --> 00:03:36,709
because actually there are several

44
00:03:32,060 --> 00:03:45,280
several features here it's about giving

45
00:03:36,709 --> 00:03:50,359
3d graphics is about giving audio and

46
00:03:45,280 --> 00:03:53,530
also also speed improvement and guess

47
00:03:50,359 --> 00:03:59,389
what's the glue of all this feature is

48
00:03:53,530 --> 00:04:02,299
JavaScript so this is a big picture of

49
00:03:59,389 --> 00:04:05,239
the history of JavaScript and the

50
00:04:02,299 --> 00:04:09,579
implementation of the new feature we can

51
00:04:05,239 --> 00:04:15,680
see that there is a big gap of since 99

52
00:04:09,579 --> 00:04:19,668
1986 to 2009 we're almost nothing

53
00:04:15,680 --> 00:04:23,180
happens and then wrong it's a that

54
00:04:19,668 --> 00:04:26,609
there's a growth of new features out

55
00:04:23,180 --> 00:04:31,319
there so let's just

56
00:04:26,610 --> 00:04:35,729
talk about the past the past and let's

57
00:04:31,319 --> 00:04:39,210
let's see what happens so when

58
00:04:35,729 --> 00:04:44,460
javascript enters in the internet world

59
00:04:39,210 --> 00:04:51,599
in the web word it was to in order to

60
00:04:44,460 --> 00:04:58,258
improve the user experience that kind of

61
00:04:51,599 --> 00:05:00,990
new feature in the browser let up HTML

62
00:04:58,259 --> 00:05:06,060
page programmer let's say that let's

63
00:05:00,990 --> 00:05:10,409
call it that way to read content to

64
00:05:06,060 --> 00:05:14,639
modify it on the fly what same region

65
00:05:10,409 --> 00:05:18,840
policy is a way to understand if a page

66
00:05:14,639 --> 00:05:21,300
belongs if a page can read another got

67
00:05:18,840 --> 00:05:24,688
the content of another page according to

68
00:05:21,300 --> 00:05:29,629
their origin the origin is the server

69
00:05:24,689 --> 00:05:34,139
that hosts them and so it's about

70
00:05:29,629 --> 00:05:38,969
matching the triple scheme hostname and

71
00:05:34,139 --> 00:05:43,580
port so a volcom cannot access bank

72
00:05:38,969 --> 00:05:47,190
google com or bank com it's not possible

73
00:05:43,580 --> 00:05:50,120
because of the implementation of these

74
00:05:47,190 --> 00:05:54,589
rules this is very important because

75
00:05:50,120 --> 00:05:58,830
this is what we deal with every day

76
00:05:54,589 --> 00:06:01,560
because we actually when we use the

77
00:05:58,830 --> 00:06:05,758
browser but also when we use a mobile

78
00:06:01,560 --> 00:06:11,810
device we deal with sandboxes we deal

79
00:06:05,759 --> 00:06:20,069
with an implement several layers of

80
00:06:11,810 --> 00:06:23,310
software that try to understand if some

81
00:06:20,069 --> 00:06:27,500
feature can be called is allowed to be

82
00:06:23,310 --> 00:06:30,750
called by someone or not this

83
00:06:27,500 --> 00:06:34,190
implementation of access control in a

84
00:06:30,750 --> 00:06:38,520
hostile environment is called sandbox

85
00:06:34,190 --> 00:06:42,569
the first way to subvert

86
00:06:38,520 --> 00:06:50,370
these rules happens for the first time

87
00:06:42,569 --> 00:06:56,240
in 1997 maybe 1988 on a on a mailing

88
00:06:50,370 --> 00:07:03,599
list and it was about hey but if I can

89
00:06:56,240 --> 00:07:07,259
just inject just send some data to to

90
00:07:03,599 --> 00:07:11,669
the server to Google and Google stores

91
00:07:07,259 --> 00:07:14,759
it or takes it and then use that to

92
00:07:11,669 --> 00:07:19,198
build the response the response for some

93
00:07:14,759 --> 00:07:23,039
other user will be possible for me to

94
00:07:19,199 --> 00:07:26,550
add new content to add the new

95
00:07:23,039 --> 00:07:30,180
JavaScript to add a new HTML that was

96
00:07:26,550 --> 00:07:33,210
called for the first time cross-site

97
00:07:30,180 --> 00:07:37,969
scripting which is actually HTML

98
00:07:33,210 --> 00:07:44,719
injection that was the first way to

99
00:07:37,969 --> 00:07:49,680
think about how to bypass the sandbox

100
00:07:44,719 --> 00:07:55,440
there is another way to bypass the

101
00:07:49,680 --> 00:07:59,909
sandbox is about do not think about the

102
00:07:55,440 --> 00:08:05,520
browser but think about what can be run

103
00:07:59,909 --> 00:08:08,520
on the browser plugins in fact let's

104
00:08:05,520 --> 00:08:11,159
suppose a user has a plug-in that

105
00:08:08,520 --> 00:08:18,750
behaves completely in a completely

106
00:08:11,159 --> 00:08:23,580
different manner like flash flash plugin

107
00:08:18,750 --> 00:08:29,659
I think everyone has it in their laptop

108
00:08:23,580 --> 00:08:36,179
or the whole the acrobat reader PDF and

109
00:08:29,659 --> 00:08:40,708
what if that plug-in gives more features

110
00:08:36,179 --> 00:08:44,729
but there were no implementation of any

111
00:08:40,708 --> 00:08:47,989
sandbox because they didn't care but the

112
00:08:44,730 --> 00:08:51,449
browser yes but the plug-in didn't so

113
00:08:47,990 --> 00:08:52,410
the attacker can just abuse a new

114
00:08:51,449 --> 00:08:55,709
functionality

115
00:08:52,410 --> 00:08:59,910
from a plug-in to attack the browser's

116
00:08:55,709 --> 00:09:02,930
victim in order to what to access data

117
00:08:59,910 --> 00:09:06,480
that is what is important at the moment

118
00:09:02,930 --> 00:09:10,019
if it's possible something like that

119
00:09:06,480 --> 00:09:14,670
then we can call it Universal cross-site

120
00:09:10,019 --> 00:09:18,089
scripting so if a a browser can load the

121
00:09:14,670 --> 00:09:23,699
plug-in which is vulnerable to some kind

122
00:09:18,089 --> 00:09:29,910
of abuse actually a malicious attacker

123
00:09:23,699 --> 00:09:33,089
could access data from any site from

124
00:09:29,910 --> 00:09:38,759
anywhere no matter what the browser

125
00:09:33,089 --> 00:09:44,339
sandbox does just an example this is

126
00:09:38,759 --> 00:09:48,120
what I found late in 2006 it was the

127
00:09:44,339 --> 00:09:50,790
first time that the term of universal

128
00:09:48,120 --> 00:09:53,430
cross the scripting was used let's

129
00:09:50,790 --> 00:09:58,310
suppose and it was on a crowbar trader

130
00:09:53,430 --> 00:10:02,579
plugin let's suppose google just hosts a

131
00:09:58,310 --> 00:10:09,029
PDF so anyone can reach it using that

132
00:10:02,579 --> 00:10:13,800
URL now the attacker knows that almost

133
00:10:09,029 --> 00:10:16,350
anyone has a plug-in that read pdfs in

134
00:10:13,800 --> 00:10:20,370
the browser directly in the browser and

135
00:10:16,350 --> 00:10:25,860
at the time it the dead plug-in was

136
00:10:20,370 --> 00:10:29,069
nearly in every pc on every pc and was a

137
00:10:25,860 --> 00:10:34,309
acrobat reader well actually i found

138
00:10:29,069 --> 00:10:41,130
that it was possible to add after the

139
00:10:34,309 --> 00:10:43,829
the URL actually some parameter that

140
00:10:41,130 --> 00:10:48,300
could be abused in order to execute

141
00:10:43,829 --> 00:10:52,920
javascript and since javascript since

142
00:10:48,300 --> 00:10:55,949
the PDF was hosted on the server it was

143
00:10:52,920 --> 00:11:00,990
possible to actually execute anything

144
00:10:55,949 --> 00:11:04,469
which means read read modify cancel

145
00:11:00,990 --> 00:11:07,130
delete any information in the page that

146
00:11:04,470 --> 00:11:07,130
belonged

147
00:11:07,250 --> 00:11:18,750
to the hosting server so the other

148
00:11:14,940 --> 00:11:22,140
question was but what if an attacker is

149
00:11:18,750 --> 00:11:26,520
able to point the victims browser to a

150
00:11:22,140 --> 00:11:29,970
PDF inside her machine the same thing

151
00:11:26,520 --> 00:11:32,730
but at this local file system level so

152
00:11:29,970 --> 00:11:36,410
the attacker had the possibility to read

153
00:11:32,730 --> 00:11:42,060
the whole files in the file system of

154
00:11:36,410 --> 00:11:45,480
the victims browser of course other

155
00:11:42,060 --> 00:11:50,459
plugins there are extensions extension I

156
00:11:45,480 --> 00:11:53,100
think by now everyone uses at least as

157
00:11:50,460 --> 00:12:00,270
at least one extension in their browser

158
00:11:53,100 --> 00:12:03,530
and actually they are mostly of the time

159
00:12:00,270 --> 00:12:09,120
most of the time built with javascript

160
00:12:03,530 --> 00:12:13,339
inside and of course since they are

161
00:12:09,120 --> 00:12:19,500
extension have more power than usual

162
00:12:13,340 --> 00:12:23,180
javascript in a page now also extension

163
00:12:19,500 --> 00:12:27,080
could be malicious we've seen apps

164
00:12:23,180 --> 00:12:31,280
malicious apps on the Android Play Store

165
00:12:27,080 --> 00:12:36,050
it's kind of the same but for extension

166
00:12:31,280 --> 00:12:41,640
if the browser vendor misses some check

167
00:12:36,050 --> 00:12:44,520
they could be just try to wait for a

168
00:12:41,640 --> 00:12:47,400
user to install them and still all the

169
00:12:44,520 --> 00:12:50,550
data we have to be really careful with

170
00:12:47,400 --> 00:12:53,790
when installing extension we don't know

171
00:12:50,550 --> 00:12:56,459
where they come from or simply they

172
00:12:53,790 --> 00:13:01,050
could be badly written so they can be

173
00:12:56,460 --> 00:13:06,270
they can expose your browser to attacks

174
00:13:01,050 --> 00:13:09,900
like the PDF previously mentioned or

175
00:13:06,270 --> 00:13:18,449
worse like executing code inside your

176
00:13:09,900 --> 00:13:19,230
machine meantime on the server side we

177
00:13:18,450 --> 00:13:28,850
have

178
00:13:19,230 --> 00:13:33,750
a an experiment javascript running as a

179
00:13:28,850 --> 00:13:36,420
framework for web applications early

180
00:13:33,750 --> 00:13:43,170
implementation of JavaScript it was 2003

181
00:13:36,420 --> 00:13:52,520
and Netscape tried to us to put on the

182
00:13:43,170 --> 00:13:59,069
market javascript server-side so in 2003

183
00:13:52,520 --> 00:14:02,699
people used to code like that and did

184
00:13:59,070 --> 00:14:05,010
that is a very wrong way to code in

185
00:14:02,700 --> 00:14:10,650
JavaScript first of all because there is

186
00:14:05,010 --> 00:14:15,330
evil eval eval there is a saying evil is

187
00:14:10,650 --> 00:14:19,860
evil because evil is a method that can

188
00:14:15,330 --> 00:14:23,580
be quite easy easily abused and in this

189
00:14:19,860 --> 00:14:28,950
case since eval is actually executing

190
00:14:23,580 --> 00:14:33,570
JavaScript an attacker could create a

191
00:14:28,950 --> 00:14:38,250
way to execute JavaScript s or execute

192
00:14:33,570 --> 00:14:41,670
command on the server side in by

193
00:14:38,250 --> 00:14:47,310
injecting JavaScript and let the server

194
00:14:41,670 --> 00:14:51,839
to execute also access to file system

195
00:14:47,310 --> 00:14:55,979
and command execution and so on so this

196
00:14:51,840 --> 00:15:05,900
was actually a bank application and it

197
00:14:55,980 --> 00:15:11,070
was written in 2003 and I was engaged to

198
00:15:05,900 --> 00:15:13,730
test it in the in 2008 so they were at

199
00:15:11,070 --> 00:15:18,960
least exposed without knowing anything

200
00:15:13,730 --> 00:15:27,110
to remote code execution a bank for at

201
00:15:18,960 --> 00:15:29,670
least five years meantime on a user's pc

202
00:15:27,110 --> 00:15:32,910
what's happening

203
00:15:29,670 --> 00:15:39,599
we've seen by looking at the history

204
00:15:32,910 --> 00:15:42,480
that there is a one time where new

205
00:15:39,600 --> 00:15:46,070
features are becoming to be implemented

206
00:15:42,480 --> 00:15:50,550
more and more no yeah it's around 2005

207
00:15:46,070 --> 00:15:55,050
something more interesting happens those

208
00:15:50,550 --> 00:15:59,609
new features like a Jaques starts to

209
00:15:55,050 --> 00:16:03,990
gain interest on the industry world so

210
00:15:59,610 --> 00:16:06,900
the cost of computers Lauer's so the

211
00:16:03,990 --> 00:16:12,180
platform the user base grows and the

212
00:16:06,900 --> 00:16:15,060
plat for those several platform are

213
00:16:12,180 --> 00:16:18,089
converging to a common one which is the

214
00:16:15,060 --> 00:16:21,479
browser everyone is going to use the

215
00:16:18,090 --> 00:16:25,160
browser to do things because it's easy

216
00:16:21,480 --> 00:16:28,650
to implement a web application and

217
00:16:25,160 --> 00:16:30,600
everybody has a browser no one has to

218
00:16:28,650 --> 00:16:33,840
download that install a new application

219
00:16:30,600 --> 00:16:38,780
in order to just interact with the bank

220
00:16:33,840 --> 00:16:45,630
and so on but big user base big money a

221
00:16:38,780 --> 00:16:50,160
lot of data the crime came scene comes

222
00:16:45,630 --> 00:16:55,040
in and it comes in because of one reason

223
00:16:50,160 --> 00:16:59,130
only one reason to profit about that so

224
00:16:55,040 --> 00:17:03,750
in 2005 maybe now we are more aware

225
00:16:59,130 --> 00:17:11,130
about that but in 2005 a dialogue like

226
00:17:03,750 --> 00:17:15,680
that presented several time a day and we

227
00:17:11,130 --> 00:17:20,720
just have to choose if to run or save

228
00:17:15,680 --> 00:17:24,420
some something we didn't know if it was

229
00:17:20,720 --> 00:17:27,270
secure to run but most of the time a

230
00:17:24,420 --> 00:17:30,900
naive user would click run because

231
00:17:27,270 --> 00:17:36,389
because it's a the one highlighted most

232
00:17:30,900 --> 00:17:39,060
of the time and that what happens at the

233
00:17:36,390 --> 00:17:41,970
time when they click run something

234
00:17:39,060 --> 00:17:45,960
inside them their machine happens

235
00:17:41,970 --> 00:17:49,620
the virus it was theorized since the

236
00:17:45,960 --> 00:17:53,700
browser is a common now is a common

237
00:17:49,620 --> 00:17:58,229
interface in common platform it's the

238
00:17:53,700 --> 00:18:01,740
results that way to just use it and gain

239
00:17:58,230 --> 00:18:07,260
everything one move and get everything

240
00:18:01,740 --> 00:18:10,230
so what happens here is that we take

241
00:18:07,260 --> 00:18:15,000
advantage of the common interface of the

242
00:18:10,230 --> 00:18:18,120
browser and these kind of malware which

243
00:18:15,000 --> 00:18:22,710
is called the banking malware just tries

244
00:18:18,120 --> 00:18:30,418
to change the content of a bank on the

245
00:18:22,710 --> 00:18:34,740
fly and hijack the data that are used by

246
00:18:30,419 --> 00:18:40,740
the user to another to create new

247
00:18:34,740 --> 00:18:43,440
operations so it's a win-win for the

248
00:18:40,740 --> 00:18:46,470
crime because the sandbox equals is

249
00:18:43,440 --> 00:18:49,380
completely bypassed because it's on top

250
00:18:46,470 --> 00:18:51,140
of the browser we don't have to deal

251
00:18:49,380 --> 00:18:54,539
with the sandbox and stuff like that

252
00:18:51,140 --> 00:18:58,980
it's a perfect sandbox bypass we want to

253
00:18:54,539 --> 00:19:02,039
see maybe someone I've already seen what

254
00:18:58,980 --> 00:19:06,179
as use uses a malware as a banking

255
00:19:02,039 --> 00:19:09,120
malware this is a configuration example

256
00:19:06,179 --> 00:19:16,380
of a banking malware the first part

257
00:19:09,120 --> 00:19:22,080
where there is set URL is when the

258
00:19:16,380 --> 00:19:25,169
banking malware has to activate if the

259
00:19:22,080 --> 00:19:28,830
user is going over there if the user is

260
00:19:25,169 --> 00:19:32,159
visiting that URL then the banking

261
00:19:28,830 --> 00:19:36,658
malware has to trap the response from

262
00:19:32,159 --> 00:19:39,030
the server find the name equal password

263
00:19:36,659 --> 00:19:43,320
the part inside the server inside the

264
00:19:39,030 --> 00:19:45,240
response and inject those other lines

265
00:19:43,320 --> 00:19:47,879
what are those other lines are the

266
00:19:45,240 --> 00:19:52,049
secret question for changing password

267
00:19:47,880 --> 00:19:55,710
probably offer a password forgot stuff

268
00:19:52,049 --> 00:19:59,668
so the banking malware

269
00:19:55,710 --> 00:20:02,490
new something new for the use to the

270
00:19:59,669 --> 00:20:06,630
user experience or user space so that

271
00:20:02,490 --> 00:20:08,850
the user will consider it trusted

272
00:20:06,630 --> 00:20:14,250
because it's trustful because it's it's

273
00:20:08,850 --> 00:20:17,820
coming from the bank site and voila it

274
00:20:14,250 --> 00:20:23,520
will just answer this question and when

275
00:20:17,820 --> 00:20:25,320
they click OK is not those answers will

276
00:20:23,520 --> 00:20:28,070
not go to the bank but we'll go to the

277
00:20:25,320 --> 00:20:33,840
banking malware which will send them to

278
00:20:28,070 --> 00:20:40,399
the attacker meantime on the mobile

279
00:20:33,840 --> 00:20:40,399
what's happening it's 2005 and 11 and

280
00:20:41,270 --> 00:20:49,470
already there is a iOS of course already

281
00:20:45,120 --> 00:20:52,459
there is Android maybe but what's very

282
00:20:49,470 --> 00:20:58,950
interesting is that since browser are so

283
00:20:52,460 --> 00:21:03,330
famous so used of course every operating

284
00:20:58,950 --> 00:21:06,539
system has to give a component that acts

285
00:21:03,330 --> 00:21:11,370
like the browser to the apps so an app

286
00:21:06,539 --> 00:21:14,549
will be able to embed a window a browser

287
00:21:11,370 --> 00:21:18,870
window inside itself and use it and

288
00:21:14,549 --> 00:21:23,970
interact with that in two thousand eight

289
00:21:18,870 --> 00:21:30,149
thousand eleven super ever which is a

290
00:21:23,970 --> 00:21:38,700
very nice guy and very smart found on

291
00:21:30,149 --> 00:21:47,908
iOS skype app this this HTML injection

292
00:21:38,700 --> 00:21:54,260
here and which lead to the possibility

293
00:21:47,909 --> 00:21:59,850
to read everything skype could read so

294
00:21:54,260 --> 00:22:02,190
execute JavaScript inside an app is not

295
00:21:59,850 --> 00:22:04,139
like executing JavaScript inside the

296
00:22:02,190 --> 00:22:09,120
browser it's completely different

297
00:22:04,139 --> 00:22:13,800
because rule are change because a nap

298
00:22:09,120 --> 00:22:19,169
is his own sandbox that allows to do

299
00:22:13,800 --> 00:22:26,760
more things than on a classical laptop

300
00:22:19,170 --> 00:22:37,770
browser just another note before going

301
00:22:26,760 --> 00:22:43,530
to present in 2011 oh there is a lot of

302
00:22:37,770 --> 00:22:51,440
website and a very big user base by now

303
00:22:43,530 --> 00:22:55,460
and advertising and programs to perform

304
00:22:51,440 --> 00:22:59,760
analytics about traffic's and so on

305
00:22:55,460 --> 00:23:06,380
improvement for user interaction and in

306
00:22:59,760 --> 00:23:11,100
good libraries for improving graphical

307
00:23:06,380 --> 00:23:17,630
so on are out there everything is

308
00:23:11,100 --> 00:23:22,559
written in JavaScript and actually that

309
00:23:17,630 --> 00:23:28,200
kind of worried me because JavaScript

310
00:23:22,559 --> 00:23:31,678
was it we are talking about hundreds of

311
00:23:28,200 --> 00:23:38,100
kilobytes of JavaScript code to analyze

312
00:23:31,679 --> 00:23:42,300
is not very easy so and for each page so

313
00:23:38,100 --> 00:23:45,719
I created a tool was name is Dominator

314
00:23:42,300 --> 00:23:49,710
which is a Firefox modification and the

315
00:23:45,720 --> 00:23:52,020
helps to just while browsing the page

316
00:23:49,710 --> 00:24:00,240
helps to track the JavaScript execution

317
00:23:52,020 --> 00:24:03,540
I try to identify if if the data can be

318
00:24:00,240 --> 00:24:06,990
controlled by an attacker and if that

319
00:24:03,540 --> 00:24:12,330
data goes somewhere that could be abused

320
00:24:06,990 --> 00:24:19,320
and alerts for alerts eat in order to

321
00:24:12,330 --> 00:24:22,549
take actions against in 2011 I took the

322
00:24:19,320 --> 00:24:27,590
first 100 sites

323
00:24:22,549 --> 00:24:34,740
ranking in the harlot Alex are ranking

324
00:24:27,590 --> 00:24:38,520
and I found using the tool that 57 sighs

325
00:24:34,740 --> 00:24:42,650
were exposed to some kind of cross-site

326
00:24:38,520 --> 00:24:47,879
scripting using Java Sabine JavaScript

327
00:24:42,650 --> 00:24:55,169
weaknesses coding coding weaknesses okay

328
00:24:47,880 --> 00:25:03,539
now this is what happened until a couple

329
00:24:55,169 --> 00:25:05,850
of years ago what's now actually the

330
00:25:03,539 --> 00:25:12,780
past stuff what we've already talked

331
00:25:05,850 --> 00:25:15,240
about it still there no one really saw

332
00:25:12,780 --> 00:25:21,059
the most of the things we've talked

333
00:25:15,240 --> 00:25:25,470
about before previously yeah some effort

334
00:25:21,059 --> 00:25:28,770
is being done by vendors the one is

335
00:25:25,470 --> 00:25:32,280
called is a kind of improvement of same

336
00:25:28,770 --> 00:25:37,320
origin policy so it's possible to

337
00:25:32,280 --> 00:25:40,950
improve the granularity of about how a

338
00:25:37,320 --> 00:25:48,200
web page interacts with the external

339
00:25:40,950 --> 00:25:52,289
sites and external windows and so on but

340
00:25:48,200 --> 00:25:55,740
even if browser have already implemented

341
00:25:52,289 --> 00:26:01,740
it they are content security policy

342
00:25:55,740 --> 00:26:05,070
ready there is a very few web

343
00:26:01,740 --> 00:26:09,690
application that implements them the

344
00:26:05,070 --> 00:26:17,520
that kind of policy so it is not till a

345
00:26:09,690 --> 00:26:20,010
real solution also we are trying to

346
00:26:17,520 --> 00:26:25,168
patch to build to improve something that

347
00:26:20,010 --> 00:26:28,710
was written in two thousand in 1997 it's

348
00:26:25,169 --> 00:26:34,480
very is a very whole old model it's kind

349
00:26:28,710 --> 00:26:37,990
of not fitting quite anymore now

350
00:26:34,480 --> 00:26:43,360
and there's more because the market is

351
00:26:37,990 --> 00:26:48,190
pushing and pushing and pushing and PCs

352
00:26:43,360 --> 00:26:53,229
are are always faster and JavaScript are

353
00:26:48,190 --> 00:26:57,000
is faster again so what's the new thing

354
00:26:53,230 --> 00:27:01,960
that is coming out in the last two years

355
00:26:57,000 --> 00:27:05,290
welcome to the new way to dynamically

356
00:27:01,960 --> 00:27:09,400
create content generate content on the

357
00:27:05,290 --> 00:27:13,090
fly on the client side welcome to HTML

358
00:27:09,400 --> 00:27:18,250
templates welcome to client-side full

359
00:27:13,090 --> 00:27:23,590
dynamic content also known as angularjs

360
00:27:18,250 --> 00:27:28,840
and all the siblings around it how it

361
00:27:23,590 --> 00:27:31,740
works the green one is the template you

362
00:27:28,840 --> 00:27:36,990
see there is no actual content there

363
00:27:31,740 --> 00:27:36,990
there is just some HTML tag and

364
00:27:37,980 --> 00:27:49,090
something surrounded by parentheses

365
00:27:43,140 --> 00:27:54,910
which is quantity asterisk cost and what

366
00:27:49,090 --> 00:27:57,699
are those those are called is that one

367
00:27:54,910 --> 00:28:00,580
is an expression and is not directly

368
00:27:57,700 --> 00:28:03,400
executed by the browser JavaScript

369
00:28:00,580 --> 00:28:06,939
parser but is executed by the framework

370
00:28:03,400 --> 00:28:12,669
is parted by the framework using what's

371
00:28:06,940 --> 00:28:17,820
called expression parser and is a which

372
00:28:12,669 --> 00:28:24,940
is implemented on top of jes so it's a

373
00:28:17,820 --> 00:28:28,389
sandbox over another sandbox built on

374
00:28:24,940 --> 00:28:30,730
top of JavaScript and the data is

375
00:28:28,390 --> 00:28:34,169
actually taken from the server or from a

376
00:28:30,730 --> 00:28:39,160
database in the browser or from whatever

377
00:28:34,169 --> 00:28:41,380
so it's completely isolated the template

378
00:28:39,160 --> 00:28:46,390
and the data which is called the data

379
00:28:41,380 --> 00:28:49,730
binding so

380
00:28:46,390 --> 00:28:54,800
one could say okay but I can just try to

381
00:28:49,730 --> 00:28:58,550
inject stuff like that and see what the

382
00:28:54,800 --> 00:29:00,470
expression parser can can execute since

383
00:28:58,550 --> 00:29:04,610
it goes to the JavaScript parser now

384
00:29:00,470 --> 00:29:06,620
because the sandbox actually removes all

385
00:29:04,610 --> 00:29:12,020
the dangerous objects in order to

386
00:29:06,620 --> 00:29:19,310
prevent a kind of kind of sandbox bypass

387
00:29:12,020 --> 00:29:21,920
attacks now but as any sandbox the

388
00:29:19,310 --> 00:29:26,060
sandbox is a program program is written

389
00:29:21,920 --> 00:29:30,710
by human beings like everyone here so we

390
00:29:26,060 --> 00:29:34,340
are not perfect and there could be some

391
00:29:30,710 --> 00:29:41,360
flow inside security is the process is

392
00:29:34,340 --> 00:29:44,899
not just a solution I give you so the

393
00:29:41,360 --> 00:29:49,280
end is a long process when the

394
00:29:44,900 --> 00:29:53,390
implementation is complex and here is a

395
00:29:49,280 --> 00:29:57,920
very mind-blowing sandbox bypass so

396
00:29:53,390 --> 00:30:02,210
there is no more easy alert there but is

397
00:29:57,920 --> 00:30:05,810
there is a way to try to access the

398
00:30:02,210 --> 00:30:09,800
function constructor and call it with

399
00:30:05,810 --> 00:30:11,750
the alert one you can see over there

400
00:30:09,800 --> 00:30:19,570
which is the paid malicious payload of

401
00:30:11,750 --> 00:30:19,570
course oh there is a new problem since

402
00:30:21,040 --> 00:30:24,040
since

403
00:30:24,890 --> 00:30:35,060
since the user content is generated on

404
00:30:28,220 --> 00:30:40,240
the client what happens if the web

405
00:30:35,060 --> 00:30:44,690
application should create a PDF out of

406
00:30:40,240 --> 00:30:48,500
the User Content page and save it on its

407
00:30:44,690 --> 00:30:50,780
side on the server side it's a real

408
00:30:48,500 --> 00:30:55,310
problem because everything is generated

409
00:30:50,780 --> 00:30:59,870
on the client by the browser there are

410
00:30:55,310 --> 00:31:04,370
some step to do go on the browser

411
00:30:59,870 --> 00:31:08,989
extract the generated HTML send it to

412
00:31:04,370 --> 00:31:12,909
the server and use a browser on the

413
00:31:08,990 --> 00:31:16,180
server to recreate the graphics and

414
00:31:12,910 --> 00:31:20,660
convert it to PDF using browser

415
00:31:16,180 --> 00:31:25,220
capabilities is there something wrong

416
00:31:20,660 --> 00:31:30,070
here so the server generates HTML and

417
00:31:25,220 --> 00:31:34,390
then regenerate using a browser

418
00:31:30,070 --> 00:31:39,350
somewhere over there at the server side

419
00:31:34,390 --> 00:31:43,880
really no absolutely there is something

420
00:31:39,350 --> 00:31:47,480
wrong here and you know why because if

421
00:31:43,880 --> 00:31:51,020
you have running a browser on the server

422
00:31:47,480 --> 00:31:53,810
side you are having all the feature we

423
00:31:51,020 --> 00:31:56,540
were seeing before on the server side

424
00:31:53,810 --> 00:32:02,360
this time is a complete different

425
00:31:56,540 --> 00:32:06,230
security model here so the attacker this

426
00:32:02,360 --> 00:32:09,949
time is a user that sends a fake HTML

427
00:32:06,230 --> 00:32:11,480
page to the server the server just send

428
00:32:09,950 --> 00:32:20,420
it to the browser and the browser what

429
00:32:11,480 --> 00:32:24,500
does executed and create if it sees

430
00:32:20,420 --> 00:32:30,620
something like that it creates a request

431
00:32:24,500 --> 00:32:36,650
to an internal router or to an internal

432
00:32:30,620 --> 00:32:38,840
server that's what happens if you try to

433
00:32:36,650 --> 00:32:44,060
part to use a browser on the server

434
00:32:38,840 --> 00:32:49,340
side right access to the whole internal

435
00:32:44,060 --> 00:32:52,070
network on the server and that means

436
00:32:49,340 --> 00:32:58,189
actually create the arbitrary requests

437
00:32:52,070 --> 00:33:00,730
on the web application side and now for

438
00:32:58,190 --> 00:33:05,780
something completely different

439
00:33:00,730 --> 00:33:11,680
javascript in the full web stock why

440
00:33:05,780 --> 00:33:18,590
because there is another phenomenon

441
00:33:11,680 --> 00:33:25,940
happening since a couple of year even

442
00:33:18,590 --> 00:33:30,709
more 34 again browse javascript on the

443
00:33:25,940 --> 00:33:34,280
server side and since javascript is

444
00:33:30,710 --> 00:33:40,910
gaining more popularity there are a lot

445
00:33:34,280 --> 00:33:46,280
of homemade developers that they think

446
00:33:40,910 --> 00:33:50,560
they know how to write good JavaScript

447
00:33:46,280 --> 00:33:59,000
well actually happened with PHP as well

448
00:33:50,560 --> 00:34:02,780
some years ago what happens is that

449
00:33:59,000 --> 00:34:08,770
there is a new toy and the toy is called

450
00:34:02,780 --> 00:34:13,870
nodejs and is actually a way to create a

451
00:34:08,770 --> 00:34:16,480
web application using javascript

452
00:34:13,870 --> 00:34:20,690
directly on the server side using only

453
00:34:16,480 --> 00:34:25,750
javascript also at well welcome back

454
00:34:20,690 --> 00:34:30,409
2003 we've seen before what could happen

455
00:34:25,750 --> 00:34:34,159
also there is another interesting liar

456
00:34:30,409 --> 00:34:42,040
here which is a javascript in the

457
00:34:34,159 --> 00:34:42,040
database one of the most favorite

458
00:34:42,730 --> 00:34:51,620
software that does that is MongoDB so

459
00:34:48,139 --> 00:34:52,759
it's a classical stock on the server

460
00:34:51,620 --> 00:35:00,440
side is no

461
00:34:52,760 --> 00:35:02,600
yes mongodb so is there a real

462
00:35:00,440 --> 00:35:05,750
difference someone could say now but

463
00:35:02,600 --> 00:35:09,200
there's not real difference because yeah

464
00:35:05,750 --> 00:35:13,430
well there is HTTP the request cancer

465
00:35:09,200 --> 00:35:16,310
everything is like writing java web

466
00:35:13,430 --> 00:35:20,779
application or C sharp net web

467
00:35:16,310 --> 00:35:23,900
application and so on yes and no why

468
00:35:20,780 --> 00:35:28,190
because let's try to write very simple

469
00:35:23,900 --> 00:35:33,260
application using kno jes and just send

470
00:35:28,190 --> 00:35:36,260
a request like that and print what how

471
00:35:33,260 --> 00:35:41,870
the request and how the parameters are

472
00:35:36,260 --> 00:35:45,380
treated on nodejs we send a couple of

473
00:35:41,870 --> 00:35:51,350
parameters with a couple of values over

474
00:35:45,380 --> 00:35:54,980
there and what happens happens that in

475
00:35:51,350 --> 00:35:58,730
this case since parameter is repeated

476
00:35:54,980 --> 00:36:03,070
more than once on the server side is

477
00:35:58,730 --> 00:36:10,370
actually considered as an array of

478
00:36:03,070 --> 00:36:15,800
vector or of values and what if we add

479
00:36:10,370 --> 00:36:19,460
the parentheses and give some value to

480
00:36:15,800 --> 00:36:23,180
those parentheses well the not Jes

481
00:36:19,460 --> 00:36:31,630
treated as it was a knob a JavaScript

482
00:36:23,180 --> 00:36:36,080
object so it's way different from how

483
00:36:31,630 --> 00:36:42,860
JavaScript or classical server framework

484
00:36:36,080 --> 00:36:45,890
server behave also let's see that let's

485
00:36:42,860 --> 00:36:51,890
build something that uses kno jes and

486
00:36:45,890 --> 00:36:56,450
mongodb as a back-end liar the question

487
00:36:51,890 --> 00:37:02,660
is since he said it B is still possible

488
00:36:56,450 --> 00:37:05,700
to execute the sequel injection anybody

489
00:37:02,660 --> 00:37:11,009
knows what sequel injection is

490
00:37:05,700 --> 00:37:15,270
okay okay so can I try to inject

491
00:37:11,010 --> 00:37:21,930
something like 1 equals 1 or 1 equals 1

492
00:37:15,270 --> 00:37:24,690
and so on let's see let's create a very

493
00:37:21,930 --> 00:37:29,839
simple knot jes application with MongoDB

494
00:37:24,690 --> 00:37:38,690
database and let's use this very simple

495
00:37:29,840 --> 00:37:38,690
line of code try to find the user was

496
00:37:39,230 --> 00:37:47,160
created by the user is populated by the

497
00:37:43,590 --> 00:37:54,570
request by the request with a password

498
00:37:47,160 --> 00:37:57,620
to paired with with the user let's test

499
00:37:54,570 --> 00:38:01,470
the environment let's see if that

500
00:37:57,620 --> 00:38:04,670
request what happens if i send that kind

501
00:38:01,470 --> 00:38:08,310
of request to the student not jes we

502
00:38:04,670 --> 00:38:12,180
send the user equals a user name and

503
00:38:08,310 --> 00:38:15,900
person pass as equals a password and we

504
00:38:12,180 --> 00:38:22,649
see that Nazi set like that so is a

505
00:38:15,900 --> 00:38:26,030
JavaScript object let's look let's get

506
00:38:22,650 --> 00:38:30,650
take a step back and let's go to the

507
00:38:26,030 --> 00:38:36,950
MongoDB documentation and we find that

508
00:38:30,650 --> 00:38:39,600
there is a very nice page that tells us

509
00:38:36,950 --> 00:38:42,060
if you want to do something using

510
00:38:39,600 --> 00:38:47,040
classical sequel and if you want to do

511
00:38:42,060 --> 00:38:50,820
the same using queering MongoDB and we

512
00:38:47,040 --> 00:38:55,740
can see that there are three or four

513
00:38:50,820 --> 00:39:01,140
ways to actually create something like

514
00:38:55,740 --> 00:39:04,229
or 1 equals 1 which is that one there

515
00:39:01,140 --> 00:39:08,310
are a couple of keywords well that be

516
00:39:04,230 --> 00:39:11,190
starts with the dollar symbol and an

517
00:39:08,310 --> 00:39:18,750
eight dollar and E which is actually not

518
00:39:11,190 --> 00:39:19,369
equal we so it become user not equal

519
00:39:18,750 --> 00:39:23,859
user

520
00:39:19,369 --> 00:39:27,859
name and password not equal password

521
00:39:23,859 --> 00:39:32,299
this is most of the time if you are very

522
00:39:27,859 --> 00:39:35,089
unlucky there will be a username with a

523
00:39:32,299 --> 00:39:38,839
password value credential but you must

524
00:39:35,089 --> 00:39:45,288
be very unlucky and that one actually

525
00:39:38,839 --> 00:39:50,749
allows you to directly log in without

526
00:39:45,289 --> 00:39:55,130
knowing anything about any user and most

527
00:39:50,749 --> 00:40:06,649
of the time the first user name is the

528
00:39:55,130 --> 00:40:11,920
administrator so just see ok let's talk

529
00:40:06,650 --> 00:40:11,920
about the future what's going on here

530
00:40:14,049 --> 00:40:19,279
we've seen all those interesting feature

531
00:40:17,599 --> 00:40:24,650
in the last that have been implemented

532
00:40:19,279 --> 00:40:29,359
in the last couple of years sound OpenGL

533
00:40:24,650 --> 00:40:35,509
3d graphics Oh everything inside the

534
00:40:29,359 --> 00:40:38,720
browser using javascript that is there

535
00:40:35,509 --> 00:40:43,309
is one one of the reason out there is to

536
00:40:38,720 --> 00:40:49,700
improve experience for web gaming so we

537
00:40:43,309 --> 00:40:54,259
can run for example quake or other 3d

538
00:40:49,700 --> 00:40:59,950
engine like there is actually a real

539
00:40:54,259 --> 00:41:04,720
unreal engine that can be compiled in

540
00:40:59,950 --> 00:41:09,730
something that is called a smgs and

541
00:41:04,720 --> 00:41:17,480
actually have speeds near the native

542
00:41:09,730 --> 00:41:24,589
execution near 1.5 so half lower but

543
00:41:17,480 --> 00:41:27,890
still very usable and you will have

544
00:41:24,589 --> 00:41:32,450
something like that in your browser full

545
00:41:27,890 --> 00:41:38,549
screen no plugins

546
00:41:32,450 --> 00:41:42,899
can you see there is more user base

547
00:41:38,550 --> 00:41:46,890
coming in the in the JavaScript universe

548
00:41:42,900 --> 00:41:51,000
using new features and that will push

549
00:41:46,890 --> 00:41:58,339
new feature again the implementation of

550
00:41:51,000 --> 00:41:58,340
new stuff is always introducing new bugs

551
00:41:58,940 --> 00:42:08,760
also let's go on the mobile side there

552
00:42:02,640 --> 00:42:13,009
is also a new operative system that

553
00:42:08,760 --> 00:42:17,280
Mozilla is pushing pushing is Firefox OS

554
00:42:13,010 --> 00:42:22,320
which actually with which you can create

555
00:42:17,280 --> 00:42:24,480
a web a mobile application by using HTML

556
00:42:22,320 --> 00:42:29,550
and JavaScript I created a very simple

557
00:42:24,480 --> 00:42:33,690
application just with one file HTML and

558
00:42:29,550 --> 00:42:38,540
one configuration file with the station

559
00:42:33,690 --> 00:42:41,370
web app that one will be able to to

560
00:42:38,540 --> 00:42:44,430
execute JavaScript in the sandbox in the

561
00:42:41,370 --> 00:42:47,549
application sandbox but what happens is

562
00:42:44,430 --> 00:42:50,730
like having a new extension in your

563
00:42:47,550 --> 00:42:53,130
browser now you don't know if that

564
00:42:50,730 --> 00:42:55,140
application is written well you don't

565
00:42:53,130 --> 00:42:58,860
know if it's malicious or not some

566
00:42:55,140 --> 00:43:01,290
parties up to the vendors to control if

567
00:42:58,860 --> 00:43:06,420
something is malicious or not because

568
00:43:01,290 --> 00:43:09,660
they use their marketplace to expose

569
00:43:06,420 --> 00:43:12,360
them to you but still it's your

570
00:43:09,660 --> 00:43:20,180
responsibility to keep an eye open on

571
00:43:12,360 --> 00:43:23,730
that also these are the last two things

572
00:43:20,180 --> 00:43:26,029
the internet internet of things what is

573
00:43:23,730 --> 00:43:31,020
Internet of Things is the hardware

574
00:43:26,030 --> 00:43:34,440
program programmable hardware since

575
00:43:31,020 --> 00:43:36,740
javascript is very very popular they are

576
00:43:34,440 --> 00:43:36,740
putting

577
00:43:37,860 --> 00:43:48,050
ja the jes interpreter in a chip in

578
00:43:42,350 --> 00:43:53,339
order to let everyone program that

579
00:43:48,050 --> 00:43:55,920
hardware so since everyone can can prog

580
00:43:53,340 --> 00:44:00,920
one that can use JavaScript can program

581
00:43:55,920 --> 00:44:07,110
it everyone can do it the wrong way and

582
00:44:00,920 --> 00:44:09,360
can code badly and so on there is also

583
00:44:07,110 --> 00:44:13,620
rumors that someone is trying to create

584
00:44:09,360 --> 00:44:19,320
a an operative system from scratch using

585
00:44:13,620 --> 00:44:24,480
not Jes as a as a base so okay

586
00:44:19,320 --> 00:44:28,310
conclusion we are living in a world that

587
00:44:24,480 --> 00:44:32,490
changes faster than before and

588
00:44:28,310 --> 00:44:35,880
everything is pushed by by market by we

589
00:44:32,490 --> 00:44:38,970
are the real product of course but we we

590
00:44:35,880 --> 00:44:43,830
are the users because the more we use

591
00:44:38,970 --> 00:44:47,959
things the more experienced we want to

592
00:44:43,830 --> 00:44:52,620
do the more things will be implemented

593
00:44:47,960 --> 00:44:57,780
and the more surface will be open two

594
00:44:52,620 --> 00:45:02,430
attackers new interesting technologies

595
00:44:57,780 --> 00:45:05,700
could get huge user base in a matter of

596
00:45:02,430 --> 00:45:08,460
a few months and when happens everything

597
00:45:05,700 --> 00:45:12,450
gets even faster and since it's even

598
00:45:08,460 --> 00:45:14,490
faster the developers cannot get have

599
00:45:12,450 --> 00:45:16,770
the time to understand if there are

600
00:45:14,490 --> 00:45:22,490
security implication what they are doing

601
00:45:16,770 --> 00:45:25,410
and they will try to patch something

602
00:45:22,490 --> 00:45:29,970
quickly because they are running

603
00:45:25,410 --> 00:45:32,670
together with the world so while they

604
00:45:29,970 --> 00:45:35,459
are coding people is downloading the

605
00:45:32,670 --> 00:45:41,070
application and they are expert they are

606
00:45:35,460 --> 00:45:45,390
being exposed to attack two attackers so

607
00:45:41,070 --> 00:45:47,340
also javascript is used by a lot of

608
00:45:45,390 --> 00:45:49,109
people really really a lot of people

609
00:45:47,340 --> 00:45:51,690
because it seems very easy at the

610
00:45:49,110 --> 00:45:54,450
beginning but still we have seen

611
00:45:51,690 --> 00:45:58,200
the sandbox bypass before it can be very

612
00:45:54,450 --> 00:46:03,299
complicated and there are the same

613
00:45:58,200 --> 00:46:09,839
things can be done in like ten ways

614
00:46:03,300 --> 00:46:14,460
different waves so things are get given

615
00:46:09,839 --> 00:46:21,328
are the harder and the only thing we can

616
00:46:14,460 --> 00:46:24,210
do is try to study and to try to go deep

617
00:46:21,329 --> 00:46:26,700
into things and understand the

618
00:46:24,210 --> 00:46:31,380
technology we use and the technology we

619
00:46:26,700 --> 00:46:37,589
try to improve can you see it now what's

620
00:46:31,380 --> 00:46:40,470
going on I really can even think how

621
00:46:37,589 --> 00:46:42,839
much integrating created the the

622
00:46:40,470 --> 00:46:44,549
implementation new features will be the

623
00:46:42,839 --> 00:46:48,390
next year's and this is only one

624
00:46:44,550 --> 00:46:52,109
language the javascript part and the

625
00:46:48,390 --> 00:46:55,950
browser frameworks and what it's around

626
00:46:52,109 --> 00:47:00,810
it I only hope that is going to be like

627
00:46:55,950 --> 00:47:08,629
a bolo rule with some fancy design

628
00:47:00,810 --> 00:47:08,630
drawing on it so I'm done thank you

629
00:47:13,930 --> 00:47:32,269
if you have any question I think we have

630
00:47:18,710 --> 00:47:35,829
five minutes like microphone hola the

631
00:47:32,269 --> 00:47:41,390
wolf imran espanol abroad not very fun

632
00:47:35,829 --> 00:47:44,450
if if javascript is it's not the best to

633
00:47:41,390 --> 00:47:50,828
to provide security to the today up in

634
00:47:44,450 --> 00:47:55,899
the the server and database data

635
00:47:50,829 --> 00:48:01,180
something why not to use only a

636
00:47:55,900 --> 00:48:05,750
server-side language to to get the

637
00:48:01,180 --> 00:48:08,950
privacy data and unclear inside a coding

638
00:48:05,750 --> 00:48:13,299
only for front end or the application

639
00:48:08,950 --> 00:48:16,009
okay you mean just like go back to

640
00:48:13,299 --> 00:48:18,740
client-server classical client-server

641
00:48:16,009 --> 00:48:23,359
something like that yeah yeah it's

642
00:48:18,740 --> 00:48:26,618
something of course we could we it's a

643
00:48:23,359 --> 00:48:30,259
it depends what we can control right so

644
00:48:26,619 --> 00:48:35,480
if you are creating a web application

645
00:48:30,259 --> 00:48:38,660
for your employer or for you and you can

646
00:48:35,480 --> 00:48:41,410
choose your technologies you can choose

647
00:48:38,660 --> 00:48:45,529
what the technology you know best so

648
00:48:41,410 --> 00:48:50,629
probably you will choose because you

649
00:48:45,529 --> 00:48:55,339
think about it your model the problem is

650
00:48:50,630 --> 00:48:59,269
that we can control something but we

651
00:48:55,339 --> 00:49:01,400
also our users and what we use is

652
00:48:59,269 --> 00:49:04,038
something that we cannot really control

653
00:49:01,400 --> 00:49:08,089
because it was developed and created by

654
00:49:04,039 --> 00:49:13,880
other people and vendors so if a vendor

655
00:49:08,089 --> 00:49:18,140
tries to push for a technology well its

656
00:49:13,880 --> 00:49:22,130
industry baby now it's a you are going

657
00:49:18,140 --> 00:49:25,259
to choose if to not buy that technology

658
00:49:22,130 --> 00:49:29,310
but is your own choice in the end

659
00:49:25,260 --> 00:49:31,200
and you're just not getting advantages

660
00:49:29,310 --> 00:49:34,799
from that technology because of a death

661
00:49:31,200 --> 00:49:37,169
of your choice as the user as a

662
00:49:34,800 --> 00:49:41,820
programmer is a developer of course you

663
00:49:37,170 --> 00:49:46,820
can do whatever you want it depends what

664
00:49:41,820 --> 00:49:57,690
are your your objectives your targets

665
00:49:46,820 --> 00:50:01,080
thank you any other question hello how

666
00:49:57,690 --> 00:50:04,430
can we make a java so a more secure can

667
00:50:01,080 --> 00:50:10,290
we use cryptographic techniques movie

668
00:50:04,430 --> 00:50:15,200
okay let's say that coding is hard for

669
00:50:10,290 --> 00:50:18,600
each language because it's not about

670
00:50:15,200 --> 00:50:23,759
having a secure language there is no

671
00:50:18,600 --> 00:50:26,670
such thing now is about having when you

672
00:50:23,760 --> 00:50:31,860
build a house you are not actually

673
00:50:26,670 --> 00:50:35,970
putting bricks casually now randomly you

674
00:50:31,860 --> 00:50:40,860
just you try to have a project you try

675
00:50:35,970 --> 00:50:44,370
to know how big the wall must be and so

676
00:50:40,860 --> 00:50:49,560
on so there is a process that has to be

677
00:50:44,370 --> 00:50:54,029
followed and it's it's about quality and

678
00:50:49,560 --> 00:50:56,400
also when you have a process for quality

679
00:50:54,030 --> 00:51:01,640
you can also have a process for security

680
00:50:56,400 --> 00:51:06,900
so implement something that helps you to

681
00:51:01,640 --> 00:51:12,029
control how you are coding and if there

682
00:51:06,900 --> 00:51:16,170
is some good way to work around in a

683
00:51:12,030 --> 00:51:22,010
safe way some best solution some bad

684
00:51:16,170 --> 00:51:22,010
choice you are taking so it's more about

685
00:51:22,190 --> 00:51:28,140
understanding the way to improve

686
00:51:25,440 --> 00:51:31,980
security in the process of software

687
00:51:28,140 --> 00:51:34,770
developer development and not also of

688
00:51:31,980 --> 00:51:37,850
course add the cryptography for example

689
00:51:34,770 --> 00:51:37,850
but that is just

690
00:51:38,780 --> 00:51:48,890
another technology on top of something

691
00:51:42,390 --> 00:51:53,910
you are writing we have HTTPS that can

692
00:51:48,890 --> 00:51:56,609
protect the communication yes but an

693
00:51:53,910 --> 00:52:00,480
application that uses https on the

694
00:51:56,610 --> 00:52:04,730
server side and as a bug https one

695
00:52:00,480 --> 00:52:08,880
project for abusing that bug because

696
00:52:04,730 --> 00:52:12,990
it's it's not taking part anymore in

697
00:52:08,880 --> 00:52:16,140
that case okay so it's just one layer

698
00:52:12,990 --> 00:52:20,029
more but the thing is that the process

699
00:52:16,140 --> 00:52:27,390
must be improved in order to get quality

700
00:52:20,030 --> 00:52:30,720
in the code you're writing same thing

701
00:52:27,390 --> 00:52:42,960
for a java.net and so on another

702
00:52:30,720 --> 00:52:46,020
question over there hi hi okay what do

703
00:52:42,960 --> 00:52:49,530
you think about CSP will be used in the

704
00:52:46,020 --> 00:52:53,790
future or will just be a nice idea with

705
00:52:49,530 --> 00:52:58,580
no implementation I don't know big big

706
00:52:53,790 --> 00:53:02,370
company probably will use it it depends

707
00:52:58,580 --> 00:53:07,460
first of all right now the big really

708
00:53:02,370 --> 00:53:12,270
big problem is advertising JavaScript

709
00:53:07,460 --> 00:53:15,330
created for creating banners and stuff

710
00:53:12,270 --> 00:53:21,270
like that they they use whole old

711
00:53:15,330 --> 00:53:28,279
JavaScript full of bed functions and so

712
00:53:21,270 --> 00:53:30,960
on so if they would implement CSP

713
00:53:28,280 --> 00:53:34,470
advertising would stop so the whole

714
00:53:30,960 --> 00:53:37,550
market around it would stop at the

715
00:53:34,470 --> 00:53:42,350
moment is kind of hard to implement

716
00:53:37,550 --> 00:53:47,460
correctly implement them in CSP as a

717
00:53:42,350 --> 00:53:51,779
whole idea I guess for example a twitter

718
00:53:47,460 --> 00:53:56,520
facebook google already implemented it

719
00:53:51,780 --> 00:53:59,880
well they are in the board so they want

720
00:53:56,520 --> 00:54:03,210
to implement it because they are

721
00:53:59,880 --> 00:54:05,970
creating it the problem is when we deal

722
00:54:03,210 --> 00:54:10,710
for example with a bank that do not

723
00:54:05,970 --> 00:54:16,140
implement CSP we tell them you should

724
00:54:10,710 --> 00:54:18,300
add these headers to your responses they

725
00:54:16,140 --> 00:54:21,240
do but they don't know what they are

726
00:54:18,300 --> 00:54:24,030
doing they just do it because we are

727
00:54:21,240 --> 00:54:28,439
telling them but what if it breaks

728
00:54:24,030 --> 00:54:31,250
something else now I think it's very

729
00:54:28,440 --> 00:54:35,490
mature as a technology right now because

730
00:54:31,250 --> 00:54:38,280
we are running very fast with the old

731
00:54:35,490 --> 00:54:41,669
technologies and all the code now maybe

732
00:54:38,280 --> 00:54:44,610
in five years it will be better there

733
00:54:41,670 --> 00:54:46,850
will be more implementation of that okay

734
00:54:44,610 --> 00:54:46,850
thank you

