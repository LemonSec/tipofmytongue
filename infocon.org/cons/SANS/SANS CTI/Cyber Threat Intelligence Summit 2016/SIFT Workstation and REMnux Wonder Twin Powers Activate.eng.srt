1
00:00:28,550 --> 00:00:35,579
hello everyone and welcome to today's

2
00:00:31,109 --> 00:00:38,699
sands webcast sift and REM knucks wonder

3
00:00:35,579 --> 00:00:41,040
twin powers activate my name is Carol

4
00:00:38,699 --> 00:00:44,099
ahthe of the SANS Institute and I will

5
00:00:41,040 --> 00:00:47,220
be moderating today's webcast today's

6
00:00:44,100 --> 00:00:49,860
featured speakers are Rob Lee sands

7
00:00:47,220 --> 00:00:52,610
instructor and dfi our current

8
00:00:49,860 --> 00:00:55,500
curriculum lead and Lenny zeltser

9
00:00:52,610 --> 00:00:58,409
Product Management Director at NCR

10
00:00:55,500 --> 00:01:01,320
Corporation and senior faculty member at

11
00:00:58,409 --> 00:01:04,289
sands if during the webcast you have any

12
00:01:01,320 --> 00:01:06,300
questions for Rob or Lenny please enter

13
00:01:04,289 --> 00:01:08,880
them into the questions window located

14
00:01:06,300 --> 00:01:10,710
on the go to webinar interface we will

15
00:01:08,880 --> 00:01:13,770
be answering them during the Q&A session

16
00:01:10,710 --> 00:01:15,660
at the end of the presentation and with

17
00:01:13,770 --> 00:01:21,600
that I'd like to hand the webcast over

18
00:01:15,660 --> 00:01:23,910
to Rob hi my name is Rob Lee and I'm

19
00:01:21,600 --> 00:01:26,610
here with Lemmy Zeltzer and we're really

20
00:01:23,910 --> 00:01:29,670
happy to be with you this afternoon or

21
00:01:26,610 --> 00:01:32,090
this morning where we may be located

22
00:01:29,670 --> 00:01:34,380
I talked to Lenny before this

23
00:01:32,090 --> 00:01:36,720
presentation but I forgot to mention one

24
00:01:34,380 --> 00:01:39,390
thing to him which is every time that we

25
00:01:36,720 --> 00:01:41,459
actually talk about the title where we

26
00:01:39,390 --> 00:01:43,580
say wonder twin powers thought if you

27
00:01:41,459 --> 00:01:45,959
remember zan and jayna from the original

28
00:01:43,580 --> 00:01:49,020
Superfriends show that they both have to

29
00:01:45,959 --> 00:01:50,849
say activate at the same time when he's

30
00:01:49,020 --> 00:01:51,238
like sit there oh please don't help me

31
00:01:50,849 --> 00:01:54,539
do that

32
00:01:51,239 --> 00:01:57,209
but it was kind of a tongue-in-cheek

33
00:01:54,539 --> 00:02:01,200
about the way we're doing here but let's

34
00:01:57,209 --> 00:02:03,830
talk about symptom renee why we're going

35
00:02:01,200 --> 00:02:06,539
to what you're really here to talk about

36
00:02:03,830 --> 00:02:10,378
so one of the things that we've

37
00:02:06,539 --> 00:02:13,860
discovered over the course of our

38
00:02:10,378 --> 00:02:15,660
careers is that there's so many

39
00:02:13,860 --> 00:02:18,450
different tools that are out there in

40
00:02:15,660 --> 00:02:20,989
order to accomplish digital forensics

41
00:02:18,450 --> 00:02:23,670
now our analysis Network forensics

42
00:02:20,989 --> 00:02:26,220
intrusion detection across the board

43
00:02:23,670 --> 00:02:28,319
everyone has their little weight of

44
00:02:26,220 --> 00:02:30,780
doing things and one of the things that

45
00:02:28,319 --> 00:02:32,190
I've always found is that if people at

46
00:02:30,780 --> 00:02:33,930
least start from the right base you know

47
00:02:32,190 --> 00:02:36,090
if you you at least arm someone with the

48
00:02:33,930 --> 00:02:39,750
else at least the basic set of tool set

49
00:02:36,090 --> 00:02:41,730
that they could begin to become really

50
00:02:39,750 --> 00:02:45,510
good a now analyst from

51
00:02:41,730 --> 00:02:48,149
that they are able to take in tweak and

52
00:02:45,510 --> 00:02:50,640
start developing tools on their own one

53
00:02:48,150 --> 00:02:53,970
of the things that we found over the

54
00:02:50,640 --> 00:02:58,200
years that Linux has provided us with a

55
00:02:53,970 --> 00:03:01,680
really good base that has allowed us to

56
00:02:58,200 --> 00:03:04,890
do it very easy to distribute keep the

57
00:03:01,680 --> 00:03:07,500
building in both VMware and and in other

58
00:03:04,890 --> 00:03:10,500
formats that allow a lot of analysts out

59
00:03:07,500 --> 00:03:12,000
there to basically have a workstation

60
00:03:10,500 --> 00:03:16,200
that they could start to learn on and

61
00:03:12,000 --> 00:03:17,910
become quarry analyst on with a lot of

62
00:03:16,200 --> 00:03:19,200
tools and in fact many of them started

63
00:03:17,910 --> 00:03:23,310
to write Carroll tools after they

64
00:03:19,200 --> 00:03:25,170
learned the basics so Linux has provided

65
00:03:23,310 --> 00:03:26,549
us this this really could give the

66
00:03:25,170 --> 00:03:29,849
ability so we want to be able to be here

67
00:03:26,549 --> 00:03:32,060
at all if we didn't have a you know this

68
00:03:29,849 --> 00:03:34,530
really great capability that's out there

69
00:03:32,060 --> 00:03:37,459
and but there's a lot of security tools

70
00:03:34,530 --> 00:03:39,870
that are on Linux gates and so I mean

71
00:03:37,459 --> 00:03:42,000
looking at the security I mean looking

72
00:03:39,870 --> 00:03:43,879
at colleague looking at you know some of

73
00:03:42,000 --> 00:03:47,190
the originals that were out there knob

74
00:03:43,879 --> 00:03:52,319
ecstatics SAT and others then we decided

75
00:03:47,190 --> 00:03:54,780
that mainly out of a need for of what we

76
00:03:52,319 --> 00:03:57,988
do on our daily basis that I started

77
00:03:54,780 --> 00:04:01,680
realizing that perhaps I start sharing

78
00:03:57,989 --> 00:04:03,690
with my students what I actually use in

79
00:04:01,680 --> 00:04:06,540
my casework maybe that provide them a

80
00:04:03,690 --> 00:04:09,030
really decent base that they could begin

81
00:04:06,540 --> 00:04:11,250
to learn from as well and Lenny will

82
00:04:09,030 --> 00:04:13,200
talk about his background for a

83
00:04:11,250 --> 00:04:16,320
developing Linux and and that actually

84
00:04:13,200 --> 00:04:19,579
that time frame when when I started to

85
00:04:16,320 --> 00:04:23,940
do that was actually about in 2006-2007

86
00:04:19,579 --> 00:04:26,250
when I said well let's take my own

87
00:04:23,940 --> 00:04:27,780
system and I'm going to convert it was

88
00:04:26,250 --> 00:04:29,940
on its own well just talk system I said

89
00:04:27,780 --> 00:04:31,859
make that into BM and then I'm gonna

90
00:04:29,940 --> 00:04:34,229
start hitting out that VM and to the

91
00:04:31,860 --> 00:04:36,450
students who it's in the class and about

92
00:04:34,229 --> 00:04:38,340
two three years later when we when we

93
00:04:36,450 --> 00:04:40,650
end up starting to take a look at this

94
00:04:38,340 --> 00:04:41,940
then the BM started its former students

95
00:04:40,650 --> 00:04:44,370
coming back say hey you have an update

96
00:04:41,940 --> 00:04:46,650
to that a lot of actually do and that's

97
00:04:44,370 --> 00:04:49,289
where the civilization sort of becomes

98
00:04:46,650 --> 00:04:51,599
to Babel which is really great so one of

99
00:04:49,289 --> 00:04:52,979
the cool things about system run X when

100
00:04:51,599 --> 00:04:55,110
you look at the capabilities that are

101
00:04:52,979 --> 00:04:57,719
out there they both you're very powerful

102
00:04:55,110 --> 00:04:59,280
and they're all built on Linux you could

103
00:04:57,720 --> 00:05:02,280
use them independently you could use

104
00:04:59,280 --> 00:05:03,539
them together on you could actually also

105
00:05:02,280 --> 00:05:05,280
load the security on and about two other

106
00:05:03,539 --> 00:05:08,128
things on top of it at the same time and

107
00:05:05,280 --> 00:05:10,169
that's one of the reasons why you know

108
00:05:08,129 --> 00:05:11,729
this capability is really cool we also

109
00:05:10,169 --> 00:05:13,159
talked about why don't we just have a

110
00:05:11,729 --> 00:05:15,330
single one why don't why do we have both

111
00:05:13,159 --> 00:05:17,759
that's out there as well I'll get to

112
00:05:15,330 --> 00:05:19,258
that question for a lot of people that

113
00:05:17,759 --> 00:05:21,300
have been using us if Terminix

114
00:05:19,259 --> 00:05:23,069
you know sit for the number cleanse

115
00:05:21,300 --> 00:05:25,590
extend point analysis to the next forum

116
00:05:23,069 --> 00:05:28,199
our analysis portion over here just a

117
00:05:25,590 --> 00:05:31,830
few of the great quotes that are out

118
00:05:28,199 --> 00:05:33,509
there that were Twitter when Luna and I

119
00:05:31,830 --> 00:05:36,060
were out there searching for who's

120
00:05:33,509 --> 00:05:37,469
actually using this and so you see a lot

121
00:05:36,060 --> 00:05:39,719
of people actually taking the

122
00:05:37,469 --> 00:05:42,240
combination of those sift and Linux and

123
00:05:39,719 --> 00:05:44,099
do a single workstation into their own

124
00:05:42,240 --> 00:05:46,289
so it's a I actually like the one

125
00:05:44,099 --> 00:05:47,789
especially from Matt Bennett reminds me

126
00:05:46,289 --> 00:05:50,128
of transformers coming together to form

127
00:05:47,789 --> 00:05:51,810
the super robots and that's definitely

128
00:05:50,129 --> 00:05:54,270
the case and that was really one of our

129
00:05:51,810 --> 00:05:57,029
intents here when we ended up designing

130
00:05:54,270 --> 00:06:00,359
and incorporating engineering the

131
00:05:57,029 --> 00:06:01,830
backend to sift and remix so what I'm

132
00:06:00,360 --> 00:06:04,229
gonna do we're a linear narrative split

133
00:06:01,830 --> 00:06:06,539
this up and he's going to take my mix in

134
00:06:04,229 --> 00:06:08,940
about 15 minutes let me start with sit

135
00:06:06,539 --> 00:06:10,680
and talk about you know some of the

136
00:06:08,940 --> 00:06:12,629
differences but you know as we begin

137
00:06:10,680 --> 00:06:14,639
here just keep in mind that even though

138
00:06:12,629 --> 00:06:16,889
these are all completely separate tool

139
00:06:14,639 --> 00:06:20,159
sets with a little bit of almost zero

140
00:06:16,889 --> 00:06:22,279
overlap they can be combined into a

141
00:06:20,159 --> 00:06:24,000
single super tool set a citroen a

142
00:06:22,279 --> 00:06:24,979
combination that's the wonder twin

143
00:06:24,000 --> 00:06:27,330
powers activate

144
00:06:24,979 --> 00:06:29,279
cited I see money or you're saved

145
00:06:27,330 --> 00:06:30,659
because I forgot to talk to talk to you

146
00:06:29,279 --> 00:06:33,029
about that was gonna be this like one or

147
00:06:30,659 --> 00:06:35,580
two empowers and then you're both

148
00:06:33,029 --> 00:06:39,270
physically but uh the mean I gave here

149
00:06:35,580 --> 00:06:41,330
is that we're going to be talking about

150
00:06:39,270 --> 00:06:43,589
how both of these tools are really

151
00:06:41,330 --> 00:06:45,300
really essential capabilities out there

152
00:06:43,589 --> 00:06:47,490
so the sift

153
00:06:45,300 --> 00:06:51,120
desktop we initially fire up Swift EPO

154
00:06:47,490 --> 00:06:53,250
is basically for anyone who's expecting

155
00:06:51,120 --> 00:06:57,180
a nice pretty shiny GUI with you know

156
00:06:53,250 --> 00:06:58,110
nice menu interface or as some of them

157
00:06:57,180 --> 00:07:00,750
of the field I've always talked about

158
00:06:58,110 --> 00:07:02,550
the forensic eater Pro interface which

159
00:07:00,750 --> 00:07:04,529
is you know would be the end of Hall

160
00:07:02,550 --> 00:07:06,899
human involvement due to forensics

161
00:07:04,529 --> 00:07:08,790
you'll notice here's something for most

162
00:07:06,899 --> 00:07:10,740
analysts that's kind of striking

163
00:07:08,790 --> 00:07:13,640
which is if you're used to in case or

164
00:07:10,740 --> 00:07:15,540
that kind of software's in case or

165
00:07:13,640 --> 00:07:16,979
accessed a bizarre decay

166
00:07:15,540 --> 00:07:18,750
you'll notice here immediately that

167
00:07:16,980 --> 00:07:21,180
there's a blinking prompt that's going

168
00:07:18,750 --> 00:07:22,890
to be in front of you and for the most

169
00:07:21,180 --> 00:07:24,560
part majority of the tools for it we're

170
00:07:22,890 --> 00:07:26,669
gonna be using for digital forensics

171
00:07:24,560 --> 00:07:29,610
inside the Senate are gonna be command

172
00:07:26,670 --> 00:07:31,560
line right up there are some GUI tools I

173
00:07:29,610 --> 00:07:35,130
will mint them they're really cool and

174
00:07:31,560 --> 00:07:37,050
and interesting but for the majority of

175
00:07:35,130 --> 00:07:38,250
our we're gonna be doing is going to be

176
00:07:37,050 --> 00:07:40,290
incorporating many of the different

177
00:07:38,250 --> 00:07:42,300
Python scripts that are out there memory

178
00:07:40,290 --> 00:07:44,610
analysis capability like we call and

179
00:07:42,300 --> 00:07:48,720
volatility timeline analysis

180
00:07:44,610 --> 00:07:51,420
capabilities plazo and you know n of T

181
00:07:48,720 --> 00:07:53,340
parsers and cash parsers and more things

182
00:07:51,420 --> 00:07:55,080
that you would be able to use but

183
00:07:53,340 --> 00:07:57,750
there's really no gooeys a better

184
00:07:55,080 --> 00:07:59,159
sitting behind it before I you know have

185
00:07:57,750 --> 00:08:00,120
everyone turn off at this place is no

186
00:07:59,160 --> 00:08:02,430
this is not for me

187
00:08:00,120 --> 00:08:05,040
one of the reasons why command-line

188
00:08:02,430 --> 00:08:07,320
interface into this it Forex asian is a

189
00:08:05,040 --> 00:08:09,990
really nice thing is that you're able to

190
00:08:07,320 --> 00:08:11,610
script a lot of you know commands

191
00:08:09,990 --> 00:08:13,830
together so when you're trying to do

192
00:08:11,610 --> 00:08:15,540
automated processing the more that your

193
00:08:13,830 --> 00:08:18,240
command line driven the more efficient

194
00:08:15,540 --> 00:08:20,130
you're likely to become you can't script

195
00:08:18,240 --> 00:08:22,620
to do a interface you can't script what

196
00:08:20,130 --> 00:08:25,740
you do tirelessly dandy out when you're

197
00:08:22,620 --> 00:08:27,420
doing the examinations now granted I

198
00:08:25,740 --> 00:08:29,460
will you know not to I've gotten

199
00:08:27,420 --> 00:08:31,260
software's in case and others that they

200
00:08:29,460 --> 00:08:33,829
do have their own scripting capability

201
00:08:31,260 --> 00:08:36,299
in the backend but even got in software

202
00:08:33,830 --> 00:08:37,800
and this is not a dig at them but it's

203
00:08:36,299 --> 00:08:39,870
is actually a Claudie effort is that

204
00:08:37,799 --> 00:08:41,370
they've actually how perforated Python

205
00:08:39,870 --> 00:08:43,349
like scripting into the managed get back

206
00:08:41,370 --> 00:08:45,030
in which now that they've headed that

207
00:08:43,349 --> 00:08:47,640
direction they've actually circled back

208
00:08:45,030 --> 00:08:49,350
to if you're gonna go to the Python why

209
00:08:47,640 --> 00:08:52,140
don't you just down the Python for free

210
00:08:49,350 --> 00:08:53,610
and start coding in Python but again you

211
00:08:52,140 --> 00:08:55,080
know for those who have you know a lot

212
00:08:53,610 --> 00:08:58,080
of us out there who don't know how to

213
00:08:55,080 --> 00:09:00,090
code or are using that doing the face

214
00:08:58,080 --> 00:09:02,130
updated date I definitely see the need

215
00:09:00,090 --> 00:09:04,380
boy you need a little bit of both in

216
00:09:02,130 --> 00:09:06,600
your environments so let's talk about

217
00:09:04,380 --> 00:09:08,070
sift and where to get it you know I

218
00:09:06,600 --> 00:09:11,430
talked about this started at the sands

219
00:09:08,070 --> 00:09:12,840
deeper courses in 2007 and then enough

220
00:09:11,430 --> 00:09:14,609
students were coming up to me after

221
00:09:12,840 --> 00:09:16,260
class or emailing me hey can I get the

222
00:09:14,610 --> 00:09:18,900
latest copy that we decided to put it

223
00:09:16,260 --> 00:09:20,760
online as there's an online distro

224
00:09:18,900 --> 00:09:22,430
started in 2010 that was you know what

225
00:09:20,760 --> 00:09:24,170
we called sift 1

226
00:09:22,430 --> 00:09:25,969
each version of sip from that point

227
00:09:24,170 --> 00:09:29,089
forward is statically build version of

228
00:09:25,970 --> 00:09:30,350
sift you know which if you click to the

229
00:09:29,089 --> 00:09:33,140
right-hand side of the mean that's there

230
00:09:30,350 --> 00:09:36,110
is what if installing apps on Linux is

231
00:09:33,140 --> 00:09:37,760
harder than installing Linux itself now

232
00:09:36,110 --> 00:09:41,000
we joke about this but this is actually

233
00:09:37,760 --> 00:09:43,069
true there's some nice comfortable

234
00:09:41,000 --> 00:09:44,870
little movies out there that talks about

235
00:09:43,070 --> 00:09:47,750
you after we compile Perl you have to

236
00:09:44,870 --> 00:09:49,430
you know know compile this you have to

237
00:09:47,750 --> 00:09:51,020
take the dependencies you have to make

238
00:09:49,430 --> 00:09:52,010
sure your builds are correct well these

239
00:09:51,020 --> 00:09:53,060
are all the things that you actually

240
00:09:52,010 --> 00:09:54,560
have to do when you're building your

241
00:09:53,060 --> 00:09:57,140
tool sets is that there's all these

242
00:09:54,560 --> 00:09:59,209
dependencies on these tools rely on that

243
00:09:57,140 --> 00:10:01,189
if they get out of whack the overall

244
00:09:59,209 --> 00:10:03,560
system is unlikely to work so we

245
00:10:01,190 --> 00:10:08,930
statically built the system for about

246
00:10:03,560 --> 00:10:10,219
four years 51 and 52 or all static build

247
00:10:08,930 --> 00:10:12,260
so you download it you have a static

248
00:10:10,220 --> 00:10:14,420
field really hard to upgrade but it

249
00:10:12,260 --> 00:10:17,450
really didn't allow us to create a

250
00:10:14,420 --> 00:10:20,569
situation in which someone could update

251
00:10:17,450 --> 00:10:23,630
their distribution easily without having

252
00:10:20,570 --> 00:10:26,149
to download a brand new bill so in 2014

253
00:10:23,630 --> 00:10:29,540
um I had lunch with a good friend of

254
00:10:26,149 --> 00:10:31,450
mine Kristin Eric Christianson he and I

255
00:10:29,540 --> 00:10:36,380
started talking about potentially using

256
00:10:31,450 --> 00:10:38,150
the PPA or doing a public repository for

257
00:10:36,380 --> 00:10:40,040
easy updates and that way someone can

258
00:10:38,150 --> 00:10:42,949
build the zip very similar to security

259
00:10:40,040 --> 00:10:44,449
onion on a separate system and it would

260
00:10:42,950 --> 00:10:46,100
just be an install script they could

261
00:10:44,450 --> 00:10:48,290
still download the full vm if they

262
00:10:46,100 --> 00:10:49,760
wanted to but what about updates do they

263
00:10:48,290 --> 00:10:52,310
have to download a game each time so we

264
00:10:49,760 --> 00:10:53,779
wanted to get away from doing that the

265
00:10:52,310 --> 00:10:55,939
hard part here and this is one of the

266
00:10:53,779 --> 00:10:58,670
key reasons so if everyone's like why is

267
00:10:55,940 --> 00:11:00,470
it different wise sift in its own VM and

268
00:10:58,670 --> 00:11:02,900
why is remix in its and another one is

269
00:11:00,470 --> 00:11:05,360
that because it's so difficult to

270
00:11:02,900 --> 00:11:07,339
intertwine all these different tools

271
00:11:05,360 --> 00:11:09,829
together that we have to sometimes be

272
00:11:07,339 --> 00:11:12,079
careful and that we build too large of a

273
00:11:09,829 --> 00:11:14,449
beast where all the dependencies have to

274
00:11:12,079 --> 00:11:15,979
match up simultaneously so where they

275
00:11:14,450 --> 00:11:18,050
may be a really cool Maur and else's

276
00:11:15,980 --> 00:11:20,029
tool when he's able to integrate into

277
00:11:18,050 --> 00:11:21,649
his repository easier well that may

278
00:11:20,029 --> 00:11:23,390
break something in the overall system ah

279
00:11:21,649 --> 00:11:25,070
yeah we're trying to match and keep it

280
00:11:23,390 --> 00:11:26,779
you know so that the to play well

281
00:11:25,070 --> 00:11:28,790
together but there are times that they

282
00:11:26,779 --> 00:11:30,380
do get out of whack because of updates

283
00:11:28,790 --> 00:11:32,689
and dependencies everything like that so

284
00:11:30,380 --> 00:11:34,640
we wanted to keep them separate for that

285
00:11:32,690 --> 00:11:36,380
reason is that it allows us to be a

286
00:11:34,640 --> 00:11:38,000
little bit more agile in our update

287
00:11:36,380 --> 00:11:39,650
without having to worry about the

288
00:11:38,000 --> 00:11:41,630
overall dependencies of thousands of

289
00:11:39,650 --> 00:11:43,550
tools versus the one that were really

290
00:11:41,630 --> 00:11:45,140
focusing on be able to do that job but

291
00:11:43,550 --> 00:11:47,030
having said that we've encountered hate

292
00:11:45,140 --> 00:11:48,980
dependency issues and we quickly try to

293
00:11:47,030 --> 00:11:50,839
address it and we make sure that they're

294
00:11:48,980 --> 00:11:53,660
so compatible with one another but they

295
00:11:50,840 --> 00:11:55,820
do pop up from time to time so what you

296
00:11:53,660 --> 00:11:57,829
see down here is the overall if you have

297
00:11:55,820 --> 00:11:59,840
it a bunch of system and you want to

298
00:11:57,830 --> 00:12:02,030
install the current version of sift not

299
00:11:59,840 --> 00:12:05,150
downloading the Beamer machine all you

300
00:12:02,030 --> 00:12:07,160
have to do is run this w good script now

301
00:12:05,150 --> 00:12:08,870
my friend Phil Hagin may I mean I'll be

302
00:12:07,160 --> 00:12:11,959
watching right now point it out to me

303
00:12:08,870 --> 00:12:13,730
that it's really bad idea to download

304
00:12:11,960 --> 00:12:16,070
and execute something from the internet

305
00:12:13,730 --> 00:12:17,840
you know this is the easiest one line

306
00:12:16,070 --> 00:12:19,270
shot that we have here but if you do

307
00:12:17,840 --> 00:12:21,440
want to download the bootstrap

308
00:12:19,270 --> 00:12:23,420
redirected to a file in your system and

309
00:12:21,440 --> 00:12:26,150
then separately execute it that is

310
00:12:23,420 --> 00:12:27,890
probably better for security but at the

311
00:12:26,150 --> 00:12:30,620
same time I also like being on the show

312
00:12:27,890 --> 00:12:32,449
a single man on one command line would

313
00:12:30,620 --> 00:12:34,580
install this it takes about 30 minutes

314
00:12:32,450 --> 00:12:36,680
to do all the tool installation and

315
00:12:34,580 --> 00:12:38,780
voila at the end of it you'll get boom

316
00:12:36,680 --> 00:12:39,979
safe workstation now for those of you

317
00:12:38,780 --> 00:12:41,540
don't want it to change your desktop

318
00:12:39,980 --> 00:12:43,520
environment there are some options and

319
00:12:41,540 --> 00:12:45,230
maybe guitarra where it will not adopt

320
00:12:43,520 --> 00:12:46,280
the theme or the user account or

321
00:12:45,230 --> 00:12:48,950
anything else will just download the

322
00:12:46,280 --> 00:12:52,100
tools and all of those are found on the

323
00:12:48,950 --> 00:12:53,510
beautifier that's an org site where you

324
00:12:52,100 --> 00:12:55,280
can download the beam from it and it

325
00:12:53,510 --> 00:12:58,760
tells you the different installation

326
00:12:55,280 --> 00:13:01,850
options for the bootstrap that we're

327
00:12:58,760 --> 00:13:04,250
currently using so that websites as I

328
00:13:01,850 --> 00:13:08,200
said here well if you download the VM

329
00:13:04,250 --> 00:13:12,140
from it the VM is downloaded into it OBS

330
00:13:08,200 --> 00:13:14,060
the OVF can be imported into any

331
00:13:12,140 --> 00:13:15,650
virtualization products so if you didn't

332
00:13:14,060 --> 00:13:17,569
want to do the script and install

333
00:13:15,650 --> 00:13:19,160
separately you see I just want to make

334
00:13:17,570 --> 00:13:21,140
it easy for myself come on download VM

335
00:13:19,160 --> 00:13:23,750
just go from there really easy to do

336
00:13:21,140 --> 00:13:27,110
singles that file that you have here our

337
00:13:23,750 --> 00:13:28,550
website will require you log in and then

338
00:13:27,110 --> 00:13:30,830
once you download it you'll see that

339
00:13:28,550 --> 00:13:33,079
there only five sport also see the zip

340
00:13:30,830 --> 00:13:36,560
file it also has a nice little update

341
00:13:33,080 --> 00:13:38,180
how the update sift and when you click

342
00:13:36,560 --> 00:13:40,969
on that basically gives you commands to

343
00:13:38,180 --> 00:13:42,949
do so which will also show you and this

344
00:13:40,970 --> 00:13:44,900
webcast but the main I gave here is the

345
00:13:42,950 --> 00:13:47,510
OVF can be imported into VirtualBox

346
00:13:44,900 --> 00:13:49,760
after being be more products you name it

347
00:13:47,510 --> 00:13:50,150
it's going to be a compatible and I

348
00:13:49,760 --> 00:13:53,090
really good

349
00:13:50,150 --> 00:13:55,569
hats appear to winning because he's the

350
00:13:53,090 --> 00:14:00,200
one who first suggested to you know do

351
00:13:55,570 --> 00:14:02,540
the open format files for be able to

352
00:14:00,200 --> 00:14:05,030
import in any virtualization product

353
00:14:02,540 --> 00:14:06,980
that's out there so it is it is nice in

354
00:14:05,030 --> 00:14:09,170
that regarding to an extent what we

355
00:14:06,980 --> 00:14:11,300
found here as well is that I routinely

356
00:14:09,170 --> 00:14:13,010
see sift in different labs and

357
00:14:11,300 --> 00:14:17,630
environments I was just at a meeting

358
00:14:13,010 --> 00:14:19,250
earlier this week at a range a target

359
00:14:17,630 --> 00:14:21,500
range where it all returns written notes

360
00:14:19,250 --> 00:14:23,210
are on it and therefore indicators we're

361
00:14:21,500 --> 00:14:25,370
using the support station as part of

362
00:14:23,210 --> 00:14:26,450
that range which is really nice to see

363
00:14:25,370 --> 00:14:28,100
now so it's become a really popular

364
00:14:26,450 --> 00:14:30,380
product that's out there for free

365
00:14:28,100 --> 00:14:32,210
product and I'm really proud for the

366
00:14:30,380 --> 00:14:35,210
updates that both erika christensen and

367
00:14:32,210 --> 00:14:38,330
i are continually trying to develop and

368
00:14:35,210 --> 00:14:40,970
keep that up to date you know as much as

369
00:14:38,330 --> 00:14:42,770
possible without breaking anything

370
00:14:40,970 --> 00:14:45,110
now let's talk about keeping it up to

371
00:14:42,770 --> 00:14:48,290
date so once you have it downloaded and

372
00:14:45,110 --> 00:14:51,770
you wanted to update the support station

373
00:14:48,290 --> 00:14:53,930
it is a simple command update - sift and

374
00:14:51,770 --> 00:14:58,040
what this will do is go out to the

375
00:14:53,930 --> 00:15:00,319
latest bootstrap and begin to run the

376
00:14:58,040 --> 00:15:02,000
bootstrap script one more time and it

377
00:15:00,320 --> 00:15:04,160
has a series of options in there that

378
00:15:02,000 --> 00:15:05,750
it's going to run for an update versus

379
00:15:04,160 --> 00:15:07,160
an international install that way will

380
00:15:05,750 --> 00:15:10,280
not break anything that you currently

381
00:15:07,160 --> 00:15:12,140
have on the system it will update all -

382
00:15:10,280 --> 00:15:14,030
all the latest tool sets that we've

383
00:15:12,140 --> 00:15:16,370
configured and tested into the back and

384
00:15:14,030 --> 00:15:17,959
repository and it will keep those

385
00:15:16,370 --> 00:15:20,330
up-to-date on the system we're currently

386
00:15:17,960 --> 00:15:22,160
looking at about two or three major

387
00:15:20,330 --> 00:15:24,380
updates a year once we get the

388
00:15:22,160 --> 00:15:25,550
repository is set in dependencies

389
00:15:24,380 --> 00:15:28,280
checked and go through a little bit of

390
00:15:25,550 --> 00:15:30,949
testing so once you get to a point where

391
00:15:28,280 --> 00:15:33,260
you doing the initial install or we have

392
00:15:30,950 --> 00:15:34,910
the VMware you download it of the VM you

393
00:15:33,260 --> 00:15:36,620
download it you want to double check if

394
00:15:34,910 --> 00:15:38,300
it's totally up to date just like you do

395
00:15:36,620 --> 00:15:40,430
on Windows just run the update script

396
00:15:38,300 --> 00:15:43,459
it'll make sure it's gonna connect out

397
00:15:40,430 --> 00:15:46,219
to the current repo and download all the

398
00:15:43,460 --> 00:15:48,170
tools what about the tools what does

399
00:15:46,220 --> 00:15:50,780
this thing have that's so interesting

400
00:15:48,170 --> 00:15:53,810
and special well honestly we want to

401
00:15:50,780 --> 00:15:55,880
have a civilization if it were not for

402
00:15:53,810 --> 00:16:00,050
the incredible and awesome development

403
00:15:55,880 --> 00:16:02,720
of hundreds of developers working in the

404
00:16:00,050 --> 00:16:03,889
field out there you know individuals

405
00:16:02,720 --> 00:16:06,649
like the ball

406
00:16:03,889 --> 00:16:09,589
hildie team the google ir team which

407
00:16:06,649 --> 00:16:12,410
includes the we call time sketch girl

408
00:16:09,589 --> 00:16:15,109
folks that are out there anyone who's

409
00:16:12,410 --> 00:16:17,238
ended up writing a single Python script

410
00:16:15,109 --> 00:16:19,459
you know are the Hat

411
00:16:17,239 --> 00:16:21,589
you know tip goes directly to that

412
00:16:19,459 --> 00:16:24,919
community the hard part though has

413
00:16:21,589 --> 00:16:27,319
always been is that everyone has their

414
00:16:24,919 --> 00:16:29,689
own little enclave of tools and there's

415
00:16:27,319 --> 00:16:31,069
never been a really easy way to share

416
00:16:29,689 --> 00:16:34,099
all those tools into a single

417
00:16:31,069 --> 00:16:35,569
environment so myself and Eric have

418
00:16:34,100 --> 00:16:38,089
reached out to many of these developers

419
00:16:35,569 --> 00:16:40,399
and if their tool sets are in github if

420
00:16:38,089 --> 00:16:41,660
their tool sets are you know right for

421
00:16:40,399 --> 00:16:43,669
potentially being able to be wrapped

422
00:16:41,660 --> 00:16:45,410
into a package we work with the tool

423
00:16:43,669 --> 00:16:47,359
authors and saying here's how easy it is

424
00:16:45,410 --> 00:16:49,519
so if you make updates to your tools

425
00:16:47,359 --> 00:16:52,129
it'll automatically update anyone who

426
00:16:49,519 --> 00:16:54,290
uses your tools on those vacuum systems

427
00:16:52,129 --> 00:16:56,359
so we're trying to get all these

428
00:16:54,290 --> 00:16:58,879
enclaves as awesome development working

429
00:16:56,359 --> 00:17:00,859
together so you know sift will take care

430
00:16:58,879 --> 00:17:02,749
of the sharing where they can only

431
00:17:00,859 --> 00:17:04,789
concentrate on the development of you

432
00:17:02,749 --> 00:17:06,230
know an updates to their tools and as a

433
00:17:04,789 --> 00:17:08,289
result what we have here is the

434
00:17:06,230 --> 00:17:11,750
integration of dismounting capability

435
00:17:08,289 --> 00:17:15,740
registry examination timeline analysis

436
00:17:11,750 --> 00:17:17,720
memory analysis you name it we have full

437
00:17:15,740 --> 00:17:19,909
capabilities for doing endpoint memory

438
00:17:17,720 --> 00:17:22,549
and network forensics into a single

439
00:17:19,909 --> 00:17:23,929
package and we kind of stop the line at

440
00:17:22,549 --> 00:17:25,849
malware analysis because we start

441
00:17:23,929 --> 00:17:29,120
getting into a lot of the tool sets that

442
00:17:25,849 --> 00:17:30,469
we live over on Linux side you know we

443
00:17:29,120 --> 00:17:31,969
do have some of it like you know some of

444
00:17:30,470 --> 00:17:33,559
the PDF parsers that kind of thing

445
00:17:31,970 --> 00:17:35,690
there's some intersection there but in

446
00:17:33,559 --> 00:17:38,200
most cases were primarily leaving the

447
00:17:35,690 --> 00:17:39,769
full malware analysis because the

448
00:17:38,200 --> 00:17:41,600
sandboxing and some of the other things

449
00:17:39,769 --> 00:17:43,250
that you do there over to the next

450
00:17:41,600 --> 00:17:44,510
component and as you can see here

451
00:17:43,250 --> 00:17:46,610
there's a lot of different tools this is

452
00:17:44,510 --> 00:17:50,230
just a couple examples that of tools

453
00:17:46,610 --> 00:17:52,580
that do exist on the full system when

454
00:17:50,230 --> 00:17:54,559
you end up looking at all the tools and

455
00:17:52,580 --> 00:17:56,960
capabilities that added on there are

456
00:17:54,559 --> 00:17:59,960
over 400 different tools that are on the

457
00:17:56,960 --> 00:18:01,669
overall Swift workstations one of the

458
00:17:59,960 --> 00:18:04,610
other things that we pride ourselves on

459
00:18:01,669 --> 00:18:06,679
is we'd like to allow the community to

460
00:18:04,610 --> 00:18:08,779
you know those who are contributing to

461
00:18:06,679 --> 00:18:11,000
larger keep the buildings like

462
00:18:08,779 --> 00:18:13,399
volatility and we call on others that if

463
00:18:11,000 --> 00:18:15,529
they have a standalone plugin that

464
00:18:13,399 --> 00:18:17,219
they've developed that we can reach out

465
00:18:15,529 --> 00:18:18,780
for the Claudian developer and these

466
00:18:17,220 --> 00:18:23,270
we could add with their party plug-in

467
00:18:18,780 --> 00:18:25,770
into the distro of those capabilities

468
00:18:23,270 --> 00:18:27,780
now why it doesn't you know volatility

469
00:18:25,770 --> 00:18:28,290
we call do that every single one of the

470
00:18:27,780 --> 00:18:30,330
plugins

471
00:18:28,290 --> 00:18:31,830
well they point to them but again trying

472
00:18:30,330 --> 00:18:33,270
to you know they're worried about the

473
00:18:31,830 --> 00:18:35,399
dependencies within their core tool

474
00:18:33,270 --> 00:18:36,960
trying to match all the dependencies

475
00:18:35,400 --> 00:18:38,850
across all the plugins and make sure

476
00:18:36,960 --> 00:18:41,220
that they work in the current code base

477
00:18:38,850 --> 00:18:42,929
it takes a lot more testing for every

478
00:18:41,220 --> 00:18:44,400
additional plugin that you add to it so

479
00:18:42,930 --> 00:18:45,900
they you don't want to have to have that

480
00:18:44,400 --> 00:18:47,810
additional pressure unless you do that

481
00:18:45,900 --> 00:18:50,040
but again it's there's a lot of back-end

482
00:18:47,810 --> 00:18:51,540
you know work some of the plugins are in

483
00:18:50,040 --> 00:18:53,520
there but the main idea here that we're

484
00:18:51,540 --> 00:18:55,920
trying to get to you is that we try to

485
00:18:53,520 --> 00:18:56,970
adopt with third-party plugins out in

486
00:18:55,920 --> 00:19:00,270
there and here's some of the ones I've

487
00:18:56,970 --> 00:19:03,270
ever volatility that have been added to

488
00:19:00,270 --> 00:19:04,590
of the support station so you know some

489
00:19:03,270 --> 00:19:06,810
people walk by and say oh I don't have a

490
00:19:04,590 --> 00:19:08,040
plug-in on mine it's mainly because you

491
00:19:06,810 --> 00:19:10,350
know a lot of these are found on

492
00:19:08,040 --> 00:19:12,000
third-party websites someone does a blog

493
00:19:10,350 --> 00:19:14,370
article about it we find it useful we

494
00:19:12,000 --> 00:19:16,020
pull it in you know but again sometimes

495
00:19:14,370 --> 00:19:18,149
it breaks as soon as volatility updates

496
00:19:16,020 --> 00:19:19,830
where we call updates well we have to go

497
00:19:18,150 --> 00:19:22,080
back to the author and say hey it looks

498
00:19:19,830 --> 00:19:23,699
looks like your plugin broke do you need

499
00:19:22,080 --> 00:19:25,290
to update it and if it gets updated and

500
00:19:23,700 --> 00:19:28,710
over add it back into the current

501
00:19:25,290 --> 00:19:30,659
updates to the civilization one of the

502
00:19:28,710 --> 00:19:32,940
other things you get to is you can take

503
00:19:30,660 --> 00:19:37,830
a look at our red poster and that's out

504
00:19:32,940 --> 00:19:39,660
there about artifacts related to Windows

505
00:19:37,830 --> 00:19:41,340
nearly every single one of these

506
00:19:39,660 --> 00:19:44,250
artifacts that are on your for example

507
00:19:41,340 --> 00:19:46,590
programming file down the file opening

508
00:19:44,250 --> 00:19:48,720
we literally will have a capability

509
00:19:46,590 --> 00:19:50,429
within this historic sation to be able

510
00:19:48,720 --> 00:19:53,250
to analyze every single one of these

511
00:19:50,430 --> 00:19:54,870
artifacts and so when you end up saying

512
00:19:53,250 --> 00:19:57,600
here's our artifact there's literally

513
00:19:54,870 --> 00:20:00,239
what I recommend people to do is get on

514
00:19:57,600 --> 00:20:01,919
sift and usually the artifact that's

515
00:20:00,240 --> 00:20:04,140
able to handle that you just start

516
00:20:01,920 --> 00:20:07,230
typing the name of the part of it if you

517
00:20:04,140 --> 00:20:08,670
type am cache for example and hit tab I

518
00:20:07,230 --> 00:20:10,140
guarantee there's a tool on the system

519
00:20:08,670 --> 00:20:12,270
prefab same thing prae

520
00:20:10,140 --> 00:20:13,800
type tab tab and the same thing you'll

521
00:20:12,270 --> 00:20:14,430
see if there's anything that matches

522
00:20:13,800 --> 00:20:16,830
prefetched

523
00:20:14,430 --> 00:20:18,960
a lot of the tools are named after the

524
00:20:16,830 --> 00:20:20,580
artifact that they opened up parsing so

525
00:20:18,960 --> 00:20:23,070
my recommendation is to take a look at

526
00:20:20,580 --> 00:20:26,699
that and cache is a really good example

527
00:20:23,070 --> 00:20:28,139
that or the recent file caps RFC that

528
00:20:26,700 --> 00:20:29,580
you potentially be able to pull the data

529
00:20:28,140 --> 00:20:30,720
out and this is just for evidence of

530
00:20:29,580 --> 00:20:33,570
execution on

531
00:20:30,720 --> 00:20:35,610
our cases where you know the standard

532
00:20:33,570 --> 00:20:37,530
evidence of execution has not found in

533
00:20:35,610 --> 00:20:38,850
memory and other locations and we still

534
00:20:37,530 --> 00:20:41,879
need to be able to show that a single

535
00:20:38,850 --> 00:20:44,730
tool was executed on a host so here's an

536
00:20:41,880 --> 00:20:46,770
example of that you know similar

537
00:20:44,730 --> 00:20:49,260
capability to a compact cache through

538
00:20:46,770 --> 00:20:51,570
the shrimp are sir again just look at

539
00:20:49,260 --> 00:20:53,190
the name here that you have here is like

540
00:20:51,570 --> 00:20:55,260
Chum cash you know you just like to me

541
00:20:53,190 --> 00:20:56,370
that shim or sometimes you know upper

542
00:20:55,260 --> 00:20:58,200
case lower case and what you see here

543
00:20:56,370 --> 00:21:01,350
there's a Python script in fact called

544
00:20:58,200 --> 00:21:06,330
SH and Bhaskar sir and this one is

545
00:21:01,350 --> 00:21:07,559
written by I believe oh shoot I think

546
00:21:06,330 --> 00:21:09,720
it's Eric Zimmerman but I have to go

547
00:21:07,559 --> 00:21:11,850
back and check but the same cache parser

548
00:21:09,720 --> 00:21:14,190
you pointed out the high file and outs

549
00:21:11,850 --> 00:21:15,658
gonna pop a CSV file now for those who

550
00:21:14,190 --> 00:21:17,130
are looking at the same cache parser

551
00:21:15,659 --> 00:21:19,500
this is the type of thing that sift is

552
00:21:17,130 --> 00:21:21,150
able to do for you is that you need to

553
00:21:19,500 --> 00:21:22,799
know a lot about the artifact if you

554
00:21:21,150 --> 00:21:26,220
just get a CSV output and it looks like

555
00:21:22,799 --> 00:21:27,629
this you may not completely understand

556
00:21:26,220 --> 00:21:30,480
what the artifacts telling you see last

557
00:21:27,630 --> 00:21:32,760
modified time a path and an exec flag a

558
00:21:30,480 --> 00:21:34,590
lot of people make a mistake here you're

559
00:21:32,760 --> 00:21:36,179
not realizing that blast quantify time

560
00:21:34,590 --> 00:21:38,399
is the actual time of the files last

561
00:21:36,179 --> 00:21:40,950
modification time and we're never gonna

562
00:21:38,400 --> 00:21:43,140
know the actual time that spinlock for

563
00:21:40,950 --> 00:21:45,240
example was executed all we know is that

564
00:21:43,140 --> 00:21:47,549
was executed because it's the exact I

565
00:21:45,240 --> 00:21:50,039
was here and this is why you know even

566
00:21:47,549 --> 00:21:51,780
though we show the capabilities a formal

567
00:21:50,039 --> 00:21:53,460
understanding in the artifacts a parsing

568
00:21:51,780 --> 00:21:55,770
is still something that you need to

569
00:21:53,460 --> 00:21:59,539
master in order to get full use of the

570
00:21:55,770 --> 00:22:02,039
toolset this is there's no nice little

571
00:21:59,539 --> 00:22:03,240
documentation of you know when you run

572
00:22:02,039 --> 00:22:05,070
the tool if here's how you interpret the

573
00:22:03,240 --> 00:22:06,840
output they kind of leave that to you

574
00:22:05,070 --> 00:22:08,789
but at least all the tools are at least

575
00:22:06,840 --> 00:22:11,428
under one engine in one roof at this

576
00:22:08,789 --> 00:22:13,250
point here's another example of using

577
00:22:11,429 --> 00:22:15,179
the ball of I'm shadow

578
00:22:13,250 --> 00:22:16,320
capabilities within the support station

579
00:22:15,179 --> 00:22:18,390
to be able to produce an overall

580
00:22:16,320 --> 00:22:21,059
timeline and what I'm showing you here

581
00:22:18,390 --> 00:22:23,520
in these three steps is basically using

582
00:22:21,059 --> 00:22:26,190
the F response capabilities of sift to

583
00:22:23,520 --> 00:22:29,610
reach out to remote system that is now

584
00:22:26,190 --> 00:22:31,650
now that ad FS DC and then following

585
00:22:29,610 --> 00:22:33,719
that you run longer timeline against

586
00:22:31,650 --> 00:22:35,789
that remotely mounted device on the

587
00:22:33,720 --> 00:22:37,679
timeline then you've run into an a

588
00:22:35,789 --> 00:22:39,480
filter for the overall output here's

589
00:22:37,679 --> 00:22:41,130
just three steps we'll be able to

590
00:22:39,480 --> 00:22:43,860
produce a timeline of a remote system

591
00:22:41,130 --> 00:22:44,160
using sip workstation and so but it does

592
00:22:43,860 --> 00:22:46,469
show

593
00:22:44,160 --> 00:22:48,050
there are three tools here within SIF

594
00:22:46,470 --> 00:22:51,390
that all have to work with one another

595
00:22:48,050 --> 00:22:54,000
is that we have to be able to remotely

596
00:22:51,390 --> 00:22:56,460
connect to remote system run long to

597
00:22:54,000 --> 00:22:58,260
timeline across you know the the system

598
00:22:56,460 --> 00:22:59,370
it won't have you to do a demo this one

599
00:22:58,260 --> 00:23:00,330
here it's like well I didn't see the

600
00:22:59,370 --> 00:23:01,770
snapshots in there

601
00:23:00,330 --> 00:23:03,990
what is he talking about the volume

602
00:23:01,770 --> 00:23:07,050
shadow stuff and then we end up

603
00:23:03,990 --> 00:23:10,710
filtering the timeline on the backend

604
00:23:07,050 --> 00:23:12,090
side um so I'll be doing a demo here for

605
00:23:10,710 --> 00:23:14,940
some of these capabilities in just a

606
00:23:12,090 --> 00:23:17,070
second one of the newer capabilities

607
00:23:14,940 --> 00:23:20,880
within sift in the latest versions of

608
00:23:17,070 --> 00:23:26,760
six that we have instantiated is the

609
00:23:20,880 --> 00:23:28,620
backend elf stack that exists on sip the

610
00:23:26,760 --> 00:23:31,500
elk stands for glass the search logstash

611
00:23:28,620 --> 00:23:33,570
and Cabana which makes a big data

612
00:23:31,500 --> 00:23:36,750
capability a lot easier now the reason

613
00:23:33,570 --> 00:23:38,970
I'm mentioning this is that our network

614
00:23:36,750 --> 00:23:42,630
forensics instructor and lead author

615
00:23:38,970 --> 00:23:44,610
Phil Hagen has been using elk stack for

616
00:23:42,630 --> 00:23:46,860
a lot of processing of a massive amount

617
00:23:44,610 --> 00:23:49,169
of network forensic data in order to

618
00:23:46,860 --> 00:23:51,060
produce overall net flow data

619
00:23:49,170 --> 00:23:52,710
bronze meal to produce heat maps and

620
00:23:51,060 --> 00:23:54,929
more now the reason why this is

621
00:23:52,710 --> 00:23:56,910
interesting for us is that for anyone

622
00:23:54,930 --> 00:23:59,100
who's actually on the back inside of

623
00:23:56,910 --> 00:24:01,650
using anything that's for big data the

624
00:23:59,100 --> 00:24:04,110
elk interface is that you'll know is

625
00:24:01,650 --> 00:24:07,920
that requires consistent and constant

626
00:24:04,110 --> 00:24:09,179
backend modifications sift just like you

627
00:24:07,920 --> 00:24:11,580
know if you think of sift like basic

628
00:24:09,180 --> 00:24:14,130
training for the army it's almost the

629
00:24:11,580 --> 00:24:15,929
same is that it gets you started but

630
00:24:14,130 --> 00:24:17,790
once you get that thing installed you

631
00:24:15,930 --> 00:24:20,220
start tweaking it you start doing your

632
00:24:17,790 --> 00:24:21,720
own templates in order to be able to

633
00:24:20,220 --> 00:24:24,630
make it working better now

634
00:24:21,720 --> 00:24:25,950
ELQ exists by default but you probably

635
00:24:24,630 --> 00:24:27,480
have to tweak it a lot in order to get

636
00:24:25,950 --> 00:24:29,220
the same output that you'll need to see

637
00:24:27,480 --> 00:24:31,740
in order to make it work and that's

638
00:24:29,220 --> 00:24:33,120
where you know there's a lot of you know

639
00:24:31,740 --> 00:24:34,860
interesting juice out there that you

640
00:24:33,120 --> 00:24:36,719
know different variations on set that be

641
00:24:34,860 --> 00:24:38,729
proud but it all starts from the you

642
00:24:36,720 --> 00:24:41,460
know the family tree trunk coming from

643
00:24:38,730 --> 00:24:43,500
sits initial install now on this example

644
00:24:41,460 --> 00:24:44,850
here if you end up taking a look at the

645
00:24:43,500 --> 00:24:46,350
heat map on the right hand side you know

646
00:24:44,850 --> 00:24:48,780
Phil is taking me through this earlier

647
00:24:46,350 --> 00:24:51,330
in the week when we were both up in

648
00:24:48,780 --> 00:24:52,500
Boston meeting with the customer one of

649
00:24:51,330 --> 00:24:53,909
the things that he was showing me here

650
00:24:52,500 --> 00:24:55,380
is on the upper right hand side of the

651
00:24:53,910 --> 00:24:57,140
screen you see a map with it you know

652
00:24:55,380 --> 00:24:58,970
basically shows angry

653
00:24:57,140 --> 00:25:01,700
uh you know where if you look in the

654
00:24:58,970 --> 00:25:03,560
greenside it's like that is green a lot

655
00:25:01,700 --> 00:25:05,900
of from China that's right there what

656
00:25:03,560 --> 00:25:08,030
that ends up representing is the number

657
00:25:05,900 --> 00:25:09,890
of failed login attempts for secure

658
00:25:08,030 --> 00:25:11,750
shell that is hitting his back and

659
00:25:09,890 --> 00:25:13,460
server and is basically showing this

660
00:25:11,750 --> 00:25:15,020
heat map they are using ELQ as the

661
00:25:13,460 --> 00:25:16,670
backend to be able to produce this data

662
00:25:15,020 --> 00:25:18,800
to be able to show where in the world

663
00:25:16,670 --> 00:25:21,020
are most of these failed login attempts

664
00:25:18,800 --> 00:25:24,530
coming from that one beneath it is the

665
00:25:21,020 --> 00:25:25,879
failed WordPress login attempts that are

666
00:25:24,530 --> 00:25:27,830
going on of course that's coming from

667
00:25:25,880 --> 00:25:29,390
everywhere but again you see the heat

668
00:25:27,830 --> 00:25:31,610
map there all the ones in green just

669
00:25:29,390 --> 00:25:33,740
showing all the different attempts into

670
00:25:31,610 --> 00:25:35,449
the back and WordPress and on the left

671
00:25:33,740 --> 00:25:36,650
hand side you get some net flow output

672
00:25:35,450 --> 00:25:38,600
data you see someone you know like

673
00:25:36,650 --> 00:25:40,490
terabytes of data being transferred and

674
00:25:38,600 --> 00:25:42,350
more and just some additional heat maps

675
00:25:40,490 --> 00:25:44,360
that you're able to see it or where it

676
00:25:42,350 --> 00:25:48,679
different things are going but all this

677
00:25:44,360 --> 00:25:51,229
is produced by a back-end elq stack that

678
00:25:48,680 --> 00:25:53,360
is trying to help out in the user gear

679
00:25:51,230 --> 00:25:56,360
really make easy use of massive amounts

680
00:25:53,360 --> 00:25:59,469
of net flow Network data syslog data and

681
00:25:56,360 --> 00:26:02,540
more and SIF provides the base for a

682
00:25:59,470 --> 00:26:05,900
network for indicator or someone using

683
00:26:02,540 --> 00:26:07,730
plaza or or future capabilities out

684
00:26:05,900 --> 00:26:10,520
there to do the same let's talk about

685
00:26:07,730 --> 00:26:12,020
pazzo one of the newer capabilities that

686
00:26:10,520 --> 00:26:14,629
the Google inch response team has

687
00:26:12,020 --> 00:26:17,420
released formerly over the past year is

688
00:26:14,630 --> 00:26:18,800
time sketch and time sketch is actually

689
00:26:17,420 --> 00:26:21,080
installed by default on the sift

690
00:26:18,800 --> 00:26:23,300
workstation which will now make analysis

691
00:26:21,080 --> 00:26:26,510
of plaza or belong to time line output

692
00:26:23,300 --> 00:26:28,940
much easier to examine so in again how

693
00:26:26,510 --> 00:26:30,379
would you import it into time sketched

694
00:26:28,940 --> 00:26:32,450
at this point you run the piece sort

695
00:26:30,380 --> 00:26:35,240
after you create your dump and then it

696
00:26:32,450 --> 00:26:38,060
would pull it in to the elasticsearch

697
00:26:35,240 --> 00:26:40,030
backend in which you basically pull up a

698
00:26:38,060 --> 00:26:44,300
web interface and start to inquiries

699
00:26:40,030 --> 00:26:46,370
inside the stack that'll be stacked to

700
00:26:44,300 --> 00:26:48,020
be able to pull up different types of

701
00:26:46,370 --> 00:26:50,149
information here we end up seeing is

702
00:26:48,020 --> 00:26:52,460
visit time frame with data in the lower

703
00:26:50,150 --> 00:26:54,980
right hand corner you see a histogram of

704
00:26:52,460 --> 00:26:56,030
you know what time periods have the most

705
00:26:54,980 --> 00:26:58,250
activity

706
00:26:56,030 --> 00:26:59,780
and so there's a lot of different views

707
00:26:58,250 --> 00:27:01,370
within time sketch but some of the newer

708
00:26:59,780 --> 00:27:04,700
capabilities that were trying to build

709
00:27:01,370 --> 00:27:06,379
in to sift definitely do exist

710
00:27:04,700 --> 00:27:07,940
so one of the things I wanted to do real

711
00:27:06,380 --> 00:27:10,770
quick to just do a quick a couple quick

712
00:27:07,940 --> 00:27:13,080
live demos and then we're gonna hand

713
00:27:10,770 --> 00:27:15,059
- Lenny so he could talk about room

714
00:27:13,080 --> 00:27:16,678
mates and how that's going to fit in one

715
00:27:15,059 --> 00:27:19,460
of the things that under the demonstrate

716
00:27:16,679 --> 00:27:21,929
here right off the bat is the building

717
00:27:19,460 --> 00:27:26,010
for the civil rotation to be able to

718
00:27:21,929 --> 00:27:29,429
handle of any type of disk image that

719
00:27:26,010 --> 00:27:33,950
we're going to be using so to kick this

720
00:27:29,429 --> 00:27:33,950
off I'm going to the CD into my pieces

721
00:27:34,010 --> 00:27:38,100
27:32

722
00:27:35,160 --> 00:27:42,090
in Romanovs C Drive directory and notice

723
00:27:38,100 --> 00:27:43,770
in here we see a single via one file so

724
00:27:42,090 --> 00:27:46,889
in order to about that Ghia one file

725
00:27:43,770 --> 00:27:50,429
which most forensic Gators might use we

726
00:27:46,890 --> 00:27:53,910
have to go to a root user and then we

727
00:27:50,429 --> 00:27:56,790
would run into a call to W mount this

728
00:27:53,910 --> 00:27:58,800
capability of this library by the way

729
00:27:56,790 --> 00:28:00,360
back in is written by welcome mats of

730
00:27:58,800 --> 00:28:02,639
one I'm also on the Google in response

731
00:28:00,360 --> 00:28:04,830
team again the hack tip that you know

732
00:28:02,640 --> 00:28:06,179
all these tools are made up of other

733
00:28:04,830 --> 00:28:08,460
individuals that were trying to combine

734
00:28:06,179 --> 00:28:10,170
under one roof to make it a single

735
00:28:08,460 --> 00:28:12,870
interface to make it really easy to do

736
00:28:10,170 --> 00:28:15,690
forensics well we point at the l1 image

737
00:28:12,870 --> 00:28:17,669
and we point it at our mount point is

738
00:28:15,690 --> 00:28:23,010
mount UWF and what this is going to do

739
00:28:17,670 --> 00:28:27,120
is immediately show us the raw disk

740
00:28:23,010 --> 00:28:29,010
image associated with that compress to

741
00:28:27,120 --> 00:28:30,899
disk image that's in sitting in here so

742
00:28:29,010 --> 00:28:33,030
originally it was probably about ten

743
00:28:30,900 --> 00:28:35,970
gigabytes the uncompressed one the brawl

744
00:28:33,030 --> 00:28:38,879
one you now have access to is 25

745
00:28:35,970 --> 00:28:41,550
gigabytes and size now what we end up

746
00:28:38,880 --> 00:28:46,280
having here if we wanted to mount that

747
00:28:41,550 --> 00:28:49,860
image onto our system I could write a

748
00:28:46,280 --> 00:28:56,280
command now that show we'd only loop

749
00:28:49,860 --> 00:28:57,080
show sis files streams interface oops

750
00:28:56,280 --> 00:28:59,670
sorry

751
00:28:57,080 --> 00:29:01,590
equals windows what this does is this

752
00:28:59,670 --> 00:29:03,870
gonna mount this disk image and we'd

753
00:29:01,590 --> 00:29:06,600
only mode on the loopback treated as a

754
00:29:03,870 --> 00:29:09,059
normal hard drive Josas files is going

755
00:29:06,600 --> 00:29:11,939
to unearth some of the protected system

756
00:29:09,059 --> 00:29:13,770
files on NTFS partitions that's which

757
00:29:11,940 --> 00:29:16,500
dollar sign in the team and streams

758
00:29:13,770 --> 00:29:18,150
interface equals windows means that you

759
00:29:16,500 --> 00:29:20,040
could actually call alternate data

760
00:29:18,150 --> 00:29:21,900
streams from the Linux command prompt

761
00:29:20,040 --> 00:29:24,360
like you could from a Windows command

762
00:29:21,900 --> 00:29:27,960
prompt so anyone who's doing you know

763
00:29:24,360 --> 00:29:29,669
cat text : hidden dot txt you would be

764
00:29:27,960 --> 00:29:31,799
able to use the : interface to be able

765
00:29:29,670 --> 00:29:34,140
to directly access your alternate data

766
00:29:31,799 --> 00:29:36,990
streams so you mount what you're gonna

767
00:29:34,140 --> 00:29:40,500
mount where you gonna mount it to and so

768
00:29:36,990 --> 00:29:41,730
we do the mount what we're so we're

769
00:29:40,500 --> 00:29:43,740
going to mount you to be if one the

770
00:29:41,730 --> 00:29:48,660
wrong image onto that one goes now the

771
00:29:43,740 --> 00:29:51,870
press return and in that directory we

772
00:29:48,660 --> 00:29:54,030
spent we will now see all the files and

773
00:29:51,870 --> 00:29:57,928
folders that you typically think to see

774
00:29:54,030 --> 00:29:59,910
on a hook system including the dollar

775
00:29:57,929 --> 00:30:01,890
sign of team here the log signed a lot

776
00:29:59,910 --> 00:30:05,490
of these hidden files that ordinarily

777
00:30:01,890 --> 00:30:08,280
you would not probably see on that host

778
00:30:05,490 --> 00:30:10,740
now to stop here real quick for anyone

779
00:30:08,280 --> 00:30:13,440
who gets frustrated with typing this

780
00:30:10,740 --> 00:30:15,179
command multiple times one of the things

781
00:30:13,440 --> 00:30:17,910
you could do is you'll notice in our

782
00:30:15,179 --> 00:30:19,410
alias outputs we have an alias for that

783
00:30:17,910 --> 00:30:20,850
amount of command a simple command we

784
00:30:19,410 --> 00:30:23,520
just simply call them out when it's

785
00:30:20,850 --> 00:30:25,320
mounting a windows a location they are

786
00:30:23,520 --> 00:30:27,900
so instead of typing that type of thing

787
00:30:25,320 --> 00:30:30,750
as another example I could type mount

788
00:30:27,900 --> 00:30:33,660
when has to mount when there's mountain

789
00:30:30,750 --> 00:30:36,390
2 for example and it's done it basically

790
00:30:33,660 --> 00:30:37,530
will accomplish the same thing now while

791
00:30:36,390 --> 00:30:39,419
you're here though if you want to get

792
00:30:37,530 --> 00:30:41,220
access to the buying shadow information

793
00:30:39,419 --> 00:30:43,410
you'll notice that there's a tool called

794
00:30:41,220 --> 00:30:47,250
the shadow info also written by Wacom

795
00:30:43,410 --> 00:30:49,440
that's that when you parse the raw disk

796
00:30:47,250 --> 00:30:51,210
image that you now have access to it'll

797
00:30:49,440 --> 00:30:53,250
expose all the volumes shadows that you

798
00:30:51,210 --> 00:30:57,600
have on the back inside we have a long

799
00:30:53,250 --> 00:31:00,030
shadow snapshot on March 15 to 23rd 31st

800
00:30:57,600 --> 00:31:05,129
in a course on April 4th in year 2012

801
00:31:00,030 --> 00:31:07,590
this is a essentially a volume level

802
00:31:05,130 --> 00:31:09,570
back duct that reverts back to that day

803
00:31:07,590 --> 00:31:12,270
you see files folders that may be

804
00:31:09,570 --> 00:31:14,639
deleted even not wiped today he might

805
00:31:12,270 --> 00:31:16,830
exist in a previous nap shot so if you

806
00:31:14,640 --> 00:31:19,980
wants you to get access to those volumes

807
00:31:16,830 --> 00:31:22,470
we do these shadow mounts and you're

808
00:31:19,980 --> 00:31:25,440
going to point directly at the disk

809
00:31:22,470 --> 00:31:28,110
image mount ewf one and we're gonna

810
00:31:25,440 --> 00:31:31,830
mount that out bounce ESS for example

811
00:31:28,110 --> 00:31:34,620
and when you do that immediately I snap

812
00:31:31,830 --> 00:31:37,559
my fingers there you have everything now

813
00:31:34,620 --> 00:31:38,459
what what did that do well all does if

814
00:31:37,559 --> 00:31:41,010
you go into the mouth

815
00:31:38,460 --> 00:31:43,980
directory which we have on you sift and

816
00:31:41,010 --> 00:31:44,580
do Alice - Ally H so human readable

817
00:31:43,980 --> 00:31:46,710
format

818
00:31:44,580 --> 00:31:49,379
every single one of those volumes is now

819
00:31:46,710 --> 00:31:51,930
exposed as a single raw image we now

820
00:31:49,380 --> 00:31:54,990
have access to is this one two three and

821
00:31:51,930 --> 00:31:57,750
four and again each one of those is a

822
00:31:54,990 --> 00:31:59,700
separate partition just like ewf was in

823
00:31:57,750 --> 00:32:02,520
our previous directory that where you're

824
00:31:59,700 --> 00:32:06,560
at so each one is is a separate full

825
00:32:02,520 --> 00:32:08,580
volume from a different time now

826
00:32:06,560 --> 00:32:11,460
mounting each one of those you could do

827
00:32:08,580 --> 00:32:13,350
mount when VSS for but you know Linux

828
00:32:11,460 --> 00:32:16,380
does provide us the capability of doing

829
00:32:13,350 --> 00:32:19,820
simple scripts so you could do something

830
00:32:16,380 --> 00:32:22,980
like this for high and VSS star

831
00:32:19,820 --> 00:32:25,290
semicolon do and we type mount win which

832
00:32:22,980 --> 00:32:27,780
is the mount command for a Windows

833
00:32:25,290 --> 00:32:31,620
partition and we're going to mount win

834
00:32:27,780 --> 00:32:34,860
dollar sign I at mount shadow underscore

835
00:32:31,620 --> 00:32:36,600
mount dollar sign I so for every VSS

836
00:32:34,860 --> 00:32:38,490
this one ended mount

837
00:32:36,600 --> 00:32:42,419
Shadow Mountain gives us one that will

838
00:32:38,490 --> 00:32:44,100
occur and we press semicolon done and

839
00:32:42,420 --> 00:32:45,690
what it's going to do is loop through

840
00:32:44,100 --> 00:32:50,010
all the files that are in that folder

841
00:32:45,690 --> 00:32:51,840
and mount them one right up together so

842
00:32:50,010 --> 00:32:54,960
it you know takes for a second come back

843
00:32:51,840 --> 00:32:57,209
for this recur but basically everything

844
00:32:54,960 --> 00:32:58,830
will be essentially mounted now now one

845
00:32:57,210 --> 00:33:02,700
of these mount points in here and I

846
00:32:58,830 --> 00:33:04,679
think it's VSS 3 is a corrupted bowing

847
00:33:02,700 --> 00:33:06,660
shadow so we actually get a failure for

848
00:33:04,680 --> 00:33:11,160
mounting that one there but if we go

849
00:33:06,660 --> 00:33:16,110
into mount shadow mounts directory and

850
00:33:11,160 --> 00:33:17,370
do it LS you'll now see VSS two three

851
00:33:16,110 --> 00:33:19,979
and four actually deduce this one that's

852
00:33:17,370 --> 00:33:22,709
corrupted yes it's two three and four

853
00:33:19,980 --> 00:33:26,220
have now been mounted and if you see the

854
00:33:22,710 --> 00:33:28,110
interview says to and do LS you'll now

855
00:33:26,220 --> 00:33:30,470
see all the files and folders from that

856
00:33:28,110 --> 00:33:33,689
snapshots point time which I think was

857
00:33:30,470 --> 00:33:35,730
March 15th so all the files and folders

858
00:33:33,690 --> 00:33:37,380
in here would be a snapshot of March

859
00:33:35,730 --> 00:33:40,260
14th you have one a week later and look

860
00:33:37,380 --> 00:33:42,960
this is for a week after that all the

861
00:33:40,260 --> 00:33:45,240
way up until April 4th so each one of

862
00:33:42,960 --> 00:33:48,240
these gives us draw access to all the

863
00:33:45,240 --> 00:33:49,740
files and folders inside those folders

864
00:33:48,240 --> 00:33:51,840
and this is just gives you access to the

865
00:33:49,740 --> 00:33:53,760
data you know one of the cool

866
00:33:51,840 --> 00:33:55,168
about 50 years that you have command

867
00:33:53,760 --> 00:33:57,299
line access to it this could all be

868
00:33:55,169 --> 00:33:59,429
scripted out so you don't even have to

869
00:33:57,299 --> 00:34:01,799
worry about that I also mentioned before

870
00:33:59,429 --> 00:34:06,210
it said well what if you have access to

871
00:34:01,799 --> 00:34:08,730
the cases when to seven go back to the

872
00:34:06,210 --> 00:34:10,470
beginning here in Romanov seed revived

873
00:34:08,730 --> 00:34:13,409
and we're back to this point what if you

874
00:34:10,469 --> 00:34:15,868
wanted run timeline analysis across all

875
00:34:13,409 --> 00:34:19,109
of those vine shadows into an overall

876
00:34:15,869 --> 00:34:21,089
timeline well luckily Egypt has built

877
00:34:19,109 --> 00:34:24,089
into it the incredible tool written by

878
00:34:21,089 --> 00:34:27,239
Kristen Johnson called Plaza which

879
00:34:24,089 --> 00:34:30,089
includes the most popular tool along the

880
00:34:27,239 --> 00:34:31,770
time line so what I'm going to do is run

881
00:34:30,089 --> 00:34:35,099
along the timeline just to show you what

882
00:34:31,770 --> 00:34:38,190
it looks like against our assistant here

883
00:34:35,099 --> 00:34:41,129
run along the timeline fdy against in

884
00:34:38,190 --> 00:34:44,010
this case me you know one image directly

885
00:34:41,129 --> 00:34:45,540
and we're going to we have to also

886
00:34:44,010 --> 00:34:49,800
remember to write it to an output file

887
00:34:45,540 --> 00:34:51,449
Plaza win seven da-da-da-dum and we

888
00:34:49,800 --> 00:34:53,030
press return so basically the way the

889
00:34:51,449 --> 00:34:55,290
command works is along the timeline

890
00:34:53,030 --> 00:34:56,639
whether your output files can be and

891
00:34:55,290 --> 00:34:59,400
what you're gonna part us we press

892
00:34:56,639 --> 00:35:01,500
return it's gonna parse that in one file

893
00:34:59,400 --> 00:35:03,750
that has the foregoing other snapshots

894
00:35:01,500 --> 00:35:07,020
that are embedded in it which is what we

895
00:35:03,750 --> 00:35:09,210
see here basically long the timeline has

896
00:35:07,020 --> 00:35:12,270
the ability to rotate through the

897
00:35:09,210 --> 00:35:14,550
existing drive plus any of the ones in

898
00:35:12,270 --> 00:35:16,290
the body shadow so we're gonna have it

899
00:35:14,550 --> 00:35:17,910
run through let's assume the dates and

900
00:35:16,290 --> 00:35:20,160
time stamps of the allowing shadows that

901
00:35:17,910 --> 00:35:23,310
are in here we need to get data all

902
00:35:20,160 --> 00:35:27,420
going back as far as 3:23 so I don't say

903
00:35:23,310 --> 00:35:29,250
I want volume shadows to dot or included

904
00:35:27,420 --> 00:35:31,380
in my data output and I simply press

905
00:35:29,250 --> 00:35:33,599
return and it's going to start cranking

906
00:35:31,380 --> 00:35:35,900
through a log to Timeline extraction

907
00:35:33,599 --> 00:35:38,910
using all the plugins and parsers

908
00:35:35,900 --> 00:35:41,010
associated with them and against the

909
00:35:38,910 --> 00:35:42,569
specific image and so it's basically

910
00:35:41,010 --> 00:35:43,800
going to kick that off when I feel wait

911
00:35:42,570 --> 00:35:45,930
until the sands by the way but I just

912
00:35:43,800 --> 00:35:47,250
wanted to show you that you know this is

913
00:35:45,930 --> 00:35:50,609
the type of thing that you're able to

914
00:35:47,250 --> 00:35:52,680
overall do with the sift workstation and

915
00:35:50,609 --> 00:35:54,390
finally the last thing I demonstrate

916
00:35:52,680 --> 00:35:55,950
because I finally very important that

917
00:35:54,390 --> 00:35:57,150
people really understand one of the key

918
00:35:55,950 --> 00:35:59,220
things that you're able to do is sift

919
00:35:57,150 --> 00:36:02,940
these days unlike the previous versions

920
00:35:59,220 --> 00:36:05,399
is what you need to do is run your

921
00:36:02,940 --> 00:36:06,750
update script if you get to a point

922
00:36:05,400 --> 00:36:08,880
where say hey I'm not sure if there's an

923
00:36:06,750 --> 00:36:11,130
additional package that has been you

924
00:36:08,880 --> 00:36:13,290
know deployed force if the maybe fixes

925
00:36:11,130 --> 00:36:15,480
the bug again you can run the updates

926
00:36:13,290 --> 00:36:16,890
good for sift all its gonna do is we run

927
00:36:15,480 --> 00:36:18,210
the bootstrap it's gonna begin

928
00:36:16,890 --> 00:36:20,310
downloading all the different

929
00:36:18,210 --> 00:36:22,920
capabilities to your system and keep all

930
00:36:20,310 --> 00:36:25,740
of your tool sets fresh up-to-date and

931
00:36:22,920 --> 00:36:28,440
working correctly if you do encounter

932
00:36:25,740 --> 00:36:31,259
any bugs on the github repository there

933
00:36:28,440 --> 00:36:32,790
is a bug submission on location things

934
00:36:31,260 --> 00:36:34,260
do break from time to time and it's

935
00:36:32,790 --> 00:36:35,790
helpful if we know that something broke

936
00:36:34,260 --> 00:36:38,790
for you there's a way that we can help

937
00:36:35,790 --> 00:36:41,730
you out potentially fix it so now going

938
00:36:38,790 --> 00:36:48,290
back to the overall presentation I'm

939
00:36:41,730 --> 00:36:48,290
going to hand off to Winnie

940
00:36:52,040 --> 00:36:55,900
alright I think

941
00:36:54,040 --> 00:36:57,460
hi everybody let me just take a second

942
00:36:55,900 --> 00:37:08,740
to share with you my screen and then now

943
00:36:57,460 --> 00:37:10,510
we're gonna get going all right I now

944
00:37:08,740 --> 00:37:13,870
have the power to control what you see

945
00:37:10,510 --> 00:37:15,910
on your screens and so picking up where

946
00:37:13,870 --> 00:37:18,130
lab Rob left off I want to talk about

947
00:37:15,910 --> 00:37:21,009
REM mix which is a Linux distribution

948
00:37:18,130 --> 00:37:24,430
designed for those who are wanting to

949
00:37:21,010 --> 00:37:26,260
dig deeply into malware want to take it

950
00:37:24,430 --> 00:37:27,970
apart who don't want to understand how

951
00:37:26,260 --> 00:37:29,890
it works and what it's made of and what

952
00:37:27,970 --> 00:37:32,069
threaded possesses and so a lot of

953
00:37:29,890 --> 00:37:34,960
analysts could perform Incident Response

954
00:37:32,070 --> 00:37:36,760
when I ask themselves questions related

955
00:37:34,960 --> 00:37:38,920
to malware a lot of people who perform

956
00:37:36,760 --> 00:37:41,290
forensic analysis come across suspicious

957
00:37:38,920 --> 00:37:43,330
malicious executables and are wondering

958
00:37:41,290 --> 00:37:45,730
what are they capable of that is the

959
00:37:43,330 --> 00:37:48,340
purpose of REM max it is designed to

960
00:37:45,730 --> 00:37:50,830
make it as easy as possible for people

961
00:37:48,340 --> 00:37:52,750
to start analyzing malicious software

962
00:37:50,830 --> 00:37:55,210
without taking the time to figure out

963
00:37:52,750 --> 00:37:57,010
which tools are there for making their

964
00:37:55,210 --> 00:37:59,320
lives easier and how to install them and

965
00:37:57,010 --> 00:38:03,130
Rob touched upon many of the same

966
00:37:59,320 --> 00:38:05,890
reasons why radnyx exists it started out

967
00:38:03,130 --> 00:38:07,900
as a very informal virtual machine that

968
00:38:05,890 --> 00:38:10,240
I put together mostly for myself and

969
00:38:07,900 --> 00:38:12,640
then began sharing with my students when

970
00:38:10,240 --> 00:38:14,589
teaching sans forensics extent course on

971
00:38:12,640 --> 00:38:16,900
our analysis and and I would tell people

972
00:38:14,590 --> 00:38:18,550
hey I'm calling this a Linux

973
00:38:16,900 --> 00:38:20,830
distribution that realistically all I

974
00:38:18,550 --> 00:38:22,870
did was set up a Linux virtual machine

975
00:38:20,830 --> 00:38:24,940
and I installed other people's tools

976
00:38:22,870 --> 00:38:26,440
into it and so I'm very grateful for the

977
00:38:24,940 --> 00:38:27,220
existence of those tools and of course

978
00:38:26,440 --> 00:38:29,410
as Rob said

979
00:38:27,220 --> 00:38:31,839
you know big thank you to people who

980
00:38:29,410 --> 00:38:33,910
take the time to codify their expertise

981
00:38:31,840 --> 00:38:36,930
when performing this work and make tools

982
00:38:33,910 --> 00:38:38,549
available to others and after a while

983
00:38:36,930 --> 00:38:41,740
remick's

984
00:38:38,550 --> 00:38:43,450
became somewhat popular and people were

985
00:38:41,740 --> 00:38:45,939
wanting to get updates to the

986
00:38:43,450 --> 00:38:48,009
distribution and the only way to get an

987
00:38:45,940 --> 00:38:49,300
update was to for me to create a brand

988
00:38:48,010 --> 00:38:51,430
new virtual machine and share it with

989
00:38:49,300 --> 00:38:54,130
others which became a bit unwieldy and

990
00:38:51,430 --> 00:38:57,279
so brainstorming with Rob I thought let

991
00:38:54,130 --> 00:39:00,670
me adopt the same type of an approach

992
00:38:57,280 --> 00:39:03,010
that that sift uses and that is using a

993
00:39:00,670 --> 00:39:05,440
repository where packages or scripts are

994
00:39:03,010 --> 00:39:07,630
available and this would allow existing

995
00:39:05,440 --> 00:39:09,940
remyxx users to just run a script

996
00:39:07,630 --> 00:39:11,950
update their distribution to the latest

997
00:39:09,940 --> 00:39:13,720
version and so that is the state of

998
00:39:11,950 --> 00:39:15,910
remyxx today the latest remick's

999
00:39:13,720 --> 00:39:20,799
distribution uses its own package

1000
00:39:15,910 --> 00:39:22,799
repository where I put the packages and

1001
00:39:20,800 --> 00:39:25,750
scripts related to malware analysis and

1002
00:39:22,800 --> 00:39:28,660
radnyx is maintained by by me primarily

1003
00:39:25,750 --> 00:39:29,230
but I get extensive help from my partner

1004
00:39:28,660 --> 00:39:32,740
in crime

1005
00:39:29,230 --> 00:39:34,450
David Westcott who is is able to assist

1006
00:39:32,740 --> 00:39:37,629
in many ways in testing packages

1007
00:39:34,450 --> 00:39:40,870
suggesting improvements and and so forth

1008
00:39:37,630 --> 00:39:43,420
so you can download remick's as its own

1009
00:39:40,870 --> 00:39:45,069
virtual appliance if you want just like

1010
00:39:43,420 --> 00:39:47,620
you can download sift is its own virtual

1011
00:39:45,070 --> 00:39:49,390
appliance you would in the case of rel

1012
00:39:47,620 --> 00:39:51,310
next go to the rel next website which is

1013
00:39:49,390 --> 00:39:54,400
rel next' at work and download a single

1014
00:39:51,310 --> 00:39:56,040
file which is the virtual machine that

1015
00:39:54,400 --> 00:39:58,930
you can import into your favorite

1016
00:39:56,040 --> 00:40:00,640
virtualization software and start

1017
00:39:58,930 --> 00:40:04,419
running it boot it up boom you're good

1018
00:40:00,640 --> 00:40:09,670
to go but it is also convenient that you

1019
00:40:04,420 --> 00:40:12,280
can add remick's to a compatible system

1020
00:40:09,670 --> 00:40:14,800
running Ubuntu such as sift workstation

1021
00:40:12,280 --> 00:40:17,590
so let me show you how that would work I

1022
00:40:14,800 --> 00:40:19,330
have a virtual machine running in my

1023
00:40:17,590 --> 00:40:21,220
environment with Swift workstation

1024
00:40:19,330 --> 00:40:22,779
installed on it here it is that's the

1025
00:40:21,220 --> 00:40:25,750
same safe workstation that Rob was just

1026
00:40:22,780 --> 00:40:28,630
talking about and there's a script that

1027
00:40:25,750 --> 00:40:30,940
I need to run which is using W get this

1028
00:40:28,630 --> 00:40:32,560
script will download the Linux or either

1029
00:40:30,940 --> 00:40:34,870
the run next setup file from the run

1030
00:40:32,560 --> 00:40:37,240
next website and run it and it's

1031
00:40:34,870 --> 00:40:38,410
designed to be compatible with sift so

1032
00:40:37,240 --> 00:40:40,450
here it is it's running it's now

1033
00:40:38,410 --> 00:40:43,270
updating the package repository now you

1034
00:40:40,450 --> 00:40:44,950
can have both distros installed in a

1035
00:40:43,270 --> 00:40:48,370
single system if that's what you would

1036
00:40:44,950 --> 00:40:51,160
like to do and similarly if you want you

1037
00:40:48,370 --> 00:40:54,160
could start with a Remnick s-- virtual

1038
00:40:51,160 --> 00:40:57,279
machine and then iran the corresponding

1039
00:40:54,160 --> 00:41:00,839
sift script on it to add sift on top of

1040
00:40:57,280 --> 00:41:03,160
reminisce and a lot really depends on

1041
00:41:00,840 --> 00:41:05,620
what kind of lookin field you want to

1042
00:41:03,160 --> 00:41:07,060
your system so right now i have around x

1043
00:41:05,620 --> 00:41:08,859
installing unzipped workstation but i

1044
00:41:07,060 --> 00:41:10,720
don't need to go through that process

1045
00:41:08,860 --> 00:41:15,030
right now so I'm going to just break out

1046
00:41:10,720 --> 00:41:15,029
of that installation and continue

1047
00:41:16,280 --> 00:41:21,590
so we saw how to install remick's to

1048
00:41:19,250 --> 00:41:23,900
support station now let's say at this

1049
00:41:21,590 --> 00:41:25,910
point you have a rel next' virtual

1050
00:41:23,900 --> 00:41:28,580
machine running on its own or maybe you

1051
00:41:25,910 --> 00:41:32,180
added remix packages and tools on top of

1052
00:41:28,580 --> 00:41:34,490
sift workstation the next step is where

1053
00:41:32,180 --> 00:41:37,720
a lot of people get concerned because

1054
00:41:34,490 --> 00:41:40,790
they don't know which tools exist and

1055
00:41:37,720 --> 00:41:42,950
how to use them that's those two perhaps

1056
00:41:40,790 --> 00:41:45,140
difficult aspect of using a command line

1057
00:41:42,950 --> 00:41:47,299
base toolkit there isn't really a whole

1058
00:41:45,140 --> 00:41:47,960
lot of menu options available for you to

1059
00:41:47,300 --> 00:41:49,970
get started

1060
00:41:47,960 --> 00:41:52,340
so what I thought I would do is tell you

1061
00:41:49,970 --> 00:41:55,430
about how you can discover what malware

1062
00:41:52,340 --> 00:41:58,700
analysis tools exist on remick's the

1063
00:41:55,430 --> 00:42:01,970
easiest way to see these tools is to go

1064
00:41:58,700 --> 00:42:04,580
to the rel next' website there we have a

1065
00:42:01,970 --> 00:42:07,399
documentation page that shows you by

1066
00:42:04,580 --> 00:42:09,590
category all the various scripts and

1067
00:42:07,400 --> 00:42:11,510
utilities that are available to you on

1068
00:42:09,590 --> 00:42:13,570
that website you can download an Excel

1069
00:42:11,510 --> 00:42:16,340
spreadsheet that you see at the bottom

1070
00:42:13,570 --> 00:42:19,520
right corner of your slide that shows

1071
00:42:16,340 --> 00:42:22,670
you all of the tools that are added to

1072
00:42:19,520 --> 00:42:24,740
remick's how they exist and that is of a

1073
00:42:22,670 --> 00:42:26,420
standalone script or package and what is

1074
00:42:24,740 --> 00:42:28,009
the category of a tool to help you

1075
00:42:26,420 --> 00:42:29,240
determine how you can use them for

1076
00:42:28,010 --> 00:42:31,820
example here you can see that there are

1077
00:42:29,240 --> 00:42:34,430
a number of utilities built into M next

1078
00:42:31,820 --> 00:42:37,580
for examining potentially infected

1079
00:42:34,430 --> 00:42:40,370
websites also you can download a single

1080
00:42:37,580 --> 00:42:42,350
PDF file that can tell or actually it's

1081
00:42:40,370 --> 00:42:43,640
a it's a mindmap file format that you

1082
00:42:42,350 --> 00:42:45,350
can see on the left side of the screen

1083
00:42:43,640 --> 00:42:46,819
that shows you the same information but

1084
00:42:45,350 --> 00:42:49,730
in a somewhat prettier

1085
00:42:46,820 --> 00:42:52,130
perhaps glorified outline so now you

1086
00:42:49,730 --> 00:42:54,110
know what tools exist and based on the

1087
00:42:52,130 --> 00:42:56,000
type of a task that you want to perform

1088
00:42:54,110 --> 00:42:58,640
with respect to analyzing malware you

1089
00:42:56,000 --> 00:43:00,680
know what tool you can run and also in

1090
00:42:58,640 --> 00:43:03,170
this mind map that you see on the left

1091
00:43:00,680 --> 00:43:05,509
side of the screen you can get some tips

1092
00:43:03,170 --> 00:43:06,680
that I can bear it into the document for

1093
00:43:05,510 --> 00:43:10,100
how to run the tool

1094
00:43:06,680 --> 00:43:12,560
now I thought what I would do is single

1095
00:43:10,100 --> 00:43:14,900
out just a few tools to give you a

1096
00:43:12,560 --> 00:43:17,150
flavor of what types of tasks you can

1097
00:43:14,900 --> 00:43:19,640
perform when you have ramdux available

1098
00:43:17,150 --> 00:43:22,640
on your system first of all there is a

1099
00:43:19,640 --> 00:43:24,920
script that mimics the update sift

1100
00:43:22,640 --> 00:43:27,440
script the cloud was talking about but

1101
00:43:24,920 --> 00:43:29,600
this one is designed to update remyxx so

1102
00:43:27,440 --> 00:43:30,349
once you have downloaded the remick's

1103
00:43:29,600 --> 00:43:32,150
virtual machine

1104
00:43:30,349 --> 00:43:35,660
or once you've installed remick's using

1105
00:43:32,150 --> 00:43:36,920
a script - on top of sift workstation to

1106
00:43:35,660 --> 00:43:38,750
make sure that you have all of the

1107
00:43:36,920 --> 00:43:40,130
latest packages you can run this script

1108
00:43:38,750 --> 00:43:41,690
and it will make sure that you've got

1109
00:43:40,130 --> 00:43:43,700
the latest and greatest version of it

1110
00:43:41,690 --> 00:43:45,079
toolkit available to you so that's

1111
00:43:43,700 --> 00:43:47,058
that's but that's good to know and it's

1112
00:43:45,079 --> 00:43:48,769
good to periodically refresh your

1113
00:43:47,059 --> 00:43:50,539
packages assuming that you've connected

1114
00:43:48,769 --> 00:43:53,029
your own next virtual machine to the

1115
00:43:50,539 --> 00:43:54,819
Internet of course now as far as the

1116
00:43:53,029 --> 00:43:56,930
tools that you get well here are some

1117
00:43:54,819 --> 00:44:00,440
there's a command and remick's called

1118
00:43:56,930 --> 00:44:04,009
accept all IPs now this command is

1119
00:44:00,440 --> 00:44:05,690
simply a wrapper around IP tables that

1120
00:44:04,010 --> 00:44:07,970
are of course also installed on remick's

1121
00:44:05,690 --> 00:44:10,519
and it is designed to configure your

1122
00:44:07,970 --> 00:44:13,519
Linux virtual machine running in your

1123
00:44:10,519 --> 00:44:15,740
lab so that it accepts any network

1124
00:44:13,519 --> 00:44:17,779
connection that comes to it and the

1125
00:44:15,740 --> 00:44:19,598
reason why this is useful when examining

1126
00:44:17,779 --> 00:44:22,190
malicious software that runs on Windows

1127
00:44:19,599 --> 00:44:25,339
is that in a typical malware analysis

1128
00:44:22,190 --> 00:44:27,170
lab that focuses on Windows malware you

1129
00:44:25,339 --> 00:44:29,420
have at least one Windows virtual

1130
00:44:27,170 --> 00:44:31,730
machine that you might infect with your

1131
00:44:29,420 --> 00:44:33,680
specimen to see how it behaves and in

1132
00:44:31,730 --> 00:44:36,140
many cases this malware tries to seek

1133
00:44:33,680 --> 00:44:38,779
out its authors or its operators

1134
00:44:36,140 --> 00:44:41,180
websites it might also try to connect to

1135
00:44:38,779 --> 00:44:43,339
a malicious DNS server a mail server

1136
00:44:41,180 --> 00:44:45,828
reach out for command and control

1137
00:44:43,339 --> 00:44:48,799
infrastructure and rel max is designed

1138
00:44:45,829 --> 00:44:50,690
to let you redirect these connections to

1139
00:44:48,799 --> 00:44:52,730
the system inside of your lab that you

1140
00:44:50,690 --> 00:44:55,369
can control this is where you would run

1141
00:44:52,730 --> 00:44:57,410
the corresponding services and see what

1142
00:44:55,369 --> 00:44:59,450
would now or do had it actually been

1143
00:44:57,410 --> 00:45:02,328
able to connect through adversaries

1144
00:44:59,450 --> 00:45:04,038
infrastructure and accept all IPs is one

1145
00:45:02,329 --> 00:45:05,809
of these commands that allows you to

1146
00:45:04,039 --> 00:45:08,569
make sure that Ram necks will accept a

1147
00:45:05,809 --> 00:45:10,789
connection on any possible IP address

1148
00:45:08,569 --> 00:45:14,660
that my aware might want to use when

1149
00:45:10,789 --> 00:45:16,130
seeking out its operator another - I

1150
00:45:14,660 --> 00:45:18,399
thought I'd mention is a tool called

1151
00:45:16,130 --> 00:45:20,930
VIPRE which is very convenient for

1152
00:45:18,400 --> 00:45:22,819
maintaining your own repository of

1153
00:45:20,930 --> 00:45:24,410
malware samples so if you examine

1154
00:45:22,819 --> 00:45:26,210
english' software you've got a number of

1155
00:45:24,410 --> 00:45:28,519
artifacts that you need to keep track of

1156
00:45:26,210 --> 00:45:30,710
one way to do it is to import them into

1157
00:45:28,519 --> 00:45:32,629
vipre and VIPRE is a command-line tool

1158
00:45:30,710 --> 00:45:34,369
that will not only maintain all of your

1159
00:45:32,630 --> 00:45:35,960
samples in its own database but also

1160
00:45:34,369 --> 00:45:38,000
will provide you a convenient way of

1161
00:45:35,960 --> 00:45:41,680
looking at data that you may have

1162
00:45:38,000 --> 00:45:44,140
captured generated or some household

1163
00:45:41,680 --> 00:45:48,439
inside of this malware repository

1164
00:45:44,140 --> 00:45:50,629
another tool is shellcode to exe this

1165
00:45:48,439 --> 00:45:52,788
tool is very convenient for an where

1166
00:45:50,630 --> 00:45:55,279
you're examining well let's say moshus

1167
00:45:52,789 --> 00:45:58,339
document files which might can contain

1168
00:45:55,279 --> 00:46:01,699
inside of them payload of an exploit

1169
00:45:58,339 --> 00:46:03,890
that payload is typically implemented as

1170
00:46:01,699 --> 00:46:05,329
shellcode and you as a malware analyst

1171
00:46:03,890 --> 00:46:07,400
might come across that shellcode and

1172
00:46:05,329 --> 00:46:09,949
wonder what are its capabilities

1173
00:46:07,400 --> 00:46:13,009
well shellcode to exe will allow you to

1174
00:46:09,949 --> 00:46:14,779
take that shellcode which in many cases

1175
00:46:13,009 --> 00:46:16,999
is formatted using Unicode or

1176
00:46:14,779 --> 00:46:19,249
hexadecimal encoding and generate a

1177
00:46:16,999 --> 00:46:21,348
Windows executable act that shellcode

1178
00:46:19,249 --> 00:46:25,118
the reason why this is advantageous is

1179
00:46:21,349 --> 00:46:27,949
because then you can use a number of

1180
00:46:25,119 --> 00:46:30,019
disassemblers or debuggers to examine

1181
00:46:27,949 --> 00:46:33,469
the resulting code to understand its

1182
00:46:30,019 --> 00:46:36,189
potential on infected system there's a

1183
00:46:33,469 --> 00:46:38,809
tool called mass or other mastiff

1184
00:46:36,189 --> 00:46:41,479
mastiff but the way to invoke is to type

1185
00:46:38,809 --> 00:46:44,269
a command mastiff py this tool is a

1186
00:46:41,479 --> 00:46:48,468
wonderful utility for pulling out as

1187
00:46:44,269 --> 00:46:51,379
many possible details as you can from a

1188
00:46:48,469 --> 00:46:53,449
large number of files using static

1189
00:46:51,380 --> 00:46:55,489
malware analysis so this tool does not

1190
00:46:53,449 --> 00:46:58,069
run any of the malware samples but if

1191
00:46:55,489 --> 00:47:00,589
you point it to a collection of motions

1192
00:46:58,069 --> 00:47:02,538
Windows executables Linux binaries PDF

1193
00:47:00,589 --> 00:47:05,479
files office documents it will

1194
00:47:02,539 --> 00:47:07,069
automatically crunch and Munch through

1195
00:47:05,479 --> 00:47:09,379
all of them and generate a number of

1196
00:47:07,069 --> 00:47:12,589
reports giving you a visibility into

1197
00:47:09,380 --> 00:47:15,170
what type of documents or executables

1198
00:47:12,589 --> 00:47:17,179
these are and what threats and what

1199
00:47:15,170 --> 00:47:17,979
other details might be embedded inside

1200
00:47:17,179 --> 00:47:20,959
of them

1201
00:47:17,979 --> 00:47:23,629
the remick's toolkit gives you a way of

1202
00:47:20,959 --> 00:47:25,759
examining a number of different most

1203
00:47:23,630 --> 00:47:28,999
malicious document file formats for

1204
00:47:25,759 --> 00:47:30,829
example you can easily extract macros

1205
00:47:28,999 --> 00:47:33,019
embedded into suspicious office

1206
00:47:30,829 --> 00:47:36,979
documents using the command all a VBA

1207
00:47:33,019 --> 00:47:39,948
that py a lot of malware has inside of

1208
00:47:36,979 --> 00:47:40,459
it concealed strings that are affiliated

1209
00:47:39,949 --> 00:47:42,259
from you

1210
00:47:40,459 --> 00:47:44,209
for example embedded into a document

1211
00:47:42,259 --> 00:47:46,369
file or into an executable there might

1212
00:47:44,209 --> 00:47:48,499
be a URL that you don't see when you

1213
00:47:46,369 --> 00:47:50,689
look at strings the normal way but one

1214
00:47:48,499 --> 00:47:52,279
of the tools that you can use to pull

1215
00:47:50,689 --> 00:47:55,399
out that information and automatically

1216
00:47:52,279 --> 00:47:57,120
de escape these strings is called BB

1217
00:47:55,400 --> 00:48:00,100
crack

1218
00:47:57,120 --> 00:48:01,960
on Linux you can look at a number of

1219
00:48:00,100 --> 00:48:04,420
different file types and I thought I'd

1220
00:48:01,960 --> 00:48:06,730
also mention to you that just like you

1221
00:48:04,420 --> 00:48:09,340
can use the rel next' toolkit to examine

1222
00:48:06,730 --> 00:48:11,080
Windows malware browser malware motion

1223
00:48:09,340 --> 00:48:13,060
document files there are also a number

1224
00:48:11,080 --> 00:48:15,670
of tools there that are designed for

1225
00:48:13,060 --> 00:48:18,790
debugging or examining malicious Linux

1226
00:48:15,670 --> 00:48:21,580
binaries and EDB that is Evans debugger

1227
00:48:18,790 --> 00:48:23,590
is one such tools also if you are

1228
00:48:21,580 --> 00:48:25,420
analyzing mobile malware if you got your

1229
00:48:23,590 --> 00:48:26,680
hands on a malware sample that is

1230
00:48:25,420 --> 00:48:28,510
running on Android there are several

1231
00:48:26,680 --> 00:48:31,120
tools available for you to examine the

1232
00:48:28,510 --> 00:48:34,230
kind of stuff one of these is Android

1233
00:48:31,120 --> 00:48:37,750
and Android that pew I check that out

1234
00:48:34,230 --> 00:48:40,810
lastly if you have come across a

1235
00:48:37,750 --> 00:48:42,790
malicious flash program perhaps it's a

1236
00:48:40,810 --> 00:48:45,850
banner ad she believes attacking

1237
00:48:42,790 --> 00:48:47,950
visitors to the infected website well

1238
00:48:45,850 --> 00:48:49,839
one of the ways of decoding the contents

1239
00:48:47,950 --> 00:48:52,169
of a flash program is to run the command

1240
00:48:49,840 --> 00:48:56,680
swift dump as you can see on this slide

1241
00:48:52,170 --> 00:48:58,600
this will pull out not only the objects

1242
00:48:56,680 --> 00:49:01,240
that comprise the flash program but also

1243
00:48:58,600 --> 00:49:04,420
in many cases the malicious code that

1244
00:49:01,240 --> 00:49:06,700
might be concealed inside of that flash

1245
00:49:04,420 --> 00:49:08,500
applet so those are just some of the

1246
00:49:06,700 --> 00:49:10,589
tools that are available to you and

1247
00:49:08,500 --> 00:49:13,600
there are many many more and I thought

1248
00:49:10,590 --> 00:49:16,600
you might want to see some additional

1249
00:49:13,600 --> 00:49:18,370
tools in action so let me bring you into

1250
00:49:16,600 --> 00:49:21,100
my lab running

1251
00:49:18,370 --> 00:49:23,080
remyxx where I want to show you in real

1252
00:49:21,100 --> 00:49:24,940
time just some additional capabilities

1253
00:49:23,080 --> 00:49:34,480
of the tools that I did not yet have the

1254
00:49:24,940 --> 00:49:35,830
opportunity to mention all right so one

1255
00:49:34,480 --> 00:49:38,590
of the tools I thought I'd best single

1256
00:49:35,830 --> 00:49:41,529
out for you is called PE frame p frame

1257
00:49:38,590 --> 00:49:44,650
is a tool for examining a suspicious

1258
00:49:41,530 --> 00:49:47,920
Windows executable and pulling out a lot

1259
00:49:44,650 --> 00:49:49,690
of static details from that executable

1260
00:49:47,920 --> 00:49:52,210
for instance I'm looking at this piece

1261
00:49:49,690 --> 00:49:55,150
of malware called Croker that exe using

1262
00:49:52,210 --> 00:49:57,400
p frame and this tool tells me that this

1263
00:49:55,150 --> 00:49:59,770
executable seems to be packed which

1264
00:49:57,400 --> 00:50:01,300
further increases my believe that it

1265
00:49:59,770 --> 00:50:03,400
might be malicious because packers are

1266
00:50:01,300 --> 00:50:06,370
oftentimes used by malware authors to

1267
00:50:03,400 --> 00:50:09,220
conceal the nature of the executable

1268
00:50:06,370 --> 00:50:10,509
this tool also pulls out references to

1269
00:50:09,220 --> 00:50:13,029
suspicious wind

1270
00:50:10,510 --> 00:50:15,490
those API calls and these are functions

1271
00:50:13,030 --> 00:50:17,080
that malware might want to invoke to do

1272
00:50:15,490 --> 00:50:18,520
bad things on the system for example it

1273
00:50:17,080 --> 00:50:21,009
singles out a function called find

1274
00:50:18,520 --> 00:50:23,440
windows a which could be used to

1275
00:50:21,010 --> 00:50:25,390
determine whether someone is debugging a

1276
00:50:23,440 --> 00:50:27,490
piece of malware and that gives you some

1277
00:50:25,390 --> 00:50:30,430
ideas regarding how you might want to

1278
00:50:27,490 --> 00:50:32,529
further examine this moshus executable

1279
00:50:30,430 --> 00:50:35,379
what to look for and perhaps which tools

1280
00:50:32,530 --> 00:50:37,330
to avoid using them I also thought I'd

1281
00:50:35,380 --> 00:50:39,490
mention to you that one of the features

1282
00:50:37,330 --> 00:50:42,490
of this particular tool PE frame is that

1283
00:50:39,490 --> 00:50:45,430
it tells you about other API calls that

1284
00:50:42,490 --> 00:50:47,350
malware might want to invoke when it

1285
00:50:45,430 --> 00:50:49,240
runs on the windows computer when it

1286
00:50:47,350 --> 00:50:51,040
infects it for example here you can see

1287
00:50:49,240 --> 00:50:54,040
that one of these named functions is

1288
00:50:51,040 --> 00:50:56,529
read file which tells you that this

1289
00:50:54,040 --> 00:50:58,750
program when it runs probably have they

1290
00:50:56,530 --> 00:51:00,940
built has the ability to read files and

1291
00:50:58,750 --> 00:51:02,710
that would give you some ideas regarding

1292
00:51:00,940 --> 00:51:04,360
how you might want to debug it and what

1293
00:51:02,710 --> 00:51:06,250
functions you might want to examine to

1294
00:51:04,360 --> 00:51:08,860
determine well what kind of files it

1295
00:51:06,250 --> 00:51:11,050
reads for example another tool I wanted

1296
00:51:08,860 --> 00:51:16,150
to mention to you is called Cap tipper

1297
00:51:11,050 --> 00:51:18,280
now cap tipper let me switch into the

1298
00:51:16,150 --> 00:51:22,330
directory where it's installed cap

1299
00:51:18,280 --> 00:51:24,580
tipper is designed to examine a pcap

1300
00:51:22,330 --> 00:51:26,319
file that you may have captured in your

1301
00:51:24,580 --> 00:51:28,180
lab that is that you might be

1302
00:51:26,320 --> 00:51:30,850
investigating a website that you think

1303
00:51:28,180 --> 00:51:33,129
might be trying to infect your users but

1304
00:51:30,850 --> 00:51:35,380
you visit that website from your lab

1305
00:51:33,130 --> 00:51:37,240
using a system that you want to be

1306
00:51:35,380 --> 00:51:39,070
infected and you could use the network

1307
00:51:37,240 --> 00:51:41,169
sniffer to capture the interactions

1308
00:51:39,070 --> 00:51:43,600
between that website and your lab and

1309
00:51:41,170 --> 00:51:46,060
then cap tipper is one of the tools that

1310
00:51:43,600 --> 00:51:52,480
you can use to examine the contents of

1311
00:51:46,060 --> 00:51:54,850
that pickup file for example here I'm

1312
00:51:52,480 --> 00:51:58,090
going to generate a report on a pickup

1313
00:51:54,850 --> 00:52:00,819
file that I have created when examining

1314
00:51:58,090 --> 00:52:03,100
a suspicious website cap tipper examines

1315
00:52:00,820 --> 00:52:05,140
the pickup file it can pull out any

1316
00:52:03,100 --> 00:52:07,180
embedded artifacts such as Windows

1317
00:52:05,140 --> 00:52:09,759
malware or PDF files that might be

1318
00:52:07,180 --> 00:52:11,350
installed that might be installed on the

1319
00:52:09,760 --> 00:52:13,360
infected system when it visits that web

1320
00:52:11,350 --> 00:52:16,150
site and now I can use a tool like

1321
00:52:13,360 --> 00:52:18,580
Firefox to look at my report to see what

1322
00:52:16,150 --> 00:52:21,040
it does now this tool cap tipper is not

1323
00:52:18,580 --> 00:52:22,960
designed to be as powerful as some of

1324
00:52:21,040 --> 00:52:24,250
the network forensic utilities that you

1325
00:52:22,960 --> 00:52:27,250
might use to examine large

1326
00:52:24,250 --> 00:52:31,390
volumes of data but what it is very good

1327
00:52:27,250 --> 00:52:33,400
at is looking at a small capture that

1328
00:52:31,390 --> 00:52:36,310
you have put together in your lab and

1329
00:52:33,400 --> 00:52:38,980
tells you what the malicious website

1330
00:52:36,310 --> 00:52:40,630
does when it infects a system so that

1331
00:52:38,980 --> 00:52:43,660
you can determine the threat that it

1332
00:52:40,630 --> 00:52:45,010
poses to the organization another tool I

1333
00:52:43,660 --> 00:52:48,430
thought I'd mentioned to you briefly is

1334
00:52:45,010 --> 00:52:51,160
a tool designed for examining malicious

1335
00:52:48,430 --> 00:52:54,279
or I should say suspicious PDF files a

1336
00:52:51,160 --> 00:52:56,589
lot of these PDF files contain inside of

1337
00:52:54,280 --> 00:53:00,130
them JavaScript so there's a tool here

1338
00:52:56,590 --> 00:53:02,410
called PDF extract PF extract can pull

1339
00:53:00,130 --> 00:53:05,320
out a number of artifacts from a

1340
00:53:02,410 --> 00:53:07,120
suspicious PDF file including JavaScript

1341
00:53:05,320 --> 00:53:08,650
that might be inside of them and if you

1342
00:53:07,120 --> 00:53:11,230
examine that JavaScript you can

1343
00:53:08,650 --> 00:53:13,690
determine whether indeed that file is

1344
00:53:11,230 --> 00:53:15,460
malicious and if it is malicious you

1345
00:53:13,690 --> 00:53:17,260
might be able to tell what its

1346
00:53:15,460 --> 00:53:20,530
capabilities are for example here I

1347
00:53:17,260 --> 00:53:22,450
pulled out some JavaScript from a moshus

1348
00:53:20,530 --> 00:53:26,080
PDF file you can see that when it runs

1349
00:53:22,450 --> 00:53:28,689
it has what looks like embedded shell

1350
00:53:26,080 --> 00:53:30,009
code which during runtime will be saved

1351
00:53:28,690 --> 00:53:32,710
into a variable that the attacker

1352
00:53:30,010 --> 00:53:35,890
apparently named large ha ha code and

1353
00:53:32,710 --> 00:53:37,660
now you can take this shell code use the

1354
00:53:35,890 --> 00:53:42,040
tool that I mentioned earlier called

1355
00:53:37,660 --> 00:53:44,259
shell code to exe and determine what the

1356
00:53:42,040 --> 00:53:48,009
shell code would do if the exploit

1357
00:53:44,260 --> 00:53:49,990
succeeds and so those are just some of

1358
00:53:48,010 --> 00:53:52,380
the tools I thought I'd mentioned to you

1359
00:53:49,990 --> 00:53:54,939
as being available for your

1360
00:53:52,380 --> 00:53:56,980
experimentation and of course when you

1361
00:53:54,940 --> 00:53:58,810
download the slide deck for this

1362
00:53:56,980 --> 00:54:00,820
presentation I've captured all of those

1363
00:53:58,810 --> 00:54:02,560
tools for you so that you know which you

1364
00:54:00,820 --> 00:54:04,840
might want to experiment with there's

1365
00:54:02,560 --> 00:54:07,870
another aspect of the rel next project

1366
00:54:04,840 --> 00:54:09,850
that goes beyond just the distribution

1367
00:54:07,870 --> 00:54:12,520
that I've been talking about so far and

1368
00:54:09,850 --> 00:54:15,730
this aspect of the rel next project puts

1369
00:54:12,520 --> 00:54:17,770
together docker containers that allow

1370
00:54:15,730 --> 00:54:20,500
you to run certain malware analysis

1371
00:54:17,770 --> 00:54:22,720
tools on any system where docker is

1372
00:54:20,500 --> 00:54:25,570
installed this way you don't need a

1373
00:54:22,720 --> 00:54:29,439
whole dedicated distribution for your

1374
00:54:25,570 --> 00:54:30,940
tasks and using docker for distributing

1375
00:54:29,440 --> 00:54:32,800
applications is especially convenient

1376
00:54:30,940 --> 00:54:35,050
when the application has a lot of

1377
00:54:32,800 --> 00:54:37,030
dependencies that might conflict with

1378
00:54:35,050 --> 00:54:38,080
some of the other tools that might be

1379
00:54:37,030 --> 00:54:41,860
installed in your environment

1380
00:54:38,080 --> 00:54:43,420
so for instance the kinds of mao

1381
00:54:41,860 --> 00:54:45,970
analysis tools that you might want to

1382
00:54:43,420 --> 00:54:48,700
run without explicitly installing them

1383
00:54:45,970 --> 00:54:51,330
on your system include a JavaScript

1384
00:54:48,700 --> 00:54:53,169
application tool called GS detox or

1385
00:54:51,330 --> 00:54:56,020
massive if you want to run it on a

1386
00:54:53,170 --> 00:54:59,920
separate system or a viper or recall a

1387
00:54:56,020 --> 00:55:02,470
volatility all of these are images that

1388
00:54:59,920 --> 00:55:04,450
have already been prepared for you that

1389
00:55:02,470 --> 00:55:06,310
you can use and let me show you how you

1390
00:55:04,450 --> 00:55:09,370
might want to use them for instance I'm

1391
00:55:06,310 --> 00:55:11,920
gonna go to my sift workstation system

1392
00:55:09,370 --> 00:55:14,440
and even if the system did not have a

1393
00:55:11,920 --> 00:55:17,560
Remnick installed on it as long as I

1394
00:55:14,440 --> 00:55:21,700
installed darker which is just a very

1395
00:55:17,560 --> 00:55:26,590
simple apt-get command I would need to

1396
00:55:21,700 --> 00:55:28,359
do apt-get install darker dot IO which I

1397
00:55:26,590 --> 00:55:32,460
already did before this webcast once

1398
00:55:28,360 --> 00:55:35,920
docker is installed then let me show you

1399
00:55:32,460 --> 00:55:38,680
then if I wanted to run some Ram next

1400
00:55:35,920 --> 00:55:40,960
package that is distributed using docker

1401
00:55:38,680 --> 00:55:44,049
containers I ran a single command in

1402
00:55:40,960 --> 00:55:48,010
this case I'm saying run a ram next

1403
00:55:44,050 --> 00:55:51,490
image of it called thug and thug is a

1404
00:55:48,010 --> 00:55:53,560
very handy utility that allows you to

1405
00:55:51,490 --> 00:55:56,200
explore a potential malicious website

1406
00:55:53,560 --> 00:55:59,560
thud will pretend to be a vulnerable

1407
00:55:56,200 --> 00:56:01,029
browser running on Windows it will visit

1408
00:55:59,560 --> 00:56:03,270
the website of your choice and it will

1409
00:56:01,030 --> 00:56:07,170
tell you what it sees on that website

1410
00:56:03,270 --> 00:56:11,320
for instance I can run a thug like this

1411
00:56:07,170 --> 00:56:13,690
pointed to some website let's go to the

1412
00:56:11,320 --> 00:56:15,870
non malicious website example.com and

1413
00:56:13,690 --> 00:56:18,010
it'll pretend to be a browser it'll

1414
00:56:15,870 --> 00:56:21,190
visit the website and it'll save its

1415
00:56:18,010 --> 00:56:23,950
contents and full logs into my container

1416
00:56:21,190 --> 00:56:26,380
and now here's the beautiful part once

1417
00:56:23,950 --> 00:56:28,359
I'm done with my analysis and I exit

1418
00:56:26,380 --> 00:56:29,110
this container everything related to it

1419
00:56:28,360 --> 00:56:30,880
is gone

1420
00:56:29,110 --> 00:56:32,950
you no longer have artifacts on your

1421
00:56:30,880 --> 00:56:34,960
actual sift workstation in this case

1422
00:56:32,950 --> 00:56:36,759
that you might not want to keep you

1423
00:56:34,960 --> 00:56:38,410
don't have any junk lying around once

1424
00:56:36,760 --> 00:56:39,760
your experiment is done you can move on

1425
00:56:38,410 --> 00:56:41,560
without having to clean up because

1426
00:56:39,760 --> 00:56:44,050
docker automatically cleans everything

1427
00:56:41,560 --> 00:56:45,940
up for you so the idea is to be able to

1428
00:56:44,050 --> 00:56:48,070
run certain applications on any

1429
00:56:45,940 --> 00:56:51,340
compatible system including remnants

1430
00:56:48,070 --> 00:56:52,190
itself a sift or any other Debian or a

1431
00:56:51,340 --> 00:56:54,890
boon to be

1432
00:56:52,190 --> 00:56:58,250
on trading system and so those who want

1433
00:56:54,890 --> 00:57:00,140
to experiment with containers might want

1434
00:56:58,250 --> 00:57:02,450
to do so by reading up about what they

1435
00:57:00,140 --> 00:57:04,519
mean and if you search the web I have a

1436
00:57:02,450 --> 00:57:08,779
lot of materials on this topic if that

1437
00:57:04,519 --> 00:57:12,019
is appealing to you so we talked about

1438
00:57:08,779 --> 00:57:15,170
sift workstation we talked about relics

1439
00:57:12,019 --> 00:57:17,660
these are toolkits that incorporate lots

1440
00:57:15,170 --> 00:57:19,609
and lots of tools that practitioners

1441
00:57:17,660 --> 00:57:23,569
have developed and contributed to the

1442
00:57:19,609 --> 00:57:24,890
community to use them well you don't

1443
00:57:23,569 --> 00:57:26,299
have to install them anymore because

1444
00:57:24,890 --> 00:57:28,940
they already pre-installed into the

1445
00:57:26,299 --> 00:57:31,038
distros here but now you got to figure

1446
00:57:28,940 --> 00:57:34,309
out what these tools are and how to

1447
00:57:31,039 --> 00:57:36,829
actually run them and how to analyze the

1448
00:57:34,309 --> 00:57:38,930
data and the output that they produce so

1449
00:57:36,829 --> 00:57:40,700
Rob and I have prepared a number of

1450
00:57:38,930 --> 00:57:43,098
challenges turns which our colleagues

1451
00:57:40,700 --> 00:57:44,569
from sans and contributed as well there

1452
00:57:43,099 --> 00:57:46,220
are some pointers available to you if

1453
00:57:44,569 --> 00:57:48,380
let's say you want to experiment with

1454
00:57:46,220 --> 00:57:50,480
these tools when performing memory

1455
00:57:48,380 --> 00:57:52,630
forensics or network forensics or when

1456
00:57:50,480 --> 00:57:54,980
analyzing Windows artifacts or malware

1457
00:57:52,630 --> 00:57:57,619
these are the links that you might want

1458
00:57:54,980 --> 00:57:59,390
to pursue as a follow-up to this webcast

1459
00:57:57,619 --> 00:58:01,970
and once you've downloaded the slides

1460
00:57:59,390 --> 00:58:07,098
then you can click on links and visit

1461
00:58:01,970 --> 00:58:09,890
these non malicious websites also we put

1462
00:58:07,099 --> 00:58:12,259
together a poster which is just the

1463
00:58:09,890 --> 00:58:14,089
latest addition to the posters and cheat

1464
00:58:12,259 --> 00:58:16,490
sheets that are available on the sans

1465
00:58:14,089 --> 00:58:21,140
forensics website and this particular

1466
00:58:16,490 --> 00:58:22,848
poster showcases our favorite tips for

1467
00:58:21,140 --> 00:58:25,460
getting started with using sift

1468
00:58:22,849 --> 00:58:27,349
workstation and drum mix is a PDF file

1469
00:58:25,460 --> 00:58:30,710
that you can download and print out it

1470
00:58:27,349 --> 00:58:32,990
would be a two-sided sheet that gives

1471
00:58:30,710 --> 00:58:34,609
you some of these pointers that Rob and

1472
00:58:32,990 --> 00:58:36,229
I have been sharing with you throughout

1473
00:58:34,609 --> 00:58:37,970
this webcast and gives you some

1474
00:58:36,230 --> 00:58:40,279
additional ideas for how to continue

1475
00:58:37,970 --> 00:58:42,230
experimenting whether to distros whether

1476
00:58:40,279 --> 00:58:46,369
you're running them side by side or in

1477
00:58:42,230 --> 00:58:50,119
the same virtual machine lastly I wanted

1478
00:58:46,369 --> 00:58:54,950
to mention to you that we at Sands rely

1479
00:58:50,119 --> 00:58:58,009
on or other discuss many of these tools

1480
00:58:54,950 --> 00:59:00,019
when educating forensics professionals

1481
00:58:58,009 --> 00:59:01,250
and how to perform their work and so

1482
00:59:00,019 --> 00:59:03,410
there are a number of classes that we

1483
00:59:01,250 --> 00:59:04,849
teach that make use of sift workstation

1484
00:59:03,410 --> 00:59:05,690
and REM necks and of course there is

1485
00:59:04,849 --> 00:59:07,750
another way

1486
00:59:05,690 --> 00:59:10,580
in which you can gain mastery of

1487
00:59:07,750 --> 00:59:12,260
performing the work related to forensic

1488
00:59:10,580 --> 00:59:13,640
analysis and instant response while

1489
00:59:12,260 --> 00:59:14,630
using a lot of the tools that are

1490
00:59:13,640 --> 00:59:17,779
available to you out there in the

1491
00:59:14,630 --> 00:59:20,480
community for free and so this brings us

1492
00:59:17,780 --> 00:59:22,370
to the end of this webcast one at which

1493
00:59:20,480 --> 00:59:24,380
you know that you can continue learning

1494
00:59:22,370 --> 00:59:27,259
about this topic you can reach out to

1495
00:59:24,380 --> 00:59:28,730
rob and to me online a happy to answer

1496
00:59:27,260 --> 00:59:30,470
any questions that you might have and

1497
00:59:28,730 --> 00:59:33,740
let's see if we have a few minutes left

1498
00:59:30,470 --> 00:59:35,450
to answer any questions that might have

1499
00:59:33,740 --> 00:59:37,759
arrived and if we don't have time well

1500
00:59:35,450 --> 00:59:39,410
in that case just reach out to Robin and

1501
00:59:37,760 --> 00:59:46,520
we'll be glad to answer your questions

1502
00:59:39,410 --> 00:59:49,430
via email or online all right we do have

1503
00:59:46,520 --> 00:59:51,170
a couple questions and if you do have

1504
00:59:49,430 --> 00:59:52,399
questions we just have a few more

1505
00:59:51,170 --> 00:59:54,400
minutes to answer them we want to go and

1506
00:59:52,400 --> 00:59:57,260
type them in we'll try to get to them

1507
00:59:54,400 --> 00:59:58,840
first question and it's probably both to

1508
00:59:57,260 --> 01:00:02,270
Lenny and mine

1509
00:59:58,840 --> 01:00:05,120
just as a clarification do you recommend

1510
01:00:02,270 --> 01:00:07,220
that we do not run the normal update for

1511
01:00:05,120 --> 01:00:11,839
Debian Ubuntu systems question such as

1512
01:00:07,220 --> 01:00:13,370
sudo apt-get update and upgrade or is it

1513
01:00:11,840 --> 01:00:16,910
so acceptable that we use the update

1514
01:00:13,370 --> 01:00:20,359
shift or the update remix commands so

1515
01:00:16,910 --> 01:00:22,490
for the synth workstation um the this

1516
01:00:20,360 --> 01:00:24,230
should work now with everything out

1517
01:00:22,490 --> 01:00:26,720
there there's some things that sometimes

1518
01:00:24,230 --> 01:00:28,340
break and unintentionally it breaks the

1519
01:00:26,720 --> 01:00:30,500
one time that I would recommend and this

1520
01:00:28,340 --> 01:00:33,680
is again for sift I'll have Looney

1521
01:00:30,500 --> 01:00:34,400
answered or UNIX as well it's when you

1522
01:00:33,680 --> 01:00:37,430
do the dist

1523
01:00:34,400 --> 01:00:40,760
upgrade it might break things in fact I

1524
01:00:37,430 --> 01:00:42,950
know for a fact probably would but if

1525
01:00:40,760 --> 01:00:43,670
you do the normal Debian updates it

1526
01:00:42,950 --> 01:00:46,850
should work

1527
01:00:43,670 --> 01:00:48,980
Eleni what do you think yeah same thing

1528
01:00:46,850 --> 01:00:50,900
for remnants in general I recommend that

1529
01:00:48,980 --> 01:00:52,820
the only way that people update the

1530
01:00:50,900 --> 01:00:55,460
remick's distribution is using the

1531
01:00:52,820 --> 01:00:58,520
update rednecks script which is designed

1532
01:00:55,460 --> 01:01:00,770
to update every package and dependency

1533
01:00:58,520 --> 01:01:02,210
that is installed by Remnick and usually

1534
01:01:00,770 --> 01:01:04,730
it's going to be good enough for what

1535
01:01:02,210 --> 01:01:09,170
you're looking to do I know that if you

1536
01:01:04,730 --> 01:01:10,970
use apt-get upgrade or dist upgrade you

1537
01:01:09,170 --> 01:01:13,940
might run into problems especially if

1538
01:01:10,970 --> 01:01:16,250
the apt-get mechanism tries to update

1539
01:01:13,940 --> 01:01:19,460
the kernel so for example David West cut

1540
01:01:16,250 --> 01:01:22,460
yesterday noticed a comparability issue

1541
01:01:19,460 --> 01:01:25,309
between the latest boom to distributed

1542
01:01:22,460 --> 01:01:31,369
Colonel with some versions of VMware and

1543
01:01:25,309 --> 01:01:34,640
so if you ran this upgrade yesterday you

1544
01:01:31,369 --> 01:01:36,559
would have had a problem but that's one

1545
01:01:34,640 --> 01:01:39,020
of the reasons why running our own

1546
01:01:36,559 --> 01:01:40,339
update scripts is probably preferred but

1547
01:01:39,020 --> 01:01:42,290
maybe once in a while you might want to

1548
01:01:40,339 --> 01:01:44,210
update the whole whole distribution and

1549
01:01:42,290 --> 01:01:45,740
if you do so take a snapshot of the

1550
01:01:44,210 --> 01:01:47,059
virtual machine this way in case

1551
01:01:45,740 --> 01:01:50,779
something goes wrong you can always go

1552
01:01:47,059 --> 01:01:52,760
back another good question I recently

1553
01:01:50,780 --> 01:01:55,790
rarely update sift and run experts on a

1554
01:01:52,760 --> 01:01:57,800
combined sift remix image and it broke

1555
01:01:55,790 --> 01:01:59,960
search things is there a place we can

1556
01:01:57,800 --> 01:02:01,640
report such issues I said you tried to

1557
01:01:59,960 --> 01:02:04,819
report it to get up on the sands our

1558
01:02:01,640 --> 01:02:06,710
sift one but they don't support issues

1559
01:02:04,819 --> 01:02:09,950
with the - if four legs

1560
01:02:06,710 --> 01:02:11,540
so here's here's the thing about Linux

1561
01:02:09,950 --> 01:02:14,540
you know and again we both have our own

1562
01:02:11,540 --> 01:02:16,339
bug tracking mechanisms but we don't

1563
01:02:14,540 --> 01:02:17,750
have a combined one right now the things

1564
01:02:16,339 --> 01:02:20,089
that we end up doing is that when we

1565
01:02:17,750 --> 01:02:22,069
find an issue either we try to figure

1566
01:02:20,089 --> 01:02:23,089
out is it because we broke something or

1567
01:02:22,069 --> 01:02:25,279
they broke something we try to

1568
01:02:23,089 --> 01:02:27,170
communicate back and forth with one

1569
01:02:25,280 --> 01:02:28,970
another it hasn't happened too often at

1570
01:02:27,170 --> 01:02:30,260
this point but it's not that we're

1571
01:02:28,970 --> 01:02:32,390
saying hey we're not going to try and

1572
01:02:30,260 --> 01:02:35,210
fix it it just means there's no official

1573
01:02:32,390 --> 01:02:37,160
forum for it to say hey you know we're

1574
01:02:35,210 --> 01:02:38,930
trying to get them to work together but

1575
01:02:37,160 --> 01:02:41,210
the reason that they're separate is

1576
01:02:38,930 --> 01:02:44,540
because we realize that certain things

1577
01:02:41,210 --> 01:02:46,099
may not exactly 100% work together 100

1578
01:02:44,540 --> 01:02:47,450
percent of the time we do our best

1579
01:02:46,099 --> 01:02:48,829
though to try and make it happen and

1580
01:02:47,450 --> 01:02:51,230
what it doesn't mean taking a few weeks

1581
01:02:48,829 --> 01:02:53,540
supposed to get the bells and whistles

1582
01:02:51,230 --> 01:02:55,190
can't worked out and in some cases it's

1583
01:02:53,540 --> 01:02:56,690
not even our fault we have to go back to

1584
01:02:55,190 --> 01:02:59,980
the author of the package and saying hey

1585
01:02:56,690 --> 01:03:01,790
you accidentally broke this dependency

1586
01:02:59,980 --> 01:03:04,579
unintentionally and we work with them to

1587
01:03:01,790 --> 01:03:06,558
get that result as well all any of this

1588
01:03:04,579 --> 01:03:09,530
all thoughts on that part of that is if

1589
01:03:06,559 --> 01:03:14,059
our next bugs not best the best way to

1590
01:03:09,530 --> 01:03:17,089
report gremlins related issues or shared

1591
01:03:14,059 --> 01:03:19,430
tips or or or tell us about how

1592
01:03:17,089 --> 01:03:23,828
wonderful the toolkit is for your tasks

1593
01:03:19,430 --> 01:03:26,419
is to reach out to me on Twitter and

1594
01:03:23,829 --> 01:03:27,470
remick's has its own Twitter account and

1595
01:03:26,420 --> 01:03:30,260
that is called

1596
01:03:27,470 --> 01:03:32,390
Rennicks so people can easily get in

1597
01:03:30,260 --> 01:03:33,140
touch with me and and David helped set

1598
01:03:32,390 --> 01:03:36,410
up with that as well

1599
01:03:33,140 --> 01:03:40,190
also remick's has its own repository on

1600
01:03:36,410 --> 01:03:42,350
github which has a great tool for

1601
01:03:40,190 --> 01:03:44,180
submitting bug reports and for tracking

1602
01:03:42,350 --> 01:03:45,650
progress related to resolving them so I

1603
01:03:44,180 --> 01:03:49,759
did have more Twitter is the best way

1604
01:03:45,650 --> 01:03:51,740
for rednecks what about for mine was

1605
01:03:49,760 --> 01:03:54,710
your thoughts on things that break

1606
01:03:51,740 --> 01:03:58,459
between both distros and for things that

1607
01:03:54,710 --> 01:04:01,580
make between both distres binding which

1608
01:03:58,460 --> 01:04:03,860
add to both of us yeah it's best be I'll

1609
01:04:01,580 --> 01:04:07,160
try it talk we won't talk Robin I do

1610
01:04:03,860 --> 01:04:09,650
talk once in a while and exchange the

1611
01:04:07,160 --> 01:04:12,350
tips and then share challenges so

1612
01:04:09,650 --> 01:04:14,900
probably it's probably is sufficient to

1613
01:04:12,350 --> 01:04:16,100
reach out to just one of the destroy

1614
01:04:14,900 --> 01:04:18,160
maintain errs and the other one will

1615
01:04:16,100 --> 01:04:20,330
probably give the other party involved

1616
01:04:18,160 --> 01:04:24,500
and it looks like that's it for

1617
01:04:20,330 --> 01:04:26,690
questions Carol did you of course great

1618
01:04:24,500 --> 01:04:28,820
thank you so much Robin money for your

1619
01:04:26,690 --> 01:04:31,430
great presentation which helps brings

1620
01:04:28,820 --> 01:04:33,320
this content to the Sands community to

1621
01:04:31,430 --> 01:04:35,660
our audience we greatly appreciate you

1622
01:04:33,320 --> 01:04:38,270
listening in for a schedule of all

1623
01:04:35,660 --> 01:04:40,819
upcoming and archived sands webcasts

1624
01:04:38,270 --> 01:04:44,960
including this one you can visit sam's

1625
01:04:40,820 --> 01:04:47,240
org forward slash webcasts until next

1626
01:04:44,960 --> 01:04:51,340
time take care and we hope to have you

1627
01:04:47,240 --> 01:04:51,339
back again for the next sands webcast

