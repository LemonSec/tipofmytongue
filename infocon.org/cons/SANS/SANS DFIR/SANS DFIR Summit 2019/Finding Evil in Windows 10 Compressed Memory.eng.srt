1
00:00:01,290 --> 00:00:04,540
[Music]

2
00:00:13,519 --> 00:00:19,050
my name is Omar and this is Blaine and

3
00:00:16,289 --> 00:00:21,659
reverse engineers on the fire iLabs

4
00:00:19,050 --> 00:00:23,009
advance reverse engineering team so

5
00:00:21,659 --> 00:00:25,890
we're gonna be talking about finding

6
00:00:23,009 --> 00:00:29,009
evil in the Windows 10 memory manager

7
00:00:25,890 --> 00:00:30,749
today so long story short the memory

8
00:00:29,009 --> 00:00:33,809
manager has changed a lot between

9
00:00:30,749 --> 00:00:36,780
Windows 7 and 8 and then again even more

10
00:00:33,809 --> 00:00:38,218
between Windows 8 and Windows 10 we've

11
00:00:36,780 --> 00:00:40,170
gone ahead and done a whole bunch of

12
00:00:38,219 --> 00:00:43,320
research and then integrated it into

13
00:00:40,170 --> 00:00:47,910
both volatility and recall so you don't

14
00:00:43,320 --> 00:00:50,010
have to do that research okay so Who am

15
00:00:47,910 --> 00:00:52,468
I and why am I talking about the Windows

16
00:00:50,010 --> 00:00:54,480
10 memory manager so my name is omar

17
00:00:52,469 --> 00:00:56,850
sardar I'm a staff reverse engineer on

18
00:00:54,480 --> 00:00:57,779
Flair my job is to reverse engineer

19
00:00:56,850 --> 00:00:59,699
malware

20
00:00:57,780 --> 00:01:01,949
daily and Traverse engineering

21
00:00:59,699 --> 00:01:04,379
accurately on top of that I also

22
00:01:01,949 --> 00:01:06,660
automate reverse engineering efforts and

23
00:01:04,379 --> 00:01:08,490
one of my niche roles on the team is

24
00:01:06,660 --> 00:01:11,369
that I actually analyze Windows

25
00:01:08,490 --> 00:01:14,009
internals for fire I product anytime a

26
00:01:11,370 --> 00:01:16,890
forensic artifact shifts in Windows

27
00:01:14,010 --> 00:01:18,990
I usually dive in figure out if the

28
00:01:16,890 --> 00:01:21,150
algorithm behind it has changed I locate

29
00:01:18,990 --> 00:01:23,520
the object again and then I propagate

30
00:01:21,150 --> 00:01:26,310
that back up to fire I product so we

31
00:01:23,520 --> 00:01:29,520
have the latest detections now I'm not

32
00:01:26,310 --> 00:01:33,330
100% defined by my job so outside of

33
00:01:29,520 --> 00:01:35,910
work I enjoy biking I make pizzas and I

34
00:01:33,330 --> 00:01:38,910
drink espresso and beer I can follow me

35
00:01:35,910 --> 00:01:40,979
on twitter at oh sorry Darwin hello

36
00:01:38,910 --> 00:01:43,050
everyone I'm Blaine Stansell I'm a

37
00:01:40,980 --> 00:01:45,000
reverse engineer on fire Slayer team I

38
00:01:43,050 --> 00:01:47,580
reverse engineer malware and I also

39
00:01:45,000 --> 00:01:49,650
support our commando VM and flare VM

40
00:01:47,580 --> 00:01:51,630
virtual machines so commando is our red

41
00:01:49,650 --> 00:01:53,580
teaming or penetration testing virtual

42
00:01:51,630 --> 00:01:55,500
machine and flare VM is a reverse

43
00:01:53,580 --> 00:01:57,690
engineering specific virtual machine

44
00:01:55,500 --> 00:02:01,200
so who here show hands has heard the

45
00:01:57,690 --> 00:02:02,759
flareon challenge okay few hands so for

46
00:02:01,200 --> 00:02:04,020
those who don't know the flareon

47
00:02:02,760 --> 00:02:05,670
challenge is an annual reverse

48
00:02:04,020 --> 00:02:08,068
engineering competition put on by fire

49
00:02:05,670 --> 00:02:10,140
ice flair team it's really hard really

50
00:02:08,068 --> 00:02:12,119
fun completed two of them in the past

51
00:02:10,139 --> 00:02:13,410
got some Flair and this year I'm really

52
00:02:12,120 --> 00:02:13,900
excited because I've actually authored

53
00:02:13,410 --> 00:02:15,970
two channel

54
00:02:13,900 --> 00:02:17,290
so when you do the challenges keeping a

55
00:02:15,970 --> 00:02:20,049
little look out for that little red icon

56
00:02:17,290 --> 00:02:22,750
over there outside of work I enjoy

57
00:02:20,049 --> 00:02:24,819
gardening DIY projects and of course

58
00:02:22,750 --> 00:02:28,329
beer you can find me on twitter at

59
00:02:24,819 --> 00:02:30,849
malware mechanics all right Thank You

60
00:02:28,329 --> 00:02:33,430
Blaine so why don't we rewind the clock

61
00:02:30,849 --> 00:02:34,689
a bit let's have a storytime now the

62
00:02:33,430 --> 00:02:37,209
year is 2016

63
00:02:34,689 --> 00:02:38,950
I'm a senior reverse engineer crushing

64
00:02:37,209 --> 00:02:42,700
malware on the team writing up reports

65
00:02:38,950 --> 00:02:45,608
closing out tickets etc etc etc I get a

66
00:02:42,700 --> 00:02:48,310
call from my manager Josh Holman and I

67
00:02:45,609 --> 00:02:51,819
can practically feel his hair on fire as

68
00:02:48,310 --> 00:02:54,129
he tells me about how we have customers

69
00:02:51,819 --> 00:02:56,170
running our windows endpoint and they're

70
00:02:54,129 --> 00:02:57,819
not able to actually extract memory and

71
00:02:56,170 --> 00:03:00,670
they're not able to like search for

72
00:02:57,819 --> 00:03:01,298
forensic artifacts that way and as a

73
00:03:00,670 --> 00:03:04,679
backup

74
00:03:01,299 --> 00:03:07,150
they tried volatility recall redline

75
00:03:04,680 --> 00:03:10,180
memorized and they were all actually

76
00:03:07,150 --> 00:03:13,090
failing so it wasn't just us so it

77
00:03:10,180 --> 00:03:15,159
became my job to dig into Windows 10 and

78
00:03:13,090 --> 00:03:17,739
figure out what was actually going on

79
00:03:15,159 --> 00:03:19,599
now they have a saying that when you're

80
00:03:17,739 --> 00:03:21,819
a hammer everything looks like a nail

81
00:03:19,599 --> 00:03:23,470
well when you're a reverse engineer

82
00:03:21,819 --> 00:03:26,440
everything looks like it needs to get

83
00:03:23,470 --> 00:03:28,690
dropped into Ida Pro so I dropped the

84
00:03:26,440 --> 00:03:31,510
kernel and Ida Pro and started reversing

85
00:03:28,690 --> 00:03:33,459
this talk today is about some of that

86
00:03:31,510 --> 00:03:36,010
effort some of the findings that were

87
00:03:33,459 --> 00:03:37,359
done that were made and then the second

88
00:03:36,010 --> 00:03:39,280
half of the talk will be how we

89
00:03:37,359 --> 00:03:41,680
integrated that into volatility and

90
00:03:39,280 --> 00:03:44,530
recall so you don't have to drag it and

91
00:03:41,680 --> 00:03:48,010
die to pro and spend months of your life

92
00:03:44,530 --> 00:03:50,440
on it okay so I'm gonna start this off

93
00:03:48,010 --> 00:03:52,269
by going through a quick memory manager

94
00:03:50,440 --> 00:03:53,859
crash course I'll talk about how the

95
00:03:52,269 --> 00:03:56,290
memory managers changed a little bit

96
00:03:53,859 --> 00:03:59,680
between Windows 7 and 8 and then 8 and

97
00:03:56,290 --> 00:04:01,510
10 I'll cover some of the updates but

98
00:03:59,680 --> 00:04:03,310
the biggest update I think as most of us

99
00:04:01,510 --> 00:04:06,399
know is the introduction of compressed

100
00:04:03,310 --> 00:04:08,199
memory so I'll discuss how we can go

101
00:04:06,400 --> 00:04:09,849
about accessing that compressed memory

102
00:04:08,199 --> 00:04:12,190
and then I'll hand it off to Blaine

103
00:04:09,849 --> 00:04:14,440
Blaine will take over and discuss the

104
00:04:12,190 --> 00:04:17,048
creation of volatility and recall

105
00:04:14,440 --> 00:04:19,120
plug-ins and finally he'll go over a

106
00:04:17,048 --> 00:04:22,120
malware sample I represent eard about

107
00:04:19,120 --> 00:04:24,190
two months ago so it's a pretty real

108
00:04:22,120 --> 00:04:26,730
sample and we'll do a before and after

109
00:04:24,190 --> 00:04:29,160
comparison with volatility

110
00:04:26,730 --> 00:04:31,650
we'll cover what we didn't see before

111
00:04:29,160 --> 00:04:34,860
now and what we see now with the flare

112
00:04:31,650 --> 00:04:37,229
research integration okay so let's get

113
00:04:34,860 --> 00:04:39,150
started with the memory manager now in

114
00:04:37,230 --> 00:04:41,280
Windows anytime you fire for process

115
00:04:39,150 --> 00:04:43,979
whether it's calculator notepad or Oumar

116
00:04:41,280 --> 00:04:48,210
dot exe that process gets two gigabytes

117
00:04:43,980 --> 00:04:50,310
to 128 terabytes of memory so that's

118
00:04:48,210 --> 00:04:52,620
actually what we call virtual memory and

119
00:04:50,310 --> 00:04:54,450
it's the memory manager's job to go

120
00:04:52,620 --> 00:04:56,270
ahead and get that virtual memory and

121
00:04:54,450 --> 00:04:58,590
then translate it to physical memory

122
00:04:56,270 --> 00:05:00,719
physical memory is memory that's located

123
00:04:58,590 --> 00:05:04,169
on like the sticks of RAM within our

124
00:05:00,720 --> 00:05:06,420
laptop the memory manager also takes

125
00:05:04,170 --> 00:05:08,280
care of moving data back and forth

126
00:05:06,420 --> 00:05:10,800
between the hard drive that's an

127
00:05:08,280 --> 00:05:12,390
operation that we call paging in paging

128
00:05:10,800 --> 00:05:14,850
is when you bring memory back in from

129
00:05:12,390 --> 00:05:17,159
the hard drive into RAM out paging is

130
00:05:14,850 --> 00:05:19,260
the opposite now on top of that the

131
00:05:17,160 --> 00:05:21,450
memory manager does a whole bunch of

132
00:05:19,260 --> 00:05:24,060
other things and a lot of them revolve

133
00:05:21,450 --> 00:05:26,909
around performance optimization to back

134
00:05:24,060 --> 00:05:28,860
that performance optimization a lot of

135
00:05:26,910 --> 00:05:32,370
bookkeeping is done this is like a very

136
00:05:28,860 --> 00:05:34,320
serious understatement here so I just

137
00:05:32,370 --> 00:05:37,350
covered virtual memory really briefly

138
00:05:34,320 --> 00:05:40,590
now let's say Omari XE is a 64-bit

139
00:05:37,350 --> 00:05:42,420
process on Windows 10 I'm going to get 8

140
00:05:40,590 --> 00:05:45,060
terabytes of memory to work with from

141
00:05:42,420 --> 00:05:47,490
the kernel now I don't know about you

142
00:05:45,060 --> 00:05:49,590
guys but my laptop does not have a

143
00:05:47,490 --> 00:05:51,570
terabytes of memory let alone 8

144
00:05:49,590 --> 00:05:53,880
terabytes of memory for each process

145
00:05:51,570 --> 00:05:56,040
that I'm running it's the memory

146
00:05:53,880 --> 00:05:58,800
manager's job to provide each process

147
00:05:56,040 --> 00:06:01,260
with the illusion of having a terabytes

148
00:05:58,800 --> 00:06:03,000
of memory to work with and it does all

149
00:06:01,260 --> 00:06:05,460
sorts of tricks to make that illusion

150
00:06:03,000 --> 00:06:07,800
work that 8 terabytes of memory space is

151
00:06:05,460 --> 00:06:10,020
what we call virtual memory if you want

152
00:06:07,800 --> 00:06:11,820
to reach data within your swath of

153
00:06:10,020 --> 00:06:14,719
virtual memory you need to have an

154
00:06:11,820 --> 00:06:17,460
address that you want to read data from

155
00:06:14,720 --> 00:06:20,220
when you read data from an address you

156
00:06:17,460 --> 00:06:22,650
get it back in page granularity and a

157
00:06:20,220 --> 00:06:26,730
page is just hex 1000 bytes of data or

158
00:06:22,650 --> 00:06:28,409
4096 bytes of data the actual location

159
00:06:26,730 --> 00:06:31,380
of the data is transparent

160
00:06:28,410 --> 00:06:33,720
Oumar dot exe or notepad.exe does not

161
00:06:31,380 --> 00:06:35,460
care if that page is in RAM or on the

162
00:06:33,720 --> 00:06:37,740
hard drive or really anywhere else

163
00:06:35,460 --> 00:06:40,140
that's the memory managers problem it's

164
00:06:37,740 --> 00:06:43,920
the memory manager's job to resolve it

165
00:06:40,140 --> 00:06:46,830
so let's say me Omar da Exe is a 64-bit

166
00:06:43,920 --> 00:06:48,690
process and I say hey Colonel give me 1

167
00:06:46,830 --> 00:06:50,789
megabyte of memory to work with I need

168
00:06:48,690 --> 00:06:53,460
to I don't know do some math on this one

169
00:06:50,790 --> 00:06:55,680
memory 1 megabyte of space Colonel says

170
00:06:53,460 --> 00:07:00,330
no problem and replies back and says

171
00:06:55,680 --> 00:07:02,700
here use address d1 a7 for 6 followed by

172
00:07:00,330 --> 00:07:05,159
a whole bunch of zeros now that address

173
00:07:02,700 --> 00:07:07,349
might sound like a random number that

174
00:07:05,160 --> 00:07:09,780
was generated but the reality is that

175
00:07:07,350 --> 00:07:12,600
you can actually break up any address

176
00:07:09,780 --> 00:07:15,030
that you get back into a series of 9 bit

177
00:07:12,600 --> 00:07:16,980
indices followed by a 12 bit offset

178
00:07:15,030 --> 00:07:21,179
remember this is for 64-bit

179
00:07:16,980 --> 00:07:25,290
architectures so each of those indices

180
00:07:21,180 --> 00:07:28,740
is actually used in a series of tables

181
00:07:25,290 --> 00:07:30,780
that we call the page tables so going

182
00:07:28,740 --> 00:07:33,330
back to the previous slide we get those

183
00:07:30,780 --> 00:07:36,030
indexes and then we plug them in at each

184
00:07:33,330 --> 00:07:38,550
step of the way here and ultimately we

185
00:07:36,030 --> 00:07:40,950
get to the last set of tables and that

186
00:07:38,550 --> 00:07:44,580
contains a series of what we call page

187
00:07:40,950 --> 00:07:47,490
table entries page table entries are

188
00:07:44,580 --> 00:07:49,979
just 64-bit integers or data structures

189
00:07:47,490 --> 00:07:52,980
that tell the memory manager how to go

190
00:07:49,980 --> 00:07:54,660
about locating the actual page now

191
00:07:52,980 --> 00:07:57,720
there's all sorts of different types of

192
00:07:54,660 --> 00:08:00,540
page table entries or PT es for short

193
00:07:57,720 --> 00:08:01,860
for example a hardware PT e tells the

194
00:08:00,540 --> 00:08:04,070
memory manager that your memory is

195
00:08:01,860 --> 00:08:07,350
actually in RAM you're good to go a

196
00:08:04,070 --> 00:08:09,090
software PT tells you that you're out in

197
00:08:07,350 --> 00:08:11,280
the page file and you need to be fetched

198
00:08:09,090 --> 00:08:12,690
back from the hard drive then as you can

199
00:08:11,280 --> 00:08:15,299
see here there's all sorts of other

200
00:08:12,690 --> 00:08:17,550
kinds of placeholder PT's ultimately

201
00:08:15,300 --> 00:08:21,570
they all help the memory manager resolve

202
00:08:17,550 --> 00:08:23,760
data ok oh my dad exe made a request I

203
00:08:21,570 --> 00:08:26,490
never get it through the page tables and

204
00:08:23,760 --> 00:08:28,890
the PT II I ran into turned out to be a

205
00:08:26,490 --> 00:08:31,320
software PT let's expand that data

206
00:08:28,890 --> 00:08:33,150
structure just a little bit here so we

207
00:08:31,320 --> 00:08:34,799
see all these fields here but the two

208
00:08:33,150 --> 00:08:37,760
fields that we're gonna focus on today

209
00:08:34,799 --> 00:08:41,039
are page file low and page file high

210
00:08:37,760 --> 00:08:44,819
page file low is an index that's between

211
00:08:41,039 --> 00:08:47,550
0 and 15 where each index corresponds to

212
00:08:44,820 --> 00:08:51,270
one of the page files on your disk page

213
00:08:47,550 --> 00:08:53,760
file index 0 is page file that says page

214
00:08:51,270 --> 00:08:56,130
file index 1 is swap file dot sis

215
00:08:53,760 --> 00:08:58,709
Paige file hi just tells you the offset

216
00:08:56,130 --> 00:09:02,519
you need to go to within that file to

217
00:08:58,709 --> 00:09:04,109
then retrieve your data so let's look at

218
00:09:02,519 --> 00:09:06,269
a real-life example this is in the

219
00:09:04,110 --> 00:09:08,970
windows debugger and I use the Pte

220
00:09:06,269 --> 00:09:10,889
extension on what was probably a random

221
00:09:08,970 --> 00:09:13,560
address so we see the windows debugger

222
00:09:10,889 --> 00:09:15,630
goes through and it carves through the

223
00:09:13,560 --> 00:09:18,268
page tables for us you can see that data

224
00:09:15,630 --> 00:09:22,350
on the left side then on the right side

225
00:09:18,269 --> 00:09:24,690
we can actually see our PT e our PT e is

226
00:09:22,350 --> 00:09:27,300
a 64-bit data structure in this case it

227
00:09:24,690 --> 00:09:29,070
starts with one seven a four D and the

228
00:09:27,300 --> 00:09:32,250
windows debugger has actually gone ahead

229
00:09:29,070 --> 00:09:35,459
and parsed some of it for us we can see

230
00:09:32,250 --> 00:09:37,170
that it's in page file index to which we

231
00:09:35,459 --> 00:09:39,149
haven't really covered yet we mentioned

232
00:09:37,170 --> 00:09:41,790
that page file index zero is page file

233
00:09:39,149 --> 00:09:44,310
that says one is swap file that says but

234
00:09:41,790 --> 00:09:46,469
what is - I don't know we'll find out

235
00:09:44,310 --> 00:09:49,760
soon and then there's page pile high

236
00:09:46,470 --> 00:09:52,889
which is the offset one seven a four D

237
00:09:49,760 --> 00:09:55,980
so let's go ahead now and do a brief

238
00:09:52,889 --> 00:09:58,740
recap here so I renamed Omar dot exe to

239
00:09:55,980 --> 00:10:01,470
notepad dot exe I want to go fetch my

240
00:09:58,740 --> 00:10:03,899
page I have a virtual address so I break

241
00:10:01,470 --> 00:10:06,510
apart that virtual address into a series

242
00:10:03,899 --> 00:10:08,970
of indices I plugged those index values

243
00:10:06,510 --> 00:10:12,120
into the page table and I ultimately

244
00:10:08,970 --> 00:10:14,100
reach a PT II remember the PT II is just

245
00:10:12,120 --> 00:10:17,069
a pay placeholder to where my page

246
00:10:14,100 --> 00:10:19,529
actually resides if it's a hardware PT

247
00:10:17,069 --> 00:10:23,160
II I head down to RAM and I fetch it

248
00:10:19,529 --> 00:10:25,800
from their software PT no problem I go

249
00:10:23,160 --> 00:10:27,810
out to the hard drive ultimately the pts

250
00:10:25,800 --> 00:10:31,139
updated accordingly back to a hardware

251
00:10:27,810 --> 00:10:33,540
PT and no pad gets the page no pad has

252
00:10:31,139 --> 00:10:36,360
no idea that the memory manager just did

253
00:10:33,540 --> 00:10:38,189
all of this stuff under the hood this is

254
00:10:36,360 --> 00:10:41,160
the model of paging that we call the

255
00:10:38,190 --> 00:10:43,920
demand paging model so it's a pretty old

256
00:10:41,160 --> 00:10:45,689
model and all sorts of updates all sorts

257
00:10:43,920 --> 00:10:48,709
of performance optimizations have

258
00:10:45,690 --> 00:10:51,449
happened to it since like Windows 95 and

259
00:10:48,709 --> 00:10:54,180
really all of them revolve ultimately

260
00:10:51,449 --> 00:10:56,010
around the fact that getting a page back

261
00:10:54,180 --> 00:10:59,040
from the hard drive is an incredibly

262
00:10:56,010 --> 00:11:02,010
slow operation accessing your data from

263
00:10:59,040 --> 00:11:04,769
RAM is actually potentially orders a

264
00:11:02,010 --> 00:11:06,630
magnitude faster so to leverage this

265
00:11:04,769 --> 00:11:07,500
fact modern operating systems

266
00:11:06,630 --> 00:11:11,250
Macca

267
00:11:07,500 --> 00:11:13,560
Linux Windows 10 Windows 8.1 they try to

268
00:11:11,250 --> 00:11:16,490
fit as much memory into RAM as possible

269
00:11:13,560 --> 00:11:19,260
and they do that by compressing it

270
00:11:16,490 --> 00:11:21,600
compression has some pretty great

271
00:11:19,260 --> 00:11:24,360
upsides for example it's a highly

272
00:11:21,600 --> 00:11:26,490
parallelizable operation that means that

273
00:11:24,360 --> 00:11:28,230
compression can utilize the two four

274
00:11:26,490 --> 00:11:30,050
eight or sixteen in cores and our

275
00:11:28,230 --> 00:11:32,720
computers and perform work

276
00:11:30,050 --> 00:11:35,729
simultaneously it's incredibly fast and

277
00:11:32,720 --> 00:11:37,650
this actually allows allows us to have a

278
00:11:35,730 --> 00:11:39,720
flexible kernel that can be deployed in

279
00:11:37,650 --> 00:11:41,819
all sorts of locations who here knows

280
00:11:39,720 --> 00:11:44,190
that the same kernel deployed on Windows

281
00:11:41,820 --> 00:11:47,040
10 enterprise servers is the same kernel

282
00:11:44,190 --> 00:11:48,450
that shows up in the Windows Phone it's

283
00:11:47,040 --> 00:11:50,490
called the one kernel effort and

284
00:11:48,450 --> 00:11:54,120
performance optimizations like this

285
00:11:50,490 --> 00:11:56,070
enable that possibility so why don't we

286
00:11:54,120 --> 00:11:58,710
revisit our mystery page file again I'm

287
00:11:56,070 --> 00:12:02,280
gonna drive this in home again page file

288
00:11:58,710 --> 00:12:05,940
low index 0 is page file that says index

289
00:12:02,280 --> 00:12:09,120
1 is swap file that says and we have to

290
00:12:05,940 --> 00:12:10,950
index 2 though and the VM extension in

291
00:12:09,120 --> 00:12:13,260
the windows debugger says well actually

292
00:12:10,950 --> 00:12:16,590
I don't know anything about it and it's

293
00:12:13,260 --> 00:12:18,960
like ok that's fantastic so all this

294
00:12:16,590 --> 00:12:21,300
compressed data is actually stored in

295
00:12:18,960 --> 00:12:23,940
what we call a virtual store more

296
00:12:21,300 --> 00:12:27,209
specifically a ram back virtual store

297
00:12:23,940 --> 00:12:29,610
the store manager is a component of the

298
00:12:27,210 --> 00:12:31,920
kernel that creates all kinds of stores

299
00:12:29,610 --> 00:12:34,530
that ultimately support performance

300
00:12:31,920 --> 00:12:37,439
optimization we may have heard of super

301
00:12:34,530 --> 00:12:39,930
fetch ready drive ready boost they're

302
00:12:37,440 --> 00:12:42,210
all technologies that ultimately are

303
00:12:39,930 --> 00:12:44,609
used to give the user a snappier

304
00:12:42,210 --> 00:12:47,220
experience the idea is to move data away

305
00:12:44,610 --> 00:12:49,680
from slower storage and a leverage

306
00:12:47,220 --> 00:12:51,930
faster storage so the user doesn't have

307
00:12:49,680 --> 00:12:55,949
to wait on writes that go out to a hard

308
00:12:51,930 --> 00:12:59,160
drive so on a default configured Windows

309
00:12:55,950 --> 00:13:02,820
Windows build we have one page file one

310
00:12:59,160 --> 00:13:05,730
swap file so index two ends up being the

311
00:13:02,820 --> 00:13:08,220
index that goes to our virtual store any

312
00:13:05,730 --> 00:13:10,290
page in the virtual store is going to be

313
00:13:08,220 --> 00:13:12,810
compressed using the Express compression

314
00:13:10,290 --> 00:13:14,310
format and after its compressed it's

315
00:13:12,810 --> 00:13:16,709
going to be stored in what we call a

316
00:13:14,310 --> 00:13:19,560
minimal process or mem compression dot

317
00:13:16,710 --> 00:13:20,940
exe you won't find this process in the

318
00:13:19,560 --> 00:13:23,010
task manager

319
00:13:20,940 --> 00:13:24,810
if you have a kernel debugger setup you

320
00:13:23,010 --> 00:13:26,550
can see it and you might even be able to

321
00:13:24,810 --> 00:13:29,099
see it in a process Explorer to be

322
00:13:26,550 --> 00:13:30,630
honest I'm not sure so if you want to

323
00:13:29,100 --> 00:13:32,940
see how much memory on your Windows 10

324
00:13:30,630 --> 00:13:35,370
box is actually currently being

325
00:13:32,940 --> 00:13:37,560
compressed head over the task manager

326
00:13:35,370 --> 00:13:41,040
and check out the performance tab you

327
00:13:37,560 --> 00:13:43,739
can get that information there now to

328
00:13:41,040 --> 00:13:45,810
access data within the store manager we

329
00:13:43,740 --> 00:13:48,690
need what we call a store manager page

330
00:13:45,810 --> 00:13:50,819
key a store manager page key corresponds

331
00:13:48,690 --> 00:13:53,880
to a single page within the store

332
00:13:50,820 --> 00:13:55,830
managers virtual store now in the case

333
00:13:53,880 --> 00:13:59,090
of the ran back store we need two of our

334
00:13:55,830 --> 00:14:02,430
fields page file low and page file high

335
00:13:59,090 --> 00:14:04,980
we shift page file low left by 28 bits

336
00:14:02,430 --> 00:14:08,370
and then or it with page file high to

337
00:14:04,980 --> 00:14:10,440
ultimately derive our SM page key now

338
00:14:08,370 --> 00:14:12,630
that algorithm is subject to change and

339
00:14:10,440 --> 00:14:13,620
has changed a little bit in 1803 and

340
00:14:12,630 --> 00:14:15,150
1809

341
00:14:13,620 --> 00:14:17,040
if you're interested in that you can

342
00:14:15,150 --> 00:14:20,370
check out the volatility source it's

343
00:14:17,040 --> 00:14:22,170
very clearly defined there now let's

344
00:14:20,370 --> 00:14:24,900
take a look at this example from our

345
00:14:22,170 --> 00:14:27,449
previous address we resolved so we know

346
00:14:24,900 --> 00:14:31,170
page file low is 2 and page pile high is

347
00:14:27,450 --> 00:14:35,850
1 7 a 4 d if we follow that algorithm we

348
00:14:31,170 --> 00:14:37,500
generate our key 2001 7 a 4 d really if

349
00:14:35,850 --> 00:14:41,310
we've effectively just smoosh them

350
00:14:37,500 --> 00:14:43,530
together to get this key now what do I

351
00:14:41,310 --> 00:14:45,270
actually do with this key so this is

352
00:14:43,530 --> 00:14:47,970
where all the undocumented and

353
00:14:45,270 --> 00:14:50,400
ever-changing Windows 10 store manager

354
00:14:47,970 --> 00:14:52,620
structures come in that store manager

355
00:14:50,400 --> 00:14:55,380
page key is ultimately used to drive

356
00:14:52,620 --> 00:14:57,780
metadata at each step along the way here

357
00:14:55,380 --> 00:15:00,150
and that metadata is then used to

358
00:14:57,780 --> 00:15:01,860
reconstruct the address of our

359
00:15:00,150 --> 00:15:05,069
compressed page within the mem

360
00:15:01,860 --> 00:15:06,390
compression Exe process so this is a

361
00:15:05,070 --> 00:15:09,120
pretty important point so I'll just

362
00:15:06,390 --> 00:15:11,970
drive it in one more time the store

363
00:15:09,120 --> 00:15:14,339
manager page key is used as we traverse

364
00:15:11,970 --> 00:15:16,920
these structures to extract metadata

365
00:15:14,339 --> 00:15:18,900
that metadata and has some math

366
00:15:16,920 --> 00:15:21,360
operations performed on it which

367
00:15:18,900 --> 00:15:25,339
ultimately helps us derive the address

368
00:15:21,360 --> 00:15:28,230
of our page within mem compression exe

369
00:15:25,339 --> 00:15:30,900
so big picture ok

370
00:15:28,230 --> 00:15:32,580
now I'm no pad in windows 10 I have an

371
00:15:30,900 --> 00:15:33,550
address from which I need to resolve a

372
00:15:32,580 --> 00:15:36,220
page no

373
00:15:33,550 --> 00:15:39,069
problem I go ahead a walk through the

374
00:15:36,220 --> 00:15:41,620
page tables and I ultimately end up at a

375
00:15:39,070 --> 00:15:43,570
PT II remember the PT is just a

376
00:15:41,620 --> 00:15:46,899
placeholder from which I can find my

377
00:15:43,570 --> 00:15:51,070
page if it's a hardware PT I reach out

378
00:15:46,899 --> 00:15:53,680
to ram if it's a software PT I reach out

379
00:15:51,070 --> 00:15:56,410
to the hard drive but in Windows 10 now

380
00:15:53,680 --> 00:15:59,739
if it's a software PT and it happens to

381
00:15:56,410 --> 00:16:02,230
be backed by a virtual store I generate

382
00:15:59,740 --> 00:16:04,690
an SM page key and then I traverse the

383
00:16:02,230 --> 00:16:07,810
undocumented structures using my SM page

384
00:16:04,690 --> 00:16:10,839
key sort of as a guide once I'm within

385
00:16:07,810 --> 00:16:13,869
the mem compression DXE process the page

386
00:16:10,839 --> 00:16:14,769
can still lie within ram or it can be on

387
00:16:13,870 --> 00:16:17,470
the hard drive

388
00:16:14,769 --> 00:16:19,959
either way the page is fetched the PT is

389
00:16:17,470 --> 00:16:23,260
updated notepad gets the updated page

390
00:16:19,959 --> 00:16:25,359
and believe it or not this is way faster

391
00:16:23,260 --> 00:16:30,480
than reaching out to the hard drive to

392
00:16:25,360 --> 00:16:31,870
get your page so that isn't so bad right

393
00:16:30,480 --> 00:16:34,600
all right

394
00:16:31,870 --> 00:16:37,779
thanks Omar no not that bad at all right

395
00:16:34,600 --> 00:16:40,570
we got this so one day I'm closing out

396
00:16:37,779 --> 00:16:41,110
my Mauer ticket and Omar Chaz me up she

397
00:16:40,570 --> 00:16:42,610
was awesome

398
00:16:41,110 --> 00:16:44,020
told me about everything you just heard

399
00:16:42,610 --> 00:16:45,520
and he wants to know hey can you

400
00:16:44,020 --> 00:16:49,480
integrate this into volatility and

401
00:16:45,520 --> 00:16:51,310
recall I said I don't know so if you're

402
00:16:49,480 --> 00:16:52,870
not familiar volatility and recall are

403
00:16:51,310 --> 00:16:55,839
two of the most popular open-source

404
00:16:52,870 --> 00:16:56,829
memory forensics tool kits available but

405
00:16:55,839 --> 00:16:58,329
neither of them can read these

406
00:16:56,829 --> 00:17:00,099
compressed pages so what does that mean

407
00:16:58,329 --> 00:17:02,140
for us well there's a lot of artifacts

408
00:17:00,100 --> 00:17:05,380
that we're just blind to we can't see

409
00:17:02,140 --> 00:17:08,199
them so I dove into volatility and I

410
00:17:05,380 --> 00:17:10,929
learned a lot about it it has magic it

411
00:17:08,199 --> 00:17:13,179
has layers and it has plugins so we'll

412
00:17:10,929 --> 00:17:14,410
start with plugins so plugins are

413
00:17:13,179 --> 00:17:15,970
essentially commands you run with

414
00:17:14,410 --> 00:17:17,410
volatility and to do that from the

415
00:17:15,970 --> 00:17:19,419
command line you first start off with

416
00:17:17,410 --> 00:17:21,910
Python you tell it you want to run

417
00:17:19,419 --> 00:17:25,030
volatility you then give it your memory

418
00:17:21,910 --> 00:17:26,829
capture you tell it hey this is a very

419
00:17:25,030 --> 00:17:28,750
specific type of Windows architecture

420
00:17:26,829 --> 00:17:30,520
and version that I'm using and then you

421
00:17:28,750 --> 00:17:33,730
give it the plug-in name and any

422
00:17:30,520 --> 00:17:35,590
artifacts so when trying to integrate

423
00:17:33,730 --> 00:17:37,210
his research I was like hey why don't we

424
00:17:35,590 --> 00:17:39,280
just create a plug-in to do a proof of

425
00:17:37,210 --> 00:17:41,140
concept so the plugin I wanted to create

426
00:17:39,280 --> 00:17:43,270
I wanted to give it a virtual address of

427
00:17:41,140 --> 00:17:46,000
an own compressed page and I went to get

428
00:17:43,270 --> 00:17:47,670
back the decompressed data so I did just

429
00:17:46,000 --> 00:17:50,670
that I create a plug-in called wind

430
00:17:47,670 --> 00:17:52,140
deflate it takes a process ID in this

431
00:17:50,670 --> 00:17:54,480
case 3676

432
00:17:52,140 --> 00:17:57,240
and it also takes a virtual address for

433
00:17:54,480 --> 00:17:59,340
a known compressed page here hex 7c

434
00:17:57,240 --> 00:18:00,270
followed by four zeros and we can see in

435
00:17:59,340 --> 00:18:01,919
the middle of the screen that I actually

436
00:18:00,270 --> 00:18:04,470
get back a hex dump of the decompressed

437
00:18:01,920 --> 00:18:06,510
data perfect but this doesn't really

438
00:18:04,470 --> 00:18:09,300
scale right you need to know the virtual

439
00:18:06,510 --> 00:18:11,010
address ahead of time so I had to figure

440
00:18:09,300 --> 00:18:13,379
out what could I do and that's when I

441
00:18:11,010 --> 00:18:15,600
came across address spaces so in

442
00:18:13,380 --> 00:18:17,940
volatility address spaces are like cake

443
00:18:15,600 --> 00:18:19,500
just why I put a cake on the screen if

444
00:18:17,940 --> 00:18:21,900
you cut that cake you get these nice

445
00:18:19,500 --> 00:18:23,940
layers and here each layer is an address

446
00:18:21,900 --> 00:18:26,640
space and each layer deals with a very

447
00:18:23,940 --> 00:18:28,470
specific type of memory and if you're

448
00:18:26,640 --> 00:18:30,240
wondering a little strawberries are plug

449
00:18:28,470 --> 00:18:33,750
in so they interfaces with all these

450
00:18:30,240 --> 00:18:36,180
layers all right so the stack of layers

451
00:18:33,750 --> 00:18:37,650
is responsible for translating virtual

452
00:18:36,180 --> 00:18:39,420
memory all the way down to physical

453
00:18:37,650 --> 00:18:41,580
memory and it doesn't matter what the

454
00:18:39,420 --> 00:18:44,790
physical memory is it can be a memory

455
00:18:41,580 --> 00:18:46,350
capture a crash don't hibernate file the

456
00:18:44,790 --> 00:18:48,480
stack of address spaces will figure out

457
00:18:46,350 --> 00:18:50,459
how to do it and return you the data so

458
00:18:48,480 --> 00:18:51,930
then I had an idea well why don't we

459
00:18:50,460 --> 00:18:54,030
just create a new layer that deals with

460
00:18:51,930 --> 00:18:56,760
compress pages you know find it do you

461
00:18:54,030 --> 00:18:58,200
compress it and just return it so that's

462
00:18:56,760 --> 00:18:59,490
what we did so we're gonna look at a

463
00:18:58,200 --> 00:19:01,620
plug in real quick called ball shell

464
00:18:59,490 --> 00:19:03,630
which lets you change context into a

465
00:19:01,620 --> 00:19:07,199
process and just explore arbitrary

466
00:19:03,630 --> 00:19:09,360
memory so previously if you try to read

467
00:19:07,200 --> 00:19:11,160
that address 7c followed by four zeros

468
00:19:09,360 --> 00:19:13,229
it's gonna say sorry I don't know how to

469
00:19:11,160 --> 00:19:15,600
read that but now with flairs

470
00:19:13,230 --> 00:19:16,980
integration you can read arbitrary

471
00:19:15,600 --> 00:19:19,320
memory and if it lies in a compressed

472
00:19:16,980 --> 00:19:22,170
page you can read it perfect this is

473
00:19:19,320 --> 00:19:24,090
what I wanted but to get here we had to

474
00:19:22,170 --> 00:19:27,870
jump a few hurdles and this is where we

475
00:19:24,090 --> 00:19:29,730
enter volatility magic I mean I love

476
00:19:27,870 --> 00:19:32,370
this injury case if you're out there you

477
00:19:29,730 --> 00:19:34,380
logo submission all right so what is

478
00:19:32,370 --> 00:19:36,750
volatility magic well it's essentially

479
00:19:34,380 --> 00:19:39,150
an object that just encapsulate any type

480
00:19:36,750 --> 00:19:41,310
of global offset or magic number you're

481
00:19:39,150 --> 00:19:43,710
going to use throughout your code so I

482
00:19:41,310 --> 00:19:45,840
use this and the two offsets that we

483
00:19:43,710 --> 00:19:47,790
needed to make this happen was SM

484
00:19:45,840 --> 00:19:49,980
Global's so if you remember this slide

485
00:19:47,790 --> 00:19:51,629
from Omar's taluk as some global is at

486
00:19:49,980 --> 00:19:54,000
the very bottom left it's the very

487
00:19:51,630 --> 00:19:57,319
beginning of this whole chain to find

488
00:19:54,000 --> 00:20:00,079
the page and put in mem compression

489
00:19:57,319 --> 00:20:02,759
so we need to find out some Global's and

490
00:20:00,079 --> 00:20:04,859
SM Global's is publicly available in PD

491
00:20:02,759 --> 00:20:07,109
B's or a program database but I can't

492
00:20:04,859 --> 00:20:09,299
ingest those with volatility so instead

493
00:20:07,109 --> 00:20:10,879
we use a regular expression to scan over

494
00:20:09,299 --> 00:20:13,649
into us kernel memory and find it

495
00:20:10,879 --> 00:20:15,089
perfect and in case you do know the

496
00:20:13,649 --> 00:20:18,268
address ahead of time you can also

497
00:20:15,089 --> 00:20:20,039
specify it on the command line all right

498
00:20:18,269 --> 00:20:22,469
that's one address down the other

499
00:20:20,039 --> 00:20:25,379
address we needed was the offset in

500
00:20:22,469 --> 00:20:27,239
paging file so mmm paging file points us

501
00:20:25,379 --> 00:20:29,218
to an array of these in and paging file

502
00:20:27,239 --> 00:20:31,319
addresses which are the structures that

503
00:20:29,219 --> 00:20:33,149
represent the different page files they

504
00:20:31,319 --> 00:20:35,099
tell us like the page file name page for

505
00:20:33,149 --> 00:20:37,918
that sis and now Windows 10 there's also

506
00:20:35,099 --> 00:20:40,438
a boolean value to let you know if it's

507
00:20:37,919 --> 00:20:41,909
a virtual store or not so we tried to

508
00:20:40,439 --> 00:20:44,639
use a regular expression to find this

509
00:20:41,909 --> 00:20:46,529
but the offset typically resided in a

510
00:20:44,639 --> 00:20:48,899
page that was either page to disk or

511
00:20:46,529 --> 00:20:51,449
compressed and since we can't read that

512
00:20:48,899 --> 00:20:53,728
compressed memory yet not much we can do

513
00:20:51,449 --> 00:20:56,849
so we decided to use the default value

514
00:20:53,729 --> 00:20:59,309
index number two we can also specify it

515
00:20:56,849 --> 00:21:02,309
in the command line all right so that's

516
00:20:59,309 --> 00:21:05,009
our two offsets so let's talk real quick

517
00:21:02,309 --> 00:21:06,899
about recall so a number of our flare

518
00:21:05,009 --> 00:21:08,729
team named Sebastian Vogel he was the

519
00:21:06,899 --> 00:21:11,188
lead for integrating Omar's research

520
00:21:08,729 --> 00:21:13,709
into recall turns out recall can

521
00:21:11,189 --> 00:21:15,929
natively parse PD B's so he easily got

522
00:21:13,709 --> 00:21:17,939
the all says he needed it's also pretty

523
00:21:15,929 --> 00:21:20,099
interesting recall can actually ingest

524
00:21:17,939 --> 00:21:22,889
page files if you capture and supply

525
00:21:20,099 --> 00:21:25,229
them so if theta resided in a page paged

526
00:21:22,889 --> 00:21:25,978
out he could read those too so in the

527
00:21:25,229 --> 00:21:27,739
end

528
00:21:25,979 --> 00:21:32,239
Sebastian created a new address space

529
00:21:27,739 --> 00:21:34,199
piece of cake so what does this get us

530
00:21:32,239 --> 00:21:36,239
it gets us what I'm gonna call

531
00:21:34,199 --> 00:21:38,519
transparent translation meaning all the

532
00:21:36,239 --> 00:21:40,229
current plugins and commands should just

533
00:21:38,519 --> 00:21:43,229
automatically be able to read this

534
00:21:40,229 --> 00:21:45,329
compressed data so let's see some quick

535
00:21:43,229 --> 00:21:46,949
examples let's say you wanted to know

536
00:21:45,329 --> 00:21:48,658
all the different loaded drivers you're

537
00:21:46,949 --> 00:21:49,709
going to run the modules command well

538
00:21:48,659 --> 00:21:51,749
you might see a lot of empty spaces

539
00:21:49,709 --> 00:21:53,909
right that David lives and compressed

540
00:21:51,749 --> 00:21:55,439
pages and we can't read it but now if

541
00:21:53,909 --> 00:21:57,119
layers integration should just be able

542
00:21:55,439 --> 00:22:00,149
to read that data as if it was never

543
00:21:57,119 --> 00:22:02,309
compressed in the first place let's say

544
00:22:00,149 --> 00:22:03,928
you wanted to know the different DLL is

545
00:22:02,309 --> 00:22:06,839
loaded in a process or its command-line

546
00:22:03,929 --> 00:22:09,119
maybe there's a networking DLL loaded in

547
00:22:06,839 --> 00:22:10,678
notepad that shouldn't be there well

548
00:22:09,119 --> 00:22:10,980
previously you just wouldn't be able to

549
00:22:10,679 --> 00:22:14,480
read that

550
00:22:10,980 --> 00:22:16,740
information but now you can read it and

551
00:22:14,480 --> 00:22:18,179
the last example I'm going to show is

552
00:22:16,740 --> 00:22:19,650
let's say you needed hashes like you're

553
00:22:18,179 --> 00:22:21,780
on an engagement and you wanted to dump

554
00:22:19,650 --> 00:22:25,049
the hashes from the system well those

555
00:22:21,780 --> 00:22:27,928
typically are compressed but now it's

556
00:22:25,049 --> 00:22:29,490
flavors integration you can read this so

557
00:22:27,929 --> 00:22:31,650
let's all take a moment just think of

558
00:22:29,490 --> 00:22:33,450
all the artifacts that could be just

559
00:22:31,650 --> 00:22:35,790
hiding there and those compressed pages

560
00:22:33,450 --> 00:22:37,220
that were completely blinded to well now

561
00:22:35,790 --> 00:22:40,049
we've unlocked those for you

562
00:22:37,220 --> 00:22:42,630
alright so that's cool but let's see

563
00:22:40,049 --> 00:22:44,639
some real malware so the malware we're

564
00:22:42,630 --> 00:22:47,340
gonna go over is the sample that Omar

565
00:22:44,640 --> 00:22:50,580
reverse dealt two months ago it starts

566
00:22:47,340 --> 00:22:53,790
off as an executable it loads a dll from

567
00:22:50,580 --> 00:22:56,760
the same directory that DLL load some

568
00:22:53,790 --> 00:23:00,360
shell code that shell code reflectively

569
00:22:56,760 --> 00:23:03,240
loads a payload and that payload loads

570
00:23:00,360 --> 00:23:05,189
more shellcode add shellcode

571
00:23:03,240 --> 00:23:07,020
reflectively loads a server DLL which

572
00:23:05,190 --> 00:23:09,780
has been responsible for all c2

573
00:23:07,020 --> 00:23:13,500
communications for the payload that's a

574
00:23:09,780 --> 00:23:15,030
mouthful so a lot going on here so Omar

575
00:23:13,500 --> 00:23:16,080
gives me this memory capture of a

576
00:23:15,030 --> 00:23:17,700
virtual machine that he actually

577
00:23:16,080 --> 00:23:20,220
infected with this malware and he said

578
00:23:17,700 --> 00:23:23,309
Blaine go at it so I use volatility as

579
00:23:20,220 --> 00:23:24,900
is without any of our new research and I

580
00:23:23,309 --> 00:23:27,660
want to see how far I could get in the

581
00:23:24,900 --> 00:23:29,910
IR processor so the first thing I did

582
00:23:27,660 --> 00:23:31,890
was run PS tree because I wanted to see

583
00:23:29,910 --> 00:23:34,190
the different processes running and see

584
00:23:31,890 --> 00:23:35,970
if anything looked obviously suspicious

585
00:23:34,190 --> 00:23:37,830
nothing really looked obviously

586
00:23:35,970 --> 00:23:39,690
suspicious the only thing that slightly

587
00:23:37,830 --> 00:23:42,689
stood out was this little process of the

588
00:23:39,690 --> 00:23:44,910
bottom SMT options that exe I'm the only

589
00:23:42,690 --> 00:23:46,740
thing that raised my eyebrow was it

590
00:23:44,910 --> 00:23:48,240
didn't have a parent so it's a little

591
00:23:46,740 --> 00:23:50,309
orphan which is fine means a parent

592
00:23:48,240 --> 00:23:52,669
exited but typically processes have a

593
00:23:50,309 --> 00:23:56,428
parent tree leading backups like

594
00:23:52,669 --> 00:24:00,630
explored at exe all right so I decided

595
00:23:56,429 --> 00:24:03,660
to investigate fmt options that exe so

596
00:24:00,630 --> 00:24:05,790
the next thing I did I ran DLL List

597
00:24:03,660 --> 00:24:07,380
I wanted to see the command line and if

598
00:24:05,790 --> 00:24:10,200
there's any other interesting DLL and

599
00:24:07,380 --> 00:24:12,240
there was one deal of interest fmt

600
00:24:10,200 --> 00:24:15,299
options at dll it's running from the

601
00:24:12,240 --> 00:24:16,640
same directory net Otto Kahn ok I'm

602
00:24:15,299 --> 00:24:18,929
doing pretty good

603
00:24:16,640 --> 00:24:20,400
then I wanted to run the handles command

604
00:24:18,929 --> 00:24:22,679
and look for a different mutants or

605
00:24:20,400 --> 00:24:24,240
mutexes now these are typically good

606
00:24:22,679 --> 00:24:26,270
indicators to compromise

607
00:24:24,240 --> 00:24:29,790
they're named objects so here we see one

608
00:24:26,270 --> 00:24:31,740
will staging underscore Oh - and another

609
00:24:29,790 --> 00:24:32,700
one check and protect process thread

610
00:24:31,740 --> 00:24:35,550
okay

611
00:24:32,700 --> 00:24:36,330
got some good indicators next I wanted

612
00:24:35,550 --> 00:24:39,419
to see if there's any network

613
00:24:36,330 --> 00:24:42,899
connections and was actually one network

614
00:24:39,420 --> 00:24:45,960
connection from fnthc okay so I see some

615
00:24:42,900 --> 00:24:49,290
networking behavior but that's where

616
00:24:45,960 --> 00:24:51,960
things started to fail this was the fun

617
00:24:49,290 --> 00:24:53,310
part so I tried to run mal fine to the

618
00:24:51,960 --> 00:24:56,040
plug-in looking for injected or

619
00:24:53,310 --> 00:24:57,419
reflectively loaded code all the data

620
00:24:56,040 --> 00:24:59,790
was in compressed pages so I didn't get

621
00:24:57,420 --> 00:25:03,330
any results when I was looking for file

622
00:24:59,790 --> 00:25:05,340
handles same result and I was actually

623
00:25:03,330 --> 00:25:07,110
unable to dump the process or the DLL

624
00:25:05,340 --> 00:25:08,550
this time not because of compressed

625
00:25:07,110 --> 00:25:11,100
pages but these pages were actually

626
00:25:08,550 --> 00:25:13,230
paged to disk so I couldn't get this and

627
00:25:11,100 --> 00:25:14,699
the last command I tried was bad dump

628
00:25:13,230 --> 00:25:15,930
which just tries to look through

629
00:25:14,700 --> 00:25:17,760
different sections and dump those

630
00:25:15,930 --> 00:25:21,120
sections to disk for you that didn't

631
00:25:17,760 --> 00:25:23,129
work either due to compression so what

632
00:25:21,120 --> 00:25:26,280
are we gonna do I mean we can go cry in

633
00:25:23,130 --> 00:25:29,040
a corner but let's step back and do a

634
00:25:26,280 --> 00:25:32,370
quick overview we're unable to actually

635
00:25:29,040 --> 00:25:34,530
carve out the executable or DLL because

636
00:25:32,370 --> 00:25:36,600
those are page to disk and we've seen no

637
00:25:34,530 --> 00:25:38,910
evidence of the shellcode or the actual

638
00:25:36,600 --> 00:25:42,330
payloads we've seen a little evidence of

639
00:25:38,910 --> 00:25:44,040
the C - you know networking but if you

640
00:25:42,330 --> 00:25:45,899
have to answer to us like a cease weed

641
00:25:44,040 --> 00:25:50,460
right like hey did you find evil you're

642
00:25:45,900 --> 00:25:51,780
like maybe it's not going to be good so

643
00:25:50,460 --> 00:25:54,000
now I wanted to rerun this whole process

644
00:25:51,780 --> 00:25:57,240
but using flares integration to

645
00:25:54,000 --> 00:25:58,500
volatility so I reran the handles

646
00:25:57,240 --> 00:26:02,340
command like confirm you Texas and

647
00:25:58,500 --> 00:26:04,250
actually found a new mutex child 1634 ok

648
00:26:02,340 --> 00:26:06,929
new indicator I had previously missed

649
00:26:04,250 --> 00:26:08,190
when I ran the thought when I ran the

650
00:26:06,930 --> 00:26:09,990
handles command looking for files I

651
00:26:08,190 --> 00:26:12,810
actually found all these file handles I

652
00:26:09,990 --> 00:26:14,970
actually found one - Desktop / SMT

653
00:26:12,810 --> 00:26:17,419
options so if I get a hard drive now I

654
00:26:14,970 --> 00:26:19,710
have another place I can go look and

655
00:26:17,420 --> 00:26:21,840
then my favorite plug-in actually worked

656
00:26:19,710 --> 00:26:23,130
this time mal find it found four

657
00:26:21,840 --> 00:26:25,350
different sections and all of these

658
00:26:23,130 --> 00:26:27,180
sections were marked page execute

659
00:26:25,350 --> 00:26:30,030
read/write or an rwx section which is

660
00:26:27,180 --> 00:26:32,030
pretty suspicious and attune the screen

661
00:26:30,030 --> 00:26:35,490
here these are actually our shellcode

662
00:26:32,030 --> 00:26:36,510
perfect I found our shellcode the other

663
00:26:35,490 --> 00:26:37,590
two sections were actually more

664
00:26:36,510 --> 00:26:39,240
interesting to me

665
00:26:37,590 --> 00:26:41,520
both of these sections not only where

666
00:26:39,240 --> 00:26:43,440
they read write execute the day began

667
00:26:41,520 --> 00:26:45,420
with MZ everyone knows what this is

668
00:26:43,440 --> 00:26:46,650
right I hope so

669
00:26:45,420 --> 00:26:48,870
it's a telltale sign about Windows

670
00:26:46,650 --> 00:26:53,040
executable so that means both of these

671
00:26:48,870 --> 00:26:55,260
are payloads right okay so I found the

672
00:26:53,040 --> 00:26:56,340
evidence of these maliciousness but now

673
00:26:55,260 --> 00:26:57,990
I actually want to extract this

674
00:26:56,340 --> 00:26:59,939
maliciousness so I'm gonna run the

675
00:26:57,990 --> 00:27:02,130
plug-in called bad dump the bad is just

676
00:26:59,940 --> 00:27:04,230
a kernel structure that cute does a lot

677
00:27:02,130 --> 00:27:06,570
of bookkeeping for Windows process

678
00:27:04,230 --> 00:27:08,160
memory like how its allocated what its

679
00:27:06,570 --> 00:27:09,419
permissions are so if you run this

680
00:27:08,160 --> 00:27:12,150
plug-in you can actually extract those

681
00:27:09,420 --> 00:27:14,670
to disk and then do some analysis using

682
00:27:12,150 --> 00:27:17,420
different third-party tools so it's

683
00:27:14,670 --> 00:27:17,420
exactly what I did

684
00:27:17,870 --> 00:27:22,580
so I picked one of the different

685
00:27:19,950 --> 00:27:25,020
payloads and are in strings on it and

686
00:27:22,580 --> 00:27:27,449
immediately I'm like hey this looks just

687
00:27:25,020 --> 00:27:29,220
like the server DLL and how did I know

688
00:27:27,450 --> 00:27:32,910
well there's a string that literally

689
00:27:29,220 --> 00:27:35,880
says a server DLL there's also some

690
00:27:32,910 --> 00:27:37,440
other strings like HTTP send HTTP

691
00:27:35,880 --> 00:27:40,470
receive as well as some other IP

692
00:27:37,440 --> 00:27:43,830
addresses that are good indicators okay

693
00:27:40,470 --> 00:27:45,780
so I found the server DLL perfect I ran

694
00:27:43,830 --> 00:27:47,460
strings on the other sample and turns

695
00:27:45,780 --> 00:27:49,410
out this was our actual malware payload

696
00:27:47,460 --> 00:27:51,270
so on the far left we can see some

697
00:27:49,410 --> 00:27:54,000
strings over here that to me stand out

698
00:27:51,270 --> 00:27:56,040
like sandbox evasion or maybe anti

699
00:27:54,000 --> 00:27:57,660
analysis trying to check if it's running

700
00:27:56,040 --> 00:28:00,600
from maybe a directory called sample or

701
00:27:57,660 --> 00:28:03,150
virus or maybe even named sampled I exe

702
00:28:00,600 --> 00:28:05,100
in the middle I see a listing of

703
00:28:03,150 --> 00:28:06,450
different Windows versions now where

704
00:28:05,100 --> 00:28:07,889
well typically as soon as it infects the

705
00:28:06,450 --> 00:28:10,380
system and do some type of quick triage

706
00:28:07,890 --> 00:28:12,060
or system survey just to figure out what

707
00:28:10,380 --> 00:28:13,620
type of machine its infected and might

708
00:28:12,060 --> 00:28:15,980
even send that information out to the

709
00:28:13,620 --> 00:28:15,979
command control

710
00:28:16,460 --> 00:28:20,640
so in the bottom right we can actually

711
00:28:18,690 --> 00:28:22,590
see strings that correspond to our mutex

712
00:28:20,640 --> 00:28:24,630
is that we previously found so now I

713
00:28:22,590 --> 00:28:26,000
have iOS CS but I'm pretty confident

714
00:28:24,630 --> 00:28:28,380
they're also a malicious I have a C's

715
00:28:26,000 --> 00:28:30,630
and then my favorite string I found in

716
00:28:28,380 --> 00:28:33,600
here is in the top left the cell where

717
00:28:30,630 --> 00:28:37,500
net one alright so we'll keep that in

718
00:28:33,600 --> 00:28:39,570
mind so let's do a quick recap I'm still

719
00:28:37,500 --> 00:28:42,180
unable to get the actual executable or

720
00:28:39,570 --> 00:28:43,830
DLL because it's page to disk but if I

721
00:28:42,180 --> 00:28:44,340
had the hard drive I can go grab that so

722
00:28:43,830 --> 00:28:46,830
that's fine

723
00:28:44,340 --> 00:28:48,480
but now I've actually found evidence of

724
00:28:46,830 --> 00:28:50,429
all our payloads and I've actually been

725
00:28:48,480 --> 00:28:51,240
able to extract them so now if I get

726
00:28:50,430 --> 00:28:53,130
asked

727
00:28:51,240 --> 00:28:56,360
hey is there evil in this memory capture

728
00:28:53,130 --> 00:28:59,580
I can say yes and here's the evil

729
00:28:56,360 --> 00:29:02,070
alright so now we've come this far we're

730
00:28:59,580 --> 00:29:04,439
gonna do some enhanced analysis so you

731
00:29:02,070 --> 00:29:06,510
might want to really pay attention it

732
00:29:04,440 --> 00:29:12,299
gets pretty technical we're going to

733
00:29:06,510 --> 00:29:13,799
Google search our ISEs so this exactly

734
00:29:12,299 --> 00:29:15,990
what I did I took this cell aware dot

735
00:29:13,799 --> 00:29:18,720
note and i google-searched it and the

736
00:29:15,990 --> 00:29:20,640
first result I got was a github link to

737
00:29:18,720 --> 00:29:23,789
all these different yarder rules so I

738
00:29:20,640 --> 00:29:25,980
followed that link and I found my string

739
00:29:23,789 --> 00:29:28,679
and I also found the top in the metadata

740
00:29:25,980 --> 00:29:30,860
a reference to a fire I report for apt

741
00:29:28,679 --> 00:29:33,450
30 so now I'm gonna go read this report

742
00:29:30,860 --> 00:29:35,370
not deep you know not duplicate all the

743
00:29:33,450 --> 00:29:36,919
effort reversing the sample and call it

744
00:29:35,370 --> 00:29:38,850
a day

745
00:29:36,919 --> 00:29:42,570
so how awesome was that right before

746
00:29:38,850 --> 00:29:43,668
hand couldn't find it now it's pretty

747
00:29:42,570 --> 00:29:47,100
obvious

748
00:29:43,669 --> 00:29:49,559
so I guess to sum it up injury case once

749
00:29:47,100 --> 00:29:50,760
said with Windows 10 you're not getting

750
00:29:49,559 --> 00:29:53,070
data you'd expect because it's

751
00:29:50,760 --> 00:29:55,649
compressed in memory well now you can

752
00:29:53,070 --> 00:29:57,779
read that compress memory so Andrew I

753
00:29:55,649 --> 00:29:59,158
know Omar and I like beer and we

754
00:29:57,779 --> 00:30:00,840
recently found the rails of it the

755
00:29:59,159 --> 00:30:02,640
Roosevelt Room which is awesome highly

756
00:30:00,840 --> 00:30:04,799
recommend it so I think we should all go

757
00:30:02,640 --> 00:30:09,120
out and just grab a drink talk about how

758
00:30:04,799 --> 00:30:11,700
awesome this is all right thank you very

759
00:30:09,120 --> 00:30:13,350
much playing it so once again this was

760
00:30:11,700 --> 00:30:16,440
all brought to you by the Flair team

761
00:30:13,350 --> 00:30:17,879
enabled this research to happen for

762
00:30:16,440 --> 00:30:19,590
those of you interested in reverse

763
00:30:17,880 --> 00:30:21,630
engineering we have the player on

764
00:30:19,590 --> 00:30:24,330
challenge coming up that'll be dropping

765
00:30:21,630 --> 00:30:26,909
at black hat and speaking of black hat

766
00:30:24,330 --> 00:30:29,100
will be giving a variant of this talk

767
00:30:26,909 --> 00:30:31,440
there and we're gonna focus in on the

768
00:30:29,100 --> 00:30:33,389
windows 10 undocumented structures and

769
00:30:31,440 --> 00:30:35,580
then the challenges involved with

770
00:30:33,390 --> 00:30:37,140
tracking them down reverse engineering

771
00:30:35,580 --> 00:30:39,510
them so if you found this interesting

772
00:30:37,140 --> 00:30:42,029
please join us there now for the good

773
00:30:39,510 --> 00:30:45,750
stuff so all of this is available on

774
00:30:42,029 --> 00:30:48,779
github now so github.com slash fireEye

775
00:30:45,750 --> 00:30:50,190
and if you go to the ball Tildy repo

776
00:30:48,779 --> 00:30:52,470
you'll find Blaine's work there

777
00:30:50,190 --> 00:30:55,020
the recall repo will have Sebastian's

778
00:30:52,470 --> 00:30:56,700
work and if you're interested in some of

779
00:30:55,020 --> 00:30:59,190
the other tools that we have we have

780
00:30:56,700 --> 00:31:02,050
Claire VM for malware analysis and then

781
00:30:59,190 --> 00:31:04,540
commando VM for a red team right

782
00:31:02,050 --> 00:31:07,020
work alright thank you very much we

783
00:31:04,540 --> 00:31:07,020
appreciate it

784
00:31:09,100 --> 00:31:25,379
[Music]

