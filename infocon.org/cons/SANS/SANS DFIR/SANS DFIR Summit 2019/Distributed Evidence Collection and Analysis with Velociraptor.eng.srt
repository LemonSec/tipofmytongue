1
00:00:01,290 --> 00:00:04,540
[Music]

2
00:00:13,370 --> 00:00:17,698
we are really excited to be here today

3
00:00:15,599 --> 00:00:19,980
and we're gonna share with you something

4
00:00:17,699 --> 00:00:21,750
that has been in development for about

5
00:00:19,980 --> 00:00:23,820
the last 18 months or so we've kept it a

6
00:00:21,750 --> 00:00:25,470
little bit quiet until now we've been

7
00:00:23,820 --> 00:00:27,630
working on it actually using it in our

8
00:00:25,470 --> 00:00:29,460
team for the last year or so on a lot of

9
00:00:27,630 --> 00:00:31,919
real-life cases it's a forensic tool

10
00:00:29,460 --> 00:00:34,260
that we've built and we're making called

11
00:00:31,920 --> 00:00:35,280
Velociraptor and we are very keen to

12
00:00:34,260 --> 00:00:37,890
share it with you today

13
00:00:35,280 --> 00:00:40,350
now I'm gonna I'm gonna embarrass Mike

14
00:00:37,890 --> 00:00:42,270
for a minute because he's too humble for

15
00:00:40,350 --> 00:00:44,399
anyone who doesn't know Mike Cowan he's

16
00:00:42,270 --> 00:00:46,020
you know we talk about building a

17
00:00:44,399 --> 00:00:48,059
community and sharing knowledge and

18
00:00:46,020 --> 00:00:50,100
creating open-source tools Mike's pretty

19
00:00:48,059 --> 00:00:52,078
much spent his career doing that for us

20
00:00:50,100 --> 00:00:53,280
he's led a lot of groundbreaking

21
00:00:52,079 --> 00:00:54,989
research particularly in areas like

22
00:00:53,280 --> 00:00:58,260
memory forensics if you've ever used

23
00:00:54,989 --> 00:01:00,690
tools like volatility like recall like

24
00:00:58,260 --> 00:01:02,910
go rapid response then you've benefitted

25
00:01:00,690 --> 00:01:06,539
as we all have from work that Mike's

26
00:01:02,910 --> 00:01:09,000
done so and it's in that same so you can

27
00:01:06,540 --> 00:01:10,680
all buy him a drink later it's in that

28
00:01:09,000 --> 00:01:12,659
same spirit that we're kind of bringing

29
00:01:10,680 --> 00:01:13,950
Velociraptor out to everyone this is

30
00:01:12,659 --> 00:01:15,780
something that we're developing but

31
00:01:13,950 --> 00:01:18,540
we're releasing it we have released it

32
00:01:15,780 --> 00:01:19,740
as free and open source software so all

33
00:01:18,540 --> 00:01:22,140
the stuff that we're showing you today

34
00:01:19,740 --> 00:01:24,060
it has been used in real life on real

35
00:01:22,140 --> 00:01:25,200
life cases and it's something that we

36
00:01:24,060 --> 00:01:27,750
are contributing back to the community

37
00:01:25,200 --> 00:01:30,000
and we want everyone to get involved in

38
00:01:27,750 --> 00:01:32,100
and and benefit from it so what we're

39
00:01:30,000 --> 00:01:34,259
gonna be talking about today is what is

40
00:01:32,100 --> 00:01:36,539
it how does it work and most importantly

41
00:01:34,259 --> 00:01:40,890
how can you and all of us benefit from

42
00:01:36,540 --> 00:01:42,630
from what we're developing here all

43
00:01:40,890 --> 00:01:45,450
righty so what's the need here what's

44
00:01:42,630 --> 00:01:47,280
the point when you do digital forensics

45
00:01:45,450 --> 00:01:49,290
work you'll be familiar with you know we

46
00:01:47,280 --> 00:01:50,610
need to get visibility we need to see

47
00:01:49,290 --> 00:01:52,619
what's happening on the network if

48
00:01:50,610 --> 00:01:53,850
you're doing a network investigation you

49
00:01:52,619 --> 00:01:56,030
need to be able to move around the

50
00:01:53,850 --> 00:01:58,860
network to very surgically collect

51
00:01:56,030 --> 00:02:00,960
information for your investigation and

52
00:01:58,860 --> 00:02:02,969
not just monitor stuff that's happening

53
00:02:00,960 --> 00:02:05,219
but also be able to go back in the past

54
00:02:02,969 --> 00:02:06,809
we have some really good tools these

55
00:02:05,219 --> 00:02:08,940
days you know especially in the ADR

56
00:02:06,810 --> 00:02:10,830
space where we can see what's going on

57
00:02:08,940 --> 00:02:13,020
we can sort of build things to look at

58
00:02:10,830 --> 00:02:13,950
what's happening but you know you might

59
00:02:13,020 --> 00:02:16,050
be able to use

60
00:02:13,950 --> 00:02:18,030
our tool to see if a piece of malware is

61
00:02:16,050 --> 00:02:19,440
executing but what if you want to go

62
00:02:18,030 --> 00:02:22,110
back in time what if you want to say

63
00:02:19,440 --> 00:02:24,060
well I know about all these areas where

64
00:02:22,110 --> 00:02:25,470
I look for evidence of execution I want

65
00:02:24,060 --> 00:02:27,390
to go back and I want to look at those

66
00:02:25,470 --> 00:02:29,640
and I want to do it in a surgical way

67
00:02:27,390 --> 00:02:32,010
and I want to do it very quickly and I

68
00:02:29,640 --> 00:02:33,690
want to do it at scale that's kind of

69
00:02:32,010 --> 00:02:36,450
one of the gaps that we have with our

70
00:02:33,690 --> 00:02:40,739
tool set and that's what we're building

71
00:02:36,450 --> 00:02:42,260
velociraptor to to try to do so what

72
00:02:40,739 --> 00:02:44,099
we're gonna do we've got a lot of

73
00:02:42,260 --> 00:02:45,989
demonstration a lot of case studies that

74
00:02:44,099 --> 00:02:47,010
we're gonna be going through but before

75
00:02:45,989 --> 00:02:50,310
we go through them we're gonna give you

76
00:02:47,010 --> 00:02:52,109
a quick overview of the the architecture

77
00:02:50,310 --> 00:02:54,540
the design and some of the key points of

78
00:02:52,110 --> 00:02:57,540
this system so here's our very simple

79
00:02:54,540 --> 00:03:00,269
network over on the Left we have our no

80
00:02:57,540 --> 00:03:02,910
sorry I'm in Australia it's the wrong

81
00:03:00,269 --> 00:03:06,330
way around on the right we have our

82
00:03:02,910 --> 00:03:07,980
digital forensic ninjas who are needing

83
00:03:06,330 --> 00:03:09,450
to do their investigation on the Left we

84
00:03:07,980 --> 00:03:11,220
have our systems that we need to

85
00:03:09,450 --> 00:03:13,679
investigate what we're going to be doing

86
00:03:11,220 --> 00:03:17,069
is standing up a server a Velociraptor

87
00:03:13,680 --> 00:03:18,840
server and this is going to have a bit

88
00:03:17,069 --> 00:03:21,390
of data and some file store and then

89
00:03:18,840 --> 00:03:24,390
we're going to be pushing out agents to

90
00:03:21,390 --> 00:03:26,970
our systems now this is written in go

91
00:03:24,390 --> 00:03:29,488
it's very cross-platform compatible so

92
00:03:26,970 --> 00:03:31,650
we don't have any compatibility issues

93
00:03:29,489 --> 00:03:35,579
across platforms we have clients already

94
00:03:31,650 --> 00:03:39,420
for Windows for Linux and for Mac we

95
00:03:35,579 --> 00:03:41,670
push these out and we fire them up they

96
00:03:39,420 --> 00:03:44,399
talk back to the server and at this

97
00:03:41,670 --> 00:03:45,988
point they're ready and they maintain a

98
00:03:44,400 --> 00:03:47,700
consistent connection with the server

99
00:03:45,989 --> 00:03:49,859
and they're waiting to accept commands

100
00:03:47,700 --> 00:03:51,660
and then our investigators over here are

101
00:03:49,859 --> 00:03:54,120
going to be connecting to that server

102
00:03:51,660 --> 00:03:56,370
through the GUI just a web-based GUI and

103
00:03:54,120 --> 00:04:00,329
they're going to be doing whatever

104
00:03:56,370 --> 00:04:02,000
analysis they want to do and we're going

105
00:04:00,329 --> 00:04:04,799
to get into the details of this as we go

106
00:04:02,000 --> 00:04:07,440
now a few key design things to know

107
00:04:04,799 --> 00:04:10,500
about velociraptor is a single

108
00:04:07,440 --> 00:04:12,359
executable that's it there's no dll's

109
00:04:10,500 --> 00:04:15,480
there's no external dependencies there's

110
00:04:12,359 --> 00:04:18,019
no OS requirements it's one executable

111
00:04:15,480 --> 00:04:21,000
put for that particular operating system

112
00:04:18,019 --> 00:04:23,580
that same executable can be a server or

113
00:04:21,000 --> 00:04:26,820
a client so when you fire it up you you

114
00:04:23,580 --> 00:04:27,150
will tell it what you want it to be the

115
00:04:26,820 --> 00:04:28,800
can

116
00:04:27,150 --> 00:04:30,929
generation of them is controlled by a

117
00:04:28,800 --> 00:04:32,220
couple of text files that have the

118
00:04:30,930 --> 00:04:34,199
config and they have some simple

119
00:04:32,220 --> 00:04:37,259
information like the location of the

120
00:04:34,199 --> 00:04:39,509
server some encryption keys for secure

121
00:04:37,259 --> 00:04:41,550
comms and the directories where the data

122
00:04:39,509 --> 00:04:44,190
gets stored but that's it it's a very

123
00:04:41,550 --> 00:04:46,350
very simple lightweight setup and as I

124
00:04:44,190 --> 00:04:47,520
said very cross compatible at the moment

125
00:04:46,350 --> 00:04:49,590
there's no data base we're literally

126
00:04:47,520 --> 00:04:51,240
just running flat files in the backend

127
00:04:49,590 --> 00:04:53,369
which actually makes it very very quick

128
00:04:51,240 --> 00:04:55,440
very easy to manage very easy to

129
00:04:53,370 --> 00:04:59,039
maintain it also keeps the resource

130
00:04:55,440 --> 00:05:01,199
usage quite low the processing that

131
00:04:59,039 --> 00:05:03,360
we're going to do is going to be both on

132
00:05:01,199 --> 00:05:04,650
the clients and on the servers depending

133
00:05:03,360 --> 00:05:07,220
on the task that we're doing and you'll

134
00:05:04,650 --> 00:05:10,229
see how that works as we go through the

135
00:05:07,220 --> 00:05:12,539
scenarios and it's also very highly

136
00:05:10,229 --> 00:05:14,430
customizable you can change the service

137
00:05:12,539 --> 00:05:17,130
names the descriptions the executable

138
00:05:14,430 --> 00:05:19,229
names the server location obviously the

139
00:05:17,130 --> 00:05:20,789
port's all of that can be changed when

140
00:05:19,229 --> 00:05:23,340
we deploy this we typically put it in

141
00:05:20,789 --> 00:05:25,469
the cloud we get a DNS name that's very

142
00:05:23,340 --> 00:05:28,830
hard to see it just blends in with all

143
00:05:25,470 --> 00:05:30,539
the other traffic and we can be very

144
00:05:28,830 --> 00:05:32,130
very sneaky about how we put this out

145
00:05:30,539 --> 00:05:33,840
there and we'll explain why that kind of

146
00:05:32,130 --> 00:05:35,969
cloud deployment is good for other

147
00:05:33,840 --> 00:05:40,138
reasons as well so that's a high level

148
00:05:35,970 --> 00:05:41,940
architecture now key design principles

149
00:05:40,139 --> 00:05:44,039
again we're gonna get a little bit

150
00:05:41,940 --> 00:05:46,740
technical now because we want to focus

151
00:05:44,039 --> 00:05:49,110
right upfront on what makes this so good

152
00:05:46,740 --> 00:05:51,360
what why do we think this is so valuable

153
00:05:49,110 --> 00:05:52,320
as we've used it on jobs then we're

154
00:05:51,360 --> 00:05:55,349
going to go through a lot of case

155
00:05:52,320 --> 00:05:56,969
studies so the most important thing is

156
00:05:55,349 --> 00:05:58,050
and I'm going to hand over to Mike to

157
00:05:56,970 --> 00:06:00,270
give you the details of this because

158
00:05:58,050 --> 00:06:02,880
this is really the sort of the genius

159
00:06:00,270 --> 00:06:05,460
that he's created behind this what

160
00:06:02,880 --> 00:06:07,380
Velociraptor is is a query language it's

161
00:06:05,460 --> 00:06:09,289
not a tool it's not just a piece of

162
00:06:07,380 --> 00:06:12,449
software it's actually a very very

163
00:06:09,289 --> 00:06:15,030
specially crafted language for doing

164
00:06:12,449 --> 00:06:17,550
analysis of endpoints for forensic

165
00:06:15,030 --> 00:06:21,000
artifacts that's focused on dfi our

166
00:06:17,550 --> 00:06:23,220
cases and it's the vql that velociraptor

167
00:06:21,000 --> 00:06:24,270
query language that powers everything

168
00:06:23,220 --> 00:06:26,699
that we do so mike did you wanna

169
00:06:24,270 --> 00:06:28,979
describe it a bit more sure so so the

170
00:06:26,699 --> 00:06:30,780
whole point of of Velociraptor is really

171
00:06:28,979 --> 00:06:33,150
like Nick was saying is a query engine

172
00:06:30,780 --> 00:06:35,729
so all it does is it actually evaluates

173
00:06:33,150 --> 00:06:37,799
that query you can write that query you

174
00:06:35,729 --> 00:06:40,590
can change it you can write whatever you

175
00:06:37,800 --> 00:06:42,930
want and and it basically just very

176
00:06:40,590 --> 00:06:44,940
flexibly run runs out that allows people

177
00:06:42,930 --> 00:06:46,289
to adapt really quickly you don't have

178
00:06:44,940 --> 00:06:47,940
to recompile you don't have to write

179
00:06:46,289 --> 00:06:49,349
code you can just change the query and

180
00:06:47,940 --> 00:06:52,080
you can do something completely novel

181
00:06:49,349 --> 00:06:54,029
that you know wasn't even built-in but

182
00:06:52,080 --> 00:06:56,190
you might have to come up to it in the

183
00:06:54,029 --> 00:06:58,229
course of an investigation but at the

184
00:06:56,190 --> 00:07:00,419
same time we didn't really want to make

185
00:06:58,229 --> 00:07:02,760
make it so that everybody has to be a

186
00:07:00,419 --> 00:07:04,889
vql expert so that they have to you know

187
00:07:02,760 --> 00:07:06,450
just be able to write a query to use the

188
00:07:04,889 --> 00:07:08,610
tool it's kind of cumbersome and it's

189
00:07:06,450 --> 00:07:10,800
kind of hard right so what we actually

190
00:07:08,610 --> 00:07:13,440
have is this idea of velociraptor

191
00:07:10,800 --> 00:07:15,810
artifacts and an artifact is just a text

192
00:07:13,440 --> 00:07:17,820
yellow file that contains the queries

193
00:07:15,810 --> 00:07:20,610
and how a bunch of metadata will go into

194
00:07:17,820 --> 00:07:23,669
that in details and that kind of wraps

195
00:07:20,610 --> 00:07:25,440
that knowledge that specific mechanical

196
00:07:23,669 --> 00:07:27,479
knowledge of how to actually do this

197
00:07:25,440 --> 00:07:32,310
which is collect this particular

198
00:07:27,479 --> 00:07:35,789
forensic artifact in in sort of a human

199
00:07:32,310 --> 00:07:37,529
consumable sort of yeah no file right so

200
00:07:35,789 --> 00:07:40,469
then so that you can then basically have

201
00:07:37,529 --> 00:07:42,300
two classes of users like one that is

202
00:07:40,469 --> 00:07:44,310
you know highly technical they know the

203
00:07:42,300 --> 00:07:46,260
vql I can basically go ahead and and

204
00:07:44,310 --> 00:07:48,360
write and customize and you know

205
00:07:46,260 --> 00:07:51,150
everybody can get up to that that level

206
00:07:48,360 --> 00:07:54,900
but then the users can then simply use

207
00:07:51,150 --> 00:07:57,779
that work and and just pick the the

208
00:07:54,900 --> 00:07:59,310
artifact to collect the specific things

209
00:07:57,779 --> 00:08:01,409
that they that they wanted to either

210
00:07:59,310 --> 00:08:03,210
collect or analyze wanted to respond all

211
00:08:01,409 --> 00:08:06,389
these sort of things so you don't have

212
00:08:03,210 --> 00:08:08,580
to know vql to use the tool you can

213
00:08:06,389 --> 00:08:10,680
simply just select what you want and it

214
00:08:08,580 --> 00:08:12,810
goes ahead and does it yeah but if you

215
00:08:10,680 --> 00:08:16,020
want to customize it as you'll see it's

216
00:08:12,810 --> 00:08:18,570
very easy to do so yeah so again the

217
00:08:16,020 --> 00:08:19,979
concept behind this is we we have

218
00:08:18,570 --> 00:08:21,900
questions to answer we're doing an

219
00:08:19,979 --> 00:08:24,210
investigation we want to know what

220
00:08:21,900 --> 00:08:26,669
programs have executed across a computer

221
00:08:24,210 --> 00:08:28,620
or across our whole fleet we know as

222
00:08:26,669 --> 00:08:30,570
digital forensics people what to look

223
00:08:28,620 --> 00:08:32,698
for you know when we when we study

224
00:08:30,570 --> 00:08:34,799
forensics we know that there are six or

225
00:08:32,698 --> 00:08:36,990
ten or more places that we can look for

226
00:08:34,799 --> 00:08:38,010
evidence of execution so what we're

227
00:08:36,990 --> 00:08:40,110
doing is we're getting that knowledge

228
00:08:38,010 --> 00:08:42,779
and we're encapsulating that into a

229
00:08:40,110 --> 00:08:44,730
velociraptor artifact so now you don't

230
00:08:42,779 --> 00:08:46,860
have to think here are the ten places I

231
00:08:44,730 --> 00:08:48,360
need to go out and separately look you

232
00:08:46,860 --> 00:08:49,829
can just use one artifact and it'll do

233
00:08:48,360 --> 00:08:51,990
it for you and then if you want to

234
00:08:49,829 --> 00:08:52,769
customize that artifact maybe to focus

235
00:08:51,990 --> 00:08:55,499
on a particular

236
00:08:52,769 --> 00:08:57,689
some malware or a particular location or

237
00:08:55,499 --> 00:08:59,999
a user account or anything else the

238
00:08:57,689 --> 00:09:02,129
query language and the functions and the

239
00:08:59,999 --> 00:09:04,050
parameters and the other features allow

240
00:09:02,129 --> 00:09:05,819
you to customize it very easy very very

241
00:09:04,050 --> 00:09:08,459
easily and then once you've got that

242
00:09:05,819 --> 00:09:10,378
artifacts a evidence of execution you

243
00:09:08,459 --> 00:09:13,229
can reuse that in different places you

244
00:09:10,379 --> 00:09:14,549
can use it to look at one computer you

245
00:09:13,230 --> 00:09:16,559
can do it to hunt across multiple

246
00:09:14,549 --> 00:09:18,749
computers as you'll see you can even set

247
00:09:16,559 --> 00:09:20,639
up monitoring to do continual monitoring

248
00:09:18,749 --> 00:09:23,489
and you can even do response actions all

249
00:09:20,639 --> 00:09:26,970
based on that one sort of body of

250
00:09:23,489 --> 00:09:28,259
knowledge that forensic artifact so

251
00:09:26,970 --> 00:09:29,939
again I'll hand over to Mike and you can

252
00:09:28,259 --> 00:09:33,929
talk through some of the details of this

253
00:09:29,939 --> 00:09:36,149
and use the magic button okay so thanks

254
00:09:33,929 --> 00:09:37,470
so this is an overview of what an

255
00:09:36,149 --> 00:09:40,230
artifact looks like as I said before

256
00:09:37,470 --> 00:09:41,970
it's just a yamo file and it's it's

257
00:09:40,230 --> 00:09:44,489
supposed to be human readable human

258
00:09:41,970 --> 00:09:46,860
consumable and so on I've got a little

259
00:09:44,489 --> 00:09:48,329
bit of a zoom up so at the very top you

260
00:09:46,860 --> 00:09:50,549
know we just have some metadata we have

261
00:09:48,329 --> 00:09:52,349
some name in the description and that

262
00:09:50,549 --> 00:09:53,970
helps us search for it so you know so if

263
00:09:52,350 --> 00:09:56,519
you write your own artifact you can put

264
00:09:53,970 --> 00:09:58,110
some keywords in there and then the user

265
00:09:56,519 --> 00:10:00,179
can simply search for it evidence of

266
00:09:58,110 --> 00:10:02,309
execution lateral movement all the usual

267
00:10:00,179 --> 00:10:04,379
things and then we can basically find

268
00:10:02,309 --> 00:10:07,618
the right artifacts to look for what we

269
00:10:04,379 --> 00:10:09,749
need then we have this parameter section

270
00:10:07,619 --> 00:10:12,029
so you can customize the artifacts you

271
00:10:09,749 --> 00:10:15,089
can provide parameters with default

272
00:10:12,029 --> 00:10:18,240
values and that allows the user in the

273
00:10:15,089 --> 00:10:20,759
UI to to customize it to some extent and

274
00:10:18,240 --> 00:10:22,920
to you know change those parameters but

275
00:10:20,759 --> 00:10:24,569
but they will be pre-populated in this

276
00:10:22,920 --> 00:10:28,128
particular case the example that we're

277
00:10:24,569 --> 00:10:31,589
showing here it's just simply checks for

278
00:10:28,129 --> 00:10:33,809
for their homework parent-child process

279
00:10:31,589 --> 00:10:35,220
kind of thing right we're going to work

280
00:10:33,809 --> 00:10:38,040
with this example but you can see that

281
00:10:35,220 --> 00:10:40,410
you know essentially the parameter is a

282
00:10:38,040 --> 00:10:42,269
list of process name the expected parent

283
00:10:40,410 --> 00:10:44,639
name that you know it should have right

284
00:10:42,269 --> 00:10:47,249
so it's just a CSV file with these kind

285
00:10:44,639 --> 00:10:49,829
of information and then we get to the

286
00:10:47,249 --> 00:10:51,959
meat of the artifact which is the vql

287
00:10:49,829 --> 00:10:54,809
queries and I'm not going to go too much

288
00:10:51,959 --> 00:10:56,279
into detail here other than to say you

289
00:10:54,809 --> 00:10:58,679
know there's there's a bunch of queries

290
00:10:56,279 --> 00:11:02,410
this one's a little bit more complicated

291
00:10:58,679 --> 00:11:05,110
but you know once that query is is read

292
00:11:02,410 --> 00:11:07,780
then you basically can change that

293
00:11:05,110 --> 00:11:09,640
adding more process name relationship

294
00:11:07,780 --> 00:11:13,000
into the CSV file but you can see that

295
00:11:09,640 --> 00:11:16,120
it essentially pauses that CSV file that

296
00:11:13,000 --> 00:11:21,790
is provided in the parameter section and

297
00:11:16,120 --> 00:11:23,020
and and then just uses that yeah so one

298
00:11:21,790 --> 00:11:25,420
of the questions we sometimes get is

299
00:11:23,020 --> 00:11:26,680
hang on we've got ways of querying

300
00:11:25,420 --> 00:11:28,660
endpoints already we've got things like

301
00:11:26,680 --> 00:11:30,339
OS query and other tools why do we need

302
00:11:28,660 --> 00:11:31,630
another one so we thought it might be

303
00:11:30,340 --> 00:11:33,190
useful to just sort of explain some of

304
00:11:31,630 --> 00:11:35,260
the differences so our square is a

305
00:11:33,190 --> 00:11:37,060
really great tool like that would be the

306
00:11:35,260 --> 00:11:38,920
first ones to actually have this idea of

307
00:11:37,060 --> 00:11:40,420
like having a query engine on the

308
00:11:38,920 --> 00:11:41,860
endpoint that's really cool that was a

309
00:11:40,420 --> 00:11:45,130
breakthrough but the problem is that

310
00:11:41,860 --> 00:11:47,440
they use plain SQL which is very limited

311
00:11:45,130 --> 00:11:49,210
and if you can see there is a really

312
00:11:47,440 --> 00:11:51,040
good project there where they try to map

313
00:11:49,210 --> 00:11:53,980
the attack framework to our square

314
00:11:51,040 --> 00:11:57,280
queries and and you can see on the left

315
00:11:53,980 --> 00:12:00,400
side they are doing these queries it's a

316
00:11:57,280 --> 00:12:01,810
little obviously it's hard to see but

317
00:12:00,400 --> 00:12:03,520
it's actually quite quite an involved

318
00:12:01,810 --> 00:12:06,280
very complicated query there's lots of

319
00:12:03,520 --> 00:12:09,010
joins and each of those queries each

320
00:12:06,280 --> 00:12:11,230
block of text on the left is essentially

321
00:12:09,010 --> 00:12:14,860
one line of that CSV file because

322
00:12:11,230 --> 00:12:17,410
there's no really way to kind of write

323
00:12:14,860 --> 00:12:19,780
it concisely so if you were to you know

324
00:12:17,410 --> 00:12:21,969
add new queries it's quite involved you

325
00:12:19,780 --> 00:12:24,699
know it's very very hard to to deal with

326
00:12:21,970 --> 00:12:26,230
that but on the on the right hand side

327
00:12:24,700 --> 00:12:28,600
we have the Velociraptor version of this

328
00:12:26,230 --> 00:12:31,300
which is basically table driven and the

329
00:12:28,600 --> 00:12:33,520
query just kind of like just does the

330
00:12:31,300 --> 00:12:36,219
same thing you know for each element of

331
00:12:33,520 --> 00:12:38,170
the query yeah so the important thing is

332
00:12:36,220 --> 00:12:40,510
this might all seem very complicated you

333
00:12:38,170 --> 00:12:42,130
might think hang on this is this is more

334
00:12:40,510 --> 00:12:43,900
than I need I just want easy click

335
00:12:42,130 --> 00:12:45,100
button it's actually not that hard and

336
00:12:43,900 --> 00:12:47,290
when we go through some of the scenarios

337
00:12:45,100 --> 00:12:49,090
we're going to show you how you don't

338
00:12:47,290 --> 00:12:50,439
even need to edit any of this stuff you

339
00:12:49,090 --> 00:12:52,930
can literally just point and click and

340
00:12:50,440 --> 00:12:54,520
it will do a lot of default things for

341
00:12:52,930 --> 00:12:56,709
you because we have already a very

342
00:12:54,520 --> 00:12:58,630
strong library of artifacts and queries

343
00:12:56,710 --> 00:13:00,610
built up but if you want to edit it and

344
00:12:58,630 --> 00:13:02,860
change them you can so here for example

345
00:13:00,610 --> 00:13:05,440
this parameter table as Mike said is

346
00:13:02,860 --> 00:13:07,420
just gerrant child parent process

347
00:13:05,440 --> 00:13:09,070
relationships if you want to customize

348
00:13:07,420 --> 00:13:11,290
it all you need to do is change the line

349
00:13:09,070 --> 00:13:13,240
of that without going into any of the

350
00:13:11,290 --> 00:13:15,339
vql and you've got a customized artifact

351
00:13:13,240 --> 00:13:16,180
for your investigation or for your

352
00:13:15,339 --> 00:13:18,790
particular

353
00:13:16,180 --> 00:13:21,849
environment this is an example of one of

354
00:13:18,790 --> 00:13:23,829
these here we've got a query that tree

355
00:13:21,850 --> 00:13:25,240
our jizz event logs from a window system

356
00:13:23,830 --> 00:13:27,520
and you'll see what we're showing here

357
00:13:25,240 --> 00:13:31,300
are the parameters and again you don't

358
00:13:27,520 --> 00:13:33,100
need to be a vql expert you can see what

359
00:13:31,300 --> 00:13:35,170
it does it goes into these locations and

360
00:13:33,100 --> 00:13:37,750
it grabs all the e VTX files and ev2

361
00:13:35,170 --> 00:13:39,310
files that it can again you can

362
00:13:37,750 --> 00:13:40,990
customize this by just changing this

363
00:13:39,310 --> 00:13:43,029
parameter you don't need to go into the

364
00:13:40,990 --> 00:13:45,070
code but because of the way it's

365
00:13:43,029 --> 00:13:47,649
designed you have that complete

366
00:13:45,070 --> 00:13:49,300
flexibility and we're gonna build some

367
00:13:47,649 --> 00:13:51,670
scenarios as we go to demonstrate how

368
00:13:49,300 --> 00:13:53,829
this works now a quick set up where's it

369
00:13:51,670 --> 00:13:55,329
is Alyssa here somewhere I promised that

370
00:13:53,830 --> 00:13:57,100
I'd show you how to set this up in like

371
00:13:55,330 --> 00:13:59,320
two minutes so here we go this is the

372
00:13:57,100 --> 00:14:00,760
setup it's a single executable so

373
00:13:59,320 --> 00:14:03,130
firstly we're going to set up a server

374
00:14:00,760 --> 00:14:05,380
on the server we run the Velociraptor

375
00:14:03,130 --> 00:14:07,540
executable and we've got a configuration

376
00:14:05,380 --> 00:14:10,000
generator that we run an interactive one

377
00:14:07,540 --> 00:14:11,800
so you run that it asks you like six

378
00:14:10,000 --> 00:14:13,120
questions what's the address of the

379
00:14:11,800 --> 00:14:15,880
server what port do you want to listen

380
00:14:13,120 --> 00:14:17,920
on what directories do you want to put

381
00:14:15,880 --> 00:14:19,839
the data in and give me a couple of user

382
00:14:17,920 --> 00:14:21,640
names for the interface that's it you

383
00:14:19,839 --> 00:14:23,830
press the buttons and away you go it's

384
00:14:21,640 --> 00:14:25,630
also got you can do self-signed

385
00:14:23,830 --> 00:14:27,279
certificates which we do by default

386
00:14:25,630 --> 00:14:29,410
which are actually quite secure because

387
00:14:27,279 --> 00:14:32,470
it really locks down the client-server

388
00:14:29,410 --> 00:14:34,329
communication without using a CA it has

389
00:14:32,470 --> 00:14:36,250
built-in ability to just to pull a let's

390
00:14:34,330 --> 00:14:37,420
encrypt certificate if you want that and

391
00:14:36,250 --> 00:14:39,730
of course you can always just sign it

392
00:14:37,420 --> 00:14:41,140
yourself so that's the set up you can

393
00:14:39,730 --> 00:14:43,990
literally press those buttons in about

394
00:14:41,140 --> 00:14:45,970
10 seconds and once that set up your

395
00:14:43,990 --> 00:14:48,220
configuration is done it will spit out

396
00:14:45,970 --> 00:14:50,500
two files one of them is the

397
00:14:48,220 --> 00:14:53,830
configuration file for the clients one

398
00:14:50,500 --> 00:14:57,550
for the server that's it now we want to

399
00:14:53,830 --> 00:15:00,100
fire up our server we run again the same

400
00:14:57,550 --> 00:15:03,880
executable the Velociraptor executable

401
00:15:00,100 --> 00:15:06,040
we pointed at the server config and the

402
00:15:03,880 --> 00:15:07,990
server fires up we log in with our

403
00:15:06,040 --> 00:15:10,449
username that we created and password

404
00:15:07,990 --> 00:15:13,690
and the server's up and running that's

405
00:15:10,450 --> 00:15:15,970
it we also do SSO with Google OAuth if

406
00:15:13,690 --> 00:15:16,680
you want to link that together which is

407
00:15:15,970 --> 00:15:19,450
kind of cool

408
00:15:16,680 --> 00:15:21,130
that's the server set up when we usually

409
00:15:19,450 --> 00:15:23,649
deployed we set up in a cloud it's

410
00:15:21,130 --> 00:15:25,300
really easy to spin up a server do this

411
00:15:23,649 --> 00:15:27,310
set up routine generate the encryption

412
00:15:25,300 --> 00:15:29,229
keys and that's it as long as you've got

413
00:15:27,310 --> 00:15:31,420
your DNS or external you

414
00:15:29,230 --> 00:15:33,970
well available one of the huge benefits

415
00:15:31,420 --> 00:15:36,130
of doing it in the cloud is you're not

416
00:15:33,970 --> 00:15:39,130
locked to your network so if you have a

417
00:15:36,130 --> 00:15:41,710
user who gets their laptop and they go

418
00:15:39,130 --> 00:15:43,300
home if they fire up their laptop at

419
00:15:41,710 --> 00:15:44,890
home they connect to their internet the

420
00:15:43,300 --> 00:15:46,329
client the velociraptor clients going to

421
00:15:44,890 --> 00:15:48,340
wake up it's going to connect to the

422
00:15:46,330 --> 00:15:50,200
server on the internet and you've still

423
00:15:48,340 --> 00:15:51,970
got visibility and access to that box

424
00:15:50,200 --> 00:15:54,730
even when they're outside your network

425
00:15:51,970 --> 00:15:57,310
perimeter which is really really we find

426
00:15:54,730 --> 00:15:58,750
it very powerful on a lot of cases so

427
00:15:57,310 --> 00:16:00,729
our service set up now we want to deploy

428
00:15:58,750 --> 00:16:03,160
our clients again it's the same

429
00:16:00,730 --> 00:16:05,020
executable there's different ways to

430
00:16:03,160 --> 00:16:07,530
push this out you can choose whatever

431
00:16:05,020 --> 00:16:10,480
deployment method you want we usually do

432
00:16:07,530 --> 00:16:13,689
either group policy or sort of an ad

433
00:16:10,480 --> 00:16:15,040
push or SCCM we recommend using an MSI

434
00:16:13,690 --> 00:16:16,750
because then you can package it all up

435
00:16:15,040 --> 00:16:18,550
and we also recommend signing it so you

436
00:16:16,750 --> 00:16:21,040
tend not to get problems with many

437
00:16:18,550 --> 00:16:23,680
antivirus or security systems that's it

438
00:16:21,040 --> 00:16:25,599
you push it out as soon as that client

439
00:16:23,680 --> 00:16:27,010
executes so on Windows it'll install as

440
00:16:25,600 --> 00:16:30,220
a service and again you can customize

441
00:16:27,010 --> 00:16:33,189
all the parameters it'll talk to the

442
00:16:30,220 --> 00:16:34,990
server and your networks up and running

443
00:16:33,190 --> 00:16:37,780
you've got a velociraptor deployment

444
00:16:34,990 --> 00:16:39,340
this is the dashboard on the right you

445
00:16:37,780 --> 00:16:40,569
can actually see the number of clients

446
00:16:39,340 --> 00:16:42,160
that are connected the reason it goes up

447
00:16:40,570 --> 00:16:44,590
and down that's at the end of the day

448
00:16:42,160 --> 00:16:46,660
when people turn their computers off you

449
00:16:44,590 --> 00:16:48,580
get sort of spikes on its peak peaks and

450
00:16:46,660 --> 00:16:51,550
troughs but that's it your network is

451
00:16:48,580 --> 00:16:53,800
ready when the clients are on they have

452
00:16:51,550 --> 00:16:55,810
a active connection to the server this

453
00:16:53,800 --> 00:16:58,000
is not a polling system they are

454
00:16:55,810 --> 00:16:59,469
constantly connected when you browse

455
00:16:58,000 --> 00:17:01,600
their directories when you send out

456
00:16:59,470 --> 00:17:04,089
artifacts when you do data collection it

457
00:17:01,600 --> 00:17:05,770
happens instantly all right and it

458
00:17:04,089 --> 00:17:08,199
happens simultaneously it's not scripted

459
00:17:05,770 --> 00:17:12,819
it pushes out to everything at the same

460
00:17:08,200 --> 00:17:14,560
time so that's the overview now we've

461
00:17:12,819 --> 00:17:15,790
got a series of scenarios that we're

462
00:17:14,560 --> 00:17:17,740
gonna run you through again these are

463
00:17:15,790 --> 00:17:19,329
real-life scenarios a lot of these come

464
00:17:17,740 --> 00:17:21,310
from actual cases that we've worked on

465
00:17:19,329 --> 00:17:23,800
where we've used Velociraptor for the

466
00:17:21,310 --> 00:17:25,329
last year or so let's start with

467
00:17:23,800 --> 00:17:26,980
something really simple data collection

468
00:17:25,329 --> 00:17:29,169
now some of these slides are a little

469
00:17:26,980 --> 00:17:31,900
hard to read so I apologize I'll try to

470
00:17:29,170 --> 00:17:34,840
describe what's on them we have an

471
00:17:31,900 --> 00:17:36,820
interactive Explorer it's sort of like a

472
00:17:34,840 --> 00:17:38,889
File Explorer you click on the on the

473
00:17:36,820 --> 00:17:40,179
host and you can start browsing it

474
00:17:38,890 --> 00:17:41,710
straight away you know what this is like

475
00:17:40,180 --> 00:17:43,120
when you're doing an investigation if

476
00:17:41,710 --> 00:17:44,770
you have something happen on

477
00:17:43,120 --> 00:17:46,510
end point you just want to jump on it

478
00:17:44,770 --> 00:17:47,680
you might get something interesting

479
00:17:46,510 --> 00:17:49,059
happening in a directory and you're

480
00:17:47,680 --> 00:17:50,830
thinking what else is in that directory

481
00:17:49,059 --> 00:17:53,020
what else is there I might just want to

482
00:17:50,830 --> 00:17:55,360
jump on and grab a few files so you can

483
00:17:53,020 --> 00:17:56,559
do that interactively you can connect to

484
00:17:55,360 --> 00:17:59,439
the host just through the filesystem

485
00:17:56,559 --> 00:18:02,200
there's a raw NTFS access as well which

486
00:17:59,440 --> 00:18:04,270
bypasses all the filesystem security so

487
00:18:02,200 --> 00:18:07,059
you can access locked files like your MF

488
00:18:04,270 --> 00:18:08,800
T's event logs registry hives all those

489
00:18:07,059 --> 00:18:11,590
good things you can also access the

490
00:18:08,800 --> 00:18:14,680
registry directly all right you browse

491
00:18:11,590 --> 00:18:16,959
through you click through it populates

492
00:18:14,680 --> 00:18:18,429
the directories as you go you select

493
00:18:16,960 --> 00:18:20,650
your file so in this case we've got an

494
00:18:18,429 --> 00:18:22,750
enter user hive what we found on disk

495
00:18:20,650 --> 00:18:24,700
we've dragged it down from the clients

496
00:18:22,750 --> 00:18:26,830
and we can download a copy of that to

497
00:18:24,700 --> 00:18:29,050
our computer and then we can get

498
00:18:26,830 --> 00:18:31,270
whatever registry tool of choice we have

499
00:18:29,050 --> 00:18:34,270
if we want to and start exploring that

500
00:18:31,270 --> 00:18:34,660
so really simple a few clicks and where

501
00:18:34,270 --> 00:18:37,090
you go

502
00:18:34,660 --> 00:18:39,429
no vql required all the magic happens at

503
00:18:37,090 --> 00:18:40,629
the backend notice to enter user as

504
00:18:39,429 --> 00:18:42,370
you'll know as a locked file when the

505
00:18:40,630 --> 00:18:45,160
user is logged in you can't get it but

506
00:18:42,370 --> 00:18:49,000
because we have raw NTFS access that's

507
00:18:45,160 --> 00:18:50,200
not an issue for us so now let's so what

508
00:18:49,000 --> 00:18:51,910
we just showed you is very simple it's

509
00:18:50,200 --> 00:18:54,100
just pointing and clicking let's go back

510
00:18:51,910 --> 00:18:55,600
to what we described earlier this vql

511
00:18:54,100 --> 00:18:57,550
and these artifacts and let's look at

512
00:18:55,600 --> 00:18:59,230
how these are going to help us so I'm

513
00:18:57,550 --> 00:19:01,090
gonna zoom in on this one and let Mike

514
00:18:59,230 --> 00:19:03,490
explain the magic that's going on here

515
00:19:01,090 --> 00:19:04,959
thanks Nick so I mean everybody can

516
00:19:03,490 --> 00:19:06,429
click on the interface and try and find

517
00:19:04,960 --> 00:19:08,170
your enter user house but then you have

518
00:19:06,429 --> 00:19:09,370
to know oh you know where are they going

519
00:19:08,170 --> 00:19:12,160
to be you know they're gonna be in see

520
00:19:09,370 --> 00:19:13,419
users username and so that's already

521
00:19:12,160 --> 00:19:16,270
you're already starting to use your

522
00:19:13,420 --> 00:19:18,490
deify our knowledge of expert knowledge

523
00:19:16,270 --> 00:19:20,470
and what we wanted to do is have a way

524
00:19:18,490 --> 00:19:21,940
of encoding that so that you know people

525
00:19:20,470 --> 00:19:23,470
don't have to think about it don't have

526
00:19:21,940 --> 00:19:25,720
to know and they don't have to click and

527
00:19:23,470 --> 00:19:28,000
spend time doing that and you can see in

528
00:19:25,720 --> 00:19:30,130
this example we've got an artifact or

529
00:19:28,000 --> 00:19:32,290
Windows registry and user upload which

530
00:19:30,130 --> 00:19:34,270
just grabs the end-user files and upload

531
00:19:32,290 --> 00:19:37,120
them to the server and you can see even

532
00:19:34,270 --> 00:19:38,950
in a very simple vql that that knowledge

533
00:19:37,120 --> 00:19:40,870
is encoded in that so you can see it's

534
00:19:38,950 --> 00:19:43,330
basically numerating all the users on

535
00:19:40,870 --> 00:19:45,639
the system and then it finds their home

536
00:19:43,330 --> 00:19:47,350
directory and it knows that NT user door

537
00:19:45,640 --> 00:19:49,330
that will be in their home directory and

538
00:19:47,350 --> 00:19:51,820
then you know the as we mentioned before

539
00:19:49,330 --> 00:19:55,030
we have to use the NTFS driver to access

540
00:19:51,820 --> 00:19:56,120
that raw interface file and so all of

541
00:19:55,030 --> 00:19:57,950
that information

542
00:19:56,120 --> 00:20:01,010
is already encoded in this in this very

543
00:19:57,950 --> 00:20:02,330
you know few lines of bql so now as a

544
00:20:01,010 --> 00:20:03,590
user or you don't even have to worry

545
00:20:02,330 --> 00:20:06,020
about it you're just gonna choose that

546
00:20:03,590 --> 00:20:06,260
artifact and just go yeah go get it for

547
00:20:06,020 --> 00:20:08,540
me

548
00:20:06,260 --> 00:20:09,830
and we're not only encapsulating that

549
00:20:08,540 --> 00:20:12,139
friends acknowledge but we're building

550
00:20:09,830 --> 00:20:14,030
the start of automation repeatable

551
00:20:12,140 --> 00:20:16,490
processes things that you can do easily

552
00:20:14,030 --> 00:20:17,389
if this machine has multiple users you

553
00:20:16,490 --> 00:20:18,710
don't want to click through the

554
00:20:17,390 --> 00:20:20,660
directories and grab them manually you

555
00:20:18,710 --> 00:20:22,520
can just run this artifact it'll do the

556
00:20:20,660 --> 00:20:24,740
hard work for you and it'll because that

557
00:20:22,520 --> 00:20:25,760
forensic knowledge is in the artifact it

558
00:20:24,740 --> 00:20:27,350
knows where to look

559
00:20:25,760 --> 00:20:30,320
you don't need to worry about that you

560
00:20:27,350 --> 00:20:31,850
can also customize this so for example

561
00:20:30,320 --> 00:20:34,189
you're doing an investigation you've

562
00:20:31,850 --> 00:20:36,139
identified on one particular host that

563
00:20:34,190 --> 00:20:38,150
you've got an attacker who seems to have

564
00:20:36,140 --> 00:20:40,730
compromised a service account maybe one

565
00:20:38,150 --> 00:20:42,130
of your backup accounts so you get that

566
00:20:40,730 --> 00:20:44,780
million-dollar question

567
00:20:42,130 --> 00:20:47,150
what did the user steal what did the

568
00:20:44,780 --> 00:20:49,010
attacker take all right and we all know

569
00:20:47,150 --> 00:20:50,720
as forensic people one of the key places

570
00:20:49,010 --> 00:20:52,879
we look for evidence of a person's

571
00:20:50,720 --> 00:20:54,740
activity is in their user hides because

572
00:20:52,880 --> 00:20:56,870
we get the recent Docs and the office

573
00:20:54,740 --> 00:20:58,790
recent docs we get word wheel queries we

574
00:20:56,870 --> 00:21:01,149
get you know all that great user

575
00:20:58,790 --> 00:21:03,230
information in those artifacts so we

576
00:21:01,150 --> 00:21:04,880
want to get that but we don't want to

577
00:21:03,230 --> 00:21:06,710
search for every user we don't want to

578
00:21:04,880 --> 00:21:08,600
pull back every user hive we know our

579
00:21:06,710 --> 00:21:10,490
compromised account we just want to

580
00:21:08,600 --> 00:21:12,679
focus on that one and this is where

581
00:21:10,490 --> 00:21:14,330
again the flexibility of vql comes into

582
00:21:12,680 --> 00:21:16,400
place so what we're doing here the

583
00:21:14,330 --> 00:21:18,199
screen you're seeing now is the screen

584
00:21:16,400 --> 00:21:20,450
where we can make a copy of an existing

585
00:21:18,200 --> 00:21:22,400
artifact and edit it and customize it to

586
00:21:20,450 --> 00:21:24,320
our needs it's a little hard to see but

587
00:21:22,400 --> 00:21:26,570
at the top of that artifact it it's got

588
00:21:24,320 --> 00:21:28,639
a little description that says custom

589
00:21:26,570 --> 00:21:31,159
artifact just looking at our compromised

590
00:21:28,640 --> 00:21:32,990
backup account and all we've done is

591
00:21:31,160 --> 00:21:35,210
we've added that little string to the

592
00:21:32,990 --> 00:21:38,120
existing artifact that says go and get

593
00:21:35,210 --> 00:21:40,310
the list of users but match the one

594
00:21:38,120 --> 00:21:42,469
where the account name is compromised

595
00:21:40,310 --> 00:21:45,290
backup account so we've taken that first

596
00:21:42,470 --> 00:21:47,060
automation we've added our thread Intel

597
00:21:45,290 --> 00:21:49,610
from our investigation and now we've got

598
00:21:47,060 --> 00:21:53,300
a very surgical artifact that just pulls

599
00:21:49,610 --> 00:21:55,550
out that account into user hive pretty

600
00:21:53,300 --> 00:21:56,480
straightforward right pretty simple so

601
00:21:55,550 --> 00:21:57,260
hopefully you're kind of thinking okay

602
00:21:56,480 --> 00:21:59,420
this is interesting

603
00:21:57,260 --> 00:22:02,450
where's it gonna go but wait there's

604
00:21:59,420 --> 00:22:03,950
more so you can you can do all sorts of

605
00:22:02,450 --> 00:22:06,620
things with it here's another artifact

606
00:22:03,950 --> 00:22:08,720
where we're collecting registry hives

607
00:22:06,620 --> 00:22:10,149
from the system now we point this out

608
00:22:08,720 --> 00:22:12,820
for a couple of reasons

609
00:22:10,149 --> 00:22:14,439
this is actually a great example of how

610
00:22:12,820 --> 00:22:16,299
we're sort of sharing information in the

611
00:22:14,440 --> 00:22:17,830
community when we built this one we

612
00:22:16,299 --> 00:22:19,559
actually hooked up with our friend Eric

613
00:22:17,830 --> 00:22:21,820
who's up there back there there you go

614
00:22:19,559 --> 00:22:23,440
he's already done some great work to

615
00:22:21,820 --> 00:22:25,689
actually enumerate some of these key

616
00:22:23,440 --> 00:22:27,100
registry locations so we said well you

617
00:22:25,690 --> 00:22:27,519
know that's that's public that's out

618
00:22:27,100 --> 00:22:29,110
there

619
00:22:27,519 --> 00:22:30,879
why don't we reuse that get that

620
00:22:29,110 --> 00:22:31,988
forensic that great forensic knowledge

621
00:22:30,879 --> 00:22:34,570
and the effort that Eric's put together

622
00:22:31,989 --> 00:22:36,399
build it into an artifact and now we can

623
00:22:34,570 --> 00:22:38,110
all benefit from it very easily so we

624
00:22:36,399 --> 00:22:39,998
took all those registry definitions that

625
00:22:38,110 --> 00:22:41,649
Eric wrote and he kindly let us use them

626
00:22:39,999 --> 00:22:43,269
and we put them into the tool and

627
00:22:41,649 --> 00:22:45,758
obviously giving him credit for that

628
00:22:43,269 --> 00:22:47,080
so a great example of how we're really

629
00:22:45,759 --> 00:22:48,340
trying to build something that people in

630
00:22:47,080 --> 00:22:52,600
the community can share their knowledge

631
00:22:48,340 --> 00:22:54,519
and information with okay that's the

632
00:22:52,600 --> 00:22:57,820
simple version right that's the simple

633
00:22:54,519 --> 00:22:59,080
collection all we've done so far is

634
00:22:57,820 --> 00:23:01,600
we've looked at into user hubs on a

635
00:22:59,080 --> 00:23:04,059
particular box one of the key things to

636
00:23:01,600 --> 00:23:05,709
level up now is anything that you can

637
00:23:04,059 --> 00:23:07,658
look for on a single box you can look

638
00:23:05,710 --> 00:23:10,149
for across your network using the same

639
00:23:07,659 --> 00:23:11,980
artifacts so now what we're going to be

640
00:23:10,149 --> 00:23:13,479
doing is taking that into user hive and

641
00:23:11,980 --> 00:23:15,549
we're going to extend it across the

642
00:23:13,480 --> 00:23:17,919
whole network and this is a concept that

643
00:23:15,549 --> 00:23:19,929
we call a hunt we're hunting across the

644
00:23:17,919 --> 00:23:21,700
network and you can actually build a

645
00:23:19,929 --> 00:23:23,859
hunt not just to do one thing but to do

646
00:23:21,700 --> 00:23:25,029
a range of things so this is where we're

647
00:23:23,859 --> 00:23:27,489
building a hunt and in this particular

648
00:23:25,029 --> 00:23:28,929
example you'll see up the top of the

649
00:23:27,489 --> 00:23:30,730
screen we've got our big list of

650
00:23:28,929 --> 00:23:33,159
artifacts that we can select from each

651
00:23:30,730 --> 00:23:34,679
of those we can either use as a default

652
00:23:33,159 --> 00:23:36,850
or we can customize them for our

653
00:23:34,679 --> 00:23:39,220
investigation and then down the bottom

654
00:23:36,850 --> 00:23:42,459
you see we've chosen to get enter user

655
00:23:39,220 --> 00:23:43,869
hives we've chosen evidence of execution

656
00:23:42,460 --> 00:23:45,970
and we'll explain what that is soon and

657
00:23:43,869 --> 00:23:47,799
we've chosen Internet Explorer evidence

658
00:23:45,970 --> 00:23:49,960
because that's our investigative need

659
00:23:47,799 --> 00:23:51,820
for this particular hunt we line them up

660
00:23:49,960 --> 00:23:54,009
we press a few buttons we choose the

661
00:23:51,820 --> 00:23:56,230
hunt group which can be a group of users

662
00:23:54,009 --> 00:23:58,299
maybe your servers your senior

663
00:23:56,230 --> 00:24:00,009
executives your confidential staff or it

664
00:23:58,299 --> 00:24:02,230
could just be the whole network you

665
00:24:00,009 --> 00:24:04,899
press a few buttons and the hunt deploys

666
00:24:02,230 --> 00:24:06,820
and now that same collection that we did

667
00:24:04,899 --> 00:24:10,109
on an individual box we've done across

668
00:24:06,820 --> 00:24:12,009
the whole network it's that simple so

669
00:24:10,109 --> 00:24:14,408
let's talk about some other scenarios

670
00:24:12,009 --> 00:24:15,999
finding files one of the key things we

671
00:24:14,409 --> 00:24:17,889
do in investigations is we want to look

672
00:24:15,999 --> 00:24:20,019
for files we want to see files and we've

673
00:24:17,889 --> 00:24:21,490
done this in so many different cases so

674
00:24:20,019 --> 00:24:23,499
you know one scenario might be an

675
00:24:21,490 --> 00:24:23,830
organization who they've realized that

676
00:24:23,499 --> 00:24:25,630
this

677
00:24:23,830 --> 00:24:26,620
information that's been disclosed about

678
00:24:25,630 --> 00:24:29,110
them there's some files that have been

679
00:24:26,620 --> 00:24:31,090
disclosed and their thought is well who

680
00:24:29,110 --> 00:24:33,219
did this how do they get out where are

681
00:24:31,090 --> 00:24:34,449
they on the network we don't we we we

682
00:24:33,220 --> 00:24:35,860
don't know where these files are on our

683
00:24:34,450 --> 00:24:37,000
network let's go find them

684
00:24:35,860 --> 00:24:39,699
and this is where we've used

685
00:24:37,000 --> 00:24:41,500
Velociraptor to do just that now you can

686
00:24:39,700 --> 00:24:43,899
look for the file name if you know what

687
00:24:41,500 --> 00:24:45,250
the file name is you can choose globs

688
00:24:43,899 --> 00:24:46,299
for the directory so you might say well

689
00:24:45,250 --> 00:24:48,010
I don't want to look over the whole

690
00:24:46,299 --> 00:24:50,230
system I just want you looking maybe

691
00:24:48,010 --> 00:24:52,840
users directories so you can glob just

692
00:24:50,230 --> 00:24:54,549
the user home directories you might say

693
00:24:52,840 --> 00:24:56,408
well I know this file was being used

694
00:24:54,549 --> 00:24:58,330
within the last three weeks so rather

695
00:24:56,409 --> 00:25:00,220
than pulling back everything let's just

696
00:24:58,330 --> 00:25:02,889
filter it on the metadata the file

697
00:25:00,220 --> 00:25:04,179
system timestamps you might say well

698
00:25:02,889 --> 00:25:05,590
hang on what if we don't know what the

699
00:25:04,179 --> 00:25:06,820
file name is what if this is a file

700
00:25:05,590 --> 00:25:08,470
maybe it's been disclosed on the

701
00:25:06,820 --> 00:25:10,960
internet and it contains confidential

702
00:25:08,470 --> 00:25:13,090
data but it's been renamed you can

703
00:25:10,960 --> 00:25:14,620
actually look inside the contents of the

704
00:25:13,090 --> 00:25:17,799
files as well when you do a file phone

705
00:25:14,620 --> 00:25:19,570
so you can use just simple yara cigs to

706
00:25:17,799 --> 00:25:21,370
actually look inside the contents of the

707
00:25:19,570 --> 00:25:23,860
files and you can use all or none of

708
00:25:21,370 --> 00:25:25,629
those options again as you need this

709
00:25:23,860 --> 00:25:27,459
turns out to be a super super powerful

710
00:25:25,630 --> 00:25:31,029
artifact because you can not only look

711
00:25:27,460 --> 00:25:32,500
for documents you can look for any piece

712
00:25:31,029 --> 00:25:35,110
of data you want remember we have raw

713
00:25:32,500 --> 00:25:37,000
access to disk so this could be logs it

714
00:25:35,110 --> 00:25:40,149
could be artifacts like prefetch files

715
00:25:37,000 --> 00:25:42,669
registry Keys MF T's whatever you want

716
00:25:40,149 --> 00:25:44,889
it to be and again once you run it you

717
00:25:42,669 --> 00:25:48,309
can just run this across a group of

718
00:25:44,889 --> 00:25:49,840
computers or the entire network so let's

719
00:25:48,309 --> 00:25:52,990
look at another example hunting for

720
00:25:49,840 --> 00:25:53,830
other specific forensic evidence by the

721
00:25:52,990 --> 00:25:55,299
way I should have mentioned at the start

722
00:25:53,830 --> 00:25:56,789
we've got a lot to get through so we're

723
00:25:55,299 --> 00:26:00,220
going to move pretty quickly so

724
00:25:56,789 --> 00:26:02,320
sysinternals tools we've seen examples

725
00:26:00,220 --> 00:26:04,360
of attackers who like using sysinternals

726
00:26:02,320 --> 00:26:06,519
tools there are certain apt groups that

727
00:26:04,360 --> 00:26:08,080
we see them all the time now

728
00:26:06,519 --> 00:26:09,880
you're probably familiar with the idea

729
00:26:08,080 --> 00:26:12,460
that when you use a system eternals tool

730
00:26:09,880 --> 00:26:14,169
for the first time you have to be you

731
00:26:12,460 --> 00:26:16,419
have to be an ethical hacker agree to

732
00:26:14,169 --> 00:26:17,889
the License Agreement right but when you

733
00:26:16,419 --> 00:26:19,899
agree to that you're like it sets a

734
00:26:17,889 --> 00:26:22,240
registry key and the registry key is set

735
00:26:19,899 --> 00:26:24,309
in the user's registry hive which is

736
00:26:22,240 --> 00:26:27,039
great because that tells us that the

737
00:26:24,309 --> 00:26:28,629
tool was run the user account under

738
00:26:27,039 --> 00:26:30,519
which it was run and the timestamp of

739
00:26:28,630 --> 00:26:31,929
that change shows us the first time it

740
00:26:30,519 --> 00:26:34,120
was run so this becomes a great

741
00:26:31,929 --> 00:26:35,260
indicator by looking at those

742
00:26:34,120 --> 00:26:36,260
sysinternals

743
00:26:35,260 --> 00:26:38,690
registry

744
00:26:36,260 --> 00:26:40,309
we can track the use of these across our

745
00:26:38,690 --> 00:26:42,679
network and again you would look for

746
00:26:40,309 --> 00:26:44,960
anomaly so if you see s delete or Pierce

747
00:26:42,679 --> 00:26:46,399
exact being used by your IT people you

748
00:26:44,960 --> 00:26:48,220
might think well yeah that's what they

749
00:26:46,399 --> 00:26:50,330
do but if you see being run on

750
00:26:48,220 --> 00:26:52,700
executives computers or accountants

751
00:26:50,330 --> 00:26:56,570
computers or other key staff that might

752
00:26:52,700 --> 00:26:58,730
raise some suspicions so we have an

753
00:26:56,570 --> 00:27:00,168
artifact for that and this is all in

754
00:26:58,730 --> 00:27:01,580
again you don't even need to tailor

755
00:27:00,169 --> 00:27:03,440
anything you just run it on your network

756
00:27:01,580 --> 00:27:04,580
it will go out it can be a little bit

757
00:27:03,440 --> 00:27:07,130
hard to see but you can see here's a

758
00:27:04,580 --> 00:27:09,289
dodgy user and they've run Pierce exec

759
00:27:07,130 --> 00:27:10,700
and they've run Esteli notice too that

760
00:27:09,289 --> 00:27:12,889
the results we're looking at it in

761
00:27:10,700 --> 00:27:14,690
velociraptor so we can actually pass

762
00:27:12,889 --> 00:27:16,879
certain artifacts including registries

763
00:27:14,690 --> 00:27:18,740
so you don't need to grab the whole

764
00:27:16,880 --> 00:27:21,380
registry and export it and get another

765
00:27:18,740 --> 00:27:23,630
viewer you just run this artifact and it

766
00:27:21,380 --> 00:27:25,970
will just give you a report in the on

767
00:27:23,630 --> 00:27:28,039
the dashboard that says here's all the

768
00:27:25,970 --> 00:27:30,190
EULA keys across the whole network again

769
00:27:28,039 --> 00:27:33,710
it's it's that simple

770
00:27:30,190 --> 00:27:35,720
so let's extend this even more as we

771
00:27:33,710 --> 00:27:37,250
said at the start as dfi our

772
00:27:35,720 --> 00:27:38,870
professionals we know what to look for

773
00:27:37,250 --> 00:27:42,139
we have fantastic resources like this

774
00:27:38,870 --> 00:27:44,299
and we saw when Eric and Troy presented

775
00:27:42,139 --> 00:27:45,590
yesterday they showed this evidence off

776
00:27:44,299 --> 00:27:47,809
poster that's been around for a long

777
00:27:45,590 --> 00:27:49,370
time if you don't have a copy of this go

778
00:27:47,809 --> 00:27:50,720
get one I think there's some out I

779
00:27:49,370 --> 00:27:52,549
always recommend if you're gonna steal

780
00:27:50,720 --> 00:27:53,960
this steal two copies so when you put it

781
00:27:52,549 --> 00:27:57,799
on your wall you can have like each side

782
00:27:53,960 --> 00:27:59,299
show anyway on this poster we have

783
00:27:57,799 --> 00:28:01,639
different groups of evidence so this is

784
00:27:59,299 --> 00:28:03,230
evidence of execution and this is

785
00:28:01,639 --> 00:28:04,879
fantastic forensic knowledge because

786
00:28:03,230 --> 00:28:07,250
when you're doing an investigation this

787
00:28:04,880 --> 00:28:09,559
is your the stepping stones that you can

788
00:28:07,250 --> 00:28:11,779
follow to reconstruct what programs are

789
00:28:09,559 --> 00:28:13,700
executed so again we've taken that

790
00:28:11,779 --> 00:28:15,049
knowledge and we've built an artefact

791
00:28:13,700 --> 00:28:16,130
and Mike you want to maybe just quickly

792
00:28:15,049 --> 00:28:18,710
explain how this one works

793
00:28:16,130 --> 00:28:20,389
yeah so the idea is that basically if

794
00:28:18,710 --> 00:28:21,740
you're looking for evidence of execution

795
00:28:20,389 --> 00:28:23,029
for instance then you know there these

796
00:28:21,740 --> 00:28:25,549
are all the things you want to check for

797
00:28:23,029 --> 00:28:27,529
and each of those things you know may be

798
00:28:25,549 --> 00:28:29,210
involved as prefetch files as aim cache

799
00:28:27,529 --> 00:28:31,279
there's different things so each of

800
00:28:29,210 --> 00:28:32,690
those have their own artifacts but what

801
00:28:31,279 --> 00:28:34,700
we want to actually do is kind of have

802
00:28:32,690 --> 00:28:36,409
like a collection and say you know I

803
00:28:34,700 --> 00:28:38,720
just want this thing and then it was

804
00:28:36,409 --> 00:28:41,000
gonna just collect all of these you know

805
00:28:38,720 --> 00:28:42,980
sub artifacts and this this slide

806
00:28:41,000 --> 00:28:46,429
demonstrates that artifacts can be used

807
00:28:42,980 --> 00:28:49,220
inside vql as well so a vql query can

808
00:28:46,429 --> 00:28:51,679
reuse a whole other artifact which of

809
00:28:49,220 --> 00:28:54,770
contains its own vql query and so you

810
00:28:51,679 --> 00:28:56,659
can see here that essentially all of

811
00:28:54,770 --> 00:28:59,658
these are basically one-liners which

812
00:28:56,659 --> 00:29:02,450
just call the specific artifacts but you

813
00:28:59,659 --> 00:29:05,179
know they basically user sees timeline

814
00:29:02,450 --> 00:29:06,289
recent apps app compat and and that for

815
00:29:05,179 --> 00:29:07,760
the user that's really invaluable

816
00:29:06,289 --> 00:29:09,110
because they can just click this thing

817
00:29:07,760 --> 00:29:12,890
and they know they've got all of these

818
00:29:09,110 --> 00:29:14,389
things at once yeah so this artifact is

819
00:29:12,890 --> 00:29:16,130
actually made up of other ones so you

820
00:29:14,390 --> 00:29:17,840
can see down the right there's an

821
00:29:16,130 --> 00:29:19,520
artifact for user assist there's one for

822
00:29:17,840 --> 00:29:21,860
Windows timeline there's one for recent

823
00:29:19,520 --> 00:29:24,110
apps etc you can get very surgical and

824
00:29:21,860 --> 00:29:25,520
say I only want these specific ones or

825
00:29:24,110 --> 00:29:27,678
you can say you know what I don't care I

826
00:29:25,520 --> 00:29:29,658
just want all evidence of execution and

827
00:29:27,679 --> 00:29:31,070
you can just use that meta artifact that

828
00:29:29,659 --> 00:29:31,700
we've already created evidence of

829
00:29:31,070 --> 00:29:33,320
execution

830
00:29:31,700 --> 00:29:35,840
so again encapsulating forensic

831
00:29:33,320 --> 00:29:38,539
knowledge into a tool that's going to do

832
00:29:35,840 --> 00:29:39,620
this for you this is important too

833
00:29:38,539 --> 00:29:41,990
because this is again showing the

834
00:29:39,620 --> 00:29:43,399
results now again we're not collecting

835
00:29:41,990 --> 00:29:45,200
artifacts and pushing them out to

836
00:29:43,400 --> 00:29:47,299
another tool in this instance we're

837
00:29:45,200 --> 00:29:48,950
actually getting these analyzing them

838
00:29:47,299 --> 00:29:51,260
and presenting them directly on the

839
00:29:48,950 --> 00:29:53,030
interface so if this was an interactive

840
00:29:51,260 --> 00:29:55,280
demo I'd show you but if you scroll down

841
00:29:53,030 --> 00:29:57,049
that screen you can see all of those

842
00:29:55,280 --> 00:29:59,539
different execution artifacts that we

843
00:29:57,049 --> 00:30:00,679
selected are all listed underneath so

844
00:29:59,539 --> 00:30:03,260
you can just scroll down and see them

845
00:30:00,679 --> 00:30:06,860
all in one spot so fantastic you know

846
00:30:03,260 --> 00:30:08,600
triage analysis capability let's look at

847
00:30:06,860 --> 00:30:10,520
another example lateral movement so

848
00:30:08,600 --> 00:30:12,559
there's another awesome awesome poster

849
00:30:10,520 --> 00:30:14,570
which you have to get to two copies off

850
00:30:12,559 --> 00:30:16,549
for lateral movement and it lists a

851
00:30:14,570 --> 00:30:18,110
great deal of information about known

852
00:30:16,549 --> 00:30:20,389
lateral movement techniques and these

853
00:30:18,110 --> 00:30:22,250
are again fantastic indicators if you're

854
00:30:20,390 --> 00:30:23,690
doing threat hunting if you're doing a

855
00:30:22,250 --> 00:30:25,250
threat assessment in an environment or

856
00:30:23,690 --> 00:30:27,500
if you're tracking an actual attacker

857
00:30:25,250 --> 00:30:30,440
this is a laundry list of things to look

858
00:30:27,500 --> 00:30:31,970
for so again what we're trying to do is

859
00:30:30,440 --> 00:30:33,440
instead of just saying to you go out and

860
00:30:31,970 --> 00:30:35,570
do this individually we've built

861
00:30:33,440 --> 00:30:38,179
artifacts that can do this for you so if

862
00:30:35,570 --> 00:30:39,678
we focus on this one WMI we know what to

863
00:30:38,179 --> 00:30:42,200
look for on the source computer and the

864
00:30:39,679 --> 00:30:43,970
destination and we've built an artefact

865
00:30:42,200 --> 00:30:45,140
that does that and it gets all of that

866
00:30:43,970 --> 00:30:49,059
knowledge and it just looks in those

867
00:30:45,140 --> 00:30:52,039
places and returns the results to you

868
00:30:49,059 --> 00:30:53,780
what about specific IOC s we've had

869
00:30:52,039 --> 00:30:55,580
situations where we're doing an

870
00:30:53,780 --> 00:30:57,730
investigation and there might be an apt

871
00:30:55,580 --> 00:31:00,168
group that we're looking at it might be

872
00:30:57,730 --> 00:31:02,210
another group that we might be doing an

873
00:31:00,169 --> 00:31:02,970
investigation on an individual

874
00:31:02,210 --> 00:31:04,889
compromised

875
00:31:02,970 --> 00:31:07,019
and as we're learning about what the

876
00:31:04,889 --> 00:31:09,809
attacker is doing as we're understanding

877
00:31:07,019 --> 00:31:11,820
their TTP's building I OCS getting all

878
00:31:09,809 --> 00:31:13,889
our acronyms lined up we want to be

879
00:31:11,820 --> 00:31:15,539
scanning across the network so as we

880
00:31:13,889 --> 00:31:16,769
find things on an individual box or

881
00:31:15,539 --> 00:31:19,349
maybe as we're getting thread Intel

882
00:31:16,769 --> 00:31:21,029
externally and consuming it we can put

883
00:31:19,349 --> 00:31:22,979
that into an artifact and just hunt out

884
00:31:21,029 --> 00:31:26,549
across the network so if you see for

885
00:31:22,979 --> 00:31:28,440
example an interesting malware executed

886
00:31:26,549 --> 00:31:30,059
or an interesting connection you can

887
00:31:28,440 --> 00:31:31,169
just jump in build a quick artifact and

888
00:31:30,059 --> 00:31:34,440
say show me where else on the network

889
00:31:31,169 --> 00:31:36,149
disappears so again building knowledge

890
00:31:34,440 --> 00:31:38,220
and encapsulating it in the tool and

891
00:31:36,149 --> 00:31:39,599
we've done this on cases where clients

892
00:31:38,220 --> 00:31:41,489
have said to us look we're we're hunting

893
00:31:39,599 --> 00:31:43,619
a particular group we've got some thread

894
00:31:41,489 --> 00:31:45,239
Intel we've got some thread Intel of our

895
00:31:43,619 --> 00:31:47,070
own we've got other repositories we'll

896
00:31:45,239 --> 00:31:48,659
put that all together and we'll build an

897
00:31:47,070 --> 00:31:50,489
artifact and we'll just push it out and

898
00:31:48,659 --> 00:31:53,849
that and it does our threat hunting for

899
00:31:50,489 --> 00:31:55,799
us here's a more operational example

900
00:31:53,849 --> 00:31:58,019
shadow IT this is where you get people

901
00:31:55,799 --> 00:31:59,309
in the organization who say well we want

902
00:31:58,019 --> 00:32:01,229
to set up our own so we want to set up

903
00:31:59,309 --> 00:32:02,369
Dropbox we want to use Google Drive and

904
00:32:01,229 --> 00:32:04,559
they start pumping all these

905
00:32:02,369 --> 00:32:07,859
confidential company documents onto that

906
00:32:04,559 --> 00:32:09,779
now if your vendor if you ever have

907
00:32:07,859 --> 00:32:11,668
investigated Dropbox you'll know that

908
00:32:09,779 --> 00:32:13,229
there are many places you can look so

909
00:32:11,669 --> 00:32:16,830
you might say well let's look for people

910
00:32:13,229 --> 00:32:18,509
who's accessing the Dropbox website you

911
00:32:16,830 --> 00:32:20,699
might see that going forward but what if

912
00:32:18,509 --> 00:32:22,080
they've done it in the past you might

913
00:32:20,700 --> 00:32:24,090
look at their internet history but then

914
00:32:22,080 --> 00:32:25,019
you need to dig into that but again what

915
00:32:24,090 --> 00:32:26,879
if they've cleared their internet

916
00:32:25,019 --> 00:32:29,070
history well maybe you can go to their

917
00:32:26,879 --> 00:32:30,449
cookies and you can see if there's any

918
00:32:29,070 --> 00:32:32,099
references to Dropbox in their cookies

919
00:32:30,450 --> 00:32:33,840
maybe you get on their computers and you

920
00:32:32,099 --> 00:32:36,059
look for the Dropbox folders that

921
00:32:33,840 --> 00:32:37,470
contain the synchronized copies of

922
00:32:36,059 --> 00:32:39,509
documents so there's lots of places to

923
00:32:37,470 --> 00:32:41,729
look and again this is a problem that's

924
00:32:39,509 --> 00:32:43,950
well suited to Velociraptor because you

925
00:32:41,729 --> 00:32:46,889
can build an artifact as we've done here

926
00:32:43,950 --> 00:32:48,570
just looking at Dropbox usage and it

927
00:32:46,889 --> 00:32:50,428
will look in the various places and

928
00:32:48,570 --> 00:32:52,439
it'll put all that information in that

929
00:32:50,429 --> 00:32:55,379
but that effort into one spot for you so

930
00:32:52,440 --> 00:32:57,239
here we're seeing chrome cookies here

931
00:32:55,379 --> 00:32:59,070
we've got Windows programs that are

932
00:32:57,239 --> 00:33:01,889
installed so and again this is just

933
00:32:59,070 --> 00:33:05,428
taking existing vql and customizing it

934
00:33:01,889 --> 00:33:08,070
to just look for Dropbox activity so you

935
00:33:05,429 --> 00:33:09,869
get all your internet history and then

936
00:33:08,070 --> 00:33:14,730
you just filter it on Dropbox and that's

937
00:33:09,869 --> 00:33:17,080
the result of your query okay

938
00:33:14,730 --> 00:33:19,059
so far we've been hunting we've been

939
00:33:17,080 --> 00:33:19,539
looking for stuff so time to level up

940
00:33:19,059 --> 00:33:23,259
again

941
00:33:19,539 --> 00:33:24,820
what about monitoring before we said

942
00:33:23,259 --> 00:33:26,200
anything that you even look for on one

943
00:33:24,820 --> 00:33:28,779
box you can look for across the network

944
00:33:26,200 --> 00:33:31,240
it also turns out that pretty much

945
00:33:28,779 --> 00:33:33,399
anything you can search for on a network

946
00:33:31,240 --> 00:33:36,159
you can monitor for going forward and

947
00:33:33,399 --> 00:33:39,219
again using the same vql the same

948
00:33:36,159 --> 00:33:40,360
artifacts as the starting point so Mike

949
00:33:39,220 --> 00:33:43,299
you want to explain maybe what an event

950
00:33:40,360 --> 00:33:45,070
artifact is yeah so basically when I say

951
00:33:43,299 --> 00:33:47,049
a query language you're probably

952
00:33:45,070 --> 00:33:48,730
thinking SQL you know you're on the

953
00:33:47,049 --> 00:33:50,799
thing it comes back with the table of

954
00:33:48,730 --> 00:33:54,879
results right and that's for the most

955
00:33:50,799 --> 00:33:57,039
part what regular bql does but we but

956
00:33:54,879 --> 00:33:58,990
the vacuole query is asynchronous so it

957
00:33:57,039 --> 00:34:02,259
doesn't actually have to ever return and

958
00:33:58,990 --> 00:34:04,179
we have a whole bunch of event plugins

959
00:34:02,259 --> 00:34:06,279
which basically just start running the

960
00:34:04,179 --> 00:34:08,829
query and just block and wait for

961
00:34:06,279 --> 00:34:11,530
something to happen an event and when an

962
00:34:08,829 --> 00:34:14,409
event happens that row is returned you

963
00:34:11,530 --> 00:34:16,450
know back to the to the query and then

964
00:34:14,409 --> 00:34:18,760
you can filter it and manipulate it and

965
00:34:16,449 --> 00:34:20,259
so forth and so these are actually the

966
00:34:18,760 --> 00:34:22,089
query is never-ending

967
00:34:20,260 --> 00:34:23,980
it just starts running and it just

968
00:34:22,089 --> 00:34:26,049
starts listening for the event and then

969
00:34:23,980 --> 00:34:27,609
just processing it and it turns out this

970
00:34:26,050 --> 00:34:30,159
is extremely powerful because we can

971
00:34:27,609 --> 00:34:32,078
push it to clients and to the endpoint

972
00:34:30,159 --> 00:34:34,179
and then and then basically just wait

973
00:34:32,079 --> 00:34:36,879
for things to happen and then respond

974
00:34:34,179 --> 00:34:39,159
the query can respond by itself without

975
00:34:36,879 --> 00:34:40,719
going back to the server or anything

976
00:34:39,159 --> 00:34:42,690
like it just knows what it's supposed to

977
00:34:40,719 --> 00:34:46,868
be doing it's kind of a response plan

978
00:34:42,690 --> 00:34:48,790
and so we can do that and it just keep

979
00:34:46,869 --> 00:34:51,700
feeding and streaming those events back

980
00:34:48,790 --> 00:34:52,810
to the server as they happen so what

981
00:34:51,699 --> 00:34:54,578
kind of things do we look for

982
00:34:52,810 --> 00:34:57,730
here's one case study very simple one

983
00:34:54,579 --> 00:35:00,190
DNS now we know that DNS is a fantastic

984
00:34:57,730 --> 00:35:01,960
indicator it's it's great for c2 it's

985
00:35:00,190 --> 00:35:04,630
great for blacklisted IP is it's great

986
00:35:01,960 --> 00:35:06,970
for scoping the extent of which other

987
00:35:04,630 --> 00:35:10,060
boxes on our network talking out to our

988
00:35:06,970 --> 00:35:12,009
our bad actors a lot of organizations

989
00:35:10,060 --> 00:35:14,078
don't log DNS unfortunately and some

990
00:35:12,010 --> 00:35:16,119
that do do it in a limited way so they

991
00:35:14,079 --> 00:35:18,430
might do it say on their perimeter

992
00:35:16,119 --> 00:35:20,020
that's okay but what happens if he uses

993
00:35:18,430 --> 00:35:21,910
at home and they're accessing their

994
00:35:20,020 --> 00:35:23,200
internet through home through their home

995
00:35:21,910 --> 00:35:24,670
while it's you're not going to see that

996
00:35:23,200 --> 00:35:26,919
well they might do it on an internal DNS

997
00:35:24,670 --> 00:35:27,460
server which again is okay if someone's

998
00:35:26,920 --> 00:35:29,290
in your net

999
00:35:27,460 --> 00:35:31,210
but what if you've got your IT people

1000
00:35:29,290 --> 00:35:33,460
who decide no no I don't want to use the

1001
00:35:31,210 --> 00:35:36,790
company's DNS I'm gonna use Google's DNS

1002
00:35:33,460 --> 00:35:39,069
because it's pasta so what we do is we

1003
00:35:36,790 --> 00:35:40,990
actually connect DNS on the endpoint and

1004
00:35:39,069 --> 00:35:43,210
that covers those bases because if the

1005
00:35:40,990 --> 00:35:45,308
user changes their DNS we're still gonna

1006
00:35:43,210 --> 00:35:46,900
see their queries if a user is outside

1007
00:35:45,309 --> 00:35:49,930
of your network perimeter we're still

1008
00:35:46,900 --> 00:35:52,420
gonna see their DNS queries and this is

1009
00:35:49,930 --> 00:35:54,700
a really simple example of an event

1010
00:35:52,420 --> 00:35:56,650
artifact every time we get these lookups

1011
00:35:54,700 --> 00:35:58,089
these DNS lookups we're capturing them

1012
00:35:56,650 --> 00:36:00,430
we're feeding them back to the server

1013
00:35:58,089 --> 00:36:01,960
and again we can monitor for them if

1014
00:36:00,430 --> 00:36:05,649
we're doing an investigation we've

1015
00:36:01,960 --> 00:36:08,859
identified a c2 channel we can extend

1016
00:36:05,650 --> 00:36:11,170
this monitoring to say look at the DNS

1017
00:36:08,859 --> 00:36:13,058
and every time you see this alert me

1018
00:36:11,170 --> 00:36:15,339
send me an email do something about it

1019
00:36:13,059 --> 00:36:17,800
so this becomes a great monitoring tool

1020
00:36:15,339 --> 00:36:20,500
here's another interesting one it's kind

1021
00:36:17,800 --> 00:36:23,260
of not so much on the incident response

1022
00:36:20,500 --> 00:36:25,869
but a huge issue for organizations USB

1023
00:36:23,260 --> 00:36:28,059
devices now USBs are a constant threat

1024
00:36:25,869 --> 00:36:29,500
we can tell a lot about USBs through

1025
00:36:28,059 --> 00:36:31,960
digital forensic analysis when they're

1026
00:36:29,500 --> 00:36:33,910
connected make model serial number when

1027
00:36:31,960 --> 00:36:34,809
they're disconnected if someone opens

1028
00:36:33,910 --> 00:36:37,089
files from them

1029
00:36:34,809 --> 00:36:38,440
we see a lot of artifacts about that but

1030
00:36:37,089 --> 00:36:40,720
we still have blind spots

1031
00:36:38,440 --> 00:36:42,549
if someone connects a USB you can't see

1032
00:36:40,720 --> 00:36:45,368
what's on it unless they start opening

1033
00:36:42,549 --> 00:36:47,319
files and another big problem we've got

1034
00:36:45,369 --> 00:36:49,869
in Windows is you can't see if they copy

1035
00:36:47,319 --> 00:36:51,759
files to it and then just pull it out so

1036
00:36:49,869 --> 00:36:54,339
again Velociraptor can cover these blind

1037
00:36:51,760 --> 00:36:56,020
spots with some artifacts and we're

1038
00:36:54,339 --> 00:36:59,680
using monitoring artifacts again to

1039
00:36:56,020 --> 00:37:01,799
monitor for USB key insertion so what do

1040
00:36:59,680 --> 00:37:04,029
we want to do in USB keys get inserted

1041
00:37:01,799 --> 00:37:06,309
simplest thing list everything on them

1042
00:37:04,030 --> 00:37:07,839
so imagine this imagine from you can go

1043
00:37:06,309 --> 00:37:09,970
to your boss or your risk people and say

1044
00:37:07,839 --> 00:37:12,069
hey from now on every time someone plugs

1045
00:37:09,970 --> 00:37:15,669
a USB in we're gonna get a list of

1046
00:37:12,069 --> 00:37:17,140
everything that's on it pretty cool you

1047
00:37:15,670 --> 00:37:18,670
can then start looking for that as well

1048
00:37:17,140 --> 00:37:21,819
so this is another artifact that looks

1049
00:37:18,670 --> 00:37:23,770
at inside the documents and looks for

1050
00:37:21,819 --> 00:37:26,880
keywords not the file names inside the

1051
00:37:23,770 --> 00:37:30,369
documents on the USB now caveat caveat

1052
00:37:26,880 --> 00:37:33,040
privacy issues think about it

1053
00:37:30,369 --> 00:37:35,049
but the technical capability is there

1054
00:37:33,040 --> 00:37:36,670
okay we're not saying go out and do this

1055
00:37:35,049 --> 00:37:38,140
straight away because depending on where

1056
00:37:36,670 --> 00:37:40,170
you're from there might be restrictions

1057
00:37:38,140 --> 00:37:41,670
on whether you are allowed to scan

1058
00:37:40,170 --> 00:37:44,670
personal devices that are connected to

1059
00:37:41,670 --> 00:37:46,319
computers but we can do it functionally

1060
00:37:44,670 --> 00:37:48,030
you'll notice also we're not just

1061
00:37:46,319 --> 00:37:49,650
looking at keywords here this is a

1062
00:37:48,030 --> 00:37:51,869
particular artifact that looks at office

1063
00:37:49,650 --> 00:37:53,670
keywords why offers keywords because

1064
00:37:51,869 --> 00:37:55,170
office documents are compressed so you

1065
00:37:53,670 --> 00:37:57,180
can't just use a standard yaar you have

1066
00:37:55,170 --> 00:38:00,690
to do some decompression first so we've

1067
00:37:57,180 --> 00:38:02,910
built that capability in here's another

1068
00:38:00,690 --> 00:38:04,799
interesting one office macros again we

1069
00:38:02,910 --> 00:38:07,770
take our initial artifact which is

1070
00:38:04,799 --> 00:38:09,690
detect USB insertion and we've written a

1071
00:38:07,770 --> 00:38:11,730
custom artifact which says look for

1072
00:38:09,690 --> 00:38:13,950
office documents and then look for

1073
00:38:11,730 --> 00:38:15,420
evidence of macros inside them looking

1074
00:38:13,950 --> 00:38:19,730
for malicious documents around the

1075
00:38:15,420 --> 00:38:22,140
network all right

1076
00:38:19,730 --> 00:38:24,630
server event artifacts now we've talked

1077
00:38:22,140 --> 00:38:26,400
about clients event artifacts so

1078
00:38:24,630 --> 00:38:28,650
monitoring things on the client what

1079
00:38:26,400 --> 00:38:31,380
about on the server side and again Mike

1080
00:38:28,650 --> 00:38:33,329
I'll actually I'll do the intro for this

1081
00:38:31,380 --> 00:38:34,680
one then I move on so one of the other

1082
00:38:33,329 --> 00:38:36,540
things that we are gathering with

1083
00:38:34,680 --> 00:38:39,029
Velociraptor is program execution as

1084
00:38:36,540 --> 00:38:43,380
programs are being run on the endpoints

1085
00:38:39,030 --> 00:38:45,089
the the information about those is being

1086
00:38:43,380 --> 00:38:47,579
fed back to the server and we get the

1087
00:38:45,089 --> 00:38:49,170
full command line execution now you'll

1088
00:38:47,579 --> 00:38:50,880
know that full command line particularly

1089
00:38:49,170 --> 00:38:52,650
for something like PowerShell is also a

1090
00:38:50,880 --> 00:38:54,930
blind-spot that we've had for a while in

1091
00:38:52,650 --> 00:38:57,210
more recent versions of PowerShell and

1092
00:38:54,930 --> 00:38:59,098
Windows we are getting fantastic logging

1093
00:38:57,210 --> 00:39:01,109
capability but often you still need to

1094
00:38:59,099 --> 00:39:03,349
enable that and we know that there are

1095
00:39:01,109 --> 00:39:05,549
also for example downgrade attacks where

1096
00:39:03,349 --> 00:39:07,920
attackers can manipulate their use of

1097
00:39:05,549 --> 00:39:09,839
PowerShell to try to overcome some of

1098
00:39:07,920 --> 00:39:13,890
that logging so again we can use

1099
00:39:09,839 --> 00:39:15,960
Velociraptor as a counter to that we

1100
00:39:13,890 --> 00:39:18,210
know that PowerShell gets encoded we

1101
00:39:15,960 --> 00:39:20,040
know we often see base64 this can be

1102
00:39:18,210 --> 00:39:23,280
it's very easy to spot on the endpoint

1103
00:39:20,040 --> 00:39:25,410
if you've got the logging enabled if you

1104
00:39:23,280 --> 00:39:27,349
capture the evidence you can decode that

1105
00:39:25,410 --> 00:39:29,160
fairly easily but doing that at scale

1106
00:39:27,349 --> 00:39:31,500
particularly on a network that's not

1107
00:39:29,160 --> 00:39:34,680
configured to properly secure PowerShell

1108
00:39:31,500 --> 00:39:36,150
yet that's a difficult thing so what

1109
00:39:34,680 --> 00:39:38,578
we're doing with Velociraptor is as

1110
00:39:36,150 --> 00:39:41,160
we're seeing PowerShell being executed

1111
00:39:38,579 --> 00:39:44,280
we've got an artifact that's monitoring

1112
00:39:41,160 --> 00:39:45,540
that server side and it's looking just

1113
00:39:44,280 --> 00:39:48,180
as it's a simple regex

1114
00:39:45,540 --> 00:39:50,040
that looks for references to the

1115
00:39:48,180 --> 00:39:52,500
encoding switches in the PowerShell

1116
00:39:50,040 --> 00:39:53,940
command and when it sees them it does a

1117
00:39:52,500 --> 00:39:56,220
decode so here's an exam

1118
00:39:53,940 --> 00:39:58,440
of a suspicious end point which is

1119
00:39:56,220 --> 00:39:59,788
running an encoded PowerShell this has

1120
00:39:58,440 --> 00:40:02,490
been automatically sent to the server

1121
00:39:59,789 --> 00:40:04,380
the Velociraptor server has seen it it's

1122
00:40:02,490 --> 00:40:06,808
detected the PowerShell encoding and

1123
00:40:04,380 --> 00:40:09,049
it's done a decode for us this is

1124
00:40:06,809 --> 00:40:11,369
showing you the navicular behind it and

1125
00:40:09,049 --> 00:40:13,589
this is the decoded power this might be

1126
00:40:11,369 --> 00:40:15,539
familiar this particular PowerShell

1127
00:40:13,589 --> 00:40:17,038
attack to some people this might be this

1128
00:40:15,539 --> 00:40:19,380
might be an apt that some of you have

1129
00:40:17,039 --> 00:40:22,950
investigated before I'll just leave it

1130
00:40:19,380 --> 00:40:25,500
at that but you can see how it works and

1131
00:40:22,950 --> 00:40:27,180
this is all automated and and what

1132
00:40:25,500 --> 00:40:29,579
happens is that this result just is

1133
00:40:27,180 --> 00:40:30,960
stored on the server in essentially a

1134
00:40:29,579 --> 00:40:32,460
distilled form

1135
00:40:30,960 --> 00:40:35,190
so essentially you just have the one

1136
00:40:32,460 --> 00:40:37,950
file that just has decoded PowerShell so

1137
00:40:35,190 --> 00:40:40,260
all the other process execution craft is

1138
00:40:37,950 --> 00:40:41,609
not in that particular file I mean it's

1139
00:40:40,260 --> 00:40:44,220
an in different file but you've got

1140
00:40:41,609 --> 00:40:45,930
these highly distilled high value events

1141
00:40:44,220 --> 00:40:47,399
that you can just look at them and you

1142
00:40:45,930 --> 00:40:48,899
can incorporate this into your security

1143
00:40:47,400 --> 00:40:50,700
monitoring so every morning you can come

1144
00:40:48,900 --> 00:40:53,039
in after you look at all of the list of

1145
00:40:50,700 --> 00:40:54,808
documents on people's USB devices you

1146
00:40:53,039 --> 00:40:56,849
can look at all of your list of encoded

1147
00:40:54,809 --> 00:40:59,789
PowerShell that ran yesterday right

1148
00:40:56,849 --> 00:41:02,880
extreme visibility very surgical very

1149
00:40:59,789 --> 00:41:04,650
specific very very efficient and again

1150
00:41:02,880 --> 00:41:06,420
encapsulating a lot of that friends

1151
00:41:04,650 --> 00:41:07,829
acknowledge into the tool so you don't

1152
00:41:06,420 --> 00:41:10,140
have to build this all yourself or

1153
00:41:07,829 --> 00:41:13,260
figure out how to do it from scratch all

1154
00:41:10,140 --> 00:41:14,578
right so we're hunting for things we're

1155
00:41:13,260 --> 00:41:17,670
looking for things we're monitoring

1156
00:41:14,579 --> 00:41:19,710
actively what else can we do the next

1157
00:41:17,670 --> 00:41:22,349
logical step to this is well we see

1158
00:41:19,710 --> 00:41:24,720
something bad happening can we respond

1159
00:41:22,349 --> 00:41:27,000
in some way and even more can we

1160
00:41:24,720 --> 00:41:28,980
automate it so in addition to vql

1161
00:41:27,000 --> 00:41:31,740
there's another cool thing that we have

1162
00:41:28,980 --> 00:41:33,000
in Velociraptor which is an API so a lot

1163
00:41:31,740 --> 00:41:35,339
of the functionality that we've showed

1164
00:41:33,000 --> 00:41:37,950
you through vql if you want to customize

1165
00:41:35,339 --> 00:41:38,520
it through API integration you can do

1166
00:41:37,950 --> 00:41:40,379
that too

1167
00:41:38,520 --> 00:41:43,259
so here's an interesting scenario that

1168
00:41:40,380 --> 00:41:45,660
we that we that we use here we're

1169
00:41:43,260 --> 00:41:47,670
looking for a particular kind of maybe

1170
00:41:45,660 --> 00:41:50,098
persistence or lateral movement misuse

1171
00:41:47,670 --> 00:41:51,990
of Windows services and what we're going

1172
00:41:50,099 --> 00:41:54,930
to be saying is when a Windows service

1173
00:41:51,990 --> 00:41:56,759
gets created we want to grab the

1174
00:41:54,930 --> 00:41:58,169
executable or the DLL that it's pointing

1175
00:41:56,760 --> 00:42:01,079
to and we want to do an automatic

1176
00:41:58,170 --> 00:42:03,089
sandbox detonation so that we can see

1177
00:42:01,079 --> 00:42:04,349
straightaway what is this new service is

1178
00:42:03,089 --> 00:42:06,509
this something we need to be concerned

1179
00:42:04,349 --> 00:42:07,380
about and again I'll hand over to Mike

1180
00:42:06,510 --> 00:42:09,870
to sort of walk

1181
00:42:07,380 --> 00:42:12,060
the steps of hathor so think about what

1182
00:42:09,870 --> 00:42:13,980
we want to do here we have some idea of

1183
00:42:12,060 --> 00:42:15,660
you know what we actually want to do and

1184
00:42:13,980 --> 00:42:18,290
we and this diagram sort of shows like

1185
00:42:15,660 --> 00:42:21,330
the overall plan of what we want to do

1186
00:42:18,290 --> 00:42:23,040
when a new service is installed you know

1187
00:42:21,330 --> 00:42:25,650
that an event log is written into the

1188
00:42:23,040 --> 00:42:27,150
event log and you know usually we can do

1189
00:42:25,650 --> 00:42:29,700
event on forwarding and just see that

1190
00:42:27,150 --> 00:42:30,810
event you know remotely but because we

1191
00:42:29,700 --> 00:42:33,000
have in velocerator

1192
00:42:30,810 --> 00:42:35,400
the world eruptive client actually

1193
00:42:33,000 --> 00:42:38,550
running on the endpoint and so we can

1194
00:42:35,400 --> 00:42:41,160
write an event monitoring query on the

1195
00:42:38,550 --> 00:42:42,810
endpoint to the it which can also see

1196
00:42:41,160 --> 00:42:44,910
that event being written to the log

1197
00:42:42,810 --> 00:42:47,759
files just sit there and watch the log

1198
00:42:44,910 --> 00:42:50,009
file locally and then we can actually do

1199
00:42:47,760 --> 00:42:51,270
something with that event locally so you

1200
00:42:50,010 --> 00:42:52,770
know we don't have to go to the server

1201
00:42:51,270 --> 00:42:53,100
and then the server has to act or

1202
00:42:52,770 --> 00:42:55,920
anything

1203
00:42:53,100 --> 00:42:57,630
this is autonomous and so we could you

1204
00:42:55,920 --> 00:42:58,560
know in this case the plan is to to

1205
00:42:57,630 --> 00:43:00,810
watch for that event

1206
00:42:58,560 --> 00:43:02,910
grab the binary that is actually

1207
00:43:00,810 --> 00:43:05,790
installed and upload that to the server

1208
00:43:02,910 --> 00:43:06,899
and then on the server side what we're

1209
00:43:05,790 --> 00:43:09,750
gonna do is we're gonna write a Python

1210
00:43:06,900 --> 00:43:12,810
program that watches for the upload and

1211
00:43:09,750 --> 00:43:14,310
submits it to draw sandbox in in this

1212
00:43:12,810 --> 00:43:18,360
case so that we could get some kind of

1213
00:43:14,310 --> 00:43:21,390
triaging going on so this is how it

1214
00:43:18,360 --> 00:43:22,890
looks we have a the service detection

1215
00:43:21,390 --> 00:43:24,480
artifact this is looking for new

1216
00:43:22,890 --> 00:43:25,859
services and when it sees them it

1217
00:43:24,480 --> 00:43:27,420
uploads the information to the server

1218
00:43:25,860 --> 00:43:28,610
this is the python script that we

1219
00:43:27,420 --> 00:43:32,190
haven't liked you want to walk through

1220
00:43:28,610 --> 00:43:33,660
this is basically the the script that

1221
00:43:32,190 --> 00:43:36,630
does all of it the first function is

1222
00:43:33,660 --> 00:43:39,210
just the Joe sandbox API to submit the

1223
00:43:36,630 --> 00:43:40,950
the sample and then the the second

1224
00:43:39,210 --> 00:43:43,020
function the first thing we do is

1225
00:43:40,950 --> 00:43:45,089
connect to the API and essentially just

1226
00:43:43,020 --> 00:43:47,490
copy-paste those lines it's a pretty

1227
00:43:45,090 --> 00:43:49,530
template thing and the Velociraptor API

1228
00:43:47,490 --> 00:43:52,049
is actually very simple all you only

1229
00:43:49,530 --> 00:43:53,610
does is it accepts a vql query like

1230
00:43:52,050 --> 00:43:55,500
anything else it's just like connecting

1231
00:43:53,610 --> 00:43:57,420
to a database and running a query but

1232
00:43:55,500 --> 00:43:59,790
using that we can actually do pretty

1233
00:43:57,420 --> 00:44:02,640
much anything we want because the vql is

1234
00:43:59,790 --> 00:44:05,490
so powerful and in this case the vql

1235
00:44:02,640 --> 00:44:07,950
query says watch the monitoring log for

1236
00:44:05,490 --> 00:44:09,750
system upload completion so any

1237
00:44:07,950 --> 00:44:12,480
completed uploads that were pushed to

1238
00:44:09,750 --> 00:44:14,640
the system from all clients at the same

1239
00:44:12,480 --> 00:44:17,310
time and every time any file is uploaded

1240
00:44:14,640 --> 00:44:18,690
that event will fire and when that fires

1241
00:44:17,310 --> 00:44:21,000
then we get a row

1242
00:44:18,690 --> 00:44:23,369
and so we can take that row and extract

1243
00:44:21,000 --> 00:44:25,800
the the file name and then and then

1244
00:44:23,369 --> 00:44:27,390
upload it using the Joe sandbox API and

1245
00:44:25,800 --> 00:44:29,670
here's how it looks so the attackers on

1246
00:44:27,390 --> 00:44:32,910
the Box they create a new service just

1247
00:44:29,670 --> 00:44:34,980
with the SC command they call it what is

1248
00:44:32,910 --> 00:44:37,069
it fake great service name and they

1249
00:44:34,980 --> 00:44:38,910
point it at a malicious executable

1250
00:44:37,069 --> 00:44:40,829
Velociraptor will pick this up on the

1251
00:44:38,910 --> 00:44:42,839
client through the client monitoring

1252
00:44:40,829 --> 00:44:45,060
artifact it'll grab the executable it'll

1253
00:44:42,839 --> 00:44:46,828
upload it to the server the Python

1254
00:44:45,060 --> 00:44:49,049
script which is running and monitoring

1255
00:44:46,829 --> 00:44:51,390
those uploads will grab the executable

1256
00:44:49,050 --> 00:44:53,849
it'll run its code submit it to the

1257
00:44:51,390 --> 00:44:55,859
online sandbox and we'll get a report

1258
00:44:53,849 --> 00:44:58,079
back so you'll get a report in your

1259
00:44:55,859 --> 00:44:59,848
inbox that says here's a velociraptor

1260
00:44:58,079 --> 00:45:02,069
initiated sandbox report for a new

1261
00:44:59,849 --> 00:45:07,020
service that was created that's it

1262
00:45:02,069 --> 00:45:08,700
it's all automated all right so let's

1263
00:45:07,020 --> 00:45:10,170
take it up another level what about

1264
00:45:08,700 --> 00:45:11,669
responding what about actually getting

1265
00:45:10,170 --> 00:45:13,770
in the way of bad things that are

1266
00:45:11,670 --> 00:45:15,180
happening and trying to stop them so

1267
00:45:13,770 --> 00:45:16,890
this is the next logical step and this

1268
00:45:15,180 --> 00:45:18,149
is the last kind of level up that we do

1269
00:45:16,890 --> 00:45:20,640
I'm conscious of time so we're gonna

1270
00:45:18,150 --> 00:45:22,770
wrap up very quickly simple example

1271
00:45:20,640 --> 00:45:25,220
Pierce exact we've seen Pierce exact

1272
00:45:22,770 --> 00:45:27,540
remoting we know how bad it is

1273
00:45:25,220 --> 00:45:28,950
sophisticated attackers may or may not

1274
00:45:27,540 --> 00:45:30,660
use it but it's still something bad that

1275
00:45:28,950 --> 00:45:33,480
you want to detect and you want to

1276
00:45:30,660 --> 00:45:35,670
respond to so now we know that we can

1277
00:45:33,480 --> 00:45:37,230
monitor for new services we can monitor

1278
00:45:35,670 --> 00:45:39,329
for executables why don't we actually

1279
00:45:37,230 --> 00:45:40,589
block them at the same time and again

1280
00:45:39,329 --> 00:45:41,940
Mike you might want to go through it's a

1281
00:45:40,589 --> 00:45:44,220
bit hard to see on the slide but you can

1282
00:45:41,940 --> 00:45:46,980
go through those one slide so this this

1283
00:45:44,220 --> 00:45:49,169
particular artifact detects Pierce exec

1284
00:45:46,980 --> 00:45:51,119
securin and as you know the the recent

1285
00:45:49,170 --> 00:45:53,010
versions of PS exec have a switch to be

1286
00:45:51,119 --> 00:45:54,930
able to rename the service so the old

1287
00:45:53,010 --> 00:45:57,210
rules that we used to do just look for

1288
00:45:54,930 --> 00:45:58,649
PS exec SRV it doesn't really work

1289
00:45:57,210 --> 00:46:00,510
anymore because they can just call it

1290
00:45:58,650 --> 00:46:02,310
whatever and so you can't see that in

1291
00:46:00,510 --> 00:46:04,170
process execution logs so what we have

1292
00:46:02,310 --> 00:46:06,720
to do is we have to go this step further

1293
00:46:04,170 --> 00:46:08,280
and actually try and look at the binary

1294
00:46:06,720 --> 00:46:10,500
and try and determine whether that is

1295
00:46:08,280 --> 00:46:12,359
really the PS exec service that is

1296
00:46:10,500 --> 00:46:15,450
installed and this is what this query

1297
00:46:12,359 --> 00:46:18,240
does is it watches for service

1298
00:46:15,450 --> 00:46:20,279
installations and then for just like

1299
00:46:18,240 --> 00:46:21,750
before where we uploaded the binary it

1300
00:46:20,280 --> 00:46:23,609
actually runs the arrow rule against

1301
00:46:21,750 --> 00:46:25,920
that binary locally on the endpoint

1302
00:46:23,609 --> 00:46:28,020
itself to try and look for that yara

1303
00:46:25,920 --> 00:46:29,849
you're a signature and when it

1304
00:46:28,020 --> 00:46:32,970
determines that yeah you know that that

1305
00:46:29,849 --> 00:46:35,910
binary I mean it has the PS exec string

1306
00:46:32,970 --> 00:46:37,770
it's probably the PS exec binary then it

1307
00:46:35,910 --> 00:46:39,118
triggers and then what we do is we say

1308
00:46:37,770 --> 00:46:41,009
okay so the first rule was about

1309
00:46:39,119 --> 00:46:43,349
detection so we might want to know about

1310
00:46:41,010 --> 00:46:45,210
it but now we're gonna go level up and

1311
00:46:43,349 --> 00:46:47,069
actually try and and do something about

1312
00:46:45,210 --> 00:46:49,170
it like maybe in our environment piece

1313
00:46:47,069 --> 00:46:50,339
exactly is not really allowed so we can

1314
00:46:49,170 --> 00:46:52,980
take that artifact

1315
00:46:50,339 --> 00:46:55,170
that does the detection and then we can

1316
00:46:52,980 --> 00:46:58,230
use it in another artifact that will

1317
00:46:55,170 --> 00:47:00,420
actually actively kill that process when

1318
00:46:58,230 --> 00:47:02,579
it starts up and so you can see that it

1319
00:47:00,420 --> 00:47:05,819
essentially what we do is we we look for

1320
00:47:02,579 --> 00:47:07,859
all events that come from the first the

1321
00:47:05,819 --> 00:47:10,770
first detection artifact and then we

1322
00:47:07,859 --> 00:47:12,598
just toss kill those right so in this

1323
00:47:10,770 --> 00:47:14,579
this example and you can get more

1324
00:47:12,599 --> 00:47:16,020
creative with this as well so if you've

1325
00:47:14,579 --> 00:47:18,569
got a particular malware tool that you

1326
00:47:16,020 --> 00:47:20,730
want to find you can use your ax to

1327
00:47:18,569 --> 00:47:22,740
detect that so you know paste exec is a

1328
00:47:20,730 --> 00:47:24,420
simple example but you know if you think

1329
00:47:22,740 --> 00:47:26,009
back to the old pyramid of pain that

1330
00:47:24,420 --> 00:47:27,359
attackers have there are certain things

1331
00:47:26,010 --> 00:47:29,099
that are very easy for them to change

1332
00:47:27,359 --> 00:47:30,900
like the names of their malware they can

1333
00:47:29,099 --> 00:47:32,339
recompile they can do other things but

1334
00:47:30,900 --> 00:47:34,380
there are there are other elements that

1335
00:47:32,339 --> 00:47:36,210
are a lot harder so if someone is using

1336
00:47:34,380 --> 00:47:38,310
something like a Metasploit or a cobalt

1337
00:47:36,210 --> 00:47:40,410
strike beacon or something that requires

1338
00:47:38,310 --> 00:47:42,930
some sort of code if you have good yara

1339
00:47:40,410 --> 00:47:44,490
cigs for that you can embed those and it

1340
00:47:42,930 --> 00:47:50,190
makes it a lot harder for an attacker to

1341
00:47:44,490 --> 00:47:51,270
use those kinds of so mike apparently

1342
00:47:50,190 --> 00:47:52,560
they tell me knows a couple of things

1343
00:47:51,270 --> 00:47:54,150
about memory that's one of the other

1344
00:47:52,560 --> 00:47:55,890
things you could do instead of killing

1345
00:47:54,150 --> 00:47:57,690
the PS exec process you could actually

1346
00:47:55,890 --> 00:47:59,279
say hey what's happening with PS exec

1347
00:47:57,690 --> 00:48:01,050
let's get all the trial processes which

1348
00:47:59,280 --> 00:48:02,430
is what we're doing here before we kill

1349
00:48:01,050 --> 00:48:04,560
them let's just get a process memory

1350
00:48:02,430 --> 00:48:06,299
dump and we get all the process memory

1351
00:48:04,560 --> 00:48:07,950
and then we drop the process and then

1352
00:48:06,300 --> 00:48:09,270
when you get that memory dump you can do

1353
00:48:07,950 --> 00:48:12,029
your analysis and say what was this

1354
00:48:09,270 --> 00:48:13,440
thing doing what was and not the benefit

1355
00:48:12,030 --> 00:48:14,970
of doing that process dump rather than

1356
00:48:13,440 --> 00:48:16,140
just sort of full memory dump is it

1357
00:48:14,970 --> 00:48:17,459
overcomes a lot of those issues with

1358
00:48:16,140 --> 00:48:18,868
paging and compression and those things

1359
00:48:17,460 --> 00:48:20,010
that we were sort of talking about

1360
00:48:18,869 --> 00:48:22,349
yesterday because the memory is all

1361
00:48:20,010 --> 00:48:24,060
there it's the you're getting Windows to

1362
00:48:22,349 --> 00:48:26,339
basically collect it for you and give it

1363
00:48:24,060 --> 00:48:27,960
to you and then kill the process so this

1364
00:48:26,339 --> 00:48:29,609
becomes a very powerful response

1365
00:48:27,960 --> 00:48:30,480
capability as well and this is what it

1366
00:48:29,609 --> 00:48:32,339
looks like from the attackers

1367
00:48:30,480 --> 00:48:34,350
perspective they run Pierce exec they

1368
00:48:32,339 --> 00:48:36,710
try to pop a shell and

1369
00:48:34,350 --> 00:48:39,270
it kind of fires up and then it dies

1370
00:48:36,710 --> 00:48:40,650
right now there's a really important

1371
00:48:39,270 --> 00:48:42,600
thing here there is a race condition

1372
00:48:40,650 --> 00:48:45,570
going on we are not in line in the

1373
00:48:42,600 --> 00:48:47,790
execution process so we cannot block the

1374
00:48:45,570 --> 00:48:49,800
Pierce exec because of the way where

1375
00:48:47,790 --> 00:48:50,640
Velociraptor sits in the chain but we

1376
00:48:49,800 --> 00:48:52,710
can detect it

1377
00:48:50,640 --> 00:48:54,720
there are definitely situations where if

1378
00:48:52,710 --> 00:48:56,130
the malware executes really quickly and

1379
00:48:54,720 --> 00:48:57,750
comes and goes really fast we're not

1380
00:48:56,130 --> 00:48:59,220
going to catch it but if you've got

1381
00:48:57,750 --> 00:49:01,290
something that's more persistent like an

1382
00:48:59,220 --> 00:49:03,149
implant or you know back door or

1383
00:49:01,290 --> 00:49:05,880
something else you will you will pick

1384
00:49:03,150 --> 00:49:08,430
that up so it depends on the speed of it

1385
00:49:05,880 --> 00:49:10,350
so that's all the scenarios so we've

1386
00:49:08,430 --> 00:49:11,669
gone through a lot right and there's

1387
00:49:10,350 --> 00:49:13,680
lots of options there's lots of

1388
00:49:11,670 --> 00:49:15,540
capability we've been using this on jobs

1389
00:49:13,680 --> 00:49:17,460
I said for the last year or more and

1390
00:49:15,540 --> 00:49:19,230
it's been fantastic in lots of different

1391
00:49:17,460 --> 00:49:21,420
cases and every time we have a new job

1392
00:49:19,230 --> 00:49:23,010
and then you need for it we kind of

1393
00:49:21,420 --> 00:49:25,890
think how can I do this and we'll build

1394
00:49:23,010 --> 00:49:28,170
an artefact and we'll use it so the

1395
00:49:25,890 --> 00:49:29,910
question I put to you is what would you

1396
00:49:28,170 --> 00:49:31,620
use it for how could you use and this is

1397
00:49:29,910 --> 00:49:33,509
part of what we want to do in releasing

1398
00:49:31,620 --> 00:49:35,250
it open-source is we really want to get

1399
00:49:33,510 --> 00:49:36,810
people's feedback and ideas we want

1400
00:49:35,250 --> 00:49:38,310
because we've already had some fantastic

1401
00:49:36,810 --> 00:49:40,620
suggestions from people in the community

1402
00:49:38,310 --> 00:49:43,200
that we're not even thought of yet but

1403
00:49:40,620 --> 00:49:45,000
because that baseline capability is

1404
00:49:43,200 --> 00:49:46,799
there we can extend it to doing those

1405
00:49:45,000 --> 00:49:49,920
things so we're going to wrap up really

1406
00:49:46,800 --> 00:49:53,580
really quickly a huge huge point to make

1407
00:49:49,920 --> 00:49:57,660
here this is not a perfectly polished

1408
00:49:53,580 --> 00:49:59,880
beautiful commercial tool right it can

1409
00:49:57,660 --> 00:50:01,080
be clunky at times it will have bugs in

1410
00:49:59,880 --> 00:50:03,390
it it will do things that you don't

1411
00:50:01,080 --> 00:50:05,400
expect it to do right it is a work in

1412
00:50:03,390 --> 00:50:06,540
progress but having said that this is

1413
00:50:05,400 --> 00:50:08,370
something that we're committing a lot of

1414
00:50:06,540 --> 00:50:09,779
time and effort to so we've act we

1415
00:50:08,370 --> 00:50:11,790
actually do have a company established

1416
00:50:09,780 --> 00:50:14,070
that we're using to develop this tool

1417
00:50:11,790 --> 00:50:16,050
we've been using it this is Mike's

1418
00:50:14,070 --> 00:50:17,760
full-time job and a lot of my time at

1419
00:50:16,050 --> 00:50:19,560
the moment and people in our team who've

1420
00:50:17,760 --> 00:50:20,730
been acting lis using it and developing

1421
00:50:19,560 --> 00:50:22,650
it and we're working with people in the

1422
00:50:20,730 --> 00:50:24,180
community so this is not something

1423
00:50:22,650 --> 00:50:26,160
that's a hobby that we're doing on the

1424
00:50:24,180 --> 00:50:28,140
side it's very much front and center for

1425
00:50:26,160 --> 00:50:30,299
us and we're gonna keep working on it we

1426
00:50:28,140 --> 00:50:32,370
already have a road map that has some

1427
00:50:30,300 --> 00:50:34,170
interesting stuff in it and you can read

1428
00:50:32,370 --> 00:50:35,670
some of those things there we want to

1429
00:50:34,170 --> 00:50:37,350
expand it we want to make it better we

1430
00:50:35,670 --> 00:50:38,970
want to get the bugs out of it we want

1431
00:50:37,350 --> 00:50:41,460
to get feedback from people and we want

1432
00:50:38,970 --> 00:50:43,319
to make it even more robust even more

1433
00:50:41,460 --> 00:50:45,660
feature-rich and even even more useful

1434
00:50:43,320 --> 00:50:47,730
so how can you get involved go to the

1435
00:50:45,660 --> 00:50:49,140
website we've just popped up

1436
00:50:47,730 --> 00:50:50,730
a new website in the last couple of days

1437
00:50:49,140 --> 00:50:53,069
we just pushed out a new release as well

1438
00:50:50,730 --> 00:50:55,440
that has all of the capabilities that we

1439
00:50:53,070 --> 00:50:57,840
showed you today it's on github you can

1440
00:50:55,440 --> 00:50:59,820
download it start using it after you

1441
00:50:57,840 --> 00:51:04,109
download the latest release please take

1442
00:50:59,820 --> 00:51:07,109
a minute to read the friendly manual ok

1443
00:51:04,109 --> 00:51:09,180
your time spent reading it will pay off

1444
00:51:07,109 --> 00:51:11,130
in spades when it comes to actually

1445
00:51:09,180 --> 00:51:12,839
understanding how the tool works and how

1446
00:51:11,130 --> 00:51:14,940
you can use again you don't have to be a

1447
00:51:12,840 --> 00:51:16,680
forensic guru you don't have to be a vql

1448
00:51:14,940 --> 00:51:19,410
guru you don't have to be a programmer

1449
00:51:16,680 --> 00:51:21,089
you can just do a lot by just pointing

1450
00:51:19,410 --> 00:51:22,618
and clicking and then if you get

1451
00:51:21,090 --> 00:51:23,940
comfortable with it you can start

1452
00:51:22,619 --> 00:51:26,100
playing around with parameters you can

1453
00:51:23,940 --> 00:51:28,530
start doing your customizations as much

1454
00:51:26,100 --> 00:51:30,960
or as little as you want to and please

1455
00:51:28,530 --> 00:51:32,280
contribute back alright we already have

1456
00:51:30,960 --> 00:51:34,170
some great people in the community who

1457
00:51:32,280 --> 00:51:36,570
are contributing back ideas and

1458
00:51:34,170 --> 00:51:38,040
artifacts and functionality we have some

1459
00:51:36,570 --> 00:51:39,840
great stickers apparently you can't have

1460
00:51:38,040 --> 00:51:40,980
software these days without stickers so

1461
00:51:39,840 --> 00:51:42,930
if you want some stickers come and hit

1462
00:51:40,980 --> 00:51:44,910
us up we have this really awesome gold

1463
00:51:42,930 --> 00:51:47,629
shiny sticker but we reserve that for

1464
00:51:44,910 --> 00:51:49,680
people that actually contribute so

1465
00:51:47,630 --> 00:51:53,670
submit something and we'll submit

1466
00:51:49,680 --> 00:51:55,790
something and we'll send you on that's

1467
00:51:53,670 --> 00:52:02,100
it thank you

1468
00:51:55,790 --> 00:52:06,230
[Applause]

1469
00:52:02,100 --> 00:52:08,290
[Music]

1470
00:52:06,230 --> 00:52:08,290
you

