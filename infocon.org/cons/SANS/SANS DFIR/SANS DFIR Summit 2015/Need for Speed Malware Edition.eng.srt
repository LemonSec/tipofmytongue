1
00:00:00,000 --> 00:00:05,609
the sock analyst or a forensic analyst

2
00:00:02,370 --> 00:00:07,680
you encounter suspect files well let's

3
00:00:05,609 --> 00:00:10,050
be honest you encounter a lot of suspect

4
00:00:07,680 --> 00:00:12,540
files you also have no shortage of shiny

5
00:00:10,050 --> 00:00:15,089
appliances and services to submit these

6
00:00:12,540 --> 00:00:16,890
files to all of which of course produce

7
00:00:15,089 --> 00:00:18,330
tons of data that you then have to parse

8
00:00:16,890 --> 00:00:19,830
through and then you've got this awesome

9
00:00:18,330 --> 00:00:21,990
boss that shows up every few minutes

10
00:00:19,830 --> 00:00:23,729
asking you for everything you can

11
00:00:21,990 --> 00:00:26,640
possibly tell them about all these files

12
00:00:23,730 --> 00:00:28,260
as soon as possible so I'm going to go

13
00:00:26,640 --> 00:00:30,150
over six tips that I think will help you

14
00:00:28,260 --> 00:00:31,529
work better in this environment and

15
00:00:30,150 --> 00:00:34,800
perform more efficient more effective

16
00:00:31,529 --> 00:00:37,350
our analysis number one develop

17
00:00:34,800 --> 00:00:39,480
realistic goals I think a great way to

18
00:00:37,350 --> 00:00:42,420
do this very specifically is to come up

19
00:00:39,480 --> 00:00:44,160
with three or four concrete documented

20
00:00:42,420 --> 00:00:47,070
questions that you are going to try and

21
00:00:44,160 --> 00:00:48,718
answer as you perform our analysis now I

22
00:00:47,070 --> 00:00:50,520
have four up on here on the screen that

23
00:00:48,719 --> 00:00:52,559
I use often you can create your own I

24
00:00:50,520 --> 00:00:54,899
think this is very helpful and keeping

25
00:00:52,559 --> 00:00:57,199
you on track and focused speaking of

26
00:00:54,899 --> 00:01:00,090
keeping you on track track your progress

27
00:00:57,199 --> 00:01:01,589
document your work this will not only

28
00:01:00,090 --> 00:01:03,300
help you tomorrow when you try to

29
00:01:01,590 --> 00:01:05,100
continue the work that you started today

30
00:01:03,300 --> 00:01:07,860
but it will help you create that

31
00:01:05,099 --> 00:01:09,149
comprehensive final report now there are

32
00:01:07,860 --> 00:01:11,189
many ways you could do this you could

33
00:01:09,150 --> 00:01:12,210
use a mind map but wiki could use a

34
00:01:11,189 --> 00:01:14,759
dirty napkin although i don't

35
00:01:12,210 --> 00:01:16,860
necessarily condone that my opinion my

36
00:01:14,760 --> 00:01:18,350
preference is to use a word document for

37
00:01:16,860 --> 00:01:21,450
me that strikes a good balance between

38
00:01:18,350 --> 00:01:23,250
structure and flexibility now here's an

39
00:01:21,450 --> 00:01:24,960
excerpt from one of the templates that i

40
00:01:23,250 --> 00:01:27,330
use and whoa it kind of looks like a

41
00:01:24,960 --> 00:01:29,309
process that's crazy this is the section

42
00:01:27,330 --> 00:01:31,110
on static analysis which of course is

43
00:01:29,310 --> 00:01:32,820
when we're analyzing a file without

44
00:01:31,110 --> 00:01:34,500
actually executing it and for this

45
00:01:32,820 --> 00:01:36,270
presentation just for simplicity I'm

46
00:01:34,500 --> 00:01:39,090
going to focus on static analysis

47
00:01:36,270 --> 00:01:41,250
techniques number three data reduction

48
00:01:39,090 --> 00:01:43,020
my approach to data reduction when I'm

49
00:01:41,250 --> 00:01:45,180
performing malware analysis it's really

50
00:01:43,020 --> 00:01:47,520
straightforward I take a chunk of data

51
00:01:45,180 --> 00:01:49,259
and then I try to apply a filter to that

52
00:01:47,520 --> 00:01:51,089
data typically in the form of a script

53
00:01:49,259 --> 00:01:53,399
so that I can then run it against my

54
00:01:51,090 --> 00:01:56,009
larger data set and hopefully perform

55
00:01:53,399 --> 00:01:57,869
more efficient analysis let's work with

56
00:01:56,009 --> 00:02:00,090
an example the sample i'm going to use

57
00:01:57,869 --> 00:02:01,950
here is from fireEye's apt 30 report

58
00:02:00,090 --> 00:02:04,049
this is from a family of malware called

59
00:02:01,950 --> 00:02:06,810
back space which is a group of backdoors

60
00:02:04,049 --> 00:02:08,849
let's take a closer look statically as

61
00:02:06,810 --> 00:02:10,348
part of my static process my static

62
00:02:08,848 --> 00:02:11,819
analysis process i'm going to extract

63
00:02:10,348 --> 00:02:13,890
strings so on the left hand side here

64
00:02:11,819 --> 00:02:15,959
you see some of the strings and x

65
00:02:13,890 --> 00:02:17,369
syrup that i was able to extract now

66
00:02:15,960 --> 00:02:19,140
what you might notice and granted it may

67
00:02:17,370 --> 00:02:20,970
be hard in the back of the room but is

68
00:02:19,140 --> 00:02:23,609
that there are a bunch of what appear to

69
00:02:20,970 --> 00:02:25,109
be windows API calls here and that's

70
00:02:23,610 --> 00:02:27,720
pretty normal that's expected because

71
00:02:25,110 --> 00:02:30,690
the import address table within a PE

72
00:02:27,720 --> 00:02:32,820
file has dependencies such as functions

73
00:02:30,690 --> 00:02:34,800
like these and so it's expected to see

74
00:02:32,820 --> 00:02:36,540
this in the output however if I'm going

75
00:02:34,800 --> 00:02:38,100
to look at those kind of dependencies I

76
00:02:36,540 --> 00:02:39,690
want to be strategic about it i'm just

77
00:02:38,100 --> 00:02:42,060
going to look at the import address

78
00:02:39,690 --> 00:02:43,200
table so when i look at strings I don't

79
00:02:42,060 --> 00:02:45,120
like seeing all that import address

80
00:02:43,200 --> 00:02:46,560
table stuff commingle there for me

81
00:02:45,120 --> 00:02:48,510
that's just not a very efficient way to

82
00:02:46,560 --> 00:02:50,310
look at that string data so I then

83
00:02:48,510 --> 00:02:52,140
created a Python script to basically

84
00:02:50,310 --> 00:02:54,630
take the total number of strings and

85
00:02:52,140 --> 00:02:56,488
subtract all the strings in the import

86
00:02:54,630 --> 00:02:58,500
table that includes DLLs as well as the

87
00:02:56,489 --> 00:03:00,959
actual functions and what you get is an

88
00:02:58,500 --> 00:03:02,610
excerpt right here that I have on the

89
00:03:00,959 --> 00:03:04,500
screen you'll notice that there are some

90
00:03:02,610 --> 00:03:07,590
dll's here and suspiciously there are

91
00:03:04,500 --> 00:03:08,790
still some API calls so what's happening

92
00:03:07,590 --> 00:03:10,680
here well you could take a closer look

93
00:03:08,790 --> 00:03:12,420
at a code level and I'm not going to

94
00:03:10,680 --> 00:03:13,650
really dive deep into assembly but

95
00:03:12,420 --> 00:03:16,079
what's happening here is that the

96
00:03:13,650 --> 00:03:18,360
program is manually trying to determine

97
00:03:16,080 --> 00:03:20,370
the address of create to help 32

98
00:03:18,360 --> 00:03:22,440
snapshot as opposed to letting the

99
00:03:20,370 --> 00:03:24,959
windows loader do that in the background

100
00:03:22,440 --> 00:03:26,430
by using the import address table now

101
00:03:24,959 --> 00:03:28,650
this function creates he'll help 32

102
00:03:26,430 --> 00:03:30,810
snapshot it's often used by an hour to

103
00:03:28,650 --> 00:03:31,920
enumerate the processes on a machine so

104
00:03:30,810 --> 00:03:33,810
this is something that i would

105
00:03:31,920 --> 00:03:35,399
definitely key in on so i'm going to

106
00:03:33,810 --> 00:03:38,070
call this an indicator of potential

107
00:03:35,400 --> 00:03:40,260
badness when i see an api call that's

108
00:03:38,070 --> 00:03:42,390
being used outside of the context of the

109
00:03:40,260 --> 00:03:44,609
import address table i get it out of

110
00:03:42,390 --> 00:03:47,369
sexy IOC's but it works for me number

111
00:03:44,610 --> 00:03:48,840
four correlate binary correlation can be

112
00:03:47,370 --> 00:03:50,970
incredibly powerful for two main reasons

113
00:03:48,840 --> 00:03:53,070
one it prevents you from reverse

114
00:03:50,970 --> 00:03:54,750
engineering the same functions over and

115
00:03:53,070 --> 00:03:56,730
over again and two it helps you create

116
00:03:54,750 --> 00:03:58,230
malware families let's take an example

117
00:03:56,730 --> 00:03:59,940
again and i do want to mention there's

118
00:03:58,230 --> 00:04:01,798
some pretty sophisticated tools to help

119
00:03:59,940 --> 00:04:03,299
you do this at a code level ida pro

120
00:04:01,799 --> 00:04:04,829
plug-ins for example we're going to

121
00:04:03,299 --> 00:04:05,940
stick with static analysis and i'm going

122
00:04:04,829 --> 00:04:08,040
to show you an approach that you can

123
00:04:05,940 --> 00:04:09,739
apply it fairly quickly so these two

124
00:04:08,040 --> 00:04:13,048
samples are again from the family of

125
00:04:09,739 --> 00:04:15,060
backspace malware that our backdoors now

126
00:04:13,049 --> 00:04:16,590
we've been extracting strings and the

127
00:04:15,060 --> 00:04:18,510
import table someone to do that again

128
00:04:16,589 --> 00:04:19,858
using a python script and i also not

129
00:04:18,510 --> 00:04:22,320
only extracted that information but

130
00:04:19,858 --> 00:04:23,669
compared them across two files and if

131
00:04:22,320 --> 00:04:25,229
you look at this output right here

132
00:04:23,669 --> 00:04:28,020
you'll notice the script has determined

133
00:04:25,229 --> 00:04:29,909
that there are 111 imports in common

134
00:04:28,020 --> 00:04:32,520
that's a fairly large chunk of the total

135
00:04:29,910 --> 00:04:34,740
122 and 129 that are in each of these

136
00:04:32,520 --> 00:04:36,719
files individually that's interesting

137
00:04:34,740 --> 00:04:39,569
let's look at the strings while they're

138
00:04:36,720 --> 00:04:40,830
only 172 strings in common however if

139
00:04:39,569 --> 00:04:41,970
you look at the nature of the string

140
00:04:40,830 --> 00:04:43,830
some of them appear to be pretty

141
00:04:41,970 --> 00:04:45,990
specific for example take a look at this

142
00:04:43,830 --> 00:04:47,490
user agent right here so already we've

143
00:04:45,990 --> 00:04:49,860
generated some pretty solid evidence

144
00:04:47,490 --> 00:04:51,330
indicating that these two files might be

145
00:04:49,860 --> 00:04:52,949
correlated and the only reason I was

146
00:04:51,330 --> 00:04:54,210
able to really take a closer look at

147
00:04:52,949 --> 00:04:55,289
that is by writing the script that

148
00:04:54,210 --> 00:04:58,739
allowed me to parse that data

149
00:04:55,289 --> 00:05:02,460
effectively number five perform file

150
00:04:58,740 --> 00:05:03,720
analysis versus malware analysis let me

151
00:05:02,460 --> 00:05:05,909
show you what I mean take a look at

152
00:05:03,720 --> 00:05:07,770
these api calls sometime look fairly

153
00:05:05,909 --> 00:05:09,389
suspicious we have registry keys being

154
00:05:07,770 --> 00:05:11,940
modified library is being loaded

155
00:05:09,389 --> 00:05:13,889
debuggers being checked for however all

156
00:05:11,940 --> 00:05:16,800
of these are in the import table of

157
00:05:13,889 --> 00:05:19,110
known good legitimate windows files and

158
00:05:16,800 --> 00:05:21,539
so the point here is that our suspicions

159
00:05:19,110 --> 00:05:23,759
about a file our hypotheses until we

160
00:05:21,539 --> 00:05:25,650
prove or disprove them if you don't take

161
00:05:23,759 --> 00:05:27,659
that approach you might miss categorize

162
00:05:25,650 --> 00:05:29,878
a file as malware and that not only

163
00:05:27,659 --> 00:05:32,699
makes you look bad that makes the file

164
00:05:29,879 --> 00:05:34,560
said be nice to files and lastly number

165
00:05:32,699 --> 00:05:37,050
sixth when you're performing malware

166
00:05:34,560 --> 00:05:40,190
analysis there's a lot of data to digest

167
00:05:37,050 --> 00:05:42,300
and so it's extremely important to relax

168
00:05:40,190 --> 00:05:43,469
here's a quick tip how you can do that

169
00:05:42,300 --> 00:05:45,810
there's a lot of evidence to indicate

170
00:05:43,469 --> 00:05:47,880
that the mind works in 60 to 90 minute

171
00:05:45,810 --> 00:05:49,590
cycles so take a stopwatch like the one

172
00:05:47,880 --> 00:05:51,840
I'm running against right now set it for

173
00:05:49,590 --> 00:05:54,090
60 and when it hits zero walk away take

174
00:05:51,840 --> 00:05:56,789
a five-minute break take a walk down the

175
00:05:54,090 --> 00:05:58,380
street whatever it takes come back and

176
00:05:56,789 --> 00:05:59,729
take a look at the problem again and

177
00:05:58,380 --> 00:06:01,889
what I think you'll find is that space

178
00:05:59,729 --> 00:06:03,690
it's incredibly helpful I've come up

179
00:06:01,889 --> 00:06:05,400
with some of my worst ideas in front of

180
00:06:03,690 --> 00:06:07,650
a computer screen and some of my best

181
00:06:05,400 --> 00:06:09,120
while getting a breath of fresh air and

182
00:06:07,650 --> 00:06:10,258
if that doesn't help destress you well

183
00:06:09,120 --> 00:06:13,020
you could play a game of bubble soccer

184
00:06:10,259 --> 00:06:14,909
which I just find absolutely hilarious I

185
00:06:13,020 --> 00:06:18,710
have no idea if this is a real sport but

186
00:06:14,909 --> 00:06:18,710
alright so I got thank you so much

