1
00:00:00,000 --> 00:00:07,109
yes alright awesome thank you David

2
00:00:02,820 --> 00:00:08,879
appreciate it oh gosh I thank you I

3
00:00:07,109 --> 00:00:10,320
apologize probably the only round of

4
00:00:08,880 --> 00:00:12,660
applause I'll get after the end of this

5
00:00:10,320 --> 00:00:15,990
so by any means if anyone wants to learn

6
00:00:12,660 --> 00:00:18,359
something you are about 50 feet too far

7
00:00:15,990 --> 00:00:19,380
to the right in any event I'm gonna get

8
00:00:18,359 --> 00:00:20,939
started because I find this interesting

9
00:00:19,380 --> 00:00:24,448
so fact that Dave said it's interesting

10
00:00:20,939 --> 00:00:25,859
that's a good start for me i'm a former

11
00:00:24,449 --> 00:00:27,330
while i'm still a consultant i'm a

12
00:00:25,859 --> 00:00:28,680
former big for consultant so i have to

13
00:00:27,330 --> 00:00:30,150
have slide decks with agendas in them

14
00:00:28,680 --> 00:00:31,980
because that way i know what i'm going

15
00:00:30,150 --> 00:00:33,719
to be doing and you can follow along but

16
00:00:31,980 --> 00:00:35,160
long story short I'm going to talk a

17
00:00:33,719 --> 00:00:36,390
very very briefly about myself that's

18
00:00:35,160 --> 00:00:39,000
probably the most boring part about this

19
00:00:36,390 --> 00:00:41,040
presentation I'm going to go through why

20
00:00:39,000 --> 00:00:43,050
this is important aside because David

21
00:00:41,040 --> 00:00:44,219
Gowan said so well do get some artifacts

22
00:00:43,050 --> 00:00:46,169
will talk about some triage and then

23
00:00:44,219 --> 00:00:48,450
hopefully there will be at least a

24
00:00:46,170 --> 00:00:49,920
question and if the question is can you

25
00:00:48,450 --> 00:00:52,739
please get off the stage now then I'll

26
00:00:49,920 --> 00:00:53,820
be happily to feel that one too so that

27
00:00:52,739 --> 00:00:56,459
being said I'm going to start off with

28
00:00:53,820 --> 00:00:58,170
again the boring content Who am I as

29
00:00:56,460 --> 00:00:59,670
David mentioned my name is Matt wrongly

30
00:00:58,170 --> 00:01:01,559
I'm currently a senior consultant with

31
00:00:59,670 --> 00:01:03,510
mandiant I will be dead honest with you

32
00:01:01,559 --> 00:01:05,220
all to share a slide deck template with

33
00:01:03,510 --> 00:01:06,600
Devin Kerr is probably one of the

34
00:01:05,220 --> 00:01:08,460
scariest things I've ever had to do in

35
00:01:06,600 --> 00:01:10,559
my life because people walking out of

36
00:01:08,460 --> 00:01:11,939
his presentation yesterday still

37
00:01:10,560 --> 00:01:13,290
couldn't get their jaws off the floor

38
00:01:11,939 --> 00:01:16,039
and then I'm like all right well I'm

39
00:01:13,290 --> 00:01:18,840
gonna try to live up to this slide deck

40
00:01:16,040 --> 00:01:20,460
I've got years and years of experience

41
00:01:18,840 --> 00:01:21,600
with the focus on data breaches instant

42
00:01:20,460 --> 00:01:23,070
response I've done some network security

43
00:01:21,600 --> 00:01:24,839
monitoring a little bit of threat

44
00:01:23,070 --> 00:01:25,889
intelligence and kind of all that I was

45
00:01:24,840 --> 00:01:28,650
a consultant I've touched a lot of

46
00:01:25,890 --> 00:01:31,650
things the client list I've worked for

47
00:01:28,650 --> 00:01:34,470
is small you know dozen person shops all

48
00:01:31,650 --> 00:01:36,869
the way up to a multinational 180,000

49
00:01:34,470 --> 00:01:38,429
for global fortune 50 so I've kind of

50
00:01:36,869 --> 00:01:41,189
seen the gamut of all different sizes of

51
00:01:38,430 --> 00:01:43,710
networks I'm a huge fan of open source

52
00:01:41,189 --> 00:01:44,789
forensic tools if I can build it and

53
00:01:43,710 --> 00:01:47,429
script it then I'm probably going to

54
00:01:44,790 --> 00:01:49,590
give it away for free if i can and i

55
00:01:47,430 --> 00:01:52,290
also love to share I love to teach is

56
00:01:49,590 --> 00:01:54,360
anyone in here staying for 4 or 5 08 the

57
00:01:52,290 --> 00:01:55,740
rest of the course awesome i'll be your

58
00:01:54,360 --> 00:01:58,680
TA so we're going to have some fun

59
00:01:55,740 --> 00:02:00,570
learning together and while i'm learning

60
00:01:58,680 --> 00:02:02,100
i like to a help others improve and that

61
00:02:00,570 --> 00:02:03,449
really helps me improve too so there's a

62
00:02:02,100 --> 00:02:05,969
little bit of a selfish intent there but

63
00:02:03,450 --> 00:02:08,009
it's good for all of us and then also i

64
00:02:05,969 --> 00:02:10,500
tweet i have a github and i have a blog

65
00:02:08,008 --> 00:02:12,299
as david mentioned 505 forensics you can

66
00:02:10,500 --> 00:02:13,040
wrap whatever character you need at the

67
00:02:12,300 --> 00:02:15,019
front of the back

68
00:02:13,040 --> 00:02:16,400
to be able to track that again if you

69
00:02:15,019 --> 00:02:18,560
have insomnia and you're looking for a

70
00:02:16,400 --> 00:02:19,849
cure just read one of my posts it's a

71
00:02:18,560 --> 00:02:21,500
fantastic way to fall asleep at night

72
00:02:19,849 --> 00:02:24,530
and not remember what you what you just

73
00:02:21,500 --> 00:02:26,750
read so let's talk a little bit about

74
00:02:24,530 --> 00:02:28,790
why this matters this is somewhat of

75
00:02:26,750 --> 00:02:29,720
more kind of a personal opinion of why

76
00:02:28,790 --> 00:02:33,019
this matters but hopefully I can

77
00:02:29,720 --> 00:02:36,470
convince you of the same as well so to

78
00:02:33,019 --> 00:02:38,629
start no SQL to say it's new it isn't

79
00:02:36,470 --> 00:02:40,310
necessarily new it's not fair to say

80
00:02:38,629 --> 00:02:41,689
it's new because it has been around for

81
00:02:40,310 --> 00:02:43,189
a long time but I'm going to say it's

82
00:02:41,689 --> 00:02:45,078
new and the fact that people are now

83
00:02:43,189 --> 00:02:47,629
starting to notice and are starting to

84
00:02:45,079 --> 00:02:49,459
use it and and are starting to care and

85
00:02:47,629 --> 00:02:51,230
one of the barometers that I have two

86
00:02:49,459 --> 00:02:52,849
barometers that i use for how popular

87
00:02:51,230 --> 00:02:56,328
something's getting i use gardner and i

88
00:02:52,849 --> 00:02:57,619
use universities if a university

89
00:02:56,329 --> 00:02:59,180
somewhere has approved a study of

90
00:02:57,620 --> 00:03:01,310
something that means someone's got some

91
00:02:59,180 --> 00:03:03,829
merit into it unless it's a dissertation

92
00:03:01,310 --> 00:03:05,959
in which case i put it to the side and

93
00:03:03,829 --> 00:03:07,129
the other thing is if Gartner's starting

94
00:03:05,959 --> 00:03:08,150
to pay attention that means that a

95
00:03:07,129 --> 00:03:10,548
company that's built around

96
00:03:08,150 --> 00:03:11,900
investigating or surveying things has

97
00:03:10,549 --> 00:03:13,519
now said okay it's worth it for us to

98
00:03:11,900 --> 00:03:15,620
survey this so they've invested that

99
00:03:13,519 --> 00:03:16,879
money so that being said we've got

100
00:03:15,620 --> 00:03:19,340
actually a screenshot of the latest

101
00:03:16,879 --> 00:03:21,940
Gartner relational or not relational but

102
00:03:19,340 --> 00:03:23,900
database Magic Quadrant up there and

103
00:03:21,940 --> 00:03:26,419
Mongo is starting to make an impression

104
00:03:23,900 --> 00:03:28,159
you've obviously got your your favorites

105
00:03:26,419 --> 00:03:29,659
right your Oracle your essay p your

106
00:03:28,159 --> 00:03:31,668
Microsoft your IBM sitting up there in

107
00:03:29,659 --> 00:03:33,198
the top corner as the leaders but look

108
00:03:31,669 --> 00:03:35,479
at Mongo sitting nice and high in that

109
00:03:33,199 --> 00:03:37,310
challenger section it's only a matter of

110
00:03:35,479 --> 00:03:40,129
time before it either starts to cross

111
00:03:37,310 --> 00:03:41,599
the line or continues to rise and

112
00:03:40,129 --> 00:03:44,030
Challenger and then crosses a line even

113
00:03:41,599 --> 00:03:47,089
easier and it's higher up in the in the

114
00:03:44,030 --> 00:03:49,489
column there so to say mongos not a

115
00:03:47,090 --> 00:03:50,989
threat from a market share point of view

116
00:03:49,489 --> 00:03:53,060
is I think becoming an understatement or

117
00:03:50,989 --> 00:03:54,349
oral I so it's going to get important

118
00:03:53,060 --> 00:03:56,870
and as David said we're going to take a

119
00:03:54,349 --> 00:03:59,089
look at why Mongo becoming a market

120
00:03:56,870 --> 00:04:01,359
share in database systems is a horrible

121
00:03:59,090 --> 00:04:03,739
horrible environment for the blue team

122
00:04:01,359 --> 00:04:05,329
awesome if you're a Red Team ER and I

123
00:04:03,739 --> 00:04:07,040
actually gave a discussion on no SQL

124
00:04:05,329 --> 00:04:08,810
injections at Derby con last year and it

125
00:04:07,040 --> 00:04:09,798
was great from a red team point of view

126
00:04:08,810 --> 00:04:12,139
because it's like hey here's how you

127
00:04:09,799 --> 00:04:15,109
pone the crap out of everything and the

128
00:04:12,139 --> 00:04:17,509
logs are sick but we'll get into that a

129
00:04:15,109 --> 00:04:19,728
couple other reasons it's very very very

130
00:04:17,509 --> 00:04:21,650
easy to deploy if anyone here is running

131
00:04:19,728 --> 00:04:24,500
ubuntu there's a simple command on

132
00:04:21,649 --> 00:04:26,330
MongoDB it's to command line and boom

133
00:04:24,500 --> 00:04:30,349
you've got Mongo installed ready to rock

134
00:04:26,330 --> 00:04:32,628
roll it's that simple it's web app

135
00:04:30,349 --> 00:04:35,900
friendly very very very easy to develop

136
00:04:32,629 --> 00:04:37,819
whatever your app maybe and I'm starting

137
00:04:35,900 --> 00:04:39,948
to channel a lot of my Silicon Valley

138
00:04:37,819 --> 00:04:41,599
watching here where I think of people

139
00:04:39,949 --> 00:04:43,159
just sitting around a room developing

140
00:04:41,599 --> 00:04:44,900
web apps for whatever ridiculous reason

141
00:04:43,159 --> 00:04:47,270
they need somewhere to store all of this

142
00:04:44,900 --> 00:04:48,620
data boom no SQL it's so much easier I

143
00:04:47,270 --> 00:04:50,210
don't have to worry about a Microsoft

144
00:04:48,620 --> 00:04:52,189
sequel box I don't have to buy all this

145
00:04:50,210 --> 00:04:54,919
memory you know this massive hardware I

146
00:04:52,189 --> 00:04:56,960
can just deploy Mongo on a digital ocean

147
00:04:54,919 --> 00:04:58,539
droplet or an Amazon AWS cloud and boom

148
00:04:56,960 --> 00:05:01,698
I've got a database up and running

149
00:04:58,539 --> 00:05:03,710
there's api's out the wazoo for all this

150
00:05:01,699 --> 00:05:05,000
kind of stuff every single language

151
00:05:03,710 --> 00:05:07,878
you've ever written in has got an API

152
00:05:05,000 --> 00:05:09,500
written form it's very very very simple

153
00:05:07,879 --> 00:05:11,090
to say well I'm a Python coder now I

154
00:05:09,500 --> 00:05:13,520
need to interact with Mongo okay boom

155
00:05:11,090 --> 00:05:14,659
just use Mongoose I write in Ruby and

156
00:05:13,520 --> 00:05:16,159
now I need to interact with elastic

157
00:05:14,659 --> 00:05:17,539
search okay just download the elastic

158
00:05:16,159 --> 00:05:19,370
search gym it's all there sitting and

159
00:05:17,539 --> 00:05:21,289
waiting so because it's all so easy

160
00:05:19,370 --> 00:05:22,909
we've had a lot of players come out of

161
00:05:21,289 --> 00:05:24,469
this as well Mongo is definitely one of

162
00:05:22,909 --> 00:05:27,020
the probably the more name worthy wants

163
00:05:24,469 --> 00:05:29,719
the biggest ones elastic now elastic

164
00:05:27,020 --> 00:05:31,159
formerly elasticsearch is another very

165
00:05:29,719 --> 00:05:32,479
very big player and this just because

166
00:05:31,159 --> 00:05:35,629
they just keep growing and growing in

167
00:05:32,479 --> 00:05:37,909
size and their client base is enormous

168
00:05:35,629 --> 00:05:40,159
couchbase Cassandra and I thrown Hadoop

169
00:05:37,909 --> 00:05:42,770
up here as well because Hadoop while it

170
00:05:40,159 --> 00:05:44,779
is a massive distributed file system

171
00:05:42,770 --> 00:05:46,279
there is also a database element to it

172
00:05:44,779 --> 00:05:48,770
as well that sits on top and it's not

173
00:05:46,279 --> 00:05:49,849
necessarily SQL focused luckily we're

174
00:05:48,770 --> 00:05:51,169
not going to dive too much into Hadoop

175
00:05:49,849 --> 00:05:53,330
and here but Hadoop's another

176
00:05:51,169 --> 00:05:55,068
fascinating operating system and the

177
00:05:53,330 --> 00:05:57,020
reason Hadoop really scares me from a no

178
00:05:55,069 --> 00:05:59,240
SQL point of view and I can share a

179
00:05:57,020 --> 00:06:00,680
quick anecdote a couple months ago I was

180
00:05:59,240 --> 00:06:02,779
asked to while I was scoping out an

181
00:06:00,680 --> 00:06:04,310
engagement for a very very very

182
00:06:02,779 --> 00:06:05,719
significant client that every single

183
00:06:04,310 --> 00:06:07,460
person here would know the name like the

184
00:06:05,719 --> 00:06:10,009
back of their hand and the basic problem

185
00:06:07,460 --> 00:06:12,198
was we have a six petabyte Hadoop

186
00:06:10,009 --> 00:06:14,330
cluster okay what's in it we have no

187
00:06:12,199 --> 00:06:15,770
idea no no that's funny no seriously

188
00:06:14,330 --> 00:06:17,659
what's in it you had any type of schema

189
00:06:15,770 --> 00:06:19,818
any documentation any access controls

190
00:06:17,659 --> 00:06:21,409
logins username anything oh we have we

191
00:06:19,819 --> 00:06:24,259
have usernames and passwords but

192
00:06:21,409 --> 00:06:26,659
everyone has admin readwrite access okay

193
00:06:24,259 --> 00:06:28,729
to six petabytes of highly highly

194
00:06:26,659 --> 00:06:31,009
sensitive financial information yeah can

195
00:06:28,729 --> 00:06:33,409
you help okay all right I don't know

196
00:06:31,009 --> 00:06:34,550
we're in the development chain that came

197
00:06:33,409 --> 00:06:36,380
along that it was like just throw

198
00:06:34,550 --> 00:06:38,120
everything into this giant bucket and

199
00:06:36,380 --> 00:06:39,770
then we'll deal with it later but it's

200
00:06:38,120 --> 00:06:43,430
it's a very very legitimate problem

201
00:06:39,770 --> 00:06:44,479
or having who's using this David

202
00:06:43,430 --> 00:06:46,340
mentioned there are some sensitive

203
00:06:44,479 --> 00:06:48,109
people using it these aren't small

204
00:06:46,340 --> 00:06:52,460
mom-and-pop companies these aren't

205
00:06:48,110 --> 00:06:53,870
startups ADP a very very sensitive

206
00:06:52,460 --> 00:06:56,750
information that I hope to god they've

207
00:06:53,870 --> 00:06:58,190
secured inside their mongodb the weather

208
00:06:56,750 --> 00:07:01,460
channel if anyone's looking at stealing

209
00:06:58,190 --> 00:07:04,639
cloud forecasts metlife very important

210
00:07:01,460 --> 00:07:06,710
especially with the state of information

211
00:07:04,639 --> 00:07:08,780
security and healthcare / insurance in

212
00:07:06,710 --> 00:07:10,128
this country right now the city of

213
00:07:08,780 --> 00:07:11,840
Chicago because I know there's some

214
00:07:10,129 --> 00:07:12,949
Chicago people in here so you know i'm

215
00:07:11,840 --> 00:07:14,810
not sure what they're storing in there

216
00:07:12,949 --> 00:07:17,960
but hey tax records can be interesting

217
00:07:14,810 --> 00:07:20,330
to elasticsearch has netflix target

218
00:07:17,960 --> 00:07:21,739
linkedin opentable github i know mr.

219
00:07:20,330 --> 00:07:23,000
Roberts just talk next door and I know

220
00:07:21,740 --> 00:07:25,550
they're using lasting starts pretty

221
00:07:23,000 --> 00:07:26,990
heavily but luckily I'm assuming based

222
00:07:25,550 --> 00:07:29,389
on that they're there a smart

223
00:07:26,990 --> 00:07:31,909
environment couchbase counts the senate

224
00:07:29,389 --> 00:07:34,729
BMW starbucks and then Hadoop's got ebay

225
00:07:31,909 --> 00:07:36,770
expedia kayak samsung so again very very

226
00:07:34,729 --> 00:07:38,990
very big companies are saying we're

227
00:07:36,770 --> 00:07:40,549
going to use these stores and it's you

228
00:07:38,990 --> 00:07:43,039
know going to only a point in time

229
00:07:40,550 --> 00:07:44,300
before your client or your next company

230
00:07:43,039 --> 00:07:45,500
says okay we're going to drop this in

231
00:07:44,300 --> 00:07:47,810
and if security is not wrapped around

232
00:07:45,500 --> 00:07:49,880
these your data is vulnerable from the

233
00:07:47,810 --> 00:07:51,620
get-go it's not like oh at some point we

234
00:07:49,880 --> 00:07:53,569
did this upgrade and now this

235
00:07:51,620 --> 00:07:55,310
vulnerability came about the default

236
00:07:53,569 --> 00:07:58,219
install is the definition of

237
00:07:55,310 --> 00:07:59,750
vulnerability because even with all this

238
00:07:58,219 --> 00:08:02,120
support even with all these companies

239
00:07:59,750 --> 00:08:04,580
the default still sucks kind of like we

240
00:08:02,120 --> 00:08:06,349
were talking about before it's very very

241
00:08:04,580 --> 00:08:08,960
easy to code it's very very easy to get

242
00:08:06,349 --> 00:08:10,639
data into data accessibility has become

243
00:08:08,960 --> 00:08:12,138
the primary reason you use these the

244
00:08:10,639 --> 00:08:14,210
primary reason is not to make the most

245
00:08:12,139 --> 00:08:15,830
secure MongoDB in the world it's to make

246
00:08:14,210 --> 00:08:17,840
the app that gets the user on their

247
00:08:15,830 --> 00:08:20,060
phone the information the fastest so

248
00:08:17,840 --> 00:08:21,919
because of that we've got apps that are

249
00:08:20,060 --> 00:08:23,900
built data security takes a backseat and

250
00:08:21,919 --> 00:08:26,359
it's not a primary consideration there's

251
00:08:23,900 --> 00:08:27,409
actually a um I don't have a screenshot

252
00:08:26,360 --> 00:08:28,789
of it but when we get we'll talk a

253
00:08:27,409 --> 00:08:30,110
little about the Mongo web interface

254
00:08:28,789 --> 00:08:32,598
when you try to access the web interface

255
00:08:30,110 --> 00:08:34,969
it comes back and it says you know your

256
00:08:32,599 --> 00:08:36,680
restful api is not enabled also please

257
00:08:34,969 --> 00:08:38,510
think about securing this port on your

258
00:08:36,679 --> 00:08:40,819
firewall that's it that's like the best

259
00:08:38,510 --> 00:08:43,429
mention of security that you'll get in a

260
00:08:40,820 --> 00:08:44,870
default install and last but not least

261
00:08:43,429 --> 00:08:46,939
and this is probably one of the most

262
00:08:44,870 --> 00:08:48,050
exciting parts of again one of my

263
00:08:46,940 --> 00:08:49,910
barometers of success regions

264
00:08:48,050 --> 00:08:51,920
universities and a research they put

265
00:08:49,910 --> 00:08:53,180
into it we're now seeing reports being

266
00:08:51,920 --> 00:08:55,099
published about internet

267
00:08:53,180 --> 00:08:57,290
mongodb s with little or no

268
00:08:55,100 --> 00:08:59,330
authentication there's a couple guys who

269
00:08:57,290 --> 00:09:00,880
have been talking to Def Con and then

270
00:08:59,330 --> 00:09:03,260
different security cons for a while

271
00:09:00,880 --> 00:09:05,810
Russell GU tarini out of Nashville and

272
00:09:03,260 --> 00:09:07,130
also being child of Tufts University

273
00:09:05,810 --> 00:09:09,170
they've done some work on this kind of

274
00:09:07,130 --> 00:09:11,540
stuff but the probably the most

275
00:09:09,170 --> 00:09:12,979
recognizable report is three students

276
00:09:11,540 --> 00:09:14,569
from a university in Germany published a

277
00:09:12,980 --> 00:09:17,300
report in January this year they found

278
00:09:14,570 --> 00:09:19,520
nearly 40,000 mongodb s openly available

279
00:09:17,300 --> 00:09:21,290
on the internet no authentication no

280
00:09:19,520 --> 00:09:22,670
passwords no credentials so they said

281
00:09:21,290 --> 00:09:24,170
all right let's do just a really quick

282
00:09:22,670 --> 00:09:26,390
sampling of the data that's inside and

283
00:09:24,170 --> 00:09:27,709
see how bad this problem is credit cards

284
00:09:26,390 --> 00:09:29,420
Social Security government

285
00:09:27,709 --> 00:09:31,219
identification numbers names addresses

286
00:09:29,420 --> 00:09:32,689
phone numbers if you can think about

287
00:09:31,220 --> 00:09:34,459
data you wouldn't want someone to have a

288
00:09:32,690 --> 00:09:37,220
hand on they were able to find it

289
00:09:34,459 --> 00:09:38,779
amongst its population and it got so

290
00:09:37,220 --> 00:09:40,100
great that the developers at showed and

291
00:09:38,779 --> 00:09:41,959
said you know what let's write a Mongo

292
00:09:40,100 --> 00:09:43,940
filter and let's make mutt let's let's

293
00:09:41,959 --> 00:09:45,050
let's write in for these ports that we

294
00:09:43,940 --> 00:09:46,580
know about so now you can just go to

295
00:09:45,050 --> 00:09:48,310
Shanna and perform the same search as

296
00:09:46,580 --> 00:09:51,500
yourself you don't need to do a massive

297
00:09:48,310 --> 00:09:54,439
port scan so it's a little bit easier to

298
00:09:51,500 --> 00:09:55,760
find these but from a forensic point of

299
00:09:54,440 --> 00:09:58,430
view right from the for the blue team

300
00:09:55,760 --> 00:09:59,480
errs in the crowd as the information

301
00:09:58,430 --> 00:10:01,040
security industry starts to pay

302
00:09:59,480 --> 00:10:02,240
attention and as the red teamers start

303
00:10:01,040 --> 00:10:03,589
to pay attention and start to build

304
00:10:02,240 --> 00:10:05,630
statistics about how vulnerable

305
00:10:03,589 --> 00:10:07,040
something is that's when our ears should

306
00:10:05,630 --> 00:10:09,080
start perking up and we just say okay

307
00:10:07,040 --> 00:10:10,730
it's only a matter of time then before

308
00:10:09,080 --> 00:10:12,830
this side starts to overweight and then

309
00:10:10,730 --> 00:10:14,540
it all just topples over I am fully

310
00:10:12,830 --> 00:10:16,520
expecting with the next few years to run

311
00:10:14,540 --> 00:10:18,800
into a breach and and the environment is

312
00:10:16,520 --> 00:10:20,779
all of our data is in Mongo everyone

313
00:10:18,800 --> 00:10:22,189
here uses a mac we've all got file

314
00:10:20,779 --> 00:10:23,360
personal file volt across the

315
00:10:22,190 --> 00:10:26,270
environment and all of our servers

316
00:10:23,360 --> 00:10:28,060
hittin AWS all of this awesome dead

317
00:10:26,270 --> 00:10:30,439
boxer ends X no longer matters because

318
00:10:28,060 --> 00:10:32,420
everything is in the cloud or everything

319
00:10:30,440 --> 00:10:33,830
is nowhere near where I am so we've got

320
00:10:32,420 --> 00:10:36,290
to figure out a way to work with these

321
00:10:33,830 --> 00:10:37,520
differently so that being said we're

322
00:10:36,290 --> 00:10:39,579
going to focus on Mongo we're going to

323
00:10:37,520 --> 00:10:41,900
take a look at some Mongo artifacts or

324
00:10:39,579 --> 00:10:43,400
for what they are I should have put

325
00:10:41,900 --> 00:10:45,770
quotes around artifacts just to make

326
00:10:43,400 --> 00:10:47,449
that point and then we'll also talk

327
00:10:45,770 --> 00:10:49,130
about from a forensic point of view what

328
00:10:47,450 --> 00:10:50,750
can I do in the absence of artifacts and

329
00:10:49,130 --> 00:10:54,380
hopefully that's something that carries

330
00:10:50,750 --> 00:10:55,940
across more than just MongoDB so the

331
00:10:54,380 --> 00:10:57,680
first place I'd recommend if you find

332
00:10:55,940 --> 00:10:59,450
yourself looking at MongoDB is the

333
00:10:57,680 --> 00:11:01,579
config file this is actually super

334
00:10:59,450 --> 00:11:03,200
useful for like proxy configurations

335
00:11:01,579 --> 00:11:04,550
firewalls anything that has a config

336
00:11:03,200 --> 00:11:06,380
file is going to kind of dictate the who

337
00:11:04,550 --> 00:11:07,040
what why where when and how Mongo is

338
00:11:06,380 --> 00:11:09,709
going to be the first place

339
00:11:07,040 --> 00:11:11,420
to go it's really simple if you've got a

340
00:11:09,709 --> 00:11:13,550
default install and that's kind of the

341
00:11:11,420 --> 00:11:15,139
blanket preface for this is to this is

342
00:11:13,550 --> 00:11:16,790
all just off of a default install there

343
00:11:15,139 --> 00:11:18,560
are very secure Mongo instances out

344
00:11:16,790 --> 00:11:20,870
there this is not a case study into

345
00:11:18,560 --> 00:11:23,810
those but it's going to tell you is

346
00:11:20,870 --> 00:11:25,850
logging enabled if it is where what are

347
00:11:23,810 --> 00:11:27,319
we logging and how is it locked you know

348
00:11:25,850 --> 00:11:29,480
how are my logs split up is there a

349
00:11:27,319 --> 00:11:31,639
divider they separated by day by our bye

350
00:11:29,480 --> 00:11:34,870
week however maybe is there actually any

351
00:11:31,639 --> 00:11:36,860
security at all the by default all the

352
00:11:34,870 --> 00:11:40,550
authentication is turned off of course

353
00:11:36,860 --> 00:11:42,920
and then access what's my what IP

354
00:11:40,550 --> 00:11:45,439
address is my Mongo bound to what port

355
00:11:42,920 --> 00:11:48,410
am I using again the default bind is

356
00:11:45,440 --> 00:11:50,269
localhost and the default port is 270 17

357
00:11:48,410 --> 00:11:51,620
it's actually commented out but you can

358
00:11:50,269 --> 00:11:53,509
change it if you want and that may be

359
00:11:51,620 --> 00:11:55,220
one of the simplest changes to secure

360
00:11:53,509 --> 00:11:57,410
something like a default port scan and

361
00:11:55,220 --> 00:11:59,149
then also is the web server enable as

362
00:11:57,410 --> 00:12:01,969
well and that's going to just either

363
00:11:59,149 --> 00:12:03,860
open up another door of horrible

364
00:12:01,970 --> 00:12:05,149
vulnerability access or it's going to

365
00:12:03,860 --> 00:12:06,500
give you kind of the clearance to say ok

366
00:12:05,149 --> 00:12:09,470
there's at least one part that I know is

367
00:12:06,500 --> 00:12:11,690
not open so that kind of helps out so on

368
00:12:09,470 --> 00:12:13,339
top of kind of examining the log file

369
00:12:11,690 --> 00:12:15,019
one of the other artifacts I look to

370
00:12:13,339 --> 00:12:16,639
look at is ok once i get to the config

371
00:12:15,019 --> 00:12:18,199
and i go to the logs what's actually in

372
00:12:16,639 --> 00:12:20,029
the logs what's actually stored there

373
00:12:18,199 --> 00:12:22,099
what kind of get out of them so i

374
00:12:20,029 --> 00:12:23,870
started going through crud operations

375
00:12:22,100 --> 00:12:25,760
and for anyone who hasn't done any DB

376
00:12:23,870 --> 00:12:28,250
research crud is create read update and

377
00:12:25,760 --> 00:12:30,079
delete it's like the four basic database

378
00:12:28,250 --> 00:12:31,819
operations that you have in some way or

379
00:12:30,079 --> 00:12:33,949
some way shape or form you're

380
00:12:31,819 --> 00:12:35,719
interacting with data so I started out

381
00:12:33,949 --> 00:12:37,699
with creating just a simple record i

382
00:12:35,720 --> 00:12:40,100
created a database called testy test

383
00:12:37,699 --> 00:12:42,199
data and we inserted a post and it was

384
00:12:40,100 --> 00:12:45,740
just like my first post this is like the

385
00:12:42,199 --> 00:12:47,209
default Mongo test and take a look kind

386
00:12:45,740 --> 00:12:50,209
of great log output if we're on Mongo

387
00:12:47,209 --> 00:12:52,849
version 2.x oops sorry if we're in Mongo

388
00:12:50,209 --> 00:12:55,130
2x we've actually got a log entry that

389
00:12:52,850 --> 00:12:56,660
talks about okay what was inserted where

390
00:12:55,130 --> 00:12:58,610
was it inserted and kind of some

391
00:12:56,660 --> 00:13:01,250
metadata around that but look at version

392
00:12:58,610 --> 00:13:03,620
3 X all I get is that a new data file

393
00:13:01,250 --> 00:13:05,990
was created from my database so I was

394
00:13:03,620 --> 00:13:07,670
lucky because the used test data created

395
00:13:05,990 --> 00:13:09,769
the test data collection or sorry the

396
00:13:07,670 --> 00:13:11,509
test data database if that was already

397
00:13:09,769 --> 00:13:14,810
created I wouldn't even have this entry

398
00:13:11,509 --> 00:13:16,760
I would just have ok boom data was put

399
00:13:14,810 --> 00:13:18,800
the date date something happened with

400
00:13:16,760 --> 00:13:20,510
connection one let's take a look at

401
00:13:18,800 --> 00:13:21,979
reading and this is where I

402
00:13:20,510 --> 00:13:23,090
to kind of ask for like a silent follow

403
00:13:21,980 --> 00:13:24,800
along I don't have anyone here seen

404
00:13:23,090 --> 00:13:25,790
spaceballs or any other kind of pop

405
00:13:24,800 --> 00:13:27,410
culture references I'm gonna throw you

406
00:13:25,790 --> 00:13:30,410
in here but let's take a look at reading

407
00:13:27,410 --> 00:13:32,150
let's do a simple find one let me hit a

408
00:13:30,410 --> 00:13:34,189
collection let me just find one record

409
00:13:32,150 --> 00:13:36,199
this is like a random anything within

410
00:13:34,190 --> 00:13:39,800
their find one so we got back my new

411
00:13:36,200 --> 00:13:43,400
blog post and guess what nothing there

412
00:13:39,800 --> 00:13:45,709
ain't found a thing there's nothing in

413
00:13:43,400 --> 00:13:47,780
the logs there at this point the end of

414
00:13:45,710 --> 00:13:50,590
my log is still the creation statement

415
00:13:47,780 --> 00:13:53,870
let's look at updating let's take a post

416
00:13:50,590 --> 00:13:55,760
which again is or sorry let's let's make

417
00:13:53,870 --> 00:13:56,840
a variable called post which is the blog

418
00:13:55,760 --> 00:13:58,610
post I just went through we're going to

419
00:13:56,840 --> 00:14:00,080
do a random fine and we're going to drop

420
00:13:58,610 --> 00:14:01,340
in comments we're going to create two

421
00:14:00,080 --> 00:14:03,020
comments one of them this is a comment

422
00:14:01,340 --> 00:14:04,370
and this is another comment and we're

423
00:14:03,020 --> 00:14:05,840
now going to take that post and update

424
00:14:04,370 --> 00:14:07,520
it right this is simple it's just plain

425
00:14:05,840 --> 00:14:09,710
text but I would love if this was a list

426
00:14:07,520 --> 00:14:11,300
of like ACH transfer instructions and I

427
00:14:09,710 --> 00:14:13,100
was inserting a rowdy number in an

428
00:14:11,300 --> 00:14:14,359
account number you would think that kind

429
00:14:13,100 --> 00:14:17,630
of important transfer would be logged

430
00:14:14,360 --> 00:14:19,910
right nope nothing absolutely nothing

431
00:14:17,630 --> 00:14:22,370
our logs are still blank at the end so

432
00:14:19,910 --> 00:14:23,870
we've read and updated and haven't done

433
00:14:22,370 --> 00:14:25,640
anything so updating is a very very

434
00:14:23,870 --> 00:14:28,880
interactive session which is not logged

435
00:14:25,640 --> 00:14:31,100
at all deleting the leadings god be

436
00:14:28,880 --> 00:14:33,080
recorded right you're removing data from

437
00:14:31,100 --> 00:14:35,090
the environment maybe possibly crucial

438
00:14:33,080 --> 00:14:37,460
operational data so let's remove that

439
00:14:35,090 --> 00:14:40,100
post that we've been working with no

440
00:14:37,460 --> 00:14:43,580
whole lot of nothing nothing that logs

441
00:14:40,100 --> 00:14:45,860
so basic DB operations in Mongo only one

442
00:14:43,580 --> 00:14:48,290
operation is recorded and that's to

443
00:14:45,860 --> 00:14:52,400
create and not only is it only recorded

444
00:14:48,290 --> 00:14:54,469
as a collection or a DB creation event

445
00:14:52,400 --> 00:14:56,750
it doesn't give us any made it metadata

446
00:14:54,470 --> 00:14:58,280
about what was in their version 2.x

447
00:14:56,750 --> 00:15:00,170
which it does so I hate to say that a

448
00:14:58,280 --> 00:15:02,510
new version made the logging worse but

449
00:15:00,170 --> 00:15:04,520
you know one of the things that I like

450
00:15:02,510 --> 00:15:06,290
about these two screenshots here is you

451
00:15:04,520 --> 00:15:08,030
can tell very quickly about how these

452
00:15:06,290 --> 00:15:10,459
logs they're written for developers

453
00:15:08,030 --> 00:15:12,380
they're written for how fast did this

454
00:15:10,460 --> 00:15:13,970
take what kind of benchmarks can I get

455
00:15:12,380 --> 00:15:15,830
out of these they're not written for a

456
00:15:13,970 --> 00:15:17,510
security point of view whatsoever

457
00:15:15,830 --> 00:15:18,710
they're not written for us investigators

458
00:15:17,510 --> 00:15:19,580
to look at these and say okay I need to

459
00:15:18,710 --> 00:15:21,170
figure out what the heck happened

460
00:15:19,580 --> 00:15:22,610
between this time frame instead it's

461
00:15:21,170 --> 00:15:24,349
written well you guys can write really

462
00:15:22,610 --> 00:15:26,330
clean code that's that's the best I got

463
00:15:24,350 --> 00:15:29,390
out of this log file that being said

464
00:15:26,330 --> 00:15:31,550
we're investigators we're detectives so

465
00:15:29,390 --> 00:15:32,970
we don't stop when the logs have nothing

466
00:15:31,550 --> 00:15:36,089
we keep looking for more

467
00:15:32,970 --> 00:15:38,529
but to summarize default logging sucks

468
00:15:36,089 --> 00:15:40,510
that kind of highlights the importance

469
00:15:38,529 --> 00:15:42,430
of the config bottle it's very very easy

470
00:15:40,510 --> 00:15:43,569
now to get to a Mongo instance and load

471
00:15:42,430 --> 00:15:44,709
that config file and you can almost

472
00:15:43,570 --> 00:15:47,470
predict what type of logging you're

473
00:15:44,709 --> 00:15:49,479
going to have so our default port is 270

474
00:15:47,470 --> 00:15:51,699
17 that's going to help tie external

475
00:15:49,480 --> 00:15:53,380
logs into what we're seeing we've now

476
00:15:51,699 --> 00:15:54,969
got a port we can filter on or a port we

477
00:15:53,380 --> 00:15:56,439
can start to search for do we have

478
00:15:54,970 --> 00:15:57,610
authentication in Mongo that's gonna be

479
00:15:56,440 --> 00:15:59,230
another great artifact to look at as

480
00:15:57,610 --> 00:16:01,089
well because that authentication may be

481
00:15:59,230 --> 00:16:03,010
pulling from another source so that

482
00:16:01,089 --> 00:16:04,750
maybe another log we can look at and see

483
00:16:03,010 --> 00:16:06,459
when someone may have logged in or when

484
00:16:04,750 --> 00:16:08,649
the password was issued at some point

485
00:16:06,459 --> 00:16:10,268
for an account but again because we're

486
00:16:08,649 --> 00:16:12,130
detectives we know that if we can't hit

487
00:16:10,269 --> 00:16:13,779
the data source then let's see if we can

488
00:16:12,130 --> 00:16:15,339
hit either what's around the data source

489
00:16:13,779 --> 00:16:20,560
or let's pull what we can out of the

490
00:16:15,339 --> 00:16:23,050
limit data we've got there is so while

491
00:16:20,560 --> 00:16:25,239
this is not a log optimization you can

492
00:16:23,050 --> 00:16:27,399
go back to the config file and there is

493
00:16:25,240 --> 00:16:28,389
ways to you can get as verbose as like

494
00:16:27,399 --> 00:16:31,980
you can get millisecond by millisecond

495
00:16:28,389 --> 00:16:34,180
updates I have yet to see it turned on

496
00:16:31,980 --> 00:16:35,470
unfortunately so there is a way so

497
00:16:34,180 --> 00:16:37,000
that's kind of like why I like the

498
00:16:35,470 --> 00:16:38,769
config file because the config file is

499
00:16:37,000 --> 00:16:40,779
going to say Oh they've got extreme

500
00:16:38,769 --> 00:16:43,660
verbosity turned on and it's sent out to

501
00:16:40,779 --> 00:16:44,920
syslog and the config file is going to

502
00:16:43,660 --> 00:16:46,000
help tell you that so it's you're going

503
00:16:44,920 --> 00:16:47,410
to tell you where to go or it's going to

504
00:16:46,000 --> 00:16:49,829
tell you what content you may have in

505
00:16:47,410 --> 00:16:49,829
log file

506
00:16:58,380 --> 00:17:02,520
yeah something stored something's there

507
00:17:00,630 --> 00:17:03,810
for you oh and then there's other

508
00:17:02,520 --> 00:17:05,520
artifacts you can look at as well so I

509
00:17:03,810 --> 00:17:06,569
don't want to dislodge files completely

510
00:17:05,520 --> 00:17:08,849
because there actually is some useful

511
00:17:06,569 --> 00:17:11,280
information in there the first one being

512
00:17:08,849 --> 00:17:12,119
user sessions so upon connections and I

513
00:17:11,280 --> 00:17:13,829
don't know if anyone's all's in the

514
00:17:12,119 --> 00:17:15,839
earlier logs users are actually assigned

515
00:17:13,829 --> 00:17:18,629
an ID this is me logging in from

516
00:17:15,839 --> 00:17:20,698
localhost my localhost i'm given ID 1

517
00:17:18,630 --> 00:17:22,440
anything i do from that point on is

518
00:17:20,699 --> 00:17:24,270
going to be assigned to a con one flag

519
00:17:22,440 --> 00:17:26,010
so there is a way to actually track user

520
00:17:24,270 --> 00:17:27,990
activity despite the limited information

521
00:17:26,010 --> 00:17:31,020
that you get so this was actually the

522
00:17:27,990 --> 00:17:33,030
insert statement I sorry to create

523
00:17:31,020 --> 00:17:35,370
statement so while we know that was

524
00:17:33,030 --> 00:17:36,810
logged you can see that I did something

525
00:17:35,370 --> 00:17:38,280
to the DB and you can see that it's

526
00:17:36,810 --> 00:17:39,570
related to my IP you can see it's

527
00:17:38,280 --> 00:17:41,520
related to the port I connected with and

528
00:17:39,570 --> 00:17:43,260
it's related to my connection status we

529
00:17:41,520 --> 00:17:45,210
just can't determine what exactly it was

530
00:17:43,260 --> 00:17:47,700
I did while I was there that being said

531
00:17:45,210 --> 00:17:49,290
it also is going to capture API and

532
00:17:47,700 --> 00:17:51,030
script interactions as well so this is

533
00:17:49,290 --> 00:17:53,070
actually kind of a useful little point

534
00:17:51,030 --> 00:17:54,810
um if you're hitting an AP if you're

535
00:17:53,070 --> 00:17:55,740
using an API to hit the DB again and

536
00:17:54,810 --> 00:17:57,570
again and again it's going to get very

537
00:17:55,740 --> 00:17:59,310
very noisy I've seen connections get

538
00:17:57,570 --> 00:18:01,649
into the hundreds before because you're

539
00:17:59,310 --> 00:18:04,080
just it's sequential so if we literally

540
00:18:01,650 --> 00:18:05,850
logged in and logged out of mongo for

541
00:18:04,080 --> 00:18:07,560
every once a minute for two hours we

542
00:18:05,850 --> 00:18:10,409
would have con 120 as our final

543
00:18:07,560 --> 00:18:13,169
connection so but there is a useful

544
00:18:10,410 --> 00:18:15,630
information point in there looking at

545
00:18:13,170 --> 00:18:17,610
next we also the in row data and Mongo

546
00:18:15,630 --> 00:18:19,920
can be very useful to again if it's done

547
00:18:17,610 --> 00:18:23,459
in the default so this is a very

548
00:18:19,920 --> 00:18:25,080
sensitive remote so by default Mongo

549
00:18:23,460 --> 00:18:27,330
adds an underscore ID field to every

550
00:18:25,080 --> 00:18:29,220
data entry you can specify this ID field

551
00:18:27,330 --> 00:18:30,929
if you want for whatever you know kind

552
00:18:29,220 --> 00:18:32,550
of primary key tracking you may want but

553
00:18:30,930 --> 00:18:34,050
if you don't specify one Mongo is going

554
00:18:32,550 --> 00:18:35,610
to throw it in by default here's the

555
00:18:34,050 --> 00:18:36,659
best part about this artifact and I'm

556
00:18:35,610 --> 00:18:38,399
calling an artifact because it actually

557
00:18:36,660 --> 00:18:40,260
becomes that this is a 12 bytes

558
00:18:38,400 --> 00:18:41,760
structure with reversible information

559
00:18:40,260 --> 00:18:43,710
that can become very very useful to an

560
00:18:41,760 --> 00:18:45,210
investigation the first four bytes are a

561
00:18:43,710 --> 00:18:47,070
timestamp so you can actually pull that

562
00:18:45,210 --> 00:18:48,990
out and if the idea is default you can

563
00:18:47,070 --> 00:18:50,970
see when the data was inserted so if

564
00:18:48,990 --> 00:18:52,770
you've got malicious data with a default

565
00:18:50,970 --> 00:18:54,060
ID I know when that was put in there

566
00:18:52,770 --> 00:18:55,440
that starts to help me build a window

567
00:18:54,060 --> 00:18:57,929
around when my attacker may or may not

568
00:18:55,440 --> 00:18:59,190
been interacting with the DB we've also

569
00:18:57,930 --> 00:19:01,740
the next three bites are a machine

570
00:18:59,190 --> 00:19:03,210
identifier if you've got and it's very

571
00:19:01,740 --> 00:19:04,770
easily and we'll see in a few slides

572
00:19:03,210 --> 00:19:07,800
when you line up kind of a successive

573
00:19:04,770 --> 00:19:09,870
Mongo entries it's very easy to pick out

574
00:19:07,800 --> 00:19:11,700
where the Machine identifier doesn't fit

575
00:19:09,870 --> 00:19:12,120
in where you've got the API putting

576
00:19:11,700 --> 00:19:13,470
everything

577
00:19:12,120 --> 00:19:15,360
and then boom you've got two entries

578
00:19:13,470 --> 00:19:17,460
where it just doesn't fit anymore we've

579
00:19:15,360 --> 00:19:19,110
got a 2-byte process ID which is awesome

580
00:19:17,460 --> 00:19:20,700
because now we can tie it back to a

581
00:19:19,110 --> 00:19:22,770
system process and then we've got a

582
00:19:20,700 --> 00:19:25,560
three by trend grand amount that egg

583
00:19:22,770 --> 00:19:28,410
doesn't provide much usage except if we

584
00:19:25,560 --> 00:19:30,450
have a burst of activity within a period

585
00:19:28,410 --> 00:19:32,400
of time and all of a sudden the counter

586
00:19:30,450 --> 00:19:34,020
is off you could use that as proof that

587
00:19:32,400 --> 00:19:35,490
maybe something's been deleted maybe

588
00:19:34,020 --> 00:19:36,810
something is not there that should be

589
00:19:35,490 --> 00:19:38,400
there because we're missing that injury

590
00:19:36,810 --> 00:19:40,350
and this will all make sense when we in

591
00:19:38,400 --> 00:19:43,410
a couple slides I've got a better screen

592
00:19:40,350 --> 00:19:46,080
shot of how to line that up we can also

593
00:19:43,410 --> 00:19:48,270
pull Mongo artifacts out of memory we

594
00:19:46,080 --> 00:19:50,100
can use system memory dumps to actually

595
00:19:48,270 --> 00:19:52,110
carve sessions to carve in memory data

596
00:19:50,100 --> 00:19:53,550
as you can imagine some of these tools

597
00:19:52,110 --> 00:19:56,760
are written with kind of memory

598
00:19:53,550 --> 00:19:59,430
operations or memory optimization in

599
00:19:56,760 --> 00:20:00,900
mind but not necessarily dumping the

600
00:19:59,430 --> 00:20:02,220
Mongo process and then pulling

601
00:20:00,900 --> 00:20:04,080
everything we can out of there instead

602
00:20:02,220 --> 00:20:06,000
we can use what we know about Mongo and

603
00:20:04,080 --> 00:20:07,080
use that to craft our searches so we

604
00:20:06,000 --> 00:20:08,820
know every entry is going to have an

605
00:20:07,080 --> 00:20:10,889
underscore ID field whether it's custom

606
00:20:08,820 --> 00:20:12,570
or not that's an indicator for us we

607
00:20:10,890 --> 00:20:14,280
know that mangoes stored in JSON so we

608
00:20:12,570 --> 00:20:16,350
can do a JSON search and we also know

609
00:20:14,280 --> 00:20:17,790
that crud commands have certain

610
00:20:16,350 --> 00:20:20,490
structures so it's going to be DB

611
00:20:17,790 --> 00:20:22,470
collection insert fine one remove

612
00:20:20,490 --> 00:20:24,840
whatever may be so knowing what we know

613
00:20:22,470 --> 00:20:26,880
we can dump strings and we can look for

614
00:20:24,840 --> 00:20:29,010
what we expect to be there so this is

615
00:20:26,880 --> 00:20:31,110
the same machine and this was a script

616
00:20:29,010 --> 00:20:33,300
that I wrote that inserted 500 entries

617
00:20:31,110 --> 00:20:35,250
and it did just numbers sequentially and

618
00:20:33,300 --> 00:20:36,990
it just dropped him in I never viewed

619
00:20:35,250 --> 00:20:38,490
this in the output it was just data that

620
00:20:36,990 --> 00:20:40,680
was thrown in a Mongo I wrote the script

621
00:20:38,490 --> 00:20:42,690
waited 10 minutes did some activity on

622
00:20:40,680 --> 00:20:44,280
the machine and then dumped memory and

623
00:20:42,690 --> 00:20:46,080
then ran shrinks through it and I just

624
00:20:44,280 --> 00:20:48,240
did a search for the ID field well

625
00:20:46,080 --> 00:20:50,040
luckily I was able to pull back all of

626
00:20:48,240 --> 00:20:51,900
the different or not all but I was able

627
00:20:50,040 --> 00:20:53,760
to pull back a large amount of the

628
00:20:51,900 --> 00:20:55,680
strings that I had inserted in there

629
00:20:53,760 --> 00:20:57,540
without any log entry or without any

630
00:20:55,680 --> 00:20:59,370
console view and whatsoever and if you

631
00:20:57,540 --> 00:21:01,200
take a look you can see the timestamps

632
00:20:59,370 --> 00:21:02,939
in the red box the machine ID and

633
00:21:01,200 --> 00:21:04,650
process idea what I really like to hone

634
00:21:02,940 --> 00:21:06,900
in on if i'm looking at sequential datas

635
00:21:04,650 --> 00:21:08,400
it'd be very easy to pick an anomaly out

636
00:21:06,900 --> 00:21:10,410
of that list when you look at it in this

637
00:21:08,400 --> 00:21:11,970
context it's very easy to see ho on one

638
00:21:10,410 --> 00:21:13,950
of these doesn't line up one of these

639
00:21:11,970 --> 00:21:16,890
doesn't make sense so finding suspect

640
00:21:13,950 --> 00:21:18,720
data actually becomes a task that's

641
00:21:16,890 --> 00:21:22,290
actually worth doing and you can be

642
00:21:18,720 --> 00:21:23,940
sometimes right quite fruitful taking a

643
00:21:22,290 --> 00:21:25,500
look at some of the other structures and

644
00:21:23,940 --> 00:21:28,290
context that we know

645
00:21:25,500 --> 00:21:29,970
I did a test I knew that there was a

646
00:21:28,290 --> 00:21:31,470
test data collection in there so I did a

647
00:21:29,970 --> 00:21:34,110
search for okay show me everything which

648
00:21:31,470 --> 00:21:36,750
is DB test data which is going to be the

649
00:21:34,110 --> 00:21:38,280
initial part of my crud commands well I

650
00:21:36,750 --> 00:21:42,810
actually found the script that I wrote

651
00:21:38,280 --> 00:21:44,790
to insert 500 500 rose or 500 documents

652
00:21:42,810 --> 00:21:46,830
into my Mongo store and then I was able

653
00:21:44,790 --> 00:21:48,360
to say okay if I know that test data is

654
00:21:46,830 --> 00:21:50,310
my collection let's just back out and

655
00:21:48,360 --> 00:21:51,840
let's just take a look for test data and

656
00:21:50,310 --> 00:21:53,490
see what was actually there and now I'm

657
00:21:51,840 --> 00:21:55,860
actually able to pull out log entries as

658
00:21:53,490 --> 00:21:58,020
well so memory can be your best friend

659
00:21:55,860 --> 00:21:59,850
if you're trying to look for and this is

660
00:21:58,020 --> 00:22:01,889
no secret to any forensic ater how

661
00:21:59,850 --> 00:22:04,080
useful memory can be when your artifacts

662
00:22:01,890 --> 00:22:05,430
are limited or next to none I'm in these

663
00:22:04,080 --> 00:22:09,899
type of environments especially with no

664
00:22:05,430 --> 00:22:11,700
SQL data stores so that being said it's

665
00:22:09,900 --> 00:22:13,200
nice to talk about how bad everything is

666
00:22:11,700 --> 00:22:15,360
but once we know what's actually there

667
00:22:13,200 --> 00:22:17,310
let's talk a little bit about no SQL

668
00:22:15,360 --> 00:22:19,409
triaging and and how if we do run into

669
00:22:17,310 --> 00:22:20,730
environment where we have a no SQL data

670
00:22:19,410 --> 00:22:22,800
storm we need to pull some type of data

671
00:22:20,730 --> 00:22:24,300
from it let's take a look and see how we

672
00:22:22,800 --> 00:22:26,190
can what we can use to pull that in and

673
00:22:24,300 --> 00:22:27,810
then how we can pull it in I've actually

674
00:22:26,190 --> 00:22:29,520
I've kind of lined up a tool release

675
00:22:27,810 --> 00:22:31,560
with this as well so I hope that helps

676
00:22:29,520 --> 00:22:33,690
out if anyone here runs into Mongo I'd

677
00:22:31,560 --> 00:22:35,639
love to hear that story but let's take a

678
00:22:33,690 --> 00:22:37,650
look and think about kind of an idea for

679
00:22:35,640 --> 00:22:39,240
no SQL triage first before we actually

680
00:22:37,650 --> 00:22:40,560
get into triage let's say we encounter a

681
00:22:39,240 --> 00:22:42,000
DB what do we want to know well you're

682
00:22:40,560 --> 00:22:43,500
going to want to know metadata around

683
00:22:42,000 --> 00:22:46,140
that DB about what's in there

684
00:22:43,500 --> 00:22:47,640
information the collections I know J's

685
00:22:46,140 --> 00:22:49,320
on it or these types of data stores are

686
00:22:47,640 --> 00:22:51,990
technically schema list but there is

687
00:22:49,320 --> 00:22:54,720
some form of a schema their users any

688
00:22:51,990 --> 00:22:55,740
recent operations cluster and then also

689
00:22:54,720 --> 00:22:57,210
we're going to want to take a look at

690
00:22:55,740 --> 00:22:58,770
our source data the data that we've kind

691
00:22:57,210 --> 00:23:00,750
of talked about before our config file

692
00:22:58,770 --> 00:23:02,190
do we have any other logs that tie in is

693
00:23:00,750 --> 00:23:03,870
there any external information we can

694
00:23:02,190 --> 00:23:05,520
wrap in and then we can actually use

695
00:23:03,870 --> 00:23:08,790
Mongo itself to pull back great

696
00:23:05,520 --> 00:23:10,230
information as well and then I talked

697
00:23:08,790 --> 00:23:11,790
about this briefly earlier but when we

698
00:23:10,230 --> 00:23:14,010
look at kind of the built-in web tools

699
00:23:11,790 --> 00:23:15,590
Mongo actually has a built-in web

700
00:23:14,010 --> 00:23:17,850
interface it's disabled by default

701
00:23:15,590 --> 00:23:20,310
thankfully someone actually thought to

702
00:23:17,850 --> 00:23:21,959
turn something off that's where the

703
00:23:20,310 --> 00:23:23,280
config file can help out but it's a

704
00:23:21,960 --> 00:23:25,020
great source of information if it is

705
00:23:23,280 --> 00:23:26,940
turned on and actually the report

706
00:23:25,020 --> 00:23:28,260
published by the german university talks

707
00:23:26,940 --> 00:23:30,240
about how many of these have it enabled

708
00:23:28,260 --> 00:23:33,510
and it's a number excuse me in the tens

709
00:23:30,240 --> 00:23:35,400
of thousands this is actually the kind

710
00:23:33,510 --> 00:23:37,350
of the top of the screen shot from the

711
00:23:35,400 --> 00:23:38,640
manga web interface this is not recorded

712
00:23:37,350 --> 00:23:40,350
in the logs me hitting

713
00:23:38,640 --> 00:23:41,880
this and it's a great little information

714
00:23:40,350 --> 00:23:45,000
store to start to look at kind of the

715
00:23:41,880 --> 00:23:46,560
overview of my system mongo d tumblr is

716
00:23:45,000 --> 00:23:48,330
actually the name of the vm that i was

717
00:23:46,560 --> 00:23:52,710
running in so you get system information

718
00:23:48,330 --> 00:23:54,870
you get you know I PS uptime openssl a

719
00:23:52,710 --> 00:23:56,190
lot of metadata which is is great for an

720
00:23:54,870 --> 00:23:59,489
investigation great to kind of keep on

721
00:23:56,190 --> 00:24:01,290
file now there's also built-in tools

722
00:23:59,490 --> 00:24:03,570
that Mongo can help us search through as

723
00:24:01,290 --> 00:24:05,070
well again these are all built for

724
00:24:03,570 --> 00:24:07,590
developers in mind so they're built for

725
00:24:05,070 --> 00:24:10,310
metrics reporting timing how fast are

726
00:24:07,590 --> 00:24:12,780
you doing concept a B or C from a

727
00:24:10,310 --> 00:24:14,760
forensic point of view I like this data

728
00:24:12,780 --> 00:24:16,020
because I need to report on something

729
00:24:14,760 --> 00:24:18,240
and that's something that I'm reporting

730
00:24:16,020 --> 00:24:19,830
on is great I don't care so much that it

731
00:24:18,240 --> 00:24:21,660
took you 19 milliseconds insert data

732
00:24:19,830 --> 00:24:24,389
into collection one what I care more

733
00:24:21,660 --> 00:24:26,310
about is collection one so Mongo stat is

734
00:24:24,390 --> 00:24:27,570
one that it's a quick overview of the

735
00:24:26,310 --> 00:24:29,040
running instance but I'll be honest with

736
00:24:27,570 --> 00:24:30,210
you I look at that screen I don't see

737
00:24:29,040 --> 00:24:32,610
much from a forensic point of view this

738
00:24:30,210 --> 00:24:34,140
doesn't do much for me but it's there

739
00:24:32,610 --> 00:24:36,090
you know if for whatever reason you

740
00:24:34,140 --> 00:24:37,950
needed to say okay how big is my data

741
00:24:36,090 --> 00:24:39,570
store how it's mapped out that might go

742
00:24:37,950 --> 00:24:41,670
through but what's interesting is that

743
00:24:39,570 --> 00:24:43,620
it actually tracks insert query update

744
00:24:41,670 --> 00:24:46,050
and delete commands Akaar crud

745
00:24:43,620 --> 00:24:48,270
operations in a much much much larger

746
00:24:46,050 --> 00:24:50,190
environment this is going to attract the

747
00:24:48,270 --> 00:24:51,960
operations that you see going on so if

748
00:24:50,190 --> 00:24:53,130
you are in a large production

749
00:24:51,960 --> 00:24:55,590
environment this is going to give you an

750
00:24:53,130 --> 00:24:57,660
idea of how active is this server on a

751
00:24:55,590 --> 00:24:59,520
per second per minute whatever basis it

752
00:24:57,660 --> 00:25:01,080
may be what type of the hemas I'm

753
00:24:59,520 --> 00:25:02,580
actually dealing with but again from a

754
00:25:01,080 --> 00:25:05,909
forensic point of view that's that's

755
00:25:02,580 --> 00:25:09,120
just a snapshot of dev more importantly

756
00:25:05,910 --> 00:25:11,490
is Mongo top again developers in mind

757
00:25:09,120 --> 00:25:14,129
it's built for how fast am i doing read

758
00:25:11,490 --> 00:25:15,390
and write operations but we're forensic

759
00:25:14,130 --> 00:25:16,920
aters I don't care about read and write

760
00:25:15,390 --> 00:25:18,540
operations what I care about is that I

761
00:25:16,920 --> 00:25:20,550
just ran a command that has no log

762
00:25:18,540 --> 00:25:21,840
entries that gave me all of the

763
00:25:20,550 --> 00:25:23,700
collections that were inside of this

764
00:25:21,840 --> 00:25:25,110
particular DB so that's an awesome

765
00:25:23,700 --> 00:25:26,790
forensic source right there where I

766
00:25:25,110 --> 00:25:28,679
don't have to hit Mongo and I don't have

767
00:25:26,790 --> 00:25:30,600
to traipse all over my evidence and I

768
00:25:28,680 --> 00:25:34,200
can get a list of every collection and

769
00:25:30,600 --> 00:25:35,969
it's broken down into DB collection and

770
00:25:34,200 --> 00:25:38,910
then whatever may be inside so admin

771
00:25:35,970 --> 00:25:40,290
system roles is the admin DB system

772
00:25:38,910 --> 00:25:42,210
collection and then rolls are going to

773
00:25:40,290 --> 00:25:43,980
be the various documents inside admin

774
00:25:42,210 --> 00:25:45,720
system version so on and so forth so

775
00:25:43,980 --> 00:25:48,570
from here we've got a snapshot of what's

776
00:25:45,720 --> 00:25:51,220
inside and then there's also and this is

777
00:25:48,570 --> 00:25:52,928
my favorite one Mongo sniff

778
00:25:51,220 --> 00:25:53,950
and I don't know who came up with the

779
00:25:52,929 --> 00:25:56,500
idea of putting this in there but

780
00:25:53,950 --> 00:25:58,990
someone had security in mind Mongo sniff

781
00:25:56,500 --> 00:26:00,730
is okay so quick caveat it's not

782
00:25:58,990 --> 00:26:02,440
included by default with manga you have

783
00:26:00,730 --> 00:26:05,380
to build it from the source but Mongo

784
00:26:02,440 --> 00:26:07,240
sniff is essentially TCP dump for Mongo

785
00:26:05,380 --> 00:26:10,750
that is that is literally the website

786
00:26:07,240 --> 00:26:12,070
definition of what Mongo sniff is again

787
00:26:10,750 --> 00:26:13,480
require special build instructions

788
00:26:12,070 --> 00:26:14,799
however if you're in an environment you

789
00:26:13,480 --> 00:26:16,210
have Mongo sniff I would definitely use

790
00:26:14,799 --> 00:26:17,679
that because it's going to be it's going

791
00:26:16,210 --> 00:26:20,590
to hit Mongo immediately and directly

792
00:26:17,679 --> 00:26:21,850
instead of you haven't you know get TCP

793
00:26:20,590 --> 00:26:24,220
dump and get it operating and working

794
00:26:21,850 --> 00:26:26,230
and then take a look at this well we can

795
00:26:24,220 --> 00:26:27,909
also use wireshark as well to parse that

796
00:26:26,230 --> 00:26:29,980
traffic so Mongo sniffing able to give

797
00:26:27,909 --> 00:26:31,330
you that that pcap output but take a

798
00:26:29,980 --> 00:26:33,480
look Wireshark actually has Mongo

799
00:26:31,330 --> 00:26:36,158
decoders built-in so we're able to tell

800
00:26:33,480 --> 00:26:38,260
kind of you know hey this is Mongo

801
00:26:36,159 --> 00:26:40,270
traffic so another source of data is

802
00:26:38,260 --> 00:26:41,710
going to be our network dumps memory and

803
00:26:40,270 --> 00:26:43,270
networked together can give you a very

804
00:26:41,710 --> 00:26:46,090
very good overview of what you're seeing

805
00:26:43,270 --> 00:26:48,250
happening to in or beyond your MongoDB

806
00:26:46,090 --> 00:26:50,379
and then I took the liberty of actually

807
00:26:48,250 --> 00:26:52,780
matching these two up our pcap with our

808
00:26:50,380 --> 00:26:54,010
MongoDB log and you know our ports our

809
00:26:52,780 --> 00:26:55,570
connections and everything line up so

810
00:26:54,010 --> 00:26:57,700
it's a nice little kind of tie out to

811
00:26:55,570 --> 00:27:01,270
see how everything is kind of working

812
00:26:57,700 --> 00:27:03,460
together I unfortunately don't have the

813
00:27:01,270 --> 00:27:05,080
TCP stream screenshot in here however

814
00:27:03,460 --> 00:27:07,120
you can actually rip out the full

815
00:27:05,080 --> 00:27:09,428
commands that were that were sent

816
00:27:07,120 --> 00:27:11,320
through so again if the log isn't

817
00:27:09,429 --> 00:27:12,940
showing you what you want to see if you

818
00:27:11,320 --> 00:27:14,200
gotta if you got a pcap you've got some

819
00:27:12,940 --> 00:27:15,760
sort of network information you can look

820
00:27:14,200 --> 00:27:17,830
at you can pull out your statements out

821
00:27:15,760 --> 00:27:21,280
of here so again an excellent resource

822
00:27:17,830 --> 00:27:23,080
great place to go to for these and then

823
00:27:21,280 --> 00:27:26,559
last but not least we can go to Mongo

824
00:27:23,080 --> 00:27:28,539
itself Mongo is a javascript-based DB

825
00:27:26,559 --> 00:27:30,908
store so it's got great commands inside

826
00:27:28,539 --> 00:27:32,890
that we can use caveat don't need to say

827
00:27:30,909 --> 00:27:34,510
this out loud this may start to trample

828
00:27:32,890 --> 00:27:36,159
what you're going over this is going to

829
00:27:34,510 --> 00:27:37,510
be operations that the database is

830
00:27:36,159 --> 00:27:39,010
performing there's going to be a

831
00:27:37,510 --> 00:27:40,570
connection established to perform these

832
00:27:39,010 --> 00:27:42,190
you may have log entries that show you

833
00:27:40,570 --> 00:27:43,389
in there that may overwrite other things

834
00:27:42,190 --> 00:27:45,610
if there's if you're hit if you hit a

835
00:27:43,390 --> 00:27:47,049
rollover period but sometimes you need

836
00:27:45,610 --> 00:27:49,990
the information and there's a risk that

837
00:27:47,049 --> 00:27:52,000
you can accept so like DB server status

838
00:27:49,990 --> 00:27:53,470
for example is a quick Mongo command or

839
00:27:52,000 --> 00:27:56,010
sorry a quick JavaScript command in

840
00:27:53,470 --> 00:27:58,539
Mongo and it basically just gives you a

841
00:27:56,010 --> 00:28:00,158
massive JSON dump of everything going on

842
00:27:58,539 --> 00:28:01,750
the this is the top of the screen shot

843
00:28:00,159 --> 00:28:03,669
it's your host it's your versions the

844
00:28:01,750 --> 00:28:04,990
process you keep going further down you

845
00:28:03,669 --> 00:28:06,670
find out the size of the cluster

846
00:28:04,990 --> 00:28:08,320
how many nodes do I have one of my data

847
00:28:06,670 --> 00:28:09,820
stores one of my collections it's a

848
00:28:08,320 --> 00:28:11,649
massive collection of great information

849
00:28:09,820 --> 00:28:15,159
and it's a really quick kind of one-off

850
00:28:11,650 --> 00:28:17,350
DB information but even better we can

851
00:28:15,160 --> 00:28:19,360
actually issue java script commands

852
00:28:17,350 --> 00:28:21,100
through the command line so I don't need

853
00:28:19,360 --> 00:28:23,620
to get into the Mongo shell to issue

854
00:28:21,100 --> 00:28:26,559
these you can do a Mongo dash dash eval

855
00:28:23,620 --> 00:28:28,090
and pass it legit JavaScript and manga

856
00:28:26,559 --> 00:28:29,800
will parse that JavaScript and give you

857
00:28:28,090 --> 00:28:31,809
output in the command line now if I'm a

858
00:28:29,800 --> 00:28:33,280
red team or I'm extremely excited when I

859
00:28:31,809 --> 00:28:34,990
can see that something can parse

860
00:28:33,280 --> 00:28:37,480
JavaScript from the command line I love

861
00:28:34,990 --> 00:28:39,990
this but from again keeping our blue

862
00:28:37,480 --> 00:28:42,640
hats on we can use this to our advantage

863
00:28:39,990 --> 00:28:44,080
that this now gives us the ability to

864
00:28:42,640 --> 00:28:45,700
script things it gives us the ability to

865
00:28:44,080 --> 00:28:47,139
pull things remotely and to actually do

866
00:28:45,700 --> 00:28:49,990
a little more than kind of fumbling

867
00:28:47,140 --> 00:28:52,030
around triage so I don't know if there's

868
00:28:49,990 --> 00:28:53,440
any any tool time watcher or any home

869
00:28:52,030 --> 00:28:54,790
improvement Watchers but I haven't seen

870
00:28:53,440 --> 00:28:56,020
the show in a really long time and felt

871
00:28:54,790 --> 00:28:58,210
Tim Allen deserved a little bit of

872
00:28:56,020 --> 00:29:00,760
respect in there but what I wanted to do

873
00:28:58,210 --> 00:29:02,500
now is just take a moment I know that

874
00:29:00,760 --> 00:29:03,970
the demo gods have not been the nicest

875
00:29:02,500 --> 00:29:06,130
to this summit so all I've got are

876
00:29:03,970 --> 00:29:07,300
screenshots but literally the second I

877
00:29:06,130 --> 00:29:08,980
can go back to my keyboard I'm going to

878
00:29:07,300 --> 00:29:10,450
take this repo and make it public so if

879
00:29:08,980 --> 00:29:11,710
anyone has any interest in this kind of

880
00:29:10,450 --> 00:29:14,110
stuff you can feel free to look through

881
00:29:11,710 --> 00:29:17,380
the tools but what I wrote is a really

882
00:29:14,110 --> 00:29:20,080
quick MongoDB triage script I'm a loser

883
00:29:17,380 --> 00:29:21,760
and so it's version 0.1 right now i'll

884
00:29:20,080 --> 00:29:23,500
probably hit 1 point 0 in like five

885
00:29:21,760 --> 00:29:25,629
years when i finally determined it's

886
00:29:23,500 --> 00:29:28,000
worth it but for now I'll just keep

887
00:29:25,630 --> 00:29:29,140
subversion until I can but what this is

888
00:29:28,000 --> 00:29:30,640
going to do is it's going to take a lot

889
00:29:29,140 --> 00:29:31,750
of those different commands and it's

890
00:29:30,640 --> 00:29:33,220
going to make a lot easier for you to

891
00:29:31,750 --> 00:29:35,740
run you don't have to remember them and

892
00:29:33,220 --> 00:29:37,030
if you do run into a MongoDB script it's

893
00:29:35,740 --> 00:29:38,800
going to pull back some information for

894
00:29:37,030 --> 00:29:40,750
you it's going to pull back your server

895
00:29:38,800 --> 00:29:42,040
status which is that commanded we saw

896
00:29:40,750 --> 00:29:43,540
it's going to pull back your databases

897
00:29:42,040 --> 00:29:45,070
it's going to pull back your collection

898
00:29:43,540 --> 00:29:47,590
information and it's going to pull back

899
00:29:45,070 --> 00:29:49,480
the usernames and roles that are within

900
00:29:47,590 --> 00:29:51,610
the DB so from a triage point of view

901
00:29:49,480 --> 00:29:54,190
it's one script it hits everything from

902
00:29:51,610 --> 00:29:56,590
the outside of the Mongo shell so very

903
00:29:54,190 --> 00:29:58,420
very very little log trampling and it

904
00:29:56,590 --> 00:30:00,220
pulls back everything and then just to

905
00:29:58,420 --> 00:30:02,230
kind of walk through it can work locally

906
00:30:00,220 --> 00:30:05,230
or it can work remotely so you can feed

907
00:30:02,230 --> 00:30:07,240
it a porter and IP if you want and you

908
00:30:05,230 --> 00:30:09,309
can start from a test box and hit Mongo

909
00:30:07,240 --> 00:30:11,440
afar or you can go locally and hit Mongo

910
00:30:09,309 --> 00:30:13,809
close I'll be honest with you right now

911
00:30:11,440 --> 00:30:16,240
it's just a very very simple bash script

912
00:30:13,809 --> 00:30:17,889
there is a plan to make it kind of more

913
00:30:16,240 --> 00:30:18,590
robust than use some of those Ruby and

914
00:30:17,890 --> 00:30:19,760
Python API

915
00:30:18,590 --> 00:30:21,949
but if you remember me saying earlier

916
00:30:19,760 --> 00:30:24,289
api's hit your logs and they are

917
00:30:21,950 --> 00:30:25,640
extremely extremely noisy every single

918
00:30:24,289 --> 00:30:27,650
one of these outputs is going to be at

919
00:30:25,640 --> 00:30:29,539
least five to six lines added to the log

920
00:30:27,650 --> 00:30:31,340
so for files out we're very quickly

921
00:30:29,539 --> 00:30:32,809
getting at 30 lines in my log that

922
00:30:31,340 --> 00:30:35,720
weren't there before so in an attempt

923
00:30:32,809 --> 00:30:37,549
not to pollute my evidence so far we can

924
00:30:35,720 --> 00:30:39,440
start with simple Mongo but that being

925
00:30:37,549 --> 00:30:41,960
said I'd expected element in the future

926
00:30:39,440 --> 00:30:43,970
to include more API interaction because

927
00:30:41,960 --> 00:30:45,770
it is more robust and then as a triage

928
00:30:43,970 --> 00:30:48,320
as an examiner that's kind of a risk we

929
00:30:45,770 --> 00:30:49,580
have to accept and then here's an

930
00:30:48,320 --> 00:30:51,889
example of a couple the outputs we've

931
00:30:49,580 --> 00:30:52,908
talked about server status service that

932
00:30:51,890 --> 00:30:54,289
is one thing i didn't mention is it

933
00:30:52,909 --> 00:30:55,730
actually gives you network bites in and

934
00:30:54,289 --> 00:30:57,230
bites out that's tracked by default so

935
00:30:55,730 --> 00:30:59,600
that's another kind of resource you can

936
00:30:57,230 --> 00:31:01,669
look at and hey by MongoDB is only a gig

937
00:30:59,600 --> 00:31:03,139
and I've had 10 gigs out over the past

938
00:31:01,669 --> 00:31:06,020
hour there's something not right here

939
00:31:03,140 --> 00:31:07,669
and I don't have a busy server and then

940
00:31:06,020 --> 00:31:09,230
it also pulls back databases information

941
00:31:07,669 --> 00:31:11,029
so databases is going to be what

942
00:31:09,230 --> 00:31:13,610
databases you have what size are they

943
00:31:11,029 --> 00:31:15,529
are they are they empty what's the total

944
00:31:13,610 --> 00:31:16,908
size of my DB so you can start to match

945
00:31:15,529 --> 00:31:19,190
up all these stats and wrap this

946
00:31:16,909 --> 00:31:21,740
metadata around what a MongoDB what your

947
00:31:19,190 --> 00:31:23,659
data store is of interest and then all

948
00:31:21,740 --> 00:31:25,130
of your are all of your other artifacts

949
00:31:23,659 --> 00:31:26,539
either may or may not make sense as

950
00:31:25,130 --> 00:31:30,380
you're starting to look at that

951
00:31:26,539 --> 00:31:32,860
environment so with that again soon as I

952
00:31:30,380 --> 00:31:35,149
get to my keyboard I'll make it public

953
00:31:32,860 --> 00:31:36,860
if anyone's interested it's going to be

954
00:31:35,149 --> 00:31:38,928
at my github page at 505 forensic or

955
00:31:36,860 --> 00:31:40,539
github com / yo5 forensics if it's any

956
00:31:38,929 --> 00:31:42,620
interest to you I'd love some feedback

957
00:31:40,539 --> 00:31:43,669
currently there's only a MongoDB batch

958
00:31:42,620 --> 00:31:45,320
script but probably within the next

959
00:31:43,669 --> 00:31:47,539
three days I've got elasticsearch

960
00:31:45,320 --> 00:31:49,428
CouchDB Hadoop and couchbase quickly on

961
00:31:47,539 --> 00:31:50,840
the way I just had to deal with the

962
00:31:49,429 --> 00:31:52,429
remote parts of those because it's a few

963
00:31:50,840 --> 00:31:55,158
more commands and then more importantly

964
00:31:52,429 --> 00:31:56,149
and you know if it's a public story /

965
00:31:55,159 --> 00:31:57,890
it's a private story if anyone's

966
00:31:56,149 --> 00:31:59,899
encountered no SQL and your environments

967
00:31:57,890 --> 00:32:01,820
I'd love to hear about it the shortest

968
00:31:59,899 --> 00:32:03,110
anecdote i have is at work the other day

969
00:32:01,820 --> 00:32:04,789
i actually had someone hit me up and say

970
00:32:03,110 --> 00:32:07,699
hey I see you're talking about this I'm

971
00:32:04,789 --> 00:32:11,360
trying to break in and figure out how to

972
00:32:07,700 --> 00:32:13,340
use Mongo as an entry vector and you can

973
00:32:11,360 --> 00:32:15,500
actually be sitting in a Mongo shell and

974
00:32:13,340 --> 00:32:17,000
with a couple commands read out etsy

975
00:32:15,500 --> 00:32:18,890
password if you need to and then

976
00:32:17,000 --> 00:32:20,750
subsequently etsy shadow so it's all

977
00:32:18,890 --> 00:32:22,220
there there's a lot of capabilities

978
00:32:20,750 --> 00:32:24,440
inside and luckily we didn't get to talk

979
00:32:22,220 --> 00:32:28,070
about much of those now but there's a

980
00:32:24,440 --> 00:32:29,299
lot of opportunities to do evil here but

981
00:32:28,070 --> 00:32:30,168
I like to look at it from a positive

982
00:32:29,299 --> 00:32:32,210
point of view there's a lot of

983
00:32:30,169 --> 00:32:34,550
opportunities to really secure your data

984
00:32:32,210 --> 00:32:36,170
with a clean easy to use easy to install

985
00:32:34,550 --> 00:32:38,300
free and open source database store so

986
00:32:36,170 --> 00:32:40,430
hopefully concerned more with the ladder

987
00:32:38,300 --> 00:32:42,649
and not with the former but that being

988
00:32:40,430 --> 00:32:44,060
said thank you all for kind of watching

989
00:32:42,650 --> 00:32:44,900
an attending today again like I said if

990
00:32:44,060 --> 00:32:46,460
you wanted to learn something you should

991
00:32:44,900 --> 00:32:47,830
have been next door but hopefully this

992
00:32:46,460 --> 00:32:50,660
was insightful to at least one person

993
00:32:47,830 --> 00:32:52,399
with that if there's any questions I'd

994
00:32:50,660 --> 00:32:55,840
love to feel them now and again any any

995
00:32:52,400 --> 00:32:55,840
anecdotes I'd love as well yeah

996
00:33:04,450 --> 00:33:14,060
cut yeah I there is now I really like

997
00:33:10,610 --> 00:33:15,379
that so um it'sit's I for me and I think

998
00:33:14,060 --> 00:33:18,200
David made a good point this is a very

999
00:33:15,380 --> 00:33:19,430
unchartered space I'm liking the the map

1000
00:33:18,200 --> 00:33:21,560
of video game where it's just cloudy

1001
00:33:19,430 --> 00:33:23,930
pixels and no because no one's been

1002
00:33:21,560 --> 00:33:25,580
there yet right so how people can

1003
00:33:23,930 --> 00:33:26,990
benefit from no SQL research in the

1004
00:33:25,580 --> 00:33:28,220
future I'm all yours I'd love to hear

1005
00:33:26,990 --> 00:33:30,350
about it because I think your point

1006
00:33:28,220 --> 00:33:31,970
earlier about can you can you even is

1007
00:33:30,350 --> 00:33:33,500
this all for naught can you even turn

1008
00:33:31,970 --> 00:33:34,790
logging on that's an important

1009
00:33:33,500 --> 00:33:36,620
discussion to have with people who are

1010
00:33:34,790 --> 00:33:38,899
administering these dvds of yes you can

1011
00:33:36,620 --> 00:33:41,169
here's how you should do it so yes now

1012
00:33:38,900 --> 00:33:41,170
there is

1013
00:34:08,280 --> 00:34:11,760
agreed yeah there's no point in us

1014
00:34:10,469 --> 00:34:13,379
pointing out vulnerability all the time

1015
00:34:11,760 --> 00:34:16,919
don't don't answer a problem with

1016
00:34:13,380 --> 00:34:19,230
another problem right exactly exactly no

1017
00:34:16,918 --> 00:34:22,199
not now there is but that's definitely

1018
00:34:19,230 --> 00:34:25,080
an Avenue I will go down so thank you

1019
00:34:22,199 --> 00:34:28,109
appreciate that day on oh hi um if I way

1020
00:34:25,080 --> 00:34:29,489
short on time or okay well if there's

1021
00:34:28,110 --> 00:34:31,409
any other questions or anything if not I

1022
00:34:29,489 --> 00:34:34,830
hope everyone can have some free time

1023
00:34:31,409 --> 00:34:37,500
before lunch quick plug go watch the

1024
00:34:34,830 --> 00:34:40,460
forensic lunch when that comes on that

1025
00:34:37,500 --> 00:34:40,460
would be extremely important

1026
00:35:06,110 --> 00:35:12,630
so the time the mat is giving you now to

1027
00:35:09,270 --> 00:35:14,960
sign up for the other track done you're

1028
00:35:12,630 --> 00:35:14,960
welcome

